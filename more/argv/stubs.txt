kind = STUB
major_key = CEntryStub
name = CEntryStub
compiler = unknown
Instructions (size = 392)
0xffff7ab06060     0  add x11, jssp, x0, lsl #3
0xffff7ab06064     4  sub x11, x11, #0x8 (8)
0xffff7ab06068     8  sub csp, jssp, #0x10 (16)
0xffff7ab0606c    12  stp fp, lr, [jssp, #-16]!
0xffff7ab06070    16  mov fp, jssp
0xffff7ab06074    20  movz x10, #0x300000000
0xffff7ab06078    24  sub csp, jssp, #0x8 (8)
0xffff7ab0607c    28  str x10, [jssp, #-8]!
0xffff7ab06080    32  sub csp, jssp, #0x8 (8)
0xffff7ab06084    36  str xzr, [jssp, #-8]!
0xffff7ab06088    40  ldr x10, pc+248 (addr 0x0000ffff7ab06180)    ;; object: 0xffff7ab06001 <Code: STUB>
0xffff7ab0608c    44  sub csp, jssp, #0x8 (8)
0xffff7ab06090    48  str x10, [jssp, #-8]!
0xffff7ab06094    52  ldr x10, pc+244 (addr 0x0000ffff7ab06188)    ;; external reference (Isolate::c_entry_fp_address)
0xffff7ab06098    56  str fp, [x10]
0xffff7ab0609c    60  ldr x10, pc+244 (addr 0x0000ffff7ab06190)    ;; external reference (Isolate::context_address)
0xffff7ab060a0    64  str cp, [x10]
0xffff7ab060a4    68  sub csp, jssp, #0x20 (32)
0xffff7ab060a8    72  sub jssp, jssp, #0x20 (32)
0xffff7ab060ac    76  and csp, jssp, #0xfffffffffffffff0
0xffff7ab060b0    80  add x10, csp, #0x8 (8)
0xffff7ab060b4    84  stur x10, [fp, #-16]
0xffff7ab060b8    88  str x21, [csp, #8]
0xffff7ab060bc    92  str x22, [csp, #16]
0xffff7ab060c0    96  str x23, [csp, #24]
0xffff7ab060c4   100  mov x22, x0
0xffff7ab060c8   104  mov x23, x1
0xffff7ab060cc   108  mov x21, x11
0xffff7ab060d0   112  mov x0, x22
0xffff7ab060d4   116  mov x1, x21
0xffff7ab060d8   120  ldr x2, pc+192 (addr 0x0000ffff7ab06198)    ;; external reference (isolate)
0xffff7ab060dc   124  adr x12, #+0xc (addr 0xffff7ab060e8)
0xffff7ab060e0   128  str x12, [csp]
0xffff7ab060e4   132  blr x23
0xffff7ab060e8   136  ldr x16, [x26, #344]
0xffff7ab060ec   140  cmp x0, x16
0xffff7ab060f0   144  b.eq #+0x34 (addr 0xffff7ab06124)
0xffff7ab060f4   148  mov x11, x22
0xffff7ab060f8   152  ldr x21, [csp, #8]
0xffff7ab060fc   156  ldr x22, [csp, #16]
0xffff7ab06100   160  ldr x23, [csp, #24]
0xffff7ab06104   164  ldr x10, pc+156 (addr 0x0000ffff7ab061a0)    ;; external reference (Isolate::context_address)
0xffff7ab06108   168  ldr cp, [x10]
0xffff7ab0610c   172  ldr x10, pc+156 (addr 0x0000ffff7ab061a8)    ;; external reference (Isolate::c_entry_fp_address)
0xffff7ab06110   176  str xzr, [x10]
0xffff7ab06114   180  mov jssp, fp
0xffff7ab06118   184  ldp fp, lr, [jssp], #16
0xffff7ab0611c   188  add jssp, jssp, x11, lsl #3
0xffff7ab06120   192  ret
0xffff7ab06124   196  movz x0, #0x0
0xffff7ab06128   200  movz x1, #0x0
0xffff7ab0612c   204  ldr x2, pc+132 (addr 0x0000ffff7ab061b0)    ;; external reference (isolate)
0xffff7ab06130   208  ldr x16, pc+136 (addr 0x0000ffff7ab061b8)    ;; external reference (Runtime::UnwindAndFindExceptionHandler)
0xffff7ab06134   212  blr x16
0xffff7ab06138   216  ldr cp, pc+136 (addr 0x0000ffff7ab061c0)    ;; external reference (Isolate::pending_handler_context_address)
0xffff7ab0613c   220  ldr cp, [cp]
0xffff7ab06140   224  ldr jssp, pc+136 (addr 0x0000ffff7ab061c8)    ;; external reference (Isolate::pending_handler_sp_address)
0xffff7ab06144   228  ldr jssp, [jssp]
0xffff7ab06148   232  ldr fp, pc+136 (addr 0x0000ffff7ab061d0)    ;; external reference (Isolate::pending_handler_fp_address)
0xffff7ab0614c   236  ldr fp, [fp]
0xffff7ab06150   240  cbz cp, #+0x8 (addr 0xffff7ab06158)
0xffff7ab06154   244  stur cp, [fp, #-8]
0xffff7ab06158   248  ldr x10, pc+128 (addr 0x0000ffff7ab061d8)    ;; external reference (Isolate::pending_handler_code_address)
0xffff7ab0615c   252  ldr x10, [x10]
0xffff7ab06160   256  ldr x11, pc+128 (addr 0x0000ffff7ab061e0)    ;; external reference (Isolate::pending_handler_offset_address)
0xffff7ab06164   260  ldr x11, [x11]
0xffff7ab06168   264  add x10, x10, #0x5f (95)
0xffff7ab0616c   268  add x10, x10, x11
0xffff7ab06170   272  br x10
0xffff7ab06174   276  5800039f       constant pool begin (num_const = 28)    ;; constant pool
0xffff7ab06178   280  d63f03e0       constant
0xffff7ab0617c   284  d503201f       constant
0xffff7ab06180   288  7ab06001       constant
0xffff7ab06184   292  0000ffff       constant
0xffff7ab06188   296  09abedf8       constant
0xffff7ab0618c   300  00000000       constant
0xffff7ab06190   304  09abed90       constant
0xffff7ab06194   308  00000000       constant
0xffff7ab06198   312  09abd2d0       constant
0xffff7ab0619c   316  00000000       constant
0xffff7ab061a0   320  09abed90       constant
0xffff7ab061a4   324  00000000       constant
0xffff7ab061a8   328  09abedf8       constant
0xffff7ab061ac   332  00000000       constant
0xffff7ab061b0   336  09abd2d0       constant
0xffff7ab061b4   340  00000000       constant
0xffff7ab061b8   344  00e232d8       constant
0xffff7ab061bc   348  00000000       constant
0xffff7ab061c0   352  09abeda8       constant
0xffff7ab061c4   356  00000000       constant
0xffff7ab061c8   360  09abedc8       constant
0xffff7ab061cc   364  00000000       constant
0xffff7ab061d0   368  09abedc0       constant
0xffff7ab061d4   372  00000000       constant
0xffff7ab061d8   376  09abedb0       constant
0xffff7ab061dc   380  00000000       constant
0xffff7ab061e0   384  09abedb8       constant
0xffff7ab061e4   388  00000000       constant


RelocInfo (size = 31)
0xffff7ab06088  embedded object  (0xffff7ab06001 <Code: STUB>)
0xffff7ab06094  external reference (Isolate::c_entry_fp_address)  (0x9abedf8)
0xffff7ab0609c  external reference (Isolate::context_address)  (0x9abed90)
0xffff7ab060d8  external reference (isolate)  (0x9abd2d0)
0xffff7ab06104  external reference (Isolate::context_address)  (0x9abed90)
0xffff7ab0610c  external reference (Isolate::c_entry_fp_address)  (0x9abedf8)
0xffff7ab0612c  external reference (isolate)  (0x9abd2d0)
0xffff7ab06130  external reference (Runtime::UnwindAndFindExceptionHandler)  (0xe232d8)
0xffff7ab06138  external reference (Isolate::pending_handler_context_address)  (0x9abeda8)
0xffff7ab06140  external reference (Isolate::pending_handler_sp_address)  (0x9abedc8)
0xffff7ab06148  external reference (Isolate::pending_handler_fp_address)  (0x9abedc0)
0xffff7ab06158  external reference (Isolate::pending_handler_code_address)  (0x9abedb0)
0xffff7ab06160  external reference (Isolate::pending_handler_offset_address)  (0x9abedb8)
0xffff7ab06174  constant pool (size 116)


kind = STUB
major_key = CEntryStub
name = CEntryStub
compiler = unknown
Instructions (size = 488)
0xffff7ab06260     0  add x11, jssp, x0, lsl #3
0xffff7ab06264     4  sub x11, x11, #0x8 (8)
0xffff7ab06268     8  sub csp, jssp, #0x10 (16)
0xffff7ab0626c    12  stp fp, lr, [jssp, #-16]!
0xffff7ab06270    16  mov fp, jssp
0xffff7ab06274    20  movz x10, #0x300000000
0xffff7ab06278    24  sub csp, jssp, #0x8 (8)
0xffff7ab0627c    28  str x10, [jssp, #-8]!
0xffff7ab06280    32  sub csp, jssp, #0x8 (8)
0xffff7ab06284    36  str xzr, [jssp, #-8]!
0xffff7ab06288    40  ldr x10, pc+344 (addr 0x0000ffff7ab063e0)    ;; object: 0xffff7ab06201 <Code: STUB>
0xffff7ab0628c    44  sub csp, jssp, #0x8 (8)
0xffff7ab06290    48  str x10, [jssp, #-8]!
0xffff7ab06294    52  ldr x10, pc+340 (addr 0x0000ffff7ab063e8)    ;; external reference (Isolate::c_entry_fp_address)
0xffff7ab06298    56  str fp, [x10]
0xffff7ab0629c    60  ldr x10, pc+340 (addr 0x0000ffff7ab063f0)    ;; external reference (Isolate::context_address)
0xffff7ab062a0    64  str cp, [x10]
0xffff7ab062a4    68  sub csp, jssp, #0xc0 (192)
0xffff7ab062a8    72  stp d28, d29, [jssp, #-32]!
0xffff7ab062ac    76  stp d30, d31, [jssp, #16]
0xffff7ab062b0    80  stp d24, d25, [jssp, #-32]!
0xffff7ab062b4    84  stp d26, d27, [jssp, #16]
0xffff7ab062b8    88  stp d20, d21, [jssp, #-32]!
0xffff7ab062bc    92  stp d22, d23, [jssp, #16]
0xffff7ab062c0    96  stp d16, d17, [jssp, #-32]!
0xffff7ab062c4   100  stp d18, d19, [jssp, #16]
0xffff7ab062c8   104  stp d4, d5, [jssp, #-32]!
0xffff7ab062cc   108  stp d6, d7, [jssp, #16]
0xffff7ab062d0   112  stp d0, d1, [jssp, #-32]!
0xffff7ab062d4   116  stp d2, d3, [jssp, #16]
0xffff7ab062d8   120  sub csp, jssp, #0x20 (32)
0xffff7ab062dc   124  sub jssp, jssp, #0x20 (32)
0xffff7ab062e0   128  and csp, jssp, #0xfffffffffffffff0
0xffff7ab062e4   132  add x10, csp, #0x8 (8)
0xffff7ab062e8   136  stur x10, [fp, #-16]
0xffff7ab062ec   140  str x21, [csp, #8]
0xffff7ab062f0   144  str x22, [csp, #16]
0xffff7ab062f4   148  str x23, [csp, #24]
0xffff7ab062f8   152  mov x22, x0
0xffff7ab062fc   156  mov x23, x1
0xffff7ab06300   160  mov x21, x11
0xffff7ab06304   164  mov x0, x22
0xffff7ab06308   168  mov x1, x21
0xffff7ab0630c   172  ldr x2, pc+236 (addr 0x0000ffff7ab063f8)    ;; external reference (isolate)
0xffff7ab06310   176  adr x12, #+0xc (addr 0xffff7ab0631c)
0xffff7ab06314   180  str x12, [csp]
0xffff7ab06318   184  blr x23
0xffff7ab0631c   188  ldr x16, [x26, #344]
0xffff7ab06320   192  cmp x0, x16
0xffff7ab06324   196  b.eq #+0x64 (addr 0xffff7ab06388)
0xffff7ab06328   200  mov x11, x22
0xffff7ab0632c   204  ldr x21, [csp, #8]
0xffff7ab06330   208  ldr x22, [csp, #16]
0xffff7ab06334   212  ldr x23, [csp, #24]
0xffff7ab06338   216  ldp d30, d31, [fp, #-40]
0xffff7ab0633c   220  ldp d28, d29, [fp, #-56]
0xffff7ab06340   224  ldp d26, d27, [fp, #-72]
0xffff7ab06344   228  ldp d24, d25, [fp, #-88]
0xffff7ab06348   232  ldp d22, d23, [fp, #-104]
0xffff7ab0634c   236  ldp d20, d21, [fp, #-120]
0xffff7ab06350   240  ldp d18, d19, [fp, #-136]
0xffff7ab06354   244  ldp d16, d17, [fp, #-152]
0xffff7ab06358   248  ldp d6, d7, [fp, #-168]
0xffff7ab0635c   252  ldp d4, d5, [fp, #-184]
0xffff7ab06360   256  ldp d2, d3, [fp, #-200]
0xffff7ab06364   260  ldp d0, d1, [fp, #-216]
0xffff7ab06368   264  ldr x10, pc+152 (addr 0x0000ffff7ab06400)    ;; external reference (Isolate::context_address)
0xffff7ab0636c   268  ldr cp, [x10]
0xffff7ab06370   272  ldr x10, pc+152 (addr 0x0000ffff7ab06408)    ;; external reference (Isolate::c_entry_fp_address)
0xffff7ab06374   276  str xzr, [x10]
0xffff7ab06378   280  mov jssp, fp
0xffff7ab0637c   284  ldp fp, lr, [jssp], #16
0xffff7ab06380   288  add jssp, jssp, x11, lsl #3
0xffff7ab06384   292  ret
0xffff7ab06388   296  movz x0, #0x0
0xffff7ab0638c   300  movz x1, #0x0
0xffff7ab06390   304  ldr x2, pc+128 (addr 0x0000ffff7ab06410)    ;; external reference (isolate)
0xffff7ab06394   308  ldr x16, pc+132 (addr 0x0000ffff7ab06418)    ;; external reference (Runtime::UnwindAndFindExceptionHandler)
0xffff7ab06398   312  blr x16
0xffff7ab0639c   316  ldr cp, pc+132 (addr 0x0000ffff7ab06420)    ;; external reference (Isolate::pending_handler_context_address)
0xffff7ab063a0   320  ldr cp, [cp]
0xffff7ab063a4   324  ldr jssp, pc+132 (addr 0x0000ffff7ab06428)    ;; external reference (Isolate::pending_handler_sp_address)
0xffff7ab063a8   328  ldr jssp, [jssp]
0xffff7ab063ac   332  ldr fp, pc+132 (addr 0x0000ffff7ab06430)    ;; external reference (Isolate::pending_handler_fp_address)
0xffff7ab063b0   336  ldr fp, [fp]
0xffff7ab063b4   340  cbz cp, #+0x8 (addr 0xffff7ab063bc)
0xffff7ab063b8   344  stur cp, [fp, #-8]
0xffff7ab063bc   348  ldr x10, pc+124 (addr 0x0000ffff7ab06438)    ;; external reference (Isolate::pending_handler_code_address)
0xffff7ab063c0   352  ldr x10, [x10]
0xffff7ab063c4   356  ldr x11, pc+124 (addr 0x0000ffff7ab06440)    ;; external reference (Isolate::pending_handler_offset_address)
0xffff7ab063c8   360  ldr x11, [x11]
0xffff7ab063cc   364  add x10, x10, #0x5f (95)
0xffff7ab063d0   368  add x10, x10, x11
0xffff7ab063d4   372  br x10
0xffff7ab063d8   376  5800037f       constant pool begin (num_const = 27)    ;; constant pool
0xffff7ab063dc   380  d63f03e0       constant
0xffff7ab063e0   384  7ab06201       constant
0xffff7ab063e4   388  0000ffff       constant
0xffff7ab063e8   392  09abedf8       constant
0xffff7ab063ec   396  00000000       constant
0xffff7ab063f0   400  09abed90       constant
0xffff7ab063f4   404  00000000       constant
0xffff7ab063f8   408  09abd2d0       constant
0xffff7ab063fc   412  00000000       constant
0xffff7ab06400   416  09abed90       constant
0xffff7ab06404   420  00000000       constant
0xffff7ab06408   424  09abedf8       constant
0xffff7ab0640c   428  00000000       constant
0xffff7ab06410   432  09abd2d0       constant
0xffff7ab06414   436  00000000       constant
0xffff7ab06418   440  00e232d8       constant
0xffff7ab0641c   444  00000000       constant
0xffff7ab06420   448  09abeda8       constant
0xffff7ab06424   452  00000000       constant
0xffff7ab06428   456  09abedc8       constant
0xffff7ab0642c   460  00000000       constant
0xffff7ab06430   464  09abedc0       constant
0xffff7ab06434   468  00000000       constant
0xffff7ab06438   472  09abedb0       constant
0xffff7ab0643c   476  00000000       constant
0xffff7ab06440   480  09abedb8       constant
0xffff7ab06444   484  00000000       constant


RelocInfo (size = 35)
0xffff7ab06288  embedded object  (0xffff7ab06201 <Code: STUB>)
0xffff7ab06294  external reference (Isolate::c_entry_fp_address)  (0x9abedf8)
0xffff7ab0629c  external reference (Isolate::context_address)  (0x9abed90)
0xffff7ab0630c  external reference (isolate)  (0x9abd2d0)
0xffff7ab06368  external reference (Isolate::context_address)  (0x9abed90)
0xffff7ab06370  external reference (Isolate::c_entry_fp_address)  (0x9abedf8)
0xffff7ab06390  external reference (isolate)  (0x9abd2d0)
0xffff7ab06394  external reference (Runtime::UnwindAndFindExceptionHandler)  (0xe232d8)
0xffff7ab0639c  external reference (Isolate::pending_handler_context_address)  (0x9abeda8)
0xffff7ab063a4  external reference (Isolate::pending_handler_sp_address)  (0x9abedc8)
0xffff7ab063ac  external reference (Isolate::pending_handler_fp_address)  (0x9abedc0)
0xffff7ab063bc  external reference (Isolate::pending_handler_code_address)  (0x9abedb0)
0xffff7ab063c4  external reference (Isolate::pending_handler_offset_address)  (0x9abedb8)
0xffff7ab063d8  constant pool (size 112)


kind = STUB
major_key = StoreBufferOverflowStub
name = StoreBufferOverflowStub
compiler = unknown
Instructions (size = 120)
0xffff7ab064c0     0  sub csp, jssp, #0x90 (144)
0xffff7ab064c4     4  stp x14, x15, [jssp, #-32]!
0xffff7ab064c8     8  stp x18, lr, [jssp, #16]
0xffff7ab064cc    12  stp x10, x11, [jssp, #-32]!
0xffff7ab064d0    16  stp x12, x13, [jssp, #16]
0xffff7ab064d4    20  stp x6, x7, [jssp, #-32]!
0xffff7ab064d8    24  stp x8, x9, [jssp, #16]
0xffff7ab064dc    28  stp x2, x3, [jssp, #-32]!
0xffff7ab064e0    32  stp x4, x5, [jssp, #16]
0xffff7ab064e4    36  stp x0, x1, [jssp, #-16]!
0xffff7ab064e8    40  ldr x0, pc+64 (addr 0x0000ffff7ab06528)    ;; external reference (isolate)
0xffff7ab064ec    44  ldr x16, pc+68 (addr 0x0000ffff7ab06530)    ;; external reference (StoreBuffer::StoreBufferOverflow)
0xffff7ab064f0    48  and csp, jssp, #0xfffffffffffffff0
0xffff7ab064f4    52  blr x16
0xffff7ab064f8    56  ldp x2, x3, [jssp, #16]
0xffff7ab064fc    60  ldp x0, x1, [jssp], #32
0xffff7ab06500    64  ldp x6, x7, [jssp, #16]
0xffff7ab06504    68  ldp x4, x5, [jssp], #32
0xffff7ab06508    72  ldp x10, x11, [jssp, #16]
0xffff7ab0650c    76  ldp x8, x9, [jssp], #32
0xffff7ab06510    80  ldp x14, x15, [jssp, #16]
0xffff7ab06514    84  ldp x12, x13, [jssp], #32
0xffff7ab06518    88  ldp x18, lr, [jssp], #16
0xffff7ab0651c    92  ret
0xffff7ab06520    96  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab06524   100  d63f03e0       constant
0xffff7ab06528   104  09abd2d0       constant
0xffff7ab0652c   108  00000000       constant
0xffff7ab06530   112  00c716d0       constant
0xffff7ab06534   116  00000000       constant


RelocInfo (size = 10)
0xffff7ab064e8  external reference (isolate)  (0x9abd2d0)
0xffff7ab064ec  external reference (StoreBuffer::StoreBufferOverflow)  (0xc716d0)
0xffff7ab06520  constant pool (size 24)


kind = STUB
major_key = StoreBufferOverflowStub
name = StoreBufferOverflowStub
compiler = unknown
Instructions (size = 216)
0xffff7ab065a0     0  sub csp, jssp, #0x90 (144)
0xffff7ab065a4     4  stp x14, x15, [jssp, #-32]!
0xffff7ab065a8     8  stp x18, lr, [jssp, #16]
0xffff7ab065ac    12  stp x10, x11, [jssp, #-32]!
0xffff7ab065b0    16  stp x12, x13, [jssp, #16]
0xffff7ab065b4    20  stp x6, x7, [jssp, #-32]!
0xffff7ab065b8    24  stp x8, x9, [jssp, #16]
0xffff7ab065bc    28  stp x2, x3, [jssp, #-32]!
0xffff7ab065c0    32  stp x4, x5, [jssp, #16]
0xffff7ab065c4    36  stp x0, x1, [jssp, #-16]!
0xffff7ab065c8    40  sub csp, jssp, #0xb0 (176)
0xffff7ab065cc    44  stp d26, d27, [jssp, #-32]!
0xffff7ab065d0    48  stp d28, d29, [jssp, #16]
0xffff7ab065d4    52  stp d22, d23, [jssp, #-32]!
0xffff7ab065d8    56  stp d24, d25, [jssp, #16]
0xffff7ab065dc    60  stp d18, d19, [jssp, #-32]!
0xffff7ab065e0    64  stp d20, d21, [jssp, #16]
0xffff7ab065e4    68  stp d6, d7, [jssp, #-32]!
0xffff7ab065e8    72  stp d16, d17, [jssp, #16]
0xffff7ab065ec    76  stp d2, d3, [jssp, #-32]!
0xffff7ab065f0    80  stp d4, d5, [jssp, #16]
0xffff7ab065f4    84  stp d0, d1, [jssp, #-16]!
0xffff7ab065f8    88  ldr x0, pc+112 (addr 0x0000ffff7ab06668)    ;; external reference (isolate)
0xffff7ab065fc    92  ldr x16, pc+116 (addr 0x0000ffff7ab06670)    ;; external reference (StoreBuffer::StoreBufferOverflow)
0xffff7ab06600    96  and csp, jssp, #0xfffffffffffffff0
0xffff7ab06604   100  blr x16
0xffff7ab06608   104  ldp d2, d3, [jssp, #16]
0xffff7ab0660c   108  ldp d0, d1, [jssp], #32
0xffff7ab06610   112  ldp d6, d7, [jssp, #16]
0xffff7ab06614   116  ldp d4, d5, [jssp], #32
0xffff7ab06618   120  ldp d18, d19, [jssp, #16]
0xffff7ab0661c   124  ldp d16, d17, [jssp], #32
0xffff7ab06620   128  ldp d22, d23, [jssp, #16]
0xffff7ab06624   132  ldp d20, d21, [jssp], #32
0xffff7ab06628   136  ldp d26, d27, [jssp, #16]
0xffff7ab0662c   140  ldp d24, d25, [jssp], #32
0xffff7ab06630   144  ldp d28, d29, [jssp], #16
0xffff7ab06634   148  ldp x2, x3, [jssp, #16]
0xffff7ab06638   152  ldp x0, x1, [jssp], #32
0xffff7ab0663c   156  ldp x6, x7, [jssp, #16]
0xffff7ab06640   160  ldp x4, x5, [jssp], #32
0xffff7ab06644   164  ldp x10, x11, [jssp, #16]
0xffff7ab06648   168  ldp x8, x9, [jssp], #32
0xffff7ab0664c   172  ldp x14, x15, [jssp, #16]
0xffff7ab06650   176  ldp x12, x13, [jssp], #32
0xffff7ab06654   180  ldp x18, lr, [jssp], #16
0xffff7ab06658   184  ret
0xffff7ab0665c   188  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab06660   192  d63f03e0       constant
0xffff7ab06664   196  d503201f       constant
0xffff7ab06668   200  09abd2d0       constant
0xffff7ab0666c   204  00000000       constant
0xffff7ab06670   208  00c716d0       constant
0xffff7ab06674   212  00000000       constant


RelocInfo (size = 14)
0xffff7ab065f8  external reference (isolate)  (0x9abd2d0)
0xffff7ab065fc  external reference (StoreBuffer::StoreBufferOverflow)  (0xc716d0)
0xffff7ab0665c  constant pool (size 28)


kind = STUB
major_key = StubFailureTrampolineStub
name = StubFailureTrampolineStub
compiler = unknown
Instructions (size = 48)
0xffff7ab066e0     0  ldr x16, pc+40 (addr 0x0000ffff7ab06708)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab066e4     4  blr x16
0xffff7ab066e8     8  ldur x1, [fp, #-24]
0xffff7ab066ec    12  mov jssp, fp
0xffff7ab066f0    16  ldp fp, lr, [jssp], #16
0xffff7ab066f4    20  add jssp, jssp, x1, lsl #3
0xffff7ab066f8    24  ret
0xffff7ab066fc    28  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab06700    32  d63f03e0       constant
0xffff7ab06704    36  d503201f       constant
0xffff7ab06708    40  7ab06260       constant
0xffff7ab0670c    44  0000ffff       constant


RelocInfo (size = 7)
0xffff7ab066e0  code target (STUB)  (0xffff7ab06260)
0xffff7ab066fc  constant pool (size 20)


kind = STUB
major_key = StubFailureTrampolineStub
name = StubFailureTrampolineStub
compiler = unknown
Instructions (size = 48)
0xffff7ab06780     0  ldr x16, pc+40 (addr 0x0000ffff7ab067a8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab06784     4  blr x16
0xffff7ab06788     8  ldur x1, [fp, #-24]
0xffff7ab0678c    12  add x1, x1, #0x1 (1)
0xffff7ab06790    16  mov jssp, fp
0xffff7ab06794    20  ldp fp, lr, [jssp], #16
0xffff7ab06798    24  add jssp, jssp, x1, lsl #3
0xffff7ab0679c    28  ret
0xffff7ab067a0    32  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab067a4    36  d63f03e0       constant
0xffff7ab067a8    40  7ab06260       constant
0xffff7ab067ac    44  0000ffff       constant


RelocInfo (size = 7)
0xffff7ab06780  code target (STUB)  (0xffff7ab06260)
0xffff7ab067a0  constant pool (size 16)


kind = STUB
major_key = StoreRegistersStateStub
name = StoreRegistersStateStub
compiler = unknown
Instructions (size = 80)
0xffff7ab06820     0  mov x17, lr
0xffff7ab06824     4  mov lr, x16
0xffff7ab06828     8  sub csp, jssp, #0x20 (32)
0xffff7ab0682c    12  sub jssp, jssp, #0x20 (32)
0xffff7ab06830    16  sub csp, jssp, #0xe0 (224)
0xffff7ab06834    20  stp x26, cp, [jssp, #-32]!
0xffff7ab06838    24  stp fp, lr, [jssp, #16]
0xffff7ab0683c    28  stp x22, x23, [jssp, #-32]!
0xffff7ab06840    32  stp x24, x25, [jssp, #16]
0xffff7ab06844    36  stp x18, x19, [jssp, #-32]!
0xffff7ab06848    40  stp x20, x21, [jssp, #16]
0xffff7ab0684c    44  stp x12, x13, [jssp, #-32]!
0xffff7ab06850    48  stp x14, x15, [jssp, #16]
0xffff7ab06854    52  stp x8, x9, [jssp, #-32]!
0xffff7ab06858    56  stp x10, x11, [jssp, #16]
0xffff7ab0685c    60  stp x4, x5, [jssp, #-32]!
0xffff7ab06860    64  stp x6, x7, [jssp, #16]
0xffff7ab06864    68  stp x0, x1, [jssp, #-32]!
0xffff7ab06868    72  stp x2, x3, [jssp, #16]
0xffff7ab0686c    76  ret x17


RelocInfo (size = 0)


kind = STUB
major_key = RestoreRegistersStateStub
name = RestoreRegistersStateStub
compiler = unknown
Instructions (size = 68)
0xffff7ab068e0     0  mov x16, lr
0xffff7ab068e4     4  ldp x2, x3, [jssp, #16]
0xffff7ab068e8     8  ldp x0, x1, [jssp], #32
0xffff7ab068ec    12  ldp x6, x7, [jssp, #16]
0xffff7ab068f0    16  ldp x4, x5, [jssp], #32
0xffff7ab068f4    20  ldp x10, x11, [jssp, #16]
0xffff7ab068f8    24  ldp x8, x9, [jssp], #32
0xffff7ab068fc    28  ldp x14, x15, [jssp, #16]
0xffff7ab06900    32  ldp x12, x13, [jssp], #32
0xffff7ab06904    36  ldp x20, x21, [jssp, #16]
0xffff7ab06908    40  ldp x18, x19, [jssp], #32
0xffff7ab0690c    44  ldp x24, x25, [jssp, #16]
0xffff7ab06910    48  ldp x22, x23, [jssp], #32
0xffff7ab06914    52  ldp fp, lr, [jssp, #16]
0xffff7ab06918    56  ldp x26, cp, [jssp], #32
0xffff7ab0691c    60  add jssp, jssp, #0x20 (32)
0xffff7ab06920    64  ret x16


RelocInfo (size = 0)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 469)
0xffff7ab069a0     0  movz w0, #0x6000
0xffff7ab069a4     4  movk w0, #0x9, lsl #16
0xffff7ab069a8     8  cmp w0, #0x30 (48)
0xffff7ab069ac    12  b.ls #+0x174 (addr 0xffff7ab06b20)
0xffff7ab069b0    16  movz x3, #0xe2c0
0xffff7ab069b4    20  movk x3, #0x9ab, lsl #16
0xffff7ab069b8    24  ldp x4, x0, [x3]
0xffff7ab069bc    28  adds x16, x4, #0x60 (96)
0xffff7ab069c0    32  ccmp x16, x0, #nzCv, lo
0xffff7ab069c4    36  b.hi #+0x98 (addr 0xffff7ab06a5c)
0xffff7ab069c8    40  str x16, [x3]
0xffff7ab069cc    44  orr x4, x4, #0x1
0xffff7ab069d0    48  movz w0, #0x0
0xffff7ab069d4    52  stur x0, [x4, #47]
0xffff7ab069d8    56  ldur x0, [x1, #23]
0xffff7ab069dc    60  stur x0, [x4, #-1]
0xffff7ab069e0    64  ldr x0, pc+232 (addr 0x0000ffff7ab06ac8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab069e4    68  stur x0, [x4, #7]
0xffff7ab069e8    72  ldr x0, pc+232 (addr 0x0000ffff7ab06ad0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab069ec    76  stur x0, [x4, #15]
0xffff7ab069f0    80  movz x0, #0x0
0xffff7ab069f4    84  stur x0, [x4, #23]
0xffff7ab069f8    88  add x0, x4, #0x20 (32)
0xffff7ab069fc    92  ldr x1, pc+220 (addr 0x0000ffff7ab06ad8)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab06a00    96  stur x1, [x0, #-1]
0xffff7ab06a04   100  stur x2, [x0, #7]
0xffff7ab06a08   104  ldur w0, [x2, #35]
0xffff7ab06a0c   108  add w0, w0, #0x1 (1)
0xffff7ab06a10   112  lsl x0, x0, #32
0xffff7ab06a14   116  stur x0, [x2, #31]
0xffff7ab06a18   120  add x0, x4, #0x30 (48)
0xffff7ab06a1c   124  ldr x1, pc+196 (addr 0x0000ffff7ab06ae0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab06a20   128  stur x1, [x0, #-1]
0xffff7ab06a24   132  movz x1, #0x400000000
0xffff7ab06a28   136  stur x1, [x0, #7]
0xffff7ab06a2c   140  stur x0, [x4, #15]
0xffff7ab06a30   144  ldr x1, pc+184 (addr 0x0000ffff7ab06ae8)    ;; object: 0x20d04519 <the hole>
0xffff7ab06a34   148  stur x1, [x0, #15]
0xffff7ab06a38   152  ldr x1, pc+184 (addr 0x0000ffff7ab06af0)    ;; object: 0x20d04519 <the hole>
0xffff7ab06a3c   156  stur x1, [x0, #23]
0xffff7ab06a40   160  ldr x1, pc+184 (addr 0x0000ffff7ab06af8)    ;; object: 0x20d04519 <the hole>
0xffff7ab06a44   164  stur x1, [x0, #31]
0xffff7ab06a48   168  ldr x1, pc+184 (addr 0x0000ffff7ab06b00)    ;; object: 0x20d04519 <the hole>
0xffff7ab06a4c   172  stur x1, [x0, #39]
0xffff7ab06a50   176  mov x0, x4
0xffff7ab06a54   180  add jssp, jssp, #0x8 (8)
0xffff7ab06a58   184  ret
0xffff7ab06a5c   188  sub csp, jssp, #0x10 (16)
0xffff7ab06a60   192  stp fp, lr, [jssp, #-16]!
0xffff7ab06a64   196  movz fp, #0xa00000000
0xffff7ab06a68   200  sub csp, jssp, #0x8 (8)
0xffff7ab06a6c   204  str fp, [jssp, #-8]!
0xffff7ab06a70   208  add fp, jssp, #0x8 (8)
0xffff7ab06a74   212  movz x4, #0x0
0xffff7ab06a78   216  mov x16, lr
0xffff7ab06a7c   220  ldr x17, pc+140 (addr 0x0000ffff7ab06b08)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab06a80   224  blr x17
0xffff7ab06a84   228  movz x0, #0x6000000000
0xffff7ab06a88   232  movz x10, #0x0
0xffff7ab06a8c   236  sub csp, jssp, #0x10 (16)
0xffff7ab06a90   240  stp x10, x0, [jssp, #-16]!
0xffff7ab06a94   244  movz x0, #0x2
0xffff7ab06a98   248  movz x1, #0x5b88
0xffff7ab06a9c   252  movk x1, #0xe2, lsl #16
0xffff7ab06aa0   256  ldr x16, pc+112 (addr 0x0000ffff7ab06b10)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab06aa4   260  blr x16
0xffff7ab06aa8   264  str x0, [jssp, #32]
0xffff7ab06aac   268  ldr x16, pc+108 (addr 0x0000ffff7ab06b18)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab06ab0   272  blr x16
0xffff7ab06ab4   276  ldr lr, [jssp, #16]
0xffff7ab06ab8   280  ldp xzr, fp, [jssp], #24
0xffff7ab06abc   284  b #-0xec (addr 0xffff7ab069d0)
0xffff7ab06ac0   288  580002ff       constant pool begin (num_const = 23)    ;; constant pool
0xffff7ab06ac4   292  d63f03e0       constant
0xffff7ab06ac8   296  20d04201       constant
0xffff7ab06acc   300  00000000       constant
0xffff7ab06ad0   304  20d04201       constant
0xffff7ab06ad4   308  00000000       constant
0xffff7ab06ad8   312  4ec05d81       constant
0xffff7ab06adc   316  00000000       constant
0xffff7ab06ae0   320  4ec04259       constant
0xffff7ab06ae4   324  00000000       constant
0xffff7ab06ae8   328  20d04519       constant
0xffff7ab06aec   332  00000000       constant
0xffff7ab06af0   336  20d04519       constant
0xffff7ab06af4   340  00000000       constant
0xffff7ab06af8   344  20d04519       constant
0xffff7ab06afc   348  00000000       constant
0xffff7ab06b00   352  20d04519       constant
0xffff7ab06b04   356  00000000       constant
0xffff7ab06b08   360  7ab06820       constant
0xffff7ab06b0c   364  0000ffff       constant
0xffff7ab06b10   368  7ab06260       constant
0xffff7ab06b14   372  0000ffff       constant
0xffff7ab06b18   376  7ab068e0       constant
0xffff7ab06b1c   380  0000ffff       constant
0xffff7ab06b20   384  movz x16, #0x0
0xffff7ab06b24   388  sub csp, jssp, #0x10 (16)
0xffff7ab06b28   392  stp fp, lr, [jssp, #-16]!
0xffff7ab06b2c   396  bl #+0x4 (addr 0xffff7ab06b30)
0xffff7ab06b30   400  movz x17, #0xa00000000
0xffff7ab06b34   404  sub csp, jssp, #0x10 (16)
0xffff7ab06b38   408  stp x17, cp, [jssp, #-16]!
0xffff7ab06b3c   412  add fp, jssp, #0x10 (16)
0xffff7ab06b40   416  ldr x17, pc+24 (addr 0x0000ffff7ab06b58)    ;; lazy deoptimization bailout 0
0xffff7ab06b44   420  add x17, x17, x16
0xffff7ab06b48   424  br x17
0xffff7ab06b4c   428  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab06b50   432  d63f03e0       constant
0xffff7ab06b54   436  d503201f       constant
0xffff7ab06b58   440  7a906000       constant
0xffff7ab06b5c   444  0000ffff       constant


Safepoints (size = 21)
0xffff7ab06aa8   264  000 | x1 | x2 | x4 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 29)
0xffff7ab069e0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab069e8  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab069fc  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab06a1c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab06a30  embedded object  (0x20d04519 <the hole>)
0xffff7ab06a38  embedded object  (0x20d04519 <the hole>)
0xffff7ab06a40  embedded object  (0x20d04519 <the hole>)
0xffff7ab06a48  embedded object  (0x20d04519 <the hole>)
0xffff7ab06a7c  code target (STUB)  (0xffff7ab06820)
0xffff7ab06aa0  code target (STUB)  (0xffff7ab06260)
0xffff7ab06aac  code target (STUB)  (0xffff7ab068e0)
0xffff7ab06ac0  constant pool (size 96)
0xffff7ab06b40  runtime entry
0xffff7ab06b4c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNoArgumentConstructorStub
name = ArrayNoArgumentConstructorStub_FAST_SMI_ELEMENTS
compiler = crankshaft
Instructions (size = 469)
0xffff7ab069a0     0  movz w0, #0x6000
0xffff7ab069a4     4  movk w0, #0x9, lsl #16
0xffff7ab069a8     8  cmp w0, #0x30 (48)
0xffff7ab069ac    12  b.ls #+0x174 (addr 0xffff7ab06b20)
0xffff7ab069b0    16  movz x3, #0xe2c0
0xffff7ab069b4    20  movk x3, #0x9ab, lsl #16
0xffff7ab069b8    24  ldp x4, x0, [x3]
0xffff7ab069bc    28  adds x16, x4, #0x60 (96)
0xffff7ab069c0    32  ccmp x16, x0, #nzCv, lo
0xffff7ab069c4    36  b.hi #+0x98 (addr 0xffff7ab06a5c)
0xffff7ab069c8    40  str x16, [x3]
0xffff7ab069cc    44  orr x4, x4, #0x1
0xffff7ab069d0    48  movz w0, #0x0
0xffff7ab069d4    52  stur x0, [x4, #47]
0xffff7ab069d8    56  ldur x0, [x1, #23]
0xffff7ab069dc    60  stur x0, [x4, #-1]
0xffff7ab069e0    64  ldr x0, pc+232 (addr 0x0000ffff7ab06ac8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab069e4    68  stur x0, [x4, #7]
0xffff7ab069e8    72  ldr x0, pc+232 (addr 0x0000ffff7ab06ad0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab069ec    76  stur x0, [x4, #15]
0xffff7ab069f0    80  movz x0, #0x0
0xffff7ab069f4    84  stur x0, [x4, #23]
0xffff7ab069f8    88  add x0, x4, #0x20 (32)
0xffff7ab069fc    92  ldr x1, pc+220 (addr 0x0000ffff7ab06ad8)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab06a00    96  stur x1, [x0, #-1]
0xffff7ab06a04   100  stur x2, [x0, #7]
0xffff7ab06a08   104  ldur w0, [x2, #35]
0xffff7ab06a0c   108  add w0, w0, #0x1 (1)
0xffff7ab06a10   112  lsl x0, x0, #32
0xffff7ab06a14   116  stur x0, [x2, #31]
0xffff7ab06a18   120  add x0, x4, #0x30 (48)
0xffff7ab06a1c   124  ldr x1, pc+196 (addr 0x0000ffff7ab06ae0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab06a20   128  stur x1, [x0, #-1]
0xffff7ab06a24   132  movz x1, #0x400000000
0xffff7ab06a28   136  stur x1, [x0, #7]
0xffff7ab06a2c   140  stur x0, [x4, #15]
0xffff7ab06a30   144  ldr x1, pc+184 (addr 0x0000ffff7ab06ae8)    ;; object: 0x20d04519 <the hole>
0xffff7ab06a34   148  stur x1, [x0, #15]
0xffff7ab06a38   152  ldr x1, pc+184 (addr 0x0000ffff7ab06af0)    ;; object: 0x20d04519 <the hole>
0xffff7ab06a3c   156  stur x1, [x0, #23]
0xffff7ab06a40   160  ldr x1, pc+184 (addr 0x0000ffff7ab06af8)    ;; object: 0x20d04519 <the hole>
0xffff7ab06a44   164  stur x1, [x0, #31]
0xffff7ab06a48   168  ldr x1, pc+184 (addr 0x0000ffff7ab06b00)    ;; object: 0x20d04519 <the hole>
0xffff7ab06a4c   172  stur x1, [x0, #39]
0xffff7ab06a50   176  mov x0, x4
0xffff7ab06a54   180  add jssp, jssp, #0x8 (8)
0xffff7ab06a58   184  ret
0xffff7ab06a5c   188  sub csp, jssp, #0x10 (16)
0xffff7ab06a60   192  stp fp, lr, [jssp, #-16]!
0xffff7ab06a64   196  movz fp, #0xa00000000
0xffff7ab06a68   200  sub csp, jssp, #0x8 (8)
0xffff7ab06a6c   204  str fp, [jssp, #-8]!
0xffff7ab06a70   208  add fp, jssp, #0x8 (8)
0xffff7ab06a74   212  movz x4, #0x0
0xffff7ab06a78   216  mov x16, lr
0xffff7ab06a7c   220  ldr x17, pc+140 (addr 0x0000ffff7ab06b08)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab06a80   224  blr x17
0xffff7ab06a84   228  movz x0, #0x6000000000
0xffff7ab06a88   232  movz x10, #0x0
0xffff7ab06a8c   236  sub csp, jssp, #0x10 (16)
0xffff7ab06a90   240  stp x10, x0, [jssp, #-16]!
0xffff7ab06a94   244  movz x0, #0x2
0xffff7ab06a98   248  movz x1, #0x5b88
0xffff7ab06a9c   252  movk x1, #0xe2, lsl #16
0xffff7ab06aa0   256  ldr x16, pc+112 (addr 0x0000ffff7ab06b10)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab06aa4   260  blr x16
0xffff7ab06aa8   264  str x0, [jssp, #32]
0xffff7ab06aac   268  ldr x16, pc+108 (addr 0x0000ffff7ab06b18)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab06ab0   272  blr x16
0xffff7ab06ab4   276  ldr lr, [jssp, #16]
0xffff7ab06ab8   280  ldp xzr, fp, [jssp], #24
0xffff7ab06abc   284  b #-0xec (addr 0xffff7ab069d0)
0xffff7ab06ac0   288  580002ff       constant pool begin (num_const = 23)    ;; constant pool
0xffff7ab06ac4   292  d63f03e0       constant
0xffff7ab06ac8   296  20d04201       constant
0xffff7ab06acc   300  00000000       constant
0xffff7ab06ad0   304  20d04201       constant
0xffff7ab06ad4   308  00000000       constant
0xffff7ab06ad8   312  4ec05d81       constant
0xffff7ab06adc   316  00000000       constant
0xffff7ab06ae0   320  4ec04259       constant
0xffff7ab06ae4   324  00000000       constant
0xffff7ab06ae8   328  20d04519       constant
0xffff7ab06aec   332  00000000       constant
0xffff7ab06af0   336  20d04519       constant
0xffff7ab06af4   340  00000000       constant
0xffff7ab06af8   344  20d04519       constant
0xffff7ab06afc   348  00000000       constant
0xffff7ab06b00   352  20d04519       constant
0xffff7ab06b04   356  00000000       constant
0xffff7ab06b08   360  7ab06820       constant
0xffff7ab06b0c   364  0000ffff       constant
0xffff7ab06b10   368  7ab06260       constant
0xffff7ab06b14   372  0000ffff       constant
0xffff7ab06b18   376  7ab068e0       constant
0xffff7ab06b1c   380  0000ffff       constant
0xffff7ab06b20   384  movz x16, #0x0
0xffff7ab06b24   388  sub csp, jssp, #0x10 (16)
0xffff7ab06b28   392  stp fp, lr, [jssp, #-16]!
0xffff7ab06b2c   396  bl #+0x4 (addr 0xffff7ab06b30)
0xffff7ab06b30   400  movz x17, #0xa00000000
0xffff7ab06b34   404  sub csp, jssp, #0x10 (16)
0xffff7ab06b38   408  stp x17, cp, [jssp, #-16]!
0xffff7ab06b3c   412  add fp, jssp, #0x10 (16)
0xffff7ab06b40   416  ldr x17, pc+24 (addr 0x0000ffff7ab06b58)    ;; lazy deoptimization bailout 0
0xffff7ab06b44   420  add x17, x17, x16
0xffff7ab06b48   424  br x17
0xffff7ab06b4c   428  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab06b50   432  d63f03e0       constant
0xffff7ab06b54   436  d503201f       constant
0xffff7ab06b58   440  7a906000       constant
0xffff7ab06b5c   444  0000ffff       constant


Safepoints (size = 21)
0xffff7ab06aa8   264  000 | x1 | x2 | x4 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 29)
0xffff7ab069e0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab069e8  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab069fc  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab06a1c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab06a30  embedded object  (0x20d04519 <the hole>)
0xffff7ab06a38  embedded object  (0x20d04519 <the hole>)
0xffff7ab06a40  embedded object  (0x20d04519 <the hole>)
0xffff7ab06a48  embedded object  (0x20d04519 <the hole>)
0xffff7ab06a7c  code target (STUB)  (0xffff7ab06820)
0xffff7ab06aa0  code target (STUB)  (0xffff7ab06260)
0xffff7ab06aac  code target (STUB)  (0xffff7ab068e0)
0xffff7ab06ac0  constant pool (size 96)
0xffff7ab06b40  runtime entry
0xffff7ab06b4c  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 429)
0xffff7ab06be0     0  movz w0, #0x6000
0xffff7ab06be4     4  movk w0, #0x9, lsl #16
0xffff7ab06be8     8  cmp w0, #0x30 (48)
0xffff7ab06bec    12  b.ls #+0x14c (addr 0xffff7ab06d38)
0xffff7ab06bf0    16  movz x2, #0xe2c0
0xffff7ab06bf4    20  movk x2, #0x9ab, lsl #16
0xffff7ab06bf8    24  ldp x3, x0, [x2]
0xffff7ab06bfc    28  adds x16, x3, #0x50 (80)
0xffff7ab06c00    32  ccmp x16, x0, #nzCv, lo
0xffff7ab06c04    36  b.hi #+0x78 (addr 0xffff7ab06c7c)
0xffff7ab06c08    40  str x16, [x2]
0xffff7ab06c0c    44  orr x3, x3, #0x1
0xffff7ab06c10    48  movz w0, #0x0
0xffff7ab06c14    52  stur x0, [x3, #31]
0xffff7ab06c18    56  ldur x0, [x1, #23]
0xffff7ab06c1c    60  stur x0, [x3, #-1]
0xffff7ab06c20    64  ldr x0, pc+200 (addr 0x0000ffff7ab06ce8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab06c24    68  stur x0, [x3, #7]
0xffff7ab06c28    72  ldr x0, pc+200 (addr 0x0000ffff7ab06cf0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab06c2c    76  stur x0, [x3, #15]
0xffff7ab06c30    80  movz x0, #0x0
0xffff7ab06c34    84  stur x0, [x3, #23]
0xffff7ab06c38    88  add x0, x3, #0x20 (32)
0xffff7ab06c3c    92  ldr x1, pc+188 (addr 0x0000ffff7ab06cf8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab06c40    96  stur x1, [x0, #-1]
0xffff7ab06c44   100  movz x1, #0x400000000
0xffff7ab06c48   104  stur x1, [x0, #7]
0xffff7ab06c4c   108  stur x0, [x3, #15]
0xffff7ab06c50   112  ldr x1, pc+176 (addr 0x0000ffff7ab06d00)    ;; object: 0x20d04519 <the hole>
0xffff7ab06c54   116  stur x1, [x0, #15]
0xffff7ab06c58   120  ldr x1, pc+176 (addr 0x0000ffff7ab06d08)    ;; object: 0x20d04519 <the hole>
0xffff7ab06c5c   124  stur x1, [x0, #23]
0xffff7ab06c60   128  ldr x1, pc+176 (addr 0x0000ffff7ab06d10)    ;; object: 0x20d04519 <the hole>
0xffff7ab06c64   132  stur x1, [x0, #31]
0xffff7ab06c68   136  ldr x1, pc+176 (addr 0x0000ffff7ab06d18)    ;; object: 0x20d04519 <the hole>
0xffff7ab06c6c   140  stur x1, [x0, #39]
0xffff7ab06c70   144  mov x0, x3
0xffff7ab06c74   148  add jssp, jssp, #0x8 (8)
0xffff7ab06c78   152  ret
0xffff7ab06c7c   156  sub csp, jssp, #0x10 (16)
0xffff7ab06c80   160  stp fp, lr, [jssp, #-16]!
0xffff7ab06c84   164  movz fp, #0xa00000000
0xffff7ab06c88   168  sub csp, jssp, #0x8 (8)
0xffff7ab06c8c   172  str fp, [jssp, #-8]!
0xffff7ab06c90   176  add fp, jssp, #0x8 (8)
0xffff7ab06c94   180  movz x3, #0x0
0xffff7ab06c98   184  mov x16, lr
0xffff7ab06c9c   188  ldr x17, pc+132 (addr 0x0000ffff7ab06d20)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab06ca0   192  blr x17
0xffff7ab06ca4   196  movz x0, #0x5000000000
0xffff7ab06ca8   200  movz x10, #0x0
0xffff7ab06cac   204  sub csp, jssp, #0x10 (16)
0xffff7ab06cb0   208  stp x10, x0, [jssp, #-16]!
0xffff7ab06cb4   212  movz x0, #0x2
0xffff7ab06cb8   216  movz x1, #0x5b88
0xffff7ab06cbc   220  movk x1, #0xe2, lsl #16
0xffff7ab06cc0   224  ldr x16, pc+104 (addr 0x0000ffff7ab06d28)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab06cc4   228  blr x16
0xffff7ab06cc8   232  str x0, [jssp, #24]
0xffff7ab06ccc   236  ldr x16, pc+100 (addr 0x0000ffff7ab06d30)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab06cd0   240  blr x16
0xffff7ab06cd4   244  ldr lr, [jssp, #16]
0xffff7ab06cd8   248  ldp xzr, fp, [jssp], #24
0xffff7ab06cdc   252  b #-0xcc (addr 0xffff7ab06c10)
0xffff7ab06ce0   256  580002bf       constant pool begin (num_const = 21)    ;; constant pool
0xffff7ab06ce4   260  d63f03e0       constant
0xffff7ab06ce8   264  20d04201       constant
0xffff7ab06cec   268  00000000       constant
0xffff7ab06cf0   272  20d04201       constant
0xffff7ab06cf4   276  00000000       constant
0xffff7ab06cf8   280  4ec04259       constant
0xffff7ab06cfc   284  00000000       constant
0xffff7ab06d00   288  20d04519       constant
0xffff7ab06d04   292  00000000       constant
0xffff7ab06d08   296  20d04519       constant
0xffff7ab06d0c   300  00000000       constant
0xffff7ab06d10   304  20d04519       constant
0xffff7ab06d14   308  00000000       constant
0xffff7ab06d18   312  20d04519       constant
0xffff7ab06d1c   316  00000000       constant
0xffff7ab06d20   320  7ab06820       constant
0xffff7ab06d24   324  0000ffff       constant
0xffff7ab06d28   328  7ab06260       constant
0xffff7ab06d2c   332  0000ffff       constant
0xffff7ab06d30   336  7ab068e0       constant
0xffff7ab06d34   340  0000ffff       constant
0xffff7ab06d38   344  movz x16, #0x0
0xffff7ab06d3c   348  sub csp, jssp, #0x10 (16)
0xffff7ab06d40   352  stp fp, lr, [jssp, #-16]!
0xffff7ab06d44   356  bl #+0x4 (addr 0xffff7ab06d48)
0xffff7ab06d48   360  movz x17, #0xa00000000
0xffff7ab06d4c   364  sub csp, jssp, #0x10 (16)
0xffff7ab06d50   368  stp x17, cp, [jssp, #-16]!
0xffff7ab06d54   372  add fp, jssp, #0x10 (16)
0xffff7ab06d58   376  ldr x17, pc+24 (addr 0x0000ffff7ab06d70)    ;; lazy deoptimization bailout 0
0xffff7ab06d5c   380  add x17, x17, x16
0xffff7ab06d60   384  br x17
0xffff7ab06d64   388  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab06d68   392  d63f03e0       constant
0xffff7ab06d6c   396  d503201f       constant
0xffff7ab06d70   400  7a906000       constant
0xffff7ab06d74   404  0000ffff       constant


Safepoints (size = 21)
0xffff7ab06cc8   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0xffff7ab06c20  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab06c28  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab06c3c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab06c50  embedded object  (0x20d04519 <the hole>)
0xffff7ab06c58  embedded object  (0x20d04519 <the hole>)
0xffff7ab06c60  embedded object  (0x20d04519 <the hole>)
0xffff7ab06c68  embedded object  (0x20d04519 <the hole>)
0xffff7ab06c9c  code target (STUB)  (0xffff7ab06820)
0xffff7ab06cc0  code target (STUB)  (0xffff7ab06260)
0xffff7ab06ccc  code target (STUB)  (0xffff7ab068e0)
0xffff7ab06ce0  constant pool (size 88)
0xffff7ab06d58  runtime entry
0xffff7ab06d64  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNoArgumentConstructorStub
name = ArrayNoArgumentConstructorStub_FAST_SMI_ELEMENTS_DISABLE_ALLOCATION_SITES
compiler = crankshaft
Instructions (size = 429)
0xffff7ab06be0     0  movz w0, #0x6000
0xffff7ab06be4     4  movk w0, #0x9, lsl #16
0xffff7ab06be8     8  cmp w0, #0x30 (48)
0xffff7ab06bec    12  b.ls #+0x14c (addr 0xffff7ab06d38)
0xffff7ab06bf0    16  movz x2, #0xe2c0
0xffff7ab06bf4    20  movk x2, #0x9ab, lsl #16
0xffff7ab06bf8    24  ldp x3, x0, [x2]
0xffff7ab06bfc    28  adds x16, x3, #0x50 (80)
0xffff7ab06c00    32  ccmp x16, x0, #nzCv, lo
0xffff7ab06c04    36  b.hi #+0x78 (addr 0xffff7ab06c7c)
0xffff7ab06c08    40  str x16, [x2]
0xffff7ab06c0c    44  orr x3, x3, #0x1
0xffff7ab06c10    48  movz w0, #0x0
0xffff7ab06c14    52  stur x0, [x3, #31]
0xffff7ab06c18    56  ldur x0, [x1, #23]
0xffff7ab06c1c    60  stur x0, [x3, #-1]
0xffff7ab06c20    64  ldr x0, pc+200 (addr 0x0000ffff7ab06ce8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab06c24    68  stur x0, [x3, #7]
0xffff7ab06c28    72  ldr x0, pc+200 (addr 0x0000ffff7ab06cf0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab06c2c    76  stur x0, [x3, #15]
0xffff7ab06c30    80  movz x0, #0x0
0xffff7ab06c34    84  stur x0, [x3, #23]
0xffff7ab06c38    88  add x0, x3, #0x20 (32)
0xffff7ab06c3c    92  ldr x1, pc+188 (addr 0x0000ffff7ab06cf8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab06c40    96  stur x1, [x0, #-1]
0xffff7ab06c44   100  movz x1, #0x400000000
0xffff7ab06c48   104  stur x1, [x0, #7]
0xffff7ab06c4c   108  stur x0, [x3, #15]
0xffff7ab06c50   112  ldr x1, pc+176 (addr 0x0000ffff7ab06d00)    ;; object: 0x20d04519 <the hole>
0xffff7ab06c54   116  stur x1, [x0, #15]
0xffff7ab06c58   120  ldr x1, pc+176 (addr 0x0000ffff7ab06d08)    ;; object: 0x20d04519 <the hole>
0xffff7ab06c5c   124  stur x1, [x0, #23]
0xffff7ab06c60   128  ldr x1, pc+176 (addr 0x0000ffff7ab06d10)    ;; object: 0x20d04519 <the hole>
0xffff7ab06c64   132  stur x1, [x0, #31]
0xffff7ab06c68   136  ldr x1, pc+176 (addr 0x0000ffff7ab06d18)    ;; object: 0x20d04519 <the hole>
0xffff7ab06c6c   140  stur x1, [x0, #39]
0xffff7ab06c70   144  mov x0, x3
0xffff7ab06c74   148  add jssp, jssp, #0x8 (8)
0xffff7ab06c78   152  ret
0xffff7ab06c7c   156  sub csp, jssp, #0x10 (16)
0xffff7ab06c80   160  stp fp, lr, [jssp, #-16]!
0xffff7ab06c84   164  movz fp, #0xa00000000
0xffff7ab06c88   168  sub csp, jssp, #0x8 (8)
0xffff7ab06c8c   172  str fp, [jssp, #-8]!
0xffff7ab06c90   176  add fp, jssp, #0x8 (8)
0xffff7ab06c94   180  movz x3, #0x0
0xffff7ab06c98   184  mov x16, lr
0xffff7ab06c9c   188  ldr x17, pc+132 (addr 0x0000ffff7ab06d20)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab06ca0   192  blr x17
0xffff7ab06ca4   196  movz x0, #0x5000000000
0xffff7ab06ca8   200  movz x10, #0x0
0xffff7ab06cac   204  sub csp, jssp, #0x10 (16)
0xffff7ab06cb0   208  stp x10, x0, [jssp, #-16]!
0xffff7ab06cb4   212  movz x0, #0x2
0xffff7ab06cb8   216  movz x1, #0x5b88
0xffff7ab06cbc   220  movk x1, #0xe2, lsl #16
0xffff7ab06cc0   224  ldr x16, pc+104 (addr 0x0000ffff7ab06d28)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab06cc4   228  blr x16
0xffff7ab06cc8   232  str x0, [jssp, #24]
0xffff7ab06ccc   236  ldr x16, pc+100 (addr 0x0000ffff7ab06d30)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab06cd0   240  blr x16
0xffff7ab06cd4   244  ldr lr, [jssp, #16]
0xffff7ab06cd8   248  ldp xzr, fp, [jssp], #24
0xffff7ab06cdc   252  b #-0xcc (addr 0xffff7ab06c10)
0xffff7ab06ce0   256  580002bf       constant pool begin (num_const = 21)    ;; constant pool
0xffff7ab06ce4   260  d63f03e0       constant
0xffff7ab06ce8   264  20d04201       constant
0xffff7ab06cec   268  00000000       constant
0xffff7ab06cf0   272  20d04201       constant
0xffff7ab06cf4   276  00000000       constant
0xffff7ab06cf8   280  4ec04259       constant
0xffff7ab06cfc   284  00000000       constant
0xffff7ab06d00   288  20d04519       constant
0xffff7ab06d04   292  00000000       constant
0xffff7ab06d08   296  20d04519       constant
0xffff7ab06d0c   300  00000000       constant
0xffff7ab06d10   304  20d04519       constant
0xffff7ab06d14   308  00000000       constant
0xffff7ab06d18   312  20d04519       constant
0xffff7ab06d1c   316  00000000       constant
0xffff7ab06d20   320  7ab06820       constant
0xffff7ab06d24   324  0000ffff       constant
0xffff7ab06d28   328  7ab06260       constant
0xffff7ab06d2c   332  0000ffff       constant
0xffff7ab06d30   336  7ab068e0       constant
0xffff7ab06d34   340  0000ffff       constant
0xffff7ab06d38   344  movz x16, #0x0
0xffff7ab06d3c   348  sub csp, jssp, #0x10 (16)
0xffff7ab06d40   352  stp fp, lr, [jssp, #-16]!
0xffff7ab06d44   356  bl #+0x4 (addr 0xffff7ab06d48)
0xffff7ab06d48   360  movz x17, #0xa00000000
0xffff7ab06d4c   364  sub csp, jssp, #0x10 (16)
0xffff7ab06d50   368  stp x17, cp, [jssp, #-16]!
0xffff7ab06d54   372  add fp, jssp, #0x10 (16)
0xffff7ab06d58   376  ldr x17, pc+24 (addr 0x0000ffff7ab06d70)    ;; lazy deoptimization bailout 0
0xffff7ab06d5c   380  add x17, x17, x16
0xffff7ab06d60   384  br x17
0xffff7ab06d64   388  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab06d68   392  d63f03e0       constant
0xffff7ab06d6c   396  d503201f       constant
0xffff7ab06d70   400  7a906000       constant
0xffff7ab06d74   404  0000ffff       constant


Safepoints (size = 21)
0xffff7ab06cc8   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0xffff7ab06c20  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab06c28  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab06c3c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab06c50  embedded object  (0x20d04519 <the hole>)
0xffff7ab06c58  embedded object  (0x20d04519 <the hole>)
0xffff7ab06c60  embedded object  (0x20d04519 <the hole>)
0xffff7ab06c68  embedded object  (0x20d04519 <the hole>)
0xffff7ab06c9c  code target (STUB)  (0xffff7ab06820)
0xffff7ab06cc0  code target (STUB)  (0xffff7ab06260)
0xffff7ab06ccc  code target (STUB)  (0xffff7ab068e0)
0xffff7ab06ce0  constant pool (size 88)
0xffff7ab06d58  runtime entry
0xffff7ab06d64  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 485)
0xffff7ab06e00     0  movz w0, #0x6000
0xffff7ab06e04     4  movk w0, #0x9, lsl #16
0xffff7ab06e08     8  cmp w0, #0x30 (48)
0xffff7ab06e0c    12  b.ls #+0x184 (addr 0xffff7ab06f90)
0xffff7ab06e10    16  movz x3, #0xe2c0
0xffff7ab06e14    20  movk x3, #0x9ab, lsl #16
0xffff7ab06e18    24  ldp x4, x0, [x3]
0xffff7ab06e1c    28  adds x16, x4, #0x60 (96)
0xffff7ab06e20    32  ccmp x16, x0, #nzCv, lo
0xffff7ab06e24    36  b.hi #+0xa4 (addr 0xffff7ab06ec8)
0xffff7ab06e28    40  str x16, [x3]
0xffff7ab06e2c    44  orr x4, x4, #0x1
0xffff7ab06e30    48  movz w0, #0x0
0xffff7ab06e34    52  stur x0, [x4, #47]
0xffff7ab06e38    56  ldur x0, [x1, #39]
0xffff7ab06e3c    60  ldur x0, [x0, #39]
0xffff7ab06e40    64  movz x16, #0x17f
0xffff7ab06e44    68  ldr x0, [x0, x16]
0xffff7ab06e48    72  stur x0, [x4, #-1]
0xffff7ab06e4c    76  ldr x0, pc+236 (addr 0x0000ffff7ab06f38)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab06e50    80  stur x0, [x4, #7]
0xffff7ab06e54    84  ldr x0, pc+236 (addr 0x0000ffff7ab06f40)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab06e58    88  stur x0, [x4, #15]
0xffff7ab06e5c    92  movz x0, #0x0
0xffff7ab06e60    96  stur x0, [x4, #23]
0xffff7ab06e64   100  add x0, x4, #0x20 (32)
0xffff7ab06e68   104  ldr x1, pc+224 (addr 0x0000ffff7ab06f48)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab06e6c   108  stur x1, [x0, #-1]
0xffff7ab06e70   112  stur x2, [x0, #7]
0xffff7ab06e74   116  ldur w0, [x2, #35]
0xffff7ab06e78   120  add w0, w0, #0x1 (1)
0xffff7ab06e7c   124  lsl x0, x0, #32
0xffff7ab06e80   128  stur x0, [x2, #31]
0xffff7ab06e84   132  add x0, x4, #0x30 (48)
0xffff7ab06e88   136  ldr x1, pc+200 (addr 0x0000ffff7ab06f50)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab06e8c   140  stur x1, [x0, #-1]
0xffff7ab06e90   144  movz x1, #0x400000000
0xffff7ab06e94   148  stur x1, [x0, #7]
0xffff7ab06e98   152  stur x0, [x4, #15]
0xffff7ab06e9c   156  ldr x1, pc+188 (addr 0x0000ffff7ab06f58)    ;; object: 0x20d04519 <the hole>
0xffff7ab06ea0   160  stur x1, [x0, #15]
0xffff7ab06ea4   164  ldr x1, pc+188 (addr 0x0000ffff7ab06f60)    ;; object: 0x20d04519 <the hole>
0xffff7ab06ea8   168  stur x1, [x0, #23]
0xffff7ab06eac   172  ldr x1, pc+188 (addr 0x0000ffff7ab06f68)    ;; object: 0x20d04519 <the hole>
0xffff7ab06eb0   176  stur x1, [x0, #31]
0xffff7ab06eb4   180  ldr x1, pc+188 (addr 0x0000ffff7ab06f70)    ;; object: 0x20d04519 <the hole>
0xffff7ab06eb8   184  stur x1, [x0, #39]
0xffff7ab06ebc   188  mov x0, x4
0xffff7ab06ec0   192  add jssp, jssp, #0x8 (8)
0xffff7ab06ec4   196  ret
0xffff7ab06ec8   200  sub csp, jssp, #0x10 (16)
0xffff7ab06ecc   204  stp fp, lr, [jssp, #-16]!
0xffff7ab06ed0   208  movz fp, #0xa00000000
0xffff7ab06ed4   212  sub csp, jssp, #0x8 (8)
0xffff7ab06ed8   216  str fp, [jssp, #-8]!
0xffff7ab06edc   220  add fp, jssp, #0x8 (8)
0xffff7ab06ee0   224  movz x4, #0x0
0xffff7ab06ee4   228  mov x16, lr
0xffff7ab06ee8   232  ldr x17, pc+144 (addr 0x0000ffff7ab06f78)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab06eec   236  blr x17
0xffff7ab06ef0   240  movz x0, #0x6000000000
0xffff7ab06ef4   244  movz x10, #0x0
0xffff7ab06ef8   248  sub csp, jssp, #0x10 (16)
0xffff7ab06efc   252  stp x10, x0, [jssp, #-16]!
0xffff7ab06f00   256  movz x0, #0x2
0xffff7ab06f04   260  movz x1, #0x5b88
0xffff7ab06f08   264  movk x1, #0xe2, lsl #16
0xffff7ab06f0c   268  ldr x16, pc+116 (addr 0x0000ffff7ab06f80)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab06f10   272  blr x16
0xffff7ab06f14   276  str x0, [jssp, #32]
0xffff7ab06f18   280  ldr x16, pc+112 (addr 0x0000ffff7ab06f88)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab06f1c   284  blr x16
0xffff7ab06f20   288  ldr lr, [jssp, #16]
0xffff7ab06f24   292  ldp xzr, fp, [jssp], #24
0xffff7ab06f28   296  b #-0xf8 (addr 0xffff7ab06e30)
0xffff7ab06f2c   300  5800031f       constant pool begin (num_const = 24)    ;; constant pool
0xffff7ab06f30   304  d63f03e0       constant
0xffff7ab06f34   308  d503201f       constant
0xffff7ab06f38   312  20d04201       constant
0xffff7ab06f3c   316  00000000       constant
0xffff7ab06f40   320  20d04201       constant
0xffff7ab06f44   324  00000000       constant
0xffff7ab06f48   328  4ec05d81       constant
0xffff7ab06f4c   332  00000000       constant
0xffff7ab06f50   336  4ec04259       constant
0xffff7ab06f54   340  00000000       constant
0xffff7ab06f58   344  20d04519       constant
0xffff7ab06f5c   348  00000000       constant
0xffff7ab06f60   352  20d04519       constant
0xffff7ab06f64   356  00000000       constant
0xffff7ab06f68   360  20d04519       constant
0xffff7ab06f6c   364  00000000       constant
0xffff7ab06f70   368  20d04519       constant
0xffff7ab06f74   372  00000000       constant
0xffff7ab06f78   376  7ab06820       constant
0xffff7ab06f7c   380  0000ffff       constant
0xffff7ab06f80   384  7ab06260       constant
0xffff7ab06f84   388  0000ffff       constant
0xffff7ab06f88   392  7ab068e0       constant
0xffff7ab06f8c   396  0000ffff       constant
0xffff7ab06f90   400  movz x16, #0x0
0xffff7ab06f94   404  sub csp, jssp, #0x10 (16)
0xffff7ab06f98   408  stp fp, lr, [jssp, #-16]!
0xffff7ab06f9c   412  bl #+0x4 (addr 0xffff7ab06fa0)
0xffff7ab06fa0   416  movz x17, #0xa00000000
0xffff7ab06fa4   420  sub csp, jssp, #0x10 (16)
0xffff7ab06fa8   424  stp x17, cp, [jssp, #-16]!
0xffff7ab06fac   428  add fp, jssp, #0x10 (16)
0xffff7ab06fb0   432  ldr x17, pc+24 (addr 0x0000ffff7ab06fc8)    ;; lazy deoptimization bailout 0
0xffff7ab06fb4   436  add x17, x17, x16
0xffff7ab06fb8   440  br x17
0xffff7ab06fbc   444  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab06fc0   448  d63f03e0       constant
0xffff7ab06fc4   452  d503201f       constant
0xffff7ab06fc8   456  7a906000       constant
0xffff7ab06fcc   460  0000ffff       constant


Safepoints (size = 21)
0xffff7ab06f14   276  000 | x1 | x2 | x4 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 29)
0xffff7ab06e4c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab06e54  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab06e68  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab06e88  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab06e9c  embedded object  (0x20d04519 <the hole>)
0xffff7ab06ea4  embedded object  (0x20d04519 <the hole>)
0xffff7ab06eac  embedded object  (0x20d04519 <the hole>)
0xffff7ab06eb4  embedded object  (0x20d04519 <the hole>)
0xffff7ab06ee8  code target (STUB)  (0xffff7ab06820)
0xffff7ab06f0c  code target (STUB)  (0xffff7ab06260)
0xffff7ab06f18  code target (STUB)  (0xffff7ab068e0)
0xffff7ab06f2c  constant pool (size 100)
0xffff7ab06fb0  runtime entry
0xffff7ab06fbc  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNoArgumentConstructorStub
name = ArrayNoArgumentConstructorStub_FAST_HOLEY_SMI_ELEMENTS
compiler = crankshaft
Instructions (size = 485)
0xffff7ab06e00     0  movz w0, #0x6000
0xffff7ab06e04     4  movk w0, #0x9, lsl #16
0xffff7ab06e08     8  cmp w0, #0x30 (48)
0xffff7ab06e0c    12  b.ls #+0x184 (addr 0xffff7ab06f90)
0xffff7ab06e10    16  movz x3, #0xe2c0
0xffff7ab06e14    20  movk x3, #0x9ab, lsl #16
0xffff7ab06e18    24  ldp x4, x0, [x3]
0xffff7ab06e1c    28  adds x16, x4, #0x60 (96)
0xffff7ab06e20    32  ccmp x16, x0, #nzCv, lo
0xffff7ab06e24    36  b.hi #+0xa4 (addr 0xffff7ab06ec8)
0xffff7ab06e28    40  str x16, [x3]
0xffff7ab06e2c    44  orr x4, x4, #0x1
0xffff7ab06e30    48  movz w0, #0x0
0xffff7ab06e34    52  stur x0, [x4, #47]
0xffff7ab06e38    56  ldur x0, [x1, #39]
0xffff7ab06e3c    60  ldur x0, [x0, #39]
0xffff7ab06e40    64  movz x16, #0x17f
0xffff7ab06e44    68  ldr x0, [x0, x16]
0xffff7ab06e48    72  stur x0, [x4, #-1]
0xffff7ab06e4c    76  ldr x0, pc+236 (addr 0x0000ffff7ab06f38)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab06e50    80  stur x0, [x4, #7]
0xffff7ab06e54    84  ldr x0, pc+236 (addr 0x0000ffff7ab06f40)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab06e58    88  stur x0, [x4, #15]
0xffff7ab06e5c    92  movz x0, #0x0
0xffff7ab06e60    96  stur x0, [x4, #23]
0xffff7ab06e64   100  add x0, x4, #0x20 (32)
0xffff7ab06e68   104  ldr x1, pc+224 (addr 0x0000ffff7ab06f48)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab06e6c   108  stur x1, [x0, #-1]
0xffff7ab06e70   112  stur x2, [x0, #7]
0xffff7ab06e74   116  ldur w0, [x2, #35]
0xffff7ab06e78   120  add w0, w0, #0x1 (1)
0xffff7ab06e7c   124  lsl x0, x0, #32
0xffff7ab06e80   128  stur x0, [x2, #31]
0xffff7ab06e84   132  add x0, x4, #0x30 (48)
0xffff7ab06e88   136  ldr x1, pc+200 (addr 0x0000ffff7ab06f50)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab06e8c   140  stur x1, [x0, #-1]
0xffff7ab06e90   144  movz x1, #0x400000000
0xffff7ab06e94   148  stur x1, [x0, #7]
0xffff7ab06e98   152  stur x0, [x4, #15]
0xffff7ab06e9c   156  ldr x1, pc+188 (addr 0x0000ffff7ab06f58)    ;; object: 0x20d04519 <the hole>
0xffff7ab06ea0   160  stur x1, [x0, #15]
0xffff7ab06ea4   164  ldr x1, pc+188 (addr 0x0000ffff7ab06f60)    ;; object: 0x20d04519 <the hole>
0xffff7ab06ea8   168  stur x1, [x0, #23]
0xffff7ab06eac   172  ldr x1, pc+188 (addr 0x0000ffff7ab06f68)    ;; object: 0x20d04519 <the hole>
0xffff7ab06eb0   176  stur x1, [x0, #31]
0xffff7ab06eb4   180  ldr x1, pc+188 (addr 0x0000ffff7ab06f70)    ;; object: 0x20d04519 <the hole>
0xffff7ab06eb8   184  stur x1, [x0, #39]
0xffff7ab06ebc   188  mov x0, x4
0xffff7ab06ec0   192  add jssp, jssp, #0x8 (8)
0xffff7ab06ec4   196  ret
0xffff7ab06ec8   200  sub csp, jssp, #0x10 (16)
0xffff7ab06ecc   204  stp fp, lr, [jssp, #-16]!
0xffff7ab06ed0   208  movz fp, #0xa00000000
0xffff7ab06ed4   212  sub csp, jssp, #0x8 (8)
0xffff7ab06ed8   216  str fp, [jssp, #-8]!
0xffff7ab06edc   220  add fp, jssp, #0x8 (8)
0xffff7ab06ee0   224  movz x4, #0x0
0xffff7ab06ee4   228  mov x16, lr
0xffff7ab06ee8   232  ldr x17, pc+144 (addr 0x0000ffff7ab06f78)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab06eec   236  blr x17
0xffff7ab06ef0   240  movz x0, #0x6000000000
0xffff7ab06ef4   244  movz x10, #0x0
0xffff7ab06ef8   248  sub csp, jssp, #0x10 (16)
0xffff7ab06efc   252  stp x10, x0, [jssp, #-16]!
0xffff7ab06f00   256  movz x0, #0x2
0xffff7ab06f04   260  movz x1, #0x5b88
0xffff7ab06f08   264  movk x1, #0xe2, lsl #16
0xffff7ab06f0c   268  ldr x16, pc+116 (addr 0x0000ffff7ab06f80)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab06f10   272  blr x16
0xffff7ab06f14   276  str x0, [jssp, #32]
0xffff7ab06f18   280  ldr x16, pc+112 (addr 0x0000ffff7ab06f88)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab06f1c   284  blr x16
0xffff7ab06f20   288  ldr lr, [jssp, #16]
0xffff7ab06f24   292  ldp xzr, fp, [jssp], #24
0xffff7ab06f28   296  b #-0xf8 (addr 0xffff7ab06e30)
0xffff7ab06f2c   300  5800031f       constant pool begin (num_const = 24)    ;; constant pool
0xffff7ab06f30   304  d63f03e0       constant
0xffff7ab06f34   308  d503201f       constant
0xffff7ab06f38   312  20d04201       constant
0xffff7ab06f3c   316  00000000       constant
0xffff7ab06f40   320  20d04201       constant
0xffff7ab06f44   324  00000000       constant
0xffff7ab06f48   328  4ec05d81       constant
0xffff7ab06f4c   332  00000000       constant
0xffff7ab06f50   336  4ec04259       constant
0xffff7ab06f54   340  00000000       constant
0xffff7ab06f58   344  20d04519       constant
0xffff7ab06f5c   348  00000000       constant
0xffff7ab06f60   352  20d04519       constant
0xffff7ab06f64   356  00000000       constant
0xffff7ab06f68   360  20d04519       constant
0xffff7ab06f6c   364  00000000       constant
0xffff7ab06f70   368  20d04519       constant
0xffff7ab06f74   372  00000000       constant
0xffff7ab06f78   376  7ab06820       constant
0xffff7ab06f7c   380  0000ffff       constant
0xffff7ab06f80   384  7ab06260       constant
0xffff7ab06f84   388  0000ffff       constant
0xffff7ab06f88   392  7ab068e0       constant
0xffff7ab06f8c   396  0000ffff       constant
0xffff7ab06f90   400  movz x16, #0x0
0xffff7ab06f94   404  sub csp, jssp, #0x10 (16)
0xffff7ab06f98   408  stp fp, lr, [jssp, #-16]!
0xffff7ab06f9c   412  bl #+0x4 (addr 0xffff7ab06fa0)
0xffff7ab06fa0   416  movz x17, #0xa00000000
0xffff7ab06fa4   420  sub csp, jssp, #0x10 (16)
0xffff7ab06fa8   424  stp x17, cp, [jssp, #-16]!
0xffff7ab06fac   428  add fp, jssp, #0x10 (16)
0xffff7ab06fb0   432  ldr x17, pc+24 (addr 0x0000ffff7ab06fc8)    ;; lazy deoptimization bailout 0
0xffff7ab06fb4   436  add x17, x17, x16
0xffff7ab06fb8   440  br x17
0xffff7ab06fbc   444  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab06fc0   448  d63f03e0       constant
0xffff7ab06fc4   452  d503201f       constant
0xffff7ab06fc8   456  7a906000       constant
0xffff7ab06fcc   460  0000ffff       constant


Safepoints (size = 21)
0xffff7ab06f14   276  000 | x1 | x2 | x4 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 29)
0xffff7ab06e4c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab06e54  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab06e68  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab06e88  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab06e9c  embedded object  (0x20d04519 <the hole>)
0xffff7ab06ea4  embedded object  (0x20d04519 <the hole>)
0xffff7ab06eac  embedded object  (0x20d04519 <the hole>)
0xffff7ab06eb4  embedded object  (0x20d04519 <the hole>)
0xffff7ab06ee8  code target (STUB)  (0xffff7ab06820)
0xffff7ab06f0c  code target (STUB)  (0xffff7ab06260)
0xffff7ab06f18  code target (STUB)  (0xffff7ab068e0)
0xffff7ab06f2c  constant pool (size 100)
0xffff7ab06fb0  runtime entry
0xffff7ab06fbc  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 445)
0xffff7ab07060     0  movz w0, #0x6000
0xffff7ab07064     4  movk w0, #0x9, lsl #16
0xffff7ab07068     8  cmp w0, #0x30 (48)
0xffff7ab0706c    12  b.ls #+0x15c (addr 0xffff7ab071c8)
0xffff7ab07070    16  movz x2, #0xe2c0
0xffff7ab07074    20  movk x2, #0x9ab, lsl #16
0xffff7ab07078    24  ldp x3, x0, [x2]
0xffff7ab0707c    28  adds x16, x3, #0x50 (80)
0xffff7ab07080    32  ccmp x16, x0, #nzCv, lo
0xffff7ab07084    36  b.hi #+0x84 (addr 0xffff7ab07108)
0xffff7ab07088    40  str x16, [x2]
0xffff7ab0708c    44  orr x3, x3, #0x1
0xffff7ab07090    48  movz w0, #0x0
0xffff7ab07094    52  stur x0, [x3, #31]
0xffff7ab07098    56  ldur x0, [x1, #39]
0xffff7ab0709c    60  ldur x0, [x0, #39]
0xffff7ab070a0    64  movz x16, #0x17f
0xffff7ab070a4    68  ldr x0, [x0, x16]
0xffff7ab070a8    72  stur x0, [x3, #-1]
0xffff7ab070ac    76  ldr x0, pc+204 (addr 0x0000ffff7ab07178)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab070b0    80  stur x0, [x3, #7]
0xffff7ab070b4    84  ldr x0, pc+204 (addr 0x0000ffff7ab07180)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab070b8    88  stur x0, [x3, #15]
0xffff7ab070bc    92  movz x0, #0x0
0xffff7ab070c0    96  stur x0, [x3, #23]
0xffff7ab070c4   100  add x0, x3, #0x20 (32)
0xffff7ab070c8   104  ldr x1, pc+192 (addr 0x0000ffff7ab07188)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab070cc   108  stur x1, [x0, #-1]
0xffff7ab070d0   112  movz x1, #0x400000000
0xffff7ab070d4   116  stur x1, [x0, #7]
0xffff7ab070d8   120  stur x0, [x3, #15]
0xffff7ab070dc   124  ldr x1, pc+180 (addr 0x0000ffff7ab07190)    ;; object: 0x20d04519 <the hole>
0xffff7ab070e0   128  stur x1, [x0, #15]
0xffff7ab070e4   132  ldr x1, pc+180 (addr 0x0000ffff7ab07198)    ;; object: 0x20d04519 <the hole>
0xffff7ab070e8   136  stur x1, [x0, #23]
0xffff7ab070ec   140  ldr x1, pc+180 (addr 0x0000ffff7ab071a0)    ;; object: 0x20d04519 <the hole>
0xffff7ab070f0   144  stur x1, [x0, #31]
0xffff7ab070f4   148  ldr x1, pc+180 (addr 0x0000ffff7ab071a8)    ;; object: 0x20d04519 <the hole>
0xffff7ab070f8   152  stur x1, [x0, #39]
0xffff7ab070fc   156  mov x0, x3
0xffff7ab07100   160  add jssp, jssp, #0x8 (8)
0xffff7ab07104   164  ret
0xffff7ab07108   168  sub csp, jssp, #0x10 (16)
0xffff7ab0710c   172  stp fp, lr, [jssp, #-16]!
0xffff7ab07110   176  movz fp, #0xa00000000
0xffff7ab07114   180  sub csp, jssp, #0x8 (8)
0xffff7ab07118   184  str fp, [jssp, #-8]!
0xffff7ab0711c   188  add fp, jssp, #0x8 (8)
0xffff7ab07120   192  movz x3, #0x0
0xffff7ab07124   196  mov x16, lr
0xffff7ab07128   200  ldr x17, pc+136 (addr 0x0000ffff7ab071b0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0712c   204  blr x17
0xffff7ab07130   208  movz x0, #0x5000000000
0xffff7ab07134   212  movz x10, #0x0
0xffff7ab07138   216  sub csp, jssp, #0x10 (16)
0xffff7ab0713c   220  stp x10, x0, [jssp, #-16]!
0xffff7ab07140   224  movz x0, #0x2
0xffff7ab07144   228  movz x1, #0x5b88
0xffff7ab07148   232  movk x1, #0xe2, lsl #16
0xffff7ab0714c   236  ldr x16, pc+108 (addr 0x0000ffff7ab071b8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab07150   240  blr x16
0xffff7ab07154   244  str x0, [jssp, #24]
0xffff7ab07158   248  ldr x16, pc+104 (addr 0x0000ffff7ab071c0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0715c   252  blr x16
0xffff7ab07160   256  ldr lr, [jssp, #16]
0xffff7ab07164   260  ldp xzr, fp, [jssp], #24
0xffff7ab07168   264  b #-0xd8 (addr 0xffff7ab07090)
0xffff7ab0716c   268  580002df       constant pool begin (num_const = 22)    ;; constant pool
0xffff7ab07170   272  d63f03e0       constant
0xffff7ab07174   276  d503201f       constant
0xffff7ab07178   280  20d04201       constant
0xffff7ab0717c   284  00000000       constant
0xffff7ab07180   288  20d04201       constant
0xffff7ab07184   292  00000000       constant
0xffff7ab07188   296  4ec04259       constant
0xffff7ab0718c   300  00000000       constant
0xffff7ab07190   304  20d04519       constant
0xffff7ab07194   308  00000000       constant
0xffff7ab07198   312  20d04519       constant
0xffff7ab0719c   316  00000000       constant
0xffff7ab071a0   320  20d04519       constant
0xffff7ab071a4   324  00000000       constant
0xffff7ab071a8   328  20d04519       constant
0xffff7ab071ac   332  00000000       constant
0xffff7ab071b0   336  7ab06820       constant
0xffff7ab071b4   340  0000ffff       constant
0xffff7ab071b8   344  7ab06260       constant
0xffff7ab071bc   348  0000ffff       constant
0xffff7ab071c0   352  7ab068e0       constant
0xffff7ab071c4   356  0000ffff       constant
0xffff7ab071c8   360  movz x16, #0x0
0xffff7ab071cc   364  sub csp, jssp, #0x10 (16)
0xffff7ab071d0   368  stp fp, lr, [jssp, #-16]!
0xffff7ab071d4   372  bl #+0x4 (addr 0xffff7ab071d8)
0xffff7ab071d8   376  movz x17, #0xa00000000
0xffff7ab071dc   380  sub csp, jssp, #0x10 (16)
0xffff7ab071e0   384  stp x17, cp, [jssp, #-16]!
0xffff7ab071e4   388  add fp, jssp, #0x10 (16)
0xffff7ab071e8   392  ldr x17, pc+24 (addr 0x0000ffff7ab07200)    ;; lazy deoptimization bailout 0
0xffff7ab071ec   396  add x17, x17, x16
0xffff7ab071f0   400  br x17
0xffff7ab071f4   404  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab071f8   408  d63f03e0       constant
0xffff7ab071fc   412  d503201f       constant
0xffff7ab07200   416  7a906000       constant
0xffff7ab07204   420  0000ffff       constant


Safepoints (size = 21)
0xffff7ab07154   244  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0xffff7ab070ac  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab070b4  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab070c8  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab070dc  embedded object  (0x20d04519 <the hole>)
0xffff7ab070e4  embedded object  (0x20d04519 <the hole>)
0xffff7ab070ec  embedded object  (0x20d04519 <the hole>)
0xffff7ab070f4  embedded object  (0x20d04519 <the hole>)
0xffff7ab07128  code target (STUB)  (0xffff7ab06820)
0xffff7ab0714c  code target (STUB)  (0xffff7ab06260)
0xffff7ab07158  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0716c  constant pool (size 92)
0xffff7ab071e8  runtime entry
0xffff7ab071f4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNoArgumentConstructorStub
name = ArrayNoArgumentConstructorStub_FAST_HOLEY_SMI_ELEMENTS_DISABLE_ALLOCATION_SITES
compiler = crankshaft
Instructions (size = 445)
0xffff7ab07060     0  movz w0, #0x6000
0xffff7ab07064     4  movk w0, #0x9, lsl #16
0xffff7ab07068     8  cmp w0, #0x30 (48)
0xffff7ab0706c    12  b.ls #+0x15c (addr 0xffff7ab071c8)
0xffff7ab07070    16  movz x2, #0xe2c0
0xffff7ab07074    20  movk x2, #0x9ab, lsl #16
0xffff7ab07078    24  ldp x3, x0, [x2]
0xffff7ab0707c    28  adds x16, x3, #0x50 (80)
0xffff7ab07080    32  ccmp x16, x0, #nzCv, lo
0xffff7ab07084    36  b.hi #+0x84 (addr 0xffff7ab07108)
0xffff7ab07088    40  str x16, [x2]
0xffff7ab0708c    44  orr x3, x3, #0x1
0xffff7ab07090    48  movz w0, #0x0
0xffff7ab07094    52  stur x0, [x3, #31]
0xffff7ab07098    56  ldur x0, [x1, #39]
0xffff7ab0709c    60  ldur x0, [x0, #39]
0xffff7ab070a0    64  movz x16, #0x17f
0xffff7ab070a4    68  ldr x0, [x0, x16]
0xffff7ab070a8    72  stur x0, [x3, #-1]
0xffff7ab070ac    76  ldr x0, pc+204 (addr 0x0000ffff7ab07178)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab070b0    80  stur x0, [x3, #7]
0xffff7ab070b4    84  ldr x0, pc+204 (addr 0x0000ffff7ab07180)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab070b8    88  stur x0, [x3, #15]
0xffff7ab070bc    92  movz x0, #0x0
0xffff7ab070c0    96  stur x0, [x3, #23]
0xffff7ab070c4   100  add x0, x3, #0x20 (32)
0xffff7ab070c8   104  ldr x1, pc+192 (addr 0x0000ffff7ab07188)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab070cc   108  stur x1, [x0, #-1]
0xffff7ab070d0   112  movz x1, #0x400000000
0xffff7ab070d4   116  stur x1, [x0, #7]
0xffff7ab070d8   120  stur x0, [x3, #15]
0xffff7ab070dc   124  ldr x1, pc+180 (addr 0x0000ffff7ab07190)    ;; object: 0x20d04519 <the hole>
0xffff7ab070e0   128  stur x1, [x0, #15]
0xffff7ab070e4   132  ldr x1, pc+180 (addr 0x0000ffff7ab07198)    ;; object: 0x20d04519 <the hole>
0xffff7ab070e8   136  stur x1, [x0, #23]
0xffff7ab070ec   140  ldr x1, pc+180 (addr 0x0000ffff7ab071a0)    ;; object: 0x20d04519 <the hole>
0xffff7ab070f0   144  stur x1, [x0, #31]
0xffff7ab070f4   148  ldr x1, pc+180 (addr 0x0000ffff7ab071a8)    ;; object: 0x20d04519 <the hole>
0xffff7ab070f8   152  stur x1, [x0, #39]
0xffff7ab070fc   156  mov x0, x3
0xffff7ab07100   160  add jssp, jssp, #0x8 (8)
0xffff7ab07104   164  ret
0xffff7ab07108   168  sub csp, jssp, #0x10 (16)
0xffff7ab0710c   172  stp fp, lr, [jssp, #-16]!
0xffff7ab07110   176  movz fp, #0xa00000000
0xffff7ab07114   180  sub csp, jssp, #0x8 (8)
0xffff7ab07118   184  str fp, [jssp, #-8]!
0xffff7ab0711c   188  add fp, jssp, #0x8 (8)
0xffff7ab07120   192  movz x3, #0x0
0xffff7ab07124   196  mov x16, lr
0xffff7ab07128   200  ldr x17, pc+136 (addr 0x0000ffff7ab071b0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0712c   204  blr x17
0xffff7ab07130   208  movz x0, #0x5000000000
0xffff7ab07134   212  movz x10, #0x0
0xffff7ab07138   216  sub csp, jssp, #0x10 (16)
0xffff7ab0713c   220  stp x10, x0, [jssp, #-16]!
0xffff7ab07140   224  movz x0, #0x2
0xffff7ab07144   228  movz x1, #0x5b88
0xffff7ab07148   232  movk x1, #0xe2, lsl #16
0xffff7ab0714c   236  ldr x16, pc+108 (addr 0x0000ffff7ab071b8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab07150   240  blr x16
0xffff7ab07154   244  str x0, [jssp, #24]
0xffff7ab07158   248  ldr x16, pc+104 (addr 0x0000ffff7ab071c0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0715c   252  blr x16
0xffff7ab07160   256  ldr lr, [jssp, #16]
0xffff7ab07164   260  ldp xzr, fp, [jssp], #24
0xffff7ab07168   264  b #-0xd8 (addr 0xffff7ab07090)
0xffff7ab0716c   268  580002df       constant pool begin (num_const = 22)    ;; constant pool
0xffff7ab07170   272  d63f03e0       constant
0xffff7ab07174   276  d503201f       constant
0xffff7ab07178   280  20d04201       constant
0xffff7ab0717c   284  00000000       constant
0xffff7ab07180   288  20d04201       constant
0xffff7ab07184   292  00000000       constant
0xffff7ab07188   296  4ec04259       constant
0xffff7ab0718c   300  00000000       constant
0xffff7ab07190   304  20d04519       constant
0xffff7ab07194   308  00000000       constant
0xffff7ab07198   312  20d04519       constant
0xffff7ab0719c   316  00000000       constant
0xffff7ab071a0   320  20d04519       constant
0xffff7ab071a4   324  00000000       constant
0xffff7ab071a8   328  20d04519       constant
0xffff7ab071ac   332  00000000       constant
0xffff7ab071b0   336  7ab06820       constant
0xffff7ab071b4   340  0000ffff       constant
0xffff7ab071b8   344  7ab06260       constant
0xffff7ab071bc   348  0000ffff       constant
0xffff7ab071c0   352  7ab068e0       constant
0xffff7ab071c4   356  0000ffff       constant
0xffff7ab071c8   360  movz x16, #0x0
0xffff7ab071cc   364  sub csp, jssp, #0x10 (16)
0xffff7ab071d0   368  stp fp, lr, [jssp, #-16]!
0xffff7ab071d4   372  bl #+0x4 (addr 0xffff7ab071d8)
0xffff7ab071d8   376  movz x17, #0xa00000000
0xffff7ab071dc   380  sub csp, jssp, #0x10 (16)
0xffff7ab071e0   384  stp x17, cp, [jssp, #-16]!
0xffff7ab071e4   388  add fp, jssp, #0x10 (16)
0xffff7ab071e8   392  ldr x17, pc+24 (addr 0x0000ffff7ab07200)    ;; lazy deoptimization bailout 0
0xffff7ab071ec   396  add x17, x17, x16
0xffff7ab071f0   400  br x17
0xffff7ab071f4   404  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab071f8   408  d63f03e0       constant
0xffff7ab071fc   412  d503201f       constant
0xffff7ab07200   416  7a906000       constant
0xffff7ab07204   420  0000ffff       constant


Safepoints (size = 21)
0xffff7ab07154   244  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0xffff7ab070ac  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab070b4  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab070c8  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab070dc  embedded object  (0x20d04519 <the hole>)
0xffff7ab070e4  embedded object  (0x20d04519 <the hole>)
0xffff7ab070ec  embedded object  (0x20d04519 <the hole>)
0xffff7ab070f4  embedded object  (0x20d04519 <the hole>)
0xffff7ab07128  code target (STUB)  (0xffff7ab06820)
0xffff7ab0714c  code target (STUB)  (0xffff7ab06260)
0xffff7ab07158  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0716c  constant pool (size 92)
0xffff7ab071e8  runtime entry
0xffff7ab071f4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 405)
0xffff7ab07280     0  movz w0, #0x6000
0xffff7ab07284     4  movk w0, #0x9, lsl #16
0xffff7ab07288     8  cmp w0, #0x30 (48)
0xffff7ab0728c    12  b.ls #+0x134 (addr 0xffff7ab073c0)
0xffff7ab07290    16  movz x2, #0xe2c0
0xffff7ab07294    20  movk x2, #0x9ab, lsl #16
0xffff7ab07298    24  ldp x3, x0, [x2]
0xffff7ab0729c    28  adds x16, x3, #0x50 (80)
0xffff7ab072a0    32  ccmp x16, x0, #nzCv, lo
0xffff7ab072a4    36  b.hi #+0x78 (addr 0xffff7ab0731c)
0xffff7ab072a8    40  str x16, [x2]
0xffff7ab072ac    44  orr x3, x3, #0x1
0xffff7ab072b0    48  movz w0, #0x0
0xffff7ab072b4    52  stur x0, [x3, #31]
0xffff7ab072b8    56  ldur x0, [x1, #39]
0xffff7ab072bc    60  ldur x0, [x0, #39]
0xffff7ab072c0    64  movz x16, #0x197
0xffff7ab072c4    68  ldr x0, [x0, x16]
0xffff7ab072c8    72  stur x0, [x3, #-1]
0xffff7ab072cc    76  ldr x0, pc+196 (addr 0x0000ffff7ab07390)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab072d0    80  stur x0, [x3, #7]
0xffff7ab072d4    84  ldr x0, pc+196 (addr 0x0000ffff7ab07398)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab072d8    88  stur x0, [x3, #15]
0xffff7ab072dc    92  movz x0, #0x0
0xffff7ab072e0    96  stur x0, [x3, #23]
0xffff7ab072e4   100  add x0, x3, #0x20 (32)
0xffff7ab072e8   104  ldr x1, pc+184 (addr 0x0000ffff7ab073a0)    ;; object: 0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab072ec   108  stur x1, [x0, #-1]
0xffff7ab072f0   112  movz x1, #0x400000000
0xffff7ab072f4   116  stur x1, [x0, #7]
0xffff7ab072f8   120  stur x0, [x3, #15]
0xffff7ab072fc   124  ldr d0, pc+140 (addr 0x0000ffff7ab07388)
0xffff7ab07300   128  stur d0, [x0, #15]
0xffff7ab07304   132  stur d0, [x0, #23]
0xffff7ab07308   136  stur d0, [x0, #31]
0xffff7ab0730c   140  stur d0, [x0, #39]
0xffff7ab07310   144  mov x0, x3
0xffff7ab07314   148  add jssp, jssp, #0x8 (8)
0xffff7ab07318   152  ret
0xffff7ab0731c   156  sub csp, jssp, #0x10 (16)
0xffff7ab07320   160  stp fp, lr, [jssp, #-16]!
0xffff7ab07324   164  movz fp, #0xa00000000
0xffff7ab07328   168  sub csp, jssp, #0x8 (8)
0xffff7ab0732c   172  str fp, [jssp, #-8]!
0xffff7ab07330   176  add fp, jssp, #0x8 (8)
0xffff7ab07334   180  movz x3, #0x0
0xffff7ab07338   184  mov x16, lr
0xffff7ab0733c   188  ldr x17, pc+108 (addr 0x0000ffff7ab073a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab07340   192  blr x17
0xffff7ab07344   196  movz x0, #0x5000000000
0xffff7ab07348   200  movz x10, #0x100000000
0xffff7ab0734c   204  sub csp, jssp, #0x10 (16)
0xffff7ab07350   208  stp x10, x0, [jssp, #-16]!
0xffff7ab07354   212  movz x0, #0x2
0xffff7ab07358   216  movz x1, #0x5b88
0xffff7ab0735c   220  movk x1, #0xe2, lsl #16
0xffff7ab07360   224  ldr x16, pc+80 (addr 0x0000ffff7ab073b0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab07364   228  blr x16
0xffff7ab07368   232  str x0, [jssp, #24]
0xffff7ab0736c   236  ldr x16, pc+76 (addr 0x0000ffff7ab073b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab07370   240  blr x16
0xffff7ab07374   244  ldr lr, [jssp, #16]
0xffff7ab07378   248  ldp xzr, fp, [jssp], #24
0xffff7ab0737c   252  b #-0xcc (addr 0xffff7ab072b0)
0xffff7ab07380   256  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab07384   260  d63f03e0       constant
0xffff7ab07388   264  fff7ffff       constant
0xffff7ab0738c   268  fff7ffff       constant
0xffff7ab07390   272  20d04201       constant
0xffff7ab07394   276  00000000       constant
0xffff7ab07398   280  20d04201       constant
0xffff7ab0739c   284  00000000       constant
0xffff7ab073a0   288  4ec052d9       constant
0xffff7ab073a4   292  00000000       constant
0xffff7ab073a8   296  7ab06820       constant
0xffff7ab073ac   300  0000ffff       constant
0xffff7ab073b0   304  7ab06260       constant
0xffff7ab073b4   308  0000ffff       constant
0xffff7ab073b8   312  7ab068e0       constant
0xffff7ab073bc   316  0000ffff       constant
0xffff7ab073c0   320  movz x16, #0x0
0xffff7ab073c4   324  sub csp, jssp, #0x10 (16)
0xffff7ab073c8   328  stp fp, lr, [jssp, #-16]!
0xffff7ab073cc   332  bl #+0x4 (addr 0xffff7ab073d0)
0xffff7ab073d0   336  movz x17, #0xa00000000
0xffff7ab073d4   340  sub csp, jssp, #0x10 (16)
0xffff7ab073d8   344  stp x17, cp, [jssp, #-16]!
0xffff7ab073dc   348  add fp, jssp, #0x10 (16)
0xffff7ab073e0   352  ldr x17, pc+24 (addr 0x0000ffff7ab073f8)    ;; lazy deoptimization bailout 0
0xffff7ab073e4   356  add x17, x17, x16
0xffff7ab073e8   360  br x17
0xffff7ab073ec   364  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab073f0   368  d63f03e0       constant
0xffff7ab073f4   372  d503201f       constant
0xffff7ab073f8   376  7a906000       constant
0xffff7ab073fc   380  0000ffff       constant


Safepoints (size = 21)
0xffff7ab07368   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab072cc  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab072d4  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab072e8  embedded object  (0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab0733c  code target (STUB)  (0xffff7ab06820)
0xffff7ab07360  code target (STUB)  (0xffff7ab06260)
0xffff7ab0736c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab07380  constant pool (size 64)
0xffff7ab073e0  runtime entry
0xffff7ab073ec  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNoArgumentConstructorStub
name = ArrayNoArgumentConstructorStub_FAST_DOUBLE_ELEMENTS
compiler = crankshaft
Instructions (size = 405)
0xffff7ab07280     0  movz w0, #0x6000
0xffff7ab07284     4  movk w0, #0x9, lsl #16
0xffff7ab07288     8  cmp w0, #0x30 (48)
0xffff7ab0728c    12  b.ls #+0x134 (addr 0xffff7ab073c0)
0xffff7ab07290    16  movz x2, #0xe2c0
0xffff7ab07294    20  movk x2, #0x9ab, lsl #16
0xffff7ab07298    24  ldp x3, x0, [x2]
0xffff7ab0729c    28  adds x16, x3, #0x50 (80)
0xffff7ab072a0    32  ccmp x16, x0, #nzCv, lo
0xffff7ab072a4    36  b.hi #+0x78 (addr 0xffff7ab0731c)
0xffff7ab072a8    40  str x16, [x2]
0xffff7ab072ac    44  orr x3, x3, #0x1
0xffff7ab072b0    48  movz w0, #0x0
0xffff7ab072b4    52  stur x0, [x3, #31]
0xffff7ab072b8    56  ldur x0, [x1, #39]
0xffff7ab072bc    60  ldur x0, [x0, #39]
0xffff7ab072c0    64  movz x16, #0x197
0xffff7ab072c4    68  ldr x0, [x0, x16]
0xffff7ab072c8    72  stur x0, [x3, #-1]
0xffff7ab072cc    76  ldr x0, pc+196 (addr 0x0000ffff7ab07390)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab072d0    80  stur x0, [x3, #7]
0xffff7ab072d4    84  ldr x0, pc+196 (addr 0x0000ffff7ab07398)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab072d8    88  stur x0, [x3, #15]
0xffff7ab072dc    92  movz x0, #0x0
0xffff7ab072e0    96  stur x0, [x3, #23]
0xffff7ab072e4   100  add x0, x3, #0x20 (32)
0xffff7ab072e8   104  ldr x1, pc+184 (addr 0x0000ffff7ab073a0)    ;; object: 0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab072ec   108  stur x1, [x0, #-1]
0xffff7ab072f0   112  movz x1, #0x400000000
0xffff7ab072f4   116  stur x1, [x0, #7]
0xffff7ab072f8   120  stur x0, [x3, #15]
0xffff7ab072fc   124  ldr d0, pc+140 (addr 0x0000ffff7ab07388)
0xffff7ab07300   128  stur d0, [x0, #15]
0xffff7ab07304   132  stur d0, [x0, #23]
0xffff7ab07308   136  stur d0, [x0, #31]
0xffff7ab0730c   140  stur d0, [x0, #39]
0xffff7ab07310   144  mov x0, x3
0xffff7ab07314   148  add jssp, jssp, #0x8 (8)
0xffff7ab07318   152  ret
0xffff7ab0731c   156  sub csp, jssp, #0x10 (16)
0xffff7ab07320   160  stp fp, lr, [jssp, #-16]!
0xffff7ab07324   164  movz fp, #0xa00000000
0xffff7ab07328   168  sub csp, jssp, #0x8 (8)
0xffff7ab0732c   172  str fp, [jssp, #-8]!
0xffff7ab07330   176  add fp, jssp, #0x8 (8)
0xffff7ab07334   180  movz x3, #0x0
0xffff7ab07338   184  mov x16, lr
0xffff7ab0733c   188  ldr x17, pc+108 (addr 0x0000ffff7ab073a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab07340   192  blr x17
0xffff7ab07344   196  movz x0, #0x5000000000
0xffff7ab07348   200  movz x10, #0x100000000
0xffff7ab0734c   204  sub csp, jssp, #0x10 (16)
0xffff7ab07350   208  stp x10, x0, [jssp, #-16]!
0xffff7ab07354   212  movz x0, #0x2
0xffff7ab07358   216  movz x1, #0x5b88
0xffff7ab0735c   220  movk x1, #0xe2, lsl #16
0xffff7ab07360   224  ldr x16, pc+80 (addr 0x0000ffff7ab073b0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab07364   228  blr x16
0xffff7ab07368   232  str x0, [jssp, #24]
0xffff7ab0736c   236  ldr x16, pc+76 (addr 0x0000ffff7ab073b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab07370   240  blr x16
0xffff7ab07374   244  ldr lr, [jssp, #16]
0xffff7ab07378   248  ldp xzr, fp, [jssp], #24
0xffff7ab0737c   252  b #-0xcc (addr 0xffff7ab072b0)
0xffff7ab07380   256  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab07384   260  d63f03e0       constant
0xffff7ab07388   264  fff7ffff       constant
0xffff7ab0738c   268  fff7ffff       constant
0xffff7ab07390   272  20d04201       constant
0xffff7ab07394   276  00000000       constant
0xffff7ab07398   280  20d04201       constant
0xffff7ab0739c   284  00000000       constant
0xffff7ab073a0   288  4ec052d9       constant
0xffff7ab073a4   292  00000000       constant
0xffff7ab073a8   296  7ab06820       constant
0xffff7ab073ac   300  0000ffff       constant
0xffff7ab073b0   304  7ab06260       constant
0xffff7ab073b4   308  0000ffff       constant
0xffff7ab073b8   312  7ab068e0       constant
0xffff7ab073bc   316  0000ffff       constant
0xffff7ab073c0   320  movz x16, #0x0
0xffff7ab073c4   324  sub csp, jssp, #0x10 (16)
0xffff7ab073c8   328  stp fp, lr, [jssp, #-16]!
0xffff7ab073cc   332  bl #+0x4 (addr 0xffff7ab073d0)
0xffff7ab073d0   336  movz x17, #0xa00000000
0xffff7ab073d4   340  sub csp, jssp, #0x10 (16)
0xffff7ab073d8   344  stp x17, cp, [jssp, #-16]!
0xffff7ab073dc   348  add fp, jssp, #0x10 (16)
0xffff7ab073e0   352  ldr x17, pc+24 (addr 0x0000ffff7ab073f8)    ;; lazy deoptimization bailout 0
0xffff7ab073e4   356  add x17, x17, x16
0xffff7ab073e8   360  br x17
0xffff7ab073ec   364  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab073f0   368  d63f03e0       constant
0xffff7ab073f4   372  d503201f       constant
0xffff7ab073f8   376  7a906000       constant
0xffff7ab073fc   380  0000ffff       constant


Safepoints (size = 21)
0xffff7ab07368   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab072cc  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab072d4  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab072e8  embedded object  (0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab0733c  code target (STUB)  (0xffff7ab06820)
0xffff7ab07360  code target (STUB)  (0xffff7ab06260)
0xffff7ab0736c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab07380  constant pool (size 64)
0xffff7ab073e0  runtime entry
0xffff7ab073ec  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 405)
0xffff7ab07480     0  movz w0, #0x6000
0xffff7ab07484     4  movk w0, #0x9, lsl #16
0xffff7ab07488     8  cmp w0, #0x30 (48)
0xffff7ab0748c    12  b.ls #+0x134 (addr 0xffff7ab075c0)
0xffff7ab07490    16  movz x2, #0xe2c0
0xffff7ab07494    20  movk x2, #0x9ab, lsl #16
0xffff7ab07498    24  ldp x3, x0, [x2]
0xffff7ab0749c    28  adds x16, x3, #0x50 (80)
0xffff7ab074a0    32  ccmp x16, x0, #nzCv, lo
0xffff7ab074a4    36  b.hi #+0x78 (addr 0xffff7ab0751c)
0xffff7ab074a8    40  str x16, [x2]
0xffff7ab074ac    44  orr x3, x3, #0x1
0xffff7ab074b0    48  movz w0, #0x0
0xffff7ab074b4    52  stur x0, [x3, #31]
0xffff7ab074b8    56  ldur x0, [x1, #39]
0xffff7ab074bc    60  ldur x0, [x0, #39]
0xffff7ab074c0    64  movz x16, #0x19f
0xffff7ab074c4    68  ldr x0, [x0, x16]
0xffff7ab074c8    72  stur x0, [x3, #-1]
0xffff7ab074cc    76  ldr x0, pc+196 (addr 0x0000ffff7ab07590)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab074d0    80  stur x0, [x3, #7]
0xffff7ab074d4    84  ldr x0, pc+196 (addr 0x0000ffff7ab07598)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab074d8    88  stur x0, [x3, #15]
0xffff7ab074dc    92  movz x0, #0x0
0xffff7ab074e0    96  stur x0, [x3, #23]
0xffff7ab074e4   100  add x0, x3, #0x20 (32)
0xffff7ab074e8   104  ldr x1, pc+184 (addr 0x0000ffff7ab075a0)    ;; object: 0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab074ec   108  stur x1, [x0, #-1]
0xffff7ab074f0   112  movz x1, #0x400000000
0xffff7ab074f4   116  stur x1, [x0, #7]
0xffff7ab074f8   120  stur x0, [x3, #15]
0xffff7ab074fc   124  ldr d0, pc+140 (addr 0x0000ffff7ab07588)
0xffff7ab07500   128  stur d0, [x0, #15]
0xffff7ab07504   132  stur d0, [x0, #23]
0xffff7ab07508   136  stur d0, [x0, #31]
0xffff7ab0750c   140  stur d0, [x0, #39]
0xffff7ab07510   144  mov x0, x3
0xffff7ab07514   148  add jssp, jssp, #0x8 (8)
0xffff7ab07518   152  ret
0xffff7ab0751c   156  sub csp, jssp, #0x10 (16)
0xffff7ab07520   160  stp fp, lr, [jssp, #-16]!
0xffff7ab07524   164  movz fp, #0xa00000000
0xffff7ab07528   168  sub csp, jssp, #0x8 (8)
0xffff7ab0752c   172  str fp, [jssp, #-8]!
0xffff7ab07530   176  add fp, jssp, #0x8 (8)
0xffff7ab07534   180  movz x3, #0x0
0xffff7ab07538   184  mov x16, lr
0xffff7ab0753c   188  ldr x17, pc+108 (addr 0x0000ffff7ab075a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab07540   192  blr x17
0xffff7ab07544   196  movz x0, #0x5000000000
0xffff7ab07548   200  movz x10, #0x100000000
0xffff7ab0754c   204  sub csp, jssp, #0x10 (16)
0xffff7ab07550   208  stp x10, x0, [jssp, #-16]!
0xffff7ab07554   212  movz x0, #0x2
0xffff7ab07558   216  movz x1, #0x5b88
0xffff7ab0755c   220  movk x1, #0xe2, lsl #16
0xffff7ab07560   224  ldr x16, pc+80 (addr 0x0000ffff7ab075b0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab07564   228  blr x16
0xffff7ab07568   232  str x0, [jssp, #24]
0xffff7ab0756c   236  ldr x16, pc+76 (addr 0x0000ffff7ab075b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab07570   240  blr x16
0xffff7ab07574   244  ldr lr, [jssp, #16]
0xffff7ab07578   248  ldp xzr, fp, [jssp], #24
0xffff7ab0757c   252  b #-0xcc (addr 0xffff7ab074b0)
0xffff7ab07580   256  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab07584   260  d63f03e0       constant
0xffff7ab07588   264  fff7ffff       constant
0xffff7ab0758c   268  fff7ffff       constant
0xffff7ab07590   272  20d04201       constant
0xffff7ab07594   276  00000000       constant
0xffff7ab07598   280  20d04201       constant
0xffff7ab0759c   284  00000000       constant
0xffff7ab075a0   288  4ec052d9       constant
0xffff7ab075a4   292  00000000       constant
0xffff7ab075a8   296  7ab06820       constant
0xffff7ab075ac   300  0000ffff       constant
0xffff7ab075b0   304  7ab06260       constant
0xffff7ab075b4   308  0000ffff       constant
0xffff7ab075b8   312  7ab068e0       constant
0xffff7ab075bc   316  0000ffff       constant
0xffff7ab075c0   320  movz x16, #0x0
0xffff7ab075c4   324  sub csp, jssp, #0x10 (16)
0xffff7ab075c8   328  stp fp, lr, [jssp, #-16]!
0xffff7ab075cc   332  bl #+0x4 (addr 0xffff7ab075d0)
0xffff7ab075d0   336  movz x17, #0xa00000000
0xffff7ab075d4   340  sub csp, jssp, #0x10 (16)
0xffff7ab075d8   344  stp x17, cp, [jssp, #-16]!
0xffff7ab075dc   348  add fp, jssp, #0x10 (16)
0xffff7ab075e0   352  ldr x17, pc+24 (addr 0x0000ffff7ab075f8)    ;; lazy deoptimization bailout 0
0xffff7ab075e4   356  add x17, x17, x16
0xffff7ab075e8   360  br x17
0xffff7ab075ec   364  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab075f0   368  d63f03e0       constant
0xffff7ab075f4   372  d503201f       constant
0xffff7ab075f8   376  7a906000       constant
0xffff7ab075fc   380  0000ffff       constant


Safepoints (size = 21)
0xffff7ab07568   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab074cc  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab074d4  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab074e8  embedded object  (0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab0753c  code target (STUB)  (0xffff7ab06820)
0xffff7ab07560  code target (STUB)  (0xffff7ab06260)
0xffff7ab0756c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab07580  constant pool (size 64)
0xffff7ab075e0  runtime entry
0xffff7ab075ec  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNoArgumentConstructorStub
name = ArrayNoArgumentConstructorStub_FAST_HOLEY_DOUBLE_ELEMENTS
compiler = crankshaft
Instructions (size = 405)
0xffff7ab07480     0  movz w0, #0x6000
0xffff7ab07484     4  movk w0, #0x9, lsl #16
0xffff7ab07488     8  cmp w0, #0x30 (48)
0xffff7ab0748c    12  b.ls #+0x134 (addr 0xffff7ab075c0)
0xffff7ab07490    16  movz x2, #0xe2c0
0xffff7ab07494    20  movk x2, #0x9ab, lsl #16
0xffff7ab07498    24  ldp x3, x0, [x2]
0xffff7ab0749c    28  adds x16, x3, #0x50 (80)
0xffff7ab074a0    32  ccmp x16, x0, #nzCv, lo
0xffff7ab074a4    36  b.hi #+0x78 (addr 0xffff7ab0751c)
0xffff7ab074a8    40  str x16, [x2]
0xffff7ab074ac    44  orr x3, x3, #0x1
0xffff7ab074b0    48  movz w0, #0x0
0xffff7ab074b4    52  stur x0, [x3, #31]
0xffff7ab074b8    56  ldur x0, [x1, #39]
0xffff7ab074bc    60  ldur x0, [x0, #39]
0xffff7ab074c0    64  movz x16, #0x19f
0xffff7ab074c4    68  ldr x0, [x0, x16]
0xffff7ab074c8    72  stur x0, [x3, #-1]
0xffff7ab074cc    76  ldr x0, pc+196 (addr 0x0000ffff7ab07590)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab074d0    80  stur x0, [x3, #7]
0xffff7ab074d4    84  ldr x0, pc+196 (addr 0x0000ffff7ab07598)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab074d8    88  stur x0, [x3, #15]
0xffff7ab074dc    92  movz x0, #0x0
0xffff7ab074e0    96  stur x0, [x3, #23]
0xffff7ab074e4   100  add x0, x3, #0x20 (32)
0xffff7ab074e8   104  ldr x1, pc+184 (addr 0x0000ffff7ab075a0)    ;; object: 0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab074ec   108  stur x1, [x0, #-1]
0xffff7ab074f0   112  movz x1, #0x400000000
0xffff7ab074f4   116  stur x1, [x0, #7]
0xffff7ab074f8   120  stur x0, [x3, #15]
0xffff7ab074fc   124  ldr d0, pc+140 (addr 0x0000ffff7ab07588)
0xffff7ab07500   128  stur d0, [x0, #15]
0xffff7ab07504   132  stur d0, [x0, #23]
0xffff7ab07508   136  stur d0, [x0, #31]
0xffff7ab0750c   140  stur d0, [x0, #39]
0xffff7ab07510   144  mov x0, x3
0xffff7ab07514   148  add jssp, jssp, #0x8 (8)
0xffff7ab07518   152  ret
0xffff7ab0751c   156  sub csp, jssp, #0x10 (16)
0xffff7ab07520   160  stp fp, lr, [jssp, #-16]!
0xffff7ab07524   164  movz fp, #0xa00000000
0xffff7ab07528   168  sub csp, jssp, #0x8 (8)
0xffff7ab0752c   172  str fp, [jssp, #-8]!
0xffff7ab07530   176  add fp, jssp, #0x8 (8)
0xffff7ab07534   180  movz x3, #0x0
0xffff7ab07538   184  mov x16, lr
0xffff7ab0753c   188  ldr x17, pc+108 (addr 0x0000ffff7ab075a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab07540   192  blr x17
0xffff7ab07544   196  movz x0, #0x5000000000
0xffff7ab07548   200  movz x10, #0x100000000
0xffff7ab0754c   204  sub csp, jssp, #0x10 (16)
0xffff7ab07550   208  stp x10, x0, [jssp, #-16]!
0xffff7ab07554   212  movz x0, #0x2
0xffff7ab07558   216  movz x1, #0x5b88
0xffff7ab0755c   220  movk x1, #0xe2, lsl #16
0xffff7ab07560   224  ldr x16, pc+80 (addr 0x0000ffff7ab075b0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab07564   228  blr x16
0xffff7ab07568   232  str x0, [jssp, #24]
0xffff7ab0756c   236  ldr x16, pc+76 (addr 0x0000ffff7ab075b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab07570   240  blr x16
0xffff7ab07574   244  ldr lr, [jssp, #16]
0xffff7ab07578   248  ldp xzr, fp, [jssp], #24
0xffff7ab0757c   252  b #-0xcc (addr 0xffff7ab074b0)
0xffff7ab07580   256  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab07584   260  d63f03e0       constant
0xffff7ab07588   264  fff7ffff       constant
0xffff7ab0758c   268  fff7ffff       constant
0xffff7ab07590   272  20d04201       constant
0xffff7ab07594   276  00000000       constant
0xffff7ab07598   280  20d04201       constant
0xffff7ab0759c   284  00000000       constant
0xffff7ab075a0   288  4ec052d9       constant
0xffff7ab075a4   292  00000000       constant
0xffff7ab075a8   296  7ab06820       constant
0xffff7ab075ac   300  0000ffff       constant
0xffff7ab075b0   304  7ab06260       constant
0xffff7ab075b4   308  0000ffff       constant
0xffff7ab075b8   312  7ab068e0       constant
0xffff7ab075bc   316  0000ffff       constant
0xffff7ab075c0   320  movz x16, #0x0
0xffff7ab075c4   324  sub csp, jssp, #0x10 (16)
0xffff7ab075c8   328  stp fp, lr, [jssp, #-16]!
0xffff7ab075cc   332  bl #+0x4 (addr 0xffff7ab075d0)
0xffff7ab075d0   336  movz x17, #0xa00000000
0xffff7ab075d4   340  sub csp, jssp, #0x10 (16)
0xffff7ab075d8   344  stp x17, cp, [jssp, #-16]!
0xffff7ab075dc   348  add fp, jssp, #0x10 (16)
0xffff7ab075e0   352  ldr x17, pc+24 (addr 0x0000ffff7ab075f8)    ;; lazy deoptimization bailout 0
0xffff7ab075e4   356  add x17, x17, x16
0xffff7ab075e8   360  br x17
0xffff7ab075ec   364  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab075f0   368  d63f03e0       constant
0xffff7ab075f4   372  d503201f       constant
0xffff7ab075f8   376  7a906000       constant
0xffff7ab075fc   380  0000ffff       constant


Safepoints (size = 21)
0xffff7ab07568   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab074cc  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab074d4  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab074e8  embedded object  (0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab0753c  code target (STUB)  (0xffff7ab06820)
0xffff7ab07560  code target (STUB)  (0xffff7ab06260)
0xffff7ab0756c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab07580  constant pool (size 64)
0xffff7ab075e0  runtime entry
0xffff7ab075ec  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 445)
0xffff7ab07680     0  movz w0, #0x6000
0xffff7ab07684     4  movk w0, #0x9, lsl #16
0xffff7ab07688     8  cmp w0, #0x30 (48)
0xffff7ab0768c    12  b.ls #+0x15c (addr 0xffff7ab077e8)
0xffff7ab07690    16  movz x2, #0xe2c0
0xffff7ab07694    20  movk x2, #0x9ab, lsl #16
0xffff7ab07698    24  ldp x3, x0, [x2]
0xffff7ab0769c    28  adds x16, x3, #0x50 (80)
0xffff7ab076a0    32  ccmp x16, x0, #nzCv, lo
0xffff7ab076a4    36  b.hi #+0x84 (addr 0xffff7ab07728)
0xffff7ab076a8    40  str x16, [x2]
0xffff7ab076ac    44  orr x3, x3, #0x1
0xffff7ab076b0    48  movz w0, #0x0
0xffff7ab076b4    52  stur x0, [x3, #31]
0xffff7ab076b8    56  ldur x0, [x1, #39]
0xffff7ab076bc    60  ldur x0, [x0, #39]
0xffff7ab076c0    64  movz x16, #0x187
0xffff7ab076c4    68  ldr x0, [x0, x16]
0xffff7ab076c8    72  stur x0, [x3, #-1]
0xffff7ab076cc    76  ldr x0, pc+204 (addr 0x0000ffff7ab07798)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab076d0    80  stur x0, [x3, #7]
0xffff7ab076d4    84  ldr x0, pc+204 (addr 0x0000ffff7ab077a0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab076d8    88  stur x0, [x3, #15]
0xffff7ab076dc    92  movz x0, #0x0
0xffff7ab076e0    96  stur x0, [x3, #23]
0xffff7ab076e4   100  add x0, x3, #0x20 (32)
0xffff7ab076e8   104  ldr x1, pc+192 (addr 0x0000ffff7ab077a8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab076ec   108  stur x1, [x0, #-1]
0xffff7ab076f0   112  movz x1, #0x400000000
0xffff7ab076f4   116  stur x1, [x0, #7]
0xffff7ab076f8   120  stur x0, [x3, #15]
0xffff7ab076fc   124  ldr x1, pc+180 (addr 0x0000ffff7ab077b0)    ;; object: 0x20d04519 <the hole>
0xffff7ab07700   128  stur x1, [x0, #15]
0xffff7ab07704   132  ldr x1, pc+180 (addr 0x0000ffff7ab077b8)    ;; object: 0x20d04519 <the hole>
0xffff7ab07708   136  stur x1, [x0, #23]
0xffff7ab0770c   140  ldr x1, pc+180 (addr 0x0000ffff7ab077c0)    ;; object: 0x20d04519 <the hole>
0xffff7ab07710   144  stur x1, [x0, #31]
0xffff7ab07714   148  ldr x1, pc+180 (addr 0x0000ffff7ab077c8)    ;; object: 0x20d04519 <the hole>
0xffff7ab07718   152  stur x1, [x0, #39]
0xffff7ab0771c   156  mov x0, x3
0xffff7ab07720   160  add jssp, jssp, #0x8 (8)
0xffff7ab07724   164  ret
0xffff7ab07728   168  sub csp, jssp, #0x10 (16)
0xffff7ab0772c   172  stp fp, lr, [jssp, #-16]!
0xffff7ab07730   176  movz fp, #0xa00000000
0xffff7ab07734   180  sub csp, jssp, #0x8 (8)
0xffff7ab07738   184  str fp, [jssp, #-8]!
0xffff7ab0773c   188  add fp, jssp, #0x8 (8)
0xffff7ab07740   192  movz x3, #0x0
0xffff7ab07744   196  mov x16, lr
0xffff7ab07748   200  ldr x17, pc+136 (addr 0x0000ffff7ab077d0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0774c   204  blr x17
0xffff7ab07750   208  movz x0, #0x5000000000
0xffff7ab07754   212  movz x10, #0x0
0xffff7ab07758   216  sub csp, jssp, #0x10 (16)
0xffff7ab0775c   220  stp x10, x0, [jssp, #-16]!
0xffff7ab07760   224  movz x0, #0x2
0xffff7ab07764   228  movz x1, #0x5b88
0xffff7ab07768   232  movk x1, #0xe2, lsl #16
0xffff7ab0776c   236  ldr x16, pc+108 (addr 0x0000ffff7ab077d8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab07770   240  blr x16
0xffff7ab07774   244  str x0, [jssp, #24]
0xffff7ab07778   248  ldr x16, pc+104 (addr 0x0000ffff7ab077e0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0777c   252  blr x16
0xffff7ab07780   256  ldr lr, [jssp, #16]
0xffff7ab07784   260  ldp xzr, fp, [jssp], #24
0xffff7ab07788   264  b #-0xd8 (addr 0xffff7ab076b0)
0xffff7ab0778c   268  580002df       constant pool begin (num_const = 22)    ;; constant pool
0xffff7ab07790   272  d63f03e0       constant
0xffff7ab07794   276  d503201f       constant
0xffff7ab07798   280  20d04201       constant
0xffff7ab0779c   284  00000000       constant
0xffff7ab077a0   288  20d04201       constant
0xffff7ab077a4   292  00000000       constant
0xffff7ab077a8   296  4ec04259       constant
0xffff7ab077ac   300  00000000       constant
0xffff7ab077b0   304  20d04519       constant
0xffff7ab077b4   308  00000000       constant
0xffff7ab077b8   312  20d04519       constant
0xffff7ab077bc   316  00000000       constant
0xffff7ab077c0   320  20d04519       constant
0xffff7ab077c4   324  00000000       constant
0xffff7ab077c8   328  20d04519       constant
0xffff7ab077cc   332  00000000       constant
0xffff7ab077d0   336  7ab06820       constant
0xffff7ab077d4   340  0000ffff       constant
0xffff7ab077d8   344  7ab06260       constant
0xffff7ab077dc   348  0000ffff       constant
0xffff7ab077e0   352  7ab068e0       constant
0xffff7ab077e4   356  0000ffff       constant
0xffff7ab077e8   360  movz x16, #0x0
0xffff7ab077ec   364  sub csp, jssp, #0x10 (16)
0xffff7ab077f0   368  stp fp, lr, [jssp, #-16]!
0xffff7ab077f4   372  bl #+0x4 (addr 0xffff7ab077f8)
0xffff7ab077f8   376  movz x17, #0xa00000000
0xffff7ab077fc   380  sub csp, jssp, #0x10 (16)
0xffff7ab07800   384  stp x17, cp, [jssp, #-16]!
0xffff7ab07804   388  add fp, jssp, #0x10 (16)
0xffff7ab07808   392  ldr x17, pc+24 (addr 0x0000ffff7ab07820)    ;; lazy deoptimization bailout 0
0xffff7ab0780c   396  add x17, x17, x16
0xffff7ab07810   400  br x17
0xffff7ab07814   404  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab07818   408  d63f03e0       constant
0xffff7ab0781c   412  d503201f       constant
0xffff7ab07820   416  7a906000       constant
0xffff7ab07824   420  0000ffff       constant


Safepoints (size = 21)
0xffff7ab07774   244  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0xffff7ab076cc  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab076d4  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab076e8  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab076fc  embedded object  (0x20d04519 <the hole>)
0xffff7ab07704  embedded object  (0x20d04519 <the hole>)
0xffff7ab0770c  embedded object  (0x20d04519 <the hole>)
0xffff7ab07714  embedded object  (0x20d04519 <the hole>)
0xffff7ab07748  code target (STUB)  (0xffff7ab06820)
0xffff7ab0776c  code target (STUB)  (0xffff7ab06260)
0xffff7ab07778  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0778c  constant pool (size 92)
0xffff7ab07808  runtime entry
0xffff7ab07814  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNoArgumentConstructorStub
name = ArrayNoArgumentConstructorStub_FAST_ELEMENTS
compiler = crankshaft
Instructions (size = 445)
0xffff7ab07680     0  movz w0, #0x6000
0xffff7ab07684     4  movk w0, #0x9, lsl #16
0xffff7ab07688     8  cmp w0, #0x30 (48)
0xffff7ab0768c    12  b.ls #+0x15c (addr 0xffff7ab077e8)
0xffff7ab07690    16  movz x2, #0xe2c0
0xffff7ab07694    20  movk x2, #0x9ab, lsl #16
0xffff7ab07698    24  ldp x3, x0, [x2]
0xffff7ab0769c    28  adds x16, x3, #0x50 (80)
0xffff7ab076a0    32  ccmp x16, x0, #nzCv, lo
0xffff7ab076a4    36  b.hi #+0x84 (addr 0xffff7ab07728)
0xffff7ab076a8    40  str x16, [x2]
0xffff7ab076ac    44  orr x3, x3, #0x1
0xffff7ab076b0    48  movz w0, #0x0
0xffff7ab076b4    52  stur x0, [x3, #31]
0xffff7ab076b8    56  ldur x0, [x1, #39]
0xffff7ab076bc    60  ldur x0, [x0, #39]
0xffff7ab076c0    64  movz x16, #0x187
0xffff7ab076c4    68  ldr x0, [x0, x16]
0xffff7ab076c8    72  stur x0, [x3, #-1]
0xffff7ab076cc    76  ldr x0, pc+204 (addr 0x0000ffff7ab07798)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab076d0    80  stur x0, [x3, #7]
0xffff7ab076d4    84  ldr x0, pc+204 (addr 0x0000ffff7ab077a0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab076d8    88  stur x0, [x3, #15]
0xffff7ab076dc    92  movz x0, #0x0
0xffff7ab076e0    96  stur x0, [x3, #23]
0xffff7ab076e4   100  add x0, x3, #0x20 (32)
0xffff7ab076e8   104  ldr x1, pc+192 (addr 0x0000ffff7ab077a8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab076ec   108  stur x1, [x0, #-1]
0xffff7ab076f0   112  movz x1, #0x400000000
0xffff7ab076f4   116  stur x1, [x0, #7]
0xffff7ab076f8   120  stur x0, [x3, #15]
0xffff7ab076fc   124  ldr x1, pc+180 (addr 0x0000ffff7ab077b0)    ;; object: 0x20d04519 <the hole>
0xffff7ab07700   128  stur x1, [x0, #15]
0xffff7ab07704   132  ldr x1, pc+180 (addr 0x0000ffff7ab077b8)    ;; object: 0x20d04519 <the hole>
0xffff7ab07708   136  stur x1, [x0, #23]
0xffff7ab0770c   140  ldr x1, pc+180 (addr 0x0000ffff7ab077c0)    ;; object: 0x20d04519 <the hole>
0xffff7ab07710   144  stur x1, [x0, #31]
0xffff7ab07714   148  ldr x1, pc+180 (addr 0x0000ffff7ab077c8)    ;; object: 0x20d04519 <the hole>
0xffff7ab07718   152  stur x1, [x0, #39]
0xffff7ab0771c   156  mov x0, x3
0xffff7ab07720   160  add jssp, jssp, #0x8 (8)
0xffff7ab07724   164  ret
0xffff7ab07728   168  sub csp, jssp, #0x10 (16)
0xffff7ab0772c   172  stp fp, lr, [jssp, #-16]!
0xffff7ab07730   176  movz fp, #0xa00000000
0xffff7ab07734   180  sub csp, jssp, #0x8 (8)
0xffff7ab07738   184  str fp, [jssp, #-8]!
0xffff7ab0773c   188  add fp, jssp, #0x8 (8)
0xffff7ab07740   192  movz x3, #0x0
0xffff7ab07744   196  mov x16, lr
0xffff7ab07748   200  ldr x17, pc+136 (addr 0x0000ffff7ab077d0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0774c   204  blr x17
0xffff7ab07750   208  movz x0, #0x5000000000
0xffff7ab07754   212  movz x10, #0x0
0xffff7ab07758   216  sub csp, jssp, #0x10 (16)
0xffff7ab0775c   220  stp x10, x0, [jssp, #-16]!
0xffff7ab07760   224  movz x0, #0x2
0xffff7ab07764   228  movz x1, #0x5b88
0xffff7ab07768   232  movk x1, #0xe2, lsl #16
0xffff7ab0776c   236  ldr x16, pc+108 (addr 0x0000ffff7ab077d8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab07770   240  blr x16
0xffff7ab07774   244  str x0, [jssp, #24]
0xffff7ab07778   248  ldr x16, pc+104 (addr 0x0000ffff7ab077e0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0777c   252  blr x16
0xffff7ab07780   256  ldr lr, [jssp, #16]
0xffff7ab07784   260  ldp xzr, fp, [jssp], #24
0xffff7ab07788   264  b #-0xd8 (addr 0xffff7ab076b0)
0xffff7ab0778c   268  580002df       constant pool begin (num_const = 22)    ;; constant pool
0xffff7ab07790   272  d63f03e0       constant
0xffff7ab07794   276  d503201f       constant
0xffff7ab07798   280  20d04201       constant
0xffff7ab0779c   284  00000000       constant
0xffff7ab077a0   288  20d04201       constant
0xffff7ab077a4   292  00000000       constant
0xffff7ab077a8   296  4ec04259       constant
0xffff7ab077ac   300  00000000       constant
0xffff7ab077b0   304  20d04519       constant
0xffff7ab077b4   308  00000000       constant
0xffff7ab077b8   312  20d04519       constant
0xffff7ab077bc   316  00000000       constant
0xffff7ab077c0   320  20d04519       constant
0xffff7ab077c4   324  00000000       constant
0xffff7ab077c8   328  20d04519       constant
0xffff7ab077cc   332  00000000       constant
0xffff7ab077d0   336  7ab06820       constant
0xffff7ab077d4   340  0000ffff       constant
0xffff7ab077d8   344  7ab06260       constant
0xffff7ab077dc   348  0000ffff       constant
0xffff7ab077e0   352  7ab068e0       constant
0xffff7ab077e4   356  0000ffff       constant
0xffff7ab077e8   360  movz x16, #0x0
0xffff7ab077ec   364  sub csp, jssp, #0x10 (16)
0xffff7ab077f0   368  stp fp, lr, [jssp, #-16]!
0xffff7ab077f4   372  bl #+0x4 (addr 0xffff7ab077f8)
0xffff7ab077f8   376  movz x17, #0xa00000000
0xffff7ab077fc   380  sub csp, jssp, #0x10 (16)
0xffff7ab07800   384  stp x17, cp, [jssp, #-16]!
0xffff7ab07804   388  add fp, jssp, #0x10 (16)
0xffff7ab07808   392  ldr x17, pc+24 (addr 0x0000ffff7ab07820)    ;; lazy deoptimization bailout 0
0xffff7ab0780c   396  add x17, x17, x16
0xffff7ab07810   400  br x17
0xffff7ab07814   404  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab07818   408  d63f03e0       constant
0xffff7ab0781c   412  d503201f       constant
0xffff7ab07820   416  7a906000       constant
0xffff7ab07824   420  0000ffff       constant


Safepoints (size = 21)
0xffff7ab07774   244  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0xffff7ab076cc  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab076d4  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab076e8  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab076fc  embedded object  (0x20d04519 <the hole>)
0xffff7ab07704  embedded object  (0x20d04519 <the hole>)
0xffff7ab0770c  embedded object  (0x20d04519 <the hole>)
0xffff7ab07714  embedded object  (0x20d04519 <the hole>)
0xffff7ab07748  code target (STUB)  (0xffff7ab06820)
0xffff7ab0776c  code target (STUB)  (0xffff7ab06260)
0xffff7ab07778  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0778c  constant pool (size 92)
0xffff7ab07808  runtime entry
0xffff7ab07814  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 445)
0xffff7ab078a0     0  movz w0, #0x6000
0xffff7ab078a4     4  movk w0, #0x9, lsl #16
0xffff7ab078a8     8  cmp w0, #0x30 (48)
0xffff7ab078ac    12  b.ls #+0x15c (addr 0xffff7ab07a08)
0xffff7ab078b0    16  movz x2, #0xe2c0
0xffff7ab078b4    20  movk x2, #0x9ab, lsl #16
0xffff7ab078b8    24  ldp x3, x0, [x2]
0xffff7ab078bc    28  adds x16, x3, #0x50 (80)
0xffff7ab078c0    32  ccmp x16, x0, #nzCv, lo
0xffff7ab078c4    36  b.hi #+0x84 (addr 0xffff7ab07948)
0xffff7ab078c8    40  str x16, [x2]
0xffff7ab078cc    44  orr x3, x3, #0x1
0xffff7ab078d0    48  movz w0, #0x0
0xffff7ab078d4    52  stur x0, [x3, #31]
0xffff7ab078d8    56  ldur x0, [x1, #39]
0xffff7ab078dc    60  ldur x0, [x0, #39]
0xffff7ab078e0    64  movz x16, #0x18f
0xffff7ab078e4    68  ldr x0, [x0, x16]
0xffff7ab078e8    72  stur x0, [x3, #-1]
0xffff7ab078ec    76  ldr x0, pc+204 (addr 0x0000ffff7ab079b8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab078f0    80  stur x0, [x3, #7]
0xffff7ab078f4    84  ldr x0, pc+204 (addr 0x0000ffff7ab079c0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab078f8    88  stur x0, [x3, #15]
0xffff7ab078fc    92  movz x0, #0x0
0xffff7ab07900    96  stur x0, [x3, #23]
0xffff7ab07904   100  add x0, x3, #0x20 (32)
0xffff7ab07908   104  ldr x1, pc+192 (addr 0x0000ffff7ab079c8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab0790c   108  stur x1, [x0, #-1]
0xffff7ab07910   112  movz x1, #0x400000000
0xffff7ab07914   116  stur x1, [x0, #7]
0xffff7ab07918   120  stur x0, [x3, #15]
0xffff7ab0791c   124  ldr x1, pc+180 (addr 0x0000ffff7ab079d0)    ;; object: 0x20d04519 <the hole>
0xffff7ab07920   128  stur x1, [x0, #15]
0xffff7ab07924   132  ldr x1, pc+180 (addr 0x0000ffff7ab079d8)    ;; object: 0x20d04519 <the hole>
0xffff7ab07928   136  stur x1, [x0, #23]
0xffff7ab0792c   140  ldr x1, pc+180 (addr 0x0000ffff7ab079e0)    ;; object: 0x20d04519 <the hole>
0xffff7ab07930   144  stur x1, [x0, #31]
0xffff7ab07934   148  ldr x1, pc+180 (addr 0x0000ffff7ab079e8)    ;; object: 0x20d04519 <the hole>
0xffff7ab07938   152  stur x1, [x0, #39]
0xffff7ab0793c   156  mov x0, x3
0xffff7ab07940   160  add jssp, jssp, #0x8 (8)
0xffff7ab07944   164  ret
0xffff7ab07948   168  sub csp, jssp, #0x10 (16)
0xffff7ab0794c   172  stp fp, lr, [jssp, #-16]!
0xffff7ab07950   176  movz fp, #0xa00000000
0xffff7ab07954   180  sub csp, jssp, #0x8 (8)
0xffff7ab07958   184  str fp, [jssp, #-8]!
0xffff7ab0795c   188  add fp, jssp, #0x8 (8)
0xffff7ab07960   192  movz x3, #0x0
0xffff7ab07964   196  mov x16, lr
0xffff7ab07968   200  ldr x17, pc+136 (addr 0x0000ffff7ab079f0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0796c   204  blr x17
0xffff7ab07970   208  movz x0, #0x5000000000
0xffff7ab07974   212  movz x10, #0x0
0xffff7ab07978   216  sub csp, jssp, #0x10 (16)
0xffff7ab0797c   220  stp x10, x0, [jssp, #-16]!
0xffff7ab07980   224  movz x0, #0x2
0xffff7ab07984   228  movz x1, #0x5b88
0xffff7ab07988   232  movk x1, #0xe2, lsl #16
0xffff7ab0798c   236  ldr x16, pc+108 (addr 0x0000ffff7ab079f8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab07990   240  blr x16
0xffff7ab07994   244  str x0, [jssp, #24]
0xffff7ab07998   248  ldr x16, pc+104 (addr 0x0000ffff7ab07a00)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0799c   252  blr x16
0xffff7ab079a0   256  ldr lr, [jssp, #16]
0xffff7ab079a4   260  ldp xzr, fp, [jssp], #24
0xffff7ab079a8   264  b #-0xd8 (addr 0xffff7ab078d0)
0xffff7ab079ac   268  580002df       constant pool begin (num_const = 22)    ;; constant pool
0xffff7ab079b0   272  d63f03e0       constant
0xffff7ab079b4   276  d503201f       constant
0xffff7ab079b8   280  20d04201       constant
0xffff7ab079bc   284  00000000       constant
0xffff7ab079c0   288  20d04201       constant
0xffff7ab079c4   292  00000000       constant
0xffff7ab079c8   296  4ec04259       constant
0xffff7ab079cc   300  00000000       constant
0xffff7ab079d0   304  20d04519       constant
0xffff7ab079d4   308  00000000       constant
0xffff7ab079d8   312  20d04519       constant
0xffff7ab079dc   316  00000000       constant
0xffff7ab079e0   320  20d04519       constant
0xffff7ab079e4   324  00000000       constant
0xffff7ab079e8   328  20d04519       constant
0xffff7ab079ec   332  00000000       constant
0xffff7ab079f0   336  7ab06820       constant
0xffff7ab079f4   340  0000ffff       constant
0xffff7ab079f8   344  7ab06260       constant
0xffff7ab079fc   348  0000ffff       constant
0xffff7ab07a00   352  7ab068e0       constant
0xffff7ab07a04   356  0000ffff       constant
0xffff7ab07a08   360  movz x16, #0x0
0xffff7ab07a0c   364  sub csp, jssp, #0x10 (16)
0xffff7ab07a10   368  stp fp, lr, [jssp, #-16]!
0xffff7ab07a14   372  bl #+0x4 (addr 0xffff7ab07a18)
0xffff7ab07a18   376  movz x17, #0xa00000000
0xffff7ab07a1c   380  sub csp, jssp, #0x10 (16)
0xffff7ab07a20   384  stp x17, cp, [jssp, #-16]!
0xffff7ab07a24   388  add fp, jssp, #0x10 (16)
0xffff7ab07a28   392  ldr x17, pc+24 (addr 0x0000ffff7ab07a40)    ;; lazy deoptimization bailout 0
0xffff7ab07a2c   396  add x17, x17, x16
0xffff7ab07a30   400  br x17
0xffff7ab07a34   404  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab07a38   408  d63f03e0       constant
0xffff7ab07a3c   412  d503201f       constant
0xffff7ab07a40   416  7a906000       constant
0xffff7ab07a44   420  0000ffff       constant


Safepoints (size = 21)
0xffff7ab07994   244  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0xffff7ab078ec  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab078f4  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab07908  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab0791c  embedded object  (0x20d04519 <the hole>)
0xffff7ab07924  embedded object  (0x20d04519 <the hole>)
0xffff7ab0792c  embedded object  (0x20d04519 <the hole>)
0xffff7ab07934  embedded object  (0x20d04519 <the hole>)
0xffff7ab07968  code target (STUB)  (0xffff7ab06820)
0xffff7ab0798c  code target (STUB)  (0xffff7ab06260)
0xffff7ab07998  code target (STUB)  (0xffff7ab068e0)
0xffff7ab079ac  constant pool (size 92)
0xffff7ab07a28  runtime entry
0xffff7ab07a34  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNoArgumentConstructorStub
name = ArrayNoArgumentConstructorStub_FAST_HOLEY_ELEMENTS
compiler = crankshaft
Instructions (size = 445)
0xffff7ab078a0     0  movz w0, #0x6000
0xffff7ab078a4     4  movk w0, #0x9, lsl #16
0xffff7ab078a8     8  cmp w0, #0x30 (48)
0xffff7ab078ac    12  b.ls #+0x15c (addr 0xffff7ab07a08)
0xffff7ab078b0    16  movz x2, #0xe2c0
0xffff7ab078b4    20  movk x2, #0x9ab, lsl #16
0xffff7ab078b8    24  ldp x3, x0, [x2]
0xffff7ab078bc    28  adds x16, x3, #0x50 (80)
0xffff7ab078c0    32  ccmp x16, x0, #nzCv, lo
0xffff7ab078c4    36  b.hi #+0x84 (addr 0xffff7ab07948)
0xffff7ab078c8    40  str x16, [x2]
0xffff7ab078cc    44  orr x3, x3, #0x1
0xffff7ab078d0    48  movz w0, #0x0
0xffff7ab078d4    52  stur x0, [x3, #31]
0xffff7ab078d8    56  ldur x0, [x1, #39]
0xffff7ab078dc    60  ldur x0, [x0, #39]
0xffff7ab078e0    64  movz x16, #0x18f
0xffff7ab078e4    68  ldr x0, [x0, x16]
0xffff7ab078e8    72  stur x0, [x3, #-1]
0xffff7ab078ec    76  ldr x0, pc+204 (addr 0x0000ffff7ab079b8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab078f0    80  stur x0, [x3, #7]
0xffff7ab078f4    84  ldr x0, pc+204 (addr 0x0000ffff7ab079c0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab078f8    88  stur x0, [x3, #15]
0xffff7ab078fc    92  movz x0, #0x0
0xffff7ab07900    96  stur x0, [x3, #23]
0xffff7ab07904   100  add x0, x3, #0x20 (32)
0xffff7ab07908   104  ldr x1, pc+192 (addr 0x0000ffff7ab079c8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab0790c   108  stur x1, [x0, #-1]
0xffff7ab07910   112  movz x1, #0x400000000
0xffff7ab07914   116  stur x1, [x0, #7]
0xffff7ab07918   120  stur x0, [x3, #15]
0xffff7ab0791c   124  ldr x1, pc+180 (addr 0x0000ffff7ab079d0)    ;; object: 0x20d04519 <the hole>
0xffff7ab07920   128  stur x1, [x0, #15]
0xffff7ab07924   132  ldr x1, pc+180 (addr 0x0000ffff7ab079d8)    ;; object: 0x20d04519 <the hole>
0xffff7ab07928   136  stur x1, [x0, #23]
0xffff7ab0792c   140  ldr x1, pc+180 (addr 0x0000ffff7ab079e0)    ;; object: 0x20d04519 <the hole>
0xffff7ab07930   144  stur x1, [x0, #31]
0xffff7ab07934   148  ldr x1, pc+180 (addr 0x0000ffff7ab079e8)    ;; object: 0x20d04519 <the hole>
0xffff7ab07938   152  stur x1, [x0, #39]
0xffff7ab0793c   156  mov x0, x3
0xffff7ab07940   160  add jssp, jssp, #0x8 (8)
0xffff7ab07944   164  ret
0xffff7ab07948   168  sub csp, jssp, #0x10 (16)
0xffff7ab0794c   172  stp fp, lr, [jssp, #-16]!
0xffff7ab07950   176  movz fp, #0xa00000000
0xffff7ab07954   180  sub csp, jssp, #0x8 (8)
0xffff7ab07958   184  str fp, [jssp, #-8]!
0xffff7ab0795c   188  add fp, jssp, #0x8 (8)
0xffff7ab07960   192  movz x3, #0x0
0xffff7ab07964   196  mov x16, lr
0xffff7ab07968   200  ldr x17, pc+136 (addr 0x0000ffff7ab079f0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0796c   204  blr x17
0xffff7ab07970   208  movz x0, #0x5000000000
0xffff7ab07974   212  movz x10, #0x0
0xffff7ab07978   216  sub csp, jssp, #0x10 (16)
0xffff7ab0797c   220  stp x10, x0, [jssp, #-16]!
0xffff7ab07980   224  movz x0, #0x2
0xffff7ab07984   228  movz x1, #0x5b88
0xffff7ab07988   232  movk x1, #0xe2, lsl #16
0xffff7ab0798c   236  ldr x16, pc+108 (addr 0x0000ffff7ab079f8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab07990   240  blr x16
0xffff7ab07994   244  str x0, [jssp, #24]
0xffff7ab07998   248  ldr x16, pc+104 (addr 0x0000ffff7ab07a00)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0799c   252  blr x16
0xffff7ab079a0   256  ldr lr, [jssp, #16]
0xffff7ab079a4   260  ldp xzr, fp, [jssp], #24
0xffff7ab079a8   264  b #-0xd8 (addr 0xffff7ab078d0)
0xffff7ab079ac   268  580002df       constant pool begin (num_const = 22)    ;; constant pool
0xffff7ab079b0   272  d63f03e0       constant
0xffff7ab079b4   276  d503201f       constant
0xffff7ab079b8   280  20d04201       constant
0xffff7ab079bc   284  00000000       constant
0xffff7ab079c0   288  20d04201       constant
0xffff7ab079c4   292  00000000       constant
0xffff7ab079c8   296  4ec04259       constant
0xffff7ab079cc   300  00000000       constant
0xffff7ab079d0   304  20d04519       constant
0xffff7ab079d4   308  00000000       constant
0xffff7ab079d8   312  20d04519       constant
0xffff7ab079dc   316  00000000       constant
0xffff7ab079e0   320  20d04519       constant
0xffff7ab079e4   324  00000000       constant
0xffff7ab079e8   328  20d04519       constant
0xffff7ab079ec   332  00000000       constant
0xffff7ab079f0   336  7ab06820       constant
0xffff7ab079f4   340  0000ffff       constant
0xffff7ab079f8   344  7ab06260       constant
0xffff7ab079fc   348  0000ffff       constant
0xffff7ab07a00   352  7ab068e0       constant
0xffff7ab07a04   356  0000ffff       constant
0xffff7ab07a08   360  movz x16, #0x0
0xffff7ab07a0c   364  sub csp, jssp, #0x10 (16)
0xffff7ab07a10   368  stp fp, lr, [jssp, #-16]!
0xffff7ab07a14   372  bl #+0x4 (addr 0xffff7ab07a18)
0xffff7ab07a18   376  movz x17, #0xa00000000
0xffff7ab07a1c   380  sub csp, jssp, #0x10 (16)
0xffff7ab07a20   384  stp x17, cp, [jssp, #-16]!
0xffff7ab07a24   388  add fp, jssp, #0x10 (16)
0xffff7ab07a28   392  ldr x17, pc+24 (addr 0x0000ffff7ab07a40)    ;; lazy deoptimization bailout 0
0xffff7ab07a2c   396  add x17, x17, x16
0xffff7ab07a30   400  br x17
0xffff7ab07a34   404  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab07a38   408  d63f03e0       constant
0xffff7ab07a3c   412  d503201f       constant
0xffff7ab07a40   416  7a906000       constant
0xffff7ab07a44   420  0000ffff       constant


Safepoints (size = 21)
0xffff7ab07994   244  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0xffff7ab078ec  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab078f4  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab07908  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab0791c  embedded object  (0x20d04519 <the hole>)
0xffff7ab07924  embedded object  (0x20d04519 <the hole>)
0xffff7ab0792c  embedded object  (0x20d04519 <the hole>)
0xffff7ab07934  embedded object  (0x20d04519 <the hole>)
0xffff7ab07968  code target (STUB)  (0xffff7ab06820)
0xffff7ab0798c  code target (STUB)  (0xffff7ab06260)
0xffff7ab07998  code target (STUB)  (0xffff7ab068e0)
0xffff7ab079ac  constant pool (size 92)
0xffff7ab07a28  runtime entry
0xffff7ab07a34  constant pool (size 20)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1904)
0xffff7ab07ac0     0  adr xzr, #+0x40 (addr 0xffff7ab07b00)
0xffff7ab07ac4     4  adr xzr, #+0x358 (addr 0xffff7ab07e1c)
0xffff7ab07ac8     8  ldr x16, pc+1720 (addr 0x0000ffff7ab08180)    ;; external reference (store_buffer_top)
0xffff7ab07acc    12  ldr x0, [x16]
0xffff7ab07ad0    16  str x1, [x0], #8
0xffff7ab07ad4    20  str x0, [x16]
0xffff7ab07ad8    24  tst x0, #0x1ffff
0xffff7ab07adc    28  b.eq #+0x8 (addr 0xffff7ab07ae4)
0xffff7ab07ae0    32  ret
0xffff7ab07ae4    36  sub csp, jssp, #0x8 (8)
0xffff7ab07ae8    40  str lr, [jssp, #-8]!
0xffff7ab07aec    44  ldr x17, pc+1692 (addr 0x0000ffff7ab08188)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab07af0    48  blr x17
0xffff7ab07af4    52  ldr lr, [jssp], #8
0xffff7ab07af8    56  ret
0xffff7ab07afc    60  ret
0xffff7ab07b00    64  sub csp, jssp, #0x10 (16)
0xffff7ab07b04    68  stp x3, x2, [jssp, #-16]!
0xffff7ab07b08    72  ldr x0, [x1]
0xffff7ab07b0c    76  and x16, x0, #0xfffffffffff00000
0xffff7ab07b10    80  ldr x16, [x16, #8]
0xffff7ab07b14    84  tst x16, #0x18
0xffff7ab07b18    88  b.eq #+0x1d4 (addr 0xffff7ab07cec)
0xffff7ab07b1c    92  and x16, x8, #0xfffffffffff00000
0xffff7ab07b20    96  ldr x16, [x16, #8]
0xffff7ab07b24   100  tst x16, #0x18
0xffff7ab07b28   104  b.ne #+0x1c4 (addr 0xffff7ab07cec)
0xffff7ab07b2c   108  and x0, x8, #0xfffffffffff00000
0xffff7ab07b30   112  ldr x2, [x0, #104]
0xffff7ab07b34   116  subs x2, x2, #0x1 (1)
0xffff7ab07b38   120  str x2, [x0, #104]
0xffff7ab07b3c   124  b.mi #+0xc4 (addr 0xffff7ab07c00)
0xffff7ab07b40   128  ubfx x16, x8, #8, #12
0xffff7ab07b44   132  and x0, x8, #0xfffffffffff00000
0xffff7ab07b48   136  add x0, x0, x16, lsl #2
0xffff7ab07b4c   140  ubfx x2, x8, #3, #5
0xffff7ab07b50   144  ldr x0, [x0, #360]
0xffff7ab07b54   148  lsr x0, x0, x2
0xffff7ab07b58   152  tbz w0, #0, #+0x8 (addr 0xffff7ab07b60)
0xffff7ab07b5c   156  tbnz w0, #1, #+0x3c (addr 0xffff7ab07b98)
0xffff7ab07b60   160  ldp x3, x2, [jssp], #16
0xffff7ab07b64   164  ldr x16, pc+1580 (addr 0x0000ffff7ab08190)    ;; external reference (store_buffer_top)
0xffff7ab07b68   168  ldr x0, [x16]
0xffff7ab07b6c   172  str x1, [x0], #8
0xffff7ab07b70   176  str x0, [x16]
0xffff7ab07b74   180  tst x0, #0x1ffff
0xffff7ab07b78   184  b.eq #+0x8 (addr 0xffff7ab07b80)
0xffff7ab07b7c   188  ret
0xffff7ab07b80   192  sub csp, jssp, #0x8 (8)
0xffff7ab07b84   196  str lr, [jssp, #-8]!
0xffff7ab07b88   200  ldr x17, pc+1552 (addr 0x0000ffff7ab08198)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab07b8c   204  blr x17
0xffff7ab07b90   208  ldr lr, [jssp], #8
0xffff7ab07b94   212  ret
0xffff7ab07b98   216  ldr x0, [x1]
0xffff7ab07b9c   220  sub csp, jssp, #0x10 (16)
0xffff7ab07ba0   224  stp x8, x1, [jssp, #-16]!
0xffff7ab07ba4   228  ubfx x16, x0, #8, #12
0xffff7ab07ba8   232  and x2, x0, #0xfffffffffff00000
0xffff7ab07bac   236  add x2, x2, x16, lsl #2
0xffff7ab07bb0   240  ubfx x8, x0, #3, #5
0xffff7ab07bb4   244  ldr x1, [x2, #360]
0xffff7ab07bb8   248  lsr x1, x1, x8
0xffff7ab07bbc   252  tbz w1, #0, #+0x40 (addr 0xffff7ab07bfc)
0xffff7ab07bc0   256  ldp x8, x1, [jssp], #16
0xffff7ab07bc4   260  ldp x3, x2, [jssp], #16
0xffff7ab07bc8   264  ldr x16, pc+1496 (addr 0x0000ffff7ab081a0)    ;; external reference (store_buffer_top)
0xffff7ab07bcc   268  ldr x0, [x16]
0xffff7ab07bd0   272  str x1, [x0], #8
0xffff7ab07bd4   276  str x0, [x16]
0xffff7ab07bd8   280  tst x0, #0x1ffff
0xffff7ab07bdc   284  b.eq #+0x8 (addr 0xffff7ab07be4)
0xffff7ab07be0   288  ret
0xffff7ab07be4   292  sub csp, jssp, #0x8 (8)
0xffff7ab07be8   296  str lr, [jssp, #-8]!
0xffff7ab07bec   300  ldr x17, pc+1468 (addr 0x0000ffff7ab081a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab07bf0   304  blr x17
0xffff7ab07bf4   308  ldr lr, [jssp], #8
0xffff7ab07bf8   312  ret
0xffff7ab07bfc   316  ldp x8, x1, [jssp], #16
0xffff7ab07c00   320  sub csp, jssp, #0x78 (120)
0xffff7ab07c04   324  stp x14, x15, [jssp, #-32]!
0xffff7ab07c08   328  stp x18, lr, [jssp, #16]
0xffff7ab07c0c   332  stp x10, x11, [jssp, #-32]!
0xffff7ab07c10   336  stp x12, x13, [jssp, #16]
0xffff7ab07c14   340  stp x6, x7, [jssp, #-32]!
0xffff7ab07c18   344  stp x8, x9, [jssp, #16]
0xffff7ab07c1c   348  stp x1, x4, [jssp, #-24]!
0xffff7ab07c20   352  str x5, [jssp, #16]
0xffff7ab07c24   356  sub csp, jssp, #0xb0 (176)
0xffff7ab07c28   360  stp d26, d27, [jssp, #-32]!
0xffff7ab07c2c   364  stp d28, d29, [jssp, #16]
0xffff7ab07c30   368  stp d22, d23, [jssp, #-32]!
0xffff7ab07c34   372  stp d24, d25, [jssp, #16]
0xffff7ab07c38   376  stp d18, d19, [jssp, #-32]!
0xffff7ab07c3c   380  stp d20, d21, [jssp, #16]
0xffff7ab07c40   384  stp d6, d7, [jssp, #-32]!
0xffff7ab07c44   388  stp d16, d17, [jssp, #16]
0xffff7ab07c48   392  stp d2, d3, [jssp, #-32]!
0xffff7ab07c4c   396  stp d4, d5, [jssp, #16]
0xffff7ab07c50   400  stp d0, d1, [jssp, #-16]!
0xffff7ab07c54   404  mov x0, x8
0xffff7ab07c58   408  ldr x2, pc+1368 (addr 0x0000ffff7ab081b0)    ;; external reference (isolate)
0xffff7ab07c5c   412  ldr x16, pc+1372 (addr 0x0000ffff7ab081b8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab07c60   416  and csp, jssp, #0xfffffffffffffff0
0xffff7ab07c64   420  blr x16
0xffff7ab07c68   424  ldp d2, d3, [jssp, #16]
0xffff7ab07c6c   428  ldp d0, d1, [jssp], #32
0xffff7ab07c70   432  ldp d6, d7, [jssp, #16]
0xffff7ab07c74   436  ldp d4, d5, [jssp], #32
0xffff7ab07c78   440  ldp d18, d19, [jssp, #16]
0xffff7ab07c7c   444  ldp d16, d17, [jssp], #32
0xffff7ab07c80   448  ldp d22, d23, [jssp, #16]
0xffff7ab07c84   452  ldp d20, d21, [jssp], #32
0xffff7ab07c88   456  ldp d26, d27, [jssp, #16]
0xffff7ab07c8c   460  ldp d24, d25, [jssp], #32
0xffff7ab07c90   464  ldp d28, d29, [jssp], #16
0xffff7ab07c94   468  ldp x5, x6, [jssp, #16]
0xffff7ab07c98   472  ldp x1, x4, [jssp], #32
0xffff7ab07c9c   476  ldp x9, x10, [jssp, #16]
0xffff7ab07ca0   480  ldp x7, x8, [jssp], #32
0xffff7ab07ca4   484  ldp x13, x14, [jssp, #16]
0xffff7ab07ca8   488  ldp x11, x12, [jssp], #32
0xffff7ab07cac   492  ldr lr, [jssp, #16]
0xffff7ab07cb0   496  ldp x15, x18, [jssp], #24
0xffff7ab07cb4   500  ldp x3, x2, [jssp], #16
0xffff7ab07cb8   504  ldr x16, pc+1288 (addr 0x0000ffff7ab081c0)    ;; external reference (store_buffer_top)
0xffff7ab07cbc   508  ldr x0, [x16]
0xffff7ab07cc0   512  str x1, [x0], #8
0xffff7ab07cc4   516  str x0, [x16]
0xffff7ab07cc8   520  tst x0, #0x1ffff
0xffff7ab07ccc   524  b.eq #+0x8 (addr 0xffff7ab07cd4)
0xffff7ab07cd0   528  ret
0xffff7ab07cd4   532  sub csp, jssp, #0x8 (8)
0xffff7ab07cd8   536  str lr, [jssp, #-8]!
0xffff7ab07cdc   540  ldr x17, pc+1260 (addr 0x0000ffff7ab081c8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab07ce0   544  blr x17
0xffff7ab07ce4   548  ldr lr, [jssp], #8
0xffff7ab07ce8   552  ret
0xffff7ab07cec   556  and x0, x8, #0xfffffffffff00000
0xffff7ab07cf0   560  ldr x2, [x0, #104]
0xffff7ab07cf4   564  subs x2, x2, #0x1 (1)
0xffff7ab07cf8   568  str x2, [x0, #104]
0xffff7ab07cfc   572  b.mi #+0x64 (addr 0xffff7ab07d60)
0xffff7ab07d00   576  ubfx x16, x8, #8, #12
0xffff7ab07d04   580  and x0, x8, #0xfffffffffff00000
0xffff7ab07d08   584  add x0, x0, x16, lsl #2
0xffff7ab07d0c   588  ubfx x2, x8, #3, #5
0xffff7ab07d10   592  ldr x0, [x0, #360]
0xffff7ab07d14   596  lsr x0, x0, x2
0xffff7ab07d18   600  tbz w0, #0, #+0x8 (addr 0xffff7ab07d20)
0xffff7ab07d1c   604  tbnz w0, #1, #+0xc (addr 0xffff7ab07d28)
0xffff7ab07d20   608  ldp x3, x2, [jssp], #16
0xffff7ab07d24   612  ret
0xffff7ab07d28   616  ldr x0, [x1]
0xffff7ab07d2c   620  sub csp, jssp, #0x10 (16)
0xffff7ab07d30   624  stp x8, x1, [jssp, #-16]!
0xffff7ab07d34   628  ubfx x16, x0, #8, #12
0xffff7ab07d38   632  and x2, x0, #0xfffffffffff00000
0xffff7ab07d3c   636  add x2, x2, x16, lsl #2
0xffff7ab07d40   640  ubfx x8, x0, #3, #5
0xffff7ab07d44   644  ldr x1, [x2, #360]
0xffff7ab07d48   648  lsr x1, x1, x8
0xffff7ab07d4c   652  tbz w1, #0, #+0x10 (addr 0xffff7ab07d5c)
0xffff7ab07d50   656  ldp x8, x1, [jssp], #16
0xffff7ab07d54   660  ldp x3, x2, [jssp], #16
0xffff7ab07d58   664  ret
0xffff7ab07d5c   668  ldp x8, x1, [jssp], #16
0xffff7ab07d60   672  sub csp, jssp, #0x78 (120)
0xffff7ab07d64   676  stp x14, x15, [jssp, #-32]!
0xffff7ab07d68   680  stp x18, lr, [jssp, #16]
0xffff7ab07d6c   684  stp x10, x11, [jssp, #-32]!
0xffff7ab07d70   688  stp x12, x13, [jssp, #16]
0xffff7ab07d74   692  stp x6, x7, [jssp, #-32]!
0xffff7ab07d78   696  stp x8, x9, [jssp, #16]
0xffff7ab07d7c   700  stp x1, x4, [jssp, #-24]!
0xffff7ab07d80   704  str x5, [jssp, #16]
0xffff7ab07d84   708  sub csp, jssp, #0xb0 (176)
0xffff7ab07d88   712  stp d26, d27, [jssp, #-32]!
0xffff7ab07d8c   716  stp d28, d29, [jssp, #16]
0xffff7ab07d90   720  stp d22, d23, [jssp, #-32]!
0xffff7ab07d94   724  stp d24, d25, [jssp, #16]
0xffff7ab07d98   728  stp d18, d19, [jssp, #-32]!
0xffff7ab07d9c   732  stp d20, d21, [jssp, #16]
0xffff7ab07da0   736  stp d6, d7, [jssp, #-32]!
0xffff7ab07da4   740  stp d16, d17, [jssp, #16]
0xffff7ab07da8   744  stp d2, d3, [jssp, #-32]!
0xffff7ab07dac   748  stp d4, d5, [jssp, #16]
0xffff7ab07db0   752  stp d0, d1, [jssp, #-16]!
0xffff7ab07db4   756  mov x0, x8
0xffff7ab07db8   760  ldr x2, pc+1048 (addr 0x0000ffff7ab081d0)    ;; external reference (isolate)
0xffff7ab07dbc   764  ldr x16, pc+1052 (addr 0x0000ffff7ab081d8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab07dc0   768  and csp, jssp, #0xfffffffffffffff0
0xffff7ab07dc4   772  blr x16
0xffff7ab07dc8   776  ldp d2, d3, [jssp, #16]
0xffff7ab07dcc   780  ldp d0, d1, [jssp], #32
0xffff7ab07dd0   784  ldp d6, d7, [jssp, #16]
0xffff7ab07dd4   788  ldp d4, d5, [jssp], #32
0xffff7ab07dd8   792  ldp d18, d19, [jssp, #16]
0xffff7ab07ddc   796  ldp d16, d17, [jssp], #32
0xffff7ab07de0   800  ldp d22, d23, [jssp, #16]
0xffff7ab07de4   804  ldp d20, d21, [jssp], #32
0xffff7ab07de8   808  ldp d26, d27, [jssp, #16]
0xffff7ab07dec   812  ldp d24, d25, [jssp], #32
0xffff7ab07df0   816  ldp d28, d29, [jssp], #16
0xffff7ab07df4   820  ldp x5, x6, [jssp, #16]
0xffff7ab07df8   824  ldp x1, x4, [jssp], #32
0xffff7ab07dfc   828  ldp x9, x10, [jssp, #16]
0xffff7ab07e00   832  ldp x7, x8, [jssp], #32
0xffff7ab07e04   836  ldp x13, x14, [jssp, #16]
0xffff7ab07e08   840  ldp x11, x12, [jssp], #32
0xffff7ab07e0c   844  ldr lr, [jssp, #16]
0xffff7ab07e10   848  ldp x15, x18, [jssp], #24
0xffff7ab07e14   852  ldp x3, x2, [jssp], #16
0xffff7ab07e18   856  ret
0xffff7ab07e1c   860  sub csp, jssp, #0x10 (16)
0xffff7ab07e20   864  stp x3, x2, [jssp, #-16]!
0xffff7ab07e24   868  ldr x0, [x1]
0xffff7ab07e28   872  and x16, x0, #0xfffffffffff00000
0xffff7ab07e2c   876  ldr x16, [x16, #8]
0xffff7ab07e30   880  tst x16, #0x18
0xffff7ab07e34   884  b.eq #+0x1f4 (addr 0xffff7ab08028)
0xffff7ab07e38   888  and x16, x8, #0xfffffffffff00000
0xffff7ab07e3c   892  ldr x16, [x16, #8]
0xffff7ab07e40   896  tst x16, #0x18
0xffff7ab07e44   900  b.ne #+0x1e4 (addr 0xffff7ab08028)
0xffff7ab07e48   904  and x0, x8, #0xfffffffffff00000
0xffff7ab07e4c   908  ldr x2, [x0, #104]
0xffff7ab07e50   912  subs x2, x2, #0x1 (1)
0xffff7ab07e54   916  str x2, [x0, #104]
0xffff7ab07e58   920  b.mi #+0xe4 (addr 0xffff7ab07f3c)
0xffff7ab07e5c   924  ubfx x16, x8, #8, #12
0xffff7ab07e60   928  and x0, x8, #0xfffffffffff00000
0xffff7ab07e64   932  add x0, x0, x16, lsl #2
0xffff7ab07e68   936  ubfx x2, x8, #3, #5
0xffff7ab07e6c   940  ldr x0, [x0, #360]
0xffff7ab07e70   944  lsr x0, x0, x2
0xffff7ab07e74   948  tbz w0, #0, #+0x8 (addr 0xffff7ab07e7c)
0xffff7ab07e78   952  tbnz w0, #1, #+0x3c (addr 0xffff7ab07eb4)
0xffff7ab07e7c   956  ldp x3, x2, [jssp], #16
0xffff7ab07e80   960  ldr x16, pc+864 (addr 0x0000ffff7ab081e0)    ;; external reference (store_buffer_top)
0xffff7ab07e84   964  ldr x0, [x16]
0xffff7ab07e88   968  str x1, [x0], #8
0xffff7ab07e8c   972  str x0, [x16]
0xffff7ab07e90   976  tst x0, #0x1ffff
0xffff7ab07e94   980  b.eq #+0x8 (addr 0xffff7ab07e9c)
0xffff7ab07e98   984  ret
0xffff7ab07e9c   988  sub csp, jssp, #0x8 (8)
0xffff7ab07ea0   992  str lr, [jssp, #-8]!
0xffff7ab07ea4   996  ldr x17, pc+836 (addr 0x0000ffff7ab081e8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab07ea8  1000  blr x17
0xffff7ab07eac  1004  ldr lr, [jssp], #8
0xffff7ab07eb0  1008  ret
0xffff7ab07eb4  1012  ldr x0, [x1]
0xffff7ab07eb8  1016  and x2, x0, #0xfffffffffff00000
0xffff7ab07ebc  1020  ldr x2, [x2, #8]
0xffff7ab07ec0  1024  tbz w2, #6, #+0x18 (addr 0xffff7ab07ed8)
0xffff7ab07ec4  1028  and x2, x8, #0xfffffffffff00000
0xffff7ab07ec8  1032  ldr x2, [x2, #8]
0xffff7ab07ecc  1036  movz x16, #0x58
0xffff7ab07ed0  1040  tst x2, x16
0xffff7ab07ed4  1044  b.eq #+0x68 (addr 0xffff7ab07f3c)
0xffff7ab07ed8  1048  sub csp, jssp, #0x10 (16)
0xffff7ab07edc  1052  stp x8, x1, [jssp, #-16]!
0xffff7ab07ee0  1056  ubfx x16, x0, #8, #12
0xffff7ab07ee4  1060  and x2, x0, #0xfffffffffff00000
0xffff7ab07ee8  1064  add x2, x2, x16, lsl #2
0xffff7ab07eec  1068  ubfx x8, x0, #3, #5
0xffff7ab07ef0  1072  ldr x1, [x2, #360]
0xffff7ab07ef4  1076  lsr x1, x1, x8
0xffff7ab07ef8  1080  tbz w1, #0, #+0x40 (addr 0xffff7ab07f38)
0xffff7ab07efc  1084  ldp x8, x1, [jssp], #16
0xffff7ab07f00  1088  ldp x3, x2, [jssp], #16
0xffff7ab07f04  1092  ldr x16, pc+748 (addr 0x0000ffff7ab081f0)    ;; external reference (store_buffer_top)
0xffff7ab07f08  1096  ldr x0, [x16]
0xffff7ab07f0c  1100  str x1, [x0], #8
0xffff7ab07f10  1104  str x0, [x16]
0xffff7ab07f14  1108  tst x0, #0x1ffff
0xffff7ab07f18  1112  b.eq #+0x8 (addr 0xffff7ab07f20)
0xffff7ab07f1c  1116  ret
0xffff7ab07f20  1120  sub csp, jssp, #0x8 (8)
0xffff7ab07f24  1124  str lr, [jssp, #-8]!
0xffff7ab07f28  1128  ldr x17, pc+720 (addr 0x0000ffff7ab081f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab07f2c  1132  blr x17
0xffff7ab07f30  1136  ldr lr, [jssp], #8
0xffff7ab07f34  1140  ret
0xffff7ab07f38  1144  ldp x8, x1, [jssp], #16
0xffff7ab07f3c  1148  sub csp, jssp, #0x78 (120)
0xffff7ab07f40  1152  stp x14, x15, [jssp, #-32]!
0xffff7ab07f44  1156  stp x18, lr, [jssp, #16]
0xffff7ab07f48  1160  stp x10, x11, [jssp, #-32]!
0xffff7ab07f4c  1164  stp x12, x13, [jssp, #16]
0xffff7ab07f50  1168  stp x6, x7, [jssp, #-32]!
0xffff7ab07f54  1172  stp x8, x9, [jssp, #16]
0xffff7ab07f58  1176  stp x1, x4, [jssp, #-24]!
0xffff7ab07f5c  1180  str x5, [jssp, #16]
0xffff7ab07f60  1184  sub csp, jssp, #0xb0 (176)
0xffff7ab07f64  1188  stp d26, d27, [jssp, #-32]!
0xffff7ab07f68  1192  stp d28, d29, [jssp, #16]
0xffff7ab07f6c  1196  stp d22, d23, [jssp, #-32]!
0xffff7ab07f70  1200  stp d24, d25, [jssp, #16]
0xffff7ab07f74  1204  stp d18, d19, [jssp, #-32]!
0xffff7ab07f78  1208  stp d20, d21, [jssp, #16]
0xffff7ab07f7c  1212  stp d6, d7, [jssp, #-32]!
0xffff7ab07f80  1216  stp d16, d17, [jssp, #16]
0xffff7ab07f84  1220  stp d2, d3, [jssp, #-32]!
0xffff7ab07f88  1224  stp d4, d5, [jssp, #16]
0xffff7ab07f8c  1228  stp d0, d1, [jssp, #-16]!
0xffff7ab07f90  1232  mov x0, x8
0xffff7ab07f94  1236  ldr x2, pc+620 (addr 0x0000ffff7ab08200)    ;; external reference (isolate)
0xffff7ab07f98  1240  ldr x16, pc+624 (addr 0x0000ffff7ab08208)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab07f9c  1244  and csp, jssp, #0xfffffffffffffff0
0xffff7ab07fa0  1248  blr x16
0xffff7ab07fa4  1252  ldp d2, d3, [jssp, #16]
0xffff7ab07fa8  1256  ldp d0, d1, [jssp], #32
0xffff7ab07fac  1260  ldp d6, d7, [jssp, #16]
0xffff7ab07fb0  1264  ldp d4, d5, [jssp], #32
0xffff7ab07fb4  1268  ldp d18, d19, [jssp, #16]
0xffff7ab07fb8  1272  ldp d16, d17, [jssp], #32
0xffff7ab07fbc  1276  ldp d22, d23, [jssp, #16]
0xffff7ab07fc0  1280  ldp d20, d21, [jssp], #32
0xffff7ab07fc4  1284  ldp d26, d27, [jssp, #16]
0xffff7ab07fc8  1288  ldp d24, d25, [jssp], #32
0xffff7ab07fcc  1292  ldp d28, d29, [jssp], #16
0xffff7ab07fd0  1296  ldp x5, x6, [jssp, #16]
0xffff7ab07fd4  1300  ldp x1, x4, [jssp], #32
0xffff7ab07fd8  1304  ldp x9, x10, [jssp, #16]
0xffff7ab07fdc  1308  ldp x7, x8, [jssp], #32
0xffff7ab07fe0  1312  ldp x13, x14, [jssp, #16]
0xffff7ab07fe4  1316  ldp x11, x12, [jssp], #32
0xffff7ab07fe8  1320  ldr lr, [jssp, #16]
0xffff7ab07fec  1324  ldp x15, x18, [jssp], #24
0xffff7ab07ff0  1328  ldp x3, x2, [jssp], #16
0xffff7ab07ff4  1332  ldr x16, pc+540 (addr 0x0000ffff7ab08210)    ;; external reference (store_buffer_top)
0xffff7ab07ff8  1336  ldr x0, [x16]
0xffff7ab07ffc  1340  str x1, [x0], #8
0xffff7ab08000  1344  str x0, [x16]
0xffff7ab08004  1348  tst x0, #0x1ffff
0xffff7ab08008  1352  b.eq #+0x8 (addr 0xffff7ab08010)
0xffff7ab0800c  1356  ret
0xffff7ab08010  1360  sub csp, jssp, #0x8 (8)
0xffff7ab08014  1364  str lr, [jssp, #-8]!
0xffff7ab08018  1368  ldr x17, pc+512 (addr 0x0000ffff7ab08218)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0801c  1372  blr x17
0xffff7ab08020  1376  ldr lr, [jssp], #8
0xffff7ab08024  1380  ret
0xffff7ab08028  1384  and x0, x8, #0xfffffffffff00000
0xffff7ab0802c  1388  ldr x2, [x0, #104]
0xffff7ab08030  1392  subs x2, x2, #0x1 (1)
0xffff7ab08034  1396  str x2, [x0, #104]
0xffff7ab08038  1400  b.mi #+0x84 (addr 0xffff7ab080bc)
0xffff7ab0803c  1404  ubfx x16, x8, #8, #12
0xffff7ab08040  1408  and x0, x8, #0xfffffffffff00000
0xffff7ab08044  1412  add x0, x0, x16, lsl #2
0xffff7ab08048  1416  ubfx x2, x8, #3, #5
0xffff7ab0804c  1420  ldr x0, [x0, #360]
0xffff7ab08050  1424  lsr x0, x0, x2
0xffff7ab08054  1428  tbz w0, #0, #+0x8 (addr 0xffff7ab0805c)
0xffff7ab08058  1432  tbnz w0, #1, #+0xc (addr 0xffff7ab08064)
0xffff7ab0805c  1436  ldp x3, x2, [jssp], #16
0xffff7ab08060  1440  ret
0xffff7ab08064  1444  ldr x0, [x1]
0xffff7ab08068  1448  and x2, x0, #0xfffffffffff00000
0xffff7ab0806c  1452  ldr x2, [x2, #8]
0xffff7ab08070  1456  tbz w2, #6, #+0x18 (addr 0xffff7ab08088)
0xffff7ab08074  1460  and x2, x8, #0xfffffffffff00000
0xffff7ab08078  1464  ldr x2, [x2, #8]
0xffff7ab0807c  1468  movz x16, #0x58
0xffff7ab08080  1472  tst x2, x16
0xffff7ab08084  1476  b.eq #+0x38 (addr 0xffff7ab080bc)
0xffff7ab08088  1480  sub csp, jssp, #0x10 (16)
0xffff7ab0808c  1484  stp x8, x1, [jssp, #-16]!
0xffff7ab08090  1488  ubfx x16, x0, #8, #12
0xffff7ab08094  1492  and x2, x0, #0xfffffffffff00000
0xffff7ab08098  1496  add x2, x2, x16, lsl #2
0xffff7ab0809c  1500  ubfx x8, x0, #3, #5
0xffff7ab080a0  1504  ldr x1, [x2, #360]
0xffff7ab080a4  1508  lsr x1, x1, x8
0xffff7ab080a8  1512  tbz w1, #0, #+0x10 (addr 0xffff7ab080b8)
0xffff7ab080ac  1516  ldp x8, x1, [jssp], #16
0xffff7ab080b0  1520  ldp x3, x2, [jssp], #16
0xffff7ab080b4  1524  ret
0xffff7ab080b8  1528  ldp x8, x1, [jssp], #16
0xffff7ab080bc  1532  sub csp, jssp, #0x78 (120)
0xffff7ab080c0  1536  stp x14, x15, [jssp, #-32]!
0xffff7ab080c4  1540  stp x18, lr, [jssp, #16]
0xffff7ab080c8  1544  stp x10, x11, [jssp, #-32]!
0xffff7ab080cc  1548  stp x12, x13, [jssp, #16]
0xffff7ab080d0  1552  stp x6, x7, [jssp, #-32]!
0xffff7ab080d4  1556  stp x8, x9, [jssp, #16]
0xffff7ab080d8  1560  stp x1, x4, [jssp, #-24]!
0xffff7ab080dc  1564  str x5, [jssp, #16]
0xffff7ab080e0  1568  sub csp, jssp, #0xb0 (176)
0xffff7ab080e4  1572  stp d26, d27, [jssp, #-32]!
0xffff7ab080e8  1576  stp d28, d29, [jssp, #16]
0xffff7ab080ec  1580  stp d22, d23, [jssp, #-32]!
0xffff7ab080f0  1584  stp d24, d25, [jssp, #16]
0xffff7ab080f4  1588  stp d18, d19, [jssp, #-32]!
0xffff7ab080f8  1592  stp d20, d21, [jssp, #16]
0xffff7ab080fc  1596  stp d6, d7, [jssp, #-32]!
0xffff7ab08100  1600  stp d16, d17, [jssp, #16]
0xffff7ab08104  1604  stp d2, d3, [jssp, #-32]!
0xffff7ab08108  1608  stp d4, d5, [jssp, #16]
0xffff7ab0810c  1612  stp d0, d1, [jssp, #-16]!
0xffff7ab08110  1616  mov x0, x8
0xffff7ab08114  1620  ldr x2, pc+268 (addr 0x0000ffff7ab08220)    ;; external reference (isolate)
0xffff7ab08118  1624  ldr x16, pc+272 (addr 0x0000ffff7ab08228)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0811c  1628  and csp, jssp, #0xfffffffffffffff0
0xffff7ab08120  1632  blr x16
0xffff7ab08124  1636  ldp d2, d3, [jssp, #16]
0xffff7ab08128  1640  ldp d0, d1, [jssp], #32
0xffff7ab0812c  1644  ldp d6, d7, [jssp, #16]
0xffff7ab08130  1648  ldp d4, d5, [jssp], #32
0xffff7ab08134  1652  ldp d18, d19, [jssp, #16]
0xffff7ab08138  1656  ldp d16, d17, [jssp], #32
0xffff7ab0813c  1660  ldp d22, d23, [jssp, #16]
0xffff7ab08140  1664  ldp d20, d21, [jssp], #32
0xffff7ab08144  1668  ldp d26, d27, [jssp, #16]
0xffff7ab08148  1672  ldp d24, d25, [jssp], #32
0xffff7ab0814c  1676  ldp d28, d29, [jssp], #16
0xffff7ab08150  1680  ldp x5, x6, [jssp, #16]
0xffff7ab08154  1684  ldp x1, x4, [jssp], #32
0xffff7ab08158  1688  ldp x9, x10, [jssp, #16]
0xffff7ab0815c  1692  ldp x7, x8, [jssp], #32
0xffff7ab08160  1696  ldp x13, x14, [jssp, #16]
0xffff7ab08164  1700  ldp x11, x12, [jssp], #32
0xffff7ab08168  1704  ldr lr, [jssp, #16]
0xffff7ab0816c  1708  ldp x15, x18, [jssp], #24
0xffff7ab08170  1712  ldp x3, x2, [jssp], #16
0xffff7ab08174  1716  ret
0xffff7ab08178  1720  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab0817c  1724  d63f03e0       constant
0xffff7ab08180  1728  09abe8c0       constant
0xffff7ab08184  1732  00000000       constant
0xffff7ab08188  1736  7ab065a0       constant
0xffff7ab0818c  1740  0000ffff       constant
0xffff7ab08190  1744  09abe8c0       constant
0xffff7ab08194  1748  00000000       constant
0xffff7ab08198  1752  7ab065a0       constant
0xffff7ab0819c  1756  0000ffff       constant
0xffff7ab081a0  1760  09abe8c0       constant
0xffff7ab081a4  1764  00000000       constant
0xffff7ab081a8  1768  7ab065a0       constant
0xffff7ab081ac  1772  0000ffff       constant
0xffff7ab081b0  1776  09abd2d0       constant
0xffff7ab081b4  1780  00000000       constant
0xffff7ab081b8  1784  00c2d958       constant
0xffff7ab081bc  1788  00000000       constant
0xffff7ab081c0  1792  09abe8c0       constant
0xffff7ab081c4  1796  00000000       constant
0xffff7ab081c8  1800  7ab065a0       constant
0xffff7ab081cc  1804  0000ffff       constant
0xffff7ab081d0  1808  09abd2d0       constant
0xffff7ab081d4  1812  00000000       constant
0xffff7ab081d8  1816  00c2d958       constant
0xffff7ab081dc  1820  00000000       constant
0xffff7ab081e0  1824  09abe8c0       constant
0xffff7ab081e4  1828  00000000       constant
0xffff7ab081e8  1832  7ab065a0       constant
0xffff7ab081ec  1836  0000ffff       constant
0xffff7ab081f0  1840  09abe8c0       constant
0xffff7ab081f4  1844  00000000       constant
0xffff7ab081f8  1848  7ab065a0       constant
0xffff7ab081fc  1852  0000ffff       constant
0xffff7ab08200  1856  09abd2d0       constant
0xffff7ab08204  1860  00000000       constant
0xffff7ab08208  1864  00c2d958       constant
0xffff7ab0820c  1868  00000000       constant
0xffff7ab08210  1872  09abe8c0       constant
0xffff7ab08214  1876  00000000       constant
0xffff7ab08218  1880  7ab065a0       constant
0xffff7ab0821c  1884  0000ffff       constant
0xffff7ab08220  1888  09abd2d0       constant
0xffff7ab08224  1892  00000000       constant
0xffff7ab08228  1896  00c2d958       constant
0xffff7ab0822c  1900  00000000       constant


RelocInfo (size = 65)
0xffff7ab07ac8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab07aec  code target (STUB)  (0xffff7ab065a0)
0xffff7ab07b64  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab07b88  code target (STUB)  (0xffff7ab065a0)
0xffff7ab07bc8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab07bec  code target (STUB)  (0xffff7ab065a0)
0xffff7ab07c58  external reference (isolate)  (0x9abd2d0)
0xffff7ab07c5c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab07cb8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab07cdc  code target (STUB)  (0xffff7ab065a0)
0xffff7ab07db8  external reference (isolate)  (0x9abd2d0)
0xffff7ab07dbc  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab07e80  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab07ea4  code target (STUB)  (0xffff7ab065a0)
0xffff7ab07f04  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab07f28  code target (STUB)  (0xffff7ab065a0)
0xffff7ab07f94  external reference (isolate)  (0x9abd2d0)
0xffff7ab07f98  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab07ff4  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab08018  code target (STUB)  (0xffff7ab065a0)
0xffff7ab08114  external reference (isolate)  (0x9abd2d0)
0xffff7ab08118  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab08178  constant pool (size 184)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 706)
0xffff7ab082a0     0  movz x16, #0xa00000000
0xffff7ab082a4     4  sub csp, jssp, #0x10 (16)
0xffff7ab082a8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab082ac    12  mov fp, jssp
0xffff7ab082b0    16  sub csp, jssp, #0x8 (8)
0xffff7ab082b4    20  sub jssp, jssp, #0x8 (8)
0xffff7ab082b8    24  stur x16, [fp, #-8]
0xffff7ab082bc    28  ldr x3, [fp]
0xffff7ab082c0    32  ldur x4, [x3, #-8]
0xffff7ab082c4    36  movz x16, #0xe00000000
0xffff7ab082c8    40  cmp x4, x16
0xffff7ab082cc    44  csel x4, fp, x3, ne
0xffff7ab082d0    48  ldr x3, [x4, #16]
0xffff7ab082d4    52  tbnz w3, #0, #+0x11c (addr 0xffff7ab083f0)
0xffff7ab082d8    56  asr x5, x3, #32
0xffff7ab082dc    60  movz w16, #0x257f
0xffff7ab082e0    64  cmp w5, w16, lsl #3
0xffff7ab082e4    68  b.hs #+0x224 (addr 0xffff7ab08508)
0xffff7ab082e8    72  cbz w5, #+0xc (addr 0xffff7ab082f4)
0xffff7ab082ec    76  mov x3, x5
0xffff7ab082f0    80  b #+0xc (addr 0xffff7ab082fc)
0xffff7ab082f4    84  movz x3, #0x4
0xffff7ab082f8    88  movz x5, #0x0
0xffff7ab082fc    92  lsl x4, x3, #32
0xffff7ab08300    96  lsl x5, x5, #32
0xffff7ab08304   100  lsl w6, w3, #3
0xffff7ab08308   104  add w6, w6, #0x10 (16)
0xffff7ab0830c   108  cmp w6, #0x96000 (614400)
0xffff7ab08310   112  b.hs #+0x200 (addr 0xffff7ab08510)
0xffff7ab08314   116  movz x7, #0xe2c0
0xffff7ab08318   120  movk x7, #0x9ab, lsl #16
0xffff7ab0831c   124  ldp x8, x0, [x7]
0xffff7ab08320   128  adds x16, x8, #0x30 (48)
0xffff7ab08324   132  ccmp x16, x0, #nzCv, lo
0xffff7ab08328   136  b.hi #+0xf0 (addr 0xffff7ab08418)
0xffff7ab0832c   140  str x16, [x7]
0xffff7ab08330   144  orr x8, x8, #0x1
0xffff7ab08334   148  ldur x0, [x1, #23]
0xffff7ab08338   152  stur x0, [x8, #-1]
0xffff7ab0833c   156  ldr x0, pc+364 (addr 0x0000ffff7ab084a8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab08340   160  stur x0, [x8, #7]
0xffff7ab08344   164  ldr x0, pc+364 (addr 0x0000ffff7ab084b0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab08348   168  stur x0, [x8, #15]
0xffff7ab0834c   172  stur x5, [x8, #23]
0xffff7ab08350   176  add x0, x8, #0x20 (32)
0xffff7ab08354   180  ldr x1, pc+356 (addr 0x0000ffff7ab084b8)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab08358   184  stur x1, [x0, #-1]
0xffff7ab0835c   188  stur x2, [x0, #7]
0xffff7ab08360   192  ldur w0, [x2, #35]
0xffff7ab08364   196  add w0, w0, #0x1 (1)
0xffff7ab08368   200  lsl x0, x0, #32
0xffff7ab0836c   204  stur x0, [x2, #31]
0xffff7ab08370   208  sxtw x6, w6
0xffff7ab08374   212  movz x0, #0xe2c0
0xffff7ab08378   216  movk x0, #0x9ab, lsl #16
0xffff7ab0837c   220  ldp x2, x16, [x0]
0xffff7ab08380   224  adds x1, x2, x6
0xffff7ab08384   228  ccmp x1, x16, #nzCv, lo
0xffff7ab08388   232  b.hi #+0xd4 (addr 0xffff7ab0845c)
0xffff7ab0838c   236  str x1, [x0]
0xffff7ab08390   240  orr x2, x2, #0x1
0xffff7ab08394   244  ldr x0, pc+300 (addr 0x0000ffff7ab084c0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab08398   248  stur x0, [x2, #-1]
0xffff7ab0839c   252  stur x4, [x2, #7]
0xffff7ab083a0   256  mov x0, x2
0xffff7ab083a4   260  stur x0, [x8, #15]
0xffff7ab083a8   264  add x1, x8, #0xf (15)
0xffff7ab083ac   268  and x0, x8, #0xfffffffffff00000
0xffff7ab083b0   272  ldr x0, [x0, #8]
0xffff7ab083b4   276  tbz w0, #2, #+0xc (addr 0xffff7ab083c0)
0xffff7ab083b8   280  ldr x16, pc+272 (addr 0x0000ffff7ab084c8)    ;; code: STUB, RecordWriteStub, minor: 66568
0xffff7ab083bc   284  blr x16
0xffff7ab083c0   288  cmp w3, #0x0 (0)
0xffff7ab083c4   292  b.le #+0x18 (addr 0xffff7ab083dc)
0xffff7ab083c8   296  sub w3, w3, #0x1 (1)
0xffff7ab083cc   300  ldr x0, pc+260 (addr 0x0000ffff7ab084d0)    ;; object: 0x20d04519 <the hole>
0xffff7ab083d0   304  add x1, x2, #0xf (15)
0xffff7ab083d4   308  str x0, [x1, w3, sxtw #3]
0xffff7ab083d8   312  b #-0x18 (addr 0xffff7ab083c0)
0xffff7ab083dc   316  mov x0, x8
0xffff7ab083e0   320  mov jssp, fp
0xffff7ab083e4   324  ldp fp, lr, [jssp], #16
0xffff7ab083e8   328  add jssp, jssp, #0x10 (16)
0xffff7ab083ec   332  ret
0xffff7ab083f0   336  ldur x16, [x3, #-1]
0xffff7ab083f4   340  ldr x17, [x26, #120]
0xffff7ab083f8   344  cmp x16, x17
0xffff7ab083fc   348  b.ne #+0x11c (addr 0xffff7ab08518)
0xffff7ab08400   352  ldur d29, [x3, #7]
0xffff7ab08404   356  fcvtzs w5, d29
0xffff7ab08408   360  scvtf d0, w5
0xffff7ab0840c   364  fcmp d29, d0
0xffff7ab08410   368  b.ne #+0x108 (addr 0xffff7ab08518)
0xffff7ab08414   372  b #-0x138 (addr 0xffff7ab082dc)
0xffff7ab08418   376  movz x8, #0x0
0xffff7ab0841c   380  mov x16, lr
0xffff7ab08420   384  ldr x17, pc+184 (addr 0x0000ffff7ab084d8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab08424   388  blr x17
0xffff7ab08428   392  movz x0, #0x3000000000
0xffff7ab0842c   396  movz x10, #0x0
0xffff7ab08430   400  sub csp, jssp, #0x10 (16)
0xffff7ab08434   404  stp x10, x0, [jssp, #-16]!
0xffff7ab08438   408  movz x0, #0x2
0xffff7ab0843c   412  movz x1, #0x5b88
0xffff7ab08440   416  movk x1, #0xe2, lsl #16
0xffff7ab08444   420  ldr x16, pc+156 (addr 0x0000ffff7ab084e0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab08448   424  blr x16
0xffff7ab0844c   428  str x0, [jssp, #64]
0xffff7ab08450   432  ldr x16, pc+152 (addr 0x0000ffff7ab084e8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab08454   436  blr x16
0xffff7ab08458   440  b #-0x124 (addr 0xffff7ab08334)
0xffff7ab0845c   444  movz x2, #0x0
0xffff7ab08460   448  mov x16, lr
0xffff7ab08464   452  ldr x17, pc+140 (addr 0x0000ffff7ab084f0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab08468   456  blr x17
0xffff7ab0846c   460  lsl x0, x6, #32
0xffff7ab08470   464  movz x10, #0x0
0xffff7ab08474   468  sub csp, jssp, #0x10 (16)
0xffff7ab08478   472  stp x10, x0, [jssp, #-16]!
0xffff7ab0847c   476  movz x0, #0x2
0xffff7ab08480   480  movz x1, #0x5b88
0xffff7ab08484   484  movk x1, #0xe2, lsl #16
0xffff7ab08488   488  ldr x16, pc+112 (addr 0x0000ffff7ab084f8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0848c   492  blr x16
0xffff7ab08490   496  str x0, [jssp, #16]
0xffff7ab08494   500  ldr x16, pc+108 (addr 0x0000ffff7ab08500)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab08498   504  blr x16
0xffff7ab0849c   508  b #-0x108 (addr 0xffff7ab08394)
0xffff7ab084a0   512  5800033f       constant pool begin (num_const = 25)    ;; constant pool
0xffff7ab084a4   516  d63f03e0       constant
0xffff7ab084a8   520  20d04201       constant
0xffff7ab084ac   524  00000000       constant
0xffff7ab084b0   528  20d04201       constant
0xffff7ab084b4   532  00000000       constant
0xffff7ab084b8   536  4ec05d81       constant
0xffff7ab084bc   540  00000000       constant
0xffff7ab084c0   544  4ec04259       constant
0xffff7ab084c4   548  00000000       constant
0xffff7ab084c8   552  7ab07ac0       constant
0xffff7ab084cc   556  0000ffff       constant
0xffff7ab084d0   560  20d04519       constant
0xffff7ab084d4   564  00000000       constant
0xffff7ab084d8   568  7ab06820       constant
0xffff7ab084dc   572  0000ffff       constant
0xffff7ab084e0   576  7ab06260       constant
0xffff7ab084e4   580  0000ffff       constant
0xffff7ab084e8   584  7ab068e0       constant
0xffff7ab084ec   588  0000ffff       constant
0xffff7ab084f0   592  7ab06820       constant
0xffff7ab084f4   596  0000ffff       constant
0xffff7ab084f8   600  7ab06260       constant
0xffff7ab084fc   604  0000ffff       constant
0xffff7ab08500   608  7ab068e0       constant
0xffff7ab08504   612  0000ffff       constant
0xffff7ab08508   616  movz x16, #0x0
0xffff7ab0850c   620  bl #+0x14 (addr 0xffff7ab08520)
0xffff7ab08510   624  movz x16, #0x8
0xffff7ab08514   628  bl #+0xc (addr 0xffff7ab08520)
0xffff7ab08518   632  movz x16, #0x10
0xffff7ab0851c   636  bl #+0x4 (addr 0xffff7ab08520)
0xffff7ab08520   640  ldr x17, pc+24 (addr 0x0000ffff7ab08538)    ;; lazy deoptimization bailout 0
0xffff7ab08524   644  add x17, x17, x16
0xffff7ab08528   648  br x17
0xffff7ab0852c   652  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab08530   656  d63f03e0       constant
0xffff7ab08534   660  d503201f       constant
0xffff7ab08538   664  7a906000       constant
0xffff7ab0853c   668  0000ffff       constant


Safepoints (size = 34)
0xffff7ab0844c   428  000 | x1 | x2 | x8 | x27 (sp -> fp)  <none> argc: 2
0xffff7ab08490   496  000 | x2 | x8 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0xffff7ab0833c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab08344  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab08354  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab08394  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab083b8  code target (STUB)  (0xffff7ab07ac0)
0xffff7ab083cc  embedded object  (0x20d04519 <the hole>)
0xffff7ab08420  code target (STUB)  (0xffff7ab06820)
0xffff7ab08444  code target (STUB)  (0xffff7ab06260)
0xffff7ab08450  code target (STUB)  (0xffff7ab068e0)
0xffff7ab08464  code target (STUB)  (0xffff7ab06820)
0xffff7ab08488  code target (STUB)  (0xffff7ab06260)
0xffff7ab08494  code target (STUB)  (0xffff7ab068e0)
0xffff7ab084a0  constant pool (size 104)
0xffff7ab08520  runtime entry
0xffff7ab0852c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArraySingleArgumentConstructorStub
name = ArraySingleArgumentConstructorStub_FAST_SMI_ELEMENTS
compiler = crankshaft
Instructions (size = 706)
0xffff7ab082a0     0  movz x16, #0xa00000000
0xffff7ab082a4     4  sub csp, jssp, #0x10 (16)
0xffff7ab082a8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab082ac    12  mov fp, jssp
0xffff7ab082b0    16  sub csp, jssp, #0x8 (8)
0xffff7ab082b4    20  sub jssp, jssp, #0x8 (8)
0xffff7ab082b8    24  stur x16, [fp, #-8]
0xffff7ab082bc    28  ldr x3, [fp]
0xffff7ab082c0    32  ldur x4, [x3, #-8]
0xffff7ab082c4    36  movz x16, #0xe00000000
0xffff7ab082c8    40  cmp x4, x16
0xffff7ab082cc    44  csel x4, fp, x3, ne
0xffff7ab082d0    48  ldr x3, [x4, #16]
0xffff7ab082d4    52  tbnz w3, #0, #+0x11c (addr 0xffff7ab083f0)
0xffff7ab082d8    56  asr x5, x3, #32
0xffff7ab082dc    60  movz w16, #0x257f
0xffff7ab082e0    64  cmp w5, w16, lsl #3
0xffff7ab082e4    68  b.hs #+0x224 (addr 0xffff7ab08508)
0xffff7ab082e8    72  cbz w5, #+0xc (addr 0xffff7ab082f4)
0xffff7ab082ec    76  mov x3, x5
0xffff7ab082f0    80  b #+0xc (addr 0xffff7ab082fc)
0xffff7ab082f4    84  movz x3, #0x4
0xffff7ab082f8    88  movz x5, #0x0
0xffff7ab082fc    92  lsl x4, x3, #32
0xffff7ab08300    96  lsl x5, x5, #32
0xffff7ab08304   100  lsl w6, w3, #3
0xffff7ab08308   104  add w6, w6, #0x10 (16)
0xffff7ab0830c   108  cmp w6, #0x96000 (614400)
0xffff7ab08310   112  b.hs #+0x200 (addr 0xffff7ab08510)
0xffff7ab08314   116  movz x7, #0xe2c0
0xffff7ab08318   120  movk x7, #0x9ab, lsl #16
0xffff7ab0831c   124  ldp x8, x0, [x7]
0xffff7ab08320   128  adds x16, x8, #0x30 (48)
0xffff7ab08324   132  ccmp x16, x0, #nzCv, lo
0xffff7ab08328   136  b.hi #+0xf0 (addr 0xffff7ab08418)
0xffff7ab0832c   140  str x16, [x7]
0xffff7ab08330   144  orr x8, x8, #0x1
0xffff7ab08334   148  ldur x0, [x1, #23]
0xffff7ab08338   152  stur x0, [x8, #-1]
0xffff7ab0833c   156  ldr x0, pc+364 (addr 0x0000ffff7ab084a8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab08340   160  stur x0, [x8, #7]
0xffff7ab08344   164  ldr x0, pc+364 (addr 0x0000ffff7ab084b0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab08348   168  stur x0, [x8, #15]
0xffff7ab0834c   172  stur x5, [x8, #23]
0xffff7ab08350   176  add x0, x8, #0x20 (32)
0xffff7ab08354   180  ldr x1, pc+356 (addr 0x0000ffff7ab084b8)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab08358   184  stur x1, [x0, #-1]
0xffff7ab0835c   188  stur x2, [x0, #7]
0xffff7ab08360   192  ldur w0, [x2, #35]
0xffff7ab08364   196  add w0, w0, #0x1 (1)
0xffff7ab08368   200  lsl x0, x0, #32
0xffff7ab0836c   204  stur x0, [x2, #31]
0xffff7ab08370   208  sxtw x6, w6
0xffff7ab08374   212  movz x0, #0xe2c0
0xffff7ab08378   216  movk x0, #0x9ab, lsl #16
0xffff7ab0837c   220  ldp x2, x16, [x0]
0xffff7ab08380   224  adds x1, x2, x6
0xffff7ab08384   228  ccmp x1, x16, #nzCv, lo
0xffff7ab08388   232  b.hi #+0xd4 (addr 0xffff7ab0845c)
0xffff7ab0838c   236  str x1, [x0]
0xffff7ab08390   240  orr x2, x2, #0x1
0xffff7ab08394   244  ldr x0, pc+300 (addr 0x0000ffff7ab084c0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab08398   248  stur x0, [x2, #-1]
0xffff7ab0839c   252  stur x4, [x2, #7]
0xffff7ab083a0   256  mov x0, x2
0xffff7ab083a4   260  stur x0, [x8, #15]
0xffff7ab083a8   264  add x1, x8, #0xf (15)
0xffff7ab083ac   268  and x0, x8, #0xfffffffffff00000
0xffff7ab083b0   272  ldr x0, [x0, #8]
0xffff7ab083b4   276  tbz w0, #2, #+0xc (addr 0xffff7ab083c0)
0xffff7ab083b8   280  ldr x16, pc+272 (addr 0x0000ffff7ab084c8)    ;; code: STUB, RecordWriteStub, minor: 66568
0xffff7ab083bc   284  blr x16
0xffff7ab083c0   288  cmp w3, #0x0 (0)
0xffff7ab083c4   292  b.le #+0x18 (addr 0xffff7ab083dc)
0xffff7ab083c8   296  sub w3, w3, #0x1 (1)
0xffff7ab083cc   300  ldr x0, pc+260 (addr 0x0000ffff7ab084d0)    ;; object: 0x20d04519 <the hole>
0xffff7ab083d0   304  add x1, x2, #0xf (15)
0xffff7ab083d4   308  str x0, [x1, w3, sxtw #3]
0xffff7ab083d8   312  b #-0x18 (addr 0xffff7ab083c0)
0xffff7ab083dc   316  mov x0, x8
0xffff7ab083e0   320  mov jssp, fp
0xffff7ab083e4   324  ldp fp, lr, [jssp], #16
0xffff7ab083e8   328  add jssp, jssp, #0x10 (16)
0xffff7ab083ec   332  ret
0xffff7ab083f0   336  ldur x16, [x3, #-1]
0xffff7ab083f4   340  ldr x17, [x26, #120]
0xffff7ab083f8   344  cmp x16, x17
0xffff7ab083fc   348  b.ne #+0x11c (addr 0xffff7ab08518)
0xffff7ab08400   352  ldur d29, [x3, #7]
0xffff7ab08404   356  fcvtzs w5, d29
0xffff7ab08408   360  scvtf d0, w5
0xffff7ab0840c   364  fcmp d29, d0
0xffff7ab08410   368  b.ne #+0x108 (addr 0xffff7ab08518)
0xffff7ab08414   372  b #-0x138 (addr 0xffff7ab082dc)
0xffff7ab08418   376  movz x8, #0x0
0xffff7ab0841c   380  mov x16, lr
0xffff7ab08420   384  ldr x17, pc+184 (addr 0x0000ffff7ab084d8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab08424   388  blr x17
0xffff7ab08428   392  movz x0, #0x3000000000
0xffff7ab0842c   396  movz x10, #0x0
0xffff7ab08430   400  sub csp, jssp, #0x10 (16)
0xffff7ab08434   404  stp x10, x0, [jssp, #-16]!
0xffff7ab08438   408  movz x0, #0x2
0xffff7ab0843c   412  movz x1, #0x5b88
0xffff7ab08440   416  movk x1, #0xe2, lsl #16
0xffff7ab08444   420  ldr x16, pc+156 (addr 0x0000ffff7ab084e0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab08448   424  blr x16
0xffff7ab0844c   428  str x0, [jssp, #64]
0xffff7ab08450   432  ldr x16, pc+152 (addr 0x0000ffff7ab084e8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab08454   436  blr x16
0xffff7ab08458   440  b #-0x124 (addr 0xffff7ab08334)
0xffff7ab0845c   444  movz x2, #0x0
0xffff7ab08460   448  mov x16, lr
0xffff7ab08464   452  ldr x17, pc+140 (addr 0x0000ffff7ab084f0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab08468   456  blr x17
0xffff7ab0846c   460  lsl x0, x6, #32
0xffff7ab08470   464  movz x10, #0x0
0xffff7ab08474   468  sub csp, jssp, #0x10 (16)
0xffff7ab08478   472  stp x10, x0, [jssp, #-16]!
0xffff7ab0847c   476  movz x0, #0x2
0xffff7ab08480   480  movz x1, #0x5b88
0xffff7ab08484   484  movk x1, #0xe2, lsl #16
0xffff7ab08488   488  ldr x16, pc+112 (addr 0x0000ffff7ab084f8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0848c   492  blr x16
0xffff7ab08490   496  str x0, [jssp, #16]
0xffff7ab08494   500  ldr x16, pc+108 (addr 0x0000ffff7ab08500)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab08498   504  blr x16
0xffff7ab0849c   508  b #-0x108 (addr 0xffff7ab08394)
0xffff7ab084a0   512  5800033f       constant pool begin (num_const = 25)    ;; constant pool
0xffff7ab084a4   516  d63f03e0       constant
0xffff7ab084a8   520  20d04201       constant
0xffff7ab084ac   524  00000000       constant
0xffff7ab084b0   528  20d04201       constant
0xffff7ab084b4   532  00000000       constant
0xffff7ab084b8   536  4ec05d81       constant
0xffff7ab084bc   540  00000000       constant
0xffff7ab084c0   544  4ec04259       constant
0xffff7ab084c4   548  00000000       constant
0xffff7ab084c8   552  7ab07ac0       constant
0xffff7ab084cc   556  0000ffff       constant
0xffff7ab084d0   560  20d04519       constant
0xffff7ab084d4   564  00000000       constant
0xffff7ab084d8   568  7ab06820       constant
0xffff7ab084dc   572  0000ffff       constant
0xffff7ab084e0   576  7ab06260       constant
0xffff7ab084e4   580  0000ffff       constant
0xffff7ab084e8   584  7ab068e0       constant
0xffff7ab084ec   588  0000ffff       constant
0xffff7ab084f0   592  7ab06820       constant
0xffff7ab084f4   596  0000ffff       constant
0xffff7ab084f8   600  7ab06260       constant
0xffff7ab084fc   604  0000ffff       constant
0xffff7ab08500   608  7ab068e0       constant
0xffff7ab08504   612  0000ffff       constant
0xffff7ab08508   616  movz x16, #0x0
0xffff7ab0850c   620  bl #+0x14 (addr 0xffff7ab08520)
0xffff7ab08510   624  movz x16, #0x8
0xffff7ab08514   628  bl #+0xc (addr 0xffff7ab08520)
0xffff7ab08518   632  movz x16, #0x10
0xffff7ab0851c   636  bl #+0x4 (addr 0xffff7ab08520)
0xffff7ab08520   640  ldr x17, pc+24 (addr 0x0000ffff7ab08538)    ;; lazy deoptimization bailout 0
0xffff7ab08524   644  add x17, x17, x16
0xffff7ab08528   648  br x17
0xffff7ab0852c   652  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab08530   656  d63f03e0       constant
0xffff7ab08534   660  d503201f       constant
0xffff7ab08538   664  7a906000       constant
0xffff7ab0853c   668  0000ffff       constant


Safepoints (size = 34)
0xffff7ab0844c   428  000 | x1 | x2 | x8 | x27 (sp -> fp)  <none> argc: 2
0xffff7ab08490   496  000 | x2 | x8 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0xffff7ab0833c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab08344  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab08354  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab08394  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab083b8  code target (STUB)  (0xffff7ab07ac0)
0xffff7ab083cc  embedded object  (0x20d04519 <the hole>)
0xffff7ab08420  code target (STUB)  (0xffff7ab06820)
0xffff7ab08444  code target (STUB)  (0xffff7ab06260)
0xffff7ab08450  code target (STUB)  (0xffff7ab068e0)
0xffff7ab08464  code target (STUB)  (0xffff7ab06820)
0xffff7ab08488  code target (STUB)  (0xffff7ab06260)
0xffff7ab08494  code target (STUB)  (0xffff7ab068e0)
0xffff7ab084a0  constant pool (size 104)
0xffff7ab08520  runtime entry
0xffff7ab0852c  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 509)
0xffff7ab085e0     0  movz x16, #0xa00000000
0xffff7ab085e4     4  sub csp, jssp, #0x10 (16)
0xffff7ab085e8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab085ec    12  mov fp, jssp
0xffff7ab085f0    16  sub csp, jssp, #0x8 (8)
0xffff7ab085f4    20  sub jssp, jssp, #0x8 (8)
0xffff7ab085f8    24  stur x16, [fp, #-8]
0xffff7ab085fc    28  ldr x3, [fp]
0xffff7ab08600    32  ldur x4, [x3, #-8]
0xffff7ab08604    36  movz x16, #0xe00000000
0xffff7ab08608    40  cmp x4, x16
0xffff7ab0860c    44  csel x4, fp, x3, ne
0xffff7ab08610    48  ldr x3, [x4, #16]
0xffff7ab08614    52  tbnz w3, #0, #+0xd0 (addr 0xffff7ab086e4)
0xffff7ab08618    56  asr x5, x3, #32
0xffff7ab0861c    60  movz w16, #0x257f
0xffff7ab08620    64  cmp w5, w16, lsl #3
0xffff7ab08624    68  b.hs #+0x16c (addr 0xffff7ab08790)
0xffff7ab08628    72  cbz w5, #+0xc (addr 0xffff7ab08634)
0xffff7ab0862c    76  mov x3, x5
0xffff7ab08630    80  b #+0xc (addr 0xffff7ab0863c)
0xffff7ab08634    84  movz x3, #0x4
0xffff7ab08638    88  movz x5, #0x0
0xffff7ab0863c    92  lsl x4, x3, #32
0xffff7ab08640    96  lsl x5, x5, #32
0xffff7ab08644   100  lsl w6, w3, #3
0xffff7ab08648   104  add w6, w6, #0x10 (16)
0xffff7ab0864c   108  cmp w6, #0x96000 (614400)
0xffff7ab08650   112  b.hs #+0x148 (addr 0xffff7ab08798)
0xffff7ab08654   116  add w0, w6, #0x20 (32)
0xffff7ab08658   120  sxtw x0, w0
0xffff7ab0865c   124  movz x2, #0xe2c0
0xffff7ab08660   128  movk x2, #0x9ab, lsl #16
0xffff7ab08664   132  ldp x7, x16, [x2]
0xffff7ab08668   136  adds x6, x7, x0
0xffff7ab0866c   140  ccmp x6, x16, #nzCv, lo
0xffff7ab08670   144  b.hi #+0x9c (addr 0xffff7ab0870c)
0xffff7ab08674   148  str x6, [x2]
0xffff7ab08678   152  orr x7, x7, #0x1
0xffff7ab0867c   156  movz w0, #0x0
0xffff7ab08680   160  stur x0, [x7, #31]
0xffff7ab08684   164  ldur x0, [x1, #23]
0xffff7ab08688   168  stur x0, [x7, #-1]
0xffff7ab0868c   172  ldr x0, pc+204 (addr 0x0000ffff7ab08758)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab08690   176  stur x0, [x7, #7]
0xffff7ab08694   180  ldr x0, pc+204 (addr 0x0000ffff7ab08760)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab08698   184  stur x0, [x7, #15]
0xffff7ab0869c   188  stur x5, [x7, #23]
0xffff7ab086a0   192  add x0, x7, #0x20 (32)
0xffff7ab086a4   196  ldr x1, pc+196 (addr 0x0000ffff7ab08768)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab086a8   200  stur x1, [x0, #-1]
0xffff7ab086ac   204  stur x4, [x0, #7]
0xffff7ab086b0   208  stur x0, [x7, #15]
0xffff7ab086b4   212  cmp w3, #0x0 (0)
0xffff7ab086b8   216  b.le #+0x18 (addr 0xffff7ab086d0)
0xffff7ab086bc   220  sub w3, w3, #0x1 (1)
0xffff7ab086c0   224  ldr x1, pc+176 (addr 0x0000ffff7ab08770)    ;; object: 0x20d04519 <the hole>
0xffff7ab086c4   228  add x2, x0, #0xf (15)
0xffff7ab086c8   232  str x1, [x2, w3, sxtw #3]
0xffff7ab086cc   236  b #-0x18 (addr 0xffff7ab086b4)
0xffff7ab086d0   240  mov x0, x7
0xffff7ab086d4   244  mov jssp, fp
0xffff7ab086d8   248  ldp fp, lr, [jssp], #16
0xffff7ab086dc   252  add jssp, jssp, #0x10 (16)
0xffff7ab086e0   256  ret
0xffff7ab086e4   260  ldur x16, [x3, #-1]
0xffff7ab086e8   264  ldr x17, [x26, #120]
0xffff7ab086ec   268  cmp x16, x17
0xffff7ab086f0   272  b.ne #+0xb0 (addr 0xffff7ab087a0)
0xffff7ab086f4   276  ldur d29, [x3, #7]
0xffff7ab086f8   280  fcvtzs w5, d29
0xffff7ab086fc   284  scvtf d0, w5
0xffff7ab08700   288  fcmp d29, d0
0xffff7ab08704   292  b.ne #+0x9c (addr 0xffff7ab087a0)
0xffff7ab08708   296  b #-0xec (addr 0xffff7ab0861c)
0xffff7ab0870c   300  movz x7, #0x0
0xffff7ab08710   304  mov x16, lr
0xffff7ab08714   308  ldr x17, pc+100 (addr 0x0000ffff7ab08778)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab08718   312  blr x17
0xffff7ab0871c   316  lsl x0, x0, #32
0xffff7ab08720   320  movz x10, #0x0
0xffff7ab08724   324  sub csp, jssp, #0x10 (16)
0xffff7ab08728   328  stp x10, x0, [jssp, #-16]!
0xffff7ab0872c   332  movz x0, #0x2
0xffff7ab08730   336  movz x1, #0x5b88
0xffff7ab08734   340  movk x1, #0xe2, lsl #16
0xffff7ab08738   344  ldr x16, pc+72 (addr 0x0000ffff7ab08780)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0873c   348  blr x16
0xffff7ab08740   352  str x0, [jssp, #56]
0xffff7ab08744   356  ldr x16, pc+68 (addr 0x0000ffff7ab08788)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab08748   360  blr x16
0xffff7ab0874c   364  b #-0xd0 (addr 0xffff7ab0867c)
0xffff7ab08750   368  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab08754   372  d63f03e0       constant
0xffff7ab08758   376  20d04201       constant
0xffff7ab0875c   380  00000000       constant
0xffff7ab08760   384  20d04201       constant
0xffff7ab08764   388  00000000       constant
0xffff7ab08768   392  4ec04259       constant
0xffff7ab0876c   396  00000000       constant
0xffff7ab08770   400  20d04519       constant
0xffff7ab08774   404  00000000       constant
0xffff7ab08778   408  7ab06820       constant
0xffff7ab0877c   412  0000ffff       constant
0xffff7ab08780   416  7ab06260       constant
0xffff7ab08784   420  0000ffff       constant
0xffff7ab08788   424  7ab068e0       constant
0xffff7ab0878c   428  0000ffff       constant
0xffff7ab08790   432  movz x16, #0x0
0xffff7ab08794   436  bl #+0x14 (addr 0xffff7ab087a8)
0xffff7ab08798   440  movz x16, #0x8
0xffff7ab0879c   444  bl #+0xc (addr 0xffff7ab087a8)
0xffff7ab087a0   448  movz x16, #0x10
0xffff7ab087a4   452  bl #+0x4 (addr 0xffff7ab087a8)
0xffff7ab087a8   456  ldr x17, pc+24 (addr 0x0000ffff7ab087c0)    ;; lazy deoptimization bailout 0
0xffff7ab087ac   460  add x17, x17, x16
0xffff7ab087b0   464  br x17
0xffff7ab087b4   468  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab087b8   472  d63f03e0       constant
0xffff7ab087bc   476  d503201f       constant
0xffff7ab087c0   480  7a906000       constant
0xffff7ab087c4   484  0000ffff       constant


Safepoints (size = 21)
0xffff7ab08740   352  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab0868c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab08694  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab086a4  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab086c0  embedded object  (0x20d04519 <the hole>)
0xffff7ab08714  code target (STUB)  (0xffff7ab06820)
0xffff7ab08738  code target (STUB)  (0xffff7ab06260)
0xffff7ab08744  code target (STUB)  (0xffff7ab068e0)
0xffff7ab08750  constant pool (size 64)
0xffff7ab087a8  runtime entry
0xffff7ab087b4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArraySingleArgumentConstructorStub
name = ArraySingleArgumentConstructorStub_FAST_SMI_ELEMENTS_DISABLE_ALLOCATION_SITES
compiler = crankshaft
Instructions (size = 509)
0xffff7ab085e0     0  movz x16, #0xa00000000
0xffff7ab085e4     4  sub csp, jssp, #0x10 (16)
0xffff7ab085e8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab085ec    12  mov fp, jssp
0xffff7ab085f0    16  sub csp, jssp, #0x8 (8)
0xffff7ab085f4    20  sub jssp, jssp, #0x8 (8)
0xffff7ab085f8    24  stur x16, [fp, #-8]
0xffff7ab085fc    28  ldr x3, [fp]
0xffff7ab08600    32  ldur x4, [x3, #-8]
0xffff7ab08604    36  movz x16, #0xe00000000
0xffff7ab08608    40  cmp x4, x16
0xffff7ab0860c    44  csel x4, fp, x3, ne
0xffff7ab08610    48  ldr x3, [x4, #16]
0xffff7ab08614    52  tbnz w3, #0, #+0xd0 (addr 0xffff7ab086e4)
0xffff7ab08618    56  asr x5, x3, #32
0xffff7ab0861c    60  movz w16, #0x257f
0xffff7ab08620    64  cmp w5, w16, lsl #3
0xffff7ab08624    68  b.hs #+0x16c (addr 0xffff7ab08790)
0xffff7ab08628    72  cbz w5, #+0xc (addr 0xffff7ab08634)
0xffff7ab0862c    76  mov x3, x5
0xffff7ab08630    80  b #+0xc (addr 0xffff7ab0863c)
0xffff7ab08634    84  movz x3, #0x4
0xffff7ab08638    88  movz x5, #0x0
0xffff7ab0863c    92  lsl x4, x3, #32
0xffff7ab08640    96  lsl x5, x5, #32
0xffff7ab08644   100  lsl w6, w3, #3
0xffff7ab08648   104  add w6, w6, #0x10 (16)
0xffff7ab0864c   108  cmp w6, #0x96000 (614400)
0xffff7ab08650   112  b.hs #+0x148 (addr 0xffff7ab08798)
0xffff7ab08654   116  add w0, w6, #0x20 (32)
0xffff7ab08658   120  sxtw x0, w0
0xffff7ab0865c   124  movz x2, #0xe2c0
0xffff7ab08660   128  movk x2, #0x9ab, lsl #16
0xffff7ab08664   132  ldp x7, x16, [x2]
0xffff7ab08668   136  adds x6, x7, x0
0xffff7ab0866c   140  ccmp x6, x16, #nzCv, lo
0xffff7ab08670   144  b.hi #+0x9c (addr 0xffff7ab0870c)
0xffff7ab08674   148  str x6, [x2]
0xffff7ab08678   152  orr x7, x7, #0x1
0xffff7ab0867c   156  movz w0, #0x0
0xffff7ab08680   160  stur x0, [x7, #31]
0xffff7ab08684   164  ldur x0, [x1, #23]
0xffff7ab08688   168  stur x0, [x7, #-1]
0xffff7ab0868c   172  ldr x0, pc+204 (addr 0x0000ffff7ab08758)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab08690   176  stur x0, [x7, #7]
0xffff7ab08694   180  ldr x0, pc+204 (addr 0x0000ffff7ab08760)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab08698   184  stur x0, [x7, #15]
0xffff7ab0869c   188  stur x5, [x7, #23]
0xffff7ab086a0   192  add x0, x7, #0x20 (32)
0xffff7ab086a4   196  ldr x1, pc+196 (addr 0x0000ffff7ab08768)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab086a8   200  stur x1, [x0, #-1]
0xffff7ab086ac   204  stur x4, [x0, #7]
0xffff7ab086b0   208  stur x0, [x7, #15]
0xffff7ab086b4   212  cmp w3, #0x0 (0)
0xffff7ab086b8   216  b.le #+0x18 (addr 0xffff7ab086d0)
0xffff7ab086bc   220  sub w3, w3, #0x1 (1)
0xffff7ab086c0   224  ldr x1, pc+176 (addr 0x0000ffff7ab08770)    ;; object: 0x20d04519 <the hole>
0xffff7ab086c4   228  add x2, x0, #0xf (15)
0xffff7ab086c8   232  str x1, [x2, w3, sxtw #3]
0xffff7ab086cc   236  b #-0x18 (addr 0xffff7ab086b4)
0xffff7ab086d0   240  mov x0, x7
0xffff7ab086d4   244  mov jssp, fp
0xffff7ab086d8   248  ldp fp, lr, [jssp], #16
0xffff7ab086dc   252  add jssp, jssp, #0x10 (16)
0xffff7ab086e0   256  ret
0xffff7ab086e4   260  ldur x16, [x3, #-1]
0xffff7ab086e8   264  ldr x17, [x26, #120]
0xffff7ab086ec   268  cmp x16, x17
0xffff7ab086f0   272  b.ne #+0xb0 (addr 0xffff7ab087a0)
0xffff7ab086f4   276  ldur d29, [x3, #7]
0xffff7ab086f8   280  fcvtzs w5, d29
0xffff7ab086fc   284  scvtf d0, w5
0xffff7ab08700   288  fcmp d29, d0
0xffff7ab08704   292  b.ne #+0x9c (addr 0xffff7ab087a0)
0xffff7ab08708   296  b #-0xec (addr 0xffff7ab0861c)
0xffff7ab0870c   300  movz x7, #0x0
0xffff7ab08710   304  mov x16, lr
0xffff7ab08714   308  ldr x17, pc+100 (addr 0x0000ffff7ab08778)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab08718   312  blr x17
0xffff7ab0871c   316  lsl x0, x0, #32
0xffff7ab08720   320  movz x10, #0x0
0xffff7ab08724   324  sub csp, jssp, #0x10 (16)
0xffff7ab08728   328  stp x10, x0, [jssp, #-16]!
0xffff7ab0872c   332  movz x0, #0x2
0xffff7ab08730   336  movz x1, #0x5b88
0xffff7ab08734   340  movk x1, #0xe2, lsl #16
0xffff7ab08738   344  ldr x16, pc+72 (addr 0x0000ffff7ab08780)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0873c   348  blr x16
0xffff7ab08740   352  str x0, [jssp, #56]
0xffff7ab08744   356  ldr x16, pc+68 (addr 0x0000ffff7ab08788)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab08748   360  blr x16
0xffff7ab0874c   364  b #-0xd0 (addr 0xffff7ab0867c)
0xffff7ab08750   368  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab08754   372  d63f03e0       constant
0xffff7ab08758   376  20d04201       constant
0xffff7ab0875c   380  00000000       constant
0xffff7ab08760   384  20d04201       constant
0xffff7ab08764   388  00000000       constant
0xffff7ab08768   392  4ec04259       constant
0xffff7ab0876c   396  00000000       constant
0xffff7ab08770   400  20d04519       constant
0xffff7ab08774   404  00000000       constant
0xffff7ab08778   408  7ab06820       constant
0xffff7ab0877c   412  0000ffff       constant
0xffff7ab08780   416  7ab06260       constant
0xffff7ab08784   420  0000ffff       constant
0xffff7ab08788   424  7ab068e0       constant
0xffff7ab0878c   428  0000ffff       constant
0xffff7ab08790   432  movz x16, #0x0
0xffff7ab08794   436  bl #+0x14 (addr 0xffff7ab087a8)
0xffff7ab08798   440  movz x16, #0x8
0xffff7ab0879c   444  bl #+0xc (addr 0xffff7ab087a8)
0xffff7ab087a0   448  movz x16, #0x10
0xffff7ab087a4   452  bl #+0x4 (addr 0xffff7ab087a8)
0xffff7ab087a8   456  ldr x17, pc+24 (addr 0x0000ffff7ab087c0)    ;; lazy deoptimization bailout 0
0xffff7ab087ac   460  add x17, x17, x16
0xffff7ab087b0   464  br x17
0xffff7ab087b4   468  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab087b8   472  d63f03e0       constant
0xffff7ab087bc   476  d503201f       constant
0xffff7ab087c0   480  7a906000       constant
0xffff7ab087c4   484  0000ffff       constant


Safepoints (size = 21)
0xffff7ab08740   352  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab0868c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab08694  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab086a4  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab086c0  embedded object  (0x20d04519 <the hole>)
0xffff7ab08714  code target (STUB)  (0xffff7ab06820)
0xffff7ab08738  code target (STUB)  (0xffff7ab06260)
0xffff7ab08744  code target (STUB)  (0xffff7ab068e0)
0xffff7ab08750  constant pool (size 64)
0xffff7ab087a8  runtime entry
0xffff7ab087b4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 722)
0xffff7ab08840     0  movz x16, #0xa00000000
0xffff7ab08844     4  sub csp, jssp, #0x10 (16)
0xffff7ab08848     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0884c    12  mov fp, jssp
0xffff7ab08850    16  sub csp, jssp, #0x8 (8)
0xffff7ab08854    20  sub jssp, jssp, #0x8 (8)
0xffff7ab08858    24  stur x16, [fp, #-8]
0xffff7ab0885c    28  ldr x3, [fp]
0xffff7ab08860    32  ldur x4, [x3, #-8]
0xffff7ab08864    36  movz x16, #0xe00000000
0xffff7ab08868    40  cmp x4, x16
0xffff7ab0886c    44  csel x4, fp, x3, ne
0xffff7ab08870    48  ldr x3, [x4, #16]
0xffff7ab08874    52  tbnz w3, #0, #+0x128 (addr 0xffff7ab0899c)
0xffff7ab08878    56  asr x5, x3, #32
0xffff7ab0887c    60  movz w16, #0x257f
0xffff7ab08880    64  cmp w5, w16, lsl #3
0xffff7ab08884    68  b.hs #+0x234 (addr 0xffff7ab08ab8)
0xffff7ab08888    72  cbz w5, #+0xc (addr 0xffff7ab08894)
0xffff7ab0888c    76  mov x3, x5
0xffff7ab08890    80  b #+0xc (addr 0xffff7ab0889c)
0xffff7ab08894    84  movz x3, #0x4
0xffff7ab08898    88  movz x5, #0x0
0xffff7ab0889c    92  lsl x4, x3, #32
0xffff7ab088a0    96  lsl x5, x5, #32
0xffff7ab088a4   100  lsl w6, w3, #3
0xffff7ab088a8   104  add w6, w6, #0x10 (16)
0xffff7ab088ac   108  cmp w6, #0x96000 (614400)
0xffff7ab088b0   112  b.hs #+0x210 (addr 0xffff7ab08ac0)
0xffff7ab088b4   116  movz x7, #0xe2c0
0xffff7ab088b8   120  movk x7, #0x9ab, lsl #16
0xffff7ab088bc   124  ldp x8, x0, [x7]
0xffff7ab088c0   128  adds x16, x8, #0x30 (48)
0xffff7ab088c4   132  ccmp x16, x0, #nzCv, lo
0xffff7ab088c8   136  b.hi #+0xfc (addr 0xffff7ab089c4)
0xffff7ab088cc   140  str x16, [x7]
0xffff7ab088d0   144  orr x8, x8, #0x1
0xffff7ab088d4   148  ldur x0, [x1, #39]
0xffff7ab088d8   152  ldur x0, [x0, #39]
0xffff7ab088dc   156  movz x16, #0x17f
0xffff7ab088e0   160  ldr x0, [x0, x16]
0xffff7ab088e4   164  stur x0, [x8, #-1]
0xffff7ab088e8   168  ldr x0, pc+368 (addr 0x0000ffff7ab08a58)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab088ec   172  stur x0, [x8, #7]
0xffff7ab088f0   176  ldr x0, pc+368 (addr 0x0000ffff7ab08a60)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab088f4   180  stur x0, [x8, #15]
0xffff7ab088f8   184  stur x5, [x8, #23]
0xffff7ab088fc   188  add x0, x8, #0x20 (32)
0xffff7ab08900   192  ldr x1, pc+360 (addr 0x0000ffff7ab08a68)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab08904   196  stur x1, [x0, #-1]
0xffff7ab08908   200  stur x2, [x0, #7]
0xffff7ab0890c   204  ldur w0, [x2, #35]
0xffff7ab08910   208  add w0, w0, #0x1 (1)
0xffff7ab08914   212  lsl x0, x0, #32
0xffff7ab08918   216  stur x0, [x2, #31]
0xffff7ab0891c   220  sxtw x6, w6
0xffff7ab08920   224  movz x0, #0xe2c0
0xffff7ab08924   228  movk x0, #0x9ab, lsl #16
0xffff7ab08928   232  ldp x2, x16, [x0]
0xffff7ab0892c   236  adds x1, x2, x6
0xffff7ab08930   240  ccmp x1, x16, #nzCv, lo
0xffff7ab08934   244  b.hi #+0xd4 (addr 0xffff7ab08a08)
0xffff7ab08938   248  str x1, [x0]
0xffff7ab0893c   252  orr x2, x2, #0x1
0xffff7ab08940   256  ldr x0, pc+304 (addr 0x0000ffff7ab08a70)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab08944   260  stur x0, [x2, #-1]
0xffff7ab08948   264  stur x4, [x2, #7]
0xffff7ab0894c   268  mov x0, x2
0xffff7ab08950   272  stur x0, [x8, #15]
0xffff7ab08954   276  add x1, x8, #0xf (15)
0xffff7ab08958   280  and x0, x8, #0xfffffffffff00000
0xffff7ab0895c   284  ldr x0, [x0, #8]
0xffff7ab08960   288  tbz w0, #2, #+0xc (addr 0xffff7ab0896c)
0xffff7ab08964   292  ldr x16, pc+276 (addr 0x0000ffff7ab08a78)    ;; code: STUB, RecordWriteStub, minor: 66568
0xffff7ab08968   296  blr x16
0xffff7ab0896c   300  cmp w3, #0x0 (0)
0xffff7ab08970   304  b.le #+0x18 (addr 0xffff7ab08988)
0xffff7ab08974   308  sub w3, w3, #0x1 (1)
0xffff7ab08978   312  ldr x0, pc+264 (addr 0x0000ffff7ab08a80)    ;; object: 0x20d04519 <the hole>
0xffff7ab0897c   316  add x1, x2, #0xf (15)
0xffff7ab08980   320  str x0, [x1, w3, sxtw #3]
0xffff7ab08984   324  b #-0x18 (addr 0xffff7ab0896c)
0xffff7ab08988   328  mov x0, x8
0xffff7ab0898c   332  mov jssp, fp
0xffff7ab08990   336  ldp fp, lr, [jssp], #16
0xffff7ab08994   340  add jssp, jssp, #0x10 (16)
0xffff7ab08998   344  ret
0xffff7ab0899c   348  ldur x16, [x3, #-1]
0xffff7ab089a0   352  ldr x17, [x26, #120]
0xffff7ab089a4   356  cmp x16, x17
0xffff7ab089a8   360  b.ne #+0x120 (addr 0xffff7ab08ac8)
0xffff7ab089ac   364  ldur d29, [x3, #7]
0xffff7ab089b0   368  fcvtzs w5, d29
0xffff7ab089b4   372  scvtf d0, w5
0xffff7ab089b8   376  fcmp d29, d0
0xffff7ab089bc   380  b.ne #+0x10c (addr 0xffff7ab08ac8)
0xffff7ab089c0   384  b #-0x144 (addr 0xffff7ab0887c)
0xffff7ab089c4   388  movz x8, #0x0
0xffff7ab089c8   392  mov x16, lr
0xffff7ab089cc   396  ldr x17, pc+188 (addr 0x0000ffff7ab08a88)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab089d0   400  blr x17
0xffff7ab089d4   404  movz x0, #0x3000000000
0xffff7ab089d8   408  movz x10, #0x0
0xffff7ab089dc   412  sub csp, jssp, #0x10 (16)
0xffff7ab089e0   416  stp x10, x0, [jssp, #-16]!
0xffff7ab089e4   420  movz x0, #0x2
0xffff7ab089e8   424  movz x1, #0x5b88
0xffff7ab089ec   428  movk x1, #0xe2, lsl #16
0xffff7ab089f0   432  ldr x16, pc+160 (addr 0x0000ffff7ab08a90)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab089f4   436  blr x16
0xffff7ab089f8   440  str x0, [jssp, #64]
0xffff7ab089fc   444  ldr x16, pc+156 (addr 0x0000ffff7ab08a98)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab08a00   448  blr x16
0xffff7ab08a04   452  b #-0x130 (addr 0xffff7ab088d4)
0xffff7ab08a08   456  movz x2, #0x0
0xffff7ab08a0c   460  mov x16, lr
0xffff7ab08a10   464  ldr x17, pc+144 (addr 0x0000ffff7ab08aa0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab08a14   468  blr x17
0xffff7ab08a18   472  lsl x0, x6, #32
0xffff7ab08a1c   476  movz x10, #0x0
0xffff7ab08a20   480  sub csp, jssp, #0x10 (16)
0xffff7ab08a24   484  stp x10, x0, [jssp, #-16]!
0xffff7ab08a28   488  movz x0, #0x2
0xffff7ab08a2c   492  movz x1, #0x5b88
0xffff7ab08a30   496  movk x1, #0xe2, lsl #16
0xffff7ab08a34   500  ldr x16, pc+116 (addr 0x0000ffff7ab08aa8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab08a38   504  blr x16
0xffff7ab08a3c   508  str x0, [jssp, #16]
0xffff7ab08a40   512  ldr x16, pc+112 (addr 0x0000ffff7ab08ab0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab08a44   516  blr x16
0xffff7ab08a48   520  b #-0x108 (addr 0xffff7ab08940)
0xffff7ab08a4c   524  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0xffff7ab08a50   528  d63f03e0       constant
0xffff7ab08a54   532  d503201f       constant
0xffff7ab08a58   536  20d04201       constant
0xffff7ab08a5c   540  00000000       constant
0xffff7ab08a60   544  20d04201       constant
0xffff7ab08a64   548  00000000       constant
0xffff7ab08a68   552  4ec05d81       constant
0xffff7ab08a6c   556  00000000       constant
0xffff7ab08a70   560  4ec04259       constant
0xffff7ab08a74   564  00000000       constant
0xffff7ab08a78   568  7ab07ac0       constant
0xffff7ab08a7c   572  0000ffff       constant
0xffff7ab08a80   576  20d04519       constant
0xffff7ab08a84   580  00000000       constant
0xffff7ab08a88   584  7ab06820       constant
0xffff7ab08a8c   588  0000ffff       constant
0xffff7ab08a90   592  7ab06260       constant
0xffff7ab08a94   596  0000ffff       constant
0xffff7ab08a98   600  7ab068e0       constant
0xffff7ab08a9c   604  0000ffff       constant
0xffff7ab08aa0   608  7ab06820       constant
0xffff7ab08aa4   612  0000ffff       constant
0xffff7ab08aa8   616  7ab06260       constant
0xffff7ab08aac   620  0000ffff       constant
0xffff7ab08ab0   624  7ab068e0       constant
0xffff7ab08ab4   628  0000ffff       constant
0xffff7ab08ab8   632  movz x16, #0x0
0xffff7ab08abc   636  bl #+0x14 (addr 0xffff7ab08ad0)
0xffff7ab08ac0   640  movz x16, #0x8
0xffff7ab08ac4   644  bl #+0xc (addr 0xffff7ab08ad0)
0xffff7ab08ac8   648  movz x16, #0x10
0xffff7ab08acc   652  bl #+0x4 (addr 0xffff7ab08ad0)
0xffff7ab08ad0   656  ldr x17, pc+24 (addr 0x0000ffff7ab08ae8)    ;; lazy deoptimization bailout 0
0xffff7ab08ad4   660  add x17, x17, x16
0xffff7ab08ad8   664  br x17
0xffff7ab08adc   668  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab08ae0   672  d63f03e0       constant
0xffff7ab08ae4   676  d503201f       constant
0xffff7ab08ae8   680  7a906000       constant
0xffff7ab08aec   684  0000ffff       constant


Safepoints (size = 34)
0xffff7ab089f8   440  000 | x1 | x2 | x8 | x27 (sp -> fp)  <none> argc: 2
0xffff7ab08a3c   508  000 | x2 | x8 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0xffff7ab088e8  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab088f0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab08900  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab08940  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab08964  code target (STUB)  (0xffff7ab07ac0)
0xffff7ab08978  embedded object  (0x20d04519 <the hole>)
0xffff7ab089cc  code target (STUB)  (0xffff7ab06820)
0xffff7ab089f0  code target (STUB)  (0xffff7ab06260)
0xffff7ab089fc  code target (STUB)  (0xffff7ab068e0)
0xffff7ab08a10  code target (STUB)  (0xffff7ab06820)
0xffff7ab08a34  code target (STUB)  (0xffff7ab06260)
0xffff7ab08a40  code target (STUB)  (0xffff7ab068e0)
0xffff7ab08a4c  constant pool (size 108)
0xffff7ab08ad0  runtime entry
0xffff7ab08adc  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArraySingleArgumentConstructorStub
name = ArraySingleArgumentConstructorStub_FAST_HOLEY_SMI_ELEMENTS
compiler = crankshaft
Instructions (size = 722)
0xffff7ab08840     0  movz x16, #0xa00000000
0xffff7ab08844     4  sub csp, jssp, #0x10 (16)
0xffff7ab08848     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0884c    12  mov fp, jssp
0xffff7ab08850    16  sub csp, jssp, #0x8 (8)
0xffff7ab08854    20  sub jssp, jssp, #0x8 (8)
0xffff7ab08858    24  stur x16, [fp, #-8]
0xffff7ab0885c    28  ldr x3, [fp]
0xffff7ab08860    32  ldur x4, [x3, #-8]
0xffff7ab08864    36  movz x16, #0xe00000000
0xffff7ab08868    40  cmp x4, x16
0xffff7ab0886c    44  csel x4, fp, x3, ne
0xffff7ab08870    48  ldr x3, [x4, #16]
0xffff7ab08874    52  tbnz w3, #0, #+0x128 (addr 0xffff7ab0899c)
0xffff7ab08878    56  asr x5, x3, #32
0xffff7ab0887c    60  movz w16, #0x257f
0xffff7ab08880    64  cmp w5, w16, lsl #3
0xffff7ab08884    68  b.hs #+0x234 (addr 0xffff7ab08ab8)
0xffff7ab08888    72  cbz w5, #+0xc (addr 0xffff7ab08894)
0xffff7ab0888c    76  mov x3, x5
0xffff7ab08890    80  b #+0xc (addr 0xffff7ab0889c)
0xffff7ab08894    84  movz x3, #0x4
0xffff7ab08898    88  movz x5, #0x0
0xffff7ab0889c    92  lsl x4, x3, #32
0xffff7ab088a0    96  lsl x5, x5, #32
0xffff7ab088a4   100  lsl w6, w3, #3
0xffff7ab088a8   104  add w6, w6, #0x10 (16)
0xffff7ab088ac   108  cmp w6, #0x96000 (614400)
0xffff7ab088b0   112  b.hs #+0x210 (addr 0xffff7ab08ac0)
0xffff7ab088b4   116  movz x7, #0xe2c0
0xffff7ab088b8   120  movk x7, #0x9ab, lsl #16
0xffff7ab088bc   124  ldp x8, x0, [x7]
0xffff7ab088c0   128  adds x16, x8, #0x30 (48)
0xffff7ab088c4   132  ccmp x16, x0, #nzCv, lo
0xffff7ab088c8   136  b.hi #+0xfc (addr 0xffff7ab089c4)
0xffff7ab088cc   140  str x16, [x7]
0xffff7ab088d0   144  orr x8, x8, #0x1
0xffff7ab088d4   148  ldur x0, [x1, #39]
0xffff7ab088d8   152  ldur x0, [x0, #39]
0xffff7ab088dc   156  movz x16, #0x17f
0xffff7ab088e0   160  ldr x0, [x0, x16]
0xffff7ab088e4   164  stur x0, [x8, #-1]
0xffff7ab088e8   168  ldr x0, pc+368 (addr 0x0000ffff7ab08a58)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab088ec   172  stur x0, [x8, #7]
0xffff7ab088f0   176  ldr x0, pc+368 (addr 0x0000ffff7ab08a60)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab088f4   180  stur x0, [x8, #15]
0xffff7ab088f8   184  stur x5, [x8, #23]
0xffff7ab088fc   188  add x0, x8, #0x20 (32)
0xffff7ab08900   192  ldr x1, pc+360 (addr 0x0000ffff7ab08a68)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab08904   196  stur x1, [x0, #-1]
0xffff7ab08908   200  stur x2, [x0, #7]
0xffff7ab0890c   204  ldur w0, [x2, #35]
0xffff7ab08910   208  add w0, w0, #0x1 (1)
0xffff7ab08914   212  lsl x0, x0, #32
0xffff7ab08918   216  stur x0, [x2, #31]
0xffff7ab0891c   220  sxtw x6, w6
0xffff7ab08920   224  movz x0, #0xe2c0
0xffff7ab08924   228  movk x0, #0x9ab, lsl #16
0xffff7ab08928   232  ldp x2, x16, [x0]
0xffff7ab0892c   236  adds x1, x2, x6
0xffff7ab08930   240  ccmp x1, x16, #nzCv, lo
0xffff7ab08934   244  b.hi #+0xd4 (addr 0xffff7ab08a08)
0xffff7ab08938   248  str x1, [x0]
0xffff7ab0893c   252  orr x2, x2, #0x1
0xffff7ab08940   256  ldr x0, pc+304 (addr 0x0000ffff7ab08a70)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab08944   260  stur x0, [x2, #-1]
0xffff7ab08948   264  stur x4, [x2, #7]
0xffff7ab0894c   268  mov x0, x2
0xffff7ab08950   272  stur x0, [x8, #15]
0xffff7ab08954   276  add x1, x8, #0xf (15)
0xffff7ab08958   280  and x0, x8, #0xfffffffffff00000
0xffff7ab0895c   284  ldr x0, [x0, #8]
0xffff7ab08960   288  tbz w0, #2, #+0xc (addr 0xffff7ab0896c)
0xffff7ab08964   292  ldr x16, pc+276 (addr 0x0000ffff7ab08a78)    ;; code: STUB, RecordWriteStub, minor: 66568
0xffff7ab08968   296  blr x16
0xffff7ab0896c   300  cmp w3, #0x0 (0)
0xffff7ab08970   304  b.le #+0x18 (addr 0xffff7ab08988)
0xffff7ab08974   308  sub w3, w3, #0x1 (1)
0xffff7ab08978   312  ldr x0, pc+264 (addr 0x0000ffff7ab08a80)    ;; object: 0x20d04519 <the hole>
0xffff7ab0897c   316  add x1, x2, #0xf (15)
0xffff7ab08980   320  str x0, [x1, w3, sxtw #3]
0xffff7ab08984   324  b #-0x18 (addr 0xffff7ab0896c)
0xffff7ab08988   328  mov x0, x8
0xffff7ab0898c   332  mov jssp, fp
0xffff7ab08990   336  ldp fp, lr, [jssp], #16
0xffff7ab08994   340  add jssp, jssp, #0x10 (16)
0xffff7ab08998   344  ret
0xffff7ab0899c   348  ldur x16, [x3, #-1]
0xffff7ab089a0   352  ldr x17, [x26, #120]
0xffff7ab089a4   356  cmp x16, x17
0xffff7ab089a8   360  b.ne #+0x120 (addr 0xffff7ab08ac8)
0xffff7ab089ac   364  ldur d29, [x3, #7]
0xffff7ab089b0   368  fcvtzs w5, d29
0xffff7ab089b4   372  scvtf d0, w5
0xffff7ab089b8   376  fcmp d29, d0
0xffff7ab089bc   380  b.ne #+0x10c (addr 0xffff7ab08ac8)
0xffff7ab089c0   384  b #-0x144 (addr 0xffff7ab0887c)
0xffff7ab089c4   388  movz x8, #0x0
0xffff7ab089c8   392  mov x16, lr
0xffff7ab089cc   396  ldr x17, pc+188 (addr 0x0000ffff7ab08a88)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab089d0   400  blr x17
0xffff7ab089d4   404  movz x0, #0x3000000000
0xffff7ab089d8   408  movz x10, #0x0
0xffff7ab089dc   412  sub csp, jssp, #0x10 (16)
0xffff7ab089e0   416  stp x10, x0, [jssp, #-16]!
0xffff7ab089e4   420  movz x0, #0x2
0xffff7ab089e8   424  movz x1, #0x5b88
0xffff7ab089ec   428  movk x1, #0xe2, lsl #16
0xffff7ab089f0   432  ldr x16, pc+160 (addr 0x0000ffff7ab08a90)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab089f4   436  blr x16
0xffff7ab089f8   440  str x0, [jssp, #64]
0xffff7ab089fc   444  ldr x16, pc+156 (addr 0x0000ffff7ab08a98)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab08a00   448  blr x16
0xffff7ab08a04   452  b #-0x130 (addr 0xffff7ab088d4)
0xffff7ab08a08   456  movz x2, #0x0
0xffff7ab08a0c   460  mov x16, lr
0xffff7ab08a10   464  ldr x17, pc+144 (addr 0x0000ffff7ab08aa0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab08a14   468  blr x17
0xffff7ab08a18   472  lsl x0, x6, #32
0xffff7ab08a1c   476  movz x10, #0x0
0xffff7ab08a20   480  sub csp, jssp, #0x10 (16)
0xffff7ab08a24   484  stp x10, x0, [jssp, #-16]!
0xffff7ab08a28   488  movz x0, #0x2
0xffff7ab08a2c   492  movz x1, #0x5b88
0xffff7ab08a30   496  movk x1, #0xe2, lsl #16
0xffff7ab08a34   500  ldr x16, pc+116 (addr 0x0000ffff7ab08aa8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab08a38   504  blr x16
0xffff7ab08a3c   508  str x0, [jssp, #16]
0xffff7ab08a40   512  ldr x16, pc+112 (addr 0x0000ffff7ab08ab0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab08a44   516  blr x16
0xffff7ab08a48   520  b #-0x108 (addr 0xffff7ab08940)
0xffff7ab08a4c   524  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0xffff7ab08a50   528  d63f03e0       constant
0xffff7ab08a54   532  d503201f       constant
0xffff7ab08a58   536  20d04201       constant
0xffff7ab08a5c   540  00000000       constant
0xffff7ab08a60   544  20d04201       constant
0xffff7ab08a64   548  00000000       constant
0xffff7ab08a68   552  4ec05d81       constant
0xffff7ab08a6c   556  00000000       constant
0xffff7ab08a70   560  4ec04259       constant
0xffff7ab08a74   564  00000000       constant
0xffff7ab08a78   568  7ab07ac0       constant
0xffff7ab08a7c   572  0000ffff       constant
0xffff7ab08a80   576  20d04519       constant
0xffff7ab08a84   580  00000000       constant
0xffff7ab08a88   584  7ab06820       constant
0xffff7ab08a8c   588  0000ffff       constant
0xffff7ab08a90   592  7ab06260       constant
0xffff7ab08a94   596  0000ffff       constant
0xffff7ab08a98   600  7ab068e0       constant
0xffff7ab08a9c   604  0000ffff       constant
0xffff7ab08aa0   608  7ab06820       constant
0xffff7ab08aa4   612  0000ffff       constant
0xffff7ab08aa8   616  7ab06260       constant
0xffff7ab08aac   620  0000ffff       constant
0xffff7ab08ab0   624  7ab068e0       constant
0xffff7ab08ab4   628  0000ffff       constant
0xffff7ab08ab8   632  movz x16, #0x0
0xffff7ab08abc   636  bl #+0x14 (addr 0xffff7ab08ad0)
0xffff7ab08ac0   640  movz x16, #0x8
0xffff7ab08ac4   644  bl #+0xc (addr 0xffff7ab08ad0)
0xffff7ab08ac8   648  movz x16, #0x10
0xffff7ab08acc   652  bl #+0x4 (addr 0xffff7ab08ad0)
0xffff7ab08ad0   656  ldr x17, pc+24 (addr 0x0000ffff7ab08ae8)    ;; lazy deoptimization bailout 0
0xffff7ab08ad4   660  add x17, x17, x16
0xffff7ab08ad8   664  br x17
0xffff7ab08adc   668  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab08ae0   672  d63f03e0       constant
0xffff7ab08ae4   676  d503201f       constant
0xffff7ab08ae8   680  7a906000       constant
0xffff7ab08aec   684  0000ffff       constant


Safepoints (size = 34)
0xffff7ab089f8   440  000 | x1 | x2 | x8 | x27 (sp -> fp)  <none> argc: 2
0xffff7ab08a3c   508  000 | x2 | x8 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0xffff7ab088e8  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab088f0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab08900  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab08940  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab08964  code target (STUB)  (0xffff7ab07ac0)
0xffff7ab08978  embedded object  (0x20d04519 <the hole>)
0xffff7ab089cc  code target (STUB)  (0xffff7ab06820)
0xffff7ab089f0  code target (STUB)  (0xffff7ab06260)
0xffff7ab089fc  code target (STUB)  (0xffff7ab068e0)
0xffff7ab08a10  code target (STUB)  (0xffff7ab06820)
0xffff7ab08a34  code target (STUB)  (0xffff7ab06260)
0xffff7ab08a40  code target (STUB)  (0xffff7ab068e0)
0xffff7ab08a4c  constant pool (size 108)
0xffff7ab08ad0  runtime entry
0xffff7ab08adc  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 525)
0xffff7ab08b80     0  movz x16, #0xa00000000
0xffff7ab08b84     4  sub csp, jssp, #0x10 (16)
0xffff7ab08b88     8  stp fp, lr, [jssp, #-16]!
0xffff7ab08b8c    12  mov fp, jssp
0xffff7ab08b90    16  sub csp, jssp, #0x8 (8)
0xffff7ab08b94    20  sub jssp, jssp, #0x8 (8)
0xffff7ab08b98    24  stur x16, [fp, #-8]
0xffff7ab08b9c    28  ldr x3, [fp]
0xffff7ab08ba0    32  ldur x4, [x3, #-8]
0xffff7ab08ba4    36  movz x16, #0xe00000000
0xffff7ab08ba8    40  cmp x4, x16
0xffff7ab08bac    44  csel x4, fp, x3, ne
0xffff7ab08bb0    48  ldr x3, [x4, #16]
0xffff7ab08bb4    52  tbnz w3, #0, #+0xdc (addr 0xffff7ab08c90)
0xffff7ab08bb8    56  asr x5, x3, #32
0xffff7ab08bbc    60  movz w16, #0x257f
0xffff7ab08bc0    64  cmp w5, w16, lsl #3
0xffff7ab08bc4    68  b.hs #+0x17c (addr 0xffff7ab08d40)
0xffff7ab08bc8    72  cbz w5, #+0xc (addr 0xffff7ab08bd4)
0xffff7ab08bcc    76  mov x3, x5
0xffff7ab08bd0    80  b #+0xc (addr 0xffff7ab08bdc)
0xffff7ab08bd4    84  movz x3, #0x4
0xffff7ab08bd8    88  movz x5, #0x0
0xffff7ab08bdc    92  lsl x4, x3, #32
0xffff7ab08be0    96  lsl x5, x5, #32
0xffff7ab08be4   100  lsl w6, w3, #3
0xffff7ab08be8   104  add w6, w6, #0x10 (16)
0xffff7ab08bec   108  cmp w6, #0x96000 (614400)
0xffff7ab08bf0   112  b.hs #+0x158 (addr 0xffff7ab08d48)
0xffff7ab08bf4   116  add w0, w6, #0x20 (32)
0xffff7ab08bf8   120  sxtw x0, w0
0xffff7ab08bfc   124  movz x2, #0xe2c0
0xffff7ab08c00   128  movk x2, #0x9ab, lsl #16
0xffff7ab08c04   132  ldp x7, x16, [x2]
0xffff7ab08c08   136  adds x6, x7, x0
0xffff7ab08c0c   140  ccmp x6, x16, #nzCv, lo
0xffff7ab08c10   144  b.hi #+0xa8 (addr 0xffff7ab08cb8)
0xffff7ab08c14   148  str x6, [x2]
0xffff7ab08c18   152  orr x7, x7, #0x1
0xffff7ab08c1c   156  movz w0, #0x0
0xffff7ab08c20   160  stur x0, [x7, #31]
0xffff7ab08c24   164  ldur x0, [x1, #39]
0xffff7ab08c28   168  ldur x0, [x0, #39]
0xffff7ab08c2c   172  movz x16, #0x17f
0xffff7ab08c30   176  ldr x0, [x0, x16]
0xffff7ab08c34   180  stur x0, [x7, #-1]
0xffff7ab08c38   184  ldr x0, pc+208 (addr 0x0000ffff7ab08d08)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab08c3c   188  stur x0, [x7, #7]
0xffff7ab08c40   192  ldr x0, pc+208 (addr 0x0000ffff7ab08d10)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab08c44   196  stur x0, [x7, #15]
0xffff7ab08c48   200  stur x5, [x7, #23]
0xffff7ab08c4c   204  add x0, x7, #0x20 (32)
0xffff7ab08c50   208  ldr x1, pc+200 (addr 0x0000ffff7ab08d18)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab08c54   212  stur x1, [x0, #-1]
0xffff7ab08c58   216  stur x4, [x0, #7]
0xffff7ab08c5c   220  stur x0, [x7, #15]
0xffff7ab08c60   224  cmp w3, #0x0 (0)
0xffff7ab08c64   228  b.le #+0x18 (addr 0xffff7ab08c7c)
0xffff7ab08c68   232  sub w3, w3, #0x1 (1)
0xffff7ab08c6c   236  ldr x1, pc+180 (addr 0x0000ffff7ab08d20)    ;; object: 0x20d04519 <the hole>
0xffff7ab08c70   240  add x2, x0, #0xf (15)
0xffff7ab08c74   244  str x1, [x2, w3, sxtw #3]
0xffff7ab08c78   248  b #-0x18 (addr 0xffff7ab08c60)
0xffff7ab08c7c   252  mov x0, x7
0xffff7ab08c80   256  mov jssp, fp
0xffff7ab08c84   260  ldp fp, lr, [jssp], #16
0xffff7ab08c88   264  add jssp, jssp, #0x10 (16)
0xffff7ab08c8c   268  ret
0xffff7ab08c90   272  ldur x16, [x3, #-1]
0xffff7ab08c94   276  ldr x17, [x26, #120]
0xffff7ab08c98   280  cmp x16, x17
0xffff7ab08c9c   284  b.ne #+0xb4 (addr 0xffff7ab08d50)
0xffff7ab08ca0   288  ldur d29, [x3, #7]
0xffff7ab08ca4   292  fcvtzs w5, d29
0xffff7ab08ca8   296  scvtf d0, w5
0xffff7ab08cac   300  fcmp d29, d0
0xffff7ab08cb0   304  b.ne #+0xa0 (addr 0xffff7ab08d50)
0xffff7ab08cb4   308  b #-0xf8 (addr 0xffff7ab08bbc)
0xffff7ab08cb8   312  movz x7, #0x0
0xffff7ab08cbc   316  mov x16, lr
0xffff7ab08cc0   320  ldr x17, pc+104 (addr 0x0000ffff7ab08d28)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab08cc4   324  blr x17
0xffff7ab08cc8   328  lsl x0, x0, #32
0xffff7ab08ccc   332  movz x10, #0x0
0xffff7ab08cd0   336  sub csp, jssp, #0x10 (16)
0xffff7ab08cd4   340  stp x10, x0, [jssp, #-16]!
0xffff7ab08cd8   344  movz x0, #0x2
0xffff7ab08cdc   348  movz x1, #0x5b88
0xffff7ab08ce0   352  movk x1, #0xe2, lsl #16
0xffff7ab08ce4   356  ldr x16, pc+76 (addr 0x0000ffff7ab08d30)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab08ce8   360  blr x16
0xffff7ab08cec   364  str x0, [jssp, #56]
0xffff7ab08cf0   368  ldr x16, pc+72 (addr 0x0000ffff7ab08d38)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab08cf4   372  blr x16
0xffff7ab08cf8   376  b #-0xdc (addr 0xffff7ab08c1c)
0xffff7ab08cfc   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab08d00   384  d63f03e0       constant
0xffff7ab08d04   388  d503201f       constant
0xffff7ab08d08   392  20d04201       constant
0xffff7ab08d0c   396  00000000       constant
0xffff7ab08d10   400  20d04201       constant
0xffff7ab08d14   404  00000000       constant
0xffff7ab08d18   408  4ec04259       constant
0xffff7ab08d1c   412  00000000       constant
0xffff7ab08d20   416  20d04519       constant
0xffff7ab08d24   420  00000000       constant
0xffff7ab08d28   424  7ab06820       constant
0xffff7ab08d2c   428  0000ffff       constant
0xffff7ab08d30   432  7ab06260       constant
0xffff7ab08d34   436  0000ffff       constant
0xffff7ab08d38   440  7ab068e0       constant
0xffff7ab08d3c   444  0000ffff       constant
0xffff7ab08d40   448  movz x16, #0x0
0xffff7ab08d44   452  bl #+0x14 (addr 0xffff7ab08d58)
0xffff7ab08d48   456  movz x16, #0x8
0xffff7ab08d4c   460  bl #+0xc (addr 0xffff7ab08d58)
0xffff7ab08d50   464  movz x16, #0x10
0xffff7ab08d54   468  bl #+0x4 (addr 0xffff7ab08d58)
0xffff7ab08d58   472  ldr x17, pc+24 (addr 0x0000ffff7ab08d70)    ;; lazy deoptimization bailout 0
0xffff7ab08d5c   476  add x17, x17, x16
0xffff7ab08d60   480  br x17
0xffff7ab08d64   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab08d68   488  d63f03e0       constant
0xffff7ab08d6c   492  d503201f       constant
0xffff7ab08d70   496  7a906000       constant
0xffff7ab08d74   500  0000ffff       constant


Safepoints (size = 21)
0xffff7ab08cec   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab08c38  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab08c40  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab08c50  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab08c6c  embedded object  (0x20d04519 <the hole>)
0xffff7ab08cc0  code target (STUB)  (0xffff7ab06820)
0xffff7ab08ce4  code target (STUB)  (0xffff7ab06260)
0xffff7ab08cf0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab08cfc  constant pool (size 68)
0xffff7ab08d58  runtime entry
0xffff7ab08d64  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArraySingleArgumentConstructorStub
name = ArraySingleArgumentConstructorStub_FAST_HOLEY_SMI_ELEMENTS_DISABLE_ALLOCATION_SITES
compiler = crankshaft
Instructions (size = 525)
0xffff7ab08b80     0  movz x16, #0xa00000000
0xffff7ab08b84     4  sub csp, jssp, #0x10 (16)
0xffff7ab08b88     8  stp fp, lr, [jssp, #-16]!
0xffff7ab08b8c    12  mov fp, jssp
0xffff7ab08b90    16  sub csp, jssp, #0x8 (8)
0xffff7ab08b94    20  sub jssp, jssp, #0x8 (8)
0xffff7ab08b98    24  stur x16, [fp, #-8]
0xffff7ab08b9c    28  ldr x3, [fp]
0xffff7ab08ba0    32  ldur x4, [x3, #-8]
0xffff7ab08ba4    36  movz x16, #0xe00000000
0xffff7ab08ba8    40  cmp x4, x16
0xffff7ab08bac    44  csel x4, fp, x3, ne
0xffff7ab08bb0    48  ldr x3, [x4, #16]
0xffff7ab08bb4    52  tbnz w3, #0, #+0xdc (addr 0xffff7ab08c90)
0xffff7ab08bb8    56  asr x5, x3, #32
0xffff7ab08bbc    60  movz w16, #0x257f
0xffff7ab08bc0    64  cmp w5, w16, lsl #3
0xffff7ab08bc4    68  b.hs #+0x17c (addr 0xffff7ab08d40)
0xffff7ab08bc8    72  cbz w5, #+0xc (addr 0xffff7ab08bd4)
0xffff7ab08bcc    76  mov x3, x5
0xffff7ab08bd0    80  b #+0xc (addr 0xffff7ab08bdc)
0xffff7ab08bd4    84  movz x3, #0x4
0xffff7ab08bd8    88  movz x5, #0x0
0xffff7ab08bdc    92  lsl x4, x3, #32
0xffff7ab08be0    96  lsl x5, x5, #32
0xffff7ab08be4   100  lsl w6, w3, #3
0xffff7ab08be8   104  add w6, w6, #0x10 (16)
0xffff7ab08bec   108  cmp w6, #0x96000 (614400)
0xffff7ab08bf0   112  b.hs #+0x158 (addr 0xffff7ab08d48)
0xffff7ab08bf4   116  add w0, w6, #0x20 (32)
0xffff7ab08bf8   120  sxtw x0, w0
0xffff7ab08bfc   124  movz x2, #0xe2c0
0xffff7ab08c00   128  movk x2, #0x9ab, lsl #16
0xffff7ab08c04   132  ldp x7, x16, [x2]
0xffff7ab08c08   136  adds x6, x7, x0
0xffff7ab08c0c   140  ccmp x6, x16, #nzCv, lo
0xffff7ab08c10   144  b.hi #+0xa8 (addr 0xffff7ab08cb8)
0xffff7ab08c14   148  str x6, [x2]
0xffff7ab08c18   152  orr x7, x7, #0x1
0xffff7ab08c1c   156  movz w0, #0x0
0xffff7ab08c20   160  stur x0, [x7, #31]
0xffff7ab08c24   164  ldur x0, [x1, #39]
0xffff7ab08c28   168  ldur x0, [x0, #39]
0xffff7ab08c2c   172  movz x16, #0x17f
0xffff7ab08c30   176  ldr x0, [x0, x16]
0xffff7ab08c34   180  stur x0, [x7, #-1]
0xffff7ab08c38   184  ldr x0, pc+208 (addr 0x0000ffff7ab08d08)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab08c3c   188  stur x0, [x7, #7]
0xffff7ab08c40   192  ldr x0, pc+208 (addr 0x0000ffff7ab08d10)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab08c44   196  stur x0, [x7, #15]
0xffff7ab08c48   200  stur x5, [x7, #23]
0xffff7ab08c4c   204  add x0, x7, #0x20 (32)
0xffff7ab08c50   208  ldr x1, pc+200 (addr 0x0000ffff7ab08d18)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab08c54   212  stur x1, [x0, #-1]
0xffff7ab08c58   216  stur x4, [x0, #7]
0xffff7ab08c5c   220  stur x0, [x7, #15]
0xffff7ab08c60   224  cmp w3, #0x0 (0)
0xffff7ab08c64   228  b.le #+0x18 (addr 0xffff7ab08c7c)
0xffff7ab08c68   232  sub w3, w3, #0x1 (1)
0xffff7ab08c6c   236  ldr x1, pc+180 (addr 0x0000ffff7ab08d20)    ;; object: 0x20d04519 <the hole>
0xffff7ab08c70   240  add x2, x0, #0xf (15)
0xffff7ab08c74   244  str x1, [x2, w3, sxtw #3]
0xffff7ab08c78   248  b #-0x18 (addr 0xffff7ab08c60)
0xffff7ab08c7c   252  mov x0, x7
0xffff7ab08c80   256  mov jssp, fp
0xffff7ab08c84   260  ldp fp, lr, [jssp], #16
0xffff7ab08c88   264  add jssp, jssp, #0x10 (16)
0xffff7ab08c8c   268  ret
0xffff7ab08c90   272  ldur x16, [x3, #-1]
0xffff7ab08c94   276  ldr x17, [x26, #120]
0xffff7ab08c98   280  cmp x16, x17
0xffff7ab08c9c   284  b.ne #+0xb4 (addr 0xffff7ab08d50)
0xffff7ab08ca0   288  ldur d29, [x3, #7]
0xffff7ab08ca4   292  fcvtzs w5, d29
0xffff7ab08ca8   296  scvtf d0, w5
0xffff7ab08cac   300  fcmp d29, d0
0xffff7ab08cb0   304  b.ne #+0xa0 (addr 0xffff7ab08d50)
0xffff7ab08cb4   308  b #-0xf8 (addr 0xffff7ab08bbc)
0xffff7ab08cb8   312  movz x7, #0x0
0xffff7ab08cbc   316  mov x16, lr
0xffff7ab08cc0   320  ldr x17, pc+104 (addr 0x0000ffff7ab08d28)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab08cc4   324  blr x17
0xffff7ab08cc8   328  lsl x0, x0, #32
0xffff7ab08ccc   332  movz x10, #0x0
0xffff7ab08cd0   336  sub csp, jssp, #0x10 (16)
0xffff7ab08cd4   340  stp x10, x0, [jssp, #-16]!
0xffff7ab08cd8   344  movz x0, #0x2
0xffff7ab08cdc   348  movz x1, #0x5b88
0xffff7ab08ce0   352  movk x1, #0xe2, lsl #16
0xffff7ab08ce4   356  ldr x16, pc+76 (addr 0x0000ffff7ab08d30)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab08ce8   360  blr x16
0xffff7ab08cec   364  str x0, [jssp, #56]
0xffff7ab08cf0   368  ldr x16, pc+72 (addr 0x0000ffff7ab08d38)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab08cf4   372  blr x16
0xffff7ab08cf8   376  b #-0xdc (addr 0xffff7ab08c1c)
0xffff7ab08cfc   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab08d00   384  d63f03e0       constant
0xffff7ab08d04   388  d503201f       constant
0xffff7ab08d08   392  20d04201       constant
0xffff7ab08d0c   396  00000000       constant
0xffff7ab08d10   400  20d04201       constant
0xffff7ab08d14   404  00000000       constant
0xffff7ab08d18   408  4ec04259       constant
0xffff7ab08d1c   412  00000000       constant
0xffff7ab08d20   416  20d04519       constant
0xffff7ab08d24   420  00000000       constant
0xffff7ab08d28   424  7ab06820       constant
0xffff7ab08d2c   428  0000ffff       constant
0xffff7ab08d30   432  7ab06260       constant
0xffff7ab08d34   436  0000ffff       constant
0xffff7ab08d38   440  7ab068e0       constant
0xffff7ab08d3c   444  0000ffff       constant
0xffff7ab08d40   448  movz x16, #0x0
0xffff7ab08d44   452  bl #+0x14 (addr 0xffff7ab08d58)
0xffff7ab08d48   456  movz x16, #0x8
0xffff7ab08d4c   460  bl #+0xc (addr 0xffff7ab08d58)
0xffff7ab08d50   464  movz x16, #0x10
0xffff7ab08d54   468  bl #+0x4 (addr 0xffff7ab08d58)
0xffff7ab08d58   472  ldr x17, pc+24 (addr 0x0000ffff7ab08d70)    ;; lazy deoptimization bailout 0
0xffff7ab08d5c   476  add x17, x17, x16
0xffff7ab08d60   480  br x17
0xffff7ab08d64   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab08d68   488  d63f03e0       constant
0xffff7ab08d6c   492  d503201f       constant
0xffff7ab08d70   496  7a906000       constant
0xffff7ab08d74   500  0000ffff       constant


Safepoints (size = 21)
0xffff7ab08cec   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab08c38  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab08c40  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab08c50  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab08c6c  embedded object  (0x20d04519 <the hole>)
0xffff7ab08cc0  code target (STUB)  (0xffff7ab06820)
0xffff7ab08ce4  code target (STUB)  (0xffff7ab06260)
0xffff7ab08cf0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab08cfc  constant pool (size 68)
0xffff7ab08d58  runtime entry
0xffff7ab08d64  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 525)
0xffff7ab08e00     0  movz x16, #0xa00000000
0xffff7ab08e04     4  sub csp, jssp, #0x10 (16)
0xffff7ab08e08     8  stp fp, lr, [jssp, #-16]!
0xffff7ab08e0c    12  mov fp, jssp
0xffff7ab08e10    16  sub csp, jssp, #0x8 (8)
0xffff7ab08e14    20  sub jssp, jssp, #0x8 (8)
0xffff7ab08e18    24  stur x16, [fp, #-8]
0xffff7ab08e1c    28  ldr x3, [fp]
0xffff7ab08e20    32  ldur x4, [x3, #-8]
0xffff7ab08e24    36  movz x16, #0xe00000000
0xffff7ab08e28    40  cmp x4, x16
0xffff7ab08e2c    44  csel x4, fp, x3, ne
0xffff7ab08e30    48  ldr x3, [x4, #16]
0xffff7ab08e34    52  tbnz w3, #0, #+0xdc (addr 0xffff7ab08f10)
0xffff7ab08e38    56  asr x5, x3, #32
0xffff7ab08e3c    60  movz w16, #0x257f
0xffff7ab08e40    64  cmp w5, w16, lsl #3
0xffff7ab08e44    68  b.hs #+0x17c (addr 0xffff7ab08fc0)
0xffff7ab08e48    72  cbz w5, #+0xc (addr 0xffff7ab08e54)
0xffff7ab08e4c    76  mov x3, x5
0xffff7ab08e50    80  b #+0xc (addr 0xffff7ab08e5c)
0xffff7ab08e54    84  movz x3, #0x4
0xffff7ab08e58    88  movz x5, #0x0
0xffff7ab08e5c    92  lsl x4, x3, #32
0xffff7ab08e60    96  lsl x5, x5, #32
0xffff7ab08e64   100  lsl w6, w3, #3
0xffff7ab08e68   104  add w6, w6, #0x10 (16)
0xffff7ab08e6c   108  cmp w6, #0x96000 (614400)
0xffff7ab08e70   112  b.hs #+0x158 (addr 0xffff7ab08fc8)
0xffff7ab08e74   116  add w0, w6, #0x20 (32)
0xffff7ab08e78   120  sxtw x0, w0
0xffff7ab08e7c   124  movz x2, #0xe2c0
0xffff7ab08e80   128  movk x2, #0x9ab, lsl #16
0xffff7ab08e84   132  ldp x7, x16, [x2]
0xffff7ab08e88   136  adds x6, x7, x0
0xffff7ab08e8c   140  ccmp x6, x16, #nzCv, lo
0xffff7ab08e90   144  b.hi #+0xa8 (addr 0xffff7ab08f38)
0xffff7ab08e94   148  str x6, [x2]
0xffff7ab08e98   152  orr x7, x7, #0x1
0xffff7ab08e9c   156  movz w0, #0x0
0xffff7ab08ea0   160  stur x0, [x7, #31]
0xffff7ab08ea4   164  ldur x0, [x1, #39]
0xffff7ab08ea8   168  ldur x0, [x0, #39]
0xffff7ab08eac   172  movz x16, #0x197
0xffff7ab08eb0   176  ldr x0, [x0, x16]
0xffff7ab08eb4   180  stur x0, [x7, #-1]
0xffff7ab08eb8   184  ldr x0, pc+216 (addr 0x0000ffff7ab08f90)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab08ebc   188  stur x0, [x7, #7]
0xffff7ab08ec0   192  ldr x0, pc+216 (addr 0x0000ffff7ab08f98)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab08ec4   196  stur x0, [x7, #15]
0xffff7ab08ec8   200  stur x5, [x7, #23]
0xffff7ab08ecc   204  add x0, x7, #0x20 (32)
0xffff7ab08ed0   208  ldr x1, pc+208 (addr 0x0000ffff7ab08fa0)    ;; object: 0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab08ed4   212  stur x1, [x0, #-1]
0xffff7ab08ed8   216  stur x4, [x0, #7]
0xffff7ab08edc   220  stur x0, [x7, #15]
0xffff7ab08ee0   224  ldr d0, pc+168 (addr 0x0000ffff7ab08f88)
0xffff7ab08ee4   228  cmp w3, #0x0 (0)
0xffff7ab08ee8   232  b.le #+0x14 (addr 0xffff7ab08efc)
0xffff7ab08eec   236  sub w3, w3, #0x1 (1)
0xffff7ab08ef0   240  add x1, x0, #0xf (15)
0xffff7ab08ef4   244  str d0, [x1, w3, sxtw #3]
0xffff7ab08ef8   248  b #-0x14 (addr 0xffff7ab08ee4)
0xffff7ab08efc   252  mov x0, x7
0xffff7ab08f00   256  mov jssp, fp
0xffff7ab08f04   260  ldp fp, lr, [jssp], #16
0xffff7ab08f08   264  add jssp, jssp, #0x10 (16)
0xffff7ab08f0c   268  ret
0xffff7ab08f10   272  ldur x16, [x3, #-1]
0xffff7ab08f14   276  ldr x17, [x26, #120]
0xffff7ab08f18   280  cmp x16, x17
0xffff7ab08f1c   284  b.ne #+0xb4 (addr 0xffff7ab08fd0)
0xffff7ab08f20   288  ldur d29, [x3, #7]
0xffff7ab08f24   292  fcvtzs w5, d29
0xffff7ab08f28   296  scvtf d0, w5
0xffff7ab08f2c   300  fcmp d29, d0
0xffff7ab08f30   304  b.ne #+0xa0 (addr 0xffff7ab08fd0)
0xffff7ab08f34   308  b #-0xf8 (addr 0xffff7ab08e3c)
0xffff7ab08f38   312  movz x7, #0x0
0xffff7ab08f3c   316  mov x16, lr
0xffff7ab08f40   320  ldr x17, pc+104 (addr 0x0000ffff7ab08fa8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab08f44   324  blr x17
0xffff7ab08f48   328  lsl x0, x0, #32
0xffff7ab08f4c   332  movz x10, #0x100000000
0xffff7ab08f50   336  sub csp, jssp, #0x10 (16)
0xffff7ab08f54   340  stp x10, x0, [jssp, #-16]!
0xffff7ab08f58   344  movz x0, #0x2
0xffff7ab08f5c   348  movz x1, #0x5b88
0xffff7ab08f60   352  movk x1, #0xe2, lsl #16
0xffff7ab08f64   356  ldr x16, pc+76 (addr 0x0000ffff7ab08fb0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab08f68   360  blr x16
0xffff7ab08f6c   364  str x0, [jssp, #56]
0xffff7ab08f70   368  ldr x16, pc+72 (addr 0x0000ffff7ab08fb8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab08f74   372  blr x16
0xffff7ab08f78   376  b #-0xdc (addr 0xffff7ab08e9c)
0xffff7ab08f7c   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab08f80   384  d63f03e0       constant
0xffff7ab08f84   388  d503201f       constant
0xffff7ab08f88   392  fff7ffff       constant
0xffff7ab08f8c   396  fff7ffff       constant
0xffff7ab08f90   400  20d04201       constant
0xffff7ab08f94   404  00000000       constant
0xffff7ab08f98   408  20d04201       constant
0xffff7ab08f9c   412  00000000       constant
0xffff7ab08fa0   416  4ec052d9       constant
0xffff7ab08fa4   420  00000000       constant
0xffff7ab08fa8   424  7ab06820       constant
0xffff7ab08fac   428  0000ffff       constant
0xffff7ab08fb0   432  7ab06260       constant
0xffff7ab08fb4   436  0000ffff       constant
0xffff7ab08fb8   440  7ab068e0       constant
0xffff7ab08fbc   444  0000ffff       constant
0xffff7ab08fc0   448  movz x16, #0x0
0xffff7ab08fc4   452  bl #+0x14 (addr 0xffff7ab08fd8)
0xffff7ab08fc8   456  movz x16, #0x8
0xffff7ab08fcc   460  bl #+0xc (addr 0xffff7ab08fd8)
0xffff7ab08fd0   464  movz x16, #0x10
0xffff7ab08fd4   468  bl #+0x4 (addr 0xffff7ab08fd8)
0xffff7ab08fd8   472  ldr x17, pc+24 (addr 0x0000ffff7ab08ff0)    ;; lazy deoptimization bailout 0
0xffff7ab08fdc   476  add x17, x17, x16
0xffff7ab08fe0   480  br x17
0xffff7ab08fe4   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab08fe8   488  d63f03e0       constant
0xffff7ab08fec   492  d503201f       constant
0xffff7ab08ff0   496  7a906000       constant
0xffff7ab08ff4   500  0000ffff       constant


Safepoints (size = 21)
0xffff7ab08f6c   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab08eb8  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab08ec0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab08ed0  embedded object  (0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab08f40  code target (STUB)  (0xffff7ab06820)
0xffff7ab08f64  code target (STUB)  (0xffff7ab06260)
0xffff7ab08f70  code target (STUB)  (0xffff7ab068e0)
0xffff7ab08f7c  constant pool (size 68)
0xffff7ab08fd8  runtime entry
0xffff7ab08fe4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArraySingleArgumentConstructorStub
name = ArraySingleArgumentConstructorStub_FAST_DOUBLE_ELEMENTS
compiler = crankshaft
Instructions (size = 525)
0xffff7ab08e00     0  movz x16, #0xa00000000
0xffff7ab08e04     4  sub csp, jssp, #0x10 (16)
0xffff7ab08e08     8  stp fp, lr, [jssp, #-16]!
0xffff7ab08e0c    12  mov fp, jssp
0xffff7ab08e10    16  sub csp, jssp, #0x8 (8)
0xffff7ab08e14    20  sub jssp, jssp, #0x8 (8)
0xffff7ab08e18    24  stur x16, [fp, #-8]
0xffff7ab08e1c    28  ldr x3, [fp]
0xffff7ab08e20    32  ldur x4, [x3, #-8]
0xffff7ab08e24    36  movz x16, #0xe00000000
0xffff7ab08e28    40  cmp x4, x16
0xffff7ab08e2c    44  csel x4, fp, x3, ne
0xffff7ab08e30    48  ldr x3, [x4, #16]
0xffff7ab08e34    52  tbnz w3, #0, #+0xdc (addr 0xffff7ab08f10)
0xffff7ab08e38    56  asr x5, x3, #32
0xffff7ab08e3c    60  movz w16, #0x257f
0xffff7ab08e40    64  cmp w5, w16, lsl #3
0xffff7ab08e44    68  b.hs #+0x17c (addr 0xffff7ab08fc0)
0xffff7ab08e48    72  cbz w5, #+0xc (addr 0xffff7ab08e54)
0xffff7ab08e4c    76  mov x3, x5
0xffff7ab08e50    80  b #+0xc (addr 0xffff7ab08e5c)
0xffff7ab08e54    84  movz x3, #0x4
0xffff7ab08e58    88  movz x5, #0x0
0xffff7ab08e5c    92  lsl x4, x3, #32
0xffff7ab08e60    96  lsl x5, x5, #32
0xffff7ab08e64   100  lsl w6, w3, #3
0xffff7ab08e68   104  add w6, w6, #0x10 (16)
0xffff7ab08e6c   108  cmp w6, #0x96000 (614400)
0xffff7ab08e70   112  b.hs #+0x158 (addr 0xffff7ab08fc8)
0xffff7ab08e74   116  add w0, w6, #0x20 (32)
0xffff7ab08e78   120  sxtw x0, w0
0xffff7ab08e7c   124  movz x2, #0xe2c0
0xffff7ab08e80   128  movk x2, #0x9ab, lsl #16
0xffff7ab08e84   132  ldp x7, x16, [x2]
0xffff7ab08e88   136  adds x6, x7, x0
0xffff7ab08e8c   140  ccmp x6, x16, #nzCv, lo
0xffff7ab08e90   144  b.hi #+0xa8 (addr 0xffff7ab08f38)
0xffff7ab08e94   148  str x6, [x2]
0xffff7ab08e98   152  orr x7, x7, #0x1
0xffff7ab08e9c   156  movz w0, #0x0
0xffff7ab08ea0   160  stur x0, [x7, #31]
0xffff7ab08ea4   164  ldur x0, [x1, #39]
0xffff7ab08ea8   168  ldur x0, [x0, #39]
0xffff7ab08eac   172  movz x16, #0x197
0xffff7ab08eb0   176  ldr x0, [x0, x16]
0xffff7ab08eb4   180  stur x0, [x7, #-1]
0xffff7ab08eb8   184  ldr x0, pc+216 (addr 0x0000ffff7ab08f90)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab08ebc   188  stur x0, [x7, #7]
0xffff7ab08ec0   192  ldr x0, pc+216 (addr 0x0000ffff7ab08f98)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab08ec4   196  stur x0, [x7, #15]
0xffff7ab08ec8   200  stur x5, [x7, #23]
0xffff7ab08ecc   204  add x0, x7, #0x20 (32)
0xffff7ab08ed0   208  ldr x1, pc+208 (addr 0x0000ffff7ab08fa0)    ;; object: 0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab08ed4   212  stur x1, [x0, #-1]
0xffff7ab08ed8   216  stur x4, [x0, #7]
0xffff7ab08edc   220  stur x0, [x7, #15]
0xffff7ab08ee0   224  ldr d0, pc+168 (addr 0x0000ffff7ab08f88)
0xffff7ab08ee4   228  cmp w3, #0x0 (0)
0xffff7ab08ee8   232  b.le #+0x14 (addr 0xffff7ab08efc)
0xffff7ab08eec   236  sub w3, w3, #0x1 (1)
0xffff7ab08ef0   240  add x1, x0, #0xf (15)
0xffff7ab08ef4   244  str d0, [x1, w3, sxtw #3]
0xffff7ab08ef8   248  b #-0x14 (addr 0xffff7ab08ee4)
0xffff7ab08efc   252  mov x0, x7
0xffff7ab08f00   256  mov jssp, fp
0xffff7ab08f04   260  ldp fp, lr, [jssp], #16
0xffff7ab08f08   264  add jssp, jssp, #0x10 (16)
0xffff7ab08f0c   268  ret
0xffff7ab08f10   272  ldur x16, [x3, #-1]
0xffff7ab08f14   276  ldr x17, [x26, #120]
0xffff7ab08f18   280  cmp x16, x17
0xffff7ab08f1c   284  b.ne #+0xb4 (addr 0xffff7ab08fd0)
0xffff7ab08f20   288  ldur d29, [x3, #7]
0xffff7ab08f24   292  fcvtzs w5, d29
0xffff7ab08f28   296  scvtf d0, w5
0xffff7ab08f2c   300  fcmp d29, d0
0xffff7ab08f30   304  b.ne #+0xa0 (addr 0xffff7ab08fd0)
0xffff7ab08f34   308  b #-0xf8 (addr 0xffff7ab08e3c)
0xffff7ab08f38   312  movz x7, #0x0
0xffff7ab08f3c   316  mov x16, lr
0xffff7ab08f40   320  ldr x17, pc+104 (addr 0x0000ffff7ab08fa8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab08f44   324  blr x17
0xffff7ab08f48   328  lsl x0, x0, #32
0xffff7ab08f4c   332  movz x10, #0x100000000
0xffff7ab08f50   336  sub csp, jssp, #0x10 (16)
0xffff7ab08f54   340  stp x10, x0, [jssp, #-16]!
0xffff7ab08f58   344  movz x0, #0x2
0xffff7ab08f5c   348  movz x1, #0x5b88
0xffff7ab08f60   352  movk x1, #0xe2, lsl #16
0xffff7ab08f64   356  ldr x16, pc+76 (addr 0x0000ffff7ab08fb0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab08f68   360  blr x16
0xffff7ab08f6c   364  str x0, [jssp, #56]
0xffff7ab08f70   368  ldr x16, pc+72 (addr 0x0000ffff7ab08fb8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab08f74   372  blr x16
0xffff7ab08f78   376  b #-0xdc (addr 0xffff7ab08e9c)
0xffff7ab08f7c   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab08f80   384  d63f03e0       constant
0xffff7ab08f84   388  d503201f       constant
0xffff7ab08f88   392  fff7ffff       constant
0xffff7ab08f8c   396  fff7ffff       constant
0xffff7ab08f90   400  20d04201       constant
0xffff7ab08f94   404  00000000       constant
0xffff7ab08f98   408  20d04201       constant
0xffff7ab08f9c   412  00000000       constant
0xffff7ab08fa0   416  4ec052d9       constant
0xffff7ab08fa4   420  00000000       constant
0xffff7ab08fa8   424  7ab06820       constant
0xffff7ab08fac   428  0000ffff       constant
0xffff7ab08fb0   432  7ab06260       constant
0xffff7ab08fb4   436  0000ffff       constant
0xffff7ab08fb8   440  7ab068e0       constant
0xffff7ab08fbc   444  0000ffff       constant
0xffff7ab08fc0   448  movz x16, #0x0
0xffff7ab08fc4   452  bl #+0x14 (addr 0xffff7ab08fd8)
0xffff7ab08fc8   456  movz x16, #0x8
0xffff7ab08fcc   460  bl #+0xc (addr 0xffff7ab08fd8)
0xffff7ab08fd0   464  movz x16, #0x10
0xffff7ab08fd4   468  bl #+0x4 (addr 0xffff7ab08fd8)
0xffff7ab08fd8   472  ldr x17, pc+24 (addr 0x0000ffff7ab08ff0)    ;; lazy deoptimization bailout 0
0xffff7ab08fdc   476  add x17, x17, x16
0xffff7ab08fe0   480  br x17
0xffff7ab08fe4   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab08fe8   488  d63f03e0       constant
0xffff7ab08fec   492  d503201f       constant
0xffff7ab08ff0   496  7a906000       constant
0xffff7ab08ff4   500  0000ffff       constant


Safepoints (size = 21)
0xffff7ab08f6c   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab08eb8  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab08ec0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab08ed0  embedded object  (0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab08f40  code target (STUB)  (0xffff7ab06820)
0xffff7ab08f64  code target (STUB)  (0xffff7ab06260)
0xffff7ab08f70  code target (STUB)  (0xffff7ab068e0)
0xffff7ab08f7c  constant pool (size 68)
0xffff7ab08fd8  runtime entry
0xffff7ab08fe4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 525)
0xffff7ab09080     0  movz x16, #0xa00000000
0xffff7ab09084     4  sub csp, jssp, #0x10 (16)
0xffff7ab09088     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0908c    12  mov fp, jssp
0xffff7ab09090    16  sub csp, jssp, #0x8 (8)
0xffff7ab09094    20  sub jssp, jssp, #0x8 (8)
0xffff7ab09098    24  stur x16, [fp, #-8]
0xffff7ab0909c    28  ldr x3, [fp]
0xffff7ab090a0    32  ldur x4, [x3, #-8]
0xffff7ab090a4    36  movz x16, #0xe00000000
0xffff7ab090a8    40  cmp x4, x16
0xffff7ab090ac    44  csel x4, fp, x3, ne
0xffff7ab090b0    48  ldr x3, [x4, #16]
0xffff7ab090b4    52  tbnz w3, #0, #+0xdc (addr 0xffff7ab09190)
0xffff7ab090b8    56  asr x5, x3, #32
0xffff7ab090bc    60  movz w16, #0x257f
0xffff7ab090c0    64  cmp w5, w16, lsl #3
0xffff7ab090c4    68  b.hs #+0x17c (addr 0xffff7ab09240)
0xffff7ab090c8    72  cbz w5, #+0xc (addr 0xffff7ab090d4)
0xffff7ab090cc    76  mov x3, x5
0xffff7ab090d0    80  b #+0xc (addr 0xffff7ab090dc)
0xffff7ab090d4    84  movz x3, #0x4
0xffff7ab090d8    88  movz x5, #0x0
0xffff7ab090dc    92  lsl x4, x3, #32
0xffff7ab090e0    96  lsl x5, x5, #32
0xffff7ab090e4   100  lsl w6, w3, #3
0xffff7ab090e8   104  add w6, w6, #0x10 (16)
0xffff7ab090ec   108  cmp w6, #0x96000 (614400)
0xffff7ab090f0   112  b.hs #+0x158 (addr 0xffff7ab09248)
0xffff7ab090f4   116  add w0, w6, #0x20 (32)
0xffff7ab090f8   120  sxtw x0, w0
0xffff7ab090fc   124  movz x2, #0xe2c0
0xffff7ab09100   128  movk x2, #0x9ab, lsl #16
0xffff7ab09104   132  ldp x7, x16, [x2]
0xffff7ab09108   136  adds x6, x7, x0
0xffff7ab0910c   140  ccmp x6, x16, #nzCv, lo
0xffff7ab09110   144  b.hi #+0xa8 (addr 0xffff7ab091b8)
0xffff7ab09114   148  str x6, [x2]
0xffff7ab09118   152  orr x7, x7, #0x1
0xffff7ab0911c   156  movz w0, #0x0
0xffff7ab09120   160  stur x0, [x7, #31]
0xffff7ab09124   164  ldur x0, [x1, #39]
0xffff7ab09128   168  ldur x0, [x0, #39]
0xffff7ab0912c   172  movz x16, #0x19f
0xffff7ab09130   176  ldr x0, [x0, x16]
0xffff7ab09134   180  stur x0, [x7, #-1]
0xffff7ab09138   184  ldr x0, pc+216 (addr 0x0000ffff7ab09210)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0913c   188  stur x0, [x7, #7]
0xffff7ab09140   192  ldr x0, pc+216 (addr 0x0000ffff7ab09218)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab09144   196  stur x0, [x7, #15]
0xffff7ab09148   200  stur x5, [x7, #23]
0xffff7ab0914c   204  add x0, x7, #0x20 (32)
0xffff7ab09150   208  ldr x1, pc+208 (addr 0x0000ffff7ab09220)    ;; object: 0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab09154   212  stur x1, [x0, #-1]
0xffff7ab09158   216  stur x4, [x0, #7]
0xffff7ab0915c   220  stur x0, [x7, #15]
0xffff7ab09160   224  ldr d0, pc+168 (addr 0x0000ffff7ab09208)
0xffff7ab09164   228  cmp w3, #0x0 (0)
0xffff7ab09168   232  b.le #+0x14 (addr 0xffff7ab0917c)
0xffff7ab0916c   236  sub w3, w3, #0x1 (1)
0xffff7ab09170   240  add x1, x0, #0xf (15)
0xffff7ab09174   244  str d0, [x1, w3, sxtw #3]
0xffff7ab09178   248  b #-0x14 (addr 0xffff7ab09164)
0xffff7ab0917c   252  mov x0, x7
0xffff7ab09180   256  mov jssp, fp
0xffff7ab09184   260  ldp fp, lr, [jssp], #16
0xffff7ab09188   264  add jssp, jssp, #0x10 (16)
0xffff7ab0918c   268  ret
0xffff7ab09190   272  ldur x16, [x3, #-1]
0xffff7ab09194   276  ldr x17, [x26, #120]
0xffff7ab09198   280  cmp x16, x17
0xffff7ab0919c   284  b.ne #+0xb4 (addr 0xffff7ab09250)
0xffff7ab091a0   288  ldur d29, [x3, #7]
0xffff7ab091a4   292  fcvtzs w5, d29
0xffff7ab091a8   296  scvtf d0, w5
0xffff7ab091ac   300  fcmp d29, d0
0xffff7ab091b0   304  b.ne #+0xa0 (addr 0xffff7ab09250)
0xffff7ab091b4   308  b #-0xf8 (addr 0xffff7ab090bc)
0xffff7ab091b8   312  movz x7, #0x0
0xffff7ab091bc   316  mov x16, lr
0xffff7ab091c0   320  ldr x17, pc+104 (addr 0x0000ffff7ab09228)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab091c4   324  blr x17
0xffff7ab091c8   328  lsl x0, x0, #32
0xffff7ab091cc   332  movz x10, #0x100000000
0xffff7ab091d0   336  sub csp, jssp, #0x10 (16)
0xffff7ab091d4   340  stp x10, x0, [jssp, #-16]!
0xffff7ab091d8   344  movz x0, #0x2
0xffff7ab091dc   348  movz x1, #0x5b88
0xffff7ab091e0   352  movk x1, #0xe2, lsl #16
0xffff7ab091e4   356  ldr x16, pc+76 (addr 0x0000ffff7ab09230)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab091e8   360  blr x16
0xffff7ab091ec   364  str x0, [jssp, #56]
0xffff7ab091f0   368  ldr x16, pc+72 (addr 0x0000ffff7ab09238)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab091f4   372  blr x16
0xffff7ab091f8   376  b #-0xdc (addr 0xffff7ab0911c)
0xffff7ab091fc   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab09200   384  d63f03e0       constant
0xffff7ab09204   388  d503201f       constant
0xffff7ab09208   392  fff7ffff       constant
0xffff7ab0920c   396  fff7ffff       constant
0xffff7ab09210   400  20d04201       constant
0xffff7ab09214   404  00000000       constant
0xffff7ab09218   408  20d04201       constant
0xffff7ab0921c   412  00000000       constant
0xffff7ab09220   416  4ec052d9       constant
0xffff7ab09224   420  00000000       constant
0xffff7ab09228   424  7ab06820       constant
0xffff7ab0922c   428  0000ffff       constant
0xffff7ab09230   432  7ab06260       constant
0xffff7ab09234   436  0000ffff       constant
0xffff7ab09238   440  7ab068e0       constant
0xffff7ab0923c   444  0000ffff       constant
0xffff7ab09240   448  movz x16, #0x0
0xffff7ab09244   452  bl #+0x14 (addr 0xffff7ab09258)
0xffff7ab09248   456  movz x16, #0x8
0xffff7ab0924c   460  bl #+0xc (addr 0xffff7ab09258)
0xffff7ab09250   464  movz x16, #0x10
0xffff7ab09254   468  bl #+0x4 (addr 0xffff7ab09258)
0xffff7ab09258   472  ldr x17, pc+24 (addr 0x0000ffff7ab09270)    ;; lazy deoptimization bailout 0
0xffff7ab0925c   476  add x17, x17, x16
0xffff7ab09260   480  br x17
0xffff7ab09264   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab09268   488  d63f03e0       constant
0xffff7ab0926c   492  d503201f       constant
0xffff7ab09270   496  7a906000       constant
0xffff7ab09274   500  0000ffff       constant


Safepoints (size = 21)
0xffff7ab091ec   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab09138  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab09140  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab09150  embedded object  (0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab091c0  code target (STUB)  (0xffff7ab06820)
0xffff7ab091e4  code target (STUB)  (0xffff7ab06260)
0xffff7ab091f0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab091fc  constant pool (size 68)
0xffff7ab09258  runtime entry
0xffff7ab09264  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArraySingleArgumentConstructorStub
name = ArraySingleArgumentConstructorStub_FAST_HOLEY_DOUBLE_ELEMENTS
compiler = crankshaft
Instructions (size = 525)
0xffff7ab09080     0  movz x16, #0xa00000000
0xffff7ab09084     4  sub csp, jssp, #0x10 (16)
0xffff7ab09088     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0908c    12  mov fp, jssp
0xffff7ab09090    16  sub csp, jssp, #0x8 (8)
0xffff7ab09094    20  sub jssp, jssp, #0x8 (8)
0xffff7ab09098    24  stur x16, [fp, #-8]
0xffff7ab0909c    28  ldr x3, [fp]
0xffff7ab090a0    32  ldur x4, [x3, #-8]
0xffff7ab090a4    36  movz x16, #0xe00000000
0xffff7ab090a8    40  cmp x4, x16
0xffff7ab090ac    44  csel x4, fp, x3, ne
0xffff7ab090b0    48  ldr x3, [x4, #16]
0xffff7ab090b4    52  tbnz w3, #0, #+0xdc (addr 0xffff7ab09190)
0xffff7ab090b8    56  asr x5, x3, #32
0xffff7ab090bc    60  movz w16, #0x257f
0xffff7ab090c0    64  cmp w5, w16, lsl #3
0xffff7ab090c4    68  b.hs #+0x17c (addr 0xffff7ab09240)
0xffff7ab090c8    72  cbz w5, #+0xc (addr 0xffff7ab090d4)
0xffff7ab090cc    76  mov x3, x5
0xffff7ab090d0    80  b #+0xc (addr 0xffff7ab090dc)
0xffff7ab090d4    84  movz x3, #0x4
0xffff7ab090d8    88  movz x5, #0x0
0xffff7ab090dc    92  lsl x4, x3, #32
0xffff7ab090e0    96  lsl x5, x5, #32
0xffff7ab090e4   100  lsl w6, w3, #3
0xffff7ab090e8   104  add w6, w6, #0x10 (16)
0xffff7ab090ec   108  cmp w6, #0x96000 (614400)
0xffff7ab090f0   112  b.hs #+0x158 (addr 0xffff7ab09248)
0xffff7ab090f4   116  add w0, w6, #0x20 (32)
0xffff7ab090f8   120  sxtw x0, w0
0xffff7ab090fc   124  movz x2, #0xe2c0
0xffff7ab09100   128  movk x2, #0x9ab, lsl #16
0xffff7ab09104   132  ldp x7, x16, [x2]
0xffff7ab09108   136  adds x6, x7, x0
0xffff7ab0910c   140  ccmp x6, x16, #nzCv, lo
0xffff7ab09110   144  b.hi #+0xa8 (addr 0xffff7ab091b8)
0xffff7ab09114   148  str x6, [x2]
0xffff7ab09118   152  orr x7, x7, #0x1
0xffff7ab0911c   156  movz w0, #0x0
0xffff7ab09120   160  stur x0, [x7, #31]
0xffff7ab09124   164  ldur x0, [x1, #39]
0xffff7ab09128   168  ldur x0, [x0, #39]
0xffff7ab0912c   172  movz x16, #0x19f
0xffff7ab09130   176  ldr x0, [x0, x16]
0xffff7ab09134   180  stur x0, [x7, #-1]
0xffff7ab09138   184  ldr x0, pc+216 (addr 0x0000ffff7ab09210)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0913c   188  stur x0, [x7, #7]
0xffff7ab09140   192  ldr x0, pc+216 (addr 0x0000ffff7ab09218)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab09144   196  stur x0, [x7, #15]
0xffff7ab09148   200  stur x5, [x7, #23]
0xffff7ab0914c   204  add x0, x7, #0x20 (32)
0xffff7ab09150   208  ldr x1, pc+208 (addr 0x0000ffff7ab09220)    ;; object: 0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab09154   212  stur x1, [x0, #-1]
0xffff7ab09158   216  stur x4, [x0, #7]
0xffff7ab0915c   220  stur x0, [x7, #15]
0xffff7ab09160   224  ldr d0, pc+168 (addr 0x0000ffff7ab09208)
0xffff7ab09164   228  cmp w3, #0x0 (0)
0xffff7ab09168   232  b.le #+0x14 (addr 0xffff7ab0917c)
0xffff7ab0916c   236  sub w3, w3, #0x1 (1)
0xffff7ab09170   240  add x1, x0, #0xf (15)
0xffff7ab09174   244  str d0, [x1, w3, sxtw #3]
0xffff7ab09178   248  b #-0x14 (addr 0xffff7ab09164)
0xffff7ab0917c   252  mov x0, x7
0xffff7ab09180   256  mov jssp, fp
0xffff7ab09184   260  ldp fp, lr, [jssp], #16
0xffff7ab09188   264  add jssp, jssp, #0x10 (16)
0xffff7ab0918c   268  ret
0xffff7ab09190   272  ldur x16, [x3, #-1]
0xffff7ab09194   276  ldr x17, [x26, #120]
0xffff7ab09198   280  cmp x16, x17
0xffff7ab0919c   284  b.ne #+0xb4 (addr 0xffff7ab09250)
0xffff7ab091a0   288  ldur d29, [x3, #7]
0xffff7ab091a4   292  fcvtzs w5, d29
0xffff7ab091a8   296  scvtf d0, w5
0xffff7ab091ac   300  fcmp d29, d0
0xffff7ab091b0   304  b.ne #+0xa0 (addr 0xffff7ab09250)
0xffff7ab091b4   308  b #-0xf8 (addr 0xffff7ab090bc)
0xffff7ab091b8   312  movz x7, #0x0
0xffff7ab091bc   316  mov x16, lr
0xffff7ab091c0   320  ldr x17, pc+104 (addr 0x0000ffff7ab09228)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab091c4   324  blr x17
0xffff7ab091c8   328  lsl x0, x0, #32
0xffff7ab091cc   332  movz x10, #0x100000000
0xffff7ab091d0   336  sub csp, jssp, #0x10 (16)
0xffff7ab091d4   340  stp x10, x0, [jssp, #-16]!
0xffff7ab091d8   344  movz x0, #0x2
0xffff7ab091dc   348  movz x1, #0x5b88
0xffff7ab091e0   352  movk x1, #0xe2, lsl #16
0xffff7ab091e4   356  ldr x16, pc+76 (addr 0x0000ffff7ab09230)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab091e8   360  blr x16
0xffff7ab091ec   364  str x0, [jssp, #56]
0xffff7ab091f0   368  ldr x16, pc+72 (addr 0x0000ffff7ab09238)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab091f4   372  blr x16
0xffff7ab091f8   376  b #-0xdc (addr 0xffff7ab0911c)
0xffff7ab091fc   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab09200   384  d63f03e0       constant
0xffff7ab09204   388  d503201f       constant
0xffff7ab09208   392  fff7ffff       constant
0xffff7ab0920c   396  fff7ffff       constant
0xffff7ab09210   400  20d04201       constant
0xffff7ab09214   404  00000000       constant
0xffff7ab09218   408  20d04201       constant
0xffff7ab0921c   412  00000000       constant
0xffff7ab09220   416  4ec052d9       constant
0xffff7ab09224   420  00000000       constant
0xffff7ab09228   424  7ab06820       constant
0xffff7ab0922c   428  0000ffff       constant
0xffff7ab09230   432  7ab06260       constant
0xffff7ab09234   436  0000ffff       constant
0xffff7ab09238   440  7ab068e0       constant
0xffff7ab0923c   444  0000ffff       constant
0xffff7ab09240   448  movz x16, #0x0
0xffff7ab09244   452  bl #+0x14 (addr 0xffff7ab09258)
0xffff7ab09248   456  movz x16, #0x8
0xffff7ab0924c   460  bl #+0xc (addr 0xffff7ab09258)
0xffff7ab09250   464  movz x16, #0x10
0xffff7ab09254   468  bl #+0x4 (addr 0xffff7ab09258)
0xffff7ab09258   472  ldr x17, pc+24 (addr 0x0000ffff7ab09270)    ;; lazy deoptimization bailout 0
0xffff7ab0925c   476  add x17, x17, x16
0xffff7ab09260   480  br x17
0xffff7ab09264   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab09268   488  d63f03e0       constant
0xffff7ab0926c   492  d503201f       constant
0xffff7ab09270   496  7a906000       constant
0xffff7ab09274   500  0000ffff       constant


Safepoints (size = 21)
0xffff7ab091ec   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab09138  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab09140  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab09150  embedded object  (0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab091c0  code target (STUB)  (0xffff7ab06820)
0xffff7ab091e4  code target (STUB)  (0xffff7ab06260)
0xffff7ab091f0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab091fc  constant pool (size 68)
0xffff7ab09258  runtime entry
0xffff7ab09264  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 525)
0xffff7ab09300     0  movz x16, #0xa00000000
0xffff7ab09304     4  sub csp, jssp, #0x10 (16)
0xffff7ab09308     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0930c    12  mov fp, jssp
0xffff7ab09310    16  sub csp, jssp, #0x8 (8)
0xffff7ab09314    20  sub jssp, jssp, #0x8 (8)
0xffff7ab09318    24  stur x16, [fp, #-8]
0xffff7ab0931c    28  ldr x3, [fp]
0xffff7ab09320    32  ldur x4, [x3, #-8]
0xffff7ab09324    36  movz x16, #0xe00000000
0xffff7ab09328    40  cmp x4, x16
0xffff7ab0932c    44  csel x4, fp, x3, ne
0xffff7ab09330    48  ldr x3, [x4, #16]
0xffff7ab09334    52  tbnz w3, #0, #+0xdc (addr 0xffff7ab09410)
0xffff7ab09338    56  asr x5, x3, #32
0xffff7ab0933c    60  movz w16, #0x257f
0xffff7ab09340    64  cmp w5, w16, lsl #3
0xffff7ab09344    68  b.hs #+0x17c (addr 0xffff7ab094c0)
0xffff7ab09348    72  cbz w5, #+0xc (addr 0xffff7ab09354)
0xffff7ab0934c    76  mov x3, x5
0xffff7ab09350    80  b #+0xc (addr 0xffff7ab0935c)
0xffff7ab09354    84  movz x3, #0x4
0xffff7ab09358    88  movz x5, #0x0
0xffff7ab0935c    92  lsl x4, x3, #32
0xffff7ab09360    96  lsl x5, x5, #32
0xffff7ab09364   100  lsl w6, w3, #3
0xffff7ab09368   104  add w6, w6, #0x10 (16)
0xffff7ab0936c   108  cmp w6, #0x96000 (614400)
0xffff7ab09370   112  b.hs #+0x158 (addr 0xffff7ab094c8)
0xffff7ab09374   116  add w0, w6, #0x20 (32)
0xffff7ab09378   120  sxtw x0, w0
0xffff7ab0937c   124  movz x2, #0xe2c0
0xffff7ab09380   128  movk x2, #0x9ab, lsl #16
0xffff7ab09384   132  ldp x7, x16, [x2]
0xffff7ab09388   136  adds x6, x7, x0
0xffff7ab0938c   140  ccmp x6, x16, #nzCv, lo
0xffff7ab09390   144  b.hi #+0xa8 (addr 0xffff7ab09438)
0xffff7ab09394   148  str x6, [x2]
0xffff7ab09398   152  orr x7, x7, #0x1
0xffff7ab0939c   156  movz w0, #0x0
0xffff7ab093a0   160  stur x0, [x7, #31]
0xffff7ab093a4   164  ldur x0, [x1, #39]
0xffff7ab093a8   168  ldur x0, [x0, #39]
0xffff7ab093ac   172  movz x16, #0x187
0xffff7ab093b0   176  ldr x0, [x0, x16]
0xffff7ab093b4   180  stur x0, [x7, #-1]
0xffff7ab093b8   184  ldr x0, pc+208 (addr 0x0000ffff7ab09488)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab093bc   188  stur x0, [x7, #7]
0xffff7ab093c0   192  ldr x0, pc+208 (addr 0x0000ffff7ab09490)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab093c4   196  stur x0, [x7, #15]
0xffff7ab093c8   200  stur x5, [x7, #23]
0xffff7ab093cc   204  add x0, x7, #0x20 (32)
0xffff7ab093d0   208  ldr x1, pc+200 (addr 0x0000ffff7ab09498)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab093d4   212  stur x1, [x0, #-1]
0xffff7ab093d8   216  stur x4, [x0, #7]
0xffff7ab093dc   220  stur x0, [x7, #15]
0xffff7ab093e0   224  cmp w3, #0x0 (0)
0xffff7ab093e4   228  b.le #+0x18 (addr 0xffff7ab093fc)
0xffff7ab093e8   232  sub w3, w3, #0x1 (1)
0xffff7ab093ec   236  ldr x1, pc+180 (addr 0x0000ffff7ab094a0)    ;; object: 0x20d04519 <the hole>
0xffff7ab093f0   240  add x2, x0, #0xf (15)
0xffff7ab093f4   244  str x1, [x2, w3, sxtw #3]
0xffff7ab093f8   248  b #-0x18 (addr 0xffff7ab093e0)
0xffff7ab093fc   252  mov x0, x7
0xffff7ab09400   256  mov jssp, fp
0xffff7ab09404   260  ldp fp, lr, [jssp], #16
0xffff7ab09408   264  add jssp, jssp, #0x10 (16)
0xffff7ab0940c   268  ret
0xffff7ab09410   272  ldur x16, [x3, #-1]
0xffff7ab09414   276  ldr x17, [x26, #120]
0xffff7ab09418   280  cmp x16, x17
0xffff7ab0941c   284  b.ne #+0xb4 (addr 0xffff7ab094d0)
0xffff7ab09420   288  ldur d29, [x3, #7]
0xffff7ab09424   292  fcvtzs w5, d29
0xffff7ab09428   296  scvtf d0, w5
0xffff7ab0942c   300  fcmp d29, d0
0xffff7ab09430   304  b.ne #+0xa0 (addr 0xffff7ab094d0)
0xffff7ab09434   308  b #-0xf8 (addr 0xffff7ab0933c)
0xffff7ab09438   312  movz x7, #0x0
0xffff7ab0943c   316  mov x16, lr
0xffff7ab09440   320  ldr x17, pc+104 (addr 0x0000ffff7ab094a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab09444   324  blr x17
0xffff7ab09448   328  lsl x0, x0, #32
0xffff7ab0944c   332  movz x10, #0x0
0xffff7ab09450   336  sub csp, jssp, #0x10 (16)
0xffff7ab09454   340  stp x10, x0, [jssp, #-16]!
0xffff7ab09458   344  movz x0, #0x2
0xffff7ab0945c   348  movz x1, #0x5b88
0xffff7ab09460   352  movk x1, #0xe2, lsl #16
0xffff7ab09464   356  ldr x16, pc+76 (addr 0x0000ffff7ab094b0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab09468   360  blr x16
0xffff7ab0946c   364  str x0, [jssp, #56]
0xffff7ab09470   368  ldr x16, pc+72 (addr 0x0000ffff7ab094b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab09474   372  blr x16
0xffff7ab09478   376  b #-0xdc (addr 0xffff7ab0939c)
0xffff7ab0947c   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab09480   384  d63f03e0       constant
0xffff7ab09484   388  d503201f       constant
0xffff7ab09488   392  20d04201       constant
0xffff7ab0948c   396  00000000       constant
0xffff7ab09490   400  20d04201       constant
0xffff7ab09494   404  00000000       constant
0xffff7ab09498   408  4ec04259       constant
0xffff7ab0949c   412  00000000       constant
0xffff7ab094a0   416  20d04519       constant
0xffff7ab094a4   420  00000000       constant
0xffff7ab094a8   424  7ab06820       constant
0xffff7ab094ac   428  0000ffff       constant
0xffff7ab094b0   432  7ab06260       constant
0xffff7ab094b4   436  0000ffff       constant
0xffff7ab094b8   440  7ab068e0       constant
0xffff7ab094bc   444  0000ffff       constant
0xffff7ab094c0   448  movz x16, #0x0
0xffff7ab094c4   452  bl #+0x14 (addr 0xffff7ab094d8)
0xffff7ab094c8   456  movz x16, #0x8
0xffff7ab094cc   460  bl #+0xc (addr 0xffff7ab094d8)
0xffff7ab094d0   464  movz x16, #0x10
0xffff7ab094d4   468  bl #+0x4 (addr 0xffff7ab094d8)
0xffff7ab094d8   472  ldr x17, pc+24 (addr 0x0000ffff7ab094f0)    ;; lazy deoptimization bailout 0
0xffff7ab094dc   476  add x17, x17, x16
0xffff7ab094e0   480  br x17
0xffff7ab094e4   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab094e8   488  d63f03e0       constant
0xffff7ab094ec   492  d503201f       constant
0xffff7ab094f0   496  7a906000       constant
0xffff7ab094f4   500  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0946c   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab093b8  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab093c0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab093d0  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab093ec  embedded object  (0x20d04519 <the hole>)
0xffff7ab09440  code target (STUB)  (0xffff7ab06820)
0xffff7ab09464  code target (STUB)  (0xffff7ab06260)
0xffff7ab09470  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0947c  constant pool (size 68)
0xffff7ab094d8  runtime entry
0xffff7ab094e4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArraySingleArgumentConstructorStub
name = ArraySingleArgumentConstructorStub_FAST_ELEMENTS
compiler = crankshaft
Instructions (size = 525)
0xffff7ab09300     0  movz x16, #0xa00000000
0xffff7ab09304     4  sub csp, jssp, #0x10 (16)
0xffff7ab09308     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0930c    12  mov fp, jssp
0xffff7ab09310    16  sub csp, jssp, #0x8 (8)
0xffff7ab09314    20  sub jssp, jssp, #0x8 (8)
0xffff7ab09318    24  stur x16, [fp, #-8]
0xffff7ab0931c    28  ldr x3, [fp]
0xffff7ab09320    32  ldur x4, [x3, #-8]
0xffff7ab09324    36  movz x16, #0xe00000000
0xffff7ab09328    40  cmp x4, x16
0xffff7ab0932c    44  csel x4, fp, x3, ne
0xffff7ab09330    48  ldr x3, [x4, #16]
0xffff7ab09334    52  tbnz w3, #0, #+0xdc (addr 0xffff7ab09410)
0xffff7ab09338    56  asr x5, x3, #32
0xffff7ab0933c    60  movz w16, #0x257f
0xffff7ab09340    64  cmp w5, w16, lsl #3
0xffff7ab09344    68  b.hs #+0x17c (addr 0xffff7ab094c0)
0xffff7ab09348    72  cbz w5, #+0xc (addr 0xffff7ab09354)
0xffff7ab0934c    76  mov x3, x5
0xffff7ab09350    80  b #+0xc (addr 0xffff7ab0935c)
0xffff7ab09354    84  movz x3, #0x4
0xffff7ab09358    88  movz x5, #0x0
0xffff7ab0935c    92  lsl x4, x3, #32
0xffff7ab09360    96  lsl x5, x5, #32
0xffff7ab09364   100  lsl w6, w3, #3
0xffff7ab09368   104  add w6, w6, #0x10 (16)
0xffff7ab0936c   108  cmp w6, #0x96000 (614400)
0xffff7ab09370   112  b.hs #+0x158 (addr 0xffff7ab094c8)
0xffff7ab09374   116  add w0, w6, #0x20 (32)
0xffff7ab09378   120  sxtw x0, w0
0xffff7ab0937c   124  movz x2, #0xe2c0
0xffff7ab09380   128  movk x2, #0x9ab, lsl #16
0xffff7ab09384   132  ldp x7, x16, [x2]
0xffff7ab09388   136  adds x6, x7, x0
0xffff7ab0938c   140  ccmp x6, x16, #nzCv, lo
0xffff7ab09390   144  b.hi #+0xa8 (addr 0xffff7ab09438)
0xffff7ab09394   148  str x6, [x2]
0xffff7ab09398   152  orr x7, x7, #0x1
0xffff7ab0939c   156  movz w0, #0x0
0xffff7ab093a0   160  stur x0, [x7, #31]
0xffff7ab093a4   164  ldur x0, [x1, #39]
0xffff7ab093a8   168  ldur x0, [x0, #39]
0xffff7ab093ac   172  movz x16, #0x187
0xffff7ab093b0   176  ldr x0, [x0, x16]
0xffff7ab093b4   180  stur x0, [x7, #-1]
0xffff7ab093b8   184  ldr x0, pc+208 (addr 0x0000ffff7ab09488)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab093bc   188  stur x0, [x7, #7]
0xffff7ab093c0   192  ldr x0, pc+208 (addr 0x0000ffff7ab09490)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab093c4   196  stur x0, [x7, #15]
0xffff7ab093c8   200  stur x5, [x7, #23]
0xffff7ab093cc   204  add x0, x7, #0x20 (32)
0xffff7ab093d0   208  ldr x1, pc+200 (addr 0x0000ffff7ab09498)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab093d4   212  stur x1, [x0, #-1]
0xffff7ab093d8   216  stur x4, [x0, #7]
0xffff7ab093dc   220  stur x0, [x7, #15]
0xffff7ab093e0   224  cmp w3, #0x0 (0)
0xffff7ab093e4   228  b.le #+0x18 (addr 0xffff7ab093fc)
0xffff7ab093e8   232  sub w3, w3, #0x1 (1)
0xffff7ab093ec   236  ldr x1, pc+180 (addr 0x0000ffff7ab094a0)    ;; object: 0x20d04519 <the hole>
0xffff7ab093f0   240  add x2, x0, #0xf (15)
0xffff7ab093f4   244  str x1, [x2, w3, sxtw #3]
0xffff7ab093f8   248  b #-0x18 (addr 0xffff7ab093e0)
0xffff7ab093fc   252  mov x0, x7
0xffff7ab09400   256  mov jssp, fp
0xffff7ab09404   260  ldp fp, lr, [jssp], #16
0xffff7ab09408   264  add jssp, jssp, #0x10 (16)
0xffff7ab0940c   268  ret
0xffff7ab09410   272  ldur x16, [x3, #-1]
0xffff7ab09414   276  ldr x17, [x26, #120]
0xffff7ab09418   280  cmp x16, x17
0xffff7ab0941c   284  b.ne #+0xb4 (addr 0xffff7ab094d0)
0xffff7ab09420   288  ldur d29, [x3, #7]
0xffff7ab09424   292  fcvtzs w5, d29
0xffff7ab09428   296  scvtf d0, w5
0xffff7ab0942c   300  fcmp d29, d0
0xffff7ab09430   304  b.ne #+0xa0 (addr 0xffff7ab094d0)
0xffff7ab09434   308  b #-0xf8 (addr 0xffff7ab0933c)
0xffff7ab09438   312  movz x7, #0x0
0xffff7ab0943c   316  mov x16, lr
0xffff7ab09440   320  ldr x17, pc+104 (addr 0x0000ffff7ab094a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab09444   324  blr x17
0xffff7ab09448   328  lsl x0, x0, #32
0xffff7ab0944c   332  movz x10, #0x0
0xffff7ab09450   336  sub csp, jssp, #0x10 (16)
0xffff7ab09454   340  stp x10, x0, [jssp, #-16]!
0xffff7ab09458   344  movz x0, #0x2
0xffff7ab0945c   348  movz x1, #0x5b88
0xffff7ab09460   352  movk x1, #0xe2, lsl #16
0xffff7ab09464   356  ldr x16, pc+76 (addr 0x0000ffff7ab094b0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab09468   360  blr x16
0xffff7ab0946c   364  str x0, [jssp, #56]
0xffff7ab09470   368  ldr x16, pc+72 (addr 0x0000ffff7ab094b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab09474   372  blr x16
0xffff7ab09478   376  b #-0xdc (addr 0xffff7ab0939c)
0xffff7ab0947c   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab09480   384  d63f03e0       constant
0xffff7ab09484   388  d503201f       constant
0xffff7ab09488   392  20d04201       constant
0xffff7ab0948c   396  00000000       constant
0xffff7ab09490   400  20d04201       constant
0xffff7ab09494   404  00000000       constant
0xffff7ab09498   408  4ec04259       constant
0xffff7ab0949c   412  00000000       constant
0xffff7ab094a0   416  20d04519       constant
0xffff7ab094a4   420  00000000       constant
0xffff7ab094a8   424  7ab06820       constant
0xffff7ab094ac   428  0000ffff       constant
0xffff7ab094b0   432  7ab06260       constant
0xffff7ab094b4   436  0000ffff       constant
0xffff7ab094b8   440  7ab068e0       constant
0xffff7ab094bc   444  0000ffff       constant
0xffff7ab094c0   448  movz x16, #0x0
0xffff7ab094c4   452  bl #+0x14 (addr 0xffff7ab094d8)
0xffff7ab094c8   456  movz x16, #0x8
0xffff7ab094cc   460  bl #+0xc (addr 0xffff7ab094d8)
0xffff7ab094d0   464  movz x16, #0x10
0xffff7ab094d4   468  bl #+0x4 (addr 0xffff7ab094d8)
0xffff7ab094d8   472  ldr x17, pc+24 (addr 0x0000ffff7ab094f0)    ;; lazy deoptimization bailout 0
0xffff7ab094dc   476  add x17, x17, x16
0xffff7ab094e0   480  br x17
0xffff7ab094e4   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab094e8   488  d63f03e0       constant
0xffff7ab094ec   492  d503201f       constant
0xffff7ab094f0   496  7a906000       constant
0xffff7ab094f4   500  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0946c   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab093b8  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab093c0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab093d0  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab093ec  embedded object  (0x20d04519 <the hole>)
0xffff7ab09440  code target (STUB)  (0xffff7ab06820)
0xffff7ab09464  code target (STUB)  (0xffff7ab06260)
0xffff7ab09470  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0947c  constant pool (size 68)
0xffff7ab094d8  runtime entry
0xffff7ab094e4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 525)
0xffff7ab09580     0  movz x16, #0xa00000000
0xffff7ab09584     4  sub csp, jssp, #0x10 (16)
0xffff7ab09588     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0958c    12  mov fp, jssp
0xffff7ab09590    16  sub csp, jssp, #0x8 (8)
0xffff7ab09594    20  sub jssp, jssp, #0x8 (8)
0xffff7ab09598    24  stur x16, [fp, #-8]
0xffff7ab0959c    28  ldr x3, [fp]
0xffff7ab095a0    32  ldur x4, [x3, #-8]
0xffff7ab095a4    36  movz x16, #0xe00000000
0xffff7ab095a8    40  cmp x4, x16
0xffff7ab095ac    44  csel x4, fp, x3, ne
0xffff7ab095b0    48  ldr x3, [x4, #16]
0xffff7ab095b4    52  tbnz w3, #0, #+0xdc (addr 0xffff7ab09690)
0xffff7ab095b8    56  asr x5, x3, #32
0xffff7ab095bc    60  movz w16, #0x257f
0xffff7ab095c0    64  cmp w5, w16, lsl #3
0xffff7ab095c4    68  b.hs #+0x17c (addr 0xffff7ab09740)
0xffff7ab095c8    72  cbz w5, #+0xc (addr 0xffff7ab095d4)
0xffff7ab095cc    76  mov x3, x5
0xffff7ab095d0    80  b #+0xc (addr 0xffff7ab095dc)
0xffff7ab095d4    84  movz x3, #0x4
0xffff7ab095d8    88  movz x5, #0x0
0xffff7ab095dc    92  lsl x4, x3, #32
0xffff7ab095e0    96  lsl x5, x5, #32
0xffff7ab095e4   100  lsl w6, w3, #3
0xffff7ab095e8   104  add w6, w6, #0x10 (16)
0xffff7ab095ec   108  cmp w6, #0x96000 (614400)
0xffff7ab095f0   112  b.hs #+0x158 (addr 0xffff7ab09748)
0xffff7ab095f4   116  add w0, w6, #0x20 (32)
0xffff7ab095f8   120  sxtw x0, w0
0xffff7ab095fc   124  movz x2, #0xe2c0
0xffff7ab09600   128  movk x2, #0x9ab, lsl #16
0xffff7ab09604   132  ldp x7, x16, [x2]
0xffff7ab09608   136  adds x6, x7, x0
0xffff7ab0960c   140  ccmp x6, x16, #nzCv, lo
0xffff7ab09610   144  b.hi #+0xa8 (addr 0xffff7ab096b8)
0xffff7ab09614   148  str x6, [x2]
0xffff7ab09618   152  orr x7, x7, #0x1
0xffff7ab0961c   156  movz w0, #0x0
0xffff7ab09620   160  stur x0, [x7, #31]
0xffff7ab09624   164  ldur x0, [x1, #39]
0xffff7ab09628   168  ldur x0, [x0, #39]
0xffff7ab0962c   172  movz x16, #0x18f
0xffff7ab09630   176  ldr x0, [x0, x16]
0xffff7ab09634   180  stur x0, [x7, #-1]
0xffff7ab09638   184  ldr x0, pc+208 (addr 0x0000ffff7ab09708)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0963c   188  stur x0, [x7, #7]
0xffff7ab09640   192  ldr x0, pc+208 (addr 0x0000ffff7ab09710)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab09644   196  stur x0, [x7, #15]
0xffff7ab09648   200  stur x5, [x7, #23]
0xffff7ab0964c   204  add x0, x7, #0x20 (32)
0xffff7ab09650   208  ldr x1, pc+200 (addr 0x0000ffff7ab09718)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab09654   212  stur x1, [x0, #-1]
0xffff7ab09658   216  stur x4, [x0, #7]
0xffff7ab0965c   220  stur x0, [x7, #15]
0xffff7ab09660   224  cmp w3, #0x0 (0)
0xffff7ab09664   228  b.le #+0x18 (addr 0xffff7ab0967c)
0xffff7ab09668   232  sub w3, w3, #0x1 (1)
0xffff7ab0966c   236  ldr x1, pc+180 (addr 0x0000ffff7ab09720)    ;; object: 0x20d04519 <the hole>
0xffff7ab09670   240  add x2, x0, #0xf (15)
0xffff7ab09674   244  str x1, [x2, w3, sxtw #3]
0xffff7ab09678   248  b #-0x18 (addr 0xffff7ab09660)
0xffff7ab0967c   252  mov x0, x7
0xffff7ab09680   256  mov jssp, fp
0xffff7ab09684   260  ldp fp, lr, [jssp], #16
0xffff7ab09688   264  add jssp, jssp, #0x10 (16)
0xffff7ab0968c   268  ret
0xffff7ab09690   272  ldur x16, [x3, #-1]
0xffff7ab09694   276  ldr x17, [x26, #120]
0xffff7ab09698   280  cmp x16, x17
0xffff7ab0969c   284  b.ne #+0xb4 (addr 0xffff7ab09750)
0xffff7ab096a0   288  ldur d29, [x3, #7]
0xffff7ab096a4   292  fcvtzs w5, d29
0xffff7ab096a8   296  scvtf d0, w5
0xffff7ab096ac   300  fcmp d29, d0
0xffff7ab096b0   304  b.ne #+0xa0 (addr 0xffff7ab09750)
0xffff7ab096b4   308  b #-0xf8 (addr 0xffff7ab095bc)
0xffff7ab096b8   312  movz x7, #0x0
0xffff7ab096bc   316  mov x16, lr
0xffff7ab096c0   320  ldr x17, pc+104 (addr 0x0000ffff7ab09728)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab096c4   324  blr x17
0xffff7ab096c8   328  lsl x0, x0, #32
0xffff7ab096cc   332  movz x10, #0x0
0xffff7ab096d0   336  sub csp, jssp, #0x10 (16)
0xffff7ab096d4   340  stp x10, x0, [jssp, #-16]!
0xffff7ab096d8   344  movz x0, #0x2
0xffff7ab096dc   348  movz x1, #0x5b88
0xffff7ab096e0   352  movk x1, #0xe2, lsl #16
0xffff7ab096e4   356  ldr x16, pc+76 (addr 0x0000ffff7ab09730)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab096e8   360  blr x16
0xffff7ab096ec   364  str x0, [jssp, #56]
0xffff7ab096f0   368  ldr x16, pc+72 (addr 0x0000ffff7ab09738)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab096f4   372  blr x16
0xffff7ab096f8   376  b #-0xdc (addr 0xffff7ab0961c)
0xffff7ab096fc   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab09700   384  d63f03e0       constant
0xffff7ab09704   388  d503201f       constant
0xffff7ab09708   392  20d04201       constant
0xffff7ab0970c   396  00000000       constant
0xffff7ab09710   400  20d04201       constant
0xffff7ab09714   404  00000000       constant
0xffff7ab09718   408  4ec04259       constant
0xffff7ab0971c   412  00000000       constant
0xffff7ab09720   416  20d04519       constant
0xffff7ab09724   420  00000000       constant
0xffff7ab09728   424  7ab06820       constant
0xffff7ab0972c   428  0000ffff       constant
0xffff7ab09730   432  7ab06260       constant
0xffff7ab09734   436  0000ffff       constant
0xffff7ab09738   440  7ab068e0       constant
0xffff7ab0973c   444  0000ffff       constant
0xffff7ab09740   448  movz x16, #0x0
0xffff7ab09744   452  bl #+0x14 (addr 0xffff7ab09758)
0xffff7ab09748   456  movz x16, #0x8
0xffff7ab0974c   460  bl #+0xc (addr 0xffff7ab09758)
0xffff7ab09750   464  movz x16, #0x10
0xffff7ab09754   468  bl #+0x4 (addr 0xffff7ab09758)
0xffff7ab09758   472  ldr x17, pc+24 (addr 0x0000ffff7ab09770)    ;; lazy deoptimization bailout 0
0xffff7ab0975c   476  add x17, x17, x16
0xffff7ab09760   480  br x17
0xffff7ab09764   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab09768   488  d63f03e0       constant
0xffff7ab0976c   492  d503201f       constant
0xffff7ab09770   496  7a906000       constant
0xffff7ab09774   500  0000ffff       constant


Safepoints (size = 21)
0xffff7ab096ec   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab09638  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab09640  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab09650  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab0966c  embedded object  (0x20d04519 <the hole>)
0xffff7ab096c0  code target (STUB)  (0xffff7ab06820)
0xffff7ab096e4  code target (STUB)  (0xffff7ab06260)
0xffff7ab096f0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab096fc  constant pool (size 68)
0xffff7ab09758  runtime entry
0xffff7ab09764  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArraySingleArgumentConstructorStub
name = ArraySingleArgumentConstructorStub_FAST_HOLEY_ELEMENTS
compiler = crankshaft
Instructions (size = 525)
0xffff7ab09580     0  movz x16, #0xa00000000
0xffff7ab09584     4  sub csp, jssp, #0x10 (16)
0xffff7ab09588     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0958c    12  mov fp, jssp
0xffff7ab09590    16  sub csp, jssp, #0x8 (8)
0xffff7ab09594    20  sub jssp, jssp, #0x8 (8)
0xffff7ab09598    24  stur x16, [fp, #-8]
0xffff7ab0959c    28  ldr x3, [fp]
0xffff7ab095a0    32  ldur x4, [x3, #-8]
0xffff7ab095a4    36  movz x16, #0xe00000000
0xffff7ab095a8    40  cmp x4, x16
0xffff7ab095ac    44  csel x4, fp, x3, ne
0xffff7ab095b0    48  ldr x3, [x4, #16]
0xffff7ab095b4    52  tbnz w3, #0, #+0xdc (addr 0xffff7ab09690)
0xffff7ab095b8    56  asr x5, x3, #32
0xffff7ab095bc    60  movz w16, #0x257f
0xffff7ab095c0    64  cmp w5, w16, lsl #3
0xffff7ab095c4    68  b.hs #+0x17c (addr 0xffff7ab09740)
0xffff7ab095c8    72  cbz w5, #+0xc (addr 0xffff7ab095d4)
0xffff7ab095cc    76  mov x3, x5
0xffff7ab095d0    80  b #+0xc (addr 0xffff7ab095dc)
0xffff7ab095d4    84  movz x3, #0x4
0xffff7ab095d8    88  movz x5, #0x0
0xffff7ab095dc    92  lsl x4, x3, #32
0xffff7ab095e0    96  lsl x5, x5, #32
0xffff7ab095e4   100  lsl w6, w3, #3
0xffff7ab095e8   104  add w6, w6, #0x10 (16)
0xffff7ab095ec   108  cmp w6, #0x96000 (614400)
0xffff7ab095f0   112  b.hs #+0x158 (addr 0xffff7ab09748)
0xffff7ab095f4   116  add w0, w6, #0x20 (32)
0xffff7ab095f8   120  sxtw x0, w0
0xffff7ab095fc   124  movz x2, #0xe2c0
0xffff7ab09600   128  movk x2, #0x9ab, lsl #16
0xffff7ab09604   132  ldp x7, x16, [x2]
0xffff7ab09608   136  adds x6, x7, x0
0xffff7ab0960c   140  ccmp x6, x16, #nzCv, lo
0xffff7ab09610   144  b.hi #+0xa8 (addr 0xffff7ab096b8)
0xffff7ab09614   148  str x6, [x2]
0xffff7ab09618   152  orr x7, x7, #0x1
0xffff7ab0961c   156  movz w0, #0x0
0xffff7ab09620   160  stur x0, [x7, #31]
0xffff7ab09624   164  ldur x0, [x1, #39]
0xffff7ab09628   168  ldur x0, [x0, #39]
0xffff7ab0962c   172  movz x16, #0x18f
0xffff7ab09630   176  ldr x0, [x0, x16]
0xffff7ab09634   180  stur x0, [x7, #-1]
0xffff7ab09638   184  ldr x0, pc+208 (addr 0x0000ffff7ab09708)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0963c   188  stur x0, [x7, #7]
0xffff7ab09640   192  ldr x0, pc+208 (addr 0x0000ffff7ab09710)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab09644   196  stur x0, [x7, #15]
0xffff7ab09648   200  stur x5, [x7, #23]
0xffff7ab0964c   204  add x0, x7, #0x20 (32)
0xffff7ab09650   208  ldr x1, pc+200 (addr 0x0000ffff7ab09718)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab09654   212  stur x1, [x0, #-1]
0xffff7ab09658   216  stur x4, [x0, #7]
0xffff7ab0965c   220  stur x0, [x7, #15]
0xffff7ab09660   224  cmp w3, #0x0 (0)
0xffff7ab09664   228  b.le #+0x18 (addr 0xffff7ab0967c)
0xffff7ab09668   232  sub w3, w3, #0x1 (1)
0xffff7ab0966c   236  ldr x1, pc+180 (addr 0x0000ffff7ab09720)    ;; object: 0x20d04519 <the hole>
0xffff7ab09670   240  add x2, x0, #0xf (15)
0xffff7ab09674   244  str x1, [x2, w3, sxtw #3]
0xffff7ab09678   248  b #-0x18 (addr 0xffff7ab09660)
0xffff7ab0967c   252  mov x0, x7
0xffff7ab09680   256  mov jssp, fp
0xffff7ab09684   260  ldp fp, lr, [jssp], #16
0xffff7ab09688   264  add jssp, jssp, #0x10 (16)
0xffff7ab0968c   268  ret
0xffff7ab09690   272  ldur x16, [x3, #-1]
0xffff7ab09694   276  ldr x17, [x26, #120]
0xffff7ab09698   280  cmp x16, x17
0xffff7ab0969c   284  b.ne #+0xb4 (addr 0xffff7ab09750)
0xffff7ab096a0   288  ldur d29, [x3, #7]
0xffff7ab096a4   292  fcvtzs w5, d29
0xffff7ab096a8   296  scvtf d0, w5
0xffff7ab096ac   300  fcmp d29, d0
0xffff7ab096b0   304  b.ne #+0xa0 (addr 0xffff7ab09750)
0xffff7ab096b4   308  b #-0xf8 (addr 0xffff7ab095bc)
0xffff7ab096b8   312  movz x7, #0x0
0xffff7ab096bc   316  mov x16, lr
0xffff7ab096c0   320  ldr x17, pc+104 (addr 0x0000ffff7ab09728)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab096c4   324  blr x17
0xffff7ab096c8   328  lsl x0, x0, #32
0xffff7ab096cc   332  movz x10, #0x0
0xffff7ab096d0   336  sub csp, jssp, #0x10 (16)
0xffff7ab096d4   340  stp x10, x0, [jssp, #-16]!
0xffff7ab096d8   344  movz x0, #0x2
0xffff7ab096dc   348  movz x1, #0x5b88
0xffff7ab096e0   352  movk x1, #0xe2, lsl #16
0xffff7ab096e4   356  ldr x16, pc+76 (addr 0x0000ffff7ab09730)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab096e8   360  blr x16
0xffff7ab096ec   364  str x0, [jssp, #56]
0xffff7ab096f0   368  ldr x16, pc+72 (addr 0x0000ffff7ab09738)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab096f4   372  blr x16
0xffff7ab096f8   376  b #-0xdc (addr 0xffff7ab0961c)
0xffff7ab096fc   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab09700   384  d63f03e0       constant
0xffff7ab09704   388  d503201f       constant
0xffff7ab09708   392  20d04201       constant
0xffff7ab0970c   396  00000000       constant
0xffff7ab09710   400  20d04201       constant
0xffff7ab09714   404  00000000       constant
0xffff7ab09718   408  4ec04259       constant
0xffff7ab0971c   412  00000000       constant
0xffff7ab09720   416  20d04519       constant
0xffff7ab09724   420  00000000       constant
0xffff7ab09728   424  7ab06820       constant
0xffff7ab0972c   428  0000ffff       constant
0xffff7ab09730   432  7ab06260       constant
0xffff7ab09734   436  0000ffff       constant
0xffff7ab09738   440  7ab068e0       constant
0xffff7ab0973c   444  0000ffff       constant
0xffff7ab09740   448  movz x16, #0x0
0xffff7ab09744   452  bl #+0x14 (addr 0xffff7ab09758)
0xffff7ab09748   456  movz x16, #0x8
0xffff7ab0974c   460  bl #+0xc (addr 0xffff7ab09758)
0xffff7ab09750   464  movz x16, #0x10
0xffff7ab09754   468  bl #+0x4 (addr 0xffff7ab09758)
0xffff7ab09758   472  ldr x17, pc+24 (addr 0x0000ffff7ab09770)    ;; lazy deoptimization bailout 0
0xffff7ab0975c   476  add x17, x17, x16
0xffff7ab09760   480  br x17
0xffff7ab09764   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab09768   488  d63f03e0       constant
0xffff7ab0976c   492  d503201f       constant
0xffff7ab09770   496  7a906000       constant
0xffff7ab09774   500  0000ffff       constant


Safepoints (size = 21)
0xffff7ab096ec   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab09638  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab09640  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab09650  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab0966c  embedded object  (0x20d04519 <the hole>)
0xffff7ab096c0  code target (STUB)  (0xffff7ab06820)
0xffff7ab096e4  code target (STUB)  (0xffff7ab06260)
0xffff7ab096f0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab096fc  constant pool (size 68)
0xffff7ab09758  runtime entry
0xffff7ab09764  constant pool (size 20)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0xffff7ab09800     0  adr xzr, #+0x40 (addr 0xffff7ab09840)
0xffff7ab09804     4  adr xzr, #+0x360 (addr 0xffff7ab09b64)
0xffff7ab09808     8  ldr x16, pc+1736 (addr 0x0000ffff7ab09ed0)    ;; external reference (store_buffer_top)
0xffff7ab0980c    12  ldr x3, [x16]
0xffff7ab09810    16  str x4, [x3], #8
0xffff7ab09814    20  str x3, [x16]
0xffff7ab09818    24  tst x3, #0x1ffff
0xffff7ab0981c    28  b.eq #+0x8 (addr 0xffff7ab09824)
0xffff7ab09820    32  ret
0xffff7ab09824    36  sub csp, jssp, #0x8 (8)
0xffff7ab09828    40  str lr, [jssp, #-8]!
0xffff7ab0982c    44  ldr x17, pc+1708 (addr 0x0000ffff7ab09ed8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab09830    48  blr x17
0xffff7ab09834    52  ldr lr, [jssp], #8
0xffff7ab09838    56  ret
0xffff7ab0983c    60  ret
0xffff7ab09840    64  sub csp, jssp, #0x10 (16)
0xffff7ab09844    68  stp x1, x0, [jssp, #-16]!
0xffff7ab09848    72  ldr x3, [x4]
0xffff7ab0984c    76  and x16, x3, #0xfffffffffff00000
0xffff7ab09850    80  ldr x16, [x16, #8]
0xffff7ab09854    84  tst x16, #0x18
0xffff7ab09858    88  b.eq #+0x1d8 (addr 0xffff7ab09a30)
0xffff7ab0985c    92  and x16, x7, #0xfffffffffff00000
0xffff7ab09860    96  ldr x16, [x16, #8]
0xffff7ab09864   100  tst x16, #0x18
0xffff7ab09868   104  b.ne #+0x1c8 (addr 0xffff7ab09a30)
0xffff7ab0986c   108  and x3, x7, #0xfffffffffff00000
0xffff7ab09870   112  ldr x0, [x3, #104]
0xffff7ab09874   116  subs x0, x0, #0x1 (1)
0xffff7ab09878   120  str x0, [x3, #104]
0xffff7ab0987c   124  b.mi #+0xc4 (addr 0xffff7ab09940)
0xffff7ab09880   128  ubfx x16, x7, #8, #12
0xffff7ab09884   132  and x3, x7, #0xfffffffffff00000
0xffff7ab09888   136  add x3, x3, x16, lsl #2
0xffff7ab0988c   140  ubfx x0, x7, #3, #5
0xffff7ab09890   144  ldr x3, [x3, #360]
0xffff7ab09894   148  lsr x3, x3, x0
0xffff7ab09898   152  tbz w3, #0, #+0x8 (addr 0xffff7ab098a0)
0xffff7ab0989c   156  tbnz w3, #1, #+0x3c (addr 0xffff7ab098d8)
0xffff7ab098a0   160  ldp x1, x0, [jssp], #16
0xffff7ab098a4   164  ldr x16, pc+1596 (addr 0x0000ffff7ab09ee0)    ;; external reference (store_buffer_top)
0xffff7ab098a8   168  ldr x3, [x16]
0xffff7ab098ac   172  str x4, [x3], #8
0xffff7ab098b0   176  str x3, [x16]
0xffff7ab098b4   180  tst x3, #0x1ffff
0xffff7ab098b8   184  b.eq #+0x8 (addr 0xffff7ab098c0)
0xffff7ab098bc   188  ret
0xffff7ab098c0   192  sub csp, jssp, #0x8 (8)
0xffff7ab098c4   196  str lr, [jssp, #-8]!
0xffff7ab098c8   200  ldr x17, pc+1568 (addr 0x0000ffff7ab09ee8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab098cc   204  blr x17
0xffff7ab098d0   208  ldr lr, [jssp], #8
0xffff7ab098d4   212  ret
0xffff7ab098d8   216  ldr x3, [x4]
0xffff7ab098dc   220  sub csp, jssp, #0x10 (16)
0xffff7ab098e0   224  stp x7, x4, [jssp, #-16]!
0xffff7ab098e4   228  ubfx x16, x3, #8, #12
0xffff7ab098e8   232  and x0, x3, #0xfffffffffff00000
0xffff7ab098ec   236  add x0, x0, x16, lsl #2
0xffff7ab098f0   240  ubfx x7, x3, #3, #5
0xffff7ab098f4   244  ldr x4, [x0, #360]
0xffff7ab098f8   248  lsr x4, x4, x7
0xffff7ab098fc   252  tbz w4, #0, #+0x40 (addr 0xffff7ab0993c)
0xffff7ab09900   256  ldp x7, x4, [jssp], #16
0xffff7ab09904   260  ldp x1, x0, [jssp], #16
0xffff7ab09908   264  ldr x16, pc+1512 (addr 0x0000ffff7ab09ef0)    ;; external reference (store_buffer_top)
0xffff7ab0990c   268  ldr x3, [x16]
0xffff7ab09910   272  str x4, [x3], #8
0xffff7ab09914   276  str x3, [x16]
0xffff7ab09918   280  tst x3, #0x1ffff
0xffff7ab0991c   284  b.eq #+0x8 (addr 0xffff7ab09924)
0xffff7ab09920   288  ret
0xffff7ab09924   292  sub csp, jssp, #0x8 (8)
0xffff7ab09928   296  str lr, [jssp, #-8]!
0xffff7ab0992c   300  ldr x17, pc+1484 (addr 0x0000ffff7ab09ef8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab09930   304  blr x17
0xffff7ab09934   308  ldr lr, [jssp], #8
0xffff7ab09938   312  ret
0xffff7ab0993c   316  ldp x7, x4, [jssp], #16
0xffff7ab09940   320  sub csp, jssp, #0x78 (120)
0xffff7ab09944   324  stp x14, x15, [jssp, #-32]!
0xffff7ab09948   328  stp x18, lr, [jssp, #16]
0xffff7ab0994c   332  stp x10, x11, [jssp, #-32]!
0xffff7ab09950   336  stp x12, x13, [jssp, #16]
0xffff7ab09954   340  stp x6, x7, [jssp, #-32]!
0xffff7ab09958   344  stp x8, x9, [jssp, #16]
0xffff7ab0995c   348  stp x2, x4, [jssp, #-24]!
0xffff7ab09960   352  str x5, [jssp, #16]
0xffff7ab09964   356  sub csp, jssp, #0xb0 (176)
0xffff7ab09968   360  stp d26, d27, [jssp, #-32]!
0xffff7ab0996c   364  stp d28, d29, [jssp, #16]
0xffff7ab09970   368  stp d22, d23, [jssp, #-32]!
0xffff7ab09974   372  stp d24, d25, [jssp, #16]
0xffff7ab09978   376  stp d18, d19, [jssp, #-32]!
0xffff7ab0997c   380  stp d20, d21, [jssp, #16]
0xffff7ab09980   384  stp d6, d7, [jssp, #-32]!
0xffff7ab09984   388  stp d16, d17, [jssp, #16]
0xffff7ab09988   392  stp d2, d3, [jssp, #-32]!
0xffff7ab0998c   396  stp d4, d5, [jssp, #16]
0xffff7ab09990   400  stp d0, d1, [jssp, #-16]!
0xffff7ab09994   404  mov x0, x7
0xffff7ab09998   408  mov x1, x4
0xffff7ab0999c   412  ldr x2, pc+1380 (addr 0x0000ffff7ab09f00)    ;; external reference (isolate)
0xffff7ab099a0   416  ldr x16, pc+1384 (addr 0x0000ffff7ab09f08)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab099a4   420  and csp, jssp, #0xfffffffffffffff0
0xffff7ab099a8   424  blr x16
0xffff7ab099ac   428  ldp d2, d3, [jssp, #16]
0xffff7ab099b0   432  ldp d0, d1, [jssp], #32
0xffff7ab099b4   436  ldp d6, d7, [jssp, #16]
0xffff7ab099b8   440  ldp d4, d5, [jssp], #32
0xffff7ab099bc   444  ldp d18, d19, [jssp, #16]
0xffff7ab099c0   448  ldp d16, d17, [jssp], #32
0xffff7ab099c4   452  ldp d22, d23, [jssp, #16]
0xffff7ab099c8   456  ldp d20, d21, [jssp], #32
0xffff7ab099cc   460  ldp d26, d27, [jssp, #16]
0xffff7ab099d0   464  ldp d24, d25, [jssp], #32
0xffff7ab099d4   468  ldp d28, d29, [jssp], #16
0xffff7ab099d8   472  ldp x5, x6, [jssp, #16]
0xffff7ab099dc   476  ldp x2, x4, [jssp], #32
0xffff7ab099e0   480  ldp x9, x10, [jssp, #16]
0xffff7ab099e4   484  ldp x7, x8, [jssp], #32
0xffff7ab099e8   488  ldp x13, x14, [jssp, #16]
0xffff7ab099ec   492  ldp x11, x12, [jssp], #32
0xffff7ab099f0   496  ldr lr, [jssp, #16]
0xffff7ab099f4   500  ldp x15, x18, [jssp], #24
0xffff7ab099f8   504  ldp x1, x0, [jssp], #16
0xffff7ab099fc   508  ldr x16, pc+1300 (addr 0x0000ffff7ab09f10)    ;; external reference (store_buffer_top)
0xffff7ab09a00   512  ldr x3, [x16]
0xffff7ab09a04   516  str x4, [x3], #8
0xffff7ab09a08   520  str x3, [x16]
0xffff7ab09a0c   524  tst x3, #0x1ffff
0xffff7ab09a10   528  b.eq #+0x8 (addr 0xffff7ab09a18)
0xffff7ab09a14   532  ret
0xffff7ab09a18   536  sub csp, jssp, #0x8 (8)
0xffff7ab09a1c   540  str lr, [jssp, #-8]!
0xffff7ab09a20   544  ldr x17, pc+1272 (addr 0x0000ffff7ab09f18)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab09a24   548  blr x17
0xffff7ab09a28   552  ldr lr, [jssp], #8
0xffff7ab09a2c   556  ret
0xffff7ab09a30   560  and x3, x7, #0xfffffffffff00000
0xffff7ab09a34   564  ldr x0, [x3, #104]
0xffff7ab09a38   568  subs x0, x0, #0x1 (1)
0xffff7ab09a3c   572  str x0, [x3, #104]
0xffff7ab09a40   576  b.mi #+0x64 (addr 0xffff7ab09aa4)
0xffff7ab09a44   580  ubfx x16, x7, #8, #12
0xffff7ab09a48   584  and x3, x7, #0xfffffffffff00000
0xffff7ab09a4c   588  add x3, x3, x16, lsl #2
0xffff7ab09a50   592  ubfx x0, x7, #3, #5
0xffff7ab09a54   596  ldr x3, [x3, #360]
0xffff7ab09a58   600  lsr x3, x3, x0
0xffff7ab09a5c   604  tbz w3, #0, #+0x8 (addr 0xffff7ab09a64)
0xffff7ab09a60   608  tbnz w3, #1, #+0xc (addr 0xffff7ab09a6c)
0xffff7ab09a64   612  ldp x1, x0, [jssp], #16
0xffff7ab09a68   616  ret
0xffff7ab09a6c   620  ldr x3, [x4]
0xffff7ab09a70   624  sub csp, jssp, #0x10 (16)
0xffff7ab09a74   628  stp x7, x4, [jssp, #-16]!
0xffff7ab09a78   632  ubfx x16, x3, #8, #12
0xffff7ab09a7c   636  and x0, x3, #0xfffffffffff00000
0xffff7ab09a80   640  add x0, x0, x16, lsl #2
0xffff7ab09a84   644  ubfx x7, x3, #3, #5
0xffff7ab09a88   648  ldr x4, [x0, #360]
0xffff7ab09a8c   652  lsr x4, x4, x7
0xffff7ab09a90   656  tbz w4, #0, #+0x10 (addr 0xffff7ab09aa0)
0xffff7ab09a94   660  ldp x7, x4, [jssp], #16
0xffff7ab09a98   664  ldp x1, x0, [jssp], #16
0xffff7ab09a9c   668  ret
0xffff7ab09aa0   672  ldp x7, x4, [jssp], #16
0xffff7ab09aa4   676  sub csp, jssp, #0x78 (120)
0xffff7ab09aa8   680  stp x14, x15, [jssp, #-32]!
0xffff7ab09aac   684  stp x18, lr, [jssp, #16]
0xffff7ab09ab0   688  stp x10, x11, [jssp, #-32]!
0xffff7ab09ab4   692  stp x12, x13, [jssp, #16]
0xffff7ab09ab8   696  stp x6, x7, [jssp, #-32]!
0xffff7ab09abc   700  stp x8, x9, [jssp, #16]
0xffff7ab09ac0   704  stp x2, x4, [jssp, #-24]!
0xffff7ab09ac4   708  str x5, [jssp, #16]
0xffff7ab09ac8   712  sub csp, jssp, #0xb0 (176)
0xffff7ab09acc   716  stp d26, d27, [jssp, #-32]!
0xffff7ab09ad0   720  stp d28, d29, [jssp, #16]
0xffff7ab09ad4   724  stp d22, d23, [jssp, #-32]!
0xffff7ab09ad8   728  stp d24, d25, [jssp, #16]
0xffff7ab09adc   732  stp d18, d19, [jssp, #-32]!
0xffff7ab09ae0   736  stp d20, d21, [jssp, #16]
0xffff7ab09ae4   740  stp d6, d7, [jssp, #-32]!
0xffff7ab09ae8   744  stp d16, d17, [jssp, #16]
0xffff7ab09aec   748  stp d2, d3, [jssp, #-32]!
0xffff7ab09af0   752  stp d4, d5, [jssp, #16]
0xffff7ab09af4   756  stp d0, d1, [jssp, #-16]!
0xffff7ab09af8   760  mov x0, x7
0xffff7ab09afc   764  mov x1, x4
0xffff7ab09b00   768  ldr x2, pc+1056 (addr 0x0000ffff7ab09f20)    ;; external reference (isolate)
0xffff7ab09b04   772  ldr x16, pc+1060 (addr 0x0000ffff7ab09f28)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab09b08   776  and csp, jssp, #0xfffffffffffffff0
0xffff7ab09b0c   780  blr x16
0xffff7ab09b10   784  ldp d2, d3, [jssp, #16]
0xffff7ab09b14   788  ldp d0, d1, [jssp], #32
0xffff7ab09b18   792  ldp d6, d7, [jssp, #16]
0xffff7ab09b1c   796  ldp d4, d5, [jssp], #32
0xffff7ab09b20   800  ldp d18, d19, [jssp, #16]
0xffff7ab09b24   804  ldp d16, d17, [jssp], #32
0xffff7ab09b28   808  ldp d22, d23, [jssp, #16]
0xffff7ab09b2c   812  ldp d20, d21, [jssp], #32
0xffff7ab09b30   816  ldp d26, d27, [jssp, #16]
0xffff7ab09b34   820  ldp d24, d25, [jssp], #32
0xffff7ab09b38   824  ldp d28, d29, [jssp], #16
0xffff7ab09b3c   828  ldp x5, x6, [jssp, #16]
0xffff7ab09b40   832  ldp x2, x4, [jssp], #32
0xffff7ab09b44   836  ldp x9, x10, [jssp, #16]
0xffff7ab09b48   840  ldp x7, x8, [jssp], #32
0xffff7ab09b4c   844  ldp x13, x14, [jssp, #16]
0xffff7ab09b50   848  ldp x11, x12, [jssp], #32
0xffff7ab09b54   852  ldr lr, [jssp, #16]
0xffff7ab09b58   856  ldp x15, x18, [jssp], #24
0xffff7ab09b5c   860  ldp x1, x0, [jssp], #16
0xffff7ab09b60   864  ret
0xffff7ab09b64   868  sub csp, jssp, #0x10 (16)
0xffff7ab09b68   872  stp x1, x0, [jssp, #-16]!
0xffff7ab09b6c   876  ldr x3, [x4]
0xffff7ab09b70   880  and x16, x3, #0xfffffffffff00000
0xffff7ab09b74   884  ldr x16, [x16, #8]
0xffff7ab09b78   888  tst x16, #0x18
0xffff7ab09b7c   892  b.eq #+0x1f8 (addr 0xffff7ab09d74)
0xffff7ab09b80   896  and x16, x7, #0xfffffffffff00000
0xffff7ab09b84   900  ldr x16, [x16, #8]
0xffff7ab09b88   904  tst x16, #0x18
0xffff7ab09b8c   908  b.ne #+0x1e8 (addr 0xffff7ab09d74)
0xffff7ab09b90   912  and x3, x7, #0xfffffffffff00000
0xffff7ab09b94   916  ldr x0, [x3, #104]
0xffff7ab09b98   920  subs x0, x0, #0x1 (1)
0xffff7ab09b9c   924  str x0, [x3, #104]
0xffff7ab09ba0   928  b.mi #+0xe4 (addr 0xffff7ab09c84)
0xffff7ab09ba4   932  ubfx x16, x7, #8, #12
0xffff7ab09ba8   936  and x3, x7, #0xfffffffffff00000
0xffff7ab09bac   940  add x3, x3, x16, lsl #2
0xffff7ab09bb0   944  ubfx x0, x7, #3, #5
0xffff7ab09bb4   948  ldr x3, [x3, #360]
0xffff7ab09bb8   952  lsr x3, x3, x0
0xffff7ab09bbc   956  tbz w3, #0, #+0x8 (addr 0xffff7ab09bc4)
0xffff7ab09bc0   960  tbnz w3, #1, #+0x3c (addr 0xffff7ab09bfc)
0xffff7ab09bc4   964  ldp x1, x0, [jssp], #16
0xffff7ab09bc8   968  ldr x16, pc+872 (addr 0x0000ffff7ab09f30)    ;; external reference (store_buffer_top)
0xffff7ab09bcc   972  ldr x3, [x16]
0xffff7ab09bd0   976  str x4, [x3], #8
0xffff7ab09bd4   980  str x3, [x16]
0xffff7ab09bd8   984  tst x3, #0x1ffff
0xffff7ab09bdc   988  b.eq #+0x8 (addr 0xffff7ab09be4)
0xffff7ab09be0   992  ret
0xffff7ab09be4   996  sub csp, jssp, #0x8 (8)
0xffff7ab09be8  1000  str lr, [jssp, #-8]!
0xffff7ab09bec  1004  ldr x17, pc+844 (addr 0x0000ffff7ab09f38)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab09bf0  1008  blr x17
0xffff7ab09bf4  1012  ldr lr, [jssp], #8
0xffff7ab09bf8  1016  ret
0xffff7ab09bfc  1020  ldr x3, [x4]
0xffff7ab09c00  1024  and x0, x3, #0xfffffffffff00000
0xffff7ab09c04  1028  ldr x0, [x0, #8]
0xffff7ab09c08  1032  tbz w0, #6, #+0x18 (addr 0xffff7ab09c20)
0xffff7ab09c0c  1036  and x0, x7, #0xfffffffffff00000
0xffff7ab09c10  1040  ldr x0, [x0, #8]
0xffff7ab09c14  1044  movz x16, #0x58
0xffff7ab09c18  1048  tst x0, x16
0xffff7ab09c1c  1052  b.eq #+0x68 (addr 0xffff7ab09c84)
0xffff7ab09c20  1056  sub csp, jssp, #0x10 (16)
0xffff7ab09c24  1060  stp x7, x4, [jssp, #-16]!
0xffff7ab09c28  1064  ubfx x16, x3, #8, #12
0xffff7ab09c2c  1068  and x0, x3, #0xfffffffffff00000
0xffff7ab09c30  1072  add x0, x0, x16, lsl #2
0xffff7ab09c34  1076  ubfx x7, x3, #3, #5
0xffff7ab09c38  1080  ldr x4, [x0, #360]
0xffff7ab09c3c  1084  lsr x4, x4, x7
0xffff7ab09c40  1088  tbz w4, #0, #+0x40 (addr 0xffff7ab09c80)
0xffff7ab09c44  1092  ldp x7, x4, [jssp], #16
0xffff7ab09c48  1096  ldp x1, x0, [jssp], #16
0xffff7ab09c4c  1100  ldr x16, pc+756 (addr 0x0000ffff7ab09f40)    ;; external reference (store_buffer_top)
0xffff7ab09c50  1104  ldr x3, [x16]
0xffff7ab09c54  1108  str x4, [x3], #8
0xffff7ab09c58  1112  str x3, [x16]
0xffff7ab09c5c  1116  tst x3, #0x1ffff
0xffff7ab09c60  1120  b.eq #+0x8 (addr 0xffff7ab09c68)
0xffff7ab09c64  1124  ret
0xffff7ab09c68  1128  sub csp, jssp, #0x8 (8)
0xffff7ab09c6c  1132  str lr, [jssp, #-8]!
0xffff7ab09c70  1136  ldr x17, pc+728 (addr 0x0000ffff7ab09f48)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab09c74  1140  blr x17
0xffff7ab09c78  1144  ldr lr, [jssp], #8
0xffff7ab09c7c  1148  ret
0xffff7ab09c80  1152  ldp x7, x4, [jssp], #16
0xffff7ab09c84  1156  sub csp, jssp, #0x78 (120)
0xffff7ab09c88  1160  stp x14, x15, [jssp, #-32]!
0xffff7ab09c8c  1164  stp x18, lr, [jssp, #16]
0xffff7ab09c90  1168  stp x10, x11, [jssp, #-32]!
0xffff7ab09c94  1172  stp x12, x13, [jssp, #16]
0xffff7ab09c98  1176  stp x6, x7, [jssp, #-32]!
0xffff7ab09c9c  1180  stp x8, x9, [jssp, #16]
0xffff7ab09ca0  1184  stp x2, x4, [jssp, #-24]!
0xffff7ab09ca4  1188  str x5, [jssp, #16]
0xffff7ab09ca8  1192  sub csp, jssp, #0xb0 (176)
0xffff7ab09cac  1196  stp d26, d27, [jssp, #-32]!
0xffff7ab09cb0  1200  stp d28, d29, [jssp, #16]
0xffff7ab09cb4  1204  stp d22, d23, [jssp, #-32]!
0xffff7ab09cb8  1208  stp d24, d25, [jssp, #16]
0xffff7ab09cbc  1212  stp d18, d19, [jssp, #-32]!
0xffff7ab09cc0  1216  stp d20, d21, [jssp, #16]
0xffff7ab09cc4  1220  stp d6, d7, [jssp, #-32]!
0xffff7ab09cc8  1224  stp d16, d17, [jssp, #16]
0xffff7ab09ccc  1228  stp d2, d3, [jssp, #-32]!
0xffff7ab09cd0  1232  stp d4, d5, [jssp, #16]
0xffff7ab09cd4  1236  stp d0, d1, [jssp, #-16]!
0xffff7ab09cd8  1240  mov x0, x7
0xffff7ab09cdc  1244  mov x1, x4
0xffff7ab09ce0  1248  ldr x2, pc+624 (addr 0x0000ffff7ab09f50)    ;; external reference (isolate)
0xffff7ab09ce4  1252  ldr x16, pc+628 (addr 0x0000ffff7ab09f58)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab09ce8  1256  and csp, jssp, #0xfffffffffffffff0
0xffff7ab09cec  1260  blr x16
0xffff7ab09cf0  1264  ldp d2, d3, [jssp, #16]
0xffff7ab09cf4  1268  ldp d0, d1, [jssp], #32
0xffff7ab09cf8  1272  ldp d6, d7, [jssp, #16]
0xffff7ab09cfc  1276  ldp d4, d5, [jssp], #32
0xffff7ab09d00  1280  ldp d18, d19, [jssp, #16]
0xffff7ab09d04  1284  ldp d16, d17, [jssp], #32
0xffff7ab09d08  1288  ldp d22, d23, [jssp, #16]
0xffff7ab09d0c  1292  ldp d20, d21, [jssp], #32
0xffff7ab09d10  1296  ldp d26, d27, [jssp, #16]
0xffff7ab09d14  1300  ldp d24, d25, [jssp], #32
0xffff7ab09d18  1304  ldp d28, d29, [jssp], #16
0xffff7ab09d1c  1308  ldp x5, x6, [jssp, #16]
0xffff7ab09d20  1312  ldp x2, x4, [jssp], #32
0xffff7ab09d24  1316  ldp x9, x10, [jssp, #16]
0xffff7ab09d28  1320  ldp x7, x8, [jssp], #32
0xffff7ab09d2c  1324  ldp x13, x14, [jssp, #16]
0xffff7ab09d30  1328  ldp x11, x12, [jssp], #32
0xffff7ab09d34  1332  ldr lr, [jssp, #16]
0xffff7ab09d38  1336  ldp x15, x18, [jssp], #24
0xffff7ab09d3c  1340  ldp x1, x0, [jssp], #16
0xffff7ab09d40  1344  ldr x16, pc+544 (addr 0x0000ffff7ab09f60)    ;; external reference (store_buffer_top)
0xffff7ab09d44  1348  ldr x3, [x16]
0xffff7ab09d48  1352  str x4, [x3], #8
0xffff7ab09d4c  1356  str x3, [x16]
0xffff7ab09d50  1360  tst x3, #0x1ffff
0xffff7ab09d54  1364  b.eq #+0x8 (addr 0xffff7ab09d5c)
0xffff7ab09d58  1368  ret
0xffff7ab09d5c  1372  sub csp, jssp, #0x8 (8)
0xffff7ab09d60  1376  str lr, [jssp, #-8]!
0xffff7ab09d64  1380  ldr x17, pc+516 (addr 0x0000ffff7ab09f68)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab09d68  1384  blr x17
0xffff7ab09d6c  1388  ldr lr, [jssp], #8
0xffff7ab09d70  1392  ret
0xffff7ab09d74  1396  and x3, x7, #0xfffffffffff00000
0xffff7ab09d78  1400  ldr x0, [x3, #104]
0xffff7ab09d7c  1404  subs x0, x0, #0x1 (1)
0xffff7ab09d80  1408  str x0, [x3, #104]
0xffff7ab09d84  1412  b.mi #+0x84 (addr 0xffff7ab09e08)
0xffff7ab09d88  1416  ubfx x16, x7, #8, #12
0xffff7ab09d8c  1420  and x3, x7, #0xfffffffffff00000
0xffff7ab09d90  1424  add x3, x3, x16, lsl #2
0xffff7ab09d94  1428  ubfx x0, x7, #3, #5
0xffff7ab09d98  1432  ldr x3, [x3, #360]
0xffff7ab09d9c  1436  lsr x3, x3, x0
0xffff7ab09da0  1440  tbz w3, #0, #+0x8 (addr 0xffff7ab09da8)
0xffff7ab09da4  1444  tbnz w3, #1, #+0xc (addr 0xffff7ab09db0)
0xffff7ab09da8  1448  ldp x1, x0, [jssp], #16
0xffff7ab09dac  1452  ret
0xffff7ab09db0  1456  ldr x3, [x4]
0xffff7ab09db4  1460  and x0, x3, #0xfffffffffff00000
0xffff7ab09db8  1464  ldr x0, [x0, #8]
0xffff7ab09dbc  1468  tbz w0, #6, #+0x18 (addr 0xffff7ab09dd4)
0xffff7ab09dc0  1472  and x0, x7, #0xfffffffffff00000
0xffff7ab09dc4  1476  ldr x0, [x0, #8]
0xffff7ab09dc8  1480  movz x16, #0x58
0xffff7ab09dcc  1484  tst x0, x16
0xffff7ab09dd0  1488  b.eq #+0x38 (addr 0xffff7ab09e08)
0xffff7ab09dd4  1492  sub csp, jssp, #0x10 (16)
0xffff7ab09dd8  1496  stp x7, x4, [jssp, #-16]!
0xffff7ab09ddc  1500  ubfx x16, x3, #8, #12
0xffff7ab09de0  1504  and x0, x3, #0xfffffffffff00000
0xffff7ab09de4  1508  add x0, x0, x16, lsl #2
0xffff7ab09de8  1512  ubfx x7, x3, #3, #5
0xffff7ab09dec  1516  ldr x4, [x0, #360]
0xffff7ab09df0  1520  lsr x4, x4, x7
0xffff7ab09df4  1524  tbz w4, #0, #+0x10 (addr 0xffff7ab09e04)
0xffff7ab09df8  1528  ldp x7, x4, [jssp], #16
0xffff7ab09dfc  1532  ldp x1, x0, [jssp], #16
0xffff7ab09e00  1536  ret
0xffff7ab09e04  1540  ldp x7, x4, [jssp], #16
0xffff7ab09e08  1544  sub csp, jssp, #0x78 (120)
0xffff7ab09e0c  1548  stp x14, x15, [jssp, #-32]!
0xffff7ab09e10  1552  stp x18, lr, [jssp, #16]
0xffff7ab09e14  1556  stp x10, x11, [jssp, #-32]!
0xffff7ab09e18  1560  stp x12, x13, [jssp, #16]
0xffff7ab09e1c  1564  stp x6, x7, [jssp, #-32]!
0xffff7ab09e20  1568  stp x8, x9, [jssp, #16]
0xffff7ab09e24  1572  stp x2, x4, [jssp, #-24]!
0xffff7ab09e28  1576  str x5, [jssp, #16]
0xffff7ab09e2c  1580  sub csp, jssp, #0xb0 (176)
0xffff7ab09e30  1584  stp d26, d27, [jssp, #-32]!
0xffff7ab09e34  1588  stp d28, d29, [jssp, #16]
0xffff7ab09e38  1592  stp d22, d23, [jssp, #-32]!
0xffff7ab09e3c  1596  stp d24, d25, [jssp, #16]
0xffff7ab09e40  1600  stp d18, d19, [jssp, #-32]!
0xffff7ab09e44  1604  stp d20, d21, [jssp, #16]
0xffff7ab09e48  1608  stp d6, d7, [jssp, #-32]!
0xffff7ab09e4c  1612  stp d16, d17, [jssp, #16]
0xffff7ab09e50  1616  stp d2, d3, [jssp, #-32]!
0xffff7ab09e54  1620  stp d4, d5, [jssp, #16]
0xffff7ab09e58  1624  stp d0, d1, [jssp, #-16]!
0xffff7ab09e5c  1628  mov x0, x7
0xffff7ab09e60  1632  mov x1, x4
0xffff7ab09e64  1636  ldr x2, pc+268 (addr 0x0000ffff7ab09f70)    ;; external reference (isolate)
0xffff7ab09e68  1640  ldr x16, pc+272 (addr 0x0000ffff7ab09f78)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab09e6c  1644  and csp, jssp, #0xfffffffffffffff0
0xffff7ab09e70  1648  blr x16
0xffff7ab09e74  1652  ldp d2, d3, [jssp, #16]
0xffff7ab09e78  1656  ldp d0, d1, [jssp], #32
0xffff7ab09e7c  1660  ldp d6, d7, [jssp, #16]
0xffff7ab09e80  1664  ldp d4, d5, [jssp], #32
0xffff7ab09e84  1668  ldp d18, d19, [jssp, #16]
0xffff7ab09e88  1672  ldp d16, d17, [jssp], #32
0xffff7ab09e8c  1676  ldp d22, d23, [jssp, #16]
0xffff7ab09e90  1680  ldp d20, d21, [jssp], #32
0xffff7ab09e94  1684  ldp d26, d27, [jssp, #16]
0xffff7ab09e98  1688  ldp d24, d25, [jssp], #32
0xffff7ab09e9c  1692  ldp d28, d29, [jssp], #16
0xffff7ab09ea0  1696  ldp x5, x6, [jssp, #16]
0xffff7ab09ea4  1700  ldp x2, x4, [jssp], #32
0xffff7ab09ea8  1704  ldp x9, x10, [jssp, #16]
0xffff7ab09eac  1708  ldp x7, x8, [jssp], #32
0xffff7ab09eb0  1712  ldp x13, x14, [jssp, #16]
0xffff7ab09eb4  1716  ldp x11, x12, [jssp], #32
0xffff7ab09eb8  1720  ldr lr, [jssp, #16]
0xffff7ab09ebc  1724  ldp x15, x18, [jssp], #24
0xffff7ab09ec0  1728  ldp x1, x0, [jssp], #16
0xffff7ab09ec4  1732  ret
0xffff7ab09ec8  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab09ecc  1740  d63f03e0       constant
0xffff7ab09ed0  1744  09abe8c0       constant
0xffff7ab09ed4  1748  00000000       constant
0xffff7ab09ed8  1752  7ab065a0       constant
0xffff7ab09edc  1756  0000ffff       constant
0xffff7ab09ee0  1760  09abe8c0       constant
0xffff7ab09ee4  1764  00000000       constant
0xffff7ab09ee8  1768  7ab065a0       constant
0xffff7ab09eec  1772  0000ffff       constant
0xffff7ab09ef0  1776  09abe8c0       constant
0xffff7ab09ef4  1780  00000000       constant
0xffff7ab09ef8  1784  7ab065a0       constant
0xffff7ab09efc  1788  0000ffff       constant
0xffff7ab09f00  1792  09abd2d0       constant
0xffff7ab09f04  1796  00000000       constant
0xffff7ab09f08  1800  00c2d958       constant
0xffff7ab09f0c  1804  00000000       constant
0xffff7ab09f10  1808  09abe8c0       constant
0xffff7ab09f14  1812  00000000       constant
0xffff7ab09f18  1816  7ab065a0       constant
0xffff7ab09f1c  1820  0000ffff       constant
0xffff7ab09f20  1824  09abd2d0       constant
0xffff7ab09f24  1828  00000000       constant
0xffff7ab09f28  1832  00c2d958       constant
0xffff7ab09f2c  1836  00000000       constant
0xffff7ab09f30  1840  09abe8c0       constant
0xffff7ab09f34  1844  00000000       constant
0xffff7ab09f38  1848  7ab065a0       constant
0xffff7ab09f3c  1852  0000ffff       constant
0xffff7ab09f40  1856  09abe8c0       constant
0xffff7ab09f44  1860  00000000       constant
0xffff7ab09f48  1864  7ab065a0       constant
0xffff7ab09f4c  1868  0000ffff       constant
0xffff7ab09f50  1872  09abd2d0       constant
0xffff7ab09f54  1876  00000000       constant
0xffff7ab09f58  1880  00c2d958       constant
0xffff7ab09f5c  1884  00000000       constant
0xffff7ab09f60  1888  09abe8c0       constant
0xffff7ab09f64  1892  00000000       constant
0xffff7ab09f68  1896  7ab065a0       constant
0xffff7ab09f6c  1900  0000ffff       constant
0xffff7ab09f70  1904  09abd2d0       constant
0xffff7ab09f74  1908  00000000       constant
0xffff7ab09f78  1912  00c2d958       constant
0xffff7ab09f7c  1916  00000000       constant


RelocInfo (size = 65)
0xffff7ab09808  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0982c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab098a4  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab098c8  code target (STUB)  (0xffff7ab065a0)
0xffff7ab09908  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0992c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0999c  external reference (isolate)  (0x9abd2d0)
0xffff7ab099a0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab099fc  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab09a20  code target (STUB)  (0xffff7ab065a0)
0xffff7ab09b00  external reference (isolate)  (0x9abd2d0)
0xffff7ab09b04  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab09bc8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab09bec  code target (STUB)  (0xffff7ab065a0)
0xffff7ab09c4c  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab09c70  code target (STUB)  (0xffff7ab065a0)
0xffff7ab09ce0  external reference (isolate)  (0x9abd2d0)
0xffff7ab09ce4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab09d40  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab09d64  code target (STUB)  (0xffff7ab065a0)
0xffff7ab09e64  external reference (isolate)  (0x9abd2d0)
0xffff7ab09e68  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab09ec8  constant pool (size 184)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 690)
0xffff7ab09fe0     0  movz x16, #0xa00000000
0xffff7ab09fe4     4  sub csp, jssp, #0x10 (16)
0xffff7ab09fe8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab09fec    12  mov fp, jssp
0xffff7ab09ff0    16  sub csp, jssp, #0x8 (8)
0xffff7ab09ff4    20  sub jssp, jssp, #0x8 (8)
0xffff7ab09ff8    24  stur x16, [fp, #-8]
0xffff7ab09ffc    28  movz w16, #0x257f
0xffff7ab0a000    32  cmp w0, w16, lsl #3
0xffff7ab0a004    36  b.hs #+0x234 (addr 0xffff7ab0a238)
0xffff7ab0a008    40  lsl x3, x0, #32
0xffff7ab0a00c    44  lsl w4, w0, #3
0xffff7ab0a010    48  add w4, w4, #0x10 (16)
0xffff7ab0a014    52  cmp w4, #0x96000 (614400)
0xffff7ab0a018    56  b.hs #+0x228 (addr 0xffff7ab0a240)
0xffff7ab0a01c    60  movz x6, #0xe2c0
0xffff7ab0a020    64  movk x6, #0x9ab, lsl #16
0xffff7ab0a024    68  ldp x7, x5, [x6]
0xffff7ab0a028    72  adds x16, x7, #0x30 (48)
0xffff7ab0a02c    76  ccmp x16, x5, #nzCv, lo
0xffff7ab0a030    80  b.hi #+0x114 (addr 0xffff7ab0a144)
0xffff7ab0a034    84  str x16, [x6]
0xffff7ab0a038    88  orr x7, x7, #0x1
0xffff7ab0a03c    92  ldur x5, [x1, #23]
0xffff7ab0a040    96  stur x5, [x7, #-1]
0xffff7ab0a044   100  ldr x5, pc+404 (addr 0x0000ffff7ab0a1d8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0a048   104  stur x5, [x7, #7]
0xffff7ab0a04c   108  ldr x5, pc+404 (addr 0x0000ffff7ab0a1e0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0a050   112  stur x5, [x7, #15]
0xffff7ab0a054   116  stur x3, [x7, #23]
0xffff7ab0a058   120  add x5, x7, #0x20 (32)
0xffff7ab0a05c   124  ldr x6, pc+396 (addr 0x0000ffff7ab0a1e8)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab0a060   128  stur x6, [x5, #-1]
0xffff7ab0a064   132  stur x2, [x5, #7]
0xffff7ab0a068   136  ldur w5, [x2, #35]
0xffff7ab0a06c   140  add w5, w5, #0x1 (1)
0xffff7ab0a070   144  lsl x5, x5, #32
0xffff7ab0a074   148  stur x5, [x2, #31]
0xffff7ab0a078   152  sxtw x4, w4
0xffff7ab0a07c   156  movz x5, #0xe2c0
0xffff7ab0a080   160  movk x5, #0x9ab, lsl #16
0xffff7ab0a084   164  ldp x8, x16, [x5]
0xffff7ab0a088   168  adds x6, x8, x4
0xffff7ab0a08c   172  ccmp x6, x16, #nzCv, lo
0xffff7ab0a090   176  b.hi #+0xf8 (addr 0xffff7ab0a188)
0xffff7ab0a094   180  str x6, [x5]
0xffff7ab0a098   184  orr x8, x8, #0x1
0xffff7ab0a09c   188  ldr x4, pc+340 (addr 0x0000ffff7ab0a1f0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab0a0a0   192  stur x4, [x8, #-1]
0xffff7ab0a0a4   196  stur x3, [x8, #7]
0xffff7ab0a0a8   200  mov x3, x8
0xffff7ab0a0ac   204  stur x3, [x7, #15]
0xffff7ab0a0b0   208  add x4, x7, #0xf (15)
0xffff7ab0a0b4   212  and x3, x7, #0xfffffffffff00000
0xffff7ab0a0b8   216  ldr x3, [x3, #8]
0xffff7ab0a0bc   220  tbz w3, #2, #+0xc (addr 0xffff7ab0a0c8)
0xffff7ab0a0c0   224  ldr x16, pc+312 (addr 0x0000ffff7ab0a1f8)    ;; code: STUB, RecordWriteStub, minor: 69735
0xffff7ab0a0c4   228  blr x16
0xffff7ab0a0c8   232  mov x3, x0
0xffff7ab0a0cc   236  cmp w3, #0x0 (0)
0xffff7ab0a0d0   240  b.le #+0x18 (addr 0xffff7ab0a0e8)
0xffff7ab0a0d4   244  sub w3, w3, #0x1 (1)
0xffff7ab0a0d8   248  ldr x4, pc+296 (addr 0x0000ffff7ab0a200)    ;; object: 0x20d04519 <the hole>
0xffff7ab0a0dc   252  add x5, x8, #0xf (15)
0xffff7ab0a0e0   256  str x4, [x5, w3, sxtw #3]
0xffff7ab0a0e4   260  b #-0x18 (addr 0xffff7ab0a0cc)
0xffff7ab0a0e8   264  ldr x3, [fp]
0xffff7ab0a0ec   268  ldur x4, [x3, #-8]
0xffff7ab0a0f0   272  movz x16, #0xe00000000
0xffff7ab0a0f4   276  cmp x4, x16
0xffff7ab0a0f8   280  csel x4, fp, x3, ne
0xffff7ab0a0fc   284  movz x3, #0x0
0xffff7ab0a100   288  cmp w0, w3
0xffff7ab0a104   292  b.le #+0x24 (addr 0xffff7ab0a128)
0xffff7ab0a108   296  sub w5, w0, w3
0xffff7ab0a10c   300  add w5, w5, #0x1 (1)
0xffff7ab0a110   304  ldr x5, [x4, w5, uxtw #3]
0xffff7ab0a114   308  tbnz w5, #0, #+0x134 (addr 0xffff7ab0a248)
0xffff7ab0a118   312  add x6, x8, #0xf (15)
0xffff7ab0a11c   316  str x5, [x6, w3, sxtw #3]
0xffff7ab0a120   320  add w3, w3, #0x1 (1)
0xffff7ab0a124   324  b #-0x24 (addr 0xffff7ab0a100)
0xffff7ab0a128   328  add w0, w0, #0x1 (1)
0xffff7ab0a12c   332  lsl x1, x0, #32
0xffff7ab0a130   336  mov x0, x7
0xffff7ab0a134   340  mov jssp, fp
0xffff7ab0a138   344  ldp fp, lr, [jssp], #16
0xffff7ab0a13c   348  add jssp, jssp, x1, lsr #29
0xffff7ab0a140   352  ret
0xffff7ab0a144   356  movz x7, #0x0
0xffff7ab0a148   360  mov x16, lr
0xffff7ab0a14c   364  ldr x17, pc+188 (addr 0x0000ffff7ab0a208)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0a150   368  blr x17
0xffff7ab0a154   372  movz x0, #0x3000000000
0xffff7ab0a158   376  movz x10, #0x0
0xffff7ab0a15c   380  sub csp, jssp, #0x10 (16)
0xffff7ab0a160   384  stp x10, x0, [jssp, #-16]!
0xffff7ab0a164   388  movz x0, #0x2
0xffff7ab0a168   392  movz x1, #0x5b88
0xffff7ab0a16c   396  movk x1, #0xe2, lsl #16
0xffff7ab0a170   400  ldr x16, pc+160 (addr 0x0000ffff7ab0a210)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0a174   404  blr x16
0xffff7ab0a178   408  str x0, [jssp, #56]
0xffff7ab0a17c   412  ldr x16, pc+156 (addr 0x0000ffff7ab0a218)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0a180   416  blr x16
0xffff7ab0a184   420  b #-0x148 (addr 0xffff7ab0a03c)
0xffff7ab0a188   424  movz x8, #0x0
0xffff7ab0a18c   428  mov x16, lr
0xffff7ab0a190   432  ldr x17, pc+144 (addr 0x0000ffff7ab0a220)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0a194   436  blr x17
0xffff7ab0a198   440  lsl x0, x4, #32
0xffff7ab0a19c   444  movz x10, #0x0
0xffff7ab0a1a0   448  sub csp, jssp, #0x10 (16)
0xffff7ab0a1a4   452  stp x10, x0, [jssp, #-16]!
0xffff7ab0a1a8   456  movz x0, #0x2
0xffff7ab0a1ac   460  movz x1, #0x5b88
0xffff7ab0a1b0   464  movk x1, #0xe2, lsl #16
0xffff7ab0a1b4   468  ldr x16, pc+116 (addr 0x0000ffff7ab0a228)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0a1b8   472  blr x16
0xffff7ab0a1bc   476  str x0, [jssp, #64]
0xffff7ab0a1c0   480  ldr x16, pc+112 (addr 0x0000ffff7ab0a230)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0a1c4   484  blr x16
0xffff7ab0a1c8   488  b #-0x12c (addr 0xffff7ab0a09c)
0xffff7ab0a1cc   492  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0xffff7ab0a1d0   496  d63f03e0       constant
0xffff7ab0a1d4   500  d503201f       constant
0xffff7ab0a1d8   504  20d04201       constant
0xffff7ab0a1dc   508  00000000       constant
0xffff7ab0a1e0   512  20d04201       constant
0xffff7ab0a1e4   516  00000000       constant
0xffff7ab0a1e8   520  4ec05d81       constant
0xffff7ab0a1ec   524  00000000       constant
0xffff7ab0a1f0   528  4ec04259       constant
0xffff7ab0a1f4   532  00000000       constant
0xffff7ab0a1f8   536  7ab09800       constant
0xffff7ab0a1fc   540  0000ffff       constant
0xffff7ab0a200   544  20d04519       constant
0xffff7ab0a204   548  00000000       constant
0xffff7ab0a208   552  7ab06820       constant
0xffff7ab0a20c   556  0000ffff       constant
0xffff7ab0a210   560  7ab06260       constant
0xffff7ab0a214   564  0000ffff       constant
0xffff7ab0a218   568  7ab068e0       constant
0xffff7ab0a21c   572  0000ffff       constant
0xffff7ab0a220   576  7ab06820       constant
0xffff7ab0a224   580  0000ffff       constant
0xffff7ab0a228   584  7ab06260       constant
0xffff7ab0a22c   588  0000ffff       constant
0xffff7ab0a230   592  7ab068e0       constant
0xffff7ab0a234   596  0000ffff       constant
0xffff7ab0a238   600  movz x16, #0x0
0xffff7ab0a23c   604  bl #+0x14 (addr 0xffff7ab0a250)
0xffff7ab0a240   608  movz x16, #0x8
0xffff7ab0a244   612  bl #+0xc (addr 0xffff7ab0a250)
0xffff7ab0a248   616  movz x16, #0x10
0xffff7ab0a24c   620  bl #+0x4 (addr 0xffff7ab0a250)
0xffff7ab0a250   624  ldr x17, pc+24 (addr 0x0000ffff7ab0a268)    ;; lazy deoptimization bailout 0
0xffff7ab0a254   628  add x17, x17, x16
0xffff7ab0a258   632  br x17
0xffff7ab0a25c   636  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0a260   640  d63f03e0       constant
0xffff7ab0a264   644  d503201f       constant
0xffff7ab0a268   648  7a906000       constant
0xffff7ab0a26c   652  0000ffff       constant


Safepoints (size = 34)
0xffff7ab0a178   408  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2
0xffff7ab0a1bc   476  000 | x1 | x2 | x7 | x8 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0xffff7ab0a044  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0a04c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0a05c  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab0a09c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab0a0c0  code target (STUB)  (0xffff7ab09800)
0xffff7ab0a0d8  embedded object  (0x20d04519 <the hole>)
0xffff7ab0a14c  code target (STUB)  (0xffff7ab06820)
0xffff7ab0a170  code target (STUB)  (0xffff7ab06260)
0xffff7ab0a17c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0a190  code target (STUB)  (0xffff7ab06820)
0xffff7ab0a1b4  code target (STUB)  (0xffff7ab06260)
0xffff7ab0a1c0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0a1cc  constant pool (size 108)
0xffff7ab0a250  runtime entry
0xffff7ab0a25c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNArgumentsConstructorStub
name = ArrayNArgumentsConstructorStub_FAST_SMI_ELEMENTS
compiler = crankshaft
Instructions (size = 690)
0xffff7ab09fe0     0  movz x16, #0xa00000000
0xffff7ab09fe4     4  sub csp, jssp, #0x10 (16)
0xffff7ab09fe8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab09fec    12  mov fp, jssp
0xffff7ab09ff0    16  sub csp, jssp, #0x8 (8)
0xffff7ab09ff4    20  sub jssp, jssp, #0x8 (8)
0xffff7ab09ff8    24  stur x16, [fp, #-8]
0xffff7ab09ffc    28  movz w16, #0x257f
0xffff7ab0a000    32  cmp w0, w16, lsl #3
0xffff7ab0a004    36  b.hs #+0x234 (addr 0xffff7ab0a238)
0xffff7ab0a008    40  lsl x3, x0, #32
0xffff7ab0a00c    44  lsl w4, w0, #3
0xffff7ab0a010    48  add w4, w4, #0x10 (16)
0xffff7ab0a014    52  cmp w4, #0x96000 (614400)
0xffff7ab0a018    56  b.hs #+0x228 (addr 0xffff7ab0a240)
0xffff7ab0a01c    60  movz x6, #0xe2c0
0xffff7ab0a020    64  movk x6, #0x9ab, lsl #16
0xffff7ab0a024    68  ldp x7, x5, [x6]
0xffff7ab0a028    72  adds x16, x7, #0x30 (48)
0xffff7ab0a02c    76  ccmp x16, x5, #nzCv, lo
0xffff7ab0a030    80  b.hi #+0x114 (addr 0xffff7ab0a144)
0xffff7ab0a034    84  str x16, [x6]
0xffff7ab0a038    88  orr x7, x7, #0x1
0xffff7ab0a03c    92  ldur x5, [x1, #23]
0xffff7ab0a040    96  stur x5, [x7, #-1]
0xffff7ab0a044   100  ldr x5, pc+404 (addr 0x0000ffff7ab0a1d8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0a048   104  stur x5, [x7, #7]
0xffff7ab0a04c   108  ldr x5, pc+404 (addr 0x0000ffff7ab0a1e0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0a050   112  stur x5, [x7, #15]
0xffff7ab0a054   116  stur x3, [x7, #23]
0xffff7ab0a058   120  add x5, x7, #0x20 (32)
0xffff7ab0a05c   124  ldr x6, pc+396 (addr 0x0000ffff7ab0a1e8)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab0a060   128  stur x6, [x5, #-1]
0xffff7ab0a064   132  stur x2, [x5, #7]
0xffff7ab0a068   136  ldur w5, [x2, #35]
0xffff7ab0a06c   140  add w5, w5, #0x1 (1)
0xffff7ab0a070   144  lsl x5, x5, #32
0xffff7ab0a074   148  stur x5, [x2, #31]
0xffff7ab0a078   152  sxtw x4, w4
0xffff7ab0a07c   156  movz x5, #0xe2c0
0xffff7ab0a080   160  movk x5, #0x9ab, lsl #16
0xffff7ab0a084   164  ldp x8, x16, [x5]
0xffff7ab0a088   168  adds x6, x8, x4
0xffff7ab0a08c   172  ccmp x6, x16, #nzCv, lo
0xffff7ab0a090   176  b.hi #+0xf8 (addr 0xffff7ab0a188)
0xffff7ab0a094   180  str x6, [x5]
0xffff7ab0a098   184  orr x8, x8, #0x1
0xffff7ab0a09c   188  ldr x4, pc+340 (addr 0x0000ffff7ab0a1f0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab0a0a0   192  stur x4, [x8, #-1]
0xffff7ab0a0a4   196  stur x3, [x8, #7]
0xffff7ab0a0a8   200  mov x3, x8
0xffff7ab0a0ac   204  stur x3, [x7, #15]
0xffff7ab0a0b0   208  add x4, x7, #0xf (15)
0xffff7ab0a0b4   212  and x3, x7, #0xfffffffffff00000
0xffff7ab0a0b8   216  ldr x3, [x3, #8]
0xffff7ab0a0bc   220  tbz w3, #2, #+0xc (addr 0xffff7ab0a0c8)
0xffff7ab0a0c0   224  ldr x16, pc+312 (addr 0x0000ffff7ab0a1f8)    ;; code: STUB, RecordWriteStub, minor: 69735
0xffff7ab0a0c4   228  blr x16
0xffff7ab0a0c8   232  mov x3, x0
0xffff7ab0a0cc   236  cmp w3, #0x0 (0)
0xffff7ab0a0d0   240  b.le #+0x18 (addr 0xffff7ab0a0e8)
0xffff7ab0a0d4   244  sub w3, w3, #0x1 (1)
0xffff7ab0a0d8   248  ldr x4, pc+296 (addr 0x0000ffff7ab0a200)    ;; object: 0x20d04519 <the hole>
0xffff7ab0a0dc   252  add x5, x8, #0xf (15)
0xffff7ab0a0e0   256  str x4, [x5, w3, sxtw #3]
0xffff7ab0a0e4   260  b #-0x18 (addr 0xffff7ab0a0cc)
0xffff7ab0a0e8   264  ldr x3, [fp]
0xffff7ab0a0ec   268  ldur x4, [x3, #-8]
0xffff7ab0a0f0   272  movz x16, #0xe00000000
0xffff7ab0a0f4   276  cmp x4, x16
0xffff7ab0a0f8   280  csel x4, fp, x3, ne
0xffff7ab0a0fc   284  movz x3, #0x0
0xffff7ab0a100   288  cmp w0, w3
0xffff7ab0a104   292  b.le #+0x24 (addr 0xffff7ab0a128)
0xffff7ab0a108   296  sub w5, w0, w3
0xffff7ab0a10c   300  add w5, w5, #0x1 (1)
0xffff7ab0a110   304  ldr x5, [x4, w5, uxtw #3]
0xffff7ab0a114   308  tbnz w5, #0, #+0x134 (addr 0xffff7ab0a248)
0xffff7ab0a118   312  add x6, x8, #0xf (15)
0xffff7ab0a11c   316  str x5, [x6, w3, sxtw #3]
0xffff7ab0a120   320  add w3, w3, #0x1 (1)
0xffff7ab0a124   324  b #-0x24 (addr 0xffff7ab0a100)
0xffff7ab0a128   328  add w0, w0, #0x1 (1)
0xffff7ab0a12c   332  lsl x1, x0, #32
0xffff7ab0a130   336  mov x0, x7
0xffff7ab0a134   340  mov jssp, fp
0xffff7ab0a138   344  ldp fp, lr, [jssp], #16
0xffff7ab0a13c   348  add jssp, jssp, x1, lsr #29
0xffff7ab0a140   352  ret
0xffff7ab0a144   356  movz x7, #0x0
0xffff7ab0a148   360  mov x16, lr
0xffff7ab0a14c   364  ldr x17, pc+188 (addr 0x0000ffff7ab0a208)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0a150   368  blr x17
0xffff7ab0a154   372  movz x0, #0x3000000000
0xffff7ab0a158   376  movz x10, #0x0
0xffff7ab0a15c   380  sub csp, jssp, #0x10 (16)
0xffff7ab0a160   384  stp x10, x0, [jssp, #-16]!
0xffff7ab0a164   388  movz x0, #0x2
0xffff7ab0a168   392  movz x1, #0x5b88
0xffff7ab0a16c   396  movk x1, #0xe2, lsl #16
0xffff7ab0a170   400  ldr x16, pc+160 (addr 0x0000ffff7ab0a210)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0a174   404  blr x16
0xffff7ab0a178   408  str x0, [jssp, #56]
0xffff7ab0a17c   412  ldr x16, pc+156 (addr 0x0000ffff7ab0a218)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0a180   416  blr x16
0xffff7ab0a184   420  b #-0x148 (addr 0xffff7ab0a03c)
0xffff7ab0a188   424  movz x8, #0x0
0xffff7ab0a18c   428  mov x16, lr
0xffff7ab0a190   432  ldr x17, pc+144 (addr 0x0000ffff7ab0a220)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0a194   436  blr x17
0xffff7ab0a198   440  lsl x0, x4, #32
0xffff7ab0a19c   444  movz x10, #0x0
0xffff7ab0a1a0   448  sub csp, jssp, #0x10 (16)
0xffff7ab0a1a4   452  stp x10, x0, [jssp, #-16]!
0xffff7ab0a1a8   456  movz x0, #0x2
0xffff7ab0a1ac   460  movz x1, #0x5b88
0xffff7ab0a1b0   464  movk x1, #0xe2, lsl #16
0xffff7ab0a1b4   468  ldr x16, pc+116 (addr 0x0000ffff7ab0a228)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0a1b8   472  blr x16
0xffff7ab0a1bc   476  str x0, [jssp, #64]
0xffff7ab0a1c0   480  ldr x16, pc+112 (addr 0x0000ffff7ab0a230)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0a1c4   484  blr x16
0xffff7ab0a1c8   488  b #-0x12c (addr 0xffff7ab0a09c)
0xffff7ab0a1cc   492  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0xffff7ab0a1d0   496  d63f03e0       constant
0xffff7ab0a1d4   500  d503201f       constant
0xffff7ab0a1d8   504  20d04201       constant
0xffff7ab0a1dc   508  00000000       constant
0xffff7ab0a1e0   512  20d04201       constant
0xffff7ab0a1e4   516  00000000       constant
0xffff7ab0a1e8   520  4ec05d81       constant
0xffff7ab0a1ec   524  00000000       constant
0xffff7ab0a1f0   528  4ec04259       constant
0xffff7ab0a1f4   532  00000000       constant
0xffff7ab0a1f8   536  7ab09800       constant
0xffff7ab0a1fc   540  0000ffff       constant
0xffff7ab0a200   544  20d04519       constant
0xffff7ab0a204   548  00000000       constant
0xffff7ab0a208   552  7ab06820       constant
0xffff7ab0a20c   556  0000ffff       constant
0xffff7ab0a210   560  7ab06260       constant
0xffff7ab0a214   564  0000ffff       constant
0xffff7ab0a218   568  7ab068e0       constant
0xffff7ab0a21c   572  0000ffff       constant
0xffff7ab0a220   576  7ab06820       constant
0xffff7ab0a224   580  0000ffff       constant
0xffff7ab0a228   584  7ab06260       constant
0xffff7ab0a22c   588  0000ffff       constant
0xffff7ab0a230   592  7ab068e0       constant
0xffff7ab0a234   596  0000ffff       constant
0xffff7ab0a238   600  movz x16, #0x0
0xffff7ab0a23c   604  bl #+0x14 (addr 0xffff7ab0a250)
0xffff7ab0a240   608  movz x16, #0x8
0xffff7ab0a244   612  bl #+0xc (addr 0xffff7ab0a250)
0xffff7ab0a248   616  movz x16, #0x10
0xffff7ab0a24c   620  bl #+0x4 (addr 0xffff7ab0a250)
0xffff7ab0a250   624  ldr x17, pc+24 (addr 0x0000ffff7ab0a268)    ;; lazy deoptimization bailout 0
0xffff7ab0a254   628  add x17, x17, x16
0xffff7ab0a258   632  br x17
0xffff7ab0a25c   636  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0a260   640  d63f03e0       constant
0xffff7ab0a264   644  d503201f       constant
0xffff7ab0a268   648  7a906000       constant
0xffff7ab0a26c   652  0000ffff       constant


Safepoints (size = 34)
0xffff7ab0a178   408  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2
0xffff7ab0a1bc   476  000 | x1 | x2 | x7 | x8 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0xffff7ab0a044  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0a04c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0a05c  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab0a09c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab0a0c0  code target (STUB)  (0xffff7ab09800)
0xffff7ab0a0d8  embedded object  (0x20d04519 <the hole>)
0xffff7ab0a14c  code target (STUB)  (0xffff7ab06820)
0xffff7ab0a170  code target (STUB)  (0xffff7ab06260)
0xffff7ab0a17c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0a190  code target (STUB)  (0xffff7ab06820)
0xffff7ab0a1b4  code target (STUB)  (0xffff7ab06260)
0xffff7ab0a1c0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0a1cc  constant pool (size 108)
0xffff7ab0a250  runtime entry
0xffff7ab0a25c  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 493)
0xffff7ab0a300     0  movz x16, #0xa00000000
0xffff7ab0a304     4  sub csp, jssp, #0x10 (16)
0xffff7ab0a308     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0a30c    12  mov fp, jssp
0xffff7ab0a310    16  sub csp, jssp, #0x8 (8)
0xffff7ab0a314    20  sub jssp, jssp, #0x8 (8)
0xffff7ab0a318    24  stur x16, [fp, #-8]
0xffff7ab0a31c    28  movz w16, #0x257f
0xffff7ab0a320    32  cmp w0, w16, lsl #3
0xffff7ab0a324    36  b.hs #+0x17c (addr 0xffff7ab0a4a0)
0xffff7ab0a328    40  lsl x3, x0, #32
0xffff7ab0a32c    44  lsl w4, w0, #3
0xffff7ab0a330    48  add w4, w4, #0x10 (16)
0xffff7ab0a334    52  cmp w4, #0x96000 (614400)
0xffff7ab0a338    56  b.hs #+0x170 (addr 0xffff7ab0a4a8)
0xffff7ab0a33c    60  add w4, w4, #0x20 (32)
0xffff7ab0a340    64  sxtw x4, w4
0xffff7ab0a344    68  movz x5, #0xe2c0
0xffff7ab0a348    72  movk x5, #0x9ab, lsl #16
0xffff7ab0a34c    76  ldp x7, x16, [x5]
0xffff7ab0a350    80  adds x6, x7, x4
0xffff7ab0a354    84  ccmp x6, x16, #nzCv, lo
0xffff7ab0a358    88  b.hi #+0xc0 (addr 0xffff7ab0a418)
0xffff7ab0a35c    92  str x6, [x5]
0xffff7ab0a360    96  orr x7, x7, #0x1
0xffff7ab0a364   100  movz w4, #0x0
0xffff7ab0a368   104  stur x4, [x7, #31]
0xffff7ab0a36c   108  ldur x4, [x1, #23]
0xffff7ab0a370   112  stur x4, [x7, #-1]
0xffff7ab0a374   116  ldr x4, pc+244 (addr 0x0000ffff7ab0a468)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0a378   120  stur x4, [x7, #7]
0xffff7ab0a37c   124  ldr x4, pc+244 (addr 0x0000ffff7ab0a470)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0a380   128  stur x4, [x7, #15]
0xffff7ab0a384   132  stur x3, [x7, #23]
0xffff7ab0a388   136  add x4, x7, #0x20 (32)
0xffff7ab0a38c   140  ldr x5, pc+236 (addr 0x0000ffff7ab0a478)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab0a390   144  stur x5, [x4, #-1]
0xffff7ab0a394   148  stur x3, [x4, #7]
0xffff7ab0a398   152  stur x4, [x7, #15]
0xffff7ab0a39c   156  mov x3, x0
0xffff7ab0a3a0   160  cmp w3, #0x0 (0)
0xffff7ab0a3a4   164  b.le #+0x18 (addr 0xffff7ab0a3bc)
0xffff7ab0a3a8   168  sub w3, w3, #0x1 (1)
0xffff7ab0a3ac   172  ldr x5, pc+212 (addr 0x0000ffff7ab0a480)    ;; object: 0x20d04519 <the hole>
0xffff7ab0a3b0   176  add x6, x4, #0xf (15)
0xffff7ab0a3b4   180  str x5, [x6, w3, sxtw #3]
0xffff7ab0a3b8   184  b #-0x18 (addr 0xffff7ab0a3a0)
0xffff7ab0a3bc   188  ldr x3, [fp]
0xffff7ab0a3c0   192  ldur x5, [x3, #-8]
0xffff7ab0a3c4   196  movz x16, #0xe00000000
0xffff7ab0a3c8   200  cmp x5, x16
0xffff7ab0a3cc   204  csel x5, fp, x3, ne
0xffff7ab0a3d0   208  movz x3, #0x0
0xffff7ab0a3d4   212  cmp w0, w3
0xffff7ab0a3d8   216  b.le #+0x24 (addr 0xffff7ab0a3fc)
0xffff7ab0a3dc   220  sub w6, w0, w3
0xffff7ab0a3e0   224  add w6, w6, #0x1 (1)
0xffff7ab0a3e4   228  ldr x6, [x5, w6, uxtw #3]
0xffff7ab0a3e8   232  tbnz w6, #0, #+0xc8 (addr 0xffff7ab0a4b0)
0xffff7ab0a3ec   236  add x8, x4, #0xf (15)
0xffff7ab0a3f0   240  str x6, [x8, w3, sxtw #3]
0xffff7ab0a3f4   244  add w3, w3, #0x1 (1)
0xffff7ab0a3f8   248  b #-0x24 (addr 0xffff7ab0a3d4)
0xffff7ab0a3fc   252  add w0, w0, #0x1 (1)
0xffff7ab0a400   256  lsl x1, x0, #32
0xffff7ab0a404   260  mov x0, x7
0xffff7ab0a408   264  mov jssp, fp
0xffff7ab0a40c   268  ldp fp, lr, [jssp], #16
0xffff7ab0a410   272  add jssp, jssp, x1, lsr #29
0xffff7ab0a414   276  ret
0xffff7ab0a418   280  movz x7, #0x0
0xffff7ab0a41c   284  mov x16, lr
0xffff7ab0a420   288  ldr x17, pc+104 (addr 0x0000ffff7ab0a488)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0a424   292  blr x17
0xffff7ab0a428   296  lsl x0, x4, #32
0xffff7ab0a42c   300  movz x10, #0x0
0xffff7ab0a430   304  sub csp, jssp, #0x10 (16)
0xffff7ab0a434   308  stp x10, x0, [jssp, #-16]!
0xffff7ab0a438   312  movz x0, #0x2
0xffff7ab0a43c   316  movz x1, #0x5b88
0xffff7ab0a440   320  movk x1, #0xe2, lsl #16
0xffff7ab0a444   324  ldr x16, pc+76 (addr 0x0000ffff7ab0a490)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0a448   328  blr x16
0xffff7ab0a44c   332  str x0, [jssp, #56]
0xffff7ab0a450   336  ldr x16, pc+72 (addr 0x0000ffff7ab0a498)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0a454   340  blr x16
0xffff7ab0a458   344  b #-0xf4 (addr 0xffff7ab0a364)
0xffff7ab0a45c   348  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab0a460   352  d63f03e0       constant
0xffff7ab0a464   356  d503201f       constant
0xffff7ab0a468   360  20d04201       constant
0xffff7ab0a46c   364  00000000       constant
0xffff7ab0a470   368  20d04201       constant
0xffff7ab0a474   372  00000000       constant
0xffff7ab0a478   376  4ec04259       constant
0xffff7ab0a47c   380  00000000       constant
0xffff7ab0a480   384  20d04519       constant
0xffff7ab0a484   388  00000000       constant
0xffff7ab0a488   392  7ab06820       constant
0xffff7ab0a48c   396  0000ffff       constant
0xffff7ab0a490   400  7ab06260       constant
0xffff7ab0a494   404  0000ffff       constant
0xffff7ab0a498   408  7ab068e0       constant
0xffff7ab0a49c   412  0000ffff       constant
0xffff7ab0a4a0   416  movz x16, #0x0
0xffff7ab0a4a4   420  bl #+0x14 (addr 0xffff7ab0a4b8)
0xffff7ab0a4a8   424  movz x16, #0x8
0xffff7ab0a4ac   428  bl #+0xc (addr 0xffff7ab0a4b8)
0xffff7ab0a4b0   432  movz x16, #0x10
0xffff7ab0a4b4   436  bl #+0x4 (addr 0xffff7ab0a4b8)
0xffff7ab0a4b8   440  ldr x17, pc+24 (addr 0x0000ffff7ab0a4d0)    ;; lazy deoptimization bailout 0
0xffff7ab0a4bc   444  add x17, x17, x16
0xffff7ab0a4c0   448  br x17
0xffff7ab0a4c4   452  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0a4c8   456  d63f03e0       constant
0xffff7ab0a4cc   460  d503201f       constant
0xffff7ab0a4d0   464  7a906000       constant
0xffff7ab0a4d4   468  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0a44c   332  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab0a374  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0a37c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0a38c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab0a3ac  embedded object  (0x20d04519 <the hole>)
0xffff7ab0a420  code target (STUB)  (0xffff7ab06820)
0xffff7ab0a444  code target (STUB)  (0xffff7ab06260)
0xffff7ab0a450  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0a45c  constant pool (size 68)
0xffff7ab0a4b8  runtime entry
0xffff7ab0a4c4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNArgumentsConstructorStub
name = ArrayNArgumentsConstructorStub_FAST_SMI_ELEMENTS_DISABLE_ALLOCATION_SITES
compiler = crankshaft
Instructions (size = 493)
0xffff7ab0a300     0  movz x16, #0xa00000000
0xffff7ab0a304     4  sub csp, jssp, #0x10 (16)
0xffff7ab0a308     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0a30c    12  mov fp, jssp
0xffff7ab0a310    16  sub csp, jssp, #0x8 (8)
0xffff7ab0a314    20  sub jssp, jssp, #0x8 (8)
0xffff7ab0a318    24  stur x16, [fp, #-8]
0xffff7ab0a31c    28  movz w16, #0x257f
0xffff7ab0a320    32  cmp w0, w16, lsl #3
0xffff7ab0a324    36  b.hs #+0x17c (addr 0xffff7ab0a4a0)
0xffff7ab0a328    40  lsl x3, x0, #32
0xffff7ab0a32c    44  lsl w4, w0, #3
0xffff7ab0a330    48  add w4, w4, #0x10 (16)
0xffff7ab0a334    52  cmp w4, #0x96000 (614400)
0xffff7ab0a338    56  b.hs #+0x170 (addr 0xffff7ab0a4a8)
0xffff7ab0a33c    60  add w4, w4, #0x20 (32)
0xffff7ab0a340    64  sxtw x4, w4
0xffff7ab0a344    68  movz x5, #0xe2c0
0xffff7ab0a348    72  movk x5, #0x9ab, lsl #16
0xffff7ab0a34c    76  ldp x7, x16, [x5]
0xffff7ab0a350    80  adds x6, x7, x4
0xffff7ab0a354    84  ccmp x6, x16, #nzCv, lo
0xffff7ab0a358    88  b.hi #+0xc0 (addr 0xffff7ab0a418)
0xffff7ab0a35c    92  str x6, [x5]
0xffff7ab0a360    96  orr x7, x7, #0x1
0xffff7ab0a364   100  movz w4, #0x0
0xffff7ab0a368   104  stur x4, [x7, #31]
0xffff7ab0a36c   108  ldur x4, [x1, #23]
0xffff7ab0a370   112  stur x4, [x7, #-1]
0xffff7ab0a374   116  ldr x4, pc+244 (addr 0x0000ffff7ab0a468)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0a378   120  stur x4, [x7, #7]
0xffff7ab0a37c   124  ldr x4, pc+244 (addr 0x0000ffff7ab0a470)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0a380   128  stur x4, [x7, #15]
0xffff7ab0a384   132  stur x3, [x7, #23]
0xffff7ab0a388   136  add x4, x7, #0x20 (32)
0xffff7ab0a38c   140  ldr x5, pc+236 (addr 0x0000ffff7ab0a478)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab0a390   144  stur x5, [x4, #-1]
0xffff7ab0a394   148  stur x3, [x4, #7]
0xffff7ab0a398   152  stur x4, [x7, #15]
0xffff7ab0a39c   156  mov x3, x0
0xffff7ab0a3a0   160  cmp w3, #0x0 (0)
0xffff7ab0a3a4   164  b.le #+0x18 (addr 0xffff7ab0a3bc)
0xffff7ab0a3a8   168  sub w3, w3, #0x1 (1)
0xffff7ab0a3ac   172  ldr x5, pc+212 (addr 0x0000ffff7ab0a480)    ;; object: 0x20d04519 <the hole>
0xffff7ab0a3b0   176  add x6, x4, #0xf (15)
0xffff7ab0a3b4   180  str x5, [x6, w3, sxtw #3]
0xffff7ab0a3b8   184  b #-0x18 (addr 0xffff7ab0a3a0)
0xffff7ab0a3bc   188  ldr x3, [fp]
0xffff7ab0a3c0   192  ldur x5, [x3, #-8]
0xffff7ab0a3c4   196  movz x16, #0xe00000000
0xffff7ab0a3c8   200  cmp x5, x16
0xffff7ab0a3cc   204  csel x5, fp, x3, ne
0xffff7ab0a3d0   208  movz x3, #0x0
0xffff7ab0a3d4   212  cmp w0, w3
0xffff7ab0a3d8   216  b.le #+0x24 (addr 0xffff7ab0a3fc)
0xffff7ab0a3dc   220  sub w6, w0, w3
0xffff7ab0a3e0   224  add w6, w6, #0x1 (1)
0xffff7ab0a3e4   228  ldr x6, [x5, w6, uxtw #3]
0xffff7ab0a3e8   232  tbnz w6, #0, #+0xc8 (addr 0xffff7ab0a4b0)
0xffff7ab0a3ec   236  add x8, x4, #0xf (15)
0xffff7ab0a3f0   240  str x6, [x8, w3, sxtw #3]
0xffff7ab0a3f4   244  add w3, w3, #0x1 (1)
0xffff7ab0a3f8   248  b #-0x24 (addr 0xffff7ab0a3d4)
0xffff7ab0a3fc   252  add w0, w0, #0x1 (1)
0xffff7ab0a400   256  lsl x1, x0, #32
0xffff7ab0a404   260  mov x0, x7
0xffff7ab0a408   264  mov jssp, fp
0xffff7ab0a40c   268  ldp fp, lr, [jssp], #16
0xffff7ab0a410   272  add jssp, jssp, x1, lsr #29
0xffff7ab0a414   276  ret
0xffff7ab0a418   280  movz x7, #0x0
0xffff7ab0a41c   284  mov x16, lr
0xffff7ab0a420   288  ldr x17, pc+104 (addr 0x0000ffff7ab0a488)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0a424   292  blr x17
0xffff7ab0a428   296  lsl x0, x4, #32
0xffff7ab0a42c   300  movz x10, #0x0
0xffff7ab0a430   304  sub csp, jssp, #0x10 (16)
0xffff7ab0a434   308  stp x10, x0, [jssp, #-16]!
0xffff7ab0a438   312  movz x0, #0x2
0xffff7ab0a43c   316  movz x1, #0x5b88
0xffff7ab0a440   320  movk x1, #0xe2, lsl #16
0xffff7ab0a444   324  ldr x16, pc+76 (addr 0x0000ffff7ab0a490)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0a448   328  blr x16
0xffff7ab0a44c   332  str x0, [jssp, #56]
0xffff7ab0a450   336  ldr x16, pc+72 (addr 0x0000ffff7ab0a498)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0a454   340  blr x16
0xffff7ab0a458   344  b #-0xf4 (addr 0xffff7ab0a364)
0xffff7ab0a45c   348  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab0a460   352  d63f03e0       constant
0xffff7ab0a464   356  d503201f       constant
0xffff7ab0a468   360  20d04201       constant
0xffff7ab0a46c   364  00000000       constant
0xffff7ab0a470   368  20d04201       constant
0xffff7ab0a474   372  00000000       constant
0xffff7ab0a478   376  4ec04259       constant
0xffff7ab0a47c   380  00000000       constant
0xffff7ab0a480   384  20d04519       constant
0xffff7ab0a484   388  00000000       constant
0xffff7ab0a488   392  7ab06820       constant
0xffff7ab0a48c   396  0000ffff       constant
0xffff7ab0a490   400  7ab06260       constant
0xffff7ab0a494   404  0000ffff       constant
0xffff7ab0a498   408  7ab068e0       constant
0xffff7ab0a49c   412  0000ffff       constant
0xffff7ab0a4a0   416  movz x16, #0x0
0xffff7ab0a4a4   420  bl #+0x14 (addr 0xffff7ab0a4b8)
0xffff7ab0a4a8   424  movz x16, #0x8
0xffff7ab0a4ac   428  bl #+0xc (addr 0xffff7ab0a4b8)
0xffff7ab0a4b0   432  movz x16, #0x10
0xffff7ab0a4b4   436  bl #+0x4 (addr 0xffff7ab0a4b8)
0xffff7ab0a4b8   440  ldr x17, pc+24 (addr 0x0000ffff7ab0a4d0)    ;; lazy deoptimization bailout 0
0xffff7ab0a4bc   444  add x17, x17, x16
0xffff7ab0a4c0   448  br x17
0xffff7ab0a4c4   452  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0a4c8   456  d63f03e0       constant
0xffff7ab0a4cc   460  d503201f       constant
0xffff7ab0a4d0   464  7a906000       constant
0xffff7ab0a4d4   468  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0a44c   332  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab0a374  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0a37c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0a38c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab0a3ac  embedded object  (0x20d04519 <the hole>)
0xffff7ab0a420  code target (STUB)  (0xffff7ab06820)
0xffff7ab0a444  code target (STUB)  (0xffff7ab06260)
0xffff7ab0a450  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0a45c  constant pool (size 68)
0xffff7ab0a4b8  runtime entry
0xffff7ab0a4c4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 698)
0xffff7ab0a560     0  movz x16, #0xa00000000
0xffff7ab0a564     4  sub csp, jssp, #0x10 (16)
0xffff7ab0a568     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0a56c    12  mov fp, jssp
0xffff7ab0a570    16  sub csp, jssp, #0x8 (8)
0xffff7ab0a574    20  sub jssp, jssp, #0x8 (8)
0xffff7ab0a578    24  stur x16, [fp, #-8]
0xffff7ab0a57c    28  movz w16, #0x257f
0xffff7ab0a580    32  cmp w0, w16, lsl #3
0xffff7ab0a584    36  b.hs #+0x23c (addr 0xffff7ab0a7c0)
0xffff7ab0a588    40  lsl x3, x0, #32
0xffff7ab0a58c    44  lsl w4, w0, #3
0xffff7ab0a590    48  add w4, w4, #0x10 (16)
0xffff7ab0a594    52  cmp w4, #0x96000 (614400)
0xffff7ab0a598    56  b.hs #+0x230 (addr 0xffff7ab0a7c8)
0xffff7ab0a59c    60  movz x6, #0xe2c0
0xffff7ab0a5a0    64  movk x6, #0x9ab, lsl #16
0xffff7ab0a5a4    68  ldp x7, x5, [x6]
0xffff7ab0a5a8    72  adds x16, x7, #0x30 (48)
0xffff7ab0a5ac    76  ccmp x16, x5, #nzCv, lo
0xffff7ab0a5b0    80  b.hi #+0x120 (addr 0xffff7ab0a6d0)
0xffff7ab0a5b4    84  str x16, [x6]
0xffff7ab0a5b8    88  orr x7, x7, #0x1
0xffff7ab0a5bc    92  ldur x5, [x1, #39]
0xffff7ab0a5c0    96  ldur x5, [x5, #39]
0xffff7ab0a5c4   100  movz x16, #0x17f
0xffff7ab0a5c8   104  ldr x5, [x5, x16]
0xffff7ab0a5cc   108  stur x5, [x7, #-1]
0xffff7ab0a5d0   112  ldr x5, pc+400 (addr 0x0000ffff7ab0a760)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0a5d4   116  stur x5, [x7, #7]
0xffff7ab0a5d8   120  ldr x5, pc+400 (addr 0x0000ffff7ab0a768)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0a5dc   124  stur x5, [x7, #15]
0xffff7ab0a5e0   128  stur x3, [x7, #23]
0xffff7ab0a5e4   132  add x5, x7, #0x20 (32)
0xffff7ab0a5e8   136  ldr x6, pc+392 (addr 0x0000ffff7ab0a770)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab0a5ec   140  stur x6, [x5, #-1]
0xffff7ab0a5f0   144  stur x2, [x5, #7]
0xffff7ab0a5f4   148  ldur w5, [x2, #35]
0xffff7ab0a5f8   152  add w5, w5, #0x1 (1)
0xffff7ab0a5fc   156  lsl x5, x5, #32
0xffff7ab0a600   160  stur x5, [x2, #31]
0xffff7ab0a604   164  sxtw x4, w4
0xffff7ab0a608   168  movz x5, #0xe2c0
0xffff7ab0a60c   172  movk x5, #0x9ab, lsl #16
0xffff7ab0a610   176  ldp x8, x16, [x5]
0xffff7ab0a614   180  adds x6, x8, x4
0xffff7ab0a618   184  ccmp x6, x16, #nzCv, lo
0xffff7ab0a61c   188  b.hi #+0xf8 (addr 0xffff7ab0a714)
0xffff7ab0a620   192  str x6, [x5]
0xffff7ab0a624   196  orr x8, x8, #0x1
0xffff7ab0a628   200  ldr x4, pc+336 (addr 0x0000ffff7ab0a778)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab0a62c   204  stur x4, [x8, #-1]
0xffff7ab0a630   208  stur x3, [x8, #7]
0xffff7ab0a634   212  mov x3, x8
0xffff7ab0a638   216  stur x3, [x7, #15]
0xffff7ab0a63c   220  add x4, x7, #0xf (15)
0xffff7ab0a640   224  and x3, x7, #0xfffffffffff00000
0xffff7ab0a644   228  ldr x3, [x3, #8]
0xffff7ab0a648   232  tbz w3, #2, #+0xc (addr 0xffff7ab0a654)
0xffff7ab0a64c   236  ldr x16, pc+308 (addr 0x0000ffff7ab0a780)    ;; code: STUB, RecordWriteStub, minor: 69735
0xffff7ab0a650   240  blr x16
0xffff7ab0a654   244  mov x3, x0
0xffff7ab0a658   248  cmp w3, #0x0 (0)
0xffff7ab0a65c   252  b.le #+0x18 (addr 0xffff7ab0a674)
0xffff7ab0a660   256  sub w3, w3, #0x1 (1)
0xffff7ab0a664   260  ldr x4, pc+292 (addr 0x0000ffff7ab0a788)    ;; object: 0x20d04519 <the hole>
0xffff7ab0a668   264  add x5, x8, #0xf (15)
0xffff7ab0a66c   268  str x4, [x5, w3, sxtw #3]
0xffff7ab0a670   272  b #-0x18 (addr 0xffff7ab0a658)
0xffff7ab0a674   276  ldr x3, [fp]
0xffff7ab0a678   280  ldur x4, [x3, #-8]
0xffff7ab0a67c   284  movz x16, #0xe00000000
0xffff7ab0a680   288  cmp x4, x16
0xffff7ab0a684   292  csel x4, fp, x3, ne
0xffff7ab0a688   296  movz x3, #0x0
0xffff7ab0a68c   300  cmp w0, w3
0xffff7ab0a690   304  b.le #+0x24 (addr 0xffff7ab0a6b4)
0xffff7ab0a694   308  sub w5, w0, w3
0xffff7ab0a698   312  add w5, w5, #0x1 (1)
0xffff7ab0a69c   316  ldr x5, [x4, w5, uxtw #3]
0xffff7ab0a6a0   320  tbnz w5, #0, #+0x130 (addr 0xffff7ab0a7d0)
0xffff7ab0a6a4   324  add x6, x8, #0xf (15)
0xffff7ab0a6a8   328  str x5, [x6, w3, sxtw #3]
0xffff7ab0a6ac   332  add w3, w3, #0x1 (1)
0xffff7ab0a6b0   336  b #-0x24 (addr 0xffff7ab0a68c)
0xffff7ab0a6b4   340  add w0, w0, #0x1 (1)
0xffff7ab0a6b8   344  lsl x1, x0, #32
0xffff7ab0a6bc   348  mov x0, x7
0xffff7ab0a6c0   352  mov jssp, fp
0xffff7ab0a6c4   356  ldp fp, lr, [jssp], #16
0xffff7ab0a6c8   360  add jssp, jssp, x1, lsr #29
0xffff7ab0a6cc   364  ret
0xffff7ab0a6d0   368  movz x7, #0x0
0xffff7ab0a6d4   372  mov x16, lr
0xffff7ab0a6d8   376  ldr x17, pc+184 (addr 0x0000ffff7ab0a790)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0a6dc   380  blr x17
0xffff7ab0a6e0   384  movz x0, #0x3000000000
0xffff7ab0a6e4   388  movz x10, #0x0
0xffff7ab0a6e8   392  sub csp, jssp, #0x10 (16)
0xffff7ab0a6ec   396  stp x10, x0, [jssp, #-16]!
0xffff7ab0a6f0   400  movz x0, #0x2
0xffff7ab0a6f4   404  movz x1, #0x5b88
0xffff7ab0a6f8   408  movk x1, #0xe2, lsl #16
0xffff7ab0a6fc   412  ldr x16, pc+156 (addr 0x0000ffff7ab0a798)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0a700   416  blr x16
0xffff7ab0a704   420  str x0, [jssp, #56]
0xffff7ab0a708   424  ldr x16, pc+152 (addr 0x0000ffff7ab0a7a0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0a70c   428  blr x16
0xffff7ab0a710   432  b #-0x154 (addr 0xffff7ab0a5bc)
0xffff7ab0a714   436  movz x8, #0x0
0xffff7ab0a718   440  mov x16, lr
0xffff7ab0a71c   444  ldr x17, pc+140 (addr 0x0000ffff7ab0a7a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0a720   448  blr x17
0xffff7ab0a724   452  lsl x0, x4, #32
0xffff7ab0a728   456  movz x10, #0x0
0xffff7ab0a72c   460  sub csp, jssp, #0x10 (16)
0xffff7ab0a730   464  stp x10, x0, [jssp, #-16]!
0xffff7ab0a734   468  movz x0, #0x2
0xffff7ab0a738   472  movz x1, #0x5b88
0xffff7ab0a73c   476  movk x1, #0xe2, lsl #16
0xffff7ab0a740   480  ldr x16, pc+112 (addr 0x0000ffff7ab0a7b0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0a744   484  blr x16
0xffff7ab0a748   488  str x0, [jssp, #64]
0xffff7ab0a74c   492  ldr x16, pc+108 (addr 0x0000ffff7ab0a7b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0a750   496  blr x16
0xffff7ab0a754   500  b #-0x12c (addr 0xffff7ab0a628)
0xffff7ab0a758   504  5800033f       constant pool begin (num_const = 25)    ;; constant pool
0xffff7ab0a75c   508  d63f03e0       constant
0xffff7ab0a760   512  20d04201       constant
0xffff7ab0a764   516  00000000       constant
0xffff7ab0a768   520  20d04201       constant
0xffff7ab0a76c   524  00000000       constant
0xffff7ab0a770   528  4ec05d81       constant
0xffff7ab0a774   532  00000000       constant
0xffff7ab0a778   536  4ec04259       constant
0xffff7ab0a77c   540  00000000       constant
0xffff7ab0a780   544  7ab09800       constant
0xffff7ab0a784   548  0000ffff       constant
0xffff7ab0a788   552  20d04519       constant
0xffff7ab0a78c   556  00000000       constant
0xffff7ab0a790   560  7ab06820       constant
0xffff7ab0a794   564  0000ffff       constant
0xffff7ab0a798   568  7ab06260       constant
0xffff7ab0a79c   572  0000ffff       constant
0xffff7ab0a7a0   576  7ab068e0       constant
0xffff7ab0a7a4   580  0000ffff       constant
0xffff7ab0a7a8   584  7ab06820       constant
0xffff7ab0a7ac   588  0000ffff       constant
0xffff7ab0a7b0   592  7ab06260       constant
0xffff7ab0a7b4   596  0000ffff       constant
0xffff7ab0a7b8   600  7ab068e0       constant
0xffff7ab0a7bc   604  0000ffff       constant
0xffff7ab0a7c0   608  movz x16, #0x0
0xffff7ab0a7c4   612  bl #+0x14 (addr 0xffff7ab0a7d8)
0xffff7ab0a7c8   616  movz x16, #0x8
0xffff7ab0a7cc   620  bl #+0xc (addr 0xffff7ab0a7d8)
0xffff7ab0a7d0   624  movz x16, #0x10
0xffff7ab0a7d4   628  bl #+0x4 (addr 0xffff7ab0a7d8)
0xffff7ab0a7d8   632  ldr x17, pc+24 (addr 0x0000ffff7ab0a7f0)    ;; lazy deoptimization bailout 0
0xffff7ab0a7dc   636  add x17, x17, x16
0xffff7ab0a7e0   640  br x17
0xffff7ab0a7e4   644  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0a7e8   648  d63f03e0       constant
0xffff7ab0a7ec   652  d503201f       constant
0xffff7ab0a7f0   656  7a906000       constant
0xffff7ab0a7f4   660  0000ffff       constant


Safepoints (size = 34)
0xffff7ab0a704   420  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2
0xffff7ab0a748   488  000 | x1 | x2 | x7 | x8 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0xffff7ab0a5d0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0a5d8  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0a5e8  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab0a628  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab0a64c  code target (STUB)  (0xffff7ab09800)
0xffff7ab0a664  embedded object  (0x20d04519 <the hole>)
0xffff7ab0a6d8  code target (STUB)  (0xffff7ab06820)
0xffff7ab0a6fc  code target (STUB)  (0xffff7ab06260)
0xffff7ab0a708  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0a71c  code target (STUB)  (0xffff7ab06820)
0xffff7ab0a740  code target (STUB)  (0xffff7ab06260)
0xffff7ab0a74c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0a758  constant pool (size 104)
0xffff7ab0a7d8  runtime entry
0xffff7ab0a7e4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNArgumentsConstructorStub
name = ArrayNArgumentsConstructorStub_FAST_HOLEY_SMI_ELEMENTS
compiler = crankshaft
Instructions (size = 698)
0xffff7ab0a560     0  movz x16, #0xa00000000
0xffff7ab0a564     4  sub csp, jssp, #0x10 (16)
0xffff7ab0a568     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0a56c    12  mov fp, jssp
0xffff7ab0a570    16  sub csp, jssp, #0x8 (8)
0xffff7ab0a574    20  sub jssp, jssp, #0x8 (8)
0xffff7ab0a578    24  stur x16, [fp, #-8]
0xffff7ab0a57c    28  movz w16, #0x257f
0xffff7ab0a580    32  cmp w0, w16, lsl #3
0xffff7ab0a584    36  b.hs #+0x23c (addr 0xffff7ab0a7c0)
0xffff7ab0a588    40  lsl x3, x0, #32
0xffff7ab0a58c    44  lsl w4, w0, #3
0xffff7ab0a590    48  add w4, w4, #0x10 (16)
0xffff7ab0a594    52  cmp w4, #0x96000 (614400)
0xffff7ab0a598    56  b.hs #+0x230 (addr 0xffff7ab0a7c8)
0xffff7ab0a59c    60  movz x6, #0xe2c0
0xffff7ab0a5a0    64  movk x6, #0x9ab, lsl #16
0xffff7ab0a5a4    68  ldp x7, x5, [x6]
0xffff7ab0a5a8    72  adds x16, x7, #0x30 (48)
0xffff7ab0a5ac    76  ccmp x16, x5, #nzCv, lo
0xffff7ab0a5b0    80  b.hi #+0x120 (addr 0xffff7ab0a6d0)
0xffff7ab0a5b4    84  str x16, [x6]
0xffff7ab0a5b8    88  orr x7, x7, #0x1
0xffff7ab0a5bc    92  ldur x5, [x1, #39]
0xffff7ab0a5c0    96  ldur x5, [x5, #39]
0xffff7ab0a5c4   100  movz x16, #0x17f
0xffff7ab0a5c8   104  ldr x5, [x5, x16]
0xffff7ab0a5cc   108  stur x5, [x7, #-1]
0xffff7ab0a5d0   112  ldr x5, pc+400 (addr 0x0000ffff7ab0a760)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0a5d4   116  stur x5, [x7, #7]
0xffff7ab0a5d8   120  ldr x5, pc+400 (addr 0x0000ffff7ab0a768)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0a5dc   124  stur x5, [x7, #15]
0xffff7ab0a5e0   128  stur x3, [x7, #23]
0xffff7ab0a5e4   132  add x5, x7, #0x20 (32)
0xffff7ab0a5e8   136  ldr x6, pc+392 (addr 0x0000ffff7ab0a770)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab0a5ec   140  stur x6, [x5, #-1]
0xffff7ab0a5f0   144  stur x2, [x5, #7]
0xffff7ab0a5f4   148  ldur w5, [x2, #35]
0xffff7ab0a5f8   152  add w5, w5, #0x1 (1)
0xffff7ab0a5fc   156  lsl x5, x5, #32
0xffff7ab0a600   160  stur x5, [x2, #31]
0xffff7ab0a604   164  sxtw x4, w4
0xffff7ab0a608   168  movz x5, #0xe2c0
0xffff7ab0a60c   172  movk x5, #0x9ab, lsl #16
0xffff7ab0a610   176  ldp x8, x16, [x5]
0xffff7ab0a614   180  adds x6, x8, x4
0xffff7ab0a618   184  ccmp x6, x16, #nzCv, lo
0xffff7ab0a61c   188  b.hi #+0xf8 (addr 0xffff7ab0a714)
0xffff7ab0a620   192  str x6, [x5]
0xffff7ab0a624   196  orr x8, x8, #0x1
0xffff7ab0a628   200  ldr x4, pc+336 (addr 0x0000ffff7ab0a778)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab0a62c   204  stur x4, [x8, #-1]
0xffff7ab0a630   208  stur x3, [x8, #7]
0xffff7ab0a634   212  mov x3, x8
0xffff7ab0a638   216  stur x3, [x7, #15]
0xffff7ab0a63c   220  add x4, x7, #0xf (15)
0xffff7ab0a640   224  and x3, x7, #0xfffffffffff00000
0xffff7ab0a644   228  ldr x3, [x3, #8]
0xffff7ab0a648   232  tbz w3, #2, #+0xc (addr 0xffff7ab0a654)
0xffff7ab0a64c   236  ldr x16, pc+308 (addr 0x0000ffff7ab0a780)    ;; code: STUB, RecordWriteStub, minor: 69735
0xffff7ab0a650   240  blr x16
0xffff7ab0a654   244  mov x3, x0
0xffff7ab0a658   248  cmp w3, #0x0 (0)
0xffff7ab0a65c   252  b.le #+0x18 (addr 0xffff7ab0a674)
0xffff7ab0a660   256  sub w3, w3, #0x1 (1)
0xffff7ab0a664   260  ldr x4, pc+292 (addr 0x0000ffff7ab0a788)    ;; object: 0x20d04519 <the hole>
0xffff7ab0a668   264  add x5, x8, #0xf (15)
0xffff7ab0a66c   268  str x4, [x5, w3, sxtw #3]
0xffff7ab0a670   272  b #-0x18 (addr 0xffff7ab0a658)
0xffff7ab0a674   276  ldr x3, [fp]
0xffff7ab0a678   280  ldur x4, [x3, #-8]
0xffff7ab0a67c   284  movz x16, #0xe00000000
0xffff7ab0a680   288  cmp x4, x16
0xffff7ab0a684   292  csel x4, fp, x3, ne
0xffff7ab0a688   296  movz x3, #0x0
0xffff7ab0a68c   300  cmp w0, w3
0xffff7ab0a690   304  b.le #+0x24 (addr 0xffff7ab0a6b4)
0xffff7ab0a694   308  sub w5, w0, w3
0xffff7ab0a698   312  add w5, w5, #0x1 (1)
0xffff7ab0a69c   316  ldr x5, [x4, w5, uxtw #3]
0xffff7ab0a6a0   320  tbnz w5, #0, #+0x130 (addr 0xffff7ab0a7d0)
0xffff7ab0a6a4   324  add x6, x8, #0xf (15)
0xffff7ab0a6a8   328  str x5, [x6, w3, sxtw #3]
0xffff7ab0a6ac   332  add w3, w3, #0x1 (1)
0xffff7ab0a6b0   336  b #-0x24 (addr 0xffff7ab0a68c)
0xffff7ab0a6b4   340  add w0, w0, #0x1 (1)
0xffff7ab0a6b8   344  lsl x1, x0, #32
0xffff7ab0a6bc   348  mov x0, x7
0xffff7ab0a6c0   352  mov jssp, fp
0xffff7ab0a6c4   356  ldp fp, lr, [jssp], #16
0xffff7ab0a6c8   360  add jssp, jssp, x1, lsr #29
0xffff7ab0a6cc   364  ret
0xffff7ab0a6d0   368  movz x7, #0x0
0xffff7ab0a6d4   372  mov x16, lr
0xffff7ab0a6d8   376  ldr x17, pc+184 (addr 0x0000ffff7ab0a790)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0a6dc   380  blr x17
0xffff7ab0a6e0   384  movz x0, #0x3000000000
0xffff7ab0a6e4   388  movz x10, #0x0
0xffff7ab0a6e8   392  sub csp, jssp, #0x10 (16)
0xffff7ab0a6ec   396  stp x10, x0, [jssp, #-16]!
0xffff7ab0a6f0   400  movz x0, #0x2
0xffff7ab0a6f4   404  movz x1, #0x5b88
0xffff7ab0a6f8   408  movk x1, #0xe2, lsl #16
0xffff7ab0a6fc   412  ldr x16, pc+156 (addr 0x0000ffff7ab0a798)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0a700   416  blr x16
0xffff7ab0a704   420  str x0, [jssp, #56]
0xffff7ab0a708   424  ldr x16, pc+152 (addr 0x0000ffff7ab0a7a0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0a70c   428  blr x16
0xffff7ab0a710   432  b #-0x154 (addr 0xffff7ab0a5bc)
0xffff7ab0a714   436  movz x8, #0x0
0xffff7ab0a718   440  mov x16, lr
0xffff7ab0a71c   444  ldr x17, pc+140 (addr 0x0000ffff7ab0a7a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0a720   448  blr x17
0xffff7ab0a724   452  lsl x0, x4, #32
0xffff7ab0a728   456  movz x10, #0x0
0xffff7ab0a72c   460  sub csp, jssp, #0x10 (16)
0xffff7ab0a730   464  stp x10, x0, [jssp, #-16]!
0xffff7ab0a734   468  movz x0, #0x2
0xffff7ab0a738   472  movz x1, #0x5b88
0xffff7ab0a73c   476  movk x1, #0xe2, lsl #16
0xffff7ab0a740   480  ldr x16, pc+112 (addr 0x0000ffff7ab0a7b0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0a744   484  blr x16
0xffff7ab0a748   488  str x0, [jssp, #64]
0xffff7ab0a74c   492  ldr x16, pc+108 (addr 0x0000ffff7ab0a7b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0a750   496  blr x16
0xffff7ab0a754   500  b #-0x12c (addr 0xffff7ab0a628)
0xffff7ab0a758   504  5800033f       constant pool begin (num_const = 25)    ;; constant pool
0xffff7ab0a75c   508  d63f03e0       constant
0xffff7ab0a760   512  20d04201       constant
0xffff7ab0a764   516  00000000       constant
0xffff7ab0a768   520  20d04201       constant
0xffff7ab0a76c   524  00000000       constant
0xffff7ab0a770   528  4ec05d81       constant
0xffff7ab0a774   532  00000000       constant
0xffff7ab0a778   536  4ec04259       constant
0xffff7ab0a77c   540  00000000       constant
0xffff7ab0a780   544  7ab09800       constant
0xffff7ab0a784   548  0000ffff       constant
0xffff7ab0a788   552  20d04519       constant
0xffff7ab0a78c   556  00000000       constant
0xffff7ab0a790   560  7ab06820       constant
0xffff7ab0a794   564  0000ffff       constant
0xffff7ab0a798   568  7ab06260       constant
0xffff7ab0a79c   572  0000ffff       constant
0xffff7ab0a7a0   576  7ab068e0       constant
0xffff7ab0a7a4   580  0000ffff       constant
0xffff7ab0a7a8   584  7ab06820       constant
0xffff7ab0a7ac   588  0000ffff       constant
0xffff7ab0a7b0   592  7ab06260       constant
0xffff7ab0a7b4   596  0000ffff       constant
0xffff7ab0a7b8   600  7ab068e0       constant
0xffff7ab0a7bc   604  0000ffff       constant
0xffff7ab0a7c0   608  movz x16, #0x0
0xffff7ab0a7c4   612  bl #+0x14 (addr 0xffff7ab0a7d8)
0xffff7ab0a7c8   616  movz x16, #0x8
0xffff7ab0a7cc   620  bl #+0xc (addr 0xffff7ab0a7d8)
0xffff7ab0a7d0   624  movz x16, #0x10
0xffff7ab0a7d4   628  bl #+0x4 (addr 0xffff7ab0a7d8)
0xffff7ab0a7d8   632  ldr x17, pc+24 (addr 0x0000ffff7ab0a7f0)    ;; lazy deoptimization bailout 0
0xffff7ab0a7dc   636  add x17, x17, x16
0xffff7ab0a7e0   640  br x17
0xffff7ab0a7e4   644  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0a7e8   648  d63f03e0       constant
0xffff7ab0a7ec   652  d503201f       constant
0xffff7ab0a7f0   656  7a906000       constant
0xffff7ab0a7f4   660  0000ffff       constant


Safepoints (size = 34)
0xffff7ab0a704   420  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2
0xffff7ab0a748   488  000 | x1 | x2 | x7 | x8 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0xffff7ab0a5d0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0a5d8  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0a5e8  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab0a628  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab0a64c  code target (STUB)  (0xffff7ab09800)
0xffff7ab0a664  embedded object  (0x20d04519 <the hole>)
0xffff7ab0a6d8  code target (STUB)  (0xffff7ab06820)
0xffff7ab0a6fc  code target (STUB)  (0xffff7ab06260)
0xffff7ab0a708  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0a71c  code target (STUB)  (0xffff7ab06820)
0xffff7ab0a740  code target (STUB)  (0xffff7ab06260)
0xffff7ab0a74c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0a758  constant pool (size 104)
0xffff7ab0a7d8  runtime entry
0xffff7ab0a7e4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 501)
0xffff7ab0a880     0  movz x16, #0xa00000000
0xffff7ab0a884     4  sub csp, jssp, #0x10 (16)
0xffff7ab0a888     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0a88c    12  mov fp, jssp
0xffff7ab0a890    16  sub csp, jssp, #0x8 (8)
0xffff7ab0a894    20  sub jssp, jssp, #0x8 (8)
0xffff7ab0a898    24  stur x16, [fp, #-8]
0xffff7ab0a89c    28  movz w16, #0x257f
0xffff7ab0a8a0    32  cmp w0, w16, lsl #3
0xffff7ab0a8a4    36  b.hs #+0x184 (addr 0xffff7ab0aa28)
0xffff7ab0a8a8    40  lsl x3, x0, #32
0xffff7ab0a8ac    44  lsl w4, w0, #3
0xffff7ab0a8b0    48  add w4, w4, #0x10 (16)
0xffff7ab0a8b4    52  cmp w4, #0x96000 (614400)
0xffff7ab0a8b8    56  b.hs #+0x178 (addr 0xffff7ab0aa30)
0xffff7ab0a8bc    60  add w4, w4, #0x20 (32)
0xffff7ab0a8c0    64  sxtw x4, w4
0xffff7ab0a8c4    68  movz x5, #0xe2c0
0xffff7ab0a8c8    72  movk x5, #0x9ab, lsl #16
0xffff7ab0a8cc    76  ldp x7, x16, [x5]
0xffff7ab0a8d0    80  adds x6, x7, x4
0xffff7ab0a8d4    84  ccmp x6, x16, #nzCv, lo
0xffff7ab0a8d8    88  b.hi #+0xcc (addr 0xffff7ab0a9a4)
0xffff7ab0a8dc    92  str x6, [x5]
0xffff7ab0a8e0    96  orr x7, x7, #0x1
0xffff7ab0a8e4   100  movz w4, #0x0
0xffff7ab0a8e8   104  stur x4, [x7, #31]
0xffff7ab0a8ec   108  ldur x4, [x1, #39]
0xffff7ab0a8f0   112  ldur x4, [x4, #39]
0xffff7ab0a8f4   116  movz x16, #0x17f
0xffff7ab0a8f8   120  ldr x4, [x4, x16]
0xffff7ab0a8fc   124  stur x4, [x7, #-1]
0xffff7ab0a900   128  ldr x4, pc+240 (addr 0x0000ffff7ab0a9f0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0a904   132  stur x4, [x7, #7]
0xffff7ab0a908   136  ldr x4, pc+240 (addr 0x0000ffff7ab0a9f8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0a90c   140  stur x4, [x7, #15]
0xffff7ab0a910   144  stur x3, [x7, #23]
0xffff7ab0a914   148  add x4, x7, #0x20 (32)
0xffff7ab0a918   152  ldr x5, pc+232 (addr 0x0000ffff7ab0aa00)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab0a91c   156  stur x5, [x4, #-1]
0xffff7ab0a920   160  stur x3, [x4, #7]
0xffff7ab0a924   164  stur x4, [x7, #15]
0xffff7ab0a928   168  mov x3, x0
0xffff7ab0a92c   172  cmp w3, #0x0 (0)
0xffff7ab0a930   176  b.le #+0x18 (addr 0xffff7ab0a948)
0xffff7ab0a934   180  sub w3, w3, #0x1 (1)
0xffff7ab0a938   184  ldr x5, pc+208 (addr 0x0000ffff7ab0aa08)    ;; object: 0x20d04519 <the hole>
0xffff7ab0a93c   188  add x6, x4, #0xf (15)
0xffff7ab0a940   192  str x5, [x6, w3, sxtw #3]
0xffff7ab0a944   196  b #-0x18 (addr 0xffff7ab0a92c)
0xffff7ab0a948   200  ldr x3, [fp]
0xffff7ab0a94c   204  ldur x5, [x3, #-8]
0xffff7ab0a950   208  movz x16, #0xe00000000
0xffff7ab0a954   212  cmp x5, x16
0xffff7ab0a958   216  csel x5, fp, x3, ne
0xffff7ab0a95c   220  movz x3, #0x0
0xffff7ab0a960   224  cmp w0, w3
0xffff7ab0a964   228  b.le #+0x24 (addr 0xffff7ab0a988)
0xffff7ab0a968   232  sub w6, w0, w3
0xffff7ab0a96c   236  add w6, w6, #0x1 (1)
0xffff7ab0a970   240  ldr x6, [x5, w6, uxtw #3]
0xffff7ab0a974   244  tbnz w6, #0, #+0xc4 (addr 0xffff7ab0aa38)
0xffff7ab0a978   248  add x8, x4, #0xf (15)
0xffff7ab0a97c   252  str x6, [x8, w3, sxtw #3]
0xffff7ab0a980   256  add w3, w3, #0x1 (1)
0xffff7ab0a984   260  b #-0x24 (addr 0xffff7ab0a960)
0xffff7ab0a988   264  add w0, w0, #0x1 (1)
0xffff7ab0a98c   268  lsl x1, x0, #32
0xffff7ab0a990   272  mov x0, x7
0xffff7ab0a994   276  mov jssp, fp
0xffff7ab0a998   280  ldp fp, lr, [jssp], #16
0xffff7ab0a99c   284  add jssp, jssp, x1, lsr #29
0xffff7ab0a9a0   288  ret
0xffff7ab0a9a4   292  movz x7, #0x0
0xffff7ab0a9a8   296  mov x16, lr
0xffff7ab0a9ac   300  ldr x17, pc+100 (addr 0x0000ffff7ab0aa10)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0a9b0   304  blr x17
0xffff7ab0a9b4   308  lsl x0, x4, #32
0xffff7ab0a9b8   312  movz x10, #0x0
0xffff7ab0a9bc   316  sub csp, jssp, #0x10 (16)
0xffff7ab0a9c0   320  stp x10, x0, [jssp, #-16]!
0xffff7ab0a9c4   324  movz x0, #0x2
0xffff7ab0a9c8   328  movz x1, #0x5b88
0xffff7ab0a9cc   332  movk x1, #0xe2, lsl #16
0xffff7ab0a9d0   336  ldr x16, pc+72 (addr 0x0000ffff7ab0aa18)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0a9d4   340  blr x16
0xffff7ab0a9d8   344  str x0, [jssp, #56]
0xffff7ab0a9dc   348  ldr x16, pc+68 (addr 0x0000ffff7ab0aa20)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0a9e0   352  blr x16
0xffff7ab0a9e4   356  b #-0x100 (addr 0xffff7ab0a8e4)
0xffff7ab0a9e8   360  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab0a9ec   364  d63f03e0       constant
0xffff7ab0a9f0   368  20d04201       constant
0xffff7ab0a9f4   372  00000000       constant
0xffff7ab0a9f8   376  20d04201       constant
0xffff7ab0a9fc   380  00000000       constant
0xffff7ab0aa00   384  4ec04259       constant
0xffff7ab0aa04   388  00000000       constant
0xffff7ab0aa08   392  20d04519       constant
0xffff7ab0aa0c   396  00000000       constant
0xffff7ab0aa10   400  7ab06820       constant
0xffff7ab0aa14   404  0000ffff       constant
0xffff7ab0aa18   408  7ab06260       constant
0xffff7ab0aa1c   412  0000ffff       constant
0xffff7ab0aa20   416  7ab068e0       constant
0xffff7ab0aa24   420  0000ffff       constant
0xffff7ab0aa28   424  movz x16, #0x0
0xffff7ab0aa2c   428  bl #+0x14 (addr 0xffff7ab0aa40)
0xffff7ab0aa30   432  movz x16, #0x8
0xffff7ab0aa34   436  bl #+0xc (addr 0xffff7ab0aa40)
0xffff7ab0aa38   440  movz x16, #0x10
0xffff7ab0aa3c   444  bl #+0x4 (addr 0xffff7ab0aa40)
0xffff7ab0aa40   448  ldr x17, pc+24 (addr 0x0000ffff7ab0aa58)    ;; lazy deoptimization bailout 0
0xffff7ab0aa44   452  add x17, x17, x16
0xffff7ab0aa48   456  br x17
0xffff7ab0aa4c   460  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0aa50   464  d63f03e0       constant
0xffff7ab0aa54   468  d503201f       constant
0xffff7ab0aa58   472  7a906000       constant
0xffff7ab0aa5c   476  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0a9d8   344  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab0a900  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0a908  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0a918  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab0a938  embedded object  (0x20d04519 <the hole>)
0xffff7ab0a9ac  code target (STUB)  (0xffff7ab06820)
0xffff7ab0a9d0  code target (STUB)  (0xffff7ab06260)
0xffff7ab0a9dc  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0a9e8  constant pool (size 64)
0xffff7ab0aa40  runtime entry
0xffff7ab0aa4c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNArgumentsConstructorStub
name = ArrayNArgumentsConstructorStub_FAST_HOLEY_SMI_ELEMENTS_DISABLE_ALLOCATION_SITES
compiler = crankshaft
Instructions (size = 501)
0xffff7ab0a880     0  movz x16, #0xa00000000
0xffff7ab0a884     4  sub csp, jssp, #0x10 (16)
0xffff7ab0a888     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0a88c    12  mov fp, jssp
0xffff7ab0a890    16  sub csp, jssp, #0x8 (8)
0xffff7ab0a894    20  sub jssp, jssp, #0x8 (8)
0xffff7ab0a898    24  stur x16, [fp, #-8]
0xffff7ab0a89c    28  movz w16, #0x257f
0xffff7ab0a8a0    32  cmp w0, w16, lsl #3
0xffff7ab0a8a4    36  b.hs #+0x184 (addr 0xffff7ab0aa28)
0xffff7ab0a8a8    40  lsl x3, x0, #32
0xffff7ab0a8ac    44  lsl w4, w0, #3
0xffff7ab0a8b0    48  add w4, w4, #0x10 (16)
0xffff7ab0a8b4    52  cmp w4, #0x96000 (614400)
0xffff7ab0a8b8    56  b.hs #+0x178 (addr 0xffff7ab0aa30)
0xffff7ab0a8bc    60  add w4, w4, #0x20 (32)
0xffff7ab0a8c0    64  sxtw x4, w4
0xffff7ab0a8c4    68  movz x5, #0xe2c0
0xffff7ab0a8c8    72  movk x5, #0x9ab, lsl #16
0xffff7ab0a8cc    76  ldp x7, x16, [x5]
0xffff7ab0a8d0    80  adds x6, x7, x4
0xffff7ab0a8d4    84  ccmp x6, x16, #nzCv, lo
0xffff7ab0a8d8    88  b.hi #+0xcc (addr 0xffff7ab0a9a4)
0xffff7ab0a8dc    92  str x6, [x5]
0xffff7ab0a8e0    96  orr x7, x7, #0x1
0xffff7ab0a8e4   100  movz w4, #0x0
0xffff7ab0a8e8   104  stur x4, [x7, #31]
0xffff7ab0a8ec   108  ldur x4, [x1, #39]
0xffff7ab0a8f0   112  ldur x4, [x4, #39]
0xffff7ab0a8f4   116  movz x16, #0x17f
0xffff7ab0a8f8   120  ldr x4, [x4, x16]
0xffff7ab0a8fc   124  stur x4, [x7, #-1]
0xffff7ab0a900   128  ldr x4, pc+240 (addr 0x0000ffff7ab0a9f0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0a904   132  stur x4, [x7, #7]
0xffff7ab0a908   136  ldr x4, pc+240 (addr 0x0000ffff7ab0a9f8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0a90c   140  stur x4, [x7, #15]
0xffff7ab0a910   144  stur x3, [x7, #23]
0xffff7ab0a914   148  add x4, x7, #0x20 (32)
0xffff7ab0a918   152  ldr x5, pc+232 (addr 0x0000ffff7ab0aa00)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab0a91c   156  stur x5, [x4, #-1]
0xffff7ab0a920   160  stur x3, [x4, #7]
0xffff7ab0a924   164  stur x4, [x7, #15]
0xffff7ab0a928   168  mov x3, x0
0xffff7ab0a92c   172  cmp w3, #0x0 (0)
0xffff7ab0a930   176  b.le #+0x18 (addr 0xffff7ab0a948)
0xffff7ab0a934   180  sub w3, w3, #0x1 (1)
0xffff7ab0a938   184  ldr x5, pc+208 (addr 0x0000ffff7ab0aa08)    ;; object: 0x20d04519 <the hole>
0xffff7ab0a93c   188  add x6, x4, #0xf (15)
0xffff7ab0a940   192  str x5, [x6, w3, sxtw #3]
0xffff7ab0a944   196  b #-0x18 (addr 0xffff7ab0a92c)
0xffff7ab0a948   200  ldr x3, [fp]
0xffff7ab0a94c   204  ldur x5, [x3, #-8]
0xffff7ab0a950   208  movz x16, #0xe00000000
0xffff7ab0a954   212  cmp x5, x16
0xffff7ab0a958   216  csel x5, fp, x3, ne
0xffff7ab0a95c   220  movz x3, #0x0
0xffff7ab0a960   224  cmp w0, w3
0xffff7ab0a964   228  b.le #+0x24 (addr 0xffff7ab0a988)
0xffff7ab0a968   232  sub w6, w0, w3
0xffff7ab0a96c   236  add w6, w6, #0x1 (1)
0xffff7ab0a970   240  ldr x6, [x5, w6, uxtw #3]
0xffff7ab0a974   244  tbnz w6, #0, #+0xc4 (addr 0xffff7ab0aa38)
0xffff7ab0a978   248  add x8, x4, #0xf (15)
0xffff7ab0a97c   252  str x6, [x8, w3, sxtw #3]
0xffff7ab0a980   256  add w3, w3, #0x1 (1)
0xffff7ab0a984   260  b #-0x24 (addr 0xffff7ab0a960)
0xffff7ab0a988   264  add w0, w0, #0x1 (1)
0xffff7ab0a98c   268  lsl x1, x0, #32
0xffff7ab0a990   272  mov x0, x7
0xffff7ab0a994   276  mov jssp, fp
0xffff7ab0a998   280  ldp fp, lr, [jssp], #16
0xffff7ab0a99c   284  add jssp, jssp, x1, lsr #29
0xffff7ab0a9a0   288  ret
0xffff7ab0a9a4   292  movz x7, #0x0
0xffff7ab0a9a8   296  mov x16, lr
0xffff7ab0a9ac   300  ldr x17, pc+100 (addr 0x0000ffff7ab0aa10)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0a9b0   304  blr x17
0xffff7ab0a9b4   308  lsl x0, x4, #32
0xffff7ab0a9b8   312  movz x10, #0x0
0xffff7ab0a9bc   316  sub csp, jssp, #0x10 (16)
0xffff7ab0a9c0   320  stp x10, x0, [jssp, #-16]!
0xffff7ab0a9c4   324  movz x0, #0x2
0xffff7ab0a9c8   328  movz x1, #0x5b88
0xffff7ab0a9cc   332  movk x1, #0xe2, lsl #16
0xffff7ab0a9d0   336  ldr x16, pc+72 (addr 0x0000ffff7ab0aa18)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0a9d4   340  blr x16
0xffff7ab0a9d8   344  str x0, [jssp, #56]
0xffff7ab0a9dc   348  ldr x16, pc+68 (addr 0x0000ffff7ab0aa20)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0a9e0   352  blr x16
0xffff7ab0a9e4   356  b #-0x100 (addr 0xffff7ab0a8e4)
0xffff7ab0a9e8   360  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab0a9ec   364  d63f03e0       constant
0xffff7ab0a9f0   368  20d04201       constant
0xffff7ab0a9f4   372  00000000       constant
0xffff7ab0a9f8   376  20d04201       constant
0xffff7ab0a9fc   380  00000000       constant
0xffff7ab0aa00   384  4ec04259       constant
0xffff7ab0aa04   388  00000000       constant
0xffff7ab0aa08   392  20d04519       constant
0xffff7ab0aa0c   396  00000000       constant
0xffff7ab0aa10   400  7ab06820       constant
0xffff7ab0aa14   404  0000ffff       constant
0xffff7ab0aa18   408  7ab06260       constant
0xffff7ab0aa1c   412  0000ffff       constant
0xffff7ab0aa20   416  7ab068e0       constant
0xffff7ab0aa24   420  0000ffff       constant
0xffff7ab0aa28   424  movz x16, #0x0
0xffff7ab0aa2c   428  bl #+0x14 (addr 0xffff7ab0aa40)
0xffff7ab0aa30   432  movz x16, #0x8
0xffff7ab0aa34   436  bl #+0xc (addr 0xffff7ab0aa40)
0xffff7ab0aa38   440  movz x16, #0x10
0xffff7ab0aa3c   444  bl #+0x4 (addr 0xffff7ab0aa40)
0xffff7ab0aa40   448  ldr x17, pc+24 (addr 0x0000ffff7ab0aa58)    ;; lazy deoptimization bailout 0
0xffff7ab0aa44   452  add x17, x17, x16
0xffff7ab0aa48   456  br x17
0xffff7ab0aa4c   460  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0aa50   464  d63f03e0       constant
0xffff7ab0aa54   468  d503201f       constant
0xffff7ab0aa58   472  7a906000       constant
0xffff7ab0aa5c   476  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0a9d8   344  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab0a900  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0a908  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0a918  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab0a938  embedded object  (0x20d04519 <the hole>)
0xffff7ab0a9ac  code target (STUB)  (0xffff7ab06820)
0xffff7ab0a9d0  code target (STUB)  (0xffff7ab06260)
0xffff7ab0a9dc  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0a9e8  constant pool (size 64)
0xffff7ab0aa40  runtime entry
0xffff7ab0aa4c  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 493)
0xffff7ab0aae0     0  movz x16, #0xa00000000
0xffff7ab0aae4     4  sub csp, jssp, #0x10 (16)
0xffff7ab0aae8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0aaec    12  mov fp, jssp
0xffff7ab0aaf0    16  sub csp, jssp, #0x8 (8)
0xffff7ab0aaf4    20  sub jssp, jssp, #0x8 (8)
0xffff7ab0aaf8    24  stur x16, [fp, #-8]
0xffff7ab0aafc    28  movz w16, #0x257f
0xffff7ab0ab00    32  cmp w0, w16, lsl #3
0xffff7ab0ab04    36  b.hs #+0x17c (addr 0xffff7ab0ac80)
0xffff7ab0ab08    40  lsl x3, x0, #32
0xffff7ab0ab0c    44  lsl w4, w0, #3
0xffff7ab0ab10    48  add w4, w4, #0x10 (16)
0xffff7ab0ab14    52  cmp w4, #0x96000 (614400)
0xffff7ab0ab18    56  b.hs #+0x170 (addr 0xffff7ab0ac88)
0xffff7ab0ab1c    60  add w4, w4, #0x20 (32)
0xffff7ab0ab20    64  sxtw x4, w4
0xffff7ab0ab24    68  movz x5, #0xe2c0
0xffff7ab0ab28    72  movk x5, #0x9ab, lsl #16
0xffff7ab0ab2c    76  ldp x7, x16, [x5]
0xffff7ab0ab30    80  adds x6, x7, x4
0xffff7ab0ab34    84  ccmp x6, x16, #nzCv, lo
0xffff7ab0ab38    88  b.hi #+0xcc (addr 0xffff7ab0ac04)
0xffff7ab0ab3c    92  str x6, [x5]
0xffff7ab0ab40    96  orr x7, x7, #0x1
0xffff7ab0ab44   100  movz w4, #0x0
0xffff7ab0ab48   104  stur x4, [x7, #31]
0xffff7ab0ab4c   108  ldur x4, [x1, #39]
0xffff7ab0ab50   112  ldur x4, [x4, #39]
0xffff7ab0ab54   116  movz x16, #0x197
0xffff7ab0ab58   120  ldr x4, [x4, x16]
0xffff7ab0ab5c   124  stur x4, [x7, #-1]
0xffff7ab0ab60   128  ldr x4, pc+240 (addr 0x0000ffff7ab0ac50)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0ab64   132  stur x4, [x7, #7]
0xffff7ab0ab68   136  ldr x4, pc+240 (addr 0x0000ffff7ab0ac58)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0ab6c   140  stur x4, [x7, #15]
0xffff7ab0ab70   144  stur x3, [x7, #23]
0xffff7ab0ab74   148  add x4, x7, #0x20 (32)
0xffff7ab0ab78   152  ldr x5, pc+232 (addr 0x0000ffff7ab0ac60)    ;; object: 0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab0ab7c   156  stur x5, [x4, #-1]
0xffff7ab0ab80   160  stur x3, [x4, #7]
0xffff7ab0ab84   164  stur x4, [x7, #15]
0xffff7ab0ab88   168  ldr x3, [fp]
0xffff7ab0ab8c   172  ldur x5, [x3, #-8]
0xffff7ab0ab90   176  movz x16, #0xe00000000
0xffff7ab0ab94   180  cmp x5, x16
0xffff7ab0ab98   184  csel x5, fp, x3, ne
0xffff7ab0ab9c   188  movz x3, #0x0
0xffff7ab0aba0   192  cmp w0, w3
0xffff7ab0aba4   196  b.le #+0x44 (addr 0xffff7ab0abe8)
0xffff7ab0aba8   200  sub w6, w0, w3
0xffff7ab0abac   204  add w6, w6, #0x1 (1)
0xffff7ab0abb0   208  ldr x6, [x5, w6, uxtw #3]
0xffff7ab0abb4   212  tbz w6, #0, #+0x1c (addr 0xffff7ab0abd0)
0xffff7ab0abb8   216  ldur x16, [x6, #-1]
0xffff7ab0abbc   220  ldr x17, [x26, #120]
0xffff7ab0abc0   224  cmp x16, x17
0xffff7ab0abc4   228  b.ne #+0xcc (addr 0xffff7ab0ac90)
0xffff7ab0abc8   232  ldur d0, [x6, #7]
0xffff7ab0abcc   236  b #+0x8 (addr 0xffff7ab0abd4)
0xffff7ab0abd0   240  scvtf d0, x6, #32
0xffff7ab0abd4   244  add x6, x4, #0xf (15)
0xffff7ab0abd8   248  fsub d29, d0, d15
0xffff7ab0abdc   252  str d29, [x6, w3, sxtw #3]
0xffff7ab0abe0   256  add w3, w3, #0x1 (1)
0xffff7ab0abe4   260  b #-0x44 (addr 0xffff7ab0aba0)
0xffff7ab0abe8   264  add w0, w0, #0x1 (1)
0xffff7ab0abec   268  lsl x1, x0, #32
0xffff7ab0abf0   272  mov x0, x7
0xffff7ab0abf4   276  mov jssp, fp
0xffff7ab0abf8   280  ldp fp, lr, [jssp], #16
0xffff7ab0abfc   284  add jssp, jssp, x1, lsr #29
0xffff7ab0ac00   288  ret
0xffff7ab0ac04   292  movz x7, #0x0
0xffff7ab0ac08   296  mov x16, lr
0xffff7ab0ac0c   300  ldr x17, pc+92 (addr 0x0000ffff7ab0ac68)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0ac10   304  blr x17
0xffff7ab0ac14   308  lsl x0, x4, #32
0xffff7ab0ac18   312  movz x10, #0x100000000
0xffff7ab0ac1c   316  sub csp, jssp, #0x10 (16)
0xffff7ab0ac20   320  stp x10, x0, [jssp, #-16]!
0xffff7ab0ac24   324  movz x0, #0x2
0xffff7ab0ac28   328  movz x1, #0x5b88
0xffff7ab0ac2c   332  movk x1, #0xe2, lsl #16
0xffff7ab0ac30   336  ldr x16, pc+64 (addr 0x0000ffff7ab0ac70)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0ac34   340  blr x16
0xffff7ab0ac38   344  str x0, [jssp, #56]
0xffff7ab0ac3c   348  ldr x16, pc+60 (addr 0x0000ffff7ab0ac78)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0ac40   352  blr x16
0xffff7ab0ac44   356  b #-0x100 (addr 0xffff7ab0ab44)
0xffff7ab0ac48   360  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab0ac4c   364  d63f03e0       constant
0xffff7ab0ac50   368  20d04201       constant
0xffff7ab0ac54   372  00000000       constant
0xffff7ab0ac58   376  20d04201       constant
0xffff7ab0ac5c   380  00000000       constant
0xffff7ab0ac60   384  4ec052d9       constant
0xffff7ab0ac64   388  00000000       constant
0xffff7ab0ac68   392  7ab06820       constant
0xffff7ab0ac6c   396  0000ffff       constant
0xffff7ab0ac70   400  7ab06260       constant
0xffff7ab0ac74   404  0000ffff       constant
0xffff7ab0ac78   408  7ab068e0       constant
0xffff7ab0ac7c   412  0000ffff       constant
0xffff7ab0ac80   416  movz x16, #0x0
0xffff7ab0ac84   420  bl #+0x14 (addr 0xffff7ab0ac98)
0xffff7ab0ac88   424  movz x16, #0x8
0xffff7ab0ac8c   428  bl #+0xc (addr 0xffff7ab0ac98)
0xffff7ab0ac90   432  movz x16, #0x10
0xffff7ab0ac94   436  bl #+0x4 (addr 0xffff7ab0ac98)
0xffff7ab0ac98   440  ldr x17, pc+24 (addr 0x0000ffff7ab0acb0)    ;; lazy deoptimization bailout 0
0xffff7ab0ac9c   444  add x17, x17, x16
0xffff7ab0aca0   448  br x17
0xffff7ab0aca4   452  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0aca8   456  d63f03e0       constant
0xffff7ab0acac   460  d503201f       constant
0xffff7ab0acb0   464  7a906000       constant
0xffff7ab0acb4   468  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0ac38   344  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab0ab60  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0ab68  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0ab78  embedded object  (0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab0ac0c  code target (STUB)  (0xffff7ab06820)
0xffff7ab0ac30  code target (STUB)  (0xffff7ab06260)
0xffff7ab0ac3c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0ac48  constant pool (size 56)
0xffff7ab0ac98  runtime entry
0xffff7ab0aca4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNArgumentsConstructorStub
name = ArrayNArgumentsConstructorStub_FAST_DOUBLE_ELEMENTS
compiler = crankshaft
Instructions (size = 493)
0xffff7ab0aae0     0  movz x16, #0xa00000000
0xffff7ab0aae4     4  sub csp, jssp, #0x10 (16)
0xffff7ab0aae8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0aaec    12  mov fp, jssp
0xffff7ab0aaf0    16  sub csp, jssp, #0x8 (8)
0xffff7ab0aaf4    20  sub jssp, jssp, #0x8 (8)
0xffff7ab0aaf8    24  stur x16, [fp, #-8]
0xffff7ab0aafc    28  movz w16, #0x257f
0xffff7ab0ab00    32  cmp w0, w16, lsl #3
0xffff7ab0ab04    36  b.hs #+0x17c (addr 0xffff7ab0ac80)
0xffff7ab0ab08    40  lsl x3, x0, #32
0xffff7ab0ab0c    44  lsl w4, w0, #3
0xffff7ab0ab10    48  add w4, w4, #0x10 (16)
0xffff7ab0ab14    52  cmp w4, #0x96000 (614400)
0xffff7ab0ab18    56  b.hs #+0x170 (addr 0xffff7ab0ac88)
0xffff7ab0ab1c    60  add w4, w4, #0x20 (32)
0xffff7ab0ab20    64  sxtw x4, w4
0xffff7ab0ab24    68  movz x5, #0xe2c0
0xffff7ab0ab28    72  movk x5, #0x9ab, lsl #16
0xffff7ab0ab2c    76  ldp x7, x16, [x5]
0xffff7ab0ab30    80  adds x6, x7, x4
0xffff7ab0ab34    84  ccmp x6, x16, #nzCv, lo
0xffff7ab0ab38    88  b.hi #+0xcc (addr 0xffff7ab0ac04)
0xffff7ab0ab3c    92  str x6, [x5]
0xffff7ab0ab40    96  orr x7, x7, #0x1
0xffff7ab0ab44   100  movz w4, #0x0
0xffff7ab0ab48   104  stur x4, [x7, #31]
0xffff7ab0ab4c   108  ldur x4, [x1, #39]
0xffff7ab0ab50   112  ldur x4, [x4, #39]
0xffff7ab0ab54   116  movz x16, #0x197
0xffff7ab0ab58   120  ldr x4, [x4, x16]
0xffff7ab0ab5c   124  stur x4, [x7, #-1]
0xffff7ab0ab60   128  ldr x4, pc+240 (addr 0x0000ffff7ab0ac50)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0ab64   132  stur x4, [x7, #7]
0xffff7ab0ab68   136  ldr x4, pc+240 (addr 0x0000ffff7ab0ac58)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0ab6c   140  stur x4, [x7, #15]
0xffff7ab0ab70   144  stur x3, [x7, #23]
0xffff7ab0ab74   148  add x4, x7, #0x20 (32)
0xffff7ab0ab78   152  ldr x5, pc+232 (addr 0x0000ffff7ab0ac60)    ;; object: 0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab0ab7c   156  stur x5, [x4, #-1]
0xffff7ab0ab80   160  stur x3, [x4, #7]
0xffff7ab0ab84   164  stur x4, [x7, #15]
0xffff7ab0ab88   168  ldr x3, [fp]
0xffff7ab0ab8c   172  ldur x5, [x3, #-8]
0xffff7ab0ab90   176  movz x16, #0xe00000000
0xffff7ab0ab94   180  cmp x5, x16
0xffff7ab0ab98   184  csel x5, fp, x3, ne
0xffff7ab0ab9c   188  movz x3, #0x0
0xffff7ab0aba0   192  cmp w0, w3
0xffff7ab0aba4   196  b.le #+0x44 (addr 0xffff7ab0abe8)
0xffff7ab0aba8   200  sub w6, w0, w3
0xffff7ab0abac   204  add w6, w6, #0x1 (1)
0xffff7ab0abb0   208  ldr x6, [x5, w6, uxtw #3]
0xffff7ab0abb4   212  tbz w6, #0, #+0x1c (addr 0xffff7ab0abd0)
0xffff7ab0abb8   216  ldur x16, [x6, #-1]
0xffff7ab0abbc   220  ldr x17, [x26, #120]
0xffff7ab0abc0   224  cmp x16, x17
0xffff7ab0abc4   228  b.ne #+0xcc (addr 0xffff7ab0ac90)
0xffff7ab0abc8   232  ldur d0, [x6, #7]
0xffff7ab0abcc   236  b #+0x8 (addr 0xffff7ab0abd4)
0xffff7ab0abd0   240  scvtf d0, x6, #32
0xffff7ab0abd4   244  add x6, x4, #0xf (15)
0xffff7ab0abd8   248  fsub d29, d0, d15
0xffff7ab0abdc   252  str d29, [x6, w3, sxtw #3]
0xffff7ab0abe0   256  add w3, w3, #0x1 (1)
0xffff7ab0abe4   260  b #-0x44 (addr 0xffff7ab0aba0)
0xffff7ab0abe8   264  add w0, w0, #0x1 (1)
0xffff7ab0abec   268  lsl x1, x0, #32
0xffff7ab0abf0   272  mov x0, x7
0xffff7ab0abf4   276  mov jssp, fp
0xffff7ab0abf8   280  ldp fp, lr, [jssp], #16
0xffff7ab0abfc   284  add jssp, jssp, x1, lsr #29
0xffff7ab0ac00   288  ret
0xffff7ab0ac04   292  movz x7, #0x0
0xffff7ab0ac08   296  mov x16, lr
0xffff7ab0ac0c   300  ldr x17, pc+92 (addr 0x0000ffff7ab0ac68)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0ac10   304  blr x17
0xffff7ab0ac14   308  lsl x0, x4, #32
0xffff7ab0ac18   312  movz x10, #0x100000000
0xffff7ab0ac1c   316  sub csp, jssp, #0x10 (16)
0xffff7ab0ac20   320  stp x10, x0, [jssp, #-16]!
0xffff7ab0ac24   324  movz x0, #0x2
0xffff7ab0ac28   328  movz x1, #0x5b88
0xffff7ab0ac2c   332  movk x1, #0xe2, lsl #16
0xffff7ab0ac30   336  ldr x16, pc+64 (addr 0x0000ffff7ab0ac70)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0ac34   340  blr x16
0xffff7ab0ac38   344  str x0, [jssp, #56]
0xffff7ab0ac3c   348  ldr x16, pc+60 (addr 0x0000ffff7ab0ac78)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0ac40   352  blr x16
0xffff7ab0ac44   356  b #-0x100 (addr 0xffff7ab0ab44)
0xffff7ab0ac48   360  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab0ac4c   364  d63f03e0       constant
0xffff7ab0ac50   368  20d04201       constant
0xffff7ab0ac54   372  00000000       constant
0xffff7ab0ac58   376  20d04201       constant
0xffff7ab0ac5c   380  00000000       constant
0xffff7ab0ac60   384  4ec052d9       constant
0xffff7ab0ac64   388  00000000       constant
0xffff7ab0ac68   392  7ab06820       constant
0xffff7ab0ac6c   396  0000ffff       constant
0xffff7ab0ac70   400  7ab06260       constant
0xffff7ab0ac74   404  0000ffff       constant
0xffff7ab0ac78   408  7ab068e0       constant
0xffff7ab0ac7c   412  0000ffff       constant
0xffff7ab0ac80   416  movz x16, #0x0
0xffff7ab0ac84   420  bl #+0x14 (addr 0xffff7ab0ac98)
0xffff7ab0ac88   424  movz x16, #0x8
0xffff7ab0ac8c   428  bl #+0xc (addr 0xffff7ab0ac98)
0xffff7ab0ac90   432  movz x16, #0x10
0xffff7ab0ac94   436  bl #+0x4 (addr 0xffff7ab0ac98)
0xffff7ab0ac98   440  ldr x17, pc+24 (addr 0x0000ffff7ab0acb0)    ;; lazy deoptimization bailout 0
0xffff7ab0ac9c   444  add x17, x17, x16
0xffff7ab0aca0   448  br x17
0xffff7ab0aca4   452  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0aca8   456  d63f03e0       constant
0xffff7ab0acac   460  d503201f       constant
0xffff7ab0acb0   464  7a906000       constant
0xffff7ab0acb4   468  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0ac38   344  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab0ab60  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0ab68  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0ab78  embedded object  (0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab0ac0c  code target (STUB)  (0xffff7ab06820)
0xffff7ab0ac30  code target (STUB)  (0xffff7ab06260)
0xffff7ab0ac3c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0ac48  constant pool (size 56)
0xffff7ab0ac98  runtime entry
0xffff7ab0aca4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 493)
0xffff7ab0ad40     0  movz x16, #0xa00000000
0xffff7ab0ad44     4  sub csp, jssp, #0x10 (16)
0xffff7ab0ad48     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0ad4c    12  mov fp, jssp
0xffff7ab0ad50    16  sub csp, jssp, #0x8 (8)
0xffff7ab0ad54    20  sub jssp, jssp, #0x8 (8)
0xffff7ab0ad58    24  stur x16, [fp, #-8]
0xffff7ab0ad5c    28  movz w16, #0x257f
0xffff7ab0ad60    32  cmp w0, w16, lsl #3
0xffff7ab0ad64    36  b.hs #+0x17c (addr 0xffff7ab0aee0)
0xffff7ab0ad68    40  lsl x3, x0, #32
0xffff7ab0ad6c    44  lsl w4, w0, #3
0xffff7ab0ad70    48  add w4, w4, #0x10 (16)
0xffff7ab0ad74    52  cmp w4, #0x96000 (614400)
0xffff7ab0ad78    56  b.hs #+0x170 (addr 0xffff7ab0aee8)
0xffff7ab0ad7c    60  add w4, w4, #0x20 (32)
0xffff7ab0ad80    64  sxtw x4, w4
0xffff7ab0ad84    68  movz x5, #0xe2c0
0xffff7ab0ad88    72  movk x5, #0x9ab, lsl #16
0xffff7ab0ad8c    76  ldp x7, x16, [x5]
0xffff7ab0ad90    80  adds x6, x7, x4
0xffff7ab0ad94    84  ccmp x6, x16, #nzCv, lo
0xffff7ab0ad98    88  b.hi #+0xcc (addr 0xffff7ab0ae64)
0xffff7ab0ad9c    92  str x6, [x5]
0xffff7ab0ada0    96  orr x7, x7, #0x1
0xffff7ab0ada4   100  movz w4, #0x0
0xffff7ab0ada8   104  stur x4, [x7, #31]
0xffff7ab0adac   108  ldur x4, [x1, #39]
0xffff7ab0adb0   112  ldur x4, [x4, #39]
0xffff7ab0adb4   116  movz x16, #0x19f
0xffff7ab0adb8   120  ldr x4, [x4, x16]
0xffff7ab0adbc   124  stur x4, [x7, #-1]
0xffff7ab0adc0   128  ldr x4, pc+240 (addr 0x0000ffff7ab0aeb0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0adc4   132  stur x4, [x7, #7]
0xffff7ab0adc8   136  ldr x4, pc+240 (addr 0x0000ffff7ab0aeb8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0adcc   140  stur x4, [x7, #15]
0xffff7ab0add0   144  stur x3, [x7, #23]
0xffff7ab0add4   148  add x4, x7, #0x20 (32)
0xffff7ab0add8   152  ldr x5, pc+232 (addr 0x0000ffff7ab0aec0)    ;; object: 0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab0addc   156  stur x5, [x4, #-1]
0xffff7ab0ade0   160  stur x3, [x4, #7]
0xffff7ab0ade4   164  stur x4, [x7, #15]
0xffff7ab0ade8   168  ldr x3, [fp]
0xffff7ab0adec   172  ldur x5, [x3, #-8]
0xffff7ab0adf0   176  movz x16, #0xe00000000
0xffff7ab0adf4   180  cmp x5, x16
0xffff7ab0adf8   184  csel x5, fp, x3, ne
0xffff7ab0adfc   188  movz x3, #0x0
0xffff7ab0ae00   192  cmp w0, w3
0xffff7ab0ae04   196  b.le #+0x44 (addr 0xffff7ab0ae48)
0xffff7ab0ae08   200  sub w6, w0, w3
0xffff7ab0ae0c   204  add w6, w6, #0x1 (1)
0xffff7ab0ae10   208  ldr x6, [x5, w6, uxtw #3]
0xffff7ab0ae14   212  tbz w6, #0, #+0x1c (addr 0xffff7ab0ae30)
0xffff7ab0ae18   216  ldur x16, [x6, #-1]
0xffff7ab0ae1c   220  ldr x17, [x26, #120]
0xffff7ab0ae20   224  cmp x16, x17
0xffff7ab0ae24   228  b.ne #+0xcc (addr 0xffff7ab0aef0)
0xffff7ab0ae28   232  ldur d0, [x6, #7]
0xffff7ab0ae2c   236  b #+0x8 (addr 0xffff7ab0ae34)
0xffff7ab0ae30   240  scvtf d0, x6, #32
0xffff7ab0ae34   244  add x6, x4, #0xf (15)
0xffff7ab0ae38   248  fsub d29, d0, d15
0xffff7ab0ae3c   252  str d29, [x6, w3, sxtw #3]
0xffff7ab0ae40   256  add w3, w3, #0x1 (1)
0xffff7ab0ae44   260  b #-0x44 (addr 0xffff7ab0ae00)
0xffff7ab0ae48   264  add w0, w0, #0x1 (1)
0xffff7ab0ae4c   268  lsl x1, x0, #32
0xffff7ab0ae50   272  mov x0, x7
0xffff7ab0ae54   276  mov jssp, fp
0xffff7ab0ae58   280  ldp fp, lr, [jssp], #16
0xffff7ab0ae5c   284  add jssp, jssp, x1, lsr #29
0xffff7ab0ae60   288  ret
0xffff7ab0ae64   292  movz x7, #0x0
0xffff7ab0ae68   296  mov x16, lr
0xffff7ab0ae6c   300  ldr x17, pc+92 (addr 0x0000ffff7ab0aec8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0ae70   304  blr x17
0xffff7ab0ae74   308  lsl x0, x4, #32
0xffff7ab0ae78   312  movz x10, #0x100000000
0xffff7ab0ae7c   316  sub csp, jssp, #0x10 (16)
0xffff7ab0ae80   320  stp x10, x0, [jssp, #-16]!
0xffff7ab0ae84   324  movz x0, #0x2
0xffff7ab0ae88   328  movz x1, #0x5b88
0xffff7ab0ae8c   332  movk x1, #0xe2, lsl #16
0xffff7ab0ae90   336  ldr x16, pc+64 (addr 0x0000ffff7ab0aed0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0ae94   340  blr x16
0xffff7ab0ae98   344  str x0, [jssp, #56]
0xffff7ab0ae9c   348  ldr x16, pc+60 (addr 0x0000ffff7ab0aed8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0aea0   352  blr x16
0xffff7ab0aea4   356  b #-0x100 (addr 0xffff7ab0ada4)
0xffff7ab0aea8   360  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab0aeac   364  d63f03e0       constant
0xffff7ab0aeb0   368  20d04201       constant
0xffff7ab0aeb4   372  00000000       constant
0xffff7ab0aeb8   376  20d04201       constant
0xffff7ab0aebc   380  00000000       constant
0xffff7ab0aec0   384  4ec052d9       constant
0xffff7ab0aec4   388  00000000       constant
0xffff7ab0aec8   392  7ab06820       constant
0xffff7ab0aecc   396  0000ffff       constant
0xffff7ab0aed0   400  7ab06260       constant
0xffff7ab0aed4   404  0000ffff       constant
0xffff7ab0aed8   408  7ab068e0       constant
0xffff7ab0aedc   412  0000ffff       constant
0xffff7ab0aee0   416  movz x16, #0x0
0xffff7ab0aee4   420  bl #+0x14 (addr 0xffff7ab0aef8)
0xffff7ab0aee8   424  movz x16, #0x8
0xffff7ab0aeec   428  bl #+0xc (addr 0xffff7ab0aef8)
0xffff7ab0aef0   432  movz x16, #0x10
0xffff7ab0aef4   436  bl #+0x4 (addr 0xffff7ab0aef8)
0xffff7ab0aef8   440  ldr x17, pc+24 (addr 0x0000ffff7ab0af10)    ;; lazy deoptimization bailout 0
0xffff7ab0aefc   444  add x17, x17, x16
0xffff7ab0af00   448  br x17
0xffff7ab0af04   452  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0af08   456  d63f03e0       constant
0xffff7ab0af0c   460  d503201f       constant
0xffff7ab0af10   464  7a906000       constant
0xffff7ab0af14   468  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0ae98   344  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab0adc0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0adc8  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0add8  embedded object  (0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab0ae6c  code target (STUB)  (0xffff7ab06820)
0xffff7ab0ae90  code target (STUB)  (0xffff7ab06260)
0xffff7ab0ae9c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0aea8  constant pool (size 56)
0xffff7ab0aef8  runtime entry
0xffff7ab0af04  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNArgumentsConstructorStub
name = ArrayNArgumentsConstructorStub_FAST_HOLEY_DOUBLE_ELEMENTS
compiler = crankshaft
Instructions (size = 493)
0xffff7ab0ad40     0  movz x16, #0xa00000000
0xffff7ab0ad44     4  sub csp, jssp, #0x10 (16)
0xffff7ab0ad48     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0ad4c    12  mov fp, jssp
0xffff7ab0ad50    16  sub csp, jssp, #0x8 (8)
0xffff7ab0ad54    20  sub jssp, jssp, #0x8 (8)
0xffff7ab0ad58    24  stur x16, [fp, #-8]
0xffff7ab0ad5c    28  movz w16, #0x257f
0xffff7ab0ad60    32  cmp w0, w16, lsl #3
0xffff7ab0ad64    36  b.hs #+0x17c (addr 0xffff7ab0aee0)
0xffff7ab0ad68    40  lsl x3, x0, #32
0xffff7ab0ad6c    44  lsl w4, w0, #3
0xffff7ab0ad70    48  add w4, w4, #0x10 (16)
0xffff7ab0ad74    52  cmp w4, #0x96000 (614400)
0xffff7ab0ad78    56  b.hs #+0x170 (addr 0xffff7ab0aee8)
0xffff7ab0ad7c    60  add w4, w4, #0x20 (32)
0xffff7ab0ad80    64  sxtw x4, w4
0xffff7ab0ad84    68  movz x5, #0xe2c0
0xffff7ab0ad88    72  movk x5, #0x9ab, lsl #16
0xffff7ab0ad8c    76  ldp x7, x16, [x5]
0xffff7ab0ad90    80  adds x6, x7, x4
0xffff7ab0ad94    84  ccmp x6, x16, #nzCv, lo
0xffff7ab0ad98    88  b.hi #+0xcc (addr 0xffff7ab0ae64)
0xffff7ab0ad9c    92  str x6, [x5]
0xffff7ab0ada0    96  orr x7, x7, #0x1
0xffff7ab0ada4   100  movz w4, #0x0
0xffff7ab0ada8   104  stur x4, [x7, #31]
0xffff7ab0adac   108  ldur x4, [x1, #39]
0xffff7ab0adb0   112  ldur x4, [x4, #39]
0xffff7ab0adb4   116  movz x16, #0x19f
0xffff7ab0adb8   120  ldr x4, [x4, x16]
0xffff7ab0adbc   124  stur x4, [x7, #-1]
0xffff7ab0adc0   128  ldr x4, pc+240 (addr 0x0000ffff7ab0aeb0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0adc4   132  stur x4, [x7, #7]
0xffff7ab0adc8   136  ldr x4, pc+240 (addr 0x0000ffff7ab0aeb8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0adcc   140  stur x4, [x7, #15]
0xffff7ab0add0   144  stur x3, [x7, #23]
0xffff7ab0add4   148  add x4, x7, #0x20 (32)
0xffff7ab0add8   152  ldr x5, pc+232 (addr 0x0000ffff7ab0aec0)    ;; object: 0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab0addc   156  stur x5, [x4, #-1]
0xffff7ab0ade0   160  stur x3, [x4, #7]
0xffff7ab0ade4   164  stur x4, [x7, #15]
0xffff7ab0ade8   168  ldr x3, [fp]
0xffff7ab0adec   172  ldur x5, [x3, #-8]
0xffff7ab0adf0   176  movz x16, #0xe00000000
0xffff7ab0adf4   180  cmp x5, x16
0xffff7ab0adf8   184  csel x5, fp, x3, ne
0xffff7ab0adfc   188  movz x3, #0x0
0xffff7ab0ae00   192  cmp w0, w3
0xffff7ab0ae04   196  b.le #+0x44 (addr 0xffff7ab0ae48)
0xffff7ab0ae08   200  sub w6, w0, w3
0xffff7ab0ae0c   204  add w6, w6, #0x1 (1)
0xffff7ab0ae10   208  ldr x6, [x5, w6, uxtw #3]
0xffff7ab0ae14   212  tbz w6, #0, #+0x1c (addr 0xffff7ab0ae30)
0xffff7ab0ae18   216  ldur x16, [x6, #-1]
0xffff7ab0ae1c   220  ldr x17, [x26, #120]
0xffff7ab0ae20   224  cmp x16, x17
0xffff7ab0ae24   228  b.ne #+0xcc (addr 0xffff7ab0aef0)
0xffff7ab0ae28   232  ldur d0, [x6, #7]
0xffff7ab0ae2c   236  b #+0x8 (addr 0xffff7ab0ae34)
0xffff7ab0ae30   240  scvtf d0, x6, #32
0xffff7ab0ae34   244  add x6, x4, #0xf (15)
0xffff7ab0ae38   248  fsub d29, d0, d15
0xffff7ab0ae3c   252  str d29, [x6, w3, sxtw #3]
0xffff7ab0ae40   256  add w3, w3, #0x1 (1)
0xffff7ab0ae44   260  b #-0x44 (addr 0xffff7ab0ae00)
0xffff7ab0ae48   264  add w0, w0, #0x1 (1)
0xffff7ab0ae4c   268  lsl x1, x0, #32
0xffff7ab0ae50   272  mov x0, x7
0xffff7ab0ae54   276  mov jssp, fp
0xffff7ab0ae58   280  ldp fp, lr, [jssp], #16
0xffff7ab0ae5c   284  add jssp, jssp, x1, lsr #29
0xffff7ab0ae60   288  ret
0xffff7ab0ae64   292  movz x7, #0x0
0xffff7ab0ae68   296  mov x16, lr
0xffff7ab0ae6c   300  ldr x17, pc+92 (addr 0x0000ffff7ab0aec8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0ae70   304  blr x17
0xffff7ab0ae74   308  lsl x0, x4, #32
0xffff7ab0ae78   312  movz x10, #0x100000000
0xffff7ab0ae7c   316  sub csp, jssp, #0x10 (16)
0xffff7ab0ae80   320  stp x10, x0, [jssp, #-16]!
0xffff7ab0ae84   324  movz x0, #0x2
0xffff7ab0ae88   328  movz x1, #0x5b88
0xffff7ab0ae8c   332  movk x1, #0xe2, lsl #16
0xffff7ab0ae90   336  ldr x16, pc+64 (addr 0x0000ffff7ab0aed0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0ae94   340  blr x16
0xffff7ab0ae98   344  str x0, [jssp, #56]
0xffff7ab0ae9c   348  ldr x16, pc+60 (addr 0x0000ffff7ab0aed8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0aea0   352  blr x16
0xffff7ab0aea4   356  b #-0x100 (addr 0xffff7ab0ada4)
0xffff7ab0aea8   360  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab0aeac   364  d63f03e0       constant
0xffff7ab0aeb0   368  20d04201       constant
0xffff7ab0aeb4   372  00000000       constant
0xffff7ab0aeb8   376  20d04201       constant
0xffff7ab0aebc   380  00000000       constant
0xffff7ab0aec0   384  4ec052d9       constant
0xffff7ab0aec4   388  00000000       constant
0xffff7ab0aec8   392  7ab06820       constant
0xffff7ab0aecc   396  0000ffff       constant
0xffff7ab0aed0   400  7ab06260       constant
0xffff7ab0aed4   404  0000ffff       constant
0xffff7ab0aed8   408  7ab068e0       constant
0xffff7ab0aedc   412  0000ffff       constant
0xffff7ab0aee0   416  movz x16, #0x0
0xffff7ab0aee4   420  bl #+0x14 (addr 0xffff7ab0aef8)
0xffff7ab0aee8   424  movz x16, #0x8
0xffff7ab0aeec   428  bl #+0xc (addr 0xffff7ab0aef8)
0xffff7ab0aef0   432  movz x16, #0x10
0xffff7ab0aef4   436  bl #+0x4 (addr 0xffff7ab0aef8)
0xffff7ab0aef8   440  ldr x17, pc+24 (addr 0x0000ffff7ab0af10)    ;; lazy deoptimization bailout 0
0xffff7ab0aefc   444  add x17, x17, x16
0xffff7ab0af00   448  br x17
0xffff7ab0af04   452  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0af08   456  d63f03e0       constant
0xffff7ab0af0c   460  d503201f       constant
0xffff7ab0af10   464  7a906000       constant
0xffff7ab0af14   468  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0ae98   344  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab0adc0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0adc8  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0add8  embedded object  (0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab0ae6c  code target (STUB)  (0xffff7ab06820)
0xffff7ab0ae90  code target (STUB)  (0xffff7ab06260)
0xffff7ab0ae9c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0aea8  constant pool (size 56)
0xffff7ab0aef8  runtime entry
0xffff7ab0af04  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 453)
0xffff7ab0afa0     0  movz x16, #0xa00000000
0xffff7ab0afa4     4  sub csp, jssp, #0x10 (16)
0xffff7ab0afa8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0afac    12  mov fp, jssp
0xffff7ab0afb0    16  sub csp, jssp, #0x8 (8)
0xffff7ab0afb4    20  sub jssp, jssp, #0x8 (8)
0xffff7ab0afb8    24  stur x16, [fp, #-8]
0xffff7ab0afbc    28  movz w16, #0x257f
0xffff7ab0afc0    32  cmp w0, w16, lsl #3
0xffff7ab0afc4    36  b.hs #+0x15c (addr 0xffff7ab0b120)
0xffff7ab0afc8    40  lsl x3, x0, #32
0xffff7ab0afcc    44  lsl w4, w0, #3
0xffff7ab0afd0    48  add w4, w4, #0x10 (16)
0xffff7ab0afd4    52  cmp w4, #0x96000 (614400)
0xffff7ab0afd8    56  b.hs #+0x150 (addr 0xffff7ab0b128)
0xffff7ab0afdc    60  add w2, w4, #0x20 (32)
0xffff7ab0afe0    64  sxtw x2, w2
0xffff7ab0afe4    68  movz x4, #0xe2c0
0xffff7ab0afe8    72  movk x4, #0x9ab, lsl #16
0xffff7ab0afec    76  ldp x6, x16, [x4]
0xffff7ab0aff0    80  adds x5, x6, x2
0xffff7ab0aff4    84  ccmp x5, x16, #nzCv, lo
0xffff7ab0aff8    88  b.hi #+0xa8 (addr 0xffff7ab0b0a0)
0xffff7ab0affc    92  str x5, [x4]
0xffff7ab0b000    96  orr x6, x6, #0x1
0xffff7ab0b004   100  movz w2, #0x0
0xffff7ab0b008   104  stur x2, [x6, #31]
0xffff7ab0b00c   108  ldur x1, [x1, #39]
0xffff7ab0b010   112  ldur x1, [x1, #39]
0xffff7ab0b014   116  movz x16, #0x187
0xffff7ab0b018   120  ldr x1, [x1, x16]
0xffff7ab0b01c   124  stur x1, [x6, #-1]
0xffff7ab0b020   128  ldr x1, pc+208 (addr 0x0000ffff7ab0b0f0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0b024   132  stur x1, [x6, #7]
0xffff7ab0b028   136  ldr x1, pc+208 (addr 0x0000ffff7ab0b0f8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0b02c   140  stur x1, [x6, #15]
0xffff7ab0b030   144  stur x3, [x6, #23]
0xffff7ab0b034   148  add x1, x6, #0x20 (32)
0xffff7ab0b038   152  ldr x2, pc+200 (addr 0x0000ffff7ab0b100)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab0b03c   156  stur x2, [x1, #-1]
0xffff7ab0b040   160  stur x3, [x1, #7]
0xffff7ab0b044   164  stur x1, [x6, #15]
0xffff7ab0b048   168  ldr x2, [fp]
0xffff7ab0b04c   172  ldur x3, [x2, #-8]
0xffff7ab0b050   176  movz x16, #0xe00000000
0xffff7ab0b054   180  cmp x3, x16
0xffff7ab0b058   184  csel x3, fp, x2, ne
0xffff7ab0b05c   188  movz x2, #0x0
0xffff7ab0b060   192  cmp w0, w2
0xffff7ab0b064   196  b.le #+0x20 (addr 0xffff7ab0b084)
0xffff7ab0b068   200  sub w4, w0, w2
0xffff7ab0b06c   204  add w4, w4, #0x1 (1)
0xffff7ab0b070   208  ldr x4, [x3, w4, uxtw #3]
0xffff7ab0b074   212  add x5, x1, #0xf (15)
0xffff7ab0b078   216  str x4, [x5, w2, sxtw #3]
0xffff7ab0b07c   220  add w2, w2, #0x1 (1)
0xffff7ab0b080   224  b #-0x20 (addr 0xffff7ab0b060)
0xffff7ab0b084   228  add w0, w0, #0x1 (1)
0xffff7ab0b088   232  lsl x1, x0, #32
0xffff7ab0b08c   236  mov x0, x6
0xffff7ab0b090   240  mov jssp, fp
0xffff7ab0b094   244  ldp fp, lr, [jssp], #16
0xffff7ab0b098   248  add jssp, jssp, x1, lsr #29
0xffff7ab0b09c   252  ret
0xffff7ab0b0a0   256  movz x6, #0x0
0xffff7ab0b0a4   260  mov x16, lr
0xffff7ab0b0a8   264  ldr x17, pc+96 (addr 0x0000ffff7ab0b108)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0b0ac   268  blr x17
0xffff7ab0b0b0   272  lsl x0, x2, #32
0xffff7ab0b0b4   276  movz x10, #0x0
0xffff7ab0b0b8   280  sub csp, jssp, #0x10 (16)
0xffff7ab0b0bc   284  stp x10, x0, [jssp, #-16]!
0xffff7ab0b0c0   288  movz x0, #0x2
0xffff7ab0b0c4   292  movz x1, #0x5b88
0xffff7ab0b0c8   296  movk x1, #0xe2, lsl #16
0xffff7ab0b0cc   300  ldr x16, pc+68 (addr 0x0000ffff7ab0b110)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0b0d0   304  blr x16
0xffff7ab0b0d4   308  str x0, [jssp, #48]
0xffff7ab0b0d8   312  ldr x16, pc+64 (addr 0x0000ffff7ab0b118)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0b0dc   316  blr x16
0xffff7ab0b0e0   320  b #-0xdc (addr 0xffff7ab0b004)
0xffff7ab0b0e4   324  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7ab0b0e8   328  d63f03e0       constant
0xffff7ab0b0ec   332  d503201f       constant
0xffff7ab0b0f0   336  20d04201       constant
0xffff7ab0b0f4   340  00000000       constant
0xffff7ab0b0f8   344  20d04201       constant
0xffff7ab0b0fc   348  00000000       constant
0xffff7ab0b100   352  4ec04259       constant
0xffff7ab0b104   356  00000000       constant
0xffff7ab0b108   360  7ab06820       constant
0xffff7ab0b10c   364  0000ffff       constant
0xffff7ab0b110   368  7ab06260       constant
0xffff7ab0b114   372  0000ffff       constant
0xffff7ab0b118   376  7ab068e0       constant
0xffff7ab0b11c   380  0000ffff       constant
0xffff7ab0b120   384  movz x16, #0x0
0xffff7ab0b124   388  bl #+0xc (addr 0xffff7ab0b130)
0xffff7ab0b128   392  movz x16, #0x8
0xffff7ab0b12c   396  bl #+0x4 (addr 0xffff7ab0b130)
0xffff7ab0b130   400  ldr x17, pc+24 (addr 0x0000ffff7ab0b148)    ;; lazy deoptimization bailout 0
0xffff7ab0b134   404  add x17, x17, x16
0xffff7ab0b138   408  br x17
0xffff7ab0b13c   412  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0b140   416  d63f03e0       constant
0xffff7ab0b144   420  d503201f       constant
0xffff7ab0b148   424  7a906000       constant
0xffff7ab0b14c   428  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0b0d4   308  000 | x1 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab0b020  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0b028  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0b038  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab0b0a8  code target (STUB)  (0xffff7ab06820)
0xffff7ab0b0cc  code target (STUB)  (0xffff7ab06260)
0xffff7ab0b0d8  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0b0e4  constant pool (size 60)
0xffff7ab0b130  runtime entry
0xffff7ab0b13c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNArgumentsConstructorStub
name = ArrayNArgumentsConstructorStub_FAST_ELEMENTS
compiler = crankshaft
Instructions (size = 453)
0xffff7ab0afa0     0  movz x16, #0xa00000000
0xffff7ab0afa4     4  sub csp, jssp, #0x10 (16)
0xffff7ab0afa8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0afac    12  mov fp, jssp
0xffff7ab0afb0    16  sub csp, jssp, #0x8 (8)
0xffff7ab0afb4    20  sub jssp, jssp, #0x8 (8)
0xffff7ab0afb8    24  stur x16, [fp, #-8]
0xffff7ab0afbc    28  movz w16, #0x257f
0xffff7ab0afc0    32  cmp w0, w16, lsl #3
0xffff7ab0afc4    36  b.hs #+0x15c (addr 0xffff7ab0b120)
0xffff7ab0afc8    40  lsl x3, x0, #32
0xffff7ab0afcc    44  lsl w4, w0, #3
0xffff7ab0afd0    48  add w4, w4, #0x10 (16)
0xffff7ab0afd4    52  cmp w4, #0x96000 (614400)
0xffff7ab0afd8    56  b.hs #+0x150 (addr 0xffff7ab0b128)
0xffff7ab0afdc    60  add w2, w4, #0x20 (32)
0xffff7ab0afe0    64  sxtw x2, w2
0xffff7ab0afe4    68  movz x4, #0xe2c0
0xffff7ab0afe8    72  movk x4, #0x9ab, lsl #16
0xffff7ab0afec    76  ldp x6, x16, [x4]
0xffff7ab0aff0    80  adds x5, x6, x2
0xffff7ab0aff4    84  ccmp x5, x16, #nzCv, lo
0xffff7ab0aff8    88  b.hi #+0xa8 (addr 0xffff7ab0b0a0)
0xffff7ab0affc    92  str x5, [x4]
0xffff7ab0b000    96  orr x6, x6, #0x1
0xffff7ab0b004   100  movz w2, #0x0
0xffff7ab0b008   104  stur x2, [x6, #31]
0xffff7ab0b00c   108  ldur x1, [x1, #39]
0xffff7ab0b010   112  ldur x1, [x1, #39]
0xffff7ab0b014   116  movz x16, #0x187
0xffff7ab0b018   120  ldr x1, [x1, x16]
0xffff7ab0b01c   124  stur x1, [x6, #-1]
0xffff7ab0b020   128  ldr x1, pc+208 (addr 0x0000ffff7ab0b0f0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0b024   132  stur x1, [x6, #7]
0xffff7ab0b028   136  ldr x1, pc+208 (addr 0x0000ffff7ab0b0f8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0b02c   140  stur x1, [x6, #15]
0xffff7ab0b030   144  stur x3, [x6, #23]
0xffff7ab0b034   148  add x1, x6, #0x20 (32)
0xffff7ab0b038   152  ldr x2, pc+200 (addr 0x0000ffff7ab0b100)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab0b03c   156  stur x2, [x1, #-1]
0xffff7ab0b040   160  stur x3, [x1, #7]
0xffff7ab0b044   164  stur x1, [x6, #15]
0xffff7ab0b048   168  ldr x2, [fp]
0xffff7ab0b04c   172  ldur x3, [x2, #-8]
0xffff7ab0b050   176  movz x16, #0xe00000000
0xffff7ab0b054   180  cmp x3, x16
0xffff7ab0b058   184  csel x3, fp, x2, ne
0xffff7ab0b05c   188  movz x2, #0x0
0xffff7ab0b060   192  cmp w0, w2
0xffff7ab0b064   196  b.le #+0x20 (addr 0xffff7ab0b084)
0xffff7ab0b068   200  sub w4, w0, w2
0xffff7ab0b06c   204  add w4, w4, #0x1 (1)
0xffff7ab0b070   208  ldr x4, [x3, w4, uxtw #3]
0xffff7ab0b074   212  add x5, x1, #0xf (15)
0xffff7ab0b078   216  str x4, [x5, w2, sxtw #3]
0xffff7ab0b07c   220  add w2, w2, #0x1 (1)
0xffff7ab0b080   224  b #-0x20 (addr 0xffff7ab0b060)
0xffff7ab0b084   228  add w0, w0, #0x1 (1)
0xffff7ab0b088   232  lsl x1, x0, #32
0xffff7ab0b08c   236  mov x0, x6
0xffff7ab0b090   240  mov jssp, fp
0xffff7ab0b094   244  ldp fp, lr, [jssp], #16
0xffff7ab0b098   248  add jssp, jssp, x1, lsr #29
0xffff7ab0b09c   252  ret
0xffff7ab0b0a0   256  movz x6, #0x0
0xffff7ab0b0a4   260  mov x16, lr
0xffff7ab0b0a8   264  ldr x17, pc+96 (addr 0x0000ffff7ab0b108)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0b0ac   268  blr x17
0xffff7ab0b0b0   272  lsl x0, x2, #32
0xffff7ab0b0b4   276  movz x10, #0x0
0xffff7ab0b0b8   280  sub csp, jssp, #0x10 (16)
0xffff7ab0b0bc   284  stp x10, x0, [jssp, #-16]!
0xffff7ab0b0c0   288  movz x0, #0x2
0xffff7ab0b0c4   292  movz x1, #0x5b88
0xffff7ab0b0c8   296  movk x1, #0xe2, lsl #16
0xffff7ab0b0cc   300  ldr x16, pc+68 (addr 0x0000ffff7ab0b110)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0b0d0   304  blr x16
0xffff7ab0b0d4   308  str x0, [jssp, #48]
0xffff7ab0b0d8   312  ldr x16, pc+64 (addr 0x0000ffff7ab0b118)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0b0dc   316  blr x16
0xffff7ab0b0e0   320  b #-0xdc (addr 0xffff7ab0b004)
0xffff7ab0b0e4   324  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7ab0b0e8   328  d63f03e0       constant
0xffff7ab0b0ec   332  d503201f       constant
0xffff7ab0b0f0   336  20d04201       constant
0xffff7ab0b0f4   340  00000000       constant
0xffff7ab0b0f8   344  20d04201       constant
0xffff7ab0b0fc   348  00000000       constant
0xffff7ab0b100   352  4ec04259       constant
0xffff7ab0b104   356  00000000       constant
0xffff7ab0b108   360  7ab06820       constant
0xffff7ab0b10c   364  0000ffff       constant
0xffff7ab0b110   368  7ab06260       constant
0xffff7ab0b114   372  0000ffff       constant
0xffff7ab0b118   376  7ab068e0       constant
0xffff7ab0b11c   380  0000ffff       constant
0xffff7ab0b120   384  movz x16, #0x0
0xffff7ab0b124   388  bl #+0xc (addr 0xffff7ab0b130)
0xffff7ab0b128   392  movz x16, #0x8
0xffff7ab0b12c   396  bl #+0x4 (addr 0xffff7ab0b130)
0xffff7ab0b130   400  ldr x17, pc+24 (addr 0x0000ffff7ab0b148)    ;; lazy deoptimization bailout 0
0xffff7ab0b134   404  add x17, x17, x16
0xffff7ab0b138   408  br x17
0xffff7ab0b13c   412  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0b140   416  d63f03e0       constant
0xffff7ab0b144   420  d503201f       constant
0xffff7ab0b148   424  7a906000       constant
0xffff7ab0b14c   428  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0b0d4   308  000 | x1 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab0b020  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0b028  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0b038  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab0b0a8  code target (STUB)  (0xffff7ab06820)
0xffff7ab0b0cc  code target (STUB)  (0xffff7ab06260)
0xffff7ab0b0d8  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0b0e4  constant pool (size 60)
0xffff7ab0b130  runtime entry
0xffff7ab0b13c  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 453)
0xffff7ab0b1e0     0  movz x16, #0xa00000000
0xffff7ab0b1e4     4  sub csp, jssp, #0x10 (16)
0xffff7ab0b1e8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0b1ec    12  mov fp, jssp
0xffff7ab0b1f0    16  sub csp, jssp, #0x8 (8)
0xffff7ab0b1f4    20  sub jssp, jssp, #0x8 (8)
0xffff7ab0b1f8    24  stur x16, [fp, #-8]
0xffff7ab0b1fc    28  movz w16, #0x257f
0xffff7ab0b200    32  cmp w0, w16, lsl #3
0xffff7ab0b204    36  b.hs #+0x15c (addr 0xffff7ab0b360)
0xffff7ab0b208    40  lsl x3, x0, #32
0xffff7ab0b20c    44  lsl w4, w0, #3
0xffff7ab0b210    48  add w4, w4, #0x10 (16)
0xffff7ab0b214    52  cmp w4, #0x96000 (614400)
0xffff7ab0b218    56  b.hs #+0x150 (addr 0xffff7ab0b368)
0xffff7ab0b21c    60  add w2, w4, #0x20 (32)
0xffff7ab0b220    64  sxtw x2, w2
0xffff7ab0b224    68  movz x4, #0xe2c0
0xffff7ab0b228    72  movk x4, #0x9ab, lsl #16
0xffff7ab0b22c    76  ldp x6, x16, [x4]
0xffff7ab0b230    80  adds x5, x6, x2
0xffff7ab0b234    84  ccmp x5, x16, #nzCv, lo
0xffff7ab0b238    88  b.hi #+0xa8 (addr 0xffff7ab0b2e0)
0xffff7ab0b23c    92  str x5, [x4]
0xffff7ab0b240    96  orr x6, x6, #0x1
0xffff7ab0b244   100  movz w2, #0x0
0xffff7ab0b248   104  stur x2, [x6, #31]
0xffff7ab0b24c   108  ldur x1, [x1, #39]
0xffff7ab0b250   112  ldur x1, [x1, #39]
0xffff7ab0b254   116  movz x16, #0x18f
0xffff7ab0b258   120  ldr x1, [x1, x16]
0xffff7ab0b25c   124  stur x1, [x6, #-1]
0xffff7ab0b260   128  ldr x1, pc+208 (addr 0x0000ffff7ab0b330)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0b264   132  stur x1, [x6, #7]
0xffff7ab0b268   136  ldr x1, pc+208 (addr 0x0000ffff7ab0b338)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0b26c   140  stur x1, [x6, #15]
0xffff7ab0b270   144  stur x3, [x6, #23]
0xffff7ab0b274   148  add x1, x6, #0x20 (32)
0xffff7ab0b278   152  ldr x2, pc+200 (addr 0x0000ffff7ab0b340)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab0b27c   156  stur x2, [x1, #-1]
0xffff7ab0b280   160  stur x3, [x1, #7]
0xffff7ab0b284   164  stur x1, [x6, #15]
0xffff7ab0b288   168  ldr x2, [fp]
0xffff7ab0b28c   172  ldur x3, [x2, #-8]
0xffff7ab0b290   176  movz x16, #0xe00000000
0xffff7ab0b294   180  cmp x3, x16
0xffff7ab0b298   184  csel x3, fp, x2, ne
0xffff7ab0b29c   188  movz x2, #0x0
0xffff7ab0b2a0   192  cmp w0, w2
0xffff7ab0b2a4   196  b.le #+0x20 (addr 0xffff7ab0b2c4)
0xffff7ab0b2a8   200  sub w4, w0, w2
0xffff7ab0b2ac   204  add w4, w4, #0x1 (1)
0xffff7ab0b2b0   208  ldr x4, [x3, w4, uxtw #3]
0xffff7ab0b2b4   212  add x5, x1, #0xf (15)
0xffff7ab0b2b8   216  str x4, [x5, w2, sxtw #3]
0xffff7ab0b2bc   220  add w2, w2, #0x1 (1)
0xffff7ab0b2c0   224  b #-0x20 (addr 0xffff7ab0b2a0)
0xffff7ab0b2c4   228  add w0, w0, #0x1 (1)
0xffff7ab0b2c8   232  lsl x1, x0, #32
0xffff7ab0b2cc   236  mov x0, x6
0xffff7ab0b2d0   240  mov jssp, fp
0xffff7ab0b2d4   244  ldp fp, lr, [jssp], #16
0xffff7ab0b2d8   248  add jssp, jssp, x1, lsr #29
0xffff7ab0b2dc   252  ret
0xffff7ab0b2e0   256  movz x6, #0x0
0xffff7ab0b2e4   260  mov x16, lr
0xffff7ab0b2e8   264  ldr x17, pc+96 (addr 0x0000ffff7ab0b348)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0b2ec   268  blr x17
0xffff7ab0b2f0   272  lsl x0, x2, #32
0xffff7ab0b2f4   276  movz x10, #0x0
0xffff7ab0b2f8   280  sub csp, jssp, #0x10 (16)
0xffff7ab0b2fc   284  stp x10, x0, [jssp, #-16]!
0xffff7ab0b300   288  movz x0, #0x2
0xffff7ab0b304   292  movz x1, #0x5b88
0xffff7ab0b308   296  movk x1, #0xe2, lsl #16
0xffff7ab0b30c   300  ldr x16, pc+68 (addr 0x0000ffff7ab0b350)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0b310   304  blr x16
0xffff7ab0b314   308  str x0, [jssp, #48]
0xffff7ab0b318   312  ldr x16, pc+64 (addr 0x0000ffff7ab0b358)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0b31c   316  blr x16
0xffff7ab0b320   320  b #-0xdc (addr 0xffff7ab0b244)
0xffff7ab0b324   324  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7ab0b328   328  d63f03e0       constant
0xffff7ab0b32c   332  d503201f       constant
0xffff7ab0b330   336  20d04201       constant
0xffff7ab0b334   340  00000000       constant
0xffff7ab0b338   344  20d04201       constant
0xffff7ab0b33c   348  00000000       constant
0xffff7ab0b340   352  4ec04259       constant
0xffff7ab0b344   356  00000000       constant
0xffff7ab0b348   360  7ab06820       constant
0xffff7ab0b34c   364  0000ffff       constant
0xffff7ab0b350   368  7ab06260       constant
0xffff7ab0b354   372  0000ffff       constant
0xffff7ab0b358   376  7ab068e0       constant
0xffff7ab0b35c   380  0000ffff       constant
0xffff7ab0b360   384  movz x16, #0x0
0xffff7ab0b364   388  bl #+0xc (addr 0xffff7ab0b370)
0xffff7ab0b368   392  movz x16, #0x8
0xffff7ab0b36c   396  bl #+0x4 (addr 0xffff7ab0b370)
0xffff7ab0b370   400  ldr x17, pc+24 (addr 0x0000ffff7ab0b388)    ;; lazy deoptimization bailout 0
0xffff7ab0b374   404  add x17, x17, x16
0xffff7ab0b378   408  br x17
0xffff7ab0b37c   412  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0b380   416  d63f03e0       constant
0xffff7ab0b384   420  d503201f       constant
0xffff7ab0b388   424  7a906000       constant
0xffff7ab0b38c   428  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0b314   308  000 | x1 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab0b260  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0b268  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0b278  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab0b2e8  code target (STUB)  (0xffff7ab06820)
0xffff7ab0b30c  code target (STUB)  (0xffff7ab06260)
0xffff7ab0b318  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0b324  constant pool (size 60)
0xffff7ab0b370  runtime entry
0xffff7ab0b37c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNArgumentsConstructorStub
name = ArrayNArgumentsConstructorStub_FAST_HOLEY_ELEMENTS
compiler = crankshaft
Instructions (size = 453)
0xffff7ab0b1e0     0  movz x16, #0xa00000000
0xffff7ab0b1e4     4  sub csp, jssp, #0x10 (16)
0xffff7ab0b1e8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0b1ec    12  mov fp, jssp
0xffff7ab0b1f0    16  sub csp, jssp, #0x8 (8)
0xffff7ab0b1f4    20  sub jssp, jssp, #0x8 (8)
0xffff7ab0b1f8    24  stur x16, [fp, #-8]
0xffff7ab0b1fc    28  movz w16, #0x257f
0xffff7ab0b200    32  cmp w0, w16, lsl #3
0xffff7ab0b204    36  b.hs #+0x15c (addr 0xffff7ab0b360)
0xffff7ab0b208    40  lsl x3, x0, #32
0xffff7ab0b20c    44  lsl w4, w0, #3
0xffff7ab0b210    48  add w4, w4, #0x10 (16)
0xffff7ab0b214    52  cmp w4, #0x96000 (614400)
0xffff7ab0b218    56  b.hs #+0x150 (addr 0xffff7ab0b368)
0xffff7ab0b21c    60  add w2, w4, #0x20 (32)
0xffff7ab0b220    64  sxtw x2, w2
0xffff7ab0b224    68  movz x4, #0xe2c0
0xffff7ab0b228    72  movk x4, #0x9ab, lsl #16
0xffff7ab0b22c    76  ldp x6, x16, [x4]
0xffff7ab0b230    80  adds x5, x6, x2
0xffff7ab0b234    84  ccmp x5, x16, #nzCv, lo
0xffff7ab0b238    88  b.hi #+0xa8 (addr 0xffff7ab0b2e0)
0xffff7ab0b23c    92  str x5, [x4]
0xffff7ab0b240    96  orr x6, x6, #0x1
0xffff7ab0b244   100  movz w2, #0x0
0xffff7ab0b248   104  stur x2, [x6, #31]
0xffff7ab0b24c   108  ldur x1, [x1, #39]
0xffff7ab0b250   112  ldur x1, [x1, #39]
0xffff7ab0b254   116  movz x16, #0x18f
0xffff7ab0b258   120  ldr x1, [x1, x16]
0xffff7ab0b25c   124  stur x1, [x6, #-1]
0xffff7ab0b260   128  ldr x1, pc+208 (addr 0x0000ffff7ab0b330)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0b264   132  stur x1, [x6, #7]
0xffff7ab0b268   136  ldr x1, pc+208 (addr 0x0000ffff7ab0b338)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0b26c   140  stur x1, [x6, #15]
0xffff7ab0b270   144  stur x3, [x6, #23]
0xffff7ab0b274   148  add x1, x6, #0x20 (32)
0xffff7ab0b278   152  ldr x2, pc+200 (addr 0x0000ffff7ab0b340)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab0b27c   156  stur x2, [x1, #-1]
0xffff7ab0b280   160  stur x3, [x1, #7]
0xffff7ab0b284   164  stur x1, [x6, #15]
0xffff7ab0b288   168  ldr x2, [fp]
0xffff7ab0b28c   172  ldur x3, [x2, #-8]
0xffff7ab0b290   176  movz x16, #0xe00000000
0xffff7ab0b294   180  cmp x3, x16
0xffff7ab0b298   184  csel x3, fp, x2, ne
0xffff7ab0b29c   188  movz x2, #0x0
0xffff7ab0b2a0   192  cmp w0, w2
0xffff7ab0b2a4   196  b.le #+0x20 (addr 0xffff7ab0b2c4)
0xffff7ab0b2a8   200  sub w4, w0, w2
0xffff7ab0b2ac   204  add w4, w4, #0x1 (1)
0xffff7ab0b2b0   208  ldr x4, [x3, w4, uxtw #3]
0xffff7ab0b2b4   212  add x5, x1, #0xf (15)
0xffff7ab0b2b8   216  str x4, [x5, w2, sxtw #3]
0xffff7ab0b2bc   220  add w2, w2, #0x1 (1)
0xffff7ab0b2c0   224  b #-0x20 (addr 0xffff7ab0b2a0)
0xffff7ab0b2c4   228  add w0, w0, #0x1 (1)
0xffff7ab0b2c8   232  lsl x1, x0, #32
0xffff7ab0b2cc   236  mov x0, x6
0xffff7ab0b2d0   240  mov jssp, fp
0xffff7ab0b2d4   244  ldp fp, lr, [jssp], #16
0xffff7ab0b2d8   248  add jssp, jssp, x1, lsr #29
0xffff7ab0b2dc   252  ret
0xffff7ab0b2e0   256  movz x6, #0x0
0xffff7ab0b2e4   260  mov x16, lr
0xffff7ab0b2e8   264  ldr x17, pc+96 (addr 0x0000ffff7ab0b348)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0b2ec   268  blr x17
0xffff7ab0b2f0   272  lsl x0, x2, #32
0xffff7ab0b2f4   276  movz x10, #0x0
0xffff7ab0b2f8   280  sub csp, jssp, #0x10 (16)
0xffff7ab0b2fc   284  stp x10, x0, [jssp, #-16]!
0xffff7ab0b300   288  movz x0, #0x2
0xffff7ab0b304   292  movz x1, #0x5b88
0xffff7ab0b308   296  movk x1, #0xe2, lsl #16
0xffff7ab0b30c   300  ldr x16, pc+68 (addr 0x0000ffff7ab0b350)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0b310   304  blr x16
0xffff7ab0b314   308  str x0, [jssp, #48]
0xffff7ab0b318   312  ldr x16, pc+64 (addr 0x0000ffff7ab0b358)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0b31c   316  blr x16
0xffff7ab0b320   320  b #-0xdc (addr 0xffff7ab0b244)
0xffff7ab0b324   324  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7ab0b328   328  d63f03e0       constant
0xffff7ab0b32c   332  d503201f       constant
0xffff7ab0b330   336  20d04201       constant
0xffff7ab0b334   340  00000000       constant
0xffff7ab0b338   344  20d04201       constant
0xffff7ab0b33c   348  00000000       constant
0xffff7ab0b340   352  4ec04259       constant
0xffff7ab0b344   356  00000000       constant
0xffff7ab0b348   360  7ab06820       constant
0xffff7ab0b34c   364  0000ffff       constant
0xffff7ab0b350   368  7ab06260       constant
0xffff7ab0b354   372  0000ffff       constant
0xffff7ab0b358   376  7ab068e0       constant
0xffff7ab0b35c   380  0000ffff       constant
0xffff7ab0b360   384  movz x16, #0x0
0xffff7ab0b364   388  bl #+0xc (addr 0xffff7ab0b370)
0xffff7ab0b368   392  movz x16, #0x8
0xffff7ab0b36c   396  bl #+0x4 (addr 0xffff7ab0b370)
0xffff7ab0b370   400  ldr x17, pc+24 (addr 0x0000ffff7ab0b388)    ;; lazy deoptimization bailout 0
0xffff7ab0b374   404  add x17, x17, x16
0xffff7ab0b378   408  br x17
0xffff7ab0b37c   412  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0b380   416  d63f03e0       constant
0xffff7ab0b384   420  d503201f       constant
0xffff7ab0b388   424  7a906000       constant
0xffff7ab0b38c   428  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0b314   308  000 | x1 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab0b260  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0b268  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0b278  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab0b2e8  code target (STUB)  (0xffff7ab06820)
0xffff7ab0b30c  code target (STUB)  (0xffff7ab06260)
0xffff7ab0b318  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0b324  constant pool (size 60)
0xffff7ab0b370  runtime entry
0xffff7ab0b37c  constant pool (size 20)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1904)
0xffff7ab0b420     0  adr xzr, #+0x40 (addr 0xffff7ab0b460)
0xffff7ab0b424     4  adr xzr, #+0x358 (addr 0xffff7ab0b77c)
0xffff7ab0b428     8  ldr x16, pc+1720 (addr 0x0000ffff7ab0bae0)    ;; external reference (store_buffer_top)
0xffff7ab0b42c    12  ldr x0, [x16]
0xffff7ab0b430    16  str x1, [x0], #8
0xffff7ab0b434    20  str x0, [x16]
0xffff7ab0b438    24  tst x0, #0x1ffff
0xffff7ab0b43c    28  b.eq #+0x8 (addr 0xffff7ab0b444)
0xffff7ab0b440    32  ret
0xffff7ab0b444    36  sub csp, jssp, #0x8 (8)
0xffff7ab0b448    40  str lr, [jssp, #-8]!
0xffff7ab0b44c    44  ldr x17, pc+1692 (addr 0x0000ffff7ab0bae8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0b450    48  blr x17
0xffff7ab0b454    52  ldr lr, [jssp], #8
0xffff7ab0b458    56  ret
0xffff7ab0b45c    60  ret
0xffff7ab0b460    64  sub csp, jssp, #0x10 (16)
0xffff7ab0b464    68  stp x3, x2, [jssp, #-16]!
0xffff7ab0b468    72  ldr x0, [x1]
0xffff7ab0b46c    76  and x16, x0, #0xfffffffffff00000
0xffff7ab0b470    80  ldr x16, [x16, #8]
0xffff7ab0b474    84  tst x16, #0x18
0xffff7ab0b478    88  b.eq #+0x1d4 (addr 0xffff7ab0b64c)
0xffff7ab0b47c    92  and x16, x4, #0xfffffffffff00000
0xffff7ab0b480    96  ldr x16, [x16, #8]
0xffff7ab0b484   100  tst x16, #0x18
0xffff7ab0b488   104  b.ne #+0x1c4 (addr 0xffff7ab0b64c)
0xffff7ab0b48c   108  and x0, x4, #0xfffffffffff00000
0xffff7ab0b490   112  ldr x2, [x0, #104]
0xffff7ab0b494   116  subs x2, x2, #0x1 (1)
0xffff7ab0b498   120  str x2, [x0, #104]
0xffff7ab0b49c   124  b.mi #+0xc4 (addr 0xffff7ab0b560)
0xffff7ab0b4a0   128  ubfx x16, x4, #8, #12
0xffff7ab0b4a4   132  and x0, x4, #0xfffffffffff00000
0xffff7ab0b4a8   136  add x0, x0, x16, lsl #2
0xffff7ab0b4ac   140  ubfx x2, x4, #3, #5
0xffff7ab0b4b0   144  ldr x0, [x0, #360]
0xffff7ab0b4b4   148  lsr x0, x0, x2
0xffff7ab0b4b8   152  tbz w0, #0, #+0x8 (addr 0xffff7ab0b4c0)
0xffff7ab0b4bc   156  tbnz w0, #1, #+0x3c (addr 0xffff7ab0b4f8)
0xffff7ab0b4c0   160  ldp x3, x2, [jssp], #16
0xffff7ab0b4c4   164  ldr x16, pc+1580 (addr 0x0000ffff7ab0baf0)    ;; external reference (store_buffer_top)
0xffff7ab0b4c8   168  ldr x0, [x16]
0xffff7ab0b4cc   172  str x1, [x0], #8
0xffff7ab0b4d0   176  str x0, [x16]
0xffff7ab0b4d4   180  tst x0, #0x1ffff
0xffff7ab0b4d8   184  b.eq #+0x8 (addr 0xffff7ab0b4e0)
0xffff7ab0b4dc   188  ret
0xffff7ab0b4e0   192  sub csp, jssp, #0x8 (8)
0xffff7ab0b4e4   196  str lr, [jssp, #-8]!
0xffff7ab0b4e8   200  ldr x17, pc+1552 (addr 0x0000ffff7ab0baf8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0b4ec   204  blr x17
0xffff7ab0b4f0   208  ldr lr, [jssp], #8
0xffff7ab0b4f4   212  ret
0xffff7ab0b4f8   216  ldr x0, [x1]
0xffff7ab0b4fc   220  sub csp, jssp, #0x10 (16)
0xffff7ab0b500   224  stp x4, x1, [jssp, #-16]!
0xffff7ab0b504   228  ubfx x16, x0, #8, #12
0xffff7ab0b508   232  and x2, x0, #0xfffffffffff00000
0xffff7ab0b50c   236  add x2, x2, x16, lsl #2
0xffff7ab0b510   240  ubfx x4, x0, #3, #5
0xffff7ab0b514   244  ldr x1, [x2, #360]
0xffff7ab0b518   248  lsr x1, x1, x4
0xffff7ab0b51c   252  tbz w1, #0, #+0x40 (addr 0xffff7ab0b55c)
0xffff7ab0b520   256  ldp x4, x1, [jssp], #16
0xffff7ab0b524   260  ldp x3, x2, [jssp], #16
0xffff7ab0b528   264  ldr x16, pc+1496 (addr 0x0000ffff7ab0bb00)    ;; external reference (store_buffer_top)
0xffff7ab0b52c   268  ldr x0, [x16]
0xffff7ab0b530   272  str x1, [x0], #8
0xffff7ab0b534   276  str x0, [x16]
0xffff7ab0b538   280  tst x0, #0x1ffff
0xffff7ab0b53c   284  b.eq #+0x8 (addr 0xffff7ab0b544)
0xffff7ab0b540   288  ret
0xffff7ab0b544   292  sub csp, jssp, #0x8 (8)
0xffff7ab0b548   296  str lr, [jssp, #-8]!
0xffff7ab0b54c   300  ldr x17, pc+1468 (addr 0x0000ffff7ab0bb08)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0b550   304  blr x17
0xffff7ab0b554   308  ldr lr, [jssp], #8
0xffff7ab0b558   312  ret
0xffff7ab0b55c   316  ldp x4, x1, [jssp], #16
0xffff7ab0b560   320  sub csp, jssp, #0x78 (120)
0xffff7ab0b564   324  stp x14, x15, [jssp, #-32]!
0xffff7ab0b568   328  stp x18, lr, [jssp, #16]
0xffff7ab0b56c   332  stp x10, x11, [jssp, #-32]!
0xffff7ab0b570   336  stp x12, x13, [jssp, #16]
0xffff7ab0b574   340  stp x6, x7, [jssp, #-32]!
0xffff7ab0b578   344  stp x8, x9, [jssp, #16]
0xffff7ab0b57c   348  stp x1, x4, [jssp, #-24]!
0xffff7ab0b580   352  str x5, [jssp, #16]
0xffff7ab0b584   356  sub csp, jssp, #0xb0 (176)
0xffff7ab0b588   360  stp d26, d27, [jssp, #-32]!
0xffff7ab0b58c   364  stp d28, d29, [jssp, #16]
0xffff7ab0b590   368  stp d22, d23, [jssp, #-32]!
0xffff7ab0b594   372  stp d24, d25, [jssp, #16]
0xffff7ab0b598   376  stp d18, d19, [jssp, #-32]!
0xffff7ab0b59c   380  stp d20, d21, [jssp, #16]
0xffff7ab0b5a0   384  stp d6, d7, [jssp, #-32]!
0xffff7ab0b5a4   388  stp d16, d17, [jssp, #16]
0xffff7ab0b5a8   392  stp d2, d3, [jssp, #-32]!
0xffff7ab0b5ac   396  stp d4, d5, [jssp, #16]
0xffff7ab0b5b0   400  stp d0, d1, [jssp, #-16]!
0xffff7ab0b5b4   404  mov x0, x4
0xffff7ab0b5b8   408  ldr x2, pc+1368 (addr 0x0000ffff7ab0bb10)    ;; external reference (isolate)
0xffff7ab0b5bc   412  ldr x16, pc+1372 (addr 0x0000ffff7ab0bb18)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0b5c0   416  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0b5c4   420  blr x16
0xffff7ab0b5c8   424  ldp d2, d3, [jssp, #16]
0xffff7ab0b5cc   428  ldp d0, d1, [jssp], #32
0xffff7ab0b5d0   432  ldp d6, d7, [jssp, #16]
0xffff7ab0b5d4   436  ldp d4, d5, [jssp], #32
0xffff7ab0b5d8   440  ldp d18, d19, [jssp, #16]
0xffff7ab0b5dc   444  ldp d16, d17, [jssp], #32
0xffff7ab0b5e0   448  ldp d22, d23, [jssp, #16]
0xffff7ab0b5e4   452  ldp d20, d21, [jssp], #32
0xffff7ab0b5e8   456  ldp d26, d27, [jssp, #16]
0xffff7ab0b5ec   460  ldp d24, d25, [jssp], #32
0xffff7ab0b5f0   464  ldp d28, d29, [jssp], #16
0xffff7ab0b5f4   468  ldp x5, x6, [jssp, #16]
0xffff7ab0b5f8   472  ldp x1, x4, [jssp], #32
0xffff7ab0b5fc   476  ldp x9, x10, [jssp, #16]
0xffff7ab0b600   480  ldp x7, x8, [jssp], #32
0xffff7ab0b604   484  ldp x13, x14, [jssp, #16]
0xffff7ab0b608   488  ldp x11, x12, [jssp], #32
0xffff7ab0b60c   492  ldr lr, [jssp, #16]
0xffff7ab0b610   496  ldp x15, x18, [jssp], #24
0xffff7ab0b614   500  ldp x3, x2, [jssp], #16
0xffff7ab0b618   504  ldr x16, pc+1288 (addr 0x0000ffff7ab0bb20)    ;; external reference (store_buffer_top)
0xffff7ab0b61c   508  ldr x0, [x16]
0xffff7ab0b620   512  str x1, [x0], #8
0xffff7ab0b624   516  str x0, [x16]
0xffff7ab0b628   520  tst x0, #0x1ffff
0xffff7ab0b62c   524  b.eq #+0x8 (addr 0xffff7ab0b634)
0xffff7ab0b630   528  ret
0xffff7ab0b634   532  sub csp, jssp, #0x8 (8)
0xffff7ab0b638   536  str lr, [jssp, #-8]!
0xffff7ab0b63c   540  ldr x17, pc+1260 (addr 0x0000ffff7ab0bb28)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0b640   544  blr x17
0xffff7ab0b644   548  ldr lr, [jssp], #8
0xffff7ab0b648   552  ret
0xffff7ab0b64c   556  and x0, x4, #0xfffffffffff00000
0xffff7ab0b650   560  ldr x2, [x0, #104]
0xffff7ab0b654   564  subs x2, x2, #0x1 (1)
0xffff7ab0b658   568  str x2, [x0, #104]
0xffff7ab0b65c   572  b.mi #+0x64 (addr 0xffff7ab0b6c0)
0xffff7ab0b660   576  ubfx x16, x4, #8, #12
0xffff7ab0b664   580  and x0, x4, #0xfffffffffff00000
0xffff7ab0b668   584  add x0, x0, x16, lsl #2
0xffff7ab0b66c   588  ubfx x2, x4, #3, #5
0xffff7ab0b670   592  ldr x0, [x0, #360]
0xffff7ab0b674   596  lsr x0, x0, x2
0xffff7ab0b678   600  tbz w0, #0, #+0x8 (addr 0xffff7ab0b680)
0xffff7ab0b67c   604  tbnz w0, #1, #+0xc (addr 0xffff7ab0b688)
0xffff7ab0b680   608  ldp x3, x2, [jssp], #16
0xffff7ab0b684   612  ret
0xffff7ab0b688   616  ldr x0, [x1]
0xffff7ab0b68c   620  sub csp, jssp, #0x10 (16)
0xffff7ab0b690   624  stp x4, x1, [jssp, #-16]!
0xffff7ab0b694   628  ubfx x16, x0, #8, #12
0xffff7ab0b698   632  and x2, x0, #0xfffffffffff00000
0xffff7ab0b69c   636  add x2, x2, x16, lsl #2
0xffff7ab0b6a0   640  ubfx x4, x0, #3, #5
0xffff7ab0b6a4   644  ldr x1, [x2, #360]
0xffff7ab0b6a8   648  lsr x1, x1, x4
0xffff7ab0b6ac   652  tbz w1, #0, #+0x10 (addr 0xffff7ab0b6bc)
0xffff7ab0b6b0   656  ldp x4, x1, [jssp], #16
0xffff7ab0b6b4   660  ldp x3, x2, [jssp], #16
0xffff7ab0b6b8   664  ret
0xffff7ab0b6bc   668  ldp x4, x1, [jssp], #16
0xffff7ab0b6c0   672  sub csp, jssp, #0x78 (120)
0xffff7ab0b6c4   676  stp x14, x15, [jssp, #-32]!
0xffff7ab0b6c8   680  stp x18, lr, [jssp, #16]
0xffff7ab0b6cc   684  stp x10, x11, [jssp, #-32]!
0xffff7ab0b6d0   688  stp x12, x13, [jssp, #16]
0xffff7ab0b6d4   692  stp x6, x7, [jssp, #-32]!
0xffff7ab0b6d8   696  stp x8, x9, [jssp, #16]
0xffff7ab0b6dc   700  stp x1, x4, [jssp, #-24]!
0xffff7ab0b6e0   704  str x5, [jssp, #16]
0xffff7ab0b6e4   708  sub csp, jssp, #0xb0 (176)
0xffff7ab0b6e8   712  stp d26, d27, [jssp, #-32]!
0xffff7ab0b6ec   716  stp d28, d29, [jssp, #16]
0xffff7ab0b6f0   720  stp d22, d23, [jssp, #-32]!
0xffff7ab0b6f4   724  stp d24, d25, [jssp, #16]
0xffff7ab0b6f8   728  stp d18, d19, [jssp, #-32]!
0xffff7ab0b6fc   732  stp d20, d21, [jssp, #16]
0xffff7ab0b700   736  stp d6, d7, [jssp, #-32]!
0xffff7ab0b704   740  stp d16, d17, [jssp, #16]
0xffff7ab0b708   744  stp d2, d3, [jssp, #-32]!
0xffff7ab0b70c   748  stp d4, d5, [jssp, #16]
0xffff7ab0b710   752  stp d0, d1, [jssp, #-16]!
0xffff7ab0b714   756  mov x0, x4
0xffff7ab0b718   760  ldr x2, pc+1048 (addr 0x0000ffff7ab0bb30)    ;; external reference (isolate)
0xffff7ab0b71c   764  ldr x16, pc+1052 (addr 0x0000ffff7ab0bb38)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0b720   768  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0b724   772  blr x16
0xffff7ab0b728   776  ldp d2, d3, [jssp, #16]
0xffff7ab0b72c   780  ldp d0, d1, [jssp], #32
0xffff7ab0b730   784  ldp d6, d7, [jssp, #16]
0xffff7ab0b734   788  ldp d4, d5, [jssp], #32
0xffff7ab0b738   792  ldp d18, d19, [jssp, #16]
0xffff7ab0b73c   796  ldp d16, d17, [jssp], #32
0xffff7ab0b740   800  ldp d22, d23, [jssp, #16]
0xffff7ab0b744   804  ldp d20, d21, [jssp], #32
0xffff7ab0b748   808  ldp d26, d27, [jssp, #16]
0xffff7ab0b74c   812  ldp d24, d25, [jssp], #32
0xffff7ab0b750   816  ldp d28, d29, [jssp], #16
0xffff7ab0b754   820  ldp x5, x6, [jssp, #16]
0xffff7ab0b758   824  ldp x1, x4, [jssp], #32
0xffff7ab0b75c   828  ldp x9, x10, [jssp, #16]
0xffff7ab0b760   832  ldp x7, x8, [jssp], #32
0xffff7ab0b764   836  ldp x13, x14, [jssp, #16]
0xffff7ab0b768   840  ldp x11, x12, [jssp], #32
0xffff7ab0b76c   844  ldr lr, [jssp, #16]
0xffff7ab0b770   848  ldp x15, x18, [jssp], #24
0xffff7ab0b774   852  ldp x3, x2, [jssp], #16
0xffff7ab0b778   856  ret
0xffff7ab0b77c   860  sub csp, jssp, #0x10 (16)
0xffff7ab0b780   864  stp x3, x2, [jssp, #-16]!
0xffff7ab0b784   868  ldr x0, [x1]
0xffff7ab0b788   872  and x16, x0, #0xfffffffffff00000
0xffff7ab0b78c   876  ldr x16, [x16, #8]
0xffff7ab0b790   880  tst x16, #0x18
0xffff7ab0b794   884  b.eq #+0x1f4 (addr 0xffff7ab0b988)
0xffff7ab0b798   888  and x16, x4, #0xfffffffffff00000
0xffff7ab0b79c   892  ldr x16, [x16, #8]
0xffff7ab0b7a0   896  tst x16, #0x18
0xffff7ab0b7a4   900  b.ne #+0x1e4 (addr 0xffff7ab0b988)
0xffff7ab0b7a8   904  and x0, x4, #0xfffffffffff00000
0xffff7ab0b7ac   908  ldr x2, [x0, #104]
0xffff7ab0b7b0   912  subs x2, x2, #0x1 (1)
0xffff7ab0b7b4   916  str x2, [x0, #104]
0xffff7ab0b7b8   920  b.mi #+0xe4 (addr 0xffff7ab0b89c)
0xffff7ab0b7bc   924  ubfx x16, x4, #8, #12
0xffff7ab0b7c0   928  and x0, x4, #0xfffffffffff00000
0xffff7ab0b7c4   932  add x0, x0, x16, lsl #2
0xffff7ab0b7c8   936  ubfx x2, x4, #3, #5
0xffff7ab0b7cc   940  ldr x0, [x0, #360]
0xffff7ab0b7d0   944  lsr x0, x0, x2
0xffff7ab0b7d4   948  tbz w0, #0, #+0x8 (addr 0xffff7ab0b7dc)
0xffff7ab0b7d8   952  tbnz w0, #1, #+0x3c (addr 0xffff7ab0b814)
0xffff7ab0b7dc   956  ldp x3, x2, [jssp], #16
0xffff7ab0b7e0   960  ldr x16, pc+864 (addr 0x0000ffff7ab0bb40)    ;; external reference (store_buffer_top)
0xffff7ab0b7e4   964  ldr x0, [x16]
0xffff7ab0b7e8   968  str x1, [x0], #8
0xffff7ab0b7ec   972  str x0, [x16]
0xffff7ab0b7f0   976  tst x0, #0x1ffff
0xffff7ab0b7f4   980  b.eq #+0x8 (addr 0xffff7ab0b7fc)
0xffff7ab0b7f8   984  ret
0xffff7ab0b7fc   988  sub csp, jssp, #0x8 (8)
0xffff7ab0b800   992  str lr, [jssp, #-8]!
0xffff7ab0b804   996  ldr x17, pc+836 (addr 0x0000ffff7ab0bb48)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0b808  1000  blr x17
0xffff7ab0b80c  1004  ldr lr, [jssp], #8
0xffff7ab0b810  1008  ret
0xffff7ab0b814  1012  ldr x0, [x1]
0xffff7ab0b818  1016  and x2, x0, #0xfffffffffff00000
0xffff7ab0b81c  1020  ldr x2, [x2, #8]
0xffff7ab0b820  1024  tbz w2, #6, #+0x18 (addr 0xffff7ab0b838)
0xffff7ab0b824  1028  and x2, x4, #0xfffffffffff00000
0xffff7ab0b828  1032  ldr x2, [x2, #8]
0xffff7ab0b82c  1036  movz x16, #0x58
0xffff7ab0b830  1040  tst x2, x16
0xffff7ab0b834  1044  b.eq #+0x68 (addr 0xffff7ab0b89c)
0xffff7ab0b838  1048  sub csp, jssp, #0x10 (16)
0xffff7ab0b83c  1052  stp x4, x1, [jssp, #-16]!
0xffff7ab0b840  1056  ubfx x16, x0, #8, #12
0xffff7ab0b844  1060  and x2, x0, #0xfffffffffff00000
0xffff7ab0b848  1064  add x2, x2, x16, lsl #2
0xffff7ab0b84c  1068  ubfx x4, x0, #3, #5
0xffff7ab0b850  1072  ldr x1, [x2, #360]
0xffff7ab0b854  1076  lsr x1, x1, x4
0xffff7ab0b858  1080  tbz w1, #0, #+0x40 (addr 0xffff7ab0b898)
0xffff7ab0b85c  1084  ldp x4, x1, [jssp], #16
0xffff7ab0b860  1088  ldp x3, x2, [jssp], #16
0xffff7ab0b864  1092  ldr x16, pc+748 (addr 0x0000ffff7ab0bb50)    ;; external reference (store_buffer_top)
0xffff7ab0b868  1096  ldr x0, [x16]
0xffff7ab0b86c  1100  str x1, [x0], #8
0xffff7ab0b870  1104  str x0, [x16]
0xffff7ab0b874  1108  tst x0, #0x1ffff
0xffff7ab0b878  1112  b.eq #+0x8 (addr 0xffff7ab0b880)
0xffff7ab0b87c  1116  ret
0xffff7ab0b880  1120  sub csp, jssp, #0x8 (8)
0xffff7ab0b884  1124  str lr, [jssp, #-8]!
0xffff7ab0b888  1128  ldr x17, pc+720 (addr 0x0000ffff7ab0bb58)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0b88c  1132  blr x17
0xffff7ab0b890  1136  ldr lr, [jssp], #8
0xffff7ab0b894  1140  ret
0xffff7ab0b898  1144  ldp x4, x1, [jssp], #16
0xffff7ab0b89c  1148  sub csp, jssp, #0x78 (120)
0xffff7ab0b8a0  1152  stp x14, x15, [jssp, #-32]!
0xffff7ab0b8a4  1156  stp x18, lr, [jssp, #16]
0xffff7ab0b8a8  1160  stp x10, x11, [jssp, #-32]!
0xffff7ab0b8ac  1164  stp x12, x13, [jssp, #16]
0xffff7ab0b8b0  1168  stp x6, x7, [jssp, #-32]!
0xffff7ab0b8b4  1172  stp x8, x9, [jssp, #16]
0xffff7ab0b8b8  1176  stp x1, x4, [jssp, #-24]!
0xffff7ab0b8bc  1180  str x5, [jssp, #16]
0xffff7ab0b8c0  1184  sub csp, jssp, #0xb0 (176)
0xffff7ab0b8c4  1188  stp d26, d27, [jssp, #-32]!
0xffff7ab0b8c8  1192  stp d28, d29, [jssp, #16]
0xffff7ab0b8cc  1196  stp d22, d23, [jssp, #-32]!
0xffff7ab0b8d0  1200  stp d24, d25, [jssp, #16]
0xffff7ab0b8d4  1204  stp d18, d19, [jssp, #-32]!
0xffff7ab0b8d8  1208  stp d20, d21, [jssp, #16]
0xffff7ab0b8dc  1212  stp d6, d7, [jssp, #-32]!
0xffff7ab0b8e0  1216  stp d16, d17, [jssp, #16]
0xffff7ab0b8e4  1220  stp d2, d3, [jssp, #-32]!
0xffff7ab0b8e8  1224  stp d4, d5, [jssp, #16]
0xffff7ab0b8ec  1228  stp d0, d1, [jssp, #-16]!
0xffff7ab0b8f0  1232  mov x0, x4
0xffff7ab0b8f4  1236  ldr x2, pc+620 (addr 0x0000ffff7ab0bb60)    ;; external reference (isolate)
0xffff7ab0b8f8  1240  ldr x16, pc+624 (addr 0x0000ffff7ab0bb68)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0b8fc  1244  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0b900  1248  blr x16
0xffff7ab0b904  1252  ldp d2, d3, [jssp, #16]
0xffff7ab0b908  1256  ldp d0, d1, [jssp], #32
0xffff7ab0b90c  1260  ldp d6, d7, [jssp, #16]
0xffff7ab0b910  1264  ldp d4, d5, [jssp], #32
0xffff7ab0b914  1268  ldp d18, d19, [jssp, #16]
0xffff7ab0b918  1272  ldp d16, d17, [jssp], #32
0xffff7ab0b91c  1276  ldp d22, d23, [jssp, #16]
0xffff7ab0b920  1280  ldp d20, d21, [jssp], #32
0xffff7ab0b924  1284  ldp d26, d27, [jssp, #16]
0xffff7ab0b928  1288  ldp d24, d25, [jssp], #32
0xffff7ab0b92c  1292  ldp d28, d29, [jssp], #16
0xffff7ab0b930  1296  ldp x5, x6, [jssp, #16]
0xffff7ab0b934  1300  ldp x1, x4, [jssp], #32
0xffff7ab0b938  1304  ldp x9, x10, [jssp, #16]
0xffff7ab0b93c  1308  ldp x7, x8, [jssp], #32
0xffff7ab0b940  1312  ldp x13, x14, [jssp, #16]
0xffff7ab0b944  1316  ldp x11, x12, [jssp], #32
0xffff7ab0b948  1320  ldr lr, [jssp, #16]
0xffff7ab0b94c  1324  ldp x15, x18, [jssp], #24
0xffff7ab0b950  1328  ldp x3, x2, [jssp], #16
0xffff7ab0b954  1332  ldr x16, pc+540 (addr 0x0000ffff7ab0bb70)    ;; external reference (store_buffer_top)
0xffff7ab0b958  1336  ldr x0, [x16]
0xffff7ab0b95c  1340  str x1, [x0], #8
0xffff7ab0b960  1344  str x0, [x16]
0xffff7ab0b964  1348  tst x0, #0x1ffff
0xffff7ab0b968  1352  b.eq #+0x8 (addr 0xffff7ab0b970)
0xffff7ab0b96c  1356  ret
0xffff7ab0b970  1360  sub csp, jssp, #0x8 (8)
0xffff7ab0b974  1364  str lr, [jssp, #-8]!
0xffff7ab0b978  1368  ldr x17, pc+512 (addr 0x0000ffff7ab0bb78)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0b97c  1372  blr x17
0xffff7ab0b980  1376  ldr lr, [jssp], #8
0xffff7ab0b984  1380  ret
0xffff7ab0b988  1384  and x0, x4, #0xfffffffffff00000
0xffff7ab0b98c  1388  ldr x2, [x0, #104]
0xffff7ab0b990  1392  subs x2, x2, #0x1 (1)
0xffff7ab0b994  1396  str x2, [x0, #104]
0xffff7ab0b998  1400  b.mi #+0x84 (addr 0xffff7ab0ba1c)
0xffff7ab0b99c  1404  ubfx x16, x4, #8, #12
0xffff7ab0b9a0  1408  and x0, x4, #0xfffffffffff00000
0xffff7ab0b9a4  1412  add x0, x0, x16, lsl #2
0xffff7ab0b9a8  1416  ubfx x2, x4, #3, #5
0xffff7ab0b9ac  1420  ldr x0, [x0, #360]
0xffff7ab0b9b0  1424  lsr x0, x0, x2
0xffff7ab0b9b4  1428  tbz w0, #0, #+0x8 (addr 0xffff7ab0b9bc)
0xffff7ab0b9b8  1432  tbnz w0, #1, #+0xc (addr 0xffff7ab0b9c4)
0xffff7ab0b9bc  1436  ldp x3, x2, [jssp], #16
0xffff7ab0b9c0  1440  ret
0xffff7ab0b9c4  1444  ldr x0, [x1]
0xffff7ab0b9c8  1448  and x2, x0, #0xfffffffffff00000
0xffff7ab0b9cc  1452  ldr x2, [x2, #8]
0xffff7ab0b9d0  1456  tbz w2, #6, #+0x18 (addr 0xffff7ab0b9e8)
0xffff7ab0b9d4  1460  and x2, x4, #0xfffffffffff00000
0xffff7ab0b9d8  1464  ldr x2, [x2, #8]
0xffff7ab0b9dc  1468  movz x16, #0x58
0xffff7ab0b9e0  1472  tst x2, x16
0xffff7ab0b9e4  1476  b.eq #+0x38 (addr 0xffff7ab0ba1c)
0xffff7ab0b9e8  1480  sub csp, jssp, #0x10 (16)
0xffff7ab0b9ec  1484  stp x4, x1, [jssp, #-16]!
0xffff7ab0b9f0  1488  ubfx x16, x0, #8, #12
0xffff7ab0b9f4  1492  and x2, x0, #0xfffffffffff00000
0xffff7ab0b9f8  1496  add x2, x2, x16, lsl #2
0xffff7ab0b9fc  1500  ubfx x4, x0, #3, #5
0xffff7ab0ba00  1504  ldr x1, [x2, #360]
0xffff7ab0ba04  1508  lsr x1, x1, x4
0xffff7ab0ba08  1512  tbz w1, #0, #+0x10 (addr 0xffff7ab0ba18)
0xffff7ab0ba0c  1516  ldp x4, x1, [jssp], #16
0xffff7ab0ba10  1520  ldp x3, x2, [jssp], #16
0xffff7ab0ba14  1524  ret
0xffff7ab0ba18  1528  ldp x4, x1, [jssp], #16
0xffff7ab0ba1c  1532  sub csp, jssp, #0x78 (120)
0xffff7ab0ba20  1536  stp x14, x15, [jssp, #-32]!
0xffff7ab0ba24  1540  stp x18, lr, [jssp, #16]
0xffff7ab0ba28  1544  stp x10, x11, [jssp, #-32]!
0xffff7ab0ba2c  1548  stp x12, x13, [jssp, #16]
0xffff7ab0ba30  1552  stp x6, x7, [jssp, #-32]!
0xffff7ab0ba34  1556  stp x8, x9, [jssp, #16]
0xffff7ab0ba38  1560  stp x1, x4, [jssp, #-24]!
0xffff7ab0ba3c  1564  str x5, [jssp, #16]
0xffff7ab0ba40  1568  sub csp, jssp, #0xb0 (176)
0xffff7ab0ba44  1572  stp d26, d27, [jssp, #-32]!
0xffff7ab0ba48  1576  stp d28, d29, [jssp, #16]
0xffff7ab0ba4c  1580  stp d22, d23, [jssp, #-32]!
0xffff7ab0ba50  1584  stp d24, d25, [jssp, #16]
0xffff7ab0ba54  1588  stp d18, d19, [jssp, #-32]!
0xffff7ab0ba58  1592  stp d20, d21, [jssp, #16]
0xffff7ab0ba5c  1596  stp d6, d7, [jssp, #-32]!
0xffff7ab0ba60  1600  stp d16, d17, [jssp, #16]
0xffff7ab0ba64  1604  stp d2, d3, [jssp, #-32]!
0xffff7ab0ba68  1608  stp d4, d5, [jssp, #16]
0xffff7ab0ba6c  1612  stp d0, d1, [jssp, #-16]!
0xffff7ab0ba70  1616  mov x0, x4
0xffff7ab0ba74  1620  ldr x2, pc+268 (addr 0x0000ffff7ab0bb80)    ;; external reference (isolate)
0xffff7ab0ba78  1624  ldr x16, pc+272 (addr 0x0000ffff7ab0bb88)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0ba7c  1628  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0ba80  1632  blr x16
0xffff7ab0ba84  1636  ldp d2, d3, [jssp, #16]
0xffff7ab0ba88  1640  ldp d0, d1, [jssp], #32
0xffff7ab0ba8c  1644  ldp d6, d7, [jssp, #16]
0xffff7ab0ba90  1648  ldp d4, d5, [jssp], #32
0xffff7ab0ba94  1652  ldp d18, d19, [jssp, #16]
0xffff7ab0ba98  1656  ldp d16, d17, [jssp], #32
0xffff7ab0ba9c  1660  ldp d22, d23, [jssp, #16]
0xffff7ab0baa0  1664  ldp d20, d21, [jssp], #32
0xffff7ab0baa4  1668  ldp d26, d27, [jssp, #16]
0xffff7ab0baa8  1672  ldp d24, d25, [jssp], #32
0xffff7ab0baac  1676  ldp d28, d29, [jssp], #16
0xffff7ab0bab0  1680  ldp x5, x6, [jssp, #16]
0xffff7ab0bab4  1684  ldp x1, x4, [jssp], #32
0xffff7ab0bab8  1688  ldp x9, x10, [jssp, #16]
0xffff7ab0babc  1692  ldp x7, x8, [jssp], #32
0xffff7ab0bac0  1696  ldp x13, x14, [jssp, #16]
0xffff7ab0bac4  1700  ldp x11, x12, [jssp], #32
0xffff7ab0bac8  1704  ldr lr, [jssp, #16]
0xffff7ab0bacc  1708  ldp x15, x18, [jssp], #24
0xffff7ab0bad0  1712  ldp x3, x2, [jssp], #16
0xffff7ab0bad4  1716  ret
0xffff7ab0bad8  1720  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab0badc  1724  d63f03e0       constant
0xffff7ab0bae0  1728  09abe8c0       constant
0xffff7ab0bae4  1732  00000000       constant
0xffff7ab0bae8  1736  7ab065a0       constant
0xffff7ab0baec  1740  0000ffff       constant
0xffff7ab0baf0  1744  09abe8c0       constant
0xffff7ab0baf4  1748  00000000       constant
0xffff7ab0baf8  1752  7ab065a0       constant
0xffff7ab0bafc  1756  0000ffff       constant
0xffff7ab0bb00  1760  09abe8c0       constant
0xffff7ab0bb04  1764  00000000       constant
0xffff7ab0bb08  1768  7ab065a0       constant
0xffff7ab0bb0c  1772  0000ffff       constant
0xffff7ab0bb10  1776  09abd2d0       constant
0xffff7ab0bb14  1780  00000000       constant
0xffff7ab0bb18  1784  00c2d958       constant
0xffff7ab0bb1c  1788  00000000       constant
0xffff7ab0bb20  1792  09abe8c0       constant
0xffff7ab0bb24  1796  00000000       constant
0xffff7ab0bb28  1800  7ab065a0       constant
0xffff7ab0bb2c  1804  0000ffff       constant
0xffff7ab0bb30  1808  09abd2d0       constant
0xffff7ab0bb34  1812  00000000       constant
0xffff7ab0bb38  1816  00c2d958       constant
0xffff7ab0bb3c  1820  00000000       constant
0xffff7ab0bb40  1824  09abe8c0       constant
0xffff7ab0bb44  1828  00000000       constant
0xffff7ab0bb48  1832  7ab065a0       constant
0xffff7ab0bb4c  1836  0000ffff       constant
0xffff7ab0bb50  1840  09abe8c0       constant
0xffff7ab0bb54  1844  00000000       constant
0xffff7ab0bb58  1848  7ab065a0       constant
0xffff7ab0bb5c  1852  0000ffff       constant
0xffff7ab0bb60  1856  09abd2d0       constant
0xffff7ab0bb64  1860  00000000       constant
0xffff7ab0bb68  1864  00c2d958       constant
0xffff7ab0bb6c  1868  00000000       constant
0xffff7ab0bb70  1872  09abe8c0       constant
0xffff7ab0bb74  1876  00000000       constant
0xffff7ab0bb78  1880  7ab065a0       constant
0xffff7ab0bb7c  1884  0000ffff       constant
0xffff7ab0bb80  1888  09abd2d0       constant
0xffff7ab0bb84  1892  00000000       constant
0xffff7ab0bb88  1896  00c2d958       constant
0xffff7ab0bb8c  1900  00000000       constant


RelocInfo (size = 65)
0xffff7ab0b428  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0b44c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0b4c4  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0b4e8  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0b528  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0b54c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0b5b8  external reference (isolate)  (0x9abd2d0)
0xffff7ab0b5bc  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0b618  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0b63c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0b718  external reference (isolate)  (0x9abd2d0)
0xffff7ab0b71c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0b7e0  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0b804  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0b864  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0b888  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0b8f4  external reference (isolate)  (0x9abd2d0)
0xffff7ab0b8f8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0b954  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0b978  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0ba74  external reference (isolate)  (0x9abd2d0)
0xffff7ab0ba78  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0bad8  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0xffff7ab0bc00     0  adr xzr, #+0x40 (addr 0xffff7ab0bc40)
0xffff7ab0bc04     4  adr xzr, #+0x360 (addr 0xffff7ab0bf64)
0xffff7ab0bc08     8  ldr x16, pc+1736 (addr 0x0000ffff7ab0c2d0)    ;; external reference (store_buffer_top)
0xffff7ab0bc0c    12  ldr x1, [x16]
0xffff7ab0bc10    16  str x5, [x1], #8
0xffff7ab0bc14    20  str x1, [x16]
0xffff7ab0bc18    24  tst x1, #0x1ffff
0xffff7ab0bc1c    28  b.eq #+0x8 (addr 0xffff7ab0bc24)
0xffff7ab0bc20    32  ret
0xffff7ab0bc24    36  sub csp, jssp, #0x8 (8)
0xffff7ab0bc28    40  str lr, [jssp, #-8]!
0xffff7ab0bc2c    44  ldr x17, pc+1708 (addr 0x0000ffff7ab0c2d8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0bc30    48  blr x17
0xffff7ab0bc34    52  ldr lr, [jssp], #8
0xffff7ab0bc38    56  ret
0xffff7ab0bc3c    60  ret
0xffff7ab0bc40    64  sub csp, jssp, #0x10 (16)
0xffff7ab0bc44    68  stp x2, x0, [jssp, #-16]!
0xffff7ab0bc48    72  ldr x1, [x5]
0xffff7ab0bc4c    76  and x16, x1, #0xfffffffffff00000
0xffff7ab0bc50    80  ldr x16, [x16, #8]
0xffff7ab0bc54    84  tst x16, #0x18
0xffff7ab0bc58    88  b.eq #+0x1d8 (addr 0xffff7ab0be30)
0xffff7ab0bc5c    92  and x16, x4, #0xfffffffffff00000
0xffff7ab0bc60    96  ldr x16, [x16, #8]
0xffff7ab0bc64   100  tst x16, #0x18
0xffff7ab0bc68   104  b.ne #+0x1c8 (addr 0xffff7ab0be30)
0xffff7ab0bc6c   108  and x1, x4, #0xfffffffffff00000
0xffff7ab0bc70   112  ldr x0, [x1, #104]
0xffff7ab0bc74   116  subs x0, x0, #0x1 (1)
0xffff7ab0bc78   120  str x0, [x1, #104]
0xffff7ab0bc7c   124  b.mi #+0xc4 (addr 0xffff7ab0bd40)
0xffff7ab0bc80   128  ubfx x16, x4, #8, #12
0xffff7ab0bc84   132  and x1, x4, #0xfffffffffff00000
0xffff7ab0bc88   136  add x1, x1, x16, lsl #2
0xffff7ab0bc8c   140  ubfx x0, x4, #3, #5
0xffff7ab0bc90   144  ldr x1, [x1, #360]
0xffff7ab0bc94   148  lsr x1, x1, x0
0xffff7ab0bc98   152  tbz w1, #0, #+0x8 (addr 0xffff7ab0bca0)
0xffff7ab0bc9c   156  tbnz w1, #1, #+0x3c (addr 0xffff7ab0bcd8)
0xffff7ab0bca0   160  ldp x2, x0, [jssp], #16
0xffff7ab0bca4   164  ldr x16, pc+1596 (addr 0x0000ffff7ab0c2e0)    ;; external reference (store_buffer_top)
0xffff7ab0bca8   168  ldr x1, [x16]
0xffff7ab0bcac   172  str x5, [x1], #8
0xffff7ab0bcb0   176  str x1, [x16]
0xffff7ab0bcb4   180  tst x1, #0x1ffff
0xffff7ab0bcb8   184  b.eq #+0x8 (addr 0xffff7ab0bcc0)
0xffff7ab0bcbc   188  ret
0xffff7ab0bcc0   192  sub csp, jssp, #0x8 (8)
0xffff7ab0bcc4   196  str lr, [jssp, #-8]!
0xffff7ab0bcc8   200  ldr x17, pc+1568 (addr 0x0000ffff7ab0c2e8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0bccc   204  blr x17
0xffff7ab0bcd0   208  ldr lr, [jssp], #8
0xffff7ab0bcd4   212  ret
0xffff7ab0bcd8   216  ldr x1, [x5]
0xffff7ab0bcdc   220  sub csp, jssp, #0x10 (16)
0xffff7ab0bce0   224  stp x4, x5, [jssp, #-16]!
0xffff7ab0bce4   228  ubfx x16, x1, #8, #12
0xffff7ab0bce8   232  and x0, x1, #0xfffffffffff00000
0xffff7ab0bcec   236  add x0, x0, x16, lsl #2
0xffff7ab0bcf0   240  ubfx x4, x1, #3, #5
0xffff7ab0bcf4   244  ldr x5, [x0, #360]
0xffff7ab0bcf8   248  lsr x5, x5, x4
0xffff7ab0bcfc   252  tbz w5, #0, #+0x40 (addr 0xffff7ab0bd3c)
0xffff7ab0bd00   256  ldp x4, x5, [jssp], #16
0xffff7ab0bd04   260  ldp x2, x0, [jssp], #16
0xffff7ab0bd08   264  ldr x16, pc+1512 (addr 0x0000ffff7ab0c2f0)    ;; external reference (store_buffer_top)
0xffff7ab0bd0c   268  ldr x1, [x16]
0xffff7ab0bd10   272  str x5, [x1], #8
0xffff7ab0bd14   276  str x1, [x16]
0xffff7ab0bd18   280  tst x1, #0x1ffff
0xffff7ab0bd1c   284  b.eq #+0x8 (addr 0xffff7ab0bd24)
0xffff7ab0bd20   288  ret
0xffff7ab0bd24   292  sub csp, jssp, #0x8 (8)
0xffff7ab0bd28   296  str lr, [jssp, #-8]!
0xffff7ab0bd2c   300  ldr x17, pc+1484 (addr 0x0000ffff7ab0c2f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0bd30   304  blr x17
0xffff7ab0bd34   308  ldr lr, [jssp], #8
0xffff7ab0bd38   312  ret
0xffff7ab0bd3c   316  ldp x4, x5, [jssp], #16
0xffff7ab0bd40   320  sub csp, jssp, #0x78 (120)
0xffff7ab0bd44   324  stp x14, x15, [jssp, #-32]!
0xffff7ab0bd48   328  stp x18, lr, [jssp, #16]
0xffff7ab0bd4c   332  stp x10, x11, [jssp, #-32]!
0xffff7ab0bd50   336  stp x12, x13, [jssp, #16]
0xffff7ab0bd54   340  stp x6, x7, [jssp, #-32]!
0xffff7ab0bd58   344  stp x8, x9, [jssp, #16]
0xffff7ab0bd5c   348  stp x3, x4, [jssp, #-24]!
0xffff7ab0bd60   352  str x5, [jssp, #16]
0xffff7ab0bd64   356  sub csp, jssp, #0xb0 (176)
0xffff7ab0bd68   360  stp d26, d27, [jssp, #-32]!
0xffff7ab0bd6c   364  stp d28, d29, [jssp, #16]
0xffff7ab0bd70   368  stp d22, d23, [jssp, #-32]!
0xffff7ab0bd74   372  stp d24, d25, [jssp, #16]
0xffff7ab0bd78   376  stp d18, d19, [jssp, #-32]!
0xffff7ab0bd7c   380  stp d20, d21, [jssp, #16]
0xffff7ab0bd80   384  stp d6, d7, [jssp, #-32]!
0xffff7ab0bd84   388  stp d16, d17, [jssp, #16]
0xffff7ab0bd88   392  stp d2, d3, [jssp, #-32]!
0xffff7ab0bd8c   396  stp d4, d5, [jssp, #16]
0xffff7ab0bd90   400  stp d0, d1, [jssp, #-16]!
0xffff7ab0bd94   404  mov x0, x4
0xffff7ab0bd98   408  mov x1, x5
0xffff7ab0bd9c   412  ldr x2, pc+1380 (addr 0x0000ffff7ab0c300)    ;; external reference (isolate)
0xffff7ab0bda0   416  ldr x16, pc+1384 (addr 0x0000ffff7ab0c308)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0bda4   420  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0bda8   424  blr x16
0xffff7ab0bdac   428  ldp d2, d3, [jssp, #16]
0xffff7ab0bdb0   432  ldp d0, d1, [jssp], #32
0xffff7ab0bdb4   436  ldp d6, d7, [jssp, #16]
0xffff7ab0bdb8   440  ldp d4, d5, [jssp], #32
0xffff7ab0bdbc   444  ldp d18, d19, [jssp, #16]
0xffff7ab0bdc0   448  ldp d16, d17, [jssp], #32
0xffff7ab0bdc4   452  ldp d22, d23, [jssp, #16]
0xffff7ab0bdc8   456  ldp d20, d21, [jssp], #32
0xffff7ab0bdcc   460  ldp d26, d27, [jssp, #16]
0xffff7ab0bdd0   464  ldp d24, d25, [jssp], #32
0xffff7ab0bdd4   468  ldp d28, d29, [jssp], #16
0xffff7ab0bdd8   472  ldp x5, x6, [jssp, #16]
0xffff7ab0bddc   476  ldp x3, x4, [jssp], #32
0xffff7ab0bde0   480  ldp x9, x10, [jssp, #16]
0xffff7ab0bde4   484  ldp x7, x8, [jssp], #32
0xffff7ab0bde8   488  ldp x13, x14, [jssp, #16]
0xffff7ab0bdec   492  ldp x11, x12, [jssp], #32
0xffff7ab0bdf0   496  ldr lr, [jssp, #16]
0xffff7ab0bdf4   500  ldp x15, x18, [jssp], #24
0xffff7ab0bdf8   504  ldp x2, x0, [jssp], #16
0xffff7ab0bdfc   508  ldr x16, pc+1300 (addr 0x0000ffff7ab0c310)    ;; external reference (store_buffer_top)
0xffff7ab0be00   512  ldr x1, [x16]
0xffff7ab0be04   516  str x5, [x1], #8
0xffff7ab0be08   520  str x1, [x16]
0xffff7ab0be0c   524  tst x1, #0x1ffff
0xffff7ab0be10   528  b.eq #+0x8 (addr 0xffff7ab0be18)
0xffff7ab0be14   532  ret
0xffff7ab0be18   536  sub csp, jssp, #0x8 (8)
0xffff7ab0be1c   540  str lr, [jssp, #-8]!
0xffff7ab0be20   544  ldr x17, pc+1272 (addr 0x0000ffff7ab0c318)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0be24   548  blr x17
0xffff7ab0be28   552  ldr lr, [jssp], #8
0xffff7ab0be2c   556  ret
0xffff7ab0be30   560  and x1, x4, #0xfffffffffff00000
0xffff7ab0be34   564  ldr x0, [x1, #104]
0xffff7ab0be38   568  subs x0, x0, #0x1 (1)
0xffff7ab0be3c   572  str x0, [x1, #104]
0xffff7ab0be40   576  b.mi #+0x64 (addr 0xffff7ab0bea4)
0xffff7ab0be44   580  ubfx x16, x4, #8, #12
0xffff7ab0be48   584  and x1, x4, #0xfffffffffff00000
0xffff7ab0be4c   588  add x1, x1, x16, lsl #2
0xffff7ab0be50   592  ubfx x0, x4, #3, #5
0xffff7ab0be54   596  ldr x1, [x1, #360]
0xffff7ab0be58   600  lsr x1, x1, x0
0xffff7ab0be5c   604  tbz w1, #0, #+0x8 (addr 0xffff7ab0be64)
0xffff7ab0be60   608  tbnz w1, #1, #+0xc (addr 0xffff7ab0be6c)
0xffff7ab0be64   612  ldp x2, x0, [jssp], #16
0xffff7ab0be68   616  ret
0xffff7ab0be6c   620  ldr x1, [x5]
0xffff7ab0be70   624  sub csp, jssp, #0x10 (16)
0xffff7ab0be74   628  stp x4, x5, [jssp, #-16]!
0xffff7ab0be78   632  ubfx x16, x1, #8, #12
0xffff7ab0be7c   636  and x0, x1, #0xfffffffffff00000
0xffff7ab0be80   640  add x0, x0, x16, lsl #2
0xffff7ab0be84   644  ubfx x4, x1, #3, #5
0xffff7ab0be88   648  ldr x5, [x0, #360]
0xffff7ab0be8c   652  lsr x5, x5, x4
0xffff7ab0be90   656  tbz w5, #0, #+0x10 (addr 0xffff7ab0bea0)
0xffff7ab0be94   660  ldp x4, x5, [jssp], #16
0xffff7ab0be98   664  ldp x2, x0, [jssp], #16
0xffff7ab0be9c   668  ret
0xffff7ab0bea0   672  ldp x4, x5, [jssp], #16
0xffff7ab0bea4   676  sub csp, jssp, #0x78 (120)
0xffff7ab0bea8   680  stp x14, x15, [jssp, #-32]!
0xffff7ab0beac   684  stp x18, lr, [jssp, #16]
0xffff7ab0beb0   688  stp x10, x11, [jssp, #-32]!
0xffff7ab0beb4   692  stp x12, x13, [jssp, #16]
0xffff7ab0beb8   696  stp x6, x7, [jssp, #-32]!
0xffff7ab0bebc   700  stp x8, x9, [jssp, #16]
0xffff7ab0bec0   704  stp x3, x4, [jssp, #-24]!
0xffff7ab0bec4   708  str x5, [jssp, #16]
0xffff7ab0bec8   712  sub csp, jssp, #0xb0 (176)
0xffff7ab0becc   716  stp d26, d27, [jssp, #-32]!
0xffff7ab0bed0   720  stp d28, d29, [jssp, #16]
0xffff7ab0bed4   724  stp d22, d23, [jssp, #-32]!
0xffff7ab0bed8   728  stp d24, d25, [jssp, #16]
0xffff7ab0bedc   732  stp d18, d19, [jssp, #-32]!
0xffff7ab0bee0   736  stp d20, d21, [jssp, #16]
0xffff7ab0bee4   740  stp d6, d7, [jssp, #-32]!
0xffff7ab0bee8   744  stp d16, d17, [jssp, #16]
0xffff7ab0beec   748  stp d2, d3, [jssp, #-32]!
0xffff7ab0bef0   752  stp d4, d5, [jssp, #16]
0xffff7ab0bef4   756  stp d0, d1, [jssp, #-16]!
0xffff7ab0bef8   760  mov x0, x4
0xffff7ab0befc   764  mov x1, x5
0xffff7ab0bf00   768  ldr x2, pc+1056 (addr 0x0000ffff7ab0c320)    ;; external reference (isolate)
0xffff7ab0bf04   772  ldr x16, pc+1060 (addr 0x0000ffff7ab0c328)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0bf08   776  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0bf0c   780  blr x16
0xffff7ab0bf10   784  ldp d2, d3, [jssp, #16]
0xffff7ab0bf14   788  ldp d0, d1, [jssp], #32
0xffff7ab0bf18   792  ldp d6, d7, [jssp, #16]
0xffff7ab0bf1c   796  ldp d4, d5, [jssp], #32
0xffff7ab0bf20   800  ldp d18, d19, [jssp, #16]
0xffff7ab0bf24   804  ldp d16, d17, [jssp], #32
0xffff7ab0bf28   808  ldp d22, d23, [jssp, #16]
0xffff7ab0bf2c   812  ldp d20, d21, [jssp], #32
0xffff7ab0bf30   816  ldp d26, d27, [jssp, #16]
0xffff7ab0bf34   820  ldp d24, d25, [jssp], #32
0xffff7ab0bf38   824  ldp d28, d29, [jssp], #16
0xffff7ab0bf3c   828  ldp x5, x6, [jssp, #16]
0xffff7ab0bf40   832  ldp x3, x4, [jssp], #32
0xffff7ab0bf44   836  ldp x9, x10, [jssp, #16]
0xffff7ab0bf48   840  ldp x7, x8, [jssp], #32
0xffff7ab0bf4c   844  ldp x13, x14, [jssp, #16]
0xffff7ab0bf50   848  ldp x11, x12, [jssp], #32
0xffff7ab0bf54   852  ldr lr, [jssp, #16]
0xffff7ab0bf58   856  ldp x15, x18, [jssp], #24
0xffff7ab0bf5c   860  ldp x2, x0, [jssp], #16
0xffff7ab0bf60   864  ret
0xffff7ab0bf64   868  sub csp, jssp, #0x10 (16)
0xffff7ab0bf68   872  stp x2, x0, [jssp, #-16]!
0xffff7ab0bf6c   876  ldr x1, [x5]
0xffff7ab0bf70   880  and x16, x1, #0xfffffffffff00000
0xffff7ab0bf74   884  ldr x16, [x16, #8]
0xffff7ab0bf78   888  tst x16, #0x18
0xffff7ab0bf7c   892  b.eq #+0x1f8 (addr 0xffff7ab0c174)
0xffff7ab0bf80   896  and x16, x4, #0xfffffffffff00000
0xffff7ab0bf84   900  ldr x16, [x16, #8]
0xffff7ab0bf88   904  tst x16, #0x18
0xffff7ab0bf8c   908  b.ne #+0x1e8 (addr 0xffff7ab0c174)
0xffff7ab0bf90   912  and x1, x4, #0xfffffffffff00000
0xffff7ab0bf94   916  ldr x0, [x1, #104]
0xffff7ab0bf98   920  subs x0, x0, #0x1 (1)
0xffff7ab0bf9c   924  str x0, [x1, #104]
0xffff7ab0bfa0   928  b.mi #+0xe4 (addr 0xffff7ab0c084)
0xffff7ab0bfa4   932  ubfx x16, x4, #8, #12
0xffff7ab0bfa8   936  and x1, x4, #0xfffffffffff00000
0xffff7ab0bfac   940  add x1, x1, x16, lsl #2
0xffff7ab0bfb0   944  ubfx x0, x4, #3, #5
0xffff7ab0bfb4   948  ldr x1, [x1, #360]
0xffff7ab0bfb8   952  lsr x1, x1, x0
0xffff7ab0bfbc   956  tbz w1, #0, #+0x8 (addr 0xffff7ab0bfc4)
0xffff7ab0bfc0   960  tbnz w1, #1, #+0x3c (addr 0xffff7ab0bffc)
0xffff7ab0bfc4   964  ldp x2, x0, [jssp], #16
0xffff7ab0bfc8   968  ldr x16, pc+872 (addr 0x0000ffff7ab0c330)    ;; external reference (store_buffer_top)
0xffff7ab0bfcc   972  ldr x1, [x16]
0xffff7ab0bfd0   976  str x5, [x1], #8
0xffff7ab0bfd4   980  str x1, [x16]
0xffff7ab0bfd8   984  tst x1, #0x1ffff
0xffff7ab0bfdc   988  b.eq #+0x8 (addr 0xffff7ab0bfe4)
0xffff7ab0bfe0   992  ret
0xffff7ab0bfe4   996  sub csp, jssp, #0x8 (8)
0xffff7ab0bfe8  1000  str lr, [jssp, #-8]!
0xffff7ab0bfec  1004  ldr x17, pc+844 (addr 0x0000ffff7ab0c338)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0bff0  1008  blr x17
0xffff7ab0bff4  1012  ldr lr, [jssp], #8
0xffff7ab0bff8  1016  ret
0xffff7ab0bffc  1020  ldr x1, [x5]
0xffff7ab0c000  1024  and x0, x1, #0xfffffffffff00000
0xffff7ab0c004  1028  ldr x0, [x0, #8]
0xffff7ab0c008  1032  tbz w0, #6, #+0x18 (addr 0xffff7ab0c020)
0xffff7ab0c00c  1036  and x0, x4, #0xfffffffffff00000
0xffff7ab0c010  1040  ldr x0, [x0, #8]
0xffff7ab0c014  1044  movz x16, #0x58
0xffff7ab0c018  1048  tst x0, x16
0xffff7ab0c01c  1052  b.eq #+0x68 (addr 0xffff7ab0c084)
0xffff7ab0c020  1056  sub csp, jssp, #0x10 (16)
0xffff7ab0c024  1060  stp x4, x5, [jssp, #-16]!
0xffff7ab0c028  1064  ubfx x16, x1, #8, #12
0xffff7ab0c02c  1068  and x0, x1, #0xfffffffffff00000
0xffff7ab0c030  1072  add x0, x0, x16, lsl #2
0xffff7ab0c034  1076  ubfx x4, x1, #3, #5
0xffff7ab0c038  1080  ldr x5, [x0, #360]
0xffff7ab0c03c  1084  lsr x5, x5, x4
0xffff7ab0c040  1088  tbz w5, #0, #+0x40 (addr 0xffff7ab0c080)
0xffff7ab0c044  1092  ldp x4, x5, [jssp], #16
0xffff7ab0c048  1096  ldp x2, x0, [jssp], #16
0xffff7ab0c04c  1100  ldr x16, pc+756 (addr 0x0000ffff7ab0c340)    ;; external reference (store_buffer_top)
0xffff7ab0c050  1104  ldr x1, [x16]
0xffff7ab0c054  1108  str x5, [x1], #8
0xffff7ab0c058  1112  str x1, [x16]
0xffff7ab0c05c  1116  tst x1, #0x1ffff
0xffff7ab0c060  1120  b.eq #+0x8 (addr 0xffff7ab0c068)
0xffff7ab0c064  1124  ret
0xffff7ab0c068  1128  sub csp, jssp, #0x8 (8)
0xffff7ab0c06c  1132  str lr, [jssp, #-8]!
0xffff7ab0c070  1136  ldr x17, pc+728 (addr 0x0000ffff7ab0c348)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0c074  1140  blr x17
0xffff7ab0c078  1144  ldr lr, [jssp], #8
0xffff7ab0c07c  1148  ret
0xffff7ab0c080  1152  ldp x4, x5, [jssp], #16
0xffff7ab0c084  1156  sub csp, jssp, #0x78 (120)
0xffff7ab0c088  1160  stp x14, x15, [jssp, #-32]!
0xffff7ab0c08c  1164  stp x18, lr, [jssp, #16]
0xffff7ab0c090  1168  stp x10, x11, [jssp, #-32]!
0xffff7ab0c094  1172  stp x12, x13, [jssp, #16]
0xffff7ab0c098  1176  stp x6, x7, [jssp, #-32]!
0xffff7ab0c09c  1180  stp x8, x9, [jssp, #16]
0xffff7ab0c0a0  1184  stp x3, x4, [jssp, #-24]!
0xffff7ab0c0a4  1188  str x5, [jssp, #16]
0xffff7ab0c0a8  1192  sub csp, jssp, #0xb0 (176)
0xffff7ab0c0ac  1196  stp d26, d27, [jssp, #-32]!
0xffff7ab0c0b0  1200  stp d28, d29, [jssp, #16]
0xffff7ab0c0b4  1204  stp d22, d23, [jssp, #-32]!
0xffff7ab0c0b8  1208  stp d24, d25, [jssp, #16]
0xffff7ab0c0bc  1212  stp d18, d19, [jssp, #-32]!
0xffff7ab0c0c0  1216  stp d20, d21, [jssp, #16]
0xffff7ab0c0c4  1220  stp d6, d7, [jssp, #-32]!
0xffff7ab0c0c8  1224  stp d16, d17, [jssp, #16]
0xffff7ab0c0cc  1228  stp d2, d3, [jssp, #-32]!
0xffff7ab0c0d0  1232  stp d4, d5, [jssp, #16]
0xffff7ab0c0d4  1236  stp d0, d1, [jssp, #-16]!
0xffff7ab0c0d8  1240  mov x0, x4
0xffff7ab0c0dc  1244  mov x1, x5
0xffff7ab0c0e0  1248  ldr x2, pc+624 (addr 0x0000ffff7ab0c350)    ;; external reference (isolate)
0xffff7ab0c0e4  1252  ldr x16, pc+628 (addr 0x0000ffff7ab0c358)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0c0e8  1256  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0c0ec  1260  blr x16
0xffff7ab0c0f0  1264  ldp d2, d3, [jssp, #16]
0xffff7ab0c0f4  1268  ldp d0, d1, [jssp], #32
0xffff7ab0c0f8  1272  ldp d6, d7, [jssp, #16]
0xffff7ab0c0fc  1276  ldp d4, d5, [jssp], #32
0xffff7ab0c100  1280  ldp d18, d19, [jssp, #16]
0xffff7ab0c104  1284  ldp d16, d17, [jssp], #32
0xffff7ab0c108  1288  ldp d22, d23, [jssp, #16]
0xffff7ab0c10c  1292  ldp d20, d21, [jssp], #32
0xffff7ab0c110  1296  ldp d26, d27, [jssp, #16]
0xffff7ab0c114  1300  ldp d24, d25, [jssp], #32
0xffff7ab0c118  1304  ldp d28, d29, [jssp], #16
0xffff7ab0c11c  1308  ldp x5, x6, [jssp, #16]
0xffff7ab0c120  1312  ldp x3, x4, [jssp], #32
0xffff7ab0c124  1316  ldp x9, x10, [jssp, #16]
0xffff7ab0c128  1320  ldp x7, x8, [jssp], #32
0xffff7ab0c12c  1324  ldp x13, x14, [jssp, #16]
0xffff7ab0c130  1328  ldp x11, x12, [jssp], #32
0xffff7ab0c134  1332  ldr lr, [jssp, #16]
0xffff7ab0c138  1336  ldp x15, x18, [jssp], #24
0xffff7ab0c13c  1340  ldp x2, x0, [jssp], #16
0xffff7ab0c140  1344  ldr x16, pc+544 (addr 0x0000ffff7ab0c360)    ;; external reference (store_buffer_top)
0xffff7ab0c144  1348  ldr x1, [x16]
0xffff7ab0c148  1352  str x5, [x1], #8
0xffff7ab0c14c  1356  str x1, [x16]
0xffff7ab0c150  1360  tst x1, #0x1ffff
0xffff7ab0c154  1364  b.eq #+0x8 (addr 0xffff7ab0c15c)
0xffff7ab0c158  1368  ret
0xffff7ab0c15c  1372  sub csp, jssp, #0x8 (8)
0xffff7ab0c160  1376  str lr, [jssp, #-8]!
0xffff7ab0c164  1380  ldr x17, pc+516 (addr 0x0000ffff7ab0c368)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0c168  1384  blr x17
0xffff7ab0c16c  1388  ldr lr, [jssp], #8
0xffff7ab0c170  1392  ret
0xffff7ab0c174  1396  and x1, x4, #0xfffffffffff00000
0xffff7ab0c178  1400  ldr x0, [x1, #104]
0xffff7ab0c17c  1404  subs x0, x0, #0x1 (1)
0xffff7ab0c180  1408  str x0, [x1, #104]
0xffff7ab0c184  1412  b.mi #+0x84 (addr 0xffff7ab0c208)
0xffff7ab0c188  1416  ubfx x16, x4, #8, #12
0xffff7ab0c18c  1420  and x1, x4, #0xfffffffffff00000
0xffff7ab0c190  1424  add x1, x1, x16, lsl #2
0xffff7ab0c194  1428  ubfx x0, x4, #3, #5
0xffff7ab0c198  1432  ldr x1, [x1, #360]
0xffff7ab0c19c  1436  lsr x1, x1, x0
0xffff7ab0c1a0  1440  tbz w1, #0, #+0x8 (addr 0xffff7ab0c1a8)
0xffff7ab0c1a4  1444  tbnz w1, #1, #+0xc (addr 0xffff7ab0c1b0)
0xffff7ab0c1a8  1448  ldp x2, x0, [jssp], #16
0xffff7ab0c1ac  1452  ret
0xffff7ab0c1b0  1456  ldr x1, [x5]
0xffff7ab0c1b4  1460  and x0, x1, #0xfffffffffff00000
0xffff7ab0c1b8  1464  ldr x0, [x0, #8]
0xffff7ab0c1bc  1468  tbz w0, #6, #+0x18 (addr 0xffff7ab0c1d4)
0xffff7ab0c1c0  1472  and x0, x4, #0xfffffffffff00000
0xffff7ab0c1c4  1476  ldr x0, [x0, #8]
0xffff7ab0c1c8  1480  movz x16, #0x58
0xffff7ab0c1cc  1484  tst x0, x16
0xffff7ab0c1d0  1488  b.eq #+0x38 (addr 0xffff7ab0c208)
0xffff7ab0c1d4  1492  sub csp, jssp, #0x10 (16)
0xffff7ab0c1d8  1496  stp x4, x5, [jssp, #-16]!
0xffff7ab0c1dc  1500  ubfx x16, x1, #8, #12
0xffff7ab0c1e0  1504  and x0, x1, #0xfffffffffff00000
0xffff7ab0c1e4  1508  add x0, x0, x16, lsl #2
0xffff7ab0c1e8  1512  ubfx x4, x1, #3, #5
0xffff7ab0c1ec  1516  ldr x5, [x0, #360]
0xffff7ab0c1f0  1520  lsr x5, x5, x4
0xffff7ab0c1f4  1524  tbz w5, #0, #+0x10 (addr 0xffff7ab0c204)
0xffff7ab0c1f8  1528  ldp x4, x5, [jssp], #16
0xffff7ab0c1fc  1532  ldp x2, x0, [jssp], #16
0xffff7ab0c200  1536  ret
0xffff7ab0c204  1540  ldp x4, x5, [jssp], #16
0xffff7ab0c208  1544  sub csp, jssp, #0x78 (120)
0xffff7ab0c20c  1548  stp x14, x15, [jssp, #-32]!
0xffff7ab0c210  1552  stp x18, lr, [jssp, #16]
0xffff7ab0c214  1556  stp x10, x11, [jssp, #-32]!
0xffff7ab0c218  1560  stp x12, x13, [jssp, #16]
0xffff7ab0c21c  1564  stp x6, x7, [jssp, #-32]!
0xffff7ab0c220  1568  stp x8, x9, [jssp, #16]
0xffff7ab0c224  1572  stp x3, x4, [jssp, #-24]!
0xffff7ab0c228  1576  str x5, [jssp, #16]
0xffff7ab0c22c  1580  sub csp, jssp, #0xb0 (176)
0xffff7ab0c230  1584  stp d26, d27, [jssp, #-32]!
0xffff7ab0c234  1588  stp d28, d29, [jssp, #16]
0xffff7ab0c238  1592  stp d22, d23, [jssp, #-32]!
0xffff7ab0c23c  1596  stp d24, d25, [jssp, #16]
0xffff7ab0c240  1600  stp d18, d19, [jssp, #-32]!
0xffff7ab0c244  1604  stp d20, d21, [jssp, #16]
0xffff7ab0c248  1608  stp d6, d7, [jssp, #-32]!
0xffff7ab0c24c  1612  stp d16, d17, [jssp, #16]
0xffff7ab0c250  1616  stp d2, d3, [jssp, #-32]!
0xffff7ab0c254  1620  stp d4, d5, [jssp, #16]
0xffff7ab0c258  1624  stp d0, d1, [jssp, #-16]!
0xffff7ab0c25c  1628  mov x0, x4
0xffff7ab0c260  1632  mov x1, x5
0xffff7ab0c264  1636  ldr x2, pc+268 (addr 0x0000ffff7ab0c370)    ;; external reference (isolate)
0xffff7ab0c268  1640  ldr x16, pc+272 (addr 0x0000ffff7ab0c378)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0c26c  1644  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0c270  1648  blr x16
0xffff7ab0c274  1652  ldp d2, d3, [jssp, #16]
0xffff7ab0c278  1656  ldp d0, d1, [jssp], #32
0xffff7ab0c27c  1660  ldp d6, d7, [jssp, #16]
0xffff7ab0c280  1664  ldp d4, d5, [jssp], #32
0xffff7ab0c284  1668  ldp d18, d19, [jssp, #16]
0xffff7ab0c288  1672  ldp d16, d17, [jssp], #32
0xffff7ab0c28c  1676  ldp d22, d23, [jssp, #16]
0xffff7ab0c290  1680  ldp d20, d21, [jssp], #32
0xffff7ab0c294  1684  ldp d26, d27, [jssp, #16]
0xffff7ab0c298  1688  ldp d24, d25, [jssp], #32
0xffff7ab0c29c  1692  ldp d28, d29, [jssp], #16
0xffff7ab0c2a0  1696  ldp x5, x6, [jssp, #16]
0xffff7ab0c2a4  1700  ldp x3, x4, [jssp], #32
0xffff7ab0c2a8  1704  ldp x9, x10, [jssp, #16]
0xffff7ab0c2ac  1708  ldp x7, x8, [jssp], #32
0xffff7ab0c2b0  1712  ldp x13, x14, [jssp, #16]
0xffff7ab0c2b4  1716  ldp x11, x12, [jssp], #32
0xffff7ab0c2b8  1720  ldr lr, [jssp, #16]
0xffff7ab0c2bc  1724  ldp x15, x18, [jssp], #24
0xffff7ab0c2c0  1728  ldp x2, x0, [jssp], #16
0xffff7ab0c2c4  1732  ret
0xffff7ab0c2c8  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab0c2cc  1740  d63f03e0       constant
0xffff7ab0c2d0  1744  09abe8c0       constant
0xffff7ab0c2d4  1748  00000000       constant
0xffff7ab0c2d8  1752  7ab065a0       constant
0xffff7ab0c2dc  1756  0000ffff       constant
0xffff7ab0c2e0  1760  09abe8c0       constant
0xffff7ab0c2e4  1764  00000000       constant
0xffff7ab0c2e8  1768  7ab065a0       constant
0xffff7ab0c2ec  1772  0000ffff       constant
0xffff7ab0c2f0  1776  09abe8c0       constant
0xffff7ab0c2f4  1780  00000000       constant
0xffff7ab0c2f8  1784  7ab065a0       constant
0xffff7ab0c2fc  1788  0000ffff       constant
0xffff7ab0c300  1792  09abd2d0       constant
0xffff7ab0c304  1796  00000000       constant
0xffff7ab0c308  1800  00c2d958       constant
0xffff7ab0c30c  1804  00000000       constant
0xffff7ab0c310  1808  09abe8c0       constant
0xffff7ab0c314  1812  00000000       constant
0xffff7ab0c318  1816  7ab065a0       constant
0xffff7ab0c31c  1820  0000ffff       constant
0xffff7ab0c320  1824  09abd2d0       constant
0xffff7ab0c324  1828  00000000       constant
0xffff7ab0c328  1832  00c2d958       constant
0xffff7ab0c32c  1836  00000000       constant
0xffff7ab0c330  1840  09abe8c0       constant
0xffff7ab0c334  1844  00000000       constant
0xffff7ab0c338  1848  7ab065a0       constant
0xffff7ab0c33c  1852  0000ffff       constant
0xffff7ab0c340  1856  09abe8c0       constant
0xffff7ab0c344  1860  00000000       constant
0xffff7ab0c348  1864  7ab065a0       constant
0xffff7ab0c34c  1868  0000ffff       constant
0xffff7ab0c350  1872  09abd2d0       constant
0xffff7ab0c354  1876  00000000       constant
0xffff7ab0c358  1880  00c2d958       constant
0xffff7ab0c35c  1884  00000000       constant
0xffff7ab0c360  1888  09abe8c0       constant
0xffff7ab0c364  1892  00000000       constant
0xffff7ab0c368  1896  7ab065a0       constant
0xffff7ab0c36c  1900  0000ffff       constant
0xffff7ab0c370  1904  09abd2d0       constant
0xffff7ab0c374  1908  00000000       constant
0xffff7ab0c378  1912  00c2d958       constant
0xffff7ab0c37c  1916  00000000       constant


RelocInfo (size = 65)
0xffff7ab0bc08  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0bc2c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0bca4  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0bcc8  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0bd08  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0bd2c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0bd9c  external reference (isolate)  (0x9abd2d0)
0xffff7ab0bda0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0bdfc  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0be20  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0bf00  external reference (isolate)  (0x9abd2d0)
0xffff7ab0bf04  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0bfc8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0bfec  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0c04c  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0c070  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0c0e0  external reference (isolate)  (0x9abd2d0)
0xffff7ab0c0e4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0c140  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0c164  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0c264  external reference (isolate)  (0x9abd2d0)
0xffff7ab0c268  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0c2c8  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0xffff7ab0c3e0     0  adr xzr, #+0x40 (addr 0xffff7ab0c420)
0xffff7ab0c3e4     4  adr xzr, #+0x360 (addr 0xffff7ab0c744)
0xffff7ab0c3e8     8  ldr x16, pc+1736 (addr 0x0000ffff7ab0cab0)    ;; external reference (store_buffer_top)
0xffff7ab0c3ec    12  ldr x4, [x16]
0xffff7ab0c3f0    16  str x3, [x4], #8
0xffff7ab0c3f4    20  str x4, [x16]
0xffff7ab0c3f8    24  tst x4, #0x1ffff
0xffff7ab0c3fc    28  b.eq #+0x8 (addr 0xffff7ab0c404)
0xffff7ab0c400    32  ret
0xffff7ab0c404    36  sub csp, jssp, #0x8 (8)
0xffff7ab0c408    40  str lr, [jssp, #-8]!
0xffff7ab0c40c    44  ldr x17, pc+1708 (addr 0x0000ffff7ab0cab8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0c410    48  blr x17
0xffff7ab0c414    52  ldr lr, [jssp], #8
0xffff7ab0c418    56  ret
0xffff7ab0c41c    60  ret
0xffff7ab0c420    64  sub csp, jssp, #0x10 (16)
0xffff7ab0c424    68  stp x2, x0, [jssp, #-16]!
0xffff7ab0c428    72  ldr x4, [x3]
0xffff7ab0c42c    76  and x16, x4, #0xfffffffffff00000
0xffff7ab0c430    80  ldr x16, [x16, #8]
0xffff7ab0c434    84  tst x16, #0x18
0xffff7ab0c438    88  b.eq #+0x1d8 (addr 0xffff7ab0c610)
0xffff7ab0c43c    92  and x16, x1, #0xfffffffffff00000
0xffff7ab0c440    96  ldr x16, [x16, #8]
0xffff7ab0c444   100  tst x16, #0x18
0xffff7ab0c448   104  b.ne #+0x1c8 (addr 0xffff7ab0c610)
0xffff7ab0c44c   108  and x4, x1, #0xfffffffffff00000
0xffff7ab0c450   112  ldr x0, [x4, #104]
0xffff7ab0c454   116  subs x0, x0, #0x1 (1)
0xffff7ab0c458   120  str x0, [x4, #104]
0xffff7ab0c45c   124  b.mi #+0xc4 (addr 0xffff7ab0c520)
0xffff7ab0c460   128  ubfx x16, x1, #8, #12
0xffff7ab0c464   132  and x4, x1, #0xfffffffffff00000
0xffff7ab0c468   136  add x4, x4, x16, lsl #2
0xffff7ab0c46c   140  ubfx x0, x1, #3, #5
0xffff7ab0c470   144  ldr x4, [x4, #360]
0xffff7ab0c474   148  lsr x4, x4, x0
0xffff7ab0c478   152  tbz w4, #0, #+0x8 (addr 0xffff7ab0c480)
0xffff7ab0c47c   156  tbnz w4, #1, #+0x3c (addr 0xffff7ab0c4b8)
0xffff7ab0c480   160  ldp x2, x0, [jssp], #16
0xffff7ab0c484   164  ldr x16, pc+1596 (addr 0x0000ffff7ab0cac0)    ;; external reference (store_buffer_top)
0xffff7ab0c488   168  ldr x4, [x16]
0xffff7ab0c48c   172  str x3, [x4], #8
0xffff7ab0c490   176  str x4, [x16]
0xffff7ab0c494   180  tst x4, #0x1ffff
0xffff7ab0c498   184  b.eq #+0x8 (addr 0xffff7ab0c4a0)
0xffff7ab0c49c   188  ret
0xffff7ab0c4a0   192  sub csp, jssp, #0x8 (8)
0xffff7ab0c4a4   196  str lr, [jssp, #-8]!
0xffff7ab0c4a8   200  ldr x17, pc+1568 (addr 0x0000ffff7ab0cac8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0c4ac   204  blr x17
0xffff7ab0c4b0   208  ldr lr, [jssp], #8
0xffff7ab0c4b4   212  ret
0xffff7ab0c4b8   216  ldr x4, [x3]
0xffff7ab0c4bc   220  sub csp, jssp, #0x10 (16)
0xffff7ab0c4c0   224  stp x1, x3, [jssp, #-16]!
0xffff7ab0c4c4   228  ubfx x16, x4, #8, #12
0xffff7ab0c4c8   232  and x0, x4, #0xfffffffffff00000
0xffff7ab0c4cc   236  add x0, x0, x16, lsl #2
0xffff7ab0c4d0   240  ubfx x1, x4, #3, #5
0xffff7ab0c4d4   244  ldr x3, [x0, #360]
0xffff7ab0c4d8   248  lsr x3, x3, x1
0xffff7ab0c4dc   252  tbz w3, #0, #+0x40 (addr 0xffff7ab0c51c)
0xffff7ab0c4e0   256  ldp x1, x3, [jssp], #16
0xffff7ab0c4e4   260  ldp x2, x0, [jssp], #16
0xffff7ab0c4e8   264  ldr x16, pc+1512 (addr 0x0000ffff7ab0cad0)    ;; external reference (store_buffer_top)
0xffff7ab0c4ec   268  ldr x4, [x16]
0xffff7ab0c4f0   272  str x3, [x4], #8
0xffff7ab0c4f4   276  str x4, [x16]
0xffff7ab0c4f8   280  tst x4, #0x1ffff
0xffff7ab0c4fc   284  b.eq #+0x8 (addr 0xffff7ab0c504)
0xffff7ab0c500   288  ret
0xffff7ab0c504   292  sub csp, jssp, #0x8 (8)
0xffff7ab0c508   296  str lr, [jssp, #-8]!
0xffff7ab0c50c   300  ldr x17, pc+1484 (addr 0x0000ffff7ab0cad8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0c510   304  blr x17
0xffff7ab0c514   308  ldr lr, [jssp], #8
0xffff7ab0c518   312  ret
0xffff7ab0c51c   316  ldp x1, x3, [jssp], #16
0xffff7ab0c520   320  sub csp, jssp, #0x78 (120)
0xffff7ab0c524   324  stp x14, x15, [jssp, #-32]!
0xffff7ab0c528   328  stp x18, lr, [jssp, #16]
0xffff7ab0c52c   332  stp x10, x11, [jssp, #-32]!
0xffff7ab0c530   336  stp x12, x13, [jssp, #16]
0xffff7ab0c534   340  stp x6, x7, [jssp, #-32]!
0xffff7ab0c538   344  stp x8, x9, [jssp, #16]
0xffff7ab0c53c   348  stp x1, x3, [jssp, #-24]!
0xffff7ab0c540   352  str x5, [jssp, #16]
0xffff7ab0c544   356  sub csp, jssp, #0xb0 (176)
0xffff7ab0c548   360  stp d26, d27, [jssp, #-32]!
0xffff7ab0c54c   364  stp d28, d29, [jssp, #16]
0xffff7ab0c550   368  stp d22, d23, [jssp, #-32]!
0xffff7ab0c554   372  stp d24, d25, [jssp, #16]
0xffff7ab0c558   376  stp d18, d19, [jssp, #-32]!
0xffff7ab0c55c   380  stp d20, d21, [jssp, #16]
0xffff7ab0c560   384  stp d6, d7, [jssp, #-32]!
0xffff7ab0c564   388  stp d16, d17, [jssp, #16]
0xffff7ab0c568   392  stp d2, d3, [jssp, #-32]!
0xffff7ab0c56c   396  stp d4, d5, [jssp, #16]
0xffff7ab0c570   400  stp d0, d1, [jssp, #-16]!
0xffff7ab0c574   404  mov x0, x1
0xffff7ab0c578   408  mov x1, x3
0xffff7ab0c57c   412  ldr x2, pc+1380 (addr 0x0000ffff7ab0cae0)    ;; external reference (isolate)
0xffff7ab0c580   416  ldr x16, pc+1384 (addr 0x0000ffff7ab0cae8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0c584   420  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0c588   424  blr x16
0xffff7ab0c58c   428  ldp d2, d3, [jssp, #16]
0xffff7ab0c590   432  ldp d0, d1, [jssp], #32
0xffff7ab0c594   436  ldp d6, d7, [jssp, #16]
0xffff7ab0c598   440  ldp d4, d5, [jssp], #32
0xffff7ab0c59c   444  ldp d18, d19, [jssp, #16]
0xffff7ab0c5a0   448  ldp d16, d17, [jssp], #32
0xffff7ab0c5a4   452  ldp d22, d23, [jssp, #16]
0xffff7ab0c5a8   456  ldp d20, d21, [jssp], #32
0xffff7ab0c5ac   460  ldp d26, d27, [jssp, #16]
0xffff7ab0c5b0   464  ldp d24, d25, [jssp], #32
0xffff7ab0c5b4   468  ldp d28, d29, [jssp], #16
0xffff7ab0c5b8   472  ldp x5, x6, [jssp, #16]
0xffff7ab0c5bc   476  ldp x1, x3, [jssp], #32
0xffff7ab0c5c0   480  ldp x9, x10, [jssp, #16]
0xffff7ab0c5c4   484  ldp x7, x8, [jssp], #32
0xffff7ab0c5c8   488  ldp x13, x14, [jssp, #16]
0xffff7ab0c5cc   492  ldp x11, x12, [jssp], #32
0xffff7ab0c5d0   496  ldr lr, [jssp, #16]
0xffff7ab0c5d4   500  ldp x15, x18, [jssp], #24
0xffff7ab0c5d8   504  ldp x2, x0, [jssp], #16
0xffff7ab0c5dc   508  ldr x16, pc+1300 (addr 0x0000ffff7ab0caf0)    ;; external reference (store_buffer_top)
0xffff7ab0c5e0   512  ldr x4, [x16]
0xffff7ab0c5e4   516  str x3, [x4], #8
0xffff7ab0c5e8   520  str x4, [x16]
0xffff7ab0c5ec   524  tst x4, #0x1ffff
0xffff7ab0c5f0   528  b.eq #+0x8 (addr 0xffff7ab0c5f8)
0xffff7ab0c5f4   532  ret
0xffff7ab0c5f8   536  sub csp, jssp, #0x8 (8)
0xffff7ab0c5fc   540  str lr, [jssp, #-8]!
0xffff7ab0c600   544  ldr x17, pc+1272 (addr 0x0000ffff7ab0caf8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0c604   548  blr x17
0xffff7ab0c608   552  ldr lr, [jssp], #8
0xffff7ab0c60c   556  ret
0xffff7ab0c610   560  and x4, x1, #0xfffffffffff00000
0xffff7ab0c614   564  ldr x0, [x4, #104]
0xffff7ab0c618   568  subs x0, x0, #0x1 (1)
0xffff7ab0c61c   572  str x0, [x4, #104]
0xffff7ab0c620   576  b.mi #+0x64 (addr 0xffff7ab0c684)
0xffff7ab0c624   580  ubfx x16, x1, #8, #12
0xffff7ab0c628   584  and x4, x1, #0xfffffffffff00000
0xffff7ab0c62c   588  add x4, x4, x16, lsl #2
0xffff7ab0c630   592  ubfx x0, x1, #3, #5
0xffff7ab0c634   596  ldr x4, [x4, #360]
0xffff7ab0c638   600  lsr x4, x4, x0
0xffff7ab0c63c   604  tbz w4, #0, #+0x8 (addr 0xffff7ab0c644)
0xffff7ab0c640   608  tbnz w4, #1, #+0xc (addr 0xffff7ab0c64c)
0xffff7ab0c644   612  ldp x2, x0, [jssp], #16
0xffff7ab0c648   616  ret
0xffff7ab0c64c   620  ldr x4, [x3]
0xffff7ab0c650   624  sub csp, jssp, #0x10 (16)
0xffff7ab0c654   628  stp x1, x3, [jssp, #-16]!
0xffff7ab0c658   632  ubfx x16, x4, #8, #12
0xffff7ab0c65c   636  and x0, x4, #0xfffffffffff00000
0xffff7ab0c660   640  add x0, x0, x16, lsl #2
0xffff7ab0c664   644  ubfx x1, x4, #3, #5
0xffff7ab0c668   648  ldr x3, [x0, #360]
0xffff7ab0c66c   652  lsr x3, x3, x1
0xffff7ab0c670   656  tbz w3, #0, #+0x10 (addr 0xffff7ab0c680)
0xffff7ab0c674   660  ldp x1, x3, [jssp], #16
0xffff7ab0c678   664  ldp x2, x0, [jssp], #16
0xffff7ab0c67c   668  ret
0xffff7ab0c680   672  ldp x1, x3, [jssp], #16
0xffff7ab0c684   676  sub csp, jssp, #0x78 (120)
0xffff7ab0c688   680  stp x14, x15, [jssp, #-32]!
0xffff7ab0c68c   684  stp x18, lr, [jssp, #16]
0xffff7ab0c690   688  stp x10, x11, [jssp, #-32]!
0xffff7ab0c694   692  stp x12, x13, [jssp, #16]
0xffff7ab0c698   696  stp x6, x7, [jssp, #-32]!
0xffff7ab0c69c   700  stp x8, x9, [jssp, #16]
0xffff7ab0c6a0   704  stp x1, x3, [jssp, #-24]!
0xffff7ab0c6a4   708  str x5, [jssp, #16]
0xffff7ab0c6a8   712  sub csp, jssp, #0xb0 (176)
0xffff7ab0c6ac   716  stp d26, d27, [jssp, #-32]!
0xffff7ab0c6b0   720  stp d28, d29, [jssp, #16]
0xffff7ab0c6b4   724  stp d22, d23, [jssp, #-32]!
0xffff7ab0c6b8   728  stp d24, d25, [jssp, #16]
0xffff7ab0c6bc   732  stp d18, d19, [jssp, #-32]!
0xffff7ab0c6c0   736  stp d20, d21, [jssp, #16]
0xffff7ab0c6c4   740  stp d6, d7, [jssp, #-32]!
0xffff7ab0c6c8   744  stp d16, d17, [jssp, #16]
0xffff7ab0c6cc   748  stp d2, d3, [jssp, #-32]!
0xffff7ab0c6d0   752  stp d4, d5, [jssp, #16]
0xffff7ab0c6d4   756  stp d0, d1, [jssp, #-16]!
0xffff7ab0c6d8   760  mov x0, x1
0xffff7ab0c6dc   764  mov x1, x3
0xffff7ab0c6e0   768  ldr x2, pc+1056 (addr 0x0000ffff7ab0cb00)    ;; external reference (isolate)
0xffff7ab0c6e4   772  ldr x16, pc+1060 (addr 0x0000ffff7ab0cb08)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0c6e8   776  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0c6ec   780  blr x16
0xffff7ab0c6f0   784  ldp d2, d3, [jssp, #16]
0xffff7ab0c6f4   788  ldp d0, d1, [jssp], #32
0xffff7ab0c6f8   792  ldp d6, d7, [jssp, #16]
0xffff7ab0c6fc   796  ldp d4, d5, [jssp], #32
0xffff7ab0c700   800  ldp d18, d19, [jssp, #16]
0xffff7ab0c704   804  ldp d16, d17, [jssp], #32
0xffff7ab0c708   808  ldp d22, d23, [jssp, #16]
0xffff7ab0c70c   812  ldp d20, d21, [jssp], #32
0xffff7ab0c710   816  ldp d26, d27, [jssp, #16]
0xffff7ab0c714   820  ldp d24, d25, [jssp], #32
0xffff7ab0c718   824  ldp d28, d29, [jssp], #16
0xffff7ab0c71c   828  ldp x5, x6, [jssp, #16]
0xffff7ab0c720   832  ldp x1, x3, [jssp], #32
0xffff7ab0c724   836  ldp x9, x10, [jssp, #16]
0xffff7ab0c728   840  ldp x7, x8, [jssp], #32
0xffff7ab0c72c   844  ldp x13, x14, [jssp, #16]
0xffff7ab0c730   848  ldp x11, x12, [jssp], #32
0xffff7ab0c734   852  ldr lr, [jssp, #16]
0xffff7ab0c738   856  ldp x15, x18, [jssp], #24
0xffff7ab0c73c   860  ldp x2, x0, [jssp], #16
0xffff7ab0c740   864  ret
0xffff7ab0c744   868  sub csp, jssp, #0x10 (16)
0xffff7ab0c748   872  stp x2, x0, [jssp, #-16]!
0xffff7ab0c74c   876  ldr x4, [x3]
0xffff7ab0c750   880  and x16, x4, #0xfffffffffff00000
0xffff7ab0c754   884  ldr x16, [x16, #8]
0xffff7ab0c758   888  tst x16, #0x18
0xffff7ab0c75c   892  b.eq #+0x1f8 (addr 0xffff7ab0c954)
0xffff7ab0c760   896  and x16, x1, #0xfffffffffff00000
0xffff7ab0c764   900  ldr x16, [x16, #8]
0xffff7ab0c768   904  tst x16, #0x18
0xffff7ab0c76c   908  b.ne #+0x1e8 (addr 0xffff7ab0c954)
0xffff7ab0c770   912  and x4, x1, #0xfffffffffff00000
0xffff7ab0c774   916  ldr x0, [x4, #104]
0xffff7ab0c778   920  subs x0, x0, #0x1 (1)
0xffff7ab0c77c   924  str x0, [x4, #104]
0xffff7ab0c780   928  b.mi #+0xe4 (addr 0xffff7ab0c864)
0xffff7ab0c784   932  ubfx x16, x1, #8, #12
0xffff7ab0c788   936  and x4, x1, #0xfffffffffff00000
0xffff7ab0c78c   940  add x4, x4, x16, lsl #2
0xffff7ab0c790   944  ubfx x0, x1, #3, #5
0xffff7ab0c794   948  ldr x4, [x4, #360]
0xffff7ab0c798   952  lsr x4, x4, x0
0xffff7ab0c79c   956  tbz w4, #0, #+0x8 (addr 0xffff7ab0c7a4)
0xffff7ab0c7a0   960  tbnz w4, #1, #+0x3c (addr 0xffff7ab0c7dc)
0xffff7ab0c7a4   964  ldp x2, x0, [jssp], #16
0xffff7ab0c7a8   968  ldr x16, pc+872 (addr 0x0000ffff7ab0cb10)    ;; external reference (store_buffer_top)
0xffff7ab0c7ac   972  ldr x4, [x16]
0xffff7ab0c7b0   976  str x3, [x4], #8
0xffff7ab0c7b4   980  str x4, [x16]
0xffff7ab0c7b8   984  tst x4, #0x1ffff
0xffff7ab0c7bc   988  b.eq #+0x8 (addr 0xffff7ab0c7c4)
0xffff7ab0c7c0   992  ret
0xffff7ab0c7c4   996  sub csp, jssp, #0x8 (8)
0xffff7ab0c7c8  1000  str lr, [jssp, #-8]!
0xffff7ab0c7cc  1004  ldr x17, pc+844 (addr 0x0000ffff7ab0cb18)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0c7d0  1008  blr x17
0xffff7ab0c7d4  1012  ldr lr, [jssp], #8
0xffff7ab0c7d8  1016  ret
0xffff7ab0c7dc  1020  ldr x4, [x3]
0xffff7ab0c7e0  1024  and x0, x4, #0xfffffffffff00000
0xffff7ab0c7e4  1028  ldr x0, [x0, #8]
0xffff7ab0c7e8  1032  tbz w0, #6, #+0x18 (addr 0xffff7ab0c800)
0xffff7ab0c7ec  1036  and x0, x1, #0xfffffffffff00000
0xffff7ab0c7f0  1040  ldr x0, [x0, #8]
0xffff7ab0c7f4  1044  movz x16, #0x58
0xffff7ab0c7f8  1048  tst x0, x16
0xffff7ab0c7fc  1052  b.eq #+0x68 (addr 0xffff7ab0c864)
0xffff7ab0c800  1056  sub csp, jssp, #0x10 (16)
0xffff7ab0c804  1060  stp x1, x3, [jssp, #-16]!
0xffff7ab0c808  1064  ubfx x16, x4, #8, #12
0xffff7ab0c80c  1068  and x0, x4, #0xfffffffffff00000
0xffff7ab0c810  1072  add x0, x0, x16, lsl #2
0xffff7ab0c814  1076  ubfx x1, x4, #3, #5
0xffff7ab0c818  1080  ldr x3, [x0, #360]
0xffff7ab0c81c  1084  lsr x3, x3, x1
0xffff7ab0c820  1088  tbz w3, #0, #+0x40 (addr 0xffff7ab0c860)
0xffff7ab0c824  1092  ldp x1, x3, [jssp], #16
0xffff7ab0c828  1096  ldp x2, x0, [jssp], #16
0xffff7ab0c82c  1100  ldr x16, pc+756 (addr 0x0000ffff7ab0cb20)    ;; external reference (store_buffer_top)
0xffff7ab0c830  1104  ldr x4, [x16]
0xffff7ab0c834  1108  str x3, [x4], #8
0xffff7ab0c838  1112  str x4, [x16]
0xffff7ab0c83c  1116  tst x4, #0x1ffff
0xffff7ab0c840  1120  b.eq #+0x8 (addr 0xffff7ab0c848)
0xffff7ab0c844  1124  ret
0xffff7ab0c848  1128  sub csp, jssp, #0x8 (8)
0xffff7ab0c84c  1132  str lr, [jssp, #-8]!
0xffff7ab0c850  1136  ldr x17, pc+728 (addr 0x0000ffff7ab0cb28)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0c854  1140  blr x17
0xffff7ab0c858  1144  ldr lr, [jssp], #8
0xffff7ab0c85c  1148  ret
0xffff7ab0c860  1152  ldp x1, x3, [jssp], #16
0xffff7ab0c864  1156  sub csp, jssp, #0x78 (120)
0xffff7ab0c868  1160  stp x14, x15, [jssp, #-32]!
0xffff7ab0c86c  1164  stp x18, lr, [jssp, #16]
0xffff7ab0c870  1168  stp x10, x11, [jssp, #-32]!
0xffff7ab0c874  1172  stp x12, x13, [jssp, #16]
0xffff7ab0c878  1176  stp x6, x7, [jssp, #-32]!
0xffff7ab0c87c  1180  stp x8, x9, [jssp, #16]
0xffff7ab0c880  1184  stp x1, x3, [jssp, #-24]!
0xffff7ab0c884  1188  str x5, [jssp, #16]
0xffff7ab0c888  1192  sub csp, jssp, #0xb0 (176)
0xffff7ab0c88c  1196  stp d26, d27, [jssp, #-32]!
0xffff7ab0c890  1200  stp d28, d29, [jssp, #16]
0xffff7ab0c894  1204  stp d22, d23, [jssp, #-32]!
0xffff7ab0c898  1208  stp d24, d25, [jssp, #16]
0xffff7ab0c89c  1212  stp d18, d19, [jssp, #-32]!
0xffff7ab0c8a0  1216  stp d20, d21, [jssp, #16]
0xffff7ab0c8a4  1220  stp d6, d7, [jssp, #-32]!
0xffff7ab0c8a8  1224  stp d16, d17, [jssp, #16]
0xffff7ab0c8ac  1228  stp d2, d3, [jssp, #-32]!
0xffff7ab0c8b0  1232  stp d4, d5, [jssp, #16]
0xffff7ab0c8b4  1236  stp d0, d1, [jssp, #-16]!
0xffff7ab0c8b8  1240  mov x0, x1
0xffff7ab0c8bc  1244  mov x1, x3
0xffff7ab0c8c0  1248  ldr x2, pc+624 (addr 0x0000ffff7ab0cb30)    ;; external reference (isolate)
0xffff7ab0c8c4  1252  ldr x16, pc+628 (addr 0x0000ffff7ab0cb38)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0c8c8  1256  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0c8cc  1260  blr x16
0xffff7ab0c8d0  1264  ldp d2, d3, [jssp, #16]
0xffff7ab0c8d4  1268  ldp d0, d1, [jssp], #32
0xffff7ab0c8d8  1272  ldp d6, d7, [jssp, #16]
0xffff7ab0c8dc  1276  ldp d4, d5, [jssp], #32
0xffff7ab0c8e0  1280  ldp d18, d19, [jssp, #16]
0xffff7ab0c8e4  1284  ldp d16, d17, [jssp], #32
0xffff7ab0c8e8  1288  ldp d22, d23, [jssp, #16]
0xffff7ab0c8ec  1292  ldp d20, d21, [jssp], #32
0xffff7ab0c8f0  1296  ldp d26, d27, [jssp, #16]
0xffff7ab0c8f4  1300  ldp d24, d25, [jssp], #32
0xffff7ab0c8f8  1304  ldp d28, d29, [jssp], #16
0xffff7ab0c8fc  1308  ldp x5, x6, [jssp, #16]
0xffff7ab0c900  1312  ldp x1, x3, [jssp], #32
0xffff7ab0c904  1316  ldp x9, x10, [jssp, #16]
0xffff7ab0c908  1320  ldp x7, x8, [jssp], #32
0xffff7ab0c90c  1324  ldp x13, x14, [jssp, #16]
0xffff7ab0c910  1328  ldp x11, x12, [jssp], #32
0xffff7ab0c914  1332  ldr lr, [jssp, #16]
0xffff7ab0c918  1336  ldp x15, x18, [jssp], #24
0xffff7ab0c91c  1340  ldp x2, x0, [jssp], #16
0xffff7ab0c920  1344  ldr x16, pc+544 (addr 0x0000ffff7ab0cb40)    ;; external reference (store_buffer_top)
0xffff7ab0c924  1348  ldr x4, [x16]
0xffff7ab0c928  1352  str x3, [x4], #8
0xffff7ab0c92c  1356  str x4, [x16]
0xffff7ab0c930  1360  tst x4, #0x1ffff
0xffff7ab0c934  1364  b.eq #+0x8 (addr 0xffff7ab0c93c)
0xffff7ab0c938  1368  ret
0xffff7ab0c93c  1372  sub csp, jssp, #0x8 (8)
0xffff7ab0c940  1376  str lr, [jssp, #-8]!
0xffff7ab0c944  1380  ldr x17, pc+516 (addr 0x0000ffff7ab0cb48)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0c948  1384  blr x17
0xffff7ab0c94c  1388  ldr lr, [jssp], #8
0xffff7ab0c950  1392  ret
0xffff7ab0c954  1396  and x4, x1, #0xfffffffffff00000
0xffff7ab0c958  1400  ldr x0, [x4, #104]
0xffff7ab0c95c  1404  subs x0, x0, #0x1 (1)
0xffff7ab0c960  1408  str x0, [x4, #104]
0xffff7ab0c964  1412  b.mi #+0x84 (addr 0xffff7ab0c9e8)
0xffff7ab0c968  1416  ubfx x16, x1, #8, #12
0xffff7ab0c96c  1420  and x4, x1, #0xfffffffffff00000
0xffff7ab0c970  1424  add x4, x4, x16, lsl #2
0xffff7ab0c974  1428  ubfx x0, x1, #3, #5
0xffff7ab0c978  1432  ldr x4, [x4, #360]
0xffff7ab0c97c  1436  lsr x4, x4, x0
0xffff7ab0c980  1440  tbz w4, #0, #+0x8 (addr 0xffff7ab0c988)
0xffff7ab0c984  1444  tbnz w4, #1, #+0xc (addr 0xffff7ab0c990)
0xffff7ab0c988  1448  ldp x2, x0, [jssp], #16
0xffff7ab0c98c  1452  ret
0xffff7ab0c990  1456  ldr x4, [x3]
0xffff7ab0c994  1460  and x0, x4, #0xfffffffffff00000
0xffff7ab0c998  1464  ldr x0, [x0, #8]
0xffff7ab0c99c  1468  tbz w0, #6, #+0x18 (addr 0xffff7ab0c9b4)
0xffff7ab0c9a0  1472  and x0, x1, #0xfffffffffff00000
0xffff7ab0c9a4  1476  ldr x0, [x0, #8]
0xffff7ab0c9a8  1480  movz x16, #0x58
0xffff7ab0c9ac  1484  tst x0, x16
0xffff7ab0c9b0  1488  b.eq #+0x38 (addr 0xffff7ab0c9e8)
0xffff7ab0c9b4  1492  sub csp, jssp, #0x10 (16)
0xffff7ab0c9b8  1496  stp x1, x3, [jssp, #-16]!
0xffff7ab0c9bc  1500  ubfx x16, x4, #8, #12
0xffff7ab0c9c0  1504  and x0, x4, #0xfffffffffff00000
0xffff7ab0c9c4  1508  add x0, x0, x16, lsl #2
0xffff7ab0c9c8  1512  ubfx x1, x4, #3, #5
0xffff7ab0c9cc  1516  ldr x3, [x0, #360]
0xffff7ab0c9d0  1520  lsr x3, x3, x1
0xffff7ab0c9d4  1524  tbz w3, #0, #+0x10 (addr 0xffff7ab0c9e4)
0xffff7ab0c9d8  1528  ldp x1, x3, [jssp], #16
0xffff7ab0c9dc  1532  ldp x2, x0, [jssp], #16
0xffff7ab0c9e0  1536  ret
0xffff7ab0c9e4  1540  ldp x1, x3, [jssp], #16
0xffff7ab0c9e8  1544  sub csp, jssp, #0x78 (120)
0xffff7ab0c9ec  1548  stp x14, x15, [jssp, #-32]!
0xffff7ab0c9f0  1552  stp x18, lr, [jssp, #16]
0xffff7ab0c9f4  1556  stp x10, x11, [jssp, #-32]!
0xffff7ab0c9f8  1560  stp x12, x13, [jssp, #16]
0xffff7ab0c9fc  1564  stp x6, x7, [jssp, #-32]!
0xffff7ab0ca00  1568  stp x8, x9, [jssp, #16]
0xffff7ab0ca04  1572  stp x1, x3, [jssp, #-24]!
0xffff7ab0ca08  1576  str x5, [jssp, #16]
0xffff7ab0ca0c  1580  sub csp, jssp, #0xb0 (176)
0xffff7ab0ca10  1584  stp d26, d27, [jssp, #-32]!
0xffff7ab0ca14  1588  stp d28, d29, [jssp, #16]
0xffff7ab0ca18  1592  stp d22, d23, [jssp, #-32]!
0xffff7ab0ca1c  1596  stp d24, d25, [jssp, #16]
0xffff7ab0ca20  1600  stp d18, d19, [jssp, #-32]!
0xffff7ab0ca24  1604  stp d20, d21, [jssp, #16]
0xffff7ab0ca28  1608  stp d6, d7, [jssp, #-32]!
0xffff7ab0ca2c  1612  stp d16, d17, [jssp, #16]
0xffff7ab0ca30  1616  stp d2, d3, [jssp, #-32]!
0xffff7ab0ca34  1620  stp d4, d5, [jssp, #16]
0xffff7ab0ca38  1624  stp d0, d1, [jssp, #-16]!
0xffff7ab0ca3c  1628  mov x0, x1
0xffff7ab0ca40  1632  mov x1, x3
0xffff7ab0ca44  1636  ldr x2, pc+268 (addr 0x0000ffff7ab0cb50)    ;; external reference (isolate)
0xffff7ab0ca48  1640  ldr x16, pc+272 (addr 0x0000ffff7ab0cb58)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0ca4c  1644  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0ca50  1648  blr x16
0xffff7ab0ca54  1652  ldp d2, d3, [jssp, #16]
0xffff7ab0ca58  1656  ldp d0, d1, [jssp], #32
0xffff7ab0ca5c  1660  ldp d6, d7, [jssp, #16]
0xffff7ab0ca60  1664  ldp d4, d5, [jssp], #32
0xffff7ab0ca64  1668  ldp d18, d19, [jssp, #16]
0xffff7ab0ca68  1672  ldp d16, d17, [jssp], #32
0xffff7ab0ca6c  1676  ldp d22, d23, [jssp, #16]
0xffff7ab0ca70  1680  ldp d20, d21, [jssp], #32
0xffff7ab0ca74  1684  ldp d26, d27, [jssp, #16]
0xffff7ab0ca78  1688  ldp d24, d25, [jssp], #32
0xffff7ab0ca7c  1692  ldp d28, d29, [jssp], #16
0xffff7ab0ca80  1696  ldp x5, x6, [jssp, #16]
0xffff7ab0ca84  1700  ldp x1, x3, [jssp], #32
0xffff7ab0ca88  1704  ldp x9, x10, [jssp, #16]
0xffff7ab0ca8c  1708  ldp x7, x8, [jssp], #32
0xffff7ab0ca90  1712  ldp x13, x14, [jssp, #16]
0xffff7ab0ca94  1716  ldp x11, x12, [jssp], #32
0xffff7ab0ca98  1720  ldr lr, [jssp, #16]
0xffff7ab0ca9c  1724  ldp x15, x18, [jssp], #24
0xffff7ab0caa0  1728  ldp x2, x0, [jssp], #16
0xffff7ab0caa4  1732  ret
0xffff7ab0caa8  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab0caac  1740  d63f03e0       constant
0xffff7ab0cab0  1744  09abe8c0       constant
0xffff7ab0cab4  1748  00000000       constant
0xffff7ab0cab8  1752  7ab065a0       constant
0xffff7ab0cabc  1756  0000ffff       constant
0xffff7ab0cac0  1760  09abe8c0       constant
0xffff7ab0cac4  1764  00000000       constant
0xffff7ab0cac8  1768  7ab065a0       constant
0xffff7ab0cacc  1772  0000ffff       constant
0xffff7ab0cad0  1776  09abe8c0       constant
0xffff7ab0cad4  1780  00000000       constant
0xffff7ab0cad8  1784  7ab065a0       constant
0xffff7ab0cadc  1788  0000ffff       constant
0xffff7ab0cae0  1792  09abd2d0       constant
0xffff7ab0cae4  1796  00000000       constant
0xffff7ab0cae8  1800  00c2d958       constant
0xffff7ab0caec  1804  00000000       constant
0xffff7ab0caf0  1808  09abe8c0       constant
0xffff7ab0caf4  1812  00000000       constant
0xffff7ab0caf8  1816  7ab065a0       constant
0xffff7ab0cafc  1820  0000ffff       constant
0xffff7ab0cb00  1824  09abd2d0       constant
0xffff7ab0cb04  1828  00000000       constant
0xffff7ab0cb08  1832  00c2d958       constant
0xffff7ab0cb0c  1836  00000000       constant
0xffff7ab0cb10  1840  09abe8c0       constant
0xffff7ab0cb14  1844  00000000       constant
0xffff7ab0cb18  1848  7ab065a0       constant
0xffff7ab0cb1c  1852  0000ffff       constant
0xffff7ab0cb20  1856  09abe8c0       constant
0xffff7ab0cb24  1860  00000000       constant
0xffff7ab0cb28  1864  7ab065a0       constant
0xffff7ab0cb2c  1868  0000ffff       constant
0xffff7ab0cb30  1872  09abd2d0       constant
0xffff7ab0cb34  1876  00000000       constant
0xffff7ab0cb38  1880  00c2d958       constant
0xffff7ab0cb3c  1884  00000000       constant
0xffff7ab0cb40  1888  09abe8c0       constant
0xffff7ab0cb44  1892  00000000       constant
0xffff7ab0cb48  1896  7ab065a0       constant
0xffff7ab0cb4c  1900  0000ffff       constant
0xffff7ab0cb50  1904  09abd2d0       constant
0xffff7ab0cb54  1908  00000000       constant
0xffff7ab0cb58  1912  00c2d958       constant
0xffff7ab0cb5c  1916  00000000       constant


RelocInfo (size = 65)
0xffff7ab0c3e8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0c40c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0c484  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0c4a8  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0c4e8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0c50c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0c57c  external reference (isolate)  (0x9abd2d0)
0xffff7ab0c580  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0c5dc  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0c600  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0c6e0  external reference (isolate)  (0x9abd2d0)
0xffff7ab0c6e4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0c7a8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0c7cc  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0c82c  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0c850  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0c8c0  external reference (isolate)  (0x9abd2d0)
0xffff7ab0c8c4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0c920  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0c944  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0ca44  external reference (isolate)  (0x9abd2d0)
0xffff7ab0ca48  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0caa8  constant pool (size 184)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = CreateAllocationSiteStub
compiler = crankshaft
Instructions (size = 477)
0xffff7ab0cbc0     0  movz x1, #0xc840
0xffff7ab0cbc4     4  movk x1, #0x9ae, lsl #16
0xffff7ab0cbc8     8  ldp x4, x0, [x1]
0xffff7ab0cbcc    12  adds x16, x4, #0x38 (56)
0xffff7ab0cbd0    16  ccmp x16, x0, #nzCv, lo
0xffff7ab0cbd4    20  b.hi #+0x104 (addr 0xffff7ab0ccd8)
0xffff7ab0cbd8    24  str x16, [x1]
0xffff7ab0cbdc    28  orr x4, x4, #0x1
0xffff7ab0cbe0    32  ldr x0, pc+360 (addr 0x0000ffff7ab0cd48)    ;; object: 0x4ec05d29 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab0cbe4    36  stur x0, [x4, #-1]
0xffff7ab0cbe8    40  sub x1, x4, #0x1 (1)
0xffff7ab0cbec    44  and x0, x0, #0xfffffffffff00000
0xffff7ab0cbf0    48  ldr x0, [x0, #8]
0xffff7ab0cbf4    52  tbz w0, #1, #+0x24 (addr 0xffff7ab0cc18)
0xffff7ab0cbf8    56  and x0, x4, #0xfffffffffff00000
0xffff7ab0cbfc    60  ldr x0, [x0, #8]
0xffff7ab0cc00    64  tbz w0, #2, #+0x18 (addr 0xffff7ab0cc18)
0xffff7ab0cc04    68  sub csp, jssp, #0x8 (8)
0xffff7ab0cc08    72  str lr, [jssp, #-8]!
0xffff7ab0cc0c    76  ldr x16, pc+324 (addr 0x0000ffff7ab0cd50)    ;; code: STUB, RecordWriteStub, minor: 66564
0xffff7ab0cc10    80  blr x16
0xffff7ab0cc14    84  ldr lr, [jssp], #8
0xffff7ab0cc18    88  movz x0, #0x0
0xffff7ab0cc1c    92  stur x0, [x4, #7]
0xffff7ab0cc20    96  movz x0, #0x0
0xffff7ab0cc24   100  stur x0, [x4, #15]
0xffff7ab0cc28   104  movz x0, #0x0
0xffff7ab0cc2c   108  stur x0, [x4, #23]
0xffff7ab0cc30   112  movz x0, #0x0
0xffff7ab0cc34   116  stur x0, [x4, #31]
0xffff7ab0cc38   120  ldr x0, pc+288 (addr 0x0000ffff7ab0cd58)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0cc3c   124  stur x0, [x4, #39]
0xffff7ab0cc40   128  movz x0, #0xe748
0xffff7ab0cc44   132  movk x0, #0x9ab, lsl #16
0xffff7ab0cc48   136  ldr x1, [x0]
0xffff7ab0cc4c   140  stur x1, [x4, #47]
0xffff7ab0cc50   144  tbz w1, #0, #+0x34 (addr 0xffff7ab0cc84)
0xffff7ab0cc54   148  add x5, x4, #0x2f (47)
0xffff7ab0cc58   152  and x1, x1, #0xfffffffffff00000
0xffff7ab0cc5c   156  ldr x1, [x1, #8]
0xffff7ab0cc60   160  tbz w1, #1, #+0x24 (addr 0xffff7ab0cc84)
0xffff7ab0cc64   164  and x1, x4, #0xfffffffffff00000
0xffff7ab0cc68   168  ldr x1, [x1, #8]
0xffff7ab0cc6c   172  tbz w1, #2, #+0x18 (addr 0xffff7ab0cc84)
0xffff7ab0cc70   176  sub csp, jssp, #0x8 (8)
0xffff7ab0cc74   180  str lr, [jssp, #-8]!
0xffff7ab0cc78   184  ldr x16, pc+232 (addr 0x0000ffff7ab0cd60)    ;; code: STUB, RecordWriteStub, minor: 70692
0xffff7ab0cc7c   188  blr x16
0xffff7ab0cc80   192  ldr lr, [jssp], #8
0xffff7ab0cc84   196  movz x1, #0xe748
0xffff7ab0cc88   200  movk x1, #0x9ab, lsl #16
0xffff7ab0cc8c   204  str x4, [x0]
0xffff7ab0cc90   208  asr x0, x3, #32
0xffff7ab0cc94   212  mov x1, x2
0xffff7ab0cc98   216  add x3, x1, #0xf (15)
0xffff7ab0cc9c   220  str x4, [x3, w0, sxtw #3]
0xffff7ab0cca0   224  add x3, x3, w0, sxtw #3
0xffff7ab0cca4   228  and x4, x4, #0xfffffffffff00000
0xffff7ab0cca8   232  ldr x4, [x4, #8]
0xffff7ab0ccac   236  tbz w4, #1, #+0x24 (addr 0xffff7ab0ccd0)
0xffff7ab0ccb0   240  and x4, x1, #0xfffffffffff00000
0xffff7ab0ccb4   244  ldr x4, [x4, #8]
0xffff7ab0ccb8   248  tbz w4, #2, #+0x18 (addr 0xffff7ab0ccd0)
0xffff7ab0ccbc   252  sub csp, jssp, #0x8 (8)
0xffff7ab0ccc0   256  str lr, [jssp, #-8]!
0xffff7ab0ccc4   260  ldr x16, pc+164 (addr 0x0000ffff7ab0cd68)    ;; code: STUB, RecordWriteStub, minor: 68737
0xffff7ab0ccc8   264  blr x16
0xffff7ab0cccc   268  ldr lr, [jssp], #8
0xffff7ab0ccd0   272  mov x0, x2
0xffff7ab0ccd4   276  ret
0xffff7ab0ccd8   280  sub csp, jssp, #0x10 (16)
0xffff7ab0ccdc   284  stp fp, lr, [jssp, #-16]!
0xffff7ab0cce0   288  movz fp, #0xa00000000
0xffff7ab0cce4   292  sub csp, jssp, #0x8 (8)
0xffff7ab0cce8   296  str fp, [jssp, #-8]!
0xffff7ab0ccec   300  add fp, jssp, #0x8 (8)
0xffff7ab0ccf0   304  movz x4, #0x0
0xffff7ab0ccf4   308  mov x16, lr
0xffff7ab0ccf8   312  ldr x17, pc+120 (addr 0x0000ffff7ab0cd70)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0ccfc   316  blr x17
0xffff7ab0cd00   320  movz x0, #0x3800000000
0xffff7ab0cd04   324  movz x10, #0x200000000
0xffff7ab0cd08   328  sub csp, jssp, #0x10 (16)
0xffff7ab0cd0c   332  stp x10, x0, [jssp, #-16]!
0xffff7ab0cd10   336  movz x0, #0x2
0xffff7ab0cd14   340  movz x1, #0x5b88
0xffff7ab0cd18   344  movk x1, #0xe2, lsl #16
0xffff7ab0cd1c   348  ldr x16, pc+92 (addr 0x0000ffff7ab0cd78)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0cd20   352  blr x16
0xffff7ab0cd24   356  str x0, [jssp, #32]
0xffff7ab0cd28   360  ldr x16, pc+88 (addr 0x0000ffff7ab0cd80)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0cd2c   364  blr x16
0xffff7ab0cd30   368  ldr lr, [jssp, #16]
0xffff7ab0cd34   372  ldp xzr, fp, [jssp], #24
0xffff7ab0cd38   376  b #-0x158 (addr 0xffff7ab0cbe0)
0xffff7ab0cd3c   380  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0xffff7ab0cd40   384  d63f03e0       constant
0xffff7ab0cd44   388  d503201f       constant
0xffff7ab0cd48   392  4ec05d29       constant
0xffff7ab0cd4c   396  00000000       constant
0xffff7ab0cd50   400  7ab0b420       constant
0xffff7ab0cd54   404  0000ffff       constant
0xffff7ab0cd58   408  20d04201       constant
0xffff7ab0cd5c   412  00000000       constant
0xffff7ab0cd60   416  7ab0bc00       constant
0xffff7ab0cd64   420  0000ffff       constant
0xffff7ab0cd68   424  7ab0c3e0       constant
0xffff7ab0cd6c   428  0000ffff       constant
0xffff7ab0cd70   432  7ab06820       constant
0xffff7ab0cd74   436  0000ffff       constant
0xffff7ab0cd78   440  7ab06260       constant
0xffff7ab0cd7c   444  0000ffff       constant
0xffff7ab0cd80   448  7ab068e0       constant
0xffff7ab0cd84   452  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0cd24   356  000 | x2 | x4 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 18)
0xffff7ab0cbe0  embedded object  (0x4ec05d29 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab0cc0c  code target (STUB)  (0xffff7ab0b420)
0xffff7ab0cc38  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0cc78  code target (STUB)  (0xffff7ab0bc00)
0xffff7ab0ccc4  code target (STUB)  (0xffff7ab0c3e0)
0xffff7ab0ccf8  code target (STUB)  (0xffff7ab06820)
0xffff7ab0cd1c  code target (STUB)  (0xffff7ab06260)
0xffff7ab0cd28  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0cd3c  constant pool (size 76)

--- End code ---
kind = STUB
major_key = CreateAllocationSiteStub
name = CreateAllocationSiteStub
compiler = crankshaft
Instructions (size = 477)
0xffff7ab0cbc0     0  movz x1, #0xc840
0xffff7ab0cbc4     4  movk x1, #0x9ae, lsl #16
0xffff7ab0cbc8     8  ldp x4, x0, [x1]
0xffff7ab0cbcc    12  adds x16, x4, #0x38 (56)
0xffff7ab0cbd0    16  ccmp x16, x0, #nzCv, lo
0xffff7ab0cbd4    20  b.hi #+0x104 (addr 0xffff7ab0ccd8)
0xffff7ab0cbd8    24  str x16, [x1]
0xffff7ab0cbdc    28  orr x4, x4, #0x1
0xffff7ab0cbe0    32  ldr x0, pc+360 (addr 0x0000ffff7ab0cd48)    ;; object: 0x4ec05d29 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab0cbe4    36  stur x0, [x4, #-1]
0xffff7ab0cbe8    40  sub x1, x4, #0x1 (1)
0xffff7ab0cbec    44  and x0, x0, #0xfffffffffff00000
0xffff7ab0cbf0    48  ldr x0, [x0, #8]
0xffff7ab0cbf4    52  tbz w0, #1, #+0x24 (addr 0xffff7ab0cc18)
0xffff7ab0cbf8    56  and x0, x4, #0xfffffffffff00000
0xffff7ab0cbfc    60  ldr x0, [x0, #8]
0xffff7ab0cc00    64  tbz w0, #2, #+0x18 (addr 0xffff7ab0cc18)
0xffff7ab0cc04    68  sub csp, jssp, #0x8 (8)
0xffff7ab0cc08    72  str lr, [jssp, #-8]!
0xffff7ab0cc0c    76  ldr x16, pc+324 (addr 0x0000ffff7ab0cd50)    ;; code: STUB, RecordWriteStub, minor: 66564
0xffff7ab0cc10    80  blr x16
0xffff7ab0cc14    84  ldr lr, [jssp], #8
0xffff7ab0cc18    88  movz x0, #0x0
0xffff7ab0cc1c    92  stur x0, [x4, #7]
0xffff7ab0cc20    96  movz x0, #0x0
0xffff7ab0cc24   100  stur x0, [x4, #15]
0xffff7ab0cc28   104  movz x0, #0x0
0xffff7ab0cc2c   108  stur x0, [x4, #23]
0xffff7ab0cc30   112  movz x0, #0x0
0xffff7ab0cc34   116  stur x0, [x4, #31]
0xffff7ab0cc38   120  ldr x0, pc+288 (addr 0x0000ffff7ab0cd58)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab0cc3c   124  stur x0, [x4, #39]
0xffff7ab0cc40   128  movz x0, #0xe748
0xffff7ab0cc44   132  movk x0, #0x9ab, lsl #16
0xffff7ab0cc48   136  ldr x1, [x0]
0xffff7ab0cc4c   140  stur x1, [x4, #47]
0xffff7ab0cc50   144  tbz w1, #0, #+0x34 (addr 0xffff7ab0cc84)
0xffff7ab0cc54   148  add x5, x4, #0x2f (47)
0xffff7ab0cc58   152  and x1, x1, #0xfffffffffff00000
0xffff7ab0cc5c   156  ldr x1, [x1, #8]
0xffff7ab0cc60   160  tbz w1, #1, #+0x24 (addr 0xffff7ab0cc84)
0xffff7ab0cc64   164  and x1, x4, #0xfffffffffff00000
0xffff7ab0cc68   168  ldr x1, [x1, #8]
0xffff7ab0cc6c   172  tbz w1, #2, #+0x18 (addr 0xffff7ab0cc84)
0xffff7ab0cc70   176  sub csp, jssp, #0x8 (8)
0xffff7ab0cc74   180  str lr, [jssp, #-8]!
0xffff7ab0cc78   184  ldr x16, pc+232 (addr 0x0000ffff7ab0cd60)    ;; code: STUB, RecordWriteStub, minor: 70692
0xffff7ab0cc7c   188  blr x16
0xffff7ab0cc80   192  ldr lr, [jssp], #8
0xffff7ab0cc84   196  movz x1, #0xe748
0xffff7ab0cc88   200  movk x1, #0x9ab, lsl #16
0xffff7ab0cc8c   204  str x4, [x0]
0xffff7ab0cc90   208  asr x0, x3, #32
0xffff7ab0cc94   212  mov x1, x2
0xffff7ab0cc98   216  add x3, x1, #0xf (15)
0xffff7ab0cc9c   220  str x4, [x3, w0, sxtw #3]
0xffff7ab0cca0   224  add x3, x3, w0, sxtw #3
0xffff7ab0cca4   228  and x4, x4, #0xfffffffffff00000
0xffff7ab0cca8   232  ldr x4, [x4, #8]
0xffff7ab0ccac   236  tbz w4, #1, #+0x24 (addr 0xffff7ab0ccd0)
0xffff7ab0ccb0   240  and x4, x1, #0xfffffffffff00000
0xffff7ab0ccb4   244  ldr x4, [x4, #8]
0xffff7ab0ccb8   248  tbz w4, #2, #+0x18 (addr 0xffff7ab0ccd0)
0xffff7ab0ccbc   252  sub csp, jssp, #0x8 (8)
0xffff7ab0ccc0   256  str lr, [jssp, #-8]!
0xffff7ab0ccc4   260  ldr x16, pc+164 (addr 0x0000ffff7ab0cd68)    ;; code: STUB, RecordWriteStub, minor: 68737
0xffff7ab0ccc8   264  blr x16
0xffff7ab0cccc   268  ldr lr, [jssp], #8
0xffff7ab0ccd0   272  mov x0, x2
0xffff7ab0ccd4   276  ret
0xffff7ab0ccd8   280  sub csp, jssp, #0x10 (16)
0xffff7ab0ccdc   284  stp fp, lr, [jssp, #-16]!
0xffff7ab0cce0   288  movz fp, #0xa00000000
0xffff7ab0cce4   292  sub csp, jssp, #0x8 (8)
0xffff7ab0cce8   296  str fp, [jssp, #-8]!
0xffff7ab0ccec   300  add fp, jssp, #0x8 (8)
0xffff7ab0ccf0   304  movz x4, #0x0
0xffff7ab0ccf4   308  mov x16, lr
0xffff7ab0ccf8   312  ldr x17, pc+120 (addr 0x0000ffff7ab0cd70)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0ccfc   316  blr x17
0xffff7ab0cd00   320  movz x0, #0x3800000000
0xffff7ab0cd04   324  movz x10, #0x200000000
0xffff7ab0cd08   328  sub csp, jssp, #0x10 (16)
0xffff7ab0cd0c   332  stp x10, x0, [jssp, #-16]!
0xffff7ab0cd10   336  movz x0, #0x2
0xffff7ab0cd14   340  movz x1, #0x5b88
0xffff7ab0cd18   344  movk x1, #0xe2, lsl #16
0xffff7ab0cd1c   348  ldr x16, pc+92 (addr 0x0000ffff7ab0cd78)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0cd20   352  blr x16
0xffff7ab0cd24   356  str x0, [jssp, #32]
0xffff7ab0cd28   360  ldr x16, pc+88 (addr 0x0000ffff7ab0cd80)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0cd2c   364  blr x16
0xffff7ab0cd30   368  ldr lr, [jssp, #16]
0xffff7ab0cd34   372  ldp xzr, fp, [jssp], #24
0xffff7ab0cd38   376  b #-0x158 (addr 0xffff7ab0cbe0)
0xffff7ab0cd3c   380  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0xffff7ab0cd40   384  d63f03e0       constant
0xffff7ab0cd44   388  d503201f       constant
0xffff7ab0cd48   392  4ec05d29       constant
0xffff7ab0cd4c   396  00000000       constant
0xffff7ab0cd50   400  7ab0b420       constant
0xffff7ab0cd54   404  0000ffff       constant
0xffff7ab0cd58   408  20d04201       constant
0xffff7ab0cd5c   412  00000000       constant
0xffff7ab0cd60   416  7ab0bc00       constant
0xffff7ab0cd64   420  0000ffff       constant
0xffff7ab0cd68   424  7ab0c3e0       constant
0xffff7ab0cd6c   428  0000ffff       constant
0xffff7ab0cd70   432  7ab06820       constant
0xffff7ab0cd74   436  0000ffff       constant
0xffff7ab0cd78   440  7ab06260       constant
0xffff7ab0cd7c   444  0000ffff       constant
0xffff7ab0cd80   448  7ab068e0       constant
0xffff7ab0cd84   452  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0cd24   356  000 | x2 | x4 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 18)
0xffff7ab0cbe0  embedded object  (0x4ec05d29 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab0cc0c  code target (STUB)  (0xffff7ab0b420)
0xffff7ab0cc38  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab0cc78  code target (STUB)  (0xffff7ab0bc00)
0xffff7ab0ccc4  code target (STUB)  (0xffff7ab0c3e0)
0xffff7ab0ccf8  code target (STUB)  (0xffff7ab06820)
0xffff7ab0cd1c  code target (STUB)  (0xffff7ab06260)
0xffff7ab0cd28  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0cd3c  constant pool (size 76)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0xffff7ab0ce00     0  adr xzr, #+0x40 (addr 0xffff7ab0ce40)
0xffff7ab0ce04     4  adr xzr, #+0x360 (addr 0xffff7ab0d164)
0xffff7ab0ce08     8  ldr x16, pc+1736 (addr 0x0000ffff7ab0d4d0)    ;; external reference (store_buffer_top)
0xffff7ab0ce0c    12  ldr x1, [x16]
0xffff7ab0ce10    16  str x0, [x1], #8
0xffff7ab0ce14    20  str x1, [x16]
0xffff7ab0ce18    24  tst x1, #0x1ffff
0xffff7ab0ce1c    28  b.eq #+0x8 (addr 0xffff7ab0ce24)
0xffff7ab0ce20    32  ret
0xffff7ab0ce24    36  sub csp, jssp, #0x8 (8)
0xffff7ab0ce28    40  str lr, [jssp, #-8]!
0xffff7ab0ce2c    44  ldr x17, pc+1708 (addr 0x0000ffff7ab0d4d8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0ce30    48  blr x17
0xffff7ab0ce34    52  ldr lr, [jssp], #8
0xffff7ab0ce38    56  ret
0xffff7ab0ce3c    60  ret
0xffff7ab0ce40    64  sub csp, jssp, #0x10 (16)
0xffff7ab0ce44    68  stp x3, x2, [jssp, #-16]!
0xffff7ab0ce48    72  ldr x1, [x0]
0xffff7ab0ce4c    76  and x16, x1, #0xfffffffffff00000
0xffff7ab0ce50    80  ldr x16, [x16, #8]
0xffff7ab0ce54    84  tst x16, #0x18
0xffff7ab0ce58    88  b.eq #+0x1d8 (addr 0xffff7ab0d030)
0xffff7ab0ce5c    92  and x16, x5, #0xfffffffffff00000
0xffff7ab0ce60    96  ldr x16, [x16, #8]
0xffff7ab0ce64   100  tst x16, #0x18
0xffff7ab0ce68   104  b.ne #+0x1c8 (addr 0xffff7ab0d030)
0xffff7ab0ce6c   108  and x1, x5, #0xfffffffffff00000
0xffff7ab0ce70   112  ldr x2, [x1, #104]
0xffff7ab0ce74   116  subs x2, x2, #0x1 (1)
0xffff7ab0ce78   120  str x2, [x1, #104]
0xffff7ab0ce7c   124  b.mi #+0xc4 (addr 0xffff7ab0cf40)
0xffff7ab0ce80   128  ubfx x16, x5, #8, #12
0xffff7ab0ce84   132  and x1, x5, #0xfffffffffff00000
0xffff7ab0ce88   136  add x1, x1, x16, lsl #2
0xffff7ab0ce8c   140  ubfx x2, x5, #3, #5
0xffff7ab0ce90   144  ldr x1, [x1, #360]
0xffff7ab0ce94   148  lsr x1, x1, x2
0xffff7ab0ce98   152  tbz w1, #0, #+0x8 (addr 0xffff7ab0cea0)
0xffff7ab0ce9c   156  tbnz w1, #1, #+0x3c (addr 0xffff7ab0ced8)
0xffff7ab0cea0   160  ldp x3, x2, [jssp], #16
0xffff7ab0cea4   164  ldr x16, pc+1596 (addr 0x0000ffff7ab0d4e0)    ;; external reference (store_buffer_top)
0xffff7ab0cea8   168  ldr x1, [x16]
0xffff7ab0ceac   172  str x0, [x1], #8
0xffff7ab0ceb0   176  str x1, [x16]
0xffff7ab0ceb4   180  tst x1, #0x1ffff
0xffff7ab0ceb8   184  b.eq #+0x8 (addr 0xffff7ab0cec0)
0xffff7ab0cebc   188  ret
0xffff7ab0cec0   192  sub csp, jssp, #0x8 (8)
0xffff7ab0cec4   196  str lr, [jssp, #-8]!
0xffff7ab0cec8   200  ldr x17, pc+1568 (addr 0x0000ffff7ab0d4e8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0cecc   204  blr x17
0xffff7ab0ced0   208  ldr lr, [jssp], #8
0xffff7ab0ced4   212  ret
0xffff7ab0ced8   216  ldr x1, [x0]
0xffff7ab0cedc   220  sub csp, jssp, #0x10 (16)
0xffff7ab0cee0   224  stp x5, x0, [jssp, #-16]!
0xffff7ab0cee4   228  ubfx x16, x1, #8, #12
0xffff7ab0cee8   232  and x2, x1, #0xfffffffffff00000
0xffff7ab0ceec   236  add x2, x2, x16, lsl #2
0xffff7ab0cef0   240  ubfx x5, x1, #3, #5
0xffff7ab0cef4   244  ldr x0, [x2, #360]
0xffff7ab0cef8   248  lsr x0, x0, x5
0xffff7ab0cefc   252  tbz w0, #0, #+0x40 (addr 0xffff7ab0cf3c)
0xffff7ab0cf00   256  ldp x5, x0, [jssp], #16
0xffff7ab0cf04   260  ldp x3, x2, [jssp], #16
0xffff7ab0cf08   264  ldr x16, pc+1512 (addr 0x0000ffff7ab0d4f0)    ;; external reference (store_buffer_top)
0xffff7ab0cf0c   268  ldr x1, [x16]
0xffff7ab0cf10   272  str x0, [x1], #8
0xffff7ab0cf14   276  str x1, [x16]
0xffff7ab0cf18   280  tst x1, #0x1ffff
0xffff7ab0cf1c   284  b.eq #+0x8 (addr 0xffff7ab0cf24)
0xffff7ab0cf20   288  ret
0xffff7ab0cf24   292  sub csp, jssp, #0x8 (8)
0xffff7ab0cf28   296  str lr, [jssp, #-8]!
0xffff7ab0cf2c   300  ldr x17, pc+1484 (addr 0x0000ffff7ab0d4f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0cf30   304  blr x17
0xffff7ab0cf34   308  ldr lr, [jssp], #8
0xffff7ab0cf38   312  ret
0xffff7ab0cf3c   316  ldp x5, x0, [jssp], #16
0xffff7ab0cf40   320  sub csp, jssp, #0x78 (120)
0xffff7ab0cf44   324  stp x14, x15, [jssp, #-32]!
0xffff7ab0cf48   328  stp x18, lr, [jssp, #16]
0xffff7ab0cf4c   332  stp x10, x11, [jssp, #-32]!
0xffff7ab0cf50   336  stp x12, x13, [jssp, #16]
0xffff7ab0cf54   340  stp x6, x7, [jssp, #-32]!
0xffff7ab0cf58   344  stp x8, x9, [jssp, #16]
0xffff7ab0cf5c   348  stp x0, x4, [jssp, #-24]!
0xffff7ab0cf60   352  str x5, [jssp, #16]
0xffff7ab0cf64   356  sub csp, jssp, #0xb0 (176)
0xffff7ab0cf68   360  stp d26, d27, [jssp, #-32]!
0xffff7ab0cf6c   364  stp d28, d29, [jssp, #16]
0xffff7ab0cf70   368  stp d22, d23, [jssp, #-32]!
0xffff7ab0cf74   372  stp d24, d25, [jssp, #16]
0xffff7ab0cf78   376  stp d18, d19, [jssp, #-32]!
0xffff7ab0cf7c   380  stp d20, d21, [jssp, #16]
0xffff7ab0cf80   384  stp d6, d7, [jssp, #-32]!
0xffff7ab0cf84   388  stp d16, d17, [jssp, #16]
0xffff7ab0cf88   392  stp d2, d3, [jssp, #-32]!
0xffff7ab0cf8c   396  stp d4, d5, [jssp, #16]
0xffff7ab0cf90   400  stp d0, d1, [jssp, #-16]!
0xffff7ab0cf94   404  mov x1, x0
0xffff7ab0cf98   408  mov x0, x5
0xffff7ab0cf9c   412  ldr x2, pc+1380 (addr 0x0000ffff7ab0d500)    ;; external reference (isolate)
0xffff7ab0cfa0   416  ldr x16, pc+1384 (addr 0x0000ffff7ab0d508)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0cfa4   420  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0cfa8   424  blr x16
0xffff7ab0cfac   428  ldp d2, d3, [jssp, #16]
0xffff7ab0cfb0   432  ldp d0, d1, [jssp], #32
0xffff7ab0cfb4   436  ldp d6, d7, [jssp, #16]
0xffff7ab0cfb8   440  ldp d4, d5, [jssp], #32
0xffff7ab0cfbc   444  ldp d18, d19, [jssp, #16]
0xffff7ab0cfc0   448  ldp d16, d17, [jssp], #32
0xffff7ab0cfc4   452  ldp d22, d23, [jssp, #16]
0xffff7ab0cfc8   456  ldp d20, d21, [jssp], #32
0xffff7ab0cfcc   460  ldp d26, d27, [jssp, #16]
0xffff7ab0cfd0   464  ldp d24, d25, [jssp], #32
0xffff7ab0cfd4   468  ldp d28, d29, [jssp], #16
0xffff7ab0cfd8   472  ldp x5, x6, [jssp, #16]
0xffff7ab0cfdc   476  ldp x0, x4, [jssp], #32
0xffff7ab0cfe0   480  ldp x9, x10, [jssp, #16]
0xffff7ab0cfe4   484  ldp x7, x8, [jssp], #32
0xffff7ab0cfe8   488  ldp x13, x14, [jssp, #16]
0xffff7ab0cfec   492  ldp x11, x12, [jssp], #32
0xffff7ab0cff0   496  ldr lr, [jssp, #16]
0xffff7ab0cff4   500  ldp x15, x18, [jssp], #24
0xffff7ab0cff8   504  ldp x3, x2, [jssp], #16
0xffff7ab0cffc   508  ldr x16, pc+1300 (addr 0x0000ffff7ab0d510)    ;; external reference (store_buffer_top)
0xffff7ab0d000   512  ldr x1, [x16]
0xffff7ab0d004   516  str x0, [x1], #8
0xffff7ab0d008   520  str x1, [x16]
0xffff7ab0d00c   524  tst x1, #0x1ffff
0xffff7ab0d010   528  b.eq #+0x8 (addr 0xffff7ab0d018)
0xffff7ab0d014   532  ret
0xffff7ab0d018   536  sub csp, jssp, #0x8 (8)
0xffff7ab0d01c   540  str lr, [jssp, #-8]!
0xffff7ab0d020   544  ldr x17, pc+1272 (addr 0x0000ffff7ab0d518)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0d024   548  blr x17
0xffff7ab0d028   552  ldr lr, [jssp], #8
0xffff7ab0d02c   556  ret
0xffff7ab0d030   560  and x1, x5, #0xfffffffffff00000
0xffff7ab0d034   564  ldr x2, [x1, #104]
0xffff7ab0d038   568  subs x2, x2, #0x1 (1)
0xffff7ab0d03c   572  str x2, [x1, #104]
0xffff7ab0d040   576  b.mi #+0x64 (addr 0xffff7ab0d0a4)
0xffff7ab0d044   580  ubfx x16, x5, #8, #12
0xffff7ab0d048   584  and x1, x5, #0xfffffffffff00000
0xffff7ab0d04c   588  add x1, x1, x16, lsl #2
0xffff7ab0d050   592  ubfx x2, x5, #3, #5
0xffff7ab0d054   596  ldr x1, [x1, #360]
0xffff7ab0d058   600  lsr x1, x1, x2
0xffff7ab0d05c   604  tbz w1, #0, #+0x8 (addr 0xffff7ab0d064)
0xffff7ab0d060   608  tbnz w1, #1, #+0xc (addr 0xffff7ab0d06c)
0xffff7ab0d064   612  ldp x3, x2, [jssp], #16
0xffff7ab0d068   616  ret
0xffff7ab0d06c   620  ldr x1, [x0]
0xffff7ab0d070   624  sub csp, jssp, #0x10 (16)
0xffff7ab0d074   628  stp x5, x0, [jssp, #-16]!
0xffff7ab0d078   632  ubfx x16, x1, #8, #12
0xffff7ab0d07c   636  and x2, x1, #0xfffffffffff00000
0xffff7ab0d080   640  add x2, x2, x16, lsl #2
0xffff7ab0d084   644  ubfx x5, x1, #3, #5
0xffff7ab0d088   648  ldr x0, [x2, #360]
0xffff7ab0d08c   652  lsr x0, x0, x5
0xffff7ab0d090   656  tbz w0, #0, #+0x10 (addr 0xffff7ab0d0a0)
0xffff7ab0d094   660  ldp x5, x0, [jssp], #16
0xffff7ab0d098   664  ldp x3, x2, [jssp], #16
0xffff7ab0d09c   668  ret
0xffff7ab0d0a0   672  ldp x5, x0, [jssp], #16
0xffff7ab0d0a4   676  sub csp, jssp, #0x78 (120)
0xffff7ab0d0a8   680  stp x14, x15, [jssp, #-32]!
0xffff7ab0d0ac   684  stp x18, lr, [jssp, #16]
0xffff7ab0d0b0   688  stp x10, x11, [jssp, #-32]!
0xffff7ab0d0b4   692  stp x12, x13, [jssp, #16]
0xffff7ab0d0b8   696  stp x6, x7, [jssp, #-32]!
0xffff7ab0d0bc   700  stp x8, x9, [jssp, #16]
0xffff7ab0d0c0   704  stp x0, x4, [jssp, #-24]!
0xffff7ab0d0c4   708  str x5, [jssp, #16]
0xffff7ab0d0c8   712  sub csp, jssp, #0xb0 (176)
0xffff7ab0d0cc   716  stp d26, d27, [jssp, #-32]!
0xffff7ab0d0d0   720  stp d28, d29, [jssp, #16]
0xffff7ab0d0d4   724  stp d22, d23, [jssp, #-32]!
0xffff7ab0d0d8   728  stp d24, d25, [jssp, #16]
0xffff7ab0d0dc   732  stp d18, d19, [jssp, #-32]!
0xffff7ab0d0e0   736  stp d20, d21, [jssp, #16]
0xffff7ab0d0e4   740  stp d6, d7, [jssp, #-32]!
0xffff7ab0d0e8   744  stp d16, d17, [jssp, #16]
0xffff7ab0d0ec   748  stp d2, d3, [jssp, #-32]!
0xffff7ab0d0f0   752  stp d4, d5, [jssp, #16]
0xffff7ab0d0f4   756  stp d0, d1, [jssp, #-16]!
0xffff7ab0d0f8   760  mov x1, x0
0xffff7ab0d0fc   764  mov x0, x5
0xffff7ab0d100   768  ldr x2, pc+1056 (addr 0x0000ffff7ab0d520)    ;; external reference (isolate)
0xffff7ab0d104   772  ldr x16, pc+1060 (addr 0x0000ffff7ab0d528)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0d108   776  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0d10c   780  blr x16
0xffff7ab0d110   784  ldp d2, d3, [jssp, #16]
0xffff7ab0d114   788  ldp d0, d1, [jssp], #32
0xffff7ab0d118   792  ldp d6, d7, [jssp, #16]
0xffff7ab0d11c   796  ldp d4, d5, [jssp], #32
0xffff7ab0d120   800  ldp d18, d19, [jssp, #16]
0xffff7ab0d124   804  ldp d16, d17, [jssp], #32
0xffff7ab0d128   808  ldp d22, d23, [jssp, #16]
0xffff7ab0d12c   812  ldp d20, d21, [jssp], #32
0xffff7ab0d130   816  ldp d26, d27, [jssp, #16]
0xffff7ab0d134   820  ldp d24, d25, [jssp], #32
0xffff7ab0d138   824  ldp d28, d29, [jssp], #16
0xffff7ab0d13c   828  ldp x5, x6, [jssp, #16]
0xffff7ab0d140   832  ldp x0, x4, [jssp], #32
0xffff7ab0d144   836  ldp x9, x10, [jssp, #16]
0xffff7ab0d148   840  ldp x7, x8, [jssp], #32
0xffff7ab0d14c   844  ldp x13, x14, [jssp, #16]
0xffff7ab0d150   848  ldp x11, x12, [jssp], #32
0xffff7ab0d154   852  ldr lr, [jssp, #16]
0xffff7ab0d158   856  ldp x15, x18, [jssp], #24
0xffff7ab0d15c   860  ldp x3, x2, [jssp], #16
0xffff7ab0d160   864  ret
0xffff7ab0d164   868  sub csp, jssp, #0x10 (16)
0xffff7ab0d168   872  stp x3, x2, [jssp, #-16]!
0xffff7ab0d16c   876  ldr x1, [x0]
0xffff7ab0d170   880  and x16, x1, #0xfffffffffff00000
0xffff7ab0d174   884  ldr x16, [x16, #8]
0xffff7ab0d178   888  tst x16, #0x18
0xffff7ab0d17c   892  b.eq #+0x1f8 (addr 0xffff7ab0d374)
0xffff7ab0d180   896  and x16, x5, #0xfffffffffff00000
0xffff7ab0d184   900  ldr x16, [x16, #8]
0xffff7ab0d188   904  tst x16, #0x18
0xffff7ab0d18c   908  b.ne #+0x1e8 (addr 0xffff7ab0d374)
0xffff7ab0d190   912  and x1, x5, #0xfffffffffff00000
0xffff7ab0d194   916  ldr x2, [x1, #104]
0xffff7ab0d198   920  subs x2, x2, #0x1 (1)
0xffff7ab0d19c   924  str x2, [x1, #104]
0xffff7ab0d1a0   928  b.mi #+0xe4 (addr 0xffff7ab0d284)
0xffff7ab0d1a4   932  ubfx x16, x5, #8, #12
0xffff7ab0d1a8   936  and x1, x5, #0xfffffffffff00000
0xffff7ab0d1ac   940  add x1, x1, x16, lsl #2
0xffff7ab0d1b0   944  ubfx x2, x5, #3, #5
0xffff7ab0d1b4   948  ldr x1, [x1, #360]
0xffff7ab0d1b8   952  lsr x1, x1, x2
0xffff7ab0d1bc   956  tbz w1, #0, #+0x8 (addr 0xffff7ab0d1c4)
0xffff7ab0d1c0   960  tbnz w1, #1, #+0x3c (addr 0xffff7ab0d1fc)
0xffff7ab0d1c4   964  ldp x3, x2, [jssp], #16
0xffff7ab0d1c8   968  ldr x16, pc+872 (addr 0x0000ffff7ab0d530)    ;; external reference (store_buffer_top)
0xffff7ab0d1cc   972  ldr x1, [x16]
0xffff7ab0d1d0   976  str x0, [x1], #8
0xffff7ab0d1d4   980  str x1, [x16]
0xffff7ab0d1d8   984  tst x1, #0x1ffff
0xffff7ab0d1dc   988  b.eq #+0x8 (addr 0xffff7ab0d1e4)
0xffff7ab0d1e0   992  ret
0xffff7ab0d1e4   996  sub csp, jssp, #0x8 (8)
0xffff7ab0d1e8  1000  str lr, [jssp, #-8]!
0xffff7ab0d1ec  1004  ldr x17, pc+844 (addr 0x0000ffff7ab0d538)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0d1f0  1008  blr x17
0xffff7ab0d1f4  1012  ldr lr, [jssp], #8
0xffff7ab0d1f8  1016  ret
0xffff7ab0d1fc  1020  ldr x1, [x0]
0xffff7ab0d200  1024  and x2, x1, #0xfffffffffff00000
0xffff7ab0d204  1028  ldr x2, [x2, #8]
0xffff7ab0d208  1032  tbz w2, #6, #+0x18 (addr 0xffff7ab0d220)
0xffff7ab0d20c  1036  and x2, x5, #0xfffffffffff00000
0xffff7ab0d210  1040  ldr x2, [x2, #8]
0xffff7ab0d214  1044  movz x16, #0x58
0xffff7ab0d218  1048  tst x2, x16
0xffff7ab0d21c  1052  b.eq #+0x68 (addr 0xffff7ab0d284)
0xffff7ab0d220  1056  sub csp, jssp, #0x10 (16)
0xffff7ab0d224  1060  stp x5, x0, [jssp, #-16]!
0xffff7ab0d228  1064  ubfx x16, x1, #8, #12
0xffff7ab0d22c  1068  and x2, x1, #0xfffffffffff00000
0xffff7ab0d230  1072  add x2, x2, x16, lsl #2
0xffff7ab0d234  1076  ubfx x5, x1, #3, #5
0xffff7ab0d238  1080  ldr x0, [x2, #360]
0xffff7ab0d23c  1084  lsr x0, x0, x5
0xffff7ab0d240  1088  tbz w0, #0, #+0x40 (addr 0xffff7ab0d280)
0xffff7ab0d244  1092  ldp x5, x0, [jssp], #16
0xffff7ab0d248  1096  ldp x3, x2, [jssp], #16
0xffff7ab0d24c  1100  ldr x16, pc+756 (addr 0x0000ffff7ab0d540)    ;; external reference (store_buffer_top)
0xffff7ab0d250  1104  ldr x1, [x16]
0xffff7ab0d254  1108  str x0, [x1], #8
0xffff7ab0d258  1112  str x1, [x16]
0xffff7ab0d25c  1116  tst x1, #0x1ffff
0xffff7ab0d260  1120  b.eq #+0x8 (addr 0xffff7ab0d268)
0xffff7ab0d264  1124  ret
0xffff7ab0d268  1128  sub csp, jssp, #0x8 (8)
0xffff7ab0d26c  1132  str lr, [jssp, #-8]!
0xffff7ab0d270  1136  ldr x17, pc+728 (addr 0x0000ffff7ab0d548)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0d274  1140  blr x17
0xffff7ab0d278  1144  ldr lr, [jssp], #8
0xffff7ab0d27c  1148  ret
0xffff7ab0d280  1152  ldp x5, x0, [jssp], #16
0xffff7ab0d284  1156  sub csp, jssp, #0x78 (120)
0xffff7ab0d288  1160  stp x14, x15, [jssp, #-32]!
0xffff7ab0d28c  1164  stp x18, lr, [jssp, #16]
0xffff7ab0d290  1168  stp x10, x11, [jssp, #-32]!
0xffff7ab0d294  1172  stp x12, x13, [jssp, #16]
0xffff7ab0d298  1176  stp x6, x7, [jssp, #-32]!
0xffff7ab0d29c  1180  stp x8, x9, [jssp, #16]
0xffff7ab0d2a0  1184  stp x0, x4, [jssp, #-24]!
0xffff7ab0d2a4  1188  str x5, [jssp, #16]
0xffff7ab0d2a8  1192  sub csp, jssp, #0xb0 (176)
0xffff7ab0d2ac  1196  stp d26, d27, [jssp, #-32]!
0xffff7ab0d2b0  1200  stp d28, d29, [jssp, #16]
0xffff7ab0d2b4  1204  stp d22, d23, [jssp, #-32]!
0xffff7ab0d2b8  1208  stp d24, d25, [jssp, #16]
0xffff7ab0d2bc  1212  stp d18, d19, [jssp, #-32]!
0xffff7ab0d2c0  1216  stp d20, d21, [jssp, #16]
0xffff7ab0d2c4  1220  stp d6, d7, [jssp, #-32]!
0xffff7ab0d2c8  1224  stp d16, d17, [jssp, #16]
0xffff7ab0d2cc  1228  stp d2, d3, [jssp, #-32]!
0xffff7ab0d2d0  1232  stp d4, d5, [jssp, #16]
0xffff7ab0d2d4  1236  stp d0, d1, [jssp, #-16]!
0xffff7ab0d2d8  1240  mov x1, x0
0xffff7ab0d2dc  1244  mov x0, x5
0xffff7ab0d2e0  1248  ldr x2, pc+624 (addr 0x0000ffff7ab0d550)    ;; external reference (isolate)
0xffff7ab0d2e4  1252  ldr x16, pc+628 (addr 0x0000ffff7ab0d558)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0d2e8  1256  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0d2ec  1260  blr x16
0xffff7ab0d2f0  1264  ldp d2, d3, [jssp, #16]
0xffff7ab0d2f4  1268  ldp d0, d1, [jssp], #32
0xffff7ab0d2f8  1272  ldp d6, d7, [jssp, #16]
0xffff7ab0d2fc  1276  ldp d4, d5, [jssp], #32
0xffff7ab0d300  1280  ldp d18, d19, [jssp, #16]
0xffff7ab0d304  1284  ldp d16, d17, [jssp], #32
0xffff7ab0d308  1288  ldp d22, d23, [jssp, #16]
0xffff7ab0d30c  1292  ldp d20, d21, [jssp], #32
0xffff7ab0d310  1296  ldp d26, d27, [jssp, #16]
0xffff7ab0d314  1300  ldp d24, d25, [jssp], #32
0xffff7ab0d318  1304  ldp d28, d29, [jssp], #16
0xffff7ab0d31c  1308  ldp x5, x6, [jssp, #16]
0xffff7ab0d320  1312  ldp x0, x4, [jssp], #32
0xffff7ab0d324  1316  ldp x9, x10, [jssp, #16]
0xffff7ab0d328  1320  ldp x7, x8, [jssp], #32
0xffff7ab0d32c  1324  ldp x13, x14, [jssp, #16]
0xffff7ab0d330  1328  ldp x11, x12, [jssp], #32
0xffff7ab0d334  1332  ldr lr, [jssp, #16]
0xffff7ab0d338  1336  ldp x15, x18, [jssp], #24
0xffff7ab0d33c  1340  ldp x3, x2, [jssp], #16
0xffff7ab0d340  1344  ldr x16, pc+544 (addr 0x0000ffff7ab0d560)    ;; external reference (store_buffer_top)
0xffff7ab0d344  1348  ldr x1, [x16]
0xffff7ab0d348  1352  str x0, [x1], #8
0xffff7ab0d34c  1356  str x1, [x16]
0xffff7ab0d350  1360  tst x1, #0x1ffff
0xffff7ab0d354  1364  b.eq #+0x8 (addr 0xffff7ab0d35c)
0xffff7ab0d358  1368  ret
0xffff7ab0d35c  1372  sub csp, jssp, #0x8 (8)
0xffff7ab0d360  1376  str lr, [jssp, #-8]!
0xffff7ab0d364  1380  ldr x17, pc+516 (addr 0x0000ffff7ab0d568)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0d368  1384  blr x17
0xffff7ab0d36c  1388  ldr lr, [jssp], #8
0xffff7ab0d370  1392  ret
0xffff7ab0d374  1396  and x1, x5, #0xfffffffffff00000
0xffff7ab0d378  1400  ldr x2, [x1, #104]
0xffff7ab0d37c  1404  subs x2, x2, #0x1 (1)
0xffff7ab0d380  1408  str x2, [x1, #104]
0xffff7ab0d384  1412  b.mi #+0x84 (addr 0xffff7ab0d408)
0xffff7ab0d388  1416  ubfx x16, x5, #8, #12
0xffff7ab0d38c  1420  and x1, x5, #0xfffffffffff00000
0xffff7ab0d390  1424  add x1, x1, x16, lsl #2
0xffff7ab0d394  1428  ubfx x2, x5, #3, #5
0xffff7ab0d398  1432  ldr x1, [x1, #360]
0xffff7ab0d39c  1436  lsr x1, x1, x2
0xffff7ab0d3a0  1440  tbz w1, #0, #+0x8 (addr 0xffff7ab0d3a8)
0xffff7ab0d3a4  1444  tbnz w1, #1, #+0xc (addr 0xffff7ab0d3b0)
0xffff7ab0d3a8  1448  ldp x3, x2, [jssp], #16
0xffff7ab0d3ac  1452  ret
0xffff7ab0d3b0  1456  ldr x1, [x0]
0xffff7ab0d3b4  1460  and x2, x1, #0xfffffffffff00000
0xffff7ab0d3b8  1464  ldr x2, [x2, #8]
0xffff7ab0d3bc  1468  tbz w2, #6, #+0x18 (addr 0xffff7ab0d3d4)
0xffff7ab0d3c0  1472  and x2, x5, #0xfffffffffff00000
0xffff7ab0d3c4  1476  ldr x2, [x2, #8]
0xffff7ab0d3c8  1480  movz x16, #0x58
0xffff7ab0d3cc  1484  tst x2, x16
0xffff7ab0d3d0  1488  b.eq #+0x38 (addr 0xffff7ab0d408)
0xffff7ab0d3d4  1492  sub csp, jssp, #0x10 (16)
0xffff7ab0d3d8  1496  stp x5, x0, [jssp, #-16]!
0xffff7ab0d3dc  1500  ubfx x16, x1, #8, #12
0xffff7ab0d3e0  1504  and x2, x1, #0xfffffffffff00000
0xffff7ab0d3e4  1508  add x2, x2, x16, lsl #2
0xffff7ab0d3e8  1512  ubfx x5, x1, #3, #5
0xffff7ab0d3ec  1516  ldr x0, [x2, #360]
0xffff7ab0d3f0  1520  lsr x0, x0, x5
0xffff7ab0d3f4  1524  tbz w0, #0, #+0x10 (addr 0xffff7ab0d404)
0xffff7ab0d3f8  1528  ldp x5, x0, [jssp], #16
0xffff7ab0d3fc  1532  ldp x3, x2, [jssp], #16
0xffff7ab0d400  1536  ret
0xffff7ab0d404  1540  ldp x5, x0, [jssp], #16
0xffff7ab0d408  1544  sub csp, jssp, #0x78 (120)
0xffff7ab0d40c  1548  stp x14, x15, [jssp, #-32]!
0xffff7ab0d410  1552  stp x18, lr, [jssp, #16]
0xffff7ab0d414  1556  stp x10, x11, [jssp, #-32]!
0xffff7ab0d418  1560  stp x12, x13, [jssp, #16]
0xffff7ab0d41c  1564  stp x6, x7, [jssp, #-32]!
0xffff7ab0d420  1568  stp x8, x9, [jssp, #16]
0xffff7ab0d424  1572  stp x0, x4, [jssp, #-24]!
0xffff7ab0d428  1576  str x5, [jssp, #16]
0xffff7ab0d42c  1580  sub csp, jssp, #0xb0 (176)
0xffff7ab0d430  1584  stp d26, d27, [jssp, #-32]!
0xffff7ab0d434  1588  stp d28, d29, [jssp, #16]
0xffff7ab0d438  1592  stp d22, d23, [jssp, #-32]!
0xffff7ab0d43c  1596  stp d24, d25, [jssp, #16]
0xffff7ab0d440  1600  stp d18, d19, [jssp, #-32]!
0xffff7ab0d444  1604  stp d20, d21, [jssp, #16]
0xffff7ab0d448  1608  stp d6, d7, [jssp, #-32]!
0xffff7ab0d44c  1612  stp d16, d17, [jssp, #16]
0xffff7ab0d450  1616  stp d2, d3, [jssp, #-32]!
0xffff7ab0d454  1620  stp d4, d5, [jssp, #16]
0xffff7ab0d458  1624  stp d0, d1, [jssp, #-16]!
0xffff7ab0d45c  1628  mov x1, x0
0xffff7ab0d460  1632  mov x0, x5
0xffff7ab0d464  1636  ldr x2, pc+268 (addr 0x0000ffff7ab0d570)    ;; external reference (isolate)
0xffff7ab0d468  1640  ldr x16, pc+272 (addr 0x0000ffff7ab0d578)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0d46c  1644  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0d470  1648  blr x16
0xffff7ab0d474  1652  ldp d2, d3, [jssp, #16]
0xffff7ab0d478  1656  ldp d0, d1, [jssp], #32
0xffff7ab0d47c  1660  ldp d6, d7, [jssp, #16]
0xffff7ab0d480  1664  ldp d4, d5, [jssp], #32
0xffff7ab0d484  1668  ldp d18, d19, [jssp, #16]
0xffff7ab0d488  1672  ldp d16, d17, [jssp], #32
0xffff7ab0d48c  1676  ldp d22, d23, [jssp, #16]
0xffff7ab0d490  1680  ldp d20, d21, [jssp], #32
0xffff7ab0d494  1684  ldp d26, d27, [jssp, #16]
0xffff7ab0d498  1688  ldp d24, d25, [jssp], #32
0xffff7ab0d49c  1692  ldp d28, d29, [jssp], #16
0xffff7ab0d4a0  1696  ldp x5, x6, [jssp, #16]
0xffff7ab0d4a4  1700  ldp x0, x4, [jssp], #32
0xffff7ab0d4a8  1704  ldp x9, x10, [jssp, #16]
0xffff7ab0d4ac  1708  ldp x7, x8, [jssp], #32
0xffff7ab0d4b0  1712  ldp x13, x14, [jssp, #16]
0xffff7ab0d4b4  1716  ldp x11, x12, [jssp], #32
0xffff7ab0d4b8  1720  ldr lr, [jssp, #16]
0xffff7ab0d4bc  1724  ldp x15, x18, [jssp], #24
0xffff7ab0d4c0  1728  ldp x3, x2, [jssp], #16
0xffff7ab0d4c4  1732  ret
0xffff7ab0d4c8  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab0d4cc  1740  d63f03e0       constant
0xffff7ab0d4d0  1744  09abe8c0       constant
0xffff7ab0d4d4  1748  00000000       constant
0xffff7ab0d4d8  1752  7ab065a0       constant
0xffff7ab0d4dc  1756  0000ffff       constant
0xffff7ab0d4e0  1760  09abe8c0       constant
0xffff7ab0d4e4  1764  00000000       constant
0xffff7ab0d4e8  1768  7ab065a0       constant
0xffff7ab0d4ec  1772  0000ffff       constant
0xffff7ab0d4f0  1776  09abe8c0       constant
0xffff7ab0d4f4  1780  00000000       constant
0xffff7ab0d4f8  1784  7ab065a0       constant
0xffff7ab0d4fc  1788  0000ffff       constant
0xffff7ab0d500  1792  09abd2d0       constant
0xffff7ab0d504  1796  00000000       constant
0xffff7ab0d508  1800  00c2d958       constant
0xffff7ab0d50c  1804  00000000       constant
0xffff7ab0d510  1808  09abe8c0       constant
0xffff7ab0d514  1812  00000000       constant
0xffff7ab0d518  1816  7ab065a0       constant
0xffff7ab0d51c  1820  0000ffff       constant
0xffff7ab0d520  1824  09abd2d0       constant
0xffff7ab0d524  1828  00000000       constant
0xffff7ab0d528  1832  00c2d958       constant
0xffff7ab0d52c  1836  00000000       constant
0xffff7ab0d530  1840  09abe8c0       constant
0xffff7ab0d534  1844  00000000       constant
0xffff7ab0d538  1848  7ab065a0       constant
0xffff7ab0d53c  1852  0000ffff       constant
0xffff7ab0d540  1856  09abe8c0       constant
0xffff7ab0d544  1860  00000000       constant
0xffff7ab0d548  1864  7ab065a0       constant
0xffff7ab0d54c  1868  0000ffff       constant
0xffff7ab0d550  1872  09abd2d0       constant
0xffff7ab0d554  1876  00000000       constant
0xffff7ab0d558  1880  00c2d958       constant
0xffff7ab0d55c  1884  00000000       constant
0xffff7ab0d560  1888  09abe8c0       constant
0xffff7ab0d564  1892  00000000       constant
0xffff7ab0d568  1896  7ab065a0       constant
0xffff7ab0d56c  1900  0000ffff       constant
0xffff7ab0d570  1904  09abd2d0       constant
0xffff7ab0d574  1908  00000000       constant
0xffff7ab0d578  1912  00c2d958       constant
0xffff7ab0d57c  1916  00000000       constant


RelocInfo (size = 65)
0xffff7ab0ce08  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0ce2c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0cea4  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0cec8  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0cf08  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0cf2c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0cf9c  external reference (isolate)  (0x9abd2d0)
0xffff7ab0cfa0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0cffc  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0d020  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0d100  external reference (isolate)  (0x9abd2d0)
0xffff7ab0d104  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0d1c8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0d1ec  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0d24c  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0d270  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0d2e0  external reference (isolate)  (0x9abd2d0)
0xffff7ab0d2e4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0d340  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0d364  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0d464  external reference (isolate)  (0x9abd2d0)
0xffff7ab0d468  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0d4c8  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1904)
0xffff7ab0d5e0     0  adr xzr, #+0x40 (addr 0xffff7ab0d620)
0xffff7ab0d5e4     4  adr xzr, #+0x358 (addr 0xffff7ab0d93c)
0xffff7ab0d5e8     8  ldr x16, pc+1720 (addr 0x0000ffff7ab0dca0)    ;; external reference (store_buffer_top)
0xffff7ab0d5ec    12  ldr x5, [x16]
0xffff7ab0d5f0    16  str x1, [x5], #8
0xffff7ab0d5f4    20  str x5, [x16]
0xffff7ab0d5f8    24  tst x5, #0x1ffff
0xffff7ab0d5fc    28  b.eq #+0x8 (addr 0xffff7ab0d604)
0xffff7ab0d600    32  ret
0xffff7ab0d604    36  sub csp, jssp, #0x8 (8)
0xffff7ab0d608    40  str lr, [jssp, #-8]!
0xffff7ab0d60c    44  ldr x17, pc+1692 (addr 0x0000ffff7ab0dca8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0d610    48  blr x17
0xffff7ab0d614    52  ldr lr, [jssp], #8
0xffff7ab0d618    56  ret
0xffff7ab0d61c    60  ret
0xffff7ab0d620    64  sub csp, jssp, #0x10 (16)
0xffff7ab0d624    68  stp x3, x0, [jssp, #-16]!
0xffff7ab0d628    72  ldr x5, [x1]
0xffff7ab0d62c    76  and x16, x5, #0xfffffffffff00000
0xffff7ab0d630    80  ldr x16, [x16, #8]
0xffff7ab0d634    84  tst x16, #0x18
0xffff7ab0d638    88  b.eq #+0x1d4 (addr 0xffff7ab0d80c)
0xffff7ab0d63c    92  and x16, x2, #0xfffffffffff00000
0xffff7ab0d640    96  ldr x16, [x16, #8]
0xffff7ab0d644   100  tst x16, #0x18
0xffff7ab0d648   104  b.ne #+0x1c4 (addr 0xffff7ab0d80c)
0xffff7ab0d64c   108  and x5, x2, #0xfffffffffff00000
0xffff7ab0d650   112  ldr x0, [x5, #104]
0xffff7ab0d654   116  subs x0, x0, #0x1 (1)
0xffff7ab0d658   120  str x0, [x5, #104]
0xffff7ab0d65c   124  b.mi #+0xc4 (addr 0xffff7ab0d720)
0xffff7ab0d660   128  ubfx x16, x2, #8, #12
0xffff7ab0d664   132  and x5, x2, #0xfffffffffff00000
0xffff7ab0d668   136  add x5, x5, x16, lsl #2
0xffff7ab0d66c   140  ubfx x0, x2, #3, #5
0xffff7ab0d670   144  ldr x5, [x5, #360]
0xffff7ab0d674   148  lsr x5, x5, x0
0xffff7ab0d678   152  tbz w5, #0, #+0x8 (addr 0xffff7ab0d680)
0xffff7ab0d67c   156  tbnz w5, #1, #+0x3c (addr 0xffff7ab0d6b8)
0xffff7ab0d680   160  ldp x3, x0, [jssp], #16
0xffff7ab0d684   164  ldr x16, pc+1580 (addr 0x0000ffff7ab0dcb0)    ;; external reference (store_buffer_top)
0xffff7ab0d688   168  ldr x5, [x16]
0xffff7ab0d68c   172  str x1, [x5], #8
0xffff7ab0d690   176  str x5, [x16]
0xffff7ab0d694   180  tst x5, #0x1ffff
0xffff7ab0d698   184  b.eq #+0x8 (addr 0xffff7ab0d6a0)
0xffff7ab0d69c   188  ret
0xffff7ab0d6a0   192  sub csp, jssp, #0x8 (8)
0xffff7ab0d6a4   196  str lr, [jssp, #-8]!
0xffff7ab0d6a8   200  ldr x17, pc+1552 (addr 0x0000ffff7ab0dcb8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0d6ac   204  blr x17
0xffff7ab0d6b0   208  ldr lr, [jssp], #8
0xffff7ab0d6b4   212  ret
0xffff7ab0d6b8   216  ldr x5, [x1]
0xffff7ab0d6bc   220  sub csp, jssp, #0x10 (16)
0xffff7ab0d6c0   224  stp x2, x1, [jssp, #-16]!
0xffff7ab0d6c4   228  ubfx x16, x5, #8, #12
0xffff7ab0d6c8   232  and x0, x5, #0xfffffffffff00000
0xffff7ab0d6cc   236  add x0, x0, x16, lsl #2
0xffff7ab0d6d0   240  ubfx x2, x5, #3, #5
0xffff7ab0d6d4   244  ldr x1, [x0, #360]
0xffff7ab0d6d8   248  lsr x1, x1, x2
0xffff7ab0d6dc   252  tbz w1, #0, #+0x40 (addr 0xffff7ab0d71c)
0xffff7ab0d6e0   256  ldp x2, x1, [jssp], #16
0xffff7ab0d6e4   260  ldp x3, x0, [jssp], #16
0xffff7ab0d6e8   264  ldr x16, pc+1496 (addr 0x0000ffff7ab0dcc0)    ;; external reference (store_buffer_top)
0xffff7ab0d6ec   268  ldr x5, [x16]
0xffff7ab0d6f0   272  str x1, [x5], #8
0xffff7ab0d6f4   276  str x5, [x16]
0xffff7ab0d6f8   280  tst x5, #0x1ffff
0xffff7ab0d6fc   284  b.eq #+0x8 (addr 0xffff7ab0d704)
0xffff7ab0d700   288  ret
0xffff7ab0d704   292  sub csp, jssp, #0x8 (8)
0xffff7ab0d708   296  str lr, [jssp, #-8]!
0xffff7ab0d70c   300  ldr x17, pc+1468 (addr 0x0000ffff7ab0dcc8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0d710   304  blr x17
0xffff7ab0d714   308  ldr lr, [jssp], #8
0xffff7ab0d718   312  ret
0xffff7ab0d71c   316  ldp x2, x1, [jssp], #16
0xffff7ab0d720   320  sub csp, jssp, #0x78 (120)
0xffff7ab0d724   324  stp x14, x15, [jssp, #-32]!
0xffff7ab0d728   328  stp x18, lr, [jssp, #16]
0xffff7ab0d72c   332  stp x10, x11, [jssp, #-32]!
0xffff7ab0d730   336  stp x12, x13, [jssp, #16]
0xffff7ab0d734   340  stp x6, x7, [jssp, #-32]!
0xffff7ab0d738   344  stp x8, x9, [jssp, #16]
0xffff7ab0d73c   348  stp x1, x2, [jssp, #-24]!
0xffff7ab0d740   352  str x4, [jssp, #16]
0xffff7ab0d744   356  sub csp, jssp, #0xb0 (176)
0xffff7ab0d748   360  stp d26, d27, [jssp, #-32]!
0xffff7ab0d74c   364  stp d28, d29, [jssp, #16]
0xffff7ab0d750   368  stp d22, d23, [jssp, #-32]!
0xffff7ab0d754   372  stp d24, d25, [jssp, #16]
0xffff7ab0d758   376  stp d18, d19, [jssp, #-32]!
0xffff7ab0d75c   380  stp d20, d21, [jssp, #16]
0xffff7ab0d760   384  stp d6, d7, [jssp, #-32]!
0xffff7ab0d764   388  stp d16, d17, [jssp, #16]
0xffff7ab0d768   392  stp d2, d3, [jssp, #-32]!
0xffff7ab0d76c   396  stp d4, d5, [jssp, #16]
0xffff7ab0d770   400  stp d0, d1, [jssp, #-16]!
0xffff7ab0d774   404  mov x0, x2
0xffff7ab0d778   408  ldr x2, pc+1368 (addr 0x0000ffff7ab0dcd0)    ;; external reference (isolate)
0xffff7ab0d77c   412  ldr x16, pc+1372 (addr 0x0000ffff7ab0dcd8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0d780   416  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0d784   420  blr x16
0xffff7ab0d788   424  ldp d2, d3, [jssp, #16]
0xffff7ab0d78c   428  ldp d0, d1, [jssp], #32
0xffff7ab0d790   432  ldp d6, d7, [jssp, #16]
0xffff7ab0d794   436  ldp d4, d5, [jssp], #32
0xffff7ab0d798   440  ldp d18, d19, [jssp, #16]
0xffff7ab0d79c   444  ldp d16, d17, [jssp], #32
0xffff7ab0d7a0   448  ldp d22, d23, [jssp, #16]
0xffff7ab0d7a4   452  ldp d20, d21, [jssp], #32
0xffff7ab0d7a8   456  ldp d26, d27, [jssp, #16]
0xffff7ab0d7ac   460  ldp d24, d25, [jssp], #32
0xffff7ab0d7b0   464  ldp d28, d29, [jssp], #16
0xffff7ab0d7b4   468  ldp x4, x6, [jssp, #16]
0xffff7ab0d7b8   472  ldp x1, x2, [jssp], #32
0xffff7ab0d7bc   476  ldp x9, x10, [jssp, #16]
0xffff7ab0d7c0   480  ldp x7, x8, [jssp], #32
0xffff7ab0d7c4   484  ldp x13, x14, [jssp, #16]
0xffff7ab0d7c8   488  ldp x11, x12, [jssp], #32
0xffff7ab0d7cc   492  ldr lr, [jssp, #16]
0xffff7ab0d7d0   496  ldp x15, x18, [jssp], #24
0xffff7ab0d7d4   500  ldp x3, x0, [jssp], #16
0xffff7ab0d7d8   504  ldr x16, pc+1288 (addr 0x0000ffff7ab0dce0)    ;; external reference (store_buffer_top)
0xffff7ab0d7dc   508  ldr x5, [x16]
0xffff7ab0d7e0   512  str x1, [x5], #8
0xffff7ab0d7e4   516  str x5, [x16]
0xffff7ab0d7e8   520  tst x5, #0x1ffff
0xffff7ab0d7ec   524  b.eq #+0x8 (addr 0xffff7ab0d7f4)
0xffff7ab0d7f0   528  ret
0xffff7ab0d7f4   532  sub csp, jssp, #0x8 (8)
0xffff7ab0d7f8   536  str lr, [jssp, #-8]!
0xffff7ab0d7fc   540  ldr x17, pc+1260 (addr 0x0000ffff7ab0dce8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0d800   544  blr x17
0xffff7ab0d804   548  ldr lr, [jssp], #8
0xffff7ab0d808   552  ret
0xffff7ab0d80c   556  and x5, x2, #0xfffffffffff00000
0xffff7ab0d810   560  ldr x0, [x5, #104]
0xffff7ab0d814   564  subs x0, x0, #0x1 (1)
0xffff7ab0d818   568  str x0, [x5, #104]
0xffff7ab0d81c   572  b.mi #+0x64 (addr 0xffff7ab0d880)
0xffff7ab0d820   576  ubfx x16, x2, #8, #12
0xffff7ab0d824   580  and x5, x2, #0xfffffffffff00000
0xffff7ab0d828   584  add x5, x5, x16, lsl #2
0xffff7ab0d82c   588  ubfx x0, x2, #3, #5
0xffff7ab0d830   592  ldr x5, [x5, #360]
0xffff7ab0d834   596  lsr x5, x5, x0
0xffff7ab0d838   600  tbz w5, #0, #+0x8 (addr 0xffff7ab0d840)
0xffff7ab0d83c   604  tbnz w5, #1, #+0xc (addr 0xffff7ab0d848)
0xffff7ab0d840   608  ldp x3, x0, [jssp], #16
0xffff7ab0d844   612  ret
0xffff7ab0d848   616  ldr x5, [x1]
0xffff7ab0d84c   620  sub csp, jssp, #0x10 (16)
0xffff7ab0d850   624  stp x2, x1, [jssp, #-16]!
0xffff7ab0d854   628  ubfx x16, x5, #8, #12
0xffff7ab0d858   632  and x0, x5, #0xfffffffffff00000
0xffff7ab0d85c   636  add x0, x0, x16, lsl #2
0xffff7ab0d860   640  ubfx x2, x5, #3, #5
0xffff7ab0d864   644  ldr x1, [x0, #360]
0xffff7ab0d868   648  lsr x1, x1, x2
0xffff7ab0d86c   652  tbz w1, #0, #+0x10 (addr 0xffff7ab0d87c)
0xffff7ab0d870   656  ldp x2, x1, [jssp], #16
0xffff7ab0d874   660  ldp x3, x0, [jssp], #16
0xffff7ab0d878   664  ret
0xffff7ab0d87c   668  ldp x2, x1, [jssp], #16
0xffff7ab0d880   672  sub csp, jssp, #0x78 (120)
0xffff7ab0d884   676  stp x14, x15, [jssp, #-32]!
0xffff7ab0d888   680  stp x18, lr, [jssp, #16]
0xffff7ab0d88c   684  stp x10, x11, [jssp, #-32]!
0xffff7ab0d890   688  stp x12, x13, [jssp, #16]
0xffff7ab0d894   692  stp x6, x7, [jssp, #-32]!
0xffff7ab0d898   696  stp x8, x9, [jssp, #16]
0xffff7ab0d89c   700  stp x1, x2, [jssp, #-24]!
0xffff7ab0d8a0   704  str x4, [jssp, #16]
0xffff7ab0d8a4   708  sub csp, jssp, #0xb0 (176)
0xffff7ab0d8a8   712  stp d26, d27, [jssp, #-32]!
0xffff7ab0d8ac   716  stp d28, d29, [jssp, #16]
0xffff7ab0d8b0   720  stp d22, d23, [jssp, #-32]!
0xffff7ab0d8b4   724  stp d24, d25, [jssp, #16]
0xffff7ab0d8b8   728  stp d18, d19, [jssp, #-32]!
0xffff7ab0d8bc   732  stp d20, d21, [jssp, #16]
0xffff7ab0d8c0   736  stp d6, d7, [jssp, #-32]!
0xffff7ab0d8c4   740  stp d16, d17, [jssp, #16]
0xffff7ab0d8c8   744  stp d2, d3, [jssp, #-32]!
0xffff7ab0d8cc   748  stp d4, d5, [jssp, #16]
0xffff7ab0d8d0   752  stp d0, d1, [jssp, #-16]!
0xffff7ab0d8d4   756  mov x0, x2
0xffff7ab0d8d8   760  ldr x2, pc+1048 (addr 0x0000ffff7ab0dcf0)    ;; external reference (isolate)
0xffff7ab0d8dc   764  ldr x16, pc+1052 (addr 0x0000ffff7ab0dcf8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0d8e0   768  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0d8e4   772  blr x16
0xffff7ab0d8e8   776  ldp d2, d3, [jssp, #16]
0xffff7ab0d8ec   780  ldp d0, d1, [jssp], #32
0xffff7ab0d8f0   784  ldp d6, d7, [jssp, #16]
0xffff7ab0d8f4   788  ldp d4, d5, [jssp], #32
0xffff7ab0d8f8   792  ldp d18, d19, [jssp, #16]
0xffff7ab0d8fc   796  ldp d16, d17, [jssp], #32
0xffff7ab0d900   800  ldp d22, d23, [jssp, #16]
0xffff7ab0d904   804  ldp d20, d21, [jssp], #32
0xffff7ab0d908   808  ldp d26, d27, [jssp, #16]
0xffff7ab0d90c   812  ldp d24, d25, [jssp], #32
0xffff7ab0d910   816  ldp d28, d29, [jssp], #16
0xffff7ab0d914   820  ldp x4, x6, [jssp, #16]
0xffff7ab0d918   824  ldp x1, x2, [jssp], #32
0xffff7ab0d91c   828  ldp x9, x10, [jssp, #16]
0xffff7ab0d920   832  ldp x7, x8, [jssp], #32
0xffff7ab0d924   836  ldp x13, x14, [jssp, #16]
0xffff7ab0d928   840  ldp x11, x12, [jssp], #32
0xffff7ab0d92c   844  ldr lr, [jssp, #16]
0xffff7ab0d930   848  ldp x15, x18, [jssp], #24
0xffff7ab0d934   852  ldp x3, x0, [jssp], #16
0xffff7ab0d938   856  ret
0xffff7ab0d93c   860  sub csp, jssp, #0x10 (16)
0xffff7ab0d940   864  stp x3, x0, [jssp, #-16]!
0xffff7ab0d944   868  ldr x5, [x1]
0xffff7ab0d948   872  and x16, x5, #0xfffffffffff00000
0xffff7ab0d94c   876  ldr x16, [x16, #8]
0xffff7ab0d950   880  tst x16, #0x18
0xffff7ab0d954   884  b.eq #+0x1f4 (addr 0xffff7ab0db48)
0xffff7ab0d958   888  and x16, x2, #0xfffffffffff00000
0xffff7ab0d95c   892  ldr x16, [x16, #8]
0xffff7ab0d960   896  tst x16, #0x18
0xffff7ab0d964   900  b.ne #+0x1e4 (addr 0xffff7ab0db48)
0xffff7ab0d968   904  and x5, x2, #0xfffffffffff00000
0xffff7ab0d96c   908  ldr x0, [x5, #104]
0xffff7ab0d970   912  subs x0, x0, #0x1 (1)
0xffff7ab0d974   916  str x0, [x5, #104]
0xffff7ab0d978   920  b.mi #+0xe4 (addr 0xffff7ab0da5c)
0xffff7ab0d97c   924  ubfx x16, x2, #8, #12
0xffff7ab0d980   928  and x5, x2, #0xfffffffffff00000
0xffff7ab0d984   932  add x5, x5, x16, lsl #2
0xffff7ab0d988   936  ubfx x0, x2, #3, #5
0xffff7ab0d98c   940  ldr x5, [x5, #360]
0xffff7ab0d990   944  lsr x5, x5, x0
0xffff7ab0d994   948  tbz w5, #0, #+0x8 (addr 0xffff7ab0d99c)
0xffff7ab0d998   952  tbnz w5, #1, #+0x3c (addr 0xffff7ab0d9d4)
0xffff7ab0d99c   956  ldp x3, x0, [jssp], #16
0xffff7ab0d9a0   960  ldr x16, pc+864 (addr 0x0000ffff7ab0dd00)    ;; external reference (store_buffer_top)
0xffff7ab0d9a4   964  ldr x5, [x16]
0xffff7ab0d9a8   968  str x1, [x5], #8
0xffff7ab0d9ac   972  str x5, [x16]
0xffff7ab0d9b0   976  tst x5, #0x1ffff
0xffff7ab0d9b4   980  b.eq #+0x8 (addr 0xffff7ab0d9bc)
0xffff7ab0d9b8   984  ret
0xffff7ab0d9bc   988  sub csp, jssp, #0x8 (8)
0xffff7ab0d9c0   992  str lr, [jssp, #-8]!
0xffff7ab0d9c4   996  ldr x17, pc+836 (addr 0x0000ffff7ab0dd08)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0d9c8  1000  blr x17
0xffff7ab0d9cc  1004  ldr lr, [jssp], #8
0xffff7ab0d9d0  1008  ret
0xffff7ab0d9d4  1012  ldr x5, [x1]
0xffff7ab0d9d8  1016  and x0, x5, #0xfffffffffff00000
0xffff7ab0d9dc  1020  ldr x0, [x0, #8]
0xffff7ab0d9e0  1024  tbz w0, #6, #+0x18 (addr 0xffff7ab0d9f8)
0xffff7ab0d9e4  1028  and x0, x2, #0xfffffffffff00000
0xffff7ab0d9e8  1032  ldr x0, [x0, #8]
0xffff7ab0d9ec  1036  movz x16, #0x58
0xffff7ab0d9f0  1040  tst x0, x16
0xffff7ab0d9f4  1044  b.eq #+0x68 (addr 0xffff7ab0da5c)
0xffff7ab0d9f8  1048  sub csp, jssp, #0x10 (16)
0xffff7ab0d9fc  1052  stp x2, x1, [jssp, #-16]!
0xffff7ab0da00  1056  ubfx x16, x5, #8, #12
0xffff7ab0da04  1060  and x0, x5, #0xfffffffffff00000
0xffff7ab0da08  1064  add x0, x0, x16, lsl #2
0xffff7ab0da0c  1068  ubfx x2, x5, #3, #5
0xffff7ab0da10  1072  ldr x1, [x0, #360]
0xffff7ab0da14  1076  lsr x1, x1, x2
0xffff7ab0da18  1080  tbz w1, #0, #+0x40 (addr 0xffff7ab0da58)
0xffff7ab0da1c  1084  ldp x2, x1, [jssp], #16
0xffff7ab0da20  1088  ldp x3, x0, [jssp], #16
0xffff7ab0da24  1092  ldr x16, pc+748 (addr 0x0000ffff7ab0dd10)    ;; external reference (store_buffer_top)
0xffff7ab0da28  1096  ldr x5, [x16]
0xffff7ab0da2c  1100  str x1, [x5], #8
0xffff7ab0da30  1104  str x5, [x16]
0xffff7ab0da34  1108  tst x5, #0x1ffff
0xffff7ab0da38  1112  b.eq #+0x8 (addr 0xffff7ab0da40)
0xffff7ab0da3c  1116  ret
0xffff7ab0da40  1120  sub csp, jssp, #0x8 (8)
0xffff7ab0da44  1124  str lr, [jssp, #-8]!
0xffff7ab0da48  1128  ldr x17, pc+720 (addr 0x0000ffff7ab0dd18)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0da4c  1132  blr x17
0xffff7ab0da50  1136  ldr lr, [jssp], #8
0xffff7ab0da54  1140  ret
0xffff7ab0da58  1144  ldp x2, x1, [jssp], #16
0xffff7ab0da5c  1148  sub csp, jssp, #0x78 (120)
0xffff7ab0da60  1152  stp x14, x15, [jssp, #-32]!
0xffff7ab0da64  1156  stp x18, lr, [jssp, #16]
0xffff7ab0da68  1160  stp x10, x11, [jssp, #-32]!
0xffff7ab0da6c  1164  stp x12, x13, [jssp, #16]
0xffff7ab0da70  1168  stp x6, x7, [jssp, #-32]!
0xffff7ab0da74  1172  stp x8, x9, [jssp, #16]
0xffff7ab0da78  1176  stp x1, x2, [jssp, #-24]!
0xffff7ab0da7c  1180  str x4, [jssp, #16]
0xffff7ab0da80  1184  sub csp, jssp, #0xb0 (176)
0xffff7ab0da84  1188  stp d26, d27, [jssp, #-32]!
0xffff7ab0da88  1192  stp d28, d29, [jssp, #16]
0xffff7ab0da8c  1196  stp d22, d23, [jssp, #-32]!
0xffff7ab0da90  1200  stp d24, d25, [jssp, #16]
0xffff7ab0da94  1204  stp d18, d19, [jssp, #-32]!
0xffff7ab0da98  1208  stp d20, d21, [jssp, #16]
0xffff7ab0da9c  1212  stp d6, d7, [jssp, #-32]!
0xffff7ab0daa0  1216  stp d16, d17, [jssp, #16]
0xffff7ab0daa4  1220  stp d2, d3, [jssp, #-32]!
0xffff7ab0daa8  1224  stp d4, d5, [jssp, #16]
0xffff7ab0daac  1228  stp d0, d1, [jssp, #-16]!
0xffff7ab0dab0  1232  mov x0, x2
0xffff7ab0dab4  1236  ldr x2, pc+620 (addr 0x0000ffff7ab0dd20)    ;; external reference (isolate)
0xffff7ab0dab8  1240  ldr x16, pc+624 (addr 0x0000ffff7ab0dd28)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0dabc  1244  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0dac0  1248  blr x16
0xffff7ab0dac4  1252  ldp d2, d3, [jssp, #16]
0xffff7ab0dac8  1256  ldp d0, d1, [jssp], #32
0xffff7ab0dacc  1260  ldp d6, d7, [jssp, #16]
0xffff7ab0dad0  1264  ldp d4, d5, [jssp], #32
0xffff7ab0dad4  1268  ldp d18, d19, [jssp, #16]
0xffff7ab0dad8  1272  ldp d16, d17, [jssp], #32
0xffff7ab0dadc  1276  ldp d22, d23, [jssp, #16]
0xffff7ab0dae0  1280  ldp d20, d21, [jssp], #32
0xffff7ab0dae4  1284  ldp d26, d27, [jssp, #16]
0xffff7ab0dae8  1288  ldp d24, d25, [jssp], #32
0xffff7ab0daec  1292  ldp d28, d29, [jssp], #16
0xffff7ab0daf0  1296  ldp x4, x6, [jssp, #16]
0xffff7ab0daf4  1300  ldp x1, x2, [jssp], #32
0xffff7ab0daf8  1304  ldp x9, x10, [jssp, #16]
0xffff7ab0dafc  1308  ldp x7, x8, [jssp], #32
0xffff7ab0db00  1312  ldp x13, x14, [jssp, #16]
0xffff7ab0db04  1316  ldp x11, x12, [jssp], #32
0xffff7ab0db08  1320  ldr lr, [jssp, #16]
0xffff7ab0db0c  1324  ldp x15, x18, [jssp], #24
0xffff7ab0db10  1328  ldp x3, x0, [jssp], #16
0xffff7ab0db14  1332  ldr x16, pc+540 (addr 0x0000ffff7ab0dd30)    ;; external reference (store_buffer_top)
0xffff7ab0db18  1336  ldr x5, [x16]
0xffff7ab0db1c  1340  str x1, [x5], #8
0xffff7ab0db20  1344  str x5, [x16]
0xffff7ab0db24  1348  tst x5, #0x1ffff
0xffff7ab0db28  1352  b.eq #+0x8 (addr 0xffff7ab0db30)
0xffff7ab0db2c  1356  ret
0xffff7ab0db30  1360  sub csp, jssp, #0x8 (8)
0xffff7ab0db34  1364  str lr, [jssp, #-8]!
0xffff7ab0db38  1368  ldr x17, pc+512 (addr 0x0000ffff7ab0dd38)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab0db3c  1372  blr x17
0xffff7ab0db40  1376  ldr lr, [jssp], #8
0xffff7ab0db44  1380  ret
0xffff7ab0db48  1384  and x5, x2, #0xfffffffffff00000
0xffff7ab0db4c  1388  ldr x0, [x5, #104]
0xffff7ab0db50  1392  subs x0, x0, #0x1 (1)
0xffff7ab0db54  1396  str x0, [x5, #104]
0xffff7ab0db58  1400  b.mi #+0x84 (addr 0xffff7ab0dbdc)
0xffff7ab0db5c  1404  ubfx x16, x2, #8, #12
0xffff7ab0db60  1408  and x5, x2, #0xfffffffffff00000
0xffff7ab0db64  1412  add x5, x5, x16, lsl #2
0xffff7ab0db68  1416  ubfx x0, x2, #3, #5
0xffff7ab0db6c  1420  ldr x5, [x5, #360]
0xffff7ab0db70  1424  lsr x5, x5, x0
0xffff7ab0db74  1428  tbz w5, #0, #+0x8 (addr 0xffff7ab0db7c)
0xffff7ab0db78  1432  tbnz w5, #1, #+0xc (addr 0xffff7ab0db84)
0xffff7ab0db7c  1436  ldp x3, x0, [jssp], #16
0xffff7ab0db80  1440  ret
0xffff7ab0db84  1444  ldr x5, [x1]
0xffff7ab0db88  1448  and x0, x5, #0xfffffffffff00000
0xffff7ab0db8c  1452  ldr x0, [x0, #8]
0xffff7ab0db90  1456  tbz w0, #6, #+0x18 (addr 0xffff7ab0dba8)
0xffff7ab0db94  1460  and x0, x2, #0xfffffffffff00000
0xffff7ab0db98  1464  ldr x0, [x0, #8]
0xffff7ab0db9c  1468  movz x16, #0x58
0xffff7ab0dba0  1472  tst x0, x16
0xffff7ab0dba4  1476  b.eq #+0x38 (addr 0xffff7ab0dbdc)
0xffff7ab0dba8  1480  sub csp, jssp, #0x10 (16)
0xffff7ab0dbac  1484  stp x2, x1, [jssp, #-16]!
0xffff7ab0dbb0  1488  ubfx x16, x5, #8, #12
0xffff7ab0dbb4  1492  and x0, x5, #0xfffffffffff00000
0xffff7ab0dbb8  1496  add x0, x0, x16, lsl #2
0xffff7ab0dbbc  1500  ubfx x2, x5, #3, #5
0xffff7ab0dbc0  1504  ldr x1, [x0, #360]
0xffff7ab0dbc4  1508  lsr x1, x1, x2
0xffff7ab0dbc8  1512  tbz w1, #0, #+0x10 (addr 0xffff7ab0dbd8)
0xffff7ab0dbcc  1516  ldp x2, x1, [jssp], #16
0xffff7ab0dbd0  1520  ldp x3, x0, [jssp], #16
0xffff7ab0dbd4  1524  ret
0xffff7ab0dbd8  1528  ldp x2, x1, [jssp], #16
0xffff7ab0dbdc  1532  sub csp, jssp, #0x78 (120)
0xffff7ab0dbe0  1536  stp x14, x15, [jssp, #-32]!
0xffff7ab0dbe4  1540  stp x18, lr, [jssp, #16]
0xffff7ab0dbe8  1544  stp x10, x11, [jssp, #-32]!
0xffff7ab0dbec  1548  stp x12, x13, [jssp, #16]
0xffff7ab0dbf0  1552  stp x6, x7, [jssp, #-32]!
0xffff7ab0dbf4  1556  stp x8, x9, [jssp, #16]
0xffff7ab0dbf8  1560  stp x1, x2, [jssp, #-24]!
0xffff7ab0dbfc  1564  str x4, [jssp, #16]
0xffff7ab0dc00  1568  sub csp, jssp, #0xb0 (176)
0xffff7ab0dc04  1572  stp d26, d27, [jssp, #-32]!
0xffff7ab0dc08  1576  stp d28, d29, [jssp, #16]
0xffff7ab0dc0c  1580  stp d22, d23, [jssp, #-32]!
0xffff7ab0dc10  1584  stp d24, d25, [jssp, #16]
0xffff7ab0dc14  1588  stp d18, d19, [jssp, #-32]!
0xffff7ab0dc18  1592  stp d20, d21, [jssp, #16]
0xffff7ab0dc1c  1596  stp d6, d7, [jssp, #-32]!
0xffff7ab0dc20  1600  stp d16, d17, [jssp, #16]
0xffff7ab0dc24  1604  stp d2, d3, [jssp, #-32]!
0xffff7ab0dc28  1608  stp d4, d5, [jssp, #16]
0xffff7ab0dc2c  1612  stp d0, d1, [jssp, #-16]!
0xffff7ab0dc30  1616  mov x0, x2
0xffff7ab0dc34  1620  ldr x2, pc+268 (addr 0x0000ffff7ab0dd40)    ;; external reference (isolate)
0xffff7ab0dc38  1624  ldr x16, pc+272 (addr 0x0000ffff7ab0dd48)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab0dc3c  1628  and csp, jssp, #0xfffffffffffffff0
0xffff7ab0dc40  1632  blr x16
0xffff7ab0dc44  1636  ldp d2, d3, [jssp, #16]
0xffff7ab0dc48  1640  ldp d0, d1, [jssp], #32
0xffff7ab0dc4c  1644  ldp d6, d7, [jssp, #16]
0xffff7ab0dc50  1648  ldp d4, d5, [jssp], #32
0xffff7ab0dc54  1652  ldp d18, d19, [jssp, #16]
0xffff7ab0dc58  1656  ldp d16, d17, [jssp], #32
0xffff7ab0dc5c  1660  ldp d22, d23, [jssp, #16]
0xffff7ab0dc60  1664  ldp d20, d21, [jssp], #32
0xffff7ab0dc64  1668  ldp d26, d27, [jssp, #16]
0xffff7ab0dc68  1672  ldp d24, d25, [jssp], #32
0xffff7ab0dc6c  1676  ldp d28, d29, [jssp], #16
0xffff7ab0dc70  1680  ldp x4, x6, [jssp, #16]
0xffff7ab0dc74  1684  ldp x1, x2, [jssp], #32
0xffff7ab0dc78  1688  ldp x9, x10, [jssp, #16]
0xffff7ab0dc7c  1692  ldp x7, x8, [jssp], #32
0xffff7ab0dc80  1696  ldp x13, x14, [jssp, #16]
0xffff7ab0dc84  1700  ldp x11, x12, [jssp], #32
0xffff7ab0dc88  1704  ldr lr, [jssp, #16]
0xffff7ab0dc8c  1708  ldp x15, x18, [jssp], #24
0xffff7ab0dc90  1712  ldp x3, x0, [jssp], #16
0xffff7ab0dc94  1716  ret
0xffff7ab0dc98  1720  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab0dc9c  1724  d63f03e0       constant
0xffff7ab0dca0  1728  09abe8c0       constant
0xffff7ab0dca4  1732  00000000       constant
0xffff7ab0dca8  1736  7ab065a0       constant
0xffff7ab0dcac  1740  0000ffff       constant
0xffff7ab0dcb0  1744  09abe8c0       constant
0xffff7ab0dcb4  1748  00000000       constant
0xffff7ab0dcb8  1752  7ab065a0       constant
0xffff7ab0dcbc  1756  0000ffff       constant
0xffff7ab0dcc0  1760  09abe8c0       constant
0xffff7ab0dcc4  1764  00000000       constant
0xffff7ab0dcc8  1768  7ab065a0       constant
0xffff7ab0dccc  1772  0000ffff       constant
0xffff7ab0dcd0  1776  09abd2d0       constant
0xffff7ab0dcd4  1780  00000000       constant
0xffff7ab0dcd8  1784  00c2d958       constant
0xffff7ab0dcdc  1788  00000000       constant
0xffff7ab0dce0  1792  09abe8c0       constant
0xffff7ab0dce4  1796  00000000       constant
0xffff7ab0dce8  1800  7ab065a0       constant
0xffff7ab0dcec  1804  0000ffff       constant
0xffff7ab0dcf0  1808  09abd2d0       constant
0xffff7ab0dcf4  1812  00000000       constant
0xffff7ab0dcf8  1816  00c2d958       constant
0xffff7ab0dcfc  1820  00000000       constant
0xffff7ab0dd00  1824  09abe8c0       constant
0xffff7ab0dd04  1828  00000000       constant
0xffff7ab0dd08  1832  7ab065a0       constant
0xffff7ab0dd0c  1836  0000ffff       constant
0xffff7ab0dd10  1840  09abe8c0       constant
0xffff7ab0dd14  1844  00000000       constant
0xffff7ab0dd18  1848  7ab065a0       constant
0xffff7ab0dd1c  1852  0000ffff       constant
0xffff7ab0dd20  1856  09abd2d0       constant
0xffff7ab0dd24  1860  00000000       constant
0xffff7ab0dd28  1864  00c2d958       constant
0xffff7ab0dd2c  1868  00000000       constant
0xffff7ab0dd30  1872  09abe8c0       constant
0xffff7ab0dd34  1876  00000000       constant
0xffff7ab0dd38  1880  7ab065a0       constant
0xffff7ab0dd3c  1884  0000ffff       constant
0xffff7ab0dd40  1888  09abd2d0       constant
0xffff7ab0dd44  1892  00000000       constant
0xffff7ab0dd48  1896  00c2d958       constant
0xffff7ab0dd4c  1900  00000000       constant


RelocInfo (size = 65)
0xffff7ab0d5e8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0d60c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0d684  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0d6a8  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0d6e8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0d70c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0d778  external reference (isolate)  (0x9abd2d0)
0xffff7ab0d77c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0d7d8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0d7fc  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0d8d8  external reference (isolate)  (0x9abd2d0)
0xffff7ab0d8dc  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0d9a0  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0d9c4  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0da24  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0da48  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0dab4  external reference (isolate)  (0x9abd2d0)
0xffff7ab0dab8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0db14  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab0db38  code target (STUB)  (0xffff7ab065a0)
0xffff7ab0dc34  external reference (isolate)  (0x9abd2d0)
0xffff7ab0dc38  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab0dc98  constant pool (size 184)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = CreateWeakCellStub
compiler = crankshaft
Instructions (size = 357)
0xffff7ab0ddc0     0  movz x4, #0xc840
0xffff7ab0ddc4     4  movk x4, #0x9ae, lsl #16
0xffff7ab0ddc8     8  ldp x5, x0, [x4]
0xffff7ab0ddcc    12  adds x16, x5, #0x18 (24)
0xffff7ab0ddd0    16  ccmp x16, x0, #nzCv, lo
0xffff7ab0ddd4    20  b.hi #+0x98 (addr 0xffff7ab0de6c)
0xffff7ab0ddd8    24  str x16, [x4]
0xffff7ab0dddc    28  orr x5, x5, #0x1
0xffff7ab0dde0    32  ldr x0, pc+248 (addr 0x0000ffff7ab0ded8)    ;; object: 0x4ec058b1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab0dde4    36  stur x0, [x5, #-1]
0xffff7ab0dde8    40  stur x1, [x5, #7]
0xffff7ab0ddec    44  tbz w1, #0, #+0x34 (addr 0xffff7ab0de20)
0xffff7ab0ddf0    48  add x0, x5, #0x7 (7)
0xffff7ab0ddf4    52  and x1, x1, #0xfffffffffff00000
0xffff7ab0ddf8    56  ldr x1, [x1, #8]
0xffff7ab0ddfc    60  tbz w1, #1, #+0x24 (addr 0xffff7ab0de20)
0xffff7ab0de00    64  and x1, x5, #0xfffffffffff00000
0xffff7ab0de04    68  ldr x1, [x1, #8]
0xffff7ab0de08    72  tbz w1, #2, #+0x18 (addr 0xffff7ab0de20)
0xffff7ab0de0c    76  sub csp, jssp, #0x8 (8)
0xffff7ab0de10    80  str lr, [jssp, #-8]!
0xffff7ab0de14    84  ldr x16, pc+204 (addr 0x0000ffff7ab0dee0)    ;; code: STUB, RecordWriteStub, minor: 65573
0xffff7ab0de18    88  blr x16
0xffff7ab0de1c    92  ldr lr, [jssp], #8
0xffff7ab0de20    96  ldr x0, pc+200 (addr 0x0000ffff7ab0dee8)    ;; object: 0x20d04519 <the hole>
0xffff7ab0de24   100  stur x0, [x5, #15]
0xffff7ab0de28   104  asr x0, x3, #32
0xffff7ab0de2c   108  add x1, x2, #0xf (15)
0xffff7ab0de30   112  str x5, [x1, w0, sxtw #3]
0xffff7ab0de34   116  add x1, x1, w0, sxtw #3
0xffff7ab0de38   120  and x5, x5, #0xfffffffffff00000
0xffff7ab0de3c   124  ldr x5, [x5, #8]
0xffff7ab0de40   128  tbz w5, #1, #+0x24 (addr 0xffff7ab0de64)
0xffff7ab0de44   132  and x5, x2, #0xfffffffffff00000
0xffff7ab0de48   136  ldr x5, [x5, #8]
0xffff7ab0de4c   140  tbz w5, #2, #+0x18 (addr 0xffff7ab0de64)
0xffff7ab0de50   144  sub csp, jssp, #0x8 (8)
0xffff7ab0de54   148  str lr, [jssp, #-8]!
0xffff7ab0de58   152  ldr x16, pc+152 (addr 0x0000ffff7ab0def0)    ;; code: STUB, RecordWriteStub, minor: 66722
0xffff7ab0de5c   156  blr x16
0xffff7ab0de60   160  ldr lr, [jssp], #8
0xffff7ab0de64   164  movz x0, #0x0
0xffff7ab0de68   168  ret
0xffff7ab0de6c   172  sub csp, jssp, #0x10 (16)
0xffff7ab0de70   176  stp fp, lr, [jssp, #-16]!
0xffff7ab0de74   180  movz fp, #0xa00000000
0xffff7ab0de78   184  sub csp, jssp, #0x8 (8)
0xffff7ab0de7c   188  str fp, [jssp, #-8]!
0xffff7ab0de80   192  add fp, jssp, #0x8 (8)
0xffff7ab0de84   196  movz x5, #0x0
0xffff7ab0de88   200  mov x16, lr
0xffff7ab0de8c   204  ldr x17, pc+108 (addr 0x0000ffff7ab0def8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0de90   208  blr x17
0xffff7ab0de94   212  movz x0, #0x1800000000
0xffff7ab0de98   216  movz x10, #0x200000000
0xffff7ab0de9c   220  sub csp, jssp, #0x10 (16)
0xffff7ab0dea0   224  stp x10, x0, [jssp, #-16]!
0xffff7ab0dea4   228  movz x0, #0x2
0xffff7ab0dea8   232  movz x1, #0x5b88
0xffff7ab0deac   236  movk x1, #0xe2, lsl #16
0xffff7ab0deb0   240  ldr x16, pc+80 (addr 0x0000ffff7ab0df00)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0deb4   244  blr x16
0xffff7ab0deb8   248  str x0, [jssp, #40]
0xffff7ab0debc   252  ldr x16, pc+76 (addr 0x0000ffff7ab0df08)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0dec0   256  blr x16
0xffff7ab0dec4   260  ldr lr, [jssp, #16]
0xffff7ab0dec8   264  ldp xzr, fp, [jssp], #24
0xffff7ab0decc   268  b #-0xec (addr 0xffff7ab0dde0)
0xffff7ab0ded0   272  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab0ded4   276  d63f03e0       constant
0xffff7ab0ded8   280  4ec058b1       constant
0xffff7ab0dedc   284  00000000       constant
0xffff7ab0dee0   288  7ab0ce00       constant
0xffff7ab0dee4   292  0000ffff       constant
0xffff7ab0dee8   296  20d04519       constant
0xffff7ab0deec   300  00000000       constant
0xffff7ab0def0   304  7ab0d5e0       constant
0xffff7ab0def4   308  0000ffff       constant
0xffff7ab0def8   312  7ab06820       constant
0xffff7ab0defc   316  0000ffff       constant
0xffff7ab0df00   320  7ab06260       constant
0xffff7ab0df04   324  0000ffff       constant
0xffff7ab0df08   328  7ab068e0       constant
0xffff7ab0df0c   332  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0deb8   248  000 | x1 | x2 | x5 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 13)
0xffff7ab0dde0  embedded object  (0x4ec058b1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab0de14  code target (STUB)  (0xffff7ab0ce00)
0xffff7ab0de20  embedded object  (0x20d04519 <the hole>)
0xffff7ab0de58  code target (STUB)  (0xffff7ab0d5e0)
0xffff7ab0de8c  code target (STUB)  (0xffff7ab06820)
0xffff7ab0deb0  code target (STUB)  (0xffff7ab06260)
0xffff7ab0debc  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0ded0  constant pool (size 64)

--- End code ---
kind = STUB
major_key = CreateWeakCellStub
name = CreateWeakCellStub
compiler = crankshaft
Instructions (size = 357)
0xffff7ab0ddc0     0  movz x4, #0xc840
0xffff7ab0ddc4     4  movk x4, #0x9ae, lsl #16
0xffff7ab0ddc8     8  ldp x5, x0, [x4]
0xffff7ab0ddcc    12  adds x16, x5, #0x18 (24)
0xffff7ab0ddd0    16  ccmp x16, x0, #nzCv, lo
0xffff7ab0ddd4    20  b.hi #+0x98 (addr 0xffff7ab0de6c)
0xffff7ab0ddd8    24  str x16, [x4]
0xffff7ab0dddc    28  orr x5, x5, #0x1
0xffff7ab0dde0    32  ldr x0, pc+248 (addr 0x0000ffff7ab0ded8)    ;; object: 0x4ec058b1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab0dde4    36  stur x0, [x5, #-1]
0xffff7ab0dde8    40  stur x1, [x5, #7]
0xffff7ab0ddec    44  tbz w1, #0, #+0x34 (addr 0xffff7ab0de20)
0xffff7ab0ddf0    48  add x0, x5, #0x7 (7)
0xffff7ab0ddf4    52  and x1, x1, #0xfffffffffff00000
0xffff7ab0ddf8    56  ldr x1, [x1, #8]
0xffff7ab0ddfc    60  tbz w1, #1, #+0x24 (addr 0xffff7ab0de20)
0xffff7ab0de00    64  and x1, x5, #0xfffffffffff00000
0xffff7ab0de04    68  ldr x1, [x1, #8]
0xffff7ab0de08    72  tbz w1, #2, #+0x18 (addr 0xffff7ab0de20)
0xffff7ab0de0c    76  sub csp, jssp, #0x8 (8)
0xffff7ab0de10    80  str lr, [jssp, #-8]!
0xffff7ab0de14    84  ldr x16, pc+204 (addr 0x0000ffff7ab0dee0)    ;; code: STUB, RecordWriteStub, minor: 65573
0xffff7ab0de18    88  blr x16
0xffff7ab0de1c    92  ldr lr, [jssp], #8
0xffff7ab0de20    96  ldr x0, pc+200 (addr 0x0000ffff7ab0dee8)    ;; object: 0x20d04519 <the hole>
0xffff7ab0de24   100  stur x0, [x5, #15]
0xffff7ab0de28   104  asr x0, x3, #32
0xffff7ab0de2c   108  add x1, x2, #0xf (15)
0xffff7ab0de30   112  str x5, [x1, w0, sxtw #3]
0xffff7ab0de34   116  add x1, x1, w0, sxtw #3
0xffff7ab0de38   120  and x5, x5, #0xfffffffffff00000
0xffff7ab0de3c   124  ldr x5, [x5, #8]
0xffff7ab0de40   128  tbz w5, #1, #+0x24 (addr 0xffff7ab0de64)
0xffff7ab0de44   132  and x5, x2, #0xfffffffffff00000
0xffff7ab0de48   136  ldr x5, [x5, #8]
0xffff7ab0de4c   140  tbz w5, #2, #+0x18 (addr 0xffff7ab0de64)
0xffff7ab0de50   144  sub csp, jssp, #0x8 (8)
0xffff7ab0de54   148  str lr, [jssp, #-8]!
0xffff7ab0de58   152  ldr x16, pc+152 (addr 0x0000ffff7ab0def0)    ;; code: STUB, RecordWriteStub, minor: 66722
0xffff7ab0de5c   156  blr x16
0xffff7ab0de60   160  ldr lr, [jssp], #8
0xffff7ab0de64   164  movz x0, #0x0
0xffff7ab0de68   168  ret
0xffff7ab0de6c   172  sub csp, jssp, #0x10 (16)
0xffff7ab0de70   176  stp fp, lr, [jssp, #-16]!
0xffff7ab0de74   180  movz fp, #0xa00000000
0xffff7ab0de78   184  sub csp, jssp, #0x8 (8)
0xffff7ab0de7c   188  str fp, [jssp, #-8]!
0xffff7ab0de80   192  add fp, jssp, #0x8 (8)
0xffff7ab0de84   196  movz x5, #0x0
0xffff7ab0de88   200  mov x16, lr
0xffff7ab0de8c   204  ldr x17, pc+108 (addr 0x0000ffff7ab0def8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0de90   208  blr x17
0xffff7ab0de94   212  movz x0, #0x1800000000
0xffff7ab0de98   216  movz x10, #0x200000000
0xffff7ab0de9c   220  sub csp, jssp, #0x10 (16)
0xffff7ab0dea0   224  stp x10, x0, [jssp, #-16]!
0xffff7ab0dea4   228  movz x0, #0x2
0xffff7ab0dea8   232  movz x1, #0x5b88
0xffff7ab0deac   236  movk x1, #0xe2, lsl #16
0xffff7ab0deb0   240  ldr x16, pc+80 (addr 0x0000ffff7ab0df00)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0deb4   244  blr x16
0xffff7ab0deb8   248  str x0, [jssp, #40]
0xffff7ab0debc   252  ldr x16, pc+76 (addr 0x0000ffff7ab0df08)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0dec0   256  blr x16
0xffff7ab0dec4   260  ldr lr, [jssp, #16]
0xffff7ab0dec8   264  ldp xzr, fp, [jssp], #24
0xffff7ab0decc   268  b #-0xec (addr 0xffff7ab0dde0)
0xffff7ab0ded0   272  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab0ded4   276  d63f03e0       constant
0xffff7ab0ded8   280  4ec058b1       constant
0xffff7ab0dedc   284  00000000       constant
0xffff7ab0dee0   288  7ab0ce00       constant
0xffff7ab0dee4   292  0000ffff       constant
0xffff7ab0dee8   296  20d04519       constant
0xffff7ab0deec   300  00000000       constant
0xffff7ab0def0   304  7ab0d5e0       constant
0xffff7ab0def4   308  0000ffff       constant
0xffff7ab0def8   312  7ab06820       constant
0xffff7ab0defc   316  0000ffff       constant
0xffff7ab0df00   320  7ab06260       constant
0xffff7ab0df04   324  0000ffff       constant
0xffff7ab0df08   328  7ab068e0       constant
0xffff7ab0df0c   332  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0deb8   248  000 | x1 | x2 | x5 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 13)
0xffff7ab0dde0  embedded object  (0x4ec058b1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab0de14  code target (STUB)  (0xffff7ab0ce00)
0xffff7ab0de20  embedded object  (0x20d04519 <the hole>)
0xffff7ab0de58  code target (STUB)  (0xffff7ab0d5e0)
0xffff7ab0de8c  code target (STUB)  (0xffff7ab06820)
0xffff7ab0deb0  code target (STUB)  (0xffff7ab06260)
0xffff7ab0debc  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0ded0  constant pool (size 64)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 0
name = BinaryOpICStub(BIT_OR:None*None->None)
compiler = unknown
Instructions (size = 104)
0xffff7ab0dfa0     0  movz x16, #0xc00000000
0xffff7ab0dfa4     4  sub csp, jssp, #0x10 (16)
0xffff7ab0dfa8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0dfac    12  sub csp, jssp, #0x10 (16)
0xffff7ab0dfb0    16  str x16, [jssp, #-8]!
0xffff7ab0dfb4    20  ldr x17, pc+60 (addr 0x0000ffff7ab0dff0)    ;; object: 0xffff7ab0df41 <Code: BINARY_OP_IC>
0xffff7ab0dfb8    24  sub csp, jssp, #0x10 (16)
0xffff7ab0dfbc    28  str x17, [jssp, #-8]!
0xffff7ab0dfc0    32  add fp, jssp, #0x10 (16)
0xffff7ab0dfc4    36  sub csp, jssp, #0x10 (16)
0xffff7ab0dfc8    40  stp x0, x1, [jssp, #-16]!
0xffff7ab0dfcc    44  movz x0, #0x2
0xffff7ab0dfd0    48  ldr x1, pc+40 (addr 0x0000ffff7ab0dff8)    ;; external reference (Runtime::BinaryOpIC_Miss)
0xffff7ab0dfd4    52  ldr x16, pc+44 (addr 0x0000ffff7ab0e000)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab0dfd8    56  blr x16
0xffff7ab0dfdc    60  mov jssp, fp
0xffff7ab0dfe0    64  ldp fp, lr, [jssp], #16
0xffff7ab0dfe4    68  ret
0xffff7ab0dfe8    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0dfec    76  d63f03e0       constant
0xffff7ab0dff0    80  7ab0df41       constant
0xffff7ab0dff4    84  0000ffff       constant
0xffff7ab0dff8    88  00c8e1b8       constant
0xffff7ab0dffc    92  00000000       constant
0xffff7ab0e000    96  7ab06060       constant
0xffff7ab0e004   100  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab0dfb4  embedded object  (0xffff7ab0df41 <Code: BINARY_OP_IC>)
0xffff7ab0dfd0  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0xffff7ab0dfd4  code target (STUB)  (0xffff7ab06060)
0xffff7ab0dfe8  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 1
name = BinaryOpICStub(BIT_XOR:None*None->None)
compiler = unknown
Instructions (size = 104)
0xffff7ab0e080     0  movz x16, #0xc00000000
0xffff7ab0e084     4  sub csp, jssp, #0x10 (16)
0xffff7ab0e088     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0e08c    12  sub csp, jssp, #0x10 (16)
0xffff7ab0e090    16  str x16, [jssp, #-8]!
0xffff7ab0e094    20  ldr x17, pc+60 (addr 0x0000ffff7ab0e0d0)    ;; object: 0xffff7ab0e021 <Code: BINARY_OP_IC>
0xffff7ab0e098    24  sub csp, jssp, #0x10 (16)
0xffff7ab0e09c    28  str x17, [jssp, #-8]!
0xffff7ab0e0a0    32  add fp, jssp, #0x10 (16)
0xffff7ab0e0a4    36  sub csp, jssp, #0x10 (16)
0xffff7ab0e0a8    40  stp x0, x1, [jssp, #-16]!
0xffff7ab0e0ac    44  movz x0, #0x2
0xffff7ab0e0b0    48  ldr x1, pc+40 (addr 0x0000ffff7ab0e0d8)    ;; external reference (Runtime::BinaryOpIC_Miss)
0xffff7ab0e0b4    52  ldr x16, pc+44 (addr 0x0000ffff7ab0e0e0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab0e0b8    56  blr x16
0xffff7ab0e0bc    60  mov jssp, fp
0xffff7ab0e0c0    64  ldp fp, lr, [jssp], #16
0xffff7ab0e0c4    68  ret
0xffff7ab0e0c8    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0e0cc    76  d63f03e0       constant
0xffff7ab0e0d0    80  7ab0e021       constant
0xffff7ab0e0d4    84  0000ffff       constant
0xffff7ab0e0d8    88  00c8e1b8       constant
0xffff7ab0e0dc    92  00000000       constant
0xffff7ab0e0e0    96  7ab06060       constant
0xffff7ab0e0e4   100  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab0e094  embedded object  (0xffff7ab0e021 <Code: BINARY_OP_IC>)
0xffff7ab0e0b0  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0xffff7ab0e0b4  code target (STUB)  (0xffff7ab06060)
0xffff7ab0e0c8  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 2
name = BinaryOpICStub(BIT_AND:None*None->None)
compiler = unknown
Instructions (size = 104)
0xffff7ab0e160     0  movz x16, #0xc00000000
0xffff7ab0e164     4  sub csp, jssp, #0x10 (16)
0xffff7ab0e168     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0e16c    12  sub csp, jssp, #0x10 (16)
0xffff7ab0e170    16  str x16, [jssp, #-8]!
0xffff7ab0e174    20  ldr x17, pc+60 (addr 0x0000ffff7ab0e1b0)    ;; object: 0xffff7ab0e101 <Code: BINARY_OP_IC>
0xffff7ab0e178    24  sub csp, jssp, #0x10 (16)
0xffff7ab0e17c    28  str x17, [jssp, #-8]!
0xffff7ab0e180    32  add fp, jssp, #0x10 (16)
0xffff7ab0e184    36  sub csp, jssp, #0x10 (16)
0xffff7ab0e188    40  stp x0, x1, [jssp, #-16]!
0xffff7ab0e18c    44  movz x0, #0x2
0xffff7ab0e190    48  ldr x1, pc+40 (addr 0x0000ffff7ab0e1b8)    ;; external reference (Runtime::BinaryOpIC_Miss)
0xffff7ab0e194    52  ldr x16, pc+44 (addr 0x0000ffff7ab0e1c0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab0e198    56  blr x16
0xffff7ab0e19c    60  mov jssp, fp
0xffff7ab0e1a0    64  ldp fp, lr, [jssp], #16
0xffff7ab0e1a4    68  ret
0xffff7ab0e1a8    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0e1ac    76  d63f03e0       constant
0xffff7ab0e1b0    80  7ab0e101       constant
0xffff7ab0e1b4    84  0000ffff       constant
0xffff7ab0e1b8    88  00c8e1b8       constant
0xffff7ab0e1bc    92  00000000       constant
0xffff7ab0e1c0    96  7ab06060       constant
0xffff7ab0e1c4   100  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab0e174  embedded object  (0xffff7ab0e101 <Code: BINARY_OP_IC>)
0xffff7ab0e190  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0xffff7ab0e194  code target (STUB)  (0xffff7ab06060)
0xffff7ab0e1a8  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 3
name = BinaryOpICStub(SHL:None*None->None)
compiler = unknown
Instructions (size = 104)
0xffff7ab0e240     0  movz x16, #0xc00000000
0xffff7ab0e244     4  sub csp, jssp, #0x10 (16)
0xffff7ab0e248     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0e24c    12  sub csp, jssp, #0x10 (16)
0xffff7ab0e250    16  str x16, [jssp, #-8]!
0xffff7ab0e254    20  ldr x17, pc+60 (addr 0x0000ffff7ab0e290)    ;; object: 0xffff7ab0e1e1 <Code: BINARY_OP_IC>
0xffff7ab0e258    24  sub csp, jssp, #0x10 (16)
0xffff7ab0e25c    28  str x17, [jssp, #-8]!
0xffff7ab0e260    32  add fp, jssp, #0x10 (16)
0xffff7ab0e264    36  sub csp, jssp, #0x10 (16)
0xffff7ab0e268    40  stp x0, x1, [jssp, #-16]!
0xffff7ab0e26c    44  movz x0, #0x2
0xffff7ab0e270    48  ldr x1, pc+40 (addr 0x0000ffff7ab0e298)    ;; external reference (Runtime::BinaryOpIC_Miss)
0xffff7ab0e274    52  ldr x16, pc+44 (addr 0x0000ffff7ab0e2a0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab0e278    56  blr x16
0xffff7ab0e27c    60  mov jssp, fp
0xffff7ab0e280    64  ldp fp, lr, [jssp], #16
0xffff7ab0e284    68  ret
0xffff7ab0e288    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0e28c    76  d63f03e0       constant
0xffff7ab0e290    80  7ab0e1e1       constant
0xffff7ab0e294    84  0000ffff       constant
0xffff7ab0e298    88  00c8e1b8       constant
0xffff7ab0e29c    92  00000000       constant
0xffff7ab0e2a0    96  7ab06060       constant
0xffff7ab0e2a4   100  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab0e254  embedded object  (0xffff7ab0e1e1 <Code: BINARY_OP_IC>)
0xffff7ab0e270  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0xffff7ab0e274  code target (STUB)  (0xffff7ab06060)
0xffff7ab0e288  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 4
name = BinaryOpICStub(SAR:None*None->None)
compiler = unknown
Instructions (size = 104)
0xffff7ab0e320     0  movz x16, #0xc00000000
0xffff7ab0e324     4  sub csp, jssp, #0x10 (16)
0xffff7ab0e328     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0e32c    12  sub csp, jssp, #0x10 (16)
0xffff7ab0e330    16  str x16, [jssp, #-8]!
0xffff7ab0e334    20  ldr x17, pc+60 (addr 0x0000ffff7ab0e370)    ;; object: 0xffff7ab0e2c1 <Code: BINARY_OP_IC>
0xffff7ab0e338    24  sub csp, jssp, #0x10 (16)
0xffff7ab0e33c    28  str x17, [jssp, #-8]!
0xffff7ab0e340    32  add fp, jssp, #0x10 (16)
0xffff7ab0e344    36  sub csp, jssp, #0x10 (16)
0xffff7ab0e348    40  stp x0, x1, [jssp, #-16]!
0xffff7ab0e34c    44  movz x0, #0x2
0xffff7ab0e350    48  ldr x1, pc+40 (addr 0x0000ffff7ab0e378)    ;; external reference (Runtime::BinaryOpIC_Miss)
0xffff7ab0e354    52  ldr x16, pc+44 (addr 0x0000ffff7ab0e380)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab0e358    56  blr x16
0xffff7ab0e35c    60  mov jssp, fp
0xffff7ab0e360    64  ldp fp, lr, [jssp], #16
0xffff7ab0e364    68  ret
0xffff7ab0e368    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0e36c    76  d63f03e0       constant
0xffff7ab0e370    80  7ab0e2c1       constant
0xffff7ab0e374    84  0000ffff       constant
0xffff7ab0e378    88  00c8e1b8       constant
0xffff7ab0e37c    92  00000000       constant
0xffff7ab0e380    96  7ab06060       constant
0xffff7ab0e384   100  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab0e334  embedded object  (0xffff7ab0e2c1 <Code: BINARY_OP_IC>)
0xffff7ab0e350  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0xffff7ab0e354  code target (STUB)  (0xffff7ab06060)
0xffff7ab0e368  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 5
name = BinaryOpICStub(SHR:None*None->None)
compiler = unknown
Instructions (size = 104)
0xffff7ab0e400     0  movz x16, #0xc00000000
0xffff7ab0e404     4  sub csp, jssp, #0x10 (16)
0xffff7ab0e408     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0e40c    12  sub csp, jssp, #0x10 (16)
0xffff7ab0e410    16  str x16, [jssp, #-8]!
0xffff7ab0e414    20  ldr x17, pc+60 (addr 0x0000ffff7ab0e450)    ;; object: 0xffff7ab0e3a1 <Code: BINARY_OP_IC>
0xffff7ab0e418    24  sub csp, jssp, #0x10 (16)
0xffff7ab0e41c    28  str x17, [jssp, #-8]!
0xffff7ab0e420    32  add fp, jssp, #0x10 (16)
0xffff7ab0e424    36  sub csp, jssp, #0x10 (16)
0xffff7ab0e428    40  stp x0, x1, [jssp, #-16]!
0xffff7ab0e42c    44  movz x0, #0x2
0xffff7ab0e430    48  ldr x1, pc+40 (addr 0x0000ffff7ab0e458)    ;; external reference (Runtime::BinaryOpIC_Miss)
0xffff7ab0e434    52  ldr x16, pc+44 (addr 0x0000ffff7ab0e460)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab0e438    56  blr x16
0xffff7ab0e43c    60  mov jssp, fp
0xffff7ab0e440    64  ldp fp, lr, [jssp], #16
0xffff7ab0e444    68  ret
0xffff7ab0e448    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0e44c    76  d63f03e0       constant
0xffff7ab0e450    80  7ab0e3a1       constant
0xffff7ab0e454    84  0000ffff       constant
0xffff7ab0e458    88  00c8e1b8       constant
0xffff7ab0e45c    92  00000000       constant
0xffff7ab0e460    96  7ab06060       constant
0xffff7ab0e464   100  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab0e414  embedded object  (0xffff7ab0e3a1 <Code: BINARY_OP_IC>)
0xffff7ab0e430  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0xffff7ab0e434  code target (STUB)  (0xffff7ab06060)
0xffff7ab0e448  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 6
name = BinaryOpICStub(ROR:None*None->None)
compiler = unknown
Instructions (size = 104)
0xffff7ab0e4e0     0  movz x16, #0xc00000000
0xffff7ab0e4e4     4  sub csp, jssp, #0x10 (16)
0xffff7ab0e4e8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0e4ec    12  sub csp, jssp, #0x10 (16)
0xffff7ab0e4f0    16  str x16, [jssp, #-8]!
0xffff7ab0e4f4    20  ldr x17, pc+60 (addr 0x0000ffff7ab0e530)    ;; object: 0xffff7ab0e481 <Code: BINARY_OP_IC>
0xffff7ab0e4f8    24  sub csp, jssp, #0x10 (16)
0xffff7ab0e4fc    28  str x17, [jssp, #-8]!
0xffff7ab0e500    32  add fp, jssp, #0x10 (16)
0xffff7ab0e504    36  sub csp, jssp, #0x10 (16)
0xffff7ab0e508    40  stp x0, x1, [jssp, #-16]!
0xffff7ab0e50c    44  movz x0, #0x2
0xffff7ab0e510    48  ldr x1, pc+40 (addr 0x0000ffff7ab0e538)    ;; external reference (Runtime::BinaryOpIC_Miss)
0xffff7ab0e514    52  ldr x16, pc+44 (addr 0x0000ffff7ab0e540)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab0e518    56  blr x16
0xffff7ab0e51c    60  mov jssp, fp
0xffff7ab0e520    64  ldp fp, lr, [jssp], #16
0xffff7ab0e524    68  ret
0xffff7ab0e528    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0e52c    76  d63f03e0       constant
0xffff7ab0e530    80  7ab0e481       constant
0xffff7ab0e534    84  0000ffff       constant
0xffff7ab0e538    88  00c8e1b8       constant
0xffff7ab0e53c    92  00000000       constant
0xffff7ab0e540    96  7ab06060       constant
0xffff7ab0e544   100  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab0e4f4  embedded object  (0xffff7ab0e481 <Code: BINARY_OP_IC>)
0xffff7ab0e510  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0xffff7ab0e514  code target (STUB)  (0xffff7ab06060)
0xffff7ab0e528  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 7
name = BinaryOpICStub(ADD:None*None->None)
compiler = unknown
Instructions (size = 104)
0xffff7ab0e5c0     0  movz x16, #0xc00000000
0xffff7ab0e5c4     4  sub csp, jssp, #0x10 (16)
0xffff7ab0e5c8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0e5cc    12  sub csp, jssp, #0x10 (16)
0xffff7ab0e5d0    16  str x16, [jssp, #-8]!
0xffff7ab0e5d4    20  ldr x17, pc+60 (addr 0x0000ffff7ab0e610)    ;; object: 0xffff7ab0e561 <Code: BINARY_OP_IC>
0xffff7ab0e5d8    24  sub csp, jssp, #0x10 (16)
0xffff7ab0e5dc    28  str x17, [jssp, #-8]!
0xffff7ab0e5e0    32  add fp, jssp, #0x10 (16)
0xffff7ab0e5e4    36  sub csp, jssp, #0x10 (16)
0xffff7ab0e5e8    40  stp x0, x1, [jssp, #-16]!
0xffff7ab0e5ec    44  movz x0, #0x2
0xffff7ab0e5f0    48  ldr x1, pc+40 (addr 0x0000ffff7ab0e618)    ;; external reference (Runtime::BinaryOpIC_Miss)
0xffff7ab0e5f4    52  ldr x16, pc+44 (addr 0x0000ffff7ab0e620)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab0e5f8    56  blr x16
0xffff7ab0e5fc    60  mov jssp, fp
0xffff7ab0e600    64  ldp fp, lr, [jssp], #16
0xffff7ab0e604    68  ret
0xffff7ab0e608    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0e60c    76  d63f03e0       constant
0xffff7ab0e610    80  7ab0e561       constant
0xffff7ab0e614    84  0000ffff       constant
0xffff7ab0e618    88  00c8e1b8       constant
0xffff7ab0e61c    92  00000000       constant
0xffff7ab0e620    96  7ab06060       constant
0xffff7ab0e624   100  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab0e5d4  embedded object  (0xffff7ab0e561 <Code: BINARY_OP_IC>)
0xffff7ab0e5f0  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0xffff7ab0e5f4  code target (STUB)  (0xffff7ab06060)
0xffff7ab0e608  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 8
name = BinaryOpICStub(SUB:None*None->None)
compiler = unknown
Instructions (size = 104)
0xffff7ab0e6a0     0  movz x16, #0xc00000000
0xffff7ab0e6a4     4  sub csp, jssp, #0x10 (16)
0xffff7ab0e6a8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0e6ac    12  sub csp, jssp, #0x10 (16)
0xffff7ab0e6b0    16  str x16, [jssp, #-8]!
0xffff7ab0e6b4    20  ldr x17, pc+60 (addr 0x0000ffff7ab0e6f0)    ;; object: 0xffff7ab0e641 <Code: BINARY_OP_IC>
0xffff7ab0e6b8    24  sub csp, jssp, #0x10 (16)
0xffff7ab0e6bc    28  str x17, [jssp, #-8]!
0xffff7ab0e6c0    32  add fp, jssp, #0x10 (16)
0xffff7ab0e6c4    36  sub csp, jssp, #0x10 (16)
0xffff7ab0e6c8    40  stp x0, x1, [jssp, #-16]!
0xffff7ab0e6cc    44  movz x0, #0x2
0xffff7ab0e6d0    48  ldr x1, pc+40 (addr 0x0000ffff7ab0e6f8)    ;; external reference (Runtime::BinaryOpIC_Miss)
0xffff7ab0e6d4    52  ldr x16, pc+44 (addr 0x0000ffff7ab0e700)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab0e6d8    56  blr x16
0xffff7ab0e6dc    60  mov jssp, fp
0xffff7ab0e6e0    64  ldp fp, lr, [jssp], #16
0xffff7ab0e6e4    68  ret
0xffff7ab0e6e8    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0e6ec    76  d63f03e0       constant
0xffff7ab0e6f0    80  7ab0e641       constant
0xffff7ab0e6f4    84  0000ffff       constant
0xffff7ab0e6f8    88  00c8e1b8       constant
0xffff7ab0e6fc    92  00000000       constant
0xffff7ab0e700    96  7ab06060       constant
0xffff7ab0e704   100  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab0e6b4  embedded object  (0xffff7ab0e641 <Code: BINARY_OP_IC>)
0xffff7ab0e6d0  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0xffff7ab0e6d4  code target (STUB)  (0xffff7ab06060)
0xffff7ab0e6e8  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 9
name = BinaryOpICStub(MUL:None*None->None)
compiler = unknown
Instructions (size = 104)
0xffff7ab0e780     0  movz x16, #0xc00000000
0xffff7ab0e784     4  sub csp, jssp, #0x10 (16)
0xffff7ab0e788     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0e78c    12  sub csp, jssp, #0x10 (16)
0xffff7ab0e790    16  str x16, [jssp, #-8]!
0xffff7ab0e794    20  ldr x17, pc+60 (addr 0x0000ffff7ab0e7d0)    ;; object: 0xffff7ab0e721 <Code: BINARY_OP_IC>
0xffff7ab0e798    24  sub csp, jssp, #0x10 (16)
0xffff7ab0e79c    28  str x17, [jssp, #-8]!
0xffff7ab0e7a0    32  add fp, jssp, #0x10 (16)
0xffff7ab0e7a4    36  sub csp, jssp, #0x10 (16)
0xffff7ab0e7a8    40  stp x0, x1, [jssp, #-16]!
0xffff7ab0e7ac    44  movz x0, #0x2
0xffff7ab0e7b0    48  ldr x1, pc+40 (addr 0x0000ffff7ab0e7d8)    ;; external reference (Runtime::BinaryOpIC_Miss)
0xffff7ab0e7b4    52  ldr x16, pc+44 (addr 0x0000ffff7ab0e7e0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab0e7b8    56  blr x16
0xffff7ab0e7bc    60  mov jssp, fp
0xffff7ab0e7c0    64  ldp fp, lr, [jssp], #16
0xffff7ab0e7c4    68  ret
0xffff7ab0e7c8    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0e7cc    76  d63f03e0       constant
0xffff7ab0e7d0    80  7ab0e721       constant
0xffff7ab0e7d4    84  0000ffff       constant
0xffff7ab0e7d8    88  00c8e1b8       constant
0xffff7ab0e7dc    92  00000000       constant
0xffff7ab0e7e0    96  7ab06060       constant
0xffff7ab0e7e4   100  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab0e794  embedded object  (0xffff7ab0e721 <Code: BINARY_OP_IC>)
0xffff7ab0e7b0  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0xffff7ab0e7b4  code target (STUB)  (0xffff7ab06060)
0xffff7ab0e7c8  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 10
name = BinaryOpICStub(DIV:None*None->None)
compiler = unknown
Instructions (size = 104)
0xffff7ab0e860     0  movz x16, #0xc00000000
0xffff7ab0e864     4  sub csp, jssp, #0x10 (16)
0xffff7ab0e868     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0e86c    12  sub csp, jssp, #0x10 (16)
0xffff7ab0e870    16  str x16, [jssp, #-8]!
0xffff7ab0e874    20  ldr x17, pc+60 (addr 0x0000ffff7ab0e8b0)    ;; object: 0xffff7ab0e801 <Code: BINARY_OP_IC>
0xffff7ab0e878    24  sub csp, jssp, #0x10 (16)
0xffff7ab0e87c    28  str x17, [jssp, #-8]!
0xffff7ab0e880    32  add fp, jssp, #0x10 (16)
0xffff7ab0e884    36  sub csp, jssp, #0x10 (16)
0xffff7ab0e888    40  stp x0, x1, [jssp, #-16]!
0xffff7ab0e88c    44  movz x0, #0x2
0xffff7ab0e890    48  ldr x1, pc+40 (addr 0x0000ffff7ab0e8b8)    ;; external reference (Runtime::BinaryOpIC_Miss)
0xffff7ab0e894    52  ldr x16, pc+44 (addr 0x0000ffff7ab0e8c0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab0e898    56  blr x16
0xffff7ab0e89c    60  mov jssp, fp
0xffff7ab0e8a0    64  ldp fp, lr, [jssp], #16
0xffff7ab0e8a4    68  ret
0xffff7ab0e8a8    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0e8ac    76  d63f03e0       constant
0xffff7ab0e8b0    80  7ab0e801       constant
0xffff7ab0e8b4    84  0000ffff       constant
0xffff7ab0e8b8    88  00c8e1b8       constant
0xffff7ab0e8bc    92  00000000       constant
0xffff7ab0e8c0    96  7ab06060       constant
0xffff7ab0e8c4   100  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab0e874  embedded object  (0xffff7ab0e801 <Code: BINARY_OP_IC>)
0xffff7ab0e890  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0xffff7ab0e894  code target (STUB)  (0xffff7ab06060)
0xffff7ab0e8a8  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 11
name = BinaryOpICStub(MOD:None*None->None)
compiler = unknown
Instructions (size = 104)
0xffff7ab0e940     0  movz x16, #0xc00000000
0xffff7ab0e944     4  sub csp, jssp, #0x10 (16)
0xffff7ab0e948     8  stp fp, lr, [jssp, #-16]!
0xffff7ab0e94c    12  sub csp, jssp, #0x10 (16)
0xffff7ab0e950    16  str x16, [jssp, #-8]!
0xffff7ab0e954    20  ldr x17, pc+60 (addr 0x0000ffff7ab0e990)    ;; object: 0xffff7ab0e8e1 <Code: BINARY_OP_IC>
0xffff7ab0e958    24  sub csp, jssp, #0x10 (16)
0xffff7ab0e95c    28  str x17, [jssp, #-8]!
0xffff7ab0e960    32  add fp, jssp, #0x10 (16)
0xffff7ab0e964    36  sub csp, jssp, #0x10 (16)
0xffff7ab0e968    40  stp x0, x1, [jssp, #-16]!
0xffff7ab0e96c    44  movz x0, #0x2
0xffff7ab0e970    48  ldr x1, pc+40 (addr 0x0000ffff7ab0e998)    ;; external reference (Runtime::BinaryOpIC_Miss)
0xffff7ab0e974    52  ldr x16, pc+44 (addr 0x0000ffff7ab0e9a0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab0e978    56  blr x16
0xffff7ab0e97c    60  mov jssp, fp
0xffff7ab0e980    64  ldp fp, lr, [jssp], #16
0xffff7ab0e984    68  ret
0xffff7ab0e988    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0e98c    76  d63f03e0       constant
0xffff7ab0e990    80  7ab0e8e1       constant
0xffff7ab0e994    84  0000ffff       constant
0xffff7ab0e998    88  00c8e1b8       constant
0xffff7ab0e99c    92  00000000       constant
0xffff7ab0e9a0    96  7ab06060       constant
0xffff7ab0e9a4   100  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab0e954  embedded object  (0xffff7ab0e8e1 <Code: BINARY_OP_IC>)
0xffff7ab0e970  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0xffff7ab0e974  code target (STUB)  (0xffff7ab06060)
0xffff7ab0e988  constant pool (size 32)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4391
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0xffff7ab0ea20     0  mov x2, x1
0xffff7ab0ea24     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab0ea40)
0xffff7ab0ea28     8  mov x3, x0
0xffff7ab0ea2c    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab0ea50)
0xffff7ab0ea30    16  adds x2, x3, x2
0xffff7ab0ea34    20  b.vs #+0x2c (addr 0xffff7ab0ea60)
0xffff7ab0ea38    24  mov x0, x2
0xffff7ab0ea3c    28  ret
0xffff7ab0ea40    32  movz x16, #0x0
0xffff7ab0ea44    36  sub csp, jssp, #0x10 (16)
0xffff7ab0ea48    40  stp fp, lr, [jssp, #-16]!
0xffff7ab0ea4c    44  bl #+0x24 (addr 0xffff7ab0ea70)
0xffff7ab0ea50    48  movz x16, #0x8
0xffff7ab0ea54    52  sub csp, jssp, #0x10 (16)
0xffff7ab0ea58    56  stp fp, lr, [jssp, #-16]!
0xffff7ab0ea5c    60  bl #+0x14 (addr 0xffff7ab0ea70)
0xffff7ab0ea60    64  movz x16, #0x10
0xffff7ab0ea64    68  sub csp, jssp, #0x10 (16)
0xffff7ab0ea68    72  stp fp, lr, [jssp, #-16]!
0xffff7ab0ea6c    76  bl #+0x4 (addr 0xffff7ab0ea70)
0xffff7ab0ea70    80  movz x17, #0xa00000000
0xffff7ab0ea74    84  sub csp, jssp, #0x10 (16)
0xffff7ab0ea78    88  stp x17, cp, [jssp, #-16]!
0xffff7ab0ea7c    92  add fp, jssp, #0x10 (16)
0xffff7ab0ea80    96  ldr x17, pc+24 (addr 0x0000ffff7ab0ea98)    ;; lazy deoptimization bailout 0
0xffff7ab0ea84   100  add x17, x17, x16
0xffff7ab0ea88   104  br x17
0xffff7ab0ea8c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0ea90   112  d63f03e0       constant
0xffff7ab0ea94   116  d503201f       constant
0xffff7ab0ea98   120  7a906000       constant
0xffff7ab0ea9c   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0ea80  runtime entry
0xffff7ab0ea8c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4391
type = NORMAL
name = BinaryOpICStub(ADD:Int32*Int32->Int32)
compiler = crankshaft
Instructions (size = 136)
0xffff7ab0ea20     0  mov x2, x1
0xffff7ab0ea24     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab0ea40)
0xffff7ab0ea28     8  mov x3, x0
0xffff7ab0ea2c    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab0ea50)
0xffff7ab0ea30    16  adds x2, x3, x2
0xffff7ab0ea34    20  b.vs #+0x2c (addr 0xffff7ab0ea60)
0xffff7ab0ea38    24  mov x0, x2
0xffff7ab0ea3c    28  ret
0xffff7ab0ea40    32  movz x16, #0x0
0xffff7ab0ea44    36  sub csp, jssp, #0x10 (16)
0xffff7ab0ea48    40  stp fp, lr, [jssp, #-16]!
0xffff7ab0ea4c    44  bl #+0x24 (addr 0xffff7ab0ea70)
0xffff7ab0ea50    48  movz x16, #0x8
0xffff7ab0ea54    52  sub csp, jssp, #0x10 (16)
0xffff7ab0ea58    56  stp fp, lr, [jssp, #-16]!
0xffff7ab0ea5c    60  bl #+0x14 (addr 0xffff7ab0ea70)
0xffff7ab0ea60    64  movz x16, #0x10
0xffff7ab0ea64    68  sub csp, jssp, #0x10 (16)
0xffff7ab0ea68    72  stp fp, lr, [jssp, #-16]!
0xffff7ab0ea6c    76  bl #+0x4 (addr 0xffff7ab0ea70)
0xffff7ab0ea70    80  movz x17, #0xa00000000
0xffff7ab0ea74    84  sub csp, jssp, #0x10 (16)
0xffff7ab0ea78    88  stp x17, cp, [jssp, #-16]!
0xffff7ab0ea7c    92  add fp, jssp, #0x10 (16)
0xffff7ab0ea80    96  ldr x17, pc+24 (addr 0x0000ffff7ab0ea98)    ;; lazy deoptimization bailout 0
0xffff7ab0ea84   100  add x17, x17, x16
0xffff7ab0ea88   104  br x17
0xffff7ab0ea8c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0ea90   112  d63f03e0       constant
0xffff7ab0ea94   116  d503201f       constant
0xffff7ab0ea98   120  7a906000       constant
0xffff7ab0ea9c   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0ea80  runtime entry
0xffff7ab0ea8c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4407
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0xffff7ab0eb20     0  mov x2, x1
0xffff7ab0eb24     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab0ebe8)
0xffff7ab0eb28     8  mov x3, x0
0xffff7ab0eb2c    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab0ebf8)
0xffff7ab0eb30    16  scvtf d0, x2, #32
0xffff7ab0eb34    20  scvtf d1, x3, #32
0xffff7ab0eb38    24  fadd d0, d0, d1
0xffff7ab0eb3c    28  movz x1, #0xe2c0
0xffff7ab0eb40    32  movk x1, #0x9ab, lsl #16
0xffff7ab0eb44    36  ldp x2, x0, [x1]
0xffff7ab0eb48    40  adds x16, x2, #0x10 (16)
0xffff7ab0eb4c    44  ccmp x16, x0, #nzCv, lo
0xffff7ab0eb50    48  b.hi #+0x20 (addr 0xffff7ab0eb70)
0xffff7ab0eb54    52  str x16, [x1]
0xffff7ab0eb58    56  ldr x1, [x26, #120]
0xffff7ab0eb5c    60  str x1, [x2]
0xffff7ab0eb60    64  orr x2, x2, #0x1
0xffff7ab0eb64    68  stur d0, [x2, #7]
0xffff7ab0eb68    72  mov x0, x2
0xffff7ab0eb6c    76  ret
0xffff7ab0eb70    80  sub csp, jssp, #0x10 (16)
0xffff7ab0eb74    84  stp fp, lr, [jssp, #-16]!
0xffff7ab0eb78    88  movz fp, #0xa00000000
0xffff7ab0eb7c    92  sub csp, jssp, #0x8 (8)
0xffff7ab0eb80    96  str fp, [jssp, #-8]!
0xffff7ab0eb84   100  add fp, jssp, #0x8 (8)
0xffff7ab0eb88   104  movz x2, #0x0
0xffff7ab0eb8c   108  mov x16, lr
0xffff7ab0eb90   112  ldr x17, pc+64 (addr 0x0000ffff7ab0ebd0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0eb94   116  blr x17
0xffff7ab0eb98   120  ldur cp, [fp, #-8]
0xffff7ab0eb9c   124  movz x0, #0x0
0xffff7ab0eba0   128  movz x1, #0x4b48
0xffff7ab0eba4   132  movk x1, #0xe4, lsl #16
0xffff7ab0eba8   136  ldr x16, pc+48 (addr 0x0000ffff7ab0ebd8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0ebac   140  blr x16
0xffff7ab0ebb0   144  str x0, [jssp, #16]
0xffff7ab0ebb4   148  ldr x16, pc+44 (addr 0x0000ffff7ab0ebe0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0ebb8   152  blr x16
0xffff7ab0ebbc   156  ldr lr, [jssp, #16]
0xffff7ab0ebc0   160  ldp xzr, fp, [jssp], #24
0xffff7ab0ebc4   164  b #-0x60 (addr 0xffff7ab0eb64)
0xffff7ab0ebc8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0ebcc   172  d63f03e0       constant
0xffff7ab0ebd0   176  7ab06820       constant
0xffff7ab0ebd4   180  0000ffff       constant
0xffff7ab0ebd8   184  7ab06260       constant
0xffff7ab0ebdc   188  0000ffff       constant
0xffff7ab0ebe0   192  7ab068e0       constant
0xffff7ab0ebe4   196  0000ffff       constant
0xffff7ab0ebe8   200  movz x16, #0x0
0xffff7ab0ebec   204  sub csp, jssp, #0x10 (16)
0xffff7ab0ebf0   208  stp fp, lr, [jssp, #-16]!
0xffff7ab0ebf4   212  bl #+0x14 (addr 0xffff7ab0ec08)
0xffff7ab0ebf8   216  movz x16, #0x8
0xffff7ab0ebfc   220  sub csp, jssp, #0x10 (16)
0xffff7ab0ec00   224  stp fp, lr, [jssp, #-16]!
0xffff7ab0ec04   228  bl #+0x4 (addr 0xffff7ab0ec08)
0xffff7ab0ec08   232  movz x17, #0xa00000000
0xffff7ab0ec0c   236  sub csp, jssp, #0x10 (16)
0xffff7ab0ec10   240  stp x17, cp, [jssp, #-16]!
0xffff7ab0ec14   244  add fp, jssp, #0x10 (16)
0xffff7ab0ec18   248  ldr x17, pc+24 (addr 0x0000ffff7ab0ec30)    ;; lazy deoptimization bailout 0
0xffff7ab0ec1c   252  add x17, x17, x16
0xffff7ab0ec20   256  br x17
0xffff7ab0ec24   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0ec28   264  d63f03e0       constant
0xffff7ab0ec2c   268  d503201f       constant
0xffff7ab0ec30   272  7a906000       constant
0xffff7ab0ec34   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0ebb0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab0eb90  code target (STUB)  (0xffff7ab06820)
0xffff7ab0eba8  code target (STUB)  (0xffff7ab06260)
0xffff7ab0ebb4  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0ebc8  constant pool (size 32)
0xffff7ab0ec18  runtime entry
0xffff7ab0ec24  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4407
type = NORMAL
name = BinaryOpICStub(ADD:Int32*Int32->Number)
compiler = crankshaft
Instructions (size = 301)
0xffff7ab0eb20     0  mov x2, x1
0xffff7ab0eb24     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab0ebe8)
0xffff7ab0eb28     8  mov x3, x0
0xffff7ab0eb2c    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab0ebf8)
0xffff7ab0eb30    16  scvtf d0, x2, #32
0xffff7ab0eb34    20  scvtf d1, x3, #32
0xffff7ab0eb38    24  fadd d0, d0, d1
0xffff7ab0eb3c    28  movz x1, #0xe2c0
0xffff7ab0eb40    32  movk x1, #0x9ab, lsl #16
0xffff7ab0eb44    36  ldp x2, x0, [x1]
0xffff7ab0eb48    40  adds x16, x2, #0x10 (16)
0xffff7ab0eb4c    44  ccmp x16, x0, #nzCv, lo
0xffff7ab0eb50    48  b.hi #+0x20 (addr 0xffff7ab0eb70)
0xffff7ab0eb54    52  str x16, [x1]
0xffff7ab0eb58    56  ldr x1, [x26, #120]
0xffff7ab0eb5c    60  str x1, [x2]
0xffff7ab0eb60    64  orr x2, x2, #0x1
0xffff7ab0eb64    68  stur d0, [x2, #7]
0xffff7ab0eb68    72  mov x0, x2
0xffff7ab0eb6c    76  ret
0xffff7ab0eb70    80  sub csp, jssp, #0x10 (16)
0xffff7ab0eb74    84  stp fp, lr, [jssp, #-16]!
0xffff7ab0eb78    88  movz fp, #0xa00000000
0xffff7ab0eb7c    92  sub csp, jssp, #0x8 (8)
0xffff7ab0eb80    96  str fp, [jssp, #-8]!
0xffff7ab0eb84   100  add fp, jssp, #0x8 (8)
0xffff7ab0eb88   104  movz x2, #0x0
0xffff7ab0eb8c   108  mov x16, lr
0xffff7ab0eb90   112  ldr x17, pc+64 (addr 0x0000ffff7ab0ebd0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0eb94   116  blr x17
0xffff7ab0eb98   120  ldur cp, [fp, #-8]
0xffff7ab0eb9c   124  movz x0, #0x0
0xffff7ab0eba0   128  movz x1, #0x4b48
0xffff7ab0eba4   132  movk x1, #0xe4, lsl #16
0xffff7ab0eba8   136  ldr x16, pc+48 (addr 0x0000ffff7ab0ebd8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0ebac   140  blr x16
0xffff7ab0ebb0   144  str x0, [jssp, #16]
0xffff7ab0ebb4   148  ldr x16, pc+44 (addr 0x0000ffff7ab0ebe0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0ebb8   152  blr x16
0xffff7ab0ebbc   156  ldr lr, [jssp, #16]
0xffff7ab0ebc0   160  ldp xzr, fp, [jssp], #24
0xffff7ab0ebc4   164  b #-0x60 (addr 0xffff7ab0eb64)
0xffff7ab0ebc8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0ebcc   172  d63f03e0       constant
0xffff7ab0ebd0   176  7ab06820       constant
0xffff7ab0ebd4   180  0000ffff       constant
0xffff7ab0ebd8   184  7ab06260       constant
0xffff7ab0ebdc   188  0000ffff       constant
0xffff7ab0ebe0   192  7ab068e0       constant
0xffff7ab0ebe4   196  0000ffff       constant
0xffff7ab0ebe8   200  movz x16, #0x0
0xffff7ab0ebec   204  sub csp, jssp, #0x10 (16)
0xffff7ab0ebf0   208  stp fp, lr, [jssp, #-16]!
0xffff7ab0ebf4   212  bl #+0x14 (addr 0xffff7ab0ec08)
0xffff7ab0ebf8   216  movz x16, #0x8
0xffff7ab0ebfc   220  sub csp, jssp, #0x10 (16)
0xffff7ab0ec00   224  stp fp, lr, [jssp, #-16]!
0xffff7ab0ec04   228  bl #+0x4 (addr 0xffff7ab0ec08)
0xffff7ab0ec08   232  movz x17, #0xa00000000
0xffff7ab0ec0c   236  sub csp, jssp, #0x10 (16)
0xffff7ab0ec10   240  stp x17, cp, [jssp, #-16]!
0xffff7ab0ec14   244  add fp, jssp, #0x10 (16)
0xffff7ab0ec18   248  ldr x17, pc+24 (addr 0x0000ffff7ab0ec30)    ;; lazy deoptimization bailout 0
0xffff7ab0ec1c   252  add x17, x17, x16
0xffff7ab0ec20   256  br x17
0xffff7ab0ec24   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0ec28   264  d63f03e0       constant
0xffff7ab0ec2c   268  d503201f       constant
0xffff7ab0ec30   272  7a906000       constant
0xffff7ab0ec34   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0ebb0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab0eb90  code target (STUB)  (0xffff7ab06820)
0xffff7ab0eba8  code target (STUB)  (0xffff7ab06260)
0xffff7ab0ebb4  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0ebc8  constant pool (size 32)
0xffff7ab0ec18  runtime entry
0xffff7ab0ec24  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6455
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0xffff7ab0ecc0     0  mov x2, x1
0xffff7ab0ecc4     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab0edb8)
0xffff7ab0ecc8     8  tbz w0, #0, #+0x34 (addr 0xffff7ab0ecfc)
0xffff7ab0eccc    12  ldur x16, [x0, #-1]
0xffff7ab0ecd0    16  ldr x17, [x26, #120]
0xffff7ab0ecd4    20  cmp x16, x17
0xffff7ab0ecd8    24  b.ne #+0xc (addr 0xffff7ab0ece4)
0xffff7ab0ecdc    28  ldur d0, [x0, #7]
0xffff7ab0ece0    32  b #+0x20 (addr 0xffff7ab0ed00)
0xffff7ab0ece4    36  ldr x16, [x26, #40]
0xffff7ab0ece8    40  cmp x0, x16
0xffff7ab0ecec    44  b.ne #+0xdc (addr 0xffff7ab0edc8)
0xffff7ab0ecf0    48  ldr x3, [x26, #928]
0xffff7ab0ecf4    52  ldur d0, [x3, #7]
0xffff7ab0ecf8    56  b #+0x8 (addr 0xffff7ab0ed00)
0xffff7ab0ecfc    60  scvtf d0, x0, #32
0xffff7ab0ed00    64  scvtf d1, x2, #32
0xffff7ab0ed04    68  fadd d0, d1, d0
0xffff7ab0ed08    72  movz x1, #0xe2c0
0xffff7ab0ed0c    76  movk x1, #0x9ab, lsl #16
0xffff7ab0ed10    80  ldp x2, x0, [x1]
0xffff7ab0ed14    84  adds x16, x2, #0x10 (16)
0xffff7ab0ed18    88  ccmp x16, x0, #nzCv, lo
0xffff7ab0ed1c    92  b.hi #+0x20 (addr 0xffff7ab0ed3c)
0xffff7ab0ed20    96  str x16, [x1]
0xffff7ab0ed24   100  ldr x1, [x26, #120]
0xffff7ab0ed28   104  str x1, [x2]
0xffff7ab0ed2c   108  orr x2, x2, #0x1
0xffff7ab0ed30   112  stur d0, [x2, #7]
0xffff7ab0ed34   116  mov x0, x2
0xffff7ab0ed38   120  ret
0xffff7ab0ed3c   124  sub csp, jssp, #0x10 (16)
0xffff7ab0ed40   128  stp fp, lr, [jssp, #-16]!
0xffff7ab0ed44   132  movz fp, #0xa00000000
0xffff7ab0ed48   136  sub csp, jssp, #0x8 (8)
0xffff7ab0ed4c   140  str fp, [jssp, #-8]!
0xffff7ab0ed50   144  add fp, jssp, #0x8 (8)
0xffff7ab0ed54   148  movz x2, #0x0
0xffff7ab0ed58   152  mov x16, lr
0xffff7ab0ed5c   156  ldr x17, pc+68 (addr 0x0000ffff7ab0eda0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0ed60   160  blr x17
0xffff7ab0ed64   164  ldur cp, [fp, #-8]
0xffff7ab0ed68   168  movz x0, #0x0
0xffff7ab0ed6c   172  movz x1, #0x4b48
0xffff7ab0ed70   176  movk x1, #0xe4, lsl #16
0xffff7ab0ed74   180  ldr x16, pc+52 (addr 0x0000ffff7ab0eda8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0ed78   184  blr x16
0xffff7ab0ed7c   188  str x0, [jssp, #16]
0xffff7ab0ed80   192  ldr x16, pc+48 (addr 0x0000ffff7ab0edb0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0ed84   196  blr x16
0xffff7ab0ed88   200  ldr lr, [jssp, #16]
0xffff7ab0ed8c   204  ldp xzr, fp, [jssp], #24
0xffff7ab0ed90   208  b #-0x60 (addr 0xffff7ab0ed30)
0xffff7ab0ed94   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab0ed98   216  d63f03e0       constant
0xffff7ab0ed9c   220  d503201f       constant
0xffff7ab0eda0   224  7ab06820       constant
0xffff7ab0eda4   228  0000ffff       constant
0xffff7ab0eda8   232  7ab06260       constant
0xffff7ab0edac   236  0000ffff       constant
0xffff7ab0edb0   240  7ab068e0       constant
0xffff7ab0edb4   244  0000ffff       constant
0xffff7ab0edb8   248  movz x16, #0x0
0xffff7ab0edbc   252  sub csp, jssp, #0x10 (16)
0xffff7ab0edc0   256  stp fp, lr, [jssp, #-16]!
0xffff7ab0edc4   260  bl #+0x14 (addr 0xffff7ab0edd8)
0xffff7ab0edc8   264  movz x16, #0x8
0xffff7ab0edcc   268  sub csp, jssp, #0x10 (16)
0xffff7ab0edd0   272  stp fp, lr, [jssp, #-16]!
0xffff7ab0edd4   276  bl #+0x4 (addr 0xffff7ab0edd8)
0xffff7ab0edd8   280  movz x17, #0xa00000000
0xffff7ab0eddc   284  sub csp, jssp, #0x10 (16)
0xffff7ab0ede0   288  stp x17, cp, [jssp, #-16]!
0xffff7ab0ede4   292  add fp, jssp, #0x10 (16)
0xffff7ab0ede8   296  ldr x17, pc+24 (addr 0x0000ffff7ab0ee00)    ;; lazy deoptimization bailout 0
0xffff7ab0edec   300  add x17, x17, x16
0xffff7ab0edf0   304  br x17
0xffff7ab0edf4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0edf8   312  d63f03e0       constant
0xffff7ab0edfc   316  d503201f       constant
0xffff7ab0ee00   320  7a906000       constant
0xffff7ab0ee04   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0ed7c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab0ed5c  code target (STUB)  (0xffff7ab06820)
0xffff7ab0ed74  code target (STUB)  (0xffff7ab06260)
0xffff7ab0ed80  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0ed94  constant pool (size 36)
0xffff7ab0ede8  runtime entry
0xffff7ab0edf4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6455
type = NORMAL
name = BinaryOpICStub(ADD:Int32*Number->Number)
compiler = crankshaft
Instructions (size = 349)
0xffff7ab0ecc0     0  mov x2, x1
0xffff7ab0ecc4     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab0edb8)
0xffff7ab0ecc8     8  tbz w0, #0, #+0x34 (addr 0xffff7ab0ecfc)
0xffff7ab0eccc    12  ldur x16, [x0, #-1]
0xffff7ab0ecd0    16  ldr x17, [x26, #120]
0xffff7ab0ecd4    20  cmp x16, x17
0xffff7ab0ecd8    24  b.ne #+0xc (addr 0xffff7ab0ece4)
0xffff7ab0ecdc    28  ldur d0, [x0, #7]
0xffff7ab0ece0    32  b #+0x20 (addr 0xffff7ab0ed00)
0xffff7ab0ece4    36  ldr x16, [x26, #40]
0xffff7ab0ece8    40  cmp x0, x16
0xffff7ab0ecec    44  b.ne #+0xdc (addr 0xffff7ab0edc8)
0xffff7ab0ecf0    48  ldr x3, [x26, #928]
0xffff7ab0ecf4    52  ldur d0, [x3, #7]
0xffff7ab0ecf8    56  b #+0x8 (addr 0xffff7ab0ed00)
0xffff7ab0ecfc    60  scvtf d0, x0, #32
0xffff7ab0ed00    64  scvtf d1, x2, #32
0xffff7ab0ed04    68  fadd d0, d1, d0
0xffff7ab0ed08    72  movz x1, #0xe2c0
0xffff7ab0ed0c    76  movk x1, #0x9ab, lsl #16
0xffff7ab0ed10    80  ldp x2, x0, [x1]
0xffff7ab0ed14    84  adds x16, x2, #0x10 (16)
0xffff7ab0ed18    88  ccmp x16, x0, #nzCv, lo
0xffff7ab0ed1c    92  b.hi #+0x20 (addr 0xffff7ab0ed3c)
0xffff7ab0ed20    96  str x16, [x1]
0xffff7ab0ed24   100  ldr x1, [x26, #120]
0xffff7ab0ed28   104  str x1, [x2]
0xffff7ab0ed2c   108  orr x2, x2, #0x1
0xffff7ab0ed30   112  stur d0, [x2, #7]
0xffff7ab0ed34   116  mov x0, x2
0xffff7ab0ed38   120  ret
0xffff7ab0ed3c   124  sub csp, jssp, #0x10 (16)
0xffff7ab0ed40   128  stp fp, lr, [jssp, #-16]!
0xffff7ab0ed44   132  movz fp, #0xa00000000
0xffff7ab0ed48   136  sub csp, jssp, #0x8 (8)
0xffff7ab0ed4c   140  str fp, [jssp, #-8]!
0xffff7ab0ed50   144  add fp, jssp, #0x8 (8)
0xffff7ab0ed54   148  movz x2, #0x0
0xffff7ab0ed58   152  mov x16, lr
0xffff7ab0ed5c   156  ldr x17, pc+68 (addr 0x0000ffff7ab0eda0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0ed60   160  blr x17
0xffff7ab0ed64   164  ldur cp, [fp, #-8]
0xffff7ab0ed68   168  movz x0, #0x0
0xffff7ab0ed6c   172  movz x1, #0x4b48
0xffff7ab0ed70   176  movk x1, #0xe4, lsl #16
0xffff7ab0ed74   180  ldr x16, pc+52 (addr 0x0000ffff7ab0eda8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0ed78   184  blr x16
0xffff7ab0ed7c   188  str x0, [jssp, #16]
0xffff7ab0ed80   192  ldr x16, pc+48 (addr 0x0000ffff7ab0edb0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0ed84   196  blr x16
0xffff7ab0ed88   200  ldr lr, [jssp, #16]
0xffff7ab0ed8c   204  ldp xzr, fp, [jssp], #24
0xffff7ab0ed90   208  b #-0x60 (addr 0xffff7ab0ed30)
0xffff7ab0ed94   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab0ed98   216  d63f03e0       constant
0xffff7ab0ed9c   220  d503201f       constant
0xffff7ab0eda0   224  7ab06820       constant
0xffff7ab0eda4   228  0000ffff       constant
0xffff7ab0eda8   232  7ab06260       constant
0xffff7ab0edac   236  0000ffff       constant
0xffff7ab0edb0   240  7ab068e0       constant
0xffff7ab0edb4   244  0000ffff       constant
0xffff7ab0edb8   248  movz x16, #0x0
0xffff7ab0edbc   252  sub csp, jssp, #0x10 (16)
0xffff7ab0edc0   256  stp fp, lr, [jssp, #-16]!
0xffff7ab0edc4   260  bl #+0x14 (addr 0xffff7ab0edd8)
0xffff7ab0edc8   264  movz x16, #0x8
0xffff7ab0edcc   268  sub csp, jssp, #0x10 (16)
0xffff7ab0edd0   272  stp fp, lr, [jssp, #-16]!
0xffff7ab0edd4   276  bl #+0x4 (addr 0xffff7ab0edd8)
0xffff7ab0edd8   280  movz x17, #0xa00000000
0xffff7ab0eddc   284  sub csp, jssp, #0x10 (16)
0xffff7ab0ede0   288  stp x17, cp, [jssp, #-16]!
0xffff7ab0ede4   292  add fp, jssp, #0x10 (16)
0xffff7ab0ede8   296  ldr x17, pc+24 (addr 0x0000ffff7ab0ee00)    ;; lazy deoptimization bailout 0
0xffff7ab0edec   300  add x17, x17, x16
0xffff7ab0edf0   304  br x17
0xffff7ab0edf4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0edf8   312  d63f03e0       constant
0xffff7ab0edfc   316  d503201f       constant
0xffff7ab0ee00   320  7a906000       constant
0xffff7ab0ee04   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0ed7c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab0ed5c  code target (STUB)  (0xffff7ab06820)
0xffff7ab0ed74  code target (STUB)  (0xffff7ab06260)
0xffff7ab0ed80  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0ed94  constant pool (size 36)
0xffff7ab0ede8  runtime entry
0xffff7ab0edf4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2343
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0xffff7ab0ee80     0  mov x2, x1
0xffff7ab0ee84     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab0eea0)
0xffff7ab0ee88     8  mov x3, x0
0xffff7ab0ee8c    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab0eeb0)
0xffff7ab0ee90    16  adds x2, x3, x2
0xffff7ab0ee94    20  b.vs #+0x2c (addr 0xffff7ab0eec0)
0xffff7ab0ee98    24  mov x0, x2
0xffff7ab0ee9c    28  ret
0xffff7ab0eea0    32  movz x16, #0x0
0xffff7ab0eea4    36  sub csp, jssp, #0x10 (16)
0xffff7ab0eea8    40  stp fp, lr, [jssp, #-16]!
0xffff7ab0eeac    44  bl #+0x24 (addr 0xffff7ab0eed0)
0xffff7ab0eeb0    48  movz x16, #0x8
0xffff7ab0eeb4    52  sub csp, jssp, #0x10 (16)
0xffff7ab0eeb8    56  stp fp, lr, [jssp, #-16]!
0xffff7ab0eebc    60  bl #+0x14 (addr 0xffff7ab0eed0)
0xffff7ab0eec0    64  movz x16, #0x10
0xffff7ab0eec4    68  sub csp, jssp, #0x10 (16)
0xffff7ab0eec8    72  stp fp, lr, [jssp, #-16]!
0xffff7ab0eecc    76  bl #+0x4 (addr 0xffff7ab0eed0)
0xffff7ab0eed0    80  movz x17, #0xa00000000
0xffff7ab0eed4    84  sub csp, jssp, #0x10 (16)
0xffff7ab0eed8    88  stp x17, cp, [jssp, #-16]!
0xffff7ab0eedc    92  add fp, jssp, #0x10 (16)
0xffff7ab0eee0    96  ldr x17, pc+24 (addr 0x0000ffff7ab0eef8)    ;; lazy deoptimization bailout 0
0xffff7ab0eee4   100  add x17, x17, x16
0xffff7ab0eee8   104  br x17
0xffff7ab0eeec   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0eef0   112  d63f03e0       constant
0xffff7ab0eef4   116  d503201f       constant
0xffff7ab0eef8   120  7a906000       constant
0xffff7ab0eefc   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0eee0  runtime entry
0xffff7ab0eeec  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2343
type = NORMAL
name = BinaryOpICStub(ADD:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 136)
0xffff7ab0ee80     0  mov x2, x1
0xffff7ab0ee84     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab0eea0)
0xffff7ab0ee88     8  mov x3, x0
0xffff7ab0ee8c    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab0eeb0)
0xffff7ab0ee90    16  adds x2, x3, x2
0xffff7ab0ee94    20  b.vs #+0x2c (addr 0xffff7ab0eec0)
0xffff7ab0ee98    24  mov x0, x2
0xffff7ab0ee9c    28  ret
0xffff7ab0eea0    32  movz x16, #0x0
0xffff7ab0eea4    36  sub csp, jssp, #0x10 (16)
0xffff7ab0eea8    40  stp fp, lr, [jssp, #-16]!
0xffff7ab0eeac    44  bl #+0x24 (addr 0xffff7ab0eed0)
0xffff7ab0eeb0    48  movz x16, #0x8
0xffff7ab0eeb4    52  sub csp, jssp, #0x10 (16)
0xffff7ab0eeb8    56  stp fp, lr, [jssp, #-16]!
0xffff7ab0eebc    60  bl #+0x14 (addr 0xffff7ab0eed0)
0xffff7ab0eec0    64  movz x16, #0x10
0xffff7ab0eec4    68  sub csp, jssp, #0x10 (16)
0xffff7ab0eec8    72  stp fp, lr, [jssp, #-16]!
0xffff7ab0eecc    76  bl #+0x4 (addr 0xffff7ab0eed0)
0xffff7ab0eed0    80  movz x17, #0xa00000000
0xffff7ab0eed4    84  sub csp, jssp, #0x10 (16)
0xffff7ab0eed8    88  stp x17, cp, [jssp, #-16]!
0xffff7ab0eedc    92  add fp, jssp, #0x10 (16)
0xffff7ab0eee0    96  ldr x17, pc+24 (addr 0x0000ffff7ab0eef8)    ;; lazy deoptimization bailout 0
0xffff7ab0eee4   100  add x17, x17, x16
0xffff7ab0eee8   104  br x17
0xffff7ab0eeec   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0eef0   112  d63f03e0       constant
0xffff7ab0eef4   116  d503201f       constant
0xffff7ab0eef8   120  7a906000       constant
0xffff7ab0eefc   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0eee0  runtime entry
0xffff7ab0eeec  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4535
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0xffff7ab0ef80     0  mov x2, x0
0xffff7ab0ef84     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab0f078)
0xffff7ab0ef88     8  tbz w1, #0, #+0x34 (addr 0xffff7ab0efbc)
0xffff7ab0ef8c    12  ldur x16, [x1, #-1]
0xffff7ab0ef90    16  ldr x17, [x26, #120]
0xffff7ab0ef94    20  cmp x16, x17
0xffff7ab0ef98    24  b.ne #+0xc (addr 0xffff7ab0efa4)
0xffff7ab0ef9c    28  ldur d0, [x1, #7]
0xffff7ab0efa0    32  b #+0x20 (addr 0xffff7ab0efc0)
0xffff7ab0efa4    36  ldr x16, [x26, #40]
0xffff7ab0efa8    40  cmp x1, x16
0xffff7ab0efac    44  b.ne #+0xdc (addr 0xffff7ab0f088)
0xffff7ab0efb0    48  ldr x3, [x26, #928]
0xffff7ab0efb4    52  ldur d0, [x3, #7]
0xffff7ab0efb8    56  b #+0x8 (addr 0xffff7ab0efc0)
0xffff7ab0efbc    60  scvtf d0, x1, #32
0xffff7ab0efc0    64  scvtf d1, x2, #32
0xffff7ab0efc4    68  fadd d0, d0, d1
0xffff7ab0efc8    72  movz x1, #0xe2c0
0xffff7ab0efcc    76  movk x1, #0x9ab, lsl #16
0xffff7ab0efd0    80  ldp x2, x0, [x1]
0xffff7ab0efd4    84  adds x16, x2, #0x10 (16)
0xffff7ab0efd8    88  ccmp x16, x0, #nzCv, lo
0xffff7ab0efdc    92  b.hi #+0x20 (addr 0xffff7ab0effc)
0xffff7ab0efe0    96  str x16, [x1]
0xffff7ab0efe4   100  ldr x1, [x26, #120]
0xffff7ab0efe8   104  str x1, [x2]
0xffff7ab0efec   108  orr x2, x2, #0x1
0xffff7ab0eff0   112  stur d0, [x2, #7]
0xffff7ab0eff4   116  mov x0, x2
0xffff7ab0eff8   120  ret
0xffff7ab0effc   124  sub csp, jssp, #0x10 (16)
0xffff7ab0f000   128  stp fp, lr, [jssp, #-16]!
0xffff7ab0f004   132  movz fp, #0xa00000000
0xffff7ab0f008   136  sub csp, jssp, #0x8 (8)
0xffff7ab0f00c   140  str fp, [jssp, #-8]!
0xffff7ab0f010   144  add fp, jssp, #0x8 (8)
0xffff7ab0f014   148  movz x2, #0x0
0xffff7ab0f018   152  mov x16, lr
0xffff7ab0f01c   156  ldr x17, pc+68 (addr 0x0000ffff7ab0f060)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0f020   160  blr x17
0xffff7ab0f024   164  ldur cp, [fp, #-8]
0xffff7ab0f028   168  movz x0, #0x0
0xffff7ab0f02c   172  movz x1, #0x4b48
0xffff7ab0f030   176  movk x1, #0xe4, lsl #16
0xffff7ab0f034   180  ldr x16, pc+52 (addr 0x0000ffff7ab0f068)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0f038   184  blr x16
0xffff7ab0f03c   188  str x0, [jssp, #16]
0xffff7ab0f040   192  ldr x16, pc+48 (addr 0x0000ffff7ab0f070)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0f044   196  blr x16
0xffff7ab0f048   200  ldr lr, [jssp, #16]
0xffff7ab0f04c   204  ldp xzr, fp, [jssp], #24
0xffff7ab0f050   208  b #-0x60 (addr 0xffff7ab0eff0)
0xffff7ab0f054   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab0f058   216  d63f03e0       constant
0xffff7ab0f05c   220  d503201f       constant
0xffff7ab0f060   224  7ab06820       constant
0xffff7ab0f064   228  0000ffff       constant
0xffff7ab0f068   232  7ab06260       constant
0xffff7ab0f06c   236  0000ffff       constant
0xffff7ab0f070   240  7ab068e0       constant
0xffff7ab0f074   244  0000ffff       constant
0xffff7ab0f078   248  movz x16, #0x0
0xffff7ab0f07c   252  sub csp, jssp, #0x10 (16)
0xffff7ab0f080   256  stp fp, lr, [jssp, #-16]!
0xffff7ab0f084   260  bl #+0x14 (addr 0xffff7ab0f098)
0xffff7ab0f088   264  movz x16, #0x8
0xffff7ab0f08c   268  sub csp, jssp, #0x10 (16)
0xffff7ab0f090   272  stp fp, lr, [jssp, #-16]!
0xffff7ab0f094   276  bl #+0x4 (addr 0xffff7ab0f098)
0xffff7ab0f098   280  movz x17, #0xa00000000
0xffff7ab0f09c   284  sub csp, jssp, #0x10 (16)
0xffff7ab0f0a0   288  stp x17, cp, [jssp, #-16]!
0xffff7ab0f0a4   292  add fp, jssp, #0x10 (16)
0xffff7ab0f0a8   296  ldr x17, pc+24 (addr 0x0000ffff7ab0f0c0)    ;; lazy deoptimization bailout 0
0xffff7ab0f0ac   300  add x17, x17, x16
0xffff7ab0f0b0   304  br x17
0xffff7ab0f0b4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0f0b8   312  d63f03e0       constant
0xffff7ab0f0bc   316  d503201f       constant
0xffff7ab0f0c0   320  7a906000       constant
0xffff7ab0f0c4   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0f03c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab0f01c  code target (STUB)  (0xffff7ab06820)
0xffff7ab0f034  code target (STUB)  (0xffff7ab06260)
0xffff7ab0f040  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0f054  constant pool (size 36)
0xffff7ab0f0a8  runtime entry
0xffff7ab0f0b4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4535
type = NORMAL
name = BinaryOpICStub(ADD:Number*Int32->Number)
compiler = crankshaft
Instructions (size = 349)
0xffff7ab0ef80     0  mov x2, x0
0xffff7ab0ef84     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab0f078)
0xffff7ab0ef88     8  tbz w1, #0, #+0x34 (addr 0xffff7ab0efbc)
0xffff7ab0ef8c    12  ldur x16, [x1, #-1]
0xffff7ab0ef90    16  ldr x17, [x26, #120]
0xffff7ab0ef94    20  cmp x16, x17
0xffff7ab0ef98    24  b.ne #+0xc (addr 0xffff7ab0efa4)
0xffff7ab0ef9c    28  ldur d0, [x1, #7]
0xffff7ab0efa0    32  b #+0x20 (addr 0xffff7ab0efc0)
0xffff7ab0efa4    36  ldr x16, [x26, #40]
0xffff7ab0efa8    40  cmp x1, x16
0xffff7ab0efac    44  b.ne #+0xdc (addr 0xffff7ab0f088)
0xffff7ab0efb0    48  ldr x3, [x26, #928]
0xffff7ab0efb4    52  ldur d0, [x3, #7]
0xffff7ab0efb8    56  b #+0x8 (addr 0xffff7ab0efc0)
0xffff7ab0efbc    60  scvtf d0, x1, #32
0xffff7ab0efc0    64  scvtf d1, x2, #32
0xffff7ab0efc4    68  fadd d0, d0, d1
0xffff7ab0efc8    72  movz x1, #0xe2c0
0xffff7ab0efcc    76  movk x1, #0x9ab, lsl #16
0xffff7ab0efd0    80  ldp x2, x0, [x1]
0xffff7ab0efd4    84  adds x16, x2, #0x10 (16)
0xffff7ab0efd8    88  ccmp x16, x0, #nzCv, lo
0xffff7ab0efdc    92  b.hi #+0x20 (addr 0xffff7ab0effc)
0xffff7ab0efe0    96  str x16, [x1]
0xffff7ab0efe4   100  ldr x1, [x26, #120]
0xffff7ab0efe8   104  str x1, [x2]
0xffff7ab0efec   108  orr x2, x2, #0x1
0xffff7ab0eff0   112  stur d0, [x2, #7]
0xffff7ab0eff4   116  mov x0, x2
0xffff7ab0eff8   120  ret
0xffff7ab0effc   124  sub csp, jssp, #0x10 (16)
0xffff7ab0f000   128  stp fp, lr, [jssp, #-16]!
0xffff7ab0f004   132  movz fp, #0xa00000000
0xffff7ab0f008   136  sub csp, jssp, #0x8 (8)
0xffff7ab0f00c   140  str fp, [jssp, #-8]!
0xffff7ab0f010   144  add fp, jssp, #0x8 (8)
0xffff7ab0f014   148  movz x2, #0x0
0xffff7ab0f018   152  mov x16, lr
0xffff7ab0f01c   156  ldr x17, pc+68 (addr 0x0000ffff7ab0f060)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0f020   160  blr x17
0xffff7ab0f024   164  ldur cp, [fp, #-8]
0xffff7ab0f028   168  movz x0, #0x0
0xffff7ab0f02c   172  movz x1, #0x4b48
0xffff7ab0f030   176  movk x1, #0xe4, lsl #16
0xffff7ab0f034   180  ldr x16, pc+52 (addr 0x0000ffff7ab0f068)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0f038   184  blr x16
0xffff7ab0f03c   188  str x0, [jssp, #16]
0xffff7ab0f040   192  ldr x16, pc+48 (addr 0x0000ffff7ab0f070)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0f044   196  blr x16
0xffff7ab0f048   200  ldr lr, [jssp, #16]
0xffff7ab0f04c   204  ldp xzr, fp, [jssp], #24
0xffff7ab0f050   208  b #-0x60 (addr 0xffff7ab0eff0)
0xffff7ab0f054   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab0f058   216  d63f03e0       constant
0xffff7ab0f05c   220  d503201f       constant
0xffff7ab0f060   224  7ab06820       constant
0xffff7ab0f064   228  0000ffff       constant
0xffff7ab0f068   232  7ab06260       constant
0xffff7ab0f06c   236  0000ffff       constant
0xffff7ab0f070   240  7ab068e0       constant
0xffff7ab0f074   244  0000ffff       constant
0xffff7ab0f078   248  movz x16, #0x0
0xffff7ab0f07c   252  sub csp, jssp, #0x10 (16)
0xffff7ab0f080   256  stp fp, lr, [jssp, #-16]!
0xffff7ab0f084   260  bl #+0x14 (addr 0xffff7ab0f098)
0xffff7ab0f088   264  movz x16, #0x8
0xffff7ab0f08c   268  sub csp, jssp, #0x10 (16)
0xffff7ab0f090   272  stp fp, lr, [jssp, #-16]!
0xffff7ab0f094   276  bl #+0x4 (addr 0xffff7ab0f098)
0xffff7ab0f098   280  movz x17, #0xa00000000
0xffff7ab0f09c   284  sub csp, jssp, #0x10 (16)
0xffff7ab0f0a0   288  stp x17, cp, [jssp, #-16]!
0xffff7ab0f0a4   292  add fp, jssp, #0x10 (16)
0xffff7ab0f0a8   296  ldr x17, pc+24 (addr 0x0000ffff7ab0f0c0)    ;; lazy deoptimization bailout 0
0xffff7ab0f0ac   300  add x17, x17, x16
0xffff7ab0f0b0   304  br x17
0xffff7ab0f0b4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0f0b8   312  d63f03e0       constant
0xffff7ab0f0bc   316  d503201f       constant
0xffff7ab0f0c0   320  7a906000       constant
0xffff7ab0f0c4   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0f03c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab0f01c  code target (STUB)  (0xffff7ab06820)
0xffff7ab0f034  code target (STUB)  (0xffff7ab06260)
0xffff7ab0f040  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0f054  constant pool (size 36)
0xffff7ab0f0a8  runtime entry
0xffff7ab0f0b4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6583
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 389)
0xffff7ab0f140     0  tbz w1, #0, #+0x34 (addr 0xffff7ab0f174)
0xffff7ab0f144     4  ldur x16, [x1, #-1]
0xffff7ab0f148     8  ldr x17, [x26, #120]
0xffff7ab0f14c    12  cmp x16, x17
0xffff7ab0f150    16  b.ne #+0xc (addr 0xffff7ab0f15c)
0xffff7ab0f154    20  ldur d0, [x1, #7]
0xffff7ab0f158    24  b #+0x20 (addr 0xffff7ab0f178)
0xffff7ab0f15c    28  ldr x16, [x26, #40]
0xffff7ab0f160    32  cmp x1, x16
0xffff7ab0f164    36  b.ne #+0xfc (addr 0xffff7ab0f260)
0xffff7ab0f168    40  ldr x2, [x26, #928]
0xffff7ab0f16c    44  ldur d0, [x2, #7]
0xffff7ab0f170    48  b #+0x8 (addr 0xffff7ab0f178)
0xffff7ab0f174    52  scvtf d0, x1, #32
0xffff7ab0f178    56  tbz w0, #0, #+0x34 (addr 0xffff7ab0f1ac)
0xffff7ab0f17c    60  ldur x16, [x0, #-1]
0xffff7ab0f180    64  ldr x17, [x26, #120]
0xffff7ab0f184    68  cmp x16, x17
0xffff7ab0f188    72  b.ne #+0xc (addr 0xffff7ab0f194)
0xffff7ab0f18c    76  ldur d1, [x0, #7]
0xffff7ab0f190    80  b #+0x20 (addr 0xffff7ab0f1b0)
0xffff7ab0f194    84  ldr x16, [x26, #40]
0xffff7ab0f198    88  cmp x0, x16
0xffff7ab0f19c    92  b.ne #+0xd4 (addr 0xffff7ab0f270)
0xffff7ab0f1a0    96  ldr x2, [x26, #928]
0xffff7ab0f1a4   100  ldur d1, [x2, #7]
0xffff7ab0f1a8   104  b #+0x8 (addr 0xffff7ab0f1b0)
0xffff7ab0f1ac   108  scvtf d1, x0, #32
0xffff7ab0f1b0   112  fadd d0, d0, d1
0xffff7ab0f1b4   116  movz x1, #0xe2c0
0xffff7ab0f1b8   120  movk x1, #0x9ab, lsl #16
0xffff7ab0f1bc   124  ldp x2, x0, [x1]
0xffff7ab0f1c0   128  adds x16, x2, #0x10 (16)
0xffff7ab0f1c4   132  ccmp x16, x0, #nzCv, lo
0xffff7ab0f1c8   136  b.hi #+0x20 (addr 0xffff7ab0f1e8)
0xffff7ab0f1cc   140  str x16, [x1]
0xffff7ab0f1d0   144  ldr x1, [x26, #120]
0xffff7ab0f1d4   148  str x1, [x2]
0xffff7ab0f1d8   152  orr x2, x2, #0x1
0xffff7ab0f1dc   156  stur d0, [x2, #7]
0xffff7ab0f1e0   160  mov x0, x2
0xffff7ab0f1e4   164  ret
0xffff7ab0f1e8   168  sub csp, jssp, #0x10 (16)
0xffff7ab0f1ec   172  stp fp, lr, [jssp, #-16]!
0xffff7ab0f1f0   176  movz fp, #0xa00000000
0xffff7ab0f1f4   180  sub csp, jssp, #0x8 (8)
0xffff7ab0f1f8   184  str fp, [jssp, #-8]!
0xffff7ab0f1fc   188  add fp, jssp, #0x8 (8)
0xffff7ab0f200   192  movz x2, #0x0
0xffff7ab0f204   196  mov x16, lr
0xffff7ab0f208   200  ldr x17, pc+64 (addr 0x0000ffff7ab0f248)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0f20c   204  blr x17
0xffff7ab0f210   208  ldur cp, [fp, #-8]
0xffff7ab0f214   212  movz x0, #0x0
0xffff7ab0f218   216  movz x1, #0x4b48
0xffff7ab0f21c   220  movk x1, #0xe4, lsl #16
0xffff7ab0f220   224  ldr x16, pc+48 (addr 0x0000ffff7ab0f250)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0f224   228  blr x16
0xffff7ab0f228   232  str x0, [jssp, #16]
0xffff7ab0f22c   236  ldr x16, pc+44 (addr 0x0000ffff7ab0f258)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0f230   240  blr x16
0xffff7ab0f234   244  ldr lr, [jssp, #16]
0xffff7ab0f238   248  ldp xzr, fp, [jssp], #24
0xffff7ab0f23c   252  b #-0x60 (addr 0xffff7ab0f1dc)
0xffff7ab0f240   256  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0f244   260  d63f03e0       constant
0xffff7ab0f248   264  7ab06820       constant
0xffff7ab0f24c   268  0000ffff       constant
0xffff7ab0f250   272  7ab06260       constant
0xffff7ab0f254   276  0000ffff       constant
0xffff7ab0f258   280  7ab068e0       constant
0xffff7ab0f25c   284  0000ffff       constant
0xffff7ab0f260   288  movz x16, #0x0
0xffff7ab0f264   292  sub csp, jssp, #0x10 (16)
0xffff7ab0f268   296  stp fp, lr, [jssp, #-16]!
0xffff7ab0f26c   300  bl #+0x14 (addr 0xffff7ab0f280)
0xffff7ab0f270   304  movz x16, #0x8
0xffff7ab0f274   308  sub csp, jssp, #0x10 (16)
0xffff7ab0f278   312  stp fp, lr, [jssp, #-16]!
0xffff7ab0f27c   316  bl #+0x4 (addr 0xffff7ab0f280)
0xffff7ab0f280   320  movz x17, #0xa00000000
0xffff7ab0f284   324  sub csp, jssp, #0x10 (16)
0xffff7ab0f288   328  stp x17, cp, [jssp, #-16]!
0xffff7ab0f28c   332  add fp, jssp, #0x10 (16)
0xffff7ab0f290   336  ldr x17, pc+24 (addr 0x0000ffff7ab0f2a8)    ;; lazy deoptimization bailout 0
0xffff7ab0f294   340  add x17, x17, x16
0xffff7ab0f298   344  br x17
0xffff7ab0f29c   348  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0f2a0   352  d63f03e0       constant
0xffff7ab0f2a4   356  d503201f       constant
0xffff7ab0f2a8   360  7a906000       constant
0xffff7ab0f2ac   364  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0f228   232  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab0f208  code target (STUB)  (0xffff7ab06820)
0xffff7ab0f220  code target (STUB)  (0xffff7ab06260)
0xffff7ab0f22c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0f240  constant pool (size 32)
0xffff7ab0f290  runtime entry
0xffff7ab0f29c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6583
type = NORMAL
name = BinaryOpICStub(ADD:Number*Number->Number)
compiler = crankshaft
Instructions (size = 389)
0xffff7ab0f140     0  tbz w1, #0, #+0x34 (addr 0xffff7ab0f174)
0xffff7ab0f144     4  ldur x16, [x1, #-1]
0xffff7ab0f148     8  ldr x17, [x26, #120]
0xffff7ab0f14c    12  cmp x16, x17
0xffff7ab0f150    16  b.ne #+0xc (addr 0xffff7ab0f15c)
0xffff7ab0f154    20  ldur d0, [x1, #7]
0xffff7ab0f158    24  b #+0x20 (addr 0xffff7ab0f178)
0xffff7ab0f15c    28  ldr x16, [x26, #40]
0xffff7ab0f160    32  cmp x1, x16
0xffff7ab0f164    36  b.ne #+0xfc (addr 0xffff7ab0f260)
0xffff7ab0f168    40  ldr x2, [x26, #928]
0xffff7ab0f16c    44  ldur d0, [x2, #7]
0xffff7ab0f170    48  b #+0x8 (addr 0xffff7ab0f178)
0xffff7ab0f174    52  scvtf d0, x1, #32
0xffff7ab0f178    56  tbz w0, #0, #+0x34 (addr 0xffff7ab0f1ac)
0xffff7ab0f17c    60  ldur x16, [x0, #-1]
0xffff7ab0f180    64  ldr x17, [x26, #120]
0xffff7ab0f184    68  cmp x16, x17
0xffff7ab0f188    72  b.ne #+0xc (addr 0xffff7ab0f194)
0xffff7ab0f18c    76  ldur d1, [x0, #7]
0xffff7ab0f190    80  b #+0x20 (addr 0xffff7ab0f1b0)
0xffff7ab0f194    84  ldr x16, [x26, #40]
0xffff7ab0f198    88  cmp x0, x16
0xffff7ab0f19c    92  b.ne #+0xd4 (addr 0xffff7ab0f270)
0xffff7ab0f1a0    96  ldr x2, [x26, #928]
0xffff7ab0f1a4   100  ldur d1, [x2, #7]
0xffff7ab0f1a8   104  b #+0x8 (addr 0xffff7ab0f1b0)
0xffff7ab0f1ac   108  scvtf d1, x0, #32
0xffff7ab0f1b0   112  fadd d0, d0, d1
0xffff7ab0f1b4   116  movz x1, #0xe2c0
0xffff7ab0f1b8   120  movk x1, #0x9ab, lsl #16
0xffff7ab0f1bc   124  ldp x2, x0, [x1]
0xffff7ab0f1c0   128  adds x16, x2, #0x10 (16)
0xffff7ab0f1c4   132  ccmp x16, x0, #nzCv, lo
0xffff7ab0f1c8   136  b.hi #+0x20 (addr 0xffff7ab0f1e8)
0xffff7ab0f1cc   140  str x16, [x1]
0xffff7ab0f1d0   144  ldr x1, [x26, #120]
0xffff7ab0f1d4   148  str x1, [x2]
0xffff7ab0f1d8   152  orr x2, x2, #0x1
0xffff7ab0f1dc   156  stur d0, [x2, #7]
0xffff7ab0f1e0   160  mov x0, x2
0xffff7ab0f1e4   164  ret
0xffff7ab0f1e8   168  sub csp, jssp, #0x10 (16)
0xffff7ab0f1ec   172  stp fp, lr, [jssp, #-16]!
0xffff7ab0f1f0   176  movz fp, #0xa00000000
0xffff7ab0f1f4   180  sub csp, jssp, #0x8 (8)
0xffff7ab0f1f8   184  str fp, [jssp, #-8]!
0xffff7ab0f1fc   188  add fp, jssp, #0x8 (8)
0xffff7ab0f200   192  movz x2, #0x0
0xffff7ab0f204   196  mov x16, lr
0xffff7ab0f208   200  ldr x17, pc+64 (addr 0x0000ffff7ab0f248)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0f20c   204  blr x17
0xffff7ab0f210   208  ldur cp, [fp, #-8]
0xffff7ab0f214   212  movz x0, #0x0
0xffff7ab0f218   216  movz x1, #0x4b48
0xffff7ab0f21c   220  movk x1, #0xe4, lsl #16
0xffff7ab0f220   224  ldr x16, pc+48 (addr 0x0000ffff7ab0f250)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0f224   228  blr x16
0xffff7ab0f228   232  str x0, [jssp, #16]
0xffff7ab0f22c   236  ldr x16, pc+44 (addr 0x0000ffff7ab0f258)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0f230   240  blr x16
0xffff7ab0f234   244  ldr lr, [jssp, #16]
0xffff7ab0f238   248  ldp xzr, fp, [jssp], #24
0xffff7ab0f23c   252  b #-0x60 (addr 0xffff7ab0f1dc)
0xffff7ab0f240   256  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0f244   260  d63f03e0       constant
0xffff7ab0f248   264  7ab06820       constant
0xffff7ab0f24c   268  0000ffff       constant
0xffff7ab0f250   272  7ab06260       constant
0xffff7ab0f254   276  0000ffff       constant
0xffff7ab0f258   280  7ab068e0       constant
0xffff7ab0f25c   284  0000ffff       constant
0xffff7ab0f260   288  movz x16, #0x0
0xffff7ab0f264   292  sub csp, jssp, #0x10 (16)
0xffff7ab0f268   296  stp fp, lr, [jssp, #-16]!
0xffff7ab0f26c   300  bl #+0x14 (addr 0xffff7ab0f280)
0xffff7ab0f270   304  movz x16, #0x8
0xffff7ab0f274   308  sub csp, jssp, #0x10 (16)
0xffff7ab0f278   312  stp fp, lr, [jssp, #-16]!
0xffff7ab0f27c   316  bl #+0x4 (addr 0xffff7ab0f280)
0xffff7ab0f280   320  movz x17, #0xa00000000
0xffff7ab0f284   324  sub csp, jssp, #0x10 (16)
0xffff7ab0f288   328  stp x17, cp, [jssp, #-16]!
0xffff7ab0f28c   332  add fp, jssp, #0x10 (16)
0xffff7ab0f290   336  ldr x17, pc+24 (addr 0x0000ffff7ab0f2a8)    ;; lazy deoptimization bailout 0
0xffff7ab0f294   340  add x17, x17, x16
0xffff7ab0f298   344  br x17
0xffff7ab0f29c   348  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0f2a0   352  d63f03e0       constant
0xffff7ab0f2a4   356  d503201f       constant
0xffff7ab0f2a8   360  7a906000       constant
0xffff7ab0f2ac   364  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0f228   232  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab0f208  code target (STUB)  (0xffff7ab06820)
0xffff7ab0f220  code target (STUB)  (0xffff7ab06260)
0xffff7ab0f22c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0f240  constant pool (size 32)
0xffff7ab0f290  runtime entry
0xffff7ab0f29c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2487
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0xffff7ab0f340     0  mov x2, x0
0xffff7ab0f344     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab0f438)
0xffff7ab0f348     8  tbz w1, #0, #+0x34 (addr 0xffff7ab0f37c)
0xffff7ab0f34c    12  ldur x16, [x1, #-1]
0xffff7ab0f350    16  ldr x17, [x26, #120]
0xffff7ab0f354    20  cmp x16, x17
0xffff7ab0f358    24  b.ne #+0xc (addr 0xffff7ab0f364)
0xffff7ab0f35c    28  ldur d0, [x1, #7]
0xffff7ab0f360    32  b #+0x20 (addr 0xffff7ab0f380)
0xffff7ab0f364    36  ldr x16, [x26, #40]
0xffff7ab0f368    40  cmp x1, x16
0xffff7ab0f36c    44  b.ne #+0xdc (addr 0xffff7ab0f448)
0xffff7ab0f370    48  ldr x3, [x26, #928]
0xffff7ab0f374    52  ldur d0, [x3, #7]
0xffff7ab0f378    56  b #+0x8 (addr 0xffff7ab0f380)
0xffff7ab0f37c    60  scvtf d0, x1, #32
0xffff7ab0f380    64  scvtf d1, x2, #32
0xffff7ab0f384    68  fadd d0, d0, d1
0xffff7ab0f388    72  movz x1, #0xe2c0
0xffff7ab0f38c    76  movk x1, #0x9ab, lsl #16
0xffff7ab0f390    80  ldp x2, x0, [x1]
0xffff7ab0f394    84  adds x16, x2, #0x10 (16)
0xffff7ab0f398    88  ccmp x16, x0, #nzCv, lo
0xffff7ab0f39c    92  b.hi #+0x20 (addr 0xffff7ab0f3bc)
0xffff7ab0f3a0    96  str x16, [x1]
0xffff7ab0f3a4   100  ldr x1, [x26, #120]
0xffff7ab0f3a8   104  str x1, [x2]
0xffff7ab0f3ac   108  orr x2, x2, #0x1
0xffff7ab0f3b0   112  stur d0, [x2, #7]
0xffff7ab0f3b4   116  mov x0, x2
0xffff7ab0f3b8   120  ret
0xffff7ab0f3bc   124  sub csp, jssp, #0x10 (16)
0xffff7ab0f3c0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab0f3c4   132  movz fp, #0xa00000000
0xffff7ab0f3c8   136  sub csp, jssp, #0x8 (8)
0xffff7ab0f3cc   140  str fp, [jssp, #-8]!
0xffff7ab0f3d0   144  add fp, jssp, #0x8 (8)
0xffff7ab0f3d4   148  movz x2, #0x0
0xffff7ab0f3d8   152  mov x16, lr
0xffff7ab0f3dc   156  ldr x17, pc+68 (addr 0x0000ffff7ab0f420)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0f3e0   160  blr x17
0xffff7ab0f3e4   164  ldur cp, [fp, #-8]
0xffff7ab0f3e8   168  movz x0, #0x0
0xffff7ab0f3ec   172  movz x1, #0x4b48
0xffff7ab0f3f0   176  movk x1, #0xe4, lsl #16
0xffff7ab0f3f4   180  ldr x16, pc+52 (addr 0x0000ffff7ab0f428)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0f3f8   184  blr x16
0xffff7ab0f3fc   188  str x0, [jssp, #16]
0xffff7ab0f400   192  ldr x16, pc+48 (addr 0x0000ffff7ab0f430)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0f404   196  blr x16
0xffff7ab0f408   200  ldr lr, [jssp, #16]
0xffff7ab0f40c   204  ldp xzr, fp, [jssp], #24
0xffff7ab0f410   208  b #-0x60 (addr 0xffff7ab0f3b0)
0xffff7ab0f414   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab0f418   216  d63f03e0       constant
0xffff7ab0f41c   220  d503201f       constant
0xffff7ab0f420   224  7ab06820       constant
0xffff7ab0f424   228  0000ffff       constant
0xffff7ab0f428   232  7ab06260       constant
0xffff7ab0f42c   236  0000ffff       constant
0xffff7ab0f430   240  7ab068e0       constant
0xffff7ab0f434   244  0000ffff       constant
0xffff7ab0f438   248  movz x16, #0x0
0xffff7ab0f43c   252  sub csp, jssp, #0x10 (16)
0xffff7ab0f440   256  stp fp, lr, [jssp, #-16]!
0xffff7ab0f444   260  bl #+0x14 (addr 0xffff7ab0f458)
0xffff7ab0f448   264  movz x16, #0x8
0xffff7ab0f44c   268  sub csp, jssp, #0x10 (16)
0xffff7ab0f450   272  stp fp, lr, [jssp, #-16]!
0xffff7ab0f454   276  bl #+0x4 (addr 0xffff7ab0f458)
0xffff7ab0f458   280  movz x17, #0xa00000000
0xffff7ab0f45c   284  sub csp, jssp, #0x10 (16)
0xffff7ab0f460   288  stp x17, cp, [jssp, #-16]!
0xffff7ab0f464   292  add fp, jssp, #0x10 (16)
0xffff7ab0f468   296  ldr x17, pc+24 (addr 0x0000ffff7ab0f480)    ;; lazy deoptimization bailout 0
0xffff7ab0f46c   300  add x17, x17, x16
0xffff7ab0f470   304  br x17
0xffff7ab0f474   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0f478   312  d63f03e0       constant
0xffff7ab0f47c   316  d503201f       constant
0xffff7ab0f480   320  7a906000       constant
0xffff7ab0f484   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0f3fc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab0f3dc  code target (STUB)  (0xffff7ab06820)
0xffff7ab0f3f4  code target (STUB)  (0xffff7ab06260)
0xffff7ab0f400  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0f414  constant pool (size 36)
0xffff7ab0f468  runtime entry
0xffff7ab0f474  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2487
type = NORMAL
name = BinaryOpICStub(ADD:Number*Smi->Number)
compiler = crankshaft
Instructions (size = 349)
0xffff7ab0f340     0  mov x2, x0
0xffff7ab0f344     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab0f438)
0xffff7ab0f348     8  tbz w1, #0, #+0x34 (addr 0xffff7ab0f37c)
0xffff7ab0f34c    12  ldur x16, [x1, #-1]
0xffff7ab0f350    16  ldr x17, [x26, #120]
0xffff7ab0f354    20  cmp x16, x17
0xffff7ab0f358    24  b.ne #+0xc (addr 0xffff7ab0f364)
0xffff7ab0f35c    28  ldur d0, [x1, #7]
0xffff7ab0f360    32  b #+0x20 (addr 0xffff7ab0f380)
0xffff7ab0f364    36  ldr x16, [x26, #40]
0xffff7ab0f368    40  cmp x1, x16
0xffff7ab0f36c    44  b.ne #+0xdc (addr 0xffff7ab0f448)
0xffff7ab0f370    48  ldr x3, [x26, #928]
0xffff7ab0f374    52  ldur d0, [x3, #7]
0xffff7ab0f378    56  b #+0x8 (addr 0xffff7ab0f380)
0xffff7ab0f37c    60  scvtf d0, x1, #32
0xffff7ab0f380    64  scvtf d1, x2, #32
0xffff7ab0f384    68  fadd d0, d0, d1
0xffff7ab0f388    72  movz x1, #0xe2c0
0xffff7ab0f38c    76  movk x1, #0x9ab, lsl #16
0xffff7ab0f390    80  ldp x2, x0, [x1]
0xffff7ab0f394    84  adds x16, x2, #0x10 (16)
0xffff7ab0f398    88  ccmp x16, x0, #nzCv, lo
0xffff7ab0f39c    92  b.hi #+0x20 (addr 0xffff7ab0f3bc)
0xffff7ab0f3a0    96  str x16, [x1]
0xffff7ab0f3a4   100  ldr x1, [x26, #120]
0xffff7ab0f3a8   104  str x1, [x2]
0xffff7ab0f3ac   108  orr x2, x2, #0x1
0xffff7ab0f3b0   112  stur d0, [x2, #7]
0xffff7ab0f3b4   116  mov x0, x2
0xffff7ab0f3b8   120  ret
0xffff7ab0f3bc   124  sub csp, jssp, #0x10 (16)
0xffff7ab0f3c0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab0f3c4   132  movz fp, #0xa00000000
0xffff7ab0f3c8   136  sub csp, jssp, #0x8 (8)
0xffff7ab0f3cc   140  str fp, [jssp, #-8]!
0xffff7ab0f3d0   144  add fp, jssp, #0x8 (8)
0xffff7ab0f3d4   148  movz x2, #0x0
0xffff7ab0f3d8   152  mov x16, lr
0xffff7ab0f3dc   156  ldr x17, pc+68 (addr 0x0000ffff7ab0f420)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0f3e0   160  blr x17
0xffff7ab0f3e4   164  ldur cp, [fp, #-8]
0xffff7ab0f3e8   168  movz x0, #0x0
0xffff7ab0f3ec   172  movz x1, #0x4b48
0xffff7ab0f3f0   176  movk x1, #0xe4, lsl #16
0xffff7ab0f3f4   180  ldr x16, pc+52 (addr 0x0000ffff7ab0f428)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0f3f8   184  blr x16
0xffff7ab0f3fc   188  str x0, [jssp, #16]
0xffff7ab0f400   192  ldr x16, pc+48 (addr 0x0000ffff7ab0f430)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0f404   196  blr x16
0xffff7ab0f408   200  ldr lr, [jssp, #16]
0xffff7ab0f40c   204  ldp xzr, fp, [jssp], #24
0xffff7ab0f410   208  b #-0x60 (addr 0xffff7ab0f3b0)
0xffff7ab0f414   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab0f418   216  d63f03e0       constant
0xffff7ab0f41c   220  d503201f       constant
0xffff7ab0f420   224  7ab06820       constant
0xffff7ab0f424   228  0000ffff       constant
0xffff7ab0f428   232  7ab06260       constant
0xffff7ab0f42c   236  0000ffff       constant
0xffff7ab0f430   240  7ab068e0       constant
0xffff7ab0f434   244  0000ffff       constant
0xffff7ab0f438   248  movz x16, #0x0
0xffff7ab0f43c   252  sub csp, jssp, #0x10 (16)
0xffff7ab0f440   256  stp fp, lr, [jssp, #-16]!
0xffff7ab0f444   260  bl #+0x14 (addr 0xffff7ab0f458)
0xffff7ab0f448   264  movz x16, #0x8
0xffff7ab0f44c   268  sub csp, jssp, #0x10 (16)
0xffff7ab0f450   272  stp fp, lr, [jssp, #-16]!
0xffff7ab0f454   276  bl #+0x4 (addr 0xffff7ab0f458)
0xffff7ab0f458   280  movz x17, #0xa00000000
0xffff7ab0f45c   284  sub csp, jssp, #0x10 (16)
0xffff7ab0f460   288  stp x17, cp, [jssp, #-16]!
0xffff7ab0f464   292  add fp, jssp, #0x10 (16)
0xffff7ab0f468   296  ldr x17, pc+24 (addr 0x0000ffff7ab0f480)    ;; lazy deoptimization bailout 0
0xffff7ab0f46c   300  add x17, x17, x16
0xffff7ab0f470   304  br x17
0xffff7ab0f474   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0f478   312  d63f03e0       constant
0xffff7ab0f47c   316  d503201f       constant
0xffff7ab0f480   320  7a906000       constant
0xffff7ab0f484   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0f3fc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab0f3dc  code target (STUB)  (0xffff7ab06820)
0xffff7ab0f3f4  code target (STUB)  (0xffff7ab06260)
0xffff7ab0f400  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0f414  constant pool (size 36)
0xffff7ab0f468  runtime entry
0xffff7ab0f474  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4263
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0xffff7ab0f500     0  mov x2, x1
0xffff7ab0f504     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab0f520)
0xffff7ab0f508     8  mov x3, x0
0xffff7ab0f50c    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab0f530)
0xffff7ab0f510    16  adds x2, x3, x2
0xffff7ab0f514    20  b.vs #+0x2c (addr 0xffff7ab0f540)
0xffff7ab0f518    24  mov x0, x2
0xffff7ab0f51c    28  ret
0xffff7ab0f520    32  movz x16, #0x0
0xffff7ab0f524    36  sub csp, jssp, #0x10 (16)
0xffff7ab0f528    40  stp fp, lr, [jssp, #-16]!
0xffff7ab0f52c    44  bl #+0x24 (addr 0xffff7ab0f550)
0xffff7ab0f530    48  movz x16, #0x8
0xffff7ab0f534    52  sub csp, jssp, #0x10 (16)
0xffff7ab0f538    56  stp fp, lr, [jssp, #-16]!
0xffff7ab0f53c    60  bl #+0x14 (addr 0xffff7ab0f550)
0xffff7ab0f540    64  movz x16, #0x10
0xffff7ab0f544    68  sub csp, jssp, #0x10 (16)
0xffff7ab0f548    72  stp fp, lr, [jssp, #-16]!
0xffff7ab0f54c    76  bl #+0x4 (addr 0xffff7ab0f550)
0xffff7ab0f550    80  movz x17, #0xa00000000
0xffff7ab0f554    84  sub csp, jssp, #0x10 (16)
0xffff7ab0f558    88  stp x17, cp, [jssp, #-16]!
0xffff7ab0f55c    92  add fp, jssp, #0x10 (16)
0xffff7ab0f560    96  ldr x17, pc+24 (addr 0x0000ffff7ab0f578)    ;; lazy deoptimization bailout 0
0xffff7ab0f564   100  add x17, x17, x16
0xffff7ab0f568   104  br x17
0xffff7ab0f56c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0f570   112  d63f03e0       constant
0xffff7ab0f574   116  d503201f       constant
0xffff7ab0f578   120  7a906000       constant
0xffff7ab0f57c   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0f560  runtime entry
0xffff7ab0f56c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4263
type = NORMAL
name = BinaryOpICStub(ADD:Smi*Int32->Int32)
compiler = crankshaft
Instructions (size = 136)
0xffff7ab0f500     0  mov x2, x1
0xffff7ab0f504     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab0f520)
0xffff7ab0f508     8  mov x3, x0
0xffff7ab0f50c    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab0f530)
0xffff7ab0f510    16  adds x2, x3, x2
0xffff7ab0f514    20  b.vs #+0x2c (addr 0xffff7ab0f540)
0xffff7ab0f518    24  mov x0, x2
0xffff7ab0f51c    28  ret
0xffff7ab0f520    32  movz x16, #0x0
0xffff7ab0f524    36  sub csp, jssp, #0x10 (16)
0xffff7ab0f528    40  stp fp, lr, [jssp, #-16]!
0xffff7ab0f52c    44  bl #+0x24 (addr 0xffff7ab0f550)
0xffff7ab0f530    48  movz x16, #0x8
0xffff7ab0f534    52  sub csp, jssp, #0x10 (16)
0xffff7ab0f538    56  stp fp, lr, [jssp, #-16]!
0xffff7ab0f53c    60  bl #+0x14 (addr 0xffff7ab0f550)
0xffff7ab0f540    64  movz x16, #0x10
0xffff7ab0f544    68  sub csp, jssp, #0x10 (16)
0xffff7ab0f548    72  stp fp, lr, [jssp, #-16]!
0xffff7ab0f54c    76  bl #+0x4 (addr 0xffff7ab0f550)
0xffff7ab0f550    80  movz x17, #0xa00000000
0xffff7ab0f554    84  sub csp, jssp, #0x10 (16)
0xffff7ab0f558    88  stp x17, cp, [jssp, #-16]!
0xffff7ab0f55c    92  add fp, jssp, #0x10 (16)
0xffff7ab0f560    96  ldr x17, pc+24 (addr 0x0000ffff7ab0f578)    ;; lazy deoptimization bailout 0
0xffff7ab0f564   100  add x17, x17, x16
0xffff7ab0f568   104  br x17
0xffff7ab0f56c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0f570   112  d63f03e0       constant
0xffff7ab0f574   116  d503201f       constant
0xffff7ab0f578   120  7a906000       constant
0xffff7ab0f57c   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0f560  runtime entry
0xffff7ab0f56c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4279
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0xffff7ab0f600     0  mov x2, x1
0xffff7ab0f604     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab0f6c8)
0xffff7ab0f608     8  mov x3, x0
0xffff7ab0f60c    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab0f6d8)
0xffff7ab0f610    16  scvtf d0, x2, #32
0xffff7ab0f614    20  scvtf d1, x3, #32
0xffff7ab0f618    24  fadd d0, d0, d1
0xffff7ab0f61c    28  movz x1, #0xe2c0
0xffff7ab0f620    32  movk x1, #0x9ab, lsl #16
0xffff7ab0f624    36  ldp x2, x0, [x1]
0xffff7ab0f628    40  adds x16, x2, #0x10 (16)
0xffff7ab0f62c    44  ccmp x16, x0, #nzCv, lo
0xffff7ab0f630    48  b.hi #+0x20 (addr 0xffff7ab0f650)
0xffff7ab0f634    52  str x16, [x1]
0xffff7ab0f638    56  ldr x1, [x26, #120]
0xffff7ab0f63c    60  str x1, [x2]
0xffff7ab0f640    64  orr x2, x2, #0x1
0xffff7ab0f644    68  stur d0, [x2, #7]
0xffff7ab0f648    72  mov x0, x2
0xffff7ab0f64c    76  ret
0xffff7ab0f650    80  sub csp, jssp, #0x10 (16)
0xffff7ab0f654    84  stp fp, lr, [jssp, #-16]!
0xffff7ab0f658    88  movz fp, #0xa00000000
0xffff7ab0f65c    92  sub csp, jssp, #0x8 (8)
0xffff7ab0f660    96  str fp, [jssp, #-8]!
0xffff7ab0f664   100  add fp, jssp, #0x8 (8)
0xffff7ab0f668   104  movz x2, #0x0
0xffff7ab0f66c   108  mov x16, lr
0xffff7ab0f670   112  ldr x17, pc+64 (addr 0x0000ffff7ab0f6b0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0f674   116  blr x17
0xffff7ab0f678   120  ldur cp, [fp, #-8]
0xffff7ab0f67c   124  movz x0, #0x0
0xffff7ab0f680   128  movz x1, #0x4b48
0xffff7ab0f684   132  movk x1, #0xe4, lsl #16
0xffff7ab0f688   136  ldr x16, pc+48 (addr 0x0000ffff7ab0f6b8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0f68c   140  blr x16
0xffff7ab0f690   144  str x0, [jssp, #16]
0xffff7ab0f694   148  ldr x16, pc+44 (addr 0x0000ffff7ab0f6c0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0f698   152  blr x16
0xffff7ab0f69c   156  ldr lr, [jssp, #16]
0xffff7ab0f6a0   160  ldp xzr, fp, [jssp], #24
0xffff7ab0f6a4   164  b #-0x60 (addr 0xffff7ab0f644)
0xffff7ab0f6a8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0f6ac   172  d63f03e0       constant
0xffff7ab0f6b0   176  7ab06820       constant
0xffff7ab0f6b4   180  0000ffff       constant
0xffff7ab0f6b8   184  7ab06260       constant
0xffff7ab0f6bc   188  0000ffff       constant
0xffff7ab0f6c0   192  7ab068e0       constant
0xffff7ab0f6c4   196  0000ffff       constant
0xffff7ab0f6c8   200  movz x16, #0x0
0xffff7ab0f6cc   204  sub csp, jssp, #0x10 (16)
0xffff7ab0f6d0   208  stp fp, lr, [jssp, #-16]!
0xffff7ab0f6d4   212  bl #+0x14 (addr 0xffff7ab0f6e8)
0xffff7ab0f6d8   216  movz x16, #0x8
0xffff7ab0f6dc   220  sub csp, jssp, #0x10 (16)
0xffff7ab0f6e0   224  stp fp, lr, [jssp, #-16]!
0xffff7ab0f6e4   228  bl #+0x4 (addr 0xffff7ab0f6e8)
0xffff7ab0f6e8   232  movz x17, #0xa00000000
0xffff7ab0f6ec   236  sub csp, jssp, #0x10 (16)
0xffff7ab0f6f0   240  stp x17, cp, [jssp, #-16]!
0xffff7ab0f6f4   244  add fp, jssp, #0x10 (16)
0xffff7ab0f6f8   248  ldr x17, pc+24 (addr 0x0000ffff7ab0f710)    ;; lazy deoptimization bailout 0
0xffff7ab0f6fc   252  add x17, x17, x16
0xffff7ab0f700   256  br x17
0xffff7ab0f704   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0f708   264  d63f03e0       constant
0xffff7ab0f70c   268  d503201f       constant
0xffff7ab0f710   272  7a906000       constant
0xffff7ab0f714   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0f690   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab0f670  code target (STUB)  (0xffff7ab06820)
0xffff7ab0f688  code target (STUB)  (0xffff7ab06260)
0xffff7ab0f694  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0f6a8  constant pool (size 32)
0xffff7ab0f6f8  runtime entry
0xffff7ab0f704  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4279
type = NORMAL
name = BinaryOpICStub(ADD:Smi*Int32->Number)
compiler = crankshaft
Instructions (size = 301)
0xffff7ab0f600     0  mov x2, x1
0xffff7ab0f604     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab0f6c8)
0xffff7ab0f608     8  mov x3, x0
0xffff7ab0f60c    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab0f6d8)
0xffff7ab0f610    16  scvtf d0, x2, #32
0xffff7ab0f614    20  scvtf d1, x3, #32
0xffff7ab0f618    24  fadd d0, d0, d1
0xffff7ab0f61c    28  movz x1, #0xe2c0
0xffff7ab0f620    32  movk x1, #0x9ab, lsl #16
0xffff7ab0f624    36  ldp x2, x0, [x1]
0xffff7ab0f628    40  adds x16, x2, #0x10 (16)
0xffff7ab0f62c    44  ccmp x16, x0, #nzCv, lo
0xffff7ab0f630    48  b.hi #+0x20 (addr 0xffff7ab0f650)
0xffff7ab0f634    52  str x16, [x1]
0xffff7ab0f638    56  ldr x1, [x26, #120]
0xffff7ab0f63c    60  str x1, [x2]
0xffff7ab0f640    64  orr x2, x2, #0x1
0xffff7ab0f644    68  stur d0, [x2, #7]
0xffff7ab0f648    72  mov x0, x2
0xffff7ab0f64c    76  ret
0xffff7ab0f650    80  sub csp, jssp, #0x10 (16)
0xffff7ab0f654    84  stp fp, lr, [jssp, #-16]!
0xffff7ab0f658    88  movz fp, #0xa00000000
0xffff7ab0f65c    92  sub csp, jssp, #0x8 (8)
0xffff7ab0f660    96  str fp, [jssp, #-8]!
0xffff7ab0f664   100  add fp, jssp, #0x8 (8)
0xffff7ab0f668   104  movz x2, #0x0
0xffff7ab0f66c   108  mov x16, lr
0xffff7ab0f670   112  ldr x17, pc+64 (addr 0x0000ffff7ab0f6b0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0f674   116  blr x17
0xffff7ab0f678   120  ldur cp, [fp, #-8]
0xffff7ab0f67c   124  movz x0, #0x0
0xffff7ab0f680   128  movz x1, #0x4b48
0xffff7ab0f684   132  movk x1, #0xe4, lsl #16
0xffff7ab0f688   136  ldr x16, pc+48 (addr 0x0000ffff7ab0f6b8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0f68c   140  blr x16
0xffff7ab0f690   144  str x0, [jssp, #16]
0xffff7ab0f694   148  ldr x16, pc+44 (addr 0x0000ffff7ab0f6c0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0f698   152  blr x16
0xffff7ab0f69c   156  ldr lr, [jssp, #16]
0xffff7ab0f6a0   160  ldp xzr, fp, [jssp], #24
0xffff7ab0f6a4   164  b #-0x60 (addr 0xffff7ab0f644)
0xffff7ab0f6a8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab0f6ac   172  d63f03e0       constant
0xffff7ab0f6b0   176  7ab06820       constant
0xffff7ab0f6b4   180  0000ffff       constant
0xffff7ab0f6b8   184  7ab06260       constant
0xffff7ab0f6bc   188  0000ffff       constant
0xffff7ab0f6c0   192  7ab068e0       constant
0xffff7ab0f6c4   196  0000ffff       constant
0xffff7ab0f6c8   200  movz x16, #0x0
0xffff7ab0f6cc   204  sub csp, jssp, #0x10 (16)
0xffff7ab0f6d0   208  stp fp, lr, [jssp, #-16]!
0xffff7ab0f6d4   212  bl #+0x14 (addr 0xffff7ab0f6e8)
0xffff7ab0f6d8   216  movz x16, #0x8
0xffff7ab0f6dc   220  sub csp, jssp, #0x10 (16)
0xffff7ab0f6e0   224  stp fp, lr, [jssp, #-16]!
0xffff7ab0f6e4   228  bl #+0x4 (addr 0xffff7ab0f6e8)
0xffff7ab0f6e8   232  movz x17, #0xa00000000
0xffff7ab0f6ec   236  sub csp, jssp, #0x10 (16)
0xffff7ab0f6f0   240  stp x17, cp, [jssp, #-16]!
0xffff7ab0f6f4   244  add fp, jssp, #0x10 (16)
0xffff7ab0f6f8   248  ldr x17, pc+24 (addr 0x0000ffff7ab0f710)    ;; lazy deoptimization bailout 0
0xffff7ab0f6fc   252  add x17, x17, x16
0xffff7ab0f700   256  br x17
0xffff7ab0f704   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0f708   264  d63f03e0       constant
0xffff7ab0f70c   268  d503201f       constant
0xffff7ab0f710   272  7a906000       constant
0xffff7ab0f714   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0f690   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab0f670  code target (STUB)  (0xffff7ab06820)
0xffff7ab0f688  code target (STUB)  (0xffff7ab06260)
0xffff7ab0f694  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0f6a8  constant pool (size 32)
0xffff7ab0f6f8  runtime entry
0xffff7ab0f704  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6327
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0xffff7ab0f7a0     0  mov x2, x1
0xffff7ab0f7a4     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab0f898)
0xffff7ab0f7a8     8  tbz w0, #0, #+0x34 (addr 0xffff7ab0f7dc)
0xffff7ab0f7ac    12  ldur x16, [x0, #-1]
0xffff7ab0f7b0    16  ldr x17, [x26, #120]
0xffff7ab0f7b4    20  cmp x16, x17
0xffff7ab0f7b8    24  b.ne #+0xc (addr 0xffff7ab0f7c4)
0xffff7ab0f7bc    28  ldur d0, [x0, #7]
0xffff7ab0f7c0    32  b #+0x20 (addr 0xffff7ab0f7e0)
0xffff7ab0f7c4    36  ldr x16, [x26, #40]
0xffff7ab0f7c8    40  cmp x0, x16
0xffff7ab0f7cc    44  b.ne #+0xdc (addr 0xffff7ab0f8a8)
0xffff7ab0f7d0    48  ldr x3, [x26, #928]
0xffff7ab0f7d4    52  ldur d0, [x3, #7]
0xffff7ab0f7d8    56  b #+0x8 (addr 0xffff7ab0f7e0)
0xffff7ab0f7dc    60  scvtf d0, x0, #32
0xffff7ab0f7e0    64  scvtf d1, x2, #32
0xffff7ab0f7e4    68  fadd d0, d1, d0
0xffff7ab0f7e8    72  movz x1, #0xe2c0
0xffff7ab0f7ec    76  movk x1, #0x9ab, lsl #16
0xffff7ab0f7f0    80  ldp x2, x0, [x1]
0xffff7ab0f7f4    84  adds x16, x2, #0x10 (16)
0xffff7ab0f7f8    88  ccmp x16, x0, #nzCv, lo
0xffff7ab0f7fc    92  b.hi #+0x20 (addr 0xffff7ab0f81c)
0xffff7ab0f800    96  str x16, [x1]
0xffff7ab0f804   100  ldr x1, [x26, #120]
0xffff7ab0f808   104  str x1, [x2]
0xffff7ab0f80c   108  orr x2, x2, #0x1
0xffff7ab0f810   112  stur d0, [x2, #7]
0xffff7ab0f814   116  mov x0, x2
0xffff7ab0f818   120  ret
0xffff7ab0f81c   124  sub csp, jssp, #0x10 (16)
0xffff7ab0f820   128  stp fp, lr, [jssp, #-16]!
0xffff7ab0f824   132  movz fp, #0xa00000000
0xffff7ab0f828   136  sub csp, jssp, #0x8 (8)
0xffff7ab0f82c   140  str fp, [jssp, #-8]!
0xffff7ab0f830   144  add fp, jssp, #0x8 (8)
0xffff7ab0f834   148  movz x2, #0x0
0xffff7ab0f838   152  mov x16, lr
0xffff7ab0f83c   156  ldr x17, pc+68 (addr 0x0000ffff7ab0f880)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0f840   160  blr x17
0xffff7ab0f844   164  ldur cp, [fp, #-8]
0xffff7ab0f848   168  movz x0, #0x0
0xffff7ab0f84c   172  movz x1, #0x4b48
0xffff7ab0f850   176  movk x1, #0xe4, lsl #16
0xffff7ab0f854   180  ldr x16, pc+52 (addr 0x0000ffff7ab0f888)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0f858   184  blr x16
0xffff7ab0f85c   188  str x0, [jssp, #16]
0xffff7ab0f860   192  ldr x16, pc+48 (addr 0x0000ffff7ab0f890)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0f864   196  blr x16
0xffff7ab0f868   200  ldr lr, [jssp, #16]
0xffff7ab0f86c   204  ldp xzr, fp, [jssp], #24
0xffff7ab0f870   208  b #-0x60 (addr 0xffff7ab0f810)
0xffff7ab0f874   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab0f878   216  d63f03e0       constant
0xffff7ab0f87c   220  d503201f       constant
0xffff7ab0f880   224  7ab06820       constant
0xffff7ab0f884   228  0000ffff       constant
0xffff7ab0f888   232  7ab06260       constant
0xffff7ab0f88c   236  0000ffff       constant
0xffff7ab0f890   240  7ab068e0       constant
0xffff7ab0f894   244  0000ffff       constant
0xffff7ab0f898   248  movz x16, #0x0
0xffff7ab0f89c   252  sub csp, jssp, #0x10 (16)
0xffff7ab0f8a0   256  stp fp, lr, [jssp, #-16]!
0xffff7ab0f8a4   260  bl #+0x14 (addr 0xffff7ab0f8b8)
0xffff7ab0f8a8   264  movz x16, #0x8
0xffff7ab0f8ac   268  sub csp, jssp, #0x10 (16)
0xffff7ab0f8b0   272  stp fp, lr, [jssp, #-16]!
0xffff7ab0f8b4   276  bl #+0x4 (addr 0xffff7ab0f8b8)
0xffff7ab0f8b8   280  movz x17, #0xa00000000
0xffff7ab0f8bc   284  sub csp, jssp, #0x10 (16)
0xffff7ab0f8c0   288  stp x17, cp, [jssp, #-16]!
0xffff7ab0f8c4   292  add fp, jssp, #0x10 (16)
0xffff7ab0f8c8   296  ldr x17, pc+24 (addr 0x0000ffff7ab0f8e0)    ;; lazy deoptimization bailout 0
0xffff7ab0f8cc   300  add x17, x17, x16
0xffff7ab0f8d0   304  br x17
0xffff7ab0f8d4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0f8d8   312  d63f03e0       constant
0xffff7ab0f8dc   316  d503201f       constant
0xffff7ab0f8e0   320  7a906000       constant
0xffff7ab0f8e4   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0f85c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab0f83c  code target (STUB)  (0xffff7ab06820)
0xffff7ab0f854  code target (STUB)  (0xffff7ab06260)
0xffff7ab0f860  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0f874  constant pool (size 36)
0xffff7ab0f8c8  runtime entry
0xffff7ab0f8d4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6327
type = NORMAL
name = BinaryOpICStub(ADD:Smi*Number->Number)
compiler = crankshaft
Instructions (size = 349)
0xffff7ab0f7a0     0  mov x2, x1
0xffff7ab0f7a4     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab0f898)
0xffff7ab0f7a8     8  tbz w0, #0, #+0x34 (addr 0xffff7ab0f7dc)
0xffff7ab0f7ac    12  ldur x16, [x0, #-1]
0xffff7ab0f7b0    16  ldr x17, [x26, #120]
0xffff7ab0f7b4    20  cmp x16, x17
0xffff7ab0f7b8    24  b.ne #+0xc (addr 0xffff7ab0f7c4)
0xffff7ab0f7bc    28  ldur d0, [x0, #7]
0xffff7ab0f7c0    32  b #+0x20 (addr 0xffff7ab0f7e0)
0xffff7ab0f7c4    36  ldr x16, [x26, #40]
0xffff7ab0f7c8    40  cmp x0, x16
0xffff7ab0f7cc    44  b.ne #+0xdc (addr 0xffff7ab0f8a8)
0xffff7ab0f7d0    48  ldr x3, [x26, #928]
0xffff7ab0f7d4    52  ldur d0, [x3, #7]
0xffff7ab0f7d8    56  b #+0x8 (addr 0xffff7ab0f7e0)
0xffff7ab0f7dc    60  scvtf d0, x0, #32
0xffff7ab0f7e0    64  scvtf d1, x2, #32
0xffff7ab0f7e4    68  fadd d0, d1, d0
0xffff7ab0f7e8    72  movz x1, #0xe2c0
0xffff7ab0f7ec    76  movk x1, #0x9ab, lsl #16
0xffff7ab0f7f0    80  ldp x2, x0, [x1]
0xffff7ab0f7f4    84  adds x16, x2, #0x10 (16)
0xffff7ab0f7f8    88  ccmp x16, x0, #nzCv, lo
0xffff7ab0f7fc    92  b.hi #+0x20 (addr 0xffff7ab0f81c)
0xffff7ab0f800    96  str x16, [x1]
0xffff7ab0f804   100  ldr x1, [x26, #120]
0xffff7ab0f808   104  str x1, [x2]
0xffff7ab0f80c   108  orr x2, x2, #0x1
0xffff7ab0f810   112  stur d0, [x2, #7]
0xffff7ab0f814   116  mov x0, x2
0xffff7ab0f818   120  ret
0xffff7ab0f81c   124  sub csp, jssp, #0x10 (16)
0xffff7ab0f820   128  stp fp, lr, [jssp, #-16]!
0xffff7ab0f824   132  movz fp, #0xa00000000
0xffff7ab0f828   136  sub csp, jssp, #0x8 (8)
0xffff7ab0f82c   140  str fp, [jssp, #-8]!
0xffff7ab0f830   144  add fp, jssp, #0x8 (8)
0xffff7ab0f834   148  movz x2, #0x0
0xffff7ab0f838   152  mov x16, lr
0xffff7ab0f83c   156  ldr x17, pc+68 (addr 0x0000ffff7ab0f880)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab0f840   160  blr x17
0xffff7ab0f844   164  ldur cp, [fp, #-8]
0xffff7ab0f848   168  movz x0, #0x0
0xffff7ab0f84c   172  movz x1, #0x4b48
0xffff7ab0f850   176  movk x1, #0xe4, lsl #16
0xffff7ab0f854   180  ldr x16, pc+52 (addr 0x0000ffff7ab0f888)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab0f858   184  blr x16
0xffff7ab0f85c   188  str x0, [jssp, #16]
0xffff7ab0f860   192  ldr x16, pc+48 (addr 0x0000ffff7ab0f890)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab0f864   196  blr x16
0xffff7ab0f868   200  ldr lr, [jssp, #16]
0xffff7ab0f86c   204  ldp xzr, fp, [jssp], #24
0xffff7ab0f870   208  b #-0x60 (addr 0xffff7ab0f810)
0xffff7ab0f874   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab0f878   216  d63f03e0       constant
0xffff7ab0f87c   220  d503201f       constant
0xffff7ab0f880   224  7ab06820       constant
0xffff7ab0f884   228  0000ffff       constant
0xffff7ab0f888   232  7ab06260       constant
0xffff7ab0f88c   236  0000ffff       constant
0xffff7ab0f890   240  7ab068e0       constant
0xffff7ab0f894   244  0000ffff       constant
0xffff7ab0f898   248  movz x16, #0x0
0xffff7ab0f89c   252  sub csp, jssp, #0x10 (16)
0xffff7ab0f8a0   256  stp fp, lr, [jssp, #-16]!
0xffff7ab0f8a4   260  bl #+0x14 (addr 0xffff7ab0f8b8)
0xffff7ab0f8a8   264  movz x16, #0x8
0xffff7ab0f8ac   268  sub csp, jssp, #0x10 (16)
0xffff7ab0f8b0   272  stp fp, lr, [jssp, #-16]!
0xffff7ab0f8b4   276  bl #+0x4 (addr 0xffff7ab0f8b8)
0xffff7ab0f8b8   280  movz x17, #0xa00000000
0xffff7ab0f8bc   284  sub csp, jssp, #0x10 (16)
0xffff7ab0f8c0   288  stp x17, cp, [jssp, #-16]!
0xffff7ab0f8c4   292  add fp, jssp, #0x10 (16)
0xffff7ab0f8c8   296  ldr x17, pc+24 (addr 0x0000ffff7ab0f8e0)    ;; lazy deoptimization bailout 0
0xffff7ab0f8cc   300  add x17, x17, x16
0xffff7ab0f8d0   304  br x17
0xffff7ab0f8d4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0f8d8   312  d63f03e0       constant
0xffff7ab0f8dc   316  d503201f       constant
0xffff7ab0f8e0   320  7a906000       constant
0xffff7ab0f8e4   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab0f85c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab0f83c  code target (STUB)  (0xffff7ab06820)
0xffff7ab0f854  code target (STUB)  (0xffff7ab06260)
0xffff7ab0f860  code target (STUB)  (0xffff7ab068e0)
0xffff7ab0f874  constant pool (size 36)
0xffff7ab0f8c8  runtime entry
0xffff7ab0f8d4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2215
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0xffff7ab0f960     0  mov x2, x1
0xffff7ab0f964     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab0f980)
0xffff7ab0f968     8  mov x3, x0
0xffff7ab0f96c    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab0f990)
0xffff7ab0f970    16  adds x2, x3, x2
0xffff7ab0f974    20  b.vs #+0x2c (addr 0xffff7ab0f9a0)
0xffff7ab0f978    24  mov x0, x2
0xffff7ab0f97c    28  ret
0xffff7ab0f980    32  movz x16, #0x0
0xffff7ab0f984    36  sub csp, jssp, #0x10 (16)
0xffff7ab0f988    40  stp fp, lr, [jssp, #-16]!
0xffff7ab0f98c    44  bl #+0x24 (addr 0xffff7ab0f9b0)
0xffff7ab0f990    48  movz x16, #0x8
0xffff7ab0f994    52  sub csp, jssp, #0x10 (16)
0xffff7ab0f998    56  stp fp, lr, [jssp, #-16]!
0xffff7ab0f99c    60  bl #+0x14 (addr 0xffff7ab0f9b0)
0xffff7ab0f9a0    64  movz x16, #0x10
0xffff7ab0f9a4    68  sub csp, jssp, #0x10 (16)
0xffff7ab0f9a8    72  stp fp, lr, [jssp, #-16]!
0xffff7ab0f9ac    76  bl #+0x4 (addr 0xffff7ab0f9b0)
0xffff7ab0f9b0    80  movz x17, #0xa00000000
0xffff7ab0f9b4    84  sub csp, jssp, #0x10 (16)
0xffff7ab0f9b8    88  stp x17, cp, [jssp, #-16]!
0xffff7ab0f9bc    92  add fp, jssp, #0x10 (16)
0xffff7ab0f9c0    96  ldr x17, pc+24 (addr 0x0000ffff7ab0f9d8)    ;; lazy deoptimization bailout 0
0xffff7ab0f9c4   100  add x17, x17, x16
0xffff7ab0f9c8   104  br x17
0xffff7ab0f9cc   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0f9d0   112  d63f03e0       constant
0xffff7ab0f9d4   116  d503201f       constant
0xffff7ab0f9d8   120  7a906000       constant
0xffff7ab0f9dc   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0f9c0  runtime entry
0xffff7ab0f9cc  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2215
type = NORMAL
name = BinaryOpICStub(ADD:Smi*Smi->Int32)
compiler = crankshaft
Instructions (size = 136)
0xffff7ab0f960     0  mov x2, x1
0xffff7ab0f964     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab0f980)
0xffff7ab0f968     8  mov x3, x0
0xffff7ab0f96c    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab0f990)
0xffff7ab0f970    16  adds x2, x3, x2
0xffff7ab0f974    20  b.vs #+0x2c (addr 0xffff7ab0f9a0)
0xffff7ab0f978    24  mov x0, x2
0xffff7ab0f97c    28  ret
0xffff7ab0f980    32  movz x16, #0x0
0xffff7ab0f984    36  sub csp, jssp, #0x10 (16)
0xffff7ab0f988    40  stp fp, lr, [jssp, #-16]!
0xffff7ab0f98c    44  bl #+0x24 (addr 0xffff7ab0f9b0)
0xffff7ab0f990    48  movz x16, #0x8
0xffff7ab0f994    52  sub csp, jssp, #0x10 (16)
0xffff7ab0f998    56  stp fp, lr, [jssp, #-16]!
0xffff7ab0f99c    60  bl #+0x14 (addr 0xffff7ab0f9b0)
0xffff7ab0f9a0    64  movz x16, #0x10
0xffff7ab0f9a4    68  sub csp, jssp, #0x10 (16)
0xffff7ab0f9a8    72  stp fp, lr, [jssp, #-16]!
0xffff7ab0f9ac    76  bl #+0x4 (addr 0xffff7ab0f9b0)
0xffff7ab0f9b0    80  movz x17, #0xa00000000
0xffff7ab0f9b4    84  sub csp, jssp, #0x10 (16)
0xffff7ab0f9b8    88  stp x17, cp, [jssp, #-16]!
0xffff7ab0f9bc    92  add fp, jssp, #0x10 (16)
0xffff7ab0f9c0    96  ldr x17, pc+24 (addr 0x0000ffff7ab0f9d8)    ;; lazy deoptimization bailout 0
0xffff7ab0f9c4   100  add x17, x17, x16
0xffff7ab0f9c8   104  br x17
0xffff7ab0f9cc   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0f9d0   112  d63f03e0       constant
0xffff7ab0f9d4   116  d503201f       constant
0xffff7ab0f9d8   120  7a906000       constant
0xffff7ab0f9dc   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0f9c0  runtime entry
0xffff7ab0f9cc  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2199
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0xffff7ab0fa60     0  mov x2, x1
0xffff7ab0fa64     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab0fa80)
0xffff7ab0fa68     8  mov x3, x0
0xffff7ab0fa6c    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab0fa90)
0xffff7ab0fa70    16  adds x2, x3, x2
0xffff7ab0fa74    20  b.vs #+0x2c (addr 0xffff7ab0faa0)
0xffff7ab0fa78    24  mov x0, x2
0xffff7ab0fa7c    28  ret
0xffff7ab0fa80    32  movz x16, #0x0
0xffff7ab0fa84    36  sub csp, jssp, #0x10 (16)
0xffff7ab0fa88    40  stp fp, lr, [jssp, #-16]!
0xffff7ab0fa8c    44  bl #+0x24 (addr 0xffff7ab0fab0)
0xffff7ab0fa90    48  movz x16, #0x8
0xffff7ab0fa94    52  sub csp, jssp, #0x10 (16)
0xffff7ab0fa98    56  stp fp, lr, [jssp, #-16]!
0xffff7ab0fa9c    60  bl #+0x14 (addr 0xffff7ab0fab0)
0xffff7ab0faa0    64  movz x16, #0x10
0xffff7ab0faa4    68  sub csp, jssp, #0x10 (16)
0xffff7ab0faa8    72  stp fp, lr, [jssp, #-16]!
0xffff7ab0faac    76  bl #+0x4 (addr 0xffff7ab0fab0)
0xffff7ab0fab0    80  movz x17, #0xa00000000
0xffff7ab0fab4    84  sub csp, jssp, #0x10 (16)
0xffff7ab0fab8    88  stp x17, cp, [jssp, #-16]!
0xffff7ab0fabc    92  add fp, jssp, #0x10 (16)
0xffff7ab0fac0    96  ldr x17, pc+24 (addr 0x0000ffff7ab0fad8)    ;; lazy deoptimization bailout 0
0xffff7ab0fac4   100  add x17, x17, x16
0xffff7ab0fac8   104  br x17
0xffff7ab0facc   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0fad0   112  d63f03e0       constant
0xffff7ab0fad4   116  d503201f       constant
0xffff7ab0fad8   120  7a906000       constant
0xffff7ab0fadc   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0fac0  runtime entry
0xffff7ab0facc  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2199
type = NORMAL
name = BinaryOpICStub(ADD:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 136)
0xffff7ab0fa60     0  mov x2, x1
0xffff7ab0fa64     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab0fa80)
0xffff7ab0fa68     8  mov x3, x0
0xffff7ab0fa6c    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab0fa90)
0xffff7ab0fa70    16  adds x2, x3, x2
0xffff7ab0fa74    20  b.vs #+0x2c (addr 0xffff7ab0faa0)
0xffff7ab0fa78    24  mov x0, x2
0xffff7ab0fa7c    28  ret
0xffff7ab0fa80    32  movz x16, #0x0
0xffff7ab0fa84    36  sub csp, jssp, #0x10 (16)
0xffff7ab0fa88    40  stp fp, lr, [jssp, #-16]!
0xffff7ab0fa8c    44  bl #+0x24 (addr 0xffff7ab0fab0)
0xffff7ab0fa90    48  movz x16, #0x8
0xffff7ab0fa94    52  sub csp, jssp, #0x10 (16)
0xffff7ab0fa98    56  stp fp, lr, [jssp, #-16]!
0xffff7ab0fa9c    60  bl #+0x14 (addr 0xffff7ab0fab0)
0xffff7ab0faa0    64  movz x16, #0x10
0xffff7ab0faa4    68  sub csp, jssp, #0x10 (16)
0xffff7ab0faa8    72  stp fp, lr, [jssp, #-16]!
0xffff7ab0faac    76  bl #+0x4 (addr 0xffff7ab0fab0)
0xffff7ab0fab0    80  movz x17, #0xa00000000
0xffff7ab0fab4    84  sub csp, jssp, #0x10 (16)
0xffff7ab0fab8    88  stp x17, cp, [jssp, #-16]!
0xffff7ab0fabc    92  add fp, jssp, #0x10 (16)
0xffff7ab0fac0    96  ldr x17, pc+24 (addr 0x0000ffff7ab0fad8)    ;; lazy deoptimization bailout 0
0xffff7ab0fac4   100  add x17, x17, x16
0xffff7ab0fac8   104  br x17
0xffff7ab0facc   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0fad0   112  d63f03e0       constant
0xffff7ab0fad4   116  d503201f       constant
0xffff7ab0fad8   120  7a906000       constant
0xffff7ab0fadc   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0fac0  runtime entry
0xffff7ab0facc  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4386
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab0fb60     0  mov x2, x1
0xffff7ab0fb64     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab0fb78)
0xffff7ab0fb68     8  mov x3, x0
0xffff7ab0fb6c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab0fb88)
0xffff7ab0fb70    16  and x0, x3, x2
0xffff7ab0fb74    20  ret
0xffff7ab0fb78    24  movz x16, #0x0
0xffff7ab0fb7c    28  sub csp, jssp, #0x10 (16)
0xffff7ab0fb80    32  stp fp, lr, [jssp, #-16]!
0xffff7ab0fb84    36  bl #+0x14 (addr 0xffff7ab0fb98)
0xffff7ab0fb88    40  movz x16, #0x8
0xffff7ab0fb8c    44  sub csp, jssp, #0x10 (16)
0xffff7ab0fb90    48  stp fp, lr, [jssp, #-16]!
0xffff7ab0fb94    52  bl #+0x4 (addr 0xffff7ab0fb98)
0xffff7ab0fb98    56  movz x17, #0xa00000000
0xffff7ab0fb9c    60  sub csp, jssp, #0x10 (16)
0xffff7ab0fba0    64  stp x17, cp, [jssp, #-16]!
0xffff7ab0fba4    68  add fp, jssp, #0x10 (16)
0xffff7ab0fba8    72  ldr x17, pc+24 (addr 0x0000ffff7ab0fbc0)    ;; lazy deoptimization bailout 0
0xffff7ab0fbac    76  add x17, x17, x16
0xffff7ab0fbb0    80  br x17
0xffff7ab0fbb4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0fbb8    88  d63f03e0       constant
0xffff7ab0fbbc    92  d503201f       constant
0xffff7ab0fbc0    96  7a906000       constant
0xffff7ab0fbc4   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0fba8  runtime entry
0xffff7ab0fbb4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4386
type = NORMAL
name = BinaryOpICStub(BIT_AND:Int32*Int32->Int32)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab0fb60     0  mov x2, x1
0xffff7ab0fb64     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab0fb78)
0xffff7ab0fb68     8  mov x3, x0
0xffff7ab0fb6c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab0fb88)
0xffff7ab0fb70    16  and x0, x3, x2
0xffff7ab0fb74    20  ret
0xffff7ab0fb78    24  movz x16, #0x0
0xffff7ab0fb7c    28  sub csp, jssp, #0x10 (16)
0xffff7ab0fb80    32  stp fp, lr, [jssp, #-16]!
0xffff7ab0fb84    36  bl #+0x14 (addr 0xffff7ab0fb98)
0xffff7ab0fb88    40  movz x16, #0x8
0xffff7ab0fb8c    44  sub csp, jssp, #0x10 (16)
0xffff7ab0fb90    48  stp fp, lr, [jssp, #-16]!
0xffff7ab0fb94    52  bl #+0x4 (addr 0xffff7ab0fb98)
0xffff7ab0fb98    56  movz x17, #0xa00000000
0xffff7ab0fb9c    60  sub csp, jssp, #0x10 (16)
0xffff7ab0fba0    64  stp x17, cp, [jssp, #-16]!
0xffff7ab0fba4    68  add fp, jssp, #0x10 (16)
0xffff7ab0fba8    72  ldr x17, pc+24 (addr 0x0000ffff7ab0fbc0)    ;; lazy deoptimization bailout 0
0xffff7ab0fbac    76  add x17, x17, x16
0xffff7ab0fbb0    80  br x17
0xffff7ab0fbb4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0fbb8    88  d63f03e0       constant
0xffff7ab0fbbc    92  d503201f       constant
0xffff7ab0fbc0    96  7a906000       constant
0xffff7ab0fbc4   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0fba8  runtime entry
0xffff7ab0fbb4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4370
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab0fc40     0  mov x2, x1
0xffff7ab0fc44     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab0fc58)
0xffff7ab0fc48     8  mov x3, x0
0xffff7ab0fc4c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab0fc68)
0xffff7ab0fc50    16  and x0, x3, x2
0xffff7ab0fc54    20  ret
0xffff7ab0fc58    24  movz x16, #0x0
0xffff7ab0fc5c    28  sub csp, jssp, #0x10 (16)
0xffff7ab0fc60    32  stp fp, lr, [jssp, #-16]!
0xffff7ab0fc64    36  bl #+0x14 (addr 0xffff7ab0fc78)
0xffff7ab0fc68    40  movz x16, #0x8
0xffff7ab0fc6c    44  sub csp, jssp, #0x10 (16)
0xffff7ab0fc70    48  stp fp, lr, [jssp, #-16]!
0xffff7ab0fc74    52  bl #+0x4 (addr 0xffff7ab0fc78)
0xffff7ab0fc78    56  movz x17, #0xa00000000
0xffff7ab0fc7c    60  sub csp, jssp, #0x10 (16)
0xffff7ab0fc80    64  stp x17, cp, [jssp, #-16]!
0xffff7ab0fc84    68  add fp, jssp, #0x10 (16)
0xffff7ab0fc88    72  ldr x17, pc+24 (addr 0x0000ffff7ab0fca0)    ;; lazy deoptimization bailout 0
0xffff7ab0fc8c    76  add x17, x17, x16
0xffff7ab0fc90    80  br x17
0xffff7ab0fc94    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0fc98    88  d63f03e0       constant
0xffff7ab0fc9c    92  d503201f       constant
0xffff7ab0fca0    96  7a906000       constant
0xffff7ab0fca4   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0fc88  runtime entry
0xffff7ab0fc94  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4370
type = NORMAL
name = BinaryOpICStub(BIT_AND:Int32*Int32->Smi)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab0fc40     0  mov x2, x1
0xffff7ab0fc44     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab0fc58)
0xffff7ab0fc48     8  mov x3, x0
0xffff7ab0fc4c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab0fc68)
0xffff7ab0fc50    16  and x0, x3, x2
0xffff7ab0fc54    20  ret
0xffff7ab0fc58    24  movz x16, #0x0
0xffff7ab0fc5c    28  sub csp, jssp, #0x10 (16)
0xffff7ab0fc60    32  stp fp, lr, [jssp, #-16]!
0xffff7ab0fc64    36  bl #+0x14 (addr 0xffff7ab0fc78)
0xffff7ab0fc68    40  movz x16, #0x8
0xffff7ab0fc6c    44  sub csp, jssp, #0x10 (16)
0xffff7ab0fc70    48  stp fp, lr, [jssp, #-16]!
0xffff7ab0fc74    52  bl #+0x4 (addr 0xffff7ab0fc78)
0xffff7ab0fc78    56  movz x17, #0xa00000000
0xffff7ab0fc7c    60  sub csp, jssp, #0x10 (16)
0xffff7ab0fc80    64  stp x17, cp, [jssp, #-16]!
0xffff7ab0fc84    68  add fp, jssp, #0x10 (16)
0xffff7ab0fc88    72  ldr x17, pc+24 (addr 0x0000ffff7ab0fca0)    ;; lazy deoptimization bailout 0
0xffff7ab0fc8c    76  add x17, x17, x16
0xffff7ab0fc90    80  br x17
0xffff7ab0fc94    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0fc98    88  d63f03e0       constant
0xffff7ab0fc9c    92  d503201f       constant
0xffff7ab0fca0    96  7a906000       constant
0xffff7ab0fca4   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0fc88  runtime entry
0xffff7ab0fc94  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2338
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab0fd20     0  mov x2, x1
0xffff7ab0fd24     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab0fd38)
0xffff7ab0fd28     8  mov x3, x0
0xffff7ab0fd2c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab0fd48)
0xffff7ab0fd30    16  and x0, x3, x2
0xffff7ab0fd34    20  ret
0xffff7ab0fd38    24  movz x16, #0x0
0xffff7ab0fd3c    28  sub csp, jssp, #0x10 (16)
0xffff7ab0fd40    32  stp fp, lr, [jssp, #-16]!
0xffff7ab0fd44    36  bl #+0x14 (addr 0xffff7ab0fd58)
0xffff7ab0fd48    40  movz x16, #0x8
0xffff7ab0fd4c    44  sub csp, jssp, #0x10 (16)
0xffff7ab0fd50    48  stp fp, lr, [jssp, #-16]!
0xffff7ab0fd54    52  bl #+0x4 (addr 0xffff7ab0fd58)
0xffff7ab0fd58    56  movz x17, #0xa00000000
0xffff7ab0fd5c    60  sub csp, jssp, #0x10 (16)
0xffff7ab0fd60    64  stp x17, cp, [jssp, #-16]!
0xffff7ab0fd64    68  add fp, jssp, #0x10 (16)
0xffff7ab0fd68    72  ldr x17, pc+24 (addr 0x0000ffff7ab0fd80)    ;; lazy deoptimization bailout 0
0xffff7ab0fd6c    76  add x17, x17, x16
0xffff7ab0fd70    80  br x17
0xffff7ab0fd74    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0fd78    88  d63f03e0       constant
0xffff7ab0fd7c    92  d503201f       constant
0xffff7ab0fd80    96  7a906000       constant
0xffff7ab0fd84   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0fd68  runtime entry
0xffff7ab0fd74  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2338
type = NORMAL
name = BinaryOpICStub(BIT_AND:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab0fd20     0  mov x2, x1
0xffff7ab0fd24     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab0fd38)
0xffff7ab0fd28     8  mov x3, x0
0xffff7ab0fd2c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab0fd48)
0xffff7ab0fd30    16  and x0, x3, x2
0xffff7ab0fd34    20  ret
0xffff7ab0fd38    24  movz x16, #0x0
0xffff7ab0fd3c    28  sub csp, jssp, #0x10 (16)
0xffff7ab0fd40    32  stp fp, lr, [jssp, #-16]!
0xffff7ab0fd44    36  bl #+0x14 (addr 0xffff7ab0fd58)
0xffff7ab0fd48    40  movz x16, #0x8
0xffff7ab0fd4c    44  sub csp, jssp, #0x10 (16)
0xffff7ab0fd50    48  stp fp, lr, [jssp, #-16]!
0xffff7ab0fd54    52  bl #+0x4 (addr 0xffff7ab0fd58)
0xffff7ab0fd58    56  movz x17, #0xa00000000
0xffff7ab0fd5c    60  sub csp, jssp, #0x10 (16)
0xffff7ab0fd60    64  stp x17, cp, [jssp, #-16]!
0xffff7ab0fd64    68  add fp, jssp, #0x10 (16)
0xffff7ab0fd68    72  ldr x17, pc+24 (addr 0x0000ffff7ab0fd80)    ;; lazy deoptimization bailout 0
0xffff7ab0fd6c    76  add x17, x17, x16
0xffff7ab0fd70    80  br x17
0xffff7ab0fd74    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0fd78    88  d63f03e0       constant
0xffff7ab0fd7c    92  d503201f       constant
0xffff7ab0fd80    96  7a906000       constant
0xffff7ab0fd84   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0fd68  runtime entry
0xffff7ab0fd74  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2322
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab0fe00     0  mov x2, x1
0xffff7ab0fe04     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab0fe18)
0xffff7ab0fe08     8  mov x3, x0
0xffff7ab0fe0c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab0fe28)
0xffff7ab0fe10    16  and x0, x3, x2
0xffff7ab0fe14    20  ret
0xffff7ab0fe18    24  movz x16, #0x0
0xffff7ab0fe1c    28  sub csp, jssp, #0x10 (16)
0xffff7ab0fe20    32  stp fp, lr, [jssp, #-16]!
0xffff7ab0fe24    36  bl #+0x14 (addr 0xffff7ab0fe38)
0xffff7ab0fe28    40  movz x16, #0x8
0xffff7ab0fe2c    44  sub csp, jssp, #0x10 (16)
0xffff7ab0fe30    48  stp fp, lr, [jssp, #-16]!
0xffff7ab0fe34    52  bl #+0x4 (addr 0xffff7ab0fe38)
0xffff7ab0fe38    56  movz x17, #0xa00000000
0xffff7ab0fe3c    60  sub csp, jssp, #0x10 (16)
0xffff7ab0fe40    64  stp x17, cp, [jssp, #-16]!
0xffff7ab0fe44    68  add fp, jssp, #0x10 (16)
0xffff7ab0fe48    72  ldr x17, pc+24 (addr 0x0000ffff7ab0fe60)    ;; lazy deoptimization bailout 0
0xffff7ab0fe4c    76  add x17, x17, x16
0xffff7ab0fe50    80  br x17
0xffff7ab0fe54    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0fe58    88  d63f03e0       constant
0xffff7ab0fe5c    92  d503201f       constant
0xffff7ab0fe60    96  7a906000       constant
0xffff7ab0fe64   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0fe48  runtime entry
0xffff7ab0fe54  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2322
type = NORMAL
name = BinaryOpICStub(BIT_AND:Int32*Smi->Smi)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab0fe00     0  mov x2, x1
0xffff7ab0fe04     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab0fe18)
0xffff7ab0fe08     8  mov x3, x0
0xffff7ab0fe0c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab0fe28)
0xffff7ab0fe10    16  and x0, x3, x2
0xffff7ab0fe14    20  ret
0xffff7ab0fe18    24  movz x16, #0x0
0xffff7ab0fe1c    28  sub csp, jssp, #0x10 (16)
0xffff7ab0fe20    32  stp fp, lr, [jssp, #-16]!
0xffff7ab0fe24    36  bl #+0x14 (addr 0xffff7ab0fe38)
0xffff7ab0fe28    40  movz x16, #0x8
0xffff7ab0fe2c    44  sub csp, jssp, #0x10 (16)
0xffff7ab0fe30    48  stp fp, lr, [jssp, #-16]!
0xffff7ab0fe34    52  bl #+0x4 (addr 0xffff7ab0fe38)
0xffff7ab0fe38    56  movz x17, #0xa00000000
0xffff7ab0fe3c    60  sub csp, jssp, #0x10 (16)
0xffff7ab0fe40    64  stp x17, cp, [jssp, #-16]!
0xffff7ab0fe44    68  add fp, jssp, #0x10 (16)
0xffff7ab0fe48    72  ldr x17, pc+24 (addr 0x0000ffff7ab0fe60)    ;; lazy deoptimization bailout 0
0xffff7ab0fe4c    76  add x17, x17, x16
0xffff7ab0fe50    80  br x17
0xffff7ab0fe54    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab0fe58    88  d63f03e0       constant
0xffff7ab0fe5c    92  d503201f       constant
0xffff7ab0fe60    96  7a906000       constant
0xffff7ab0fe64   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab0fe48  runtime entry
0xffff7ab0fe54  constant pool (size 20)


kind = STUB
major_key = DoubleToIStub
name = DoubleToIStub
compiler = unknown
Instructions (size = 60)
0xffff7ab0fee0     0  sub csp, jssp, #0x10 (16)
0xffff7ab0fee4     4  stp x2, x0, [jssp, #-16]!
0xffff7ab0fee8     8  ldur x4, [x1, #7]
0xffff7ab0feec    12  ubfx x0, x4, #52, #11
0xffff7ab0fef0    16  cmp x0, #0x453 (1107)
0xffff7ab0fef4    20  csel x4, xzr, x4, ge
0xffff7ab0fef8    24  b.ge #+0x1c (addr 0xffff7ab0ff14)
0xffff7ab0fefc    28  ubfx x2, x4, #0, #52
0xffff7ab0ff00    32  orr x2, x2, #0x10000000000000
0xffff7ab0ff04    36  tst x4, #0x8000000000000000
0xffff7ab0ff08    40  cneg x2, x2, ne
0xffff7ab0ff0c    44  sub x0, x0, #0x433 (1075)
0xffff7ab0ff10    48  lsl x4, x2, x0
0xffff7ab0ff14    52  ldp x2, x0, [jssp], #16
0xffff7ab0ff18    56  ret


RelocInfo (size = 0)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4514
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0xffff7ab0ff80     0  mov x2, x0
0xffff7ab0ff84     4  tbnz w2, #0, #+0xac (addr 0xffff7ab10030)
0xffff7ab0ff88     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab0ffa0)
0xffff7ab0ff8c    12  asr x4, x1, #32
0xffff7ab0ff90    16  asr x0, x2, #32
0xffff7ab0ff94    20  and w0, w0, w4
0xffff7ab0ff98    24  lsl x0, x0, #32
0xffff7ab0ff9c    28  ret
0xffff7ab0ffa0    32  sub csp, jssp, #0x10 (16)
0xffff7ab0ffa4    36  stp fp, lr, [jssp, #-16]!
0xffff7ab0ffa8    40  movz fp, #0xa00000000
0xffff7ab0ffac    44  sub csp, jssp, #0x8 (8)
0xffff7ab0ffb0    48  str fp, [jssp, #-8]!
0xffff7ab0ffb4    52  add fp, jssp, #0x8 (8)
0xffff7ab0ffb8    56  ldur x16, [x1, #-1]
0xffff7ab0ffbc    60  ldr x17, [x26, #120]
0xffff7ab0ffc0    64  cmp x16, x17
0xffff7ab0ffc4    68  b.ne #+0x30 (addr 0xffff7ab0fff4)
0xffff7ab0ffc8    72  ldur d30, [x1, #7]
0xffff7ab0ffcc    76  fcvtzs x4, d30
0xffff7ab0ffd0    80  cmp x4, #0x1 (1)
0xffff7ab0ffd4    84  ccmn x4, #1, #nzcV, vc
0xffff7ab0ffd8    88  b.vc #+0x18 (addr 0xffff7ab0fff0)
0xffff7ab0ffdc    92  sub csp, jssp, #0x8 (8)
0xffff7ab0ffe0    96  str lr, [jssp, #-8]!
0xffff7ab0ffe4   100  ldr x16, pc+68 (addr 0x0000ffff7ab10028)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab0ffe8   104  blr x16
0xffff7ab0ffec   108  ldr lr, [jssp], #8
0xffff7ab0fff0   112  b #+0x24 (addr 0xffff7ab10014)
0xffff7ab0fff4   116  ldp x4, x3, [x26, #64]
0xffff7ab0fff8   120  cmp x1, x4
0xffff7ab0fffc   124  cset x4, eq
0xffff7ab10000   128  ccmp x1, x3, #nZcv, ne
0xffff7ab10004   132  b.eq #+0x10 (addr 0xffff7ab10014)
0xffff7ab10008   136  ldr x16, [x26, #40]
0xffff7ab1000c   140  cmp x1, x16
0xffff7ab10010   144  b.ne #+0x30 (addr 0xffff7ab10040)
0xffff7ab10014   148  ldr lr, [jssp, #16]
0xffff7ab10018   152  ldp xzr, fp, [jssp], #24
0xffff7ab1001c   156  b #-0x8c (addr 0xffff7ab0ff90)
0xffff7ab10020   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab10024   164  d63f03e0       constant
0xffff7ab10028   168  7ab0fee0       constant
0xffff7ab1002c   172  0000ffff       constant
0xffff7ab10030   176  movz x16, #0x0
0xffff7ab10034   180  sub csp, jssp, #0x10 (16)
0xffff7ab10038   184  stp fp, lr, [jssp, #-16]!
0xffff7ab1003c   188  bl #+0xc (addr 0xffff7ab10048)
0xffff7ab10040   192  movz x16, #0x8
0xffff7ab10044   196  bl #+0x14 (addr 0xffff7ab10058)
0xffff7ab10048   200  movz x17, #0xa00000000
0xffff7ab1004c   204  sub csp, jssp, #0x10 (16)
0xffff7ab10050   208  stp x17, cp, [jssp, #-16]!
0xffff7ab10054   212  add fp, jssp, #0x10 (16)
0xffff7ab10058   216  ldr x17, pc+24 (addr 0x0000ffff7ab10070)    ;; lazy deoptimization bailout 0
0xffff7ab1005c   220  add x17, x17, x16
0xffff7ab10060   224  br x17
0xffff7ab10064   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10068   232  d63f03e0       constant
0xffff7ab1006c   236  d503201f       constant
0xffff7ab10070   240  7a906000       constant
0xffff7ab10074   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab0ffe4  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab10020  constant pool (size 16)
0xffff7ab10058  runtime entry
0xffff7ab10064  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4514
type = NORMAL
name = BinaryOpICStub(BIT_AND:Number*Int32->Int32)
compiler = crankshaft
Instructions (size = 256)
0xffff7ab0ff80     0  mov x2, x0
0xffff7ab0ff84     4  tbnz w2, #0, #+0xac (addr 0xffff7ab10030)
0xffff7ab0ff88     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab0ffa0)
0xffff7ab0ff8c    12  asr x4, x1, #32
0xffff7ab0ff90    16  asr x0, x2, #32
0xffff7ab0ff94    20  and w0, w0, w4
0xffff7ab0ff98    24  lsl x0, x0, #32
0xffff7ab0ff9c    28  ret
0xffff7ab0ffa0    32  sub csp, jssp, #0x10 (16)
0xffff7ab0ffa4    36  stp fp, lr, [jssp, #-16]!
0xffff7ab0ffa8    40  movz fp, #0xa00000000
0xffff7ab0ffac    44  sub csp, jssp, #0x8 (8)
0xffff7ab0ffb0    48  str fp, [jssp, #-8]!
0xffff7ab0ffb4    52  add fp, jssp, #0x8 (8)
0xffff7ab0ffb8    56  ldur x16, [x1, #-1]
0xffff7ab0ffbc    60  ldr x17, [x26, #120]
0xffff7ab0ffc0    64  cmp x16, x17
0xffff7ab0ffc4    68  b.ne #+0x30 (addr 0xffff7ab0fff4)
0xffff7ab0ffc8    72  ldur d30, [x1, #7]
0xffff7ab0ffcc    76  fcvtzs x4, d30
0xffff7ab0ffd0    80  cmp x4, #0x1 (1)
0xffff7ab0ffd4    84  ccmn x4, #1, #nzcV, vc
0xffff7ab0ffd8    88  b.vc #+0x18 (addr 0xffff7ab0fff0)
0xffff7ab0ffdc    92  sub csp, jssp, #0x8 (8)
0xffff7ab0ffe0    96  str lr, [jssp, #-8]!
0xffff7ab0ffe4   100  ldr x16, pc+68 (addr 0x0000ffff7ab10028)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab0ffe8   104  blr x16
0xffff7ab0ffec   108  ldr lr, [jssp], #8
0xffff7ab0fff0   112  b #+0x24 (addr 0xffff7ab10014)
0xffff7ab0fff4   116  ldp x4, x3, [x26, #64]
0xffff7ab0fff8   120  cmp x1, x4
0xffff7ab0fffc   124  cset x4, eq
0xffff7ab10000   128  ccmp x1, x3, #nZcv, ne
0xffff7ab10004   132  b.eq #+0x10 (addr 0xffff7ab10014)
0xffff7ab10008   136  ldr x16, [x26, #40]
0xffff7ab1000c   140  cmp x1, x16
0xffff7ab10010   144  b.ne #+0x30 (addr 0xffff7ab10040)
0xffff7ab10014   148  ldr lr, [jssp, #16]
0xffff7ab10018   152  ldp xzr, fp, [jssp], #24
0xffff7ab1001c   156  b #-0x8c (addr 0xffff7ab0ff90)
0xffff7ab10020   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab10024   164  d63f03e0       constant
0xffff7ab10028   168  7ab0fee0       constant
0xffff7ab1002c   172  0000ffff       constant
0xffff7ab10030   176  movz x16, #0x0
0xffff7ab10034   180  sub csp, jssp, #0x10 (16)
0xffff7ab10038   184  stp fp, lr, [jssp, #-16]!
0xffff7ab1003c   188  bl #+0xc (addr 0xffff7ab10048)
0xffff7ab10040   192  movz x16, #0x8
0xffff7ab10044   196  bl #+0x14 (addr 0xffff7ab10058)
0xffff7ab10048   200  movz x17, #0xa00000000
0xffff7ab1004c   204  sub csp, jssp, #0x10 (16)
0xffff7ab10050   208  stp x17, cp, [jssp, #-16]!
0xffff7ab10054   212  add fp, jssp, #0x10 (16)
0xffff7ab10058   216  ldr x17, pc+24 (addr 0x0000ffff7ab10070)    ;; lazy deoptimization bailout 0
0xffff7ab1005c   220  add x17, x17, x16
0xffff7ab10060   224  br x17
0xffff7ab10064   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10068   232  d63f03e0       constant
0xffff7ab1006c   236  d503201f       constant
0xffff7ab10070   240  7a906000       constant
0xffff7ab10074   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab0ffe4  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab10020  constant pool (size 16)
0xffff7ab10058  runtime entry
0xffff7ab10064  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2450
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0xffff7ab100e0     0  mov x2, x0
0xffff7ab100e4     4  tbnz w2, #0, #+0xac (addr 0xffff7ab10190)
0xffff7ab100e8     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab10100)
0xffff7ab100ec    12  asr x4, x1, #32
0xffff7ab100f0    16  asr x0, x2, #32
0xffff7ab100f4    20  and w0, w0, w4
0xffff7ab100f8    24  lsl x0, x0, #32
0xffff7ab100fc    28  ret
0xffff7ab10100    32  sub csp, jssp, #0x10 (16)
0xffff7ab10104    36  stp fp, lr, [jssp, #-16]!
0xffff7ab10108    40  movz fp, #0xa00000000
0xffff7ab1010c    44  sub csp, jssp, #0x8 (8)
0xffff7ab10110    48  str fp, [jssp, #-8]!
0xffff7ab10114    52  add fp, jssp, #0x8 (8)
0xffff7ab10118    56  ldur x16, [x1, #-1]
0xffff7ab1011c    60  ldr x17, [x26, #120]
0xffff7ab10120    64  cmp x16, x17
0xffff7ab10124    68  b.ne #+0x30 (addr 0xffff7ab10154)
0xffff7ab10128    72  ldur d30, [x1, #7]
0xffff7ab1012c    76  fcvtzs x4, d30
0xffff7ab10130    80  cmp x4, #0x1 (1)
0xffff7ab10134    84  ccmn x4, #1, #nzcV, vc
0xffff7ab10138    88  b.vc #+0x18 (addr 0xffff7ab10150)
0xffff7ab1013c    92  sub csp, jssp, #0x8 (8)
0xffff7ab10140    96  str lr, [jssp, #-8]!
0xffff7ab10144   100  ldr x16, pc+68 (addr 0x0000ffff7ab10188)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab10148   104  blr x16
0xffff7ab1014c   108  ldr lr, [jssp], #8
0xffff7ab10150   112  b #+0x24 (addr 0xffff7ab10174)
0xffff7ab10154   116  ldp x4, x3, [x26, #64]
0xffff7ab10158   120  cmp x1, x4
0xffff7ab1015c   124  cset x4, eq
0xffff7ab10160   128  ccmp x1, x3, #nZcv, ne
0xffff7ab10164   132  b.eq #+0x10 (addr 0xffff7ab10174)
0xffff7ab10168   136  ldr x16, [x26, #40]
0xffff7ab1016c   140  cmp x1, x16
0xffff7ab10170   144  b.ne #+0x30 (addr 0xffff7ab101a0)
0xffff7ab10174   148  ldr lr, [jssp, #16]
0xffff7ab10178   152  ldp xzr, fp, [jssp], #24
0xffff7ab1017c   156  b #-0x8c (addr 0xffff7ab100f0)
0xffff7ab10180   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab10184   164  d63f03e0       constant
0xffff7ab10188   168  7ab0fee0       constant
0xffff7ab1018c   172  0000ffff       constant
0xffff7ab10190   176  movz x16, #0x0
0xffff7ab10194   180  sub csp, jssp, #0x10 (16)
0xffff7ab10198   184  stp fp, lr, [jssp, #-16]!
0xffff7ab1019c   188  bl #+0xc (addr 0xffff7ab101a8)
0xffff7ab101a0   192  movz x16, #0x8
0xffff7ab101a4   196  bl #+0x14 (addr 0xffff7ab101b8)
0xffff7ab101a8   200  movz x17, #0xa00000000
0xffff7ab101ac   204  sub csp, jssp, #0x10 (16)
0xffff7ab101b0   208  stp x17, cp, [jssp, #-16]!
0xffff7ab101b4   212  add fp, jssp, #0x10 (16)
0xffff7ab101b8   216  ldr x17, pc+24 (addr 0x0000ffff7ab101d0)    ;; lazy deoptimization bailout 0
0xffff7ab101bc   220  add x17, x17, x16
0xffff7ab101c0   224  br x17
0xffff7ab101c4   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab101c8   232  d63f03e0       constant
0xffff7ab101cc   236  d503201f       constant
0xffff7ab101d0   240  7a906000       constant
0xffff7ab101d4   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab10144  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab10180  constant pool (size 16)
0xffff7ab101b8  runtime entry
0xffff7ab101c4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2450
type = NORMAL
name = BinaryOpICStub(BIT_AND:Number*Smi->Smi)
compiler = crankshaft
Instructions (size = 256)
0xffff7ab100e0     0  mov x2, x0
0xffff7ab100e4     4  tbnz w2, #0, #+0xac (addr 0xffff7ab10190)
0xffff7ab100e8     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab10100)
0xffff7ab100ec    12  asr x4, x1, #32
0xffff7ab100f0    16  asr x0, x2, #32
0xffff7ab100f4    20  and w0, w0, w4
0xffff7ab100f8    24  lsl x0, x0, #32
0xffff7ab100fc    28  ret
0xffff7ab10100    32  sub csp, jssp, #0x10 (16)
0xffff7ab10104    36  stp fp, lr, [jssp, #-16]!
0xffff7ab10108    40  movz fp, #0xa00000000
0xffff7ab1010c    44  sub csp, jssp, #0x8 (8)
0xffff7ab10110    48  str fp, [jssp, #-8]!
0xffff7ab10114    52  add fp, jssp, #0x8 (8)
0xffff7ab10118    56  ldur x16, [x1, #-1]
0xffff7ab1011c    60  ldr x17, [x26, #120]
0xffff7ab10120    64  cmp x16, x17
0xffff7ab10124    68  b.ne #+0x30 (addr 0xffff7ab10154)
0xffff7ab10128    72  ldur d30, [x1, #7]
0xffff7ab1012c    76  fcvtzs x4, d30
0xffff7ab10130    80  cmp x4, #0x1 (1)
0xffff7ab10134    84  ccmn x4, #1, #nzcV, vc
0xffff7ab10138    88  b.vc #+0x18 (addr 0xffff7ab10150)
0xffff7ab1013c    92  sub csp, jssp, #0x8 (8)
0xffff7ab10140    96  str lr, [jssp, #-8]!
0xffff7ab10144   100  ldr x16, pc+68 (addr 0x0000ffff7ab10188)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab10148   104  blr x16
0xffff7ab1014c   108  ldr lr, [jssp], #8
0xffff7ab10150   112  b #+0x24 (addr 0xffff7ab10174)
0xffff7ab10154   116  ldp x4, x3, [x26, #64]
0xffff7ab10158   120  cmp x1, x4
0xffff7ab1015c   124  cset x4, eq
0xffff7ab10160   128  ccmp x1, x3, #nZcv, ne
0xffff7ab10164   132  b.eq #+0x10 (addr 0xffff7ab10174)
0xffff7ab10168   136  ldr x16, [x26, #40]
0xffff7ab1016c   140  cmp x1, x16
0xffff7ab10170   144  b.ne #+0x30 (addr 0xffff7ab101a0)
0xffff7ab10174   148  ldr lr, [jssp, #16]
0xffff7ab10178   152  ldp xzr, fp, [jssp], #24
0xffff7ab1017c   156  b #-0x8c (addr 0xffff7ab100f0)
0xffff7ab10180   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab10184   164  d63f03e0       constant
0xffff7ab10188   168  7ab0fee0       constant
0xffff7ab1018c   172  0000ffff       constant
0xffff7ab10190   176  movz x16, #0x0
0xffff7ab10194   180  sub csp, jssp, #0x10 (16)
0xffff7ab10198   184  stp fp, lr, [jssp, #-16]!
0xffff7ab1019c   188  bl #+0xc (addr 0xffff7ab101a8)
0xffff7ab101a0   192  movz x16, #0x8
0xffff7ab101a4   196  bl #+0x14 (addr 0xffff7ab101b8)
0xffff7ab101a8   200  movz x17, #0xa00000000
0xffff7ab101ac   204  sub csp, jssp, #0x10 (16)
0xffff7ab101b0   208  stp x17, cp, [jssp, #-16]!
0xffff7ab101b4   212  add fp, jssp, #0x10 (16)
0xffff7ab101b8   216  ldr x17, pc+24 (addr 0x0000ffff7ab101d0)    ;; lazy deoptimization bailout 0
0xffff7ab101bc   220  add x17, x17, x16
0xffff7ab101c0   224  br x17
0xffff7ab101c4   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab101c8   232  d63f03e0       constant
0xffff7ab101cc   236  d503201f       constant
0xffff7ab101d0   240  7a906000       constant
0xffff7ab101d4   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab10144  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab10180  constant pool (size 16)
0xffff7ab101b8  runtime entry
0xffff7ab101c4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4258
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab10240     0  mov x2, x1
0xffff7ab10244     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab10258)
0xffff7ab10248     8  mov x3, x0
0xffff7ab1024c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab10268)
0xffff7ab10250    16  and x0, x3, x2
0xffff7ab10254    20  ret
0xffff7ab10258    24  movz x16, #0x0
0xffff7ab1025c    28  sub csp, jssp, #0x10 (16)
0xffff7ab10260    32  stp fp, lr, [jssp, #-16]!
0xffff7ab10264    36  bl #+0x14 (addr 0xffff7ab10278)
0xffff7ab10268    40  movz x16, #0x8
0xffff7ab1026c    44  sub csp, jssp, #0x10 (16)
0xffff7ab10270    48  stp fp, lr, [jssp, #-16]!
0xffff7ab10274    52  bl #+0x4 (addr 0xffff7ab10278)
0xffff7ab10278    56  movz x17, #0xa00000000
0xffff7ab1027c    60  sub csp, jssp, #0x10 (16)
0xffff7ab10280    64  stp x17, cp, [jssp, #-16]!
0xffff7ab10284    68  add fp, jssp, #0x10 (16)
0xffff7ab10288    72  ldr x17, pc+24 (addr 0x0000ffff7ab102a0)    ;; lazy deoptimization bailout 0
0xffff7ab1028c    76  add x17, x17, x16
0xffff7ab10290    80  br x17
0xffff7ab10294    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10298    88  d63f03e0       constant
0xffff7ab1029c    92  d503201f       constant
0xffff7ab102a0    96  7a906000       constant
0xffff7ab102a4   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab10288  runtime entry
0xffff7ab10294  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4258
type = NORMAL
name = BinaryOpICStub(BIT_AND:Smi*Int32->Int32)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab10240     0  mov x2, x1
0xffff7ab10244     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab10258)
0xffff7ab10248     8  mov x3, x0
0xffff7ab1024c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab10268)
0xffff7ab10250    16  and x0, x3, x2
0xffff7ab10254    20  ret
0xffff7ab10258    24  movz x16, #0x0
0xffff7ab1025c    28  sub csp, jssp, #0x10 (16)
0xffff7ab10260    32  stp fp, lr, [jssp, #-16]!
0xffff7ab10264    36  bl #+0x14 (addr 0xffff7ab10278)
0xffff7ab10268    40  movz x16, #0x8
0xffff7ab1026c    44  sub csp, jssp, #0x10 (16)
0xffff7ab10270    48  stp fp, lr, [jssp, #-16]!
0xffff7ab10274    52  bl #+0x4 (addr 0xffff7ab10278)
0xffff7ab10278    56  movz x17, #0xa00000000
0xffff7ab1027c    60  sub csp, jssp, #0x10 (16)
0xffff7ab10280    64  stp x17, cp, [jssp, #-16]!
0xffff7ab10284    68  add fp, jssp, #0x10 (16)
0xffff7ab10288    72  ldr x17, pc+24 (addr 0x0000ffff7ab102a0)    ;; lazy deoptimization bailout 0
0xffff7ab1028c    76  add x17, x17, x16
0xffff7ab10290    80  br x17
0xffff7ab10294    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10298    88  d63f03e0       constant
0xffff7ab1029c    92  d503201f       constant
0xffff7ab102a0    96  7a906000       constant
0xffff7ab102a4   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab10288  runtime entry
0xffff7ab10294  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4242
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab10320     0  mov x2, x1
0xffff7ab10324     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab10338)
0xffff7ab10328     8  mov x3, x0
0xffff7ab1032c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab10348)
0xffff7ab10330    16  and x0, x3, x2
0xffff7ab10334    20  ret
0xffff7ab10338    24  movz x16, #0x0
0xffff7ab1033c    28  sub csp, jssp, #0x10 (16)
0xffff7ab10340    32  stp fp, lr, [jssp, #-16]!
0xffff7ab10344    36  bl #+0x14 (addr 0xffff7ab10358)
0xffff7ab10348    40  movz x16, #0x8
0xffff7ab1034c    44  sub csp, jssp, #0x10 (16)
0xffff7ab10350    48  stp fp, lr, [jssp, #-16]!
0xffff7ab10354    52  bl #+0x4 (addr 0xffff7ab10358)
0xffff7ab10358    56  movz x17, #0xa00000000
0xffff7ab1035c    60  sub csp, jssp, #0x10 (16)
0xffff7ab10360    64  stp x17, cp, [jssp, #-16]!
0xffff7ab10364    68  add fp, jssp, #0x10 (16)
0xffff7ab10368    72  ldr x17, pc+24 (addr 0x0000ffff7ab10380)    ;; lazy deoptimization bailout 0
0xffff7ab1036c    76  add x17, x17, x16
0xffff7ab10370    80  br x17
0xffff7ab10374    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10378    88  d63f03e0       constant
0xffff7ab1037c    92  d503201f       constant
0xffff7ab10380    96  7a906000       constant
0xffff7ab10384   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab10368  runtime entry
0xffff7ab10374  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4242
type = NORMAL
name = BinaryOpICStub(BIT_AND:Smi*Int32->Smi)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab10320     0  mov x2, x1
0xffff7ab10324     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab10338)
0xffff7ab10328     8  mov x3, x0
0xffff7ab1032c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab10348)
0xffff7ab10330    16  and x0, x3, x2
0xffff7ab10334    20  ret
0xffff7ab10338    24  movz x16, #0x0
0xffff7ab1033c    28  sub csp, jssp, #0x10 (16)
0xffff7ab10340    32  stp fp, lr, [jssp, #-16]!
0xffff7ab10344    36  bl #+0x14 (addr 0xffff7ab10358)
0xffff7ab10348    40  movz x16, #0x8
0xffff7ab1034c    44  sub csp, jssp, #0x10 (16)
0xffff7ab10350    48  stp fp, lr, [jssp, #-16]!
0xffff7ab10354    52  bl #+0x4 (addr 0xffff7ab10358)
0xffff7ab10358    56  movz x17, #0xa00000000
0xffff7ab1035c    60  sub csp, jssp, #0x10 (16)
0xffff7ab10360    64  stp x17, cp, [jssp, #-16]!
0xffff7ab10364    68  add fp, jssp, #0x10 (16)
0xffff7ab10368    72  ldr x17, pc+24 (addr 0x0000ffff7ab10380)    ;; lazy deoptimization bailout 0
0xffff7ab1036c    76  add x17, x17, x16
0xffff7ab10370    80  br x17
0xffff7ab10374    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10378    88  d63f03e0       constant
0xffff7ab1037c    92  d503201f       constant
0xffff7ab10380    96  7a906000       constant
0xffff7ab10384   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab10368  runtime entry
0xffff7ab10374  constant pool (size 20)


kind = STUB
major_key = DoubleToIStub
name = DoubleToIStub
compiler = unknown
Instructions (size = 60)
0xffff7ab10400     0  sub csp, jssp, #0x10 (16)
0xffff7ab10404     4  stp x2, x1, [jssp, #-16]!
0xffff7ab10408     8  ldur x4, [x0, #7]
0xffff7ab1040c    12  ubfx x1, x4, #52, #11
0xffff7ab10410    16  cmp x1, #0x453 (1107)
0xffff7ab10414    20  csel x4, xzr, x4, ge
0xffff7ab10418    24  b.ge #+0x1c (addr 0xffff7ab10434)
0xffff7ab1041c    28  ubfx x2, x4, #0, #52
0xffff7ab10420    32  orr x2, x2, #0x10000000000000
0xffff7ab10424    36  tst x4, #0x8000000000000000
0xffff7ab10428    40  cneg x2, x2, ne
0xffff7ab1042c    44  sub x1, x1, #0x433 (1075)
0xffff7ab10430    48  lsl x4, x2, x1
0xffff7ab10434    52  ldp x2, x1, [jssp], #16
0xffff7ab10438    56  ret


RelocInfo (size = 0)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6290
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0xffff7ab104a0     0  mov x2, x1
0xffff7ab104a4     4  tbnz w2, #0, #+0xac (addr 0xffff7ab10550)
0xffff7ab104a8     8  tbnz w0, #0, #+0x18 (addr 0xffff7ab104c0)
0xffff7ab104ac    12  asr x4, x0, #32
0xffff7ab104b0    16  asr x0, x2, #32
0xffff7ab104b4    20  and w0, w4, w0
0xffff7ab104b8    24  lsl x0, x0, #32
0xffff7ab104bc    28  ret
0xffff7ab104c0    32  sub csp, jssp, #0x10 (16)
0xffff7ab104c4    36  stp fp, lr, [jssp, #-16]!
0xffff7ab104c8    40  movz fp, #0xa00000000
0xffff7ab104cc    44  sub csp, jssp, #0x8 (8)
0xffff7ab104d0    48  str fp, [jssp, #-8]!
0xffff7ab104d4    52  add fp, jssp, #0x8 (8)
0xffff7ab104d8    56  ldur x16, [x0, #-1]
0xffff7ab104dc    60  ldr x17, [x26, #120]
0xffff7ab104e0    64  cmp x16, x17
0xffff7ab104e4    68  b.ne #+0x30 (addr 0xffff7ab10514)
0xffff7ab104e8    72  ldur d30, [x0, #7]
0xffff7ab104ec    76  fcvtzs x4, d30
0xffff7ab104f0    80  cmp x4, #0x1 (1)
0xffff7ab104f4    84  ccmn x4, #1, #nzcV, vc
0xffff7ab104f8    88  b.vc #+0x18 (addr 0xffff7ab10510)
0xffff7ab104fc    92  sub csp, jssp, #0x8 (8)
0xffff7ab10500    96  str lr, [jssp, #-8]!
0xffff7ab10504   100  ldr x16, pc+68 (addr 0x0000ffff7ab10548)    ;; code: STUB, DoubleToIStub, minor: 127232
0xffff7ab10508   104  blr x16
0xffff7ab1050c   108  ldr lr, [jssp], #8
0xffff7ab10510   112  b #+0x24 (addr 0xffff7ab10534)
0xffff7ab10514   116  ldp x4, x3, [x26, #64]
0xffff7ab10518   120  cmp x0, x4
0xffff7ab1051c   124  cset x4, eq
0xffff7ab10520   128  ccmp x0, x3, #nZcv, ne
0xffff7ab10524   132  b.eq #+0x10 (addr 0xffff7ab10534)
0xffff7ab10528   136  ldr x16, [x26, #40]
0xffff7ab1052c   140  cmp x0, x16
0xffff7ab10530   144  b.ne #+0x30 (addr 0xffff7ab10560)
0xffff7ab10534   148  ldr lr, [jssp, #16]
0xffff7ab10538   152  ldp xzr, fp, [jssp], #24
0xffff7ab1053c   156  b #-0x8c (addr 0xffff7ab104b0)
0xffff7ab10540   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab10544   164  d63f03e0       constant
0xffff7ab10548   168  7ab10400       constant
0xffff7ab1054c   172  0000ffff       constant
0xffff7ab10550   176  movz x16, #0x0
0xffff7ab10554   180  sub csp, jssp, #0x10 (16)
0xffff7ab10558   184  stp fp, lr, [jssp, #-16]!
0xffff7ab1055c   188  bl #+0xc (addr 0xffff7ab10568)
0xffff7ab10560   192  movz x16, #0x8
0xffff7ab10564   196  bl #+0x14 (addr 0xffff7ab10578)
0xffff7ab10568   200  movz x17, #0xa00000000
0xffff7ab1056c   204  sub csp, jssp, #0x10 (16)
0xffff7ab10570   208  stp x17, cp, [jssp, #-16]!
0xffff7ab10574   212  add fp, jssp, #0x10 (16)
0xffff7ab10578   216  ldr x17, pc+24 (addr 0x0000ffff7ab10590)    ;; lazy deoptimization bailout 0
0xffff7ab1057c   220  add x17, x17, x16
0xffff7ab10580   224  br x17
0xffff7ab10584   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10588   232  d63f03e0       constant
0xffff7ab1058c   236  d503201f       constant
0xffff7ab10590   240  7a906000       constant
0xffff7ab10594   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab10504  code target (STUB)  (0xffff7ab10400)
0xffff7ab10540  constant pool (size 16)
0xffff7ab10578  runtime entry
0xffff7ab10584  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6290
type = NORMAL
name = BinaryOpICStub(BIT_AND:Smi*Number->Smi)
compiler = crankshaft
Instructions (size = 256)
0xffff7ab104a0     0  mov x2, x1
0xffff7ab104a4     4  tbnz w2, #0, #+0xac (addr 0xffff7ab10550)
0xffff7ab104a8     8  tbnz w0, #0, #+0x18 (addr 0xffff7ab104c0)
0xffff7ab104ac    12  asr x4, x0, #32
0xffff7ab104b0    16  asr x0, x2, #32
0xffff7ab104b4    20  and w0, w4, w0
0xffff7ab104b8    24  lsl x0, x0, #32
0xffff7ab104bc    28  ret
0xffff7ab104c0    32  sub csp, jssp, #0x10 (16)
0xffff7ab104c4    36  stp fp, lr, [jssp, #-16]!
0xffff7ab104c8    40  movz fp, #0xa00000000
0xffff7ab104cc    44  sub csp, jssp, #0x8 (8)
0xffff7ab104d0    48  str fp, [jssp, #-8]!
0xffff7ab104d4    52  add fp, jssp, #0x8 (8)
0xffff7ab104d8    56  ldur x16, [x0, #-1]
0xffff7ab104dc    60  ldr x17, [x26, #120]
0xffff7ab104e0    64  cmp x16, x17
0xffff7ab104e4    68  b.ne #+0x30 (addr 0xffff7ab10514)
0xffff7ab104e8    72  ldur d30, [x0, #7]
0xffff7ab104ec    76  fcvtzs x4, d30
0xffff7ab104f0    80  cmp x4, #0x1 (1)
0xffff7ab104f4    84  ccmn x4, #1, #nzcV, vc
0xffff7ab104f8    88  b.vc #+0x18 (addr 0xffff7ab10510)
0xffff7ab104fc    92  sub csp, jssp, #0x8 (8)
0xffff7ab10500    96  str lr, [jssp, #-8]!
0xffff7ab10504   100  ldr x16, pc+68 (addr 0x0000ffff7ab10548)    ;; code: STUB, DoubleToIStub, minor: 127232
0xffff7ab10508   104  blr x16
0xffff7ab1050c   108  ldr lr, [jssp], #8
0xffff7ab10510   112  b #+0x24 (addr 0xffff7ab10534)
0xffff7ab10514   116  ldp x4, x3, [x26, #64]
0xffff7ab10518   120  cmp x0, x4
0xffff7ab1051c   124  cset x4, eq
0xffff7ab10520   128  ccmp x0, x3, #nZcv, ne
0xffff7ab10524   132  b.eq #+0x10 (addr 0xffff7ab10534)
0xffff7ab10528   136  ldr x16, [x26, #40]
0xffff7ab1052c   140  cmp x0, x16
0xffff7ab10530   144  b.ne #+0x30 (addr 0xffff7ab10560)
0xffff7ab10534   148  ldr lr, [jssp, #16]
0xffff7ab10538   152  ldp xzr, fp, [jssp], #24
0xffff7ab1053c   156  b #-0x8c (addr 0xffff7ab104b0)
0xffff7ab10540   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab10544   164  d63f03e0       constant
0xffff7ab10548   168  7ab10400       constant
0xffff7ab1054c   172  0000ffff       constant
0xffff7ab10550   176  movz x16, #0x0
0xffff7ab10554   180  sub csp, jssp, #0x10 (16)
0xffff7ab10558   184  stp fp, lr, [jssp, #-16]!
0xffff7ab1055c   188  bl #+0xc (addr 0xffff7ab10568)
0xffff7ab10560   192  movz x16, #0x8
0xffff7ab10564   196  bl #+0x14 (addr 0xffff7ab10578)
0xffff7ab10568   200  movz x17, #0xa00000000
0xffff7ab1056c   204  sub csp, jssp, #0x10 (16)
0xffff7ab10570   208  stp x17, cp, [jssp, #-16]!
0xffff7ab10574   212  add fp, jssp, #0x10 (16)
0xffff7ab10578   216  ldr x17, pc+24 (addr 0x0000ffff7ab10590)    ;; lazy deoptimization bailout 0
0xffff7ab1057c   220  add x17, x17, x16
0xffff7ab10580   224  br x17
0xffff7ab10584   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10588   232  d63f03e0       constant
0xffff7ab1058c   236  d503201f       constant
0xffff7ab10590   240  7a906000       constant
0xffff7ab10594   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab10504  code target (STUB)  (0xffff7ab10400)
0xffff7ab10540  constant pool (size 16)
0xffff7ab10578  runtime entry
0xffff7ab10584  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2194
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab10600     0  mov x2, x1
0xffff7ab10604     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab10618)
0xffff7ab10608     8  mov x3, x0
0xffff7ab1060c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab10628)
0xffff7ab10610    16  and x0, x3, x2
0xffff7ab10614    20  ret
0xffff7ab10618    24  movz x16, #0x0
0xffff7ab1061c    28  sub csp, jssp, #0x10 (16)
0xffff7ab10620    32  stp fp, lr, [jssp, #-16]!
0xffff7ab10624    36  bl #+0x14 (addr 0xffff7ab10638)
0xffff7ab10628    40  movz x16, #0x8
0xffff7ab1062c    44  sub csp, jssp, #0x10 (16)
0xffff7ab10630    48  stp fp, lr, [jssp, #-16]!
0xffff7ab10634    52  bl #+0x4 (addr 0xffff7ab10638)
0xffff7ab10638    56  movz x17, #0xa00000000
0xffff7ab1063c    60  sub csp, jssp, #0x10 (16)
0xffff7ab10640    64  stp x17, cp, [jssp, #-16]!
0xffff7ab10644    68  add fp, jssp, #0x10 (16)
0xffff7ab10648    72  ldr x17, pc+24 (addr 0x0000ffff7ab10660)    ;; lazy deoptimization bailout 0
0xffff7ab1064c    76  add x17, x17, x16
0xffff7ab10650    80  br x17
0xffff7ab10654    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10658    88  d63f03e0       constant
0xffff7ab1065c    92  d503201f       constant
0xffff7ab10660    96  7a906000       constant
0xffff7ab10664   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab10648  runtime entry
0xffff7ab10654  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2194
type = NORMAL
name = BinaryOpICStub(BIT_AND:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab10600     0  mov x2, x1
0xffff7ab10604     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab10618)
0xffff7ab10608     8  mov x3, x0
0xffff7ab1060c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab10628)
0xffff7ab10610    16  and x0, x3, x2
0xffff7ab10614    20  ret
0xffff7ab10618    24  movz x16, #0x0
0xffff7ab1061c    28  sub csp, jssp, #0x10 (16)
0xffff7ab10620    32  stp fp, lr, [jssp, #-16]!
0xffff7ab10624    36  bl #+0x14 (addr 0xffff7ab10638)
0xffff7ab10628    40  movz x16, #0x8
0xffff7ab1062c    44  sub csp, jssp, #0x10 (16)
0xffff7ab10630    48  stp fp, lr, [jssp, #-16]!
0xffff7ab10634    52  bl #+0x4 (addr 0xffff7ab10638)
0xffff7ab10638    56  movz x17, #0xa00000000
0xffff7ab1063c    60  sub csp, jssp, #0x10 (16)
0xffff7ab10640    64  stp x17, cp, [jssp, #-16]!
0xffff7ab10644    68  add fp, jssp, #0x10 (16)
0xffff7ab10648    72  ldr x17, pc+24 (addr 0x0000ffff7ab10660)    ;; lazy deoptimization bailout 0
0xffff7ab1064c    76  add x17, x17, x16
0xffff7ab10650    80  br x17
0xffff7ab10654    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10658    88  d63f03e0       constant
0xffff7ab1065c    92  d503201f       constant
0xffff7ab10660    96  7a906000       constant
0xffff7ab10664   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab10648  runtime entry
0xffff7ab10654  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4384
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab106e0     0  mov x2, x1
0xffff7ab106e4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab106f8)
0xffff7ab106e8     8  mov x3, x0
0xffff7ab106ec    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab10708)
0xffff7ab106f0    16  orr x0, x3, x2
0xffff7ab106f4    20  ret
0xffff7ab106f8    24  movz x16, #0x0
0xffff7ab106fc    28  sub csp, jssp, #0x10 (16)
0xffff7ab10700    32  stp fp, lr, [jssp, #-16]!
0xffff7ab10704    36  bl #+0x14 (addr 0xffff7ab10718)
0xffff7ab10708    40  movz x16, #0x8
0xffff7ab1070c    44  sub csp, jssp, #0x10 (16)
0xffff7ab10710    48  stp fp, lr, [jssp, #-16]!
0xffff7ab10714    52  bl #+0x4 (addr 0xffff7ab10718)
0xffff7ab10718    56  movz x17, #0xa00000000
0xffff7ab1071c    60  sub csp, jssp, #0x10 (16)
0xffff7ab10720    64  stp x17, cp, [jssp, #-16]!
0xffff7ab10724    68  add fp, jssp, #0x10 (16)
0xffff7ab10728    72  ldr x17, pc+24 (addr 0x0000ffff7ab10740)    ;; lazy deoptimization bailout 0
0xffff7ab1072c    76  add x17, x17, x16
0xffff7ab10730    80  br x17
0xffff7ab10734    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10738    88  d63f03e0       constant
0xffff7ab1073c    92  d503201f       constant
0xffff7ab10740    96  7a906000       constant
0xffff7ab10744   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab10728  runtime entry
0xffff7ab10734  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4384
type = NORMAL
name = BinaryOpICStub(BIT_OR:Int32*Int32->Int32)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab106e0     0  mov x2, x1
0xffff7ab106e4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab106f8)
0xffff7ab106e8     8  mov x3, x0
0xffff7ab106ec    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab10708)
0xffff7ab106f0    16  orr x0, x3, x2
0xffff7ab106f4    20  ret
0xffff7ab106f8    24  movz x16, #0x0
0xffff7ab106fc    28  sub csp, jssp, #0x10 (16)
0xffff7ab10700    32  stp fp, lr, [jssp, #-16]!
0xffff7ab10704    36  bl #+0x14 (addr 0xffff7ab10718)
0xffff7ab10708    40  movz x16, #0x8
0xffff7ab1070c    44  sub csp, jssp, #0x10 (16)
0xffff7ab10710    48  stp fp, lr, [jssp, #-16]!
0xffff7ab10714    52  bl #+0x4 (addr 0xffff7ab10718)
0xffff7ab10718    56  movz x17, #0xa00000000
0xffff7ab1071c    60  sub csp, jssp, #0x10 (16)
0xffff7ab10720    64  stp x17, cp, [jssp, #-16]!
0xffff7ab10724    68  add fp, jssp, #0x10 (16)
0xffff7ab10728    72  ldr x17, pc+24 (addr 0x0000ffff7ab10740)    ;; lazy deoptimization bailout 0
0xffff7ab1072c    76  add x17, x17, x16
0xffff7ab10730    80  br x17
0xffff7ab10734    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10738    88  d63f03e0       constant
0xffff7ab1073c    92  d503201f       constant
0xffff7ab10740    96  7a906000       constant
0xffff7ab10744   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab10728  runtime entry
0xffff7ab10734  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4368
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab107c0     0  mov x2, x1
0xffff7ab107c4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab107d8)
0xffff7ab107c8     8  mov x3, x0
0xffff7ab107cc    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab107e8)
0xffff7ab107d0    16  orr x0, x3, x2
0xffff7ab107d4    20  ret
0xffff7ab107d8    24  movz x16, #0x0
0xffff7ab107dc    28  sub csp, jssp, #0x10 (16)
0xffff7ab107e0    32  stp fp, lr, [jssp, #-16]!
0xffff7ab107e4    36  bl #+0x14 (addr 0xffff7ab107f8)
0xffff7ab107e8    40  movz x16, #0x8
0xffff7ab107ec    44  sub csp, jssp, #0x10 (16)
0xffff7ab107f0    48  stp fp, lr, [jssp, #-16]!
0xffff7ab107f4    52  bl #+0x4 (addr 0xffff7ab107f8)
0xffff7ab107f8    56  movz x17, #0xa00000000
0xffff7ab107fc    60  sub csp, jssp, #0x10 (16)
0xffff7ab10800    64  stp x17, cp, [jssp, #-16]!
0xffff7ab10804    68  add fp, jssp, #0x10 (16)
0xffff7ab10808    72  ldr x17, pc+24 (addr 0x0000ffff7ab10820)    ;; lazy deoptimization bailout 0
0xffff7ab1080c    76  add x17, x17, x16
0xffff7ab10810    80  br x17
0xffff7ab10814    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10818    88  d63f03e0       constant
0xffff7ab1081c    92  d503201f       constant
0xffff7ab10820    96  7a906000       constant
0xffff7ab10824   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab10808  runtime entry
0xffff7ab10814  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4368
type = NORMAL
name = BinaryOpICStub(BIT_OR:Int32*Int32->Smi)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab107c0     0  mov x2, x1
0xffff7ab107c4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab107d8)
0xffff7ab107c8     8  mov x3, x0
0xffff7ab107cc    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab107e8)
0xffff7ab107d0    16  orr x0, x3, x2
0xffff7ab107d4    20  ret
0xffff7ab107d8    24  movz x16, #0x0
0xffff7ab107dc    28  sub csp, jssp, #0x10 (16)
0xffff7ab107e0    32  stp fp, lr, [jssp, #-16]!
0xffff7ab107e4    36  bl #+0x14 (addr 0xffff7ab107f8)
0xffff7ab107e8    40  movz x16, #0x8
0xffff7ab107ec    44  sub csp, jssp, #0x10 (16)
0xffff7ab107f0    48  stp fp, lr, [jssp, #-16]!
0xffff7ab107f4    52  bl #+0x4 (addr 0xffff7ab107f8)
0xffff7ab107f8    56  movz x17, #0xa00000000
0xffff7ab107fc    60  sub csp, jssp, #0x10 (16)
0xffff7ab10800    64  stp x17, cp, [jssp, #-16]!
0xffff7ab10804    68  add fp, jssp, #0x10 (16)
0xffff7ab10808    72  ldr x17, pc+24 (addr 0x0000ffff7ab10820)    ;; lazy deoptimization bailout 0
0xffff7ab1080c    76  add x17, x17, x16
0xffff7ab10810    80  br x17
0xffff7ab10814    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10818    88  d63f03e0       constant
0xffff7ab1081c    92  d503201f       constant
0xffff7ab10820    96  7a906000       constant
0xffff7ab10824   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab10808  runtime entry
0xffff7ab10814  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2336
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab108a0     0  mov x2, x1
0xffff7ab108a4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab108b8)
0xffff7ab108a8     8  mov x3, x0
0xffff7ab108ac    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab108c8)
0xffff7ab108b0    16  orr x0, x3, x2
0xffff7ab108b4    20  ret
0xffff7ab108b8    24  movz x16, #0x0
0xffff7ab108bc    28  sub csp, jssp, #0x10 (16)
0xffff7ab108c0    32  stp fp, lr, [jssp, #-16]!
0xffff7ab108c4    36  bl #+0x14 (addr 0xffff7ab108d8)
0xffff7ab108c8    40  movz x16, #0x8
0xffff7ab108cc    44  sub csp, jssp, #0x10 (16)
0xffff7ab108d0    48  stp fp, lr, [jssp, #-16]!
0xffff7ab108d4    52  bl #+0x4 (addr 0xffff7ab108d8)
0xffff7ab108d8    56  movz x17, #0xa00000000
0xffff7ab108dc    60  sub csp, jssp, #0x10 (16)
0xffff7ab108e0    64  stp x17, cp, [jssp, #-16]!
0xffff7ab108e4    68  add fp, jssp, #0x10 (16)
0xffff7ab108e8    72  ldr x17, pc+24 (addr 0x0000ffff7ab10900)    ;; lazy deoptimization bailout 0
0xffff7ab108ec    76  add x17, x17, x16
0xffff7ab108f0    80  br x17
0xffff7ab108f4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab108f8    88  d63f03e0       constant
0xffff7ab108fc    92  d503201f       constant
0xffff7ab10900    96  7a906000       constant
0xffff7ab10904   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab108e8  runtime entry
0xffff7ab108f4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2336
type = NORMAL
name = BinaryOpICStub(BIT_OR:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab108a0     0  mov x2, x1
0xffff7ab108a4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab108b8)
0xffff7ab108a8     8  mov x3, x0
0xffff7ab108ac    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab108c8)
0xffff7ab108b0    16  orr x0, x3, x2
0xffff7ab108b4    20  ret
0xffff7ab108b8    24  movz x16, #0x0
0xffff7ab108bc    28  sub csp, jssp, #0x10 (16)
0xffff7ab108c0    32  stp fp, lr, [jssp, #-16]!
0xffff7ab108c4    36  bl #+0x14 (addr 0xffff7ab108d8)
0xffff7ab108c8    40  movz x16, #0x8
0xffff7ab108cc    44  sub csp, jssp, #0x10 (16)
0xffff7ab108d0    48  stp fp, lr, [jssp, #-16]!
0xffff7ab108d4    52  bl #+0x4 (addr 0xffff7ab108d8)
0xffff7ab108d8    56  movz x17, #0xa00000000
0xffff7ab108dc    60  sub csp, jssp, #0x10 (16)
0xffff7ab108e0    64  stp x17, cp, [jssp, #-16]!
0xffff7ab108e4    68  add fp, jssp, #0x10 (16)
0xffff7ab108e8    72  ldr x17, pc+24 (addr 0x0000ffff7ab10900)    ;; lazy deoptimization bailout 0
0xffff7ab108ec    76  add x17, x17, x16
0xffff7ab108f0    80  br x17
0xffff7ab108f4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab108f8    88  d63f03e0       constant
0xffff7ab108fc    92  d503201f       constant
0xffff7ab10900    96  7a906000       constant
0xffff7ab10904   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab108e8  runtime entry
0xffff7ab108f4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2320
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab10980     0  mov x2, x1
0xffff7ab10984     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab10998)
0xffff7ab10988     8  mov x3, x0
0xffff7ab1098c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab109a8)
0xffff7ab10990    16  orr x0, x3, x2
0xffff7ab10994    20  ret
0xffff7ab10998    24  movz x16, #0x0
0xffff7ab1099c    28  sub csp, jssp, #0x10 (16)
0xffff7ab109a0    32  stp fp, lr, [jssp, #-16]!
0xffff7ab109a4    36  bl #+0x14 (addr 0xffff7ab109b8)
0xffff7ab109a8    40  movz x16, #0x8
0xffff7ab109ac    44  sub csp, jssp, #0x10 (16)
0xffff7ab109b0    48  stp fp, lr, [jssp, #-16]!
0xffff7ab109b4    52  bl #+0x4 (addr 0xffff7ab109b8)
0xffff7ab109b8    56  movz x17, #0xa00000000
0xffff7ab109bc    60  sub csp, jssp, #0x10 (16)
0xffff7ab109c0    64  stp x17, cp, [jssp, #-16]!
0xffff7ab109c4    68  add fp, jssp, #0x10 (16)
0xffff7ab109c8    72  ldr x17, pc+24 (addr 0x0000ffff7ab109e0)    ;; lazy deoptimization bailout 0
0xffff7ab109cc    76  add x17, x17, x16
0xffff7ab109d0    80  br x17
0xffff7ab109d4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab109d8    88  d63f03e0       constant
0xffff7ab109dc    92  d503201f       constant
0xffff7ab109e0    96  7a906000       constant
0xffff7ab109e4   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab109c8  runtime entry
0xffff7ab109d4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2320
type = NORMAL
name = BinaryOpICStub(BIT_OR:Int32*Smi->Smi)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab10980     0  mov x2, x1
0xffff7ab10984     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab10998)
0xffff7ab10988     8  mov x3, x0
0xffff7ab1098c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab109a8)
0xffff7ab10990    16  orr x0, x3, x2
0xffff7ab10994    20  ret
0xffff7ab10998    24  movz x16, #0x0
0xffff7ab1099c    28  sub csp, jssp, #0x10 (16)
0xffff7ab109a0    32  stp fp, lr, [jssp, #-16]!
0xffff7ab109a4    36  bl #+0x14 (addr 0xffff7ab109b8)
0xffff7ab109a8    40  movz x16, #0x8
0xffff7ab109ac    44  sub csp, jssp, #0x10 (16)
0xffff7ab109b0    48  stp fp, lr, [jssp, #-16]!
0xffff7ab109b4    52  bl #+0x4 (addr 0xffff7ab109b8)
0xffff7ab109b8    56  movz x17, #0xa00000000
0xffff7ab109bc    60  sub csp, jssp, #0x10 (16)
0xffff7ab109c0    64  stp x17, cp, [jssp, #-16]!
0xffff7ab109c4    68  add fp, jssp, #0x10 (16)
0xffff7ab109c8    72  ldr x17, pc+24 (addr 0x0000ffff7ab109e0)    ;; lazy deoptimization bailout 0
0xffff7ab109cc    76  add x17, x17, x16
0xffff7ab109d0    80  br x17
0xffff7ab109d4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab109d8    88  d63f03e0       constant
0xffff7ab109dc    92  d503201f       constant
0xffff7ab109e0    96  7a906000       constant
0xffff7ab109e4   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab109c8  runtime entry
0xffff7ab109d4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2464
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0xffff7ab10a60     0  mov x2, x0
0xffff7ab10a64     4  tbnz w2, #0, #+0xac (addr 0xffff7ab10b10)
0xffff7ab10a68     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab10a80)
0xffff7ab10a6c    12  asr x4, x1, #32
0xffff7ab10a70    16  asr x0, x2, #32
0xffff7ab10a74    20  orr w0, w0, w4
0xffff7ab10a78    24  lsl x0, x0, #32
0xffff7ab10a7c    28  ret
0xffff7ab10a80    32  sub csp, jssp, #0x10 (16)
0xffff7ab10a84    36  stp fp, lr, [jssp, #-16]!
0xffff7ab10a88    40  movz fp, #0xa00000000
0xffff7ab10a8c    44  sub csp, jssp, #0x8 (8)
0xffff7ab10a90    48  str fp, [jssp, #-8]!
0xffff7ab10a94    52  add fp, jssp, #0x8 (8)
0xffff7ab10a98    56  ldur x16, [x1, #-1]
0xffff7ab10a9c    60  ldr x17, [x26, #120]
0xffff7ab10aa0    64  cmp x16, x17
0xffff7ab10aa4    68  b.ne #+0x30 (addr 0xffff7ab10ad4)
0xffff7ab10aa8    72  ldur d30, [x1, #7]
0xffff7ab10aac    76  fcvtzs x4, d30
0xffff7ab10ab0    80  cmp x4, #0x1 (1)
0xffff7ab10ab4    84  ccmn x4, #1, #nzcV, vc
0xffff7ab10ab8    88  b.vc #+0x18 (addr 0xffff7ab10ad0)
0xffff7ab10abc    92  sub csp, jssp, #0x8 (8)
0xffff7ab10ac0    96  str lr, [jssp, #-8]!
0xffff7ab10ac4   100  ldr x16, pc+68 (addr 0x0000ffff7ab10b08)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab10ac8   104  blr x16
0xffff7ab10acc   108  ldr lr, [jssp], #8
0xffff7ab10ad0   112  b #+0x24 (addr 0xffff7ab10af4)
0xffff7ab10ad4   116  ldp x4, x3, [x26, #64]
0xffff7ab10ad8   120  cmp x1, x4
0xffff7ab10adc   124  cset x4, eq
0xffff7ab10ae0   128  ccmp x1, x3, #nZcv, ne
0xffff7ab10ae4   132  b.eq #+0x10 (addr 0xffff7ab10af4)
0xffff7ab10ae8   136  ldr x16, [x26, #40]
0xffff7ab10aec   140  cmp x1, x16
0xffff7ab10af0   144  b.ne #+0x30 (addr 0xffff7ab10b20)
0xffff7ab10af4   148  ldr lr, [jssp, #16]
0xffff7ab10af8   152  ldp xzr, fp, [jssp], #24
0xffff7ab10afc   156  b #-0x8c (addr 0xffff7ab10a70)
0xffff7ab10b00   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab10b04   164  d63f03e0       constant
0xffff7ab10b08   168  7ab0fee0       constant
0xffff7ab10b0c   172  0000ffff       constant
0xffff7ab10b10   176  movz x16, #0x0
0xffff7ab10b14   180  sub csp, jssp, #0x10 (16)
0xffff7ab10b18   184  stp fp, lr, [jssp, #-16]!
0xffff7ab10b1c   188  bl #+0xc (addr 0xffff7ab10b28)
0xffff7ab10b20   192  movz x16, #0x8
0xffff7ab10b24   196  bl #+0x14 (addr 0xffff7ab10b38)
0xffff7ab10b28   200  movz x17, #0xa00000000
0xffff7ab10b2c   204  sub csp, jssp, #0x10 (16)
0xffff7ab10b30   208  stp x17, cp, [jssp, #-16]!
0xffff7ab10b34   212  add fp, jssp, #0x10 (16)
0xffff7ab10b38   216  ldr x17, pc+24 (addr 0x0000ffff7ab10b50)    ;; lazy deoptimization bailout 0
0xffff7ab10b3c   220  add x17, x17, x16
0xffff7ab10b40   224  br x17
0xffff7ab10b44   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10b48   232  d63f03e0       constant
0xffff7ab10b4c   236  d503201f       constant
0xffff7ab10b50   240  7a906000       constant
0xffff7ab10b54   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab10ac4  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab10b00  constant pool (size 16)
0xffff7ab10b38  runtime entry
0xffff7ab10b44  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2464
type = NORMAL
name = BinaryOpICStub(BIT_OR:Number*Smi->Int32)
compiler = crankshaft
Instructions (size = 256)
0xffff7ab10a60     0  mov x2, x0
0xffff7ab10a64     4  tbnz w2, #0, #+0xac (addr 0xffff7ab10b10)
0xffff7ab10a68     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab10a80)
0xffff7ab10a6c    12  asr x4, x1, #32
0xffff7ab10a70    16  asr x0, x2, #32
0xffff7ab10a74    20  orr w0, w0, w4
0xffff7ab10a78    24  lsl x0, x0, #32
0xffff7ab10a7c    28  ret
0xffff7ab10a80    32  sub csp, jssp, #0x10 (16)
0xffff7ab10a84    36  stp fp, lr, [jssp, #-16]!
0xffff7ab10a88    40  movz fp, #0xa00000000
0xffff7ab10a8c    44  sub csp, jssp, #0x8 (8)
0xffff7ab10a90    48  str fp, [jssp, #-8]!
0xffff7ab10a94    52  add fp, jssp, #0x8 (8)
0xffff7ab10a98    56  ldur x16, [x1, #-1]
0xffff7ab10a9c    60  ldr x17, [x26, #120]
0xffff7ab10aa0    64  cmp x16, x17
0xffff7ab10aa4    68  b.ne #+0x30 (addr 0xffff7ab10ad4)
0xffff7ab10aa8    72  ldur d30, [x1, #7]
0xffff7ab10aac    76  fcvtzs x4, d30
0xffff7ab10ab0    80  cmp x4, #0x1 (1)
0xffff7ab10ab4    84  ccmn x4, #1, #nzcV, vc
0xffff7ab10ab8    88  b.vc #+0x18 (addr 0xffff7ab10ad0)
0xffff7ab10abc    92  sub csp, jssp, #0x8 (8)
0xffff7ab10ac0    96  str lr, [jssp, #-8]!
0xffff7ab10ac4   100  ldr x16, pc+68 (addr 0x0000ffff7ab10b08)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab10ac8   104  blr x16
0xffff7ab10acc   108  ldr lr, [jssp], #8
0xffff7ab10ad0   112  b #+0x24 (addr 0xffff7ab10af4)
0xffff7ab10ad4   116  ldp x4, x3, [x26, #64]
0xffff7ab10ad8   120  cmp x1, x4
0xffff7ab10adc   124  cset x4, eq
0xffff7ab10ae0   128  ccmp x1, x3, #nZcv, ne
0xffff7ab10ae4   132  b.eq #+0x10 (addr 0xffff7ab10af4)
0xffff7ab10ae8   136  ldr x16, [x26, #40]
0xffff7ab10aec   140  cmp x1, x16
0xffff7ab10af0   144  b.ne #+0x30 (addr 0xffff7ab10b20)
0xffff7ab10af4   148  ldr lr, [jssp, #16]
0xffff7ab10af8   152  ldp xzr, fp, [jssp], #24
0xffff7ab10afc   156  b #-0x8c (addr 0xffff7ab10a70)
0xffff7ab10b00   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab10b04   164  d63f03e0       constant
0xffff7ab10b08   168  7ab0fee0       constant
0xffff7ab10b0c   172  0000ffff       constant
0xffff7ab10b10   176  movz x16, #0x0
0xffff7ab10b14   180  sub csp, jssp, #0x10 (16)
0xffff7ab10b18   184  stp fp, lr, [jssp, #-16]!
0xffff7ab10b1c   188  bl #+0xc (addr 0xffff7ab10b28)
0xffff7ab10b20   192  movz x16, #0x8
0xffff7ab10b24   196  bl #+0x14 (addr 0xffff7ab10b38)
0xffff7ab10b28   200  movz x17, #0xa00000000
0xffff7ab10b2c   204  sub csp, jssp, #0x10 (16)
0xffff7ab10b30   208  stp x17, cp, [jssp, #-16]!
0xffff7ab10b34   212  add fp, jssp, #0x10 (16)
0xffff7ab10b38   216  ldr x17, pc+24 (addr 0x0000ffff7ab10b50)    ;; lazy deoptimization bailout 0
0xffff7ab10b3c   220  add x17, x17, x16
0xffff7ab10b40   224  br x17
0xffff7ab10b44   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10b48   232  d63f03e0       constant
0xffff7ab10b4c   236  d503201f       constant
0xffff7ab10b50   240  7a906000       constant
0xffff7ab10b54   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab10ac4  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab10b00  constant pool (size 16)
0xffff7ab10b38  runtime entry
0xffff7ab10b44  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2448
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0xffff7ab10bc0     0  mov x2, x0
0xffff7ab10bc4     4  tbnz w2, #0, #+0xac (addr 0xffff7ab10c70)
0xffff7ab10bc8     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab10be0)
0xffff7ab10bcc    12  asr x4, x1, #32
0xffff7ab10bd0    16  asr x0, x2, #32
0xffff7ab10bd4    20  orr w0, w0, w4
0xffff7ab10bd8    24  lsl x0, x0, #32
0xffff7ab10bdc    28  ret
0xffff7ab10be0    32  sub csp, jssp, #0x10 (16)
0xffff7ab10be4    36  stp fp, lr, [jssp, #-16]!
0xffff7ab10be8    40  movz fp, #0xa00000000
0xffff7ab10bec    44  sub csp, jssp, #0x8 (8)
0xffff7ab10bf0    48  str fp, [jssp, #-8]!
0xffff7ab10bf4    52  add fp, jssp, #0x8 (8)
0xffff7ab10bf8    56  ldur x16, [x1, #-1]
0xffff7ab10bfc    60  ldr x17, [x26, #120]
0xffff7ab10c00    64  cmp x16, x17
0xffff7ab10c04    68  b.ne #+0x30 (addr 0xffff7ab10c34)
0xffff7ab10c08    72  ldur d30, [x1, #7]
0xffff7ab10c0c    76  fcvtzs x4, d30
0xffff7ab10c10    80  cmp x4, #0x1 (1)
0xffff7ab10c14    84  ccmn x4, #1, #nzcV, vc
0xffff7ab10c18    88  b.vc #+0x18 (addr 0xffff7ab10c30)
0xffff7ab10c1c    92  sub csp, jssp, #0x8 (8)
0xffff7ab10c20    96  str lr, [jssp, #-8]!
0xffff7ab10c24   100  ldr x16, pc+68 (addr 0x0000ffff7ab10c68)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab10c28   104  blr x16
0xffff7ab10c2c   108  ldr lr, [jssp], #8
0xffff7ab10c30   112  b #+0x24 (addr 0xffff7ab10c54)
0xffff7ab10c34   116  ldp x4, x3, [x26, #64]
0xffff7ab10c38   120  cmp x1, x4
0xffff7ab10c3c   124  cset x4, eq
0xffff7ab10c40   128  ccmp x1, x3, #nZcv, ne
0xffff7ab10c44   132  b.eq #+0x10 (addr 0xffff7ab10c54)
0xffff7ab10c48   136  ldr x16, [x26, #40]
0xffff7ab10c4c   140  cmp x1, x16
0xffff7ab10c50   144  b.ne #+0x30 (addr 0xffff7ab10c80)
0xffff7ab10c54   148  ldr lr, [jssp, #16]
0xffff7ab10c58   152  ldp xzr, fp, [jssp], #24
0xffff7ab10c5c   156  b #-0x8c (addr 0xffff7ab10bd0)
0xffff7ab10c60   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab10c64   164  d63f03e0       constant
0xffff7ab10c68   168  7ab0fee0       constant
0xffff7ab10c6c   172  0000ffff       constant
0xffff7ab10c70   176  movz x16, #0x0
0xffff7ab10c74   180  sub csp, jssp, #0x10 (16)
0xffff7ab10c78   184  stp fp, lr, [jssp, #-16]!
0xffff7ab10c7c   188  bl #+0xc (addr 0xffff7ab10c88)
0xffff7ab10c80   192  movz x16, #0x8
0xffff7ab10c84   196  bl #+0x14 (addr 0xffff7ab10c98)
0xffff7ab10c88   200  movz x17, #0xa00000000
0xffff7ab10c8c   204  sub csp, jssp, #0x10 (16)
0xffff7ab10c90   208  stp x17, cp, [jssp, #-16]!
0xffff7ab10c94   212  add fp, jssp, #0x10 (16)
0xffff7ab10c98   216  ldr x17, pc+24 (addr 0x0000ffff7ab10cb0)    ;; lazy deoptimization bailout 0
0xffff7ab10c9c   220  add x17, x17, x16
0xffff7ab10ca0   224  br x17
0xffff7ab10ca4   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10ca8   232  d63f03e0       constant
0xffff7ab10cac   236  d503201f       constant
0xffff7ab10cb0   240  7a906000       constant
0xffff7ab10cb4   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab10c24  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab10c60  constant pool (size 16)
0xffff7ab10c98  runtime entry
0xffff7ab10ca4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2448
type = NORMAL
name = BinaryOpICStub(BIT_OR:Number*Smi->Smi)
compiler = crankshaft
Instructions (size = 256)
0xffff7ab10bc0     0  mov x2, x0
0xffff7ab10bc4     4  tbnz w2, #0, #+0xac (addr 0xffff7ab10c70)
0xffff7ab10bc8     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab10be0)
0xffff7ab10bcc    12  asr x4, x1, #32
0xffff7ab10bd0    16  asr x0, x2, #32
0xffff7ab10bd4    20  orr w0, w0, w4
0xffff7ab10bd8    24  lsl x0, x0, #32
0xffff7ab10bdc    28  ret
0xffff7ab10be0    32  sub csp, jssp, #0x10 (16)
0xffff7ab10be4    36  stp fp, lr, [jssp, #-16]!
0xffff7ab10be8    40  movz fp, #0xa00000000
0xffff7ab10bec    44  sub csp, jssp, #0x8 (8)
0xffff7ab10bf0    48  str fp, [jssp, #-8]!
0xffff7ab10bf4    52  add fp, jssp, #0x8 (8)
0xffff7ab10bf8    56  ldur x16, [x1, #-1]
0xffff7ab10bfc    60  ldr x17, [x26, #120]
0xffff7ab10c00    64  cmp x16, x17
0xffff7ab10c04    68  b.ne #+0x30 (addr 0xffff7ab10c34)
0xffff7ab10c08    72  ldur d30, [x1, #7]
0xffff7ab10c0c    76  fcvtzs x4, d30
0xffff7ab10c10    80  cmp x4, #0x1 (1)
0xffff7ab10c14    84  ccmn x4, #1, #nzcV, vc
0xffff7ab10c18    88  b.vc #+0x18 (addr 0xffff7ab10c30)
0xffff7ab10c1c    92  sub csp, jssp, #0x8 (8)
0xffff7ab10c20    96  str lr, [jssp, #-8]!
0xffff7ab10c24   100  ldr x16, pc+68 (addr 0x0000ffff7ab10c68)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab10c28   104  blr x16
0xffff7ab10c2c   108  ldr lr, [jssp], #8
0xffff7ab10c30   112  b #+0x24 (addr 0xffff7ab10c54)
0xffff7ab10c34   116  ldp x4, x3, [x26, #64]
0xffff7ab10c38   120  cmp x1, x4
0xffff7ab10c3c   124  cset x4, eq
0xffff7ab10c40   128  ccmp x1, x3, #nZcv, ne
0xffff7ab10c44   132  b.eq #+0x10 (addr 0xffff7ab10c54)
0xffff7ab10c48   136  ldr x16, [x26, #40]
0xffff7ab10c4c   140  cmp x1, x16
0xffff7ab10c50   144  b.ne #+0x30 (addr 0xffff7ab10c80)
0xffff7ab10c54   148  ldr lr, [jssp, #16]
0xffff7ab10c58   152  ldp xzr, fp, [jssp], #24
0xffff7ab10c5c   156  b #-0x8c (addr 0xffff7ab10bd0)
0xffff7ab10c60   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab10c64   164  d63f03e0       constant
0xffff7ab10c68   168  7ab0fee0       constant
0xffff7ab10c6c   172  0000ffff       constant
0xffff7ab10c70   176  movz x16, #0x0
0xffff7ab10c74   180  sub csp, jssp, #0x10 (16)
0xffff7ab10c78   184  stp fp, lr, [jssp, #-16]!
0xffff7ab10c7c   188  bl #+0xc (addr 0xffff7ab10c88)
0xffff7ab10c80   192  movz x16, #0x8
0xffff7ab10c84   196  bl #+0x14 (addr 0xffff7ab10c98)
0xffff7ab10c88   200  movz x17, #0xa00000000
0xffff7ab10c8c   204  sub csp, jssp, #0x10 (16)
0xffff7ab10c90   208  stp x17, cp, [jssp, #-16]!
0xffff7ab10c94   212  add fp, jssp, #0x10 (16)
0xffff7ab10c98   216  ldr x17, pc+24 (addr 0x0000ffff7ab10cb0)    ;; lazy deoptimization bailout 0
0xffff7ab10c9c   220  add x17, x17, x16
0xffff7ab10ca0   224  br x17
0xffff7ab10ca4   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10ca8   232  d63f03e0       constant
0xffff7ab10cac   236  d503201f       constant
0xffff7ab10cb0   240  7a906000       constant
0xffff7ab10cb4   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab10c24  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab10c60  constant pool (size 16)
0xffff7ab10c98  runtime entry
0xffff7ab10ca4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4256
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab10d20     0  mov x2, x1
0xffff7ab10d24     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab10d38)
0xffff7ab10d28     8  mov x3, x0
0xffff7ab10d2c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab10d48)
0xffff7ab10d30    16  orr x0, x3, x2
0xffff7ab10d34    20  ret
0xffff7ab10d38    24  movz x16, #0x0
0xffff7ab10d3c    28  sub csp, jssp, #0x10 (16)
0xffff7ab10d40    32  stp fp, lr, [jssp, #-16]!
0xffff7ab10d44    36  bl #+0x14 (addr 0xffff7ab10d58)
0xffff7ab10d48    40  movz x16, #0x8
0xffff7ab10d4c    44  sub csp, jssp, #0x10 (16)
0xffff7ab10d50    48  stp fp, lr, [jssp, #-16]!
0xffff7ab10d54    52  bl #+0x4 (addr 0xffff7ab10d58)
0xffff7ab10d58    56  movz x17, #0xa00000000
0xffff7ab10d5c    60  sub csp, jssp, #0x10 (16)
0xffff7ab10d60    64  stp x17, cp, [jssp, #-16]!
0xffff7ab10d64    68  add fp, jssp, #0x10 (16)
0xffff7ab10d68    72  ldr x17, pc+24 (addr 0x0000ffff7ab10d80)    ;; lazy deoptimization bailout 0
0xffff7ab10d6c    76  add x17, x17, x16
0xffff7ab10d70    80  br x17
0xffff7ab10d74    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10d78    88  d63f03e0       constant
0xffff7ab10d7c    92  d503201f       constant
0xffff7ab10d80    96  7a906000       constant
0xffff7ab10d84   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab10d68  runtime entry
0xffff7ab10d74  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4256
type = NORMAL
name = BinaryOpICStub(BIT_OR:Smi*Int32->Int32)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab10d20     0  mov x2, x1
0xffff7ab10d24     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab10d38)
0xffff7ab10d28     8  mov x3, x0
0xffff7ab10d2c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab10d48)
0xffff7ab10d30    16  orr x0, x3, x2
0xffff7ab10d34    20  ret
0xffff7ab10d38    24  movz x16, #0x0
0xffff7ab10d3c    28  sub csp, jssp, #0x10 (16)
0xffff7ab10d40    32  stp fp, lr, [jssp, #-16]!
0xffff7ab10d44    36  bl #+0x14 (addr 0xffff7ab10d58)
0xffff7ab10d48    40  movz x16, #0x8
0xffff7ab10d4c    44  sub csp, jssp, #0x10 (16)
0xffff7ab10d50    48  stp fp, lr, [jssp, #-16]!
0xffff7ab10d54    52  bl #+0x4 (addr 0xffff7ab10d58)
0xffff7ab10d58    56  movz x17, #0xa00000000
0xffff7ab10d5c    60  sub csp, jssp, #0x10 (16)
0xffff7ab10d60    64  stp x17, cp, [jssp, #-16]!
0xffff7ab10d64    68  add fp, jssp, #0x10 (16)
0xffff7ab10d68    72  ldr x17, pc+24 (addr 0x0000ffff7ab10d80)    ;; lazy deoptimization bailout 0
0xffff7ab10d6c    76  add x17, x17, x16
0xffff7ab10d70    80  br x17
0xffff7ab10d74    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10d78    88  d63f03e0       constant
0xffff7ab10d7c    92  d503201f       constant
0xffff7ab10d80    96  7a906000       constant
0xffff7ab10d84   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab10d68  runtime entry
0xffff7ab10d74  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4240
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab10e00     0  mov x2, x1
0xffff7ab10e04     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab10e18)
0xffff7ab10e08     8  mov x3, x0
0xffff7ab10e0c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab10e28)
0xffff7ab10e10    16  orr x0, x3, x2
0xffff7ab10e14    20  ret
0xffff7ab10e18    24  movz x16, #0x0
0xffff7ab10e1c    28  sub csp, jssp, #0x10 (16)
0xffff7ab10e20    32  stp fp, lr, [jssp, #-16]!
0xffff7ab10e24    36  bl #+0x14 (addr 0xffff7ab10e38)
0xffff7ab10e28    40  movz x16, #0x8
0xffff7ab10e2c    44  sub csp, jssp, #0x10 (16)
0xffff7ab10e30    48  stp fp, lr, [jssp, #-16]!
0xffff7ab10e34    52  bl #+0x4 (addr 0xffff7ab10e38)
0xffff7ab10e38    56  movz x17, #0xa00000000
0xffff7ab10e3c    60  sub csp, jssp, #0x10 (16)
0xffff7ab10e40    64  stp x17, cp, [jssp, #-16]!
0xffff7ab10e44    68  add fp, jssp, #0x10 (16)
0xffff7ab10e48    72  ldr x17, pc+24 (addr 0x0000ffff7ab10e60)    ;; lazy deoptimization bailout 0
0xffff7ab10e4c    76  add x17, x17, x16
0xffff7ab10e50    80  br x17
0xffff7ab10e54    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10e58    88  d63f03e0       constant
0xffff7ab10e5c    92  d503201f       constant
0xffff7ab10e60    96  7a906000       constant
0xffff7ab10e64   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab10e48  runtime entry
0xffff7ab10e54  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4240
type = NORMAL
name = BinaryOpICStub(BIT_OR:Smi*Int32->Smi)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab10e00     0  mov x2, x1
0xffff7ab10e04     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab10e18)
0xffff7ab10e08     8  mov x3, x0
0xffff7ab10e0c    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab10e28)
0xffff7ab10e10    16  orr x0, x3, x2
0xffff7ab10e14    20  ret
0xffff7ab10e18    24  movz x16, #0x0
0xffff7ab10e1c    28  sub csp, jssp, #0x10 (16)
0xffff7ab10e20    32  stp fp, lr, [jssp, #-16]!
0xffff7ab10e24    36  bl #+0x14 (addr 0xffff7ab10e38)
0xffff7ab10e28    40  movz x16, #0x8
0xffff7ab10e2c    44  sub csp, jssp, #0x10 (16)
0xffff7ab10e30    48  stp fp, lr, [jssp, #-16]!
0xffff7ab10e34    52  bl #+0x4 (addr 0xffff7ab10e38)
0xffff7ab10e38    56  movz x17, #0xa00000000
0xffff7ab10e3c    60  sub csp, jssp, #0x10 (16)
0xffff7ab10e40    64  stp x17, cp, [jssp, #-16]!
0xffff7ab10e44    68  add fp, jssp, #0x10 (16)
0xffff7ab10e48    72  ldr x17, pc+24 (addr 0x0000ffff7ab10e60)    ;; lazy deoptimization bailout 0
0xffff7ab10e4c    76  add x17, x17, x16
0xffff7ab10e50    80  br x17
0xffff7ab10e54    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10e58    88  d63f03e0       constant
0xffff7ab10e5c    92  d503201f       constant
0xffff7ab10e60    96  7a906000       constant
0xffff7ab10e64   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab10e48  runtime entry
0xffff7ab10e54  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2192
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab10ee0     0  mov x2, x1
0xffff7ab10ee4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab10ef8)
0xffff7ab10ee8     8  mov x3, x0
0xffff7ab10eec    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab10f08)
0xffff7ab10ef0    16  orr x0, x3, x2
0xffff7ab10ef4    20  ret
0xffff7ab10ef8    24  movz x16, #0x0
0xffff7ab10efc    28  sub csp, jssp, #0x10 (16)
0xffff7ab10f00    32  stp fp, lr, [jssp, #-16]!
0xffff7ab10f04    36  bl #+0x14 (addr 0xffff7ab10f18)
0xffff7ab10f08    40  movz x16, #0x8
0xffff7ab10f0c    44  sub csp, jssp, #0x10 (16)
0xffff7ab10f10    48  stp fp, lr, [jssp, #-16]!
0xffff7ab10f14    52  bl #+0x4 (addr 0xffff7ab10f18)
0xffff7ab10f18    56  movz x17, #0xa00000000
0xffff7ab10f1c    60  sub csp, jssp, #0x10 (16)
0xffff7ab10f20    64  stp x17, cp, [jssp, #-16]!
0xffff7ab10f24    68  add fp, jssp, #0x10 (16)
0xffff7ab10f28    72  ldr x17, pc+24 (addr 0x0000ffff7ab10f40)    ;; lazy deoptimization bailout 0
0xffff7ab10f2c    76  add x17, x17, x16
0xffff7ab10f30    80  br x17
0xffff7ab10f34    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10f38    88  d63f03e0       constant
0xffff7ab10f3c    92  d503201f       constant
0xffff7ab10f40    96  7a906000       constant
0xffff7ab10f44   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab10f28  runtime entry
0xffff7ab10f34  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2192
type = NORMAL
name = BinaryOpICStub(BIT_OR:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab10ee0     0  mov x2, x1
0xffff7ab10ee4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab10ef8)
0xffff7ab10ee8     8  mov x3, x0
0xffff7ab10eec    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab10f08)
0xffff7ab10ef0    16  orr x0, x3, x2
0xffff7ab10ef4    20  ret
0xffff7ab10ef8    24  movz x16, #0x0
0xffff7ab10efc    28  sub csp, jssp, #0x10 (16)
0xffff7ab10f00    32  stp fp, lr, [jssp, #-16]!
0xffff7ab10f04    36  bl #+0x14 (addr 0xffff7ab10f18)
0xffff7ab10f08    40  movz x16, #0x8
0xffff7ab10f0c    44  sub csp, jssp, #0x10 (16)
0xffff7ab10f10    48  stp fp, lr, [jssp, #-16]!
0xffff7ab10f14    52  bl #+0x4 (addr 0xffff7ab10f18)
0xffff7ab10f18    56  movz x17, #0xa00000000
0xffff7ab10f1c    60  sub csp, jssp, #0x10 (16)
0xffff7ab10f20    64  stp x17, cp, [jssp, #-16]!
0xffff7ab10f24    68  add fp, jssp, #0x10 (16)
0xffff7ab10f28    72  ldr x17, pc+24 (addr 0x0000ffff7ab10f40)    ;; lazy deoptimization bailout 0
0xffff7ab10f2c    76  add x17, x17, x16
0xffff7ab10f30    80  br x17
0xffff7ab10f34    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab10f38    88  d63f03e0       constant
0xffff7ab10f3c    92  d503201f       constant
0xffff7ab10f40    96  7a906000       constant
0xffff7ab10f44   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab10f28  runtime entry
0xffff7ab10f34  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4385
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab10fc0     0  mov x2, x1
0xffff7ab10fc4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab10fd8)
0xffff7ab10fc8     8  mov x3, x0
0xffff7ab10fcc    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab10fe8)
0xffff7ab10fd0    16  eor x0, x3, x2
0xffff7ab10fd4    20  ret
0xffff7ab10fd8    24  movz x16, #0x0
0xffff7ab10fdc    28  sub csp, jssp, #0x10 (16)
0xffff7ab10fe0    32  stp fp, lr, [jssp, #-16]!
0xffff7ab10fe4    36  bl #+0x14 (addr 0xffff7ab10ff8)
0xffff7ab10fe8    40  movz x16, #0x8
0xffff7ab10fec    44  sub csp, jssp, #0x10 (16)
0xffff7ab10ff0    48  stp fp, lr, [jssp, #-16]!
0xffff7ab10ff4    52  bl #+0x4 (addr 0xffff7ab10ff8)
0xffff7ab10ff8    56  movz x17, #0xa00000000
0xffff7ab10ffc    60  sub csp, jssp, #0x10 (16)
0xffff7ab11000    64  stp x17, cp, [jssp, #-16]!
0xffff7ab11004    68  add fp, jssp, #0x10 (16)
0xffff7ab11008    72  ldr x17, pc+24 (addr 0x0000ffff7ab11020)    ;; lazy deoptimization bailout 0
0xffff7ab1100c    76  add x17, x17, x16
0xffff7ab11010    80  br x17
0xffff7ab11014    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11018    88  d63f03e0       constant
0xffff7ab1101c    92  d503201f       constant
0xffff7ab11020    96  7a906000       constant
0xffff7ab11024   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab11008  runtime entry
0xffff7ab11014  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4385
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Int32*Int32->Int32)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab10fc0     0  mov x2, x1
0xffff7ab10fc4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab10fd8)
0xffff7ab10fc8     8  mov x3, x0
0xffff7ab10fcc    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab10fe8)
0xffff7ab10fd0    16  eor x0, x3, x2
0xffff7ab10fd4    20  ret
0xffff7ab10fd8    24  movz x16, #0x0
0xffff7ab10fdc    28  sub csp, jssp, #0x10 (16)
0xffff7ab10fe0    32  stp fp, lr, [jssp, #-16]!
0xffff7ab10fe4    36  bl #+0x14 (addr 0xffff7ab10ff8)
0xffff7ab10fe8    40  movz x16, #0x8
0xffff7ab10fec    44  sub csp, jssp, #0x10 (16)
0xffff7ab10ff0    48  stp fp, lr, [jssp, #-16]!
0xffff7ab10ff4    52  bl #+0x4 (addr 0xffff7ab10ff8)
0xffff7ab10ff8    56  movz x17, #0xa00000000
0xffff7ab10ffc    60  sub csp, jssp, #0x10 (16)
0xffff7ab11000    64  stp x17, cp, [jssp, #-16]!
0xffff7ab11004    68  add fp, jssp, #0x10 (16)
0xffff7ab11008    72  ldr x17, pc+24 (addr 0x0000ffff7ab11020)    ;; lazy deoptimization bailout 0
0xffff7ab1100c    76  add x17, x17, x16
0xffff7ab11010    80  br x17
0xffff7ab11014    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11018    88  d63f03e0       constant
0xffff7ab1101c    92  d503201f       constant
0xffff7ab11020    96  7a906000       constant
0xffff7ab11024   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab11008  runtime entry
0xffff7ab11014  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4369
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab110a0     0  mov x2, x1
0xffff7ab110a4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab110b8)
0xffff7ab110a8     8  mov x3, x0
0xffff7ab110ac    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab110c8)
0xffff7ab110b0    16  eor x0, x3, x2
0xffff7ab110b4    20  ret
0xffff7ab110b8    24  movz x16, #0x0
0xffff7ab110bc    28  sub csp, jssp, #0x10 (16)
0xffff7ab110c0    32  stp fp, lr, [jssp, #-16]!
0xffff7ab110c4    36  bl #+0x14 (addr 0xffff7ab110d8)
0xffff7ab110c8    40  movz x16, #0x8
0xffff7ab110cc    44  sub csp, jssp, #0x10 (16)
0xffff7ab110d0    48  stp fp, lr, [jssp, #-16]!
0xffff7ab110d4    52  bl #+0x4 (addr 0xffff7ab110d8)
0xffff7ab110d8    56  movz x17, #0xa00000000
0xffff7ab110dc    60  sub csp, jssp, #0x10 (16)
0xffff7ab110e0    64  stp x17, cp, [jssp, #-16]!
0xffff7ab110e4    68  add fp, jssp, #0x10 (16)
0xffff7ab110e8    72  ldr x17, pc+24 (addr 0x0000ffff7ab11100)    ;; lazy deoptimization bailout 0
0xffff7ab110ec    76  add x17, x17, x16
0xffff7ab110f0    80  br x17
0xffff7ab110f4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab110f8    88  d63f03e0       constant
0xffff7ab110fc    92  d503201f       constant
0xffff7ab11100    96  7a906000       constant
0xffff7ab11104   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab110e8  runtime entry
0xffff7ab110f4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4369
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Int32*Int32->Smi)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab110a0     0  mov x2, x1
0xffff7ab110a4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab110b8)
0xffff7ab110a8     8  mov x3, x0
0xffff7ab110ac    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab110c8)
0xffff7ab110b0    16  eor x0, x3, x2
0xffff7ab110b4    20  ret
0xffff7ab110b8    24  movz x16, #0x0
0xffff7ab110bc    28  sub csp, jssp, #0x10 (16)
0xffff7ab110c0    32  stp fp, lr, [jssp, #-16]!
0xffff7ab110c4    36  bl #+0x14 (addr 0xffff7ab110d8)
0xffff7ab110c8    40  movz x16, #0x8
0xffff7ab110cc    44  sub csp, jssp, #0x10 (16)
0xffff7ab110d0    48  stp fp, lr, [jssp, #-16]!
0xffff7ab110d4    52  bl #+0x4 (addr 0xffff7ab110d8)
0xffff7ab110d8    56  movz x17, #0xa00000000
0xffff7ab110dc    60  sub csp, jssp, #0x10 (16)
0xffff7ab110e0    64  stp x17, cp, [jssp, #-16]!
0xffff7ab110e4    68  add fp, jssp, #0x10 (16)
0xffff7ab110e8    72  ldr x17, pc+24 (addr 0x0000ffff7ab11100)    ;; lazy deoptimization bailout 0
0xffff7ab110ec    76  add x17, x17, x16
0xffff7ab110f0    80  br x17
0xffff7ab110f4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab110f8    88  d63f03e0       constant
0xffff7ab110fc    92  d503201f       constant
0xffff7ab11100    96  7a906000       constant
0xffff7ab11104   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab110e8  runtime entry
0xffff7ab110f4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6417
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0xffff7ab11180     0  mov x2, x1
0xffff7ab11184     4  tbnz w2, #0, #+0xac (addr 0xffff7ab11230)
0xffff7ab11188     8  tbnz w0, #0, #+0x18 (addr 0xffff7ab111a0)
0xffff7ab1118c    12  asr x4, x0, #32
0xffff7ab11190    16  asr x0, x2, #32
0xffff7ab11194    20  eor w0, w4, w0
0xffff7ab11198    24  lsl x0, x0, #32
0xffff7ab1119c    28  ret
0xffff7ab111a0    32  sub csp, jssp, #0x10 (16)
0xffff7ab111a4    36  stp fp, lr, [jssp, #-16]!
0xffff7ab111a8    40  movz fp, #0xa00000000
0xffff7ab111ac    44  sub csp, jssp, #0x8 (8)
0xffff7ab111b0    48  str fp, [jssp, #-8]!
0xffff7ab111b4    52  add fp, jssp, #0x8 (8)
0xffff7ab111b8    56  ldur x16, [x0, #-1]
0xffff7ab111bc    60  ldr x17, [x26, #120]
0xffff7ab111c0    64  cmp x16, x17
0xffff7ab111c4    68  b.ne #+0x30 (addr 0xffff7ab111f4)
0xffff7ab111c8    72  ldur d30, [x0, #7]
0xffff7ab111cc    76  fcvtzs x4, d30
0xffff7ab111d0    80  cmp x4, #0x1 (1)
0xffff7ab111d4    84  ccmn x4, #1, #nzcV, vc
0xffff7ab111d8    88  b.vc #+0x18 (addr 0xffff7ab111f0)
0xffff7ab111dc    92  sub csp, jssp, #0x8 (8)
0xffff7ab111e0    96  str lr, [jssp, #-8]!
0xffff7ab111e4   100  ldr x16, pc+68 (addr 0x0000ffff7ab11228)    ;; code: STUB, DoubleToIStub, minor: 127232
0xffff7ab111e8   104  blr x16
0xffff7ab111ec   108  ldr lr, [jssp], #8
0xffff7ab111f0   112  b #+0x24 (addr 0xffff7ab11214)
0xffff7ab111f4   116  ldp x4, x3, [x26, #64]
0xffff7ab111f8   120  cmp x0, x4
0xffff7ab111fc   124  cset x4, eq
0xffff7ab11200   128  ccmp x0, x3, #nZcv, ne
0xffff7ab11204   132  b.eq #+0x10 (addr 0xffff7ab11214)
0xffff7ab11208   136  ldr x16, [x26, #40]
0xffff7ab1120c   140  cmp x0, x16
0xffff7ab11210   144  b.ne #+0x30 (addr 0xffff7ab11240)
0xffff7ab11214   148  ldr lr, [jssp, #16]
0xffff7ab11218   152  ldp xzr, fp, [jssp], #24
0xffff7ab1121c   156  b #-0x8c (addr 0xffff7ab11190)
0xffff7ab11220   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab11224   164  d63f03e0       constant
0xffff7ab11228   168  7ab10400       constant
0xffff7ab1122c   172  0000ffff       constant
0xffff7ab11230   176  movz x16, #0x0
0xffff7ab11234   180  sub csp, jssp, #0x10 (16)
0xffff7ab11238   184  stp fp, lr, [jssp, #-16]!
0xffff7ab1123c   188  bl #+0xc (addr 0xffff7ab11248)
0xffff7ab11240   192  movz x16, #0x8
0xffff7ab11244   196  bl #+0x14 (addr 0xffff7ab11258)
0xffff7ab11248   200  movz x17, #0xa00000000
0xffff7ab1124c   204  sub csp, jssp, #0x10 (16)
0xffff7ab11250   208  stp x17, cp, [jssp, #-16]!
0xffff7ab11254   212  add fp, jssp, #0x10 (16)
0xffff7ab11258   216  ldr x17, pc+24 (addr 0x0000ffff7ab11270)    ;; lazy deoptimization bailout 0
0xffff7ab1125c   220  add x17, x17, x16
0xffff7ab11260   224  br x17
0xffff7ab11264   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11268   232  d63f03e0       constant
0xffff7ab1126c   236  d503201f       constant
0xffff7ab11270   240  7a906000       constant
0xffff7ab11274   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab111e4  code target (STUB)  (0xffff7ab10400)
0xffff7ab11220  constant pool (size 16)
0xffff7ab11258  runtime entry
0xffff7ab11264  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6417
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Int32*Number->Smi)
compiler = crankshaft
Instructions (size = 256)
0xffff7ab11180     0  mov x2, x1
0xffff7ab11184     4  tbnz w2, #0, #+0xac (addr 0xffff7ab11230)
0xffff7ab11188     8  tbnz w0, #0, #+0x18 (addr 0xffff7ab111a0)
0xffff7ab1118c    12  asr x4, x0, #32
0xffff7ab11190    16  asr x0, x2, #32
0xffff7ab11194    20  eor w0, w4, w0
0xffff7ab11198    24  lsl x0, x0, #32
0xffff7ab1119c    28  ret
0xffff7ab111a0    32  sub csp, jssp, #0x10 (16)
0xffff7ab111a4    36  stp fp, lr, [jssp, #-16]!
0xffff7ab111a8    40  movz fp, #0xa00000000
0xffff7ab111ac    44  sub csp, jssp, #0x8 (8)
0xffff7ab111b0    48  str fp, [jssp, #-8]!
0xffff7ab111b4    52  add fp, jssp, #0x8 (8)
0xffff7ab111b8    56  ldur x16, [x0, #-1]
0xffff7ab111bc    60  ldr x17, [x26, #120]
0xffff7ab111c0    64  cmp x16, x17
0xffff7ab111c4    68  b.ne #+0x30 (addr 0xffff7ab111f4)
0xffff7ab111c8    72  ldur d30, [x0, #7]
0xffff7ab111cc    76  fcvtzs x4, d30
0xffff7ab111d0    80  cmp x4, #0x1 (1)
0xffff7ab111d4    84  ccmn x4, #1, #nzcV, vc
0xffff7ab111d8    88  b.vc #+0x18 (addr 0xffff7ab111f0)
0xffff7ab111dc    92  sub csp, jssp, #0x8 (8)
0xffff7ab111e0    96  str lr, [jssp, #-8]!
0xffff7ab111e4   100  ldr x16, pc+68 (addr 0x0000ffff7ab11228)    ;; code: STUB, DoubleToIStub, minor: 127232
0xffff7ab111e8   104  blr x16
0xffff7ab111ec   108  ldr lr, [jssp], #8
0xffff7ab111f0   112  b #+0x24 (addr 0xffff7ab11214)
0xffff7ab111f4   116  ldp x4, x3, [x26, #64]
0xffff7ab111f8   120  cmp x0, x4
0xffff7ab111fc   124  cset x4, eq
0xffff7ab11200   128  ccmp x0, x3, #nZcv, ne
0xffff7ab11204   132  b.eq #+0x10 (addr 0xffff7ab11214)
0xffff7ab11208   136  ldr x16, [x26, #40]
0xffff7ab1120c   140  cmp x0, x16
0xffff7ab11210   144  b.ne #+0x30 (addr 0xffff7ab11240)
0xffff7ab11214   148  ldr lr, [jssp, #16]
0xffff7ab11218   152  ldp xzr, fp, [jssp], #24
0xffff7ab1121c   156  b #-0x8c (addr 0xffff7ab11190)
0xffff7ab11220   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab11224   164  d63f03e0       constant
0xffff7ab11228   168  7ab10400       constant
0xffff7ab1122c   172  0000ffff       constant
0xffff7ab11230   176  movz x16, #0x0
0xffff7ab11234   180  sub csp, jssp, #0x10 (16)
0xffff7ab11238   184  stp fp, lr, [jssp, #-16]!
0xffff7ab1123c   188  bl #+0xc (addr 0xffff7ab11248)
0xffff7ab11240   192  movz x16, #0x8
0xffff7ab11244   196  bl #+0x14 (addr 0xffff7ab11258)
0xffff7ab11248   200  movz x17, #0xa00000000
0xffff7ab1124c   204  sub csp, jssp, #0x10 (16)
0xffff7ab11250   208  stp x17, cp, [jssp, #-16]!
0xffff7ab11254   212  add fp, jssp, #0x10 (16)
0xffff7ab11258   216  ldr x17, pc+24 (addr 0x0000ffff7ab11270)    ;; lazy deoptimization bailout 0
0xffff7ab1125c   220  add x17, x17, x16
0xffff7ab11260   224  br x17
0xffff7ab11264   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11268   232  d63f03e0       constant
0xffff7ab1126c   236  d503201f       constant
0xffff7ab11270   240  7a906000       constant
0xffff7ab11274   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab111e4  code target (STUB)  (0xffff7ab10400)
0xffff7ab11220  constant pool (size 16)
0xffff7ab11258  runtime entry
0xffff7ab11264  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2337
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab112e0     0  mov x2, x1
0xffff7ab112e4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab112f8)
0xffff7ab112e8     8  mov x3, x0
0xffff7ab112ec    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab11308)
0xffff7ab112f0    16  eor x0, x3, x2
0xffff7ab112f4    20  ret
0xffff7ab112f8    24  movz x16, #0x0
0xffff7ab112fc    28  sub csp, jssp, #0x10 (16)
0xffff7ab11300    32  stp fp, lr, [jssp, #-16]!
0xffff7ab11304    36  bl #+0x14 (addr 0xffff7ab11318)
0xffff7ab11308    40  movz x16, #0x8
0xffff7ab1130c    44  sub csp, jssp, #0x10 (16)
0xffff7ab11310    48  stp fp, lr, [jssp, #-16]!
0xffff7ab11314    52  bl #+0x4 (addr 0xffff7ab11318)
0xffff7ab11318    56  movz x17, #0xa00000000
0xffff7ab1131c    60  sub csp, jssp, #0x10 (16)
0xffff7ab11320    64  stp x17, cp, [jssp, #-16]!
0xffff7ab11324    68  add fp, jssp, #0x10 (16)
0xffff7ab11328    72  ldr x17, pc+24 (addr 0x0000ffff7ab11340)    ;; lazy deoptimization bailout 0
0xffff7ab1132c    76  add x17, x17, x16
0xffff7ab11330    80  br x17
0xffff7ab11334    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11338    88  d63f03e0       constant
0xffff7ab1133c    92  d503201f       constant
0xffff7ab11340    96  7a906000       constant
0xffff7ab11344   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab11328  runtime entry
0xffff7ab11334  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2337
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab112e0     0  mov x2, x1
0xffff7ab112e4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab112f8)
0xffff7ab112e8     8  mov x3, x0
0xffff7ab112ec    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab11308)
0xffff7ab112f0    16  eor x0, x3, x2
0xffff7ab112f4    20  ret
0xffff7ab112f8    24  movz x16, #0x0
0xffff7ab112fc    28  sub csp, jssp, #0x10 (16)
0xffff7ab11300    32  stp fp, lr, [jssp, #-16]!
0xffff7ab11304    36  bl #+0x14 (addr 0xffff7ab11318)
0xffff7ab11308    40  movz x16, #0x8
0xffff7ab1130c    44  sub csp, jssp, #0x10 (16)
0xffff7ab11310    48  stp fp, lr, [jssp, #-16]!
0xffff7ab11314    52  bl #+0x4 (addr 0xffff7ab11318)
0xffff7ab11318    56  movz x17, #0xa00000000
0xffff7ab1131c    60  sub csp, jssp, #0x10 (16)
0xffff7ab11320    64  stp x17, cp, [jssp, #-16]!
0xffff7ab11324    68  add fp, jssp, #0x10 (16)
0xffff7ab11328    72  ldr x17, pc+24 (addr 0x0000ffff7ab11340)    ;; lazy deoptimization bailout 0
0xffff7ab1132c    76  add x17, x17, x16
0xffff7ab11330    80  br x17
0xffff7ab11334    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11338    88  d63f03e0       constant
0xffff7ab1133c    92  d503201f       constant
0xffff7ab11340    96  7a906000       constant
0xffff7ab11344   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab11328  runtime entry
0xffff7ab11334  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4513
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0xffff7ab113c0     0  mov x2, x0
0xffff7ab113c4     4  tbnz w2, #0, #+0xac (addr 0xffff7ab11470)
0xffff7ab113c8     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab113e0)
0xffff7ab113cc    12  asr x4, x1, #32
0xffff7ab113d0    16  asr x0, x2, #32
0xffff7ab113d4    20  eor w0, w0, w4
0xffff7ab113d8    24  lsl x0, x0, #32
0xffff7ab113dc    28  ret
0xffff7ab113e0    32  sub csp, jssp, #0x10 (16)
0xffff7ab113e4    36  stp fp, lr, [jssp, #-16]!
0xffff7ab113e8    40  movz fp, #0xa00000000
0xffff7ab113ec    44  sub csp, jssp, #0x8 (8)
0xffff7ab113f0    48  str fp, [jssp, #-8]!
0xffff7ab113f4    52  add fp, jssp, #0x8 (8)
0xffff7ab113f8    56  ldur x16, [x1, #-1]
0xffff7ab113fc    60  ldr x17, [x26, #120]
0xffff7ab11400    64  cmp x16, x17
0xffff7ab11404    68  b.ne #+0x30 (addr 0xffff7ab11434)
0xffff7ab11408    72  ldur d30, [x1, #7]
0xffff7ab1140c    76  fcvtzs x4, d30
0xffff7ab11410    80  cmp x4, #0x1 (1)
0xffff7ab11414    84  ccmn x4, #1, #nzcV, vc
0xffff7ab11418    88  b.vc #+0x18 (addr 0xffff7ab11430)
0xffff7ab1141c    92  sub csp, jssp, #0x8 (8)
0xffff7ab11420    96  str lr, [jssp, #-8]!
0xffff7ab11424   100  ldr x16, pc+68 (addr 0x0000ffff7ab11468)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab11428   104  blr x16
0xffff7ab1142c   108  ldr lr, [jssp], #8
0xffff7ab11430   112  b #+0x24 (addr 0xffff7ab11454)
0xffff7ab11434   116  ldp x4, x3, [x26, #64]
0xffff7ab11438   120  cmp x1, x4
0xffff7ab1143c   124  cset x4, eq
0xffff7ab11440   128  ccmp x1, x3, #nZcv, ne
0xffff7ab11444   132  b.eq #+0x10 (addr 0xffff7ab11454)
0xffff7ab11448   136  ldr x16, [x26, #40]
0xffff7ab1144c   140  cmp x1, x16
0xffff7ab11450   144  b.ne #+0x30 (addr 0xffff7ab11480)
0xffff7ab11454   148  ldr lr, [jssp, #16]
0xffff7ab11458   152  ldp xzr, fp, [jssp], #24
0xffff7ab1145c   156  b #-0x8c (addr 0xffff7ab113d0)
0xffff7ab11460   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab11464   164  d63f03e0       constant
0xffff7ab11468   168  7ab0fee0       constant
0xffff7ab1146c   172  0000ffff       constant
0xffff7ab11470   176  movz x16, #0x0
0xffff7ab11474   180  sub csp, jssp, #0x10 (16)
0xffff7ab11478   184  stp fp, lr, [jssp, #-16]!
0xffff7ab1147c   188  bl #+0xc (addr 0xffff7ab11488)
0xffff7ab11480   192  movz x16, #0x8
0xffff7ab11484   196  bl #+0x14 (addr 0xffff7ab11498)
0xffff7ab11488   200  movz x17, #0xa00000000
0xffff7ab1148c   204  sub csp, jssp, #0x10 (16)
0xffff7ab11490   208  stp x17, cp, [jssp, #-16]!
0xffff7ab11494   212  add fp, jssp, #0x10 (16)
0xffff7ab11498   216  ldr x17, pc+24 (addr 0x0000ffff7ab114b0)    ;; lazy deoptimization bailout 0
0xffff7ab1149c   220  add x17, x17, x16
0xffff7ab114a0   224  br x17
0xffff7ab114a4   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab114a8   232  d63f03e0       constant
0xffff7ab114ac   236  d503201f       constant
0xffff7ab114b0   240  7a906000       constant
0xffff7ab114b4   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab11424  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab11460  constant pool (size 16)
0xffff7ab11498  runtime entry
0xffff7ab114a4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4513
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Number*Int32->Int32)
compiler = crankshaft
Instructions (size = 256)
0xffff7ab113c0     0  mov x2, x0
0xffff7ab113c4     4  tbnz w2, #0, #+0xac (addr 0xffff7ab11470)
0xffff7ab113c8     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab113e0)
0xffff7ab113cc    12  asr x4, x1, #32
0xffff7ab113d0    16  asr x0, x2, #32
0xffff7ab113d4    20  eor w0, w0, w4
0xffff7ab113d8    24  lsl x0, x0, #32
0xffff7ab113dc    28  ret
0xffff7ab113e0    32  sub csp, jssp, #0x10 (16)
0xffff7ab113e4    36  stp fp, lr, [jssp, #-16]!
0xffff7ab113e8    40  movz fp, #0xa00000000
0xffff7ab113ec    44  sub csp, jssp, #0x8 (8)
0xffff7ab113f0    48  str fp, [jssp, #-8]!
0xffff7ab113f4    52  add fp, jssp, #0x8 (8)
0xffff7ab113f8    56  ldur x16, [x1, #-1]
0xffff7ab113fc    60  ldr x17, [x26, #120]
0xffff7ab11400    64  cmp x16, x17
0xffff7ab11404    68  b.ne #+0x30 (addr 0xffff7ab11434)
0xffff7ab11408    72  ldur d30, [x1, #7]
0xffff7ab1140c    76  fcvtzs x4, d30
0xffff7ab11410    80  cmp x4, #0x1 (1)
0xffff7ab11414    84  ccmn x4, #1, #nzcV, vc
0xffff7ab11418    88  b.vc #+0x18 (addr 0xffff7ab11430)
0xffff7ab1141c    92  sub csp, jssp, #0x8 (8)
0xffff7ab11420    96  str lr, [jssp, #-8]!
0xffff7ab11424   100  ldr x16, pc+68 (addr 0x0000ffff7ab11468)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab11428   104  blr x16
0xffff7ab1142c   108  ldr lr, [jssp], #8
0xffff7ab11430   112  b #+0x24 (addr 0xffff7ab11454)
0xffff7ab11434   116  ldp x4, x3, [x26, #64]
0xffff7ab11438   120  cmp x1, x4
0xffff7ab1143c   124  cset x4, eq
0xffff7ab11440   128  ccmp x1, x3, #nZcv, ne
0xffff7ab11444   132  b.eq #+0x10 (addr 0xffff7ab11454)
0xffff7ab11448   136  ldr x16, [x26, #40]
0xffff7ab1144c   140  cmp x1, x16
0xffff7ab11450   144  b.ne #+0x30 (addr 0xffff7ab11480)
0xffff7ab11454   148  ldr lr, [jssp, #16]
0xffff7ab11458   152  ldp xzr, fp, [jssp], #24
0xffff7ab1145c   156  b #-0x8c (addr 0xffff7ab113d0)
0xffff7ab11460   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab11464   164  d63f03e0       constant
0xffff7ab11468   168  7ab0fee0       constant
0xffff7ab1146c   172  0000ffff       constant
0xffff7ab11470   176  movz x16, #0x0
0xffff7ab11474   180  sub csp, jssp, #0x10 (16)
0xffff7ab11478   184  stp fp, lr, [jssp, #-16]!
0xffff7ab1147c   188  bl #+0xc (addr 0xffff7ab11488)
0xffff7ab11480   192  movz x16, #0x8
0xffff7ab11484   196  bl #+0x14 (addr 0xffff7ab11498)
0xffff7ab11488   200  movz x17, #0xa00000000
0xffff7ab1148c   204  sub csp, jssp, #0x10 (16)
0xffff7ab11490   208  stp x17, cp, [jssp, #-16]!
0xffff7ab11494   212  add fp, jssp, #0x10 (16)
0xffff7ab11498   216  ldr x17, pc+24 (addr 0x0000ffff7ab114b0)    ;; lazy deoptimization bailout 0
0xffff7ab1149c   220  add x17, x17, x16
0xffff7ab114a0   224  br x17
0xffff7ab114a4   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab114a8   232  d63f03e0       constant
0xffff7ab114ac   236  d503201f       constant
0xffff7ab114b0   240  7a906000       constant
0xffff7ab114b4   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab11424  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab11460  constant pool (size 16)
0xffff7ab11498  runtime entry
0xffff7ab114a4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2465
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0xffff7ab11520     0  mov x2, x0
0xffff7ab11524     4  tbnz w2, #0, #+0xac (addr 0xffff7ab115d0)
0xffff7ab11528     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab11540)
0xffff7ab1152c    12  asr x4, x1, #32
0xffff7ab11530    16  asr x0, x2, #32
0xffff7ab11534    20  eor w0, w0, w4
0xffff7ab11538    24  lsl x0, x0, #32
0xffff7ab1153c    28  ret
0xffff7ab11540    32  sub csp, jssp, #0x10 (16)
0xffff7ab11544    36  stp fp, lr, [jssp, #-16]!
0xffff7ab11548    40  movz fp, #0xa00000000
0xffff7ab1154c    44  sub csp, jssp, #0x8 (8)
0xffff7ab11550    48  str fp, [jssp, #-8]!
0xffff7ab11554    52  add fp, jssp, #0x8 (8)
0xffff7ab11558    56  ldur x16, [x1, #-1]
0xffff7ab1155c    60  ldr x17, [x26, #120]
0xffff7ab11560    64  cmp x16, x17
0xffff7ab11564    68  b.ne #+0x30 (addr 0xffff7ab11594)
0xffff7ab11568    72  ldur d30, [x1, #7]
0xffff7ab1156c    76  fcvtzs x4, d30
0xffff7ab11570    80  cmp x4, #0x1 (1)
0xffff7ab11574    84  ccmn x4, #1, #nzcV, vc
0xffff7ab11578    88  b.vc #+0x18 (addr 0xffff7ab11590)
0xffff7ab1157c    92  sub csp, jssp, #0x8 (8)
0xffff7ab11580    96  str lr, [jssp, #-8]!
0xffff7ab11584   100  ldr x16, pc+68 (addr 0x0000ffff7ab115c8)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab11588   104  blr x16
0xffff7ab1158c   108  ldr lr, [jssp], #8
0xffff7ab11590   112  b #+0x24 (addr 0xffff7ab115b4)
0xffff7ab11594   116  ldp x4, x3, [x26, #64]
0xffff7ab11598   120  cmp x1, x4
0xffff7ab1159c   124  cset x4, eq
0xffff7ab115a0   128  ccmp x1, x3, #nZcv, ne
0xffff7ab115a4   132  b.eq #+0x10 (addr 0xffff7ab115b4)
0xffff7ab115a8   136  ldr x16, [x26, #40]
0xffff7ab115ac   140  cmp x1, x16
0xffff7ab115b0   144  b.ne #+0x30 (addr 0xffff7ab115e0)
0xffff7ab115b4   148  ldr lr, [jssp, #16]
0xffff7ab115b8   152  ldp xzr, fp, [jssp], #24
0xffff7ab115bc   156  b #-0x8c (addr 0xffff7ab11530)
0xffff7ab115c0   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab115c4   164  d63f03e0       constant
0xffff7ab115c8   168  7ab0fee0       constant
0xffff7ab115cc   172  0000ffff       constant
0xffff7ab115d0   176  movz x16, #0x0
0xffff7ab115d4   180  sub csp, jssp, #0x10 (16)
0xffff7ab115d8   184  stp fp, lr, [jssp, #-16]!
0xffff7ab115dc   188  bl #+0xc (addr 0xffff7ab115e8)
0xffff7ab115e0   192  movz x16, #0x8
0xffff7ab115e4   196  bl #+0x14 (addr 0xffff7ab115f8)
0xffff7ab115e8   200  movz x17, #0xa00000000
0xffff7ab115ec   204  sub csp, jssp, #0x10 (16)
0xffff7ab115f0   208  stp x17, cp, [jssp, #-16]!
0xffff7ab115f4   212  add fp, jssp, #0x10 (16)
0xffff7ab115f8   216  ldr x17, pc+24 (addr 0x0000ffff7ab11610)    ;; lazy deoptimization bailout 0
0xffff7ab115fc   220  add x17, x17, x16
0xffff7ab11600   224  br x17
0xffff7ab11604   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11608   232  d63f03e0       constant
0xffff7ab1160c   236  d503201f       constant
0xffff7ab11610   240  7a906000       constant
0xffff7ab11614   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab11584  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab115c0  constant pool (size 16)
0xffff7ab115f8  runtime entry
0xffff7ab11604  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2465
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Number*Smi->Int32)
compiler = crankshaft
Instructions (size = 256)
0xffff7ab11520     0  mov x2, x0
0xffff7ab11524     4  tbnz w2, #0, #+0xac (addr 0xffff7ab115d0)
0xffff7ab11528     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab11540)
0xffff7ab1152c    12  asr x4, x1, #32
0xffff7ab11530    16  asr x0, x2, #32
0xffff7ab11534    20  eor w0, w0, w4
0xffff7ab11538    24  lsl x0, x0, #32
0xffff7ab1153c    28  ret
0xffff7ab11540    32  sub csp, jssp, #0x10 (16)
0xffff7ab11544    36  stp fp, lr, [jssp, #-16]!
0xffff7ab11548    40  movz fp, #0xa00000000
0xffff7ab1154c    44  sub csp, jssp, #0x8 (8)
0xffff7ab11550    48  str fp, [jssp, #-8]!
0xffff7ab11554    52  add fp, jssp, #0x8 (8)
0xffff7ab11558    56  ldur x16, [x1, #-1]
0xffff7ab1155c    60  ldr x17, [x26, #120]
0xffff7ab11560    64  cmp x16, x17
0xffff7ab11564    68  b.ne #+0x30 (addr 0xffff7ab11594)
0xffff7ab11568    72  ldur d30, [x1, #7]
0xffff7ab1156c    76  fcvtzs x4, d30
0xffff7ab11570    80  cmp x4, #0x1 (1)
0xffff7ab11574    84  ccmn x4, #1, #nzcV, vc
0xffff7ab11578    88  b.vc #+0x18 (addr 0xffff7ab11590)
0xffff7ab1157c    92  sub csp, jssp, #0x8 (8)
0xffff7ab11580    96  str lr, [jssp, #-8]!
0xffff7ab11584   100  ldr x16, pc+68 (addr 0x0000ffff7ab115c8)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab11588   104  blr x16
0xffff7ab1158c   108  ldr lr, [jssp], #8
0xffff7ab11590   112  b #+0x24 (addr 0xffff7ab115b4)
0xffff7ab11594   116  ldp x4, x3, [x26, #64]
0xffff7ab11598   120  cmp x1, x4
0xffff7ab1159c   124  cset x4, eq
0xffff7ab115a0   128  ccmp x1, x3, #nZcv, ne
0xffff7ab115a4   132  b.eq #+0x10 (addr 0xffff7ab115b4)
0xffff7ab115a8   136  ldr x16, [x26, #40]
0xffff7ab115ac   140  cmp x1, x16
0xffff7ab115b0   144  b.ne #+0x30 (addr 0xffff7ab115e0)
0xffff7ab115b4   148  ldr lr, [jssp, #16]
0xffff7ab115b8   152  ldp xzr, fp, [jssp], #24
0xffff7ab115bc   156  b #-0x8c (addr 0xffff7ab11530)
0xffff7ab115c0   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab115c4   164  d63f03e0       constant
0xffff7ab115c8   168  7ab0fee0       constant
0xffff7ab115cc   172  0000ffff       constant
0xffff7ab115d0   176  movz x16, #0x0
0xffff7ab115d4   180  sub csp, jssp, #0x10 (16)
0xffff7ab115d8   184  stp fp, lr, [jssp, #-16]!
0xffff7ab115dc   188  bl #+0xc (addr 0xffff7ab115e8)
0xffff7ab115e0   192  movz x16, #0x8
0xffff7ab115e4   196  bl #+0x14 (addr 0xffff7ab115f8)
0xffff7ab115e8   200  movz x17, #0xa00000000
0xffff7ab115ec   204  sub csp, jssp, #0x10 (16)
0xffff7ab115f0   208  stp x17, cp, [jssp, #-16]!
0xffff7ab115f4   212  add fp, jssp, #0x10 (16)
0xffff7ab115f8   216  ldr x17, pc+24 (addr 0x0000ffff7ab11610)    ;; lazy deoptimization bailout 0
0xffff7ab115fc   220  add x17, x17, x16
0xffff7ab11600   224  br x17
0xffff7ab11604   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11608   232  d63f03e0       constant
0xffff7ab1160c   236  d503201f       constant
0xffff7ab11610   240  7a906000       constant
0xffff7ab11614   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab11584  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab115c0  constant pool (size 16)
0xffff7ab115f8  runtime entry
0xffff7ab11604  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2449
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0xffff7ab11680     0  mov x2, x0
0xffff7ab11684     4  tbnz w2, #0, #+0xac (addr 0xffff7ab11730)
0xffff7ab11688     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab116a0)
0xffff7ab1168c    12  asr x4, x1, #32
0xffff7ab11690    16  asr x0, x2, #32
0xffff7ab11694    20  eor w0, w0, w4
0xffff7ab11698    24  lsl x0, x0, #32
0xffff7ab1169c    28  ret
0xffff7ab116a0    32  sub csp, jssp, #0x10 (16)
0xffff7ab116a4    36  stp fp, lr, [jssp, #-16]!
0xffff7ab116a8    40  movz fp, #0xa00000000
0xffff7ab116ac    44  sub csp, jssp, #0x8 (8)
0xffff7ab116b0    48  str fp, [jssp, #-8]!
0xffff7ab116b4    52  add fp, jssp, #0x8 (8)
0xffff7ab116b8    56  ldur x16, [x1, #-1]
0xffff7ab116bc    60  ldr x17, [x26, #120]
0xffff7ab116c0    64  cmp x16, x17
0xffff7ab116c4    68  b.ne #+0x30 (addr 0xffff7ab116f4)
0xffff7ab116c8    72  ldur d30, [x1, #7]
0xffff7ab116cc    76  fcvtzs x4, d30
0xffff7ab116d0    80  cmp x4, #0x1 (1)
0xffff7ab116d4    84  ccmn x4, #1, #nzcV, vc
0xffff7ab116d8    88  b.vc #+0x18 (addr 0xffff7ab116f0)
0xffff7ab116dc    92  sub csp, jssp, #0x8 (8)
0xffff7ab116e0    96  str lr, [jssp, #-8]!
0xffff7ab116e4   100  ldr x16, pc+68 (addr 0x0000ffff7ab11728)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab116e8   104  blr x16
0xffff7ab116ec   108  ldr lr, [jssp], #8
0xffff7ab116f0   112  b #+0x24 (addr 0xffff7ab11714)
0xffff7ab116f4   116  ldp x4, x3, [x26, #64]
0xffff7ab116f8   120  cmp x1, x4
0xffff7ab116fc   124  cset x4, eq
0xffff7ab11700   128  ccmp x1, x3, #nZcv, ne
0xffff7ab11704   132  b.eq #+0x10 (addr 0xffff7ab11714)
0xffff7ab11708   136  ldr x16, [x26, #40]
0xffff7ab1170c   140  cmp x1, x16
0xffff7ab11710   144  b.ne #+0x30 (addr 0xffff7ab11740)
0xffff7ab11714   148  ldr lr, [jssp, #16]
0xffff7ab11718   152  ldp xzr, fp, [jssp], #24
0xffff7ab1171c   156  b #-0x8c (addr 0xffff7ab11690)
0xffff7ab11720   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab11724   164  d63f03e0       constant
0xffff7ab11728   168  7ab0fee0       constant
0xffff7ab1172c   172  0000ffff       constant
0xffff7ab11730   176  movz x16, #0x0
0xffff7ab11734   180  sub csp, jssp, #0x10 (16)
0xffff7ab11738   184  stp fp, lr, [jssp, #-16]!
0xffff7ab1173c   188  bl #+0xc (addr 0xffff7ab11748)
0xffff7ab11740   192  movz x16, #0x8
0xffff7ab11744   196  bl #+0x14 (addr 0xffff7ab11758)
0xffff7ab11748   200  movz x17, #0xa00000000
0xffff7ab1174c   204  sub csp, jssp, #0x10 (16)
0xffff7ab11750   208  stp x17, cp, [jssp, #-16]!
0xffff7ab11754   212  add fp, jssp, #0x10 (16)
0xffff7ab11758   216  ldr x17, pc+24 (addr 0x0000ffff7ab11770)    ;; lazy deoptimization bailout 0
0xffff7ab1175c   220  add x17, x17, x16
0xffff7ab11760   224  br x17
0xffff7ab11764   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11768   232  d63f03e0       constant
0xffff7ab1176c   236  d503201f       constant
0xffff7ab11770   240  7a906000       constant
0xffff7ab11774   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab116e4  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab11720  constant pool (size 16)
0xffff7ab11758  runtime entry
0xffff7ab11764  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2449
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Number*Smi->Smi)
compiler = crankshaft
Instructions (size = 256)
0xffff7ab11680     0  mov x2, x0
0xffff7ab11684     4  tbnz w2, #0, #+0xac (addr 0xffff7ab11730)
0xffff7ab11688     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab116a0)
0xffff7ab1168c    12  asr x4, x1, #32
0xffff7ab11690    16  asr x0, x2, #32
0xffff7ab11694    20  eor w0, w0, w4
0xffff7ab11698    24  lsl x0, x0, #32
0xffff7ab1169c    28  ret
0xffff7ab116a0    32  sub csp, jssp, #0x10 (16)
0xffff7ab116a4    36  stp fp, lr, [jssp, #-16]!
0xffff7ab116a8    40  movz fp, #0xa00000000
0xffff7ab116ac    44  sub csp, jssp, #0x8 (8)
0xffff7ab116b0    48  str fp, [jssp, #-8]!
0xffff7ab116b4    52  add fp, jssp, #0x8 (8)
0xffff7ab116b8    56  ldur x16, [x1, #-1]
0xffff7ab116bc    60  ldr x17, [x26, #120]
0xffff7ab116c0    64  cmp x16, x17
0xffff7ab116c4    68  b.ne #+0x30 (addr 0xffff7ab116f4)
0xffff7ab116c8    72  ldur d30, [x1, #7]
0xffff7ab116cc    76  fcvtzs x4, d30
0xffff7ab116d0    80  cmp x4, #0x1 (1)
0xffff7ab116d4    84  ccmn x4, #1, #nzcV, vc
0xffff7ab116d8    88  b.vc #+0x18 (addr 0xffff7ab116f0)
0xffff7ab116dc    92  sub csp, jssp, #0x8 (8)
0xffff7ab116e0    96  str lr, [jssp, #-8]!
0xffff7ab116e4   100  ldr x16, pc+68 (addr 0x0000ffff7ab11728)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab116e8   104  blr x16
0xffff7ab116ec   108  ldr lr, [jssp], #8
0xffff7ab116f0   112  b #+0x24 (addr 0xffff7ab11714)
0xffff7ab116f4   116  ldp x4, x3, [x26, #64]
0xffff7ab116f8   120  cmp x1, x4
0xffff7ab116fc   124  cset x4, eq
0xffff7ab11700   128  ccmp x1, x3, #nZcv, ne
0xffff7ab11704   132  b.eq #+0x10 (addr 0xffff7ab11714)
0xffff7ab11708   136  ldr x16, [x26, #40]
0xffff7ab1170c   140  cmp x1, x16
0xffff7ab11710   144  b.ne #+0x30 (addr 0xffff7ab11740)
0xffff7ab11714   148  ldr lr, [jssp, #16]
0xffff7ab11718   152  ldp xzr, fp, [jssp], #24
0xffff7ab1171c   156  b #-0x8c (addr 0xffff7ab11690)
0xffff7ab11720   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab11724   164  d63f03e0       constant
0xffff7ab11728   168  7ab0fee0       constant
0xffff7ab1172c   172  0000ffff       constant
0xffff7ab11730   176  movz x16, #0x0
0xffff7ab11734   180  sub csp, jssp, #0x10 (16)
0xffff7ab11738   184  stp fp, lr, [jssp, #-16]!
0xffff7ab1173c   188  bl #+0xc (addr 0xffff7ab11748)
0xffff7ab11740   192  movz x16, #0x8
0xffff7ab11744   196  bl #+0x14 (addr 0xffff7ab11758)
0xffff7ab11748   200  movz x17, #0xa00000000
0xffff7ab1174c   204  sub csp, jssp, #0x10 (16)
0xffff7ab11750   208  stp x17, cp, [jssp, #-16]!
0xffff7ab11754   212  add fp, jssp, #0x10 (16)
0xffff7ab11758   216  ldr x17, pc+24 (addr 0x0000ffff7ab11770)    ;; lazy deoptimization bailout 0
0xffff7ab1175c   220  add x17, x17, x16
0xffff7ab11760   224  br x17
0xffff7ab11764   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11768   232  d63f03e0       constant
0xffff7ab1176c   236  d503201f       constant
0xffff7ab11770   240  7a906000       constant
0xffff7ab11774   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab116e4  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab11720  constant pool (size 16)
0xffff7ab11758  runtime entry
0xffff7ab11764  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4257
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab117e0     0  mov x2, x1
0xffff7ab117e4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab117f8)
0xffff7ab117e8     8  mov x3, x0
0xffff7ab117ec    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab11808)
0xffff7ab117f0    16  eor x0, x3, x2
0xffff7ab117f4    20  ret
0xffff7ab117f8    24  movz x16, #0x0
0xffff7ab117fc    28  sub csp, jssp, #0x10 (16)
0xffff7ab11800    32  stp fp, lr, [jssp, #-16]!
0xffff7ab11804    36  bl #+0x14 (addr 0xffff7ab11818)
0xffff7ab11808    40  movz x16, #0x8
0xffff7ab1180c    44  sub csp, jssp, #0x10 (16)
0xffff7ab11810    48  stp fp, lr, [jssp, #-16]!
0xffff7ab11814    52  bl #+0x4 (addr 0xffff7ab11818)
0xffff7ab11818    56  movz x17, #0xa00000000
0xffff7ab1181c    60  sub csp, jssp, #0x10 (16)
0xffff7ab11820    64  stp x17, cp, [jssp, #-16]!
0xffff7ab11824    68  add fp, jssp, #0x10 (16)
0xffff7ab11828    72  ldr x17, pc+24 (addr 0x0000ffff7ab11840)    ;; lazy deoptimization bailout 0
0xffff7ab1182c    76  add x17, x17, x16
0xffff7ab11830    80  br x17
0xffff7ab11834    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11838    88  d63f03e0       constant
0xffff7ab1183c    92  d503201f       constant
0xffff7ab11840    96  7a906000       constant
0xffff7ab11844   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab11828  runtime entry
0xffff7ab11834  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4257
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Smi*Int32->Int32)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab117e0     0  mov x2, x1
0xffff7ab117e4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab117f8)
0xffff7ab117e8     8  mov x3, x0
0xffff7ab117ec    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab11808)
0xffff7ab117f0    16  eor x0, x3, x2
0xffff7ab117f4    20  ret
0xffff7ab117f8    24  movz x16, #0x0
0xffff7ab117fc    28  sub csp, jssp, #0x10 (16)
0xffff7ab11800    32  stp fp, lr, [jssp, #-16]!
0xffff7ab11804    36  bl #+0x14 (addr 0xffff7ab11818)
0xffff7ab11808    40  movz x16, #0x8
0xffff7ab1180c    44  sub csp, jssp, #0x10 (16)
0xffff7ab11810    48  stp fp, lr, [jssp, #-16]!
0xffff7ab11814    52  bl #+0x4 (addr 0xffff7ab11818)
0xffff7ab11818    56  movz x17, #0xa00000000
0xffff7ab1181c    60  sub csp, jssp, #0x10 (16)
0xffff7ab11820    64  stp x17, cp, [jssp, #-16]!
0xffff7ab11824    68  add fp, jssp, #0x10 (16)
0xffff7ab11828    72  ldr x17, pc+24 (addr 0x0000ffff7ab11840)    ;; lazy deoptimization bailout 0
0xffff7ab1182c    76  add x17, x17, x16
0xffff7ab11830    80  br x17
0xffff7ab11834    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11838    88  d63f03e0       constant
0xffff7ab1183c    92  d503201f       constant
0xffff7ab11840    96  7a906000       constant
0xffff7ab11844   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab11828  runtime entry
0xffff7ab11834  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4241
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab118c0     0  mov x2, x1
0xffff7ab118c4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab118d8)
0xffff7ab118c8     8  mov x3, x0
0xffff7ab118cc    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab118e8)
0xffff7ab118d0    16  eor x0, x3, x2
0xffff7ab118d4    20  ret
0xffff7ab118d8    24  movz x16, #0x0
0xffff7ab118dc    28  sub csp, jssp, #0x10 (16)
0xffff7ab118e0    32  stp fp, lr, [jssp, #-16]!
0xffff7ab118e4    36  bl #+0x14 (addr 0xffff7ab118f8)
0xffff7ab118e8    40  movz x16, #0x8
0xffff7ab118ec    44  sub csp, jssp, #0x10 (16)
0xffff7ab118f0    48  stp fp, lr, [jssp, #-16]!
0xffff7ab118f4    52  bl #+0x4 (addr 0xffff7ab118f8)
0xffff7ab118f8    56  movz x17, #0xa00000000
0xffff7ab118fc    60  sub csp, jssp, #0x10 (16)
0xffff7ab11900    64  stp x17, cp, [jssp, #-16]!
0xffff7ab11904    68  add fp, jssp, #0x10 (16)
0xffff7ab11908    72  ldr x17, pc+24 (addr 0x0000ffff7ab11920)    ;; lazy deoptimization bailout 0
0xffff7ab1190c    76  add x17, x17, x16
0xffff7ab11910    80  br x17
0xffff7ab11914    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11918    88  d63f03e0       constant
0xffff7ab1191c    92  d503201f       constant
0xffff7ab11920    96  7a906000       constant
0xffff7ab11924   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab11908  runtime entry
0xffff7ab11914  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4241
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Smi*Int32->Smi)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab118c0     0  mov x2, x1
0xffff7ab118c4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab118d8)
0xffff7ab118c8     8  mov x3, x0
0xffff7ab118cc    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab118e8)
0xffff7ab118d0    16  eor x0, x3, x2
0xffff7ab118d4    20  ret
0xffff7ab118d8    24  movz x16, #0x0
0xffff7ab118dc    28  sub csp, jssp, #0x10 (16)
0xffff7ab118e0    32  stp fp, lr, [jssp, #-16]!
0xffff7ab118e4    36  bl #+0x14 (addr 0xffff7ab118f8)
0xffff7ab118e8    40  movz x16, #0x8
0xffff7ab118ec    44  sub csp, jssp, #0x10 (16)
0xffff7ab118f0    48  stp fp, lr, [jssp, #-16]!
0xffff7ab118f4    52  bl #+0x4 (addr 0xffff7ab118f8)
0xffff7ab118f8    56  movz x17, #0xa00000000
0xffff7ab118fc    60  sub csp, jssp, #0x10 (16)
0xffff7ab11900    64  stp x17, cp, [jssp, #-16]!
0xffff7ab11904    68  add fp, jssp, #0x10 (16)
0xffff7ab11908    72  ldr x17, pc+24 (addr 0x0000ffff7ab11920)    ;; lazy deoptimization bailout 0
0xffff7ab1190c    76  add x17, x17, x16
0xffff7ab11910    80  br x17
0xffff7ab11914    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11918    88  d63f03e0       constant
0xffff7ab1191c    92  d503201f       constant
0xffff7ab11920    96  7a906000       constant
0xffff7ab11924   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab11908  runtime entry
0xffff7ab11914  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2193
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0xffff7ab119a0     0  mov x2, x1
0xffff7ab119a4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab119b8)
0xffff7ab119a8     8  mov x3, x0
0xffff7ab119ac    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab119c8)
0xffff7ab119b0    16  eor x0, x3, x2
0xffff7ab119b4    20  ret
0xffff7ab119b8    24  movz x16, #0x0
0xffff7ab119bc    28  sub csp, jssp, #0x10 (16)
0xffff7ab119c0    32  stp fp, lr, [jssp, #-16]!
0xffff7ab119c4    36  bl #+0x14 (addr 0xffff7ab119d8)
0xffff7ab119c8    40  movz x16, #0x8
0xffff7ab119cc    44  sub csp, jssp, #0x10 (16)
0xffff7ab119d0    48  stp fp, lr, [jssp, #-16]!
0xffff7ab119d4    52  bl #+0x4 (addr 0xffff7ab119d8)
0xffff7ab119d8    56  movz x17, #0xa00000000
0xffff7ab119dc    60  sub csp, jssp, #0x10 (16)
0xffff7ab119e0    64  stp x17, cp, [jssp, #-16]!
0xffff7ab119e4    68  add fp, jssp, #0x10 (16)
0xffff7ab119e8    72  ldr x17, pc+24 (addr 0x0000ffff7ab11a00)    ;; lazy deoptimization bailout 0
0xffff7ab119ec    76  add x17, x17, x16
0xffff7ab119f0    80  br x17
0xffff7ab119f4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab119f8    88  d63f03e0       constant
0xffff7ab119fc    92  d503201f       constant
0xffff7ab11a00    96  7a906000       constant
0xffff7ab11a04   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab119e8  runtime entry
0xffff7ab119f4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2193
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 112)
0xffff7ab119a0     0  mov x2, x1
0xffff7ab119a4     4  tbnz w2, #0, #+0x14 (addr 0xffff7ab119b8)
0xffff7ab119a8     8  mov x3, x0
0xffff7ab119ac    12  tbnz w3, #0, #+0x1c (addr 0xffff7ab119c8)
0xffff7ab119b0    16  eor x0, x3, x2
0xffff7ab119b4    20  ret
0xffff7ab119b8    24  movz x16, #0x0
0xffff7ab119bc    28  sub csp, jssp, #0x10 (16)
0xffff7ab119c0    32  stp fp, lr, [jssp, #-16]!
0xffff7ab119c4    36  bl #+0x14 (addr 0xffff7ab119d8)
0xffff7ab119c8    40  movz x16, #0x8
0xffff7ab119cc    44  sub csp, jssp, #0x10 (16)
0xffff7ab119d0    48  stp fp, lr, [jssp, #-16]!
0xffff7ab119d4    52  bl #+0x4 (addr 0xffff7ab119d8)
0xffff7ab119d8    56  movz x17, #0xa00000000
0xffff7ab119dc    60  sub csp, jssp, #0x10 (16)
0xffff7ab119e0    64  stp x17, cp, [jssp, #-16]!
0xffff7ab119e4    68  add fp, jssp, #0x10 (16)
0xffff7ab119e8    72  ldr x17, pc+24 (addr 0x0000ffff7ab11a00)    ;; lazy deoptimization bailout 0
0xffff7ab119ec    76  add x17, x17, x16
0xffff7ab119f0    80  br x17
0xffff7ab119f4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab119f8    88  d63f03e0       constant
0xffff7ab119fc    92  d503201f       constant
0xffff7ab11a00    96  7a906000       constant
0xffff7ab11a04   100  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab119e8  runtime entry
0xffff7ab119f4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4394
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 176)
0xffff7ab11a80     0  mov x2, x1
0xffff7ab11a84     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab11ac8)
0xffff7ab11a88     8  mov x3, x0
0xffff7ab11a8c    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab11ad8)
0xffff7ab11a90    16  asr x2, x2, #32
0xffff7ab11a94    20  asr x3, x3, #32
0xffff7ab11a98    24  sdiv w5, w2, w3
0xffff7ab11a9c    28  cbz w3, #+0x4c (addr 0xffff7ab11ae8)
0xffff7ab11aa0    32  cmp w3, #0x0 (0)
0xffff7ab11aa4    36  ccmp w2, #0, #nzcv, mi
0xffff7ab11aa8    40  b.eq #+0x40 (addr 0xffff7ab11ae8)
0xffff7ab11aac    44  cmp w2, #0x1 (1)
0xffff7ab11ab0    48  ccmn w3, #1, #nzcv, vs
0xffff7ab11ab4    52  b.eq #+0x34 (addr 0xffff7ab11ae8)
0xffff7ab11ab8    56  msub w4, w5, w3, w2
0xffff7ab11abc    60  cbnz w4, #+0x2c (addr 0xffff7ab11ae8)
0xffff7ab11ac0    64  lsl x0, x5, #32
0xffff7ab11ac4    68  ret
0xffff7ab11ac8    72  movz x16, #0x0
0xffff7ab11acc    76  sub csp, jssp, #0x10 (16)
0xffff7ab11ad0    80  stp fp, lr, [jssp, #-16]!
0xffff7ab11ad4    84  bl #+0x24 (addr 0xffff7ab11af8)
0xffff7ab11ad8    88  movz x16, #0x8
0xffff7ab11adc    92  sub csp, jssp, #0x10 (16)
0xffff7ab11ae0    96  stp fp, lr, [jssp, #-16]!
0xffff7ab11ae4   100  bl #+0x14 (addr 0xffff7ab11af8)
0xffff7ab11ae8   104  movz x16, #0x10
0xffff7ab11aec   108  sub csp, jssp, #0x10 (16)
0xffff7ab11af0   112  stp fp, lr, [jssp, #-16]!
0xffff7ab11af4   116  bl #+0x4 (addr 0xffff7ab11af8)
0xffff7ab11af8   120  movz x17, #0xa00000000
0xffff7ab11afc   124  sub csp, jssp, #0x10 (16)
0xffff7ab11b00   128  stp x17, cp, [jssp, #-16]!
0xffff7ab11b04   132  add fp, jssp, #0x10 (16)
0xffff7ab11b08   136  ldr x17, pc+24 (addr 0x0000ffff7ab11b20)    ;; lazy deoptimization bailout 0
0xffff7ab11b0c   140  add x17, x17, x16
0xffff7ab11b10   144  br x17
0xffff7ab11b14   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11b18   152  d63f03e0       constant
0xffff7ab11b1c   156  d503201f       constant
0xffff7ab11b20   160  7a906000       constant
0xffff7ab11b24   164  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab11b08  runtime entry
0xffff7ab11b14  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4394
type = NORMAL
name = BinaryOpICStub(DIV:Int32*Int32->Int32)
compiler = crankshaft
Instructions (size = 176)
0xffff7ab11a80     0  mov x2, x1
0xffff7ab11a84     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab11ac8)
0xffff7ab11a88     8  mov x3, x0
0xffff7ab11a8c    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab11ad8)
0xffff7ab11a90    16  asr x2, x2, #32
0xffff7ab11a94    20  asr x3, x3, #32
0xffff7ab11a98    24  sdiv w5, w2, w3
0xffff7ab11a9c    28  cbz w3, #+0x4c (addr 0xffff7ab11ae8)
0xffff7ab11aa0    32  cmp w3, #0x0 (0)
0xffff7ab11aa4    36  ccmp w2, #0, #nzcv, mi
0xffff7ab11aa8    40  b.eq #+0x40 (addr 0xffff7ab11ae8)
0xffff7ab11aac    44  cmp w2, #0x1 (1)
0xffff7ab11ab0    48  ccmn w3, #1, #nzcv, vs
0xffff7ab11ab4    52  b.eq #+0x34 (addr 0xffff7ab11ae8)
0xffff7ab11ab8    56  msub w4, w5, w3, w2
0xffff7ab11abc    60  cbnz w4, #+0x2c (addr 0xffff7ab11ae8)
0xffff7ab11ac0    64  lsl x0, x5, #32
0xffff7ab11ac4    68  ret
0xffff7ab11ac8    72  movz x16, #0x0
0xffff7ab11acc    76  sub csp, jssp, #0x10 (16)
0xffff7ab11ad0    80  stp fp, lr, [jssp, #-16]!
0xffff7ab11ad4    84  bl #+0x24 (addr 0xffff7ab11af8)
0xffff7ab11ad8    88  movz x16, #0x8
0xffff7ab11adc    92  sub csp, jssp, #0x10 (16)
0xffff7ab11ae0    96  stp fp, lr, [jssp, #-16]!
0xffff7ab11ae4   100  bl #+0x14 (addr 0xffff7ab11af8)
0xffff7ab11ae8   104  movz x16, #0x10
0xffff7ab11aec   108  sub csp, jssp, #0x10 (16)
0xffff7ab11af0   112  stp fp, lr, [jssp, #-16]!
0xffff7ab11af4   116  bl #+0x4 (addr 0xffff7ab11af8)
0xffff7ab11af8   120  movz x17, #0xa00000000
0xffff7ab11afc   124  sub csp, jssp, #0x10 (16)
0xffff7ab11b00   128  stp x17, cp, [jssp, #-16]!
0xffff7ab11b04   132  add fp, jssp, #0x10 (16)
0xffff7ab11b08   136  ldr x17, pc+24 (addr 0x0000ffff7ab11b20)    ;; lazy deoptimization bailout 0
0xffff7ab11b0c   140  add x17, x17, x16
0xffff7ab11b10   144  br x17
0xffff7ab11b14   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11b18   152  d63f03e0       constant
0xffff7ab11b1c   156  d503201f       constant
0xffff7ab11b20   160  7a906000       constant
0xffff7ab11b24   164  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab11b08  runtime entry
0xffff7ab11b14  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4410
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0xffff7ab11ba0     0  mov x2, x1
0xffff7ab11ba4     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab11c68)
0xffff7ab11ba8     8  mov x3, x0
0xffff7ab11bac    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab11c78)
0xffff7ab11bb0    16  scvtf d0, x2, #32
0xffff7ab11bb4    20  scvtf d1, x3, #32
0xffff7ab11bb8    24  fdiv d0, d0, d1
0xffff7ab11bbc    28  movz x1, #0xe2c0
0xffff7ab11bc0    32  movk x1, #0x9ab, lsl #16
0xffff7ab11bc4    36  ldp x2, x0, [x1]
0xffff7ab11bc8    40  adds x16, x2, #0x10 (16)
0xffff7ab11bcc    44  ccmp x16, x0, #nzCv, lo
0xffff7ab11bd0    48  b.hi #+0x20 (addr 0xffff7ab11bf0)
0xffff7ab11bd4    52  str x16, [x1]
0xffff7ab11bd8    56  ldr x1, [x26, #120]
0xffff7ab11bdc    60  str x1, [x2]
0xffff7ab11be0    64  orr x2, x2, #0x1
0xffff7ab11be4    68  stur d0, [x2, #7]
0xffff7ab11be8    72  mov x0, x2
0xffff7ab11bec    76  ret
0xffff7ab11bf0    80  sub csp, jssp, #0x10 (16)
0xffff7ab11bf4    84  stp fp, lr, [jssp, #-16]!
0xffff7ab11bf8    88  movz fp, #0xa00000000
0xffff7ab11bfc    92  sub csp, jssp, #0x8 (8)
0xffff7ab11c00    96  str fp, [jssp, #-8]!
0xffff7ab11c04   100  add fp, jssp, #0x8 (8)
0xffff7ab11c08   104  movz x2, #0x0
0xffff7ab11c0c   108  mov x16, lr
0xffff7ab11c10   112  ldr x17, pc+64 (addr 0x0000ffff7ab11c50)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab11c14   116  blr x17
0xffff7ab11c18   120  ldur cp, [fp, #-8]
0xffff7ab11c1c   124  movz x0, #0x0
0xffff7ab11c20   128  movz x1, #0x4b48
0xffff7ab11c24   132  movk x1, #0xe4, lsl #16
0xffff7ab11c28   136  ldr x16, pc+48 (addr 0x0000ffff7ab11c58)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab11c2c   140  blr x16
0xffff7ab11c30   144  str x0, [jssp, #16]
0xffff7ab11c34   148  ldr x16, pc+44 (addr 0x0000ffff7ab11c60)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab11c38   152  blr x16
0xffff7ab11c3c   156  ldr lr, [jssp, #16]
0xffff7ab11c40   160  ldp xzr, fp, [jssp], #24
0xffff7ab11c44   164  b #-0x60 (addr 0xffff7ab11be4)
0xffff7ab11c48   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab11c4c   172  d63f03e0       constant
0xffff7ab11c50   176  7ab06820       constant
0xffff7ab11c54   180  0000ffff       constant
0xffff7ab11c58   184  7ab06260       constant
0xffff7ab11c5c   188  0000ffff       constant
0xffff7ab11c60   192  7ab068e0       constant
0xffff7ab11c64   196  0000ffff       constant
0xffff7ab11c68   200  movz x16, #0x0
0xffff7ab11c6c   204  sub csp, jssp, #0x10 (16)
0xffff7ab11c70   208  stp fp, lr, [jssp, #-16]!
0xffff7ab11c74   212  bl #+0x14 (addr 0xffff7ab11c88)
0xffff7ab11c78   216  movz x16, #0x8
0xffff7ab11c7c   220  sub csp, jssp, #0x10 (16)
0xffff7ab11c80   224  stp fp, lr, [jssp, #-16]!
0xffff7ab11c84   228  bl #+0x4 (addr 0xffff7ab11c88)
0xffff7ab11c88   232  movz x17, #0xa00000000
0xffff7ab11c8c   236  sub csp, jssp, #0x10 (16)
0xffff7ab11c90   240  stp x17, cp, [jssp, #-16]!
0xffff7ab11c94   244  add fp, jssp, #0x10 (16)
0xffff7ab11c98   248  ldr x17, pc+24 (addr 0x0000ffff7ab11cb0)    ;; lazy deoptimization bailout 0
0xffff7ab11c9c   252  add x17, x17, x16
0xffff7ab11ca0   256  br x17
0xffff7ab11ca4   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11ca8   264  d63f03e0       constant
0xffff7ab11cac   268  d503201f       constant
0xffff7ab11cb0   272  7a906000       constant
0xffff7ab11cb4   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab11c30   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab11c10  code target (STUB)  (0xffff7ab06820)
0xffff7ab11c28  code target (STUB)  (0xffff7ab06260)
0xffff7ab11c34  code target (STUB)  (0xffff7ab068e0)
0xffff7ab11c48  constant pool (size 32)
0xffff7ab11c98  runtime entry
0xffff7ab11ca4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4410
type = NORMAL
name = BinaryOpICStub(DIV:Int32*Int32->Number)
compiler = crankshaft
Instructions (size = 301)
0xffff7ab11ba0     0  mov x2, x1
0xffff7ab11ba4     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab11c68)
0xffff7ab11ba8     8  mov x3, x0
0xffff7ab11bac    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab11c78)
0xffff7ab11bb0    16  scvtf d0, x2, #32
0xffff7ab11bb4    20  scvtf d1, x3, #32
0xffff7ab11bb8    24  fdiv d0, d0, d1
0xffff7ab11bbc    28  movz x1, #0xe2c0
0xffff7ab11bc0    32  movk x1, #0x9ab, lsl #16
0xffff7ab11bc4    36  ldp x2, x0, [x1]
0xffff7ab11bc8    40  adds x16, x2, #0x10 (16)
0xffff7ab11bcc    44  ccmp x16, x0, #nzCv, lo
0xffff7ab11bd0    48  b.hi #+0x20 (addr 0xffff7ab11bf0)
0xffff7ab11bd4    52  str x16, [x1]
0xffff7ab11bd8    56  ldr x1, [x26, #120]
0xffff7ab11bdc    60  str x1, [x2]
0xffff7ab11be0    64  orr x2, x2, #0x1
0xffff7ab11be4    68  stur d0, [x2, #7]
0xffff7ab11be8    72  mov x0, x2
0xffff7ab11bec    76  ret
0xffff7ab11bf0    80  sub csp, jssp, #0x10 (16)
0xffff7ab11bf4    84  stp fp, lr, [jssp, #-16]!
0xffff7ab11bf8    88  movz fp, #0xa00000000
0xffff7ab11bfc    92  sub csp, jssp, #0x8 (8)
0xffff7ab11c00    96  str fp, [jssp, #-8]!
0xffff7ab11c04   100  add fp, jssp, #0x8 (8)
0xffff7ab11c08   104  movz x2, #0x0
0xffff7ab11c0c   108  mov x16, lr
0xffff7ab11c10   112  ldr x17, pc+64 (addr 0x0000ffff7ab11c50)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab11c14   116  blr x17
0xffff7ab11c18   120  ldur cp, [fp, #-8]
0xffff7ab11c1c   124  movz x0, #0x0
0xffff7ab11c20   128  movz x1, #0x4b48
0xffff7ab11c24   132  movk x1, #0xe4, lsl #16
0xffff7ab11c28   136  ldr x16, pc+48 (addr 0x0000ffff7ab11c58)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab11c2c   140  blr x16
0xffff7ab11c30   144  str x0, [jssp, #16]
0xffff7ab11c34   148  ldr x16, pc+44 (addr 0x0000ffff7ab11c60)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab11c38   152  blr x16
0xffff7ab11c3c   156  ldr lr, [jssp, #16]
0xffff7ab11c40   160  ldp xzr, fp, [jssp], #24
0xffff7ab11c44   164  b #-0x60 (addr 0xffff7ab11be4)
0xffff7ab11c48   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab11c4c   172  d63f03e0       constant
0xffff7ab11c50   176  7ab06820       constant
0xffff7ab11c54   180  0000ffff       constant
0xffff7ab11c58   184  7ab06260       constant
0xffff7ab11c5c   188  0000ffff       constant
0xffff7ab11c60   192  7ab068e0       constant
0xffff7ab11c64   196  0000ffff       constant
0xffff7ab11c68   200  movz x16, #0x0
0xffff7ab11c6c   204  sub csp, jssp, #0x10 (16)
0xffff7ab11c70   208  stp fp, lr, [jssp, #-16]!
0xffff7ab11c74   212  bl #+0x14 (addr 0xffff7ab11c88)
0xffff7ab11c78   216  movz x16, #0x8
0xffff7ab11c7c   220  sub csp, jssp, #0x10 (16)
0xffff7ab11c80   224  stp fp, lr, [jssp, #-16]!
0xffff7ab11c84   228  bl #+0x4 (addr 0xffff7ab11c88)
0xffff7ab11c88   232  movz x17, #0xa00000000
0xffff7ab11c8c   236  sub csp, jssp, #0x10 (16)
0xffff7ab11c90   240  stp x17, cp, [jssp, #-16]!
0xffff7ab11c94   244  add fp, jssp, #0x10 (16)
0xffff7ab11c98   248  ldr x17, pc+24 (addr 0x0000ffff7ab11cb0)    ;; lazy deoptimization bailout 0
0xffff7ab11c9c   252  add x17, x17, x16
0xffff7ab11ca0   256  br x17
0xffff7ab11ca4   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11ca8   264  d63f03e0       constant
0xffff7ab11cac   268  d503201f       constant
0xffff7ab11cb0   272  7a906000       constant
0xffff7ab11cb4   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab11c30   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab11c10  code target (STUB)  (0xffff7ab06820)
0xffff7ab11c28  code target (STUB)  (0xffff7ab06260)
0xffff7ab11c34  code target (STUB)  (0xffff7ab068e0)
0xffff7ab11c48  constant pool (size 32)
0xffff7ab11c98  runtime entry
0xffff7ab11ca4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6458
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0xffff7ab11d40     0  mov x2, x1
0xffff7ab11d44     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab11e38)
0xffff7ab11d48     8  tbz w0, #0, #+0x34 (addr 0xffff7ab11d7c)
0xffff7ab11d4c    12  ldur x16, [x0, #-1]
0xffff7ab11d50    16  ldr x17, [x26, #120]
0xffff7ab11d54    20  cmp x16, x17
0xffff7ab11d58    24  b.ne #+0xc (addr 0xffff7ab11d64)
0xffff7ab11d5c    28  ldur d0, [x0, #7]
0xffff7ab11d60    32  b #+0x20 (addr 0xffff7ab11d80)
0xffff7ab11d64    36  ldr x16, [x26, #40]
0xffff7ab11d68    40  cmp x0, x16
0xffff7ab11d6c    44  b.ne #+0xdc (addr 0xffff7ab11e48)
0xffff7ab11d70    48  ldr x3, [x26, #928]
0xffff7ab11d74    52  ldur d0, [x3, #7]
0xffff7ab11d78    56  b #+0x8 (addr 0xffff7ab11d80)
0xffff7ab11d7c    60  scvtf d0, x0, #32
0xffff7ab11d80    64  scvtf d1, x2, #32
0xffff7ab11d84    68  fdiv d0, d1, d0
0xffff7ab11d88    72  movz x1, #0xe2c0
0xffff7ab11d8c    76  movk x1, #0x9ab, lsl #16
0xffff7ab11d90    80  ldp x2, x0, [x1]
0xffff7ab11d94    84  adds x16, x2, #0x10 (16)
0xffff7ab11d98    88  ccmp x16, x0, #nzCv, lo
0xffff7ab11d9c    92  b.hi #+0x20 (addr 0xffff7ab11dbc)
0xffff7ab11da0    96  str x16, [x1]
0xffff7ab11da4   100  ldr x1, [x26, #120]
0xffff7ab11da8   104  str x1, [x2]
0xffff7ab11dac   108  orr x2, x2, #0x1
0xffff7ab11db0   112  stur d0, [x2, #7]
0xffff7ab11db4   116  mov x0, x2
0xffff7ab11db8   120  ret
0xffff7ab11dbc   124  sub csp, jssp, #0x10 (16)
0xffff7ab11dc0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab11dc4   132  movz fp, #0xa00000000
0xffff7ab11dc8   136  sub csp, jssp, #0x8 (8)
0xffff7ab11dcc   140  str fp, [jssp, #-8]!
0xffff7ab11dd0   144  add fp, jssp, #0x8 (8)
0xffff7ab11dd4   148  movz x2, #0x0
0xffff7ab11dd8   152  mov x16, lr
0xffff7ab11ddc   156  ldr x17, pc+68 (addr 0x0000ffff7ab11e20)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab11de0   160  blr x17
0xffff7ab11de4   164  ldur cp, [fp, #-8]
0xffff7ab11de8   168  movz x0, #0x0
0xffff7ab11dec   172  movz x1, #0x4b48
0xffff7ab11df0   176  movk x1, #0xe4, lsl #16
0xffff7ab11df4   180  ldr x16, pc+52 (addr 0x0000ffff7ab11e28)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab11df8   184  blr x16
0xffff7ab11dfc   188  str x0, [jssp, #16]
0xffff7ab11e00   192  ldr x16, pc+48 (addr 0x0000ffff7ab11e30)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab11e04   196  blr x16
0xffff7ab11e08   200  ldr lr, [jssp, #16]
0xffff7ab11e0c   204  ldp xzr, fp, [jssp], #24
0xffff7ab11e10   208  b #-0x60 (addr 0xffff7ab11db0)
0xffff7ab11e14   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab11e18   216  d63f03e0       constant
0xffff7ab11e1c   220  d503201f       constant
0xffff7ab11e20   224  7ab06820       constant
0xffff7ab11e24   228  0000ffff       constant
0xffff7ab11e28   232  7ab06260       constant
0xffff7ab11e2c   236  0000ffff       constant
0xffff7ab11e30   240  7ab068e0       constant
0xffff7ab11e34   244  0000ffff       constant
0xffff7ab11e38   248  movz x16, #0x0
0xffff7ab11e3c   252  sub csp, jssp, #0x10 (16)
0xffff7ab11e40   256  stp fp, lr, [jssp, #-16]!
0xffff7ab11e44   260  bl #+0x14 (addr 0xffff7ab11e58)
0xffff7ab11e48   264  movz x16, #0x8
0xffff7ab11e4c   268  sub csp, jssp, #0x10 (16)
0xffff7ab11e50   272  stp fp, lr, [jssp, #-16]!
0xffff7ab11e54   276  bl #+0x4 (addr 0xffff7ab11e58)
0xffff7ab11e58   280  movz x17, #0xa00000000
0xffff7ab11e5c   284  sub csp, jssp, #0x10 (16)
0xffff7ab11e60   288  stp x17, cp, [jssp, #-16]!
0xffff7ab11e64   292  add fp, jssp, #0x10 (16)
0xffff7ab11e68   296  ldr x17, pc+24 (addr 0x0000ffff7ab11e80)    ;; lazy deoptimization bailout 0
0xffff7ab11e6c   300  add x17, x17, x16
0xffff7ab11e70   304  br x17
0xffff7ab11e74   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11e78   312  d63f03e0       constant
0xffff7ab11e7c   316  d503201f       constant
0xffff7ab11e80   320  7a906000       constant
0xffff7ab11e84   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab11dfc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab11ddc  code target (STUB)  (0xffff7ab06820)
0xffff7ab11df4  code target (STUB)  (0xffff7ab06260)
0xffff7ab11e00  code target (STUB)  (0xffff7ab068e0)
0xffff7ab11e14  constant pool (size 36)
0xffff7ab11e68  runtime entry
0xffff7ab11e74  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6458
type = NORMAL
name = BinaryOpICStub(DIV:Int32*Number->Number)
compiler = crankshaft
Instructions (size = 349)
0xffff7ab11d40     0  mov x2, x1
0xffff7ab11d44     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab11e38)
0xffff7ab11d48     8  tbz w0, #0, #+0x34 (addr 0xffff7ab11d7c)
0xffff7ab11d4c    12  ldur x16, [x0, #-1]
0xffff7ab11d50    16  ldr x17, [x26, #120]
0xffff7ab11d54    20  cmp x16, x17
0xffff7ab11d58    24  b.ne #+0xc (addr 0xffff7ab11d64)
0xffff7ab11d5c    28  ldur d0, [x0, #7]
0xffff7ab11d60    32  b #+0x20 (addr 0xffff7ab11d80)
0xffff7ab11d64    36  ldr x16, [x26, #40]
0xffff7ab11d68    40  cmp x0, x16
0xffff7ab11d6c    44  b.ne #+0xdc (addr 0xffff7ab11e48)
0xffff7ab11d70    48  ldr x3, [x26, #928]
0xffff7ab11d74    52  ldur d0, [x3, #7]
0xffff7ab11d78    56  b #+0x8 (addr 0xffff7ab11d80)
0xffff7ab11d7c    60  scvtf d0, x0, #32
0xffff7ab11d80    64  scvtf d1, x2, #32
0xffff7ab11d84    68  fdiv d0, d1, d0
0xffff7ab11d88    72  movz x1, #0xe2c0
0xffff7ab11d8c    76  movk x1, #0x9ab, lsl #16
0xffff7ab11d90    80  ldp x2, x0, [x1]
0xffff7ab11d94    84  adds x16, x2, #0x10 (16)
0xffff7ab11d98    88  ccmp x16, x0, #nzCv, lo
0xffff7ab11d9c    92  b.hi #+0x20 (addr 0xffff7ab11dbc)
0xffff7ab11da0    96  str x16, [x1]
0xffff7ab11da4   100  ldr x1, [x26, #120]
0xffff7ab11da8   104  str x1, [x2]
0xffff7ab11dac   108  orr x2, x2, #0x1
0xffff7ab11db0   112  stur d0, [x2, #7]
0xffff7ab11db4   116  mov x0, x2
0xffff7ab11db8   120  ret
0xffff7ab11dbc   124  sub csp, jssp, #0x10 (16)
0xffff7ab11dc0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab11dc4   132  movz fp, #0xa00000000
0xffff7ab11dc8   136  sub csp, jssp, #0x8 (8)
0xffff7ab11dcc   140  str fp, [jssp, #-8]!
0xffff7ab11dd0   144  add fp, jssp, #0x8 (8)
0xffff7ab11dd4   148  movz x2, #0x0
0xffff7ab11dd8   152  mov x16, lr
0xffff7ab11ddc   156  ldr x17, pc+68 (addr 0x0000ffff7ab11e20)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab11de0   160  blr x17
0xffff7ab11de4   164  ldur cp, [fp, #-8]
0xffff7ab11de8   168  movz x0, #0x0
0xffff7ab11dec   172  movz x1, #0x4b48
0xffff7ab11df0   176  movk x1, #0xe4, lsl #16
0xffff7ab11df4   180  ldr x16, pc+52 (addr 0x0000ffff7ab11e28)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab11df8   184  blr x16
0xffff7ab11dfc   188  str x0, [jssp, #16]
0xffff7ab11e00   192  ldr x16, pc+48 (addr 0x0000ffff7ab11e30)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab11e04   196  blr x16
0xffff7ab11e08   200  ldr lr, [jssp, #16]
0xffff7ab11e0c   204  ldp xzr, fp, [jssp], #24
0xffff7ab11e10   208  b #-0x60 (addr 0xffff7ab11db0)
0xffff7ab11e14   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab11e18   216  d63f03e0       constant
0xffff7ab11e1c   220  d503201f       constant
0xffff7ab11e20   224  7ab06820       constant
0xffff7ab11e24   228  0000ffff       constant
0xffff7ab11e28   232  7ab06260       constant
0xffff7ab11e2c   236  0000ffff       constant
0xffff7ab11e30   240  7ab068e0       constant
0xffff7ab11e34   244  0000ffff       constant
0xffff7ab11e38   248  movz x16, #0x0
0xffff7ab11e3c   252  sub csp, jssp, #0x10 (16)
0xffff7ab11e40   256  stp fp, lr, [jssp, #-16]!
0xffff7ab11e44   260  bl #+0x14 (addr 0xffff7ab11e58)
0xffff7ab11e48   264  movz x16, #0x8
0xffff7ab11e4c   268  sub csp, jssp, #0x10 (16)
0xffff7ab11e50   272  stp fp, lr, [jssp, #-16]!
0xffff7ab11e54   276  bl #+0x4 (addr 0xffff7ab11e58)
0xffff7ab11e58   280  movz x17, #0xa00000000
0xffff7ab11e5c   284  sub csp, jssp, #0x10 (16)
0xffff7ab11e60   288  stp x17, cp, [jssp, #-16]!
0xffff7ab11e64   292  add fp, jssp, #0x10 (16)
0xffff7ab11e68   296  ldr x17, pc+24 (addr 0x0000ffff7ab11e80)    ;; lazy deoptimization bailout 0
0xffff7ab11e6c   300  add x17, x17, x16
0xffff7ab11e70   304  br x17
0xffff7ab11e74   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11e78   312  d63f03e0       constant
0xffff7ab11e7c   316  d503201f       constant
0xffff7ab11e80   320  7a906000       constant
0xffff7ab11e84   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab11dfc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab11ddc  code target (STUB)  (0xffff7ab06820)
0xffff7ab11df4  code target (STUB)  (0xffff7ab06260)
0xffff7ab11e00  code target (STUB)  (0xffff7ab068e0)
0xffff7ab11e14  constant pool (size 36)
0xffff7ab11e68  runtime entry
0xffff7ab11e74  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2346
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 176)
0xffff7ab11f00     0  mov x2, x1
0xffff7ab11f04     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab11f48)
0xffff7ab11f08     8  mov x3, x0
0xffff7ab11f0c    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab11f58)
0xffff7ab11f10    16  asr x2, x2, #32
0xffff7ab11f14    20  asr x3, x3, #32
0xffff7ab11f18    24  sdiv w5, w2, w3
0xffff7ab11f1c    28  cbz w3, #+0x4c (addr 0xffff7ab11f68)
0xffff7ab11f20    32  cmp w3, #0x0 (0)
0xffff7ab11f24    36  ccmp w2, #0, #nzcv, mi
0xffff7ab11f28    40  b.eq #+0x40 (addr 0xffff7ab11f68)
0xffff7ab11f2c    44  cmp w2, #0x1 (1)
0xffff7ab11f30    48  ccmn w3, #1, #nzcv, vs
0xffff7ab11f34    52  b.eq #+0x34 (addr 0xffff7ab11f68)
0xffff7ab11f38    56  msub w4, w5, w3, w2
0xffff7ab11f3c    60  cbnz w4, #+0x2c (addr 0xffff7ab11f68)
0xffff7ab11f40    64  lsl x0, x5, #32
0xffff7ab11f44    68  ret
0xffff7ab11f48    72  movz x16, #0x0
0xffff7ab11f4c    76  sub csp, jssp, #0x10 (16)
0xffff7ab11f50    80  stp fp, lr, [jssp, #-16]!
0xffff7ab11f54    84  bl #+0x24 (addr 0xffff7ab11f78)
0xffff7ab11f58    88  movz x16, #0x8
0xffff7ab11f5c    92  sub csp, jssp, #0x10 (16)
0xffff7ab11f60    96  stp fp, lr, [jssp, #-16]!
0xffff7ab11f64   100  bl #+0x14 (addr 0xffff7ab11f78)
0xffff7ab11f68   104  movz x16, #0x10
0xffff7ab11f6c   108  sub csp, jssp, #0x10 (16)
0xffff7ab11f70   112  stp fp, lr, [jssp, #-16]!
0xffff7ab11f74   116  bl #+0x4 (addr 0xffff7ab11f78)
0xffff7ab11f78   120  movz x17, #0xa00000000
0xffff7ab11f7c   124  sub csp, jssp, #0x10 (16)
0xffff7ab11f80   128  stp x17, cp, [jssp, #-16]!
0xffff7ab11f84   132  add fp, jssp, #0x10 (16)
0xffff7ab11f88   136  ldr x17, pc+24 (addr 0x0000ffff7ab11fa0)    ;; lazy deoptimization bailout 0
0xffff7ab11f8c   140  add x17, x17, x16
0xffff7ab11f90   144  br x17
0xffff7ab11f94   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11f98   152  d63f03e0       constant
0xffff7ab11f9c   156  d503201f       constant
0xffff7ab11fa0   160  7a906000       constant
0xffff7ab11fa4   164  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab11f88  runtime entry
0xffff7ab11f94  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2346
type = NORMAL
name = BinaryOpICStub(DIV:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 176)
0xffff7ab11f00     0  mov x2, x1
0xffff7ab11f04     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab11f48)
0xffff7ab11f08     8  mov x3, x0
0xffff7ab11f0c    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab11f58)
0xffff7ab11f10    16  asr x2, x2, #32
0xffff7ab11f14    20  asr x3, x3, #32
0xffff7ab11f18    24  sdiv w5, w2, w3
0xffff7ab11f1c    28  cbz w3, #+0x4c (addr 0xffff7ab11f68)
0xffff7ab11f20    32  cmp w3, #0x0 (0)
0xffff7ab11f24    36  ccmp w2, #0, #nzcv, mi
0xffff7ab11f28    40  b.eq #+0x40 (addr 0xffff7ab11f68)
0xffff7ab11f2c    44  cmp w2, #0x1 (1)
0xffff7ab11f30    48  ccmn w3, #1, #nzcv, vs
0xffff7ab11f34    52  b.eq #+0x34 (addr 0xffff7ab11f68)
0xffff7ab11f38    56  msub w4, w5, w3, w2
0xffff7ab11f3c    60  cbnz w4, #+0x2c (addr 0xffff7ab11f68)
0xffff7ab11f40    64  lsl x0, x5, #32
0xffff7ab11f44    68  ret
0xffff7ab11f48    72  movz x16, #0x0
0xffff7ab11f4c    76  sub csp, jssp, #0x10 (16)
0xffff7ab11f50    80  stp fp, lr, [jssp, #-16]!
0xffff7ab11f54    84  bl #+0x24 (addr 0xffff7ab11f78)
0xffff7ab11f58    88  movz x16, #0x8
0xffff7ab11f5c    92  sub csp, jssp, #0x10 (16)
0xffff7ab11f60    96  stp fp, lr, [jssp, #-16]!
0xffff7ab11f64   100  bl #+0x14 (addr 0xffff7ab11f78)
0xffff7ab11f68   104  movz x16, #0x10
0xffff7ab11f6c   108  sub csp, jssp, #0x10 (16)
0xffff7ab11f70   112  stp fp, lr, [jssp, #-16]!
0xffff7ab11f74   116  bl #+0x4 (addr 0xffff7ab11f78)
0xffff7ab11f78   120  movz x17, #0xa00000000
0xffff7ab11f7c   124  sub csp, jssp, #0x10 (16)
0xffff7ab11f80   128  stp x17, cp, [jssp, #-16]!
0xffff7ab11f84   132  add fp, jssp, #0x10 (16)
0xffff7ab11f88   136  ldr x17, pc+24 (addr 0x0000ffff7ab11fa0)    ;; lazy deoptimization bailout 0
0xffff7ab11f8c   140  add x17, x17, x16
0xffff7ab11f90   144  br x17
0xffff7ab11f94   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab11f98   152  d63f03e0       constant
0xffff7ab11f9c   156  d503201f       constant
0xffff7ab11fa0   160  7a906000       constant
0xffff7ab11fa4   164  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab11f88  runtime entry
0xffff7ab11f94  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2362
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0xffff7ab12020     0  mov x2, x1
0xffff7ab12024     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab120e8)
0xffff7ab12028     8  mov x3, x0
0xffff7ab1202c    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab120f8)
0xffff7ab12030    16  scvtf d0, x2, #32
0xffff7ab12034    20  scvtf d1, x3, #32
0xffff7ab12038    24  fdiv d0, d0, d1
0xffff7ab1203c    28  movz x1, #0xe2c0
0xffff7ab12040    32  movk x1, #0x9ab, lsl #16
0xffff7ab12044    36  ldp x2, x0, [x1]
0xffff7ab12048    40  adds x16, x2, #0x10 (16)
0xffff7ab1204c    44  ccmp x16, x0, #nzCv, lo
0xffff7ab12050    48  b.hi #+0x20 (addr 0xffff7ab12070)
0xffff7ab12054    52  str x16, [x1]
0xffff7ab12058    56  ldr x1, [x26, #120]
0xffff7ab1205c    60  str x1, [x2]
0xffff7ab12060    64  orr x2, x2, #0x1
0xffff7ab12064    68  stur d0, [x2, #7]
0xffff7ab12068    72  mov x0, x2
0xffff7ab1206c    76  ret
0xffff7ab12070    80  sub csp, jssp, #0x10 (16)
0xffff7ab12074    84  stp fp, lr, [jssp, #-16]!
0xffff7ab12078    88  movz fp, #0xa00000000
0xffff7ab1207c    92  sub csp, jssp, #0x8 (8)
0xffff7ab12080    96  str fp, [jssp, #-8]!
0xffff7ab12084   100  add fp, jssp, #0x8 (8)
0xffff7ab12088   104  movz x2, #0x0
0xffff7ab1208c   108  mov x16, lr
0xffff7ab12090   112  ldr x17, pc+64 (addr 0x0000ffff7ab120d0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab12094   116  blr x17
0xffff7ab12098   120  ldur cp, [fp, #-8]
0xffff7ab1209c   124  movz x0, #0x0
0xffff7ab120a0   128  movz x1, #0x4b48
0xffff7ab120a4   132  movk x1, #0xe4, lsl #16
0xffff7ab120a8   136  ldr x16, pc+48 (addr 0x0000ffff7ab120d8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab120ac   140  blr x16
0xffff7ab120b0   144  str x0, [jssp, #16]
0xffff7ab120b4   148  ldr x16, pc+44 (addr 0x0000ffff7ab120e0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab120b8   152  blr x16
0xffff7ab120bc   156  ldr lr, [jssp, #16]
0xffff7ab120c0   160  ldp xzr, fp, [jssp], #24
0xffff7ab120c4   164  b #-0x60 (addr 0xffff7ab12064)
0xffff7ab120c8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab120cc   172  d63f03e0       constant
0xffff7ab120d0   176  7ab06820       constant
0xffff7ab120d4   180  0000ffff       constant
0xffff7ab120d8   184  7ab06260       constant
0xffff7ab120dc   188  0000ffff       constant
0xffff7ab120e0   192  7ab068e0       constant
0xffff7ab120e4   196  0000ffff       constant
0xffff7ab120e8   200  movz x16, #0x0
0xffff7ab120ec   204  sub csp, jssp, #0x10 (16)
0xffff7ab120f0   208  stp fp, lr, [jssp, #-16]!
0xffff7ab120f4   212  bl #+0x14 (addr 0xffff7ab12108)
0xffff7ab120f8   216  movz x16, #0x8
0xffff7ab120fc   220  sub csp, jssp, #0x10 (16)
0xffff7ab12100   224  stp fp, lr, [jssp, #-16]!
0xffff7ab12104   228  bl #+0x4 (addr 0xffff7ab12108)
0xffff7ab12108   232  movz x17, #0xa00000000
0xffff7ab1210c   236  sub csp, jssp, #0x10 (16)
0xffff7ab12110   240  stp x17, cp, [jssp, #-16]!
0xffff7ab12114   244  add fp, jssp, #0x10 (16)
0xffff7ab12118   248  ldr x17, pc+24 (addr 0x0000ffff7ab12130)    ;; lazy deoptimization bailout 0
0xffff7ab1211c   252  add x17, x17, x16
0xffff7ab12120   256  br x17
0xffff7ab12124   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab12128   264  d63f03e0       constant
0xffff7ab1212c   268  d503201f       constant
0xffff7ab12130   272  7a906000       constant
0xffff7ab12134   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab120b0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab12090  code target (STUB)  (0xffff7ab06820)
0xffff7ab120a8  code target (STUB)  (0xffff7ab06260)
0xffff7ab120b4  code target (STUB)  (0xffff7ab068e0)
0xffff7ab120c8  constant pool (size 32)
0xffff7ab12118  runtime entry
0xffff7ab12124  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2362
type = NORMAL
name = BinaryOpICStub(DIV:Int32*Smi->Number)
compiler = crankshaft
Instructions (size = 301)
0xffff7ab12020     0  mov x2, x1
0xffff7ab12024     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab120e8)
0xffff7ab12028     8  mov x3, x0
0xffff7ab1202c    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab120f8)
0xffff7ab12030    16  scvtf d0, x2, #32
0xffff7ab12034    20  scvtf d1, x3, #32
0xffff7ab12038    24  fdiv d0, d0, d1
0xffff7ab1203c    28  movz x1, #0xe2c0
0xffff7ab12040    32  movk x1, #0x9ab, lsl #16
0xffff7ab12044    36  ldp x2, x0, [x1]
0xffff7ab12048    40  adds x16, x2, #0x10 (16)
0xffff7ab1204c    44  ccmp x16, x0, #nzCv, lo
0xffff7ab12050    48  b.hi #+0x20 (addr 0xffff7ab12070)
0xffff7ab12054    52  str x16, [x1]
0xffff7ab12058    56  ldr x1, [x26, #120]
0xffff7ab1205c    60  str x1, [x2]
0xffff7ab12060    64  orr x2, x2, #0x1
0xffff7ab12064    68  stur d0, [x2, #7]
0xffff7ab12068    72  mov x0, x2
0xffff7ab1206c    76  ret
0xffff7ab12070    80  sub csp, jssp, #0x10 (16)
0xffff7ab12074    84  stp fp, lr, [jssp, #-16]!
0xffff7ab12078    88  movz fp, #0xa00000000
0xffff7ab1207c    92  sub csp, jssp, #0x8 (8)
0xffff7ab12080    96  str fp, [jssp, #-8]!
0xffff7ab12084   100  add fp, jssp, #0x8 (8)
0xffff7ab12088   104  movz x2, #0x0
0xffff7ab1208c   108  mov x16, lr
0xffff7ab12090   112  ldr x17, pc+64 (addr 0x0000ffff7ab120d0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab12094   116  blr x17
0xffff7ab12098   120  ldur cp, [fp, #-8]
0xffff7ab1209c   124  movz x0, #0x0
0xffff7ab120a0   128  movz x1, #0x4b48
0xffff7ab120a4   132  movk x1, #0xe4, lsl #16
0xffff7ab120a8   136  ldr x16, pc+48 (addr 0x0000ffff7ab120d8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab120ac   140  blr x16
0xffff7ab120b0   144  str x0, [jssp, #16]
0xffff7ab120b4   148  ldr x16, pc+44 (addr 0x0000ffff7ab120e0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab120b8   152  blr x16
0xffff7ab120bc   156  ldr lr, [jssp, #16]
0xffff7ab120c0   160  ldp xzr, fp, [jssp], #24
0xffff7ab120c4   164  b #-0x60 (addr 0xffff7ab12064)
0xffff7ab120c8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab120cc   172  d63f03e0       constant
0xffff7ab120d0   176  7ab06820       constant
0xffff7ab120d4   180  0000ffff       constant
0xffff7ab120d8   184  7ab06260       constant
0xffff7ab120dc   188  0000ffff       constant
0xffff7ab120e0   192  7ab068e0       constant
0xffff7ab120e4   196  0000ffff       constant
0xffff7ab120e8   200  movz x16, #0x0
0xffff7ab120ec   204  sub csp, jssp, #0x10 (16)
0xffff7ab120f0   208  stp fp, lr, [jssp, #-16]!
0xffff7ab120f4   212  bl #+0x14 (addr 0xffff7ab12108)
0xffff7ab120f8   216  movz x16, #0x8
0xffff7ab120fc   220  sub csp, jssp, #0x10 (16)
0xffff7ab12100   224  stp fp, lr, [jssp, #-16]!
0xffff7ab12104   228  bl #+0x4 (addr 0xffff7ab12108)
0xffff7ab12108   232  movz x17, #0xa00000000
0xffff7ab1210c   236  sub csp, jssp, #0x10 (16)
0xffff7ab12110   240  stp x17, cp, [jssp, #-16]!
0xffff7ab12114   244  add fp, jssp, #0x10 (16)
0xffff7ab12118   248  ldr x17, pc+24 (addr 0x0000ffff7ab12130)    ;; lazy deoptimization bailout 0
0xffff7ab1211c   252  add x17, x17, x16
0xffff7ab12120   256  br x17
0xffff7ab12124   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab12128   264  d63f03e0       constant
0xffff7ab1212c   268  d503201f       constant
0xffff7ab12130   272  7a906000       constant
0xffff7ab12134   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab120b0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab12090  code target (STUB)  (0xffff7ab06820)
0xffff7ab120a8  code target (STUB)  (0xffff7ab06260)
0xffff7ab120b4  code target (STUB)  (0xffff7ab068e0)
0xffff7ab120c8  constant pool (size 32)
0xffff7ab12118  runtime entry
0xffff7ab12124  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4538
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0xffff7ab121c0     0  mov x2, x0
0xffff7ab121c4     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab122b8)
0xffff7ab121c8     8  tbz w1, #0, #+0x34 (addr 0xffff7ab121fc)
0xffff7ab121cc    12  ldur x16, [x1, #-1]
0xffff7ab121d0    16  ldr x17, [x26, #120]
0xffff7ab121d4    20  cmp x16, x17
0xffff7ab121d8    24  b.ne #+0xc (addr 0xffff7ab121e4)
0xffff7ab121dc    28  ldur d0, [x1, #7]
0xffff7ab121e0    32  b #+0x20 (addr 0xffff7ab12200)
0xffff7ab121e4    36  ldr x16, [x26, #40]
0xffff7ab121e8    40  cmp x1, x16
0xffff7ab121ec    44  b.ne #+0xdc (addr 0xffff7ab122c8)
0xffff7ab121f0    48  ldr x3, [x26, #928]
0xffff7ab121f4    52  ldur d0, [x3, #7]
0xffff7ab121f8    56  b #+0x8 (addr 0xffff7ab12200)
0xffff7ab121fc    60  scvtf d0, x1, #32
0xffff7ab12200    64  scvtf d1, x2, #32
0xffff7ab12204    68  fdiv d0, d0, d1
0xffff7ab12208    72  movz x1, #0xe2c0
0xffff7ab1220c    76  movk x1, #0x9ab, lsl #16
0xffff7ab12210    80  ldp x2, x0, [x1]
0xffff7ab12214    84  adds x16, x2, #0x10 (16)
0xffff7ab12218    88  ccmp x16, x0, #nzCv, lo
0xffff7ab1221c    92  b.hi #+0x20 (addr 0xffff7ab1223c)
0xffff7ab12220    96  str x16, [x1]
0xffff7ab12224   100  ldr x1, [x26, #120]
0xffff7ab12228   104  str x1, [x2]
0xffff7ab1222c   108  orr x2, x2, #0x1
0xffff7ab12230   112  stur d0, [x2, #7]
0xffff7ab12234   116  mov x0, x2
0xffff7ab12238   120  ret
0xffff7ab1223c   124  sub csp, jssp, #0x10 (16)
0xffff7ab12240   128  stp fp, lr, [jssp, #-16]!
0xffff7ab12244   132  movz fp, #0xa00000000
0xffff7ab12248   136  sub csp, jssp, #0x8 (8)
0xffff7ab1224c   140  str fp, [jssp, #-8]!
0xffff7ab12250   144  add fp, jssp, #0x8 (8)
0xffff7ab12254   148  movz x2, #0x0
0xffff7ab12258   152  mov x16, lr
0xffff7ab1225c   156  ldr x17, pc+68 (addr 0x0000ffff7ab122a0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab12260   160  blr x17
0xffff7ab12264   164  ldur cp, [fp, #-8]
0xffff7ab12268   168  movz x0, #0x0
0xffff7ab1226c   172  movz x1, #0x4b48
0xffff7ab12270   176  movk x1, #0xe4, lsl #16
0xffff7ab12274   180  ldr x16, pc+52 (addr 0x0000ffff7ab122a8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab12278   184  blr x16
0xffff7ab1227c   188  str x0, [jssp, #16]
0xffff7ab12280   192  ldr x16, pc+48 (addr 0x0000ffff7ab122b0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab12284   196  blr x16
0xffff7ab12288   200  ldr lr, [jssp, #16]
0xffff7ab1228c   204  ldp xzr, fp, [jssp], #24
0xffff7ab12290   208  b #-0x60 (addr 0xffff7ab12230)
0xffff7ab12294   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab12298   216  d63f03e0       constant
0xffff7ab1229c   220  d503201f       constant
0xffff7ab122a0   224  7ab06820       constant
0xffff7ab122a4   228  0000ffff       constant
0xffff7ab122a8   232  7ab06260       constant
0xffff7ab122ac   236  0000ffff       constant
0xffff7ab122b0   240  7ab068e0       constant
0xffff7ab122b4   244  0000ffff       constant
0xffff7ab122b8   248  movz x16, #0x0
0xffff7ab122bc   252  sub csp, jssp, #0x10 (16)
0xffff7ab122c0   256  stp fp, lr, [jssp, #-16]!
0xffff7ab122c4   260  bl #+0x14 (addr 0xffff7ab122d8)
0xffff7ab122c8   264  movz x16, #0x8
0xffff7ab122cc   268  sub csp, jssp, #0x10 (16)
0xffff7ab122d0   272  stp fp, lr, [jssp, #-16]!
0xffff7ab122d4   276  bl #+0x4 (addr 0xffff7ab122d8)
0xffff7ab122d8   280  movz x17, #0xa00000000
0xffff7ab122dc   284  sub csp, jssp, #0x10 (16)
0xffff7ab122e0   288  stp x17, cp, [jssp, #-16]!
0xffff7ab122e4   292  add fp, jssp, #0x10 (16)
0xffff7ab122e8   296  ldr x17, pc+24 (addr 0x0000ffff7ab12300)    ;; lazy deoptimization bailout 0
0xffff7ab122ec   300  add x17, x17, x16
0xffff7ab122f0   304  br x17
0xffff7ab122f4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab122f8   312  d63f03e0       constant
0xffff7ab122fc   316  d503201f       constant
0xffff7ab12300   320  7a906000       constant
0xffff7ab12304   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab1227c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab1225c  code target (STUB)  (0xffff7ab06820)
0xffff7ab12274  code target (STUB)  (0xffff7ab06260)
0xffff7ab12280  code target (STUB)  (0xffff7ab068e0)
0xffff7ab12294  constant pool (size 36)
0xffff7ab122e8  runtime entry
0xffff7ab122f4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4538
type = NORMAL
name = BinaryOpICStub(DIV:Number*Int32->Number)
compiler = crankshaft
Instructions (size = 349)
0xffff7ab121c0     0  mov x2, x0
0xffff7ab121c4     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab122b8)
0xffff7ab121c8     8  tbz w1, #0, #+0x34 (addr 0xffff7ab121fc)
0xffff7ab121cc    12  ldur x16, [x1, #-1]
0xffff7ab121d0    16  ldr x17, [x26, #120]
0xffff7ab121d4    20  cmp x16, x17
0xffff7ab121d8    24  b.ne #+0xc (addr 0xffff7ab121e4)
0xffff7ab121dc    28  ldur d0, [x1, #7]
0xffff7ab121e0    32  b #+0x20 (addr 0xffff7ab12200)
0xffff7ab121e4    36  ldr x16, [x26, #40]
0xffff7ab121e8    40  cmp x1, x16
0xffff7ab121ec    44  b.ne #+0xdc (addr 0xffff7ab122c8)
0xffff7ab121f0    48  ldr x3, [x26, #928]
0xffff7ab121f4    52  ldur d0, [x3, #7]
0xffff7ab121f8    56  b #+0x8 (addr 0xffff7ab12200)
0xffff7ab121fc    60  scvtf d0, x1, #32
0xffff7ab12200    64  scvtf d1, x2, #32
0xffff7ab12204    68  fdiv d0, d0, d1
0xffff7ab12208    72  movz x1, #0xe2c0
0xffff7ab1220c    76  movk x1, #0x9ab, lsl #16
0xffff7ab12210    80  ldp x2, x0, [x1]
0xffff7ab12214    84  adds x16, x2, #0x10 (16)
0xffff7ab12218    88  ccmp x16, x0, #nzCv, lo
0xffff7ab1221c    92  b.hi #+0x20 (addr 0xffff7ab1223c)
0xffff7ab12220    96  str x16, [x1]
0xffff7ab12224   100  ldr x1, [x26, #120]
0xffff7ab12228   104  str x1, [x2]
0xffff7ab1222c   108  orr x2, x2, #0x1
0xffff7ab12230   112  stur d0, [x2, #7]
0xffff7ab12234   116  mov x0, x2
0xffff7ab12238   120  ret
0xffff7ab1223c   124  sub csp, jssp, #0x10 (16)
0xffff7ab12240   128  stp fp, lr, [jssp, #-16]!
0xffff7ab12244   132  movz fp, #0xa00000000
0xffff7ab12248   136  sub csp, jssp, #0x8 (8)
0xffff7ab1224c   140  str fp, [jssp, #-8]!
0xffff7ab12250   144  add fp, jssp, #0x8 (8)
0xffff7ab12254   148  movz x2, #0x0
0xffff7ab12258   152  mov x16, lr
0xffff7ab1225c   156  ldr x17, pc+68 (addr 0x0000ffff7ab122a0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab12260   160  blr x17
0xffff7ab12264   164  ldur cp, [fp, #-8]
0xffff7ab12268   168  movz x0, #0x0
0xffff7ab1226c   172  movz x1, #0x4b48
0xffff7ab12270   176  movk x1, #0xe4, lsl #16
0xffff7ab12274   180  ldr x16, pc+52 (addr 0x0000ffff7ab122a8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab12278   184  blr x16
0xffff7ab1227c   188  str x0, [jssp, #16]
0xffff7ab12280   192  ldr x16, pc+48 (addr 0x0000ffff7ab122b0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab12284   196  blr x16
0xffff7ab12288   200  ldr lr, [jssp, #16]
0xffff7ab1228c   204  ldp xzr, fp, [jssp], #24
0xffff7ab12290   208  b #-0x60 (addr 0xffff7ab12230)
0xffff7ab12294   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab12298   216  d63f03e0       constant
0xffff7ab1229c   220  d503201f       constant
0xffff7ab122a0   224  7ab06820       constant
0xffff7ab122a4   228  0000ffff       constant
0xffff7ab122a8   232  7ab06260       constant
0xffff7ab122ac   236  0000ffff       constant
0xffff7ab122b0   240  7ab068e0       constant
0xffff7ab122b4   244  0000ffff       constant
0xffff7ab122b8   248  movz x16, #0x0
0xffff7ab122bc   252  sub csp, jssp, #0x10 (16)
0xffff7ab122c0   256  stp fp, lr, [jssp, #-16]!
0xffff7ab122c4   260  bl #+0x14 (addr 0xffff7ab122d8)
0xffff7ab122c8   264  movz x16, #0x8
0xffff7ab122cc   268  sub csp, jssp, #0x10 (16)
0xffff7ab122d0   272  stp fp, lr, [jssp, #-16]!
0xffff7ab122d4   276  bl #+0x4 (addr 0xffff7ab122d8)
0xffff7ab122d8   280  movz x17, #0xa00000000
0xffff7ab122dc   284  sub csp, jssp, #0x10 (16)
0xffff7ab122e0   288  stp x17, cp, [jssp, #-16]!
0xffff7ab122e4   292  add fp, jssp, #0x10 (16)
0xffff7ab122e8   296  ldr x17, pc+24 (addr 0x0000ffff7ab12300)    ;; lazy deoptimization bailout 0
0xffff7ab122ec   300  add x17, x17, x16
0xffff7ab122f0   304  br x17
0xffff7ab122f4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab122f8   312  d63f03e0       constant
0xffff7ab122fc   316  d503201f       constant
0xffff7ab12300   320  7a906000       constant
0xffff7ab12304   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab1227c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab1225c  code target (STUB)  (0xffff7ab06820)
0xffff7ab12274  code target (STUB)  (0xffff7ab06260)
0xffff7ab12280  code target (STUB)  (0xffff7ab068e0)
0xffff7ab12294  constant pool (size 36)
0xffff7ab122e8  runtime entry
0xffff7ab122f4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6586
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 389)
0xffff7ab12380     0  tbz w1, #0, #+0x34 (addr 0xffff7ab123b4)
0xffff7ab12384     4  ldur x16, [x1, #-1]
0xffff7ab12388     8  ldr x17, [x26, #120]
0xffff7ab1238c    12  cmp x16, x17
0xffff7ab12390    16  b.ne #+0xc (addr 0xffff7ab1239c)
0xffff7ab12394    20  ldur d0, [x1, #7]
0xffff7ab12398    24  b #+0x20 (addr 0xffff7ab123b8)
0xffff7ab1239c    28  ldr x16, [x26, #40]
0xffff7ab123a0    32  cmp x1, x16
0xffff7ab123a4    36  b.ne #+0xfc (addr 0xffff7ab124a0)
0xffff7ab123a8    40  ldr x2, [x26, #928]
0xffff7ab123ac    44  ldur d0, [x2, #7]
0xffff7ab123b0    48  b #+0x8 (addr 0xffff7ab123b8)
0xffff7ab123b4    52  scvtf d0, x1, #32
0xffff7ab123b8    56  tbz w0, #0, #+0x34 (addr 0xffff7ab123ec)
0xffff7ab123bc    60  ldur x16, [x0, #-1]
0xffff7ab123c0    64  ldr x17, [x26, #120]
0xffff7ab123c4    68  cmp x16, x17
0xffff7ab123c8    72  b.ne #+0xc (addr 0xffff7ab123d4)
0xffff7ab123cc    76  ldur d1, [x0, #7]
0xffff7ab123d0    80  b #+0x20 (addr 0xffff7ab123f0)
0xffff7ab123d4    84  ldr x16, [x26, #40]
0xffff7ab123d8    88  cmp x0, x16
0xffff7ab123dc    92  b.ne #+0xd4 (addr 0xffff7ab124b0)
0xffff7ab123e0    96  ldr x2, [x26, #928]
0xffff7ab123e4   100  ldur d1, [x2, #7]
0xffff7ab123e8   104  b #+0x8 (addr 0xffff7ab123f0)
0xffff7ab123ec   108  scvtf d1, x0, #32
0xffff7ab123f0   112  fdiv d0, d0, d1
0xffff7ab123f4   116  movz x1, #0xe2c0
0xffff7ab123f8   120  movk x1, #0x9ab, lsl #16
0xffff7ab123fc   124  ldp x2, x0, [x1]
0xffff7ab12400   128  adds x16, x2, #0x10 (16)
0xffff7ab12404   132  ccmp x16, x0, #nzCv, lo
0xffff7ab12408   136  b.hi #+0x20 (addr 0xffff7ab12428)
0xffff7ab1240c   140  str x16, [x1]
0xffff7ab12410   144  ldr x1, [x26, #120]
0xffff7ab12414   148  str x1, [x2]
0xffff7ab12418   152  orr x2, x2, #0x1
0xffff7ab1241c   156  stur d0, [x2, #7]
0xffff7ab12420   160  mov x0, x2
0xffff7ab12424   164  ret
0xffff7ab12428   168  sub csp, jssp, #0x10 (16)
0xffff7ab1242c   172  stp fp, lr, [jssp, #-16]!
0xffff7ab12430   176  movz fp, #0xa00000000
0xffff7ab12434   180  sub csp, jssp, #0x8 (8)
0xffff7ab12438   184  str fp, [jssp, #-8]!
0xffff7ab1243c   188  add fp, jssp, #0x8 (8)
0xffff7ab12440   192  movz x2, #0x0
0xffff7ab12444   196  mov x16, lr
0xffff7ab12448   200  ldr x17, pc+64 (addr 0x0000ffff7ab12488)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab1244c   204  blr x17
0xffff7ab12450   208  ldur cp, [fp, #-8]
0xffff7ab12454   212  movz x0, #0x0
0xffff7ab12458   216  movz x1, #0x4b48
0xffff7ab1245c   220  movk x1, #0xe4, lsl #16
0xffff7ab12460   224  ldr x16, pc+48 (addr 0x0000ffff7ab12490)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab12464   228  blr x16
0xffff7ab12468   232  str x0, [jssp, #16]
0xffff7ab1246c   236  ldr x16, pc+44 (addr 0x0000ffff7ab12498)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab12470   240  blr x16
0xffff7ab12474   244  ldr lr, [jssp, #16]
0xffff7ab12478   248  ldp xzr, fp, [jssp], #24
0xffff7ab1247c   252  b #-0x60 (addr 0xffff7ab1241c)
0xffff7ab12480   256  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab12484   260  d63f03e0       constant
0xffff7ab12488   264  7ab06820       constant
0xffff7ab1248c   268  0000ffff       constant
0xffff7ab12490   272  7ab06260       constant
0xffff7ab12494   276  0000ffff       constant
0xffff7ab12498   280  7ab068e0       constant
0xffff7ab1249c   284  0000ffff       constant
0xffff7ab124a0   288  movz x16, #0x0
0xffff7ab124a4   292  sub csp, jssp, #0x10 (16)
0xffff7ab124a8   296  stp fp, lr, [jssp, #-16]!
0xffff7ab124ac   300  bl #+0x14 (addr 0xffff7ab124c0)
0xffff7ab124b0   304  movz x16, #0x8
0xffff7ab124b4   308  sub csp, jssp, #0x10 (16)
0xffff7ab124b8   312  stp fp, lr, [jssp, #-16]!
0xffff7ab124bc   316  bl #+0x4 (addr 0xffff7ab124c0)
0xffff7ab124c0   320  movz x17, #0xa00000000
0xffff7ab124c4   324  sub csp, jssp, #0x10 (16)
0xffff7ab124c8   328  stp x17, cp, [jssp, #-16]!
0xffff7ab124cc   332  add fp, jssp, #0x10 (16)
0xffff7ab124d0   336  ldr x17, pc+24 (addr 0x0000ffff7ab124e8)    ;; lazy deoptimization bailout 0
0xffff7ab124d4   340  add x17, x17, x16
0xffff7ab124d8   344  br x17
0xffff7ab124dc   348  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab124e0   352  d63f03e0       constant
0xffff7ab124e4   356  d503201f       constant
0xffff7ab124e8   360  7a906000       constant
0xffff7ab124ec   364  0000ffff       constant


Safepoints (size = 21)
0xffff7ab12468   232  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab12448  code target (STUB)  (0xffff7ab06820)
0xffff7ab12460  code target (STUB)  (0xffff7ab06260)
0xffff7ab1246c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab12480  constant pool (size 32)
0xffff7ab124d0  runtime entry
0xffff7ab124dc  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6586
type = NORMAL
name = BinaryOpICStub(DIV:Number*Number->Number)
compiler = crankshaft
Instructions (size = 389)
0xffff7ab12380     0  tbz w1, #0, #+0x34 (addr 0xffff7ab123b4)
0xffff7ab12384     4  ldur x16, [x1, #-1]
0xffff7ab12388     8  ldr x17, [x26, #120]
0xffff7ab1238c    12  cmp x16, x17
0xffff7ab12390    16  b.ne #+0xc (addr 0xffff7ab1239c)
0xffff7ab12394    20  ldur d0, [x1, #7]
0xffff7ab12398    24  b #+0x20 (addr 0xffff7ab123b8)
0xffff7ab1239c    28  ldr x16, [x26, #40]
0xffff7ab123a0    32  cmp x1, x16
0xffff7ab123a4    36  b.ne #+0xfc (addr 0xffff7ab124a0)
0xffff7ab123a8    40  ldr x2, [x26, #928]
0xffff7ab123ac    44  ldur d0, [x2, #7]
0xffff7ab123b0    48  b #+0x8 (addr 0xffff7ab123b8)
0xffff7ab123b4    52  scvtf d0, x1, #32
0xffff7ab123b8    56  tbz w0, #0, #+0x34 (addr 0xffff7ab123ec)
0xffff7ab123bc    60  ldur x16, [x0, #-1]
0xffff7ab123c0    64  ldr x17, [x26, #120]
0xffff7ab123c4    68  cmp x16, x17
0xffff7ab123c8    72  b.ne #+0xc (addr 0xffff7ab123d4)
0xffff7ab123cc    76  ldur d1, [x0, #7]
0xffff7ab123d0    80  b #+0x20 (addr 0xffff7ab123f0)
0xffff7ab123d4    84  ldr x16, [x26, #40]
0xffff7ab123d8    88  cmp x0, x16
0xffff7ab123dc    92  b.ne #+0xd4 (addr 0xffff7ab124b0)
0xffff7ab123e0    96  ldr x2, [x26, #928]
0xffff7ab123e4   100  ldur d1, [x2, #7]
0xffff7ab123e8   104  b #+0x8 (addr 0xffff7ab123f0)
0xffff7ab123ec   108  scvtf d1, x0, #32
0xffff7ab123f0   112  fdiv d0, d0, d1
0xffff7ab123f4   116  movz x1, #0xe2c0
0xffff7ab123f8   120  movk x1, #0x9ab, lsl #16
0xffff7ab123fc   124  ldp x2, x0, [x1]
0xffff7ab12400   128  adds x16, x2, #0x10 (16)
0xffff7ab12404   132  ccmp x16, x0, #nzCv, lo
0xffff7ab12408   136  b.hi #+0x20 (addr 0xffff7ab12428)
0xffff7ab1240c   140  str x16, [x1]
0xffff7ab12410   144  ldr x1, [x26, #120]
0xffff7ab12414   148  str x1, [x2]
0xffff7ab12418   152  orr x2, x2, #0x1
0xffff7ab1241c   156  stur d0, [x2, #7]
0xffff7ab12420   160  mov x0, x2
0xffff7ab12424   164  ret
0xffff7ab12428   168  sub csp, jssp, #0x10 (16)
0xffff7ab1242c   172  stp fp, lr, [jssp, #-16]!
0xffff7ab12430   176  movz fp, #0xa00000000
0xffff7ab12434   180  sub csp, jssp, #0x8 (8)
0xffff7ab12438   184  str fp, [jssp, #-8]!
0xffff7ab1243c   188  add fp, jssp, #0x8 (8)
0xffff7ab12440   192  movz x2, #0x0
0xffff7ab12444   196  mov x16, lr
0xffff7ab12448   200  ldr x17, pc+64 (addr 0x0000ffff7ab12488)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab1244c   204  blr x17
0xffff7ab12450   208  ldur cp, [fp, #-8]
0xffff7ab12454   212  movz x0, #0x0
0xffff7ab12458   216  movz x1, #0x4b48
0xffff7ab1245c   220  movk x1, #0xe4, lsl #16
0xffff7ab12460   224  ldr x16, pc+48 (addr 0x0000ffff7ab12490)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab12464   228  blr x16
0xffff7ab12468   232  str x0, [jssp, #16]
0xffff7ab1246c   236  ldr x16, pc+44 (addr 0x0000ffff7ab12498)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab12470   240  blr x16
0xffff7ab12474   244  ldr lr, [jssp, #16]
0xffff7ab12478   248  ldp xzr, fp, [jssp], #24
0xffff7ab1247c   252  b #-0x60 (addr 0xffff7ab1241c)
0xffff7ab12480   256  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab12484   260  d63f03e0       constant
0xffff7ab12488   264  7ab06820       constant
0xffff7ab1248c   268  0000ffff       constant
0xffff7ab12490   272  7ab06260       constant
0xffff7ab12494   276  0000ffff       constant
0xffff7ab12498   280  7ab068e0       constant
0xffff7ab1249c   284  0000ffff       constant
0xffff7ab124a0   288  movz x16, #0x0
0xffff7ab124a4   292  sub csp, jssp, #0x10 (16)
0xffff7ab124a8   296  stp fp, lr, [jssp, #-16]!
0xffff7ab124ac   300  bl #+0x14 (addr 0xffff7ab124c0)
0xffff7ab124b0   304  movz x16, #0x8
0xffff7ab124b4   308  sub csp, jssp, #0x10 (16)
0xffff7ab124b8   312  stp fp, lr, [jssp, #-16]!
0xffff7ab124bc   316  bl #+0x4 (addr 0xffff7ab124c0)
0xffff7ab124c0   320  movz x17, #0xa00000000
0xffff7ab124c4   324  sub csp, jssp, #0x10 (16)
0xffff7ab124c8   328  stp x17, cp, [jssp, #-16]!
0xffff7ab124cc   332  add fp, jssp, #0x10 (16)
0xffff7ab124d0   336  ldr x17, pc+24 (addr 0x0000ffff7ab124e8)    ;; lazy deoptimization bailout 0
0xffff7ab124d4   340  add x17, x17, x16
0xffff7ab124d8   344  br x17
0xffff7ab124dc   348  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab124e0   352  d63f03e0       constant
0xffff7ab124e4   356  d503201f       constant
0xffff7ab124e8   360  7a906000       constant
0xffff7ab124ec   364  0000ffff       constant


Safepoints (size = 21)
0xffff7ab12468   232  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab12448  code target (STUB)  (0xffff7ab06820)
0xffff7ab12460  code target (STUB)  (0xffff7ab06260)
0xffff7ab1246c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab12480  constant pool (size 32)
0xffff7ab124d0  runtime entry
0xffff7ab124dc  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2490
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0xffff7ab12580     0  mov x2, x0
0xffff7ab12584     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab12678)
0xffff7ab12588     8  tbz w1, #0, #+0x34 (addr 0xffff7ab125bc)
0xffff7ab1258c    12  ldur x16, [x1, #-1]
0xffff7ab12590    16  ldr x17, [x26, #120]
0xffff7ab12594    20  cmp x16, x17
0xffff7ab12598    24  b.ne #+0xc (addr 0xffff7ab125a4)
0xffff7ab1259c    28  ldur d0, [x1, #7]
0xffff7ab125a0    32  b #+0x20 (addr 0xffff7ab125c0)
0xffff7ab125a4    36  ldr x16, [x26, #40]
0xffff7ab125a8    40  cmp x1, x16
0xffff7ab125ac    44  b.ne #+0xdc (addr 0xffff7ab12688)
0xffff7ab125b0    48  ldr x3, [x26, #928]
0xffff7ab125b4    52  ldur d0, [x3, #7]
0xffff7ab125b8    56  b #+0x8 (addr 0xffff7ab125c0)
0xffff7ab125bc    60  scvtf d0, x1, #32
0xffff7ab125c0    64  scvtf d1, x2, #32
0xffff7ab125c4    68  fdiv d0, d0, d1
0xffff7ab125c8    72  movz x1, #0xe2c0
0xffff7ab125cc    76  movk x1, #0x9ab, lsl #16
0xffff7ab125d0    80  ldp x2, x0, [x1]
0xffff7ab125d4    84  adds x16, x2, #0x10 (16)
0xffff7ab125d8    88  ccmp x16, x0, #nzCv, lo
0xffff7ab125dc    92  b.hi #+0x20 (addr 0xffff7ab125fc)
0xffff7ab125e0    96  str x16, [x1]
0xffff7ab125e4   100  ldr x1, [x26, #120]
0xffff7ab125e8   104  str x1, [x2]
0xffff7ab125ec   108  orr x2, x2, #0x1
0xffff7ab125f0   112  stur d0, [x2, #7]
0xffff7ab125f4   116  mov x0, x2
0xffff7ab125f8   120  ret
0xffff7ab125fc   124  sub csp, jssp, #0x10 (16)
0xffff7ab12600   128  stp fp, lr, [jssp, #-16]!
0xffff7ab12604   132  movz fp, #0xa00000000
0xffff7ab12608   136  sub csp, jssp, #0x8 (8)
0xffff7ab1260c   140  str fp, [jssp, #-8]!
0xffff7ab12610   144  add fp, jssp, #0x8 (8)
0xffff7ab12614   148  movz x2, #0x0
0xffff7ab12618   152  mov x16, lr
0xffff7ab1261c   156  ldr x17, pc+68 (addr 0x0000ffff7ab12660)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab12620   160  blr x17
0xffff7ab12624   164  ldur cp, [fp, #-8]
0xffff7ab12628   168  movz x0, #0x0
0xffff7ab1262c   172  movz x1, #0x4b48
0xffff7ab12630   176  movk x1, #0xe4, lsl #16
0xffff7ab12634   180  ldr x16, pc+52 (addr 0x0000ffff7ab12668)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab12638   184  blr x16
0xffff7ab1263c   188  str x0, [jssp, #16]
0xffff7ab12640   192  ldr x16, pc+48 (addr 0x0000ffff7ab12670)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab12644   196  blr x16
0xffff7ab12648   200  ldr lr, [jssp, #16]
0xffff7ab1264c   204  ldp xzr, fp, [jssp], #24
0xffff7ab12650   208  b #-0x60 (addr 0xffff7ab125f0)
0xffff7ab12654   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab12658   216  d63f03e0       constant
0xffff7ab1265c   220  d503201f       constant
0xffff7ab12660   224  7ab06820       constant
0xffff7ab12664   228  0000ffff       constant
0xffff7ab12668   232  7ab06260       constant
0xffff7ab1266c   236  0000ffff       constant
0xffff7ab12670   240  7ab068e0       constant
0xffff7ab12674   244  0000ffff       constant
0xffff7ab12678   248  movz x16, #0x0
0xffff7ab1267c   252  sub csp, jssp, #0x10 (16)
0xffff7ab12680   256  stp fp, lr, [jssp, #-16]!
0xffff7ab12684   260  bl #+0x14 (addr 0xffff7ab12698)
0xffff7ab12688   264  movz x16, #0x8
0xffff7ab1268c   268  sub csp, jssp, #0x10 (16)
0xffff7ab12690   272  stp fp, lr, [jssp, #-16]!
0xffff7ab12694   276  bl #+0x4 (addr 0xffff7ab12698)
0xffff7ab12698   280  movz x17, #0xa00000000
0xffff7ab1269c   284  sub csp, jssp, #0x10 (16)
0xffff7ab126a0   288  stp x17, cp, [jssp, #-16]!
0xffff7ab126a4   292  add fp, jssp, #0x10 (16)
0xffff7ab126a8   296  ldr x17, pc+24 (addr 0x0000ffff7ab126c0)    ;; lazy deoptimization bailout 0
0xffff7ab126ac   300  add x17, x17, x16
0xffff7ab126b0   304  br x17
0xffff7ab126b4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab126b8   312  d63f03e0       constant
0xffff7ab126bc   316  d503201f       constant
0xffff7ab126c0   320  7a906000       constant
0xffff7ab126c4   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab1263c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab1261c  code target (STUB)  (0xffff7ab06820)
0xffff7ab12634  code target (STUB)  (0xffff7ab06260)
0xffff7ab12640  code target (STUB)  (0xffff7ab068e0)
0xffff7ab12654  constant pool (size 36)
0xffff7ab126a8  runtime entry
0xffff7ab126b4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2490
type = NORMAL
name = BinaryOpICStub(DIV:Number*Smi->Number)
compiler = crankshaft
Instructions (size = 349)
0xffff7ab12580     0  mov x2, x0
0xffff7ab12584     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab12678)
0xffff7ab12588     8  tbz w1, #0, #+0x34 (addr 0xffff7ab125bc)
0xffff7ab1258c    12  ldur x16, [x1, #-1]
0xffff7ab12590    16  ldr x17, [x26, #120]
0xffff7ab12594    20  cmp x16, x17
0xffff7ab12598    24  b.ne #+0xc (addr 0xffff7ab125a4)
0xffff7ab1259c    28  ldur d0, [x1, #7]
0xffff7ab125a0    32  b #+0x20 (addr 0xffff7ab125c0)
0xffff7ab125a4    36  ldr x16, [x26, #40]
0xffff7ab125a8    40  cmp x1, x16
0xffff7ab125ac    44  b.ne #+0xdc (addr 0xffff7ab12688)
0xffff7ab125b0    48  ldr x3, [x26, #928]
0xffff7ab125b4    52  ldur d0, [x3, #7]
0xffff7ab125b8    56  b #+0x8 (addr 0xffff7ab125c0)
0xffff7ab125bc    60  scvtf d0, x1, #32
0xffff7ab125c0    64  scvtf d1, x2, #32
0xffff7ab125c4    68  fdiv d0, d0, d1
0xffff7ab125c8    72  movz x1, #0xe2c0
0xffff7ab125cc    76  movk x1, #0x9ab, lsl #16
0xffff7ab125d0    80  ldp x2, x0, [x1]
0xffff7ab125d4    84  adds x16, x2, #0x10 (16)
0xffff7ab125d8    88  ccmp x16, x0, #nzCv, lo
0xffff7ab125dc    92  b.hi #+0x20 (addr 0xffff7ab125fc)
0xffff7ab125e0    96  str x16, [x1]
0xffff7ab125e4   100  ldr x1, [x26, #120]
0xffff7ab125e8   104  str x1, [x2]
0xffff7ab125ec   108  orr x2, x2, #0x1
0xffff7ab125f0   112  stur d0, [x2, #7]
0xffff7ab125f4   116  mov x0, x2
0xffff7ab125f8   120  ret
0xffff7ab125fc   124  sub csp, jssp, #0x10 (16)
0xffff7ab12600   128  stp fp, lr, [jssp, #-16]!
0xffff7ab12604   132  movz fp, #0xa00000000
0xffff7ab12608   136  sub csp, jssp, #0x8 (8)
0xffff7ab1260c   140  str fp, [jssp, #-8]!
0xffff7ab12610   144  add fp, jssp, #0x8 (8)
0xffff7ab12614   148  movz x2, #0x0
0xffff7ab12618   152  mov x16, lr
0xffff7ab1261c   156  ldr x17, pc+68 (addr 0x0000ffff7ab12660)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab12620   160  blr x17
0xffff7ab12624   164  ldur cp, [fp, #-8]
0xffff7ab12628   168  movz x0, #0x0
0xffff7ab1262c   172  movz x1, #0x4b48
0xffff7ab12630   176  movk x1, #0xe4, lsl #16
0xffff7ab12634   180  ldr x16, pc+52 (addr 0x0000ffff7ab12668)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab12638   184  blr x16
0xffff7ab1263c   188  str x0, [jssp, #16]
0xffff7ab12640   192  ldr x16, pc+48 (addr 0x0000ffff7ab12670)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab12644   196  blr x16
0xffff7ab12648   200  ldr lr, [jssp, #16]
0xffff7ab1264c   204  ldp xzr, fp, [jssp], #24
0xffff7ab12650   208  b #-0x60 (addr 0xffff7ab125f0)
0xffff7ab12654   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab12658   216  d63f03e0       constant
0xffff7ab1265c   220  d503201f       constant
0xffff7ab12660   224  7ab06820       constant
0xffff7ab12664   228  0000ffff       constant
0xffff7ab12668   232  7ab06260       constant
0xffff7ab1266c   236  0000ffff       constant
0xffff7ab12670   240  7ab068e0       constant
0xffff7ab12674   244  0000ffff       constant
0xffff7ab12678   248  movz x16, #0x0
0xffff7ab1267c   252  sub csp, jssp, #0x10 (16)
0xffff7ab12680   256  stp fp, lr, [jssp, #-16]!
0xffff7ab12684   260  bl #+0x14 (addr 0xffff7ab12698)
0xffff7ab12688   264  movz x16, #0x8
0xffff7ab1268c   268  sub csp, jssp, #0x10 (16)
0xffff7ab12690   272  stp fp, lr, [jssp, #-16]!
0xffff7ab12694   276  bl #+0x4 (addr 0xffff7ab12698)
0xffff7ab12698   280  movz x17, #0xa00000000
0xffff7ab1269c   284  sub csp, jssp, #0x10 (16)
0xffff7ab126a0   288  stp x17, cp, [jssp, #-16]!
0xffff7ab126a4   292  add fp, jssp, #0x10 (16)
0xffff7ab126a8   296  ldr x17, pc+24 (addr 0x0000ffff7ab126c0)    ;; lazy deoptimization bailout 0
0xffff7ab126ac   300  add x17, x17, x16
0xffff7ab126b0   304  br x17
0xffff7ab126b4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab126b8   312  d63f03e0       constant
0xffff7ab126bc   316  d503201f       constant
0xffff7ab126c0   320  7a906000       constant
0xffff7ab126c4   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab1263c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab1261c  code target (STUB)  (0xffff7ab06820)
0xffff7ab12634  code target (STUB)  (0xffff7ab06260)
0xffff7ab12640  code target (STUB)  (0xffff7ab068e0)
0xffff7ab12654  constant pool (size 36)
0xffff7ab126a8  runtime entry
0xffff7ab126b4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4266
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 176)
0xffff7ab12740     0  mov x2, x1
0xffff7ab12744     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab12788)
0xffff7ab12748     8  mov x3, x0
0xffff7ab1274c    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab12798)
0xffff7ab12750    16  asr x2, x2, #32
0xffff7ab12754    20  asr x3, x3, #32
0xffff7ab12758    24  sdiv w5, w2, w3
0xffff7ab1275c    28  cbz w3, #+0x4c (addr 0xffff7ab127a8)
0xffff7ab12760    32  cmp w3, #0x0 (0)
0xffff7ab12764    36  ccmp w2, #0, #nzcv, mi
0xffff7ab12768    40  b.eq #+0x40 (addr 0xffff7ab127a8)
0xffff7ab1276c    44  cmp w2, #0x1 (1)
0xffff7ab12770    48  ccmn w3, #1, #nzcv, vs
0xffff7ab12774    52  b.eq #+0x34 (addr 0xffff7ab127a8)
0xffff7ab12778    56  msub w4, w5, w3, w2
0xffff7ab1277c    60  cbnz w4, #+0x2c (addr 0xffff7ab127a8)
0xffff7ab12780    64  lsl x0, x5, #32
0xffff7ab12784    68  ret
0xffff7ab12788    72  movz x16, #0x0
0xffff7ab1278c    76  sub csp, jssp, #0x10 (16)
0xffff7ab12790    80  stp fp, lr, [jssp, #-16]!
0xffff7ab12794    84  bl #+0x24 (addr 0xffff7ab127b8)
0xffff7ab12798    88  movz x16, #0x8
0xffff7ab1279c    92  sub csp, jssp, #0x10 (16)
0xffff7ab127a0    96  stp fp, lr, [jssp, #-16]!
0xffff7ab127a4   100  bl #+0x14 (addr 0xffff7ab127b8)
0xffff7ab127a8   104  movz x16, #0x10
0xffff7ab127ac   108  sub csp, jssp, #0x10 (16)
0xffff7ab127b0   112  stp fp, lr, [jssp, #-16]!
0xffff7ab127b4   116  bl #+0x4 (addr 0xffff7ab127b8)
0xffff7ab127b8   120  movz x17, #0xa00000000
0xffff7ab127bc   124  sub csp, jssp, #0x10 (16)
0xffff7ab127c0   128  stp x17, cp, [jssp, #-16]!
0xffff7ab127c4   132  add fp, jssp, #0x10 (16)
0xffff7ab127c8   136  ldr x17, pc+24 (addr 0x0000ffff7ab127e0)    ;; lazy deoptimization bailout 0
0xffff7ab127cc   140  add x17, x17, x16
0xffff7ab127d0   144  br x17
0xffff7ab127d4   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab127d8   152  d63f03e0       constant
0xffff7ab127dc   156  d503201f       constant
0xffff7ab127e0   160  7a906000       constant
0xffff7ab127e4   164  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab127c8  runtime entry
0xffff7ab127d4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4266
type = NORMAL
name = BinaryOpICStub(DIV:Smi*Int32->Int32)
compiler = crankshaft
Instructions (size = 176)
0xffff7ab12740     0  mov x2, x1
0xffff7ab12744     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab12788)
0xffff7ab12748     8  mov x3, x0
0xffff7ab1274c    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab12798)
0xffff7ab12750    16  asr x2, x2, #32
0xffff7ab12754    20  asr x3, x3, #32
0xffff7ab12758    24  sdiv w5, w2, w3
0xffff7ab1275c    28  cbz w3, #+0x4c (addr 0xffff7ab127a8)
0xffff7ab12760    32  cmp w3, #0x0 (0)
0xffff7ab12764    36  ccmp w2, #0, #nzcv, mi
0xffff7ab12768    40  b.eq #+0x40 (addr 0xffff7ab127a8)
0xffff7ab1276c    44  cmp w2, #0x1 (1)
0xffff7ab12770    48  ccmn w3, #1, #nzcv, vs
0xffff7ab12774    52  b.eq #+0x34 (addr 0xffff7ab127a8)
0xffff7ab12778    56  msub w4, w5, w3, w2
0xffff7ab1277c    60  cbnz w4, #+0x2c (addr 0xffff7ab127a8)
0xffff7ab12780    64  lsl x0, x5, #32
0xffff7ab12784    68  ret
0xffff7ab12788    72  movz x16, #0x0
0xffff7ab1278c    76  sub csp, jssp, #0x10 (16)
0xffff7ab12790    80  stp fp, lr, [jssp, #-16]!
0xffff7ab12794    84  bl #+0x24 (addr 0xffff7ab127b8)
0xffff7ab12798    88  movz x16, #0x8
0xffff7ab1279c    92  sub csp, jssp, #0x10 (16)
0xffff7ab127a0    96  stp fp, lr, [jssp, #-16]!
0xffff7ab127a4   100  bl #+0x14 (addr 0xffff7ab127b8)
0xffff7ab127a8   104  movz x16, #0x10
0xffff7ab127ac   108  sub csp, jssp, #0x10 (16)
0xffff7ab127b0   112  stp fp, lr, [jssp, #-16]!
0xffff7ab127b4   116  bl #+0x4 (addr 0xffff7ab127b8)
0xffff7ab127b8   120  movz x17, #0xa00000000
0xffff7ab127bc   124  sub csp, jssp, #0x10 (16)
0xffff7ab127c0   128  stp x17, cp, [jssp, #-16]!
0xffff7ab127c4   132  add fp, jssp, #0x10 (16)
0xffff7ab127c8   136  ldr x17, pc+24 (addr 0x0000ffff7ab127e0)    ;; lazy deoptimization bailout 0
0xffff7ab127cc   140  add x17, x17, x16
0xffff7ab127d0   144  br x17
0xffff7ab127d4   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab127d8   152  d63f03e0       constant
0xffff7ab127dc   156  d503201f       constant
0xffff7ab127e0   160  7a906000       constant
0xffff7ab127e4   164  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab127c8  runtime entry
0xffff7ab127d4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4282
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0xffff7ab12860     0  mov x2, x1
0xffff7ab12864     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab12928)
0xffff7ab12868     8  mov x3, x0
0xffff7ab1286c    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab12938)
0xffff7ab12870    16  scvtf d0, x2, #32
0xffff7ab12874    20  scvtf d1, x3, #32
0xffff7ab12878    24  fdiv d0, d0, d1
0xffff7ab1287c    28  movz x1, #0xe2c0
0xffff7ab12880    32  movk x1, #0x9ab, lsl #16
0xffff7ab12884    36  ldp x2, x0, [x1]
0xffff7ab12888    40  adds x16, x2, #0x10 (16)
0xffff7ab1288c    44  ccmp x16, x0, #nzCv, lo
0xffff7ab12890    48  b.hi #+0x20 (addr 0xffff7ab128b0)
0xffff7ab12894    52  str x16, [x1]
0xffff7ab12898    56  ldr x1, [x26, #120]
0xffff7ab1289c    60  str x1, [x2]
0xffff7ab128a0    64  orr x2, x2, #0x1
0xffff7ab128a4    68  stur d0, [x2, #7]
0xffff7ab128a8    72  mov x0, x2
0xffff7ab128ac    76  ret
0xffff7ab128b0    80  sub csp, jssp, #0x10 (16)
0xffff7ab128b4    84  stp fp, lr, [jssp, #-16]!
0xffff7ab128b8    88  movz fp, #0xa00000000
0xffff7ab128bc    92  sub csp, jssp, #0x8 (8)
0xffff7ab128c0    96  str fp, [jssp, #-8]!
0xffff7ab128c4   100  add fp, jssp, #0x8 (8)
0xffff7ab128c8   104  movz x2, #0x0
0xffff7ab128cc   108  mov x16, lr
0xffff7ab128d0   112  ldr x17, pc+64 (addr 0x0000ffff7ab12910)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab128d4   116  blr x17
0xffff7ab128d8   120  ldur cp, [fp, #-8]
0xffff7ab128dc   124  movz x0, #0x0
0xffff7ab128e0   128  movz x1, #0x4b48
0xffff7ab128e4   132  movk x1, #0xe4, lsl #16
0xffff7ab128e8   136  ldr x16, pc+48 (addr 0x0000ffff7ab12918)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab128ec   140  blr x16
0xffff7ab128f0   144  str x0, [jssp, #16]
0xffff7ab128f4   148  ldr x16, pc+44 (addr 0x0000ffff7ab12920)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab128f8   152  blr x16
0xffff7ab128fc   156  ldr lr, [jssp, #16]
0xffff7ab12900   160  ldp xzr, fp, [jssp], #24
0xffff7ab12904   164  b #-0x60 (addr 0xffff7ab128a4)
0xffff7ab12908   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab1290c   172  d63f03e0       constant
0xffff7ab12910   176  7ab06820       constant
0xffff7ab12914   180  0000ffff       constant
0xffff7ab12918   184  7ab06260       constant
0xffff7ab1291c   188  0000ffff       constant
0xffff7ab12920   192  7ab068e0       constant
0xffff7ab12924   196  0000ffff       constant
0xffff7ab12928   200  movz x16, #0x0
0xffff7ab1292c   204  sub csp, jssp, #0x10 (16)
0xffff7ab12930   208  stp fp, lr, [jssp, #-16]!
0xffff7ab12934   212  bl #+0x14 (addr 0xffff7ab12948)
0xffff7ab12938   216  movz x16, #0x8
0xffff7ab1293c   220  sub csp, jssp, #0x10 (16)
0xffff7ab12940   224  stp fp, lr, [jssp, #-16]!
0xffff7ab12944   228  bl #+0x4 (addr 0xffff7ab12948)
0xffff7ab12948   232  movz x17, #0xa00000000
0xffff7ab1294c   236  sub csp, jssp, #0x10 (16)
0xffff7ab12950   240  stp x17, cp, [jssp, #-16]!
0xffff7ab12954   244  add fp, jssp, #0x10 (16)
0xffff7ab12958   248  ldr x17, pc+24 (addr 0x0000ffff7ab12970)    ;; lazy deoptimization bailout 0
0xffff7ab1295c   252  add x17, x17, x16
0xffff7ab12960   256  br x17
0xffff7ab12964   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab12968   264  d63f03e0       constant
0xffff7ab1296c   268  d503201f       constant
0xffff7ab12970   272  7a906000       constant
0xffff7ab12974   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab128f0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab128d0  code target (STUB)  (0xffff7ab06820)
0xffff7ab128e8  code target (STUB)  (0xffff7ab06260)
0xffff7ab128f4  code target (STUB)  (0xffff7ab068e0)
0xffff7ab12908  constant pool (size 32)
0xffff7ab12958  runtime entry
0xffff7ab12964  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4282
type = NORMAL
name = BinaryOpICStub(DIV:Smi*Int32->Number)
compiler = crankshaft
Instructions (size = 301)
0xffff7ab12860     0  mov x2, x1
0xffff7ab12864     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab12928)
0xffff7ab12868     8  mov x3, x0
0xffff7ab1286c    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab12938)
0xffff7ab12870    16  scvtf d0, x2, #32
0xffff7ab12874    20  scvtf d1, x3, #32
0xffff7ab12878    24  fdiv d0, d0, d1
0xffff7ab1287c    28  movz x1, #0xe2c0
0xffff7ab12880    32  movk x1, #0x9ab, lsl #16
0xffff7ab12884    36  ldp x2, x0, [x1]
0xffff7ab12888    40  adds x16, x2, #0x10 (16)
0xffff7ab1288c    44  ccmp x16, x0, #nzCv, lo
0xffff7ab12890    48  b.hi #+0x20 (addr 0xffff7ab128b0)
0xffff7ab12894    52  str x16, [x1]
0xffff7ab12898    56  ldr x1, [x26, #120]
0xffff7ab1289c    60  str x1, [x2]
0xffff7ab128a0    64  orr x2, x2, #0x1
0xffff7ab128a4    68  stur d0, [x2, #7]
0xffff7ab128a8    72  mov x0, x2
0xffff7ab128ac    76  ret
0xffff7ab128b0    80  sub csp, jssp, #0x10 (16)
0xffff7ab128b4    84  stp fp, lr, [jssp, #-16]!
0xffff7ab128b8    88  movz fp, #0xa00000000
0xffff7ab128bc    92  sub csp, jssp, #0x8 (8)
0xffff7ab128c0    96  str fp, [jssp, #-8]!
0xffff7ab128c4   100  add fp, jssp, #0x8 (8)
0xffff7ab128c8   104  movz x2, #0x0
0xffff7ab128cc   108  mov x16, lr
0xffff7ab128d0   112  ldr x17, pc+64 (addr 0x0000ffff7ab12910)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab128d4   116  blr x17
0xffff7ab128d8   120  ldur cp, [fp, #-8]
0xffff7ab128dc   124  movz x0, #0x0
0xffff7ab128e0   128  movz x1, #0x4b48
0xffff7ab128e4   132  movk x1, #0xe4, lsl #16
0xffff7ab128e8   136  ldr x16, pc+48 (addr 0x0000ffff7ab12918)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab128ec   140  blr x16
0xffff7ab128f0   144  str x0, [jssp, #16]
0xffff7ab128f4   148  ldr x16, pc+44 (addr 0x0000ffff7ab12920)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab128f8   152  blr x16
0xffff7ab128fc   156  ldr lr, [jssp, #16]
0xffff7ab12900   160  ldp xzr, fp, [jssp], #24
0xffff7ab12904   164  b #-0x60 (addr 0xffff7ab128a4)
0xffff7ab12908   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab1290c   172  d63f03e0       constant
0xffff7ab12910   176  7ab06820       constant
0xffff7ab12914   180  0000ffff       constant
0xffff7ab12918   184  7ab06260       constant
0xffff7ab1291c   188  0000ffff       constant
0xffff7ab12920   192  7ab068e0       constant
0xffff7ab12924   196  0000ffff       constant
0xffff7ab12928   200  movz x16, #0x0
0xffff7ab1292c   204  sub csp, jssp, #0x10 (16)
0xffff7ab12930   208  stp fp, lr, [jssp, #-16]!
0xffff7ab12934   212  bl #+0x14 (addr 0xffff7ab12948)
0xffff7ab12938   216  movz x16, #0x8
0xffff7ab1293c   220  sub csp, jssp, #0x10 (16)
0xffff7ab12940   224  stp fp, lr, [jssp, #-16]!
0xffff7ab12944   228  bl #+0x4 (addr 0xffff7ab12948)
0xffff7ab12948   232  movz x17, #0xa00000000
0xffff7ab1294c   236  sub csp, jssp, #0x10 (16)
0xffff7ab12950   240  stp x17, cp, [jssp, #-16]!
0xffff7ab12954   244  add fp, jssp, #0x10 (16)
0xffff7ab12958   248  ldr x17, pc+24 (addr 0x0000ffff7ab12970)    ;; lazy deoptimization bailout 0
0xffff7ab1295c   252  add x17, x17, x16
0xffff7ab12960   256  br x17
0xffff7ab12964   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab12968   264  d63f03e0       constant
0xffff7ab1296c   268  d503201f       constant
0xffff7ab12970   272  7a906000       constant
0xffff7ab12974   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab128f0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab128d0  code target (STUB)  (0xffff7ab06820)
0xffff7ab128e8  code target (STUB)  (0xffff7ab06260)
0xffff7ab128f4  code target (STUB)  (0xffff7ab068e0)
0xffff7ab12908  constant pool (size 32)
0xffff7ab12958  runtime entry
0xffff7ab12964  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6330
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0xffff7ab12a00     0  mov x2, x1
0xffff7ab12a04     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab12af8)
0xffff7ab12a08     8  tbz w0, #0, #+0x34 (addr 0xffff7ab12a3c)
0xffff7ab12a0c    12  ldur x16, [x0, #-1]
0xffff7ab12a10    16  ldr x17, [x26, #120]
0xffff7ab12a14    20  cmp x16, x17
0xffff7ab12a18    24  b.ne #+0xc (addr 0xffff7ab12a24)
0xffff7ab12a1c    28  ldur d0, [x0, #7]
0xffff7ab12a20    32  b #+0x20 (addr 0xffff7ab12a40)
0xffff7ab12a24    36  ldr x16, [x26, #40]
0xffff7ab12a28    40  cmp x0, x16
0xffff7ab12a2c    44  b.ne #+0xdc (addr 0xffff7ab12b08)
0xffff7ab12a30    48  ldr x3, [x26, #928]
0xffff7ab12a34    52  ldur d0, [x3, #7]
0xffff7ab12a38    56  b #+0x8 (addr 0xffff7ab12a40)
0xffff7ab12a3c    60  scvtf d0, x0, #32
0xffff7ab12a40    64  scvtf d1, x2, #32
0xffff7ab12a44    68  fdiv d0, d1, d0
0xffff7ab12a48    72  movz x1, #0xe2c0
0xffff7ab12a4c    76  movk x1, #0x9ab, lsl #16
0xffff7ab12a50    80  ldp x2, x0, [x1]
0xffff7ab12a54    84  adds x16, x2, #0x10 (16)
0xffff7ab12a58    88  ccmp x16, x0, #nzCv, lo
0xffff7ab12a5c    92  b.hi #+0x20 (addr 0xffff7ab12a7c)
0xffff7ab12a60    96  str x16, [x1]
0xffff7ab12a64   100  ldr x1, [x26, #120]
0xffff7ab12a68   104  str x1, [x2]
0xffff7ab12a6c   108  orr x2, x2, #0x1
0xffff7ab12a70   112  stur d0, [x2, #7]
0xffff7ab12a74   116  mov x0, x2
0xffff7ab12a78   120  ret
0xffff7ab12a7c   124  sub csp, jssp, #0x10 (16)
0xffff7ab12a80   128  stp fp, lr, [jssp, #-16]!
0xffff7ab12a84   132  movz fp, #0xa00000000
0xffff7ab12a88   136  sub csp, jssp, #0x8 (8)
0xffff7ab12a8c   140  str fp, [jssp, #-8]!
0xffff7ab12a90   144  add fp, jssp, #0x8 (8)
0xffff7ab12a94   148  movz x2, #0x0
0xffff7ab12a98   152  mov x16, lr
0xffff7ab12a9c   156  ldr x17, pc+68 (addr 0x0000ffff7ab12ae0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab12aa0   160  blr x17
0xffff7ab12aa4   164  ldur cp, [fp, #-8]
0xffff7ab12aa8   168  movz x0, #0x0
0xffff7ab12aac   172  movz x1, #0x4b48
0xffff7ab12ab0   176  movk x1, #0xe4, lsl #16
0xffff7ab12ab4   180  ldr x16, pc+52 (addr 0x0000ffff7ab12ae8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab12ab8   184  blr x16
0xffff7ab12abc   188  str x0, [jssp, #16]
0xffff7ab12ac0   192  ldr x16, pc+48 (addr 0x0000ffff7ab12af0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab12ac4   196  blr x16
0xffff7ab12ac8   200  ldr lr, [jssp, #16]
0xffff7ab12acc   204  ldp xzr, fp, [jssp], #24
0xffff7ab12ad0   208  b #-0x60 (addr 0xffff7ab12a70)
0xffff7ab12ad4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab12ad8   216  d63f03e0       constant
0xffff7ab12adc   220  d503201f       constant
0xffff7ab12ae0   224  7ab06820       constant
0xffff7ab12ae4   228  0000ffff       constant
0xffff7ab12ae8   232  7ab06260       constant
0xffff7ab12aec   236  0000ffff       constant
0xffff7ab12af0   240  7ab068e0       constant
0xffff7ab12af4   244  0000ffff       constant
0xffff7ab12af8   248  movz x16, #0x0
0xffff7ab12afc   252  sub csp, jssp, #0x10 (16)
0xffff7ab12b00   256  stp fp, lr, [jssp, #-16]!
0xffff7ab12b04   260  bl #+0x14 (addr 0xffff7ab12b18)
0xffff7ab12b08   264  movz x16, #0x8
0xffff7ab12b0c   268  sub csp, jssp, #0x10 (16)
0xffff7ab12b10   272  stp fp, lr, [jssp, #-16]!
0xffff7ab12b14   276  bl #+0x4 (addr 0xffff7ab12b18)
0xffff7ab12b18   280  movz x17, #0xa00000000
0xffff7ab12b1c   284  sub csp, jssp, #0x10 (16)
0xffff7ab12b20   288  stp x17, cp, [jssp, #-16]!
0xffff7ab12b24   292  add fp, jssp, #0x10 (16)
0xffff7ab12b28   296  ldr x17, pc+24 (addr 0x0000ffff7ab12b40)    ;; lazy deoptimization bailout 0
0xffff7ab12b2c   300  add x17, x17, x16
0xffff7ab12b30   304  br x17
0xffff7ab12b34   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab12b38   312  d63f03e0       constant
0xffff7ab12b3c   316  d503201f       constant
0xffff7ab12b40   320  7a906000       constant
0xffff7ab12b44   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab12abc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab12a9c  code target (STUB)  (0xffff7ab06820)
0xffff7ab12ab4  code target (STUB)  (0xffff7ab06260)
0xffff7ab12ac0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab12ad4  constant pool (size 36)
0xffff7ab12b28  runtime entry
0xffff7ab12b34  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6330
type = NORMAL
name = BinaryOpICStub(DIV:Smi*Number->Number)
compiler = crankshaft
Instructions (size = 349)
0xffff7ab12a00     0  mov x2, x1
0xffff7ab12a04     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab12af8)
0xffff7ab12a08     8  tbz w0, #0, #+0x34 (addr 0xffff7ab12a3c)
0xffff7ab12a0c    12  ldur x16, [x0, #-1]
0xffff7ab12a10    16  ldr x17, [x26, #120]
0xffff7ab12a14    20  cmp x16, x17
0xffff7ab12a18    24  b.ne #+0xc (addr 0xffff7ab12a24)
0xffff7ab12a1c    28  ldur d0, [x0, #7]
0xffff7ab12a20    32  b #+0x20 (addr 0xffff7ab12a40)
0xffff7ab12a24    36  ldr x16, [x26, #40]
0xffff7ab12a28    40  cmp x0, x16
0xffff7ab12a2c    44  b.ne #+0xdc (addr 0xffff7ab12b08)
0xffff7ab12a30    48  ldr x3, [x26, #928]
0xffff7ab12a34    52  ldur d0, [x3, #7]
0xffff7ab12a38    56  b #+0x8 (addr 0xffff7ab12a40)
0xffff7ab12a3c    60  scvtf d0, x0, #32
0xffff7ab12a40    64  scvtf d1, x2, #32
0xffff7ab12a44    68  fdiv d0, d1, d0
0xffff7ab12a48    72  movz x1, #0xe2c0
0xffff7ab12a4c    76  movk x1, #0x9ab, lsl #16
0xffff7ab12a50    80  ldp x2, x0, [x1]
0xffff7ab12a54    84  adds x16, x2, #0x10 (16)
0xffff7ab12a58    88  ccmp x16, x0, #nzCv, lo
0xffff7ab12a5c    92  b.hi #+0x20 (addr 0xffff7ab12a7c)
0xffff7ab12a60    96  str x16, [x1]
0xffff7ab12a64   100  ldr x1, [x26, #120]
0xffff7ab12a68   104  str x1, [x2]
0xffff7ab12a6c   108  orr x2, x2, #0x1
0xffff7ab12a70   112  stur d0, [x2, #7]
0xffff7ab12a74   116  mov x0, x2
0xffff7ab12a78   120  ret
0xffff7ab12a7c   124  sub csp, jssp, #0x10 (16)
0xffff7ab12a80   128  stp fp, lr, [jssp, #-16]!
0xffff7ab12a84   132  movz fp, #0xa00000000
0xffff7ab12a88   136  sub csp, jssp, #0x8 (8)
0xffff7ab12a8c   140  str fp, [jssp, #-8]!
0xffff7ab12a90   144  add fp, jssp, #0x8 (8)
0xffff7ab12a94   148  movz x2, #0x0
0xffff7ab12a98   152  mov x16, lr
0xffff7ab12a9c   156  ldr x17, pc+68 (addr 0x0000ffff7ab12ae0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab12aa0   160  blr x17
0xffff7ab12aa4   164  ldur cp, [fp, #-8]
0xffff7ab12aa8   168  movz x0, #0x0
0xffff7ab12aac   172  movz x1, #0x4b48
0xffff7ab12ab0   176  movk x1, #0xe4, lsl #16
0xffff7ab12ab4   180  ldr x16, pc+52 (addr 0x0000ffff7ab12ae8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab12ab8   184  blr x16
0xffff7ab12abc   188  str x0, [jssp, #16]
0xffff7ab12ac0   192  ldr x16, pc+48 (addr 0x0000ffff7ab12af0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab12ac4   196  blr x16
0xffff7ab12ac8   200  ldr lr, [jssp, #16]
0xffff7ab12acc   204  ldp xzr, fp, [jssp], #24
0xffff7ab12ad0   208  b #-0x60 (addr 0xffff7ab12a70)
0xffff7ab12ad4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab12ad8   216  d63f03e0       constant
0xffff7ab12adc   220  d503201f       constant
0xffff7ab12ae0   224  7ab06820       constant
0xffff7ab12ae4   228  0000ffff       constant
0xffff7ab12ae8   232  7ab06260       constant
0xffff7ab12aec   236  0000ffff       constant
0xffff7ab12af0   240  7ab068e0       constant
0xffff7ab12af4   244  0000ffff       constant
0xffff7ab12af8   248  movz x16, #0x0
0xffff7ab12afc   252  sub csp, jssp, #0x10 (16)
0xffff7ab12b00   256  stp fp, lr, [jssp, #-16]!
0xffff7ab12b04   260  bl #+0x14 (addr 0xffff7ab12b18)
0xffff7ab12b08   264  movz x16, #0x8
0xffff7ab12b0c   268  sub csp, jssp, #0x10 (16)
0xffff7ab12b10   272  stp fp, lr, [jssp, #-16]!
0xffff7ab12b14   276  bl #+0x4 (addr 0xffff7ab12b18)
0xffff7ab12b18   280  movz x17, #0xa00000000
0xffff7ab12b1c   284  sub csp, jssp, #0x10 (16)
0xffff7ab12b20   288  stp x17, cp, [jssp, #-16]!
0xffff7ab12b24   292  add fp, jssp, #0x10 (16)
0xffff7ab12b28   296  ldr x17, pc+24 (addr 0x0000ffff7ab12b40)    ;; lazy deoptimization bailout 0
0xffff7ab12b2c   300  add x17, x17, x16
0xffff7ab12b30   304  br x17
0xffff7ab12b34   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab12b38   312  d63f03e0       constant
0xffff7ab12b3c   316  d503201f       constant
0xffff7ab12b40   320  7a906000       constant
0xffff7ab12b44   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab12abc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab12a9c  code target (STUB)  (0xffff7ab06820)
0xffff7ab12ab4  code target (STUB)  (0xffff7ab06260)
0xffff7ab12ac0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab12ad4  constant pool (size 36)
0xffff7ab12b28  runtime entry
0xffff7ab12b34  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2234
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0xffff7ab12bc0     0  mov x2, x1
0xffff7ab12bc4     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab12c88)
0xffff7ab12bc8     8  mov x3, x0
0xffff7ab12bcc    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab12c98)
0xffff7ab12bd0    16  scvtf d0, x2, #32
0xffff7ab12bd4    20  scvtf d1, x3, #32
0xffff7ab12bd8    24  fdiv d0, d0, d1
0xffff7ab12bdc    28  movz x1, #0xe2c0
0xffff7ab12be0    32  movk x1, #0x9ab, lsl #16
0xffff7ab12be4    36  ldp x2, x0, [x1]
0xffff7ab12be8    40  adds x16, x2, #0x10 (16)
0xffff7ab12bec    44  ccmp x16, x0, #nzCv, lo
0xffff7ab12bf0    48  b.hi #+0x20 (addr 0xffff7ab12c10)
0xffff7ab12bf4    52  str x16, [x1]
0xffff7ab12bf8    56  ldr x1, [x26, #120]
0xffff7ab12bfc    60  str x1, [x2]
0xffff7ab12c00    64  orr x2, x2, #0x1
0xffff7ab12c04    68  stur d0, [x2, #7]
0xffff7ab12c08    72  mov x0, x2
0xffff7ab12c0c    76  ret
0xffff7ab12c10    80  sub csp, jssp, #0x10 (16)
0xffff7ab12c14    84  stp fp, lr, [jssp, #-16]!
0xffff7ab12c18    88  movz fp, #0xa00000000
0xffff7ab12c1c    92  sub csp, jssp, #0x8 (8)
0xffff7ab12c20    96  str fp, [jssp, #-8]!
0xffff7ab12c24   100  add fp, jssp, #0x8 (8)
0xffff7ab12c28   104  movz x2, #0x0
0xffff7ab12c2c   108  mov x16, lr
0xffff7ab12c30   112  ldr x17, pc+64 (addr 0x0000ffff7ab12c70)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab12c34   116  blr x17
0xffff7ab12c38   120  ldur cp, [fp, #-8]
0xffff7ab12c3c   124  movz x0, #0x0
0xffff7ab12c40   128  movz x1, #0x4b48
0xffff7ab12c44   132  movk x1, #0xe4, lsl #16
0xffff7ab12c48   136  ldr x16, pc+48 (addr 0x0000ffff7ab12c78)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab12c4c   140  blr x16
0xffff7ab12c50   144  str x0, [jssp, #16]
0xffff7ab12c54   148  ldr x16, pc+44 (addr 0x0000ffff7ab12c80)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab12c58   152  blr x16
0xffff7ab12c5c   156  ldr lr, [jssp, #16]
0xffff7ab12c60   160  ldp xzr, fp, [jssp], #24
0xffff7ab12c64   164  b #-0x60 (addr 0xffff7ab12c04)
0xffff7ab12c68   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab12c6c   172  d63f03e0       constant
0xffff7ab12c70   176  7ab06820       constant
0xffff7ab12c74   180  0000ffff       constant
0xffff7ab12c78   184  7ab06260       constant
0xffff7ab12c7c   188  0000ffff       constant
0xffff7ab12c80   192  7ab068e0       constant
0xffff7ab12c84   196  0000ffff       constant
0xffff7ab12c88   200  movz x16, #0x0
0xffff7ab12c8c   204  sub csp, jssp, #0x10 (16)
0xffff7ab12c90   208  stp fp, lr, [jssp, #-16]!
0xffff7ab12c94   212  bl #+0x14 (addr 0xffff7ab12ca8)
0xffff7ab12c98   216  movz x16, #0x8
0xffff7ab12c9c   220  sub csp, jssp, #0x10 (16)
0xffff7ab12ca0   224  stp fp, lr, [jssp, #-16]!
0xffff7ab12ca4   228  bl #+0x4 (addr 0xffff7ab12ca8)
0xffff7ab12ca8   232  movz x17, #0xa00000000
0xffff7ab12cac   236  sub csp, jssp, #0x10 (16)
0xffff7ab12cb0   240  stp x17, cp, [jssp, #-16]!
0xffff7ab12cb4   244  add fp, jssp, #0x10 (16)
0xffff7ab12cb8   248  ldr x17, pc+24 (addr 0x0000ffff7ab12cd0)    ;; lazy deoptimization bailout 0
0xffff7ab12cbc   252  add x17, x17, x16
0xffff7ab12cc0   256  br x17
0xffff7ab12cc4   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab12cc8   264  d63f03e0       constant
0xffff7ab12ccc   268  d503201f       constant
0xffff7ab12cd0   272  7a906000       constant
0xffff7ab12cd4   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab12c50   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab12c30  code target (STUB)  (0xffff7ab06820)
0xffff7ab12c48  code target (STUB)  (0xffff7ab06260)
0xffff7ab12c54  code target (STUB)  (0xffff7ab068e0)
0xffff7ab12c68  constant pool (size 32)
0xffff7ab12cb8  runtime entry
0xffff7ab12cc4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2234
type = NORMAL
name = BinaryOpICStub(DIV:Smi*Smi->Number)
compiler = crankshaft
Instructions (size = 301)
0xffff7ab12bc0     0  mov x2, x1
0xffff7ab12bc4     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab12c88)
0xffff7ab12bc8     8  mov x3, x0
0xffff7ab12bcc    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab12c98)
0xffff7ab12bd0    16  scvtf d0, x2, #32
0xffff7ab12bd4    20  scvtf d1, x3, #32
0xffff7ab12bd8    24  fdiv d0, d0, d1
0xffff7ab12bdc    28  movz x1, #0xe2c0
0xffff7ab12be0    32  movk x1, #0x9ab, lsl #16
0xffff7ab12be4    36  ldp x2, x0, [x1]
0xffff7ab12be8    40  adds x16, x2, #0x10 (16)
0xffff7ab12bec    44  ccmp x16, x0, #nzCv, lo
0xffff7ab12bf0    48  b.hi #+0x20 (addr 0xffff7ab12c10)
0xffff7ab12bf4    52  str x16, [x1]
0xffff7ab12bf8    56  ldr x1, [x26, #120]
0xffff7ab12bfc    60  str x1, [x2]
0xffff7ab12c00    64  orr x2, x2, #0x1
0xffff7ab12c04    68  stur d0, [x2, #7]
0xffff7ab12c08    72  mov x0, x2
0xffff7ab12c0c    76  ret
0xffff7ab12c10    80  sub csp, jssp, #0x10 (16)
0xffff7ab12c14    84  stp fp, lr, [jssp, #-16]!
0xffff7ab12c18    88  movz fp, #0xa00000000
0xffff7ab12c1c    92  sub csp, jssp, #0x8 (8)
0xffff7ab12c20    96  str fp, [jssp, #-8]!
0xffff7ab12c24   100  add fp, jssp, #0x8 (8)
0xffff7ab12c28   104  movz x2, #0x0
0xffff7ab12c2c   108  mov x16, lr
0xffff7ab12c30   112  ldr x17, pc+64 (addr 0x0000ffff7ab12c70)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab12c34   116  blr x17
0xffff7ab12c38   120  ldur cp, [fp, #-8]
0xffff7ab12c3c   124  movz x0, #0x0
0xffff7ab12c40   128  movz x1, #0x4b48
0xffff7ab12c44   132  movk x1, #0xe4, lsl #16
0xffff7ab12c48   136  ldr x16, pc+48 (addr 0x0000ffff7ab12c78)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab12c4c   140  blr x16
0xffff7ab12c50   144  str x0, [jssp, #16]
0xffff7ab12c54   148  ldr x16, pc+44 (addr 0x0000ffff7ab12c80)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab12c58   152  blr x16
0xffff7ab12c5c   156  ldr lr, [jssp, #16]
0xffff7ab12c60   160  ldp xzr, fp, [jssp], #24
0xffff7ab12c64   164  b #-0x60 (addr 0xffff7ab12c04)
0xffff7ab12c68   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab12c6c   172  d63f03e0       constant
0xffff7ab12c70   176  7ab06820       constant
0xffff7ab12c74   180  0000ffff       constant
0xffff7ab12c78   184  7ab06260       constant
0xffff7ab12c7c   188  0000ffff       constant
0xffff7ab12c80   192  7ab068e0       constant
0xffff7ab12c84   196  0000ffff       constant
0xffff7ab12c88   200  movz x16, #0x0
0xffff7ab12c8c   204  sub csp, jssp, #0x10 (16)
0xffff7ab12c90   208  stp fp, lr, [jssp, #-16]!
0xffff7ab12c94   212  bl #+0x14 (addr 0xffff7ab12ca8)
0xffff7ab12c98   216  movz x16, #0x8
0xffff7ab12c9c   220  sub csp, jssp, #0x10 (16)
0xffff7ab12ca0   224  stp fp, lr, [jssp, #-16]!
0xffff7ab12ca4   228  bl #+0x4 (addr 0xffff7ab12ca8)
0xffff7ab12ca8   232  movz x17, #0xa00000000
0xffff7ab12cac   236  sub csp, jssp, #0x10 (16)
0xffff7ab12cb0   240  stp x17, cp, [jssp, #-16]!
0xffff7ab12cb4   244  add fp, jssp, #0x10 (16)
0xffff7ab12cb8   248  ldr x17, pc+24 (addr 0x0000ffff7ab12cd0)    ;; lazy deoptimization bailout 0
0xffff7ab12cbc   252  add x17, x17, x16
0xffff7ab12cc0   256  br x17
0xffff7ab12cc4   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab12cc8   264  d63f03e0       constant
0xffff7ab12ccc   268  d503201f       constant
0xffff7ab12cd0   272  7a906000       constant
0xffff7ab12cd4   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab12c50   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab12c30  code target (STUB)  (0xffff7ab06820)
0xffff7ab12c48  code target (STUB)  (0xffff7ab06260)
0xffff7ab12c54  code target (STUB)  (0xffff7ab068e0)
0xffff7ab12c68  constant pool (size 32)
0xffff7ab12cb8  runtime entry
0xffff7ab12cc4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2202
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 176)
0xffff7ab12d60     0  mov x2, x1
0xffff7ab12d64     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab12da8)
0xffff7ab12d68     8  mov x3, x0
0xffff7ab12d6c    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab12db8)
0xffff7ab12d70    16  asr x2, x2, #32
0xffff7ab12d74    20  asr x3, x3, #32
0xffff7ab12d78    24  sdiv w5, w2, w3
0xffff7ab12d7c    28  cbz w3, #+0x4c (addr 0xffff7ab12dc8)
0xffff7ab12d80    32  cmp w3, #0x0 (0)
0xffff7ab12d84    36  ccmp w2, #0, #nzcv, mi
0xffff7ab12d88    40  b.eq #+0x40 (addr 0xffff7ab12dc8)
0xffff7ab12d8c    44  cmp w2, #0x1 (1)
0xffff7ab12d90    48  ccmn w3, #1, #nzcv, vs
0xffff7ab12d94    52  b.eq #+0x34 (addr 0xffff7ab12dc8)
0xffff7ab12d98    56  msub w4, w5, w3, w2
0xffff7ab12d9c    60  cbnz w4, #+0x2c (addr 0xffff7ab12dc8)
0xffff7ab12da0    64  lsl x0, x5, #32
0xffff7ab12da4    68  ret
0xffff7ab12da8    72  movz x16, #0x0
0xffff7ab12dac    76  sub csp, jssp, #0x10 (16)
0xffff7ab12db0    80  stp fp, lr, [jssp, #-16]!
0xffff7ab12db4    84  bl #+0x24 (addr 0xffff7ab12dd8)
0xffff7ab12db8    88  movz x16, #0x8
0xffff7ab12dbc    92  sub csp, jssp, #0x10 (16)
0xffff7ab12dc0    96  stp fp, lr, [jssp, #-16]!
0xffff7ab12dc4   100  bl #+0x14 (addr 0xffff7ab12dd8)
0xffff7ab12dc8   104  movz x16, #0x10
0xffff7ab12dcc   108  sub csp, jssp, #0x10 (16)
0xffff7ab12dd0   112  stp fp, lr, [jssp, #-16]!
0xffff7ab12dd4   116  bl #+0x4 (addr 0xffff7ab12dd8)
0xffff7ab12dd8   120  movz x17, #0xa00000000
0xffff7ab12ddc   124  sub csp, jssp, #0x10 (16)
0xffff7ab12de0   128  stp x17, cp, [jssp, #-16]!
0xffff7ab12de4   132  add fp, jssp, #0x10 (16)
0xffff7ab12de8   136  ldr x17, pc+24 (addr 0x0000ffff7ab12e00)    ;; lazy deoptimization bailout 0
0xffff7ab12dec   140  add x17, x17, x16
0xffff7ab12df0   144  br x17
0xffff7ab12df4   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab12df8   152  d63f03e0       constant
0xffff7ab12dfc   156  d503201f       constant
0xffff7ab12e00   160  7a906000       constant
0xffff7ab12e04   164  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab12de8  runtime entry
0xffff7ab12df4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2202
type = NORMAL
name = BinaryOpICStub(DIV:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 176)
0xffff7ab12d60     0  mov x2, x1
0xffff7ab12d64     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab12da8)
0xffff7ab12d68     8  mov x3, x0
0xffff7ab12d6c    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab12db8)
0xffff7ab12d70    16  asr x2, x2, #32
0xffff7ab12d74    20  asr x3, x3, #32
0xffff7ab12d78    24  sdiv w5, w2, w3
0xffff7ab12d7c    28  cbz w3, #+0x4c (addr 0xffff7ab12dc8)
0xffff7ab12d80    32  cmp w3, #0x0 (0)
0xffff7ab12d84    36  ccmp w2, #0, #nzcv, mi
0xffff7ab12d88    40  b.eq #+0x40 (addr 0xffff7ab12dc8)
0xffff7ab12d8c    44  cmp w2, #0x1 (1)
0xffff7ab12d90    48  ccmn w3, #1, #nzcv, vs
0xffff7ab12d94    52  b.eq #+0x34 (addr 0xffff7ab12dc8)
0xffff7ab12d98    56  msub w4, w5, w3, w2
0xffff7ab12d9c    60  cbnz w4, #+0x2c (addr 0xffff7ab12dc8)
0xffff7ab12da0    64  lsl x0, x5, #32
0xffff7ab12da4    68  ret
0xffff7ab12da8    72  movz x16, #0x0
0xffff7ab12dac    76  sub csp, jssp, #0x10 (16)
0xffff7ab12db0    80  stp fp, lr, [jssp, #-16]!
0xffff7ab12db4    84  bl #+0x24 (addr 0xffff7ab12dd8)
0xffff7ab12db8    88  movz x16, #0x8
0xffff7ab12dbc    92  sub csp, jssp, #0x10 (16)
0xffff7ab12dc0    96  stp fp, lr, [jssp, #-16]!
0xffff7ab12dc4   100  bl #+0x14 (addr 0xffff7ab12dd8)
0xffff7ab12dc8   104  movz x16, #0x10
0xffff7ab12dcc   108  sub csp, jssp, #0x10 (16)
0xffff7ab12dd0   112  stp fp, lr, [jssp, #-16]!
0xffff7ab12dd4   116  bl #+0x4 (addr 0xffff7ab12dd8)
0xffff7ab12dd8   120  movz x17, #0xa00000000
0xffff7ab12ddc   124  sub csp, jssp, #0x10 (16)
0xffff7ab12de0   128  stp x17, cp, [jssp, #-16]!
0xffff7ab12de4   132  add fp, jssp, #0x10 (16)
0xffff7ab12de8   136  ldr x17, pc+24 (addr 0x0000ffff7ab12e00)    ;; lazy deoptimization bailout 0
0xffff7ab12dec   140  add x17, x17, x16
0xffff7ab12df0   144  br x17
0xffff7ab12df4   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab12df8   152  d63f03e0       constant
0xffff7ab12dfc   156  d503201f       constant
0xffff7ab12e00   160  7a906000       constant
0xffff7ab12e04   164  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab12de8  runtime entry
0xffff7ab12df4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2491
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0xffff7ab12e80     0  movz x16, #0xa00000000
0xffff7ab12e84     4  sub csp, jssp, #0x10 (16)
0xffff7ab12e88     8  stp fp, lr, [jssp, #-16]!
0xffff7ab12e8c    12  mov fp, jssp
0xffff7ab12e90    16  sub csp, jssp, #0x20 (32)
0xffff7ab12e94    20  sub jssp, jssp, #0x20 (32)
0xffff7ab12e98    24  stur x16, [fp, #-8]
0xffff7ab12e9c    28  str x1, [jssp, #16]
0xffff7ab12ea0    32  str x0, [jssp, #8]
0xffff7ab12ea4    36  str cp, [jssp]
0xffff7ab12ea8    40  mov x3, cp
0xffff7ab12eac    44  mov x2, x0
0xffff7ab12eb0    48  tbnz w2, #0, #+0xe8 (addr 0xffff7ab12f98)
0xffff7ab12eb4    52  tbz w1, #0, #+0x34 (addr 0xffff7ab12ee8)
0xffff7ab12eb8    56  ldur x16, [x1, #-1]
0xffff7ab12ebc    60  ldr x17, [x26, #120]
0xffff7ab12ec0    64  cmp x16, x17
0xffff7ab12ec4    68  b.ne #+0xc (addr 0xffff7ab12ed0)
0xffff7ab12ec8    72  ldur d0, [x1, #7]
0xffff7ab12ecc    76  b #+0x20 (addr 0xffff7ab12eec)
0xffff7ab12ed0    80  ldr x16, [x26, #40]
0xffff7ab12ed4    84  cmp x1, x16
0xffff7ab12ed8    88  b.ne #+0xc8 (addr 0xffff7ab12fa0)
0xffff7ab12edc    92  ldr x4, [x26, #928]
0xffff7ab12ee0    96  ldur d0, [x4, #7]
0xffff7ab12ee4   100  b #+0x8 (addr 0xffff7ab12eec)
0xffff7ab12ee8   104  scvtf d0, x1, #32
0xffff7ab12eec   108  scvtf d1, x2, #32
0xffff7ab12ef0   112  movz x16, #0x4c40
0xffff7ab12ef4   116  movk x16, #0x9c, lsl #16
0xffff7ab12ef8   120  and csp, jssp, #0xfffffffffffffff0
0xffff7ab12efc   124  blr x16
0xffff7ab12f00   128  movz x1, #0xe2c0
0xffff7ab12f04   132  movk x1, #0x9ab, lsl #16
0xffff7ab12f08   136  ldp x2, x0, [x1]
0xffff7ab12f0c   140  adds x16, x2, #0x10 (16)
0xffff7ab12f10   144  ccmp x16, x0, #nzCv, lo
0xffff7ab12f14   148  b.hi #+0x2c (addr 0xffff7ab12f40)
0xffff7ab12f18   152  str x16, [x1]
0xffff7ab12f1c   156  ldr x1, [x26, #120]
0xffff7ab12f20   160  str x1, [x2]
0xffff7ab12f24   164  orr x2, x2, #0x1
0xffff7ab12f28   168  stur d0, [x2, #7]
0xffff7ab12f2c   172  mov x0, x2
0xffff7ab12f30   176  ldr cp, [jssp]
0xffff7ab12f34   180  mov jssp, fp
0xffff7ab12f38   184  ldp fp, lr, [jssp], #16
0xffff7ab12f3c   188  ret
0xffff7ab12f40   192  movz x2, #0x0
0xffff7ab12f44   196  mov x16, lr
0xffff7ab12f48   200  ldr x17, pc+56 (addr 0x0000ffff7ab12f80)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab12f4c   204  blr x17
0xffff7ab12f50   208  ldur cp, [fp, #-8]
0xffff7ab12f54   212  movz x0, #0x0
0xffff7ab12f58   216  movz x1, #0x4b48
0xffff7ab12f5c   220  movk x1, #0xe4, lsl #16
0xffff7ab12f60   224  ldr x16, pc+40 (addr 0x0000ffff7ab12f88)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab12f64   228  blr x16
0xffff7ab12f68   232  str x0, [jssp, #16]
0xffff7ab12f6c   236  ldr x16, pc+36 (addr 0x0000ffff7ab12f90)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab12f70   240  blr x16
0xffff7ab12f74   244  b #-0x4c (addr 0xffff7ab12f28)
0xffff7ab12f78   248  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab12f7c   252  d63f03e0       constant
0xffff7ab12f80   256  7ab06820       constant
0xffff7ab12f84   260  0000ffff       constant
0xffff7ab12f88   264  7ab06260       constant
0xffff7ab12f8c   268  0000ffff       constant
0xffff7ab12f90   272  7ab068e0       constant
0xffff7ab12f94   276  0000ffff       constant
0xffff7ab12f98   280  movz x16, #0x0
0xffff7ab12f9c   284  bl #+0xc (addr 0xffff7ab12fa8)
0xffff7ab12fa0   288  movz x16, #0x8
0xffff7ab12fa4   292  bl #+0x4 (addr 0xffff7ab12fa8)
0xffff7ab12fa8   296  ldr x17, pc+24 (addr 0x0000ffff7ab12fc0)    ;; lazy deoptimization bailout 0
0xffff7ab12fac   300  add x17, x17, x16
0xffff7ab12fb0   304  br x17
0xffff7ab12fb4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab12fb8   312  d63f03e0       constant
0xffff7ab12fbc   316  d503201f       constant
0xffff7ab12fc0   320  7a906000       constant
0xffff7ab12fc4   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab12f68   232  100000 | x2 (sp -> fp)  <none>

RelocInfo (size = 19)
0xffff7ab12f48  code target (STUB)  (0xffff7ab06820)
0xffff7ab12f60  code target (STUB)  (0xffff7ab06260)
0xffff7ab12f6c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab12f78  constant pool (size 32)
0xffff7ab12fa8  runtime entry
0xffff7ab12fb4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2491
type = NORMAL
name = BinaryOpICStub(MOD:Number*Smi->Number)
compiler = crankshaft
Instructions (size = 349)
0xffff7ab12e80     0  movz x16, #0xa00000000
0xffff7ab12e84     4  sub csp, jssp, #0x10 (16)
0xffff7ab12e88     8  stp fp, lr, [jssp, #-16]!
0xffff7ab12e8c    12  mov fp, jssp
0xffff7ab12e90    16  sub csp, jssp, #0x20 (32)
0xffff7ab12e94    20  sub jssp, jssp, #0x20 (32)
0xffff7ab12e98    24  stur x16, [fp, #-8]
0xffff7ab12e9c    28  str x1, [jssp, #16]
0xffff7ab12ea0    32  str x0, [jssp, #8]
0xffff7ab12ea4    36  str cp, [jssp]
0xffff7ab12ea8    40  mov x3, cp
0xffff7ab12eac    44  mov x2, x0
0xffff7ab12eb0    48  tbnz w2, #0, #+0xe8 (addr 0xffff7ab12f98)
0xffff7ab12eb4    52  tbz w1, #0, #+0x34 (addr 0xffff7ab12ee8)
0xffff7ab12eb8    56  ldur x16, [x1, #-1]
0xffff7ab12ebc    60  ldr x17, [x26, #120]
0xffff7ab12ec0    64  cmp x16, x17
0xffff7ab12ec4    68  b.ne #+0xc (addr 0xffff7ab12ed0)
0xffff7ab12ec8    72  ldur d0, [x1, #7]
0xffff7ab12ecc    76  b #+0x20 (addr 0xffff7ab12eec)
0xffff7ab12ed0    80  ldr x16, [x26, #40]
0xffff7ab12ed4    84  cmp x1, x16
0xffff7ab12ed8    88  b.ne #+0xc8 (addr 0xffff7ab12fa0)
0xffff7ab12edc    92  ldr x4, [x26, #928]
0xffff7ab12ee0    96  ldur d0, [x4, #7]
0xffff7ab12ee4   100  b #+0x8 (addr 0xffff7ab12eec)
0xffff7ab12ee8   104  scvtf d0, x1, #32
0xffff7ab12eec   108  scvtf d1, x2, #32
0xffff7ab12ef0   112  movz x16, #0x4c40
0xffff7ab12ef4   116  movk x16, #0x9c, lsl #16
0xffff7ab12ef8   120  and csp, jssp, #0xfffffffffffffff0
0xffff7ab12efc   124  blr x16
0xffff7ab12f00   128  movz x1, #0xe2c0
0xffff7ab12f04   132  movk x1, #0x9ab, lsl #16
0xffff7ab12f08   136  ldp x2, x0, [x1]
0xffff7ab12f0c   140  adds x16, x2, #0x10 (16)
0xffff7ab12f10   144  ccmp x16, x0, #nzCv, lo
0xffff7ab12f14   148  b.hi #+0x2c (addr 0xffff7ab12f40)
0xffff7ab12f18   152  str x16, [x1]
0xffff7ab12f1c   156  ldr x1, [x26, #120]
0xffff7ab12f20   160  str x1, [x2]
0xffff7ab12f24   164  orr x2, x2, #0x1
0xffff7ab12f28   168  stur d0, [x2, #7]
0xffff7ab12f2c   172  mov x0, x2
0xffff7ab12f30   176  ldr cp, [jssp]
0xffff7ab12f34   180  mov jssp, fp
0xffff7ab12f38   184  ldp fp, lr, [jssp], #16
0xffff7ab12f3c   188  ret
0xffff7ab12f40   192  movz x2, #0x0
0xffff7ab12f44   196  mov x16, lr
0xffff7ab12f48   200  ldr x17, pc+56 (addr 0x0000ffff7ab12f80)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab12f4c   204  blr x17
0xffff7ab12f50   208  ldur cp, [fp, #-8]
0xffff7ab12f54   212  movz x0, #0x0
0xffff7ab12f58   216  movz x1, #0x4b48
0xffff7ab12f5c   220  movk x1, #0xe4, lsl #16
0xffff7ab12f60   224  ldr x16, pc+40 (addr 0x0000ffff7ab12f88)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab12f64   228  blr x16
0xffff7ab12f68   232  str x0, [jssp, #16]
0xffff7ab12f6c   236  ldr x16, pc+36 (addr 0x0000ffff7ab12f90)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab12f70   240  blr x16
0xffff7ab12f74   244  b #-0x4c (addr 0xffff7ab12f28)
0xffff7ab12f78   248  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab12f7c   252  d63f03e0       constant
0xffff7ab12f80   256  7ab06820       constant
0xffff7ab12f84   260  0000ffff       constant
0xffff7ab12f88   264  7ab06260       constant
0xffff7ab12f8c   268  0000ffff       constant
0xffff7ab12f90   272  7ab068e0       constant
0xffff7ab12f94   276  0000ffff       constant
0xffff7ab12f98   280  movz x16, #0x0
0xffff7ab12f9c   284  bl #+0xc (addr 0xffff7ab12fa8)
0xffff7ab12fa0   288  movz x16, #0x8
0xffff7ab12fa4   292  bl #+0x4 (addr 0xffff7ab12fa8)
0xffff7ab12fa8   296  ldr x17, pc+24 (addr 0x0000ffff7ab12fc0)    ;; lazy deoptimization bailout 0
0xffff7ab12fac   300  add x17, x17, x16
0xffff7ab12fb0   304  br x17
0xffff7ab12fb4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab12fb8   312  d63f03e0       constant
0xffff7ab12fbc   316  d503201f       constant
0xffff7ab12fc0   320  7a906000       constant
0xffff7ab12fc4   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab12f68   232  100000 | x2 (sp -> fp)  <none>

RelocInfo (size = 19)
0xffff7ab12f48  code target (STUB)  (0xffff7ab06820)
0xffff7ab12f60  code target (STUB)  (0xffff7ab06260)
0xffff7ab12f6c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab12f78  constant pool (size 32)
0xffff7ab12fa8  runtime entry
0xffff7ab12fb4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2203
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 152)
0xffff7ab13040     0  mov x2, x1
0xffff7ab13044     4  tbnz w2, #0, #+0x30 (addr 0xffff7ab13074)
0xffff7ab13048     8  mov x3, x0
0xffff7ab1304c    12  tbnz w3, #0, #+0x38 (addr 0xffff7ab13084)
0xffff7ab13050    16  asr x2, x2, #32
0xffff7ab13054    20  asr x3, x3, #32
0xffff7ab13058    24  sdiv w4, w2, w3
0xffff7ab1305c    28  cbz w3, #+0x38 (addr 0xffff7ab13094)
0xffff7ab13060    32  msub w4, w4, w3, w2
0xffff7ab13064    36  cbnz w4, #+0x8 (addr 0xffff7ab1306c)
0xffff7ab13068    40  tbnz w2, #31, #+0x2c (addr 0xffff7ab13094)
0xffff7ab1306c    44  lsl x0, x4, #32
0xffff7ab13070    48  ret
0xffff7ab13074    52  movz x16, #0x0
0xffff7ab13078    56  sub csp, jssp, #0x10 (16)
0xffff7ab1307c    60  stp fp, lr, [jssp, #-16]!
0xffff7ab13080    64  bl #+0x24 (addr 0xffff7ab130a4)
0xffff7ab13084    68  movz x16, #0x8
0xffff7ab13088    72  sub csp, jssp, #0x10 (16)
0xffff7ab1308c    76  stp fp, lr, [jssp, #-16]!
0xffff7ab13090    80  bl #+0x14 (addr 0xffff7ab130a4)
0xffff7ab13094    84  movz x16, #0x10
0xffff7ab13098    88  sub csp, jssp, #0x10 (16)
0xffff7ab1309c    92  stp fp, lr, [jssp, #-16]!
0xffff7ab130a0    96  bl #+0x4 (addr 0xffff7ab130a4)
0xffff7ab130a4   100  movz x17, #0xa00000000
0xffff7ab130a8   104  sub csp, jssp, #0x10 (16)
0xffff7ab130ac   108  stp x17, cp, [jssp, #-16]!
0xffff7ab130b0   112  add fp, jssp, #0x10 (16)
0xffff7ab130b4   116  ldr x17, pc+20 (addr 0x0000ffff7ab130c8)    ;; lazy deoptimization bailout 0
0xffff7ab130b8   120  add x17, x17, x16
0xffff7ab130bc   124  br x17
0xffff7ab130c0   128  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab130c4   132  d63f03e0       constant
0xffff7ab130c8   136  7a906000       constant
0xffff7ab130cc   140  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab130b4  runtime entry
0xffff7ab130c0  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2203
type = NORMAL
name = BinaryOpICStub(MOD:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 152)
0xffff7ab13040     0  mov x2, x1
0xffff7ab13044     4  tbnz w2, #0, #+0x30 (addr 0xffff7ab13074)
0xffff7ab13048     8  mov x3, x0
0xffff7ab1304c    12  tbnz w3, #0, #+0x38 (addr 0xffff7ab13084)
0xffff7ab13050    16  asr x2, x2, #32
0xffff7ab13054    20  asr x3, x3, #32
0xffff7ab13058    24  sdiv w4, w2, w3
0xffff7ab1305c    28  cbz w3, #+0x38 (addr 0xffff7ab13094)
0xffff7ab13060    32  msub w4, w4, w3, w2
0xffff7ab13064    36  cbnz w4, #+0x8 (addr 0xffff7ab1306c)
0xffff7ab13068    40  tbnz w2, #31, #+0x2c (addr 0xffff7ab13094)
0xffff7ab1306c    44  lsl x0, x4, #32
0xffff7ab13070    48  ret
0xffff7ab13074    52  movz x16, #0x0
0xffff7ab13078    56  sub csp, jssp, #0x10 (16)
0xffff7ab1307c    60  stp fp, lr, [jssp, #-16]!
0xffff7ab13080    64  bl #+0x24 (addr 0xffff7ab130a4)
0xffff7ab13084    68  movz x16, #0x8
0xffff7ab13088    72  sub csp, jssp, #0x10 (16)
0xffff7ab1308c    76  stp fp, lr, [jssp, #-16]!
0xffff7ab13090    80  bl #+0x14 (addr 0xffff7ab130a4)
0xffff7ab13094    84  movz x16, #0x10
0xffff7ab13098    88  sub csp, jssp, #0x10 (16)
0xffff7ab1309c    92  stp fp, lr, [jssp, #-16]!
0xffff7ab130a0    96  bl #+0x4 (addr 0xffff7ab130a4)
0xffff7ab130a4   100  movz x17, #0xa00000000
0xffff7ab130a8   104  sub csp, jssp, #0x10 (16)
0xffff7ab130ac   108  stp x17, cp, [jssp, #-16]!
0xffff7ab130b0   112  add fp, jssp, #0x10 (16)
0xffff7ab130b4   116  ldr x17, pc+20 (addr 0x0000ffff7ab130c8)    ;; lazy deoptimization bailout 0
0xffff7ab130b8   120  add x17, x17, x16
0xffff7ab130bc   124  br x17
0xffff7ab130c0   128  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab130c4   132  d63f03e0       constant
0xffff7ab130c8   136  7a906000       constant
0xffff7ab130cc   140  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab130b4  runtime entry
0xffff7ab130c0  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4393
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 160)
0xffff7ab13140     0  mov x2, x1
0xffff7ab13144     4  tbnz w2, #0, #+0x34 (addr 0xffff7ab13178)
0xffff7ab13148     8  mov x3, x0
0xffff7ab1314c    12  tbnz w3, #0, #+0x3c (addr 0xffff7ab13188)
0xffff7ab13150    16  cmp x3, #0x0 (0)
0xffff7ab13154    20  ccmp x2, #0, #nZcv, ne
0xffff7ab13158    24  ccmn x3, x2, #nzcv, eq
0xffff7ab1315c    28  b.mi #+0x3c (addr 0xffff7ab13198)
0xffff7ab13160    32  smulh x2, x3, x2
0xffff7ab13164    36  cmp x2, w2, sxtw
0xffff7ab13168    40  lsl x2, x2, #32
0xffff7ab1316c    44  b.ne #+0x2c (addr 0xffff7ab13198)
0xffff7ab13170    48  mov x0, x2
0xffff7ab13174    52  ret
0xffff7ab13178    56  movz x16, #0x0
0xffff7ab1317c    60  sub csp, jssp, #0x10 (16)
0xffff7ab13180    64  stp fp, lr, [jssp, #-16]!
0xffff7ab13184    68  bl #+0x24 (addr 0xffff7ab131a8)
0xffff7ab13188    72  movz x16, #0x8
0xffff7ab1318c    76  sub csp, jssp, #0x10 (16)
0xffff7ab13190    80  stp fp, lr, [jssp, #-16]!
0xffff7ab13194    84  bl #+0x14 (addr 0xffff7ab131a8)
0xffff7ab13198    88  movz x16, #0x10
0xffff7ab1319c    92  sub csp, jssp, #0x10 (16)
0xffff7ab131a0    96  stp fp, lr, [jssp, #-16]!
0xffff7ab131a4   100  bl #+0x4 (addr 0xffff7ab131a8)
0xffff7ab131a8   104  movz x17, #0xa00000000
0xffff7ab131ac   108  sub csp, jssp, #0x10 (16)
0xffff7ab131b0   112  stp x17, cp, [jssp, #-16]!
0xffff7ab131b4   116  add fp, jssp, #0x10 (16)
0xffff7ab131b8   120  ldr x17, pc+24 (addr 0x0000ffff7ab131d0)    ;; lazy deoptimization bailout 0
0xffff7ab131bc   124  add x17, x17, x16
0xffff7ab131c0   128  br x17
0xffff7ab131c4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab131c8   136  d63f03e0       constant
0xffff7ab131cc   140  d503201f       constant
0xffff7ab131d0   144  7a906000       constant
0xffff7ab131d4   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab131b8  runtime entry
0xffff7ab131c4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4393
type = NORMAL
name = BinaryOpICStub(MUL:Int32*Int32->Int32)
compiler = crankshaft
Instructions (size = 160)
0xffff7ab13140     0  mov x2, x1
0xffff7ab13144     4  tbnz w2, #0, #+0x34 (addr 0xffff7ab13178)
0xffff7ab13148     8  mov x3, x0
0xffff7ab1314c    12  tbnz w3, #0, #+0x3c (addr 0xffff7ab13188)
0xffff7ab13150    16  cmp x3, #0x0 (0)
0xffff7ab13154    20  ccmp x2, #0, #nZcv, ne
0xffff7ab13158    24  ccmn x3, x2, #nzcv, eq
0xffff7ab1315c    28  b.mi #+0x3c (addr 0xffff7ab13198)
0xffff7ab13160    32  smulh x2, x3, x2
0xffff7ab13164    36  cmp x2, w2, sxtw
0xffff7ab13168    40  lsl x2, x2, #32
0xffff7ab1316c    44  b.ne #+0x2c (addr 0xffff7ab13198)
0xffff7ab13170    48  mov x0, x2
0xffff7ab13174    52  ret
0xffff7ab13178    56  movz x16, #0x0
0xffff7ab1317c    60  sub csp, jssp, #0x10 (16)
0xffff7ab13180    64  stp fp, lr, [jssp, #-16]!
0xffff7ab13184    68  bl #+0x24 (addr 0xffff7ab131a8)
0xffff7ab13188    72  movz x16, #0x8
0xffff7ab1318c    76  sub csp, jssp, #0x10 (16)
0xffff7ab13190    80  stp fp, lr, [jssp, #-16]!
0xffff7ab13194    84  bl #+0x14 (addr 0xffff7ab131a8)
0xffff7ab13198    88  movz x16, #0x10
0xffff7ab1319c    92  sub csp, jssp, #0x10 (16)
0xffff7ab131a0    96  stp fp, lr, [jssp, #-16]!
0xffff7ab131a4   100  bl #+0x4 (addr 0xffff7ab131a8)
0xffff7ab131a8   104  movz x17, #0xa00000000
0xffff7ab131ac   108  sub csp, jssp, #0x10 (16)
0xffff7ab131b0   112  stp x17, cp, [jssp, #-16]!
0xffff7ab131b4   116  add fp, jssp, #0x10 (16)
0xffff7ab131b8   120  ldr x17, pc+24 (addr 0x0000ffff7ab131d0)    ;; lazy deoptimization bailout 0
0xffff7ab131bc   124  add x17, x17, x16
0xffff7ab131c0   128  br x17
0xffff7ab131c4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab131c8   136  d63f03e0       constant
0xffff7ab131cc   140  d503201f       constant
0xffff7ab131d0   144  7a906000       constant
0xffff7ab131d4   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab131b8  runtime entry
0xffff7ab131c4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4409
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0xffff7ab13240     0  mov x2, x1
0xffff7ab13244     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab13308)
0xffff7ab13248     8  mov x3, x0
0xffff7ab1324c    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab13318)
0xffff7ab13250    16  scvtf d0, x2, #32
0xffff7ab13254    20  scvtf d1, x3, #32
0xffff7ab13258    24  fmul d0, d0, d1
0xffff7ab1325c    28  movz x1, #0xe2c0
0xffff7ab13260    32  movk x1, #0x9ab, lsl #16
0xffff7ab13264    36  ldp x2, x0, [x1]
0xffff7ab13268    40  adds x16, x2, #0x10 (16)
0xffff7ab1326c    44  ccmp x16, x0, #nzCv, lo
0xffff7ab13270    48  b.hi #+0x20 (addr 0xffff7ab13290)
0xffff7ab13274    52  str x16, [x1]
0xffff7ab13278    56  ldr x1, [x26, #120]
0xffff7ab1327c    60  str x1, [x2]
0xffff7ab13280    64  orr x2, x2, #0x1
0xffff7ab13284    68  stur d0, [x2, #7]
0xffff7ab13288    72  mov x0, x2
0xffff7ab1328c    76  ret
0xffff7ab13290    80  sub csp, jssp, #0x10 (16)
0xffff7ab13294    84  stp fp, lr, [jssp, #-16]!
0xffff7ab13298    88  movz fp, #0xa00000000
0xffff7ab1329c    92  sub csp, jssp, #0x8 (8)
0xffff7ab132a0    96  str fp, [jssp, #-8]!
0xffff7ab132a4   100  add fp, jssp, #0x8 (8)
0xffff7ab132a8   104  movz x2, #0x0
0xffff7ab132ac   108  mov x16, lr
0xffff7ab132b0   112  ldr x17, pc+64 (addr 0x0000ffff7ab132f0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab132b4   116  blr x17
0xffff7ab132b8   120  ldur cp, [fp, #-8]
0xffff7ab132bc   124  movz x0, #0x0
0xffff7ab132c0   128  movz x1, #0x4b48
0xffff7ab132c4   132  movk x1, #0xe4, lsl #16
0xffff7ab132c8   136  ldr x16, pc+48 (addr 0x0000ffff7ab132f8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab132cc   140  blr x16
0xffff7ab132d0   144  str x0, [jssp, #16]
0xffff7ab132d4   148  ldr x16, pc+44 (addr 0x0000ffff7ab13300)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab132d8   152  blr x16
0xffff7ab132dc   156  ldr lr, [jssp, #16]
0xffff7ab132e0   160  ldp xzr, fp, [jssp], #24
0xffff7ab132e4   164  b #-0x60 (addr 0xffff7ab13284)
0xffff7ab132e8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab132ec   172  d63f03e0       constant
0xffff7ab132f0   176  7ab06820       constant
0xffff7ab132f4   180  0000ffff       constant
0xffff7ab132f8   184  7ab06260       constant
0xffff7ab132fc   188  0000ffff       constant
0xffff7ab13300   192  7ab068e0       constant
0xffff7ab13304   196  0000ffff       constant
0xffff7ab13308   200  movz x16, #0x0
0xffff7ab1330c   204  sub csp, jssp, #0x10 (16)
0xffff7ab13310   208  stp fp, lr, [jssp, #-16]!
0xffff7ab13314   212  bl #+0x14 (addr 0xffff7ab13328)
0xffff7ab13318   216  movz x16, #0x8
0xffff7ab1331c   220  sub csp, jssp, #0x10 (16)
0xffff7ab13320   224  stp fp, lr, [jssp, #-16]!
0xffff7ab13324   228  bl #+0x4 (addr 0xffff7ab13328)
0xffff7ab13328   232  movz x17, #0xa00000000
0xffff7ab1332c   236  sub csp, jssp, #0x10 (16)
0xffff7ab13330   240  stp x17, cp, [jssp, #-16]!
0xffff7ab13334   244  add fp, jssp, #0x10 (16)
0xffff7ab13338   248  ldr x17, pc+24 (addr 0x0000ffff7ab13350)    ;; lazy deoptimization bailout 0
0xffff7ab1333c   252  add x17, x17, x16
0xffff7ab13340   256  br x17
0xffff7ab13344   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab13348   264  d63f03e0       constant
0xffff7ab1334c   268  d503201f       constant
0xffff7ab13350   272  7a906000       constant
0xffff7ab13354   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab132d0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab132b0  code target (STUB)  (0xffff7ab06820)
0xffff7ab132c8  code target (STUB)  (0xffff7ab06260)
0xffff7ab132d4  code target (STUB)  (0xffff7ab068e0)
0xffff7ab132e8  constant pool (size 32)
0xffff7ab13338  runtime entry
0xffff7ab13344  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4409
type = NORMAL
name = BinaryOpICStub(MUL:Int32*Int32->Number)
compiler = crankshaft
Instructions (size = 301)
0xffff7ab13240     0  mov x2, x1
0xffff7ab13244     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab13308)
0xffff7ab13248     8  mov x3, x0
0xffff7ab1324c    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab13318)
0xffff7ab13250    16  scvtf d0, x2, #32
0xffff7ab13254    20  scvtf d1, x3, #32
0xffff7ab13258    24  fmul d0, d0, d1
0xffff7ab1325c    28  movz x1, #0xe2c0
0xffff7ab13260    32  movk x1, #0x9ab, lsl #16
0xffff7ab13264    36  ldp x2, x0, [x1]
0xffff7ab13268    40  adds x16, x2, #0x10 (16)
0xffff7ab1326c    44  ccmp x16, x0, #nzCv, lo
0xffff7ab13270    48  b.hi #+0x20 (addr 0xffff7ab13290)
0xffff7ab13274    52  str x16, [x1]
0xffff7ab13278    56  ldr x1, [x26, #120]
0xffff7ab1327c    60  str x1, [x2]
0xffff7ab13280    64  orr x2, x2, #0x1
0xffff7ab13284    68  stur d0, [x2, #7]
0xffff7ab13288    72  mov x0, x2
0xffff7ab1328c    76  ret
0xffff7ab13290    80  sub csp, jssp, #0x10 (16)
0xffff7ab13294    84  stp fp, lr, [jssp, #-16]!
0xffff7ab13298    88  movz fp, #0xa00000000
0xffff7ab1329c    92  sub csp, jssp, #0x8 (8)
0xffff7ab132a0    96  str fp, [jssp, #-8]!
0xffff7ab132a4   100  add fp, jssp, #0x8 (8)
0xffff7ab132a8   104  movz x2, #0x0
0xffff7ab132ac   108  mov x16, lr
0xffff7ab132b0   112  ldr x17, pc+64 (addr 0x0000ffff7ab132f0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab132b4   116  blr x17
0xffff7ab132b8   120  ldur cp, [fp, #-8]
0xffff7ab132bc   124  movz x0, #0x0
0xffff7ab132c0   128  movz x1, #0x4b48
0xffff7ab132c4   132  movk x1, #0xe4, lsl #16
0xffff7ab132c8   136  ldr x16, pc+48 (addr 0x0000ffff7ab132f8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab132cc   140  blr x16
0xffff7ab132d0   144  str x0, [jssp, #16]
0xffff7ab132d4   148  ldr x16, pc+44 (addr 0x0000ffff7ab13300)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab132d8   152  blr x16
0xffff7ab132dc   156  ldr lr, [jssp, #16]
0xffff7ab132e0   160  ldp xzr, fp, [jssp], #24
0xffff7ab132e4   164  b #-0x60 (addr 0xffff7ab13284)
0xffff7ab132e8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab132ec   172  d63f03e0       constant
0xffff7ab132f0   176  7ab06820       constant
0xffff7ab132f4   180  0000ffff       constant
0xffff7ab132f8   184  7ab06260       constant
0xffff7ab132fc   188  0000ffff       constant
0xffff7ab13300   192  7ab068e0       constant
0xffff7ab13304   196  0000ffff       constant
0xffff7ab13308   200  movz x16, #0x0
0xffff7ab1330c   204  sub csp, jssp, #0x10 (16)
0xffff7ab13310   208  stp fp, lr, [jssp, #-16]!
0xffff7ab13314   212  bl #+0x14 (addr 0xffff7ab13328)
0xffff7ab13318   216  movz x16, #0x8
0xffff7ab1331c   220  sub csp, jssp, #0x10 (16)
0xffff7ab13320   224  stp fp, lr, [jssp, #-16]!
0xffff7ab13324   228  bl #+0x4 (addr 0xffff7ab13328)
0xffff7ab13328   232  movz x17, #0xa00000000
0xffff7ab1332c   236  sub csp, jssp, #0x10 (16)
0xffff7ab13330   240  stp x17, cp, [jssp, #-16]!
0xffff7ab13334   244  add fp, jssp, #0x10 (16)
0xffff7ab13338   248  ldr x17, pc+24 (addr 0x0000ffff7ab13350)    ;; lazy deoptimization bailout 0
0xffff7ab1333c   252  add x17, x17, x16
0xffff7ab13340   256  br x17
0xffff7ab13344   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab13348   264  d63f03e0       constant
0xffff7ab1334c   268  d503201f       constant
0xffff7ab13350   272  7a906000       constant
0xffff7ab13354   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab132d0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab132b0  code target (STUB)  (0xffff7ab06820)
0xffff7ab132c8  code target (STUB)  (0xffff7ab06260)
0xffff7ab132d4  code target (STUB)  (0xffff7ab068e0)
0xffff7ab132e8  constant pool (size 32)
0xffff7ab13338  runtime entry
0xffff7ab13344  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6457
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0xffff7ab133e0     0  mov x2, x1
0xffff7ab133e4     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab134d8)
0xffff7ab133e8     8  tbz w0, #0, #+0x34 (addr 0xffff7ab1341c)
0xffff7ab133ec    12  ldur x16, [x0, #-1]
0xffff7ab133f0    16  ldr x17, [x26, #120]
0xffff7ab133f4    20  cmp x16, x17
0xffff7ab133f8    24  b.ne #+0xc (addr 0xffff7ab13404)
0xffff7ab133fc    28  ldur d0, [x0, #7]
0xffff7ab13400    32  b #+0x20 (addr 0xffff7ab13420)
0xffff7ab13404    36  ldr x16, [x26, #40]
0xffff7ab13408    40  cmp x0, x16
0xffff7ab1340c    44  b.ne #+0xdc (addr 0xffff7ab134e8)
0xffff7ab13410    48  ldr x3, [x26, #928]
0xffff7ab13414    52  ldur d0, [x3, #7]
0xffff7ab13418    56  b #+0x8 (addr 0xffff7ab13420)
0xffff7ab1341c    60  scvtf d0, x0, #32
0xffff7ab13420    64  scvtf d1, x2, #32
0xffff7ab13424    68  fmul d0, d1, d0
0xffff7ab13428    72  movz x1, #0xe2c0
0xffff7ab1342c    76  movk x1, #0x9ab, lsl #16
0xffff7ab13430    80  ldp x2, x0, [x1]
0xffff7ab13434    84  adds x16, x2, #0x10 (16)
0xffff7ab13438    88  ccmp x16, x0, #nzCv, lo
0xffff7ab1343c    92  b.hi #+0x20 (addr 0xffff7ab1345c)
0xffff7ab13440    96  str x16, [x1]
0xffff7ab13444   100  ldr x1, [x26, #120]
0xffff7ab13448   104  str x1, [x2]
0xffff7ab1344c   108  orr x2, x2, #0x1
0xffff7ab13450   112  stur d0, [x2, #7]
0xffff7ab13454   116  mov x0, x2
0xffff7ab13458   120  ret
0xffff7ab1345c   124  sub csp, jssp, #0x10 (16)
0xffff7ab13460   128  stp fp, lr, [jssp, #-16]!
0xffff7ab13464   132  movz fp, #0xa00000000
0xffff7ab13468   136  sub csp, jssp, #0x8 (8)
0xffff7ab1346c   140  str fp, [jssp, #-8]!
0xffff7ab13470   144  add fp, jssp, #0x8 (8)
0xffff7ab13474   148  movz x2, #0x0
0xffff7ab13478   152  mov x16, lr
0xffff7ab1347c   156  ldr x17, pc+68 (addr 0x0000ffff7ab134c0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab13480   160  blr x17
0xffff7ab13484   164  ldur cp, [fp, #-8]
0xffff7ab13488   168  movz x0, #0x0
0xffff7ab1348c   172  movz x1, #0x4b48
0xffff7ab13490   176  movk x1, #0xe4, lsl #16
0xffff7ab13494   180  ldr x16, pc+52 (addr 0x0000ffff7ab134c8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab13498   184  blr x16
0xffff7ab1349c   188  str x0, [jssp, #16]
0xffff7ab134a0   192  ldr x16, pc+48 (addr 0x0000ffff7ab134d0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab134a4   196  blr x16
0xffff7ab134a8   200  ldr lr, [jssp, #16]
0xffff7ab134ac   204  ldp xzr, fp, [jssp], #24
0xffff7ab134b0   208  b #-0x60 (addr 0xffff7ab13450)
0xffff7ab134b4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab134b8   216  d63f03e0       constant
0xffff7ab134bc   220  d503201f       constant
0xffff7ab134c0   224  7ab06820       constant
0xffff7ab134c4   228  0000ffff       constant
0xffff7ab134c8   232  7ab06260       constant
0xffff7ab134cc   236  0000ffff       constant
0xffff7ab134d0   240  7ab068e0       constant
0xffff7ab134d4   244  0000ffff       constant
0xffff7ab134d8   248  movz x16, #0x0
0xffff7ab134dc   252  sub csp, jssp, #0x10 (16)
0xffff7ab134e0   256  stp fp, lr, [jssp, #-16]!
0xffff7ab134e4   260  bl #+0x14 (addr 0xffff7ab134f8)
0xffff7ab134e8   264  movz x16, #0x8
0xffff7ab134ec   268  sub csp, jssp, #0x10 (16)
0xffff7ab134f0   272  stp fp, lr, [jssp, #-16]!
0xffff7ab134f4   276  bl #+0x4 (addr 0xffff7ab134f8)
0xffff7ab134f8   280  movz x17, #0xa00000000
0xffff7ab134fc   284  sub csp, jssp, #0x10 (16)
0xffff7ab13500   288  stp x17, cp, [jssp, #-16]!
0xffff7ab13504   292  add fp, jssp, #0x10 (16)
0xffff7ab13508   296  ldr x17, pc+24 (addr 0x0000ffff7ab13520)    ;; lazy deoptimization bailout 0
0xffff7ab1350c   300  add x17, x17, x16
0xffff7ab13510   304  br x17
0xffff7ab13514   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab13518   312  d63f03e0       constant
0xffff7ab1351c   316  d503201f       constant
0xffff7ab13520   320  7a906000       constant
0xffff7ab13524   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab1349c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab1347c  code target (STUB)  (0xffff7ab06820)
0xffff7ab13494  code target (STUB)  (0xffff7ab06260)
0xffff7ab134a0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab134b4  constant pool (size 36)
0xffff7ab13508  runtime entry
0xffff7ab13514  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6457
type = NORMAL
name = BinaryOpICStub(MUL:Int32*Number->Number)
compiler = crankshaft
Instructions (size = 349)
0xffff7ab133e0     0  mov x2, x1
0xffff7ab133e4     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab134d8)
0xffff7ab133e8     8  tbz w0, #0, #+0x34 (addr 0xffff7ab1341c)
0xffff7ab133ec    12  ldur x16, [x0, #-1]
0xffff7ab133f0    16  ldr x17, [x26, #120]
0xffff7ab133f4    20  cmp x16, x17
0xffff7ab133f8    24  b.ne #+0xc (addr 0xffff7ab13404)
0xffff7ab133fc    28  ldur d0, [x0, #7]
0xffff7ab13400    32  b #+0x20 (addr 0xffff7ab13420)
0xffff7ab13404    36  ldr x16, [x26, #40]
0xffff7ab13408    40  cmp x0, x16
0xffff7ab1340c    44  b.ne #+0xdc (addr 0xffff7ab134e8)
0xffff7ab13410    48  ldr x3, [x26, #928]
0xffff7ab13414    52  ldur d0, [x3, #7]
0xffff7ab13418    56  b #+0x8 (addr 0xffff7ab13420)
0xffff7ab1341c    60  scvtf d0, x0, #32
0xffff7ab13420    64  scvtf d1, x2, #32
0xffff7ab13424    68  fmul d0, d1, d0
0xffff7ab13428    72  movz x1, #0xe2c0
0xffff7ab1342c    76  movk x1, #0x9ab, lsl #16
0xffff7ab13430    80  ldp x2, x0, [x1]
0xffff7ab13434    84  adds x16, x2, #0x10 (16)
0xffff7ab13438    88  ccmp x16, x0, #nzCv, lo
0xffff7ab1343c    92  b.hi #+0x20 (addr 0xffff7ab1345c)
0xffff7ab13440    96  str x16, [x1]
0xffff7ab13444   100  ldr x1, [x26, #120]
0xffff7ab13448   104  str x1, [x2]
0xffff7ab1344c   108  orr x2, x2, #0x1
0xffff7ab13450   112  stur d0, [x2, #7]
0xffff7ab13454   116  mov x0, x2
0xffff7ab13458   120  ret
0xffff7ab1345c   124  sub csp, jssp, #0x10 (16)
0xffff7ab13460   128  stp fp, lr, [jssp, #-16]!
0xffff7ab13464   132  movz fp, #0xa00000000
0xffff7ab13468   136  sub csp, jssp, #0x8 (8)
0xffff7ab1346c   140  str fp, [jssp, #-8]!
0xffff7ab13470   144  add fp, jssp, #0x8 (8)
0xffff7ab13474   148  movz x2, #0x0
0xffff7ab13478   152  mov x16, lr
0xffff7ab1347c   156  ldr x17, pc+68 (addr 0x0000ffff7ab134c0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab13480   160  blr x17
0xffff7ab13484   164  ldur cp, [fp, #-8]
0xffff7ab13488   168  movz x0, #0x0
0xffff7ab1348c   172  movz x1, #0x4b48
0xffff7ab13490   176  movk x1, #0xe4, lsl #16
0xffff7ab13494   180  ldr x16, pc+52 (addr 0x0000ffff7ab134c8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab13498   184  blr x16
0xffff7ab1349c   188  str x0, [jssp, #16]
0xffff7ab134a0   192  ldr x16, pc+48 (addr 0x0000ffff7ab134d0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab134a4   196  blr x16
0xffff7ab134a8   200  ldr lr, [jssp, #16]
0xffff7ab134ac   204  ldp xzr, fp, [jssp], #24
0xffff7ab134b0   208  b #-0x60 (addr 0xffff7ab13450)
0xffff7ab134b4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab134b8   216  d63f03e0       constant
0xffff7ab134bc   220  d503201f       constant
0xffff7ab134c0   224  7ab06820       constant
0xffff7ab134c4   228  0000ffff       constant
0xffff7ab134c8   232  7ab06260       constant
0xffff7ab134cc   236  0000ffff       constant
0xffff7ab134d0   240  7ab068e0       constant
0xffff7ab134d4   244  0000ffff       constant
0xffff7ab134d8   248  movz x16, #0x0
0xffff7ab134dc   252  sub csp, jssp, #0x10 (16)
0xffff7ab134e0   256  stp fp, lr, [jssp, #-16]!
0xffff7ab134e4   260  bl #+0x14 (addr 0xffff7ab134f8)
0xffff7ab134e8   264  movz x16, #0x8
0xffff7ab134ec   268  sub csp, jssp, #0x10 (16)
0xffff7ab134f0   272  stp fp, lr, [jssp, #-16]!
0xffff7ab134f4   276  bl #+0x4 (addr 0xffff7ab134f8)
0xffff7ab134f8   280  movz x17, #0xa00000000
0xffff7ab134fc   284  sub csp, jssp, #0x10 (16)
0xffff7ab13500   288  stp x17, cp, [jssp, #-16]!
0xffff7ab13504   292  add fp, jssp, #0x10 (16)
0xffff7ab13508   296  ldr x17, pc+24 (addr 0x0000ffff7ab13520)    ;; lazy deoptimization bailout 0
0xffff7ab1350c   300  add x17, x17, x16
0xffff7ab13510   304  br x17
0xffff7ab13514   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab13518   312  d63f03e0       constant
0xffff7ab1351c   316  d503201f       constant
0xffff7ab13520   320  7a906000       constant
0xffff7ab13524   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab1349c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab1347c  code target (STUB)  (0xffff7ab06820)
0xffff7ab13494  code target (STUB)  (0xffff7ab06260)
0xffff7ab134a0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab134b4  constant pool (size 36)
0xffff7ab13508  runtime entry
0xffff7ab13514  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2345
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 160)
0xffff7ab135a0     0  mov x2, x1
0xffff7ab135a4     4  tbnz w2, #0, #+0x34 (addr 0xffff7ab135d8)
0xffff7ab135a8     8  mov x3, x0
0xffff7ab135ac    12  tbnz w3, #0, #+0x3c (addr 0xffff7ab135e8)
0xffff7ab135b0    16  cmp x3, #0x0 (0)
0xffff7ab135b4    20  ccmp x2, #0, #nZcv, ne
0xffff7ab135b8    24  ccmn x3, x2, #nzcv, eq
0xffff7ab135bc    28  b.mi #+0x3c (addr 0xffff7ab135f8)
0xffff7ab135c0    32  smulh x2, x3, x2
0xffff7ab135c4    36  cmp x2, w2, sxtw
0xffff7ab135c8    40  lsl x2, x2, #32
0xffff7ab135cc    44  b.ne #+0x2c (addr 0xffff7ab135f8)
0xffff7ab135d0    48  mov x0, x2
0xffff7ab135d4    52  ret
0xffff7ab135d8    56  movz x16, #0x0
0xffff7ab135dc    60  sub csp, jssp, #0x10 (16)
0xffff7ab135e0    64  stp fp, lr, [jssp, #-16]!
0xffff7ab135e4    68  bl #+0x24 (addr 0xffff7ab13608)
0xffff7ab135e8    72  movz x16, #0x8
0xffff7ab135ec    76  sub csp, jssp, #0x10 (16)
0xffff7ab135f0    80  stp fp, lr, [jssp, #-16]!
0xffff7ab135f4    84  bl #+0x14 (addr 0xffff7ab13608)
0xffff7ab135f8    88  movz x16, #0x10
0xffff7ab135fc    92  sub csp, jssp, #0x10 (16)
0xffff7ab13600    96  stp fp, lr, [jssp, #-16]!
0xffff7ab13604   100  bl #+0x4 (addr 0xffff7ab13608)
0xffff7ab13608   104  movz x17, #0xa00000000
0xffff7ab1360c   108  sub csp, jssp, #0x10 (16)
0xffff7ab13610   112  stp x17, cp, [jssp, #-16]!
0xffff7ab13614   116  add fp, jssp, #0x10 (16)
0xffff7ab13618   120  ldr x17, pc+24 (addr 0x0000ffff7ab13630)    ;; lazy deoptimization bailout 0
0xffff7ab1361c   124  add x17, x17, x16
0xffff7ab13620   128  br x17
0xffff7ab13624   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab13628   136  d63f03e0       constant
0xffff7ab1362c   140  d503201f       constant
0xffff7ab13630   144  7a906000       constant
0xffff7ab13634   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab13618  runtime entry
0xffff7ab13624  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2345
type = NORMAL
name = BinaryOpICStub(MUL:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 160)
0xffff7ab135a0     0  mov x2, x1
0xffff7ab135a4     4  tbnz w2, #0, #+0x34 (addr 0xffff7ab135d8)
0xffff7ab135a8     8  mov x3, x0
0xffff7ab135ac    12  tbnz w3, #0, #+0x3c (addr 0xffff7ab135e8)
0xffff7ab135b0    16  cmp x3, #0x0 (0)
0xffff7ab135b4    20  ccmp x2, #0, #nZcv, ne
0xffff7ab135b8    24  ccmn x3, x2, #nzcv, eq
0xffff7ab135bc    28  b.mi #+0x3c (addr 0xffff7ab135f8)
0xffff7ab135c0    32  smulh x2, x3, x2
0xffff7ab135c4    36  cmp x2, w2, sxtw
0xffff7ab135c8    40  lsl x2, x2, #32
0xffff7ab135cc    44  b.ne #+0x2c (addr 0xffff7ab135f8)
0xffff7ab135d0    48  mov x0, x2
0xffff7ab135d4    52  ret
0xffff7ab135d8    56  movz x16, #0x0
0xffff7ab135dc    60  sub csp, jssp, #0x10 (16)
0xffff7ab135e0    64  stp fp, lr, [jssp, #-16]!
0xffff7ab135e4    68  bl #+0x24 (addr 0xffff7ab13608)
0xffff7ab135e8    72  movz x16, #0x8
0xffff7ab135ec    76  sub csp, jssp, #0x10 (16)
0xffff7ab135f0    80  stp fp, lr, [jssp, #-16]!
0xffff7ab135f4    84  bl #+0x14 (addr 0xffff7ab13608)
0xffff7ab135f8    88  movz x16, #0x10
0xffff7ab135fc    92  sub csp, jssp, #0x10 (16)
0xffff7ab13600    96  stp fp, lr, [jssp, #-16]!
0xffff7ab13604   100  bl #+0x4 (addr 0xffff7ab13608)
0xffff7ab13608   104  movz x17, #0xa00000000
0xffff7ab1360c   108  sub csp, jssp, #0x10 (16)
0xffff7ab13610   112  stp x17, cp, [jssp, #-16]!
0xffff7ab13614   116  add fp, jssp, #0x10 (16)
0xffff7ab13618   120  ldr x17, pc+24 (addr 0x0000ffff7ab13630)    ;; lazy deoptimization bailout 0
0xffff7ab1361c   124  add x17, x17, x16
0xffff7ab13620   128  br x17
0xffff7ab13624   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab13628   136  d63f03e0       constant
0xffff7ab1362c   140  d503201f       constant
0xffff7ab13630   144  7a906000       constant
0xffff7ab13634   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab13618  runtime entry
0xffff7ab13624  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2361
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0xffff7ab136a0     0  mov x2, x1
0xffff7ab136a4     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab13768)
0xffff7ab136a8     8  mov x3, x0
0xffff7ab136ac    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab13778)
0xffff7ab136b0    16  scvtf d0, x2, #32
0xffff7ab136b4    20  scvtf d1, x3, #32
0xffff7ab136b8    24  fmul d0, d0, d1
0xffff7ab136bc    28  movz x1, #0xe2c0
0xffff7ab136c0    32  movk x1, #0x9ab, lsl #16
0xffff7ab136c4    36  ldp x2, x0, [x1]
0xffff7ab136c8    40  adds x16, x2, #0x10 (16)
0xffff7ab136cc    44  ccmp x16, x0, #nzCv, lo
0xffff7ab136d0    48  b.hi #+0x20 (addr 0xffff7ab136f0)
0xffff7ab136d4    52  str x16, [x1]
0xffff7ab136d8    56  ldr x1, [x26, #120]
0xffff7ab136dc    60  str x1, [x2]
0xffff7ab136e0    64  orr x2, x2, #0x1
0xffff7ab136e4    68  stur d0, [x2, #7]
0xffff7ab136e8    72  mov x0, x2
0xffff7ab136ec    76  ret
0xffff7ab136f0    80  sub csp, jssp, #0x10 (16)
0xffff7ab136f4    84  stp fp, lr, [jssp, #-16]!
0xffff7ab136f8    88  movz fp, #0xa00000000
0xffff7ab136fc    92  sub csp, jssp, #0x8 (8)
0xffff7ab13700    96  str fp, [jssp, #-8]!
0xffff7ab13704   100  add fp, jssp, #0x8 (8)
0xffff7ab13708   104  movz x2, #0x0
0xffff7ab1370c   108  mov x16, lr
0xffff7ab13710   112  ldr x17, pc+64 (addr 0x0000ffff7ab13750)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab13714   116  blr x17
0xffff7ab13718   120  ldur cp, [fp, #-8]
0xffff7ab1371c   124  movz x0, #0x0
0xffff7ab13720   128  movz x1, #0x4b48
0xffff7ab13724   132  movk x1, #0xe4, lsl #16
0xffff7ab13728   136  ldr x16, pc+48 (addr 0x0000ffff7ab13758)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab1372c   140  blr x16
0xffff7ab13730   144  str x0, [jssp, #16]
0xffff7ab13734   148  ldr x16, pc+44 (addr 0x0000ffff7ab13760)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab13738   152  blr x16
0xffff7ab1373c   156  ldr lr, [jssp, #16]
0xffff7ab13740   160  ldp xzr, fp, [jssp], #24
0xffff7ab13744   164  b #-0x60 (addr 0xffff7ab136e4)
0xffff7ab13748   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab1374c   172  d63f03e0       constant
0xffff7ab13750   176  7ab06820       constant
0xffff7ab13754   180  0000ffff       constant
0xffff7ab13758   184  7ab06260       constant
0xffff7ab1375c   188  0000ffff       constant
0xffff7ab13760   192  7ab068e0       constant
0xffff7ab13764   196  0000ffff       constant
0xffff7ab13768   200  movz x16, #0x0
0xffff7ab1376c   204  sub csp, jssp, #0x10 (16)
0xffff7ab13770   208  stp fp, lr, [jssp, #-16]!
0xffff7ab13774   212  bl #+0x14 (addr 0xffff7ab13788)
0xffff7ab13778   216  movz x16, #0x8
0xffff7ab1377c   220  sub csp, jssp, #0x10 (16)
0xffff7ab13780   224  stp fp, lr, [jssp, #-16]!
0xffff7ab13784   228  bl #+0x4 (addr 0xffff7ab13788)
0xffff7ab13788   232  movz x17, #0xa00000000
0xffff7ab1378c   236  sub csp, jssp, #0x10 (16)
0xffff7ab13790   240  stp x17, cp, [jssp, #-16]!
0xffff7ab13794   244  add fp, jssp, #0x10 (16)
0xffff7ab13798   248  ldr x17, pc+24 (addr 0x0000ffff7ab137b0)    ;; lazy deoptimization bailout 0
0xffff7ab1379c   252  add x17, x17, x16
0xffff7ab137a0   256  br x17
0xffff7ab137a4   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab137a8   264  d63f03e0       constant
0xffff7ab137ac   268  d503201f       constant
0xffff7ab137b0   272  7a906000       constant
0xffff7ab137b4   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab13730   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab13710  code target (STUB)  (0xffff7ab06820)
0xffff7ab13728  code target (STUB)  (0xffff7ab06260)
0xffff7ab13734  code target (STUB)  (0xffff7ab068e0)
0xffff7ab13748  constant pool (size 32)
0xffff7ab13798  runtime entry
0xffff7ab137a4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2361
type = NORMAL
name = BinaryOpICStub(MUL:Int32*Smi->Number)
compiler = crankshaft
Instructions (size = 301)
0xffff7ab136a0     0  mov x2, x1
0xffff7ab136a4     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab13768)
0xffff7ab136a8     8  mov x3, x0
0xffff7ab136ac    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab13778)
0xffff7ab136b0    16  scvtf d0, x2, #32
0xffff7ab136b4    20  scvtf d1, x3, #32
0xffff7ab136b8    24  fmul d0, d0, d1
0xffff7ab136bc    28  movz x1, #0xe2c0
0xffff7ab136c0    32  movk x1, #0x9ab, lsl #16
0xffff7ab136c4    36  ldp x2, x0, [x1]
0xffff7ab136c8    40  adds x16, x2, #0x10 (16)
0xffff7ab136cc    44  ccmp x16, x0, #nzCv, lo
0xffff7ab136d0    48  b.hi #+0x20 (addr 0xffff7ab136f0)
0xffff7ab136d4    52  str x16, [x1]
0xffff7ab136d8    56  ldr x1, [x26, #120]
0xffff7ab136dc    60  str x1, [x2]
0xffff7ab136e0    64  orr x2, x2, #0x1
0xffff7ab136e4    68  stur d0, [x2, #7]
0xffff7ab136e8    72  mov x0, x2
0xffff7ab136ec    76  ret
0xffff7ab136f0    80  sub csp, jssp, #0x10 (16)
0xffff7ab136f4    84  stp fp, lr, [jssp, #-16]!
0xffff7ab136f8    88  movz fp, #0xa00000000
0xffff7ab136fc    92  sub csp, jssp, #0x8 (8)
0xffff7ab13700    96  str fp, [jssp, #-8]!
0xffff7ab13704   100  add fp, jssp, #0x8 (8)
0xffff7ab13708   104  movz x2, #0x0
0xffff7ab1370c   108  mov x16, lr
0xffff7ab13710   112  ldr x17, pc+64 (addr 0x0000ffff7ab13750)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab13714   116  blr x17
0xffff7ab13718   120  ldur cp, [fp, #-8]
0xffff7ab1371c   124  movz x0, #0x0
0xffff7ab13720   128  movz x1, #0x4b48
0xffff7ab13724   132  movk x1, #0xe4, lsl #16
0xffff7ab13728   136  ldr x16, pc+48 (addr 0x0000ffff7ab13758)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab1372c   140  blr x16
0xffff7ab13730   144  str x0, [jssp, #16]
0xffff7ab13734   148  ldr x16, pc+44 (addr 0x0000ffff7ab13760)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab13738   152  blr x16
0xffff7ab1373c   156  ldr lr, [jssp, #16]
0xffff7ab13740   160  ldp xzr, fp, [jssp], #24
0xffff7ab13744   164  b #-0x60 (addr 0xffff7ab136e4)
0xffff7ab13748   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab1374c   172  d63f03e0       constant
0xffff7ab13750   176  7ab06820       constant
0xffff7ab13754   180  0000ffff       constant
0xffff7ab13758   184  7ab06260       constant
0xffff7ab1375c   188  0000ffff       constant
0xffff7ab13760   192  7ab068e0       constant
0xffff7ab13764   196  0000ffff       constant
0xffff7ab13768   200  movz x16, #0x0
0xffff7ab1376c   204  sub csp, jssp, #0x10 (16)
0xffff7ab13770   208  stp fp, lr, [jssp, #-16]!
0xffff7ab13774   212  bl #+0x14 (addr 0xffff7ab13788)
0xffff7ab13778   216  movz x16, #0x8
0xffff7ab1377c   220  sub csp, jssp, #0x10 (16)
0xffff7ab13780   224  stp fp, lr, [jssp, #-16]!
0xffff7ab13784   228  bl #+0x4 (addr 0xffff7ab13788)
0xffff7ab13788   232  movz x17, #0xa00000000
0xffff7ab1378c   236  sub csp, jssp, #0x10 (16)
0xffff7ab13790   240  stp x17, cp, [jssp, #-16]!
0xffff7ab13794   244  add fp, jssp, #0x10 (16)
0xffff7ab13798   248  ldr x17, pc+24 (addr 0x0000ffff7ab137b0)    ;; lazy deoptimization bailout 0
0xffff7ab1379c   252  add x17, x17, x16
0xffff7ab137a0   256  br x17
0xffff7ab137a4   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab137a8   264  d63f03e0       constant
0xffff7ab137ac   268  d503201f       constant
0xffff7ab137b0   272  7a906000       constant
0xffff7ab137b4   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab13730   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab13710  code target (STUB)  (0xffff7ab06820)
0xffff7ab13728  code target (STUB)  (0xffff7ab06260)
0xffff7ab13734  code target (STUB)  (0xffff7ab068e0)
0xffff7ab13748  constant pool (size 32)
0xffff7ab13798  runtime entry
0xffff7ab137a4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4537
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0xffff7ab13840     0  mov x2, x0
0xffff7ab13844     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab13938)
0xffff7ab13848     8  tbz w1, #0, #+0x34 (addr 0xffff7ab1387c)
0xffff7ab1384c    12  ldur x16, [x1, #-1]
0xffff7ab13850    16  ldr x17, [x26, #120]
0xffff7ab13854    20  cmp x16, x17
0xffff7ab13858    24  b.ne #+0xc (addr 0xffff7ab13864)
0xffff7ab1385c    28  ldur d0, [x1, #7]
0xffff7ab13860    32  b #+0x20 (addr 0xffff7ab13880)
0xffff7ab13864    36  ldr x16, [x26, #40]
0xffff7ab13868    40  cmp x1, x16
0xffff7ab1386c    44  b.ne #+0xdc (addr 0xffff7ab13948)
0xffff7ab13870    48  ldr x3, [x26, #928]
0xffff7ab13874    52  ldur d0, [x3, #7]
0xffff7ab13878    56  b #+0x8 (addr 0xffff7ab13880)
0xffff7ab1387c    60  scvtf d0, x1, #32
0xffff7ab13880    64  scvtf d1, x2, #32
0xffff7ab13884    68  fmul d0, d0, d1
0xffff7ab13888    72  movz x1, #0xe2c0
0xffff7ab1388c    76  movk x1, #0x9ab, lsl #16
0xffff7ab13890    80  ldp x2, x0, [x1]
0xffff7ab13894    84  adds x16, x2, #0x10 (16)
0xffff7ab13898    88  ccmp x16, x0, #nzCv, lo
0xffff7ab1389c    92  b.hi #+0x20 (addr 0xffff7ab138bc)
0xffff7ab138a0    96  str x16, [x1]
0xffff7ab138a4   100  ldr x1, [x26, #120]
0xffff7ab138a8   104  str x1, [x2]
0xffff7ab138ac   108  orr x2, x2, #0x1
0xffff7ab138b0   112  stur d0, [x2, #7]
0xffff7ab138b4   116  mov x0, x2
0xffff7ab138b8   120  ret
0xffff7ab138bc   124  sub csp, jssp, #0x10 (16)
0xffff7ab138c0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab138c4   132  movz fp, #0xa00000000
0xffff7ab138c8   136  sub csp, jssp, #0x8 (8)
0xffff7ab138cc   140  str fp, [jssp, #-8]!
0xffff7ab138d0   144  add fp, jssp, #0x8 (8)
0xffff7ab138d4   148  movz x2, #0x0
0xffff7ab138d8   152  mov x16, lr
0xffff7ab138dc   156  ldr x17, pc+68 (addr 0x0000ffff7ab13920)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab138e0   160  blr x17
0xffff7ab138e4   164  ldur cp, [fp, #-8]
0xffff7ab138e8   168  movz x0, #0x0
0xffff7ab138ec   172  movz x1, #0x4b48
0xffff7ab138f0   176  movk x1, #0xe4, lsl #16
0xffff7ab138f4   180  ldr x16, pc+52 (addr 0x0000ffff7ab13928)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab138f8   184  blr x16
0xffff7ab138fc   188  str x0, [jssp, #16]
0xffff7ab13900   192  ldr x16, pc+48 (addr 0x0000ffff7ab13930)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab13904   196  blr x16
0xffff7ab13908   200  ldr lr, [jssp, #16]
0xffff7ab1390c   204  ldp xzr, fp, [jssp], #24
0xffff7ab13910   208  b #-0x60 (addr 0xffff7ab138b0)
0xffff7ab13914   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab13918   216  d63f03e0       constant
0xffff7ab1391c   220  d503201f       constant
0xffff7ab13920   224  7ab06820       constant
0xffff7ab13924   228  0000ffff       constant
0xffff7ab13928   232  7ab06260       constant
0xffff7ab1392c   236  0000ffff       constant
0xffff7ab13930   240  7ab068e0       constant
0xffff7ab13934   244  0000ffff       constant
0xffff7ab13938   248  movz x16, #0x0
0xffff7ab1393c   252  sub csp, jssp, #0x10 (16)
0xffff7ab13940   256  stp fp, lr, [jssp, #-16]!
0xffff7ab13944   260  bl #+0x14 (addr 0xffff7ab13958)
0xffff7ab13948   264  movz x16, #0x8
0xffff7ab1394c   268  sub csp, jssp, #0x10 (16)
0xffff7ab13950   272  stp fp, lr, [jssp, #-16]!
0xffff7ab13954   276  bl #+0x4 (addr 0xffff7ab13958)
0xffff7ab13958   280  movz x17, #0xa00000000
0xffff7ab1395c   284  sub csp, jssp, #0x10 (16)
0xffff7ab13960   288  stp x17, cp, [jssp, #-16]!
0xffff7ab13964   292  add fp, jssp, #0x10 (16)
0xffff7ab13968   296  ldr x17, pc+24 (addr 0x0000ffff7ab13980)    ;; lazy deoptimization bailout 0
0xffff7ab1396c   300  add x17, x17, x16
0xffff7ab13970   304  br x17
0xffff7ab13974   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab13978   312  d63f03e0       constant
0xffff7ab1397c   316  d503201f       constant
0xffff7ab13980   320  7a906000       constant
0xffff7ab13984   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab138fc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab138dc  code target (STUB)  (0xffff7ab06820)
0xffff7ab138f4  code target (STUB)  (0xffff7ab06260)
0xffff7ab13900  code target (STUB)  (0xffff7ab068e0)
0xffff7ab13914  constant pool (size 36)
0xffff7ab13968  runtime entry
0xffff7ab13974  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4537
type = NORMAL
name = BinaryOpICStub(MUL:Number*Int32->Number)
compiler = crankshaft
Instructions (size = 349)
0xffff7ab13840     0  mov x2, x0
0xffff7ab13844     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab13938)
0xffff7ab13848     8  tbz w1, #0, #+0x34 (addr 0xffff7ab1387c)
0xffff7ab1384c    12  ldur x16, [x1, #-1]
0xffff7ab13850    16  ldr x17, [x26, #120]
0xffff7ab13854    20  cmp x16, x17
0xffff7ab13858    24  b.ne #+0xc (addr 0xffff7ab13864)
0xffff7ab1385c    28  ldur d0, [x1, #7]
0xffff7ab13860    32  b #+0x20 (addr 0xffff7ab13880)
0xffff7ab13864    36  ldr x16, [x26, #40]
0xffff7ab13868    40  cmp x1, x16
0xffff7ab1386c    44  b.ne #+0xdc (addr 0xffff7ab13948)
0xffff7ab13870    48  ldr x3, [x26, #928]
0xffff7ab13874    52  ldur d0, [x3, #7]
0xffff7ab13878    56  b #+0x8 (addr 0xffff7ab13880)
0xffff7ab1387c    60  scvtf d0, x1, #32
0xffff7ab13880    64  scvtf d1, x2, #32
0xffff7ab13884    68  fmul d0, d0, d1
0xffff7ab13888    72  movz x1, #0xe2c0
0xffff7ab1388c    76  movk x1, #0x9ab, lsl #16
0xffff7ab13890    80  ldp x2, x0, [x1]
0xffff7ab13894    84  adds x16, x2, #0x10 (16)
0xffff7ab13898    88  ccmp x16, x0, #nzCv, lo
0xffff7ab1389c    92  b.hi #+0x20 (addr 0xffff7ab138bc)
0xffff7ab138a0    96  str x16, [x1]
0xffff7ab138a4   100  ldr x1, [x26, #120]
0xffff7ab138a8   104  str x1, [x2]
0xffff7ab138ac   108  orr x2, x2, #0x1
0xffff7ab138b0   112  stur d0, [x2, #7]
0xffff7ab138b4   116  mov x0, x2
0xffff7ab138b8   120  ret
0xffff7ab138bc   124  sub csp, jssp, #0x10 (16)
0xffff7ab138c0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab138c4   132  movz fp, #0xa00000000
0xffff7ab138c8   136  sub csp, jssp, #0x8 (8)
0xffff7ab138cc   140  str fp, [jssp, #-8]!
0xffff7ab138d0   144  add fp, jssp, #0x8 (8)
0xffff7ab138d4   148  movz x2, #0x0
0xffff7ab138d8   152  mov x16, lr
0xffff7ab138dc   156  ldr x17, pc+68 (addr 0x0000ffff7ab13920)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab138e0   160  blr x17
0xffff7ab138e4   164  ldur cp, [fp, #-8]
0xffff7ab138e8   168  movz x0, #0x0
0xffff7ab138ec   172  movz x1, #0x4b48
0xffff7ab138f0   176  movk x1, #0xe4, lsl #16
0xffff7ab138f4   180  ldr x16, pc+52 (addr 0x0000ffff7ab13928)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab138f8   184  blr x16
0xffff7ab138fc   188  str x0, [jssp, #16]
0xffff7ab13900   192  ldr x16, pc+48 (addr 0x0000ffff7ab13930)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab13904   196  blr x16
0xffff7ab13908   200  ldr lr, [jssp, #16]
0xffff7ab1390c   204  ldp xzr, fp, [jssp], #24
0xffff7ab13910   208  b #-0x60 (addr 0xffff7ab138b0)
0xffff7ab13914   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab13918   216  d63f03e0       constant
0xffff7ab1391c   220  d503201f       constant
0xffff7ab13920   224  7ab06820       constant
0xffff7ab13924   228  0000ffff       constant
0xffff7ab13928   232  7ab06260       constant
0xffff7ab1392c   236  0000ffff       constant
0xffff7ab13930   240  7ab068e0       constant
0xffff7ab13934   244  0000ffff       constant
0xffff7ab13938   248  movz x16, #0x0
0xffff7ab1393c   252  sub csp, jssp, #0x10 (16)
0xffff7ab13940   256  stp fp, lr, [jssp, #-16]!
0xffff7ab13944   260  bl #+0x14 (addr 0xffff7ab13958)
0xffff7ab13948   264  movz x16, #0x8
0xffff7ab1394c   268  sub csp, jssp, #0x10 (16)
0xffff7ab13950   272  stp fp, lr, [jssp, #-16]!
0xffff7ab13954   276  bl #+0x4 (addr 0xffff7ab13958)
0xffff7ab13958   280  movz x17, #0xa00000000
0xffff7ab1395c   284  sub csp, jssp, #0x10 (16)
0xffff7ab13960   288  stp x17, cp, [jssp, #-16]!
0xffff7ab13964   292  add fp, jssp, #0x10 (16)
0xffff7ab13968   296  ldr x17, pc+24 (addr 0x0000ffff7ab13980)    ;; lazy deoptimization bailout 0
0xffff7ab1396c   300  add x17, x17, x16
0xffff7ab13970   304  br x17
0xffff7ab13974   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab13978   312  d63f03e0       constant
0xffff7ab1397c   316  d503201f       constant
0xffff7ab13980   320  7a906000       constant
0xffff7ab13984   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab138fc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab138dc  code target (STUB)  (0xffff7ab06820)
0xffff7ab138f4  code target (STUB)  (0xffff7ab06260)
0xffff7ab13900  code target (STUB)  (0xffff7ab068e0)
0xffff7ab13914  constant pool (size 36)
0xffff7ab13968  runtime entry
0xffff7ab13974  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6585
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 389)
0xffff7ab13a00     0  tbz w1, #0, #+0x34 (addr 0xffff7ab13a34)
0xffff7ab13a04     4  ldur x16, [x1, #-1]
0xffff7ab13a08     8  ldr x17, [x26, #120]
0xffff7ab13a0c    12  cmp x16, x17
0xffff7ab13a10    16  b.ne #+0xc (addr 0xffff7ab13a1c)
0xffff7ab13a14    20  ldur d0, [x1, #7]
0xffff7ab13a18    24  b #+0x20 (addr 0xffff7ab13a38)
0xffff7ab13a1c    28  ldr x16, [x26, #40]
0xffff7ab13a20    32  cmp x1, x16
0xffff7ab13a24    36  b.ne #+0xfc (addr 0xffff7ab13b20)
0xffff7ab13a28    40  ldr x2, [x26, #928]
0xffff7ab13a2c    44  ldur d0, [x2, #7]
0xffff7ab13a30    48  b #+0x8 (addr 0xffff7ab13a38)
0xffff7ab13a34    52  scvtf d0, x1, #32
0xffff7ab13a38    56  tbz w0, #0, #+0x34 (addr 0xffff7ab13a6c)
0xffff7ab13a3c    60  ldur x16, [x0, #-1]
0xffff7ab13a40    64  ldr x17, [x26, #120]
0xffff7ab13a44    68  cmp x16, x17
0xffff7ab13a48    72  b.ne #+0xc (addr 0xffff7ab13a54)
0xffff7ab13a4c    76  ldur d1, [x0, #7]
0xffff7ab13a50    80  b #+0x20 (addr 0xffff7ab13a70)
0xffff7ab13a54    84  ldr x16, [x26, #40]
0xffff7ab13a58    88  cmp x0, x16
0xffff7ab13a5c    92  b.ne #+0xd4 (addr 0xffff7ab13b30)
0xffff7ab13a60    96  ldr x2, [x26, #928]
0xffff7ab13a64   100  ldur d1, [x2, #7]
0xffff7ab13a68   104  b #+0x8 (addr 0xffff7ab13a70)
0xffff7ab13a6c   108  scvtf d1, x0, #32
0xffff7ab13a70   112  fmul d0, d0, d1
0xffff7ab13a74   116  movz x1, #0xe2c0
0xffff7ab13a78   120  movk x1, #0x9ab, lsl #16
0xffff7ab13a7c   124  ldp x2, x0, [x1]
0xffff7ab13a80   128  adds x16, x2, #0x10 (16)
0xffff7ab13a84   132  ccmp x16, x0, #nzCv, lo
0xffff7ab13a88   136  b.hi #+0x20 (addr 0xffff7ab13aa8)
0xffff7ab13a8c   140  str x16, [x1]
0xffff7ab13a90   144  ldr x1, [x26, #120]
0xffff7ab13a94   148  str x1, [x2]
0xffff7ab13a98   152  orr x2, x2, #0x1
0xffff7ab13a9c   156  stur d0, [x2, #7]
0xffff7ab13aa0   160  mov x0, x2
0xffff7ab13aa4   164  ret
0xffff7ab13aa8   168  sub csp, jssp, #0x10 (16)
0xffff7ab13aac   172  stp fp, lr, [jssp, #-16]!
0xffff7ab13ab0   176  movz fp, #0xa00000000
0xffff7ab13ab4   180  sub csp, jssp, #0x8 (8)
0xffff7ab13ab8   184  str fp, [jssp, #-8]!
0xffff7ab13abc   188  add fp, jssp, #0x8 (8)
0xffff7ab13ac0   192  movz x2, #0x0
0xffff7ab13ac4   196  mov x16, lr
0xffff7ab13ac8   200  ldr x17, pc+64 (addr 0x0000ffff7ab13b08)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab13acc   204  blr x17
0xffff7ab13ad0   208  ldur cp, [fp, #-8]
0xffff7ab13ad4   212  movz x0, #0x0
0xffff7ab13ad8   216  movz x1, #0x4b48
0xffff7ab13adc   220  movk x1, #0xe4, lsl #16
0xffff7ab13ae0   224  ldr x16, pc+48 (addr 0x0000ffff7ab13b10)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab13ae4   228  blr x16
0xffff7ab13ae8   232  str x0, [jssp, #16]
0xffff7ab13aec   236  ldr x16, pc+44 (addr 0x0000ffff7ab13b18)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab13af0   240  blr x16
0xffff7ab13af4   244  ldr lr, [jssp, #16]
0xffff7ab13af8   248  ldp xzr, fp, [jssp], #24
0xffff7ab13afc   252  b #-0x60 (addr 0xffff7ab13a9c)
0xffff7ab13b00   256  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab13b04   260  d63f03e0       constant
0xffff7ab13b08   264  7ab06820       constant
0xffff7ab13b0c   268  0000ffff       constant
0xffff7ab13b10   272  7ab06260       constant
0xffff7ab13b14   276  0000ffff       constant
0xffff7ab13b18   280  7ab068e0       constant
0xffff7ab13b1c   284  0000ffff       constant
0xffff7ab13b20   288  movz x16, #0x0
0xffff7ab13b24   292  sub csp, jssp, #0x10 (16)
0xffff7ab13b28   296  stp fp, lr, [jssp, #-16]!
0xffff7ab13b2c   300  bl #+0x14 (addr 0xffff7ab13b40)
0xffff7ab13b30   304  movz x16, #0x8
0xffff7ab13b34   308  sub csp, jssp, #0x10 (16)
0xffff7ab13b38   312  stp fp, lr, [jssp, #-16]!
0xffff7ab13b3c   316  bl #+0x4 (addr 0xffff7ab13b40)
0xffff7ab13b40   320  movz x17, #0xa00000000
0xffff7ab13b44   324  sub csp, jssp, #0x10 (16)
0xffff7ab13b48   328  stp x17, cp, [jssp, #-16]!
0xffff7ab13b4c   332  add fp, jssp, #0x10 (16)
0xffff7ab13b50   336  ldr x17, pc+24 (addr 0x0000ffff7ab13b68)    ;; lazy deoptimization bailout 0
0xffff7ab13b54   340  add x17, x17, x16
0xffff7ab13b58   344  br x17
0xffff7ab13b5c   348  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab13b60   352  d63f03e0       constant
0xffff7ab13b64   356  d503201f       constant
0xffff7ab13b68   360  7a906000       constant
0xffff7ab13b6c   364  0000ffff       constant


Safepoints (size = 21)
0xffff7ab13ae8   232  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab13ac8  code target (STUB)  (0xffff7ab06820)
0xffff7ab13ae0  code target (STUB)  (0xffff7ab06260)
0xffff7ab13aec  code target (STUB)  (0xffff7ab068e0)
0xffff7ab13b00  constant pool (size 32)
0xffff7ab13b50  runtime entry
0xffff7ab13b5c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6585
type = NORMAL
name = BinaryOpICStub(MUL:Number*Number->Number)
compiler = crankshaft
Instructions (size = 389)
0xffff7ab13a00     0  tbz w1, #0, #+0x34 (addr 0xffff7ab13a34)
0xffff7ab13a04     4  ldur x16, [x1, #-1]
0xffff7ab13a08     8  ldr x17, [x26, #120]
0xffff7ab13a0c    12  cmp x16, x17
0xffff7ab13a10    16  b.ne #+0xc (addr 0xffff7ab13a1c)
0xffff7ab13a14    20  ldur d0, [x1, #7]
0xffff7ab13a18    24  b #+0x20 (addr 0xffff7ab13a38)
0xffff7ab13a1c    28  ldr x16, [x26, #40]
0xffff7ab13a20    32  cmp x1, x16
0xffff7ab13a24    36  b.ne #+0xfc (addr 0xffff7ab13b20)
0xffff7ab13a28    40  ldr x2, [x26, #928]
0xffff7ab13a2c    44  ldur d0, [x2, #7]
0xffff7ab13a30    48  b #+0x8 (addr 0xffff7ab13a38)
0xffff7ab13a34    52  scvtf d0, x1, #32
0xffff7ab13a38    56  tbz w0, #0, #+0x34 (addr 0xffff7ab13a6c)
0xffff7ab13a3c    60  ldur x16, [x0, #-1]
0xffff7ab13a40    64  ldr x17, [x26, #120]
0xffff7ab13a44    68  cmp x16, x17
0xffff7ab13a48    72  b.ne #+0xc (addr 0xffff7ab13a54)
0xffff7ab13a4c    76  ldur d1, [x0, #7]
0xffff7ab13a50    80  b #+0x20 (addr 0xffff7ab13a70)
0xffff7ab13a54    84  ldr x16, [x26, #40]
0xffff7ab13a58    88  cmp x0, x16
0xffff7ab13a5c    92  b.ne #+0xd4 (addr 0xffff7ab13b30)
0xffff7ab13a60    96  ldr x2, [x26, #928]
0xffff7ab13a64   100  ldur d1, [x2, #7]
0xffff7ab13a68   104  b #+0x8 (addr 0xffff7ab13a70)
0xffff7ab13a6c   108  scvtf d1, x0, #32
0xffff7ab13a70   112  fmul d0, d0, d1
0xffff7ab13a74   116  movz x1, #0xe2c0
0xffff7ab13a78   120  movk x1, #0x9ab, lsl #16
0xffff7ab13a7c   124  ldp x2, x0, [x1]
0xffff7ab13a80   128  adds x16, x2, #0x10 (16)
0xffff7ab13a84   132  ccmp x16, x0, #nzCv, lo
0xffff7ab13a88   136  b.hi #+0x20 (addr 0xffff7ab13aa8)
0xffff7ab13a8c   140  str x16, [x1]
0xffff7ab13a90   144  ldr x1, [x26, #120]
0xffff7ab13a94   148  str x1, [x2]
0xffff7ab13a98   152  orr x2, x2, #0x1
0xffff7ab13a9c   156  stur d0, [x2, #7]
0xffff7ab13aa0   160  mov x0, x2
0xffff7ab13aa4   164  ret
0xffff7ab13aa8   168  sub csp, jssp, #0x10 (16)
0xffff7ab13aac   172  stp fp, lr, [jssp, #-16]!
0xffff7ab13ab0   176  movz fp, #0xa00000000
0xffff7ab13ab4   180  sub csp, jssp, #0x8 (8)
0xffff7ab13ab8   184  str fp, [jssp, #-8]!
0xffff7ab13abc   188  add fp, jssp, #0x8 (8)
0xffff7ab13ac0   192  movz x2, #0x0
0xffff7ab13ac4   196  mov x16, lr
0xffff7ab13ac8   200  ldr x17, pc+64 (addr 0x0000ffff7ab13b08)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab13acc   204  blr x17
0xffff7ab13ad0   208  ldur cp, [fp, #-8]
0xffff7ab13ad4   212  movz x0, #0x0
0xffff7ab13ad8   216  movz x1, #0x4b48
0xffff7ab13adc   220  movk x1, #0xe4, lsl #16
0xffff7ab13ae0   224  ldr x16, pc+48 (addr 0x0000ffff7ab13b10)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab13ae4   228  blr x16
0xffff7ab13ae8   232  str x0, [jssp, #16]
0xffff7ab13aec   236  ldr x16, pc+44 (addr 0x0000ffff7ab13b18)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab13af0   240  blr x16
0xffff7ab13af4   244  ldr lr, [jssp, #16]
0xffff7ab13af8   248  ldp xzr, fp, [jssp], #24
0xffff7ab13afc   252  b #-0x60 (addr 0xffff7ab13a9c)
0xffff7ab13b00   256  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab13b04   260  d63f03e0       constant
0xffff7ab13b08   264  7ab06820       constant
0xffff7ab13b0c   268  0000ffff       constant
0xffff7ab13b10   272  7ab06260       constant
0xffff7ab13b14   276  0000ffff       constant
0xffff7ab13b18   280  7ab068e0       constant
0xffff7ab13b1c   284  0000ffff       constant
0xffff7ab13b20   288  movz x16, #0x0
0xffff7ab13b24   292  sub csp, jssp, #0x10 (16)
0xffff7ab13b28   296  stp fp, lr, [jssp, #-16]!
0xffff7ab13b2c   300  bl #+0x14 (addr 0xffff7ab13b40)
0xffff7ab13b30   304  movz x16, #0x8
0xffff7ab13b34   308  sub csp, jssp, #0x10 (16)
0xffff7ab13b38   312  stp fp, lr, [jssp, #-16]!
0xffff7ab13b3c   316  bl #+0x4 (addr 0xffff7ab13b40)
0xffff7ab13b40   320  movz x17, #0xa00000000
0xffff7ab13b44   324  sub csp, jssp, #0x10 (16)
0xffff7ab13b48   328  stp x17, cp, [jssp, #-16]!
0xffff7ab13b4c   332  add fp, jssp, #0x10 (16)
0xffff7ab13b50   336  ldr x17, pc+24 (addr 0x0000ffff7ab13b68)    ;; lazy deoptimization bailout 0
0xffff7ab13b54   340  add x17, x17, x16
0xffff7ab13b58   344  br x17
0xffff7ab13b5c   348  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab13b60   352  d63f03e0       constant
0xffff7ab13b64   356  d503201f       constant
0xffff7ab13b68   360  7a906000       constant
0xffff7ab13b6c   364  0000ffff       constant


Safepoints (size = 21)
0xffff7ab13ae8   232  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab13ac8  code target (STUB)  (0xffff7ab06820)
0xffff7ab13ae0  code target (STUB)  (0xffff7ab06260)
0xffff7ab13aec  code target (STUB)  (0xffff7ab068e0)
0xffff7ab13b00  constant pool (size 32)
0xffff7ab13b50  runtime entry
0xffff7ab13b5c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2489
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0xffff7ab13c00     0  mov x2, x0
0xffff7ab13c04     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab13cf8)
0xffff7ab13c08     8  tbz w1, #0, #+0x34 (addr 0xffff7ab13c3c)
0xffff7ab13c0c    12  ldur x16, [x1, #-1]
0xffff7ab13c10    16  ldr x17, [x26, #120]
0xffff7ab13c14    20  cmp x16, x17
0xffff7ab13c18    24  b.ne #+0xc (addr 0xffff7ab13c24)
0xffff7ab13c1c    28  ldur d0, [x1, #7]
0xffff7ab13c20    32  b #+0x20 (addr 0xffff7ab13c40)
0xffff7ab13c24    36  ldr x16, [x26, #40]
0xffff7ab13c28    40  cmp x1, x16
0xffff7ab13c2c    44  b.ne #+0xdc (addr 0xffff7ab13d08)
0xffff7ab13c30    48  ldr x3, [x26, #928]
0xffff7ab13c34    52  ldur d0, [x3, #7]
0xffff7ab13c38    56  b #+0x8 (addr 0xffff7ab13c40)
0xffff7ab13c3c    60  scvtf d0, x1, #32
0xffff7ab13c40    64  scvtf d1, x2, #32
0xffff7ab13c44    68  fmul d0, d0, d1
0xffff7ab13c48    72  movz x1, #0xe2c0
0xffff7ab13c4c    76  movk x1, #0x9ab, lsl #16
0xffff7ab13c50    80  ldp x2, x0, [x1]
0xffff7ab13c54    84  adds x16, x2, #0x10 (16)
0xffff7ab13c58    88  ccmp x16, x0, #nzCv, lo
0xffff7ab13c5c    92  b.hi #+0x20 (addr 0xffff7ab13c7c)
0xffff7ab13c60    96  str x16, [x1]
0xffff7ab13c64   100  ldr x1, [x26, #120]
0xffff7ab13c68   104  str x1, [x2]
0xffff7ab13c6c   108  orr x2, x2, #0x1
0xffff7ab13c70   112  stur d0, [x2, #7]
0xffff7ab13c74   116  mov x0, x2
0xffff7ab13c78   120  ret
0xffff7ab13c7c   124  sub csp, jssp, #0x10 (16)
0xffff7ab13c80   128  stp fp, lr, [jssp, #-16]!
0xffff7ab13c84   132  movz fp, #0xa00000000
0xffff7ab13c88   136  sub csp, jssp, #0x8 (8)
0xffff7ab13c8c   140  str fp, [jssp, #-8]!
0xffff7ab13c90   144  add fp, jssp, #0x8 (8)
0xffff7ab13c94   148  movz x2, #0x0
0xffff7ab13c98   152  mov x16, lr
0xffff7ab13c9c   156  ldr x17, pc+68 (addr 0x0000ffff7ab13ce0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab13ca0   160  blr x17
0xffff7ab13ca4   164  ldur cp, [fp, #-8]
0xffff7ab13ca8   168  movz x0, #0x0
0xffff7ab13cac   172  movz x1, #0x4b48
0xffff7ab13cb0   176  movk x1, #0xe4, lsl #16
0xffff7ab13cb4   180  ldr x16, pc+52 (addr 0x0000ffff7ab13ce8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab13cb8   184  blr x16
0xffff7ab13cbc   188  str x0, [jssp, #16]
0xffff7ab13cc0   192  ldr x16, pc+48 (addr 0x0000ffff7ab13cf0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab13cc4   196  blr x16
0xffff7ab13cc8   200  ldr lr, [jssp, #16]
0xffff7ab13ccc   204  ldp xzr, fp, [jssp], #24
0xffff7ab13cd0   208  b #-0x60 (addr 0xffff7ab13c70)
0xffff7ab13cd4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab13cd8   216  d63f03e0       constant
0xffff7ab13cdc   220  d503201f       constant
0xffff7ab13ce0   224  7ab06820       constant
0xffff7ab13ce4   228  0000ffff       constant
0xffff7ab13ce8   232  7ab06260       constant
0xffff7ab13cec   236  0000ffff       constant
0xffff7ab13cf0   240  7ab068e0       constant
0xffff7ab13cf4   244  0000ffff       constant
0xffff7ab13cf8   248  movz x16, #0x0
0xffff7ab13cfc   252  sub csp, jssp, #0x10 (16)
0xffff7ab13d00   256  stp fp, lr, [jssp, #-16]!
0xffff7ab13d04   260  bl #+0x14 (addr 0xffff7ab13d18)
0xffff7ab13d08   264  movz x16, #0x8
0xffff7ab13d0c   268  sub csp, jssp, #0x10 (16)
0xffff7ab13d10   272  stp fp, lr, [jssp, #-16]!
0xffff7ab13d14   276  bl #+0x4 (addr 0xffff7ab13d18)
0xffff7ab13d18   280  movz x17, #0xa00000000
0xffff7ab13d1c   284  sub csp, jssp, #0x10 (16)
0xffff7ab13d20   288  stp x17, cp, [jssp, #-16]!
0xffff7ab13d24   292  add fp, jssp, #0x10 (16)
0xffff7ab13d28   296  ldr x17, pc+24 (addr 0x0000ffff7ab13d40)    ;; lazy deoptimization bailout 0
0xffff7ab13d2c   300  add x17, x17, x16
0xffff7ab13d30   304  br x17
0xffff7ab13d34   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab13d38   312  d63f03e0       constant
0xffff7ab13d3c   316  d503201f       constant
0xffff7ab13d40   320  7a906000       constant
0xffff7ab13d44   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab13cbc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab13c9c  code target (STUB)  (0xffff7ab06820)
0xffff7ab13cb4  code target (STUB)  (0xffff7ab06260)
0xffff7ab13cc0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab13cd4  constant pool (size 36)
0xffff7ab13d28  runtime entry
0xffff7ab13d34  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2489
type = NORMAL
name = BinaryOpICStub(MUL:Number*Smi->Number)
compiler = crankshaft
Instructions (size = 349)
0xffff7ab13c00     0  mov x2, x0
0xffff7ab13c04     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab13cf8)
0xffff7ab13c08     8  tbz w1, #0, #+0x34 (addr 0xffff7ab13c3c)
0xffff7ab13c0c    12  ldur x16, [x1, #-1]
0xffff7ab13c10    16  ldr x17, [x26, #120]
0xffff7ab13c14    20  cmp x16, x17
0xffff7ab13c18    24  b.ne #+0xc (addr 0xffff7ab13c24)
0xffff7ab13c1c    28  ldur d0, [x1, #7]
0xffff7ab13c20    32  b #+0x20 (addr 0xffff7ab13c40)
0xffff7ab13c24    36  ldr x16, [x26, #40]
0xffff7ab13c28    40  cmp x1, x16
0xffff7ab13c2c    44  b.ne #+0xdc (addr 0xffff7ab13d08)
0xffff7ab13c30    48  ldr x3, [x26, #928]
0xffff7ab13c34    52  ldur d0, [x3, #7]
0xffff7ab13c38    56  b #+0x8 (addr 0xffff7ab13c40)
0xffff7ab13c3c    60  scvtf d0, x1, #32
0xffff7ab13c40    64  scvtf d1, x2, #32
0xffff7ab13c44    68  fmul d0, d0, d1
0xffff7ab13c48    72  movz x1, #0xe2c0
0xffff7ab13c4c    76  movk x1, #0x9ab, lsl #16
0xffff7ab13c50    80  ldp x2, x0, [x1]
0xffff7ab13c54    84  adds x16, x2, #0x10 (16)
0xffff7ab13c58    88  ccmp x16, x0, #nzCv, lo
0xffff7ab13c5c    92  b.hi #+0x20 (addr 0xffff7ab13c7c)
0xffff7ab13c60    96  str x16, [x1]
0xffff7ab13c64   100  ldr x1, [x26, #120]
0xffff7ab13c68   104  str x1, [x2]
0xffff7ab13c6c   108  orr x2, x2, #0x1
0xffff7ab13c70   112  stur d0, [x2, #7]
0xffff7ab13c74   116  mov x0, x2
0xffff7ab13c78   120  ret
0xffff7ab13c7c   124  sub csp, jssp, #0x10 (16)
0xffff7ab13c80   128  stp fp, lr, [jssp, #-16]!
0xffff7ab13c84   132  movz fp, #0xa00000000
0xffff7ab13c88   136  sub csp, jssp, #0x8 (8)
0xffff7ab13c8c   140  str fp, [jssp, #-8]!
0xffff7ab13c90   144  add fp, jssp, #0x8 (8)
0xffff7ab13c94   148  movz x2, #0x0
0xffff7ab13c98   152  mov x16, lr
0xffff7ab13c9c   156  ldr x17, pc+68 (addr 0x0000ffff7ab13ce0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab13ca0   160  blr x17
0xffff7ab13ca4   164  ldur cp, [fp, #-8]
0xffff7ab13ca8   168  movz x0, #0x0
0xffff7ab13cac   172  movz x1, #0x4b48
0xffff7ab13cb0   176  movk x1, #0xe4, lsl #16
0xffff7ab13cb4   180  ldr x16, pc+52 (addr 0x0000ffff7ab13ce8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab13cb8   184  blr x16
0xffff7ab13cbc   188  str x0, [jssp, #16]
0xffff7ab13cc0   192  ldr x16, pc+48 (addr 0x0000ffff7ab13cf0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab13cc4   196  blr x16
0xffff7ab13cc8   200  ldr lr, [jssp, #16]
0xffff7ab13ccc   204  ldp xzr, fp, [jssp], #24
0xffff7ab13cd0   208  b #-0x60 (addr 0xffff7ab13c70)
0xffff7ab13cd4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab13cd8   216  d63f03e0       constant
0xffff7ab13cdc   220  d503201f       constant
0xffff7ab13ce0   224  7ab06820       constant
0xffff7ab13ce4   228  0000ffff       constant
0xffff7ab13ce8   232  7ab06260       constant
0xffff7ab13cec   236  0000ffff       constant
0xffff7ab13cf0   240  7ab068e0       constant
0xffff7ab13cf4   244  0000ffff       constant
0xffff7ab13cf8   248  movz x16, #0x0
0xffff7ab13cfc   252  sub csp, jssp, #0x10 (16)
0xffff7ab13d00   256  stp fp, lr, [jssp, #-16]!
0xffff7ab13d04   260  bl #+0x14 (addr 0xffff7ab13d18)
0xffff7ab13d08   264  movz x16, #0x8
0xffff7ab13d0c   268  sub csp, jssp, #0x10 (16)
0xffff7ab13d10   272  stp fp, lr, [jssp, #-16]!
0xffff7ab13d14   276  bl #+0x4 (addr 0xffff7ab13d18)
0xffff7ab13d18   280  movz x17, #0xa00000000
0xffff7ab13d1c   284  sub csp, jssp, #0x10 (16)
0xffff7ab13d20   288  stp x17, cp, [jssp, #-16]!
0xffff7ab13d24   292  add fp, jssp, #0x10 (16)
0xffff7ab13d28   296  ldr x17, pc+24 (addr 0x0000ffff7ab13d40)    ;; lazy deoptimization bailout 0
0xffff7ab13d2c   300  add x17, x17, x16
0xffff7ab13d30   304  br x17
0xffff7ab13d34   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab13d38   312  d63f03e0       constant
0xffff7ab13d3c   316  d503201f       constant
0xffff7ab13d40   320  7a906000       constant
0xffff7ab13d44   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab13cbc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab13c9c  code target (STUB)  (0xffff7ab06820)
0xffff7ab13cb4  code target (STUB)  (0xffff7ab06260)
0xffff7ab13cc0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab13cd4  constant pool (size 36)
0xffff7ab13d28  runtime entry
0xffff7ab13d34  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4265
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 160)
0xffff7ab13dc0     0  mov x2, x1
0xffff7ab13dc4     4  tbnz w2, #0, #+0x34 (addr 0xffff7ab13df8)
0xffff7ab13dc8     8  mov x3, x0
0xffff7ab13dcc    12  tbnz w3, #0, #+0x3c (addr 0xffff7ab13e08)
0xffff7ab13dd0    16  cmp x3, #0x0 (0)
0xffff7ab13dd4    20  ccmp x2, #0, #nZcv, ne
0xffff7ab13dd8    24  ccmn x3, x2, #nzcv, eq
0xffff7ab13ddc    28  b.mi #+0x3c (addr 0xffff7ab13e18)
0xffff7ab13de0    32  smulh x2, x3, x2
0xffff7ab13de4    36  cmp x2, w2, sxtw
0xffff7ab13de8    40  lsl x2, x2, #32
0xffff7ab13dec    44  b.ne #+0x2c (addr 0xffff7ab13e18)
0xffff7ab13df0    48  mov x0, x2
0xffff7ab13df4    52  ret
0xffff7ab13df8    56  movz x16, #0x0
0xffff7ab13dfc    60  sub csp, jssp, #0x10 (16)
0xffff7ab13e00    64  stp fp, lr, [jssp, #-16]!
0xffff7ab13e04    68  bl #+0x24 (addr 0xffff7ab13e28)
0xffff7ab13e08    72  movz x16, #0x8
0xffff7ab13e0c    76  sub csp, jssp, #0x10 (16)
0xffff7ab13e10    80  stp fp, lr, [jssp, #-16]!
0xffff7ab13e14    84  bl #+0x14 (addr 0xffff7ab13e28)
0xffff7ab13e18    88  movz x16, #0x10
0xffff7ab13e1c    92  sub csp, jssp, #0x10 (16)
0xffff7ab13e20    96  stp fp, lr, [jssp, #-16]!
0xffff7ab13e24   100  bl #+0x4 (addr 0xffff7ab13e28)
0xffff7ab13e28   104  movz x17, #0xa00000000
0xffff7ab13e2c   108  sub csp, jssp, #0x10 (16)
0xffff7ab13e30   112  stp x17, cp, [jssp, #-16]!
0xffff7ab13e34   116  add fp, jssp, #0x10 (16)
0xffff7ab13e38   120  ldr x17, pc+24 (addr 0x0000ffff7ab13e50)    ;; lazy deoptimization bailout 0
0xffff7ab13e3c   124  add x17, x17, x16
0xffff7ab13e40   128  br x17
0xffff7ab13e44   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab13e48   136  d63f03e0       constant
0xffff7ab13e4c   140  d503201f       constant
0xffff7ab13e50   144  7a906000       constant
0xffff7ab13e54   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab13e38  runtime entry
0xffff7ab13e44  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4265
type = NORMAL
name = BinaryOpICStub(MUL:Smi*Int32->Int32)
compiler = crankshaft
Instructions (size = 160)
0xffff7ab13dc0     0  mov x2, x1
0xffff7ab13dc4     4  tbnz w2, #0, #+0x34 (addr 0xffff7ab13df8)
0xffff7ab13dc8     8  mov x3, x0
0xffff7ab13dcc    12  tbnz w3, #0, #+0x3c (addr 0xffff7ab13e08)
0xffff7ab13dd0    16  cmp x3, #0x0 (0)
0xffff7ab13dd4    20  ccmp x2, #0, #nZcv, ne
0xffff7ab13dd8    24  ccmn x3, x2, #nzcv, eq
0xffff7ab13ddc    28  b.mi #+0x3c (addr 0xffff7ab13e18)
0xffff7ab13de0    32  smulh x2, x3, x2
0xffff7ab13de4    36  cmp x2, w2, sxtw
0xffff7ab13de8    40  lsl x2, x2, #32
0xffff7ab13dec    44  b.ne #+0x2c (addr 0xffff7ab13e18)
0xffff7ab13df0    48  mov x0, x2
0xffff7ab13df4    52  ret
0xffff7ab13df8    56  movz x16, #0x0
0xffff7ab13dfc    60  sub csp, jssp, #0x10 (16)
0xffff7ab13e00    64  stp fp, lr, [jssp, #-16]!
0xffff7ab13e04    68  bl #+0x24 (addr 0xffff7ab13e28)
0xffff7ab13e08    72  movz x16, #0x8
0xffff7ab13e0c    76  sub csp, jssp, #0x10 (16)
0xffff7ab13e10    80  stp fp, lr, [jssp, #-16]!
0xffff7ab13e14    84  bl #+0x14 (addr 0xffff7ab13e28)
0xffff7ab13e18    88  movz x16, #0x10
0xffff7ab13e1c    92  sub csp, jssp, #0x10 (16)
0xffff7ab13e20    96  stp fp, lr, [jssp, #-16]!
0xffff7ab13e24   100  bl #+0x4 (addr 0xffff7ab13e28)
0xffff7ab13e28   104  movz x17, #0xa00000000
0xffff7ab13e2c   108  sub csp, jssp, #0x10 (16)
0xffff7ab13e30   112  stp x17, cp, [jssp, #-16]!
0xffff7ab13e34   116  add fp, jssp, #0x10 (16)
0xffff7ab13e38   120  ldr x17, pc+24 (addr 0x0000ffff7ab13e50)    ;; lazy deoptimization bailout 0
0xffff7ab13e3c   124  add x17, x17, x16
0xffff7ab13e40   128  br x17
0xffff7ab13e44   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab13e48   136  d63f03e0       constant
0xffff7ab13e4c   140  d503201f       constant
0xffff7ab13e50   144  7a906000       constant
0xffff7ab13e54   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab13e38  runtime entry
0xffff7ab13e44  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4281
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0xffff7ab13ec0     0  mov x2, x1
0xffff7ab13ec4     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab13f88)
0xffff7ab13ec8     8  mov x3, x0
0xffff7ab13ecc    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab13f98)
0xffff7ab13ed0    16  scvtf d0, x2, #32
0xffff7ab13ed4    20  scvtf d1, x3, #32
0xffff7ab13ed8    24  fmul d0, d0, d1
0xffff7ab13edc    28  movz x1, #0xe2c0
0xffff7ab13ee0    32  movk x1, #0x9ab, lsl #16
0xffff7ab13ee4    36  ldp x2, x0, [x1]
0xffff7ab13ee8    40  adds x16, x2, #0x10 (16)
0xffff7ab13eec    44  ccmp x16, x0, #nzCv, lo
0xffff7ab13ef0    48  b.hi #+0x20 (addr 0xffff7ab13f10)
0xffff7ab13ef4    52  str x16, [x1]
0xffff7ab13ef8    56  ldr x1, [x26, #120]
0xffff7ab13efc    60  str x1, [x2]
0xffff7ab13f00    64  orr x2, x2, #0x1
0xffff7ab13f04    68  stur d0, [x2, #7]
0xffff7ab13f08    72  mov x0, x2
0xffff7ab13f0c    76  ret
0xffff7ab13f10    80  sub csp, jssp, #0x10 (16)
0xffff7ab13f14    84  stp fp, lr, [jssp, #-16]!
0xffff7ab13f18    88  movz fp, #0xa00000000
0xffff7ab13f1c    92  sub csp, jssp, #0x8 (8)
0xffff7ab13f20    96  str fp, [jssp, #-8]!
0xffff7ab13f24   100  add fp, jssp, #0x8 (8)
0xffff7ab13f28   104  movz x2, #0x0
0xffff7ab13f2c   108  mov x16, lr
0xffff7ab13f30   112  ldr x17, pc+64 (addr 0x0000ffff7ab13f70)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab13f34   116  blr x17
0xffff7ab13f38   120  ldur cp, [fp, #-8]
0xffff7ab13f3c   124  movz x0, #0x0
0xffff7ab13f40   128  movz x1, #0x4b48
0xffff7ab13f44   132  movk x1, #0xe4, lsl #16
0xffff7ab13f48   136  ldr x16, pc+48 (addr 0x0000ffff7ab13f78)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab13f4c   140  blr x16
0xffff7ab13f50   144  str x0, [jssp, #16]
0xffff7ab13f54   148  ldr x16, pc+44 (addr 0x0000ffff7ab13f80)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab13f58   152  blr x16
0xffff7ab13f5c   156  ldr lr, [jssp, #16]
0xffff7ab13f60   160  ldp xzr, fp, [jssp], #24
0xffff7ab13f64   164  b #-0x60 (addr 0xffff7ab13f04)
0xffff7ab13f68   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab13f6c   172  d63f03e0       constant
0xffff7ab13f70   176  7ab06820       constant
0xffff7ab13f74   180  0000ffff       constant
0xffff7ab13f78   184  7ab06260       constant
0xffff7ab13f7c   188  0000ffff       constant
0xffff7ab13f80   192  7ab068e0       constant
0xffff7ab13f84   196  0000ffff       constant
0xffff7ab13f88   200  movz x16, #0x0
0xffff7ab13f8c   204  sub csp, jssp, #0x10 (16)
0xffff7ab13f90   208  stp fp, lr, [jssp, #-16]!
0xffff7ab13f94   212  bl #+0x14 (addr 0xffff7ab13fa8)
0xffff7ab13f98   216  movz x16, #0x8
0xffff7ab13f9c   220  sub csp, jssp, #0x10 (16)
0xffff7ab13fa0   224  stp fp, lr, [jssp, #-16]!
0xffff7ab13fa4   228  bl #+0x4 (addr 0xffff7ab13fa8)
0xffff7ab13fa8   232  movz x17, #0xa00000000
0xffff7ab13fac   236  sub csp, jssp, #0x10 (16)
0xffff7ab13fb0   240  stp x17, cp, [jssp, #-16]!
0xffff7ab13fb4   244  add fp, jssp, #0x10 (16)
0xffff7ab13fb8   248  ldr x17, pc+24 (addr 0x0000ffff7ab13fd0)    ;; lazy deoptimization bailout 0
0xffff7ab13fbc   252  add x17, x17, x16
0xffff7ab13fc0   256  br x17
0xffff7ab13fc4   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab13fc8   264  d63f03e0       constant
0xffff7ab13fcc   268  d503201f       constant
0xffff7ab13fd0   272  7a906000       constant
0xffff7ab13fd4   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab13f50   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab13f30  code target (STUB)  (0xffff7ab06820)
0xffff7ab13f48  code target (STUB)  (0xffff7ab06260)
0xffff7ab13f54  code target (STUB)  (0xffff7ab068e0)
0xffff7ab13f68  constant pool (size 32)
0xffff7ab13fb8  runtime entry
0xffff7ab13fc4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4281
type = NORMAL
name = BinaryOpICStub(MUL:Smi*Int32->Number)
compiler = crankshaft
Instructions (size = 301)
0xffff7ab13ec0     0  mov x2, x1
0xffff7ab13ec4     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab13f88)
0xffff7ab13ec8     8  mov x3, x0
0xffff7ab13ecc    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab13f98)
0xffff7ab13ed0    16  scvtf d0, x2, #32
0xffff7ab13ed4    20  scvtf d1, x3, #32
0xffff7ab13ed8    24  fmul d0, d0, d1
0xffff7ab13edc    28  movz x1, #0xe2c0
0xffff7ab13ee0    32  movk x1, #0x9ab, lsl #16
0xffff7ab13ee4    36  ldp x2, x0, [x1]
0xffff7ab13ee8    40  adds x16, x2, #0x10 (16)
0xffff7ab13eec    44  ccmp x16, x0, #nzCv, lo
0xffff7ab13ef0    48  b.hi #+0x20 (addr 0xffff7ab13f10)
0xffff7ab13ef4    52  str x16, [x1]
0xffff7ab13ef8    56  ldr x1, [x26, #120]
0xffff7ab13efc    60  str x1, [x2]
0xffff7ab13f00    64  orr x2, x2, #0x1
0xffff7ab13f04    68  stur d0, [x2, #7]
0xffff7ab13f08    72  mov x0, x2
0xffff7ab13f0c    76  ret
0xffff7ab13f10    80  sub csp, jssp, #0x10 (16)
0xffff7ab13f14    84  stp fp, lr, [jssp, #-16]!
0xffff7ab13f18    88  movz fp, #0xa00000000
0xffff7ab13f1c    92  sub csp, jssp, #0x8 (8)
0xffff7ab13f20    96  str fp, [jssp, #-8]!
0xffff7ab13f24   100  add fp, jssp, #0x8 (8)
0xffff7ab13f28   104  movz x2, #0x0
0xffff7ab13f2c   108  mov x16, lr
0xffff7ab13f30   112  ldr x17, pc+64 (addr 0x0000ffff7ab13f70)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab13f34   116  blr x17
0xffff7ab13f38   120  ldur cp, [fp, #-8]
0xffff7ab13f3c   124  movz x0, #0x0
0xffff7ab13f40   128  movz x1, #0x4b48
0xffff7ab13f44   132  movk x1, #0xe4, lsl #16
0xffff7ab13f48   136  ldr x16, pc+48 (addr 0x0000ffff7ab13f78)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab13f4c   140  blr x16
0xffff7ab13f50   144  str x0, [jssp, #16]
0xffff7ab13f54   148  ldr x16, pc+44 (addr 0x0000ffff7ab13f80)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab13f58   152  blr x16
0xffff7ab13f5c   156  ldr lr, [jssp, #16]
0xffff7ab13f60   160  ldp xzr, fp, [jssp], #24
0xffff7ab13f64   164  b #-0x60 (addr 0xffff7ab13f04)
0xffff7ab13f68   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab13f6c   172  d63f03e0       constant
0xffff7ab13f70   176  7ab06820       constant
0xffff7ab13f74   180  0000ffff       constant
0xffff7ab13f78   184  7ab06260       constant
0xffff7ab13f7c   188  0000ffff       constant
0xffff7ab13f80   192  7ab068e0       constant
0xffff7ab13f84   196  0000ffff       constant
0xffff7ab13f88   200  movz x16, #0x0
0xffff7ab13f8c   204  sub csp, jssp, #0x10 (16)
0xffff7ab13f90   208  stp fp, lr, [jssp, #-16]!
0xffff7ab13f94   212  bl #+0x14 (addr 0xffff7ab13fa8)
0xffff7ab13f98   216  movz x16, #0x8
0xffff7ab13f9c   220  sub csp, jssp, #0x10 (16)
0xffff7ab13fa0   224  stp fp, lr, [jssp, #-16]!
0xffff7ab13fa4   228  bl #+0x4 (addr 0xffff7ab13fa8)
0xffff7ab13fa8   232  movz x17, #0xa00000000
0xffff7ab13fac   236  sub csp, jssp, #0x10 (16)
0xffff7ab13fb0   240  stp x17, cp, [jssp, #-16]!
0xffff7ab13fb4   244  add fp, jssp, #0x10 (16)
0xffff7ab13fb8   248  ldr x17, pc+24 (addr 0x0000ffff7ab13fd0)    ;; lazy deoptimization bailout 0
0xffff7ab13fbc   252  add x17, x17, x16
0xffff7ab13fc0   256  br x17
0xffff7ab13fc4   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab13fc8   264  d63f03e0       constant
0xffff7ab13fcc   268  d503201f       constant
0xffff7ab13fd0   272  7a906000       constant
0xffff7ab13fd4   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab13f50   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab13f30  code target (STUB)  (0xffff7ab06820)
0xffff7ab13f48  code target (STUB)  (0xffff7ab06260)
0xffff7ab13f54  code target (STUB)  (0xffff7ab068e0)
0xffff7ab13f68  constant pool (size 32)
0xffff7ab13fb8  runtime entry
0xffff7ab13fc4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6329
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0xffff7ab14060     0  mov x2, x1
0xffff7ab14064     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab14158)
0xffff7ab14068     8  tbz w0, #0, #+0x34 (addr 0xffff7ab1409c)
0xffff7ab1406c    12  ldur x16, [x0, #-1]
0xffff7ab14070    16  ldr x17, [x26, #120]
0xffff7ab14074    20  cmp x16, x17
0xffff7ab14078    24  b.ne #+0xc (addr 0xffff7ab14084)
0xffff7ab1407c    28  ldur d0, [x0, #7]
0xffff7ab14080    32  b #+0x20 (addr 0xffff7ab140a0)
0xffff7ab14084    36  ldr x16, [x26, #40]
0xffff7ab14088    40  cmp x0, x16
0xffff7ab1408c    44  b.ne #+0xdc (addr 0xffff7ab14168)
0xffff7ab14090    48  ldr x3, [x26, #928]
0xffff7ab14094    52  ldur d0, [x3, #7]
0xffff7ab14098    56  b #+0x8 (addr 0xffff7ab140a0)
0xffff7ab1409c    60  scvtf d0, x0, #32
0xffff7ab140a0    64  scvtf d1, x2, #32
0xffff7ab140a4    68  fmul d0, d1, d0
0xffff7ab140a8    72  movz x1, #0xe2c0
0xffff7ab140ac    76  movk x1, #0x9ab, lsl #16
0xffff7ab140b0    80  ldp x2, x0, [x1]
0xffff7ab140b4    84  adds x16, x2, #0x10 (16)
0xffff7ab140b8    88  ccmp x16, x0, #nzCv, lo
0xffff7ab140bc    92  b.hi #+0x20 (addr 0xffff7ab140dc)
0xffff7ab140c0    96  str x16, [x1]
0xffff7ab140c4   100  ldr x1, [x26, #120]
0xffff7ab140c8   104  str x1, [x2]
0xffff7ab140cc   108  orr x2, x2, #0x1
0xffff7ab140d0   112  stur d0, [x2, #7]
0xffff7ab140d4   116  mov x0, x2
0xffff7ab140d8   120  ret
0xffff7ab140dc   124  sub csp, jssp, #0x10 (16)
0xffff7ab140e0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab140e4   132  movz fp, #0xa00000000
0xffff7ab140e8   136  sub csp, jssp, #0x8 (8)
0xffff7ab140ec   140  str fp, [jssp, #-8]!
0xffff7ab140f0   144  add fp, jssp, #0x8 (8)
0xffff7ab140f4   148  movz x2, #0x0
0xffff7ab140f8   152  mov x16, lr
0xffff7ab140fc   156  ldr x17, pc+68 (addr 0x0000ffff7ab14140)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab14100   160  blr x17
0xffff7ab14104   164  ldur cp, [fp, #-8]
0xffff7ab14108   168  movz x0, #0x0
0xffff7ab1410c   172  movz x1, #0x4b48
0xffff7ab14110   176  movk x1, #0xe4, lsl #16
0xffff7ab14114   180  ldr x16, pc+52 (addr 0x0000ffff7ab14148)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab14118   184  blr x16
0xffff7ab1411c   188  str x0, [jssp, #16]
0xffff7ab14120   192  ldr x16, pc+48 (addr 0x0000ffff7ab14150)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab14124   196  blr x16
0xffff7ab14128   200  ldr lr, [jssp, #16]
0xffff7ab1412c   204  ldp xzr, fp, [jssp], #24
0xffff7ab14130   208  b #-0x60 (addr 0xffff7ab140d0)
0xffff7ab14134   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab14138   216  d63f03e0       constant
0xffff7ab1413c   220  d503201f       constant
0xffff7ab14140   224  7ab06820       constant
0xffff7ab14144   228  0000ffff       constant
0xffff7ab14148   232  7ab06260       constant
0xffff7ab1414c   236  0000ffff       constant
0xffff7ab14150   240  7ab068e0       constant
0xffff7ab14154   244  0000ffff       constant
0xffff7ab14158   248  movz x16, #0x0
0xffff7ab1415c   252  sub csp, jssp, #0x10 (16)
0xffff7ab14160   256  stp fp, lr, [jssp, #-16]!
0xffff7ab14164   260  bl #+0x14 (addr 0xffff7ab14178)
0xffff7ab14168   264  movz x16, #0x8
0xffff7ab1416c   268  sub csp, jssp, #0x10 (16)
0xffff7ab14170   272  stp fp, lr, [jssp, #-16]!
0xffff7ab14174   276  bl #+0x4 (addr 0xffff7ab14178)
0xffff7ab14178   280  movz x17, #0xa00000000
0xffff7ab1417c   284  sub csp, jssp, #0x10 (16)
0xffff7ab14180   288  stp x17, cp, [jssp, #-16]!
0xffff7ab14184   292  add fp, jssp, #0x10 (16)
0xffff7ab14188   296  ldr x17, pc+24 (addr 0x0000ffff7ab141a0)    ;; lazy deoptimization bailout 0
0xffff7ab1418c   300  add x17, x17, x16
0xffff7ab14190   304  br x17
0xffff7ab14194   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab14198   312  d63f03e0       constant
0xffff7ab1419c   316  d503201f       constant
0xffff7ab141a0   320  7a906000       constant
0xffff7ab141a4   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab1411c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab140fc  code target (STUB)  (0xffff7ab06820)
0xffff7ab14114  code target (STUB)  (0xffff7ab06260)
0xffff7ab14120  code target (STUB)  (0xffff7ab068e0)
0xffff7ab14134  constant pool (size 36)
0xffff7ab14188  runtime entry
0xffff7ab14194  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6329
type = NORMAL
name = BinaryOpICStub(MUL:Smi*Number->Number)
compiler = crankshaft
Instructions (size = 349)
0xffff7ab14060     0  mov x2, x1
0xffff7ab14064     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab14158)
0xffff7ab14068     8  tbz w0, #0, #+0x34 (addr 0xffff7ab1409c)
0xffff7ab1406c    12  ldur x16, [x0, #-1]
0xffff7ab14070    16  ldr x17, [x26, #120]
0xffff7ab14074    20  cmp x16, x17
0xffff7ab14078    24  b.ne #+0xc (addr 0xffff7ab14084)
0xffff7ab1407c    28  ldur d0, [x0, #7]
0xffff7ab14080    32  b #+0x20 (addr 0xffff7ab140a0)
0xffff7ab14084    36  ldr x16, [x26, #40]
0xffff7ab14088    40  cmp x0, x16
0xffff7ab1408c    44  b.ne #+0xdc (addr 0xffff7ab14168)
0xffff7ab14090    48  ldr x3, [x26, #928]
0xffff7ab14094    52  ldur d0, [x3, #7]
0xffff7ab14098    56  b #+0x8 (addr 0xffff7ab140a0)
0xffff7ab1409c    60  scvtf d0, x0, #32
0xffff7ab140a0    64  scvtf d1, x2, #32
0xffff7ab140a4    68  fmul d0, d1, d0
0xffff7ab140a8    72  movz x1, #0xe2c0
0xffff7ab140ac    76  movk x1, #0x9ab, lsl #16
0xffff7ab140b0    80  ldp x2, x0, [x1]
0xffff7ab140b4    84  adds x16, x2, #0x10 (16)
0xffff7ab140b8    88  ccmp x16, x0, #nzCv, lo
0xffff7ab140bc    92  b.hi #+0x20 (addr 0xffff7ab140dc)
0xffff7ab140c0    96  str x16, [x1]
0xffff7ab140c4   100  ldr x1, [x26, #120]
0xffff7ab140c8   104  str x1, [x2]
0xffff7ab140cc   108  orr x2, x2, #0x1
0xffff7ab140d0   112  stur d0, [x2, #7]
0xffff7ab140d4   116  mov x0, x2
0xffff7ab140d8   120  ret
0xffff7ab140dc   124  sub csp, jssp, #0x10 (16)
0xffff7ab140e0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab140e4   132  movz fp, #0xa00000000
0xffff7ab140e8   136  sub csp, jssp, #0x8 (8)
0xffff7ab140ec   140  str fp, [jssp, #-8]!
0xffff7ab140f0   144  add fp, jssp, #0x8 (8)
0xffff7ab140f4   148  movz x2, #0x0
0xffff7ab140f8   152  mov x16, lr
0xffff7ab140fc   156  ldr x17, pc+68 (addr 0x0000ffff7ab14140)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab14100   160  blr x17
0xffff7ab14104   164  ldur cp, [fp, #-8]
0xffff7ab14108   168  movz x0, #0x0
0xffff7ab1410c   172  movz x1, #0x4b48
0xffff7ab14110   176  movk x1, #0xe4, lsl #16
0xffff7ab14114   180  ldr x16, pc+52 (addr 0x0000ffff7ab14148)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab14118   184  blr x16
0xffff7ab1411c   188  str x0, [jssp, #16]
0xffff7ab14120   192  ldr x16, pc+48 (addr 0x0000ffff7ab14150)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab14124   196  blr x16
0xffff7ab14128   200  ldr lr, [jssp, #16]
0xffff7ab1412c   204  ldp xzr, fp, [jssp], #24
0xffff7ab14130   208  b #-0x60 (addr 0xffff7ab140d0)
0xffff7ab14134   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab14138   216  d63f03e0       constant
0xffff7ab1413c   220  d503201f       constant
0xffff7ab14140   224  7ab06820       constant
0xffff7ab14144   228  0000ffff       constant
0xffff7ab14148   232  7ab06260       constant
0xffff7ab1414c   236  0000ffff       constant
0xffff7ab14150   240  7ab068e0       constant
0xffff7ab14154   244  0000ffff       constant
0xffff7ab14158   248  movz x16, #0x0
0xffff7ab1415c   252  sub csp, jssp, #0x10 (16)
0xffff7ab14160   256  stp fp, lr, [jssp, #-16]!
0xffff7ab14164   260  bl #+0x14 (addr 0xffff7ab14178)
0xffff7ab14168   264  movz x16, #0x8
0xffff7ab1416c   268  sub csp, jssp, #0x10 (16)
0xffff7ab14170   272  stp fp, lr, [jssp, #-16]!
0xffff7ab14174   276  bl #+0x4 (addr 0xffff7ab14178)
0xffff7ab14178   280  movz x17, #0xa00000000
0xffff7ab1417c   284  sub csp, jssp, #0x10 (16)
0xffff7ab14180   288  stp x17, cp, [jssp, #-16]!
0xffff7ab14184   292  add fp, jssp, #0x10 (16)
0xffff7ab14188   296  ldr x17, pc+24 (addr 0x0000ffff7ab141a0)    ;; lazy deoptimization bailout 0
0xffff7ab1418c   300  add x17, x17, x16
0xffff7ab14190   304  br x17
0xffff7ab14194   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab14198   312  d63f03e0       constant
0xffff7ab1419c   316  d503201f       constant
0xffff7ab141a0   320  7a906000       constant
0xffff7ab141a4   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab1411c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab140fc  code target (STUB)  (0xffff7ab06820)
0xffff7ab14114  code target (STUB)  (0xffff7ab06260)
0xffff7ab14120  code target (STUB)  (0xffff7ab068e0)
0xffff7ab14134  constant pool (size 36)
0xffff7ab14188  runtime entry
0xffff7ab14194  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2217
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 160)
0xffff7ab14220     0  mov x2, x1
0xffff7ab14224     4  tbnz w2, #0, #+0x34 (addr 0xffff7ab14258)
0xffff7ab14228     8  mov x3, x0
0xffff7ab1422c    12  tbnz w3, #0, #+0x3c (addr 0xffff7ab14268)
0xffff7ab14230    16  cmp x3, #0x0 (0)
0xffff7ab14234    20  ccmp x2, #0, #nZcv, ne
0xffff7ab14238    24  ccmn x3, x2, #nzcv, eq
0xffff7ab1423c    28  b.mi #+0x3c (addr 0xffff7ab14278)
0xffff7ab14240    32  smulh x2, x3, x2
0xffff7ab14244    36  cmp x2, w2, sxtw
0xffff7ab14248    40  lsl x2, x2, #32
0xffff7ab1424c    44  b.ne #+0x2c (addr 0xffff7ab14278)
0xffff7ab14250    48  mov x0, x2
0xffff7ab14254    52  ret
0xffff7ab14258    56  movz x16, #0x0
0xffff7ab1425c    60  sub csp, jssp, #0x10 (16)
0xffff7ab14260    64  stp fp, lr, [jssp, #-16]!
0xffff7ab14264    68  bl #+0x24 (addr 0xffff7ab14288)
0xffff7ab14268    72  movz x16, #0x8
0xffff7ab1426c    76  sub csp, jssp, #0x10 (16)
0xffff7ab14270    80  stp fp, lr, [jssp, #-16]!
0xffff7ab14274    84  bl #+0x14 (addr 0xffff7ab14288)
0xffff7ab14278    88  movz x16, #0x10
0xffff7ab1427c    92  sub csp, jssp, #0x10 (16)
0xffff7ab14280    96  stp fp, lr, [jssp, #-16]!
0xffff7ab14284   100  bl #+0x4 (addr 0xffff7ab14288)
0xffff7ab14288   104  movz x17, #0xa00000000
0xffff7ab1428c   108  sub csp, jssp, #0x10 (16)
0xffff7ab14290   112  stp x17, cp, [jssp, #-16]!
0xffff7ab14294   116  add fp, jssp, #0x10 (16)
0xffff7ab14298   120  ldr x17, pc+24 (addr 0x0000ffff7ab142b0)    ;; lazy deoptimization bailout 0
0xffff7ab1429c   124  add x17, x17, x16
0xffff7ab142a0   128  br x17
0xffff7ab142a4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab142a8   136  d63f03e0       constant
0xffff7ab142ac   140  d503201f       constant
0xffff7ab142b0   144  7a906000       constant
0xffff7ab142b4   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14298  runtime entry
0xffff7ab142a4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2217
type = NORMAL
name = BinaryOpICStub(MUL:Smi*Smi->Int32)
compiler = crankshaft
Instructions (size = 160)
0xffff7ab14220     0  mov x2, x1
0xffff7ab14224     4  tbnz w2, #0, #+0x34 (addr 0xffff7ab14258)
0xffff7ab14228     8  mov x3, x0
0xffff7ab1422c    12  tbnz w3, #0, #+0x3c (addr 0xffff7ab14268)
0xffff7ab14230    16  cmp x3, #0x0 (0)
0xffff7ab14234    20  ccmp x2, #0, #nZcv, ne
0xffff7ab14238    24  ccmn x3, x2, #nzcv, eq
0xffff7ab1423c    28  b.mi #+0x3c (addr 0xffff7ab14278)
0xffff7ab14240    32  smulh x2, x3, x2
0xffff7ab14244    36  cmp x2, w2, sxtw
0xffff7ab14248    40  lsl x2, x2, #32
0xffff7ab1424c    44  b.ne #+0x2c (addr 0xffff7ab14278)
0xffff7ab14250    48  mov x0, x2
0xffff7ab14254    52  ret
0xffff7ab14258    56  movz x16, #0x0
0xffff7ab1425c    60  sub csp, jssp, #0x10 (16)
0xffff7ab14260    64  stp fp, lr, [jssp, #-16]!
0xffff7ab14264    68  bl #+0x24 (addr 0xffff7ab14288)
0xffff7ab14268    72  movz x16, #0x8
0xffff7ab1426c    76  sub csp, jssp, #0x10 (16)
0xffff7ab14270    80  stp fp, lr, [jssp, #-16]!
0xffff7ab14274    84  bl #+0x14 (addr 0xffff7ab14288)
0xffff7ab14278    88  movz x16, #0x10
0xffff7ab1427c    92  sub csp, jssp, #0x10 (16)
0xffff7ab14280    96  stp fp, lr, [jssp, #-16]!
0xffff7ab14284   100  bl #+0x4 (addr 0xffff7ab14288)
0xffff7ab14288   104  movz x17, #0xa00000000
0xffff7ab1428c   108  sub csp, jssp, #0x10 (16)
0xffff7ab14290   112  stp x17, cp, [jssp, #-16]!
0xffff7ab14294   116  add fp, jssp, #0x10 (16)
0xffff7ab14298   120  ldr x17, pc+24 (addr 0x0000ffff7ab142b0)    ;; lazy deoptimization bailout 0
0xffff7ab1429c   124  add x17, x17, x16
0xffff7ab142a0   128  br x17
0xffff7ab142a4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab142a8   136  d63f03e0       constant
0xffff7ab142ac   140  d503201f       constant
0xffff7ab142b0   144  7a906000       constant
0xffff7ab142b4   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14298  runtime entry
0xffff7ab142a4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2233
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0xffff7ab14320     0  mov x2, x1
0xffff7ab14324     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab143e8)
0xffff7ab14328     8  mov x3, x0
0xffff7ab1432c    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab143f8)
0xffff7ab14330    16  scvtf d0, x2, #32
0xffff7ab14334    20  scvtf d1, x3, #32
0xffff7ab14338    24  fmul d0, d0, d1
0xffff7ab1433c    28  movz x1, #0xe2c0
0xffff7ab14340    32  movk x1, #0x9ab, lsl #16
0xffff7ab14344    36  ldp x2, x0, [x1]
0xffff7ab14348    40  adds x16, x2, #0x10 (16)
0xffff7ab1434c    44  ccmp x16, x0, #nzCv, lo
0xffff7ab14350    48  b.hi #+0x20 (addr 0xffff7ab14370)
0xffff7ab14354    52  str x16, [x1]
0xffff7ab14358    56  ldr x1, [x26, #120]
0xffff7ab1435c    60  str x1, [x2]
0xffff7ab14360    64  orr x2, x2, #0x1
0xffff7ab14364    68  stur d0, [x2, #7]
0xffff7ab14368    72  mov x0, x2
0xffff7ab1436c    76  ret
0xffff7ab14370    80  sub csp, jssp, #0x10 (16)
0xffff7ab14374    84  stp fp, lr, [jssp, #-16]!
0xffff7ab14378    88  movz fp, #0xa00000000
0xffff7ab1437c    92  sub csp, jssp, #0x8 (8)
0xffff7ab14380    96  str fp, [jssp, #-8]!
0xffff7ab14384   100  add fp, jssp, #0x8 (8)
0xffff7ab14388   104  movz x2, #0x0
0xffff7ab1438c   108  mov x16, lr
0xffff7ab14390   112  ldr x17, pc+64 (addr 0x0000ffff7ab143d0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab14394   116  blr x17
0xffff7ab14398   120  ldur cp, [fp, #-8]
0xffff7ab1439c   124  movz x0, #0x0
0xffff7ab143a0   128  movz x1, #0x4b48
0xffff7ab143a4   132  movk x1, #0xe4, lsl #16
0xffff7ab143a8   136  ldr x16, pc+48 (addr 0x0000ffff7ab143d8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab143ac   140  blr x16
0xffff7ab143b0   144  str x0, [jssp, #16]
0xffff7ab143b4   148  ldr x16, pc+44 (addr 0x0000ffff7ab143e0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab143b8   152  blr x16
0xffff7ab143bc   156  ldr lr, [jssp, #16]
0xffff7ab143c0   160  ldp xzr, fp, [jssp], #24
0xffff7ab143c4   164  b #-0x60 (addr 0xffff7ab14364)
0xffff7ab143c8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab143cc   172  d63f03e0       constant
0xffff7ab143d0   176  7ab06820       constant
0xffff7ab143d4   180  0000ffff       constant
0xffff7ab143d8   184  7ab06260       constant
0xffff7ab143dc   188  0000ffff       constant
0xffff7ab143e0   192  7ab068e0       constant
0xffff7ab143e4   196  0000ffff       constant
0xffff7ab143e8   200  movz x16, #0x0
0xffff7ab143ec   204  sub csp, jssp, #0x10 (16)
0xffff7ab143f0   208  stp fp, lr, [jssp, #-16]!
0xffff7ab143f4   212  bl #+0x14 (addr 0xffff7ab14408)
0xffff7ab143f8   216  movz x16, #0x8
0xffff7ab143fc   220  sub csp, jssp, #0x10 (16)
0xffff7ab14400   224  stp fp, lr, [jssp, #-16]!
0xffff7ab14404   228  bl #+0x4 (addr 0xffff7ab14408)
0xffff7ab14408   232  movz x17, #0xa00000000
0xffff7ab1440c   236  sub csp, jssp, #0x10 (16)
0xffff7ab14410   240  stp x17, cp, [jssp, #-16]!
0xffff7ab14414   244  add fp, jssp, #0x10 (16)
0xffff7ab14418   248  ldr x17, pc+24 (addr 0x0000ffff7ab14430)    ;; lazy deoptimization bailout 0
0xffff7ab1441c   252  add x17, x17, x16
0xffff7ab14420   256  br x17
0xffff7ab14424   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab14428   264  d63f03e0       constant
0xffff7ab1442c   268  d503201f       constant
0xffff7ab14430   272  7a906000       constant
0xffff7ab14434   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab143b0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab14390  code target (STUB)  (0xffff7ab06820)
0xffff7ab143a8  code target (STUB)  (0xffff7ab06260)
0xffff7ab143b4  code target (STUB)  (0xffff7ab068e0)
0xffff7ab143c8  constant pool (size 32)
0xffff7ab14418  runtime entry
0xffff7ab14424  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2233
type = NORMAL
name = BinaryOpICStub(MUL:Smi*Smi->Number)
compiler = crankshaft
Instructions (size = 301)
0xffff7ab14320     0  mov x2, x1
0xffff7ab14324     4  tbnz w2, #0, #+0xc4 (addr 0xffff7ab143e8)
0xffff7ab14328     8  mov x3, x0
0xffff7ab1432c    12  tbnz w3, #0, #+0xcc (addr 0xffff7ab143f8)
0xffff7ab14330    16  scvtf d0, x2, #32
0xffff7ab14334    20  scvtf d1, x3, #32
0xffff7ab14338    24  fmul d0, d0, d1
0xffff7ab1433c    28  movz x1, #0xe2c0
0xffff7ab14340    32  movk x1, #0x9ab, lsl #16
0xffff7ab14344    36  ldp x2, x0, [x1]
0xffff7ab14348    40  adds x16, x2, #0x10 (16)
0xffff7ab1434c    44  ccmp x16, x0, #nzCv, lo
0xffff7ab14350    48  b.hi #+0x20 (addr 0xffff7ab14370)
0xffff7ab14354    52  str x16, [x1]
0xffff7ab14358    56  ldr x1, [x26, #120]
0xffff7ab1435c    60  str x1, [x2]
0xffff7ab14360    64  orr x2, x2, #0x1
0xffff7ab14364    68  stur d0, [x2, #7]
0xffff7ab14368    72  mov x0, x2
0xffff7ab1436c    76  ret
0xffff7ab14370    80  sub csp, jssp, #0x10 (16)
0xffff7ab14374    84  stp fp, lr, [jssp, #-16]!
0xffff7ab14378    88  movz fp, #0xa00000000
0xffff7ab1437c    92  sub csp, jssp, #0x8 (8)
0xffff7ab14380    96  str fp, [jssp, #-8]!
0xffff7ab14384   100  add fp, jssp, #0x8 (8)
0xffff7ab14388   104  movz x2, #0x0
0xffff7ab1438c   108  mov x16, lr
0xffff7ab14390   112  ldr x17, pc+64 (addr 0x0000ffff7ab143d0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab14394   116  blr x17
0xffff7ab14398   120  ldur cp, [fp, #-8]
0xffff7ab1439c   124  movz x0, #0x0
0xffff7ab143a0   128  movz x1, #0x4b48
0xffff7ab143a4   132  movk x1, #0xe4, lsl #16
0xffff7ab143a8   136  ldr x16, pc+48 (addr 0x0000ffff7ab143d8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab143ac   140  blr x16
0xffff7ab143b0   144  str x0, [jssp, #16]
0xffff7ab143b4   148  ldr x16, pc+44 (addr 0x0000ffff7ab143e0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab143b8   152  blr x16
0xffff7ab143bc   156  ldr lr, [jssp, #16]
0xffff7ab143c0   160  ldp xzr, fp, [jssp], #24
0xffff7ab143c4   164  b #-0x60 (addr 0xffff7ab14364)
0xffff7ab143c8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab143cc   172  d63f03e0       constant
0xffff7ab143d0   176  7ab06820       constant
0xffff7ab143d4   180  0000ffff       constant
0xffff7ab143d8   184  7ab06260       constant
0xffff7ab143dc   188  0000ffff       constant
0xffff7ab143e0   192  7ab068e0       constant
0xffff7ab143e4   196  0000ffff       constant
0xffff7ab143e8   200  movz x16, #0x0
0xffff7ab143ec   204  sub csp, jssp, #0x10 (16)
0xffff7ab143f0   208  stp fp, lr, [jssp, #-16]!
0xffff7ab143f4   212  bl #+0x14 (addr 0xffff7ab14408)
0xffff7ab143f8   216  movz x16, #0x8
0xffff7ab143fc   220  sub csp, jssp, #0x10 (16)
0xffff7ab14400   224  stp fp, lr, [jssp, #-16]!
0xffff7ab14404   228  bl #+0x4 (addr 0xffff7ab14408)
0xffff7ab14408   232  movz x17, #0xa00000000
0xffff7ab1440c   236  sub csp, jssp, #0x10 (16)
0xffff7ab14410   240  stp x17, cp, [jssp, #-16]!
0xffff7ab14414   244  add fp, jssp, #0x10 (16)
0xffff7ab14418   248  ldr x17, pc+24 (addr 0x0000ffff7ab14430)    ;; lazy deoptimization bailout 0
0xffff7ab1441c   252  add x17, x17, x16
0xffff7ab14420   256  br x17
0xffff7ab14424   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab14428   264  d63f03e0       constant
0xffff7ab1442c   268  d503201f       constant
0xffff7ab14430   272  7a906000       constant
0xffff7ab14434   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab143b0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab14390  code target (STUB)  (0xffff7ab06820)
0xffff7ab143a8  code target (STUB)  (0xffff7ab06260)
0xffff7ab143b4  code target (STUB)  (0xffff7ab068e0)
0xffff7ab143c8  constant pool (size 32)
0xffff7ab14418  runtime entry
0xffff7ab14424  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2201
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 160)
0xffff7ab144c0     0  mov x2, x1
0xffff7ab144c4     4  tbnz w2, #0, #+0x34 (addr 0xffff7ab144f8)
0xffff7ab144c8     8  mov x3, x0
0xffff7ab144cc    12  tbnz w3, #0, #+0x3c (addr 0xffff7ab14508)
0xffff7ab144d0    16  cmp x3, #0x0 (0)
0xffff7ab144d4    20  ccmp x2, #0, #nZcv, ne
0xffff7ab144d8    24  ccmn x3, x2, #nzcv, eq
0xffff7ab144dc    28  b.mi #+0x3c (addr 0xffff7ab14518)
0xffff7ab144e0    32  smulh x2, x3, x2
0xffff7ab144e4    36  cmp x2, w2, sxtw
0xffff7ab144e8    40  lsl x2, x2, #32
0xffff7ab144ec    44  b.ne #+0x2c (addr 0xffff7ab14518)
0xffff7ab144f0    48  mov x0, x2
0xffff7ab144f4    52  ret
0xffff7ab144f8    56  movz x16, #0x0
0xffff7ab144fc    60  sub csp, jssp, #0x10 (16)
0xffff7ab14500    64  stp fp, lr, [jssp, #-16]!
0xffff7ab14504    68  bl #+0x24 (addr 0xffff7ab14528)
0xffff7ab14508    72  movz x16, #0x8
0xffff7ab1450c    76  sub csp, jssp, #0x10 (16)
0xffff7ab14510    80  stp fp, lr, [jssp, #-16]!
0xffff7ab14514    84  bl #+0x14 (addr 0xffff7ab14528)
0xffff7ab14518    88  movz x16, #0x10
0xffff7ab1451c    92  sub csp, jssp, #0x10 (16)
0xffff7ab14520    96  stp fp, lr, [jssp, #-16]!
0xffff7ab14524   100  bl #+0x4 (addr 0xffff7ab14528)
0xffff7ab14528   104  movz x17, #0xa00000000
0xffff7ab1452c   108  sub csp, jssp, #0x10 (16)
0xffff7ab14530   112  stp x17, cp, [jssp, #-16]!
0xffff7ab14534   116  add fp, jssp, #0x10 (16)
0xffff7ab14538   120  ldr x17, pc+24 (addr 0x0000ffff7ab14550)    ;; lazy deoptimization bailout 0
0xffff7ab1453c   124  add x17, x17, x16
0xffff7ab14540   128  br x17
0xffff7ab14544   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab14548   136  d63f03e0       constant
0xffff7ab1454c   140  d503201f       constant
0xffff7ab14550   144  7a906000       constant
0xffff7ab14554   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14538  runtime entry
0xffff7ab14544  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2201
type = NORMAL
name = BinaryOpICStub(MUL:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 160)
0xffff7ab144c0     0  mov x2, x1
0xffff7ab144c4     4  tbnz w2, #0, #+0x34 (addr 0xffff7ab144f8)
0xffff7ab144c8     8  mov x3, x0
0xffff7ab144cc    12  tbnz w3, #0, #+0x3c (addr 0xffff7ab14508)
0xffff7ab144d0    16  cmp x3, #0x0 (0)
0xffff7ab144d4    20  ccmp x2, #0, #nZcv, ne
0xffff7ab144d8    24  ccmn x3, x2, #nzcv, eq
0xffff7ab144dc    28  b.mi #+0x3c (addr 0xffff7ab14518)
0xffff7ab144e0    32  smulh x2, x3, x2
0xffff7ab144e4    36  cmp x2, w2, sxtw
0xffff7ab144e8    40  lsl x2, x2, #32
0xffff7ab144ec    44  b.ne #+0x2c (addr 0xffff7ab14518)
0xffff7ab144f0    48  mov x0, x2
0xffff7ab144f4    52  ret
0xffff7ab144f8    56  movz x16, #0x0
0xffff7ab144fc    60  sub csp, jssp, #0x10 (16)
0xffff7ab14500    64  stp fp, lr, [jssp, #-16]!
0xffff7ab14504    68  bl #+0x24 (addr 0xffff7ab14528)
0xffff7ab14508    72  movz x16, #0x8
0xffff7ab1450c    76  sub csp, jssp, #0x10 (16)
0xffff7ab14510    80  stp fp, lr, [jssp, #-16]!
0xffff7ab14514    84  bl #+0x14 (addr 0xffff7ab14528)
0xffff7ab14518    88  movz x16, #0x10
0xffff7ab1451c    92  sub csp, jssp, #0x10 (16)
0xffff7ab14520    96  stp fp, lr, [jssp, #-16]!
0xffff7ab14524   100  bl #+0x4 (addr 0xffff7ab14528)
0xffff7ab14528   104  movz x17, #0xa00000000
0xffff7ab1452c   108  sub csp, jssp, #0x10 (16)
0xffff7ab14530   112  stp x17, cp, [jssp, #-16]!
0xffff7ab14534   116  add fp, jssp, #0x10 (16)
0xffff7ab14538   120  ldr x17, pc+24 (addr 0x0000ffff7ab14550)    ;; lazy deoptimization bailout 0
0xffff7ab1453c   124  add x17, x17, x16
0xffff7ab14540   128  br x17
0xffff7ab14544   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab14548   136  d63f03e0       constant
0xffff7ab1454c   140  d503201f       constant
0xffff7ab14550   144  7a906000       constant
0xffff7ab14554   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14538  runtime entry
0xffff7ab14544  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2340
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 120)
0xffff7ab145c0     0  mov x2, x1
0xffff7ab145c4     4  tbnz w2, #0, #+0x20 (addr 0xffff7ab145e4)
0xffff7ab145c8     8  mov x3, x0
0xffff7ab145cc    12  tbnz w3, #0, #+0x28 (addr 0xffff7ab145f4)
0xffff7ab145d0    16  asr x0, x2, #32
0xffff7ab145d4    20  asr x1, x3, #32
0xffff7ab145d8    24  asr w0, w0, w1
0xffff7ab145dc    28  lsl x0, x0, #32
0xffff7ab145e0    32  ret
0xffff7ab145e4    36  movz x16, #0x0
0xffff7ab145e8    40  sub csp, jssp, #0x10 (16)
0xffff7ab145ec    44  stp fp, lr, [jssp, #-16]!
0xffff7ab145f0    48  bl #+0x14 (addr 0xffff7ab14604)
0xffff7ab145f4    52  movz x16, #0x8
0xffff7ab145f8    56  sub csp, jssp, #0x10 (16)
0xffff7ab145fc    60  stp fp, lr, [jssp, #-16]!
0xffff7ab14600    64  bl #+0x4 (addr 0xffff7ab14604)
0xffff7ab14604    68  movz x17, #0xa00000000
0xffff7ab14608    72  sub csp, jssp, #0x10 (16)
0xffff7ab1460c    76  stp x17, cp, [jssp, #-16]!
0xffff7ab14610    80  add fp, jssp, #0x10 (16)
0xffff7ab14614    84  ldr x17, pc+20 (addr 0x0000ffff7ab14628)    ;; lazy deoptimization bailout 0
0xffff7ab14618    88  add x17, x17, x16
0xffff7ab1461c    92  br x17
0xffff7ab14620    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14624   100  d63f03e0       constant
0xffff7ab14628   104  7a906000       constant
0xffff7ab1462c   108  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14614  runtime entry
0xffff7ab14620  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2340
type = NORMAL
name = BinaryOpICStub(SAR:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 120)
0xffff7ab145c0     0  mov x2, x1
0xffff7ab145c4     4  tbnz w2, #0, #+0x20 (addr 0xffff7ab145e4)
0xffff7ab145c8     8  mov x3, x0
0xffff7ab145cc    12  tbnz w3, #0, #+0x28 (addr 0xffff7ab145f4)
0xffff7ab145d0    16  asr x0, x2, #32
0xffff7ab145d4    20  asr x1, x3, #32
0xffff7ab145d8    24  asr w0, w0, w1
0xffff7ab145dc    28  lsl x0, x0, #32
0xffff7ab145e0    32  ret
0xffff7ab145e4    36  movz x16, #0x0
0xffff7ab145e8    40  sub csp, jssp, #0x10 (16)
0xffff7ab145ec    44  stp fp, lr, [jssp, #-16]!
0xffff7ab145f0    48  bl #+0x14 (addr 0xffff7ab14604)
0xffff7ab145f4    52  movz x16, #0x8
0xffff7ab145f8    56  sub csp, jssp, #0x10 (16)
0xffff7ab145fc    60  stp fp, lr, [jssp, #-16]!
0xffff7ab14600    64  bl #+0x4 (addr 0xffff7ab14604)
0xffff7ab14604    68  movz x17, #0xa00000000
0xffff7ab14608    72  sub csp, jssp, #0x10 (16)
0xffff7ab1460c    76  stp x17, cp, [jssp, #-16]!
0xffff7ab14610    80  add fp, jssp, #0x10 (16)
0xffff7ab14614    84  ldr x17, pc+20 (addr 0x0000ffff7ab14628)    ;; lazy deoptimization bailout 0
0xffff7ab14618    88  add x17, x17, x16
0xffff7ab1461c    92  br x17
0xffff7ab14620    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14624   100  d63f03e0       constant
0xffff7ab14628   104  7a906000       constant
0xffff7ab1462c   108  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14614  runtime entry
0xffff7ab14620  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2324
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 120)
0xffff7ab146a0     0  mov x2, x1
0xffff7ab146a4     4  tbnz w2, #0, #+0x20 (addr 0xffff7ab146c4)
0xffff7ab146a8     8  mov x3, x0
0xffff7ab146ac    12  tbnz w3, #0, #+0x28 (addr 0xffff7ab146d4)
0xffff7ab146b0    16  asr x0, x2, #32
0xffff7ab146b4    20  asr x1, x3, #32
0xffff7ab146b8    24  asr w0, w0, w1
0xffff7ab146bc    28  lsl x0, x0, #32
0xffff7ab146c0    32  ret
0xffff7ab146c4    36  movz x16, #0x0
0xffff7ab146c8    40  sub csp, jssp, #0x10 (16)
0xffff7ab146cc    44  stp fp, lr, [jssp, #-16]!
0xffff7ab146d0    48  bl #+0x14 (addr 0xffff7ab146e4)
0xffff7ab146d4    52  movz x16, #0x8
0xffff7ab146d8    56  sub csp, jssp, #0x10 (16)
0xffff7ab146dc    60  stp fp, lr, [jssp, #-16]!
0xffff7ab146e0    64  bl #+0x4 (addr 0xffff7ab146e4)
0xffff7ab146e4    68  movz x17, #0xa00000000
0xffff7ab146e8    72  sub csp, jssp, #0x10 (16)
0xffff7ab146ec    76  stp x17, cp, [jssp, #-16]!
0xffff7ab146f0    80  add fp, jssp, #0x10 (16)
0xffff7ab146f4    84  ldr x17, pc+20 (addr 0x0000ffff7ab14708)    ;; lazy deoptimization bailout 0
0xffff7ab146f8    88  add x17, x17, x16
0xffff7ab146fc    92  br x17
0xffff7ab14700    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14704   100  d63f03e0       constant
0xffff7ab14708   104  7a906000       constant
0xffff7ab1470c   108  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab146f4  runtime entry
0xffff7ab14700  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2324
type = NORMAL
name = BinaryOpICStub(SAR:Int32*Smi->Smi)
compiler = crankshaft
Instructions (size = 120)
0xffff7ab146a0     0  mov x2, x1
0xffff7ab146a4     4  tbnz w2, #0, #+0x20 (addr 0xffff7ab146c4)
0xffff7ab146a8     8  mov x3, x0
0xffff7ab146ac    12  tbnz w3, #0, #+0x28 (addr 0xffff7ab146d4)
0xffff7ab146b0    16  asr x0, x2, #32
0xffff7ab146b4    20  asr x1, x3, #32
0xffff7ab146b8    24  asr w0, w0, w1
0xffff7ab146bc    28  lsl x0, x0, #32
0xffff7ab146c0    32  ret
0xffff7ab146c4    36  movz x16, #0x0
0xffff7ab146c8    40  sub csp, jssp, #0x10 (16)
0xffff7ab146cc    44  stp fp, lr, [jssp, #-16]!
0xffff7ab146d0    48  bl #+0x14 (addr 0xffff7ab146e4)
0xffff7ab146d4    52  movz x16, #0x8
0xffff7ab146d8    56  sub csp, jssp, #0x10 (16)
0xffff7ab146dc    60  stp fp, lr, [jssp, #-16]!
0xffff7ab146e0    64  bl #+0x4 (addr 0xffff7ab146e4)
0xffff7ab146e4    68  movz x17, #0xa00000000
0xffff7ab146e8    72  sub csp, jssp, #0x10 (16)
0xffff7ab146ec    76  stp x17, cp, [jssp, #-16]!
0xffff7ab146f0    80  add fp, jssp, #0x10 (16)
0xffff7ab146f4    84  ldr x17, pc+20 (addr 0x0000ffff7ab14708)    ;; lazy deoptimization bailout 0
0xffff7ab146f8    88  add x17, x17, x16
0xffff7ab146fc    92  br x17
0xffff7ab14700    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14704   100  d63f03e0       constant
0xffff7ab14708   104  7a906000       constant
0xffff7ab1470c   108  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab146f4  runtime entry
0xffff7ab14700  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2452
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0xffff7ab14780     0  mov x2, x0
0xffff7ab14784     4  tbnz w2, #0, #+0xac (addr 0xffff7ab14830)
0xffff7ab14788     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab147a0)
0xffff7ab1478c    12  asr x4, x1, #32
0xffff7ab14790    16  asr x0, x2, #32
0xffff7ab14794    20  asr w0, w4, w0
0xffff7ab14798    24  lsl x0, x0, #32
0xffff7ab1479c    28  ret
0xffff7ab147a0    32  sub csp, jssp, #0x10 (16)
0xffff7ab147a4    36  stp fp, lr, [jssp, #-16]!
0xffff7ab147a8    40  movz fp, #0xa00000000
0xffff7ab147ac    44  sub csp, jssp, #0x8 (8)
0xffff7ab147b0    48  str fp, [jssp, #-8]!
0xffff7ab147b4    52  add fp, jssp, #0x8 (8)
0xffff7ab147b8    56  ldur x16, [x1, #-1]
0xffff7ab147bc    60  ldr x17, [x26, #120]
0xffff7ab147c0    64  cmp x16, x17
0xffff7ab147c4    68  b.ne #+0x30 (addr 0xffff7ab147f4)
0xffff7ab147c8    72  ldur d30, [x1, #7]
0xffff7ab147cc    76  fcvtzs x4, d30
0xffff7ab147d0    80  cmp x4, #0x1 (1)
0xffff7ab147d4    84  ccmn x4, #1, #nzcV, vc
0xffff7ab147d8    88  b.vc #+0x18 (addr 0xffff7ab147f0)
0xffff7ab147dc    92  sub csp, jssp, #0x8 (8)
0xffff7ab147e0    96  str lr, [jssp, #-8]!
0xffff7ab147e4   100  ldr x16, pc+68 (addr 0x0000ffff7ab14828)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab147e8   104  blr x16
0xffff7ab147ec   108  ldr lr, [jssp], #8
0xffff7ab147f0   112  b #+0x24 (addr 0xffff7ab14814)
0xffff7ab147f4   116  ldp x4, x3, [x26, #64]
0xffff7ab147f8   120  cmp x1, x4
0xffff7ab147fc   124  cset x4, eq
0xffff7ab14800   128  ccmp x1, x3, #nZcv, ne
0xffff7ab14804   132  b.eq #+0x10 (addr 0xffff7ab14814)
0xffff7ab14808   136  ldr x16, [x26, #40]
0xffff7ab1480c   140  cmp x1, x16
0xffff7ab14810   144  b.ne #+0x30 (addr 0xffff7ab14840)
0xffff7ab14814   148  ldr lr, [jssp, #16]
0xffff7ab14818   152  ldp xzr, fp, [jssp], #24
0xffff7ab1481c   156  b #-0x8c (addr 0xffff7ab14790)
0xffff7ab14820   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14824   164  d63f03e0       constant
0xffff7ab14828   168  7ab0fee0       constant
0xffff7ab1482c   172  0000ffff       constant
0xffff7ab14830   176  movz x16, #0x0
0xffff7ab14834   180  sub csp, jssp, #0x10 (16)
0xffff7ab14838   184  stp fp, lr, [jssp, #-16]!
0xffff7ab1483c   188  bl #+0xc (addr 0xffff7ab14848)
0xffff7ab14840   192  movz x16, #0x8
0xffff7ab14844   196  bl #+0x14 (addr 0xffff7ab14858)
0xffff7ab14848   200  movz x17, #0xa00000000
0xffff7ab1484c   204  sub csp, jssp, #0x10 (16)
0xffff7ab14850   208  stp x17, cp, [jssp, #-16]!
0xffff7ab14854   212  add fp, jssp, #0x10 (16)
0xffff7ab14858   216  ldr x17, pc+24 (addr 0x0000ffff7ab14870)    ;; lazy deoptimization bailout 0
0xffff7ab1485c   220  add x17, x17, x16
0xffff7ab14860   224  br x17
0xffff7ab14864   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab14868   232  d63f03e0       constant
0xffff7ab1486c   236  d503201f       constant
0xffff7ab14870   240  7a906000       constant
0xffff7ab14874   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab147e4  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab14820  constant pool (size 16)
0xffff7ab14858  runtime entry
0xffff7ab14864  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2452
type = NORMAL
name = BinaryOpICStub(SAR:Number*Smi->Smi)
compiler = crankshaft
Instructions (size = 256)
0xffff7ab14780     0  mov x2, x0
0xffff7ab14784     4  tbnz w2, #0, #+0xac (addr 0xffff7ab14830)
0xffff7ab14788     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab147a0)
0xffff7ab1478c    12  asr x4, x1, #32
0xffff7ab14790    16  asr x0, x2, #32
0xffff7ab14794    20  asr w0, w4, w0
0xffff7ab14798    24  lsl x0, x0, #32
0xffff7ab1479c    28  ret
0xffff7ab147a0    32  sub csp, jssp, #0x10 (16)
0xffff7ab147a4    36  stp fp, lr, [jssp, #-16]!
0xffff7ab147a8    40  movz fp, #0xa00000000
0xffff7ab147ac    44  sub csp, jssp, #0x8 (8)
0xffff7ab147b0    48  str fp, [jssp, #-8]!
0xffff7ab147b4    52  add fp, jssp, #0x8 (8)
0xffff7ab147b8    56  ldur x16, [x1, #-1]
0xffff7ab147bc    60  ldr x17, [x26, #120]
0xffff7ab147c0    64  cmp x16, x17
0xffff7ab147c4    68  b.ne #+0x30 (addr 0xffff7ab147f4)
0xffff7ab147c8    72  ldur d30, [x1, #7]
0xffff7ab147cc    76  fcvtzs x4, d30
0xffff7ab147d0    80  cmp x4, #0x1 (1)
0xffff7ab147d4    84  ccmn x4, #1, #nzcV, vc
0xffff7ab147d8    88  b.vc #+0x18 (addr 0xffff7ab147f0)
0xffff7ab147dc    92  sub csp, jssp, #0x8 (8)
0xffff7ab147e0    96  str lr, [jssp, #-8]!
0xffff7ab147e4   100  ldr x16, pc+68 (addr 0x0000ffff7ab14828)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab147e8   104  blr x16
0xffff7ab147ec   108  ldr lr, [jssp], #8
0xffff7ab147f0   112  b #+0x24 (addr 0xffff7ab14814)
0xffff7ab147f4   116  ldp x4, x3, [x26, #64]
0xffff7ab147f8   120  cmp x1, x4
0xffff7ab147fc   124  cset x4, eq
0xffff7ab14800   128  ccmp x1, x3, #nZcv, ne
0xffff7ab14804   132  b.eq #+0x10 (addr 0xffff7ab14814)
0xffff7ab14808   136  ldr x16, [x26, #40]
0xffff7ab1480c   140  cmp x1, x16
0xffff7ab14810   144  b.ne #+0x30 (addr 0xffff7ab14840)
0xffff7ab14814   148  ldr lr, [jssp, #16]
0xffff7ab14818   152  ldp xzr, fp, [jssp], #24
0xffff7ab1481c   156  b #-0x8c (addr 0xffff7ab14790)
0xffff7ab14820   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14824   164  d63f03e0       constant
0xffff7ab14828   168  7ab0fee0       constant
0xffff7ab1482c   172  0000ffff       constant
0xffff7ab14830   176  movz x16, #0x0
0xffff7ab14834   180  sub csp, jssp, #0x10 (16)
0xffff7ab14838   184  stp fp, lr, [jssp, #-16]!
0xffff7ab1483c   188  bl #+0xc (addr 0xffff7ab14848)
0xffff7ab14840   192  movz x16, #0x8
0xffff7ab14844   196  bl #+0x14 (addr 0xffff7ab14858)
0xffff7ab14848   200  movz x17, #0xa00000000
0xffff7ab1484c   204  sub csp, jssp, #0x10 (16)
0xffff7ab14850   208  stp x17, cp, [jssp, #-16]!
0xffff7ab14854   212  add fp, jssp, #0x10 (16)
0xffff7ab14858   216  ldr x17, pc+24 (addr 0x0000ffff7ab14870)    ;; lazy deoptimization bailout 0
0xffff7ab1485c   220  add x17, x17, x16
0xffff7ab14860   224  br x17
0xffff7ab14864   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab14868   232  d63f03e0       constant
0xffff7ab1486c   236  d503201f       constant
0xffff7ab14870   240  7a906000       constant
0xffff7ab14874   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab147e4  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab14820  constant pool (size 16)
0xffff7ab14858  runtime entry
0xffff7ab14864  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2196
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 120)
0xffff7ab148e0     0  mov x2, x1
0xffff7ab148e4     4  tbnz w2, #0, #+0x20 (addr 0xffff7ab14904)
0xffff7ab148e8     8  mov x3, x0
0xffff7ab148ec    12  tbnz w3, #0, #+0x28 (addr 0xffff7ab14914)
0xffff7ab148f0    16  asr x0, x2, #32
0xffff7ab148f4    20  asr x1, x3, #32
0xffff7ab148f8    24  asr w0, w0, w1
0xffff7ab148fc    28  lsl x0, x0, #32
0xffff7ab14900    32  ret
0xffff7ab14904    36  movz x16, #0x0
0xffff7ab14908    40  sub csp, jssp, #0x10 (16)
0xffff7ab1490c    44  stp fp, lr, [jssp, #-16]!
0xffff7ab14910    48  bl #+0x14 (addr 0xffff7ab14924)
0xffff7ab14914    52  movz x16, #0x8
0xffff7ab14918    56  sub csp, jssp, #0x10 (16)
0xffff7ab1491c    60  stp fp, lr, [jssp, #-16]!
0xffff7ab14920    64  bl #+0x4 (addr 0xffff7ab14924)
0xffff7ab14924    68  movz x17, #0xa00000000
0xffff7ab14928    72  sub csp, jssp, #0x10 (16)
0xffff7ab1492c    76  stp x17, cp, [jssp, #-16]!
0xffff7ab14930    80  add fp, jssp, #0x10 (16)
0xffff7ab14934    84  ldr x17, pc+20 (addr 0x0000ffff7ab14948)    ;; lazy deoptimization bailout 0
0xffff7ab14938    88  add x17, x17, x16
0xffff7ab1493c    92  br x17
0xffff7ab14940    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14944   100  d63f03e0       constant
0xffff7ab14948   104  7a906000       constant
0xffff7ab1494c   108  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14934  runtime entry
0xffff7ab14940  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2196
type = NORMAL
name = BinaryOpICStub(SAR:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 120)
0xffff7ab148e0     0  mov x2, x1
0xffff7ab148e4     4  tbnz w2, #0, #+0x20 (addr 0xffff7ab14904)
0xffff7ab148e8     8  mov x3, x0
0xffff7ab148ec    12  tbnz w3, #0, #+0x28 (addr 0xffff7ab14914)
0xffff7ab148f0    16  asr x0, x2, #32
0xffff7ab148f4    20  asr x1, x3, #32
0xffff7ab148f8    24  asr w0, w0, w1
0xffff7ab148fc    28  lsl x0, x0, #32
0xffff7ab14900    32  ret
0xffff7ab14904    36  movz x16, #0x0
0xffff7ab14908    40  sub csp, jssp, #0x10 (16)
0xffff7ab1490c    44  stp fp, lr, [jssp, #-16]!
0xffff7ab14910    48  bl #+0x14 (addr 0xffff7ab14924)
0xffff7ab14914    52  movz x16, #0x8
0xffff7ab14918    56  sub csp, jssp, #0x10 (16)
0xffff7ab1491c    60  stp fp, lr, [jssp, #-16]!
0xffff7ab14920    64  bl #+0x4 (addr 0xffff7ab14924)
0xffff7ab14924    68  movz x17, #0xa00000000
0xffff7ab14928    72  sub csp, jssp, #0x10 (16)
0xffff7ab1492c    76  stp x17, cp, [jssp, #-16]!
0xffff7ab14930    80  add fp, jssp, #0x10 (16)
0xffff7ab14934    84  ldr x17, pc+20 (addr 0x0000ffff7ab14948)    ;; lazy deoptimization bailout 0
0xffff7ab14938    88  add x17, x17, x16
0xffff7ab1493c    92  br x17
0xffff7ab14940    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14944   100  d63f03e0       constant
0xffff7ab14948   104  7a906000       constant
0xffff7ab1494c   108  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14934  runtime entry
0xffff7ab14940  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2339
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 120)
0xffff7ab149c0     0  mov x2, x1
0xffff7ab149c4     4  tbnz w2, #0, #+0x20 (addr 0xffff7ab149e4)
0xffff7ab149c8     8  mov x3, x0
0xffff7ab149cc    12  tbnz w3, #0, #+0x28 (addr 0xffff7ab149f4)
0xffff7ab149d0    16  asr x0, x2, #32
0xffff7ab149d4    20  asr x1, x3, #32
0xffff7ab149d8    24  lsl w0, w0, w1
0xffff7ab149dc    28  lsl x0, x0, #32
0xffff7ab149e0    32  ret
0xffff7ab149e4    36  movz x16, #0x0
0xffff7ab149e8    40  sub csp, jssp, #0x10 (16)
0xffff7ab149ec    44  stp fp, lr, [jssp, #-16]!
0xffff7ab149f0    48  bl #+0x14 (addr 0xffff7ab14a04)
0xffff7ab149f4    52  movz x16, #0x8
0xffff7ab149f8    56  sub csp, jssp, #0x10 (16)
0xffff7ab149fc    60  stp fp, lr, [jssp, #-16]!
0xffff7ab14a00    64  bl #+0x4 (addr 0xffff7ab14a04)
0xffff7ab14a04    68  movz x17, #0xa00000000
0xffff7ab14a08    72  sub csp, jssp, #0x10 (16)
0xffff7ab14a0c    76  stp x17, cp, [jssp, #-16]!
0xffff7ab14a10    80  add fp, jssp, #0x10 (16)
0xffff7ab14a14    84  ldr x17, pc+20 (addr 0x0000ffff7ab14a28)    ;; lazy deoptimization bailout 0
0xffff7ab14a18    88  add x17, x17, x16
0xffff7ab14a1c    92  br x17
0xffff7ab14a20    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14a24   100  d63f03e0       constant
0xffff7ab14a28   104  7a906000       constant
0xffff7ab14a2c   108  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14a14  runtime entry
0xffff7ab14a20  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2339
type = NORMAL
name = BinaryOpICStub(SHL:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 120)
0xffff7ab149c0     0  mov x2, x1
0xffff7ab149c4     4  tbnz w2, #0, #+0x20 (addr 0xffff7ab149e4)
0xffff7ab149c8     8  mov x3, x0
0xffff7ab149cc    12  tbnz w3, #0, #+0x28 (addr 0xffff7ab149f4)
0xffff7ab149d0    16  asr x0, x2, #32
0xffff7ab149d4    20  asr x1, x3, #32
0xffff7ab149d8    24  lsl w0, w0, w1
0xffff7ab149dc    28  lsl x0, x0, #32
0xffff7ab149e0    32  ret
0xffff7ab149e4    36  movz x16, #0x0
0xffff7ab149e8    40  sub csp, jssp, #0x10 (16)
0xffff7ab149ec    44  stp fp, lr, [jssp, #-16]!
0xffff7ab149f0    48  bl #+0x14 (addr 0xffff7ab14a04)
0xffff7ab149f4    52  movz x16, #0x8
0xffff7ab149f8    56  sub csp, jssp, #0x10 (16)
0xffff7ab149fc    60  stp fp, lr, [jssp, #-16]!
0xffff7ab14a00    64  bl #+0x4 (addr 0xffff7ab14a04)
0xffff7ab14a04    68  movz x17, #0xa00000000
0xffff7ab14a08    72  sub csp, jssp, #0x10 (16)
0xffff7ab14a0c    76  stp x17, cp, [jssp, #-16]!
0xffff7ab14a10    80  add fp, jssp, #0x10 (16)
0xffff7ab14a14    84  ldr x17, pc+20 (addr 0x0000ffff7ab14a28)    ;; lazy deoptimization bailout 0
0xffff7ab14a18    88  add x17, x17, x16
0xffff7ab14a1c    92  br x17
0xffff7ab14a20    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14a24   100  d63f03e0       constant
0xffff7ab14a28   104  7a906000       constant
0xffff7ab14a2c   108  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14a14  runtime entry
0xffff7ab14a20  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2323
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 120)
0xffff7ab14aa0     0  mov x2, x1
0xffff7ab14aa4     4  tbnz w2, #0, #+0x20 (addr 0xffff7ab14ac4)
0xffff7ab14aa8     8  mov x3, x0
0xffff7ab14aac    12  tbnz w3, #0, #+0x28 (addr 0xffff7ab14ad4)
0xffff7ab14ab0    16  asr x0, x2, #32
0xffff7ab14ab4    20  asr x1, x3, #32
0xffff7ab14ab8    24  lsl w0, w0, w1
0xffff7ab14abc    28  lsl x0, x0, #32
0xffff7ab14ac0    32  ret
0xffff7ab14ac4    36  movz x16, #0x0
0xffff7ab14ac8    40  sub csp, jssp, #0x10 (16)
0xffff7ab14acc    44  stp fp, lr, [jssp, #-16]!
0xffff7ab14ad0    48  bl #+0x14 (addr 0xffff7ab14ae4)
0xffff7ab14ad4    52  movz x16, #0x8
0xffff7ab14ad8    56  sub csp, jssp, #0x10 (16)
0xffff7ab14adc    60  stp fp, lr, [jssp, #-16]!
0xffff7ab14ae0    64  bl #+0x4 (addr 0xffff7ab14ae4)
0xffff7ab14ae4    68  movz x17, #0xa00000000
0xffff7ab14ae8    72  sub csp, jssp, #0x10 (16)
0xffff7ab14aec    76  stp x17, cp, [jssp, #-16]!
0xffff7ab14af0    80  add fp, jssp, #0x10 (16)
0xffff7ab14af4    84  ldr x17, pc+20 (addr 0x0000ffff7ab14b08)    ;; lazy deoptimization bailout 0
0xffff7ab14af8    88  add x17, x17, x16
0xffff7ab14afc    92  br x17
0xffff7ab14b00    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14b04   100  d63f03e0       constant
0xffff7ab14b08   104  7a906000       constant
0xffff7ab14b0c   108  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14af4  runtime entry
0xffff7ab14b00  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2323
type = NORMAL
name = BinaryOpICStub(SHL:Int32*Smi->Smi)
compiler = crankshaft
Instructions (size = 120)
0xffff7ab14aa0     0  mov x2, x1
0xffff7ab14aa4     4  tbnz w2, #0, #+0x20 (addr 0xffff7ab14ac4)
0xffff7ab14aa8     8  mov x3, x0
0xffff7ab14aac    12  tbnz w3, #0, #+0x28 (addr 0xffff7ab14ad4)
0xffff7ab14ab0    16  asr x0, x2, #32
0xffff7ab14ab4    20  asr x1, x3, #32
0xffff7ab14ab8    24  lsl w0, w0, w1
0xffff7ab14abc    28  lsl x0, x0, #32
0xffff7ab14ac0    32  ret
0xffff7ab14ac4    36  movz x16, #0x0
0xffff7ab14ac8    40  sub csp, jssp, #0x10 (16)
0xffff7ab14acc    44  stp fp, lr, [jssp, #-16]!
0xffff7ab14ad0    48  bl #+0x14 (addr 0xffff7ab14ae4)
0xffff7ab14ad4    52  movz x16, #0x8
0xffff7ab14ad8    56  sub csp, jssp, #0x10 (16)
0xffff7ab14adc    60  stp fp, lr, [jssp, #-16]!
0xffff7ab14ae0    64  bl #+0x4 (addr 0xffff7ab14ae4)
0xffff7ab14ae4    68  movz x17, #0xa00000000
0xffff7ab14ae8    72  sub csp, jssp, #0x10 (16)
0xffff7ab14aec    76  stp x17, cp, [jssp, #-16]!
0xffff7ab14af0    80  add fp, jssp, #0x10 (16)
0xffff7ab14af4    84  ldr x17, pc+20 (addr 0x0000ffff7ab14b08)    ;; lazy deoptimization bailout 0
0xffff7ab14af8    88  add x17, x17, x16
0xffff7ab14afc    92  br x17
0xffff7ab14b00    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14b04   100  d63f03e0       constant
0xffff7ab14b08   104  7a906000       constant
0xffff7ab14b0c   108  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14af4  runtime entry
0xffff7ab14b00  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2451
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0xffff7ab14b80     0  mov x2, x0
0xffff7ab14b84     4  tbnz w2, #0, #+0xac (addr 0xffff7ab14c30)
0xffff7ab14b88     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab14ba0)
0xffff7ab14b8c    12  asr x4, x1, #32
0xffff7ab14b90    16  asr x0, x2, #32
0xffff7ab14b94    20  lsl w0, w4, w0
0xffff7ab14b98    24  lsl x0, x0, #32
0xffff7ab14b9c    28  ret
0xffff7ab14ba0    32  sub csp, jssp, #0x10 (16)
0xffff7ab14ba4    36  stp fp, lr, [jssp, #-16]!
0xffff7ab14ba8    40  movz fp, #0xa00000000
0xffff7ab14bac    44  sub csp, jssp, #0x8 (8)
0xffff7ab14bb0    48  str fp, [jssp, #-8]!
0xffff7ab14bb4    52  add fp, jssp, #0x8 (8)
0xffff7ab14bb8    56  ldur x16, [x1, #-1]
0xffff7ab14bbc    60  ldr x17, [x26, #120]
0xffff7ab14bc0    64  cmp x16, x17
0xffff7ab14bc4    68  b.ne #+0x30 (addr 0xffff7ab14bf4)
0xffff7ab14bc8    72  ldur d30, [x1, #7]
0xffff7ab14bcc    76  fcvtzs x4, d30
0xffff7ab14bd0    80  cmp x4, #0x1 (1)
0xffff7ab14bd4    84  ccmn x4, #1, #nzcV, vc
0xffff7ab14bd8    88  b.vc #+0x18 (addr 0xffff7ab14bf0)
0xffff7ab14bdc    92  sub csp, jssp, #0x8 (8)
0xffff7ab14be0    96  str lr, [jssp, #-8]!
0xffff7ab14be4   100  ldr x16, pc+68 (addr 0x0000ffff7ab14c28)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab14be8   104  blr x16
0xffff7ab14bec   108  ldr lr, [jssp], #8
0xffff7ab14bf0   112  b #+0x24 (addr 0xffff7ab14c14)
0xffff7ab14bf4   116  ldp x4, x3, [x26, #64]
0xffff7ab14bf8   120  cmp x1, x4
0xffff7ab14bfc   124  cset x4, eq
0xffff7ab14c00   128  ccmp x1, x3, #nZcv, ne
0xffff7ab14c04   132  b.eq #+0x10 (addr 0xffff7ab14c14)
0xffff7ab14c08   136  ldr x16, [x26, #40]
0xffff7ab14c0c   140  cmp x1, x16
0xffff7ab14c10   144  b.ne #+0x30 (addr 0xffff7ab14c40)
0xffff7ab14c14   148  ldr lr, [jssp, #16]
0xffff7ab14c18   152  ldp xzr, fp, [jssp], #24
0xffff7ab14c1c   156  b #-0x8c (addr 0xffff7ab14b90)
0xffff7ab14c20   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14c24   164  d63f03e0       constant
0xffff7ab14c28   168  7ab0fee0       constant
0xffff7ab14c2c   172  0000ffff       constant
0xffff7ab14c30   176  movz x16, #0x0
0xffff7ab14c34   180  sub csp, jssp, #0x10 (16)
0xffff7ab14c38   184  stp fp, lr, [jssp, #-16]!
0xffff7ab14c3c   188  bl #+0xc (addr 0xffff7ab14c48)
0xffff7ab14c40   192  movz x16, #0x8
0xffff7ab14c44   196  bl #+0x14 (addr 0xffff7ab14c58)
0xffff7ab14c48   200  movz x17, #0xa00000000
0xffff7ab14c4c   204  sub csp, jssp, #0x10 (16)
0xffff7ab14c50   208  stp x17, cp, [jssp, #-16]!
0xffff7ab14c54   212  add fp, jssp, #0x10 (16)
0xffff7ab14c58   216  ldr x17, pc+24 (addr 0x0000ffff7ab14c70)    ;; lazy deoptimization bailout 0
0xffff7ab14c5c   220  add x17, x17, x16
0xffff7ab14c60   224  br x17
0xffff7ab14c64   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab14c68   232  d63f03e0       constant
0xffff7ab14c6c   236  d503201f       constant
0xffff7ab14c70   240  7a906000       constant
0xffff7ab14c74   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab14be4  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab14c20  constant pool (size 16)
0xffff7ab14c58  runtime entry
0xffff7ab14c64  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2451
type = NORMAL
name = BinaryOpICStub(SHL:Number*Smi->Smi)
compiler = crankshaft
Instructions (size = 256)
0xffff7ab14b80     0  mov x2, x0
0xffff7ab14b84     4  tbnz w2, #0, #+0xac (addr 0xffff7ab14c30)
0xffff7ab14b88     8  tbnz w1, #0, #+0x18 (addr 0xffff7ab14ba0)
0xffff7ab14b8c    12  asr x4, x1, #32
0xffff7ab14b90    16  asr x0, x2, #32
0xffff7ab14b94    20  lsl w0, w4, w0
0xffff7ab14b98    24  lsl x0, x0, #32
0xffff7ab14b9c    28  ret
0xffff7ab14ba0    32  sub csp, jssp, #0x10 (16)
0xffff7ab14ba4    36  stp fp, lr, [jssp, #-16]!
0xffff7ab14ba8    40  movz fp, #0xa00000000
0xffff7ab14bac    44  sub csp, jssp, #0x8 (8)
0xffff7ab14bb0    48  str fp, [jssp, #-8]!
0xffff7ab14bb4    52  add fp, jssp, #0x8 (8)
0xffff7ab14bb8    56  ldur x16, [x1, #-1]
0xffff7ab14bbc    60  ldr x17, [x26, #120]
0xffff7ab14bc0    64  cmp x16, x17
0xffff7ab14bc4    68  b.ne #+0x30 (addr 0xffff7ab14bf4)
0xffff7ab14bc8    72  ldur d30, [x1, #7]
0xffff7ab14bcc    76  fcvtzs x4, d30
0xffff7ab14bd0    80  cmp x4, #0x1 (1)
0xffff7ab14bd4    84  ccmn x4, #1, #nzcV, vc
0xffff7ab14bd8    88  b.vc #+0x18 (addr 0xffff7ab14bf0)
0xffff7ab14bdc    92  sub csp, jssp, #0x8 (8)
0xffff7ab14be0    96  str lr, [jssp, #-8]!
0xffff7ab14be4   100  ldr x16, pc+68 (addr 0x0000ffff7ab14c28)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab14be8   104  blr x16
0xffff7ab14bec   108  ldr lr, [jssp], #8
0xffff7ab14bf0   112  b #+0x24 (addr 0xffff7ab14c14)
0xffff7ab14bf4   116  ldp x4, x3, [x26, #64]
0xffff7ab14bf8   120  cmp x1, x4
0xffff7ab14bfc   124  cset x4, eq
0xffff7ab14c00   128  ccmp x1, x3, #nZcv, ne
0xffff7ab14c04   132  b.eq #+0x10 (addr 0xffff7ab14c14)
0xffff7ab14c08   136  ldr x16, [x26, #40]
0xffff7ab14c0c   140  cmp x1, x16
0xffff7ab14c10   144  b.ne #+0x30 (addr 0xffff7ab14c40)
0xffff7ab14c14   148  ldr lr, [jssp, #16]
0xffff7ab14c18   152  ldp xzr, fp, [jssp], #24
0xffff7ab14c1c   156  b #-0x8c (addr 0xffff7ab14b90)
0xffff7ab14c20   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14c24   164  d63f03e0       constant
0xffff7ab14c28   168  7ab0fee0       constant
0xffff7ab14c2c   172  0000ffff       constant
0xffff7ab14c30   176  movz x16, #0x0
0xffff7ab14c34   180  sub csp, jssp, #0x10 (16)
0xffff7ab14c38   184  stp fp, lr, [jssp, #-16]!
0xffff7ab14c3c   188  bl #+0xc (addr 0xffff7ab14c48)
0xffff7ab14c40   192  movz x16, #0x8
0xffff7ab14c44   196  bl #+0x14 (addr 0xffff7ab14c58)
0xffff7ab14c48   200  movz x17, #0xa00000000
0xffff7ab14c4c   204  sub csp, jssp, #0x10 (16)
0xffff7ab14c50   208  stp x17, cp, [jssp, #-16]!
0xffff7ab14c54   212  add fp, jssp, #0x10 (16)
0xffff7ab14c58   216  ldr x17, pc+24 (addr 0x0000ffff7ab14c70)    ;; lazy deoptimization bailout 0
0xffff7ab14c5c   220  add x17, x17, x16
0xffff7ab14c60   224  br x17
0xffff7ab14c64   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab14c68   232  d63f03e0       constant
0xffff7ab14c6c   236  d503201f       constant
0xffff7ab14c70   240  7a906000       constant
0xffff7ab14c74   244  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7ab14be4  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab14c20  constant pool (size 16)
0xffff7ab14c58  runtime entry
0xffff7ab14c64  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2211
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 120)
0xffff7ab14ce0     0  mov x2, x1
0xffff7ab14ce4     4  tbnz w2, #0, #+0x20 (addr 0xffff7ab14d04)
0xffff7ab14ce8     8  mov x3, x0
0xffff7ab14cec    12  tbnz w3, #0, #+0x28 (addr 0xffff7ab14d14)
0xffff7ab14cf0    16  asr x0, x2, #32
0xffff7ab14cf4    20  asr x1, x3, #32
0xffff7ab14cf8    24  lsl w0, w0, w1
0xffff7ab14cfc    28  lsl x0, x0, #32
0xffff7ab14d00    32  ret
0xffff7ab14d04    36  movz x16, #0x0
0xffff7ab14d08    40  sub csp, jssp, #0x10 (16)
0xffff7ab14d0c    44  stp fp, lr, [jssp, #-16]!
0xffff7ab14d10    48  bl #+0x14 (addr 0xffff7ab14d24)
0xffff7ab14d14    52  movz x16, #0x8
0xffff7ab14d18    56  sub csp, jssp, #0x10 (16)
0xffff7ab14d1c    60  stp fp, lr, [jssp, #-16]!
0xffff7ab14d20    64  bl #+0x4 (addr 0xffff7ab14d24)
0xffff7ab14d24    68  movz x17, #0xa00000000
0xffff7ab14d28    72  sub csp, jssp, #0x10 (16)
0xffff7ab14d2c    76  stp x17, cp, [jssp, #-16]!
0xffff7ab14d30    80  add fp, jssp, #0x10 (16)
0xffff7ab14d34    84  ldr x17, pc+20 (addr 0x0000ffff7ab14d48)    ;; lazy deoptimization bailout 0
0xffff7ab14d38    88  add x17, x17, x16
0xffff7ab14d3c    92  br x17
0xffff7ab14d40    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14d44   100  d63f03e0       constant
0xffff7ab14d48   104  7a906000       constant
0xffff7ab14d4c   108  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14d34  runtime entry
0xffff7ab14d40  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2211
type = NORMAL
name = BinaryOpICStub(SHL:Smi*Smi->Int32)
compiler = crankshaft
Instructions (size = 120)
0xffff7ab14ce0     0  mov x2, x1
0xffff7ab14ce4     4  tbnz w2, #0, #+0x20 (addr 0xffff7ab14d04)
0xffff7ab14ce8     8  mov x3, x0
0xffff7ab14cec    12  tbnz w3, #0, #+0x28 (addr 0xffff7ab14d14)
0xffff7ab14cf0    16  asr x0, x2, #32
0xffff7ab14cf4    20  asr x1, x3, #32
0xffff7ab14cf8    24  lsl w0, w0, w1
0xffff7ab14cfc    28  lsl x0, x0, #32
0xffff7ab14d00    32  ret
0xffff7ab14d04    36  movz x16, #0x0
0xffff7ab14d08    40  sub csp, jssp, #0x10 (16)
0xffff7ab14d0c    44  stp fp, lr, [jssp, #-16]!
0xffff7ab14d10    48  bl #+0x14 (addr 0xffff7ab14d24)
0xffff7ab14d14    52  movz x16, #0x8
0xffff7ab14d18    56  sub csp, jssp, #0x10 (16)
0xffff7ab14d1c    60  stp fp, lr, [jssp, #-16]!
0xffff7ab14d20    64  bl #+0x4 (addr 0xffff7ab14d24)
0xffff7ab14d24    68  movz x17, #0xa00000000
0xffff7ab14d28    72  sub csp, jssp, #0x10 (16)
0xffff7ab14d2c    76  stp x17, cp, [jssp, #-16]!
0xffff7ab14d30    80  add fp, jssp, #0x10 (16)
0xffff7ab14d34    84  ldr x17, pc+20 (addr 0x0000ffff7ab14d48)    ;; lazy deoptimization bailout 0
0xffff7ab14d38    88  add x17, x17, x16
0xffff7ab14d3c    92  br x17
0xffff7ab14d40    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14d44   100  d63f03e0       constant
0xffff7ab14d48   104  7a906000       constant
0xffff7ab14d4c   108  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14d34  runtime entry
0xffff7ab14d40  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2195
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 120)
0xffff7ab14dc0     0  mov x2, x1
0xffff7ab14dc4     4  tbnz w2, #0, #+0x20 (addr 0xffff7ab14de4)
0xffff7ab14dc8     8  mov x3, x0
0xffff7ab14dcc    12  tbnz w3, #0, #+0x28 (addr 0xffff7ab14df4)
0xffff7ab14dd0    16  asr x0, x2, #32
0xffff7ab14dd4    20  asr x1, x3, #32
0xffff7ab14dd8    24  lsl w0, w0, w1
0xffff7ab14ddc    28  lsl x0, x0, #32
0xffff7ab14de0    32  ret
0xffff7ab14de4    36  movz x16, #0x0
0xffff7ab14de8    40  sub csp, jssp, #0x10 (16)
0xffff7ab14dec    44  stp fp, lr, [jssp, #-16]!
0xffff7ab14df0    48  bl #+0x14 (addr 0xffff7ab14e04)
0xffff7ab14df4    52  movz x16, #0x8
0xffff7ab14df8    56  sub csp, jssp, #0x10 (16)
0xffff7ab14dfc    60  stp fp, lr, [jssp, #-16]!
0xffff7ab14e00    64  bl #+0x4 (addr 0xffff7ab14e04)
0xffff7ab14e04    68  movz x17, #0xa00000000
0xffff7ab14e08    72  sub csp, jssp, #0x10 (16)
0xffff7ab14e0c    76  stp x17, cp, [jssp, #-16]!
0xffff7ab14e10    80  add fp, jssp, #0x10 (16)
0xffff7ab14e14    84  ldr x17, pc+20 (addr 0x0000ffff7ab14e28)    ;; lazy deoptimization bailout 0
0xffff7ab14e18    88  add x17, x17, x16
0xffff7ab14e1c    92  br x17
0xffff7ab14e20    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14e24   100  d63f03e0       constant
0xffff7ab14e28   104  7a906000       constant
0xffff7ab14e2c   108  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14e14  runtime entry
0xffff7ab14e20  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2195
type = NORMAL
name = BinaryOpICStub(SHL:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 120)
0xffff7ab14dc0     0  mov x2, x1
0xffff7ab14dc4     4  tbnz w2, #0, #+0x20 (addr 0xffff7ab14de4)
0xffff7ab14dc8     8  mov x3, x0
0xffff7ab14dcc    12  tbnz w3, #0, #+0x28 (addr 0xffff7ab14df4)
0xffff7ab14dd0    16  asr x0, x2, #32
0xffff7ab14dd4    20  asr x1, x3, #32
0xffff7ab14dd8    24  lsl w0, w0, w1
0xffff7ab14ddc    28  lsl x0, x0, #32
0xffff7ab14de0    32  ret
0xffff7ab14de4    36  movz x16, #0x0
0xffff7ab14de8    40  sub csp, jssp, #0x10 (16)
0xffff7ab14dec    44  stp fp, lr, [jssp, #-16]!
0xffff7ab14df0    48  bl #+0x14 (addr 0xffff7ab14e04)
0xffff7ab14df4    52  movz x16, #0x8
0xffff7ab14df8    56  sub csp, jssp, #0x10 (16)
0xffff7ab14dfc    60  stp fp, lr, [jssp, #-16]!
0xffff7ab14e00    64  bl #+0x4 (addr 0xffff7ab14e04)
0xffff7ab14e04    68  movz x17, #0xa00000000
0xffff7ab14e08    72  sub csp, jssp, #0x10 (16)
0xffff7ab14e0c    76  stp x17, cp, [jssp, #-16]!
0xffff7ab14e10    80  add fp, jssp, #0x10 (16)
0xffff7ab14e14    84  ldr x17, pc+20 (addr 0x0000ffff7ab14e28)    ;; lazy deoptimization bailout 0
0xffff7ab14e18    88  add x17, x17, x16
0xffff7ab14e1c    92  br x17
0xffff7ab14e20    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14e24   100  d63f03e0       constant
0xffff7ab14e28   104  7a906000       constant
0xffff7ab14e2c   108  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14e14  runtime entry
0xffff7ab14e20  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2325
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 144)
0xffff7ab14ea0     0  mov x2, x1
0xffff7ab14ea4     4  tbnz w2, #0, #+0x28 (addr 0xffff7ab14ecc)
0xffff7ab14ea8     8  mov x3, x0
0xffff7ab14eac    12  tbnz w3, #0, #+0x30 (addr 0xffff7ab14edc)
0xffff7ab14eb0    16  asr x2, x2, #32
0xffff7ab14eb4    20  asr x3, x3, #32
0xffff7ab14eb8    24  lsr w2, w2, w3
0xffff7ab14ebc    28  tbnz w2, #31, #+0x30 (addr 0xffff7ab14eec)
0xffff7ab14ec0    32  lsl x2, x2, #32
0xffff7ab14ec4    36  mov x0, x2
0xffff7ab14ec8    40  ret
0xffff7ab14ecc    44  movz x16, #0x0
0xffff7ab14ed0    48  sub csp, jssp, #0x10 (16)
0xffff7ab14ed4    52  stp fp, lr, [jssp, #-16]!
0xffff7ab14ed8    56  bl #+0x24 (addr 0xffff7ab14efc)
0xffff7ab14edc    60  movz x16, #0x8
0xffff7ab14ee0    64  sub csp, jssp, #0x10 (16)
0xffff7ab14ee4    68  stp fp, lr, [jssp, #-16]!
0xffff7ab14ee8    72  bl #+0x14 (addr 0xffff7ab14efc)
0xffff7ab14eec    76  movz x16, #0x10
0xffff7ab14ef0    80  sub csp, jssp, #0x10 (16)
0xffff7ab14ef4    84  stp fp, lr, [jssp, #-16]!
0xffff7ab14ef8    88  bl #+0x4 (addr 0xffff7ab14efc)
0xffff7ab14efc    92  movz x17, #0xa00000000
0xffff7ab14f00    96  sub csp, jssp, #0x10 (16)
0xffff7ab14f04   100  stp x17, cp, [jssp, #-16]!
0xffff7ab14f08   104  add fp, jssp, #0x10 (16)
0xffff7ab14f0c   108  ldr x17, pc+20 (addr 0x0000ffff7ab14f20)    ;; lazy deoptimization bailout 0
0xffff7ab14f10   112  add x17, x17, x16
0xffff7ab14f14   116  br x17
0xffff7ab14f18   120  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14f1c   124  d63f03e0       constant
0xffff7ab14f20   128  7a906000       constant
0xffff7ab14f24   132  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14f0c  runtime entry
0xffff7ab14f18  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2325
type = NORMAL
name = BinaryOpICStub(SHR:Int32*Smi->Smi)
compiler = crankshaft
Instructions (size = 144)
0xffff7ab14ea0     0  mov x2, x1
0xffff7ab14ea4     4  tbnz w2, #0, #+0x28 (addr 0xffff7ab14ecc)
0xffff7ab14ea8     8  mov x3, x0
0xffff7ab14eac    12  tbnz w3, #0, #+0x30 (addr 0xffff7ab14edc)
0xffff7ab14eb0    16  asr x2, x2, #32
0xffff7ab14eb4    20  asr x3, x3, #32
0xffff7ab14eb8    24  lsr w2, w2, w3
0xffff7ab14ebc    28  tbnz w2, #31, #+0x30 (addr 0xffff7ab14eec)
0xffff7ab14ec0    32  lsl x2, x2, #32
0xffff7ab14ec4    36  mov x0, x2
0xffff7ab14ec8    40  ret
0xffff7ab14ecc    44  movz x16, #0x0
0xffff7ab14ed0    48  sub csp, jssp, #0x10 (16)
0xffff7ab14ed4    52  stp fp, lr, [jssp, #-16]!
0xffff7ab14ed8    56  bl #+0x24 (addr 0xffff7ab14efc)
0xffff7ab14edc    60  movz x16, #0x8
0xffff7ab14ee0    64  sub csp, jssp, #0x10 (16)
0xffff7ab14ee4    68  stp fp, lr, [jssp, #-16]!
0xffff7ab14ee8    72  bl #+0x14 (addr 0xffff7ab14efc)
0xffff7ab14eec    76  movz x16, #0x10
0xffff7ab14ef0    80  sub csp, jssp, #0x10 (16)
0xffff7ab14ef4    84  stp fp, lr, [jssp, #-16]!
0xffff7ab14ef8    88  bl #+0x4 (addr 0xffff7ab14efc)
0xffff7ab14efc    92  movz x17, #0xa00000000
0xffff7ab14f00    96  sub csp, jssp, #0x10 (16)
0xffff7ab14f04   100  stp x17, cp, [jssp, #-16]!
0xffff7ab14f08   104  add fp, jssp, #0x10 (16)
0xffff7ab14f0c   108  ldr x17, pc+20 (addr 0x0000ffff7ab14f20)    ;; lazy deoptimization bailout 0
0xffff7ab14f10   112  add x17, x17, x16
0xffff7ab14f14   116  br x17
0xffff7ab14f18   120  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab14f1c   124  d63f03e0       constant
0xffff7ab14f20   128  7a906000       constant
0xffff7ab14f24   132  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab14f0c  runtime entry
0xffff7ab14f18  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2469
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 280)
0xffff7ab14fa0     0  mov x2, x0
0xffff7ab14fa4     4  tbnz w2, #0, #+0xb4 (addr 0xffff7ab15058)
0xffff7ab14fa8     8  tbnz w1, #0, #+0x20 (addr 0xffff7ab14fc8)
0xffff7ab14fac    12  asr x4, x1, #32
0xffff7ab14fb0    16  asr x2, x2, #32
0xffff7ab14fb4    20  lsr w2, w4, w2
0xffff7ab14fb8    24  tbnz w2, #31, #+0xb0 (addr 0xffff7ab15068)
0xffff7ab14fbc    28  lsl x2, x2, #32
0xffff7ab14fc0    32  mov x0, x2
0xffff7ab14fc4    36  ret
0xffff7ab14fc8    40  sub csp, jssp, #0x10 (16)
0xffff7ab14fcc    44  stp fp, lr, [jssp, #-16]!
0xffff7ab14fd0    48  movz fp, #0xa00000000
0xffff7ab14fd4    52  sub csp, jssp, #0x8 (8)
0xffff7ab14fd8    56  str fp, [jssp, #-8]!
0xffff7ab14fdc    60  add fp, jssp, #0x8 (8)
0xffff7ab14fe0    64  ldur x16, [x1, #-1]
0xffff7ab14fe4    68  ldr x17, [x26, #120]
0xffff7ab14fe8    72  cmp x16, x17
0xffff7ab14fec    76  b.ne #+0x30 (addr 0xffff7ab1501c)
0xffff7ab14ff0    80  ldur d30, [x1, #7]
0xffff7ab14ff4    84  fcvtzs x4, d30
0xffff7ab14ff8    88  cmp x4, #0x1 (1)
0xffff7ab14ffc    92  ccmn x4, #1, #nzcV, vc
0xffff7ab15000    96  b.vc #+0x18 (addr 0xffff7ab15018)
0xffff7ab15004   100  sub csp, jssp, #0x8 (8)
0xffff7ab15008   104  str lr, [jssp, #-8]!
0xffff7ab1500c   108  ldr x16, pc+68 (addr 0x0000ffff7ab15050)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab15010   112  blr x16
0xffff7ab15014   116  ldr lr, [jssp], #8
0xffff7ab15018   120  b #+0x24 (addr 0xffff7ab1503c)
0xffff7ab1501c   124  ldp x4, x3, [x26, #64]
0xffff7ab15020   128  cmp x1, x4
0xffff7ab15024   132  cset x4, eq
0xffff7ab15028   136  ccmp x1, x3, #nZcv, ne
0xffff7ab1502c   140  b.eq #+0x10 (addr 0xffff7ab1503c)
0xffff7ab15030   144  ldr x16, [x26, #40]
0xffff7ab15034   148  cmp x1, x16
0xffff7ab15038   152  b.ne #+0x40 (addr 0xffff7ab15078)
0xffff7ab1503c   156  ldr lr, [jssp, #16]
0xffff7ab15040   160  ldp xzr, fp, [jssp], #24
0xffff7ab15044   164  b #-0x94 (addr 0xffff7ab14fb0)
0xffff7ab15048   168  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab1504c   172  d63f03e0       constant
0xffff7ab15050   176  7ab0fee0       constant
0xffff7ab15054   180  0000ffff       constant
0xffff7ab15058   184  movz x16, #0x0
0xffff7ab1505c   188  sub csp, jssp, #0x10 (16)
0xffff7ab15060   192  stp fp, lr, [jssp, #-16]!
0xffff7ab15064   196  bl #+0x1c (addr 0xffff7ab15080)
0xffff7ab15068   200  movz x16, #0x8
0xffff7ab1506c   204  sub csp, jssp, #0x10 (16)
0xffff7ab15070   208  stp fp, lr, [jssp, #-16]!
0xffff7ab15074   212  bl #+0xc (addr 0xffff7ab15080)
0xffff7ab15078   216  movz x16, #0x10
0xffff7ab1507c   220  bl #+0x14 (addr 0xffff7ab15090)
0xffff7ab15080   224  movz x17, #0xa00000000
0xffff7ab15084   228  sub csp, jssp, #0x10 (16)
0xffff7ab15088   232  stp x17, cp, [jssp, #-16]!
0xffff7ab1508c   236  add fp, jssp, #0x10 (16)
0xffff7ab15090   240  ldr x17, pc+24 (addr 0x0000ffff7ab150a8)    ;; lazy deoptimization bailout 0
0xffff7ab15094   244  add x17, x17, x16
0xffff7ab15098   248  br x17
0xffff7ab1509c   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab150a0   256  d63f03e0       constant
0xffff7ab150a4   260  d503201f       constant
0xffff7ab150a8   264  7a906000       constant
0xffff7ab150ac   268  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0xffff7ab1500c  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab15048  constant pool (size 16)
0xffff7ab15090  runtime entry
0xffff7ab1509c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2469
type = NORMAL
name = BinaryOpICStub(SHR:Number*Smi->Int32)
compiler = crankshaft
Instructions (size = 280)
0xffff7ab14fa0     0  mov x2, x0
0xffff7ab14fa4     4  tbnz w2, #0, #+0xb4 (addr 0xffff7ab15058)
0xffff7ab14fa8     8  tbnz w1, #0, #+0x20 (addr 0xffff7ab14fc8)
0xffff7ab14fac    12  asr x4, x1, #32
0xffff7ab14fb0    16  asr x2, x2, #32
0xffff7ab14fb4    20  lsr w2, w4, w2
0xffff7ab14fb8    24  tbnz w2, #31, #+0xb0 (addr 0xffff7ab15068)
0xffff7ab14fbc    28  lsl x2, x2, #32
0xffff7ab14fc0    32  mov x0, x2
0xffff7ab14fc4    36  ret
0xffff7ab14fc8    40  sub csp, jssp, #0x10 (16)
0xffff7ab14fcc    44  stp fp, lr, [jssp, #-16]!
0xffff7ab14fd0    48  movz fp, #0xa00000000
0xffff7ab14fd4    52  sub csp, jssp, #0x8 (8)
0xffff7ab14fd8    56  str fp, [jssp, #-8]!
0xffff7ab14fdc    60  add fp, jssp, #0x8 (8)
0xffff7ab14fe0    64  ldur x16, [x1, #-1]
0xffff7ab14fe4    68  ldr x17, [x26, #120]
0xffff7ab14fe8    72  cmp x16, x17
0xffff7ab14fec    76  b.ne #+0x30 (addr 0xffff7ab1501c)
0xffff7ab14ff0    80  ldur d30, [x1, #7]
0xffff7ab14ff4    84  fcvtzs x4, d30
0xffff7ab14ff8    88  cmp x4, #0x1 (1)
0xffff7ab14ffc    92  ccmn x4, #1, #nzcV, vc
0xffff7ab15000    96  b.vc #+0x18 (addr 0xffff7ab15018)
0xffff7ab15004   100  sub csp, jssp, #0x8 (8)
0xffff7ab15008   104  str lr, [jssp, #-8]!
0xffff7ab1500c   108  ldr x16, pc+68 (addr 0x0000ffff7ab15050)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab15010   112  blr x16
0xffff7ab15014   116  ldr lr, [jssp], #8
0xffff7ab15018   120  b #+0x24 (addr 0xffff7ab1503c)
0xffff7ab1501c   124  ldp x4, x3, [x26, #64]
0xffff7ab15020   128  cmp x1, x4
0xffff7ab15024   132  cset x4, eq
0xffff7ab15028   136  ccmp x1, x3, #nZcv, ne
0xffff7ab1502c   140  b.eq #+0x10 (addr 0xffff7ab1503c)
0xffff7ab15030   144  ldr x16, [x26, #40]
0xffff7ab15034   148  cmp x1, x16
0xffff7ab15038   152  b.ne #+0x40 (addr 0xffff7ab15078)
0xffff7ab1503c   156  ldr lr, [jssp, #16]
0xffff7ab15040   160  ldp xzr, fp, [jssp], #24
0xffff7ab15044   164  b #-0x94 (addr 0xffff7ab14fb0)
0xffff7ab15048   168  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab1504c   172  d63f03e0       constant
0xffff7ab15050   176  7ab0fee0       constant
0xffff7ab15054   180  0000ffff       constant
0xffff7ab15058   184  movz x16, #0x0
0xffff7ab1505c   188  sub csp, jssp, #0x10 (16)
0xffff7ab15060   192  stp fp, lr, [jssp, #-16]!
0xffff7ab15064   196  bl #+0x1c (addr 0xffff7ab15080)
0xffff7ab15068   200  movz x16, #0x8
0xffff7ab1506c   204  sub csp, jssp, #0x10 (16)
0xffff7ab15070   208  stp fp, lr, [jssp, #-16]!
0xffff7ab15074   212  bl #+0xc (addr 0xffff7ab15080)
0xffff7ab15078   216  movz x16, #0x10
0xffff7ab1507c   220  bl #+0x14 (addr 0xffff7ab15090)
0xffff7ab15080   224  movz x17, #0xa00000000
0xffff7ab15084   228  sub csp, jssp, #0x10 (16)
0xffff7ab15088   232  stp x17, cp, [jssp, #-16]!
0xffff7ab1508c   236  add fp, jssp, #0x10 (16)
0xffff7ab15090   240  ldr x17, pc+24 (addr 0x0000ffff7ab150a8)    ;; lazy deoptimization bailout 0
0xffff7ab15094   244  add x17, x17, x16
0xffff7ab15098   248  br x17
0xffff7ab1509c   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab150a0   256  d63f03e0       constant
0xffff7ab150a4   260  d503201f       constant
0xffff7ab150a8   264  7a906000       constant
0xffff7ab150ac   268  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0xffff7ab1500c  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab15048  constant pool (size 16)
0xffff7ab15090  runtime entry
0xffff7ab1509c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2453
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 280)
0xffff7ab15120     0  mov x2, x0
0xffff7ab15124     4  tbnz w2, #0, #+0xb4 (addr 0xffff7ab151d8)
0xffff7ab15128     8  tbnz w1, #0, #+0x20 (addr 0xffff7ab15148)
0xffff7ab1512c    12  asr x4, x1, #32
0xffff7ab15130    16  asr x2, x2, #32
0xffff7ab15134    20  lsr w2, w4, w2
0xffff7ab15138    24  tbnz w2, #31, #+0xb0 (addr 0xffff7ab151e8)
0xffff7ab1513c    28  lsl x2, x2, #32
0xffff7ab15140    32  mov x0, x2
0xffff7ab15144    36  ret
0xffff7ab15148    40  sub csp, jssp, #0x10 (16)
0xffff7ab1514c    44  stp fp, lr, [jssp, #-16]!
0xffff7ab15150    48  movz fp, #0xa00000000
0xffff7ab15154    52  sub csp, jssp, #0x8 (8)
0xffff7ab15158    56  str fp, [jssp, #-8]!
0xffff7ab1515c    60  add fp, jssp, #0x8 (8)
0xffff7ab15160    64  ldur x16, [x1, #-1]
0xffff7ab15164    68  ldr x17, [x26, #120]
0xffff7ab15168    72  cmp x16, x17
0xffff7ab1516c    76  b.ne #+0x30 (addr 0xffff7ab1519c)
0xffff7ab15170    80  ldur d30, [x1, #7]
0xffff7ab15174    84  fcvtzs x4, d30
0xffff7ab15178    88  cmp x4, #0x1 (1)
0xffff7ab1517c    92  ccmn x4, #1, #nzcV, vc
0xffff7ab15180    96  b.vc #+0x18 (addr 0xffff7ab15198)
0xffff7ab15184   100  sub csp, jssp, #0x8 (8)
0xffff7ab15188   104  str lr, [jssp, #-8]!
0xffff7ab1518c   108  ldr x16, pc+68 (addr 0x0000ffff7ab151d0)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab15190   112  blr x16
0xffff7ab15194   116  ldr lr, [jssp], #8
0xffff7ab15198   120  b #+0x24 (addr 0xffff7ab151bc)
0xffff7ab1519c   124  ldp x4, x3, [x26, #64]
0xffff7ab151a0   128  cmp x1, x4
0xffff7ab151a4   132  cset x4, eq
0xffff7ab151a8   136  ccmp x1, x3, #nZcv, ne
0xffff7ab151ac   140  b.eq #+0x10 (addr 0xffff7ab151bc)
0xffff7ab151b0   144  ldr x16, [x26, #40]
0xffff7ab151b4   148  cmp x1, x16
0xffff7ab151b8   152  b.ne #+0x40 (addr 0xffff7ab151f8)
0xffff7ab151bc   156  ldr lr, [jssp, #16]
0xffff7ab151c0   160  ldp xzr, fp, [jssp], #24
0xffff7ab151c4   164  b #-0x94 (addr 0xffff7ab15130)
0xffff7ab151c8   168  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab151cc   172  d63f03e0       constant
0xffff7ab151d0   176  7ab0fee0       constant
0xffff7ab151d4   180  0000ffff       constant
0xffff7ab151d8   184  movz x16, #0x0
0xffff7ab151dc   188  sub csp, jssp, #0x10 (16)
0xffff7ab151e0   192  stp fp, lr, [jssp, #-16]!
0xffff7ab151e4   196  bl #+0x1c (addr 0xffff7ab15200)
0xffff7ab151e8   200  movz x16, #0x8
0xffff7ab151ec   204  sub csp, jssp, #0x10 (16)
0xffff7ab151f0   208  stp fp, lr, [jssp, #-16]!
0xffff7ab151f4   212  bl #+0xc (addr 0xffff7ab15200)
0xffff7ab151f8   216  movz x16, #0x10
0xffff7ab151fc   220  bl #+0x14 (addr 0xffff7ab15210)
0xffff7ab15200   224  movz x17, #0xa00000000
0xffff7ab15204   228  sub csp, jssp, #0x10 (16)
0xffff7ab15208   232  stp x17, cp, [jssp, #-16]!
0xffff7ab1520c   236  add fp, jssp, #0x10 (16)
0xffff7ab15210   240  ldr x17, pc+24 (addr 0x0000ffff7ab15228)    ;; lazy deoptimization bailout 0
0xffff7ab15214   244  add x17, x17, x16
0xffff7ab15218   248  br x17
0xffff7ab1521c   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab15220   256  d63f03e0       constant
0xffff7ab15224   260  d503201f       constant
0xffff7ab15228   264  7a906000       constant
0xffff7ab1522c   268  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0xffff7ab1518c  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab151c8  constant pool (size 16)
0xffff7ab15210  runtime entry
0xffff7ab1521c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2453
type = NORMAL
name = BinaryOpICStub(SHR:Number*Smi->Smi)
compiler = crankshaft
Instructions (size = 280)
0xffff7ab15120     0  mov x2, x0
0xffff7ab15124     4  tbnz w2, #0, #+0xb4 (addr 0xffff7ab151d8)
0xffff7ab15128     8  tbnz w1, #0, #+0x20 (addr 0xffff7ab15148)
0xffff7ab1512c    12  asr x4, x1, #32
0xffff7ab15130    16  asr x2, x2, #32
0xffff7ab15134    20  lsr w2, w4, w2
0xffff7ab15138    24  tbnz w2, #31, #+0xb0 (addr 0xffff7ab151e8)
0xffff7ab1513c    28  lsl x2, x2, #32
0xffff7ab15140    32  mov x0, x2
0xffff7ab15144    36  ret
0xffff7ab15148    40  sub csp, jssp, #0x10 (16)
0xffff7ab1514c    44  stp fp, lr, [jssp, #-16]!
0xffff7ab15150    48  movz fp, #0xa00000000
0xffff7ab15154    52  sub csp, jssp, #0x8 (8)
0xffff7ab15158    56  str fp, [jssp, #-8]!
0xffff7ab1515c    60  add fp, jssp, #0x8 (8)
0xffff7ab15160    64  ldur x16, [x1, #-1]
0xffff7ab15164    68  ldr x17, [x26, #120]
0xffff7ab15168    72  cmp x16, x17
0xffff7ab1516c    76  b.ne #+0x30 (addr 0xffff7ab1519c)
0xffff7ab15170    80  ldur d30, [x1, #7]
0xffff7ab15174    84  fcvtzs x4, d30
0xffff7ab15178    88  cmp x4, #0x1 (1)
0xffff7ab1517c    92  ccmn x4, #1, #nzcV, vc
0xffff7ab15180    96  b.vc #+0x18 (addr 0xffff7ab15198)
0xffff7ab15184   100  sub csp, jssp, #0x8 (8)
0xffff7ab15188   104  str lr, [jssp, #-8]!
0xffff7ab1518c   108  ldr x16, pc+68 (addr 0x0000ffff7ab151d0)    ;; code: STUB, DoubleToIStub, minor: 127233
0xffff7ab15190   112  blr x16
0xffff7ab15194   116  ldr lr, [jssp], #8
0xffff7ab15198   120  b #+0x24 (addr 0xffff7ab151bc)
0xffff7ab1519c   124  ldp x4, x3, [x26, #64]
0xffff7ab151a0   128  cmp x1, x4
0xffff7ab151a4   132  cset x4, eq
0xffff7ab151a8   136  ccmp x1, x3, #nZcv, ne
0xffff7ab151ac   140  b.eq #+0x10 (addr 0xffff7ab151bc)
0xffff7ab151b0   144  ldr x16, [x26, #40]
0xffff7ab151b4   148  cmp x1, x16
0xffff7ab151b8   152  b.ne #+0x40 (addr 0xffff7ab151f8)
0xffff7ab151bc   156  ldr lr, [jssp, #16]
0xffff7ab151c0   160  ldp xzr, fp, [jssp], #24
0xffff7ab151c4   164  b #-0x94 (addr 0xffff7ab15130)
0xffff7ab151c8   168  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab151cc   172  d63f03e0       constant
0xffff7ab151d0   176  7ab0fee0       constant
0xffff7ab151d4   180  0000ffff       constant
0xffff7ab151d8   184  movz x16, #0x0
0xffff7ab151dc   188  sub csp, jssp, #0x10 (16)
0xffff7ab151e0   192  stp fp, lr, [jssp, #-16]!
0xffff7ab151e4   196  bl #+0x1c (addr 0xffff7ab15200)
0xffff7ab151e8   200  movz x16, #0x8
0xffff7ab151ec   204  sub csp, jssp, #0x10 (16)
0xffff7ab151f0   208  stp fp, lr, [jssp, #-16]!
0xffff7ab151f4   212  bl #+0xc (addr 0xffff7ab15200)
0xffff7ab151f8   216  movz x16, #0x10
0xffff7ab151fc   220  bl #+0x14 (addr 0xffff7ab15210)
0xffff7ab15200   224  movz x17, #0xa00000000
0xffff7ab15204   228  sub csp, jssp, #0x10 (16)
0xffff7ab15208   232  stp x17, cp, [jssp, #-16]!
0xffff7ab1520c   236  add fp, jssp, #0x10 (16)
0xffff7ab15210   240  ldr x17, pc+24 (addr 0x0000ffff7ab15228)    ;; lazy deoptimization bailout 0
0xffff7ab15214   244  add x17, x17, x16
0xffff7ab15218   248  br x17
0xffff7ab1521c   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab15220   256  d63f03e0       constant
0xffff7ab15224   260  d503201f       constant
0xffff7ab15228   264  7a906000       constant
0xffff7ab1522c   268  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0xffff7ab1518c  code target (STUB)  (0xffff7ab0fee0)
0xffff7ab151c8  constant pool (size 16)
0xffff7ab15210  runtime entry
0xffff7ab1521c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2197
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 144)
0xffff7ab152a0     0  mov x2, x1
0xffff7ab152a4     4  tbnz w2, #0, #+0x28 (addr 0xffff7ab152cc)
0xffff7ab152a8     8  mov x3, x0
0xffff7ab152ac    12  tbnz w3, #0, #+0x30 (addr 0xffff7ab152dc)
0xffff7ab152b0    16  asr x2, x2, #32
0xffff7ab152b4    20  asr x3, x3, #32
0xffff7ab152b8    24  lsr w2, w2, w3
0xffff7ab152bc    28  tbnz w2, #31, #+0x30 (addr 0xffff7ab152ec)
0xffff7ab152c0    32  lsl x2, x2, #32
0xffff7ab152c4    36  mov x0, x2
0xffff7ab152c8    40  ret
0xffff7ab152cc    44  movz x16, #0x0
0xffff7ab152d0    48  sub csp, jssp, #0x10 (16)
0xffff7ab152d4    52  stp fp, lr, [jssp, #-16]!
0xffff7ab152d8    56  bl #+0x24 (addr 0xffff7ab152fc)
0xffff7ab152dc    60  movz x16, #0x8
0xffff7ab152e0    64  sub csp, jssp, #0x10 (16)
0xffff7ab152e4    68  stp fp, lr, [jssp, #-16]!
0xffff7ab152e8    72  bl #+0x14 (addr 0xffff7ab152fc)
0xffff7ab152ec    76  movz x16, #0x10
0xffff7ab152f0    80  sub csp, jssp, #0x10 (16)
0xffff7ab152f4    84  stp fp, lr, [jssp, #-16]!
0xffff7ab152f8    88  bl #+0x4 (addr 0xffff7ab152fc)
0xffff7ab152fc    92  movz x17, #0xa00000000
0xffff7ab15300    96  sub csp, jssp, #0x10 (16)
0xffff7ab15304   100  stp x17, cp, [jssp, #-16]!
0xffff7ab15308   104  add fp, jssp, #0x10 (16)
0xffff7ab1530c   108  ldr x17, pc+20 (addr 0x0000ffff7ab15320)    ;; lazy deoptimization bailout 0
0xffff7ab15310   112  add x17, x17, x16
0xffff7ab15314   116  br x17
0xffff7ab15318   120  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab1531c   124  d63f03e0       constant
0xffff7ab15320   128  7a906000       constant
0xffff7ab15324   132  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab1530c  runtime entry
0xffff7ab15318  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2197
type = NORMAL
name = BinaryOpICStub(SHR:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 144)
0xffff7ab152a0     0  mov x2, x1
0xffff7ab152a4     4  tbnz w2, #0, #+0x28 (addr 0xffff7ab152cc)
0xffff7ab152a8     8  mov x3, x0
0xffff7ab152ac    12  tbnz w3, #0, #+0x30 (addr 0xffff7ab152dc)
0xffff7ab152b0    16  asr x2, x2, #32
0xffff7ab152b4    20  asr x3, x3, #32
0xffff7ab152b8    24  lsr w2, w2, w3
0xffff7ab152bc    28  tbnz w2, #31, #+0x30 (addr 0xffff7ab152ec)
0xffff7ab152c0    32  lsl x2, x2, #32
0xffff7ab152c4    36  mov x0, x2
0xffff7ab152c8    40  ret
0xffff7ab152cc    44  movz x16, #0x0
0xffff7ab152d0    48  sub csp, jssp, #0x10 (16)
0xffff7ab152d4    52  stp fp, lr, [jssp, #-16]!
0xffff7ab152d8    56  bl #+0x24 (addr 0xffff7ab152fc)
0xffff7ab152dc    60  movz x16, #0x8
0xffff7ab152e0    64  sub csp, jssp, #0x10 (16)
0xffff7ab152e4    68  stp fp, lr, [jssp, #-16]!
0xffff7ab152e8    72  bl #+0x14 (addr 0xffff7ab152fc)
0xffff7ab152ec    76  movz x16, #0x10
0xffff7ab152f0    80  sub csp, jssp, #0x10 (16)
0xffff7ab152f4    84  stp fp, lr, [jssp, #-16]!
0xffff7ab152f8    88  bl #+0x4 (addr 0xffff7ab152fc)
0xffff7ab152fc    92  movz x17, #0xa00000000
0xffff7ab15300    96  sub csp, jssp, #0x10 (16)
0xffff7ab15304   100  stp x17, cp, [jssp, #-16]!
0xffff7ab15308   104  add fp, jssp, #0x10 (16)
0xffff7ab1530c   108  ldr x17, pc+20 (addr 0x0000ffff7ab15320)    ;; lazy deoptimization bailout 0
0xffff7ab15310   112  add x17, x17, x16
0xffff7ab15314   116  br x17
0xffff7ab15318   120  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab1531c   124  d63f03e0       constant
0xffff7ab15320   128  7a906000       constant
0xffff7ab15324   132  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab1530c  runtime entry
0xffff7ab15318  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4392
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0xffff7ab153a0     0  mov x2, x1
0xffff7ab153a4     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab153c0)
0xffff7ab153a8     8  mov x3, x0
0xffff7ab153ac    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab153d0)
0xffff7ab153b0    16  subs x2, x2, x3
0xffff7ab153b4    20  b.vs #+0x2c (addr 0xffff7ab153e0)
0xffff7ab153b8    24  mov x0, x2
0xffff7ab153bc    28  ret
0xffff7ab153c0    32  movz x16, #0x0
0xffff7ab153c4    36  sub csp, jssp, #0x10 (16)
0xffff7ab153c8    40  stp fp, lr, [jssp, #-16]!
0xffff7ab153cc    44  bl #+0x24 (addr 0xffff7ab153f0)
0xffff7ab153d0    48  movz x16, #0x8
0xffff7ab153d4    52  sub csp, jssp, #0x10 (16)
0xffff7ab153d8    56  stp fp, lr, [jssp, #-16]!
0xffff7ab153dc    60  bl #+0x14 (addr 0xffff7ab153f0)
0xffff7ab153e0    64  movz x16, #0x10
0xffff7ab153e4    68  sub csp, jssp, #0x10 (16)
0xffff7ab153e8    72  stp fp, lr, [jssp, #-16]!
0xffff7ab153ec    76  bl #+0x4 (addr 0xffff7ab153f0)
0xffff7ab153f0    80  movz x17, #0xa00000000
0xffff7ab153f4    84  sub csp, jssp, #0x10 (16)
0xffff7ab153f8    88  stp x17, cp, [jssp, #-16]!
0xffff7ab153fc    92  add fp, jssp, #0x10 (16)
0xffff7ab15400    96  ldr x17, pc+24 (addr 0x0000ffff7ab15418)    ;; lazy deoptimization bailout 0
0xffff7ab15404   100  add x17, x17, x16
0xffff7ab15408   104  br x17
0xffff7ab1540c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab15410   112  d63f03e0       constant
0xffff7ab15414   116  d503201f       constant
0xffff7ab15418   120  7a906000       constant
0xffff7ab1541c   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab15400  runtime entry
0xffff7ab1540c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4392
type = NORMAL
name = BinaryOpICStub(SUB:Int32*Int32->Int32)
compiler = crankshaft
Instructions (size = 136)
0xffff7ab153a0     0  mov x2, x1
0xffff7ab153a4     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab153c0)
0xffff7ab153a8     8  mov x3, x0
0xffff7ab153ac    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab153d0)
0xffff7ab153b0    16  subs x2, x2, x3
0xffff7ab153b4    20  b.vs #+0x2c (addr 0xffff7ab153e0)
0xffff7ab153b8    24  mov x0, x2
0xffff7ab153bc    28  ret
0xffff7ab153c0    32  movz x16, #0x0
0xffff7ab153c4    36  sub csp, jssp, #0x10 (16)
0xffff7ab153c8    40  stp fp, lr, [jssp, #-16]!
0xffff7ab153cc    44  bl #+0x24 (addr 0xffff7ab153f0)
0xffff7ab153d0    48  movz x16, #0x8
0xffff7ab153d4    52  sub csp, jssp, #0x10 (16)
0xffff7ab153d8    56  stp fp, lr, [jssp, #-16]!
0xffff7ab153dc    60  bl #+0x14 (addr 0xffff7ab153f0)
0xffff7ab153e0    64  movz x16, #0x10
0xffff7ab153e4    68  sub csp, jssp, #0x10 (16)
0xffff7ab153e8    72  stp fp, lr, [jssp, #-16]!
0xffff7ab153ec    76  bl #+0x4 (addr 0xffff7ab153f0)
0xffff7ab153f0    80  movz x17, #0xa00000000
0xffff7ab153f4    84  sub csp, jssp, #0x10 (16)
0xffff7ab153f8    88  stp x17, cp, [jssp, #-16]!
0xffff7ab153fc    92  add fp, jssp, #0x10 (16)
0xffff7ab15400    96  ldr x17, pc+24 (addr 0x0000ffff7ab15418)    ;; lazy deoptimization bailout 0
0xffff7ab15404   100  add x17, x17, x16
0xffff7ab15408   104  br x17
0xffff7ab1540c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab15410   112  d63f03e0       constant
0xffff7ab15414   116  d503201f       constant
0xffff7ab15418   120  7a906000       constant
0xffff7ab1541c   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab15400  runtime entry
0xffff7ab1540c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6456
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0xffff7ab154a0     0  mov x2, x1
0xffff7ab154a4     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab15598)
0xffff7ab154a8     8  tbz w0, #0, #+0x34 (addr 0xffff7ab154dc)
0xffff7ab154ac    12  ldur x16, [x0, #-1]
0xffff7ab154b0    16  ldr x17, [x26, #120]
0xffff7ab154b4    20  cmp x16, x17
0xffff7ab154b8    24  b.ne #+0xc (addr 0xffff7ab154c4)
0xffff7ab154bc    28  ldur d0, [x0, #7]
0xffff7ab154c0    32  b #+0x20 (addr 0xffff7ab154e0)
0xffff7ab154c4    36  ldr x16, [x26, #40]
0xffff7ab154c8    40  cmp x0, x16
0xffff7ab154cc    44  b.ne #+0xdc (addr 0xffff7ab155a8)
0xffff7ab154d0    48  ldr x3, [x26, #928]
0xffff7ab154d4    52  ldur d0, [x3, #7]
0xffff7ab154d8    56  b #+0x8 (addr 0xffff7ab154e0)
0xffff7ab154dc    60  scvtf d0, x0, #32
0xffff7ab154e0    64  scvtf d1, x2, #32
0xffff7ab154e4    68  fsub d0, d1, d0
0xffff7ab154e8    72  movz x1, #0xe2c0
0xffff7ab154ec    76  movk x1, #0x9ab, lsl #16
0xffff7ab154f0    80  ldp x2, x0, [x1]
0xffff7ab154f4    84  adds x16, x2, #0x10 (16)
0xffff7ab154f8    88  ccmp x16, x0, #nzCv, lo
0xffff7ab154fc    92  b.hi #+0x20 (addr 0xffff7ab1551c)
0xffff7ab15500    96  str x16, [x1]
0xffff7ab15504   100  ldr x1, [x26, #120]
0xffff7ab15508   104  str x1, [x2]
0xffff7ab1550c   108  orr x2, x2, #0x1
0xffff7ab15510   112  stur d0, [x2, #7]
0xffff7ab15514   116  mov x0, x2
0xffff7ab15518   120  ret
0xffff7ab1551c   124  sub csp, jssp, #0x10 (16)
0xffff7ab15520   128  stp fp, lr, [jssp, #-16]!
0xffff7ab15524   132  movz fp, #0xa00000000
0xffff7ab15528   136  sub csp, jssp, #0x8 (8)
0xffff7ab1552c   140  str fp, [jssp, #-8]!
0xffff7ab15530   144  add fp, jssp, #0x8 (8)
0xffff7ab15534   148  movz x2, #0x0
0xffff7ab15538   152  mov x16, lr
0xffff7ab1553c   156  ldr x17, pc+68 (addr 0x0000ffff7ab15580)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab15540   160  blr x17
0xffff7ab15544   164  ldur cp, [fp, #-8]
0xffff7ab15548   168  movz x0, #0x0
0xffff7ab1554c   172  movz x1, #0x4b48
0xffff7ab15550   176  movk x1, #0xe4, lsl #16
0xffff7ab15554   180  ldr x16, pc+52 (addr 0x0000ffff7ab15588)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab15558   184  blr x16
0xffff7ab1555c   188  str x0, [jssp, #16]
0xffff7ab15560   192  ldr x16, pc+48 (addr 0x0000ffff7ab15590)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab15564   196  blr x16
0xffff7ab15568   200  ldr lr, [jssp, #16]
0xffff7ab1556c   204  ldp xzr, fp, [jssp], #24
0xffff7ab15570   208  b #-0x60 (addr 0xffff7ab15510)
0xffff7ab15574   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab15578   216  d63f03e0       constant
0xffff7ab1557c   220  d503201f       constant
0xffff7ab15580   224  7ab06820       constant
0xffff7ab15584   228  0000ffff       constant
0xffff7ab15588   232  7ab06260       constant
0xffff7ab1558c   236  0000ffff       constant
0xffff7ab15590   240  7ab068e0       constant
0xffff7ab15594   244  0000ffff       constant
0xffff7ab15598   248  movz x16, #0x0
0xffff7ab1559c   252  sub csp, jssp, #0x10 (16)
0xffff7ab155a0   256  stp fp, lr, [jssp, #-16]!
0xffff7ab155a4   260  bl #+0x14 (addr 0xffff7ab155b8)
0xffff7ab155a8   264  movz x16, #0x8
0xffff7ab155ac   268  sub csp, jssp, #0x10 (16)
0xffff7ab155b0   272  stp fp, lr, [jssp, #-16]!
0xffff7ab155b4   276  bl #+0x4 (addr 0xffff7ab155b8)
0xffff7ab155b8   280  movz x17, #0xa00000000
0xffff7ab155bc   284  sub csp, jssp, #0x10 (16)
0xffff7ab155c0   288  stp x17, cp, [jssp, #-16]!
0xffff7ab155c4   292  add fp, jssp, #0x10 (16)
0xffff7ab155c8   296  ldr x17, pc+24 (addr 0x0000ffff7ab155e0)    ;; lazy deoptimization bailout 0
0xffff7ab155cc   300  add x17, x17, x16
0xffff7ab155d0   304  br x17
0xffff7ab155d4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab155d8   312  d63f03e0       constant
0xffff7ab155dc   316  d503201f       constant
0xffff7ab155e0   320  7a906000       constant
0xffff7ab155e4   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab1555c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab1553c  code target (STUB)  (0xffff7ab06820)
0xffff7ab15554  code target (STUB)  (0xffff7ab06260)
0xffff7ab15560  code target (STUB)  (0xffff7ab068e0)
0xffff7ab15574  constant pool (size 36)
0xffff7ab155c8  runtime entry
0xffff7ab155d4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6456
type = NORMAL
name = BinaryOpICStub(SUB:Int32*Number->Number)
compiler = crankshaft
Instructions (size = 349)
0xffff7ab154a0     0  mov x2, x1
0xffff7ab154a4     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab15598)
0xffff7ab154a8     8  tbz w0, #0, #+0x34 (addr 0xffff7ab154dc)
0xffff7ab154ac    12  ldur x16, [x0, #-1]
0xffff7ab154b0    16  ldr x17, [x26, #120]
0xffff7ab154b4    20  cmp x16, x17
0xffff7ab154b8    24  b.ne #+0xc (addr 0xffff7ab154c4)
0xffff7ab154bc    28  ldur d0, [x0, #7]
0xffff7ab154c0    32  b #+0x20 (addr 0xffff7ab154e0)
0xffff7ab154c4    36  ldr x16, [x26, #40]
0xffff7ab154c8    40  cmp x0, x16
0xffff7ab154cc    44  b.ne #+0xdc (addr 0xffff7ab155a8)
0xffff7ab154d0    48  ldr x3, [x26, #928]
0xffff7ab154d4    52  ldur d0, [x3, #7]
0xffff7ab154d8    56  b #+0x8 (addr 0xffff7ab154e0)
0xffff7ab154dc    60  scvtf d0, x0, #32
0xffff7ab154e0    64  scvtf d1, x2, #32
0xffff7ab154e4    68  fsub d0, d1, d0
0xffff7ab154e8    72  movz x1, #0xe2c0
0xffff7ab154ec    76  movk x1, #0x9ab, lsl #16
0xffff7ab154f0    80  ldp x2, x0, [x1]
0xffff7ab154f4    84  adds x16, x2, #0x10 (16)
0xffff7ab154f8    88  ccmp x16, x0, #nzCv, lo
0xffff7ab154fc    92  b.hi #+0x20 (addr 0xffff7ab1551c)
0xffff7ab15500    96  str x16, [x1]
0xffff7ab15504   100  ldr x1, [x26, #120]
0xffff7ab15508   104  str x1, [x2]
0xffff7ab1550c   108  orr x2, x2, #0x1
0xffff7ab15510   112  stur d0, [x2, #7]
0xffff7ab15514   116  mov x0, x2
0xffff7ab15518   120  ret
0xffff7ab1551c   124  sub csp, jssp, #0x10 (16)
0xffff7ab15520   128  stp fp, lr, [jssp, #-16]!
0xffff7ab15524   132  movz fp, #0xa00000000
0xffff7ab15528   136  sub csp, jssp, #0x8 (8)
0xffff7ab1552c   140  str fp, [jssp, #-8]!
0xffff7ab15530   144  add fp, jssp, #0x8 (8)
0xffff7ab15534   148  movz x2, #0x0
0xffff7ab15538   152  mov x16, lr
0xffff7ab1553c   156  ldr x17, pc+68 (addr 0x0000ffff7ab15580)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab15540   160  blr x17
0xffff7ab15544   164  ldur cp, [fp, #-8]
0xffff7ab15548   168  movz x0, #0x0
0xffff7ab1554c   172  movz x1, #0x4b48
0xffff7ab15550   176  movk x1, #0xe4, lsl #16
0xffff7ab15554   180  ldr x16, pc+52 (addr 0x0000ffff7ab15588)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab15558   184  blr x16
0xffff7ab1555c   188  str x0, [jssp, #16]
0xffff7ab15560   192  ldr x16, pc+48 (addr 0x0000ffff7ab15590)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab15564   196  blr x16
0xffff7ab15568   200  ldr lr, [jssp, #16]
0xffff7ab1556c   204  ldp xzr, fp, [jssp], #24
0xffff7ab15570   208  b #-0x60 (addr 0xffff7ab15510)
0xffff7ab15574   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab15578   216  d63f03e0       constant
0xffff7ab1557c   220  d503201f       constant
0xffff7ab15580   224  7ab06820       constant
0xffff7ab15584   228  0000ffff       constant
0xffff7ab15588   232  7ab06260       constant
0xffff7ab1558c   236  0000ffff       constant
0xffff7ab15590   240  7ab068e0       constant
0xffff7ab15594   244  0000ffff       constant
0xffff7ab15598   248  movz x16, #0x0
0xffff7ab1559c   252  sub csp, jssp, #0x10 (16)
0xffff7ab155a0   256  stp fp, lr, [jssp, #-16]!
0xffff7ab155a4   260  bl #+0x14 (addr 0xffff7ab155b8)
0xffff7ab155a8   264  movz x16, #0x8
0xffff7ab155ac   268  sub csp, jssp, #0x10 (16)
0xffff7ab155b0   272  stp fp, lr, [jssp, #-16]!
0xffff7ab155b4   276  bl #+0x4 (addr 0xffff7ab155b8)
0xffff7ab155b8   280  movz x17, #0xa00000000
0xffff7ab155bc   284  sub csp, jssp, #0x10 (16)
0xffff7ab155c0   288  stp x17, cp, [jssp, #-16]!
0xffff7ab155c4   292  add fp, jssp, #0x10 (16)
0xffff7ab155c8   296  ldr x17, pc+24 (addr 0x0000ffff7ab155e0)    ;; lazy deoptimization bailout 0
0xffff7ab155cc   300  add x17, x17, x16
0xffff7ab155d0   304  br x17
0xffff7ab155d4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab155d8   312  d63f03e0       constant
0xffff7ab155dc   316  d503201f       constant
0xffff7ab155e0   320  7a906000       constant
0xffff7ab155e4   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab1555c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab1553c  code target (STUB)  (0xffff7ab06820)
0xffff7ab15554  code target (STUB)  (0xffff7ab06260)
0xffff7ab15560  code target (STUB)  (0xffff7ab068e0)
0xffff7ab15574  constant pool (size 36)
0xffff7ab155c8  runtime entry
0xffff7ab155d4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2344
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0xffff7ab15660     0  mov x2, x1
0xffff7ab15664     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab15680)
0xffff7ab15668     8  mov x3, x0
0xffff7ab1566c    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab15690)
0xffff7ab15670    16  subs x2, x2, x3
0xffff7ab15674    20  b.vs #+0x2c (addr 0xffff7ab156a0)
0xffff7ab15678    24  mov x0, x2
0xffff7ab1567c    28  ret
0xffff7ab15680    32  movz x16, #0x0
0xffff7ab15684    36  sub csp, jssp, #0x10 (16)
0xffff7ab15688    40  stp fp, lr, [jssp, #-16]!
0xffff7ab1568c    44  bl #+0x24 (addr 0xffff7ab156b0)
0xffff7ab15690    48  movz x16, #0x8
0xffff7ab15694    52  sub csp, jssp, #0x10 (16)
0xffff7ab15698    56  stp fp, lr, [jssp, #-16]!
0xffff7ab1569c    60  bl #+0x14 (addr 0xffff7ab156b0)
0xffff7ab156a0    64  movz x16, #0x10
0xffff7ab156a4    68  sub csp, jssp, #0x10 (16)
0xffff7ab156a8    72  stp fp, lr, [jssp, #-16]!
0xffff7ab156ac    76  bl #+0x4 (addr 0xffff7ab156b0)
0xffff7ab156b0    80  movz x17, #0xa00000000
0xffff7ab156b4    84  sub csp, jssp, #0x10 (16)
0xffff7ab156b8    88  stp x17, cp, [jssp, #-16]!
0xffff7ab156bc    92  add fp, jssp, #0x10 (16)
0xffff7ab156c0    96  ldr x17, pc+24 (addr 0x0000ffff7ab156d8)    ;; lazy deoptimization bailout 0
0xffff7ab156c4   100  add x17, x17, x16
0xffff7ab156c8   104  br x17
0xffff7ab156cc   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab156d0   112  d63f03e0       constant
0xffff7ab156d4   116  d503201f       constant
0xffff7ab156d8   120  7a906000       constant
0xffff7ab156dc   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab156c0  runtime entry
0xffff7ab156cc  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2344
type = NORMAL
name = BinaryOpICStub(SUB:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 136)
0xffff7ab15660     0  mov x2, x1
0xffff7ab15664     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab15680)
0xffff7ab15668     8  mov x3, x0
0xffff7ab1566c    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab15690)
0xffff7ab15670    16  subs x2, x2, x3
0xffff7ab15674    20  b.vs #+0x2c (addr 0xffff7ab156a0)
0xffff7ab15678    24  mov x0, x2
0xffff7ab1567c    28  ret
0xffff7ab15680    32  movz x16, #0x0
0xffff7ab15684    36  sub csp, jssp, #0x10 (16)
0xffff7ab15688    40  stp fp, lr, [jssp, #-16]!
0xffff7ab1568c    44  bl #+0x24 (addr 0xffff7ab156b0)
0xffff7ab15690    48  movz x16, #0x8
0xffff7ab15694    52  sub csp, jssp, #0x10 (16)
0xffff7ab15698    56  stp fp, lr, [jssp, #-16]!
0xffff7ab1569c    60  bl #+0x14 (addr 0xffff7ab156b0)
0xffff7ab156a0    64  movz x16, #0x10
0xffff7ab156a4    68  sub csp, jssp, #0x10 (16)
0xffff7ab156a8    72  stp fp, lr, [jssp, #-16]!
0xffff7ab156ac    76  bl #+0x4 (addr 0xffff7ab156b0)
0xffff7ab156b0    80  movz x17, #0xa00000000
0xffff7ab156b4    84  sub csp, jssp, #0x10 (16)
0xffff7ab156b8    88  stp x17, cp, [jssp, #-16]!
0xffff7ab156bc    92  add fp, jssp, #0x10 (16)
0xffff7ab156c0    96  ldr x17, pc+24 (addr 0x0000ffff7ab156d8)    ;; lazy deoptimization bailout 0
0xffff7ab156c4   100  add x17, x17, x16
0xffff7ab156c8   104  br x17
0xffff7ab156cc   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab156d0   112  d63f03e0       constant
0xffff7ab156d4   116  d503201f       constant
0xffff7ab156d8   120  7a906000       constant
0xffff7ab156dc   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab156c0  runtime entry
0xffff7ab156cc  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4536
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0xffff7ab15760     0  mov x2, x0
0xffff7ab15764     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab15858)
0xffff7ab15768     8  tbz w1, #0, #+0x34 (addr 0xffff7ab1579c)
0xffff7ab1576c    12  ldur x16, [x1, #-1]
0xffff7ab15770    16  ldr x17, [x26, #120]
0xffff7ab15774    20  cmp x16, x17
0xffff7ab15778    24  b.ne #+0xc (addr 0xffff7ab15784)
0xffff7ab1577c    28  ldur d0, [x1, #7]
0xffff7ab15780    32  b #+0x20 (addr 0xffff7ab157a0)
0xffff7ab15784    36  ldr x16, [x26, #40]
0xffff7ab15788    40  cmp x1, x16
0xffff7ab1578c    44  b.ne #+0xdc (addr 0xffff7ab15868)
0xffff7ab15790    48  ldr x3, [x26, #928]
0xffff7ab15794    52  ldur d0, [x3, #7]
0xffff7ab15798    56  b #+0x8 (addr 0xffff7ab157a0)
0xffff7ab1579c    60  scvtf d0, x1, #32
0xffff7ab157a0    64  scvtf d1, x2, #32
0xffff7ab157a4    68  fsub d0, d0, d1
0xffff7ab157a8    72  movz x1, #0xe2c0
0xffff7ab157ac    76  movk x1, #0x9ab, lsl #16
0xffff7ab157b0    80  ldp x2, x0, [x1]
0xffff7ab157b4    84  adds x16, x2, #0x10 (16)
0xffff7ab157b8    88  ccmp x16, x0, #nzCv, lo
0xffff7ab157bc    92  b.hi #+0x20 (addr 0xffff7ab157dc)
0xffff7ab157c0    96  str x16, [x1]
0xffff7ab157c4   100  ldr x1, [x26, #120]
0xffff7ab157c8   104  str x1, [x2]
0xffff7ab157cc   108  orr x2, x2, #0x1
0xffff7ab157d0   112  stur d0, [x2, #7]
0xffff7ab157d4   116  mov x0, x2
0xffff7ab157d8   120  ret
0xffff7ab157dc   124  sub csp, jssp, #0x10 (16)
0xffff7ab157e0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab157e4   132  movz fp, #0xa00000000
0xffff7ab157e8   136  sub csp, jssp, #0x8 (8)
0xffff7ab157ec   140  str fp, [jssp, #-8]!
0xffff7ab157f0   144  add fp, jssp, #0x8 (8)
0xffff7ab157f4   148  movz x2, #0x0
0xffff7ab157f8   152  mov x16, lr
0xffff7ab157fc   156  ldr x17, pc+68 (addr 0x0000ffff7ab15840)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab15800   160  blr x17
0xffff7ab15804   164  ldur cp, [fp, #-8]
0xffff7ab15808   168  movz x0, #0x0
0xffff7ab1580c   172  movz x1, #0x4b48
0xffff7ab15810   176  movk x1, #0xe4, lsl #16
0xffff7ab15814   180  ldr x16, pc+52 (addr 0x0000ffff7ab15848)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab15818   184  blr x16
0xffff7ab1581c   188  str x0, [jssp, #16]
0xffff7ab15820   192  ldr x16, pc+48 (addr 0x0000ffff7ab15850)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab15824   196  blr x16
0xffff7ab15828   200  ldr lr, [jssp, #16]
0xffff7ab1582c   204  ldp xzr, fp, [jssp], #24
0xffff7ab15830   208  b #-0x60 (addr 0xffff7ab157d0)
0xffff7ab15834   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab15838   216  d63f03e0       constant
0xffff7ab1583c   220  d503201f       constant
0xffff7ab15840   224  7ab06820       constant
0xffff7ab15844   228  0000ffff       constant
0xffff7ab15848   232  7ab06260       constant
0xffff7ab1584c   236  0000ffff       constant
0xffff7ab15850   240  7ab068e0       constant
0xffff7ab15854   244  0000ffff       constant
0xffff7ab15858   248  movz x16, #0x0
0xffff7ab1585c   252  sub csp, jssp, #0x10 (16)
0xffff7ab15860   256  stp fp, lr, [jssp, #-16]!
0xffff7ab15864   260  bl #+0x14 (addr 0xffff7ab15878)
0xffff7ab15868   264  movz x16, #0x8
0xffff7ab1586c   268  sub csp, jssp, #0x10 (16)
0xffff7ab15870   272  stp fp, lr, [jssp, #-16]!
0xffff7ab15874   276  bl #+0x4 (addr 0xffff7ab15878)
0xffff7ab15878   280  movz x17, #0xa00000000
0xffff7ab1587c   284  sub csp, jssp, #0x10 (16)
0xffff7ab15880   288  stp x17, cp, [jssp, #-16]!
0xffff7ab15884   292  add fp, jssp, #0x10 (16)
0xffff7ab15888   296  ldr x17, pc+24 (addr 0x0000ffff7ab158a0)    ;; lazy deoptimization bailout 0
0xffff7ab1588c   300  add x17, x17, x16
0xffff7ab15890   304  br x17
0xffff7ab15894   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab15898   312  d63f03e0       constant
0xffff7ab1589c   316  d503201f       constant
0xffff7ab158a0   320  7a906000       constant
0xffff7ab158a4   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab1581c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab157fc  code target (STUB)  (0xffff7ab06820)
0xffff7ab15814  code target (STUB)  (0xffff7ab06260)
0xffff7ab15820  code target (STUB)  (0xffff7ab068e0)
0xffff7ab15834  constant pool (size 36)
0xffff7ab15888  runtime entry
0xffff7ab15894  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4536
type = NORMAL
name = BinaryOpICStub(SUB:Number*Int32->Number)
compiler = crankshaft
Instructions (size = 349)
0xffff7ab15760     0  mov x2, x0
0xffff7ab15764     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab15858)
0xffff7ab15768     8  tbz w1, #0, #+0x34 (addr 0xffff7ab1579c)
0xffff7ab1576c    12  ldur x16, [x1, #-1]
0xffff7ab15770    16  ldr x17, [x26, #120]
0xffff7ab15774    20  cmp x16, x17
0xffff7ab15778    24  b.ne #+0xc (addr 0xffff7ab15784)
0xffff7ab1577c    28  ldur d0, [x1, #7]
0xffff7ab15780    32  b #+0x20 (addr 0xffff7ab157a0)
0xffff7ab15784    36  ldr x16, [x26, #40]
0xffff7ab15788    40  cmp x1, x16
0xffff7ab1578c    44  b.ne #+0xdc (addr 0xffff7ab15868)
0xffff7ab15790    48  ldr x3, [x26, #928]
0xffff7ab15794    52  ldur d0, [x3, #7]
0xffff7ab15798    56  b #+0x8 (addr 0xffff7ab157a0)
0xffff7ab1579c    60  scvtf d0, x1, #32
0xffff7ab157a0    64  scvtf d1, x2, #32
0xffff7ab157a4    68  fsub d0, d0, d1
0xffff7ab157a8    72  movz x1, #0xe2c0
0xffff7ab157ac    76  movk x1, #0x9ab, lsl #16
0xffff7ab157b0    80  ldp x2, x0, [x1]
0xffff7ab157b4    84  adds x16, x2, #0x10 (16)
0xffff7ab157b8    88  ccmp x16, x0, #nzCv, lo
0xffff7ab157bc    92  b.hi #+0x20 (addr 0xffff7ab157dc)
0xffff7ab157c0    96  str x16, [x1]
0xffff7ab157c4   100  ldr x1, [x26, #120]
0xffff7ab157c8   104  str x1, [x2]
0xffff7ab157cc   108  orr x2, x2, #0x1
0xffff7ab157d0   112  stur d0, [x2, #7]
0xffff7ab157d4   116  mov x0, x2
0xffff7ab157d8   120  ret
0xffff7ab157dc   124  sub csp, jssp, #0x10 (16)
0xffff7ab157e0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab157e4   132  movz fp, #0xa00000000
0xffff7ab157e8   136  sub csp, jssp, #0x8 (8)
0xffff7ab157ec   140  str fp, [jssp, #-8]!
0xffff7ab157f0   144  add fp, jssp, #0x8 (8)
0xffff7ab157f4   148  movz x2, #0x0
0xffff7ab157f8   152  mov x16, lr
0xffff7ab157fc   156  ldr x17, pc+68 (addr 0x0000ffff7ab15840)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab15800   160  blr x17
0xffff7ab15804   164  ldur cp, [fp, #-8]
0xffff7ab15808   168  movz x0, #0x0
0xffff7ab1580c   172  movz x1, #0x4b48
0xffff7ab15810   176  movk x1, #0xe4, lsl #16
0xffff7ab15814   180  ldr x16, pc+52 (addr 0x0000ffff7ab15848)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab15818   184  blr x16
0xffff7ab1581c   188  str x0, [jssp, #16]
0xffff7ab15820   192  ldr x16, pc+48 (addr 0x0000ffff7ab15850)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab15824   196  blr x16
0xffff7ab15828   200  ldr lr, [jssp, #16]
0xffff7ab1582c   204  ldp xzr, fp, [jssp], #24
0xffff7ab15830   208  b #-0x60 (addr 0xffff7ab157d0)
0xffff7ab15834   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab15838   216  d63f03e0       constant
0xffff7ab1583c   220  d503201f       constant
0xffff7ab15840   224  7ab06820       constant
0xffff7ab15844   228  0000ffff       constant
0xffff7ab15848   232  7ab06260       constant
0xffff7ab1584c   236  0000ffff       constant
0xffff7ab15850   240  7ab068e0       constant
0xffff7ab15854   244  0000ffff       constant
0xffff7ab15858   248  movz x16, #0x0
0xffff7ab1585c   252  sub csp, jssp, #0x10 (16)
0xffff7ab15860   256  stp fp, lr, [jssp, #-16]!
0xffff7ab15864   260  bl #+0x14 (addr 0xffff7ab15878)
0xffff7ab15868   264  movz x16, #0x8
0xffff7ab1586c   268  sub csp, jssp, #0x10 (16)
0xffff7ab15870   272  stp fp, lr, [jssp, #-16]!
0xffff7ab15874   276  bl #+0x4 (addr 0xffff7ab15878)
0xffff7ab15878   280  movz x17, #0xa00000000
0xffff7ab1587c   284  sub csp, jssp, #0x10 (16)
0xffff7ab15880   288  stp x17, cp, [jssp, #-16]!
0xffff7ab15884   292  add fp, jssp, #0x10 (16)
0xffff7ab15888   296  ldr x17, pc+24 (addr 0x0000ffff7ab158a0)    ;; lazy deoptimization bailout 0
0xffff7ab1588c   300  add x17, x17, x16
0xffff7ab15890   304  br x17
0xffff7ab15894   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab15898   312  d63f03e0       constant
0xffff7ab1589c   316  d503201f       constant
0xffff7ab158a0   320  7a906000       constant
0xffff7ab158a4   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab1581c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab157fc  code target (STUB)  (0xffff7ab06820)
0xffff7ab15814  code target (STUB)  (0xffff7ab06260)
0xffff7ab15820  code target (STUB)  (0xffff7ab068e0)
0xffff7ab15834  constant pool (size 36)
0xffff7ab15888  runtime entry
0xffff7ab15894  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6584
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 389)
0xffff7ab15920     0  tbz w1, #0, #+0x34 (addr 0xffff7ab15954)
0xffff7ab15924     4  ldur x16, [x1, #-1]
0xffff7ab15928     8  ldr x17, [x26, #120]
0xffff7ab1592c    12  cmp x16, x17
0xffff7ab15930    16  b.ne #+0xc (addr 0xffff7ab1593c)
0xffff7ab15934    20  ldur d0, [x1, #7]
0xffff7ab15938    24  b #+0x20 (addr 0xffff7ab15958)
0xffff7ab1593c    28  ldr x16, [x26, #40]
0xffff7ab15940    32  cmp x1, x16
0xffff7ab15944    36  b.ne #+0xfc (addr 0xffff7ab15a40)
0xffff7ab15948    40  ldr x2, [x26, #928]
0xffff7ab1594c    44  ldur d0, [x2, #7]
0xffff7ab15950    48  b #+0x8 (addr 0xffff7ab15958)
0xffff7ab15954    52  scvtf d0, x1, #32
0xffff7ab15958    56  tbz w0, #0, #+0x34 (addr 0xffff7ab1598c)
0xffff7ab1595c    60  ldur x16, [x0, #-1]
0xffff7ab15960    64  ldr x17, [x26, #120]
0xffff7ab15964    68  cmp x16, x17
0xffff7ab15968    72  b.ne #+0xc (addr 0xffff7ab15974)
0xffff7ab1596c    76  ldur d1, [x0, #7]
0xffff7ab15970    80  b #+0x20 (addr 0xffff7ab15990)
0xffff7ab15974    84  ldr x16, [x26, #40]
0xffff7ab15978    88  cmp x0, x16
0xffff7ab1597c    92  b.ne #+0xd4 (addr 0xffff7ab15a50)
0xffff7ab15980    96  ldr x2, [x26, #928]
0xffff7ab15984   100  ldur d1, [x2, #7]
0xffff7ab15988   104  b #+0x8 (addr 0xffff7ab15990)
0xffff7ab1598c   108  scvtf d1, x0, #32
0xffff7ab15990   112  fsub d0, d0, d1
0xffff7ab15994   116  movz x1, #0xe2c0
0xffff7ab15998   120  movk x1, #0x9ab, lsl #16
0xffff7ab1599c   124  ldp x2, x0, [x1]
0xffff7ab159a0   128  adds x16, x2, #0x10 (16)
0xffff7ab159a4   132  ccmp x16, x0, #nzCv, lo
0xffff7ab159a8   136  b.hi #+0x20 (addr 0xffff7ab159c8)
0xffff7ab159ac   140  str x16, [x1]
0xffff7ab159b0   144  ldr x1, [x26, #120]
0xffff7ab159b4   148  str x1, [x2]
0xffff7ab159b8   152  orr x2, x2, #0x1
0xffff7ab159bc   156  stur d0, [x2, #7]
0xffff7ab159c0   160  mov x0, x2
0xffff7ab159c4   164  ret
0xffff7ab159c8   168  sub csp, jssp, #0x10 (16)
0xffff7ab159cc   172  stp fp, lr, [jssp, #-16]!
0xffff7ab159d0   176  movz fp, #0xa00000000
0xffff7ab159d4   180  sub csp, jssp, #0x8 (8)
0xffff7ab159d8   184  str fp, [jssp, #-8]!
0xffff7ab159dc   188  add fp, jssp, #0x8 (8)
0xffff7ab159e0   192  movz x2, #0x0
0xffff7ab159e4   196  mov x16, lr
0xffff7ab159e8   200  ldr x17, pc+64 (addr 0x0000ffff7ab15a28)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab159ec   204  blr x17
0xffff7ab159f0   208  ldur cp, [fp, #-8]
0xffff7ab159f4   212  movz x0, #0x0
0xffff7ab159f8   216  movz x1, #0x4b48
0xffff7ab159fc   220  movk x1, #0xe4, lsl #16
0xffff7ab15a00   224  ldr x16, pc+48 (addr 0x0000ffff7ab15a30)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab15a04   228  blr x16
0xffff7ab15a08   232  str x0, [jssp, #16]
0xffff7ab15a0c   236  ldr x16, pc+44 (addr 0x0000ffff7ab15a38)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab15a10   240  blr x16
0xffff7ab15a14   244  ldr lr, [jssp, #16]
0xffff7ab15a18   248  ldp xzr, fp, [jssp], #24
0xffff7ab15a1c   252  b #-0x60 (addr 0xffff7ab159bc)
0xffff7ab15a20   256  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab15a24   260  d63f03e0       constant
0xffff7ab15a28   264  7ab06820       constant
0xffff7ab15a2c   268  0000ffff       constant
0xffff7ab15a30   272  7ab06260       constant
0xffff7ab15a34   276  0000ffff       constant
0xffff7ab15a38   280  7ab068e0       constant
0xffff7ab15a3c   284  0000ffff       constant
0xffff7ab15a40   288  movz x16, #0x0
0xffff7ab15a44   292  sub csp, jssp, #0x10 (16)
0xffff7ab15a48   296  stp fp, lr, [jssp, #-16]!
0xffff7ab15a4c   300  bl #+0x14 (addr 0xffff7ab15a60)
0xffff7ab15a50   304  movz x16, #0x8
0xffff7ab15a54   308  sub csp, jssp, #0x10 (16)
0xffff7ab15a58   312  stp fp, lr, [jssp, #-16]!
0xffff7ab15a5c   316  bl #+0x4 (addr 0xffff7ab15a60)
0xffff7ab15a60   320  movz x17, #0xa00000000
0xffff7ab15a64   324  sub csp, jssp, #0x10 (16)
0xffff7ab15a68   328  stp x17, cp, [jssp, #-16]!
0xffff7ab15a6c   332  add fp, jssp, #0x10 (16)
0xffff7ab15a70   336  ldr x17, pc+24 (addr 0x0000ffff7ab15a88)    ;; lazy deoptimization bailout 0
0xffff7ab15a74   340  add x17, x17, x16
0xffff7ab15a78   344  br x17
0xffff7ab15a7c   348  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab15a80   352  d63f03e0       constant
0xffff7ab15a84   356  d503201f       constant
0xffff7ab15a88   360  7a906000       constant
0xffff7ab15a8c   364  0000ffff       constant


Safepoints (size = 21)
0xffff7ab15a08   232  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab159e8  code target (STUB)  (0xffff7ab06820)
0xffff7ab15a00  code target (STUB)  (0xffff7ab06260)
0xffff7ab15a0c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab15a20  constant pool (size 32)
0xffff7ab15a70  runtime entry
0xffff7ab15a7c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6584
type = NORMAL
name = BinaryOpICStub(SUB:Number*Number->Number)
compiler = crankshaft
Instructions (size = 389)
0xffff7ab15920     0  tbz w1, #0, #+0x34 (addr 0xffff7ab15954)
0xffff7ab15924     4  ldur x16, [x1, #-1]
0xffff7ab15928     8  ldr x17, [x26, #120]
0xffff7ab1592c    12  cmp x16, x17
0xffff7ab15930    16  b.ne #+0xc (addr 0xffff7ab1593c)
0xffff7ab15934    20  ldur d0, [x1, #7]
0xffff7ab15938    24  b #+0x20 (addr 0xffff7ab15958)
0xffff7ab1593c    28  ldr x16, [x26, #40]
0xffff7ab15940    32  cmp x1, x16
0xffff7ab15944    36  b.ne #+0xfc (addr 0xffff7ab15a40)
0xffff7ab15948    40  ldr x2, [x26, #928]
0xffff7ab1594c    44  ldur d0, [x2, #7]
0xffff7ab15950    48  b #+0x8 (addr 0xffff7ab15958)
0xffff7ab15954    52  scvtf d0, x1, #32
0xffff7ab15958    56  tbz w0, #0, #+0x34 (addr 0xffff7ab1598c)
0xffff7ab1595c    60  ldur x16, [x0, #-1]
0xffff7ab15960    64  ldr x17, [x26, #120]
0xffff7ab15964    68  cmp x16, x17
0xffff7ab15968    72  b.ne #+0xc (addr 0xffff7ab15974)
0xffff7ab1596c    76  ldur d1, [x0, #7]
0xffff7ab15970    80  b #+0x20 (addr 0xffff7ab15990)
0xffff7ab15974    84  ldr x16, [x26, #40]
0xffff7ab15978    88  cmp x0, x16
0xffff7ab1597c    92  b.ne #+0xd4 (addr 0xffff7ab15a50)
0xffff7ab15980    96  ldr x2, [x26, #928]
0xffff7ab15984   100  ldur d1, [x2, #7]
0xffff7ab15988   104  b #+0x8 (addr 0xffff7ab15990)
0xffff7ab1598c   108  scvtf d1, x0, #32
0xffff7ab15990   112  fsub d0, d0, d1
0xffff7ab15994   116  movz x1, #0xe2c0
0xffff7ab15998   120  movk x1, #0x9ab, lsl #16
0xffff7ab1599c   124  ldp x2, x0, [x1]
0xffff7ab159a0   128  adds x16, x2, #0x10 (16)
0xffff7ab159a4   132  ccmp x16, x0, #nzCv, lo
0xffff7ab159a8   136  b.hi #+0x20 (addr 0xffff7ab159c8)
0xffff7ab159ac   140  str x16, [x1]
0xffff7ab159b0   144  ldr x1, [x26, #120]
0xffff7ab159b4   148  str x1, [x2]
0xffff7ab159b8   152  orr x2, x2, #0x1
0xffff7ab159bc   156  stur d0, [x2, #7]
0xffff7ab159c0   160  mov x0, x2
0xffff7ab159c4   164  ret
0xffff7ab159c8   168  sub csp, jssp, #0x10 (16)
0xffff7ab159cc   172  stp fp, lr, [jssp, #-16]!
0xffff7ab159d0   176  movz fp, #0xa00000000
0xffff7ab159d4   180  sub csp, jssp, #0x8 (8)
0xffff7ab159d8   184  str fp, [jssp, #-8]!
0xffff7ab159dc   188  add fp, jssp, #0x8 (8)
0xffff7ab159e0   192  movz x2, #0x0
0xffff7ab159e4   196  mov x16, lr
0xffff7ab159e8   200  ldr x17, pc+64 (addr 0x0000ffff7ab15a28)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab159ec   204  blr x17
0xffff7ab159f0   208  ldur cp, [fp, #-8]
0xffff7ab159f4   212  movz x0, #0x0
0xffff7ab159f8   216  movz x1, #0x4b48
0xffff7ab159fc   220  movk x1, #0xe4, lsl #16
0xffff7ab15a00   224  ldr x16, pc+48 (addr 0x0000ffff7ab15a30)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab15a04   228  blr x16
0xffff7ab15a08   232  str x0, [jssp, #16]
0xffff7ab15a0c   236  ldr x16, pc+44 (addr 0x0000ffff7ab15a38)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab15a10   240  blr x16
0xffff7ab15a14   244  ldr lr, [jssp, #16]
0xffff7ab15a18   248  ldp xzr, fp, [jssp], #24
0xffff7ab15a1c   252  b #-0x60 (addr 0xffff7ab159bc)
0xffff7ab15a20   256  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab15a24   260  d63f03e0       constant
0xffff7ab15a28   264  7ab06820       constant
0xffff7ab15a2c   268  0000ffff       constant
0xffff7ab15a30   272  7ab06260       constant
0xffff7ab15a34   276  0000ffff       constant
0xffff7ab15a38   280  7ab068e0       constant
0xffff7ab15a3c   284  0000ffff       constant
0xffff7ab15a40   288  movz x16, #0x0
0xffff7ab15a44   292  sub csp, jssp, #0x10 (16)
0xffff7ab15a48   296  stp fp, lr, [jssp, #-16]!
0xffff7ab15a4c   300  bl #+0x14 (addr 0xffff7ab15a60)
0xffff7ab15a50   304  movz x16, #0x8
0xffff7ab15a54   308  sub csp, jssp, #0x10 (16)
0xffff7ab15a58   312  stp fp, lr, [jssp, #-16]!
0xffff7ab15a5c   316  bl #+0x4 (addr 0xffff7ab15a60)
0xffff7ab15a60   320  movz x17, #0xa00000000
0xffff7ab15a64   324  sub csp, jssp, #0x10 (16)
0xffff7ab15a68   328  stp x17, cp, [jssp, #-16]!
0xffff7ab15a6c   332  add fp, jssp, #0x10 (16)
0xffff7ab15a70   336  ldr x17, pc+24 (addr 0x0000ffff7ab15a88)    ;; lazy deoptimization bailout 0
0xffff7ab15a74   340  add x17, x17, x16
0xffff7ab15a78   344  br x17
0xffff7ab15a7c   348  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab15a80   352  d63f03e0       constant
0xffff7ab15a84   356  d503201f       constant
0xffff7ab15a88   360  7a906000       constant
0xffff7ab15a8c   364  0000ffff       constant


Safepoints (size = 21)
0xffff7ab15a08   232  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab159e8  code target (STUB)  (0xffff7ab06820)
0xffff7ab15a00  code target (STUB)  (0xffff7ab06260)
0xffff7ab15a0c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab15a20  constant pool (size 32)
0xffff7ab15a70  runtime entry
0xffff7ab15a7c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2488
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0xffff7ab15b20     0  mov x2, x0
0xffff7ab15b24     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab15c18)
0xffff7ab15b28     8  tbz w1, #0, #+0x34 (addr 0xffff7ab15b5c)
0xffff7ab15b2c    12  ldur x16, [x1, #-1]
0xffff7ab15b30    16  ldr x17, [x26, #120]
0xffff7ab15b34    20  cmp x16, x17
0xffff7ab15b38    24  b.ne #+0xc (addr 0xffff7ab15b44)
0xffff7ab15b3c    28  ldur d0, [x1, #7]
0xffff7ab15b40    32  b #+0x20 (addr 0xffff7ab15b60)
0xffff7ab15b44    36  ldr x16, [x26, #40]
0xffff7ab15b48    40  cmp x1, x16
0xffff7ab15b4c    44  b.ne #+0xdc (addr 0xffff7ab15c28)
0xffff7ab15b50    48  ldr x3, [x26, #928]
0xffff7ab15b54    52  ldur d0, [x3, #7]
0xffff7ab15b58    56  b #+0x8 (addr 0xffff7ab15b60)
0xffff7ab15b5c    60  scvtf d0, x1, #32
0xffff7ab15b60    64  scvtf d1, x2, #32
0xffff7ab15b64    68  fsub d0, d0, d1
0xffff7ab15b68    72  movz x1, #0xe2c0
0xffff7ab15b6c    76  movk x1, #0x9ab, lsl #16
0xffff7ab15b70    80  ldp x2, x0, [x1]
0xffff7ab15b74    84  adds x16, x2, #0x10 (16)
0xffff7ab15b78    88  ccmp x16, x0, #nzCv, lo
0xffff7ab15b7c    92  b.hi #+0x20 (addr 0xffff7ab15b9c)
0xffff7ab15b80    96  str x16, [x1]
0xffff7ab15b84   100  ldr x1, [x26, #120]
0xffff7ab15b88   104  str x1, [x2]
0xffff7ab15b8c   108  orr x2, x2, #0x1
0xffff7ab15b90   112  stur d0, [x2, #7]
0xffff7ab15b94   116  mov x0, x2
0xffff7ab15b98   120  ret
0xffff7ab15b9c   124  sub csp, jssp, #0x10 (16)
0xffff7ab15ba0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab15ba4   132  movz fp, #0xa00000000
0xffff7ab15ba8   136  sub csp, jssp, #0x8 (8)
0xffff7ab15bac   140  str fp, [jssp, #-8]!
0xffff7ab15bb0   144  add fp, jssp, #0x8 (8)
0xffff7ab15bb4   148  movz x2, #0x0
0xffff7ab15bb8   152  mov x16, lr
0xffff7ab15bbc   156  ldr x17, pc+68 (addr 0x0000ffff7ab15c00)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab15bc0   160  blr x17
0xffff7ab15bc4   164  ldur cp, [fp, #-8]
0xffff7ab15bc8   168  movz x0, #0x0
0xffff7ab15bcc   172  movz x1, #0x4b48
0xffff7ab15bd0   176  movk x1, #0xe4, lsl #16
0xffff7ab15bd4   180  ldr x16, pc+52 (addr 0x0000ffff7ab15c08)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab15bd8   184  blr x16
0xffff7ab15bdc   188  str x0, [jssp, #16]
0xffff7ab15be0   192  ldr x16, pc+48 (addr 0x0000ffff7ab15c10)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab15be4   196  blr x16
0xffff7ab15be8   200  ldr lr, [jssp, #16]
0xffff7ab15bec   204  ldp xzr, fp, [jssp], #24
0xffff7ab15bf0   208  b #-0x60 (addr 0xffff7ab15b90)
0xffff7ab15bf4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab15bf8   216  d63f03e0       constant
0xffff7ab15bfc   220  d503201f       constant
0xffff7ab15c00   224  7ab06820       constant
0xffff7ab15c04   228  0000ffff       constant
0xffff7ab15c08   232  7ab06260       constant
0xffff7ab15c0c   236  0000ffff       constant
0xffff7ab15c10   240  7ab068e0       constant
0xffff7ab15c14   244  0000ffff       constant
0xffff7ab15c18   248  movz x16, #0x0
0xffff7ab15c1c   252  sub csp, jssp, #0x10 (16)
0xffff7ab15c20   256  stp fp, lr, [jssp, #-16]!
0xffff7ab15c24   260  bl #+0x14 (addr 0xffff7ab15c38)
0xffff7ab15c28   264  movz x16, #0x8
0xffff7ab15c2c   268  sub csp, jssp, #0x10 (16)
0xffff7ab15c30   272  stp fp, lr, [jssp, #-16]!
0xffff7ab15c34   276  bl #+0x4 (addr 0xffff7ab15c38)
0xffff7ab15c38   280  movz x17, #0xa00000000
0xffff7ab15c3c   284  sub csp, jssp, #0x10 (16)
0xffff7ab15c40   288  stp x17, cp, [jssp, #-16]!
0xffff7ab15c44   292  add fp, jssp, #0x10 (16)
0xffff7ab15c48   296  ldr x17, pc+24 (addr 0x0000ffff7ab15c60)    ;; lazy deoptimization bailout 0
0xffff7ab15c4c   300  add x17, x17, x16
0xffff7ab15c50   304  br x17
0xffff7ab15c54   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab15c58   312  d63f03e0       constant
0xffff7ab15c5c   316  d503201f       constant
0xffff7ab15c60   320  7a906000       constant
0xffff7ab15c64   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab15bdc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab15bbc  code target (STUB)  (0xffff7ab06820)
0xffff7ab15bd4  code target (STUB)  (0xffff7ab06260)
0xffff7ab15be0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab15bf4  constant pool (size 36)
0xffff7ab15c48  runtime entry
0xffff7ab15c54  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2488
type = NORMAL
name = BinaryOpICStub(SUB:Number*Smi->Number)
compiler = crankshaft
Instructions (size = 349)
0xffff7ab15b20     0  mov x2, x0
0xffff7ab15b24     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab15c18)
0xffff7ab15b28     8  tbz w1, #0, #+0x34 (addr 0xffff7ab15b5c)
0xffff7ab15b2c    12  ldur x16, [x1, #-1]
0xffff7ab15b30    16  ldr x17, [x26, #120]
0xffff7ab15b34    20  cmp x16, x17
0xffff7ab15b38    24  b.ne #+0xc (addr 0xffff7ab15b44)
0xffff7ab15b3c    28  ldur d0, [x1, #7]
0xffff7ab15b40    32  b #+0x20 (addr 0xffff7ab15b60)
0xffff7ab15b44    36  ldr x16, [x26, #40]
0xffff7ab15b48    40  cmp x1, x16
0xffff7ab15b4c    44  b.ne #+0xdc (addr 0xffff7ab15c28)
0xffff7ab15b50    48  ldr x3, [x26, #928]
0xffff7ab15b54    52  ldur d0, [x3, #7]
0xffff7ab15b58    56  b #+0x8 (addr 0xffff7ab15b60)
0xffff7ab15b5c    60  scvtf d0, x1, #32
0xffff7ab15b60    64  scvtf d1, x2, #32
0xffff7ab15b64    68  fsub d0, d0, d1
0xffff7ab15b68    72  movz x1, #0xe2c0
0xffff7ab15b6c    76  movk x1, #0x9ab, lsl #16
0xffff7ab15b70    80  ldp x2, x0, [x1]
0xffff7ab15b74    84  adds x16, x2, #0x10 (16)
0xffff7ab15b78    88  ccmp x16, x0, #nzCv, lo
0xffff7ab15b7c    92  b.hi #+0x20 (addr 0xffff7ab15b9c)
0xffff7ab15b80    96  str x16, [x1]
0xffff7ab15b84   100  ldr x1, [x26, #120]
0xffff7ab15b88   104  str x1, [x2]
0xffff7ab15b8c   108  orr x2, x2, #0x1
0xffff7ab15b90   112  stur d0, [x2, #7]
0xffff7ab15b94   116  mov x0, x2
0xffff7ab15b98   120  ret
0xffff7ab15b9c   124  sub csp, jssp, #0x10 (16)
0xffff7ab15ba0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab15ba4   132  movz fp, #0xa00000000
0xffff7ab15ba8   136  sub csp, jssp, #0x8 (8)
0xffff7ab15bac   140  str fp, [jssp, #-8]!
0xffff7ab15bb0   144  add fp, jssp, #0x8 (8)
0xffff7ab15bb4   148  movz x2, #0x0
0xffff7ab15bb8   152  mov x16, lr
0xffff7ab15bbc   156  ldr x17, pc+68 (addr 0x0000ffff7ab15c00)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab15bc0   160  blr x17
0xffff7ab15bc4   164  ldur cp, [fp, #-8]
0xffff7ab15bc8   168  movz x0, #0x0
0xffff7ab15bcc   172  movz x1, #0x4b48
0xffff7ab15bd0   176  movk x1, #0xe4, lsl #16
0xffff7ab15bd4   180  ldr x16, pc+52 (addr 0x0000ffff7ab15c08)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab15bd8   184  blr x16
0xffff7ab15bdc   188  str x0, [jssp, #16]
0xffff7ab15be0   192  ldr x16, pc+48 (addr 0x0000ffff7ab15c10)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab15be4   196  blr x16
0xffff7ab15be8   200  ldr lr, [jssp, #16]
0xffff7ab15bec   204  ldp xzr, fp, [jssp], #24
0xffff7ab15bf0   208  b #-0x60 (addr 0xffff7ab15b90)
0xffff7ab15bf4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab15bf8   216  d63f03e0       constant
0xffff7ab15bfc   220  d503201f       constant
0xffff7ab15c00   224  7ab06820       constant
0xffff7ab15c04   228  0000ffff       constant
0xffff7ab15c08   232  7ab06260       constant
0xffff7ab15c0c   236  0000ffff       constant
0xffff7ab15c10   240  7ab068e0       constant
0xffff7ab15c14   244  0000ffff       constant
0xffff7ab15c18   248  movz x16, #0x0
0xffff7ab15c1c   252  sub csp, jssp, #0x10 (16)
0xffff7ab15c20   256  stp fp, lr, [jssp, #-16]!
0xffff7ab15c24   260  bl #+0x14 (addr 0xffff7ab15c38)
0xffff7ab15c28   264  movz x16, #0x8
0xffff7ab15c2c   268  sub csp, jssp, #0x10 (16)
0xffff7ab15c30   272  stp fp, lr, [jssp, #-16]!
0xffff7ab15c34   276  bl #+0x4 (addr 0xffff7ab15c38)
0xffff7ab15c38   280  movz x17, #0xa00000000
0xffff7ab15c3c   284  sub csp, jssp, #0x10 (16)
0xffff7ab15c40   288  stp x17, cp, [jssp, #-16]!
0xffff7ab15c44   292  add fp, jssp, #0x10 (16)
0xffff7ab15c48   296  ldr x17, pc+24 (addr 0x0000ffff7ab15c60)    ;; lazy deoptimization bailout 0
0xffff7ab15c4c   300  add x17, x17, x16
0xffff7ab15c50   304  br x17
0xffff7ab15c54   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab15c58   312  d63f03e0       constant
0xffff7ab15c5c   316  d503201f       constant
0xffff7ab15c60   320  7a906000       constant
0xffff7ab15c64   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab15bdc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab15bbc  code target (STUB)  (0xffff7ab06820)
0xffff7ab15bd4  code target (STUB)  (0xffff7ab06260)
0xffff7ab15be0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab15bf4  constant pool (size 36)
0xffff7ab15c48  runtime entry
0xffff7ab15c54  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4264
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0xffff7ab15ce0     0  mov x2, x1
0xffff7ab15ce4     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab15d00)
0xffff7ab15ce8     8  mov x3, x0
0xffff7ab15cec    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab15d10)
0xffff7ab15cf0    16  subs x2, x2, x3
0xffff7ab15cf4    20  b.vs #+0x2c (addr 0xffff7ab15d20)
0xffff7ab15cf8    24  mov x0, x2
0xffff7ab15cfc    28  ret
0xffff7ab15d00    32  movz x16, #0x0
0xffff7ab15d04    36  sub csp, jssp, #0x10 (16)
0xffff7ab15d08    40  stp fp, lr, [jssp, #-16]!
0xffff7ab15d0c    44  bl #+0x24 (addr 0xffff7ab15d30)
0xffff7ab15d10    48  movz x16, #0x8
0xffff7ab15d14    52  sub csp, jssp, #0x10 (16)
0xffff7ab15d18    56  stp fp, lr, [jssp, #-16]!
0xffff7ab15d1c    60  bl #+0x14 (addr 0xffff7ab15d30)
0xffff7ab15d20    64  movz x16, #0x10
0xffff7ab15d24    68  sub csp, jssp, #0x10 (16)
0xffff7ab15d28    72  stp fp, lr, [jssp, #-16]!
0xffff7ab15d2c    76  bl #+0x4 (addr 0xffff7ab15d30)
0xffff7ab15d30    80  movz x17, #0xa00000000
0xffff7ab15d34    84  sub csp, jssp, #0x10 (16)
0xffff7ab15d38    88  stp x17, cp, [jssp, #-16]!
0xffff7ab15d3c    92  add fp, jssp, #0x10 (16)
0xffff7ab15d40    96  ldr x17, pc+24 (addr 0x0000ffff7ab15d58)    ;; lazy deoptimization bailout 0
0xffff7ab15d44   100  add x17, x17, x16
0xffff7ab15d48   104  br x17
0xffff7ab15d4c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab15d50   112  d63f03e0       constant
0xffff7ab15d54   116  d503201f       constant
0xffff7ab15d58   120  7a906000       constant
0xffff7ab15d5c   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab15d40  runtime entry
0xffff7ab15d4c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4264
type = NORMAL
name = BinaryOpICStub(SUB:Smi*Int32->Int32)
compiler = crankshaft
Instructions (size = 136)
0xffff7ab15ce0     0  mov x2, x1
0xffff7ab15ce4     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab15d00)
0xffff7ab15ce8     8  mov x3, x0
0xffff7ab15cec    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab15d10)
0xffff7ab15cf0    16  subs x2, x2, x3
0xffff7ab15cf4    20  b.vs #+0x2c (addr 0xffff7ab15d20)
0xffff7ab15cf8    24  mov x0, x2
0xffff7ab15cfc    28  ret
0xffff7ab15d00    32  movz x16, #0x0
0xffff7ab15d04    36  sub csp, jssp, #0x10 (16)
0xffff7ab15d08    40  stp fp, lr, [jssp, #-16]!
0xffff7ab15d0c    44  bl #+0x24 (addr 0xffff7ab15d30)
0xffff7ab15d10    48  movz x16, #0x8
0xffff7ab15d14    52  sub csp, jssp, #0x10 (16)
0xffff7ab15d18    56  stp fp, lr, [jssp, #-16]!
0xffff7ab15d1c    60  bl #+0x14 (addr 0xffff7ab15d30)
0xffff7ab15d20    64  movz x16, #0x10
0xffff7ab15d24    68  sub csp, jssp, #0x10 (16)
0xffff7ab15d28    72  stp fp, lr, [jssp, #-16]!
0xffff7ab15d2c    76  bl #+0x4 (addr 0xffff7ab15d30)
0xffff7ab15d30    80  movz x17, #0xa00000000
0xffff7ab15d34    84  sub csp, jssp, #0x10 (16)
0xffff7ab15d38    88  stp x17, cp, [jssp, #-16]!
0xffff7ab15d3c    92  add fp, jssp, #0x10 (16)
0xffff7ab15d40    96  ldr x17, pc+24 (addr 0x0000ffff7ab15d58)    ;; lazy deoptimization bailout 0
0xffff7ab15d44   100  add x17, x17, x16
0xffff7ab15d48   104  br x17
0xffff7ab15d4c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab15d50   112  d63f03e0       constant
0xffff7ab15d54   116  d503201f       constant
0xffff7ab15d58   120  7a906000       constant
0xffff7ab15d5c   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab15d40  runtime entry
0xffff7ab15d4c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6328
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0xffff7ab15de0     0  mov x2, x1
0xffff7ab15de4     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab15ed8)
0xffff7ab15de8     8  tbz w0, #0, #+0x34 (addr 0xffff7ab15e1c)
0xffff7ab15dec    12  ldur x16, [x0, #-1]
0xffff7ab15df0    16  ldr x17, [x26, #120]
0xffff7ab15df4    20  cmp x16, x17
0xffff7ab15df8    24  b.ne #+0xc (addr 0xffff7ab15e04)
0xffff7ab15dfc    28  ldur d0, [x0, #7]
0xffff7ab15e00    32  b #+0x20 (addr 0xffff7ab15e20)
0xffff7ab15e04    36  ldr x16, [x26, #40]
0xffff7ab15e08    40  cmp x0, x16
0xffff7ab15e0c    44  b.ne #+0xdc (addr 0xffff7ab15ee8)
0xffff7ab15e10    48  ldr x3, [x26, #928]
0xffff7ab15e14    52  ldur d0, [x3, #7]
0xffff7ab15e18    56  b #+0x8 (addr 0xffff7ab15e20)
0xffff7ab15e1c    60  scvtf d0, x0, #32
0xffff7ab15e20    64  scvtf d1, x2, #32
0xffff7ab15e24    68  fsub d0, d1, d0
0xffff7ab15e28    72  movz x1, #0xe2c0
0xffff7ab15e2c    76  movk x1, #0x9ab, lsl #16
0xffff7ab15e30    80  ldp x2, x0, [x1]
0xffff7ab15e34    84  adds x16, x2, #0x10 (16)
0xffff7ab15e38    88  ccmp x16, x0, #nzCv, lo
0xffff7ab15e3c    92  b.hi #+0x20 (addr 0xffff7ab15e5c)
0xffff7ab15e40    96  str x16, [x1]
0xffff7ab15e44   100  ldr x1, [x26, #120]
0xffff7ab15e48   104  str x1, [x2]
0xffff7ab15e4c   108  orr x2, x2, #0x1
0xffff7ab15e50   112  stur d0, [x2, #7]
0xffff7ab15e54   116  mov x0, x2
0xffff7ab15e58   120  ret
0xffff7ab15e5c   124  sub csp, jssp, #0x10 (16)
0xffff7ab15e60   128  stp fp, lr, [jssp, #-16]!
0xffff7ab15e64   132  movz fp, #0xa00000000
0xffff7ab15e68   136  sub csp, jssp, #0x8 (8)
0xffff7ab15e6c   140  str fp, [jssp, #-8]!
0xffff7ab15e70   144  add fp, jssp, #0x8 (8)
0xffff7ab15e74   148  movz x2, #0x0
0xffff7ab15e78   152  mov x16, lr
0xffff7ab15e7c   156  ldr x17, pc+68 (addr 0x0000ffff7ab15ec0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab15e80   160  blr x17
0xffff7ab15e84   164  ldur cp, [fp, #-8]
0xffff7ab15e88   168  movz x0, #0x0
0xffff7ab15e8c   172  movz x1, #0x4b48
0xffff7ab15e90   176  movk x1, #0xe4, lsl #16
0xffff7ab15e94   180  ldr x16, pc+52 (addr 0x0000ffff7ab15ec8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab15e98   184  blr x16
0xffff7ab15e9c   188  str x0, [jssp, #16]
0xffff7ab15ea0   192  ldr x16, pc+48 (addr 0x0000ffff7ab15ed0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab15ea4   196  blr x16
0xffff7ab15ea8   200  ldr lr, [jssp, #16]
0xffff7ab15eac   204  ldp xzr, fp, [jssp], #24
0xffff7ab15eb0   208  b #-0x60 (addr 0xffff7ab15e50)
0xffff7ab15eb4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab15eb8   216  d63f03e0       constant
0xffff7ab15ebc   220  d503201f       constant
0xffff7ab15ec0   224  7ab06820       constant
0xffff7ab15ec4   228  0000ffff       constant
0xffff7ab15ec8   232  7ab06260       constant
0xffff7ab15ecc   236  0000ffff       constant
0xffff7ab15ed0   240  7ab068e0       constant
0xffff7ab15ed4   244  0000ffff       constant
0xffff7ab15ed8   248  movz x16, #0x0
0xffff7ab15edc   252  sub csp, jssp, #0x10 (16)
0xffff7ab15ee0   256  stp fp, lr, [jssp, #-16]!
0xffff7ab15ee4   260  bl #+0x14 (addr 0xffff7ab15ef8)
0xffff7ab15ee8   264  movz x16, #0x8
0xffff7ab15eec   268  sub csp, jssp, #0x10 (16)
0xffff7ab15ef0   272  stp fp, lr, [jssp, #-16]!
0xffff7ab15ef4   276  bl #+0x4 (addr 0xffff7ab15ef8)
0xffff7ab15ef8   280  movz x17, #0xa00000000
0xffff7ab15efc   284  sub csp, jssp, #0x10 (16)
0xffff7ab15f00   288  stp x17, cp, [jssp, #-16]!
0xffff7ab15f04   292  add fp, jssp, #0x10 (16)
0xffff7ab15f08   296  ldr x17, pc+24 (addr 0x0000ffff7ab15f20)    ;; lazy deoptimization bailout 0
0xffff7ab15f0c   300  add x17, x17, x16
0xffff7ab15f10   304  br x17
0xffff7ab15f14   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab15f18   312  d63f03e0       constant
0xffff7ab15f1c   316  d503201f       constant
0xffff7ab15f20   320  7a906000       constant
0xffff7ab15f24   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab15e9c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab15e7c  code target (STUB)  (0xffff7ab06820)
0xffff7ab15e94  code target (STUB)  (0xffff7ab06260)
0xffff7ab15ea0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab15eb4  constant pool (size 36)
0xffff7ab15f08  runtime entry
0xffff7ab15f14  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6328
type = NORMAL
name = BinaryOpICStub(SUB:Smi*Number->Number)
compiler = crankshaft
Instructions (size = 349)
0xffff7ab15de0     0  mov x2, x1
0xffff7ab15de4     4  tbnz w2, #0, #+0xf4 (addr 0xffff7ab15ed8)
0xffff7ab15de8     8  tbz w0, #0, #+0x34 (addr 0xffff7ab15e1c)
0xffff7ab15dec    12  ldur x16, [x0, #-1]
0xffff7ab15df0    16  ldr x17, [x26, #120]
0xffff7ab15df4    20  cmp x16, x17
0xffff7ab15df8    24  b.ne #+0xc (addr 0xffff7ab15e04)
0xffff7ab15dfc    28  ldur d0, [x0, #7]
0xffff7ab15e00    32  b #+0x20 (addr 0xffff7ab15e20)
0xffff7ab15e04    36  ldr x16, [x26, #40]
0xffff7ab15e08    40  cmp x0, x16
0xffff7ab15e0c    44  b.ne #+0xdc (addr 0xffff7ab15ee8)
0xffff7ab15e10    48  ldr x3, [x26, #928]
0xffff7ab15e14    52  ldur d0, [x3, #7]
0xffff7ab15e18    56  b #+0x8 (addr 0xffff7ab15e20)
0xffff7ab15e1c    60  scvtf d0, x0, #32
0xffff7ab15e20    64  scvtf d1, x2, #32
0xffff7ab15e24    68  fsub d0, d1, d0
0xffff7ab15e28    72  movz x1, #0xe2c0
0xffff7ab15e2c    76  movk x1, #0x9ab, lsl #16
0xffff7ab15e30    80  ldp x2, x0, [x1]
0xffff7ab15e34    84  adds x16, x2, #0x10 (16)
0xffff7ab15e38    88  ccmp x16, x0, #nzCv, lo
0xffff7ab15e3c    92  b.hi #+0x20 (addr 0xffff7ab15e5c)
0xffff7ab15e40    96  str x16, [x1]
0xffff7ab15e44   100  ldr x1, [x26, #120]
0xffff7ab15e48   104  str x1, [x2]
0xffff7ab15e4c   108  orr x2, x2, #0x1
0xffff7ab15e50   112  stur d0, [x2, #7]
0xffff7ab15e54   116  mov x0, x2
0xffff7ab15e58   120  ret
0xffff7ab15e5c   124  sub csp, jssp, #0x10 (16)
0xffff7ab15e60   128  stp fp, lr, [jssp, #-16]!
0xffff7ab15e64   132  movz fp, #0xa00000000
0xffff7ab15e68   136  sub csp, jssp, #0x8 (8)
0xffff7ab15e6c   140  str fp, [jssp, #-8]!
0xffff7ab15e70   144  add fp, jssp, #0x8 (8)
0xffff7ab15e74   148  movz x2, #0x0
0xffff7ab15e78   152  mov x16, lr
0xffff7ab15e7c   156  ldr x17, pc+68 (addr 0x0000ffff7ab15ec0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab15e80   160  blr x17
0xffff7ab15e84   164  ldur cp, [fp, #-8]
0xffff7ab15e88   168  movz x0, #0x0
0xffff7ab15e8c   172  movz x1, #0x4b48
0xffff7ab15e90   176  movk x1, #0xe4, lsl #16
0xffff7ab15e94   180  ldr x16, pc+52 (addr 0x0000ffff7ab15ec8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab15e98   184  blr x16
0xffff7ab15e9c   188  str x0, [jssp, #16]
0xffff7ab15ea0   192  ldr x16, pc+48 (addr 0x0000ffff7ab15ed0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab15ea4   196  blr x16
0xffff7ab15ea8   200  ldr lr, [jssp, #16]
0xffff7ab15eac   204  ldp xzr, fp, [jssp], #24
0xffff7ab15eb0   208  b #-0x60 (addr 0xffff7ab15e50)
0xffff7ab15eb4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab15eb8   216  d63f03e0       constant
0xffff7ab15ebc   220  d503201f       constant
0xffff7ab15ec0   224  7ab06820       constant
0xffff7ab15ec4   228  0000ffff       constant
0xffff7ab15ec8   232  7ab06260       constant
0xffff7ab15ecc   236  0000ffff       constant
0xffff7ab15ed0   240  7ab068e0       constant
0xffff7ab15ed4   244  0000ffff       constant
0xffff7ab15ed8   248  movz x16, #0x0
0xffff7ab15edc   252  sub csp, jssp, #0x10 (16)
0xffff7ab15ee0   256  stp fp, lr, [jssp, #-16]!
0xffff7ab15ee4   260  bl #+0x14 (addr 0xffff7ab15ef8)
0xffff7ab15ee8   264  movz x16, #0x8
0xffff7ab15eec   268  sub csp, jssp, #0x10 (16)
0xffff7ab15ef0   272  stp fp, lr, [jssp, #-16]!
0xffff7ab15ef4   276  bl #+0x4 (addr 0xffff7ab15ef8)
0xffff7ab15ef8   280  movz x17, #0xa00000000
0xffff7ab15efc   284  sub csp, jssp, #0x10 (16)
0xffff7ab15f00   288  stp x17, cp, [jssp, #-16]!
0xffff7ab15f04   292  add fp, jssp, #0x10 (16)
0xffff7ab15f08   296  ldr x17, pc+24 (addr 0x0000ffff7ab15f20)    ;; lazy deoptimization bailout 0
0xffff7ab15f0c   300  add x17, x17, x16
0xffff7ab15f10   304  br x17
0xffff7ab15f14   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab15f18   312  d63f03e0       constant
0xffff7ab15f1c   316  d503201f       constant
0xffff7ab15f20   320  7a906000       constant
0xffff7ab15f24   324  0000ffff       constant


Safepoints (size = 21)
0xffff7ab15e9c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ab15e7c  code target (STUB)  (0xffff7ab06820)
0xffff7ab15e94  code target (STUB)  (0xffff7ab06260)
0xffff7ab15ea0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab15eb4  constant pool (size 36)
0xffff7ab15f08  runtime entry
0xffff7ab15f14  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2200
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0xffff7ab15fa0     0  mov x2, x1
0xffff7ab15fa4     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab15fc0)
0xffff7ab15fa8     8  mov x3, x0
0xffff7ab15fac    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab15fd0)
0xffff7ab15fb0    16  subs x2, x2, x3
0xffff7ab15fb4    20  b.vs #+0x2c (addr 0xffff7ab15fe0)
0xffff7ab15fb8    24  mov x0, x2
0xffff7ab15fbc    28  ret
0xffff7ab15fc0    32  movz x16, #0x0
0xffff7ab15fc4    36  sub csp, jssp, #0x10 (16)
0xffff7ab15fc8    40  stp fp, lr, [jssp, #-16]!
0xffff7ab15fcc    44  bl #+0x24 (addr 0xffff7ab15ff0)
0xffff7ab15fd0    48  movz x16, #0x8
0xffff7ab15fd4    52  sub csp, jssp, #0x10 (16)
0xffff7ab15fd8    56  stp fp, lr, [jssp, #-16]!
0xffff7ab15fdc    60  bl #+0x14 (addr 0xffff7ab15ff0)
0xffff7ab15fe0    64  movz x16, #0x10
0xffff7ab15fe4    68  sub csp, jssp, #0x10 (16)
0xffff7ab15fe8    72  stp fp, lr, [jssp, #-16]!
0xffff7ab15fec    76  bl #+0x4 (addr 0xffff7ab15ff0)
0xffff7ab15ff0    80  movz x17, #0xa00000000
0xffff7ab15ff4    84  sub csp, jssp, #0x10 (16)
0xffff7ab15ff8    88  stp x17, cp, [jssp, #-16]!
0xffff7ab15ffc    92  add fp, jssp, #0x10 (16)
0xffff7ab16000    96  ldr x17, pc+24 (addr 0x0000ffff7ab16018)    ;; lazy deoptimization bailout 0
0xffff7ab16004   100  add x17, x17, x16
0xffff7ab16008   104  br x17
0xffff7ab1600c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab16010   112  d63f03e0       constant
0xffff7ab16014   116  d503201f       constant
0xffff7ab16018   120  7a906000       constant
0xffff7ab1601c   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab16000  runtime entry
0xffff7ab1600c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2200
type = NORMAL
name = BinaryOpICStub(SUB:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 136)
0xffff7ab15fa0     0  mov x2, x1
0xffff7ab15fa4     4  tbnz w2, #0, #+0x1c (addr 0xffff7ab15fc0)
0xffff7ab15fa8     8  mov x3, x0
0xffff7ab15fac    12  tbnz w3, #0, #+0x24 (addr 0xffff7ab15fd0)
0xffff7ab15fb0    16  subs x2, x2, x3
0xffff7ab15fb4    20  b.vs #+0x2c (addr 0xffff7ab15fe0)
0xffff7ab15fb8    24  mov x0, x2
0xffff7ab15fbc    28  ret
0xffff7ab15fc0    32  movz x16, #0x0
0xffff7ab15fc4    36  sub csp, jssp, #0x10 (16)
0xffff7ab15fc8    40  stp fp, lr, [jssp, #-16]!
0xffff7ab15fcc    44  bl #+0x24 (addr 0xffff7ab15ff0)
0xffff7ab15fd0    48  movz x16, #0x8
0xffff7ab15fd4    52  sub csp, jssp, #0x10 (16)
0xffff7ab15fd8    56  stp fp, lr, [jssp, #-16]!
0xffff7ab15fdc    60  bl #+0x14 (addr 0xffff7ab15ff0)
0xffff7ab15fe0    64  movz x16, #0x10
0xffff7ab15fe4    68  sub csp, jssp, #0x10 (16)
0xffff7ab15fe8    72  stp fp, lr, [jssp, #-16]!
0xffff7ab15fec    76  bl #+0x4 (addr 0xffff7ab15ff0)
0xffff7ab15ff0    80  movz x17, #0xa00000000
0xffff7ab15ff4    84  sub csp, jssp, #0x10 (16)
0xffff7ab15ff8    88  stp x17, cp, [jssp, #-16]!
0xffff7ab15ffc    92  add fp, jssp, #0x10 (16)
0xffff7ab16000    96  ldr x17, pc+24 (addr 0x0000ffff7ab16018)    ;; lazy deoptimization bailout 0
0xffff7ab16004   100  add x17, x17, x16
0xffff7ab16008   104  br x17
0xffff7ab1600c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab16010   112  d63f03e0       constant
0xffff7ab16014   116  d503201f       constant
0xffff7ab16018   120  7a906000       constant
0xffff7ab1601c   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab16000  runtime entry
0xffff7ab1600c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 3227
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 192)
0xffff7ab160a0     0  mov x2, x1
0xffff7ab160a4     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab160e8)
0xffff7ab160a8     8  mov x3, x0
0xffff7ab160ac    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab160f8)
0xffff7ab160b0    16  asr x3, x3, #32
0xffff7ab160b4    20  cmp w3, #0x2 (2)
0xffff7ab160b8    24  b.eq #+0x8 (addr 0xffff7ab160c0)
0xffff7ab160bc    28  b #+0x4c (addr 0xffff7ab16108)
0xffff7ab160c0    32  asr x2, x2, #32
0xffff7ab160c4    36  tbz w2, #31, #+0x18 (addr 0xffff7ab160dc)
0xffff7ab160c8    40  neg w2, w2
0xffff7ab160cc    44  and w2, w2, #0x1
0xffff7ab160d0    48  negs w2, w2
0xffff7ab160d4    52  b.eq #+0x44 (addr 0xffff7ab16118)
0xffff7ab160d8    56  b #+0x8 (addr 0xffff7ab160e0)
0xffff7ab160dc    60  and w2, w2, #0x1
0xffff7ab160e0    64  lsl x0, x2, #32
0xffff7ab160e4    68  ret
0xffff7ab160e8    72  movz x16, #0x0
0xffff7ab160ec    76  sub csp, jssp, #0x10 (16)
0xffff7ab160f0    80  stp fp, lr, [jssp, #-16]!
0xffff7ab160f4    84  bl #+0x34 (addr 0xffff7ab16128)
0xffff7ab160f8    88  movz x16, #0x8
0xffff7ab160fc    92  sub csp, jssp, #0x10 (16)
0xffff7ab16100    96  stp fp, lr, [jssp, #-16]!
0xffff7ab16104   100  bl #+0x24 (addr 0xffff7ab16128)
0xffff7ab16108   104  movz x16, #0x10
0xffff7ab1610c   108  sub csp, jssp, #0x10 (16)
0xffff7ab16110   112  stp fp, lr, [jssp, #-16]!
0xffff7ab16114   116  bl #+0x14 (addr 0xffff7ab16128)
0xffff7ab16118   120  movz x16, #0x18
0xffff7ab1611c   124  sub csp, jssp, #0x10 (16)
0xffff7ab16120   128  stp fp, lr, [jssp, #-16]!
0xffff7ab16124   132  bl #+0x4 (addr 0xffff7ab16128)
0xffff7ab16128   136  movz x17, #0xa00000000
0xffff7ab1612c   140  sub csp, jssp, #0x10 (16)
0xffff7ab16130   144  stp x17, cp, [jssp, #-16]!
0xffff7ab16134   148  add fp, jssp, #0x10 (16)
0xffff7ab16138   152  ldr x17, pc+24 (addr 0x0000ffff7ab16150)    ;; lazy deoptimization bailout 0
0xffff7ab1613c   156  add x17, x17, x16
0xffff7ab16140   160  br x17
0xffff7ab16144   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab16148   168  d63f03e0       constant
0xffff7ab1614c   172  d503201f       constant
0xffff7ab16150   176  7a906000       constant
0xffff7ab16154   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab16138  runtime entry
0xffff7ab16144  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 3227
type = NORMAL
name = BinaryOpICStub(MOD:Smi*2->Smi)
compiler = crankshaft
Instructions (size = 192)
0xffff7ab160a0     0  mov x2, x1
0xffff7ab160a4     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab160e8)
0xffff7ab160a8     8  mov x3, x0
0xffff7ab160ac    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab160f8)
0xffff7ab160b0    16  asr x3, x3, #32
0xffff7ab160b4    20  cmp w3, #0x2 (2)
0xffff7ab160b8    24  b.eq #+0x8 (addr 0xffff7ab160c0)
0xffff7ab160bc    28  b #+0x4c (addr 0xffff7ab16108)
0xffff7ab160c0    32  asr x2, x2, #32
0xffff7ab160c4    36  tbz w2, #31, #+0x18 (addr 0xffff7ab160dc)
0xffff7ab160c8    40  neg w2, w2
0xffff7ab160cc    44  and w2, w2, #0x1
0xffff7ab160d0    48  negs w2, w2
0xffff7ab160d4    52  b.eq #+0x44 (addr 0xffff7ab16118)
0xffff7ab160d8    56  b #+0x8 (addr 0xffff7ab160e0)
0xffff7ab160dc    60  and w2, w2, #0x1
0xffff7ab160e0    64  lsl x0, x2, #32
0xffff7ab160e4    68  ret
0xffff7ab160e8    72  movz x16, #0x0
0xffff7ab160ec    76  sub csp, jssp, #0x10 (16)
0xffff7ab160f0    80  stp fp, lr, [jssp, #-16]!
0xffff7ab160f4    84  bl #+0x34 (addr 0xffff7ab16128)
0xffff7ab160f8    88  movz x16, #0x8
0xffff7ab160fc    92  sub csp, jssp, #0x10 (16)
0xffff7ab16100    96  stp fp, lr, [jssp, #-16]!
0xffff7ab16104   100  bl #+0x24 (addr 0xffff7ab16128)
0xffff7ab16108   104  movz x16, #0x10
0xffff7ab1610c   108  sub csp, jssp, #0x10 (16)
0xffff7ab16110   112  stp fp, lr, [jssp, #-16]!
0xffff7ab16114   116  bl #+0x14 (addr 0xffff7ab16128)
0xffff7ab16118   120  movz x16, #0x18
0xffff7ab1611c   124  sub csp, jssp, #0x10 (16)
0xffff7ab16120   128  stp fp, lr, [jssp, #-16]!
0xffff7ab16124   132  bl #+0x4 (addr 0xffff7ab16128)
0xffff7ab16128   136  movz x17, #0xa00000000
0xffff7ab1612c   140  sub csp, jssp, #0x10 (16)
0xffff7ab16130   144  stp x17, cp, [jssp, #-16]!
0xffff7ab16134   148  add fp, jssp, #0x10 (16)
0xffff7ab16138   152  ldr x17, pc+24 (addr 0x0000ffff7ab16150)    ;; lazy deoptimization bailout 0
0xffff7ab1613c   156  add x17, x17, x16
0xffff7ab16140   160  br x17
0xffff7ab16144   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab16148   168  d63f03e0       constant
0xffff7ab1614c   172  d503201f       constant
0xffff7ab16150   176  7a906000       constant
0xffff7ab16154   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab16138  runtime entry
0xffff7ab16144  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 5275
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 192)
0xffff7ab161c0     0  mov x2, x1
0xffff7ab161c4     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab16208)
0xffff7ab161c8     8  mov x3, x0
0xffff7ab161cc    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab16218)
0xffff7ab161d0    16  asr x3, x3, #32
0xffff7ab161d4    20  cmp w3, #0x4 (4)
0xffff7ab161d8    24  b.eq #+0x8 (addr 0xffff7ab161e0)
0xffff7ab161dc    28  b #+0x4c (addr 0xffff7ab16228)
0xffff7ab161e0    32  asr x2, x2, #32
0xffff7ab161e4    36  tbz w2, #31, #+0x18 (addr 0xffff7ab161fc)
0xffff7ab161e8    40  neg w2, w2
0xffff7ab161ec    44  and w2, w2, #0x3
0xffff7ab161f0    48  negs w2, w2
0xffff7ab161f4    52  b.eq #+0x44 (addr 0xffff7ab16238)
0xffff7ab161f8    56  b #+0x8 (addr 0xffff7ab16200)
0xffff7ab161fc    60  and w2, w2, #0x3
0xffff7ab16200    64  lsl x0, x2, #32
0xffff7ab16204    68  ret
0xffff7ab16208    72  movz x16, #0x0
0xffff7ab1620c    76  sub csp, jssp, #0x10 (16)
0xffff7ab16210    80  stp fp, lr, [jssp, #-16]!
0xffff7ab16214    84  bl #+0x34 (addr 0xffff7ab16248)
0xffff7ab16218    88  movz x16, #0x8
0xffff7ab1621c    92  sub csp, jssp, #0x10 (16)
0xffff7ab16220    96  stp fp, lr, [jssp, #-16]!
0xffff7ab16224   100  bl #+0x24 (addr 0xffff7ab16248)
0xffff7ab16228   104  movz x16, #0x10
0xffff7ab1622c   108  sub csp, jssp, #0x10 (16)
0xffff7ab16230   112  stp fp, lr, [jssp, #-16]!
0xffff7ab16234   116  bl #+0x14 (addr 0xffff7ab16248)
0xffff7ab16238   120  movz x16, #0x18
0xffff7ab1623c   124  sub csp, jssp, #0x10 (16)
0xffff7ab16240   128  stp fp, lr, [jssp, #-16]!
0xffff7ab16244   132  bl #+0x4 (addr 0xffff7ab16248)
0xffff7ab16248   136  movz x17, #0xa00000000
0xffff7ab1624c   140  sub csp, jssp, #0x10 (16)
0xffff7ab16250   144  stp x17, cp, [jssp, #-16]!
0xffff7ab16254   148  add fp, jssp, #0x10 (16)
0xffff7ab16258   152  ldr x17, pc+24 (addr 0x0000ffff7ab16270)    ;; lazy deoptimization bailout 0
0xffff7ab1625c   156  add x17, x17, x16
0xffff7ab16260   160  br x17
0xffff7ab16264   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab16268   168  d63f03e0       constant
0xffff7ab1626c   172  d503201f       constant
0xffff7ab16270   176  7a906000       constant
0xffff7ab16274   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab16258  runtime entry
0xffff7ab16264  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 5275
type = NORMAL
name = BinaryOpICStub(MOD:Smi*4->Smi)
compiler = crankshaft
Instructions (size = 192)
0xffff7ab161c0     0  mov x2, x1
0xffff7ab161c4     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab16208)
0xffff7ab161c8     8  mov x3, x0
0xffff7ab161cc    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab16218)
0xffff7ab161d0    16  asr x3, x3, #32
0xffff7ab161d4    20  cmp w3, #0x4 (4)
0xffff7ab161d8    24  b.eq #+0x8 (addr 0xffff7ab161e0)
0xffff7ab161dc    28  b #+0x4c (addr 0xffff7ab16228)
0xffff7ab161e0    32  asr x2, x2, #32
0xffff7ab161e4    36  tbz w2, #31, #+0x18 (addr 0xffff7ab161fc)
0xffff7ab161e8    40  neg w2, w2
0xffff7ab161ec    44  and w2, w2, #0x3
0xffff7ab161f0    48  negs w2, w2
0xffff7ab161f4    52  b.eq #+0x44 (addr 0xffff7ab16238)
0xffff7ab161f8    56  b #+0x8 (addr 0xffff7ab16200)
0xffff7ab161fc    60  and w2, w2, #0x3
0xffff7ab16200    64  lsl x0, x2, #32
0xffff7ab16204    68  ret
0xffff7ab16208    72  movz x16, #0x0
0xffff7ab1620c    76  sub csp, jssp, #0x10 (16)
0xffff7ab16210    80  stp fp, lr, [jssp, #-16]!
0xffff7ab16214    84  bl #+0x34 (addr 0xffff7ab16248)
0xffff7ab16218    88  movz x16, #0x8
0xffff7ab1621c    92  sub csp, jssp, #0x10 (16)
0xffff7ab16220    96  stp fp, lr, [jssp, #-16]!
0xffff7ab16224   100  bl #+0x24 (addr 0xffff7ab16248)
0xffff7ab16228   104  movz x16, #0x10
0xffff7ab1622c   108  sub csp, jssp, #0x10 (16)
0xffff7ab16230   112  stp fp, lr, [jssp, #-16]!
0xffff7ab16234   116  bl #+0x14 (addr 0xffff7ab16248)
0xffff7ab16238   120  movz x16, #0x18
0xffff7ab1623c   124  sub csp, jssp, #0x10 (16)
0xffff7ab16240   128  stp fp, lr, [jssp, #-16]!
0xffff7ab16244   132  bl #+0x4 (addr 0xffff7ab16248)
0xffff7ab16248   136  movz x17, #0xa00000000
0xffff7ab1624c   140  sub csp, jssp, #0x10 (16)
0xffff7ab16250   144  stp x17, cp, [jssp, #-16]!
0xffff7ab16254   148  add fp, jssp, #0x10 (16)
0xffff7ab16258   152  ldr x17, pc+24 (addr 0x0000ffff7ab16270)    ;; lazy deoptimization bailout 0
0xffff7ab1625c   156  add x17, x17, x16
0xffff7ab16260   160  br x17
0xffff7ab16264   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab16268   168  d63f03e0       constant
0xffff7ab1626c   172  d503201f       constant
0xffff7ab16270   176  7a906000       constant
0xffff7ab16274   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab16258  runtime entry
0xffff7ab16264  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 7323
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 192)
0xffff7ab162e0     0  mov x2, x1
0xffff7ab162e4     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab16328)
0xffff7ab162e8     8  mov x3, x0
0xffff7ab162ec    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab16338)
0xffff7ab162f0    16  asr x3, x3, #32
0xffff7ab162f4    20  cmp w3, #0x8 (8)
0xffff7ab162f8    24  b.eq #+0x8 (addr 0xffff7ab16300)
0xffff7ab162fc    28  b #+0x4c (addr 0xffff7ab16348)
0xffff7ab16300    32  asr x2, x2, #32
0xffff7ab16304    36  tbz w2, #31, #+0x18 (addr 0xffff7ab1631c)
0xffff7ab16308    40  neg w2, w2
0xffff7ab1630c    44  and w2, w2, #0x7
0xffff7ab16310    48  negs w2, w2
0xffff7ab16314    52  b.eq #+0x44 (addr 0xffff7ab16358)
0xffff7ab16318    56  b #+0x8 (addr 0xffff7ab16320)
0xffff7ab1631c    60  and w2, w2, #0x7
0xffff7ab16320    64  lsl x0, x2, #32
0xffff7ab16324    68  ret
0xffff7ab16328    72  movz x16, #0x0
0xffff7ab1632c    76  sub csp, jssp, #0x10 (16)
0xffff7ab16330    80  stp fp, lr, [jssp, #-16]!
0xffff7ab16334    84  bl #+0x34 (addr 0xffff7ab16368)
0xffff7ab16338    88  movz x16, #0x8
0xffff7ab1633c    92  sub csp, jssp, #0x10 (16)
0xffff7ab16340    96  stp fp, lr, [jssp, #-16]!
0xffff7ab16344   100  bl #+0x24 (addr 0xffff7ab16368)
0xffff7ab16348   104  movz x16, #0x10
0xffff7ab1634c   108  sub csp, jssp, #0x10 (16)
0xffff7ab16350   112  stp fp, lr, [jssp, #-16]!
0xffff7ab16354   116  bl #+0x14 (addr 0xffff7ab16368)
0xffff7ab16358   120  movz x16, #0x18
0xffff7ab1635c   124  sub csp, jssp, #0x10 (16)
0xffff7ab16360   128  stp fp, lr, [jssp, #-16]!
0xffff7ab16364   132  bl #+0x4 (addr 0xffff7ab16368)
0xffff7ab16368   136  movz x17, #0xa00000000
0xffff7ab1636c   140  sub csp, jssp, #0x10 (16)
0xffff7ab16370   144  stp x17, cp, [jssp, #-16]!
0xffff7ab16374   148  add fp, jssp, #0x10 (16)
0xffff7ab16378   152  ldr x17, pc+24 (addr 0x0000ffff7ab16390)    ;; lazy deoptimization bailout 0
0xffff7ab1637c   156  add x17, x17, x16
0xffff7ab16380   160  br x17
0xffff7ab16384   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab16388   168  d63f03e0       constant
0xffff7ab1638c   172  d503201f       constant
0xffff7ab16390   176  7a906000       constant
0xffff7ab16394   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab16378  runtime entry
0xffff7ab16384  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 7323
type = NORMAL
name = BinaryOpICStub(MOD:Smi*8->Smi)
compiler = crankshaft
Instructions (size = 192)
0xffff7ab162e0     0  mov x2, x1
0xffff7ab162e4     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab16328)
0xffff7ab162e8     8  mov x3, x0
0xffff7ab162ec    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab16338)
0xffff7ab162f0    16  asr x3, x3, #32
0xffff7ab162f4    20  cmp w3, #0x8 (8)
0xffff7ab162f8    24  b.eq #+0x8 (addr 0xffff7ab16300)
0xffff7ab162fc    28  b #+0x4c (addr 0xffff7ab16348)
0xffff7ab16300    32  asr x2, x2, #32
0xffff7ab16304    36  tbz w2, #31, #+0x18 (addr 0xffff7ab1631c)
0xffff7ab16308    40  neg w2, w2
0xffff7ab1630c    44  and w2, w2, #0x7
0xffff7ab16310    48  negs w2, w2
0xffff7ab16314    52  b.eq #+0x44 (addr 0xffff7ab16358)
0xffff7ab16318    56  b #+0x8 (addr 0xffff7ab16320)
0xffff7ab1631c    60  and w2, w2, #0x7
0xffff7ab16320    64  lsl x0, x2, #32
0xffff7ab16324    68  ret
0xffff7ab16328    72  movz x16, #0x0
0xffff7ab1632c    76  sub csp, jssp, #0x10 (16)
0xffff7ab16330    80  stp fp, lr, [jssp, #-16]!
0xffff7ab16334    84  bl #+0x34 (addr 0xffff7ab16368)
0xffff7ab16338    88  movz x16, #0x8
0xffff7ab1633c    92  sub csp, jssp, #0x10 (16)
0xffff7ab16340    96  stp fp, lr, [jssp, #-16]!
0xffff7ab16344   100  bl #+0x24 (addr 0xffff7ab16368)
0xffff7ab16348   104  movz x16, #0x10
0xffff7ab1634c   108  sub csp, jssp, #0x10 (16)
0xffff7ab16350   112  stp fp, lr, [jssp, #-16]!
0xffff7ab16354   116  bl #+0x14 (addr 0xffff7ab16368)
0xffff7ab16358   120  movz x16, #0x18
0xffff7ab1635c   124  sub csp, jssp, #0x10 (16)
0xffff7ab16360   128  stp fp, lr, [jssp, #-16]!
0xffff7ab16364   132  bl #+0x4 (addr 0xffff7ab16368)
0xffff7ab16368   136  movz x17, #0xa00000000
0xffff7ab1636c   140  sub csp, jssp, #0x10 (16)
0xffff7ab16370   144  stp x17, cp, [jssp, #-16]!
0xffff7ab16374   148  add fp, jssp, #0x10 (16)
0xffff7ab16378   152  ldr x17, pc+24 (addr 0x0000ffff7ab16390)    ;; lazy deoptimization bailout 0
0xffff7ab1637c   156  add x17, x17, x16
0xffff7ab16380   160  br x17
0xffff7ab16384   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab16388   168  d63f03e0       constant
0xffff7ab1638c   172  d503201f       constant
0xffff7ab16390   176  7a906000       constant
0xffff7ab16394   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab16378  runtime entry
0xffff7ab16384  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 9371
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 192)
0xffff7ab16400     0  mov x2, x1
0xffff7ab16404     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab16448)
0xffff7ab16408     8  mov x3, x0
0xffff7ab1640c    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab16458)
0xffff7ab16410    16  asr x3, x3, #32
0xffff7ab16414    20  cmp w3, #0x10 (16)
0xffff7ab16418    24  b.eq #+0x8 (addr 0xffff7ab16420)
0xffff7ab1641c    28  b #+0x4c (addr 0xffff7ab16468)
0xffff7ab16420    32  asr x2, x2, #32
0xffff7ab16424    36  tbz w2, #31, #+0x18 (addr 0xffff7ab1643c)
0xffff7ab16428    40  neg w2, w2
0xffff7ab1642c    44  and w2, w2, #0xf
0xffff7ab16430    48  negs w2, w2
0xffff7ab16434    52  b.eq #+0x44 (addr 0xffff7ab16478)
0xffff7ab16438    56  b #+0x8 (addr 0xffff7ab16440)
0xffff7ab1643c    60  and w2, w2, #0xf
0xffff7ab16440    64  lsl x0, x2, #32
0xffff7ab16444    68  ret
0xffff7ab16448    72  movz x16, #0x0
0xffff7ab1644c    76  sub csp, jssp, #0x10 (16)
0xffff7ab16450    80  stp fp, lr, [jssp, #-16]!
0xffff7ab16454    84  bl #+0x34 (addr 0xffff7ab16488)
0xffff7ab16458    88  movz x16, #0x8
0xffff7ab1645c    92  sub csp, jssp, #0x10 (16)
0xffff7ab16460    96  stp fp, lr, [jssp, #-16]!
0xffff7ab16464   100  bl #+0x24 (addr 0xffff7ab16488)
0xffff7ab16468   104  movz x16, #0x10
0xffff7ab1646c   108  sub csp, jssp, #0x10 (16)
0xffff7ab16470   112  stp fp, lr, [jssp, #-16]!
0xffff7ab16474   116  bl #+0x14 (addr 0xffff7ab16488)
0xffff7ab16478   120  movz x16, #0x18
0xffff7ab1647c   124  sub csp, jssp, #0x10 (16)
0xffff7ab16480   128  stp fp, lr, [jssp, #-16]!
0xffff7ab16484   132  bl #+0x4 (addr 0xffff7ab16488)
0xffff7ab16488   136  movz x17, #0xa00000000
0xffff7ab1648c   140  sub csp, jssp, #0x10 (16)
0xffff7ab16490   144  stp x17, cp, [jssp, #-16]!
0xffff7ab16494   148  add fp, jssp, #0x10 (16)
0xffff7ab16498   152  ldr x17, pc+24 (addr 0x0000ffff7ab164b0)    ;; lazy deoptimization bailout 0
0xffff7ab1649c   156  add x17, x17, x16
0xffff7ab164a0   160  br x17
0xffff7ab164a4   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab164a8   168  d63f03e0       constant
0xffff7ab164ac   172  d503201f       constant
0xffff7ab164b0   176  7a906000       constant
0xffff7ab164b4   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab16498  runtime entry
0xffff7ab164a4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 9371
type = NORMAL
name = BinaryOpICStub(MOD:Smi*16->Smi)
compiler = crankshaft
Instructions (size = 192)
0xffff7ab16400     0  mov x2, x1
0xffff7ab16404     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab16448)
0xffff7ab16408     8  mov x3, x0
0xffff7ab1640c    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab16458)
0xffff7ab16410    16  asr x3, x3, #32
0xffff7ab16414    20  cmp w3, #0x10 (16)
0xffff7ab16418    24  b.eq #+0x8 (addr 0xffff7ab16420)
0xffff7ab1641c    28  b #+0x4c (addr 0xffff7ab16468)
0xffff7ab16420    32  asr x2, x2, #32
0xffff7ab16424    36  tbz w2, #31, #+0x18 (addr 0xffff7ab1643c)
0xffff7ab16428    40  neg w2, w2
0xffff7ab1642c    44  and w2, w2, #0xf
0xffff7ab16430    48  negs w2, w2
0xffff7ab16434    52  b.eq #+0x44 (addr 0xffff7ab16478)
0xffff7ab16438    56  b #+0x8 (addr 0xffff7ab16440)
0xffff7ab1643c    60  and w2, w2, #0xf
0xffff7ab16440    64  lsl x0, x2, #32
0xffff7ab16444    68  ret
0xffff7ab16448    72  movz x16, #0x0
0xffff7ab1644c    76  sub csp, jssp, #0x10 (16)
0xffff7ab16450    80  stp fp, lr, [jssp, #-16]!
0xffff7ab16454    84  bl #+0x34 (addr 0xffff7ab16488)
0xffff7ab16458    88  movz x16, #0x8
0xffff7ab1645c    92  sub csp, jssp, #0x10 (16)
0xffff7ab16460    96  stp fp, lr, [jssp, #-16]!
0xffff7ab16464   100  bl #+0x24 (addr 0xffff7ab16488)
0xffff7ab16468   104  movz x16, #0x10
0xffff7ab1646c   108  sub csp, jssp, #0x10 (16)
0xffff7ab16470   112  stp fp, lr, [jssp, #-16]!
0xffff7ab16474   116  bl #+0x14 (addr 0xffff7ab16488)
0xffff7ab16478   120  movz x16, #0x18
0xffff7ab1647c   124  sub csp, jssp, #0x10 (16)
0xffff7ab16480   128  stp fp, lr, [jssp, #-16]!
0xffff7ab16484   132  bl #+0x4 (addr 0xffff7ab16488)
0xffff7ab16488   136  movz x17, #0xa00000000
0xffff7ab1648c   140  sub csp, jssp, #0x10 (16)
0xffff7ab16490   144  stp x17, cp, [jssp, #-16]!
0xffff7ab16494   148  add fp, jssp, #0x10 (16)
0xffff7ab16498   152  ldr x17, pc+24 (addr 0x0000ffff7ab164b0)    ;; lazy deoptimization bailout 0
0xffff7ab1649c   156  add x17, x17, x16
0xffff7ab164a0   160  br x17
0xffff7ab164a4   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab164a8   168  d63f03e0       constant
0xffff7ab164ac   172  d503201f       constant
0xffff7ab164b0   176  7a906000       constant
0xffff7ab164b4   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab16498  runtime entry
0xffff7ab164a4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 11419
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 192)
0xffff7ab16520     0  mov x2, x1
0xffff7ab16524     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab16568)
0xffff7ab16528     8  mov x3, x0
0xffff7ab1652c    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab16578)
0xffff7ab16530    16  asr x3, x3, #32
0xffff7ab16534    20  cmp w3, #0x20 (32)
0xffff7ab16538    24  b.eq #+0x8 (addr 0xffff7ab16540)
0xffff7ab1653c    28  b #+0x4c (addr 0xffff7ab16588)
0xffff7ab16540    32  asr x2, x2, #32
0xffff7ab16544    36  tbz w2, #31, #+0x18 (addr 0xffff7ab1655c)
0xffff7ab16548    40  neg w2, w2
0xffff7ab1654c    44  and w2, w2, #0x1f
0xffff7ab16550    48  negs w2, w2
0xffff7ab16554    52  b.eq #+0x44 (addr 0xffff7ab16598)
0xffff7ab16558    56  b #+0x8 (addr 0xffff7ab16560)
0xffff7ab1655c    60  and w2, w2, #0x1f
0xffff7ab16560    64  lsl x0, x2, #32
0xffff7ab16564    68  ret
0xffff7ab16568    72  movz x16, #0x0
0xffff7ab1656c    76  sub csp, jssp, #0x10 (16)
0xffff7ab16570    80  stp fp, lr, [jssp, #-16]!
0xffff7ab16574    84  bl #+0x34 (addr 0xffff7ab165a8)
0xffff7ab16578    88  movz x16, #0x8
0xffff7ab1657c    92  sub csp, jssp, #0x10 (16)
0xffff7ab16580    96  stp fp, lr, [jssp, #-16]!
0xffff7ab16584   100  bl #+0x24 (addr 0xffff7ab165a8)
0xffff7ab16588   104  movz x16, #0x10
0xffff7ab1658c   108  sub csp, jssp, #0x10 (16)
0xffff7ab16590   112  stp fp, lr, [jssp, #-16]!
0xffff7ab16594   116  bl #+0x14 (addr 0xffff7ab165a8)
0xffff7ab16598   120  movz x16, #0x18
0xffff7ab1659c   124  sub csp, jssp, #0x10 (16)
0xffff7ab165a0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab165a4   132  bl #+0x4 (addr 0xffff7ab165a8)
0xffff7ab165a8   136  movz x17, #0xa00000000
0xffff7ab165ac   140  sub csp, jssp, #0x10 (16)
0xffff7ab165b0   144  stp x17, cp, [jssp, #-16]!
0xffff7ab165b4   148  add fp, jssp, #0x10 (16)
0xffff7ab165b8   152  ldr x17, pc+24 (addr 0x0000ffff7ab165d0)    ;; lazy deoptimization bailout 0
0xffff7ab165bc   156  add x17, x17, x16
0xffff7ab165c0   160  br x17
0xffff7ab165c4   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab165c8   168  d63f03e0       constant
0xffff7ab165cc   172  d503201f       constant
0xffff7ab165d0   176  7a906000       constant
0xffff7ab165d4   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab165b8  runtime entry
0xffff7ab165c4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 11419
type = NORMAL
name = BinaryOpICStub(MOD:Smi*32->Smi)
compiler = crankshaft
Instructions (size = 192)
0xffff7ab16520     0  mov x2, x1
0xffff7ab16524     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab16568)
0xffff7ab16528     8  mov x3, x0
0xffff7ab1652c    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab16578)
0xffff7ab16530    16  asr x3, x3, #32
0xffff7ab16534    20  cmp w3, #0x20 (32)
0xffff7ab16538    24  b.eq #+0x8 (addr 0xffff7ab16540)
0xffff7ab1653c    28  b #+0x4c (addr 0xffff7ab16588)
0xffff7ab16540    32  asr x2, x2, #32
0xffff7ab16544    36  tbz w2, #31, #+0x18 (addr 0xffff7ab1655c)
0xffff7ab16548    40  neg w2, w2
0xffff7ab1654c    44  and w2, w2, #0x1f
0xffff7ab16550    48  negs w2, w2
0xffff7ab16554    52  b.eq #+0x44 (addr 0xffff7ab16598)
0xffff7ab16558    56  b #+0x8 (addr 0xffff7ab16560)
0xffff7ab1655c    60  and w2, w2, #0x1f
0xffff7ab16560    64  lsl x0, x2, #32
0xffff7ab16564    68  ret
0xffff7ab16568    72  movz x16, #0x0
0xffff7ab1656c    76  sub csp, jssp, #0x10 (16)
0xffff7ab16570    80  stp fp, lr, [jssp, #-16]!
0xffff7ab16574    84  bl #+0x34 (addr 0xffff7ab165a8)
0xffff7ab16578    88  movz x16, #0x8
0xffff7ab1657c    92  sub csp, jssp, #0x10 (16)
0xffff7ab16580    96  stp fp, lr, [jssp, #-16]!
0xffff7ab16584   100  bl #+0x24 (addr 0xffff7ab165a8)
0xffff7ab16588   104  movz x16, #0x10
0xffff7ab1658c   108  sub csp, jssp, #0x10 (16)
0xffff7ab16590   112  stp fp, lr, [jssp, #-16]!
0xffff7ab16594   116  bl #+0x14 (addr 0xffff7ab165a8)
0xffff7ab16598   120  movz x16, #0x18
0xffff7ab1659c   124  sub csp, jssp, #0x10 (16)
0xffff7ab165a0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab165a4   132  bl #+0x4 (addr 0xffff7ab165a8)
0xffff7ab165a8   136  movz x17, #0xa00000000
0xffff7ab165ac   140  sub csp, jssp, #0x10 (16)
0xffff7ab165b0   144  stp x17, cp, [jssp, #-16]!
0xffff7ab165b4   148  add fp, jssp, #0x10 (16)
0xffff7ab165b8   152  ldr x17, pc+24 (addr 0x0000ffff7ab165d0)    ;; lazy deoptimization bailout 0
0xffff7ab165bc   156  add x17, x17, x16
0xffff7ab165c0   160  br x17
0xffff7ab165c4   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab165c8   168  d63f03e0       constant
0xffff7ab165cc   172  d503201f       constant
0xffff7ab165d0   176  7a906000       constant
0xffff7ab165d4   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab165b8  runtime entry
0xffff7ab165c4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 23707
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 192)
0xffff7ab16640     0  mov x2, x1
0xffff7ab16644     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab16688)
0xffff7ab16648     8  mov x3, x0
0xffff7ab1664c    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab16698)
0xffff7ab16650    16  asr x3, x3, #32
0xffff7ab16654    20  cmp w3, #0x800 (2048)
0xffff7ab16658    24  b.eq #+0x8 (addr 0xffff7ab16660)
0xffff7ab1665c    28  b #+0x4c (addr 0xffff7ab166a8)
0xffff7ab16660    32  asr x2, x2, #32
0xffff7ab16664    36  tbz w2, #31, #+0x18 (addr 0xffff7ab1667c)
0xffff7ab16668    40  neg w2, w2
0xffff7ab1666c    44  and w2, w2, #0x7ff
0xffff7ab16670    48  negs w2, w2
0xffff7ab16674    52  b.eq #+0x44 (addr 0xffff7ab166b8)
0xffff7ab16678    56  b #+0x8 (addr 0xffff7ab16680)
0xffff7ab1667c    60  and w2, w2, #0x7ff
0xffff7ab16680    64  lsl x0, x2, #32
0xffff7ab16684    68  ret
0xffff7ab16688    72  movz x16, #0x0
0xffff7ab1668c    76  sub csp, jssp, #0x10 (16)
0xffff7ab16690    80  stp fp, lr, [jssp, #-16]!
0xffff7ab16694    84  bl #+0x34 (addr 0xffff7ab166c8)
0xffff7ab16698    88  movz x16, #0x8
0xffff7ab1669c    92  sub csp, jssp, #0x10 (16)
0xffff7ab166a0    96  stp fp, lr, [jssp, #-16]!
0xffff7ab166a4   100  bl #+0x24 (addr 0xffff7ab166c8)
0xffff7ab166a8   104  movz x16, #0x10
0xffff7ab166ac   108  sub csp, jssp, #0x10 (16)
0xffff7ab166b0   112  stp fp, lr, [jssp, #-16]!
0xffff7ab166b4   116  bl #+0x14 (addr 0xffff7ab166c8)
0xffff7ab166b8   120  movz x16, #0x18
0xffff7ab166bc   124  sub csp, jssp, #0x10 (16)
0xffff7ab166c0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab166c4   132  bl #+0x4 (addr 0xffff7ab166c8)
0xffff7ab166c8   136  movz x17, #0xa00000000
0xffff7ab166cc   140  sub csp, jssp, #0x10 (16)
0xffff7ab166d0   144  stp x17, cp, [jssp, #-16]!
0xffff7ab166d4   148  add fp, jssp, #0x10 (16)
0xffff7ab166d8   152  ldr x17, pc+24 (addr 0x0000ffff7ab166f0)    ;; lazy deoptimization bailout 0
0xffff7ab166dc   156  add x17, x17, x16
0xffff7ab166e0   160  br x17
0xffff7ab166e4   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab166e8   168  d63f03e0       constant
0xffff7ab166ec   172  d503201f       constant
0xffff7ab166f0   176  7a906000       constant
0xffff7ab166f4   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab166d8  runtime entry
0xffff7ab166e4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 23707
type = NORMAL
name = BinaryOpICStub(MOD:Smi*2048->Smi)
compiler = crankshaft
Instructions (size = 192)
0xffff7ab16640     0  mov x2, x1
0xffff7ab16644     4  tbnz w2, #0, #+0x44 (addr 0xffff7ab16688)
0xffff7ab16648     8  mov x3, x0
0xffff7ab1664c    12  tbnz w3, #0, #+0x4c (addr 0xffff7ab16698)
0xffff7ab16650    16  asr x3, x3, #32
0xffff7ab16654    20  cmp w3, #0x800 (2048)
0xffff7ab16658    24  b.eq #+0x8 (addr 0xffff7ab16660)
0xffff7ab1665c    28  b #+0x4c (addr 0xffff7ab166a8)
0xffff7ab16660    32  asr x2, x2, #32
0xffff7ab16664    36  tbz w2, #31, #+0x18 (addr 0xffff7ab1667c)
0xffff7ab16668    40  neg w2, w2
0xffff7ab1666c    44  and w2, w2, #0x7ff
0xffff7ab16670    48  negs w2, w2
0xffff7ab16674    52  b.eq #+0x44 (addr 0xffff7ab166b8)
0xffff7ab16678    56  b #+0x8 (addr 0xffff7ab16680)
0xffff7ab1667c    60  and w2, w2, #0x7ff
0xffff7ab16680    64  lsl x0, x2, #32
0xffff7ab16684    68  ret
0xffff7ab16688    72  movz x16, #0x0
0xffff7ab1668c    76  sub csp, jssp, #0x10 (16)
0xffff7ab16690    80  stp fp, lr, [jssp, #-16]!
0xffff7ab16694    84  bl #+0x34 (addr 0xffff7ab166c8)
0xffff7ab16698    88  movz x16, #0x8
0xffff7ab1669c    92  sub csp, jssp, #0x10 (16)
0xffff7ab166a0    96  stp fp, lr, [jssp, #-16]!
0xffff7ab166a4   100  bl #+0x24 (addr 0xffff7ab166c8)
0xffff7ab166a8   104  movz x16, #0x10
0xffff7ab166ac   108  sub csp, jssp, #0x10 (16)
0xffff7ab166b0   112  stp fp, lr, [jssp, #-16]!
0xffff7ab166b4   116  bl #+0x14 (addr 0xffff7ab166c8)
0xffff7ab166b8   120  movz x16, #0x18
0xffff7ab166bc   124  sub csp, jssp, #0x10 (16)
0xffff7ab166c0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab166c4   132  bl #+0x4 (addr 0xffff7ab166c8)
0xffff7ab166c8   136  movz x17, #0xa00000000
0xffff7ab166cc   140  sub csp, jssp, #0x10 (16)
0xffff7ab166d0   144  stp x17, cp, [jssp, #-16]!
0xffff7ab166d4   148  add fp, jssp, #0x10 (16)
0xffff7ab166d8   152  ldr x17, pc+24 (addr 0x0000ffff7ab166f0)    ;; lazy deoptimization bailout 0
0xffff7ab166dc   156  add x17, x17, x16
0xffff7ab166e0   160  br x17
0xffff7ab166e4   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab166e8   168  d63f03e0       constant
0xffff7ab166ec   172  d503201f       constant
0xffff7ab166f0   176  7a906000       constant
0xffff7ab166f4   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab166d8  runtime entry
0xffff7ab166e4  constant pool (size 20)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0xffff7ab16760     0  adr xzr, #+0x40 (addr 0xffff7ab167a0)
0xffff7ab16764     4  adr xzr, #+0x360 (addr 0xffff7ab16ac4)
0xffff7ab16768     8  ldr x16, pc+1736 (addr 0x0000ffff7ab16e30)    ;; external reference (store_buffer_top)
0xffff7ab1676c    12  ldr x1, [x16]
0xffff7ab16770    16  str x2, [x1], #8
0xffff7ab16774    20  str x1, [x16]
0xffff7ab16778    24  tst x1, #0x1ffff
0xffff7ab1677c    28  b.eq #+0x8 (addr 0xffff7ab16784)
0xffff7ab16780    32  ret
0xffff7ab16784    36  sub csp, jssp, #0x8 (8)
0xffff7ab16788    40  str lr, [jssp, #-8]!
0xffff7ab1678c    44  ldr x17, pc+1708 (addr 0x0000ffff7ab16e38)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab16790    48  blr x17
0xffff7ab16794    52  ldr lr, [jssp], #8
0xffff7ab16798    56  ret
0xffff7ab1679c    60  ret
0xffff7ab167a0    64  sub csp, jssp, #0x10 (16)
0xffff7ab167a4    68  stp x3, x0, [jssp, #-16]!
0xffff7ab167a8    72  ldr x1, [x2]
0xffff7ab167ac    76  and x16, x1, #0xfffffffffff00000
0xffff7ab167b0    80  ldr x16, [x16, #8]
0xffff7ab167b4    84  tst x16, #0x18
0xffff7ab167b8    88  b.eq #+0x1d8 (addr 0xffff7ab16990)
0xffff7ab167bc    92  and x16, x5, #0xfffffffffff00000
0xffff7ab167c0    96  ldr x16, [x16, #8]
0xffff7ab167c4   100  tst x16, #0x18
0xffff7ab167c8   104  b.ne #+0x1c8 (addr 0xffff7ab16990)
0xffff7ab167cc   108  and x1, x5, #0xfffffffffff00000
0xffff7ab167d0   112  ldr x0, [x1, #104]
0xffff7ab167d4   116  subs x0, x0, #0x1 (1)
0xffff7ab167d8   120  str x0, [x1, #104]
0xffff7ab167dc   124  b.mi #+0xc4 (addr 0xffff7ab168a0)
0xffff7ab167e0   128  ubfx x16, x5, #8, #12
0xffff7ab167e4   132  and x1, x5, #0xfffffffffff00000
0xffff7ab167e8   136  add x1, x1, x16, lsl #2
0xffff7ab167ec   140  ubfx x0, x5, #3, #5
0xffff7ab167f0   144  ldr x1, [x1, #360]
0xffff7ab167f4   148  lsr x1, x1, x0
0xffff7ab167f8   152  tbz w1, #0, #+0x8 (addr 0xffff7ab16800)
0xffff7ab167fc   156  tbnz w1, #1, #+0x3c (addr 0xffff7ab16838)
0xffff7ab16800   160  ldp x3, x0, [jssp], #16
0xffff7ab16804   164  ldr x16, pc+1596 (addr 0x0000ffff7ab16e40)    ;; external reference (store_buffer_top)
0xffff7ab16808   168  ldr x1, [x16]
0xffff7ab1680c   172  str x2, [x1], #8
0xffff7ab16810   176  str x1, [x16]
0xffff7ab16814   180  tst x1, #0x1ffff
0xffff7ab16818   184  b.eq #+0x8 (addr 0xffff7ab16820)
0xffff7ab1681c   188  ret
0xffff7ab16820   192  sub csp, jssp, #0x8 (8)
0xffff7ab16824   196  str lr, [jssp, #-8]!
0xffff7ab16828   200  ldr x17, pc+1568 (addr 0x0000ffff7ab16e48)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab1682c   204  blr x17
0xffff7ab16830   208  ldr lr, [jssp], #8
0xffff7ab16834   212  ret
0xffff7ab16838   216  ldr x1, [x2]
0xffff7ab1683c   220  sub csp, jssp, #0x10 (16)
0xffff7ab16840   224  stp x5, x2, [jssp, #-16]!
0xffff7ab16844   228  ubfx x16, x1, #8, #12
0xffff7ab16848   232  and x0, x1, #0xfffffffffff00000
0xffff7ab1684c   236  add x0, x0, x16, lsl #2
0xffff7ab16850   240  ubfx x5, x1, #3, #5
0xffff7ab16854   244  ldr x2, [x0, #360]
0xffff7ab16858   248  lsr x2, x2, x5
0xffff7ab1685c   252  tbz w2, #0, #+0x40 (addr 0xffff7ab1689c)
0xffff7ab16860   256  ldp x5, x2, [jssp], #16
0xffff7ab16864   260  ldp x3, x0, [jssp], #16
0xffff7ab16868   264  ldr x16, pc+1512 (addr 0x0000ffff7ab16e50)    ;; external reference (store_buffer_top)
0xffff7ab1686c   268  ldr x1, [x16]
0xffff7ab16870   272  str x2, [x1], #8
0xffff7ab16874   276  str x1, [x16]
0xffff7ab16878   280  tst x1, #0x1ffff
0xffff7ab1687c   284  b.eq #+0x8 (addr 0xffff7ab16884)
0xffff7ab16880   288  ret
0xffff7ab16884   292  sub csp, jssp, #0x8 (8)
0xffff7ab16888   296  str lr, [jssp, #-8]!
0xffff7ab1688c   300  ldr x17, pc+1484 (addr 0x0000ffff7ab16e58)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab16890   304  blr x17
0xffff7ab16894   308  ldr lr, [jssp], #8
0xffff7ab16898   312  ret
0xffff7ab1689c   316  ldp x5, x2, [jssp], #16
0xffff7ab168a0   320  sub csp, jssp, #0x78 (120)
0xffff7ab168a4   324  stp x14, x15, [jssp, #-32]!
0xffff7ab168a8   328  stp x18, lr, [jssp, #16]
0xffff7ab168ac   332  stp x10, x11, [jssp, #-32]!
0xffff7ab168b0   336  stp x12, x13, [jssp, #16]
0xffff7ab168b4   340  stp x6, x7, [jssp, #-32]!
0xffff7ab168b8   344  stp x8, x9, [jssp, #16]
0xffff7ab168bc   348  stp x2, x4, [jssp, #-24]!
0xffff7ab168c0   352  str x5, [jssp, #16]
0xffff7ab168c4   356  sub csp, jssp, #0xb0 (176)
0xffff7ab168c8   360  stp d26, d27, [jssp, #-32]!
0xffff7ab168cc   364  stp d28, d29, [jssp, #16]
0xffff7ab168d0   368  stp d22, d23, [jssp, #-32]!
0xffff7ab168d4   372  stp d24, d25, [jssp, #16]
0xffff7ab168d8   376  stp d18, d19, [jssp, #-32]!
0xffff7ab168dc   380  stp d20, d21, [jssp, #16]
0xffff7ab168e0   384  stp d6, d7, [jssp, #-32]!
0xffff7ab168e4   388  stp d16, d17, [jssp, #16]
0xffff7ab168e8   392  stp d2, d3, [jssp, #-32]!
0xffff7ab168ec   396  stp d4, d5, [jssp, #16]
0xffff7ab168f0   400  stp d0, d1, [jssp, #-16]!
0xffff7ab168f4   404  mov x0, x5
0xffff7ab168f8   408  mov x1, x2
0xffff7ab168fc   412  ldr x2, pc+1380 (addr 0x0000ffff7ab16e60)    ;; external reference (isolate)
0xffff7ab16900   416  ldr x16, pc+1384 (addr 0x0000ffff7ab16e68)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab16904   420  and csp, jssp, #0xfffffffffffffff0
0xffff7ab16908   424  blr x16
0xffff7ab1690c   428  ldp d2, d3, [jssp, #16]
0xffff7ab16910   432  ldp d0, d1, [jssp], #32
0xffff7ab16914   436  ldp d6, d7, [jssp, #16]
0xffff7ab16918   440  ldp d4, d5, [jssp], #32
0xffff7ab1691c   444  ldp d18, d19, [jssp, #16]
0xffff7ab16920   448  ldp d16, d17, [jssp], #32
0xffff7ab16924   452  ldp d22, d23, [jssp, #16]
0xffff7ab16928   456  ldp d20, d21, [jssp], #32
0xffff7ab1692c   460  ldp d26, d27, [jssp, #16]
0xffff7ab16930   464  ldp d24, d25, [jssp], #32
0xffff7ab16934   468  ldp d28, d29, [jssp], #16
0xffff7ab16938   472  ldp x5, x6, [jssp, #16]
0xffff7ab1693c   476  ldp x2, x4, [jssp], #32
0xffff7ab16940   480  ldp x9, x10, [jssp, #16]
0xffff7ab16944   484  ldp x7, x8, [jssp], #32
0xffff7ab16948   488  ldp x13, x14, [jssp, #16]
0xffff7ab1694c   492  ldp x11, x12, [jssp], #32
0xffff7ab16950   496  ldr lr, [jssp, #16]
0xffff7ab16954   500  ldp x15, x18, [jssp], #24
0xffff7ab16958   504  ldp x3, x0, [jssp], #16
0xffff7ab1695c   508  ldr x16, pc+1300 (addr 0x0000ffff7ab16e70)    ;; external reference (store_buffer_top)
0xffff7ab16960   512  ldr x1, [x16]
0xffff7ab16964   516  str x2, [x1], #8
0xffff7ab16968   520  str x1, [x16]
0xffff7ab1696c   524  tst x1, #0x1ffff
0xffff7ab16970   528  b.eq #+0x8 (addr 0xffff7ab16978)
0xffff7ab16974   532  ret
0xffff7ab16978   536  sub csp, jssp, #0x8 (8)
0xffff7ab1697c   540  str lr, [jssp, #-8]!
0xffff7ab16980   544  ldr x17, pc+1272 (addr 0x0000ffff7ab16e78)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab16984   548  blr x17
0xffff7ab16988   552  ldr lr, [jssp], #8
0xffff7ab1698c   556  ret
0xffff7ab16990   560  and x1, x5, #0xfffffffffff00000
0xffff7ab16994   564  ldr x0, [x1, #104]
0xffff7ab16998   568  subs x0, x0, #0x1 (1)
0xffff7ab1699c   572  str x0, [x1, #104]
0xffff7ab169a0   576  b.mi #+0x64 (addr 0xffff7ab16a04)
0xffff7ab169a4   580  ubfx x16, x5, #8, #12
0xffff7ab169a8   584  and x1, x5, #0xfffffffffff00000
0xffff7ab169ac   588  add x1, x1, x16, lsl #2
0xffff7ab169b0   592  ubfx x0, x5, #3, #5
0xffff7ab169b4   596  ldr x1, [x1, #360]
0xffff7ab169b8   600  lsr x1, x1, x0
0xffff7ab169bc   604  tbz w1, #0, #+0x8 (addr 0xffff7ab169c4)
0xffff7ab169c0   608  tbnz w1, #1, #+0xc (addr 0xffff7ab169cc)
0xffff7ab169c4   612  ldp x3, x0, [jssp], #16
0xffff7ab169c8   616  ret
0xffff7ab169cc   620  ldr x1, [x2]
0xffff7ab169d0   624  sub csp, jssp, #0x10 (16)
0xffff7ab169d4   628  stp x5, x2, [jssp, #-16]!
0xffff7ab169d8   632  ubfx x16, x1, #8, #12
0xffff7ab169dc   636  and x0, x1, #0xfffffffffff00000
0xffff7ab169e0   640  add x0, x0, x16, lsl #2
0xffff7ab169e4   644  ubfx x5, x1, #3, #5
0xffff7ab169e8   648  ldr x2, [x0, #360]
0xffff7ab169ec   652  lsr x2, x2, x5
0xffff7ab169f0   656  tbz w2, #0, #+0x10 (addr 0xffff7ab16a00)
0xffff7ab169f4   660  ldp x5, x2, [jssp], #16
0xffff7ab169f8   664  ldp x3, x0, [jssp], #16
0xffff7ab169fc   668  ret
0xffff7ab16a00   672  ldp x5, x2, [jssp], #16
0xffff7ab16a04   676  sub csp, jssp, #0x78 (120)
0xffff7ab16a08   680  stp x14, x15, [jssp, #-32]!
0xffff7ab16a0c   684  stp x18, lr, [jssp, #16]
0xffff7ab16a10   688  stp x10, x11, [jssp, #-32]!
0xffff7ab16a14   692  stp x12, x13, [jssp, #16]
0xffff7ab16a18   696  stp x6, x7, [jssp, #-32]!
0xffff7ab16a1c   700  stp x8, x9, [jssp, #16]
0xffff7ab16a20   704  stp x2, x4, [jssp, #-24]!
0xffff7ab16a24   708  str x5, [jssp, #16]
0xffff7ab16a28   712  sub csp, jssp, #0xb0 (176)
0xffff7ab16a2c   716  stp d26, d27, [jssp, #-32]!
0xffff7ab16a30   720  stp d28, d29, [jssp, #16]
0xffff7ab16a34   724  stp d22, d23, [jssp, #-32]!
0xffff7ab16a38   728  stp d24, d25, [jssp, #16]
0xffff7ab16a3c   732  stp d18, d19, [jssp, #-32]!
0xffff7ab16a40   736  stp d20, d21, [jssp, #16]
0xffff7ab16a44   740  stp d6, d7, [jssp, #-32]!
0xffff7ab16a48   744  stp d16, d17, [jssp, #16]
0xffff7ab16a4c   748  stp d2, d3, [jssp, #-32]!
0xffff7ab16a50   752  stp d4, d5, [jssp, #16]
0xffff7ab16a54   756  stp d0, d1, [jssp, #-16]!
0xffff7ab16a58   760  mov x0, x5
0xffff7ab16a5c   764  mov x1, x2
0xffff7ab16a60   768  ldr x2, pc+1056 (addr 0x0000ffff7ab16e80)    ;; external reference (isolate)
0xffff7ab16a64   772  ldr x16, pc+1060 (addr 0x0000ffff7ab16e88)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab16a68   776  and csp, jssp, #0xfffffffffffffff0
0xffff7ab16a6c   780  blr x16
0xffff7ab16a70   784  ldp d2, d3, [jssp, #16]
0xffff7ab16a74   788  ldp d0, d1, [jssp], #32
0xffff7ab16a78   792  ldp d6, d7, [jssp, #16]
0xffff7ab16a7c   796  ldp d4, d5, [jssp], #32
0xffff7ab16a80   800  ldp d18, d19, [jssp, #16]
0xffff7ab16a84   804  ldp d16, d17, [jssp], #32
0xffff7ab16a88   808  ldp d22, d23, [jssp, #16]
0xffff7ab16a8c   812  ldp d20, d21, [jssp], #32
0xffff7ab16a90   816  ldp d26, d27, [jssp, #16]
0xffff7ab16a94   820  ldp d24, d25, [jssp], #32
0xffff7ab16a98   824  ldp d28, d29, [jssp], #16
0xffff7ab16a9c   828  ldp x5, x6, [jssp, #16]
0xffff7ab16aa0   832  ldp x2, x4, [jssp], #32
0xffff7ab16aa4   836  ldp x9, x10, [jssp, #16]
0xffff7ab16aa8   840  ldp x7, x8, [jssp], #32
0xffff7ab16aac   844  ldp x13, x14, [jssp, #16]
0xffff7ab16ab0   848  ldp x11, x12, [jssp], #32
0xffff7ab16ab4   852  ldr lr, [jssp, #16]
0xffff7ab16ab8   856  ldp x15, x18, [jssp], #24
0xffff7ab16abc   860  ldp x3, x0, [jssp], #16
0xffff7ab16ac0   864  ret
0xffff7ab16ac4   868  sub csp, jssp, #0x10 (16)
0xffff7ab16ac8   872  stp x3, x0, [jssp, #-16]!
0xffff7ab16acc   876  ldr x1, [x2]
0xffff7ab16ad0   880  and x16, x1, #0xfffffffffff00000
0xffff7ab16ad4   884  ldr x16, [x16, #8]
0xffff7ab16ad8   888  tst x16, #0x18
0xffff7ab16adc   892  b.eq #+0x1f8 (addr 0xffff7ab16cd4)
0xffff7ab16ae0   896  and x16, x5, #0xfffffffffff00000
0xffff7ab16ae4   900  ldr x16, [x16, #8]
0xffff7ab16ae8   904  tst x16, #0x18
0xffff7ab16aec   908  b.ne #+0x1e8 (addr 0xffff7ab16cd4)
0xffff7ab16af0   912  and x1, x5, #0xfffffffffff00000
0xffff7ab16af4   916  ldr x0, [x1, #104]
0xffff7ab16af8   920  subs x0, x0, #0x1 (1)
0xffff7ab16afc   924  str x0, [x1, #104]
0xffff7ab16b00   928  b.mi #+0xe4 (addr 0xffff7ab16be4)
0xffff7ab16b04   932  ubfx x16, x5, #8, #12
0xffff7ab16b08   936  and x1, x5, #0xfffffffffff00000
0xffff7ab16b0c   940  add x1, x1, x16, lsl #2
0xffff7ab16b10   944  ubfx x0, x5, #3, #5
0xffff7ab16b14   948  ldr x1, [x1, #360]
0xffff7ab16b18   952  lsr x1, x1, x0
0xffff7ab16b1c   956  tbz w1, #0, #+0x8 (addr 0xffff7ab16b24)
0xffff7ab16b20   960  tbnz w1, #1, #+0x3c (addr 0xffff7ab16b5c)
0xffff7ab16b24   964  ldp x3, x0, [jssp], #16
0xffff7ab16b28   968  ldr x16, pc+872 (addr 0x0000ffff7ab16e90)    ;; external reference (store_buffer_top)
0xffff7ab16b2c   972  ldr x1, [x16]
0xffff7ab16b30   976  str x2, [x1], #8
0xffff7ab16b34   980  str x1, [x16]
0xffff7ab16b38   984  tst x1, #0x1ffff
0xffff7ab16b3c   988  b.eq #+0x8 (addr 0xffff7ab16b44)
0xffff7ab16b40   992  ret
0xffff7ab16b44   996  sub csp, jssp, #0x8 (8)
0xffff7ab16b48  1000  str lr, [jssp, #-8]!
0xffff7ab16b4c  1004  ldr x17, pc+844 (addr 0x0000ffff7ab16e98)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab16b50  1008  blr x17
0xffff7ab16b54  1012  ldr lr, [jssp], #8
0xffff7ab16b58  1016  ret
0xffff7ab16b5c  1020  ldr x1, [x2]
0xffff7ab16b60  1024  and x0, x1, #0xfffffffffff00000
0xffff7ab16b64  1028  ldr x0, [x0, #8]
0xffff7ab16b68  1032  tbz w0, #6, #+0x18 (addr 0xffff7ab16b80)
0xffff7ab16b6c  1036  and x0, x5, #0xfffffffffff00000
0xffff7ab16b70  1040  ldr x0, [x0, #8]
0xffff7ab16b74  1044  movz x16, #0x58
0xffff7ab16b78  1048  tst x0, x16
0xffff7ab16b7c  1052  b.eq #+0x68 (addr 0xffff7ab16be4)
0xffff7ab16b80  1056  sub csp, jssp, #0x10 (16)
0xffff7ab16b84  1060  stp x5, x2, [jssp, #-16]!
0xffff7ab16b88  1064  ubfx x16, x1, #8, #12
0xffff7ab16b8c  1068  and x0, x1, #0xfffffffffff00000
0xffff7ab16b90  1072  add x0, x0, x16, lsl #2
0xffff7ab16b94  1076  ubfx x5, x1, #3, #5
0xffff7ab16b98  1080  ldr x2, [x0, #360]
0xffff7ab16b9c  1084  lsr x2, x2, x5
0xffff7ab16ba0  1088  tbz w2, #0, #+0x40 (addr 0xffff7ab16be0)
0xffff7ab16ba4  1092  ldp x5, x2, [jssp], #16
0xffff7ab16ba8  1096  ldp x3, x0, [jssp], #16
0xffff7ab16bac  1100  ldr x16, pc+756 (addr 0x0000ffff7ab16ea0)    ;; external reference (store_buffer_top)
0xffff7ab16bb0  1104  ldr x1, [x16]
0xffff7ab16bb4  1108  str x2, [x1], #8
0xffff7ab16bb8  1112  str x1, [x16]
0xffff7ab16bbc  1116  tst x1, #0x1ffff
0xffff7ab16bc0  1120  b.eq #+0x8 (addr 0xffff7ab16bc8)
0xffff7ab16bc4  1124  ret
0xffff7ab16bc8  1128  sub csp, jssp, #0x8 (8)
0xffff7ab16bcc  1132  str lr, [jssp, #-8]!
0xffff7ab16bd0  1136  ldr x17, pc+728 (addr 0x0000ffff7ab16ea8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab16bd4  1140  blr x17
0xffff7ab16bd8  1144  ldr lr, [jssp], #8
0xffff7ab16bdc  1148  ret
0xffff7ab16be0  1152  ldp x5, x2, [jssp], #16
0xffff7ab16be4  1156  sub csp, jssp, #0x78 (120)
0xffff7ab16be8  1160  stp x14, x15, [jssp, #-32]!
0xffff7ab16bec  1164  stp x18, lr, [jssp, #16]
0xffff7ab16bf0  1168  stp x10, x11, [jssp, #-32]!
0xffff7ab16bf4  1172  stp x12, x13, [jssp, #16]
0xffff7ab16bf8  1176  stp x6, x7, [jssp, #-32]!
0xffff7ab16bfc  1180  stp x8, x9, [jssp, #16]
0xffff7ab16c00  1184  stp x2, x4, [jssp, #-24]!
0xffff7ab16c04  1188  str x5, [jssp, #16]
0xffff7ab16c08  1192  sub csp, jssp, #0xb0 (176)
0xffff7ab16c0c  1196  stp d26, d27, [jssp, #-32]!
0xffff7ab16c10  1200  stp d28, d29, [jssp, #16]
0xffff7ab16c14  1204  stp d22, d23, [jssp, #-32]!
0xffff7ab16c18  1208  stp d24, d25, [jssp, #16]
0xffff7ab16c1c  1212  stp d18, d19, [jssp, #-32]!
0xffff7ab16c20  1216  stp d20, d21, [jssp, #16]
0xffff7ab16c24  1220  stp d6, d7, [jssp, #-32]!
0xffff7ab16c28  1224  stp d16, d17, [jssp, #16]
0xffff7ab16c2c  1228  stp d2, d3, [jssp, #-32]!
0xffff7ab16c30  1232  stp d4, d5, [jssp, #16]
0xffff7ab16c34  1236  stp d0, d1, [jssp, #-16]!
0xffff7ab16c38  1240  mov x0, x5
0xffff7ab16c3c  1244  mov x1, x2
0xffff7ab16c40  1248  ldr x2, pc+624 (addr 0x0000ffff7ab16eb0)    ;; external reference (isolate)
0xffff7ab16c44  1252  ldr x16, pc+628 (addr 0x0000ffff7ab16eb8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab16c48  1256  and csp, jssp, #0xfffffffffffffff0
0xffff7ab16c4c  1260  blr x16
0xffff7ab16c50  1264  ldp d2, d3, [jssp, #16]
0xffff7ab16c54  1268  ldp d0, d1, [jssp], #32
0xffff7ab16c58  1272  ldp d6, d7, [jssp, #16]
0xffff7ab16c5c  1276  ldp d4, d5, [jssp], #32
0xffff7ab16c60  1280  ldp d18, d19, [jssp, #16]
0xffff7ab16c64  1284  ldp d16, d17, [jssp], #32
0xffff7ab16c68  1288  ldp d22, d23, [jssp, #16]
0xffff7ab16c6c  1292  ldp d20, d21, [jssp], #32
0xffff7ab16c70  1296  ldp d26, d27, [jssp, #16]
0xffff7ab16c74  1300  ldp d24, d25, [jssp], #32
0xffff7ab16c78  1304  ldp d28, d29, [jssp], #16
0xffff7ab16c7c  1308  ldp x5, x6, [jssp, #16]
0xffff7ab16c80  1312  ldp x2, x4, [jssp], #32
0xffff7ab16c84  1316  ldp x9, x10, [jssp, #16]
0xffff7ab16c88  1320  ldp x7, x8, [jssp], #32
0xffff7ab16c8c  1324  ldp x13, x14, [jssp, #16]
0xffff7ab16c90  1328  ldp x11, x12, [jssp], #32
0xffff7ab16c94  1332  ldr lr, [jssp, #16]
0xffff7ab16c98  1336  ldp x15, x18, [jssp], #24
0xffff7ab16c9c  1340  ldp x3, x0, [jssp], #16
0xffff7ab16ca0  1344  ldr x16, pc+544 (addr 0x0000ffff7ab16ec0)    ;; external reference (store_buffer_top)
0xffff7ab16ca4  1348  ldr x1, [x16]
0xffff7ab16ca8  1352  str x2, [x1], #8
0xffff7ab16cac  1356  str x1, [x16]
0xffff7ab16cb0  1360  tst x1, #0x1ffff
0xffff7ab16cb4  1364  b.eq #+0x8 (addr 0xffff7ab16cbc)
0xffff7ab16cb8  1368  ret
0xffff7ab16cbc  1372  sub csp, jssp, #0x8 (8)
0xffff7ab16cc0  1376  str lr, [jssp, #-8]!
0xffff7ab16cc4  1380  ldr x17, pc+516 (addr 0x0000ffff7ab16ec8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab16cc8  1384  blr x17
0xffff7ab16ccc  1388  ldr lr, [jssp], #8
0xffff7ab16cd0  1392  ret
0xffff7ab16cd4  1396  and x1, x5, #0xfffffffffff00000
0xffff7ab16cd8  1400  ldr x0, [x1, #104]
0xffff7ab16cdc  1404  subs x0, x0, #0x1 (1)
0xffff7ab16ce0  1408  str x0, [x1, #104]
0xffff7ab16ce4  1412  b.mi #+0x84 (addr 0xffff7ab16d68)
0xffff7ab16ce8  1416  ubfx x16, x5, #8, #12
0xffff7ab16cec  1420  and x1, x5, #0xfffffffffff00000
0xffff7ab16cf0  1424  add x1, x1, x16, lsl #2
0xffff7ab16cf4  1428  ubfx x0, x5, #3, #5
0xffff7ab16cf8  1432  ldr x1, [x1, #360]
0xffff7ab16cfc  1436  lsr x1, x1, x0
0xffff7ab16d00  1440  tbz w1, #0, #+0x8 (addr 0xffff7ab16d08)
0xffff7ab16d04  1444  tbnz w1, #1, #+0xc (addr 0xffff7ab16d10)
0xffff7ab16d08  1448  ldp x3, x0, [jssp], #16
0xffff7ab16d0c  1452  ret
0xffff7ab16d10  1456  ldr x1, [x2]
0xffff7ab16d14  1460  and x0, x1, #0xfffffffffff00000
0xffff7ab16d18  1464  ldr x0, [x0, #8]
0xffff7ab16d1c  1468  tbz w0, #6, #+0x18 (addr 0xffff7ab16d34)
0xffff7ab16d20  1472  and x0, x5, #0xfffffffffff00000
0xffff7ab16d24  1476  ldr x0, [x0, #8]
0xffff7ab16d28  1480  movz x16, #0x58
0xffff7ab16d2c  1484  tst x0, x16
0xffff7ab16d30  1488  b.eq #+0x38 (addr 0xffff7ab16d68)
0xffff7ab16d34  1492  sub csp, jssp, #0x10 (16)
0xffff7ab16d38  1496  stp x5, x2, [jssp, #-16]!
0xffff7ab16d3c  1500  ubfx x16, x1, #8, #12
0xffff7ab16d40  1504  and x0, x1, #0xfffffffffff00000
0xffff7ab16d44  1508  add x0, x0, x16, lsl #2
0xffff7ab16d48  1512  ubfx x5, x1, #3, #5
0xffff7ab16d4c  1516  ldr x2, [x0, #360]
0xffff7ab16d50  1520  lsr x2, x2, x5
0xffff7ab16d54  1524  tbz w2, #0, #+0x10 (addr 0xffff7ab16d64)
0xffff7ab16d58  1528  ldp x5, x2, [jssp], #16
0xffff7ab16d5c  1532  ldp x3, x0, [jssp], #16
0xffff7ab16d60  1536  ret
0xffff7ab16d64  1540  ldp x5, x2, [jssp], #16
0xffff7ab16d68  1544  sub csp, jssp, #0x78 (120)
0xffff7ab16d6c  1548  stp x14, x15, [jssp, #-32]!
0xffff7ab16d70  1552  stp x18, lr, [jssp, #16]
0xffff7ab16d74  1556  stp x10, x11, [jssp, #-32]!
0xffff7ab16d78  1560  stp x12, x13, [jssp, #16]
0xffff7ab16d7c  1564  stp x6, x7, [jssp, #-32]!
0xffff7ab16d80  1568  stp x8, x9, [jssp, #16]
0xffff7ab16d84  1572  stp x2, x4, [jssp, #-24]!
0xffff7ab16d88  1576  str x5, [jssp, #16]
0xffff7ab16d8c  1580  sub csp, jssp, #0xb0 (176)
0xffff7ab16d90  1584  stp d26, d27, [jssp, #-32]!
0xffff7ab16d94  1588  stp d28, d29, [jssp, #16]
0xffff7ab16d98  1592  stp d22, d23, [jssp, #-32]!
0xffff7ab16d9c  1596  stp d24, d25, [jssp, #16]
0xffff7ab16da0  1600  stp d18, d19, [jssp, #-32]!
0xffff7ab16da4  1604  stp d20, d21, [jssp, #16]
0xffff7ab16da8  1608  stp d6, d7, [jssp, #-32]!
0xffff7ab16dac  1612  stp d16, d17, [jssp, #16]
0xffff7ab16db0  1616  stp d2, d3, [jssp, #-32]!
0xffff7ab16db4  1620  stp d4, d5, [jssp, #16]
0xffff7ab16db8  1624  stp d0, d1, [jssp, #-16]!
0xffff7ab16dbc  1628  mov x0, x5
0xffff7ab16dc0  1632  mov x1, x2
0xffff7ab16dc4  1636  ldr x2, pc+268 (addr 0x0000ffff7ab16ed0)    ;; external reference (isolate)
0xffff7ab16dc8  1640  ldr x16, pc+272 (addr 0x0000ffff7ab16ed8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab16dcc  1644  and csp, jssp, #0xfffffffffffffff0
0xffff7ab16dd0  1648  blr x16
0xffff7ab16dd4  1652  ldp d2, d3, [jssp, #16]
0xffff7ab16dd8  1656  ldp d0, d1, [jssp], #32
0xffff7ab16ddc  1660  ldp d6, d7, [jssp, #16]
0xffff7ab16de0  1664  ldp d4, d5, [jssp], #32
0xffff7ab16de4  1668  ldp d18, d19, [jssp, #16]
0xffff7ab16de8  1672  ldp d16, d17, [jssp], #32
0xffff7ab16dec  1676  ldp d22, d23, [jssp, #16]
0xffff7ab16df0  1680  ldp d20, d21, [jssp], #32
0xffff7ab16df4  1684  ldp d26, d27, [jssp, #16]
0xffff7ab16df8  1688  ldp d24, d25, [jssp], #32
0xffff7ab16dfc  1692  ldp d28, d29, [jssp], #16
0xffff7ab16e00  1696  ldp x5, x6, [jssp, #16]
0xffff7ab16e04  1700  ldp x2, x4, [jssp], #32
0xffff7ab16e08  1704  ldp x9, x10, [jssp, #16]
0xffff7ab16e0c  1708  ldp x7, x8, [jssp], #32
0xffff7ab16e10  1712  ldp x13, x14, [jssp, #16]
0xffff7ab16e14  1716  ldp x11, x12, [jssp], #32
0xffff7ab16e18  1720  ldr lr, [jssp, #16]
0xffff7ab16e1c  1724  ldp x15, x18, [jssp], #24
0xffff7ab16e20  1728  ldp x3, x0, [jssp], #16
0xffff7ab16e24  1732  ret
0xffff7ab16e28  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab16e2c  1740  d63f03e0       constant
0xffff7ab16e30  1744  09abe8c0       constant
0xffff7ab16e34  1748  00000000       constant
0xffff7ab16e38  1752  7ab065a0       constant
0xffff7ab16e3c  1756  0000ffff       constant
0xffff7ab16e40  1760  09abe8c0       constant
0xffff7ab16e44  1764  00000000       constant
0xffff7ab16e48  1768  7ab065a0       constant
0xffff7ab16e4c  1772  0000ffff       constant
0xffff7ab16e50  1776  09abe8c0       constant
0xffff7ab16e54  1780  00000000       constant
0xffff7ab16e58  1784  7ab065a0       constant
0xffff7ab16e5c  1788  0000ffff       constant
0xffff7ab16e60  1792  09abd2d0       constant
0xffff7ab16e64  1796  00000000       constant
0xffff7ab16e68  1800  00c2d958       constant
0xffff7ab16e6c  1804  00000000       constant
0xffff7ab16e70  1808  09abe8c0       constant
0xffff7ab16e74  1812  00000000       constant
0xffff7ab16e78  1816  7ab065a0       constant
0xffff7ab16e7c  1820  0000ffff       constant
0xffff7ab16e80  1824  09abd2d0       constant
0xffff7ab16e84  1828  00000000       constant
0xffff7ab16e88  1832  00c2d958       constant
0xffff7ab16e8c  1836  00000000       constant
0xffff7ab16e90  1840  09abe8c0       constant
0xffff7ab16e94  1844  00000000       constant
0xffff7ab16e98  1848  7ab065a0       constant
0xffff7ab16e9c  1852  0000ffff       constant
0xffff7ab16ea0  1856  09abe8c0       constant
0xffff7ab16ea4  1860  00000000       constant
0xffff7ab16ea8  1864  7ab065a0       constant
0xffff7ab16eac  1868  0000ffff       constant
0xffff7ab16eb0  1872  09abd2d0       constant
0xffff7ab16eb4  1876  00000000       constant
0xffff7ab16eb8  1880  00c2d958       constant
0xffff7ab16ebc  1884  00000000       constant
0xffff7ab16ec0  1888  09abe8c0       constant
0xffff7ab16ec4  1892  00000000       constant
0xffff7ab16ec8  1896  7ab065a0       constant
0xffff7ab16ecc  1900  0000ffff       constant
0xffff7ab16ed0  1904  09abd2d0       constant
0xffff7ab16ed4  1908  00000000       constant
0xffff7ab16ed8  1912  00c2d958       constant
0xffff7ab16edc  1916  00000000       constant


RelocInfo (size = 65)
0xffff7ab16768  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab1678c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab16804  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab16828  code target (STUB)  (0xffff7ab065a0)
0xffff7ab16868  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab1688c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab168fc  external reference (isolate)  (0x9abd2d0)
0xffff7ab16900  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab1695c  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab16980  code target (STUB)  (0xffff7ab065a0)
0xffff7ab16a60  external reference (isolate)  (0x9abd2d0)
0xffff7ab16a64  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab16b28  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab16b4c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab16bac  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab16bd0  code target (STUB)  (0xffff7ab065a0)
0xffff7ab16c40  external reference (isolate)  (0x9abd2d0)
0xffff7ab16c44  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab16ca0  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab16cc4  code target (STUB)  (0xffff7ab065a0)
0xffff7ab16dc4  external reference (isolate)  (0x9abd2d0)
0xffff7ab16dc8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab16e28  constant pool (size 184)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 280)
0xffff7ab16f40     0  ldur x5, [x1, #15]
0xffff7ab16f44     4  ldur x6, [x5, #-1]
0xffff7ab16f48     8  ldr x16, pc+152 (addr 0x0000ffff7ab16fe0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab16f4c    12  cmp x6, x16
0xffff7ab16f50    16  b.ne #+0xa0 (addr 0xffff7ab16ff0)
0xffff7ab16f54    20  ldur w6, [x5, #11]
0xffff7ab16f58    24  tbnz w2, #0, #+0x54 (addr 0xffff7ab16fac)
0xffff7ab16f5c    28  asr x8, x2, #32
0xffff7ab16f60    32  cmp w8, w6
0xffff7ab16f64    36  b.hs #+0x9c (addr 0xffff7ab17000)
0xffff7ab16f68    40  mov x1, x0
0xffff7ab16f6c    44  add x2, x5, #0xf (15)
0xffff7ab16f70    48  str x1, [x2, w8, sxtw #3]
0xffff7ab16f74    52  add x2, x2, w8, sxtw #3
0xffff7ab16f78    56  tbz w1, #0, #+0x30 (addr 0xffff7ab16fa8)
0xffff7ab16f7c    60  and x1, x1, #0xfffffffffff00000
0xffff7ab16f80    64  ldr x1, [x1, #8]
0xffff7ab16f84    68  tbz w1, #1, #+0x24 (addr 0xffff7ab16fa8)
0xffff7ab16f88    72  and x1, x5, #0xfffffffffff00000
0xffff7ab16f8c    76  ldr x1, [x1, #8]
0xffff7ab16f90    80  tbz w1, #2, #+0x18 (addr 0xffff7ab16fa8)
0xffff7ab16f94    84  sub csp, jssp, #0x8 (8)
0xffff7ab16f98    88  str lr, [jssp, #-8]!
0xffff7ab16f9c    92  ldr x16, pc+76 (addr 0x0000ffff7ab16fe8)    ;; code: STUB, RecordWriteStub, minor: 67621
0xffff7ab16fa0    96  blr x16
0xffff7ab16fa4   100  ldr lr, [jssp], #8
0xffff7ab16fa8   104  ret
0xffff7ab16fac   108  ldur x16, [x2, #-1]
0xffff7ab16fb0   112  ldr x17, [x26, #120]
0xffff7ab16fb4   116  cmp x16, x17
0xffff7ab16fb8   120  b.ne #+0x58 (addr 0xffff7ab17010)
0xffff7ab16fbc   124  ldur d29, [x2, #7]
0xffff7ab16fc0   128  fcvtzs w8, d29
0xffff7ab16fc4   132  scvtf d0, w8
0xffff7ab16fc8   136  fcmp d29, d0
0xffff7ab16fcc   140  b.ne #+0x44 (addr 0xffff7ab17010)
0xffff7ab16fd0   144  b #-0x70 (addr 0xffff7ab16f60)
0xffff7ab16fd4   148  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab16fd8   152  d63f03e0       constant
0xffff7ab16fdc   156  d503201f       constant
0xffff7ab16fe0   160  4ec04259       constant
0xffff7ab16fe4   164  00000000       constant
0xffff7ab16fe8   168  7ab16760       constant
0xffff7ab16fec   172  0000ffff       constant
0xffff7ab16ff0   176  movz x16, #0x0
0xffff7ab16ff4   180  sub csp, jssp, #0x10 (16)
0xffff7ab16ff8   184  stp fp, lr, [jssp, #-16]!
0xffff7ab16ffc   188  bl #+0x24 (addr 0xffff7ab17020)
0xffff7ab17000   192  movz x16, #0x8
0xffff7ab17004   196  sub csp, jssp, #0x10 (16)
0xffff7ab17008   200  stp fp, lr, [jssp, #-16]!
0xffff7ab1700c   204  bl #+0x14 (addr 0xffff7ab17020)
0xffff7ab17010   208  movz x16, #0x10
0xffff7ab17014   212  sub csp, jssp, #0x10 (16)
0xffff7ab17018   216  stp fp, lr, [jssp, #-16]!
0xffff7ab1701c   220  bl #+0x4 (addr 0xffff7ab17020)
0xffff7ab17020   224  movz x17, #0xa00000000
0xffff7ab17024   228  sub csp, jssp, #0x10 (16)
0xffff7ab17028   232  stp x17, cp, [jssp, #-16]!
0xffff7ab1702c   236  add fp, jssp, #0x10 (16)
0xffff7ab17030   240  ldr x17, pc+24 (addr 0x0000ffff7ab17048)    ;; lazy deoptimization bailout 0
0xffff7ab17034   244  add x17, x17, x16
0xffff7ab17038   248  br x17
0xffff7ab1703c   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab17040   256  d63f03e0       constant
0xffff7ab17044   260  d503201f       constant
0xffff7ab17048   264  7a906000       constant
0xffff7ab1704c   268  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 20)
0xffff7ab16f48  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab16f9c  code target (STUB)  (0xffff7ab16760)
0xffff7ab16fd4  constant pool (size 28)
0xffff7ab17030  runtime entry
0xffff7ab1703c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 280)
0xffff7ab16f40     0  ldur x5, [x1, #15]
0xffff7ab16f44     4  ldur x6, [x5, #-1]
0xffff7ab16f48     8  ldr x16, pc+152 (addr 0x0000ffff7ab16fe0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab16f4c    12  cmp x6, x16
0xffff7ab16f50    16  b.ne #+0xa0 (addr 0xffff7ab16ff0)
0xffff7ab16f54    20  ldur w6, [x5, #11]
0xffff7ab16f58    24  tbnz w2, #0, #+0x54 (addr 0xffff7ab16fac)
0xffff7ab16f5c    28  asr x8, x2, #32
0xffff7ab16f60    32  cmp w8, w6
0xffff7ab16f64    36  b.hs #+0x9c (addr 0xffff7ab17000)
0xffff7ab16f68    40  mov x1, x0
0xffff7ab16f6c    44  add x2, x5, #0xf (15)
0xffff7ab16f70    48  str x1, [x2, w8, sxtw #3]
0xffff7ab16f74    52  add x2, x2, w8, sxtw #3
0xffff7ab16f78    56  tbz w1, #0, #+0x30 (addr 0xffff7ab16fa8)
0xffff7ab16f7c    60  and x1, x1, #0xfffffffffff00000
0xffff7ab16f80    64  ldr x1, [x1, #8]
0xffff7ab16f84    68  tbz w1, #1, #+0x24 (addr 0xffff7ab16fa8)
0xffff7ab16f88    72  and x1, x5, #0xfffffffffff00000
0xffff7ab16f8c    76  ldr x1, [x1, #8]
0xffff7ab16f90    80  tbz w1, #2, #+0x18 (addr 0xffff7ab16fa8)
0xffff7ab16f94    84  sub csp, jssp, #0x8 (8)
0xffff7ab16f98    88  str lr, [jssp, #-8]!
0xffff7ab16f9c    92  ldr x16, pc+76 (addr 0x0000ffff7ab16fe8)    ;; code: STUB, RecordWriteStub, minor: 67621
0xffff7ab16fa0    96  blr x16
0xffff7ab16fa4   100  ldr lr, [jssp], #8
0xffff7ab16fa8   104  ret
0xffff7ab16fac   108  ldur x16, [x2, #-1]
0xffff7ab16fb0   112  ldr x17, [x26, #120]
0xffff7ab16fb4   116  cmp x16, x17
0xffff7ab16fb8   120  b.ne #+0x58 (addr 0xffff7ab17010)
0xffff7ab16fbc   124  ldur d29, [x2, #7]
0xffff7ab16fc0   128  fcvtzs w8, d29
0xffff7ab16fc4   132  scvtf d0, w8
0xffff7ab16fc8   136  fcmp d29, d0
0xffff7ab16fcc   140  b.ne #+0x44 (addr 0xffff7ab17010)
0xffff7ab16fd0   144  b #-0x70 (addr 0xffff7ab16f60)
0xffff7ab16fd4   148  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab16fd8   152  d63f03e0       constant
0xffff7ab16fdc   156  d503201f       constant
0xffff7ab16fe0   160  4ec04259       constant
0xffff7ab16fe4   164  00000000       constant
0xffff7ab16fe8   168  7ab16760       constant
0xffff7ab16fec   172  0000ffff       constant
0xffff7ab16ff0   176  movz x16, #0x0
0xffff7ab16ff4   180  sub csp, jssp, #0x10 (16)
0xffff7ab16ff8   184  stp fp, lr, [jssp, #-16]!
0xffff7ab16ffc   188  bl #+0x24 (addr 0xffff7ab17020)
0xffff7ab17000   192  movz x16, #0x8
0xffff7ab17004   196  sub csp, jssp, #0x10 (16)
0xffff7ab17008   200  stp fp, lr, [jssp, #-16]!
0xffff7ab1700c   204  bl #+0x14 (addr 0xffff7ab17020)
0xffff7ab17010   208  movz x16, #0x10
0xffff7ab17014   212  sub csp, jssp, #0x10 (16)
0xffff7ab17018   216  stp fp, lr, [jssp, #-16]!
0xffff7ab1701c   220  bl #+0x4 (addr 0xffff7ab17020)
0xffff7ab17020   224  movz x17, #0xa00000000
0xffff7ab17024   228  sub csp, jssp, #0x10 (16)
0xffff7ab17028   232  stp x17, cp, [jssp, #-16]!
0xffff7ab1702c   236  add fp, jssp, #0x10 (16)
0xffff7ab17030   240  ldr x17, pc+24 (addr 0x0000ffff7ab17048)    ;; lazy deoptimization bailout 0
0xffff7ab17034   244  add x17, x17, x16
0xffff7ab17038   248  br x17
0xffff7ab1703c   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab17040   256  d63f03e0       constant
0xffff7ab17044   260  d503201f       constant
0xffff7ab17048   264  7a906000       constant
0xffff7ab1704c   268  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 20)
0xffff7ab16f48  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab16f9c  code target (STUB)  (0xffff7ab16760)
0xffff7ab16fd4  constant pool (size 28)
0xffff7ab17030  runtime entry
0xffff7ab1703c  constant pool (size 20)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0xffff7ab170c0     0  adr xzr, #+0x40 (addr 0xffff7ab17100)
0xffff7ab170c4     4  adr xzr, #+0x360 (addr 0xffff7ab17424)
0xffff7ab170c8     8  ldr x16, pc+1736 (addr 0x0000ffff7ab17790)    ;; external reference (store_buffer_top)
0xffff7ab170cc    12  ldr x2, [x16]
0xffff7ab170d0    16  str x3, [x2], #8
0xffff7ab170d4    20  str x2, [x16]
0xffff7ab170d8    24  tst x2, #0x1ffff
0xffff7ab170dc    28  b.eq #+0x8 (addr 0xffff7ab170e4)
0xffff7ab170e0    32  ret
0xffff7ab170e4    36  sub csp, jssp, #0x8 (8)
0xffff7ab170e8    40  str lr, [jssp, #-8]!
0xffff7ab170ec    44  ldr x17, pc+1708 (addr 0x0000ffff7ab17798)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab170f0    48  blr x17
0xffff7ab170f4    52  ldr lr, [jssp], #8
0xffff7ab170f8    56  ret
0xffff7ab170fc    60  ret
0xffff7ab17100    64  sub csp, jssp, #0x10 (16)
0xffff7ab17104    68  stp x4, x0, [jssp, #-16]!
0xffff7ab17108    72  ldr x2, [x3]
0xffff7ab1710c    76  and x16, x2, #0xfffffffffff00000
0xffff7ab17110    80  ldr x16, [x16, #8]
0xffff7ab17114    84  tst x16, #0x18
0xffff7ab17118    88  b.eq #+0x1d8 (addr 0xffff7ab172f0)
0xffff7ab1711c    92  and x16, x1, #0xfffffffffff00000
0xffff7ab17120    96  ldr x16, [x16, #8]
0xffff7ab17124   100  tst x16, #0x18
0xffff7ab17128   104  b.ne #+0x1c8 (addr 0xffff7ab172f0)
0xffff7ab1712c   108  and x2, x1, #0xfffffffffff00000
0xffff7ab17130   112  ldr x0, [x2, #104]
0xffff7ab17134   116  subs x0, x0, #0x1 (1)
0xffff7ab17138   120  str x0, [x2, #104]
0xffff7ab1713c   124  b.mi #+0xc4 (addr 0xffff7ab17200)
0xffff7ab17140   128  ubfx x16, x1, #8, #12
0xffff7ab17144   132  and x2, x1, #0xfffffffffff00000
0xffff7ab17148   136  add x2, x2, x16, lsl #2
0xffff7ab1714c   140  ubfx x0, x1, #3, #5
0xffff7ab17150   144  ldr x2, [x2, #360]
0xffff7ab17154   148  lsr x2, x2, x0
0xffff7ab17158   152  tbz w2, #0, #+0x8 (addr 0xffff7ab17160)
0xffff7ab1715c   156  tbnz w2, #1, #+0x3c (addr 0xffff7ab17198)
0xffff7ab17160   160  ldp x4, x0, [jssp], #16
0xffff7ab17164   164  ldr x16, pc+1596 (addr 0x0000ffff7ab177a0)    ;; external reference (store_buffer_top)
0xffff7ab17168   168  ldr x2, [x16]
0xffff7ab1716c   172  str x3, [x2], #8
0xffff7ab17170   176  str x2, [x16]
0xffff7ab17174   180  tst x2, #0x1ffff
0xffff7ab17178   184  b.eq #+0x8 (addr 0xffff7ab17180)
0xffff7ab1717c   188  ret
0xffff7ab17180   192  sub csp, jssp, #0x8 (8)
0xffff7ab17184   196  str lr, [jssp, #-8]!
0xffff7ab17188   200  ldr x17, pc+1568 (addr 0x0000ffff7ab177a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab1718c   204  blr x17
0xffff7ab17190   208  ldr lr, [jssp], #8
0xffff7ab17194   212  ret
0xffff7ab17198   216  ldr x2, [x3]
0xffff7ab1719c   220  sub csp, jssp, #0x10 (16)
0xffff7ab171a0   224  stp x1, x3, [jssp, #-16]!
0xffff7ab171a4   228  ubfx x16, x2, #8, #12
0xffff7ab171a8   232  and x0, x2, #0xfffffffffff00000
0xffff7ab171ac   236  add x0, x0, x16, lsl #2
0xffff7ab171b0   240  ubfx x1, x2, #3, #5
0xffff7ab171b4   244  ldr x3, [x0, #360]
0xffff7ab171b8   248  lsr x3, x3, x1
0xffff7ab171bc   252  tbz w3, #0, #+0x40 (addr 0xffff7ab171fc)
0xffff7ab171c0   256  ldp x1, x3, [jssp], #16
0xffff7ab171c4   260  ldp x4, x0, [jssp], #16
0xffff7ab171c8   264  ldr x16, pc+1512 (addr 0x0000ffff7ab177b0)    ;; external reference (store_buffer_top)
0xffff7ab171cc   268  ldr x2, [x16]
0xffff7ab171d0   272  str x3, [x2], #8
0xffff7ab171d4   276  str x2, [x16]
0xffff7ab171d8   280  tst x2, #0x1ffff
0xffff7ab171dc   284  b.eq #+0x8 (addr 0xffff7ab171e4)
0xffff7ab171e0   288  ret
0xffff7ab171e4   292  sub csp, jssp, #0x8 (8)
0xffff7ab171e8   296  str lr, [jssp, #-8]!
0xffff7ab171ec   300  ldr x17, pc+1484 (addr 0x0000ffff7ab177b8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab171f0   304  blr x17
0xffff7ab171f4   308  ldr lr, [jssp], #8
0xffff7ab171f8   312  ret
0xffff7ab171fc   316  ldp x1, x3, [jssp], #16
0xffff7ab17200   320  sub csp, jssp, #0x78 (120)
0xffff7ab17204   324  stp x14, x15, [jssp, #-32]!
0xffff7ab17208   328  stp x18, lr, [jssp, #16]
0xffff7ab1720c   332  stp x10, x11, [jssp, #-32]!
0xffff7ab17210   336  stp x12, x13, [jssp, #16]
0xffff7ab17214   340  stp x6, x7, [jssp, #-32]!
0xffff7ab17218   344  stp x8, x9, [jssp, #16]
0xffff7ab1721c   348  stp x1, x3, [jssp, #-24]!
0xffff7ab17220   352  str x5, [jssp, #16]
0xffff7ab17224   356  sub csp, jssp, #0xb0 (176)
0xffff7ab17228   360  stp d26, d27, [jssp, #-32]!
0xffff7ab1722c   364  stp d28, d29, [jssp, #16]
0xffff7ab17230   368  stp d22, d23, [jssp, #-32]!
0xffff7ab17234   372  stp d24, d25, [jssp, #16]
0xffff7ab17238   376  stp d18, d19, [jssp, #-32]!
0xffff7ab1723c   380  stp d20, d21, [jssp, #16]
0xffff7ab17240   384  stp d6, d7, [jssp, #-32]!
0xffff7ab17244   388  stp d16, d17, [jssp, #16]
0xffff7ab17248   392  stp d2, d3, [jssp, #-32]!
0xffff7ab1724c   396  stp d4, d5, [jssp, #16]
0xffff7ab17250   400  stp d0, d1, [jssp, #-16]!
0xffff7ab17254   404  mov x0, x1
0xffff7ab17258   408  mov x1, x3
0xffff7ab1725c   412  ldr x2, pc+1380 (addr 0x0000ffff7ab177c0)    ;; external reference (isolate)
0xffff7ab17260   416  ldr x16, pc+1384 (addr 0x0000ffff7ab177c8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab17264   420  and csp, jssp, #0xfffffffffffffff0
0xffff7ab17268   424  blr x16
0xffff7ab1726c   428  ldp d2, d3, [jssp, #16]
0xffff7ab17270   432  ldp d0, d1, [jssp], #32
0xffff7ab17274   436  ldp d6, d7, [jssp, #16]
0xffff7ab17278   440  ldp d4, d5, [jssp], #32
0xffff7ab1727c   444  ldp d18, d19, [jssp, #16]
0xffff7ab17280   448  ldp d16, d17, [jssp], #32
0xffff7ab17284   452  ldp d22, d23, [jssp, #16]
0xffff7ab17288   456  ldp d20, d21, [jssp], #32
0xffff7ab1728c   460  ldp d26, d27, [jssp, #16]
0xffff7ab17290   464  ldp d24, d25, [jssp], #32
0xffff7ab17294   468  ldp d28, d29, [jssp], #16
0xffff7ab17298   472  ldp x5, x6, [jssp, #16]
0xffff7ab1729c   476  ldp x1, x3, [jssp], #32
0xffff7ab172a0   480  ldp x9, x10, [jssp, #16]
0xffff7ab172a4   484  ldp x7, x8, [jssp], #32
0xffff7ab172a8   488  ldp x13, x14, [jssp, #16]
0xffff7ab172ac   492  ldp x11, x12, [jssp], #32
0xffff7ab172b0   496  ldr lr, [jssp, #16]
0xffff7ab172b4   500  ldp x15, x18, [jssp], #24
0xffff7ab172b8   504  ldp x4, x0, [jssp], #16
0xffff7ab172bc   508  ldr x16, pc+1300 (addr 0x0000ffff7ab177d0)    ;; external reference (store_buffer_top)
0xffff7ab172c0   512  ldr x2, [x16]
0xffff7ab172c4   516  str x3, [x2], #8
0xffff7ab172c8   520  str x2, [x16]
0xffff7ab172cc   524  tst x2, #0x1ffff
0xffff7ab172d0   528  b.eq #+0x8 (addr 0xffff7ab172d8)
0xffff7ab172d4   532  ret
0xffff7ab172d8   536  sub csp, jssp, #0x8 (8)
0xffff7ab172dc   540  str lr, [jssp, #-8]!
0xffff7ab172e0   544  ldr x17, pc+1272 (addr 0x0000ffff7ab177d8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab172e4   548  blr x17
0xffff7ab172e8   552  ldr lr, [jssp], #8
0xffff7ab172ec   556  ret
0xffff7ab172f0   560  and x2, x1, #0xfffffffffff00000
0xffff7ab172f4   564  ldr x0, [x2, #104]
0xffff7ab172f8   568  subs x0, x0, #0x1 (1)
0xffff7ab172fc   572  str x0, [x2, #104]
0xffff7ab17300   576  b.mi #+0x64 (addr 0xffff7ab17364)
0xffff7ab17304   580  ubfx x16, x1, #8, #12
0xffff7ab17308   584  and x2, x1, #0xfffffffffff00000
0xffff7ab1730c   588  add x2, x2, x16, lsl #2
0xffff7ab17310   592  ubfx x0, x1, #3, #5
0xffff7ab17314   596  ldr x2, [x2, #360]
0xffff7ab17318   600  lsr x2, x2, x0
0xffff7ab1731c   604  tbz w2, #0, #+0x8 (addr 0xffff7ab17324)
0xffff7ab17320   608  tbnz w2, #1, #+0xc (addr 0xffff7ab1732c)
0xffff7ab17324   612  ldp x4, x0, [jssp], #16
0xffff7ab17328   616  ret
0xffff7ab1732c   620  ldr x2, [x3]
0xffff7ab17330   624  sub csp, jssp, #0x10 (16)
0xffff7ab17334   628  stp x1, x3, [jssp, #-16]!
0xffff7ab17338   632  ubfx x16, x2, #8, #12
0xffff7ab1733c   636  and x0, x2, #0xfffffffffff00000
0xffff7ab17340   640  add x0, x0, x16, lsl #2
0xffff7ab17344   644  ubfx x1, x2, #3, #5
0xffff7ab17348   648  ldr x3, [x0, #360]
0xffff7ab1734c   652  lsr x3, x3, x1
0xffff7ab17350   656  tbz w3, #0, #+0x10 (addr 0xffff7ab17360)
0xffff7ab17354   660  ldp x1, x3, [jssp], #16
0xffff7ab17358   664  ldp x4, x0, [jssp], #16
0xffff7ab1735c   668  ret
0xffff7ab17360   672  ldp x1, x3, [jssp], #16
0xffff7ab17364   676  sub csp, jssp, #0x78 (120)
0xffff7ab17368   680  stp x14, x15, [jssp, #-32]!
0xffff7ab1736c   684  stp x18, lr, [jssp, #16]
0xffff7ab17370   688  stp x10, x11, [jssp, #-32]!
0xffff7ab17374   692  stp x12, x13, [jssp, #16]
0xffff7ab17378   696  stp x6, x7, [jssp, #-32]!
0xffff7ab1737c   700  stp x8, x9, [jssp, #16]
0xffff7ab17380   704  stp x1, x3, [jssp, #-24]!
0xffff7ab17384   708  str x5, [jssp, #16]
0xffff7ab17388   712  sub csp, jssp, #0xb0 (176)
0xffff7ab1738c   716  stp d26, d27, [jssp, #-32]!
0xffff7ab17390   720  stp d28, d29, [jssp, #16]
0xffff7ab17394   724  stp d22, d23, [jssp, #-32]!
0xffff7ab17398   728  stp d24, d25, [jssp, #16]
0xffff7ab1739c   732  stp d18, d19, [jssp, #-32]!
0xffff7ab173a0   736  stp d20, d21, [jssp, #16]
0xffff7ab173a4   740  stp d6, d7, [jssp, #-32]!
0xffff7ab173a8   744  stp d16, d17, [jssp, #16]
0xffff7ab173ac   748  stp d2, d3, [jssp, #-32]!
0xffff7ab173b0   752  stp d4, d5, [jssp, #16]
0xffff7ab173b4   756  stp d0, d1, [jssp, #-16]!
0xffff7ab173b8   760  mov x0, x1
0xffff7ab173bc   764  mov x1, x3
0xffff7ab173c0   768  ldr x2, pc+1056 (addr 0x0000ffff7ab177e0)    ;; external reference (isolate)
0xffff7ab173c4   772  ldr x16, pc+1060 (addr 0x0000ffff7ab177e8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab173c8   776  and csp, jssp, #0xfffffffffffffff0
0xffff7ab173cc   780  blr x16
0xffff7ab173d0   784  ldp d2, d3, [jssp, #16]
0xffff7ab173d4   788  ldp d0, d1, [jssp], #32
0xffff7ab173d8   792  ldp d6, d7, [jssp, #16]
0xffff7ab173dc   796  ldp d4, d5, [jssp], #32
0xffff7ab173e0   800  ldp d18, d19, [jssp, #16]
0xffff7ab173e4   804  ldp d16, d17, [jssp], #32
0xffff7ab173e8   808  ldp d22, d23, [jssp, #16]
0xffff7ab173ec   812  ldp d20, d21, [jssp], #32
0xffff7ab173f0   816  ldp d26, d27, [jssp, #16]
0xffff7ab173f4   820  ldp d24, d25, [jssp], #32
0xffff7ab173f8   824  ldp d28, d29, [jssp], #16
0xffff7ab173fc   828  ldp x5, x6, [jssp, #16]
0xffff7ab17400   832  ldp x1, x3, [jssp], #32
0xffff7ab17404   836  ldp x9, x10, [jssp, #16]
0xffff7ab17408   840  ldp x7, x8, [jssp], #32
0xffff7ab1740c   844  ldp x13, x14, [jssp, #16]
0xffff7ab17410   848  ldp x11, x12, [jssp], #32
0xffff7ab17414   852  ldr lr, [jssp, #16]
0xffff7ab17418   856  ldp x15, x18, [jssp], #24
0xffff7ab1741c   860  ldp x4, x0, [jssp], #16
0xffff7ab17420   864  ret
0xffff7ab17424   868  sub csp, jssp, #0x10 (16)
0xffff7ab17428   872  stp x4, x0, [jssp, #-16]!
0xffff7ab1742c   876  ldr x2, [x3]
0xffff7ab17430   880  and x16, x2, #0xfffffffffff00000
0xffff7ab17434   884  ldr x16, [x16, #8]
0xffff7ab17438   888  tst x16, #0x18
0xffff7ab1743c   892  b.eq #+0x1f8 (addr 0xffff7ab17634)
0xffff7ab17440   896  and x16, x1, #0xfffffffffff00000
0xffff7ab17444   900  ldr x16, [x16, #8]
0xffff7ab17448   904  tst x16, #0x18
0xffff7ab1744c   908  b.ne #+0x1e8 (addr 0xffff7ab17634)
0xffff7ab17450   912  and x2, x1, #0xfffffffffff00000
0xffff7ab17454   916  ldr x0, [x2, #104]
0xffff7ab17458   920  subs x0, x0, #0x1 (1)
0xffff7ab1745c   924  str x0, [x2, #104]
0xffff7ab17460   928  b.mi #+0xe4 (addr 0xffff7ab17544)
0xffff7ab17464   932  ubfx x16, x1, #8, #12
0xffff7ab17468   936  and x2, x1, #0xfffffffffff00000
0xffff7ab1746c   940  add x2, x2, x16, lsl #2
0xffff7ab17470   944  ubfx x0, x1, #3, #5
0xffff7ab17474   948  ldr x2, [x2, #360]
0xffff7ab17478   952  lsr x2, x2, x0
0xffff7ab1747c   956  tbz w2, #0, #+0x8 (addr 0xffff7ab17484)
0xffff7ab17480   960  tbnz w2, #1, #+0x3c (addr 0xffff7ab174bc)
0xffff7ab17484   964  ldp x4, x0, [jssp], #16
0xffff7ab17488   968  ldr x16, pc+872 (addr 0x0000ffff7ab177f0)    ;; external reference (store_buffer_top)
0xffff7ab1748c   972  ldr x2, [x16]
0xffff7ab17490   976  str x3, [x2], #8
0xffff7ab17494   980  str x2, [x16]
0xffff7ab17498   984  tst x2, #0x1ffff
0xffff7ab1749c   988  b.eq #+0x8 (addr 0xffff7ab174a4)
0xffff7ab174a0   992  ret
0xffff7ab174a4   996  sub csp, jssp, #0x8 (8)
0xffff7ab174a8  1000  str lr, [jssp, #-8]!
0xffff7ab174ac  1004  ldr x17, pc+844 (addr 0x0000ffff7ab177f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab174b0  1008  blr x17
0xffff7ab174b4  1012  ldr lr, [jssp], #8
0xffff7ab174b8  1016  ret
0xffff7ab174bc  1020  ldr x2, [x3]
0xffff7ab174c0  1024  and x0, x2, #0xfffffffffff00000
0xffff7ab174c4  1028  ldr x0, [x0, #8]
0xffff7ab174c8  1032  tbz w0, #6, #+0x18 (addr 0xffff7ab174e0)
0xffff7ab174cc  1036  and x0, x1, #0xfffffffffff00000
0xffff7ab174d0  1040  ldr x0, [x0, #8]
0xffff7ab174d4  1044  movz x16, #0x58
0xffff7ab174d8  1048  tst x0, x16
0xffff7ab174dc  1052  b.eq #+0x68 (addr 0xffff7ab17544)
0xffff7ab174e0  1056  sub csp, jssp, #0x10 (16)
0xffff7ab174e4  1060  stp x1, x3, [jssp, #-16]!
0xffff7ab174e8  1064  ubfx x16, x2, #8, #12
0xffff7ab174ec  1068  and x0, x2, #0xfffffffffff00000
0xffff7ab174f0  1072  add x0, x0, x16, lsl #2
0xffff7ab174f4  1076  ubfx x1, x2, #3, #5
0xffff7ab174f8  1080  ldr x3, [x0, #360]
0xffff7ab174fc  1084  lsr x3, x3, x1
0xffff7ab17500  1088  tbz w3, #0, #+0x40 (addr 0xffff7ab17540)
0xffff7ab17504  1092  ldp x1, x3, [jssp], #16
0xffff7ab17508  1096  ldp x4, x0, [jssp], #16
0xffff7ab1750c  1100  ldr x16, pc+756 (addr 0x0000ffff7ab17800)    ;; external reference (store_buffer_top)
0xffff7ab17510  1104  ldr x2, [x16]
0xffff7ab17514  1108  str x3, [x2], #8
0xffff7ab17518  1112  str x2, [x16]
0xffff7ab1751c  1116  tst x2, #0x1ffff
0xffff7ab17520  1120  b.eq #+0x8 (addr 0xffff7ab17528)
0xffff7ab17524  1124  ret
0xffff7ab17528  1128  sub csp, jssp, #0x8 (8)
0xffff7ab1752c  1132  str lr, [jssp, #-8]!
0xffff7ab17530  1136  ldr x17, pc+728 (addr 0x0000ffff7ab17808)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab17534  1140  blr x17
0xffff7ab17538  1144  ldr lr, [jssp], #8
0xffff7ab1753c  1148  ret
0xffff7ab17540  1152  ldp x1, x3, [jssp], #16
0xffff7ab17544  1156  sub csp, jssp, #0x78 (120)
0xffff7ab17548  1160  stp x14, x15, [jssp, #-32]!
0xffff7ab1754c  1164  stp x18, lr, [jssp, #16]
0xffff7ab17550  1168  stp x10, x11, [jssp, #-32]!
0xffff7ab17554  1172  stp x12, x13, [jssp, #16]
0xffff7ab17558  1176  stp x6, x7, [jssp, #-32]!
0xffff7ab1755c  1180  stp x8, x9, [jssp, #16]
0xffff7ab17560  1184  stp x1, x3, [jssp, #-24]!
0xffff7ab17564  1188  str x5, [jssp, #16]
0xffff7ab17568  1192  sub csp, jssp, #0xb0 (176)
0xffff7ab1756c  1196  stp d26, d27, [jssp, #-32]!
0xffff7ab17570  1200  stp d28, d29, [jssp, #16]
0xffff7ab17574  1204  stp d22, d23, [jssp, #-32]!
0xffff7ab17578  1208  stp d24, d25, [jssp, #16]
0xffff7ab1757c  1212  stp d18, d19, [jssp, #-32]!
0xffff7ab17580  1216  stp d20, d21, [jssp, #16]
0xffff7ab17584  1220  stp d6, d7, [jssp, #-32]!
0xffff7ab17588  1224  stp d16, d17, [jssp, #16]
0xffff7ab1758c  1228  stp d2, d3, [jssp, #-32]!
0xffff7ab17590  1232  stp d4, d5, [jssp, #16]
0xffff7ab17594  1236  stp d0, d1, [jssp, #-16]!
0xffff7ab17598  1240  mov x0, x1
0xffff7ab1759c  1244  mov x1, x3
0xffff7ab175a0  1248  ldr x2, pc+624 (addr 0x0000ffff7ab17810)    ;; external reference (isolate)
0xffff7ab175a4  1252  ldr x16, pc+628 (addr 0x0000ffff7ab17818)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab175a8  1256  and csp, jssp, #0xfffffffffffffff0
0xffff7ab175ac  1260  blr x16
0xffff7ab175b0  1264  ldp d2, d3, [jssp, #16]
0xffff7ab175b4  1268  ldp d0, d1, [jssp], #32
0xffff7ab175b8  1272  ldp d6, d7, [jssp, #16]
0xffff7ab175bc  1276  ldp d4, d5, [jssp], #32
0xffff7ab175c0  1280  ldp d18, d19, [jssp, #16]
0xffff7ab175c4  1284  ldp d16, d17, [jssp], #32
0xffff7ab175c8  1288  ldp d22, d23, [jssp, #16]
0xffff7ab175cc  1292  ldp d20, d21, [jssp], #32
0xffff7ab175d0  1296  ldp d26, d27, [jssp, #16]
0xffff7ab175d4  1300  ldp d24, d25, [jssp], #32
0xffff7ab175d8  1304  ldp d28, d29, [jssp], #16
0xffff7ab175dc  1308  ldp x5, x6, [jssp, #16]
0xffff7ab175e0  1312  ldp x1, x3, [jssp], #32
0xffff7ab175e4  1316  ldp x9, x10, [jssp, #16]
0xffff7ab175e8  1320  ldp x7, x8, [jssp], #32
0xffff7ab175ec  1324  ldp x13, x14, [jssp, #16]
0xffff7ab175f0  1328  ldp x11, x12, [jssp], #32
0xffff7ab175f4  1332  ldr lr, [jssp, #16]
0xffff7ab175f8  1336  ldp x15, x18, [jssp], #24
0xffff7ab175fc  1340  ldp x4, x0, [jssp], #16
0xffff7ab17600  1344  ldr x16, pc+544 (addr 0x0000ffff7ab17820)    ;; external reference (store_buffer_top)
0xffff7ab17604  1348  ldr x2, [x16]
0xffff7ab17608  1352  str x3, [x2], #8
0xffff7ab1760c  1356  str x2, [x16]
0xffff7ab17610  1360  tst x2, #0x1ffff
0xffff7ab17614  1364  b.eq #+0x8 (addr 0xffff7ab1761c)
0xffff7ab17618  1368  ret
0xffff7ab1761c  1372  sub csp, jssp, #0x8 (8)
0xffff7ab17620  1376  str lr, [jssp, #-8]!
0xffff7ab17624  1380  ldr x17, pc+516 (addr 0x0000ffff7ab17828)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab17628  1384  blr x17
0xffff7ab1762c  1388  ldr lr, [jssp], #8
0xffff7ab17630  1392  ret
0xffff7ab17634  1396  and x2, x1, #0xfffffffffff00000
0xffff7ab17638  1400  ldr x0, [x2, #104]
0xffff7ab1763c  1404  subs x0, x0, #0x1 (1)
0xffff7ab17640  1408  str x0, [x2, #104]
0xffff7ab17644  1412  b.mi #+0x84 (addr 0xffff7ab176c8)
0xffff7ab17648  1416  ubfx x16, x1, #8, #12
0xffff7ab1764c  1420  and x2, x1, #0xfffffffffff00000
0xffff7ab17650  1424  add x2, x2, x16, lsl #2
0xffff7ab17654  1428  ubfx x0, x1, #3, #5
0xffff7ab17658  1432  ldr x2, [x2, #360]
0xffff7ab1765c  1436  lsr x2, x2, x0
0xffff7ab17660  1440  tbz w2, #0, #+0x8 (addr 0xffff7ab17668)
0xffff7ab17664  1444  tbnz w2, #1, #+0xc (addr 0xffff7ab17670)
0xffff7ab17668  1448  ldp x4, x0, [jssp], #16
0xffff7ab1766c  1452  ret
0xffff7ab17670  1456  ldr x2, [x3]
0xffff7ab17674  1460  and x0, x2, #0xfffffffffff00000
0xffff7ab17678  1464  ldr x0, [x0, #8]
0xffff7ab1767c  1468  tbz w0, #6, #+0x18 (addr 0xffff7ab17694)
0xffff7ab17680  1472  and x0, x1, #0xfffffffffff00000
0xffff7ab17684  1476  ldr x0, [x0, #8]
0xffff7ab17688  1480  movz x16, #0x58
0xffff7ab1768c  1484  tst x0, x16
0xffff7ab17690  1488  b.eq #+0x38 (addr 0xffff7ab176c8)
0xffff7ab17694  1492  sub csp, jssp, #0x10 (16)
0xffff7ab17698  1496  stp x1, x3, [jssp, #-16]!
0xffff7ab1769c  1500  ubfx x16, x2, #8, #12
0xffff7ab176a0  1504  and x0, x2, #0xfffffffffff00000
0xffff7ab176a4  1508  add x0, x0, x16, lsl #2
0xffff7ab176a8  1512  ubfx x1, x2, #3, #5
0xffff7ab176ac  1516  ldr x3, [x0, #360]
0xffff7ab176b0  1520  lsr x3, x3, x1
0xffff7ab176b4  1524  tbz w3, #0, #+0x10 (addr 0xffff7ab176c4)
0xffff7ab176b8  1528  ldp x1, x3, [jssp], #16
0xffff7ab176bc  1532  ldp x4, x0, [jssp], #16
0xffff7ab176c0  1536  ret
0xffff7ab176c4  1540  ldp x1, x3, [jssp], #16
0xffff7ab176c8  1544  sub csp, jssp, #0x78 (120)
0xffff7ab176cc  1548  stp x14, x15, [jssp, #-32]!
0xffff7ab176d0  1552  stp x18, lr, [jssp, #16]
0xffff7ab176d4  1556  stp x10, x11, [jssp, #-32]!
0xffff7ab176d8  1560  stp x12, x13, [jssp, #16]
0xffff7ab176dc  1564  stp x6, x7, [jssp, #-32]!
0xffff7ab176e0  1568  stp x8, x9, [jssp, #16]
0xffff7ab176e4  1572  stp x1, x3, [jssp, #-24]!
0xffff7ab176e8  1576  str x5, [jssp, #16]
0xffff7ab176ec  1580  sub csp, jssp, #0xb0 (176)
0xffff7ab176f0  1584  stp d26, d27, [jssp, #-32]!
0xffff7ab176f4  1588  stp d28, d29, [jssp, #16]
0xffff7ab176f8  1592  stp d22, d23, [jssp, #-32]!
0xffff7ab176fc  1596  stp d24, d25, [jssp, #16]
0xffff7ab17700  1600  stp d18, d19, [jssp, #-32]!
0xffff7ab17704  1604  stp d20, d21, [jssp, #16]
0xffff7ab17708  1608  stp d6, d7, [jssp, #-32]!
0xffff7ab1770c  1612  stp d16, d17, [jssp, #16]
0xffff7ab17710  1616  stp d2, d3, [jssp, #-32]!
0xffff7ab17714  1620  stp d4, d5, [jssp, #16]
0xffff7ab17718  1624  stp d0, d1, [jssp, #-16]!
0xffff7ab1771c  1628  mov x0, x1
0xffff7ab17720  1632  mov x1, x3
0xffff7ab17724  1636  ldr x2, pc+268 (addr 0x0000ffff7ab17830)    ;; external reference (isolate)
0xffff7ab17728  1640  ldr x16, pc+272 (addr 0x0000ffff7ab17838)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab1772c  1644  and csp, jssp, #0xfffffffffffffff0
0xffff7ab17730  1648  blr x16
0xffff7ab17734  1652  ldp d2, d3, [jssp, #16]
0xffff7ab17738  1656  ldp d0, d1, [jssp], #32
0xffff7ab1773c  1660  ldp d6, d7, [jssp, #16]
0xffff7ab17740  1664  ldp d4, d5, [jssp], #32
0xffff7ab17744  1668  ldp d18, d19, [jssp, #16]
0xffff7ab17748  1672  ldp d16, d17, [jssp], #32
0xffff7ab1774c  1676  ldp d22, d23, [jssp, #16]
0xffff7ab17750  1680  ldp d20, d21, [jssp], #32
0xffff7ab17754  1684  ldp d26, d27, [jssp, #16]
0xffff7ab17758  1688  ldp d24, d25, [jssp], #32
0xffff7ab1775c  1692  ldp d28, d29, [jssp], #16
0xffff7ab17760  1696  ldp x5, x6, [jssp, #16]
0xffff7ab17764  1700  ldp x1, x3, [jssp], #32
0xffff7ab17768  1704  ldp x9, x10, [jssp, #16]
0xffff7ab1776c  1708  ldp x7, x8, [jssp], #32
0xffff7ab17770  1712  ldp x13, x14, [jssp, #16]
0xffff7ab17774  1716  ldp x11, x12, [jssp], #32
0xffff7ab17778  1720  ldr lr, [jssp, #16]
0xffff7ab1777c  1724  ldp x15, x18, [jssp], #24
0xffff7ab17780  1728  ldp x4, x0, [jssp], #16
0xffff7ab17784  1732  ret
0xffff7ab17788  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab1778c  1740  d63f03e0       constant
0xffff7ab17790  1744  09abe8c0       constant
0xffff7ab17794  1748  00000000       constant
0xffff7ab17798  1752  7ab065a0       constant
0xffff7ab1779c  1756  0000ffff       constant
0xffff7ab177a0  1760  09abe8c0       constant
0xffff7ab177a4  1764  00000000       constant
0xffff7ab177a8  1768  7ab065a0       constant
0xffff7ab177ac  1772  0000ffff       constant
0xffff7ab177b0  1776  09abe8c0       constant
0xffff7ab177b4  1780  00000000       constant
0xffff7ab177b8  1784  7ab065a0       constant
0xffff7ab177bc  1788  0000ffff       constant
0xffff7ab177c0  1792  09abd2d0       constant
0xffff7ab177c4  1796  00000000       constant
0xffff7ab177c8  1800  00c2d958       constant
0xffff7ab177cc  1804  00000000       constant
0xffff7ab177d0  1808  09abe8c0       constant
0xffff7ab177d4  1812  00000000       constant
0xffff7ab177d8  1816  7ab065a0       constant
0xffff7ab177dc  1820  0000ffff       constant
0xffff7ab177e0  1824  09abd2d0       constant
0xffff7ab177e4  1828  00000000       constant
0xffff7ab177e8  1832  00c2d958       constant
0xffff7ab177ec  1836  00000000       constant
0xffff7ab177f0  1840  09abe8c0       constant
0xffff7ab177f4  1844  00000000       constant
0xffff7ab177f8  1848  7ab065a0       constant
0xffff7ab177fc  1852  0000ffff       constant
0xffff7ab17800  1856  09abe8c0       constant
0xffff7ab17804  1860  00000000       constant
0xffff7ab17808  1864  7ab065a0       constant
0xffff7ab1780c  1868  0000ffff       constant
0xffff7ab17810  1872  09abd2d0       constant
0xffff7ab17814  1876  00000000       constant
0xffff7ab17818  1880  00c2d958       constant
0xffff7ab1781c  1884  00000000       constant
0xffff7ab17820  1888  09abe8c0       constant
0xffff7ab17824  1892  00000000       constant
0xffff7ab17828  1896  7ab065a0       constant
0xffff7ab1782c  1900  0000ffff       constant
0xffff7ab17830  1904  09abd2d0       constant
0xffff7ab17834  1908  00000000       constant
0xffff7ab17838  1912  00c2d958       constant
0xffff7ab1783c  1916  00000000       constant


RelocInfo (size = 65)
0xffff7ab170c8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab170ec  code target (STUB)  (0xffff7ab065a0)
0xffff7ab17164  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab17188  code target (STUB)  (0xffff7ab065a0)
0xffff7ab171c8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab171ec  code target (STUB)  (0xffff7ab065a0)
0xffff7ab1725c  external reference (isolate)  (0x9abd2d0)
0xffff7ab17260  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab172bc  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab172e0  code target (STUB)  (0xffff7ab065a0)
0xffff7ab173c0  external reference (isolate)  (0x9abd2d0)
0xffff7ab173c4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab17488  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab174ac  code target (STUB)  (0xffff7ab065a0)
0xffff7ab1750c  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab17530  code target (STUB)  (0xffff7ab065a0)
0xffff7ab175a0  external reference (isolate)  (0x9abd2d0)
0xffff7ab175a4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab17600  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab17624  code target (STUB)  (0xffff7ab065a0)
0xffff7ab17724  external reference (isolate)  (0x9abd2d0)
0xffff7ab17728  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab17788  constant pool (size 184)


kind = STUB
major_key = DoubleToIStub
name = DoubleToIStub
compiler = unknown
Instructions (size = 60)
0xffff7ab178a0     0  sub csp, jssp, #0x10 (16)
0xffff7ab178a4     4  stp x1, x0, [jssp, #-16]!
0xffff7ab178a8     8  ldur x9, [x2, #7]
0xffff7ab178ac    12  ubfx x0, x9, #52, #11
0xffff7ab178b0    16  cmp x0, #0x453 (1107)
0xffff7ab178b4    20  csel x9, xzr, x9, ge
0xffff7ab178b8    24  b.ge #+0x1c (addr 0xffff7ab178d4)
0xffff7ab178bc    28  ubfx x1, x9, #0, #52
0xffff7ab178c0    32  orr x1, x1, #0x10000000000000
0xffff7ab178c4    36  tst x9, #0x8000000000000000
0xffff7ab178c8    40  cneg x1, x1, ne
0xffff7ab178cc    44  sub x0, x0, #0x433 (1075)
0xffff7ab178d0    48  lsl x9, x1, x0
0xffff7ab178d4    52  ldp x1, x0, [jssp], #16
0xffff7ab178d8    56  ret


RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 893)
0xffff7ab17940     0  ldur x5, [x1, #15]
0xffff7ab17944     4  ldur x6, [x5, #-1]
0xffff7ab17948     8  ldr x16, pc+648 (addr 0x0000ffff7ab17bd0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab1794c    12  cmp x6, x16
0xffff7ab17950    16  b.ne #+0x2c8 (addr 0xffff7ab17c18)
0xffff7ab17954    20  ldur w6, [x5, #11]
0xffff7ab17958    24  tbnz w2, #0, #+0x140 (addr 0xffff7ab17a98)
0xffff7ab1795c    28  asr x8, x2, #32
0xffff7ab17960    32  cmp w6, w8
0xffff7ab17964    36  b.le #+0x10 (addr 0xffff7ab17974)
0xffff7ab17968    40  cmp w8, w6
0xffff7ab1796c    44  b.hs #+0x2bc (addr 0xffff7ab17c28)
0xffff7ab17970    48  b #+0xe4 (addr 0xffff7ab17a54)
0xffff7ab17974    52  cmp w6, w8
0xffff7ab17978    56  b.gt #+0xdc (addr 0xffff7ab17a54)
0xffff7ab1797c    60  adds w7, w6, #0x400 (1024)
0xffff7ab17980    64  b.vs #+0x2b8 (addr 0xffff7ab17c38)
0xffff7ab17984    68  cmp w8, w7
0xffff7ab17988    72  b.hs #+0x2c0 (addr 0xffff7ab17c48)
0xffff7ab1798c    76  tbnz w2, #0, #+0x154 (addr 0xffff7ab17ae0)
0xffff7ab17990    80  asr x9, x2, #32
0xffff7ab17994    84  add w7, w8, w9, lsr #1
0xffff7ab17998    88  add w7, w7, #0x10 (16)
0xffff7ab1799c    92  movz w16, #0x95ff
0xffff7ab179a0    96  cmp w7, w16, lsl #1
0xffff7ab179a4   100  b.hs #+0x2b4 (addr 0xffff7ab17c58)
0xffff7ab179a8   104  lsl x2, x7, #32
0xffff7ab179ac   108  lsl w3, w7, #3
0xffff7ab179b0   112  add w3, w3, #0x10 (16)
0xffff7ab179b4   116  sxtw x3, w3
0xffff7ab179b8   120  movz x4, #0xe2c0
0xffff7ab179bc   124  movk x4, #0x9ab, lsl #16
0xffff7ab179c0   128  ldp x9, x16, [x4]
0xffff7ab179c4   132  adds x7, x9, x3
0xffff7ab179c8   136  ccmp x7, x16, #nzCv, lo
0xffff7ab179cc   140  b.hi #+0x194 (addr 0xffff7ab17b60)
0xffff7ab179d0   144  str x7, [x4]
0xffff7ab179d4   148  orr x9, x9, #0x1
0xffff7ab179d8   152  ldr x3, pc+512 (addr 0x0000ffff7ab17bd8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab179dc   156  stur x3, [x9, #-1]
0xffff7ab179e0   160  stur x2, [x9, #7]
0xffff7ab179e4   164  ldur w2, [x9, #11]
0xffff7ab179e8   168  cmp w6, w2
0xffff7ab179ec   172  b.ge #+0x18 (addr 0xffff7ab17a04)
0xffff7ab179f0   176  sub w2, w2, #0x1 (1)
0xffff7ab179f4   180  ldr x3, pc+492 (addr 0x0000ffff7ab17be0)    ;; object: 0x20d04519 <the hole>
0xffff7ab179f8   184  add x4, x9, #0xf (15)
0xffff7ab179fc   188  str x3, [x4, w2, sxtw #3]
0xffff7ab17a00   192  b #-0x18 (addr 0xffff7ab179e8)
0xffff7ab17a04   196  cmp w6, #0x0 (0)
0xffff7ab17a08   200  b.le #+0x1c (addr 0xffff7ab17a24)
0xffff7ab17a0c   204  sub w6, w6, #0x1 (1)
0xffff7ab17a10   208  add x2, x5, #0xf (15)
0xffff7ab17a14   212  ldr x3, [x2, w6, sxtw #3]
0xffff7ab17a18   216  add x2, x9, #0xf (15)
0xffff7ab17a1c   220  str x3, [x2, w6, sxtw #3]
0xffff7ab17a20   224  b #-0x1c (addr 0xffff7ab17a04)
0xffff7ab17a24   228  mov x2, x9
0xffff7ab17a28   232  stur x2, [x1, #15]
0xffff7ab17a2c   236  add x3, x1, #0xf (15)
0xffff7ab17a30   240  and x2, x1, #0xfffffffffff00000
0xffff7ab17a34   244  ldr x2, [x2, #8]
0xffff7ab17a38   248  tbz w2, #2, #+0x18 (addr 0xffff7ab17a50)
0xffff7ab17a3c   252  sub csp, jssp, #0x8 (8)
0xffff7ab17a40   256  str lr, [jssp, #-8]!
0xffff7ab17a44   260  ldr x16, pc+420 (addr 0x0000ffff7ab17be8)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab17a48   264  blr x16
0xffff7ab17a4c   268  ldr lr, [jssp], #8
0xffff7ab17a50   272  mov x5, x9
0xffff7ab17a54   276  mov x1, x0
0xffff7ab17a58   280  add x2, x5, #0xf (15)
0xffff7ab17a5c   284  str x1, [x2, w8, sxtw #3]
0xffff7ab17a60   288  add x2, x2, w8, sxtw #3
0xffff7ab17a64   292  tbz w1, #0, #+0x30 (addr 0xffff7ab17a94)
0xffff7ab17a68   296  and x1, x1, #0xfffffffffff00000
0xffff7ab17a6c   300  ldr x1, [x1, #8]
0xffff7ab17a70   304  tbz w1, #1, #+0x24 (addr 0xffff7ab17a94)
0xffff7ab17a74   308  and x1, x5, #0xfffffffffff00000
0xffff7ab17a78   312  ldr x1, [x1, #8]
0xffff7ab17a7c   316  tbz w1, #2, #+0x18 (addr 0xffff7ab17a94)
0xffff7ab17a80   320  sub csp, jssp, #0x8 (8)
0xffff7ab17a84   324  str lr, [jssp, #-8]!
0xffff7ab17a88   328  ldr x16, pc+360 (addr 0x0000ffff7ab17bf0)    ;; code: STUB, RecordWriteStub, minor: 67621
0xffff7ab17a8c   332  blr x16
0xffff7ab17a90   336  ldr lr, [jssp], #8
0xffff7ab17a94   340  ret
0xffff7ab17a98   344  sub csp, jssp, #0x10 (16)
0xffff7ab17a9c   348  stp fp, lr, [jssp, #-16]!
0xffff7ab17aa0   352  movz fp, #0xa00000000
0xffff7ab17aa4   356  sub csp, jssp, #0x8 (8)
0xffff7ab17aa8   360  str fp, [jssp, #-8]!
0xffff7ab17aac   364  add fp, jssp, #0x8 (8)
0xffff7ab17ab0   368  ldur x16, [x2, #-1]
0xffff7ab17ab4   372  ldr x17, [x26, #120]
0xffff7ab17ab8   376  cmp x16, x17
0xffff7ab17abc   380  b.ne #+0x1ac (addr 0xffff7ab17c68)
0xffff7ab17ac0   384  ldur d29, [x2, #7]
0xffff7ab17ac4   388  fcvtzs w8, d29
0xffff7ab17ac8   392  scvtf d0, w8
0xffff7ab17acc   396  fcmp d29, d0
0xffff7ab17ad0   400  b.ne #+0x198 (addr 0xffff7ab17c68)
0xffff7ab17ad4   404  ldr lr, [jssp, #16]
0xffff7ab17ad8   408  ldp xzr, fp, [jssp], #24
0xffff7ab17adc   412  b #-0x17c (addr 0xffff7ab17960)
0xffff7ab17ae0   416  sub csp, jssp, #0x10 (16)
0xffff7ab17ae4   420  stp fp, lr, [jssp, #-16]!
0xffff7ab17ae8   424  movz fp, #0xa00000000
0xffff7ab17aec   428  sub csp, jssp, #0x8 (8)
0xffff7ab17af0   432  str fp, [jssp, #-8]!
0xffff7ab17af4   436  add fp, jssp, #0x8 (8)
0xffff7ab17af8   440  ldur x16, [x2, #-1]
0xffff7ab17afc   444  ldr x17, [x26, #120]
0xffff7ab17b00   448  cmp x16, x17
0xffff7ab17b04   452  b.ne #+0x30 (addr 0xffff7ab17b34)
0xffff7ab17b08   456  ldur d30, [x2, #7]
0xffff7ab17b0c   460  fcvtzs x9, d30
0xffff7ab17b10   464  cmp x9, #0x1 (1)
0xffff7ab17b14   468  ccmn x9, #1, #nzcV, vc
0xffff7ab17b18   472  b.vc #+0x18 (addr 0xffff7ab17b30)
0xffff7ab17b1c   476  sub csp, jssp, #0x8 (8)
0xffff7ab17b20   480  str lr, [jssp, #-8]!
0xffff7ab17b24   484  ldr x16, pc+212 (addr 0x0000ffff7ab17bf8)    ;; code: STUB, DoubleToIStub, minor: 127554
0xffff7ab17b28   488  blr x16
0xffff7ab17b2c   492  ldr lr, [jssp], #8
0xffff7ab17b30   496  b #+0x24 (addr 0xffff7ab17b54)
0xffff7ab17b34   500  ldp x9, x7, [x26, #64]
0xffff7ab17b38   504  cmp x2, x9
0xffff7ab17b3c   508  cset x9, eq
0xffff7ab17b40   512  ccmp x2, x7, #nZcv, ne
0xffff7ab17b44   516  b.eq #+0x10 (addr 0xffff7ab17b54)
0xffff7ab17b48   520  ldr x16, [x26, #40]
0xffff7ab17b4c   524  cmp x2, x16
0xffff7ab17b50   528  b.ne #+0x120 (addr 0xffff7ab17c70)
0xffff7ab17b54   532  ldr lr, [jssp, #16]
0xffff7ab17b58   536  ldp xzr, fp, [jssp], #24
0xffff7ab17b5c   540  b #-0x1c8 (addr 0xffff7ab17994)
0xffff7ab17b60   544  sub csp, jssp, #0x10 (16)
0xffff7ab17b64   548  stp fp, lr, [jssp, #-16]!
0xffff7ab17b68   552  movz fp, #0xa00000000
0xffff7ab17b6c   556  sub csp, jssp, #0x8 (8)
0xffff7ab17b70   560  str fp, [jssp, #-8]!
0xffff7ab17b74   564  add fp, jssp, #0x8 (8)
0xffff7ab17b78   568  movz x9, #0x0
0xffff7ab17b7c   572  mov x16, lr
0xffff7ab17b80   576  ldr x17, pc+128 (addr 0x0000ffff7ab17c00)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab17b84   580  blr x17
0xffff7ab17b88   584  lsl x0, x3, #32
0xffff7ab17b8c   588  movz x10, #0x0
0xffff7ab17b90   592  sub csp, jssp, #0x10 (16)
0xffff7ab17b94   596  stp x10, x0, [jssp, #-16]!
0xffff7ab17b98   600  movz x0, #0x2
0xffff7ab17b9c   604  movz x1, #0x5b88
0xffff7ab17ba0   608  movk x1, #0xe2, lsl #16
0xffff7ab17ba4   612  ldr x16, pc+100 (addr 0x0000ffff7ab17c08)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab17ba8   616  blr x16
0xffff7ab17bac   620  str x0, [jssp, #72]
0xffff7ab17bb0   624  ldr x16, pc+96 (addr 0x0000ffff7ab17c10)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab17bb4   628  blr x16
0xffff7ab17bb8   632  ldr lr, [jssp, #16]
0xffff7ab17bbc   636  ldp xzr, fp, [jssp], #24
0xffff7ab17bc0   640  b #-0x1e8 (addr 0xffff7ab179d8)
0xffff7ab17bc4   644  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0xffff7ab17bc8   648  d63f03e0       constant
0xffff7ab17bcc   652  d503201f       constant
0xffff7ab17bd0   656  4ec04259       constant
0xffff7ab17bd4   660  00000000       constant
0xffff7ab17bd8   664  4ec04259       constant
0xffff7ab17bdc   668  00000000       constant
0xffff7ab17be0   672  20d04519       constant
0xffff7ab17be4   676  00000000       constant
0xffff7ab17be8   680  7ab170c0       constant
0xffff7ab17bec   684  0000ffff       constant
0xffff7ab17bf0   688  7ab16760       constant
0xffff7ab17bf4   692  0000ffff       constant
0xffff7ab17bf8   696  7ab178a0       constant
0xffff7ab17bfc   700  0000ffff       constant
0xffff7ab17c00   704  7ab06820       constant
0xffff7ab17c04   708  0000ffff       constant
0xffff7ab17c08   712  7ab06260       constant
0xffff7ab17c0c   716  0000ffff       constant
0xffff7ab17c10   720  7ab068e0       constant
0xffff7ab17c14   724  0000ffff       constant
0xffff7ab17c18   728  movz x16, #0x0
0xffff7ab17c1c   732  sub csp, jssp, #0x10 (16)
0xffff7ab17c20   736  stp fp, lr, [jssp, #-16]!
0xffff7ab17c24   740  bl #+0x54 (addr 0xffff7ab17c78)
0xffff7ab17c28   744  movz x16, #0x8
0xffff7ab17c2c   748  sub csp, jssp, #0x10 (16)
0xffff7ab17c30   752  stp fp, lr, [jssp, #-16]!
0xffff7ab17c34   756  bl #+0x44 (addr 0xffff7ab17c78)
0xffff7ab17c38   760  movz x16, #0x10
0xffff7ab17c3c   764  sub csp, jssp, #0x10 (16)
0xffff7ab17c40   768  stp fp, lr, [jssp, #-16]!
0xffff7ab17c44   772  bl #+0x34 (addr 0xffff7ab17c78)
0xffff7ab17c48   776  movz x16, #0x18
0xffff7ab17c4c   780  sub csp, jssp, #0x10 (16)
0xffff7ab17c50   784  stp fp, lr, [jssp, #-16]!
0xffff7ab17c54   788  bl #+0x24 (addr 0xffff7ab17c78)
0xffff7ab17c58   792  movz x16, #0x20
0xffff7ab17c5c   796  sub csp, jssp, #0x10 (16)
0xffff7ab17c60   800  stp fp, lr, [jssp, #-16]!
0xffff7ab17c64   804  bl #+0x14 (addr 0xffff7ab17c78)
0xffff7ab17c68   808  movz x16, #0x28
0xffff7ab17c6c   812  bl #+0x1c (addr 0xffff7ab17c88)
0xffff7ab17c70   816  movz x16, #0x30
0xffff7ab17c74   820  bl #+0x14 (addr 0xffff7ab17c88)
0xffff7ab17c78   824  movz x17, #0xa00000000
0xffff7ab17c7c   828  sub csp, jssp, #0x10 (16)
0xffff7ab17c80   832  stp x17, cp, [jssp, #-16]!
0xffff7ab17c84   836  add fp, jssp, #0x10 (16)
0xffff7ab17c88   840  ldr x17, pc+24 (addr 0x0000ffff7ab17ca0)    ;; lazy deoptimization bailout 0
0xffff7ab17c8c   844  add x17, x17, x16
0xffff7ab17c90   848  br x17
0xffff7ab17c94   852  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab17c98   856  d63f03e0       constant
0xffff7ab17c9c   860  d503201f       constant
0xffff7ab17ca0   864  7a906000       constant
0xffff7ab17ca4   868  0000ffff       constant


Safepoints (size = 21)
0xffff7ab17bac   620  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 35)
0xffff7ab17948  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab179d8  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab179f4  embedded object  (0x20d04519 <the hole>)
0xffff7ab17a44  code target (STUB)  (0xffff7ab170c0)
0xffff7ab17a88  code target (STUB)  (0xffff7ab16760)
0xffff7ab17b24  code target (STUB)  (0xffff7ab178a0)
0xffff7ab17b80  code target (STUB)  (0xffff7ab06820)
0xffff7ab17ba4  code target (STUB)  (0xffff7ab06260)
0xffff7ab17bb0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab17bc4  constant pool (size 84)
0xffff7ab17c88  runtime entry
0xffff7ab17c94  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 893)
0xffff7ab17940     0  ldur x5, [x1, #15]
0xffff7ab17944     4  ldur x6, [x5, #-1]
0xffff7ab17948     8  ldr x16, pc+648 (addr 0x0000ffff7ab17bd0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab1794c    12  cmp x6, x16
0xffff7ab17950    16  b.ne #+0x2c8 (addr 0xffff7ab17c18)
0xffff7ab17954    20  ldur w6, [x5, #11]
0xffff7ab17958    24  tbnz w2, #0, #+0x140 (addr 0xffff7ab17a98)
0xffff7ab1795c    28  asr x8, x2, #32
0xffff7ab17960    32  cmp w6, w8
0xffff7ab17964    36  b.le #+0x10 (addr 0xffff7ab17974)
0xffff7ab17968    40  cmp w8, w6
0xffff7ab1796c    44  b.hs #+0x2bc (addr 0xffff7ab17c28)
0xffff7ab17970    48  b #+0xe4 (addr 0xffff7ab17a54)
0xffff7ab17974    52  cmp w6, w8
0xffff7ab17978    56  b.gt #+0xdc (addr 0xffff7ab17a54)
0xffff7ab1797c    60  adds w7, w6, #0x400 (1024)
0xffff7ab17980    64  b.vs #+0x2b8 (addr 0xffff7ab17c38)
0xffff7ab17984    68  cmp w8, w7
0xffff7ab17988    72  b.hs #+0x2c0 (addr 0xffff7ab17c48)
0xffff7ab1798c    76  tbnz w2, #0, #+0x154 (addr 0xffff7ab17ae0)
0xffff7ab17990    80  asr x9, x2, #32
0xffff7ab17994    84  add w7, w8, w9, lsr #1
0xffff7ab17998    88  add w7, w7, #0x10 (16)
0xffff7ab1799c    92  movz w16, #0x95ff
0xffff7ab179a0    96  cmp w7, w16, lsl #1
0xffff7ab179a4   100  b.hs #+0x2b4 (addr 0xffff7ab17c58)
0xffff7ab179a8   104  lsl x2, x7, #32
0xffff7ab179ac   108  lsl w3, w7, #3
0xffff7ab179b0   112  add w3, w3, #0x10 (16)
0xffff7ab179b4   116  sxtw x3, w3
0xffff7ab179b8   120  movz x4, #0xe2c0
0xffff7ab179bc   124  movk x4, #0x9ab, lsl #16
0xffff7ab179c0   128  ldp x9, x16, [x4]
0xffff7ab179c4   132  adds x7, x9, x3
0xffff7ab179c8   136  ccmp x7, x16, #nzCv, lo
0xffff7ab179cc   140  b.hi #+0x194 (addr 0xffff7ab17b60)
0xffff7ab179d0   144  str x7, [x4]
0xffff7ab179d4   148  orr x9, x9, #0x1
0xffff7ab179d8   152  ldr x3, pc+512 (addr 0x0000ffff7ab17bd8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab179dc   156  stur x3, [x9, #-1]
0xffff7ab179e0   160  stur x2, [x9, #7]
0xffff7ab179e4   164  ldur w2, [x9, #11]
0xffff7ab179e8   168  cmp w6, w2
0xffff7ab179ec   172  b.ge #+0x18 (addr 0xffff7ab17a04)
0xffff7ab179f0   176  sub w2, w2, #0x1 (1)
0xffff7ab179f4   180  ldr x3, pc+492 (addr 0x0000ffff7ab17be0)    ;; object: 0x20d04519 <the hole>
0xffff7ab179f8   184  add x4, x9, #0xf (15)
0xffff7ab179fc   188  str x3, [x4, w2, sxtw #3]
0xffff7ab17a00   192  b #-0x18 (addr 0xffff7ab179e8)
0xffff7ab17a04   196  cmp w6, #0x0 (0)
0xffff7ab17a08   200  b.le #+0x1c (addr 0xffff7ab17a24)
0xffff7ab17a0c   204  sub w6, w6, #0x1 (1)
0xffff7ab17a10   208  add x2, x5, #0xf (15)
0xffff7ab17a14   212  ldr x3, [x2, w6, sxtw #3]
0xffff7ab17a18   216  add x2, x9, #0xf (15)
0xffff7ab17a1c   220  str x3, [x2, w6, sxtw #3]
0xffff7ab17a20   224  b #-0x1c (addr 0xffff7ab17a04)
0xffff7ab17a24   228  mov x2, x9
0xffff7ab17a28   232  stur x2, [x1, #15]
0xffff7ab17a2c   236  add x3, x1, #0xf (15)
0xffff7ab17a30   240  and x2, x1, #0xfffffffffff00000
0xffff7ab17a34   244  ldr x2, [x2, #8]
0xffff7ab17a38   248  tbz w2, #2, #+0x18 (addr 0xffff7ab17a50)
0xffff7ab17a3c   252  sub csp, jssp, #0x8 (8)
0xffff7ab17a40   256  str lr, [jssp, #-8]!
0xffff7ab17a44   260  ldr x16, pc+420 (addr 0x0000ffff7ab17be8)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab17a48   264  blr x16
0xffff7ab17a4c   268  ldr lr, [jssp], #8
0xffff7ab17a50   272  mov x5, x9
0xffff7ab17a54   276  mov x1, x0
0xffff7ab17a58   280  add x2, x5, #0xf (15)
0xffff7ab17a5c   284  str x1, [x2, w8, sxtw #3]
0xffff7ab17a60   288  add x2, x2, w8, sxtw #3
0xffff7ab17a64   292  tbz w1, #0, #+0x30 (addr 0xffff7ab17a94)
0xffff7ab17a68   296  and x1, x1, #0xfffffffffff00000
0xffff7ab17a6c   300  ldr x1, [x1, #8]
0xffff7ab17a70   304  tbz w1, #1, #+0x24 (addr 0xffff7ab17a94)
0xffff7ab17a74   308  and x1, x5, #0xfffffffffff00000
0xffff7ab17a78   312  ldr x1, [x1, #8]
0xffff7ab17a7c   316  tbz w1, #2, #+0x18 (addr 0xffff7ab17a94)
0xffff7ab17a80   320  sub csp, jssp, #0x8 (8)
0xffff7ab17a84   324  str lr, [jssp, #-8]!
0xffff7ab17a88   328  ldr x16, pc+360 (addr 0x0000ffff7ab17bf0)    ;; code: STUB, RecordWriteStub, minor: 67621
0xffff7ab17a8c   332  blr x16
0xffff7ab17a90   336  ldr lr, [jssp], #8
0xffff7ab17a94   340  ret
0xffff7ab17a98   344  sub csp, jssp, #0x10 (16)
0xffff7ab17a9c   348  stp fp, lr, [jssp, #-16]!
0xffff7ab17aa0   352  movz fp, #0xa00000000
0xffff7ab17aa4   356  sub csp, jssp, #0x8 (8)
0xffff7ab17aa8   360  str fp, [jssp, #-8]!
0xffff7ab17aac   364  add fp, jssp, #0x8 (8)
0xffff7ab17ab0   368  ldur x16, [x2, #-1]
0xffff7ab17ab4   372  ldr x17, [x26, #120]
0xffff7ab17ab8   376  cmp x16, x17
0xffff7ab17abc   380  b.ne #+0x1ac (addr 0xffff7ab17c68)
0xffff7ab17ac0   384  ldur d29, [x2, #7]
0xffff7ab17ac4   388  fcvtzs w8, d29
0xffff7ab17ac8   392  scvtf d0, w8
0xffff7ab17acc   396  fcmp d29, d0
0xffff7ab17ad0   400  b.ne #+0x198 (addr 0xffff7ab17c68)
0xffff7ab17ad4   404  ldr lr, [jssp, #16]
0xffff7ab17ad8   408  ldp xzr, fp, [jssp], #24
0xffff7ab17adc   412  b #-0x17c (addr 0xffff7ab17960)
0xffff7ab17ae0   416  sub csp, jssp, #0x10 (16)
0xffff7ab17ae4   420  stp fp, lr, [jssp, #-16]!
0xffff7ab17ae8   424  movz fp, #0xa00000000
0xffff7ab17aec   428  sub csp, jssp, #0x8 (8)
0xffff7ab17af0   432  str fp, [jssp, #-8]!
0xffff7ab17af4   436  add fp, jssp, #0x8 (8)
0xffff7ab17af8   440  ldur x16, [x2, #-1]
0xffff7ab17afc   444  ldr x17, [x26, #120]
0xffff7ab17b00   448  cmp x16, x17
0xffff7ab17b04   452  b.ne #+0x30 (addr 0xffff7ab17b34)
0xffff7ab17b08   456  ldur d30, [x2, #7]
0xffff7ab17b0c   460  fcvtzs x9, d30
0xffff7ab17b10   464  cmp x9, #0x1 (1)
0xffff7ab17b14   468  ccmn x9, #1, #nzcV, vc
0xffff7ab17b18   472  b.vc #+0x18 (addr 0xffff7ab17b30)
0xffff7ab17b1c   476  sub csp, jssp, #0x8 (8)
0xffff7ab17b20   480  str lr, [jssp, #-8]!
0xffff7ab17b24   484  ldr x16, pc+212 (addr 0x0000ffff7ab17bf8)    ;; code: STUB, DoubleToIStub, minor: 127554
0xffff7ab17b28   488  blr x16
0xffff7ab17b2c   492  ldr lr, [jssp], #8
0xffff7ab17b30   496  b #+0x24 (addr 0xffff7ab17b54)
0xffff7ab17b34   500  ldp x9, x7, [x26, #64]
0xffff7ab17b38   504  cmp x2, x9
0xffff7ab17b3c   508  cset x9, eq
0xffff7ab17b40   512  ccmp x2, x7, #nZcv, ne
0xffff7ab17b44   516  b.eq #+0x10 (addr 0xffff7ab17b54)
0xffff7ab17b48   520  ldr x16, [x26, #40]
0xffff7ab17b4c   524  cmp x2, x16
0xffff7ab17b50   528  b.ne #+0x120 (addr 0xffff7ab17c70)
0xffff7ab17b54   532  ldr lr, [jssp, #16]
0xffff7ab17b58   536  ldp xzr, fp, [jssp], #24
0xffff7ab17b5c   540  b #-0x1c8 (addr 0xffff7ab17994)
0xffff7ab17b60   544  sub csp, jssp, #0x10 (16)
0xffff7ab17b64   548  stp fp, lr, [jssp, #-16]!
0xffff7ab17b68   552  movz fp, #0xa00000000
0xffff7ab17b6c   556  sub csp, jssp, #0x8 (8)
0xffff7ab17b70   560  str fp, [jssp, #-8]!
0xffff7ab17b74   564  add fp, jssp, #0x8 (8)
0xffff7ab17b78   568  movz x9, #0x0
0xffff7ab17b7c   572  mov x16, lr
0xffff7ab17b80   576  ldr x17, pc+128 (addr 0x0000ffff7ab17c00)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab17b84   580  blr x17
0xffff7ab17b88   584  lsl x0, x3, #32
0xffff7ab17b8c   588  movz x10, #0x0
0xffff7ab17b90   592  sub csp, jssp, #0x10 (16)
0xffff7ab17b94   596  stp x10, x0, [jssp, #-16]!
0xffff7ab17b98   600  movz x0, #0x2
0xffff7ab17b9c   604  movz x1, #0x5b88
0xffff7ab17ba0   608  movk x1, #0xe2, lsl #16
0xffff7ab17ba4   612  ldr x16, pc+100 (addr 0x0000ffff7ab17c08)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab17ba8   616  blr x16
0xffff7ab17bac   620  str x0, [jssp, #72]
0xffff7ab17bb0   624  ldr x16, pc+96 (addr 0x0000ffff7ab17c10)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab17bb4   628  blr x16
0xffff7ab17bb8   632  ldr lr, [jssp, #16]
0xffff7ab17bbc   636  ldp xzr, fp, [jssp], #24
0xffff7ab17bc0   640  b #-0x1e8 (addr 0xffff7ab179d8)
0xffff7ab17bc4   644  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0xffff7ab17bc8   648  d63f03e0       constant
0xffff7ab17bcc   652  d503201f       constant
0xffff7ab17bd0   656  4ec04259       constant
0xffff7ab17bd4   660  00000000       constant
0xffff7ab17bd8   664  4ec04259       constant
0xffff7ab17bdc   668  00000000       constant
0xffff7ab17be0   672  20d04519       constant
0xffff7ab17be4   676  00000000       constant
0xffff7ab17be8   680  7ab170c0       constant
0xffff7ab17bec   684  0000ffff       constant
0xffff7ab17bf0   688  7ab16760       constant
0xffff7ab17bf4   692  0000ffff       constant
0xffff7ab17bf8   696  7ab178a0       constant
0xffff7ab17bfc   700  0000ffff       constant
0xffff7ab17c00   704  7ab06820       constant
0xffff7ab17c04   708  0000ffff       constant
0xffff7ab17c08   712  7ab06260       constant
0xffff7ab17c0c   716  0000ffff       constant
0xffff7ab17c10   720  7ab068e0       constant
0xffff7ab17c14   724  0000ffff       constant
0xffff7ab17c18   728  movz x16, #0x0
0xffff7ab17c1c   732  sub csp, jssp, #0x10 (16)
0xffff7ab17c20   736  stp fp, lr, [jssp, #-16]!
0xffff7ab17c24   740  bl #+0x54 (addr 0xffff7ab17c78)
0xffff7ab17c28   744  movz x16, #0x8
0xffff7ab17c2c   748  sub csp, jssp, #0x10 (16)
0xffff7ab17c30   752  stp fp, lr, [jssp, #-16]!
0xffff7ab17c34   756  bl #+0x44 (addr 0xffff7ab17c78)
0xffff7ab17c38   760  movz x16, #0x10
0xffff7ab17c3c   764  sub csp, jssp, #0x10 (16)
0xffff7ab17c40   768  stp fp, lr, [jssp, #-16]!
0xffff7ab17c44   772  bl #+0x34 (addr 0xffff7ab17c78)
0xffff7ab17c48   776  movz x16, #0x18
0xffff7ab17c4c   780  sub csp, jssp, #0x10 (16)
0xffff7ab17c50   784  stp fp, lr, [jssp, #-16]!
0xffff7ab17c54   788  bl #+0x24 (addr 0xffff7ab17c78)
0xffff7ab17c58   792  movz x16, #0x20
0xffff7ab17c5c   796  sub csp, jssp, #0x10 (16)
0xffff7ab17c60   800  stp fp, lr, [jssp, #-16]!
0xffff7ab17c64   804  bl #+0x14 (addr 0xffff7ab17c78)
0xffff7ab17c68   808  movz x16, #0x28
0xffff7ab17c6c   812  bl #+0x1c (addr 0xffff7ab17c88)
0xffff7ab17c70   816  movz x16, #0x30
0xffff7ab17c74   820  bl #+0x14 (addr 0xffff7ab17c88)
0xffff7ab17c78   824  movz x17, #0xa00000000
0xffff7ab17c7c   828  sub csp, jssp, #0x10 (16)
0xffff7ab17c80   832  stp x17, cp, [jssp, #-16]!
0xffff7ab17c84   836  add fp, jssp, #0x10 (16)
0xffff7ab17c88   840  ldr x17, pc+24 (addr 0x0000ffff7ab17ca0)    ;; lazy deoptimization bailout 0
0xffff7ab17c8c   844  add x17, x17, x16
0xffff7ab17c90   848  br x17
0xffff7ab17c94   852  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab17c98   856  d63f03e0       constant
0xffff7ab17c9c   860  d503201f       constant
0xffff7ab17ca0   864  7a906000       constant
0xffff7ab17ca4   868  0000ffff       constant


Safepoints (size = 21)
0xffff7ab17bac   620  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 35)
0xffff7ab17948  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab179d8  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab179f4  embedded object  (0x20d04519 <the hole>)
0xffff7ab17a44  code target (STUB)  (0xffff7ab170c0)
0xffff7ab17a88  code target (STUB)  (0xffff7ab16760)
0xffff7ab17b24  code target (STUB)  (0xffff7ab178a0)
0xffff7ab17b80  code target (STUB)  (0xffff7ab06820)
0xffff7ab17ba4  code target (STUB)  (0xffff7ab06260)
0xffff7ab17bb0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab17bc4  constant pool (size 84)
0xffff7ab17c88  runtime entry
0xffff7ab17c94  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 240)
0xffff7ab17d20     0  ldur x5, [x1, #15]
0xffff7ab17d24     4  ldur x6, [x5, #-1]
0xffff7ab17d28     8  ldr x16, pc+104 (addr 0x0000ffff7ab17d90)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab17d2c    12  cmp x6, x16
0xffff7ab17d30    16  b.ne #+0x68 (addr 0xffff7ab17d98)
0xffff7ab17d34    20  ldur w6, [x1, #27]
0xffff7ab17d38    24  mov x7, x0
0xffff7ab17d3c    28  tbnz w7, #0, #+0x6c (addr 0xffff7ab17da8)
0xffff7ab17d40    32  tbnz w2, #0, #+0x20 (addr 0xffff7ab17d60)
0xffff7ab17d44    36  asr x9, x2, #32
0xffff7ab17d48    40  cmp w9, w6
0xffff7ab17d4c    44  b.hs #+0x6c (addr 0xffff7ab17db8)
0xffff7ab17d50    48  asr x1, x7, #32
0xffff7ab17d54    52  add x2, x5, w9, sxtw #3
0xffff7ab17d58    56  stur w1, [x2, #19]
0xffff7ab17d5c    60  ret
0xffff7ab17d60    64  ldur x16, [x2, #-1]
0xffff7ab17d64    68  ldr x17, [x26, #120]
0xffff7ab17d68    72  cmp x16, x17
0xffff7ab17d6c    76  b.ne #+0x5c (addr 0xffff7ab17dc8)
0xffff7ab17d70    80  ldur d29, [x2, #7]
0xffff7ab17d74    84  fcvtzs w9, d29
0xffff7ab17d78    88  scvtf d0, w9
0xffff7ab17d7c    92  fcmp d29, d0
0xffff7ab17d80    96  b.ne #+0x48 (addr 0xffff7ab17dc8)
0xffff7ab17d84   100  b #-0x3c (addr 0xffff7ab17d48)
0xffff7ab17d88   104  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab17d8c   108  d63f03e0       constant
0xffff7ab17d90   112  4ec04259       constant
0xffff7ab17d94   116  00000000       constant
0xffff7ab17d98   120  movz x16, #0x0
0xffff7ab17d9c   124  sub csp, jssp, #0x10 (16)
0xffff7ab17da0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab17da4   132  bl #+0x34 (addr 0xffff7ab17dd8)
0xffff7ab17da8   136  movz x16, #0x8
0xffff7ab17dac   140  sub csp, jssp, #0x10 (16)
0xffff7ab17db0   144  stp fp, lr, [jssp, #-16]!
0xffff7ab17db4   148  bl #+0x24 (addr 0xffff7ab17dd8)
0xffff7ab17db8   152  movz x16, #0x10
0xffff7ab17dbc   156  sub csp, jssp, #0x10 (16)
0xffff7ab17dc0   160  stp fp, lr, [jssp, #-16]!
0xffff7ab17dc4   164  bl #+0x14 (addr 0xffff7ab17dd8)
0xffff7ab17dc8   168  movz x16, #0x18
0xffff7ab17dcc   172  sub csp, jssp, #0x10 (16)
0xffff7ab17dd0   176  stp fp, lr, [jssp, #-16]!
0xffff7ab17dd4   180  bl #+0x4 (addr 0xffff7ab17dd8)
0xffff7ab17dd8   184  movz x17, #0xa00000000
0xffff7ab17ddc   188  sub csp, jssp, #0x10 (16)
0xffff7ab17de0   192  stp x17, cp, [jssp, #-16]!
0xffff7ab17de4   196  add fp, jssp, #0x10 (16)
0xffff7ab17de8   200  ldr x17, pc+24 (addr 0x0000ffff7ab17e00)    ;; lazy deoptimization bailout 0
0xffff7ab17dec   204  add x17, x17, x16
0xffff7ab17df0   208  br x17
0xffff7ab17df4   212  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab17df8   216  d63f03e0       constant
0xffff7ab17dfc   220  d503201f       constant
0xffff7ab17e00   224  7a906000       constant
0xffff7ab17e04   228  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0xffff7ab17d28  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab17d88  constant pool (size 16)
0xffff7ab17de8  runtime entry
0xffff7ab17df4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 240)
0xffff7ab17d20     0  ldur x5, [x1, #15]
0xffff7ab17d24     4  ldur x6, [x5, #-1]
0xffff7ab17d28     8  ldr x16, pc+104 (addr 0x0000ffff7ab17d90)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab17d2c    12  cmp x6, x16
0xffff7ab17d30    16  b.ne #+0x68 (addr 0xffff7ab17d98)
0xffff7ab17d34    20  ldur w6, [x1, #27]
0xffff7ab17d38    24  mov x7, x0
0xffff7ab17d3c    28  tbnz w7, #0, #+0x6c (addr 0xffff7ab17da8)
0xffff7ab17d40    32  tbnz w2, #0, #+0x20 (addr 0xffff7ab17d60)
0xffff7ab17d44    36  asr x9, x2, #32
0xffff7ab17d48    40  cmp w9, w6
0xffff7ab17d4c    44  b.hs #+0x6c (addr 0xffff7ab17db8)
0xffff7ab17d50    48  asr x1, x7, #32
0xffff7ab17d54    52  add x2, x5, w9, sxtw #3
0xffff7ab17d58    56  stur w1, [x2, #19]
0xffff7ab17d5c    60  ret
0xffff7ab17d60    64  ldur x16, [x2, #-1]
0xffff7ab17d64    68  ldr x17, [x26, #120]
0xffff7ab17d68    72  cmp x16, x17
0xffff7ab17d6c    76  b.ne #+0x5c (addr 0xffff7ab17dc8)
0xffff7ab17d70    80  ldur d29, [x2, #7]
0xffff7ab17d74    84  fcvtzs w9, d29
0xffff7ab17d78    88  scvtf d0, w9
0xffff7ab17d7c    92  fcmp d29, d0
0xffff7ab17d80    96  b.ne #+0x48 (addr 0xffff7ab17dc8)
0xffff7ab17d84   100  b #-0x3c (addr 0xffff7ab17d48)
0xffff7ab17d88   104  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab17d8c   108  d63f03e0       constant
0xffff7ab17d90   112  4ec04259       constant
0xffff7ab17d94   116  00000000       constant
0xffff7ab17d98   120  movz x16, #0x0
0xffff7ab17d9c   124  sub csp, jssp, #0x10 (16)
0xffff7ab17da0   128  stp fp, lr, [jssp, #-16]!
0xffff7ab17da4   132  bl #+0x34 (addr 0xffff7ab17dd8)
0xffff7ab17da8   136  movz x16, #0x8
0xffff7ab17dac   140  sub csp, jssp, #0x10 (16)
0xffff7ab17db0   144  stp fp, lr, [jssp, #-16]!
0xffff7ab17db4   148  bl #+0x24 (addr 0xffff7ab17dd8)
0xffff7ab17db8   152  movz x16, #0x10
0xffff7ab17dbc   156  sub csp, jssp, #0x10 (16)
0xffff7ab17dc0   160  stp fp, lr, [jssp, #-16]!
0xffff7ab17dc4   164  bl #+0x14 (addr 0xffff7ab17dd8)
0xffff7ab17dc8   168  movz x16, #0x18
0xffff7ab17dcc   172  sub csp, jssp, #0x10 (16)
0xffff7ab17dd0   176  stp fp, lr, [jssp, #-16]!
0xffff7ab17dd4   180  bl #+0x4 (addr 0xffff7ab17dd8)
0xffff7ab17dd8   184  movz x17, #0xa00000000
0xffff7ab17ddc   188  sub csp, jssp, #0x10 (16)
0xffff7ab17de0   192  stp x17, cp, [jssp, #-16]!
0xffff7ab17de4   196  add fp, jssp, #0x10 (16)
0xffff7ab17de8   200  ldr x17, pc+24 (addr 0x0000ffff7ab17e00)    ;; lazy deoptimization bailout 0
0xffff7ab17dec   204  add x17, x17, x16
0xffff7ab17df0   208  br x17
0xffff7ab17df4   212  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab17df8   216  d63f03e0       constant
0xffff7ab17dfc   220  d503201f       constant
0xffff7ab17e00   224  7a906000       constant
0xffff7ab17e04   228  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0xffff7ab17d28  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab17d88  constant pool (size 16)
0xffff7ab17de8  runtime entry
0xffff7ab17df4  constant pool (size 20)


kind = STUB
major_key = DoubleToIStub
name = DoubleToIStub
compiler = unknown
Instructions (size = 60)
0xffff7ab17e80     0  sub csp, jssp, #0x10 (16)
0xffff7ab17e84     4  stp x1, x0, [jssp, #-16]!
0xffff7ab17e88     8  ldur x10, [x2, #7]
0xffff7ab17e8c    12  ubfx x0, x10, #52, #11
0xffff7ab17e90    16  cmp x0, #0x453 (1107)
0xffff7ab17e94    20  csel x10, xzr, x10, ge
0xffff7ab17e98    24  b.ge #+0x1c (addr 0xffff7ab17eb4)
0xffff7ab17e9c    28  ubfx x1, x10, #0, #52
0xffff7ab17ea0    32  orr x1, x1, #0x10000000000000
0xffff7ab17ea4    36  tst x10, #0x8000000000000000
0xffff7ab17ea8    40  cneg x1, x1, ne
0xffff7ab17eac    44  sub x0, x0, #0x433 (1075)
0xffff7ab17eb0    48  lsl x10, x1, x0
0xffff7ab17eb4    52  ldp x1, x0, [jssp], #16
0xffff7ab17eb8    56  ret


RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 885)
0xffff7ab17f20     0  ldur x5, [x1, #15]
0xffff7ab17f24     4  ldur x6, [x5, #-1]
0xffff7ab17f28     8  ldr x16, pc+632 (addr 0x0000ffff7ab181a0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab17f2c    12  cmp x6, x16
0xffff7ab17f30    16  b.ne #+0x2b0 (addr 0xffff7ab181e0)
0xffff7ab17f34    20  ldur w6, [x1, #27]
0xffff7ab17f38    24  mov x7, x0
0xffff7ab17f3c    28  tbnz w7, #0, #+0x2b4 (addr 0xffff7ab181f0)
0xffff7ab17f40    32  asr x7, x7, #32
0xffff7ab17f44    36  tbnz w2, #0, #+0x128 (addr 0xffff7ab1806c)
0xffff7ab17f48    40  asr x9, x2, #32
0xffff7ab17f4c    44  cmp w6, w9
0xffff7ab17f50    48  b.eq #+0x10 (addr 0xffff7ab17f60)
0xffff7ab17f54    52  cmp w9, w6
0xffff7ab17f58    56  b.hs #+0x2a8 (addr 0xffff7ab18200)
0xffff7ab17f5c    60  b #+0x104 (addr 0xffff7ab18060)
0xffff7ab17f60    64  ldur w8, [x5, #11]
0xffff7ab17f64    68  cmp w8, w9
0xffff7ab17f68    72  b.gt #+0xe0 (addr 0xffff7ab18048)
0xffff7ab17f6c    76  adds w8, w8, #0x400 (1024)
0xffff7ab17f70    80  b.vs #+0x2a0 (addr 0xffff7ab18210)
0xffff7ab17f74    84  cmp w9, w8
0xffff7ab17f78    88  b.hs #+0x2a8 (addr 0xffff7ab18220)
0xffff7ab17f7c    92  tbnz w2, #0, #+0x138 (addr 0xffff7ab180b4)
0xffff7ab17f80    96  asr x10, x2, #32
0xffff7ab17f84   100  add w8, w9, w10, lsr #1
0xffff7ab17f88   104  add w8, w8, #0x10 (16)
0xffff7ab17f8c   108  movz w16, #0x95ff
0xffff7ab17f90   112  cmp w8, w16, lsl #1
0xffff7ab17f94   116  b.hs #+0x29c (addr 0xffff7ab18230)
0xffff7ab17f98   120  lsl x2, x8, #32
0xffff7ab17f9c   124  lsl w3, w8, #3
0xffff7ab17fa0   128  add w3, w3, #0x10 (16)
0xffff7ab17fa4   132  sxtw x3, w3
0xffff7ab17fa8   136  movz x4, #0xe2c0
0xffff7ab17fac   140  movk x4, #0x9ab, lsl #16
0xffff7ab17fb0   144  ldp x10, x16, [x4]
0xffff7ab17fb4   148  adds x8, x10, x3
0xffff7ab17fb8   152  ccmp x8, x16, #nzCv, lo
0xffff7ab17fbc   156  b.hi #+0x178 (addr 0xffff7ab18134)
0xffff7ab17fc0   160  str x8, [x4]
0xffff7ab17fc4   164  orr x10, x10, #0x1
0xffff7ab17fc8   168  ldr x3, pc+480 (addr 0x0000ffff7ab181a8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab17fcc   172  stur x3, [x10, #-1]
0xffff7ab17fd0   176  stur x2, [x10, #7]
0xffff7ab17fd4   180  ldur w2, [x10, #11]
0xffff7ab17fd8   184  cmp w6, w2
0xffff7ab17fdc   188  b.ge #+0x18 (addr 0xffff7ab17ff4)
0xffff7ab17fe0   192  sub w2, w2, #0x1 (1)
0xffff7ab17fe4   196  ldr x3, pc+460 (addr 0x0000ffff7ab181b0)    ;; object: 0x20d04519 <the hole>
0xffff7ab17fe8   200  add x4, x10, #0xf (15)
0xffff7ab17fec   204  str x3, [x4, w2, sxtw #3]
0xffff7ab17ff0   208  b #-0x18 (addr 0xffff7ab17fd8)
0xffff7ab17ff4   212  cmp w6, #0x0 (0)
0xffff7ab17ff8   216  b.le #+0x20 (addr 0xffff7ab18018)
0xffff7ab17ffc   220  sub w6, w6, #0x1 (1)
0xffff7ab18000   224  add x2, x5, w6, sxtw #3
0xffff7ab18004   228  ldur w3, [x2, #19]
0xffff7ab18008   232  lsl x2, x3, #32
0xffff7ab1800c   236  add x3, x10, #0xf (15)
0xffff7ab18010   240  str x2, [x3, w6, sxtw #3]
0xffff7ab18014   244  b #-0x20 (addr 0xffff7ab17ff4)
0xffff7ab18018   248  mov x2, x10
0xffff7ab1801c   252  stur x2, [x1, #15]
0xffff7ab18020   256  add x3, x1, #0xf (15)
0xffff7ab18024   260  and x2, x1, #0xfffffffffff00000
0xffff7ab18028   264  ldr x2, [x2, #8]
0xffff7ab1802c   268  tbz w2, #2, #+0x18 (addr 0xffff7ab18044)
0xffff7ab18030   272  sub csp, jssp, #0x8 (8)
0xffff7ab18034   276  str lr, [jssp, #-8]!
0xffff7ab18038   280  ldr x16, pc+384 (addr 0x0000ffff7ab181b8)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab1803c   284  blr x16
0xffff7ab18040   288  ldr lr, [jssp], #8
0xffff7ab18044   292  mov x5, x10
0xffff7ab18048   296  add w2, w9, #0x1 (1)
0xffff7ab1804c   300  lsl x2, x2, #32
0xffff7ab18050   304  stur x2, [x1, #23]
0xffff7ab18054   308  movz x1, #0x0
0xffff7ab18058   312  add x2, x5, #0xf (15)
0xffff7ab1805c   316  str x1, [x2, w9, sxtw #3]
0xffff7ab18060   320  add x1, x5, w9, sxtw #3
0xffff7ab18064   324  stur w7, [x1, #19]
0xffff7ab18068   328  ret
0xffff7ab1806c   332  sub csp, jssp, #0x10 (16)
0xffff7ab18070   336  stp fp, lr, [jssp, #-16]!
0xffff7ab18074   340  movz fp, #0xa00000000
0xffff7ab18078   344  sub csp, jssp, #0x8 (8)
0xffff7ab1807c   348  str fp, [jssp, #-8]!
0xffff7ab18080   352  add fp, jssp, #0x8 (8)
0xffff7ab18084   356  ldur x16, [x2, #-1]
0xffff7ab18088   360  ldr x17, [x26, #120]
0xffff7ab1808c   364  cmp x16, x17
0xffff7ab18090   368  b.ne #+0x1b0 (addr 0xffff7ab18240)
0xffff7ab18094   372  ldur d29, [x2, #7]
0xffff7ab18098   376  fcvtzs w9, d29
0xffff7ab1809c   380  scvtf d0, w9
0xffff7ab180a0   384  fcmp d29, d0
0xffff7ab180a4   388  b.ne #+0x19c (addr 0xffff7ab18240)
0xffff7ab180a8   392  ldr lr, [jssp, #16]
0xffff7ab180ac   396  ldp xzr, fp, [jssp], #24
0xffff7ab180b0   400  b #-0x164 (addr 0xffff7ab17f4c)
0xffff7ab180b4   404  sub csp, jssp, #0x10 (16)
0xffff7ab180b8   408  stp fp, lr, [jssp, #-16]!
0xffff7ab180bc   412  movz fp, #0xa00000000
0xffff7ab180c0   416  sub csp, jssp, #0x8 (8)
0xffff7ab180c4   420  str fp, [jssp, #-8]!
0xffff7ab180c8   424  add fp, jssp, #0x8 (8)
0xffff7ab180cc   428  ldur x16, [x2, #-1]
0xffff7ab180d0   432  ldr x17, [x26, #120]
0xffff7ab180d4   436  cmp x16, x17
0xffff7ab180d8   440  b.ne #+0x30 (addr 0xffff7ab18108)
0xffff7ab180dc   444  ldur d30, [x2, #7]
0xffff7ab180e0   448  fcvtzs x10, d30
0xffff7ab180e4   452  cmp x10, #0x1 (1)
0xffff7ab180e8   456  ccmn x10, #1, #nzcV, vc
0xffff7ab180ec   460  b.vc #+0x18 (addr 0xffff7ab18104)
0xffff7ab180f0   464  sub csp, jssp, #0x8 (8)
0xffff7ab180f4   468  str lr, [jssp, #-8]!
0xffff7ab180f8   472  ldr x16, pc+200 (addr 0x0000ffff7ab181c0)    ;; code: STUB, DoubleToIStub, minor: 127618
0xffff7ab180fc   476  blr x16
0xffff7ab18100   480  ldr lr, [jssp], #8
0xffff7ab18104   484  b #+0x24 (addr 0xffff7ab18128)
0xffff7ab18108   488  ldp x10, x8, [x26, #64]
0xffff7ab1810c   492  cmp x2, x10
0xffff7ab18110   496  cset x10, eq
0xffff7ab18114   500  ccmp x2, x8, #nZcv, ne
0xffff7ab18118   504  b.eq #+0x10 (addr 0xffff7ab18128)
0xffff7ab1811c   508  ldr x16, [x26, #40]
0xffff7ab18120   512  cmp x2, x16
0xffff7ab18124   516  b.ne #+0x124 (addr 0xffff7ab18248)
0xffff7ab18128   520  ldr lr, [jssp, #16]
0xffff7ab1812c   524  ldp xzr, fp, [jssp], #24
0xffff7ab18130   528  b #-0x1ac (addr 0xffff7ab17f84)
0xffff7ab18134   532  sub csp, jssp, #0x10 (16)
0xffff7ab18138   536  stp fp, lr, [jssp, #-16]!
0xffff7ab1813c   540  movz fp, #0xa00000000
0xffff7ab18140   544  sub csp, jssp, #0x8 (8)
0xffff7ab18144   548  str fp, [jssp, #-8]!
0xffff7ab18148   552  add fp, jssp, #0x8 (8)
0xffff7ab1814c   556  movz x10, #0x0
0xffff7ab18150   560  mov x16, lr
0xffff7ab18154   564  ldr x17, pc+116 (addr 0x0000ffff7ab181c8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab18158   568  blr x17
0xffff7ab1815c   572  lsl x0, x3, #32
0xffff7ab18160   576  movz x10, #0x0
0xffff7ab18164   580  sub csp, jssp, #0x10 (16)
0xffff7ab18168   584  stp x10, x0, [jssp, #-16]!
0xffff7ab1816c   588  movz x0, #0x2
0xffff7ab18170   592  movz x1, #0x5b88
0xffff7ab18174   596  movk x1, #0xe2, lsl #16
0xffff7ab18178   600  ldr x16, pc+88 (addr 0x0000ffff7ab181d0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab1817c   604  blr x16
0xffff7ab18180   608  str x0, [jssp, #80]
0xffff7ab18184   612  ldr x16, pc+84 (addr 0x0000ffff7ab181d8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab18188   616  blr x16
0xffff7ab1818c   620  ldr lr, [jssp, #16]
0xffff7ab18190   624  ldp xzr, fp, [jssp], #24
0xffff7ab18194   628  b #-0x1cc (addr 0xffff7ab17fc8)
0xffff7ab18198   632  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7ab1819c   636  d63f03e0       constant
0xffff7ab181a0   640  4ec04259       constant
0xffff7ab181a4   644  00000000       constant
0xffff7ab181a8   648  4ec04259       constant
0xffff7ab181ac   652  00000000       constant
0xffff7ab181b0   656  20d04519       constant
0xffff7ab181b4   660  00000000       constant
0xffff7ab181b8   664  7ab170c0       constant
0xffff7ab181bc   668  0000ffff       constant
0xffff7ab181c0   672  7ab17e80       constant
0xffff7ab181c4   676  0000ffff       constant
0xffff7ab181c8   680  7ab06820       constant
0xffff7ab181cc   684  0000ffff       constant
0xffff7ab181d0   688  7ab06260       constant
0xffff7ab181d4   692  0000ffff       constant
0xffff7ab181d8   696  7ab068e0       constant
0xffff7ab181dc   700  0000ffff       constant
0xffff7ab181e0   704  movz x16, #0x0
0xffff7ab181e4   708  sub csp, jssp, #0x10 (16)
0xffff7ab181e8   712  stp fp, lr, [jssp, #-16]!
0xffff7ab181ec   716  bl #+0x64 (addr 0xffff7ab18250)
0xffff7ab181f0   720  movz x16, #0x8
0xffff7ab181f4   724  sub csp, jssp, #0x10 (16)
0xffff7ab181f8   728  stp fp, lr, [jssp, #-16]!
0xffff7ab181fc   732  bl #+0x54 (addr 0xffff7ab18250)
0xffff7ab18200   736  movz x16, #0x10
0xffff7ab18204   740  sub csp, jssp, #0x10 (16)
0xffff7ab18208   744  stp fp, lr, [jssp, #-16]!
0xffff7ab1820c   748  bl #+0x44 (addr 0xffff7ab18250)
0xffff7ab18210   752  movz x16, #0x18
0xffff7ab18214   756  sub csp, jssp, #0x10 (16)
0xffff7ab18218   760  stp fp, lr, [jssp, #-16]!
0xffff7ab1821c   764  bl #+0x34 (addr 0xffff7ab18250)
0xffff7ab18220   768  movz x16, #0x20
0xffff7ab18224   772  sub csp, jssp, #0x10 (16)
0xffff7ab18228   776  stp fp, lr, [jssp, #-16]!
0xffff7ab1822c   780  bl #+0x24 (addr 0xffff7ab18250)
0xffff7ab18230   784  movz x16, #0x28
0xffff7ab18234   788  sub csp, jssp, #0x10 (16)
0xffff7ab18238   792  stp fp, lr, [jssp, #-16]!
0xffff7ab1823c   796  bl #+0x14 (addr 0xffff7ab18250)
0xffff7ab18240   800  movz x16, #0x30
0xffff7ab18244   804  bl #+0x1c (addr 0xffff7ab18260)
0xffff7ab18248   808  movz x16, #0x38
0xffff7ab1824c   812  bl #+0x14 (addr 0xffff7ab18260)
0xffff7ab18250   816  movz x17, #0xa00000000
0xffff7ab18254   820  sub csp, jssp, #0x10 (16)
0xffff7ab18258   824  stp x17, cp, [jssp, #-16]!
0xffff7ab1825c   828  add fp, jssp, #0x10 (16)
0xffff7ab18260   832  ldr x17, pc+24 (addr 0x0000ffff7ab18278)    ;; lazy deoptimization bailout 0
0xffff7ab18264   836  add x17, x17, x16
0xffff7ab18268   840  br x17
0xffff7ab1826c   844  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab18270   848  d63f03e0       constant
0xffff7ab18274   852  d503201f       constant
0xffff7ab18278   856  7a906000       constant
0xffff7ab1827c   860  0000ffff       constant


Safepoints (size = 21)
0xffff7ab18180   608  000 | x0 | x1 | x5 | x10 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 32)
0xffff7ab17f28  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab17fc8  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab17fe4  embedded object  (0x20d04519 <the hole>)
0xffff7ab18038  code target (STUB)  (0xffff7ab170c0)
0xffff7ab180f8  code target (STUB)  (0xffff7ab17e80)
0xffff7ab18154  code target (STUB)  (0xffff7ab06820)
0xffff7ab18178  code target (STUB)  (0xffff7ab06260)
0xffff7ab18184  code target (STUB)  (0xffff7ab068e0)
0xffff7ab18198  constant pool (size 72)
0xffff7ab18260  runtime entry
0xffff7ab1826c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 885)
0xffff7ab17f20     0  ldur x5, [x1, #15]
0xffff7ab17f24     4  ldur x6, [x5, #-1]
0xffff7ab17f28     8  ldr x16, pc+632 (addr 0x0000ffff7ab181a0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab17f2c    12  cmp x6, x16
0xffff7ab17f30    16  b.ne #+0x2b0 (addr 0xffff7ab181e0)
0xffff7ab17f34    20  ldur w6, [x1, #27]
0xffff7ab17f38    24  mov x7, x0
0xffff7ab17f3c    28  tbnz w7, #0, #+0x2b4 (addr 0xffff7ab181f0)
0xffff7ab17f40    32  asr x7, x7, #32
0xffff7ab17f44    36  tbnz w2, #0, #+0x128 (addr 0xffff7ab1806c)
0xffff7ab17f48    40  asr x9, x2, #32
0xffff7ab17f4c    44  cmp w6, w9
0xffff7ab17f50    48  b.eq #+0x10 (addr 0xffff7ab17f60)
0xffff7ab17f54    52  cmp w9, w6
0xffff7ab17f58    56  b.hs #+0x2a8 (addr 0xffff7ab18200)
0xffff7ab17f5c    60  b #+0x104 (addr 0xffff7ab18060)
0xffff7ab17f60    64  ldur w8, [x5, #11]
0xffff7ab17f64    68  cmp w8, w9
0xffff7ab17f68    72  b.gt #+0xe0 (addr 0xffff7ab18048)
0xffff7ab17f6c    76  adds w8, w8, #0x400 (1024)
0xffff7ab17f70    80  b.vs #+0x2a0 (addr 0xffff7ab18210)
0xffff7ab17f74    84  cmp w9, w8
0xffff7ab17f78    88  b.hs #+0x2a8 (addr 0xffff7ab18220)
0xffff7ab17f7c    92  tbnz w2, #0, #+0x138 (addr 0xffff7ab180b4)
0xffff7ab17f80    96  asr x10, x2, #32
0xffff7ab17f84   100  add w8, w9, w10, lsr #1
0xffff7ab17f88   104  add w8, w8, #0x10 (16)
0xffff7ab17f8c   108  movz w16, #0x95ff
0xffff7ab17f90   112  cmp w8, w16, lsl #1
0xffff7ab17f94   116  b.hs #+0x29c (addr 0xffff7ab18230)
0xffff7ab17f98   120  lsl x2, x8, #32
0xffff7ab17f9c   124  lsl w3, w8, #3
0xffff7ab17fa0   128  add w3, w3, #0x10 (16)
0xffff7ab17fa4   132  sxtw x3, w3
0xffff7ab17fa8   136  movz x4, #0xe2c0
0xffff7ab17fac   140  movk x4, #0x9ab, lsl #16
0xffff7ab17fb0   144  ldp x10, x16, [x4]
0xffff7ab17fb4   148  adds x8, x10, x3
0xffff7ab17fb8   152  ccmp x8, x16, #nzCv, lo
0xffff7ab17fbc   156  b.hi #+0x178 (addr 0xffff7ab18134)
0xffff7ab17fc0   160  str x8, [x4]
0xffff7ab17fc4   164  orr x10, x10, #0x1
0xffff7ab17fc8   168  ldr x3, pc+480 (addr 0x0000ffff7ab181a8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab17fcc   172  stur x3, [x10, #-1]
0xffff7ab17fd0   176  stur x2, [x10, #7]
0xffff7ab17fd4   180  ldur w2, [x10, #11]
0xffff7ab17fd8   184  cmp w6, w2
0xffff7ab17fdc   188  b.ge #+0x18 (addr 0xffff7ab17ff4)
0xffff7ab17fe0   192  sub w2, w2, #0x1 (1)
0xffff7ab17fe4   196  ldr x3, pc+460 (addr 0x0000ffff7ab181b0)    ;; object: 0x20d04519 <the hole>
0xffff7ab17fe8   200  add x4, x10, #0xf (15)
0xffff7ab17fec   204  str x3, [x4, w2, sxtw #3]
0xffff7ab17ff0   208  b #-0x18 (addr 0xffff7ab17fd8)
0xffff7ab17ff4   212  cmp w6, #0x0 (0)
0xffff7ab17ff8   216  b.le #+0x20 (addr 0xffff7ab18018)
0xffff7ab17ffc   220  sub w6, w6, #0x1 (1)
0xffff7ab18000   224  add x2, x5, w6, sxtw #3
0xffff7ab18004   228  ldur w3, [x2, #19]
0xffff7ab18008   232  lsl x2, x3, #32
0xffff7ab1800c   236  add x3, x10, #0xf (15)
0xffff7ab18010   240  str x2, [x3, w6, sxtw #3]
0xffff7ab18014   244  b #-0x20 (addr 0xffff7ab17ff4)
0xffff7ab18018   248  mov x2, x10
0xffff7ab1801c   252  stur x2, [x1, #15]
0xffff7ab18020   256  add x3, x1, #0xf (15)
0xffff7ab18024   260  and x2, x1, #0xfffffffffff00000
0xffff7ab18028   264  ldr x2, [x2, #8]
0xffff7ab1802c   268  tbz w2, #2, #+0x18 (addr 0xffff7ab18044)
0xffff7ab18030   272  sub csp, jssp, #0x8 (8)
0xffff7ab18034   276  str lr, [jssp, #-8]!
0xffff7ab18038   280  ldr x16, pc+384 (addr 0x0000ffff7ab181b8)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab1803c   284  blr x16
0xffff7ab18040   288  ldr lr, [jssp], #8
0xffff7ab18044   292  mov x5, x10
0xffff7ab18048   296  add w2, w9, #0x1 (1)
0xffff7ab1804c   300  lsl x2, x2, #32
0xffff7ab18050   304  stur x2, [x1, #23]
0xffff7ab18054   308  movz x1, #0x0
0xffff7ab18058   312  add x2, x5, #0xf (15)
0xffff7ab1805c   316  str x1, [x2, w9, sxtw #3]
0xffff7ab18060   320  add x1, x5, w9, sxtw #3
0xffff7ab18064   324  stur w7, [x1, #19]
0xffff7ab18068   328  ret
0xffff7ab1806c   332  sub csp, jssp, #0x10 (16)
0xffff7ab18070   336  stp fp, lr, [jssp, #-16]!
0xffff7ab18074   340  movz fp, #0xa00000000
0xffff7ab18078   344  sub csp, jssp, #0x8 (8)
0xffff7ab1807c   348  str fp, [jssp, #-8]!
0xffff7ab18080   352  add fp, jssp, #0x8 (8)
0xffff7ab18084   356  ldur x16, [x2, #-1]
0xffff7ab18088   360  ldr x17, [x26, #120]
0xffff7ab1808c   364  cmp x16, x17
0xffff7ab18090   368  b.ne #+0x1b0 (addr 0xffff7ab18240)
0xffff7ab18094   372  ldur d29, [x2, #7]
0xffff7ab18098   376  fcvtzs w9, d29
0xffff7ab1809c   380  scvtf d0, w9
0xffff7ab180a0   384  fcmp d29, d0
0xffff7ab180a4   388  b.ne #+0x19c (addr 0xffff7ab18240)
0xffff7ab180a8   392  ldr lr, [jssp, #16]
0xffff7ab180ac   396  ldp xzr, fp, [jssp], #24
0xffff7ab180b0   400  b #-0x164 (addr 0xffff7ab17f4c)
0xffff7ab180b4   404  sub csp, jssp, #0x10 (16)
0xffff7ab180b8   408  stp fp, lr, [jssp, #-16]!
0xffff7ab180bc   412  movz fp, #0xa00000000
0xffff7ab180c0   416  sub csp, jssp, #0x8 (8)
0xffff7ab180c4   420  str fp, [jssp, #-8]!
0xffff7ab180c8   424  add fp, jssp, #0x8 (8)
0xffff7ab180cc   428  ldur x16, [x2, #-1]
0xffff7ab180d0   432  ldr x17, [x26, #120]
0xffff7ab180d4   436  cmp x16, x17
0xffff7ab180d8   440  b.ne #+0x30 (addr 0xffff7ab18108)
0xffff7ab180dc   444  ldur d30, [x2, #7]
0xffff7ab180e0   448  fcvtzs x10, d30
0xffff7ab180e4   452  cmp x10, #0x1 (1)
0xffff7ab180e8   456  ccmn x10, #1, #nzcV, vc
0xffff7ab180ec   460  b.vc #+0x18 (addr 0xffff7ab18104)
0xffff7ab180f0   464  sub csp, jssp, #0x8 (8)
0xffff7ab180f4   468  str lr, [jssp, #-8]!
0xffff7ab180f8   472  ldr x16, pc+200 (addr 0x0000ffff7ab181c0)    ;; code: STUB, DoubleToIStub, minor: 127618
0xffff7ab180fc   476  blr x16
0xffff7ab18100   480  ldr lr, [jssp], #8
0xffff7ab18104   484  b #+0x24 (addr 0xffff7ab18128)
0xffff7ab18108   488  ldp x10, x8, [x26, #64]
0xffff7ab1810c   492  cmp x2, x10
0xffff7ab18110   496  cset x10, eq
0xffff7ab18114   500  ccmp x2, x8, #nZcv, ne
0xffff7ab18118   504  b.eq #+0x10 (addr 0xffff7ab18128)
0xffff7ab1811c   508  ldr x16, [x26, #40]
0xffff7ab18120   512  cmp x2, x16
0xffff7ab18124   516  b.ne #+0x124 (addr 0xffff7ab18248)
0xffff7ab18128   520  ldr lr, [jssp, #16]
0xffff7ab1812c   524  ldp xzr, fp, [jssp], #24
0xffff7ab18130   528  b #-0x1ac (addr 0xffff7ab17f84)
0xffff7ab18134   532  sub csp, jssp, #0x10 (16)
0xffff7ab18138   536  stp fp, lr, [jssp, #-16]!
0xffff7ab1813c   540  movz fp, #0xa00000000
0xffff7ab18140   544  sub csp, jssp, #0x8 (8)
0xffff7ab18144   548  str fp, [jssp, #-8]!
0xffff7ab18148   552  add fp, jssp, #0x8 (8)
0xffff7ab1814c   556  movz x10, #0x0
0xffff7ab18150   560  mov x16, lr
0xffff7ab18154   564  ldr x17, pc+116 (addr 0x0000ffff7ab181c8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab18158   568  blr x17
0xffff7ab1815c   572  lsl x0, x3, #32
0xffff7ab18160   576  movz x10, #0x0
0xffff7ab18164   580  sub csp, jssp, #0x10 (16)
0xffff7ab18168   584  stp x10, x0, [jssp, #-16]!
0xffff7ab1816c   588  movz x0, #0x2
0xffff7ab18170   592  movz x1, #0x5b88
0xffff7ab18174   596  movk x1, #0xe2, lsl #16
0xffff7ab18178   600  ldr x16, pc+88 (addr 0x0000ffff7ab181d0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab1817c   604  blr x16
0xffff7ab18180   608  str x0, [jssp, #80]
0xffff7ab18184   612  ldr x16, pc+84 (addr 0x0000ffff7ab181d8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab18188   616  blr x16
0xffff7ab1818c   620  ldr lr, [jssp, #16]
0xffff7ab18190   624  ldp xzr, fp, [jssp], #24
0xffff7ab18194   628  b #-0x1cc (addr 0xffff7ab17fc8)
0xffff7ab18198   632  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7ab1819c   636  d63f03e0       constant
0xffff7ab181a0   640  4ec04259       constant
0xffff7ab181a4   644  00000000       constant
0xffff7ab181a8   648  4ec04259       constant
0xffff7ab181ac   652  00000000       constant
0xffff7ab181b0   656  20d04519       constant
0xffff7ab181b4   660  00000000       constant
0xffff7ab181b8   664  7ab170c0       constant
0xffff7ab181bc   668  0000ffff       constant
0xffff7ab181c0   672  7ab17e80       constant
0xffff7ab181c4   676  0000ffff       constant
0xffff7ab181c8   680  7ab06820       constant
0xffff7ab181cc   684  0000ffff       constant
0xffff7ab181d0   688  7ab06260       constant
0xffff7ab181d4   692  0000ffff       constant
0xffff7ab181d8   696  7ab068e0       constant
0xffff7ab181dc   700  0000ffff       constant
0xffff7ab181e0   704  movz x16, #0x0
0xffff7ab181e4   708  sub csp, jssp, #0x10 (16)
0xffff7ab181e8   712  stp fp, lr, [jssp, #-16]!
0xffff7ab181ec   716  bl #+0x64 (addr 0xffff7ab18250)
0xffff7ab181f0   720  movz x16, #0x8
0xffff7ab181f4   724  sub csp, jssp, #0x10 (16)
0xffff7ab181f8   728  stp fp, lr, [jssp, #-16]!
0xffff7ab181fc   732  bl #+0x54 (addr 0xffff7ab18250)
0xffff7ab18200   736  movz x16, #0x10
0xffff7ab18204   740  sub csp, jssp, #0x10 (16)
0xffff7ab18208   744  stp fp, lr, [jssp, #-16]!
0xffff7ab1820c   748  bl #+0x44 (addr 0xffff7ab18250)
0xffff7ab18210   752  movz x16, #0x18
0xffff7ab18214   756  sub csp, jssp, #0x10 (16)
0xffff7ab18218   760  stp fp, lr, [jssp, #-16]!
0xffff7ab1821c   764  bl #+0x34 (addr 0xffff7ab18250)
0xffff7ab18220   768  movz x16, #0x20
0xffff7ab18224   772  sub csp, jssp, #0x10 (16)
0xffff7ab18228   776  stp fp, lr, [jssp, #-16]!
0xffff7ab1822c   780  bl #+0x24 (addr 0xffff7ab18250)
0xffff7ab18230   784  movz x16, #0x28
0xffff7ab18234   788  sub csp, jssp, #0x10 (16)
0xffff7ab18238   792  stp fp, lr, [jssp, #-16]!
0xffff7ab1823c   796  bl #+0x14 (addr 0xffff7ab18250)
0xffff7ab18240   800  movz x16, #0x30
0xffff7ab18244   804  bl #+0x1c (addr 0xffff7ab18260)
0xffff7ab18248   808  movz x16, #0x38
0xffff7ab1824c   812  bl #+0x14 (addr 0xffff7ab18260)
0xffff7ab18250   816  movz x17, #0xa00000000
0xffff7ab18254   820  sub csp, jssp, #0x10 (16)
0xffff7ab18258   824  stp x17, cp, [jssp, #-16]!
0xffff7ab1825c   828  add fp, jssp, #0x10 (16)
0xffff7ab18260   832  ldr x17, pc+24 (addr 0x0000ffff7ab18278)    ;; lazy deoptimization bailout 0
0xffff7ab18264   836  add x17, x17, x16
0xffff7ab18268   840  br x17
0xffff7ab1826c   844  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab18270   848  d63f03e0       constant
0xffff7ab18274   852  d503201f       constant
0xffff7ab18278   856  7a906000       constant
0xffff7ab1827c   860  0000ffff       constant


Safepoints (size = 21)
0xffff7ab18180   608  000 | x0 | x1 | x5 | x10 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 32)
0xffff7ab17f28  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab17fc8  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab17fe4  embedded object  (0x20d04519 <the hole>)
0xffff7ab18038  code target (STUB)  (0xffff7ab170c0)
0xffff7ab180f8  code target (STUB)  (0xffff7ab17e80)
0xffff7ab18154  code target (STUB)  (0xffff7ab06820)
0xffff7ab18178  code target (STUB)  (0xffff7ab06260)
0xffff7ab18184  code target (STUB)  (0xffff7ab068e0)
0xffff7ab18198  constant pool (size 72)
0xffff7ab18260  runtime entry
0xffff7ab1826c  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 240)
0xffff7ab18300     0  ldur x5, [x1, #15]
0xffff7ab18304     4  ldur x6, [x5, #-1]
0xffff7ab18308     8  ldr x16, pc+104 (addr 0x0000ffff7ab18370)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab1830c    12  cmp x6, x16
0xffff7ab18310    16  b.ne #+0x68 (addr 0xffff7ab18378)
0xffff7ab18314    20  ldur w6, [x1, #27]
0xffff7ab18318    24  mov x7, x0
0xffff7ab1831c    28  tbnz w7, #0, #+0x6c (addr 0xffff7ab18388)
0xffff7ab18320    32  tbnz w2, #0, #+0x1c (addr 0xffff7ab1833c)
0xffff7ab18324    36  asr x9, x2, #32
0xffff7ab18328    40  cmp w9, w6
0xffff7ab1832c    44  b.hs #+0x6c (addr 0xffff7ab18398)
0xffff7ab18330    48  add x1, x5, #0xf (15)
0xffff7ab18334    52  str x7, [x1, w9, sxtw #3]
0xffff7ab18338    56  ret
0xffff7ab1833c    60  ldur x16, [x2, #-1]
0xffff7ab18340    64  ldr x17, [x26, #120]
0xffff7ab18344    68  cmp x16, x17
0xffff7ab18348    72  b.ne #+0x60 (addr 0xffff7ab183a8)
0xffff7ab1834c    76  ldur d29, [x2, #7]
0xffff7ab18350    80  fcvtzs w9, d29
0xffff7ab18354    84  scvtf d0, w9
0xffff7ab18358    88  fcmp d29, d0
0xffff7ab1835c    92  b.ne #+0x4c (addr 0xffff7ab183a8)
0xffff7ab18360    96  b #-0x38 (addr 0xffff7ab18328)
0xffff7ab18364   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab18368   104  d63f03e0       constant
0xffff7ab1836c   108  d503201f       constant
0xffff7ab18370   112  4ec04259       constant
0xffff7ab18374   116  00000000       constant
0xffff7ab18378   120  movz x16, #0x0
0xffff7ab1837c   124  sub csp, jssp, #0x10 (16)
0xffff7ab18380   128  stp fp, lr, [jssp, #-16]!
0xffff7ab18384   132  bl #+0x34 (addr 0xffff7ab183b8)
0xffff7ab18388   136  movz x16, #0x8
0xffff7ab1838c   140  sub csp, jssp, #0x10 (16)
0xffff7ab18390   144  stp fp, lr, [jssp, #-16]!
0xffff7ab18394   148  bl #+0x24 (addr 0xffff7ab183b8)
0xffff7ab18398   152  movz x16, #0x10
0xffff7ab1839c   156  sub csp, jssp, #0x10 (16)
0xffff7ab183a0   160  stp fp, lr, [jssp, #-16]!
0xffff7ab183a4   164  bl #+0x14 (addr 0xffff7ab183b8)
0xffff7ab183a8   168  movz x16, #0x18
0xffff7ab183ac   172  sub csp, jssp, #0x10 (16)
0xffff7ab183b0   176  stp fp, lr, [jssp, #-16]!
0xffff7ab183b4   180  bl #+0x4 (addr 0xffff7ab183b8)
0xffff7ab183b8   184  movz x17, #0xa00000000
0xffff7ab183bc   188  sub csp, jssp, #0x10 (16)
0xffff7ab183c0   192  stp x17, cp, [jssp, #-16]!
0xffff7ab183c4   196  add fp, jssp, #0x10 (16)
0xffff7ab183c8   200  ldr x17, pc+24 (addr 0x0000ffff7ab183e0)    ;; lazy deoptimization bailout 0
0xffff7ab183cc   204  add x17, x17, x16
0xffff7ab183d0   208  br x17
0xffff7ab183d4   212  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab183d8   216  d63f03e0       constant
0xffff7ab183dc   220  d503201f       constant
0xffff7ab183e0   224  7a906000       constant
0xffff7ab183e4   228  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0xffff7ab18308  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab18364  constant pool (size 20)
0xffff7ab183c8  runtime entry
0xffff7ab183d4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 240)
0xffff7ab18300     0  ldur x5, [x1, #15]
0xffff7ab18304     4  ldur x6, [x5, #-1]
0xffff7ab18308     8  ldr x16, pc+104 (addr 0x0000ffff7ab18370)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab1830c    12  cmp x6, x16
0xffff7ab18310    16  b.ne #+0x68 (addr 0xffff7ab18378)
0xffff7ab18314    20  ldur w6, [x1, #27]
0xffff7ab18318    24  mov x7, x0
0xffff7ab1831c    28  tbnz w7, #0, #+0x6c (addr 0xffff7ab18388)
0xffff7ab18320    32  tbnz w2, #0, #+0x1c (addr 0xffff7ab1833c)
0xffff7ab18324    36  asr x9, x2, #32
0xffff7ab18328    40  cmp w9, w6
0xffff7ab1832c    44  b.hs #+0x6c (addr 0xffff7ab18398)
0xffff7ab18330    48  add x1, x5, #0xf (15)
0xffff7ab18334    52  str x7, [x1, w9, sxtw #3]
0xffff7ab18338    56  ret
0xffff7ab1833c    60  ldur x16, [x2, #-1]
0xffff7ab18340    64  ldr x17, [x26, #120]
0xffff7ab18344    68  cmp x16, x17
0xffff7ab18348    72  b.ne #+0x60 (addr 0xffff7ab183a8)
0xffff7ab1834c    76  ldur d29, [x2, #7]
0xffff7ab18350    80  fcvtzs w9, d29
0xffff7ab18354    84  scvtf d0, w9
0xffff7ab18358    88  fcmp d29, d0
0xffff7ab1835c    92  b.ne #+0x4c (addr 0xffff7ab183a8)
0xffff7ab18360    96  b #-0x38 (addr 0xffff7ab18328)
0xffff7ab18364   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab18368   104  d63f03e0       constant
0xffff7ab1836c   108  d503201f       constant
0xffff7ab18370   112  4ec04259       constant
0xffff7ab18374   116  00000000       constant
0xffff7ab18378   120  movz x16, #0x0
0xffff7ab1837c   124  sub csp, jssp, #0x10 (16)
0xffff7ab18380   128  stp fp, lr, [jssp, #-16]!
0xffff7ab18384   132  bl #+0x34 (addr 0xffff7ab183b8)
0xffff7ab18388   136  movz x16, #0x8
0xffff7ab1838c   140  sub csp, jssp, #0x10 (16)
0xffff7ab18390   144  stp fp, lr, [jssp, #-16]!
0xffff7ab18394   148  bl #+0x24 (addr 0xffff7ab183b8)
0xffff7ab18398   152  movz x16, #0x10
0xffff7ab1839c   156  sub csp, jssp, #0x10 (16)
0xffff7ab183a0   160  stp fp, lr, [jssp, #-16]!
0xffff7ab183a4   164  bl #+0x14 (addr 0xffff7ab183b8)
0xffff7ab183a8   168  movz x16, #0x18
0xffff7ab183ac   172  sub csp, jssp, #0x10 (16)
0xffff7ab183b0   176  stp fp, lr, [jssp, #-16]!
0xffff7ab183b4   180  bl #+0x4 (addr 0xffff7ab183b8)
0xffff7ab183b8   184  movz x17, #0xa00000000
0xffff7ab183bc   188  sub csp, jssp, #0x10 (16)
0xffff7ab183c0   192  stp x17, cp, [jssp, #-16]!
0xffff7ab183c4   196  add fp, jssp, #0x10 (16)
0xffff7ab183c8   200  ldr x17, pc+24 (addr 0x0000ffff7ab183e0)    ;; lazy deoptimization bailout 0
0xffff7ab183cc   204  add x17, x17, x16
0xffff7ab183d0   208  br x17
0xffff7ab183d4   212  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab183d8   216  d63f03e0       constant
0xffff7ab183dc   220  d503201f       constant
0xffff7ab183e0   224  7a906000       constant
0xffff7ab183e4   228  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0xffff7ab18308  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab18364  constant pool (size 20)
0xffff7ab183c8  runtime entry
0xffff7ab183d4  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 869)
0xffff7ab18460     0  ldur x5, [x1, #15]
0xffff7ab18464     4  ldur x6, [x5, #-1]
0xffff7ab18468     8  ldr x16, pc+616 (addr 0x0000ffff7ab186d0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab1846c    12  cmp x6, x16
0xffff7ab18470    16  b.ne #+0x2a0 (addr 0xffff7ab18710)
0xffff7ab18474    20  ldur w6, [x1, #27]
0xffff7ab18478    24  mov x7, x0
0xffff7ab1847c    28  tbnz w7, #0, #+0x2a4 (addr 0xffff7ab18720)
0xffff7ab18480    32  tbnz w2, #0, #+0x118 (addr 0xffff7ab18598)
0xffff7ab18484    36  asr x9, x2, #32
0xffff7ab18488    40  cmp w6, w9
0xffff7ab1848c    44  b.le #+0x10 (addr 0xffff7ab1849c)
0xffff7ab18490    48  cmp w9, w6
0xffff7ab18494    52  b.hs #+0x29c (addr 0xffff7ab18730)
0xffff7ab18498    56  b #+0xf4 (addr 0xffff7ab1858c)
0xffff7ab1849c    60  ldur w8, [x5, #11]
0xffff7ab184a0    64  cmp w8, w9
0xffff7ab184a4    68  b.gt #+0xdc (addr 0xffff7ab18580)
0xffff7ab184a8    72  adds w8, w8, #0x400 (1024)
0xffff7ab184ac    76  b.vs #+0x294 (addr 0xffff7ab18740)
0xffff7ab184b0    80  cmp w9, w8
0xffff7ab184b4    84  b.hs #+0x29c (addr 0xffff7ab18750)
0xffff7ab184b8    88  tbnz w2, #0, #+0x128 (addr 0xffff7ab185e0)
0xffff7ab184bc    92  asr x10, x2, #32
0xffff7ab184c0    96  add w8, w9, w10, lsr #1
0xffff7ab184c4   100  add w8, w8, #0x10 (16)
0xffff7ab184c8   104  movz w16, #0x95ff
0xffff7ab184cc   108  cmp w8, w16, lsl #1
0xffff7ab184d0   112  b.hs #+0x290 (addr 0xffff7ab18760)
0xffff7ab184d4   116  lsl x2, x8, #32
0xffff7ab184d8   120  lsl w3, w8, #3
0xffff7ab184dc   124  add w3, w3, #0x10 (16)
0xffff7ab184e0   128  sxtw x3, w3
0xffff7ab184e4   132  movz x4, #0xe2c0
0xffff7ab184e8   136  movk x4, #0x9ab, lsl #16
0xffff7ab184ec   140  ldp x10, x16, [x4]
0xffff7ab184f0   144  adds x8, x10, x3
0xffff7ab184f4   148  ccmp x8, x16, #nzCv, lo
0xffff7ab184f8   152  b.hi #+0x168 (addr 0xffff7ab18660)
0xffff7ab184fc   156  str x8, [x4]
0xffff7ab18500   160  orr x10, x10, #0x1
0xffff7ab18504   164  ldr x3, pc+468 (addr 0x0000ffff7ab186d8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab18508   168  stur x3, [x10, #-1]
0xffff7ab1850c   172  stur x2, [x10, #7]
0xffff7ab18510   176  ldur w2, [x10, #11]
0xffff7ab18514   180  cmp w6, w2
0xffff7ab18518   184  b.ge #+0x18 (addr 0xffff7ab18530)
0xffff7ab1851c   188  sub w2, w2, #0x1 (1)
0xffff7ab18520   192  ldr x3, pc+448 (addr 0x0000ffff7ab186e0)    ;; object: 0x20d04519 <the hole>
0xffff7ab18524   196  add x4, x10, #0xf (15)
0xffff7ab18528   200  str x3, [x4, w2, sxtw #3]
0xffff7ab1852c   204  b #-0x18 (addr 0xffff7ab18514)
0xffff7ab18530   208  cmp w6, #0x0 (0)
0xffff7ab18534   212  b.le #+0x1c (addr 0xffff7ab18550)
0xffff7ab18538   216  sub w6, w6, #0x1 (1)
0xffff7ab1853c   220  add x2, x5, #0xf (15)
0xffff7ab18540   224  ldr x3, [x2, w6, sxtw #3]
0xffff7ab18544   228  add x2, x10, #0xf (15)
0xffff7ab18548   232  str x3, [x2, w6, sxtw #3]
0xffff7ab1854c   236  b #-0x1c (addr 0xffff7ab18530)
0xffff7ab18550   240  mov x2, x10
0xffff7ab18554   244  stur x2, [x1, #15]
0xffff7ab18558   248  add x3, x1, #0xf (15)
0xffff7ab1855c   252  and x2, x1, #0xfffffffffff00000
0xffff7ab18560   256  ldr x2, [x2, #8]
0xffff7ab18564   260  tbz w2, #2, #+0x18 (addr 0xffff7ab1857c)
0xffff7ab18568   264  sub csp, jssp, #0x8 (8)
0xffff7ab1856c   268  str lr, [jssp, #-8]!
0xffff7ab18570   272  ldr x16, pc+376 (addr 0x0000ffff7ab186e8)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab18574   276  blr x16
0xffff7ab18578   280  ldr lr, [jssp], #8
0xffff7ab1857c   284  mov x5, x10
0xffff7ab18580   288  add w2, w9, #0x1 (1)
0xffff7ab18584   292  lsl x2, x2, #32
0xffff7ab18588   296  stur x2, [x1, #23]
0xffff7ab1858c   300  add x1, x5, #0xf (15)
0xffff7ab18590   304  str x7, [x1, w9, sxtw #3]
0xffff7ab18594   308  ret
0xffff7ab18598   312  sub csp, jssp, #0x10 (16)
0xffff7ab1859c   316  stp fp, lr, [jssp, #-16]!
0xffff7ab185a0   320  movz fp, #0xa00000000
0xffff7ab185a4   324  sub csp, jssp, #0x8 (8)
0xffff7ab185a8   328  str fp, [jssp, #-8]!
0xffff7ab185ac   332  add fp, jssp, #0x8 (8)
0xffff7ab185b0   336  ldur x16, [x2, #-1]
0xffff7ab185b4   340  ldr x17, [x26, #120]
0xffff7ab185b8   344  cmp x16, x17
0xffff7ab185bc   348  b.ne #+0x1b4 (addr 0xffff7ab18770)
0xffff7ab185c0   352  ldur d29, [x2, #7]
0xffff7ab185c4   356  fcvtzs w9, d29
0xffff7ab185c8   360  scvtf d0, w9
0xffff7ab185cc   364  fcmp d29, d0
0xffff7ab185d0   368  b.ne #+0x1a0 (addr 0xffff7ab18770)
0xffff7ab185d4   372  ldr lr, [jssp, #16]
0xffff7ab185d8   376  ldp xzr, fp, [jssp], #24
0xffff7ab185dc   380  b #-0x154 (addr 0xffff7ab18488)
0xffff7ab185e0   384  sub csp, jssp, #0x10 (16)
0xffff7ab185e4   388  stp fp, lr, [jssp, #-16]!
0xffff7ab185e8   392  movz fp, #0xa00000000
0xffff7ab185ec   396  sub csp, jssp, #0x8 (8)
0xffff7ab185f0   400  str fp, [jssp, #-8]!
0xffff7ab185f4   404  add fp, jssp, #0x8 (8)
0xffff7ab185f8   408  ldur x16, [x2, #-1]
0xffff7ab185fc   412  ldr x17, [x26, #120]
0xffff7ab18600   416  cmp x16, x17
0xffff7ab18604   420  b.ne #+0x30 (addr 0xffff7ab18634)
0xffff7ab18608   424  ldur d30, [x2, #7]
0xffff7ab1860c   428  fcvtzs x10, d30
0xffff7ab18610   432  cmp x10, #0x1 (1)
0xffff7ab18614   436  ccmn x10, #1, #nzcV, vc
0xffff7ab18618   440  b.vc #+0x18 (addr 0xffff7ab18630)
0xffff7ab1861c   444  sub csp, jssp, #0x8 (8)
0xffff7ab18620   448  str lr, [jssp, #-8]!
0xffff7ab18624   452  ldr x16, pc+204 (addr 0x0000ffff7ab186f0)    ;; code: STUB, DoubleToIStub, minor: 127618
0xffff7ab18628   456  blr x16
0xffff7ab1862c   460  ldr lr, [jssp], #8
0xffff7ab18630   464  b #+0x24 (addr 0xffff7ab18654)
0xffff7ab18634   468  ldp x10, x8, [x26, #64]
0xffff7ab18638   472  cmp x2, x10
0xffff7ab1863c   476  cset x10, eq
0xffff7ab18640   480  ccmp x2, x8, #nZcv, ne
0xffff7ab18644   484  b.eq #+0x10 (addr 0xffff7ab18654)
0xffff7ab18648   488  ldr x16, [x26, #40]
0xffff7ab1864c   492  cmp x2, x16
0xffff7ab18650   496  b.ne #+0x128 (addr 0xffff7ab18778)
0xffff7ab18654   500  ldr lr, [jssp, #16]
0xffff7ab18658   504  ldp xzr, fp, [jssp], #24
0xffff7ab1865c   508  b #-0x19c (addr 0xffff7ab184c0)
0xffff7ab18660   512  sub csp, jssp, #0x10 (16)
0xffff7ab18664   516  stp fp, lr, [jssp, #-16]!
0xffff7ab18668   520  movz fp, #0xa00000000
0xffff7ab1866c   524  sub csp, jssp, #0x8 (8)
0xffff7ab18670   528  str fp, [jssp, #-8]!
0xffff7ab18674   532  add fp, jssp, #0x8 (8)
0xffff7ab18678   536  movz x10, #0x0
0xffff7ab1867c   540  mov x16, lr
0xffff7ab18680   544  ldr x17, pc+120 (addr 0x0000ffff7ab186f8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab18684   548  blr x17
0xffff7ab18688   552  lsl x0, x3, #32
0xffff7ab1868c   556  movz x10, #0x0
0xffff7ab18690   560  sub csp, jssp, #0x10 (16)
0xffff7ab18694   564  stp x10, x0, [jssp, #-16]!
0xffff7ab18698   568  movz x0, #0x2
0xffff7ab1869c   572  movz x1, #0x5b88
0xffff7ab186a0   576  movk x1, #0xe2, lsl #16
0xffff7ab186a4   580  ldr x16, pc+92 (addr 0x0000ffff7ab18700)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab186a8   584  blr x16
0xffff7ab186ac   588  str x0, [jssp, #80]
0xffff7ab186b0   592  ldr x16, pc+88 (addr 0x0000ffff7ab18708)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab186b4   596  blr x16
0xffff7ab186b8   600  ldr lr, [jssp, #16]
0xffff7ab186bc   604  ldp xzr, fp, [jssp], #24
0xffff7ab186c0   608  b #-0x1bc (addr 0xffff7ab18504)
0xffff7ab186c4   612  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0xffff7ab186c8   616  d63f03e0       constant
0xffff7ab186cc   620  d503201f       constant
0xffff7ab186d0   624  4ec04259       constant
0xffff7ab186d4   628  00000000       constant
0xffff7ab186d8   632  4ec04259       constant
0xffff7ab186dc   636  00000000       constant
0xffff7ab186e0   640  20d04519       constant
0xffff7ab186e4   644  00000000       constant
0xffff7ab186e8   648  7ab170c0       constant
0xffff7ab186ec   652  0000ffff       constant
0xffff7ab186f0   656  7ab17e80       constant
0xffff7ab186f4   660  0000ffff       constant
0xffff7ab186f8   664  7ab06820       constant
0xffff7ab186fc   668  0000ffff       constant
0xffff7ab18700   672  7ab06260       constant
0xffff7ab18704   676  0000ffff       constant
0xffff7ab18708   680  7ab068e0       constant
0xffff7ab1870c   684  0000ffff       constant
0xffff7ab18710   688  movz x16, #0x0
0xffff7ab18714   692  sub csp, jssp, #0x10 (16)
0xffff7ab18718   696  stp fp, lr, [jssp, #-16]!
0xffff7ab1871c   700  bl #+0x64 (addr 0xffff7ab18780)
0xffff7ab18720   704  movz x16, #0x8
0xffff7ab18724   708  sub csp, jssp, #0x10 (16)
0xffff7ab18728   712  stp fp, lr, [jssp, #-16]!
0xffff7ab1872c   716  bl #+0x54 (addr 0xffff7ab18780)
0xffff7ab18730   720  movz x16, #0x10
0xffff7ab18734   724  sub csp, jssp, #0x10 (16)
0xffff7ab18738   728  stp fp, lr, [jssp, #-16]!
0xffff7ab1873c   732  bl #+0x44 (addr 0xffff7ab18780)
0xffff7ab18740   736  movz x16, #0x18
0xffff7ab18744   740  sub csp, jssp, #0x10 (16)
0xffff7ab18748   744  stp fp, lr, [jssp, #-16]!
0xffff7ab1874c   748  bl #+0x34 (addr 0xffff7ab18780)
0xffff7ab18750   752  movz x16, #0x20
0xffff7ab18754   756  sub csp, jssp, #0x10 (16)
0xffff7ab18758   760  stp fp, lr, [jssp, #-16]!
0xffff7ab1875c   764  bl #+0x24 (addr 0xffff7ab18780)
0xffff7ab18760   768  movz x16, #0x28
0xffff7ab18764   772  sub csp, jssp, #0x10 (16)
0xffff7ab18768   776  stp fp, lr, [jssp, #-16]!
0xffff7ab1876c   780  bl #+0x14 (addr 0xffff7ab18780)
0xffff7ab18770   784  movz x16, #0x30
0xffff7ab18774   788  bl #+0x1c (addr 0xffff7ab18790)
0xffff7ab18778   792  movz x16, #0x38
0xffff7ab1877c   796  bl #+0x14 (addr 0xffff7ab18790)
0xffff7ab18780   800  movz x17, #0xa00000000
0xffff7ab18784   804  sub csp, jssp, #0x10 (16)
0xffff7ab18788   808  stp x17, cp, [jssp, #-16]!
0xffff7ab1878c   812  add fp, jssp, #0x10 (16)
0xffff7ab18790   816  ldr x17, pc+24 (addr 0x0000ffff7ab187a8)    ;; lazy deoptimization bailout 0
0xffff7ab18794   820  add x17, x17, x16
0xffff7ab18798   824  br x17
0xffff7ab1879c   828  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab187a0   832  d63f03e0       constant
0xffff7ab187a4   836  d503201f       constant
0xffff7ab187a8   840  7a906000       constant
0xffff7ab187ac   844  0000ffff       constant


Safepoints (size = 21)
0xffff7ab186ac   588  000 | x0 | x1 | x5 | x10 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 32)
0xffff7ab18468  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab18504  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab18520  embedded object  (0x20d04519 <the hole>)
0xffff7ab18570  code target (STUB)  (0xffff7ab170c0)
0xffff7ab18624  code target (STUB)  (0xffff7ab17e80)
0xffff7ab18680  code target (STUB)  (0xffff7ab06820)
0xffff7ab186a4  code target (STUB)  (0xffff7ab06260)
0xffff7ab186b0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab186c4  constant pool (size 76)
0xffff7ab18790  runtime entry
0xffff7ab1879c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 869)
0xffff7ab18460     0  ldur x5, [x1, #15]
0xffff7ab18464     4  ldur x6, [x5, #-1]
0xffff7ab18468     8  ldr x16, pc+616 (addr 0x0000ffff7ab186d0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab1846c    12  cmp x6, x16
0xffff7ab18470    16  b.ne #+0x2a0 (addr 0xffff7ab18710)
0xffff7ab18474    20  ldur w6, [x1, #27]
0xffff7ab18478    24  mov x7, x0
0xffff7ab1847c    28  tbnz w7, #0, #+0x2a4 (addr 0xffff7ab18720)
0xffff7ab18480    32  tbnz w2, #0, #+0x118 (addr 0xffff7ab18598)
0xffff7ab18484    36  asr x9, x2, #32
0xffff7ab18488    40  cmp w6, w9
0xffff7ab1848c    44  b.le #+0x10 (addr 0xffff7ab1849c)
0xffff7ab18490    48  cmp w9, w6
0xffff7ab18494    52  b.hs #+0x29c (addr 0xffff7ab18730)
0xffff7ab18498    56  b #+0xf4 (addr 0xffff7ab1858c)
0xffff7ab1849c    60  ldur w8, [x5, #11]
0xffff7ab184a0    64  cmp w8, w9
0xffff7ab184a4    68  b.gt #+0xdc (addr 0xffff7ab18580)
0xffff7ab184a8    72  adds w8, w8, #0x400 (1024)
0xffff7ab184ac    76  b.vs #+0x294 (addr 0xffff7ab18740)
0xffff7ab184b0    80  cmp w9, w8
0xffff7ab184b4    84  b.hs #+0x29c (addr 0xffff7ab18750)
0xffff7ab184b8    88  tbnz w2, #0, #+0x128 (addr 0xffff7ab185e0)
0xffff7ab184bc    92  asr x10, x2, #32
0xffff7ab184c0    96  add w8, w9, w10, lsr #1
0xffff7ab184c4   100  add w8, w8, #0x10 (16)
0xffff7ab184c8   104  movz w16, #0x95ff
0xffff7ab184cc   108  cmp w8, w16, lsl #1
0xffff7ab184d0   112  b.hs #+0x290 (addr 0xffff7ab18760)
0xffff7ab184d4   116  lsl x2, x8, #32
0xffff7ab184d8   120  lsl w3, w8, #3
0xffff7ab184dc   124  add w3, w3, #0x10 (16)
0xffff7ab184e0   128  sxtw x3, w3
0xffff7ab184e4   132  movz x4, #0xe2c0
0xffff7ab184e8   136  movk x4, #0x9ab, lsl #16
0xffff7ab184ec   140  ldp x10, x16, [x4]
0xffff7ab184f0   144  adds x8, x10, x3
0xffff7ab184f4   148  ccmp x8, x16, #nzCv, lo
0xffff7ab184f8   152  b.hi #+0x168 (addr 0xffff7ab18660)
0xffff7ab184fc   156  str x8, [x4]
0xffff7ab18500   160  orr x10, x10, #0x1
0xffff7ab18504   164  ldr x3, pc+468 (addr 0x0000ffff7ab186d8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab18508   168  stur x3, [x10, #-1]
0xffff7ab1850c   172  stur x2, [x10, #7]
0xffff7ab18510   176  ldur w2, [x10, #11]
0xffff7ab18514   180  cmp w6, w2
0xffff7ab18518   184  b.ge #+0x18 (addr 0xffff7ab18530)
0xffff7ab1851c   188  sub w2, w2, #0x1 (1)
0xffff7ab18520   192  ldr x3, pc+448 (addr 0x0000ffff7ab186e0)    ;; object: 0x20d04519 <the hole>
0xffff7ab18524   196  add x4, x10, #0xf (15)
0xffff7ab18528   200  str x3, [x4, w2, sxtw #3]
0xffff7ab1852c   204  b #-0x18 (addr 0xffff7ab18514)
0xffff7ab18530   208  cmp w6, #0x0 (0)
0xffff7ab18534   212  b.le #+0x1c (addr 0xffff7ab18550)
0xffff7ab18538   216  sub w6, w6, #0x1 (1)
0xffff7ab1853c   220  add x2, x5, #0xf (15)
0xffff7ab18540   224  ldr x3, [x2, w6, sxtw #3]
0xffff7ab18544   228  add x2, x10, #0xf (15)
0xffff7ab18548   232  str x3, [x2, w6, sxtw #3]
0xffff7ab1854c   236  b #-0x1c (addr 0xffff7ab18530)
0xffff7ab18550   240  mov x2, x10
0xffff7ab18554   244  stur x2, [x1, #15]
0xffff7ab18558   248  add x3, x1, #0xf (15)
0xffff7ab1855c   252  and x2, x1, #0xfffffffffff00000
0xffff7ab18560   256  ldr x2, [x2, #8]
0xffff7ab18564   260  tbz w2, #2, #+0x18 (addr 0xffff7ab1857c)
0xffff7ab18568   264  sub csp, jssp, #0x8 (8)
0xffff7ab1856c   268  str lr, [jssp, #-8]!
0xffff7ab18570   272  ldr x16, pc+376 (addr 0x0000ffff7ab186e8)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab18574   276  blr x16
0xffff7ab18578   280  ldr lr, [jssp], #8
0xffff7ab1857c   284  mov x5, x10
0xffff7ab18580   288  add w2, w9, #0x1 (1)
0xffff7ab18584   292  lsl x2, x2, #32
0xffff7ab18588   296  stur x2, [x1, #23]
0xffff7ab1858c   300  add x1, x5, #0xf (15)
0xffff7ab18590   304  str x7, [x1, w9, sxtw #3]
0xffff7ab18594   308  ret
0xffff7ab18598   312  sub csp, jssp, #0x10 (16)
0xffff7ab1859c   316  stp fp, lr, [jssp, #-16]!
0xffff7ab185a0   320  movz fp, #0xa00000000
0xffff7ab185a4   324  sub csp, jssp, #0x8 (8)
0xffff7ab185a8   328  str fp, [jssp, #-8]!
0xffff7ab185ac   332  add fp, jssp, #0x8 (8)
0xffff7ab185b0   336  ldur x16, [x2, #-1]
0xffff7ab185b4   340  ldr x17, [x26, #120]
0xffff7ab185b8   344  cmp x16, x17
0xffff7ab185bc   348  b.ne #+0x1b4 (addr 0xffff7ab18770)
0xffff7ab185c0   352  ldur d29, [x2, #7]
0xffff7ab185c4   356  fcvtzs w9, d29
0xffff7ab185c8   360  scvtf d0, w9
0xffff7ab185cc   364  fcmp d29, d0
0xffff7ab185d0   368  b.ne #+0x1a0 (addr 0xffff7ab18770)
0xffff7ab185d4   372  ldr lr, [jssp, #16]
0xffff7ab185d8   376  ldp xzr, fp, [jssp], #24
0xffff7ab185dc   380  b #-0x154 (addr 0xffff7ab18488)
0xffff7ab185e0   384  sub csp, jssp, #0x10 (16)
0xffff7ab185e4   388  stp fp, lr, [jssp, #-16]!
0xffff7ab185e8   392  movz fp, #0xa00000000
0xffff7ab185ec   396  sub csp, jssp, #0x8 (8)
0xffff7ab185f0   400  str fp, [jssp, #-8]!
0xffff7ab185f4   404  add fp, jssp, #0x8 (8)
0xffff7ab185f8   408  ldur x16, [x2, #-1]
0xffff7ab185fc   412  ldr x17, [x26, #120]
0xffff7ab18600   416  cmp x16, x17
0xffff7ab18604   420  b.ne #+0x30 (addr 0xffff7ab18634)
0xffff7ab18608   424  ldur d30, [x2, #7]
0xffff7ab1860c   428  fcvtzs x10, d30
0xffff7ab18610   432  cmp x10, #0x1 (1)
0xffff7ab18614   436  ccmn x10, #1, #nzcV, vc
0xffff7ab18618   440  b.vc #+0x18 (addr 0xffff7ab18630)
0xffff7ab1861c   444  sub csp, jssp, #0x8 (8)
0xffff7ab18620   448  str lr, [jssp, #-8]!
0xffff7ab18624   452  ldr x16, pc+204 (addr 0x0000ffff7ab186f0)    ;; code: STUB, DoubleToIStub, minor: 127618
0xffff7ab18628   456  blr x16
0xffff7ab1862c   460  ldr lr, [jssp], #8
0xffff7ab18630   464  b #+0x24 (addr 0xffff7ab18654)
0xffff7ab18634   468  ldp x10, x8, [x26, #64]
0xffff7ab18638   472  cmp x2, x10
0xffff7ab1863c   476  cset x10, eq
0xffff7ab18640   480  ccmp x2, x8, #nZcv, ne
0xffff7ab18644   484  b.eq #+0x10 (addr 0xffff7ab18654)
0xffff7ab18648   488  ldr x16, [x26, #40]
0xffff7ab1864c   492  cmp x2, x16
0xffff7ab18650   496  b.ne #+0x128 (addr 0xffff7ab18778)
0xffff7ab18654   500  ldr lr, [jssp, #16]
0xffff7ab18658   504  ldp xzr, fp, [jssp], #24
0xffff7ab1865c   508  b #-0x19c (addr 0xffff7ab184c0)
0xffff7ab18660   512  sub csp, jssp, #0x10 (16)
0xffff7ab18664   516  stp fp, lr, [jssp, #-16]!
0xffff7ab18668   520  movz fp, #0xa00000000
0xffff7ab1866c   524  sub csp, jssp, #0x8 (8)
0xffff7ab18670   528  str fp, [jssp, #-8]!
0xffff7ab18674   532  add fp, jssp, #0x8 (8)
0xffff7ab18678   536  movz x10, #0x0
0xffff7ab1867c   540  mov x16, lr
0xffff7ab18680   544  ldr x17, pc+120 (addr 0x0000ffff7ab186f8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab18684   548  blr x17
0xffff7ab18688   552  lsl x0, x3, #32
0xffff7ab1868c   556  movz x10, #0x0
0xffff7ab18690   560  sub csp, jssp, #0x10 (16)
0xffff7ab18694   564  stp x10, x0, [jssp, #-16]!
0xffff7ab18698   568  movz x0, #0x2
0xffff7ab1869c   572  movz x1, #0x5b88
0xffff7ab186a0   576  movk x1, #0xe2, lsl #16
0xffff7ab186a4   580  ldr x16, pc+92 (addr 0x0000ffff7ab18700)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab186a8   584  blr x16
0xffff7ab186ac   588  str x0, [jssp, #80]
0xffff7ab186b0   592  ldr x16, pc+88 (addr 0x0000ffff7ab18708)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab186b4   596  blr x16
0xffff7ab186b8   600  ldr lr, [jssp, #16]
0xffff7ab186bc   604  ldp xzr, fp, [jssp], #24
0xffff7ab186c0   608  b #-0x1bc (addr 0xffff7ab18504)
0xffff7ab186c4   612  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0xffff7ab186c8   616  d63f03e0       constant
0xffff7ab186cc   620  d503201f       constant
0xffff7ab186d0   624  4ec04259       constant
0xffff7ab186d4   628  00000000       constant
0xffff7ab186d8   632  4ec04259       constant
0xffff7ab186dc   636  00000000       constant
0xffff7ab186e0   640  20d04519       constant
0xffff7ab186e4   644  00000000       constant
0xffff7ab186e8   648  7ab170c0       constant
0xffff7ab186ec   652  0000ffff       constant
0xffff7ab186f0   656  7ab17e80       constant
0xffff7ab186f4   660  0000ffff       constant
0xffff7ab186f8   664  7ab06820       constant
0xffff7ab186fc   668  0000ffff       constant
0xffff7ab18700   672  7ab06260       constant
0xffff7ab18704   676  0000ffff       constant
0xffff7ab18708   680  7ab068e0       constant
0xffff7ab1870c   684  0000ffff       constant
0xffff7ab18710   688  movz x16, #0x0
0xffff7ab18714   692  sub csp, jssp, #0x10 (16)
0xffff7ab18718   696  stp fp, lr, [jssp, #-16]!
0xffff7ab1871c   700  bl #+0x64 (addr 0xffff7ab18780)
0xffff7ab18720   704  movz x16, #0x8
0xffff7ab18724   708  sub csp, jssp, #0x10 (16)
0xffff7ab18728   712  stp fp, lr, [jssp, #-16]!
0xffff7ab1872c   716  bl #+0x54 (addr 0xffff7ab18780)
0xffff7ab18730   720  movz x16, #0x10
0xffff7ab18734   724  sub csp, jssp, #0x10 (16)
0xffff7ab18738   728  stp fp, lr, [jssp, #-16]!
0xffff7ab1873c   732  bl #+0x44 (addr 0xffff7ab18780)
0xffff7ab18740   736  movz x16, #0x18
0xffff7ab18744   740  sub csp, jssp, #0x10 (16)
0xffff7ab18748   744  stp fp, lr, [jssp, #-16]!
0xffff7ab1874c   748  bl #+0x34 (addr 0xffff7ab18780)
0xffff7ab18750   752  movz x16, #0x20
0xffff7ab18754   756  sub csp, jssp, #0x10 (16)
0xffff7ab18758   760  stp fp, lr, [jssp, #-16]!
0xffff7ab1875c   764  bl #+0x24 (addr 0xffff7ab18780)
0xffff7ab18760   768  movz x16, #0x28
0xffff7ab18764   772  sub csp, jssp, #0x10 (16)
0xffff7ab18768   776  stp fp, lr, [jssp, #-16]!
0xffff7ab1876c   780  bl #+0x14 (addr 0xffff7ab18780)
0xffff7ab18770   784  movz x16, #0x30
0xffff7ab18774   788  bl #+0x1c (addr 0xffff7ab18790)
0xffff7ab18778   792  movz x16, #0x38
0xffff7ab1877c   796  bl #+0x14 (addr 0xffff7ab18790)
0xffff7ab18780   800  movz x17, #0xa00000000
0xffff7ab18784   804  sub csp, jssp, #0x10 (16)
0xffff7ab18788   808  stp x17, cp, [jssp, #-16]!
0xffff7ab1878c   812  add fp, jssp, #0x10 (16)
0xffff7ab18790   816  ldr x17, pc+24 (addr 0x0000ffff7ab187a8)    ;; lazy deoptimization bailout 0
0xffff7ab18794   820  add x17, x17, x16
0xffff7ab18798   824  br x17
0xffff7ab1879c   828  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab187a0   832  d63f03e0       constant
0xffff7ab187a4   836  d503201f       constant
0xffff7ab187a8   840  7a906000       constant
0xffff7ab187ac   844  0000ffff       constant


Safepoints (size = 21)
0xffff7ab186ac   588  000 | x0 | x1 | x5 | x10 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 32)
0xffff7ab18468  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab18504  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab18520  embedded object  (0x20d04519 <the hole>)
0xffff7ab18570  code target (STUB)  (0xffff7ab170c0)
0xffff7ab18624  code target (STUB)  (0xffff7ab17e80)
0xffff7ab18680  code target (STUB)  (0xffff7ab06820)
0xffff7ab186a4  code target (STUB)  (0xffff7ab06260)
0xffff7ab186b0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab186c4  constant pool (size 76)
0xffff7ab18790  runtime entry
0xffff7ab1879c  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 280)
0xffff7ab18840     0  ldur x5, [x1, #15]
0xffff7ab18844     4  ldur x6, [x5, #-1]
0xffff7ab18848     8  ldr x16, pc+152 (addr 0x0000ffff7ab188e0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab1884c    12  cmp x6, x16
0xffff7ab18850    16  b.ne #+0xa0 (addr 0xffff7ab188f0)
0xffff7ab18854    20  ldur w6, [x1, #27]
0xffff7ab18858    24  tbnz w2, #0, #+0x54 (addr 0xffff7ab188ac)
0xffff7ab1885c    28  asr x8, x2, #32
0xffff7ab18860    32  cmp w8, w6
0xffff7ab18864    36  b.hs #+0x9c (addr 0xffff7ab18900)
0xffff7ab18868    40  mov x1, x0
0xffff7ab1886c    44  add x2, x5, #0xf (15)
0xffff7ab18870    48  str x1, [x2, w8, sxtw #3]
0xffff7ab18874    52  add x2, x2, w8, sxtw #3
0xffff7ab18878    56  tbz w1, #0, #+0x30 (addr 0xffff7ab188a8)
0xffff7ab1887c    60  and x1, x1, #0xfffffffffff00000
0xffff7ab18880    64  ldr x1, [x1, #8]
0xffff7ab18884    68  tbz w1, #1, #+0x24 (addr 0xffff7ab188a8)
0xffff7ab18888    72  and x1, x5, #0xfffffffffff00000
0xffff7ab1888c    76  ldr x1, [x1, #8]
0xffff7ab18890    80  tbz w1, #2, #+0x18 (addr 0xffff7ab188a8)
0xffff7ab18894    84  sub csp, jssp, #0x8 (8)
0xffff7ab18898    88  str lr, [jssp, #-8]!
0xffff7ab1889c    92  ldr x16, pc+76 (addr 0x0000ffff7ab188e8)    ;; code: STUB, RecordWriteStub, minor: 67621
0xffff7ab188a0    96  blr x16
0xffff7ab188a4   100  ldr lr, [jssp], #8
0xffff7ab188a8   104  ret
0xffff7ab188ac   108  ldur x16, [x2, #-1]
0xffff7ab188b0   112  ldr x17, [x26, #120]
0xffff7ab188b4   116  cmp x16, x17
0xffff7ab188b8   120  b.ne #+0x58 (addr 0xffff7ab18910)
0xffff7ab188bc   124  ldur d29, [x2, #7]
0xffff7ab188c0   128  fcvtzs w8, d29
0xffff7ab188c4   132  scvtf d0, w8
0xffff7ab188c8   136  fcmp d29, d0
0xffff7ab188cc   140  b.ne #+0x44 (addr 0xffff7ab18910)
0xffff7ab188d0   144  b #-0x70 (addr 0xffff7ab18860)
0xffff7ab188d4   148  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab188d8   152  d63f03e0       constant
0xffff7ab188dc   156  d503201f       constant
0xffff7ab188e0   160  4ec04259       constant
0xffff7ab188e4   164  00000000       constant
0xffff7ab188e8   168  7ab16760       constant
0xffff7ab188ec   172  0000ffff       constant
0xffff7ab188f0   176  movz x16, #0x0
0xffff7ab188f4   180  sub csp, jssp, #0x10 (16)
0xffff7ab188f8   184  stp fp, lr, [jssp, #-16]!
0xffff7ab188fc   188  bl #+0x24 (addr 0xffff7ab18920)
0xffff7ab18900   192  movz x16, #0x8
0xffff7ab18904   196  sub csp, jssp, #0x10 (16)
0xffff7ab18908   200  stp fp, lr, [jssp, #-16]!
0xffff7ab1890c   204  bl #+0x14 (addr 0xffff7ab18920)
0xffff7ab18910   208  movz x16, #0x10
0xffff7ab18914   212  sub csp, jssp, #0x10 (16)
0xffff7ab18918   216  stp fp, lr, [jssp, #-16]!
0xffff7ab1891c   220  bl #+0x4 (addr 0xffff7ab18920)
0xffff7ab18920   224  movz x17, #0xa00000000
0xffff7ab18924   228  sub csp, jssp, #0x10 (16)
0xffff7ab18928   232  stp x17, cp, [jssp, #-16]!
0xffff7ab1892c   236  add fp, jssp, #0x10 (16)
0xffff7ab18930   240  ldr x17, pc+24 (addr 0x0000ffff7ab18948)    ;; lazy deoptimization bailout 0
0xffff7ab18934   244  add x17, x17, x16
0xffff7ab18938   248  br x17
0xffff7ab1893c   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab18940   256  d63f03e0       constant
0xffff7ab18944   260  d503201f       constant
0xffff7ab18948   264  7a906000       constant
0xffff7ab1894c   268  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 20)
0xffff7ab18848  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab1889c  code target (STUB)  (0xffff7ab16760)
0xffff7ab188d4  constant pool (size 28)
0xffff7ab18930  runtime entry
0xffff7ab1893c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 280)
0xffff7ab18840     0  ldur x5, [x1, #15]
0xffff7ab18844     4  ldur x6, [x5, #-1]
0xffff7ab18848     8  ldr x16, pc+152 (addr 0x0000ffff7ab188e0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab1884c    12  cmp x6, x16
0xffff7ab18850    16  b.ne #+0xa0 (addr 0xffff7ab188f0)
0xffff7ab18854    20  ldur w6, [x1, #27]
0xffff7ab18858    24  tbnz w2, #0, #+0x54 (addr 0xffff7ab188ac)
0xffff7ab1885c    28  asr x8, x2, #32
0xffff7ab18860    32  cmp w8, w6
0xffff7ab18864    36  b.hs #+0x9c (addr 0xffff7ab18900)
0xffff7ab18868    40  mov x1, x0
0xffff7ab1886c    44  add x2, x5, #0xf (15)
0xffff7ab18870    48  str x1, [x2, w8, sxtw #3]
0xffff7ab18874    52  add x2, x2, w8, sxtw #3
0xffff7ab18878    56  tbz w1, #0, #+0x30 (addr 0xffff7ab188a8)
0xffff7ab1887c    60  and x1, x1, #0xfffffffffff00000
0xffff7ab18880    64  ldr x1, [x1, #8]
0xffff7ab18884    68  tbz w1, #1, #+0x24 (addr 0xffff7ab188a8)
0xffff7ab18888    72  and x1, x5, #0xfffffffffff00000
0xffff7ab1888c    76  ldr x1, [x1, #8]
0xffff7ab18890    80  tbz w1, #2, #+0x18 (addr 0xffff7ab188a8)
0xffff7ab18894    84  sub csp, jssp, #0x8 (8)
0xffff7ab18898    88  str lr, [jssp, #-8]!
0xffff7ab1889c    92  ldr x16, pc+76 (addr 0x0000ffff7ab188e8)    ;; code: STUB, RecordWriteStub, minor: 67621
0xffff7ab188a0    96  blr x16
0xffff7ab188a4   100  ldr lr, [jssp], #8
0xffff7ab188a8   104  ret
0xffff7ab188ac   108  ldur x16, [x2, #-1]
0xffff7ab188b0   112  ldr x17, [x26, #120]
0xffff7ab188b4   116  cmp x16, x17
0xffff7ab188b8   120  b.ne #+0x58 (addr 0xffff7ab18910)
0xffff7ab188bc   124  ldur d29, [x2, #7]
0xffff7ab188c0   128  fcvtzs w8, d29
0xffff7ab188c4   132  scvtf d0, w8
0xffff7ab188c8   136  fcmp d29, d0
0xffff7ab188cc   140  b.ne #+0x44 (addr 0xffff7ab18910)
0xffff7ab188d0   144  b #-0x70 (addr 0xffff7ab18860)
0xffff7ab188d4   148  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab188d8   152  d63f03e0       constant
0xffff7ab188dc   156  d503201f       constant
0xffff7ab188e0   160  4ec04259       constant
0xffff7ab188e4   164  00000000       constant
0xffff7ab188e8   168  7ab16760       constant
0xffff7ab188ec   172  0000ffff       constant
0xffff7ab188f0   176  movz x16, #0x0
0xffff7ab188f4   180  sub csp, jssp, #0x10 (16)
0xffff7ab188f8   184  stp fp, lr, [jssp, #-16]!
0xffff7ab188fc   188  bl #+0x24 (addr 0xffff7ab18920)
0xffff7ab18900   192  movz x16, #0x8
0xffff7ab18904   196  sub csp, jssp, #0x10 (16)
0xffff7ab18908   200  stp fp, lr, [jssp, #-16]!
0xffff7ab1890c   204  bl #+0x14 (addr 0xffff7ab18920)
0xffff7ab18910   208  movz x16, #0x10
0xffff7ab18914   212  sub csp, jssp, #0x10 (16)
0xffff7ab18918   216  stp fp, lr, [jssp, #-16]!
0xffff7ab1891c   220  bl #+0x4 (addr 0xffff7ab18920)
0xffff7ab18920   224  movz x17, #0xa00000000
0xffff7ab18924   228  sub csp, jssp, #0x10 (16)
0xffff7ab18928   232  stp x17, cp, [jssp, #-16]!
0xffff7ab1892c   236  add fp, jssp, #0x10 (16)
0xffff7ab18930   240  ldr x17, pc+24 (addr 0x0000ffff7ab18948)    ;; lazy deoptimization bailout 0
0xffff7ab18934   244  add x17, x17, x16
0xffff7ab18938   248  br x17
0xffff7ab1893c   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab18940   256  d63f03e0       constant
0xffff7ab18944   260  d503201f       constant
0xffff7ab18948   264  7a906000       constant
0xffff7ab1894c   268  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 20)
0xffff7ab18848  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab1889c  code target (STUB)  (0xffff7ab16760)
0xffff7ab188d4  constant pool (size 28)
0xffff7ab18930  runtime entry
0xffff7ab1893c  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 909)
0xffff7ab189c0     0  ldur x5, [x1, #15]
0xffff7ab189c4     4  ldur x6, [x5, #-1]
0xffff7ab189c8     8  ldr x16, pc+664 (addr 0x0000ffff7ab18c60)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab189cc    12  cmp x6, x16
0xffff7ab189d0    16  b.ne #+0x2d8 (addr 0xffff7ab18ca8)
0xffff7ab189d4    20  ldur w6, [x1, #27]
0xffff7ab189d8    24  tbnz w2, #0, #+0x150 (addr 0xffff7ab18b28)
0xffff7ab189dc    28  asr x8, x2, #32
0xffff7ab189e0    32  cmp w6, w8
0xffff7ab189e4    36  b.eq #+0x10 (addr 0xffff7ab189f4)
0xffff7ab189e8    40  cmp w8, w6
0xffff7ab189ec    44  b.hs #+0x2cc (addr 0xffff7ab18cb8)
0xffff7ab189f0    48  b #+0xf4 (addr 0xffff7ab18ae4)
0xffff7ab189f4    52  ldur w7, [x5, #11]
0xffff7ab189f8    56  cmp w7, w8
0xffff7ab189fc    60  b.gt #+0xdc (addr 0xffff7ab18ad8)
0xffff7ab18a00    64  adds w7, w7, #0x400 (1024)
0xffff7ab18a04    68  b.vs #+0x2c4 (addr 0xffff7ab18cc8)
0xffff7ab18a08    72  cmp w8, w7
0xffff7ab18a0c    76  b.hs #+0x2cc (addr 0xffff7ab18cd8)
0xffff7ab18a10    80  tbnz w2, #0, #+0x160 (addr 0xffff7ab18b70)
0xffff7ab18a14    84  asr x9, x2, #32
0xffff7ab18a18    88  add w7, w8, w9, lsr #1
0xffff7ab18a1c    92  add w7, w7, #0x10 (16)
0xffff7ab18a20    96  movz w16, #0x95ff
0xffff7ab18a24   100  cmp w7, w16, lsl #1
0xffff7ab18a28   104  b.hs #+0x2c0 (addr 0xffff7ab18ce8)
0xffff7ab18a2c   108  lsl x2, x7, #32
0xffff7ab18a30   112  lsl w3, w7, #3
0xffff7ab18a34   116  add w3, w3, #0x10 (16)
0xffff7ab18a38   120  sxtw x3, w3
0xffff7ab18a3c   124  movz x4, #0xe2c0
0xffff7ab18a40   128  movk x4, #0x9ab, lsl #16
0xffff7ab18a44   132  ldp x9, x16, [x4]
0xffff7ab18a48   136  adds x7, x9, x3
0xffff7ab18a4c   140  ccmp x7, x16, #nzCv, lo
0xffff7ab18a50   144  b.hi #+0x1a0 (addr 0xffff7ab18bf0)
0xffff7ab18a54   148  str x7, [x4]
0xffff7ab18a58   152  orr x9, x9, #0x1
0xffff7ab18a5c   156  ldr x3, pc+524 (addr 0x0000ffff7ab18c68)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab18a60   160  stur x3, [x9, #-1]
0xffff7ab18a64   164  stur x2, [x9, #7]
0xffff7ab18a68   168  ldur w2, [x9, #11]
0xffff7ab18a6c   172  cmp w6, w2
0xffff7ab18a70   176  b.ge #+0x18 (addr 0xffff7ab18a88)
0xffff7ab18a74   180  sub w2, w2, #0x1 (1)
0xffff7ab18a78   184  ldr x3, pc+504 (addr 0x0000ffff7ab18c70)    ;; object: 0x20d04519 <the hole>
0xffff7ab18a7c   188  add x4, x9, #0xf (15)
0xffff7ab18a80   192  str x3, [x4, w2, sxtw #3]
0xffff7ab18a84   196  b #-0x18 (addr 0xffff7ab18a6c)
0xffff7ab18a88   200  cmp w6, #0x0 (0)
0xffff7ab18a8c   204  b.le #+0x1c (addr 0xffff7ab18aa8)
0xffff7ab18a90   208  sub w6, w6, #0x1 (1)
0xffff7ab18a94   212  add x2, x5, #0xf (15)
0xffff7ab18a98   216  ldr x3, [x2, w6, sxtw #3]
0xffff7ab18a9c   220  add x2, x9, #0xf (15)
0xffff7ab18aa0   224  str x3, [x2, w6, sxtw #3]
0xffff7ab18aa4   228  b #-0x1c (addr 0xffff7ab18a88)
0xffff7ab18aa8   232  mov x2, x9
0xffff7ab18aac   236  stur x2, [x1, #15]
0xffff7ab18ab0   240  add x3, x1, #0xf (15)
0xffff7ab18ab4   244  and x2, x1, #0xfffffffffff00000
0xffff7ab18ab8   248  ldr x2, [x2, #8]
0xffff7ab18abc   252  tbz w2, #2, #+0x18 (addr 0xffff7ab18ad4)
0xffff7ab18ac0   256  sub csp, jssp, #0x8 (8)
0xffff7ab18ac4   260  str lr, [jssp, #-8]!
0xffff7ab18ac8   264  ldr x16, pc+432 (addr 0x0000ffff7ab18c78)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab18acc   268  blr x16
0xffff7ab18ad0   272  ldr lr, [jssp], #8
0xffff7ab18ad4   276  mov x5, x9
0xffff7ab18ad8   280  add w2, w8, #0x1 (1)
0xffff7ab18adc   284  lsl x2, x2, #32
0xffff7ab18ae0   288  stur x2, [x1, #23]
0xffff7ab18ae4   292  mov x1, x0
0xffff7ab18ae8   296  add x2, x5, #0xf (15)
0xffff7ab18aec   300  str x1, [x2, w8, sxtw #3]
0xffff7ab18af0   304  add x2, x2, w8, sxtw #3
0xffff7ab18af4   308  tbz w1, #0, #+0x30 (addr 0xffff7ab18b24)
0xffff7ab18af8   312  and x1, x1, #0xfffffffffff00000
0xffff7ab18afc   316  ldr x1, [x1, #8]
0xffff7ab18b00   320  tbz w1, #1, #+0x24 (addr 0xffff7ab18b24)
0xffff7ab18b04   324  and x1, x5, #0xfffffffffff00000
0xffff7ab18b08   328  ldr x1, [x1, #8]
0xffff7ab18b0c   332  tbz w1, #2, #+0x18 (addr 0xffff7ab18b24)
0xffff7ab18b10   336  sub csp, jssp, #0x8 (8)
0xffff7ab18b14   340  str lr, [jssp, #-8]!
0xffff7ab18b18   344  ldr x16, pc+360 (addr 0x0000ffff7ab18c80)    ;; code: STUB, RecordWriteStub, minor: 67621
0xffff7ab18b1c   348  blr x16
0xffff7ab18b20   352  ldr lr, [jssp], #8
0xffff7ab18b24   356  ret
0xffff7ab18b28   360  sub csp, jssp, #0x10 (16)
0xffff7ab18b2c   364  stp fp, lr, [jssp, #-16]!
0xffff7ab18b30   368  movz fp, #0xa00000000
0xffff7ab18b34   372  sub csp, jssp, #0x8 (8)
0xffff7ab18b38   376  str fp, [jssp, #-8]!
0xffff7ab18b3c   380  add fp, jssp, #0x8 (8)
0xffff7ab18b40   384  ldur x16, [x2, #-1]
0xffff7ab18b44   388  ldr x17, [x26, #120]
0xffff7ab18b48   392  cmp x16, x17
0xffff7ab18b4c   396  b.ne #+0x1ac (addr 0xffff7ab18cf8)
0xffff7ab18b50   400  ldur d29, [x2, #7]
0xffff7ab18b54   404  fcvtzs w8, d29
0xffff7ab18b58   408  scvtf d0, w8
0xffff7ab18b5c   412  fcmp d29, d0
0xffff7ab18b60   416  b.ne #+0x198 (addr 0xffff7ab18cf8)
0xffff7ab18b64   420  ldr lr, [jssp, #16]
0xffff7ab18b68   424  ldp xzr, fp, [jssp], #24
0xffff7ab18b6c   428  b #-0x18c (addr 0xffff7ab189e0)
0xffff7ab18b70   432  sub csp, jssp, #0x10 (16)
0xffff7ab18b74   436  stp fp, lr, [jssp, #-16]!
0xffff7ab18b78   440  movz fp, #0xa00000000
0xffff7ab18b7c   444  sub csp, jssp, #0x8 (8)
0xffff7ab18b80   448  str fp, [jssp, #-8]!
0xffff7ab18b84   452  add fp, jssp, #0x8 (8)
0xffff7ab18b88   456  ldur x16, [x2, #-1]
0xffff7ab18b8c   460  ldr x17, [x26, #120]
0xffff7ab18b90   464  cmp x16, x17
0xffff7ab18b94   468  b.ne #+0x30 (addr 0xffff7ab18bc4)
0xffff7ab18b98   472  ldur d30, [x2, #7]
0xffff7ab18b9c   476  fcvtzs x9, d30
0xffff7ab18ba0   480  cmp x9, #0x1 (1)
0xffff7ab18ba4   484  ccmn x9, #1, #nzcV, vc
0xffff7ab18ba8   488  b.vc #+0x18 (addr 0xffff7ab18bc0)
0xffff7ab18bac   492  sub csp, jssp, #0x8 (8)
0xffff7ab18bb0   496  str lr, [jssp, #-8]!
0xffff7ab18bb4   500  ldr x16, pc+212 (addr 0x0000ffff7ab18c88)    ;; code: STUB, DoubleToIStub, minor: 127554
0xffff7ab18bb8   504  blr x16
0xffff7ab18bbc   508  ldr lr, [jssp], #8
0xffff7ab18bc0   512  b #+0x24 (addr 0xffff7ab18be4)
0xffff7ab18bc4   516  ldp x9, x7, [x26, #64]
0xffff7ab18bc8   520  cmp x2, x9
0xffff7ab18bcc   524  cset x9, eq
0xffff7ab18bd0   528  ccmp x2, x7, #nZcv, ne
0xffff7ab18bd4   532  b.eq #+0x10 (addr 0xffff7ab18be4)
0xffff7ab18bd8   536  ldr x16, [x26, #40]
0xffff7ab18bdc   540  cmp x2, x16
0xffff7ab18be0   544  b.ne #+0x120 (addr 0xffff7ab18d00)
0xffff7ab18be4   548  ldr lr, [jssp, #16]
0xffff7ab18be8   552  ldp xzr, fp, [jssp], #24
0xffff7ab18bec   556  b #-0x1d4 (addr 0xffff7ab18a18)
0xffff7ab18bf0   560  sub csp, jssp, #0x10 (16)
0xffff7ab18bf4   564  stp fp, lr, [jssp, #-16]!
0xffff7ab18bf8   568  movz fp, #0xa00000000
0xffff7ab18bfc   572  sub csp, jssp, #0x8 (8)
0xffff7ab18c00   576  str fp, [jssp, #-8]!
0xffff7ab18c04   580  add fp, jssp, #0x8 (8)
0xffff7ab18c08   584  movz x9, #0x0
0xffff7ab18c0c   588  mov x16, lr
0xffff7ab18c10   592  ldr x17, pc+128 (addr 0x0000ffff7ab18c90)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab18c14   596  blr x17
0xffff7ab18c18   600  lsl x0, x3, #32
0xffff7ab18c1c   604  movz x10, #0x0
0xffff7ab18c20   608  sub csp, jssp, #0x10 (16)
0xffff7ab18c24   612  stp x10, x0, [jssp, #-16]!
0xffff7ab18c28   616  movz x0, #0x2
0xffff7ab18c2c   620  movz x1, #0x5b88
0xffff7ab18c30   624  movk x1, #0xe2, lsl #16
0xffff7ab18c34   628  ldr x16, pc+100 (addr 0x0000ffff7ab18c98)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab18c38   632  blr x16
0xffff7ab18c3c   636  str x0, [jssp, #72]
0xffff7ab18c40   640  ldr x16, pc+96 (addr 0x0000ffff7ab18ca0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab18c44   644  blr x16
0xffff7ab18c48   648  ldr lr, [jssp, #16]
0xffff7ab18c4c   652  ldp xzr, fp, [jssp], #24
0xffff7ab18c50   656  b #-0x1f4 (addr 0xffff7ab18a5c)
0xffff7ab18c54   660  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0xffff7ab18c58   664  d63f03e0       constant
0xffff7ab18c5c   668  d503201f       constant
0xffff7ab18c60   672  4ec04259       constant
0xffff7ab18c64   676  00000000       constant
0xffff7ab18c68   680  4ec04259       constant
0xffff7ab18c6c   684  00000000       constant
0xffff7ab18c70   688  20d04519       constant
0xffff7ab18c74   692  00000000       constant
0xffff7ab18c78   696  7ab170c0       constant
0xffff7ab18c7c   700  0000ffff       constant
0xffff7ab18c80   704  7ab16760       constant
0xffff7ab18c84   708  0000ffff       constant
0xffff7ab18c88   712  7ab178a0       constant
0xffff7ab18c8c   716  0000ffff       constant
0xffff7ab18c90   720  7ab06820       constant
0xffff7ab18c94   724  0000ffff       constant
0xffff7ab18c98   728  7ab06260       constant
0xffff7ab18c9c   732  0000ffff       constant
0xffff7ab18ca0   736  7ab068e0       constant
0xffff7ab18ca4   740  0000ffff       constant
0xffff7ab18ca8   744  movz x16, #0x0
0xffff7ab18cac   748  sub csp, jssp, #0x10 (16)
0xffff7ab18cb0   752  stp fp, lr, [jssp, #-16]!
0xffff7ab18cb4   756  bl #+0x54 (addr 0xffff7ab18d08)
0xffff7ab18cb8   760  movz x16, #0x8
0xffff7ab18cbc   764  sub csp, jssp, #0x10 (16)
0xffff7ab18cc0   768  stp fp, lr, [jssp, #-16]!
0xffff7ab18cc4   772  bl #+0x44 (addr 0xffff7ab18d08)
0xffff7ab18cc8   776  movz x16, #0x10
0xffff7ab18ccc   780  sub csp, jssp, #0x10 (16)
0xffff7ab18cd0   784  stp fp, lr, [jssp, #-16]!
0xffff7ab18cd4   788  bl #+0x34 (addr 0xffff7ab18d08)
0xffff7ab18cd8   792  movz x16, #0x18
0xffff7ab18cdc   796  sub csp, jssp, #0x10 (16)
0xffff7ab18ce0   800  stp fp, lr, [jssp, #-16]!
0xffff7ab18ce4   804  bl #+0x24 (addr 0xffff7ab18d08)
0xffff7ab18ce8   808  movz x16, #0x20
0xffff7ab18cec   812  sub csp, jssp, #0x10 (16)
0xffff7ab18cf0   816  stp fp, lr, [jssp, #-16]!
0xffff7ab18cf4   820  bl #+0x14 (addr 0xffff7ab18d08)
0xffff7ab18cf8   824  movz x16, #0x28
0xffff7ab18cfc   828  bl #+0x1c (addr 0xffff7ab18d18)
0xffff7ab18d00   832  movz x16, #0x30
0xffff7ab18d04   836  bl #+0x14 (addr 0xffff7ab18d18)
0xffff7ab18d08   840  movz x17, #0xa00000000
0xffff7ab18d0c   844  sub csp, jssp, #0x10 (16)
0xffff7ab18d10   848  stp x17, cp, [jssp, #-16]!
0xffff7ab18d14   852  add fp, jssp, #0x10 (16)
0xffff7ab18d18   856  ldr x17, pc+24 (addr 0x0000ffff7ab18d30)    ;; lazy deoptimization bailout 0
0xffff7ab18d1c   860  add x17, x17, x16
0xffff7ab18d20   864  br x17
0xffff7ab18d24   868  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab18d28   872  d63f03e0       constant
0xffff7ab18d2c   876  d503201f       constant
0xffff7ab18d30   880  7a906000       constant
0xffff7ab18d34   884  0000ffff       constant


Safepoints (size = 21)
0xffff7ab18c3c   636  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 35)
0xffff7ab189c8  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab18a5c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab18a78  embedded object  (0x20d04519 <the hole>)
0xffff7ab18ac8  code target (STUB)  (0xffff7ab170c0)
0xffff7ab18b18  code target (STUB)  (0xffff7ab16760)
0xffff7ab18bb4  code target (STUB)  (0xffff7ab178a0)
0xffff7ab18c10  code target (STUB)  (0xffff7ab06820)
0xffff7ab18c34  code target (STUB)  (0xffff7ab06260)
0xffff7ab18c40  code target (STUB)  (0xffff7ab068e0)
0xffff7ab18c54  constant pool (size 84)
0xffff7ab18d18  runtime entry
0xffff7ab18d24  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 909)
0xffff7ab189c0     0  ldur x5, [x1, #15]
0xffff7ab189c4     4  ldur x6, [x5, #-1]
0xffff7ab189c8     8  ldr x16, pc+664 (addr 0x0000ffff7ab18c60)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab189cc    12  cmp x6, x16
0xffff7ab189d0    16  b.ne #+0x2d8 (addr 0xffff7ab18ca8)
0xffff7ab189d4    20  ldur w6, [x1, #27]
0xffff7ab189d8    24  tbnz w2, #0, #+0x150 (addr 0xffff7ab18b28)
0xffff7ab189dc    28  asr x8, x2, #32
0xffff7ab189e0    32  cmp w6, w8
0xffff7ab189e4    36  b.eq #+0x10 (addr 0xffff7ab189f4)
0xffff7ab189e8    40  cmp w8, w6
0xffff7ab189ec    44  b.hs #+0x2cc (addr 0xffff7ab18cb8)
0xffff7ab189f0    48  b #+0xf4 (addr 0xffff7ab18ae4)
0xffff7ab189f4    52  ldur w7, [x5, #11]
0xffff7ab189f8    56  cmp w7, w8
0xffff7ab189fc    60  b.gt #+0xdc (addr 0xffff7ab18ad8)
0xffff7ab18a00    64  adds w7, w7, #0x400 (1024)
0xffff7ab18a04    68  b.vs #+0x2c4 (addr 0xffff7ab18cc8)
0xffff7ab18a08    72  cmp w8, w7
0xffff7ab18a0c    76  b.hs #+0x2cc (addr 0xffff7ab18cd8)
0xffff7ab18a10    80  tbnz w2, #0, #+0x160 (addr 0xffff7ab18b70)
0xffff7ab18a14    84  asr x9, x2, #32
0xffff7ab18a18    88  add w7, w8, w9, lsr #1
0xffff7ab18a1c    92  add w7, w7, #0x10 (16)
0xffff7ab18a20    96  movz w16, #0x95ff
0xffff7ab18a24   100  cmp w7, w16, lsl #1
0xffff7ab18a28   104  b.hs #+0x2c0 (addr 0xffff7ab18ce8)
0xffff7ab18a2c   108  lsl x2, x7, #32
0xffff7ab18a30   112  lsl w3, w7, #3
0xffff7ab18a34   116  add w3, w3, #0x10 (16)
0xffff7ab18a38   120  sxtw x3, w3
0xffff7ab18a3c   124  movz x4, #0xe2c0
0xffff7ab18a40   128  movk x4, #0x9ab, lsl #16
0xffff7ab18a44   132  ldp x9, x16, [x4]
0xffff7ab18a48   136  adds x7, x9, x3
0xffff7ab18a4c   140  ccmp x7, x16, #nzCv, lo
0xffff7ab18a50   144  b.hi #+0x1a0 (addr 0xffff7ab18bf0)
0xffff7ab18a54   148  str x7, [x4]
0xffff7ab18a58   152  orr x9, x9, #0x1
0xffff7ab18a5c   156  ldr x3, pc+524 (addr 0x0000ffff7ab18c68)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab18a60   160  stur x3, [x9, #-1]
0xffff7ab18a64   164  stur x2, [x9, #7]
0xffff7ab18a68   168  ldur w2, [x9, #11]
0xffff7ab18a6c   172  cmp w6, w2
0xffff7ab18a70   176  b.ge #+0x18 (addr 0xffff7ab18a88)
0xffff7ab18a74   180  sub w2, w2, #0x1 (1)
0xffff7ab18a78   184  ldr x3, pc+504 (addr 0x0000ffff7ab18c70)    ;; object: 0x20d04519 <the hole>
0xffff7ab18a7c   188  add x4, x9, #0xf (15)
0xffff7ab18a80   192  str x3, [x4, w2, sxtw #3]
0xffff7ab18a84   196  b #-0x18 (addr 0xffff7ab18a6c)
0xffff7ab18a88   200  cmp w6, #0x0 (0)
0xffff7ab18a8c   204  b.le #+0x1c (addr 0xffff7ab18aa8)
0xffff7ab18a90   208  sub w6, w6, #0x1 (1)
0xffff7ab18a94   212  add x2, x5, #0xf (15)
0xffff7ab18a98   216  ldr x3, [x2, w6, sxtw #3]
0xffff7ab18a9c   220  add x2, x9, #0xf (15)
0xffff7ab18aa0   224  str x3, [x2, w6, sxtw #3]
0xffff7ab18aa4   228  b #-0x1c (addr 0xffff7ab18a88)
0xffff7ab18aa8   232  mov x2, x9
0xffff7ab18aac   236  stur x2, [x1, #15]
0xffff7ab18ab0   240  add x3, x1, #0xf (15)
0xffff7ab18ab4   244  and x2, x1, #0xfffffffffff00000
0xffff7ab18ab8   248  ldr x2, [x2, #8]
0xffff7ab18abc   252  tbz w2, #2, #+0x18 (addr 0xffff7ab18ad4)
0xffff7ab18ac0   256  sub csp, jssp, #0x8 (8)
0xffff7ab18ac4   260  str lr, [jssp, #-8]!
0xffff7ab18ac8   264  ldr x16, pc+432 (addr 0x0000ffff7ab18c78)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab18acc   268  blr x16
0xffff7ab18ad0   272  ldr lr, [jssp], #8
0xffff7ab18ad4   276  mov x5, x9
0xffff7ab18ad8   280  add w2, w8, #0x1 (1)
0xffff7ab18adc   284  lsl x2, x2, #32
0xffff7ab18ae0   288  stur x2, [x1, #23]
0xffff7ab18ae4   292  mov x1, x0
0xffff7ab18ae8   296  add x2, x5, #0xf (15)
0xffff7ab18aec   300  str x1, [x2, w8, sxtw #3]
0xffff7ab18af0   304  add x2, x2, w8, sxtw #3
0xffff7ab18af4   308  tbz w1, #0, #+0x30 (addr 0xffff7ab18b24)
0xffff7ab18af8   312  and x1, x1, #0xfffffffffff00000
0xffff7ab18afc   316  ldr x1, [x1, #8]
0xffff7ab18b00   320  tbz w1, #1, #+0x24 (addr 0xffff7ab18b24)
0xffff7ab18b04   324  and x1, x5, #0xfffffffffff00000
0xffff7ab18b08   328  ldr x1, [x1, #8]
0xffff7ab18b0c   332  tbz w1, #2, #+0x18 (addr 0xffff7ab18b24)
0xffff7ab18b10   336  sub csp, jssp, #0x8 (8)
0xffff7ab18b14   340  str lr, [jssp, #-8]!
0xffff7ab18b18   344  ldr x16, pc+360 (addr 0x0000ffff7ab18c80)    ;; code: STUB, RecordWriteStub, minor: 67621
0xffff7ab18b1c   348  blr x16
0xffff7ab18b20   352  ldr lr, [jssp], #8
0xffff7ab18b24   356  ret
0xffff7ab18b28   360  sub csp, jssp, #0x10 (16)
0xffff7ab18b2c   364  stp fp, lr, [jssp, #-16]!
0xffff7ab18b30   368  movz fp, #0xa00000000
0xffff7ab18b34   372  sub csp, jssp, #0x8 (8)
0xffff7ab18b38   376  str fp, [jssp, #-8]!
0xffff7ab18b3c   380  add fp, jssp, #0x8 (8)
0xffff7ab18b40   384  ldur x16, [x2, #-1]
0xffff7ab18b44   388  ldr x17, [x26, #120]
0xffff7ab18b48   392  cmp x16, x17
0xffff7ab18b4c   396  b.ne #+0x1ac (addr 0xffff7ab18cf8)
0xffff7ab18b50   400  ldur d29, [x2, #7]
0xffff7ab18b54   404  fcvtzs w8, d29
0xffff7ab18b58   408  scvtf d0, w8
0xffff7ab18b5c   412  fcmp d29, d0
0xffff7ab18b60   416  b.ne #+0x198 (addr 0xffff7ab18cf8)
0xffff7ab18b64   420  ldr lr, [jssp, #16]
0xffff7ab18b68   424  ldp xzr, fp, [jssp], #24
0xffff7ab18b6c   428  b #-0x18c (addr 0xffff7ab189e0)
0xffff7ab18b70   432  sub csp, jssp, #0x10 (16)
0xffff7ab18b74   436  stp fp, lr, [jssp, #-16]!
0xffff7ab18b78   440  movz fp, #0xa00000000
0xffff7ab18b7c   444  sub csp, jssp, #0x8 (8)
0xffff7ab18b80   448  str fp, [jssp, #-8]!
0xffff7ab18b84   452  add fp, jssp, #0x8 (8)
0xffff7ab18b88   456  ldur x16, [x2, #-1]
0xffff7ab18b8c   460  ldr x17, [x26, #120]
0xffff7ab18b90   464  cmp x16, x17
0xffff7ab18b94   468  b.ne #+0x30 (addr 0xffff7ab18bc4)
0xffff7ab18b98   472  ldur d30, [x2, #7]
0xffff7ab18b9c   476  fcvtzs x9, d30
0xffff7ab18ba0   480  cmp x9, #0x1 (1)
0xffff7ab18ba4   484  ccmn x9, #1, #nzcV, vc
0xffff7ab18ba8   488  b.vc #+0x18 (addr 0xffff7ab18bc0)
0xffff7ab18bac   492  sub csp, jssp, #0x8 (8)
0xffff7ab18bb0   496  str lr, [jssp, #-8]!
0xffff7ab18bb4   500  ldr x16, pc+212 (addr 0x0000ffff7ab18c88)    ;; code: STUB, DoubleToIStub, minor: 127554
0xffff7ab18bb8   504  blr x16
0xffff7ab18bbc   508  ldr lr, [jssp], #8
0xffff7ab18bc0   512  b #+0x24 (addr 0xffff7ab18be4)
0xffff7ab18bc4   516  ldp x9, x7, [x26, #64]
0xffff7ab18bc8   520  cmp x2, x9
0xffff7ab18bcc   524  cset x9, eq
0xffff7ab18bd0   528  ccmp x2, x7, #nZcv, ne
0xffff7ab18bd4   532  b.eq #+0x10 (addr 0xffff7ab18be4)
0xffff7ab18bd8   536  ldr x16, [x26, #40]
0xffff7ab18bdc   540  cmp x2, x16
0xffff7ab18be0   544  b.ne #+0x120 (addr 0xffff7ab18d00)
0xffff7ab18be4   548  ldr lr, [jssp, #16]
0xffff7ab18be8   552  ldp xzr, fp, [jssp], #24
0xffff7ab18bec   556  b #-0x1d4 (addr 0xffff7ab18a18)
0xffff7ab18bf0   560  sub csp, jssp, #0x10 (16)
0xffff7ab18bf4   564  stp fp, lr, [jssp, #-16]!
0xffff7ab18bf8   568  movz fp, #0xa00000000
0xffff7ab18bfc   572  sub csp, jssp, #0x8 (8)
0xffff7ab18c00   576  str fp, [jssp, #-8]!
0xffff7ab18c04   580  add fp, jssp, #0x8 (8)
0xffff7ab18c08   584  movz x9, #0x0
0xffff7ab18c0c   588  mov x16, lr
0xffff7ab18c10   592  ldr x17, pc+128 (addr 0x0000ffff7ab18c90)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab18c14   596  blr x17
0xffff7ab18c18   600  lsl x0, x3, #32
0xffff7ab18c1c   604  movz x10, #0x0
0xffff7ab18c20   608  sub csp, jssp, #0x10 (16)
0xffff7ab18c24   612  stp x10, x0, [jssp, #-16]!
0xffff7ab18c28   616  movz x0, #0x2
0xffff7ab18c2c   620  movz x1, #0x5b88
0xffff7ab18c30   624  movk x1, #0xe2, lsl #16
0xffff7ab18c34   628  ldr x16, pc+100 (addr 0x0000ffff7ab18c98)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab18c38   632  blr x16
0xffff7ab18c3c   636  str x0, [jssp, #72]
0xffff7ab18c40   640  ldr x16, pc+96 (addr 0x0000ffff7ab18ca0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab18c44   644  blr x16
0xffff7ab18c48   648  ldr lr, [jssp, #16]
0xffff7ab18c4c   652  ldp xzr, fp, [jssp], #24
0xffff7ab18c50   656  b #-0x1f4 (addr 0xffff7ab18a5c)
0xffff7ab18c54   660  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0xffff7ab18c58   664  d63f03e0       constant
0xffff7ab18c5c   668  d503201f       constant
0xffff7ab18c60   672  4ec04259       constant
0xffff7ab18c64   676  00000000       constant
0xffff7ab18c68   680  4ec04259       constant
0xffff7ab18c6c   684  00000000       constant
0xffff7ab18c70   688  20d04519       constant
0xffff7ab18c74   692  00000000       constant
0xffff7ab18c78   696  7ab170c0       constant
0xffff7ab18c7c   700  0000ffff       constant
0xffff7ab18c80   704  7ab16760       constant
0xffff7ab18c84   708  0000ffff       constant
0xffff7ab18c88   712  7ab178a0       constant
0xffff7ab18c8c   716  0000ffff       constant
0xffff7ab18c90   720  7ab06820       constant
0xffff7ab18c94   724  0000ffff       constant
0xffff7ab18c98   728  7ab06260       constant
0xffff7ab18c9c   732  0000ffff       constant
0xffff7ab18ca0   736  7ab068e0       constant
0xffff7ab18ca4   740  0000ffff       constant
0xffff7ab18ca8   744  movz x16, #0x0
0xffff7ab18cac   748  sub csp, jssp, #0x10 (16)
0xffff7ab18cb0   752  stp fp, lr, [jssp, #-16]!
0xffff7ab18cb4   756  bl #+0x54 (addr 0xffff7ab18d08)
0xffff7ab18cb8   760  movz x16, #0x8
0xffff7ab18cbc   764  sub csp, jssp, #0x10 (16)
0xffff7ab18cc0   768  stp fp, lr, [jssp, #-16]!
0xffff7ab18cc4   772  bl #+0x44 (addr 0xffff7ab18d08)
0xffff7ab18cc8   776  movz x16, #0x10
0xffff7ab18ccc   780  sub csp, jssp, #0x10 (16)
0xffff7ab18cd0   784  stp fp, lr, [jssp, #-16]!
0xffff7ab18cd4   788  bl #+0x34 (addr 0xffff7ab18d08)
0xffff7ab18cd8   792  movz x16, #0x18
0xffff7ab18cdc   796  sub csp, jssp, #0x10 (16)
0xffff7ab18ce0   800  stp fp, lr, [jssp, #-16]!
0xffff7ab18ce4   804  bl #+0x24 (addr 0xffff7ab18d08)
0xffff7ab18ce8   808  movz x16, #0x20
0xffff7ab18cec   812  sub csp, jssp, #0x10 (16)
0xffff7ab18cf0   816  stp fp, lr, [jssp, #-16]!
0xffff7ab18cf4   820  bl #+0x14 (addr 0xffff7ab18d08)
0xffff7ab18cf8   824  movz x16, #0x28
0xffff7ab18cfc   828  bl #+0x1c (addr 0xffff7ab18d18)
0xffff7ab18d00   832  movz x16, #0x30
0xffff7ab18d04   836  bl #+0x14 (addr 0xffff7ab18d18)
0xffff7ab18d08   840  movz x17, #0xa00000000
0xffff7ab18d0c   844  sub csp, jssp, #0x10 (16)
0xffff7ab18d10   848  stp x17, cp, [jssp, #-16]!
0xffff7ab18d14   852  add fp, jssp, #0x10 (16)
0xffff7ab18d18   856  ldr x17, pc+24 (addr 0x0000ffff7ab18d30)    ;; lazy deoptimization bailout 0
0xffff7ab18d1c   860  add x17, x17, x16
0xffff7ab18d20   864  br x17
0xffff7ab18d24   868  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab18d28   872  d63f03e0       constant
0xffff7ab18d2c   876  d503201f       constant
0xffff7ab18d30   880  7a906000       constant
0xffff7ab18d34   884  0000ffff       constant


Safepoints (size = 21)
0xffff7ab18c3c   636  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 35)
0xffff7ab189c8  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab18a5c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab18a78  embedded object  (0x20d04519 <the hole>)
0xffff7ab18ac8  code target (STUB)  (0xffff7ab170c0)
0xffff7ab18b18  code target (STUB)  (0xffff7ab16760)
0xffff7ab18bb4  code target (STUB)  (0xffff7ab178a0)
0xffff7ab18c10  code target (STUB)  (0xffff7ab06820)
0xffff7ab18c34  code target (STUB)  (0xffff7ab06260)
0xffff7ab18c40  code target (STUB)  (0xffff7ab068e0)
0xffff7ab18c54  constant pool (size 84)
0xffff7ab18d18  runtime entry
0xffff7ab18d24  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 280)
0xffff7ab18dc0     0  ldur x5, [x1, #15]
0xffff7ab18dc4     4  ldur x6, [x5, #-1]
0xffff7ab18dc8     8  ldr x16, pc+152 (addr 0x0000ffff7ab18e60)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab18dcc    12  cmp x6, x16
0xffff7ab18dd0    16  b.ne #+0xa0 (addr 0xffff7ab18e70)
0xffff7ab18dd4    20  ldur w6, [x1, #27]
0xffff7ab18dd8    24  tbnz w2, #0, #+0x54 (addr 0xffff7ab18e2c)
0xffff7ab18ddc    28  asr x8, x2, #32
0xffff7ab18de0    32  cmp w8, w6
0xffff7ab18de4    36  b.hs #+0x9c (addr 0xffff7ab18e80)
0xffff7ab18de8    40  mov x1, x0
0xffff7ab18dec    44  add x2, x5, #0xf (15)
0xffff7ab18df0    48  str x1, [x2, w8, sxtw #3]
0xffff7ab18df4    52  add x2, x2, w8, sxtw #3
0xffff7ab18df8    56  tbz w1, #0, #+0x30 (addr 0xffff7ab18e28)
0xffff7ab18dfc    60  and x1, x1, #0xfffffffffff00000
0xffff7ab18e00    64  ldr x1, [x1, #8]
0xffff7ab18e04    68  tbz w1, #1, #+0x24 (addr 0xffff7ab18e28)
0xffff7ab18e08    72  and x1, x5, #0xfffffffffff00000
0xffff7ab18e0c    76  ldr x1, [x1, #8]
0xffff7ab18e10    80  tbz w1, #2, #+0x18 (addr 0xffff7ab18e28)
0xffff7ab18e14    84  sub csp, jssp, #0x8 (8)
0xffff7ab18e18    88  str lr, [jssp, #-8]!
0xffff7ab18e1c    92  ldr x16, pc+76 (addr 0x0000ffff7ab18e68)    ;; code: STUB, RecordWriteStub, minor: 67621
0xffff7ab18e20    96  blr x16
0xffff7ab18e24   100  ldr lr, [jssp], #8
0xffff7ab18e28   104  ret
0xffff7ab18e2c   108  ldur x16, [x2, #-1]
0xffff7ab18e30   112  ldr x17, [x26, #120]
0xffff7ab18e34   116  cmp x16, x17
0xffff7ab18e38   120  b.ne #+0x58 (addr 0xffff7ab18e90)
0xffff7ab18e3c   124  ldur d29, [x2, #7]
0xffff7ab18e40   128  fcvtzs w8, d29
0xffff7ab18e44   132  scvtf d0, w8
0xffff7ab18e48   136  fcmp d29, d0
0xffff7ab18e4c   140  b.ne #+0x44 (addr 0xffff7ab18e90)
0xffff7ab18e50   144  b #-0x70 (addr 0xffff7ab18de0)
0xffff7ab18e54   148  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab18e58   152  d63f03e0       constant
0xffff7ab18e5c   156  d503201f       constant
0xffff7ab18e60   160  4ec04259       constant
0xffff7ab18e64   164  00000000       constant
0xffff7ab18e68   168  7ab16760       constant
0xffff7ab18e6c   172  0000ffff       constant
0xffff7ab18e70   176  movz x16, #0x0
0xffff7ab18e74   180  sub csp, jssp, #0x10 (16)
0xffff7ab18e78   184  stp fp, lr, [jssp, #-16]!
0xffff7ab18e7c   188  bl #+0x24 (addr 0xffff7ab18ea0)
0xffff7ab18e80   192  movz x16, #0x8
0xffff7ab18e84   196  sub csp, jssp, #0x10 (16)
0xffff7ab18e88   200  stp fp, lr, [jssp, #-16]!
0xffff7ab18e8c   204  bl #+0x14 (addr 0xffff7ab18ea0)
0xffff7ab18e90   208  movz x16, #0x10
0xffff7ab18e94   212  sub csp, jssp, #0x10 (16)
0xffff7ab18e98   216  stp fp, lr, [jssp, #-16]!
0xffff7ab18e9c   220  bl #+0x4 (addr 0xffff7ab18ea0)
0xffff7ab18ea0   224  movz x17, #0xa00000000
0xffff7ab18ea4   228  sub csp, jssp, #0x10 (16)
0xffff7ab18ea8   232  stp x17, cp, [jssp, #-16]!
0xffff7ab18eac   236  add fp, jssp, #0x10 (16)
0xffff7ab18eb0   240  ldr x17, pc+24 (addr 0x0000ffff7ab18ec8)    ;; lazy deoptimization bailout 0
0xffff7ab18eb4   244  add x17, x17, x16
0xffff7ab18eb8   248  br x17
0xffff7ab18ebc   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab18ec0   256  d63f03e0       constant
0xffff7ab18ec4   260  d503201f       constant
0xffff7ab18ec8   264  7a906000       constant
0xffff7ab18ecc   268  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 20)
0xffff7ab18dc8  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab18e1c  code target (STUB)  (0xffff7ab16760)
0xffff7ab18e54  constant pool (size 28)
0xffff7ab18eb0  runtime entry
0xffff7ab18ebc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 280)
0xffff7ab18dc0     0  ldur x5, [x1, #15]
0xffff7ab18dc4     4  ldur x6, [x5, #-1]
0xffff7ab18dc8     8  ldr x16, pc+152 (addr 0x0000ffff7ab18e60)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab18dcc    12  cmp x6, x16
0xffff7ab18dd0    16  b.ne #+0xa0 (addr 0xffff7ab18e70)
0xffff7ab18dd4    20  ldur w6, [x1, #27]
0xffff7ab18dd8    24  tbnz w2, #0, #+0x54 (addr 0xffff7ab18e2c)
0xffff7ab18ddc    28  asr x8, x2, #32
0xffff7ab18de0    32  cmp w8, w6
0xffff7ab18de4    36  b.hs #+0x9c (addr 0xffff7ab18e80)
0xffff7ab18de8    40  mov x1, x0
0xffff7ab18dec    44  add x2, x5, #0xf (15)
0xffff7ab18df0    48  str x1, [x2, w8, sxtw #3]
0xffff7ab18df4    52  add x2, x2, w8, sxtw #3
0xffff7ab18df8    56  tbz w1, #0, #+0x30 (addr 0xffff7ab18e28)
0xffff7ab18dfc    60  and x1, x1, #0xfffffffffff00000
0xffff7ab18e00    64  ldr x1, [x1, #8]
0xffff7ab18e04    68  tbz w1, #1, #+0x24 (addr 0xffff7ab18e28)
0xffff7ab18e08    72  and x1, x5, #0xfffffffffff00000
0xffff7ab18e0c    76  ldr x1, [x1, #8]
0xffff7ab18e10    80  tbz w1, #2, #+0x18 (addr 0xffff7ab18e28)
0xffff7ab18e14    84  sub csp, jssp, #0x8 (8)
0xffff7ab18e18    88  str lr, [jssp, #-8]!
0xffff7ab18e1c    92  ldr x16, pc+76 (addr 0x0000ffff7ab18e68)    ;; code: STUB, RecordWriteStub, minor: 67621
0xffff7ab18e20    96  blr x16
0xffff7ab18e24   100  ldr lr, [jssp], #8
0xffff7ab18e28   104  ret
0xffff7ab18e2c   108  ldur x16, [x2, #-1]
0xffff7ab18e30   112  ldr x17, [x26, #120]
0xffff7ab18e34   116  cmp x16, x17
0xffff7ab18e38   120  b.ne #+0x58 (addr 0xffff7ab18e90)
0xffff7ab18e3c   124  ldur d29, [x2, #7]
0xffff7ab18e40   128  fcvtzs w8, d29
0xffff7ab18e44   132  scvtf d0, w8
0xffff7ab18e48   136  fcmp d29, d0
0xffff7ab18e4c   140  b.ne #+0x44 (addr 0xffff7ab18e90)
0xffff7ab18e50   144  b #-0x70 (addr 0xffff7ab18de0)
0xffff7ab18e54   148  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab18e58   152  d63f03e0       constant
0xffff7ab18e5c   156  d503201f       constant
0xffff7ab18e60   160  4ec04259       constant
0xffff7ab18e64   164  00000000       constant
0xffff7ab18e68   168  7ab16760       constant
0xffff7ab18e6c   172  0000ffff       constant
0xffff7ab18e70   176  movz x16, #0x0
0xffff7ab18e74   180  sub csp, jssp, #0x10 (16)
0xffff7ab18e78   184  stp fp, lr, [jssp, #-16]!
0xffff7ab18e7c   188  bl #+0x24 (addr 0xffff7ab18ea0)
0xffff7ab18e80   192  movz x16, #0x8
0xffff7ab18e84   196  sub csp, jssp, #0x10 (16)
0xffff7ab18e88   200  stp fp, lr, [jssp, #-16]!
0xffff7ab18e8c   204  bl #+0x14 (addr 0xffff7ab18ea0)
0xffff7ab18e90   208  movz x16, #0x10
0xffff7ab18e94   212  sub csp, jssp, #0x10 (16)
0xffff7ab18e98   216  stp fp, lr, [jssp, #-16]!
0xffff7ab18e9c   220  bl #+0x4 (addr 0xffff7ab18ea0)
0xffff7ab18ea0   224  movz x17, #0xa00000000
0xffff7ab18ea4   228  sub csp, jssp, #0x10 (16)
0xffff7ab18ea8   232  stp x17, cp, [jssp, #-16]!
0xffff7ab18eac   236  add fp, jssp, #0x10 (16)
0xffff7ab18eb0   240  ldr x17, pc+24 (addr 0x0000ffff7ab18ec8)    ;; lazy deoptimization bailout 0
0xffff7ab18eb4   244  add x17, x17, x16
0xffff7ab18eb8   248  br x17
0xffff7ab18ebc   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab18ec0   256  d63f03e0       constant
0xffff7ab18ec4   260  d503201f       constant
0xffff7ab18ec8   264  7a906000       constant
0xffff7ab18ecc   268  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 20)
0xffff7ab18dc8  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab18e1c  code target (STUB)  (0xffff7ab16760)
0xffff7ab18e54  constant pool (size 28)
0xffff7ab18eb0  runtime entry
0xffff7ab18ebc  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 909)
0xffff7ab18f40     0  ldur x5, [x1, #15]
0xffff7ab18f44     4  ldur x6, [x5, #-1]
0xffff7ab18f48     8  ldr x16, pc+664 (addr 0x0000ffff7ab191e0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab18f4c    12  cmp x6, x16
0xffff7ab18f50    16  b.ne #+0x2d8 (addr 0xffff7ab19228)
0xffff7ab18f54    20  ldur w6, [x1, #27]
0xffff7ab18f58    24  tbnz w2, #0, #+0x150 (addr 0xffff7ab190a8)
0xffff7ab18f5c    28  asr x8, x2, #32
0xffff7ab18f60    32  cmp w6, w8
0xffff7ab18f64    36  b.le #+0x10 (addr 0xffff7ab18f74)
0xffff7ab18f68    40  cmp w8, w6
0xffff7ab18f6c    44  b.hs #+0x2cc (addr 0xffff7ab19238)
0xffff7ab18f70    48  b #+0xf4 (addr 0xffff7ab19064)
0xffff7ab18f74    52  ldur w7, [x5, #11]
0xffff7ab18f78    56  cmp w7, w8
0xffff7ab18f7c    60  b.gt #+0xdc (addr 0xffff7ab19058)
0xffff7ab18f80    64  adds w7, w7, #0x400 (1024)
0xffff7ab18f84    68  b.vs #+0x2c4 (addr 0xffff7ab19248)
0xffff7ab18f88    72  cmp w8, w7
0xffff7ab18f8c    76  b.hs #+0x2cc (addr 0xffff7ab19258)
0xffff7ab18f90    80  tbnz w2, #0, #+0x160 (addr 0xffff7ab190f0)
0xffff7ab18f94    84  asr x9, x2, #32
0xffff7ab18f98    88  add w7, w8, w9, lsr #1
0xffff7ab18f9c    92  add w7, w7, #0x10 (16)
0xffff7ab18fa0    96  movz w16, #0x95ff
0xffff7ab18fa4   100  cmp w7, w16, lsl #1
0xffff7ab18fa8   104  b.hs #+0x2c0 (addr 0xffff7ab19268)
0xffff7ab18fac   108  lsl x2, x7, #32
0xffff7ab18fb0   112  lsl w3, w7, #3
0xffff7ab18fb4   116  add w3, w3, #0x10 (16)
0xffff7ab18fb8   120  sxtw x3, w3
0xffff7ab18fbc   124  movz x4, #0xe2c0
0xffff7ab18fc0   128  movk x4, #0x9ab, lsl #16
0xffff7ab18fc4   132  ldp x9, x16, [x4]
0xffff7ab18fc8   136  adds x7, x9, x3
0xffff7ab18fcc   140  ccmp x7, x16, #nzCv, lo
0xffff7ab18fd0   144  b.hi #+0x1a0 (addr 0xffff7ab19170)
0xffff7ab18fd4   148  str x7, [x4]
0xffff7ab18fd8   152  orr x9, x9, #0x1
0xffff7ab18fdc   156  ldr x3, pc+524 (addr 0x0000ffff7ab191e8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab18fe0   160  stur x3, [x9, #-1]
0xffff7ab18fe4   164  stur x2, [x9, #7]
0xffff7ab18fe8   168  ldur w2, [x9, #11]
0xffff7ab18fec   172  cmp w6, w2
0xffff7ab18ff0   176  b.ge #+0x18 (addr 0xffff7ab19008)
0xffff7ab18ff4   180  sub w2, w2, #0x1 (1)
0xffff7ab18ff8   184  ldr x3, pc+504 (addr 0x0000ffff7ab191f0)    ;; object: 0x20d04519 <the hole>
0xffff7ab18ffc   188  add x4, x9, #0xf (15)
0xffff7ab19000   192  str x3, [x4, w2, sxtw #3]
0xffff7ab19004   196  b #-0x18 (addr 0xffff7ab18fec)
0xffff7ab19008   200  cmp w6, #0x0 (0)
0xffff7ab1900c   204  b.le #+0x1c (addr 0xffff7ab19028)
0xffff7ab19010   208  sub w6, w6, #0x1 (1)
0xffff7ab19014   212  add x2, x5, #0xf (15)
0xffff7ab19018   216  ldr x3, [x2, w6, sxtw #3]
0xffff7ab1901c   220  add x2, x9, #0xf (15)
0xffff7ab19020   224  str x3, [x2, w6, sxtw #3]
0xffff7ab19024   228  b #-0x1c (addr 0xffff7ab19008)
0xffff7ab19028   232  mov x2, x9
0xffff7ab1902c   236  stur x2, [x1, #15]
0xffff7ab19030   240  add x3, x1, #0xf (15)
0xffff7ab19034   244  and x2, x1, #0xfffffffffff00000
0xffff7ab19038   248  ldr x2, [x2, #8]
0xffff7ab1903c   252  tbz w2, #2, #+0x18 (addr 0xffff7ab19054)
0xffff7ab19040   256  sub csp, jssp, #0x8 (8)
0xffff7ab19044   260  str lr, [jssp, #-8]!
0xffff7ab19048   264  ldr x16, pc+432 (addr 0x0000ffff7ab191f8)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab1904c   268  blr x16
0xffff7ab19050   272  ldr lr, [jssp], #8
0xffff7ab19054   276  mov x5, x9
0xffff7ab19058   280  add w2, w8, #0x1 (1)
0xffff7ab1905c   284  lsl x2, x2, #32
0xffff7ab19060   288  stur x2, [x1, #23]
0xffff7ab19064   292  mov x1, x0
0xffff7ab19068   296  add x2, x5, #0xf (15)
0xffff7ab1906c   300  str x1, [x2, w8, sxtw #3]
0xffff7ab19070   304  add x2, x2, w8, sxtw #3
0xffff7ab19074   308  tbz w1, #0, #+0x30 (addr 0xffff7ab190a4)
0xffff7ab19078   312  and x1, x1, #0xfffffffffff00000
0xffff7ab1907c   316  ldr x1, [x1, #8]
0xffff7ab19080   320  tbz w1, #1, #+0x24 (addr 0xffff7ab190a4)
0xffff7ab19084   324  and x1, x5, #0xfffffffffff00000
0xffff7ab19088   328  ldr x1, [x1, #8]
0xffff7ab1908c   332  tbz w1, #2, #+0x18 (addr 0xffff7ab190a4)
0xffff7ab19090   336  sub csp, jssp, #0x8 (8)
0xffff7ab19094   340  str lr, [jssp, #-8]!
0xffff7ab19098   344  ldr x16, pc+360 (addr 0x0000ffff7ab19200)    ;; code: STUB, RecordWriteStub, minor: 67621
0xffff7ab1909c   348  blr x16
0xffff7ab190a0   352  ldr lr, [jssp], #8
0xffff7ab190a4   356  ret
0xffff7ab190a8   360  sub csp, jssp, #0x10 (16)
0xffff7ab190ac   364  stp fp, lr, [jssp, #-16]!
0xffff7ab190b0   368  movz fp, #0xa00000000
0xffff7ab190b4   372  sub csp, jssp, #0x8 (8)
0xffff7ab190b8   376  str fp, [jssp, #-8]!
0xffff7ab190bc   380  add fp, jssp, #0x8 (8)
0xffff7ab190c0   384  ldur x16, [x2, #-1]
0xffff7ab190c4   388  ldr x17, [x26, #120]
0xffff7ab190c8   392  cmp x16, x17
0xffff7ab190cc   396  b.ne #+0x1ac (addr 0xffff7ab19278)
0xffff7ab190d0   400  ldur d29, [x2, #7]
0xffff7ab190d4   404  fcvtzs w8, d29
0xffff7ab190d8   408  scvtf d0, w8
0xffff7ab190dc   412  fcmp d29, d0
0xffff7ab190e0   416  b.ne #+0x198 (addr 0xffff7ab19278)
0xffff7ab190e4   420  ldr lr, [jssp, #16]
0xffff7ab190e8   424  ldp xzr, fp, [jssp], #24
0xffff7ab190ec   428  b #-0x18c (addr 0xffff7ab18f60)
0xffff7ab190f0   432  sub csp, jssp, #0x10 (16)
0xffff7ab190f4   436  stp fp, lr, [jssp, #-16]!
0xffff7ab190f8   440  movz fp, #0xa00000000
0xffff7ab190fc   444  sub csp, jssp, #0x8 (8)
0xffff7ab19100   448  str fp, [jssp, #-8]!
0xffff7ab19104   452  add fp, jssp, #0x8 (8)
0xffff7ab19108   456  ldur x16, [x2, #-1]
0xffff7ab1910c   460  ldr x17, [x26, #120]
0xffff7ab19110   464  cmp x16, x17
0xffff7ab19114   468  b.ne #+0x30 (addr 0xffff7ab19144)
0xffff7ab19118   472  ldur d30, [x2, #7]
0xffff7ab1911c   476  fcvtzs x9, d30
0xffff7ab19120   480  cmp x9, #0x1 (1)
0xffff7ab19124   484  ccmn x9, #1, #nzcV, vc
0xffff7ab19128   488  b.vc #+0x18 (addr 0xffff7ab19140)
0xffff7ab1912c   492  sub csp, jssp, #0x8 (8)
0xffff7ab19130   496  str lr, [jssp, #-8]!
0xffff7ab19134   500  ldr x16, pc+212 (addr 0x0000ffff7ab19208)    ;; code: STUB, DoubleToIStub, minor: 127554
0xffff7ab19138   504  blr x16
0xffff7ab1913c   508  ldr lr, [jssp], #8
0xffff7ab19140   512  b #+0x24 (addr 0xffff7ab19164)
0xffff7ab19144   516  ldp x9, x7, [x26, #64]
0xffff7ab19148   520  cmp x2, x9
0xffff7ab1914c   524  cset x9, eq
0xffff7ab19150   528  ccmp x2, x7, #nZcv, ne
0xffff7ab19154   532  b.eq #+0x10 (addr 0xffff7ab19164)
0xffff7ab19158   536  ldr x16, [x26, #40]
0xffff7ab1915c   540  cmp x2, x16
0xffff7ab19160   544  b.ne #+0x120 (addr 0xffff7ab19280)
0xffff7ab19164   548  ldr lr, [jssp, #16]
0xffff7ab19168   552  ldp xzr, fp, [jssp], #24
0xffff7ab1916c   556  b #-0x1d4 (addr 0xffff7ab18f98)
0xffff7ab19170   560  sub csp, jssp, #0x10 (16)
0xffff7ab19174   564  stp fp, lr, [jssp, #-16]!
0xffff7ab19178   568  movz fp, #0xa00000000
0xffff7ab1917c   572  sub csp, jssp, #0x8 (8)
0xffff7ab19180   576  str fp, [jssp, #-8]!
0xffff7ab19184   580  add fp, jssp, #0x8 (8)
0xffff7ab19188   584  movz x9, #0x0
0xffff7ab1918c   588  mov x16, lr
0xffff7ab19190   592  ldr x17, pc+128 (addr 0x0000ffff7ab19210)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab19194   596  blr x17
0xffff7ab19198   600  lsl x0, x3, #32
0xffff7ab1919c   604  movz x10, #0x0
0xffff7ab191a0   608  sub csp, jssp, #0x10 (16)
0xffff7ab191a4   612  stp x10, x0, [jssp, #-16]!
0xffff7ab191a8   616  movz x0, #0x2
0xffff7ab191ac   620  movz x1, #0x5b88
0xffff7ab191b0   624  movk x1, #0xe2, lsl #16
0xffff7ab191b4   628  ldr x16, pc+100 (addr 0x0000ffff7ab19218)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab191b8   632  blr x16
0xffff7ab191bc   636  str x0, [jssp, #72]
0xffff7ab191c0   640  ldr x16, pc+96 (addr 0x0000ffff7ab19220)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab191c4   644  blr x16
0xffff7ab191c8   648  ldr lr, [jssp, #16]
0xffff7ab191cc   652  ldp xzr, fp, [jssp], #24
0xffff7ab191d0   656  b #-0x1f4 (addr 0xffff7ab18fdc)
0xffff7ab191d4   660  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0xffff7ab191d8   664  d63f03e0       constant
0xffff7ab191dc   668  d503201f       constant
0xffff7ab191e0   672  4ec04259       constant
0xffff7ab191e4   676  00000000       constant
0xffff7ab191e8   680  4ec04259       constant
0xffff7ab191ec   684  00000000       constant
0xffff7ab191f0   688  20d04519       constant
0xffff7ab191f4   692  00000000       constant
0xffff7ab191f8   696  7ab170c0       constant
0xffff7ab191fc   700  0000ffff       constant
0xffff7ab19200   704  7ab16760       constant
0xffff7ab19204   708  0000ffff       constant
0xffff7ab19208   712  7ab178a0       constant
0xffff7ab1920c   716  0000ffff       constant
0xffff7ab19210   720  7ab06820       constant
0xffff7ab19214   724  0000ffff       constant
0xffff7ab19218   728  7ab06260       constant
0xffff7ab1921c   732  0000ffff       constant
0xffff7ab19220   736  7ab068e0       constant
0xffff7ab19224   740  0000ffff       constant
0xffff7ab19228   744  movz x16, #0x0
0xffff7ab1922c   748  sub csp, jssp, #0x10 (16)
0xffff7ab19230   752  stp fp, lr, [jssp, #-16]!
0xffff7ab19234   756  bl #+0x54 (addr 0xffff7ab19288)
0xffff7ab19238   760  movz x16, #0x8
0xffff7ab1923c   764  sub csp, jssp, #0x10 (16)
0xffff7ab19240   768  stp fp, lr, [jssp, #-16]!
0xffff7ab19244   772  bl #+0x44 (addr 0xffff7ab19288)
0xffff7ab19248   776  movz x16, #0x10
0xffff7ab1924c   780  sub csp, jssp, #0x10 (16)
0xffff7ab19250   784  stp fp, lr, [jssp, #-16]!
0xffff7ab19254   788  bl #+0x34 (addr 0xffff7ab19288)
0xffff7ab19258   792  movz x16, #0x18
0xffff7ab1925c   796  sub csp, jssp, #0x10 (16)
0xffff7ab19260   800  stp fp, lr, [jssp, #-16]!
0xffff7ab19264   804  bl #+0x24 (addr 0xffff7ab19288)
0xffff7ab19268   808  movz x16, #0x20
0xffff7ab1926c   812  sub csp, jssp, #0x10 (16)
0xffff7ab19270   816  stp fp, lr, [jssp, #-16]!
0xffff7ab19274   820  bl #+0x14 (addr 0xffff7ab19288)
0xffff7ab19278   824  movz x16, #0x28
0xffff7ab1927c   828  bl #+0x1c (addr 0xffff7ab19298)
0xffff7ab19280   832  movz x16, #0x30
0xffff7ab19284   836  bl #+0x14 (addr 0xffff7ab19298)
0xffff7ab19288   840  movz x17, #0xa00000000
0xffff7ab1928c   844  sub csp, jssp, #0x10 (16)
0xffff7ab19290   848  stp x17, cp, [jssp, #-16]!
0xffff7ab19294   852  add fp, jssp, #0x10 (16)
0xffff7ab19298   856  ldr x17, pc+24 (addr 0x0000ffff7ab192b0)    ;; lazy deoptimization bailout 0
0xffff7ab1929c   860  add x17, x17, x16
0xffff7ab192a0   864  br x17
0xffff7ab192a4   868  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab192a8   872  d63f03e0       constant
0xffff7ab192ac   876  d503201f       constant
0xffff7ab192b0   880  7a906000       constant
0xffff7ab192b4   884  0000ffff       constant


Safepoints (size = 21)
0xffff7ab191bc   636  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 35)
0xffff7ab18f48  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab18fdc  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab18ff8  embedded object  (0x20d04519 <the hole>)
0xffff7ab19048  code target (STUB)  (0xffff7ab170c0)
0xffff7ab19098  code target (STUB)  (0xffff7ab16760)
0xffff7ab19134  code target (STUB)  (0xffff7ab178a0)
0xffff7ab19190  code target (STUB)  (0xffff7ab06820)
0xffff7ab191b4  code target (STUB)  (0xffff7ab06260)
0xffff7ab191c0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab191d4  constant pool (size 84)
0xffff7ab19298  runtime entry
0xffff7ab192a4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 909)
0xffff7ab18f40     0  ldur x5, [x1, #15]
0xffff7ab18f44     4  ldur x6, [x5, #-1]
0xffff7ab18f48     8  ldr x16, pc+664 (addr 0x0000ffff7ab191e0)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab18f4c    12  cmp x6, x16
0xffff7ab18f50    16  b.ne #+0x2d8 (addr 0xffff7ab19228)
0xffff7ab18f54    20  ldur w6, [x1, #27]
0xffff7ab18f58    24  tbnz w2, #0, #+0x150 (addr 0xffff7ab190a8)
0xffff7ab18f5c    28  asr x8, x2, #32
0xffff7ab18f60    32  cmp w6, w8
0xffff7ab18f64    36  b.le #+0x10 (addr 0xffff7ab18f74)
0xffff7ab18f68    40  cmp w8, w6
0xffff7ab18f6c    44  b.hs #+0x2cc (addr 0xffff7ab19238)
0xffff7ab18f70    48  b #+0xf4 (addr 0xffff7ab19064)
0xffff7ab18f74    52  ldur w7, [x5, #11]
0xffff7ab18f78    56  cmp w7, w8
0xffff7ab18f7c    60  b.gt #+0xdc (addr 0xffff7ab19058)
0xffff7ab18f80    64  adds w7, w7, #0x400 (1024)
0xffff7ab18f84    68  b.vs #+0x2c4 (addr 0xffff7ab19248)
0xffff7ab18f88    72  cmp w8, w7
0xffff7ab18f8c    76  b.hs #+0x2cc (addr 0xffff7ab19258)
0xffff7ab18f90    80  tbnz w2, #0, #+0x160 (addr 0xffff7ab190f0)
0xffff7ab18f94    84  asr x9, x2, #32
0xffff7ab18f98    88  add w7, w8, w9, lsr #1
0xffff7ab18f9c    92  add w7, w7, #0x10 (16)
0xffff7ab18fa0    96  movz w16, #0x95ff
0xffff7ab18fa4   100  cmp w7, w16, lsl #1
0xffff7ab18fa8   104  b.hs #+0x2c0 (addr 0xffff7ab19268)
0xffff7ab18fac   108  lsl x2, x7, #32
0xffff7ab18fb0   112  lsl w3, w7, #3
0xffff7ab18fb4   116  add w3, w3, #0x10 (16)
0xffff7ab18fb8   120  sxtw x3, w3
0xffff7ab18fbc   124  movz x4, #0xe2c0
0xffff7ab18fc0   128  movk x4, #0x9ab, lsl #16
0xffff7ab18fc4   132  ldp x9, x16, [x4]
0xffff7ab18fc8   136  adds x7, x9, x3
0xffff7ab18fcc   140  ccmp x7, x16, #nzCv, lo
0xffff7ab18fd0   144  b.hi #+0x1a0 (addr 0xffff7ab19170)
0xffff7ab18fd4   148  str x7, [x4]
0xffff7ab18fd8   152  orr x9, x9, #0x1
0xffff7ab18fdc   156  ldr x3, pc+524 (addr 0x0000ffff7ab191e8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab18fe0   160  stur x3, [x9, #-1]
0xffff7ab18fe4   164  stur x2, [x9, #7]
0xffff7ab18fe8   168  ldur w2, [x9, #11]
0xffff7ab18fec   172  cmp w6, w2
0xffff7ab18ff0   176  b.ge #+0x18 (addr 0xffff7ab19008)
0xffff7ab18ff4   180  sub w2, w2, #0x1 (1)
0xffff7ab18ff8   184  ldr x3, pc+504 (addr 0x0000ffff7ab191f0)    ;; object: 0x20d04519 <the hole>
0xffff7ab18ffc   188  add x4, x9, #0xf (15)
0xffff7ab19000   192  str x3, [x4, w2, sxtw #3]
0xffff7ab19004   196  b #-0x18 (addr 0xffff7ab18fec)
0xffff7ab19008   200  cmp w6, #0x0 (0)
0xffff7ab1900c   204  b.le #+0x1c (addr 0xffff7ab19028)
0xffff7ab19010   208  sub w6, w6, #0x1 (1)
0xffff7ab19014   212  add x2, x5, #0xf (15)
0xffff7ab19018   216  ldr x3, [x2, w6, sxtw #3]
0xffff7ab1901c   220  add x2, x9, #0xf (15)
0xffff7ab19020   224  str x3, [x2, w6, sxtw #3]
0xffff7ab19024   228  b #-0x1c (addr 0xffff7ab19008)
0xffff7ab19028   232  mov x2, x9
0xffff7ab1902c   236  stur x2, [x1, #15]
0xffff7ab19030   240  add x3, x1, #0xf (15)
0xffff7ab19034   244  and x2, x1, #0xfffffffffff00000
0xffff7ab19038   248  ldr x2, [x2, #8]
0xffff7ab1903c   252  tbz w2, #2, #+0x18 (addr 0xffff7ab19054)
0xffff7ab19040   256  sub csp, jssp, #0x8 (8)
0xffff7ab19044   260  str lr, [jssp, #-8]!
0xffff7ab19048   264  ldr x16, pc+432 (addr 0x0000ffff7ab191f8)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab1904c   268  blr x16
0xffff7ab19050   272  ldr lr, [jssp], #8
0xffff7ab19054   276  mov x5, x9
0xffff7ab19058   280  add w2, w8, #0x1 (1)
0xffff7ab1905c   284  lsl x2, x2, #32
0xffff7ab19060   288  stur x2, [x1, #23]
0xffff7ab19064   292  mov x1, x0
0xffff7ab19068   296  add x2, x5, #0xf (15)
0xffff7ab1906c   300  str x1, [x2, w8, sxtw #3]
0xffff7ab19070   304  add x2, x2, w8, sxtw #3
0xffff7ab19074   308  tbz w1, #0, #+0x30 (addr 0xffff7ab190a4)
0xffff7ab19078   312  and x1, x1, #0xfffffffffff00000
0xffff7ab1907c   316  ldr x1, [x1, #8]
0xffff7ab19080   320  tbz w1, #1, #+0x24 (addr 0xffff7ab190a4)
0xffff7ab19084   324  and x1, x5, #0xfffffffffff00000
0xffff7ab19088   328  ldr x1, [x1, #8]
0xffff7ab1908c   332  tbz w1, #2, #+0x18 (addr 0xffff7ab190a4)
0xffff7ab19090   336  sub csp, jssp, #0x8 (8)
0xffff7ab19094   340  str lr, [jssp, #-8]!
0xffff7ab19098   344  ldr x16, pc+360 (addr 0x0000ffff7ab19200)    ;; code: STUB, RecordWriteStub, minor: 67621
0xffff7ab1909c   348  blr x16
0xffff7ab190a0   352  ldr lr, [jssp], #8
0xffff7ab190a4   356  ret
0xffff7ab190a8   360  sub csp, jssp, #0x10 (16)
0xffff7ab190ac   364  stp fp, lr, [jssp, #-16]!
0xffff7ab190b0   368  movz fp, #0xa00000000
0xffff7ab190b4   372  sub csp, jssp, #0x8 (8)
0xffff7ab190b8   376  str fp, [jssp, #-8]!
0xffff7ab190bc   380  add fp, jssp, #0x8 (8)
0xffff7ab190c0   384  ldur x16, [x2, #-1]
0xffff7ab190c4   388  ldr x17, [x26, #120]
0xffff7ab190c8   392  cmp x16, x17
0xffff7ab190cc   396  b.ne #+0x1ac (addr 0xffff7ab19278)
0xffff7ab190d0   400  ldur d29, [x2, #7]
0xffff7ab190d4   404  fcvtzs w8, d29
0xffff7ab190d8   408  scvtf d0, w8
0xffff7ab190dc   412  fcmp d29, d0
0xffff7ab190e0   416  b.ne #+0x198 (addr 0xffff7ab19278)
0xffff7ab190e4   420  ldr lr, [jssp, #16]
0xffff7ab190e8   424  ldp xzr, fp, [jssp], #24
0xffff7ab190ec   428  b #-0x18c (addr 0xffff7ab18f60)
0xffff7ab190f0   432  sub csp, jssp, #0x10 (16)
0xffff7ab190f4   436  stp fp, lr, [jssp, #-16]!
0xffff7ab190f8   440  movz fp, #0xa00000000
0xffff7ab190fc   444  sub csp, jssp, #0x8 (8)
0xffff7ab19100   448  str fp, [jssp, #-8]!
0xffff7ab19104   452  add fp, jssp, #0x8 (8)
0xffff7ab19108   456  ldur x16, [x2, #-1]
0xffff7ab1910c   460  ldr x17, [x26, #120]
0xffff7ab19110   464  cmp x16, x17
0xffff7ab19114   468  b.ne #+0x30 (addr 0xffff7ab19144)
0xffff7ab19118   472  ldur d30, [x2, #7]
0xffff7ab1911c   476  fcvtzs x9, d30
0xffff7ab19120   480  cmp x9, #0x1 (1)
0xffff7ab19124   484  ccmn x9, #1, #nzcV, vc
0xffff7ab19128   488  b.vc #+0x18 (addr 0xffff7ab19140)
0xffff7ab1912c   492  sub csp, jssp, #0x8 (8)
0xffff7ab19130   496  str lr, [jssp, #-8]!
0xffff7ab19134   500  ldr x16, pc+212 (addr 0x0000ffff7ab19208)    ;; code: STUB, DoubleToIStub, minor: 127554
0xffff7ab19138   504  blr x16
0xffff7ab1913c   508  ldr lr, [jssp], #8
0xffff7ab19140   512  b #+0x24 (addr 0xffff7ab19164)
0xffff7ab19144   516  ldp x9, x7, [x26, #64]
0xffff7ab19148   520  cmp x2, x9
0xffff7ab1914c   524  cset x9, eq
0xffff7ab19150   528  ccmp x2, x7, #nZcv, ne
0xffff7ab19154   532  b.eq #+0x10 (addr 0xffff7ab19164)
0xffff7ab19158   536  ldr x16, [x26, #40]
0xffff7ab1915c   540  cmp x2, x16
0xffff7ab19160   544  b.ne #+0x120 (addr 0xffff7ab19280)
0xffff7ab19164   548  ldr lr, [jssp, #16]
0xffff7ab19168   552  ldp xzr, fp, [jssp], #24
0xffff7ab1916c   556  b #-0x1d4 (addr 0xffff7ab18f98)
0xffff7ab19170   560  sub csp, jssp, #0x10 (16)
0xffff7ab19174   564  stp fp, lr, [jssp, #-16]!
0xffff7ab19178   568  movz fp, #0xa00000000
0xffff7ab1917c   572  sub csp, jssp, #0x8 (8)
0xffff7ab19180   576  str fp, [jssp, #-8]!
0xffff7ab19184   580  add fp, jssp, #0x8 (8)
0xffff7ab19188   584  movz x9, #0x0
0xffff7ab1918c   588  mov x16, lr
0xffff7ab19190   592  ldr x17, pc+128 (addr 0x0000ffff7ab19210)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab19194   596  blr x17
0xffff7ab19198   600  lsl x0, x3, #32
0xffff7ab1919c   604  movz x10, #0x0
0xffff7ab191a0   608  sub csp, jssp, #0x10 (16)
0xffff7ab191a4   612  stp x10, x0, [jssp, #-16]!
0xffff7ab191a8   616  movz x0, #0x2
0xffff7ab191ac   620  movz x1, #0x5b88
0xffff7ab191b0   624  movk x1, #0xe2, lsl #16
0xffff7ab191b4   628  ldr x16, pc+100 (addr 0x0000ffff7ab19218)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab191b8   632  blr x16
0xffff7ab191bc   636  str x0, [jssp, #72]
0xffff7ab191c0   640  ldr x16, pc+96 (addr 0x0000ffff7ab19220)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab191c4   644  blr x16
0xffff7ab191c8   648  ldr lr, [jssp, #16]
0xffff7ab191cc   652  ldp xzr, fp, [jssp], #24
0xffff7ab191d0   656  b #-0x1f4 (addr 0xffff7ab18fdc)
0xffff7ab191d4   660  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0xffff7ab191d8   664  d63f03e0       constant
0xffff7ab191dc   668  d503201f       constant
0xffff7ab191e0   672  4ec04259       constant
0xffff7ab191e4   676  00000000       constant
0xffff7ab191e8   680  4ec04259       constant
0xffff7ab191ec   684  00000000       constant
0xffff7ab191f0   688  20d04519       constant
0xffff7ab191f4   692  00000000       constant
0xffff7ab191f8   696  7ab170c0       constant
0xffff7ab191fc   700  0000ffff       constant
0xffff7ab19200   704  7ab16760       constant
0xffff7ab19204   708  0000ffff       constant
0xffff7ab19208   712  7ab178a0       constant
0xffff7ab1920c   716  0000ffff       constant
0xffff7ab19210   720  7ab06820       constant
0xffff7ab19214   724  0000ffff       constant
0xffff7ab19218   728  7ab06260       constant
0xffff7ab1921c   732  0000ffff       constant
0xffff7ab19220   736  7ab068e0       constant
0xffff7ab19224   740  0000ffff       constant
0xffff7ab19228   744  movz x16, #0x0
0xffff7ab1922c   748  sub csp, jssp, #0x10 (16)
0xffff7ab19230   752  stp fp, lr, [jssp, #-16]!
0xffff7ab19234   756  bl #+0x54 (addr 0xffff7ab19288)
0xffff7ab19238   760  movz x16, #0x8
0xffff7ab1923c   764  sub csp, jssp, #0x10 (16)
0xffff7ab19240   768  stp fp, lr, [jssp, #-16]!
0xffff7ab19244   772  bl #+0x44 (addr 0xffff7ab19288)
0xffff7ab19248   776  movz x16, #0x10
0xffff7ab1924c   780  sub csp, jssp, #0x10 (16)
0xffff7ab19250   784  stp fp, lr, [jssp, #-16]!
0xffff7ab19254   788  bl #+0x34 (addr 0xffff7ab19288)
0xffff7ab19258   792  movz x16, #0x18
0xffff7ab1925c   796  sub csp, jssp, #0x10 (16)
0xffff7ab19260   800  stp fp, lr, [jssp, #-16]!
0xffff7ab19264   804  bl #+0x24 (addr 0xffff7ab19288)
0xffff7ab19268   808  movz x16, #0x20
0xffff7ab1926c   812  sub csp, jssp, #0x10 (16)
0xffff7ab19270   816  stp fp, lr, [jssp, #-16]!
0xffff7ab19274   820  bl #+0x14 (addr 0xffff7ab19288)
0xffff7ab19278   824  movz x16, #0x28
0xffff7ab1927c   828  bl #+0x1c (addr 0xffff7ab19298)
0xffff7ab19280   832  movz x16, #0x30
0xffff7ab19284   836  bl #+0x14 (addr 0xffff7ab19298)
0xffff7ab19288   840  movz x17, #0xa00000000
0xffff7ab1928c   844  sub csp, jssp, #0x10 (16)
0xffff7ab19290   848  stp x17, cp, [jssp, #-16]!
0xffff7ab19294   852  add fp, jssp, #0x10 (16)
0xffff7ab19298   856  ldr x17, pc+24 (addr 0x0000ffff7ab192b0)    ;; lazy deoptimization bailout 0
0xffff7ab1929c   860  add x17, x17, x16
0xffff7ab192a0   864  br x17
0xffff7ab192a4   868  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab192a8   872  d63f03e0       constant
0xffff7ab192ac   876  d503201f       constant
0xffff7ab192b0   880  7a906000       constant
0xffff7ab192b4   884  0000ffff       constant


Safepoints (size = 21)
0xffff7ab191bc   636  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 35)
0xffff7ab18f48  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab18fdc  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab18ff8  embedded object  (0x20d04519 <the hole>)
0xffff7ab19048  code target (STUB)  (0xffff7ab170c0)
0xffff7ab19098  code target (STUB)  (0xffff7ab16760)
0xffff7ab19134  code target (STUB)  (0xffff7ab178a0)
0xffff7ab19190  code target (STUB)  (0xffff7ab06820)
0xffff7ab191b4  code target (STUB)  (0xffff7ab06260)
0xffff7ab191c0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab191d4  constant pool (size 84)
0xffff7ab19298  runtime entry
0xffff7ab192a4  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 216)
0xffff7ab19340     0  ldur x5, [x1, #15]
0xffff7ab19344     4  ldur w6, [x1, #27]
0xffff7ab19348     8  tbnz w2, #0, #+0x40 (addr 0xffff7ab19388)
0xffff7ab1934c    12  asr x8, x2, #32
0xffff7ab19350    16  cmp w8, w6
0xffff7ab19354    20  b.hs #+0x5c (addr 0xffff7ab193b0)
0xffff7ab19358    24  tbz w0, #0, #+0x1c (addr 0xffff7ab19374)
0xffff7ab1935c    28  ldur x16, [x0, #-1]
0xffff7ab19360    32  ldr x17, [x26, #120]
0xffff7ab19364    36  cmp x16, x17
0xffff7ab19368    40  b.ne #+0x58 (addr 0xffff7ab193c0)
0xffff7ab1936c    44  ldur d0, [x0, #7]
0xffff7ab19370    48  b #+0x8 (addr 0xffff7ab19378)
0xffff7ab19374    52  scvtf d0, x0, #32
0xffff7ab19378    56  add x1, x5, #0xf (15)
0xffff7ab1937c    60  fsub d29, d0, d15
0xffff7ab19380    64  str d29, [x1, w8, sxtw #3]
0xffff7ab19384    68  ret
0xffff7ab19388    72  ldur x16, [x2, #-1]
0xffff7ab1938c    76  ldr x17, [x26, #120]
0xffff7ab19390    80  cmp x16, x17
0xffff7ab19394    84  b.ne #+0x3c (addr 0xffff7ab193d0)
0xffff7ab19398    88  ldur d29, [x2, #7]
0xffff7ab1939c    92  fcvtzs w8, d29
0xffff7ab193a0    96  scvtf d0, w8
0xffff7ab193a4   100  fcmp d29, d0
0xffff7ab193a8   104  b.ne #+0x28 (addr 0xffff7ab193d0)
0xffff7ab193ac   108  b #-0x5c (addr 0xffff7ab19350)
0xffff7ab193b0   112  movz x16, #0x0
0xffff7ab193b4   116  sub csp, jssp, #0x10 (16)
0xffff7ab193b8   120  stp fp, lr, [jssp, #-16]!
0xffff7ab193bc   124  bl #+0x24 (addr 0xffff7ab193e0)
0xffff7ab193c0   128  movz x16, #0x8
0xffff7ab193c4   132  sub csp, jssp, #0x10 (16)
0xffff7ab193c8   136  stp fp, lr, [jssp, #-16]!
0xffff7ab193cc   140  bl #+0x14 (addr 0xffff7ab193e0)
0xffff7ab193d0   144  movz x16, #0x10
0xffff7ab193d4   148  sub csp, jssp, #0x10 (16)
0xffff7ab193d8   152  stp fp, lr, [jssp, #-16]!
0xffff7ab193dc   156  bl #+0x4 (addr 0xffff7ab193e0)
0xffff7ab193e0   160  movz x17, #0xa00000000
0xffff7ab193e4   164  sub csp, jssp, #0x10 (16)
0xffff7ab193e8   168  stp x17, cp, [jssp, #-16]!
0xffff7ab193ec   172  add fp, jssp, #0x10 (16)
0xffff7ab193f0   176  ldr x17, pc+24 (addr 0x0000ffff7ab19408)    ;; lazy deoptimization bailout 0
0xffff7ab193f4   180  add x17, x17, x16
0xffff7ab193f8   184  br x17
0xffff7ab193fc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab19400   192  d63f03e0       constant
0xffff7ab19404   196  d503201f       constant
0xffff7ab19408   200  7a906000       constant
0xffff7ab1940c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab193f0  runtime entry
0xffff7ab193fc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 216)
0xffff7ab19340     0  ldur x5, [x1, #15]
0xffff7ab19344     4  ldur w6, [x1, #27]
0xffff7ab19348     8  tbnz w2, #0, #+0x40 (addr 0xffff7ab19388)
0xffff7ab1934c    12  asr x8, x2, #32
0xffff7ab19350    16  cmp w8, w6
0xffff7ab19354    20  b.hs #+0x5c (addr 0xffff7ab193b0)
0xffff7ab19358    24  tbz w0, #0, #+0x1c (addr 0xffff7ab19374)
0xffff7ab1935c    28  ldur x16, [x0, #-1]
0xffff7ab19360    32  ldr x17, [x26, #120]
0xffff7ab19364    36  cmp x16, x17
0xffff7ab19368    40  b.ne #+0x58 (addr 0xffff7ab193c0)
0xffff7ab1936c    44  ldur d0, [x0, #7]
0xffff7ab19370    48  b #+0x8 (addr 0xffff7ab19378)
0xffff7ab19374    52  scvtf d0, x0, #32
0xffff7ab19378    56  add x1, x5, #0xf (15)
0xffff7ab1937c    60  fsub d29, d0, d15
0xffff7ab19380    64  str d29, [x1, w8, sxtw #3]
0xffff7ab19384    68  ret
0xffff7ab19388    72  ldur x16, [x2, #-1]
0xffff7ab1938c    76  ldr x17, [x26, #120]
0xffff7ab19390    80  cmp x16, x17
0xffff7ab19394    84  b.ne #+0x3c (addr 0xffff7ab193d0)
0xffff7ab19398    88  ldur d29, [x2, #7]
0xffff7ab1939c    92  fcvtzs w8, d29
0xffff7ab193a0    96  scvtf d0, w8
0xffff7ab193a4   100  fcmp d29, d0
0xffff7ab193a8   104  b.ne #+0x28 (addr 0xffff7ab193d0)
0xffff7ab193ac   108  b #-0x5c (addr 0xffff7ab19350)
0xffff7ab193b0   112  movz x16, #0x0
0xffff7ab193b4   116  sub csp, jssp, #0x10 (16)
0xffff7ab193b8   120  stp fp, lr, [jssp, #-16]!
0xffff7ab193bc   124  bl #+0x24 (addr 0xffff7ab193e0)
0xffff7ab193c0   128  movz x16, #0x8
0xffff7ab193c4   132  sub csp, jssp, #0x10 (16)
0xffff7ab193c8   136  stp fp, lr, [jssp, #-16]!
0xffff7ab193cc   140  bl #+0x14 (addr 0xffff7ab193e0)
0xffff7ab193d0   144  movz x16, #0x10
0xffff7ab193d4   148  sub csp, jssp, #0x10 (16)
0xffff7ab193d8   152  stp fp, lr, [jssp, #-16]!
0xffff7ab193dc   156  bl #+0x4 (addr 0xffff7ab193e0)
0xffff7ab193e0   160  movz x17, #0xa00000000
0xffff7ab193e4   164  sub csp, jssp, #0x10 (16)
0xffff7ab193e8   168  stp x17, cp, [jssp, #-16]!
0xffff7ab193ec   172  add fp, jssp, #0x10 (16)
0xffff7ab193f0   176  ldr x17, pc+24 (addr 0x0000ffff7ab19408)    ;; lazy deoptimization bailout 0
0xffff7ab193f4   180  add x17, x17, x16
0xffff7ab193f8   184  br x17
0xffff7ab193fc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab19400   192  d63f03e0       constant
0xffff7ab19404   196  d503201f       constant
0xffff7ab19408   200  7a906000       constant
0xffff7ab1940c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab193f0  runtime entry
0xffff7ab193fc  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 853)
0xffff7ab19480     0  ldur x5, [x1, #15]
0xffff7ab19484     4  ldur w6, [x1, #27]
0xffff7ab19488     8  tbz w0, #0, #+0x1c (addr 0xffff7ab194a4)
0xffff7ab1948c    12  ldur x16, [x0, #-1]
0xffff7ab19490    16  ldr x17, [x26, #120]
0xffff7ab19494    20  cmp x16, x17
0xffff7ab19498    24  b.ne #+0x298 (addr 0xffff7ab19730)
0xffff7ab1949c    28  ldur d0, [x0, #7]
0xffff7ab194a0    32  b #+0x8 (addr 0xffff7ab194a8)
0xffff7ab194a4    36  scvtf d0, x0, #32
0xffff7ab194a8    40  tbnz w2, #0, #+0x11c (addr 0xffff7ab195c4)
0xffff7ab194ac    44  asr x8, x2, #32
0xffff7ab194b0    48  cmp w6, w8
0xffff7ab194b4    52  b.eq #+0x10 (addr 0xffff7ab194c4)
0xffff7ab194b8    56  cmp w8, w6
0xffff7ab194bc    60  b.hs #+0x284 (addr 0xffff7ab19740)
0xffff7ab194c0    64  b #+0xf4 (addr 0xffff7ab195b4)
0xffff7ab194c4    68  ldur w7, [x5, #11]
0xffff7ab194c8    72  cmp w7, w8
0xffff7ab194cc    76  b.gt #+0xdc (addr 0xffff7ab195a8)
0xffff7ab194d0    80  adds w7, w7, #0x400 (1024)
0xffff7ab194d4    84  b.vs #+0x27c (addr 0xffff7ab19750)
0xffff7ab194d8    88  cmp w8, w7
0xffff7ab194dc    92  b.hs #+0x284 (addr 0xffff7ab19760)
0xffff7ab194e0    96  tbnz w2, #0, #+0x12c (addr 0xffff7ab1960c)
0xffff7ab194e4   100  asr x9, x2, #32
0xffff7ab194e8   104  add w7, w8, w9, lsr #1
0xffff7ab194ec   108  add w7, w7, #0x10 (16)
0xffff7ab194f0   112  movz w16, #0x95ff
0xffff7ab194f4   116  cmp w7, w16, lsl #1
0xffff7ab194f8   120  b.hs #+0x278 (addr 0xffff7ab19770)
0xffff7ab194fc   124  lsl x2, x7, #32
0xffff7ab19500   128  lsl w3, w7, #3
0xffff7ab19504   132  add w3, w3, #0x10 (16)
0xffff7ab19508   136  sxtw x3, w3
0xffff7ab1950c   140  movz x4, #0xe2c0
0xffff7ab19510   144  movk x4, #0x9ab, lsl #16
0xffff7ab19514   148  ldp x9, x16, [x4]
0xffff7ab19518   152  adds x7, x9, x3
0xffff7ab1951c   156  ccmp x7, x16, #nzCv, lo
0xffff7ab19520   160  b.hi #+0x16c (addr 0xffff7ab1968c)
0xffff7ab19524   164  str x7, [x4]
0xffff7ab19528   168  orr x9, x9, #0x1
0xffff7ab1952c   172  ldr x3, pc+468 (addr 0x0000ffff7ab19700)    ;; object: 0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19530   176  stur x3, [x9, #-1]
0xffff7ab19534   180  stur x2, [x9, #7]
0xffff7ab19538   184  ldr d1, pc+448 (addr 0x0000ffff7ab196f8)
0xffff7ab1953c   188  ldur w2, [x9, #11]
0xffff7ab19540   192  cmp w6, w2
0xffff7ab19544   196  b.ge #+0x14 (addr 0xffff7ab19558)
0xffff7ab19548   200  sub w2, w2, #0x1 (1)
0xffff7ab1954c   204  add x3, x9, #0xf (15)
0xffff7ab19550   208  str d1, [x3, w2, sxtw #3]
0xffff7ab19554   212  b #-0x14 (addr 0xffff7ab19540)
0xffff7ab19558   216  cmp w6, #0x0 (0)
0xffff7ab1955c   220  b.le #+0x1c (addr 0xffff7ab19578)
0xffff7ab19560   224  sub w6, w6, #0x1 (1)
0xffff7ab19564   228  add x2, x5, #0xf (15)
0xffff7ab19568   232  ldr d1, [x2, w6, sxtw #3]
0xffff7ab1956c   236  add x2, x9, #0xf (15)
0xffff7ab19570   240  str d1, [x2, w6, sxtw #3]
0xffff7ab19574   244  b #-0x1c (addr 0xffff7ab19558)
0xffff7ab19578   248  mov x2, x9
0xffff7ab1957c   252  stur x2, [x1, #15]
0xffff7ab19580   256  add x3, x1, #0xf (15)
0xffff7ab19584   260  and x2, x1, #0xfffffffffff00000
0xffff7ab19588   264  ldr x2, [x2, #8]
0xffff7ab1958c   268  tbz w2, #2, #+0x18 (addr 0xffff7ab195a4)
0xffff7ab19590   272  sub csp, jssp, #0x8 (8)
0xffff7ab19594   276  str lr, [jssp, #-8]!
0xffff7ab19598   280  ldr x16, pc+368 (addr 0x0000ffff7ab19708)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab1959c   284  blr x16
0xffff7ab195a0   288  ldr lr, [jssp], #8
0xffff7ab195a4   292  mov x5, x9
0xffff7ab195a8   296  add w2, w8, #0x1 (1)
0xffff7ab195ac   300  lsl x2, x2, #32
0xffff7ab195b0   304  stur x2, [x1, #23]
0xffff7ab195b4   308  add x1, x5, #0xf (15)
0xffff7ab195b8   312  fsub d29, d0, d15
0xffff7ab195bc   316  str d29, [x1, w8, sxtw #3]
0xffff7ab195c0   320  ret
0xffff7ab195c4   324  sub csp, jssp, #0x10 (16)
0xffff7ab195c8   328  stp fp, lr, [jssp, #-16]!
0xffff7ab195cc   332  movz fp, #0xa00000000
0xffff7ab195d0   336  sub csp, jssp, #0x8 (8)
0xffff7ab195d4   340  str fp, [jssp, #-8]!
0xffff7ab195d8   344  add fp, jssp, #0x8 (8)
0xffff7ab195dc   348  ldur x16, [x2, #-1]
0xffff7ab195e0   352  ldr x17, [x26, #120]
0xffff7ab195e4   356  cmp x16, x17
0xffff7ab195e8   360  b.ne #+0x198 (addr 0xffff7ab19780)
0xffff7ab195ec   364  ldur d29, [x2, #7]
0xffff7ab195f0   368  fcvtzs w8, d29
0xffff7ab195f4   372  scvtf d1, w8
0xffff7ab195f8   376  fcmp d29, d1
0xffff7ab195fc   380  b.ne #+0x184 (addr 0xffff7ab19780)
0xffff7ab19600   384  ldr lr, [jssp, #16]
0xffff7ab19604   388  ldp xzr, fp, [jssp], #24
0xffff7ab19608   392  b #-0x158 (addr 0xffff7ab194b0)
0xffff7ab1960c   396  sub csp, jssp, #0x10 (16)
0xffff7ab19610   400  stp fp, lr, [jssp, #-16]!
0xffff7ab19614   404  movz fp, #0xa00000000
0xffff7ab19618   408  sub csp, jssp, #0x8 (8)
0xffff7ab1961c   412  str fp, [jssp, #-8]!
0xffff7ab19620   416  add fp, jssp, #0x8 (8)
0xffff7ab19624   420  ldur x16, [x2, #-1]
0xffff7ab19628   424  ldr x17, [x26, #120]
0xffff7ab1962c   428  cmp x16, x17
0xffff7ab19630   432  b.ne #+0x30 (addr 0xffff7ab19660)
0xffff7ab19634   436  ldur d30, [x2, #7]
0xffff7ab19638   440  fcvtzs x9, d30
0xffff7ab1963c   444  cmp x9, #0x1 (1)
0xffff7ab19640   448  ccmn x9, #1, #nzcV, vc
0xffff7ab19644   452  b.vc #+0x18 (addr 0xffff7ab1965c)
0xffff7ab19648   456  sub csp, jssp, #0x8 (8)
0xffff7ab1964c   460  str lr, [jssp, #-8]!
0xffff7ab19650   464  ldr x16, pc+192 (addr 0x0000ffff7ab19710)    ;; code: STUB, DoubleToIStub, minor: 127554
0xffff7ab19654   468  blr x16
0xffff7ab19658   472  ldr lr, [jssp], #8
0xffff7ab1965c   476  b #+0x24 (addr 0xffff7ab19680)
0xffff7ab19660   480  ldp x9, x7, [x26, #64]
0xffff7ab19664   484  cmp x2, x9
0xffff7ab19668   488  cset x9, eq
0xffff7ab1966c   492  ccmp x2, x7, #nZcv, ne
0xffff7ab19670   496  b.eq #+0x10 (addr 0xffff7ab19680)
0xffff7ab19674   500  ldr x16, [x26, #40]
0xffff7ab19678   504  cmp x2, x16
0xffff7ab1967c   508  b.ne #+0x10c (addr 0xffff7ab19788)
0xffff7ab19680   512  ldr lr, [jssp, #16]
0xffff7ab19684   516  ldp xzr, fp, [jssp], #24
0xffff7ab19688   520  b #-0x1a0 (addr 0xffff7ab194e8)
0xffff7ab1968c   524  sub csp, jssp, #0x10 (16)
0xffff7ab19690   528  stp fp, lr, [jssp, #-16]!
0xffff7ab19694   532  movz fp, #0xa00000000
0xffff7ab19698   536  sub csp, jssp, #0x8 (8)
0xffff7ab1969c   540  str fp, [jssp, #-8]!
0xffff7ab196a0   544  add fp, jssp, #0x8 (8)
0xffff7ab196a4   548  movz x9, #0x0
0xffff7ab196a8   552  mov x16, lr
0xffff7ab196ac   556  ldr x17, pc+108 (addr 0x0000ffff7ab19718)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab196b0   560  blr x17
0xffff7ab196b4   564  lsl x0, x3, #32
0xffff7ab196b8   568  movz x10, #0x100000000
0xffff7ab196bc   572  sub csp, jssp, #0x10 (16)
0xffff7ab196c0   576  stp x10, x0, [jssp, #-16]!
0xffff7ab196c4   580  movz x0, #0x2
0xffff7ab196c8   584  movz x1, #0x5b88
0xffff7ab196cc   588  movk x1, #0xe2, lsl #16
0xffff7ab196d0   592  ldr x16, pc+80 (addr 0x0000ffff7ab19720)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab196d4   596  blr x16
0xffff7ab196d8   600  str x0, [jssp, #72]
0xffff7ab196dc   604  ldr x16, pc+76 (addr 0x0000ffff7ab19728)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab196e0   608  blr x16
0xffff7ab196e4   612  ldr lr, [jssp, #16]
0xffff7ab196e8   616  ldp xzr, fp, [jssp], #24
0xffff7ab196ec   620  b #-0x1c0 (addr 0xffff7ab1952c)
0xffff7ab196f0   624  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab196f4   628  d63f03e0       constant
0xffff7ab196f8   632  fff7ffff       constant
0xffff7ab196fc   636  fff7ffff       constant
0xffff7ab19700   640  4ec052d9       constant
0xffff7ab19704   644  00000000       constant
0xffff7ab19708   648  7ab170c0       constant
0xffff7ab1970c   652  0000ffff       constant
0xffff7ab19710   656  7ab178a0       constant
0xffff7ab19714   660  0000ffff       constant
0xffff7ab19718   664  7ab06820       constant
0xffff7ab1971c   668  0000ffff       constant
0xffff7ab19720   672  7ab06260       constant
0xffff7ab19724   676  0000ffff       constant
0xffff7ab19728   680  7ab068e0       constant
0xffff7ab1972c   684  0000ffff       constant
0xffff7ab19730   688  movz x16, #0x0
0xffff7ab19734   692  sub csp, jssp, #0x10 (16)
0xffff7ab19738   696  stp fp, lr, [jssp, #-16]!
0xffff7ab1973c   700  bl #+0x54 (addr 0xffff7ab19790)
0xffff7ab19740   704  movz x16, #0x8
0xffff7ab19744   708  sub csp, jssp, #0x10 (16)
0xffff7ab19748   712  stp fp, lr, [jssp, #-16]!
0xffff7ab1974c   716  bl #+0x44 (addr 0xffff7ab19790)
0xffff7ab19750   720  movz x16, #0x10
0xffff7ab19754   724  sub csp, jssp, #0x10 (16)
0xffff7ab19758   728  stp fp, lr, [jssp, #-16]!
0xffff7ab1975c   732  bl #+0x34 (addr 0xffff7ab19790)
0xffff7ab19760   736  movz x16, #0x18
0xffff7ab19764   740  sub csp, jssp, #0x10 (16)
0xffff7ab19768   744  stp fp, lr, [jssp, #-16]!
0xffff7ab1976c   748  bl #+0x24 (addr 0xffff7ab19790)
0xffff7ab19770   752  movz x16, #0x20
0xffff7ab19774   756  sub csp, jssp, #0x10 (16)
0xffff7ab19778   760  stp fp, lr, [jssp, #-16]!
0xffff7ab1977c   764  bl #+0x14 (addr 0xffff7ab19790)
0xffff7ab19780   768  movz x16, #0x28
0xffff7ab19784   772  bl #+0x1c (addr 0xffff7ab197a0)
0xffff7ab19788   776  movz x16, #0x30
0xffff7ab1978c   780  bl #+0x14 (addr 0xffff7ab197a0)
0xffff7ab19790   784  movz x17, #0xa00000000
0xffff7ab19794   788  sub csp, jssp, #0x10 (16)
0xffff7ab19798   792  stp x17, cp, [jssp, #-16]!
0xffff7ab1979c   796  add fp, jssp, #0x10 (16)
0xffff7ab197a0   800  ldr x17, pc+24 (addr 0x0000ffff7ab197b8)    ;; lazy deoptimization bailout 0
0xffff7ab197a4   804  add x17, x17, x16
0xffff7ab197a8   808  br x17
0xffff7ab197ac   812  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab197b0   816  d63f03e0       constant
0xffff7ab197b4   820  d503201f       constant
0xffff7ab197b8   824  7a906000       constant
0xffff7ab197bc   828  0000ffff       constant


Safepoints (size = 21)
0xffff7ab196d8   600  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0xffff7ab1952c  embedded object  (0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19598  code target (STUB)  (0xffff7ab170c0)
0xffff7ab19650  code target (STUB)  (0xffff7ab178a0)
0xffff7ab196ac  code target (STUB)  (0xffff7ab06820)
0xffff7ab196d0  code target (STUB)  (0xffff7ab06260)
0xffff7ab196dc  code target (STUB)  (0xffff7ab068e0)
0xffff7ab196f0  constant pool (size 64)
0xffff7ab197a0  runtime entry
0xffff7ab197ac  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 853)
0xffff7ab19480     0  ldur x5, [x1, #15]
0xffff7ab19484     4  ldur w6, [x1, #27]
0xffff7ab19488     8  tbz w0, #0, #+0x1c (addr 0xffff7ab194a4)
0xffff7ab1948c    12  ldur x16, [x0, #-1]
0xffff7ab19490    16  ldr x17, [x26, #120]
0xffff7ab19494    20  cmp x16, x17
0xffff7ab19498    24  b.ne #+0x298 (addr 0xffff7ab19730)
0xffff7ab1949c    28  ldur d0, [x0, #7]
0xffff7ab194a0    32  b #+0x8 (addr 0xffff7ab194a8)
0xffff7ab194a4    36  scvtf d0, x0, #32
0xffff7ab194a8    40  tbnz w2, #0, #+0x11c (addr 0xffff7ab195c4)
0xffff7ab194ac    44  asr x8, x2, #32
0xffff7ab194b0    48  cmp w6, w8
0xffff7ab194b4    52  b.eq #+0x10 (addr 0xffff7ab194c4)
0xffff7ab194b8    56  cmp w8, w6
0xffff7ab194bc    60  b.hs #+0x284 (addr 0xffff7ab19740)
0xffff7ab194c0    64  b #+0xf4 (addr 0xffff7ab195b4)
0xffff7ab194c4    68  ldur w7, [x5, #11]
0xffff7ab194c8    72  cmp w7, w8
0xffff7ab194cc    76  b.gt #+0xdc (addr 0xffff7ab195a8)
0xffff7ab194d0    80  adds w7, w7, #0x400 (1024)
0xffff7ab194d4    84  b.vs #+0x27c (addr 0xffff7ab19750)
0xffff7ab194d8    88  cmp w8, w7
0xffff7ab194dc    92  b.hs #+0x284 (addr 0xffff7ab19760)
0xffff7ab194e0    96  tbnz w2, #0, #+0x12c (addr 0xffff7ab1960c)
0xffff7ab194e4   100  asr x9, x2, #32
0xffff7ab194e8   104  add w7, w8, w9, lsr #1
0xffff7ab194ec   108  add w7, w7, #0x10 (16)
0xffff7ab194f0   112  movz w16, #0x95ff
0xffff7ab194f4   116  cmp w7, w16, lsl #1
0xffff7ab194f8   120  b.hs #+0x278 (addr 0xffff7ab19770)
0xffff7ab194fc   124  lsl x2, x7, #32
0xffff7ab19500   128  lsl w3, w7, #3
0xffff7ab19504   132  add w3, w3, #0x10 (16)
0xffff7ab19508   136  sxtw x3, w3
0xffff7ab1950c   140  movz x4, #0xe2c0
0xffff7ab19510   144  movk x4, #0x9ab, lsl #16
0xffff7ab19514   148  ldp x9, x16, [x4]
0xffff7ab19518   152  adds x7, x9, x3
0xffff7ab1951c   156  ccmp x7, x16, #nzCv, lo
0xffff7ab19520   160  b.hi #+0x16c (addr 0xffff7ab1968c)
0xffff7ab19524   164  str x7, [x4]
0xffff7ab19528   168  orr x9, x9, #0x1
0xffff7ab1952c   172  ldr x3, pc+468 (addr 0x0000ffff7ab19700)    ;; object: 0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19530   176  stur x3, [x9, #-1]
0xffff7ab19534   180  stur x2, [x9, #7]
0xffff7ab19538   184  ldr d1, pc+448 (addr 0x0000ffff7ab196f8)
0xffff7ab1953c   188  ldur w2, [x9, #11]
0xffff7ab19540   192  cmp w6, w2
0xffff7ab19544   196  b.ge #+0x14 (addr 0xffff7ab19558)
0xffff7ab19548   200  sub w2, w2, #0x1 (1)
0xffff7ab1954c   204  add x3, x9, #0xf (15)
0xffff7ab19550   208  str d1, [x3, w2, sxtw #3]
0xffff7ab19554   212  b #-0x14 (addr 0xffff7ab19540)
0xffff7ab19558   216  cmp w6, #0x0 (0)
0xffff7ab1955c   220  b.le #+0x1c (addr 0xffff7ab19578)
0xffff7ab19560   224  sub w6, w6, #0x1 (1)
0xffff7ab19564   228  add x2, x5, #0xf (15)
0xffff7ab19568   232  ldr d1, [x2, w6, sxtw #3]
0xffff7ab1956c   236  add x2, x9, #0xf (15)
0xffff7ab19570   240  str d1, [x2, w6, sxtw #3]
0xffff7ab19574   244  b #-0x1c (addr 0xffff7ab19558)
0xffff7ab19578   248  mov x2, x9
0xffff7ab1957c   252  stur x2, [x1, #15]
0xffff7ab19580   256  add x3, x1, #0xf (15)
0xffff7ab19584   260  and x2, x1, #0xfffffffffff00000
0xffff7ab19588   264  ldr x2, [x2, #8]
0xffff7ab1958c   268  tbz w2, #2, #+0x18 (addr 0xffff7ab195a4)
0xffff7ab19590   272  sub csp, jssp, #0x8 (8)
0xffff7ab19594   276  str lr, [jssp, #-8]!
0xffff7ab19598   280  ldr x16, pc+368 (addr 0x0000ffff7ab19708)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab1959c   284  blr x16
0xffff7ab195a0   288  ldr lr, [jssp], #8
0xffff7ab195a4   292  mov x5, x9
0xffff7ab195a8   296  add w2, w8, #0x1 (1)
0xffff7ab195ac   300  lsl x2, x2, #32
0xffff7ab195b0   304  stur x2, [x1, #23]
0xffff7ab195b4   308  add x1, x5, #0xf (15)
0xffff7ab195b8   312  fsub d29, d0, d15
0xffff7ab195bc   316  str d29, [x1, w8, sxtw #3]
0xffff7ab195c0   320  ret
0xffff7ab195c4   324  sub csp, jssp, #0x10 (16)
0xffff7ab195c8   328  stp fp, lr, [jssp, #-16]!
0xffff7ab195cc   332  movz fp, #0xa00000000
0xffff7ab195d0   336  sub csp, jssp, #0x8 (8)
0xffff7ab195d4   340  str fp, [jssp, #-8]!
0xffff7ab195d8   344  add fp, jssp, #0x8 (8)
0xffff7ab195dc   348  ldur x16, [x2, #-1]
0xffff7ab195e0   352  ldr x17, [x26, #120]
0xffff7ab195e4   356  cmp x16, x17
0xffff7ab195e8   360  b.ne #+0x198 (addr 0xffff7ab19780)
0xffff7ab195ec   364  ldur d29, [x2, #7]
0xffff7ab195f0   368  fcvtzs w8, d29
0xffff7ab195f4   372  scvtf d1, w8
0xffff7ab195f8   376  fcmp d29, d1
0xffff7ab195fc   380  b.ne #+0x184 (addr 0xffff7ab19780)
0xffff7ab19600   384  ldr lr, [jssp, #16]
0xffff7ab19604   388  ldp xzr, fp, [jssp], #24
0xffff7ab19608   392  b #-0x158 (addr 0xffff7ab194b0)
0xffff7ab1960c   396  sub csp, jssp, #0x10 (16)
0xffff7ab19610   400  stp fp, lr, [jssp, #-16]!
0xffff7ab19614   404  movz fp, #0xa00000000
0xffff7ab19618   408  sub csp, jssp, #0x8 (8)
0xffff7ab1961c   412  str fp, [jssp, #-8]!
0xffff7ab19620   416  add fp, jssp, #0x8 (8)
0xffff7ab19624   420  ldur x16, [x2, #-1]
0xffff7ab19628   424  ldr x17, [x26, #120]
0xffff7ab1962c   428  cmp x16, x17
0xffff7ab19630   432  b.ne #+0x30 (addr 0xffff7ab19660)
0xffff7ab19634   436  ldur d30, [x2, #7]
0xffff7ab19638   440  fcvtzs x9, d30
0xffff7ab1963c   444  cmp x9, #0x1 (1)
0xffff7ab19640   448  ccmn x9, #1, #nzcV, vc
0xffff7ab19644   452  b.vc #+0x18 (addr 0xffff7ab1965c)
0xffff7ab19648   456  sub csp, jssp, #0x8 (8)
0xffff7ab1964c   460  str lr, [jssp, #-8]!
0xffff7ab19650   464  ldr x16, pc+192 (addr 0x0000ffff7ab19710)    ;; code: STUB, DoubleToIStub, minor: 127554
0xffff7ab19654   468  blr x16
0xffff7ab19658   472  ldr lr, [jssp], #8
0xffff7ab1965c   476  b #+0x24 (addr 0xffff7ab19680)
0xffff7ab19660   480  ldp x9, x7, [x26, #64]
0xffff7ab19664   484  cmp x2, x9
0xffff7ab19668   488  cset x9, eq
0xffff7ab1966c   492  ccmp x2, x7, #nZcv, ne
0xffff7ab19670   496  b.eq #+0x10 (addr 0xffff7ab19680)
0xffff7ab19674   500  ldr x16, [x26, #40]
0xffff7ab19678   504  cmp x2, x16
0xffff7ab1967c   508  b.ne #+0x10c (addr 0xffff7ab19788)
0xffff7ab19680   512  ldr lr, [jssp, #16]
0xffff7ab19684   516  ldp xzr, fp, [jssp], #24
0xffff7ab19688   520  b #-0x1a0 (addr 0xffff7ab194e8)
0xffff7ab1968c   524  sub csp, jssp, #0x10 (16)
0xffff7ab19690   528  stp fp, lr, [jssp, #-16]!
0xffff7ab19694   532  movz fp, #0xa00000000
0xffff7ab19698   536  sub csp, jssp, #0x8 (8)
0xffff7ab1969c   540  str fp, [jssp, #-8]!
0xffff7ab196a0   544  add fp, jssp, #0x8 (8)
0xffff7ab196a4   548  movz x9, #0x0
0xffff7ab196a8   552  mov x16, lr
0xffff7ab196ac   556  ldr x17, pc+108 (addr 0x0000ffff7ab19718)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab196b0   560  blr x17
0xffff7ab196b4   564  lsl x0, x3, #32
0xffff7ab196b8   568  movz x10, #0x100000000
0xffff7ab196bc   572  sub csp, jssp, #0x10 (16)
0xffff7ab196c0   576  stp x10, x0, [jssp, #-16]!
0xffff7ab196c4   580  movz x0, #0x2
0xffff7ab196c8   584  movz x1, #0x5b88
0xffff7ab196cc   588  movk x1, #0xe2, lsl #16
0xffff7ab196d0   592  ldr x16, pc+80 (addr 0x0000ffff7ab19720)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab196d4   596  blr x16
0xffff7ab196d8   600  str x0, [jssp, #72]
0xffff7ab196dc   604  ldr x16, pc+76 (addr 0x0000ffff7ab19728)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab196e0   608  blr x16
0xffff7ab196e4   612  ldr lr, [jssp, #16]
0xffff7ab196e8   616  ldp xzr, fp, [jssp], #24
0xffff7ab196ec   620  b #-0x1c0 (addr 0xffff7ab1952c)
0xffff7ab196f0   624  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab196f4   628  d63f03e0       constant
0xffff7ab196f8   632  fff7ffff       constant
0xffff7ab196fc   636  fff7ffff       constant
0xffff7ab19700   640  4ec052d9       constant
0xffff7ab19704   644  00000000       constant
0xffff7ab19708   648  7ab170c0       constant
0xffff7ab1970c   652  0000ffff       constant
0xffff7ab19710   656  7ab178a0       constant
0xffff7ab19714   660  0000ffff       constant
0xffff7ab19718   664  7ab06820       constant
0xffff7ab1971c   668  0000ffff       constant
0xffff7ab19720   672  7ab06260       constant
0xffff7ab19724   676  0000ffff       constant
0xffff7ab19728   680  7ab068e0       constant
0xffff7ab1972c   684  0000ffff       constant
0xffff7ab19730   688  movz x16, #0x0
0xffff7ab19734   692  sub csp, jssp, #0x10 (16)
0xffff7ab19738   696  stp fp, lr, [jssp, #-16]!
0xffff7ab1973c   700  bl #+0x54 (addr 0xffff7ab19790)
0xffff7ab19740   704  movz x16, #0x8
0xffff7ab19744   708  sub csp, jssp, #0x10 (16)
0xffff7ab19748   712  stp fp, lr, [jssp, #-16]!
0xffff7ab1974c   716  bl #+0x44 (addr 0xffff7ab19790)
0xffff7ab19750   720  movz x16, #0x10
0xffff7ab19754   724  sub csp, jssp, #0x10 (16)
0xffff7ab19758   728  stp fp, lr, [jssp, #-16]!
0xffff7ab1975c   732  bl #+0x34 (addr 0xffff7ab19790)
0xffff7ab19760   736  movz x16, #0x18
0xffff7ab19764   740  sub csp, jssp, #0x10 (16)
0xffff7ab19768   744  stp fp, lr, [jssp, #-16]!
0xffff7ab1976c   748  bl #+0x24 (addr 0xffff7ab19790)
0xffff7ab19770   752  movz x16, #0x20
0xffff7ab19774   756  sub csp, jssp, #0x10 (16)
0xffff7ab19778   760  stp fp, lr, [jssp, #-16]!
0xffff7ab1977c   764  bl #+0x14 (addr 0xffff7ab19790)
0xffff7ab19780   768  movz x16, #0x28
0xffff7ab19784   772  bl #+0x1c (addr 0xffff7ab197a0)
0xffff7ab19788   776  movz x16, #0x30
0xffff7ab1978c   780  bl #+0x14 (addr 0xffff7ab197a0)
0xffff7ab19790   784  movz x17, #0xa00000000
0xffff7ab19794   788  sub csp, jssp, #0x10 (16)
0xffff7ab19798   792  stp x17, cp, [jssp, #-16]!
0xffff7ab1979c   796  add fp, jssp, #0x10 (16)
0xffff7ab197a0   800  ldr x17, pc+24 (addr 0x0000ffff7ab197b8)    ;; lazy deoptimization bailout 0
0xffff7ab197a4   804  add x17, x17, x16
0xffff7ab197a8   808  br x17
0xffff7ab197ac   812  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab197b0   816  d63f03e0       constant
0xffff7ab197b4   820  d503201f       constant
0xffff7ab197b8   824  7a906000       constant
0xffff7ab197bc   828  0000ffff       constant


Safepoints (size = 21)
0xffff7ab196d8   600  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0xffff7ab1952c  embedded object  (0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19598  code target (STUB)  (0xffff7ab170c0)
0xffff7ab19650  code target (STUB)  (0xffff7ab178a0)
0xffff7ab196ac  code target (STUB)  (0xffff7ab06820)
0xffff7ab196d0  code target (STUB)  (0xffff7ab06260)
0xffff7ab196dc  code target (STUB)  (0xffff7ab068e0)
0xffff7ab196f0  constant pool (size 64)
0xffff7ab197a0  runtime entry
0xffff7ab197ac  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 216)
0xffff7ab19840     0  ldur x5, [x1, #15]
0xffff7ab19844     4  ldur w6, [x1, #27]
0xffff7ab19848     8  tbnz w2, #0, #+0x40 (addr 0xffff7ab19888)
0xffff7ab1984c    12  asr x8, x2, #32
0xffff7ab19850    16  cmp w8, w6
0xffff7ab19854    20  b.hs #+0x5c (addr 0xffff7ab198b0)
0xffff7ab19858    24  tbz w0, #0, #+0x1c (addr 0xffff7ab19874)
0xffff7ab1985c    28  ldur x16, [x0, #-1]
0xffff7ab19860    32  ldr x17, [x26, #120]
0xffff7ab19864    36  cmp x16, x17
0xffff7ab19868    40  b.ne #+0x58 (addr 0xffff7ab198c0)
0xffff7ab1986c    44  ldur d0, [x0, #7]
0xffff7ab19870    48  b #+0x8 (addr 0xffff7ab19878)
0xffff7ab19874    52  scvtf d0, x0, #32
0xffff7ab19878    56  add x1, x5, #0xf (15)
0xffff7ab1987c    60  fsub d29, d0, d15
0xffff7ab19880    64  str d29, [x1, w8, sxtw #3]
0xffff7ab19884    68  ret
0xffff7ab19888    72  ldur x16, [x2, #-1]
0xffff7ab1988c    76  ldr x17, [x26, #120]
0xffff7ab19890    80  cmp x16, x17
0xffff7ab19894    84  b.ne #+0x3c (addr 0xffff7ab198d0)
0xffff7ab19898    88  ldur d29, [x2, #7]
0xffff7ab1989c    92  fcvtzs w8, d29
0xffff7ab198a0    96  scvtf d0, w8
0xffff7ab198a4   100  fcmp d29, d0
0xffff7ab198a8   104  b.ne #+0x28 (addr 0xffff7ab198d0)
0xffff7ab198ac   108  b #-0x5c (addr 0xffff7ab19850)
0xffff7ab198b0   112  movz x16, #0x0
0xffff7ab198b4   116  sub csp, jssp, #0x10 (16)
0xffff7ab198b8   120  stp fp, lr, [jssp, #-16]!
0xffff7ab198bc   124  bl #+0x24 (addr 0xffff7ab198e0)
0xffff7ab198c0   128  movz x16, #0x8
0xffff7ab198c4   132  sub csp, jssp, #0x10 (16)
0xffff7ab198c8   136  stp fp, lr, [jssp, #-16]!
0xffff7ab198cc   140  bl #+0x14 (addr 0xffff7ab198e0)
0xffff7ab198d0   144  movz x16, #0x10
0xffff7ab198d4   148  sub csp, jssp, #0x10 (16)
0xffff7ab198d8   152  stp fp, lr, [jssp, #-16]!
0xffff7ab198dc   156  bl #+0x4 (addr 0xffff7ab198e0)
0xffff7ab198e0   160  movz x17, #0xa00000000
0xffff7ab198e4   164  sub csp, jssp, #0x10 (16)
0xffff7ab198e8   168  stp x17, cp, [jssp, #-16]!
0xffff7ab198ec   172  add fp, jssp, #0x10 (16)
0xffff7ab198f0   176  ldr x17, pc+24 (addr 0x0000ffff7ab19908)    ;; lazy deoptimization bailout 0
0xffff7ab198f4   180  add x17, x17, x16
0xffff7ab198f8   184  br x17
0xffff7ab198fc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab19900   192  d63f03e0       constant
0xffff7ab19904   196  d503201f       constant
0xffff7ab19908   200  7a906000       constant
0xffff7ab1990c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab198f0  runtime entry
0xffff7ab198fc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 216)
0xffff7ab19840     0  ldur x5, [x1, #15]
0xffff7ab19844     4  ldur w6, [x1, #27]
0xffff7ab19848     8  tbnz w2, #0, #+0x40 (addr 0xffff7ab19888)
0xffff7ab1984c    12  asr x8, x2, #32
0xffff7ab19850    16  cmp w8, w6
0xffff7ab19854    20  b.hs #+0x5c (addr 0xffff7ab198b0)
0xffff7ab19858    24  tbz w0, #0, #+0x1c (addr 0xffff7ab19874)
0xffff7ab1985c    28  ldur x16, [x0, #-1]
0xffff7ab19860    32  ldr x17, [x26, #120]
0xffff7ab19864    36  cmp x16, x17
0xffff7ab19868    40  b.ne #+0x58 (addr 0xffff7ab198c0)
0xffff7ab1986c    44  ldur d0, [x0, #7]
0xffff7ab19870    48  b #+0x8 (addr 0xffff7ab19878)
0xffff7ab19874    52  scvtf d0, x0, #32
0xffff7ab19878    56  add x1, x5, #0xf (15)
0xffff7ab1987c    60  fsub d29, d0, d15
0xffff7ab19880    64  str d29, [x1, w8, sxtw #3]
0xffff7ab19884    68  ret
0xffff7ab19888    72  ldur x16, [x2, #-1]
0xffff7ab1988c    76  ldr x17, [x26, #120]
0xffff7ab19890    80  cmp x16, x17
0xffff7ab19894    84  b.ne #+0x3c (addr 0xffff7ab198d0)
0xffff7ab19898    88  ldur d29, [x2, #7]
0xffff7ab1989c    92  fcvtzs w8, d29
0xffff7ab198a0    96  scvtf d0, w8
0xffff7ab198a4   100  fcmp d29, d0
0xffff7ab198a8   104  b.ne #+0x28 (addr 0xffff7ab198d0)
0xffff7ab198ac   108  b #-0x5c (addr 0xffff7ab19850)
0xffff7ab198b0   112  movz x16, #0x0
0xffff7ab198b4   116  sub csp, jssp, #0x10 (16)
0xffff7ab198b8   120  stp fp, lr, [jssp, #-16]!
0xffff7ab198bc   124  bl #+0x24 (addr 0xffff7ab198e0)
0xffff7ab198c0   128  movz x16, #0x8
0xffff7ab198c4   132  sub csp, jssp, #0x10 (16)
0xffff7ab198c8   136  stp fp, lr, [jssp, #-16]!
0xffff7ab198cc   140  bl #+0x14 (addr 0xffff7ab198e0)
0xffff7ab198d0   144  movz x16, #0x10
0xffff7ab198d4   148  sub csp, jssp, #0x10 (16)
0xffff7ab198d8   152  stp fp, lr, [jssp, #-16]!
0xffff7ab198dc   156  bl #+0x4 (addr 0xffff7ab198e0)
0xffff7ab198e0   160  movz x17, #0xa00000000
0xffff7ab198e4   164  sub csp, jssp, #0x10 (16)
0xffff7ab198e8   168  stp x17, cp, [jssp, #-16]!
0xffff7ab198ec   172  add fp, jssp, #0x10 (16)
0xffff7ab198f0   176  ldr x17, pc+24 (addr 0x0000ffff7ab19908)    ;; lazy deoptimization bailout 0
0xffff7ab198f4   180  add x17, x17, x16
0xffff7ab198f8   184  br x17
0xffff7ab198fc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab19900   192  d63f03e0       constant
0xffff7ab19904   196  d503201f       constant
0xffff7ab19908   200  7a906000       constant
0xffff7ab1990c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab198f0  runtime entry
0xffff7ab198fc  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 853)
0xffff7ab19980     0  ldur x5, [x1, #15]
0xffff7ab19984     4  ldur w6, [x1, #27]
0xffff7ab19988     8  tbz w0, #0, #+0x1c (addr 0xffff7ab199a4)
0xffff7ab1998c    12  ldur x16, [x0, #-1]
0xffff7ab19990    16  ldr x17, [x26, #120]
0xffff7ab19994    20  cmp x16, x17
0xffff7ab19998    24  b.ne #+0x298 (addr 0xffff7ab19c30)
0xffff7ab1999c    28  ldur d0, [x0, #7]
0xffff7ab199a0    32  b #+0x8 (addr 0xffff7ab199a8)
0xffff7ab199a4    36  scvtf d0, x0, #32
0xffff7ab199a8    40  tbnz w2, #0, #+0x11c (addr 0xffff7ab19ac4)
0xffff7ab199ac    44  asr x8, x2, #32
0xffff7ab199b0    48  cmp w6, w8
0xffff7ab199b4    52  b.le #+0x10 (addr 0xffff7ab199c4)
0xffff7ab199b8    56  cmp w8, w6
0xffff7ab199bc    60  b.hs #+0x284 (addr 0xffff7ab19c40)
0xffff7ab199c0    64  b #+0xf4 (addr 0xffff7ab19ab4)
0xffff7ab199c4    68  ldur w7, [x5, #11]
0xffff7ab199c8    72  cmp w7, w8
0xffff7ab199cc    76  b.gt #+0xdc (addr 0xffff7ab19aa8)
0xffff7ab199d0    80  adds w7, w7, #0x400 (1024)
0xffff7ab199d4    84  b.vs #+0x27c (addr 0xffff7ab19c50)
0xffff7ab199d8    88  cmp w8, w7
0xffff7ab199dc    92  b.hs #+0x284 (addr 0xffff7ab19c60)
0xffff7ab199e0    96  tbnz w2, #0, #+0x12c (addr 0xffff7ab19b0c)
0xffff7ab199e4   100  asr x9, x2, #32
0xffff7ab199e8   104  add w7, w8, w9, lsr #1
0xffff7ab199ec   108  add w7, w7, #0x10 (16)
0xffff7ab199f0   112  movz w16, #0x95ff
0xffff7ab199f4   116  cmp w7, w16, lsl #1
0xffff7ab199f8   120  b.hs #+0x278 (addr 0xffff7ab19c70)
0xffff7ab199fc   124  lsl x2, x7, #32
0xffff7ab19a00   128  lsl w3, w7, #3
0xffff7ab19a04   132  add w3, w3, #0x10 (16)
0xffff7ab19a08   136  sxtw x3, w3
0xffff7ab19a0c   140  movz x4, #0xe2c0
0xffff7ab19a10   144  movk x4, #0x9ab, lsl #16
0xffff7ab19a14   148  ldp x9, x16, [x4]
0xffff7ab19a18   152  adds x7, x9, x3
0xffff7ab19a1c   156  ccmp x7, x16, #nzCv, lo
0xffff7ab19a20   160  b.hi #+0x16c (addr 0xffff7ab19b8c)
0xffff7ab19a24   164  str x7, [x4]
0xffff7ab19a28   168  orr x9, x9, #0x1
0xffff7ab19a2c   172  ldr x3, pc+468 (addr 0x0000ffff7ab19c00)    ;; object: 0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19a30   176  stur x3, [x9, #-1]
0xffff7ab19a34   180  stur x2, [x9, #7]
0xffff7ab19a38   184  ldr d1, pc+448 (addr 0x0000ffff7ab19bf8)
0xffff7ab19a3c   188  ldur w2, [x9, #11]
0xffff7ab19a40   192  cmp w6, w2
0xffff7ab19a44   196  b.ge #+0x14 (addr 0xffff7ab19a58)
0xffff7ab19a48   200  sub w2, w2, #0x1 (1)
0xffff7ab19a4c   204  add x3, x9, #0xf (15)
0xffff7ab19a50   208  str d1, [x3, w2, sxtw #3]
0xffff7ab19a54   212  b #-0x14 (addr 0xffff7ab19a40)
0xffff7ab19a58   216  cmp w6, #0x0 (0)
0xffff7ab19a5c   220  b.le #+0x1c (addr 0xffff7ab19a78)
0xffff7ab19a60   224  sub w6, w6, #0x1 (1)
0xffff7ab19a64   228  add x2, x5, #0xf (15)
0xffff7ab19a68   232  ldr d1, [x2, w6, sxtw #3]
0xffff7ab19a6c   236  add x2, x9, #0xf (15)
0xffff7ab19a70   240  str d1, [x2, w6, sxtw #3]
0xffff7ab19a74   244  b #-0x1c (addr 0xffff7ab19a58)
0xffff7ab19a78   248  mov x2, x9
0xffff7ab19a7c   252  stur x2, [x1, #15]
0xffff7ab19a80   256  add x3, x1, #0xf (15)
0xffff7ab19a84   260  and x2, x1, #0xfffffffffff00000
0xffff7ab19a88   264  ldr x2, [x2, #8]
0xffff7ab19a8c   268  tbz w2, #2, #+0x18 (addr 0xffff7ab19aa4)
0xffff7ab19a90   272  sub csp, jssp, #0x8 (8)
0xffff7ab19a94   276  str lr, [jssp, #-8]!
0xffff7ab19a98   280  ldr x16, pc+368 (addr 0x0000ffff7ab19c08)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab19a9c   284  blr x16
0xffff7ab19aa0   288  ldr lr, [jssp], #8
0xffff7ab19aa4   292  mov x5, x9
0xffff7ab19aa8   296  add w2, w8, #0x1 (1)
0xffff7ab19aac   300  lsl x2, x2, #32
0xffff7ab19ab0   304  stur x2, [x1, #23]
0xffff7ab19ab4   308  add x1, x5, #0xf (15)
0xffff7ab19ab8   312  fsub d29, d0, d15
0xffff7ab19abc   316  str d29, [x1, w8, sxtw #3]
0xffff7ab19ac0   320  ret
0xffff7ab19ac4   324  sub csp, jssp, #0x10 (16)
0xffff7ab19ac8   328  stp fp, lr, [jssp, #-16]!
0xffff7ab19acc   332  movz fp, #0xa00000000
0xffff7ab19ad0   336  sub csp, jssp, #0x8 (8)
0xffff7ab19ad4   340  str fp, [jssp, #-8]!
0xffff7ab19ad8   344  add fp, jssp, #0x8 (8)
0xffff7ab19adc   348  ldur x16, [x2, #-1]
0xffff7ab19ae0   352  ldr x17, [x26, #120]
0xffff7ab19ae4   356  cmp x16, x17
0xffff7ab19ae8   360  b.ne #+0x198 (addr 0xffff7ab19c80)
0xffff7ab19aec   364  ldur d29, [x2, #7]
0xffff7ab19af0   368  fcvtzs w8, d29
0xffff7ab19af4   372  scvtf d1, w8
0xffff7ab19af8   376  fcmp d29, d1
0xffff7ab19afc   380  b.ne #+0x184 (addr 0xffff7ab19c80)
0xffff7ab19b00   384  ldr lr, [jssp, #16]
0xffff7ab19b04   388  ldp xzr, fp, [jssp], #24
0xffff7ab19b08   392  b #-0x158 (addr 0xffff7ab199b0)
0xffff7ab19b0c   396  sub csp, jssp, #0x10 (16)
0xffff7ab19b10   400  stp fp, lr, [jssp, #-16]!
0xffff7ab19b14   404  movz fp, #0xa00000000
0xffff7ab19b18   408  sub csp, jssp, #0x8 (8)
0xffff7ab19b1c   412  str fp, [jssp, #-8]!
0xffff7ab19b20   416  add fp, jssp, #0x8 (8)
0xffff7ab19b24   420  ldur x16, [x2, #-1]
0xffff7ab19b28   424  ldr x17, [x26, #120]
0xffff7ab19b2c   428  cmp x16, x17
0xffff7ab19b30   432  b.ne #+0x30 (addr 0xffff7ab19b60)
0xffff7ab19b34   436  ldur d30, [x2, #7]
0xffff7ab19b38   440  fcvtzs x9, d30
0xffff7ab19b3c   444  cmp x9, #0x1 (1)
0xffff7ab19b40   448  ccmn x9, #1, #nzcV, vc
0xffff7ab19b44   452  b.vc #+0x18 (addr 0xffff7ab19b5c)
0xffff7ab19b48   456  sub csp, jssp, #0x8 (8)
0xffff7ab19b4c   460  str lr, [jssp, #-8]!
0xffff7ab19b50   464  ldr x16, pc+192 (addr 0x0000ffff7ab19c10)    ;; code: STUB, DoubleToIStub, minor: 127554
0xffff7ab19b54   468  blr x16
0xffff7ab19b58   472  ldr lr, [jssp], #8
0xffff7ab19b5c   476  b #+0x24 (addr 0xffff7ab19b80)
0xffff7ab19b60   480  ldp x9, x7, [x26, #64]
0xffff7ab19b64   484  cmp x2, x9
0xffff7ab19b68   488  cset x9, eq
0xffff7ab19b6c   492  ccmp x2, x7, #nZcv, ne
0xffff7ab19b70   496  b.eq #+0x10 (addr 0xffff7ab19b80)
0xffff7ab19b74   500  ldr x16, [x26, #40]
0xffff7ab19b78   504  cmp x2, x16
0xffff7ab19b7c   508  b.ne #+0x10c (addr 0xffff7ab19c88)
0xffff7ab19b80   512  ldr lr, [jssp, #16]
0xffff7ab19b84   516  ldp xzr, fp, [jssp], #24
0xffff7ab19b88   520  b #-0x1a0 (addr 0xffff7ab199e8)
0xffff7ab19b8c   524  sub csp, jssp, #0x10 (16)
0xffff7ab19b90   528  stp fp, lr, [jssp, #-16]!
0xffff7ab19b94   532  movz fp, #0xa00000000
0xffff7ab19b98   536  sub csp, jssp, #0x8 (8)
0xffff7ab19b9c   540  str fp, [jssp, #-8]!
0xffff7ab19ba0   544  add fp, jssp, #0x8 (8)
0xffff7ab19ba4   548  movz x9, #0x0
0xffff7ab19ba8   552  mov x16, lr
0xffff7ab19bac   556  ldr x17, pc+108 (addr 0x0000ffff7ab19c18)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab19bb0   560  blr x17
0xffff7ab19bb4   564  lsl x0, x3, #32
0xffff7ab19bb8   568  movz x10, #0x100000000
0xffff7ab19bbc   572  sub csp, jssp, #0x10 (16)
0xffff7ab19bc0   576  stp x10, x0, [jssp, #-16]!
0xffff7ab19bc4   580  movz x0, #0x2
0xffff7ab19bc8   584  movz x1, #0x5b88
0xffff7ab19bcc   588  movk x1, #0xe2, lsl #16
0xffff7ab19bd0   592  ldr x16, pc+80 (addr 0x0000ffff7ab19c20)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab19bd4   596  blr x16
0xffff7ab19bd8   600  str x0, [jssp, #72]
0xffff7ab19bdc   604  ldr x16, pc+76 (addr 0x0000ffff7ab19c28)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab19be0   608  blr x16
0xffff7ab19be4   612  ldr lr, [jssp, #16]
0xffff7ab19be8   616  ldp xzr, fp, [jssp], #24
0xffff7ab19bec   620  b #-0x1c0 (addr 0xffff7ab19a2c)
0xffff7ab19bf0   624  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab19bf4   628  d63f03e0       constant
0xffff7ab19bf8   632  fff7ffff       constant
0xffff7ab19bfc   636  fff7ffff       constant
0xffff7ab19c00   640  4ec052d9       constant
0xffff7ab19c04   644  00000000       constant
0xffff7ab19c08   648  7ab170c0       constant
0xffff7ab19c0c   652  0000ffff       constant
0xffff7ab19c10   656  7ab178a0       constant
0xffff7ab19c14   660  0000ffff       constant
0xffff7ab19c18   664  7ab06820       constant
0xffff7ab19c1c   668  0000ffff       constant
0xffff7ab19c20   672  7ab06260       constant
0xffff7ab19c24   676  0000ffff       constant
0xffff7ab19c28   680  7ab068e0       constant
0xffff7ab19c2c   684  0000ffff       constant
0xffff7ab19c30   688  movz x16, #0x0
0xffff7ab19c34   692  sub csp, jssp, #0x10 (16)
0xffff7ab19c38   696  stp fp, lr, [jssp, #-16]!
0xffff7ab19c3c   700  bl #+0x54 (addr 0xffff7ab19c90)
0xffff7ab19c40   704  movz x16, #0x8
0xffff7ab19c44   708  sub csp, jssp, #0x10 (16)
0xffff7ab19c48   712  stp fp, lr, [jssp, #-16]!
0xffff7ab19c4c   716  bl #+0x44 (addr 0xffff7ab19c90)
0xffff7ab19c50   720  movz x16, #0x10
0xffff7ab19c54   724  sub csp, jssp, #0x10 (16)
0xffff7ab19c58   728  stp fp, lr, [jssp, #-16]!
0xffff7ab19c5c   732  bl #+0x34 (addr 0xffff7ab19c90)
0xffff7ab19c60   736  movz x16, #0x18
0xffff7ab19c64   740  sub csp, jssp, #0x10 (16)
0xffff7ab19c68   744  stp fp, lr, [jssp, #-16]!
0xffff7ab19c6c   748  bl #+0x24 (addr 0xffff7ab19c90)
0xffff7ab19c70   752  movz x16, #0x20
0xffff7ab19c74   756  sub csp, jssp, #0x10 (16)
0xffff7ab19c78   760  stp fp, lr, [jssp, #-16]!
0xffff7ab19c7c   764  bl #+0x14 (addr 0xffff7ab19c90)
0xffff7ab19c80   768  movz x16, #0x28
0xffff7ab19c84   772  bl #+0x1c (addr 0xffff7ab19ca0)
0xffff7ab19c88   776  movz x16, #0x30
0xffff7ab19c8c   780  bl #+0x14 (addr 0xffff7ab19ca0)
0xffff7ab19c90   784  movz x17, #0xa00000000
0xffff7ab19c94   788  sub csp, jssp, #0x10 (16)
0xffff7ab19c98   792  stp x17, cp, [jssp, #-16]!
0xffff7ab19c9c   796  add fp, jssp, #0x10 (16)
0xffff7ab19ca0   800  ldr x17, pc+24 (addr 0x0000ffff7ab19cb8)    ;; lazy deoptimization bailout 0
0xffff7ab19ca4   804  add x17, x17, x16
0xffff7ab19ca8   808  br x17
0xffff7ab19cac   812  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab19cb0   816  d63f03e0       constant
0xffff7ab19cb4   820  d503201f       constant
0xffff7ab19cb8   824  7a906000       constant
0xffff7ab19cbc   828  0000ffff       constant


Safepoints (size = 21)
0xffff7ab19bd8   600  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0xffff7ab19a2c  embedded object  (0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19a98  code target (STUB)  (0xffff7ab170c0)
0xffff7ab19b50  code target (STUB)  (0xffff7ab178a0)
0xffff7ab19bac  code target (STUB)  (0xffff7ab06820)
0xffff7ab19bd0  code target (STUB)  (0xffff7ab06260)
0xffff7ab19bdc  code target (STUB)  (0xffff7ab068e0)
0xffff7ab19bf0  constant pool (size 64)
0xffff7ab19ca0  runtime entry
0xffff7ab19cac  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 853)
0xffff7ab19980     0  ldur x5, [x1, #15]
0xffff7ab19984     4  ldur w6, [x1, #27]
0xffff7ab19988     8  tbz w0, #0, #+0x1c (addr 0xffff7ab199a4)
0xffff7ab1998c    12  ldur x16, [x0, #-1]
0xffff7ab19990    16  ldr x17, [x26, #120]
0xffff7ab19994    20  cmp x16, x17
0xffff7ab19998    24  b.ne #+0x298 (addr 0xffff7ab19c30)
0xffff7ab1999c    28  ldur d0, [x0, #7]
0xffff7ab199a0    32  b #+0x8 (addr 0xffff7ab199a8)
0xffff7ab199a4    36  scvtf d0, x0, #32
0xffff7ab199a8    40  tbnz w2, #0, #+0x11c (addr 0xffff7ab19ac4)
0xffff7ab199ac    44  asr x8, x2, #32
0xffff7ab199b0    48  cmp w6, w8
0xffff7ab199b4    52  b.le #+0x10 (addr 0xffff7ab199c4)
0xffff7ab199b8    56  cmp w8, w6
0xffff7ab199bc    60  b.hs #+0x284 (addr 0xffff7ab19c40)
0xffff7ab199c0    64  b #+0xf4 (addr 0xffff7ab19ab4)
0xffff7ab199c4    68  ldur w7, [x5, #11]
0xffff7ab199c8    72  cmp w7, w8
0xffff7ab199cc    76  b.gt #+0xdc (addr 0xffff7ab19aa8)
0xffff7ab199d0    80  adds w7, w7, #0x400 (1024)
0xffff7ab199d4    84  b.vs #+0x27c (addr 0xffff7ab19c50)
0xffff7ab199d8    88  cmp w8, w7
0xffff7ab199dc    92  b.hs #+0x284 (addr 0xffff7ab19c60)
0xffff7ab199e0    96  tbnz w2, #0, #+0x12c (addr 0xffff7ab19b0c)
0xffff7ab199e4   100  asr x9, x2, #32
0xffff7ab199e8   104  add w7, w8, w9, lsr #1
0xffff7ab199ec   108  add w7, w7, #0x10 (16)
0xffff7ab199f0   112  movz w16, #0x95ff
0xffff7ab199f4   116  cmp w7, w16, lsl #1
0xffff7ab199f8   120  b.hs #+0x278 (addr 0xffff7ab19c70)
0xffff7ab199fc   124  lsl x2, x7, #32
0xffff7ab19a00   128  lsl w3, w7, #3
0xffff7ab19a04   132  add w3, w3, #0x10 (16)
0xffff7ab19a08   136  sxtw x3, w3
0xffff7ab19a0c   140  movz x4, #0xe2c0
0xffff7ab19a10   144  movk x4, #0x9ab, lsl #16
0xffff7ab19a14   148  ldp x9, x16, [x4]
0xffff7ab19a18   152  adds x7, x9, x3
0xffff7ab19a1c   156  ccmp x7, x16, #nzCv, lo
0xffff7ab19a20   160  b.hi #+0x16c (addr 0xffff7ab19b8c)
0xffff7ab19a24   164  str x7, [x4]
0xffff7ab19a28   168  orr x9, x9, #0x1
0xffff7ab19a2c   172  ldr x3, pc+468 (addr 0x0000ffff7ab19c00)    ;; object: 0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19a30   176  stur x3, [x9, #-1]
0xffff7ab19a34   180  stur x2, [x9, #7]
0xffff7ab19a38   184  ldr d1, pc+448 (addr 0x0000ffff7ab19bf8)
0xffff7ab19a3c   188  ldur w2, [x9, #11]
0xffff7ab19a40   192  cmp w6, w2
0xffff7ab19a44   196  b.ge #+0x14 (addr 0xffff7ab19a58)
0xffff7ab19a48   200  sub w2, w2, #0x1 (1)
0xffff7ab19a4c   204  add x3, x9, #0xf (15)
0xffff7ab19a50   208  str d1, [x3, w2, sxtw #3]
0xffff7ab19a54   212  b #-0x14 (addr 0xffff7ab19a40)
0xffff7ab19a58   216  cmp w6, #0x0 (0)
0xffff7ab19a5c   220  b.le #+0x1c (addr 0xffff7ab19a78)
0xffff7ab19a60   224  sub w6, w6, #0x1 (1)
0xffff7ab19a64   228  add x2, x5, #0xf (15)
0xffff7ab19a68   232  ldr d1, [x2, w6, sxtw #3]
0xffff7ab19a6c   236  add x2, x9, #0xf (15)
0xffff7ab19a70   240  str d1, [x2, w6, sxtw #3]
0xffff7ab19a74   244  b #-0x1c (addr 0xffff7ab19a58)
0xffff7ab19a78   248  mov x2, x9
0xffff7ab19a7c   252  stur x2, [x1, #15]
0xffff7ab19a80   256  add x3, x1, #0xf (15)
0xffff7ab19a84   260  and x2, x1, #0xfffffffffff00000
0xffff7ab19a88   264  ldr x2, [x2, #8]
0xffff7ab19a8c   268  tbz w2, #2, #+0x18 (addr 0xffff7ab19aa4)
0xffff7ab19a90   272  sub csp, jssp, #0x8 (8)
0xffff7ab19a94   276  str lr, [jssp, #-8]!
0xffff7ab19a98   280  ldr x16, pc+368 (addr 0x0000ffff7ab19c08)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab19a9c   284  blr x16
0xffff7ab19aa0   288  ldr lr, [jssp], #8
0xffff7ab19aa4   292  mov x5, x9
0xffff7ab19aa8   296  add w2, w8, #0x1 (1)
0xffff7ab19aac   300  lsl x2, x2, #32
0xffff7ab19ab0   304  stur x2, [x1, #23]
0xffff7ab19ab4   308  add x1, x5, #0xf (15)
0xffff7ab19ab8   312  fsub d29, d0, d15
0xffff7ab19abc   316  str d29, [x1, w8, sxtw #3]
0xffff7ab19ac0   320  ret
0xffff7ab19ac4   324  sub csp, jssp, #0x10 (16)
0xffff7ab19ac8   328  stp fp, lr, [jssp, #-16]!
0xffff7ab19acc   332  movz fp, #0xa00000000
0xffff7ab19ad0   336  sub csp, jssp, #0x8 (8)
0xffff7ab19ad4   340  str fp, [jssp, #-8]!
0xffff7ab19ad8   344  add fp, jssp, #0x8 (8)
0xffff7ab19adc   348  ldur x16, [x2, #-1]
0xffff7ab19ae0   352  ldr x17, [x26, #120]
0xffff7ab19ae4   356  cmp x16, x17
0xffff7ab19ae8   360  b.ne #+0x198 (addr 0xffff7ab19c80)
0xffff7ab19aec   364  ldur d29, [x2, #7]
0xffff7ab19af0   368  fcvtzs w8, d29
0xffff7ab19af4   372  scvtf d1, w8
0xffff7ab19af8   376  fcmp d29, d1
0xffff7ab19afc   380  b.ne #+0x184 (addr 0xffff7ab19c80)
0xffff7ab19b00   384  ldr lr, [jssp, #16]
0xffff7ab19b04   388  ldp xzr, fp, [jssp], #24
0xffff7ab19b08   392  b #-0x158 (addr 0xffff7ab199b0)
0xffff7ab19b0c   396  sub csp, jssp, #0x10 (16)
0xffff7ab19b10   400  stp fp, lr, [jssp, #-16]!
0xffff7ab19b14   404  movz fp, #0xa00000000
0xffff7ab19b18   408  sub csp, jssp, #0x8 (8)
0xffff7ab19b1c   412  str fp, [jssp, #-8]!
0xffff7ab19b20   416  add fp, jssp, #0x8 (8)
0xffff7ab19b24   420  ldur x16, [x2, #-1]
0xffff7ab19b28   424  ldr x17, [x26, #120]
0xffff7ab19b2c   428  cmp x16, x17
0xffff7ab19b30   432  b.ne #+0x30 (addr 0xffff7ab19b60)
0xffff7ab19b34   436  ldur d30, [x2, #7]
0xffff7ab19b38   440  fcvtzs x9, d30
0xffff7ab19b3c   444  cmp x9, #0x1 (1)
0xffff7ab19b40   448  ccmn x9, #1, #nzcV, vc
0xffff7ab19b44   452  b.vc #+0x18 (addr 0xffff7ab19b5c)
0xffff7ab19b48   456  sub csp, jssp, #0x8 (8)
0xffff7ab19b4c   460  str lr, [jssp, #-8]!
0xffff7ab19b50   464  ldr x16, pc+192 (addr 0x0000ffff7ab19c10)    ;; code: STUB, DoubleToIStub, minor: 127554
0xffff7ab19b54   468  blr x16
0xffff7ab19b58   472  ldr lr, [jssp], #8
0xffff7ab19b5c   476  b #+0x24 (addr 0xffff7ab19b80)
0xffff7ab19b60   480  ldp x9, x7, [x26, #64]
0xffff7ab19b64   484  cmp x2, x9
0xffff7ab19b68   488  cset x9, eq
0xffff7ab19b6c   492  ccmp x2, x7, #nZcv, ne
0xffff7ab19b70   496  b.eq #+0x10 (addr 0xffff7ab19b80)
0xffff7ab19b74   500  ldr x16, [x26, #40]
0xffff7ab19b78   504  cmp x2, x16
0xffff7ab19b7c   508  b.ne #+0x10c (addr 0xffff7ab19c88)
0xffff7ab19b80   512  ldr lr, [jssp, #16]
0xffff7ab19b84   516  ldp xzr, fp, [jssp], #24
0xffff7ab19b88   520  b #-0x1a0 (addr 0xffff7ab199e8)
0xffff7ab19b8c   524  sub csp, jssp, #0x10 (16)
0xffff7ab19b90   528  stp fp, lr, [jssp, #-16]!
0xffff7ab19b94   532  movz fp, #0xa00000000
0xffff7ab19b98   536  sub csp, jssp, #0x8 (8)
0xffff7ab19b9c   540  str fp, [jssp, #-8]!
0xffff7ab19ba0   544  add fp, jssp, #0x8 (8)
0xffff7ab19ba4   548  movz x9, #0x0
0xffff7ab19ba8   552  mov x16, lr
0xffff7ab19bac   556  ldr x17, pc+108 (addr 0x0000ffff7ab19c18)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab19bb0   560  blr x17
0xffff7ab19bb4   564  lsl x0, x3, #32
0xffff7ab19bb8   568  movz x10, #0x100000000
0xffff7ab19bbc   572  sub csp, jssp, #0x10 (16)
0xffff7ab19bc0   576  stp x10, x0, [jssp, #-16]!
0xffff7ab19bc4   580  movz x0, #0x2
0xffff7ab19bc8   584  movz x1, #0x5b88
0xffff7ab19bcc   588  movk x1, #0xe2, lsl #16
0xffff7ab19bd0   592  ldr x16, pc+80 (addr 0x0000ffff7ab19c20)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab19bd4   596  blr x16
0xffff7ab19bd8   600  str x0, [jssp, #72]
0xffff7ab19bdc   604  ldr x16, pc+76 (addr 0x0000ffff7ab19c28)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab19be0   608  blr x16
0xffff7ab19be4   612  ldr lr, [jssp, #16]
0xffff7ab19be8   616  ldp xzr, fp, [jssp], #24
0xffff7ab19bec   620  b #-0x1c0 (addr 0xffff7ab19a2c)
0xffff7ab19bf0   624  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab19bf4   628  d63f03e0       constant
0xffff7ab19bf8   632  fff7ffff       constant
0xffff7ab19bfc   636  fff7ffff       constant
0xffff7ab19c00   640  4ec052d9       constant
0xffff7ab19c04   644  00000000       constant
0xffff7ab19c08   648  7ab170c0       constant
0xffff7ab19c0c   652  0000ffff       constant
0xffff7ab19c10   656  7ab178a0       constant
0xffff7ab19c14   660  0000ffff       constant
0xffff7ab19c18   664  7ab06820       constant
0xffff7ab19c1c   668  0000ffff       constant
0xffff7ab19c20   672  7ab06260       constant
0xffff7ab19c24   676  0000ffff       constant
0xffff7ab19c28   680  7ab068e0       constant
0xffff7ab19c2c   684  0000ffff       constant
0xffff7ab19c30   688  movz x16, #0x0
0xffff7ab19c34   692  sub csp, jssp, #0x10 (16)
0xffff7ab19c38   696  stp fp, lr, [jssp, #-16]!
0xffff7ab19c3c   700  bl #+0x54 (addr 0xffff7ab19c90)
0xffff7ab19c40   704  movz x16, #0x8
0xffff7ab19c44   708  sub csp, jssp, #0x10 (16)
0xffff7ab19c48   712  stp fp, lr, [jssp, #-16]!
0xffff7ab19c4c   716  bl #+0x44 (addr 0xffff7ab19c90)
0xffff7ab19c50   720  movz x16, #0x10
0xffff7ab19c54   724  sub csp, jssp, #0x10 (16)
0xffff7ab19c58   728  stp fp, lr, [jssp, #-16]!
0xffff7ab19c5c   732  bl #+0x34 (addr 0xffff7ab19c90)
0xffff7ab19c60   736  movz x16, #0x18
0xffff7ab19c64   740  sub csp, jssp, #0x10 (16)
0xffff7ab19c68   744  stp fp, lr, [jssp, #-16]!
0xffff7ab19c6c   748  bl #+0x24 (addr 0xffff7ab19c90)
0xffff7ab19c70   752  movz x16, #0x20
0xffff7ab19c74   756  sub csp, jssp, #0x10 (16)
0xffff7ab19c78   760  stp fp, lr, [jssp, #-16]!
0xffff7ab19c7c   764  bl #+0x14 (addr 0xffff7ab19c90)
0xffff7ab19c80   768  movz x16, #0x28
0xffff7ab19c84   772  bl #+0x1c (addr 0xffff7ab19ca0)
0xffff7ab19c88   776  movz x16, #0x30
0xffff7ab19c8c   780  bl #+0x14 (addr 0xffff7ab19ca0)
0xffff7ab19c90   784  movz x17, #0xa00000000
0xffff7ab19c94   788  sub csp, jssp, #0x10 (16)
0xffff7ab19c98   792  stp x17, cp, [jssp, #-16]!
0xffff7ab19c9c   796  add fp, jssp, #0x10 (16)
0xffff7ab19ca0   800  ldr x17, pc+24 (addr 0x0000ffff7ab19cb8)    ;; lazy deoptimization bailout 0
0xffff7ab19ca4   804  add x17, x17, x16
0xffff7ab19ca8   808  br x17
0xffff7ab19cac   812  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab19cb0   816  d63f03e0       constant
0xffff7ab19cb4   820  d503201f       constant
0xffff7ab19cb8   824  7a906000       constant
0xffff7ab19cbc   828  0000ffff       constant


Safepoints (size = 21)
0xffff7ab19bd8   600  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0xffff7ab19a2c  embedded object  (0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19a98  code target (STUB)  (0xffff7ab170c0)
0xffff7ab19b50  code target (STUB)  (0xffff7ab178a0)
0xffff7ab19bac  code target (STUB)  (0xffff7ab06820)
0xffff7ab19bd0  code target (STUB)  (0xffff7ab06260)
0xffff7ab19bdc  code target (STUB)  (0xffff7ab068e0)
0xffff7ab19bf0  constant pool (size 64)
0xffff7ab19ca0  runtime entry
0xffff7ab19cac  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = TypeofStub
compiler = crankshaft
Instructions (size = 584)
0xffff7ab19d40     0  tbz w3, #0, #+0x14c (addr 0xffff7ab19e8c)
0xffff7ab19d44     4  ldur x0, [x3, #-1]
0xffff7ab19d48     8  ldr x16, pc+344 (addr 0x0000ffff7ab19ea0)    ;; object: 0x4ec04411 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19d4c    12  cmp x0, x16
0xffff7ab19d50    16  b.eq #+0x134 (addr 0xffff7ab19e84)
0xffff7ab19d54    20  ldur x0, [x3, #-1]
0xffff7ab19d58    24  ldrb w1, [x0, #11]
0xffff7ab19d5c    28  cmp w1, #0x80 (128)
0xffff7ab19d60    32  b.lt #+0x11c (addr 0xffff7ab19e7c)
0xffff7ab19d64    36  cmp w1, #0x83 (131)
0xffff7ab19d68    40  b.eq #+0x10c (addr 0xffff7ab19e74)
0xffff7ab19d6c    44  cmp w1, #0x80 (128)
0xffff7ab19d70    48  b.eq #+0xfc (addr 0xffff7ab19e6c)
0xffff7ab19d74    52  ldrb w1, [x0, #12]
0xffff7ab19d78    56  movz w16, #0x12
0xffff7ab19d7c    60  and w1, w1, w16
0xffff7ab19d80    64  cmp w1, #0x2 (2)
0xffff7ab19d84    68  b.eq #+0xe0 (addr 0xffff7ab19e64)
0xffff7ab19d88    72  ldr x2, pc+288 (addr 0x0000ffff7ab19ea8)    ;; object: 0x4ec04519 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19d8c    76  cmp x0, x2
0xffff7ab19d90    80  b.eq #+0xcc (addr 0xffff7ab19e5c)
0xffff7ab19d94    84  ldr x2, pc+284 (addr 0x0000ffff7ab19eb0)    ;; object: 0x4ec04571 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19d98    88  cmp x0, x2
0xffff7ab19d9c    92  b.eq #+0xb8 (addr 0xffff7ab19e54)
0xffff7ab19da0    96  ldr x2, pc+280 (addr 0x0000ffff7ab19eb8)    ;; object: 0x4ec045c9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19da4   100  cmp x0, x2
0xffff7ab19da8   104  b.eq #+0xa4 (addr 0xffff7ab19e4c)
0xffff7ab19dac   108  ldr x2, pc+276 (addr 0x0000ffff7ab19ec0)    ;; object: 0x4ec04621 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19db0   112  cmp x0, x2
0xffff7ab19db4   116  b.eq #+0x90 (addr 0xffff7ab19e44)
0xffff7ab19db8   120  ldr x2, pc+272 (addr 0x0000ffff7ab19ec8)    ;; object: 0x4ec04679 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19dbc   124  cmp x0, x2
0xffff7ab19dc0   128  b.eq #+0x7c (addr 0xffff7ab19e3c)
0xffff7ab19dc4   132  ldr x2, pc+268 (addr 0x0000ffff7ab19ed0)    ;; object: 0x4ec046d1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19dc8   136  cmp x0, x2
0xffff7ab19dcc   140  b.eq #+0x68 (addr 0xffff7ab19e34)
0xffff7ab19dd0   144  ldr x2, pc+264 (addr 0x0000ffff7ab19ed8)    ;; object: 0x4ec04729 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19dd4   148  cmp x0, x2
0xffff7ab19dd8   152  b.eq #+0x54 (addr 0xffff7ab19e2c)
0xffff7ab19ddc   156  ldr x2, pc+260 (addr 0x0000ffff7ab19ee0)    ;; object: 0x4ec04781 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19de0   160  cmp x0, x2
0xffff7ab19de4   164  b.eq #+0x40 (addr 0xffff7ab19e24)
0xffff7ab19de8   168  ldr x2, pc+256 (addr 0x0000ffff7ab19ee8)    ;; object: 0x4ec047d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19dec   172  cmp x0, x2
0xffff7ab19df0   176  b.eq #+0x2c (addr 0xffff7ab19e1c)
0xffff7ab19df4   180  ldr x2, pc+252 (addr 0x0000ffff7ab19ef0)    ;; object: 0x4ec04831 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19df8   184  cmp x0, x2
0xffff7ab19dfc   188  b.eq #+0x18 (addr 0xffff7ab19e14)
0xffff7ab19e00   192  cbnz w1, #+0xc (addr 0xffff7ab19e0c)
0xffff7ab19e04   196  ldr x0, pc+244 (addr 0x0000ffff7ab19ef8)    ;; object: 0x20d04499 <String[6]: object>
0xffff7ab19e08   200  b #+0x88 (addr 0xffff7ab19e90)
0xffff7ab19e0c   204  ldr x0, pc+244 (addr 0x0000ffff7ab19f00)    ;; object: 0x20d04451 <String[9]: undefined>
0xffff7ab19e10   208  b #+0x80 (addr 0xffff7ab19e90)
0xffff7ab19e14   212  ldr x0, pc+244 (addr 0x0000ffff7ab19f08)    ;; object: 0x20d04921 <String[8]: bool8x16>
0xffff7ab19e18   216  b #+0x78 (addr 0xffff7ab19e90)
0xffff7ab19e1c   220  ldr x0, pc+244 (addr 0x0000ffff7ab19f10)    ;; object: 0x20d05699 <String[8]: uint8x16>
0xffff7ab19e20   224  b #+0x70 (addr 0xffff7ab19e90)
0xffff7ab19e24   228  ldr x0, pc+244 (addr 0x0000ffff7ab19f18)    ;; object: 0x20d05031 <String[7]: int8x16>
0xffff7ab19e28   232  b #+0x68 (addr 0xffff7ab19e90)
0xffff7ab19e2c   236  ldr x0, pc+244 (addr 0x0000ffff7ab19f20)    ;; object: 0x20d048a1 <String[8]: bool16x8>
0xffff7ab19e30   240  b #+0x60 (addr 0xffff7ab19e90)
0xffff7ab19e34   244  ldr x0, pc+244 (addr 0x0000ffff7ab19f28)    ;; object: 0x20d05619 <String[8]: uint16x8>
0xffff7ab19e38   248  b #+0x58 (addr 0xffff7ab19e90)
0xffff7ab19e3c   252  ldr x0, pc+244 (addr 0x0000ffff7ab19f30)    ;; object: 0x20d04fb1 <String[7]: int16x8>
0xffff7ab19e40   256  b #+0x50 (addr 0xffff7ab19e90)
0xffff7ab19e44   260  ldr x0, pc+244 (addr 0x0000ffff7ab19f38)    ;; object: 0x20d048e1 <String[8]: bool32x4>
0xffff7ab19e48   264  b #+0x48 (addr 0xffff7ab19e90)
0xffff7ab19e4c   268  ldr x0, pc+244 (addr 0x0000ffff7ab19f40)    ;; object: 0x20d05659 <String[8]: uint32x4>
0xffff7ab19e50   272  b #+0x40 (addr 0xffff7ab19e90)
0xffff7ab19e54   276  ldr x0, pc+244 (addr 0x0000ffff7ab19f48)    ;; object: 0x20d04ff1 <String[7]: int32x4>
0xffff7ab19e58   280  b #+0x38 (addr 0xffff7ab19e90)
0xffff7ab19e5c   284  ldr x0, pc+244 (addr 0x0000ffff7ab19f50)    ;; object: 0x20d04d19 <String[9]: float32x4>
0xffff7ab19e60   288  b #+0x30 (addr 0xffff7ab19e90)
0xffff7ab19e64   292  ldr x0, pc+244 (addr 0x0000ffff7ab19f58)    ;; object: 0x20d04da9 <String[8]: function>
0xffff7ab19e68   296  b #+0x28 (addr 0xffff7ab19e90)
0xffff7ab19e6c   300  ldr x0, pc+244 (addr 0x0000ffff7ab19f60)    ;; object: 0x20d05559 <String[6]: symbol>
0xffff7ab19e70   304  b #+0x20 (addr 0xffff7ab19e90)
0xffff7ab19e74   308  ldur x0, [x3, #39]
0xffff7ab19e78   312  b #+0x18 (addr 0xffff7ab19e90)
0xffff7ab19e7c   316  ldr x0, pc+236 (addr 0x0000ffff7ab19f68)    ;; object: 0x20d05519 <String[6]: string>
0xffff7ab19e80   320  b #+0x10 (addr 0xffff7ab19e90)
0xffff7ab19e84   324  ldr x0, pc+236 (addr 0x0000ffff7ab19f70)    ;; object: 0x20d05251 <String[6]: number>
0xffff7ab19e88   328  b #+0x8 (addr 0xffff7ab19e90)
0xffff7ab19e8c   332  ldr x0, pc+236 (addr 0x0000ffff7ab19f78)    ;; object: 0x20d05251 <String[6]: number>
0xffff7ab19e90   336  ret
0xffff7ab19e94   340  5800075f       constant pool begin (num_const = 58)    ;; constant pool
0xffff7ab19e98   344  d63f03e0       constant
0xffff7ab19e9c   348  d503201f       constant
0xffff7ab19ea0   352  4ec04411       constant
0xffff7ab19ea4   356  00000000       constant
0xffff7ab19ea8   360  4ec04519       constant
0xffff7ab19eac   364  00000000       constant
0xffff7ab19eb0   368  4ec04571       constant
0xffff7ab19eb4   372  00000000       constant
0xffff7ab19eb8   376  4ec045c9       constant
0xffff7ab19ebc   380  00000000       constant
0xffff7ab19ec0   384  4ec04621       constant
0xffff7ab19ec4   388  00000000       constant
0xffff7ab19ec8   392  4ec04679       constant
0xffff7ab19ecc   396  00000000       constant
0xffff7ab19ed0   400  4ec046d1       constant
0xffff7ab19ed4   404  00000000       constant
0xffff7ab19ed8   408  4ec04729       constant
0xffff7ab19edc   412  00000000       constant
0xffff7ab19ee0   416  4ec04781       constant
0xffff7ab19ee4   420  00000000       constant
0xffff7ab19ee8   424  4ec047d9       constant
0xffff7ab19eec   428  00000000       constant
0xffff7ab19ef0   432  4ec04831       constant
0xffff7ab19ef4   436  00000000       constant
0xffff7ab19ef8   440  20d04499       constant
0xffff7ab19efc   444  00000000       constant
0xffff7ab19f00   448  20d04451       constant
0xffff7ab19f04   452  00000000       constant
0xffff7ab19f08   456  20d04921       constant
0xffff7ab19f0c   460  00000000       constant
0xffff7ab19f10   464  20d05699       constant
0xffff7ab19f14   468  00000000       constant
0xffff7ab19f18   472  20d05031       constant
0xffff7ab19f1c   476  00000000       constant
0xffff7ab19f20   480  20d048a1       constant
0xffff7ab19f24   484  00000000       constant
0xffff7ab19f28   488  20d05619       constant
0xffff7ab19f2c   492  00000000       constant
0xffff7ab19f30   496  20d04fb1       constant
0xffff7ab19f34   500  00000000       constant
0xffff7ab19f38   504  20d048e1       constant
0xffff7ab19f3c   508  00000000       constant
0xffff7ab19f40   512  20d05659       constant
0xffff7ab19f44   516  00000000       constant
0xffff7ab19f48   520  20d04ff1       constant
0xffff7ab19f4c   524  00000000       constant
0xffff7ab19f50   528  20d04d19       constant
0xffff7ab19f54   532  00000000       constant
0xffff7ab19f58   536  20d04da9       constant
0xffff7ab19f5c   540  00000000       constant
0xffff7ab19f60   544  20d05559       constant
0xffff7ab19f64   548  00000000       constant
0xffff7ab19f68   552  20d05519       constant
0xffff7ab19f6c   556  00000000       constant
0xffff7ab19f70   560  20d05251       constant
0xffff7ab19f74   564  00000000       constant
0xffff7ab19f78   568  20d05251       constant
0xffff7ab19f7c   572  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 36)
0xffff7ab19d48  embedded object  (0x4ec04411 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19d88  embedded object  (0x4ec04519 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19d94  embedded object  (0x4ec04571 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19da0  embedded object  (0x4ec045c9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19dac  embedded object  (0x4ec04621 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19db8  embedded object  (0x4ec04679 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19dc4  embedded object  (0x4ec046d1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19dd0  embedded object  (0x4ec04729 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19ddc  embedded object  (0x4ec04781 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19de8  embedded object  (0x4ec047d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19df4  embedded object  (0x4ec04831 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19e04  embedded object  (0x20d04499 <String[6]: object>)
0xffff7ab19e0c  embedded object  (0x20d04451 <String[9]: undefined>)
0xffff7ab19e14  embedded object  (0x20d04921 <String[8]: bool8x16>)
0xffff7ab19e1c  embedded object  (0x20d05699 <String[8]: uint8x16>)
0xffff7ab19e24  embedded object  (0x20d05031 <String[7]: int8x16>)
0xffff7ab19e2c  embedded object  (0x20d048a1 <String[8]: bool16x8>)
0xffff7ab19e34  embedded object  (0x20d05619 <String[8]: uint16x8>)
0xffff7ab19e3c  embedded object  (0x20d04fb1 <String[7]: int16x8>)
0xffff7ab19e44  embedded object  (0x20d048e1 <String[8]: bool32x4>)
0xffff7ab19e4c  embedded object  (0x20d05659 <String[8]: uint32x4>)
0xffff7ab19e54  embedded object  (0x20d04ff1 <String[7]: int32x4>)
0xffff7ab19e5c  embedded object  (0x20d04d19 <String[9]: float32x4>)
0xffff7ab19e64  embedded object  (0x20d04da9 <String[8]: function>)
0xffff7ab19e6c  embedded object  (0x20d05559 <String[6]: symbol>)
0xffff7ab19e7c  embedded object  (0x20d05519 <String[6]: string>)
0xffff7ab19e84  embedded object  (0x20d05251 <String[6]: number>)
0xffff7ab19e8c  embedded object  (0x20d05251 <String[6]: number>)
0xffff7ab19e94  constant pool (size 236)

--- End code ---
kind = STUB
major_key = TypeofStub
name = TypeofStub
compiler = crankshaft
Instructions (size = 584)
0xffff7ab19d40     0  tbz w3, #0, #+0x14c (addr 0xffff7ab19e8c)
0xffff7ab19d44     4  ldur x0, [x3, #-1]
0xffff7ab19d48     8  ldr x16, pc+344 (addr 0x0000ffff7ab19ea0)    ;; object: 0x4ec04411 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19d4c    12  cmp x0, x16
0xffff7ab19d50    16  b.eq #+0x134 (addr 0xffff7ab19e84)
0xffff7ab19d54    20  ldur x0, [x3, #-1]
0xffff7ab19d58    24  ldrb w1, [x0, #11]
0xffff7ab19d5c    28  cmp w1, #0x80 (128)
0xffff7ab19d60    32  b.lt #+0x11c (addr 0xffff7ab19e7c)
0xffff7ab19d64    36  cmp w1, #0x83 (131)
0xffff7ab19d68    40  b.eq #+0x10c (addr 0xffff7ab19e74)
0xffff7ab19d6c    44  cmp w1, #0x80 (128)
0xffff7ab19d70    48  b.eq #+0xfc (addr 0xffff7ab19e6c)
0xffff7ab19d74    52  ldrb w1, [x0, #12]
0xffff7ab19d78    56  movz w16, #0x12
0xffff7ab19d7c    60  and w1, w1, w16
0xffff7ab19d80    64  cmp w1, #0x2 (2)
0xffff7ab19d84    68  b.eq #+0xe0 (addr 0xffff7ab19e64)
0xffff7ab19d88    72  ldr x2, pc+288 (addr 0x0000ffff7ab19ea8)    ;; object: 0x4ec04519 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19d8c    76  cmp x0, x2
0xffff7ab19d90    80  b.eq #+0xcc (addr 0xffff7ab19e5c)
0xffff7ab19d94    84  ldr x2, pc+284 (addr 0x0000ffff7ab19eb0)    ;; object: 0x4ec04571 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19d98    88  cmp x0, x2
0xffff7ab19d9c    92  b.eq #+0xb8 (addr 0xffff7ab19e54)
0xffff7ab19da0    96  ldr x2, pc+280 (addr 0x0000ffff7ab19eb8)    ;; object: 0x4ec045c9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19da4   100  cmp x0, x2
0xffff7ab19da8   104  b.eq #+0xa4 (addr 0xffff7ab19e4c)
0xffff7ab19dac   108  ldr x2, pc+276 (addr 0x0000ffff7ab19ec0)    ;; object: 0x4ec04621 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19db0   112  cmp x0, x2
0xffff7ab19db4   116  b.eq #+0x90 (addr 0xffff7ab19e44)
0xffff7ab19db8   120  ldr x2, pc+272 (addr 0x0000ffff7ab19ec8)    ;; object: 0x4ec04679 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19dbc   124  cmp x0, x2
0xffff7ab19dc0   128  b.eq #+0x7c (addr 0xffff7ab19e3c)
0xffff7ab19dc4   132  ldr x2, pc+268 (addr 0x0000ffff7ab19ed0)    ;; object: 0x4ec046d1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19dc8   136  cmp x0, x2
0xffff7ab19dcc   140  b.eq #+0x68 (addr 0xffff7ab19e34)
0xffff7ab19dd0   144  ldr x2, pc+264 (addr 0x0000ffff7ab19ed8)    ;; object: 0x4ec04729 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19dd4   148  cmp x0, x2
0xffff7ab19dd8   152  b.eq #+0x54 (addr 0xffff7ab19e2c)
0xffff7ab19ddc   156  ldr x2, pc+260 (addr 0x0000ffff7ab19ee0)    ;; object: 0x4ec04781 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19de0   160  cmp x0, x2
0xffff7ab19de4   164  b.eq #+0x40 (addr 0xffff7ab19e24)
0xffff7ab19de8   168  ldr x2, pc+256 (addr 0x0000ffff7ab19ee8)    ;; object: 0x4ec047d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19dec   172  cmp x0, x2
0xffff7ab19df0   176  b.eq #+0x2c (addr 0xffff7ab19e1c)
0xffff7ab19df4   180  ldr x2, pc+252 (addr 0x0000ffff7ab19ef0)    ;; object: 0x4ec04831 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab19df8   184  cmp x0, x2
0xffff7ab19dfc   188  b.eq #+0x18 (addr 0xffff7ab19e14)
0xffff7ab19e00   192  cbnz w1, #+0xc (addr 0xffff7ab19e0c)
0xffff7ab19e04   196  ldr x0, pc+244 (addr 0x0000ffff7ab19ef8)    ;; object: 0x20d04499 <String[6]: object>
0xffff7ab19e08   200  b #+0x88 (addr 0xffff7ab19e90)
0xffff7ab19e0c   204  ldr x0, pc+244 (addr 0x0000ffff7ab19f00)    ;; object: 0x20d04451 <String[9]: undefined>
0xffff7ab19e10   208  b #+0x80 (addr 0xffff7ab19e90)
0xffff7ab19e14   212  ldr x0, pc+244 (addr 0x0000ffff7ab19f08)    ;; object: 0x20d04921 <String[8]: bool8x16>
0xffff7ab19e18   216  b #+0x78 (addr 0xffff7ab19e90)
0xffff7ab19e1c   220  ldr x0, pc+244 (addr 0x0000ffff7ab19f10)    ;; object: 0x20d05699 <String[8]: uint8x16>
0xffff7ab19e20   224  b #+0x70 (addr 0xffff7ab19e90)
0xffff7ab19e24   228  ldr x0, pc+244 (addr 0x0000ffff7ab19f18)    ;; object: 0x20d05031 <String[7]: int8x16>
0xffff7ab19e28   232  b #+0x68 (addr 0xffff7ab19e90)
0xffff7ab19e2c   236  ldr x0, pc+244 (addr 0x0000ffff7ab19f20)    ;; object: 0x20d048a1 <String[8]: bool16x8>
0xffff7ab19e30   240  b #+0x60 (addr 0xffff7ab19e90)
0xffff7ab19e34   244  ldr x0, pc+244 (addr 0x0000ffff7ab19f28)    ;; object: 0x20d05619 <String[8]: uint16x8>
0xffff7ab19e38   248  b #+0x58 (addr 0xffff7ab19e90)
0xffff7ab19e3c   252  ldr x0, pc+244 (addr 0x0000ffff7ab19f30)    ;; object: 0x20d04fb1 <String[7]: int16x8>
0xffff7ab19e40   256  b #+0x50 (addr 0xffff7ab19e90)
0xffff7ab19e44   260  ldr x0, pc+244 (addr 0x0000ffff7ab19f38)    ;; object: 0x20d048e1 <String[8]: bool32x4>
0xffff7ab19e48   264  b #+0x48 (addr 0xffff7ab19e90)
0xffff7ab19e4c   268  ldr x0, pc+244 (addr 0x0000ffff7ab19f40)    ;; object: 0x20d05659 <String[8]: uint32x4>
0xffff7ab19e50   272  b #+0x40 (addr 0xffff7ab19e90)
0xffff7ab19e54   276  ldr x0, pc+244 (addr 0x0000ffff7ab19f48)    ;; object: 0x20d04ff1 <String[7]: int32x4>
0xffff7ab19e58   280  b #+0x38 (addr 0xffff7ab19e90)
0xffff7ab19e5c   284  ldr x0, pc+244 (addr 0x0000ffff7ab19f50)    ;; object: 0x20d04d19 <String[9]: float32x4>
0xffff7ab19e60   288  b #+0x30 (addr 0xffff7ab19e90)
0xffff7ab19e64   292  ldr x0, pc+244 (addr 0x0000ffff7ab19f58)    ;; object: 0x20d04da9 <String[8]: function>
0xffff7ab19e68   296  b #+0x28 (addr 0xffff7ab19e90)
0xffff7ab19e6c   300  ldr x0, pc+244 (addr 0x0000ffff7ab19f60)    ;; object: 0x20d05559 <String[6]: symbol>
0xffff7ab19e70   304  b #+0x20 (addr 0xffff7ab19e90)
0xffff7ab19e74   308  ldur x0, [x3, #39]
0xffff7ab19e78   312  b #+0x18 (addr 0xffff7ab19e90)
0xffff7ab19e7c   316  ldr x0, pc+236 (addr 0x0000ffff7ab19f68)    ;; object: 0x20d05519 <String[6]: string>
0xffff7ab19e80   320  b #+0x10 (addr 0xffff7ab19e90)
0xffff7ab19e84   324  ldr x0, pc+236 (addr 0x0000ffff7ab19f70)    ;; object: 0x20d05251 <String[6]: number>
0xffff7ab19e88   328  b #+0x8 (addr 0xffff7ab19e90)
0xffff7ab19e8c   332  ldr x0, pc+236 (addr 0x0000ffff7ab19f78)    ;; object: 0x20d05251 <String[6]: number>
0xffff7ab19e90   336  ret
0xffff7ab19e94   340  5800075f       constant pool begin (num_const = 58)    ;; constant pool
0xffff7ab19e98   344  d63f03e0       constant
0xffff7ab19e9c   348  d503201f       constant
0xffff7ab19ea0   352  4ec04411       constant
0xffff7ab19ea4   356  00000000       constant
0xffff7ab19ea8   360  4ec04519       constant
0xffff7ab19eac   364  00000000       constant
0xffff7ab19eb0   368  4ec04571       constant
0xffff7ab19eb4   372  00000000       constant
0xffff7ab19eb8   376  4ec045c9       constant
0xffff7ab19ebc   380  00000000       constant
0xffff7ab19ec0   384  4ec04621       constant
0xffff7ab19ec4   388  00000000       constant
0xffff7ab19ec8   392  4ec04679       constant
0xffff7ab19ecc   396  00000000       constant
0xffff7ab19ed0   400  4ec046d1       constant
0xffff7ab19ed4   404  00000000       constant
0xffff7ab19ed8   408  4ec04729       constant
0xffff7ab19edc   412  00000000       constant
0xffff7ab19ee0   416  4ec04781       constant
0xffff7ab19ee4   420  00000000       constant
0xffff7ab19ee8   424  4ec047d9       constant
0xffff7ab19eec   428  00000000       constant
0xffff7ab19ef0   432  4ec04831       constant
0xffff7ab19ef4   436  00000000       constant
0xffff7ab19ef8   440  20d04499       constant
0xffff7ab19efc   444  00000000       constant
0xffff7ab19f00   448  20d04451       constant
0xffff7ab19f04   452  00000000       constant
0xffff7ab19f08   456  20d04921       constant
0xffff7ab19f0c   460  00000000       constant
0xffff7ab19f10   464  20d05699       constant
0xffff7ab19f14   468  00000000       constant
0xffff7ab19f18   472  20d05031       constant
0xffff7ab19f1c   476  00000000       constant
0xffff7ab19f20   480  20d048a1       constant
0xffff7ab19f24   484  00000000       constant
0xffff7ab19f28   488  20d05619       constant
0xffff7ab19f2c   492  00000000       constant
0xffff7ab19f30   496  20d04fb1       constant
0xffff7ab19f34   500  00000000       constant
0xffff7ab19f38   504  20d048e1       constant
0xffff7ab19f3c   508  00000000       constant
0xffff7ab19f40   512  20d05659       constant
0xffff7ab19f44   516  00000000       constant
0xffff7ab19f48   520  20d04ff1       constant
0xffff7ab19f4c   524  00000000       constant
0xffff7ab19f50   528  20d04d19       constant
0xffff7ab19f54   532  00000000       constant
0xffff7ab19f58   536  20d04da9       constant
0xffff7ab19f5c   540  00000000       constant
0xffff7ab19f60   544  20d05559       constant
0xffff7ab19f64   548  00000000       constant
0xffff7ab19f68   552  20d05519       constant
0xffff7ab19f6c   556  00000000       constant
0xffff7ab19f70   560  20d05251       constant
0xffff7ab19f74   564  00000000       constant
0xffff7ab19f78   568  20d05251       constant
0xffff7ab19f7c   572  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 36)
0xffff7ab19d48  embedded object  (0x4ec04411 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19d88  embedded object  (0x4ec04519 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19d94  embedded object  (0x4ec04571 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19da0  embedded object  (0x4ec045c9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19dac  embedded object  (0x4ec04621 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19db8  embedded object  (0x4ec04679 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19dc4  embedded object  (0x4ec046d1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19dd0  embedded object  (0x4ec04729 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19ddc  embedded object  (0x4ec04781 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19de8  embedded object  (0x4ec047d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19df4  embedded object  (0x4ec04831 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab19e04  embedded object  (0x20d04499 <String[6]: object>)
0xffff7ab19e0c  embedded object  (0x20d04451 <String[9]: undefined>)
0xffff7ab19e14  embedded object  (0x20d04921 <String[8]: bool8x16>)
0xffff7ab19e1c  embedded object  (0x20d05699 <String[8]: uint8x16>)
0xffff7ab19e24  embedded object  (0x20d05031 <String[7]: int8x16>)
0xffff7ab19e2c  embedded object  (0x20d048a1 <String[8]: bool16x8>)
0xffff7ab19e34  embedded object  (0x20d05619 <String[8]: uint16x8>)
0xffff7ab19e3c  embedded object  (0x20d04fb1 <String[7]: int16x8>)
0xffff7ab19e44  embedded object  (0x20d048e1 <String[8]: bool32x4>)
0xffff7ab19e4c  embedded object  (0x20d05659 <String[8]: uint32x4>)
0xffff7ab19e54  embedded object  (0x20d04ff1 <String[7]: int32x4>)
0xffff7ab19e5c  embedded object  (0x20d04d19 <String[9]: float32x4>)
0xffff7ab19e64  embedded object  (0x20d04da9 <String[8]: function>)
0xffff7ab19e6c  embedded object  (0x20d05559 <String[6]: symbol>)
0xffff7ab19e7c  embedded object  (0x20d05519 <String[6]: string>)
0xffff7ab19e84  embedded object  (0x20d05251 <String[6]: number>)
0xffff7ab19e8c  embedded object  (0x20d05251 <String[6]: number>)
0xffff7ab19e94  constant pool (size 236)


kind = STUB
major_key = JSEntryStub
name = JSEntryStub
compiler = unknown
Instructions (size = 400)
0xffff7ab1a000     0  movn xzr, #0x1
0xffff7ab1a004     4  stp d14, d15, [csp, #-16]!
0xffff7ab1a008     8  stp d12, d13, [csp, #-16]!
0xffff7ab1a00c    12  stp d10, d11, [csp, #-16]!
0xffff7ab1a010    16  stp d8, d9, [csp, #-16]!
0xffff7ab1a014    20  stp fp, lr, [csp, #-16]!
0xffff7ab1a018    24  stp cp, jssp, [csp, #-16]!
0xffff7ab1a01c    28  stp x25, x26, [csp, #-16]!
0xffff7ab1a020    32  stp x23, x24, [csp, #-16]!
0xffff7ab1a024    36  stp x21, x22, [csp, #-16]!
0xffff7ab1a028    40  stp x19, x20, [csp, #-16]!
0xffff7ab1a02c    44  mov jssp, csp
0xffff7ab1a030    48  mrs x16, fpcr
0xffff7ab1a034    52  tbnz w16, #25, #+0xc (addr 0xffff7ab1a040)
0xffff7ab1a038    56  orr x16, x16, #0x2000000
0xffff7ab1a03c    60  msr fpcr, x16
0xffff7ab1a040    64  fmov d15, xzr
0xffff7ab1a044    68  movn x13, #0x0
0xffff7ab1a048    72  movz x12, #0x100000000
0xffff7ab1a04c    76  ldr x11, pc+244 (addr 0x0000ffff7ab1a140)    ;; external reference (Isolate::c_entry_fp_address)
0xffff7ab1a050    80  ldr x10, [x11]
0xffff7ab1a054    84  sub csp, jssp, #0x20 (32)
0xffff7ab1a058    88  stp x10, xzr, [jssp, #-32]!
0xffff7ab1a05c    92  stp x12, x13, [jssp, #16]
0xffff7ab1a060    96  add fp, jssp, #0x18 (24)
0xffff7ab1a064   100  ldr x10, pc+228 (addr 0x0000ffff7ab1a148)    ;; external reference (Isolate::js_entry_sp_address)
0xffff7ab1a068   104  ldr x11, [x10]
0xffff7ab1a06c   108  cbnz x11, #+0x18 (addr 0xffff7ab1a084)
0xffff7ab1a070   112  str fp, [x10]
0xffff7ab1a074   116  movz x12, #0x100000000
0xffff7ab1a078   120  sub csp, jssp, #0x8 (8)
0xffff7ab1a07c   124  str x12, [jssp, #-8]!
0xffff7ab1a080   128  b #+0xc (addr 0xffff7ab1a08c)
0xffff7ab1a084   132  sub csp, jssp, #0x8 (8)
0xffff7ab1a088   136  str xzr, [jssp, #-8]!
0xffff7ab1a08c   140  b #+0x14 (addr 0xffff7ab1a0a0)
0xffff7ab1a090   144  ldr x10, pc+192 (addr 0x0000ffff7ab1a150)    ;; external reference (Isolate::pending_exception_address)
0xffff7ab1a094   148  str x0, [x10]
0xffff7ab1a098   152  ldr x0, [x26, #344]
0xffff7ab1a09c   156  b #+0x40 (addr 0xffff7ab1a0dc)
0xffff7ab1a0a0   160  ldr x11, pc+184 (addr 0x0000ffff7ab1a158)    ;; external reference (Isolate::handler_address)
0xffff7ab1a0a4   164  ldr x10, [x11]
0xffff7ab1a0a8   168  sub csp, jssp, #0x8 (8)
0xffff7ab1a0ac   172  str x10, [jssp, #-8]!
0xffff7ab1a0b0   176  str jssp, [x11]
0xffff7ab1a0b4   180  ldr x10, pc+172 (addr 0x0000ffff7ab1a160)    ;; object: 0x20d04519 <the hole>
0xffff7ab1a0b8   184  ldr x11, pc+176 (addr 0x0000ffff7ab1a168)    ;; external reference (Isolate::pending_exception_address)
0xffff7ab1a0bc   188  str x10, [x11]
0xffff7ab1a0c0   192  ldr x10, pc+176 (addr 0x0000ffff7ab1a170)    ;; external reference (Builtins::JSEntryTrampoline)
0xffff7ab1a0c4   196  ldr x11, [x10]
0xffff7ab1a0c8   200  add x12, x11, #0x5f (95)
0xffff7ab1a0cc   204  blr x12
0xffff7ab1a0d0   208  ldr x10, [jssp], #8
0xffff7ab1a0d4   212  ldr x11, pc+164 (addr 0x0000ffff7ab1a178)    ;; external reference (Isolate::handler_address)
0xffff7ab1a0d8   216  str x10, [x11]
0xffff7ab1a0dc   220  ldr x10, [jssp], #8
0xffff7ab1a0e0   224  movz x16, #0x100000000
0xffff7ab1a0e4   228  cmp x10, x16
0xffff7ab1a0e8   232  b.ne #+0xc (addr 0xffff7ab1a0f4)
0xffff7ab1a0ec   236  ldr x11, pc+148 (addr 0x0000ffff7ab1a180)    ;; external reference (Isolate::js_entry_sp_address)
0xffff7ab1a0f0   240  str xzr, [x11]
0xffff7ab1a0f4   244  ldr x10, [jssp], #8
0xffff7ab1a0f8   248  ldr x11, pc+144 (addr 0x0000ffff7ab1a188)    ;; external reference (Isolate::c_entry_fp_address)
0xffff7ab1a0fc   252  str x10, [x11]
0xffff7ab1a100   256  add jssp, jssp, #0x18 (24)
0xffff7ab1a104   260  mov csp, jssp
0xffff7ab1a108   264  ldp x19, x20, [csp], #16
0xffff7ab1a10c   268  ldp x21, x22, [csp], #16
0xffff7ab1a110   272  ldp x23, x24, [csp], #16
0xffff7ab1a114   276  ldp x25, x26, [csp], #16
0xffff7ab1a118   280  ldp cp, jssp, [csp], #16
0xffff7ab1a11c   284  ldp fp, lr, [csp], #16
0xffff7ab1a120   288  ldp d8, d9, [csp], #16
0xffff7ab1a124   292  ldp d10, d11, [csp], #16
0xffff7ab1a128   296  ldp d12, d13, [csp], #16
0xffff7ab1a12c   300  ldp d14, d15, [csp], #16
0xffff7ab1a130   304  ret
0xffff7ab1a134   308  580002df       constant pool begin (num_const = 22)    ;; constant pool
0xffff7ab1a138   312  d63f03e0       constant
0xffff7ab1a13c   316  d503201f       constant
0xffff7ab1a140   320  09abedf8       constant
0xffff7ab1a144   324  00000000       constant
0xffff7ab1a148   328  09abee18       constant
0xffff7ab1a14c   332  00000000       constant
0xffff7ab1a150   336  09abeda0       constant
0xffff7ab1a154   340  00000000       constant
0xffff7ab1a158   344  09abee00       constant
0xffff7ab1a15c   348  00000000       constant
0xffff7ab1a160   352  20d04519       constant
0xffff7ab1a164   356  00000000       constant
0xffff7ab1a168   360  09abeda0       constant
0xffff7ab1a16c   364  00000000       constant
0xffff7ab1a170   368  09abfb08       constant
0xffff7ab1a174   372  00000000       constant
0xffff7ab1a178   376  09abee00       constant
0xffff7ab1a17c   380  00000000       constant
0xffff7ab1a180   384  09abee18       constant
0xffff7ab1a184   388  00000000       constant
0xffff7ab1a188   392  09abedf8       constant
0xffff7ab1a18c   396  00000000       constant


Handler Table (size = 24)

RelocInfo (size = 27)
0xffff7ab1a04c  external reference (Isolate::c_entry_fp_address)  (0x9abedf8)
0xffff7ab1a064  external reference (Isolate::js_entry_sp_address)  (0x9abee18)
0xffff7ab1a090  external reference (Isolate::pending_exception_address)  (0x9abeda0)
0xffff7ab1a0a0  external reference (Isolate::handler_address)  (0x9abee00)
0xffff7ab1a0b4  embedded object  (0x20d04519 <the hole>)
0xffff7ab1a0b8  external reference (Isolate::pending_exception_address)  (0x9abeda0)
0xffff7ab1a0c0  external reference (Builtins::JSEntryTrampoline)  (0x9abfb08)
0xffff7ab1a0d4  external reference (Isolate::handler_address)  (0x9abee00)
0xffff7ab1a0ec  external reference (Isolate::js_entry_sp_address)  (0x9abee18)
0xffff7ab1a0f8  external reference (Isolate::c_entry_fp_address)  (0x9abedf8)
0xffff7ab1a134  constant pool (size 92)


kind = STUB
major_key = JSEntryStub
name = JSConstructEntryStub
compiler = unknown
Instructions (size = 400)
0xffff7ab1a200     0  movn xzr, #0x1
0xffff7ab1a204     4  stp d14, d15, [csp, #-16]!
0xffff7ab1a208     8  stp d12, d13, [csp, #-16]!
0xffff7ab1a20c    12  stp d10, d11, [csp, #-16]!
0xffff7ab1a210    16  stp d8, d9, [csp, #-16]!
0xffff7ab1a214    20  stp fp, lr, [csp, #-16]!
0xffff7ab1a218    24  stp cp, jssp, [csp, #-16]!
0xffff7ab1a21c    28  stp x25, x26, [csp, #-16]!
0xffff7ab1a220    32  stp x23, x24, [csp, #-16]!
0xffff7ab1a224    36  stp x21, x22, [csp, #-16]!
0xffff7ab1a228    40  stp x19, x20, [csp, #-16]!
0xffff7ab1a22c    44  mov jssp, csp
0xffff7ab1a230    48  mrs x16, fpcr
0xffff7ab1a234    52  tbnz w16, #25, #+0xc (addr 0xffff7ab1a240)
0xffff7ab1a238    56  orr x16, x16, #0x2000000
0xffff7ab1a23c    60  msr fpcr, x16
0xffff7ab1a240    64  fmov d15, xzr
0xffff7ab1a244    68  movn x13, #0x0
0xffff7ab1a248    72  movz x12, #0x200000000
0xffff7ab1a24c    76  ldr x11, pc+244 (addr 0x0000ffff7ab1a340)    ;; external reference (Isolate::c_entry_fp_address)
0xffff7ab1a250    80  ldr x10, [x11]
0xffff7ab1a254    84  sub csp, jssp, #0x20 (32)
0xffff7ab1a258    88  stp x10, xzr, [jssp, #-32]!
0xffff7ab1a25c    92  stp x12, x13, [jssp, #16]
0xffff7ab1a260    96  add fp, jssp, #0x18 (24)
0xffff7ab1a264   100  ldr x10, pc+228 (addr 0x0000ffff7ab1a348)    ;; external reference (Isolate::js_entry_sp_address)
0xffff7ab1a268   104  ldr x11, [x10]
0xffff7ab1a26c   108  cbnz x11, #+0x18 (addr 0xffff7ab1a284)
0xffff7ab1a270   112  str fp, [x10]
0xffff7ab1a274   116  movz x12, #0x100000000
0xffff7ab1a278   120  sub csp, jssp, #0x8 (8)
0xffff7ab1a27c   124  str x12, [jssp, #-8]!
0xffff7ab1a280   128  b #+0xc (addr 0xffff7ab1a28c)
0xffff7ab1a284   132  sub csp, jssp, #0x8 (8)
0xffff7ab1a288   136  str xzr, [jssp, #-8]!
0xffff7ab1a28c   140  b #+0x14 (addr 0xffff7ab1a2a0)
0xffff7ab1a290   144  ldr x10, pc+192 (addr 0x0000ffff7ab1a350)    ;; external reference (Isolate::pending_exception_address)
0xffff7ab1a294   148  str x0, [x10]
0xffff7ab1a298   152  ldr x0, [x26, #344]
0xffff7ab1a29c   156  b #+0x40 (addr 0xffff7ab1a2dc)
0xffff7ab1a2a0   160  ldr x11, pc+184 (addr 0x0000ffff7ab1a358)    ;; external reference (Isolate::handler_address)
0xffff7ab1a2a4   164  ldr x10, [x11]
0xffff7ab1a2a8   168  sub csp, jssp, #0x8 (8)
0xffff7ab1a2ac   172  str x10, [jssp, #-8]!
0xffff7ab1a2b0   176  str jssp, [x11]
0xffff7ab1a2b4   180  ldr x10, pc+172 (addr 0x0000ffff7ab1a360)    ;; object: 0x20d04519 <the hole>
0xffff7ab1a2b8   184  ldr x11, pc+176 (addr 0x0000ffff7ab1a368)    ;; external reference (Isolate::pending_exception_address)
0xffff7ab1a2bc   188  str x10, [x11]
0xffff7ab1a2c0   192  ldr x10, pc+176 (addr 0x0000ffff7ab1a370)    ;; external reference (Builtins::JSConstructEntryTrampoline)
0xffff7ab1a2c4   196  ldr x11, [x10]
0xffff7ab1a2c8   200  add x12, x11, #0x5f (95)
0xffff7ab1a2cc   204  blr x12
0xffff7ab1a2d0   208  ldr x10, [jssp], #8
0xffff7ab1a2d4   212  ldr x11, pc+164 (addr 0x0000ffff7ab1a378)    ;; external reference (Isolate::handler_address)
0xffff7ab1a2d8   216  str x10, [x11]
0xffff7ab1a2dc   220  ldr x10, [jssp], #8
0xffff7ab1a2e0   224  movz x16, #0x100000000
0xffff7ab1a2e4   228  cmp x10, x16
0xffff7ab1a2e8   232  b.ne #+0xc (addr 0xffff7ab1a2f4)
0xffff7ab1a2ec   236  ldr x11, pc+148 (addr 0x0000ffff7ab1a380)    ;; external reference (Isolate::js_entry_sp_address)
0xffff7ab1a2f0   240  str xzr, [x11]
0xffff7ab1a2f4   244  ldr x10, [jssp], #8
0xffff7ab1a2f8   248  ldr x11, pc+144 (addr 0x0000ffff7ab1a388)    ;; external reference (Isolate::c_entry_fp_address)
0xffff7ab1a2fc   252  str x10, [x11]
0xffff7ab1a300   256  add jssp, jssp, #0x18 (24)
0xffff7ab1a304   260  mov csp, jssp
0xffff7ab1a308   264  ldp x19, x20, [csp], #16
0xffff7ab1a30c   268  ldp x21, x22, [csp], #16
0xffff7ab1a310   272  ldp x23, x24, [csp], #16
0xffff7ab1a314   276  ldp x25, x26, [csp], #16
0xffff7ab1a318   280  ldp cp, jssp, [csp], #16
0xffff7ab1a31c   284  ldp fp, lr, [csp], #16
0xffff7ab1a320   288  ldp d8, d9, [csp], #16
0xffff7ab1a324   292  ldp d10, d11, [csp], #16
0xffff7ab1a328   296  ldp d12, d13, [csp], #16
0xffff7ab1a32c   300  ldp d14, d15, [csp], #16
0xffff7ab1a330   304  ret
0xffff7ab1a334   308  580002df       constant pool begin (num_const = 22)    ;; constant pool
0xffff7ab1a338   312  d63f03e0       constant
0xffff7ab1a33c   316  d503201f       constant
0xffff7ab1a340   320  09abedf8       constant
0xffff7ab1a344   324  00000000       constant
0xffff7ab1a348   328  09abee18       constant
0xffff7ab1a34c   332  00000000       constant
0xffff7ab1a350   336  09abeda0       constant
0xffff7ab1a354   340  00000000       constant
0xffff7ab1a358   344  09abee00       constant
0xffff7ab1a35c   348  00000000       constant
0xffff7ab1a360   352  20d04519       constant
0xffff7ab1a364   356  00000000       constant
0xffff7ab1a368   360  09abeda0       constant
0xffff7ab1a36c   364  00000000       constant
0xffff7ab1a370   368  09abfb10       constant
0xffff7ab1a374   372  00000000       constant
0xffff7ab1a378   376  09abee00       constant
0xffff7ab1a37c   380  00000000       constant
0xffff7ab1a380   384  09abee18       constant
0xffff7ab1a384   388  00000000       constant
0xffff7ab1a388   392  09abedf8       constant
0xffff7ab1a38c   396  00000000       constant


Handler Table (size = 24)

RelocInfo (size = 27)
0xffff7ab1a24c  external reference (Isolate::c_entry_fp_address)  (0x9abedf8)
0xffff7ab1a264  external reference (Isolate::js_entry_sp_address)  (0x9abee18)
0xffff7ab1a290  external reference (Isolate::pending_exception_address)  (0x9abeda0)
0xffff7ab1a2a0  external reference (Isolate::handler_address)  (0x9abee00)
0xffff7ab1a2b4  embedded object  (0x20d04519 <the hole>)
0xffff7ab1a2b8  external reference (Isolate::pending_exception_address)  (0x9abeda0)
0xffff7ab1a2c0  external reference (Builtins::JSConstructEntryTrampoline)  (0x9abfb10)
0xffff7ab1a2d4  external reference (Isolate::handler_address)  (0x9abee00)
0xffff7ab1a2ec  external reference (Isolate::js_entry_sp_address)  (0x9abee18)
0xffff7ab1a2f8  external reference (Isolate::c_entry_fp_address)  (0x9abedf8)
0xffff7ab1a334  constant pool (size 92)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ToObjectStub
compiler = crankshaft
Instructions (size = 333)
0xffff7ab1e440     0  tbz w0, #0, #+0x20 (addr 0xffff7ab1e460)
0xffff7ab1e444     4  ldur x1, [x0, #-1]
0xffff7ab1e448     8  ldrb w2, [x1, #11]
0xffff7ab1e44c    12  cmp w2, #0xb1 (177)
0xffff7ab1e450    16  b.ge #+0x5c (addr 0xffff7ab1e4ac)
0xffff7ab1e454    20  ldrb w1, [x1, #8]
0xffff7ab1e458    24  cbnz w1, #+0xc (addr 0xffff7ab1e464)
0xffff7ab1e45c    28  b #+0xdc (addr 0xffff7ab1e538)
0xffff7ab1e460    32  movz x1, #0x3f
0xffff7ab1e464    36  ldur x2, [cp, #39]
0xffff7ab1e468    40  add x3, x2, #0xf (15)
0xffff7ab1e46c    44  ldr x4, [x3, w1, sxtw #3]
0xffff7ab1e470    48  ldur x1, [x4, #23]
0xffff7ab1e474    52  movz x3, #0xe2c0
0xffff7ab1e478    56  movk x3, #0x9ab, lsl #16
0xffff7ab1e47c    60  ldp x4, x2, [x3]
0xffff7ab1e480    64  adds x16, x4, #0x20 (32)
0xffff7ab1e484    68  ccmp x16, x2, #nzCv, lo
0xffff7ab1e488    72  b.hi #+0x28 (addr 0xffff7ab1e4b0)
0xffff7ab1e48c    76  str x16, [x3]
0xffff7ab1e490    80  orr x4, x4, #0x1
0xffff7ab1e494    84  stur x1, [x4, #-1]
0xffff7ab1e498    88  ldr x1, [x26, #304]
0xffff7ab1e49c    92  stur x1, [x4, #7]
0xffff7ab1e4a0    96  stur x1, [x4, #15]
0xffff7ab1e4a4   100  stur x0, [x4, #23]
0xffff7ab1e4a8   104  mov x0, x4
0xffff7ab1e4ac   108  ret
0xffff7ab1e4b0   112  sub csp, jssp, #0x10 (16)
0xffff7ab1e4b4   116  stp fp, lr, [jssp, #-16]!
0xffff7ab1e4b8   120  movz fp, #0xa00000000
0xffff7ab1e4bc   124  sub csp, jssp, #0x8 (8)
0xffff7ab1e4c0   128  str fp, [jssp, #-8]!
0xffff7ab1e4c4   132  add fp, jssp, #0x8 (8)
0xffff7ab1e4c8   136  movz x4, #0x0
0xffff7ab1e4cc   140  mov x16, lr
0xffff7ab1e4d0   144  ldr x17, pc+80 (addr 0x0000ffff7ab1e520)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab1e4d4   148  blr x17
0xffff7ab1e4d8   152  movz x0, #0x2000000000
0xffff7ab1e4dc   156  movz x10, #0x0
0xffff7ab1e4e0   160  sub csp, jssp, #0x10 (16)
0xffff7ab1e4e4   164  stp x10, x0, [jssp, #-16]!
0xffff7ab1e4e8   168  movz x0, #0x2
0xffff7ab1e4ec   172  movz x1, #0x5b88
0xffff7ab1e4f0   176  movk x1, #0xe2, lsl #16
0xffff7ab1e4f4   180  ldr x16, pc+52 (addr 0x0000ffff7ab1e528)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab1e4f8   184  blr x16
0xffff7ab1e4fc   188  str x0, [jssp, #32]
0xffff7ab1e500   192  ldr x16, pc+48 (addr 0x0000ffff7ab1e530)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab1e504   196  blr x16
0xffff7ab1e508   200  ldr lr, [jssp, #16]
0xffff7ab1e50c   204  ldp xzr, fp, [jssp], #24
0xffff7ab1e510   208  b #-0x7c (addr 0xffff7ab1e494)
0xffff7ab1e514   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab1e518   216  d63f03e0       constant
0xffff7ab1e51c   220  d503201f       constant
0xffff7ab1e520   224  7ab06820       constant
0xffff7ab1e524   228  0000ffff       constant
0xffff7ab1e528   232  7ab06260       constant
0xffff7ab1e52c   236  0000ffff       constant
0xffff7ab1e530   240  7ab068e0       constant
0xffff7ab1e534   244  0000ffff       constant
0xffff7ab1e538   248  movz x16, #0x0
0xffff7ab1e53c   252  sub csp, jssp, #0x10 (16)
0xffff7ab1e540   256  stp fp, lr, [jssp, #-16]!
0xffff7ab1e544   260  bl #+0x4 (addr 0xffff7ab1e548)
0xffff7ab1e548   264  movz x17, #0xa00000000
0xffff7ab1e54c   268  sub csp, jssp, #0x10 (16)
0xffff7ab1e550   272  stp x17, cp, [jssp, #-16]!
0xffff7ab1e554   276  add fp, jssp, #0x10 (16)
0xffff7ab1e558   280  ldr x17, pc+24 (addr 0x0000ffff7ab1e570)    ;; lazy deoptimization bailout 0
0xffff7ab1e55c   284  add x17, x17, x16
0xffff7ab1e560   288  br x17
0xffff7ab1e564   292  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab1e568   296  d63f03e0       constant
0xffff7ab1e56c   300  d503201f       constant
0xffff7ab1e570   304  7a906000       constant
0xffff7ab1e574   308  0000ffff       constant


Safepoints (size = 21)
0xffff7ab1e4fc   188  000 | x0 | x1 | x4 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 21)
0xffff7ab1e4d0  code target (STUB)  (0xffff7ab06820)
0xffff7ab1e4f4  code target (STUB)  (0xffff7ab06260)
0xffff7ab1e500  code target (STUB)  (0xffff7ab068e0)
0xffff7ab1e514  constant pool (size 36)
0xffff7ab1e558  runtime entry
0xffff7ab1e564  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ToObjectStub
name = ToObjectStub
compiler = crankshaft
Instructions (size = 333)
0xffff7ab1e440     0  tbz w0, #0, #+0x20 (addr 0xffff7ab1e460)
0xffff7ab1e444     4  ldur x1, [x0, #-1]
0xffff7ab1e448     8  ldrb w2, [x1, #11]
0xffff7ab1e44c    12  cmp w2, #0xb1 (177)
0xffff7ab1e450    16  b.ge #+0x5c (addr 0xffff7ab1e4ac)
0xffff7ab1e454    20  ldrb w1, [x1, #8]
0xffff7ab1e458    24  cbnz w1, #+0xc (addr 0xffff7ab1e464)
0xffff7ab1e45c    28  b #+0xdc (addr 0xffff7ab1e538)
0xffff7ab1e460    32  movz x1, #0x3f
0xffff7ab1e464    36  ldur x2, [cp, #39]
0xffff7ab1e468    40  add x3, x2, #0xf (15)
0xffff7ab1e46c    44  ldr x4, [x3, w1, sxtw #3]
0xffff7ab1e470    48  ldur x1, [x4, #23]
0xffff7ab1e474    52  movz x3, #0xe2c0
0xffff7ab1e478    56  movk x3, #0x9ab, lsl #16
0xffff7ab1e47c    60  ldp x4, x2, [x3]
0xffff7ab1e480    64  adds x16, x4, #0x20 (32)
0xffff7ab1e484    68  ccmp x16, x2, #nzCv, lo
0xffff7ab1e488    72  b.hi #+0x28 (addr 0xffff7ab1e4b0)
0xffff7ab1e48c    76  str x16, [x3]
0xffff7ab1e490    80  orr x4, x4, #0x1
0xffff7ab1e494    84  stur x1, [x4, #-1]
0xffff7ab1e498    88  ldr x1, [x26, #304]
0xffff7ab1e49c    92  stur x1, [x4, #7]
0xffff7ab1e4a0    96  stur x1, [x4, #15]
0xffff7ab1e4a4   100  stur x0, [x4, #23]
0xffff7ab1e4a8   104  mov x0, x4
0xffff7ab1e4ac   108  ret
0xffff7ab1e4b0   112  sub csp, jssp, #0x10 (16)
0xffff7ab1e4b4   116  stp fp, lr, [jssp, #-16]!
0xffff7ab1e4b8   120  movz fp, #0xa00000000
0xffff7ab1e4bc   124  sub csp, jssp, #0x8 (8)
0xffff7ab1e4c0   128  str fp, [jssp, #-8]!
0xffff7ab1e4c4   132  add fp, jssp, #0x8 (8)
0xffff7ab1e4c8   136  movz x4, #0x0
0xffff7ab1e4cc   140  mov x16, lr
0xffff7ab1e4d0   144  ldr x17, pc+80 (addr 0x0000ffff7ab1e520)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab1e4d4   148  blr x17
0xffff7ab1e4d8   152  movz x0, #0x2000000000
0xffff7ab1e4dc   156  movz x10, #0x0
0xffff7ab1e4e0   160  sub csp, jssp, #0x10 (16)
0xffff7ab1e4e4   164  stp x10, x0, [jssp, #-16]!
0xffff7ab1e4e8   168  movz x0, #0x2
0xffff7ab1e4ec   172  movz x1, #0x5b88
0xffff7ab1e4f0   176  movk x1, #0xe2, lsl #16
0xffff7ab1e4f4   180  ldr x16, pc+52 (addr 0x0000ffff7ab1e528)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab1e4f8   184  blr x16
0xffff7ab1e4fc   188  str x0, [jssp, #32]
0xffff7ab1e500   192  ldr x16, pc+48 (addr 0x0000ffff7ab1e530)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab1e504   196  blr x16
0xffff7ab1e508   200  ldr lr, [jssp, #16]
0xffff7ab1e50c   204  ldp xzr, fp, [jssp], #24
0xffff7ab1e510   208  b #-0x7c (addr 0xffff7ab1e494)
0xffff7ab1e514   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab1e518   216  d63f03e0       constant
0xffff7ab1e51c   220  d503201f       constant
0xffff7ab1e520   224  7ab06820       constant
0xffff7ab1e524   228  0000ffff       constant
0xffff7ab1e528   232  7ab06260       constant
0xffff7ab1e52c   236  0000ffff       constant
0xffff7ab1e530   240  7ab068e0       constant
0xffff7ab1e534   244  0000ffff       constant
0xffff7ab1e538   248  movz x16, #0x0
0xffff7ab1e53c   252  sub csp, jssp, #0x10 (16)
0xffff7ab1e540   256  stp fp, lr, [jssp, #-16]!
0xffff7ab1e544   260  bl #+0x4 (addr 0xffff7ab1e548)
0xffff7ab1e548   264  movz x17, #0xa00000000
0xffff7ab1e54c   268  sub csp, jssp, #0x10 (16)
0xffff7ab1e550   272  stp x17, cp, [jssp, #-16]!
0xffff7ab1e554   276  add fp, jssp, #0x10 (16)
0xffff7ab1e558   280  ldr x17, pc+24 (addr 0x0000ffff7ab1e570)    ;; lazy deoptimization bailout 0
0xffff7ab1e55c   284  add x17, x17, x16
0xffff7ab1e560   288  br x17
0xffff7ab1e564   292  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab1e568   296  d63f03e0       constant
0xffff7ab1e56c   300  d503201f       constant
0xffff7ab1e570   304  7a906000       constant
0xffff7ab1e574   308  0000ffff       constant


Safepoints (size = 21)
0xffff7ab1e4fc   188  000 | x0 | x1 | x4 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 21)
0xffff7ab1e4d0  code target (STUB)  (0xffff7ab06820)
0xffff7ab1e4f4  code target (STUB)  (0xffff7ab06260)
0xffff7ab1e500  code target (STUB)  (0xffff7ab068e0)
0xffff7ab1e514  constant pool (size 36)
0xffff7ab1e558  runtime entry
0xffff7ab1e564  constant pool (size 20)


kind = STUB
major_key = FastNewObjectStub
name = FastNewObjectStub
compiler = unknown
Instructions (size = 544)
0xffff7ab20680     0  ldur x2, [x3, #-1]
0xffff7ab20684     4  ldrb w2, [x2, #11]
0xffff7ab20688     8  cmp x2, #0xc9 (201)
0xffff7ab2068c    12  b.ne #+0x1a8 (addr 0xffff7ab20834)
0xffff7ab20690    16  ldur x2, [x3, #23]
0xffff7ab20694    20  tbz w2, #0, #+0x1a0 (addr 0xffff7ab20834)
0xffff7ab20698    24  ldur x0, [x2, #-1]
0xffff7ab2069c    28  ldrb w0, [x0, #11]
0xffff7ab206a0    32  cmp x0, #0x84 (132)
0xffff7ab206a4    36  b.ne #+0x190 (addr 0xffff7ab20834)
0xffff7ab206a8    40  ldur x0, [x2, #31]
0xffff7ab206ac    44  cmp x0, x1
0xffff7ab206b0    48  b.ne #+0x184 (addr 0xffff7ab20834)
0xffff7ab206b4    52  ldrb w4, [x2, #7]
0xffff7ab206b8    56  ldr x6, pc+416 (addr 0x0000ffff7ab20858)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0xffff7ab206bc    60  ldp x0, x16, [x6]
0xffff7ab206c0    64  adds x5, x0, x4, lsl #3
0xffff7ab206c4    68  ccmp x5, x16, #nzCv, lo
0xffff7ab206c8    72  b.hi #+0x110 (addr 0xffff7ab207d8)
0xffff7ab206cc    76  str x5, [x6]
0xffff7ab206d0    80  mov x1, x0
0xffff7ab206d4    84  str x2, [x1], #8
0xffff7ab206d8    88  ldr x3, [x26, #304]
0xffff7ab206dc    92  stp x3, x3, [x1], #16
0xffff7ab206e0    96  ldr x6, [x26, #40]
0xffff7ab206e4   100  ldur w3, [x2, #15]
0xffff7ab206e8   104  tst w3, #0xe0000000
0xffff7ab206ec   108  b.ne #+0x30 (addr 0xffff7ab2071c)
0xffff7ab206f0   112  subs x16, x5, x1
0xffff7ab206f4   116  b.le #+0x20 (addr 0xffff7ab20714)
0xffff7ab206f8   120  str x6, [x1]
0xffff7ab206fc   124  and x16, x16, #0x8
0xffff7ab20700   128  add x1, x1, x16
0xffff7ab20704   132  b #+0x8 (addr 0xffff7ab2070c)
0xffff7ab20708   136  stp x6, x6, [x1], #16
0xffff7ab2070c   140  cmp x1, x5
0xffff7ab20710   144  b.lo #-0x8 (addr 0xffff7ab20708)
0xffff7ab20714   148  add x0, x0, #0x1 (1)
0xffff7ab20718   152  ret
0xffff7ab2071c   156  movz w16, #0x20000000
0xffff7ab20720   160  sub w3, w3, w16
0xffff7ab20724   164  stur w3, [x2, #15]
0xffff7ab20728   168  ldrb w4, [x2, #14]
0xffff7ab2072c   172  sub x4, x5, x4, lsl #3
0xffff7ab20730   176  subs x16, x4, x1
0xffff7ab20734   180  b.le #+0x20 (addr 0xffff7ab20754)
0xffff7ab20738   184  str x6, [x1]
0xffff7ab2073c   188  and x16, x16, #0x8
0xffff7ab20740   192  add x1, x1, x16
0xffff7ab20744   196  b #+0x8 (addr 0xffff7ab2074c)
0xffff7ab20748   200  stp x6, x6, [x1], #16
0xffff7ab2074c   204  cmp x1, x4
0xffff7ab20750   208  b.lo #-0x8 (addr 0xffff7ab20748)
0xffff7ab20754   212  ldr x6, [x26, #16]
0xffff7ab20758   216  subs x16, x5, x1
0xffff7ab2075c   220  b.le #+0x20 (addr 0xffff7ab2077c)
0xffff7ab20760   224  str x6, [x1]
0xffff7ab20764   228  and x16, x16, #0x8
0xffff7ab20768   232  add x1, x1, x16
0xffff7ab2076c   236  b #+0x8 (addr 0xffff7ab20774)
0xffff7ab20770   240  stp x6, x6, [x1], #16
0xffff7ab20774   244  cmp x1, x5
0xffff7ab20778   248  b.lo #-0x8 (addr 0xffff7ab20770)
0xffff7ab2077c   252  add x0, x0, #0x1 (1)
0xffff7ab20780   256  tst w3, #0xe0000000
0xffff7ab20784   260  b.eq #+0x8 (addr 0xffff7ab2078c)
0xffff7ab20788   264  ret
0xffff7ab2078c   268  movz x16, #0xc00000000
0xffff7ab20790   272  sub csp, jssp, #0x10 (16)
0xffff7ab20794   276  stp fp, lr, [jssp, #-16]!
0xffff7ab20798   280  sub csp, jssp, #0x10 (16)
0xffff7ab2079c   284  str x16, [jssp, #-8]!
0xffff7ab207a0   288  ldr x17, pc+192 (addr 0x0000ffff7ab20860)    ;; object: 0xffff7ab20621 <Code: STUB>
0xffff7ab207a4   292  sub csp, jssp, #0x10 (16)
0xffff7ab207a8   296  str x17, [jssp, #-8]!
0xffff7ab207ac   300  add fp, jssp, #0x10 (16)
0xffff7ab207b0   304  sub csp, jssp, #0x10 (16)
0xffff7ab207b4   308  stp x2, x0, [jssp, #-16]!
0xffff7ab207b8   312  movz x0, #0x1
0xffff7ab207bc   316  ldr x1, pc+172 (addr 0x0000ffff7ab20868)    ;; external reference (Runtime::FinalizeInstanceSize)
0xffff7ab207c0   320  ldr x16, pc+176 (addr 0x0000ffff7ab20870)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab207c4   324  blr x16
0xffff7ab207c8   328  ldr x0, [jssp], #8
0xffff7ab207cc   332  mov jssp, fp
0xffff7ab207d0   336  ldp fp, lr, [jssp], #16
0xffff7ab207d4   340  ret
0xffff7ab207d8   344  movz x16, #0xc00000000
0xffff7ab207dc   348  sub csp, jssp, #0x10 (16)
0xffff7ab207e0   352  stp fp, lr, [jssp, #-16]!
0xffff7ab207e4   356  sub csp, jssp, #0x10 (16)
0xffff7ab207e8   360  str x16, [jssp, #-8]!
0xffff7ab207ec   364  ldr x17, pc+140 (addr 0x0000ffff7ab20878)    ;; object: 0xffff7ab20621 <Code: STUB>
0xffff7ab207f0   368  sub csp, jssp, #0x10 (16)
0xffff7ab207f4   372  str x17, [jssp, #-8]!
0xffff7ab207f8   376  add fp, jssp, #0x10 (16)
0xffff7ab207fc   380  lsl x4, x4, #35
0xffff7ab20800   384  sub csp, jssp, #0x10 (16)
0xffff7ab20804   388  stp x4, x2, [jssp, #-16]!
0xffff7ab20808   392  movz x0, #0x1
0xffff7ab2080c   396  ldr x1, pc+116 (addr 0x0000ffff7ab20880)    ;; external reference (Runtime::AllocateInNewSpace)
0xffff7ab20810   400  ldr x16, pc+120 (addr 0x0000ffff7ab20888)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab20814   404  blr x16
0xffff7ab20818   408  ldr x2, [jssp], #8
0xffff7ab2081c   412  mov jssp, fp
0xffff7ab20820   416  ldp fp, lr, [jssp], #16
0xffff7ab20824   420  sub x0, x0, #0x1 (1)
0xffff7ab20828   424  ldrb w5, [x2, #7]
0xffff7ab2082c   428  add x5, x0, x5, lsl #3
0xffff7ab20830   432  b #-0x160 (addr 0xffff7ab206d0)
0xffff7ab20834   436  sub csp, jssp, #0x10 (16)
0xffff7ab20838   440  stp x3, x1, [jssp, #-16]!
0xffff7ab2083c   444  movz x0, #0x2
0xffff7ab20840   448  ldr x1, pc+80 (addr 0x0000ffff7ab20890)    ;; external reference (Runtime::NewObject)
0xffff7ab20844   452  ldr x16, pc+84 (addr 0x0000ffff7ab20898)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab20848   456  br x16
0xffff7ab2084c   460  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0xffff7ab20850   464  d63f03e0       constant
0xffff7ab20854   468  d503201f       constant
0xffff7ab20858   472  09abe2c0       constant
0xffff7ab2085c   476  00000000       constant
0xffff7ab20860   480  7ab20621       constant
0xffff7ab20864   484  0000ffff       constant
0xffff7ab20868   488  00e450e0       constant
0xffff7ab2086c   492  00000000       constant
0xffff7ab20870   496  7ab06060       constant
0xffff7ab20874   500  0000ffff       constant
0xffff7ab20878   504  7ab20621       constant
0xffff7ab2087c   508  0000ffff       constant
0xffff7ab20880   512  00e25898       constant
0xffff7ab20884   516  00000000       constant
0xffff7ab20888   520  7ab06060       constant
0xffff7ab2088c   524  0000ffff       constant
0xffff7ab20890   528  00e44dc0       constant
0xffff7ab20894   532  00000000       constant
0xffff7ab20898   536  7ab06060       constant
0xffff7ab2089c   540  0000ffff       constant


RelocInfo (size = 21)
0xffff7ab206b8  external reference (Heap::NewSpaceAllocationTopAddress())  (0x9abe2c0)
0xffff7ab207a0  embedded object  (0xffff7ab20621 <Code: STUB>)
0xffff7ab207bc  external reference (Runtime::FinalizeInstanceSize)  (0xe450e0)
0xffff7ab207c0  code target (STUB)  (0xffff7ab06060)
0xffff7ab207ec  embedded object  (0xffff7ab20621 <Code: STUB>)
0xffff7ab2080c  external reference (Runtime::AllocateInNewSpace)  (0xe25898)
0xffff7ab20810  code target (STUB)  (0xffff7ab06060)
0xffff7ab20840  external reference (Runtime::NewObject)  (0xe44dc0)
0xffff7ab20844  code target (STUB)  (0xffff7ab06060)
0xffff7ab2084c  constant pool (size 84)


kind = STUB
major_key = NameDictionaryLookupStub
name = NameDictionaryLookupStub
compiler = unknown
Instructions (size = 616)
0xffff7ab22620     0  ldursw x3, [x0, #35]
0xffff7ab22624     4  sub x3, x3, #0x1 (1)
0xffff7ab22628     8  ldur x4, [x1, #7]
0xffff7ab2262c    12  ldr x5, [x26, #40]
0xffff7ab22630    16  add x2, x4, #0x28 (40)
0xffff7ab22634    20  and x2, x3, x2, lsr #2
0xffff7ab22638    24  add x2, x2, x2, lsl #1
0xffff7ab2263c    28  add x2, x0, x2, lsl #3
0xffff7ab22640    32  ldur x6, [x2, #55]
0xffff7ab22644    36  cmp x6, x5
0xffff7ab22648    40  b.eq #+0x238 (addr 0xffff7ab22880)
0xffff7ab2264c    44  cmp x6, x1
0xffff7ab22650    48  b.eq #+0x228 (addr 0xffff7ab22878)
0xffff7ab22654    52  add x2, x4, #0x3c (60)
0xffff7ab22658    56  and x2, x3, x2, lsr #2
0xffff7ab2265c    60  add x2, x2, x2, lsl #1
0xffff7ab22660    64  add x2, x0, x2, lsl #3
0xffff7ab22664    68  ldur x6, [x2, #55]
0xffff7ab22668    72  cmp x6, x5
0xffff7ab2266c    76  b.eq #+0x214 (addr 0xffff7ab22880)
0xffff7ab22670    80  cmp x6, x1
0xffff7ab22674    84  b.eq #+0x204 (addr 0xffff7ab22878)
0xffff7ab22678    88  add x2, x4, #0x54 (84)
0xffff7ab2267c    92  and x2, x3, x2, lsr #2
0xffff7ab22680    96  add x2, x2, x2, lsl #1
0xffff7ab22684   100  add x2, x0, x2, lsl #3
0xffff7ab22688   104  ldur x6, [x2, #55]
0xffff7ab2268c   108  cmp x6, x5
0xffff7ab22690   112  b.eq #+0x1f0 (addr 0xffff7ab22880)
0xffff7ab22694   116  cmp x6, x1
0xffff7ab22698   120  b.eq #+0x1e0 (addr 0xffff7ab22878)
0xffff7ab2269c   124  add x2, x4, #0x70 (112)
0xffff7ab226a0   128  and x2, x3, x2, lsr #2
0xffff7ab226a4   132  add x2, x2, x2, lsl #1
0xffff7ab226a8   136  add x2, x0, x2, lsl #3
0xffff7ab226ac   140  ldur x6, [x2, #55]
0xffff7ab226b0   144  cmp x6, x5
0xffff7ab226b4   148  b.eq #+0x1cc (addr 0xffff7ab22880)
0xffff7ab226b8   152  cmp x6, x1
0xffff7ab226bc   156  b.eq #+0x1bc (addr 0xffff7ab22878)
0xffff7ab226c0   160  add x2, x4, #0x90 (144)
0xffff7ab226c4   164  and x2, x3, x2, lsr #2
0xffff7ab226c8   168  add x2, x2, x2, lsl #1
0xffff7ab226cc   172  add x2, x0, x2, lsl #3
0xffff7ab226d0   176  ldur x6, [x2, #55]
0xffff7ab226d4   180  cmp x6, x5
0xffff7ab226d8   184  b.eq #+0x1a8 (addr 0xffff7ab22880)
0xffff7ab226dc   188  cmp x6, x1
0xffff7ab226e0   192  b.eq #+0x198 (addr 0xffff7ab22878)
0xffff7ab226e4   196  add x2, x4, #0xb4 (180)
0xffff7ab226e8   200  and x2, x3, x2, lsr #2
0xffff7ab226ec   204  add x2, x2, x2, lsl #1
0xffff7ab226f0   208  add x2, x0, x2, lsl #3
0xffff7ab226f4   212  ldur x6, [x2, #55]
0xffff7ab226f8   216  cmp x6, x5
0xffff7ab226fc   220  b.eq #+0x184 (addr 0xffff7ab22880)
0xffff7ab22700   224  cmp x6, x1
0xffff7ab22704   228  b.eq #+0x174 (addr 0xffff7ab22878)
0xffff7ab22708   232  add x2, x4, #0xdc (220)
0xffff7ab2270c   236  and x2, x3, x2, lsr #2
0xffff7ab22710   240  add x2, x2, x2, lsl #1
0xffff7ab22714   244  add x2, x0, x2, lsl #3
0xffff7ab22718   248  ldur x6, [x2, #55]
0xffff7ab2271c   252  cmp x6, x5
0xffff7ab22720   256  b.eq #+0x160 (addr 0xffff7ab22880)
0xffff7ab22724   260  cmp x6, x1
0xffff7ab22728   264  b.eq #+0x150 (addr 0xffff7ab22878)
0xffff7ab2272c   268  add x2, x4, #0x108 (264)
0xffff7ab22730   272  and x2, x3, x2, lsr #2
0xffff7ab22734   276  add x2, x2, x2, lsl #1
0xffff7ab22738   280  add x2, x0, x2, lsl #3
0xffff7ab2273c   284  ldur x6, [x2, #55]
0xffff7ab22740   288  cmp x6, x5
0xffff7ab22744   292  b.eq #+0x13c (addr 0xffff7ab22880)
0xffff7ab22748   296  cmp x6, x1
0xffff7ab2274c   300  b.eq #+0x12c (addr 0xffff7ab22878)
0xffff7ab22750   304  add x2, x4, #0x138 (312)
0xffff7ab22754   308  and x2, x3, x2, lsr #2
0xffff7ab22758   312  add x2, x2, x2, lsl #1
0xffff7ab2275c   316  add x2, x0, x2, lsl #3
0xffff7ab22760   320  ldur x6, [x2, #55]
0xffff7ab22764   324  cmp x6, x5
0xffff7ab22768   328  b.eq #+0x118 (addr 0xffff7ab22880)
0xffff7ab2276c   332  cmp x6, x1
0xffff7ab22770   336  b.eq #+0x108 (addr 0xffff7ab22878)
0xffff7ab22774   340  add x2, x4, #0x16c (364)
0xffff7ab22778   344  and x2, x3, x2, lsr #2
0xffff7ab2277c   348  add x2, x2, x2, lsl #1
0xffff7ab22780   352  add x2, x0, x2, lsl #3
0xffff7ab22784   356  ldur x6, [x2, #55]
0xffff7ab22788   360  cmp x6, x5
0xffff7ab2278c   364  b.eq #+0xf4 (addr 0xffff7ab22880)
0xffff7ab22790   368  cmp x6, x1
0xffff7ab22794   372  b.eq #+0xe4 (addr 0xffff7ab22878)
0xffff7ab22798   376  add x2, x4, #0x1a4 (420)
0xffff7ab2279c   380  and x2, x3, x2, lsr #2
0xffff7ab227a0   384  add x2, x2, x2, lsl #1
0xffff7ab227a4   388  add x2, x0, x2, lsl #3
0xffff7ab227a8   392  ldur x6, [x2, #55]
0xffff7ab227ac   396  cmp x6, x5
0xffff7ab227b0   400  b.eq #+0xd0 (addr 0xffff7ab22880)
0xffff7ab227b4   404  cmp x6, x1
0xffff7ab227b8   408  b.eq #+0xc0 (addr 0xffff7ab22878)
0xffff7ab227bc   412  add x2, x4, #0x1e0 (480)
0xffff7ab227c0   416  and x2, x3, x2, lsr #2
0xffff7ab227c4   420  add x2, x2, x2, lsl #1
0xffff7ab227c8   424  add x2, x0, x2, lsl #3
0xffff7ab227cc   428  ldur x6, [x2, #55]
0xffff7ab227d0   432  cmp x6, x5
0xffff7ab227d4   436  b.eq #+0xac (addr 0xffff7ab22880)
0xffff7ab227d8   440  cmp x6, x1
0xffff7ab227dc   444  b.eq #+0x9c (addr 0xffff7ab22878)
0xffff7ab227e0   448  add x2, x4, #0x220 (544)
0xffff7ab227e4   452  and x2, x3, x2, lsr #2
0xffff7ab227e8   456  add x2, x2, x2, lsl #1
0xffff7ab227ec   460  add x2, x0, x2, lsl #3
0xffff7ab227f0   464  ldur x6, [x2, #55]
0xffff7ab227f4   468  cmp x6, x5
0xffff7ab227f8   472  b.eq #+0x88 (addr 0xffff7ab22880)
0xffff7ab227fc   476  cmp x6, x1
0xffff7ab22800   480  b.eq #+0x78 (addr 0xffff7ab22878)
0xffff7ab22804   484  add x2, x4, #0x264 (612)
0xffff7ab22808   488  and x2, x3, x2, lsr #2
0xffff7ab2280c   492  add x2, x2, x2, lsl #1
0xffff7ab22810   496  add x2, x0, x2, lsl #3
0xffff7ab22814   500  ldur x6, [x2, #55]
0xffff7ab22818   504  cmp x6, x5
0xffff7ab2281c   508  b.eq #+0x64 (addr 0xffff7ab22880)
0xffff7ab22820   512  cmp x6, x1
0xffff7ab22824   516  b.eq #+0x54 (addr 0xffff7ab22878)
0xffff7ab22828   520  add x2, x4, #0x2ac (684)
0xffff7ab2282c   524  and x2, x3, x2, lsr #2
0xffff7ab22830   528  add x2, x2, x2, lsl #1
0xffff7ab22834   532  add x2, x0, x2, lsl #3
0xffff7ab22838   536  ldur x6, [x2, #55]
0xffff7ab2283c   540  cmp x6, x5
0xffff7ab22840   544  b.eq #+0x40 (addr 0xffff7ab22880)
0xffff7ab22844   548  cmp x6, x1
0xffff7ab22848   552  b.eq #+0x30 (addr 0xffff7ab22878)
0xffff7ab2284c   556  add x2, x4, #0x2f8 (760)
0xffff7ab22850   560  and x2, x3, x2, lsr #2
0xffff7ab22854   564  add x2, x2, x2, lsl #1
0xffff7ab22858   568  add x2, x0, x2, lsl #3
0xffff7ab2285c   572  ldur x6, [x2, #55]
0xffff7ab22860   576  cmp x6, x5
0xffff7ab22864   580  b.eq #+0x1c (addr 0xffff7ab22880)
0xffff7ab22868   584  cmp x6, x1
0xffff7ab2286c   588  b.eq #+0xc (addr 0xffff7ab22878)
0xffff7ab22870   592  movz x0, #0x0
0xffff7ab22874   596  ret
0xffff7ab22878   600  movz x0, #0x1
0xffff7ab2287c   604  ret
0xffff7ab22880   608  movz x0, #0x0
0xffff7ab22884   612  ret


RelocInfo (size = 0)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0xffff7ab22f80     0  adr xzr, #+0x40 (addr 0xffff7ab22fc0)
0xffff7ab22f84     4  adr xzr, #+0x2a8 (addr 0xffff7ab2322c)
0xffff7ab22f88     8  ldr x16, pc+1368 (addr 0x0000ffff7ab234e0)    ;; external reference (store_buffer_top)
0xffff7ab22f8c    12  ldr x10, [x16]
0xffff7ab22f90    16  str x11, [x10], #8
0xffff7ab22f94    20  str x10, [x16]
0xffff7ab22f98    24  tst x10, #0x1ffff
0xffff7ab22f9c    28  b.eq #+0x8 (addr 0xffff7ab22fa4)
0xffff7ab22fa0    32  ret
0xffff7ab22fa4    36  sub csp, jssp, #0x8 (8)
0xffff7ab22fa8    40  str lr, [jssp, #-8]!
0xffff7ab22fac    44  ldr x17, pc+1340 (addr 0x0000ffff7ab234e8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab22fb0    48  blr x17
0xffff7ab22fb4    52  ldr lr, [jssp], #8
0xffff7ab22fb8    56  ret
0xffff7ab22fbc    60  ret
0xffff7ab22fc0    64  sub csp, jssp, #0x10 (16)
0xffff7ab22fc4    68  stp x1, x0, [jssp, #-16]!
0xffff7ab22fc8    72  ldr x10, [x11]
0xffff7ab22fcc    76  and x16, x10, #0xfffffffffff00000
0xffff7ab22fd0    80  ldr x16, [x16, #8]
0xffff7ab22fd4    84  tst x16, #0x18
0xffff7ab22fd8    88  b.eq #+0x17c (addr 0xffff7ab23154)
0xffff7ab22fdc    92  and x16, x4, #0xfffffffffff00000
0xffff7ab22fe0    96  ldr x16, [x16, #8]
0xffff7ab22fe4   100  tst x16, #0x18
0xffff7ab22fe8   104  b.ne #+0x16c (addr 0xffff7ab23154)
0xffff7ab22fec   108  and x10, x4, #0xfffffffffff00000
0xffff7ab22ff0   112  ldr x0, [x10, #104]
0xffff7ab22ff4   116  subs x0, x0, #0x1 (1)
0xffff7ab22ff8   120  str x0, [x10, #104]
0xffff7ab22ffc   124  b.mi #+0xc4 (addr 0xffff7ab230c0)
0xffff7ab23000   128  ubfx x16, x4, #8, #12
0xffff7ab23004   132  and x10, x4, #0xfffffffffff00000
0xffff7ab23008   136  add x10, x10, x16, lsl #2
0xffff7ab2300c   140  ubfx x0, x4, #3, #5
0xffff7ab23010   144  ldr x10, [x10, #360]
0xffff7ab23014   148  lsr x10, x10, x0
0xffff7ab23018   152  tbz w10, #0, #+0x8 (addr 0xffff7ab23020)
0xffff7ab2301c   156  tbnz w10, #1, #+0x3c (addr 0xffff7ab23058)
0xffff7ab23020   160  ldp x1, x0, [jssp], #16
0xffff7ab23024   164  ldr x16, pc+1228 (addr 0x0000ffff7ab234f0)    ;; external reference (store_buffer_top)
0xffff7ab23028   168  ldr x10, [x16]
0xffff7ab2302c   172  str x11, [x10], #8
0xffff7ab23030   176  str x10, [x16]
0xffff7ab23034   180  tst x10, #0x1ffff
0xffff7ab23038   184  b.eq #+0x8 (addr 0xffff7ab23040)
0xffff7ab2303c   188  ret
0xffff7ab23040   192  sub csp, jssp, #0x8 (8)
0xffff7ab23044   196  str lr, [jssp, #-8]!
0xffff7ab23048   200  ldr x17, pc+1200 (addr 0x0000ffff7ab234f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2304c   204  blr x17
0xffff7ab23050   208  ldr lr, [jssp], #8
0xffff7ab23054   212  ret
0xffff7ab23058   216  ldr x10, [x11]
0xffff7ab2305c   220  sub csp, jssp, #0x10 (16)
0xffff7ab23060   224  stp x4, x11, [jssp, #-16]!
0xffff7ab23064   228  ubfx x16, x10, #8, #12
0xffff7ab23068   232  and x0, x10, #0xfffffffffff00000
0xffff7ab2306c   236  add x0, x0, x16, lsl #2
0xffff7ab23070   240  ubfx x4, x10, #3, #5
0xffff7ab23074   244  ldr x11, [x0, #360]
0xffff7ab23078   248  lsr x11, x11, x4
0xffff7ab2307c   252  tbz w11, #0, #+0x40 (addr 0xffff7ab230bc)
0xffff7ab23080   256  ldp x4, x11, [jssp], #16
0xffff7ab23084   260  ldp x1, x0, [jssp], #16
0xffff7ab23088   264  ldr x16, pc+1144 (addr 0x0000ffff7ab23500)    ;; external reference (store_buffer_top)
0xffff7ab2308c   268  ldr x10, [x16]
0xffff7ab23090   272  str x11, [x10], #8
0xffff7ab23094   276  str x10, [x16]
0xffff7ab23098   280  tst x10, #0x1ffff
0xffff7ab2309c   284  b.eq #+0x8 (addr 0xffff7ab230a4)
0xffff7ab230a0   288  ret
0xffff7ab230a4   292  sub csp, jssp, #0x8 (8)
0xffff7ab230a8   296  str lr, [jssp, #-8]!
0xffff7ab230ac   300  ldr x17, pc+1116 (addr 0x0000ffff7ab23508)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab230b0   304  blr x17
0xffff7ab230b4   308  ldr lr, [jssp], #8
0xffff7ab230b8   312  ret
0xffff7ab230bc   316  ldp x4, x11, [jssp], #16
0xffff7ab230c0   320  sub csp, jssp, #0x78 (120)
0xffff7ab230c4   324  stp x14, x15, [jssp, #-32]!
0xffff7ab230c8   328  stp x18, lr, [jssp, #16]
0xffff7ab230cc   332  stp x9, x11, [jssp, #-32]!
0xffff7ab230d0   336  stp x12, x13, [jssp, #16]
0xffff7ab230d4   340  stp x5, x6, [jssp, #-32]!
0xffff7ab230d8   344  stp x7, x8, [jssp, #16]
0xffff7ab230dc   348  stp x2, x3, [jssp, #-24]!
0xffff7ab230e0   352  str x4, [jssp, #16]
0xffff7ab230e4   356  mov x0, x4
0xffff7ab230e8   360  mov x1, x11
0xffff7ab230ec   364  ldr x2, pc+1060 (addr 0x0000ffff7ab23510)    ;; external reference (isolate)
0xffff7ab230f0   368  ldr x16, pc+1064 (addr 0x0000ffff7ab23518)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab230f4   372  and csp, jssp, #0xfffffffffffffff0
0xffff7ab230f8   376  blr x16
0xffff7ab230fc   380  ldp x4, x5, [jssp, #16]
0xffff7ab23100   384  ldp x2, x3, [jssp], #32
0xffff7ab23104   388  ldp x8, x9, [jssp, #16]
0xffff7ab23108   392  ldp x6, x7, [jssp], #32
0xffff7ab2310c   396  ldp x13, x14, [jssp, #16]
0xffff7ab23110   400  ldp x11, x12, [jssp], #32
0xffff7ab23114   404  ldr lr, [jssp, #16]
0xffff7ab23118   408  ldp x15, x18, [jssp], #24
0xffff7ab2311c   412  ldp x1, x0, [jssp], #16
0xffff7ab23120   416  ldr x16, pc+1024 (addr 0x0000ffff7ab23520)    ;; external reference (store_buffer_top)
0xffff7ab23124   420  ldr x10, [x16]
0xffff7ab23128   424  str x11, [x10], #8
0xffff7ab2312c   428  str x10, [x16]
0xffff7ab23130   432  tst x10, #0x1ffff
0xffff7ab23134   436  b.eq #+0x8 (addr 0xffff7ab2313c)
0xffff7ab23138   440  ret
0xffff7ab2313c   444  sub csp, jssp, #0x8 (8)
0xffff7ab23140   448  str lr, [jssp, #-8]!
0xffff7ab23144   452  ldr x17, pc+996 (addr 0x0000ffff7ab23528)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab23148   456  blr x17
0xffff7ab2314c   460  ldr lr, [jssp], #8
0xffff7ab23150   464  ret
0xffff7ab23154   468  and x10, x4, #0xfffffffffff00000
0xffff7ab23158   472  ldr x0, [x10, #104]
0xffff7ab2315c   476  subs x0, x0, #0x1 (1)
0xffff7ab23160   480  str x0, [x10, #104]
0xffff7ab23164   484  b.mi #+0x64 (addr 0xffff7ab231c8)
0xffff7ab23168   488  ubfx x16, x4, #8, #12
0xffff7ab2316c   492  and x10, x4, #0xfffffffffff00000
0xffff7ab23170   496  add x10, x10, x16, lsl #2
0xffff7ab23174   500  ubfx x0, x4, #3, #5
0xffff7ab23178   504  ldr x10, [x10, #360]
0xffff7ab2317c   508  lsr x10, x10, x0
0xffff7ab23180   512  tbz w10, #0, #+0x8 (addr 0xffff7ab23188)
0xffff7ab23184   516  tbnz w10, #1, #+0xc (addr 0xffff7ab23190)
0xffff7ab23188   520  ldp x1, x0, [jssp], #16
0xffff7ab2318c   524  ret
0xffff7ab23190   528  ldr x10, [x11]
0xffff7ab23194   532  sub csp, jssp, #0x10 (16)
0xffff7ab23198   536  stp x4, x11, [jssp, #-16]!
0xffff7ab2319c   540  ubfx x16, x10, #8, #12
0xffff7ab231a0   544  and x0, x10, #0xfffffffffff00000
0xffff7ab231a4   548  add x0, x0, x16, lsl #2
0xffff7ab231a8   552  ubfx x4, x10, #3, #5
0xffff7ab231ac   556  ldr x11, [x0, #360]
0xffff7ab231b0   560  lsr x11, x11, x4
0xffff7ab231b4   564  tbz w11, #0, #+0x10 (addr 0xffff7ab231c4)
0xffff7ab231b8   568  ldp x4, x11, [jssp], #16
0xffff7ab231bc   572  ldp x1, x0, [jssp], #16
0xffff7ab231c0   576  ret
0xffff7ab231c4   580  ldp x4, x11, [jssp], #16
0xffff7ab231c8   584  sub csp, jssp, #0x78 (120)
0xffff7ab231cc   588  stp x14, x15, [jssp, #-32]!
0xffff7ab231d0   592  stp x18, lr, [jssp, #16]
0xffff7ab231d4   596  stp x9, x11, [jssp, #-32]!
0xffff7ab231d8   600  stp x12, x13, [jssp, #16]
0xffff7ab231dc   604  stp x5, x6, [jssp, #-32]!
0xffff7ab231e0   608  stp x7, x8, [jssp, #16]
0xffff7ab231e4   612  stp x2, x3, [jssp, #-24]!
0xffff7ab231e8   616  str x4, [jssp, #16]
0xffff7ab231ec   620  mov x0, x4
0xffff7ab231f0   624  mov x1, x11
0xffff7ab231f4   628  ldr x2, pc+828 (addr 0x0000ffff7ab23530)    ;; external reference (isolate)
0xffff7ab231f8   632  ldr x16, pc+832 (addr 0x0000ffff7ab23538)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab231fc   636  and csp, jssp, #0xfffffffffffffff0
0xffff7ab23200   640  blr x16
0xffff7ab23204   644  ldp x4, x5, [jssp, #16]
0xffff7ab23208   648  ldp x2, x3, [jssp], #32
0xffff7ab2320c   652  ldp x8, x9, [jssp, #16]
0xffff7ab23210   656  ldp x6, x7, [jssp], #32
0xffff7ab23214   660  ldp x13, x14, [jssp, #16]
0xffff7ab23218   664  ldp x11, x12, [jssp], #32
0xffff7ab2321c   668  ldr lr, [jssp, #16]
0xffff7ab23220   672  ldp x15, x18, [jssp], #24
0xffff7ab23224   676  ldp x1, x0, [jssp], #16
0xffff7ab23228   680  ret
0xffff7ab2322c   684  sub csp, jssp, #0x10 (16)
0xffff7ab23230   688  stp x1, x0, [jssp, #-16]!
0xffff7ab23234   692  ldr x10, [x11]
0xffff7ab23238   696  and x16, x10, #0xfffffffffff00000
0xffff7ab2323c   700  ldr x16, [x16, #8]
0xffff7ab23240   704  tst x16, #0x18
0xffff7ab23244   708  b.eq #+0x19c (addr 0xffff7ab233e0)
0xffff7ab23248   712  and x16, x4, #0xfffffffffff00000
0xffff7ab2324c   716  ldr x16, [x16, #8]
0xffff7ab23250   720  tst x16, #0x18
0xffff7ab23254   724  b.ne #+0x18c (addr 0xffff7ab233e0)
0xffff7ab23258   728  and x10, x4, #0xfffffffffff00000
0xffff7ab2325c   732  ldr x0, [x10, #104]
0xffff7ab23260   736  subs x0, x0, #0x1 (1)
0xffff7ab23264   740  str x0, [x10, #104]
0xffff7ab23268   744  b.mi #+0xe4 (addr 0xffff7ab2334c)
0xffff7ab2326c   748  ubfx x16, x4, #8, #12
0xffff7ab23270   752  and x10, x4, #0xfffffffffff00000
0xffff7ab23274   756  add x10, x10, x16, lsl #2
0xffff7ab23278   760  ubfx x0, x4, #3, #5
0xffff7ab2327c   764  ldr x10, [x10, #360]
0xffff7ab23280   768  lsr x10, x10, x0
0xffff7ab23284   772  tbz w10, #0, #+0x8 (addr 0xffff7ab2328c)
0xffff7ab23288   776  tbnz w10, #1, #+0x3c (addr 0xffff7ab232c4)
0xffff7ab2328c   780  ldp x1, x0, [jssp], #16
0xffff7ab23290   784  ldr x16, pc+688 (addr 0x0000ffff7ab23540)    ;; external reference (store_buffer_top)
0xffff7ab23294   788  ldr x10, [x16]
0xffff7ab23298   792  str x11, [x10], #8
0xffff7ab2329c   796  str x10, [x16]
0xffff7ab232a0   800  tst x10, #0x1ffff
0xffff7ab232a4   804  b.eq #+0x8 (addr 0xffff7ab232ac)
0xffff7ab232a8   808  ret
0xffff7ab232ac   812  sub csp, jssp, #0x8 (8)
0xffff7ab232b0   816  str lr, [jssp, #-8]!
0xffff7ab232b4   820  ldr x17, pc+660 (addr 0x0000ffff7ab23548)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab232b8   824  blr x17
0xffff7ab232bc   828  ldr lr, [jssp], #8
0xffff7ab232c0   832  ret
0xffff7ab232c4   836  ldr x10, [x11]
0xffff7ab232c8   840  and x0, x10, #0xfffffffffff00000
0xffff7ab232cc   844  ldr x0, [x0, #8]
0xffff7ab232d0   848  tbz w0, #6, #+0x18 (addr 0xffff7ab232e8)
0xffff7ab232d4   852  and x0, x4, #0xfffffffffff00000
0xffff7ab232d8   856  ldr x0, [x0, #8]
0xffff7ab232dc   860  movz x16, #0x58
0xffff7ab232e0   864  tst x0, x16
0xffff7ab232e4   868  b.eq #+0x68 (addr 0xffff7ab2334c)
0xffff7ab232e8   872  sub csp, jssp, #0x10 (16)
0xffff7ab232ec   876  stp x4, x11, [jssp, #-16]!
0xffff7ab232f0   880  ubfx x16, x10, #8, #12
0xffff7ab232f4   884  and x0, x10, #0xfffffffffff00000
0xffff7ab232f8   888  add x0, x0, x16, lsl #2
0xffff7ab232fc   892  ubfx x4, x10, #3, #5
0xffff7ab23300   896  ldr x11, [x0, #360]
0xffff7ab23304   900  lsr x11, x11, x4
0xffff7ab23308   904  tbz w11, #0, #+0x40 (addr 0xffff7ab23348)
0xffff7ab2330c   908  ldp x4, x11, [jssp], #16
0xffff7ab23310   912  ldp x1, x0, [jssp], #16
0xffff7ab23314   916  ldr x16, pc+572 (addr 0x0000ffff7ab23550)    ;; external reference (store_buffer_top)
0xffff7ab23318   920  ldr x10, [x16]
0xffff7ab2331c   924  str x11, [x10], #8
0xffff7ab23320   928  str x10, [x16]
0xffff7ab23324   932  tst x10, #0x1ffff
0xffff7ab23328   936  b.eq #+0x8 (addr 0xffff7ab23330)
0xffff7ab2332c   940  ret
0xffff7ab23330   944  sub csp, jssp, #0x8 (8)
0xffff7ab23334   948  str lr, [jssp, #-8]!
0xffff7ab23338   952  ldr x17, pc+544 (addr 0x0000ffff7ab23558)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2333c   956  blr x17
0xffff7ab23340   960  ldr lr, [jssp], #8
0xffff7ab23344   964  ret
0xffff7ab23348   968  ldp x4, x11, [jssp], #16
0xffff7ab2334c   972  sub csp, jssp, #0x78 (120)
0xffff7ab23350   976  stp x14, x15, [jssp, #-32]!
0xffff7ab23354   980  stp x18, lr, [jssp, #16]
0xffff7ab23358   984  stp x9, x11, [jssp, #-32]!
0xffff7ab2335c   988  stp x12, x13, [jssp, #16]
0xffff7ab23360   992  stp x5, x6, [jssp, #-32]!
0xffff7ab23364   996  stp x7, x8, [jssp, #16]
0xffff7ab23368  1000  stp x2, x3, [jssp, #-24]!
0xffff7ab2336c  1004  str x4, [jssp, #16]
0xffff7ab23370  1008  mov x0, x4
0xffff7ab23374  1012  mov x1, x11
0xffff7ab23378  1016  ldr x2, pc+488 (addr 0x0000ffff7ab23560)    ;; external reference (isolate)
0xffff7ab2337c  1020  ldr x16, pc+492 (addr 0x0000ffff7ab23568)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab23380  1024  and csp, jssp, #0xfffffffffffffff0
0xffff7ab23384  1028  blr x16
0xffff7ab23388  1032  ldp x4, x5, [jssp, #16]
0xffff7ab2338c  1036  ldp x2, x3, [jssp], #32
0xffff7ab23390  1040  ldp x8, x9, [jssp, #16]
0xffff7ab23394  1044  ldp x6, x7, [jssp], #32
0xffff7ab23398  1048  ldp x13, x14, [jssp, #16]
0xffff7ab2339c  1052  ldp x11, x12, [jssp], #32
0xffff7ab233a0  1056  ldr lr, [jssp, #16]
0xffff7ab233a4  1060  ldp x15, x18, [jssp], #24
0xffff7ab233a8  1064  ldp x1, x0, [jssp], #16
0xffff7ab233ac  1068  ldr x16, pc+452 (addr 0x0000ffff7ab23570)    ;; external reference (store_buffer_top)
0xffff7ab233b0  1072  ldr x10, [x16]
0xffff7ab233b4  1076  str x11, [x10], #8
0xffff7ab233b8  1080  str x10, [x16]
0xffff7ab233bc  1084  tst x10, #0x1ffff
0xffff7ab233c0  1088  b.eq #+0x8 (addr 0xffff7ab233c8)
0xffff7ab233c4  1092  ret
0xffff7ab233c8  1096  sub csp, jssp, #0x8 (8)
0xffff7ab233cc  1100  str lr, [jssp, #-8]!
0xffff7ab233d0  1104  ldr x17, pc+424 (addr 0x0000ffff7ab23578)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab233d4  1108  blr x17
0xffff7ab233d8  1112  ldr lr, [jssp], #8
0xffff7ab233dc  1116  ret
0xffff7ab233e0  1120  and x10, x4, #0xfffffffffff00000
0xffff7ab233e4  1124  ldr x0, [x10, #104]
0xffff7ab233e8  1128  subs x0, x0, #0x1 (1)
0xffff7ab233ec  1132  str x0, [x10, #104]
0xffff7ab233f0  1136  b.mi #+0x84 (addr 0xffff7ab23474)
0xffff7ab233f4  1140  ubfx x16, x4, #8, #12
0xffff7ab233f8  1144  and x10, x4, #0xfffffffffff00000
0xffff7ab233fc  1148  add x10, x10, x16, lsl #2
0xffff7ab23400  1152  ubfx x0, x4, #3, #5
0xffff7ab23404  1156  ldr x10, [x10, #360]
0xffff7ab23408  1160  lsr x10, x10, x0
0xffff7ab2340c  1164  tbz w10, #0, #+0x8 (addr 0xffff7ab23414)
0xffff7ab23410  1168  tbnz w10, #1, #+0xc (addr 0xffff7ab2341c)
0xffff7ab23414  1172  ldp x1, x0, [jssp], #16
0xffff7ab23418  1176  ret
0xffff7ab2341c  1180  ldr x10, [x11]
0xffff7ab23420  1184  and x0, x10, #0xfffffffffff00000
0xffff7ab23424  1188  ldr x0, [x0, #8]
0xffff7ab23428  1192  tbz w0, #6, #+0x18 (addr 0xffff7ab23440)
0xffff7ab2342c  1196  and x0, x4, #0xfffffffffff00000
0xffff7ab23430  1200  ldr x0, [x0, #8]
0xffff7ab23434  1204  movz x16, #0x58
0xffff7ab23438  1208  tst x0, x16
0xffff7ab2343c  1212  b.eq #+0x38 (addr 0xffff7ab23474)
0xffff7ab23440  1216  sub csp, jssp, #0x10 (16)
0xffff7ab23444  1220  stp x4, x11, [jssp, #-16]!
0xffff7ab23448  1224  ubfx x16, x10, #8, #12
0xffff7ab2344c  1228  and x0, x10, #0xfffffffffff00000
0xffff7ab23450  1232  add x0, x0, x16, lsl #2
0xffff7ab23454  1236  ubfx x4, x10, #3, #5
0xffff7ab23458  1240  ldr x11, [x0, #360]
0xffff7ab2345c  1244  lsr x11, x11, x4
0xffff7ab23460  1248  tbz w11, #0, #+0x10 (addr 0xffff7ab23470)
0xffff7ab23464  1252  ldp x4, x11, [jssp], #16
0xffff7ab23468  1256  ldp x1, x0, [jssp], #16
0xffff7ab2346c  1260  ret
0xffff7ab23470  1264  ldp x4, x11, [jssp], #16
0xffff7ab23474  1268  sub csp, jssp, #0x78 (120)
0xffff7ab23478  1272  stp x14, x15, [jssp, #-32]!
0xffff7ab2347c  1276  stp x18, lr, [jssp, #16]
0xffff7ab23480  1280  stp x9, x11, [jssp, #-32]!
0xffff7ab23484  1284  stp x12, x13, [jssp, #16]
0xffff7ab23488  1288  stp x5, x6, [jssp, #-32]!
0xffff7ab2348c  1292  stp x7, x8, [jssp, #16]
0xffff7ab23490  1296  stp x2, x3, [jssp, #-24]!
0xffff7ab23494  1300  str x4, [jssp, #16]
0xffff7ab23498  1304  mov x0, x4
0xffff7ab2349c  1308  mov x1, x11
0xffff7ab234a0  1312  ldr x2, pc+224 (addr 0x0000ffff7ab23580)    ;; external reference (isolate)
0xffff7ab234a4  1316  ldr x16, pc+228 (addr 0x0000ffff7ab23588)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab234a8  1320  and csp, jssp, #0xfffffffffffffff0
0xffff7ab234ac  1324  blr x16
0xffff7ab234b0  1328  ldp x4, x5, [jssp, #16]
0xffff7ab234b4  1332  ldp x2, x3, [jssp], #32
0xffff7ab234b8  1336  ldp x8, x9, [jssp, #16]
0xffff7ab234bc  1340  ldp x6, x7, [jssp], #32
0xffff7ab234c0  1344  ldp x13, x14, [jssp, #16]
0xffff7ab234c4  1348  ldp x11, x12, [jssp], #32
0xffff7ab234c8  1352  ldr lr, [jssp, #16]
0xffff7ab234cc  1356  ldp x15, x18, [jssp], #24
0xffff7ab234d0  1360  ldp x1, x0, [jssp], #16
0xffff7ab234d4  1364  ret
0xffff7ab234d8  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab234dc  1372  d63f03e0       constant
0xffff7ab234e0  1376  09abe8c0       constant
0xffff7ab234e4  1380  00000000       constant
0xffff7ab234e8  1384  7ab064c0       constant
0xffff7ab234ec  1388  0000ffff       constant
0xffff7ab234f0  1392  09abe8c0       constant
0xffff7ab234f4  1396  00000000       constant
0xffff7ab234f8  1400  7ab064c0       constant
0xffff7ab234fc  1404  0000ffff       constant
0xffff7ab23500  1408  09abe8c0       constant
0xffff7ab23504  1412  00000000       constant
0xffff7ab23508  1416  7ab064c0       constant
0xffff7ab2350c  1420  0000ffff       constant
0xffff7ab23510  1424  09abd2d0       constant
0xffff7ab23514  1428  00000000       constant
0xffff7ab23518  1432  00c2d958       constant
0xffff7ab2351c  1436  00000000       constant
0xffff7ab23520  1440  09abe8c0       constant
0xffff7ab23524  1444  00000000       constant
0xffff7ab23528  1448  7ab064c0       constant
0xffff7ab2352c  1452  0000ffff       constant
0xffff7ab23530  1456  09abd2d0       constant
0xffff7ab23534  1460  00000000       constant
0xffff7ab23538  1464  00c2d958       constant
0xffff7ab2353c  1468  00000000       constant
0xffff7ab23540  1472  09abe8c0       constant
0xffff7ab23544  1476  00000000       constant
0xffff7ab23548  1480  7ab064c0       constant
0xffff7ab2354c  1484  0000ffff       constant
0xffff7ab23550  1488  09abe8c0       constant
0xffff7ab23554  1492  00000000       constant
0xffff7ab23558  1496  7ab064c0       constant
0xffff7ab2355c  1500  0000ffff       constant
0xffff7ab23560  1504  09abd2d0       constant
0xffff7ab23564  1508  00000000       constant
0xffff7ab23568  1512  00c2d958       constant
0xffff7ab2356c  1516  00000000       constant
0xffff7ab23570  1520  09abe8c0       constant
0xffff7ab23574  1524  00000000       constant
0xffff7ab23578  1528  7ab064c0       constant
0xffff7ab2357c  1532  0000ffff       constant
0xffff7ab23580  1536  09abd2d0       constant
0xffff7ab23584  1540  00000000       constant
0xffff7ab23588  1544  00c2d958       constant
0xffff7ab2358c  1548  00000000       constant


RelocInfo (size = 59)
0xffff7ab22f88  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab22fac  code target (STUB)  (0xffff7ab064c0)
0xffff7ab23024  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab23048  code target (STUB)  (0xffff7ab064c0)
0xffff7ab23088  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab230ac  code target (STUB)  (0xffff7ab064c0)
0xffff7ab230ec  external reference (isolate)  (0x9abd2d0)
0xffff7ab230f0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab23120  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab23144  code target (STUB)  (0xffff7ab064c0)
0xffff7ab231f4  external reference (isolate)  (0x9abd2d0)
0xffff7ab231f8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab23290  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab232b4  code target (STUB)  (0xffff7ab064c0)
0xffff7ab23314  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab23338  code target (STUB)  (0xffff7ab064c0)
0xffff7ab23378  external reference (isolate)  (0x9abd2d0)
0xffff7ab2337c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab233ac  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab233d0  code target (STUB)  (0xffff7ab064c0)
0xffff7ab234a0  external reference (isolate)  (0x9abd2d0)
0xffff7ab234a4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab234d8  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 536)
0xffff7ab23600     0  adr xzr, #+0xc (addr 0xffff7ab2360c)
0xffff7ab23604     4  adr xzr, #+0xe8 (addr 0xffff7ab236ec)
0xffff7ab23608     8  ret
0xffff7ab2360c    12  sub csp, jssp, #0x10 (16)
0xffff7ab23610    16  stp x2, x0, [jssp, #-16]!
0xffff7ab23614    20  and x3, x1, #0xfffffffffff00000
0xffff7ab23618    24  ldr x0, [x3, #104]
0xffff7ab2361c    28  subs x0, x0, #0x1 (1)
0xffff7ab23620    32  str x0, [x3, #104]
0xffff7ab23624    36  b.mi #+0x64 (addr 0xffff7ab23688)
0xffff7ab23628    40  ubfx x16, x1, #8, #12
0xffff7ab2362c    44  and x3, x1, #0xfffffffffff00000
0xffff7ab23630    48  add x3, x3, x16, lsl #2
0xffff7ab23634    52  ubfx x0, x1, #3, #5
0xffff7ab23638    56  ldr x3, [x3, #360]
0xffff7ab2363c    60  lsr x3, x3, x0
0xffff7ab23640    64  tbz w3, #0, #+0x8 (addr 0xffff7ab23648)
0xffff7ab23644    68  tbnz w3, #1, #+0xc (addr 0xffff7ab23650)
0xffff7ab23648    72  ldp x2, x0, [jssp], #16
0xffff7ab2364c    76  ret
0xffff7ab23650    80  ldr x3, [x6]
0xffff7ab23654    84  sub csp, jssp, #0x10 (16)
0xffff7ab23658    88  stp x1, x6, [jssp, #-16]!
0xffff7ab2365c    92  ubfx x16, x3, #8, #12
0xffff7ab23660    96  and x0, x3, #0xfffffffffff00000
0xffff7ab23664   100  add x0, x0, x16, lsl #2
0xffff7ab23668   104  ubfx x1, x3, #3, #5
0xffff7ab2366c   108  ldr x6, [x0, #360]
0xffff7ab23670   112  lsr x6, x6, x1
0xffff7ab23674   116  tbz w6, #0, #+0x10 (addr 0xffff7ab23684)
0xffff7ab23678   120  ldp x1, x6, [jssp], #16
0xffff7ab2367c   124  ldp x2, x0, [jssp], #16
0xffff7ab23680   128  ret
0xffff7ab23684   132  ldp x1, x6, [jssp], #16
0xffff7ab23688   136  sub csp, jssp, #0x78 (120)
0xffff7ab2368c   140  stp x14, x15, [jssp, #-32]!
0xffff7ab23690   144  stp x18, lr, [jssp, #16]
0xffff7ab23694   148  stp x10, x11, [jssp, #-32]!
0xffff7ab23698   152  stp x12, x13, [jssp, #16]
0xffff7ab2369c   156  stp x6, x7, [jssp, #-32]!
0xffff7ab236a0   160  stp x8, x9, [jssp, #16]
0xffff7ab236a4   164  stp x1, x4, [jssp, #-24]!
0xffff7ab236a8   168  str x5, [jssp, #16]
0xffff7ab236ac   172  mov x0, x1
0xffff7ab236b0   176  mov x1, x6
0xffff7ab236b4   180  ldr x2, pc+324 (addr 0x0000ffff7ab237f8)    ;; external reference (isolate)
0xffff7ab236b8   184  ldr x16, pc+328 (addr 0x0000ffff7ab23800)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab236bc   188  and csp, jssp, #0xfffffffffffffff0
0xffff7ab236c0   192  blr x16
0xffff7ab236c4   196  ldp x5, x6, [jssp, #16]
0xffff7ab236c8   200  ldp x1, x4, [jssp], #32
0xffff7ab236cc   204  ldp x9, x10, [jssp, #16]
0xffff7ab236d0   208  ldp x7, x8, [jssp], #32
0xffff7ab236d4   212  ldp x13, x14, [jssp, #16]
0xffff7ab236d8   216  ldp x11, x12, [jssp], #32
0xffff7ab236dc   220  ldr lr, [jssp, #16]
0xffff7ab236e0   224  ldp x15, x18, [jssp], #24
0xffff7ab236e4   228  ldp x2, x0, [jssp], #16
0xffff7ab236e8   232  ret
0xffff7ab236ec   236  sub csp, jssp, #0x10 (16)
0xffff7ab236f0   240  stp x2, x0, [jssp, #-16]!
0xffff7ab236f4   244  and x3, x1, #0xfffffffffff00000
0xffff7ab236f8   248  ldr x0, [x3, #104]
0xffff7ab236fc   252  subs x0, x0, #0x1 (1)
0xffff7ab23700   256  str x0, [x3, #104]
0xffff7ab23704   260  b.mi #+0x84 (addr 0xffff7ab23788)
0xffff7ab23708   264  ubfx x16, x1, #8, #12
0xffff7ab2370c   268  and x3, x1, #0xfffffffffff00000
0xffff7ab23710   272  add x3, x3, x16, lsl #2
0xffff7ab23714   276  ubfx x0, x1, #3, #5
0xffff7ab23718   280  ldr x3, [x3, #360]
0xffff7ab2371c   284  lsr x3, x3, x0
0xffff7ab23720   288  tbz w3, #0, #+0x8 (addr 0xffff7ab23728)
0xffff7ab23724   292  tbnz w3, #1, #+0xc (addr 0xffff7ab23730)
0xffff7ab23728   296  ldp x2, x0, [jssp], #16
0xffff7ab2372c   300  ret
0xffff7ab23730   304  ldr x3, [x6]
0xffff7ab23734   308  and x0, x3, #0xfffffffffff00000
0xffff7ab23738   312  ldr x0, [x0, #8]
0xffff7ab2373c   316  tbz w0, #6, #+0x18 (addr 0xffff7ab23754)
0xffff7ab23740   320  and x0, x1, #0xfffffffffff00000
0xffff7ab23744   324  ldr x0, [x0, #8]
0xffff7ab23748   328  movz x16, #0x58
0xffff7ab2374c   332  tst x0, x16
0xffff7ab23750   336  b.eq #+0x38 (addr 0xffff7ab23788)
0xffff7ab23754   340  sub csp, jssp, #0x10 (16)
0xffff7ab23758   344  stp x1, x6, [jssp, #-16]!
0xffff7ab2375c   348  ubfx x16, x3, #8, #12
0xffff7ab23760   352  and x0, x3, #0xfffffffffff00000
0xffff7ab23764   356  add x0, x0, x16, lsl #2
0xffff7ab23768   360  ubfx x1, x3, #3, #5
0xffff7ab2376c   364  ldr x6, [x0, #360]
0xffff7ab23770   368  lsr x6, x6, x1
0xffff7ab23774   372  tbz w6, #0, #+0x10 (addr 0xffff7ab23784)
0xffff7ab23778   376  ldp x1, x6, [jssp], #16
0xffff7ab2377c   380  ldp x2, x0, [jssp], #16
0xffff7ab23780   384  ret
0xffff7ab23784   388  ldp x1, x6, [jssp], #16
0xffff7ab23788   392  sub csp, jssp, #0x78 (120)
0xffff7ab2378c   396  stp x14, x15, [jssp, #-32]!
0xffff7ab23790   400  stp x18, lr, [jssp, #16]
0xffff7ab23794   404  stp x10, x11, [jssp, #-32]!
0xffff7ab23798   408  stp x12, x13, [jssp, #16]
0xffff7ab2379c   412  stp x6, x7, [jssp, #-32]!
0xffff7ab237a0   416  stp x8, x9, [jssp, #16]
0xffff7ab237a4   420  stp x1, x4, [jssp, #-24]!
0xffff7ab237a8   424  str x5, [jssp, #16]
0xffff7ab237ac   428  mov x0, x1
0xffff7ab237b0   432  mov x1, x6
0xffff7ab237b4   436  ldr x2, pc+84 (addr 0x0000ffff7ab23808)    ;; external reference (isolate)
0xffff7ab237b8   440  ldr x16, pc+88 (addr 0x0000ffff7ab23810)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab237bc   444  and csp, jssp, #0xfffffffffffffff0
0xffff7ab237c0   448  blr x16
0xffff7ab237c4   452  ldp x5, x6, [jssp, #16]
0xffff7ab237c8   456  ldp x1, x4, [jssp], #32
0xffff7ab237cc   460  ldp x9, x10, [jssp, #16]
0xffff7ab237d0   464  ldp x7, x8, [jssp], #32
0xffff7ab237d4   468  ldp x13, x14, [jssp, #16]
0xffff7ab237d8   472  ldp x11, x12, [jssp], #32
0xffff7ab237dc   476  ldr lr, [jssp, #16]
0xffff7ab237e0   480  ldp x15, x18, [jssp], #24
0xffff7ab237e4   484  ldp x2, x0, [jssp], #16
0xffff7ab237e8   488  ret
0xffff7ab237ec   492  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0xffff7ab237f0   496  d63f03e0       constant
0xffff7ab237f4   500  d503201f       constant
0xffff7ab237f8   504  09abd2d0       constant
0xffff7ab237fc   508  00000000       constant
0xffff7ab23800   512  00c2d958       constant
0xffff7ab23804   516  00000000       constant
0xffff7ab23808   520  09abd2d0       constant
0xffff7ab2380c   524  00000000       constant
0xffff7ab23810   528  00c2d958       constant
0xffff7ab23814   532  00000000       constant


RelocInfo (size = 18)
0xffff7ab236b4  external reference (isolate)  (0x9abd2d0)
0xffff7ab236b8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab237b4  external reference (isolate)  (0x9abd2d0)
0xffff7ab237b8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab237ec  constant pool (size 44)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0xffff7ab23880     0  adr xzr, #+0x40 (addr 0xffff7ab238c0)
0xffff7ab23884     4  adr xzr, #+0x2a8 (addr 0xffff7ab23b2c)
0xffff7ab23888     8  ldr x16, pc+1368 (addr 0x0000ffff7ab23de0)    ;; external reference (store_buffer_top)
0xffff7ab2388c    12  ldr x10, [x16]
0xffff7ab23890    16  str x6, [x10], #8
0xffff7ab23894    20  str x10, [x16]
0xffff7ab23898    24  tst x10, #0x1ffff
0xffff7ab2389c    28  b.eq #+0x8 (addr 0xffff7ab238a4)
0xffff7ab238a0    32  ret
0xffff7ab238a4    36  sub csp, jssp, #0x8 (8)
0xffff7ab238a8    40  str lr, [jssp, #-8]!
0xffff7ab238ac    44  ldr x17, pc+1340 (addr 0x0000ffff7ab23de8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab238b0    48  blr x17
0xffff7ab238b4    52  ldr lr, [jssp], #8
0xffff7ab238b8    56  ret
0xffff7ab238bc    60  ret
0xffff7ab238c0    64  sub csp, jssp, #0x10 (16)
0xffff7ab238c4    68  stp x2, x0, [jssp, #-16]!
0xffff7ab238c8    72  ldr x10, [x6]
0xffff7ab238cc    76  and x16, x10, #0xfffffffffff00000
0xffff7ab238d0    80  ldr x16, [x16, #8]
0xffff7ab238d4    84  tst x16, #0x18
0xffff7ab238d8    88  b.eq #+0x17c (addr 0xffff7ab23a54)
0xffff7ab238dc    92  and x16, x1, #0xfffffffffff00000
0xffff7ab238e0    96  ldr x16, [x16, #8]
0xffff7ab238e4   100  tst x16, #0x18
0xffff7ab238e8   104  b.ne #+0x16c (addr 0xffff7ab23a54)
0xffff7ab238ec   108  and x10, x1, #0xfffffffffff00000
0xffff7ab238f0   112  ldr x0, [x10, #104]
0xffff7ab238f4   116  subs x0, x0, #0x1 (1)
0xffff7ab238f8   120  str x0, [x10, #104]
0xffff7ab238fc   124  b.mi #+0xc4 (addr 0xffff7ab239c0)
0xffff7ab23900   128  ubfx x16, x1, #8, #12
0xffff7ab23904   132  and x10, x1, #0xfffffffffff00000
0xffff7ab23908   136  add x10, x10, x16, lsl #2
0xffff7ab2390c   140  ubfx x0, x1, #3, #5
0xffff7ab23910   144  ldr x10, [x10, #360]
0xffff7ab23914   148  lsr x10, x10, x0
0xffff7ab23918   152  tbz w10, #0, #+0x8 (addr 0xffff7ab23920)
0xffff7ab2391c   156  tbnz w10, #1, #+0x3c (addr 0xffff7ab23958)
0xffff7ab23920   160  ldp x2, x0, [jssp], #16
0xffff7ab23924   164  ldr x16, pc+1228 (addr 0x0000ffff7ab23df0)    ;; external reference (store_buffer_top)
0xffff7ab23928   168  ldr x10, [x16]
0xffff7ab2392c   172  str x6, [x10], #8
0xffff7ab23930   176  str x10, [x16]
0xffff7ab23934   180  tst x10, #0x1ffff
0xffff7ab23938   184  b.eq #+0x8 (addr 0xffff7ab23940)
0xffff7ab2393c   188  ret
0xffff7ab23940   192  sub csp, jssp, #0x8 (8)
0xffff7ab23944   196  str lr, [jssp, #-8]!
0xffff7ab23948   200  ldr x17, pc+1200 (addr 0x0000ffff7ab23df8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2394c   204  blr x17
0xffff7ab23950   208  ldr lr, [jssp], #8
0xffff7ab23954   212  ret
0xffff7ab23958   216  ldr x10, [x6]
0xffff7ab2395c   220  sub csp, jssp, #0x10 (16)
0xffff7ab23960   224  stp x1, x6, [jssp, #-16]!
0xffff7ab23964   228  ubfx x16, x10, #8, #12
0xffff7ab23968   232  and x0, x10, #0xfffffffffff00000
0xffff7ab2396c   236  add x0, x0, x16, lsl #2
0xffff7ab23970   240  ubfx x1, x10, #3, #5
0xffff7ab23974   244  ldr x6, [x0, #360]
0xffff7ab23978   248  lsr x6, x6, x1
0xffff7ab2397c   252  tbz w6, #0, #+0x40 (addr 0xffff7ab239bc)
0xffff7ab23980   256  ldp x1, x6, [jssp], #16
0xffff7ab23984   260  ldp x2, x0, [jssp], #16
0xffff7ab23988   264  ldr x16, pc+1144 (addr 0x0000ffff7ab23e00)    ;; external reference (store_buffer_top)
0xffff7ab2398c   268  ldr x10, [x16]
0xffff7ab23990   272  str x6, [x10], #8
0xffff7ab23994   276  str x10, [x16]
0xffff7ab23998   280  tst x10, #0x1ffff
0xffff7ab2399c   284  b.eq #+0x8 (addr 0xffff7ab239a4)
0xffff7ab239a0   288  ret
0xffff7ab239a4   292  sub csp, jssp, #0x8 (8)
0xffff7ab239a8   296  str lr, [jssp, #-8]!
0xffff7ab239ac   300  ldr x17, pc+1116 (addr 0x0000ffff7ab23e08)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab239b0   304  blr x17
0xffff7ab239b4   308  ldr lr, [jssp], #8
0xffff7ab239b8   312  ret
0xffff7ab239bc   316  ldp x1, x6, [jssp], #16
0xffff7ab239c0   320  sub csp, jssp, #0x78 (120)
0xffff7ab239c4   324  stp x14, x15, [jssp, #-32]!
0xffff7ab239c8   328  stp x18, lr, [jssp, #16]
0xffff7ab239cc   332  stp x9, x11, [jssp, #-32]!
0xffff7ab239d0   336  stp x12, x13, [jssp, #16]
0xffff7ab239d4   340  stp x5, x6, [jssp, #-32]!
0xffff7ab239d8   344  stp x7, x8, [jssp, #16]
0xffff7ab239dc   348  stp x1, x3, [jssp, #-24]!
0xffff7ab239e0   352  str x4, [jssp, #16]
0xffff7ab239e4   356  mov x0, x1
0xffff7ab239e8   360  mov x1, x6
0xffff7ab239ec   364  ldr x2, pc+1060 (addr 0x0000ffff7ab23e10)    ;; external reference (isolate)
0xffff7ab239f0   368  ldr x16, pc+1064 (addr 0x0000ffff7ab23e18)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab239f4   372  and csp, jssp, #0xfffffffffffffff0
0xffff7ab239f8   376  blr x16
0xffff7ab239fc   380  ldp x4, x5, [jssp, #16]
0xffff7ab23a00   384  ldp x1, x3, [jssp], #32
0xffff7ab23a04   388  ldp x8, x9, [jssp, #16]
0xffff7ab23a08   392  ldp x6, x7, [jssp], #32
0xffff7ab23a0c   396  ldp x13, x14, [jssp, #16]
0xffff7ab23a10   400  ldp x11, x12, [jssp], #32
0xffff7ab23a14   404  ldr lr, [jssp, #16]
0xffff7ab23a18   408  ldp x15, x18, [jssp], #24
0xffff7ab23a1c   412  ldp x2, x0, [jssp], #16
0xffff7ab23a20   416  ldr x16, pc+1024 (addr 0x0000ffff7ab23e20)    ;; external reference (store_buffer_top)
0xffff7ab23a24   420  ldr x10, [x16]
0xffff7ab23a28   424  str x6, [x10], #8
0xffff7ab23a2c   428  str x10, [x16]
0xffff7ab23a30   432  tst x10, #0x1ffff
0xffff7ab23a34   436  b.eq #+0x8 (addr 0xffff7ab23a3c)
0xffff7ab23a38   440  ret
0xffff7ab23a3c   444  sub csp, jssp, #0x8 (8)
0xffff7ab23a40   448  str lr, [jssp, #-8]!
0xffff7ab23a44   452  ldr x17, pc+996 (addr 0x0000ffff7ab23e28)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab23a48   456  blr x17
0xffff7ab23a4c   460  ldr lr, [jssp], #8
0xffff7ab23a50   464  ret
0xffff7ab23a54   468  and x10, x1, #0xfffffffffff00000
0xffff7ab23a58   472  ldr x0, [x10, #104]
0xffff7ab23a5c   476  subs x0, x0, #0x1 (1)
0xffff7ab23a60   480  str x0, [x10, #104]
0xffff7ab23a64   484  b.mi #+0x64 (addr 0xffff7ab23ac8)
0xffff7ab23a68   488  ubfx x16, x1, #8, #12
0xffff7ab23a6c   492  and x10, x1, #0xfffffffffff00000
0xffff7ab23a70   496  add x10, x10, x16, lsl #2
0xffff7ab23a74   500  ubfx x0, x1, #3, #5
0xffff7ab23a78   504  ldr x10, [x10, #360]
0xffff7ab23a7c   508  lsr x10, x10, x0
0xffff7ab23a80   512  tbz w10, #0, #+0x8 (addr 0xffff7ab23a88)
0xffff7ab23a84   516  tbnz w10, #1, #+0xc (addr 0xffff7ab23a90)
0xffff7ab23a88   520  ldp x2, x0, [jssp], #16
0xffff7ab23a8c   524  ret
0xffff7ab23a90   528  ldr x10, [x6]
0xffff7ab23a94   532  sub csp, jssp, #0x10 (16)
0xffff7ab23a98   536  stp x1, x6, [jssp, #-16]!
0xffff7ab23a9c   540  ubfx x16, x10, #8, #12
0xffff7ab23aa0   544  and x0, x10, #0xfffffffffff00000
0xffff7ab23aa4   548  add x0, x0, x16, lsl #2
0xffff7ab23aa8   552  ubfx x1, x10, #3, #5
0xffff7ab23aac   556  ldr x6, [x0, #360]
0xffff7ab23ab0   560  lsr x6, x6, x1
0xffff7ab23ab4   564  tbz w6, #0, #+0x10 (addr 0xffff7ab23ac4)
0xffff7ab23ab8   568  ldp x1, x6, [jssp], #16
0xffff7ab23abc   572  ldp x2, x0, [jssp], #16
0xffff7ab23ac0   576  ret
0xffff7ab23ac4   580  ldp x1, x6, [jssp], #16
0xffff7ab23ac8   584  sub csp, jssp, #0x78 (120)
0xffff7ab23acc   588  stp x14, x15, [jssp, #-32]!
0xffff7ab23ad0   592  stp x18, lr, [jssp, #16]
0xffff7ab23ad4   596  stp x9, x11, [jssp, #-32]!
0xffff7ab23ad8   600  stp x12, x13, [jssp, #16]
0xffff7ab23adc   604  stp x5, x6, [jssp, #-32]!
0xffff7ab23ae0   608  stp x7, x8, [jssp, #16]
0xffff7ab23ae4   612  stp x1, x3, [jssp, #-24]!
0xffff7ab23ae8   616  str x4, [jssp, #16]
0xffff7ab23aec   620  mov x0, x1
0xffff7ab23af0   624  mov x1, x6
0xffff7ab23af4   628  ldr x2, pc+828 (addr 0x0000ffff7ab23e30)    ;; external reference (isolate)
0xffff7ab23af8   632  ldr x16, pc+832 (addr 0x0000ffff7ab23e38)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab23afc   636  and csp, jssp, #0xfffffffffffffff0
0xffff7ab23b00   640  blr x16
0xffff7ab23b04   644  ldp x4, x5, [jssp, #16]
0xffff7ab23b08   648  ldp x1, x3, [jssp], #32
0xffff7ab23b0c   652  ldp x8, x9, [jssp, #16]
0xffff7ab23b10   656  ldp x6, x7, [jssp], #32
0xffff7ab23b14   660  ldp x13, x14, [jssp, #16]
0xffff7ab23b18   664  ldp x11, x12, [jssp], #32
0xffff7ab23b1c   668  ldr lr, [jssp, #16]
0xffff7ab23b20   672  ldp x15, x18, [jssp], #24
0xffff7ab23b24   676  ldp x2, x0, [jssp], #16
0xffff7ab23b28   680  ret
0xffff7ab23b2c   684  sub csp, jssp, #0x10 (16)
0xffff7ab23b30   688  stp x2, x0, [jssp, #-16]!
0xffff7ab23b34   692  ldr x10, [x6]
0xffff7ab23b38   696  and x16, x10, #0xfffffffffff00000
0xffff7ab23b3c   700  ldr x16, [x16, #8]
0xffff7ab23b40   704  tst x16, #0x18
0xffff7ab23b44   708  b.eq #+0x19c (addr 0xffff7ab23ce0)
0xffff7ab23b48   712  and x16, x1, #0xfffffffffff00000
0xffff7ab23b4c   716  ldr x16, [x16, #8]
0xffff7ab23b50   720  tst x16, #0x18
0xffff7ab23b54   724  b.ne #+0x18c (addr 0xffff7ab23ce0)
0xffff7ab23b58   728  and x10, x1, #0xfffffffffff00000
0xffff7ab23b5c   732  ldr x0, [x10, #104]
0xffff7ab23b60   736  subs x0, x0, #0x1 (1)
0xffff7ab23b64   740  str x0, [x10, #104]
0xffff7ab23b68   744  b.mi #+0xe4 (addr 0xffff7ab23c4c)
0xffff7ab23b6c   748  ubfx x16, x1, #8, #12
0xffff7ab23b70   752  and x10, x1, #0xfffffffffff00000
0xffff7ab23b74   756  add x10, x10, x16, lsl #2
0xffff7ab23b78   760  ubfx x0, x1, #3, #5
0xffff7ab23b7c   764  ldr x10, [x10, #360]
0xffff7ab23b80   768  lsr x10, x10, x0
0xffff7ab23b84   772  tbz w10, #0, #+0x8 (addr 0xffff7ab23b8c)
0xffff7ab23b88   776  tbnz w10, #1, #+0x3c (addr 0xffff7ab23bc4)
0xffff7ab23b8c   780  ldp x2, x0, [jssp], #16
0xffff7ab23b90   784  ldr x16, pc+688 (addr 0x0000ffff7ab23e40)    ;; external reference (store_buffer_top)
0xffff7ab23b94   788  ldr x10, [x16]
0xffff7ab23b98   792  str x6, [x10], #8
0xffff7ab23b9c   796  str x10, [x16]
0xffff7ab23ba0   800  tst x10, #0x1ffff
0xffff7ab23ba4   804  b.eq #+0x8 (addr 0xffff7ab23bac)
0xffff7ab23ba8   808  ret
0xffff7ab23bac   812  sub csp, jssp, #0x8 (8)
0xffff7ab23bb0   816  str lr, [jssp, #-8]!
0xffff7ab23bb4   820  ldr x17, pc+660 (addr 0x0000ffff7ab23e48)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab23bb8   824  blr x17
0xffff7ab23bbc   828  ldr lr, [jssp], #8
0xffff7ab23bc0   832  ret
0xffff7ab23bc4   836  ldr x10, [x6]
0xffff7ab23bc8   840  and x0, x10, #0xfffffffffff00000
0xffff7ab23bcc   844  ldr x0, [x0, #8]
0xffff7ab23bd0   848  tbz w0, #6, #+0x18 (addr 0xffff7ab23be8)
0xffff7ab23bd4   852  and x0, x1, #0xfffffffffff00000
0xffff7ab23bd8   856  ldr x0, [x0, #8]
0xffff7ab23bdc   860  movz x16, #0x58
0xffff7ab23be0   864  tst x0, x16
0xffff7ab23be4   868  b.eq #+0x68 (addr 0xffff7ab23c4c)
0xffff7ab23be8   872  sub csp, jssp, #0x10 (16)
0xffff7ab23bec   876  stp x1, x6, [jssp, #-16]!
0xffff7ab23bf0   880  ubfx x16, x10, #8, #12
0xffff7ab23bf4   884  and x0, x10, #0xfffffffffff00000
0xffff7ab23bf8   888  add x0, x0, x16, lsl #2
0xffff7ab23bfc   892  ubfx x1, x10, #3, #5
0xffff7ab23c00   896  ldr x6, [x0, #360]
0xffff7ab23c04   900  lsr x6, x6, x1
0xffff7ab23c08   904  tbz w6, #0, #+0x40 (addr 0xffff7ab23c48)
0xffff7ab23c0c   908  ldp x1, x6, [jssp], #16
0xffff7ab23c10   912  ldp x2, x0, [jssp], #16
0xffff7ab23c14   916  ldr x16, pc+572 (addr 0x0000ffff7ab23e50)    ;; external reference (store_buffer_top)
0xffff7ab23c18   920  ldr x10, [x16]
0xffff7ab23c1c   924  str x6, [x10], #8
0xffff7ab23c20   928  str x10, [x16]
0xffff7ab23c24   932  tst x10, #0x1ffff
0xffff7ab23c28   936  b.eq #+0x8 (addr 0xffff7ab23c30)
0xffff7ab23c2c   940  ret
0xffff7ab23c30   944  sub csp, jssp, #0x8 (8)
0xffff7ab23c34   948  str lr, [jssp, #-8]!
0xffff7ab23c38   952  ldr x17, pc+544 (addr 0x0000ffff7ab23e58)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab23c3c   956  blr x17
0xffff7ab23c40   960  ldr lr, [jssp], #8
0xffff7ab23c44   964  ret
0xffff7ab23c48   968  ldp x1, x6, [jssp], #16
0xffff7ab23c4c   972  sub csp, jssp, #0x78 (120)
0xffff7ab23c50   976  stp x14, x15, [jssp, #-32]!
0xffff7ab23c54   980  stp x18, lr, [jssp, #16]
0xffff7ab23c58   984  stp x9, x11, [jssp, #-32]!
0xffff7ab23c5c   988  stp x12, x13, [jssp, #16]
0xffff7ab23c60   992  stp x5, x6, [jssp, #-32]!
0xffff7ab23c64   996  stp x7, x8, [jssp, #16]
0xffff7ab23c68  1000  stp x1, x3, [jssp, #-24]!
0xffff7ab23c6c  1004  str x4, [jssp, #16]
0xffff7ab23c70  1008  mov x0, x1
0xffff7ab23c74  1012  mov x1, x6
0xffff7ab23c78  1016  ldr x2, pc+488 (addr 0x0000ffff7ab23e60)    ;; external reference (isolate)
0xffff7ab23c7c  1020  ldr x16, pc+492 (addr 0x0000ffff7ab23e68)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab23c80  1024  and csp, jssp, #0xfffffffffffffff0
0xffff7ab23c84  1028  blr x16
0xffff7ab23c88  1032  ldp x4, x5, [jssp, #16]
0xffff7ab23c8c  1036  ldp x1, x3, [jssp], #32
0xffff7ab23c90  1040  ldp x8, x9, [jssp, #16]
0xffff7ab23c94  1044  ldp x6, x7, [jssp], #32
0xffff7ab23c98  1048  ldp x13, x14, [jssp, #16]
0xffff7ab23c9c  1052  ldp x11, x12, [jssp], #32
0xffff7ab23ca0  1056  ldr lr, [jssp, #16]
0xffff7ab23ca4  1060  ldp x15, x18, [jssp], #24
0xffff7ab23ca8  1064  ldp x2, x0, [jssp], #16
0xffff7ab23cac  1068  ldr x16, pc+452 (addr 0x0000ffff7ab23e70)    ;; external reference (store_buffer_top)
0xffff7ab23cb0  1072  ldr x10, [x16]
0xffff7ab23cb4  1076  str x6, [x10], #8
0xffff7ab23cb8  1080  str x10, [x16]
0xffff7ab23cbc  1084  tst x10, #0x1ffff
0xffff7ab23cc0  1088  b.eq #+0x8 (addr 0xffff7ab23cc8)
0xffff7ab23cc4  1092  ret
0xffff7ab23cc8  1096  sub csp, jssp, #0x8 (8)
0xffff7ab23ccc  1100  str lr, [jssp, #-8]!
0xffff7ab23cd0  1104  ldr x17, pc+424 (addr 0x0000ffff7ab23e78)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab23cd4  1108  blr x17
0xffff7ab23cd8  1112  ldr lr, [jssp], #8
0xffff7ab23cdc  1116  ret
0xffff7ab23ce0  1120  and x10, x1, #0xfffffffffff00000
0xffff7ab23ce4  1124  ldr x0, [x10, #104]
0xffff7ab23ce8  1128  subs x0, x0, #0x1 (1)
0xffff7ab23cec  1132  str x0, [x10, #104]
0xffff7ab23cf0  1136  b.mi #+0x84 (addr 0xffff7ab23d74)
0xffff7ab23cf4  1140  ubfx x16, x1, #8, #12
0xffff7ab23cf8  1144  and x10, x1, #0xfffffffffff00000
0xffff7ab23cfc  1148  add x10, x10, x16, lsl #2
0xffff7ab23d00  1152  ubfx x0, x1, #3, #5
0xffff7ab23d04  1156  ldr x10, [x10, #360]
0xffff7ab23d08  1160  lsr x10, x10, x0
0xffff7ab23d0c  1164  tbz w10, #0, #+0x8 (addr 0xffff7ab23d14)
0xffff7ab23d10  1168  tbnz w10, #1, #+0xc (addr 0xffff7ab23d1c)
0xffff7ab23d14  1172  ldp x2, x0, [jssp], #16
0xffff7ab23d18  1176  ret
0xffff7ab23d1c  1180  ldr x10, [x6]
0xffff7ab23d20  1184  and x0, x10, #0xfffffffffff00000
0xffff7ab23d24  1188  ldr x0, [x0, #8]
0xffff7ab23d28  1192  tbz w0, #6, #+0x18 (addr 0xffff7ab23d40)
0xffff7ab23d2c  1196  and x0, x1, #0xfffffffffff00000
0xffff7ab23d30  1200  ldr x0, [x0, #8]
0xffff7ab23d34  1204  movz x16, #0x58
0xffff7ab23d38  1208  tst x0, x16
0xffff7ab23d3c  1212  b.eq #+0x38 (addr 0xffff7ab23d74)
0xffff7ab23d40  1216  sub csp, jssp, #0x10 (16)
0xffff7ab23d44  1220  stp x1, x6, [jssp, #-16]!
0xffff7ab23d48  1224  ubfx x16, x10, #8, #12
0xffff7ab23d4c  1228  and x0, x10, #0xfffffffffff00000
0xffff7ab23d50  1232  add x0, x0, x16, lsl #2
0xffff7ab23d54  1236  ubfx x1, x10, #3, #5
0xffff7ab23d58  1240  ldr x6, [x0, #360]
0xffff7ab23d5c  1244  lsr x6, x6, x1
0xffff7ab23d60  1248  tbz w6, #0, #+0x10 (addr 0xffff7ab23d70)
0xffff7ab23d64  1252  ldp x1, x6, [jssp], #16
0xffff7ab23d68  1256  ldp x2, x0, [jssp], #16
0xffff7ab23d6c  1260  ret
0xffff7ab23d70  1264  ldp x1, x6, [jssp], #16
0xffff7ab23d74  1268  sub csp, jssp, #0x78 (120)
0xffff7ab23d78  1272  stp x14, x15, [jssp, #-32]!
0xffff7ab23d7c  1276  stp x18, lr, [jssp, #16]
0xffff7ab23d80  1280  stp x9, x11, [jssp, #-32]!
0xffff7ab23d84  1284  stp x12, x13, [jssp, #16]
0xffff7ab23d88  1288  stp x5, x6, [jssp, #-32]!
0xffff7ab23d8c  1292  stp x7, x8, [jssp, #16]
0xffff7ab23d90  1296  stp x1, x3, [jssp, #-24]!
0xffff7ab23d94  1300  str x4, [jssp, #16]
0xffff7ab23d98  1304  mov x0, x1
0xffff7ab23d9c  1308  mov x1, x6
0xffff7ab23da0  1312  ldr x2, pc+224 (addr 0x0000ffff7ab23e80)    ;; external reference (isolate)
0xffff7ab23da4  1316  ldr x16, pc+228 (addr 0x0000ffff7ab23e88)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab23da8  1320  and csp, jssp, #0xfffffffffffffff0
0xffff7ab23dac  1324  blr x16
0xffff7ab23db0  1328  ldp x4, x5, [jssp, #16]
0xffff7ab23db4  1332  ldp x1, x3, [jssp], #32
0xffff7ab23db8  1336  ldp x8, x9, [jssp, #16]
0xffff7ab23dbc  1340  ldp x6, x7, [jssp], #32
0xffff7ab23dc0  1344  ldp x13, x14, [jssp, #16]
0xffff7ab23dc4  1348  ldp x11, x12, [jssp], #32
0xffff7ab23dc8  1352  ldr lr, [jssp, #16]
0xffff7ab23dcc  1356  ldp x15, x18, [jssp], #24
0xffff7ab23dd0  1360  ldp x2, x0, [jssp], #16
0xffff7ab23dd4  1364  ret
0xffff7ab23dd8  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab23ddc  1372  d63f03e0       constant
0xffff7ab23de0  1376  09abe8c0       constant
0xffff7ab23de4  1380  00000000       constant
0xffff7ab23de8  1384  7ab064c0       constant
0xffff7ab23dec  1388  0000ffff       constant
0xffff7ab23df0  1392  09abe8c0       constant
0xffff7ab23df4  1396  00000000       constant
0xffff7ab23df8  1400  7ab064c0       constant
0xffff7ab23dfc  1404  0000ffff       constant
0xffff7ab23e00  1408  09abe8c0       constant
0xffff7ab23e04  1412  00000000       constant
0xffff7ab23e08  1416  7ab064c0       constant
0xffff7ab23e0c  1420  0000ffff       constant
0xffff7ab23e10  1424  09abd2d0       constant
0xffff7ab23e14  1428  00000000       constant
0xffff7ab23e18  1432  00c2d958       constant
0xffff7ab23e1c  1436  00000000       constant
0xffff7ab23e20  1440  09abe8c0       constant
0xffff7ab23e24  1444  00000000       constant
0xffff7ab23e28  1448  7ab064c0       constant
0xffff7ab23e2c  1452  0000ffff       constant
0xffff7ab23e30  1456  09abd2d0       constant
0xffff7ab23e34  1460  00000000       constant
0xffff7ab23e38  1464  00c2d958       constant
0xffff7ab23e3c  1468  00000000       constant
0xffff7ab23e40  1472  09abe8c0       constant
0xffff7ab23e44  1476  00000000       constant
0xffff7ab23e48  1480  7ab064c0       constant
0xffff7ab23e4c  1484  0000ffff       constant
0xffff7ab23e50  1488  09abe8c0       constant
0xffff7ab23e54  1492  00000000       constant
0xffff7ab23e58  1496  7ab064c0       constant
0xffff7ab23e5c  1500  0000ffff       constant
0xffff7ab23e60  1504  09abd2d0       constant
0xffff7ab23e64  1508  00000000       constant
0xffff7ab23e68  1512  00c2d958       constant
0xffff7ab23e6c  1516  00000000       constant
0xffff7ab23e70  1520  09abe8c0       constant
0xffff7ab23e74  1524  00000000       constant
0xffff7ab23e78  1528  7ab064c0       constant
0xffff7ab23e7c  1532  0000ffff       constant
0xffff7ab23e80  1536  09abd2d0       constant
0xffff7ab23e84  1540  00000000       constant
0xffff7ab23e88  1544  00c2d958       constant
0xffff7ab23e8c  1548  00000000       constant


RelocInfo (size = 59)
0xffff7ab23888  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab238ac  code target (STUB)  (0xffff7ab064c0)
0xffff7ab23924  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab23948  code target (STUB)  (0xffff7ab064c0)
0xffff7ab23988  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab239ac  code target (STUB)  (0xffff7ab064c0)
0xffff7ab239ec  external reference (isolate)  (0x9abd2d0)
0xffff7ab239f0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab23a20  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab23a44  code target (STUB)  (0xffff7ab064c0)
0xffff7ab23af4  external reference (isolate)  (0x9abd2d0)
0xffff7ab23af8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab23b90  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab23bb4  code target (STUB)  (0xffff7ab064c0)
0xffff7ab23c14  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab23c38  code target (STUB)  (0xffff7ab064c0)
0xffff7ab23c78  external reference (isolate)  (0x9abd2d0)
0xffff7ab23c7c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab23cac  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab23cd0  code target (STUB)  (0xffff7ab064c0)
0xffff7ab23da0  external reference (isolate)  (0x9abd2d0)
0xffff7ab23da4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab23dd8  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0xffff7ab23f00     0  adr xzr, #+0x40 (addr 0xffff7ab23f40)
0xffff7ab23f04     4  adr xzr, #+0x2a8 (addr 0xffff7ab241ac)
0xffff7ab23f08     8  ldr x16, pc+1368 (addr 0x0000ffff7ab24460)    ;; external reference (store_buffer_top)
0xffff7ab23f0c    12  ldr x3, [x16]
0xffff7ab23f10    16  str x10, [x3], #8
0xffff7ab23f14    20  str x3, [x16]
0xffff7ab23f18    24  tst x3, #0x1ffff
0xffff7ab23f1c    28  b.eq #+0x8 (addr 0xffff7ab23f24)
0xffff7ab23f20    32  ret
0xffff7ab23f24    36  sub csp, jssp, #0x8 (8)
0xffff7ab23f28    40  str lr, [jssp, #-8]!
0xffff7ab23f2c    44  ldr x17, pc+1340 (addr 0x0000ffff7ab24468)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab23f30    48  blr x17
0xffff7ab23f34    52  ldr lr, [jssp], #8
0xffff7ab23f38    56  ret
0xffff7ab23f3c    60  ret
0xffff7ab23f40    64  sub csp, jssp, #0x10 (16)
0xffff7ab23f44    68  stp x2, x0, [jssp, #-16]!
0xffff7ab23f48    72  ldr x3, [x10]
0xffff7ab23f4c    76  and x16, x3, #0xfffffffffff00000
0xffff7ab23f50    80  ldr x16, [x16, #8]
0xffff7ab23f54    84  tst x16, #0x18
0xffff7ab23f58    88  b.eq #+0x17c (addr 0xffff7ab240d4)
0xffff7ab23f5c    92  and x16, x1, #0xfffffffffff00000
0xffff7ab23f60    96  ldr x16, [x16, #8]
0xffff7ab23f64   100  tst x16, #0x18
0xffff7ab23f68   104  b.ne #+0x16c (addr 0xffff7ab240d4)
0xffff7ab23f6c   108  and x3, x1, #0xfffffffffff00000
0xffff7ab23f70   112  ldr x0, [x3, #104]
0xffff7ab23f74   116  subs x0, x0, #0x1 (1)
0xffff7ab23f78   120  str x0, [x3, #104]
0xffff7ab23f7c   124  b.mi #+0xc4 (addr 0xffff7ab24040)
0xffff7ab23f80   128  ubfx x16, x1, #8, #12
0xffff7ab23f84   132  and x3, x1, #0xfffffffffff00000
0xffff7ab23f88   136  add x3, x3, x16, lsl #2
0xffff7ab23f8c   140  ubfx x0, x1, #3, #5
0xffff7ab23f90   144  ldr x3, [x3, #360]
0xffff7ab23f94   148  lsr x3, x3, x0
0xffff7ab23f98   152  tbz w3, #0, #+0x8 (addr 0xffff7ab23fa0)
0xffff7ab23f9c   156  tbnz w3, #1, #+0x3c (addr 0xffff7ab23fd8)
0xffff7ab23fa0   160  ldp x2, x0, [jssp], #16
0xffff7ab23fa4   164  ldr x16, pc+1228 (addr 0x0000ffff7ab24470)    ;; external reference (store_buffer_top)
0xffff7ab23fa8   168  ldr x3, [x16]
0xffff7ab23fac   172  str x10, [x3], #8
0xffff7ab23fb0   176  str x3, [x16]
0xffff7ab23fb4   180  tst x3, #0x1ffff
0xffff7ab23fb8   184  b.eq #+0x8 (addr 0xffff7ab23fc0)
0xffff7ab23fbc   188  ret
0xffff7ab23fc0   192  sub csp, jssp, #0x8 (8)
0xffff7ab23fc4   196  str lr, [jssp, #-8]!
0xffff7ab23fc8   200  ldr x17, pc+1200 (addr 0x0000ffff7ab24478)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab23fcc   204  blr x17
0xffff7ab23fd0   208  ldr lr, [jssp], #8
0xffff7ab23fd4   212  ret
0xffff7ab23fd8   216  ldr x3, [x10]
0xffff7ab23fdc   220  sub csp, jssp, #0x10 (16)
0xffff7ab23fe0   224  stp x1, x10, [jssp, #-16]!
0xffff7ab23fe4   228  ubfx x16, x3, #8, #12
0xffff7ab23fe8   232  and x0, x3, #0xfffffffffff00000
0xffff7ab23fec   236  add x0, x0, x16, lsl #2
0xffff7ab23ff0   240  ubfx x1, x3, #3, #5
0xffff7ab23ff4   244  ldr x10, [x0, #360]
0xffff7ab23ff8   248  lsr x10, x10, x1
0xffff7ab23ffc   252  tbz w10, #0, #+0x40 (addr 0xffff7ab2403c)
0xffff7ab24000   256  ldp x1, x10, [jssp], #16
0xffff7ab24004   260  ldp x2, x0, [jssp], #16
0xffff7ab24008   264  ldr x16, pc+1144 (addr 0x0000ffff7ab24480)    ;; external reference (store_buffer_top)
0xffff7ab2400c   268  ldr x3, [x16]
0xffff7ab24010   272  str x10, [x3], #8
0xffff7ab24014   276  str x3, [x16]
0xffff7ab24018   280  tst x3, #0x1ffff
0xffff7ab2401c   284  b.eq #+0x8 (addr 0xffff7ab24024)
0xffff7ab24020   288  ret
0xffff7ab24024   292  sub csp, jssp, #0x8 (8)
0xffff7ab24028   296  str lr, [jssp, #-8]!
0xffff7ab2402c   300  ldr x17, pc+1116 (addr 0x0000ffff7ab24488)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab24030   304  blr x17
0xffff7ab24034   308  ldr lr, [jssp], #8
0xffff7ab24038   312  ret
0xffff7ab2403c   316  ldp x1, x10, [jssp], #16
0xffff7ab24040   320  sub csp, jssp, #0x78 (120)
0xffff7ab24044   324  stp x14, x15, [jssp, #-32]!
0xffff7ab24048   328  stp x18, lr, [jssp, #16]
0xffff7ab2404c   332  stp x10, x11, [jssp, #-32]!
0xffff7ab24050   336  stp x12, x13, [jssp, #16]
0xffff7ab24054   340  stp x6, x7, [jssp, #-32]!
0xffff7ab24058   344  stp x8, x9, [jssp, #16]
0xffff7ab2405c   348  stp x1, x4, [jssp, #-24]!
0xffff7ab24060   352  str x5, [jssp, #16]
0xffff7ab24064   356  mov x0, x1
0xffff7ab24068   360  mov x1, x10
0xffff7ab2406c   364  ldr x2, pc+1060 (addr 0x0000ffff7ab24490)    ;; external reference (isolate)
0xffff7ab24070   368  ldr x16, pc+1064 (addr 0x0000ffff7ab24498)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab24074   372  and csp, jssp, #0xfffffffffffffff0
0xffff7ab24078   376  blr x16
0xffff7ab2407c   380  ldp x5, x6, [jssp, #16]
0xffff7ab24080   384  ldp x1, x4, [jssp], #32
0xffff7ab24084   388  ldp x9, x10, [jssp, #16]
0xffff7ab24088   392  ldp x7, x8, [jssp], #32
0xffff7ab2408c   396  ldp x13, x14, [jssp, #16]
0xffff7ab24090   400  ldp x11, x12, [jssp], #32
0xffff7ab24094   404  ldr lr, [jssp, #16]
0xffff7ab24098   408  ldp x15, x18, [jssp], #24
0xffff7ab2409c   412  ldp x2, x0, [jssp], #16
0xffff7ab240a0   416  ldr x16, pc+1024 (addr 0x0000ffff7ab244a0)    ;; external reference (store_buffer_top)
0xffff7ab240a4   420  ldr x3, [x16]
0xffff7ab240a8   424  str x10, [x3], #8
0xffff7ab240ac   428  str x3, [x16]
0xffff7ab240b0   432  tst x3, #0x1ffff
0xffff7ab240b4   436  b.eq #+0x8 (addr 0xffff7ab240bc)
0xffff7ab240b8   440  ret
0xffff7ab240bc   444  sub csp, jssp, #0x8 (8)
0xffff7ab240c0   448  str lr, [jssp, #-8]!
0xffff7ab240c4   452  ldr x17, pc+996 (addr 0x0000ffff7ab244a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab240c8   456  blr x17
0xffff7ab240cc   460  ldr lr, [jssp], #8
0xffff7ab240d0   464  ret
0xffff7ab240d4   468  and x3, x1, #0xfffffffffff00000
0xffff7ab240d8   472  ldr x0, [x3, #104]
0xffff7ab240dc   476  subs x0, x0, #0x1 (1)
0xffff7ab240e0   480  str x0, [x3, #104]
0xffff7ab240e4   484  b.mi #+0x64 (addr 0xffff7ab24148)
0xffff7ab240e8   488  ubfx x16, x1, #8, #12
0xffff7ab240ec   492  and x3, x1, #0xfffffffffff00000
0xffff7ab240f0   496  add x3, x3, x16, lsl #2
0xffff7ab240f4   500  ubfx x0, x1, #3, #5
0xffff7ab240f8   504  ldr x3, [x3, #360]
0xffff7ab240fc   508  lsr x3, x3, x0
0xffff7ab24100   512  tbz w3, #0, #+0x8 (addr 0xffff7ab24108)
0xffff7ab24104   516  tbnz w3, #1, #+0xc (addr 0xffff7ab24110)
0xffff7ab24108   520  ldp x2, x0, [jssp], #16
0xffff7ab2410c   524  ret
0xffff7ab24110   528  ldr x3, [x10]
0xffff7ab24114   532  sub csp, jssp, #0x10 (16)
0xffff7ab24118   536  stp x1, x10, [jssp, #-16]!
0xffff7ab2411c   540  ubfx x16, x3, #8, #12
0xffff7ab24120   544  and x0, x3, #0xfffffffffff00000
0xffff7ab24124   548  add x0, x0, x16, lsl #2
0xffff7ab24128   552  ubfx x1, x3, #3, #5
0xffff7ab2412c   556  ldr x10, [x0, #360]
0xffff7ab24130   560  lsr x10, x10, x1
0xffff7ab24134   564  tbz w10, #0, #+0x10 (addr 0xffff7ab24144)
0xffff7ab24138   568  ldp x1, x10, [jssp], #16
0xffff7ab2413c   572  ldp x2, x0, [jssp], #16
0xffff7ab24140   576  ret
0xffff7ab24144   580  ldp x1, x10, [jssp], #16
0xffff7ab24148   584  sub csp, jssp, #0x78 (120)
0xffff7ab2414c   588  stp x14, x15, [jssp, #-32]!
0xffff7ab24150   592  stp x18, lr, [jssp, #16]
0xffff7ab24154   596  stp x10, x11, [jssp, #-32]!
0xffff7ab24158   600  stp x12, x13, [jssp, #16]
0xffff7ab2415c   604  stp x6, x7, [jssp, #-32]!
0xffff7ab24160   608  stp x8, x9, [jssp, #16]
0xffff7ab24164   612  stp x1, x4, [jssp, #-24]!
0xffff7ab24168   616  str x5, [jssp, #16]
0xffff7ab2416c   620  mov x0, x1
0xffff7ab24170   624  mov x1, x10
0xffff7ab24174   628  ldr x2, pc+828 (addr 0x0000ffff7ab244b0)    ;; external reference (isolate)
0xffff7ab24178   632  ldr x16, pc+832 (addr 0x0000ffff7ab244b8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2417c   636  and csp, jssp, #0xfffffffffffffff0
0xffff7ab24180   640  blr x16
0xffff7ab24184   644  ldp x5, x6, [jssp, #16]
0xffff7ab24188   648  ldp x1, x4, [jssp], #32
0xffff7ab2418c   652  ldp x9, x10, [jssp, #16]
0xffff7ab24190   656  ldp x7, x8, [jssp], #32
0xffff7ab24194   660  ldp x13, x14, [jssp, #16]
0xffff7ab24198   664  ldp x11, x12, [jssp], #32
0xffff7ab2419c   668  ldr lr, [jssp, #16]
0xffff7ab241a0   672  ldp x15, x18, [jssp], #24
0xffff7ab241a4   676  ldp x2, x0, [jssp], #16
0xffff7ab241a8   680  ret
0xffff7ab241ac   684  sub csp, jssp, #0x10 (16)
0xffff7ab241b0   688  stp x2, x0, [jssp, #-16]!
0xffff7ab241b4   692  ldr x3, [x10]
0xffff7ab241b8   696  and x16, x3, #0xfffffffffff00000
0xffff7ab241bc   700  ldr x16, [x16, #8]
0xffff7ab241c0   704  tst x16, #0x18
0xffff7ab241c4   708  b.eq #+0x19c (addr 0xffff7ab24360)
0xffff7ab241c8   712  and x16, x1, #0xfffffffffff00000
0xffff7ab241cc   716  ldr x16, [x16, #8]
0xffff7ab241d0   720  tst x16, #0x18
0xffff7ab241d4   724  b.ne #+0x18c (addr 0xffff7ab24360)
0xffff7ab241d8   728  and x3, x1, #0xfffffffffff00000
0xffff7ab241dc   732  ldr x0, [x3, #104]
0xffff7ab241e0   736  subs x0, x0, #0x1 (1)
0xffff7ab241e4   740  str x0, [x3, #104]
0xffff7ab241e8   744  b.mi #+0xe4 (addr 0xffff7ab242cc)
0xffff7ab241ec   748  ubfx x16, x1, #8, #12
0xffff7ab241f0   752  and x3, x1, #0xfffffffffff00000
0xffff7ab241f4   756  add x3, x3, x16, lsl #2
0xffff7ab241f8   760  ubfx x0, x1, #3, #5
0xffff7ab241fc   764  ldr x3, [x3, #360]
0xffff7ab24200   768  lsr x3, x3, x0
0xffff7ab24204   772  tbz w3, #0, #+0x8 (addr 0xffff7ab2420c)
0xffff7ab24208   776  tbnz w3, #1, #+0x3c (addr 0xffff7ab24244)
0xffff7ab2420c   780  ldp x2, x0, [jssp], #16
0xffff7ab24210   784  ldr x16, pc+688 (addr 0x0000ffff7ab244c0)    ;; external reference (store_buffer_top)
0xffff7ab24214   788  ldr x3, [x16]
0xffff7ab24218   792  str x10, [x3], #8
0xffff7ab2421c   796  str x3, [x16]
0xffff7ab24220   800  tst x3, #0x1ffff
0xffff7ab24224   804  b.eq #+0x8 (addr 0xffff7ab2422c)
0xffff7ab24228   808  ret
0xffff7ab2422c   812  sub csp, jssp, #0x8 (8)
0xffff7ab24230   816  str lr, [jssp, #-8]!
0xffff7ab24234   820  ldr x17, pc+660 (addr 0x0000ffff7ab244c8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab24238   824  blr x17
0xffff7ab2423c   828  ldr lr, [jssp], #8
0xffff7ab24240   832  ret
0xffff7ab24244   836  ldr x3, [x10]
0xffff7ab24248   840  and x0, x3, #0xfffffffffff00000
0xffff7ab2424c   844  ldr x0, [x0, #8]
0xffff7ab24250   848  tbz w0, #6, #+0x18 (addr 0xffff7ab24268)
0xffff7ab24254   852  and x0, x1, #0xfffffffffff00000
0xffff7ab24258   856  ldr x0, [x0, #8]
0xffff7ab2425c   860  movz x16, #0x58
0xffff7ab24260   864  tst x0, x16
0xffff7ab24264   868  b.eq #+0x68 (addr 0xffff7ab242cc)
0xffff7ab24268   872  sub csp, jssp, #0x10 (16)
0xffff7ab2426c   876  stp x1, x10, [jssp, #-16]!
0xffff7ab24270   880  ubfx x16, x3, #8, #12
0xffff7ab24274   884  and x0, x3, #0xfffffffffff00000
0xffff7ab24278   888  add x0, x0, x16, lsl #2
0xffff7ab2427c   892  ubfx x1, x3, #3, #5
0xffff7ab24280   896  ldr x10, [x0, #360]
0xffff7ab24284   900  lsr x10, x10, x1
0xffff7ab24288   904  tbz w10, #0, #+0x40 (addr 0xffff7ab242c8)
0xffff7ab2428c   908  ldp x1, x10, [jssp], #16
0xffff7ab24290   912  ldp x2, x0, [jssp], #16
0xffff7ab24294   916  ldr x16, pc+572 (addr 0x0000ffff7ab244d0)    ;; external reference (store_buffer_top)
0xffff7ab24298   920  ldr x3, [x16]
0xffff7ab2429c   924  str x10, [x3], #8
0xffff7ab242a0   928  str x3, [x16]
0xffff7ab242a4   932  tst x3, #0x1ffff
0xffff7ab242a8   936  b.eq #+0x8 (addr 0xffff7ab242b0)
0xffff7ab242ac   940  ret
0xffff7ab242b0   944  sub csp, jssp, #0x8 (8)
0xffff7ab242b4   948  str lr, [jssp, #-8]!
0xffff7ab242b8   952  ldr x17, pc+544 (addr 0x0000ffff7ab244d8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab242bc   956  blr x17
0xffff7ab242c0   960  ldr lr, [jssp], #8
0xffff7ab242c4   964  ret
0xffff7ab242c8   968  ldp x1, x10, [jssp], #16
0xffff7ab242cc   972  sub csp, jssp, #0x78 (120)
0xffff7ab242d0   976  stp x14, x15, [jssp, #-32]!
0xffff7ab242d4   980  stp x18, lr, [jssp, #16]
0xffff7ab242d8   984  stp x10, x11, [jssp, #-32]!
0xffff7ab242dc   988  stp x12, x13, [jssp, #16]
0xffff7ab242e0   992  stp x6, x7, [jssp, #-32]!
0xffff7ab242e4   996  stp x8, x9, [jssp, #16]
0xffff7ab242e8  1000  stp x1, x4, [jssp, #-24]!
0xffff7ab242ec  1004  str x5, [jssp, #16]
0xffff7ab242f0  1008  mov x0, x1
0xffff7ab242f4  1012  mov x1, x10
0xffff7ab242f8  1016  ldr x2, pc+488 (addr 0x0000ffff7ab244e0)    ;; external reference (isolate)
0xffff7ab242fc  1020  ldr x16, pc+492 (addr 0x0000ffff7ab244e8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab24300  1024  and csp, jssp, #0xfffffffffffffff0
0xffff7ab24304  1028  blr x16
0xffff7ab24308  1032  ldp x5, x6, [jssp, #16]
0xffff7ab2430c  1036  ldp x1, x4, [jssp], #32
0xffff7ab24310  1040  ldp x9, x10, [jssp, #16]
0xffff7ab24314  1044  ldp x7, x8, [jssp], #32
0xffff7ab24318  1048  ldp x13, x14, [jssp, #16]
0xffff7ab2431c  1052  ldp x11, x12, [jssp], #32
0xffff7ab24320  1056  ldr lr, [jssp, #16]
0xffff7ab24324  1060  ldp x15, x18, [jssp], #24
0xffff7ab24328  1064  ldp x2, x0, [jssp], #16
0xffff7ab2432c  1068  ldr x16, pc+452 (addr 0x0000ffff7ab244f0)    ;; external reference (store_buffer_top)
0xffff7ab24330  1072  ldr x3, [x16]
0xffff7ab24334  1076  str x10, [x3], #8
0xffff7ab24338  1080  str x3, [x16]
0xffff7ab2433c  1084  tst x3, #0x1ffff
0xffff7ab24340  1088  b.eq #+0x8 (addr 0xffff7ab24348)
0xffff7ab24344  1092  ret
0xffff7ab24348  1096  sub csp, jssp, #0x8 (8)
0xffff7ab2434c  1100  str lr, [jssp, #-8]!
0xffff7ab24350  1104  ldr x17, pc+424 (addr 0x0000ffff7ab244f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab24354  1108  blr x17
0xffff7ab24358  1112  ldr lr, [jssp], #8
0xffff7ab2435c  1116  ret
0xffff7ab24360  1120  and x3, x1, #0xfffffffffff00000
0xffff7ab24364  1124  ldr x0, [x3, #104]
0xffff7ab24368  1128  subs x0, x0, #0x1 (1)
0xffff7ab2436c  1132  str x0, [x3, #104]
0xffff7ab24370  1136  b.mi #+0x84 (addr 0xffff7ab243f4)
0xffff7ab24374  1140  ubfx x16, x1, #8, #12
0xffff7ab24378  1144  and x3, x1, #0xfffffffffff00000
0xffff7ab2437c  1148  add x3, x3, x16, lsl #2
0xffff7ab24380  1152  ubfx x0, x1, #3, #5
0xffff7ab24384  1156  ldr x3, [x3, #360]
0xffff7ab24388  1160  lsr x3, x3, x0
0xffff7ab2438c  1164  tbz w3, #0, #+0x8 (addr 0xffff7ab24394)
0xffff7ab24390  1168  tbnz w3, #1, #+0xc (addr 0xffff7ab2439c)
0xffff7ab24394  1172  ldp x2, x0, [jssp], #16
0xffff7ab24398  1176  ret
0xffff7ab2439c  1180  ldr x3, [x10]
0xffff7ab243a0  1184  and x0, x3, #0xfffffffffff00000
0xffff7ab243a4  1188  ldr x0, [x0, #8]
0xffff7ab243a8  1192  tbz w0, #6, #+0x18 (addr 0xffff7ab243c0)
0xffff7ab243ac  1196  and x0, x1, #0xfffffffffff00000
0xffff7ab243b0  1200  ldr x0, [x0, #8]
0xffff7ab243b4  1204  movz x16, #0x58
0xffff7ab243b8  1208  tst x0, x16
0xffff7ab243bc  1212  b.eq #+0x38 (addr 0xffff7ab243f4)
0xffff7ab243c0  1216  sub csp, jssp, #0x10 (16)
0xffff7ab243c4  1220  stp x1, x10, [jssp, #-16]!
0xffff7ab243c8  1224  ubfx x16, x3, #8, #12
0xffff7ab243cc  1228  and x0, x3, #0xfffffffffff00000
0xffff7ab243d0  1232  add x0, x0, x16, lsl #2
0xffff7ab243d4  1236  ubfx x1, x3, #3, #5
0xffff7ab243d8  1240  ldr x10, [x0, #360]
0xffff7ab243dc  1244  lsr x10, x10, x1
0xffff7ab243e0  1248  tbz w10, #0, #+0x10 (addr 0xffff7ab243f0)
0xffff7ab243e4  1252  ldp x1, x10, [jssp], #16
0xffff7ab243e8  1256  ldp x2, x0, [jssp], #16
0xffff7ab243ec  1260  ret
0xffff7ab243f0  1264  ldp x1, x10, [jssp], #16
0xffff7ab243f4  1268  sub csp, jssp, #0x78 (120)
0xffff7ab243f8  1272  stp x14, x15, [jssp, #-32]!
0xffff7ab243fc  1276  stp x18, lr, [jssp, #16]
0xffff7ab24400  1280  stp x10, x11, [jssp, #-32]!
0xffff7ab24404  1284  stp x12, x13, [jssp, #16]
0xffff7ab24408  1288  stp x6, x7, [jssp, #-32]!
0xffff7ab2440c  1292  stp x8, x9, [jssp, #16]
0xffff7ab24410  1296  stp x1, x4, [jssp, #-24]!
0xffff7ab24414  1300  str x5, [jssp, #16]
0xffff7ab24418  1304  mov x0, x1
0xffff7ab2441c  1308  mov x1, x10
0xffff7ab24420  1312  ldr x2, pc+224 (addr 0x0000ffff7ab24500)    ;; external reference (isolate)
0xffff7ab24424  1316  ldr x16, pc+228 (addr 0x0000ffff7ab24508)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab24428  1320  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2442c  1324  blr x16
0xffff7ab24430  1328  ldp x5, x6, [jssp, #16]
0xffff7ab24434  1332  ldp x1, x4, [jssp], #32
0xffff7ab24438  1336  ldp x9, x10, [jssp, #16]
0xffff7ab2443c  1340  ldp x7, x8, [jssp], #32
0xffff7ab24440  1344  ldp x13, x14, [jssp, #16]
0xffff7ab24444  1348  ldp x11, x12, [jssp], #32
0xffff7ab24448  1352  ldr lr, [jssp, #16]
0xffff7ab2444c  1356  ldp x15, x18, [jssp], #24
0xffff7ab24450  1360  ldp x2, x0, [jssp], #16
0xffff7ab24454  1364  ret
0xffff7ab24458  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab2445c  1372  d63f03e0       constant
0xffff7ab24460  1376  09abe8c0       constant
0xffff7ab24464  1380  00000000       constant
0xffff7ab24468  1384  7ab064c0       constant
0xffff7ab2446c  1388  0000ffff       constant
0xffff7ab24470  1392  09abe8c0       constant
0xffff7ab24474  1396  00000000       constant
0xffff7ab24478  1400  7ab064c0       constant
0xffff7ab2447c  1404  0000ffff       constant
0xffff7ab24480  1408  09abe8c0       constant
0xffff7ab24484  1412  00000000       constant
0xffff7ab24488  1416  7ab064c0       constant
0xffff7ab2448c  1420  0000ffff       constant
0xffff7ab24490  1424  09abd2d0       constant
0xffff7ab24494  1428  00000000       constant
0xffff7ab24498  1432  00c2d958       constant
0xffff7ab2449c  1436  00000000       constant
0xffff7ab244a0  1440  09abe8c0       constant
0xffff7ab244a4  1444  00000000       constant
0xffff7ab244a8  1448  7ab064c0       constant
0xffff7ab244ac  1452  0000ffff       constant
0xffff7ab244b0  1456  09abd2d0       constant
0xffff7ab244b4  1460  00000000       constant
0xffff7ab244b8  1464  00c2d958       constant
0xffff7ab244bc  1468  00000000       constant
0xffff7ab244c0  1472  09abe8c0       constant
0xffff7ab244c4  1476  00000000       constant
0xffff7ab244c8  1480  7ab064c0       constant
0xffff7ab244cc  1484  0000ffff       constant
0xffff7ab244d0  1488  09abe8c0       constant
0xffff7ab244d4  1492  00000000       constant
0xffff7ab244d8  1496  7ab064c0       constant
0xffff7ab244dc  1500  0000ffff       constant
0xffff7ab244e0  1504  09abd2d0       constant
0xffff7ab244e4  1508  00000000       constant
0xffff7ab244e8  1512  00c2d958       constant
0xffff7ab244ec  1516  00000000       constant
0xffff7ab244f0  1520  09abe8c0       constant
0xffff7ab244f4  1524  00000000       constant
0xffff7ab244f8  1528  7ab064c0       constant
0xffff7ab244fc  1532  0000ffff       constant
0xffff7ab24500  1536  09abd2d0       constant
0xffff7ab24504  1540  00000000       constant
0xffff7ab24508  1544  00c2d958       constant
0xffff7ab2450c  1548  00000000       constant


RelocInfo (size = 59)
0xffff7ab23f08  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab23f2c  code target (STUB)  (0xffff7ab064c0)
0xffff7ab23fa4  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab23fc8  code target (STUB)  (0xffff7ab064c0)
0xffff7ab24008  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2402c  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2406c  external reference (isolate)  (0x9abd2d0)
0xffff7ab24070  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab240a0  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab240c4  code target (STUB)  (0xffff7ab064c0)
0xffff7ab24174  external reference (isolate)  (0x9abd2d0)
0xffff7ab24178  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab24210  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab24234  code target (STUB)  (0xffff7ab064c0)
0xffff7ab24294  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab242b8  code target (STUB)  (0xffff7ab064c0)
0xffff7ab242f8  external reference (isolate)  (0x9abd2d0)
0xffff7ab242fc  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2432c  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab24350  code target (STUB)  (0xffff7ab064c0)
0xffff7ab24420  external reference (isolate)  (0x9abd2d0)
0xffff7ab24424  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab24458  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0xffff7ab24580     0  adr xzr, #+0x40 (addr 0xffff7ab245c0)
0xffff7ab24584     4  adr xzr, #+0x2a8 (addr 0xffff7ab2482c)
0xffff7ab24588     8  ldr x16, pc+1368 (addr 0x0000ffff7ab24ae0)    ;; external reference (store_buffer_top)
0xffff7ab2458c    12  ldr x5, [x16]
0xffff7ab24590    16  str x13, [x5], #8
0xffff7ab24594    20  str x5, [x16]
0xffff7ab24598    24  tst x5, #0x1ffff
0xffff7ab2459c    28  b.eq #+0x8 (addr 0xffff7ab245a4)
0xffff7ab245a0    32  ret
0xffff7ab245a4    36  sub csp, jssp, #0x8 (8)
0xffff7ab245a8    40  str lr, [jssp, #-8]!
0xffff7ab245ac    44  ldr x17, pc+1340 (addr 0x0000ffff7ab24ae8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab245b0    48  blr x17
0xffff7ab245b4    52  ldr lr, [jssp], #8
0xffff7ab245b8    56  ret
0xffff7ab245bc    60  ret
0xffff7ab245c0    64  sub csp, jssp, #0x10 (16)
0xffff7ab245c4    68  stp x1, x0, [jssp, #-16]!
0xffff7ab245c8    72  ldr x5, [x13]
0xffff7ab245cc    76  and x16, x5, #0xfffffffffff00000
0xffff7ab245d0    80  ldr x16, [x16, #8]
0xffff7ab245d4    84  tst x16, #0x18
0xffff7ab245d8    88  b.eq #+0x17c (addr 0xffff7ab24754)
0xffff7ab245dc    92  and x16, x7, #0xfffffffffff00000
0xffff7ab245e0    96  ldr x16, [x16, #8]
0xffff7ab245e4   100  tst x16, #0x18
0xffff7ab245e8   104  b.ne #+0x16c (addr 0xffff7ab24754)
0xffff7ab245ec   108  and x5, x7, #0xfffffffffff00000
0xffff7ab245f0   112  ldr x0, [x5, #104]
0xffff7ab245f4   116  subs x0, x0, #0x1 (1)
0xffff7ab245f8   120  str x0, [x5, #104]
0xffff7ab245fc   124  b.mi #+0xc4 (addr 0xffff7ab246c0)
0xffff7ab24600   128  ubfx x16, x7, #8, #12
0xffff7ab24604   132  and x5, x7, #0xfffffffffff00000
0xffff7ab24608   136  add x5, x5, x16, lsl #2
0xffff7ab2460c   140  ubfx x0, x7, #3, #5
0xffff7ab24610   144  ldr x5, [x5, #360]
0xffff7ab24614   148  lsr x5, x5, x0
0xffff7ab24618   152  tbz w5, #0, #+0x8 (addr 0xffff7ab24620)
0xffff7ab2461c   156  tbnz w5, #1, #+0x3c (addr 0xffff7ab24658)
0xffff7ab24620   160  ldp x1, x0, [jssp], #16
0xffff7ab24624   164  ldr x16, pc+1228 (addr 0x0000ffff7ab24af0)    ;; external reference (store_buffer_top)
0xffff7ab24628   168  ldr x5, [x16]
0xffff7ab2462c   172  str x13, [x5], #8
0xffff7ab24630   176  str x5, [x16]
0xffff7ab24634   180  tst x5, #0x1ffff
0xffff7ab24638   184  b.eq #+0x8 (addr 0xffff7ab24640)
0xffff7ab2463c   188  ret
0xffff7ab24640   192  sub csp, jssp, #0x8 (8)
0xffff7ab24644   196  str lr, [jssp, #-8]!
0xffff7ab24648   200  ldr x17, pc+1200 (addr 0x0000ffff7ab24af8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2464c   204  blr x17
0xffff7ab24650   208  ldr lr, [jssp], #8
0xffff7ab24654   212  ret
0xffff7ab24658   216  ldr x5, [x13]
0xffff7ab2465c   220  sub csp, jssp, #0x10 (16)
0xffff7ab24660   224  stp x7, x13, [jssp, #-16]!
0xffff7ab24664   228  ubfx x16, x5, #8, #12
0xffff7ab24668   232  and x0, x5, #0xfffffffffff00000
0xffff7ab2466c   236  add x0, x0, x16, lsl #2
0xffff7ab24670   240  ubfx x7, x5, #3, #5
0xffff7ab24674   244  ldr x13, [x0, #360]
0xffff7ab24678   248  lsr x13, x13, x7
0xffff7ab2467c   252  tbz w13, #0, #+0x40 (addr 0xffff7ab246bc)
0xffff7ab24680   256  ldp x7, x13, [jssp], #16
0xffff7ab24684   260  ldp x1, x0, [jssp], #16
0xffff7ab24688   264  ldr x16, pc+1144 (addr 0x0000ffff7ab24b00)    ;; external reference (store_buffer_top)
0xffff7ab2468c   268  ldr x5, [x16]
0xffff7ab24690   272  str x13, [x5], #8
0xffff7ab24694   276  str x5, [x16]
0xffff7ab24698   280  tst x5, #0x1ffff
0xffff7ab2469c   284  b.eq #+0x8 (addr 0xffff7ab246a4)
0xffff7ab246a0   288  ret
0xffff7ab246a4   292  sub csp, jssp, #0x8 (8)
0xffff7ab246a8   296  str lr, [jssp, #-8]!
0xffff7ab246ac   300  ldr x17, pc+1116 (addr 0x0000ffff7ab24b08)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab246b0   304  blr x17
0xffff7ab246b4   308  ldr lr, [jssp], #8
0xffff7ab246b8   312  ret
0xffff7ab246bc   316  ldp x7, x13, [jssp], #16
0xffff7ab246c0   320  sub csp, jssp, #0x78 (120)
0xffff7ab246c4   324  stp x14, x15, [jssp, #-32]!
0xffff7ab246c8   328  stp x18, lr, [jssp, #16]
0xffff7ab246cc   332  stp x10, x11, [jssp, #-32]!
0xffff7ab246d0   336  stp x12, x13, [jssp, #16]
0xffff7ab246d4   340  stp x6, x7, [jssp, #-32]!
0xffff7ab246d8   344  stp x8, x9, [jssp, #16]
0xffff7ab246dc   348  stp x2, x3, [jssp, #-24]!
0xffff7ab246e0   352  str x4, [jssp, #16]
0xffff7ab246e4   356  mov x0, x7
0xffff7ab246e8   360  mov x1, x13
0xffff7ab246ec   364  ldr x2, pc+1060 (addr 0x0000ffff7ab24b10)    ;; external reference (isolate)
0xffff7ab246f0   368  ldr x16, pc+1064 (addr 0x0000ffff7ab24b18)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab246f4   372  and csp, jssp, #0xfffffffffffffff0
0xffff7ab246f8   376  blr x16
0xffff7ab246fc   380  ldp x4, x6, [jssp, #16]
0xffff7ab24700   384  ldp x2, x3, [jssp], #32
0xffff7ab24704   388  ldp x9, x10, [jssp, #16]
0xffff7ab24708   392  ldp x7, x8, [jssp], #32
0xffff7ab2470c   396  ldp x13, x14, [jssp, #16]
0xffff7ab24710   400  ldp x11, x12, [jssp], #32
0xffff7ab24714   404  ldr lr, [jssp, #16]
0xffff7ab24718   408  ldp x15, x18, [jssp], #24
0xffff7ab2471c   412  ldp x1, x0, [jssp], #16
0xffff7ab24720   416  ldr x16, pc+1024 (addr 0x0000ffff7ab24b20)    ;; external reference (store_buffer_top)
0xffff7ab24724   420  ldr x5, [x16]
0xffff7ab24728   424  str x13, [x5], #8
0xffff7ab2472c   428  str x5, [x16]
0xffff7ab24730   432  tst x5, #0x1ffff
0xffff7ab24734   436  b.eq #+0x8 (addr 0xffff7ab2473c)
0xffff7ab24738   440  ret
0xffff7ab2473c   444  sub csp, jssp, #0x8 (8)
0xffff7ab24740   448  str lr, [jssp, #-8]!
0xffff7ab24744   452  ldr x17, pc+996 (addr 0x0000ffff7ab24b28)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab24748   456  blr x17
0xffff7ab2474c   460  ldr lr, [jssp], #8
0xffff7ab24750   464  ret
0xffff7ab24754   468  and x5, x7, #0xfffffffffff00000
0xffff7ab24758   472  ldr x0, [x5, #104]
0xffff7ab2475c   476  subs x0, x0, #0x1 (1)
0xffff7ab24760   480  str x0, [x5, #104]
0xffff7ab24764   484  b.mi #+0x64 (addr 0xffff7ab247c8)
0xffff7ab24768   488  ubfx x16, x7, #8, #12
0xffff7ab2476c   492  and x5, x7, #0xfffffffffff00000
0xffff7ab24770   496  add x5, x5, x16, lsl #2
0xffff7ab24774   500  ubfx x0, x7, #3, #5
0xffff7ab24778   504  ldr x5, [x5, #360]
0xffff7ab2477c   508  lsr x5, x5, x0
0xffff7ab24780   512  tbz w5, #0, #+0x8 (addr 0xffff7ab24788)
0xffff7ab24784   516  tbnz w5, #1, #+0xc (addr 0xffff7ab24790)
0xffff7ab24788   520  ldp x1, x0, [jssp], #16
0xffff7ab2478c   524  ret
0xffff7ab24790   528  ldr x5, [x13]
0xffff7ab24794   532  sub csp, jssp, #0x10 (16)
0xffff7ab24798   536  stp x7, x13, [jssp, #-16]!
0xffff7ab2479c   540  ubfx x16, x5, #8, #12
0xffff7ab247a0   544  and x0, x5, #0xfffffffffff00000
0xffff7ab247a4   548  add x0, x0, x16, lsl #2
0xffff7ab247a8   552  ubfx x7, x5, #3, #5
0xffff7ab247ac   556  ldr x13, [x0, #360]
0xffff7ab247b0   560  lsr x13, x13, x7
0xffff7ab247b4   564  tbz w13, #0, #+0x10 (addr 0xffff7ab247c4)
0xffff7ab247b8   568  ldp x7, x13, [jssp], #16
0xffff7ab247bc   572  ldp x1, x0, [jssp], #16
0xffff7ab247c0   576  ret
0xffff7ab247c4   580  ldp x7, x13, [jssp], #16
0xffff7ab247c8   584  sub csp, jssp, #0x78 (120)
0xffff7ab247cc   588  stp x14, x15, [jssp, #-32]!
0xffff7ab247d0   592  stp x18, lr, [jssp, #16]
0xffff7ab247d4   596  stp x10, x11, [jssp, #-32]!
0xffff7ab247d8   600  stp x12, x13, [jssp, #16]
0xffff7ab247dc   604  stp x6, x7, [jssp, #-32]!
0xffff7ab247e0   608  stp x8, x9, [jssp, #16]
0xffff7ab247e4   612  stp x2, x3, [jssp, #-24]!
0xffff7ab247e8   616  str x4, [jssp, #16]
0xffff7ab247ec   620  mov x0, x7
0xffff7ab247f0   624  mov x1, x13
0xffff7ab247f4   628  ldr x2, pc+828 (addr 0x0000ffff7ab24b30)    ;; external reference (isolate)
0xffff7ab247f8   632  ldr x16, pc+832 (addr 0x0000ffff7ab24b38)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab247fc   636  and csp, jssp, #0xfffffffffffffff0
0xffff7ab24800   640  blr x16
0xffff7ab24804   644  ldp x4, x6, [jssp, #16]
0xffff7ab24808   648  ldp x2, x3, [jssp], #32
0xffff7ab2480c   652  ldp x9, x10, [jssp, #16]
0xffff7ab24810   656  ldp x7, x8, [jssp], #32
0xffff7ab24814   660  ldp x13, x14, [jssp, #16]
0xffff7ab24818   664  ldp x11, x12, [jssp], #32
0xffff7ab2481c   668  ldr lr, [jssp, #16]
0xffff7ab24820   672  ldp x15, x18, [jssp], #24
0xffff7ab24824   676  ldp x1, x0, [jssp], #16
0xffff7ab24828   680  ret
0xffff7ab2482c   684  sub csp, jssp, #0x10 (16)
0xffff7ab24830   688  stp x1, x0, [jssp, #-16]!
0xffff7ab24834   692  ldr x5, [x13]
0xffff7ab24838   696  and x16, x5, #0xfffffffffff00000
0xffff7ab2483c   700  ldr x16, [x16, #8]
0xffff7ab24840   704  tst x16, #0x18
0xffff7ab24844   708  b.eq #+0x19c (addr 0xffff7ab249e0)
0xffff7ab24848   712  and x16, x7, #0xfffffffffff00000
0xffff7ab2484c   716  ldr x16, [x16, #8]
0xffff7ab24850   720  tst x16, #0x18
0xffff7ab24854   724  b.ne #+0x18c (addr 0xffff7ab249e0)
0xffff7ab24858   728  and x5, x7, #0xfffffffffff00000
0xffff7ab2485c   732  ldr x0, [x5, #104]
0xffff7ab24860   736  subs x0, x0, #0x1 (1)
0xffff7ab24864   740  str x0, [x5, #104]
0xffff7ab24868   744  b.mi #+0xe4 (addr 0xffff7ab2494c)
0xffff7ab2486c   748  ubfx x16, x7, #8, #12
0xffff7ab24870   752  and x5, x7, #0xfffffffffff00000
0xffff7ab24874   756  add x5, x5, x16, lsl #2
0xffff7ab24878   760  ubfx x0, x7, #3, #5
0xffff7ab2487c   764  ldr x5, [x5, #360]
0xffff7ab24880   768  lsr x5, x5, x0
0xffff7ab24884   772  tbz w5, #0, #+0x8 (addr 0xffff7ab2488c)
0xffff7ab24888   776  tbnz w5, #1, #+0x3c (addr 0xffff7ab248c4)
0xffff7ab2488c   780  ldp x1, x0, [jssp], #16
0xffff7ab24890   784  ldr x16, pc+688 (addr 0x0000ffff7ab24b40)    ;; external reference (store_buffer_top)
0xffff7ab24894   788  ldr x5, [x16]
0xffff7ab24898   792  str x13, [x5], #8
0xffff7ab2489c   796  str x5, [x16]
0xffff7ab248a0   800  tst x5, #0x1ffff
0xffff7ab248a4   804  b.eq #+0x8 (addr 0xffff7ab248ac)
0xffff7ab248a8   808  ret
0xffff7ab248ac   812  sub csp, jssp, #0x8 (8)
0xffff7ab248b0   816  str lr, [jssp, #-8]!
0xffff7ab248b4   820  ldr x17, pc+660 (addr 0x0000ffff7ab24b48)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab248b8   824  blr x17
0xffff7ab248bc   828  ldr lr, [jssp], #8
0xffff7ab248c0   832  ret
0xffff7ab248c4   836  ldr x5, [x13]
0xffff7ab248c8   840  and x0, x5, #0xfffffffffff00000
0xffff7ab248cc   844  ldr x0, [x0, #8]
0xffff7ab248d0   848  tbz w0, #6, #+0x18 (addr 0xffff7ab248e8)
0xffff7ab248d4   852  and x0, x7, #0xfffffffffff00000
0xffff7ab248d8   856  ldr x0, [x0, #8]
0xffff7ab248dc   860  movz x16, #0x58
0xffff7ab248e0   864  tst x0, x16
0xffff7ab248e4   868  b.eq #+0x68 (addr 0xffff7ab2494c)
0xffff7ab248e8   872  sub csp, jssp, #0x10 (16)
0xffff7ab248ec   876  stp x7, x13, [jssp, #-16]!
0xffff7ab248f0   880  ubfx x16, x5, #8, #12
0xffff7ab248f4   884  and x0, x5, #0xfffffffffff00000
0xffff7ab248f8   888  add x0, x0, x16, lsl #2
0xffff7ab248fc   892  ubfx x7, x5, #3, #5
0xffff7ab24900   896  ldr x13, [x0, #360]
0xffff7ab24904   900  lsr x13, x13, x7
0xffff7ab24908   904  tbz w13, #0, #+0x40 (addr 0xffff7ab24948)
0xffff7ab2490c   908  ldp x7, x13, [jssp], #16
0xffff7ab24910   912  ldp x1, x0, [jssp], #16
0xffff7ab24914   916  ldr x16, pc+572 (addr 0x0000ffff7ab24b50)    ;; external reference (store_buffer_top)
0xffff7ab24918   920  ldr x5, [x16]
0xffff7ab2491c   924  str x13, [x5], #8
0xffff7ab24920   928  str x5, [x16]
0xffff7ab24924   932  tst x5, #0x1ffff
0xffff7ab24928   936  b.eq #+0x8 (addr 0xffff7ab24930)
0xffff7ab2492c   940  ret
0xffff7ab24930   944  sub csp, jssp, #0x8 (8)
0xffff7ab24934   948  str lr, [jssp, #-8]!
0xffff7ab24938   952  ldr x17, pc+544 (addr 0x0000ffff7ab24b58)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2493c   956  blr x17
0xffff7ab24940   960  ldr lr, [jssp], #8
0xffff7ab24944   964  ret
0xffff7ab24948   968  ldp x7, x13, [jssp], #16
0xffff7ab2494c   972  sub csp, jssp, #0x78 (120)
0xffff7ab24950   976  stp x14, x15, [jssp, #-32]!
0xffff7ab24954   980  stp x18, lr, [jssp, #16]
0xffff7ab24958   984  stp x10, x11, [jssp, #-32]!
0xffff7ab2495c   988  stp x12, x13, [jssp, #16]
0xffff7ab24960   992  stp x6, x7, [jssp, #-32]!
0xffff7ab24964   996  stp x8, x9, [jssp, #16]
0xffff7ab24968  1000  stp x2, x3, [jssp, #-24]!
0xffff7ab2496c  1004  str x4, [jssp, #16]
0xffff7ab24970  1008  mov x0, x7
0xffff7ab24974  1012  mov x1, x13
0xffff7ab24978  1016  ldr x2, pc+488 (addr 0x0000ffff7ab24b60)    ;; external reference (isolate)
0xffff7ab2497c  1020  ldr x16, pc+492 (addr 0x0000ffff7ab24b68)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab24980  1024  and csp, jssp, #0xfffffffffffffff0
0xffff7ab24984  1028  blr x16
0xffff7ab24988  1032  ldp x4, x6, [jssp, #16]
0xffff7ab2498c  1036  ldp x2, x3, [jssp], #32
0xffff7ab24990  1040  ldp x9, x10, [jssp, #16]
0xffff7ab24994  1044  ldp x7, x8, [jssp], #32
0xffff7ab24998  1048  ldp x13, x14, [jssp, #16]
0xffff7ab2499c  1052  ldp x11, x12, [jssp], #32
0xffff7ab249a0  1056  ldr lr, [jssp, #16]
0xffff7ab249a4  1060  ldp x15, x18, [jssp], #24
0xffff7ab249a8  1064  ldp x1, x0, [jssp], #16
0xffff7ab249ac  1068  ldr x16, pc+452 (addr 0x0000ffff7ab24b70)    ;; external reference (store_buffer_top)
0xffff7ab249b0  1072  ldr x5, [x16]
0xffff7ab249b4  1076  str x13, [x5], #8
0xffff7ab249b8  1080  str x5, [x16]
0xffff7ab249bc  1084  tst x5, #0x1ffff
0xffff7ab249c0  1088  b.eq #+0x8 (addr 0xffff7ab249c8)
0xffff7ab249c4  1092  ret
0xffff7ab249c8  1096  sub csp, jssp, #0x8 (8)
0xffff7ab249cc  1100  str lr, [jssp, #-8]!
0xffff7ab249d0  1104  ldr x17, pc+424 (addr 0x0000ffff7ab24b78)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab249d4  1108  blr x17
0xffff7ab249d8  1112  ldr lr, [jssp], #8
0xffff7ab249dc  1116  ret
0xffff7ab249e0  1120  and x5, x7, #0xfffffffffff00000
0xffff7ab249e4  1124  ldr x0, [x5, #104]
0xffff7ab249e8  1128  subs x0, x0, #0x1 (1)
0xffff7ab249ec  1132  str x0, [x5, #104]
0xffff7ab249f0  1136  b.mi #+0x84 (addr 0xffff7ab24a74)
0xffff7ab249f4  1140  ubfx x16, x7, #8, #12
0xffff7ab249f8  1144  and x5, x7, #0xfffffffffff00000
0xffff7ab249fc  1148  add x5, x5, x16, lsl #2
0xffff7ab24a00  1152  ubfx x0, x7, #3, #5
0xffff7ab24a04  1156  ldr x5, [x5, #360]
0xffff7ab24a08  1160  lsr x5, x5, x0
0xffff7ab24a0c  1164  tbz w5, #0, #+0x8 (addr 0xffff7ab24a14)
0xffff7ab24a10  1168  tbnz w5, #1, #+0xc (addr 0xffff7ab24a1c)
0xffff7ab24a14  1172  ldp x1, x0, [jssp], #16
0xffff7ab24a18  1176  ret
0xffff7ab24a1c  1180  ldr x5, [x13]
0xffff7ab24a20  1184  and x0, x5, #0xfffffffffff00000
0xffff7ab24a24  1188  ldr x0, [x0, #8]
0xffff7ab24a28  1192  tbz w0, #6, #+0x18 (addr 0xffff7ab24a40)
0xffff7ab24a2c  1196  and x0, x7, #0xfffffffffff00000
0xffff7ab24a30  1200  ldr x0, [x0, #8]
0xffff7ab24a34  1204  movz x16, #0x58
0xffff7ab24a38  1208  tst x0, x16
0xffff7ab24a3c  1212  b.eq #+0x38 (addr 0xffff7ab24a74)
0xffff7ab24a40  1216  sub csp, jssp, #0x10 (16)
0xffff7ab24a44  1220  stp x7, x13, [jssp, #-16]!
0xffff7ab24a48  1224  ubfx x16, x5, #8, #12
0xffff7ab24a4c  1228  and x0, x5, #0xfffffffffff00000
0xffff7ab24a50  1232  add x0, x0, x16, lsl #2
0xffff7ab24a54  1236  ubfx x7, x5, #3, #5
0xffff7ab24a58  1240  ldr x13, [x0, #360]
0xffff7ab24a5c  1244  lsr x13, x13, x7
0xffff7ab24a60  1248  tbz w13, #0, #+0x10 (addr 0xffff7ab24a70)
0xffff7ab24a64  1252  ldp x7, x13, [jssp], #16
0xffff7ab24a68  1256  ldp x1, x0, [jssp], #16
0xffff7ab24a6c  1260  ret
0xffff7ab24a70  1264  ldp x7, x13, [jssp], #16
0xffff7ab24a74  1268  sub csp, jssp, #0x78 (120)
0xffff7ab24a78  1272  stp x14, x15, [jssp, #-32]!
0xffff7ab24a7c  1276  stp x18, lr, [jssp, #16]
0xffff7ab24a80  1280  stp x10, x11, [jssp, #-32]!
0xffff7ab24a84  1284  stp x12, x13, [jssp, #16]
0xffff7ab24a88  1288  stp x6, x7, [jssp, #-32]!
0xffff7ab24a8c  1292  stp x8, x9, [jssp, #16]
0xffff7ab24a90  1296  stp x2, x3, [jssp, #-24]!
0xffff7ab24a94  1300  str x4, [jssp, #16]
0xffff7ab24a98  1304  mov x0, x7
0xffff7ab24a9c  1308  mov x1, x13
0xffff7ab24aa0  1312  ldr x2, pc+224 (addr 0x0000ffff7ab24b80)    ;; external reference (isolate)
0xffff7ab24aa4  1316  ldr x16, pc+228 (addr 0x0000ffff7ab24b88)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab24aa8  1320  and csp, jssp, #0xfffffffffffffff0
0xffff7ab24aac  1324  blr x16
0xffff7ab24ab0  1328  ldp x4, x6, [jssp, #16]
0xffff7ab24ab4  1332  ldp x2, x3, [jssp], #32
0xffff7ab24ab8  1336  ldp x9, x10, [jssp, #16]
0xffff7ab24abc  1340  ldp x7, x8, [jssp], #32
0xffff7ab24ac0  1344  ldp x13, x14, [jssp, #16]
0xffff7ab24ac4  1348  ldp x11, x12, [jssp], #32
0xffff7ab24ac8  1352  ldr lr, [jssp, #16]
0xffff7ab24acc  1356  ldp x15, x18, [jssp], #24
0xffff7ab24ad0  1360  ldp x1, x0, [jssp], #16
0xffff7ab24ad4  1364  ret
0xffff7ab24ad8  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab24adc  1372  d63f03e0       constant
0xffff7ab24ae0  1376  09abe8c0       constant
0xffff7ab24ae4  1380  00000000       constant
0xffff7ab24ae8  1384  7ab064c0       constant
0xffff7ab24aec  1388  0000ffff       constant
0xffff7ab24af0  1392  09abe8c0       constant
0xffff7ab24af4  1396  00000000       constant
0xffff7ab24af8  1400  7ab064c0       constant
0xffff7ab24afc  1404  0000ffff       constant
0xffff7ab24b00  1408  09abe8c0       constant
0xffff7ab24b04  1412  00000000       constant
0xffff7ab24b08  1416  7ab064c0       constant
0xffff7ab24b0c  1420  0000ffff       constant
0xffff7ab24b10  1424  09abd2d0       constant
0xffff7ab24b14  1428  00000000       constant
0xffff7ab24b18  1432  00c2d958       constant
0xffff7ab24b1c  1436  00000000       constant
0xffff7ab24b20  1440  09abe8c0       constant
0xffff7ab24b24  1444  00000000       constant
0xffff7ab24b28  1448  7ab064c0       constant
0xffff7ab24b2c  1452  0000ffff       constant
0xffff7ab24b30  1456  09abd2d0       constant
0xffff7ab24b34  1460  00000000       constant
0xffff7ab24b38  1464  00c2d958       constant
0xffff7ab24b3c  1468  00000000       constant
0xffff7ab24b40  1472  09abe8c0       constant
0xffff7ab24b44  1476  00000000       constant
0xffff7ab24b48  1480  7ab064c0       constant
0xffff7ab24b4c  1484  0000ffff       constant
0xffff7ab24b50  1488  09abe8c0       constant
0xffff7ab24b54  1492  00000000       constant
0xffff7ab24b58  1496  7ab064c0       constant
0xffff7ab24b5c  1500  0000ffff       constant
0xffff7ab24b60  1504  09abd2d0       constant
0xffff7ab24b64  1508  00000000       constant
0xffff7ab24b68  1512  00c2d958       constant
0xffff7ab24b6c  1516  00000000       constant
0xffff7ab24b70  1520  09abe8c0       constant
0xffff7ab24b74  1524  00000000       constant
0xffff7ab24b78  1528  7ab064c0       constant
0xffff7ab24b7c  1532  0000ffff       constant
0xffff7ab24b80  1536  09abd2d0       constant
0xffff7ab24b84  1540  00000000       constant
0xffff7ab24b88  1544  00c2d958       constant
0xffff7ab24b8c  1548  00000000       constant


RelocInfo (size = 59)
0xffff7ab24588  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab245ac  code target (STUB)  (0xffff7ab064c0)
0xffff7ab24624  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab24648  code target (STUB)  (0xffff7ab064c0)
0xffff7ab24688  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab246ac  code target (STUB)  (0xffff7ab064c0)
0xffff7ab246ec  external reference (isolate)  (0x9abd2d0)
0xffff7ab246f0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab24720  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab24744  code target (STUB)  (0xffff7ab064c0)
0xffff7ab247f4  external reference (isolate)  (0x9abd2d0)
0xffff7ab247f8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab24890  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab248b4  code target (STUB)  (0xffff7ab064c0)
0xffff7ab24914  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab24938  code target (STUB)  (0xffff7ab064c0)
0xffff7ab24978  external reference (isolate)  (0x9abd2d0)
0xffff7ab2497c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab249ac  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab249d0  code target (STUB)  (0xffff7ab064c0)
0xffff7ab24aa0  external reference (isolate)  (0x9abd2d0)
0xffff7ab24aa4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab24ad8  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0xffff7ab24c00     0  adr xzr, #+0x40 (addr 0xffff7ab24c40)
0xffff7ab24c04     4  adr xzr, #+0x2a8 (addr 0xffff7ab24eac)
0xffff7ab24c08     8  ldr x16, pc+1368 (addr 0x0000ffff7ab25160)    ;; external reference (store_buffer_top)
0xffff7ab24c0c    12  ldr x7, [x16]
0xffff7ab24c10    16  str x13, [x7], #8
0xffff7ab24c14    20  str x7, [x16]
0xffff7ab24c18    24  tst x7, #0x1ffff
0xffff7ab24c1c    28  b.eq #+0x8 (addr 0xffff7ab24c24)
0xffff7ab24c20    32  ret
0xffff7ab24c24    36  sub csp, jssp, #0x8 (8)
0xffff7ab24c28    40  str lr, [jssp, #-8]!
0xffff7ab24c2c    44  ldr x17, pc+1340 (addr 0x0000ffff7ab25168)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab24c30    48  blr x17
0xffff7ab24c34    52  ldr lr, [jssp], #8
0xffff7ab24c38    56  ret
0xffff7ab24c3c    60  ret
0xffff7ab24c40    64  sub csp, jssp, #0x10 (16)
0xffff7ab24c44    68  stp x2, x0, [jssp, #-16]!
0xffff7ab24c48    72  ldr x7, [x13]
0xffff7ab24c4c    76  and x16, x7, #0xfffffffffff00000
0xffff7ab24c50    80  ldr x16, [x16, #8]
0xffff7ab24c54    84  tst x16, #0x18
0xffff7ab24c58    88  b.eq #+0x17c (addr 0xffff7ab24dd4)
0xffff7ab24c5c    92  and x16, x1, #0xfffffffffff00000
0xffff7ab24c60    96  ldr x16, [x16, #8]
0xffff7ab24c64   100  tst x16, #0x18
0xffff7ab24c68   104  b.ne #+0x16c (addr 0xffff7ab24dd4)
0xffff7ab24c6c   108  and x7, x1, #0xfffffffffff00000
0xffff7ab24c70   112  ldr x0, [x7, #104]
0xffff7ab24c74   116  subs x0, x0, #0x1 (1)
0xffff7ab24c78   120  str x0, [x7, #104]
0xffff7ab24c7c   124  b.mi #+0xc4 (addr 0xffff7ab24d40)
0xffff7ab24c80   128  ubfx x16, x1, #8, #12
0xffff7ab24c84   132  and x7, x1, #0xfffffffffff00000
0xffff7ab24c88   136  add x7, x7, x16, lsl #2
0xffff7ab24c8c   140  ubfx x0, x1, #3, #5
0xffff7ab24c90   144  ldr x7, [x7, #360]
0xffff7ab24c94   148  lsr x7, x7, x0
0xffff7ab24c98   152  tbz w7, #0, #+0x8 (addr 0xffff7ab24ca0)
0xffff7ab24c9c   156  tbnz w7, #1, #+0x3c (addr 0xffff7ab24cd8)
0xffff7ab24ca0   160  ldp x2, x0, [jssp], #16
0xffff7ab24ca4   164  ldr x16, pc+1228 (addr 0x0000ffff7ab25170)    ;; external reference (store_buffer_top)
0xffff7ab24ca8   168  ldr x7, [x16]
0xffff7ab24cac   172  str x13, [x7], #8
0xffff7ab24cb0   176  str x7, [x16]
0xffff7ab24cb4   180  tst x7, #0x1ffff
0xffff7ab24cb8   184  b.eq #+0x8 (addr 0xffff7ab24cc0)
0xffff7ab24cbc   188  ret
0xffff7ab24cc0   192  sub csp, jssp, #0x8 (8)
0xffff7ab24cc4   196  str lr, [jssp, #-8]!
0xffff7ab24cc8   200  ldr x17, pc+1200 (addr 0x0000ffff7ab25178)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab24ccc   204  blr x17
0xffff7ab24cd0   208  ldr lr, [jssp], #8
0xffff7ab24cd4   212  ret
0xffff7ab24cd8   216  ldr x7, [x13]
0xffff7ab24cdc   220  sub csp, jssp, #0x10 (16)
0xffff7ab24ce0   224  stp x1, x13, [jssp, #-16]!
0xffff7ab24ce4   228  ubfx x16, x7, #8, #12
0xffff7ab24ce8   232  and x0, x7, #0xfffffffffff00000
0xffff7ab24cec   236  add x0, x0, x16, lsl #2
0xffff7ab24cf0   240  ubfx x1, x7, #3, #5
0xffff7ab24cf4   244  ldr x13, [x0, #360]
0xffff7ab24cf8   248  lsr x13, x13, x1
0xffff7ab24cfc   252  tbz w13, #0, #+0x40 (addr 0xffff7ab24d3c)
0xffff7ab24d00   256  ldp x1, x13, [jssp], #16
0xffff7ab24d04   260  ldp x2, x0, [jssp], #16
0xffff7ab24d08   264  ldr x16, pc+1144 (addr 0x0000ffff7ab25180)    ;; external reference (store_buffer_top)
0xffff7ab24d0c   268  ldr x7, [x16]
0xffff7ab24d10   272  str x13, [x7], #8
0xffff7ab24d14   276  str x7, [x16]
0xffff7ab24d18   280  tst x7, #0x1ffff
0xffff7ab24d1c   284  b.eq #+0x8 (addr 0xffff7ab24d24)
0xffff7ab24d20   288  ret
0xffff7ab24d24   292  sub csp, jssp, #0x8 (8)
0xffff7ab24d28   296  str lr, [jssp, #-8]!
0xffff7ab24d2c   300  ldr x17, pc+1116 (addr 0x0000ffff7ab25188)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab24d30   304  blr x17
0xffff7ab24d34   308  ldr lr, [jssp], #8
0xffff7ab24d38   312  ret
0xffff7ab24d3c   316  ldp x1, x13, [jssp], #16
0xffff7ab24d40   320  sub csp, jssp, #0x78 (120)
0xffff7ab24d44   324  stp x14, x15, [jssp, #-32]!
0xffff7ab24d48   328  stp x18, lr, [jssp, #16]
0xffff7ab24d4c   332  stp x10, x11, [jssp, #-32]!
0xffff7ab24d50   336  stp x12, x13, [jssp, #16]
0xffff7ab24d54   340  stp x5, x6, [jssp, #-32]!
0xffff7ab24d58   344  stp x8, x9, [jssp, #16]
0xffff7ab24d5c   348  stp x1, x3, [jssp, #-24]!
0xffff7ab24d60   352  str x4, [jssp, #16]
0xffff7ab24d64   356  mov x0, x1
0xffff7ab24d68   360  mov x1, x13
0xffff7ab24d6c   364  ldr x2, pc+1060 (addr 0x0000ffff7ab25190)    ;; external reference (isolate)
0xffff7ab24d70   368  ldr x16, pc+1064 (addr 0x0000ffff7ab25198)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab24d74   372  and csp, jssp, #0xfffffffffffffff0
0xffff7ab24d78   376  blr x16
0xffff7ab24d7c   380  ldp x4, x5, [jssp, #16]
0xffff7ab24d80   384  ldp x1, x3, [jssp], #32
0xffff7ab24d84   388  ldp x9, x10, [jssp, #16]
0xffff7ab24d88   392  ldp x6, x8, [jssp], #32
0xffff7ab24d8c   396  ldp x13, x14, [jssp, #16]
0xffff7ab24d90   400  ldp x11, x12, [jssp], #32
0xffff7ab24d94   404  ldr lr, [jssp, #16]
0xffff7ab24d98   408  ldp x15, x18, [jssp], #24
0xffff7ab24d9c   412  ldp x2, x0, [jssp], #16
0xffff7ab24da0   416  ldr x16, pc+1024 (addr 0x0000ffff7ab251a0)    ;; external reference (store_buffer_top)
0xffff7ab24da4   420  ldr x7, [x16]
0xffff7ab24da8   424  str x13, [x7], #8
0xffff7ab24dac   428  str x7, [x16]
0xffff7ab24db0   432  tst x7, #0x1ffff
0xffff7ab24db4   436  b.eq #+0x8 (addr 0xffff7ab24dbc)
0xffff7ab24db8   440  ret
0xffff7ab24dbc   444  sub csp, jssp, #0x8 (8)
0xffff7ab24dc0   448  str lr, [jssp, #-8]!
0xffff7ab24dc4   452  ldr x17, pc+996 (addr 0x0000ffff7ab251a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab24dc8   456  blr x17
0xffff7ab24dcc   460  ldr lr, [jssp], #8
0xffff7ab24dd0   464  ret
0xffff7ab24dd4   468  and x7, x1, #0xfffffffffff00000
0xffff7ab24dd8   472  ldr x0, [x7, #104]
0xffff7ab24ddc   476  subs x0, x0, #0x1 (1)
0xffff7ab24de0   480  str x0, [x7, #104]
0xffff7ab24de4   484  b.mi #+0x64 (addr 0xffff7ab24e48)
0xffff7ab24de8   488  ubfx x16, x1, #8, #12
0xffff7ab24dec   492  and x7, x1, #0xfffffffffff00000
0xffff7ab24df0   496  add x7, x7, x16, lsl #2
0xffff7ab24df4   500  ubfx x0, x1, #3, #5
0xffff7ab24df8   504  ldr x7, [x7, #360]
0xffff7ab24dfc   508  lsr x7, x7, x0
0xffff7ab24e00   512  tbz w7, #0, #+0x8 (addr 0xffff7ab24e08)
0xffff7ab24e04   516  tbnz w7, #1, #+0xc (addr 0xffff7ab24e10)
0xffff7ab24e08   520  ldp x2, x0, [jssp], #16
0xffff7ab24e0c   524  ret
0xffff7ab24e10   528  ldr x7, [x13]
0xffff7ab24e14   532  sub csp, jssp, #0x10 (16)
0xffff7ab24e18   536  stp x1, x13, [jssp, #-16]!
0xffff7ab24e1c   540  ubfx x16, x7, #8, #12
0xffff7ab24e20   544  and x0, x7, #0xfffffffffff00000
0xffff7ab24e24   548  add x0, x0, x16, lsl #2
0xffff7ab24e28   552  ubfx x1, x7, #3, #5
0xffff7ab24e2c   556  ldr x13, [x0, #360]
0xffff7ab24e30   560  lsr x13, x13, x1
0xffff7ab24e34   564  tbz w13, #0, #+0x10 (addr 0xffff7ab24e44)
0xffff7ab24e38   568  ldp x1, x13, [jssp], #16
0xffff7ab24e3c   572  ldp x2, x0, [jssp], #16
0xffff7ab24e40   576  ret
0xffff7ab24e44   580  ldp x1, x13, [jssp], #16
0xffff7ab24e48   584  sub csp, jssp, #0x78 (120)
0xffff7ab24e4c   588  stp x14, x15, [jssp, #-32]!
0xffff7ab24e50   592  stp x18, lr, [jssp, #16]
0xffff7ab24e54   596  stp x10, x11, [jssp, #-32]!
0xffff7ab24e58   600  stp x12, x13, [jssp, #16]
0xffff7ab24e5c   604  stp x5, x6, [jssp, #-32]!
0xffff7ab24e60   608  stp x8, x9, [jssp, #16]
0xffff7ab24e64   612  stp x1, x3, [jssp, #-24]!
0xffff7ab24e68   616  str x4, [jssp, #16]
0xffff7ab24e6c   620  mov x0, x1
0xffff7ab24e70   624  mov x1, x13
0xffff7ab24e74   628  ldr x2, pc+828 (addr 0x0000ffff7ab251b0)    ;; external reference (isolate)
0xffff7ab24e78   632  ldr x16, pc+832 (addr 0x0000ffff7ab251b8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab24e7c   636  and csp, jssp, #0xfffffffffffffff0
0xffff7ab24e80   640  blr x16
0xffff7ab24e84   644  ldp x4, x5, [jssp, #16]
0xffff7ab24e88   648  ldp x1, x3, [jssp], #32
0xffff7ab24e8c   652  ldp x9, x10, [jssp, #16]
0xffff7ab24e90   656  ldp x6, x8, [jssp], #32
0xffff7ab24e94   660  ldp x13, x14, [jssp, #16]
0xffff7ab24e98   664  ldp x11, x12, [jssp], #32
0xffff7ab24e9c   668  ldr lr, [jssp, #16]
0xffff7ab24ea0   672  ldp x15, x18, [jssp], #24
0xffff7ab24ea4   676  ldp x2, x0, [jssp], #16
0xffff7ab24ea8   680  ret
0xffff7ab24eac   684  sub csp, jssp, #0x10 (16)
0xffff7ab24eb0   688  stp x2, x0, [jssp, #-16]!
0xffff7ab24eb4   692  ldr x7, [x13]
0xffff7ab24eb8   696  and x16, x7, #0xfffffffffff00000
0xffff7ab24ebc   700  ldr x16, [x16, #8]
0xffff7ab24ec0   704  tst x16, #0x18
0xffff7ab24ec4   708  b.eq #+0x19c (addr 0xffff7ab25060)
0xffff7ab24ec8   712  and x16, x1, #0xfffffffffff00000
0xffff7ab24ecc   716  ldr x16, [x16, #8]
0xffff7ab24ed0   720  tst x16, #0x18
0xffff7ab24ed4   724  b.ne #+0x18c (addr 0xffff7ab25060)
0xffff7ab24ed8   728  and x7, x1, #0xfffffffffff00000
0xffff7ab24edc   732  ldr x0, [x7, #104]
0xffff7ab24ee0   736  subs x0, x0, #0x1 (1)
0xffff7ab24ee4   740  str x0, [x7, #104]
0xffff7ab24ee8   744  b.mi #+0xe4 (addr 0xffff7ab24fcc)
0xffff7ab24eec   748  ubfx x16, x1, #8, #12
0xffff7ab24ef0   752  and x7, x1, #0xfffffffffff00000
0xffff7ab24ef4   756  add x7, x7, x16, lsl #2
0xffff7ab24ef8   760  ubfx x0, x1, #3, #5
0xffff7ab24efc   764  ldr x7, [x7, #360]
0xffff7ab24f00   768  lsr x7, x7, x0
0xffff7ab24f04   772  tbz w7, #0, #+0x8 (addr 0xffff7ab24f0c)
0xffff7ab24f08   776  tbnz w7, #1, #+0x3c (addr 0xffff7ab24f44)
0xffff7ab24f0c   780  ldp x2, x0, [jssp], #16
0xffff7ab24f10   784  ldr x16, pc+688 (addr 0x0000ffff7ab251c0)    ;; external reference (store_buffer_top)
0xffff7ab24f14   788  ldr x7, [x16]
0xffff7ab24f18   792  str x13, [x7], #8
0xffff7ab24f1c   796  str x7, [x16]
0xffff7ab24f20   800  tst x7, #0x1ffff
0xffff7ab24f24   804  b.eq #+0x8 (addr 0xffff7ab24f2c)
0xffff7ab24f28   808  ret
0xffff7ab24f2c   812  sub csp, jssp, #0x8 (8)
0xffff7ab24f30   816  str lr, [jssp, #-8]!
0xffff7ab24f34   820  ldr x17, pc+660 (addr 0x0000ffff7ab251c8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab24f38   824  blr x17
0xffff7ab24f3c   828  ldr lr, [jssp], #8
0xffff7ab24f40   832  ret
0xffff7ab24f44   836  ldr x7, [x13]
0xffff7ab24f48   840  and x0, x7, #0xfffffffffff00000
0xffff7ab24f4c   844  ldr x0, [x0, #8]
0xffff7ab24f50   848  tbz w0, #6, #+0x18 (addr 0xffff7ab24f68)
0xffff7ab24f54   852  and x0, x1, #0xfffffffffff00000
0xffff7ab24f58   856  ldr x0, [x0, #8]
0xffff7ab24f5c   860  movz x16, #0x58
0xffff7ab24f60   864  tst x0, x16
0xffff7ab24f64   868  b.eq #+0x68 (addr 0xffff7ab24fcc)
0xffff7ab24f68   872  sub csp, jssp, #0x10 (16)
0xffff7ab24f6c   876  stp x1, x13, [jssp, #-16]!
0xffff7ab24f70   880  ubfx x16, x7, #8, #12
0xffff7ab24f74   884  and x0, x7, #0xfffffffffff00000
0xffff7ab24f78   888  add x0, x0, x16, lsl #2
0xffff7ab24f7c   892  ubfx x1, x7, #3, #5
0xffff7ab24f80   896  ldr x13, [x0, #360]
0xffff7ab24f84   900  lsr x13, x13, x1
0xffff7ab24f88   904  tbz w13, #0, #+0x40 (addr 0xffff7ab24fc8)
0xffff7ab24f8c   908  ldp x1, x13, [jssp], #16
0xffff7ab24f90   912  ldp x2, x0, [jssp], #16
0xffff7ab24f94   916  ldr x16, pc+572 (addr 0x0000ffff7ab251d0)    ;; external reference (store_buffer_top)
0xffff7ab24f98   920  ldr x7, [x16]
0xffff7ab24f9c   924  str x13, [x7], #8
0xffff7ab24fa0   928  str x7, [x16]
0xffff7ab24fa4   932  tst x7, #0x1ffff
0xffff7ab24fa8   936  b.eq #+0x8 (addr 0xffff7ab24fb0)
0xffff7ab24fac   940  ret
0xffff7ab24fb0   944  sub csp, jssp, #0x8 (8)
0xffff7ab24fb4   948  str lr, [jssp, #-8]!
0xffff7ab24fb8   952  ldr x17, pc+544 (addr 0x0000ffff7ab251d8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab24fbc   956  blr x17
0xffff7ab24fc0   960  ldr lr, [jssp], #8
0xffff7ab24fc4   964  ret
0xffff7ab24fc8   968  ldp x1, x13, [jssp], #16
0xffff7ab24fcc   972  sub csp, jssp, #0x78 (120)
0xffff7ab24fd0   976  stp x14, x15, [jssp, #-32]!
0xffff7ab24fd4   980  stp x18, lr, [jssp, #16]
0xffff7ab24fd8   984  stp x10, x11, [jssp, #-32]!
0xffff7ab24fdc   988  stp x12, x13, [jssp, #16]
0xffff7ab24fe0   992  stp x5, x6, [jssp, #-32]!
0xffff7ab24fe4   996  stp x8, x9, [jssp, #16]
0xffff7ab24fe8  1000  stp x1, x3, [jssp, #-24]!
0xffff7ab24fec  1004  str x4, [jssp, #16]
0xffff7ab24ff0  1008  mov x0, x1
0xffff7ab24ff4  1012  mov x1, x13
0xffff7ab24ff8  1016  ldr x2, pc+488 (addr 0x0000ffff7ab251e0)    ;; external reference (isolate)
0xffff7ab24ffc  1020  ldr x16, pc+492 (addr 0x0000ffff7ab251e8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab25000  1024  and csp, jssp, #0xfffffffffffffff0
0xffff7ab25004  1028  blr x16
0xffff7ab25008  1032  ldp x4, x5, [jssp, #16]
0xffff7ab2500c  1036  ldp x1, x3, [jssp], #32
0xffff7ab25010  1040  ldp x9, x10, [jssp, #16]
0xffff7ab25014  1044  ldp x6, x8, [jssp], #32
0xffff7ab25018  1048  ldp x13, x14, [jssp, #16]
0xffff7ab2501c  1052  ldp x11, x12, [jssp], #32
0xffff7ab25020  1056  ldr lr, [jssp, #16]
0xffff7ab25024  1060  ldp x15, x18, [jssp], #24
0xffff7ab25028  1064  ldp x2, x0, [jssp], #16
0xffff7ab2502c  1068  ldr x16, pc+452 (addr 0x0000ffff7ab251f0)    ;; external reference (store_buffer_top)
0xffff7ab25030  1072  ldr x7, [x16]
0xffff7ab25034  1076  str x13, [x7], #8
0xffff7ab25038  1080  str x7, [x16]
0xffff7ab2503c  1084  tst x7, #0x1ffff
0xffff7ab25040  1088  b.eq #+0x8 (addr 0xffff7ab25048)
0xffff7ab25044  1092  ret
0xffff7ab25048  1096  sub csp, jssp, #0x8 (8)
0xffff7ab2504c  1100  str lr, [jssp, #-8]!
0xffff7ab25050  1104  ldr x17, pc+424 (addr 0x0000ffff7ab251f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab25054  1108  blr x17
0xffff7ab25058  1112  ldr lr, [jssp], #8
0xffff7ab2505c  1116  ret
0xffff7ab25060  1120  and x7, x1, #0xfffffffffff00000
0xffff7ab25064  1124  ldr x0, [x7, #104]
0xffff7ab25068  1128  subs x0, x0, #0x1 (1)
0xffff7ab2506c  1132  str x0, [x7, #104]
0xffff7ab25070  1136  b.mi #+0x84 (addr 0xffff7ab250f4)
0xffff7ab25074  1140  ubfx x16, x1, #8, #12
0xffff7ab25078  1144  and x7, x1, #0xfffffffffff00000
0xffff7ab2507c  1148  add x7, x7, x16, lsl #2
0xffff7ab25080  1152  ubfx x0, x1, #3, #5
0xffff7ab25084  1156  ldr x7, [x7, #360]
0xffff7ab25088  1160  lsr x7, x7, x0
0xffff7ab2508c  1164  tbz w7, #0, #+0x8 (addr 0xffff7ab25094)
0xffff7ab25090  1168  tbnz w7, #1, #+0xc (addr 0xffff7ab2509c)
0xffff7ab25094  1172  ldp x2, x0, [jssp], #16
0xffff7ab25098  1176  ret
0xffff7ab2509c  1180  ldr x7, [x13]
0xffff7ab250a0  1184  and x0, x7, #0xfffffffffff00000
0xffff7ab250a4  1188  ldr x0, [x0, #8]
0xffff7ab250a8  1192  tbz w0, #6, #+0x18 (addr 0xffff7ab250c0)
0xffff7ab250ac  1196  and x0, x1, #0xfffffffffff00000
0xffff7ab250b0  1200  ldr x0, [x0, #8]
0xffff7ab250b4  1204  movz x16, #0x58
0xffff7ab250b8  1208  tst x0, x16
0xffff7ab250bc  1212  b.eq #+0x38 (addr 0xffff7ab250f4)
0xffff7ab250c0  1216  sub csp, jssp, #0x10 (16)
0xffff7ab250c4  1220  stp x1, x13, [jssp, #-16]!
0xffff7ab250c8  1224  ubfx x16, x7, #8, #12
0xffff7ab250cc  1228  and x0, x7, #0xfffffffffff00000
0xffff7ab250d0  1232  add x0, x0, x16, lsl #2
0xffff7ab250d4  1236  ubfx x1, x7, #3, #5
0xffff7ab250d8  1240  ldr x13, [x0, #360]
0xffff7ab250dc  1244  lsr x13, x13, x1
0xffff7ab250e0  1248  tbz w13, #0, #+0x10 (addr 0xffff7ab250f0)
0xffff7ab250e4  1252  ldp x1, x13, [jssp], #16
0xffff7ab250e8  1256  ldp x2, x0, [jssp], #16
0xffff7ab250ec  1260  ret
0xffff7ab250f0  1264  ldp x1, x13, [jssp], #16
0xffff7ab250f4  1268  sub csp, jssp, #0x78 (120)
0xffff7ab250f8  1272  stp x14, x15, [jssp, #-32]!
0xffff7ab250fc  1276  stp x18, lr, [jssp, #16]
0xffff7ab25100  1280  stp x10, x11, [jssp, #-32]!
0xffff7ab25104  1284  stp x12, x13, [jssp, #16]
0xffff7ab25108  1288  stp x5, x6, [jssp, #-32]!
0xffff7ab2510c  1292  stp x8, x9, [jssp, #16]
0xffff7ab25110  1296  stp x1, x3, [jssp, #-24]!
0xffff7ab25114  1300  str x4, [jssp, #16]
0xffff7ab25118  1304  mov x0, x1
0xffff7ab2511c  1308  mov x1, x13
0xffff7ab25120  1312  ldr x2, pc+224 (addr 0x0000ffff7ab25200)    ;; external reference (isolate)
0xffff7ab25124  1316  ldr x16, pc+228 (addr 0x0000ffff7ab25208)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab25128  1320  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2512c  1324  blr x16
0xffff7ab25130  1328  ldp x4, x5, [jssp, #16]
0xffff7ab25134  1332  ldp x1, x3, [jssp], #32
0xffff7ab25138  1336  ldp x9, x10, [jssp, #16]
0xffff7ab2513c  1340  ldp x6, x8, [jssp], #32
0xffff7ab25140  1344  ldp x13, x14, [jssp, #16]
0xffff7ab25144  1348  ldp x11, x12, [jssp], #32
0xffff7ab25148  1352  ldr lr, [jssp, #16]
0xffff7ab2514c  1356  ldp x15, x18, [jssp], #24
0xffff7ab25150  1360  ldp x2, x0, [jssp], #16
0xffff7ab25154  1364  ret
0xffff7ab25158  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab2515c  1372  d63f03e0       constant
0xffff7ab25160  1376  09abe8c0       constant
0xffff7ab25164  1380  00000000       constant
0xffff7ab25168  1384  7ab064c0       constant
0xffff7ab2516c  1388  0000ffff       constant
0xffff7ab25170  1392  09abe8c0       constant
0xffff7ab25174  1396  00000000       constant
0xffff7ab25178  1400  7ab064c0       constant
0xffff7ab2517c  1404  0000ffff       constant
0xffff7ab25180  1408  09abe8c0       constant
0xffff7ab25184  1412  00000000       constant
0xffff7ab25188  1416  7ab064c0       constant
0xffff7ab2518c  1420  0000ffff       constant
0xffff7ab25190  1424  09abd2d0       constant
0xffff7ab25194  1428  00000000       constant
0xffff7ab25198  1432  00c2d958       constant
0xffff7ab2519c  1436  00000000       constant
0xffff7ab251a0  1440  09abe8c0       constant
0xffff7ab251a4  1444  00000000       constant
0xffff7ab251a8  1448  7ab064c0       constant
0xffff7ab251ac  1452  0000ffff       constant
0xffff7ab251b0  1456  09abd2d0       constant
0xffff7ab251b4  1460  00000000       constant
0xffff7ab251b8  1464  00c2d958       constant
0xffff7ab251bc  1468  00000000       constant
0xffff7ab251c0  1472  09abe8c0       constant
0xffff7ab251c4  1476  00000000       constant
0xffff7ab251c8  1480  7ab064c0       constant
0xffff7ab251cc  1484  0000ffff       constant
0xffff7ab251d0  1488  09abe8c0       constant
0xffff7ab251d4  1492  00000000       constant
0xffff7ab251d8  1496  7ab064c0       constant
0xffff7ab251dc  1500  0000ffff       constant
0xffff7ab251e0  1504  09abd2d0       constant
0xffff7ab251e4  1508  00000000       constant
0xffff7ab251e8  1512  00c2d958       constant
0xffff7ab251ec  1516  00000000       constant
0xffff7ab251f0  1520  09abe8c0       constant
0xffff7ab251f4  1524  00000000       constant
0xffff7ab251f8  1528  7ab064c0       constant
0xffff7ab251fc  1532  0000ffff       constant
0xffff7ab25200  1536  09abd2d0       constant
0xffff7ab25204  1540  00000000       constant
0xffff7ab25208  1544  00c2d958       constant
0xffff7ab2520c  1548  00000000       constant


RelocInfo (size = 59)
0xffff7ab24c08  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab24c2c  code target (STUB)  (0xffff7ab064c0)
0xffff7ab24ca4  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab24cc8  code target (STUB)  (0xffff7ab064c0)
0xffff7ab24d08  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab24d2c  code target (STUB)  (0xffff7ab064c0)
0xffff7ab24d6c  external reference (isolate)  (0x9abd2d0)
0xffff7ab24d70  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab24da0  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab24dc4  code target (STUB)  (0xffff7ab064c0)
0xffff7ab24e74  external reference (isolate)  (0x9abd2d0)
0xffff7ab24e78  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab24f10  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab24f34  code target (STUB)  (0xffff7ab064c0)
0xffff7ab24f94  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab24fb8  code target (STUB)  (0xffff7ab064c0)
0xffff7ab24ff8  external reference (isolate)  (0x9abd2d0)
0xffff7ab24ffc  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2502c  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab25050  code target (STUB)  (0xffff7ab064c0)
0xffff7ab25120  external reference (isolate)  (0x9abd2d0)
0xffff7ab25124  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab25158  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 536)
0xffff7ab25280     0  adr xzr, #+0xc (addr 0xffff7ab2528c)
0xffff7ab25284     4  adr xzr, #+0xe8 (addr 0xffff7ab2536c)
0xffff7ab25288     8  ret
0xffff7ab2528c    12  sub csp, jssp, #0x10 (16)
0xffff7ab25290    16  stp x2, x0, [jssp, #-16]!
0xffff7ab25294    20  and x3, x1, #0xfffffffffff00000
0xffff7ab25298    24  ldr x0, [x3, #104]
0xffff7ab2529c    28  subs x0, x0, #0x1 (1)
0xffff7ab252a0    32  str x0, [x3, #104]
0xffff7ab252a4    36  b.mi #+0x64 (addr 0xffff7ab25308)
0xffff7ab252a8    40  ubfx x16, x1, #8, #12
0xffff7ab252ac    44  and x3, x1, #0xfffffffffff00000
0xffff7ab252b0    48  add x3, x3, x16, lsl #2
0xffff7ab252b4    52  ubfx x0, x1, #3, #5
0xffff7ab252b8    56  ldr x3, [x3, #360]
0xffff7ab252bc    60  lsr x3, x3, x0
0xffff7ab252c0    64  tbz w3, #0, #+0x8 (addr 0xffff7ab252c8)
0xffff7ab252c4    68  tbnz w3, #1, #+0xc (addr 0xffff7ab252d0)
0xffff7ab252c8    72  ldp x2, x0, [jssp], #16
0xffff7ab252cc    76  ret
0xffff7ab252d0    80  ldr x3, [x13]
0xffff7ab252d4    84  sub csp, jssp, #0x10 (16)
0xffff7ab252d8    88  stp x1, x13, [jssp, #-16]!
0xffff7ab252dc    92  ubfx x16, x3, #8, #12
0xffff7ab252e0    96  and x0, x3, #0xfffffffffff00000
0xffff7ab252e4   100  add x0, x0, x16, lsl #2
0xffff7ab252e8   104  ubfx x1, x3, #3, #5
0xffff7ab252ec   108  ldr x13, [x0, #360]
0xffff7ab252f0   112  lsr x13, x13, x1
0xffff7ab252f4   116  tbz w13, #0, #+0x10 (addr 0xffff7ab25304)
0xffff7ab252f8   120  ldp x1, x13, [jssp], #16
0xffff7ab252fc   124  ldp x2, x0, [jssp], #16
0xffff7ab25300   128  ret
0xffff7ab25304   132  ldp x1, x13, [jssp], #16
0xffff7ab25308   136  sub csp, jssp, #0x78 (120)
0xffff7ab2530c   140  stp x14, x15, [jssp, #-32]!
0xffff7ab25310   144  stp x18, lr, [jssp, #16]
0xffff7ab25314   148  stp x10, x11, [jssp, #-32]!
0xffff7ab25318   152  stp x12, x13, [jssp, #16]
0xffff7ab2531c   156  stp x6, x7, [jssp, #-32]!
0xffff7ab25320   160  stp x8, x9, [jssp, #16]
0xffff7ab25324   164  stp x1, x4, [jssp, #-24]!
0xffff7ab25328   168  str x5, [jssp, #16]
0xffff7ab2532c   172  mov x0, x1
0xffff7ab25330   176  mov x1, x13
0xffff7ab25334   180  ldr x2, pc+324 (addr 0x0000ffff7ab25478)    ;; external reference (isolate)
0xffff7ab25338   184  ldr x16, pc+328 (addr 0x0000ffff7ab25480)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2533c   188  and csp, jssp, #0xfffffffffffffff0
0xffff7ab25340   192  blr x16
0xffff7ab25344   196  ldp x5, x6, [jssp, #16]
0xffff7ab25348   200  ldp x1, x4, [jssp], #32
0xffff7ab2534c   204  ldp x9, x10, [jssp, #16]
0xffff7ab25350   208  ldp x7, x8, [jssp], #32
0xffff7ab25354   212  ldp x13, x14, [jssp, #16]
0xffff7ab25358   216  ldp x11, x12, [jssp], #32
0xffff7ab2535c   220  ldr lr, [jssp, #16]
0xffff7ab25360   224  ldp x15, x18, [jssp], #24
0xffff7ab25364   228  ldp x2, x0, [jssp], #16
0xffff7ab25368   232  ret
0xffff7ab2536c   236  sub csp, jssp, #0x10 (16)
0xffff7ab25370   240  stp x2, x0, [jssp, #-16]!
0xffff7ab25374   244  and x3, x1, #0xfffffffffff00000
0xffff7ab25378   248  ldr x0, [x3, #104]
0xffff7ab2537c   252  subs x0, x0, #0x1 (1)
0xffff7ab25380   256  str x0, [x3, #104]
0xffff7ab25384   260  b.mi #+0x84 (addr 0xffff7ab25408)
0xffff7ab25388   264  ubfx x16, x1, #8, #12
0xffff7ab2538c   268  and x3, x1, #0xfffffffffff00000
0xffff7ab25390   272  add x3, x3, x16, lsl #2
0xffff7ab25394   276  ubfx x0, x1, #3, #5
0xffff7ab25398   280  ldr x3, [x3, #360]
0xffff7ab2539c   284  lsr x3, x3, x0
0xffff7ab253a0   288  tbz w3, #0, #+0x8 (addr 0xffff7ab253a8)
0xffff7ab253a4   292  tbnz w3, #1, #+0xc (addr 0xffff7ab253b0)
0xffff7ab253a8   296  ldp x2, x0, [jssp], #16
0xffff7ab253ac   300  ret
0xffff7ab253b0   304  ldr x3, [x13]
0xffff7ab253b4   308  and x0, x3, #0xfffffffffff00000
0xffff7ab253b8   312  ldr x0, [x0, #8]
0xffff7ab253bc   316  tbz w0, #6, #+0x18 (addr 0xffff7ab253d4)
0xffff7ab253c0   320  and x0, x1, #0xfffffffffff00000
0xffff7ab253c4   324  ldr x0, [x0, #8]
0xffff7ab253c8   328  movz x16, #0x58
0xffff7ab253cc   332  tst x0, x16
0xffff7ab253d0   336  b.eq #+0x38 (addr 0xffff7ab25408)
0xffff7ab253d4   340  sub csp, jssp, #0x10 (16)
0xffff7ab253d8   344  stp x1, x13, [jssp, #-16]!
0xffff7ab253dc   348  ubfx x16, x3, #8, #12
0xffff7ab253e0   352  and x0, x3, #0xfffffffffff00000
0xffff7ab253e4   356  add x0, x0, x16, lsl #2
0xffff7ab253e8   360  ubfx x1, x3, #3, #5
0xffff7ab253ec   364  ldr x13, [x0, #360]
0xffff7ab253f0   368  lsr x13, x13, x1
0xffff7ab253f4   372  tbz w13, #0, #+0x10 (addr 0xffff7ab25404)
0xffff7ab253f8   376  ldp x1, x13, [jssp], #16
0xffff7ab253fc   380  ldp x2, x0, [jssp], #16
0xffff7ab25400   384  ret
0xffff7ab25404   388  ldp x1, x13, [jssp], #16
0xffff7ab25408   392  sub csp, jssp, #0x78 (120)
0xffff7ab2540c   396  stp x14, x15, [jssp, #-32]!
0xffff7ab25410   400  stp x18, lr, [jssp, #16]
0xffff7ab25414   404  stp x10, x11, [jssp, #-32]!
0xffff7ab25418   408  stp x12, x13, [jssp, #16]
0xffff7ab2541c   412  stp x6, x7, [jssp, #-32]!
0xffff7ab25420   416  stp x8, x9, [jssp, #16]
0xffff7ab25424   420  stp x1, x4, [jssp, #-24]!
0xffff7ab25428   424  str x5, [jssp, #16]
0xffff7ab2542c   428  mov x0, x1
0xffff7ab25430   432  mov x1, x13
0xffff7ab25434   436  ldr x2, pc+84 (addr 0x0000ffff7ab25488)    ;; external reference (isolate)
0xffff7ab25438   440  ldr x16, pc+88 (addr 0x0000ffff7ab25490)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2543c   444  and csp, jssp, #0xfffffffffffffff0
0xffff7ab25440   448  blr x16
0xffff7ab25444   452  ldp x5, x6, [jssp, #16]
0xffff7ab25448   456  ldp x1, x4, [jssp], #32
0xffff7ab2544c   460  ldp x9, x10, [jssp, #16]
0xffff7ab25450   464  ldp x7, x8, [jssp], #32
0xffff7ab25454   468  ldp x13, x14, [jssp, #16]
0xffff7ab25458   472  ldp x11, x12, [jssp], #32
0xffff7ab2545c   476  ldr lr, [jssp, #16]
0xffff7ab25460   480  ldp x15, x18, [jssp], #24
0xffff7ab25464   484  ldp x2, x0, [jssp], #16
0xffff7ab25468   488  ret
0xffff7ab2546c   492  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0xffff7ab25470   496  d63f03e0       constant
0xffff7ab25474   500  d503201f       constant
0xffff7ab25478   504  09abd2d0       constant
0xffff7ab2547c   508  00000000       constant
0xffff7ab25480   512  00c2d958       constant
0xffff7ab25484   516  00000000       constant
0xffff7ab25488   520  09abd2d0       constant
0xffff7ab2548c   524  00000000       constant
0xffff7ab25490   528  00c2d958       constant
0xffff7ab25494   532  00000000       constant


RelocInfo (size = 18)
0xffff7ab25334  external reference (isolate)  (0x9abd2d0)
0xffff7ab25338  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab25434  external reference (isolate)  (0x9abd2d0)
0xffff7ab25438  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2546c  constant pool (size 44)


kind = STUB
major_key = InstanceOfStub
name = InstanceOfStub
compiler = unknown
Instructions (size = 296)
0xffff7ab283a0     0  tbz w1, #0, #+0x28 (addr 0xffff7ab283c8)
0xffff7ab283a4     4  ldur x2, [x1, #-1]
0xffff7ab283a8     8  ldr x16, [x26, #376]
0xffff7ab283ac    12  cmp x0, x16
0xffff7ab283b0    16  b.ne #+0x34 (addr 0xffff7ab283e4)
0xffff7ab283b4    20  ldr x16, [x26, #384]
0xffff7ab283b8    24  cmp x2, x16
0xffff7ab283bc    28  b.ne #+0x28 (addr 0xffff7ab283e4)
0xffff7ab283c0    32  ldr x0, [x26, #392]
0xffff7ab283c4    36  ret
0xffff7ab283c8    40  tbz w0, #0, #+0xbc (addr 0xffff7ab28484)
0xffff7ab283cc    44  ldur x3, [x0, #-1]
0xffff7ab283d0    48  ldrb w5, [x3, #11]
0xffff7ab283d4    52  cmp x5, #0xc9 (201)
0xffff7ab283d8    56  b.ne #+0xac (addr 0xffff7ab28484)
0xffff7ab283dc    60  ldr x0, [x26, #72]
0xffff7ab283e0    64  ret
0xffff7ab283e4    68  tbz w0, #0, #+0xa0 (addr 0xffff7ab28484)
0xffff7ab283e8    72  ldur x3, [x0, #-1]
0xffff7ab283ec    76  ldrb w5, [x3, #11]
0xffff7ab283f0    80  cmp x5, #0xc9 (201)
0xffff7ab283f4    84  b.ne #+0x90 (addr 0xffff7ab28484)
0xffff7ab283f8    88  ldrb w5, [x3, #12]
0xffff7ab283fc    92  tbz w5, #7, #+0x88 (addr 0xffff7ab28484)
0xffff7ab28400    96  tbnz w5, #0, #+0x84 (addr 0xffff7ab28484)
0xffff7ab28404   100  ldur x4, [x0, #23]
0xffff7ab28408   104  ldur x5, [x4, #-1]
0xffff7ab2840c   108  ldrb w5, [x5, #11]
0xffff7ab28410   112  cmp x5, #0x84 (132)
0xffff7ab28414   116  b.ne #+0x8 (addr 0xffff7ab2841c)
0xffff7ab28418   120  ldur x4, [x4, #23]
0xffff7ab2841c   124  str x0, [x26, #376]
0xffff7ab28420   128  str x2, [x26, #384]
0xffff7ab28424   132  ldr x0, [x26, #64]
0xffff7ab28428   136  ldr x5, [x26, #56]
0xffff7ab2842c   140  ldrb w3, [x2, #12]
0xffff7ab28430   144  tbnz w3, #6, #+0x34 (addr 0xffff7ab28464)
0xffff7ab28434   148  ldrb w3, [x2, #11]
0xffff7ab28438   152  cmp x3, #0xb1 (177)
0xffff7ab2843c   156  b.eq #+0x28 (addr 0xffff7ab28464)
0xffff7ab28440   160  ldur x1, [x2, #23]
0xffff7ab28444   164  cmp x1, x4
0xffff7ab28448   168  b.eq #+0x14 (addr 0xffff7ab2845c)
0xffff7ab2844c   172  cmp x1, x5
0xffff7ab28450   176  ldur x2, [x1, #-1]
0xffff7ab28454   180  b.ne #-0x28 (addr 0xffff7ab2842c)
0xffff7ab28458   184  ldr x0, [x26, #72]
0xffff7ab2845c   188  str x0, [x26, #392]
0xffff7ab28460   192  ret
0xffff7ab28464   196  sub csp, jssp, #0x10 (16)
0xffff7ab28468   200  stp x4, x1, [jssp, #-16]!
0xffff7ab2846c   204  movz x5, #0x0
0xffff7ab28470   208  str x5, [x26, #376]
0xffff7ab28474   212  movz x0, #0x2
0xffff7ab28478   216  ldr x1, pc+48 (addr 0x0000ffff7ab284a8)    ;; external reference (Runtime::HasInPrototypeChain)
0xffff7ab2847c   220  ldr x16, pc+52 (addr 0x0000ffff7ab284b0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab28480   224  br x16
0xffff7ab28484   228  sub csp, jssp, #0x10 (16)
0xffff7ab28488   232  stp x0, x1, [jssp, #-16]!
0xffff7ab2848c   236  movz x0, #0x2
0xffff7ab28490   240  ldr x1, pc+40 (addr 0x0000ffff7ab284b8)    ;; external reference (Runtime::OrdinaryHasInstance)
0xffff7ab28494   244  ldr x16, pc+44 (addr 0x0000ffff7ab284c0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab28498   248  br x16
0xffff7ab2849c   252  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0xffff7ab284a0   256  d63f03e0       constant
0xffff7ab284a4   260  d503201f       constant
0xffff7ab284a8   264  00e4ad20       constant
0xffff7ab284ac   268  00000000       constant
0xffff7ab284b0   272  7ab06060       constant
0xffff7ab284b4   276  0000ffff       constant
0xffff7ab284b8   280  00e4a740       constant
0xffff7ab284bc   284  00000000       constant
0xffff7ab284c0   288  7ab06060       constant
0xffff7ab284c4   292  0000ffff       constant


RelocInfo (size = 14)
0xffff7ab28478  external reference (Runtime::HasInPrototypeChain)  (0xe4ad20)
0xffff7ab2847c  code target (STUB)  (0xffff7ab06060)
0xffff7ab28490  external reference (Runtime::OrdinaryHasInstance)  (0xe4a740)
0xffff7ab28494  code target (STUB)  (0xffff7ab06060)
0xffff7ab2849c  constant pool (size 44)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = InternalArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 429)
0xffff7ab289c0     0  movz w0, #0x6000
0xffff7ab289c4     4  movk w0, #0x9, lsl #16
0xffff7ab289c8     8  cmp w0, #0x30 (48)
0xffff7ab289cc    12  b.ls #+0x14c (addr 0xffff7ab28b18)
0xffff7ab289d0    16  movz x2, #0xe2c0
0xffff7ab289d4    20  movk x2, #0x9ab, lsl #16
0xffff7ab289d8    24  ldp x3, x0, [x2]
0xffff7ab289dc    28  adds x16, x3, #0x50 (80)
0xffff7ab289e0    32  ccmp x16, x0, #nzCv, lo
0xffff7ab289e4    36  b.hi #+0x78 (addr 0xffff7ab28a5c)
0xffff7ab289e8    40  str x16, [x2]
0xffff7ab289ec    44  orr x3, x3, #0x1
0xffff7ab289f0    48  movz w0, #0x0
0xffff7ab289f4    52  stur x0, [x3, #31]
0xffff7ab289f8    56  ldur x0, [x1, #23]
0xffff7ab289fc    60  stur x0, [x3, #-1]
0xffff7ab28a00    64  ldr x0, pc+200 (addr 0x0000ffff7ab28ac8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab28a04    68  stur x0, [x3, #7]
0xffff7ab28a08    72  ldr x0, pc+200 (addr 0x0000ffff7ab28ad0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab28a0c    76  stur x0, [x3, #15]
0xffff7ab28a10    80  movz x0, #0x0
0xffff7ab28a14    84  stur x0, [x3, #23]
0xffff7ab28a18    88  add x0, x3, #0x20 (32)
0xffff7ab28a1c    92  ldr x1, pc+188 (addr 0x0000ffff7ab28ad8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab28a20    96  stur x1, [x0, #-1]
0xffff7ab28a24   100  movz x1, #0x400000000
0xffff7ab28a28   104  stur x1, [x0, #7]
0xffff7ab28a2c   108  stur x0, [x3, #15]
0xffff7ab28a30   112  ldr x1, pc+176 (addr 0x0000ffff7ab28ae0)    ;; object: 0x20d04519 <the hole>
0xffff7ab28a34   116  stur x1, [x0, #15]
0xffff7ab28a38   120  ldr x1, pc+176 (addr 0x0000ffff7ab28ae8)    ;; object: 0x20d04519 <the hole>
0xffff7ab28a3c   124  stur x1, [x0, #23]
0xffff7ab28a40   128  ldr x1, pc+176 (addr 0x0000ffff7ab28af0)    ;; object: 0x20d04519 <the hole>
0xffff7ab28a44   132  stur x1, [x0, #31]
0xffff7ab28a48   136  ldr x1, pc+176 (addr 0x0000ffff7ab28af8)    ;; object: 0x20d04519 <the hole>
0xffff7ab28a4c   140  stur x1, [x0, #39]
0xffff7ab28a50   144  mov x0, x3
0xffff7ab28a54   148  add jssp, jssp, #0x8 (8)
0xffff7ab28a58   152  ret
0xffff7ab28a5c   156  sub csp, jssp, #0x10 (16)
0xffff7ab28a60   160  stp fp, lr, [jssp, #-16]!
0xffff7ab28a64   164  movz fp, #0xa00000000
0xffff7ab28a68   168  sub csp, jssp, #0x8 (8)
0xffff7ab28a6c   172  str fp, [jssp, #-8]!
0xffff7ab28a70   176  add fp, jssp, #0x8 (8)
0xffff7ab28a74   180  movz x3, #0x0
0xffff7ab28a78   184  mov x16, lr
0xffff7ab28a7c   188  ldr x17, pc+132 (addr 0x0000ffff7ab28b00)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab28a80   192  blr x17
0xffff7ab28a84   196  movz x0, #0x5000000000
0xffff7ab28a88   200  movz x10, #0x0
0xffff7ab28a8c   204  sub csp, jssp, #0x10 (16)
0xffff7ab28a90   208  stp x10, x0, [jssp, #-16]!
0xffff7ab28a94   212  movz x0, #0x2
0xffff7ab28a98   216  movz x1, #0x5b88
0xffff7ab28a9c   220  movk x1, #0xe2, lsl #16
0xffff7ab28aa0   224  ldr x16, pc+104 (addr 0x0000ffff7ab28b08)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab28aa4   228  blr x16
0xffff7ab28aa8   232  str x0, [jssp, #24]
0xffff7ab28aac   236  ldr x16, pc+100 (addr 0x0000ffff7ab28b10)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab28ab0   240  blr x16
0xffff7ab28ab4   244  ldr lr, [jssp, #16]
0xffff7ab28ab8   248  ldp xzr, fp, [jssp], #24
0xffff7ab28abc   252  b #-0xcc (addr 0xffff7ab289f0)
0xffff7ab28ac0   256  580002bf       constant pool begin (num_const = 21)    ;; constant pool
0xffff7ab28ac4   260  d63f03e0       constant
0xffff7ab28ac8   264  20d04201       constant
0xffff7ab28acc   268  00000000       constant
0xffff7ab28ad0   272  20d04201       constant
0xffff7ab28ad4   276  00000000       constant
0xffff7ab28ad8   280  4ec04259       constant
0xffff7ab28adc   284  00000000       constant
0xffff7ab28ae0   288  20d04519       constant
0xffff7ab28ae4   292  00000000       constant
0xffff7ab28ae8   296  20d04519       constant
0xffff7ab28aec   300  00000000       constant
0xffff7ab28af0   304  20d04519       constant
0xffff7ab28af4   308  00000000       constant
0xffff7ab28af8   312  20d04519       constant
0xffff7ab28afc   316  00000000       constant
0xffff7ab28b00   320  7ab06820       constant
0xffff7ab28b04   324  0000ffff       constant
0xffff7ab28b08   328  7ab06260       constant
0xffff7ab28b0c   332  0000ffff       constant
0xffff7ab28b10   336  7ab068e0       constant
0xffff7ab28b14   340  0000ffff       constant
0xffff7ab28b18   344  movz x16, #0x0
0xffff7ab28b1c   348  sub csp, jssp, #0x10 (16)
0xffff7ab28b20   352  stp fp, lr, [jssp, #-16]!
0xffff7ab28b24   356  bl #+0x4 (addr 0xffff7ab28b28)
0xffff7ab28b28   360  movz x17, #0xa00000000
0xffff7ab28b2c   364  sub csp, jssp, #0x10 (16)
0xffff7ab28b30   368  stp x17, cp, [jssp, #-16]!
0xffff7ab28b34   372  add fp, jssp, #0x10 (16)
0xffff7ab28b38   376  ldr x17, pc+24 (addr 0x0000ffff7ab28b50)    ;; lazy deoptimization bailout 0
0xffff7ab28b3c   380  add x17, x17, x16
0xffff7ab28b40   384  br x17
0xffff7ab28b44   388  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab28b48   392  d63f03e0       constant
0xffff7ab28b4c   396  d503201f       constant
0xffff7ab28b50   400  7a906000       constant
0xffff7ab28b54   404  0000ffff       constant


Safepoints (size = 21)
0xffff7ab28aa8   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0xffff7ab28a00  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab28a08  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab28a1c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab28a30  embedded object  (0x20d04519 <the hole>)
0xffff7ab28a38  embedded object  (0x20d04519 <the hole>)
0xffff7ab28a40  embedded object  (0x20d04519 <the hole>)
0xffff7ab28a48  embedded object  (0x20d04519 <the hole>)
0xffff7ab28a7c  code target (STUB)  (0xffff7ab06820)
0xffff7ab28aa0  code target (STUB)  (0xffff7ab06260)
0xffff7ab28aac  code target (STUB)  (0xffff7ab068e0)
0xffff7ab28ac0  constant pool (size 88)
0xffff7ab28b38  runtime entry
0xffff7ab28b44  constant pool (size 20)

--- End code ---
kind = STUB
major_key = InternalArrayNoArgumentConstructorStub
name = InternalArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 429)
0xffff7ab289c0     0  movz w0, #0x6000
0xffff7ab289c4     4  movk w0, #0x9, lsl #16
0xffff7ab289c8     8  cmp w0, #0x30 (48)
0xffff7ab289cc    12  b.ls #+0x14c (addr 0xffff7ab28b18)
0xffff7ab289d0    16  movz x2, #0xe2c0
0xffff7ab289d4    20  movk x2, #0x9ab, lsl #16
0xffff7ab289d8    24  ldp x3, x0, [x2]
0xffff7ab289dc    28  adds x16, x3, #0x50 (80)
0xffff7ab289e0    32  ccmp x16, x0, #nzCv, lo
0xffff7ab289e4    36  b.hi #+0x78 (addr 0xffff7ab28a5c)
0xffff7ab289e8    40  str x16, [x2]
0xffff7ab289ec    44  orr x3, x3, #0x1
0xffff7ab289f0    48  movz w0, #0x0
0xffff7ab289f4    52  stur x0, [x3, #31]
0xffff7ab289f8    56  ldur x0, [x1, #23]
0xffff7ab289fc    60  stur x0, [x3, #-1]
0xffff7ab28a00    64  ldr x0, pc+200 (addr 0x0000ffff7ab28ac8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab28a04    68  stur x0, [x3, #7]
0xffff7ab28a08    72  ldr x0, pc+200 (addr 0x0000ffff7ab28ad0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab28a0c    76  stur x0, [x3, #15]
0xffff7ab28a10    80  movz x0, #0x0
0xffff7ab28a14    84  stur x0, [x3, #23]
0xffff7ab28a18    88  add x0, x3, #0x20 (32)
0xffff7ab28a1c    92  ldr x1, pc+188 (addr 0x0000ffff7ab28ad8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab28a20    96  stur x1, [x0, #-1]
0xffff7ab28a24   100  movz x1, #0x400000000
0xffff7ab28a28   104  stur x1, [x0, #7]
0xffff7ab28a2c   108  stur x0, [x3, #15]
0xffff7ab28a30   112  ldr x1, pc+176 (addr 0x0000ffff7ab28ae0)    ;; object: 0x20d04519 <the hole>
0xffff7ab28a34   116  stur x1, [x0, #15]
0xffff7ab28a38   120  ldr x1, pc+176 (addr 0x0000ffff7ab28ae8)    ;; object: 0x20d04519 <the hole>
0xffff7ab28a3c   124  stur x1, [x0, #23]
0xffff7ab28a40   128  ldr x1, pc+176 (addr 0x0000ffff7ab28af0)    ;; object: 0x20d04519 <the hole>
0xffff7ab28a44   132  stur x1, [x0, #31]
0xffff7ab28a48   136  ldr x1, pc+176 (addr 0x0000ffff7ab28af8)    ;; object: 0x20d04519 <the hole>
0xffff7ab28a4c   140  stur x1, [x0, #39]
0xffff7ab28a50   144  mov x0, x3
0xffff7ab28a54   148  add jssp, jssp, #0x8 (8)
0xffff7ab28a58   152  ret
0xffff7ab28a5c   156  sub csp, jssp, #0x10 (16)
0xffff7ab28a60   160  stp fp, lr, [jssp, #-16]!
0xffff7ab28a64   164  movz fp, #0xa00000000
0xffff7ab28a68   168  sub csp, jssp, #0x8 (8)
0xffff7ab28a6c   172  str fp, [jssp, #-8]!
0xffff7ab28a70   176  add fp, jssp, #0x8 (8)
0xffff7ab28a74   180  movz x3, #0x0
0xffff7ab28a78   184  mov x16, lr
0xffff7ab28a7c   188  ldr x17, pc+132 (addr 0x0000ffff7ab28b00)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab28a80   192  blr x17
0xffff7ab28a84   196  movz x0, #0x5000000000
0xffff7ab28a88   200  movz x10, #0x0
0xffff7ab28a8c   204  sub csp, jssp, #0x10 (16)
0xffff7ab28a90   208  stp x10, x0, [jssp, #-16]!
0xffff7ab28a94   212  movz x0, #0x2
0xffff7ab28a98   216  movz x1, #0x5b88
0xffff7ab28a9c   220  movk x1, #0xe2, lsl #16
0xffff7ab28aa0   224  ldr x16, pc+104 (addr 0x0000ffff7ab28b08)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab28aa4   228  blr x16
0xffff7ab28aa8   232  str x0, [jssp, #24]
0xffff7ab28aac   236  ldr x16, pc+100 (addr 0x0000ffff7ab28b10)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab28ab0   240  blr x16
0xffff7ab28ab4   244  ldr lr, [jssp, #16]
0xffff7ab28ab8   248  ldp xzr, fp, [jssp], #24
0xffff7ab28abc   252  b #-0xcc (addr 0xffff7ab289f0)
0xffff7ab28ac0   256  580002bf       constant pool begin (num_const = 21)    ;; constant pool
0xffff7ab28ac4   260  d63f03e0       constant
0xffff7ab28ac8   264  20d04201       constant
0xffff7ab28acc   268  00000000       constant
0xffff7ab28ad0   272  20d04201       constant
0xffff7ab28ad4   276  00000000       constant
0xffff7ab28ad8   280  4ec04259       constant
0xffff7ab28adc   284  00000000       constant
0xffff7ab28ae0   288  20d04519       constant
0xffff7ab28ae4   292  00000000       constant
0xffff7ab28ae8   296  20d04519       constant
0xffff7ab28aec   300  00000000       constant
0xffff7ab28af0   304  20d04519       constant
0xffff7ab28af4   308  00000000       constant
0xffff7ab28af8   312  20d04519       constant
0xffff7ab28afc   316  00000000       constant
0xffff7ab28b00   320  7ab06820       constant
0xffff7ab28b04   324  0000ffff       constant
0xffff7ab28b08   328  7ab06260       constant
0xffff7ab28b0c   332  0000ffff       constant
0xffff7ab28b10   336  7ab068e0       constant
0xffff7ab28b14   340  0000ffff       constant
0xffff7ab28b18   344  movz x16, #0x0
0xffff7ab28b1c   348  sub csp, jssp, #0x10 (16)
0xffff7ab28b20   352  stp fp, lr, [jssp, #-16]!
0xffff7ab28b24   356  bl #+0x4 (addr 0xffff7ab28b28)
0xffff7ab28b28   360  movz x17, #0xa00000000
0xffff7ab28b2c   364  sub csp, jssp, #0x10 (16)
0xffff7ab28b30   368  stp x17, cp, [jssp, #-16]!
0xffff7ab28b34   372  add fp, jssp, #0x10 (16)
0xffff7ab28b38   376  ldr x17, pc+24 (addr 0x0000ffff7ab28b50)    ;; lazy deoptimization bailout 0
0xffff7ab28b3c   380  add x17, x17, x16
0xffff7ab28b40   384  br x17
0xffff7ab28b44   388  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab28b48   392  d63f03e0       constant
0xffff7ab28b4c   396  d503201f       constant
0xffff7ab28b50   400  7a906000       constant
0xffff7ab28b54   404  0000ffff       constant


Safepoints (size = 21)
0xffff7ab28aa8   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0xffff7ab28a00  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab28a08  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab28a1c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab28a30  embedded object  (0x20d04519 <the hole>)
0xffff7ab28a38  embedded object  (0x20d04519 <the hole>)
0xffff7ab28a40  embedded object  (0x20d04519 <the hole>)
0xffff7ab28a48  embedded object  (0x20d04519 <the hole>)
0xffff7ab28a7c  code target (STUB)  (0xffff7ab06820)
0xffff7ab28aa0  code target (STUB)  (0xffff7ab06260)
0xffff7ab28aac  code target (STUB)  (0xffff7ab068e0)
0xffff7ab28ac0  constant pool (size 88)
0xffff7ab28b38  runtime entry
0xffff7ab28b44  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = InternalArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 509)
0xffff7ab28be0     0  movz x16, #0xa00000000
0xffff7ab28be4     4  sub csp, jssp, #0x10 (16)
0xffff7ab28be8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab28bec    12  mov fp, jssp
0xffff7ab28bf0    16  sub csp, jssp, #0x8 (8)
0xffff7ab28bf4    20  sub jssp, jssp, #0x8 (8)
0xffff7ab28bf8    24  stur x16, [fp, #-8]
0xffff7ab28bfc    28  ldr x2, [fp]
0xffff7ab28c00    32  ldur x3, [x2, #-8]
0xffff7ab28c04    36  movz x16, #0xe00000000
0xffff7ab28c08    40  cmp x3, x16
0xffff7ab28c0c    44  csel x3, fp, x2, ne
0xffff7ab28c10    48  ldr x2, [x3, #16]
0xffff7ab28c14    52  tbnz w2, #0, #+0xd0 (addr 0xffff7ab28ce4)
0xffff7ab28c18    56  asr x4, x2, #32
0xffff7ab28c1c    60  movz w16, #0x257f
0xffff7ab28c20    64  cmp w4, w16, lsl #3
0xffff7ab28c24    68  b.hs #+0x16c (addr 0xffff7ab28d90)
0xffff7ab28c28    72  cbz w4, #+0xc (addr 0xffff7ab28c34)
0xffff7ab28c2c    76  mov x2, x4
0xffff7ab28c30    80  b #+0xc (addr 0xffff7ab28c3c)
0xffff7ab28c34    84  movz x2, #0x4
0xffff7ab28c38    88  movz x4, #0x0
0xffff7ab28c3c    92  lsl x3, x2, #32
0xffff7ab28c40    96  lsl x4, x4, #32
0xffff7ab28c44   100  lsl w5, w2, #3
0xffff7ab28c48   104  add w5, w5, #0x10 (16)
0xffff7ab28c4c   108  cmp w5, #0x96000 (614400)
0xffff7ab28c50   112  b.hs #+0x148 (addr 0xffff7ab28d98)
0xffff7ab28c54   116  add w0, w5, #0x20 (32)
0xffff7ab28c58   120  sxtw x0, w0
0xffff7ab28c5c   124  movz x5, #0xe2c0
0xffff7ab28c60   128  movk x5, #0x9ab, lsl #16
0xffff7ab28c64   132  ldp x7, x16, [x5]
0xffff7ab28c68   136  adds x6, x7, x0
0xffff7ab28c6c   140  ccmp x6, x16, #nzCv, lo
0xffff7ab28c70   144  b.hi #+0x9c (addr 0xffff7ab28d0c)
0xffff7ab28c74   148  str x6, [x5]
0xffff7ab28c78   152  orr x7, x7, #0x1
0xffff7ab28c7c   156  movz w0, #0x0
0xffff7ab28c80   160  stur x0, [x7, #31]
0xffff7ab28c84   164  ldur x0, [x1, #23]
0xffff7ab28c88   168  stur x0, [x7, #-1]
0xffff7ab28c8c   172  ldr x0, pc+204 (addr 0x0000ffff7ab28d58)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab28c90   176  stur x0, [x7, #7]
0xffff7ab28c94   180  ldr x0, pc+204 (addr 0x0000ffff7ab28d60)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab28c98   184  stur x0, [x7, #15]
0xffff7ab28c9c   188  stur x4, [x7, #23]
0xffff7ab28ca0   192  add x0, x7, #0x20 (32)
0xffff7ab28ca4   196  ldr x1, pc+196 (addr 0x0000ffff7ab28d68)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab28ca8   200  stur x1, [x0, #-1]
0xffff7ab28cac   204  stur x3, [x0, #7]
0xffff7ab28cb0   208  stur x0, [x7, #15]
0xffff7ab28cb4   212  cmp w2, #0x0 (0)
0xffff7ab28cb8   216  b.le #+0x18 (addr 0xffff7ab28cd0)
0xffff7ab28cbc   220  sub w2, w2, #0x1 (1)
0xffff7ab28cc0   224  ldr x1, pc+176 (addr 0x0000ffff7ab28d70)    ;; object: 0x20d04519 <the hole>
0xffff7ab28cc4   228  add x3, x0, #0xf (15)
0xffff7ab28cc8   232  str x1, [x3, w2, sxtw #3]
0xffff7ab28ccc   236  b #-0x18 (addr 0xffff7ab28cb4)
0xffff7ab28cd0   240  mov x0, x7
0xffff7ab28cd4   244  mov jssp, fp
0xffff7ab28cd8   248  ldp fp, lr, [jssp], #16
0xffff7ab28cdc   252  add jssp, jssp, #0x10 (16)
0xffff7ab28ce0   256  ret
0xffff7ab28ce4   260  ldur x16, [x2, #-1]
0xffff7ab28ce8   264  ldr x17, [x26, #120]
0xffff7ab28cec   268  cmp x16, x17
0xffff7ab28cf0   272  b.ne #+0xb0 (addr 0xffff7ab28da0)
0xffff7ab28cf4   276  ldur d29, [x2, #7]
0xffff7ab28cf8   280  fcvtzs w4, d29
0xffff7ab28cfc   284  scvtf d0, w4
0xffff7ab28d00   288  fcmp d29, d0
0xffff7ab28d04   292  b.ne #+0x9c (addr 0xffff7ab28da0)
0xffff7ab28d08   296  b #-0xec (addr 0xffff7ab28c1c)
0xffff7ab28d0c   300  movz x7, #0x0
0xffff7ab28d10   304  mov x16, lr
0xffff7ab28d14   308  ldr x17, pc+100 (addr 0x0000ffff7ab28d78)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab28d18   312  blr x17
0xffff7ab28d1c   316  lsl x0, x0, #32
0xffff7ab28d20   320  movz x10, #0x0
0xffff7ab28d24   324  sub csp, jssp, #0x10 (16)
0xffff7ab28d28   328  stp x10, x0, [jssp, #-16]!
0xffff7ab28d2c   332  movz x0, #0x2
0xffff7ab28d30   336  movz x1, #0x5b88
0xffff7ab28d34   340  movk x1, #0xe2, lsl #16
0xffff7ab28d38   344  ldr x16, pc+72 (addr 0x0000ffff7ab28d80)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab28d3c   348  blr x16
0xffff7ab28d40   352  str x0, [jssp, #56]
0xffff7ab28d44   356  ldr x16, pc+68 (addr 0x0000ffff7ab28d88)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab28d48   360  blr x16
0xffff7ab28d4c   364  b #-0xd0 (addr 0xffff7ab28c7c)
0xffff7ab28d50   368  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab28d54   372  d63f03e0       constant
0xffff7ab28d58   376  20d04201       constant
0xffff7ab28d5c   380  00000000       constant
0xffff7ab28d60   384  20d04201       constant
0xffff7ab28d64   388  00000000       constant
0xffff7ab28d68   392  4ec04259       constant
0xffff7ab28d6c   396  00000000       constant
0xffff7ab28d70   400  20d04519       constant
0xffff7ab28d74   404  00000000       constant
0xffff7ab28d78   408  7ab06820       constant
0xffff7ab28d7c   412  0000ffff       constant
0xffff7ab28d80   416  7ab06260       constant
0xffff7ab28d84   420  0000ffff       constant
0xffff7ab28d88   424  7ab068e0       constant
0xffff7ab28d8c   428  0000ffff       constant
0xffff7ab28d90   432  movz x16, #0x0
0xffff7ab28d94   436  bl #+0x14 (addr 0xffff7ab28da8)
0xffff7ab28d98   440  movz x16, #0x8
0xffff7ab28d9c   444  bl #+0xc (addr 0xffff7ab28da8)
0xffff7ab28da0   448  movz x16, #0x10
0xffff7ab28da4   452  bl #+0x4 (addr 0xffff7ab28da8)
0xffff7ab28da8   456  ldr x17, pc+24 (addr 0x0000ffff7ab28dc0)    ;; lazy deoptimization bailout 0
0xffff7ab28dac   460  add x17, x17, x16
0xffff7ab28db0   464  br x17
0xffff7ab28db4   468  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab28db8   472  d63f03e0       constant
0xffff7ab28dbc   476  d503201f       constant
0xffff7ab28dc0   480  7a906000       constant
0xffff7ab28dc4   484  0000ffff       constant


Safepoints (size = 21)
0xffff7ab28d40   352  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab28c8c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab28c94  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab28ca4  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab28cc0  embedded object  (0x20d04519 <the hole>)
0xffff7ab28d14  code target (STUB)  (0xffff7ab06820)
0xffff7ab28d38  code target (STUB)  (0xffff7ab06260)
0xffff7ab28d44  code target (STUB)  (0xffff7ab068e0)
0xffff7ab28d50  constant pool (size 64)
0xffff7ab28da8  runtime entry
0xffff7ab28db4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = InternalArraySingleArgumentConstructorStub
name = InternalArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 509)
0xffff7ab28be0     0  movz x16, #0xa00000000
0xffff7ab28be4     4  sub csp, jssp, #0x10 (16)
0xffff7ab28be8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab28bec    12  mov fp, jssp
0xffff7ab28bf0    16  sub csp, jssp, #0x8 (8)
0xffff7ab28bf4    20  sub jssp, jssp, #0x8 (8)
0xffff7ab28bf8    24  stur x16, [fp, #-8]
0xffff7ab28bfc    28  ldr x2, [fp]
0xffff7ab28c00    32  ldur x3, [x2, #-8]
0xffff7ab28c04    36  movz x16, #0xe00000000
0xffff7ab28c08    40  cmp x3, x16
0xffff7ab28c0c    44  csel x3, fp, x2, ne
0xffff7ab28c10    48  ldr x2, [x3, #16]
0xffff7ab28c14    52  tbnz w2, #0, #+0xd0 (addr 0xffff7ab28ce4)
0xffff7ab28c18    56  asr x4, x2, #32
0xffff7ab28c1c    60  movz w16, #0x257f
0xffff7ab28c20    64  cmp w4, w16, lsl #3
0xffff7ab28c24    68  b.hs #+0x16c (addr 0xffff7ab28d90)
0xffff7ab28c28    72  cbz w4, #+0xc (addr 0xffff7ab28c34)
0xffff7ab28c2c    76  mov x2, x4
0xffff7ab28c30    80  b #+0xc (addr 0xffff7ab28c3c)
0xffff7ab28c34    84  movz x2, #0x4
0xffff7ab28c38    88  movz x4, #0x0
0xffff7ab28c3c    92  lsl x3, x2, #32
0xffff7ab28c40    96  lsl x4, x4, #32
0xffff7ab28c44   100  lsl w5, w2, #3
0xffff7ab28c48   104  add w5, w5, #0x10 (16)
0xffff7ab28c4c   108  cmp w5, #0x96000 (614400)
0xffff7ab28c50   112  b.hs #+0x148 (addr 0xffff7ab28d98)
0xffff7ab28c54   116  add w0, w5, #0x20 (32)
0xffff7ab28c58   120  sxtw x0, w0
0xffff7ab28c5c   124  movz x5, #0xe2c0
0xffff7ab28c60   128  movk x5, #0x9ab, lsl #16
0xffff7ab28c64   132  ldp x7, x16, [x5]
0xffff7ab28c68   136  adds x6, x7, x0
0xffff7ab28c6c   140  ccmp x6, x16, #nzCv, lo
0xffff7ab28c70   144  b.hi #+0x9c (addr 0xffff7ab28d0c)
0xffff7ab28c74   148  str x6, [x5]
0xffff7ab28c78   152  orr x7, x7, #0x1
0xffff7ab28c7c   156  movz w0, #0x0
0xffff7ab28c80   160  stur x0, [x7, #31]
0xffff7ab28c84   164  ldur x0, [x1, #23]
0xffff7ab28c88   168  stur x0, [x7, #-1]
0xffff7ab28c8c   172  ldr x0, pc+204 (addr 0x0000ffff7ab28d58)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab28c90   176  stur x0, [x7, #7]
0xffff7ab28c94   180  ldr x0, pc+204 (addr 0x0000ffff7ab28d60)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab28c98   184  stur x0, [x7, #15]
0xffff7ab28c9c   188  stur x4, [x7, #23]
0xffff7ab28ca0   192  add x0, x7, #0x20 (32)
0xffff7ab28ca4   196  ldr x1, pc+196 (addr 0x0000ffff7ab28d68)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab28ca8   200  stur x1, [x0, #-1]
0xffff7ab28cac   204  stur x3, [x0, #7]
0xffff7ab28cb0   208  stur x0, [x7, #15]
0xffff7ab28cb4   212  cmp w2, #0x0 (0)
0xffff7ab28cb8   216  b.le #+0x18 (addr 0xffff7ab28cd0)
0xffff7ab28cbc   220  sub w2, w2, #0x1 (1)
0xffff7ab28cc0   224  ldr x1, pc+176 (addr 0x0000ffff7ab28d70)    ;; object: 0x20d04519 <the hole>
0xffff7ab28cc4   228  add x3, x0, #0xf (15)
0xffff7ab28cc8   232  str x1, [x3, w2, sxtw #3]
0xffff7ab28ccc   236  b #-0x18 (addr 0xffff7ab28cb4)
0xffff7ab28cd0   240  mov x0, x7
0xffff7ab28cd4   244  mov jssp, fp
0xffff7ab28cd8   248  ldp fp, lr, [jssp], #16
0xffff7ab28cdc   252  add jssp, jssp, #0x10 (16)
0xffff7ab28ce0   256  ret
0xffff7ab28ce4   260  ldur x16, [x2, #-1]
0xffff7ab28ce8   264  ldr x17, [x26, #120]
0xffff7ab28cec   268  cmp x16, x17
0xffff7ab28cf0   272  b.ne #+0xb0 (addr 0xffff7ab28da0)
0xffff7ab28cf4   276  ldur d29, [x2, #7]
0xffff7ab28cf8   280  fcvtzs w4, d29
0xffff7ab28cfc   284  scvtf d0, w4
0xffff7ab28d00   288  fcmp d29, d0
0xffff7ab28d04   292  b.ne #+0x9c (addr 0xffff7ab28da0)
0xffff7ab28d08   296  b #-0xec (addr 0xffff7ab28c1c)
0xffff7ab28d0c   300  movz x7, #0x0
0xffff7ab28d10   304  mov x16, lr
0xffff7ab28d14   308  ldr x17, pc+100 (addr 0x0000ffff7ab28d78)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab28d18   312  blr x17
0xffff7ab28d1c   316  lsl x0, x0, #32
0xffff7ab28d20   320  movz x10, #0x0
0xffff7ab28d24   324  sub csp, jssp, #0x10 (16)
0xffff7ab28d28   328  stp x10, x0, [jssp, #-16]!
0xffff7ab28d2c   332  movz x0, #0x2
0xffff7ab28d30   336  movz x1, #0x5b88
0xffff7ab28d34   340  movk x1, #0xe2, lsl #16
0xffff7ab28d38   344  ldr x16, pc+72 (addr 0x0000ffff7ab28d80)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab28d3c   348  blr x16
0xffff7ab28d40   352  str x0, [jssp, #56]
0xffff7ab28d44   356  ldr x16, pc+68 (addr 0x0000ffff7ab28d88)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab28d48   360  blr x16
0xffff7ab28d4c   364  b #-0xd0 (addr 0xffff7ab28c7c)
0xffff7ab28d50   368  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab28d54   372  d63f03e0       constant
0xffff7ab28d58   376  20d04201       constant
0xffff7ab28d5c   380  00000000       constant
0xffff7ab28d60   384  20d04201       constant
0xffff7ab28d64   388  00000000       constant
0xffff7ab28d68   392  4ec04259       constant
0xffff7ab28d6c   396  00000000       constant
0xffff7ab28d70   400  20d04519       constant
0xffff7ab28d74   404  00000000       constant
0xffff7ab28d78   408  7ab06820       constant
0xffff7ab28d7c   412  0000ffff       constant
0xffff7ab28d80   416  7ab06260       constant
0xffff7ab28d84   420  0000ffff       constant
0xffff7ab28d88   424  7ab068e0       constant
0xffff7ab28d8c   428  0000ffff       constant
0xffff7ab28d90   432  movz x16, #0x0
0xffff7ab28d94   436  bl #+0x14 (addr 0xffff7ab28da8)
0xffff7ab28d98   440  movz x16, #0x8
0xffff7ab28d9c   444  bl #+0xc (addr 0xffff7ab28da8)
0xffff7ab28da0   448  movz x16, #0x10
0xffff7ab28da4   452  bl #+0x4 (addr 0xffff7ab28da8)
0xffff7ab28da8   456  ldr x17, pc+24 (addr 0x0000ffff7ab28dc0)    ;; lazy deoptimization bailout 0
0xffff7ab28dac   460  add x17, x17, x16
0xffff7ab28db0   464  br x17
0xffff7ab28db4   468  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab28db8   472  d63f03e0       constant
0xffff7ab28dbc   476  d503201f       constant
0xffff7ab28dc0   480  7a906000       constant
0xffff7ab28dc4   484  0000ffff       constant


Safepoints (size = 21)
0xffff7ab28d40   352  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab28c8c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab28c94  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab28ca4  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab28cc0  embedded object  (0x20d04519 <the hole>)
0xffff7ab28d14  code target (STUB)  (0xffff7ab06820)
0xffff7ab28d38  code target (STUB)  (0xffff7ab06260)
0xffff7ab28d44  code target (STUB)  (0xffff7ab068e0)
0xffff7ab28d50  constant pool (size 64)
0xffff7ab28da8  runtime entry
0xffff7ab28db4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = InternalArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 437)
0xffff7ab28e40     0  movz x16, #0xa00000000
0xffff7ab28e44     4  sub csp, jssp, #0x10 (16)
0xffff7ab28e48     8  stp fp, lr, [jssp, #-16]!
0xffff7ab28e4c    12  mov fp, jssp
0xffff7ab28e50    16  sub csp, jssp, #0x8 (8)
0xffff7ab28e54    20  sub jssp, jssp, #0x8 (8)
0xffff7ab28e58    24  stur x16, [fp, #-8]
0xffff7ab28e5c    28  movz w16, #0x257f
0xffff7ab28e60    32  cmp w0, w16, lsl #3
0xffff7ab28e64    36  b.hs #+0x14c (addr 0xffff7ab28fb0)
0xffff7ab28e68    40  lsl x2, x0, #32
0xffff7ab28e6c    44  lsl w3, w0, #3
0xffff7ab28e70    48  add w3, w3, #0x10 (16)
0xffff7ab28e74    52  cmp w3, #0x96000 (614400)
0xffff7ab28e78    56  b.hs #+0x140 (addr 0xffff7ab28fb8)
0xffff7ab28e7c    60  add w3, w3, #0x20 (32)
0xffff7ab28e80    64  sxtw x3, w3
0xffff7ab28e84    68  movz x4, #0xe2c0
0xffff7ab28e88    72  movk x4, #0x9ab, lsl #16
0xffff7ab28e8c    76  ldp x6, x16, [x4]
0xffff7ab28e90    80  adds x5, x6, x3
0xffff7ab28e94    84  ccmp x5, x16, #nzCv, lo
0xffff7ab28e98    88  b.hi #+0x9c (addr 0xffff7ab28f34)
0xffff7ab28e9c    92  str x5, [x4]
0xffff7ab28ea0    96  orr x6, x6, #0x1
0xffff7ab28ea4   100  movz w3, #0x0
0xffff7ab28ea8   104  stur x3, [x6, #31]
0xffff7ab28eac   108  ldur x1, [x1, #23]
0xffff7ab28eb0   112  stur x1, [x6, #-1]
0xffff7ab28eb4   116  ldr x1, pc+204 (addr 0x0000ffff7ab28f80)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab28eb8   120  stur x1, [x6, #7]
0xffff7ab28ebc   124  ldr x1, pc+204 (addr 0x0000ffff7ab28f88)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab28ec0   128  stur x1, [x6, #15]
0xffff7ab28ec4   132  stur x2, [x6, #23]
0xffff7ab28ec8   136  add x1, x6, #0x20 (32)
0xffff7ab28ecc   140  ldr x3, pc+196 (addr 0x0000ffff7ab28f90)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab28ed0   144  stur x3, [x1, #-1]
0xffff7ab28ed4   148  stur x2, [x1, #7]
0xffff7ab28ed8   152  stur x1, [x6, #15]
0xffff7ab28edc   156  ldr x2, [fp]
0xffff7ab28ee0   160  ldur x3, [x2, #-8]
0xffff7ab28ee4   164  movz x16, #0xe00000000
0xffff7ab28ee8   168  cmp x3, x16
0xffff7ab28eec   172  csel x3, fp, x2, ne
0xffff7ab28ef0   176  movz x2, #0x0
0xffff7ab28ef4   180  cmp w0, w2
0xffff7ab28ef8   184  b.le #+0x20 (addr 0xffff7ab28f18)
0xffff7ab28efc   188  sub w4, w0, w2
0xffff7ab28f00   192  add w4, w4, #0x1 (1)
0xffff7ab28f04   196  ldr x4, [x3, w4, uxtw #3]
0xffff7ab28f08   200  add x5, x1, #0xf (15)
0xffff7ab28f0c   204  str x4, [x5, w2, sxtw #3]
0xffff7ab28f10   208  add w2, w2, #0x1 (1)
0xffff7ab28f14   212  b #-0x20 (addr 0xffff7ab28ef4)
0xffff7ab28f18   216  add w0, w0, #0x1 (1)
0xffff7ab28f1c   220  lsl x1, x0, #32
0xffff7ab28f20   224  mov x0, x6
0xffff7ab28f24   228  mov jssp, fp
0xffff7ab28f28   232  ldp fp, lr, [jssp], #16
0xffff7ab28f2c   236  add jssp, jssp, x1, lsr #29
0xffff7ab28f30   240  ret
0xffff7ab28f34   244  movz x6, #0x0
0xffff7ab28f38   248  mov x16, lr
0xffff7ab28f3c   252  ldr x17, pc+92 (addr 0x0000ffff7ab28f98)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab28f40   256  blr x17
0xffff7ab28f44   260  lsl x0, x3, #32
0xffff7ab28f48   264  movz x10, #0x0
0xffff7ab28f4c   268  sub csp, jssp, #0x10 (16)
0xffff7ab28f50   272  stp x10, x0, [jssp, #-16]!
0xffff7ab28f54   276  movz x0, #0x2
0xffff7ab28f58   280  movz x1, #0x5b88
0xffff7ab28f5c   284  movk x1, #0xe2, lsl #16
0xffff7ab28f60   288  ldr x16, pc+64 (addr 0x0000ffff7ab28fa0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab28f64   292  blr x16
0xffff7ab28f68   296  str x0, [jssp, #48]
0xffff7ab28f6c   300  ldr x16, pc+60 (addr 0x0000ffff7ab28fa8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab28f70   304  blr x16
0xffff7ab28f74   308  b #-0xd0 (addr 0xffff7ab28ea4)
0xffff7ab28f78   312  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab28f7c   316  d63f03e0       constant
0xffff7ab28f80   320  20d04201       constant
0xffff7ab28f84   324  00000000       constant
0xffff7ab28f88   328  20d04201       constant
0xffff7ab28f8c   332  00000000       constant
0xffff7ab28f90   336  4ec04259       constant
0xffff7ab28f94   340  00000000       constant
0xffff7ab28f98   344  7ab06820       constant
0xffff7ab28f9c   348  0000ffff       constant
0xffff7ab28fa0   352  7ab06260       constant
0xffff7ab28fa4   356  0000ffff       constant
0xffff7ab28fa8   360  7ab068e0       constant
0xffff7ab28fac   364  0000ffff       constant
0xffff7ab28fb0   368  movz x16, #0x0
0xffff7ab28fb4   372  bl #+0xc (addr 0xffff7ab28fc0)
0xffff7ab28fb8   376  movz x16, #0x8
0xffff7ab28fbc   380  bl #+0x4 (addr 0xffff7ab28fc0)
0xffff7ab28fc0   384  ldr x17, pc+24 (addr 0x0000ffff7ab28fd8)    ;; lazy deoptimization bailout 0
0xffff7ab28fc4   388  add x17, x17, x16
0xffff7ab28fc8   392  br x17
0xffff7ab28fcc   396  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab28fd0   400  d63f03e0       constant
0xffff7ab28fd4   404  d503201f       constant
0xffff7ab28fd8   408  7a906000       constant
0xffff7ab28fdc   412  0000ffff       constant


Safepoints (size = 21)
0xffff7ab28f68   296  000 | x1 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab28eb4  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab28ebc  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab28ecc  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab28f3c  code target (STUB)  (0xffff7ab06820)
0xffff7ab28f60  code target (STUB)  (0xffff7ab06260)
0xffff7ab28f6c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab28f78  constant pool (size 56)
0xffff7ab28fc0  runtime entry
0xffff7ab28fcc  constant pool (size 20)

--- End code ---
kind = STUB
major_key = InternalArrayNArgumentsConstructorStub
name = InternalArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 437)
0xffff7ab28e40     0  movz x16, #0xa00000000
0xffff7ab28e44     4  sub csp, jssp, #0x10 (16)
0xffff7ab28e48     8  stp fp, lr, [jssp, #-16]!
0xffff7ab28e4c    12  mov fp, jssp
0xffff7ab28e50    16  sub csp, jssp, #0x8 (8)
0xffff7ab28e54    20  sub jssp, jssp, #0x8 (8)
0xffff7ab28e58    24  stur x16, [fp, #-8]
0xffff7ab28e5c    28  movz w16, #0x257f
0xffff7ab28e60    32  cmp w0, w16, lsl #3
0xffff7ab28e64    36  b.hs #+0x14c (addr 0xffff7ab28fb0)
0xffff7ab28e68    40  lsl x2, x0, #32
0xffff7ab28e6c    44  lsl w3, w0, #3
0xffff7ab28e70    48  add w3, w3, #0x10 (16)
0xffff7ab28e74    52  cmp w3, #0x96000 (614400)
0xffff7ab28e78    56  b.hs #+0x140 (addr 0xffff7ab28fb8)
0xffff7ab28e7c    60  add w3, w3, #0x20 (32)
0xffff7ab28e80    64  sxtw x3, w3
0xffff7ab28e84    68  movz x4, #0xe2c0
0xffff7ab28e88    72  movk x4, #0x9ab, lsl #16
0xffff7ab28e8c    76  ldp x6, x16, [x4]
0xffff7ab28e90    80  adds x5, x6, x3
0xffff7ab28e94    84  ccmp x5, x16, #nzCv, lo
0xffff7ab28e98    88  b.hi #+0x9c (addr 0xffff7ab28f34)
0xffff7ab28e9c    92  str x5, [x4]
0xffff7ab28ea0    96  orr x6, x6, #0x1
0xffff7ab28ea4   100  movz w3, #0x0
0xffff7ab28ea8   104  stur x3, [x6, #31]
0xffff7ab28eac   108  ldur x1, [x1, #23]
0xffff7ab28eb0   112  stur x1, [x6, #-1]
0xffff7ab28eb4   116  ldr x1, pc+204 (addr 0x0000ffff7ab28f80)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab28eb8   120  stur x1, [x6, #7]
0xffff7ab28ebc   124  ldr x1, pc+204 (addr 0x0000ffff7ab28f88)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab28ec0   128  stur x1, [x6, #15]
0xffff7ab28ec4   132  stur x2, [x6, #23]
0xffff7ab28ec8   136  add x1, x6, #0x20 (32)
0xffff7ab28ecc   140  ldr x3, pc+196 (addr 0x0000ffff7ab28f90)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab28ed0   144  stur x3, [x1, #-1]
0xffff7ab28ed4   148  stur x2, [x1, #7]
0xffff7ab28ed8   152  stur x1, [x6, #15]
0xffff7ab28edc   156  ldr x2, [fp]
0xffff7ab28ee0   160  ldur x3, [x2, #-8]
0xffff7ab28ee4   164  movz x16, #0xe00000000
0xffff7ab28ee8   168  cmp x3, x16
0xffff7ab28eec   172  csel x3, fp, x2, ne
0xffff7ab28ef0   176  movz x2, #0x0
0xffff7ab28ef4   180  cmp w0, w2
0xffff7ab28ef8   184  b.le #+0x20 (addr 0xffff7ab28f18)
0xffff7ab28efc   188  sub w4, w0, w2
0xffff7ab28f00   192  add w4, w4, #0x1 (1)
0xffff7ab28f04   196  ldr x4, [x3, w4, uxtw #3]
0xffff7ab28f08   200  add x5, x1, #0xf (15)
0xffff7ab28f0c   204  str x4, [x5, w2, sxtw #3]
0xffff7ab28f10   208  add w2, w2, #0x1 (1)
0xffff7ab28f14   212  b #-0x20 (addr 0xffff7ab28ef4)
0xffff7ab28f18   216  add w0, w0, #0x1 (1)
0xffff7ab28f1c   220  lsl x1, x0, #32
0xffff7ab28f20   224  mov x0, x6
0xffff7ab28f24   228  mov jssp, fp
0xffff7ab28f28   232  ldp fp, lr, [jssp], #16
0xffff7ab28f2c   236  add jssp, jssp, x1, lsr #29
0xffff7ab28f30   240  ret
0xffff7ab28f34   244  movz x6, #0x0
0xffff7ab28f38   248  mov x16, lr
0xffff7ab28f3c   252  ldr x17, pc+92 (addr 0x0000ffff7ab28f98)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab28f40   256  blr x17
0xffff7ab28f44   260  lsl x0, x3, #32
0xffff7ab28f48   264  movz x10, #0x0
0xffff7ab28f4c   268  sub csp, jssp, #0x10 (16)
0xffff7ab28f50   272  stp x10, x0, [jssp, #-16]!
0xffff7ab28f54   276  movz x0, #0x2
0xffff7ab28f58   280  movz x1, #0x5b88
0xffff7ab28f5c   284  movk x1, #0xe2, lsl #16
0xffff7ab28f60   288  ldr x16, pc+64 (addr 0x0000ffff7ab28fa0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab28f64   292  blr x16
0xffff7ab28f68   296  str x0, [jssp, #48]
0xffff7ab28f6c   300  ldr x16, pc+60 (addr 0x0000ffff7ab28fa8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab28f70   304  blr x16
0xffff7ab28f74   308  b #-0xd0 (addr 0xffff7ab28ea4)
0xffff7ab28f78   312  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab28f7c   316  d63f03e0       constant
0xffff7ab28f80   320  20d04201       constant
0xffff7ab28f84   324  00000000       constant
0xffff7ab28f88   328  20d04201       constant
0xffff7ab28f8c   332  00000000       constant
0xffff7ab28f90   336  4ec04259       constant
0xffff7ab28f94   340  00000000       constant
0xffff7ab28f98   344  7ab06820       constant
0xffff7ab28f9c   348  0000ffff       constant
0xffff7ab28fa0   352  7ab06260       constant
0xffff7ab28fa4   356  0000ffff       constant
0xffff7ab28fa8   360  7ab068e0       constant
0xffff7ab28fac   364  0000ffff       constant
0xffff7ab28fb0   368  movz x16, #0x0
0xffff7ab28fb4   372  bl #+0xc (addr 0xffff7ab28fc0)
0xffff7ab28fb8   376  movz x16, #0x8
0xffff7ab28fbc   380  bl #+0x4 (addr 0xffff7ab28fc0)
0xffff7ab28fc0   384  ldr x17, pc+24 (addr 0x0000ffff7ab28fd8)    ;; lazy deoptimization bailout 0
0xffff7ab28fc4   388  add x17, x17, x16
0xffff7ab28fc8   392  br x17
0xffff7ab28fcc   396  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab28fd0   400  d63f03e0       constant
0xffff7ab28fd4   404  d503201f       constant
0xffff7ab28fd8   408  7a906000       constant
0xffff7ab28fdc   412  0000ffff       constant


Safepoints (size = 21)
0xffff7ab28f68   296  000 | x1 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab28eb4  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab28ebc  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab28ecc  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab28f3c  code target (STUB)  (0xffff7ab06820)
0xffff7ab28f60  code target (STUB)  (0xffff7ab06260)
0xffff7ab28f6c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab28f78  constant pool (size 56)
0xffff7ab28fc0  runtime entry
0xffff7ab28fcc  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = InternalArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 429)
0xffff7ab29060     0  movz w0, #0x6000
0xffff7ab29064     4  movk w0, #0x9, lsl #16
0xffff7ab29068     8  cmp w0, #0x30 (48)
0xffff7ab2906c    12  b.ls #+0x14c (addr 0xffff7ab291b8)
0xffff7ab29070    16  movz x2, #0xe2c0
0xffff7ab29074    20  movk x2, #0x9ab, lsl #16
0xffff7ab29078    24  ldp x3, x0, [x2]
0xffff7ab2907c    28  adds x16, x3, #0x50 (80)
0xffff7ab29080    32  ccmp x16, x0, #nzCv, lo
0xffff7ab29084    36  b.hi #+0x78 (addr 0xffff7ab290fc)
0xffff7ab29088    40  str x16, [x2]
0xffff7ab2908c    44  orr x3, x3, #0x1
0xffff7ab29090    48  movz w0, #0x0
0xffff7ab29094    52  stur x0, [x3, #31]
0xffff7ab29098    56  ldur x0, [x1, #23]
0xffff7ab2909c    60  stur x0, [x3, #-1]
0xffff7ab290a0    64  ldr x0, pc+200 (addr 0x0000ffff7ab29168)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab290a4    68  stur x0, [x3, #7]
0xffff7ab290a8    72  ldr x0, pc+200 (addr 0x0000ffff7ab29170)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab290ac    76  stur x0, [x3, #15]
0xffff7ab290b0    80  movz x0, #0x0
0xffff7ab290b4    84  stur x0, [x3, #23]
0xffff7ab290b8    88  add x0, x3, #0x20 (32)
0xffff7ab290bc    92  ldr x1, pc+188 (addr 0x0000ffff7ab29178)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab290c0    96  stur x1, [x0, #-1]
0xffff7ab290c4   100  movz x1, #0x400000000
0xffff7ab290c8   104  stur x1, [x0, #7]
0xffff7ab290cc   108  stur x0, [x3, #15]
0xffff7ab290d0   112  ldr x1, pc+176 (addr 0x0000ffff7ab29180)    ;; object: 0x20d04519 <the hole>
0xffff7ab290d4   116  stur x1, [x0, #15]
0xffff7ab290d8   120  ldr x1, pc+176 (addr 0x0000ffff7ab29188)    ;; object: 0x20d04519 <the hole>
0xffff7ab290dc   124  stur x1, [x0, #23]
0xffff7ab290e0   128  ldr x1, pc+176 (addr 0x0000ffff7ab29190)    ;; object: 0x20d04519 <the hole>
0xffff7ab290e4   132  stur x1, [x0, #31]
0xffff7ab290e8   136  ldr x1, pc+176 (addr 0x0000ffff7ab29198)    ;; object: 0x20d04519 <the hole>
0xffff7ab290ec   140  stur x1, [x0, #39]
0xffff7ab290f0   144  mov x0, x3
0xffff7ab290f4   148  add jssp, jssp, #0x8 (8)
0xffff7ab290f8   152  ret
0xffff7ab290fc   156  sub csp, jssp, #0x10 (16)
0xffff7ab29100   160  stp fp, lr, [jssp, #-16]!
0xffff7ab29104   164  movz fp, #0xa00000000
0xffff7ab29108   168  sub csp, jssp, #0x8 (8)
0xffff7ab2910c   172  str fp, [jssp, #-8]!
0xffff7ab29110   176  add fp, jssp, #0x8 (8)
0xffff7ab29114   180  movz x3, #0x0
0xffff7ab29118   184  mov x16, lr
0xffff7ab2911c   188  ldr x17, pc+132 (addr 0x0000ffff7ab291a0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab29120   192  blr x17
0xffff7ab29124   196  movz x0, #0x5000000000
0xffff7ab29128   200  movz x10, #0x0
0xffff7ab2912c   204  sub csp, jssp, #0x10 (16)
0xffff7ab29130   208  stp x10, x0, [jssp, #-16]!
0xffff7ab29134   212  movz x0, #0x2
0xffff7ab29138   216  movz x1, #0x5b88
0xffff7ab2913c   220  movk x1, #0xe2, lsl #16
0xffff7ab29140   224  ldr x16, pc+104 (addr 0x0000ffff7ab291a8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab29144   228  blr x16
0xffff7ab29148   232  str x0, [jssp, #24]
0xffff7ab2914c   236  ldr x16, pc+100 (addr 0x0000ffff7ab291b0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab29150   240  blr x16
0xffff7ab29154   244  ldr lr, [jssp, #16]
0xffff7ab29158   248  ldp xzr, fp, [jssp], #24
0xffff7ab2915c   252  b #-0xcc (addr 0xffff7ab29090)
0xffff7ab29160   256  580002bf       constant pool begin (num_const = 21)    ;; constant pool
0xffff7ab29164   260  d63f03e0       constant
0xffff7ab29168   264  20d04201       constant
0xffff7ab2916c   268  00000000       constant
0xffff7ab29170   272  20d04201       constant
0xffff7ab29174   276  00000000       constant
0xffff7ab29178   280  4ec04259       constant
0xffff7ab2917c   284  00000000       constant
0xffff7ab29180   288  20d04519       constant
0xffff7ab29184   292  00000000       constant
0xffff7ab29188   296  20d04519       constant
0xffff7ab2918c   300  00000000       constant
0xffff7ab29190   304  20d04519       constant
0xffff7ab29194   308  00000000       constant
0xffff7ab29198   312  20d04519       constant
0xffff7ab2919c   316  00000000       constant
0xffff7ab291a0   320  7ab06820       constant
0xffff7ab291a4   324  0000ffff       constant
0xffff7ab291a8   328  7ab06260       constant
0xffff7ab291ac   332  0000ffff       constant
0xffff7ab291b0   336  7ab068e0       constant
0xffff7ab291b4   340  0000ffff       constant
0xffff7ab291b8   344  movz x16, #0x0
0xffff7ab291bc   348  sub csp, jssp, #0x10 (16)
0xffff7ab291c0   352  stp fp, lr, [jssp, #-16]!
0xffff7ab291c4   356  bl #+0x4 (addr 0xffff7ab291c8)
0xffff7ab291c8   360  movz x17, #0xa00000000
0xffff7ab291cc   364  sub csp, jssp, #0x10 (16)
0xffff7ab291d0   368  stp x17, cp, [jssp, #-16]!
0xffff7ab291d4   372  add fp, jssp, #0x10 (16)
0xffff7ab291d8   376  ldr x17, pc+24 (addr 0x0000ffff7ab291f0)    ;; lazy deoptimization bailout 0
0xffff7ab291dc   380  add x17, x17, x16
0xffff7ab291e0   384  br x17
0xffff7ab291e4   388  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab291e8   392  d63f03e0       constant
0xffff7ab291ec   396  d503201f       constant
0xffff7ab291f0   400  7a906000       constant
0xffff7ab291f4   404  0000ffff       constant


Safepoints (size = 21)
0xffff7ab29148   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0xffff7ab290a0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab290a8  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab290bc  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab290d0  embedded object  (0x20d04519 <the hole>)
0xffff7ab290d8  embedded object  (0x20d04519 <the hole>)
0xffff7ab290e0  embedded object  (0x20d04519 <the hole>)
0xffff7ab290e8  embedded object  (0x20d04519 <the hole>)
0xffff7ab2911c  code target (STUB)  (0xffff7ab06820)
0xffff7ab29140  code target (STUB)  (0xffff7ab06260)
0xffff7ab2914c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab29160  constant pool (size 88)
0xffff7ab291d8  runtime entry
0xffff7ab291e4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = InternalArrayNoArgumentConstructorStub
name = InternalArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 429)
0xffff7ab29060     0  movz w0, #0x6000
0xffff7ab29064     4  movk w0, #0x9, lsl #16
0xffff7ab29068     8  cmp w0, #0x30 (48)
0xffff7ab2906c    12  b.ls #+0x14c (addr 0xffff7ab291b8)
0xffff7ab29070    16  movz x2, #0xe2c0
0xffff7ab29074    20  movk x2, #0x9ab, lsl #16
0xffff7ab29078    24  ldp x3, x0, [x2]
0xffff7ab2907c    28  adds x16, x3, #0x50 (80)
0xffff7ab29080    32  ccmp x16, x0, #nzCv, lo
0xffff7ab29084    36  b.hi #+0x78 (addr 0xffff7ab290fc)
0xffff7ab29088    40  str x16, [x2]
0xffff7ab2908c    44  orr x3, x3, #0x1
0xffff7ab29090    48  movz w0, #0x0
0xffff7ab29094    52  stur x0, [x3, #31]
0xffff7ab29098    56  ldur x0, [x1, #23]
0xffff7ab2909c    60  stur x0, [x3, #-1]
0xffff7ab290a0    64  ldr x0, pc+200 (addr 0x0000ffff7ab29168)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab290a4    68  stur x0, [x3, #7]
0xffff7ab290a8    72  ldr x0, pc+200 (addr 0x0000ffff7ab29170)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab290ac    76  stur x0, [x3, #15]
0xffff7ab290b0    80  movz x0, #0x0
0xffff7ab290b4    84  stur x0, [x3, #23]
0xffff7ab290b8    88  add x0, x3, #0x20 (32)
0xffff7ab290bc    92  ldr x1, pc+188 (addr 0x0000ffff7ab29178)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab290c0    96  stur x1, [x0, #-1]
0xffff7ab290c4   100  movz x1, #0x400000000
0xffff7ab290c8   104  stur x1, [x0, #7]
0xffff7ab290cc   108  stur x0, [x3, #15]
0xffff7ab290d0   112  ldr x1, pc+176 (addr 0x0000ffff7ab29180)    ;; object: 0x20d04519 <the hole>
0xffff7ab290d4   116  stur x1, [x0, #15]
0xffff7ab290d8   120  ldr x1, pc+176 (addr 0x0000ffff7ab29188)    ;; object: 0x20d04519 <the hole>
0xffff7ab290dc   124  stur x1, [x0, #23]
0xffff7ab290e0   128  ldr x1, pc+176 (addr 0x0000ffff7ab29190)    ;; object: 0x20d04519 <the hole>
0xffff7ab290e4   132  stur x1, [x0, #31]
0xffff7ab290e8   136  ldr x1, pc+176 (addr 0x0000ffff7ab29198)    ;; object: 0x20d04519 <the hole>
0xffff7ab290ec   140  stur x1, [x0, #39]
0xffff7ab290f0   144  mov x0, x3
0xffff7ab290f4   148  add jssp, jssp, #0x8 (8)
0xffff7ab290f8   152  ret
0xffff7ab290fc   156  sub csp, jssp, #0x10 (16)
0xffff7ab29100   160  stp fp, lr, [jssp, #-16]!
0xffff7ab29104   164  movz fp, #0xa00000000
0xffff7ab29108   168  sub csp, jssp, #0x8 (8)
0xffff7ab2910c   172  str fp, [jssp, #-8]!
0xffff7ab29110   176  add fp, jssp, #0x8 (8)
0xffff7ab29114   180  movz x3, #0x0
0xffff7ab29118   184  mov x16, lr
0xffff7ab2911c   188  ldr x17, pc+132 (addr 0x0000ffff7ab291a0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab29120   192  blr x17
0xffff7ab29124   196  movz x0, #0x5000000000
0xffff7ab29128   200  movz x10, #0x0
0xffff7ab2912c   204  sub csp, jssp, #0x10 (16)
0xffff7ab29130   208  stp x10, x0, [jssp, #-16]!
0xffff7ab29134   212  movz x0, #0x2
0xffff7ab29138   216  movz x1, #0x5b88
0xffff7ab2913c   220  movk x1, #0xe2, lsl #16
0xffff7ab29140   224  ldr x16, pc+104 (addr 0x0000ffff7ab291a8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab29144   228  blr x16
0xffff7ab29148   232  str x0, [jssp, #24]
0xffff7ab2914c   236  ldr x16, pc+100 (addr 0x0000ffff7ab291b0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab29150   240  blr x16
0xffff7ab29154   244  ldr lr, [jssp, #16]
0xffff7ab29158   248  ldp xzr, fp, [jssp], #24
0xffff7ab2915c   252  b #-0xcc (addr 0xffff7ab29090)
0xffff7ab29160   256  580002bf       constant pool begin (num_const = 21)    ;; constant pool
0xffff7ab29164   260  d63f03e0       constant
0xffff7ab29168   264  20d04201       constant
0xffff7ab2916c   268  00000000       constant
0xffff7ab29170   272  20d04201       constant
0xffff7ab29174   276  00000000       constant
0xffff7ab29178   280  4ec04259       constant
0xffff7ab2917c   284  00000000       constant
0xffff7ab29180   288  20d04519       constant
0xffff7ab29184   292  00000000       constant
0xffff7ab29188   296  20d04519       constant
0xffff7ab2918c   300  00000000       constant
0xffff7ab29190   304  20d04519       constant
0xffff7ab29194   308  00000000       constant
0xffff7ab29198   312  20d04519       constant
0xffff7ab2919c   316  00000000       constant
0xffff7ab291a0   320  7ab06820       constant
0xffff7ab291a4   324  0000ffff       constant
0xffff7ab291a8   328  7ab06260       constant
0xffff7ab291ac   332  0000ffff       constant
0xffff7ab291b0   336  7ab068e0       constant
0xffff7ab291b4   340  0000ffff       constant
0xffff7ab291b8   344  movz x16, #0x0
0xffff7ab291bc   348  sub csp, jssp, #0x10 (16)
0xffff7ab291c0   352  stp fp, lr, [jssp, #-16]!
0xffff7ab291c4   356  bl #+0x4 (addr 0xffff7ab291c8)
0xffff7ab291c8   360  movz x17, #0xa00000000
0xffff7ab291cc   364  sub csp, jssp, #0x10 (16)
0xffff7ab291d0   368  stp x17, cp, [jssp, #-16]!
0xffff7ab291d4   372  add fp, jssp, #0x10 (16)
0xffff7ab291d8   376  ldr x17, pc+24 (addr 0x0000ffff7ab291f0)    ;; lazy deoptimization bailout 0
0xffff7ab291dc   380  add x17, x17, x16
0xffff7ab291e0   384  br x17
0xffff7ab291e4   388  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab291e8   392  d63f03e0       constant
0xffff7ab291ec   396  d503201f       constant
0xffff7ab291f0   400  7a906000       constant
0xffff7ab291f4   404  0000ffff       constant


Safepoints (size = 21)
0xffff7ab29148   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0xffff7ab290a0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab290a8  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab290bc  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab290d0  embedded object  (0x20d04519 <the hole>)
0xffff7ab290d8  embedded object  (0x20d04519 <the hole>)
0xffff7ab290e0  embedded object  (0x20d04519 <the hole>)
0xffff7ab290e8  embedded object  (0x20d04519 <the hole>)
0xffff7ab2911c  code target (STUB)  (0xffff7ab06820)
0xffff7ab29140  code target (STUB)  (0xffff7ab06260)
0xffff7ab2914c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab29160  constant pool (size 88)
0xffff7ab291d8  runtime entry
0xffff7ab291e4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = InternalArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 509)
0xffff7ab29280     0  movz x16, #0xa00000000
0xffff7ab29284     4  sub csp, jssp, #0x10 (16)
0xffff7ab29288     8  stp fp, lr, [jssp, #-16]!
0xffff7ab2928c    12  mov fp, jssp
0xffff7ab29290    16  sub csp, jssp, #0x8 (8)
0xffff7ab29294    20  sub jssp, jssp, #0x8 (8)
0xffff7ab29298    24  stur x16, [fp, #-8]
0xffff7ab2929c    28  ldr x2, [fp]
0xffff7ab292a0    32  ldur x3, [x2, #-8]
0xffff7ab292a4    36  movz x16, #0xe00000000
0xffff7ab292a8    40  cmp x3, x16
0xffff7ab292ac    44  csel x3, fp, x2, ne
0xffff7ab292b0    48  ldr x2, [x3, #16]
0xffff7ab292b4    52  tbnz w2, #0, #+0xd0 (addr 0xffff7ab29384)
0xffff7ab292b8    56  asr x4, x2, #32
0xffff7ab292bc    60  movz w16, #0x257f
0xffff7ab292c0    64  cmp w4, w16, lsl #3
0xffff7ab292c4    68  b.hs #+0x16c (addr 0xffff7ab29430)
0xffff7ab292c8    72  cbz w4, #+0xc (addr 0xffff7ab292d4)
0xffff7ab292cc    76  mov x2, x4
0xffff7ab292d0    80  b #+0xc (addr 0xffff7ab292dc)
0xffff7ab292d4    84  movz x2, #0x4
0xffff7ab292d8    88  movz x4, #0x0
0xffff7ab292dc    92  lsl x3, x2, #32
0xffff7ab292e0    96  lsl x4, x4, #32
0xffff7ab292e4   100  lsl w5, w2, #3
0xffff7ab292e8   104  add w5, w5, #0x10 (16)
0xffff7ab292ec   108  cmp w5, #0x96000 (614400)
0xffff7ab292f0   112  b.hs #+0x148 (addr 0xffff7ab29438)
0xffff7ab292f4   116  add w0, w5, #0x20 (32)
0xffff7ab292f8   120  sxtw x0, w0
0xffff7ab292fc   124  movz x5, #0xe2c0
0xffff7ab29300   128  movk x5, #0x9ab, lsl #16
0xffff7ab29304   132  ldp x7, x16, [x5]
0xffff7ab29308   136  adds x6, x7, x0
0xffff7ab2930c   140  ccmp x6, x16, #nzCv, lo
0xffff7ab29310   144  b.hi #+0x9c (addr 0xffff7ab293ac)
0xffff7ab29314   148  str x6, [x5]
0xffff7ab29318   152  orr x7, x7, #0x1
0xffff7ab2931c   156  movz w0, #0x0
0xffff7ab29320   160  stur x0, [x7, #31]
0xffff7ab29324   164  ldur x0, [x1, #23]
0xffff7ab29328   168  stur x0, [x7, #-1]
0xffff7ab2932c   172  ldr x0, pc+204 (addr 0x0000ffff7ab293f8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab29330   176  stur x0, [x7, #7]
0xffff7ab29334   180  ldr x0, pc+204 (addr 0x0000ffff7ab29400)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab29338   184  stur x0, [x7, #15]
0xffff7ab2933c   188  stur x4, [x7, #23]
0xffff7ab29340   192  add x0, x7, #0x20 (32)
0xffff7ab29344   196  ldr x1, pc+196 (addr 0x0000ffff7ab29408)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab29348   200  stur x1, [x0, #-1]
0xffff7ab2934c   204  stur x3, [x0, #7]
0xffff7ab29350   208  stur x0, [x7, #15]
0xffff7ab29354   212  cmp w2, #0x0 (0)
0xffff7ab29358   216  b.le #+0x18 (addr 0xffff7ab29370)
0xffff7ab2935c   220  sub w2, w2, #0x1 (1)
0xffff7ab29360   224  ldr x1, pc+176 (addr 0x0000ffff7ab29410)    ;; object: 0x20d04519 <the hole>
0xffff7ab29364   228  add x3, x0, #0xf (15)
0xffff7ab29368   232  str x1, [x3, w2, sxtw #3]
0xffff7ab2936c   236  b #-0x18 (addr 0xffff7ab29354)
0xffff7ab29370   240  mov x0, x7
0xffff7ab29374   244  mov jssp, fp
0xffff7ab29378   248  ldp fp, lr, [jssp], #16
0xffff7ab2937c   252  add jssp, jssp, #0x10 (16)
0xffff7ab29380   256  ret
0xffff7ab29384   260  ldur x16, [x2, #-1]
0xffff7ab29388   264  ldr x17, [x26, #120]
0xffff7ab2938c   268  cmp x16, x17
0xffff7ab29390   272  b.ne #+0xb0 (addr 0xffff7ab29440)
0xffff7ab29394   276  ldur d29, [x2, #7]
0xffff7ab29398   280  fcvtzs w4, d29
0xffff7ab2939c   284  scvtf d0, w4
0xffff7ab293a0   288  fcmp d29, d0
0xffff7ab293a4   292  b.ne #+0x9c (addr 0xffff7ab29440)
0xffff7ab293a8   296  b #-0xec (addr 0xffff7ab292bc)
0xffff7ab293ac   300  movz x7, #0x0
0xffff7ab293b0   304  mov x16, lr
0xffff7ab293b4   308  ldr x17, pc+100 (addr 0x0000ffff7ab29418)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab293b8   312  blr x17
0xffff7ab293bc   316  lsl x0, x0, #32
0xffff7ab293c0   320  movz x10, #0x0
0xffff7ab293c4   324  sub csp, jssp, #0x10 (16)
0xffff7ab293c8   328  stp x10, x0, [jssp, #-16]!
0xffff7ab293cc   332  movz x0, #0x2
0xffff7ab293d0   336  movz x1, #0x5b88
0xffff7ab293d4   340  movk x1, #0xe2, lsl #16
0xffff7ab293d8   344  ldr x16, pc+72 (addr 0x0000ffff7ab29420)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab293dc   348  blr x16
0xffff7ab293e0   352  str x0, [jssp, #56]
0xffff7ab293e4   356  ldr x16, pc+68 (addr 0x0000ffff7ab29428)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab293e8   360  blr x16
0xffff7ab293ec   364  b #-0xd0 (addr 0xffff7ab2931c)
0xffff7ab293f0   368  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab293f4   372  d63f03e0       constant
0xffff7ab293f8   376  20d04201       constant
0xffff7ab293fc   380  00000000       constant
0xffff7ab29400   384  20d04201       constant
0xffff7ab29404   388  00000000       constant
0xffff7ab29408   392  4ec04259       constant
0xffff7ab2940c   396  00000000       constant
0xffff7ab29410   400  20d04519       constant
0xffff7ab29414   404  00000000       constant
0xffff7ab29418   408  7ab06820       constant
0xffff7ab2941c   412  0000ffff       constant
0xffff7ab29420   416  7ab06260       constant
0xffff7ab29424   420  0000ffff       constant
0xffff7ab29428   424  7ab068e0       constant
0xffff7ab2942c   428  0000ffff       constant
0xffff7ab29430   432  movz x16, #0x0
0xffff7ab29434   436  bl #+0x14 (addr 0xffff7ab29448)
0xffff7ab29438   440  movz x16, #0x8
0xffff7ab2943c   444  bl #+0xc (addr 0xffff7ab29448)
0xffff7ab29440   448  movz x16, #0x10
0xffff7ab29444   452  bl #+0x4 (addr 0xffff7ab29448)
0xffff7ab29448   456  ldr x17, pc+24 (addr 0x0000ffff7ab29460)    ;; lazy deoptimization bailout 0
0xffff7ab2944c   460  add x17, x17, x16
0xffff7ab29450   464  br x17
0xffff7ab29454   468  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab29458   472  d63f03e0       constant
0xffff7ab2945c   476  d503201f       constant
0xffff7ab29460   480  7a906000       constant
0xffff7ab29464   484  0000ffff       constant


Safepoints (size = 21)
0xffff7ab293e0   352  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab2932c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab29334  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab29344  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab29360  embedded object  (0x20d04519 <the hole>)
0xffff7ab293b4  code target (STUB)  (0xffff7ab06820)
0xffff7ab293d8  code target (STUB)  (0xffff7ab06260)
0xffff7ab293e4  code target (STUB)  (0xffff7ab068e0)
0xffff7ab293f0  constant pool (size 64)
0xffff7ab29448  runtime entry
0xffff7ab29454  constant pool (size 20)

--- End code ---
kind = STUB
major_key = InternalArraySingleArgumentConstructorStub
name = InternalArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 509)
0xffff7ab29280     0  movz x16, #0xa00000000
0xffff7ab29284     4  sub csp, jssp, #0x10 (16)
0xffff7ab29288     8  stp fp, lr, [jssp, #-16]!
0xffff7ab2928c    12  mov fp, jssp
0xffff7ab29290    16  sub csp, jssp, #0x8 (8)
0xffff7ab29294    20  sub jssp, jssp, #0x8 (8)
0xffff7ab29298    24  stur x16, [fp, #-8]
0xffff7ab2929c    28  ldr x2, [fp]
0xffff7ab292a0    32  ldur x3, [x2, #-8]
0xffff7ab292a4    36  movz x16, #0xe00000000
0xffff7ab292a8    40  cmp x3, x16
0xffff7ab292ac    44  csel x3, fp, x2, ne
0xffff7ab292b0    48  ldr x2, [x3, #16]
0xffff7ab292b4    52  tbnz w2, #0, #+0xd0 (addr 0xffff7ab29384)
0xffff7ab292b8    56  asr x4, x2, #32
0xffff7ab292bc    60  movz w16, #0x257f
0xffff7ab292c0    64  cmp w4, w16, lsl #3
0xffff7ab292c4    68  b.hs #+0x16c (addr 0xffff7ab29430)
0xffff7ab292c8    72  cbz w4, #+0xc (addr 0xffff7ab292d4)
0xffff7ab292cc    76  mov x2, x4
0xffff7ab292d0    80  b #+0xc (addr 0xffff7ab292dc)
0xffff7ab292d4    84  movz x2, #0x4
0xffff7ab292d8    88  movz x4, #0x0
0xffff7ab292dc    92  lsl x3, x2, #32
0xffff7ab292e0    96  lsl x4, x4, #32
0xffff7ab292e4   100  lsl w5, w2, #3
0xffff7ab292e8   104  add w5, w5, #0x10 (16)
0xffff7ab292ec   108  cmp w5, #0x96000 (614400)
0xffff7ab292f0   112  b.hs #+0x148 (addr 0xffff7ab29438)
0xffff7ab292f4   116  add w0, w5, #0x20 (32)
0xffff7ab292f8   120  sxtw x0, w0
0xffff7ab292fc   124  movz x5, #0xe2c0
0xffff7ab29300   128  movk x5, #0x9ab, lsl #16
0xffff7ab29304   132  ldp x7, x16, [x5]
0xffff7ab29308   136  adds x6, x7, x0
0xffff7ab2930c   140  ccmp x6, x16, #nzCv, lo
0xffff7ab29310   144  b.hi #+0x9c (addr 0xffff7ab293ac)
0xffff7ab29314   148  str x6, [x5]
0xffff7ab29318   152  orr x7, x7, #0x1
0xffff7ab2931c   156  movz w0, #0x0
0xffff7ab29320   160  stur x0, [x7, #31]
0xffff7ab29324   164  ldur x0, [x1, #23]
0xffff7ab29328   168  stur x0, [x7, #-1]
0xffff7ab2932c   172  ldr x0, pc+204 (addr 0x0000ffff7ab293f8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab29330   176  stur x0, [x7, #7]
0xffff7ab29334   180  ldr x0, pc+204 (addr 0x0000ffff7ab29400)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab29338   184  stur x0, [x7, #15]
0xffff7ab2933c   188  stur x4, [x7, #23]
0xffff7ab29340   192  add x0, x7, #0x20 (32)
0xffff7ab29344   196  ldr x1, pc+196 (addr 0x0000ffff7ab29408)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab29348   200  stur x1, [x0, #-1]
0xffff7ab2934c   204  stur x3, [x0, #7]
0xffff7ab29350   208  stur x0, [x7, #15]
0xffff7ab29354   212  cmp w2, #0x0 (0)
0xffff7ab29358   216  b.le #+0x18 (addr 0xffff7ab29370)
0xffff7ab2935c   220  sub w2, w2, #0x1 (1)
0xffff7ab29360   224  ldr x1, pc+176 (addr 0x0000ffff7ab29410)    ;; object: 0x20d04519 <the hole>
0xffff7ab29364   228  add x3, x0, #0xf (15)
0xffff7ab29368   232  str x1, [x3, w2, sxtw #3]
0xffff7ab2936c   236  b #-0x18 (addr 0xffff7ab29354)
0xffff7ab29370   240  mov x0, x7
0xffff7ab29374   244  mov jssp, fp
0xffff7ab29378   248  ldp fp, lr, [jssp], #16
0xffff7ab2937c   252  add jssp, jssp, #0x10 (16)
0xffff7ab29380   256  ret
0xffff7ab29384   260  ldur x16, [x2, #-1]
0xffff7ab29388   264  ldr x17, [x26, #120]
0xffff7ab2938c   268  cmp x16, x17
0xffff7ab29390   272  b.ne #+0xb0 (addr 0xffff7ab29440)
0xffff7ab29394   276  ldur d29, [x2, #7]
0xffff7ab29398   280  fcvtzs w4, d29
0xffff7ab2939c   284  scvtf d0, w4
0xffff7ab293a0   288  fcmp d29, d0
0xffff7ab293a4   292  b.ne #+0x9c (addr 0xffff7ab29440)
0xffff7ab293a8   296  b #-0xec (addr 0xffff7ab292bc)
0xffff7ab293ac   300  movz x7, #0x0
0xffff7ab293b0   304  mov x16, lr
0xffff7ab293b4   308  ldr x17, pc+100 (addr 0x0000ffff7ab29418)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab293b8   312  blr x17
0xffff7ab293bc   316  lsl x0, x0, #32
0xffff7ab293c0   320  movz x10, #0x0
0xffff7ab293c4   324  sub csp, jssp, #0x10 (16)
0xffff7ab293c8   328  stp x10, x0, [jssp, #-16]!
0xffff7ab293cc   332  movz x0, #0x2
0xffff7ab293d0   336  movz x1, #0x5b88
0xffff7ab293d4   340  movk x1, #0xe2, lsl #16
0xffff7ab293d8   344  ldr x16, pc+72 (addr 0x0000ffff7ab29420)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab293dc   348  blr x16
0xffff7ab293e0   352  str x0, [jssp, #56]
0xffff7ab293e4   356  ldr x16, pc+68 (addr 0x0000ffff7ab29428)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab293e8   360  blr x16
0xffff7ab293ec   364  b #-0xd0 (addr 0xffff7ab2931c)
0xffff7ab293f0   368  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab293f4   372  d63f03e0       constant
0xffff7ab293f8   376  20d04201       constant
0xffff7ab293fc   380  00000000       constant
0xffff7ab29400   384  20d04201       constant
0xffff7ab29404   388  00000000       constant
0xffff7ab29408   392  4ec04259       constant
0xffff7ab2940c   396  00000000       constant
0xffff7ab29410   400  20d04519       constant
0xffff7ab29414   404  00000000       constant
0xffff7ab29418   408  7ab06820       constant
0xffff7ab2941c   412  0000ffff       constant
0xffff7ab29420   416  7ab06260       constant
0xffff7ab29424   420  0000ffff       constant
0xffff7ab29428   424  7ab068e0       constant
0xffff7ab2942c   428  0000ffff       constant
0xffff7ab29430   432  movz x16, #0x0
0xffff7ab29434   436  bl #+0x14 (addr 0xffff7ab29448)
0xffff7ab29438   440  movz x16, #0x8
0xffff7ab2943c   444  bl #+0xc (addr 0xffff7ab29448)
0xffff7ab29440   448  movz x16, #0x10
0xffff7ab29444   452  bl #+0x4 (addr 0xffff7ab29448)
0xffff7ab29448   456  ldr x17, pc+24 (addr 0x0000ffff7ab29460)    ;; lazy deoptimization bailout 0
0xffff7ab2944c   460  add x17, x17, x16
0xffff7ab29450   464  br x17
0xffff7ab29454   468  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab29458   472  d63f03e0       constant
0xffff7ab2945c   476  d503201f       constant
0xffff7ab29460   480  7a906000       constant
0xffff7ab29464   484  0000ffff       constant


Safepoints (size = 21)
0xffff7ab293e0   352  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab2932c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab29334  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab29344  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab29360  embedded object  (0x20d04519 <the hole>)
0xffff7ab293b4  code target (STUB)  (0xffff7ab06820)
0xffff7ab293d8  code target (STUB)  (0xffff7ab06260)
0xffff7ab293e4  code target (STUB)  (0xffff7ab068e0)
0xffff7ab293f0  constant pool (size 64)
0xffff7ab29448  runtime entry
0xffff7ab29454  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = InternalArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 437)
0xffff7ab294e0     0  movz x16, #0xa00000000
0xffff7ab294e4     4  sub csp, jssp, #0x10 (16)
0xffff7ab294e8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab294ec    12  mov fp, jssp
0xffff7ab294f0    16  sub csp, jssp, #0x8 (8)
0xffff7ab294f4    20  sub jssp, jssp, #0x8 (8)
0xffff7ab294f8    24  stur x16, [fp, #-8]
0xffff7ab294fc    28  movz w16, #0x257f
0xffff7ab29500    32  cmp w0, w16, lsl #3
0xffff7ab29504    36  b.hs #+0x14c (addr 0xffff7ab29650)
0xffff7ab29508    40  lsl x2, x0, #32
0xffff7ab2950c    44  lsl w3, w0, #3
0xffff7ab29510    48  add w3, w3, #0x10 (16)
0xffff7ab29514    52  cmp w3, #0x96000 (614400)
0xffff7ab29518    56  b.hs #+0x140 (addr 0xffff7ab29658)
0xffff7ab2951c    60  add w3, w3, #0x20 (32)
0xffff7ab29520    64  sxtw x3, w3
0xffff7ab29524    68  movz x4, #0xe2c0
0xffff7ab29528    72  movk x4, #0x9ab, lsl #16
0xffff7ab2952c    76  ldp x6, x16, [x4]
0xffff7ab29530    80  adds x5, x6, x3
0xffff7ab29534    84  ccmp x5, x16, #nzCv, lo
0xffff7ab29538    88  b.hi #+0x9c (addr 0xffff7ab295d4)
0xffff7ab2953c    92  str x5, [x4]
0xffff7ab29540    96  orr x6, x6, #0x1
0xffff7ab29544   100  movz w3, #0x0
0xffff7ab29548   104  stur x3, [x6, #31]
0xffff7ab2954c   108  ldur x1, [x1, #23]
0xffff7ab29550   112  stur x1, [x6, #-1]
0xffff7ab29554   116  ldr x1, pc+204 (addr 0x0000ffff7ab29620)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab29558   120  stur x1, [x6, #7]
0xffff7ab2955c   124  ldr x1, pc+204 (addr 0x0000ffff7ab29628)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab29560   128  stur x1, [x6, #15]
0xffff7ab29564   132  stur x2, [x6, #23]
0xffff7ab29568   136  add x1, x6, #0x20 (32)
0xffff7ab2956c   140  ldr x3, pc+196 (addr 0x0000ffff7ab29630)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab29570   144  stur x3, [x1, #-1]
0xffff7ab29574   148  stur x2, [x1, #7]
0xffff7ab29578   152  stur x1, [x6, #15]
0xffff7ab2957c   156  ldr x2, [fp]
0xffff7ab29580   160  ldur x3, [x2, #-8]
0xffff7ab29584   164  movz x16, #0xe00000000
0xffff7ab29588   168  cmp x3, x16
0xffff7ab2958c   172  csel x3, fp, x2, ne
0xffff7ab29590   176  movz x2, #0x0
0xffff7ab29594   180  cmp w0, w2
0xffff7ab29598   184  b.le #+0x20 (addr 0xffff7ab295b8)
0xffff7ab2959c   188  sub w4, w0, w2
0xffff7ab295a0   192  add w4, w4, #0x1 (1)
0xffff7ab295a4   196  ldr x4, [x3, w4, uxtw #3]
0xffff7ab295a8   200  add x5, x1, #0xf (15)
0xffff7ab295ac   204  str x4, [x5, w2, sxtw #3]
0xffff7ab295b0   208  add w2, w2, #0x1 (1)
0xffff7ab295b4   212  b #-0x20 (addr 0xffff7ab29594)
0xffff7ab295b8   216  add w0, w0, #0x1 (1)
0xffff7ab295bc   220  lsl x1, x0, #32
0xffff7ab295c0   224  mov x0, x6
0xffff7ab295c4   228  mov jssp, fp
0xffff7ab295c8   232  ldp fp, lr, [jssp], #16
0xffff7ab295cc   236  add jssp, jssp, x1, lsr #29
0xffff7ab295d0   240  ret
0xffff7ab295d4   244  movz x6, #0x0
0xffff7ab295d8   248  mov x16, lr
0xffff7ab295dc   252  ldr x17, pc+92 (addr 0x0000ffff7ab29638)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab295e0   256  blr x17
0xffff7ab295e4   260  lsl x0, x3, #32
0xffff7ab295e8   264  movz x10, #0x0
0xffff7ab295ec   268  sub csp, jssp, #0x10 (16)
0xffff7ab295f0   272  stp x10, x0, [jssp, #-16]!
0xffff7ab295f4   276  movz x0, #0x2
0xffff7ab295f8   280  movz x1, #0x5b88
0xffff7ab295fc   284  movk x1, #0xe2, lsl #16
0xffff7ab29600   288  ldr x16, pc+64 (addr 0x0000ffff7ab29640)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab29604   292  blr x16
0xffff7ab29608   296  str x0, [jssp, #48]
0xffff7ab2960c   300  ldr x16, pc+60 (addr 0x0000ffff7ab29648)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab29610   304  blr x16
0xffff7ab29614   308  b #-0xd0 (addr 0xffff7ab29544)
0xffff7ab29618   312  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab2961c   316  d63f03e0       constant
0xffff7ab29620   320  20d04201       constant
0xffff7ab29624   324  00000000       constant
0xffff7ab29628   328  20d04201       constant
0xffff7ab2962c   332  00000000       constant
0xffff7ab29630   336  4ec04259       constant
0xffff7ab29634   340  00000000       constant
0xffff7ab29638   344  7ab06820       constant
0xffff7ab2963c   348  0000ffff       constant
0xffff7ab29640   352  7ab06260       constant
0xffff7ab29644   356  0000ffff       constant
0xffff7ab29648   360  7ab068e0       constant
0xffff7ab2964c   364  0000ffff       constant
0xffff7ab29650   368  movz x16, #0x0
0xffff7ab29654   372  bl #+0xc (addr 0xffff7ab29660)
0xffff7ab29658   376  movz x16, #0x8
0xffff7ab2965c   380  bl #+0x4 (addr 0xffff7ab29660)
0xffff7ab29660   384  ldr x17, pc+24 (addr 0x0000ffff7ab29678)    ;; lazy deoptimization bailout 0
0xffff7ab29664   388  add x17, x17, x16
0xffff7ab29668   392  br x17
0xffff7ab2966c   396  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab29670   400  d63f03e0       constant
0xffff7ab29674   404  d503201f       constant
0xffff7ab29678   408  7a906000       constant
0xffff7ab2967c   412  0000ffff       constant


Safepoints (size = 21)
0xffff7ab29608   296  000 | x1 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab29554  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab2955c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab2956c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab295dc  code target (STUB)  (0xffff7ab06820)
0xffff7ab29600  code target (STUB)  (0xffff7ab06260)
0xffff7ab2960c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab29618  constant pool (size 56)
0xffff7ab29660  runtime entry
0xffff7ab2966c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = InternalArrayNArgumentsConstructorStub
name = InternalArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 437)
0xffff7ab294e0     0  movz x16, #0xa00000000
0xffff7ab294e4     4  sub csp, jssp, #0x10 (16)
0xffff7ab294e8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab294ec    12  mov fp, jssp
0xffff7ab294f0    16  sub csp, jssp, #0x8 (8)
0xffff7ab294f4    20  sub jssp, jssp, #0x8 (8)
0xffff7ab294f8    24  stur x16, [fp, #-8]
0xffff7ab294fc    28  movz w16, #0x257f
0xffff7ab29500    32  cmp w0, w16, lsl #3
0xffff7ab29504    36  b.hs #+0x14c (addr 0xffff7ab29650)
0xffff7ab29508    40  lsl x2, x0, #32
0xffff7ab2950c    44  lsl w3, w0, #3
0xffff7ab29510    48  add w3, w3, #0x10 (16)
0xffff7ab29514    52  cmp w3, #0x96000 (614400)
0xffff7ab29518    56  b.hs #+0x140 (addr 0xffff7ab29658)
0xffff7ab2951c    60  add w3, w3, #0x20 (32)
0xffff7ab29520    64  sxtw x3, w3
0xffff7ab29524    68  movz x4, #0xe2c0
0xffff7ab29528    72  movk x4, #0x9ab, lsl #16
0xffff7ab2952c    76  ldp x6, x16, [x4]
0xffff7ab29530    80  adds x5, x6, x3
0xffff7ab29534    84  ccmp x5, x16, #nzCv, lo
0xffff7ab29538    88  b.hi #+0x9c (addr 0xffff7ab295d4)
0xffff7ab2953c    92  str x5, [x4]
0xffff7ab29540    96  orr x6, x6, #0x1
0xffff7ab29544   100  movz w3, #0x0
0xffff7ab29548   104  stur x3, [x6, #31]
0xffff7ab2954c   108  ldur x1, [x1, #23]
0xffff7ab29550   112  stur x1, [x6, #-1]
0xffff7ab29554   116  ldr x1, pc+204 (addr 0x0000ffff7ab29620)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab29558   120  stur x1, [x6, #7]
0xffff7ab2955c   124  ldr x1, pc+204 (addr 0x0000ffff7ab29628)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab29560   128  stur x1, [x6, #15]
0xffff7ab29564   132  stur x2, [x6, #23]
0xffff7ab29568   136  add x1, x6, #0x20 (32)
0xffff7ab2956c   140  ldr x3, pc+196 (addr 0x0000ffff7ab29630)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab29570   144  stur x3, [x1, #-1]
0xffff7ab29574   148  stur x2, [x1, #7]
0xffff7ab29578   152  stur x1, [x6, #15]
0xffff7ab2957c   156  ldr x2, [fp]
0xffff7ab29580   160  ldur x3, [x2, #-8]
0xffff7ab29584   164  movz x16, #0xe00000000
0xffff7ab29588   168  cmp x3, x16
0xffff7ab2958c   172  csel x3, fp, x2, ne
0xffff7ab29590   176  movz x2, #0x0
0xffff7ab29594   180  cmp w0, w2
0xffff7ab29598   184  b.le #+0x20 (addr 0xffff7ab295b8)
0xffff7ab2959c   188  sub w4, w0, w2
0xffff7ab295a0   192  add w4, w4, #0x1 (1)
0xffff7ab295a4   196  ldr x4, [x3, w4, uxtw #3]
0xffff7ab295a8   200  add x5, x1, #0xf (15)
0xffff7ab295ac   204  str x4, [x5, w2, sxtw #3]
0xffff7ab295b0   208  add w2, w2, #0x1 (1)
0xffff7ab295b4   212  b #-0x20 (addr 0xffff7ab29594)
0xffff7ab295b8   216  add w0, w0, #0x1 (1)
0xffff7ab295bc   220  lsl x1, x0, #32
0xffff7ab295c0   224  mov x0, x6
0xffff7ab295c4   228  mov jssp, fp
0xffff7ab295c8   232  ldp fp, lr, [jssp], #16
0xffff7ab295cc   236  add jssp, jssp, x1, lsr #29
0xffff7ab295d0   240  ret
0xffff7ab295d4   244  movz x6, #0x0
0xffff7ab295d8   248  mov x16, lr
0xffff7ab295dc   252  ldr x17, pc+92 (addr 0x0000ffff7ab29638)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab295e0   256  blr x17
0xffff7ab295e4   260  lsl x0, x3, #32
0xffff7ab295e8   264  movz x10, #0x0
0xffff7ab295ec   268  sub csp, jssp, #0x10 (16)
0xffff7ab295f0   272  stp x10, x0, [jssp, #-16]!
0xffff7ab295f4   276  movz x0, #0x2
0xffff7ab295f8   280  movz x1, #0x5b88
0xffff7ab295fc   284  movk x1, #0xe2, lsl #16
0xffff7ab29600   288  ldr x16, pc+64 (addr 0x0000ffff7ab29640)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab29604   292  blr x16
0xffff7ab29608   296  str x0, [jssp, #48]
0xffff7ab2960c   300  ldr x16, pc+60 (addr 0x0000ffff7ab29648)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab29610   304  blr x16
0xffff7ab29614   308  b #-0xd0 (addr 0xffff7ab29544)
0xffff7ab29618   312  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab2961c   316  d63f03e0       constant
0xffff7ab29620   320  20d04201       constant
0xffff7ab29624   324  00000000       constant
0xffff7ab29628   328  20d04201       constant
0xffff7ab2962c   332  00000000       constant
0xffff7ab29630   336  4ec04259       constant
0xffff7ab29634   340  00000000       constant
0xffff7ab29638   344  7ab06820       constant
0xffff7ab2963c   348  0000ffff       constant
0xffff7ab29640   352  7ab06260       constant
0xffff7ab29644   356  0000ffff       constant
0xffff7ab29648   360  7ab068e0       constant
0xffff7ab2964c   364  0000ffff       constant
0xffff7ab29650   368  movz x16, #0x0
0xffff7ab29654   372  bl #+0xc (addr 0xffff7ab29660)
0xffff7ab29658   376  movz x16, #0x8
0xffff7ab2965c   380  bl #+0x4 (addr 0xffff7ab29660)
0xffff7ab29660   384  ldr x17, pc+24 (addr 0x0000ffff7ab29678)    ;; lazy deoptimization bailout 0
0xffff7ab29664   388  add x17, x17, x16
0xffff7ab29668   392  br x17
0xffff7ab2966c   396  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab29670   400  d63f03e0       constant
0xffff7ab29674   404  d503201f       constant
0xffff7ab29678   408  7a906000       constant
0xffff7ab2967c   412  0000ffff       constant


Safepoints (size = 21)
0xffff7ab29608   296  000 | x1 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab29554  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab2955c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab2956c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab295dc  code target (STUB)  (0xffff7ab06820)
0xffff7ab29600  code target (STUB)  (0xffff7ab06260)
0xffff7ab2960c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab29618  constant pool (size 56)
0xffff7ab29660  runtime entry
0xffff7ab2966c  constant pool (size 20)


kind = STUB
major_key = InternalArrayConstructorStub
name = InternalArrayConstructorStub
compiler = unknown
Instructions (size = 176)
0xffff7ab29700     0  ldur x10, [x1, #23]
0xffff7ab29704     4  ldrb w3, [x10, #13]
0xffff7ab29708     8  ubfx w3, w3, #3, #5
0xffff7ab2970c    12  cmp w3, #0x2 (2)
0xffff7ab29710    16  b.eq #+0x28 (addr 0xffff7ab29738)
0xffff7ab29714    20  cbz x0, #+0x14 (addr 0xffff7ab29728)
0xffff7ab29718    24  cmp x0, #0x1 (1)
0xffff7ab2971c    28  b.ne #+0x14 (addr 0xffff7ab29730)
0xffff7ab29720    32  ldr x16, pc+88 (addr 0x0000ffff7ab29778)    ;; code: STUB, InternalArraySingleArgumentConstructorStub, minor: 3
0xffff7ab29724    36  br x16
0xffff7ab29728    40  ldr x16, pc+88 (addr 0x0000ffff7ab29780)    ;; code: STUB, InternalArrayNoArgumentConstructorStub, minor: 3
0xffff7ab2972c    44  br x16
0xffff7ab29730    48  ldr x16, pc+88 (addr 0x0000ffff7ab29788)    ;; code: STUB, InternalArrayNArgumentsConstructorStub, minor: 3
0xffff7ab29734    52  br x16
0xffff7ab29738    56  cbz x0, #+0x24 (addr 0xffff7ab2975c)
0xffff7ab2973c    60  cmp x0, #0x1 (1)
0xffff7ab29740    64  b.ne #+0x24 (addr 0xffff7ab29764)
0xffff7ab29744    68  ldr x10, [jssp]
0xffff7ab29748    72  cbz x10, #+0xc (addr 0xffff7ab29754)
0xffff7ab2974c    76  ldr x16, pc+68 (addr 0x0000ffff7ab29790)    ;; code: STUB, InternalArraySingleArgumentConstructorStub, minor: 3
0xffff7ab29750    80  br x16
0xffff7ab29754    84  ldr x16, pc+68 (addr 0x0000ffff7ab29798)    ;; code: STUB, InternalArraySingleArgumentConstructorStub, minor: 2
0xffff7ab29758    88  br x16
0xffff7ab2975c    92  ldr x16, pc+68 (addr 0x0000ffff7ab297a0)    ;; code: STUB, InternalArrayNoArgumentConstructorStub, minor: 2
0xffff7ab29760    96  br x16
0xffff7ab29764   100  ldr x16, pc+68 (addr 0x0000ffff7ab297a8)    ;; code: STUB, InternalArrayNArgumentsConstructorStub, minor: 2
0xffff7ab29768   104  br x16
0xffff7ab2976c   108  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab29770   112  d63f03e0       constant
0xffff7ab29774   116  d503201f       constant
0xffff7ab29778   120  7ab29280       constant
0xffff7ab2977c   124  0000ffff       constant
0xffff7ab29780   128  7ab29060       constant
0xffff7ab29784   132  0000ffff       constant
0xffff7ab29788   136  7ab294e0       constant
0xffff7ab2978c   140  0000ffff       constant
0xffff7ab29790   144  7ab29280       constant
0xffff7ab29794   148  0000ffff       constant
0xffff7ab29798   152  7ab28be0       constant
0xffff7ab2979c   156  0000ffff       constant
0xffff7ab297a0   160  7ab289c0       constant
0xffff7ab297a4   164  0000ffff       constant
0xffff7ab297a8   168  7ab28e40       constant
0xffff7ab297ac   172  0000ffff       constant


RelocInfo (size = 13)
0xffff7ab29720  code target (STUB)  (0xffff7ab29280)
0xffff7ab29728  code target (STUB)  (0xffff7ab29060)
0xffff7ab29730  code target (STUB)  (0xffff7ab294e0)
0xffff7ab2974c  code target (STUB)  (0xffff7ab29280)
0xffff7ab29754  code target (STUB)  (0xffff7ab28be0)
0xffff7ab2975c  code target (STUB)  (0xffff7ab289c0)
0xffff7ab29764  code target (STUB)  (0xffff7ab28e40)
0xffff7ab2976c  constant pool (size 68)


kind = STUB
major_key = ArrayConstructorStub
name = ArrayConstructorStub_Any
compiler = unknown
Instructions (size = 768)
0xffff7ab298c0     0  ldur cp, [x1, #39]
0xffff7ab298c4     4  cmp x3, x1
0xffff7ab298c8     8  b.ne #+0x1e0 (addr 0xffff7ab29aa8)
0xffff7ab298cc    12  ldr x16, [x26, #40]
0xffff7ab298d0    16  cmp x2, x16
0xffff7ab298d4    20  b.eq #+0x1a0 (addr 0xffff7ab29a74)
0xffff7ab298d8    24  ldursw x3, [x2, #11]
0xffff7ab298dc    28  and x3, x3, #0x7fff
0xffff7ab298e0    32  cbz x0, #+0xa4 (addr 0xffff7ab29984)
0xffff7ab298e4    36  cmp x0, #0x1 (1)
0xffff7ab298e8    40  b.ne #+0x114 (addr 0xffff7ab299fc)
0xffff7ab298ec    44  tbnz w3, #0, #+0x20 (addr 0xffff7ab2990c)
0xffff7ab298f0    48  ldr x10, [jssp]
0xffff7ab298f4    52  cbz x10, #+0x18 (addr 0xffff7ab2990c)
0xffff7ab298f8    56  orr x3, x3, #0x1
0xffff7ab298fc    60  ldur x11, [x2, #7]
0xffff7ab29900    64  movz x16, #0x100000000
0xffff7ab29904    68  add x11, x11, x16
0xffff7ab29908    72  stur x11, [x2, #7]
0xffff7ab2990c    76  cbnz x3, #+0xc (addr 0xffff7ab29918)
0xffff7ab29910    80  ldr x16, pc+448 (addr 0x0000ffff7ab29ad0)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 0
0xffff7ab29914    84  br x16
0xffff7ab29918    88  cmp x3, #0x1 (1)
0xffff7ab2991c    92  b.ne #+0xc (addr 0xffff7ab29928)
0xffff7ab29920    96  ldr x16, pc+440 (addr 0x0000ffff7ab29ad8)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 1
0xffff7ab29924   100  br x16
0xffff7ab29928   104  cmp x3, #0x4 (4)
0xffff7ab2992c   108  b.ne #+0xc (addr 0xffff7ab29938)
0xffff7ab29930   112  ldr x16, pc+432 (addr 0x0000ffff7ab29ae0)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 4
0xffff7ab29934   116  br x16
0xffff7ab29938   120  cmp x3, #0x5 (5)
0xffff7ab2993c   124  b.ne #+0xc (addr 0xffff7ab29948)
0xffff7ab29940   128  ldr x16, pc+424 (addr 0x0000ffff7ab29ae8)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 5
0xffff7ab29944   132  br x16
0xffff7ab29948   136  cmp x3, #0x2 (2)
0xffff7ab2994c   140  b.ne #+0xc (addr 0xffff7ab29958)
0xffff7ab29950   144  ldr x16, pc+416 (addr 0x0000ffff7ab29af0)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 2
0xffff7ab29954   148  br x16
0xffff7ab29958   152  cmp x3, #0x3 (3)
0xffff7ab2995c   156  b.ne #+0xc (addr 0xffff7ab29968)
0xffff7ab29960   160  ldr x16, pc+408 (addr 0x0000ffff7ab29af8)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 3
0xffff7ab29964   164  br x16
0xffff7ab29968   168  movz x0, #0x9f00000000
0xffff7ab2996c   172  sub csp, jssp, #0x8 (8)
0xffff7ab29970   176  str x0, [jssp, #-8]!
0xffff7ab29974   180  movz x0, #0x1
0xffff7ab29978   184  ldr x1, pc+392 (addr 0x0000ffff7ab29b00)    ;; external reference (Runtime::Abort)
0xffff7ab2997c   188  ldr x16, pc+396 (addr 0x0000ffff7ab29b08)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab29980   192  blr x16
0xffff7ab29984   196  cbnz x3, #+0xc (addr 0xffff7ab29990)
0xffff7ab29988   200  ldr x16, pc+392 (addr 0x0000ffff7ab29b10)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 0
0xffff7ab2998c   204  br x16
0xffff7ab29990   208  cmp x3, #0x1 (1)
0xffff7ab29994   212  b.ne #+0xc (addr 0xffff7ab299a0)
0xffff7ab29998   216  ldr x16, pc+384 (addr 0x0000ffff7ab29b18)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 1
0xffff7ab2999c   220  br x16
0xffff7ab299a0   224  cmp x3, #0x4 (4)
0xffff7ab299a4   228  b.ne #+0xc (addr 0xffff7ab299b0)
0xffff7ab299a8   232  ldr x16, pc+376 (addr 0x0000ffff7ab29b20)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 4
0xffff7ab299ac   236  br x16
0xffff7ab299b0   240  cmp x3, #0x5 (5)
0xffff7ab299b4   244  b.ne #+0xc (addr 0xffff7ab299c0)
0xffff7ab299b8   248  ldr x16, pc+368 (addr 0x0000ffff7ab29b28)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 5
0xffff7ab299bc   252  br x16
0xffff7ab299c0   256  cmp x3, #0x2 (2)
0xffff7ab299c4   260  b.ne #+0xc (addr 0xffff7ab299d0)
0xffff7ab299c8   264  ldr x16, pc+360 (addr 0x0000ffff7ab29b30)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 2
0xffff7ab299cc   268  br x16
0xffff7ab299d0   272  cmp x3, #0x3 (3)
0xffff7ab299d4   276  b.ne #+0xc (addr 0xffff7ab299e0)
0xffff7ab299d8   280  ldr x16, pc+352 (addr 0x0000ffff7ab29b38)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 3
0xffff7ab299dc   284  br x16
0xffff7ab299e0   288  movz x0, #0x9f00000000
0xffff7ab299e4   292  sub csp, jssp, #0x8 (8)
0xffff7ab299e8   296  str x0, [jssp, #-8]!
0xffff7ab299ec   300  movz x0, #0x1
0xffff7ab299f0   304  ldr x1, pc+336 (addr 0x0000ffff7ab29b40)    ;; external reference (Runtime::Abort)
0xffff7ab299f4   308  ldr x16, pc+340 (addr 0x0000ffff7ab29b48)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab299f8   312  blr x16
0xffff7ab299fc   316  cbnz x3, #+0xc (addr 0xffff7ab29a08)
0xffff7ab29a00   320  ldr x16, pc+336 (addr 0x0000ffff7ab29b50)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 0
0xffff7ab29a04   324  br x16
0xffff7ab29a08   328  cmp x3, #0x1 (1)
0xffff7ab29a0c   332  b.ne #+0xc (addr 0xffff7ab29a18)
0xffff7ab29a10   336  ldr x16, pc+328 (addr 0x0000ffff7ab29b58)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 1
0xffff7ab29a14   340  br x16
0xffff7ab29a18   344  cmp x3, #0x4 (4)
0xffff7ab29a1c   348  b.ne #+0xc (addr 0xffff7ab29a28)
0xffff7ab29a20   352  ldr x16, pc+320 (addr 0x0000ffff7ab29b60)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 4
0xffff7ab29a24   356  br x16
0xffff7ab29a28   360  cmp x3, #0x5 (5)
0xffff7ab29a2c   364  b.ne #+0xc (addr 0xffff7ab29a38)
0xffff7ab29a30   368  ldr x16, pc+312 (addr 0x0000ffff7ab29b68)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 5
0xffff7ab29a34   372  br x16
0xffff7ab29a38   376  cmp x3, #0x2 (2)
0xffff7ab29a3c   380  b.ne #+0xc (addr 0xffff7ab29a48)
0xffff7ab29a40   384  ldr x16, pc+304 (addr 0x0000ffff7ab29b70)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 2
0xffff7ab29a44   388  br x16
0xffff7ab29a48   392  cmp x3, #0x3 (3)
0xffff7ab29a4c   396  b.ne #+0xc (addr 0xffff7ab29a58)
0xffff7ab29a50   400  ldr x16, pc+296 (addr 0x0000ffff7ab29b78)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 3
0xffff7ab29a54   404  br x16
0xffff7ab29a58   408  movz x0, #0x9f00000000
0xffff7ab29a5c   412  sub csp, jssp, #0x8 (8)
0xffff7ab29a60   416  str x0, [jssp, #-8]!
0xffff7ab29a64   420  movz x0, #0x1
0xffff7ab29a68   424  ldr x1, pc+280 (addr 0x0000ffff7ab29b80)    ;; external reference (Runtime::Abort)
0xffff7ab29a6c   428  ldr x16, pc+284 (addr 0x0000ffff7ab29b88)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab29a70   432  blr x16
0xffff7ab29a74   436  cbz x0, #+0x24 (addr 0xffff7ab29a98)
0xffff7ab29a78   440  cmp x0, #0x1 (1)
0xffff7ab29a7c   444  b.ne #+0x24 (addr 0xffff7ab29aa0)
0xffff7ab29a80   448  ldr x10, [jssp]
0xffff7ab29a84   452  cbz x10, #+0xc (addr 0xffff7ab29a90)
0xffff7ab29a88   456  ldr x16, pc+264 (addr 0x0000ffff7ab29b90)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 257
0xffff7ab29a8c   460  br x16
0xffff7ab29a90   464  ldr x16, pc+264 (addr 0x0000ffff7ab29b98)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 256
0xffff7ab29a94   468  br x16
0xffff7ab29a98   472  ldr x16, pc+264 (addr 0x0000ffff7ab29ba0)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 256
0xffff7ab29a9c   476  br x16
0xffff7ab29aa0   480  ldr x16, pc+264 (addr 0x0000ffff7ab29ba8)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 256
0xffff7ab29aa4   484  br x16
0xffff7ab29aa8   488  str x1, [jssp, x0, lsl #3]
0xffff7ab29aac   492  add x0, x0, #0x3 (3)
0xffff7ab29ab0   496  sub csp, jssp, #0x10 (16)
0xffff7ab29ab4   500  stp x2, x3, [jssp, #-16]!
0xffff7ab29ab8   504  ldr x1, pc+248 (addr 0x0000ffff7ab29bb0)    ;; external reference (Runtime::NewArray)
0xffff7ab29abc   508  ldr x16, pc+252 (addr 0x0000ffff7ab29bb8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab29ac0   512  br x16
0xffff7ab29ac4   516  580007df       constant pool begin (num_const = 62)    ;; constant pool
0xffff7ab29ac8   520  d63f03e0       constant
0xffff7ab29acc   524  d503201f       constant
0xffff7ab29ad0   528  7ab082a0       constant
0xffff7ab29ad4   532  0000ffff       constant
0xffff7ab29ad8   536  7ab08840       constant
0xffff7ab29adc   540  0000ffff       constant
0xffff7ab29ae0   544  7ab08e00       constant
0xffff7ab29ae4   548  0000ffff       constant
0xffff7ab29ae8   552  7ab09080       constant
0xffff7ab29aec   556  0000ffff       constant
0xffff7ab29af0   560  7ab09300       constant
0xffff7ab29af4   564  0000ffff       constant
0xffff7ab29af8   568  7ab09580       constant
0xffff7ab29afc   572  0000ffff       constant
0xffff7ab29b00   576  00eda820       constant
0xffff7ab29b04   580  00000000       constant
0xffff7ab29b08   584  7ab06060       constant
0xffff7ab29b0c   588  0000ffff       constant
0xffff7ab29b10   592  7ab069a0       constant
0xffff7ab29b14   596  0000ffff       constant
0xffff7ab29b18   600  7ab06e00       constant
0xffff7ab29b1c   604  0000ffff       constant
0xffff7ab29b20   608  7ab07280       constant
0xffff7ab29b24   612  0000ffff       constant
0xffff7ab29b28   616  7ab07480       constant
0xffff7ab29b2c   620  0000ffff       constant
0xffff7ab29b30   624  7ab07680       constant
0xffff7ab29b34   628  0000ffff       constant
0xffff7ab29b38   632  7ab078a0       constant
0xffff7ab29b3c   636  0000ffff       constant
0xffff7ab29b40   640  00eda820       constant
0xffff7ab29b44   644  00000000       constant
0xffff7ab29b48   648  7ab06060       constant
0xffff7ab29b4c   652  0000ffff       constant
0xffff7ab29b50   656  7ab09fe0       constant
0xffff7ab29b54   660  0000ffff       constant
0xffff7ab29b58   664  7ab0a560       constant
0xffff7ab29b5c   668  0000ffff       constant
0xffff7ab29b60   672  7ab0aae0       constant
0xffff7ab29b64   676  0000ffff       constant
0xffff7ab29b68   680  7ab0ad40       constant
0xffff7ab29b6c   684  0000ffff       constant
0xffff7ab29b70   688  7ab0afa0       constant
0xffff7ab29b74   692  0000ffff       constant
0xffff7ab29b78   696  7ab0b1e0       constant
0xffff7ab29b7c   700  0000ffff       constant
0xffff7ab29b80   704  00eda820       constant
0xffff7ab29b84   708  00000000       constant
0xffff7ab29b88   712  7ab06060       constant
0xffff7ab29b8c   716  0000ffff       constant
0xffff7ab29b90   720  7ab08b80       constant
0xffff7ab29b94   724  0000ffff       constant
0xffff7ab29b98   728  7ab085e0       constant
0xffff7ab29b9c   732  0000ffff       constant
0xffff7ab29ba0   736  7ab06be0       constant
0xffff7ab29ba4   740  0000ffff       constant
0xffff7ab29ba8   744  7ab0a300       constant
0xffff7ab29bac   748  0000ffff       constant
0xffff7ab29bb0   752  00de2850       constant
0xffff7ab29bb4   756  00000000       constant
0xffff7ab29bb8   760  7ab06060       constant
0xffff7ab29bbc   764  0000ffff       constant


RelocInfo (size = 42)
0xffff7ab29910  code target (STUB)  (0xffff7ab082a0)
0xffff7ab29920  code target (STUB)  (0xffff7ab08840)
0xffff7ab29930  code target (STUB)  (0xffff7ab08e00)
0xffff7ab29940  code target (STUB)  (0xffff7ab09080)
0xffff7ab29950  code target (STUB)  (0xffff7ab09300)
0xffff7ab29960  code target (STUB)  (0xffff7ab09580)
0xffff7ab29978  external reference (Runtime::Abort)  (0xeda820)
0xffff7ab2997c  code target (STUB)  (0xffff7ab06060)
0xffff7ab29988  code target (STUB)  (0xffff7ab069a0)
0xffff7ab29998  code target (STUB)  (0xffff7ab06e00)
0xffff7ab299a8  code target (STUB)  (0xffff7ab07280)
0xffff7ab299b8  code target (STUB)  (0xffff7ab07480)
0xffff7ab299c8  code target (STUB)  (0xffff7ab07680)
0xffff7ab299d8  code target (STUB)  (0xffff7ab078a0)
0xffff7ab299f0  external reference (Runtime::Abort)  (0xeda820)
0xffff7ab299f4  code target (STUB)  (0xffff7ab06060)
0xffff7ab29a00  code target (STUB)  (0xffff7ab09fe0)
0xffff7ab29a10  code target (STUB)  (0xffff7ab0a560)
0xffff7ab29a20  code target (STUB)  (0xffff7ab0aae0)
0xffff7ab29a30  code target (STUB)  (0xffff7ab0ad40)
0xffff7ab29a40  code target (STUB)  (0xffff7ab0afa0)
0xffff7ab29a50  code target (STUB)  (0xffff7ab0b1e0)
0xffff7ab29a68  external reference (Runtime::Abort)  (0xeda820)
0xffff7ab29a6c  code target (STUB)  (0xffff7ab06060)
0xffff7ab29a88  code target (STUB)  (0xffff7ab08b80)
0xffff7ab29a90  code target (STUB)  (0xffff7ab085e0)
0xffff7ab29a98  code target (STUB)  (0xffff7ab06be0)
0xffff7ab29aa0  code target (STUB)  (0xffff7ab0a300)
0xffff7ab29ab8  external reference (Runtime::NewArray)  (0xde2850)
0xffff7ab29abc  code target (STUB)  (0xffff7ab06060)
0xffff7ab29ac4  constant pool (size 252)


kind = STUB
major_key = StringToNumberStub
name = StringToNumberStub
compiler = unknown
Instructions (size = 80)
0xffff7ab29cc0     0  ldur x2, [x0, #7]
0xffff7ab29cc4     4  movz x16, #0x2
0xffff7ab29cc8     8  movk x16, #0xe000, lsl #16
0xffff7ab29ccc    12  tst x2, x16
0xffff7ab29cd0    16  b.ne #+0x10 (addr 0xffff7ab29ce0)
0xffff7ab29cd4    20  ubfx x0, x2, #2, #24
0xffff7ab29cd8    24  lsl x0, x0, #32
0xffff7ab29cdc    28  ret
0xffff7ab29ce0    32  sub csp, jssp, #0x8 (8)
0xffff7ab29ce4    36  str x0, [jssp, #-8]!
0xffff7ab29ce8    40  movz x0, #0x1
0xffff7ab29cec    44  ldr x1, pc+20 (addr 0x0000ffff7ab29d00)    ;; external reference (Runtime::StringToNumber)
0xffff7ab29cf0    48  ldr x16, pc+24 (addr 0x0000ffff7ab29d08)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab29cf4    52  br x16
0xffff7ab29cf8    56  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab29cfc    60  d63f03e0       constant
0xffff7ab29d00    64  00e3bf28       constant
0xffff7ab29d04    68  00000000       constant
0xffff7ab29d08    72  7ab06060       constant
0xffff7ab29d0c    76  0000ffff       constant


RelocInfo (size = 9)
0xffff7ab29cec  external reference (Runtime::StringToNumber)  (0xe3bf28)
0xffff7ab29cf0  code target (STUB)  (0xffff7ab06060)
0xffff7ab29cf8  constant pool (size 24)


kind = STUB
major_key = NonNumberToNumberStub
name = NonNumberToNumberStub
compiler = unknown
Instructions (size = 96)
0xffff7ab29d80     0  ldur x1, [x0, #-1]
0xffff7ab29d84     4  ldrb w1, [x1, #11]
0xffff7ab29d88     8  cmp x1, #0x80 (128)
0xffff7ab29d8c    12  b.hs #+0xc (addr 0xffff7ab29d98)
0xffff7ab29d90    16  ldr x16, pc+56 (addr 0x0000ffff7ab29dc8)    ;; code: STUB, StringToNumberStub, minor: 0
0xffff7ab29d94    20  br x16
0xffff7ab29d98    24  cmp x1, #0x83 (131)
0xffff7ab29d9c    28  b.ne #+0xc (addr 0xffff7ab29da8)
0xffff7ab29da0    32  ldur x0, [x0, #15]
0xffff7ab29da4    36  ret
0xffff7ab29da8    40  sub csp, jssp, #0x8 (8)
0xffff7ab29dac    44  str x0, [jssp, #-8]!
0xffff7ab29db0    48  movz x0, #0x1
0xffff7ab29db4    52  ldr x1, pc+28 (addr 0x0000ffff7ab29dd0)    ;; external reference (Runtime::ToNumber)
0xffff7ab29db8    56  ldr x16, pc+32 (addr 0x0000ffff7ab29dd8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab29dbc    60  br x16
0xffff7ab29dc0    64  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab29dc4    68  d63f03e0       constant
0xffff7ab29dc8    72  7ab29cc0       constant
0xffff7ab29dcc    76  0000ffff       constant
0xffff7ab29dd0    80  00e48d48       constant
0xffff7ab29dd4    84  00000000       constant
0xffff7ab29dd8    88  7ab06060       constant
0xffff7ab29ddc    92  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab29d90  code target (STUB)  (0xffff7ab29cc0)
0xffff7ab29db4  external reference (Runtime::ToNumber)  (0xe48d48)
0xffff7ab29db8  code target (STUB)  (0xffff7ab06060)
0xffff7ab29dc0  constant pool (size 32)


kind = STUB
major_key = ToNumberStub
name = ToNumberStub
compiler = unknown
Instructions (size = 56)
0xffff7ab29e40     0  tbnz w0, #0, #+0x8 (addr 0xffff7ab29e48)
0xffff7ab29e44     4  ret
0xffff7ab29e48     8  ldur x1, [x0, #-1]
0xffff7ab29e4c    12  ldrb w1, [x1, #11]
0xffff7ab29e50    16  cmp x1, #0x81 (129)
0xffff7ab29e54    20  b.ne #+0x8 (addr 0xffff7ab29e5c)
0xffff7ab29e58    24  ret
0xffff7ab29e5c    28  ldr x16, pc+20 (addr 0x0000ffff7ab29e70)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0xffff7ab29e60    32  br x16
0xffff7ab29e64    36  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab29e68    40  d63f03e0       constant
0xffff7ab29e6c    44  d503201f       constant
0xffff7ab29e70    48  7ab29d80       constant
0xffff7ab29e74    52  0000ffff       constant


RelocInfo (size = 7)
0xffff7ab29e5c  code target (STUB)  (0xffff7ab29d80)
0xffff7ab29e64  constant pool (size 20)


kind = STUB
major_key = DoubleToIStub
name = DoubleToIStub
compiler = unknown
Instructions (size = 60)
0xffff7ab2a3e0     0  sub csp, jssp, #0x10 (16)
0xffff7ab2a3e4     4  stp x2, x1, [jssp, #-16]!
0xffff7ab2a3e8     8  ldur x5, [x0, #7]
0xffff7ab2a3ec    12  ubfx x1, x5, #52, #11
0xffff7ab2a3f0    16  cmp x1, #0x453 (1107)
0xffff7ab2a3f4    20  csel x5, xzr, x5, ge
0xffff7ab2a3f8    24  b.ge #+0x1c (addr 0xffff7ab2a414)
0xffff7ab2a3fc    28  ubfx x2, x5, #0, #52
0xffff7ab2a400    32  orr x2, x2, #0x10000000000000
0xffff7ab2a404    36  tst x5, #0x8000000000000000
0xffff7ab2a408    40  cneg x2, x2, ne
0xffff7ab2a40c    44  sub x1, x1, #0x433 (1075)
0xffff7ab2a410    48  lsl x5, x2, x1
0xffff7ab2a414    52  ldp x2, x1, [jssp], #16
0xffff7ab2a418    56  ret


RelocInfo (size = 0)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = NumberToStringStub
compiler = crankshaft
Instructions (size = 477)
0xffff7ab2a480     0  movz x16, #0xa00000000
0xffff7ab2a484     4  sub csp, jssp, #0x10 (16)
0xffff7ab2a488     8  stp fp, lr, [jssp, #-16]!
0xffff7ab2a48c    12  mov fp, jssp
0xffff7ab2a490    16  sub csp, jssp, #0x28 (40)
0xffff7ab2a494    20  sub jssp, jssp, #0x28 (40)
0xffff7ab2a498    24  stur x16, [fp, #-8]
0xffff7ab2a49c    28  str d0, [jssp]
0xffff7ab2a4a0    32  str d1, [jssp, #8]
0xffff7ab2a4a4    36  stur x0, [fp, #-16]
0xffff7ab2a4a8    40  stur cp, [fp, #-24]
0xffff7ab2a4ac    44  mov x1, cp
0xffff7ab2a4b0    48  ldr x2, [x26, #368]
0xffff7ab2a4b4    52  ldur w3, [x2, #11]
0xffff7ab2a4b8    56  asr w3, w3, #1
0xffff7ab2a4bc    60  sub w3, w3, #0x1 (1)
0xffff7ab2a4c0    64  tbz w0, #0, #+0x60 (addr 0xffff7ab2a520)
0xffff7ab2a4c4    68  ldur x4, [x0, #-1]
0xffff7ab2a4c8    72  ldr x16, pc+296 (addr 0x0000ffff7ab2a5f0)    ;; object: 0x4ec04411 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab2a4cc    76  cmp x4, x16
0xffff7ab2a4d0    80  b.eq #+0x8 (addr 0xffff7ab2a4d8)
0xffff7ab2a4d4    84  b #+0x13c (addr 0xffff7ab2a610)
0xffff7ab2a4d8    88  ldur w4, [x0, #7]
0xffff7ab2a4dc    92  ldur w5, [x0, #11]
0xffff7ab2a4e0    96  eor w4, w5, w4
0xffff7ab2a4e4   100  and w3, w4, w3
0xffff7ab2a4e8   104  lsl w3, w3, #1
0xffff7ab2a4ec   108  add x4, x2, #0xf (15)
0xffff7ab2a4f0   112  ldr x5, [x4, w3, sxtw #3]
0xffff7ab2a4f4   116  tbz w5, #0, #+0x4c (addr 0xffff7ab2a540)
0xffff7ab2a4f8   120  ldur x4, [x5, #-1]
0xffff7ab2a4fc   124  ldr x16, pc+252 (addr 0x0000ffff7ab2a5f8)    ;; object: 0x4ec04411 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab2a500   128  cmp x4, x16
0xffff7ab2a504   132  b.ne #+0x3c (addr 0xffff7ab2a540)
0xffff7ab2a508   136  ldur d0, [x5, #7]
0xffff7ab2a50c   140  ldur d1, [x0, #7]
0xffff7ab2a510   144  fcmp d0, d1
0xffff7ab2a514   148  b.vs #+0x2c (addr 0xffff7ab2a540)
0xffff7ab2a518   152  b.eq #+0x4c (addr 0xffff7ab2a564)
0xffff7ab2a51c   156  b #+0x24 (addr 0xffff7ab2a540)
0xffff7ab2a520   160  tbnz w0, #0, #+0x68 (addr 0xffff7ab2a588)
0xffff7ab2a524   164  asr x5, x0, #32
0xffff7ab2a528   168  and w3, w5, w3
0xffff7ab2a52c   172  lsl w3, w3, #1
0xffff7ab2a530   176  add x4, x2, #0xf (15)
0xffff7ab2a534   180  ldr x5, [x4, w3, sxtw #3]
0xffff7ab2a538   184  cmp x0, x5
0xffff7ab2a53c   188  b.eq #+0x28 (addr 0xffff7ab2a564)
0xffff7ab2a540   192  sub csp, jssp, #0x8 (8)
0xffff7ab2a544   196  str x0, [jssp, #-8]!
0xffff7ab2a548   200  mov cp, x1
0xffff7ab2a54c   204  movz x0, #0x1
0xffff7ab2a550   208  movz x1, #0xce00
0xffff7ab2a554   212  movk x1, #0xe3, lsl #16
0xffff7ab2a558   216  ldr x16, pc+168 (addr 0x0000ffff7ab2a600)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab2a55c   220  blr x16
0xffff7ab2a560   224  b #+0x10 (addr 0xffff7ab2a570)
0xffff7ab2a564   228  add x0, x2, #0x17 (23)
0xffff7ab2a568   232  ldr x1, [x0, w3, sxtw #3]
0xffff7ab2a56c   236  mov x0, x1
0xffff7ab2a570   240  ldur cp, [fp, #-24]
0xffff7ab2a574   244  ldr d0, [jssp]
0xffff7ab2a578   248  ldr d1, [jssp, #8]
0xffff7ab2a57c   252  mov jssp, fp
0xffff7ab2a580   256  ldp fp, lr, [jssp], #16
0xffff7ab2a584   260  ret
0xffff7ab2a588   264  ldur x16, [x0, #-1]
0xffff7ab2a58c   268  ldr x17, [x26, #120]
0xffff7ab2a590   272  cmp x16, x17
0xffff7ab2a594   276  b.ne #+0x30 (addr 0xffff7ab2a5c4)
0xffff7ab2a598   280  ldur d30, [x0, #7]
0xffff7ab2a59c   284  fcvtzs x5, d30
0xffff7ab2a5a0   288  cmp x5, #0x1 (1)
0xffff7ab2a5a4   292  ccmn x5, #1, #nzcV, vc
0xffff7ab2a5a8   296  b.vc #+0x18 (addr 0xffff7ab2a5c0)
0xffff7ab2a5ac   300  sub csp, jssp, #0x8 (8)
0xffff7ab2a5b0   304  str lr, [jssp, #-8]!
0xffff7ab2a5b4   308  ldr x16, pc+84 (addr 0x0000ffff7ab2a608)    ;; code: STUB, DoubleToIStub, minor: 127296
0xffff7ab2a5b8   312  blr x16
0xffff7ab2a5bc   316  ldr lr, [jssp], #8
0xffff7ab2a5c0   320  b #+0x24 (addr 0xffff7ab2a5e4)
0xffff7ab2a5c4   324  ldp x5, x4, [x26, #64]
0xffff7ab2a5c8   328  cmp x0, x5
0xffff7ab2a5cc   332  cset x5, eq
0xffff7ab2a5d0   336  ccmp x0, x4, #nZcv, ne
0xffff7ab2a5d4   340  b.eq #+0x10 (addr 0xffff7ab2a5e4)
0xffff7ab2a5d8   344  ldr x16, [x26, #40]
0xffff7ab2a5dc   348  cmp x0, x16
0xffff7ab2a5e0   352  b.ne #+0x38 (addr 0xffff7ab2a618)
0xffff7ab2a5e4   356  b #-0xbc (addr 0xffff7ab2a528)
0xffff7ab2a5e8   360  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7ab2a5ec   364  d63f03e0       constant
0xffff7ab2a5f0   368  4ec04411       constant
0xffff7ab2a5f4   372  00000000       constant
0xffff7ab2a5f8   376  4ec04411       constant
0xffff7ab2a5fc   380  00000000       constant
0xffff7ab2a600   384  7ab06060       constant
0xffff7ab2a604   388  0000ffff       constant
0xffff7ab2a608   392  7ab2a3e0       constant
0xffff7ab2a60c   396  0000ffff       constant
0xffff7ab2a610   400  movz x16, #0x0
0xffff7ab2a614   404  bl #+0xc (addr 0xffff7ab2a620)
0xffff7ab2a618   408  movz x16, #0x10
0xffff7ab2a61c   412  bl #+0x4 (addr 0xffff7ab2a620)
0xffff7ab2a620   416  ldr d0, [jssp]
0xffff7ab2a624   420  ldr d1, [jssp, #8]
0xffff7ab2a628   424  ldr x17, pc+24 (addr 0x0000ffff7ab2a640)    ;; lazy deoptimization bailout 0
0xffff7ab2a62c   428  add x17, x17, x16
0xffff7ab2a630   432  br x17
0xffff7ab2a634   436  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab2a638   440  d63f03e0       constant
0xffff7ab2a63c   444  d503201f       constant
0xffff7ab2a640   448  7a906000       constant
0xffff7ab2a644   452  0000ffff       constant


Safepoints (size = 21)
0xffff7ab2a560   224  0011000 (sp -> fp)       1

RelocInfo (size = 26)
0xffff7ab2a4c8  embedded object  (0x4ec04411 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab2a4fc  embedded object  (0x4ec04411 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab2a558  code target (STUB)  (0xffff7ab06060)
0xffff7ab2a5b4  code target (STUB)  (0xffff7ab2a3e0)
0xffff7ab2a5e8  constant pool (size 40)
0xffff7ab2a628  runtime entry
0xffff7ab2a634  constant pool (size 20)

--- End code ---
kind = STUB
major_key = NumberToStringStub
name = NumberToStringStub
compiler = crankshaft
Instructions (size = 477)
0xffff7ab2a480     0  movz x16, #0xa00000000
0xffff7ab2a484     4  sub csp, jssp, #0x10 (16)
0xffff7ab2a488     8  stp fp, lr, [jssp, #-16]!
0xffff7ab2a48c    12  mov fp, jssp
0xffff7ab2a490    16  sub csp, jssp, #0x28 (40)
0xffff7ab2a494    20  sub jssp, jssp, #0x28 (40)
0xffff7ab2a498    24  stur x16, [fp, #-8]
0xffff7ab2a49c    28  str d0, [jssp]
0xffff7ab2a4a0    32  str d1, [jssp, #8]
0xffff7ab2a4a4    36  stur x0, [fp, #-16]
0xffff7ab2a4a8    40  stur cp, [fp, #-24]
0xffff7ab2a4ac    44  mov x1, cp
0xffff7ab2a4b0    48  ldr x2, [x26, #368]
0xffff7ab2a4b4    52  ldur w3, [x2, #11]
0xffff7ab2a4b8    56  asr w3, w3, #1
0xffff7ab2a4bc    60  sub w3, w3, #0x1 (1)
0xffff7ab2a4c0    64  tbz w0, #0, #+0x60 (addr 0xffff7ab2a520)
0xffff7ab2a4c4    68  ldur x4, [x0, #-1]
0xffff7ab2a4c8    72  ldr x16, pc+296 (addr 0x0000ffff7ab2a5f0)    ;; object: 0x4ec04411 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab2a4cc    76  cmp x4, x16
0xffff7ab2a4d0    80  b.eq #+0x8 (addr 0xffff7ab2a4d8)
0xffff7ab2a4d4    84  b #+0x13c (addr 0xffff7ab2a610)
0xffff7ab2a4d8    88  ldur w4, [x0, #7]
0xffff7ab2a4dc    92  ldur w5, [x0, #11]
0xffff7ab2a4e0    96  eor w4, w5, w4
0xffff7ab2a4e4   100  and w3, w4, w3
0xffff7ab2a4e8   104  lsl w3, w3, #1
0xffff7ab2a4ec   108  add x4, x2, #0xf (15)
0xffff7ab2a4f0   112  ldr x5, [x4, w3, sxtw #3]
0xffff7ab2a4f4   116  tbz w5, #0, #+0x4c (addr 0xffff7ab2a540)
0xffff7ab2a4f8   120  ldur x4, [x5, #-1]
0xffff7ab2a4fc   124  ldr x16, pc+252 (addr 0x0000ffff7ab2a5f8)    ;; object: 0x4ec04411 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab2a500   128  cmp x4, x16
0xffff7ab2a504   132  b.ne #+0x3c (addr 0xffff7ab2a540)
0xffff7ab2a508   136  ldur d0, [x5, #7]
0xffff7ab2a50c   140  ldur d1, [x0, #7]
0xffff7ab2a510   144  fcmp d0, d1
0xffff7ab2a514   148  b.vs #+0x2c (addr 0xffff7ab2a540)
0xffff7ab2a518   152  b.eq #+0x4c (addr 0xffff7ab2a564)
0xffff7ab2a51c   156  b #+0x24 (addr 0xffff7ab2a540)
0xffff7ab2a520   160  tbnz w0, #0, #+0x68 (addr 0xffff7ab2a588)
0xffff7ab2a524   164  asr x5, x0, #32
0xffff7ab2a528   168  and w3, w5, w3
0xffff7ab2a52c   172  lsl w3, w3, #1
0xffff7ab2a530   176  add x4, x2, #0xf (15)
0xffff7ab2a534   180  ldr x5, [x4, w3, sxtw #3]
0xffff7ab2a538   184  cmp x0, x5
0xffff7ab2a53c   188  b.eq #+0x28 (addr 0xffff7ab2a564)
0xffff7ab2a540   192  sub csp, jssp, #0x8 (8)
0xffff7ab2a544   196  str x0, [jssp, #-8]!
0xffff7ab2a548   200  mov cp, x1
0xffff7ab2a54c   204  movz x0, #0x1
0xffff7ab2a550   208  movz x1, #0xce00
0xffff7ab2a554   212  movk x1, #0xe3, lsl #16
0xffff7ab2a558   216  ldr x16, pc+168 (addr 0x0000ffff7ab2a600)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab2a55c   220  blr x16
0xffff7ab2a560   224  b #+0x10 (addr 0xffff7ab2a570)
0xffff7ab2a564   228  add x0, x2, #0x17 (23)
0xffff7ab2a568   232  ldr x1, [x0, w3, sxtw #3]
0xffff7ab2a56c   236  mov x0, x1
0xffff7ab2a570   240  ldur cp, [fp, #-24]
0xffff7ab2a574   244  ldr d0, [jssp]
0xffff7ab2a578   248  ldr d1, [jssp, #8]
0xffff7ab2a57c   252  mov jssp, fp
0xffff7ab2a580   256  ldp fp, lr, [jssp], #16
0xffff7ab2a584   260  ret
0xffff7ab2a588   264  ldur x16, [x0, #-1]
0xffff7ab2a58c   268  ldr x17, [x26, #120]
0xffff7ab2a590   272  cmp x16, x17
0xffff7ab2a594   276  b.ne #+0x30 (addr 0xffff7ab2a5c4)
0xffff7ab2a598   280  ldur d30, [x0, #7]
0xffff7ab2a59c   284  fcvtzs x5, d30
0xffff7ab2a5a0   288  cmp x5, #0x1 (1)
0xffff7ab2a5a4   292  ccmn x5, #1, #nzcV, vc
0xffff7ab2a5a8   296  b.vc #+0x18 (addr 0xffff7ab2a5c0)
0xffff7ab2a5ac   300  sub csp, jssp, #0x8 (8)
0xffff7ab2a5b0   304  str lr, [jssp, #-8]!
0xffff7ab2a5b4   308  ldr x16, pc+84 (addr 0x0000ffff7ab2a608)    ;; code: STUB, DoubleToIStub, minor: 127296
0xffff7ab2a5b8   312  blr x16
0xffff7ab2a5bc   316  ldr lr, [jssp], #8
0xffff7ab2a5c0   320  b #+0x24 (addr 0xffff7ab2a5e4)
0xffff7ab2a5c4   324  ldp x5, x4, [x26, #64]
0xffff7ab2a5c8   328  cmp x0, x5
0xffff7ab2a5cc   332  cset x5, eq
0xffff7ab2a5d0   336  ccmp x0, x4, #nZcv, ne
0xffff7ab2a5d4   340  b.eq #+0x10 (addr 0xffff7ab2a5e4)
0xffff7ab2a5d8   344  ldr x16, [x26, #40]
0xffff7ab2a5dc   348  cmp x0, x16
0xffff7ab2a5e0   352  b.ne #+0x38 (addr 0xffff7ab2a618)
0xffff7ab2a5e4   356  b #-0xbc (addr 0xffff7ab2a528)
0xffff7ab2a5e8   360  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7ab2a5ec   364  d63f03e0       constant
0xffff7ab2a5f0   368  4ec04411       constant
0xffff7ab2a5f4   372  00000000       constant
0xffff7ab2a5f8   376  4ec04411       constant
0xffff7ab2a5fc   380  00000000       constant
0xffff7ab2a600   384  7ab06060       constant
0xffff7ab2a604   388  0000ffff       constant
0xffff7ab2a608   392  7ab2a3e0       constant
0xffff7ab2a60c   396  0000ffff       constant
0xffff7ab2a610   400  movz x16, #0x0
0xffff7ab2a614   404  bl #+0xc (addr 0xffff7ab2a620)
0xffff7ab2a618   408  movz x16, #0x10
0xffff7ab2a61c   412  bl #+0x4 (addr 0xffff7ab2a620)
0xffff7ab2a620   416  ldr d0, [jssp]
0xffff7ab2a624   420  ldr d1, [jssp, #8]
0xffff7ab2a628   424  ldr x17, pc+24 (addr 0x0000ffff7ab2a640)    ;; lazy deoptimization bailout 0
0xffff7ab2a62c   428  add x17, x17, x16
0xffff7ab2a630   432  br x17
0xffff7ab2a634   436  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab2a638   440  d63f03e0       constant
0xffff7ab2a63c   444  d503201f       constant
0xffff7ab2a640   448  7a906000       constant
0xffff7ab2a644   452  0000ffff       constant


Safepoints (size = 21)
0xffff7ab2a560   224  0011000 (sp -> fp)       1

RelocInfo (size = 26)
0xffff7ab2a4c8  embedded object  (0x4ec04411 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab2a4fc  embedded object  (0x4ec04411 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab2a558  code target (STUB)  (0xffff7ab06060)
0xffff7ab2a5b4  code target (STUB)  (0xffff7ab2a3e0)
0xffff7ab2a5e8  constant pool (size 40)
0xffff7ab2a628  runtime entry
0xffff7ab2a634  constant pool (size 20)


kind = STUB
major_key = ToStringStub
name = ToStringStub
compiler = unknown
Instructions (size = 112)
0xffff7ab2a6c0     0  tbz w0, #0, #+0x20 (addr 0xffff7ab2a6e0)
0xffff7ab2a6c4     4  ldur x1, [x0, #-1]
0xffff7ab2a6c8     8  ldrb w1, [x1, #11]
0xffff7ab2a6cc    12  cmp x1, #0x80 (128)
0xffff7ab2a6d0    16  b.hs #+0x8 (addr 0xffff7ab2a6d8)
0xffff7ab2a6d4    20  ret
0xffff7ab2a6d8    24  cmp x1, #0x81 (129)
0xffff7ab2a6dc    28  b.ne #+0xc (addr 0xffff7ab2a6e8)
0xffff7ab2a6e0    32  ldr x16, pc+56 (addr 0x0000ffff7ab2a718)    ;; code: STUB, NumberToStringStub, minor: 0
0xffff7ab2a6e4    36  br x16
0xffff7ab2a6e8    40  cmp x1, #0x83 (131)
0xffff7ab2a6ec    44  b.ne #+0xc (addr 0xffff7ab2a6f8)
0xffff7ab2a6f0    48  ldur x0, [x0, #7]
0xffff7ab2a6f4    52  ret
0xffff7ab2a6f8    56  sub csp, jssp, #0x8 (8)
0xffff7ab2a6fc    60  str x0, [jssp, #-8]!
0xffff7ab2a700    64  movz x0, #0x1
0xffff7ab2a704    68  ldr x1, pc+28 (addr 0x0000ffff7ab2a720)    ;; external reference (Runtime::ToString)
0xffff7ab2a708    72  ldr x16, pc+32 (addr 0x0000ffff7ab2a728)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab2a70c    76  br x16
0xffff7ab2a710    80  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab2a714    84  d63f03e0       constant
0xffff7ab2a718    88  7ab2a480       constant
0xffff7ab2a71c    92  0000ffff       constant
0xffff7ab2a720    96  00e49508       constant
0xffff7ab2a724   100  00000000       constant
0xffff7ab2a728   104  7ab06060       constant
0xffff7ab2a72c   108  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab2a6e0  code target (STUB)  (0xffff7ab2a480)
0xffff7ab2a704  external reference (Runtime::ToString)  (0xe49508)
0xffff7ab2a708  code target (STUB)  (0xffff7ab06060)
0xffff7ab2a710  constant pool (size 32)


--- Code ---
kind = BUILTIN
name = MathCeil
compiler = turbofan
Instructions (size = 338)
0xffff7ab2b4a0     0  sub jssp, jssp, #0x20 (32)
0xffff7ab2b4a4     4  sub csp, csp, #0x20 (32)
0xffff7ab2b4a8     8  stp x1, cp, [jssp]
0xffff7ab2b4ac    12  stp fp, lr, [jssp, #16]
0xffff7ab2b4b0    16  add fp, jssp, #0x10 (16)
0xffff7ab2b4b4    20  sub csp, jssp, #0x10 (16)
0xffff7ab2b4b8    24  sub jssp, jssp, #0x10 (16)
0xffff7ab2b4bc    28  ldr x0, [jssp, #48]
0xffff7ab2b4c0    32  and x1, x0, #0x1
0xffff7ab2b4c4    36  cmp x1, #0x0 (0)
0xffff7ab2b4c8    40  b.eq #+0x98 (addr 0xffff7ab2b560)
0xffff7ab2b4cc    44  ldur x1, [x0, #-1]
0xffff7ab2b4d0    48  ldr x2, [x26, #120]
0xffff7ab2b4d4    52  cmp x1, x2
0xffff7ab2b4d8    56  b.ne #+0x8c (addr 0xffff7ab2b564)
0xffff7ab2b4dc    60  ldur d0, [x0, #7]
0xffff7ab2b4e0    64  frintp d0, d0
0xffff7ab2b4e4    68  fcvtzs w0, d0
0xffff7ab2b4e8    72  scvtf d1, w0
0xffff7ab2b4ec    76  fcmp d0, d1
0xffff7ab2b4f0    80  b.ne #+0x24 (addr 0xffff7ab2b514)
0xffff7ab2b4f4    84  fcmp d0, #0.0
0xffff7ab2b4f8    88  b.ne #+0x14 (addr 0xffff7ab2b50c)
0xffff7ab2b4fc    92  fmov x1, d0
0xffff7ab2b500    96  lsr x1, x1, #32
0xffff7ab2b504   100  cmp w1, #0x0 (0)
0xffff7ab2b508   104  b.lt #+0xc (addr 0xffff7ab2b514)
0xffff7ab2b50c   108  lsl x0, x0, #32
0xffff7ab2b510   112  b #+0x40 (addr 0xffff7ab2b550)
0xffff7ab2b514   116  movz x0, #0xe2c0
0xffff7ab2b518   120  movk x0, #0x9ab, lsl #16
0xffff7ab2b51c   124  ldr x1, [x0]
0xffff7ab2b520   128  movz x2, #0xe2c8
0xffff7ab2b524   132  movk x2, #0x9ab, lsl #16
0xffff7ab2b528   136  ldr x2, [x2]
0xffff7ab2b52c   140  sub x2, x2, x1
0xffff7ab2b530   144  cmp x2, #0x10 (16)
0xffff7ab2b534   148  b.lt #+0x40 (addr 0xffff7ab2b574)
0xffff7ab2b538   152  add x2, x1, #0x10 (16)
0xffff7ab2b53c   156  str x2, [x0]
0xffff7ab2b540   160  add x0, x1, #0x1 (1)
0xffff7ab2b544   164  ldr x1, [x26, #120]
0xffff7ab2b548   168  stur x1, [x0, #-1]
0xffff7ab2b54c   172  stur d0, [x0, #7]
0xffff7ab2b550   176  mov jssp, fp
0xffff7ab2b554   180  ldp fp, lr, [jssp], #16
0xffff7ab2b558   184  add jssp, jssp, #0x10 (16)
0xffff7ab2b55c   188  ret
0xffff7ab2b560   192  b #-0x10 (addr 0xffff7ab2b550)
0xffff7ab2b564   196  ldr cp, [jssp, #24]
0xffff7ab2b568   200  ldr x16, pc+88 (addr 0x0000ffff7ab2b5c0)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0xffff7ab2b56c   204  blr x16
0xffff7ab2b570   208  b #-0xb0 (addr 0xffff7ab2b4c0)
0xffff7ab2b574   212  movz x0, #0x0
0xffff7ab2b578   216  lsl x0, x0, #32
0xffff7ab2b57c   220  movz x1, #0x10
0xffff7ab2b580   224  lsl x1, x1, #32
0xffff7ab2b584   228  sub csp, jssp, #0x10 (16)
0xffff7ab2b588   232  sub jssp, jssp, #0x10 (16)
0xffff7ab2b58c   236  str x1, [jssp, #8]
0xffff7ab2b590   240  str x0, [jssp]
0xffff7ab2b594   244  str d0, [jssp, #24]
0xffff7ab2b598   248  movz x1, #0x5b88
0xffff7ab2b59c   252  movk x1, #0xe2, lsl #16
0xffff7ab2b5a0   256  movz x0, #0x2
0xffff7ab2b5a4   260  movz cp, #0x0
0xffff7ab2b5a8   264  ldr x16, pc+32 (addr 0x0000ffff7ab2b5c8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab2b5ac   268  blr x16
0xffff7ab2b5b0   272  ldr d0, [jssp, #8]
0xffff7ab2b5b4   276  b #-0x70 (addr 0xffff7ab2b544)
0xffff7ab2b5b8   280  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab2b5bc   284  d63f03e0       constant
0xffff7ab2b5c0   288  7ab29d80       constant
0xffff7ab2b5c4   292  0000ffff       constant
0xffff7ab2b5c8   296  7ab06060       constant
0xffff7ab2b5cc   300  0000ffff       constant


Safepoints (size = 34)
0xffff7ab2b570   208  000000 (sp -> fp)  <none>
0xffff7ab2b5b0   272  000000 (sp -> fp)  <none>

RelocInfo (size = 12)
0xffff7ab2b568  code target (STUB)  (0xffff7ab29d80)
0xffff7ab2b5a8  code target (STUB)  (0xffff7ab06060)
0xffff7ab2b5b8  constant pool (size 24)

--- End code ---
kind = STUB
major_key = DoubleToIStub
name = DoubleToIStub
compiler = unknown
Instructions (size = 60)
0xffff7ab2b660     0  sub csp, jssp, #0x10 (16)
0xffff7ab2b664     4  stp x2, x1, [jssp, #-16]!
0xffff7ab2b668     8  ldr x0, [jssp, #16]
0xffff7ab2b66c    12  ubfx x1, x0, #52, #11
0xffff7ab2b670    16  cmp x1, #0x453 (1107)
0xffff7ab2b674    20  csel x0, xzr, x0, ge
0xffff7ab2b678    24  b.ge #+0x1c (addr 0xffff7ab2b694)
0xffff7ab2b67c    28  ubfx x2, x0, #0, #52
0xffff7ab2b680    32  orr x2, x2, #0x10000000000000
0xffff7ab2b684    36  tst x0, #0x8000000000000000
0xffff7ab2b688    40  cneg x2, x2, ne
0xffff7ab2b68c    44  sub x1, x1, #0x433 (1075)
0xffff7ab2b690    48  lsl x0, x2, x1
0xffff7ab2b694    52  ldp x2, x1, [jssp], #16
0xffff7ab2b698    56  ret


RelocInfo (size = 0)


--- Code ---
kind = BUILTIN
name = MathClz32
compiler = turbofan
Instructions (size = 205)
0xffff7ab2b700     0  sub jssp, jssp, #0x20 (32)
0xffff7ab2b704     4  sub csp, csp, #0x20 (32)
0xffff7ab2b708     8  stp x1, cp, [jssp]
0xffff7ab2b70c    12  stp fp, lr, [jssp, #16]
0xffff7ab2b710    16  add fp, jssp, #0x10 (16)
0xffff7ab2b714    20  ldr x0, [jssp, #32]
0xffff7ab2b718    24  nop
0xffff7ab2b71c    28  nop
0xffff7ab2b720    32  and x1, x0, #0x1
0xffff7ab2b724    36  cmp x1, #0x0 (0)
0xffff7ab2b728    40  b.eq #+0x44 (addr 0xffff7ab2b76c)
0xffff7ab2b72c    44  ldur x1, [x0, #-1]
0xffff7ab2b730    48  ldr x2, [x26, #120]
0xffff7ab2b734    52  cmp x1, x2
0xffff7ab2b738    56  b.ne #+0x50 (addr 0xffff7ab2b788)
0xffff7ab2b73c    60  ldur d0, [x0, #7]
0xffff7ab2b740    64  fcvtzs x0, d0
0xffff7ab2b744    68  cmp x0, #0x1 (1)
0xffff7ab2b748    72  ccmn x0, #1, #nzcV, vc
0xffff7ab2b74c    76  b.vc #+0x1c (addr 0xffff7ab2b768)
0xffff7ab2b750    80  sub csp, jssp, #0x10 (16)
0xffff7ab2b754    84  str d0, [jssp, #-16]!
0xffff7ab2b758    88  str lr, [jssp, #8]
0xffff7ab2b75c    92  ldr x16, pc+76 (addr 0x0000ffff7ab2b7a8)    ;; code: STUB, DoubleToIStub, minor: 69660
0xffff7ab2b760    96  blr x16
0xffff7ab2b764   100  ldp xzr, lr, [jssp], #16
0xffff7ab2b768   104  b #+0x8 (addr 0xffff7ab2b770)
0xffff7ab2b76c   108  lsr x0, x0, #32
0xffff7ab2b770   112  clz w0, w0
0xffff7ab2b774   116  lsl x0, x0, #32
0xffff7ab2b778   120  mov jssp, fp
0xffff7ab2b77c   124  ldp fp, lr, [jssp], #16
0xffff7ab2b780   128  add jssp, jssp, #0x10 (16)
0xffff7ab2b784   132  ret
0xffff7ab2b788   136  mov x1, cp
0xffff7ab2b78c   140  str cp, [jssp, #8]
0xffff7ab2b790   144  ldr x16, pc+32 (addr 0x0000ffff7ab2b7b0)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0xffff7ab2b794   148  blr x16
0xffff7ab2b798   152  ldr cp, [jssp, #8]
0xffff7ab2b79c   156  b #-0x7c (addr 0xffff7ab2b720)
0xffff7ab2b7a0   160  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab2b7a4   164  d63f03e0       constant
0xffff7ab2b7a8   168  7ab2b660       constant
0xffff7ab2b7ac   172  0000ffff       constant
0xffff7ab2b7b0   176  7ab29d80       constant
0xffff7ab2b7b4   180  0000ffff       constant


Safepoints (size = 21)
0xffff7ab2b798   152  0000 (sp -> fp)  <none>

RelocInfo (size = 10)
0xffff7ab2b75c  code target (STUB)  (0xffff7ab2b660)
0xffff7ab2b790  code target (STUB)  (0xffff7ab29d80)
0xffff7ab2b7a0  constant pool (size 24)

--- End code ---
--- Code ---
kind = BUILTIN
name = MathFloor
compiler = turbofan
Instructions (size = 338)
0xffff7ab2b840     0  sub jssp, jssp, #0x20 (32)
0xffff7ab2b844     4  sub csp, csp, #0x20 (32)
0xffff7ab2b848     8  stp x1, cp, [jssp]
0xffff7ab2b84c    12  stp fp, lr, [jssp, #16]
0xffff7ab2b850    16  add fp, jssp, #0x10 (16)
0xffff7ab2b854    20  sub csp, jssp, #0x10 (16)
0xffff7ab2b858    24  sub jssp, jssp, #0x10 (16)
0xffff7ab2b85c    28  ldr x0, [jssp, #48]
0xffff7ab2b860    32  and x1, x0, #0x1
0xffff7ab2b864    36  cmp x1, #0x0 (0)
0xffff7ab2b868    40  b.eq #+0x98 (addr 0xffff7ab2b900)
0xffff7ab2b86c    44  ldur x1, [x0, #-1]
0xffff7ab2b870    48  ldr x2, [x26, #120]
0xffff7ab2b874    52  cmp x1, x2
0xffff7ab2b878    56  b.ne #+0x8c (addr 0xffff7ab2b904)
0xffff7ab2b87c    60  ldur d0, [x0, #7]
0xffff7ab2b880    64  frintm d0, d0
0xffff7ab2b884    68  fcvtzs w0, d0
0xffff7ab2b888    72  scvtf d1, w0
0xffff7ab2b88c    76  fcmp d0, d1
0xffff7ab2b890    80  b.ne #+0x24 (addr 0xffff7ab2b8b4)
0xffff7ab2b894    84  fcmp d0, #0.0
0xffff7ab2b898    88  b.ne #+0x14 (addr 0xffff7ab2b8ac)
0xffff7ab2b89c    92  fmov x1, d0
0xffff7ab2b8a0    96  lsr x1, x1, #32
0xffff7ab2b8a4   100  cmp w1, #0x0 (0)
0xffff7ab2b8a8   104  b.lt #+0xc (addr 0xffff7ab2b8b4)
0xffff7ab2b8ac   108  lsl x0, x0, #32
0xffff7ab2b8b0   112  b #+0x40 (addr 0xffff7ab2b8f0)
0xffff7ab2b8b4   116  movz x0, #0xe2c0
0xffff7ab2b8b8   120  movk x0, #0x9ab, lsl #16
0xffff7ab2b8bc   124  ldr x1, [x0]
0xffff7ab2b8c0   128  movz x2, #0xe2c8
0xffff7ab2b8c4   132  movk x2, #0x9ab, lsl #16
0xffff7ab2b8c8   136  ldr x2, [x2]
0xffff7ab2b8cc   140  sub x2, x2, x1
0xffff7ab2b8d0   144  cmp x2, #0x10 (16)
0xffff7ab2b8d4   148  b.lt #+0x40 (addr 0xffff7ab2b914)
0xffff7ab2b8d8   152  add x2, x1, #0x10 (16)
0xffff7ab2b8dc   156  str x2, [x0]
0xffff7ab2b8e0   160  add x0, x1, #0x1 (1)
0xffff7ab2b8e4   164  ldr x1, [x26, #120]
0xffff7ab2b8e8   168  stur x1, [x0, #-1]
0xffff7ab2b8ec   172  stur d0, [x0, #7]
0xffff7ab2b8f0   176  mov jssp, fp
0xffff7ab2b8f4   180  ldp fp, lr, [jssp], #16
0xffff7ab2b8f8   184  add jssp, jssp, #0x10 (16)
0xffff7ab2b8fc   188  ret
0xffff7ab2b900   192  b #-0x10 (addr 0xffff7ab2b8f0)
0xffff7ab2b904   196  ldr cp, [jssp, #24]
0xffff7ab2b908   200  ldr x16, pc+88 (addr 0x0000ffff7ab2b960)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0xffff7ab2b90c   204  blr x16
0xffff7ab2b910   208  b #-0xb0 (addr 0xffff7ab2b860)
0xffff7ab2b914   212  movz x0, #0x0
0xffff7ab2b918   216  lsl x0, x0, #32
0xffff7ab2b91c   220  movz x1, #0x10
0xffff7ab2b920   224  lsl x1, x1, #32
0xffff7ab2b924   228  sub csp, jssp, #0x10 (16)
0xffff7ab2b928   232  sub jssp, jssp, #0x10 (16)
0xffff7ab2b92c   236  str x1, [jssp, #8]
0xffff7ab2b930   240  str x0, [jssp]
0xffff7ab2b934   244  str d0, [jssp, #24]
0xffff7ab2b938   248  movz x1, #0x5b88
0xffff7ab2b93c   252  movk x1, #0xe2, lsl #16
0xffff7ab2b940   256  movz x0, #0x2
0xffff7ab2b944   260  movz cp, #0x0
0xffff7ab2b948   264  ldr x16, pc+32 (addr 0x0000ffff7ab2b968)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab2b94c   268  blr x16
0xffff7ab2b950   272  ldr d0, [jssp, #8]
0xffff7ab2b954   276  b #-0x70 (addr 0xffff7ab2b8e4)
0xffff7ab2b958   280  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab2b95c   284  d63f03e0       constant
0xffff7ab2b960   288  7ab29d80       constant
0xffff7ab2b964   292  0000ffff       constant
0xffff7ab2b968   296  7ab06060       constant
0xffff7ab2b96c   300  0000ffff       constant


Safepoints (size = 34)
0xffff7ab2b910   208  000000 (sp -> fp)  <none>
0xffff7ab2b950   272  000000 (sp -> fp)  <none>

RelocInfo (size = 12)
0xffff7ab2b908  code target (STUB)  (0xffff7ab29d80)
0xffff7ab2b948  code target (STUB)  (0xffff7ab06060)
0xffff7ab2b958  constant pool (size 24)

--- End code ---
--- Code ---
kind = BUILTIN
name = MathRound
compiler = turbofan
Instructions (size = 370)
0xffff7ab2ba00     0  sub jssp, jssp, #0x20 (32)
0xffff7ab2ba04     4  sub csp, csp, #0x20 (32)
0xffff7ab2ba08     8  stp x1, cp, [jssp]
0xffff7ab2ba0c    12  stp fp, lr, [jssp, #16]
0xffff7ab2ba10    16  add fp, jssp, #0x10 (16)
0xffff7ab2ba14    20  sub csp, jssp, #0x10 (16)
0xffff7ab2ba18    24  sub jssp, jssp, #0x10 (16)
0xffff7ab2ba1c    28  ldr x0, [jssp, #48]
0xffff7ab2ba20    32  and x1, x0, #0x1
0xffff7ab2ba24    36  cmp x1, #0x0 (0)
0xffff7ab2ba28    40  b.eq #+0xb4 (addr 0xffff7ab2badc)
0xffff7ab2ba2c    44  ldur x1, [x0, #-1]
0xffff7ab2ba30    48  ldr x2, [x26, #120]
0xffff7ab2ba34    52  cmp x1, x2
0xffff7ab2ba38    56  b.ne #+0xa8 (addr 0xffff7ab2bae0)
0xffff7ab2ba3c    60  ldur d0, [x0, #7]
0xffff7ab2ba40    64  frintp d1, d0
0xffff7ab2ba44    68  fmov d2, #0x60 (0.5000)
0xffff7ab2ba48    72  fsub d2, d1, d2
0xffff7ab2ba4c    76  fcmp d2, d0
0xffff7ab2ba50    80  b.ls #+0x10 (addr 0xffff7ab2ba60)
0xffff7ab2ba54    84  fmov d0, #0x70 (1.0000)
0xffff7ab2ba58    88  fsub d0, d1, d0
0xffff7ab2ba5c    92  fmov d1, d0
0xffff7ab2ba60    96  fcvtzs w0, d1
0xffff7ab2ba64   100  scvtf d0, w0
0xffff7ab2ba68   104  fcmp d1, d0
0xffff7ab2ba6c   108  b.ne #+0x24 (addr 0xffff7ab2ba90)
0xffff7ab2ba70   112  fcmp d1, #0.0
0xffff7ab2ba74   116  b.ne #+0x14 (addr 0xffff7ab2ba88)
0xffff7ab2ba78   120  fmov x1, d1
0xffff7ab2ba7c   124  lsr x1, x1, #32
0xffff7ab2ba80   128  cmp w1, #0x0 (0)
0xffff7ab2ba84   132  b.lt #+0xc (addr 0xffff7ab2ba90)
0xffff7ab2ba88   136  lsl x0, x0, #32
0xffff7ab2ba8c   140  b #+0x40 (addr 0xffff7ab2bacc)
0xffff7ab2ba90   144  movz x0, #0xe2c0
0xffff7ab2ba94   148  movk x0, #0x9ab, lsl #16
0xffff7ab2ba98   152  ldr x1, [x0]
0xffff7ab2ba9c   156  movz x2, #0xe2c8
0xffff7ab2baa0   160  movk x2, #0x9ab, lsl #16
0xffff7ab2baa4   164  ldr x2, [x2]
0xffff7ab2baa8   168  sub x2, x2, x1
0xffff7ab2baac   172  cmp x2, #0x10 (16)
0xffff7ab2bab0   176  b.lt #+0x40 (addr 0xffff7ab2baf0)
0xffff7ab2bab4   180  add x2, x1, #0x10 (16)
0xffff7ab2bab8   184  str x2, [x0]
0xffff7ab2babc   188  add x0, x1, #0x1 (1)
0xffff7ab2bac0   192  ldr x1, [x26, #120]
0xffff7ab2bac4   196  stur x1, [x0, #-1]
0xffff7ab2bac8   200  stur d1, [x0, #7]
0xffff7ab2bacc   204  mov jssp, fp
0xffff7ab2bad0   208  ldp fp, lr, [jssp], #16
0xffff7ab2bad4   212  add jssp, jssp, #0x10 (16)
0xffff7ab2bad8   216  ret
0xffff7ab2badc   220  b #-0x10 (addr 0xffff7ab2bacc)
0xffff7ab2bae0   224  ldr cp, [jssp, #24]
0xffff7ab2bae4   228  ldr x16, pc+92 (addr 0x0000ffff7ab2bb40)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0xffff7ab2bae8   232  blr x16
0xffff7ab2baec   236  b #-0xcc (addr 0xffff7ab2ba20)
0xffff7ab2baf0   240  movz x0, #0x0
0xffff7ab2baf4   244  lsl x0, x0, #32
0xffff7ab2baf8   248  movz x1, #0x10
0xffff7ab2bafc   252  lsl x1, x1, #32
0xffff7ab2bb00   256  sub csp, jssp, #0x10 (16)
0xffff7ab2bb04   260  sub jssp, jssp, #0x10 (16)
0xffff7ab2bb08   264  str x1, [jssp, #8]
0xffff7ab2bb0c   268  str x0, [jssp]
0xffff7ab2bb10   272  fmov d0, d1
0xffff7ab2bb14   276  str d1, [jssp, #24]
0xffff7ab2bb18   280  movz x1, #0x5b88
0xffff7ab2bb1c   284  movk x1, #0xe2, lsl #16
0xffff7ab2bb20   288  movz x0, #0x2
0xffff7ab2bb24   292  movz cp, #0x0
0xffff7ab2bb28   296  ldr x16, pc+32 (addr 0x0000ffff7ab2bb48)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab2bb2c   300  blr x16
0xffff7ab2bb30   304  ldr d1, [jssp, #8]
0xffff7ab2bb34   308  b #-0x74 (addr 0xffff7ab2bac0)
0xffff7ab2bb38   312  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab2bb3c   316  d63f03e0       constant
0xffff7ab2bb40   320  7ab29d80       constant
0xffff7ab2bb44   324  0000ffff       constant
0xffff7ab2bb48   328  7ab06060       constant
0xffff7ab2bb4c   332  0000ffff       constant


Safepoints (size = 34)
0xffff7ab2baec   236  000000 (sp -> fp)  <none>
0xffff7ab2bb30   304  000000 (sp -> fp)  <none>

RelocInfo (size = 12)
0xffff7ab2bae4  code target (STUB)  (0xffff7ab29d80)
0xffff7ab2bb28  code target (STUB)  (0xffff7ab06060)
0xffff7ab2bb38  constant pool (size 24)

--- End code ---
--- Code ---
kind = BUILTIN
name = MathSqrt
compiler = turbofan
Instructions (size = 346)
0xffff7ab2bbe0     0  sub jssp, jssp, #0x20 (32)
0xffff7ab2bbe4     4  sub csp, csp, #0x20 (32)
0xffff7ab2bbe8     8  stp x1, cp, [jssp]
0xffff7ab2bbec    12  stp fp, lr, [jssp, #16]
0xffff7ab2bbf0    16  add fp, jssp, #0x10 (16)
0xffff7ab2bbf4    20  sub csp, jssp, #0x10 (16)
0xffff7ab2bbf8    24  sub jssp, jssp, #0x10 (16)
0xffff7ab2bbfc    28  ldr x0, [jssp, #48]
0xffff7ab2bc00    32  and x1, x0, #0x1
0xffff7ab2bc04    36  cmp x1, #0x0 (0)
0xffff7ab2bc08    40  b.eq #+0x1c (addr 0xffff7ab2bc24)
0xffff7ab2bc0c    44  ldur x1, [x0, #-1]
0xffff7ab2bc10    48  ldr x2, [x26, #120]
0xffff7ab2bc14    52  cmp x1, x2
0xffff7ab2bc18    56  b.ne #+0x94 (addr 0xffff7ab2bcac)
0xffff7ab2bc1c    60  ldur d0, [x0, #7]
0xffff7ab2bc20    64  b #+0xc (addr 0xffff7ab2bc2c)
0xffff7ab2bc24    68  asr x0, x0, #32
0xffff7ab2bc28    72  scvtf d0, w0
0xffff7ab2bc2c    76  fsqrt d0, d0
0xffff7ab2bc30    80  fcvtzs w0, d0
0xffff7ab2bc34    84  scvtf d1, w0
0xffff7ab2bc38    88  fcmp d0, d1
0xffff7ab2bc3c    92  b.ne #+0x24 (addr 0xffff7ab2bc60)
0xffff7ab2bc40    96  fcmp d0, #0.0
0xffff7ab2bc44   100  b.ne #+0x14 (addr 0xffff7ab2bc58)
0xffff7ab2bc48   104  fmov x1, d0
0xffff7ab2bc4c   108  lsr x1, x1, #32
0xffff7ab2bc50   112  cmp w1, #0x0 (0)
0xffff7ab2bc54   116  b.lt #+0xc (addr 0xffff7ab2bc60)
0xffff7ab2bc58   120  lsl x0, x0, #32
0xffff7ab2bc5c   124  b #+0x40 (addr 0xffff7ab2bc9c)
0xffff7ab2bc60   128  movz x0, #0xe2c0
0xffff7ab2bc64   132  movk x0, #0x9ab, lsl #16
0xffff7ab2bc68   136  ldr x1, [x0]
0xffff7ab2bc6c   140  movz x2, #0xe2c8
0xffff7ab2bc70   144  movk x2, #0x9ab, lsl #16
0xffff7ab2bc74   148  ldr x2, [x2]
0xffff7ab2bc78   152  sub x2, x2, x1
0xffff7ab2bc7c   156  cmp x2, #0x10 (16)
0xffff7ab2bc80   160  b.lt #+0x3c (addr 0xffff7ab2bcbc)
0xffff7ab2bc84   164  add x2, x1, #0x10 (16)
0xffff7ab2bc88   168  str x2, [x0]
0xffff7ab2bc8c   172  add x0, x1, #0x1 (1)
0xffff7ab2bc90   176  ldr x1, [x26, #120]
0xffff7ab2bc94   180  stur x1, [x0, #-1]
0xffff7ab2bc98   184  stur d0, [x0, #7]
0xffff7ab2bc9c   188  mov jssp, fp
0xffff7ab2bca0   192  ldp fp, lr, [jssp], #16
0xffff7ab2bca4   196  add jssp, jssp, #0x10 (16)
0xffff7ab2bca8   200  ret
0xffff7ab2bcac   204  ldr cp, [jssp, #24]
0xffff7ab2bcb0   208  ldr x16, pc+88 (addr 0x0000ffff7ab2bd08)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0xffff7ab2bcb4   212  blr x16
0xffff7ab2bcb8   216  b #-0xb8 (addr 0xffff7ab2bc00)
0xffff7ab2bcbc   220  movz x0, #0x0
0xffff7ab2bcc0   224  lsl x0, x0, #32
0xffff7ab2bcc4   228  movz x1, #0x10
0xffff7ab2bcc8   232  lsl x1, x1, #32
0xffff7ab2bccc   236  sub csp, jssp, #0x10 (16)
0xffff7ab2bcd0   240  sub jssp, jssp, #0x10 (16)
0xffff7ab2bcd4   244  str x1, [jssp, #8]
0xffff7ab2bcd8   248  str x0, [jssp]
0xffff7ab2bcdc   252  str d0, [jssp, #24]
0xffff7ab2bce0   256  movz x1, #0x5b88
0xffff7ab2bce4   260  movk x1, #0xe2, lsl #16
0xffff7ab2bce8   264  movz x0, #0x2
0xffff7ab2bcec   268  movz cp, #0x0
0xffff7ab2bcf0   272  ldr x16, pc+32 (addr 0x0000ffff7ab2bd10)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab2bcf4   276  blr x16
0xffff7ab2bcf8   280  ldr d0, [jssp, #8]
0xffff7ab2bcfc   284  b #-0x6c (addr 0xffff7ab2bc90)
0xffff7ab2bd00   288  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab2bd04   292  d63f03e0       constant
0xffff7ab2bd08   296  7ab29d80       constant
0xffff7ab2bd0c   300  0000ffff       constant
0xffff7ab2bd10   304  7ab06060       constant
0xffff7ab2bd14   308  0000ffff       constant


Safepoints (size = 34)
0xffff7ab2bcb8   216  000000 (sp -> fp)  <none>
0xffff7ab2bcf8   280  000000 (sp -> fp)  <none>

RelocInfo (size = 12)
0xffff7ab2bcb0  code target (STUB)  (0xffff7ab29d80)
0xffff7ab2bcf0  code target (STUB)  (0xffff7ab06060)
0xffff7ab2bd00  constant pool (size 24)

--- End code ---
--- Code ---
kind = BUILTIN
name = MathTrunc
compiler = turbofan
Instructions (size = 338)
0xffff7ab2bda0     0  sub jssp, jssp, #0x20 (32)
0xffff7ab2bda4     4  sub csp, csp, #0x20 (32)
0xffff7ab2bda8     8  stp x1, cp, [jssp]
0xffff7ab2bdac    12  stp fp, lr, [jssp, #16]
0xffff7ab2bdb0    16  add fp, jssp, #0x10 (16)
0xffff7ab2bdb4    20  sub csp, jssp, #0x10 (16)
0xffff7ab2bdb8    24  sub jssp, jssp, #0x10 (16)
0xffff7ab2bdbc    28  ldr x0, [jssp, #48]
0xffff7ab2bdc0    32  and x1, x0, #0x1
0xffff7ab2bdc4    36  cmp x1, #0x0 (0)
0xffff7ab2bdc8    40  b.eq #+0x98 (addr 0xffff7ab2be60)
0xffff7ab2bdcc    44  ldur x1, [x0, #-1]
0xffff7ab2bdd0    48  ldr x2, [x26, #120]
0xffff7ab2bdd4    52  cmp x1, x2
0xffff7ab2bdd8    56  b.ne #+0x8c (addr 0xffff7ab2be64)
0xffff7ab2bddc    60  ldur d0, [x0, #7]
0xffff7ab2bde0    64  frintz d0, d0
0xffff7ab2bde4    68  fcvtzs w0, d0
0xffff7ab2bde8    72  scvtf d1, w0
0xffff7ab2bdec    76  fcmp d0, d1
0xffff7ab2bdf0    80  b.ne #+0x24 (addr 0xffff7ab2be14)
0xffff7ab2bdf4    84  fcmp d0, #0.0
0xffff7ab2bdf8    88  b.ne #+0x14 (addr 0xffff7ab2be0c)
0xffff7ab2bdfc    92  fmov x1, d0
0xffff7ab2be00    96  lsr x1, x1, #32
0xffff7ab2be04   100  cmp w1, #0x0 (0)
0xffff7ab2be08   104  b.lt #+0xc (addr 0xffff7ab2be14)
0xffff7ab2be0c   108  lsl x0, x0, #32
0xffff7ab2be10   112  b #+0x40 (addr 0xffff7ab2be50)
0xffff7ab2be14   116  movz x0, #0xe2c0
0xffff7ab2be18   120  movk x0, #0x9ab, lsl #16
0xffff7ab2be1c   124  ldr x1, [x0]
0xffff7ab2be20   128  movz x2, #0xe2c8
0xffff7ab2be24   132  movk x2, #0x9ab, lsl #16
0xffff7ab2be28   136  ldr x2, [x2]
0xffff7ab2be2c   140  sub x2, x2, x1
0xffff7ab2be30   144  cmp x2, #0x10 (16)
0xffff7ab2be34   148  b.lt #+0x40 (addr 0xffff7ab2be74)
0xffff7ab2be38   152  add x2, x1, #0x10 (16)
0xffff7ab2be3c   156  str x2, [x0]
0xffff7ab2be40   160  add x0, x1, #0x1 (1)
0xffff7ab2be44   164  ldr x1, [x26, #120]
0xffff7ab2be48   168  stur x1, [x0, #-1]
0xffff7ab2be4c   172  stur d0, [x0, #7]
0xffff7ab2be50   176  mov jssp, fp
0xffff7ab2be54   180  ldp fp, lr, [jssp], #16
0xffff7ab2be58   184  add jssp, jssp, #0x10 (16)
0xffff7ab2be5c   188  ret
0xffff7ab2be60   192  b #-0x10 (addr 0xffff7ab2be50)
0xffff7ab2be64   196  ldr cp, [jssp, #24]
0xffff7ab2be68   200  ldr x16, pc+88 (addr 0x0000ffff7ab2bec0)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0xffff7ab2be6c   204  blr x16
0xffff7ab2be70   208  b #-0xb0 (addr 0xffff7ab2bdc0)
0xffff7ab2be74   212  movz x0, #0x0
0xffff7ab2be78   216  lsl x0, x0, #32
0xffff7ab2be7c   220  movz x1, #0x10
0xffff7ab2be80   224  lsl x1, x1, #32
0xffff7ab2be84   228  sub csp, jssp, #0x10 (16)
0xffff7ab2be88   232  sub jssp, jssp, #0x10 (16)
0xffff7ab2be8c   236  str x1, [jssp, #8]
0xffff7ab2be90   240  str x0, [jssp]
0xffff7ab2be94   244  str d0, [jssp, #24]
0xffff7ab2be98   248  movz x1, #0x5b88
0xffff7ab2be9c   252  movk x1, #0xe2, lsl #16
0xffff7ab2bea0   256  movz x0, #0x2
0xffff7ab2bea4   260  movz cp, #0x0
0xffff7ab2bea8   264  ldr x16, pc+32 (addr 0x0000ffff7ab2bec8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab2beac   268  blr x16
0xffff7ab2beb0   272  ldr d0, [jssp, #8]
0xffff7ab2beb4   276  b #-0x70 (addr 0xffff7ab2be44)
0xffff7ab2beb8   280  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab2bebc   284  d63f03e0       constant
0xffff7ab2bec0   288  7ab29d80       constant
0xffff7ab2bec4   292  0000ffff       constant
0xffff7ab2bec8   296  7ab06060       constant
0xffff7ab2becc   300  0000ffff       constant


Safepoints (size = 34)
0xffff7ab2be70   208  000000 (sp -> fp)  <none>
0xffff7ab2beb0   272  000000 (sp -> fp)  <none>

RelocInfo (size = 12)
0xffff7ab2be68  code target (STUB)  (0xffff7ab29d80)
0xffff7ab2bea8  code target (STUB)  (0xffff7ab06060)
0xffff7ab2beb8  constant pool (size 24)

--- End code ---
--- Code ---
kind = BUILTIN
name = ObjectHasOwnProperty
compiler = turbofan
Instructions (size = 421)
0xffff7ab2bf60     0  sub jssp, jssp, #0x20 (32)
0xffff7ab2bf64     4  sub csp, csp, #0x20 (32)
0xffff7ab2bf68     8  stp x1, cp, [jssp]
0xffff7ab2bf6c    12  stp fp, lr, [jssp, #16]
0xffff7ab2bf70    16  add fp, jssp, #0x10 (16)
0xffff7ab2bf74    20  ldr x0, [jssp, #40]
0xffff7ab2bf78    24  and x1, x0, #0x1
0xffff7ab2bf7c    28  cmp x1, #0x0 (0)
0xffff7ab2bf80    32  b.eq #+0x154 (addr 0xffff7ab2c0d4)
0xffff7ab2bf84    36  ldur x1, [x0, #-1]
0xffff7ab2bf88    40  ldrb w2, [x1, #11]
0xffff7ab2bf8c    44  ldr x3, [jssp, #32]
0xffff7ab2bf90    48  and x4, x3, #0x1
0xffff7ab2bf94    52  cmp x4, #0x0 (0)
0xffff7ab2bf98    56  b.eq #+0x94 (addr 0xffff7ab2c02c)
0xffff7ab2bf9c    60  ldur x4, [x3, #-1]
0xffff7ab2bfa0    64  ldrb w4, [x4, #11]
0xffff7ab2bfa4    68  cmp w4, #0x80 (128)
0xffff7ab2bfa8    72  b.eq #+0x1c (addr 0xffff7ab2bfc4)
0xffff7ab2bfac    76  tst x4, #0xc0
0xffff7ab2bfb0    80  b.ne #+0xf8 (addr 0xffff7ab2c0a8)
0xffff7ab2bfb4    84  ldur w4, [x3, #7]
0xffff7ab2bfb8    88  tbnz w4, #1, #+0xc (addr 0xffff7ab2bfc4)
0xffff7ab2bfbc    92  ubfx w4, w4, #2, #24
0xffff7ab2bfc0    96  b #+0x7c (addr 0xffff7ab2c03c)
0xffff7ab2bfc4   100  cmp w2, #0xb3 (179)
0xffff7ab2bfc8   104  cset x4, le
0xffff7ab2bfcc   108  cmp w2, #0xb6 (182)
0xffff7ab2bfd0   112  cset x2, eq
0xffff7ab2bfd4   116  orr w2, w4, w2
0xffff7ab2bfd8   120  cbnz w2, #+0xd0 (addr 0xffff7ab2c0a8)
0xffff7ab2bfdc   124  ldur w2, [x1, #15]
0xffff7ab2bfe0   128  ubfx w4, w2, #20, #1
0xffff7ab2bfe4   132  cbnz w4, #+0xc4 (addr 0xffff7ab2c0a8)
0xffff7ab2bfe8   136  ubfx w2, w2, #10, #10
0xffff7ab2bfec   140  cmp w2, #0x100 (256)
0xffff7ab2bff0   144  b.gt #+0xb8 (addr 0xffff7ab2c0a8)
0xffff7ab2bff4   148  ldur x0, [x1, #47]
0xffff7ab2bff8   152  movz x1, #0x0
0xffff7ab2bffc   156  nop
0xffff7ab2c000   160  cmp w1, w2
0xffff7ab2c004   164  b.eq #+0xd0 (addr 0xffff7ab2c0d4)
0xffff7ab2c008   168  add w4, w1, w1, lsl #1
0xffff7ab2c00c   172  add w4, w4, #0x2 (2)
0xffff7ab2c010   176  lsl x4, x4, #3
0xffff7ab2c014   180  add x4, x4, #0xf (15)
0xffff7ab2c018   184  ldr x4, [x0, x4]
0xffff7ab2c01c   188  cmp x4, x3
0xffff7ab2c020   192  b.eq #+0x70 (addr 0xffff7ab2c090)
0xffff7ab2c024   196  add w1, w1, #0x1 (1)
0xffff7ab2c028   200  b #-0x28 (addr 0xffff7ab2c000)
0xffff7ab2c02c   204  and x4, x3, #0x8000000000000001
0xffff7ab2c030   208  cmp x4, #0x0 (0)
0xffff7ab2c034   212  b.ne #+0x74 (addr 0xffff7ab2c0a8)
0xffff7ab2c038   216  asr x4, x3, #32
0xffff7ab2c03c   220  cmp w2, #0xb4 (180)
0xffff7ab2c040   224  cset x5, le
0xffff7ab2c044   228  cmp w2, #0xb6 (182)
0xffff7ab2c048   232  cset x2, eq
0xffff7ab2c04c   236  orr w2, w5, w2
0xffff7ab2c050   240  cbnz w2, #+0x58 (addr 0xffff7ab2c0a8)
0xffff7ab2c054   244  ldrb w1, [x1, #13]
0xffff7ab2c058   248  ubfx w1, w1, #3, #5
0xffff7ab2c05c   252  cmp w1, #0x3 (3)
0xffff7ab2c060   256  b.gt #+0x48 (addr 0xffff7ab2c0a8)
0xffff7ab2c064   260  ldur x0, [x0, #15]
0xffff7ab2c068   264  ldur x1, [x0, #7]
0xffff7ab2c06c   268  lsr x1, x1, #32
0xffff7ab2c070   272  cmp w4, w1
0xffff7ab2c074   276  b.ge #+0x60 (addr 0xffff7ab2c0d4)
0xffff7ab2c078   280  lsl x1, x4, #3
0xffff7ab2c07c   284  add x1, x1, #0xf (15)
0xffff7ab2c080   288  ldr x0, [x0, x1]
0xffff7ab2c084   292  ldr x1, [x26, #88]
0xffff7ab2c088   296  cmp x0, x1
0xffff7ab2c08c   300  b.eq #+0x48 (addr 0xffff7ab2c0d4)
0xffff7ab2c090   304  ldr x0, [x26, #64]
0xffff7ab2c094   308  mov jssp, fp
0xffff7ab2c098   312  ldp fp, lr, [jssp], #16
0xffff7ab2c09c   316  add jssp, jssp, #0x10 (16)
0xffff7ab2c0a0   320  ret
0xffff7ab2c0a4   324  b #+0x30 (addr 0xffff7ab2c0d4)
0xffff7ab2c0a8   328  sub csp, jssp, #0x10 (16)
0xffff7ab2c0ac   332  sub jssp, jssp, #0x10 (16)
0xffff7ab2c0b0   336  str x0, [jssp, #8]
0xffff7ab2c0b4   340  str x3, [jssp]
0xffff7ab2c0b8   344  movz x1, #0xf6c8
0xffff7ab2c0bc   348  movk x1, #0xe3, lsl #16
0xffff7ab2c0c0   352  movz x0, #0x2
0xffff7ab2c0c4   356  ldr cp, [jssp, #24]
0xffff7ab2c0c8   360  ldr x16, pc+32 (addr 0x0000ffff7ab2c0e8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab2c0cc   364  blr x16
0xffff7ab2c0d0   368  b #-0x3c (addr 0xffff7ab2c094)
0xffff7ab2c0d4   372  ldr x0, [x26, #72]
0xffff7ab2c0d8   376  b #-0x44 (addr 0xffff7ab2c094)
0xffff7ab2c0dc   380  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab2c0e0   384  d63f03e0       constant
0xffff7ab2c0e4   388  d503201f       constant
0xffff7ab2c0e8   392  7ab06060       constant
0xffff7ab2c0ec   396  0000ffff       constant


Safepoints (size = 21)
0xffff7ab2c0d0   368  0000 (sp -> fp)  <none>

RelocInfo (size = 9)
0xffff7ab2c0c8  code target (STUB)  (0xffff7ab06060)
0xffff7ab2c0dc  constant pool (size 20)

--- End code ---
kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0xffff7ab2c580     0  adr xzr, #+0x40 (addr 0xffff7ab2c5c0)
0xffff7ab2c584     4  adr xzr, #+0x2a8 (addr 0xffff7ab2c82c)
0xffff7ab2c588     8  ldr x16, pc+1368 (addr 0x0000ffff7ab2cae0)    ;; external reference (store_buffer_top)
0xffff7ab2c58c    12  ldr x6, [x16]
0xffff7ab2c590    16  str x7, [x6], #8
0xffff7ab2c594    20  str x6, [x16]
0xffff7ab2c598    24  tst x6, #0x1ffff
0xffff7ab2c59c    28  b.eq #+0x8 (addr 0xffff7ab2c5a4)
0xffff7ab2c5a0    32  ret
0xffff7ab2c5a4    36  sub csp, jssp, #0x8 (8)
0xffff7ab2c5a8    40  str lr, [jssp, #-8]!
0xffff7ab2c5ac    44  ldr x17, pc+1340 (addr 0x0000ffff7ab2cae8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2c5b0    48  blr x17
0xffff7ab2c5b4    52  ldr lr, [jssp], #8
0xffff7ab2c5b8    56  ret
0xffff7ab2c5bc    60  ret
0xffff7ab2c5c0    64  sub csp, jssp, #0x10 (16)
0xffff7ab2c5c4    68  stp x1, x0, [jssp, #-16]!
0xffff7ab2c5c8    72  ldr x6, [x7]
0xffff7ab2c5cc    76  and x16, x6, #0xfffffffffff00000
0xffff7ab2c5d0    80  ldr x16, [x16, #8]
0xffff7ab2c5d4    84  tst x16, #0x18
0xffff7ab2c5d8    88  b.eq #+0x17c (addr 0xffff7ab2c754)
0xffff7ab2c5dc    92  and x16, x5, #0xfffffffffff00000
0xffff7ab2c5e0    96  ldr x16, [x16, #8]
0xffff7ab2c5e4   100  tst x16, #0x18
0xffff7ab2c5e8   104  b.ne #+0x16c (addr 0xffff7ab2c754)
0xffff7ab2c5ec   108  and x6, x5, #0xfffffffffff00000
0xffff7ab2c5f0   112  ldr x0, [x6, #104]
0xffff7ab2c5f4   116  subs x0, x0, #0x1 (1)
0xffff7ab2c5f8   120  str x0, [x6, #104]
0xffff7ab2c5fc   124  b.mi #+0xc4 (addr 0xffff7ab2c6c0)
0xffff7ab2c600   128  ubfx x16, x5, #8, #12
0xffff7ab2c604   132  and x6, x5, #0xfffffffffff00000
0xffff7ab2c608   136  add x6, x6, x16, lsl #2
0xffff7ab2c60c   140  ubfx x0, x5, #3, #5
0xffff7ab2c610   144  ldr x6, [x6, #360]
0xffff7ab2c614   148  lsr x6, x6, x0
0xffff7ab2c618   152  tbz w6, #0, #+0x8 (addr 0xffff7ab2c620)
0xffff7ab2c61c   156  tbnz w6, #1, #+0x3c (addr 0xffff7ab2c658)
0xffff7ab2c620   160  ldp x1, x0, [jssp], #16
0xffff7ab2c624   164  ldr x16, pc+1228 (addr 0x0000ffff7ab2caf0)    ;; external reference (store_buffer_top)
0xffff7ab2c628   168  ldr x6, [x16]
0xffff7ab2c62c   172  str x7, [x6], #8
0xffff7ab2c630   176  str x6, [x16]
0xffff7ab2c634   180  tst x6, #0x1ffff
0xffff7ab2c638   184  b.eq #+0x8 (addr 0xffff7ab2c640)
0xffff7ab2c63c   188  ret
0xffff7ab2c640   192  sub csp, jssp, #0x8 (8)
0xffff7ab2c644   196  str lr, [jssp, #-8]!
0xffff7ab2c648   200  ldr x17, pc+1200 (addr 0x0000ffff7ab2caf8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2c64c   204  blr x17
0xffff7ab2c650   208  ldr lr, [jssp], #8
0xffff7ab2c654   212  ret
0xffff7ab2c658   216  ldr x6, [x7]
0xffff7ab2c65c   220  sub csp, jssp, #0x10 (16)
0xffff7ab2c660   224  stp x5, x7, [jssp, #-16]!
0xffff7ab2c664   228  ubfx x16, x6, #8, #12
0xffff7ab2c668   232  and x0, x6, #0xfffffffffff00000
0xffff7ab2c66c   236  add x0, x0, x16, lsl #2
0xffff7ab2c670   240  ubfx x5, x6, #3, #5
0xffff7ab2c674   244  ldr x7, [x0, #360]
0xffff7ab2c678   248  lsr x7, x7, x5
0xffff7ab2c67c   252  tbz w7, #0, #+0x40 (addr 0xffff7ab2c6bc)
0xffff7ab2c680   256  ldp x5, x7, [jssp], #16
0xffff7ab2c684   260  ldp x1, x0, [jssp], #16
0xffff7ab2c688   264  ldr x16, pc+1144 (addr 0x0000ffff7ab2cb00)    ;; external reference (store_buffer_top)
0xffff7ab2c68c   268  ldr x6, [x16]
0xffff7ab2c690   272  str x7, [x6], #8
0xffff7ab2c694   276  str x6, [x16]
0xffff7ab2c698   280  tst x6, #0x1ffff
0xffff7ab2c69c   284  b.eq #+0x8 (addr 0xffff7ab2c6a4)
0xffff7ab2c6a0   288  ret
0xffff7ab2c6a4   292  sub csp, jssp, #0x8 (8)
0xffff7ab2c6a8   296  str lr, [jssp, #-8]!
0xffff7ab2c6ac   300  ldr x17, pc+1116 (addr 0x0000ffff7ab2cb08)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2c6b0   304  blr x17
0xffff7ab2c6b4   308  ldr lr, [jssp], #8
0xffff7ab2c6b8   312  ret
0xffff7ab2c6bc   316  ldp x5, x7, [jssp], #16
0xffff7ab2c6c0   320  sub csp, jssp, #0x78 (120)
0xffff7ab2c6c4   324  stp x14, x15, [jssp, #-32]!
0xffff7ab2c6c8   328  stp x18, lr, [jssp, #16]
0xffff7ab2c6cc   332  stp x10, x11, [jssp, #-32]!
0xffff7ab2c6d0   336  stp x12, x13, [jssp, #16]
0xffff7ab2c6d4   340  stp x5, x7, [jssp, #-32]!
0xffff7ab2c6d8   344  stp x8, x9, [jssp, #16]
0xffff7ab2c6dc   348  stp x2, x3, [jssp, #-24]!
0xffff7ab2c6e0   352  str x4, [jssp, #16]
0xffff7ab2c6e4   356  mov x0, x5
0xffff7ab2c6e8   360  mov x1, x7
0xffff7ab2c6ec   364  ldr x2, pc+1060 (addr 0x0000ffff7ab2cb10)    ;; external reference (isolate)
0xffff7ab2c6f0   368  ldr x16, pc+1064 (addr 0x0000ffff7ab2cb18)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2c6f4   372  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2c6f8   376  blr x16
0xffff7ab2c6fc   380  ldp x4, x5, [jssp, #16]
0xffff7ab2c700   384  ldp x2, x3, [jssp], #32
0xffff7ab2c704   388  ldp x9, x10, [jssp, #16]
0xffff7ab2c708   392  ldp x7, x8, [jssp], #32
0xffff7ab2c70c   396  ldp x13, x14, [jssp, #16]
0xffff7ab2c710   400  ldp x11, x12, [jssp], #32
0xffff7ab2c714   404  ldr lr, [jssp, #16]
0xffff7ab2c718   408  ldp x15, x18, [jssp], #24
0xffff7ab2c71c   412  ldp x1, x0, [jssp], #16
0xffff7ab2c720   416  ldr x16, pc+1024 (addr 0x0000ffff7ab2cb20)    ;; external reference (store_buffer_top)
0xffff7ab2c724   420  ldr x6, [x16]
0xffff7ab2c728   424  str x7, [x6], #8
0xffff7ab2c72c   428  str x6, [x16]
0xffff7ab2c730   432  tst x6, #0x1ffff
0xffff7ab2c734   436  b.eq #+0x8 (addr 0xffff7ab2c73c)
0xffff7ab2c738   440  ret
0xffff7ab2c73c   444  sub csp, jssp, #0x8 (8)
0xffff7ab2c740   448  str lr, [jssp, #-8]!
0xffff7ab2c744   452  ldr x17, pc+996 (addr 0x0000ffff7ab2cb28)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2c748   456  blr x17
0xffff7ab2c74c   460  ldr lr, [jssp], #8
0xffff7ab2c750   464  ret
0xffff7ab2c754   468  and x6, x5, #0xfffffffffff00000
0xffff7ab2c758   472  ldr x0, [x6, #104]
0xffff7ab2c75c   476  subs x0, x0, #0x1 (1)
0xffff7ab2c760   480  str x0, [x6, #104]
0xffff7ab2c764   484  b.mi #+0x64 (addr 0xffff7ab2c7c8)
0xffff7ab2c768   488  ubfx x16, x5, #8, #12
0xffff7ab2c76c   492  and x6, x5, #0xfffffffffff00000
0xffff7ab2c770   496  add x6, x6, x16, lsl #2
0xffff7ab2c774   500  ubfx x0, x5, #3, #5
0xffff7ab2c778   504  ldr x6, [x6, #360]
0xffff7ab2c77c   508  lsr x6, x6, x0
0xffff7ab2c780   512  tbz w6, #0, #+0x8 (addr 0xffff7ab2c788)
0xffff7ab2c784   516  tbnz w6, #1, #+0xc (addr 0xffff7ab2c790)
0xffff7ab2c788   520  ldp x1, x0, [jssp], #16
0xffff7ab2c78c   524  ret
0xffff7ab2c790   528  ldr x6, [x7]
0xffff7ab2c794   532  sub csp, jssp, #0x10 (16)
0xffff7ab2c798   536  stp x5, x7, [jssp, #-16]!
0xffff7ab2c79c   540  ubfx x16, x6, #8, #12
0xffff7ab2c7a0   544  and x0, x6, #0xfffffffffff00000
0xffff7ab2c7a4   548  add x0, x0, x16, lsl #2
0xffff7ab2c7a8   552  ubfx x5, x6, #3, #5
0xffff7ab2c7ac   556  ldr x7, [x0, #360]
0xffff7ab2c7b0   560  lsr x7, x7, x5
0xffff7ab2c7b4   564  tbz w7, #0, #+0x10 (addr 0xffff7ab2c7c4)
0xffff7ab2c7b8   568  ldp x5, x7, [jssp], #16
0xffff7ab2c7bc   572  ldp x1, x0, [jssp], #16
0xffff7ab2c7c0   576  ret
0xffff7ab2c7c4   580  ldp x5, x7, [jssp], #16
0xffff7ab2c7c8   584  sub csp, jssp, #0x78 (120)
0xffff7ab2c7cc   588  stp x14, x15, [jssp, #-32]!
0xffff7ab2c7d0   592  stp x18, lr, [jssp, #16]
0xffff7ab2c7d4   596  stp x10, x11, [jssp, #-32]!
0xffff7ab2c7d8   600  stp x12, x13, [jssp, #16]
0xffff7ab2c7dc   604  stp x5, x7, [jssp, #-32]!
0xffff7ab2c7e0   608  stp x8, x9, [jssp, #16]
0xffff7ab2c7e4   612  stp x2, x3, [jssp, #-24]!
0xffff7ab2c7e8   616  str x4, [jssp, #16]
0xffff7ab2c7ec   620  mov x0, x5
0xffff7ab2c7f0   624  mov x1, x7
0xffff7ab2c7f4   628  ldr x2, pc+828 (addr 0x0000ffff7ab2cb30)    ;; external reference (isolate)
0xffff7ab2c7f8   632  ldr x16, pc+832 (addr 0x0000ffff7ab2cb38)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2c7fc   636  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2c800   640  blr x16
0xffff7ab2c804   644  ldp x4, x5, [jssp, #16]
0xffff7ab2c808   648  ldp x2, x3, [jssp], #32
0xffff7ab2c80c   652  ldp x9, x10, [jssp, #16]
0xffff7ab2c810   656  ldp x7, x8, [jssp], #32
0xffff7ab2c814   660  ldp x13, x14, [jssp, #16]
0xffff7ab2c818   664  ldp x11, x12, [jssp], #32
0xffff7ab2c81c   668  ldr lr, [jssp, #16]
0xffff7ab2c820   672  ldp x15, x18, [jssp], #24
0xffff7ab2c824   676  ldp x1, x0, [jssp], #16
0xffff7ab2c828   680  ret
0xffff7ab2c82c   684  sub csp, jssp, #0x10 (16)
0xffff7ab2c830   688  stp x1, x0, [jssp, #-16]!
0xffff7ab2c834   692  ldr x6, [x7]
0xffff7ab2c838   696  and x16, x6, #0xfffffffffff00000
0xffff7ab2c83c   700  ldr x16, [x16, #8]
0xffff7ab2c840   704  tst x16, #0x18
0xffff7ab2c844   708  b.eq #+0x19c (addr 0xffff7ab2c9e0)
0xffff7ab2c848   712  and x16, x5, #0xfffffffffff00000
0xffff7ab2c84c   716  ldr x16, [x16, #8]
0xffff7ab2c850   720  tst x16, #0x18
0xffff7ab2c854   724  b.ne #+0x18c (addr 0xffff7ab2c9e0)
0xffff7ab2c858   728  and x6, x5, #0xfffffffffff00000
0xffff7ab2c85c   732  ldr x0, [x6, #104]
0xffff7ab2c860   736  subs x0, x0, #0x1 (1)
0xffff7ab2c864   740  str x0, [x6, #104]
0xffff7ab2c868   744  b.mi #+0xe4 (addr 0xffff7ab2c94c)
0xffff7ab2c86c   748  ubfx x16, x5, #8, #12
0xffff7ab2c870   752  and x6, x5, #0xfffffffffff00000
0xffff7ab2c874   756  add x6, x6, x16, lsl #2
0xffff7ab2c878   760  ubfx x0, x5, #3, #5
0xffff7ab2c87c   764  ldr x6, [x6, #360]
0xffff7ab2c880   768  lsr x6, x6, x0
0xffff7ab2c884   772  tbz w6, #0, #+0x8 (addr 0xffff7ab2c88c)
0xffff7ab2c888   776  tbnz w6, #1, #+0x3c (addr 0xffff7ab2c8c4)
0xffff7ab2c88c   780  ldp x1, x0, [jssp], #16
0xffff7ab2c890   784  ldr x16, pc+688 (addr 0x0000ffff7ab2cb40)    ;; external reference (store_buffer_top)
0xffff7ab2c894   788  ldr x6, [x16]
0xffff7ab2c898   792  str x7, [x6], #8
0xffff7ab2c89c   796  str x6, [x16]
0xffff7ab2c8a0   800  tst x6, #0x1ffff
0xffff7ab2c8a4   804  b.eq #+0x8 (addr 0xffff7ab2c8ac)
0xffff7ab2c8a8   808  ret
0xffff7ab2c8ac   812  sub csp, jssp, #0x8 (8)
0xffff7ab2c8b0   816  str lr, [jssp, #-8]!
0xffff7ab2c8b4   820  ldr x17, pc+660 (addr 0x0000ffff7ab2cb48)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2c8b8   824  blr x17
0xffff7ab2c8bc   828  ldr lr, [jssp], #8
0xffff7ab2c8c0   832  ret
0xffff7ab2c8c4   836  ldr x6, [x7]
0xffff7ab2c8c8   840  and x0, x6, #0xfffffffffff00000
0xffff7ab2c8cc   844  ldr x0, [x0, #8]
0xffff7ab2c8d0   848  tbz w0, #6, #+0x18 (addr 0xffff7ab2c8e8)
0xffff7ab2c8d4   852  and x0, x5, #0xfffffffffff00000
0xffff7ab2c8d8   856  ldr x0, [x0, #8]
0xffff7ab2c8dc   860  movz x16, #0x58
0xffff7ab2c8e0   864  tst x0, x16
0xffff7ab2c8e4   868  b.eq #+0x68 (addr 0xffff7ab2c94c)
0xffff7ab2c8e8   872  sub csp, jssp, #0x10 (16)
0xffff7ab2c8ec   876  stp x5, x7, [jssp, #-16]!
0xffff7ab2c8f0   880  ubfx x16, x6, #8, #12
0xffff7ab2c8f4   884  and x0, x6, #0xfffffffffff00000
0xffff7ab2c8f8   888  add x0, x0, x16, lsl #2
0xffff7ab2c8fc   892  ubfx x5, x6, #3, #5
0xffff7ab2c900   896  ldr x7, [x0, #360]
0xffff7ab2c904   900  lsr x7, x7, x5
0xffff7ab2c908   904  tbz w7, #0, #+0x40 (addr 0xffff7ab2c948)
0xffff7ab2c90c   908  ldp x5, x7, [jssp], #16
0xffff7ab2c910   912  ldp x1, x0, [jssp], #16
0xffff7ab2c914   916  ldr x16, pc+572 (addr 0x0000ffff7ab2cb50)    ;; external reference (store_buffer_top)
0xffff7ab2c918   920  ldr x6, [x16]
0xffff7ab2c91c   924  str x7, [x6], #8
0xffff7ab2c920   928  str x6, [x16]
0xffff7ab2c924   932  tst x6, #0x1ffff
0xffff7ab2c928   936  b.eq #+0x8 (addr 0xffff7ab2c930)
0xffff7ab2c92c   940  ret
0xffff7ab2c930   944  sub csp, jssp, #0x8 (8)
0xffff7ab2c934   948  str lr, [jssp, #-8]!
0xffff7ab2c938   952  ldr x17, pc+544 (addr 0x0000ffff7ab2cb58)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2c93c   956  blr x17
0xffff7ab2c940   960  ldr lr, [jssp], #8
0xffff7ab2c944   964  ret
0xffff7ab2c948   968  ldp x5, x7, [jssp], #16
0xffff7ab2c94c   972  sub csp, jssp, #0x78 (120)
0xffff7ab2c950   976  stp x14, x15, [jssp, #-32]!
0xffff7ab2c954   980  stp x18, lr, [jssp, #16]
0xffff7ab2c958   984  stp x10, x11, [jssp, #-32]!
0xffff7ab2c95c   988  stp x12, x13, [jssp, #16]
0xffff7ab2c960   992  stp x5, x7, [jssp, #-32]!
0xffff7ab2c964   996  stp x8, x9, [jssp, #16]
0xffff7ab2c968  1000  stp x2, x3, [jssp, #-24]!
0xffff7ab2c96c  1004  str x4, [jssp, #16]
0xffff7ab2c970  1008  mov x0, x5
0xffff7ab2c974  1012  mov x1, x7
0xffff7ab2c978  1016  ldr x2, pc+488 (addr 0x0000ffff7ab2cb60)    ;; external reference (isolate)
0xffff7ab2c97c  1020  ldr x16, pc+492 (addr 0x0000ffff7ab2cb68)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2c980  1024  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2c984  1028  blr x16
0xffff7ab2c988  1032  ldp x4, x5, [jssp, #16]
0xffff7ab2c98c  1036  ldp x2, x3, [jssp], #32
0xffff7ab2c990  1040  ldp x9, x10, [jssp, #16]
0xffff7ab2c994  1044  ldp x7, x8, [jssp], #32
0xffff7ab2c998  1048  ldp x13, x14, [jssp, #16]
0xffff7ab2c99c  1052  ldp x11, x12, [jssp], #32
0xffff7ab2c9a0  1056  ldr lr, [jssp, #16]
0xffff7ab2c9a4  1060  ldp x15, x18, [jssp], #24
0xffff7ab2c9a8  1064  ldp x1, x0, [jssp], #16
0xffff7ab2c9ac  1068  ldr x16, pc+452 (addr 0x0000ffff7ab2cb70)    ;; external reference (store_buffer_top)
0xffff7ab2c9b0  1072  ldr x6, [x16]
0xffff7ab2c9b4  1076  str x7, [x6], #8
0xffff7ab2c9b8  1080  str x6, [x16]
0xffff7ab2c9bc  1084  tst x6, #0x1ffff
0xffff7ab2c9c0  1088  b.eq #+0x8 (addr 0xffff7ab2c9c8)
0xffff7ab2c9c4  1092  ret
0xffff7ab2c9c8  1096  sub csp, jssp, #0x8 (8)
0xffff7ab2c9cc  1100  str lr, [jssp, #-8]!
0xffff7ab2c9d0  1104  ldr x17, pc+424 (addr 0x0000ffff7ab2cb78)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2c9d4  1108  blr x17
0xffff7ab2c9d8  1112  ldr lr, [jssp], #8
0xffff7ab2c9dc  1116  ret
0xffff7ab2c9e0  1120  and x6, x5, #0xfffffffffff00000
0xffff7ab2c9e4  1124  ldr x0, [x6, #104]
0xffff7ab2c9e8  1128  subs x0, x0, #0x1 (1)
0xffff7ab2c9ec  1132  str x0, [x6, #104]
0xffff7ab2c9f0  1136  b.mi #+0x84 (addr 0xffff7ab2ca74)
0xffff7ab2c9f4  1140  ubfx x16, x5, #8, #12
0xffff7ab2c9f8  1144  and x6, x5, #0xfffffffffff00000
0xffff7ab2c9fc  1148  add x6, x6, x16, lsl #2
0xffff7ab2ca00  1152  ubfx x0, x5, #3, #5
0xffff7ab2ca04  1156  ldr x6, [x6, #360]
0xffff7ab2ca08  1160  lsr x6, x6, x0
0xffff7ab2ca0c  1164  tbz w6, #0, #+0x8 (addr 0xffff7ab2ca14)
0xffff7ab2ca10  1168  tbnz w6, #1, #+0xc (addr 0xffff7ab2ca1c)
0xffff7ab2ca14  1172  ldp x1, x0, [jssp], #16
0xffff7ab2ca18  1176  ret
0xffff7ab2ca1c  1180  ldr x6, [x7]
0xffff7ab2ca20  1184  and x0, x6, #0xfffffffffff00000
0xffff7ab2ca24  1188  ldr x0, [x0, #8]
0xffff7ab2ca28  1192  tbz w0, #6, #+0x18 (addr 0xffff7ab2ca40)
0xffff7ab2ca2c  1196  and x0, x5, #0xfffffffffff00000
0xffff7ab2ca30  1200  ldr x0, [x0, #8]
0xffff7ab2ca34  1204  movz x16, #0x58
0xffff7ab2ca38  1208  tst x0, x16
0xffff7ab2ca3c  1212  b.eq #+0x38 (addr 0xffff7ab2ca74)
0xffff7ab2ca40  1216  sub csp, jssp, #0x10 (16)
0xffff7ab2ca44  1220  stp x5, x7, [jssp, #-16]!
0xffff7ab2ca48  1224  ubfx x16, x6, #8, #12
0xffff7ab2ca4c  1228  and x0, x6, #0xfffffffffff00000
0xffff7ab2ca50  1232  add x0, x0, x16, lsl #2
0xffff7ab2ca54  1236  ubfx x5, x6, #3, #5
0xffff7ab2ca58  1240  ldr x7, [x0, #360]
0xffff7ab2ca5c  1244  lsr x7, x7, x5
0xffff7ab2ca60  1248  tbz w7, #0, #+0x10 (addr 0xffff7ab2ca70)
0xffff7ab2ca64  1252  ldp x5, x7, [jssp], #16
0xffff7ab2ca68  1256  ldp x1, x0, [jssp], #16
0xffff7ab2ca6c  1260  ret
0xffff7ab2ca70  1264  ldp x5, x7, [jssp], #16
0xffff7ab2ca74  1268  sub csp, jssp, #0x78 (120)
0xffff7ab2ca78  1272  stp x14, x15, [jssp, #-32]!
0xffff7ab2ca7c  1276  stp x18, lr, [jssp, #16]
0xffff7ab2ca80  1280  stp x10, x11, [jssp, #-32]!
0xffff7ab2ca84  1284  stp x12, x13, [jssp, #16]
0xffff7ab2ca88  1288  stp x5, x7, [jssp, #-32]!
0xffff7ab2ca8c  1292  stp x8, x9, [jssp, #16]
0xffff7ab2ca90  1296  stp x2, x3, [jssp, #-24]!
0xffff7ab2ca94  1300  str x4, [jssp, #16]
0xffff7ab2ca98  1304  mov x0, x5
0xffff7ab2ca9c  1308  mov x1, x7
0xffff7ab2caa0  1312  ldr x2, pc+224 (addr 0x0000ffff7ab2cb80)    ;; external reference (isolate)
0xffff7ab2caa4  1316  ldr x16, pc+228 (addr 0x0000ffff7ab2cb88)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2caa8  1320  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2caac  1324  blr x16
0xffff7ab2cab0  1328  ldp x4, x5, [jssp, #16]
0xffff7ab2cab4  1332  ldp x2, x3, [jssp], #32
0xffff7ab2cab8  1336  ldp x9, x10, [jssp, #16]
0xffff7ab2cabc  1340  ldp x7, x8, [jssp], #32
0xffff7ab2cac0  1344  ldp x13, x14, [jssp, #16]
0xffff7ab2cac4  1348  ldp x11, x12, [jssp], #32
0xffff7ab2cac8  1352  ldr lr, [jssp, #16]
0xffff7ab2cacc  1356  ldp x15, x18, [jssp], #24
0xffff7ab2cad0  1360  ldp x1, x0, [jssp], #16
0xffff7ab2cad4  1364  ret
0xffff7ab2cad8  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab2cadc  1372  d63f03e0       constant
0xffff7ab2cae0  1376  09abe8c0       constant
0xffff7ab2cae4  1380  00000000       constant
0xffff7ab2cae8  1384  7ab064c0       constant
0xffff7ab2caec  1388  0000ffff       constant
0xffff7ab2caf0  1392  09abe8c0       constant
0xffff7ab2caf4  1396  00000000       constant
0xffff7ab2caf8  1400  7ab064c0       constant
0xffff7ab2cafc  1404  0000ffff       constant
0xffff7ab2cb00  1408  09abe8c0       constant
0xffff7ab2cb04  1412  00000000       constant
0xffff7ab2cb08  1416  7ab064c0       constant
0xffff7ab2cb0c  1420  0000ffff       constant
0xffff7ab2cb10  1424  09abd2d0       constant
0xffff7ab2cb14  1428  00000000       constant
0xffff7ab2cb18  1432  00c2d958       constant
0xffff7ab2cb1c  1436  00000000       constant
0xffff7ab2cb20  1440  09abe8c0       constant
0xffff7ab2cb24  1444  00000000       constant
0xffff7ab2cb28  1448  7ab064c0       constant
0xffff7ab2cb2c  1452  0000ffff       constant
0xffff7ab2cb30  1456  09abd2d0       constant
0xffff7ab2cb34  1460  00000000       constant
0xffff7ab2cb38  1464  00c2d958       constant
0xffff7ab2cb3c  1468  00000000       constant
0xffff7ab2cb40  1472  09abe8c0       constant
0xffff7ab2cb44  1476  00000000       constant
0xffff7ab2cb48  1480  7ab064c0       constant
0xffff7ab2cb4c  1484  0000ffff       constant
0xffff7ab2cb50  1488  09abe8c0       constant
0xffff7ab2cb54  1492  00000000       constant
0xffff7ab2cb58  1496  7ab064c0       constant
0xffff7ab2cb5c  1500  0000ffff       constant
0xffff7ab2cb60  1504  09abd2d0       constant
0xffff7ab2cb64  1508  00000000       constant
0xffff7ab2cb68  1512  00c2d958       constant
0xffff7ab2cb6c  1516  00000000       constant
0xffff7ab2cb70  1520  09abe8c0       constant
0xffff7ab2cb74  1524  00000000       constant
0xffff7ab2cb78  1528  7ab064c0       constant
0xffff7ab2cb7c  1532  0000ffff       constant
0xffff7ab2cb80  1536  09abd2d0       constant
0xffff7ab2cb84  1540  00000000       constant
0xffff7ab2cb88  1544  00c2d958       constant
0xffff7ab2cb8c  1548  00000000       constant


RelocInfo (size = 59)
0xffff7ab2c588  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2c5ac  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2c624  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2c648  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2c688  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2c6ac  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2c6ec  external reference (isolate)  (0x9abd2d0)
0xffff7ab2c6f0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2c720  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2c744  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2c7f4  external reference (isolate)  (0x9abd2d0)
0xffff7ab2c7f8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2c890  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2c8b4  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2c914  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2c938  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2c978  external reference (isolate)  (0x9abd2d0)
0xffff7ab2c97c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2c9ac  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2c9d0  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2caa0  external reference (isolate)  (0x9abd2d0)
0xffff7ab2caa4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2cad8  constant pool (size 184)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 333)
0xffff7ab2d100     0  movz x2, #0xe2c0
0xffff7ab2d104     4  movk x2, #0x9ab, lsl #16
0xffff7ab2d108     8  ldp x3, x0, [x2]
0xffff7ab2d10c    12  adds x16, x3, #0x58 (88)
0xffff7ab2d110    16  ccmp x16, x0, #nzCv, lo
0xffff7ab2d114    20  b.hi #+0x64 (addr 0xffff7ab2d178)
0xffff7ab2d118    24  str x16, [x2]
0xffff7ab2d11c    28  orr x3, x3, #0x1
0xffff7ab2d120    32  ldr x0, pc+200 (addr 0x0000ffff7ab2d1e8)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab2d124    36  stur x0, [x3, #-1]
0xffff7ab2d128    40  movz x0, #0x900000000
0xffff7ab2d12c    44  stur x0, [x3, #7]
0xffff7ab2d130    48  stur x1, [x3, #15]
0xffff7ab2d134    52  stur cp, [x3, #23]
0xffff7ab2d138    56  ldr x0, pc+184 (addr 0x0000ffff7ab2d1f0)    ;; object: 0x20d04519 <the hole>
0xffff7ab2d13c    60  stur x0, [x3, #31]
0xffff7ab2d140    64  ldur x0, [cp, #39]
0xffff7ab2d144    68  stur x0, [x3, #39]
0xffff7ab2d148    72  ldr x0, pc+176 (addr 0x0000ffff7ab2d1f8)    ;; object: 0x20d04241 <undefined>
0xffff7ab2d14c    76  stur x0, [x3, #47]
0xffff7ab2d150    80  ldr x0, pc+176 (addr 0x0000ffff7ab2d200)    ;; object: 0x20d04241 <undefined>
0xffff7ab2d154    84  stur x0, [x3, #55]
0xffff7ab2d158    88  ldr x0, pc+176 (addr 0x0000ffff7ab2d208)    ;; object: 0x20d04241 <undefined>
0xffff7ab2d15c    92  stur x0, [x3, #63]
0xffff7ab2d160    96  ldr x0, pc+176 (addr 0x0000ffff7ab2d210)    ;; object: 0x20d04241 <undefined>
0xffff7ab2d164   100  stur x0, [x3, #71]
0xffff7ab2d168   104  ldr x0, pc+176 (addr 0x0000ffff7ab2d218)    ;; object: 0x20d04241 <undefined>
0xffff7ab2d16c   108  stur x0, [x3, #79]
0xffff7ab2d170   112  mov x0, x3
0xffff7ab2d174   116  ret
0xffff7ab2d178   120  sub csp, jssp, #0x10 (16)
0xffff7ab2d17c   124  stp fp, lr, [jssp, #-16]!
0xffff7ab2d180   128  movz fp, #0xa00000000
0xffff7ab2d184   132  sub csp, jssp, #0x8 (8)
0xffff7ab2d188   136  str fp, [jssp, #-8]!
0xffff7ab2d18c   140  add fp, jssp, #0x8 (8)
0xffff7ab2d190   144  movz x3, #0x0
0xffff7ab2d194   148  mov x16, lr
0xffff7ab2d198   152  ldr x17, pc+136 (addr 0x0000ffff7ab2d220)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab2d19c   156  blr x17
0xffff7ab2d1a0   160  movz x0, #0x5800000000
0xffff7ab2d1a4   164  movz x10, #0x0
0xffff7ab2d1a8   168  sub csp, jssp, #0x10 (16)
0xffff7ab2d1ac   172  stp x10, x0, [jssp, #-16]!
0xffff7ab2d1b0   176  movz x0, #0x2
0xffff7ab2d1b4   180  movz x1, #0x5b88
0xffff7ab2d1b8   184  movk x1, #0xe2, lsl #16
0xffff7ab2d1bc   188  ldr x16, pc+108 (addr 0x0000ffff7ab2d228)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab2d1c0   192  blr x16
0xffff7ab2d1c4   196  str x0, [jssp, #24]
0xffff7ab2d1c8   200  ldr x16, pc+104 (addr 0x0000ffff7ab2d230)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab2d1cc   204  blr x16
0xffff7ab2d1d0   208  ldr lr, [jssp, #16]
0xffff7ab2d1d4   212  ldp xzr, fp, [jssp], #24
0xffff7ab2d1d8   216  b #-0xb8 (addr 0xffff7ab2d120)
0xffff7ab2d1dc   220  580002df       constant pool begin (num_const = 22)    ;; constant pool
0xffff7ab2d1e0   224  d63f03e0       constant
0xffff7ab2d1e4   228  d503201f       constant
0xffff7ab2d1e8   232  4ec06149       constant
0xffff7ab2d1ec   236  00000000       constant
0xffff7ab2d1f0   240  20d04519       constant
0xffff7ab2d1f4   244  00000000       constant
0xffff7ab2d1f8   248  20d04241       constant
0xffff7ab2d1fc   252  00000000       constant
0xffff7ab2d200   256  20d04241       constant
0xffff7ab2d204   260  00000000       constant
0xffff7ab2d208   264  20d04241       constant
0xffff7ab2d20c   268  00000000       constant
0xffff7ab2d210   272  20d04241       constant
0xffff7ab2d214   276  00000000       constant
0xffff7ab2d218   280  20d04241       constant
0xffff7ab2d21c   284  00000000       constant
0xffff7ab2d220   288  7ab06820       constant
0xffff7ab2d224   292  0000ffff       constant
0xffff7ab2d228   296  7ab06260       constant
0xffff7ab2d22c   300  0000ffff       constant
0xffff7ab2d230   304  7ab068e0       constant
0xffff7ab2d234   308  0000ffff       constant


Safepoints (size = 21)
0xffff7ab2d1c4   196  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 16)
0xffff7ab2d120  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab2d138  embedded object  (0x20d04519 <the hole>)
0xffff7ab2d148  embedded object  (0x20d04241 <undefined>)
0xffff7ab2d150  embedded object  (0x20d04241 <undefined>)
0xffff7ab2d158  embedded object  (0x20d04241 <undefined>)
0xffff7ab2d160  embedded object  (0x20d04241 <undefined>)
0xffff7ab2d168  embedded object  (0x20d04241 <undefined>)
0xffff7ab2d198  code target (STUB)  (0xffff7ab06820)
0xffff7ab2d1bc  code target (STUB)  (0xffff7ab06260)
0xffff7ab2d1c8  code target (STUB)  (0xffff7ab068e0)
0xffff7ab2d1dc  constant pool (size 92)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1904)
0xffff7ab2d2c0     0  adr xzr, #+0x40 (addr 0xffff7ab2d300)
0xffff7ab2d2c4     4  adr xzr, #+0x358 (addr 0xffff7ab2d61c)
0xffff7ab2d2c8     8  ldr x16, pc+1720 (addr 0x0000ffff7ab2d980)    ;; external reference (store_buffer_top)
0xffff7ab2d2cc    12  ldr x4, [x16]
0xffff7ab2d2d0    16  str x6, [x4], #8
0xffff7ab2d2d4    20  str x4, [x16]
0xffff7ab2d2d8    24  tst x4, #0x1ffff
0xffff7ab2d2dc    28  b.eq #+0x8 (addr 0xffff7ab2d2e4)
0xffff7ab2d2e0    32  ret
0xffff7ab2d2e4    36  sub csp, jssp, #0x8 (8)
0xffff7ab2d2e8    40  str lr, [jssp, #-8]!
0xffff7ab2d2ec    44  ldr x17, pc+1692 (addr 0x0000ffff7ab2d988)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab2d2f0    48  blr x17
0xffff7ab2d2f4    52  ldr lr, [jssp], #8
0xffff7ab2d2f8    56  ret
0xffff7ab2d2fc    60  ret
0xffff7ab2d300    64  sub csp, jssp, #0x10 (16)
0xffff7ab2d304    68  stp x2, x1, [jssp, #-16]!
0xffff7ab2d308    72  ldr x4, [x6]
0xffff7ab2d30c    76  and x16, x4, #0xfffffffffff00000
0xffff7ab2d310    80  ldr x16, [x16, #8]
0xffff7ab2d314    84  tst x16, #0x18
0xffff7ab2d318    88  b.eq #+0x1d4 (addr 0xffff7ab2d4ec)
0xffff7ab2d31c    92  and x16, x0, #0xfffffffffff00000
0xffff7ab2d320    96  ldr x16, [x16, #8]
0xffff7ab2d324   100  tst x16, #0x18
0xffff7ab2d328   104  b.ne #+0x1c4 (addr 0xffff7ab2d4ec)
0xffff7ab2d32c   108  and x4, x0, #0xfffffffffff00000
0xffff7ab2d330   112  ldr x1, [x4, #104]
0xffff7ab2d334   116  subs x1, x1, #0x1 (1)
0xffff7ab2d338   120  str x1, [x4, #104]
0xffff7ab2d33c   124  b.mi #+0xc4 (addr 0xffff7ab2d400)
0xffff7ab2d340   128  ubfx x16, x0, #8, #12
0xffff7ab2d344   132  and x4, x0, #0xfffffffffff00000
0xffff7ab2d348   136  add x4, x4, x16, lsl #2
0xffff7ab2d34c   140  ubfx x1, x0, #3, #5
0xffff7ab2d350   144  ldr x4, [x4, #360]
0xffff7ab2d354   148  lsr x4, x4, x1
0xffff7ab2d358   152  tbz w4, #0, #+0x8 (addr 0xffff7ab2d360)
0xffff7ab2d35c   156  tbnz w4, #1, #+0x3c (addr 0xffff7ab2d398)
0xffff7ab2d360   160  ldp x2, x1, [jssp], #16
0xffff7ab2d364   164  ldr x16, pc+1580 (addr 0x0000ffff7ab2d990)    ;; external reference (store_buffer_top)
0xffff7ab2d368   168  ldr x4, [x16]
0xffff7ab2d36c   172  str x6, [x4], #8
0xffff7ab2d370   176  str x4, [x16]
0xffff7ab2d374   180  tst x4, #0x1ffff
0xffff7ab2d378   184  b.eq #+0x8 (addr 0xffff7ab2d380)
0xffff7ab2d37c   188  ret
0xffff7ab2d380   192  sub csp, jssp, #0x8 (8)
0xffff7ab2d384   196  str lr, [jssp, #-8]!
0xffff7ab2d388   200  ldr x17, pc+1552 (addr 0x0000ffff7ab2d998)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab2d38c   204  blr x17
0xffff7ab2d390   208  ldr lr, [jssp], #8
0xffff7ab2d394   212  ret
0xffff7ab2d398   216  ldr x4, [x6]
0xffff7ab2d39c   220  sub csp, jssp, #0x10 (16)
0xffff7ab2d3a0   224  stp x0, x6, [jssp, #-16]!
0xffff7ab2d3a4   228  ubfx x16, x4, #8, #12
0xffff7ab2d3a8   232  and x1, x4, #0xfffffffffff00000
0xffff7ab2d3ac   236  add x1, x1, x16, lsl #2
0xffff7ab2d3b0   240  ubfx x0, x4, #3, #5
0xffff7ab2d3b4   244  ldr x6, [x1, #360]
0xffff7ab2d3b8   248  lsr x6, x6, x0
0xffff7ab2d3bc   252  tbz w6, #0, #+0x40 (addr 0xffff7ab2d3fc)
0xffff7ab2d3c0   256  ldp x0, x6, [jssp], #16
0xffff7ab2d3c4   260  ldp x2, x1, [jssp], #16
0xffff7ab2d3c8   264  ldr x16, pc+1496 (addr 0x0000ffff7ab2d9a0)    ;; external reference (store_buffer_top)
0xffff7ab2d3cc   268  ldr x4, [x16]
0xffff7ab2d3d0   272  str x6, [x4], #8
0xffff7ab2d3d4   276  str x4, [x16]
0xffff7ab2d3d8   280  tst x4, #0x1ffff
0xffff7ab2d3dc   284  b.eq #+0x8 (addr 0xffff7ab2d3e4)
0xffff7ab2d3e0   288  ret
0xffff7ab2d3e4   292  sub csp, jssp, #0x8 (8)
0xffff7ab2d3e8   296  str lr, [jssp, #-8]!
0xffff7ab2d3ec   300  ldr x17, pc+1468 (addr 0x0000ffff7ab2d9a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab2d3f0   304  blr x17
0xffff7ab2d3f4   308  ldr lr, [jssp], #8
0xffff7ab2d3f8   312  ret
0xffff7ab2d3fc   316  ldp x0, x6, [jssp], #16
0xffff7ab2d400   320  sub csp, jssp, #0x78 (120)
0xffff7ab2d404   324  stp x14, x15, [jssp, #-32]!
0xffff7ab2d408   328  stp x18, lr, [jssp, #16]
0xffff7ab2d40c   332  stp x10, x11, [jssp, #-32]!
0xffff7ab2d410   336  stp x12, x13, [jssp, #16]
0xffff7ab2d414   340  stp x6, x7, [jssp, #-32]!
0xffff7ab2d418   344  stp x8, x9, [jssp, #16]
0xffff7ab2d41c   348  stp x0, x3, [jssp, #-24]!
0xffff7ab2d420   352  str x5, [jssp, #16]
0xffff7ab2d424   356  sub csp, jssp, #0xb0 (176)
0xffff7ab2d428   360  stp d26, d27, [jssp, #-32]!
0xffff7ab2d42c   364  stp d28, d29, [jssp, #16]
0xffff7ab2d430   368  stp d22, d23, [jssp, #-32]!
0xffff7ab2d434   372  stp d24, d25, [jssp, #16]
0xffff7ab2d438   376  stp d18, d19, [jssp, #-32]!
0xffff7ab2d43c   380  stp d20, d21, [jssp, #16]
0xffff7ab2d440   384  stp d6, d7, [jssp, #-32]!
0xffff7ab2d444   388  stp d16, d17, [jssp, #16]
0xffff7ab2d448   392  stp d2, d3, [jssp, #-32]!
0xffff7ab2d44c   396  stp d4, d5, [jssp, #16]
0xffff7ab2d450   400  stp d0, d1, [jssp, #-16]!
0xffff7ab2d454   404  mov x1, x6
0xffff7ab2d458   408  ldr x2, pc+1368 (addr 0x0000ffff7ab2d9b0)    ;; external reference (isolate)
0xffff7ab2d45c   412  ldr x16, pc+1372 (addr 0x0000ffff7ab2d9b8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2d460   416  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2d464   420  blr x16
0xffff7ab2d468   424  ldp d2, d3, [jssp, #16]
0xffff7ab2d46c   428  ldp d0, d1, [jssp], #32
0xffff7ab2d470   432  ldp d6, d7, [jssp, #16]
0xffff7ab2d474   436  ldp d4, d5, [jssp], #32
0xffff7ab2d478   440  ldp d18, d19, [jssp, #16]
0xffff7ab2d47c   444  ldp d16, d17, [jssp], #32
0xffff7ab2d480   448  ldp d22, d23, [jssp, #16]
0xffff7ab2d484   452  ldp d20, d21, [jssp], #32
0xffff7ab2d488   456  ldp d26, d27, [jssp, #16]
0xffff7ab2d48c   460  ldp d24, d25, [jssp], #32
0xffff7ab2d490   464  ldp d28, d29, [jssp], #16
0xffff7ab2d494   468  ldp x5, x6, [jssp, #16]
0xffff7ab2d498   472  ldp x0, x3, [jssp], #32
0xffff7ab2d49c   476  ldp x9, x10, [jssp, #16]
0xffff7ab2d4a0   480  ldp x7, x8, [jssp], #32
0xffff7ab2d4a4   484  ldp x13, x14, [jssp, #16]
0xffff7ab2d4a8   488  ldp x11, x12, [jssp], #32
0xffff7ab2d4ac   492  ldr lr, [jssp, #16]
0xffff7ab2d4b0   496  ldp x15, x18, [jssp], #24
0xffff7ab2d4b4   500  ldp x2, x1, [jssp], #16
0xffff7ab2d4b8   504  ldr x16, pc+1288 (addr 0x0000ffff7ab2d9c0)    ;; external reference (store_buffer_top)
0xffff7ab2d4bc   508  ldr x4, [x16]
0xffff7ab2d4c0   512  str x6, [x4], #8
0xffff7ab2d4c4   516  str x4, [x16]
0xffff7ab2d4c8   520  tst x4, #0x1ffff
0xffff7ab2d4cc   524  b.eq #+0x8 (addr 0xffff7ab2d4d4)
0xffff7ab2d4d0   528  ret
0xffff7ab2d4d4   532  sub csp, jssp, #0x8 (8)
0xffff7ab2d4d8   536  str lr, [jssp, #-8]!
0xffff7ab2d4dc   540  ldr x17, pc+1260 (addr 0x0000ffff7ab2d9c8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab2d4e0   544  blr x17
0xffff7ab2d4e4   548  ldr lr, [jssp], #8
0xffff7ab2d4e8   552  ret
0xffff7ab2d4ec   556  and x4, x0, #0xfffffffffff00000
0xffff7ab2d4f0   560  ldr x1, [x4, #104]
0xffff7ab2d4f4   564  subs x1, x1, #0x1 (1)
0xffff7ab2d4f8   568  str x1, [x4, #104]
0xffff7ab2d4fc   572  b.mi #+0x64 (addr 0xffff7ab2d560)
0xffff7ab2d500   576  ubfx x16, x0, #8, #12
0xffff7ab2d504   580  and x4, x0, #0xfffffffffff00000
0xffff7ab2d508   584  add x4, x4, x16, lsl #2
0xffff7ab2d50c   588  ubfx x1, x0, #3, #5
0xffff7ab2d510   592  ldr x4, [x4, #360]
0xffff7ab2d514   596  lsr x4, x4, x1
0xffff7ab2d518   600  tbz w4, #0, #+0x8 (addr 0xffff7ab2d520)
0xffff7ab2d51c   604  tbnz w4, #1, #+0xc (addr 0xffff7ab2d528)
0xffff7ab2d520   608  ldp x2, x1, [jssp], #16
0xffff7ab2d524   612  ret
0xffff7ab2d528   616  ldr x4, [x6]
0xffff7ab2d52c   620  sub csp, jssp, #0x10 (16)
0xffff7ab2d530   624  stp x0, x6, [jssp, #-16]!
0xffff7ab2d534   628  ubfx x16, x4, #8, #12
0xffff7ab2d538   632  and x1, x4, #0xfffffffffff00000
0xffff7ab2d53c   636  add x1, x1, x16, lsl #2
0xffff7ab2d540   640  ubfx x0, x4, #3, #5
0xffff7ab2d544   644  ldr x6, [x1, #360]
0xffff7ab2d548   648  lsr x6, x6, x0
0xffff7ab2d54c   652  tbz w6, #0, #+0x10 (addr 0xffff7ab2d55c)
0xffff7ab2d550   656  ldp x0, x6, [jssp], #16
0xffff7ab2d554   660  ldp x2, x1, [jssp], #16
0xffff7ab2d558   664  ret
0xffff7ab2d55c   668  ldp x0, x6, [jssp], #16
0xffff7ab2d560   672  sub csp, jssp, #0x78 (120)
0xffff7ab2d564   676  stp x14, x15, [jssp, #-32]!
0xffff7ab2d568   680  stp x18, lr, [jssp, #16]
0xffff7ab2d56c   684  stp x10, x11, [jssp, #-32]!
0xffff7ab2d570   688  stp x12, x13, [jssp, #16]
0xffff7ab2d574   692  stp x6, x7, [jssp, #-32]!
0xffff7ab2d578   696  stp x8, x9, [jssp, #16]
0xffff7ab2d57c   700  stp x0, x3, [jssp, #-24]!
0xffff7ab2d580   704  str x5, [jssp, #16]
0xffff7ab2d584   708  sub csp, jssp, #0xb0 (176)
0xffff7ab2d588   712  stp d26, d27, [jssp, #-32]!
0xffff7ab2d58c   716  stp d28, d29, [jssp, #16]
0xffff7ab2d590   720  stp d22, d23, [jssp, #-32]!
0xffff7ab2d594   724  stp d24, d25, [jssp, #16]
0xffff7ab2d598   728  stp d18, d19, [jssp, #-32]!
0xffff7ab2d59c   732  stp d20, d21, [jssp, #16]
0xffff7ab2d5a0   736  stp d6, d7, [jssp, #-32]!
0xffff7ab2d5a4   740  stp d16, d17, [jssp, #16]
0xffff7ab2d5a8   744  stp d2, d3, [jssp, #-32]!
0xffff7ab2d5ac   748  stp d4, d5, [jssp, #16]
0xffff7ab2d5b0   752  stp d0, d1, [jssp, #-16]!
0xffff7ab2d5b4   756  mov x1, x6
0xffff7ab2d5b8   760  ldr x2, pc+1048 (addr 0x0000ffff7ab2d9d0)    ;; external reference (isolate)
0xffff7ab2d5bc   764  ldr x16, pc+1052 (addr 0x0000ffff7ab2d9d8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2d5c0   768  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2d5c4   772  blr x16
0xffff7ab2d5c8   776  ldp d2, d3, [jssp, #16]
0xffff7ab2d5cc   780  ldp d0, d1, [jssp], #32
0xffff7ab2d5d0   784  ldp d6, d7, [jssp, #16]
0xffff7ab2d5d4   788  ldp d4, d5, [jssp], #32
0xffff7ab2d5d8   792  ldp d18, d19, [jssp, #16]
0xffff7ab2d5dc   796  ldp d16, d17, [jssp], #32
0xffff7ab2d5e0   800  ldp d22, d23, [jssp, #16]
0xffff7ab2d5e4   804  ldp d20, d21, [jssp], #32
0xffff7ab2d5e8   808  ldp d26, d27, [jssp, #16]
0xffff7ab2d5ec   812  ldp d24, d25, [jssp], #32
0xffff7ab2d5f0   816  ldp d28, d29, [jssp], #16
0xffff7ab2d5f4   820  ldp x5, x6, [jssp, #16]
0xffff7ab2d5f8   824  ldp x0, x3, [jssp], #32
0xffff7ab2d5fc   828  ldp x9, x10, [jssp, #16]
0xffff7ab2d600   832  ldp x7, x8, [jssp], #32
0xffff7ab2d604   836  ldp x13, x14, [jssp, #16]
0xffff7ab2d608   840  ldp x11, x12, [jssp], #32
0xffff7ab2d60c   844  ldr lr, [jssp, #16]
0xffff7ab2d610   848  ldp x15, x18, [jssp], #24
0xffff7ab2d614   852  ldp x2, x1, [jssp], #16
0xffff7ab2d618   856  ret
0xffff7ab2d61c   860  sub csp, jssp, #0x10 (16)
0xffff7ab2d620   864  stp x2, x1, [jssp, #-16]!
0xffff7ab2d624   868  ldr x4, [x6]
0xffff7ab2d628   872  and x16, x4, #0xfffffffffff00000
0xffff7ab2d62c   876  ldr x16, [x16, #8]
0xffff7ab2d630   880  tst x16, #0x18
0xffff7ab2d634   884  b.eq #+0x1f4 (addr 0xffff7ab2d828)
0xffff7ab2d638   888  and x16, x0, #0xfffffffffff00000
0xffff7ab2d63c   892  ldr x16, [x16, #8]
0xffff7ab2d640   896  tst x16, #0x18
0xffff7ab2d644   900  b.ne #+0x1e4 (addr 0xffff7ab2d828)
0xffff7ab2d648   904  and x4, x0, #0xfffffffffff00000
0xffff7ab2d64c   908  ldr x1, [x4, #104]
0xffff7ab2d650   912  subs x1, x1, #0x1 (1)
0xffff7ab2d654   916  str x1, [x4, #104]
0xffff7ab2d658   920  b.mi #+0xe4 (addr 0xffff7ab2d73c)
0xffff7ab2d65c   924  ubfx x16, x0, #8, #12
0xffff7ab2d660   928  and x4, x0, #0xfffffffffff00000
0xffff7ab2d664   932  add x4, x4, x16, lsl #2
0xffff7ab2d668   936  ubfx x1, x0, #3, #5
0xffff7ab2d66c   940  ldr x4, [x4, #360]
0xffff7ab2d670   944  lsr x4, x4, x1
0xffff7ab2d674   948  tbz w4, #0, #+0x8 (addr 0xffff7ab2d67c)
0xffff7ab2d678   952  tbnz w4, #1, #+0x3c (addr 0xffff7ab2d6b4)
0xffff7ab2d67c   956  ldp x2, x1, [jssp], #16
0xffff7ab2d680   960  ldr x16, pc+864 (addr 0x0000ffff7ab2d9e0)    ;; external reference (store_buffer_top)
0xffff7ab2d684   964  ldr x4, [x16]
0xffff7ab2d688   968  str x6, [x4], #8
0xffff7ab2d68c   972  str x4, [x16]
0xffff7ab2d690   976  tst x4, #0x1ffff
0xffff7ab2d694   980  b.eq #+0x8 (addr 0xffff7ab2d69c)
0xffff7ab2d698   984  ret
0xffff7ab2d69c   988  sub csp, jssp, #0x8 (8)
0xffff7ab2d6a0   992  str lr, [jssp, #-8]!
0xffff7ab2d6a4   996  ldr x17, pc+836 (addr 0x0000ffff7ab2d9e8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab2d6a8  1000  blr x17
0xffff7ab2d6ac  1004  ldr lr, [jssp], #8
0xffff7ab2d6b0  1008  ret
0xffff7ab2d6b4  1012  ldr x4, [x6]
0xffff7ab2d6b8  1016  and x1, x4, #0xfffffffffff00000
0xffff7ab2d6bc  1020  ldr x1, [x1, #8]
0xffff7ab2d6c0  1024  tbz w1, #6, #+0x18 (addr 0xffff7ab2d6d8)
0xffff7ab2d6c4  1028  and x1, x0, #0xfffffffffff00000
0xffff7ab2d6c8  1032  ldr x1, [x1, #8]
0xffff7ab2d6cc  1036  movz x16, #0x58
0xffff7ab2d6d0  1040  tst x1, x16
0xffff7ab2d6d4  1044  b.eq #+0x68 (addr 0xffff7ab2d73c)
0xffff7ab2d6d8  1048  sub csp, jssp, #0x10 (16)
0xffff7ab2d6dc  1052  stp x0, x6, [jssp, #-16]!
0xffff7ab2d6e0  1056  ubfx x16, x4, #8, #12
0xffff7ab2d6e4  1060  and x1, x4, #0xfffffffffff00000
0xffff7ab2d6e8  1064  add x1, x1, x16, lsl #2
0xffff7ab2d6ec  1068  ubfx x0, x4, #3, #5
0xffff7ab2d6f0  1072  ldr x6, [x1, #360]
0xffff7ab2d6f4  1076  lsr x6, x6, x0
0xffff7ab2d6f8  1080  tbz w6, #0, #+0x40 (addr 0xffff7ab2d738)
0xffff7ab2d6fc  1084  ldp x0, x6, [jssp], #16
0xffff7ab2d700  1088  ldp x2, x1, [jssp], #16
0xffff7ab2d704  1092  ldr x16, pc+748 (addr 0x0000ffff7ab2d9f0)    ;; external reference (store_buffer_top)
0xffff7ab2d708  1096  ldr x4, [x16]
0xffff7ab2d70c  1100  str x6, [x4], #8
0xffff7ab2d710  1104  str x4, [x16]
0xffff7ab2d714  1108  tst x4, #0x1ffff
0xffff7ab2d718  1112  b.eq #+0x8 (addr 0xffff7ab2d720)
0xffff7ab2d71c  1116  ret
0xffff7ab2d720  1120  sub csp, jssp, #0x8 (8)
0xffff7ab2d724  1124  str lr, [jssp, #-8]!
0xffff7ab2d728  1128  ldr x17, pc+720 (addr 0x0000ffff7ab2d9f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab2d72c  1132  blr x17
0xffff7ab2d730  1136  ldr lr, [jssp], #8
0xffff7ab2d734  1140  ret
0xffff7ab2d738  1144  ldp x0, x6, [jssp], #16
0xffff7ab2d73c  1148  sub csp, jssp, #0x78 (120)
0xffff7ab2d740  1152  stp x14, x15, [jssp, #-32]!
0xffff7ab2d744  1156  stp x18, lr, [jssp, #16]
0xffff7ab2d748  1160  stp x10, x11, [jssp, #-32]!
0xffff7ab2d74c  1164  stp x12, x13, [jssp, #16]
0xffff7ab2d750  1168  stp x6, x7, [jssp, #-32]!
0xffff7ab2d754  1172  stp x8, x9, [jssp, #16]
0xffff7ab2d758  1176  stp x0, x3, [jssp, #-24]!
0xffff7ab2d75c  1180  str x5, [jssp, #16]
0xffff7ab2d760  1184  sub csp, jssp, #0xb0 (176)
0xffff7ab2d764  1188  stp d26, d27, [jssp, #-32]!
0xffff7ab2d768  1192  stp d28, d29, [jssp, #16]
0xffff7ab2d76c  1196  stp d22, d23, [jssp, #-32]!
0xffff7ab2d770  1200  stp d24, d25, [jssp, #16]
0xffff7ab2d774  1204  stp d18, d19, [jssp, #-32]!
0xffff7ab2d778  1208  stp d20, d21, [jssp, #16]
0xffff7ab2d77c  1212  stp d6, d7, [jssp, #-32]!
0xffff7ab2d780  1216  stp d16, d17, [jssp, #16]
0xffff7ab2d784  1220  stp d2, d3, [jssp, #-32]!
0xffff7ab2d788  1224  stp d4, d5, [jssp, #16]
0xffff7ab2d78c  1228  stp d0, d1, [jssp, #-16]!
0xffff7ab2d790  1232  mov x1, x6
0xffff7ab2d794  1236  ldr x2, pc+620 (addr 0x0000ffff7ab2da00)    ;; external reference (isolate)
0xffff7ab2d798  1240  ldr x16, pc+624 (addr 0x0000ffff7ab2da08)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2d79c  1244  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2d7a0  1248  blr x16
0xffff7ab2d7a4  1252  ldp d2, d3, [jssp, #16]
0xffff7ab2d7a8  1256  ldp d0, d1, [jssp], #32
0xffff7ab2d7ac  1260  ldp d6, d7, [jssp, #16]
0xffff7ab2d7b0  1264  ldp d4, d5, [jssp], #32
0xffff7ab2d7b4  1268  ldp d18, d19, [jssp, #16]
0xffff7ab2d7b8  1272  ldp d16, d17, [jssp], #32
0xffff7ab2d7bc  1276  ldp d22, d23, [jssp, #16]
0xffff7ab2d7c0  1280  ldp d20, d21, [jssp], #32
0xffff7ab2d7c4  1284  ldp d26, d27, [jssp, #16]
0xffff7ab2d7c8  1288  ldp d24, d25, [jssp], #32
0xffff7ab2d7cc  1292  ldp d28, d29, [jssp], #16
0xffff7ab2d7d0  1296  ldp x5, x6, [jssp, #16]
0xffff7ab2d7d4  1300  ldp x0, x3, [jssp], #32
0xffff7ab2d7d8  1304  ldp x9, x10, [jssp, #16]
0xffff7ab2d7dc  1308  ldp x7, x8, [jssp], #32
0xffff7ab2d7e0  1312  ldp x13, x14, [jssp, #16]
0xffff7ab2d7e4  1316  ldp x11, x12, [jssp], #32
0xffff7ab2d7e8  1320  ldr lr, [jssp, #16]
0xffff7ab2d7ec  1324  ldp x15, x18, [jssp], #24
0xffff7ab2d7f0  1328  ldp x2, x1, [jssp], #16
0xffff7ab2d7f4  1332  ldr x16, pc+540 (addr 0x0000ffff7ab2da10)    ;; external reference (store_buffer_top)
0xffff7ab2d7f8  1336  ldr x4, [x16]
0xffff7ab2d7fc  1340  str x6, [x4], #8
0xffff7ab2d800  1344  str x4, [x16]
0xffff7ab2d804  1348  tst x4, #0x1ffff
0xffff7ab2d808  1352  b.eq #+0x8 (addr 0xffff7ab2d810)
0xffff7ab2d80c  1356  ret
0xffff7ab2d810  1360  sub csp, jssp, #0x8 (8)
0xffff7ab2d814  1364  str lr, [jssp, #-8]!
0xffff7ab2d818  1368  ldr x17, pc+512 (addr 0x0000ffff7ab2da18)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab2d81c  1372  blr x17
0xffff7ab2d820  1376  ldr lr, [jssp], #8
0xffff7ab2d824  1380  ret
0xffff7ab2d828  1384  and x4, x0, #0xfffffffffff00000
0xffff7ab2d82c  1388  ldr x1, [x4, #104]
0xffff7ab2d830  1392  subs x1, x1, #0x1 (1)
0xffff7ab2d834  1396  str x1, [x4, #104]
0xffff7ab2d838  1400  b.mi #+0x84 (addr 0xffff7ab2d8bc)
0xffff7ab2d83c  1404  ubfx x16, x0, #8, #12
0xffff7ab2d840  1408  and x4, x0, #0xfffffffffff00000
0xffff7ab2d844  1412  add x4, x4, x16, lsl #2
0xffff7ab2d848  1416  ubfx x1, x0, #3, #5
0xffff7ab2d84c  1420  ldr x4, [x4, #360]
0xffff7ab2d850  1424  lsr x4, x4, x1
0xffff7ab2d854  1428  tbz w4, #0, #+0x8 (addr 0xffff7ab2d85c)
0xffff7ab2d858  1432  tbnz w4, #1, #+0xc (addr 0xffff7ab2d864)
0xffff7ab2d85c  1436  ldp x2, x1, [jssp], #16
0xffff7ab2d860  1440  ret
0xffff7ab2d864  1444  ldr x4, [x6]
0xffff7ab2d868  1448  and x1, x4, #0xfffffffffff00000
0xffff7ab2d86c  1452  ldr x1, [x1, #8]
0xffff7ab2d870  1456  tbz w1, #6, #+0x18 (addr 0xffff7ab2d888)
0xffff7ab2d874  1460  and x1, x0, #0xfffffffffff00000
0xffff7ab2d878  1464  ldr x1, [x1, #8]
0xffff7ab2d87c  1468  movz x16, #0x58
0xffff7ab2d880  1472  tst x1, x16
0xffff7ab2d884  1476  b.eq #+0x38 (addr 0xffff7ab2d8bc)
0xffff7ab2d888  1480  sub csp, jssp, #0x10 (16)
0xffff7ab2d88c  1484  stp x0, x6, [jssp, #-16]!
0xffff7ab2d890  1488  ubfx x16, x4, #8, #12
0xffff7ab2d894  1492  and x1, x4, #0xfffffffffff00000
0xffff7ab2d898  1496  add x1, x1, x16, lsl #2
0xffff7ab2d89c  1500  ubfx x0, x4, #3, #5
0xffff7ab2d8a0  1504  ldr x6, [x1, #360]
0xffff7ab2d8a4  1508  lsr x6, x6, x0
0xffff7ab2d8a8  1512  tbz w6, #0, #+0x10 (addr 0xffff7ab2d8b8)
0xffff7ab2d8ac  1516  ldp x0, x6, [jssp], #16
0xffff7ab2d8b0  1520  ldp x2, x1, [jssp], #16
0xffff7ab2d8b4  1524  ret
0xffff7ab2d8b8  1528  ldp x0, x6, [jssp], #16
0xffff7ab2d8bc  1532  sub csp, jssp, #0x78 (120)
0xffff7ab2d8c0  1536  stp x14, x15, [jssp, #-32]!
0xffff7ab2d8c4  1540  stp x18, lr, [jssp, #16]
0xffff7ab2d8c8  1544  stp x10, x11, [jssp, #-32]!
0xffff7ab2d8cc  1548  stp x12, x13, [jssp, #16]
0xffff7ab2d8d0  1552  stp x6, x7, [jssp, #-32]!
0xffff7ab2d8d4  1556  stp x8, x9, [jssp, #16]
0xffff7ab2d8d8  1560  stp x0, x3, [jssp, #-24]!
0xffff7ab2d8dc  1564  str x5, [jssp, #16]
0xffff7ab2d8e0  1568  sub csp, jssp, #0xb0 (176)
0xffff7ab2d8e4  1572  stp d26, d27, [jssp, #-32]!
0xffff7ab2d8e8  1576  stp d28, d29, [jssp, #16]
0xffff7ab2d8ec  1580  stp d22, d23, [jssp, #-32]!
0xffff7ab2d8f0  1584  stp d24, d25, [jssp, #16]
0xffff7ab2d8f4  1588  stp d18, d19, [jssp, #-32]!
0xffff7ab2d8f8  1592  stp d20, d21, [jssp, #16]
0xffff7ab2d8fc  1596  stp d6, d7, [jssp, #-32]!
0xffff7ab2d900  1600  stp d16, d17, [jssp, #16]
0xffff7ab2d904  1604  stp d2, d3, [jssp, #-32]!
0xffff7ab2d908  1608  stp d4, d5, [jssp, #16]
0xffff7ab2d90c  1612  stp d0, d1, [jssp, #-16]!
0xffff7ab2d910  1616  mov x1, x6
0xffff7ab2d914  1620  ldr x2, pc+268 (addr 0x0000ffff7ab2da20)    ;; external reference (isolate)
0xffff7ab2d918  1624  ldr x16, pc+272 (addr 0x0000ffff7ab2da28)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2d91c  1628  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2d920  1632  blr x16
0xffff7ab2d924  1636  ldp d2, d3, [jssp, #16]
0xffff7ab2d928  1640  ldp d0, d1, [jssp], #32
0xffff7ab2d92c  1644  ldp d6, d7, [jssp, #16]
0xffff7ab2d930  1648  ldp d4, d5, [jssp], #32
0xffff7ab2d934  1652  ldp d18, d19, [jssp, #16]
0xffff7ab2d938  1656  ldp d16, d17, [jssp], #32
0xffff7ab2d93c  1660  ldp d22, d23, [jssp, #16]
0xffff7ab2d940  1664  ldp d20, d21, [jssp], #32
0xffff7ab2d944  1668  ldp d26, d27, [jssp, #16]
0xffff7ab2d948  1672  ldp d24, d25, [jssp], #32
0xffff7ab2d94c  1676  ldp d28, d29, [jssp], #16
0xffff7ab2d950  1680  ldp x5, x6, [jssp, #16]
0xffff7ab2d954  1684  ldp x0, x3, [jssp], #32
0xffff7ab2d958  1688  ldp x9, x10, [jssp, #16]
0xffff7ab2d95c  1692  ldp x7, x8, [jssp], #32
0xffff7ab2d960  1696  ldp x13, x14, [jssp, #16]
0xffff7ab2d964  1700  ldp x11, x12, [jssp], #32
0xffff7ab2d968  1704  ldr lr, [jssp, #16]
0xffff7ab2d96c  1708  ldp x15, x18, [jssp], #24
0xffff7ab2d970  1712  ldp x2, x1, [jssp], #16
0xffff7ab2d974  1716  ret
0xffff7ab2d978  1720  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab2d97c  1724  d63f03e0       constant
0xffff7ab2d980  1728  09abe8c0       constant
0xffff7ab2d984  1732  00000000       constant
0xffff7ab2d988  1736  7ab065a0       constant
0xffff7ab2d98c  1740  0000ffff       constant
0xffff7ab2d990  1744  09abe8c0       constant
0xffff7ab2d994  1748  00000000       constant
0xffff7ab2d998  1752  7ab065a0       constant
0xffff7ab2d99c  1756  0000ffff       constant
0xffff7ab2d9a0  1760  09abe8c0       constant
0xffff7ab2d9a4  1764  00000000       constant
0xffff7ab2d9a8  1768  7ab065a0       constant
0xffff7ab2d9ac  1772  0000ffff       constant
0xffff7ab2d9b0  1776  09abd2d0       constant
0xffff7ab2d9b4  1780  00000000       constant
0xffff7ab2d9b8  1784  00c2d958       constant
0xffff7ab2d9bc  1788  00000000       constant
0xffff7ab2d9c0  1792  09abe8c0       constant
0xffff7ab2d9c4  1796  00000000       constant
0xffff7ab2d9c8  1800  7ab065a0       constant
0xffff7ab2d9cc  1804  0000ffff       constant
0xffff7ab2d9d0  1808  09abd2d0       constant
0xffff7ab2d9d4  1812  00000000       constant
0xffff7ab2d9d8  1816  00c2d958       constant
0xffff7ab2d9dc  1820  00000000       constant
0xffff7ab2d9e0  1824  09abe8c0       constant
0xffff7ab2d9e4  1828  00000000       constant
0xffff7ab2d9e8  1832  7ab065a0       constant
0xffff7ab2d9ec  1836  0000ffff       constant
0xffff7ab2d9f0  1840  09abe8c0       constant
0xffff7ab2d9f4  1844  00000000       constant
0xffff7ab2d9f8  1848  7ab065a0       constant
0xffff7ab2d9fc  1852  0000ffff       constant
0xffff7ab2da00  1856  09abd2d0       constant
0xffff7ab2da04  1860  00000000       constant
0xffff7ab2da08  1864  00c2d958       constant
0xffff7ab2da0c  1868  00000000       constant
0xffff7ab2da10  1872  09abe8c0       constant
0xffff7ab2da14  1876  00000000       constant
0xffff7ab2da18  1880  7ab065a0       constant
0xffff7ab2da1c  1884  0000ffff       constant
0xffff7ab2da20  1888  09abd2d0       constant
0xffff7ab2da24  1892  00000000       constant
0xffff7ab2da28  1896  00c2d958       constant
0xffff7ab2da2c  1900  00000000       constant


RelocInfo (size = 65)
0xffff7ab2d2c8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2d2ec  code target (STUB)  (0xffff7ab065a0)
0xffff7ab2d364  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2d388  code target (STUB)  (0xffff7ab065a0)
0xffff7ab2d3c8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2d3ec  code target (STUB)  (0xffff7ab065a0)
0xffff7ab2d458  external reference (isolate)  (0x9abd2d0)
0xffff7ab2d45c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2d4b8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2d4dc  code target (STUB)  (0xffff7ab065a0)
0xffff7ab2d5b8  external reference (isolate)  (0x9abd2d0)
0xffff7ab2d5bc  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2d680  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2d6a4  code target (STUB)  (0xffff7ab065a0)
0xffff7ab2d704  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2d728  code target (STUB)  (0xffff7ab065a0)
0xffff7ab2d794  external reference (isolate)  (0x9abd2d0)
0xffff7ab2d798  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2d7f4  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2d818  code target (STUB)  (0xffff7ab065a0)
0xffff7ab2d914  external reference (isolate)  (0x9abd2d0)
0xffff7ab2d918  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2d978  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1904)
0xffff7ab2daa0     0  adr xzr, #+0x40 (addr 0xffff7ab2dae0)
0xffff7ab2daa4     4  adr xzr, #+0x358 (addr 0xffff7ab2ddfc)
0xffff7ab2daa8     8  ldr x16, pc+1720 (addr 0x0000ffff7ab2e160)    ;; external reference (store_buffer_top)
0xffff7ab2daac    12  ldr x1, [x16]
0xffff7ab2dab0    16  str x2, [x1], #8
0xffff7ab2dab4    20  str x1, [x16]
0xffff7ab2dab8    24  tst x1, #0x1ffff
0xffff7ab2dabc    28  b.eq #+0x8 (addr 0xffff7ab2dac4)
0xffff7ab2dac0    32  ret
0xffff7ab2dac4    36  sub csp, jssp, #0x8 (8)
0xffff7ab2dac8    40  str lr, [jssp, #-8]!
0xffff7ab2dacc    44  ldr x17, pc+1692 (addr 0x0000ffff7ab2e168)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab2dad0    48  blr x17
0xffff7ab2dad4    52  ldr lr, [jssp], #8
0xffff7ab2dad8    56  ret
0xffff7ab2dadc    60  ret
0xffff7ab2dae0    64  sub csp, jssp, #0x10 (16)
0xffff7ab2dae4    68  stp x4, x3, [jssp, #-16]!
0xffff7ab2dae8    72  ldr x1, [x2]
0xffff7ab2daec    76  and x16, x1, #0xfffffffffff00000
0xffff7ab2daf0    80  ldr x16, [x16, #8]
0xffff7ab2daf4    84  tst x16, #0x18
0xffff7ab2daf8    88  b.eq #+0x1d4 (addr 0xffff7ab2dccc)
0xffff7ab2dafc    92  and x16, x0, #0xfffffffffff00000
0xffff7ab2db00    96  ldr x16, [x16, #8]
0xffff7ab2db04   100  tst x16, #0x18
0xffff7ab2db08   104  b.ne #+0x1c4 (addr 0xffff7ab2dccc)
0xffff7ab2db0c   108  and x1, x0, #0xfffffffffff00000
0xffff7ab2db10   112  ldr x3, [x1, #104]
0xffff7ab2db14   116  subs x3, x3, #0x1 (1)
0xffff7ab2db18   120  str x3, [x1, #104]
0xffff7ab2db1c   124  b.mi #+0xc4 (addr 0xffff7ab2dbe0)
0xffff7ab2db20   128  ubfx x16, x0, #8, #12
0xffff7ab2db24   132  and x1, x0, #0xfffffffffff00000
0xffff7ab2db28   136  add x1, x1, x16, lsl #2
0xffff7ab2db2c   140  ubfx x3, x0, #3, #5
0xffff7ab2db30   144  ldr x1, [x1, #360]
0xffff7ab2db34   148  lsr x1, x1, x3
0xffff7ab2db38   152  tbz w1, #0, #+0x8 (addr 0xffff7ab2db40)
0xffff7ab2db3c   156  tbnz w1, #1, #+0x3c (addr 0xffff7ab2db78)
0xffff7ab2db40   160  ldp x4, x3, [jssp], #16
0xffff7ab2db44   164  ldr x16, pc+1580 (addr 0x0000ffff7ab2e170)    ;; external reference (store_buffer_top)
0xffff7ab2db48   168  ldr x1, [x16]
0xffff7ab2db4c   172  str x2, [x1], #8
0xffff7ab2db50   176  str x1, [x16]
0xffff7ab2db54   180  tst x1, #0x1ffff
0xffff7ab2db58   184  b.eq #+0x8 (addr 0xffff7ab2db60)
0xffff7ab2db5c   188  ret
0xffff7ab2db60   192  sub csp, jssp, #0x8 (8)
0xffff7ab2db64   196  str lr, [jssp, #-8]!
0xffff7ab2db68   200  ldr x17, pc+1552 (addr 0x0000ffff7ab2e178)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab2db6c   204  blr x17
0xffff7ab2db70   208  ldr lr, [jssp], #8
0xffff7ab2db74   212  ret
0xffff7ab2db78   216  ldr x1, [x2]
0xffff7ab2db7c   220  sub csp, jssp, #0x10 (16)
0xffff7ab2db80   224  stp x0, x2, [jssp, #-16]!
0xffff7ab2db84   228  ubfx x16, x1, #8, #12
0xffff7ab2db88   232  and x3, x1, #0xfffffffffff00000
0xffff7ab2db8c   236  add x3, x3, x16, lsl #2
0xffff7ab2db90   240  ubfx x0, x1, #3, #5
0xffff7ab2db94   244  ldr x2, [x3, #360]
0xffff7ab2db98   248  lsr x2, x2, x0
0xffff7ab2db9c   252  tbz w2, #0, #+0x40 (addr 0xffff7ab2dbdc)
0xffff7ab2dba0   256  ldp x0, x2, [jssp], #16
0xffff7ab2dba4   260  ldp x4, x3, [jssp], #16
0xffff7ab2dba8   264  ldr x16, pc+1496 (addr 0x0000ffff7ab2e180)    ;; external reference (store_buffer_top)
0xffff7ab2dbac   268  ldr x1, [x16]
0xffff7ab2dbb0   272  str x2, [x1], #8
0xffff7ab2dbb4   276  str x1, [x16]
0xffff7ab2dbb8   280  tst x1, #0x1ffff
0xffff7ab2dbbc   284  b.eq #+0x8 (addr 0xffff7ab2dbc4)
0xffff7ab2dbc0   288  ret
0xffff7ab2dbc4   292  sub csp, jssp, #0x8 (8)
0xffff7ab2dbc8   296  str lr, [jssp, #-8]!
0xffff7ab2dbcc   300  ldr x17, pc+1468 (addr 0x0000ffff7ab2e188)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab2dbd0   304  blr x17
0xffff7ab2dbd4   308  ldr lr, [jssp], #8
0xffff7ab2dbd8   312  ret
0xffff7ab2dbdc   316  ldp x0, x2, [jssp], #16
0xffff7ab2dbe0   320  sub csp, jssp, #0x78 (120)
0xffff7ab2dbe4   324  stp x14, x15, [jssp, #-32]!
0xffff7ab2dbe8   328  stp x18, lr, [jssp, #16]
0xffff7ab2dbec   332  stp x10, x11, [jssp, #-32]!
0xffff7ab2dbf0   336  stp x12, x13, [jssp, #16]
0xffff7ab2dbf4   340  stp x6, x7, [jssp, #-32]!
0xffff7ab2dbf8   344  stp x8, x9, [jssp, #16]
0xffff7ab2dbfc   348  stp x0, x2, [jssp, #-24]!
0xffff7ab2dc00   352  str x5, [jssp, #16]
0xffff7ab2dc04   356  sub csp, jssp, #0xb0 (176)
0xffff7ab2dc08   360  stp d26, d27, [jssp, #-32]!
0xffff7ab2dc0c   364  stp d28, d29, [jssp, #16]
0xffff7ab2dc10   368  stp d22, d23, [jssp, #-32]!
0xffff7ab2dc14   372  stp d24, d25, [jssp, #16]
0xffff7ab2dc18   376  stp d18, d19, [jssp, #-32]!
0xffff7ab2dc1c   380  stp d20, d21, [jssp, #16]
0xffff7ab2dc20   384  stp d6, d7, [jssp, #-32]!
0xffff7ab2dc24   388  stp d16, d17, [jssp, #16]
0xffff7ab2dc28   392  stp d2, d3, [jssp, #-32]!
0xffff7ab2dc2c   396  stp d4, d5, [jssp, #16]
0xffff7ab2dc30   400  stp d0, d1, [jssp, #-16]!
0xffff7ab2dc34   404  mov x1, x2
0xffff7ab2dc38   408  ldr x2, pc+1368 (addr 0x0000ffff7ab2e190)    ;; external reference (isolate)
0xffff7ab2dc3c   412  ldr x16, pc+1372 (addr 0x0000ffff7ab2e198)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2dc40   416  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2dc44   420  blr x16
0xffff7ab2dc48   424  ldp d2, d3, [jssp, #16]
0xffff7ab2dc4c   428  ldp d0, d1, [jssp], #32
0xffff7ab2dc50   432  ldp d6, d7, [jssp, #16]
0xffff7ab2dc54   436  ldp d4, d5, [jssp], #32
0xffff7ab2dc58   440  ldp d18, d19, [jssp, #16]
0xffff7ab2dc5c   444  ldp d16, d17, [jssp], #32
0xffff7ab2dc60   448  ldp d22, d23, [jssp, #16]
0xffff7ab2dc64   452  ldp d20, d21, [jssp], #32
0xffff7ab2dc68   456  ldp d26, d27, [jssp, #16]
0xffff7ab2dc6c   460  ldp d24, d25, [jssp], #32
0xffff7ab2dc70   464  ldp d28, d29, [jssp], #16
0xffff7ab2dc74   468  ldp x5, x6, [jssp, #16]
0xffff7ab2dc78   472  ldp x0, x2, [jssp], #32
0xffff7ab2dc7c   476  ldp x9, x10, [jssp, #16]
0xffff7ab2dc80   480  ldp x7, x8, [jssp], #32
0xffff7ab2dc84   484  ldp x13, x14, [jssp, #16]
0xffff7ab2dc88   488  ldp x11, x12, [jssp], #32
0xffff7ab2dc8c   492  ldr lr, [jssp, #16]
0xffff7ab2dc90   496  ldp x15, x18, [jssp], #24
0xffff7ab2dc94   500  ldp x4, x3, [jssp], #16
0xffff7ab2dc98   504  ldr x16, pc+1288 (addr 0x0000ffff7ab2e1a0)    ;; external reference (store_buffer_top)
0xffff7ab2dc9c   508  ldr x1, [x16]
0xffff7ab2dca0   512  str x2, [x1], #8
0xffff7ab2dca4   516  str x1, [x16]
0xffff7ab2dca8   520  tst x1, #0x1ffff
0xffff7ab2dcac   524  b.eq #+0x8 (addr 0xffff7ab2dcb4)
0xffff7ab2dcb0   528  ret
0xffff7ab2dcb4   532  sub csp, jssp, #0x8 (8)
0xffff7ab2dcb8   536  str lr, [jssp, #-8]!
0xffff7ab2dcbc   540  ldr x17, pc+1260 (addr 0x0000ffff7ab2e1a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab2dcc0   544  blr x17
0xffff7ab2dcc4   548  ldr lr, [jssp], #8
0xffff7ab2dcc8   552  ret
0xffff7ab2dccc   556  and x1, x0, #0xfffffffffff00000
0xffff7ab2dcd0   560  ldr x3, [x1, #104]
0xffff7ab2dcd4   564  subs x3, x3, #0x1 (1)
0xffff7ab2dcd8   568  str x3, [x1, #104]
0xffff7ab2dcdc   572  b.mi #+0x64 (addr 0xffff7ab2dd40)
0xffff7ab2dce0   576  ubfx x16, x0, #8, #12
0xffff7ab2dce4   580  and x1, x0, #0xfffffffffff00000
0xffff7ab2dce8   584  add x1, x1, x16, lsl #2
0xffff7ab2dcec   588  ubfx x3, x0, #3, #5
0xffff7ab2dcf0   592  ldr x1, [x1, #360]
0xffff7ab2dcf4   596  lsr x1, x1, x3
0xffff7ab2dcf8   600  tbz w1, #0, #+0x8 (addr 0xffff7ab2dd00)
0xffff7ab2dcfc   604  tbnz w1, #1, #+0xc (addr 0xffff7ab2dd08)
0xffff7ab2dd00   608  ldp x4, x3, [jssp], #16
0xffff7ab2dd04   612  ret
0xffff7ab2dd08   616  ldr x1, [x2]
0xffff7ab2dd0c   620  sub csp, jssp, #0x10 (16)
0xffff7ab2dd10   624  stp x0, x2, [jssp, #-16]!
0xffff7ab2dd14   628  ubfx x16, x1, #8, #12
0xffff7ab2dd18   632  and x3, x1, #0xfffffffffff00000
0xffff7ab2dd1c   636  add x3, x3, x16, lsl #2
0xffff7ab2dd20   640  ubfx x0, x1, #3, #5
0xffff7ab2dd24   644  ldr x2, [x3, #360]
0xffff7ab2dd28   648  lsr x2, x2, x0
0xffff7ab2dd2c   652  tbz w2, #0, #+0x10 (addr 0xffff7ab2dd3c)
0xffff7ab2dd30   656  ldp x0, x2, [jssp], #16
0xffff7ab2dd34   660  ldp x4, x3, [jssp], #16
0xffff7ab2dd38   664  ret
0xffff7ab2dd3c   668  ldp x0, x2, [jssp], #16
0xffff7ab2dd40   672  sub csp, jssp, #0x78 (120)
0xffff7ab2dd44   676  stp x14, x15, [jssp, #-32]!
0xffff7ab2dd48   680  stp x18, lr, [jssp, #16]
0xffff7ab2dd4c   684  stp x10, x11, [jssp, #-32]!
0xffff7ab2dd50   688  stp x12, x13, [jssp, #16]
0xffff7ab2dd54   692  stp x6, x7, [jssp, #-32]!
0xffff7ab2dd58   696  stp x8, x9, [jssp, #16]
0xffff7ab2dd5c   700  stp x0, x2, [jssp, #-24]!
0xffff7ab2dd60   704  str x5, [jssp, #16]
0xffff7ab2dd64   708  sub csp, jssp, #0xb0 (176)
0xffff7ab2dd68   712  stp d26, d27, [jssp, #-32]!
0xffff7ab2dd6c   716  stp d28, d29, [jssp, #16]
0xffff7ab2dd70   720  stp d22, d23, [jssp, #-32]!
0xffff7ab2dd74   724  stp d24, d25, [jssp, #16]
0xffff7ab2dd78   728  stp d18, d19, [jssp, #-32]!
0xffff7ab2dd7c   732  stp d20, d21, [jssp, #16]
0xffff7ab2dd80   736  stp d6, d7, [jssp, #-32]!
0xffff7ab2dd84   740  stp d16, d17, [jssp, #16]
0xffff7ab2dd88   744  stp d2, d3, [jssp, #-32]!
0xffff7ab2dd8c   748  stp d4, d5, [jssp, #16]
0xffff7ab2dd90   752  stp d0, d1, [jssp, #-16]!
0xffff7ab2dd94   756  mov x1, x2
0xffff7ab2dd98   760  ldr x2, pc+1048 (addr 0x0000ffff7ab2e1b0)    ;; external reference (isolate)
0xffff7ab2dd9c   764  ldr x16, pc+1052 (addr 0x0000ffff7ab2e1b8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2dda0   768  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2dda4   772  blr x16
0xffff7ab2dda8   776  ldp d2, d3, [jssp, #16]
0xffff7ab2ddac   780  ldp d0, d1, [jssp], #32
0xffff7ab2ddb0   784  ldp d6, d7, [jssp, #16]
0xffff7ab2ddb4   788  ldp d4, d5, [jssp], #32
0xffff7ab2ddb8   792  ldp d18, d19, [jssp, #16]
0xffff7ab2ddbc   796  ldp d16, d17, [jssp], #32
0xffff7ab2ddc0   800  ldp d22, d23, [jssp, #16]
0xffff7ab2ddc4   804  ldp d20, d21, [jssp], #32
0xffff7ab2ddc8   808  ldp d26, d27, [jssp, #16]
0xffff7ab2ddcc   812  ldp d24, d25, [jssp], #32
0xffff7ab2ddd0   816  ldp d28, d29, [jssp], #16
0xffff7ab2ddd4   820  ldp x5, x6, [jssp, #16]
0xffff7ab2ddd8   824  ldp x0, x2, [jssp], #32
0xffff7ab2dddc   828  ldp x9, x10, [jssp, #16]
0xffff7ab2dde0   832  ldp x7, x8, [jssp], #32
0xffff7ab2dde4   836  ldp x13, x14, [jssp, #16]
0xffff7ab2dde8   840  ldp x11, x12, [jssp], #32
0xffff7ab2ddec   844  ldr lr, [jssp, #16]
0xffff7ab2ddf0   848  ldp x15, x18, [jssp], #24
0xffff7ab2ddf4   852  ldp x4, x3, [jssp], #16
0xffff7ab2ddf8   856  ret
0xffff7ab2ddfc   860  sub csp, jssp, #0x10 (16)
0xffff7ab2de00   864  stp x4, x3, [jssp, #-16]!
0xffff7ab2de04   868  ldr x1, [x2]
0xffff7ab2de08   872  and x16, x1, #0xfffffffffff00000
0xffff7ab2de0c   876  ldr x16, [x16, #8]
0xffff7ab2de10   880  tst x16, #0x18
0xffff7ab2de14   884  b.eq #+0x1f4 (addr 0xffff7ab2e008)
0xffff7ab2de18   888  and x16, x0, #0xfffffffffff00000
0xffff7ab2de1c   892  ldr x16, [x16, #8]
0xffff7ab2de20   896  tst x16, #0x18
0xffff7ab2de24   900  b.ne #+0x1e4 (addr 0xffff7ab2e008)
0xffff7ab2de28   904  and x1, x0, #0xfffffffffff00000
0xffff7ab2de2c   908  ldr x3, [x1, #104]
0xffff7ab2de30   912  subs x3, x3, #0x1 (1)
0xffff7ab2de34   916  str x3, [x1, #104]
0xffff7ab2de38   920  b.mi #+0xe4 (addr 0xffff7ab2df1c)
0xffff7ab2de3c   924  ubfx x16, x0, #8, #12
0xffff7ab2de40   928  and x1, x0, #0xfffffffffff00000
0xffff7ab2de44   932  add x1, x1, x16, lsl #2
0xffff7ab2de48   936  ubfx x3, x0, #3, #5
0xffff7ab2de4c   940  ldr x1, [x1, #360]
0xffff7ab2de50   944  lsr x1, x1, x3
0xffff7ab2de54   948  tbz w1, #0, #+0x8 (addr 0xffff7ab2de5c)
0xffff7ab2de58   952  tbnz w1, #1, #+0x3c (addr 0xffff7ab2de94)
0xffff7ab2de5c   956  ldp x4, x3, [jssp], #16
0xffff7ab2de60   960  ldr x16, pc+864 (addr 0x0000ffff7ab2e1c0)    ;; external reference (store_buffer_top)
0xffff7ab2de64   964  ldr x1, [x16]
0xffff7ab2de68   968  str x2, [x1], #8
0xffff7ab2de6c   972  str x1, [x16]
0xffff7ab2de70   976  tst x1, #0x1ffff
0xffff7ab2de74   980  b.eq #+0x8 (addr 0xffff7ab2de7c)
0xffff7ab2de78   984  ret
0xffff7ab2de7c   988  sub csp, jssp, #0x8 (8)
0xffff7ab2de80   992  str lr, [jssp, #-8]!
0xffff7ab2de84   996  ldr x17, pc+836 (addr 0x0000ffff7ab2e1c8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab2de88  1000  blr x17
0xffff7ab2de8c  1004  ldr lr, [jssp], #8
0xffff7ab2de90  1008  ret
0xffff7ab2de94  1012  ldr x1, [x2]
0xffff7ab2de98  1016  and x3, x1, #0xfffffffffff00000
0xffff7ab2de9c  1020  ldr x3, [x3, #8]
0xffff7ab2dea0  1024  tbz w3, #6, #+0x18 (addr 0xffff7ab2deb8)
0xffff7ab2dea4  1028  and x3, x0, #0xfffffffffff00000
0xffff7ab2dea8  1032  ldr x3, [x3, #8]
0xffff7ab2deac  1036  movz x16, #0x58
0xffff7ab2deb0  1040  tst x3, x16
0xffff7ab2deb4  1044  b.eq #+0x68 (addr 0xffff7ab2df1c)
0xffff7ab2deb8  1048  sub csp, jssp, #0x10 (16)
0xffff7ab2debc  1052  stp x0, x2, [jssp, #-16]!
0xffff7ab2dec0  1056  ubfx x16, x1, #8, #12
0xffff7ab2dec4  1060  and x3, x1, #0xfffffffffff00000
0xffff7ab2dec8  1064  add x3, x3, x16, lsl #2
0xffff7ab2decc  1068  ubfx x0, x1, #3, #5
0xffff7ab2ded0  1072  ldr x2, [x3, #360]
0xffff7ab2ded4  1076  lsr x2, x2, x0
0xffff7ab2ded8  1080  tbz w2, #0, #+0x40 (addr 0xffff7ab2df18)
0xffff7ab2dedc  1084  ldp x0, x2, [jssp], #16
0xffff7ab2dee0  1088  ldp x4, x3, [jssp], #16
0xffff7ab2dee4  1092  ldr x16, pc+748 (addr 0x0000ffff7ab2e1d0)    ;; external reference (store_buffer_top)
0xffff7ab2dee8  1096  ldr x1, [x16]
0xffff7ab2deec  1100  str x2, [x1], #8
0xffff7ab2def0  1104  str x1, [x16]
0xffff7ab2def4  1108  tst x1, #0x1ffff
0xffff7ab2def8  1112  b.eq #+0x8 (addr 0xffff7ab2df00)
0xffff7ab2defc  1116  ret
0xffff7ab2df00  1120  sub csp, jssp, #0x8 (8)
0xffff7ab2df04  1124  str lr, [jssp, #-8]!
0xffff7ab2df08  1128  ldr x17, pc+720 (addr 0x0000ffff7ab2e1d8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab2df0c  1132  blr x17
0xffff7ab2df10  1136  ldr lr, [jssp], #8
0xffff7ab2df14  1140  ret
0xffff7ab2df18  1144  ldp x0, x2, [jssp], #16
0xffff7ab2df1c  1148  sub csp, jssp, #0x78 (120)
0xffff7ab2df20  1152  stp x14, x15, [jssp, #-32]!
0xffff7ab2df24  1156  stp x18, lr, [jssp, #16]
0xffff7ab2df28  1160  stp x10, x11, [jssp, #-32]!
0xffff7ab2df2c  1164  stp x12, x13, [jssp, #16]
0xffff7ab2df30  1168  stp x6, x7, [jssp, #-32]!
0xffff7ab2df34  1172  stp x8, x9, [jssp, #16]
0xffff7ab2df38  1176  stp x0, x2, [jssp, #-24]!
0xffff7ab2df3c  1180  str x5, [jssp, #16]
0xffff7ab2df40  1184  sub csp, jssp, #0xb0 (176)
0xffff7ab2df44  1188  stp d26, d27, [jssp, #-32]!
0xffff7ab2df48  1192  stp d28, d29, [jssp, #16]
0xffff7ab2df4c  1196  stp d22, d23, [jssp, #-32]!
0xffff7ab2df50  1200  stp d24, d25, [jssp, #16]
0xffff7ab2df54  1204  stp d18, d19, [jssp, #-32]!
0xffff7ab2df58  1208  stp d20, d21, [jssp, #16]
0xffff7ab2df5c  1212  stp d6, d7, [jssp, #-32]!
0xffff7ab2df60  1216  stp d16, d17, [jssp, #16]
0xffff7ab2df64  1220  stp d2, d3, [jssp, #-32]!
0xffff7ab2df68  1224  stp d4, d5, [jssp, #16]
0xffff7ab2df6c  1228  stp d0, d1, [jssp, #-16]!
0xffff7ab2df70  1232  mov x1, x2
0xffff7ab2df74  1236  ldr x2, pc+620 (addr 0x0000ffff7ab2e1e0)    ;; external reference (isolate)
0xffff7ab2df78  1240  ldr x16, pc+624 (addr 0x0000ffff7ab2e1e8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2df7c  1244  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2df80  1248  blr x16
0xffff7ab2df84  1252  ldp d2, d3, [jssp, #16]
0xffff7ab2df88  1256  ldp d0, d1, [jssp], #32
0xffff7ab2df8c  1260  ldp d6, d7, [jssp, #16]
0xffff7ab2df90  1264  ldp d4, d5, [jssp], #32
0xffff7ab2df94  1268  ldp d18, d19, [jssp, #16]
0xffff7ab2df98  1272  ldp d16, d17, [jssp], #32
0xffff7ab2df9c  1276  ldp d22, d23, [jssp, #16]
0xffff7ab2dfa0  1280  ldp d20, d21, [jssp], #32
0xffff7ab2dfa4  1284  ldp d26, d27, [jssp, #16]
0xffff7ab2dfa8  1288  ldp d24, d25, [jssp], #32
0xffff7ab2dfac  1292  ldp d28, d29, [jssp], #16
0xffff7ab2dfb0  1296  ldp x5, x6, [jssp, #16]
0xffff7ab2dfb4  1300  ldp x0, x2, [jssp], #32
0xffff7ab2dfb8  1304  ldp x9, x10, [jssp, #16]
0xffff7ab2dfbc  1308  ldp x7, x8, [jssp], #32
0xffff7ab2dfc0  1312  ldp x13, x14, [jssp, #16]
0xffff7ab2dfc4  1316  ldp x11, x12, [jssp], #32
0xffff7ab2dfc8  1320  ldr lr, [jssp, #16]
0xffff7ab2dfcc  1324  ldp x15, x18, [jssp], #24
0xffff7ab2dfd0  1328  ldp x4, x3, [jssp], #16
0xffff7ab2dfd4  1332  ldr x16, pc+540 (addr 0x0000ffff7ab2e1f0)    ;; external reference (store_buffer_top)
0xffff7ab2dfd8  1336  ldr x1, [x16]
0xffff7ab2dfdc  1340  str x2, [x1], #8
0xffff7ab2dfe0  1344  str x1, [x16]
0xffff7ab2dfe4  1348  tst x1, #0x1ffff
0xffff7ab2dfe8  1352  b.eq #+0x8 (addr 0xffff7ab2dff0)
0xffff7ab2dfec  1356  ret
0xffff7ab2dff0  1360  sub csp, jssp, #0x8 (8)
0xffff7ab2dff4  1364  str lr, [jssp, #-8]!
0xffff7ab2dff8  1368  ldr x17, pc+512 (addr 0x0000ffff7ab2e1f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab2dffc  1372  blr x17
0xffff7ab2e000  1376  ldr lr, [jssp], #8
0xffff7ab2e004  1380  ret
0xffff7ab2e008  1384  and x1, x0, #0xfffffffffff00000
0xffff7ab2e00c  1388  ldr x3, [x1, #104]
0xffff7ab2e010  1392  subs x3, x3, #0x1 (1)
0xffff7ab2e014  1396  str x3, [x1, #104]
0xffff7ab2e018  1400  b.mi #+0x84 (addr 0xffff7ab2e09c)
0xffff7ab2e01c  1404  ubfx x16, x0, #8, #12
0xffff7ab2e020  1408  and x1, x0, #0xfffffffffff00000
0xffff7ab2e024  1412  add x1, x1, x16, lsl #2
0xffff7ab2e028  1416  ubfx x3, x0, #3, #5
0xffff7ab2e02c  1420  ldr x1, [x1, #360]
0xffff7ab2e030  1424  lsr x1, x1, x3
0xffff7ab2e034  1428  tbz w1, #0, #+0x8 (addr 0xffff7ab2e03c)
0xffff7ab2e038  1432  tbnz w1, #1, #+0xc (addr 0xffff7ab2e044)
0xffff7ab2e03c  1436  ldp x4, x3, [jssp], #16
0xffff7ab2e040  1440  ret
0xffff7ab2e044  1444  ldr x1, [x2]
0xffff7ab2e048  1448  and x3, x1, #0xfffffffffff00000
0xffff7ab2e04c  1452  ldr x3, [x3, #8]
0xffff7ab2e050  1456  tbz w3, #6, #+0x18 (addr 0xffff7ab2e068)
0xffff7ab2e054  1460  and x3, x0, #0xfffffffffff00000
0xffff7ab2e058  1464  ldr x3, [x3, #8]
0xffff7ab2e05c  1468  movz x16, #0x58
0xffff7ab2e060  1472  tst x3, x16
0xffff7ab2e064  1476  b.eq #+0x38 (addr 0xffff7ab2e09c)
0xffff7ab2e068  1480  sub csp, jssp, #0x10 (16)
0xffff7ab2e06c  1484  stp x0, x2, [jssp, #-16]!
0xffff7ab2e070  1488  ubfx x16, x1, #8, #12
0xffff7ab2e074  1492  and x3, x1, #0xfffffffffff00000
0xffff7ab2e078  1496  add x3, x3, x16, lsl #2
0xffff7ab2e07c  1500  ubfx x0, x1, #3, #5
0xffff7ab2e080  1504  ldr x2, [x3, #360]
0xffff7ab2e084  1508  lsr x2, x2, x0
0xffff7ab2e088  1512  tbz w2, #0, #+0x10 (addr 0xffff7ab2e098)
0xffff7ab2e08c  1516  ldp x0, x2, [jssp], #16
0xffff7ab2e090  1520  ldp x4, x3, [jssp], #16
0xffff7ab2e094  1524  ret
0xffff7ab2e098  1528  ldp x0, x2, [jssp], #16
0xffff7ab2e09c  1532  sub csp, jssp, #0x78 (120)
0xffff7ab2e0a0  1536  stp x14, x15, [jssp, #-32]!
0xffff7ab2e0a4  1540  stp x18, lr, [jssp, #16]
0xffff7ab2e0a8  1544  stp x10, x11, [jssp, #-32]!
0xffff7ab2e0ac  1548  stp x12, x13, [jssp, #16]
0xffff7ab2e0b0  1552  stp x6, x7, [jssp, #-32]!
0xffff7ab2e0b4  1556  stp x8, x9, [jssp, #16]
0xffff7ab2e0b8  1560  stp x0, x2, [jssp, #-24]!
0xffff7ab2e0bc  1564  str x5, [jssp, #16]
0xffff7ab2e0c0  1568  sub csp, jssp, #0xb0 (176)
0xffff7ab2e0c4  1572  stp d26, d27, [jssp, #-32]!
0xffff7ab2e0c8  1576  stp d28, d29, [jssp, #16]
0xffff7ab2e0cc  1580  stp d22, d23, [jssp, #-32]!
0xffff7ab2e0d0  1584  stp d24, d25, [jssp, #16]
0xffff7ab2e0d4  1588  stp d18, d19, [jssp, #-32]!
0xffff7ab2e0d8  1592  stp d20, d21, [jssp, #16]
0xffff7ab2e0dc  1596  stp d6, d7, [jssp, #-32]!
0xffff7ab2e0e0  1600  stp d16, d17, [jssp, #16]
0xffff7ab2e0e4  1604  stp d2, d3, [jssp, #-32]!
0xffff7ab2e0e8  1608  stp d4, d5, [jssp, #16]
0xffff7ab2e0ec  1612  stp d0, d1, [jssp, #-16]!
0xffff7ab2e0f0  1616  mov x1, x2
0xffff7ab2e0f4  1620  ldr x2, pc+268 (addr 0x0000ffff7ab2e200)    ;; external reference (isolate)
0xffff7ab2e0f8  1624  ldr x16, pc+272 (addr 0x0000ffff7ab2e208)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2e0fc  1628  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2e100  1632  blr x16
0xffff7ab2e104  1636  ldp d2, d3, [jssp, #16]
0xffff7ab2e108  1640  ldp d0, d1, [jssp], #32
0xffff7ab2e10c  1644  ldp d6, d7, [jssp, #16]
0xffff7ab2e110  1648  ldp d4, d5, [jssp], #32
0xffff7ab2e114  1652  ldp d18, d19, [jssp, #16]
0xffff7ab2e118  1656  ldp d16, d17, [jssp], #32
0xffff7ab2e11c  1660  ldp d22, d23, [jssp, #16]
0xffff7ab2e120  1664  ldp d20, d21, [jssp], #32
0xffff7ab2e124  1668  ldp d26, d27, [jssp, #16]
0xffff7ab2e128  1672  ldp d24, d25, [jssp], #32
0xffff7ab2e12c  1676  ldp d28, d29, [jssp], #16
0xffff7ab2e130  1680  ldp x5, x6, [jssp, #16]
0xffff7ab2e134  1684  ldp x0, x2, [jssp], #32
0xffff7ab2e138  1688  ldp x9, x10, [jssp, #16]
0xffff7ab2e13c  1692  ldp x7, x8, [jssp], #32
0xffff7ab2e140  1696  ldp x13, x14, [jssp, #16]
0xffff7ab2e144  1700  ldp x11, x12, [jssp], #32
0xffff7ab2e148  1704  ldr lr, [jssp, #16]
0xffff7ab2e14c  1708  ldp x15, x18, [jssp], #24
0xffff7ab2e150  1712  ldp x4, x3, [jssp], #16
0xffff7ab2e154  1716  ret
0xffff7ab2e158  1720  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab2e15c  1724  d63f03e0       constant
0xffff7ab2e160  1728  09abe8c0       constant
0xffff7ab2e164  1732  00000000       constant
0xffff7ab2e168  1736  7ab065a0       constant
0xffff7ab2e16c  1740  0000ffff       constant
0xffff7ab2e170  1744  09abe8c0       constant
0xffff7ab2e174  1748  00000000       constant
0xffff7ab2e178  1752  7ab065a0       constant
0xffff7ab2e17c  1756  0000ffff       constant
0xffff7ab2e180  1760  09abe8c0       constant
0xffff7ab2e184  1764  00000000       constant
0xffff7ab2e188  1768  7ab065a0       constant
0xffff7ab2e18c  1772  0000ffff       constant
0xffff7ab2e190  1776  09abd2d0       constant
0xffff7ab2e194  1780  00000000       constant
0xffff7ab2e198  1784  00c2d958       constant
0xffff7ab2e19c  1788  00000000       constant
0xffff7ab2e1a0  1792  09abe8c0       constant
0xffff7ab2e1a4  1796  00000000       constant
0xffff7ab2e1a8  1800  7ab065a0       constant
0xffff7ab2e1ac  1804  0000ffff       constant
0xffff7ab2e1b0  1808  09abd2d0       constant
0xffff7ab2e1b4  1812  00000000       constant
0xffff7ab2e1b8  1816  00c2d958       constant
0xffff7ab2e1bc  1820  00000000       constant
0xffff7ab2e1c0  1824  09abe8c0       constant
0xffff7ab2e1c4  1828  00000000       constant
0xffff7ab2e1c8  1832  7ab065a0       constant
0xffff7ab2e1cc  1836  0000ffff       constant
0xffff7ab2e1d0  1840  09abe8c0       constant
0xffff7ab2e1d4  1844  00000000       constant
0xffff7ab2e1d8  1848  7ab065a0       constant
0xffff7ab2e1dc  1852  0000ffff       constant
0xffff7ab2e1e0  1856  09abd2d0       constant
0xffff7ab2e1e4  1860  00000000       constant
0xffff7ab2e1e8  1864  00c2d958       constant
0xffff7ab2e1ec  1868  00000000       constant
0xffff7ab2e1f0  1872  09abe8c0       constant
0xffff7ab2e1f4  1876  00000000       constant
0xffff7ab2e1f8  1880  7ab065a0       constant
0xffff7ab2e1fc  1884  0000ffff       constant
0xffff7ab2e200  1888  09abd2d0       constant
0xffff7ab2e204  1892  00000000       constant
0xffff7ab2e208  1896  00c2d958       constant
0xffff7ab2e20c  1900  00000000       constant


RelocInfo (size = 65)
0xffff7ab2daa8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2dacc  code target (STUB)  (0xffff7ab065a0)
0xffff7ab2db44  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2db68  code target (STUB)  (0xffff7ab065a0)
0xffff7ab2dba8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2dbcc  code target (STUB)  (0xffff7ab065a0)
0xffff7ab2dc38  external reference (isolate)  (0x9abd2d0)
0xffff7ab2dc3c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2dc98  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2dcbc  code target (STUB)  (0xffff7ab065a0)
0xffff7ab2dd98  external reference (isolate)  (0x9abd2d0)
0xffff7ab2dd9c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2de60  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2de84  code target (STUB)  (0xffff7ab065a0)
0xffff7ab2dee4  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2df08  code target (STUB)  (0xffff7ab065a0)
0xffff7ab2df74  external reference (isolate)  (0x9abd2d0)
0xffff7ab2df78  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2dfd4  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2dff8  code target (STUB)  (0xffff7ab065a0)
0xffff7ab2e0f4  external reference (isolate)  (0x9abd2d0)
0xffff7ab2e0f8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2e158  constant pool (size 184)


kind = STUB
major_key = FastNewClosureStub
name = FastNewClosureStub
compiler = crankshaft
Instructions (size = 773)
0xffff7ab2e280     0  movz x1, #0xe2c0
0xffff7ab2e284     4  movk x1, #0x9ab, lsl #16
0xffff7ab2e288     8  ldp x3, x0, [x1]
0xffff7ab2e28c    12  adds x16, x3, #0x48 (72)
0xffff7ab2e290    16  ccmp x16, x0, #nzCv, lo
0xffff7ab2e294    20  b.hi #+0x1bc (addr 0xffff7ab2e450)
0xffff7ab2e298    24  str x16, [x1]
0xffff7ab2e29c    28  orr x3, x3, #0x1
0xffff7ab2e2a0    32  ldur x0, [cp, #39]
0xffff7ab2e2a4    36  movz x16, #0x2cf
0xffff7ab2e2a8    40  ldr x1, [x0, x16]
0xffff7ab2e2ac    44  stur x1, [x3, #-1]
0xffff7ab2e2b0    48  ldr x1, pc+528 (addr 0x0000ffff7ab2e4c0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab2e2b4    52  stur x1, [x3, #7]
0xffff7ab2e2b8    56  ldr x1, pc+528 (addr 0x0000ffff7ab2e4c8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab2e2bc    60  stur x1, [x3, #15]
0xffff7ab2e2c0    64  ldr x1, pc+528 (addr 0x0000ffff7ab2e4d0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab2e2c4    68  stur x1, [x3, #47]
0xffff7ab2e2c8    72  ldr x1, pc+528 (addr 0x0000ffff7ab2e4d8)    ;; object: 0x20d04519 <the hole>
0xffff7ab2e2cc    76  stur x1, [x3, #23]
0xffff7ab2e2d0    80  stur x2, [x3, #31]
0xffff7ab2e2d4    84  stur cp, [x3, #39]
0xffff7ab2e2d8    88  ldur x1, [x2, #23]
0xffff7ab2e2dc    92  movz x4, #0x0
0xffff7ab2e2e0    96  cmp x1, x4
0xffff7ab2e2e4   100  b.eq #+0x150 (addr 0xffff7ab2e434)
0xffff7ab2e2e8   104  ldur w4, [x1, #11]
0xffff7ab2e2ec   108  subs w4, w4, #0x4 (4)
0xffff7ab2e2f0   112  b.vs #+0x230 (addr 0xffff7ab2e520)
0xffff7ab2e2f4   116  mov x5, x4
0xffff7ab2e2f8   120  cmp w5, #0x1 (1)
0xffff7ab2e2fc   124  b.lt #+0xb4 (addr 0xffff7ab2e3b0)
0xffff7ab2e300   128  add x4, x1, #0xf (15)
0xffff7ab2e304   132  ldr x6, [x4, w5, sxtw #3]
0xffff7ab2e308   136  ldur x4, [x6, #7]
0xffff7ab2e30c   140  add x6, x1, #0x27 (39)
0xffff7ab2e310   144  ldr x7, [x6, w5, sxtw #3]
0xffff7ab2e314   148  add x6, x1, #0x17 (23)
0xffff7ab2e318   152  ldr x8, [x6, w5, sxtw #3]
0xffff7ab2e31c   156  ldur x6, [x8, #7]
0xffff7ab2e320   160  cmp x0, x4
0xffff7ab2e324   164  b.ne #+0x1c (addr 0xffff7ab2e340)
0xffff7ab2e328   168  mov x4, #0xffffffff00000000
0xffff7ab2e32c   172  cmp x7, x4
0xffff7ab2e330   176  b.ne #+0x10 (addr 0xffff7ab2e340)
0xffff7ab2e334   180  movz x4, #0x0
0xffff7ab2e338   184  cmp x6, x4
0xffff7ab2e33c   188  b.ne #+0xc (addr 0xffff7ab2e348)
0xffff7ab2e340   192  sub w5, w5, #0x4 (4)
0xffff7ab2e344   196  b #-0x4c (addr 0xffff7ab2e2f8)
0xffff7ab2e348   200  add x4, x1, #0x1f (31)
0xffff7ab2e34c   204  ldr x7, [x4, w5, sxtw #3]
0xffff7ab2e350   208  ldur x7, [x7, #7]
0xffff7ab2e354   212  movz x4, #0x0
0xffff7ab2e358   216  cmp x7, x4
0xffff7ab2e35c   220  b.eq #+0x50 (addr 0xffff7ab2e3ac)
0xffff7ab2e360   224  add x4, x6, #0x5f (95)
0xffff7ab2e364   228  stur x4, [x3, #55]
0xffff7ab2e368   232  stur x7, [x3, #47]
0xffff7ab2e36c   236  movz x16, #0x557
0xffff7ab2e370   240  ldr x4, [x0, x16]
0xffff7ab2e374   244  stur x4, [x3, #63]
0xffff7ab2e378   248  mov x4, x3
0xffff7ab2e37c   252  movz x16, #0x557
0xffff7ab2e380   256  str x4, [x0, x16]
0xffff7ab2e384   260  add x6, x0, #0x557 (1367)
0xffff7ab2e388   264  and x4, x0, #0xfffffffffff00000
0xffff7ab2e38c   268  ldr x4, [x4, #8]
0xffff7ab2e390   272  tbz w4, #2, #+0x18 (addr 0xffff7ab2e3a8)
0xffff7ab2e394   276  sub csp, jssp, #0x8 (8)
0xffff7ab2e398   280  str lr, [jssp, #-8]!
0xffff7ab2e39c   284  ldr x16, pc+324 (addr 0x0000ffff7ab2e4e0)    ;; code: STUB, RecordWriteStub, minor: 71808
0xffff7ab2e3a0   288  blr x16
0xffff7ab2e3a4   292  ldr lr, [jssp], #8
0xffff7ab2e3a8   296  b #+0x8 (addr 0xffff7ab2e3b0)
0xffff7ab2e3ac   300  b #+0x184 (addr 0xffff7ab2e530)
0xffff7ab2e3b0   304  cmp w5, #0x1 (1)
0xffff7ab2e3b4   308  b.ge #+0x94 (addr 0xffff7ab2e448)
0xffff7ab2e3b8   312  ldur x1, [x1, #15]
0xffff7ab2e3bc   316  ldur x1, [x1, #7]
0xffff7ab2e3c0   320  movz x4, #0x0
0xffff7ab2e3c4   324  cmp x1, x4
0xffff7ab2e3c8   328  b.eq #+0x54 (addr 0xffff7ab2e41c)
0xffff7ab2e3cc   332  add x1, x1, #0x5f (95)
0xffff7ab2e3d0   336  stur x1, [x3, #55]
0xffff7ab2e3d4   340  ldr x1, pc+276 (addr 0x0000ffff7ab2e4e8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab2e3d8   344  stur x1, [x3, #47]
0xffff7ab2e3dc   348  movz x16, #0x557
0xffff7ab2e3e0   352  ldr x1, [x0, x16]
0xffff7ab2e3e4   356  stur x1, [x3, #63]
0xffff7ab2e3e8   360  mov x1, x3
0xffff7ab2e3ec   364  movz x16, #0x557
0xffff7ab2e3f0   368  str x1, [x0, x16]
0xffff7ab2e3f4   372  add x2, x0, #0x557 (1367)
0xffff7ab2e3f8   376  and x1, x0, #0xfffffffffff00000
0xffff7ab2e3fc   380  ldr x1, [x1, #8]
0xffff7ab2e400   384  tbz w1, #2, #+0x18 (addr 0xffff7ab2e418)
0xffff7ab2e404   388  sub csp, jssp, #0x8 (8)
0xffff7ab2e408   392  str lr, [jssp, #-8]!
0xffff7ab2e40c   396  ldr x16, pc+228 (addr 0x0000ffff7ab2e4f0)    ;; code: STUB, RecordWriteStub, minor: 67616
0xffff7ab2e410   400  blr x16
0xffff7ab2e414   404  ldr lr, [jssp], #8
0xffff7ab2e418   408  b #+0x30 (addr 0xffff7ab2e448)
0xffff7ab2e41c   412  ldr x0, pc+220 (addr 0x0000ffff7ab2e4f8)    ;; object: 0x20d04241 <undefined>
0xffff7ab2e420   416  stur x0, [x3, #63]
0xffff7ab2e424   420  ldur x0, [x2, #15]
0xffff7ab2e428   424  add x0, x0, #0x5f (95)
0xffff7ab2e42c   428  stur x0, [x3, #55]
0xffff7ab2e430   432  b #+0x18 (addr 0xffff7ab2e448)
0xffff7ab2e434   436  ldr x0, pc+204 (addr 0x0000ffff7ab2e500)    ;; object: 0x20d04241 <undefined>
0xffff7ab2e438   440  stur x0, [x3, #63]
0xffff7ab2e43c   444  ldur x0, [x2, #15]
0xffff7ab2e440   448  add x0, x0, #0x5f (95)
0xffff7ab2e444   452  stur x0, [x3, #55]
0xffff7ab2e448   456  mov x0, x3
0xffff7ab2e44c   460  ret
0xffff7ab2e450   464  sub csp, jssp, #0x10 (16)
0xffff7ab2e454   468  stp fp, lr, [jssp, #-16]!
0xffff7ab2e458   472  movz fp, #0xa00000000
0xffff7ab2e45c   476  sub csp, jssp, #0x8 (8)
0xffff7ab2e460   480  str fp, [jssp, #-8]!
0xffff7ab2e464   484  add fp, jssp, #0x8 (8)
0xffff7ab2e468   488  movz x3, #0x0
0xffff7ab2e46c   492  mov x16, lr
0xffff7ab2e470   496  ldr x17, pc+152 (addr 0x0000ffff7ab2e508)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab2e474   500  blr x17
0xffff7ab2e478   504  movz x0, #0x4800000000
0xffff7ab2e47c   508  movz x10, #0x0
0xffff7ab2e480   512  sub csp, jssp, #0x10 (16)
0xffff7ab2e484   516  stp x10, x0, [jssp, #-16]!
0xffff7ab2e488   520  movz x0, #0x2
0xffff7ab2e48c   524  movz x1, #0x5b88
0xffff7ab2e490   528  movk x1, #0xe2, lsl #16
0xffff7ab2e494   532  ldr x16, pc+124 (addr 0x0000ffff7ab2e510)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab2e498   536  blr x16
0xffff7ab2e49c   540  str x0, [jssp, #24]
0xffff7ab2e4a0   544  ldr x16, pc+120 (addr 0x0000ffff7ab2e518)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab2e4a4   548  blr x16
0xffff7ab2e4a8   552  ldr lr, [jssp, #16]
0xffff7ab2e4ac   556  ldp xzr, fp, [jssp], #24
0xffff7ab2e4b0   560  b #-0x210 (addr 0xffff7ab2e2a0)
0xffff7ab2e4b4   564  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0xffff7ab2e4b8   568  d63f03e0       constant
0xffff7ab2e4bc   572  d503201f       constant
0xffff7ab2e4c0   576  20d04201       constant
0xffff7ab2e4c4   580  00000000       constant
0xffff7ab2e4c8   584  20d04201       constant
0xffff7ab2e4cc   588  00000000       constant
0xffff7ab2e4d0   592  20d04201       constant
0xffff7ab2e4d4   596  00000000       constant
0xffff7ab2e4d8   600  20d04519       constant
0xffff7ab2e4dc   604  00000000       constant
0xffff7ab2e4e0   608  7ab2d2c0       constant
0xffff7ab2e4e4   612  0000ffff       constant
0xffff7ab2e4e8   616  20d04201       constant
0xffff7ab2e4ec   620  00000000       constant
0xffff7ab2e4f0   624  7ab2daa0       constant
0xffff7ab2e4f4   628  0000ffff       constant
0xffff7ab2e4f8   632  20d04241       constant
0xffff7ab2e4fc   636  00000000       constant
0xffff7ab2e500   640  20d04241       constant
0xffff7ab2e504   644  00000000       constant
0xffff7ab2e508   648  7ab06820       constant
0xffff7ab2e50c   652  0000ffff       constant
0xffff7ab2e510   656  7ab06260       constant
0xffff7ab2e514   660  0000ffff       constant
0xffff7ab2e518   664  7ab068e0       constant
0xffff7ab2e51c   668  0000ffff       constant
0xffff7ab2e520   672  movz x16, #0x0
0xffff7ab2e524   676  sub csp, jssp, #0x10 (16)
0xffff7ab2e528   680  stp fp, lr, [jssp, #-16]!
0xffff7ab2e52c   684  bl #+0x14 (addr 0xffff7ab2e540)
0xffff7ab2e530   688  movz x16, #0x8
0xffff7ab2e534   692  sub csp, jssp, #0x10 (16)
0xffff7ab2e538   696  stp fp, lr, [jssp, #-16]!
0xffff7ab2e53c   700  bl #+0x4 (addr 0xffff7ab2e540)
0xffff7ab2e540   704  movz x17, #0xa00000000
0xffff7ab2e544   708  sub csp, jssp, #0x10 (16)
0xffff7ab2e548   712  stp x17, cp, [jssp, #-16]!
0xffff7ab2e54c   716  add fp, jssp, #0x10 (16)
0xffff7ab2e550   720  ldr x17, pc+24 (addr 0x0000ffff7ab2e568)    ;; lazy deoptimization bailout 0
0xffff7ab2e554   724  add x17, x17, x16
0xffff7ab2e558   728  br x17
0xffff7ab2e55c   732  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab2e560   736  d63f03e0       constant
0xffff7ab2e564   740  d503201f       constant
0xffff7ab2e568   744  7a906000       constant
0xffff7ab2e56c   748  0000ffff       constant


Safepoints (size = 21)
0xffff7ab2e49c   540  000 | x2 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0xffff7ab2e2b0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab2e2b8  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab2e2c0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab2e2c8  embedded object  (0x20d04519 <the hole>)
0xffff7ab2e39c  code target (STUB)  (0xffff7ab2d2c0)
0xffff7ab2e3d4  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab2e40c  code target (STUB)  (0xffff7ab2daa0)
0xffff7ab2e41c  embedded object  (0x20d04241 <undefined>)
0xffff7ab2e434  embedded object  (0x20d04241 <undefined>)
0xffff7ab2e470  code target (STUB)  (0xffff7ab06820)
0xffff7ab2e494  code target (STUB)  (0xffff7ab06260)
0xffff7ab2e4a0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab2e4b4  constant pool (size 108)
0xffff7ab2e550  runtime entry
0xffff7ab2e55c  constant pool (size 20)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0xffff7ab2e600     0  adr xzr, #+0x40 (addr 0xffff7ab2e640)
0xffff7ab2e604     4  adr xzr, #+0x2a8 (addr 0xffff7ab2e8ac)
0xffff7ab2e608     8  ldr x16, pc+1368 (addr 0x0000ffff7ab2eb60)    ;; external reference (store_buffer_top)
0xffff7ab2e60c    12  ldr x0, [x16]
0xffff7ab2e610    16  str x2, [x0], #8
0xffff7ab2e614    20  str x0, [x16]
0xffff7ab2e618    24  tst x0, #0x1ffff
0xffff7ab2e61c    28  b.eq #+0x8 (addr 0xffff7ab2e624)
0xffff7ab2e620    32  ret
0xffff7ab2e624    36  sub csp, jssp, #0x8 (8)
0xffff7ab2e628    40  str lr, [jssp, #-8]!
0xffff7ab2e62c    44  ldr x17, pc+1340 (addr 0x0000ffff7ab2eb68)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2e630    48  blr x17
0xffff7ab2e634    52  ldr lr, [jssp], #8
0xffff7ab2e638    56  ret
0xffff7ab2e63c    60  ret
0xffff7ab2e640    64  sub csp, jssp, #0x10 (16)
0xffff7ab2e644    68  stp x3, x1, [jssp, #-16]!
0xffff7ab2e648    72  ldr x0, [x2]
0xffff7ab2e64c    76  and x16, x0, #0xfffffffffff00000
0xffff7ab2e650    80  ldr x16, [x16, #8]
0xffff7ab2e654    84  tst x16, #0x18
0xffff7ab2e658    88  b.eq #+0x17c (addr 0xffff7ab2e7d4)
0xffff7ab2e65c    92  and x16, cp, #0xfffffffffff00000
0xffff7ab2e660    96  ldr x16, [x16, #8]
0xffff7ab2e664   100  tst x16, #0x18
0xffff7ab2e668   104  b.ne #+0x16c (addr 0xffff7ab2e7d4)
0xffff7ab2e66c   108  and x0, cp, #0xfffffffffff00000
0xffff7ab2e670   112  ldr x1, [x0, #104]
0xffff7ab2e674   116  subs x1, x1, #0x1 (1)
0xffff7ab2e678   120  str x1, [x0, #104]
0xffff7ab2e67c   124  b.mi #+0xc4 (addr 0xffff7ab2e740)
0xffff7ab2e680   128  ubfx x16, cp, #8, #12
0xffff7ab2e684   132  and x0, cp, #0xfffffffffff00000
0xffff7ab2e688   136  add x0, x0, x16, lsl #2
0xffff7ab2e68c   140  ubfx x1, cp, #3, #5
0xffff7ab2e690   144  ldr x0, [x0, #360]
0xffff7ab2e694   148  lsr x0, x0, x1
0xffff7ab2e698   152  tbz w0, #0, #+0x8 (addr 0xffff7ab2e6a0)
0xffff7ab2e69c   156  tbnz w0, #1, #+0x3c (addr 0xffff7ab2e6d8)
0xffff7ab2e6a0   160  ldp x3, x1, [jssp], #16
0xffff7ab2e6a4   164  ldr x16, pc+1228 (addr 0x0000ffff7ab2eb70)    ;; external reference (store_buffer_top)
0xffff7ab2e6a8   168  ldr x0, [x16]
0xffff7ab2e6ac   172  str x2, [x0], #8
0xffff7ab2e6b0   176  str x0, [x16]
0xffff7ab2e6b4   180  tst x0, #0x1ffff
0xffff7ab2e6b8   184  b.eq #+0x8 (addr 0xffff7ab2e6c0)
0xffff7ab2e6bc   188  ret
0xffff7ab2e6c0   192  sub csp, jssp, #0x8 (8)
0xffff7ab2e6c4   196  str lr, [jssp, #-8]!
0xffff7ab2e6c8   200  ldr x17, pc+1200 (addr 0x0000ffff7ab2eb78)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2e6cc   204  blr x17
0xffff7ab2e6d0   208  ldr lr, [jssp], #8
0xffff7ab2e6d4   212  ret
0xffff7ab2e6d8   216  ldr x0, [x2]
0xffff7ab2e6dc   220  sub csp, jssp, #0x10 (16)
0xffff7ab2e6e0   224  stp cp, x2, [jssp, #-16]!
0xffff7ab2e6e4   228  ubfx x16, x0, #8, #12
0xffff7ab2e6e8   232  and x1, x0, #0xfffffffffff00000
0xffff7ab2e6ec   236  add x1, x1, x16, lsl #2
0xffff7ab2e6f0   240  ubfx cp, x0, #3, #5
0xffff7ab2e6f4   244  ldr x2, [x1, #360]
0xffff7ab2e6f8   248  lsr x2, x2, cp
0xffff7ab2e6fc   252  tbz w2, #0, #+0x40 (addr 0xffff7ab2e73c)
0xffff7ab2e700   256  ldp cp, x2, [jssp], #16
0xffff7ab2e704   260  ldp x3, x1, [jssp], #16
0xffff7ab2e708   264  ldr x16, pc+1144 (addr 0x0000ffff7ab2eb80)    ;; external reference (store_buffer_top)
0xffff7ab2e70c   268  ldr x0, [x16]
0xffff7ab2e710   272  str x2, [x0], #8
0xffff7ab2e714   276  str x0, [x16]
0xffff7ab2e718   280  tst x0, #0x1ffff
0xffff7ab2e71c   284  b.eq #+0x8 (addr 0xffff7ab2e724)
0xffff7ab2e720   288  ret
0xffff7ab2e724   292  sub csp, jssp, #0x8 (8)
0xffff7ab2e728   296  str lr, [jssp, #-8]!
0xffff7ab2e72c   300  ldr x17, pc+1116 (addr 0x0000ffff7ab2eb88)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2e730   304  blr x17
0xffff7ab2e734   308  ldr lr, [jssp], #8
0xffff7ab2e738   312  ret
0xffff7ab2e73c   316  ldp cp, x2, [jssp], #16
0xffff7ab2e740   320  sub csp, jssp, #0x78 (120)
0xffff7ab2e744   324  stp x14, x15, [jssp, #-32]!
0xffff7ab2e748   328  stp x18, lr, [jssp, #16]
0xffff7ab2e74c   332  stp x10, x11, [jssp, #-32]!
0xffff7ab2e750   336  stp x12, x13, [jssp, #16]
0xffff7ab2e754   340  stp x6, x7, [jssp, #-32]!
0xffff7ab2e758   344  stp x8, x9, [jssp, #16]
0xffff7ab2e75c   348  stp x2, x4, [jssp, #-24]!
0xffff7ab2e760   352  str x5, [jssp, #16]
0xffff7ab2e764   356  mov x0, cp
0xffff7ab2e768   360  mov x1, x2
0xffff7ab2e76c   364  ldr x2, pc+1060 (addr 0x0000ffff7ab2eb90)    ;; external reference (isolate)
0xffff7ab2e770   368  ldr x16, pc+1064 (addr 0x0000ffff7ab2eb98)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2e774   372  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2e778   376  blr x16
0xffff7ab2e77c   380  ldp x5, x6, [jssp, #16]
0xffff7ab2e780   384  ldp x2, x4, [jssp], #32
0xffff7ab2e784   388  ldp x9, x10, [jssp, #16]
0xffff7ab2e788   392  ldp x7, x8, [jssp], #32
0xffff7ab2e78c   396  ldp x13, x14, [jssp, #16]
0xffff7ab2e790   400  ldp x11, x12, [jssp], #32
0xffff7ab2e794   404  ldr lr, [jssp, #16]
0xffff7ab2e798   408  ldp x15, x18, [jssp], #24
0xffff7ab2e79c   412  ldp x3, x1, [jssp], #16
0xffff7ab2e7a0   416  ldr x16, pc+1024 (addr 0x0000ffff7ab2eba0)    ;; external reference (store_buffer_top)
0xffff7ab2e7a4   420  ldr x0, [x16]
0xffff7ab2e7a8   424  str x2, [x0], #8
0xffff7ab2e7ac   428  str x0, [x16]
0xffff7ab2e7b0   432  tst x0, #0x1ffff
0xffff7ab2e7b4   436  b.eq #+0x8 (addr 0xffff7ab2e7bc)
0xffff7ab2e7b8   440  ret
0xffff7ab2e7bc   444  sub csp, jssp, #0x8 (8)
0xffff7ab2e7c0   448  str lr, [jssp, #-8]!
0xffff7ab2e7c4   452  ldr x17, pc+996 (addr 0x0000ffff7ab2eba8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2e7c8   456  blr x17
0xffff7ab2e7cc   460  ldr lr, [jssp], #8
0xffff7ab2e7d0   464  ret
0xffff7ab2e7d4   468  and x0, cp, #0xfffffffffff00000
0xffff7ab2e7d8   472  ldr x1, [x0, #104]
0xffff7ab2e7dc   476  subs x1, x1, #0x1 (1)
0xffff7ab2e7e0   480  str x1, [x0, #104]
0xffff7ab2e7e4   484  b.mi #+0x64 (addr 0xffff7ab2e848)
0xffff7ab2e7e8   488  ubfx x16, cp, #8, #12
0xffff7ab2e7ec   492  and x0, cp, #0xfffffffffff00000
0xffff7ab2e7f0   496  add x0, x0, x16, lsl #2
0xffff7ab2e7f4   500  ubfx x1, cp, #3, #5
0xffff7ab2e7f8   504  ldr x0, [x0, #360]
0xffff7ab2e7fc   508  lsr x0, x0, x1
0xffff7ab2e800   512  tbz w0, #0, #+0x8 (addr 0xffff7ab2e808)
0xffff7ab2e804   516  tbnz w0, #1, #+0xc (addr 0xffff7ab2e810)
0xffff7ab2e808   520  ldp x3, x1, [jssp], #16
0xffff7ab2e80c   524  ret
0xffff7ab2e810   528  ldr x0, [x2]
0xffff7ab2e814   532  sub csp, jssp, #0x10 (16)
0xffff7ab2e818   536  stp cp, x2, [jssp, #-16]!
0xffff7ab2e81c   540  ubfx x16, x0, #8, #12
0xffff7ab2e820   544  and x1, x0, #0xfffffffffff00000
0xffff7ab2e824   548  add x1, x1, x16, lsl #2
0xffff7ab2e828   552  ubfx cp, x0, #3, #5
0xffff7ab2e82c   556  ldr x2, [x1, #360]
0xffff7ab2e830   560  lsr x2, x2, cp
0xffff7ab2e834   564  tbz w2, #0, #+0x10 (addr 0xffff7ab2e844)
0xffff7ab2e838   568  ldp cp, x2, [jssp], #16
0xffff7ab2e83c   572  ldp x3, x1, [jssp], #16
0xffff7ab2e840   576  ret
0xffff7ab2e844   580  ldp cp, x2, [jssp], #16
0xffff7ab2e848   584  sub csp, jssp, #0x78 (120)
0xffff7ab2e84c   588  stp x14, x15, [jssp, #-32]!
0xffff7ab2e850   592  stp x18, lr, [jssp, #16]
0xffff7ab2e854   596  stp x10, x11, [jssp, #-32]!
0xffff7ab2e858   600  stp x12, x13, [jssp, #16]
0xffff7ab2e85c   604  stp x6, x7, [jssp, #-32]!
0xffff7ab2e860   608  stp x8, x9, [jssp, #16]
0xffff7ab2e864   612  stp x2, x4, [jssp, #-24]!
0xffff7ab2e868   616  str x5, [jssp, #16]
0xffff7ab2e86c   620  mov x0, cp
0xffff7ab2e870   624  mov x1, x2
0xffff7ab2e874   628  ldr x2, pc+828 (addr 0x0000ffff7ab2ebb0)    ;; external reference (isolate)
0xffff7ab2e878   632  ldr x16, pc+832 (addr 0x0000ffff7ab2ebb8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2e87c   636  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2e880   640  blr x16
0xffff7ab2e884   644  ldp x5, x6, [jssp, #16]
0xffff7ab2e888   648  ldp x2, x4, [jssp], #32
0xffff7ab2e88c   652  ldp x9, x10, [jssp, #16]
0xffff7ab2e890   656  ldp x7, x8, [jssp], #32
0xffff7ab2e894   660  ldp x13, x14, [jssp, #16]
0xffff7ab2e898   664  ldp x11, x12, [jssp], #32
0xffff7ab2e89c   668  ldr lr, [jssp, #16]
0xffff7ab2e8a0   672  ldp x15, x18, [jssp], #24
0xffff7ab2e8a4   676  ldp x3, x1, [jssp], #16
0xffff7ab2e8a8   680  ret
0xffff7ab2e8ac   684  sub csp, jssp, #0x10 (16)
0xffff7ab2e8b0   688  stp x3, x1, [jssp, #-16]!
0xffff7ab2e8b4   692  ldr x0, [x2]
0xffff7ab2e8b8   696  and x16, x0, #0xfffffffffff00000
0xffff7ab2e8bc   700  ldr x16, [x16, #8]
0xffff7ab2e8c0   704  tst x16, #0x18
0xffff7ab2e8c4   708  b.eq #+0x19c (addr 0xffff7ab2ea60)
0xffff7ab2e8c8   712  and x16, cp, #0xfffffffffff00000
0xffff7ab2e8cc   716  ldr x16, [x16, #8]
0xffff7ab2e8d0   720  tst x16, #0x18
0xffff7ab2e8d4   724  b.ne #+0x18c (addr 0xffff7ab2ea60)
0xffff7ab2e8d8   728  and x0, cp, #0xfffffffffff00000
0xffff7ab2e8dc   732  ldr x1, [x0, #104]
0xffff7ab2e8e0   736  subs x1, x1, #0x1 (1)
0xffff7ab2e8e4   740  str x1, [x0, #104]
0xffff7ab2e8e8   744  b.mi #+0xe4 (addr 0xffff7ab2e9cc)
0xffff7ab2e8ec   748  ubfx x16, cp, #8, #12
0xffff7ab2e8f0   752  and x0, cp, #0xfffffffffff00000
0xffff7ab2e8f4   756  add x0, x0, x16, lsl #2
0xffff7ab2e8f8   760  ubfx x1, cp, #3, #5
0xffff7ab2e8fc   764  ldr x0, [x0, #360]
0xffff7ab2e900   768  lsr x0, x0, x1
0xffff7ab2e904   772  tbz w0, #0, #+0x8 (addr 0xffff7ab2e90c)
0xffff7ab2e908   776  tbnz w0, #1, #+0x3c (addr 0xffff7ab2e944)
0xffff7ab2e90c   780  ldp x3, x1, [jssp], #16
0xffff7ab2e910   784  ldr x16, pc+688 (addr 0x0000ffff7ab2ebc0)    ;; external reference (store_buffer_top)
0xffff7ab2e914   788  ldr x0, [x16]
0xffff7ab2e918   792  str x2, [x0], #8
0xffff7ab2e91c   796  str x0, [x16]
0xffff7ab2e920   800  tst x0, #0x1ffff
0xffff7ab2e924   804  b.eq #+0x8 (addr 0xffff7ab2e92c)
0xffff7ab2e928   808  ret
0xffff7ab2e92c   812  sub csp, jssp, #0x8 (8)
0xffff7ab2e930   816  str lr, [jssp, #-8]!
0xffff7ab2e934   820  ldr x17, pc+660 (addr 0x0000ffff7ab2ebc8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2e938   824  blr x17
0xffff7ab2e93c   828  ldr lr, [jssp], #8
0xffff7ab2e940   832  ret
0xffff7ab2e944   836  ldr x0, [x2]
0xffff7ab2e948   840  and x1, x0, #0xfffffffffff00000
0xffff7ab2e94c   844  ldr x1, [x1, #8]
0xffff7ab2e950   848  tbz w1, #6, #+0x18 (addr 0xffff7ab2e968)
0xffff7ab2e954   852  and x1, cp, #0xfffffffffff00000
0xffff7ab2e958   856  ldr x1, [x1, #8]
0xffff7ab2e95c   860  movz x16, #0x58
0xffff7ab2e960   864  tst x1, x16
0xffff7ab2e964   868  b.eq #+0x68 (addr 0xffff7ab2e9cc)
0xffff7ab2e968   872  sub csp, jssp, #0x10 (16)
0xffff7ab2e96c   876  stp cp, x2, [jssp, #-16]!
0xffff7ab2e970   880  ubfx x16, x0, #8, #12
0xffff7ab2e974   884  and x1, x0, #0xfffffffffff00000
0xffff7ab2e978   888  add x1, x1, x16, lsl #2
0xffff7ab2e97c   892  ubfx cp, x0, #3, #5
0xffff7ab2e980   896  ldr x2, [x1, #360]
0xffff7ab2e984   900  lsr x2, x2, cp
0xffff7ab2e988   904  tbz w2, #0, #+0x40 (addr 0xffff7ab2e9c8)
0xffff7ab2e98c   908  ldp cp, x2, [jssp], #16
0xffff7ab2e990   912  ldp x3, x1, [jssp], #16
0xffff7ab2e994   916  ldr x16, pc+572 (addr 0x0000ffff7ab2ebd0)    ;; external reference (store_buffer_top)
0xffff7ab2e998   920  ldr x0, [x16]
0xffff7ab2e99c   924  str x2, [x0], #8
0xffff7ab2e9a0   928  str x0, [x16]
0xffff7ab2e9a4   932  tst x0, #0x1ffff
0xffff7ab2e9a8   936  b.eq #+0x8 (addr 0xffff7ab2e9b0)
0xffff7ab2e9ac   940  ret
0xffff7ab2e9b0   944  sub csp, jssp, #0x8 (8)
0xffff7ab2e9b4   948  str lr, [jssp, #-8]!
0xffff7ab2e9b8   952  ldr x17, pc+544 (addr 0x0000ffff7ab2ebd8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2e9bc   956  blr x17
0xffff7ab2e9c0   960  ldr lr, [jssp], #8
0xffff7ab2e9c4   964  ret
0xffff7ab2e9c8   968  ldp cp, x2, [jssp], #16
0xffff7ab2e9cc   972  sub csp, jssp, #0x78 (120)
0xffff7ab2e9d0   976  stp x14, x15, [jssp, #-32]!
0xffff7ab2e9d4   980  stp x18, lr, [jssp, #16]
0xffff7ab2e9d8   984  stp x10, x11, [jssp, #-32]!
0xffff7ab2e9dc   988  stp x12, x13, [jssp, #16]
0xffff7ab2e9e0   992  stp x6, x7, [jssp, #-32]!
0xffff7ab2e9e4   996  stp x8, x9, [jssp, #16]
0xffff7ab2e9e8  1000  stp x2, x4, [jssp, #-24]!
0xffff7ab2e9ec  1004  str x5, [jssp, #16]
0xffff7ab2e9f0  1008  mov x0, cp
0xffff7ab2e9f4  1012  mov x1, x2
0xffff7ab2e9f8  1016  ldr x2, pc+488 (addr 0x0000ffff7ab2ebe0)    ;; external reference (isolate)
0xffff7ab2e9fc  1020  ldr x16, pc+492 (addr 0x0000ffff7ab2ebe8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2ea00  1024  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2ea04  1028  blr x16
0xffff7ab2ea08  1032  ldp x5, x6, [jssp, #16]
0xffff7ab2ea0c  1036  ldp x2, x4, [jssp], #32
0xffff7ab2ea10  1040  ldp x9, x10, [jssp, #16]
0xffff7ab2ea14  1044  ldp x7, x8, [jssp], #32
0xffff7ab2ea18  1048  ldp x13, x14, [jssp, #16]
0xffff7ab2ea1c  1052  ldp x11, x12, [jssp], #32
0xffff7ab2ea20  1056  ldr lr, [jssp, #16]
0xffff7ab2ea24  1060  ldp x15, x18, [jssp], #24
0xffff7ab2ea28  1064  ldp x3, x1, [jssp], #16
0xffff7ab2ea2c  1068  ldr x16, pc+452 (addr 0x0000ffff7ab2ebf0)    ;; external reference (store_buffer_top)
0xffff7ab2ea30  1072  ldr x0, [x16]
0xffff7ab2ea34  1076  str x2, [x0], #8
0xffff7ab2ea38  1080  str x0, [x16]
0xffff7ab2ea3c  1084  tst x0, #0x1ffff
0xffff7ab2ea40  1088  b.eq #+0x8 (addr 0xffff7ab2ea48)
0xffff7ab2ea44  1092  ret
0xffff7ab2ea48  1096  sub csp, jssp, #0x8 (8)
0xffff7ab2ea4c  1100  str lr, [jssp, #-8]!
0xffff7ab2ea50  1104  ldr x17, pc+424 (addr 0x0000ffff7ab2ebf8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2ea54  1108  blr x17
0xffff7ab2ea58  1112  ldr lr, [jssp], #8
0xffff7ab2ea5c  1116  ret
0xffff7ab2ea60  1120  and x0, cp, #0xfffffffffff00000
0xffff7ab2ea64  1124  ldr x1, [x0, #104]
0xffff7ab2ea68  1128  subs x1, x1, #0x1 (1)
0xffff7ab2ea6c  1132  str x1, [x0, #104]
0xffff7ab2ea70  1136  b.mi #+0x84 (addr 0xffff7ab2eaf4)
0xffff7ab2ea74  1140  ubfx x16, cp, #8, #12
0xffff7ab2ea78  1144  and x0, cp, #0xfffffffffff00000
0xffff7ab2ea7c  1148  add x0, x0, x16, lsl #2
0xffff7ab2ea80  1152  ubfx x1, cp, #3, #5
0xffff7ab2ea84  1156  ldr x0, [x0, #360]
0xffff7ab2ea88  1160  lsr x0, x0, x1
0xffff7ab2ea8c  1164  tbz w0, #0, #+0x8 (addr 0xffff7ab2ea94)
0xffff7ab2ea90  1168  tbnz w0, #1, #+0xc (addr 0xffff7ab2ea9c)
0xffff7ab2ea94  1172  ldp x3, x1, [jssp], #16
0xffff7ab2ea98  1176  ret
0xffff7ab2ea9c  1180  ldr x0, [x2]
0xffff7ab2eaa0  1184  and x1, x0, #0xfffffffffff00000
0xffff7ab2eaa4  1188  ldr x1, [x1, #8]
0xffff7ab2eaa8  1192  tbz w1, #6, #+0x18 (addr 0xffff7ab2eac0)
0xffff7ab2eaac  1196  and x1, cp, #0xfffffffffff00000
0xffff7ab2eab0  1200  ldr x1, [x1, #8]
0xffff7ab2eab4  1204  movz x16, #0x58
0xffff7ab2eab8  1208  tst x1, x16
0xffff7ab2eabc  1212  b.eq #+0x38 (addr 0xffff7ab2eaf4)
0xffff7ab2eac0  1216  sub csp, jssp, #0x10 (16)
0xffff7ab2eac4  1220  stp cp, x2, [jssp, #-16]!
0xffff7ab2eac8  1224  ubfx x16, x0, #8, #12
0xffff7ab2eacc  1228  and x1, x0, #0xfffffffffff00000
0xffff7ab2ead0  1232  add x1, x1, x16, lsl #2
0xffff7ab2ead4  1236  ubfx cp, x0, #3, #5
0xffff7ab2ead8  1240  ldr x2, [x1, #360]
0xffff7ab2eadc  1244  lsr x2, x2, cp
0xffff7ab2eae0  1248  tbz w2, #0, #+0x10 (addr 0xffff7ab2eaf0)
0xffff7ab2eae4  1252  ldp cp, x2, [jssp], #16
0xffff7ab2eae8  1256  ldp x3, x1, [jssp], #16
0xffff7ab2eaec  1260  ret
0xffff7ab2eaf0  1264  ldp cp, x2, [jssp], #16
0xffff7ab2eaf4  1268  sub csp, jssp, #0x78 (120)
0xffff7ab2eaf8  1272  stp x14, x15, [jssp, #-32]!
0xffff7ab2eafc  1276  stp x18, lr, [jssp, #16]
0xffff7ab2eb00  1280  stp x10, x11, [jssp, #-32]!
0xffff7ab2eb04  1284  stp x12, x13, [jssp, #16]
0xffff7ab2eb08  1288  stp x6, x7, [jssp, #-32]!
0xffff7ab2eb0c  1292  stp x8, x9, [jssp, #16]
0xffff7ab2eb10  1296  stp x2, x4, [jssp, #-24]!
0xffff7ab2eb14  1300  str x5, [jssp, #16]
0xffff7ab2eb18  1304  mov x0, cp
0xffff7ab2eb1c  1308  mov x1, x2
0xffff7ab2eb20  1312  ldr x2, pc+224 (addr 0x0000ffff7ab2ec00)    ;; external reference (isolate)
0xffff7ab2eb24  1316  ldr x16, pc+228 (addr 0x0000ffff7ab2ec08)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2eb28  1320  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2eb2c  1324  blr x16
0xffff7ab2eb30  1328  ldp x5, x6, [jssp, #16]
0xffff7ab2eb34  1332  ldp x2, x4, [jssp], #32
0xffff7ab2eb38  1336  ldp x9, x10, [jssp, #16]
0xffff7ab2eb3c  1340  ldp x7, x8, [jssp], #32
0xffff7ab2eb40  1344  ldp x13, x14, [jssp, #16]
0xffff7ab2eb44  1348  ldp x11, x12, [jssp], #32
0xffff7ab2eb48  1352  ldr lr, [jssp, #16]
0xffff7ab2eb4c  1356  ldp x15, x18, [jssp], #24
0xffff7ab2eb50  1360  ldp x3, x1, [jssp], #16
0xffff7ab2eb54  1364  ret
0xffff7ab2eb58  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab2eb5c  1372  d63f03e0       constant
0xffff7ab2eb60  1376  09abe8c0       constant
0xffff7ab2eb64  1380  00000000       constant
0xffff7ab2eb68  1384  7ab064c0       constant
0xffff7ab2eb6c  1388  0000ffff       constant
0xffff7ab2eb70  1392  09abe8c0       constant
0xffff7ab2eb74  1396  00000000       constant
0xffff7ab2eb78  1400  7ab064c0       constant
0xffff7ab2eb7c  1404  0000ffff       constant
0xffff7ab2eb80  1408  09abe8c0       constant
0xffff7ab2eb84  1412  00000000       constant
0xffff7ab2eb88  1416  7ab064c0       constant
0xffff7ab2eb8c  1420  0000ffff       constant
0xffff7ab2eb90  1424  09abd2d0       constant
0xffff7ab2eb94  1428  00000000       constant
0xffff7ab2eb98  1432  00c2d958       constant
0xffff7ab2eb9c  1436  00000000       constant
0xffff7ab2eba0  1440  09abe8c0       constant
0xffff7ab2eba4  1444  00000000       constant
0xffff7ab2eba8  1448  7ab064c0       constant
0xffff7ab2ebac  1452  0000ffff       constant
0xffff7ab2ebb0  1456  09abd2d0       constant
0xffff7ab2ebb4  1460  00000000       constant
0xffff7ab2ebb8  1464  00c2d958       constant
0xffff7ab2ebbc  1468  00000000       constant
0xffff7ab2ebc0  1472  09abe8c0       constant
0xffff7ab2ebc4  1476  00000000       constant
0xffff7ab2ebc8  1480  7ab064c0       constant
0xffff7ab2ebcc  1484  0000ffff       constant
0xffff7ab2ebd0  1488  09abe8c0       constant
0xffff7ab2ebd4  1492  00000000       constant
0xffff7ab2ebd8  1496  7ab064c0       constant
0xffff7ab2ebdc  1500  0000ffff       constant
0xffff7ab2ebe0  1504  09abd2d0       constant
0xffff7ab2ebe4  1508  00000000       constant
0xffff7ab2ebe8  1512  00c2d958       constant
0xffff7ab2ebec  1516  00000000       constant
0xffff7ab2ebf0  1520  09abe8c0       constant
0xffff7ab2ebf4  1524  00000000       constant
0xffff7ab2ebf8  1528  7ab064c0       constant
0xffff7ab2ebfc  1532  0000ffff       constant
0xffff7ab2ec00  1536  09abd2d0       constant
0xffff7ab2ec04  1540  00000000       constant
0xffff7ab2ec08  1544  00c2d958       constant
0xffff7ab2ec0c  1548  00000000       constant


RelocInfo (size = 59)
0xffff7ab2e608  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2e62c  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2e6a4  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2e6c8  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2e708  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2e72c  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2e76c  external reference (isolate)  (0x9abd2d0)
0xffff7ab2e770  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2e7a0  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2e7c4  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2e874  external reference (isolate)  (0x9abd2d0)
0xffff7ab2e878  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2e910  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2e934  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2e994  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2e9b8  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2e9f8  external reference (isolate)  (0x9abd2d0)
0xffff7ab2e9fc  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2ea2c  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2ea50  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2eb20  external reference (isolate)  (0x9abd2d0)
0xffff7ab2eb24  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2eb58  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0xffff7ab2ec80     0  adr xzr, #+0x40 (addr 0xffff7ab2ecc0)
0xffff7ab2ec84     4  adr xzr, #+0x2a8 (addr 0xffff7ab2ef2c)
0xffff7ab2ec88     8  ldr x16, pc+1368 (addr 0x0000ffff7ab2f1e0)    ;; external reference (store_buffer_top)
0xffff7ab2ec8c    12  ldr x10, [x16]
0xffff7ab2ec90    16  str x11, [x10], #8
0xffff7ab2ec94    20  str x10, [x16]
0xffff7ab2ec98    24  tst x10, #0x1ffff
0xffff7ab2ec9c    28  b.eq #+0x8 (addr 0xffff7ab2eca4)
0xffff7ab2eca0    32  ret
0xffff7ab2eca4    36  sub csp, jssp, #0x8 (8)
0xffff7ab2eca8    40  str lr, [jssp, #-8]!
0xffff7ab2ecac    44  ldr x17, pc+1340 (addr 0x0000ffff7ab2f1e8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2ecb0    48  blr x17
0xffff7ab2ecb4    52  ldr lr, [jssp], #8
0xffff7ab2ecb8    56  ret
0xffff7ab2ecbc    60  ret
0xffff7ab2ecc0    64  sub csp, jssp, #0x10 (16)
0xffff7ab2ecc4    68  stp x2, x0, [jssp, #-16]!
0xffff7ab2ecc8    72  ldr x10, [x11]
0xffff7ab2eccc    76  and x16, x10, #0xfffffffffff00000
0xffff7ab2ecd0    80  ldr x16, [x16, #8]
0xffff7ab2ecd4    84  tst x16, #0x18
0xffff7ab2ecd8    88  b.eq #+0x17c (addr 0xffff7ab2ee54)
0xffff7ab2ecdc    92  and x16, x1, #0xfffffffffff00000
0xffff7ab2ece0    96  ldr x16, [x16, #8]
0xffff7ab2ece4   100  tst x16, #0x18
0xffff7ab2ece8   104  b.ne #+0x16c (addr 0xffff7ab2ee54)
0xffff7ab2ecec   108  and x10, x1, #0xfffffffffff00000
0xffff7ab2ecf0   112  ldr x0, [x10, #104]
0xffff7ab2ecf4   116  subs x0, x0, #0x1 (1)
0xffff7ab2ecf8   120  str x0, [x10, #104]
0xffff7ab2ecfc   124  b.mi #+0xc4 (addr 0xffff7ab2edc0)
0xffff7ab2ed00   128  ubfx x16, x1, #8, #12
0xffff7ab2ed04   132  and x10, x1, #0xfffffffffff00000
0xffff7ab2ed08   136  add x10, x10, x16, lsl #2
0xffff7ab2ed0c   140  ubfx x0, x1, #3, #5
0xffff7ab2ed10   144  ldr x10, [x10, #360]
0xffff7ab2ed14   148  lsr x10, x10, x0
0xffff7ab2ed18   152  tbz w10, #0, #+0x8 (addr 0xffff7ab2ed20)
0xffff7ab2ed1c   156  tbnz w10, #1, #+0x3c (addr 0xffff7ab2ed58)
0xffff7ab2ed20   160  ldp x2, x0, [jssp], #16
0xffff7ab2ed24   164  ldr x16, pc+1228 (addr 0x0000ffff7ab2f1f0)    ;; external reference (store_buffer_top)
0xffff7ab2ed28   168  ldr x10, [x16]
0xffff7ab2ed2c   172  str x11, [x10], #8
0xffff7ab2ed30   176  str x10, [x16]
0xffff7ab2ed34   180  tst x10, #0x1ffff
0xffff7ab2ed38   184  b.eq #+0x8 (addr 0xffff7ab2ed40)
0xffff7ab2ed3c   188  ret
0xffff7ab2ed40   192  sub csp, jssp, #0x8 (8)
0xffff7ab2ed44   196  str lr, [jssp, #-8]!
0xffff7ab2ed48   200  ldr x17, pc+1200 (addr 0x0000ffff7ab2f1f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2ed4c   204  blr x17
0xffff7ab2ed50   208  ldr lr, [jssp], #8
0xffff7ab2ed54   212  ret
0xffff7ab2ed58   216  ldr x10, [x11]
0xffff7ab2ed5c   220  sub csp, jssp, #0x10 (16)
0xffff7ab2ed60   224  stp x1, x11, [jssp, #-16]!
0xffff7ab2ed64   228  ubfx x16, x10, #8, #12
0xffff7ab2ed68   232  and x0, x10, #0xfffffffffff00000
0xffff7ab2ed6c   236  add x0, x0, x16, lsl #2
0xffff7ab2ed70   240  ubfx x1, x10, #3, #5
0xffff7ab2ed74   244  ldr x11, [x0, #360]
0xffff7ab2ed78   248  lsr x11, x11, x1
0xffff7ab2ed7c   252  tbz w11, #0, #+0x40 (addr 0xffff7ab2edbc)
0xffff7ab2ed80   256  ldp x1, x11, [jssp], #16
0xffff7ab2ed84   260  ldp x2, x0, [jssp], #16
0xffff7ab2ed88   264  ldr x16, pc+1144 (addr 0x0000ffff7ab2f200)    ;; external reference (store_buffer_top)
0xffff7ab2ed8c   268  ldr x10, [x16]
0xffff7ab2ed90   272  str x11, [x10], #8
0xffff7ab2ed94   276  str x10, [x16]
0xffff7ab2ed98   280  tst x10, #0x1ffff
0xffff7ab2ed9c   284  b.eq #+0x8 (addr 0xffff7ab2eda4)
0xffff7ab2eda0   288  ret
0xffff7ab2eda4   292  sub csp, jssp, #0x8 (8)
0xffff7ab2eda8   296  str lr, [jssp, #-8]!
0xffff7ab2edac   300  ldr x17, pc+1116 (addr 0x0000ffff7ab2f208)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2edb0   304  blr x17
0xffff7ab2edb4   308  ldr lr, [jssp], #8
0xffff7ab2edb8   312  ret
0xffff7ab2edbc   316  ldp x1, x11, [jssp], #16
0xffff7ab2edc0   320  sub csp, jssp, #0x78 (120)
0xffff7ab2edc4   324  stp x14, x15, [jssp, #-32]!
0xffff7ab2edc8   328  stp x18, lr, [jssp, #16]
0xffff7ab2edcc   332  stp x9, x11, [jssp, #-32]!
0xffff7ab2edd0   336  stp x12, x13, [jssp, #16]
0xffff7ab2edd4   340  stp x5, x6, [jssp, #-32]!
0xffff7ab2edd8   344  stp x7, x8, [jssp, #16]
0xffff7ab2eddc   348  stp x1, x3, [jssp, #-24]!
0xffff7ab2ede0   352  str x4, [jssp, #16]
0xffff7ab2ede4   356  mov x0, x1
0xffff7ab2ede8   360  mov x1, x11
0xffff7ab2edec   364  ldr x2, pc+1060 (addr 0x0000ffff7ab2f210)    ;; external reference (isolate)
0xffff7ab2edf0   368  ldr x16, pc+1064 (addr 0x0000ffff7ab2f218)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2edf4   372  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2edf8   376  blr x16
0xffff7ab2edfc   380  ldp x4, x5, [jssp, #16]
0xffff7ab2ee00   384  ldp x1, x3, [jssp], #32
0xffff7ab2ee04   388  ldp x8, x9, [jssp, #16]
0xffff7ab2ee08   392  ldp x6, x7, [jssp], #32
0xffff7ab2ee0c   396  ldp x13, x14, [jssp, #16]
0xffff7ab2ee10   400  ldp x11, x12, [jssp], #32
0xffff7ab2ee14   404  ldr lr, [jssp, #16]
0xffff7ab2ee18   408  ldp x15, x18, [jssp], #24
0xffff7ab2ee1c   412  ldp x2, x0, [jssp], #16
0xffff7ab2ee20   416  ldr x16, pc+1024 (addr 0x0000ffff7ab2f220)    ;; external reference (store_buffer_top)
0xffff7ab2ee24   420  ldr x10, [x16]
0xffff7ab2ee28   424  str x11, [x10], #8
0xffff7ab2ee2c   428  str x10, [x16]
0xffff7ab2ee30   432  tst x10, #0x1ffff
0xffff7ab2ee34   436  b.eq #+0x8 (addr 0xffff7ab2ee3c)
0xffff7ab2ee38   440  ret
0xffff7ab2ee3c   444  sub csp, jssp, #0x8 (8)
0xffff7ab2ee40   448  str lr, [jssp, #-8]!
0xffff7ab2ee44   452  ldr x17, pc+996 (addr 0x0000ffff7ab2f228)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2ee48   456  blr x17
0xffff7ab2ee4c   460  ldr lr, [jssp], #8
0xffff7ab2ee50   464  ret
0xffff7ab2ee54   468  and x10, x1, #0xfffffffffff00000
0xffff7ab2ee58   472  ldr x0, [x10, #104]
0xffff7ab2ee5c   476  subs x0, x0, #0x1 (1)
0xffff7ab2ee60   480  str x0, [x10, #104]
0xffff7ab2ee64   484  b.mi #+0x64 (addr 0xffff7ab2eec8)
0xffff7ab2ee68   488  ubfx x16, x1, #8, #12
0xffff7ab2ee6c   492  and x10, x1, #0xfffffffffff00000
0xffff7ab2ee70   496  add x10, x10, x16, lsl #2
0xffff7ab2ee74   500  ubfx x0, x1, #3, #5
0xffff7ab2ee78   504  ldr x10, [x10, #360]
0xffff7ab2ee7c   508  lsr x10, x10, x0
0xffff7ab2ee80   512  tbz w10, #0, #+0x8 (addr 0xffff7ab2ee88)
0xffff7ab2ee84   516  tbnz w10, #1, #+0xc (addr 0xffff7ab2ee90)
0xffff7ab2ee88   520  ldp x2, x0, [jssp], #16
0xffff7ab2ee8c   524  ret
0xffff7ab2ee90   528  ldr x10, [x11]
0xffff7ab2ee94   532  sub csp, jssp, #0x10 (16)
0xffff7ab2ee98   536  stp x1, x11, [jssp, #-16]!
0xffff7ab2ee9c   540  ubfx x16, x10, #8, #12
0xffff7ab2eea0   544  and x0, x10, #0xfffffffffff00000
0xffff7ab2eea4   548  add x0, x0, x16, lsl #2
0xffff7ab2eea8   552  ubfx x1, x10, #3, #5
0xffff7ab2eeac   556  ldr x11, [x0, #360]
0xffff7ab2eeb0   560  lsr x11, x11, x1
0xffff7ab2eeb4   564  tbz w11, #0, #+0x10 (addr 0xffff7ab2eec4)
0xffff7ab2eeb8   568  ldp x1, x11, [jssp], #16
0xffff7ab2eebc   572  ldp x2, x0, [jssp], #16
0xffff7ab2eec0   576  ret
0xffff7ab2eec4   580  ldp x1, x11, [jssp], #16
0xffff7ab2eec8   584  sub csp, jssp, #0x78 (120)
0xffff7ab2eecc   588  stp x14, x15, [jssp, #-32]!
0xffff7ab2eed0   592  stp x18, lr, [jssp, #16]
0xffff7ab2eed4   596  stp x9, x11, [jssp, #-32]!
0xffff7ab2eed8   600  stp x12, x13, [jssp, #16]
0xffff7ab2eedc   604  stp x5, x6, [jssp, #-32]!
0xffff7ab2eee0   608  stp x7, x8, [jssp, #16]
0xffff7ab2eee4   612  stp x1, x3, [jssp, #-24]!
0xffff7ab2eee8   616  str x4, [jssp, #16]
0xffff7ab2eeec   620  mov x0, x1
0xffff7ab2eef0   624  mov x1, x11
0xffff7ab2eef4   628  ldr x2, pc+828 (addr 0x0000ffff7ab2f230)    ;; external reference (isolate)
0xffff7ab2eef8   632  ldr x16, pc+832 (addr 0x0000ffff7ab2f238)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2eefc   636  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2ef00   640  blr x16
0xffff7ab2ef04   644  ldp x4, x5, [jssp, #16]
0xffff7ab2ef08   648  ldp x1, x3, [jssp], #32
0xffff7ab2ef0c   652  ldp x8, x9, [jssp, #16]
0xffff7ab2ef10   656  ldp x6, x7, [jssp], #32
0xffff7ab2ef14   660  ldp x13, x14, [jssp, #16]
0xffff7ab2ef18   664  ldp x11, x12, [jssp], #32
0xffff7ab2ef1c   668  ldr lr, [jssp, #16]
0xffff7ab2ef20   672  ldp x15, x18, [jssp], #24
0xffff7ab2ef24   676  ldp x2, x0, [jssp], #16
0xffff7ab2ef28   680  ret
0xffff7ab2ef2c   684  sub csp, jssp, #0x10 (16)
0xffff7ab2ef30   688  stp x2, x0, [jssp, #-16]!
0xffff7ab2ef34   692  ldr x10, [x11]
0xffff7ab2ef38   696  and x16, x10, #0xfffffffffff00000
0xffff7ab2ef3c   700  ldr x16, [x16, #8]
0xffff7ab2ef40   704  tst x16, #0x18
0xffff7ab2ef44   708  b.eq #+0x19c (addr 0xffff7ab2f0e0)
0xffff7ab2ef48   712  and x16, x1, #0xfffffffffff00000
0xffff7ab2ef4c   716  ldr x16, [x16, #8]
0xffff7ab2ef50   720  tst x16, #0x18
0xffff7ab2ef54   724  b.ne #+0x18c (addr 0xffff7ab2f0e0)
0xffff7ab2ef58   728  and x10, x1, #0xfffffffffff00000
0xffff7ab2ef5c   732  ldr x0, [x10, #104]
0xffff7ab2ef60   736  subs x0, x0, #0x1 (1)
0xffff7ab2ef64   740  str x0, [x10, #104]
0xffff7ab2ef68   744  b.mi #+0xe4 (addr 0xffff7ab2f04c)
0xffff7ab2ef6c   748  ubfx x16, x1, #8, #12
0xffff7ab2ef70   752  and x10, x1, #0xfffffffffff00000
0xffff7ab2ef74   756  add x10, x10, x16, lsl #2
0xffff7ab2ef78   760  ubfx x0, x1, #3, #5
0xffff7ab2ef7c   764  ldr x10, [x10, #360]
0xffff7ab2ef80   768  lsr x10, x10, x0
0xffff7ab2ef84   772  tbz w10, #0, #+0x8 (addr 0xffff7ab2ef8c)
0xffff7ab2ef88   776  tbnz w10, #1, #+0x3c (addr 0xffff7ab2efc4)
0xffff7ab2ef8c   780  ldp x2, x0, [jssp], #16
0xffff7ab2ef90   784  ldr x16, pc+688 (addr 0x0000ffff7ab2f240)    ;; external reference (store_buffer_top)
0xffff7ab2ef94   788  ldr x10, [x16]
0xffff7ab2ef98   792  str x11, [x10], #8
0xffff7ab2ef9c   796  str x10, [x16]
0xffff7ab2efa0   800  tst x10, #0x1ffff
0xffff7ab2efa4   804  b.eq #+0x8 (addr 0xffff7ab2efac)
0xffff7ab2efa8   808  ret
0xffff7ab2efac   812  sub csp, jssp, #0x8 (8)
0xffff7ab2efb0   816  str lr, [jssp, #-8]!
0xffff7ab2efb4   820  ldr x17, pc+660 (addr 0x0000ffff7ab2f248)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2efb8   824  blr x17
0xffff7ab2efbc   828  ldr lr, [jssp], #8
0xffff7ab2efc0   832  ret
0xffff7ab2efc4   836  ldr x10, [x11]
0xffff7ab2efc8   840  and x0, x10, #0xfffffffffff00000
0xffff7ab2efcc   844  ldr x0, [x0, #8]
0xffff7ab2efd0   848  tbz w0, #6, #+0x18 (addr 0xffff7ab2efe8)
0xffff7ab2efd4   852  and x0, x1, #0xfffffffffff00000
0xffff7ab2efd8   856  ldr x0, [x0, #8]
0xffff7ab2efdc   860  movz x16, #0x58
0xffff7ab2efe0   864  tst x0, x16
0xffff7ab2efe4   868  b.eq #+0x68 (addr 0xffff7ab2f04c)
0xffff7ab2efe8   872  sub csp, jssp, #0x10 (16)
0xffff7ab2efec   876  stp x1, x11, [jssp, #-16]!
0xffff7ab2eff0   880  ubfx x16, x10, #8, #12
0xffff7ab2eff4   884  and x0, x10, #0xfffffffffff00000
0xffff7ab2eff8   888  add x0, x0, x16, lsl #2
0xffff7ab2effc   892  ubfx x1, x10, #3, #5
0xffff7ab2f000   896  ldr x11, [x0, #360]
0xffff7ab2f004   900  lsr x11, x11, x1
0xffff7ab2f008   904  tbz w11, #0, #+0x40 (addr 0xffff7ab2f048)
0xffff7ab2f00c   908  ldp x1, x11, [jssp], #16
0xffff7ab2f010   912  ldp x2, x0, [jssp], #16
0xffff7ab2f014   916  ldr x16, pc+572 (addr 0x0000ffff7ab2f250)    ;; external reference (store_buffer_top)
0xffff7ab2f018   920  ldr x10, [x16]
0xffff7ab2f01c   924  str x11, [x10], #8
0xffff7ab2f020   928  str x10, [x16]
0xffff7ab2f024   932  tst x10, #0x1ffff
0xffff7ab2f028   936  b.eq #+0x8 (addr 0xffff7ab2f030)
0xffff7ab2f02c   940  ret
0xffff7ab2f030   944  sub csp, jssp, #0x8 (8)
0xffff7ab2f034   948  str lr, [jssp, #-8]!
0xffff7ab2f038   952  ldr x17, pc+544 (addr 0x0000ffff7ab2f258)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2f03c   956  blr x17
0xffff7ab2f040   960  ldr lr, [jssp], #8
0xffff7ab2f044   964  ret
0xffff7ab2f048   968  ldp x1, x11, [jssp], #16
0xffff7ab2f04c   972  sub csp, jssp, #0x78 (120)
0xffff7ab2f050   976  stp x14, x15, [jssp, #-32]!
0xffff7ab2f054   980  stp x18, lr, [jssp, #16]
0xffff7ab2f058   984  stp x9, x11, [jssp, #-32]!
0xffff7ab2f05c   988  stp x12, x13, [jssp, #16]
0xffff7ab2f060   992  stp x5, x6, [jssp, #-32]!
0xffff7ab2f064   996  stp x7, x8, [jssp, #16]
0xffff7ab2f068  1000  stp x1, x3, [jssp, #-24]!
0xffff7ab2f06c  1004  str x4, [jssp, #16]
0xffff7ab2f070  1008  mov x0, x1
0xffff7ab2f074  1012  mov x1, x11
0xffff7ab2f078  1016  ldr x2, pc+488 (addr 0x0000ffff7ab2f260)    ;; external reference (isolate)
0xffff7ab2f07c  1020  ldr x16, pc+492 (addr 0x0000ffff7ab2f268)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2f080  1024  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2f084  1028  blr x16
0xffff7ab2f088  1032  ldp x4, x5, [jssp, #16]
0xffff7ab2f08c  1036  ldp x1, x3, [jssp], #32
0xffff7ab2f090  1040  ldp x8, x9, [jssp, #16]
0xffff7ab2f094  1044  ldp x6, x7, [jssp], #32
0xffff7ab2f098  1048  ldp x13, x14, [jssp, #16]
0xffff7ab2f09c  1052  ldp x11, x12, [jssp], #32
0xffff7ab2f0a0  1056  ldr lr, [jssp, #16]
0xffff7ab2f0a4  1060  ldp x15, x18, [jssp], #24
0xffff7ab2f0a8  1064  ldp x2, x0, [jssp], #16
0xffff7ab2f0ac  1068  ldr x16, pc+452 (addr 0x0000ffff7ab2f270)    ;; external reference (store_buffer_top)
0xffff7ab2f0b0  1072  ldr x10, [x16]
0xffff7ab2f0b4  1076  str x11, [x10], #8
0xffff7ab2f0b8  1080  str x10, [x16]
0xffff7ab2f0bc  1084  tst x10, #0x1ffff
0xffff7ab2f0c0  1088  b.eq #+0x8 (addr 0xffff7ab2f0c8)
0xffff7ab2f0c4  1092  ret
0xffff7ab2f0c8  1096  sub csp, jssp, #0x8 (8)
0xffff7ab2f0cc  1100  str lr, [jssp, #-8]!
0xffff7ab2f0d0  1104  ldr x17, pc+424 (addr 0x0000ffff7ab2f278)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab2f0d4  1108  blr x17
0xffff7ab2f0d8  1112  ldr lr, [jssp], #8
0xffff7ab2f0dc  1116  ret
0xffff7ab2f0e0  1120  and x10, x1, #0xfffffffffff00000
0xffff7ab2f0e4  1124  ldr x0, [x10, #104]
0xffff7ab2f0e8  1128  subs x0, x0, #0x1 (1)
0xffff7ab2f0ec  1132  str x0, [x10, #104]
0xffff7ab2f0f0  1136  b.mi #+0x84 (addr 0xffff7ab2f174)
0xffff7ab2f0f4  1140  ubfx x16, x1, #8, #12
0xffff7ab2f0f8  1144  and x10, x1, #0xfffffffffff00000
0xffff7ab2f0fc  1148  add x10, x10, x16, lsl #2
0xffff7ab2f100  1152  ubfx x0, x1, #3, #5
0xffff7ab2f104  1156  ldr x10, [x10, #360]
0xffff7ab2f108  1160  lsr x10, x10, x0
0xffff7ab2f10c  1164  tbz w10, #0, #+0x8 (addr 0xffff7ab2f114)
0xffff7ab2f110  1168  tbnz w10, #1, #+0xc (addr 0xffff7ab2f11c)
0xffff7ab2f114  1172  ldp x2, x0, [jssp], #16
0xffff7ab2f118  1176  ret
0xffff7ab2f11c  1180  ldr x10, [x11]
0xffff7ab2f120  1184  and x0, x10, #0xfffffffffff00000
0xffff7ab2f124  1188  ldr x0, [x0, #8]
0xffff7ab2f128  1192  tbz w0, #6, #+0x18 (addr 0xffff7ab2f140)
0xffff7ab2f12c  1196  and x0, x1, #0xfffffffffff00000
0xffff7ab2f130  1200  ldr x0, [x0, #8]
0xffff7ab2f134  1204  movz x16, #0x58
0xffff7ab2f138  1208  tst x0, x16
0xffff7ab2f13c  1212  b.eq #+0x38 (addr 0xffff7ab2f174)
0xffff7ab2f140  1216  sub csp, jssp, #0x10 (16)
0xffff7ab2f144  1220  stp x1, x11, [jssp, #-16]!
0xffff7ab2f148  1224  ubfx x16, x10, #8, #12
0xffff7ab2f14c  1228  and x0, x10, #0xfffffffffff00000
0xffff7ab2f150  1232  add x0, x0, x16, lsl #2
0xffff7ab2f154  1236  ubfx x1, x10, #3, #5
0xffff7ab2f158  1240  ldr x11, [x0, #360]
0xffff7ab2f15c  1244  lsr x11, x11, x1
0xffff7ab2f160  1248  tbz w11, #0, #+0x10 (addr 0xffff7ab2f170)
0xffff7ab2f164  1252  ldp x1, x11, [jssp], #16
0xffff7ab2f168  1256  ldp x2, x0, [jssp], #16
0xffff7ab2f16c  1260  ret
0xffff7ab2f170  1264  ldp x1, x11, [jssp], #16
0xffff7ab2f174  1268  sub csp, jssp, #0x78 (120)
0xffff7ab2f178  1272  stp x14, x15, [jssp, #-32]!
0xffff7ab2f17c  1276  stp x18, lr, [jssp, #16]
0xffff7ab2f180  1280  stp x9, x11, [jssp, #-32]!
0xffff7ab2f184  1284  stp x12, x13, [jssp, #16]
0xffff7ab2f188  1288  stp x5, x6, [jssp, #-32]!
0xffff7ab2f18c  1292  stp x7, x8, [jssp, #16]
0xffff7ab2f190  1296  stp x1, x3, [jssp, #-24]!
0xffff7ab2f194  1300  str x4, [jssp, #16]
0xffff7ab2f198  1304  mov x0, x1
0xffff7ab2f19c  1308  mov x1, x11
0xffff7ab2f1a0  1312  ldr x2, pc+224 (addr 0x0000ffff7ab2f280)    ;; external reference (isolate)
0xffff7ab2f1a4  1316  ldr x16, pc+228 (addr 0x0000ffff7ab2f288)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab2f1a8  1320  and csp, jssp, #0xfffffffffffffff0
0xffff7ab2f1ac  1324  blr x16
0xffff7ab2f1b0  1328  ldp x4, x5, [jssp, #16]
0xffff7ab2f1b4  1332  ldp x1, x3, [jssp], #32
0xffff7ab2f1b8  1336  ldp x8, x9, [jssp, #16]
0xffff7ab2f1bc  1340  ldp x6, x7, [jssp], #32
0xffff7ab2f1c0  1344  ldp x13, x14, [jssp, #16]
0xffff7ab2f1c4  1348  ldp x11, x12, [jssp], #32
0xffff7ab2f1c8  1352  ldr lr, [jssp, #16]
0xffff7ab2f1cc  1356  ldp x15, x18, [jssp], #24
0xffff7ab2f1d0  1360  ldp x2, x0, [jssp], #16
0xffff7ab2f1d4  1364  ret
0xffff7ab2f1d8  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab2f1dc  1372  d63f03e0       constant
0xffff7ab2f1e0  1376  09abe8c0       constant
0xffff7ab2f1e4  1380  00000000       constant
0xffff7ab2f1e8  1384  7ab064c0       constant
0xffff7ab2f1ec  1388  0000ffff       constant
0xffff7ab2f1f0  1392  09abe8c0       constant
0xffff7ab2f1f4  1396  00000000       constant
0xffff7ab2f1f8  1400  7ab064c0       constant
0xffff7ab2f1fc  1404  0000ffff       constant
0xffff7ab2f200  1408  09abe8c0       constant
0xffff7ab2f204  1412  00000000       constant
0xffff7ab2f208  1416  7ab064c0       constant
0xffff7ab2f20c  1420  0000ffff       constant
0xffff7ab2f210  1424  09abd2d0       constant
0xffff7ab2f214  1428  00000000       constant
0xffff7ab2f218  1432  00c2d958       constant
0xffff7ab2f21c  1436  00000000       constant
0xffff7ab2f220  1440  09abe8c0       constant
0xffff7ab2f224  1444  00000000       constant
0xffff7ab2f228  1448  7ab064c0       constant
0xffff7ab2f22c  1452  0000ffff       constant
0xffff7ab2f230  1456  09abd2d0       constant
0xffff7ab2f234  1460  00000000       constant
0xffff7ab2f238  1464  00c2d958       constant
0xffff7ab2f23c  1468  00000000       constant
0xffff7ab2f240  1472  09abe8c0       constant
0xffff7ab2f244  1476  00000000       constant
0xffff7ab2f248  1480  7ab064c0       constant
0xffff7ab2f24c  1484  0000ffff       constant
0xffff7ab2f250  1488  09abe8c0       constant
0xffff7ab2f254  1492  00000000       constant
0xffff7ab2f258  1496  7ab064c0       constant
0xffff7ab2f25c  1500  0000ffff       constant
0xffff7ab2f260  1504  09abd2d0       constant
0xffff7ab2f264  1508  00000000       constant
0xffff7ab2f268  1512  00c2d958       constant
0xffff7ab2f26c  1516  00000000       constant
0xffff7ab2f270  1520  09abe8c0       constant
0xffff7ab2f274  1524  00000000       constant
0xffff7ab2f278  1528  7ab064c0       constant
0xffff7ab2f27c  1532  0000ffff       constant
0xffff7ab2f280  1536  09abd2d0       constant
0xffff7ab2f284  1540  00000000       constant
0xffff7ab2f288  1544  00c2d958       constant
0xffff7ab2f28c  1548  00000000       constant


RelocInfo (size = 59)
0xffff7ab2ec88  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2ecac  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2ed24  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2ed48  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2ed88  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2edac  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2edec  external reference (isolate)  (0x9abd2d0)
0xffff7ab2edf0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2ee20  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2ee44  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2eef4  external reference (isolate)  (0x9abd2d0)
0xffff7ab2eef8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2ef90  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2efb4  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2f014  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2f038  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2f078  external reference (isolate)  (0x9abd2d0)
0xffff7ab2f07c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2f0ac  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab2f0d0  code target (STUB)  (0xffff7ab064c0)
0xffff7ab2f1a0  external reference (isolate)  (0x9abd2d0)
0xffff7ab2f1a4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab2f1d8  constant pool (size 184)


kind = STUB
major_key = FastCloneShallowObjectStub
name = FastCloneShallowObjectStub
compiler = crankshaft
Instructions (size = 493)
0xffff7ab2f300     0  ldur x4, [x3, #47]
0xffff7ab2f304     4  tbnz w2, #0, #+0xb0 (addr 0xffff7ab2f3b4)
0xffff7ab2f308     8  asr x6, x2, #32
0xffff7ab2f30c    12  add x5, x4, #0x17 (23)
0xffff7ab2f310    16  ldr x7, [x5, w6, sxtw #3]
0xffff7ab2f314    20  ldr x4, pc+340 (addr 0x0000ffff7ab2f468)    ;; object: 0x20d04241 <undefined>
0xffff7ab2f318    24  cmp x7, x4
0xffff7ab2f31c    28  b.eq #+0x94 (addr 0xffff7ab2f3b0)
0xffff7ab2f320    32  ldur x4, [x7, #7]
0xffff7ab2f324    36  ldur x5, [x4, #-1]
0xffff7ab2f328    40  ldrb w6, [x5, #7]
0xffff7ab2f32c    44  cmp w6, #0x7 (7)
0xffff7ab2f330    48  b.ne #+0x80 (addr 0xffff7ab2f3b0)
0xffff7ab2f334    52  movz x1, #0xe2c0
0xffff7ab2f338    56  movk x1, #0x9ab, lsl #16
0xffff7ab2f33c    60  ldp x2, x0, [x1]
0xffff7ab2f340    64  adds x16, x2, #0x48 (72)
0xffff7ab2f344    68  ccmp x16, x0, #nzCv, lo
0xffff7ab2f348    72  b.hi #+0xb4 (addr 0xffff7ab2f3fc)
0xffff7ab2f34c    76  str x16, [x1]
0xffff7ab2f350    80  orr x2, x2, #0x1
0xffff7ab2f354    84  stur x5, [x2, #-1]
0xffff7ab2f358    88  ldur x0, [x4, #7]
0xffff7ab2f35c    92  stur x0, [x2, #7]
0xffff7ab2f360    96  ldur x0, [x4, #15]
0xffff7ab2f364   100  stur x0, [x2, #15]
0xffff7ab2f368   104  ldur x0, [x4, #23]
0xffff7ab2f36c   108  stur x0, [x2, #23]
0xffff7ab2f370   112  ldur x0, [x4, #31]
0xffff7ab2f374   116  stur x0, [x2, #31]
0xffff7ab2f378   120  ldur x0, [x4, #39]
0xffff7ab2f37c   124  stur x0, [x2, #39]
0xffff7ab2f380   128  ldur x0, [x4, #47]
0xffff7ab2f384   132  stur x0, [x2, #47]
0xffff7ab2f388   136  add x0, x2, #0x38 (56)
0xffff7ab2f38c   140  ldr x1, pc+228 (addr 0x0000ffff7ab2f470)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab2f390   144  stur x1, [x0, #-1]
0xffff7ab2f394   148  stur x7, [x0, #7]
0xffff7ab2f398   152  ldur w0, [x7, #35]
0xffff7ab2f39c   156  add w0, w0, #0x1 (1)
0xffff7ab2f3a0   160  lsl x0, x0, #32
0xffff7ab2f3a4   164  stur x0, [x7, #31]
0xffff7ab2f3a8   168  mov x0, x2
0xffff7ab2f3ac   172  ret
0xffff7ab2f3b0   176  b #+0xe0 (addr 0xffff7ab2f490)
0xffff7ab2f3b4   180  sub csp, jssp, #0x10 (16)
0xffff7ab2f3b8   184  stp fp, lr, [jssp, #-16]!
0xffff7ab2f3bc   188  movz fp, #0xa00000000
0xffff7ab2f3c0   192  sub csp, jssp, #0x8 (8)
0xffff7ab2f3c4   196  str fp, [jssp, #-8]!
0xffff7ab2f3c8   200  add fp, jssp, #0x8 (8)
0xffff7ab2f3cc   204  ldur x16, [x2, #-1]
0xffff7ab2f3d0   208  ldr x17, [x26, #120]
0xffff7ab2f3d4   212  cmp x16, x17
0xffff7ab2f3d8   216  b.ne #+0xc8 (addr 0xffff7ab2f4a0)
0xffff7ab2f3dc   220  ldur d29, [x2, #7]
0xffff7ab2f3e0   224  fcvtzs w6, d29
0xffff7ab2f3e4   228  scvtf d0, w6
0xffff7ab2f3e8   232  fcmp d29, d0
0xffff7ab2f3ec   236  b.ne #+0xb4 (addr 0xffff7ab2f4a0)
0xffff7ab2f3f0   240  ldr lr, [jssp, #16]
0xffff7ab2f3f4   244  ldp xzr, fp, [jssp], #24
0xffff7ab2f3f8   248  b #-0xec (addr 0xffff7ab2f30c)
0xffff7ab2f3fc   252  sub csp, jssp, #0x10 (16)
0xffff7ab2f400   256  stp fp, lr, [jssp, #-16]!
0xffff7ab2f404   260  movz fp, #0xa00000000
0xffff7ab2f408   264  sub csp, jssp, #0x8 (8)
0xffff7ab2f40c   268  str fp, [jssp, #-8]!
0xffff7ab2f410   272  add fp, jssp, #0x8 (8)
0xffff7ab2f414   276  movz x2, #0x0
0xffff7ab2f418   280  mov x16, lr
0xffff7ab2f41c   284  ldr x17, pc+92 (addr 0x0000ffff7ab2f478)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab2f420   288  blr x17
0xffff7ab2f424   292  movz x0, #0x4800000000
0xffff7ab2f428   296  movz x10, #0x0
0xffff7ab2f42c   300  sub csp, jssp, #0x10 (16)
0xffff7ab2f430   304  stp x10, x0, [jssp, #-16]!
0xffff7ab2f434   308  movz x0, #0x2
0xffff7ab2f438   312  movz x1, #0x5b88
0xffff7ab2f43c   316  movk x1, #0xe2, lsl #16
0xffff7ab2f440   320  ldr x16, pc+64 (addr 0x0000ffff7ab2f480)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab2f444   324  blr x16
0xffff7ab2f448   328  str x0, [jssp, #16]
0xffff7ab2f44c   332  ldr x16, pc+60 (addr 0x0000ffff7ab2f488)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab2f450   336  blr x16
0xffff7ab2f454   340  ldr lr, [jssp, #16]
0xffff7ab2f458   344  ldp xzr, fp, [jssp], #24
0xffff7ab2f45c   348  b #-0x108 (addr 0xffff7ab2f354)
0xffff7ab2f460   352  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0xffff7ab2f464   356  d63f03e0       constant
0xffff7ab2f468   360  20d04241       constant
0xffff7ab2f46c   364  00000000       constant
0xffff7ab2f470   368  4ec05d81       constant
0xffff7ab2f474   372  00000000       constant
0xffff7ab2f478   376  7ab06820       constant
0xffff7ab2f47c   380  0000ffff       constant
0xffff7ab2f480   384  7ab06260       constant
0xffff7ab2f484   388  0000ffff       constant
0xffff7ab2f488   392  7ab068e0       constant
0xffff7ab2f48c   396  0000ffff       constant
0xffff7ab2f490   400  movz x16, #0x0
0xffff7ab2f494   404  sub csp, jssp, #0x10 (16)
0xffff7ab2f498   408  stp fp, lr, [jssp, #-16]!
0xffff7ab2f49c   412  bl #+0xc (addr 0xffff7ab2f4a8)
0xffff7ab2f4a0   416  movz x16, #0x8
0xffff7ab2f4a4   420  bl #+0x14 (addr 0xffff7ab2f4b8)
0xffff7ab2f4a8   424  movz x17, #0xa00000000
0xffff7ab2f4ac   428  sub csp, jssp, #0x10 (16)
0xffff7ab2f4b0   432  stp x17, cp, [jssp, #-16]!
0xffff7ab2f4b4   436  add fp, jssp, #0x10 (16)
0xffff7ab2f4b8   440  ldr x17, pc+24 (addr 0x0000ffff7ab2f4d0)    ;; lazy deoptimization bailout 0
0xffff7ab2f4bc   444  add x17, x17, x16
0xffff7ab2f4c0   448  br x17
0xffff7ab2f4c4   452  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab2f4c8   456  d63f03e0       constant
0xffff7ab2f4cc   460  d503201f       constant
0xffff7ab2f4d0   464  7a906000       constant
0xffff7ab2f4d4   468  0000ffff       constant


Safepoints (size = 21)
0xffff7ab2f448   328  000 | x2 | x4 | x5 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 25)
0xffff7ab2f314  embedded object  (0x20d04241 <undefined>)
0xffff7ab2f38c  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab2f41c  code target (STUB)  (0xffff7ab06820)
0xffff7ab2f440  code target (STUB)  (0xffff7ab06260)
0xffff7ab2f44c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab2f460  constant pool (size 48)
0xffff7ab2f4b8  runtime entry
0xffff7ab2f4c4  constant pool (size 20)


kind = STORE_IC
major_key = VectorStoreICTrampolineStub
ic_state = GENERIC
extra_ic_state = STRICT
name = VectorStoreICTrampolineStub
compiler = unknown
Instructions (size = 440)
0xffff7ab2f560     0  ldur x3, [fp, #-16]
0xffff7ab2f564     4  ldur x3, [x3, #31]
0xffff7ab2f568     8  ldur x3, [x3, #87]
0xffff7ab2f56c    12  add x5, x3, x4, asr #29
0xffff7ab2f570    16  ldur x5, [x5, #15]
0xffff7ab2f574    20  tbz w1, #0, #+0x174 (addr 0xffff7ab2f6e8)
0xffff7ab2f578    24  ldur x6, [x1, #-1]
0xffff7ab2f57c    28  ldur x7, [x5, #7]
0xffff7ab2f580    32  cmp x7, x6
0xffff7ab2f584    36  b.ne #+0x14 (addr 0xffff7ab2f598)
0xffff7ab2f588    40  add x5, x3, x4, asr #29
0xffff7ab2f58c    44  ldur x5, [x5, #23]
0xffff7ab2f590    48  add x5, x5, #0x5f (95)
0xffff7ab2f594    52  br x5
0xffff7ab2f598    56  ldur x7, [x5, #-1]
0xffff7ab2f59c    60  ldr x16, [x26, #224]
0xffff7ab2f5a0    64  cmp x7, x16
0xffff7ab2f5a4    68  b.ne #+0x5c (addr 0xffff7ab2f600)
0xffff7ab2f5a8    72  ldur x7, [x5, #15]
0xffff7ab2f5ac    76  ldur x7, [x7, #7]
0xffff7ab2f5b0    80  cmp x6, x7
0xffff7ab2f5b4    84  b.ne #+0x10 (addr 0xffff7ab2f5c4)
0xffff7ab2f5b8    88  ldur x5, [x5, #23]
0xffff7ab2f5bc    92  add x5, x5, #0x5f (95)
0xffff7ab2f5c0    96  br x5
0xffff7ab2f5c4   100  ldur x8, [x5, #7]
0xffff7ab2f5c8   104  add x8, x5, x8, asr #29
0xffff7ab2f5cc   108  add x8, x8, #0xf (15)
0xffff7ab2f5d0   112  add x5, x5, #0x1f (31)
0xffff7ab2f5d4   116  ldr x7, [x5]
0xffff7ab2f5d8   120  ldur x7, [x7, #7]
0xffff7ab2f5dc   124  cmp x6, x7
0xffff7ab2f5e0   128  b.ne #+0x10 (addr 0xffff7ab2f5f0)
0xffff7ab2f5e4   132  ldr x5, [x5, #8]
0xffff7ab2f5e8   136  add x5, x5, #0x5f (95)
0xffff7ab2f5ec   140  br x5
0xffff7ab2f5f0   144  add x5, x5, #0x10 (16)
0xffff7ab2f5f4   148  cmp x5, x8
0xffff7ab2f5f8   152  b.lt #-0x24 (addr 0xffff7ab2f5d4)
0xffff7ab2f5fc   156  b #+0xcc (addr 0xffff7ab2f6c8)
0xffff7ab2f600   160  ldr x16, [x26, #2400]
0xffff7ab2f604   164  cmp x5, x16
0xffff7ab2f608   168  b.ne #+0xc0 (addr 0xffff7ab2f6c8)
0xffff7ab2f60c   172  tbz w1, #0, #+0xbc (addr 0xffff7ab2f6c8)
0xffff7ab2f610   176  ldur x5, [x2, #7]
0xffff7ab2f614   180  ldur x6, [x1, #-1]
0xffff7ab2f618   184  add x5, x5, x6
0xffff7ab2f61c   188  movz x16, #0x6902
0xffff7ab2f620   192  eor x5, x5, x16
0xffff7ab2f624   196  ubfx x5, x5, #2, #11
0xffff7ab2f628   200  add x8, x5, x5, lsl #1
0xffff7ab2f62c   204  ldr x6, pc+204 (addr 0x0000ffff7ab2f6f8)    ;; external reference (StubCache::primary_->key)
0xffff7ab2f630   208  add x6, x6, x8, lsl #3
0xffff7ab2f634   212  ldr x7, [x6]
0xffff7ab2f638   216  cmp x2, x7
0xffff7ab2f63c   220  b.ne #+0x34 (addr 0xffff7ab2f670)
0xffff7ab2f640   224  ldr x7, [x6, #16]
0xffff7ab2f644   228  ldur x8, [x1, #-1]
0xffff7ab2f648   232  cmp x7, x8
0xffff7ab2f64c   236  b.ne #+0x24 (addr 0xffff7ab2f670)
0xffff7ab2f650   240  ldr x6, [x6, #8]
0xffff7ab2f654   244  ldur w7, [x6, #63]
0xffff7ab2f658   248  and w7, w7, #0xffffffc7
0xffff7ab2f65c   252  movz w16, #0x6902
0xffff7ab2f660   256  cmp w7, w16
0xffff7ab2f664   260  b.ne #+0xc (addr 0xffff7ab2f670)
0xffff7ab2f668   264  add x6, x6, #0x5f (95)
0xffff7ab2f66c   268  br x6
0xffff7ab2f670   272  sub x5, x5, x2, lsr #2
0xffff7ab2f674   276  movz x16, #0x1a40
0xffff7ab2f678   280  add x5, x5, x16
0xffff7ab2f67c   284  and x5, x5, #0x1ff
0xffff7ab2f680   288  add x8, x5, x5, lsl #1
0xffff7ab2f684   292  ldr x6, pc+124 (addr 0x0000ffff7ab2f700)    ;; external reference (StubCache::secondary_->key)
0xffff7ab2f688   296  add x6, x6, x8, lsl #3
0xffff7ab2f68c   300  ldr x7, [x6]
0xffff7ab2f690   304  cmp x2, x7
0xffff7ab2f694   308  b.ne #+0x34 (addr 0xffff7ab2f6c8)
0xffff7ab2f698   312  ldr x7, [x6, #16]
0xffff7ab2f69c   316  ldur x8, [x1, #-1]
0xffff7ab2f6a0   320  cmp x7, x8
0xffff7ab2f6a4   324  b.ne #+0x24 (addr 0xffff7ab2f6c8)
0xffff7ab2f6a8   328  ldr x6, [x6, #8]
0xffff7ab2f6ac   332  ldur w7, [x6, #63]
0xffff7ab2f6b0   336  and w7, w7, #0xffffffc7
0xffff7ab2f6b4   340  movz w16, #0x6902
0xffff7ab2f6b8   344  cmp w7, w16
0xffff7ab2f6bc   348  b.ne #+0xc (addr 0xffff7ab2f6c8)
0xffff7ab2f6c0   352  add x6, x6, #0x5f (95)
0xffff7ab2f6c4   356  br x6
0xffff7ab2f6c8   360  sub csp, jssp, #0x28 (40)
0xffff7ab2f6cc   364  stp x4, x0, [jssp, #-32]!
0xffff7ab2f6d0   368  stp x2, x1, [jssp, #16]
0xffff7ab2f6d4   372  str x3, [jssp, #-8]!
0xffff7ab2f6d8   376  movz x0, #0x5
0xffff7ab2f6dc   380  ldr x1, pc+44 (addr 0x0000ffff7ab2f708)    ;; external reference (Runtime::StoreIC_Miss)
0xffff7ab2f6e0   384  ldr x16, pc+48 (addr 0x0000ffff7ab2f710)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab2f6e4   388  br x16
0xffff7ab2f6e8   392  ldr x6, [x26, #120]
0xffff7ab2f6ec   396  b #-0x170 (addr 0xffff7ab2f57c)
0xffff7ab2f6f0   400  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7ab2f6f4   404  d63f03e0       constant
0xffff7ab2f6f8   408  09ad8950       constant
0xffff7ab2f6fc   412  00000000       constant
0xffff7ab2f700   416  09ae4950       constant
0xffff7ab2f704   420  00000000       constant
0xffff7ab2f708   424  00c87f60       constant
0xffff7ab2f70c   428  00000000       constant
0xffff7ab2f710   432  7ab06060       constant
0xffff7ab2f714   436  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab2f62c  external reference (StubCache::primary_->key)  (0x9ad8950)
0xffff7ab2f684  external reference (StubCache::secondary_->key)  (0x9ae4950)
0xffff7ab2f6dc  external reference (Runtime::StoreIC_Miss)  (0xc87f60)
0xffff7ab2f6e0  code target (STUB)  (0xffff7ab06060)
0xffff7ab2f6f0  constant pool (size 40)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 397)
0xffff7ab30360     0  movz x2, #0xe2c0
0xffff7ab30364     4  movk x2, #0x9ab, lsl #16
0xffff7ab30368     8  ldp x3, x0, [x2]
0xffff7ab3036c    12  adds x16, x3, #0x78 (120)
0xffff7ab30370    16  ccmp x16, x0, #nzCv, lo
0xffff7ab30374    20  b.hi #+0x84 (addr 0xffff7ab303f8)
0xffff7ab30378    24  str x16, [x2]
0xffff7ab3037c    28  orr x3, x3, #0x1
0xffff7ab30380    32  ldr x0, pc+232 (addr 0x0000ffff7ab30468)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab30384    36  stur x0, [x3, #-1]
0xffff7ab30388    40  movz x0, #0xd00000000
0xffff7ab3038c    44  stur x0, [x3, #7]
0xffff7ab30390    48  stur x1, [x3, #15]
0xffff7ab30394    52  stur cp, [x3, #23]
0xffff7ab30398    56  ldr x0, pc+216 (addr 0x0000ffff7ab30470)    ;; object: 0x20d04519 <the hole>
0xffff7ab3039c    60  stur x0, [x3, #31]
0xffff7ab303a0    64  ldur x0, [cp, #39]
0xffff7ab303a4    68  stur x0, [x3, #39]
0xffff7ab303a8    72  ldr x0, pc+208 (addr 0x0000ffff7ab30478)    ;; object: 0x20d04241 <undefined>
0xffff7ab303ac    76  stur x0, [x3, #47]
0xffff7ab303b0    80  ldr x0, pc+208 (addr 0x0000ffff7ab30480)    ;; object: 0x20d04241 <undefined>
0xffff7ab303b4    84  stur x0, [x3, #55]
0xffff7ab303b8    88  ldr x0, pc+208 (addr 0x0000ffff7ab30488)    ;; object: 0x20d04241 <undefined>
0xffff7ab303bc    92  stur x0, [x3, #63]
0xffff7ab303c0    96  ldr x0, pc+208 (addr 0x0000ffff7ab30490)    ;; object: 0x20d04241 <undefined>
0xffff7ab303c4   100  stur x0, [x3, #71]
0xffff7ab303c8   104  ldr x0, pc+208 (addr 0x0000ffff7ab30498)    ;; object: 0x20d04241 <undefined>
0xffff7ab303cc   108  stur x0, [x3, #79]
0xffff7ab303d0   112  ldr x0, pc+208 (addr 0x0000ffff7ab304a0)    ;; object: 0x20d04241 <undefined>
0xffff7ab303d4   116  stur x0, [x3, #87]
0xffff7ab303d8   120  ldr x0, pc+208 (addr 0x0000ffff7ab304a8)    ;; object: 0x20d04241 <undefined>
0xffff7ab303dc   124  stur x0, [x3, #95]
0xffff7ab303e0   128  ldr x0, pc+208 (addr 0x0000ffff7ab304b0)    ;; object: 0x20d04241 <undefined>
0xffff7ab303e4   132  stur x0, [x3, #103]
0xffff7ab303e8   136  ldr x0, pc+208 (addr 0x0000ffff7ab304b8)    ;; object: 0x20d04241 <undefined>
0xffff7ab303ec   140  stur x0, [x3, #111]
0xffff7ab303f0   144  mov x0, x3
0xffff7ab303f4   148  ret
0xffff7ab303f8   152  sub csp, jssp, #0x10 (16)
0xffff7ab303fc   156  stp fp, lr, [jssp, #-16]!
0xffff7ab30400   160  movz fp, #0xa00000000
0xffff7ab30404   164  sub csp, jssp, #0x8 (8)
0xffff7ab30408   168  str fp, [jssp, #-8]!
0xffff7ab3040c   172  add fp, jssp, #0x8 (8)
0xffff7ab30410   176  movz x3, #0x0
0xffff7ab30414   180  mov x16, lr
0xffff7ab30418   184  ldr x17, pc+168 (addr 0x0000ffff7ab304c0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab3041c   188  blr x17
0xffff7ab30420   192  movz x0, #0x7800000000
0xffff7ab30424   196  movz x10, #0x0
0xffff7ab30428   200  sub csp, jssp, #0x10 (16)
0xffff7ab3042c   204  stp x10, x0, [jssp, #-16]!
0xffff7ab30430   208  movz x0, #0x2
0xffff7ab30434   212  movz x1, #0x5b88
0xffff7ab30438   216  movk x1, #0xe2, lsl #16
0xffff7ab3043c   220  ldr x16, pc+140 (addr 0x0000ffff7ab304c8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab30440   224  blr x16
0xffff7ab30444   228  str x0, [jssp, #24]
0xffff7ab30448   232  ldr x16, pc+136 (addr 0x0000ffff7ab304d0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab3044c   236  blr x16
0xffff7ab30450   240  ldr lr, [jssp, #16]
0xffff7ab30454   244  ldp xzr, fp, [jssp], #24
0xffff7ab30458   248  b #-0xd8 (addr 0xffff7ab30380)
0xffff7ab3045c   252  580003df       constant pool begin (num_const = 30)    ;; constant pool
0xffff7ab30460   256  d63f03e0       constant
0xffff7ab30464   260  d503201f       constant
0xffff7ab30468   264  4ec06149       constant
0xffff7ab3046c   268  00000000       constant
0xffff7ab30470   272  20d04519       constant
0xffff7ab30474   276  00000000       constant
0xffff7ab30478   280  20d04241       constant
0xffff7ab3047c   284  00000000       constant
0xffff7ab30480   288  20d04241       constant
0xffff7ab30484   292  00000000       constant
0xffff7ab30488   296  20d04241       constant
0xffff7ab3048c   300  00000000       constant
0xffff7ab30490   304  20d04241       constant
0xffff7ab30494   308  00000000       constant
0xffff7ab30498   312  20d04241       constant
0xffff7ab3049c   316  00000000       constant
0xffff7ab304a0   320  20d04241       constant
0xffff7ab304a4   324  00000000       constant
0xffff7ab304a8   328  20d04241       constant
0xffff7ab304ac   332  00000000       constant
0xffff7ab304b0   336  20d04241       constant
0xffff7ab304b4   340  00000000       constant
0xffff7ab304b8   344  20d04241       constant
0xffff7ab304bc   348  00000000       constant
0xffff7ab304c0   352  7ab06820       constant
0xffff7ab304c4   356  0000ffff       constant
0xffff7ab304c8   360  7ab06260       constant
0xffff7ab304cc   364  0000ffff       constant
0xffff7ab304d0   368  7ab068e0       constant
0xffff7ab304d4   372  0000ffff       constant


Safepoints (size = 21)
0xffff7ab30444   228  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 20)
0xffff7ab30380  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab30398  embedded object  (0x20d04519 <the hole>)
0xffff7ab303a8  embedded object  (0x20d04241 <undefined>)
0xffff7ab303b0  embedded object  (0x20d04241 <undefined>)
0xffff7ab303b8  embedded object  (0x20d04241 <undefined>)
0xffff7ab303c0  embedded object  (0x20d04241 <undefined>)
0xffff7ab303c8  embedded object  (0x20d04241 <undefined>)
0xffff7ab303d0  embedded object  (0x20d04241 <undefined>)
0xffff7ab303d8  embedded object  (0x20d04241 <undefined>)
0xffff7ab303e0  embedded object  (0x20d04241 <undefined>)
0xffff7ab303e8  embedded object  (0x20d04241 <undefined>)
0xffff7ab30418  code target (STUB)  (0xffff7ab06820)
0xffff7ab3043c  code target (STUB)  (0xffff7ab06260)
0xffff7ab30448  code target (STUB)  (0xffff7ab068e0)
0xffff7ab3045c  constant pool (size 124)


kind = STUB
major_key = FastNewClosureStub
name = FastNewClosureStub
compiler = crankshaft
Instructions (size = 773)
0xffff7ab30560     0  movz x1, #0xe2c0
0xffff7ab30564     4  movk x1, #0x9ab, lsl #16
0xffff7ab30568     8  ldp x3, x0, [x1]
0xffff7ab3056c    12  adds x16, x3, #0x48 (72)
0xffff7ab30570    16  ccmp x16, x0, #nzCv, lo
0xffff7ab30574    20  b.hi #+0x1bc (addr 0xffff7ab30730)
0xffff7ab30578    24  str x16, [x1]
0xffff7ab3057c    28  orr x3, x3, #0x1
0xffff7ab30580    32  ldur x0, [cp, #39]
0xffff7ab30584    36  movz x16, #0x297
0xffff7ab30588    40  ldr x1, [x0, x16]
0xffff7ab3058c    44  stur x1, [x3, #-1]
0xffff7ab30590    48  ldr x1, pc+528 (addr 0x0000ffff7ab307a0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab30594    52  stur x1, [x3, #7]
0xffff7ab30598    56  ldr x1, pc+528 (addr 0x0000ffff7ab307a8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab3059c    60  stur x1, [x3, #15]
0xffff7ab305a0    64  ldr x1, pc+528 (addr 0x0000ffff7ab307b0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab305a4    68  stur x1, [x3, #47]
0xffff7ab305a8    72  ldr x1, pc+528 (addr 0x0000ffff7ab307b8)    ;; object: 0x20d04519 <the hole>
0xffff7ab305ac    76  stur x1, [x3, #23]
0xffff7ab305b0    80  stur x2, [x3, #31]
0xffff7ab305b4    84  stur cp, [x3, #39]
0xffff7ab305b8    88  ldur x1, [x2, #23]
0xffff7ab305bc    92  movz x4, #0x0
0xffff7ab305c0    96  cmp x1, x4
0xffff7ab305c4   100  b.eq #+0x150 (addr 0xffff7ab30714)
0xffff7ab305c8   104  ldur w4, [x1, #11]
0xffff7ab305cc   108  subs w4, w4, #0x4 (4)
0xffff7ab305d0   112  b.vs #+0x230 (addr 0xffff7ab30800)
0xffff7ab305d4   116  mov x5, x4
0xffff7ab305d8   120  cmp w5, #0x1 (1)
0xffff7ab305dc   124  b.lt #+0xb4 (addr 0xffff7ab30690)
0xffff7ab305e0   128  add x4, x1, #0xf (15)
0xffff7ab305e4   132  ldr x6, [x4, w5, sxtw #3]
0xffff7ab305e8   136  ldur x4, [x6, #7]
0xffff7ab305ec   140  add x6, x1, #0x27 (39)
0xffff7ab305f0   144  ldr x7, [x6, w5, sxtw #3]
0xffff7ab305f4   148  add x6, x1, #0x17 (23)
0xffff7ab305f8   152  ldr x8, [x6, w5, sxtw #3]
0xffff7ab305fc   156  ldur x6, [x8, #7]
0xffff7ab30600   160  cmp x0, x4
0xffff7ab30604   164  b.ne #+0x1c (addr 0xffff7ab30620)
0xffff7ab30608   168  mov x4, #0xffffffff00000000
0xffff7ab3060c   172  cmp x7, x4
0xffff7ab30610   176  b.ne #+0x10 (addr 0xffff7ab30620)
0xffff7ab30614   180  movz x4, #0x0
0xffff7ab30618   184  cmp x6, x4
0xffff7ab3061c   188  b.ne #+0xc (addr 0xffff7ab30628)
0xffff7ab30620   192  sub w5, w5, #0x4 (4)
0xffff7ab30624   196  b #-0x4c (addr 0xffff7ab305d8)
0xffff7ab30628   200  add x4, x1, #0x1f (31)
0xffff7ab3062c   204  ldr x7, [x4, w5, sxtw #3]
0xffff7ab30630   208  ldur x7, [x7, #7]
0xffff7ab30634   212  movz x4, #0x0
0xffff7ab30638   216  cmp x7, x4
0xffff7ab3063c   220  b.eq #+0x50 (addr 0xffff7ab3068c)
0xffff7ab30640   224  add x4, x6, #0x5f (95)
0xffff7ab30644   228  stur x4, [x3, #55]
0xffff7ab30648   232  stur x7, [x3, #47]
0xffff7ab3064c   236  movz x16, #0x557
0xffff7ab30650   240  ldr x4, [x0, x16]
0xffff7ab30654   244  stur x4, [x3, #63]
0xffff7ab30658   248  mov x4, x3
0xffff7ab3065c   252  movz x16, #0x557
0xffff7ab30660   256  str x4, [x0, x16]
0xffff7ab30664   260  add x6, x0, #0x557 (1367)
0xffff7ab30668   264  and x4, x0, #0xfffffffffff00000
0xffff7ab3066c   268  ldr x4, [x4, #8]
0xffff7ab30670   272  tbz w4, #2, #+0x18 (addr 0xffff7ab30688)
0xffff7ab30674   276  sub csp, jssp, #0x8 (8)
0xffff7ab30678   280  str lr, [jssp, #-8]!
0xffff7ab3067c   284  ldr x16, pc+324 (addr 0x0000ffff7ab307c0)    ;; code: STUB, RecordWriteStub, minor: 71808
0xffff7ab30680   288  blr x16
0xffff7ab30684   292  ldr lr, [jssp], #8
0xffff7ab30688   296  b #+0x8 (addr 0xffff7ab30690)
0xffff7ab3068c   300  b #+0x184 (addr 0xffff7ab30810)
0xffff7ab30690   304  cmp w5, #0x1 (1)
0xffff7ab30694   308  b.ge #+0x94 (addr 0xffff7ab30728)
0xffff7ab30698   312  ldur x1, [x1, #15]
0xffff7ab3069c   316  ldur x1, [x1, #7]
0xffff7ab306a0   320  movz x4, #0x0
0xffff7ab306a4   324  cmp x1, x4
0xffff7ab306a8   328  b.eq #+0x54 (addr 0xffff7ab306fc)
0xffff7ab306ac   332  add x1, x1, #0x5f (95)
0xffff7ab306b0   336  stur x1, [x3, #55]
0xffff7ab306b4   340  ldr x1, pc+276 (addr 0x0000ffff7ab307c8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab306b8   344  stur x1, [x3, #47]
0xffff7ab306bc   348  movz x16, #0x557
0xffff7ab306c0   352  ldr x1, [x0, x16]
0xffff7ab306c4   356  stur x1, [x3, #63]
0xffff7ab306c8   360  mov x1, x3
0xffff7ab306cc   364  movz x16, #0x557
0xffff7ab306d0   368  str x1, [x0, x16]
0xffff7ab306d4   372  add x2, x0, #0x557 (1367)
0xffff7ab306d8   376  and x1, x0, #0xfffffffffff00000
0xffff7ab306dc   380  ldr x1, [x1, #8]
0xffff7ab306e0   384  tbz w1, #2, #+0x18 (addr 0xffff7ab306f8)
0xffff7ab306e4   388  sub csp, jssp, #0x8 (8)
0xffff7ab306e8   392  str lr, [jssp, #-8]!
0xffff7ab306ec   396  ldr x16, pc+228 (addr 0x0000ffff7ab307d0)    ;; code: STUB, RecordWriteStub, minor: 67616
0xffff7ab306f0   400  blr x16
0xffff7ab306f4   404  ldr lr, [jssp], #8
0xffff7ab306f8   408  b #+0x30 (addr 0xffff7ab30728)
0xffff7ab306fc   412  ldr x0, pc+220 (addr 0x0000ffff7ab307d8)    ;; object: 0x20d04241 <undefined>
0xffff7ab30700   416  stur x0, [x3, #63]
0xffff7ab30704   420  ldur x0, [x2, #15]
0xffff7ab30708   424  add x0, x0, #0x5f (95)
0xffff7ab3070c   428  stur x0, [x3, #55]
0xffff7ab30710   432  b #+0x18 (addr 0xffff7ab30728)
0xffff7ab30714   436  ldr x0, pc+204 (addr 0x0000ffff7ab307e0)    ;; object: 0x20d04241 <undefined>
0xffff7ab30718   440  stur x0, [x3, #63]
0xffff7ab3071c   444  ldur x0, [x2, #15]
0xffff7ab30720   448  add x0, x0, #0x5f (95)
0xffff7ab30724   452  stur x0, [x3, #55]
0xffff7ab30728   456  mov x0, x3
0xffff7ab3072c   460  ret
0xffff7ab30730   464  sub csp, jssp, #0x10 (16)
0xffff7ab30734   468  stp fp, lr, [jssp, #-16]!
0xffff7ab30738   472  movz fp, #0xa00000000
0xffff7ab3073c   476  sub csp, jssp, #0x8 (8)
0xffff7ab30740   480  str fp, [jssp, #-8]!
0xffff7ab30744   484  add fp, jssp, #0x8 (8)
0xffff7ab30748   488  movz x3, #0x0
0xffff7ab3074c   492  mov x16, lr
0xffff7ab30750   496  ldr x17, pc+152 (addr 0x0000ffff7ab307e8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab30754   500  blr x17
0xffff7ab30758   504  movz x0, #0x4800000000
0xffff7ab3075c   508  movz x10, #0x0
0xffff7ab30760   512  sub csp, jssp, #0x10 (16)
0xffff7ab30764   516  stp x10, x0, [jssp, #-16]!
0xffff7ab30768   520  movz x0, #0x2
0xffff7ab3076c   524  movz x1, #0x5b88
0xffff7ab30770   528  movk x1, #0xe2, lsl #16
0xffff7ab30774   532  ldr x16, pc+124 (addr 0x0000ffff7ab307f0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab30778   536  blr x16
0xffff7ab3077c   540  str x0, [jssp, #24]
0xffff7ab30780   544  ldr x16, pc+120 (addr 0x0000ffff7ab307f8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab30784   548  blr x16
0xffff7ab30788   552  ldr lr, [jssp, #16]
0xffff7ab3078c   556  ldp xzr, fp, [jssp], #24
0xffff7ab30790   560  b #-0x210 (addr 0xffff7ab30580)
0xffff7ab30794   564  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0xffff7ab30798   568  d63f03e0       constant
0xffff7ab3079c   572  d503201f       constant
0xffff7ab307a0   576  20d04201       constant
0xffff7ab307a4   580  00000000       constant
0xffff7ab307a8   584  20d04201       constant
0xffff7ab307ac   588  00000000       constant
0xffff7ab307b0   592  20d04201       constant
0xffff7ab307b4   596  00000000       constant
0xffff7ab307b8   600  20d04519       constant
0xffff7ab307bc   604  00000000       constant
0xffff7ab307c0   608  7ab2d2c0       constant
0xffff7ab307c4   612  0000ffff       constant
0xffff7ab307c8   616  20d04201       constant
0xffff7ab307cc   620  00000000       constant
0xffff7ab307d0   624  7ab2daa0       constant
0xffff7ab307d4   628  0000ffff       constant
0xffff7ab307d8   632  20d04241       constant
0xffff7ab307dc   636  00000000       constant
0xffff7ab307e0   640  20d04241       constant
0xffff7ab307e4   644  00000000       constant
0xffff7ab307e8   648  7ab06820       constant
0xffff7ab307ec   652  0000ffff       constant
0xffff7ab307f0   656  7ab06260       constant
0xffff7ab307f4   660  0000ffff       constant
0xffff7ab307f8   664  7ab068e0       constant
0xffff7ab307fc   668  0000ffff       constant
0xffff7ab30800   672  movz x16, #0x0
0xffff7ab30804   676  sub csp, jssp, #0x10 (16)
0xffff7ab30808   680  stp fp, lr, [jssp, #-16]!
0xffff7ab3080c   684  bl #+0x14 (addr 0xffff7ab30820)
0xffff7ab30810   688  movz x16, #0x8
0xffff7ab30814   692  sub csp, jssp, #0x10 (16)
0xffff7ab30818   696  stp fp, lr, [jssp, #-16]!
0xffff7ab3081c   700  bl #+0x4 (addr 0xffff7ab30820)
0xffff7ab30820   704  movz x17, #0xa00000000
0xffff7ab30824   708  sub csp, jssp, #0x10 (16)
0xffff7ab30828   712  stp x17, cp, [jssp, #-16]!
0xffff7ab3082c   716  add fp, jssp, #0x10 (16)
0xffff7ab30830   720  ldr x17, pc+24 (addr 0x0000ffff7ab30848)    ;; lazy deoptimization bailout 0
0xffff7ab30834   724  add x17, x17, x16
0xffff7ab30838   728  br x17
0xffff7ab3083c   732  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab30840   736  d63f03e0       constant
0xffff7ab30844   740  d503201f       constant
0xffff7ab30848   744  7a906000       constant
0xffff7ab3084c   748  0000ffff       constant


Safepoints (size = 21)
0xffff7ab3077c   540  000 | x2 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0xffff7ab30590  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab30598  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab305a0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab305a8  embedded object  (0x20d04519 <the hole>)
0xffff7ab3067c  code target (STUB)  (0xffff7ab2d2c0)
0xffff7ab306b4  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab306ec  code target (STUB)  (0xffff7ab2daa0)
0xffff7ab306fc  embedded object  (0x20d04241 <undefined>)
0xffff7ab30714  embedded object  (0x20d04241 <undefined>)
0xffff7ab30750  code target (STUB)  (0xffff7ab06820)
0xffff7ab30774  code target (STUB)  (0xffff7ab06260)
0xffff7ab30780  code target (STUB)  (0xffff7ab068e0)
0xffff7ab30794  constant pool (size 108)
0xffff7ab30830  runtime entry
0xffff7ab3083c  constant pool (size 20)


kind = LOAD_IC
major_key = LoadICTrampolineStub
ic_state = GENERIC
extra_ic_state = 1
name = LoadICTrampolineStub
compiler = unknown
Instructions (size = 440)
0xffff7ab308e0     0  ldur x3, [fp, #-16]
0xffff7ab308e4     4  ldur x3, [x3, #31]
0xffff7ab308e8     8  ldur x3, [x3, #87]
0xffff7ab308ec    12  add x4, x3, x0, asr #29
0xffff7ab308f0    16  ldur x4, [x4, #15]
0xffff7ab308f4    20  tbz w1, #0, #+0x170 (addr 0xffff7ab30a64)
0xffff7ab308f8    24  ldur x5, [x1, #-1]
0xffff7ab308fc    28  ldur x6, [x4, #7]
0xffff7ab30900    32  cmp x6, x5
0xffff7ab30904    36  b.ne #+0x14 (addr 0xffff7ab30918)
0xffff7ab30908    40  add x4, x3, x0, asr #29
0xffff7ab3090c    44  ldur x4, [x4, #23]
0xffff7ab30910    48  add x4, x4, #0x5f (95)
0xffff7ab30914    52  br x4
0xffff7ab30918    56  ldur x6, [x4, #-1]
0xffff7ab3091c    60  ldr x16, [x26, #224]
0xffff7ab30920    64  cmp x6, x16
0xffff7ab30924    68  b.ne #+0x5c (addr 0xffff7ab30980)
0xffff7ab30928    72  ldur x6, [x4, #15]
0xffff7ab3092c    76  ldur x6, [x6, #7]
0xffff7ab30930    80  cmp x5, x6
0xffff7ab30934    84  b.ne #+0x10 (addr 0xffff7ab30944)
0xffff7ab30938    88  ldur x4, [x4, #23]
0xffff7ab3093c    92  add x4, x4, #0x5f (95)
0xffff7ab30940    96  br x4
0xffff7ab30944   100  ldur x7, [x4, #7]
0xffff7ab30948   104  add x7, x4, x7, asr #29
0xffff7ab3094c   108  add x7, x7, #0xf (15)
0xffff7ab30950   112  add x4, x4, #0x1f (31)
0xffff7ab30954   116  ldr x6, [x4]
0xffff7ab30958   120  ldur x6, [x6, #7]
0xffff7ab3095c   124  cmp x5, x6
0xffff7ab30960   128  b.ne #+0x10 (addr 0xffff7ab30970)
0xffff7ab30964   132  ldr x4, [x4, #8]
0xffff7ab30968   136  add x4, x4, #0x5f (95)
0xffff7ab3096c   140  br x4
0xffff7ab30970   144  add x4, x4, #0x10 (16)
0xffff7ab30974   148  cmp x4, x7
0xffff7ab30978   152  b.lt #-0x24 (addr 0xffff7ab30954)
0xffff7ab3097c   156  b #+0xcc (addr 0xffff7ab30a48)
0xffff7ab30980   160  ldr x16, [x26, #2400]
0xffff7ab30984   164  cmp x4, x16
0xffff7ab30988   168  b.ne #+0xc0 (addr 0xffff7ab30a48)
0xffff7ab3098c   172  tbz w1, #0, #+0xbc (addr 0xffff7ab30a48)
0xffff7ab30990   176  ldur x4, [x2, #7]
0xffff7ab30994   180  ldur x5, [x1, #-1]
0xffff7ab30998   184  add x4, x4, x5
0xffff7ab3099c   188  movz x16, #0x5102
0xffff7ab309a0   192  eor x4, x4, x16
0xffff7ab309a4   196  ubfx x4, x4, #2, #11
0xffff7ab309a8   200  add x7, x4, x4, lsl #1
0xffff7ab309ac   204  ldr x5, pc+204 (addr 0x0000ffff7ab30a78)    ;; external reference (StubCache::primary_->key)
0xffff7ab309b0   208  add x5, x5, x7, lsl #3
0xffff7ab309b4   212  ldr x6, [x5]
0xffff7ab309b8   216  cmp x2, x6
0xffff7ab309bc   220  b.ne #+0x34 (addr 0xffff7ab309f0)
0xffff7ab309c0   224  ldr x6, [x5, #16]
0xffff7ab309c4   228  ldur x7, [x1, #-1]
0xffff7ab309c8   232  cmp x6, x7
0xffff7ab309cc   236  b.ne #+0x24 (addr 0xffff7ab309f0)
0xffff7ab309d0   240  ldr x5, [x5, #8]
0xffff7ab309d4   244  ldur w6, [x5, #63]
0xffff7ab309d8   248  and w6, w6, #0xffffffc7
0xffff7ab309dc   252  movz w16, #0x5102
0xffff7ab309e0   256  cmp w6, w16
0xffff7ab309e4   260  b.ne #+0xc (addr 0xffff7ab309f0)
0xffff7ab309e8   264  add x5, x5, #0x5f (95)
0xffff7ab309ec   268  br x5
0xffff7ab309f0   272  sub x4, x4, x2, lsr #2
0xffff7ab309f4   276  movz x16, #0x1440
0xffff7ab309f8   280  add x4, x4, x16
0xffff7ab309fc   284  and x4, x4, #0x1ff
0xffff7ab30a00   288  add x7, x4, x4, lsl #1
0xffff7ab30a04   292  ldr x5, pc+124 (addr 0x0000ffff7ab30a80)    ;; external reference (StubCache::secondary_->key)
0xffff7ab30a08   296  add x5, x5, x7, lsl #3
0xffff7ab30a0c   300  ldr x6, [x5]
0xffff7ab30a10   304  cmp x2, x6
0xffff7ab30a14   308  b.ne #+0x34 (addr 0xffff7ab30a48)
0xffff7ab30a18   312  ldr x6, [x5, #16]
0xffff7ab30a1c   316  ldur x7, [x1, #-1]
0xffff7ab30a20   320  cmp x6, x7
0xffff7ab30a24   324  b.ne #+0x24 (addr 0xffff7ab30a48)
0xffff7ab30a28   328  ldr x5, [x5, #8]
0xffff7ab30a2c   332  ldur w6, [x5, #63]
0xffff7ab30a30   336  and w6, w6, #0xffffffc7
0xffff7ab30a34   340  movz w16, #0x5102
0xffff7ab30a38   344  cmp w6, w16
0xffff7ab30a3c   348  b.ne #+0xc (addr 0xffff7ab30a48)
0xffff7ab30a40   352  add x5, x5, #0x5f (95)
0xffff7ab30a44   356  br x5
0xffff7ab30a48   360  sub csp, jssp, #0x20 (32)
0xffff7ab30a4c   364  stp x3, x0, [jssp, #-32]!
0xffff7ab30a50   368  stp x2, x1, [jssp, #16]
0xffff7ab30a54   372  movz x0, #0x4
0xffff7ab30a58   376  ldr x1, pc+48 (addr 0x0000ffff7ab30a88)    ;; external reference (Runtime::LoadIC_Miss)
0xffff7ab30a5c   380  ldr x16, pc+52 (addr 0x0000ffff7ab30a90)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab30a60   384  br x16
0xffff7ab30a64   388  ldr x5, [x26, #120]
0xffff7ab30a68   392  b #-0x16c (addr 0xffff7ab308fc)
0xffff7ab30a6c   396  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0xffff7ab30a70   400  d63f03e0       constant
0xffff7ab30a74   404  d503201f       constant
0xffff7ab30a78   408  09ad8950       constant
0xffff7ab30a7c   412  00000000       constant
0xffff7ab30a80   416  09ae4950       constant
0xffff7ab30a84   420  00000000       constant
0xffff7ab30a88   424  00c86e20       constant
0xffff7ab30a8c   428  00000000       constant
0xffff7ab30a90   432  7ab06060       constant
0xffff7ab30a94   436  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab309ac  external reference (StubCache::primary_->key)  (0x9ad8950)
0xffff7ab30a04  external reference (StubCache::secondary_->key)  (0x9ae4950)
0xffff7ab30a58  external reference (Runtime::LoadIC_Miss)  (0xc86e20)
0xffff7ab30a5c  code target (STUB)  (0xffff7ab06060)
0xffff7ab30a6c  constant pool (size 44)


kind = STUB
major_key = ArrayConstructorStub
name = ArrayConstructorStub_One
compiler = unknown
Instructions (size = 344)
0xffff7ab30b00     0  ldur cp, [x1, #39]
0xffff7ab30b04     4  cmp x3, x1
0xffff7ab30b08     8  b.ne #+0xc8 (addr 0xffff7ab30bd0)
0xffff7ab30b0c    12  ldr x16, [x26, #40]
0xffff7ab30b10    16  cmp x2, x16
0xffff7ab30b14    20  b.eq #+0xa4 (addr 0xffff7ab30bb8)
0xffff7ab30b18    24  ldursw x3, [x2, #11]
0xffff7ab30b1c    28  and x3, x3, #0x7fff
0xffff7ab30b20    32  tbnz w3, #0, #+0x20 (addr 0xffff7ab30b40)
0xffff7ab30b24    36  ldr x10, [jssp]
0xffff7ab30b28    40  cbz x10, #+0x18 (addr 0xffff7ab30b40)
0xffff7ab30b2c    44  orr x3, x3, #0x1
0xffff7ab30b30    48  ldur x11, [x2, #7]
0xffff7ab30b34    52  movz x16, #0x100000000
0xffff7ab30b38    56  add x11, x11, x16
0xffff7ab30b3c    60  stur x11, [x2, #7]
0xffff7ab30b40    64  cbnz x3, #+0xc (addr 0xffff7ab30b4c)
0xffff7ab30b44    68  ldr x16, pc+180 (addr 0x0000ffff7ab30bf8)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 0
0xffff7ab30b48    72  br x16
0xffff7ab30b4c    76  cmp x3, #0x1 (1)
0xffff7ab30b50    80  b.ne #+0xc (addr 0xffff7ab30b5c)
0xffff7ab30b54    84  ldr x16, pc+172 (addr 0x0000ffff7ab30c00)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 1
0xffff7ab30b58    88  br x16
0xffff7ab30b5c    92  cmp x3, #0x4 (4)
0xffff7ab30b60    96  b.ne #+0xc (addr 0xffff7ab30b6c)
0xffff7ab30b64   100  ldr x16, pc+164 (addr 0x0000ffff7ab30c08)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 4
0xffff7ab30b68   104  br x16
0xffff7ab30b6c   108  cmp x3, #0x5 (5)
0xffff7ab30b70   112  b.ne #+0xc (addr 0xffff7ab30b7c)
0xffff7ab30b74   116  ldr x16, pc+156 (addr 0x0000ffff7ab30c10)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 5
0xffff7ab30b78   120  br x16
0xffff7ab30b7c   124  cmp x3, #0x2 (2)
0xffff7ab30b80   128  b.ne #+0xc (addr 0xffff7ab30b8c)
0xffff7ab30b84   132  ldr x16, pc+148 (addr 0x0000ffff7ab30c18)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 2
0xffff7ab30b88   136  br x16
0xffff7ab30b8c   140  cmp x3, #0x3 (3)
0xffff7ab30b90   144  b.ne #+0xc (addr 0xffff7ab30b9c)
0xffff7ab30b94   148  ldr x16, pc+140 (addr 0x0000ffff7ab30c20)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 3
0xffff7ab30b98   152  br x16
0xffff7ab30b9c   156  movz x0, #0x9f00000000
0xffff7ab30ba0   160  sub csp, jssp, #0x8 (8)
0xffff7ab30ba4   164  str x0, [jssp, #-8]!
0xffff7ab30ba8   168  movz x0, #0x1
0xffff7ab30bac   172  ldr x1, pc+124 (addr 0x0000ffff7ab30c28)    ;; external reference (Runtime::Abort)
0xffff7ab30bb0   176  ldr x16, pc+128 (addr 0x0000ffff7ab30c30)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab30bb4   180  blr x16
0xffff7ab30bb8   184  ldr x10, [jssp]
0xffff7ab30bbc   188  cbz x10, #+0xc (addr 0xffff7ab30bc8)
0xffff7ab30bc0   192  ldr x16, pc+120 (addr 0x0000ffff7ab30c38)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 257
0xffff7ab30bc4   196  br x16
0xffff7ab30bc8   200  ldr x16, pc+120 (addr 0x0000ffff7ab30c40)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 256
0xffff7ab30bcc   204  br x16
0xffff7ab30bd0   208  str x1, [jssp, #8]
0xffff7ab30bd4   212  movz x0, #0x4
0xffff7ab30bd8   216  sub csp, jssp, #0x10 (16)
0xffff7ab30bdc   220  stp x2, x3, [jssp, #-16]!
0xffff7ab30be0   224  ldr x1, pc+104 (addr 0x0000ffff7ab30c48)    ;; external reference (Runtime::NewArray)
0xffff7ab30be4   228  ldr x16, pc+108 (addr 0x0000ffff7ab30c50)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab30be8   232  br x16
0xffff7ab30bec   236  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0xffff7ab30bf0   240  d63f03e0       constant
0xffff7ab30bf4   244  d503201f       constant
0xffff7ab30bf8   248  7ab082a0       constant
0xffff7ab30bfc   252  0000ffff       constant
0xffff7ab30c00   256  7ab08840       constant
0xffff7ab30c04   260  0000ffff       constant
0xffff7ab30c08   264  7ab08e00       constant
0xffff7ab30c0c   268  0000ffff       constant
0xffff7ab30c10   272  7ab09080       constant
0xffff7ab30c14   276  0000ffff       constant
0xffff7ab30c18   280  7ab09300       constant
0xffff7ab30c1c   284  0000ffff       constant
0xffff7ab30c20   288  7ab09580       constant
0xffff7ab30c24   292  0000ffff       constant
0xffff7ab30c28   296  00eda820       constant
0xffff7ab30c2c   300  00000000       constant
0xffff7ab30c30   304  7ab06060       constant
0xffff7ab30c34   308  0000ffff       constant
0xffff7ab30c38   312  7ab08b80       constant
0xffff7ab30c3c   316  0000ffff       constant
0xffff7ab30c40   320  7ab085e0       constant
0xffff7ab30c44   324  0000ffff       constant
0xffff7ab30c48   328  00de2850       constant
0xffff7ab30c4c   332  00000000       constant
0xffff7ab30c50   336  7ab06060       constant
0xffff7ab30c54   340  0000ffff       constant


RelocInfo (size = 22)
0xffff7ab30b44  code target (STUB)  (0xffff7ab082a0)
0xffff7ab30b54  code target (STUB)  (0xffff7ab08840)
0xffff7ab30b64  code target (STUB)  (0xffff7ab08e00)
0xffff7ab30b74  code target (STUB)  (0xffff7ab09080)
0xffff7ab30b84  code target (STUB)  (0xffff7ab09300)
0xffff7ab30b94  code target (STUB)  (0xffff7ab09580)
0xffff7ab30bac  external reference (Runtime::Abort)  (0xeda820)
0xffff7ab30bb0  code target (STUB)  (0xffff7ab06060)
0xffff7ab30bc0  code target (STUB)  (0xffff7ab08b80)
0xffff7ab30bc8  code target (STUB)  (0xffff7ab085e0)
0xffff7ab30be0  external reference (Runtime::NewArray)  (0xde2850)
0xffff7ab30be4  code target (STUB)  (0xffff7ab06060)
0xffff7ab30bec  constant pool (size 108)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 327681
name = CallICStub(args(1), NOT_NULL_OR_UNDEFINED, 
compiler = unknown
Instructions (size = 488)
0xffff7ab30cc0     0  add x4, x2, x3, asr #29
0xffff7ab30cc4     4  ldur x4, [x4, #15]
0xffff7ab30cc8     8  ldur x5, [x4, #7]
0xffff7ab30ccc    12  cmp x5, x1
0xffff7ab30cd0    16  b.ne #+0x2c (addr 0xffff7ab30cfc)
0xffff7ab30cd4    20  tbz w1, #0, #+0x28 (addr 0xffff7ab30cfc)
0xffff7ab30cd8    24  add x2, x2, x3, asr #29
0xffff7ab30cdc    28  add x2, x2, #0x18 (24)
0xffff7ab30ce0    32  ldur x3, [x2, #-1]
0xffff7ab30ce4    36  movz x16, #0x200000000
0xffff7ab30ce8    40  add x3, x3, x16
0xffff7ab30cec    44  stur x3, [x2, #-1]
0xffff7ab30cf0    48  movz x0, #0x1
0xffff7ab30cf4    52  ldr x16, pc+372 (addr 0x0000ffff7ab30e68)    ;; code: BUILTIN
0xffff7ab30cf8    56  br x16
0xffff7ab30cfc    60  ldr x16, [x26, #2400]
0xffff7ab30d00    64  cmp x4, x16
0xffff7ab30d04    68  b.eq #+0x78 (addr 0xffff7ab30d7c)
0xffff7ab30d08    72  ldur x5, [x4, #-1]
0xffff7ab30d0c    76  ldr x16, [x26, #2736]
0xffff7ab30d10    80  cmp x5, x16
0xffff7ab30d14    84  b.ne #+0x40 (addr 0xffff7ab30d54)
0xffff7ab30d18    88  ldur x5, [cp, #39]
0xffff7ab30d1c    92  ldur x5, [x5, #95]
0xffff7ab30d20    96  cmp x1, x5
0xffff7ab30d24   100  b.ne #+0xec (addr 0xffff7ab30e10)
0xffff7ab30d28   104  movz x0, #0x1
0xffff7ab30d2c   108  add x2, x2, x3, asr #29
0xffff7ab30d30   112  add x2, x2, #0x18 (24)
0xffff7ab30d34   116  ldur x3, [x2, #-1]
0xffff7ab30d38   120  movz x16, #0x200000000
0xffff7ab30d3c   124  add x3, x3, x16
0xffff7ab30d40   128  stur x3, [x2, #-1]
0xffff7ab30d44   132  mov x2, x4
0xffff7ab30d48   136  mov x3, x1
0xffff7ab30d4c   140  ldr x16, pc+292 (addr 0x0000ffff7ab30e70)    ;; code: STUB, ArrayConstructorStub, minor: 2
0xffff7ab30d50   144  br x16
0xffff7ab30d54   148  ldr x16, [x26, #2568]
0xffff7ab30d58   152  cmp x4, x16
0xffff7ab30d5c   156  b.eq #+0xb4 (addr 0xffff7ab30e10)
0xffff7ab30d60   160  ldur x5, [x4, #-1]
0xffff7ab30d64   164  ldrb w5, [x5, #11]
0xffff7ab30d68   168  cmp x5, #0xc9 (201)
0xffff7ab30d6c   172  b.ne #+0xa4 (addr 0xffff7ab30e10)
0xffff7ab30d70   176  add x4, x2, x3, asr #29
0xffff7ab30d74   180  ldr x5, [x26, #2400]
0xffff7ab30d78   184  stur x5, [x4, #15]
0xffff7ab30d7c   188  movz x0, #0x1
0xffff7ab30d80   192  ldr x16, pc+248 (addr 0x0000ffff7ab30e78)    ;; code: BUILTIN
0xffff7ab30d84   196  br x16
0xffff7ab30d88   200  tbz w1, #0, #+0x88 (addr 0xffff7ab30e10)
0xffff7ab30d8c   204  ldur x5, [x1, #-1]
0xffff7ab30d90   208  ldrb w5, [x5, #11]
0xffff7ab30d94   212  cmp x5, #0xc9 (201)
0xffff7ab30d98   216  b.ne #+0x78 (addr 0xffff7ab30e10)
0xffff7ab30d9c   220  ldur x5, [cp, #39]
0xffff7ab30da0   224  ldur x5, [x5, #95]
0xffff7ab30da4   228  cmp x1, x5
0xffff7ab30da8   232  b.eq #+0x68 (addr 0xffff7ab30e10)
0xffff7ab30dac   236  ldur x4, [x1, #39]
0xffff7ab30db0   240  ldur x4, [x4, #39]
0xffff7ab30db4   244  ldur x5, [cp, #39]
0xffff7ab30db8   248  cmp x4, x5
0xffff7ab30dbc   252  b.ne #+0x54 (addr 0xffff7ab30e10)
0xffff7ab30dc0   256  movz x5, #0x200000000
0xffff7ab30dc4   260  adds x4, x2, x3, asr #29
0xffff7ab30dc8   264  stur x5, [x4, #23]
0xffff7ab30dcc   268  movz x16, #0xc00000000
0xffff7ab30dd0   272  sub csp, jssp, #0x10 (16)
0xffff7ab30dd4   276  stp fp, lr, [jssp, #-16]!
0xffff7ab30dd8   280  sub csp, jssp, #0x10 (16)
0xffff7ab30ddc   284  str x16, [jssp, #-8]!
0xffff7ab30de0   288  ldr x17, pc+160 (addr 0x0000ffff7ab30e80)    ;; object: 0xffff7ab30c61 <Code: CALL_IC>
0xffff7ab30de4   292  sub csp, jssp, #0x10 (16)
0xffff7ab30de8   296  str x17, [jssp, #-8]!
0xffff7ab30dec   300  add fp, jssp, #0x10 (16)
0xffff7ab30df0   304  sub csp, jssp, #0x8 (8)
0xffff7ab30df4   308  str x1, [jssp, #-8]!
0xffff7ab30df8   312  ldr x16, pc+144 (addr 0x0000ffff7ab30e88)    ;; code: STUB, CreateWeakCellStub, minor: 0
0xffff7ab30dfc   316  blr x16
0xffff7ab30e00   320  ldr x1, [jssp], #8
0xffff7ab30e04   324  mov jssp, fp
0xffff7ab30e08   328  ldp fp, lr, [jssp], #16
0xffff7ab30e0c   332  b #-0x11c (addr 0xffff7ab30cf0)
0xffff7ab30e10   336  movz x16, #0xc00000000
0xffff7ab30e14   340  sub csp, jssp, #0x10 (16)
0xffff7ab30e18   344  stp fp, lr, [jssp, #-16]!
0xffff7ab30e1c   348  sub csp, jssp, #0x10 (16)
0xffff7ab30e20   352  str x16, [jssp, #-8]!
0xffff7ab30e24   356  ldr x17, pc+108 (addr 0x0000ffff7ab30e90)    ;; object: 0xffff7ab30c61 <Code: CALL_IC>
0xffff7ab30e28   360  sub csp, jssp, #0x10 (16)
0xffff7ab30e2c   364  str x17, [jssp, #-8]!
0xffff7ab30e30   368  add fp, jssp, #0x10 (16)
0xffff7ab30e34   372  sub csp, jssp, #0x18 (24)
0xffff7ab30e38   376  stp x3, x2, [jssp, #-24]!
0xffff7ab30e3c   380  str x1, [jssp, #16]
0xffff7ab30e40   384  movz x0, #0x3
0xffff7ab30e44   388  ldr x1, pc+84 (addr 0x0000ffff7ab30e98)    ;; external reference (Runtime::CallIC_Miss)
0xffff7ab30e48   392  ldr x16, pc+88 (addr 0x0000ffff7ab30ea0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab30e4c   396  blr x16
0xffff7ab30e50   400  mov x1, x0
0xffff7ab30e54   404  mov jssp, fp
0xffff7ab30e58   408  ldp fp, lr, [jssp], #16
0xffff7ab30e5c   412  b #-0xe0 (addr 0xffff7ab30d7c)
0xffff7ab30e60   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7ab30e64   420  d63f03e0       constant
0xffff7ab30e68   424  7ab1e600       constant
0xffff7ab30e6c   428  0000ffff       constant
0xffff7ab30e70   432  7ab30b00       constant
0xffff7ab30e74   436  0000ffff       constant
0xffff7ab30e78   440  7ab1f6c0       constant
0xffff7ab30e7c   444  0000ffff       constant
0xffff7ab30e80   448  7ab30c61       constant
0xffff7ab30e84   452  0000ffff       constant
0xffff7ab30e88   456  7ab0ddc0       constant
0xffff7ab30e8c   460  0000ffff       constant
0xffff7ab30e90   464  7ab30c61       constant
0xffff7ab30e94   468  0000ffff       constant
0xffff7ab30e98   472  00c86928       constant
0xffff7ab30e9c   476  00000000       constant
0xffff7ab30ea0   480  7ab06060       constant
0xffff7ab30ea4   484  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab30cf4  code target (BUILTIN)  (0xffff7ab1e600)
0xffff7ab30d4c  code target (STUB)  (0xffff7ab30b00)
0xffff7ab30d80  code target (BUILTIN)  (0xffff7ab1f6c0)
0xffff7ab30de0  embedded object  (0xffff7ab30c61 <Code: CALL_IC>)
0xffff7ab30df8  code target (STUB)  (0xffff7ab0ddc0)
0xffff7ab30e24  embedded object  (0xffff7ab30c61 <Code: CALL_IC>)
0xffff7ab30e44  external reference (Runtime::CallIC_Miss)  (0xc86928)
0xffff7ab30e48  code target (STUB)  (0xffff7ab06060)
0xffff7ab30e60  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 327681
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0xffff7ab30f20     0  ldur x2, [fp, #-16]
0xffff7ab30f24     4  ldur x2, [x2, #31]
0xffff7ab30f28     8  ldur x2, [x2, #87]
0xffff7ab30f2c    12  ldr x16, pc+20 (addr 0x0000ffff7ab30f40)    ;; code: CALL_IC, GENERIC
0xffff7ab30f30    16  br x16
0xffff7ab30f34    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab30f38    24  d63f03e0       constant
0xffff7ab30f3c    28  d503201f       constant
0xffff7ab30f40    32  7ab30cc0       constant
0xffff7ab30f44    36  0000ffff       constant


RelocInfo (size = 7)
0xffff7ab30f2c  code target (CALL_IC)  (0xffff7ab30cc0)
0xffff7ab30f34  constant pool (size 20)


kind = STUB
major_key = CallConstructStub
name = CallConstructStub
compiler = unknown
Instructions (size = 424)
0xffff7ab30fc0     0  tbz w1, #0, #+0x16c (addr 0xffff7ab3112c)
0xffff7ab30fc4     4  ldur x10, [x1, #-1]
0xffff7ab30fc8     8  ldrb w10, [x10, #11]
0xffff7ab30fcc    12  cmp x10, #0xc9 (201)
0xffff7ab30fd0    16  b.ne #+0x15c (addr 0xffff7ab3112c)
0xffff7ab30fd4    20  add x5, x2, x3, asr #29
0xffff7ab30fd8    24  ldur x5, [x5, #15]
0xffff7ab30fdc    28  ldur x12, [x5, #7]
0xffff7ab30fe0    32  cmp x1, x12
0xffff7ab30fe4    36  b.eq #+0x118 (addr 0xffff7ab310fc)
0xffff7ab30fe8    40  ldr x16, [x26, #2400]
0xffff7ab30fec    44  cmp x5, x16
0xffff7ab30ff0    48  b.eq #+0x10c (addr 0xffff7ab310fc)
0xffff7ab30ff4    52  ldur x11, [x5, #-1]
0xffff7ab30ff8    56  ldr x16, [x26, #264]
0xffff7ab30ffc    60  cmp x11, x16
0xffff7ab31000    64  b.ne #+0xc (addr 0xffff7ab3100c)
0xffff7ab31004    68  tbz w12, #0, #+0x44 (addr 0xffff7ab31048)
0xffff7ab31008    72  b #+0x30 (addr 0xffff7ab31038)
0xffff7ab3100c    76  ldr x16, [x26, #2736]
0xffff7ab31010    80  cmp x11, x16
0xffff7ab31014    84  b.ne #+0x18 (addr 0xffff7ab3102c)
0xffff7ab31018    88  ldur x5, [cp, #39]
0xffff7ab3101c    92  ldur x5, [x5, #95]
0xffff7ab31020    96  cmp x1, x5
0xffff7ab31024   100  b.ne #+0x14 (addr 0xffff7ab31038)
0xffff7ab31028   104  b #+0xd4 (addr 0xffff7ab310fc)
0xffff7ab3102c   108  ldr x16, [x26, #2568]
0xffff7ab31030   112  cmp x5, x16
0xffff7ab31034   116  b.eq #+0x14 (addr 0xffff7ab31048)
0xffff7ab31038   120  add x5, x2, x3, asr #29
0xffff7ab3103c   124  ldr x11, [x26, #2400]
0xffff7ab31040   128  stur x11, [x5, #15]
0xffff7ab31044   132  b #+0xb8 (addr 0xffff7ab310fc)
0xffff7ab31048   136  ldur x5, [cp, #39]
0xffff7ab3104c   140  ldur x5, [x5, #95]
0xffff7ab31050   144  cmp x1, x5
0xffff7ab31054   148  b.ne #+0x58 (addr 0xffff7ab310ac)
0xffff7ab31058   152  movz x16, #0xc00000000
0xffff7ab3105c   156  sub csp, jssp, #0x10 (16)
0xffff7ab31060   160  stp fp, lr, [jssp, #-16]!
0xffff7ab31064   164  sub csp, jssp, #0x10 (16)
0xffff7ab31068   168  str x16, [jssp, #-8]!
0xffff7ab3106c   172  ldr x17, pc+212 (addr 0x0000ffff7ab31140)    ;; object: 0xffff7ab30f61 <Code: STUB>
0xffff7ab31070   176  sub csp, jssp, #0x10 (16)
0xffff7ab31074   180  str x17, [jssp, #-8]!
0xffff7ab31078   184  add fp, jssp, #0x10 (16)
0xffff7ab3107c   188  lsl x0, x0, #32
0xffff7ab31080   192  sub csp, jssp, #0x20 (32)
0xffff7ab31084   196  stp x3, x2, [jssp, #-32]!
0xffff7ab31088   200  stp x1, x0, [jssp, #16]
0xffff7ab3108c   204  ldr x16, pc+188 (addr 0x0000ffff7ab31148)    ;; code: STUB, CreateAllocationSiteStub, minor: 0
0xffff7ab31090   208  blr x16
0xffff7ab31094   212  ldp x1, x0, [jssp, #16]
0xffff7ab31098   216  ldp x3, x2, [jssp], #32
0xffff7ab3109c   220  asr x0, x0, #32
0xffff7ab310a0   224  mov jssp, fp
0xffff7ab310a4   228  ldp fp, lr, [jssp], #16
0xffff7ab310a8   232  b #+0x54 (addr 0xffff7ab310fc)
0xffff7ab310ac   236  movz x16, #0xc00000000
0xffff7ab310b0   240  sub csp, jssp, #0x10 (16)
0xffff7ab310b4   244  stp fp, lr, [jssp, #-16]!
0xffff7ab310b8   248  sub csp, jssp, #0x10 (16)
0xffff7ab310bc   252  str x16, [jssp, #-8]!
0xffff7ab310c0   256  ldr x17, pc+144 (addr 0x0000ffff7ab31150)    ;; object: 0xffff7ab30f61 <Code: STUB>
0xffff7ab310c4   260  sub csp, jssp, #0x10 (16)
0xffff7ab310c8   264  str x17, [jssp, #-8]!
0xffff7ab310cc   268  add fp, jssp, #0x10 (16)
0xffff7ab310d0   272  lsl x0, x0, #32
0xffff7ab310d4   276  sub csp, jssp, #0x20 (32)
0xffff7ab310d8   280  stp x3, x2, [jssp, #-32]!
0xffff7ab310dc   284  stp x1, x0, [jssp, #16]
0xffff7ab310e0   288  ldr x16, pc+120 (addr 0x0000ffff7ab31158)    ;; code: STUB, CreateWeakCellStub, minor: 0
0xffff7ab310e4   292  blr x16
0xffff7ab310e8   296  ldp x1, x0, [jssp, #16]
0xffff7ab310ec   300  ldp x3, x2, [jssp], #32
0xffff7ab310f0   304  asr x0, x0, #32
0xffff7ab310f4   308  mov jssp, fp
0xffff7ab310f8   312  ldp fp, lr, [jssp], #16
0xffff7ab310fc   316  add x5, x2, x3, asr #29
0xffff7ab31100   320  ldur x2, [x5, #15]
0xffff7ab31104   324  ldur x5, [x2, #-1]
0xffff7ab31108   328  ldr x16, [x26, #2736]
0xffff7ab3110c   332  cmp x5, x16
0xffff7ab31110   336  b.eq #+0x8 (addr 0xffff7ab31118)
0xffff7ab31114   340  ldr x2, [x26, #40]
0xffff7ab31118   344  mov x3, x1
0xffff7ab3111c   348  ldur x4, [x1, #31]
0xffff7ab31120   352  ldur x4, [x4, #39]
0xffff7ab31124   356  add x4, x4, #0x5f (95)
0xffff7ab31128   360  br x4
0xffff7ab3112c   364  mov x3, x1
0xffff7ab31130   368  ldr x16, pc+48 (addr 0x0000ffff7ab31160)    ;; code: BUILTIN
0xffff7ab31134   372  br x16
0xffff7ab31138   376  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0xffff7ab3113c   380  d63f03e0       constant
0xffff7ab31140   384  7ab30f61       constant
0xffff7ab31144   388  0000ffff       constant
0xffff7ab31148   392  7ab0cbc0       constant
0xffff7ab3114c   396  0000ffff       constant
0xffff7ab31150   400  7ab30f61       constant
0xffff7ab31154   404  0000ffff       constant
0xffff7ab31158   408  7ab0ddc0       constant
0xffff7ab3115c   412  0000ffff       constant
0xffff7ab31160   416  7ab20180       constant
0xffff7ab31164   420  0000ffff       constant


RelocInfo (size = 15)
0xffff7ab3106c  embedded object  (0xffff7ab30f61 <Code: STUB>)
0xffff7ab3108c  code target (STUB)  (0xffff7ab0cbc0)
0xffff7ab310c0  embedded object  (0xffff7ab30f61 <Code: STUB>)
0xffff7ab310e0  code target (STUB)  (0xffff7ab0ddc0)
0xffff7ab31130  code target (BUILTIN)  (0xffff7ab20180)
0xffff7ab31138  constant pool (size 48)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 393217
name = CallICStub(args(1), ANY, 
compiler = unknown
Instructions (size = 488)
0xffff7ab31c60     0  add x4, x2, x3, asr #29
0xffff7ab31c64     4  ldur x4, [x4, #15]
0xffff7ab31c68     8  ldur x5, [x4, #7]
0xffff7ab31c6c    12  cmp x5, x1
0xffff7ab31c70    16  b.ne #+0x2c (addr 0xffff7ab31c9c)
0xffff7ab31c74    20  tbz w1, #0, #+0x28 (addr 0xffff7ab31c9c)
0xffff7ab31c78    24  add x2, x2, x3, asr #29
0xffff7ab31c7c    28  add x2, x2, #0x18 (24)
0xffff7ab31c80    32  ldur x3, [x2, #-1]
0xffff7ab31c84    36  movz x16, #0x200000000
0xffff7ab31c88    40  add x3, x3, x16
0xffff7ab31c8c    44  stur x3, [x2, #-1]
0xffff7ab31c90    48  movz x0, #0x1
0xffff7ab31c94    52  ldr x16, pc+372 (addr 0x0000ffff7ab31e08)    ;; code: BUILTIN
0xffff7ab31c98    56  br x16
0xffff7ab31c9c    60  ldr x16, [x26, #2400]
0xffff7ab31ca0    64  cmp x4, x16
0xffff7ab31ca4    68  b.eq #+0x78 (addr 0xffff7ab31d1c)
0xffff7ab31ca8    72  ldur x5, [x4, #-1]
0xffff7ab31cac    76  ldr x16, [x26, #2736]
0xffff7ab31cb0    80  cmp x5, x16
0xffff7ab31cb4    84  b.ne #+0x40 (addr 0xffff7ab31cf4)
0xffff7ab31cb8    88  ldur x5, [cp, #39]
0xffff7ab31cbc    92  ldur x5, [x5, #95]
0xffff7ab31cc0    96  cmp x1, x5
0xffff7ab31cc4   100  b.ne #+0xec (addr 0xffff7ab31db0)
0xffff7ab31cc8   104  movz x0, #0x1
0xffff7ab31ccc   108  add x2, x2, x3, asr #29
0xffff7ab31cd0   112  add x2, x2, #0x18 (24)
0xffff7ab31cd4   116  ldur x3, [x2, #-1]
0xffff7ab31cd8   120  movz x16, #0x200000000
0xffff7ab31cdc   124  add x3, x3, x16
0xffff7ab31ce0   128  stur x3, [x2, #-1]
0xffff7ab31ce4   132  mov x2, x4
0xffff7ab31ce8   136  mov x3, x1
0xffff7ab31cec   140  ldr x16, pc+292 (addr 0x0000ffff7ab31e10)    ;; code: STUB, ArrayConstructorStub, minor: 2
0xffff7ab31cf0   144  br x16
0xffff7ab31cf4   148  ldr x16, [x26, #2568]
0xffff7ab31cf8   152  cmp x4, x16
0xffff7ab31cfc   156  b.eq #+0xb4 (addr 0xffff7ab31db0)
0xffff7ab31d00   160  ldur x5, [x4, #-1]
0xffff7ab31d04   164  ldrb w5, [x5, #11]
0xffff7ab31d08   168  cmp x5, #0xc9 (201)
0xffff7ab31d0c   172  b.ne #+0xa4 (addr 0xffff7ab31db0)
0xffff7ab31d10   176  add x4, x2, x3, asr #29
0xffff7ab31d14   180  ldr x5, [x26, #2400]
0xffff7ab31d18   184  stur x5, [x4, #15]
0xffff7ab31d1c   188  movz x0, #0x1
0xffff7ab31d20   192  ldr x16, pc+248 (addr 0x0000ffff7ab31e18)    ;; code: BUILTIN
0xffff7ab31d24   196  br x16
0xffff7ab31d28   200  tbz w1, #0, #+0x88 (addr 0xffff7ab31db0)
0xffff7ab31d2c   204  ldur x5, [x1, #-1]
0xffff7ab31d30   208  ldrb w5, [x5, #11]
0xffff7ab31d34   212  cmp x5, #0xc9 (201)
0xffff7ab31d38   216  b.ne #+0x78 (addr 0xffff7ab31db0)
0xffff7ab31d3c   220  ldur x5, [cp, #39]
0xffff7ab31d40   224  ldur x5, [x5, #95]
0xffff7ab31d44   228  cmp x1, x5
0xffff7ab31d48   232  b.eq #+0x68 (addr 0xffff7ab31db0)
0xffff7ab31d4c   236  ldur x4, [x1, #39]
0xffff7ab31d50   240  ldur x4, [x4, #39]
0xffff7ab31d54   244  ldur x5, [cp, #39]
0xffff7ab31d58   248  cmp x4, x5
0xffff7ab31d5c   252  b.ne #+0x54 (addr 0xffff7ab31db0)
0xffff7ab31d60   256  movz x5, #0x200000000
0xffff7ab31d64   260  adds x4, x2, x3, asr #29
0xffff7ab31d68   264  stur x5, [x4, #23]
0xffff7ab31d6c   268  movz x16, #0xc00000000
0xffff7ab31d70   272  sub csp, jssp, #0x10 (16)
0xffff7ab31d74   276  stp fp, lr, [jssp, #-16]!
0xffff7ab31d78   280  sub csp, jssp, #0x10 (16)
0xffff7ab31d7c   284  str x16, [jssp, #-8]!
0xffff7ab31d80   288  ldr x17, pc+160 (addr 0x0000ffff7ab31e20)    ;; object: 0xffff7ab31c01 <Code: CALL_IC>
0xffff7ab31d84   292  sub csp, jssp, #0x10 (16)
0xffff7ab31d88   296  str x17, [jssp, #-8]!
0xffff7ab31d8c   300  add fp, jssp, #0x10 (16)
0xffff7ab31d90   304  sub csp, jssp, #0x8 (8)
0xffff7ab31d94   308  str x1, [jssp, #-8]!
0xffff7ab31d98   312  ldr x16, pc+144 (addr 0x0000ffff7ab31e28)    ;; code: STUB, CreateWeakCellStub, minor: 0
0xffff7ab31d9c   316  blr x16
0xffff7ab31da0   320  ldr x1, [jssp], #8
0xffff7ab31da4   324  mov jssp, fp
0xffff7ab31da8   328  ldp fp, lr, [jssp], #16
0xffff7ab31dac   332  b #-0x11c (addr 0xffff7ab31c90)
0xffff7ab31db0   336  movz x16, #0xc00000000
0xffff7ab31db4   340  sub csp, jssp, #0x10 (16)
0xffff7ab31db8   344  stp fp, lr, [jssp, #-16]!
0xffff7ab31dbc   348  sub csp, jssp, #0x10 (16)
0xffff7ab31dc0   352  str x16, [jssp, #-8]!
0xffff7ab31dc4   356  ldr x17, pc+108 (addr 0x0000ffff7ab31e30)    ;; object: 0xffff7ab31c01 <Code: CALL_IC>
0xffff7ab31dc8   360  sub csp, jssp, #0x10 (16)
0xffff7ab31dcc   364  str x17, [jssp, #-8]!
0xffff7ab31dd0   368  add fp, jssp, #0x10 (16)
0xffff7ab31dd4   372  sub csp, jssp, #0x18 (24)
0xffff7ab31dd8   376  stp x3, x2, [jssp, #-24]!
0xffff7ab31ddc   380  str x1, [jssp, #16]
0xffff7ab31de0   384  movz x0, #0x3
0xffff7ab31de4   388  ldr x1, pc+84 (addr 0x0000ffff7ab31e38)    ;; external reference (Runtime::CallIC_Miss)
0xffff7ab31de8   392  ldr x16, pc+88 (addr 0x0000ffff7ab31e40)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab31dec   396  blr x16
0xffff7ab31df0   400  mov x1, x0
0xffff7ab31df4   404  mov jssp, fp
0xffff7ab31df8   408  ldp fp, lr, [jssp], #16
0xffff7ab31dfc   412  b #-0xe0 (addr 0xffff7ab31d1c)
0xffff7ab31e00   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7ab31e04   420  d63f03e0       constant
0xffff7ab31e08   424  7ab1e820       constant
0xffff7ab31e0c   428  0000ffff       constant
0xffff7ab31e10   432  7ab30b00       constant
0xffff7ab31e14   436  0000ffff       constant
0xffff7ab31e18   440  7ab1f820       constant
0xffff7ab31e1c   444  0000ffff       constant
0xffff7ab31e20   448  7ab31c01       constant
0xffff7ab31e24   452  0000ffff       constant
0xffff7ab31e28   456  7ab0ddc0       constant
0xffff7ab31e2c   460  0000ffff       constant
0xffff7ab31e30   464  7ab31c01       constant
0xffff7ab31e34   468  0000ffff       constant
0xffff7ab31e38   472  00c86928       constant
0xffff7ab31e3c   476  00000000       constant
0xffff7ab31e40   480  7ab06060       constant
0xffff7ab31e44   484  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab31c94  code target (BUILTIN)  (0xffff7ab1e820)
0xffff7ab31cec  code target (STUB)  (0xffff7ab30b00)
0xffff7ab31d20  code target (BUILTIN)  (0xffff7ab1f820)
0xffff7ab31d80  embedded object  (0xffff7ab31c01 <Code: CALL_IC>)
0xffff7ab31d98  code target (STUB)  (0xffff7ab0ddc0)
0xffff7ab31dc4  embedded object  (0xffff7ab31c01 <Code: CALL_IC>)
0xffff7ab31de4  external reference (Runtime::CallIC_Miss)  (0xc86928)
0xffff7ab31de8  code target (STUB)  (0xffff7ab06060)
0xffff7ab31e00  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 393217
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0xffff7ab31ec0     0  ldur x2, [fp, #-16]
0xffff7ab31ec4     4  ldur x2, [x2, #31]
0xffff7ab31ec8     8  ldur x2, [x2, #87]
0xffff7ab31ecc    12  ldr x16, pc+20 (addr 0x0000ffff7ab31ee0)    ;; code: CALL_IC, GENERIC
0xffff7ab31ed0    16  br x16
0xffff7ab31ed4    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab31ed8    24  d63f03e0       constant
0xffff7ab31edc    28  d503201f       constant
0xffff7ab31ee0    32  7ab31c60       constant
0xffff7ab31ee4    36  0000ffff       constant


RelocInfo (size = 7)
0xffff7ab31ecc  code target (CALL_IC)  (0xffff7ab31c60)
0xffff7ab31ed4  constant pool (size 20)


kind = STORE_IC
major_key = VectorStoreICTrampolineStub
ic_state = GENERIC
extra_ic_state = 0
name = VectorStoreICTrampolineStub
compiler = unknown
Instructions (size = 440)
0xffff7ab320c0     0  ldur x3, [fp, #-16]
0xffff7ab320c4     4  ldur x3, [x3, #31]
0xffff7ab320c8     8  ldur x3, [x3, #87]
0xffff7ab320cc    12  add x5, x3, x4, asr #29
0xffff7ab320d0    16  ldur x5, [x5, #15]
0xffff7ab320d4    20  tbz w1, #0, #+0x174 (addr 0xffff7ab32248)
0xffff7ab320d8    24  ldur x6, [x1, #-1]
0xffff7ab320dc    28  ldur x7, [x5, #7]
0xffff7ab320e0    32  cmp x7, x6
0xffff7ab320e4    36  b.ne #+0x14 (addr 0xffff7ab320f8)
0xffff7ab320e8    40  add x5, x3, x4, asr #29
0xffff7ab320ec    44  ldur x5, [x5, #23]
0xffff7ab320f0    48  add x5, x5, #0x5f (95)
0xffff7ab320f4    52  br x5
0xffff7ab320f8    56  ldur x7, [x5, #-1]
0xffff7ab320fc    60  ldr x16, [x26, #224]
0xffff7ab32100    64  cmp x7, x16
0xffff7ab32104    68  b.ne #+0x5c (addr 0xffff7ab32160)
0xffff7ab32108    72  ldur x7, [x5, #15]
0xffff7ab3210c    76  ldur x7, [x7, #7]
0xffff7ab32110    80  cmp x6, x7
0xffff7ab32114    84  b.ne #+0x10 (addr 0xffff7ab32124)
0xffff7ab32118    88  ldur x5, [x5, #23]
0xffff7ab3211c    92  add x5, x5, #0x5f (95)
0xffff7ab32120    96  br x5
0xffff7ab32124   100  ldur x8, [x5, #7]
0xffff7ab32128   104  add x8, x5, x8, asr #29
0xffff7ab3212c   108  add x8, x8, #0xf (15)
0xffff7ab32130   112  add x5, x5, #0x1f (31)
0xffff7ab32134   116  ldr x7, [x5]
0xffff7ab32138   120  ldur x7, [x7, #7]
0xffff7ab3213c   124  cmp x6, x7
0xffff7ab32140   128  b.ne #+0x10 (addr 0xffff7ab32150)
0xffff7ab32144   132  ldr x5, [x5, #8]
0xffff7ab32148   136  add x5, x5, #0x5f (95)
0xffff7ab3214c   140  br x5
0xffff7ab32150   144  add x5, x5, #0x10 (16)
0xffff7ab32154   148  cmp x5, x8
0xffff7ab32158   152  b.lt #-0x24 (addr 0xffff7ab32134)
0xffff7ab3215c   156  b #+0xcc (addr 0xffff7ab32228)
0xffff7ab32160   160  ldr x16, [x26, #2400]
0xffff7ab32164   164  cmp x5, x16
0xffff7ab32168   168  b.ne #+0xc0 (addr 0xffff7ab32228)
0xffff7ab3216c   172  tbz w1, #0, #+0xbc (addr 0xffff7ab32228)
0xffff7ab32170   176  ldur x5, [x2, #7]
0xffff7ab32174   180  ldur x6, [x1, #-1]
0xffff7ab32178   184  add x5, x5, x6
0xffff7ab3217c   188  movz x16, #0x6902
0xffff7ab32180   192  eor x5, x5, x16
0xffff7ab32184   196  ubfx x5, x5, #2, #11
0xffff7ab32188   200  add x8, x5, x5, lsl #1
0xffff7ab3218c   204  ldr x6, pc+204 (addr 0x0000ffff7ab32258)    ;; external reference (StubCache::primary_->key)
0xffff7ab32190   208  add x6, x6, x8, lsl #3
0xffff7ab32194   212  ldr x7, [x6]
0xffff7ab32198   216  cmp x2, x7
0xffff7ab3219c   220  b.ne #+0x34 (addr 0xffff7ab321d0)
0xffff7ab321a0   224  ldr x7, [x6, #16]
0xffff7ab321a4   228  ldur x8, [x1, #-1]
0xffff7ab321a8   232  cmp x7, x8
0xffff7ab321ac   236  b.ne #+0x24 (addr 0xffff7ab321d0)
0xffff7ab321b0   240  ldr x6, [x6, #8]
0xffff7ab321b4   244  ldur w7, [x6, #63]
0xffff7ab321b8   248  and w7, w7, #0xffffffc7
0xffff7ab321bc   252  movz w16, #0x6902
0xffff7ab321c0   256  cmp w7, w16
0xffff7ab321c4   260  b.ne #+0xc (addr 0xffff7ab321d0)
0xffff7ab321c8   264  add x6, x6, #0x5f (95)
0xffff7ab321cc   268  br x6
0xffff7ab321d0   272  sub x5, x5, x2, lsr #2
0xffff7ab321d4   276  movz x16, #0x1a40
0xffff7ab321d8   280  add x5, x5, x16
0xffff7ab321dc   284  and x5, x5, #0x1ff
0xffff7ab321e0   288  add x8, x5, x5, lsl #1
0xffff7ab321e4   292  ldr x6, pc+124 (addr 0x0000ffff7ab32260)    ;; external reference (StubCache::secondary_->key)
0xffff7ab321e8   296  add x6, x6, x8, lsl #3
0xffff7ab321ec   300  ldr x7, [x6]
0xffff7ab321f0   304  cmp x2, x7
0xffff7ab321f4   308  b.ne #+0x34 (addr 0xffff7ab32228)
0xffff7ab321f8   312  ldr x7, [x6, #16]
0xffff7ab321fc   316  ldur x8, [x1, #-1]
0xffff7ab32200   320  cmp x7, x8
0xffff7ab32204   324  b.ne #+0x24 (addr 0xffff7ab32228)
0xffff7ab32208   328  ldr x6, [x6, #8]
0xffff7ab3220c   332  ldur w7, [x6, #63]
0xffff7ab32210   336  and w7, w7, #0xffffffc7
0xffff7ab32214   340  movz w16, #0x6902
0xffff7ab32218   344  cmp w7, w16
0xffff7ab3221c   348  b.ne #+0xc (addr 0xffff7ab32228)
0xffff7ab32220   352  add x6, x6, #0x5f (95)
0xffff7ab32224   356  br x6
0xffff7ab32228   360  sub csp, jssp, #0x28 (40)
0xffff7ab3222c   364  stp x4, x0, [jssp, #-32]!
0xffff7ab32230   368  stp x2, x1, [jssp, #16]
0xffff7ab32234   372  str x3, [jssp, #-8]!
0xffff7ab32238   376  movz x0, #0x5
0xffff7ab3223c   380  ldr x1, pc+44 (addr 0x0000ffff7ab32268)    ;; external reference (Runtime::StoreIC_Miss)
0xffff7ab32240   384  ldr x16, pc+48 (addr 0x0000ffff7ab32270)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab32244   388  br x16
0xffff7ab32248   392  ldr x6, [x26, #120]
0xffff7ab3224c   396  b #-0x170 (addr 0xffff7ab320dc)
0xffff7ab32250   400  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7ab32254   404  d63f03e0       constant
0xffff7ab32258   408  09ad8950       constant
0xffff7ab3225c   412  00000000       constant
0xffff7ab32260   416  09ae4950       constant
0xffff7ab32264   420  00000000       constant
0xffff7ab32268   424  00c87f60       constant
0xffff7ab3226c   428  00000000       constant
0xffff7ab32270   432  7ab06060       constant
0xffff7ab32274   436  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab3218c  external reference (StubCache::primary_->key)  (0x9ad8950)
0xffff7ab321e4  external reference (StubCache::secondary_->key)  (0x9ae4950)
0xffff7ab3223c  external reference (Runtime::StoreIC_Miss)  (0xc87f60)
0xffff7ab32240  code target (STUB)  (0xffff7ab06060)
0xffff7ab32250  constant pool (size 40)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 981)
0xffff7ab32520     0  movz x2, #0xe2c0
0xffff7ab32524     4  movk x2, #0x9ab, lsl #16
0xffff7ab32528     8  ldp x3, x0, [x2]
0xffff7ab3252c    12  adds x16, x3, #0x180 (384)
0xffff7ab32530    16  ccmp x16, x0, #nzCv, lo
0xffff7ab32534    20  b.hi #+0x1c8 (addr 0xffff7ab326fc)
0xffff7ab32538    24  str x16, [x2]
0xffff7ab3253c    28  orr x3, x3, #0x1
0xffff7ab32540    32  ldr x0, pc+552 (addr 0x0000ffff7ab32768)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab32544    36  stur x0, [x3, #-1]
0xffff7ab32548    40  movz x0, #0x2e00000000
0xffff7ab3254c    44  stur x0, [x3, #7]
0xffff7ab32550    48  stur x1, [x3, #15]
0xffff7ab32554    52  stur cp, [x3, #23]
0xffff7ab32558    56  ldr x0, pc+536 (addr 0x0000ffff7ab32770)    ;; object: 0x20d04519 <the hole>
0xffff7ab3255c    60  stur x0, [x3, #31]
0xffff7ab32560    64  ldur x0, [cp, #39]
0xffff7ab32564    68  stur x0, [x3, #39]
0xffff7ab32568    72  ldr x0, pc+528 (addr 0x0000ffff7ab32778)    ;; object: 0x20d04241 <undefined>
0xffff7ab3256c    76  stur x0, [x3, #47]
0xffff7ab32570    80  ldr x0, pc+528 (addr 0x0000ffff7ab32780)    ;; object: 0x20d04241 <undefined>
0xffff7ab32574    84  stur x0, [x3, #55]
0xffff7ab32578    88  ldr x0, pc+528 (addr 0x0000ffff7ab32788)    ;; object: 0x20d04241 <undefined>
0xffff7ab3257c    92  stur x0, [x3, #63]
0xffff7ab32580    96  ldr x0, pc+528 (addr 0x0000ffff7ab32790)    ;; object: 0x20d04241 <undefined>
0xffff7ab32584   100  stur x0, [x3, #71]
0xffff7ab32588   104  ldr x0, pc+528 (addr 0x0000ffff7ab32798)    ;; object: 0x20d04241 <undefined>
0xffff7ab3258c   108  stur x0, [x3, #79]
0xffff7ab32590   112  ldr x0, pc+528 (addr 0x0000ffff7ab327a0)    ;; object: 0x20d04241 <undefined>
0xffff7ab32594   116  stur x0, [x3, #87]
0xffff7ab32598   120  ldr x0, pc+528 (addr 0x0000ffff7ab327a8)    ;; object: 0x20d04241 <undefined>
0xffff7ab3259c   124  stur x0, [x3, #95]
0xffff7ab325a0   128  ldr x0, pc+528 (addr 0x0000ffff7ab327b0)    ;; object: 0x20d04241 <undefined>
0xffff7ab325a4   132  stur x0, [x3, #103]
0xffff7ab325a8   136  ldr x0, pc+528 (addr 0x0000ffff7ab327b8)    ;; object: 0x20d04241 <undefined>
0xffff7ab325ac   140  stur x0, [x3, #111]
0xffff7ab325b0   144  ldr x0, pc+528 (addr 0x0000ffff7ab327c0)    ;; object: 0x20d04241 <undefined>
0xffff7ab325b4   148  stur x0, [x3, #119]
0xffff7ab325b8   152  ldr x0, pc+528 (addr 0x0000ffff7ab327c8)    ;; object: 0x20d04241 <undefined>
0xffff7ab325bc   156  stur x0, [x3, #127]
0xffff7ab325c0   160  ldr x0, pc+528 (addr 0x0000ffff7ab327d0)    ;; object: 0x20d04241 <undefined>
0xffff7ab325c4   164  stur x0, [x3, #135]
0xffff7ab325c8   168  ldr x0, pc+528 (addr 0x0000ffff7ab327d8)    ;; object: 0x20d04241 <undefined>
0xffff7ab325cc   172  stur x0, [x3, #143]
0xffff7ab325d0   176  ldr x0, pc+528 (addr 0x0000ffff7ab327e0)    ;; object: 0x20d04241 <undefined>
0xffff7ab325d4   180  stur x0, [x3, #151]
0xffff7ab325d8   184  ldr x0, pc+528 (addr 0x0000ffff7ab327e8)    ;; object: 0x20d04241 <undefined>
0xffff7ab325dc   188  stur x0, [x3, #159]
0xffff7ab325e0   192  ldr x0, pc+528 (addr 0x0000ffff7ab327f0)    ;; object: 0x20d04241 <undefined>
0xffff7ab325e4   196  stur x0, [x3, #167]
0xffff7ab325e8   200  ldr x0, pc+528 (addr 0x0000ffff7ab327f8)    ;; object: 0x20d04241 <undefined>
0xffff7ab325ec   204  stur x0, [x3, #175]
0xffff7ab325f0   208  ldr x0, pc+528 (addr 0x0000ffff7ab32800)    ;; object: 0x20d04241 <undefined>
0xffff7ab325f4   212  stur x0, [x3, #183]
0xffff7ab325f8   216  ldr x0, pc+528 (addr 0x0000ffff7ab32808)    ;; object: 0x20d04241 <undefined>
0xffff7ab325fc   220  stur x0, [x3, #191]
0xffff7ab32600   224  ldr x0, pc+528 (addr 0x0000ffff7ab32810)    ;; object: 0x20d04241 <undefined>
0xffff7ab32604   228  stur x0, [x3, #199]
0xffff7ab32608   232  ldr x0, pc+528 (addr 0x0000ffff7ab32818)    ;; object: 0x20d04241 <undefined>
0xffff7ab3260c   236  stur x0, [x3, #207]
0xffff7ab32610   240  ldr x0, pc+528 (addr 0x0000ffff7ab32820)    ;; object: 0x20d04241 <undefined>
0xffff7ab32614   244  stur x0, [x3, #215]
0xffff7ab32618   248  ldr x0, pc+528 (addr 0x0000ffff7ab32828)    ;; object: 0x20d04241 <undefined>
0xffff7ab3261c   252  stur x0, [x3, #223]
0xffff7ab32620   256  ldr x0, pc+528 (addr 0x0000ffff7ab32830)    ;; object: 0x20d04241 <undefined>
0xffff7ab32624   260  stur x0, [x3, #231]
0xffff7ab32628   264  ldr x0, pc+528 (addr 0x0000ffff7ab32838)    ;; object: 0x20d04241 <undefined>
0xffff7ab3262c   268  stur x0, [x3, #239]
0xffff7ab32630   272  ldr x0, pc+528 (addr 0x0000ffff7ab32840)    ;; object: 0x20d04241 <undefined>
0xffff7ab32634   276  stur x0, [x3, #247]
0xffff7ab32638   280  ldr x0, pc+528 (addr 0x0000ffff7ab32848)    ;; object: 0x20d04241 <undefined>
0xffff7ab3263c   284  stur x0, [x3, #255]
0xffff7ab32640   288  ldr x0, pc+528 (addr 0x0000ffff7ab32850)    ;; object: 0x20d04241 <undefined>
0xffff7ab32644   292  movz x16, #0x107
0xffff7ab32648   296  str x0, [x3, x16]
0xffff7ab3264c   300  ldr x0, pc+524 (addr 0x0000ffff7ab32858)    ;; object: 0x20d04241 <undefined>
0xffff7ab32650   304  movz x16, #0x10f
0xffff7ab32654   308  str x0, [x3, x16]
0xffff7ab32658   312  ldr x0, pc+520 (addr 0x0000ffff7ab32860)    ;; object: 0x20d04241 <undefined>
0xffff7ab3265c   316  movz x16, #0x117
0xffff7ab32660   320  str x0, [x3, x16]
0xffff7ab32664   324  ldr x0, pc+516 (addr 0x0000ffff7ab32868)    ;; object: 0x20d04241 <undefined>
0xffff7ab32668   328  movz x16, #0x11f
0xffff7ab3266c   332  str x0, [x3, x16]
0xffff7ab32670   336  ldr x0, pc+512 (addr 0x0000ffff7ab32870)    ;; object: 0x20d04241 <undefined>
0xffff7ab32674   340  movz x16, #0x127
0xffff7ab32678   344  str x0, [x3, x16]
0xffff7ab3267c   348  ldr x0, pc+508 (addr 0x0000ffff7ab32878)    ;; object: 0x20d04241 <undefined>
0xffff7ab32680   352  movz x16, #0x12f
0xffff7ab32684   356  str x0, [x3, x16]
0xffff7ab32688   360  ldr x0, pc+504 (addr 0x0000ffff7ab32880)    ;; object: 0x20d04241 <undefined>
0xffff7ab3268c   364  movz x16, #0x137
0xffff7ab32690   368  str x0, [x3, x16]
0xffff7ab32694   372  ldr x0, pc+500 (addr 0x0000ffff7ab32888)    ;; object: 0x20d04241 <undefined>
0xffff7ab32698   376  movz x16, #0x13f
0xffff7ab3269c   380  str x0, [x3, x16]
0xffff7ab326a0   384  ldr x0, pc+496 (addr 0x0000ffff7ab32890)    ;; object: 0x20d04241 <undefined>
0xffff7ab326a4   388  movz x16, #0x147
0xffff7ab326a8   392  str x0, [x3, x16]
0xffff7ab326ac   396  ldr x0, pc+492 (addr 0x0000ffff7ab32898)    ;; object: 0x20d04241 <undefined>
0xffff7ab326b0   400  movz x16, #0x14f
0xffff7ab326b4   404  str x0, [x3, x16]
0xffff7ab326b8   408  ldr x0, pc+488 (addr 0x0000ffff7ab328a0)    ;; object: 0x20d04241 <undefined>
0xffff7ab326bc   412  movz x16, #0x157
0xffff7ab326c0   416  str x0, [x3, x16]
0xffff7ab326c4   420  ldr x0, pc+484 (addr 0x0000ffff7ab328a8)    ;; object: 0x20d04241 <undefined>
0xffff7ab326c8   424  movz x16, #0x15f
0xffff7ab326cc   428  str x0, [x3, x16]
0xffff7ab326d0   432  ldr x0, pc+480 (addr 0x0000ffff7ab328b0)    ;; object: 0x20d04241 <undefined>
0xffff7ab326d4   436  movz x16, #0x167
0xffff7ab326d8   440  str x0, [x3, x16]
0xffff7ab326dc   444  ldr x0, pc+476 (addr 0x0000ffff7ab328b8)    ;; object: 0x20d04241 <undefined>
0xffff7ab326e0   448  movz x16, #0x16f
0xffff7ab326e4   452  str x0, [x3, x16]
0xffff7ab326e8   456  ldr x0, pc+472 (addr 0x0000ffff7ab328c0)    ;; object: 0x20d04241 <undefined>
0xffff7ab326ec   460  movz x16, #0x177
0xffff7ab326f0   464  str x0, [x3, x16]
0xffff7ab326f4   468  mov x0, x3
0xffff7ab326f8   472  ret
0xffff7ab326fc   476  sub csp, jssp, #0x10 (16)
0xffff7ab32700   480  stp fp, lr, [jssp, #-16]!
0xffff7ab32704   484  movz fp, #0xa00000000
0xffff7ab32708   488  sub csp, jssp, #0x8 (8)
0xffff7ab3270c   492  str fp, [jssp, #-8]!
0xffff7ab32710   496  add fp, jssp, #0x8 (8)
0xffff7ab32714   500  movz x3, #0x0
0xffff7ab32718   504  mov x16, lr
0xffff7ab3271c   508  ldr x17, pc+428 (addr 0x0000ffff7ab328c8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab32720   512  blr x17
0xffff7ab32724   516  movz x0, #0x18000000000
0xffff7ab32728   520  movz x10, #0x0
0xffff7ab3272c   524  sub csp, jssp, #0x10 (16)
0xffff7ab32730   528  stp x10, x0, [jssp, #-16]!
0xffff7ab32734   532  movz x0, #0x2
0xffff7ab32738   536  movz x1, #0x5b88
0xffff7ab3273c   540  movk x1, #0xe2, lsl #16
0xffff7ab32740   544  ldr x16, pc+400 (addr 0x0000ffff7ab328d0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab32744   548  blr x16
0xffff7ab32748   552  str x0, [jssp, #24]
0xffff7ab3274c   556  ldr x16, pc+396 (addr 0x0000ffff7ab328d8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab32750   560  blr x16
0xffff7ab32754   564  ldr lr, [jssp, #16]
0xffff7ab32758   568  ldp xzr, fp, [jssp], #24
0xffff7ab3275c   572  b #-0x21c (addr 0xffff7ab32540)
0xffff7ab32760   576  58000bff       constant pool begin (num_const = 95)    ;; constant pool
0xffff7ab32764   580  d63f03e0       constant
0xffff7ab32768   584  4ec06149       constant
0xffff7ab3276c   588  00000000       constant
0xffff7ab32770   592  20d04519       constant
0xffff7ab32774   596  00000000       constant
0xffff7ab32778   600  20d04241       constant
0xffff7ab3277c   604  00000000       constant
0xffff7ab32780   608  20d04241       constant
0xffff7ab32784   612  00000000       constant
0xffff7ab32788   616  20d04241       constant
0xffff7ab3278c   620  00000000       constant
0xffff7ab32790   624  20d04241       constant
0xffff7ab32794   628  00000000       constant
0xffff7ab32798   632  20d04241       constant
0xffff7ab3279c   636  00000000       constant
0xffff7ab327a0   640  20d04241       constant
0xffff7ab327a4   644  00000000       constant
0xffff7ab327a8   648  20d04241       constant
0xffff7ab327ac   652  00000000       constant
0xffff7ab327b0   656  20d04241       constant
0xffff7ab327b4   660  00000000       constant
0xffff7ab327b8   664  20d04241       constant
0xffff7ab327bc   668  00000000       constant
0xffff7ab327c0   672  20d04241       constant
0xffff7ab327c4   676  00000000       constant
0xffff7ab327c8   680  20d04241       constant
0xffff7ab327cc   684  00000000       constant
0xffff7ab327d0   688  20d04241       constant
0xffff7ab327d4   692  00000000       constant
0xffff7ab327d8   696  20d04241       constant
0xffff7ab327dc   700  00000000       constant
0xffff7ab327e0   704  20d04241       constant
0xffff7ab327e4   708  00000000       constant
0xffff7ab327e8   712  20d04241       constant
0xffff7ab327ec   716  00000000       constant
0xffff7ab327f0   720  20d04241       constant
0xffff7ab327f4   724  00000000       constant
0xffff7ab327f8   728  20d04241       constant
0xffff7ab327fc   732  00000000       constant
0xffff7ab32800   736  20d04241       constant
0xffff7ab32804   740  00000000       constant
0xffff7ab32808   744  20d04241       constant
0xffff7ab3280c   748  00000000       constant
0xffff7ab32810   752  20d04241       constant
0xffff7ab32814   756  00000000       constant
0xffff7ab32818   760  20d04241       constant
0xffff7ab3281c   764  00000000       constant
0xffff7ab32820   768  20d04241       constant
0xffff7ab32824   772  00000000       constant
0xffff7ab32828   776  20d04241       constant
0xffff7ab3282c   780  00000000       constant
0xffff7ab32830   784  20d04241       constant
0xffff7ab32834   788  00000000       constant
0xffff7ab32838   792  20d04241       constant
0xffff7ab3283c   796  00000000       constant
0xffff7ab32840   800  20d04241       constant
0xffff7ab32844   804  00000000       constant
0xffff7ab32848   808  20d04241       constant
0xffff7ab3284c   812  00000000       constant
0xffff7ab32850   816  20d04241       constant
0xffff7ab32854   820  00000000       constant
0xffff7ab32858   824  20d04241       constant
0xffff7ab3285c   828  00000000       constant
0xffff7ab32860   832  20d04241       constant
0xffff7ab32864   836  00000000       constant
0xffff7ab32868   840  20d04241       constant
0xffff7ab3286c   844  00000000       constant
0xffff7ab32870   848  20d04241       constant
0xffff7ab32874   852  00000000       constant
0xffff7ab32878   856  20d04241       constant
0xffff7ab3287c   860  00000000       constant
0xffff7ab32880   864  20d04241       constant
0xffff7ab32884   868  00000000       constant
0xffff7ab32888   872  20d04241       constant
0xffff7ab3288c   876  00000000       constant
0xffff7ab32890   880  20d04241       constant
0xffff7ab32894   884  00000000       constant
0xffff7ab32898   888  20d04241       constant
0xffff7ab3289c   892  00000000       constant
0xffff7ab328a0   896  20d04241       constant
0xffff7ab328a4   900  00000000       constant
0xffff7ab328a8   904  20d04241       constant
0xffff7ab328ac   908  00000000       constant
0xffff7ab328b0   912  20d04241       constant
0xffff7ab328b4   916  00000000       constant
0xffff7ab328b8   920  20d04241       constant
0xffff7ab328bc   924  00000000       constant
0xffff7ab328c0   928  20d04241       constant
0xffff7ab328c4   932  00000000       constant
0xffff7ab328c8   936  7ab06820       constant
0xffff7ab328cc   940  0000ffff       constant
0xffff7ab328d0   944  7ab06260       constant
0xffff7ab328d4   948  0000ffff       constant
0xffff7ab328d8   952  7ab068e0       constant
0xffff7ab328dc   956  0000ffff       constant


Safepoints (size = 21)
0xffff7ab32748   552  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 53)
0xffff7ab32540  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab32558  embedded object  (0x20d04519 <the hole>)
0xffff7ab32568  embedded object  (0x20d04241 <undefined>)
0xffff7ab32570  embedded object  (0x20d04241 <undefined>)
0xffff7ab32578  embedded object  (0x20d04241 <undefined>)
0xffff7ab32580  embedded object  (0x20d04241 <undefined>)
0xffff7ab32588  embedded object  (0x20d04241 <undefined>)
0xffff7ab32590  embedded object  (0x20d04241 <undefined>)
0xffff7ab32598  embedded object  (0x20d04241 <undefined>)
0xffff7ab325a0  embedded object  (0x20d04241 <undefined>)
0xffff7ab325a8  embedded object  (0x20d04241 <undefined>)
0xffff7ab325b0  embedded object  (0x20d04241 <undefined>)
0xffff7ab325b8  embedded object  (0x20d04241 <undefined>)
0xffff7ab325c0  embedded object  (0x20d04241 <undefined>)
0xffff7ab325c8  embedded object  (0x20d04241 <undefined>)
0xffff7ab325d0  embedded object  (0x20d04241 <undefined>)
0xffff7ab325d8  embedded object  (0x20d04241 <undefined>)
0xffff7ab325e0  embedded object  (0x20d04241 <undefined>)
0xffff7ab325e8  embedded object  (0x20d04241 <undefined>)
0xffff7ab325f0  embedded object  (0x20d04241 <undefined>)
0xffff7ab325f8  embedded object  (0x20d04241 <undefined>)
0xffff7ab32600  embedded object  (0x20d04241 <undefined>)
0xffff7ab32608  embedded object  (0x20d04241 <undefined>)
0xffff7ab32610  embedded object  (0x20d04241 <undefined>)
0xffff7ab32618  embedded object  (0x20d04241 <undefined>)
0xffff7ab32620  embedded object  (0x20d04241 <undefined>)
0xffff7ab32628  embedded object  (0x20d04241 <undefined>)
0xffff7ab32630  embedded object  (0x20d04241 <undefined>)
0xffff7ab32638  embedded object  (0x20d04241 <undefined>)
0xffff7ab32640  embedded object  (0x20d04241 <undefined>)
0xffff7ab3264c  embedded object  (0x20d04241 <undefined>)
0xffff7ab32658  embedded object  (0x20d04241 <undefined>)
0xffff7ab32664  embedded object  (0x20d04241 <undefined>)
0xffff7ab32670  embedded object  (0x20d04241 <undefined>)
0xffff7ab3267c  embedded object  (0x20d04241 <undefined>)
0xffff7ab32688  embedded object  (0x20d04241 <undefined>)
0xffff7ab32694  embedded object  (0x20d04241 <undefined>)
0xffff7ab326a0  embedded object  (0x20d04241 <undefined>)
0xffff7ab326ac  embedded object  (0x20d04241 <undefined>)
0xffff7ab326b8  embedded object  (0x20d04241 <undefined>)
0xffff7ab326c4  embedded object  (0x20d04241 <undefined>)
0xffff7ab326d0  embedded object  (0x20d04241 <undefined>)
0xffff7ab326dc  embedded object  (0x20d04241 <undefined>)
0xffff7ab326e8  embedded object  (0x20d04241 <undefined>)
0xffff7ab3271c  code target (STUB)  (0xffff7ab06820)
0xffff7ab32740  code target (STUB)  (0xffff7ab06260)
0xffff7ab3274c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab32760  constant pool (size 384)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0xffff7ab32960     0  adr xzr, #+0x40 (addr 0xffff7ab329a0)
0xffff7ab32964     4  adr xzr, #+0x360 (addr 0xffff7ab32cc4)
0xffff7ab32968     8  ldr x16, pc+1736 (addr 0x0000ffff7ab33030)    ;; external reference (store_buffer_top)
0xffff7ab3296c    12  ldr x1, [x16]
0xffff7ab32970    16  str x2, [x1], #8
0xffff7ab32974    20  str x1, [x16]
0xffff7ab32978    24  tst x1, #0x1ffff
0xffff7ab3297c    28  b.eq #+0x8 (addr 0xffff7ab32984)
0xffff7ab32980    32  ret
0xffff7ab32984    36  sub csp, jssp, #0x8 (8)
0xffff7ab32988    40  str lr, [jssp, #-8]!
0xffff7ab3298c    44  ldr x17, pc+1708 (addr 0x0000ffff7ab33038)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab32990    48  blr x17
0xffff7ab32994    52  ldr lr, [jssp], #8
0xffff7ab32998    56  ret
0xffff7ab3299c    60  ret
0xffff7ab329a0    64  sub csp, jssp, #0x10 (16)
0xffff7ab329a4    68  stp x3, x0, [jssp, #-16]!
0xffff7ab329a8    72  ldr x1, [x2]
0xffff7ab329ac    76  and x16, x1, #0xfffffffffff00000
0xffff7ab329b0    80  ldr x16, [x16, #8]
0xffff7ab329b4    84  tst x16, #0x18
0xffff7ab329b8    88  b.eq #+0x1d8 (addr 0xffff7ab32b90)
0xffff7ab329bc    92  and x16, x4, #0xfffffffffff00000
0xffff7ab329c0    96  ldr x16, [x16, #8]
0xffff7ab329c4   100  tst x16, #0x18
0xffff7ab329c8   104  b.ne #+0x1c8 (addr 0xffff7ab32b90)
0xffff7ab329cc   108  and x1, x4, #0xfffffffffff00000
0xffff7ab329d0   112  ldr x0, [x1, #104]
0xffff7ab329d4   116  subs x0, x0, #0x1 (1)
0xffff7ab329d8   120  str x0, [x1, #104]
0xffff7ab329dc   124  b.mi #+0xc4 (addr 0xffff7ab32aa0)
0xffff7ab329e0   128  ubfx x16, x4, #8, #12
0xffff7ab329e4   132  and x1, x4, #0xfffffffffff00000
0xffff7ab329e8   136  add x1, x1, x16, lsl #2
0xffff7ab329ec   140  ubfx x0, x4, #3, #5
0xffff7ab329f0   144  ldr x1, [x1, #360]
0xffff7ab329f4   148  lsr x1, x1, x0
0xffff7ab329f8   152  tbz w1, #0, #+0x8 (addr 0xffff7ab32a00)
0xffff7ab329fc   156  tbnz w1, #1, #+0x3c (addr 0xffff7ab32a38)
0xffff7ab32a00   160  ldp x3, x0, [jssp], #16
0xffff7ab32a04   164  ldr x16, pc+1596 (addr 0x0000ffff7ab33040)    ;; external reference (store_buffer_top)
0xffff7ab32a08   168  ldr x1, [x16]
0xffff7ab32a0c   172  str x2, [x1], #8
0xffff7ab32a10   176  str x1, [x16]
0xffff7ab32a14   180  tst x1, #0x1ffff
0xffff7ab32a18   184  b.eq #+0x8 (addr 0xffff7ab32a20)
0xffff7ab32a1c   188  ret
0xffff7ab32a20   192  sub csp, jssp, #0x8 (8)
0xffff7ab32a24   196  str lr, [jssp, #-8]!
0xffff7ab32a28   200  ldr x17, pc+1568 (addr 0x0000ffff7ab33048)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab32a2c   204  blr x17
0xffff7ab32a30   208  ldr lr, [jssp], #8
0xffff7ab32a34   212  ret
0xffff7ab32a38   216  ldr x1, [x2]
0xffff7ab32a3c   220  sub csp, jssp, #0x10 (16)
0xffff7ab32a40   224  stp x4, x2, [jssp, #-16]!
0xffff7ab32a44   228  ubfx x16, x1, #8, #12
0xffff7ab32a48   232  and x0, x1, #0xfffffffffff00000
0xffff7ab32a4c   236  add x0, x0, x16, lsl #2
0xffff7ab32a50   240  ubfx x4, x1, #3, #5
0xffff7ab32a54   244  ldr x2, [x0, #360]
0xffff7ab32a58   248  lsr x2, x2, x4
0xffff7ab32a5c   252  tbz w2, #0, #+0x40 (addr 0xffff7ab32a9c)
0xffff7ab32a60   256  ldp x4, x2, [jssp], #16
0xffff7ab32a64   260  ldp x3, x0, [jssp], #16
0xffff7ab32a68   264  ldr x16, pc+1512 (addr 0x0000ffff7ab33050)    ;; external reference (store_buffer_top)
0xffff7ab32a6c   268  ldr x1, [x16]
0xffff7ab32a70   272  str x2, [x1], #8
0xffff7ab32a74   276  str x1, [x16]
0xffff7ab32a78   280  tst x1, #0x1ffff
0xffff7ab32a7c   284  b.eq #+0x8 (addr 0xffff7ab32a84)
0xffff7ab32a80   288  ret
0xffff7ab32a84   292  sub csp, jssp, #0x8 (8)
0xffff7ab32a88   296  str lr, [jssp, #-8]!
0xffff7ab32a8c   300  ldr x17, pc+1484 (addr 0x0000ffff7ab33058)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab32a90   304  blr x17
0xffff7ab32a94   308  ldr lr, [jssp], #8
0xffff7ab32a98   312  ret
0xffff7ab32a9c   316  ldp x4, x2, [jssp], #16
0xffff7ab32aa0   320  sub csp, jssp, #0x78 (120)
0xffff7ab32aa4   324  stp x14, x15, [jssp, #-32]!
0xffff7ab32aa8   328  stp x18, lr, [jssp, #16]
0xffff7ab32aac   332  stp x10, x11, [jssp, #-32]!
0xffff7ab32ab0   336  stp x12, x13, [jssp, #16]
0xffff7ab32ab4   340  stp x6, x7, [jssp, #-32]!
0xffff7ab32ab8   344  stp x8, x9, [jssp, #16]
0xffff7ab32abc   348  stp x2, x4, [jssp, #-24]!
0xffff7ab32ac0   352  str x5, [jssp, #16]
0xffff7ab32ac4   356  sub csp, jssp, #0xb0 (176)
0xffff7ab32ac8   360  stp d26, d27, [jssp, #-32]!
0xffff7ab32acc   364  stp d28, d29, [jssp, #16]
0xffff7ab32ad0   368  stp d22, d23, [jssp, #-32]!
0xffff7ab32ad4   372  stp d24, d25, [jssp, #16]
0xffff7ab32ad8   376  stp d18, d19, [jssp, #-32]!
0xffff7ab32adc   380  stp d20, d21, [jssp, #16]
0xffff7ab32ae0   384  stp d6, d7, [jssp, #-32]!
0xffff7ab32ae4   388  stp d16, d17, [jssp, #16]
0xffff7ab32ae8   392  stp d2, d3, [jssp, #-32]!
0xffff7ab32aec   396  stp d4, d5, [jssp, #16]
0xffff7ab32af0   400  stp d0, d1, [jssp, #-16]!
0xffff7ab32af4   404  mov x0, x4
0xffff7ab32af8   408  mov x1, x2
0xffff7ab32afc   412  ldr x2, pc+1380 (addr 0x0000ffff7ab33060)    ;; external reference (isolate)
0xffff7ab32b00   416  ldr x16, pc+1384 (addr 0x0000ffff7ab33068)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab32b04   420  and csp, jssp, #0xfffffffffffffff0
0xffff7ab32b08   424  blr x16
0xffff7ab32b0c   428  ldp d2, d3, [jssp, #16]
0xffff7ab32b10   432  ldp d0, d1, [jssp], #32
0xffff7ab32b14   436  ldp d6, d7, [jssp, #16]
0xffff7ab32b18   440  ldp d4, d5, [jssp], #32
0xffff7ab32b1c   444  ldp d18, d19, [jssp, #16]
0xffff7ab32b20   448  ldp d16, d17, [jssp], #32
0xffff7ab32b24   452  ldp d22, d23, [jssp, #16]
0xffff7ab32b28   456  ldp d20, d21, [jssp], #32
0xffff7ab32b2c   460  ldp d26, d27, [jssp, #16]
0xffff7ab32b30   464  ldp d24, d25, [jssp], #32
0xffff7ab32b34   468  ldp d28, d29, [jssp], #16
0xffff7ab32b38   472  ldp x5, x6, [jssp, #16]
0xffff7ab32b3c   476  ldp x2, x4, [jssp], #32
0xffff7ab32b40   480  ldp x9, x10, [jssp, #16]
0xffff7ab32b44   484  ldp x7, x8, [jssp], #32
0xffff7ab32b48   488  ldp x13, x14, [jssp, #16]
0xffff7ab32b4c   492  ldp x11, x12, [jssp], #32
0xffff7ab32b50   496  ldr lr, [jssp, #16]
0xffff7ab32b54   500  ldp x15, x18, [jssp], #24
0xffff7ab32b58   504  ldp x3, x0, [jssp], #16
0xffff7ab32b5c   508  ldr x16, pc+1300 (addr 0x0000ffff7ab33070)    ;; external reference (store_buffer_top)
0xffff7ab32b60   512  ldr x1, [x16]
0xffff7ab32b64   516  str x2, [x1], #8
0xffff7ab32b68   520  str x1, [x16]
0xffff7ab32b6c   524  tst x1, #0x1ffff
0xffff7ab32b70   528  b.eq #+0x8 (addr 0xffff7ab32b78)
0xffff7ab32b74   532  ret
0xffff7ab32b78   536  sub csp, jssp, #0x8 (8)
0xffff7ab32b7c   540  str lr, [jssp, #-8]!
0xffff7ab32b80   544  ldr x17, pc+1272 (addr 0x0000ffff7ab33078)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab32b84   548  blr x17
0xffff7ab32b88   552  ldr lr, [jssp], #8
0xffff7ab32b8c   556  ret
0xffff7ab32b90   560  and x1, x4, #0xfffffffffff00000
0xffff7ab32b94   564  ldr x0, [x1, #104]
0xffff7ab32b98   568  subs x0, x0, #0x1 (1)
0xffff7ab32b9c   572  str x0, [x1, #104]
0xffff7ab32ba0   576  b.mi #+0x64 (addr 0xffff7ab32c04)
0xffff7ab32ba4   580  ubfx x16, x4, #8, #12
0xffff7ab32ba8   584  and x1, x4, #0xfffffffffff00000
0xffff7ab32bac   588  add x1, x1, x16, lsl #2
0xffff7ab32bb0   592  ubfx x0, x4, #3, #5
0xffff7ab32bb4   596  ldr x1, [x1, #360]
0xffff7ab32bb8   600  lsr x1, x1, x0
0xffff7ab32bbc   604  tbz w1, #0, #+0x8 (addr 0xffff7ab32bc4)
0xffff7ab32bc0   608  tbnz w1, #1, #+0xc (addr 0xffff7ab32bcc)
0xffff7ab32bc4   612  ldp x3, x0, [jssp], #16
0xffff7ab32bc8   616  ret
0xffff7ab32bcc   620  ldr x1, [x2]
0xffff7ab32bd0   624  sub csp, jssp, #0x10 (16)
0xffff7ab32bd4   628  stp x4, x2, [jssp, #-16]!
0xffff7ab32bd8   632  ubfx x16, x1, #8, #12
0xffff7ab32bdc   636  and x0, x1, #0xfffffffffff00000
0xffff7ab32be0   640  add x0, x0, x16, lsl #2
0xffff7ab32be4   644  ubfx x4, x1, #3, #5
0xffff7ab32be8   648  ldr x2, [x0, #360]
0xffff7ab32bec   652  lsr x2, x2, x4
0xffff7ab32bf0   656  tbz w2, #0, #+0x10 (addr 0xffff7ab32c00)
0xffff7ab32bf4   660  ldp x4, x2, [jssp], #16
0xffff7ab32bf8   664  ldp x3, x0, [jssp], #16
0xffff7ab32bfc   668  ret
0xffff7ab32c00   672  ldp x4, x2, [jssp], #16
0xffff7ab32c04   676  sub csp, jssp, #0x78 (120)
0xffff7ab32c08   680  stp x14, x15, [jssp, #-32]!
0xffff7ab32c0c   684  stp x18, lr, [jssp, #16]
0xffff7ab32c10   688  stp x10, x11, [jssp, #-32]!
0xffff7ab32c14   692  stp x12, x13, [jssp, #16]
0xffff7ab32c18   696  stp x6, x7, [jssp, #-32]!
0xffff7ab32c1c   700  stp x8, x9, [jssp, #16]
0xffff7ab32c20   704  stp x2, x4, [jssp, #-24]!
0xffff7ab32c24   708  str x5, [jssp, #16]
0xffff7ab32c28   712  sub csp, jssp, #0xb0 (176)
0xffff7ab32c2c   716  stp d26, d27, [jssp, #-32]!
0xffff7ab32c30   720  stp d28, d29, [jssp, #16]
0xffff7ab32c34   724  stp d22, d23, [jssp, #-32]!
0xffff7ab32c38   728  stp d24, d25, [jssp, #16]
0xffff7ab32c3c   732  stp d18, d19, [jssp, #-32]!
0xffff7ab32c40   736  stp d20, d21, [jssp, #16]
0xffff7ab32c44   740  stp d6, d7, [jssp, #-32]!
0xffff7ab32c48   744  stp d16, d17, [jssp, #16]
0xffff7ab32c4c   748  stp d2, d3, [jssp, #-32]!
0xffff7ab32c50   752  stp d4, d5, [jssp, #16]
0xffff7ab32c54   756  stp d0, d1, [jssp, #-16]!
0xffff7ab32c58   760  mov x0, x4
0xffff7ab32c5c   764  mov x1, x2
0xffff7ab32c60   768  ldr x2, pc+1056 (addr 0x0000ffff7ab33080)    ;; external reference (isolate)
0xffff7ab32c64   772  ldr x16, pc+1060 (addr 0x0000ffff7ab33088)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab32c68   776  and csp, jssp, #0xfffffffffffffff0
0xffff7ab32c6c   780  blr x16
0xffff7ab32c70   784  ldp d2, d3, [jssp, #16]
0xffff7ab32c74   788  ldp d0, d1, [jssp], #32
0xffff7ab32c78   792  ldp d6, d7, [jssp, #16]
0xffff7ab32c7c   796  ldp d4, d5, [jssp], #32
0xffff7ab32c80   800  ldp d18, d19, [jssp, #16]
0xffff7ab32c84   804  ldp d16, d17, [jssp], #32
0xffff7ab32c88   808  ldp d22, d23, [jssp, #16]
0xffff7ab32c8c   812  ldp d20, d21, [jssp], #32
0xffff7ab32c90   816  ldp d26, d27, [jssp, #16]
0xffff7ab32c94   820  ldp d24, d25, [jssp], #32
0xffff7ab32c98   824  ldp d28, d29, [jssp], #16
0xffff7ab32c9c   828  ldp x5, x6, [jssp, #16]
0xffff7ab32ca0   832  ldp x2, x4, [jssp], #32
0xffff7ab32ca4   836  ldp x9, x10, [jssp, #16]
0xffff7ab32ca8   840  ldp x7, x8, [jssp], #32
0xffff7ab32cac   844  ldp x13, x14, [jssp, #16]
0xffff7ab32cb0   848  ldp x11, x12, [jssp], #32
0xffff7ab32cb4   852  ldr lr, [jssp, #16]
0xffff7ab32cb8   856  ldp x15, x18, [jssp], #24
0xffff7ab32cbc   860  ldp x3, x0, [jssp], #16
0xffff7ab32cc0   864  ret
0xffff7ab32cc4   868  sub csp, jssp, #0x10 (16)
0xffff7ab32cc8   872  stp x3, x0, [jssp, #-16]!
0xffff7ab32ccc   876  ldr x1, [x2]
0xffff7ab32cd0   880  and x16, x1, #0xfffffffffff00000
0xffff7ab32cd4   884  ldr x16, [x16, #8]
0xffff7ab32cd8   888  tst x16, #0x18
0xffff7ab32cdc   892  b.eq #+0x1f8 (addr 0xffff7ab32ed4)
0xffff7ab32ce0   896  and x16, x4, #0xfffffffffff00000
0xffff7ab32ce4   900  ldr x16, [x16, #8]
0xffff7ab32ce8   904  tst x16, #0x18
0xffff7ab32cec   908  b.ne #+0x1e8 (addr 0xffff7ab32ed4)
0xffff7ab32cf0   912  and x1, x4, #0xfffffffffff00000
0xffff7ab32cf4   916  ldr x0, [x1, #104]
0xffff7ab32cf8   920  subs x0, x0, #0x1 (1)
0xffff7ab32cfc   924  str x0, [x1, #104]
0xffff7ab32d00   928  b.mi #+0xe4 (addr 0xffff7ab32de4)
0xffff7ab32d04   932  ubfx x16, x4, #8, #12
0xffff7ab32d08   936  and x1, x4, #0xfffffffffff00000
0xffff7ab32d0c   940  add x1, x1, x16, lsl #2
0xffff7ab32d10   944  ubfx x0, x4, #3, #5
0xffff7ab32d14   948  ldr x1, [x1, #360]
0xffff7ab32d18   952  lsr x1, x1, x0
0xffff7ab32d1c   956  tbz w1, #0, #+0x8 (addr 0xffff7ab32d24)
0xffff7ab32d20   960  tbnz w1, #1, #+0x3c (addr 0xffff7ab32d5c)
0xffff7ab32d24   964  ldp x3, x0, [jssp], #16
0xffff7ab32d28   968  ldr x16, pc+872 (addr 0x0000ffff7ab33090)    ;; external reference (store_buffer_top)
0xffff7ab32d2c   972  ldr x1, [x16]
0xffff7ab32d30   976  str x2, [x1], #8
0xffff7ab32d34   980  str x1, [x16]
0xffff7ab32d38   984  tst x1, #0x1ffff
0xffff7ab32d3c   988  b.eq #+0x8 (addr 0xffff7ab32d44)
0xffff7ab32d40   992  ret
0xffff7ab32d44   996  sub csp, jssp, #0x8 (8)
0xffff7ab32d48  1000  str lr, [jssp, #-8]!
0xffff7ab32d4c  1004  ldr x17, pc+844 (addr 0x0000ffff7ab33098)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab32d50  1008  blr x17
0xffff7ab32d54  1012  ldr lr, [jssp], #8
0xffff7ab32d58  1016  ret
0xffff7ab32d5c  1020  ldr x1, [x2]
0xffff7ab32d60  1024  and x0, x1, #0xfffffffffff00000
0xffff7ab32d64  1028  ldr x0, [x0, #8]
0xffff7ab32d68  1032  tbz w0, #6, #+0x18 (addr 0xffff7ab32d80)
0xffff7ab32d6c  1036  and x0, x4, #0xfffffffffff00000
0xffff7ab32d70  1040  ldr x0, [x0, #8]
0xffff7ab32d74  1044  movz x16, #0x58
0xffff7ab32d78  1048  tst x0, x16
0xffff7ab32d7c  1052  b.eq #+0x68 (addr 0xffff7ab32de4)
0xffff7ab32d80  1056  sub csp, jssp, #0x10 (16)
0xffff7ab32d84  1060  stp x4, x2, [jssp, #-16]!
0xffff7ab32d88  1064  ubfx x16, x1, #8, #12
0xffff7ab32d8c  1068  and x0, x1, #0xfffffffffff00000
0xffff7ab32d90  1072  add x0, x0, x16, lsl #2
0xffff7ab32d94  1076  ubfx x4, x1, #3, #5
0xffff7ab32d98  1080  ldr x2, [x0, #360]
0xffff7ab32d9c  1084  lsr x2, x2, x4
0xffff7ab32da0  1088  tbz w2, #0, #+0x40 (addr 0xffff7ab32de0)
0xffff7ab32da4  1092  ldp x4, x2, [jssp], #16
0xffff7ab32da8  1096  ldp x3, x0, [jssp], #16
0xffff7ab32dac  1100  ldr x16, pc+756 (addr 0x0000ffff7ab330a0)    ;; external reference (store_buffer_top)
0xffff7ab32db0  1104  ldr x1, [x16]
0xffff7ab32db4  1108  str x2, [x1], #8
0xffff7ab32db8  1112  str x1, [x16]
0xffff7ab32dbc  1116  tst x1, #0x1ffff
0xffff7ab32dc0  1120  b.eq #+0x8 (addr 0xffff7ab32dc8)
0xffff7ab32dc4  1124  ret
0xffff7ab32dc8  1128  sub csp, jssp, #0x8 (8)
0xffff7ab32dcc  1132  str lr, [jssp, #-8]!
0xffff7ab32dd0  1136  ldr x17, pc+728 (addr 0x0000ffff7ab330a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab32dd4  1140  blr x17
0xffff7ab32dd8  1144  ldr lr, [jssp], #8
0xffff7ab32ddc  1148  ret
0xffff7ab32de0  1152  ldp x4, x2, [jssp], #16
0xffff7ab32de4  1156  sub csp, jssp, #0x78 (120)
0xffff7ab32de8  1160  stp x14, x15, [jssp, #-32]!
0xffff7ab32dec  1164  stp x18, lr, [jssp, #16]
0xffff7ab32df0  1168  stp x10, x11, [jssp, #-32]!
0xffff7ab32df4  1172  stp x12, x13, [jssp, #16]
0xffff7ab32df8  1176  stp x6, x7, [jssp, #-32]!
0xffff7ab32dfc  1180  stp x8, x9, [jssp, #16]
0xffff7ab32e00  1184  stp x2, x4, [jssp, #-24]!
0xffff7ab32e04  1188  str x5, [jssp, #16]
0xffff7ab32e08  1192  sub csp, jssp, #0xb0 (176)
0xffff7ab32e0c  1196  stp d26, d27, [jssp, #-32]!
0xffff7ab32e10  1200  stp d28, d29, [jssp, #16]
0xffff7ab32e14  1204  stp d22, d23, [jssp, #-32]!
0xffff7ab32e18  1208  stp d24, d25, [jssp, #16]
0xffff7ab32e1c  1212  stp d18, d19, [jssp, #-32]!
0xffff7ab32e20  1216  stp d20, d21, [jssp, #16]
0xffff7ab32e24  1220  stp d6, d7, [jssp, #-32]!
0xffff7ab32e28  1224  stp d16, d17, [jssp, #16]
0xffff7ab32e2c  1228  stp d2, d3, [jssp, #-32]!
0xffff7ab32e30  1232  stp d4, d5, [jssp, #16]
0xffff7ab32e34  1236  stp d0, d1, [jssp, #-16]!
0xffff7ab32e38  1240  mov x0, x4
0xffff7ab32e3c  1244  mov x1, x2
0xffff7ab32e40  1248  ldr x2, pc+624 (addr 0x0000ffff7ab330b0)    ;; external reference (isolate)
0xffff7ab32e44  1252  ldr x16, pc+628 (addr 0x0000ffff7ab330b8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab32e48  1256  and csp, jssp, #0xfffffffffffffff0
0xffff7ab32e4c  1260  blr x16
0xffff7ab32e50  1264  ldp d2, d3, [jssp, #16]
0xffff7ab32e54  1268  ldp d0, d1, [jssp], #32
0xffff7ab32e58  1272  ldp d6, d7, [jssp, #16]
0xffff7ab32e5c  1276  ldp d4, d5, [jssp], #32
0xffff7ab32e60  1280  ldp d18, d19, [jssp, #16]
0xffff7ab32e64  1284  ldp d16, d17, [jssp], #32
0xffff7ab32e68  1288  ldp d22, d23, [jssp, #16]
0xffff7ab32e6c  1292  ldp d20, d21, [jssp], #32
0xffff7ab32e70  1296  ldp d26, d27, [jssp, #16]
0xffff7ab32e74  1300  ldp d24, d25, [jssp], #32
0xffff7ab32e78  1304  ldp d28, d29, [jssp], #16
0xffff7ab32e7c  1308  ldp x5, x6, [jssp, #16]
0xffff7ab32e80  1312  ldp x2, x4, [jssp], #32
0xffff7ab32e84  1316  ldp x9, x10, [jssp, #16]
0xffff7ab32e88  1320  ldp x7, x8, [jssp], #32
0xffff7ab32e8c  1324  ldp x13, x14, [jssp, #16]
0xffff7ab32e90  1328  ldp x11, x12, [jssp], #32
0xffff7ab32e94  1332  ldr lr, [jssp, #16]
0xffff7ab32e98  1336  ldp x15, x18, [jssp], #24
0xffff7ab32e9c  1340  ldp x3, x0, [jssp], #16
0xffff7ab32ea0  1344  ldr x16, pc+544 (addr 0x0000ffff7ab330c0)    ;; external reference (store_buffer_top)
0xffff7ab32ea4  1348  ldr x1, [x16]
0xffff7ab32ea8  1352  str x2, [x1], #8
0xffff7ab32eac  1356  str x1, [x16]
0xffff7ab32eb0  1360  tst x1, #0x1ffff
0xffff7ab32eb4  1364  b.eq #+0x8 (addr 0xffff7ab32ebc)
0xffff7ab32eb8  1368  ret
0xffff7ab32ebc  1372  sub csp, jssp, #0x8 (8)
0xffff7ab32ec0  1376  str lr, [jssp, #-8]!
0xffff7ab32ec4  1380  ldr x17, pc+516 (addr 0x0000ffff7ab330c8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab32ec8  1384  blr x17
0xffff7ab32ecc  1388  ldr lr, [jssp], #8
0xffff7ab32ed0  1392  ret
0xffff7ab32ed4  1396  and x1, x4, #0xfffffffffff00000
0xffff7ab32ed8  1400  ldr x0, [x1, #104]
0xffff7ab32edc  1404  subs x0, x0, #0x1 (1)
0xffff7ab32ee0  1408  str x0, [x1, #104]
0xffff7ab32ee4  1412  b.mi #+0x84 (addr 0xffff7ab32f68)
0xffff7ab32ee8  1416  ubfx x16, x4, #8, #12
0xffff7ab32eec  1420  and x1, x4, #0xfffffffffff00000
0xffff7ab32ef0  1424  add x1, x1, x16, lsl #2
0xffff7ab32ef4  1428  ubfx x0, x4, #3, #5
0xffff7ab32ef8  1432  ldr x1, [x1, #360]
0xffff7ab32efc  1436  lsr x1, x1, x0
0xffff7ab32f00  1440  tbz w1, #0, #+0x8 (addr 0xffff7ab32f08)
0xffff7ab32f04  1444  tbnz w1, #1, #+0xc (addr 0xffff7ab32f10)
0xffff7ab32f08  1448  ldp x3, x0, [jssp], #16
0xffff7ab32f0c  1452  ret
0xffff7ab32f10  1456  ldr x1, [x2]
0xffff7ab32f14  1460  and x0, x1, #0xfffffffffff00000
0xffff7ab32f18  1464  ldr x0, [x0, #8]
0xffff7ab32f1c  1468  tbz w0, #6, #+0x18 (addr 0xffff7ab32f34)
0xffff7ab32f20  1472  and x0, x4, #0xfffffffffff00000
0xffff7ab32f24  1476  ldr x0, [x0, #8]
0xffff7ab32f28  1480  movz x16, #0x58
0xffff7ab32f2c  1484  tst x0, x16
0xffff7ab32f30  1488  b.eq #+0x38 (addr 0xffff7ab32f68)
0xffff7ab32f34  1492  sub csp, jssp, #0x10 (16)
0xffff7ab32f38  1496  stp x4, x2, [jssp, #-16]!
0xffff7ab32f3c  1500  ubfx x16, x1, #8, #12
0xffff7ab32f40  1504  and x0, x1, #0xfffffffffff00000
0xffff7ab32f44  1508  add x0, x0, x16, lsl #2
0xffff7ab32f48  1512  ubfx x4, x1, #3, #5
0xffff7ab32f4c  1516  ldr x2, [x0, #360]
0xffff7ab32f50  1520  lsr x2, x2, x4
0xffff7ab32f54  1524  tbz w2, #0, #+0x10 (addr 0xffff7ab32f64)
0xffff7ab32f58  1528  ldp x4, x2, [jssp], #16
0xffff7ab32f5c  1532  ldp x3, x0, [jssp], #16
0xffff7ab32f60  1536  ret
0xffff7ab32f64  1540  ldp x4, x2, [jssp], #16
0xffff7ab32f68  1544  sub csp, jssp, #0x78 (120)
0xffff7ab32f6c  1548  stp x14, x15, [jssp, #-32]!
0xffff7ab32f70  1552  stp x18, lr, [jssp, #16]
0xffff7ab32f74  1556  stp x10, x11, [jssp, #-32]!
0xffff7ab32f78  1560  stp x12, x13, [jssp, #16]
0xffff7ab32f7c  1564  stp x6, x7, [jssp, #-32]!
0xffff7ab32f80  1568  stp x8, x9, [jssp, #16]
0xffff7ab32f84  1572  stp x2, x4, [jssp, #-24]!
0xffff7ab32f88  1576  str x5, [jssp, #16]
0xffff7ab32f8c  1580  sub csp, jssp, #0xb0 (176)
0xffff7ab32f90  1584  stp d26, d27, [jssp, #-32]!
0xffff7ab32f94  1588  stp d28, d29, [jssp, #16]
0xffff7ab32f98  1592  stp d22, d23, [jssp, #-32]!
0xffff7ab32f9c  1596  stp d24, d25, [jssp, #16]
0xffff7ab32fa0  1600  stp d18, d19, [jssp, #-32]!
0xffff7ab32fa4  1604  stp d20, d21, [jssp, #16]
0xffff7ab32fa8  1608  stp d6, d7, [jssp, #-32]!
0xffff7ab32fac  1612  stp d16, d17, [jssp, #16]
0xffff7ab32fb0  1616  stp d2, d3, [jssp, #-32]!
0xffff7ab32fb4  1620  stp d4, d5, [jssp, #16]
0xffff7ab32fb8  1624  stp d0, d1, [jssp, #-16]!
0xffff7ab32fbc  1628  mov x0, x4
0xffff7ab32fc0  1632  mov x1, x2
0xffff7ab32fc4  1636  ldr x2, pc+268 (addr 0x0000ffff7ab330d0)    ;; external reference (isolate)
0xffff7ab32fc8  1640  ldr x16, pc+272 (addr 0x0000ffff7ab330d8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab32fcc  1644  and csp, jssp, #0xfffffffffffffff0
0xffff7ab32fd0  1648  blr x16
0xffff7ab32fd4  1652  ldp d2, d3, [jssp, #16]
0xffff7ab32fd8  1656  ldp d0, d1, [jssp], #32
0xffff7ab32fdc  1660  ldp d6, d7, [jssp, #16]
0xffff7ab32fe0  1664  ldp d4, d5, [jssp], #32
0xffff7ab32fe4  1668  ldp d18, d19, [jssp, #16]
0xffff7ab32fe8  1672  ldp d16, d17, [jssp], #32
0xffff7ab32fec  1676  ldp d22, d23, [jssp, #16]
0xffff7ab32ff0  1680  ldp d20, d21, [jssp], #32
0xffff7ab32ff4  1684  ldp d26, d27, [jssp, #16]
0xffff7ab32ff8  1688  ldp d24, d25, [jssp], #32
0xffff7ab32ffc  1692  ldp d28, d29, [jssp], #16
0xffff7ab33000  1696  ldp x5, x6, [jssp, #16]
0xffff7ab33004  1700  ldp x2, x4, [jssp], #32
0xffff7ab33008  1704  ldp x9, x10, [jssp, #16]
0xffff7ab3300c  1708  ldp x7, x8, [jssp], #32
0xffff7ab33010  1712  ldp x13, x14, [jssp, #16]
0xffff7ab33014  1716  ldp x11, x12, [jssp], #32
0xffff7ab33018  1720  ldr lr, [jssp, #16]
0xffff7ab3301c  1724  ldp x15, x18, [jssp], #24
0xffff7ab33020  1728  ldp x3, x0, [jssp], #16
0xffff7ab33024  1732  ret
0xffff7ab33028  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab3302c  1740  d63f03e0       constant
0xffff7ab33030  1744  09abe8c0       constant
0xffff7ab33034  1748  00000000       constant
0xffff7ab33038  1752  7ab065a0       constant
0xffff7ab3303c  1756  0000ffff       constant
0xffff7ab33040  1760  09abe8c0       constant
0xffff7ab33044  1764  00000000       constant
0xffff7ab33048  1768  7ab065a0       constant
0xffff7ab3304c  1772  0000ffff       constant
0xffff7ab33050  1776  09abe8c0       constant
0xffff7ab33054  1780  00000000       constant
0xffff7ab33058  1784  7ab065a0       constant
0xffff7ab3305c  1788  0000ffff       constant
0xffff7ab33060  1792  09abd2d0       constant
0xffff7ab33064  1796  00000000       constant
0xffff7ab33068  1800  00c2d958       constant
0xffff7ab3306c  1804  00000000       constant
0xffff7ab33070  1808  09abe8c0       constant
0xffff7ab33074  1812  00000000       constant
0xffff7ab33078  1816  7ab065a0       constant
0xffff7ab3307c  1820  0000ffff       constant
0xffff7ab33080  1824  09abd2d0       constant
0xffff7ab33084  1828  00000000       constant
0xffff7ab33088  1832  00c2d958       constant
0xffff7ab3308c  1836  00000000       constant
0xffff7ab33090  1840  09abe8c0       constant
0xffff7ab33094  1844  00000000       constant
0xffff7ab33098  1848  7ab065a0       constant
0xffff7ab3309c  1852  0000ffff       constant
0xffff7ab330a0  1856  09abe8c0       constant
0xffff7ab330a4  1860  00000000       constant
0xffff7ab330a8  1864  7ab065a0       constant
0xffff7ab330ac  1868  0000ffff       constant
0xffff7ab330b0  1872  09abd2d0       constant
0xffff7ab330b4  1876  00000000       constant
0xffff7ab330b8  1880  00c2d958       constant
0xffff7ab330bc  1884  00000000       constant
0xffff7ab330c0  1888  09abe8c0       constant
0xffff7ab330c4  1892  00000000       constant
0xffff7ab330c8  1896  7ab065a0       constant
0xffff7ab330cc  1900  0000ffff       constant
0xffff7ab330d0  1904  09abd2d0       constant
0xffff7ab330d4  1908  00000000       constant
0xffff7ab330d8  1912  00c2d958       constant
0xffff7ab330dc  1916  00000000       constant


RelocInfo (size = 65)
0xffff7ab32968  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab3298c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab32a04  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab32a28  code target (STUB)  (0xffff7ab065a0)
0xffff7ab32a68  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab32a8c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab32afc  external reference (isolate)  (0x9abd2d0)
0xffff7ab32b00  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab32b5c  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab32b80  code target (STUB)  (0xffff7ab065a0)
0xffff7ab32c60  external reference (isolate)  (0x9abd2d0)
0xffff7ab32c64  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab32d28  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab32d4c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab32dac  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab32dd0  code target (STUB)  (0xffff7ab065a0)
0xffff7ab32e40  external reference (isolate)  (0x9abd2d0)
0xffff7ab32e44  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab32ea0  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab32ec4  code target (STUB)  (0xffff7ab065a0)
0xffff7ab32fc4  external reference (isolate)  (0x9abd2d0)
0xffff7ab32fc8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab33028  constant pool (size 184)


kind = STUB
major_key = FastCloneShallowArrayStub
name = FastCloneShallowArrayStub
compiler = crankshaft
Instructions (size = 1902)
0xffff7ab33140     0  ldur x0, [x3, #47]
0xffff7ab33144     4  asr x4, x2, #32
0xffff7ab33148     8  add x5, x0, #0x17 (23)
0xffff7ab3314c    12  ldr x6, [x5, w4, sxtw #3]
0xffff7ab33150    16  ldr x0, pc+1456 (addr 0x0000ffff7ab33700)    ;; object: 0x20d04241 <undefined>
0xffff7ab33154    20  cmp x6, x0
0xffff7ab33158    24  b.eq #+0x33c (addr 0xffff7ab33494)
0xffff7ab3315c    28  ldur x0, [x6, #7]
0xffff7ab33160    32  ldur x1, [x0, #15]
0xffff7ab33164    36  ldur w2, [x1, #11]
0xffff7ab33168    40  cbz w2, #+0x2c0 (addr 0xffff7ab33428)
0xffff7ab3316c    44  ldur x3, [x1, #-1]
0xffff7ab33170    48  ldr x16, pc+1432 (addr 0x0000ffff7ab33708)    ;; object: 0x4ec04361 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab33174    52  cmp x3, x16
0xffff7ab33178    56  b.eq #+0x24c (addr 0xffff7ab333c4)
0xffff7ab3317c    60  ldur x1, [x1, #-1]
0xffff7ab33180    64  ldr x16, pc+1424 (addr 0x0000ffff7ab33710)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab33184    68  cmp x1, x16
0xffff7ab33188    72  b.eq #+0x120 (addr 0xffff7ab332a8)
0xffff7ab3318c    76  lsl w1, w2, #3
0xffff7ab33190    80  add w1, w1, #0x10 (16)
0xffff7ab33194    84  movz x3, #0xe2c0
0xffff7ab33198    88  movk x3, #0x9ab, lsl #16
0xffff7ab3319c    92  ldp x4, x2, [x3]
0xffff7ab331a0    96  adds x16, x4, #0x30 (48)
0xffff7ab331a4   100  ccmp x16, x2, #nzCv, lo
0xffff7ab331a8   104  b.hi #+0x2f0 (addr 0xffff7ab33498)
0xffff7ab331ac   108  str x16, [x3]
0xffff7ab331b0   112  orr x4, x4, #0x1
0xffff7ab331b4   116  ldur x2, [x0, #-1]
0xffff7ab331b8   120  stur x2, [x4, #-1]
0xffff7ab331bc   124  ldr x2, pc+1372 (addr 0x0000ffff7ab33718)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab331c0   128  stur x2, [x4, #7]
0xffff7ab331c4   132  ldr x2, pc+1372 (addr 0x0000ffff7ab33720)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab331c8   136  stur x2, [x4, #15]
0xffff7ab331cc   140  movz x2, #0x0
0xffff7ab331d0   144  stur x2, [x4, #23]
0xffff7ab331d4   148  add x2, x4, #0x20 (32)
0xffff7ab331d8   152  ldr x3, pc+1360 (addr 0x0000ffff7ab33728)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab331dc   156  stur x3, [x2, #-1]
0xffff7ab331e0   160  stur x6, [x2, #7]
0xffff7ab331e4   164  ldur w2, [x6, #35]
0xffff7ab331e8   168  add w2, w2, #0x1 (1)
0xffff7ab331ec   172  lsl x2, x2, #32
0xffff7ab331f0   176  stur x2, [x6, #31]
0xffff7ab331f4   180  sxtw x1, w1
0xffff7ab331f8   184  movz x2, #0xe2c0
0xffff7ab331fc   188  movk x2, #0x9ab, lsl #16
0xffff7ab33200   192  ldp x5, x16, [x2]
0xffff7ab33204   196  adds x3, x5, x1
0xffff7ab33208   200  ccmp x3, x16, #nzCv, lo
0xffff7ab3320c   204  b.hi #+0x2f0 (addr 0xffff7ab334fc)
0xffff7ab33210   208  str x3, [x2]
0xffff7ab33214   212  orr x5, x5, #0x1
0xffff7ab33218   216  mov x1, x5
0xffff7ab3321c   220  stur x1, [x4, #15]
0xffff7ab33220   224  add x2, x4, #0xf (15)
0xffff7ab33224   228  and x1, x4, #0xfffffffffff00000
0xffff7ab33228   232  ldr x1, [x1, #8]
0xffff7ab3322c   236  tbz w1, #2, #+0x18 (addr 0xffff7ab33244)
0xffff7ab33230   240  sub csp, jssp, #0x8 (8)
0xffff7ab33234   244  str lr, [jssp, #-8]!
0xffff7ab33238   248  ldr x16, pc+1272 (addr 0x0000ffff7ab33730)    ;; code: STUB, RecordWriteStub, minor: 67620
0xffff7ab3323c   252  blr x16
0xffff7ab33240   256  ldr lr, [jssp], #8
0xffff7ab33244   260  ldur x1, [x0, #15]
0xffff7ab33248   264  ldur x2, [x1, #-1]
0xffff7ab3324c   268  stur x2, [x5, #-1]
0xffff7ab33250   272  ldur w2, [x1, #11]
0xffff7ab33254   276  lsl x2, x2, #32
0xffff7ab33258   280  stur x2, [x5, #7]
0xffff7ab3325c   284  ldur w0, [x0, #27]
0xffff7ab33260   288  lsl x2, x0, #32
0xffff7ab33264   292  stur x2, [x4, #23]
0xffff7ab33268   296  ldr d0, pc+1168 (addr 0x0000ffff7ab336f8)
0xffff7ab3326c   300  ldur w2, [x5, #11]
0xffff7ab33270   304  cmp w0, w2
0xffff7ab33274   308  b.ge #+0x14 (addr 0xffff7ab33288)
0xffff7ab33278   312  sub w2, w2, #0x1 (1)
0xffff7ab3327c   316  add x3, x5, #0xf (15)
0xffff7ab33280   320  str d0, [x3, w2, sxtw #3]
0xffff7ab33284   324  b #-0x14 (addr 0xffff7ab33270)
0xffff7ab33288   328  cmp w0, #0x0 (0)
0xffff7ab3328c   332  b.le #+0x200 (addr 0xffff7ab3348c)
0xffff7ab33290   336  sub w0, w0, #0x1 (1)
0xffff7ab33294   340  add x2, x1, #0xf (15)
0xffff7ab33298   344  ldr d0, [x2, w0, sxtw #3]
0xffff7ab3329c   348  add x2, x5, #0xf (15)
0xffff7ab332a0   352  str d0, [x2, w0, sxtw #3]
0xffff7ab332a4   356  b #-0x1c (addr 0xffff7ab33288)
0xffff7ab332a8   360  lsl w1, w2, #3
0xffff7ab332ac   364  add w1, w1, #0x10 (16)
0xffff7ab332b0   368  movz x3, #0xe2c0
0xffff7ab332b4   372  movk x3, #0x9ab, lsl #16
0xffff7ab332b8   376  ldp x4, x2, [x3]
0xffff7ab332bc   380  adds x16, x4, #0x30 (48)
0xffff7ab332c0   384  ccmp x16, x2, #nzCv, lo
0xffff7ab332c4   388  b.hi #+0x29c (addr 0xffff7ab33560)
0xffff7ab332c8   392  str x16, [x3]
0xffff7ab332cc   396  orr x4, x4, #0x1
0xffff7ab332d0   400  ldur x2, [x0, #-1]
0xffff7ab332d4   404  stur x2, [x4, #-1]
0xffff7ab332d8   408  ldr x2, pc+1120 (addr 0x0000ffff7ab33738)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab332dc   412  stur x2, [x4, #7]
0xffff7ab332e0   416  ldr x2, pc+1120 (addr 0x0000ffff7ab33740)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab332e4   420  stur x2, [x4, #15]
0xffff7ab332e8   424  movz x2, #0x0
0xffff7ab332ec   428  stur x2, [x4, #23]
0xffff7ab332f0   432  add x2, x4, #0x20 (32)
0xffff7ab332f4   436  ldr x3, pc+1108 (addr 0x0000ffff7ab33748)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab332f8   440  stur x3, [x2, #-1]
0xffff7ab332fc   444  stur x6, [x2, #7]
0xffff7ab33300   448  ldur w2, [x6, #35]
0xffff7ab33304   452  add w2, w2, #0x1 (1)
0xffff7ab33308   456  lsl x2, x2, #32
0xffff7ab3330c   460  stur x2, [x6, #31]
0xffff7ab33310   464  sxtw x1, w1
0xffff7ab33314   468  movz x2, #0xe2c0
0xffff7ab33318   472  movk x2, #0x9ab, lsl #16
0xffff7ab3331c   476  ldp x5, x16, [x2]
0xffff7ab33320   480  adds x3, x5, x1
0xffff7ab33324   484  ccmp x3, x16, #nzCv, lo
0xffff7ab33328   488  b.hi #+0x29c (addr 0xffff7ab335c4)
0xffff7ab3332c   492  str x3, [x2]
0xffff7ab33330   496  orr x5, x5, #0x1
0xffff7ab33334   500  mov x1, x5
0xffff7ab33338   504  stur x1, [x4, #15]
0xffff7ab3333c   508  add x2, x4, #0xf (15)
0xffff7ab33340   512  and x1, x4, #0xfffffffffff00000
0xffff7ab33344   516  ldr x1, [x1, #8]
0xffff7ab33348   520  tbz w1, #2, #+0x18 (addr 0xffff7ab33360)
0xffff7ab3334c   524  sub csp, jssp, #0x8 (8)
0xffff7ab33350   528  str lr, [jssp, #-8]!
0xffff7ab33354   532  ldr x16, pc+1020 (addr 0x0000ffff7ab33750)    ;; code: STUB, RecordWriteStub, minor: 67620
0xffff7ab33358   536  blr x16
0xffff7ab3335c   540  ldr lr, [jssp], #8
0xffff7ab33360   544  ldur x1, [x0, #15]
0xffff7ab33364   548  ldur x2, [x1, #-1]
0xffff7ab33368   552  stur x2, [x5, #-1]
0xffff7ab3336c   556  ldur w2, [x1, #11]
0xffff7ab33370   560  lsl x2, x2, #32
0xffff7ab33374   564  stur x2, [x5, #7]
0xffff7ab33378   568  ldur w0, [x0, #27]
0xffff7ab3337c   572  lsl x2, x0, #32
0xffff7ab33380   576  stur x2, [x4, #23]
0xffff7ab33384   580  ldur w2, [x5, #11]
0xffff7ab33388   584  cmp w0, w2
0xffff7ab3338c   588  b.ge #+0x18 (addr 0xffff7ab333a4)
0xffff7ab33390   592  sub w2, w2, #0x1 (1)
0xffff7ab33394   596  ldr x3, pc+964 (addr 0x0000ffff7ab33758)    ;; object: 0x20d04519 <the hole>
0xffff7ab33398   600  add x6, x5, #0xf (15)
0xffff7ab3339c   604  str x3, [x6, w2, sxtw #3]
0xffff7ab333a0   608  b #-0x18 (addr 0xffff7ab33388)
0xffff7ab333a4   612  cmp w0, #0x0 (0)
0xffff7ab333a8   616  b.le #+0xe4 (addr 0xffff7ab3348c)
0xffff7ab333ac   620  sub w0, w0, #0x1 (1)
0xffff7ab333b0   624  add x2, x1, #0xf (15)
0xffff7ab333b4   628  ldr x3, [x2, w0, sxtw #3]
0xffff7ab333b8   632  add x2, x5, #0xf (15)
0xffff7ab333bc   636  str x3, [x2, w0, sxtw #3]
0xffff7ab333c0   640  b #-0x1c (addr 0xffff7ab333a4)
0xffff7ab333c4   644  movz x3, #0xe2c0
0xffff7ab333c8   648  movk x3, #0x9ab, lsl #16
0xffff7ab333cc   652  ldp x4, x2, [x3]
0xffff7ab333d0   656  adds x16, x4, #0x30 (48)
0xffff7ab333d4   660  ccmp x16, x2, #nzCv, lo
0xffff7ab333d8   664  b.hi #+0x250 (addr 0xffff7ab33628)
0xffff7ab333dc   668  str x16, [x3]
0xffff7ab333e0   672  orr x4, x4, #0x1
0xffff7ab333e4   676  ldur x2, [x0, #-1]
0xffff7ab333e8   680  ldur w0, [x0, #27]
0xffff7ab333ec   684  stur x2, [x4, #-1]
0xffff7ab333f0   688  ldr x2, pc+880 (addr 0x0000ffff7ab33760)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab333f4   692  stur x2, [x4, #7]
0xffff7ab333f8   696  stur x1, [x4, #15]
0xffff7ab333fc   700  lsl x0, x0, #32
0xffff7ab33400   704  stur x0, [x4, #23]
0xffff7ab33404   708  add x0, x4, #0x20 (32)
0xffff7ab33408   712  ldr x1, pc+864 (addr 0x0000ffff7ab33768)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab3340c   716  stur x1, [x0, #-1]
0xffff7ab33410   720  stur x6, [x0, #7]
0xffff7ab33414   724  ldur w0, [x6, #35]
0xffff7ab33418   728  add w0, w0, #0x1 (1)
0xffff7ab3341c   732  lsl x0, x0, #32
0xffff7ab33420   736  stur x0, [x6, #31]
0xffff7ab33424   740  b #+0x68 (addr 0xffff7ab3348c)
0xffff7ab33428   744  movz x2, #0xe2c0
0xffff7ab3342c   748  movk x2, #0x9ab, lsl #16
0xffff7ab33430   752  ldp x3, x1, [x2]
0xffff7ab33434   756  adds x16, x3, #0x30 (48)
0xffff7ab33438   760  ccmp x16, x1, #nzCv, lo
0xffff7ab3343c   764  b.hi #+0x250 (addr 0xffff7ab3368c)
0xffff7ab33440   768  str x16, [x2]
0xffff7ab33444   772  orr x3, x3, #0x1
0xffff7ab33448   776  ldur x0, [x0, #-1]
0xffff7ab3344c   780  stur x0, [x3, #-1]
0xffff7ab33450   784  ldr x0, pc+800 (addr 0x0000ffff7ab33770)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab33454   788  stur x0, [x3, #7]
0xffff7ab33458   792  ldr x0, pc+800 (addr 0x0000ffff7ab33778)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab3345c   796  stur x0, [x3, #15]
0xffff7ab33460   800  movz x0, #0x0
0xffff7ab33464   804  stur x0, [x3, #23]
0xffff7ab33468   808  add x0, x3, #0x20 (32)
0xffff7ab3346c   812  ldr x1, pc+788 (addr 0x0000ffff7ab33780)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab33470   816  stur x1, [x0, #-1]
0xffff7ab33474   820  stur x6, [x0, #7]
0xffff7ab33478   824  ldur w0, [x6, #35]
0xffff7ab3347c   828  add w0, w0, #0x1 (1)
0xffff7ab33480   832  lsl x0, x0, #32
0xffff7ab33484   836  stur x0, [x6, #31]
0xffff7ab33488   840  mov x4, x3
0xffff7ab3348c   844  mov x0, x4
0xffff7ab33490   848  ret
0xffff7ab33494   852  b #+0x384 (addr 0xffff7ab33818)
0xffff7ab33498   856  sub csp, jssp, #0x10 (16)
0xffff7ab3349c   860  stp fp, lr, [jssp, #-16]!
0xffff7ab334a0   864  movz fp, #0xa00000000
0xffff7ab334a4   868  sub csp, jssp, #0x8 (8)
0xffff7ab334a8   872  str fp, [jssp, #-8]!
0xffff7ab334ac   876  add fp, jssp, #0x8 (8)
0xffff7ab334b0   880  movz x4, #0x0
0xffff7ab334b4   884  mov x16, lr
0xffff7ab334b8   888  ldr x17, pc+720 (addr 0x0000ffff7ab33788)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab334bc   892  blr x17
0xffff7ab334c0   896  movz x0, #0x3000000000
0xffff7ab334c4   900  movz x10, #0x0
0xffff7ab334c8   904  sub csp, jssp, #0x10 (16)
0xffff7ab334cc   908  stp x10, x0, [jssp, #-16]!
0xffff7ab334d0   912  movz x0, #0x2
0xffff7ab334d4   916  movz x1, #0x5b88
0xffff7ab334d8   920  movk x1, #0xe2, lsl #16
0xffff7ab334dc   924  ldr x16, pc+692 (addr 0x0000ffff7ab33790)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab334e0   928  blr x16
0xffff7ab334e4   932  str x0, [jssp, #32]
0xffff7ab334e8   936  ldr x16, pc+688 (addr 0x0000ffff7ab33798)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab334ec   940  blr x16
0xffff7ab334f0   944  ldr lr, [jssp, #16]
0xffff7ab334f4   948  ldp xzr, fp, [jssp], #24
0xffff7ab334f8   952  b #-0x344 (addr 0xffff7ab331b4)
0xffff7ab334fc   956  sub csp, jssp, #0x10 (16)
0xffff7ab33500   960  stp fp, lr, [jssp, #-16]!
0xffff7ab33504   964  movz fp, #0xa00000000
0xffff7ab33508   968  sub csp, jssp, #0x8 (8)
0xffff7ab3350c   972  str fp, [jssp, #-8]!
0xffff7ab33510   976  add fp, jssp, #0x8 (8)
0xffff7ab33514   980  movz x5, #0x0
0xffff7ab33518   984  mov x16, lr
0xffff7ab3351c   988  ldr x17, pc+644 (addr 0x0000ffff7ab337a0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab33520   992  blr x17
0xffff7ab33524   996  lsl x0, x1, #32
0xffff7ab33528  1000  movz x10, #0x100000000
0xffff7ab3352c  1004  sub csp, jssp, #0x10 (16)
0xffff7ab33530  1008  stp x10, x0, [jssp, #-16]!
0xffff7ab33534  1012  movz x0, #0x2
0xffff7ab33538  1016  movz x1, #0x5b88
0xffff7ab3353c  1020  movk x1, #0xe2, lsl #16
0xffff7ab33540  1024  ldr x16, pc+616 (addr 0x0000ffff7ab337a8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab33544  1028  blr x16
0xffff7ab33548  1032  str x0, [jssp, #40]
0xffff7ab3354c  1036  ldr x16, pc+612 (addr 0x0000ffff7ab337b0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab33550  1040  blr x16
0xffff7ab33554  1044  ldr lr, [jssp, #16]
0xffff7ab33558  1048  ldp xzr, fp, [jssp], #24
0xffff7ab3355c  1052  b #-0x344 (addr 0xffff7ab33218)
0xffff7ab33560  1056  sub csp, jssp, #0x10 (16)
0xffff7ab33564  1060  stp fp, lr, [jssp, #-16]!
0xffff7ab33568  1064  movz fp, #0xa00000000
0xffff7ab3356c  1068  sub csp, jssp, #0x8 (8)
0xffff7ab33570  1072  str fp, [jssp, #-8]!
0xffff7ab33574  1076  add fp, jssp, #0x8 (8)
0xffff7ab33578  1080  movz x4, #0x0
0xffff7ab3357c  1084  mov x16, lr
0xffff7ab33580  1088  ldr x17, pc+568 (addr 0x0000ffff7ab337b8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab33584  1092  blr x17
0xffff7ab33588  1096  movz x0, #0x3000000000
0xffff7ab3358c  1100  movz x10, #0x0
0xffff7ab33590  1104  sub csp, jssp, #0x10 (16)
0xffff7ab33594  1108  stp x10, x0, [jssp, #-16]!
0xffff7ab33598  1112  movz x0, #0x2
0xffff7ab3359c  1116  movz x1, #0x5b88
0xffff7ab335a0  1120  movk x1, #0xe2, lsl #16
0xffff7ab335a4  1124  ldr x16, pc+540 (addr 0x0000ffff7ab337c0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab335a8  1128  blr x16
0xffff7ab335ac  1132  str x0, [jssp, #32]
0xffff7ab335b0  1136  ldr x16, pc+536 (addr 0x0000ffff7ab337c8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab335b4  1140  blr x16
0xffff7ab335b8  1144  ldr lr, [jssp, #16]
0xffff7ab335bc  1148  ldp xzr, fp, [jssp], #24
0xffff7ab335c0  1152  b #-0x2f0 (addr 0xffff7ab332d0)
0xffff7ab335c4  1156  sub csp, jssp, #0x10 (16)
0xffff7ab335c8  1160  stp fp, lr, [jssp, #-16]!
0xffff7ab335cc  1164  movz fp, #0xa00000000
0xffff7ab335d0  1168  sub csp, jssp, #0x8 (8)
0xffff7ab335d4  1172  str fp, [jssp, #-8]!
0xffff7ab335d8  1176  add fp, jssp, #0x8 (8)
0xffff7ab335dc  1180  movz x5, #0x0
0xffff7ab335e0  1184  mov x16, lr
0xffff7ab335e4  1188  ldr x17, pc+492 (addr 0x0000ffff7ab337d0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab335e8  1192  blr x17
0xffff7ab335ec  1196  lsl x0, x1, #32
0xffff7ab335f0  1200  movz x10, #0x0
0xffff7ab335f4  1204  sub csp, jssp, #0x10 (16)
0xffff7ab335f8  1208  stp x10, x0, [jssp, #-16]!
0xffff7ab335fc  1212  movz x0, #0x2
0xffff7ab33600  1216  movz x1, #0x5b88
0xffff7ab33604  1220  movk x1, #0xe2, lsl #16
0xffff7ab33608  1224  ldr x16, pc+464 (addr 0x0000ffff7ab337d8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab3360c  1228  blr x16
0xffff7ab33610  1232  str x0, [jssp, #40]
0xffff7ab33614  1236  ldr x16, pc+460 (addr 0x0000ffff7ab337e0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab33618  1240  blr x16
0xffff7ab3361c  1244  ldr lr, [jssp, #16]
0xffff7ab33620  1248  ldp xzr, fp, [jssp], #24
0xffff7ab33624  1252  b #-0x2f0 (addr 0xffff7ab33334)
0xffff7ab33628  1256  sub csp, jssp, #0x10 (16)
0xffff7ab3362c  1260  stp fp, lr, [jssp, #-16]!
0xffff7ab33630  1264  movz fp, #0xa00000000
0xffff7ab33634  1268  sub csp, jssp, #0x8 (8)
0xffff7ab33638  1272  str fp, [jssp, #-8]!
0xffff7ab3363c  1276  add fp, jssp, #0x8 (8)
0xffff7ab33640  1280  movz x4, #0x0
0xffff7ab33644  1284  mov x16, lr
0xffff7ab33648  1288  ldr x17, pc+416 (addr 0x0000ffff7ab337e8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab3364c  1292  blr x17
0xffff7ab33650  1296  movz x0, #0x3000000000
0xffff7ab33654  1300  movz x10, #0x0
0xffff7ab33658  1304  sub csp, jssp, #0x10 (16)
0xffff7ab3365c  1308  stp x10, x0, [jssp, #-16]!
0xffff7ab33660  1312  movz x0, #0x2
0xffff7ab33664  1316  movz x1, #0x5b88
0xffff7ab33668  1320  movk x1, #0xe2, lsl #16
0xffff7ab3366c  1324  ldr x16, pc+388 (addr 0x0000ffff7ab337f0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab33670  1328  blr x16
0xffff7ab33674  1332  str x0, [jssp, #32]
0xffff7ab33678  1336  ldr x16, pc+384 (addr 0x0000ffff7ab337f8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab3367c  1340  blr x16
0xffff7ab33680  1344  ldr lr, [jssp, #16]
0xffff7ab33684  1348  ldp xzr, fp, [jssp], #24
0xffff7ab33688  1352  b #-0x2a4 (addr 0xffff7ab333e4)
0xffff7ab3368c  1356  sub csp, jssp, #0x10 (16)
0xffff7ab33690  1360  stp fp, lr, [jssp, #-16]!
0xffff7ab33694  1364  movz fp, #0xa00000000
0xffff7ab33698  1368  sub csp, jssp, #0x8 (8)
0xffff7ab3369c  1372  str fp, [jssp, #-8]!
0xffff7ab336a0  1376  add fp, jssp, #0x8 (8)
0xffff7ab336a4  1380  movz x3, #0x0
0xffff7ab336a8  1384  mov x16, lr
0xffff7ab336ac  1388  ldr x17, pc+340 (addr 0x0000ffff7ab33800)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab336b0  1392  blr x17
0xffff7ab336b4  1396  movz x0, #0x3000000000
0xffff7ab336b8  1400  movz x10, #0x0
0xffff7ab336bc  1404  sub csp, jssp, #0x10 (16)
0xffff7ab336c0  1408  stp x10, x0, [jssp, #-16]!
0xffff7ab336c4  1412  movz x0, #0x2
0xffff7ab336c8  1416  movz x1, #0x5b88
0xffff7ab336cc  1420  movk x1, #0xe2, lsl #16
0xffff7ab336d0  1424  ldr x16, pc+312 (addr 0x0000ffff7ab33808)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab336d4  1428  blr x16
0xffff7ab336d8  1432  str x0, [jssp, #24]
0xffff7ab336dc  1436  ldr x16, pc+308 (addr 0x0000ffff7ab33810)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab336e0  1440  blr x16
0xffff7ab336e4  1444  ldr lr, [jssp, #16]
0xffff7ab336e8  1448  ldp xzr, fp, [jssp], #24
0xffff7ab336ec  1452  b #-0x2a4 (addr 0xffff7ab33448)
0xffff7ab336f0  1456  5800093f       constant pool begin (num_const = 73)    ;; constant pool
0xffff7ab336f4  1460  d63f03e0       constant
0xffff7ab336f8  1464  fff7ffff       constant
0xffff7ab336fc  1468  fff7ffff       constant
0xffff7ab33700  1472  20d04241       constant
0xffff7ab33704  1476  00000000       constant
0xffff7ab33708  1480  4ec04361       constant
0xffff7ab3370c  1484  00000000       constant
0xffff7ab33710  1488  4ec04259       constant
0xffff7ab33714  1492  00000000       constant
0xffff7ab33718  1496  20d04201       constant
0xffff7ab3371c  1500  00000000       constant
0xffff7ab33720  1504  20d04201       constant
0xffff7ab33724  1508  00000000       constant
0xffff7ab33728  1512  4ec05d81       constant
0xffff7ab3372c  1516  00000000       constant
0xffff7ab33730  1520  7ab32960       constant
0xffff7ab33734  1524  0000ffff       constant
0xffff7ab33738  1528  20d04201       constant
0xffff7ab3373c  1532  00000000       constant
0xffff7ab33740  1536  20d04201       constant
0xffff7ab33744  1540  00000000       constant
0xffff7ab33748  1544  4ec05d81       constant
0xffff7ab3374c  1548  00000000       constant
0xffff7ab33750  1552  7ab32960       constant
0xffff7ab33754  1556  0000ffff       constant
0xffff7ab33758  1560  20d04519       constant
0xffff7ab3375c  1564  00000000       constant
0xffff7ab33760  1568  20d04201       constant
0xffff7ab33764  1572  00000000       constant
0xffff7ab33768  1576  4ec05d81       constant
0xffff7ab3376c  1580  00000000       constant
0xffff7ab33770  1584  20d04201       constant
0xffff7ab33774  1588  00000000       constant
0xffff7ab33778  1592  20d04201       constant
0xffff7ab3377c  1596  00000000       constant
0xffff7ab33780  1600  4ec05d81       constant
0xffff7ab33784  1604  00000000       constant
0xffff7ab33788  1608  7ab06820       constant
0xffff7ab3378c  1612  0000ffff       constant
0xffff7ab33790  1616  7ab06260       constant
0xffff7ab33794  1620  0000ffff       constant
0xffff7ab33798  1624  7ab068e0       constant
0xffff7ab3379c  1628  0000ffff       constant
0xffff7ab337a0  1632  7ab06820       constant
0xffff7ab337a4  1636  0000ffff       constant
0xffff7ab337a8  1640  7ab06260       constant
0xffff7ab337ac  1644  0000ffff       constant
0xffff7ab337b0  1648  7ab068e0       constant
0xffff7ab337b4  1652  0000ffff       constant
0xffff7ab337b8  1656  7ab06820       constant
0xffff7ab337bc  1660  0000ffff       constant
0xffff7ab337c0  1664  7ab06260       constant
0xffff7ab337c4  1668  0000ffff       constant
0xffff7ab337c8  1672  7ab068e0       constant
0xffff7ab337cc  1676  0000ffff       constant
0xffff7ab337d0  1680  7ab06820       constant
0xffff7ab337d4  1684  0000ffff       constant
0xffff7ab337d8  1688  7ab06260       constant
0xffff7ab337dc  1692  0000ffff       constant
0xffff7ab337e0  1696  7ab068e0       constant
0xffff7ab337e4  1700  0000ffff       constant
0xffff7ab337e8  1704  7ab06820       constant
0xffff7ab337ec  1708  0000ffff       constant
0xffff7ab337f0  1712  7ab06260       constant
0xffff7ab337f4  1716  0000ffff       constant
0xffff7ab337f8  1720  7ab068e0       constant
0xffff7ab337fc  1724  0000ffff       constant
0xffff7ab33800  1728  7ab06820       constant
0xffff7ab33804  1732  0000ffff       constant
0xffff7ab33808  1736  7ab06260       constant
0xffff7ab3380c  1740  0000ffff       constant
0xffff7ab33810  1744  7ab068e0       constant
0xffff7ab33814  1748  0000ffff       constant
0xffff7ab33818  1752  movz x16, #0x0
0xffff7ab3381c  1756  sub csp, jssp, #0x10 (16)
0xffff7ab33820  1760  stp fp, lr, [jssp, #-16]!
0xffff7ab33824  1764  bl #+0x4 (addr 0xffff7ab33828)
0xffff7ab33828  1768  movz x17, #0xa00000000
0xffff7ab3382c  1772  sub csp, jssp, #0x10 (16)
0xffff7ab33830  1776  stp x17, cp, [jssp, #-16]!
0xffff7ab33834  1780  add fp, jssp, #0x10 (16)
0xffff7ab33838  1784  ldr x17, pc+24 (addr 0x0000ffff7ab33850)    ;; lazy deoptimization bailout 0
0xffff7ab3383c  1788  add x17, x17, x16
0xffff7ab33840  1792  br x17
0xffff7ab33844  1796  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab33848  1800  d63f03e0       constant
0xffff7ab3384c  1804  d503201f       constant
0xffff7ab33850  1808  7a906000       constant
0xffff7ab33854  1812  0000ffff       constant


Safepoints (size = 86)
0xffff7ab334e4   932  000 | x0 | x4 | x6 | x27 (sp -> fp)  <none> argc: 2
0xffff7ab33548  1032  000 | x0 | x4 | x5 | x27 (sp -> fp)  <none> argc: 2
0xffff7ab335ac  1132  000 | x0 | x4 | x6 | x27 (sp -> fp)  <none> argc: 2
0xffff7ab33610  1232  000 | x0 | x4 | x5 | x27 (sp -> fp)  <none> argc: 2
0xffff7ab33674  1332  000 | x0 | x1 | x4 | x6 | x27 (sp -> fp)  <none> argc: 2
0xffff7ab336d8  1432  000 | x0 | x3 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 65)
0xffff7ab33150  embedded object  (0x20d04241 <undefined>)
0xffff7ab33170  embedded object  (0x4ec04361 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab33180  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab331bc  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab331c4  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab331d8  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab33238  code target (STUB)  (0xffff7ab32960)
0xffff7ab332d8  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab332e0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab332f4  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab33354  code target (STUB)  (0xffff7ab32960)
0xffff7ab33394  embedded object  (0x20d04519 <the hole>)
0xffff7ab333f0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab33408  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab33450  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab33458  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab3346c  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab334b8  code target (STUB)  (0xffff7ab06820)
0xffff7ab334dc  code target (STUB)  (0xffff7ab06260)
0xffff7ab334e8  code target (STUB)  (0xffff7ab068e0)
0xffff7ab3351c  code target (STUB)  (0xffff7ab06820)
0xffff7ab33540  code target (STUB)  (0xffff7ab06260)
0xffff7ab3354c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab33580  code target (STUB)  (0xffff7ab06820)
0xffff7ab335a4  code target (STUB)  (0xffff7ab06260)
0xffff7ab335b0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab335e4  code target (STUB)  (0xffff7ab06820)
0xffff7ab33608  code target (STUB)  (0xffff7ab06260)
0xffff7ab33614  code target (STUB)  (0xffff7ab068e0)
0xffff7ab33648  code target (STUB)  (0xffff7ab06820)
0xffff7ab3366c  code target (STUB)  (0xffff7ab06260)
0xffff7ab33678  code target (STUB)  (0xffff7ab068e0)
0xffff7ab336ac  code target (STUB)  (0xffff7ab06820)
0xffff7ab336d0  code target (STUB)  (0xffff7ab06260)
0xffff7ab336dc  code target (STUB)  (0xffff7ab068e0)
0xffff7ab336f0  constant pool (size 296)
0xffff7ab33838  runtime entry
0xffff7ab33844  constant pool (size 20)


kind = KEYED_STORE_IC
major_key = VectorKeyedStoreICTrampolineStub
ic_state = GENERIC
extra_ic_state = 0
name = VectorKeyedStoreICTrampolineStub
compiler = unknown
Instructions (size = 384)
0xffff7ab33920     0  ldur x3, [fp, #-16]
0xffff7ab33924     4  ldur x3, [x3, #31]
0xffff7ab33928     8  ldur x3, [x3, #87]
0xffff7ab3392c    12  add x5, x3, x4, asr #29
0xffff7ab33930    16  ldur x5, [x5, #15]
0xffff7ab33934    20  tbz w1, #0, #+0x140 (addr 0xffff7ab33a74)
0xffff7ab33938    24  ldur x6, [x1, #-1]
0xffff7ab3393c    28  ldur x7, [x5, #7]
0xffff7ab33940    32  cmp x7, x6
0xffff7ab33944    36  b.ne #+0x14 (addr 0xffff7ab33958)
0xffff7ab33948    40  add x5, x3, x4, asr #29
0xffff7ab3394c    44  ldur x5, [x5, #23]
0xffff7ab33950    48  add x5, x5, #0x5f (95)
0xffff7ab33954    52  br x5
0xffff7ab33958    56  ldur x7, [x5, #-1]
0xffff7ab3395c    60  ldr x16, [x26, #224]
0xffff7ab33960    64  cmp x7, x16
0xffff7ab33964    68  b.ne #+0x68 (addr 0xffff7ab339cc)
0xffff7ab33968    72  ldur x8, [x5, #7]
0xffff7ab3396c    76  add x8, x5, x8, asr #29
0xffff7ab33970    80  add x8, x8, #0xf (15)
0xffff7ab33974    84  add x5, x5, #0xf (15)
0xffff7ab33978    88  ldr x7, [x5]
0xffff7ab3397c    92  ldur x7, [x7, #7]
0xffff7ab33980    96  cmp x6, x7
0xffff7ab33984   100  b.ne #+0x38 (addr 0xffff7ab339bc)
0xffff7ab33988   104  ldr x8, [x5, #8]
0xffff7ab3398c   108  ldr x16, [x26, #40]
0xffff7ab33990   112  cmp x8, x16
0xffff7ab33994   116  b.ne #+0x10 (addr 0xffff7ab339a4)
0xffff7ab33998   120  ldr x5, [x5, #16]
0xffff7ab3399c   124  add x5, x5, #0x5f (95)
0xffff7ab339a0   128  br x5
0xffff7ab339a4   132  ldur x8, [x8, #7]
0xffff7ab339a8   136  tbz w8, #0, #+0xac (addr 0xffff7ab33a54)
0xffff7ab339ac   140  ldr x6, [x5, #16]
0xffff7ab339b0   144  mov x5, x8
0xffff7ab339b4   148  add x6, x6, #0x5f (95)
0xffff7ab339b8   152  br x6
0xffff7ab339bc   156  add x5, x5, #0x18 (24)
0xffff7ab339c0   160  cmp x5, x8
0xffff7ab339c4   164  b.lt #-0x4c (addr 0xffff7ab33978)
0xffff7ab339c8   168  b #+0x8c (addr 0xffff7ab33a54)
0xffff7ab339cc   172  ldr x16, [x26, #2400]
0xffff7ab339d0   176  cmp x5, x16
0xffff7ab339d4   180  b.ne #+0xc (addr 0xffff7ab339e0)
0xffff7ab339d8   184  ldr x16, pc+176 (addr 0x0000ffff7ab33a88)    ;; code: KEYED_STORE_IC, MEGAMORPHIC
0xffff7ab339dc   188  br x16
0xffff7ab339e0   192  cmp x2, x5
0xffff7ab339e4   196  b.ne #+0x70 (addr 0xffff7ab33a54)
0xffff7ab339e8   200  add x5, x3, x4, asr #29
0xffff7ab339ec   204  ldur x5, [x5, #23]
0xffff7ab339f0   208  ldur x7, [x5, #15]
0xffff7ab339f4   212  ldur x7, [x7, #7]
0xffff7ab339f8   216  cmp x6, x7
0xffff7ab339fc   220  b.ne #+0x10 (addr 0xffff7ab33a0c)
0xffff7ab33a00   224  ldur x5, [x5, #23]
0xffff7ab33a04   228  add x5, x5, #0x5f (95)
0xffff7ab33a08   232  br x5
0xffff7ab33a0c   236  ldur x8, [x5, #7]
0xffff7ab33a10   240  movz x16, #0x200000000
0xffff7ab33a14   244  cmp x8, x16
0xffff7ab33a18   248  b.eq #+0x3c (addr 0xffff7ab33a54)
0xffff7ab33a1c   252  add x8, x5, x8, asr #29
0xffff7ab33a20   256  add x8, x8, #0xf (15)
0xffff7ab33a24   260  add x5, x5, #0x1f (31)
0xffff7ab33a28   264  ldr x7, [x5]
0xffff7ab33a2c   268  ldur x7, [x7, #7]
0xffff7ab33a30   272  cmp x6, x7
0xffff7ab33a34   276  b.ne #+0x10 (addr 0xffff7ab33a44)
0xffff7ab33a38   280  ldr x5, [x5, #8]
0xffff7ab33a3c   284  add x5, x5, #0x5f (95)
0xffff7ab33a40   288  br x5
0xffff7ab33a44   292  add x5, x5, #0x10 (16)
0xffff7ab33a48   296  cmp x5, x8
0xffff7ab33a4c   300  b.lt #-0x24 (addr 0xffff7ab33a28)
0xffff7ab33a50   304  b #+0x4 (addr 0xffff7ab33a54)
0xffff7ab33a54   308  sub csp, jssp, #0x28 (40)
0xffff7ab33a58   312  stp x4, x0, [jssp, #-32]!
0xffff7ab33a5c   316  stp x2, x1, [jssp, #16]
0xffff7ab33a60   320  str x3, [jssp, #-8]!
0xffff7ab33a64   324  movz x0, #0x5
0xffff7ab33a68   328  ldr x1, pc+40 (addr 0x0000ffff7ab33a90)    ;; external reference (Runtime::KeyedStoreIC_Miss)
0xffff7ab33a6c   332  ldr x16, pc+44 (addr 0x0000ffff7ab33a98)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab33a70   336  br x16
0xffff7ab33a74   340  ldr x6, [x26, #120]
0xffff7ab33a78   344  b #-0x13c (addr 0xffff7ab3393c)
0xffff7ab33a7c   348  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab33a80   352  d63f03e0       constant
0xffff7ab33a84   356  d503201f       constant
0xffff7ab33a88   360  7ab25500       constant
0xffff7ab33a8c   364  0000ffff       constant
0xffff7ab33a90   368  00c88e08       constant
0xffff7ab33a94   372  00000000       constant
0xffff7ab33a98   376  7ab06060       constant
0xffff7ab33a9c   380  0000ffff       constant


RelocInfo (size = 14)
0xffff7ab339d8  code target (KEYED_STORE_IC)  (0xffff7ab25500)
0xffff7ab33a68  external reference (Runtime::KeyedStoreIC_Miss)  (0xc88e08)
0xffff7ab33a6c  code target (STUB)  (0xffff7ab06060)
0xffff7ab33a7c  constant pool (size 36)


kind = STUB
major_key = ArrayConstructorStub
name = ArrayConstructorStub_More_Than_One
compiler = unknown
Instructions (size = 288)
0xffff7ab33b00     0  ldur cp, [x1, #39]
0xffff7ab33b04     4  cmp x3, x1
0xffff7ab33b08     8  b.ne #+0x98 (addr 0xffff7ab33ba0)
0xffff7ab33b0c    12  ldr x16, [x26, #40]
0xffff7ab33b10    16  cmp x2, x16
0xffff7ab33b14    20  b.eq #+0x84 (addr 0xffff7ab33b98)
0xffff7ab33b18    24  ldursw x3, [x2, #11]
0xffff7ab33b1c    28  and x3, x3, #0x7fff
0xffff7ab33b20    32  cbnz x3, #+0xc (addr 0xffff7ab33b2c)
0xffff7ab33b24    36  ldr x16, pc+164 (addr 0x0000ffff7ab33bc8)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 0
0xffff7ab33b28    40  br x16
0xffff7ab33b2c    44  cmp x3, #0x1 (1)
0xffff7ab33b30    48  b.ne #+0xc (addr 0xffff7ab33b3c)
0xffff7ab33b34    52  ldr x16, pc+156 (addr 0x0000ffff7ab33bd0)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 1
0xffff7ab33b38    56  br x16
0xffff7ab33b3c    60  cmp x3, #0x4 (4)
0xffff7ab33b40    64  b.ne #+0xc (addr 0xffff7ab33b4c)
0xffff7ab33b44    68  ldr x16, pc+148 (addr 0x0000ffff7ab33bd8)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 4
0xffff7ab33b48    72  br x16
0xffff7ab33b4c    76  cmp x3, #0x5 (5)
0xffff7ab33b50    80  b.ne #+0xc (addr 0xffff7ab33b5c)
0xffff7ab33b54    84  ldr x16, pc+140 (addr 0x0000ffff7ab33be0)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 5
0xffff7ab33b58    88  br x16
0xffff7ab33b5c    92  cmp x3, #0x2 (2)
0xffff7ab33b60    96  b.ne #+0xc (addr 0xffff7ab33b6c)
0xffff7ab33b64   100  ldr x16, pc+132 (addr 0x0000ffff7ab33be8)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 2
0xffff7ab33b68   104  br x16
0xffff7ab33b6c   108  cmp x3, #0x3 (3)
0xffff7ab33b70   112  b.ne #+0xc (addr 0xffff7ab33b7c)
0xffff7ab33b74   116  ldr x16, pc+124 (addr 0x0000ffff7ab33bf0)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 3
0xffff7ab33b78   120  br x16
0xffff7ab33b7c   124  movz x0, #0x9f00000000
0xffff7ab33b80   128  sub csp, jssp, #0x8 (8)
0xffff7ab33b84   132  str x0, [jssp, #-8]!
0xffff7ab33b88   136  movz x0, #0x1
0xffff7ab33b8c   140  ldr x1, pc+108 (addr 0x0000ffff7ab33bf8)    ;; external reference (Runtime::Abort)
0xffff7ab33b90   144  ldr x16, pc+112 (addr 0x0000ffff7ab33c00)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab33b94   148  blr x16
0xffff7ab33b98   152  ldr x16, pc+112 (addr 0x0000ffff7ab33c08)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 256
0xffff7ab33b9c   156  br x16
0xffff7ab33ba0   160  str x1, [jssp, x0, lsl #3]
0xffff7ab33ba4   164  add x0, x0, #0x3 (3)
0xffff7ab33ba8   168  sub csp, jssp, #0x10 (16)
0xffff7ab33bac   172  stp x2, x3, [jssp, #-16]!
0xffff7ab33bb0   176  ldr x1, pc+96 (addr 0x0000ffff7ab33c10)    ;; external reference (Runtime::NewArray)
0xffff7ab33bb4   180  ldr x16, pc+100 (addr 0x0000ffff7ab33c18)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab33bb8   184  br x16
0xffff7ab33bbc   188  5800031f       constant pool begin (num_const = 24)    ;; constant pool
0xffff7ab33bc0   192  d63f03e0       constant
0xffff7ab33bc4   196  d503201f       constant
0xffff7ab33bc8   200  7ab09fe0       constant
0xffff7ab33bcc   204  0000ffff       constant
0xffff7ab33bd0   208  7ab0a560       constant
0xffff7ab33bd4   212  0000ffff       constant
0xffff7ab33bd8   216  7ab0aae0       constant
0xffff7ab33bdc   220  0000ffff       constant
0xffff7ab33be0   224  7ab0ad40       constant
0xffff7ab33be4   228  0000ffff       constant
0xffff7ab33be8   232  7ab0afa0       constant
0xffff7ab33bec   236  0000ffff       constant
0xffff7ab33bf0   240  7ab0b1e0       constant
0xffff7ab33bf4   244  0000ffff       constant
0xffff7ab33bf8   248  00eda820       constant
0xffff7ab33bfc   252  00000000       constant
0xffff7ab33c00   256  7ab06060       constant
0xffff7ab33c04   260  0000ffff       constant
0xffff7ab33c08   264  7ab0a300       constant
0xffff7ab33c0c   268  0000ffff       constant
0xffff7ab33c10   272  00de2850       constant
0xffff7ab33c14   276  00000000       constant
0xffff7ab33c18   280  7ab06060       constant
0xffff7ab33c1c   284  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab33b24  code target (STUB)  (0xffff7ab09fe0)
0xffff7ab33b34  code target (STUB)  (0xffff7ab0a560)
0xffff7ab33b44  code target (STUB)  (0xffff7ab0aae0)
0xffff7ab33b54  code target (STUB)  (0xffff7ab0ad40)
0xffff7ab33b64  code target (STUB)  (0xffff7ab0afa0)
0xffff7ab33b74  code target (STUB)  (0xffff7ab0b1e0)
0xffff7ab33b8c  external reference (Runtime::Abort)  (0xeda820)
0xffff7ab33b90  code target (STUB)  (0xffff7ab06060)
0xffff7ab33b98  code target (STUB)  (0xffff7ab0a300)
0xffff7ab33bb0  external reference (Runtime::NewArray)  (0xde2850)
0xffff7ab33bb4  code target (STUB)  (0xffff7ab06060)
0xffff7ab33bbc  constant pool (size 100)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 327682
name = CallICStub(args(2), NOT_NULL_OR_UNDEFINED, 
compiler = unknown
Instructions (size = 488)
0xffff7ab33c80     0  add x4, x2, x3, asr #29
0xffff7ab33c84     4  ldur x4, [x4, #15]
0xffff7ab33c88     8  ldur x5, [x4, #7]
0xffff7ab33c8c    12  cmp x5, x1
0xffff7ab33c90    16  b.ne #+0x2c (addr 0xffff7ab33cbc)
0xffff7ab33c94    20  tbz w1, #0, #+0x28 (addr 0xffff7ab33cbc)
0xffff7ab33c98    24  add x2, x2, x3, asr #29
0xffff7ab33c9c    28  add x2, x2, #0x18 (24)
0xffff7ab33ca0    32  ldur x3, [x2, #-1]
0xffff7ab33ca4    36  movz x16, #0x200000000
0xffff7ab33ca8    40  add x3, x3, x16
0xffff7ab33cac    44  stur x3, [x2, #-1]
0xffff7ab33cb0    48  movz x0, #0x2
0xffff7ab33cb4    52  ldr x16, pc+372 (addr 0x0000ffff7ab33e28)    ;; code: BUILTIN
0xffff7ab33cb8    56  br x16
0xffff7ab33cbc    60  ldr x16, [x26, #2400]
0xffff7ab33cc0    64  cmp x4, x16
0xffff7ab33cc4    68  b.eq #+0x78 (addr 0xffff7ab33d3c)
0xffff7ab33cc8    72  ldur x5, [x4, #-1]
0xffff7ab33ccc    76  ldr x16, [x26, #2736]
0xffff7ab33cd0    80  cmp x5, x16
0xffff7ab33cd4    84  b.ne #+0x40 (addr 0xffff7ab33d14)
0xffff7ab33cd8    88  ldur x5, [cp, #39]
0xffff7ab33cdc    92  ldur x5, [x5, #95]
0xffff7ab33ce0    96  cmp x1, x5
0xffff7ab33ce4   100  b.ne #+0xec (addr 0xffff7ab33dd0)
0xffff7ab33ce8   104  movz x0, #0x2
0xffff7ab33cec   108  add x2, x2, x3, asr #29
0xffff7ab33cf0   112  add x2, x2, #0x18 (24)
0xffff7ab33cf4   116  ldur x3, [x2, #-1]
0xffff7ab33cf8   120  movz x16, #0x200000000
0xffff7ab33cfc   124  add x3, x3, x16
0xffff7ab33d00   128  stur x3, [x2, #-1]
0xffff7ab33d04   132  mov x2, x4
0xffff7ab33d08   136  mov x3, x1
0xffff7ab33d0c   140  ldr x16, pc+292 (addr 0x0000ffff7ab33e30)    ;; code: STUB, ArrayConstructorStub, minor: 3
0xffff7ab33d10   144  br x16
0xffff7ab33d14   148  ldr x16, [x26, #2568]
0xffff7ab33d18   152  cmp x4, x16
0xffff7ab33d1c   156  b.eq #+0xb4 (addr 0xffff7ab33dd0)
0xffff7ab33d20   160  ldur x5, [x4, #-1]
0xffff7ab33d24   164  ldrb w5, [x5, #11]
0xffff7ab33d28   168  cmp x5, #0xc9 (201)
0xffff7ab33d2c   172  b.ne #+0xa4 (addr 0xffff7ab33dd0)
0xffff7ab33d30   176  add x4, x2, x3, asr #29
0xffff7ab33d34   180  ldr x5, [x26, #2400]
0xffff7ab33d38   184  stur x5, [x4, #15]
0xffff7ab33d3c   188  movz x0, #0x2
0xffff7ab33d40   192  ldr x16, pc+248 (addr 0x0000ffff7ab33e38)    ;; code: BUILTIN
0xffff7ab33d44   196  br x16
0xffff7ab33d48   200  tbz w1, #0, #+0x88 (addr 0xffff7ab33dd0)
0xffff7ab33d4c   204  ldur x5, [x1, #-1]
0xffff7ab33d50   208  ldrb w5, [x5, #11]
0xffff7ab33d54   212  cmp x5, #0xc9 (201)
0xffff7ab33d58   216  b.ne #+0x78 (addr 0xffff7ab33dd0)
0xffff7ab33d5c   220  ldur x5, [cp, #39]
0xffff7ab33d60   224  ldur x5, [x5, #95]
0xffff7ab33d64   228  cmp x1, x5
0xffff7ab33d68   232  b.eq #+0x68 (addr 0xffff7ab33dd0)
0xffff7ab33d6c   236  ldur x4, [x1, #39]
0xffff7ab33d70   240  ldur x4, [x4, #39]
0xffff7ab33d74   244  ldur x5, [cp, #39]
0xffff7ab33d78   248  cmp x4, x5
0xffff7ab33d7c   252  b.ne #+0x54 (addr 0xffff7ab33dd0)
0xffff7ab33d80   256  movz x5, #0x200000000
0xffff7ab33d84   260  adds x4, x2, x3, asr #29
0xffff7ab33d88   264  stur x5, [x4, #23]
0xffff7ab33d8c   268  movz x16, #0xc00000000
0xffff7ab33d90   272  sub csp, jssp, #0x10 (16)
0xffff7ab33d94   276  stp fp, lr, [jssp, #-16]!
0xffff7ab33d98   280  sub csp, jssp, #0x10 (16)
0xffff7ab33d9c   284  str x16, [jssp, #-8]!
0xffff7ab33da0   288  ldr x17, pc+160 (addr 0x0000ffff7ab33e40)    ;; object: 0xffff7ab33c21 <Code: CALL_IC>
0xffff7ab33da4   292  sub csp, jssp, #0x10 (16)
0xffff7ab33da8   296  str x17, [jssp, #-8]!
0xffff7ab33dac   300  add fp, jssp, #0x10 (16)
0xffff7ab33db0   304  sub csp, jssp, #0x8 (8)
0xffff7ab33db4   308  str x1, [jssp, #-8]!
0xffff7ab33db8   312  ldr x16, pc+144 (addr 0x0000ffff7ab33e48)    ;; code: STUB, CreateWeakCellStub, minor: 0
0xffff7ab33dbc   316  blr x16
0xffff7ab33dc0   320  ldr x1, [jssp], #8
0xffff7ab33dc4   324  mov jssp, fp
0xffff7ab33dc8   328  ldp fp, lr, [jssp], #16
0xffff7ab33dcc   332  b #-0x11c (addr 0xffff7ab33cb0)
0xffff7ab33dd0   336  movz x16, #0xc00000000
0xffff7ab33dd4   340  sub csp, jssp, #0x10 (16)
0xffff7ab33dd8   344  stp fp, lr, [jssp, #-16]!
0xffff7ab33ddc   348  sub csp, jssp, #0x10 (16)
0xffff7ab33de0   352  str x16, [jssp, #-8]!
0xffff7ab33de4   356  ldr x17, pc+108 (addr 0x0000ffff7ab33e50)    ;; object: 0xffff7ab33c21 <Code: CALL_IC>
0xffff7ab33de8   360  sub csp, jssp, #0x10 (16)
0xffff7ab33dec   364  str x17, [jssp, #-8]!
0xffff7ab33df0   368  add fp, jssp, #0x10 (16)
0xffff7ab33df4   372  sub csp, jssp, #0x18 (24)
0xffff7ab33df8   376  stp x3, x2, [jssp, #-24]!
0xffff7ab33dfc   380  str x1, [jssp, #16]
0xffff7ab33e00   384  movz x0, #0x3
0xffff7ab33e04   388  ldr x1, pc+84 (addr 0x0000ffff7ab33e58)    ;; external reference (Runtime::CallIC_Miss)
0xffff7ab33e08   392  ldr x16, pc+88 (addr 0x0000ffff7ab33e60)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab33e0c   396  blr x16
0xffff7ab33e10   400  mov x1, x0
0xffff7ab33e14   404  mov jssp, fp
0xffff7ab33e18   408  ldp fp, lr, [jssp], #16
0xffff7ab33e1c   412  b #-0xe0 (addr 0xffff7ab33d3c)
0xffff7ab33e20   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7ab33e24   420  d63f03e0       constant
0xffff7ab33e28   424  7ab1e600       constant
0xffff7ab33e2c   428  0000ffff       constant
0xffff7ab33e30   432  7ab33b00       constant
0xffff7ab33e34   436  0000ffff       constant
0xffff7ab33e38   440  7ab1f6c0       constant
0xffff7ab33e3c   444  0000ffff       constant
0xffff7ab33e40   448  7ab33c21       constant
0xffff7ab33e44   452  0000ffff       constant
0xffff7ab33e48   456  7ab0ddc0       constant
0xffff7ab33e4c   460  0000ffff       constant
0xffff7ab33e50   464  7ab33c21       constant
0xffff7ab33e54   468  0000ffff       constant
0xffff7ab33e58   472  00c86928       constant
0xffff7ab33e5c   476  00000000       constant
0xffff7ab33e60   480  7ab06060       constant
0xffff7ab33e64   484  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab33cb4  code target (BUILTIN)  (0xffff7ab1e600)
0xffff7ab33d0c  code target (STUB)  (0xffff7ab33b00)
0xffff7ab33d40  code target (BUILTIN)  (0xffff7ab1f6c0)
0xffff7ab33da0  embedded object  (0xffff7ab33c21 <Code: CALL_IC>)
0xffff7ab33db8  code target (STUB)  (0xffff7ab0ddc0)
0xffff7ab33de4  embedded object  (0xffff7ab33c21 <Code: CALL_IC>)
0xffff7ab33e04  external reference (Runtime::CallIC_Miss)  (0xc86928)
0xffff7ab33e08  code target (STUB)  (0xffff7ab06060)
0xffff7ab33e20  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 327682
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0xffff7ab33ee0     0  ldur x2, [fp, #-16]
0xffff7ab33ee4     4  ldur x2, [x2, #31]
0xffff7ab33ee8     8  ldur x2, [x2, #87]
0xffff7ab33eec    12  ldr x16, pc+20 (addr 0x0000ffff7ab33f00)    ;; code: CALL_IC, GENERIC
0xffff7ab33ef0    16  br x16
0xffff7ab33ef4    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab33ef8    24  d63f03e0       constant
0xffff7ab33efc    28  d503201f       constant
0xffff7ab33f00    32  7ab33c80       constant
0xffff7ab33f04    36  0000ffff       constant


RelocInfo (size = 7)
0xffff7ab33eec  code target (CALL_IC)  (0xffff7ab33c80)
0xffff7ab33ef4  constant pool (size 20)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 327683
name = CallICStub(args(3), NOT_NULL_OR_UNDEFINED, 
compiler = unknown
Instructions (size = 488)
0xffff7ab33f80     0  add x4, x2, x3, asr #29
0xffff7ab33f84     4  ldur x4, [x4, #15]
0xffff7ab33f88     8  ldur x5, [x4, #7]
0xffff7ab33f8c    12  cmp x5, x1
0xffff7ab33f90    16  b.ne #+0x2c (addr 0xffff7ab33fbc)
0xffff7ab33f94    20  tbz w1, #0, #+0x28 (addr 0xffff7ab33fbc)
0xffff7ab33f98    24  add x2, x2, x3, asr #29
0xffff7ab33f9c    28  add x2, x2, #0x18 (24)
0xffff7ab33fa0    32  ldur x3, [x2, #-1]
0xffff7ab33fa4    36  movz x16, #0x200000000
0xffff7ab33fa8    40  add x3, x3, x16
0xffff7ab33fac    44  stur x3, [x2, #-1]
0xffff7ab33fb0    48  movz x0, #0x3
0xffff7ab33fb4    52  ldr x16, pc+372 (addr 0x0000ffff7ab34128)    ;; code: BUILTIN
0xffff7ab33fb8    56  br x16
0xffff7ab33fbc    60  ldr x16, [x26, #2400]
0xffff7ab33fc0    64  cmp x4, x16
0xffff7ab33fc4    68  b.eq #+0x78 (addr 0xffff7ab3403c)
0xffff7ab33fc8    72  ldur x5, [x4, #-1]
0xffff7ab33fcc    76  ldr x16, [x26, #2736]
0xffff7ab33fd0    80  cmp x5, x16
0xffff7ab33fd4    84  b.ne #+0x40 (addr 0xffff7ab34014)
0xffff7ab33fd8    88  ldur x5, [cp, #39]
0xffff7ab33fdc    92  ldur x5, [x5, #95]
0xffff7ab33fe0    96  cmp x1, x5
0xffff7ab33fe4   100  b.ne #+0xec (addr 0xffff7ab340d0)
0xffff7ab33fe8   104  movz x0, #0x3
0xffff7ab33fec   108  add x2, x2, x3, asr #29
0xffff7ab33ff0   112  add x2, x2, #0x18 (24)
0xffff7ab33ff4   116  ldur x3, [x2, #-1]
0xffff7ab33ff8   120  movz x16, #0x200000000
0xffff7ab33ffc   124  add x3, x3, x16
0xffff7ab34000   128  stur x3, [x2, #-1]
0xffff7ab34004   132  mov x2, x4
0xffff7ab34008   136  mov x3, x1
0xffff7ab3400c   140  ldr x16, pc+292 (addr 0x0000ffff7ab34130)    ;; code: STUB, ArrayConstructorStub, minor: 3
0xffff7ab34010   144  br x16
0xffff7ab34014   148  ldr x16, [x26, #2568]
0xffff7ab34018   152  cmp x4, x16
0xffff7ab3401c   156  b.eq #+0xb4 (addr 0xffff7ab340d0)
0xffff7ab34020   160  ldur x5, [x4, #-1]
0xffff7ab34024   164  ldrb w5, [x5, #11]
0xffff7ab34028   168  cmp x5, #0xc9 (201)
0xffff7ab3402c   172  b.ne #+0xa4 (addr 0xffff7ab340d0)
0xffff7ab34030   176  add x4, x2, x3, asr #29
0xffff7ab34034   180  ldr x5, [x26, #2400]
0xffff7ab34038   184  stur x5, [x4, #15]
0xffff7ab3403c   188  movz x0, #0x3
0xffff7ab34040   192  ldr x16, pc+248 (addr 0x0000ffff7ab34138)    ;; code: BUILTIN
0xffff7ab34044   196  br x16
0xffff7ab34048   200  tbz w1, #0, #+0x88 (addr 0xffff7ab340d0)
0xffff7ab3404c   204  ldur x5, [x1, #-1]
0xffff7ab34050   208  ldrb w5, [x5, #11]
0xffff7ab34054   212  cmp x5, #0xc9 (201)
0xffff7ab34058   216  b.ne #+0x78 (addr 0xffff7ab340d0)
0xffff7ab3405c   220  ldur x5, [cp, #39]
0xffff7ab34060   224  ldur x5, [x5, #95]
0xffff7ab34064   228  cmp x1, x5
0xffff7ab34068   232  b.eq #+0x68 (addr 0xffff7ab340d0)
0xffff7ab3406c   236  ldur x4, [x1, #39]
0xffff7ab34070   240  ldur x4, [x4, #39]
0xffff7ab34074   244  ldur x5, [cp, #39]
0xffff7ab34078   248  cmp x4, x5
0xffff7ab3407c   252  b.ne #+0x54 (addr 0xffff7ab340d0)
0xffff7ab34080   256  movz x5, #0x200000000
0xffff7ab34084   260  adds x4, x2, x3, asr #29
0xffff7ab34088   264  stur x5, [x4, #23]
0xffff7ab3408c   268  movz x16, #0xc00000000
0xffff7ab34090   272  sub csp, jssp, #0x10 (16)
0xffff7ab34094   276  stp fp, lr, [jssp, #-16]!
0xffff7ab34098   280  sub csp, jssp, #0x10 (16)
0xffff7ab3409c   284  str x16, [jssp, #-8]!
0xffff7ab340a0   288  ldr x17, pc+160 (addr 0x0000ffff7ab34140)    ;; object: 0xffff7ab33f21 <Code: CALL_IC>
0xffff7ab340a4   292  sub csp, jssp, #0x10 (16)
0xffff7ab340a8   296  str x17, [jssp, #-8]!
0xffff7ab340ac   300  add fp, jssp, #0x10 (16)
0xffff7ab340b0   304  sub csp, jssp, #0x8 (8)
0xffff7ab340b4   308  str x1, [jssp, #-8]!
0xffff7ab340b8   312  ldr x16, pc+144 (addr 0x0000ffff7ab34148)    ;; code: STUB, CreateWeakCellStub, minor: 0
0xffff7ab340bc   316  blr x16
0xffff7ab340c0   320  ldr x1, [jssp], #8
0xffff7ab340c4   324  mov jssp, fp
0xffff7ab340c8   328  ldp fp, lr, [jssp], #16
0xffff7ab340cc   332  b #-0x11c (addr 0xffff7ab33fb0)
0xffff7ab340d0   336  movz x16, #0xc00000000
0xffff7ab340d4   340  sub csp, jssp, #0x10 (16)
0xffff7ab340d8   344  stp fp, lr, [jssp, #-16]!
0xffff7ab340dc   348  sub csp, jssp, #0x10 (16)
0xffff7ab340e0   352  str x16, [jssp, #-8]!
0xffff7ab340e4   356  ldr x17, pc+108 (addr 0x0000ffff7ab34150)    ;; object: 0xffff7ab33f21 <Code: CALL_IC>
0xffff7ab340e8   360  sub csp, jssp, #0x10 (16)
0xffff7ab340ec   364  str x17, [jssp, #-8]!
0xffff7ab340f0   368  add fp, jssp, #0x10 (16)
0xffff7ab340f4   372  sub csp, jssp, #0x18 (24)
0xffff7ab340f8   376  stp x3, x2, [jssp, #-24]!
0xffff7ab340fc   380  str x1, [jssp, #16]
0xffff7ab34100   384  movz x0, #0x3
0xffff7ab34104   388  ldr x1, pc+84 (addr 0x0000ffff7ab34158)    ;; external reference (Runtime::CallIC_Miss)
0xffff7ab34108   392  ldr x16, pc+88 (addr 0x0000ffff7ab34160)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab3410c   396  blr x16
0xffff7ab34110   400  mov x1, x0
0xffff7ab34114   404  mov jssp, fp
0xffff7ab34118   408  ldp fp, lr, [jssp], #16
0xffff7ab3411c   412  b #-0xe0 (addr 0xffff7ab3403c)
0xffff7ab34120   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7ab34124   420  d63f03e0       constant
0xffff7ab34128   424  7ab1e600       constant
0xffff7ab3412c   428  0000ffff       constant
0xffff7ab34130   432  7ab33b00       constant
0xffff7ab34134   436  0000ffff       constant
0xffff7ab34138   440  7ab1f6c0       constant
0xffff7ab3413c   444  0000ffff       constant
0xffff7ab34140   448  7ab33f21       constant
0xffff7ab34144   452  0000ffff       constant
0xffff7ab34148   456  7ab0ddc0       constant
0xffff7ab3414c   460  0000ffff       constant
0xffff7ab34150   464  7ab33f21       constant
0xffff7ab34154   468  0000ffff       constant
0xffff7ab34158   472  00c86928       constant
0xffff7ab3415c   476  00000000       constant
0xffff7ab34160   480  7ab06060       constant
0xffff7ab34164   484  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab33fb4  code target (BUILTIN)  (0xffff7ab1e600)
0xffff7ab3400c  code target (STUB)  (0xffff7ab33b00)
0xffff7ab34040  code target (BUILTIN)  (0xffff7ab1f6c0)
0xffff7ab340a0  embedded object  (0xffff7ab33f21 <Code: CALL_IC>)
0xffff7ab340b8  code target (STUB)  (0xffff7ab0ddc0)
0xffff7ab340e4  embedded object  (0xffff7ab33f21 <Code: CALL_IC>)
0xffff7ab34104  external reference (Runtime::CallIC_Miss)  (0xc86928)
0xffff7ab34108  code target (STUB)  (0xffff7ab06060)
0xffff7ab34120  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 327683
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0xffff7ab341e0     0  ldur x2, [fp, #-16]
0xffff7ab341e4     4  ldur x2, [x2, #31]
0xffff7ab341e8     8  ldur x2, [x2, #87]
0xffff7ab341ec    12  ldr x16, pc+20 (addr 0x0000ffff7ab34200)    ;; code: CALL_IC, GENERIC
0xffff7ab341f0    16  br x16
0xffff7ab341f4    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab341f8    24  d63f03e0       constant
0xffff7ab341fc    28  d503201f       constant
0xffff7ab34200    32  7ab33f80       constant
0xffff7ab34204    36  0000ffff       constant


RelocInfo (size = 7)
0xffff7ab341ec  code target (CALL_IC)  (0xffff7ab33f80)
0xffff7ab341f4  constant pool (size 20)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 327684
name = CallICStub(args(4), NOT_NULL_OR_UNDEFINED, 
compiler = unknown
Instructions (size = 488)
0xffff7ab34280     0  add x4, x2, x3, asr #29
0xffff7ab34284     4  ldur x4, [x4, #15]
0xffff7ab34288     8  ldur x5, [x4, #7]
0xffff7ab3428c    12  cmp x5, x1
0xffff7ab34290    16  b.ne #+0x2c (addr 0xffff7ab342bc)
0xffff7ab34294    20  tbz w1, #0, #+0x28 (addr 0xffff7ab342bc)
0xffff7ab34298    24  add x2, x2, x3, asr #29
0xffff7ab3429c    28  add x2, x2, #0x18 (24)
0xffff7ab342a0    32  ldur x3, [x2, #-1]
0xffff7ab342a4    36  movz x16, #0x200000000
0xffff7ab342a8    40  add x3, x3, x16
0xffff7ab342ac    44  stur x3, [x2, #-1]
0xffff7ab342b0    48  movz x0, #0x4
0xffff7ab342b4    52  ldr x16, pc+372 (addr 0x0000ffff7ab34428)    ;; code: BUILTIN
0xffff7ab342b8    56  br x16
0xffff7ab342bc    60  ldr x16, [x26, #2400]
0xffff7ab342c0    64  cmp x4, x16
0xffff7ab342c4    68  b.eq #+0x78 (addr 0xffff7ab3433c)
0xffff7ab342c8    72  ldur x5, [x4, #-1]
0xffff7ab342cc    76  ldr x16, [x26, #2736]
0xffff7ab342d0    80  cmp x5, x16
0xffff7ab342d4    84  b.ne #+0x40 (addr 0xffff7ab34314)
0xffff7ab342d8    88  ldur x5, [cp, #39]
0xffff7ab342dc    92  ldur x5, [x5, #95]
0xffff7ab342e0    96  cmp x1, x5
0xffff7ab342e4   100  b.ne #+0xec (addr 0xffff7ab343d0)
0xffff7ab342e8   104  movz x0, #0x4
0xffff7ab342ec   108  add x2, x2, x3, asr #29
0xffff7ab342f0   112  add x2, x2, #0x18 (24)
0xffff7ab342f4   116  ldur x3, [x2, #-1]
0xffff7ab342f8   120  movz x16, #0x200000000
0xffff7ab342fc   124  add x3, x3, x16
0xffff7ab34300   128  stur x3, [x2, #-1]
0xffff7ab34304   132  mov x2, x4
0xffff7ab34308   136  mov x3, x1
0xffff7ab3430c   140  ldr x16, pc+292 (addr 0x0000ffff7ab34430)    ;; code: STUB, ArrayConstructorStub, minor: 3
0xffff7ab34310   144  br x16
0xffff7ab34314   148  ldr x16, [x26, #2568]
0xffff7ab34318   152  cmp x4, x16
0xffff7ab3431c   156  b.eq #+0xb4 (addr 0xffff7ab343d0)
0xffff7ab34320   160  ldur x5, [x4, #-1]
0xffff7ab34324   164  ldrb w5, [x5, #11]
0xffff7ab34328   168  cmp x5, #0xc9 (201)
0xffff7ab3432c   172  b.ne #+0xa4 (addr 0xffff7ab343d0)
0xffff7ab34330   176  add x4, x2, x3, asr #29
0xffff7ab34334   180  ldr x5, [x26, #2400]
0xffff7ab34338   184  stur x5, [x4, #15]
0xffff7ab3433c   188  movz x0, #0x4
0xffff7ab34340   192  ldr x16, pc+248 (addr 0x0000ffff7ab34438)    ;; code: BUILTIN
0xffff7ab34344   196  br x16
0xffff7ab34348   200  tbz w1, #0, #+0x88 (addr 0xffff7ab343d0)
0xffff7ab3434c   204  ldur x5, [x1, #-1]
0xffff7ab34350   208  ldrb w5, [x5, #11]
0xffff7ab34354   212  cmp x5, #0xc9 (201)
0xffff7ab34358   216  b.ne #+0x78 (addr 0xffff7ab343d0)
0xffff7ab3435c   220  ldur x5, [cp, #39]
0xffff7ab34360   224  ldur x5, [x5, #95]
0xffff7ab34364   228  cmp x1, x5
0xffff7ab34368   232  b.eq #+0x68 (addr 0xffff7ab343d0)
0xffff7ab3436c   236  ldur x4, [x1, #39]
0xffff7ab34370   240  ldur x4, [x4, #39]
0xffff7ab34374   244  ldur x5, [cp, #39]
0xffff7ab34378   248  cmp x4, x5
0xffff7ab3437c   252  b.ne #+0x54 (addr 0xffff7ab343d0)
0xffff7ab34380   256  movz x5, #0x200000000
0xffff7ab34384   260  adds x4, x2, x3, asr #29
0xffff7ab34388   264  stur x5, [x4, #23]
0xffff7ab3438c   268  movz x16, #0xc00000000
0xffff7ab34390   272  sub csp, jssp, #0x10 (16)
0xffff7ab34394   276  stp fp, lr, [jssp, #-16]!
0xffff7ab34398   280  sub csp, jssp, #0x10 (16)
0xffff7ab3439c   284  str x16, [jssp, #-8]!
0xffff7ab343a0   288  ldr x17, pc+160 (addr 0x0000ffff7ab34440)    ;; object: 0xffff7ab34221 <Code: CALL_IC>
0xffff7ab343a4   292  sub csp, jssp, #0x10 (16)
0xffff7ab343a8   296  str x17, [jssp, #-8]!
0xffff7ab343ac   300  add fp, jssp, #0x10 (16)
0xffff7ab343b0   304  sub csp, jssp, #0x8 (8)
0xffff7ab343b4   308  str x1, [jssp, #-8]!
0xffff7ab343b8   312  ldr x16, pc+144 (addr 0x0000ffff7ab34448)    ;; code: STUB, CreateWeakCellStub, minor: 0
0xffff7ab343bc   316  blr x16
0xffff7ab343c0   320  ldr x1, [jssp], #8
0xffff7ab343c4   324  mov jssp, fp
0xffff7ab343c8   328  ldp fp, lr, [jssp], #16
0xffff7ab343cc   332  b #-0x11c (addr 0xffff7ab342b0)
0xffff7ab343d0   336  movz x16, #0xc00000000
0xffff7ab343d4   340  sub csp, jssp, #0x10 (16)
0xffff7ab343d8   344  stp fp, lr, [jssp, #-16]!
0xffff7ab343dc   348  sub csp, jssp, #0x10 (16)
0xffff7ab343e0   352  str x16, [jssp, #-8]!
0xffff7ab343e4   356  ldr x17, pc+108 (addr 0x0000ffff7ab34450)    ;; object: 0xffff7ab34221 <Code: CALL_IC>
0xffff7ab343e8   360  sub csp, jssp, #0x10 (16)
0xffff7ab343ec   364  str x17, [jssp, #-8]!
0xffff7ab343f0   368  add fp, jssp, #0x10 (16)
0xffff7ab343f4   372  sub csp, jssp, #0x18 (24)
0xffff7ab343f8   376  stp x3, x2, [jssp, #-24]!
0xffff7ab343fc   380  str x1, [jssp, #16]
0xffff7ab34400   384  movz x0, #0x3
0xffff7ab34404   388  ldr x1, pc+84 (addr 0x0000ffff7ab34458)    ;; external reference (Runtime::CallIC_Miss)
0xffff7ab34408   392  ldr x16, pc+88 (addr 0x0000ffff7ab34460)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab3440c   396  blr x16
0xffff7ab34410   400  mov x1, x0
0xffff7ab34414   404  mov jssp, fp
0xffff7ab34418   408  ldp fp, lr, [jssp], #16
0xffff7ab3441c   412  b #-0xe0 (addr 0xffff7ab3433c)
0xffff7ab34420   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7ab34424   420  d63f03e0       constant
0xffff7ab34428   424  7ab1e600       constant
0xffff7ab3442c   428  0000ffff       constant
0xffff7ab34430   432  7ab33b00       constant
0xffff7ab34434   436  0000ffff       constant
0xffff7ab34438   440  7ab1f6c0       constant
0xffff7ab3443c   444  0000ffff       constant
0xffff7ab34440   448  7ab34221       constant
0xffff7ab34444   452  0000ffff       constant
0xffff7ab34448   456  7ab0ddc0       constant
0xffff7ab3444c   460  0000ffff       constant
0xffff7ab34450   464  7ab34221       constant
0xffff7ab34454   468  0000ffff       constant
0xffff7ab34458   472  00c86928       constant
0xffff7ab3445c   476  00000000       constant
0xffff7ab34460   480  7ab06060       constant
0xffff7ab34464   484  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab342b4  code target (BUILTIN)  (0xffff7ab1e600)
0xffff7ab3430c  code target (STUB)  (0xffff7ab33b00)
0xffff7ab34340  code target (BUILTIN)  (0xffff7ab1f6c0)
0xffff7ab343a0  embedded object  (0xffff7ab34221 <Code: CALL_IC>)
0xffff7ab343b8  code target (STUB)  (0xffff7ab0ddc0)
0xffff7ab343e4  embedded object  (0xffff7ab34221 <Code: CALL_IC>)
0xffff7ab34404  external reference (Runtime::CallIC_Miss)  (0xc86928)
0xffff7ab34408  code target (STUB)  (0xffff7ab06060)
0xffff7ab34420  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 327684
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0xffff7ab344e0     0  ldur x2, [fp, #-16]
0xffff7ab344e4     4  ldur x2, [x2, #31]
0xffff7ab344e8     8  ldur x2, [x2, #87]
0xffff7ab344ec    12  ldr x16, pc+20 (addr 0x0000ffff7ab34500)    ;; code: CALL_IC, GENERIC
0xffff7ab344f0    16  br x16
0xffff7ab344f4    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab344f8    24  d63f03e0       constant
0xffff7ab344fc    28  d503201f       constant
0xffff7ab34500    32  7ab34280       constant
0xffff7ab34504    36  0000ffff       constant


RelocInfo (size = 7)
0xffff7ab344ec  code target (CALL_IC)  (0xffff7ab34280)
0xffff7ab344f4  constant pool (size 20)


kind = STUB
major_key = MathPowStub
name = MathPowStub
compiler = unknown
Instructions (size = 344)
0xffff7ab34580     0  ldp x11, x10, [jssp], #16
0xffff7ab34584     4  tbz w10, #0, #+0x1c (addr 0xffff7ab345a0)
0xffff7ab34588     8  ldur x16, [x10, #-1]
0xffff7ab3458c    12  ldr x17, [x26, #120]
0xffff7ab34590    16  cmp x16, x17
0xffff7ab34594    20  b.ne #+0xd8 (addr 0xffff7ab3466c)
0xffff7ab34598    24  ldur d0, [x10, #7]
0xffff7ab3459c    28  b #+0x8 (addr 0xffff7ab345a4)
0xffff7ab345a0    32  scvtf d0, x10, #32
0xffff7ab345a4    36  tbz w11, #0, #+0x80 (addr 0xffff7ab34624)
0xffff7ab345a8    40  ldur x16, [x11, #-1]
0xffff7ab345ac    44  ldr x17, [x26, #120]
0xffff7ab345b0    48  cmp x16, x17
0xffff7ab345b4    52  b.ne #+0xb8 (addr 0xffff7ab3466c)
0xffff7ab345b8    56  ldur d1, [x11, #7]
0xffff7ab345bc    60  fcvtzs x12, d1
0xffff7ab345c0    64  scvtf d7, x12
0xffff7ab345c4    68  fcmp d1, d7
0xffff7ab345c8    72  b.eq #+0x60 (addr 0xffff7ab34628)
0xffff7ab345cc    76  fmov d4, #0xe0 (-0.5000)
0xffff7ab345d0    80  fmov d3, #0x60 (0.5000)
0xffff7ab345d4    84  fcmp d4, d1
0xffff7ab345d8    88  fccmp d3, d1, #NZcv, ne
0xffff7ab345dc    92  b.ne #+0x90 (addr 0xffff7ab3466c)
0xffff7ab345e0    96  fadd d0, d0, d15
0xffff7ab345e4   100  fsub d7, d0, d0
0xffff7ab345e8   104  fcmp d7, #0.0
0xffff7ab345ec   108  fabs d6, d0
0xffff7ab345f0   112  fcsel d0, d6, d0, vs
0xffff7ab345f4   116  fsqrt d0, d0
0xffff7ab345f8   120  fcmp d1, #0.0
0xffff7ab345fc   124  b.ge #+0x88 (addr 0xffff7ab34684)
0xffff7ab34600   128  fmov d7, #0x70 (1.0000)
0xffff7ab34604   132  fdiv d0, d7, d0
0xffff7ab34608   136  b #+0x7c (addr 0xffff7ab34684)
0xffff7ab3460c   140  mov x19, lr
0xffff7ab34610   144  ldr x16, pc+168 (addr 0x0000ffff7ab346b8)    ;; external reference (power_double_double_function)
0xffff7ab34614   148  and csp, jssp, #0xfffffffffffffff0
0xffff7ab34618   152  blr x16
0xffff7ab3461c   156  mov lr, x19
0xffff7ab34620   160  b #+0x64 (addr 0xffff7ab34684)
0xffff7ab34624   164  asr x12, x11, #32
0xffff7ab34628   168  cmp x12, #0x0 (0)
0xffff7ab3462c   172  cneg x13, x12, mi
0xffff7ab34630   176  fmov d6, d0
0xffff7ab34634   180  fmov d2, d0
0xffff7ab34638   184  fmov d0, #0x70 (1.0000)
0xffff7ab3463c   188  b #+0x10 (addr 0xffff7ab3464c)
0xffff7ab34640   192  fmul d6, d6, d6
0xffff7ab34644   196  lsr x13, x13, #1
0xffff7ab34648   200  cbz x13, #+0x10 (addr 0xffff7ab34658)
0xffff7ab3464c   204  tbz w13, #0, #-0xc (addr 0xffff7ab34640)
0xffff7ab34650   208  fmul d0, d0, d6
0xffff7ab34654   212  b #-0x14 (addr 0xffff7ab34640)
0xffff7ab34658   216  tbz x12, #63, #+0x2c (addr 0xffff7ab34684)
0xffff7ab3465c   220  fmov d7, #0x70 (1.0000)
0xffff7ab34660   224  fdiv d0, d7, d0
0xffff7ab34664   228  fcmp d0, #0.0
0xffff7ab34668   232  b.ne #+0x1c (addr 0xffff7ab34684)
0xffff7ab3466c   236  sub csp, jssp, #0x10 (16)
0xffff7ab34670   240  stp x11, x10, [jssp, #-16]!
0xffff7ab34674   244  movz x0, #0x2
0xffff7ab34678   248  ldr x1, pc+72 (addr 0x0000ffff7ab346c0)    ;; external reference (Runtime::MathPowRT)
0xffff7ab3467c   252  ldr x16, pc+76 (addr 0x0000ffff7ab346c8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab34680   256  br x16
0xffff7ab34684   260  ldr x15, pc+76 (addr 0x0000ffff7ab346d0)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0xffff7ab34688   264  ldp x0, x14, [x15]
0xffff7ab3468c   268  adds x16, x0, #0x10 (16)
0xffff7ab34690   272  ccmp x16, x14, #nzCv, lo
0xffff7ab34694   276  b.hi #-0x28 (addr 0xffff7ab3466c)
0xffff7ab34698   280  str x16, [x15]
0xffff7ab3469c   284  ldr d30, [x26, #120]
0xffff7ab346a0   288  stp d30, d0, [x0]
0xffff7ab346a4   292  orr x0, x0, #0x1
0xffff7ab346a8   296  ret
0xffff7ab346ac   300  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0xffff7ab346b0   304  d63f03e0       constant
0xffff7ab346b4   308  d503201f       constant
0xffff7ab346b8   312  009362e0       constant
0xffff7ab346bc   316  00000000       constant
0xffff7ab346c0   320  00e39ee8       constant
0xffff7ab346c4   324  00000000       constant
0xffff7ab346c8   328  7ab06060       constant
0xffff7ab346cc   332  0000ffff       constant
0xffff7ab346d0   336  09abe2c0       constant
0xffff7ab346d4   340  00000000       constant


RelocInfo (size = 17)
0xffff7ab34610  external reference (power_double_double_function)  (0x9362e0)
0xffff7ab34678  external reference (Runtime::MathPowRT)  (0xe39ee8)
0xffff7ab3467c  code target (STUB)  (0xffff7ab06060)
0xffff7ab34684  external reference (Heap::NewSpaceAllocationTopAddress())  (0x9abe2c0)
0xffff7ab346ac  constant pool (size 44)


kind = KEYED_LOAD_IC
major_key = KeyedLoadICTrampolineStub
ic_state = GENERIC
extra_ic_state = 0
name = KeyedLoadICTrampolineStub
compiler = unknown
Instructions (size = 368)
0xffff7ab36c80     0  ldur x3, [fp, #-16]
0xffff7ab36c84     4  ldur x3, [x3, #31]
0xffff7ab36c88     8  ldur x3, [x3, #87]
0xffff7ab36c8c    12  add x4, x3, x0, asr #29
0xffff7ab36c90    16  ldur x4, [x4, #15]
0xffff7ab36c94    20  tbz w1, #0, #+0x130 (addr 0xffff7ab36dc4)
0xffff7ab36c98    24  ldur x5, [x1, #-1]
0xffff7ab36c9c    28  ldur x6, [x4, #7]
0xffff7ab36ca0    32  cmp x6, x5
0xffff7ab36ca4    36  b.ne #+0x14 (addr 0xffff7ab36cb8)
0xffff7ab36ca8    40  add x4, x3, x0, asr #29
0xffff7ab36cac    44  ldur x4, [x4, #23]
0xffff7ab36cb0    48  add x4, x4, #0x5f (95)
0xffff7ab36cb4    52  br x4
0xffff7ab36cb8    56  ldur x6, [x4, #-1]
0xffff7ab36cbc    60  ldr x16, [x26, #224]
0xffff7ab36cc0    64  cmp x6, x16
0xffff7ab36cc4    68  b.ne #+0x5c (addr 0xffff7ab36d20)
0xffff7ab36cc8    72  ldur x6, [x4, #15]
0xffff7ab36ccc    76  ldur x6, [x6, #7]
0xffff7ab36cd0    80  cmp x5, x6
0xffff7ab36cd4    84  b.ne #+0x10 (addr 0xffff7ab36ce4)
0xffff7ab36cd8    88  ldur x4, [x4, #23]
0xffff7ab36cdc    92  add x4, x4, #0x5f (95)
0xffff7ab36ce0    96  br x4
0xffff7ab36ce4   100  ldur x7, [x4, #7]
0xffff7ab36ce8   104  add x7, x4, x7, asr #29
0xffff7ab36cec   108  add x7, x7, #0xf (15)
0xffff7ab36cf0   112  add x4, x4, #0x1f (31)
0xffff7ab36cf4   116  ldr x6, [x4]
0xffff7ab36cf8   120  ldur x6, [x6, #7]
0xffff7ab36cfc   124  cmp x5, x6
0xffff7ab36d00   128  b.ne #+0x10 (addr 0xffff7ab36d10)
0xffff7ab36d04   132  ldr x4, [x4, #8]
0xffff7ab36d08   136  add x4, x4, #0x5f (95)
0xffff7ab36d0c   140  br x4
0xffff7ab36d10   144  add x4, x4, #0x10 (16)
0xffff7ab36d14   148  cmp x4, x7
0xffff7ab36d18   152  b.lt #-0x24 (addr 0xffff7ab36cf4)
0xffff7ab36d1c   156  b #+0x8c (addr 0xffff7ab36da8)
0xffff7ab36d20   160  ldr x16, [x26, #2400]
0xffff7ab36d24   164  cmp x4, x16
0xffff7ab36d28   168  b.ne #+0xc (addr 0xffff7ab36d34)
0xffff7ab36d2c   172  ldr x16, pc+172 (addr 0x0000ffff7ab36dd8)    ;; code: KEYED_LOAD_IC, MEGAMORPHIC
0xffff7ab36d30   176  br x16
0xffff7ab36d34   180  cmp x2, x4
0xffff7ab36d38   184  b.ne #+0x70 (addr 0xffff7ab36da8)
0xffff7ab36d3c   188  add x4, x3, x0, asr #29
0xffff7ab36d40   192  ldur x4, [x4, #23]
0xffff7ab36d44   196  ldur x6, [x4, #15]
0xffff7ab36d48   200  ldur x6, [x6, #7]
0xffff7ab36d4c   204  cmp x5, x6
0xffff7ab36d50   208  b.ne #+0x10 (addr 0xffff7ab36d60)
0xffff7ab36d54   212  ldur x4, [x4, #23]
0xffff7ab36d58   216  add x4, x4, #0x5f (95)
0xffff7ab36d5c   220  br x4
0xffff7ab36d60   224  ldur x7, [x4, #7]
0xffff7ab36d64   228  movz x16, #0x200000000
0xffff7ab36d68   232  cmp x7, x16
0xffff7ab36d6c   236  b.eq #+0x3c (addr 0xffff7ab36da8)
0xffff7ab36d70   240  add x7, x4, x7, asr #29
0xffff7ab36d74   244  add x7, x7, #0xf (15)
0xffff7ab36d78   248  add x4, x4, #0x1f (31)
0xffff7ab36d7c   252  ldr x6, [x4]
0xffff7ab36d80   256  ldur x6, [x6, #7]
0xffff7ab36d84   260  cmp x5, x6
0xffff7ab36d88   264  b.ne #+0x10 (addr 0xffff7ab36d98)
0xffff7ab36d8c   268  ldr x4, [x4, #8]
0xffff7ab36d90   272  add x4, x4, #0x5f (95)
0xffff7ab36d94   276  br x4
0xffff7ab36d98   280  add x4, x4, #0x10 (16)
0xffff7ab36d9c   284  cmp x4, x7
0xffff7ab36da0   288  b.lt #-0x24 (addr 0xffff7ab36d7c)
0xffff7ab36da4   292  b #+0x4 (addr 0xffff7ab36da8)
0xffff7ab36da8   296  sub csp, jssp, #0x20 (32)
0xffff7ab36dac   300  stp x3, x0, [jssp, #-32]!
0xffff7ab36db0   304  stp x2, x1, [jssp, #16]
0xffff7ab36db4   308  movz x0, #0x4
0xffff7ab36db8   312  ldr x1, pc+40 (addr 0x0000ffff7ab36de0)    ;; external reference (Runtime::KeyedLoadIC_Miss)
0xffff7ab36dbc   316  ldr x16, pc+44 (addr 0x0000ffff7ab36de8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab36dc0   320  br x16
0xffff7ab36dc4   324  ldr x5, [x26, #120]
0xffff7ab36dc8   328  b #-0x12c (addr 0xffff7ab36c9c)
0xffff7ab36dcc   332  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab36dd0   336  d63f03e0       constant
0xffff7ab36dd4   340  d503201f       constant
0xffff7ab36dd8   344  7ab22900       constant
0xffff7ab36ddc   348  0000ffff       constant
0xffff7ab36de0   352  00c874c0       constant
0xffff7ab36de4   356  00000000       constant
0xffff7ab36de8   360  7ab06060       constant
0xffff7ab36dec   364  0000ffff       constant


RelocInfo (size = 14)
0xffff7ab36d2c  code target (KEYED_LOAD_IC)  (0xffff7ab22900)
0xffff7ab36db8  external reference (Runtime::KeyedLoadIC_Miss)  (0xc874c0)
0xffff7ab36dbc  code target (STUB)  (0xffff7ab06060)
0xffff7ab36dcc  constant pool (size 36)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab36fc0     0  ldur x0, [x1, #-1]
0xffff7ab36fc4     4  ldur x0, [x0, #47]
0xffff7ab36fc8     8  movz x16, #0x587
0xffff7ab36fcc    12  ldr x0, [x0, x16]
0xffff7ab36fd0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab37040     0  ldur x0, [x1, #7]
0xffff7ab37044     4  movz x16, #0x1cf
0xffff7ab37048     8  ldr x0, [x0, x16]
0xffff7ab3704c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0xffff7ab370c0     0  adr xzr, #+0x40 (addr 0xffff7ab37100)
0xffff7ab370c4     4  adr xzr, #+0x360 (addr 0xffff7ab37424)
0xffff7ab370c8     8  ldr x16, pc+1736 (addr 0x0000ffff7ab37790)    ;; external reference (store_buffer_top)
0xffff7ab370cc    12  ldr x13, [x16]
0xffff7ab370d0    16  str x6, [x13], #8
0xffff7ab370d4    20  str x13, [x16]
0xffff7ab370d8    24  tst x13, #0x1ffff
0xffff7ab370dc    28  b.eq #+0x8 (addr 0xffff7ab370e4)
0xffff7ab370e0    32  ret
0xffff7ab370e4    36  sub csp, jssp, #0x8 (8)
0xffff7ab370e8    40  str lr, [jssp, #-8]!
0xffff7ab370ec    44  ldr x17, pc+1708 (addr 0x0000ffff7ab37798)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab370f0    48  blr x17
0xffff7ab370f4    52  ldr lr, [jssp], #8
0xffff7ab370f8    56  ret
0xffff7ab370fc    60  ret
0xffff7ab37100    64  sub csp, jssp, #0x10 (16)
0xffff7ab37104    68  stp x2, x0, [jssp, #-16]!
0xffff7ab37108    72  ldr x13, [x6]
0xffff7ab3710c    76  and x16, x13, #0xfffffffffff00000
0xffff7ab37110    80  ldr x16, [x16, #8]
0xffff7ab37114    84  tst x16, #0x18
0xffff7ab37118    88  b.eq #+0x1d8 (addr 0xffff7ab372f0)
0xffff7ab3711c    92  and x16, x1, #0xfffffffffff00000
0xffff7ab37120    96  ldr x16, [x16, #8]
0xffff7ab37124   100  tst x16, #0x18
0xffff7ab37128   104  b.ne #+0x1c8 (addr 0xffff7ab372f0)
0xffff7ab3712c   108  and x13, x1, #0xfffffffffff00000
0xffff7ab37130   112  ldr x0, [x13, #104]
0xffff7ab37134   116  subs x0, x0, #0x1 (1)
0xffff7ab37138   120  str x0, [x13, #104]
0xffff7ab3713c   124  b.mi #+0xc4 (addr 0xffff7ab37200)
0xffff7ab37140   128  ubfx x16, x1, #8, #12
0xffff7ab37144   132  and x13, x1, #0xfffffffffff00000
0xffff7ab37148   136  add x13, x13, x16, lsl #2
0xffff7ab3714c   140  ubfx x0, x1, #3, #5
0xffff7ab37150   144  ldr x13, [x13, #360]
0xffff7ab37154   148  lsr x13, x13, x0
0xffff7ab37158   152  tbz w13, #0, #+0x8 (addr 0xffff7ab37160)
0xffff7ab3715c   156  tbnz w13, #1, #+0x3c (addr 0xffff7ab37198)
0xffff7ab37160   160  ldp x2, x0, [jssp], #16
0xffff7ab37164   164  ldr x16, pc+1596 (addr 0x0000ffff7ab377a0)    ;; external reference (store_buffer_top)
0xffff7ab37168   168  ldr x13, [x16]
0xffff7ab3716c   172  str x6, [x13], #8
0xffff7ab37170   176  str x13, [x16]
0xffff7ab37174   180  tst x13, #0x1ffff
0xffff7ab37178   184  b.eq #+0x8 (addr 0xffff7ab37180)
0xffff7ab3717c   188  ret
0xffff7ab37180   192  sub csp, jssp, #0x8 (8)
0xffff7ab37184   196  str lr, [jssp, #-8]!
0xffff7ab37188   200  ldr x17, pc+1568 (addr 0x0000ffff7ab377a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab3718c   204  blr x17
0xffff7ab37190   208  ldr lr, [jssp], #8
0xffff7ab37194   212  ret
0xffff7ab37198   216  ldr x13, [x6]
0xffff7ab3719c   220  sub csp, jssp, #0x10 (16)
0xffff7ab371a0   224  stp x1, x6, [jssp, #-16]!
0xffff7ab371a4   228  ubfx x16, x13, #8, #12
0xffff7ab371a8   232  and x0, x13, #0xfffffffffff00000
0xffff7ab371ac   236  add x0, x0, x16, lsl #2
0xffff7ab371b0   240  ubfx x1, x13, #3, #5
0xffff7ab371b4   244  ldr x6, [x0, #360]
0xffff7ab371b8   248  lsr x6, x6, x1
0xffff7ab371bc   252  tbz w6, #0, #+0x40 (addr 0xffff7ab371fc)
0xffff7ab371c0   256  ldp x1, x6, [jssp], #16
0xffff7ab371c4   260  ldp x2, x0, [jssp], #16
0xffff7ab371c8   264  ldr x16, pc+1512 (addr 0x0000ffff7ab377b0)    ;; external reference (store_buffer_top)
0xffff7ab371cc   268  ldr x13, [x16]
0xffff7ab371d0   272  str x6, [x13], #8
0xffff7ab371d4   276  str x13, [x16]
0xffff7ab371d8   280  tst x13, #0x1ffff
0xffff7ab371dc   284  b.eq #+0x8 (addr 0xffff7ab371e4)
0xffff7ab371e0   288  ret
0xffff7ab371e4   292  sub csp, jssp, #0x8 (8)
0xffff7ab371e8   296  str lr, [jssp, #-8]!
0xffff7ab371ec   300  ldr x17, pc+1484 (addr 0x0000ffff7ab377b8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab371f0   304  blr x17
0xffff7ab371f4   308  ldr lr, [jssp], #8
0xffff7ab371f8   312  ret
0xffff7ab371fc   316  ldp x1, x6, [jssp], #16
0xffff7ab37200   320  sub csp, jssp, #0x78 (120)
0xffff7ab37204   324  stp x14, x15, [jssp, #-32]!
0xffff7ab37208   328  stp x18, lr, [jssp, #16]
0xffff7ab3720c   332  stp x9, x10, [jssp, #-32]!
0xffff7ab37210   336  stp x11, x12, [jssp, #16]
0xffff7ab37214   340  stp x5, x6, [jssp, #-32]!
0xffff7ab37218   344  stp x7, x8, [jssp, #16]
0xffff7ab3721c   348  stp x1, x3, [jssp, #-24]!
0xffff7ab37220   352  str x4, [jssp, #16]
0xffff7ab37224   356  sub csp, jssp, #0xb0 (176)
0xffff7ab37228   360  stp d26, d27, [jssp, #-32]!
0xffff7ab3722c   364  stp d28, d29, [jssp, #16]
0xffff7ab37230   368  stp d22, d23, [jssp, #-32]!
0xffff7ab37234   372  stp d24, d25, [jssp, #16]
0xffff7ab37238   376  stp d18, d19, [jssp, #-32]!
0xffff7ab3723c   380  stp d20, d21, [jssp, #16]
0xffff7ab37240   384  stp d6, d7, [jssp, #-32]!
0xffff7ab37244   388  stp d16, d17, [jssp, #16]
0xffff7ab37248   392  stp d2, d3, [jssp, #-32]!
0xffff7ab3724c   396  stp d4, d5, [jssp, #16]
0xffff7ab37250   400  stp d0, d1, [jssp, #-16]!
0xffff7ab37254   404  mov x0, x1
0xffff7ab37258   408  mov x1, x6
0xffff7ab3725c   412  ldr x2, pc+1380 (addr 0x0000ffff7ab377c0)    ;; external reference (isolate)
0xffff7ab37260   416  ldr x16, pc+1384 (addr 0x0000ffff7ab377c8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab37264   420  and csp, jssp, #0xfffffffffffffff0
0xffff7ab37268   424  blr x16
0xffff7ab3726c   428  ldp d2, d3, [jssp, #16]
0xffff7ab37270   432  ldp d0, d1, [jssp], #32
0xffff7ab37274   436  ldp d6, d7, [jssp, #16]
0xffff7ab37278   440  ldp d4, d5, [jssp], #32
0xffff7ab3727c   444  ldp d18, d19, [jssp, #16]
0xffff7ab37280   448  ldp d16, d17, [jssp], #32
0xffff7ab37284   452  ldp d22, d23, [jssp, #16]
0xffff7ab37288   456  ldp d20, d21, [jssp], #32
0xffff7ab3728c   460  ldp d26, d27, [jssp, #16]
0xffff7ab37290   464  ldp d24, d25, [jssp], #32
0xffff7ab37294   468  ldp d28, d29, [jssp], #16
0xffff7ab37298   472  ldp x4, x5, [jssp, #16]
0xffff7ab3729c   476  ldp x1, x3, [jssp], #32
0xffff7ab372a0   480  ldp x8, x9, [jssp, #16]
0xffff7ab372a4   484  ldp x6, x7, [jssp], #32
0xffff7ab372a8   488  ldp x12, x14, [jssp, #16]
0xffff7ab372ac   492  ldp x10, x11, [jssp], #32
0xffff7ab372b0   496  ldr lr, [jssp, #16]
0xffff7ab372b4   500  ldp x15, x18, [jssp], #24
0xffff7ab372b8   504  ldp x2, x0, [jssp], #16
0xffff7ab372bc   508  ldr x16, pc+1300 (addr 0x0000ffff7ab377d0)    ;; external reference (store_buffer_top)
0xffff7ab372c0   512  ldr x13, [x16]
0xffff7ab372c4   516  str x6, [x13], #8
0xffff7ab372c8   520  str x13, [x16]
0xffff7ab372cc   524  tst x13, #0x1ffff
0xffff7ab372d0   528  b.eq #+0x8 (addr 0xffff7ab372d8)
0xffff7ab372d4   532  ret
0xffff7ab372d8   536  sub csp, jssp, #0x8 (8)
0xffff7ab372dc   540  str lr, [jssp, #-8]!
0xffff7ab372e0   544  ldr x17, pc+1272 (addr 0x0000ffff7ab377d8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab372e4   548  blr x17
0xffff7ab372e8   552  ldr lr, [jssp], #8
0xffff7ab372ec   556  ret
0xffff7ab372f0   560  and x13, x1, #0xfffffffffff00000
0xffff7ab372f4   564  ldr x0, [x13, #104]
0xffff7ab372f8   568  subs x0, x0, #0x1 (1)
0xffff7ab372fc   572  str x0, [x13, #104]
0xffff7ab37300   576  b.mi #+0x64 (addr 0xffff7ab37364)
0xffff7ab37304   580  ubfx x16, x1, #8, #12
0xffff7ab37308   584  and x13, x1, #0xfffffffffff00000
0xffff7ab3730c   588  add x13, x13, x16, lsl #2
0xffff7ab37310   592  ubfx x0, x1, #3, #5
0xffff7ab37314   596  ldr x13, [x13, #360]
0xffff7ab37318   600  lsr x13, x13, x0
0xffff7ab3731c   604  tbz w13, #0, #+0x8 (addr 0xffff7ab37324)
0xffff7ab37320   608  tbnz w13, #1, #+0xc (addr 0xffff7ab3732c)
0xffff7ab37324   612  ldp x2, x0, [jssp], #16
0xffff7ab37328   616  ret
0xffff7ab3732c   620  ldr x13, [x6]
0xffff7ab37330   624  sub csp, jssp, #0x10 (16)
0xffff7ab37334   628  stp x1, x6, [jssp, #-16]!
0xffff7ab37338   632  ubfx x16, x13, #8, #12
0xffff7ab3733c   636  and x0, x13, #0xfffffffffff00000
0xffff7ab37340   640  add x0, x0, x16, lsl #2
0xffff7ab37344   644  ubfx x1, x13, #3, #5
0xffff7ab37348   648  ldr x6, [x0, #360]
0xffff7ab3734c   652  lsr x6, x6, x1
0xffff7ab37350   656  tbz w6, #0, #+0x10 (addr 0xffff7ab37360)
0xffff7ab37354   660  ldp x1, x6, [jssp], #16
0xffff7ab37358   664  ldp x2, x0, [jssp], #16
0xffff7ab3735c   668  ret
0xffff7ab37360   672  ldp x1, x6, [jssp], #16
0xffff7ab37364   676  sub csp, jssp, #0x78 (120)
0xffff7ab37368   680  stp x14, x15, [jssp, #-32]!
0xffff7ab3736c   684  stp x18, lr, [jssp, #16]
0xffff7ab37370   688  stp x9, x10, [jssp, #-32]!
0xffff7ab37374   692  stp x11, x12, [jssp, #16]
0xffff7ab37378   696  stp x5, x6, [jssp, #-32]!
0xffff7ab3737c   700  stp x7, x8, [jssp, #16]
0xffff7ab37380   704  stp x1, x3, [jssp, #-24]!
0xffff7ab37384   708  str x4, [jssp, #16]
0xffff7ab37388   712  sub csp, jssp, #0xb0 (176)
0xffff7ab3738c   716  stp d26, d27, [jssp, #-32]!
0xffff7ab37390   720  stp d28, d29, [jssp, #16]
0xffff7ab37394   724  stp d22, d23, [jssp, #-32]!
0xffff7ab37398   728  stp d24, d25, [jssp, #16]
0xffff7ab3739c   732  stp d18, d19, [jssp, #-32]!
0xffff7ab373a0   736  stp d20, d21, [jssp, #16]
0xffff7ab373a4   740  stp d6, d7, [jssp, #-32]!
0xffff7ab373a8   744  stp d16, d17, [jssp, #16]
0xffff7ab373ac   748  stp d2, d3, [jssp, #-32]!
0xffff7ab373b0   752  stp d4, d5, [jssp, #16]
0xffff7ab373b4   756  stp d0, d1, [jssp, #-16]!
0xffff7ab373b8   760  mov x0, x1
0xffff7ab373bc   764  mov x1, x6
0xffff7ab373c0   768  ldr x2, pc+1056 (addr 0x0000ffff7ab377e0)    ;; external reference (isolate)
0xffff7ab373c4   772  ldr x16, pc+1060 (addr 0x0000ffff7ab377e8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab373c8   776  and csp, jssp, #0xfffffffffffffff0
0xffff7ab373cc   780  blr x16
0xffff7ab373d0   784  ldp d2, d3, [jssp, #16]
0xffff7ab373d4   788  ldp d0, d1, [jssp], #32
0xffff7ab373d8   792  ldp d6, d7, [jssp, #16]
0xffff7ab373dc   796  ldp d4, d5, [jssp], #32
0xffff7ab373e0   800  ldp d18, d19, [jssp, #16]
0xffff7ab373e4   804  ldp d16, d17, [jssp], #32
0xffff7ab373e8   808  ldp d22, d23, [jssp, #16]
0xffff7ab373ec   812  ldp d20, d21, [jssp], #32
0xffff7ab373f0   816  ldp d26, d27, [jssp, #16]
0xffff7ab373f4   820  ldp d24, d25, [jssp], #32
0xffff7ab373f8   824  ldp d28, d29, [jssp], #16
0xffff7ab373fc   828  ldp x4, x5, [jssp, #16]
0xffff7ab37400   832  ldp x1, x3, [jssp], #32
0xffff7ab37404   836  ldp x8, x9, [jssp, #16]
0xffff7ab37408   840  ldp x6, x7, [jssp], #32
0xffff7ab3740c   844  ldp x12, x14, [jssp, #16]
0xffff7ab37410   848  ldp x10, x11, [jssp], #32
0xffff7ab37414   852  ldr lr, [jssp, #16]
0xffff7ab37418   856  ldp x15, x18, [jssp], #24
0xffff7ab3741c   860  ldp x2, x0, [jssp], #16
0xffff7ab37420   864  ret
0xffff7ab37424   868  sub csp, jssp, #0x10 (16)
0xffff7ab37428   872  stp x2, x0, [jssp, #-16]!
0xffff7ab3742c   876  ldr x13, [x6]
0xffff7ab37430   880  and x16, x13, #0xfffffffffff00000
0xffff7ab37434   884  ldr x16, [x16, #8]
0xffff7ab37438   888  tst x16, #0x18
0xffff7ab3743c   892  b.eq #+0x1f8 (addr 0xffff7ab37634)
0xffff7ab37440   896  and x16, x1, #0xfffffffffff00000
0xffff7ab37444   900  ldr x16, [x16, #8]
0xffff7ab37448   904  tst x16, #0x18
0xffff7ab3744c   908  b.ne #+0x1e8 (addr 0xffff7ab37634)
0xffff7ab37450   912  and x13, x1, #0xfffffffffff00000
0xffff7ab37454   916  ldr x0, [x13, #104]
0xffff7ab37458   920  subs x0, x0, #0x1 (1)
0xffff7ab3745c   924  str x0, [x13, #104]
0xffff7ab37460   928  b.mi #+0xe4 (addr 0xffff7ab37544)
0xffff7ab37464   932  ubfx x16, x1, #8, #12
0xffff7ab37468   936  and x13, x1, #0xfffffffffff00000
0xffff7ab3746c   940  add x13, x13, x16, lsl #2
0xffff7ab37470   944  ubfx x0, x1, #3, #5
0xffff7ab37474   948  ldr x13, [x13, #360]
0xffff7ab37478   952  lsr x13, x13, x0
0xffff7ab3747c   956  tbz w13, #0, #+0x8 (addr 0xffff7ab37484)
0xffff7ab37480   960  tbnz w13, #1, #+0x3c (addr 0xffff7ab374bc)
0xffff7ab37484   964  ldp x2, x0, [jssp], #16
0xffff7ab37488   968  ldr x16, pc+872 (addr 0x0000ffff7ab377f0)    ;; external reference (store_buffer_top)
0xffff7ab3748c   972  ldr x13, [x16]
0xffff7ab37490   976  str x6, [x13], #8
0xffff7ab37494   980  str x13, [x16]
0xffff7ab37498   984  tst x13, #0x1ffff
0xffff7ab3749c   988  b.eq #+0x8 (addr 0xffff7ab374a4)
0xffff7ab374a0   992  ret
0xffff7ab374a4   996  sub csp, jssp, #0x8 (8)
0xffff7ab374a8  1000  str lr, [jssp, #-8]!
0xffff7ab374ac  1004  ldr x17, pc+844 (addr 0x0000ffff7ab377f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab374b0  1008  blr x17
0xffff7ab374b4  1012  ldr lr, [jssp], #8
0xffff7ab374b8  1016  ret
0xffff7ab374bc  1020  ldr x13, [x6]
0xffff7ab374c0  1024  and x0, x13, #0xfffffffffff00000
0xffff7ab374c4  1028  ldr x0, [x0, #8]
0xffff7ab374c8  1032  tbz w0, #6, #+0x18 (addr 0xffff7ab374e0)
0xffff7ab374cc  1036  and x0, x1, #0xfffffffffff00000
0xffff7ab374d0  1040  ldr x0, [x0, #8]
0xffff7ab374d4  1044  movz x16, #0x58
0xffff7ab374d8  1048  tst x0, x16
0xffff7ab374dc  1052  b.eq #+0x68 (addr 0xffff7ab37544)
0xffff7ab374e0  1056  sub csp, jssp, #0x10 (16)
0xffff7ab374e4  1060  stp x1, x6, [jssp, #-16]!
0xffff7ab374e8  1064  ubfx x16, x13, #8, #12
0xffff7ab374ec  1068  and x0, x13, #0xfffffffffff00000
0xffff7ab374f0  1072  add x0, x0, x16, lsl #2
0xffff7ab374f4  1076  ubfx x1, x13, #3, #5
0xffff7ab374f8  1080  ldr x6, [x0, #360]
0xffff7ab374fc  1084  lsr x6, x6, x1
0xffff7ab37500  1088  tbz w6, #0, #+0x40 (addr 0xffff7ab37540)
0xffff7ab37504  1092  ldp x1, x6, [jssp], #16
0xffff7ab37508  1096  ldp x2, x0, [jssp], #16
0xffff7ab3750c  1100  ldr x16, pc+756 (addr 0x0000ffff7ab37800)    ;; external reference (store_buffer_top)
0xffff7ab37510  1104  ldr x13, [x16]
0xffff7ab37514  1108  str x6, [x13], #8
0xffff7ab37518  1112  str x13, [x16]
0xffff7ab3751c  1116  tst x13, #0x1ffff
0xffff7ab37520  1120  b.eq #+0x8 (addr 0xffff7ab37528)
0xffff7ab37524  1124  ret
0xffff7ab37528  1128  sub csp, jssp, #0x8 (8)
0xffff7ab3752c  1132  str lr, [jssp, #-8]!
0xffff7ab37530  1136  ldr x17, pc+728 (addr 0x0000ffff7ab37808)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab37534  1140  blr x17
0xffff7ab37538  1144  ldr lr, [jssp], #8
0xffff7ab3753c  1148  ret
0xffff7ab37540  1152  ldp x1, x6, [jssp], #16
0xffff7ab37544  1156  sub csp, jssp, #0x78 (120)
0xffff7ab37548  1160  stp x14, x15, [jssp, #-32]!
0xffff7ab3754c  1164  stp x18, lr, [jssp, #16]
0xffff7ab37550  1168  stp x9, x10, [jssp, #-32]!
0xffff7ab37554  1172  stp x11, x12, [jssp, #16]
0xffff7ab37558  1176  stp x5, x6, [jssp, #-32]!
0xffff7ab3755c  1180  stp x7, x8, [jssp, #16]
0xffff7ab37560  1184  stp x1, x3, [jssp, #-24]!
0xffff7ab37564  1188  str x4, [jssp, #16]
0xffff7ab37568  1192  sub csp, jssp, #0xb0 (176)
0xffff7ab3756c  1196  stp d26, d27, [jssp, #-32]!
0xffff7ab37570  1200  stp d28, d29, [jssp, #16]
0xffff7ab37574  1204  stp d22, d23, [jssp, #-32]!
0xffff7ab37578  1208  stp d24, d25, [jssp, #16]
0xffff7ab3757c  1212  stp d18, d19, [jssp, #-32]!
0xffff7ab37580  1216  stp d20, d21, [jssp, #16]
0xffff7ab37584  1220  stp d6, d7, [jssp, #-32]!
0xffff7ab37588  1224  stp d16, d17, [jssp, #16]
0xffff7ab3758c  1228  stp d2, d3, [jssp, #-32]!
0xffff7ab37590  1232  stp d4, d5, [jssp, #16]
0xffff7ab37594  1236  stp d0, d1, [jssp, #-16]!
0xffff7ab37598  1240  mov x0, x1
0xffff7ab3759c  1244  mov x1, x6
0xffff7ab375a0  1248  ldr x2, pc+624 (addr 0x0000ffff7ab37810)    ;; external reference (isolate)
0xffff7ab375a4  1252  ldr x16, pc+628 (addr 0x0000ffff7ab37818)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab375a8  1256  and csp, jssp, #0xfffffffffffffff0
0xffff7ab375ac  1260  blr x16
0xffff7ab375b0  1264  ldp d2, d3, [jssp, #16]
0xffff7ab375b4  1268  ldp d0, d1, [jssp], #32
0xffff7ab375b8  1272  ldp d6, d7, [jssp, #16]
0xffff7ab375bc  1276  ldp d4, d5, [jssp], #32
0xffff7ab375c0  1280  ldp d18, d19, [jssp, #16]
0xffff7ab375c4  1284  ldp d16, d17, [jssp], #32
0xffff7ab375c8  1288  ldp d22, d23, [jssp, #16]
0xffff7ab375cc  1292  ldp d20, d21, [jssp], #32
0xffff7ab375d0  1296  ldp d26, d27, [jssp, #16]
0xffff7ab375d4  1300  ldp d24, d25, [jssp], #32
0xffff7ab375d8  1304  ldp d28, d29, [jssp], #16
0xffff7ab375dc  1308  ldp x4, x5, [jssp, #16]
0xffff7ab375e0  1312  ldp x1, x3, [jssp], #32
0xffff7ab375e4  1316  ldp x8, x9, [jssp, #16]
0xffff7ab375e8  1320  ldp x6, x7, [jssp], #32
0xffff7ab375ec  1324  ldp x12, x14, [jssp, #16]
0xffff7ab375f0  1328  ldp x10, x11, [jssp], #32
0xffff7ab375f4  1332  ldr lr, [jssp, #16]
0xffff7ab375f8  1336  ldp x15, x18, [jssp], #24
0xffff7ab375fc  1340  ldp x2, x0, [jssp], #16
0xffff7ab37600  1344  ldr x16, pc+544 (addr 0x0000ffff7ab37820)    ;; external reference (store_buffer_top)
0xffff7ab37604  1348  ldr x13, [x16]
0xffff7ab37608  1352  str x6, [x13], #8
0xffff7ab3760c  1356  str x13, [x16]
0xffff7ab37610  1360  tst x13, #0x1ffff
0xffff7ab37614  1364  b.eq #+0x8 (addr 0xffff7ab3761c)
0xffff7ab37618  1368  ret
0xffff7ab3761c  1372  sub csp, jssp, #0x8 (8)
0xffff7ab37620  1376  str lr, [jssp, #-8]!
0xffff7ab37624  1380  ldr x17, pc+516 (addr 0x0000ffff7ab37828)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab37628  1384  blr x17
0xffff7ab3762c  1388  ldr lr, [jssp], #8
0xffff7ab37630  1392  ret
0xffff7ab37634  1396  and x13, x1, #0xfffffffffff00000
0xffff7ab37638  1400  ldr x0, [x13, #104]
0xffff7ab3763c  1404  subs x0, x0, #0x1 (1)
0xffff7ab37640  1408  str x0, [x13, #104]
0xffff7ab37644  1412  b.mi #+0x84 (addr 0xffff7ab376c8)
0xffff7ab37648  1416  ubfx x16, x1, #8, #12
0xffff7ab3764c  1420  and x13, x1, #0xfffffffffff00000
0xffff7ab37650  1424  add x13, x13, x16, lsl #2
0xffff7ab37654  1428  ubfx x0, x1, #3, #5
0xffff7ab37658  1432  ldr x13, [x13, #360]
0xffff7ab3765c  1436  lsr x13, x13, x0
0xffff7ab37660  1440  tbz w13, #0, #+0x8 (addr 0xffff7ab37668)
0xffff7ab37664  1444  tbnz w13, #1, #+0xc (addr 0xffff7ab37670)
0xffff7ab37668  1448  ldp x2, x0, [jssp], #16
0xffff7ab3766c  1452  ret
0xffff7ab37670  1456  ldr x13, [x6]
0xffff7ab37674  1460  and x0, x13, #0xfffffffffff00000
0xffff7ab37678  1464  ldr x0, [x0, #8]
0xffff7ab3767c  1468  tbz w0, #6, #+0x18 (addr 0xffff7ab37694)
0xffff7ab37680  1472  and x0, x1, #0xfffffffffff00000
0xffff7ab37684  1476  ldr x0, [x0, #8]
0xffff7ab37688  1480  movz x16, #0x58
0xffff7ab3768c  1484  tst x0, x16
0xffff7ab37690  1488  b.eq #+0x38 (addr 0xffff7ab376c8)
0xffff7ab37694  1492  sub csp, jssp, #0x10 (16)
0xffff7ab37698  1496  stp x1, x6, [jssp, #-16]!
0xffff7ab3769c  1500  ubfx x16, x13, #8, #12
0xffff7ab376a0  1504  and x0, x13, #0xfffffffffff00000
0xffff7ab376a4  1508  add x0, x0, x16, lsl #2
0xffff7ab376a8  1512  ubfx x1, x13, #3, #5
0xffff7ab376ac  1516  ldr x6, [x0, #360]
0xffff7ab376b0  1520  lsr x6, x6, x1
0xffff7ab376b4  1524  tbz w6, #0, #+0x10 (addr 0xffff7ab376c4)
0xffff7ab376b8  1528  ldp x1, x6, [jssp], #16
0xffff7ab376bc  1532  ldp x2, x0, [jssp], #16
0xffff7ab376c0  1536  ret
0xffff7ab376c4  1540  ldp x1, x6, [jssp], #16
0xffff7ab376c8  1544  sub csp, jssp, #0x78 (120)
0xffff7ab376cc  1548  stp x14, x15, [jssp, #-32]!
0xffff7ab376d0  1552  stp x18, lr, [jssp, #16]
0xffff7ab376d4  1556  stp x9, x10, [jssp, #-32]!
0xffff7ab376d8  1560  stp x11, x12, [jssp, #16]
0xffff7ab376dc  1564  stp x5, x6, [jssp, #-32]!
0xffff7ab376e0  1568  stp x7, x8, [jssp, #16]
0xffff7ab376e4  1572  stp x1, x3, [jssp, #-24]!
0xffff7ab376e8  1576  str x4, [jssp, #16]
0xffff7ab376ec  1580  sub csp, jssp, #0xb0 (176)
0xffff7ab376f0  1584  stp d26, d27, [jssp, #-32]!
0xffff7ab376f4  1588  stp d28, d29, [jssp, #16]
0xffff7ab376f8  1592  stp d22, d23, [jssp, #-32]!
0xffff7ab376fc  1596  stp d24, d25, [jssp, #16]
0xffff7ab37700  1600  stp d18, d19, [jssp, #-32]!
0xffff7ab37704  1604  stp d20, d21, [jssp, #16]
0xffff7ab37708  1608  stp d6, d7, [jssp, #-32]!
0xffff7ab3770c  1612  stp d16, d17, [jssp, #16]
0xffff7ab37710  1616  stp d2, d3, [jssp, #-32]!
0xffff7ab37714  1620  stp d4, d5, [jssp, #16]
0xffff7ab37718  1624  stp d0, d1, [jssp, #-16]!
0xffff7ab3771c  1628  mov x0, x1
0xffff7ab37720  1632  mov x1, x6
0xffff7ab37724  1636  ldr x2, pc+268 (addr 0x0000ffff7ab37830)    ;; external reference (isolate)
0xffff7ab37728  1640  ldr x16, pc+272 (addr 0x0000ffff7ab37838)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab3772c  1644  and csp, jssp, #0xfffffffffffffff0
0xffff7ab37730  1648  blr x16
0xffff7ab37734  1652  ldp d2, d3, [jssp, #16]
0xffff7ab37738  1656  ldp d0, d1, [jssp], #32
0xffff7ab3773c  1660  ldp d6, d7, [jssp, #16]
0xffff7ab37740  1664  ldp d4, d5, [jssp], #32
0xffff7ab37744  1668  ldp d18, d19, [jssp, #16]
0xffff7ab37748  1672  ldp d16, d17, [jssp], #32
0xffff7ab3774c  1676  ldp d22, d23, [jssp, #16]
0xffff7ab37750  1680  ldp d20, d21, [jssp], #32
0xffff7ab37754  1684  ldp d26, d27, [jssp, #16]
0xffff7ab37758  1688  ldp d24, d25, [jssp], #32
0xffff7ab3775c  1692  ldp d28, d29, [jssp], #16
0xffff7ab37760  1696  ldp x4, x5, [jssp, #16]
0xffff7ab37764  1700  ldp x1, x3, [jssp], #32
0xffff7ab37768  1704  ldp x8, x9, [jssp, #16]
0xffff7ab3776c  1708  ldp x6, x7, [jssp], #32
0xffff7ab37770  1712  ldp x12, x14, [jssp, #16]
0xffff7ab37774  1716  ldp x10, x11, [jssp], #32
0xffff7ab37778  1720  ldr lr, [jssp, #16]
0xffff7ab3777c  1724  ldp x15, x18, [jssp], #24
0xffff7ab37780  1728  ldp x2, x0, [jssp], #16
0xffff7ab37784  1732  ret
0xffff7ab37788  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab3778c  1740  d63f03e0       constant
0xffff7ab37790  1744  09abe8c0       constant
0xffff7ab37794  1748  00000000       constant
0xffff7ab37798  1752  7ab065a0       constant
0xffff7ab3779c  1756  0000ffff       constant
0xffff7ab377a0  1760  09abe8c0       constant
0xffff7ab377a4  1764  00000000       constant
0xffff7ab377a8  1768  7ab065a0       constant
0xffff7ab377ac  1772  0000ffff       constant
0xffff7ab377b0  1776  09abe8c0       constant
0xffff7ab377b4  1780  00000000       constant
0xffff7ab377b8  1784  7ab065a0       constant
0xffff7ab377bc  1788  0000ffff       constant
0xffff7ab377c0  1792  09abd2d0       constant
0xffff7ab377c4  1796  00000000       constant
0xffff7ab377c8  1800  00c2d958       constant
0xffff7ab377cc  1804  00000000       constant
0xffff7ab377d0  1808  09abe8c0       constant
0xffff7ab377d4  1812  00000000       constant
0xffff7ab377d8  1816  7ab065a0       constant
0xffff7ab377dc  1820  0000ffff       constant
0xffff7ab377e0  1824  09abd2d0       constant
0xffff7ab377e4  1828  00000000       constant
0xffff7ab377e8  1832  00c2d958       constant
0xffff7ab377ec  1836  00000000       constant
0xffff7ab377f0  1840  09abe8c0       constant
0xffff7ab377f4  1844  00000000       constant
0xffff7ab377f8  1848  7ab065a0       constant
0xffff7ab377fc  1852  0000ffff       constant
0xffff7ab37800  1856  09abe8c0       constant
0xffff7ab37804  1860  00000000       constant
0xffff7ab37808  1864  7ab065a0       constant
0xffff7ab3780c  1868  0000ffff       constant
0xffff7ab37810  1872  09abd2d0       constant
0xffff7ab37814  1876  00000000       constant
0xffff7ab37818  1880  00c2d958       constant
0xffff7ab3781c  1884  00000000       constant
0xffff7ab37820  1888  09abe8c0       constant
0xffff7ab37824  1892  00000000       constant
0xffff7ab37828  1896  7ab065a0       constant
0xffff7ab3782c  1900  0000ffff       constant
0xffff7ab37830  1904  09abd2d0       constant
0xffff7ab37834  1908  00000000       constant
0xffff7ab37838  1912  00c2d958       constant
0xffff7ab3783c  1916  00000000       constant


RelocInfo (size = 65)
0xffff7ab370c8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab370ec  code target (STUB)  (0xffff7ab065a0)
0xffff7ab37164  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab37188  code target (STUB)  (0xffff7ab065a0)
0xffff7ab371c8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab371ec  code target (STUB)  (0xffff7ab065a0)
0xffff7ab3725c  external reference (isolate)  (0x9abd2d0)
0xffff7ab37260  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab372bc  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab372e0  code target (STUB)  (0xffff7ab065a0)
0xffff7ab373c0  external reference (isolate)  (0x9abd2d0)
0xffff7ab373c4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab37488  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab374ac  code target (STUB)  (0xffff7ab065a0)
0xffff7ab3750c  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab37530  code target (STUB)  (0xffff7ab065a0)
0xffff7ab375a0  external reference (isolate)  (0x9abd2d0)
0xffff7ab375a4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab37600  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab37624  code target (STUB)  (0xffff7ab065a0)
0xffff7ab37724  external reference (isolate)  (0x9abd2d0)
0xffff7ab37728  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab37788  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0xffff7ab378a0     0  adr xzr, #+0x40 (addr 0xffff7ab378e0)
0xffff7ab378a4     4  adr xzr, #+0x360 (addr 0xffff7ab37c04)
0xffff7ab378a8     8  ldr x16, pc+1736 (addr 0x0000ffff7ab37f70)    ;; external reference (store_buffer_top)
0xffff7ab378ac    12  ldr x2, [x16]
0xffff7ab378b0    16  str x3, [x2], #8
0xffff7ab378b4    20  str x2, [x16]
0xffff7ab378b8    24  tst x2, #0x1ffff
0xffff7ab378bc    28  b.eq #+0x8 (addr 0xffff7ab378c4)
0xffff7ab378c0    32  ret
0xffff7ab378c4    36  sub csp, jssp, #0x8 (8)
0xffff7ab378c8    40  str lr, [jssp, #-8]!
0xffff7ab378cc    44  ldr x17, pc+1708 (addr 0x0000ffff7ab37f78)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab378d0    48  blr x17
0xffff7ab378d4    52  ldr lr, [jssp], #8
0xffff7ab378d8    56  ret
0xffff7ab378dc    60  ret
0xffff7ab378e0    64  sub csp, jssp, #0x10 (16)
0xffff7ab378e4    68  stp x1, x0, [jssp, #-16]!
0xffff7ab378e8    72  ldr x2, [x3]
0xffff7ab378ec    76  and x16, x2, #0xfffffffffff00000
0xffff7ab378f0    80  ldr x16, [x16, #8]
0xffff7ab378f4    84  tst x16, #0x18
0xffff7ab378f8    88  b.eq #+0x1d8 (addr 0xffff7ab37ad0)
0xffff7ab378fc    92  and x16, x4, #0xfffffffffff00000
0xffff7ab37900    96  ldr x16, [x16, #8]
0xffff7ab37904   100  tst x16, #0x18
0xffff7ab37908   104  b.ne #+0x1c8 (addr 0xffff7ab37ad0)
0xffff7ab3790c   108  and x2, x4, #0xfffffffffff00000
0xffff7ab37910   112  ldr x0, [x2, #104]
0xffff7ab37914   116  subs x0, x0, #0x1 (1)
0xffff7ab37918   120  str x0, [x2, #104]
0xffff7ab3791c   124  b.mi #+0xc4 (addr 0xffff7ab379e0)
0xffff7ab37920   128  ubfx x16, x4, #8, #12
0xffff7ab37924   132  and x2, x4, #0xfffffffffff00000
0xffff7ab37928   136  add x2, x2, x16, lsl #2
0xffff7ab3792c   140  ubfx x0, x4, #3, #5
0xffff7ab37930   144  ldr x2, [x2, #360]
0xffff7ab37934   148  lsr x2, x2, x0
0xffff7ab37938   152  tbz w2, #0, #+0x8 (addr 0xffff7ab37940)
0xffff7ab3793c   156  tbnz w2, #1, #+0x3c (addr 0xffff7ab37978)
0xffff7ab37940   160  ldp x1, x0, [jssp], #16
0xffff7ab37944   164  ldr x16, pc+1596 (addr 0x0000ffff7ab37f80)    ;; external reference (store_buffer_top)
0xffff7ab37948   168  ldr x2, [x16]
0xffff7ab3794c   172  str x3, [x2], #8
0xffff7ab37950   176  str x2, [x16]
0xffff7ab37954   180  tst x2, #0x1ffff
0xffff7ab37958   184  b.eq #+0x8 (addr 0xffff7ab37960)
0xffff7ab3795c   188  ret
0xffff7ab37960   192  sub csp, jssp, #0x8 (8)
0xffff7ab37964   196  str lr, [jssp, #-8]!
0xffff7ab37968   200  ldr x17, pc+1568 (addr 0x0000ffff7ab37f88)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab3796c   204  blr x17
0xffff7ab37970   208  ldr lr, [jssp], #8
0xffff7ab37974   212  ret
0xffff7ab37978   216  ldr x2, [x3]
0xffff7ab3797c   220  sub csp, jssp, #0x10 (16)
0xffff7ab37980   224  stp x4, x3, [jssp, #-16]!
0xffff7ab37984   228  ubfx x16, x2, #8, #12
0xffff7ab37988   232  and x0, x2, #0xfffffffffff00000
0xffff7ab3798c   236  add x0, x0, x16, lsl #2
0xffff7ab37990   240  ubfx x4, x2, #3, #5
0xffff7ab37994   244  ldr x3, [x0, #360]
0xffff7ab37998   248  lsr x3, x3, x4
0xffff7ab3799c   252  tbz w3, #0, #+0x40 (addr 0xffff7ab379dc)
0xffff7ab379a0   256  ldp x4, x3, [jssp], #16
0xffff7ab379a4   260  ldp x1, x0, [jssp], #16
0xffff7ab379a8   264  ldr x16, pc+1512 (addr 0x0000ffff7ab37f90)    ;; external reference (store_buffer_top)
0xffff7ab379ac   268  ldr x2, [x16]
0xffff7ab379b0   272  str x3, [x2], #8
0xffff7ab379b4   276  str x2, [x16]
0xffff7ab379b8   280  tst x2, #0x1ffff
0xffff7ab379bc   284  b.eq #+0x8 (addr 0xffff7ab379c4)
0xffff7ab379c0   288  ret
0xffff7ab379c4   292  sub csp, jssp, #0x8 (8)
0xffff7ab379c8   296  str lr, [jssp, #-8]!
0xffff7ab379cc   300  ldr x17, pc+1484 (addr 0x0000ffff7ab37f98)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab379d0   304  blr x17
0xffff7ab379d4   308  ldr lr, [jssp], #8
0xffff7ab379d8   312  ret
0xffff7ab379dc   316  ldp x4, x3, [jssp], #16
0xffff7ab379e0   320  sub csp, jssp, #0x78 (120)
0xffff7ab379e4   324  stp x14, x15, [jssp, #-32]!
0xffff7ab379e8   328  stp x18, lr, [jssp, #16]
0xffff7ab379ec   332  stp x10, x11, [jssp, #-32]!
0xffff7ab379f0   336  stp x12, x13, [jssp, #16]
0xffff7ab379f4   340  stp x6, x7, [jssp, #-32]!
0xffff7ab379f8   344  stp x8, x9, [jssp, #16]
0xffff7ab379fc   348  stp x3, x4, [jssp, #-24]!
0xffff7ab37a00   352  str x5, [jssp, #16]
0xffff7ab37a04   356  sub csp, jssp, #0xb0 (176)
0xffff7ab37a08   360  stp d26, d27, [jssp, #-32]!
0xffff7ab37a0c   364  stp d28, d29, [jssp, #16]
0xffff7ab37a10   368  stp d22, d23, [jssp, #-32]!
0xffff7ab37a14   372  stp d24, d25, [jssp, #16]
0xffff7ab37a18   376  stp d18, d19, [jssp, #-32]!
0xffff7ab37a1c   380  stp d20, d21, [jssp, #16]
0xffff7ab37a20   384  stp d6, d7, [jssp, #-32]!
0xffff7ab37a24   388  stp d16, d17, [jssp, #16]
0xffff7ab37a28   392  stp d2, d3, [jssp, #-32]!
0xffff7ab37a2c   396  stp d4, d5, [jssp, #16]
0xffff7ab37a30   400  stp d0, d1, [jssp, #-16]!
0xffff7ab37a34   404  mov x0, x4
0xffff7ab37a38   408  mov x1, x3
0xffff7ab37a3c   412  ldr x2, pc+1380 (addr 0x0000ffff7ab37fa0)    ;; external reference (isolate)
0xffff7ab37a40   416  ldr x16, pc+1384 (addr 0x0000ffff7ab37fa8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab37a44   420  and csp, jssp, #0xfffffffffffffff0
0xffff7ab37a48   424  blr x16
0xffff7ab37a4c   428  ldp d2, d3, [jssp, #16]
0xffff7ab37a50   432  ldp d0, d1, [jssp], #32
0xffff7ab37a54   436  ldp d6, d7, [jssp, #16]
0xffff7ab37a58   440  ldp d4, d5, [jssp], #32
0xffff7ab37a5c   444  ldp d18, d19, [jssp, #16]
0xffff7ab37a60   448  ldp d16, d17, [jssp], #32
0xffff7ab37a64   452  ldp d22, d23, [jssp, #16]
0xffff7ab37a68   456  ldp d20, d21, [jssp], #32
0xffff7ab37a6c   460  ldp d26, d27, [jssp, #16]
0xffff7ab37a70   464  ldp d24, d25, [jssp], #32
0xffff7ab37a74   468  ldp d28, d29, [jssp], #16
0xffff7ab37a78   472  ldp x5, x6, [jssp, #16]
0xffff7ab37a7c   476  ldp x3, x4, [jssp], #32
0xffff7ab37a80   480  ldp x9, x10, [jssp, #16]
0xffff7ab37a84   484  ldp x7, x8, [jssp], #32
0xffff7ab37a88   488  ldp x13, x14, [jssp, #16]
0xffff7ab37a8c   492  ldp x11, x12, [jssp], #32
0xffff7ab37a90   496  ldr lr, [jssp, #16]
0xffff7ab37a94   500  ldp x15, x18, [jssp], #24
0xffff7ab37a98   504  ldp x1, x0, [jssp], #16
0xffff7ab37a9c   508  ldr x16, pc+1300 (addr 0x0000ffff7ab37fb0)    ;; external reference (store_buffer_top)
0xffff7ab37aa0   512  ldr x2, [x16]
0xffff7ab37aa4   516  str x3, [x2], #8
0xffff7ab37aa8   520  str x2, [x16]
0xffff7ab37aac   524  tst x2, #0x1ffff
0xffff7ab37ab0   528  b.eq #+0x8 (addr 0xffff7ab37ab8)
0xffff7ab37ab4   532  ret
0xffff7ab37ab8   536  sub csp, jssp, #0x8 (8)
0xffff7ab37abc   540  str lr, [jssp, #-8]!
0xffff7ab37ac0   544  ldr x17, pc+1272 (addr 0x0000ffff7ab37fb8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab37ac4   548  blr x17
0xffff7ab37ac8   552  ldr lr, [jssp], #8
0xffff7ab37acc   556  ret
0xffff7ab37ad0   560  and x2, x4, #0xfffffffffff00000
0xffff7ab37ad4   564  ldr x0, [x2, #104]
0xffff7ab37ad8   568  subs x0, x0, #0x1 (1)
0xffff7ab37adc   572  str x0, [x2, #104]
0xffff7ab37ae0   576  b.mi #+0x64 (addr 0xffff7ab37b44)
0xffff7ab37ae4   580  ubfx x16, x4, #8, #12
0xffff7ab37ae8   584  and x2, x4, #0xfffffffffff00000
0xffff7ab37aec   588  add x2, x2, x16, lsl #2
0xffff7ab37af0   592  ubfx x0, x4, #3, #5
0xffff7ab37af4   596  ldr x2, [x2, #360]
0xffff7ab37af8   600  lsr x2, x2, x0
0xffff7ab37afc   604  tbz w2, #0, #+0x8 (addr 0xffff7ab37b04)
0xffff7ab37b00   608  tbnz w2, #1, #+0xc (addr 0xffff7ab37b0c)
0xffff7ab37b04   612  ldp x1, x0, [jssp], #16
0xffff7ab37b08   616  ret
0xffff7ab37b0c   620  ldr x2, [x3]
0xffff7ab37b10   624  sub csp, jssp, #0x10 (16)
0xffff7ab37b14   628  stp x4, x3, [jssp, #-16]!
0xffff7ab37b18   632  ubfx x16, x2, #8, #12
0xffff7ab37b1c   636  and x0, x2, #0xfffffffffff00000
0xffff7ab37b20   640  add x0, x0, x16, lsl #2
0xffff7ab37b24   644  ubfx x4, x2, #3, #5
0xffff7ab37b28   648  ldr x3, [x0, #360]
0xffff7ab37b2c   652  lsr x3, x3, x4
0xffff7ab37b30   656  tbz w3, #0, #+0x10 (addr 0xffff7ab37b40)
0xffff7ab37b34   660  ldp x4, x3, [jssp], #16
0xffff7ab37b38   664  ldp x1, x0, [jssp], #16
0xffff7ab37b3c   668  ret
0xffff7ab37b40   672  ldp x4, x3, [jssp], #16
0xffff7ab37b44   676  sub csp, jssp, #0x78 (120)
0xffff7ab37b48   680  stp x14, x15, [jssp, #-32]!
0xffff7ab37b4c   684  stp x18, lr, [jssp, #16]
0xffff7ab37b50   688  stp x10, x11, [jssp, #-32]!
0xffff7ab37b54   692  stp x12, x13, [jssp, #16]
0xffff7ab37b58   696  stp x6, x7, [jssp, #-32]!
0xffff7ab37b5c   700  stp x8, x9, [jssp, #16]
0xffff7ab37b60   704  stp x3, x4, [jssp, #-24]!
0xffff7ab37b64   708  str x5, [jssp, #16]
0xffff7ab37b68   712  sub csp, jssp, #0xb0 (176)
0xffff7ab37b6c   716  stp d26, d27, [jssp, #-32]!
0xffff7ab37b70   720  stp d28, d29, [jssp, #16]
0xffff7ab37b74   724  stp d22, d23, [jssp, #-32]!
0xffff7ab37b78   728  stp d24, d25, [jssp, #16]
0xffff7ab37b7c   732  stp d18, d19, [jssp, #-32]!
0xffff7ab37b80   736  stp d20, d21, [jssp, #16]
0xffff7ab37b84   740  stp d6, d7, [jssp, #-32]!
0xffff7ab37b88   744  stp d16, d17, [jssp, #16]
0xffff7ab37b8c   748  stp d2, d3, [jssp, #-32]!
0xffff7ab37b90   752  stp d4, d5, [jssp, #16]
0xffff7ab37b94   756  stp d0, d1, [jssp, #-16]!
0xffff7ab37b98   760  mov x0, x4
0xffff7ab37b9c   764  mov x1, x3
0xffff7ab37ba0   768  ldr x2, pc+1056 (addr 0x0000ffff7ab37fc0)    ;; external reference (isolate)
0xffff7ab37ba4   772  ldr x16, pc+1060 (addr 0x0000ffff7ab37fc8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab37ba8   776  and csp, jssp, #0xfffffffffffffff0
0xffff7ab37bac   780  blr x16
0xffff7ab37bb0   784  ldp d2, d3, [jssp, #16]
0xffff7ab37bb4   788  ldp d0, d1, [jssp], #32
0xffff7ab37bb8   792  ldp d6, d7, [jssp, #16]
0xffff7ab37bbc   796  ldp d4, d5, [jssp], #32
0xffff7ab37bc0   800  ldp d18, d19, [jssp, #16]
0xffff7ab37bc4   804  ldp d16, d17, [jssp], #32
0xffff7ab37bc8   808  ldp d22, d23, [jssp, #16]
0xffff7ab37bcc   812  ldp d20, d21, [jssp], #32
0xffff7ab37bd0   816  ldp d26, d27, [jssp, #16]
0xffff7ab37bd4   820  ldp d24, d25, [jssp], #32
0xffff7ab37bd8   824  ldp d28, d29, [jssp], #16
0xffff7ab37bdc   828  ldp x5, x6, [jssp, #16]
0xffff7ab37be0   832  ldp x3, x4, [jssp], #32
0xffff7ab37be4   836  ldp x9, x10, [jssp, #16]
0xffff7ab37be8   840  ldp x7, x8, [jssp], #32
0xffff7ab37bec   844  ldp x13, x14, [jssp, #16]
0xffff7ab37bf0   848  ldp x11, x12, [jssp], #32
0xffff7ab37bf4   852  ldr lr, [jssp, #16]
0xffff7ab37bf8   856  ldp x15, x18, [jssp], #24
0xffff7ab37bfc   860  ldp x1, x0, [jssp], #16
0xffff7ab37c00   864  ret
0xffff7ab37c04   868  sub csp, jssp, #0x10 (16)
0xffff7ab37c08   872  stp x1, x0, [jssp, #-16]!
0xffff7ab37c0c   876  ldr x2, [x3]
0xffff7ab37c10   880  and x16, x2, #0xfffffffffff00000
0xffff7ab37c14   884  ldr x16, [x16, #8]
0xffff7ab37c18   888  tst x16, #0x18
0xffff7ab37c1c   892  b.eq #+0x1f8 (addr 0xffff7ab37e14)
0xffff7ab37c20   896  and x16, x4, #0xfffffffffff00000
0xffff7ab37c24   900  ldr x16, [x16, #8]
0xffff7ab37c28   904  tst x16, #0x18
0xffff7ab37c2c   908  b.ne #+0x1e8 (addr 0xffff7ab37e14)
0xffff7ab37c30   912  and x2, x4, #0xfffffffffff00000
0xffff7ab37c34   916  ldr x0, [x2, #104]
0xffff7ab37c38   920  subs x0, x0, #0x1 (1)
0xffff7ab37c3c   924  str x0, [x2, #104]
0xffff7ab37c40   928  b.mi #+0xe4 (addr 0xffff7ab37d24)
0xffff7ab37c44   932  ubfx x16, x4, #8, #12
0xffff7ab37c48   936  and x2, x4, #0xfffffffffff00000
0xffff7ab37c4c   940  add x2, x2, x16, lsl #2
0xffff7ab37c50   944  ubfx x0, x4, #3, #5
0xffff7ab37c54   948  ldr x2, [x2, #360]
0xffff7ab37c58   952  lsr x2, x2, x0
0xffff7ab37c5c   956  tbz w2, #0, #+0x8 (addr 0xffff7ab37c64)
0xffff7ab37c60   960  tbnz w2, #1, #+0x3c (addr 0xffff7ab37c9c)
0xffff7ab37c64   964  ldp x1, x0, [jssp], #16
0xffff7ab37c68   968  ldr x16, pc+872 (addr 0x0000ffff7ab37fd0)    ;; external reference (store_buffer_top)
0xffff7ab37c6c   972  ldr x2, [x16]
0xffff7ab37c70   976  str x3, [x2], #8
0xffff7ab37c74   980  str x2, [x16]
0xffff7ab37c78   984  tst x2, #0x1ffff
0xffff7ab37c7c   988  b.eq #+0x8 (addr 0xffff7ab37c84)
0xffff7ab37c80   992  ret
0xffff7ab37c84   996  sub csp, jssp, #0x8 (8)
0xffff7ab37c88  1000  str lr, [jssp, #-8]!
0xffff7ab37c8c  1004  ldr x17, pc+844 (addr 0x0000ffff7ab37fd8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab37c90  1008  blr x17
0xffff7ab37c94  1012  ldr lr, [jssp], #8
0xffff7ab37c98  1016  ret
0xffff7ab37c9c  1020  ldr x2, [x3]
0xffff7ab37ca0  1024  and x0, x2, #0xfffffffffff00000
0xffff7ab37ca4  1028  ldr x0, [x0, #8]
0xffff7ab37ca8  1032  tbz w0, #6, #+0x18 (addr 0xffff7ab37cc0)
0xffff7ab37cac  1036  and x0, x4, #0xfffffffffff00000
0xffff7ab37cb0  1040  ldr x0, [x0, #8]
0xffff7ab37cb4  1044  movz x16, #0x58
0xffff7ab37cb8  1048  tst x0, x16
0xffff7ab37cbc  1052  b.eq #+0x68 (addr 0xffff7ab37d24)
0xffff7ab37cc0  1056  sub csp, jssp, #0x10 (16)
0xffff7ab37cc4  1060  stp x4, x3, [jssp, #-16]!
0xffff7ab37cc8  1064  ubfx x16, x2, #8, #12
0xffff7ab37ccc  1068  and x0, x2, #0xfffffffffff00000
0xffff7ab37cd0  1072  add x0, x0, x16, lsl #2
0xffff7ab37cd4  1076  ubfx x4, x2, #3, #5
0xffff7ab37cd8  1080  ldr x3, [x0, #360]
0xffff7ab37cdc  1084  lsr x3, x3, x4
0xffff7ab37ce0  1088  tbz w3, #0, #+0x40 (addr 0xffff7ab37d20)
0xffff7ab37ce4  1092  ldp x4, x3, [jssp], #16
0xffff7ab37ce8  1096  ldp x1, x0, [jssp], #16
0xffff7ab37cec  1100  ldr x16, pc+756 (addr 0x0000ffff7ab37fe0)    ;; external reference (store_buffer_top)
0xffff7ab37cf0  1104  ldr x2, [x16]
0xffff7ab37cf4  1108  str x3, [x2], #8
0xffff7ab37cf8  1112  str x2, [x16]
0xffff7ab37cfc  1116  tst x2, #0x1ffff
0xffff7ab37d00  1120  b.eq #+0x8 (addr 0xffff7ab37d08)
0xffff7ab37d04  1124  ret
0xffff7ab37d08  1128  sub csp, jssp, #0x8 (8)
0xffff7ab37d0c  1132  str lr, [jssp, #-8]!
0xffff7ab37d10  1136  ldr x17, pc+728 (addr 0x0000ffff7ab37fe8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab37d14  1140  blr x17
0xffff7ab37d18  1144  ldr lr, [jssp], #8
0xffff7ab37d1c  1148  ret
0xffff7ab37d20  1152  ldp x4, x3, [jssp], #16
0xffff7ab37d24  1156  sub csp, jssp, #0x78 (120)
0xffff7ab37d28  1160  stp x14, x15, [jssp, #-32]!
0xffff7ab37d2c  1164  stp x18, lr, [jssp, #16]
0xffff7ab37d30  1168  stp x10, x11, [jssp, #-32]!
0xffff7ab37d34  1172  stp x12, x13, [jssp, #16]
0xffff7ab37d38  1176  stp x6, x7, [jssp, #-32]!
0xffff7ab37d3c  1180  stp x8, x9, [jssp, #16]
0xffff7ab37d40  1184  stp x3, x4, [jssp, #-24]!
0xffff7ab37d44  1188  str x5, [jssp, #16]
0xffff7ab37d48  1192  sub csp, jssp, #0xb0 (176)
0xffff7ab37d4c  1196  stp d26, d27, [jssp, #-32]!
0xffff7ab37d50  1200  stp d28, d29, [jssp, #16]
0xffff7ab37d54  1204  stp d22, d23, [jssp, #-32]!
0xffff7ab37d58  1208  stp d24, d25, [jssp, #16]
0xffff7ab37d5c  1212  stp d18, d19, [jssp, #-32]!
0xffff7ab37d60  1216  stp d20, d21, [jssp, #16]
0xffff7ab37d64  1220  stp d6, d7, [jssp, #-32]!
0xffff7ab37d68  1224  stp d16, d17, [jssp, #16]
0xffff7ab37d6c  1228  stp d2, d3, [jssp, #-32]!
0xffff7ab37d70  1232  stp d4, d5, [jssp, #16]
0xffff7ab37d74  1236  stp d0, d1, [jssp, #-16]!
0xffff7ab37d78  1240  mov x0, x4
0xffff7ab37d7c  1244  mov x1, x3
0xffff7ab37d80  1248  ldr x2, pc+624 (addr 0x0000ffff7ab37ff0)    ;; external reference (isolate)
0xffff7ab37d84  1252  ldr x16, pc+628 (addr 0x0000ffff7ab37ff8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab37d88  1256  and csp, jssp, #0xfffffffffffffff0
0xffff7ab37d8c  1260  blr x16
0xffff7ab37d90  1264  ldp d2, d3, [jssp, #16]
0xffff7ab37d94  1268  ldp d0, d1, [jssp], #32
0xffff7ab37d98  1272  ldp d6, d7, [jssp, #16]
0xffff7ab37d9c  1276  ldp d4, d5, [jssp], #32
0xffff7ab37da0  1280  ldp d18, d19, [jssp, #16]
0xffff7ab37da4  1284  ldp d16, d17, [jssp], #32
0xffff7ab37da8  1288  ldp d22, d23, [jssp, #16]
0xffff7ab37dac  1292  ldp d20, d21, [jssp], #32
0xffff7ab37db0  1296  ldp d26, d27, [jssp, #16]
0xffff7ab37db4  1300  ldp d24, d25, [jssp], #32
0xffff7ab37db8  1304  ldp d28, d29, [jssp], #16
0xffff7ab37dbc  1308  ldp x5, x6, [jssp, #16]
0xffff7ab37dc0  1312  ldp x3, x4, [jssp], #32
0xffff7ab37dc4  1316  ldp x9, x10, [jssp, #16]
0xffff7ab37dc8  1320  ldp x7, x8, [jssp], #32
0xffff7ab37dcc  1324  ldp x13, x14, [jssp, #16]
0xffff7ab37dd0  1328  ldp x11, x12, [jssp], #32
0xffff7ab37dd4  1332  ldr lr, [jssp, #16]
0xffff7ab37dd8  1336  ldp x15, x18, [jssp], #24
0xffff7ab37ddc  1340  ldp x1, x0, [jssp], #16
0xffff7ab37de0  1344  ldr x16, pc+544 (addr 0x0000ffff7ab38000)    ;; external reference (store_buffer_top)
0xffff7ab37de4  1348  ldr x2, [x16]
0xffff7ab37de8  1352  str x3, [x2], #8
0xffff7ab37dec  1356  str x2, [x16]
0xffff7ab37df0  1360  tst x2, #0x1ffff
0xffff7ab37df4  1364  b.eq #+0x8 (addr 0xffff7ab37dfc)
0xffff7ab37df8  1368  ret
0xffff7ab37dfc  1372  sub csp, jssp, #0x8 (8)
0xffff7ab37e00  1376  str lr, [jssp, #-8]!
0xffff7ab37e04  1380  ldr x17, pc+516 (addr 0x0000ffff7ab38008)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab37e08  1384  blr x17
0xffff7ab37e0c  1388  ldr lr, [jssp], #8
0xffff7ab37e10  1392  ret
0xffff7ab37e14  1396  and x2, x4, #0xfffffffffff00000
0xffff7ab37e18  1400  ldr x0, [x2, #104]
0xffff7ab37e1c  1404  subs x0, x0, #0x1 (1)
0xffff7ab37e20  1408  str x0, [x2, #104]
0xffff7ab37e24  1412  b.mi #+0x84 (addr 0xffff7ab37ea8)
0xffff7ab37e28  1416  ubfx x16, x4, #8, #12
0xffff7ab37e2c  1420  and x2, x4, #0xfffffffffff00000
0xffff7ab37e30  1424  add x2, x2, x16, lsl #2
0xffff7ab37e34  1428  ubfx x0, x4, #3, #5
0xffff7ab37e38  1432  ldr x2, [x2, #360]
0xffff7ab37e3c  1436  lsr x2, x2, x0
0xffff7ab37e40  1440  tbz w2, #0, #+0x8 (addr 0xffff7ab37e48)
0xffff7ab37e44  1444  tbnz w2, #1, #+0xc (addr 0xffff7ab37e50)
0xffff7ab37e48  1448  ldp x1, x0, [jssp], #16
0xffff7ab37e4c  1452  ret
0xffff7ab37e50  1456  ldr x2, [x3]
0xffff7ab37e54  1460  and x0, x2, #0xfffffffffff00000
0xffff7ab37e58  1464  ldr x0, [x0, #8]
0xffff7ab37e5c  1468  tbz w0, #6, #+0x18 (addr 0xffff7ab37e74)
0xffff7ab37e60  1472  and x0, x4, #0xfffffffffff00000
0xffff7ab37e64  1476  ldr x0, [x0, #8]
0xffff7ab37e68  1480  movz x16, #0x58
0xffff7ab37e6c  1484  tst x0, x16
0xffff7ab37e70  1488  b.eq #+0x38 (addr 0xffff7ab37ea8)
0xffff7ab37e74  1492  sub csp, jssp, #0x10 (16)
0xffff7ab37e78  1496  stp x4, x3, [jssp, #-16]!
0xffff7ab37e7c  1500  ubfx x16, x2, #8, #12
0xffff7ab37e80  1504  and x0, x2, #0xfffffffffff00000
0xffff7ab37e84  1508  add x0, x0, x16, lsl #2
0xffff7ab37e88  1512  ubfx x4, x2, #3, #5
0xffff7ab37e8c  1516  ldr x3, [x0, #360]
0xffff7ab37e90  1520  lsr x3, x3, x4
0xffff7ab37e94  1524  tbz w3, #0, #+0x10 (addr 0xffff7ab37ea4)
0xffff7ab37e98  1528  ldp x4, x3, [jssp], #16
0xffff7ab37e9c  1532  ldp x1, x0, [jssp], #16
0xffff7ab37ea0  1536  ret
0xffff7ab37ea4  1540  ldp x4, x3, [jssp], #16
0xffff7ab37ea8  1544  sub csp, jssp, #0x78 (120)
0xffff7ab37eac  1548  stp x14, x15, [jssp, #-32]!
0xffff7ab37eb0  1552  stp x18, lr, [jssp, #16]
0xffff7ab37eb4  1556  stp x10, x11, [jssp, #-32]!
0xffff7ab37eb8  1560  stp x12, x13, [jssp, #16]
0xffff7ab37ebc  1564  stp x6, x7, [jssp, #-32]!
0xffff7ab37ec0  1568  stp x8, x9, [jssp, #16]
0xffff7ab37ec4  1572  stp x3, x4, [jssp, #-24]!
0xffff7ab37ec8  1576  str x5, [jssp, #16]
0xffff7ab37ecc  1580  sub csp, jssp, #0xb0 (176)
0xffff7ab37ed0  1584  stp d26, d27, [jssp, #-32]!
0xffff7ab37ed4  1588  stp d28, d29, [jssp, #16]
0xffff7ab37ed8  1592  stp d22, d23, [jssp, #-32]!
0xffff7ab37edc  1596  stp d24, d25, [jssp, #16]
0xffff7ab37ee0  1600  stp d18, d19, [jssp, #-32]!
0xffff7ab37ee4  1604  stp d20, d21, [jssp, #16]
0xffff7ab37ee8  1608  stp d6, d7, [jssp, #-32]!
0xffff7ab37eec  1612  stp d16, d17, [jssp, #16]
0xffff7ab37ef0  1616  stp d2, d3, [jssp, #-32]!
0xffff7ab37ef4  1620  stp d4, d5, [jssp, #16]
0xffff7ab37ef8  1624  stp d0, d1, [jssp, #-16]!
0xffff7ab37efc  1628  mov x0, x4
0xffff7ab37f00  1632  mov x1, x3
0xffff7ab37f04  1636  ldr x2, pc+268 (addr 0x0000ffff7ab38010)    ;; external reference (isolate)
0xffff7ab37f08  1640  ldr x16, pc+272 (addr 0x0000ffff7ab38018)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab37f0c  1644  and csp, jssp, #0xfffffffffffffff0
0xffff7ab37f10  1648  blr x16
0xffff7ab37f14  1652  ldp d2, d3, [jssp, #16]
0xffff7ab37f18  1656  ldp d0, d1, [jssp], #32
0xffff7ab37f1c  1660  ldp d6, d7, [jssp, #16]
0xffff7ab37f20  1664  ldp d4, d5, [jssp], #32
0xffff7ab37f24  1668  ldp d18, d19, [jssp, #16]
0xffff7ab37f28  1672  ldp d16, d17, [jssp], #32
0xffff7ab37f2c  1676  ldp d22, d23, [jssp, #16]
0xffff7ab37f30  1680  ldp d20, d21, [jssp], #32
0xffff7ab37f34  1684  ldp d26, d27, [jssp, #16]
0xffff7ab37f38  1688  ldp d24, d25, [jssp], #32
0xffff7ab37f3c  1692  ldp d28, d29, [jssp], #16
0xffff7ab37f40  1696  ldp x5, x6, [jssp, #16]
0xffff7ab37f44  1700  ldp x3, x4, [jssp], #32
0xffff7ab37f48  1704  ldp x9, x10, [jssp, #16]
0xffff7ab37f4c  1708  ldp x7, x8, [jssp], #32
0xffff7ab37f50  1712  ldp x13, x14, [jssp, #16]
0xffff7ab37f54  1716  ldp x11, x12, [jssp], #32
0xffff7ab37f58  1720  ldr lr, [jssp, #16]
0xffff7ab37f5c  1724  ldp x15, x18, [jssp], #24
0xffff7ab37f60  1728  ldp x1, x0, [jssp], #16
0xffff7ab37f64  1732  ret
0xffff7ab37f68  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab37f6c  1740  d63f03e0       constant
0xffff7ab37f70  1744  09abe8c0       constant
0xffff7ab37f74  1748  00000000       constant
0xffff7ab37f78  1752  7ab065a0       constant
0xffff7ab37f7c  1756  0000ffff       constant
0xffff7ab37f80  1760  09abe8c0       constant
0xffff7ab37f84  1764  00000000       constant
0xffff7ab37f88  1768  7ab065a0       constant
0xffff7ab37f8c  1772  0000ffff       constant
0xffff7ab37f90  1776  09abe8c0       constant
0xffff7ab37f94  1780  00000000       constant
0xffff7ab37f98  1784  7ab065a0       constant
0xffff7ab37f9c  1788  0000ffff       constant
0xffff7ab37fa0  1792  09abd2d0       constant
0xffff7ab37fa4  1796  00000000       constant
0xffff7ab37fa8  1800  00c2d958       constant
0xffff7ab37fac  1804  00000000       constant
0xffff7ab37fb0  1808  09abe8c0       constant
0xffff7ab37fb4  1812  00000000       constant
0xffff7ab37fb8  1816  7ab065a0       constant
0xffff7ab37fbc  1820  0000ffff       constant
0xffff7ab37fc0  1824  09abd2d0       constant
0xffff7ab37fc4  1828  00000000       constant
0xffff7ab37fc8  1832  00c2d958       constant
0xffff7ab37fcc  1836  00000000       constant
0xffff7ab37fd0  1840  09abe8c0       constant
0xffff7ab37fd4  1844  00000000       constant
0xffff7ab37fd8  1848  7ab065a0       constant
0xffff7ab37fdc  1852  0000ffff       constant
0xffff7ab37fe0  1856  09abe8c0       constant
0xffff7ab37fe4  1860  00000000       constant
0xffff7ab37fe8  1864  7ab065a0       constant
0xffff7ab37fec  1868  0000ffff       constant
0xffff7ab37ff0  1872  09abd2d0       constant
0xffff7ab37ff4  1876  00000000       constant
0xffff7ab37ff8  1880  00c2d958       constant
0xffff7ab37ffc  1884  00000000       constant
0xffff7ab38000  1888  09abe8c0       constant
0xffff7ab38004  1892  00000000       constant
0xffff7ab38008  1896  7ab065a0       constant
0xffff7ab3800c  1900  0000ffff       constant
0xffff7ab38010  1904  09abd2d0       constant
0xffff7ab38014  1908  00000000       constant
0xffff7ab38018  1912  00c2d958       constant
0xffff7ab3801c  1916  00000000       constant


RelocInfo (size = 65)
0xffff7ab378a8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab378cc  code target (STUB)  (0xffff7ab065a0)
0xffff7ab37944  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab37968  code target (STUB)  (0xffff7ab065a0)
0xffff7ab379a8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab379cc  code target (STUB)  (0xffff7ab065a0)
0xffff7ab37a3c  external reference (isolate)  (0x9abd2d0)
0xffff7ab37a40  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab37a9c  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab37ac0  code target (STUB)  (0xffff7ab065a0)
0xffff7ab37ba0  external reference (isolate)  (0x9abd2d0)
0xffff7ab37ba4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab37c68  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab37c8c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab37cec  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab37d10  code target (STUB)  (0xffff7ab065a0)
0xffff7ab37d80  external reference (isolate)  (0x9abd2d0)
0xffff7ab37d84  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab37de0  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab37e04  code target (STUB)  (0xffff7ab065a0)
0xffff7ab37f04  external reference (isolate)  (0x9abd2d0)
0xffff7ab37f08  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab37f68  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0xffff7ab38080     0  adr xzr, #+0x40 (addr 0xffff7ab380c0)
0xffff7ab38084     4  adr xzr, #+0x360 (addr 0xffff7ab383e4)
0xffff7ab38088     8  ldr x16, pc+1736 (addr 0x0000ffff7ab38750)    ;; external reference (store_buffer_top)
0xffff7ab3808c    12  ldr x5, [x16]
0xffff7ab38090    16  str x2, [x5], #8
0xffff7ab38094    20  str x5, [x16]
0xffff7ab38098    24  tst x5, #0x1ffff
0xffff7ab3809c    28  b.eq #+0x8 (addr 0xffff7ab380a4)
0xffff7ab380a0    32  ret
0xffff7ab380a4    36  sub csp, jssp, #0x8 (8)
0xffff7ab380a8    40  str lr, [jssp, #-8]!
0xffff7ab380ac    44  ldr x17, pc+1708 (addr 0x0000ffff7ab38758)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab380b0    48  blr x17
0xffff7ab380b4    52  ldr lr, [jssp], #8
0xffff7ab380b8    56  ret
0xffff7ab380bc    60  ret
0xffff7ab380c0    64  sub csp, jssp, #0x10 (16)
0xffff7ab380c4    68  stp x3, x0, [jssp, #-16]!
0xffff7ab380c8    72  ldr x5, [x2]
0xffff7ab380cc    76  and x16, x5, #0xfffffffffff00000
0xffff7ab380d0    80  ldr x16, [x16, #8]
0xffff7ab380d4    84  tst x16, #0x18
0xffff7ab380d8    88  b.eq #+0x1d8 (addr 0xffff7ab382b0)
0xffff7ab380dc    92  and x16, x1, #0xfffffffffff00000
0xffff7ab380e0    96  ldr x16, [x16, #8]
0xffff7ab380e4   100  tst x16, #0x18
0xffff7ab380e8   104  b.ne #+0x1c8 (addr 0xffff7ab382b0)
0xffff7ab380ec   108  and x5, x1, #0xfffffffffff00000
0xffff7ab380f0   112  ldr x0, [x5, #104]
0xffff7ab380f4   116  subs x0, x0, #0x1 (1)
0xffff7ab380f8   120  str x0, [x5, #104]
0xffff7ab380fc   124  b.mi #+0xc4 (addr 0xffff7ab381c0)
0xffff7ab38100   128  ubfx x16, x1, #8, #12
0xffff7ab38104   132  and x5, x1, #0xfffffffffff00000
0xffff7ab38108   136  add x5, x5, x16, lsl #2
0xffff7ab3810c   140  ubfx x0, x1, #3, #5
0xffff7ab38110   144  ldr x5, [x5, #360]
0xffff7ab38114   148  lsr x5, x5, x0
0xffff7ab38118   152  tbz w5, #0, #+0x8 (addr 0xffff7ab38120)
0xffff7ab3811c   156  tbnz w5, #1, #+0x3c (addr 0xffff7ab38158)
0xffff7ab38120   160  ldp x3, x0, [jssp], #16
0xffff7ab38124   164  ldr x16, pc+1596 (addr 0x0000ffff7ab38760)    ;; external reference (store_buffer_top)
0xffff7ab38128   168  ldr x5, [x16]
0xffff7ab3812c   172  str x2, [x5], #8
0xffff7ab38130   176  str x5, [x16]
0xffff7ab38134   180  tst x5, #0x1ffff
0xffff7ab38138   184  b.eq #+0x8 (addr 0xffff7ab38140)
0xffff7ab3813c   188  ret
0xffff7ab38140   192  sub csp, jssp, #0x8 (8)
0xffff7ab38144   196  str lr, [jssp, #-8]!
0xffff7ab38148   200  ldr x17, pc+1568 (addr 0x0000ffff7ab38768)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab3814c   204  blr x17
0xffff7ab38150   208  ldr lr, [jssp], #8
0xffff7ab38154   212  ret
0xffff7ab38158   216  ldr x5, [x2]
0xffff7ab3815c   220  sub csp, jssp, #0x10 (16)
0xffff7ab38160   224  stp x1, x2, [jssp, #-16]!
0xffff7ab38164   228  ubfx x16, x5, #8, #12
0xffff7ab38168   232  and x0, x5, #0xfffffffffff00000
0xffff7ab3816c   236  add x0, x0, x16, lsl #2
0xffff7ab38170   240  ubfx x1, x5, #3, #5
0xffff7ab38174   244  ldr x2, [x0, #360]
0xffff7ab38178   248  lsr x2, x2, x1
0xffff7ab3817c   252  tbz w2, #0, #+0x40 (addr 0xffff7ab381bc)
0xffff7ab38180   256  ldp x1, x2, [jssp], #16
0xffff7ab38184   260  ldp x3, x0, [jssp], #16
0xffff7ab38188   264  ldr x16, pc+1512 (addr 0x0000ffff7ab38770)    ;; external reference (store_buffer_top)
0xffff7ab3818c   268  ldr x5, [x16]
0xffff7ab38190   272  str x2, [x5], #8
0xffff7ab38194   276  str x5, [x16]
0xffff7ab38198   280  tst x5, #0x1ffff
0xffff7ab3819c   284  b.eq #+0x8 (addr 0xffff7ab381a4)
0xffff7ab381a0   288  ret
0xffff7ab381a4   292  sub csp, jssp, #0x8 (8)
0xffff7ab381a8   296  str lr, [jssp, #-8]!
0xffff7ab381ac   300  ldr x17, pc+1484 (addr 0x0000ffff7ab38778)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab381b0   304  blr x17
0xffff7ab381b4   308  ldr lr, [jssp], #8
0xffff7ab381b8   312  ret
0xffff7ab381bc   316  ldp x1, x2, [jssp], #16
0xffff7ab381c0   320  sub csp, jssp, #0x78 (120)
0xffff7ab381c4   324  stp x14, x15, [jssp, #-32]!
0xffff7ab381c8   328  stp x18, lr, [jssp, #16]
0xffff7ab381cc   332  stp x10, x11, [jssp, #-32]!
0xffff7ab381d0   336  stp x12, x13, [jssp, #16]
0xffff7ab381d4   340  stp x6, x7, [jssp, #-32]!
0xffff7ab381d8   344  stp x8, x9, [jssp, #16]
0xffff7ab381dc   348  stp x1, x2, [jssp, #-24]!
0xffff7ab381e0   352  str x4, [jssp, #16]
0xffff7ab381e4   356  sub csp, jssp, #0xb0 (176)
0xffff7ab381e8   360  stp d26, d27, [jssp, #-32]!
0xffff7ab381ec   364  stp d28, d29, [jssp, #16]
0xffff7ab381f0   368  stp d22, d23, [jssp, #-32]!
0xffff7ab381f4   372  stp d24, d25, [jssp, #16]
0xffff7ab381f8   376  stp d18, d19, [jssp, #-32]!
0xffff7ab381fc   380  stp d20, d21, [jssp, #16]
0xffff7ab38200   384  stp d6, d7, [jssp, #-32]!
0xffff7ab38204   388  stp d16, d17, [jssp, #16]
0xffff7ab38208   392  stp d2, d3, [jssp, #-32]!
0xffff7ab3820c   396  stp d4, d5, [jssp, #16]
0xffff7ab38210   400  stp d0, d1, [jssp, #-16]!
0xffff7ab38214   404  mov x0, x1
0xffff7ab38218   408  mov x1, x2
0xffff7ab3821c   412  ldr x2, pc+1380 (addr 0x0000ffff7ab38780)    ;; external reference (isolate)
0xffff7ab38220   416  ldr x16, pc+1384 (addr 0x0000ffff7ab38788)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab38224   420  and csp, jssp, #0xfffffffffffffff0
0xffff7ab38228   424  blr x16
0xffff7ab3822c   428  ldp d2, d3, [jssp, #16]
0xffff7ab38230   432  ldp d0, d1, [jssp], #32
0xffff7ab38234   436  ldp d6, d7, [jssp, #16]
0xffff7ab38238   440  ldp d4, d5, [jssp], #32
0xffff7ab3823c   444  ldp d18, d19, [jssp, #16]
0xffff7ab38240   448  ldp d16, d17, [jssp], #32
0xffff7ab38244   452  ldp d22, d23, [jssp, #16]
0xffff7ab38248   456  ldp d20, d21, [jssp], #32
0xffff7ab3824c   460  ldp d26, d27, [jssp, #16]
0xffff7ab38250   464  ldp d24, d25, [jssp], #32
0xffff7ab38254   468  ldp d28, d29, [jssp], #16
0xffff7ab38258   472  ldp x4, x6, [jssp, #16]
0xffff7ab3825c   476  ldp x1, x2, [jssp], #32
0xffff7ab38260   480  ldp x9, x10, [jssp, #16]
0xffff7ab38264   484  ldp x7, x8, [jssp], #32
0xffff7ab38268   488  ldp x13, x14, [jssp, #16]
0xffff7ab3826c   492  ldp x11, x12, [jssp], #32
0xffff7ab38270   496  ldr lr, [jssp, #16]
0xffff7ab38274   500  ldp x15, x18, [jssp], #24
0xffff7ab38278   504  ldp x3, x0, [jssp], #16
0xffff7ab3827c   508  ldr x16, pc+1300 (addr 0x0000ffff7ab38790)    ;; external reference (store_buffer_top)
0xffff7ab38280   512  ldr x5, [x16]
0xffff7ab38284   516  str x2, [x5], #8
0xffff7ab38288   520  str x5, [x16]
0xffff7ab3828c   524  tst x5, #0x1ffff
0xffff7ab38290   528  b.eq #+0x8 (addr 0xffff7ab38298)
0xffff7ab38294   532  ret
0xffff7ab38298   536  sub csp, jssp, #0x8 (8)
0xffff7ab3829c   540  str lr, [jssp, #-8]!
0xffff7ab382a0   544  ldr x17, pc+1272 (addr 0x0000ffff7ab38798)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab382a4   548  blr x17
0xffff7ab382a8   552  ldr lr, [jssp], #8
0xffff7ab382ac   556  ret
0xffff7ab382b0   560  and x5, x1, #0xfffffffffff00000
0xffff7ab382b4   564  ldr x0, [x5, #104]
0xffff7ab382b8   568  subs x0, x0, #0x1 (1)
0xffff7ab382bc   572  str x0, [x5, #104]
0xffff7ab382c0   576  b.mi #+0x64 (addr 0xffff7ab38324)
0xffff7ab382c4   580  ubfx x16, x1, #8, #12
0xffff7ab382c8   584  and x5, x1, #0xfffffffffff00000
0xffff7ab382cc   588  add x5, x5, x16, lsl #2
0xffff7ab382d0   592  ubfx x0, x1, #3, #5
0xffff7ab382d4   596  ldr x5, [x5, #360]
0xffff7ab382d8   600  lsr x5, x5, x0
0xffff7ab382dc   604  tbz w5, #0, #+0x8 (addr 0xffff7ab382e4)
0xffff7ab382e0   608  tbnz w5, #1, #+0xc (addr 0xffff7ab382ec)
0xffff7ab382e4   612  ldp x3, x0, [jssp], #16
0xffff7ab382e8   616  ret
0xffff7ab382ec   620  ldr x5, [x2]
0xffff7ab382f0   624  sub csp, jssp, #0x10 (16)
0xffff7ab382f4   628  stp x1, x2, [jssp, #-16]!
0xffff7ab382f8   632  ubfx x16, x5, #8, #12
0xffff7ab382fc   636  and x0, x5, #0xfffffffffff00000
0xffff7ab38300   640  add x0, x0, x16, lsl #2
0xffff7ab38304   644  ubfx x1, x5, #3, #5
0xffff7ab38308   648  ldr x2, [x0, #360]
0xffff7ab3830c   652  lsr x2, x2, x1
0xffff7ab38310   656  tbz w2, #0, #+0x10 (addr 0xffff7ab38320)
0xffff7ab38314   660  ldp x1, x2, [jssp], #16
0xffff7ab38318   664  ldp x3, x0, [jssp], #16
0xffff7ab3831c   668  ret
0xffff7ab38320   672  ldp x1, x2, [jssp], #16
0xffff7ab38324   676  sub csp, jssp, #0x78 (120)
0xffff7ab38328   680  stp x14, x15, [jssp, #-32]!
0xffff7ab3832c   684  stp x18, lr, [jssp, #16]
0xffff7ab38330   688  stp x10, x11, [jssp, #-32]!
0xffff7ab38334   692  stp x12, x13, [jssp, #16]
0xffff7ab38338   696  stp x6, x7, [jssp, #-32]!
0xffff7ab3833c   700  stp x8, x9, [jssp, #16]
0xffff7ab38340   704  stp x1, x2, [jssp, #-24]!
0xffff7ab38344   708  str x4, [jssp, #16]
0xffff7ab38348   712  sub csp, jssp, #0xb0 (176)
0xffff7ab3834c   716  stp d26, d27, [jssp, #-32]!
0xffff7ab38350   720  stp d28, d29, [jssp, #16]
0xffff7ab38354   724  stp d22, d23, [jssp, #-32]!
0xffff7ab38358   728  stp d24, d25, [jssp, #16]
0xffff7ab3835c   732  stp d18, d19, [jssp, #-32]!
0xffff7ab38360   736  stp d20, d21, [jssp, #16]
0xffff7ab38364   740  stp d6, d7, [jssp, #-32]!
0xffff7ab38368   744  stp d16, d17, [jssp, #16]
0xffff7ab3836c   748  stp d2, d3, [jssp, #-32]!
0xffff7ab38370   752  stp d4, d5, [jssp, #16]
0xffff7ab38374   756  stp d0, d1, [jssp, #-16]!
0xffff7ab38378   760  mov x0, x1
0xffff7ab3837c   764  mov x1, x2
0xffff7ab38380   768  ldr x2, pc+1056 (addr 0x0000ffff7ab387a0)    ;; external reference (isolate)
0xffff7ab38384   772  ldr x16, pc+1060 (addr 0x0000ffff7ab387a8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab38388   776  and csp, jssp, #0xfffffffffffffff0
0xffff7ab3838c   780  blr x16
0xffff7ab38390   784  ldp d2, d3, [jssp, #16]
0xffff7ab38394   788  ldp d0, d1, [jssp], #32
0xffff7ab38398   792  ldp d6, d7, [jssp, #16]
0xffff7ab3839c   796  ldp d4, d5, [jssp], #32
0xffff7ab383a0   800  ldp d18, d19, [jssp, #16]
0xffff7ab383a4   804  ldp d16, d17, [jssp], #32
0xffff7ab383a8   808  ldp d22, d23, [jssp, #16]
0xffff7ab383ac   812  ldp d20, d21, [jssp], #32
0xffff7ab383b0   816  ldp d26, d27, [jssp, #16]
0xffff7ab383b4   820  ldp d24, d25, [jssp], #32
0xffff7ab383b8   824  ldp d28, d29, [jssp], #16
0xffff7ab383bc   828  ldp x4, x6, [jssp, #16]
0xffff7ab383c0   832  ldp x1, x2, [jssp], #32
0xffff7ab383c4   836  ldp x9, x10, [jssp, #16]
0xffff7ab383c8   840  ldp x7, x8, [jssp], #32
0xffff7ab383cc   844  ldp x13, x14, [jssp, #16]
0xffff7ab383d0   848  ldp x11, x12, [jssp], #32
0xffff7ab383d4   852  ldr lr, [jssp, #16]
0xffff7ab383d8   856  ldp x15, x18, [jssp], #24
0xffff7ab383dc   860  ldp x3, x0, [jssp], #16
0xffff7ab383e0   864  ret
0xffff7ab383e4   868  sub csp, jssp, #0x10 (16)
0xffff7ab383e8   872  stp x3, x0, [jssp, #-16]!
0xffff7ab383ec   876  ldr x5, [x2]
0xffff7ab383f0   880  and x16, x5, #0xfffffffffff00000
0xffff7ab383f4   884  ldr x16, [x16, #8]
0xffff7ab383f8   888  tst x16, #0x18
0xffff7ab383fc   892  b.eq #+0x1f8 (addr 0xffff7ab385f4)
0xffff7ab38400   896  and x16, x1, #0xfffffffffff00000
0xffff7ab38404   900  ldr x16, [x16, #8]
0xffff7ab38408   904  tst x16, #0x18
0xffff7ab3840c   908  b.ne #+0x1e8 (addr 0xffff7ab385f4)
0xffff7ab38410   912  and x5, x1, #0xfffffffffff00000
0xffff7ab38414   916  ldr x0, [x5, #104]
0xffff7ab38418   920  subs x0, x0, #0x1 (1)
0xffff7ab3841c   924  str x0, [x5, #104]
0xffff7ab38420   928  b.mi #+0xe4 (addr 0xffff7ab38504)
0xffff7ab38424   932  ubfx x16, x1, #8, #12
0xffff7ab38428   936  and x5, x1, #0xfffffffffff00000
0xffff7ab3842c   940  add x5, x5, x16, lsl #2
0xffff7ab38430   944  ubfx x0, x1, #3, #5
0xffff7ab38434   948  ldr x5, [x5, #360]
0xffff7ab38438   952  lsr x5, x5, x0
0xffff7ab3843c   956  tbz w5, #0, #+0x8 (addr 0xffff7ab38444)
0xffff7ab38440   960  tbnz w5, #1, #+0x3c (addr 0xffff7ab3847c)
0xffff7ab38444   964  ldp x3, x0, [jssp], #16
0xffff7ab38448   968  ldr x16, pc+872 (addr 0x0000ffff7ab387b0)    ;; external reference (store_buffer_top)
0xffff7ab3844c   972  ldr x5, [x16]
0xffff7ab38450   976  str x2, [x5], #8
0xffff7ab38454   980  str x5, [x16]
0xffff7ab38458   984  tst x5, #0x1ffff
0xffff7ab3845c   988  b.eq #+0x8 (addr 0xffff7ab38464)
0xffff7ab38460   992  ret
0xffff7ab38464   996  sub csp, jssp, #0x8 (8)
0xffff7ab38468  1000  str lr, [jssp, #-8]!
0xffff7ab3846c  1004  ldr x17, pc+844 (addr 0x0000ffff7ab387b8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab38470  1008  blr x17
0xffff7ab38474  1012  ldr lr, [jssp], #8
0xffff7ab38478  1016  ret
0xffff7ab3847c  1020  ldr x5, [x2]
0xffff7ab38480  1024  and x0, x5, #0xfffffffffff00000
0xffff7ab38484  1028  ldr x0, [x0, #8]
0xffff7ab38488  1032  tbz w0, #6, #+0x18 (addr 0xffff7ab384a0)
0xffff7ab3848c  1036  and x0, x1, #0xfffffffffff00000
0xffff7ab38490  1040  ldr x0, [x0, #8]
0xffff7ab38494  1044  movz x16, #0x58
0xffff7ab38498  1048  tst x0, x16
0xffff7ab3849c  1052  b.eq #+0x68 (addr 0xffff7ab38504)
0xffff7ab384a0  1056  sub csp, jssp, #0x10 (16)
0xffff7ab384a4  1060  stp x1, x2, [jssp, #-16]!
0xffff7ab384a8  1064  ubfx x16, x5, #8, #12
0xffff7ab384ac  1068  and x0, x5, #0xfffffffffff00000
0xffff7ab384b0  1072  add x0, x0, x16, lsl #2
0xffff7ab384b4  1076  ubfx x1, x5, #3, #5
0xffff7ab384b8  1080  ldr x2, [x0, #360]
0xffff7ab384bc  1084  lsr x2, x2, x1
0xffff7ab384c0  1088  tbz w2, #0, #+0x40 (addr 0xffff7ab38500)
0xffff7ab384c4  1092  ldp x1, x2, [jssp], #16
0xffff7ab384c8  1096  ldp x3, x0, [jssp], #16
0xffff7ab384cc  1100  ldr x16, pc+756 (addr 0x0000ffff7ab387c0)    ;; external reference (store_buffer_top)
0xffff7ab384d0  1104  ldr x5, [x16]
0xffff7ab384d4  1108  str x2, [x5], #8
0xffff7ab384d8  1112  str x5, [x16]
0xffff7ab384dc  1116  tst x5, #0x1ffff
0xffff7ab384e0  1120  b.eq #+0x8 (addr 0xffff7ab384e8)
0xffff7ab384e4  1124  ret
0xffff7ab384e8  1128  sub csp, jssp, #0x8 (8)
0xffff7ab384ec  1132  str lr, [jssp, #-8]!
0xffff7ab384f0  1136  ldr x17, pc+728 (addr 0x0000ffff7ab387c8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab384f4  1140  blr x17
0xffff7ab384f8  1144  ldr lr, [jssp], #8
0xffff7ab384fc  1148  ret
0xffff7ab38500  1152  ldp x1, x2, [jssp], #16
0xffff7ab38504  1156  sub csp, jssp, #0x78 (120)
0xffff7ab38508  1160  stp x14, x15, [jssp, #-32]!
0xffff7ab3850c  1164  stp x18, lr, [jssp, #16]
0xffff7ab38510  1168  stp x10, x11, [jssp, #-32]!
0xffff7ab38514  1172  stp x12, x13, [jssp, #16]
0xffff7ab38518  1176  stp x6, x7, [jssp, #-32]!
0xffff7ab3851c  1180  stp x8, x9, [jssp, #16]
0xffff7ab38520  1184  stp x1, x2, [jssp, #-24]!
0xffff7ab38524  1188  str x4, [jssp, #16]
0xffff7ab38528  1192  sub csp, jssp, #0xb0 (176)
0xffff7ab3852c  1196  stp d26, d27, [jssp, #-32]!
0xffff7ab38530  1200  stp d28, d29, [jssp, #16]
0xffff7ab38534  1204  stp d22, d23, [jssp, #-32]!
0xffff7ab38538  1208  stp d24, d25, [jssp, #16]
0xffff7ab3853c  1212  stp d18, d19, [jssp, #-32]!
0xffff7ab38540  1216  stp d20, d21, [jssp, #16]
0xffff7ab38544  1220  stp d6, d7, [jssp, #-32]!
0xffff7ab38548  1224  stp d16, d17, [jssp, #16]
0xffff7ab3854c  1228  stp d2, d3, [jssp, #-32]!
0xffff7ab38550  1232  stp d4, d5, [jssp, #16]
0xffff7ab38554  1236  stp d0, d1, [jssp, #-16]!
0xffff7ab38558  1240  mov x0, x1
0xffff7ab3855c  1244  mov x1, x2
0xffff7ab38560  1248  ldr x2, pc+624 (addr 0x0000ffff7ab387d0)    ;; external reference (isolate)
0xffff7ab38564  1252  ldr x16, pc+628 (addr 0x0000ffff7ab387d8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab38568  1256  and csp, jssp, #0xfffffffffffffff0
0xffff7ab3856c  1260  blr x16
0xffff7ab38570  1264  ldp d2, d3, [jssp, #16]
0xffff7ab38574  1268  ldp d0, d1, [jssp], #32
0xffff7ab38578  1272  ldp d6, d7, [jssp, #16]
0xffff7ab3857c  1276  ldp d4, d5, [jssp], #32
0xffff7ab38580  1280  ldp d18, d19, [jssp, #16]
0xffff7ab38584  1284  ldp d16, d17, [jssp], #32
0xffff7ab38588  1288  ldp d22, d23, [jssp, #16]
0xffff7ab3858c  1292  ldp d20, d21, [jssp], #32
0xffff7ab38590  1296  ldp d26, d27, [jssp, #16]
0xffff7ab38594  1300  ldp d24, d25, [jssp], #32
0xffff7ab38598  1304  ldp d28, d29, [jssp], #16
0xffff7ab3859c  1308  ldp x4, x6, [jssp, #16]
0xffff7ab385a0  1312  ldp x1, x2, [jssp], #32
0xffff7ab385a4  1316  ldp x9, x10, [jssp, #16]
0xffff7ab385a8  1320  ldp x7, x8, [jssp], #32
0xffff7ab385ac  1324  ldp x13, x14, [jssp, #16]
0xffff7ab385b0  1328  ldp x11, x12, [jssp], #32
0xffff7ab385b4  1332  ldr lr, [jssp, #16]
0xffff7ab385b8  1336  ldp x15, x18, [jssp], #24
0xffff7ab385bc  1340  ldp x3, x0, [jssp], #16
0xffff7ab385c0  1344  ldr x16, pc+544 (addr 0x0000ffff7ab387e0)    ;; external reference (store_buffer_top)
0xffff7ab385c4  1348  ldr x5, [x16]
0xffff7ab385c8  1352  str x2, [x5], #8
0xffff7ab385cc  1356  str x5, [x16]
0xffff7ab385d0  1360  tst x5, #0x1ffff
0xffff7ab385d4  1364  b.eq #+0x8 (addr 0xffff7ab385dc)
0xffff7ab385d8  1368  ret
0xffff7ab385dc  1372  sub csp, jssp, #0x8 (8)
0xffff7ab385e0  1376  str lr, [jssp, #-8]!
0xffff7ab385e4  1380  ldr x17, pc+516 (addr 0x0000ffff7ab387e8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab385e8  1384  blr x17
0xffff7ab385ec  1388  ldr lr, [jssp], #8
0xffff7ab385f0  1392  ret
0xffff7ab385f4  1396  and x5, x1, #0xfffffffffff00000
0xffff7ab385f8  1400  ldr x0, [x5, #104]
0xffff7ab385fc  1404  subs x0, x0, #0x1 (1)
0xffff7ab38600  1408  str x0, [x5, #104]
0xffff7ab38604  1412  b.mi #+0x84 (addr 0xffff7ab38688)
0xffff7ab38608  1416  ubfx x16, x1, #8, #12
0xffff7ab3860c  1420  and x5, x1, #0xfffffffffff00000
0xffff7ab38610  1424  add x5, x5, x16, lsl #2
0xffff7ab38614  1428  ubfx x0, x1, #3, #5
0xffff7ab38618  1432  ldr x5, [x5, #360]
0xffff7ab3861c  1436  lsr x5, x5, x0
0xffff7ab38620  1440  tbz w5, #0, #+0x8 (addr 0xffff7ab38628)
0xffff7ab38624  1444  tbnz w5, #1, #+0xc (addr 0xffff7ab38630)
0xffff7ab38628  1448  ldp x3, x0, [jssp], #16
0xffff7ab3862c  1452  ret
0xffff7ab38630  1456  ldr x5, [x2]
0xffff7ab38634  1460  and x0, x5, #0xfffffffffff00000
0xffff7ab38638  1464  ldr x0, [x0, #8]
0xffff7ab3863c  1468  tbz w0, #6, #+0x18 (addr 0xffff7ab38654)
0xffff7ab38640  1472  and x0, x1, #0xfffffffffff00000
0xffff7ab38644  1476  ldr x0, [x0, #8]
0xffff7ab38648  1480  movz x16, #0x58
0xffff7ab3864c  1484  tst x0, x16
0xffff7ab38650  1488  b.eq #+0x38 (addr 0xffff7ab38688)
0xffff7ab38654  1492  sub csp, jssp, #0x10 (16)
0xffff7ab38658  1496  stp x1, x2, [jssp, #-16]!
0xffff7ab3865c  1500  ubfx x16, x5, #8, #12
0xffff7ab38660  1504  and x0, x5, #0xfffffffffff00000
0xffff7ab38664  1508  add x0, x0, x16, lsl #2
0xffff7ab38668  1512  ubfx x1, x5, #3, #5
0xffff7ab3866c  1516  ldr x2, [x0, #360]
0xffff7ab38670  1520  lsr x2, x2, x1
0xffff7ab38674  1524  tbz w2, #0, #+0x10 (addr 0xffff7ab38684)
0xffff7ab38678  1528  ldp x1, x2, [jssp], #16
0xffff7ab3867c  1532  ldp x3, x0, [jssp], #16
0xffff7ab38680  1536  ret
0xffff7ab38684  1540  ldp x1, x2, [jssp], #16
0xffff7ab38688  1544  sub csp, jssp, #0x78 (120)
0xffff7ab3868c  1548  stp x14, x15, [jssp, #-32]!
0xffff7ab38690  1552  stp x18, lr, [jssp, #16]
0xffff7ab38694  1556  stp x10, x11, [jssp, #-32]!
0xffff7ab38698  1560  stp x12, x13, [jssp, #16]
0xffff7ab3869c  1564  stp x6, x7, [jssp, #-32]!
0xffff7ab386a0  1568  stp x8, x9, [jssp, #16]
0xffff7ab386a4  1572  stp x1, x2, [jssp, #-24]!
0xffff7ab386a8  1576  str x4, [jssp, #16]
0xffff7ab386ac  1580  sub csp, jssp, #0xb0 (176)
0xffff7ab386b0  1584  stp d26, d27, [jssp, #-32]!
0xffff7ab386b4  1588  stp d28, d29, [jssp, #16]
0xffff7ab386b8  1592  stp d22, d23, [jssp, #-32]!
0xffff7ab386bc  1596  stp d24, d25, [jssp, #16]
0xffff7ab386c0  1600  stp d18, d19, [jssp, #-32]!
0xffff7ab386c4  1604  stp d20, d21, [jssp, #16]
0xffff7ab386c8  1608  stp d6, d7, [jssp, #-32]!
0xffff7ab386cc  1612  stp d16, d17, [jssp, #16]
0xffff7ab386d0  1616  stp d2, d3, [jssp, #-32]!
0xffff7ab386d4  1620  stp d4, d5, [jssp, #16]
0xffff7ab386d8  1624  stp d0, d1, [jssp, #-16]!
0xffff7ab386dc  1628  mov x0, x1
0xffff7ab386e0  1632  mov x1, x2
0xffff7ab386e4  1636  ldr x2, pc+268 (addr 0x0000ffff7ab387f0)    ;; external reference (isolate)
0xffff7ab386e8  1640  ldr x16, pc+272 (addr 0x0000ffff7ab387f8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab386ec  1644  and csp, jssp, #0xfffffffffffffff0
0xffff7ab386f0  1648  blr x16
0xffff7ab386f4  1652  ldp d2, d3, [jssp, #16]
0xffff7ab386f8  1656  ldp d0, d1, [jssp], #32
0xffff7ab386fc  1660  ldp d6, d7, [jssp, #16]
0xffff7ab38700  1664  ldp d4, d5, [jssp], #32
0xffff7ab38704  1668  ldp d18, d19, [jssp, #16]
0xffff7ab38708  1672  ldp d16, d17, [jssp], #32
0xffff7ab3870c  1676  ldp d22, d23, [jssp, #16]
0xffff7ab38710  1680  ldp d20, d21, [jssp], #32
0xffff7ab38714  1684  ldp d26, d27, [jssp, #16]
0xffff7ab38718  1688  ldp d24, d25, [jssp], #32
0xffff7ab3871c  1692  ldp d28, d29, [jssp], #16
0xffff7ab38720  1696  ldp x4, x6, [jssp, #16]
0xffff7ab38724  1700  ldp x1, x2, [jssp], #32
0xffff7ab38728  1704  ldp x9, x10, [jssp, #16]
0xffff7ab3872c  1708  ldp x7, x8, [jssp], #32
0xffff7ab38730  1712  ldp x13, x14, [jssp, #16]
0xffff7ab38734  1716  ldp x11, x12, [jssp], #32
0xffff7ab38738  1720  ldr lr, [jssp, #16]
0xffff7ab3873c  1724  ldp x15, x18, [jssp], #24
0xffff7ab38740  1728  ldp x3, x0, [jssp], #16
0xffff7ab38744  1732  ret
0xffff7ab38748  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab3874c  1740  d63f03e0       constant
0xffff7ab38750  1744  09abe8c0       constant
0xffff7ab38754  1748  00000000       constant
0xffff7ab38758  1752  7ab065a0       constant
0xffff7ab3875c  1756  0000ffff       constant
0xffff7ab38760  1760  09abe8c0       constant
0xffff7ab38764  1764  00000000       constant
0xffff7ab38768  1768  7ab065a0       constant
0xffff7ab3876c  1772  0000ffff       constant
0xffff7ab38770  1776  09abe8c0       constant
0xffff7ab38774  1780  00000000       constant
0xffff7ab38778  1784  7ab065a0       constant
0xffff7ab3877c  1788  0000ffff       constant
0xffff7ab38780  1792  09abd2d0       constant
0xffff7ab38784  1796  00000000       constant
0xffff7ab38788  1800  00c2d958       constant
0xffff7ab3878c  1804  00000000       constant
0xffff7ab38790  1808  09abe8c0       constant
0xffff7ab38794  1812  00000000       constant
0xffff7ab38798  1816  7ab065a0       constant
0xffff7ab3879c  1820  0000ffff       constant
0xffff7ab387a0  1824  09abd2d0       constant
0xffff7ab387a4  1828  00000000       constant
0xffff7ab387a8  1832  00c2d958       constant
0xffff7ab387ac  1836  00000000       constant
0xffff7ab387b0  1840  09abe8c0       constant
0xffff7ab387b4  1844  00000000       constant
0xffff7ab387b8  1848  7ab065a0       constant
0xffff7ab387bc  1852  0000ffff       constant
0xffff7ab387c0  1856  09abe8c0       constant
0xffff7ab387c4  1860  00000000       constant
0xffff7ab387c8  1864  7ab065a0       constant
0xffff7ab387cc  1868  0000ffff       constant
0xffff7ab387d0  1872  09abd2d0       constant
0xffff7ab387d4  1876  00000000       constant
0xffff7ab387d8  1880  00c2d958       constant
0xffff7ab387dc  1884  00000000       constant
0xffff7ab387e0  1888  09abe8c0       constant
0xffff7ab387e4  1892  00000000       constant
0xffff7ab387e8  1896  7ab065a0       constant
0xffff7ab387ec  1900  0000ffff       constant
0xffff7ab387f0  1904  09abd2d0       constant
0xffff7ab387f4  1908  00000000       constant
0xffff7ab387f8  1912  00c2d958       constant
0xffff7ab387fc  1916  00000000       constant


RelocInfo (size = 65)
0xffff7ab38088  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab380ac  code target (STUB)  (0xffff7ab065a0)
0xffff7ab38124  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab38148  code target (STUB)  (0xffff7ab065a0)
0xffff7ab38188  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab381ac  code target (STUB)  (0xffff7ab065a0)
0xffff7ab3821c  external reference (isolate)  (0x9abd2d0)
0xffff7ab38220  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab3827c  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab382a0  code target (STUB)  (0xffff7ab065a0)
0xffff7ab38380  external reference (isolate)  (0x9abd2d0)
0xffff7ab38384  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab38448  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab3846c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab384cc  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab384f0  code target (STUB)  (0xffff7ab065a0)
0xffff7ab38560  external reference (isolate)  (0x9abd2d0)
0xffff7ab38564  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab385c0  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab385e4  code target (STUB)  (0xffff7ab065a0)
0xffff7ab386e4  external reference (isolate)  (0x9abd2d0)
0xffff7ab386e8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab38748  constant pool (size 184)


kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0xffff7ab38860     0  ldur x6, [x1, #7]
0xffff7ab38864     4  ldur w7, [x6, #11]
0xffff7ab38868     8  adds w8, w7, #0x3 (3)
0xffff7ab3886c    12  b.vs #+0x1dc (addr 0xffff7ab38a48)
0xffff7ab38870    16  movz w16, #0x95ff
0xffff7ab38874    20  cmp w8, w16, lsl #1
0xffff7ab38878    24  b.hs #+0x1e0 (addr 0xffff7ab38a58)
0xffff7ab3887c    28  lsl x9, x8, #32
0xffff7ab38880    32  lsl w10, w8, #3
0xffff7ab38884    36  add w10, w10, #0x10 (16)
0xffff7ab38888    40  sxtw x10, w10
0xffff7ab3888c    44  movz x11, #0xe2c0
0xffff7ab38890    48  movk x11, #0x9ab, lsl #16
0xffff7ab38894    52  ldp x13, x16, [x11]
0xffff7ab38898    56  adds x12, x13, x10
0xffff7ab3889c    60  ccmp x12, x16, #nzCv, lo
0xffff7ab388a0    64  b.hi #+0xf8 (addr 0xffff7ab38998)
0xffff7ab388a4    68  str x12, [x11]
0xffff7ab388a8    72  orr x13, x13, #0x1
0xffff7ab388ac    76  ldr x10, pc+348 (addr 0x0000ffff7ab38a08)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab388b0    80  stur x10, [x13, #-1]
0xffff7ab388b4    84  stur x9, [x13, #7]
0xffff7ab388b8    88  cmp w7, w8
0xffff7ab388bc    92  b.ge #+0x18 (addr 0xffff7ab388d4)
0xffff7ab388c0    96  sub w8, w8, #0x1 (1)
0xffff7ab388c4   100  ldr x9, pc+332 (addr 0x0000ffff7ab38a10)    ;; object: 0x20d04241 <undefined>
0xffff7ab388c8   104  add x10, x13, #0xf (15)
0xffff7ab388cc   108  str x9, [x10, w8, sxtw #3]
0xffff7ab388d0   112  b #-0x18 (addr 0xffff7ab388b8)
0xffff7ab388d4   116  cmp w7, #0x0 (0)
0xffff7ab388d8   120  b.le #+0x1c (addr 0xffff7ab388f4)
0xffff7ab388dc   124  sub w7, w7, #0x1 (1)
0xffff7ab388e0   128  add x8, x6, #0xf (15)
0xffff7ab388e4   132  ldr x9, [x8, w7, sxtw #3]
0xffff7ab388e8   136  add x8, x13, #0xf (15)
0xffff7ab388ec   140  str x9, [x8, w7, sxtw #3]
0xffff7ab388f0   144  b #-0x1c (addr 0xffff7ab388d4)
0xffff7ab388f4   148  stur x13, [x1, #7]
0xffff7ab388f8   152  add x6, x1, #0x7 (7)
0xffff7ab388fc   156  and x13, x1, #0xfffffffffff00000
0xffff7ab38900   160  ldr x13, [x13, #8]
0xffff7ab38904   164  tbz w13, #2, #+0x18 (addr 0xffff7ab3891c)
0xffff7ab38908   168  sub csp, jssp, #0x8 (8)
0xffff7ab3890c   172  str lr, [jssp, #-8]!
0xffff7ab38910   176  ldr x16, pc+264 (addr 0x0000ffff7ab38a18)    ;; code: STUB, RecordWriteStub, minor: 72097
0xffff7ab38914   180  blr x16
0xffff7ab38918   184  ldr lr, [jssp], #8
0xffff7ab3891c   188  tbz w0, #0, #+0x14c (addr 0xffff7ab38a68)
0xffff7ab38920   192  mov x2, x0
0xffff7ab38924   196  ldur x4, [x1, #7]
0xffff7ab38928   200  stur x2, [x4, #15]
0xffff7ab3892c   204  add x3, x4, #0xf (15)
0xffff7ab38930   208  and x2, x2, #0xfffffffffff00000
0xffff7ab38934   212  ldr x2, [x2, #8]
0xffff7ab38938   216  tbz w2, #1, #+0x24 (addr 0xffff7ab3895c)
0xffff7ab3893c   220  and x2, x4, #0xfffffffffff00000
0xffff7ab38940   224  ldr x2, [x2, #8]
0xffff7ab38944   228  tbz w2, #2, #+0x18 (addr 0xffff7ab3895c)
0xffff7ab38948   232  sub csp, jssp, #0x8 (8)
0xffff7ab3894c   236  str lr, [jssp, #-8]!
0xffff7ab38950   240  ldr x16, pc+208 (addr 0x0000ffff7ab38a20)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7ab38954   244  blr x16
0xffff7ab38958   248  ldr lr, [jssp], #8
0xffff7ab3895c   252  stur x5, [x1, #-1]
0xffff7ab38960   256  tbz w5, #0, #+0x34 (addr 0xffff7ab38994)
0xffff7ab38964   260  sub x2, x1, #0x1 (1)
0xffff7ab38968   264  and x5, x5, #0xfffffffffff00000
0xffff7ab3896c   268  ldr x5, [x5, #8]
0xffff7ab38970   272  tbz w5, #1, #+0x24 (addr 0xffff7ab38994)
0xffff7ab38974   276  and x5, x1, #0xfffffffffff00000
0xffff7ab38978   280  ldr x5, [x5, #8]
0xffff7ab3897c   284  tbz w5, #2, #+0x18 (addr 0xffff7ab38994)
0xffff7ab38980   288  sub csp, jssp, #0x8 (8)
0xffff7ab38984   292  str lr, [jssp, #-8]!
0xffff7ab38988   296  ldr x16, pc+160 (addr 0x0000ffff7ab38a28)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab3898c   300  blr x16
0xffff7ab38990   304  ldr lr, [jssp], #8
0xffff7ab38994   308  ret
0xffff7ab38998   312  sub csp, jssp, #0x10 (16)
0xffff7ab3899c   316  stp fp, lr, [jssp, #-16]!
0xffff7ab389a0   320  movz fp, #0xa00000000
0xffff7ab389a4   324  sub csp, jssp, #0x8 (8)
0xffff7ab389a8   328  str fp, [jssp, #-8]!
0xffff7ab389ac   332  add fp, jssp, #0x8 (8)
0xffff7ab389b0   336  movz x13, #0x0
0xffff7ab389b4   340  mov x16, lr
0xffff7ab389b8   344  ldr x17, pc+120 (addr 0x0000ffff7ab38a30)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab389bc   348  blr x17
0xffff7ab389c0   352  lsl x0, x10, #32
0xffff7ab389c4   356  movz x10, #0x0
0xffff7ab389c8   360  sub csp, jssp, #0x10 (16)
0xffff7ab389cc   364  stp x10, x0, [jssp, #-16]!
0xffff7ab389d0   368  movz x0, #0x2
0xffff7ab389d4   372  movz x1, #0x5b88
0xffff7ab389d8   376  movk x1, #0xe2, lsl #16
0xffff7ab389dc   380  ldr x16, pc+92 (addr 0x0000ffff7ab38a38)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab389e0   384  blr x16
0xffff7ab389e4   388  str x0, [jssp, #104]
0xffff7ab389e8   392  ldr x16, pc+88 (addr 0x0000ffff7ab38a40)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab389ec   396  blr x16
0xffff7ab389f0   400  ldr lr, [jssp, #16]
0xffff7ab389f4   404  ldp xzr, fp, [jssp], #24
0xffff7ab389f8   408  b #-0x14c (addr 0xffff7ab388ac)
0xffff7ab389fc   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0xffff7ab38a00   416  d63f03e0       constant
0xffff7ab38a04   420  d503201f       constant
0xffff7ab38a08   424  4ec04259       constant
0xffff7ab38a0c   428  00000000       constant
0xffff7ab38a10   432  20d04241       constant
0xffff7ab38a14   436  00000000       constant
0xffff7ab38a18   440  7ab370c0       constant
0xffff7ab38a1c   444  0000ffff       constant
0xffff7ab38a20   448  7ab378a0       constant
0xffff7ab38a24   452  0000ffff       constant
0xffff7ab38a28   456  7ab38080       constant
0xffff7ab38a2c   460  0000ffff       constant
0xffff7ab38a30   464  7ab06820       constant
0xffff7ab38a34   468  0000ffff       constant
0xffff7ab38a38   472  7ab06260       constant
0xffff7ab38a3c   476  0000ffff       constant
0xffff7ab38a40   480  7ab068e0       constant
0xffff7ab38a44   484  0000ffff       constant
0xffff7ab38a48   488  movz x16, #0x0
0xffff7ab38a4c   492  sub csp, jssp, #0x10 (16)
0xffff7ab38a50   496  stp fp, lr, [jssp, #-16]!
0xffff7ab38a54   500  bl #+0x24 (addr 0xffff7ab38a78)
0xffff7ab38a58   504  movz x16, #0x8
0xffff7ab38a5c   508  sub csp, jssp, #0x10 (16)
0xffff7ab38a60   512  stp fp, lr, [jssp, #-16]!
0xffff7ab38a64   516  bl #+0x14 (addr 0xffff7ab38a78)
0xffff7ab38a68   520  movz x16, #0x10
0xffff7ab38a6c   524  sub csp, jssp, #0x10 (16)
0xffff7ab38a70   528  stp fp, lr, [jssp, #-16]!
0xffff7ab38a74   532  bl #+0x4 (addr 0xffff7ab38a78)
0xffff7ab38a78   536  movz x17, #0xa00000000
0xffff7ab38a7c   540  sub csp, jssp, #0x10 (16)
0xffff7ab38a80   544  stp x17, cp, [jssp, #-16]!
0xffff7ab38a84   548  add fp, jssp, #0x10 (16)
0xffff7ab38a88   552  ldr x17, pc+24 (addr 0x0000ffff7ab38aa0)    ;; lazy deoptimization bailout 0
0xffff7ab38a8c   556  add x17, x17, x16
0xffff7ab38a90   560  br x17
0xffff7ab38a94   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab38a98   568  d63f03e0       constant
0xffff7ab38a9c   572  d503201f       constant
0xffff7ab38aa0   576  7a906000       constant
0xffff7ab38aa4   580  0000ffff       constant


Safepoints (size = 21)
0xffff7ab389e4   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0xffff7ab388ac  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab388c4  embedded object  (0x20d04241 <undefined>)
0xffff7ab38910  code target (STUB)  (0xffff7ab370c0)
0xffff7ab38950  code target (STUB)  (0xffff7ab378a0)
0xffff7ab38988  code target (STUB)  (0xffff7ab38080)
0xffff7ab389b8  code target (STUB)  (0xffff7ab06820)
0xffff7ab389dc  code target (STUB)  (0xffff7ab06260)
0xffff7ab389e8  code target (STUB)  (0xffff7ab068e0)
0xffff7ab389fc  constant pool (size 76)
0xffff7ab38a88  runtime entry
0xffff7ab38a94  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = next
compiler = unknown
Instructions (size = 152)
0xffff7ab38b20     0  sub csp, jssp, #0x8 (8)
0xffff7ab38b24     4  str x3, [jssp, #-8]!
0xffff7ab38b28     8  sub csp, jssp, #0x8 (8)
0xffff7ab38b2c    12  str x4, [jssp, #-8]!
0xffff7ab38b30    16  ldr x3, pc+88 (addr 0x0000ffff7ab38b88)    ;; object: 0x20d57a89 Cell for 0
0xffff7ab38b34    20  ldur x3, [x3, #7]
0xffff7ab38b38    24  cmp x3, #0x0 (0)
0xffff7ab38b3c    28  b.ne #+0x30 (addr 0xffff7ab38b6c)
0xffff7ab38b40    32  tbz w0, #0, #+0x2c (addr 0xffff7ab38b6c)
0xffff7ab38b44    36  ldr x5, pc+76 (addr 0x0000ffff7ab38b90)    ;; object: 0x20d57a99 WeakCell for 0x4ec0b581 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab38b48    40  ldur x5, [x5, #7]
0xffff7ab38b4c    44  tbz w5, #0, #+0x20 (addr 0xffff7ab38b6c)
0xffff7ab38b50    48  ldursw x4, [x5, #15]
0xffff7ab38b54    52  tbnz w4, #23, #+0x18 (addr 0xffff7ab38b6c)
0xffff7ab38b58    56  ldr x4, [jssp], #8
0xffff7ab38b5c    60  ldr x3, [jssp], #8
0xffff7ab38b60    64  ldr x2, pc+56 (addr 0x0000ffff7ab38b98)    ;; object: 0x20d05209 <String[4]: next>
0xffff7ab38b64    68  ldr x16, pc+60 (addr 0x0000ffff7ab38ba0)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0xffff7ab38b68    72  br x16
0xffff7ab38b6c    76  ldr x2, pc+60 (addr 0x0000ffff7ab38ba8)    ;; object: 0x20d05209 <String[4]: next>
0xffff7ab38b70    80  ldr x4, [jssp], #8
0xffff7ab38b74    84  ldr x3, [jssp], #8
0xffff7ab38b78    88  ldr x16, pc+56 (addr 0x0000ffff7ab38bb0)    ;; code: BUILTIN
0xffff7ab38b7c    92  br x16
0xffff7ab38b80    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab38b84   100  d63f03e0       constant
0xffff7ab38b88   104  20d57a89       constant
0xffff7ab38b8c   108  00000000       constant
0xffff7ab38b90   112  20d57a99       constant
0xffff7ab38b94   116  00000000       constant
0xffff7ab38b98   120  20d05209       constant
0xffff7ab38b9c   124  00000000       constant
0xffff7ab38ba0   128  7ab38860       constant
0xffff7ab38ba4   132  0000ffff       constant
0xffff7ab38ba8   136  20d05209       constant
0xffff7ab38bac   140  00000000       constant
0xffff7ab38bb0   144  7ab22420       constant
0xffff7ab38bb4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7ab38b30  embedded object  (0x20d57a89 Cell for 0)
0xffff7ab38b44  embedded object  (0x20d57a99 WeakCell for 0x4ec0b581 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab38b60  embedded object  (0x20d05209 <String[4]: next>)
0xffff7ab38b64  code target (HANDLER)  (0xffff7ab38860)
0xffff7ab38b6c  embedded object  (0x20d05209 <String[4]: next>)
0xffff7ab38b78  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab38b80  constant pool (size 56)

kind = COMPARE_IC
major_key = CompareICStub
ic_state = UNINITIALIZED
extra_ic_state = 0
compare_state = UNINITIALIZED*UNINITIALIZED -> UNINITIALIZED
compare_operation = LT
name = CompareICStub
compiler = unknown
Instructions (size = 136)
0xffff7ab38c20     0  movz x16, #0xc00000000
0xffff7ab38c24     4  sub csp, jssp, #0x10 (16)
0xffff7ab38c28     8  stp fp, lr, [jssp, #-16]!
0xffff7ab38c2c    12  sub csp, jssp, #0x10 (16)
0xffff7ab38c30    16  str x16, [jssp, #-8]!
0xffff7ab38c34    20  ldr x17, pc+92 (addr 0x0000ffff7ab38c90)    ;; object: 0xffff7ab38bc1 <Code: COMPARE_IC>
0xffff7ab38c38    24  sub csp, jssp, #0x10 (16)
0xffff7ab38c3c    28  str x17, [jssp, #-8]!
0xffff7ab38c40    32  add fp, jssp, #0x10 (16)
0xffff7ab38c44    36  sub csp, jssp, #0x18 (24)
0xffff7ab38c48    40  stp lr, x0, [jssp, #-24]!
0xffff7ab38c4c    44  str x1, [jssp, #16]
0xffff7ab38c50    48  movz x10, #0x3100000000
0xffff7ab38c54    52  sub csp, jssp, #0x18 (24)
0xffff7ab38c58    56  stp x10, x0, [jssp, #-24]!
0xffff7ab38c5c    60  str x1, [jssp, #16]
0xffff7ab38c60    64  movz x0, #0x3
0xffff7ab38c64    68  ldr x1, pc+52 (addr 0x0000ffff7ab38c98)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ab38c68    72  ldr x16, pc+56 (addr 0x0000ffff7ab38ca0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab38c6c    76  blr x16
0xffff7ab38c70    80  add x11, x0, #0x5f (95)
0xffff7ab38c74    84  ldr x1, [jssp, #16]
0xffff7ab38c78    88  ldp lr, x0, [jssp], #24
0xffff7ab38c7c    92  mov jssp, fp
0xffff7ab38c80    96  ldp fp, lr, [jssp], #16
0xffff7ab38c84   100  br x11
0xffff7ab38c88   104  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab38c8c   108  d63f03e0       constant
0xffff7ab38c90   112  7ab38bc1       constant
0xffff7ab38c94   116  0000ffff       constant
0xffff7ab38c98   120  00c8a980       constant
0xffff7ab38c9c   124  00000000       constant
0xffff7ab38ca0   128  7ab06060       constant
0xffff7ab38ca4   132  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab38c34  embedded object  (0xffff7ab38bc1 <Code: COMPARE_IC>)
0xffff7ab38c64  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ab38c68  code target (STUB)  (0xffff7ab06060)
0xffff7ab38c88  constant pool (size 32)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = SMI*SMI -> SMI
compare_operation = LT
name = CompareICStub
compiler = unknown
Instructions (size = 160)
0xffff7ab39120     0  orr x16, x0, x1
0xffff7ab39124     4  tbnz w16, #0, #+0x10 (addr 0xffff7ab39134)
0xffff7ab39128     8  asr x1, x1, #32
0xffff7ab3912c    12  sub x0, x1, x0, asr #32
0xffff7ab39130    16  ret
0xffff7ab39134    20  movz x16, #0xc00000000
0xffff7ab39138    24  sub csp, jssp, #0x10 (16)
0xffff7ab3913c    28  stp fp, lr, [jssp, #-16]!
0xffff7ab39140    32  sub csp, jssp, #0x10 (16)
0xffff7ab39144    36  str x16, [jssp, #-8]!
0xffff7ab39148    40  ldr x17, pc+96 (addr 0x0000ffff7ab391a8)    ;; object: 0xffff7ab390c1 <Code: COMPARE_IC>
0xffff7ab3914c    44  sub csp, jssp, #0x10 (16)
0xffff7ab39150    48  str x17, [jssp, #-8]!
0xffff7ab39154    52  add fp, jssp, #0x10 (16)
0xffff7ab39158    56  sub csp, jssp, #0x18 (24)
0xffff7ab3915c    60  stp lr, x0, [jssp, #-24]!
0xffff7ab39160    64  str x1, [jssp, #16]
0xffff7ab39164    68  movz x10, #0x3100000000
0xffff7ab39168    72  sub csp, jssp, #0x18 (24)
0xffff7ab3916c    76  stp x10, x0, [jssp, #-24]!
0xffff7ab39170    80  str x1, [jssp, #16]
0xffff7ab39174    84  movz x0, #0x3
0xffff7ab39178    88  ldr x1, pc+56 (addr 0x0000ffff7ab391b0)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ab3917c    92  ldr x16, pc+60 (addr 0x0000ffff7ab391b8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab39180    96  blr x16
0xffff7ab39184   100  add x11, x0, #0x5f (95)
0xffff7ab39188   104  ldr x1, [jssp, #16]
0xffff7ab3918c   108  ldp lr, x0, [jssp], #24
0xffff7ab39190   112  mov jssp, fp
0xffff7ab39194   116  ldp fp, lr, [jssp], #16
0xffff7ab39198   120  br x11
0xffff7ab3919c   124  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab391a0   128  d63f03e0       constant
0xffff7ab391a4   132  d503201f       constant
0xffff7ab391a8   136  7ab390c1       constant
0xffff7ab391ac   140  0000ffff       constant
0xffff7ab391b0   144  00c8a980       constant
0xffff7ab391b4   148  00000000       constant
0xffff7ab391b8   152  7ab06060       constant
0xffff7ab391bc   156  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab39148  embedded object  (0xffff7ab390c1 <Code: COMPARE_IC>)
0xffff7ab39178  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ab3917c  code target (STUB)  (0xffff7ab06060)
0xffff7ab3919c  constant pool (size 36)


kind = HANDLER
major_key = LoadFastElementStub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 168)
0xffff7ab39220     0  ldur x4, [x1, #15]
0xffff7ab39224     4  ldur w5, [x1, #27]
0xffff7ab39228     8  tbnz w2, #0, #+0x20 (addr 0xffff7ab39248)
0xffff7ab3922c    12  asr x7, x2, #32
0xffff7ab39230    16  cmp w7, w5
0xffff7ab39234    20  b.hs #+0x3c (addr 0xffff7ab39270)
0xffff7ab39238    24  add x0, x4, #0xf (15)
0xffff7ab3923c    28  ldr x1, [x0, w7, sxtw #3]
0xffff7ab39240    32  mov x0, x1
0xffff7ab39244    36  ret
0xffff7ab39248    40  ldur x16, [x2, #-1]
0xffff7ab3924c    44  ldr x17, [x26, #120]
0xffff7ab39250    48  cmp x16, x17
0xffff7ab39254    52  b.ne #+0x2c (addr 0xffff7ab39280)
0xffff7ab39258    56  ldur d29, [x2, #7]
0xffff7ab3925c    60  fcvtzs w7, d29
0xffff7ab39260    64  scvtf d0, w7
0xffff7ab39264    68  fcmp d29, d0
0xffff7ab39268    72  b.ne #+0x18 (addr 0xffff7ab39280)
0xffff7ab3926c    76  b #-0x3c (addr 0xffff7ab39230)
0xffff7ab39270    80  movz x16, #0x0
0xffff7ab39274    84  sub csp, jssp, #0x10 (16)
0xffff7ab39278    88  stp fp, lr, [jssp, #-16]!
0xffff7ab3927c    92  bl #+0x14 (addr 0xffff7ab39290)
0xffff7ab39280    96  movz x16, #0x8
0xffff7ab39284   100  sub csp, jssp, #0x10 (16)
0xffff7ab39288   104  stp fp, lr, [jssp, #-16]!
0xffff7ab3928c   108  bl #+0x4 (addr 0xffff7ab39290)
0xffff7ab39290   112  movz x17, #0xa00000000
0xffff7ab39294   116  sub csp, jssp, #0x10 (16)
0xffff7ab39298   120  stp x17, cp, [jssp, #-16]!
0xffff7ab3929c   124  add fp, jssp, #0x10 (16)
0xffff7ab392a0   128  ldr x17, pc+24 (addr 0x0000ffff7ab392b8)    ;; lazy deoptimization bailout 0
0xffff7ab392a4   132  add x17, x17, x16
0xffff7ab392a8   136  br x17
0xffff7ab392ac   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab392b0   144  d63f03e0       constant
0xffff7ab392b4   148  d503201f       constant
0xffff7ab392b8   152  7a906000       constant
0xffff7ab392bc   156  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab392a0  runtime entry
0xffff7ab392ac  constant pool (size 20)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0xffff7ab39340     0  ldur x0, [x1, #23]
0xffff7ab39344     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 393218
name = CallICStub(args(2), ANY, 
compiler = unknown
Instructions (size = 488)
0xffff7ab393c0     0  add x4, x2, x3, asr #29
0xffff7ab393c4     4  ldur x4, [x4, #15]
0xffff7ab393c8     8  ldur x5, [x4, #7]
0xffff7ab393cc    12  cmp x5, x1
0xffff7ab393d0    16  b.ne #+0x2c (addr 0xffff7ab393fc)
0xffff7ab393d4    20  tbz w1, #0, #+0x28 (addr 0xffff7ab393fc)
0xffff7ab393d8    24  add x2, x2, x3, asr #29
0xffff7ab393dc    28  add x2, x2, #0x18 (24)
0xffff7ab393e0    32  ldur x3, [x2, #-1]
0xffff7ab393e4    36  movz x16, #0x200000000
0xffff7ab393e8    40  add x3, x3, x16
0xffff7ab393ec    44  stur x3, [x2, #-1]
0xffff7ab393f0    48  movz x0, #0x2
0xffff7ab393f4    52  ldr x16, pc+372 (addr 0x0000ffff7ab39568)    ;; code: BUILTIN
0xffff7ab393f8    56  br x16
0xffff7ab393fc    60  ldr x16, [x26, #2400]
0xffff7ab39400    64  cmp x4, x16
0xffff7ab39404    68  b.eq #+0x78 (addr 0xffff7ab3947c)
0xffff7ab39408    72  ldur x5, [x4, #-1]
0xffff7ab3940c    76  ldr x16, [x26, #2736]
0xffff7ab39410    80  cmp x5, x16
0xffff7ab39414    84  b.ne #+0x40 (addr 0xffff7ab39454)
0xffff7ab39418    88  ldur x5, [cp, #39]
0xffff7ab3941c    92  ldur x5, [x5, #95]
0xffff7ab39420    96  cmp x1, x5
0xffff7ab39424   100  b.ne #+0xec (addr 0xffff7ab39510)
0xffff7ab39428   104  movz x0, #0x2
0xffff7ab3942c   108  add x2, x2, x3, asr #29
0xffff7ab39430   112  add x2, x2, #0x18 (24)
0xffff7ab39434   116  ldur x3, [x2, #-1]
0xffff7ab39438   120  movz x16, #0x200000000
0xffff7ab3943c   124  add x3, x3, x16
0xffff7ab39440   128  stur x3, [x2, #-1]
0xffff7ab39444   132  mov x2, x4
0xffff7ab39448   136  mov x3, x1
0xffff7ab3944c   140  ldr x16, pc+292 (addr 0x0000ffff7ab39570)    ;; code: STUB, ArrayConstructorStub, minor: 3
0xffff7ab39450   144  br x16
0xffff7ab39454   148  ldr x16, [x26, #2568]
0xffff7ab39458   152  cmp x4, x16
0xffff7ab3945c   156  b.eq #+0xb4 (addr 0xffff7ab39510)
0xffff7ab39460   160  ldur x5, [x4, #-1]
0xffff7ab39464   164  ldrb w5, [x5, #11]
0xffff7ab39468   168  cmp x5, #0xc9 (201)
0xffff7ab3946c   172  b.ne #+0xa4 (addr 0xffff7ab39510)
0xffff7ab39470   176  add x4, x2, x3, asr #29
0xffff7ab39474   180  ldr x5, [x26, #2400]
0xffff7ab39478   184  stur x5, [x4, #15]
0xffff7ab3947c   188  movz x0, #0x2
0xffff7ab39480   192  ldr x16, pc+248 (addr 0x0000ffff7ab39578)    ;; code: BUILTIN
0xffff7ab39484   196  br x16
0xffff7ab39488   200  tbz w1, #0, #+0x88 (addr 0xffff7ab39510)
0xffff7ab3948c   204  ldur x5, [x1, #-1]
0xffff7ab39490   208  ldrb w5, [x5, #11]
0xffff7ab39494   212  cmp x5, #0xc9 (201)
0xffff7ab39498   216  b.ne #+0x78 (addr 0xffff7ab39510)
0xffff7ab3949c   220  ldur x5, [cp, #39]
0xffff7ab394a0   224  ldur x5, [x5, #95]
0xffff7ab394a4   228  cmp x1, x5
0xffff7ab394a8   232  b.eq #+0x68 (addr 0xffff7ab39510)
0xffff7ab394ac   236  ldur x4, [x1, #39]
0xffff7ab394b0   240  ldur x4, [x4, #39]
0xffff7ab394b4   244  ldur x5, [cp, #39]
0xffff7ab394b8   248  cmp x4, x5
0xffff7ab394bc   252  b.ne #+0x54 (addr 0xffff7ab39510)
0xffff7ab394c0   256  movz x5, #0x200000000
0xffff7ab394c4   260  adds x4, x2, x3, asr #29
0xffff7ab394c8   264  stur x5, [x4, #23]
0xffff7ab394cc   268  movz x16, #0xc00000000
0xffff7ab394d0   272  sub csp, jssp, #0x10 (16)
0xffff7ab394d4   276  stp fp, lr, [jssp, #-16]!
0xffff7ab394d8   280  sub csp, jssp, #0x10 (16)
0xffff7ab394dc   284  str x16, [jssp, #-8]!
0xffff7ab394e0   288  ldr x17, pc+160 (addr 0x0000ffff7ab39580)    ;; object: 0xffff7ab39361 <Code: CALL_IC>
0xffff7ab394e4   292  sub csp, jssp, #0x10 (16)
0xffff7ab394e8   296  str x17, [jssp, #-8]!
0xffff7ab394ec   300  add fp, jssp, #0x10 (16)
0xffff7ab394f0   304  sub csp, jssp, #0x8 (8)
0xffff7ab394f4   308  str x1, [jssp, #-8]!
0xffff7ab394f8   312  ldr x16, pc+144 (addr 0x0000ffff7ab39588)    ;; code: STUB, CreateWeakCellStub, minor: 0
0xffff7ab394fc   316  blr x16
0xffff7ab39500   320  ldr x1, [jssp], #8
0xffff7ab39504   324  mov jssp, fp
0xffff7ab39508   328  ldp fp, lr, [jssp], #16
0xffff7ab3950c   332  b #-0x11c (addr 0xffff7ab393f0)
0xffff7ab39510   336  movz x16, #0xc00000000
0xffff7ab39514   340  sub csp, jssp, #0x10 (16)
0xffff7ab39518   344  stp fp, lr, [jssp, #-16]!
0xffff7ab3951c   348  sub csp, jssp, #0x10 (16)
0xffff7ab39520   352  str x16, [jssp, #-8]!
0xffff7ab39524   356  ldr x17, pc+108 (addr 0x0000ffff7ab39590)    ;; object: 0xffff7ab39361 <Code: CALL_IC>
0xffff7ab39528   360  sub csp, jssp, #0x10 (16)
0xffff7ab3952c   364  str x17, [jssp, #-8]!
0xffff7ab39530   368  add fp, jssp, #0x10 (16)
0xffff7ab39534   372  sub csp, jssp, #0x18 (24)
0xffff7ab39538   376  stp x3, x2, [jssp, #-24]!
0xffff7ab3953c   380  str x1, [jssp, #16]
0xffff7ab39540   384  movz x0, #0x3
0xffff7ab39544   388  ldr x1, pc+84 (addr 0x0000ffff7ab39598)    ;; external reference (Runtime::CallIC_Miss)
0xffff7ab39548   392  ldr x16, pc+88 (addr 0x0000ffff7ab395a0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab3954c   396  blr x16
0xffff7ab39550   400  mov x1, x0
0xffff7ab39554   404  mov jssp, fp
0xffff7ab39558   408  ldp fp, lr, [jssp], #16
0xffff7ab3955c   412  b #-0xe0 (addr 0xffff7ab3947c)
0xffff7ab39560   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7ab39564   420  d63f03e0       constant
0xffff7ab39568   424  7ab1e820       constant
0xffff7ab3956c   428  0000ffff       constant
0xffff7ab39570   432  7ab33b00       constant
0xffff7ab39574   436  0000ffff       constant
0xffff7ab39578   440  7ab1f820       constant
0xffff7ab3957c   444  0000ffff       constant
0xffff7ab39580   448  7ab39361       constant
0xffff7ab39584   452  0000ffff       constant
0xffff7ab39588   456  7ab0ddc0       constant
0xffff7ab3958c   460  0000ffff       constant
0xffff7ab39590   464  7ab39361       constant
0xffff7ab39594   468  0000ffff       constant
0xffff7ab39598   472  00c86928       constant
0xffff7ab3959c   476  00000000       constant
0xffff7ab395a0   480  7ab06060       constant
0xffff7ab395a4   484  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab393f4  code target (BUILTIN)  (0xffff7ab1e820)
0xffff7ab3944c  code target (STUB)  (0xffff7ab33b00)
0xffff7ab39480  code target (BUILTIN)  (0xffff7ab1f820)
0xffff7ab394e0  embedded object  (0xffff7ab39361 <Code: CALL_IC>)
0xffff7ab394f8  code target (STUB)  (0xffff7ab0ddc0)
0xffff7ab39524  embedded object  (0xffff7ab39361 <Code: CALL_IC>)
0xffff7ab39544  external reference (Runtime::CallIC_Miss)  (0xc86928)
0xffff7ab39548  code target (STUB)  (0xffff7ab06060)
0xffff7ab39560  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 393218
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0xffff7ab39620     0  ldur x2, [fp, #-16]
0xffff7ab39624     4  ldur x2, [x2, #31]
0xffff7ab39628     8  ldur x2, [x2, #87]
0xffff7ab3962c    12  ldr x16, pc+20 (addr 0x0000ffff7ab39640)    ;; code: CALL_IC, GENERIC
0xffff7ab39630    16  br x16
0xffff7ab39634    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab39638    24  d63f03e0       constant
0xffff7ab3963c    28  d503201f       constant
0xffff7ab39640    32  7ab393c0       constant
0xffff7ab39644    36  0000ffff       constant


RelocInfo (size = 7)
0xffff7ab3962c  code target (CALL_IC)  (0xffff7ab393c0)
0xffff7ab39634  constant pool (size 20)


kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = UNINITIALIZED
extra_ic_state = 0
name = ToBooleanICStub(None)
compiler = unknown
Instructions (size = 104)
0xffff7ab39e00     0  movz x16, #0xc00000000
0xffff7ab39e04     4  sub csp, jssp, #0x10 (16)
0xffff7ab39e08     8  stp fp, lr, [jssp, #-16]!
0xffff7ab39e0c    12  sub csp, jssp, #0x10 (16)
0xffff7ab39e10    16  str x16, [jssp, #-8]!
0xffff7ab39e14    20  ldr x17, pc+60 (addr 0x0000ffff7ab39e50)    ;; object: 0xffff7ab39da1 <Code: TO_BOOLEAN_IC>
0xffff7ab39e18    24  sub csp, jssp, #0x10 (16)
0xffff7ab39e1c    28  str x17, [jssp, #-8]!
0xffff7ab39e20    32  add fp, jssp, #0x10 (16)
0xffff7ab39e24    36  sub csp, jssp, #0x8 (8)
0xffff7ab39e28    40  str x0, [jssp, #-8]!
0xffff7ab39e2c    44  movz x0, #0x1
0xffff7ab39e30    48  ldr x1, pc+40 (addr 0x0000ffff7ab39e58)    ;; external reference (Runtime::ToBooleanIC_Miss)
0xffff7ab39e34    52  ldr x16, pc+44 (addr 0x0000ffff7ab39e60)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab39e38    56  blr x16
0xffff7ab39e3c    60  mov jssp, fp
0xffff7ab39e40    64  ldp fp, lr, [jssp], #16
0xffff7ab39e44    68  ret
0xffff7ab39e48    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab39e4c    76  d63f03e0       constant
0xffff7ab39e50    80  7ab39da1       constant
0xffff7ab39e54    84  0000ffff       constant
0xffff7ab39e58    88  00c8b000       constant
0xffff7ab39e5c    92  00000000       constant
0xffff7ab39e60    96  7ab06060       constant
0xffff7ab39e64   100  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab39e14  embedded object  (0xffff7ab39da1 <Code: TO_BOOLEAN_IC>)
0xffff7ab39e30  external reference (Runtime::ToBooleanIC_Miss)  (0xc8b000)
0xffff7ab39e34  code target (STUB)  (0xffff7ab06060)
0xffff7ab39e48  constant pool (size 32)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = UNINITIALIZED
extra_ic_state = 0
compare_state = UNINITIALIZED*UNINITIALIZED -> UNINITIALIZED
compare_operation = GTE
name = CompareICStub
compiler = unknown
Instructions (size = 136)
0xffff7ab39ee0     0  movz x16, #0xc00000000
0xffff7ab39ee4     4  sub csp, jssp, #0x10 (16)
0xffff7ab39ee8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab39eec    12  sub csp, jssp, #0x10 (16)
0xffff7ab39ef0    16  str x16, [jssp, #-8]!
0xffff7ab39ef4    20  ldr x17, pc+92 (addr 0x0000ffff7ab39f50)    ;; object: 0xffff7ab39e81 <Code: COMPARE_IC>
0xffff7ab39ef8    24  sub csp, jssp, #0x10 (16)
0xffff7ab39efc    28  str x17, [jssp, #-8]!
0xffff7ab39f00    32  add fp, jssp, #0x10 (16)
0xffff7ab39f04    36  sub csp, jssp, #0x18 (24)
0xffff7ab39f08    40  stp lr, x0, [jssp, #-24]!
0xffff7ab39f0c    44  str x1, [jssp, #16]
0xffff7ab39f10    48  movz x10, #0x3400000000
0xffff7ab39f14    52  sub csp, jssp, #0x18 (24)
0xffff7ab39f18    56  stp x10, x0, [jssp, #-24]!
0xffff7ab39f1c    60  str x1, [jssp, #16]
0xffff7ab39f20    64  movz x0, #0x3
0xffff7ab39f24    68  ldr x1, pc+52 (addr 0x0000ffff7ab39f58)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ab39f28    72  ldr x16, pc+56 (addr 0x0000ffff7ab39f60)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab39f2c    76  blr x16
0xffff7ab39f30    80  add x11, x0, #0x5f (95)
0xffff7ab39f34    84  ldr x1, [jssp, #16]
0xffff7ab39f38    88  ldp lr, x0, [jssp], #24
0xffff7ab39f3c    92  mov jssp, fp
0xffff7ab39f40    96  ldp fp, lr, [jssp], #16
0xffff7ab39f44   100  br x11
0xffff7ab39f48   104  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab39f4c   108  d63f03e0       constant
0xffff7ab39f50   112  7ab39e81       constant
0xffff7ab39f54   116  0000ffff       constant
0xffff7ab39f58   120  00c8a980       constant
0xffff7ab39f5c   124  00000000       constant
0xffff7ab39f60   128  7ab06060       constant
0xffff7ab39f64   132  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab39ef4  embedded object  (0xffff7ab39e81 <Code: COMPARE_IC>)
0xffff7ab39f24  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ab39f28  code target (STUB)  (0xffff7ab06060)
0xffff7ab39f48  constant pool (size 32)


kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 16
type = NORMAL
name = ToBooleanICStub(SpecObject)
compiler = crankshaft
Instructions (size = 144)
0xffff7ab3a6e0     0  tbz w0, #0, #+0x48 (addr 0xffff7ab3a728)
0xffff7ab3a6e4     4  ldur x2, [x0, #-1]
0xffff7ab3a6e8     8  ldrb w1, [x2, #12]
0xffff7ab3a6ec    12  tbnz w1, #4, #+0x14 (addr 0xffff7ab3a700)
0xffff7ab3a6f0    16  ldrb w1, [x2, #11]
0xffff7ab3a6f4    20  cmp x1, #0xb1 (177)
0xffff7ab3a6f8    24  b.ge #+0x10 (addr 0xffff7ab3a708)
0xffff7ab3a6fc    28  b #+0x2c (addr 0xffff7ab3a728)
0xffff7ab3a700    32  ldr x0, pc+24 (addr 0x0000ffff7ab3a718)    ;; object: 0x20d042b1 <false>
0xffff7ab3a704    36  ret
0xffff7ab3a708    40  ldr x0, pc+24 (addr 0x0000ffff7ab3a720)    ;; object: 0x20d04281 <true>
0xffff7ab3a70c    44  ret
0xffff7ab3a710    48  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab3a714    52  d63f03e0       constant
0xffff7ab3a718    56  20d042b1       constant
0xffff7ab3a71c    60  00000000       constant
0xffff7ab3a720    64  20d04281       constant
0xffff7ab3a724    68  00000000       constant
0xffff7ab3a728    72  movz x16, #0x0
0xffff7ab3a72c    76  sub csp, jssp, #0x10 (16)
0xffff7ab3a730    80  stp fp, lr, [jssp, #-16]!
0xffff7ab3a734    84  bl #+0x4 (addr 0xffff7ab3a738)
0xffff7ab3a738    88  movz x17, #0xa00000000
0xffff7ab3a73c    92  sub csp, jssp, #0x10 (16)
0xffff7ab3a740    96  stp x17, cp, [jssp, #-16]!
0xffff7ab3a744   100  add fp, jssp, #0x10 (16)
0xffff7ab3a748   104  ldr x17, pc+24 (addr 0x0000ffff7ab3a760)    ;; lazy deoptimization bailout 0
0xffff7ab3a74c   108  add x17, x17, x16
0xffff7ab3a750   112  br x17
0xffff7ab3a754   116  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab3a758   120  d63f03e0       constant
0xffff7ab3a75c   124  d503201f       constant
0xffff7ab3a760   128  7a906000       constant
0xffff7ab3a764   132  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab3a700  embedded object  (0x20d042b1 <false>)
0xffff7ab3a708  embedded object  (0x20d04281 <true>)
0xffff7ab3a710  constant pool (size 24)
0xffff7ab3a748  runtime entry
0xffff7ab3a754  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = SMI*SMI -> SMI
compare_operation = GTE
name = CompareICStub
compiler = unknown
Instructions (size = 160)
0xffff7ab3a7e0     0  orr x16, x0, x1
0xffff7ab3a7e4     4  tbnz w16, #0, #+0x10 (addr 0xffff7ab3a7f4)
0xffff7ab3a7e8     8  asr x1, x1, #32
0xffff7ab3a7ec    12  sub x0, x1, x0, asr #32
0xffff7ab3a7f0    16  ret
0xffff7ab3a7f4    20  movz x16, #0xc00000000
0xffff7ab3a7f8    24  sub csp, jssp, #0x10 (16)
0xffff7ab3a7fc    28  stp fp, lr, [jssp, #-16]!
0xffff7ab3a800    32  sub csp, jssp, #0x10 (16)
0xffff7ab3a804    36  str x16, [jssp, #-8]!
0xffff7ab3a808    40  ldr x17, pc+96 (addr 0x0000ffff7ab3a868)    ;; object: 0xffff7ab3a781 <Code: COMPARE_IC>
0xffff7ab3a80c    44  sub csp, jssp, #0x10 (16)
0xffff7ab3a810    48  str x17, [jssp, #-8]!
0xffff7ab3a814    52  add fp, jssp, #0x10 (16)
0xffff7ab3a818    56  sub csp, jssp, #0x18 (24)
0xffff7ab3a81c    60  stp lr, x0, [jssp, #-24]!
0xffff7ab3a820    64  str x1, [jssp, #16]
0xffff7ab3a824    68  movz x10, #0x3400000000
0xffff7ab3a828    72  sub csp, jssp, #0x18 (24)
0xffff7ab3a82c    76  stp x10, x0, [jssp, #-24]!
0xffff7ab3a830    80  str x1, [jssp, #16]
0xffff7ab3a834    84  movz x0, #0x3
0xffff7ab3a838    88  ldr x1, pc+56 (addr 0x0000ffff7ab3a870)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ab3a83c    92  ldr x16, pc+60 (addr 0x0000ffff7ab3a878)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab3a840    96  blr x16
0xffff7ab3a844   100  add x11, x0, #0x5f (95)
0xffff7ab3a848   104  ldr x1, [jssp, #16]
0xffff7ab3a84c   108  ldp lr, x0, [jssp], #24
0xffff7ab3a850   112  mov jssp, fp
0xffff7ab3a854   116  ldp fp, lr, [jssp], #16
0xffff7ab3a858   120  br x11
0xffff7ab3a85c   124  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab3a860   128  d63f03e0       constant
0xffff7ab3a864   132  d503201f       constant
0xffff7ab3a868   136  7ab3a781       constant
0xffff7ab3a86c   140  0000ffff       constant
0xffff7ab3a870   144  00c8a980       constant
0xffff7ab3a874   148  00000000       constant
0xffff7ab3a878   152  7ab06060       constant
0xffff7ab3a87c   156  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab3a808  embedded object  (0xffff7ab3a781 <Code: COMPARE_IC>)
0xffff7ab3a838  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ab3a83c  code target (STUB)  (0xffff7ab06060)
0xffff7ab3a85c  constant pool (size 36)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = UNINITIALIZED
extra_ic_state = 0
compare_state = UNINITIALIZED*UNINITIALIZED -> UNINITIALIZED
compare_operation = EQ
name = CompareICStub
compiler = unknown
Instructions (size = 136)
0xffff7ab3a8e0     0  movz x16, #0xc00000000
0xffff7ab3a8e4     4  sub csp, jssp, #0x10 (16)
0xffff7ab3a8e8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab3a8ec    12  sub csp, jssp, #0x10 (16)
0xffff7ab3a8f0    16  str x16, [jssp, #-8]!
0xffff7ab3a8f4    20  ldr x17, pc+92 (addr 0x0000ffff7ab3a950)    ;; object: 0xffff7ab3a881 <Code: COMPARE_IC>
0xffff7ab3a8f8    24  sub csp, jssp, #0x10 (16)
0xffff7ab3a8fc    28  str x17, [jssp, #-8]!
0xffff7ab3a900    32  add fp, jssp, #0x10 (16)
0xffff7ab3a904    36  sub csp, jssp, #0x18 (24)
0xffff7ab3a908    40  stp lr, x0, [jssp, #-24]!
0xffff7ab3a90c    44  str x1, [jssp, #16]
0xffff7ab3a910    48  movz x10, #0x2d00000000
0xffff7ab3a914    52  sub csp, jssp, #0x18 (24)
0xffff7ab3a918    56  stp x10, x0, [jssp, #-24]!
0xffff7ab3a91c    60  str x1, [jssp, #16]
0xffff7ab3a920    64  movz x0, #0x3
0xffff7ab3a924    68  ldr x1, pc+52 (addr 0x0000ffff7ab3a958)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ab3a928    72  ldr x16, pc+56 (addr 0x0000ffff7ab3a960)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab3a92c    76  blr x16
0xffff7ab3a930    80  add x11, x0, #0x5f (95)
0xffff7ab3a934    84  ldr x1, [jssp, #16]
0xffff7ab3a938    88  ldp lr, x0, [jssp], #24
0xffff7ab3a93c    92  mov jssp, fp
0xffff7ab3a940    96  ldp fp, lr, [jssp], #16
0xffff7ab3a944   100  br x11
0xffff7ab3a948   104  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab3a94c   108  d63f03e0       constant
0xffff7ab3a950   112  7ab3a881       constant
0xffff7ab3a954   116  0000ffff       constant
0xffff7ab3a958   120  00c8a980       constant
0xffff7ab3a95c   124  00000000       constant
0xffff7ab3a960   128  7ab06060       constant
0xffff7ab3a964   132  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab3a8f4  embedded object  (0xffff7ab3a881 <Code: COMPARE_IC>)
0xffff7ab3a924  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ab3a928  code target (STUB)  (0xffff7ab06060)
0xffff7ab3a948  constant pool (size 32)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 393219
name = CallICStub(args(3), ANY, 
compiler = unknown
Instructions (size = 488)
0xffff7ab3ac00     0  add x4, x2, x3, asr #29
0xffff7ab3ac04     4  ldur x4, [x4, #15]
0xffff7ab3ac08     8  ldur x5, [x4, #7]
0xffff7ab3ac0c    12  cmp x5, x1
0xffff7ab3ac10    16  b.ne #+0x2c (addr 0xffff7ab3ac3c)
0xffff7ab3ac14    20  tbz w1, #0, #+0x28 (addr 0xffff7ab3ac3c)
0xffff7ab3ac18    24  add x2, x2, x3, asr #29
0xffff7ab3ac1c    28  add x2, x2, #0x18 (24)
0xffff7ab3ac20    32  ldur x3, [x2, #-1]
0xffff7ab3ac24    36  movz x16, #0x200000000
0xffff7ab3ac28    40  add x3, x3, x16
0xffff7ab3ac2c    44  stur x3, [x2, #-1]
0xffff7ab3ac30    48  movz x0, #0x3
0xffff7ab3ac34    52  ldr x16, pc+372 (addr 0x0000ffff7ab3ada8)    ;; code: BUILTIN
0xffff7ab3ac38    56  br x16
0xffff7ab3ac3c    60  ldr x16, [x26, #2400]
0xffff7ab3ac40    64  cmp x4, x16
0xffff7ab3ac44    68  b.eq #+0x78 (addr 0xffff7ab3acbc)
0xffff7ab3ac48    72  ldur x5, [x4, #-1]
0xffff7ab3ac4c    76  ldr x16, [x26, #2736]
0xffff7ab3ac50    80  cmp x5, x16
0xffff7ab3ac54    84  b.ne #+0x40 (addr 0xffff7ab3ac94)
0xffff7ab3ac58    88  ldur x5, [cp, #39]
0xffff7ab3ac5c    92  ldur x5, [x5, #95]
0xffff7ab3ac60    96  cmp x1, x5
0xffff7ab3ac64   100  b.ne #+0xec (addr 0xffff7ab3ad50)
0xffff7ab3ac68   104  movz x0, #0x3
0xffff7ab3ac6c   108  add x2, x2, x3, asr #29
0xffff7ab3ac70   112  add x2, x2, #0x18 (24)
0xffff7ab3ac74   116  ldur x3, [x2, #-1]
0xffff7ab3ac78   120  movz x16, #0x200000000
0xffff7ab3ac7c   124  add x3, x3, x16
0xffff7ab3ac80   128  stur x3, [x2, #-1]
0xffff7ab3ac84   132  mov x2, x4
0xffff7ab3ac88   136  mov x3, x1
0xffff7ab3ac8c   140  ldr x16, pc+292 (addr 0x0000ffff7ab3adb0)    ;; code: STUB, ArrayConstructorStub, minor: 3
0xffff7ab3ac90   144  br x16
0xffff7ab3ac94   148  ldr x16, [x26, #2568]
0xffff7ab3ac98   152  cmp x4, x16
0xffff7ab3ac9c   156  b.eq #+0xb4 (addr 0xffff7ab3ad50)
0xffff7ab3aca0   160  ldur x5, [x4, #-1]
0xffff7ab3aca4   164  ldrb w5, [x5, #11]
0xffff7ab3aca8   168  cmp x5, #0xc9 (201)
0xffff7ab3acac   172  b.ne #+0xa4 (addr 0xffff7ab3ad50)
0xffff7ab3acb0   176  add x4, x2, x3, asr #29
0xffff7ab3acb4   180  ldr x5, [x26, #2400]
0xffff7ab3acb8   184  stur x5, [x4, #15]
0xffff7ab3acbc   188  movz x0, #0x3
0xffff7ab3acc0   192  ldr x16, pc+248 (addr 0x0000ffff7ab3adb8)    ;; code: BUILTIN
0xffff7ab3acc4   196  br x16
0xffff7ab3acc8   200  tbz w1, #0, #+0x88 (addr 0xffff7ab3ad50)
0xffff7ab3accc   204  ldur x5, [x1, #-1]
0xffff7ab3acd0   208  ldrb w5, [x5, #11]
0xffff7ab3acd4   212  cmp x5, #0xc9 (201)
0xffff7ab3acd8   216  b.ne #+0x78 (addr 0xffff7ab3ad50)
0xffff7ab3acdc   220  ldur x5, [cp, #39]
0xffff7ab3ace0   224  ldur x5, [x5, #95]
0xffff7ab3ace4   228  cmp x1, x5
0xffff7ab3ace8   232  b.eq #+0x68 (addr 0xffff7ab3ad50)
0xffff7ab3acec   236  ldur x4, [x1, #39]
0xffff7ab3acf0   240  ldur x4, [x4, #39]
0xffff7ab3acf4   244  ldur x5, [cp, #39]
0xffff7ab3acf8   248  cmp x4, x5
0xffff7ab3acfc   252  b.ne #+0x54 (addr 0xffff7ab3ad50)
0xffff7ab3ad00   256  movz x5, #0x200000000
0xffff7ab3ad04   260  adds x4, x2, x3, asr #29
0xffff7ab3ad08   264  stur x5, [x4, #23]
0xffff7ab3ad0c   268  movz x16, #0xc00000000
0xffff7ab3ad10   272  sub csp, jssp, #0x10 (16)
0xffff7ab3ad14   276  stp fp, lr, [jssp, #-16]!
0xffff7ab3ad18   280  sub csp, jssp, #0x10 (16)
0xffff7ab3ad1c   284  str x16, [jssp, #-8]!
0xffff7ab3ad20   288  ldr x17, pc+160 (addr 0x0000ffff7ab3adc0)    ;; object: 0xffff7ab3aba1 <Code: CALL_IC>
0xffff7ab3ad24   292  sub csp, jssp, #0x10 (16)
0xffff7ab3ad28   296  str x17, [jssp, #-8]!
0xffff7ab3ad2c   300  add fp, jssp, #0x10 (16)
0xffff7ab3ad30   304  sub csp, jssp, #0x8 (8)
0xffff7ab3ad34   308  str x1, [jssp, #-8]!
0xffff7ab3ad38   312  ldr x16, pc+144 (addr 0x0000ffff7ab3adc8)    ;; code: STUB, CreateWeakCellStub, minor: 0
0xffff7ab3ad3c   316  blr x16
0xffff7ab3ad40   320  ldr x1, [jssp], #8
0xffff7ab3ad44   324  mov jssp, fp
0xffff7ab3ad48   328  ldp fp, lr, [jssp], #16
0xffff7ab3ad4c   332  b #-0x11c (addr 0xffff7ab3ac30)
0xffff7ab3ad50   336  movz x16, #0xc00000000
0xffff7ab3ad54   340  sub csp, jssp, #0x10 (16)
0xffff7ab3ad58   344  stp fp, lr, [jssp, #-16]!
0xffff7ab3ad5c   348  sub csp, jssp, #0x10 (16)
0xffff7ab3ad60   352  str x16, [jssp, #-8]!
0xffff7ab3ad64   356  ldr x17, pc+108 (addr 0x0000ffff7ab3add0)    ;; object: 0xffff7ab3aba1 <Code: CALL_IC>
0xffff7ab3ad68   360  sub csp, jssp, #0x10 (16)
0xffff7ab3ad6c   364  str x17, [jssp, #-8]!
0xffff7ab3ad70   368  add fp, jssp, #0x10 (16)
0xffff7ab3ad74   372  sub csp, jssp, #0x18 (24)
0xffff7ab3ad78   376  stp x3, x2, [jssp, #-24]!
0xffff7ab3ad7c   380  str x1, [jssp, #16]
0xffff7ab3ad80   384  movz x0, #0x3
0xffff7ab3ad84   388  ldr x1, pc+84 (addr 0x0000ffff7ab3add8)    ;; external reference (Runtime::CallIC_Miss)
0xffff7ab3ad88   392  ldr x16, pc+88 (addr 0x0000ffff7ab3ade0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab3ad8c   396  blr x16
0xffff7ab3ad90   400  mov x1, x0
0xffff7ab3ad94   404  mov jssp, fp
0xffff7ab3ad98   408  ldp fp, lr, [jssp], #16
0xffff7ab3ad9c   412  b #-0xe0 (addr 0xffff7ab3acbc)
0xffff7ab3ada0   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7ab3ada4   420  d63f03e0       constant
0xffff7ab3ada8   424  7ab1e820       constant
0xffff7ab3adac   428  0000ffff       constant
0xffff7ab3adb0   432  7ab33b00       constant
0xffff7ab3adb4   436  0000ffff       constant
0xffff7ab3adb8   440  7ab1f820       constant
0xffff7ab3adbc   444  0000ffff       constant
0xffff7ab3adc0   448  7ab3aba1       constant
0xffff7ab3adc4   452  0000ffff       constant
0xffff7ab3adc8   456  7ab0ddc0       constant
0xffff7ab3adcc   460  0000ffff       constant
0xffff7ab3add0   464  7ab3aba1       constant
0xffff7ab3add4   468  0000ffff       constant
0xffff7ab3add8   472  00c86928       constant
0xffff7ab3addc   476  00000000       constant
0xffff7ab3ade0   480  7ab06060       constant
0xffff7ab3ade4   484  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab3ac34  code target (BUILTIN)  (0xffff7ab1e820)
0xffff7ab3ac8c  code target (STUB)  (0xffff7ab33b00)
0xffff7ab3acc0  code target (BUILTIN)  (0xffff7ab1f820)
0xffff7ab3ad20  embedded object  (0xffff7ab3aba1 <Code: CALL_IC>)
0xffff7ab3ad38  code target (STUB)  (0xffff7ab0ddc0)
0xffff7ab3ad64  embedded object  (0xffff7ab3aba1 <Code: CALL_IC>)
0xffff7ab3ad84  external reference (Runtime::CallIC_Miss)  (0xc86928)
0xffff7ab3ad88  code target (STUB)  (0xffff7ab06060)
0xffff7ab3ada0  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 393219
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0xffff7ab3ae60     0  ldur x2, [fp, #-16]
0xffff7ab3ae64     4  ldur x2, [x2, #31]
0xffff7ab3ae68     8  ldur x2, [x2, #87]
0xffff7ab3ae6c    12  ldr x16, pc+20 (addr 0x0000ffff7ab3ae80)    ;; code: CALL_IC, GENERIC
0xffff7ab3ae70    16  br x16
0xffff7ab3ae74    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab3ae78    24  d63f03e0       constant
0xffff7ab3ae7c    28  d503201f       constant
0xffff7ab3ae80    32  7ab3ac00       constant
0xffff7ab3ae84    36  0000ffff       constant


RelocInfo (size = 7)
0xffff7ab3ae6c  code target (CALL_IC)  (0xffff7ab3ac00)
0xffff7ab3ae74  constant pool (size 20)


kind = STUB
major_key = BinaryOpWithAllocationSiteStub
name = BinaryOpWithAllocationSiteStub(ADD_CreateAllocationMementos:String*String->String)
compiler = crankshaft
Instructions (size = 1164)
0xffff7ab3b220     0  movz x16, #0xa00000000
0xffff7ab3b224     4  sub csp, jssp, #0x10 (16)
0xffff7ab3b228     8  stp fp, lr, [jssp, #-16]!
0xffff7ab3b22c    12  mov fp, jssp
0xffff7ab3b230    16  sub csp, jssp, #0x28 (40)
0xffff7ab3b234    20  sub jssp, jssp, #0x28 (40)
0xffff7ab3b238    24  stur x16, [fp, #-8]
0xffff7ab3b23c    28  str x2, [jssp, #24]
0xffff7ab3b240    32  str x1, [jssp, #16]
0xffff7ab3b244    36  str x0, [jssp, #8]
0xffff7ab3b248    40  str cp, [jssp]
0xffff7ab3b24c    44  mov x3, cp
0xffff7ab3b250    48  tbz w1, #0, #+0x3d8 (addr 0xffff7ab3b628)
0xffff7ab3b254    52  ldur x4, [x1, #-1]
0xffff7ab3b258    56  ldrb w4, [x4, #11]
0xffff7ab3b25c    60  tbnz w4, #7, #+0x3d4 (addr 0xffff7ab3b630)
0xffff7ab3b260    64  tbz w0, #0, #+0x3d8 (addr 0xffff7ab3b638)
0xffff7ab3b264    68  ldur x4, [x0, #-1]
0xffff7ab3b268    72  ldrb w4, [x4, #11]
0xffff7ab3b26c    76  tbnz w4, #7, #+0x3d4 (addr 0xffff7ab3b640)
0xffff7ab3b270    80  ldur w4, [x1, #19]
0xffff7ab3b274    84  ldur w5, [x0, #19]
0xffff7ab3b278    88  cbz w4, #+0x288 (addr 0xffff7ab3b500)
0xffff7ab3b27c    92  cbz w5, #+0x27c (addr 0xffff7ab3b4f8)
0xffff7ab3b280    96  add w6, w4, w5
0xffff7ab3b284   100  movn w16, #0xe0
0xffff7ab3b288   104  cmp w6, w16, lsr #4
0xffff7ab3b28c   108  b.hs #+0x3bc (addr 0xffff7ab3b648)
0xffff7ab3b290   112  cmp w6, #0xd (13)
0xffff7ab3b294   116  b.ge #+0x1c0 (addr 0xffff7ab3b454)
0xffff7ab3b298   120  ldur x7, [x1, #-1]
0xffff7ab3b29c   124  ldrb w7, [x7, #11]
0xffff7ab3b2a0   128  ldur x8, [x0, #-1]
0xffff7ab3b2a4   132  ldrb w8, [x8, #11]
0xffff7ab3b2a8   136  orr w9, w7, w8
0xffff7ab3b2ac   140  eor w7, w7, w8
0xffff7ab3b2b0   144  and w7, w7, #0x4
0xffff7ab3b2b4   148  cbnz w7, #+0xc (addr 0xffff7ab3b2c0)
0xffff7ab3b2b8   152  and w7, w9, #0x3
0xffff7ab3b2bc   156  cbz w7, #+0x28 (addr 0xffff7ab3b2e4)
0xffff7ab3b2c0   160  sub csp, jssp, #0x10 (16)
0xffff7ab3b2c4   164  stp x0, x1, [jssp, #-16]!
0xffff7ab3b2c8   168  mov cp, x3
0xffff7ab3b2cc   172  movz x0, #0x2
0xffff7ab3b2d0   176  movz x1, #0xa6c0
0xffff7ab3b2d4   180  movk x1, #0xec, lsl #16
0xffff7ab3b2d8   184  ldr x16, pc+728 (addr 0x0000ffff7ab3b5b0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab3b2dc   188  blr x16
0xffff7ab3b2e0   192  b #+0x228 (addr 0xffff7ab3b508)
0xffff7ab3b2e4   196  and w0, w9, #0x4
0xffff7ab3b2e8   200  cbnz w0, #+0x14 (addr 0xffff7ab3b2fc)
0xffff7ab3b2ec   204  lsl w0, w6, #1
0xffff7ab3b2f0   208  mov x1, x0
0xffff7ab3b2f4   212  ldr x0, pc+708 (addr 0x0000ffff7ab3b5b8)    ;; object: 0x4ec04ba1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab3b2f8   216  b #+0xc (addr 0xffff7ab3b304)
0xffff7ab3b2fc   220  mov x1, x6
0xffff7ab3b300   224  ldr x0, pc+704 (addr 0x0000ffff7ab3b5c0)    ;; object: 0x4ec04bf9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab3b304   228  add w1, w1, #0x1f (31)
0xffff7ab3b308   232  and w1, w1, #0xfffffff8
0xffff7ab3b30c   236  cmp w1, #0x96000 (614400)
0xffff7ab3b310   240  b.lt #+0x2c (addr 0xffff7ab3b33c)
0xffff7ab3b314   244  sub csp, jssp, #0x10 (16)
0xffff7ab3b318   248  ldp x1, x0, [jssp, #8]
0xffff7ab3b31c   252  stp x1, x0, [jssp, #-16]!
0xffff7ab3b320   256  ldr cp, [jssp, #16]
0xffff7ab3b324   260  movz x0, #0x2
0xffff7ab3b328   264  movz x1, #0xa6c0
0xffff7ab3b32c   268  movk x1, #0xec, lsl #16
0xffff7ab3b330   272  ldr x16, pc+664 (addr 0x0000ffff7ab3b5c8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab3b334   276  blr x16
0xffff7ab3b338   280  b #+0x1d0 (addr 0xffff7ab3b508)
0xffff7ab3b33c   284  add w2, w1, #0x10 (16)
0xffff7ab3b340   288  sxtw x2, w2
0xffff7ab3b344   292  movz x3, #0xe2c0
0xffff7ab3b348   296  movk x3, #0x9ab, lsl #16
0xffff7ab3b34c   300  ldp x8, x16, [x3]
0xffff7ab3b350   304  adds x7, x8, x2
0xffff7ab3b354   308  ccmp x7, x16, #nzCv, lo
0xffff7ab3b358   312  b.hi #+0x1c0 (addr 0xffff7ab3b518)
0xffff7ab3b35c   316  str x7, [x3]
0xffff7ab3b360   320  orr x8, x8, #0x1
0xffff7ab3b364   324  add x1, x8, w1, sxtw
0xffff7ab3b368   328  ldr x2, pc+616 (addr 0x0000ffff7ab3b5d0)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab3b36c   332  stur x2, [x1, #-1]
0xffff7ab3b370   336  ldr x2, [jssp, #24]
0xffff7ab3b374   340  stur x2, [x1, #7]
0xffff7ab3b378   344  ldur w1, [x2, #35]
0xffff7ab3b37c   348  add w1, w1, #0x1 (1)
0xffff7ab3b380   352  lsl x1, x1, #32
0xffff7ab3b384   356  stur x1, [x2, #31]
0xffff7ab3b388   360  stur x0, [x8, #-1]
0xffff7ab3b38c   364  movz w1, #0x3
0xffff7ab3b390   368  stur w1, [x8, #7]
0xffff7ab3b394   372  lsl x1, x6, #32
0xffff7ab3b398   376  stur x1, [x8, #15]
0xffff7ab3b39c   380  ldr x1, pc+572 (addr 0x0000ffff7ab3b5d8)    ;; object: 0x4ec04ba1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab3b3a0   384  cmp x0, x1
0xffff7ab3b3a4   388  b.eq #+0x58 (addr 0xffff7ab3b3fc)
0xffff7ab3b3a8   392  ldr x1, [jssp, #16]
0xffff7ab3b3ac   396  movz x0, #0x0
0xffff7ab3b3b0   400  cmp w4, w0
0xffff7ab3b3b4   404  b.le #+0x1c (addr 0xffff7ab3b3d0)
0xffff7ab3b3b8   408  add x2, x1, #0x17 (23)
0xffff7ab3b3bc   412  ldrb w3, [x2, w0, sxtw]
0xffff7ab3b3c0   416  add x2, x8, #0x17 (23)
0xffff7ab3b3c4   420  strb w3, [x2, w0, sxtw]
0xffff7ab3b3c8   424  add w0, w0, #0x1 (1)
0xffff7ab3b3cc   428  b #-0x1c (addr 0xffff7ab3b3b0)
0xffff7ab3b3d0   432  ldr x3, [jssp, #8]
0xffff7ab3b3d4   436  movz x0, #0x0
0xffff7ab3b3d8   440  cmp w5, w0
0xffff7ab3b3dc   444  b.le #+0x70 (addr 0xffff7ab3b44c)
0xffff7ab3b3e0   448  add x1, x3, #0x17 (23)
0xffff7ab3b3e4   452  ldrb w2, [x1, w0, sxtw]
0xffff7ab3b3e8   456  add w1, w4, w0
0xffff7ab3b3ec   460  add x6, x8, #0x17 (23)
0xffff7ab3b3f0   464  strb w2, [x6, w1, sxtw]
0xffff7ab3b3f4   468  add w0, w0, #0x1 (1)
0xffff7ab3b3f8   472  b #-0x20 (addr 0xffff7ab3b3d8)
0xffff7ab3b3fc   476  ldp x3, x1, [jssp, #8]
0xffff7ab3b400   480  movz x0, #0x0
0xffff7ab3b404   484  cmp w4, w0
0xffff7ab3b408   488  b.le #+0x1c (addr 0xffff7ab3b424)
0xffff7ab3b40c   492  add x2, x1, #0x17 (23)
0xffff7ab3b410   496  ldrh w6, [x2, w0, sxtw #1]
0xffff7ab3b414   500  add x2, x8, #0x17 (23)
0xffff7ab3b418   504  strh w6, [x2, w0, sxtw #1]
0xffff7ab3b41c   508  add w0, w0, #0x1 (1)
0xffff7ab3b420   512  b #-0x1c (addr 0xffff7ab3b404)
0xffff7ab3b424   516  movz x0, #0x0
0xffff7ab3b428   520  cmp w5, w0
0xffff7ab3b42c   524  b.le #+0x20 (addr 0xffff7ab3b44c)
0xffff7ab3b430   528  add x1, x3, #0x17 (23)
0xffff7ab3b434   532  ldrh w2, [x1, w0, sxtw #1]
0xffff7ab3b438   536  add w1, w4, w0
0xffff7ab3b43c   540  add x6, x8, #0x17 (23)
0xffff7ab3b440   544  strh w2, [x6, w1, sxtw #1]
0xffff7ab3b444   548  add w0, w0, #0x1 (1)
0xffff7ab3b448   552  b #-0x20 (addr 0xffff7ab3b428)
0xffff7ab3b44c   556  mov x0, x8
0xffff7ab3b450   560  b #+0xb8 (addr 0xffff7ab3b508)
0xffff7ab3b454   564  mov x3, x0
0xffff7ab3b458   568  ldur x0, [x1, #-1]
0xffff7ab3b45c   572  ldrb w0, [x0, #11]
0xffff7ab3b460   576  ldur x4, [x3, #-1]
0xffff7ab3b464   580  ldrb w4, [x4, #11]
0xffff7ab3b468   584  movz x7, #0xe2c0
0xffff7ab3b46c   588  movk x7, #0x9ab, lsl #16
0xffff7ab3b470   592  ldp x8, x5, [x7]
0xffff7ab3b474   596  adds x16, x8, #0x38 (56)
0xffff7ab3b478   600  ccmp x16, x5, #nzCv, lo
0xffff7ab3b47c   604  b.hi #+0xe4 (addr 0xffff7ab3b560)
0xffff7ab3b480   608  str x16, [x7]
0xffff7ab3b484   612  orr x8, x8, #0x1
0xffff7ab3b488   616  add x5, x8, #0x28 (40)
0xffff7ab3b48c   620  ldr x7, pc+340 (addr 0x0000ffff7ab3b5e0)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab3b490   624  stur x7, [x5, #-1]
0xffff7ab3b494   628  stur x2, [x5, #7]
0xffff7ab3b498   632  ldur w5, [x2, #35]
0xffff7ab3b49c   636  add w5, w5, #0x1 (1)
0xffff7ab3b4a0   640  lsl x5, x5, #32
0xffff7ab3b4a4   644  stur x5, [x2, #31]
0xffff7ab3b4a8   648  and w2, w0, w4
0xffff7ab3b4ac   652  eor w0, w0, w4
0xffff7ab3b4b0   656  and w2, w2, #0xc
0xffff7ab3b4b4   660  cbnz w2, #+0x1c (addr 0xffff7ab3b4d0)
0xffff7ab3b4b8   664  and w0, w0, #0xc
0xffff7ab3b4bc   668  cmp w0, #0xc (12)
0xffff7ab3b4c0   672  b.eq #+0x10 (addr 0xffff7ab3b4d0)
0xffff7ab3b4c4   676  ldr x0, pc+292 (addr 0x0000ffff7ab3b5e8)    ;; object: 0x4ec04c51 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab3b4c8   680  stur x0, [x8, #-1]
0xffff7ab3b4cc   684  b #+0xc (addr 0xffff7ab3b4d8)
0xffff7ab3b4d0   688  ldr x0, pc+288 (addr 0x0000ffff7ab3b5f0)    ;; object: 0x4ec04ca9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab3b4d4   692  stur x0, [x8, #-1]
0xffff7ab3b4d8   696  movz w0, #0x3
0xffff7ab3b4dc   700  stur w0, [x8, #7]
0xffff7ab3b4e0   704  lsl x0, x6, #32
0xffff7ab3b4e4   708  stur x0, [x8, #15]
0xffff7ab3b4e8   712  stur x1, [x8, #23]
0xffff7ab3b4ec   716  stur x3, [x8, #31]
0xffff7ab3b4f0   720  mov x0, x8
0xffff7ab3b4f4   724  b #+0x14 (addr 0xffff7ab3b508)
0xffff7ab3b4f8   728  mov x0, x1
0xffff7ab3b4fc   732  b #+0xc (addr 0xffff7ab3b508)
0xffff7ab3b500   736  mov x3, x0
0xffff7ab3b504   740  mov x0, x3
0xffff7ab3b508   744  ldr cp, [jssp]
0xffff7ab3b50c   748  mov jssp, fp
0xffff7ab3b510   752  ldp fp, lr, [jssp], #16
0xffff7ab3b514   756  ret
0xffff7ab3b518   760  movz x8, #0x0
0xffff7ab3b51c   764  mov x16, lr
0xffff7ab3b520   768  ldr x17, pc+216 (addr 0x0000ffff7ab3b5f8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab3b524   772  blr x17
0xffff7ab3b528   776  lsl x0, x2, #32
0xffff7ab3b52c   780  movz x10, #0x0
0xffff7ab3b530   784  sub csp, jssp, #0x10 (16)
0xffff7ab3b534   788  stp x10, x0, [jssp, #-16]!
0xffff7ab3b538   792  ldur cp, [fp, #-40]
0xffff7ab3b53c   796  movz x0, #0x2
0xffff7ab3b540   800  movz x1, #0x5b88
0xffff7ab3b544   804  movk x1, #0xe2, lsl #16
0xffff7ab3b548   808  ldr x16, pc+184 (addr 0x0000ffff7ab3b600)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab3b54c   812  blr x16
0xffff7ab3b550   816  str x0, [jssp, #64]
0xffff7ab3b554   820  ldr x16, pc+180 (addr 0x0000ffff7ab3b608)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab3b558   824  blr x16
0xffff7ab3b55c   828  b #-0x1f8 (addr 0xffff7ab3b364)
0xffff7ab3b560   832  movz x8, #0x0
0xffff7ab3b564   836  mov x16, lr
0xffff7ab3b568   840  ldr x17, pc+168 (addr 0x0000ffff7ab3b610)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab3b56c   844  blr x17
0xffff7ab3b570   848  movz x0, #0x3800000000
0xffff7ab3b574   852  movz x10, #0x0
0xffff7ab3b578   856  sub csp, jssp, #0x10 (16)
0xffff7ab3b57c   860  stp x10, x0, [jssp, #-16]!
0xffff7ab3b580   864  ldur cp, [fp, #-40]
0xffff7ab3b584   868  movz x0, #0x2
0xffff7ab3b588   872  movz x1, #0x5b88
0xffff7ab3b58c   876  movk x1, #0xe2, lsl #16
0xffff7ab3b590   880  ldr x16, pc+136 (addr 0x0000ffff7ab3b618)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab3b594   884  blr x16
0xffff7ab3b598   888  str x0, [jssp, #64]
0xffff7ab3b59c   892  ldr x16, pc+132 (addr 0x0000ffff7ab3b620)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab3b5a0   896  blr x16
0xffff7ab3b5a4   900  b #-0x11c (addr 0xffff7ab3b488)
0xffff7ab3b5a8   904  580003ff       constant pool begin (num_const = 31)    ;; constant pool
0xffff7ab3b5ac   908  d63f03e0       constant
0xffff7ab3b5b0   912  7ab06060       constant
0xffff7ab3b5b4   916  0000ffff       constant
0xffff7ab3b5b8   920  4ec04ba1       constant
0xffff7ab3b5bc   924  00000000       constant
0xffff7ab3b5c0   928  4ec04bf9       constant
0xffff7ab3b5c4   932  00000000       constant
0xffff7ab3b5c8   936  7ab06060       constant
0xffff7ab3b5cc   940  0000ffff       constant
0xffff7ab3b5d0   944  4ec05d81       constant
0xffff7ab3b5d4   948  00000000       constant
0xffff7ab3b5d8   952  4ec04ba1       constant
0xffff7ab3b5dc   956  00000000       constant
0xffff7ab3b5e0   960  4ec05d81       constant
0xffff7ab3b5e4   964  00000000       constant
0xffff7ab3b5e8   968  4ec04c51       constant
0xffff7ab3b5ec   972  00000000       constant
0xffff7ab3b5f0   976  4ec04ca9       constant
0xffff7ab3b5f4   980  00000000       constant
0xffff7ab3b5f8   984  7ab06820       constant
0xffff7ab3b5fc   988  0000ffff       constant
0xffff7ab3b600   992  7ab06260       constant
0xffff7ab3b604   996  0000ffff       constant
0xffff7ab3b608  1000  7ab068e0       constant
0xffff7ab3b60c  1004  0000ffff       constant
0xffff7ab3b610  1008  7ab06820       constant
0xffff7ab3b614  1012  0000ffff       constant
0xffff7ab3b618  1016  7ab06260       constant
0xffff7ab3b61c  1020  0000ffff       constant
0xffff7ab3b620  1024  7ab068e0       constant
0xffff7ab3b624  1028  0000ffff       constant
0xffff7ab3b628  1032  movz x16, #0x0
0xffff7ab3b62c  1036  bl #+0x24 (addr 0xffff7ab3b650)
0xffff7ab3b630  1040  movz x16, #0x8
0xffff7ab3b634  1044  bl #+0x1c (addr 0xffff7ab3b650)
0xffff7ab3b638  1048  movz x16, #0x10
0xffff7ab3b63c  1052  bl #+0x14 (addr 0xffff7ab3b650)
0xffff7ab3b640  1056  movz x16, #0x18
0xffff7ab3b644  1060  bl #+0xc (addr 0xffff7ab3b650)
0xffff7ab3b648  1064  movz x16, #0x20
0xffff7ab3b64c  1068  bl #+0x4 (addr 0xffff7ab3b650)
0xffff7ab3b650  1072  ldr x17, pc+24 (addr 0x0000ffff7ab3b668)    ;; lazy deoptimization bailout 0
0xffff7ab3b654  1076  add x17, x17, x16
0xffff7ab3b658  1080  br x17
0xffff7ab3b65c  1084  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab3b660  1088  d63f03e0       constant
0xffff7ab3b664  1092  d503201f       constant
0xffff7ab3b668  1096  7a906000       constant
0xffff7ab3b66c  1100  0000ffff       constant


Safepoints (size = 60)
0xffff7ab3b2e0   192  1111000 (sp -> fp)       5
0xffff7ab3b338   280  1111000 (sp -> fp)       6
0xffff7ab3b550   816  1111000 | x0 | x8 (sp -> fp)  <none> argc: 2
0xffff7ab3b598   888  1111000 | x1 | x2 | x3 | x8 (sp -> fp)  <none> argc: 2

RelocInfo (size = 37)
0xffff7ab3b2d8  code target (STUB)  (0xffff7ab06060)
0xffff7ab3b2f4  embedded object  (0x4ec04ba1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab3b300  embedded object  (0x4ec04bf9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab3b330  code target (STUB)  (0xffff7ab06060)
0xffff7ab3b368  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab3b39c  embedded object  (0x4ec04ba1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab3b48c  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab3b4c4  embedded object  (0x4ec04c51 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab3b4d0  embedded object  (0x4ec04ca9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab3b520  code target (STUB)  (0xffff7ab06820)
0xffff7ab3b548  code target (STUB)  (0xffff7ab06260)
0xffff7ab3b554  code target (STUB)  (0xffff7ab068e0)
0xffff7ab3b568  code target (STUB)  (0xffff7ab06820)
0xffff7ab3b590  code target (STUB)  (0xffff7ab06260)
0xffff7ab3b59c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab3b5a8  constant pool (size 128)
0xffff7ab3b650  runtime entry
0xffff7ab3b65c  constant pool (size 20)


kind = BINARY_OP_IC
major_key = BinaryOpICWithAllocationSiteStub
ic_state = MONOMORPHIC
extra_ic_state = 8775
type = NORMAL
name = BinaryOpICWithAllocationSiteStub(ADD_CreateAllocationMementos:String*String->String)
compiler = unknown
Instructions (size = 40)
0xffff7ab3b720     0  ldr x2, pc+24 (addr 0x0000ffff7ab3b738)    ;; object: 0x20d04241 <undefined>
0xffff7ab3b724     4  ldr x16, pc+28 (addr 0x0000ffff7ab3b740)    ;; code: STUB, BinaryOpWithAllocationSiteStub, minor: 8775
0xffff7ab3b728     8  br x16
0xffff7ab3b72c    12  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab3b730    16  d63f03e0       constant
0xffff7ab3b734    20  d503201f       constant
0xffff7ab3b738    24  20d04241       constant
0xffff7ab3b73c    28  00000000       constant
0xffff7ab3b740    32  7ab3b220       constant
0xffff7ab3b744    36  0000ffff       constant


RelocInfo (size = 8)
0xffff7ab3b720  embedded object  (0x20d04241 <undefined>)
0xffff7ab3b724  code target (STUB)  (0xffff7ab3b220)
0xffff7ab3b72c  constant pool (size 28)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 285)
0xffff7ab3bc80     0  movz x2, #0xe2c0
0xffff7ab3bc84     4  movk x2, #0x9ab, lsl #16
0xffff7ab3bc88     8  ldp x3, x0, [x2]
0xffff7ab3bc8c    12  adds x16, x3, #0x40 (64)
0xffff7ab3bc90    16  ccmp x16, x0, #nzCv, lo
0xffff7ab3bc94    20  b.hi #+0x4c (addr 0xffff7ab3bce0)
0xffff7ab3bc98    24  str x16, [x2]
0xffff7ab3bc9c    28  orr x3, x3, #0x1
0xffff7ab3bca0    32  ldr x0, pc+176 (addr 0x0000ffff7ab3bd50)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab3bca4    36  stur x0, [x3, #-1]
0xffff7ab3bca8    40  movz x0, #0x600000000
0xffff7ab3bcac    44  stur x0, [x3, #7]
0xffff7ab3bcb0    48  stur x1, [x3, #15]
0xffff7ab3bcb4    52  stur cp, [x3, #23]
0xffff7ab3bcb8    56  ldr x0, pc+160 (addr 0x0000ffff7ab3bd58)    ;; object: 0x20d04519 <the hole>
0xffff7ab3bcbc    60  stur x0, [x3, #31]
0xffff7ab3bcc0    64  ldur x0, [cp, #39]
0xffff7ab3bcc4    68  stur x0, [x3, #39]
0xffff7ab3bcc8    72  ldr x0, pc+152 (addr 0x0000ffff7ab3bd60)    ;; object: 0x20d04241 <undefined>
0xffff7ab3bccc    76  stur x0, [x3, #47]
0xffff7ab3bcd0    80  ldr x0, pc+152 (addr 0x0000ffff7ab3bd68)    ;; object: 0x20d04241 <undefined>
0xffff7ab3bcd4    84  stur x0, [x3, #55]
0xffff7ab3bcd8    88  mov x0, x3
0xffff7ab3bcdc    92  ret
0xffff7ab3bce0    96  sub csp, jssp, #0x10 (16)
0xffff7ab3bce4   100  stp fp, lr, [jssp, #-16]!
0xffff7ab3bce8   104  movz fp, #0xa00000000
0xffff7ab3bcec   108  sub csp, jssp, #0x8 (8)
0xffff7ab3bcf0   112  str fp, [jssp, #-8]!
0xffff7ab3bcf4   116  add fp, jssp, #0x8 (8)
0xffff7ab3bcf8   120  movz x3, #0x0
0xffff7ab3bcfc   124  mov x16, lr
0xffff7ab3bd00   128  ldr x17, pc+112 (addr 0x0000ffff7ab3bd70)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab3bd04   132  blr x17
0xffff7ab3bd08   136  movz x0, #0x4000000000
0xffff7ab3bd0c   140  movz x10, #0x0
0xffff7ab3bd10   144  sub csp, jssp, #0x10 (16)
0xffff7ab3bd14   148  stp x10, x0, [jssp, #-16]!
0xffff7ab3bd18   152  movz x0, #0x2
0xffff7ab3bd1c   156  movz x1, #0x5b88
0xffff7ab3bd20   160  movk x1, #0xe2, lsl #16
0xffff7ab3bd24   164  ldr x16, pc+84 (addr 0x0000ffff7ab3bd78)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab3bd28   168  blr x16
0xffff7ab3bd2c   172  str x0, [jssp, #24]
0xffff7ab3bd30   176  ldr x16, pc+80 (addr 0x0000ffff7ab3bd80)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab3bd34   180  blr x16
0xffff7ab3bd38   184  ldr lr, [jssp, #16]
0xffff7ab3bd3c   188  ldp xzr, fp, [jssp], #24
0xffff7ab3bd40   192  b #-0xa0 (addr 0xffff7ab3bca0)
0xffff7ab3bd44   196  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab3bd48   200  d63f03e0       constant
0xffff7ab3bd4c   204  d503201f       constant
0xffff7ab3bd50   208  4ec06149       constant
0xffff7ab3bd54   212  00000000       constant
0xffff7ab3bd58   216  20d04519       constant
0xffff7ab3bd5c   220  00000000       constant
0xffff7ab3bd60   224  20d04241       constant
0xffff7ab3bd64   228  00000000       constant
0xffff7ab3bd68   232  20d04241       constant
0xffff7ab3bd6c   236  00000000       constant
0xffff7ab3bd70   240  7ab06820       constant
0xffff7ab3bd74   244  0000ffff       constant
0xffff7ab3bd78   248  7ab06260       constant
0xffff7ab3bd7c   252  0000ffff       constant
0xffff7ab3bd80   256  7ab068e0       constant
0xffff7ab3bd84   260  0000ffff       constant


Safepoints (size = 21)
0xffff7ab3bd2c   172  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 13)
0xffff7ab3bca0  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab3bcb8  embedded object  (0x20d04519 <the hole>)
0xffff7ab3bcc8  embedded object  (0x20d04241 <undefined>)
0xffff7ab3bcd0  embedded object  (0x20d04241 <undefined>)
0xffff7ab3bd00  code target (STUB)  (0xffff7ab06820)
0xffff7ab3bd24  code target (STUB)  (0xffff7ab06260)
0xffff7ab3bd30  code target (STUB)  (0xffff7ab068e0)
0xffff7ab3bd44  constant pool (size 68)


kind = KEYED_STORE_IC
major_key = VectorKeyedStoreICTrampolineStub
ic_state = GENERIC
extra_ic_state = STRICT
name = VectorKeyedStoreICTrampolineStub
compiler = unknown
Instructions (size = 384)
0xffff7ab3be00     0  ldur x3, [fp, #-16]
0xffff7ab3be04     4  ldur x3, [x3, #31]
0xffff7ab3be08     8  ldur x3, [x3, #87]
0xffff7ab3be0c    12  add x5, x3, x4, asr #29
0xffff7ab3be10    16  ldur x5, [x5, #15]
0xffff7ab3be14    20  tbz w1, #0, #+0x140 (addr 0xffff7ab3bf54)
0xffff7ab3be18    24  ldur x6, [x1, #-1]
0xffff7ab3be1c    28  ldur x7, [x5, #7]
0xffff7ab3be20    32  cmp x7, x6
0xffff7ab3be24    36  b.ne #+0x14 (addr 0xffff7ab3be38)
0xffff7ab3be28    40  add x5, x3, x4, asr #29
0xffff7ab3be2c    44  ldur x5, [x5, #23]
0xffff7ab3be30    48  add x5, x5, #0x5f (95)
0xffff7ab3be34    52  br x5
0xffff7ab3be38    56  ldur x7, [x5, #-1]
0xffff7ab3be3c    60  ldr x16, [x26, #224]
0xffff7ab3be40    64  cmp x7, x16
0xffff7ab3be44    68  b.ne #+0x68 (addr 0xffff7ab3beac)
0xffff7ab3be48    72  ldur x8, [x5, #7]
0xffff7ab3be4c    76  add x8, x5, x8, asr #29
0xffff7ab3be50    80  add x8, x8, #0xf (15)
0xffff7ab3be54    84  add x5, x5, #0xf (15)
0xffff7ab3be58    88  ldr x7, [x5]
0xffff7ab3be5c    92  ldur x7, [x7, #7]
0xffff7ab3be60    96  cmp x6, x7
0xffff7ab3be64   100  b.ne #+0x38 (addr 0xffff7ab3be9c)
0xffff7ab3be68   104  ldr x8, [x5, #8]
0xffff7ab3be6c   108  ldr x16, [x26, #40]
0xffff7ab3be70   112  cmp x8, x16
0xffff7ab3be74   116  b.ne #+0x10 (addr 0xffff7ab3be84)
0xffff7ab3be78   120  ldr x5, [x5, #16]
0xffff7ab3be7c   124  add x5, x5, #0x5f (95)
0xffff7ab3be80   128  br x5
0xffff7ab3be84   132  ldur x8, [x8, #7]
0xffff7ab3be88   136  tbz w8, #0, #+0xac (addr 0xffff7ab3bf34)
0xffff7ab3be8c   140  ldr x6, [x5, #16]
0xffff7ab3be90   144  mov x5, x8
0xffff7ab3be94   148  add x6, x6, #0x5f (95)
0xffff7ab3be98   152  br x6
0xffff7ab3be9c   156  add x5, x5, #0x18 (24)
0xffff7ab3bea0   160  cmp x5, x8
0xffff7ab3bea4   164  b.lt #-0x4c (addr 0xffff7ab3be58)
0xffff7ab3bea8   168  b #+0x8c (addr 0xffff7ab3bf34)
0xffff7ab3beac   172  ldr x16, [x26, #2400]
0xffff7ab3beb0   176  cmp x5, x16
0xffff7ab3beb4   180  b.ne #+0xc (addr 0xffff7ab3bec0)
0xffff7ab3beb8   184  ldr x16, pc+176 (addr 0x0000ffff7ab3bf68)    ;; code: KEYED_STORE_IC, MEGAMORPHIC
0xffff7ab3bebc   188  br x16
0xffff7ab3bec0   192  cmp x2, x5
0xffff7ab3bec4   196  b.ne #+0x70 (addr 0xffff7ab3bf34)
0xffff7ab3bec8   200  add x5, x3, x4, asr #29
0xffff7ab3becc   204  ldur x5, [x5, #23]
0xffff7ab3bed0   208  ldur x7, [x5, #15]
0xffff7ab3bed4   212  ldur x7, [x7, #7]
0xffff7ab3bed8   216  cmp x6, x7
0xffff7ab3bedc   220  b.ne #+0x10 (addr 0xffff7ab3beec)
0xffff7ab3bee0   224  ldur x5, [x5, #23]
0xffff7ab3bee4   228  add x5, x5, #0x5f (95)
0xffff7ab3bee8   232  br x5
0xffff7ab3beec   236  ldur x8, [x5, #7]
0xffff7ab3bef0   240  movz x16, #0x200000000
0xffff7ab3bef4   244  cmp x8, x16
0xffff7ab3bef8   248  b.eq #+0x3c (addr 0xffff7ab3bf34)
0xffff7ab3befc   252  add x8, x5, x8, asr #29
0xffff7ab3bf00   256  add x8, x8, #0xf (15)
0xffff7ab3bf04   260  add x5, x5, #0x1f (31)
0xffff7ab3bf08   264  ldr x7, [x5]
0xffff7ab3bf0c   268  ldur x7, [x7, #7]
0xffff7ab3bf10   272  cmp x6, x7
0xffff7ab3bf14   276  b.ne #+0x10 (addr 0xffff7ab3bf24)
0xffff7ab3bf18   280  ldr x5, [x5, #8]
0xffff7ab3bf1c   284  add x5, x5, #0x5f (95)
0xffff7ab3bf20   288  br x5
0xffff7ab3bf24   292  add x5, x5, #0x10 (16)
0xffff7ab3bf28   296  cmp x5, x8
0xffff7ab3bf2c   300  b.lt #-0x24 (addr 0xffff7ab3bf08)
0xffff7ab3bf30   304  b #+0x4 (addr 0xffff7ab3bf34)
0xffff7ab3bf34   308  sub csp, jssp, #0x28 (40)
0xffff7ab3bf38   312  stp x4, x0, [jssp, #-32]!
0xffff7ab3bf3c   316  stp x2, x1, [jssp, #16]
0xffff7ab3bf40   320  str x3, [jssp, #-8]!
0xffff7ab3bf44   324  movz x0, #0x5
0xffff7ab3bf48   328  ldr x1, pc+40 (addr 0x0000ffff7ab3bf70)    ;; external reference (Runtime::KeyedStoreIC_Miss)
0xffff7ab3bf4c   332  ldr x16, pc+44 (addr 0x0000ffff7ab3bf78)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab3bf50   336  br x16
0xffff7ab3bf54   340  ldr x6, [x26, #120]
0xffff7ab3bf58   344  b #-0x13c (addr 0xffff7ab3be1c)
0xffff7ab3bf5c   348  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab3bf60   352  d63f03e0       constant
0xffff7ab3bf64   356  d503201f       constant
0xffff7ab3bf68   360  7ab263a0       constant
0xffff7ab3bf6c   364  0000ffff       constant
0xffff7ab3bf70   368  00c88e08       constant
0xffff7ab3bf74   372  00000000       constant
0xffff7ab3bf78   376  7ab06060       constant
0xffff7ab3bf7c   380  0000ffff       constant


RelocInfo (size = 14)
0xffff7ab3beb8  code target (KEYED_STORE_IC)  (0xffff7ab263a0)
0xffff7ab3bf48  external reference (Runtime::KeyedStoreIC_Miss)  (0xc88e08)
0xffff7ab3bf4c  code target (STUB)  (0xffff7ab06060)
0xffff7ab3bf5c  constant pool (size 36)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab3cc20     0  ldur x0, [x1, #7]
0xffff7ab3cc24     4  movz x16, #0x1bf
0xffff7ab3cc28     8  ldr x0, [x0, x16]
0xffff7ab3cc2c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab3cca0     0  ldur x0, [x1, #7]
0xffff7ab3cca4     4  movz x16, #0x1c7
0xffff7ab3cca8     8  ldr x0, [x0, x16]
0xffff7ab3ccac    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab3cd20     0  ldur x0, [x1, #7]
0xffff7ab3cd24     4  movz x16, #0x17f
0xffff7ab3cd28     8  ldr x0, [x0, x16]
0xffff7ab3cd2c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab3cda0     0  ldur x0, [x1, #7]
0xffff7ab3cda4     4  movz x16, #0x1af
0xffff7ab3cda8     8  ldr x0, [x0, x16]
0xffff7ab3cdac    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab3ce20     0  ldur x0, [x1, #7]
0xffff7ab3ce24     4  movz x16, #0x1b7
0xffff7ab3ce28     8  ldr x0, [x0, x16]
0xffff7ab3ce2c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 88)
0xffff7ab3cea0     0  stur x5, [x1, #-1]
0xffff7ab3cea4     4  tbz w5, #0, #+0x34 (addr 0xffff7ab3ced8)
0xffff7ab3cea8     8  sub x2, x1, #0x1 (1)
0xffff7ab3ceac    12  and x5, x5, #0xfffffffffff00000
0xffff7ab3ceb0    16  ldr x5, [x5, #8]
0xffff7ab3ceb4    20  tbz w5, #1, #+0x24 (addr 0xffff7ab3ced8)
0xffff7ab3ceb8    24  and x5, x1, #0xfffffffffff00000
0xffff7ab3cebc    28  ldr x5, [x5, #8]
0xffff7ab3cec0    32  tbz w5, #2, #+0x18 (addr 0xffff7ab3ced8)
0xffff7ab3cec4    36  sub csp, jssp, #0x8 (8)
0xffff7ab3cec8    40  str lr, [jssp, #-8]!
0xffff7ab3cecc    44  ldr x16, pc+28 (addr 0x0000ffff7ab3cee8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab3ced0    48  blr x16
0xffff7ab3ced4    52  ldr lr, [jssp], #8
0xffff7ab3ced8    56  ret
0xffff7ab3cedc    60  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab3cee0    64  d63f03e0       constant
0xffff7ab3cee4    68  d503201f       constant
0xffff7ab3cee8    72  7ab38080       constant
0xffff7ab3ceec    76  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 7)
0xffff7ab3cecc  code target (STUB)  (0xffff7ab38080)
0xffff7ab3cedc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = next
compiler = unknown
Instructions (size = 168)
0xffff7ab3cf60     0  sub csp, jssp, #0x8 (8)
0xffff7ab3cf64     4  str x3, [jssp, #-8]!
0xffff7ab3cf68     8  sub csp, jssp, #0x8 (8)
0xffff7ab3cf6c    12  str x4, [jssp, #-8]!
0xffff7ab3cf70    16  ldr x3, pc+104 (addr 0x0000ffff7ab3cfd8)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7ab3cf74    20  ldur x3, [x3, #7]
0xffff7ab3cf78    24  cmp x3, #0x0 (0)
0xffff7ab3cf7c    28  b.ne #+0x3c (addr 0xffff7ab3cfb8)
0xffff7ab3cf80    32  ldr x5, pc+96 (addr 0x0000ffff7ab3cfe0)    ;; object: 0x20d5b101 WeakCell for 0x4ec0c6b1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab3cf84    36  ldur x5, [x5, #7]
0xffff7ab3cf88    40  tbz w5, #0, #+0x30 (addr 0xffff7ab3cfb8)
0xffff7ab3cf8c    44  ldursw x4, [x5, #15]
0xffff7ab3cf90    48  tbnz w4, #23, #+0x28 (addr 0xffff7ab3cfb8)
0xffff7ab3cf94    52  ldur x4, [x5, #47]
0xffff7ab3cf98    56  ldur x4, [x4, #119]
0xffff7ab3cf9c    60  cmp x0, x4
0xffff7ab3cfa0    64  b.ne #+0x18 (addr 0xffff7ab3cfb8)
0xffff7ab3cfa4    68  ldr x4, [jssp], #8
0xffff7ab3cfa8    72  ldr x3, [jssp], #8
0xffff7ab3cfac    76  ldr x2, pc+60 (addr 0x0000ffff7ab3cfe8)    ;; object: 0x20d05209 <String[4]: next>
0xffff7ab3cfb0    80  ldr x16, pc+64 (addr 0x0000ffff7ab3cff0)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0xffff7ab3cfb4    84  br x16
0xffff7ab3cfb8    88  ldr x2, pc+64 (addr 0x0000ffff7ab3cff8)    ;; object: 0x20d05209 <String[4]: next>
0xffff7ab3cfbc    92  ldr x4, [jssp], #8
0xffff7ab3cfc0    96  ldr x3, [jssp], #8
0xffff7ab3cfc4   100  ldr x16, pc+60 (addr 0x0000ffff7ab3d000)    ;; code: BUILTIN
0xffff7ab3cfc8   104  br x16
0xffff7ab3cfcc   108  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7ab3cfd0   112  d63f03e0       constant
0xffff7ab3cfd4   116  d503201f       constant
0xffff7ab3cfd8   120  20d5b0f1       constant
0xffff7ab3cfdc   124  00000000       constant
0xffff7ab3cfe0   128  20d5b101       constant
0xffff7ab3cfe4   132  00000000       constant
0xffff7ab3cfe8   136  20d05209       constant
0xffff7ab3cfec   140  00000000       constant
0xffff7ab3cff0   144  7ab3cea0       constant
0xffff7ab3cff4   148  0000ffff       constant
0xffff7ab3cff8   152  20d05209       constant
0xffff7ab3cffc   156  00000000       constant
0xffff7ab3d000   160  7ab22420       constant
0xffff7ab3d004   164  0000ffff       constant


RelocInfo (size = 12)
0xffff7ab3cf70  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7ab3cf80  embedded object  (0x20d5b101 WeakCell for 0x4ec0c6b1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab3cfac  embedded object  (0x20d05209 <String[4]: next>)
0xffff7ab3cfb0  code target (HANDLER)  (0xffff7ab3cea0)
0xffff7ab3cfb8  embedded object  (0x20d05209 <String[4]: next>)
0xffff7ab3cfc4  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab3cfcc  constant pool (size 60)

kind = STUB
major_key = FastCloneShallowObjectStub
name = FastCloneShallowObjectStub
compiler = crankshaft
Instructions (size = 509)
0xffff7ab3d320     0  ldur x4, [x3, #47]
0xffff7ab3d324     4  tbnz w2, #0, #+0xc0 (addr 0xffff7ab3d3e4)
0xffff7ab3d328     8  asr x6, x2, #32
0xffff7ab3d32c    12  add x5, x4, #0x17 (23)
0xffff7ab3d330    16  ldr x7, [x5, w6, sxtw #3]
0xffff7ab3d334    20  ldr x4, pc+356 (addr 0x0000ffff7ab3d498)    ;; object: 0x20d04241 <undefined>
0xffff7ab3d338    24  cmp x7, x4
0xffff7ab3d33c    28  b.eq #+0xa4 (addr 0xffff7ab3d3e0)
0xffff7ab3d340    32  ldur x4, [x7, #7]
0xffff7ab3d344    36  ldur x5, [x4, #-1]
0xffff7ab3d348    40  ldrb w6, [x5, #7]
0xffff7ab3d34c    44  cmp w6, #0x9 (9)
0xffff7ab3d350    48  b.ne #+0x90 (addr 0xffff7ab3d3e0)
0xffff7ab3d354    52  movz x1, #0xe2c0
0xffff7ab3d358    56  movk x1, #0x9ab, lsl #16
0xffff7ab3d35c    60  ldp x2, x0, [x1]
0xffff7ab3d360    64  adds x16, x2, #0x58 (88)
0xffff7ab3d364    68  ccmp x16, x0, #nzCv, lo
0xffff7ab3d368    72  b.hi #+0xc4 (addr 0xffff7ab3d42c)
0xffff7ab3d36c    76  str x16, [x1]
0xffff7ab3d370    80  orr x2, x2, #0x1
0xffff7ab3d374    84  stur x5, [x2, #-1]
0xffff7ab3d378    88  ldur x0, [x4, #7]
0xffff7ab3d37c    92  stur x0, [x2, #7]
0xffff7ab3d380    96  ldur x0, [x4, #15]
0xffff7ab3d384   100  stur x0, [x2, #15]
0xffff7ab3d388   104  ldur x0, [x4, #23]
0xffff7ab3d38c   108  stur x0, [x2, #23]
0xffff7ab3d390   112  ldur x0, [x4, #31]
0xffff7ab3d394   116  stur x0, [x2, #31]
0xffff7ab3d398   120  ldur x0, [x4, #39]
0xffff7ab3d39c   124  stur x0, [x2, #39]
0xffff7ab3d3a0   128  ldur x0, [x4, #47]
0xffff7ab3d3a4   132  stur x0, [x2, #47]
0xffff7ab3d3a8   136  ldur x0, [x4, #55]
0xffff7ab3d3ac   140  stur x0, [x2, #55]
0xffff7ab3d3b0   144  ldur x0, [x4, #63]
0xffff7ab3d3b4   148  stur x0, [x2, #63]
0xffff7ab3d3b8   152  add x0, x2, #0x48 (72)
0xffff7ab3d3bc   156  ldr x1, pc+228 (addr 0x0000ffff7ab3d4a0)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab3d3c0   160  stur x1, [x0, #-1]
0xffff7ab3d3c4   164  stur x7, [x0, #7]
0xffff7ab3d3c8   168  ldur w0, [x7, #35]
0xffff7ab3d3cc   172  add w0, w0, #0x1 (1)
0xffff7ab3d3d0   176  lsl x0, x0, #32
0xffff7ab3d3d4   180  stur x0, [x7, #31]
0xffff7ab3d3d8   184  mov x0, x2
0xffff7ab3d3dc   188  ret
0xffff7ab3d3e0   192  b #+0xe0 (addr 0xffff7ab3d4c0)
0xffff7ab3d3e4   196  sub csp, jssp, #0x10 (16)
0xffff7ab3d3e8   200  stp fp, lr, [jssp, #-16]!
0xffff7ab3d3ec   204  movz fp, #0xa00000000
0xffff7ab3d3f0   208  sub csp, jssp, #0x8 (8)
0xffff7ab3d3f4   212  str fp, [jssp, #-8]!
0xffff7ab3d3f8   216  add fp, jssp, #0x8 (8)
0xffff7ab3d3fc   220  ldur x16, [x2, #-1]
0xffff7ab3d400   224  ldr x17, [x26, #120]
0xffff7ab3d404   228  cmp x16, x17
0xffff7ab3d408   232  b.ne #+0xc8 (addr 0xffff7ab3d4d0)
0xffff7ab3d40c   236  ldur d29, [x2, #7]
0xffff7ab3d410   240  fcvtzs w6, d29
0xffff7ab3d414   244  scvtf d0, w6
0xffff7ab3d418   248  fcmp d29, d0
0xffff7ab3d41c   252  b.ne #+0xb4 (addr 0xffff7ab3d4d0)
0xffff7ab3d420   256  ldr lr, [jssp, #16]
0xffff7ab3d424   260  ldp xzr, fp, [jssp], #24
0xffff7ab3d428   264  b #-0xfc (addr 0xffff7ab3d32c)
0xffff7ab3d42c   268  sub csp, jssp, #0x10 (16)
0xffff7ab3d430   272  stp fp, lr, [jssp, #-16]!
0xffff7ab3d434   276  movz fp, #0xa00000000
0xffff7ab3d438   280  sub csp, jssp, #0x8 (8)
0xffff7ab3d43c   284  str fp, [jssp, #-8]!
0xffff7ab3d440   288  add fp, jssp, #0x8 (8)
0xffff7ab3d444   292  movz x2, #0x0
0xffff7ab3d448   296  mov x16, lr
0xffff7ab3d44c   300  ldr x17, pc+92 (addr 0x0000ffff7ab3d4a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab3d450   304  blr x17
0xffff7ab3d454   308  movz x0, #0x5800000000
0xffff7ab3d458   312  movz x10, #0x0
0xffff7ab3d45c   316  sub csp, jssp, #0x10 (16)
0xffff7ab3d460   320  stp x10, x0, [jssp, #-16]!
0xffff7ab3d464   324  movz x0, #0x2
0xffff7ab3d468   328  movz x1, #0x5b88
0xffff7ab3d46c   332  movk x1, #0xe2, lsl #16
0xffff7ab3d470   336  ldr x16, pc+64 (addr 0x0000ffff7ab3d4b0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab3d474   340  blr x16
0xffff7ab3d478   344  str x0, [jssp, #16]
0xffff7ab3d47c   348  ldr x16, pc+60 (addr 0x0000ffff7ab3d4b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab3d480   352  blr x16
0xffff7ab3d484   356  ldr lr, [jssp, #16]
0xffff7ab3d488   360  ldp xzr, fp, [jssp], #24
0xffff7ab3d48c   364  b #-0x118 (addr 0xffff7ab3d374)
0xffff7ab3d490   368  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0xffff7ab3d494   372  d63f03e0       constant
0xffff7ab3d498   376  20d04241       constant
0xffff7ab3d49c   380  00000000       constant
0xffff7ab3d4a0   384  4ec05d81       constant
0xffff7ab3d4a4   388  00000000       constant
0xffff7ab3d4a8   392  7ab06820       constant
0xffff7ab3d4ac   396  0000ffff       constant
0xffff7ab3d4b0   400  7ab06260       constant
0xffff7ab3d4b4   404  0000ffff       constant
0xffff7ab3d4b8   408  7ab068e0       constant
0xffff7ab3d4bc   412  0000ffff       constant
0xffff7ab3d4c0   416  movz x16, #0x0
0xffff7ab3d4c4   420  sub csp, jssp, #0x10 (16)
0xffff7ab3d4c8   424  stp fp, lr, [jssp, #-16]!
0xffff7ab3d4cc   428  bl #+0xc (addr 0xffff7ab3d4d8)
0xffff7ab3d4d0   432  movz x16, #0x8
0xffff7ab3d4d4   436  bl #+0x14 (addr 0xffff7ab3d4e8)
0xffff7ab3d4d8   440  movz x17, #0xa00000000
0xffff7ab3d4dc   444  sub csp, jssp, #0x10 (16)
0xffff7ab3d4e0   448  stp x17, cp, [jssp, #-16]!
0xffff7ab3d4e4   452  add fp, jssp, #0x10 (16)
0xffff7ab3d4e8   456  ldr x17, pc+24 (addr 0x0000ffff7ab3d500)    ;; lazy deoptimization bailout 0
0xffff7ab3d4ec   460  add x17, x17, x16
0xffff7ab3d4f0   464  br x17
0xffff7ab3d4f4   468  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab3d4f8   472  d63f03e0       constant
0xffff7ab3d4fc   476  d503201f       constant
0xffff7ab3d500   480  7a906000       constant
0xffff7ab3d504   484  0000ffff       constant


Safepoints (size = 21)
0xffff7ab3d478   344  000 | x2 | x4 | x5 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 25)
0xffff7ab3d334  embedded object  (0x20d04241 <undefined>)
0xffff7ab3d3bc  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab3d44c  code target (STUB)  (0xffff7ab06820)
0xffff7ab3d470  code target (STUB)  (0xffff7ab06260)
0xffff7ab3d47c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab3d490  constant pool (size 48)
0xffff7ab3d4e8  runtime entry
0xffff7ab3d4f4  constant pool (size 20)


kind = STUB
major_key = ArrayConstructorStub
name = ArrayConstructorStub_None
compiler = unknown
Instructions (size = 288)
0xffff7ab3d580     0  ldur cp, [x1, #39]
0xffff7ab3d584     4  cmp x3, x1
0xffff7ab3d588     8  b.ne #+0x98 (addr 0xffff7ab3d620)
0xffff7ab3d58c    12  ldr x16, [x26, #40]
0xffff7ab3d590    16  cmp x2, x16
0xffff7ab3d594    20  b.eq #+0x84 (addr 0xffff7ab3d618)
0xffff7ab3d598    24  ldursw x3, [x2, #11]
0xffff7ab3d59c    28  and x3, x3, #0x7fff
0xffff7ab3d5a0    32  cbnz x3, #+0xc (addr 0xffff7ab3d5ac)
0xffff7ab3d5a4    36  ldr x16, pc+164 (addr 0x0000ffff7ab3d648)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 0
0xffff7ab3d5a8    40  br x16
0xffff7ab3d5ac    44  cmp x3, #0x1 (1)
0xffff7ab3d5b0    48  b.ne #+0xc (addr 0xffff7ab3d5bc)
0xffff7ab3d5b4    52  ldr x16, pc+156 (addr 0x0000ffff7ab3d650)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 1
0xffff7ab3d5b8    56  br x16
0xffff7ab3d5bc    60  cmp x3, #0x4 (4)
0xffff7ab3d5c0    64  b.ne #+0xc (addr 0xffff7ab3d5cc)
0xffff7ab3d5c4    68  ldr x16, pc+148 (addr 0x0000ffff7ab3d658)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 4
0xffff7ab3d5c8    72  br x16
0xffff7ab3d5cc    76  cmp x3, #0x5 (5)
0xffff7ab3d5d0    80  b.ne #+0xc (addr 0xffff7ab3d5dc)
0xffff7ab3d5d4    84  ldr x16, pc+140 (addr 0x0000ffff7ab3d660)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 5
0xffff7ab3d5d8    88  br x16
0xffff7ab3d5dc    92  cmp x3, #0x2 (2)
0xffff7ab3d5e0    96  b.ne #+0xc (addr 0xffff7ab3d5ec)
0xffff7ab3d5e4   100  ldr x16, pc+132 (addr 0x0000ffff7ab3d668)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 2
0xffff7ab3d5e8   104  br x16
0xffff7ab3d5ec   108  cmp x3, #0x3 (3)
0xffff7ab3d5f0   112  b.ne #+0xc (addr 0xffff7ab3d5fc)
0xffff7ab3d5f4   116  ldr x16, pc+124 (addr 0x0000ffff7ab3d670)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 3
0xffff7ab3d5f8   120  br x16
0xffff7ab3d5fc   124  movz x0, #0x9f00000000
0xffff7ab3d600   128  sub csp, jssp, #0x8 (8)
0xffff7ab3d604   132  str x0, [jssp, #-8]!
0xffff7ab3d608   136  movz x0, #0x1
0xffff7ab3d60c   140  ldr x1, pc+108 (addr 0x0000ffff7ab3d678)    ;; external reference (Runtime::Abort)
0xffff7ab3d610   144  ldr x16, pc+112 (addr 0x0000ffff7ab3d680)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab3d614   148  blr x16
0xffff7ab3d618   152  ldr x16, pc+112 (addr 0x0000ffff7ab3d688)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 256
0xffff7ab3d61c   156  br x16
0xffff7ab3d620   160  str x1, [jssp]
0xffff7ab3d624   164  movz x0, #0x3
0xffff7ab3d628   168  sub csp, jssp, #0x10 (16)
0xffff7ab3d62c   172  stp x2, x3, [jssp, #-16]!
0xffff7ab3d630   176  ldr x1, pc+96 (addr 0x0000ffff7ab3d690)    ;; external reference (Runtime::NewArray)
0xffff7ab3d634   180  ldr x16, pc+100 (addr 0x0000ffff7ab3d698)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab3d638   184  br x16
0xffff7ab3d63c   188  5800031f       constant pool begin (num_const = 24)    ;; constant pool
0xffff7ab3d640   192  d63f03e0       constant
0xffff7ab3d644   196  d503201f       constant
0xffff7ab3d648   200  7ab069a0       constant
0xffff7ab3d64c   204  0000ffff       constant
0xffff7ab3d650   208  7ab06e00       constant
0xffff7ab3d654   212  0000ffff       constant
0xffff7ab3d658   216  7ab07280       constant
0xffff7ab3d65c   220  0000ffff       constant
0xffff7ab3d660   224  7ab07480       constant
0xffff7ab3d664   228  0000ffff       constant
0xffff7ab3d668   232  7ab07680       constant
0xffff7ab3d66c   236  0000ffff       constant
0xffff7ab3d670   240  7ab078a0       constant
0xffff7ab3d674   244  0000ffff       constant
0xffff7ab3d678   248  00eda820       constant
0xffff7ab3d67c   252  00000000       constant
0xffff7ab3d680   256  7ab06060       constant
0xffff7ab3d684   260  0000ffff       constant
0xffff7ab3d688   264  7ab06be0       constant
0xffff7ab3d68c   268  0000ffff       constant
0xffff7ab3d690   272  00de2850       constant
0xffff7ab3d694   276  00000000       constant
0xffff7ab3d698   280  7ab06060       constant
0xffff7ab3d69c   284  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab3d5a4  code target (STUB)  (0xffff7ab069a0)
0xffff7ab3d5b4  code target (STUB)  (0xffff7ab06e00)
0xffff7ab3d5c4  code target (STUB)  (0xffff7ab07280)
0xffff7ab3d5d4  code target (STUB)  (0xffff7ab07480)
0xffff7ab3d5e4  code target (STUB)  (0xffff7ab07680)
0xffff7ab3d5f4  code target (STUB)  (0xffff7ab078a0)
0xffff7ab3d60c  external reference (Runtime::Abort)  (0xeda820)
0xffff7ab3d610  code target (STUB)  (0xffff7ab06060)
0xffff7ab3d618  code target (STUB)  (0xffff7ab06be0)
0xffff7ab3d630  external reference (Runtime::NewArray)  (0xde2850)
0xffff7ab3d634  code target (STUB)  (0xffff7ab06060)
0xffff7ab3d63c  constant pool (size 100)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 393216
name = CallICStub(args(0), ANY, 
compiler = unknown
Instructions (size = 488)
0xffff7ab3d700     0  add x4, x2, x3, asr #29
0xffff7ab3d704     4  ldur x4, [x4, #15]
0xffff7ab3d708     8  ldur x5, [x4, #7]
0xffff7ab3d70c    12  cmp x5, x1
0xffff7ab3d710    16  b.ne #+0x2c (addr 0xffff7ab3d73c)
0xffff7ab3d714    20  tbz w1, #0, #+0x28 (addr 0xffff7ab3d73c)
0xffff7ab3d718    24  add x2, x2, x3, asr #29
0xffff7ab3d71c    28  add x2, x2, #0x18 (24)
0xffff7ab3d720    32  ldur x3, [x2, #-1]
0xffff7ab3d724    36  movz x16, #0x200000000
0xffff7ab3d728    40  add x3, x3, x16
0xffff7ab3d72c    44  stur x3, [x2, #-1]
0xffff7ab3d730    48  movz x0, #0x0
0xffff7ab3d734    52  ldr x16, pc+372 (addr 0x0000ffff7ab3d8a8)    ;; code: BUILTIN
0xffff7ab3d738    56  br x16
0xffff7ab3d73c    60  ldr x16, [x26, #2400]
0xffff7ab3d740    64  cmp x4, x16
0xffff7ab3d744    68  b.eq #+0x78 (addr 0xffff7ab3d7bc)
0xffff7ab3d748    72  ldur x5, [x4, #-1]
0xffff7ab3d74c    76  ldr x16, [x26, #2736]
0xffff7ab3d750    80  cmp x5, x16
0xffff7ab3d754    84  b.ne #+0x40 (addr 0xffff7ab3d794)
0xffff7ab3d758    88  ldur x5, [cp, #39]
0xffff7ab3d75c    92  ldur x5, [x5, #95]
0xffff7ab3d760    96  cmp x1, x5
0xffff7ab3d764   100  b.ne #+0xec (addr 0xffff7ab3d850)
0xffff7ab3d768   104  movz x0, #0x0
0xffff7ab3d76c   108  add x2, x2, x3, asr #29
0xffff7ab3d770   112  add x2, x2, #0x18 (24)
0xffff7ab3d774   116  ldur x3, [x2, #-1]
0xffff7ab3d778   120  movz x16, #0x200000000
0xffff7ab3d77c   124  add x3, x3, x16
0xffff7ab3d780   128  stur x3, [x2, #-1]
0xffff7ab3d784   132  mov x2, x4
0xffff7ab3d788   136  mov x3, x1
0xffff7ab3d78c   140  ldr x16, pc+292 (addr 0x0000ffff7ab3d8b0)    ;; code: STUB, ArrayConstructorStub, minor: 1
0xffff7ab3d790   144  br x16
0xffff7ab3d794   148  ldr x16, [x26, #2568]
0xffff7ab3d798   152  cmp x4, x16
0xffff7ab3d79c   156  b.eq #+0xb4 (addr 0xffff7ab3d850)
0xffff7ab3d7a0   160  ldur x5, [x4, #-1]
0xffff7ab3d7a4   164  ldrb w5, [x5, #11]
0xffff7ab3d7a8   168  cmp x5, #0xc9 (201)
0xffff7ab3d7ac   172  b.ne #+0xa4 (addr 0xffff7ab3d850)
0xffff7ab3d7b0   176  add x4, x2, x3, asr #29
0xffff7ab3d7b4   180  ldr x5, [x26, #2400]
0xffff7ab3d7b8   184  stur x5, [x4, #15]
0xffff7ab3d7bc   188  movz x0, #0x0
0xffff7ab3d7c0   192  ldr x16, pc+248 (addr 0x0000ffff7ab3d8b8)    ;; code: BUILTIN
0xffff7ab3d7c4   196  br x16
0xffff7ab3d7c8   200  tbz w1, #0, #+0x88 (addr 0xffff7ab3d850)
0xffff7ab3d7cc   204  ldur x5, [x1, #-1]
0xffff7ab3d7d0   208  ldrb w5, [x5, #11]
0xffff7ab3d7d4   212  cmp x5, #0xc9 (201)
0xffff7ab3d7d8   216  b.ne #+0x78 (addr 0xffff7ab3d850)
0xffff7ab3d7dc   220  ldur x5, [cp, #39]
0xffff7ab3d7e0   224  ldur x5, [x5, #95]
0xffff7ab3d7e4   228  cmp x1, x5
0xffff7ab3d7e8   232  b.eq #+0x68 (addr 0xffff7ab3d850)
0xffff7ab3d7ec   236  ldur x4, [x1, #39]
0xffff7ab3d7f0   240  ldur x4, [x4, #39]
0xffff7ab3d7f4   244  ldur x5, [cp, #39]
0xffff7ab3d7f8   248  cmp x4, x5
0xffff7ab3d7fc   252  b.ne #+0x54 (addr 0xffff7ab3d850)
0xffff7ab3d800   256  movz x5, #0x200000000
0xffff7ab3d804   260  adds x4, x2, x3, asr #29
0xffff7ab3d808   264  stur x5, [x4, #23]
0xffff7ab3d80c   268  movz x16, #0xc00000000
0xffff7ab3d810   272  sub csp, jssp, #0x10 (16)
0xffff7ab3d814   276  stp fp, lr, [jssp, #-16]!
0xffff7ab3d818   280  sub csp, jssp, #0x10 (16)
0xffff7ab3d81c   284  str x16, [jssp, #-8]!
0xffff7ab3d820   288  ldr x17, pc+160 (addr 0x0000ffff7ab3d8c0)    ;; object: 0xffff7ab3d6a1 <Code: CALL_IC>
0xffff7ab3d824   292  sub csp, jssp, #0x10 (16)
0xffff7ab3d828   296  str x17, [jssp, #-8]!
0xffff7ab3d82c   300  add fp, jssp, #0x10 (16)
0xffff7ab3d830   304  sub csp, jssp, #0x8 (8)
0xffff7ab3d834   308  str x1, [jssp, #-8]!
0xffff7ab3d838   312  ldr x16, pc+144 (addr 0x0000ffff7ab3d8c8)    ;; code: STUB, CreateWeakCellStub, minor: 0
0xffff7ab3d83c   316  blr x16
0xffff7ab3d840   320  ldr x1, [jssp], #8
0xffff7ab3d844   324  mov jssp, fp
0xffff7ab3d848   328  ldp fp, lr, [jssp], #16
0xffff7ab3d84c   332  b #-0x11c (addr 0xffff7ab3d730)
0xffff7ab3d850   336  movz x16, #0xc00000000
0xffff7ab3d854   340  sub csp, jssp, #0x10 (16)
0xffff7ab3d858   344  stp fp, lr, [jssp, #-16]!
0xffff7ab3d85c   348  sub csp, jssp, #0x10 (16)
0xffff7ab3d860   352  str x16, [jssp, #-8]!
0xffff7ab3d864   356  ldr x17, pc+108 (addr 0x0000ffff7ab3d8d0)    ;; object: 0xffff7ab3d6a1 <Code: CALL_IC>
0xffff7ab3d868   360  sub csp, jssp, #0x10 (16)
0xffff7ab3d86c   364  str x17, [jssp, #-8]!
0xffff7ab3d870   368  add fp, jssp, #0x10 (16)
0xffff7ab3d874   372  sub csp, jssp, #0x18 (24)
0xffff7ab3d878   376  stp x3, x2, [jssp, #-24]!
0xffff7ab3d87c   380  str x1, [jssp, #16]
0xffff7ab3d880   384  movz x0, #0x3
0xffff7ab3d884   388  ldr x1, pc+84 (addr 0x0000ffff7ab3d8d8)    ;; external reference (Runtime::CallIC_Miss)
0xffff7ab3d888   392  ldr x16, pc+88 (addr 0x0000ffff7ab3d8e0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab3d88c   396  blr x16
0xffff7ab3d890   400  mov x1, x0
0xffff7ab3d894   404  mov jssp, fp
0xffff7ab3d898   408  ldp fp, lr, [jssp], #16
0xffff7ab3d89c   412  b #-0xe0 (addr 0xffff7ab3d7bc)
0xffff7ab3d8a0   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7ab3d8a4   420  d63f03e0       constant
0xffff7ab3d8a8   424  7ab1e820       constant
0xffff7ab3d8ac   428  0000ffff       constant
0xffff7ab3d8b0   432  7ab3d580       constant
0xffff7ab3d8b4   436  0000ffff       constant
0xffff7ab3d8b8   440  7ab1f820       constant
0xffff7ab3d8bc   444  0000ffff       constant
0xffff7ab3d8c0   448  7ab3d6a1       constant
0xffff7ab3d8c4   452  0000ffff       constant
0xffff7ab3d8c8   456  7ab0ddc0       constant
0xffff7ab3d8cc   460  0000ffff       constant
0xffff7ab3d8d0   464  7ab3d6a1       constant
0xffff7ab3d8d4   468  0000ffff       constant
0xffff7ab3d8d8   472  00c86928       constant
0xffff7ab3d8dc   476  00000000       constant
0xffff7ab3d8e0   480  7ab06060       constant
0xffff7ab3d8e4   484  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab3d734  code target (BUILTIN)  (0xffff7ab1e820)
0xffff7ab3d78c  code target (STUB)  (0xffff7ab3d580)
0xffff7ab3d7c0  code target (BUILTIN)  (0xffff7ab1f820)
0xffff7ab3d820  embedded object  (0xffff7ab3d6a1 <Code: CALL_IC>)
0xffff7ab3d838  code target (STUB)  (0xffff7ab0ddc0)
0xffff7ab3d864  embedded object  (0xffff7ab3d6a1 <Code: CALL_IC>)
0xffff7ab3d884  external reference (Runtime::CallIC_Miss)  (0xc86928)
0xffff7ab3d888  code target (STUB)  (0xffff7ab06060)
0xffff7ab3d8a0  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 393216
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0xffff7ab3d960     0  ldur x2, [fp, #-16]
0xffff7ab3d964     4  ldur x2, [x2, #31]
0xffff7ab3d968     8  ldur x2, [x2, #87]
0xffff7ab3d96c    12  ldr x16, pc+20 (addr 0x0000ffff7ab3d980)    ;; code: CALL_IC, GENERIC
0xffff7ab3d970    16  br x16
0xffff7ab3d974    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab3d978    24  d63f03e0       constant
0xffff7ab3d97c    28  d503201f       constant
0xffff7ab3d980    32  7ab3d700       constant
0xffff7ab3d984    36  0000ffff       constant


RelocInfo (size = 7)
0xffff7ab3d96c  code target (CALL_IC)  (0xffff7ab3d700)
0xffff7ab3d974  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = next
compiler = unknown
Instructions (size = 152)
0xffff7ab411c0     0  sub csp, jssp, #0x8 (8)
0xffff7ab411c4     4  str x3, [jssp, #-8]!
0xffff7ab411c8     8  sub csp, jssp, #0x8 (8)
0xffff7ab411cc    12  str x4, [jssp, #-8]!
0xffff7ab411d0    16  ldr x3, pc+88 (addr 0x0000ffff7ab41228)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7ab411d4    20  ldur x3, [x3, #7]
0xffff7ab411d8    24  cmp x3, #0x0 (0)
0xffff7ab411dc    28  b.ne #+0x30 (addr 0xffff7ab4120c)
0xffff7ab411e0    32  tbz w0, #0, #+0x2c (addr 0xffff7ab4120c)
0xffff7ab411e4    36  ldr x5, pc+76 (addr 0x0000ffff7ab41230)    ;; object: 0x20d62a21 WeakCell for 0x4ec0c9c9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab411e8    40  ldur x5, [x5, #7]
0xffff7ab411ec    44  tbz w5, #0, #+0x20 (addr 0xffff7ab4120c)
0xffff7ab411f0    48  ldursw x4, [x5, #15]
0xffff7ab411f4    52  tbnz w4, #23, #+0x18 (addr 0xffff7ab4120c)
0xffff7ab411f8    56  ldr x4, [jssp], #8
0xffff7ab411fc    60  ldr x3, [jssp], #8
0xffff7ab41200    64  ldr x2, pc+56 (addr 0x0000ffff7ab41238)    ;; object: 0x20d05209 <String[4]: next>
0xffff7ab41204    68  ldr x16, pc+60 (addr 0x0000ffff7ab41240)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0xffff7ab41208    72  br x16
0xffff7ab4120c    76  ldr x2, pc+60 (addr 0x0000ffff7ab41248)    ;; object: 0x20d05209 <String[4]: next>
0xffff7ab41210    80  ldr x4, [jssp], #8
0xffff7ab41214    84  ldr x3, [jssp], #8
0xffff7ab41218    88  ldr x16, pc+56 (addr 0x0000ffff7ab41250)    ;; code: BUILTIN
0xffff7ab4121c    92  br x16
0xffff7ab41220    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab41224   100  d63f03e0       constant
0xffff7ab41228   104  20d5b0f1       constant
0xffff7ab4122c   108  00000000       constant
0xffff7ab41230   112  20d62a21       constant
0xffff7ab41234   116  00000000       constant
0xffff7ab41238   120  20d05209       constant
0xffff7ab4123c   124  00000000       constant
0xffff7ab41240   128  7ab38860       constant
0xffff7ab41244   132  0000ffff       constant
0xffff7ab41248   136  20d05209       constant
0xffff7ab4124c   140  00000000       constant
0xffff7ab41250   144  7ab22420       constant
0xffff7ab41254   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7ab411d0  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7ab411e4  embedded object  (0x20d62a21 WeakCell for 0x4ec0c9c9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab41200  embedded object  (0x20d05209 <String[4]: next>)
0xffff7ab41204  code target (HANDLER)  (0xffff7ab38860)
0xffff7ab4120c  embedded object  (0x20d05209 <String[4]: next>)
0xffff7ab41218  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab41220  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = next
compiler = unknown
Instructions (size = 152)
0xffff7ab412c0     0  sub csp, jssp, #0x8 (8)
0xffff7ab412c4     4  str x3, [jssp, #-8]!
0xffff7ab412c8     8  sub csp, jssp, #0x8 (8)
0xffff7ab412cc    12  str x4, [jssp, #-8]!
0xffff7ab412d0    16  ldr x3, pc+88 (addr 0x0000ffff7ab41328)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7ab412d4    20  ldur x3, [x3, #7]
0xffff7ab412d8    24  cmp x3, #0x0 (0)
0xffff7ab412dc    28  b.ne #+0x30 (addr 0xffff7ab4130c)
0xffff7ab412e0    32  tbz w0, #0, #+0x2c (addr 0xffff7ab4130c)
0xffff7ab412e4    36  ldr x5, pc+76 (addr 0x0000ffff7ab41330)    ;; object: 0x20d62a21 WeakCell for 0x4ec0c9c9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab412e8    40  ldur x5, [x5, #7]
0xffff7ab412ec    44  tbz w5, #0, #+0x20 (addr 0xffff7ab4130c)
0xffff7ab412f0    48  ldursw x4, [x5, #15]
0xffff7ab412f4    52  tbnz w4, #23, #+0x18 (addr 0xffff7ab4130c)
0xffff7ab412f8    56  ldr x4, [jssp], #8
0xffff7ab412fc    60  ldr x3, [jssp], #8
0xffff7ab41300    64  ldr x2, pc+56 (addr 0x0000ffff7ab41338)    ;; object: 0x20d05209 <String[4]: next>
0xffff7ab41304    68  ldr x16, pc+60 (addr 0x0000ffff7ab41340)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0xffff7ab41308    72  br x16
0xffff7ab4130c    76  ldr x2, pc+60 (addr 0x0000ffff7ab41348)    ;; object: 0x20d05209 <String[4]: next>
0xffff7ab41310    80  ldr x4, [jssp], #8
0xffff7ab41314    84  ldr x3, [jssp], #8
0xffff7ab41318    88  ldr x16, pc+56 (addr 0x0000ffff7ab41350)    ;; code: BUILTIN
0xffff7ab4131c    92  br x16
0xffff7ab41320    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab41324   100  d63f03e0       constant
0xffff7ab41328   104  20d5b0f1       constant
0xffff7ab4132c   108  00000000       constant
0xffff7ab41330   112  20d62a21       constant
0xffff7ab41334   116  00000000       constant
0xffff7ab41338   120  20d05209       constant
0xffff7ab4133c   124  00000000       constant
0xffff7ab41340   128  7ab38860       constant
0xffff7ab41344   132  0000ffff       constant
0xffff7ab41348   136  20d05209       constant
0xffff7ab4134c   140  00000000       constant
0xffff7ab41350   144  7ab22420       constant
0xffff7ab41354   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7ab412d0  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7ab412e4  embedded object  (0x20d62a21 WeakCell for 0x4ec0c9c9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab41300  embedded object  (0x20d05209 <String[4]: next>)
0xffff7ab41304  code target (HANDLER)  (0xffff7ab38860)
0xffff7ab4130c  embedded object  (0x20d05209 <String[4]: next>)
0xffff7ab41318  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab41320  constant pool (size 56)

kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0xffff7ab41580     0  adr xzr, #+0x40 (addr 0xffff7ab415c0)
0xffff7ab41584     4  adr xzr, #+0x360 (addr 0xffff7ab418e4)
0xffff7ab41588     8  ldr x16, pc+1736 (addr 0x0000ffff7ab41c50)    ;; external reference (store_buffer_top)
0xffff7ab4158c    12  ldr x6, [x16]
0xffff7ab41590    16  str x7, [x6], #8
0xffff7ab41594    20  str x6, [x16]
0xffff7ab41598    24  tst x6, #0x1ffff
0xffff7ab4159c    28  b.eq #+0x8 (addr 0xffff7ab415a4)
0xffff7ab415a0    32  ret
0xffff7ab415a4    36  sub csp, jssp, #0x8 (8)
0xffff7ab415a8    40  str lr, [jssp, #-8]!
0xffff7ab415ac    44  ldr x17, pc+1708 (addr 0x0000ffff7ab41c58)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab415b0    48  blr x17
0xffff7ab415b4    52  ldr lr, [jssp], #8
0xffff7ab415b8    56  ret
0xffff7ab415bc    60  ret
0xffff7ab415c0    64  sub csp, jssp, #0x10 (16)
0xffff7ab415c4    68  stp x2, x0, [jssp, #-16]!
0xffff7ab415c8    72  ldr x6, [x7]
0xffff7ab415cc    76  and x16, x6, #0xfffffffffff00000
0xffff7ab415d0    80  ldr x16, [x16, #8]
0xffff7ab415d4    84  tst x16, #0x18
0xffff7ab415d8    88  b.eq #+0x1d8 (addr 0xffff7ab417b0)
0xffff7ab415dc    92  and x16, x1, #0xfffffffffff00000
0xffff7ab415e0    96  ldr x16, [x16, #8]
0xffff7ab415e4   100  tst x16, #0x18
0xffff7ab415e8   104  b.ne #+0x1c8 (addr 0xffff7ab417b0)
0xffff7ab415ec   108  and x6, x1, #0xfffffffffff00000
0xffff7ab415f0   112  ldr x0, [x6, #104]
0xffff7ab415f4   116  subs x0, x0, #0x1 (1)
0xffff7ab415f8   120  str x0, [x6, #104]
0xffff7ab415fc   124  b.mi #+0xc4 (addr 0xffff7ab416c0)
0xffff7ab41600   128  ubfx x16, x1, #8, #12
0xffff7ab41604   132  and x6, x1, #0xfffffffffff00000
0xffff7ab41608   136  add x6, x6, x16, lsl #2
0xffff7ab4160c   140  ubfx x0, x1, #3, #5
0xffff7ab41610   144  ldr x6, [x6, #360]
0xffff7ab41614   148  lsr x6, x6, x0
0xffff7ab41618   152  tbz w6, #0, #+0x8 (addr 0xffff7ab41620)
0xffff7ab4161c   156  tbnz w6, #1, #+0x3c (addr 0xffff7ab41658)
0xffff7ab41620   160  ldp x2, x0, [jssp], #16
0xffff7ab41624   164  ldr x16, pc+1596 (addr 0x0000ffff7ab41c60)    ;; external reference (store_buffer_top)
0xffff7ab41628   168  ldr x6, [x16]
0xffff7ab4162c   172  str x7, [x6], #8
0xffff7ab41630   176  str x6, [x16]
0xffff7ab41634   180  tst x6, #0x1ffff
0xffff7ab41638   184  b.eq #+0x8 (addr 0xffff7ab41640)
0xffff7ab4163c   188  ret
0xffff7ab41640   192  sub csp, jssp, #0x8 (8)
0xffff7ab41644   196  str lr, [jssp, #-8]!
0xffff7ab41648   200  ldr x17, pc+1568 (addr 0x0000ffff7ab41c68)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab4164c   204  blr x17
0xffff7ab41650   208  ldr lr, [jssp], #8
0xffff7ab41654   212  ret
0xffff7ab41658   216  ldr x6, [x7]
0xffff7ab4165c   220  sub csp, jssp, #0x10 (16)
0xffff7ab41660   224  stp x1, x7, [jssp, #-16]!
0xffff7ab41664   228  ubfx x16, x6, #8, #12
0xffff7ab41668   232  and x0, x6, #0xfffffffffff00000
0xffff7ab4166c   236  add x0, x0, x16, lsl #2
0xffff7ab41670   240  ubfx x1, x6, #3, #5
0xffff7ab41674   244  ldr x7, [x0, #360]
0xffff7ab41678   248  lsr x7, x7, x1
0xffff7ab4167c   252  tbz w7, #0, #+0x40 (addr 0xffff7ab416bc)
0xffff7ab41680   256  ldp x1, x7, [jssp], #16
0xffff7ab41684   260  ldp x2, x0, [jssp], #16
0xffff7ab41688   264  ldr x16, pc+1512 (addr 0x0000ffff7ab41c70)    ;; external reference (store_buffer_top)
0xffff7ab4168c   268  ldr x6, [x16]
0xffff7ab41690   272  str x7, [x6], #8
0xffff7ab41694   276  str x6, [x16]
0xffff7ab41698   280  tst x6, #0x1ffff
0xffff7ab4169c   284  b.eq #+0x8 (addr 0xffff7ab416a4)
0xffff7ab416a0   288  ret
0xffff7ab416a4   292  sub csp, jssp, #0x8 (8)
0xffff7ab416a8   296  str lr, [jssp, #-8]!
0xffff7ab416ac   300  ldr x17, pc+1484 (addr 0x0000ffff7ab41c78)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab416b0   304  blr x17
0xffff7ab416b4   308  ldr lr, [jssp], #8
0xffff7ab416b8   312  ret
0xffff7ab416bc   316  ldp x1, x7, [jssp], #16
0xffff7ab416c0   320  sub csp, jssp, #0x78 (120)
0xffff7ab416c4   324  stp x14, x15, [jssp, #-32]!
0xffff7ab416c8   328  stp x18, lr, [jssp, #16]
0xffff7ab416cc   332  stp x10, x11, [jssp, #-32]!
0xffff7ab416d0   336  stp x12, x13, [jssp, #16]
0xffff7ab416d4   340  stp x5, x7, [jssp, #-32]!
0xffff7ab416d8   344  stp x8, x9, [jssp, #16]
0xffff7ab416dc   348  stp x1, x3, [jssp, #-24]!
0xffff7ab416e0   352  str x4, [jssp, #16]
0xffff7ab416e4   356  sub csp, jssp, #0xb0 (176)
0xffff7ab416e8   360  stp d26, d27, [jssp, #-32]!
0xffff7ab416ec   364  stp d28, d29, [jssp, #16]
0xffff7ab416f0   368  stp d22, d23, [jssp, #-32]!
0xffff7ab416f4   372  stp d24, d25, [jssp, #16]
0xffff7ab416f8   376  stp d18, d19, [jssp, #-32]!
0xffff7ab416fc   380  stp d20, d21, [jssp, #16]
0xffff7ab41700   384  stp d6, d7, [jssp, #-32]!
0xffff7ab41704   388  stp d16, d17, [jssp, #16]
0xffff7ab41708   392  stp d2, d3, [jssp, #-32]!
0xffff7ab4170c   396  stp d4, d5, [jssp, #16]
0xffff7ab41710   400  stp d0, d1, [jssp, #-16]!
0xffff7ab41714   404  mov x0, x1
0xffff7ab41718   408  mov x1, x7
0xffff7ab4171c   412  ldr x2, pc+1380 (addr 0x0000ffff7ab41c80)    ;; external reference (isolate)
0xffff7ab41720   416  ldr x16, pc+1384 (addr 0x0000ffff7ab41c88)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab41724   420  and csp, jssp, #0xfffffffffffffff0
0xffff7ab41728   424  blr x16
0xffff7ab4172c   428  ldp d2, d3, [jssp, #16]
0xffff7ab41730   432  ldp d0, d1, [jssp], #32
0xffff7ab41734   436  ldp d6, d7, [jssp, #16]
0xffff7ab41738   440  ldp d4, d5, [jssp], #32
0xffff7ab4173c   444  ldp d18, d19, [jssp, #16]
0xffff7ab41740   448  ldp d16, d17, [jssp], #32
0xffff7ab41744   452  ldp d22, d23, [jssp, #16]
0xffff7ab41748   456  ldp d20, d21, [jssp], #32
0xffff7ab4174c   460  ldp d26, d27, [jssp, #16]
0xffff7ab41750   464  ldp d24, d25, [jssp], #32
0xffff7ab41754   468  ldp d28, d29, [jssp], #16
0xffff7ab41758   472  ldp x4, x5, [jssp, #16]
0xffff7ab4175c   476  ldp x1, x3, [jssp], #32
0xffff7ab41760   480  ldp x9, x10, [jssp, #16]
0xffff7ab41764   484  ldp x7, x8, [jssp], #32
0xffff7ab41768   488  ldp x13, x14, [jssp, #16]
0xffff7ab4176c   492  ldp x11, x12, [jssp], #32
0xffff7ab41770   496  ldr lr, [jssp, #16]
0xffff7ab41774   500  ldp x15, x18, [jssp], #24
0xffff7ab41778   504  ldp x2, x0, [jssp], #16
0xffff7ab4177c   508  ldr x16, pc+1300 (addr 0x0000ffff7ab41c90)    ;; external reference (store_buffer_top)
0xffff7ab41780   512  ldr x6, [x16]
0xffff7ab41784   516  str x7, [x6], #8
0xffff7ab41788   520  str x6, [x16]
0xffff7ab4178c   524  tst x6, #0x1ffff
0xffff7ab41790   528  b.eq #+0x8 (addr 0xffff7ab41798)
0xffff7ab41794   532  ret
0xffff7ab41798   536  sub csp, jssp, #0x8 (8)
0xffff7ab4179c   540  str lr, [jssp, #-8]!
0xffff7ab417a0   544  ldr x17, pc+1272 (addr 0x0000ffff7ab41c98)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab417a4   548  blr x17
0xffff7ab417a8   552  ldr lr, [jssp], #8
0xffff7ab417ac   556  ret
0xffff7ab417b0   560  and x6, x1, #0xfffffffffff00000
0xffff7ab417b4   564  ldr x0, [x6, #104]
0xffff7ab417b8   568  subs x0, x0, #0x1 (1)
0xffff7ab417bc   572  str x0, [x6, #104]
0xffff7ab417c0   576  b.mi #+0x64 (addr 0xffff7ab41824)
0xffff7ab417c4   580  ubfx x16, x1, #8, #12
0xffff7ab417c8   584  and x6, x1, #0xfffffffffff00000
0xffff7ab417cc   588  add x6, x6, x16, lsl #2
0xffff7ab417d0   592  ubfx x0, x1, #3, #5
0xffff7ab417d4   596  ldr x6, [x6, #360]
0xffff7ab417d8   600  lsr x6, x6, x0
0xffff7ab417dc   604  tbz w6, #0, #+0x8 (addr 0xffff7ab417e4)
0xffff7ab417e0   608  tbnz w6, #1, #+0xc (addr 0xffff7ab417ec)
0xffff7ab417e4   612  ldp x2, x0, [jssp], #16
0xffff7ab417e8   616  ret
0xffff7ab417ec   620  ldr x6, [x7]
0xffff7ab417f0   624  sub csp, jssp, #0x10 (16)
0xffff7ab417f4   628  stp x1, x7, [jssp, #-16]!
0xffff7ab417f8   632  ubfx x16, x6, #8, #12
0xffff7ab417fc   636  and x0, x6, #0xfffffffffff00000
0xffff7ab41800   640  add x0, x0, x16, lsl #2
0xffff7ab41804   644  ubfx x1, x6, #3, #5
0xffff7ab41808   648  ldr x7, [x0, #360]
0xffff7ab4180c   652  lsr x7, x7, x1
0xffff7ab41810   656  tbz w7, #0, #+0x10 (addr 0xffff7ab41820)
0xffff7ab41814   660  ldp x1, x7, [jssp], #16
0xffff7ab41818   664  ldp x2, x0, [jssp], #16
0xffff7ab4181c   668  ret
0xffff7ab41820   672  ldp x1, x7, [jssp], #16
0xffff7ab41824   676  sub csp, jssp, #0x78 (120)
0xffff7ab41828   680  stp x14, x15, [jssp, #-32]!
0xffff7ab4182c   684  stp x18, lr, [jssp, #16]
0xffff7ab41830   688  stp x10, x11, [jssp, #-32]!
0xffff7ab41834   692  stp x12, x13, [jssp, #16]
0xffff7ab41838   696  stp x5, x7, [jssp, #-32]!
0xffff7ab4183c   700  stp x8, x9, [jssp, #16]
0xffff7ab41840   704  stp x1, x3, [jssp, #-24]!
0xffff7ab41844   708  str x4, [jssp, #16]
0xffff7ab41848   712  sub csp, jssp, #0xb0 (176)
0xffff7ab4184c   716  stp d26, d27, [jssp, #-32]!
0xffff7ab41850   720  stp d28, d29, [jssp, #16]
0xffff7ab41854   724  stp d22, d23, [jssp, #-32]!
0xffff7ab41858   728  stp d24, d25, [jssp, #16]
0xffff7ab4185c   732  stp d18, d19, [jssp, #-32]!
0xffff7ab41860   736  stp d20, d21, [jssp, #16]
0xffff7ab41864   740  stp d6, d7, [jssp, #-32]!
0xffff7ab41868   744  stp d16, d17, [jssp, #16]
0xffff7ab4186c   748  stp d2, d3, [jssp, #-32]!
0xffff7ab41870   752  stp d4, d5, [jssp, #16]
0xffff7ab41874   756  stp d0, d1, [jssp, #-16]!
0xffff7ab41878   760  mov x0, x1
0xffff7ab4187c   764  mov x1, x7
0xffff7ab41880   768  ldr x2, pc+1056 (addr 0x0000ffff7ab41ca0)    ;; external reference (isolate)
0xffff7ab41884   772  ldr x16, pc+1060 (addr 0x0000ffff7ab41ca8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab41888   776  and csp, jssp, #0xfffffffffffffff0
0xffff7ab4188c   780  blr x16
0xffff7ab41890   784  ldp d2, d3, [jssp, #16]
0xffff7ab41894   788  ldp d0, d1, [jssp], #32
0xffff7ab41898   792  ldp d6, d7, [jssp, #16]
0xffff7ab4189c   796  ldp d4, d5, [jssp], #32
0xffff7ab418a0   800  ldp d18, d19, [jssp, #16]
0xffff7ab418a4   804  ldp d16, d17, [jssp], #32
0xffff7ab418a8   808  ldp d22, d23, [jssp, #16]
0xffff7ab418ac   812  ldp d20, d21, [jssp], #32
0xffff7ab418b0   816  ldp d26, d27, [jssp, #16]
0xffff7ab418b4   820  ldp d24, d25, [jssp], #32
0xffff7ab418b8   824  ldp d28, d29, [jssp], #16
0xffff7ab418bc   828  ldp x4, x5, [jssp, #16]
0xffff7ab418c0   832  ldp x1, x3, [jssp], #32
0xffff7ab418c4   836  ldp x9, x10, [jssp, #16]
0xffff7ab418c8   840  ldp x7, x8, [jssp], #32
0xffff7ab418cc   844  ldp x13, x14, [jssp, #16]
0xffff7ab418d0   848  ldp x11, x12, [jssp], #32
0xffff7ab418d4   852  ldr lr, [jssp, #16]
0xffff7ab418d8   856  ldp x15, x18, [jssp], #24
0xffff7ab418dc   860  ldp x2, x0, [jssp], #16
0xffff7ab418e0   864  ret
0xffff7ab418e4   868  sub csp, jssp, #0x10 (16)
0xffff7ab418e8   872  stp x2, x0, [jssp, #-16]!
0xffff7ab418ec   876  ldr x6, [x7]
0xffff7ab418f0   880  and x16, x6, #0xfffffffffff00000
0xffff7ab418f4   884  ldr x16, [x16, #8]
0xffff7ab418f8   888  tst x16, #0x18
0xffff7ab418fc   892  b.eq #+0x1f8 (addr 0xffff7ab41af4)
0xffff7ab41900   896  and x16, x1, #0xfffffffffff00000
0xffff7ab41904   900  ldr x16, [x16, #8]
0xffff7ab41908   904  tst x16, #0x18
0xffff7ab4190c   908  b.ne #+0x1e8 (addr 0xffff7ab41af4)
0xffff7ab41910   912  and x6, x1, #0xfffffffffff00000
0xffff7ab41914   916  ldr x0, [x6, #104]
0xffff7ab41918   920  subs x0, x0, #0x1 (1)
0xffff7ab4191c   924  str x0, [x6, #104]
0xffff7ab41920   928  b.mi #+0xe4 (addr 0xffff7ab41a04)
0xffff7ab41924   932  ubfx x16, x1, #8, #12
0xffff7ab41928   936  and x6, x1, #0xfffffffffff00000
0xffff7ab4192c   940  add x6, x6, x16, lsl #2
0xffff7ab41930   944  ubfx x0, x1, #3, #5
0xffff7ab41934   948  ldr x6, [x6, #360]
0xffff7ab41938   952  lsr x6, x6, x0
0xffff7ab4193c   956  tbz w6, #0, #+0x8 (addr 0xffff7ab41944)
0xffff7ab41940   960  tbnz w6, #1, #+0x3c (addr 0xffff7ab4197c)
0xffff7ab41944   964  ldp x2, x0, [jssp], #16
0xffff7ab41948   968  ldr x16, pc+872 (addr 0x0000ffff7ab41cb0)    ;; external reference (store_buffer_top)
0xffff7ab4194c   972  ldr x6, [x16]
0xffff7ab41950   976  str x7, [x6], #8
0xffff7ab41954   980  str x6, [x16]
0xffff7ab41958   984  tst x6, #0x1ffff
0xffff7ab4195c   988  b.eq #+0x8 (addr 0xffff7ab41964)
0xffff7ab41960   992  ret
0xffff7ab41964   996  sub csp, jssp, #0x8 (8)
0xffff7ab41968  1000  str lr, [jssp, #-8]!
0xffff7ab4196c  1004  ldr x17, pc+844 (addr 0x0000ffff7ab41cb8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab41970  1008  blr x17
0xffff7ab41974  1012  ldr lr, [jssp], #8
0xffff7ab41978  1016  ret
0xffff7ab4197c  1020  ldr x6, [x7]
0xffff7ab41980  1024  and x0, x6, #0xfffffffffff00000
0xffff7ab41984  1028  ldr x0, [x0, #8]
0xffff7ab41988  1032  tbz w0, #6, #+0x18 (addr 0xffff7ab419a0)
0xffff7ab4198c  1036  and x0, x1, #0xfffffffffff00000
0xffff7ab41990  1040  ldr x0, [x0, #8]
0xffff7ab41994  1044  movz x16, #0x58
0xffff7ab41998  1048  tst x0, x16
0xffff7ab4199c  1052  b.eq #+0x68 (addr 0xffff7ab41a04)
0xffff7ab419a0  1056  sub csp, jssp, #0x10 (16)
0xffff7ab419a4  1060  stp x1, x7, [jssp, #-16]!
0xffff7ab419a8  1064  ubfx x16, x6, #8, #12
0xffff7ab419ac  1068  and x0, x6, #0xfffffffffff00000
0xffff7ab419b0  1072  add x0, x0, x16, lsl #2
0xffff7ab419b4  1076  ubfx x1, x6, #3, #5
0xffff7ab419b8  1080  ldr x7, [x0, #360]
0xffff7ab419bc  1084  lsr x7, x7, x1
0xffff7ab419c0  1088  tbz w7, #0, #+0x40 (addr 0xffff7ab41a00)
0xffff7ab419c4  1092  ldp x1, x7, [jssp], #16
0xffff7ab419c8  1096  ldp x2, x0, [jssp], #16
0xffff7ab419cc  1100  ldr x16, pc+756 (addr 0x0000ffff7ab41cc0)    ;; external reference (store_buffer_top)
0xffff7ab419d0  1104  ldr x6, [x16]
0xffff7ab419d4  1108  str x7, [x6], #8
0xffff7ab419d8  1112  str x6, [x16]
0xffff7ab419dc  1116  tst x6, #0x1ffff
0xffff7ab419e0  1120  b.eq #+0x8 (addr 0xffff7ab419e8)
0xffff7ab419e4  1124  ret
0xffff7ab419e8  1128  sub csp, jssp, #0x8 (8)
0xffff7ab419ec  1132  str lr, [jssp, #-8]!
0xffff7ab419f0  1136  ldr x17, pc+728 (addr 0x0000ffff7ab41cc8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab419f4  1140  blr x17
0xffff7ab419f8  1144  ldr lr, [jssp], #8
0xffff7ab419fc  1148  ret
0xffff7ab41a00  1152  ldp x1, x7, [jssp], #16
0xffff7ab41a04  1156  sub csp, jssp, #0x78 (120)
0xffff7ab41a08  1160  stp x14, x15, [jssp, #-32]!
0xffff7ab41a0c  1164  stp x18, lr, [jssp, #16]
0xffff7ab41a10  1168  stp x10, x11, [jssp, #-32]!
0xffff7ab41a14  1172  stp x12, x13, [jssp, #16]
0xffff7ab41a18  1176  stp x5, x7, [jssp, #-32]!
0xffff7ab41a1c  1180  stp x8, x9, [jssp, #16]
0xffff7ab41a20  1184  stp x1, x3, [jssp, #-24]!
0xffff7ab41a24  1188  str x4, [jssp, #16]
0xffff7ab41a28  1192  sub csp, jssp, #0xb0 (176)
0xffff7ab41a2c  1196  stp d26, d27, [jssp, #-32]!
0xffff7ab41a30  1200  stp d28, d29, [jssp, #16]
0xffff7ab41a34  1204  stp d22, d23, [jssp, #-32]!
0xffff7ab41a38  1208  stp d24, d25, [jssp, #16]
0xffff7ab41a3c  1212  stp d18, d19, [jssp, #-32]!
0xffff7ab41a40  1216  stp d20, d21, [jssp, #16]
0xffff7ab41a44  1220  stp d6, d7, [jssp, #-32]!
0xffff7ab41a48  1224  stp d16, d17, [jssp, #16]
0xffff7ab41a4c  1228  stp d2, d3, [jssp, #-32]!
0xffff7ab41a50  1232  stp d4, d5, [jssp, #16]
0xffff7ab41a54  1236  stp d0, d1, [jssp, #-16]!
0xffff7ab41a58  1240  mov x0, x1
0xffff7ab41a5c  1244  mov x1, x7
0xffff7ab41a60  1248  ldr x2, pc+624 (addr 0x0000ffff7ab41cd0)    ;; external reference (isolate)
0xffff7ab41a64  1252  ldr x16, pc+628 (addr 0x0000ffff7ab41cd8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab41a68  1256  and csp, jssp, #0xfffffffffffffff0
0xffff7ab41a6c  1260  blr x16
0xffff7ab41a70  1264  ldp d2, d3, [jssp, #16]
0xffff7ab41a74  1268  ldp d0, d1, [jssp], #32
0xffff7ab41a78  1272  ldp d6, d7, [jssp, #16]
0xffff7ab41a7c  1276  ldp d4, d5, [jssp], #32
0xffff7ab41a80  1280  ldp d18, d19, [jssp, #16]
0xffff7ab41a84  1284  ldp d16, d17, [jssp], #32
0xffff7ab41a88  1288  ldp d22, d23, [jssp, #16]
0xffff7ab41a8c  1292  ldp d20, d21, [jssp], #32
0xffff7ab41a90  1296  ldp d26, d27, [jssp, #16]
0xffff7ab41a94  1300  ldp d24, d25, [jssp], #32
0xffff7ab41a98  1304  ldp d28, d29, [jssp], #16
0xffff7ab41a9c  1308  ldp x4, x5, [jssp, #16]
0xffff7ab41aa0  1312  ldp x1, x3, [jssp], #32
0xffff7ab41aa4  1316  ldp x9, x10, [jssp, #16]
0xffff7ab41aa8  1320  ldp x7, x8, [jssp], #32
0xffff7ab41aac  1324  ldp x13, x14, [jssp, #16]
0xffff7ab41ab0  1328  ldp x11, x12, [jssp], #32
0xffff7ab41ab4  1332  ldr lr, [jssp, #16]
0xffff7ab41ab8  1336  ldp x15, x18, [jssp], #24
0xffff7ab41abc  1340  ldp x2, x0, [jssp], #16
0xffff7ab41ac0  1344  ldr x16, pc+544 (addr 0x0000ffff7ab41ce0)    ;; external reference (store_buffer_top)
0xffff7ab41ac4  1348  ldr x6, [x16]
0xffff7ab41ac8  1352  str x7, [x6], #8
0xffff7ab41acc  1356  str x6, [x16]
0xffff7ab41ad0  1360  tst x6, #0x1ffff
0xffff7ab41ad4  1364  b.eq #+0x8 (addr 0xffff7ab41adc)
0xffff7ab41ad8  1368  ret
0xffff7ab41adc  1372  sub csp, jssp, #0x8 (8)
0xffff7ab41ae0  1376  str lr, [jssp, #-8]!
0xffff7ab41ae4  1380  ldr x17, pc+516 (addr 0x0000ffff7ab41ce8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab41ae8  1384  blr x17
0xffff7ab41aec  1388  ldr lr, [jssp], #8
0xffff7ab41af0  1392  ret
0xffff7ab41af4  1396  and x6, x1, #0xfffffffffff00000
0xffff7ab41af8  1400  ldr x0, [x6, #104]
0xffff7ab41afc  1404  subs x0, x0, #0x1 (1)
0xffff7ab41b00  1408  str x0, [x6, #104]
0xffff7ab41b04  1412  b.mi #+0x84 (addr 0xffff7ab41b88)
0xffff7ab41b08  1416  ubfx x16, x1, #8, #12
0xffff7ab41b0c  1420  and x6, x1, #0xfffffffffff00000
0xffff7ab41b10  1424  add x6, x6, x16, lsl #2
0xffff7ab41b14  1428  ubfx x0, x1, #3, #5
0xffff7ab41b18  1432  ldr x6, [x6, #360]
0xffff7ab41b1c  1436  lsr x6, x6, x0
0xffff7ab41b20  1440  tbz w6, #0, #+0x8 (addr 0xffff7ab41b28)
0xffff7ab41b24  1444  tbnz w6, #1, #+0xc (addr 0xffff7ab41b30)
0xffff7ab41b28  1448  ldp x2, x0, [jssp], #16
0xffff7ab41b2c  1452  ret
0xffff7ab41b30  1456  ldr x6, [x7]
0xffff7ab41b34  1460  and x0, x6, #0xfffffffffff00000
0xffff7ab41b38  1464  ldr x0, [x0, #8]
0xffff7ab41b3c  1468  tbz w0, #6, #+0x18 (addr 0xffff7ab41b54)
0xffff7ab41b40  1472  and x0, x1, #0xfffffffffff00000
0xffff7ab41b44  1476  ldr x0, [x0, #8]
0xffff7ab41b48  1480  movz x16, #0x58
0xffff7ab41b4c  1484  tst x0, x16
0xffff7ab41b50  1488  b.eq #+0x38 (addr 0xffff7ab41b88)
0xffff7ab41b54  1492  sub csp, jssp, #0x10 (16)
0xffff7ab41b58  1496  stp x1, x7, [jssp, #-16]!
0xffff7ab41b5c  1500  ubfx x16, x6, #8, #12
0xffff7ab41b60  1504  and x0, x6, #0xfffffffffff00000
0xffff7ab41b64  1508  add x0, x0, x16, lsl #2
0xffff7ab41b68  1512  ubfx x1, x6, #3, #5
0xffff7ab41b6c  1516  ldr x7, [x0, #360]
0xffff7ab41b70  1520  lsr x7, x7, x1
0xffff7ab41b74  1524  tbz w7, #0, #+0x10 (addr 0xffff7ab41b84)
0xffff7ab41b78  1528  ldp x1, x7, [jssp], #16
0xffff7ab41b7c  1532  ldp x2, x0, [jssp], #16
0xffff7ab41b80  1536  ret
0xffff7ab41b84  1540  ldp x1, x7, [jssp], #16
0xffff7ab41b88  1544  sub csp, jssp, #0x78 (120)
0xffff7ab41b8c  1548  stp x14, x15, [jssp, #-32]!
0xffff7ab41b90  1552  stp x18, lr, [jssp, #16]
0xffff7ab41b94  1556  stp x10, x11, [jssp, #-32]!
0xffff7ab41b98  1560  stp x12, x13, [jssp, #16]
0xffff7ab41b9c  1564  stp x5, x7, [jssp, #-32]!
0xffff7ab41ba0  1568  stp x8, x9, [jssp, #16]
0xffff7ab41ba4  1572  stp x1, x3, [jssp, #-24]!
0xffff7ab41ba8  1576  str x4, [jssp, #16]
0xffff7ab41bac  1580  sub csp, jssp, #0xb0 (176)
0xffff7ab41bb0  1584  stp d26, d27, [jssp, #-32]!
0xffff7ab41bb4  1588  stp d28, d29, [jssp, #16]
0xffff7ab41bb8  1592  stp d22, d23, [jssp, #-32]!
0xffff7ab41bbc  1596  stp d24, d25, [jssp, #16]
0xffff7ab41bc0  1600  stp d18, d19, [jssp, #-32]!
0xffff7ab41bc4  1604  stp d20, d21, [jssp, #16]
0xffff7ab41bc8  1608  stp d6, d7, [jssp, #-32]!
0xffff7ab41bcc  1612  stp d16, d17, [jssp, #16]
0xffff7ab41bd0  1616  stp d2, d3, [jssp, #-32]!
0xffff7ab41bd4  1620  stp d4, d5, [jssp, #16]
0xffff7ab41bd8  1624  stp d0, d1, [jssp, #-16]!
0xffff7ab41bdc  1628  mov x0, x1
0xffff7ab41be0  1632  mov x1, x7
0xffff7ab41be4  1636  ldr x2, pc+268 (addr 0x0000ffff7ab41cf0)    ;; external reference (isolate)
0xffff7ab41be8  1640  ldr x16, pc+272 (addr 0x0000ffff7ab41cf8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab41bec  1644  and csp, jssp, #0xfffffffffffffff0
0xffff7ab41bf0  1648  blr x16
0xffff7ab41bf4  1652  ldp d2, d3, [jssp, #16]
0xffff7ab41bf8  1656  ldp d0, d1, [jssp], #32
0xffff7ab41bfc  1660  ldp d6, d7, [jssp, #16]
0xffff7ab41c00  1664  ldp d4, d5, [jssp], #32
0xffff7ab41c04  1668  ldp d18, d19, [jssp, #16]
0xffff7ab41c08  1672  ldp d16, d17, [jssp], #32
0xffff7ab41c0c  1676  ldp d22, d23, [jssp, #16]
0xffff7ab41c10  1680  ldp d20, d21, [jssp], #32
0xffff7ab41c14  1684  ldp d26, d27, [jssp, #16]
0xffff7ab41c18  1688  ldp d24, d25, [jssp], #32
0xffff7ab41c1c  1692  ldp d28, d29, [jssp], #16
0xffff7ab41c20  1696  ldp x4, x5, [jssp, #16]
0xffff7ab41c24  1700  ldp x1, x3, [jssp], #32
0xffff7ab41c28  1704  ldp x9, x10, [jssp, #16]
0xffff7ab41c2c  1708  ldp x7, x8, [jssp], #32
0xffff7ab41c30  1712  ldp x13, x14, [jssp, #16]
0xffff7ab41c34  1716  ldp x11, x12, [jssp], #32
0xffff7ab41c38  1720  ldr lr, [jssp, #16]
0xffff7ab41c3c  1724  ldp x15, x18, [jssp], #24
0xffff7ab41c40  1728  ldp x2, x0, [jssp], #16
0xffff7ab41c44  1732  ret
0xffff7ab41c48  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab41c4c  1740  d63f03e0       constant
0xffff7ab41c50  1744  09abe8c0       constant
0xffff7ab41c54  1748  00000000       constant
0xffff7ab41c58  1752  7ab065a0       constant
0xffff7ab41c5c  1756  0000ffff       constant
0xffff7ab41c60  1760  09abe8c0       constant
0xffff7ab41c64  1764  00000000       constant
0xffff7ab41c68  1768  7ab065a0       constant
0xffff7ab41c6c  1772  0000ffff       constant
0xffff7ab41c70  1776  09abe8c0       constant
0xffff7ab41c74  1780  00000000       constant
0xffff7ab41c78  1784  7ab065a0       constant
0xffff7ab41c7c  1788  0000ffff       constant
0xffff7ab41c80  1792  09abd2d0       constant
0xffff7ab41c84  1796  00000000       constant
0xffff7ab41c88  1800  00c2d958       constant
0xffff7ab41c8c  1804  00000000       constant
0xffff7ab41c90  1808  09abe8c0       constant
0xffff7ab41c94  1812  00000000       constant
0xffff7ab41c98  1816  7ab065a0       constant
0xffff7ab41c9c  1820  0000ffff       constant
0xffff7ab41ca0  1824  09abd2d0       constant
0xffff7ab41ca4  1828  00000000       constant
0xffff7ab41ca8  1832  00c2d958       constant
0xffff7ab41cac  1836  00000000       constant
0xffff7ab41cb0  1840  09abe8c0       constant
0xffff7ab41cb4  1844  00000000       constant
0xffff7ab41cb8  1848  7ab065a0       constant
0xffff7ab41cbc  1852  0000ffff       constant
0xffff7ab41cc0  1856  09abe8c0       constant
0xffff7ab41cc4  1860  00000000       constant
0xffff7ab41cc8  1864  7ab065a0       constant
0xffff7ab41ccc  1868  0000ffff       constant
0xffff7ab41cd0  1872  09abd2d0       constant
0xffff7ab41cd4  1876  00000000       constant
0xffff7ab41cd8  1880  00c2d958       constant
0xffff7ab41cdc  1884  00000000       constant
0xffff7ab41ce0  1888  09abe8c0       constant
0xffff7ab41ce4  1892  00000000       constant
0xffff7ab41ce8  1896  7ab065a0       constant
0xffff7ab41cec  1900  0000ffff       constant
0xffff7ab41cf0  1904  09abd2d0       constant
0xffff7ab41cf4  1908  00000000       constant
0xffff7ab41cf8  1912  00c2d958       constant
0xffff7ab41cfc  1916  00000000       constant


RelocInfo (size = 65)
0xffff7ab41588  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab415ac  code target (STUB)  (0xffff7ab065a0)
0xffff7ab41624  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab41648  code target (STUB)  (0xffff7ab065a0)
0xffff7ab41688  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab416ac  code target (STUB)  (0xffff7ab065a0)
0xffff7ab4171c  external reference (isolate)  (0x9abd2d0)
0xffff7ab41720  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab4177c  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab417a0  code target (STUB)  (0xffff7ab065a0)
0xffff7ab41880  external reference (isolate)  (0x9abd2d0)
0xffff7ab41884  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab41948  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab4196c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab419cc  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab419f0  code target (STUB)  (0xffff7ab065a0)
0xffff7ab41a60  external reference (isolate)  (0x9abd2d0)
0xffff7ab41a64  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab41ac0  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab41ae4  code target (STUB)  (0xffff7ab065a0)
0xffff7ab41be4  external reference (isolate)  (0x9abd2d0)
0xffff7ab41be8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab41c48  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0xffff7ab41d60     0  adr xzr, #+0x40 (addr 0xffff7ab41da0)
0xffff7ab41d64     4  adr xzr, #+0x360 (addr 0xffff7ab420c4)
0xffff7ab41d68     8  ldr x16, pc+1736 (addr 0x0000ffff7ab42430)    ;; external reference (store_buffer_top)
0xffff7ab41d6c    12  ldr x5, [x16]
0xffff7ab41d70    16  str x9, [x5], #8
0xffff7ab41d74    20  str x5, [x16]
0xffff7ab41d78    24  tst x5, #0x1ffff
0xffff7ab41d7c    28  b.eq #+0x8 (addr 0xffff7ab41d84)
0xffff7ab41d80    32  ret
0xffff7ab41d84    36  sub csp, jssp, #0x8 (8)
0xffff7ab41d88    40  str lr, [jssp, #-8]!
0xffff7ab41d8c    44  ldr x17, pc+1708 (addr 0x0000ffff7ab42438)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab41d90    48  blr x17
0xffff7ab41d94    52  ldr lr, [jssp], #8
0xffff7ab41d98    56  ret
0xffff7ab41d9c    60  ret
0xffff7ab41da0    64  sub csp, jssp, #0x10 (16)
0xffff7ab41da4    68  stp x1, x0, [jssp, #-16]!
0xffff7ab41da8    72  ldr x5, [x9]
0xffff7ab41dac    76  and x16, x5, #0xfffffffffff00000
0xffff7ab41db0    80  ldr x16, [x16, #8]
0xffff7ab41db4    84  tst x16, #0x18
0xffff7ab41db8    88  b.eq #+0x1d8 (addr 0xffff7ab41f90)
0xffff7ab41dbc    92  and x16, x8, #0xfffffffffff00000
0xffff7ab41dc0    96  ldr x16, [x16, #8]
0xffff7ab41dc4   100  tst x16, #0x18
0xffff7ab41dc8   104  b.ne #+0x1c8 (addr 0xffff7ab41f90)
0xffff7ab41dcc   108  and x5, x8, #0xfffffffffff00000
0xffff7ab41dd0   112  ldr x0, [x5, #104]
0xffff7ab41dd4   116  subs x0, x0, #0x1 (1)
0xffff7ab41dd8   120  str x0, [x5, #104]
0xffff7ab41ddc   124  b.mi #+0xc4 (addr 0xffff7ab41ea0)
0xffff7ab41de0   128  ubfx x16, x8, #8, #12
0xffff7ab41de4   132  and x5, x8, #0xfffffffffff00000
0xffff7ab41de8   136  add x5, x5, x16, lsl #2
0xffff7ab41dec   140  ubfx x0, x8, #3, #5
0xffff7ab41df0   144  ldr x5, [x5, #360]
0xffff7ab41df4   148  lsr x5, x5, x0
0xffff7ab41df8   152  tbz w5, #0, #+0x8 (addr 0xffff7ab41e00)
0xffff7ab41dfc   156  tbnz w5, #1, #+0x3c (addr 0xffff7ab41e38)
0xffff7ab41e00   160  ldp x1, x0, [jssp], #16
0xffff7ab41e04   164  ldr x16, pc+1596 (addr 0x0000ffff7ab42440)    ;; external reference (store_buffer_top)
0xffff7ab41e08   168  ldr x5, [x16]
0xffff7ab41e0c   172  str x9, [x5], #8
0xffff7ab41e10   176  str x5, [x16]
0xffff7ab41e14   180  tst x5, #0x1ffff
0xffff7ab41e18   184  b.eq #+0x8 (addr 0xffff7ab41e20)
0xffff7ab41e1c   188  ret
0xffff7ab41e20   192  sub csp, jssp, #0x8 (8)
0xffff7ab41e24   196  str lr, [jssp, #-8]!
0xffff7ab41e28   200  ldr x17, pc+1568 (addr 0x0000ffff7ab42448)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab41e2c   204  blr x17
0xffff7ab41e30   208  ldr lr, [jssp], #8
0xffff7ab41e34   212  ret
0xffff7ab41e38   216  ldr x5, [x9]
0xffff7ab41e3c   220  sub csp, jssp, #0x10 (16)
0xffff7ab41e40   224  stp x8, x9, [jssp, #-16]!
0xffff7ab41e44   228  ubfx x16, x5, #8, #12
0xffff7ab41e48   232  and x0, x5, #0xfffffffffff00000
0xffff7ab41e4c   236  add x0, x0, x16, lsl #2
0xffff7ab41e50   240  ubfx x8, x5, #3, #5
0xffff7ab41e54   244  ldr x9, [x0, #360]
0xffff7ab41e58   248  lsr x9, x9, x8
0xffff7ab41e5c   252  tbz w9, #0, #+0x40 (addr 0xffff7ab41e9c)
0xffff7ab41e60   256  ldp x8, x9, [jssp], #16
0xffff7ab41e64   260  ldp x1, x0, [jssp], #16
0xffff7ab41e68   264  ldr x16, pc+1512 (addr 0x0000ffff7ab42450)    ;; external reference (store_buffer_top)
0xffff7ab41e6c   268  ldr x5, [x16]
0xffff7ab41e70   272  str x9, [x5], #8
0xffff7ab41e74   276  str x5, [x16]
0xffff7ab41e78   280  tst x5, #0x1ffff
0xffff7ab41e7c   284  b.eq #+0x8 (addr 0xffff7ab41e84)
0xffff7ab41e80   288  ret
0xffff7ab41e84   292  sub csp, jssp, #0x8 (8)
0xffff7ab41e88   296  str lr, [jssp, #-8]!
0xffff7ab41e8c   300  ldr x17, pc+1484 (addr 0x0000ffff7ab42458)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab41e90   304  blr x17
0xffff7ab41e94   308  ldr lr, [jssp], #8
0xffff7ab41e98   312  ret
0xffff7ab41e9c   316  ldp x8, x9, [jssp], #16
0xffff7ab41ea0   320  sub csp, jssp, #0x78 (120)
0xffff7ab41ea4   324  stp x14, x15, [jssp, #-32]!
0xffff7ab41ea8   328  stp x18, lr, [jssp, #16]
0xffff7ab41eac   332  stp x10, x11, [jssp, #-32]!
0xffff7ab41eb0   336  stp x12, x13, [jssp, #16]
0xffff7ab41eb4   340  stp x6, x7, [jssp, #-32]!
0xffff7ab41eb8   344  stp x8, x9, [jssp, #16]
0xffff7ab41ebc   348  stp x2, x3, [jssp, #-24]!
0xffff7ab41ec0   352  str x4, [jssp, #16]
0xffff7ab41ec4   356  sub csp, jssp, #0xb0 (176)
0xffff7ab41ec8   360  stp d26, d27, [jssp, #-32]!
0xffff7ab41ecc   364  stp d28, d29, [jssp, #16]
0xffff7ab41ed0   368  stp d22, d23, [jssp, #-32]!
0xffff7ab41ed4   372  stp d24, d25, [jssp, #16]
0xffff7ab41ed8   376  stp d18, d19, [jssp, #-32]!
0xffff7ab41edc   380  stp d20, d21, [jssp, #16]
0xffff7ab41ee0   384  stp d6, d7, [jssp, #-32]!
0xffff7ab41ee4   388  stp d16, d17, [jssp, #16]
0xffff7ab41ee8   392  stp d2, d3, [jssp, #-32]!
0xffff7ab41eec   396  stp d4, d5, [jssp, #16]
0xffff7ab41ef0   400  stp d0, d1, [jssp, #-16]!
0xffff7ab41ef4   404  mov x0, x8
0xffff7ab41ef8   408  mov x1, x9
0xffff7ab41efc   412  ldr x2, pc+1380 (addr 0x0000ffff7ab42460)    ;; external reference (isolate)
0xffff7ab41f00   416  ldr x16, pc+1384 (addr 0x0000ffff7ab42468)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab41f04   420  and csp, jssp, #0xfffffffffffffff0
0xffff7ab41f08   424  blr x16
0xffff7ab41f0c   428  ldp d2, d3, [jssp, #16]
0xffff7ab41f10   432  ldp d0, d1, [jssp], #32
0xffff7ab41f14   436  ldp d6, d7, [jssp, #16]
0xffff7ab41f18   440  ldp d4, d5, [jssp], #32
0xffff7ab41f1c   444  ldp d18, d19, [jssp, #16]
0xffff7ab41f20   448  ldp d16, d17, [jssp], #32
0xffff7ab41f24   452  ldp d22, d23, [jssp, #16]
0xffff7ab41f28   456  ldp d20, d21, [jssp], #32
0xffff7ab41f2c   460  ldp d26, d27, [jssp, #16]
0xffff7ab41f30   464  ldp d24, d25, [jssp], #32
0xffff7ab41f34   468  ldp d28, d29, [jssp], #16
0xffff7ab41f38   472  ldp x4, x6, [jssp, #16]
0xffff7ab41f3c   476  ldp x2, x3, [jssp], #32
0xffff7ab41f40   480  ldp x9, x10, [jssp, #16]
0xffff7ab41f44   484  ldp x7, x8, [jssp], #32
0xffff7ab41f48   488  ldp x13, x14, [jssp, #16]
0xffff7ab41f4c   492  ldp x11, x12, [jssp], #32
0xffff7ab41f50   496  ldr lr, [jssp, #16]
0xffff7ab41f54   500  ldp x15, x18, [jssp], #24
0xffff7ab41f58   504  ldp x1, x0, [jssp], #16
0xffff7ab41f5c   508  ldr x16, pc+1300 (addr 0x0000ffff7ab42470)    ;; external reference (store_buffer_top)
0xffff7ab41f60   512  ldr x5, [x16]
0xffff7ab41f64   516  str x9, [x5], #8
0xffff7ab41f68   520  str x5, [x16]
0xffff7ab41f6c   524  tst x5, #0x1ffff
0xffff7ab41f70   528  b.eq #+0x8 (addr 0xffff7ab41f78)
0xffff7ab41f74   532  ret
0xffff7ab41f78   536  sub csp, jssp, #0x8 (8)
0xffff7ab41f7c   540  str lr, [jssp, #-8]!
0xffff7ab41f80   544  ldr x17, pc+1272 (addr 0x0000ffff7ab42478)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab41f84   548  blr x17
0xffff7ab41f88   552  ldr lr, [jssp], #8
0xffff7ab41f8c   556  ret
0xffff7ab41f90   560  and x5, x8, #0xfffffffffff00000
0xffff7ab41f94   564  ldr x0, [x5, #104]
0xffff7ab41f98   568  subs x0, x0, #0x1 (1)
0xffff7ab41f9c   572  str x0, [x5, #104]
0xffff7ab41fa0   576  b.mi #+0x64 (addr 0xffff7ab42004)
0xffff7ab41fa4   580  ubfx x16, x8, #8, #12
0xffff7ab41fa8   584  and x5, x8, #0xfffffffffff00000
0xffff7ab41fac   588  add x5, x5, x16, lsl #2
0xffff7ab41fb0   592  ubfx x0, x8, #3, #5
0xffff7ab41fb4   596  ldr x5, [x5, #360]
0xffff7ab41fb8   600  lsr x5, x5, x0
0xffff7ab41fbc   604  tbz w5, #0, #+0x8 (addr 0xffff7ab41fc4)
0xffff7ab41fc0   608  tbnz w5, #1, #+0xc (addr 0xffff7ab41fcc)
0xffff7ab41fc4   612  ldp x1, x0, [jssp], #16
0xffff7ab41fc8   616  ret
0xffff7ab41fcc   620  ldr x5, [x9]
0xffff7ab41fd0   624  sub csp, jssp, #0x10 (16)
0xffff7ab41fd4   628  stp x8, x9, [jssp, #-16]!
0xffff7ab41fd8   632  ubfx x16, x5, #8, #12
0xffff7ab41fdc   636  and x0, x5, #0xfffffffffff00000
0xffff7ab41fe0   640  add x0, x0, x16, lsl #2
0xffff7ab41fe4   644  ubfx x8, x5, #3, #5
0xffff7ab41fe8   648  ldr x9, [x0, #360]
0xffff7ab41fec   652  lsr x9, x9, x8
0xffff7ab41ff0   656  tbz w9, #0, #+0x10 (addr 0xffff7ab42000)
0xffff7ab41ff4   660  ldp x8, x9, [jssp], #16
0xffff7ab41ff8   664  ldp x1, x0, [jssp], #16
0xffff7ab41ffc   668  ret
0xffff7ab42000   672  ldp x8, x9, [jssp], #16
0xffff7ab42004   676  sub csp, jssp, #0x78 (120)
0xffff7ab42008   680  stp x14, x15, [jssp, #-32]!
0xffff7ab4200c   684  stp x18, lr, [jssp, #16]
0xffff7ab42010   688  stp x10, x11, [jssp, #-32]!
0xffff7ab42014   692  stp x12, x13, [jssp, #16]
0xffff7ab42018   696  stp x6, x7, [jssp, #-32]!
0xffff7ab4201c   700  stp x8, x9, [jssp, #16]
0xffff7ab42020   704  stp x2, x3, [jssp, #-24]!
0xffff7ab42024   708  str x4, [jssp, #16]
0xffff7ab42028   712  sub csp, jssp, #0xb0 (176)
0xffff7ab4202c   716  stp d26, d27, [jssp, #-32]!
0xffff7ab42030   720  stp d28, d29, [jssp, #16]
0xffff7ab42034   724  stp d22, d23, [jssp, #-32]!
0xffff7ab42038   728  stp d24, d25, [jssp, #16]
0xffff7ab4203c   732  stp d18, d19, [jssp, #-32]!
0xffff7ab42040   736  stp d20, d21, [jssp, #16]
0xffff7ab42044   740  stp d6, d7, [jssp, #-32]!
0xffff7ab42048   744  stp d16, d17, [jssp, #16]
0xffff7ab4204c   748  stp d2, d3, [jssp, #-32]!
0xffff7ab42050   752  stp d4, d5, [jssp, #16]
0xffff7ab42054   756  stp d0, d1, [jssp, #-16]!
0xffff7ab42058   760  mov x0, x8
0xffff7ab4205c   764  mov x1, x9
0xffff7ab42060   768  ldr x2, pc+1056 (addr 0x0000ffff7ab42480)    ;; external reference (isolate)
0xffff7ab42064   772  ldr x16, pc+1060 (addr 0x0000ffff7ab42488)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab42068   776  and csp, jssp, #0xfffffffffffffff0
0xffff7ab4206c   780  blr x16
0xffff7ab42070   784  ldp d2, d3, [jssp, #16]
0xffff7ab42074   788  ldp d0, d1, [jssp], #32
0xffff7ab42078   792  ldp d6, d7, [jssp, #16]
0xffff7ab4207c   796  ldp d4, d5, [jssp], #32
0xffff7ab42080   800  ldp d18, d19, [jssp, #16]
0xffff7ab42084   804  ldp d16, d17, [jssp], #32
0xffff7ab42088   808  ldp d22, d23, [jssp, #16]
0xffff7ab4208c   812  ldp d20, d21, [jssp], #32
0xffff7ab42090   816  ldp d26, d27, [jssp, #16]
0xffff7ab42094   820  ldp d24, d25, [jssp], #32
0xffff7ab42098   824  ldp d28, d29, [jssp], #16
0xffff7ab4209c   828  ldp x4, x6, [jssp, #16]
0xffff7ab420a0   832  ldp x2, x3, [jssp], #32
0xffff7ab420a4   836  ldp x9, x10, [jssp, #16]
0xffff7ab420a8   840  ldp x7, x8, [jssp], #32
0xffff7ab420ac   844  ldp x13, x14, [jssp, #16]
0xffff7ab420b0   848  ldp x11, x12, [jssp], #32
0xffff7ab420b4   852  ldr lr, [jssp, #16]
0xffff7ab420b8   856  ldp x15, x18, [jssp], #24
0xffff7ab420bc   860  ldp x1, x0, [jssp], #16
0xffff7ab420c0   864  ret
0xffff7ab420c4   868  sub csp, jssp, #0x10 (16)
0xffff7ab420c8   872  stp x1, x0, [jssp, #-16]!
0xffff7ab420cc   876  ldr x5, [x9]
0xffff7ab420d0   880  and x16, x5, #0xfffffffffff00000
0xffff7ab420d4   884  ldr x16, [x16, #8]
0xffff7ab420d8   888  tst x16, #0x18
0xffff7ab420dc   892  b.eq #+0x1f8 (addr 0xffff7ab422d4)
0xffff7ab420e0   896  and x16, x8, #0xfffffffffff00000
0xffff7ab420e4   900  ldr x16, [x16, #8]
0xffff7ab420e8   904  tst x16, #0x18
0xffff7ab420ec   908  b.ne #+0x1e8 (addr 0xffff7ab422d4)
0xffff7ab420f0   912  and x5, x8, #0xfffffffffff00000
0xffff7ab420f4   916  ldr x0, [x5, #104]
0xffff7ab420f8   920  subs x0, x0, #0x1 (1)
0xffff7ab420fc   924  str x0, [x5, #104]
0xffff7ab42100   928  b.mi #+0xe4 (addr 0xffff7ab421e4)
0xffff7ab42104   932  ubfx x16, x8, #8, #12
0xffff7ab42108   936  and x5, x8, #0xfffffffffff00000
0xffff7ab4210c   940  add x5, x5, x16, lsl #2
0xffff7ab42110   944  ubfx x0, x8, #3, #5
0xffff7ab42114   948  ldr x5, [x5, #360]
0xffff7ab42118   952  lsr x5, x5, x0
0xffff7ab4211c   956  tbz w5, #0, #+0x8 (addr 0xffff7ab42124)
0xffff7ab42120   960  tbnz w5, #1, #+0x3c (addr 0xffff7ab4215c)
0xffff7ab42124   964  ldp x1, x0, [jssp], #16
0xffff7ab42128   968  ldr x16, pc+872 (addr 0x0000ffff7ab42490)    ;; external reference (store_buffer_top)
0xffff7ab4212c   972  ldr x5, [x16]
0xffff7ab42130   976  str x9, [x5], #8
0xffff7ab42134   980  str x5, [x16]
0xffff7ab42138   984  tst x5, #0x1ffff
0xffff7ab4213c   988  b.eq #+0x8 (addr 0xffff7ab42144)
0xffff7ab42140   992  ret
0xffff7ab42144   996  sub csp, jssp, #0x8 (8)
0xffff7ab42148  1000  str lr, [jssp, #-8]!
0xffff7ab4214c  1004  ldr x17, pc+844 (addr 0x0000ffff7ab42498)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab42150  1008  blr x17
0xffff7ab42154  1012  ldr lr, [jssp], #8
0xffff7ab42158  1016  ret
0xffff7ab4215c  1020  ldr x5, [x9]
0xffff7ab42160  1024  and x0, x5, #0xfffffffffff00000
0xffff7ab42164  1028  ldr x0, [x0, #8]
0xffff7ab42168  1032  tbz w0, #6, #+0x18 (addr 0xffff7ab42180)
0xffff7ab4216c  1036  and x0, x8, #0xfffffffffff00000
0xffff7ab42170  1040  ldr x0, [x0, #8]
0xffff7ab42174  1044  movz x16, #0x58
0xffff7ab42178  1048  tst x0, x16
0xffff7ab4217c  1052  b.eq #+0x68 (addr 0xffff7ab421e4)
0xffff7ab42180  1056  sub csp, jssp, #0x10 (16)
0xffff7ab42184  1060  stp x8, x9, [jssp, #-16]!
0xffff7ab42188  1064  ubfx x16, x5, #8, #12
0xffff7ab4218c  1068  and x0, x5, #0xfffffffffff00000
0xffff7ab42190  1072  add x0, x0, x16, lsl #2
0xffff7ab42194  1076  ubfx x8, x5, #3, #5
0xffff7ab42198  1080  ldr x9, [x0, #360]
0xffff7ab4219c  1084  lsr x9, x9, x8
0xffff7ab421a0  1088  tbz w9, #0, #+0x40 (addr 0xffff7ab421e0)
0xffff7ab421a4  1092  ldp x8, x9, [jssp], #16
0xffff7ab421a8  1096  ldp x1, x0, [jssp], #16
0xffff7ab421ac  1100  ldr x16, pc+756 (addr 0x0000ffff7ab424a0)    ;; external reference (store_buffer_top)
0xffff7ab421b0  1104  ldr x5, [x16]
0xffff7ab421b4  1108  str x9, [x5], #8
0xffff7ab421b8  1112  str x5, [x16]
0xffff7ab421bc  1116  tst x5, #0x1ffff
0xffff7ab421c0  1120  b.eq #+0x8 (addr 0xffff7ab421c8)
0xffff7ab421c4  1124  ret
0xffff7ab421c8  1128  sub csp, jssp, #0x8 (8)
0xffff7ab421cc  1132  str lr, [jssp, #-8]!
0xffff7ab421d0  1136  ldr x17, pc+728 (addr 0x0000ffff7ab424a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab421d4  1140  blr x17
0xffff7ab421d8  1144  ldr lr, [jssp], #8
0xffff7ab421dc  1148  ret
0xffff7ab421e0  1152  ldp x8, x9, [jssp], #16
0xffff7ab421e4  1156  sub csp, jssp, #0x78 (120)
0xffff7ab421e8  1160  stp x14, x15, [jssp, #-32]!
0xffff7ab421ec  1164  stp x18, lr, [jssp, #16]
0xffff7ab421f0  1168  stp x10, x11, [jssp, #-32]!
0xffff7ab421f4  1172  stp x12, x13, [jssp, #16]
0xffff7ab421f8  1176  stp x6, x7, [jssp, #-32]!
0xffff7ab421fc  1180  stp x8, x9, [jssp, #16]
0xffff7ab42200  1184  stp x2, x3, [jssp, #-24]!
0xffff7ab42204  1188  str x4, [jssp, #16]
0xffff7ab42208  1192  sub csp, jssp, #0xb0 (176)
0xffff7ab4220c  1196  stp d26, d27, [jssp, #-32]!
0xffff7ab42210  1200  stp d28, d29, [jssp, #16]
0xffff7ab42214  1204  stp d22, d23, [jssp, #-32]!
0xffff7ab42218  1208  stp d24, d25, [jssp, #16]
0xffff7ab4221c  1212  stp d18, d19, [jssp, #-32]!
0xffff7ab42220  1216  stp d20, d21, [jssp, #16]
0xffff7ab42224  1220  stp d6, d7, [jssp, #-32]!
0xffff7ab42228  1224  stp d16, d17, [jssp, #16]
0xffff7ab4222c  1228  stp d2, d3, [jssp, #-32]!
0xffff7ab42230  1232  stp d4, d5, [jssp, #16]
0xffff7ab42234  1236  stp d0, d1, [jssp, #-16]!
0xffff7ab42238  1240  mov x0, x8
0xffff7ab4223c  1244  mov x1, x9
0xffff7ab42240  1248  ldr x2, pc+624 (addr 0x0000ffff7ab424b0)    ;; external reference (isolate)
0xffff7ab42244  1252  ldr x16, pc+628 (addr 0x0000ffff7ab424b8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab42248  1256  and csp, jssp, #0xfffffffffffffff0
0xffff7ab4224c  1260  blr x16
0xffff7ab42250  1264  ldp d2, d3, [jssp, #16]
0xffff7ab42254  1268  ldp d0, d1, [jssp], #32
0xffff7ab42258  1272  ldp d6, d7, [jssp, #16]
0xffff7ab4225c  1276  ldp d4, d5, [jssp], #32
0xffff7ab42260  1280  ldp d18, d19, [jssp, #16]
0xffff7ab42264  1284  ldp d16, d17, [jssp], #32
0xffff7ab42268  1288  ldp d22, d23, [jssp, #16]
0xffff7ab4226c  1292  ldp d20, d21, [jssp], #32
0xffff7ab42270  1296  ldp d26, d27, [jssp, #16]
0xffff7ab42274  1300  ldp d24, d25, [jssp], #32
0xffff7ab42278  1304  ldp d28, d29, [jssp], #16
0xffff7ab4227c  1308  ldp x4, x6, [jssp, #16]
0xffff7ab42280  1312  ldp x2, x3, [jssp], #32
0xffff7ab42284  1316  ldp x9, x10, [jssp, #16]
0xffff7ab42288  1320  ldp x7, x8, [jssp], #32
0xffff7ab4228c  1324  ldp x13, x14, [jssp, #16]
0xffff7ab42290  1328  ldp x11, x12, [jssp], #32
0xffff7ab42294  1332  ldr lr, [jssp, #16]
0xffff7ab42298  1336  ldp x15, x18, [jssp], #24
0xffff7ab4229c  1340  ldp x1, x0, [jssp], #16
0xffff7ab422a0  1344  ldr x16, pc+544 (addr 0x0000ffff7ab424c0)    ;; external reference (store_buffer_top)
0xffff7ab422a4  1348  ldr x5, [x16]
0xffff7ab422a8  1352  str x9, [x5], #8
0xffff7ab422ac  1356  str x5, [x16]
0xffff7ab422b0  1360  tst x5, #0x1ffff
0xffff7ab422b4  1364  b.eq #+0x8 (addr 0xffff7ab422bc)
0xffff7ab422b8  1368  ret
0xffff7ab422bc  1372  sub csp, jssp, #0x8 (8)
0xffff7ab422c0  1376  str lr, [jssp, #-8]!
0xffff7ab422c4  1380  ldr x17, pc+516 (addr 0x0000ffff7ab424c8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab422c8  1384  blr x17
0xffff7ab422cc  1388  ldr lr, [jssp], #8
0xffff7ab422d0  1392  ret
0xffff7ab422d4  1396  and x5, x8, #0xfffffffffff00000
0xffff7ab422d8  1400  ldr x0, [x5, #104]
0xffff7ab422dc  1404  subs x0, x0, #0x1 (1)
0xffff7ab422e0  1408  str x0, [x5, #104]
0xffff7ab422e4  1412  b.mi #+0x84 (addr 0xffff7ab42368)
0xffff7ab422e8  1416  ubfx x16, x8, #8, #12
0xffff7ab422ec  1420  and x5, x8, #0xfffffffffff00000
0xffff7ab422f0  1424  add x5, x5, x16, lsl #2
0xffff7ab422f4  1428  ubfx x0, x8, #3, #5
0xffff7ab422f8  1432  ldr x5, [x5, #360]
0xffff7ab422fc  1436  lsr x5, x5, x0
0xffff7ab42300  1440  tbz w5, #0, #+0x8 (addr 0xffff7ab42308)
0xffff7ab42304  1444  tbnz w5, #1, #+0xc (addr 0xffff7ab42310)
0xffff7ab42308  1448  ldp x1, x0, [jssp], #16
0xffff7ab4230c  1452  ret
0xffff7ab42310  1456  ldr x5, [x9]
0xffff7ab42314  1460  and x0, x5, #0xfffffffffff00000
0xffff7ab42318  1464  ldr x0, [x0, #8]
0xffff7ab4231c  1468  tbz w0, #6, #+0x18 (addr 0xffff7ab42334)
0xffff7ab42320  1472  and x0, x8, #0xfffffffffff00000
0xffff7ab42324  1476  ldr x0, [x0, #8]
0xffff7ab42328  1480  movz x16, #0x58
0xffff7ab4232c  1484  tst x0, x16
0xffff7ab42330  1488  b.eq #+0x38 (addr 0xffff7ab42368)
0xffff7ab42334  1492  sub csp, jssp, #0x10 (16)
0xffff7ab42338  1496  stp x8, x9, [jssp, #-16]!
0xffff7ab4233c  1500  ubfx x16, x5, #8, #12
0xffff7ab42340  1504  and x0, x5, #0xfffffffffff00000
0xffff7ab42344  1508  add x0, x0, x16, lsl #2
0xffff7ab42348  1512  ubfx x8, x5, #3, #5
0xffff7ab4234c  1516  ldr x9, [x0, #360]
0xffff7ab42350  1520  lsr x9, x9, x8
0xffff7ab42354  1524  tbz w9, #0, #+0x10 (addr 0xffff7ab42364)
0xffff7ab42358  1528  ldp x8, x9, [jssp], #16
0xffff7ab4235c  1532  ldp x1, x0, [jssp], #16
0xffff7ab42360  1536  ret
0xffff7ab42364  1540  ldp x8, x9, [jssp], #16
0xffff7ab42368  1544  sub csp, jssp, #0x78 (120)
0xffff7ab4236c  1548  stp x14, x15, [jssp, #-32]!
0xffff7ab42370  1552  stp x18, lr, [jssp, #16]
0xffff7ab42374  1556  stp x10, x11, [jssp, #-32]!
0xffff7ab42378  1560  stp x12, x13, [jssp, #16]
0xffff7ab4237c  1564  stp x6, x7, [jssp, #-32]!
0xffff7ab42380  1568  stp x8, x9, [jssp, #16]
0xffff7ab42384  1572  stp x2, x3, [jssp, #-24]!
0xffff7ab42388  1576  str x4, [jssp, #16]
0xffff7ab4238c  1580  sub csp, jssp, #0xb0 (176)
0xffff7ab42390  1584  stp d26, d27, [jssp, #-32]!
0xffff7ab42394  1588  stp d28, d29, [jssp, #16]
0xffff7ab42398  1592  stp d22, d23, [jssp, #-32]!
0xffff7ab4239c  1596  stp d24, d25, [jssp, #16]
0xffff7ab423a0  1600  stp d18, d19, [jssp, #-32]!
0xffff7ab423a4  1604  stp d20, d21, [jssp, #16]
0xffff7ab423a8  1608  stp d6, d7, [jssp, #-32]!
0xffff7ab423ac  1612  stp d16, d17, [jssp, #16]
0xffff7ab423b0  1616  stp d2, d3, [jssp, #-32]!
0xffff7ab423b4  1620  stp d4, d5, [jssp, #16]
0xffff7ab423b8  1624  stp d0, d1, [jssp, #-16]!
0xffff7ab423bc  1628  mov x0, x8
0xffff7ab423c0  1632  mov x1, x9
0xffff7ab423c4  1636  ldr x2, pc+268 (addr 0x0000ffff7ab424d0)    ;; external reference (isolate)
0xffff7ab423c8  1640  ldr x16, pc+272 (addr 0x0000ffff7ab424d8)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab423cc  1644  and csp, jssp, #0xfffffffffffffff0
0xffff7ab423d0  1648  blr x16
0xffff7ab423d4  1652  ldp d2, d3, [jssp, #16]
0xffff7ab423d8  1656  ldp d0, d1, [jssp], #32
0xffff7ab423dc  1660  ldp d6, d7, [jssp, #16]
0xffff7ab423e0  1664  ldp d4, d5, [jssp], #32
0xffff7ab423e4  1668  ldp d18, d19, [jssp, #16]
0xffff7ab423e8  1672  ldp d16, d17, [jssp], #32
0xffff7ab423ec  1676  ldp d22, d23, [jssp, #16]
0xffff7ab423f0  1680  ldp d20, d21, [jssp], #32
0xffff7ab423f4  1684  ldp d26, d27, [jssp, #16]
0xffff7ab423f8  1688  ldp d24, d25, [jssp], #32
0xffff7ab423fc  1692  ldp d28, d29, [jssp], #16
0xffff7ab42400  1696  ldp x4, x6, [jssp, #16]
0xffff7ab42404  1700  ldp x2, x3, [jssp], #32
0xffff7ab42408  1704  ldp x9, x10, [jssp, #16]
0xffff7ab4240c  1708  ldp x7, x8, [jssp], #32
0xffff7ab42410  1712  ldp x13, x14, [jssp, #16]
0xffff7ab42414  1716  ldp x11, x12, [jssp], #32
0xffff7ab42418  1720  ldr lr, [jssp, #16]
0xffff7ab4241c  1724  ldp x15, x18, [jssp], #24
0xffff7ab42420  1728  ldp x1, x0, [jssp], #16
0xffff7ab42424  1732  ret
0xffff7ab42428  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab4242c  1740  d63f03e0       constant
0xffff7ab42430  1744  09abe8c0       constant
0xffff7ab42434  1748  00000000       constant
0xffff7ab42438  1752  7ab065a0       constant
0xffff7ab4243c  1756  0000ffff       constant
0xffff7ab42440  1760  09abe8c0       constant
0xffff7ab42444  1764  00000000       constant
0xffff7ab42448  1768  7ab065a0       constant
0xffff7ab4244c  1772  0000ffff       constant
0xffff7ab42450  1776  09abe8c0       constant
0xffff7ab42454  1780  00000000       constant
0xffff7ab42458  1784  7ab065a0       constant
0xffff7ab4245c  1788  0000ffff       constant
0xffff7ab42460  1792  09abd2d0       constant
0xffff7ab42464  1796  00000000       constant
0xffff7ab42468  1800  00c2d958       constant
0xffff7ab4246c  1804  00000000       constant
0xffff7ab42470  1808  09abe8c0       constant
0xffff7ab42474  1812  00000000       constant
0xffff7ab42478  1816  7ab065a0       constant
0xffff7ab4247c  1820  0000ffff       constant
0xffff7ab42480  1824  09abd2d0       constant
0xffff7ab42484  1828  00000000       constant
0xffff7ab42488  1832  00c2d958       constant
0xffff7ab4248c  1836  00000000       constant
0xffff7ab42490  1840  09abe8c0       constant
0xffff7ab42494  1844  00000000       constant
0xffff7ab42498  1848  7ab065a0       constant
0xffff7ab4249c  1852  0000ffff       constant
0xffff7ab424a0  1856  09abe8c0       constant
0xffff7ab424a4  1860  00000000       constant
0xffff7ab424a8  1864  7ab065a0       constant
0xffff7ab424ac  1868  0000ffff       constant
0xffff7ab424b0  1872  09abd2d0       constant
0xffff7ab424b4  1876  00000000       constant
0xffff7ab424b8  1880  00c2d958       constant
0xffff7ab424bc  1884  00000000       constant
0xffff7ab424c0  1888  09abe8c0       constant
0xffff7ab424c4  1892  00000000       constant
0xffff7ab424c8  1896  7ab065a0       constant
0xffff7ab424cc  1900  0000ffff       constant
0xffff7ab424d0  1904  09abd2d0       constant
0xffff7ab424d4  1908  00000000       constant
0xffff7ab424d8  1912  00c2d958       constant
0xffff7ab424dc  1916  00000000       constant


RelocInfo (size = 65)
0xffff7ab41d68  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab41d8c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab41e04  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab41e28  code target (STUB)  (0xffff7ab065a0)
0xffff7ab41e68  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab41e8c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab41efc  external reference (isolate)  (0x9abd2d0)
0xffff7ab41f00  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab41f5c  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab41f80  code target (STUB)  (0xffff7ab065a0)
0xffff7ab42060  external reference (isolate)  (0x9abd2d0)
0xffff7ab42064  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab42128  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab4214c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab421ac  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab421d0  code target (STUB)  (0xffff7ab065a0)
0xffff7ab42240  external reference (isolate)  (0x9abd2d0)
0xffff7ab42244  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab422a0  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab422c4  code target (STUB)  (0xffff7ab065a0)
0xffff7ab423c4  external reference (isolate)  (0x9abd2d0)
0xffff7ab423c8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab42428  constant pool (size 184)


kind = STUB
major_key = FastArrayPushStub
name = FastArrayPushStub
compiler = crankshaft
Instructions (size = 2199)
0xffff7ab42540     0  movz x16, #0xa00000000
0xffff7ab42544     4  sub csp, jssp, #0x10 (16)
0xffff7ab42548     8  stp fp, lr, [jssp, #-16]!
0xffff7ab4254c    12  mov fp, jssp
0xffff7ab42550    16  sub csp, jssp, #0x8 (8)
0xffff7ab42554    20  sub jssp, jssp, #0x8 (8)
0xffff7ab42558    24  stur x16, [fp, #-8]
0xffff7ab4255c    28  mov x2, fp
0xffff7ab42560    32  add w1, w0, #0x2 (2)
0xffff7ab42564    36  ldr x1, [x2, w1, uxtw #3]
0xffff7ab42568    40  tbz w1, #0, #+0x758 (addr 0xffff7ab42cc0)
0xffff7ab4256c    44  ldur x3, [x1, #-1]
0xffff7ab42570    48  ldur x4, [x1, #-1]
0xffff7ab42574    52  ldrb w4, [x4, #11]
0xffff7ab42578    56  cmp x4, #0xbc (188)
0xffff7ab4257c    60  b.ne #+0x74c (addr 0xffff7ab42cc8)
0xffff7ab42580    64  ldrb w4, [x3, #13]
0xffff7ab42584    68  movz w16, #0x5
0xffff7ab42588    72  and w5, w4, w16
0xffff7ab4258c    76  cmp w5, #0x1 (1)
0xffff7ab42590    80  b.ne #+0x568 (addr 0xffff7ab42af8)
0xffff7ab42594    84  ldrb w5, [x3, #12]
0xffff7ab42598    88  and w5, w5, #0x20
0xffff7ab4259c    92  cmp w5, #0x20 (32)
0xffff7ab425a0    96  b.eq #+0x550 (addr 0xffff7ab42af0)
0xffff7ab425a4   100  ldur w5, [x3, #15]
0xffff7ab425a8   104  and w5, w5, #0x100000
0xffff7ab425ac   108  cmp w5, #0x100000 (1048576)
0xffff7ab425b0   112  b.eq #+0x538 (addr 0xffff7ab42ae8)
0xffff7ab425b4   116  ldur x5, [x3, #47]
0xffff7ab425b8   120  ldur w6, [x5, #43]
0xffff7ab425bc   124  and w5, w6, #0x4
0xffff7ab425c0   128  cmp w5, #0x4 (4)
0xffff7ab425c4   132  b.eq #+0x51c (addr 0xffff7ab42ae0)
0xffff7ab425c8   136  ldr x5, [x26, #56]
0xffff7ab425cc   140  ldr x6, [x26, #304]
0xffff7ab425d0   144  ldur x3, [x3, #23]
0xffff7ab425d4   148  cmp x3, x5
0xffff7ab425d8   152  b.eq #+0x40 (addr 0xffff7ab42618)
0xffff7ab425dc   156  ldur x7, [x3, #-1]
0xffff7ab425e0   160  ldrb w8, [x7, #11]
0xffff7ab425e4   164  cmp w8, #0xb4 (180)
0xffff7ab425e8   168  b.le #+0x20 (addr 0xffff7ab42608)
0xffff7ab425ec   172  cmp w8, #0xb6 (182)
0xffff7ab425f0   176  b.eq #+0x18 (addr 0xffff7ab42608)
0xffff7ab425f4   180  ldur x3, [x3, #15]
0xffff7ab425f8   184  cmp x3, x6
0xffff7ab425fc   188  b.ne #+0x14 (addr 0xffff7ab42610)
0xffff7ab42600   192  mov x3, x7
0xffff7ab42604   196  b #-0x34 (addr 0xffff7ab425d0)
0xffff7ab42608   200  ldr x16, pc+1488 (addr 0x0000ffff7ab42bd8)    ;; lazy deoptimization bailout 2
0xffff7ab4260c   204  blr x16
0xffff7ab42610   208  ldr x16, pc+1488 (addr 0x0000ffff7ab42be0)    ;; lazy deoptimization bailout 3
0xffff7ab42614   212  blr x16
0xffff7ab42618   216  and w3, w4, #0xf8
0xffff7ab4261c   220  lsr w3, w3, #3
0xffff7ab42620   224  cmp w3, #0x1 (1)
0xffff7ab42624   228  b.le #+0x330 (addr 0xffff7ab42954)
0xffff7ab42628   232  cmp w3, #0x3 (3)
0xffff7ab4262c   236  b.le #+0x1b8 (addr 0xffff7ab427e4)
0xffff7ab42630   240  cmp w3, #0x5 (5)
0xffff7ab42634   244  b.le #+0xc (addr 0xffff7ab42640)
0xffff7ab42638   248  ldr x16, pc+1456 (addr 0x0000ffff7ab42be8)    ;; lazy deoptimization bailout 4
0xffff7ab4263c   252  blr x16
0xffff7ab42640   256  movz x3, #0x0
0xffff7ab42644   260  cmp w0, w3
0xffff7ab42648   264  b.le #+0x34 (addr 0xffff7ab4267c)
0xffff7ab4264c   268  sub w4, w0, w3
0xffff7ab42650   272  add w4, w4, #0x1 (1)
0xffff7ab42654   276  ldr x4, [x2, w4, uxtw #3]
0xffff7ab42658   280  tbz w4, #0, #+0x14 (addr 0xffff7ab4266c)
0xffff7ab4265c   284  ldur x4, [x4, #-1]
0xffff7ab42660   288  ldr x16, pc+1480 (addr 0x0000ffff7ab42c28)    ;; object: 0x4ec04411 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab42664   292  cmp x4, x16
0xffff7ab42668   296  b.ne #+0xc (addr 0xffff7ab42674)
0xffff7ab4266c   300  add w3, w3, #0x1 (1)
0xffff7ab42670   304  b #-0x2c (addr 0xffff7ab42644)
0xffff7ab42674   308  ldr x16, pc+1404 (addr 0x0000ffff7ab42bf0)    ;; lazy deoptimization bailout 5
0xffff7ab42678   312  blr x16
0xffff7ab4267c   316  ldur w3, [x1, #27]
0xffff7ab42680   320  adds w4, w3, w0
0xffff7ab42684   324  b.vs #+0x64c (addr 0xffff7ab42cd0)
0xffff7ab42688   328  subs w5, w4, #0x1 (1)
0xffff7ab4268c   332  b.vs #+0x64c (addr 0xffff7ab42cd8)
0xffff7ab42690   336  ldur x6, [x1, #15]
0xffff7ab42694   340  cmp w3, w5
0xffff7ab42698   344  b.le #+0x10 (addr 0xffff7ab426a8)
0xffff7ab4269c   348  cmp w5, w3
0xffff7ab426a0   352  b.hs #+0x640 (addr 0xffff7ab42ce0)
0xffff7ab426a4   356  b #+0xe4 (addr 0xffff7ab42788)
0xffff7ab426a8   360  ldur w7, [x6, #11]
0xffff7ab426ac   364  cmp w7, w5
0xffff7ab426b0   368  b.gt #+0xcc (addr 0xffff7ab4277c)
0xffff7ab426b4   372  adds w7, w7, #0x400 (1024)
0xffff7ab426b8   376  b.vs #+0x630 (addr 0xffff7ab42ce8)
0xffff7ab426bc   380  cmp w5, w7
0xffff7ab426c0   384  b.hs #+0x630 (addr 0xffff7ab42cf0)
0xffff7ab426c4   388  add w7, w5, w5, lsr #1
0xffff7ab426c8   392  add w7, w7, #0x10 (16)
0xffff7ab426cc   396  movz w16, #0x95ff
0xffff7ab426d0   400  cmp w7, w16, lsl #1
0xffff7ab426d4   404  b.hs #+0x624 (addr 0xffff7ab42cf8)
0xffff7ab426d8   408  lsl x8, x7, #32
0xffff7ab426dc   412  lsl w9, w7, #3
0xffff7ab426e0   416  add w7, w9, #0x10 (16)
0xffff7ab426e4   420  sxtw x7, w7
0xffff7ab426e8   424  movz x9, #0xe2c0
0xffff7ab426ec   428  movk x9, #0x9ab, lsl #16
0xffff7ab426f0   432  ldp x11, x16, [x9]
0xffff7ab426f4   436  adds x10, x11, x7
0xffff7ab426f8   440  ccmp x10, x16, #nzCv, lo
0xffff7ab426fc   444  b.hi #+0x404 (addr 0xffff7ab42b00)
0xffff7ab42700   448  str x10, [x9]
0xffff7ab42704   452  orr x11, x11, #0x1
0xffff7ab42708   456  ldr x7, pc+1320 (addr 0x0000ffff7ab42c30)    ;; object: 0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab4270c   460  stur x7, [x11, #-1]
0xffff7ab42710   464  stur x8, [x11, #7]
0xffff7ab42714   468  ldr d0, pc+1292 (addr 0x0000ffff7ab42c20)
0xffff7ab42718   472  ldur w7, [x11, #11]
0xffff7ab4271c   476  cmp w3, w7
0xffff7ab42720   480  b.ge #+0x14 (addr 0xffff7ab42734)
0xffff7ab42724   484  sub w7, w7, #0x1 (1)
0xffff7ab42728   488  add x8, x11, #0xf (15)
0xffff7ab4272c   492  str d0, [x8, w7, sxtw #3]
0xffff7ab42730   496  b #-0x14 (addr 0xffff7ab4271c)
0xffff7ab42734   500  mov x7, x3
0xffff7ab42738   504  cmp w7, #0x0 (0)
0xffff7ab4273c   508  b.le #+0x1c (addr 0xffff7ab42758)
0xffff7ab42740   512  sub w7, w7, #0x1 (1)
0xffff7ab42744   516  add x8, x6, #0xf (15)
0xffff7ab42748   520  ldr d0, [x8, w7, sxtw #3]
0xffff7ab4274c   524  add x8, x11, #0xf (15)
0xffff7ab42750   528  str d0, [x8, w7, sxtw #3]
0xffff7ab42754   532  b #-0x1c (addr 0xffff7ab42738)
0xffff7ab42758   536  mov x6, x11
0xffff7ab4275c   540  stur x6, [x1, #15]
0xffff7ab42760   544  add x7, x1, #0xf (15)
0xffff7ab42764   548  and x6, x1, #0xfffffffffff00000
0xffff7ab42768   552  ldr x6, [x6, #8]
0xffff7ab4276c   556  tbz w6, #2, #+0xc (addr 0xffff7ab42778)
0xffff7ab42770   560  ldr x16, pc+1224 (addr 0x0000ffff7ab42c38)    ;; code: STUB, RecordWriteStub, minor: 72897
0xffff7ab42774   564  blr x16
0xffff7ab42778   568  mov x6, x11
0xffff7ab4277c   572  add w5, w5, #0x1 (1)
0xffff7ab42780   576  lsl x5, x5, #32
0xffff7ab42784   580  stur x5, [x1, #23]
0xffff7ab42788   584  movz x1, #0x0
0xffff7ab4278c   588  cmp w0, w1
0xffff7ab42790   592  b.le #+0x4c (addr 0xffff7ab427dc)
0xffff7ab42794   596  sub w5, w0, w1
0xffff7ab42798   600  add w5, w5, #0x1 (1)
0xffff7ab4279c   604  ldr x5, [x2, w5, uxtw #3]
0xffff7ab427a0   608  adds w7, w1, w3
0xffff7ab427a4   612  b.vs #+0x55c (addr 0xffff7ab42d00)
0xffff7ab427a8   616  tbz w5, #0, #+0x1c (addr 0xffff7ab427c4)
0xffff7ab427ac   620  ldur x16, [x5, #-1]
0xffff7ab427b0   624  ldr x17, [x26, #120]
0xffff7ab427b4   628  cmp x16, x17
0xffff7ab427b8   632  b.ne #+0x550 (addr 0xffff7ab42d08)
0xffff7ab427bc   636  ldur d0, [x5, #7]
0xffff7ab427c0   640  b #+0x8 (addr 0xffff7ab427c8)
0xffff7ab427c4   644  scvtf d0, x5, #32
0xffff7ab427c8   648  add x5, x6, #0xf (15)
0xffff7ab427cc   652  fsub d29, d0, d15
0xffff7ab427d0   656  str d29, [x5, w7, sxtw #3]
0xffff7ab427d4   660  add w1, w1, #0x1 (1)
0xffff7ab427d8   664  b #-0x4c (addr 0xffff7ab4278c)
0xffff7ab427dc   668  lsl x1, x4, #32
0xffff7ab427e0   672  b #+0x2e4 (addr 0xffff7ab42ac4)
0xffff7ab427e4   676  ldur w3, [x1, #27]
0xffff7ab427e8   680  adds w4, w3, w0
0xffff7ab427ec   684  b.vs #+0x524 (addr 0xffff7ab42d10)
0xffff7ab427f0   688  subs w5, w4, #0x1 (1)
0xffff7ab427f4   692  b.vs #+0x524 (addr 0xffff7ab42d18)
0xffff7ab427f8   696  ldur x6, [x1, #15]
0xffff7ab427fc   700  cmp w3, w5
0xffff7ab42800   704  b.le #+0x10 (addr 0xffff7ab42810)
0xffff7ab42804   708  cmp w5, w3
0xffff7ab42808   712  b.hs #+0x518 (addr 0xffff7ab42d20)
0xffff7ab4280c   716  b #+0xe4 (addr 0xffff7ab428f0)
0xffff7ab42810   720  ldur w7, [x6, #11]
0xffff7ab42814   724  cmp w7, w5
0xffff7ab42818   728  b.gt #+0xcc (addr 0xffff7ab428e4)
0xffff7ab4281c   732  adds w7, w7, #0x400 (1024)
0xffff7ab42820   736  b.vs #+0x508 (addr 0xffff7ab42d28)
0xffff7ab42824   740  cmp w5, w7
0xffff7ab42828   744  b.hs #+0x508 (addr 0xffff7ab42d30)
0xffff7ab4282c   748  add w7, w5, w5, lsr #1
0xffff7ab42830   752  add w7, w7, #0x10 (16)
0xffff7ab42834   756  movz w16, #0x95ff
0xffff7ab42838   760  cmp w7, w16, lsl #1
0xffff7ab4283c   764  b.hs #+0x4fc (addr 0xffff7ab42d38)
0xffff7ab42840   768  lsl x8, x7, #32
0xffff7ab42844   772  lsl w9, w7, #3
0xffff7ab42848   776  add w7, w9, #0x10 (16)
0xffff7ab4284c   780  sxtw x7, w7
0xffff7ab42850   784  movz x9, #0xe2c0
0xffff7ab42854   788  movk x9, #0x9ab, lsl #16
0xffff7ab42858   792  ldp x11, x16, [x9]
0xffff7ab4285c   796  adds x10, x11, x7
0xffff7ab42860   800  ccmp x10, x16, #nzCv, lo
0xffff7ab42864   804  b.hi #+0x2e0 (addr 0xffff7ab42b44)
0xffff7ab42868   808  str x10, [x9]
0xffff7ab4286c   812  orr x11, x11, #0x1
0xffff7ab42870   816  ldr x7, pc+976 (addr 0x0000ffff7ab42c40)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab42874   820  stur x7, [x11, #-1]
0xffff7ab42878   824  stur x8, [x11, #7]
0xffff7ab4287c   828  ldur w7, [x11, #11]
0xffff7ab42880   832  cmp w3, w7
0xffff7ab42884   836  b.ge #+0x18 (addr 0xffff7ab4289c)
0xffff7ab42888   840  sub w7, w7, #0x1 (1)
0xffff7ab4288c   844  ldr x8, pc+956 (addr 0x0000ffff7ab42c48)    ;; object: 0x20d04519 <the hole>
0xffff7ab42890   848  add x9, x11, #0xf (15)
0xffff7ab42894   852  str x8, [x9, w7, sxtw #3]
0xffff7ab42898   856  b #-0x18 (addr 0xffff7ab42880)
0xffff7ab4289c   860  mov x7, x3
0xffff7ab428a0   864  cmp w7, #0x0 (0)
0xffff7ab428a4   868  b.le #+0x1c (addr 0xffff7ab428c0)
0xffff7ab428a8   872  sub w7, w7, #0x1 (1)
0xffff7ab428ac   876  add x8, x6, #0xf (15)
0xffff7ab428b0   880  ldr x9, [x8, w7, sxtw #3]
0xffff7ab428b4   884  add x8, x11, #0xf (15)
0xffff7ab428b8   888  str x9, [x8, w7, sxtw #3]
0xffff7ab428bc   892  b #-0x1c (addr 0xffff7ab428a0)
0xffff7ab428c0   896  mov x6, x11
0xffff7ab428c4   900  stur x6, [x1, #15]
0xffff7ab428c8   904  add x7, x1, #0xf (15)
0xffff7ab428cc   908  and x6, x1, #0xfffffffffff00000
0xffff7ab428d0   912  ldr x6, [x6, #8]
0xffff7ab428d4   916  tbz w6, #2, #+0xc (addr 0xffff7ab428e0)
0xffff7ab428d8   920  ldr x16, pc+888 (addr 0x0000ffff7ab42c50)    ;; code: STUB, RecordWriteStub, minor: 72897
0xffff7ab428dc   924  blr x16
0xffff7ab428e0   928  mov x6, x11
0xffff7ab428e4   932  add w5, w5, #0x1 (1)
0xffff7ab428e8   936  lsl x5, x5, #32
0xffff7ab428ec   940  stur x5, [x1, #23]
0xffff7ab428f0   944  movz x1, #0x0
0xffff7ab428f4   948  cmp w0, w1
0xffff7ab428f8   952  b.le #+0x54 (addr 0xffff7ab4294c)
0xffff7ab428fc   956  sub w5, w0, w1
0xffff7ab42900   960  add w5, w5, #0x1 (1)
0xffff7ab42904   964  ldr x5, [x2, w5, uxtw #3]
0xffff7ab42908   968  adds w7, w1, w3
0xffff7ab4290c   972  b.vs #+0x434 (addr 0xffff7ab42d40)
0xffff7ab42910   976  mov x8, x6
0xffff7ab42914   980  add x9, x8, #0xf (15)
0xffff7ab42918   984  str x5, [x9, w7, sxtw #3]
0xffff7ab4291c   988  add x9, x9, w7, sxtw #3
0xffff7ab42920   992  tbz w5, #0, #+0x24 (addr 0xffff7ab42944)
0xffff7ab42924   996  and x5, x5, #0xfffffffffff00000
0xffff7ab42928  1000  ldr x5, [x5, #8]
0xffff7ab4292c  1004  tbz w5, #1, #+0x18 (addr 0xffff7ab42944)
0xffff7ab42930  1008  and x5, x8, #0xfffffffffff00000
0xffff7ab42934  1012  ldr x5, [x5, #8]
0xffff7ab42938  1016  tbz w5, #2, #+0xc (addr 0xffff7ab42944)
0xffff7ab4293c  1020  ldr x16, pc+796 (addr 0x0000ffff7ab42c58)    ;; code: STUB, RecordWriteStub, minor: 74920
0xffff7ab42940  1024  blr x16
0xffff7ab42944  1028  add w1, w1, #0x1 (1)
0xffff7ab42948  1032  b #-0x54 (addr 0xffff7ab428f4)
0xffff7ab4294c  1036  lsl x1, x4, #32
0xffff7ab42950  1040  b #+0x174 (addr 0xffff7ab42ac4)
0xffff7ab42954  1044  movz x3, #0x0
0xffff7ab42958  1048  cmp w0, w3
0xffff7ab4295c  1052  b.le #+0x24 (addr 0xffff7ab42980)
0xffff7ab42960  1056  sub w4, w0, w3
0xffff7ab42964  1060  add w4, w4, #0x1 (1)
0xffff7ab42968  1064  ldr x4, [x2, w4, uxtw #3]
0xffff7ab4296c  1068  tbnz w4, #0, #+0xc (addr 0xffff7ab42978)
0xffff7ab42970  1072  add w3, w3, #0x1 (1)
0xffff7ab42974  1076  b #-0x1c (addr 0xffff7ab42958)
0xffff7ab42978  1080  ldr x16, pc+640 (addr 0x0000ffff7ab42bf8)    ;; lazy deoptimization bailout 21
0xffff7ab4297c  1084  blr x16
0xffff7ab42980  1088  ldur w3, [x1, #27]
0xffff7ab42984  1092  adds w4, w3, w0
0xffff7ab42988  1096  b.vs #+0x3c0 (addr 0xffff7ab42d48)
0xffff7ab4298c  1100  subs w5, w4, #0x1 (1)
0xffff7ab42990  1104  b.vs #+0x3c0 (addr 0xffff7ab42d50)
0xffff7ab42994  1108  ldur x6, [x1, #15]
0xffff7ab42998  1112  cmp w3, w5
0xffff7ab4299c  1116  b.le #+0x10 (addr 0xffff7ab429ac)
0xffff7ab429a0  1120  cmp w5, w3
0xffff7ab429a4  1124  b.hs #+0x3b4 (addr 0xffff7ab42d58)
0xffff7ab429a8  1128  b #+0xe4 (addr 0xffff7ab42a8c)
0xffff7ab429ac  1132  ldur w7, [x6, #11]
0xffff7ab429b0  1136  cmp w7, w5
0xffff7ab429b4  1140  b.gt #+0xcc (addr 0xffff7ab42a80)
0xffff7ab429b8  1144  adds w7, w7, #0x400 (1024)
0xffff7ab429bc  1148  b.vs #+0x3a4 (addr 0xffff7ab42d60)
0xffff7ab429c0  1152  cmp w5, w7
0xffff7ab429c4  1156  b.hs #+0x3a4 (addr 0xffff7ab42d68)
0xffff7ab429c8  1160  add w7, w5, w5, lsr #1
0xffff7ab429cc  1164  add w7, w7, #0x10 (16)
0xffff7ab429d0  1168  movz w16, #0x95ff
0xffff7ab429d4  1172  cmp w7, w16, lsl #1
0xffff7ab429d8  1176  b.hs #+0x398 (addr 0xffff7ab42d70)
0xffff7ab429dc  1180  lsl x8, x7, #32
0xffff7ab429e0  1184  lsl w9, w7, #3
0xffff7ab429e4  1188  add w7, w9, #0x10 (16)
0xffff7ab429e8  1192  sxtw x7, w7
0xffff7ab429ec  1196  movz x9, #0xe2c0
0xffff7ab429f0  1200  movk x9, #0x9ab, lsl #16
0xffff7ab429f4  1204  ldp x11, x16, [x9]
0xffff7ab429f8  1208  adds x10, x11, x7
0xffff7ab429fc  1212  ccmp x10, x16, #nzCv, lo
0xffff7ab42a00  1216  b.hi #+0x188 (addr 0xffff7ab42b88)
0xffff7ab42a04  1220  str x10, [x9]
0xffff7ab42a08  1224  orr x11, x11, #0x1
0xffff7ab42a0c  1228  ldr x7, pc+596 (addr 0x0000ffff7ab42c60)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab42a10  1232  stur x7, [x11, #-1]
0xffff7ab42a14  1236  stur x8, [x11, #7]
0xffff7ab42a18  1240  ldur w7, [x11, #11]
0xffff7ab42a1c  1244  cmp w3, w7
0xffff7ab42a20  1248  b.ge #+0x18 (addr 0xffff7ab42a38)
0xffff7ab42a24  1252  sub w7, w7, #0x1 (1)
0xffff7ab42a28  1256  ldr x8, pc+576 (addr 0x0000ffff7ab42c68)    ;; object: 0x20d04519 <the hole>
0xffff7ab42a2c  1260  add x9, x11, #0xf (15)
0xffff7ab42a30  1264  str x8, [x9, w7, sxtw #3]
0xffff7ab42a34  1268  b #-0x18 (addr 0xffff7ab42a1c)
0xffff7ab42a38  1272  mov x7, x3
0xffff7ab42a3c  1276  cmp w7, #0x0 (0)
0xffff7ab42a40  1280  b.le #+0x1c (addr 0xffff7ab42a5c)
0xffff7ab42a44  1284  sub w7, w7, #0x1 (1)
0xffff7ab42a48  1288  add x8, x6, #0xf (15)
0xffff7ab42a4c  1292  ldr x9, [x8, w7, sxtw #3]
0xffff7ab42a50  1296  add x8, x11, #0xf (15)
0xffff7ab42a54  1300  str x9, [x8, w7, sxtw #3]
0xffff7ab42a58  1304  b #-0x1c (addr 0xffff7ab42a3c)
0xffff7ab42a5c  1308  mov x6, x11
0xffff7ab42a60  1312  stur x6, [x1, #15]
0xffff7ab42a64  1316  add x7, x1, #0xf (15)
0xffff7ab42a68  1320  and x6, x1, #0xfffffffffff00000
0xffff7ab42a6c  1324  ldr x6, [x6, #8]
0xffff7ab42a70  1328  tbz w6, #2, #+0xc (addr 0xffff7ab42a7c)
0xffff7ab42a74  1332  ldr x16, pc+508 (addr 0x0000ffff7ab42c70)    ;; code: STUB, RecordWriteStub, minor: 72897
0xffff7ab42a78  1336  blr x16
0xffff7ab42a7c  1340  mov x6, x11
0xffff7ab42a80  1344  add w5, w5, #0x1 (1)
0xffff7ab42a84  1348  lsl x5, x5, #32
0xffff7ab42a88  1352  stur x5, [x1, #23]
0xffff7ab42a8c  1356  movz x1, #0x0
0xffff7ab42a90  1360  cmp w0, w1
0xffff7ab42a94  1364  b.le #+0x2c (addr 0xffff7ab42ac0)
0xffff7ab42a98  1368  sub w5, w0, w1
0xffff7ab42a9c  1372  add w5, w5, #0x1 (1)
0xffff7ab42aa0  1376  ldr x5, [x2, w5, uxtw #3]
0xffff7ab42aa4  1380  adds w7, w1, w3
0xffff7ab42aa8  1384  b.vs #+0x2d0 (addr 0xffff7ab42d78)
0xffff7ab42aac  1388  tbnz w5, #0, #+0x2d4 (addr 0xffff7ab42d80)
0xffff7ab42ab0  1392  add x8, x6, #0xf (15)
0xffff7ab42ab4  1396  str x5, [x8, w7, sxtw #3]
0xffff7ab42ab8  1400  add w1, w1, #0x1 (1)
0xffff7ab42abc  1404  b #-0x2c (addr 0xffff7ab42a90)
0xffff7ab42ac0  1408  lsl x1, x4, #32
0xffff7ab42ac4  1412  add w0, w0, #0x1 (1)
0xffff7ab42ac8  1416  lsl x2, x0, #32
0xffff7ab42acc  1420  mov x0, x1
0xffff7ab42ad0  1424  mov jssp, fp
0xffff7ab42ad4  1428  ldp fp, lr, [jssp], #16
0xffff7ab42ad8  1432  add jssp, jssp, x2, lsr #29
0xffff7ab42adc  1436  ret
0xffff7ab42ae0  1440  ldr x16, pc+288 (addr 0x0000ffff7ab42c00)    ;; lazy deoptimization bailout 30
0xffff7ab42ae4  1444  blr x16
0xffff7ab42ae8  1448  ldr x16, pc+288 (addr 0x0000ffff7ab42c08)    ;; lazy deoptimization bailout 31
0xffff7ab42aec  1452  blr x16
0xffff7ab42af0  1456  ldr x16, pc+288 (addr 0x0000ffff7ab42c10)    ;; lazy deoptimization bailout 32
0xffff7ab42af4  1460  blr x16
0xffff7ab42af8  1464  ldr x16, pc+288 (addr 0x0000ffff7ab42c18)    ;; lazy deoptimization bailout 33
0xffff7ab42afc  1468  blr x16
0xffff7ab42b00  1472  movz x11, #0x0
0xffff7ab42b04  1476  mov x16, lr
0xffff7ab42b08  1480  ldr x17, pc+368 (addr 0x0000ffff7ab42c78)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab42b0c  1484  blr x17
0xffff7ab42b10  1488  lsl x0, x7, #32
0xffff7ab42b14  1492  movz x10, #0x100000000
0xffff7ab42b18  1496  sub csp, jssp, #0x10 (16)
0xffff7ab42b1c  1500  stp x10, x0, [jssp, #-16]!
0xffff7ab42b20  1504  movz x0, #0x2
0xffff7ab42b24  1508  movz x1, #0x5b88
0xffff7ab42b28  1512  movk x1, #0xe2, lsl #16
0xffff7ab42b2c  1516  ldr x16, pc+340 (addr 0x0000ffff7ab42c80)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab42b30  1520  blr x16
0xffff7ab42b34  1524  str x0, [jssp, #88]
0xffff7ab42b38  1528  ldr x16, pc+336 (addr 0x0000ffff7ab42c88)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab42b3c  1532  blr x16
0xffff7ab42b40  1536  b #-0x438 (addr 0xffff7ab42708)
0xffff7ab42b44  1540  movz x11, #0x0
0xffff7ab42b48  1544  mov x16, lr
0xffff7ab42b4c  1548  ldr x17, pc+324 (addr 0x0000ffff7ab42c90)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab42b50  1552  blr x17
0xffff7ab42b54  1556  lsl x0, x7, #32
0xffff7ab42b58  1560  movz x10, #0x0
0xffff7ab42b5c  1564  sub csp, jssp, #0x10 (16)
0xffff7ab42b60  1568  stp x10, x0, [jssp, #-16]!
0xffff7ab42b64  1572  movz x0, #0x2
0xffff7ab42b68  1576  movz x1, #0x5b88
0xffff7ab42b6c  1580  movk x1, #0xe2, lsl #16
0xffff7ab42b70  1584  ldr x16, pc+296 (addr 0x0000ffff7ab42c98)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab42b74  1588  blr x16
0xffff7ab42b78  1592  str x0, [jssp, #88]
0xffff7ab42b7c  1596  ldr x16, pc+292 (addr 0x0000ffff7ab42ca0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab42b80  1600  blr x16
0xffff7ab42b84  1604  b #-0x314 (addr 0xffff7ab42870)
0xffff7ab42b88  1608  movz x11, #0x0
0xffff7ab42b8c  1612  mov x16, lr
0xffff7ab42b90  1616  ldr x17, pc+280 (addr 0x0000ffff7ab42ca8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab42b94  1620  blr x17
0xffff7ab42b98  1624  lsl x0, x7, #32
0xffff7ab42b9c  1628  movz x10, #0x0
0xffff7ab42ba0  1632  sub csp, jssp, #0x10 (16)
0xffff7ab42ba4  1636  stp x10, x0, [jssp, #-16]!
0xffff7ab42ba8  1640  movz x0, #0x2
0xffff7ab42bac  1644  movz x1, #0x5b88
0xffff7ab42bb0  1648  movk x1, #0xe2, lsl #16
0xffff7ab42bb4  1652  ldr x16, pc+252 (addr 0x0000ffff7ab42cb0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab42bb8  1656  blr x16
0xffff7ab42bbc  1660  str x0, [jssp, #88]
0xffff7ab42bc0  1664  ldr x16, pc+248 (addr 0x0000ffff7ab42cb8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab42bc4  1668  blr x16
0xffff7ab42bc8  1672  b #-0x1bc (addr 0xffff7ab42a0c)
0xffff7ab42bcc  1676  5800079f       constant pool begin (num_const = 60)    ;; constant pool
0xffff7ab42bd0  1680  d63f03e0       constant
0xffff7ab42bd4  1684  d503201f       constant
0xffff7ab42bd8  1688  7a906010       constant
0xffff7ab42bdc  1692  0000ffff       constant
0xffff7ab42be0  1696  7a906018       constant
0xffff7ab42be4  1700  0000ffff       constant
0xffff7ab42be8  1704  7a906020       constant
0xffff7ab42bec  1708  0000ffff       constant
0xffff7ab42bf0  1712  7a906028       constant
0xffff7ab42bf4  1716  0000ffff       constant
0xffff7ab42bf8  1720  7a9060a8       constant
0xffff7ab42bfc  1724  0000ffff       constant
0xffff7ab42c00  1728  7a9060f0       constant
0xffff7ab42c04  1732  0000ffff       constant
0xffff7ab42c08  1736  7a9060f8       constant
0xffff7ab42c0c  1740  0000ffff       constant
0xffff7ab42c10  1744  7a906100       constant
0xffff7ab42c14  1748  0000ffff       constant
0xffff7ab42c18  1752  7a906108       constant
0xffff7ab42c1c  1756  0000ffff       constant
0xffff7ab42c20  1760  fff7ffff       constant
0xffff7ab42c24  1764  fff7ffff       constant
0xffff7ab42c28  1768  4ec04411       constant
0xffff7ab42c2c  1772  00000000       constant
0xffff7ab42c30  1776  4ec052d9       constant
0xffff7ab42c34  1780  00000000       constant
0xffff7ab42c38  1784  7ab41580       constant
0xffff7ab42c3c  1788  0000ffff       constant
0xffff7ab42c40  1792  4ec04259       constant
0xffff7ab42c44  1796  00000000       constant
0xffff7ab42c48  1800  20d04519       constant
0xffff7ab42c4c  1804  00000000       constant
0xffff7ab42c50  1808  7ab41580       constant
0xffff7ab42c54  1812  0000ffff       constant
0xffff7ab42c58  1816  7ab41d60       constant
0xffff7ab42c5c  1820  0000ffff       constant
0xffff7ab42c60  1824  4ec04259       constant
0xffff7ab42c64  1828  00000000       constant
0xffff7ab42c68  1832  20d04519       constant
0xffff7ab42c6c  1836  00000000       constant
0xffff7ab42c70  1840  7ab41580       constant
0xffff7ab42c74  1844  0000ffff       constant
0xffff7ab42c78  1848  7ab06820       constant
0xffff7ab42c7c  1852  0000ffff       constant
0xffff7ab42c80  1856  7ab06260       constant
0xffff7ab42c84  1860  0000ffff       constant
0xffff7ab42c88  1864  7ab068e0       constant
0xffff7ab42c8c  1868  0000ffff       constant
0xffff7ab42c90  1872  7ab06820       constant
0xffff7ab42c94  1876  0000ffff       constant
0xffff7ab42c98  1880  7ab06260       constant
0xffff7ab42c9c  1884  0000ffff       constant
0xffff7ab42ca0  1888  7ab068e0       constant
0xffff7ab42ca4  1892  0000ffff       constant
0xffff7ab42ca8  1896  7ab06820       constant
0xffff7ab42cac  1900  0000ffff       constant
0xffff7ab42cb0  1904  7ab06260       constant
0xffff7ab42cb4  1908  0000ffff       constant
0xffff7ab42cb8  1912  7ab068e0       constant
0xffff7ab42cbc  1916  0000ffff       constant
0xffff7ab42cc0  1920  movz x16, #0x0
0xffff7ab42cc4  1924  bl #+0xc4 (addr 0xffff7ab42d88)
0xffff7ab42cc8  1928  movz x16, #0x8
0xffff7ab42ccc  1932  bl #+0xbc (addr 0xffff7ab42d88)
0xffff7ab42cd0  1936  movz x16, #0x30
0xffff7ab42cd4  1940  bl #+0xb4 (addr 0xffff7ab42d88)
0xffff7ab42cd8  1944  movz x16, #0x38
0xffff7ab42cdc  1948  bl #+0xac (addr 0xffff7ab42d88)
0xffff7ab42ce0  1952  movz x16, #0x40
0xffff7ab42ce4  1956  bl #+0xa4 (addr 0xffff7ab42d88)
0xffff7ab42ce8  1960  movz x16, #0x48
0xffff7ab42cec  1964  bl #+0x9c (addr 0xffff7ab42d88)
0xffff7ab42cf0  1968  movz x16, #0x50
0xffff7ab42cf4  1972  bl #+0x94 (addr 0xffff7ab42d88)
0xffff7ab42cf8  1976  movz x16, #0x58
0xffff7ab42cfc  1980  bl #+0x8c (addr 0xffff7ab42d88)
0xffff7ab42d00  1984  movz x16, #0x60
0xffff7ab42d04  1988  bl #+0x84 (addr 0xffff7ab42d88)
0xffff7ab42d08  1992  movz x16, #0x68
0xffff7ab42d0c  1996  bl #+0x7c (addr 0xffff7ab42d88)
0xffff7ab42d10  2000  movz x16, #0x70
0xffff7ab42d14  2004  bl #+0x74 (addr 0xffff7ab42d88)
0xffff7ab42d18  2008  movz x16, #0x78
0xffff7ab42d1c  2012  bl #+0x6c (addr 0xffff7ab42d88)
0xffff7ab42d20  2016  movz x16, #0x80
0xffff7ab42d24  2020  bl #+0x64 (addr 0xffff7ab42d88)
0xffff7ab42d28  2024  movz x16, #0x88
0xffff7ab42d2c  2028  bl #+0x5c (addr 0xffff7ab42d88)
0xffff7ab42d30  2032  movz x16, #0x90
0xffff7ab42d34  2036  bl #+0x54 (addr 0xffff7ab42d88)
0xffff7ab42d38  2040  movz x16, #0x98
0xffff7ab42d3c  2044  bl #+0x4c (addr 0xffff7ab42d88)
0xffff7ab42d40  2048  movz x16, #0xa0
0xffff7ab42d44  2052  bl #+0x44 (addr 0xffff7ab42d88)
0xffff7ab42d48  2056  movz x16, #0xb0
0xffff7ab42d4c  2060  bl #+0x3c (addr 0xffff7ab42d88)
0xffff7ab42d50  2064  movz x16, #0xb8
0xffff7ab42d54  2068  bl #+0x34 (addr 0xffff7ab42d88)
0xffff7ab42d58  2072  movz x16, #0xc0
0xffff7ab42d5c  2076  bl #+0x2c (addr 0xffff7ab42d88)
0xffff7ab42d60  2080  movz x16, #0xc8
0xffff7ab42d64  2084  bl #+0x24 (addr 0xffff7ab42d88)
0xffff7ab42d68  2088  movz x16, #0xd0
0xffff7ab42d6c  2092  bl #+0x1c (addr 0xffff7ab42d88)
0xffff7ab42d70  2096  movz x16, #0xd8
0xffff7ab42d74  2100  bl #+0x14 (addr 0xffff7ab42d88)
0xffff7ab42d78  2104  movz x16, #0xe0
0xffff7ab42d7c  2108  bl #+0xc (addr 0xffff7ab42d88)
0xffff7ab42d80  2112  movz x16, #0xe8
0xffff7ab42d84  2116  bl #+0x4 (addr 0xffff7ab42d88)
0xffff7ab42d88  2120  ldr x17, pc+24 (addr 0x0000ffff7ab42da0)    ;; lazy deoptimization bailout 0
0xffff7ab42d8c  2124  add x17, x17, x16
0xffff7ab42d90  2128  br x17
0xffff7ab42d94  2132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab42d98  2136  d63f03e0       constant
0xffff7ab42d9c  2140  d503201f       constant
0xffff7ab42da0  2144  7a906000       constant
0xffff7ab42da4  2148  0000ffff       constant


Safepoints (size = 47)
0xffff7ab42b34  1524  000 | x1 | x2 | x6 | x11 | x27 (sp -> fp)  <none> argc: 2
0xffff7ab42b78  1592  000 | x1 | x2 | x6 | x11 | x27 (sp -> fp)  <none> argc: 2
0xffff7ab42bbc  1660  000 | x1 | x2 | x6 | x11 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 71)
0xffff7ab42608  runtime entry
0xffff7ab42610  runtime entry
0xffff7ab42638  runtime entry
0xffff7ab42660  embedded object  (0x4ec04411 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab42674  runtime entry
0xffff7ab42708  embedded object  (0x4ec052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab42770  code target (STUB)  (0xffff7ab41580)
0xffff7ab42870  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab4288c  embedded object  (0x20d04519 <the hole>)
0xffff7ab428d8  code target (STUB)  (0xffff7ab41580)
0xffff7ab4293c  code target (STUB)  (0xffff7ab41d60)
0xffff7ab42978  runtime entry
0xffff7ab42a0c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab42a28  embedded object  (0x20d04519 <the hole>)
0xffff7ab42a74  code target (STUB)  (0xffff7ab41580)
0xffff7ab42ae0  runtime entry
0xffff7ab42ae8  runtime entry
0xffff7ab42af0  runtime entry
0xffff7ab42af8  runtime entry
0xffff7ab42b08  code target (STUB)  (0xffff7ab06820)
0xffff7ab42b2c  code target (STUB)  (0xffff7ab06260)
0xffff7ab42b38  code target (STUB)  (0xffff7ab068e0)
0xffff7ab42b4c  code target (STUB)  (0xffff7ab06820)
0xffff7ab42b70  code target (STUB)  (0xffff7ab06260)
0xffff7ab42b7c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab42b90  code target (STUB)  (0xffff7ab06820)
0xffff7ab42bb4  code target (STUB)  (0xffff7ab06260)
0xffff7ab42bc0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab42bcc  constant pool (size 244)
0xffff7ab42d88  runtime entry
0xffff7ab42d94  constant pool (size 20)


kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 2
type = NORMAL
name = ToBooleanICStub(Bool)
compiler = crankshaft
Instructions (size = 144)
0xffff7ab430a0     0  ldr x16, [x26, #64]
0xffff7ab430a4     4  cmp x0, x16
0xffff7ab430a8     8  b.eq #+0x1c (addr 0xffff7ab430c4)
0xffff7ab430ac    12  ldr x16, [x26, #72]
0xffff7ab430b0    16  cmp x0, x16
0xffff7ab430b4    20  b.eq #+0x8 (addr 0xffff7ab430bc)
0xffff7ab430b8    24  b #+0x30 (addr 0xffff7ab430e8)
0xffff7ab430bc    28  ldr x0, pc+28 (addr 0x0000ffff7ab430d8)    ;; object: 0x20d042b1 <false>
0xffff7ab430c0    32  ret
0xffff7ab430c4    36  ldr x0, pc+28 (addr 0x0000ffff7ab430e0)    ;; object: 0x20d04281 <true>
0xffff7ab430c8    40  ret
0xffff7ab430cc    44  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab430d0    48  d63f03e0       constant
0xffff7ab430d4    52  d503201f       constant
0xffff7ab430d8    56  20d042b1       constant
0xffff7ab430dc    60  00000000       constant
0xffff7ab430e0    64  20d04281       constant
0xffff7ab430e4    68  00000000       constant
0xffff7ab430e8    72  movz x16, #0x0
0xffff7ab430ec    76  sub csp, jssp, #0x10 (16)
0xffff7ab430f0    80  stp fp, lr, [jssp, #-16]!
0xffff7ab430f4    84  bl #+0x4 (addr 0xffff7ab430f8)
0xffff7ab430f8    88  movz x17, #0xa00000000
0xffff7ab430fc    92  sub csp, jssp, #0x10 (16)
0xffff7ab43100    96  stp x17, cp, [jssp, #-16]!
0xffff7ab43104   100  add fp, jssp, #0x10 (16)
0xffff7ab43108   104  ldr x17, pc+24 (addr 0x0000ffff7ab43120)    ;; lazy deoptimization bailout 0
0xffff7ab4310c   108  add x17, x17, x16
0xffff7ab43110   112  br x17
0xffff7ab43114   116  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab43118   120  d63f03e0       constant
0xffff7ab4311c   124  d503201f       constant
0xffff7ab43120   128  7a906000       constant
0xffff7ab43124   132  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab430bc  embedded object  (0x20d042b1 <false>)
0xffff7ab430c4  embedded object  (0x20d04281 <true>)
0xffff7ab430cc  constant pool (size 28)
0xffff7ab43108  runtime entry
0xffff7ab43114  constant pool (size 20)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab431a0     0  ldur x0, [x1, #-1]
0xffff7ab431a4     4  ldur x0, [x0, #47]
0xffff7ab431a8     8  ldur x0, [x0, #47]
0xffff7ab431ac    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = hasOwnProperty
compiler = unknown
Instructions (size = 120)
0xffff7ab43220     0  sub csp, jssp, #0x8 (8)
0xffff7ab43224     4  str x3, [jssp, #-8]!
0xffff7ab43228     8  sub csp, jssp, #0x8 (8)
0xffff7ab4322c    12  str x0, [jssp, #-8]!
0xffff7ab43230    16  ldr x0, pc+72 (addr 0x0000ffff7ab43278)    ;; object: 0x20d63e59 Cell for 0
0xffff7ab43234    20  ldur x0, [x0, #7]
0xffff7ab43238    24  cmp x0, #0x0 (0)
0xffff7ab4323c    28  b.ne #+0x14 (addr 0xffff7ab43250)
0xffff7ab43240    32  ldr x3, pc+64 (addr 0x0000ffff7ab43280)    ;; object: 0x20d63e69 WeakCell for 0x20d3ff39 <an Object with map 0x4ec0c081>
0xffff7ab43244    36  ldur x3, [x3, #7]
0xffff7ab43248    40  tbz w3, #0, #+0x8 (addr 0xffff7ab43250)
0xffff7ab4324c    44  b #+0x14 (addr 0xffff7ab43260)
0xffff7ab43250    48  ldr x0, [jssp], #8
0xffff7ab43254    52  ldr x3, [jssp], #8
0xffff7ab43258    56  ldr x16, pc+48 (addr 0x0000ffff7ab43288)    ;; code: BUILTIN
0xffff7ab4325c    60  br x16
0xffff7ab43260    64  add jssp, jssp, #0x10 (16)
0xffff7ab43264    68  mov x1, x3
0xffff7ab43268    72  ldr x16, pc+40 (addr 0x0000ffff7ab43290)    ;; code: HANDLER, LoadConstantStub, minor: 0
0xffff7ab4326c    76  br x16
0xffff7ab43270    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7ab43274    84  d63f03e0       constant
0xffff7ab43278    88  20d63e59       constant
0xffff7ab4327c    92  00000000       constant
0xffff7ab43280    96  20d63e69       constant
0xffff7ab43284   100  00000000       constant
0xffff7ab43288   104  7ab222e0       constant
0xffff7ab4328c   108  0000ffff       constant
0xffff7ab43290   112  7ab431a0       constant
0xffff7ab43294   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab43230  embedded object  (0x20d63e59 Cell for 0)
0xffff7ab43240  embedded object  (0x20d63e69 WeakCell for 0x20d3ff39 <an Object with map 0x4ec0c081>)
0xffff7ab43258  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab43268  code target (HANDLER)  (0xffff7ab431a0)
0xffff7ab43270  constant pool (size 40)

kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab43300     0  ldur x0, [x1, #-1]
0xffff7ab43304     4  ldur x0, [x0, #47]
0xffff7ab43308     8  ldur x0, [x0, #71]
0xffff7ab4330c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab43380     0  ldur x0, [x1, #-1]
0xffff7ab43384     4  ldur x0, [x0, #47]
0xffff7ab43388     8  ldur x0, [x0, #95]
0xffff7ab4338c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab43400     0  ldur x0, [x1, #-1]
0xffff7ab43404     4  ldur x0, [x0, #47]
0xffff7ab43408     8  ldur x0, [x0, #119]
0xffff7ab4340c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab43480     0  ldur x0, [x1, #-1]
0xffff7ab43484     4  ldur x0, [x0, #47]
0xffff7ab43488     8  ldur x0, [x0, #143]
0xffff7ab4348c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab43500     0  ldur x0, [x1, #-1]
0xffff7ab43504     4  ldur x0, [x0, #47]
0xffff7ab43508     8  ldur x0, [x0, #167]
0xffff7ab4350c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = FunctionPrototypeStub
name = FunctionPrototypeStub
compiler = unknown
Instructions (size = 72)
0xffff7ab43580     0  ldur x10, [x1, #23]
0xffff7ab43584     4  ldr x16, [x26, #88]
0xffff7ab43588     8  cmp x10, x16
0xffff7ab4358c    12  b.eq #+0x20 (addr 0xffff7ab435ac)
0xffff7ab43590    16  ldur x11, [x10, #-1]
0xffff7ab43594    20  ldrb w11, [x11, #11]
0xffff7ab43598    24  cmp x11, #0x84 (132)
0xffff7ab4359c    28  b.ne #+0x8 (addr 0xffff7ab435a4)
0xffff7ab435a0    32  ldur x10, [x10, #23]
0xffff7ab435a4    36  mov x0, x10
0xffff7ab435a8    40  ret
0xffff7ab435ac    44  ldr x16, pc+20 (addr 0x0000ffff7ab435c0)    ;; code: BUILTIN
0xffff7ab435b0    48  br x16
0xffff7ab435b4    52  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab435b8    56  d63f03e0       constant
0xffff7ab435bc    60  d503201f       constant
0xffff7ab435c0    64  7ab222e0       constant
0xffff7ab435c4    68  0000ffff       constant


RelocInfo (size = 7)
0xffff7ab435ac  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab435b4  constant pool (size 20)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 653)
0xffff7ab43d60     0  movz x2, #0xe2c0
0xffff7ab43d64     4  movk x2, #0x9ab, lsl #16
0xffff7ab43d68     8  ldp x3, x0, [x2]
0xffff7ab43d6c    12  adds x16, x3, #0xf8 (248)
0xffff7ab43d70    16  ccmp x16, x0, #nzCv, lo
0xffff7ab43d74    20  b.hi #+0x104 (addr 0xffff7ab43e78)
0xffff7ab43d78    24  str x16, [x2]
0xffff7ab43d7c    28  orr x3, x3, #0x1
0xffff7ab43d80    32  ldr x0, pc+360 (addr 0x0000ffff7ab43ee8)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab43d84    36  stur x0, [x3, #-1]
0xffff7ab43d88    40  movz x0, #0x1d00000000
0xffff7ab43d8c    44  stur x0, [x3, #7]
0xffff7ab43d90    48  stur x1, [x3, #15]
0xffff7ab43d94    52  stur cp, [x3, #23]
0xffff7ab43d98    56  ldr x0, pc+344 (addr 0x0000ffff7ab43ef0)    ;; object: 0x20d04519 <the hole>
0xffff7ab43d9c    60  stur x0, [x3, #31]
0xffff7ab43da0    64  ldur x0, [cp, #39]
0xffff7ab43da4    68  stur x0, [x3, #39]
0xffff7ab43da8    72  ldr x0, pc+336 (addr 0x0000ffff7ab43ef8)    ;; object: 0x20d04241 <undefined>
0xffff7ab43dac    76  stur x0, [x3, #47]
0xffff7ab43db0    80  ldr x0, pc+336 (addr 0x0000ffff7ab43f00)    ;; object: 0x20d04241 <undefined>
0xffff7ab43db4    84  stur x0, [x3, #55]
0xffff7ab43db8    88  ldr x0, pc+336 (addr 0x0000ffff7ab43f08)    ;; object: 0x20d04241 <undefined>
0xffff7ab43dbc    92  stur x0, [x3, #63]
0xffff7ab43dc0    96  ldr x0, pc+336 (addr 0x0000ffff7ab43f10)    ;; object: 0x20d04241 <undefined>
0xffff7ab43dc4   100  stur x0, [x3, #71]
0xffff7ab43dc8   104  ldr x0, pc+336 (addr 0x0000ffff7ab43f18)    ;; object: 0x20d04241 <undefined>
0xffff7ab43dcc   108  stur x0, [x3, #79]
0xffff7ab43dd0   112  ldr x0, pc+336 (addr 0x0000ffff7ab43f20)    ;; object: 0x20d04241 <undefined>
0xffff7ab43dd4   116  stur x0, [x3, #87]
0xffff7ab43dd8   120  ldr x0, pc+336 (addr 0x0000ffff7ab43f28)    ;; object: 0x20d04241 <undefined>
0xffff7ab43ddc   124  stur x0, [x3, #95]
0xffff7ab43de0   128  ldr x0, pc+336 (addr 0x0000ffff7ab43f30)    ;; object: 0x20d04241 <undefined>
0xffff7ab43de4   132  stur x0, [x3, #103]
0xffff7ab43de8   136  ldr x0, pc+336 (addr 0x0000ffff7ab43f38)    ;; object: 0x20d04241 <undefined>
0xffff7ab43dec   140  stur x0, [x3, #111]
0xffff7ab43df0   144  ldr x0, pc+336 (addr 0x0000ffff7ab43f40)    ;; object: 0x20d04241 <undefined>
0xffff7ab43df4   148  stur x0, [x3, #119]
0xffff7ab43df8   152  ldr x0, pc+336 (addr 0x0000ffff7ab43f48)    ;; object: 0x20d04241 <undefined>
0xffff7ab43dfc   156  stur x0, [x3, #127]
0xffff7ab43e00   160  ldr x0, pc+336 (addr 0x0000ffff7ab43f50)    ;; object: 0x20d04241 <undefined>
0xffff7ab43e04   164  stur x0, [x3, #135]
0xffff7ab43e08   168  ldr x0, pc+336 (addr 0x0000ffff7ab43f58)    ;; object: 0x20d04241 <undefined>
0xffff7ab43e0c   172  stur x0, [x3, #143]
0xffff7ab43e10   176  ldr x0, pc+336 (addr 0x0000ffff7ab43f60)    ;; object: 0x20d04241 <undefined>
0xffff7ab43e14   180  stur x0, [x3, #151]
0xffff7ab43e18   184  ldr x0, pc+336 (addr 0x0000ffff7ab43f68)    ;; object: 0x20d04241 <undefined>
0xffff7ab43e1c   188  stur x0, [x3, #159]
0xffff7ab43e20   192  ldr x0, pc+336 (addr 0x0000ffff7ab43f70)    ;; object: 0x20d04241 <undefined>
0xffff7ab43e24   196  stur x0, [x3, #167]
0xffff7ab43e28   200  ldr x0, pc+336 (addr 0x0000ffff7ab43f78)    ;; object: 0x20d04241 <undefined>
0xffff7ab43e2c   204  stur x0, [x3, #175]
0xffff7ab43e30   208  ldr x0, pc+336 (addr 0x0000ffff7ab43f80)    ;; object: 0x20d04241 <undefined>
0xffff7ab43e34   212  stur x0, [x3, #183]
0xffff7ab43e38   216  ldr x0, pc+336 (addr 0x0000ffff7ab43f88)    ;; object: 0x20d04241 <undefined>
0xffff7ab43e3c   220  stur x0, [x3, #191]
0xffff7ab43e40   224  ldr x0, pc+336 (addr 0x0000ffff7ab43f90)    ;; object: 0x20d04241 <undefined>
0xffff7ab43e44   228  stur x0, [x3, #199]
0xffff7ab43e48   232  ldr x0, pc+336 (addr 0x0000ffff7ab43f98)    ;; object: 0x20d04241 <undefined>
0xffff7ab43e4c   236  stur x0, [x3, #207]
0xffff7ab43e50   240  ldr x0, pc+336 (addr 0x0000ffff7ab43fa0)    ;; object: 0x20d04241 <undefined>
0xffff7ab43e54   244  stur x0, [x3, #215]
0xffff7ab43e58   248  ldr x0, pc+336 (addr 0x0000ffff7ab43fa8)    ;; object: 0x20d04241 <undefined>
0xffff7ab43e5c   252  stur x0, [x3, #223]
0xffff7ab43e60   256  ldr x0, pc+336 (addr 0x0000ffff7ab43fb0)    ;; object: 0x20d04241 <undefined>
0xffff7ab43e64   260  stur x0, [x3, #231]
0xffff7ab43e68   264  ldr x0, pc+336 (addr 0x0000ffff7ab43fb8)    ;; object: 0x20d04241 <undefined>
0xffff7ab43e6c   268  stur x0, [x3, #239]
0xffff7ab43e70   272  mov x0, x3
0xffff7ab43e74   276  ret
0xffff7ab43e78   280  sub csp, jssp, #0x10 (16)
0xffff7ab43e7c   284  stp fp, lr, [jssp, #-16]!
0xffff7ab43e80   288  movz fp, #0xa00000000
0xffff7ab43e84   292  sub csp, jssp, #0x8 (8)
0xffff7ab43e88   296  str fp, [jssp, #-8]!
0xffff7ab43e8c   300  add fp, jssp, #0x8 (8)
0xffff7ab43e90   304  movz x3, #0x0
0xffff7ab43e94   308  mov x16, lr
0xffff7ab43e98   312  ldr x17, pc+296 (addr 0x0000ffff7ab43fc0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab43e9c   316  blr x17
0xffff7ab43ea0   320  movz x0, #0xf800000000
0xffff7ab43ea4   324  movz x10, #0x0
0xffff7ab43ea8   328  sub csp, jssp, #0x10 (16)
0xffff7ab43eac   332  stp x10, x0, [jssp, #-16]!
0xffff7ab43eb0   336  movz x0, #0x2
0xffff7ab43eb4   340  movz x1, #0x5b88
0xffff7ab43eb8   344  movk x1, #0xe2, lsl #16
0xffff7ab43ebc   348  ldr x16, pc+268 (addr 0x0000ffff7ab43fc8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab43ec0   352  blr x16
0xffff7ab43ec4   356  str x0, [jssp, #24]
0xffff7ab43ec8   360  ldr x16, pc+264 (addr 0x0000ffff7ab43fd0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab43ecc   364  blr x16
0xffff7ab43ed0   368  ldr lr, [jssp, #16]
0xffff7ab43ed4   372  ldp xzr, fp, [jssp], #24
0xffff7ab43ed8   376  b #-0x158 (addr 0xffff7ab43d80)
0xffff7ab43edc   380  580007df       constant pool begin (num_const = 62)    ;; constant pool
0xffff7ab43ee0   384  d63f03e0       constant
0xffff7ab43ee4   388  d503201f       constant
0xffff7ab43ee8   392  4ec06149       constant
0xffff7ab43eec   396  00000000       constant
0xffff7ab43ef0   400  20d04519       constant
0xffff7ab43ef4   404  00000000       constant
0xffff7ab43ef8   408  20d04241       constant
0xffff7ab43efc   412  00000000       constant
0xffff7ab43f00   416  20d04241       constant
0xffff7ab43f04   420  00000000       constant
0xffff7ab43f08   424  20d04241       constant
0xffff7ab43f0c   428  00000000       constant
0xffff7ab43f10   432  20d04241       constant
0xffff7ab43f14   436  00000000       constant
0xffff7ab43f18   440  20d04241       constant
0xffff7ab43f1c   444  00000000       constant
0xffff7ab43f20   448  20d04241       constant
0xffff7ab43f24   452  00000000       constant
0xffff7ab43f28   456  20d04241       constant
0xffff7ab43f2c   460  00000000       constant
0xffff7ab43f30   464  20d04241       constant
0xffff7ab43f34   468  00000000       constant
0xffff7ab43f38   472  20d04241       constant
0xffff7ab43f3c   476  00000000       constant
0xffff7ab43f40   480  20d04241       constant
0xffff7ab43f44   484  00000000       constant
0xffff7ab43f48   488  20d04241       constant
0xffff7ab43f4c   492  00000000       constant
0xffff7ab43f50   496  20d04241       constant
0xffff7ab43f54   500  00000000       constant
0xffff7ab43f58   504  20d04241       constant
0xffff7ab43f5c   508  00000000       constant
0xffff7ab43f60   512  20d04241       constant
0xffff7ab43f64   516  00000000       constant
0xffff7ab43f68   520  20d04241       constant
0xffff7ab43f6c   524  00000000       constant
0xffff7ab43f70   528  20d04241       constant
0xffff7ab43f74   532  00000000       constant
0xffff7ab43f78   536  20d04241       constant
0xffff7ab43f7c   540  00000000       constant
0xffff7ab43f80   544  20d04241       constant
0xffff7ab43f84   548  00000000       constant
0xffff7ab43f88   552  20d04241       constant
0xffff7ab43f8c   556  00000000       constant
0xffff7ab43f90   560  20d04241       constant
0xffff7ab43f94   564  00000000       constant
0xffff7ab43f98   568  20d04241       constant
0xffff7ab43f9c   572  00000000       constant
0xffff7ab43fa0   576  20d04241       constant
0xffff7ab43fa4   580  00000000       constant
0xffff7ab43fa8   584  20d04241       constant
0xffff7ab43fac   588  00000000       constant
0xffff7ab43fb0   592  20d04241       constant
0xffff7ab43fb4   596  00000000       constant
0xffff7ab43fb8   600  20d04241       constant
0xffff7ab43fbc   604  00000000       constant
0xffff7ab43fc0   608  7ab06820       constant
0xffff7ab43fc4   612  0000ffff       constant
0xffff7ab43fc8   616  7ab06260       constant
0xffff7ab43fcc   620  0000ffff       constant
0xffff7ab43fd0   624  7ab068e0       constant
0xffff7ab43fd4   628  0000ffff       constant


Safepoints (size = 21)
0xffff7ab43ec4   356  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 36)
0xffff7ab43d80  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab43d98  embedded object  (0x20d04519 <the hole>)
0xffff7ab43da8  embedded object  (0x20d04241 <undefined>)
0xffff7ab43db0  embedded object  (0x20d04241 <undefined>)
0xffff7ab43db8  embedded object  (0x20d04241 <undefined>)
0xffff7ab43dc0  embedded object  (0x20d04241 <undefined>)
0xffff7ab43dc8  embedded object  (0x20d04241 <undefined>)
0xffff7ab43dd0  embedded object  (0x20d04241 <undefined>)
0xffff7ab43dd8  embedded object  (0x20d04241 <undefined>)
0xffff7ab43de0  embedded object  (0x20d04241 <undefined>)
0xffff7ab43de8  embedded object  (0x20d04241 <undefined>)
0xffff7ab43df0  embedded object  (0x20d04241 <undefined>)
0xffff7ab43df8  embedded object  (0x20d04241 <undefined>)
0xffff7ab43e00  embedded object  (0x20d04241 <undefined>)
0xffff7ab43e08  embedded object  (0x20d04241 <undefined>)
0xffff7ab43e10  embedded object  (0x20d04241 <undefined>)
0xffff7ab43e18  embedded object  (0x20d04241 <undefined>)
0xffff7ab43e20  embedded object  (0x20d04241 <undefined>)
0xffff7ab43e28  embedded object  (0x20d04241 <undefined>)
0xffff7ab43e30  embedded object  (0x20d04241 <undefined>)
0xffff7ab43e38  embedded object  (0x20d04241 <undefined>)
0xffff7ab43e40  embedded object  (0x20d04241 <undefined>)
0xffff7ab43e48  embedded object  (0x20d04241 <undefined>)
0xffff7ab43e50  embedded object  (0x20d04241 <undefined>)
0xffff7ab43e58  embedded object  (0x20d04241 <undefined>)
0xffff7ab43e60  embedded object  (0x20d04241 <undefined>)
0xffff7ab43e68  embedded object  (0x20d04241 <undefined>)
0xffff7ab43e98  code target (STUB)  (0xffff7ab06820)
0xffff7ab43ebc  code target (STUB)  (0xffff7ab06260)
0xffff7ab43ec8  code target (STUB)  (0xffff7ab068e0)
0xffff7ab43edc  constant pool (size 252)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab45980     0  ldur x0, [x1, #7]
0xffff7ab45984     4  movz x16, #0x187
0xffff7ab45988     8  ldr x0, [x0, x16]
0xffff7ab4598c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab45a00     0  ldur x0, [x1, #7]
0xffff7ab45a04     4  movz x16, #0x18f
0xffff7ab45a08     8  ldr x0, [x0, x16]
0xffff7ab45a0c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab45a80     0  ldur x0, [x1, #7]
0xffff7ab45a84     4  movz x16, #0x197
0xffff7ab45a88     8  ldr x0, [x0, x16]
0xffff7ab45a8c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab45b00     0  ldur x0, [x1, #7]
0xffff7ab45b04     4  movz x16, #0x1a7
0xffff7ab45b08     8  ldr x0, [x0, x16]
0xffff7ab45b0c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = next
compiler = unknown
Instructions (size = 152)
0xffff7ab45b80     0  sub csp, jssp, #0x8 (8)
0xffff7ab45b84     4  str x3, [jssp, #-8]!
0xffff7ab45b88     8  sub csp, jssp, #0x8 (8)
0xffff7ab45b8c    12  str x4, [jssp, #-8]!
0xffff7ab45b90    16  ldr x3, pc+88 (addr 0x0000ffff7ab45be8)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7ab45b94    20  ldur x3, [x3, #7]
0xffff7ab45b98    24  cmp x3, #0x0 (0)
0xffff7ab45b9c    28  b.ne #+0x30 (addr 0xffff7ab45bcc)
0xffff7ab45ba0    32  tbz w0, #0, #+0x2c (addr 0xffff7ab45bcc)
0xffff7ab45ba4    36  ldr x5, pc+76 (addr 0x0000ffff7ab45bf0)    ;; object: 0x20d57a99 WeakCell for 0x4ec0b581 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab45ba8    40  ldur x5, [x5, #7]
0xffff7ab45bac    44  tbz w5, #0, #+0x20 (addr 0xffff7ab45bcc)
0xffff7ab45bb0    48  ldursw x4, [x5, #15]
0xffff7ab45bb4    52  tbnz w4, #23, #+0x18 (addr 0xffff7ab45bcc)
0xffff7ab45bb8    56  ldr x4, [jssp], #8
0xffff7ab45bbc    60  ldr x3, [jssp], #8
0xffff7ab45bc0    64  ldr x2, pc+56 (addr 0x0000ffff7ab45bf8)    ;; object: 0x20d05209 <String[4]: next>
0xffff7ab45bc4    68  ldr x16, pc+60 (addr 0x0000ffff7ab45c00)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0xffff7ab45bc8    72  br x16
0xffff7ab45bcc    76  ldr x2, pc+60 (addr 0x0000ffff7ab45c08)    ;; object: 0x20d05209 <String[4]: next>
0xffff7ab45bd0    80  ldr x4, [jssp], #8
0xffff7ab45bd4    84  ldr x3, [jssp], #8
0xffff7ab45bd8    88  ldr x16, pc+56 (addr 0x0000ffff7ab45c10)    ;; code: BUILTIN
0xffff7ab45bdc    92  br x16
0xffff7ab45be0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab45be4   100  d63f03e0       constant
0xffff7ab45be8   104  20d5b0f1       constant
0xffff7ab45bec   108  00000000       constant
0xffff7ab45bf0   112  20d57a99       constant
0xffff7ab45bf4   116  00000000       constant
0xffff7ab45bf8   120  20d05209       constant
0xffff7ab45bfc   124  00000000       constant
0xffff7ab45c00   128  7ab38860       constant
0xffff7ab45c04   132  0000ffff       constant
0xffff7ab45c08   136  20d05209       constant
0xffff7ab45c0c   140  00000000       constant
0xffff7ab45c10   144  7ab22420       constant
0xffff7ab45c14   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7ab45b90  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7ab45ba4  embedded object  (0x20d57a99 WeakCell for 0x4ec0b581 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab45bc0  embedded object  (0x20d05209 <String[4]: next>)
0xffff7ab45bc4  code target (HANDLER)  (0xffff7ab38860)
0xffff7ab45bcc  embedded object  (0x20d05209 <String[4]: next>)
0xffff7ab45bd8  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab45be0  constant pool (size 56)

kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 461)
0xffff7ab45fc0     0  movz x2, #0xe2c0
0xffff7ab45fc4     4  movk x2, #0x9ab, lsl #16
0xffff7ab45fc8     8  ldp x3, x0, [x2]
0xffff7ab45fcc    12  adds x16, x3, #0x98 (152)
0xffff7ab45fd0    16  ccmp x16, x0, #nzCv, lo
0xffff7ab45fd4    20  b.hi #+0xa4 (addr 0xffff7ab46078)
0xffff7ab45fd8    24  str x16, [x2]
0xffff7ab45fdc    28  orr x3, x3, #0x1
0xffff7ab45fe0    32  ldr x0, pc+264 (addr 0x0000ffff7ab460e8)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab45fe4    36  stur x0, [x3, #-1]
0xffff7ab45fe8    40  movz x0, #0x1100000000
0xffff7ab45fec    44  stur x0, [x3, #7]
0xffff7ab45ff0    48  stur x1, [x3, #15]
0xffff7ab45ff4    52  stur cp, [x3, #23]
0xffff7ab45ff8    56  ldr x0, pc+248 (addr 0x0000ffff7ab460f0)    ;; object: 0x20d04519 <the hole>
0xffff7ab45ffc    60  stur x0, [x3, #31]
0xffff7ab46000    64  ldur x0, [cp, #39]
0xffff7ab46004    68  stur x0, [x3, #39]
0xffff7ab46008    72  ldr x0, pc+240 (addr 0x0000ffff7ab460f8)    ;; object: 0x20d04241 <undefined>
0xffff7ab4600c    76  stur x0, [x3, #47]
0xffff7ab46010    80  ldr x0, pc+240 (addr 0x0000ffff7ab46100)    ;; object: 0x20d04241 <undefined>
0xffff7ab46014    84  stur x0, [x3, #55]
0xffff7ab46018    88  ldr x0, pc+240 (addr 0x0000ffff7ab46108)    ;; object: 0x20d04241 <undefined>
0xffff7ab4601c    92  stur x0, [x3, #63]
0xffff7ab46020    96  ldr x0, pc+240 (addr 0x0000ffff7ab46110)    ;; object: 0x20d04241 <undefined>
0xffff7ab46024   100  stur x0, [x3, #71]
0xffff7ab46028   104  ldr x0, pc+240 (addr 0x0000ffff7ab46118)    ;; object: 0x20d04241 <undefined>
0xffff7ab4602c   108  stur x0, [x3, #79]
0xffff7ab46030   112  ldr x0, pc+240 (addr 0x0000ffff7ab46120)    ;; object: 0x20d04241 <undefined>
0xffff7ab46034   116  stur x0, [x3, #87]
0xffff7ab46038   120  ldr x0, pc+240 (addr 0x0000ffff7ab46128)    ;; object: 0x20d04241 <undefined>
0xffff7ab4603c   124  stur x0, [x3, #95]
0xffff7ab46040   128  ldr x0, pc+240 (addr 0x0000ffff7ab46130)    ;; object: 0x20d04241 <undefined>
0xffff7ab46044   132  stur x0, [x3, #103]
0xffff7ab46048   136  ldr x0, pc+240 (addr 0x0000ffff7ab46138)    ;; object: 0x20d04241 <undefined>
0xffff7ab4604c   140  stur x0, [x3, #111]
0xffff7ab46050   144  ldr x0, pc+240 (addr 0x0000ffff7ab46140)    ;; object: 0x20d04241 <undefined>
0xffff7ab46054   148  stur x0, [x3, #119]
0xffff7ab46058   152  ldr x0, pc+240 (addr 0x0000ffff7ab46148)    ;; object: 0x20d04241 <undefined>
0xffff7ab4605c   156  stur x0, [x3, #127]
0xffff7ab46060   160  ldr x0, pc+240 (addr 0x0000ffff7ab46150)    ;; object: 0x20d04241 <undefined>
0xffff7ab46064   164  stur x0, [x3, #135]
0xffff7ab46068   168  ldr x0, pc+240 (addr 0x0000ffff7ab46158)    ;; object: 0x20d04241 <undefined>
0xffff7ab4606c   172  stur x0, [x3, #143]
0xffff7ab46070   176  mov x0, x3
0xffff7ab46074   180  ret
0xffff7ab46078   184  sub csp, jssp, #0x10 (16)
0xffff7ab4607c   188  stp fp, lr, [jssp, #-16]!
0xffff7ab46080   192  movz fp, #0xa00000000
0xffff7ab46084   196  sub csp, jssp, #0x8 (8)
0xffff7ab46088   200  str fp, [jssp, #-8]!
0xffff7ab4608c   204  add fp, jssp, #0x8 (8)
0xffff7ab46090   208  movz x3, #0x0
0xffff7ab46094   212  mov x16, lr
0xffff7ab46098   216  ldr x17, pc+200 (addr 0x0000ffff7ab46160)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab4609c   220  blr x17
0xffff7ab460a0   224  movz x0, #0x9800000000
0xffff7ab460a4   228  movz x10, #0x0
0xffff7ab460a8   232  sub csp, jssp, #0x10 (16)
0xffff7ab460ac   236  stp x10, x0, [jssp, #-16]!
0xffff7ab460b0   240  movz x0, #0x2
0xffff7ab460b4   244  movz x1, #0x5b88
0xffff7ab460b8   248  movk x1, #0xe2, lsl #16
0xffff7ab460bc   252  ldr x16, pc+172 (addr 0x0000ffff7ab46168)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab460c0   256  blr x16
0xffff7ab460c4   260  str x0, [jssp, #24]
0xffff7ab460c8   264  ldr x16, pc+168 (addr 0x0000ffff7ab46170)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab460cc   268  blr x16
0xffff7ab460d0   272  ldr lr, [jssp, #16]
0xffff7ab460d4   276  ldp xzr, fp, [jssp], #24
0xffff7ab460d8   280  b #-0xf8 (addr 0xffff7ab45fe0)
0xffff7ab460dc   284  580004df       constant pool begin (num_const = 38)    ;; constant pool
0xffff7ab460e0   288  d63f03e0       constant
0xffff7ab460e4   292  d503201f       constant
0xffff7ab460e8   296  4ec06149       constant
0xffff7ab460ec   300  00000000       constant
0xffff7ab460f0   304  20d04519       constant
0xffff7ab460f4   308  00000000       constant
0xffff7ab460f8   312  20d04241       constant
0xffff7ab460fc   316  00000000       constant
0xffff7ab46100   320  20d04241       constant
0xffff7ab46104   324  00000000       constant
0xffff7ab46108   328  20d04241       constant
0xffff7ab4610c   332  00000000       constant
0xffff7ab46110   336  20d04241       constant
0xffff7ab46114   340  00000000       constant
0xffff7ab46118   344  20d04241       constant
0xffff7ab4611c   348  00000000       constant
0xffff7ab46120   352  20d04241       constant
0xffff7ab46124   356  00000000       constant
0xffff7ab46128   360  20d04241       constant
0xffff7ab4612c   364  00000000       constant
0xffff7ab46130   368  20d04241       constant
0xffff7ab46134   372  00000000       constant
0xffff7ab46138   376  20d04241       constant
0xffff7ab4613c   380  00000000       constant
0xffff7ab46140   384  20d04241       constant
0xffff7ab46144   388  00000000       constant
0xffff7ab46148   392  20d04241       constant
0xffff7ab4614c   396  00000000       constant
0xffff7ab46150   400  20d04241       constant
0xffff7ab46154   404  00000000       constant
0xffff7ab46158   408  20d04241       constant
0xffff7ab4615c   412  00000000       constant
0xffff7ab46160   416  7ab06820       constant
0xffff7ab46164   420  0000ffff       constant
0xffff7ab46168   424  7ab06260       constant
0xffff7ab4616c   428  0000ffff       constant
0xffff7ab46170   432  7ab068e0       constant
0xffff7ab46174   436  0000ffff       constant


Safepoints (size = 21)
0xffff7ab460c4   260  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 24)
0xffff7ab45fe0  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab45ff8  embedded object  (0x20d04519 <the hole>)
0xffff7ab46008  embedded object  (0x20d04241 <undefined>)
0xffff7ab46010  embedded object  (0x20d04241 <undefined>)
0xffff7ab46018  embedded object  (0x20d04241 <undefined>)
0xffff7ab46020  embedded object  (0x20d04241 <undefined>)
0xffff7ab46028  embedded object  (0x20d04241 <undefined>)
0xffff7ab46030  embedded object  (0x20d04241 <undefined>)
0xffff7ab46038  embedded object  (0x20d04241 <undefined>)
0xffff7ab46040  embedded object  (0x20d04241 <undefined>)
0xffff7ab46048  embedded object  (0x20d04241 <undefined>)
0xffff7ab46050  embedded object  (0x20d04241 <undefined>)
0xffff7ab46058  embedded object  (0x20d04241 <undefined>)
0xffff7ab46060  embedded object  (0x20d04241 <undefined>)
0xffff7ab46068  embedded object  (0x20d04241 <undefined>)
0xffff7ab46098  code target (STUB)  (0xffff7ab06820)
0xffff7ab460bc  code target (STUB)  (0xffff7ab06260)
0xffff7ab460c8  code target (STUB)  (0xffff7ab068e0)
0xffff7ab460dc  constant pool (size 156)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 381)
0xffff7ab46b40     0  movz x2, #0xe2c0
0xffff7ab46b44     4  movk x2, #0x9ab, lsl #16
0xffff7ab46b48     8  ldp x3, x0, [x2]
0xffff7ab46b4c    12  adds x16, x3, #0x70 (112)
0xffff7ab46b50    16  ccmp x16, x0, #nzCv, lo
0xffff7ab46b54    20  b.hi #+0x7c (addr 0xffff7ab46bd0)
0xffff7ab46b58    24  str x16, [x2]
0xffff7ab46b5c    28  orr x3, x3, #0x1
0xffff7ab46b60    32  ldr x0, pc+224 (addr 0x0000ffff7ab46c40)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab46b64    36  stur x0, [x3, #-1]
0xffff7ab46b68    40  movz x0, #0xc00000000
0xffff7ab46b6c    44  stur x0, [x3, #7]
0xffff7ab46b70    48  stur x1, [x3, #15]
0xffff7ab46b74    52  stur cp, [x3, #23]
0xffff7ab46b78    56  ldr x0, pc+208 (addr 0x0000ffff7ab46c48)    ;; object: 0x20d04519 <the hole>
0xffff7ab46b7c    60  stur x0, [x3, #31]
0xffff7ab46b80    64  ldur x0, [cp, #39]
0xffff7ab46b84    68  stur x0, [x3, #39]
0xffff7ab46b88    72  ldr x0, pc+200 (addr 0x0000ffff7ab46c50)    ;; object: 0x20d04241 <undefined>
0xffff7ab46b8c    76  stur x0, [x3, #47]
0xffff7ab46b90    80  ldr x0, pc+200 (addr 0x0000ffff7ab46c58)    ;; object: 0x20d04241 <undefined>
0xffff7ab46b94    84  stur x0, [x3, #55]
0xffff7ab46b98    88  ldr x0, pc+200 (addr 0x0000ffff7ab46c60)    ;; object: 0x20d04241 <undefined>
0xffff7ab46b9c    92  stur x0, [x3, #63]
0xffff7ab46ba0    96  ldr x0, pc+200 (addr 0x0000ffff7ab46c68)    ;; object: 0x20d04241 <undefined>
0xffff7ab46ba4   100  stur x0, [x3, #71]
0xffff7ab46ba8   104  ldr x0, pc+200 (addr 0x0000ffff7ab46c70)    ;; object: 0x20d04241 <undefined>
0xffff7ab46bac   108  stur x0, [x3, #79]
0xffff7ab46bb0   112  ldr x0, pc+200 (addr 0x0000ffff7ab46c78)    ;; object: 0x20d04241 <undefined>
0xffff7ab46bb4   116  stur x0, [x3, #87]
0xffff7ab46bb8   120  ldr x0, pc+200 (addr 0x0000ffff7ab46c80)    ;; object: 0x20d04241 <undefined>
0xffff7ab46bbc   124  stur x0, [x3, #95]
0xffff7ab46bc0   128  ldr x0, pc+200 (addr 0x0000ffff7ab46c88)    ;; object: 0x20d04241 <undefined>
0xffff7ab46bc4   132  stur x0, [x3, #103]
0xffff7ab46bc8   136  mov x0, x3
0xffff7ab46bcc   140  ret
0xffff7ab46bd0   144  sub csp, jssp, #0x10 (16)
0xffff7ab46bd4   148  stp fp, lr, [jssp, #-16]!
0xffff7ab46bd8   152  movz fp, #0xa00000000
0xffff7ab46bdc   156  sub csp, jssp, #0x8 (8)
0xffff7ab46be0   160  str fp, [jssp, #-8]!
0xffff7ab46be4   164  add fp, jssp, #0x8 (8)
0xffff7ab46be8   168  movz x3, #0x0
0xffff7ab46bec   172  mov x16, lr
0xffff7ab46bf0   176  ldr x17, pc+160 (addr 0x0000ffff7ab46c90)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab46bf4   180  blr x17
0xffff7ab46bf8   184  movz x0, #0x7000000000
0xffff7ab46bfc   188  movz x10, #0x0
0xffff7ab46c00   192  sub csp, jssp, #0x10 (16)
0xffff7ab46c04   196  stp x10, x0, [jssp, #-16]!
0xffff7ab46c08   200  movz x0, #0x2
0xffff7ab46c0c   204  movz x1, #0x5b88
0xffff7ab46c10   208  movk x1, #0xe2, lsl #16
0xffff7ab46c14   212  ldr x16, pc+132 (addr 0x0000ffff7ab46c98)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab46c18   216  blr x16
0xffff7ab46c1c   220  str x0, [jssp, #24]
0xffff7ab46c20   224  ldr x16, pc+128 (addr 0x0000ffff7ab46ca0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab46c24   228  blr x16
0xffff7ab46c28   232  ldr lr, [jssp, #16]
0xffff7ab46c2c   236  ldp xzr, fp, [jssp], #24
0xffff7ab46c30   240  b #-0xd0 (addr 0xffff7ab46b60)
0xffff7ab46c34   244  5800039f       constant pool begin (num_const = 28)    ;; constant pool
0xffff7ab46c38   248  d63f03e0       constant
0xffff7ab46c3c   252  d503201f       constant
0xffff7ab46c40   256  4ec06149       constant
0xffff7ab46c44   260  00000000       constant
0xffff7ab46c48   264  20d04519       constant
0xffff7ab46c4c   268  00000000       constant
0xffff7ab46c50   272  20d04241       constant
0xffff7ab46c54   276  00000000       constant
0xffff7ab46c58   280  20d04241       constant
0xffff7ab46c5c   284  00000000       constant
0xffff7ab46c60   288  20d04241       constant
0xffff7ab46c64   292  00000000       constant
0xffff7ab46c68   296  20d04241       constant
0xffff7ab46c6c   300  00000000       constant
0xffff7ab46c70   304  20d04241       constant
0xffff7ab46c74   308  00000000       constant
0xffff7ab46c78   312  20d04241       constant
0xffff7ab46c7c   316  00000000       constant
0xffff7ab46c80   320  20d04241       constant
0xffff7ab46c84   324  00000000       constant
0xffff7ab46c88   328  20d04241       constant
0xffff7ab46c8c   332  00000000       constant
0xffff7ab46c90   336  7ab06820       constant
0xffff7ab46c94   340  0000ffff       constant
0xffff7ab46c98   344  7ab06260       constant
0xffff7ab46c9c   348  0000ffff       constant
0xffff7ab46ca0   352  7ab068e0       constant
0xffff7ab46ca4   356  0000ffff       constant


Safepoints (size = 21)
0xffff7ab46c1c   220  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 19)
0xffff7ab46b60  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab46b78  embedded object  (0x20d04519 <the hole>)
0xffff7ab46b88  embedded object  (0x20d04241 <undefined>)
0xffff7ab46b90  embedded object  (0x20d04241 <undefined>)
0xffff7ab46b98  embedded object  (0x20d04241 <undefined>)
0xffff7ab46ba0  embedded object  (0x20d04241 <undefined>)
0xffff7ab46ba8  embedded object  (0x20d04241 <undefined>)
0xffff7ab46bb0  embedded object  (0x20d04241 <undefined>)
0xffff7ab46bb8  embedded object  (0x20d04241 <undefined>)
0xffff7ab46bc0  embedded object  (0x20d04241 <undefined>)
0xffff7ab46bf0  code target (STUB)  (0xffff7ab06820)
0xffff7ab46c14  code target (STUB)  (0xffff7ab06260)
0xffff7ab46c20  code target (STUB)  (0xffff7ab068e0)
0xffff7ab46c34  constant pool (size 116)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 327685
name = CallICStub(args(5), NOT_NULL_OR_UNDEFINED, 
compiler = unknown
Instructions (size = 488)
0xffff7ab48400     0  add x4, x2, x3, asr #29
0xffff7ab48404     4  ldur x4, [x4, #15]
0xffff7ab48408     8  ldur x5, [x4, #7]
0xffff7ab4840c    12  cmp x5, x1
0xffff7ab48410    16  b.ne #+0x2c (addr 0xffff7ab4843c)
0xffff7ab48414    20  tbz w1, #0, #+0x28 (addr 0xffff7ab4843c)
0xffff7ab48418    24  add x2, x2, x3, asr #29
0xffff7ab4841c    28  add x2, x2, #0x18 (24)
0xffff7ab48420    32  ldur x3, [x2, #-1]
0xffff7ab48424    36  movz x16, #0x200000000
0xffff7ab48428    40  add x3, x3, x16
0xffff7ab4842c    44  stur x3, [x2, #-1]
0xffff7ab48430    48  movz x0, #0x5
0xffff7ab48434    52  ldr x16, pc+372 (addr 0x0000ffff7ab485a8)    ;; code: BUILTIN
0xffff7ab48438    56  br x16
0xffff7ab4843c    60  ldr x16, [x26, #2400]
0xffff7ab48440    64  cmp x4, x16
0xffff7ab48444    68  b.eq #+0x78 (addr 0xffff7ab484bc)
0xffff7ab48448    72  ldur x5, [x4, #-1]
0xffff7ab4844c    76  ldr x16, [x26, #2736]
0xffff7ab48450    80  cmp x5, x16
0xffff7ab48454    84  b.ne #+0x40 (addr 0xffff7ab48494)
0xffff7ab48458    88  ldur x5, [cp, #39]
0xffff7ab4845c    92  ldur x5, [x5, #95]
0xffff7ab48460    96  cmp x1, x5
0xffff7ab48464   100  b.ne #+0xec (addr 0xffff7ab48550)
0xffff7ab48468   104  movz x0, #0x5
0xffff7ab4846c   108  add x2, x2, x3, asr #29
0xffff7ab48470   112  add x2, x2, #0x18 (24)
0xffff7ab48474   116  ldur x3, [x2, #-1]
0xffff7ab48478   120  movz x16, #0x200000000
0xffff7ab4847c   124  add x3, x3, x16
0xffff7ab48480   128  stur x3, [x2, #-1]
0xffff7ab48484   132  mov x2, x4
0xffff7ab48488   136  mov x3, x1
0xffff7ab4848c   140  ldr x16, pc+292 (addr 0x0000ffff7ab485b0)    ;; code: STUB, ArrayConstructorStub, minor: 3
0xffff7ab48490   144  br x16
0xffff7ab48494   148  ldr x16, [x26, #2568]
0xffff7ab48498   152  cmp x4, x16
0xffff7ab4849c   156  b.eq #+0xb4 (addr 0xffff7ab48550)
0xffff7ab484a0   160  ldur x5, [x4, #-1]
0xffff7ab484a4   164  ldrb w5, [x5, #11]
0xffff7ab484a8   168  cmp x5, #0xc9 (201)
0xffff7ab484ac   172  b.ne #+0xa4 (addr 0xffff7ab48550)
0xffff7ab484b0   176  add x4, x2, x3, asr #29
0xffff7ab484b4   180  ldr x5, [x26, #2400]
0xffff7ab484b8   184  stur x5, [x4, #15]
0xffff7ab484bc   188  movz x0, #0x5
0xffff7ab484c0   192  ldr x16, pc+248 (addr 0x0000ffff7ab485b8)    ;; code: BUILTIN
0xffff7ab484c4   196  br x16
0xffff7ab484c8   200  tbz w1, #0, #+0x88 (addr 0xffff7ab48550)
0xffff7ab484cc   204  ldur x5, [x1, #-1]
0xffff7ab484d0   208  ldrb w5, [x5, #11]
0xffff7ab484d4   212  cmp x5, #0xc9 (201)
0xffff7ab484d8   216  b.ne #+0x78 (addr 0xffff7ab48550)
0xffff7ab484dc   220  ldur x5, [cp, #39]
0xffff7ab484e0   224  ldur x5, [x5, #95]
0xffff7ab484e4   228  cmp x1, x5
0xffff7ab484e8   232  b.eq #+0x68 (addr 0xffff7ab48550)
0xffff7ab484ec   236  ldur x4, [x1, #39]
0xffff7ab484f0   240  ldur x4, [x4, #39]
0xffff7ab484f4   244  ldur x5, [cp, #39]
0xffff7ab484f8   248  cmp x4, x5
0xffff7ab484fc   252  b.ne #+0x54 (addr 0xffff7ab48550)
0xffff7ab48500   256  movz x5, #0x200000000
0xffff7ab48504   260  adds x4, x2, x3, asr #29
0xffff7ab48508   264  stur x5, [x4, #23]
0xffff7ab4850c   268  movz x16, #0xc00000000
0xffff7ab48510   272  sub csp, jssp, #0x10 (16)
0xffff7ab48514   276  stp fp, lr, [jssp, #-16]!
0xffff7ab48518   280  sub csp, jssp, #0x10 (16)
0xffff7ab4851c   284  str x16, [jssp, #-8]!
0xffff7ab48520   288  ldr x17, pc+160 (addr 0x0000ffff7ab485c0)    ;; object: 0xffff7ab483a1 <Code: CALL_IC>
0xffff7ab48524   292  sub csp, jssp, #0x10 (16)
0xffff7ab48528   296  str x17, [jssp, #-8]!
0xffff7ab4852c   300  add fp, jssp, #0x10 (16)
0xffff7ab48530   304  sub csp, jssp, #0x8 (8)
0xffff7ab48534   308  str x1, [jssp, #-8]!
0xffff7ab48538   312  ldr x16, pc+144 (addr 0x0000ffff7ab485c8)    ;; code: STUB, CreateWeakCellStub, minor: 0
0xffff7ab4853c   316  blr x16
0xffff7ab48540   320  ldr x1, [jssp], #8
0xffff7ab48544   324  mov jssp, fp
0xffff7ab48548   328  ldp fp, lr, [jssp], #16
0xffff7ab4854c   332  b #-0x11c (addr 0xffff7ab48430)
0xffff7ab48550   336  movz x16, #0xc00000000
0xffff7ab48554   340  sub csp, jssp, #0x10 (16)
0xffff7ab48558   344  stp fp, lr, [jssp, #-16]!
0xffff7ab4855c   348  sub csp, jssp, #0x10 (16)
0xffff7ab48560   352  str x16, [jssp, #-8]!
0xffff7ab48564   356  ldr x17, pc+108 (addr 0x0000ffff7ab485d0)    ;; object: 0xffff7ab483a1 <Code: CALL_IC>
0xffff7ab48568   360  sub csp, jssp, #0x10 (16)
0xffff7ab4856c   364  str x17, [jssp, #-8]!
0xffff7ab48570   368  add fp, jssp, #0x10 (16)
0xffff7ab48574   372  sub csp, jssp, #0x18 (24)
0xffff7ab48578   376  stp x3, x2, [jssp, #-24]!
0xffff7ab4857c   380  str x1, [jssp, #16]
0xffff7ab48580   384  movz x0, #0x3
0xffff7ab48584   388  ldr x1, pc+84 (addr 0x0000ffff7ab485d8)    ;; external reference (Runtime::CallIC_Miss)
0xffff7ab48588   392  ldr x16, pc+88 (addr 0x0000ffff7ab485e0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab4858c   396  blr x16
0xffff7ab48590   400  mov x1, x0
0xffff7ab48594   404  mov jssp, fp
0xffff7ab48598   408  ldp fp, lr, [jssp], #16
0xffff7ab4859c   412  b #-0xe0 (addr 0xffff7ab484bc)
0xffff7ab485a0   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7ab485a4   420  d63f03e0       constant
0xffff7ab485a8   424  7ab1e600       constant
0xffff7ab485ac   428  0000ffff       constant
0xffff7ab485b0   432  7ab33b00       constant
0xffff7ab485b4   436  0000ffff       constant
0xffff7ab485b8   440  7ab1f6c0       constant
0xffff7ab485bc   444  0000ffff       constant
0xffff7ab485c0   448  7ab483a1       constant
0xffff7ab485c4   452  0000ffff       constant
0xffff7ab485c8   456  7ab0ddc0       constant
0xffff7ab485cc   460  0000ffff       constant
0xffff7ab485d0   464  7ab483a1       constant
0xffff7ab485d4   468  0000ffff       constant
0xffff7ab485d8   472  00c86928       constant
0xffff7ab485dc   476  00000000       constant
0xffff7ab485e0   480  7ab06060       constant
0xffff7ab485e4   484  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab48434  code target (BUILTIN)  (0xffff7ab1e600)
0xffff7ab4848c  code target (STUB)  (0xffff7ab33b00)
0xffff7ab484c0  code target (BUILTIN)  (0xffff7ab1f6c0)
0xffff7ab48520  embedded object  (0xffff7ab483a1 <Code: CALL_IC>)
0xffff7ab48538  code target (STUB)  (0xffff7ab0ddc0)
0xffff7ab48564  embedded object  (0xffff7ab483a1 <Code: CALL_IC>)
0xffff7ab48584  external reference (Runtime::CallIC_Miss)  (0xc86928)
0xffff7ab48588  code target (STUB)  (0xffff7ab06060)
0xffff7ab485a0  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 327685
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0xffff7ab48660     0  ldur x2, [fp, #-16]
0xffff7ab48664     4  ldur x2, [x2, #31]
0xffff7ab48668     8  ldur x2, [x2, #87]
0xffff7ab4866c    12  ldr x16, pc+20 (addr 0x0000ffff7ab48680)    ;; code: CALL_IC, GENERIC
0xffff7ab48670    16  br x16
0xffff7ab48674    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab48678    24  d63f03e0       constant
0xffff7ab4867c    28  d503201f       constant
0xffff7ab48680    32  7ab48400       constant
0xffff7ab48684    36  0000ffff       constant


RelocInfo (size = 7)
0xffff7ab4866c  code target (CALL_IC)  (0xffff7ab48400)
0xffff7ab48674  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = RECEIVER*RECEIVER -> KNOWN_RECEIVER
compare_operation = EQ
name = CompareICStub
compiler = unknown
Instructions (size = 192)
0xffff7ab4ad80     0  and x16, x0, x1
0xffff7ab4ad84     4  tbz w16, #0, #+0x2c (addr 0xffff7ab4adb0)
0xffff7ab4ad88     8  ldr x12, pc+152 (addr 0x0000ffff7ab4ae20)    ;; object: 0x20d747c1 WeakCell for 0x4ec0c131 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab4ad8c    12  ldur x12, [x12, #7]
0xffff7ab4ad90    16  ldur x10, [x0, #-1]
0xffff7ab4ad94    20  ldur x11, [x1, #-1]
0xffff7ab4ad98    24  cmp x10, x12
0xffff7ab4ad9c    28  b.ne #+0x14 (addr 0xffff7ab4adb0)
0xffff7ab4ada0    32  cmp x11, x12
0xffff7ab4ada4    36  b.ne #+0xc (addr 0xffff7ab4adb0)
0xffff7ab4ada8    40  sub x0, x0, x1
0xffff7ab4adac    44  ret
0xffff7ab4adb0    48  movz x16, #0xc00000000
0xffff7ab4adb4    52  sub csp, jssp, #0x10 (16)
0xffff7ab4adb8    56  stp fp, lr, [jssp, #-16]!
0xffff7ab4adbc    60  sub csp, jssp, #0x10 (16)
0xffff7ab4adc0    64  str x16, [jssp, #-8]!
0xffff7ab4adc4    68  ldr x17, pc+100 (addr 0x0000ffff7ab4ae28)    ;; object: 0xffff7ab4ad21 <Code: COMPARE_IC>
0xffff7ab4adc8    72  sub csp, jssp, #0x10 (16)
0xffff7ab4adcc    76  str x17, [jssp, #-8]!
0xffff7ab4add0    80  add fp, jssp, #0x10 (16)
0xffff7ab4add4    84  sub csp, jssp, #0x18 (24)
0xffff7ab4add8    88  stp lr, x0, [jssp, #-24]!
0xffff7ab4addc    92  str x1, [jssp, #16]
0xffff7ab4ade0    96  movz x10, #0x2d00000000
0xffff7ab4ade4   100  sub csp, jssp, #0x18 (24)
0xffff7ab4ade8   104  stp x10, x0, [jssp, #-24]!
0xffff7ab4adec   108  str x1, [jssp, #16]
0xffff7ab4adf0   112  movz x0, #0x3
0xffff7ab4adf4   116  ldr x1, pc+60 (addr 0x0000ffff7ab4ae30)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ab4adf8   120  ldr x16, pc+64 (addr 0x0000ffff7ab4ae38)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab4adfc   124  blr x16
0xffff7ab4ae00   128  add x11, x0, #0x5f (95)
0xffff7ab4ae04   132  ldr x1, [jssp, #16]
0xffff7ab4ae08   136  ldp lr, x0, [jssp], #24
0xffff7ab4ae0c   140  mov jssp, fp
0xffff7ab4ae10   144  ldp fp, lr, [jssp], #16
0xffff7ab4ae14   148  br x11
0xffff7ab4ae18   152  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7ab4ae1c   156  d63f03e0       constant
0xffff7ab4ae20   160  20d747c1       constant
0xffff7ab4ae24   164  00000000       constant
0xffff7ab4ae28   168  7ab4ad21       constant
0xffff7ab4ae2c   172  0000ffff       constant
0xffff7ab4ae30   176  00c8a980       constant
0xffff7ab4ae34   180  00000000       constant
0xffff7ab4ae38   184  7ab06060       constant
0xffff7ab4ae3c   188  0000ffff       constant


RelocInfo (size = 11)
0xffff7ab4ad88  embedded object  (0x20d747c1 WeakCell for 0x4ec0c131 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab4adc4  embedded object  (0xffff7ab4ad21 <Code: COMPARE_IC>)
0xffff7ab4adf4  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ab4adf8  code target (STUB)  (0xffff7ab06060)
0xffff7ab4ae18  constant pool (size 40)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = UNINITIALIZED
extra_ic_state = 0
compare_state = UNINITIALIZED*UNINITIALIZED -> UNINITIALIZED
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 136)
0xffff7ab4aea0     0  movz x16, #0xc00000000
0xffff7ab4aea4     4  sub csp, jssp, #0x10 (16)
0xffff7ab4aea8     8  stp fp, lr, [jssp, #-16]!
0xffff7ab4aeac    12  sub csp, jssp, #0x10 (16)
0xffff7ab4aeb0    16  str x16, [jssp, #-8]!
0xffff7ab4aeb4    20  ldr x17, pc+92 (addr 0x0000ffff7ab4af10)    ;; object: 0xffff7ab4ae41 <Code: COMPARE_IC>
0xffff7ab4aeb8    24  sub csp, jssp, #0x10 (16)
0xffff7ab4aebc    28  str x17, [jssp, #-8]!
0xffff7ab4aec0    32  add fp, jssp, #0x10 (16)
0xffff7ab4aec4    36  sub csp, jssp, #0x18 (24)
0xffff7ab4aec8    40  stp lr, x0, [jssp, #-24]!
0xffff7ab4aecc    44  str x1, [jssp, #16]
0xffff7ab4aed0    48  movz x10, #0x2f00000000
0xffff7ab4aed4    52  sub csp, jssp, #0x18 (24)
0xffff7ab4aed8    56  stp x10, x0, [jssp, #-24]!
0xffff7ab4aedc    60  str x1, [jssp, #16]
0xffff7ab4aee0    64  movz x0, #0x3
0xffff7ab4aee4    68  ldr x1, pc+52 (addr 0x0000ffff7ab4af18)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ab4aee8    72  ldr x16, pc+56 (addr 0x0000ffff7ab4af20)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab4aeec    76  blr x16
0xffff7ab4aef0    80  add x11, x0, #0x5f (95)
0xffff7ab4aef4    84  ldr x1, [jssp, #16]
0xffff7ab4aef8    88  ldp lr, x0, [jssp], #24
0xffff7ab4aefc    92  mov jssp, fp
0xffff7ab4af00    96  ldp fp, lr, [jssp], #16
0xffff7ab4af04   100  br x11
0xffff7ab4af08   104  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab4af0c   108  d63f03e0       constant
0xffff7ab4af10   112  7ab4ae41       constant
0xffff7ab4af14   116  0000ffff       constant
0xffff7ab4af18   120  00c8a980       constant
0xffff7ab4af1c   124  00000000       constant
0xffff7ab4af20   128  7ab06060       constant
0xffff7ab4af24   132  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab4aeb4  embedded object  (0xffff7ab4ae41 <Code: COMPARE_IC>)
0xffff7ab4aee4  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ab4aee8  code target (STUB)  (0xffff7ab06060)
0xffff7ab4af08  constant pool (size 32)


kind = STUB
major_key = DoubleToIStub
name = DoubleToIStub
compiler = unknown
Instructions (size = 60)
0xffff7ab4b6c0     0  sub csp, jssp, #0x10 (16)
0xffff7ab4b6c4     4  stp x2, x1, [jssp, #-16]!
0xffff7ab4b6c8     8  ldur x7, [x0, #7]
0xffff7ab4b6cc    12  ubfx x1, x7, #52, #11
0xffff7ab4b6d0    16  cmp x1, #0x453 (1107)
0xffff7ab4b6d4    20  csel x7, xzr, x7, ge
0xffff7ab4b6d8    24  b.ge #+0x1c (addr 0xffff7ab4b6f4)
0xffff7ab4b6dc    28  ubfx x2, x7, #0, #52
0xffff7ab4b6e0    32  orr x2, x2, #0x10000000000000
0xffff7ab4b6e4    36  tst x7, #0x8000000000000000
0xffff7ab4b6e8    40  cneg x2, x2, ne
0xffff7ab4b6ec    44  sub x1, x1, #0x433 (1075)
0xffff7ab4b6f0    48  lsl x7, x2, x1
0xffff7ab4b6f4    52  ldp x2, x1, [jssp], #16
0xffff7ab4b6f8    56  ret


RelocInfo (size = 0)


kind = STUB
major_key = BinaryOpWithAllocationSiteStub
name = BinaryOpWithAllocationSiteStub(ADD_CreateAllocationMementos:String*Smi->String)
compiler = crankshaft
Instructions (size = 1377)
0xffff7ab4b760     0  movz x16, #0xa00000000
0xffff7ab4b764     4  sub csp, jssp, #0x10 (16)
0xffff7ab4b768     8  stp fp, lr, [jssp, #-16]!
0xffff7ab4b76c    12  mov fp, jssp
0xffff7ab4b770    16  sub csp, jssp, #0x28 (40)
0xffff7ab4b774    20  sub jssp, jssp, #0x28 (40)
0xffff7ab4b778    24  stur x16, [fp, #-8]
0xffff7ab4b77c    28  str x2, [jssp, #24]
0xffff7ab4b780    32  str x1, [jssp, #16]
0xffff7ab4b784    36  str x0, [jssp, #8]
0xffff7ab4b788    40  str cp, [jssp]
0xffff7ab4b78c    44  mov x3, cp
0xffff7ab4b790    48  tbz w1, #0, #+0x4a8 (addr 0xffff7ab4bc38)
0xffff7ab4b794    52  ldur x4, [x1, #-1]
0xffff7ab4b798    56  ldrb w4, [x4, #11]
0xffff7ab4b79c    60  tbnz w4, #7, #+0x4a4 (addr 0xffff7ab4bc40)
0xffff7ab4b7a0    64  ldr x4, [x26, #368]
0xffff7ab4b7a4    68  ldur w5, [x4, #11]
0xffff7ab4b7a8    72  asr w5, w5, #1
0xffff7ab4b7ac    76  sub w5, w5, #0x1 (1)
0xffff7ab4b7b0    80  tbz w0, #0, #+0xc (addr 0xffff7ab4b7bc)
0xffff7ab4b7b4    84  ldr x16, pc+1012 (addr 0x0000ffff7ab4bba8)    ;; lazy deoptimization bailout 2
0xffff7ab4b7b8    88  blr x16
0xffff7ab4b7bc    92  tbnz w0, #0, #+0x2f4 (addr 0xffff7ab4bab0)
0xffff7ab4b7c0    96  asr x7, x0, #32
0xffff7ab4b7c4   100  and w5, w5, w7
0xffff7ab4b7c8   104  lsl w5, w5, #1
0xffff7ab4b7cc   108  add x6, x4, #0xf (15)
0xffff7ab4b7d0   112  ldr x7, [x6, w5, sxtw #3]
0xffff7ab4b7d4   116  cmp x0, x7
0xffff7ab4b7d8   120  b.eq #+0x28 (addr 0xffff7ab4b800)
0xffff7ab4b7dc   124  sub csp, jssp, #0x8 (8)
0xffff7ab4b7e0   128  str x0, [jssp, #-8]!
0xffff7ab4b7e4   132  mov cp, x3
0xffff7ab4b7e8   136  movz x0, #0x1
0xffff7ab4b7ec   140  movz x1, #0xce00
0xffff7ab4b7f0   144  movk x1, #0xe3, lsl #16
0xffff7ab4b7f4   148  ldr x16, pc+956 (addr 0x0000ffff7ab4bbb0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab4b7f8   152  blr x16
0xffff7ab4b7fc   156  b #+0x10 (addr 0xffff7ab4b80c)
0xffff7ab4b800   160  add x0, x4, #0x17 (23)
0xffff7ab4b804   164  ldr x1, [x0, w5, sxtw #3]
0xffff7ab4b808   168  mov x0, x1
0xffff7ab4b80c   172  ldr x1, [jssp, #16]
0xffff7ab4b810   176  ldur w2, [x1, #19]
0xffff7ab4b814   180  ldur w3, [x0, #19]
0xffff7ab4b818   184  cbz w2, #+0x288 (addr 0xffff7ab4baa0)
0xffff7ab4b81c   188  cbz w3, #+0x27c (addr 0xffff7ab4ba98)
0xffff7ab4b820   192  add w4, w2, w3
0xffff7ab4b824   196  movn w16, #0xe0
0xffff7ab4b828   200  cmp w4, w16, lsr #4
0xffff7ab4b82c   204  b.hs #+0x41c (addr 0xffff7ab4bc48)
0xffff7ab4b830   208  cmp w4, #0xd (13)
0xffff7ab4b834   212  b.ge #+0x1bc (addr 0xffff7ab4b9f0)
0xffff7ab4b838   216  ldur x5, [x1, #-1]
0xffff7ab4b83c   220  ldrb w5, [x5, #11]
0xffff7ab4b840   224  ldur x6, [x0, #-1]
0xffff7ab4b844   228  ldrb w6, [x6, #11]
0xffff7ab4b848   232  orr w7, w5, w6
0xffff7ab4b84c   236  eor w5, w5, w6
0xffff7ab4b850   240  and w5, w5, #0x4
0xffff7ab4b854   244  cbnz w5, #+0xc (addr 0xffff7ab4b860)
0xffff7ab4b858   248  and w5, w7, #0x3
0xffff7ab4b85c   252  cbz w5, #+0x28 (addr 0xffff7ab4b884)
0xffff7ab4b860   256  sub csp, jssp, #0x10 (16)
0xffff7ab4b864   260  stp x0, x1, [jssp, #-16]!
0xffff7ab4b868   264  ldr cp, [jssp, #16]
0xffff7ab4b86c   268  movz x0, #0x2
0xffff7ab4b870   272  movz x1, #0xa6c0
0xffff7ab4b874   276  movk x1, #0xec, lsl #16
0xffff7ab4b878   280  ldr x16, pc+832 (addr 0x0000ffff7ab4bbb8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab4b87c   284  blr x16
0xffff7ab4b880   288  b #+0x220 (addr 0xffff7ab4baa0)
0xffff7ab4b884   292  and w1, w7, #0x4
0xffff7ab4b888   296  cbnz w1, #+0x14 (addr 0xffff7ab4b89c)
0xffff7ab4b88c   300  lsl w1, w4, #1
0xffff7ab4b890   304  mov x5, x1
0xffff7ab4b894   308  ldr x1, pc+812 (addr 0x0000ffff7ab4bbc0)    ;; object: 0x4ec04ba1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab4b898   312  b #+0xc (addr 0xffff7ab4b8a4)
0xffff7ab4b89c   316  mov x5, x4
0xffff7ab4b8a0   320  ldr x1, pc+808 (addr 0x0000ffff7ab4bbc8)    ;; object: 0x4ec04bf9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab4b8a4   324  add w5, w5, #0x1f (31)
0xffff7ab4b8a8   328  and w5, w5, #0xfffffff8
0xffff7ab4b8ac   332  cmp w5, #0x96000 (614400)
0xffff7ab4b8b0   336  b.lt #+0x2c (addr 0xffff7ab4b8dc)
0xffff7ab4b8b4   340  sub csp, jssp, #0x10 (16)
0xffff7ab4b8b8   344  ldr x1, [jssp, #16]
0xffff7ab4b8bc   348  stp x0, x1, [jssp, #-16]!
0xffff7ab4b8c0   352  ldr cp, [jssp, #16]
0xffff7ab4b8c4   356  movz x0, #0x2
0xffff7ab4b8c8   360  movz x1, #0xa6c0
0xffff7ab4b8cc   364  movk x1, #0xec, lsl #16
0xffff7ab4b8d0   368  ldr x16, pc+768 (addr 0x0000ffff7ab4bbd0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab4b8d4   372  blr x16
0xffff7ab4b8d8   376  b #+0x1c8 (addr 0xffff7ab4baa0)
0xffff7ab4b8dc   380  add w6, w5, #0x10 (16)
0xffff7ab4b8e0   384  sxtw x6, w6
0xffff7ab4b8e4   388  movz x7, #0xe2c0
0xffff7ab4b8e8   392  movk x7, #0x9ab, lsl #16
0xffff7ab4b8ec   396  ldp x9, x16, [x7]
0xffff7ab4b8f0   400  adds x8, x9, x6
0xffff7ab4b8f4   404  ccmp x8, x16, #nzCv, lo
0xffff7ab4b8f8   408  b.hi #+0x218 (addr 0xffff7ab4bb10)
0xffff7ab4b8fc   412  str x8, [x7]
0xffff7ab4b900   416  orr x9, x9, #0x1
0xffff7ab4b904   420  add x5, x9, w5, sxtw
0xffff7ab4b908   424  ldr x6, pc+720 (addr 0x0000ffff7ab4bbd8)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab4b90c   428  stur x6, [x5, #-1]
0xffff7ab4b910   432  ldr x6, [jssp, #24]
0xffff7ab4b914   436  stur x6, [x5, #7]
0xffff7ab4b918   440  ldur w5, [x6, #35]
0xffff7ab4b91c   444  add w5, w5, #0x1 (1)
0xffff7ab4b920   448  lsl x5, x5, #32
0xffff7ab4b924   452  stur x5, [x6, #31]
0xffff7ab4b928   456  stur x1, [x9, #-1]
0xffff7ab4b92c   460  movz w5, #0x3
0xffff7ab4b930   464  stur w5, [x9, #7]
0xffff7ab4b934   468  lsl x4, x4, #32
0xffff7ab4b938   472  stur x4, [x9, #15]
0xffff7ab4b93c   476  ldr x4, pc+676 (addr 0x0000ffff7ab4bbe0)    ;; object: 0x4ec04ba1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab4b940   480  cmp x1, x4
0xffff7ab4b944   484  b.eq #+0x54 (addr 0xffff7ab4b998)
0xffff7ab4b948   488  ldr x5, [jssp, #16]
0xffff7ab4b94c   492  movz x1, #0x0
0xffff7ab4b950   496  cmp w2, w1
0xffff7ab4b954   500  b.le #+0x1c (addr 0xffff7ab4b970)
0xffff7ab4b958   504  add x4, x5, #0x17 (23)
0xffff7ab4b95c   508  ldrb w6, [x4, w1, sxtw]
0xffff7ab4b960   512  add x4, x9, #0x17 (23)
0xffff7ab4b964   516  strb w6, [x4, w1, sxtw]
0xffff7ab4b968   520  add w1, w1, #0x1 (1)
0xffff7ab4b96c   524  b #-0x1c (addr 0xffff7ab4b950)
0xffff7ab4b970   528  movz x1, #0x0
0xffff7ab4b974   532  cmp w3, w1
0xffff7ab4b978   536  b.le #+0x70 (addr 0xffff7ab4b9e8)
0xffff7ab4b97c   540  add x4, x0, #0x17 (23)
0xffff7ab4b980   544  ldrb w5, [x4, w1, sxtw]
0xffff7ab4b984   548  add w4, w2, w1
0xffff7ab4b988   552  add x6, x9, #0x17 (23)
0xffff7ab4b98c   556  strb w5, [x6, w4, sxtw]
0xffff7ab4b990   560  add w1, w1, #0x1 (1)
0xffff7ab4b994   564  b #-0x20 (addr 0xffff7ab4b974)
0xffff7ab4b998   568  ldr x5, [jssp, #16]
0xffff7ab4b99c   572  movz x1, #0x0
0xffff7ab4b9a0   576  cmp w2, w1
0xffff7ab4b9a4   580  b.le #+0x1c (addr 0xffff7ab4b9c0)
0xffff7ab4b9a8   584  add x4, x5, #0x17 (23)
0xffff7ab4b9ac   588  ldrh w6, [x4, w1, sxtw #1]
0xffff7ab4b9b0   592  add x4, x9, #0x17 (23)
0xffff7ab4b9b4   596  strh w6, [x4, w1, sxtw #1]
0xffff7ab4b9b8   600  add w1, w1, #0x1 (1)
0xffff7ab4b9bc   604  b #-0x1c (addr 0xffff7ab4b9a0)
0xffff7ab4b9c0   608  movz x1, #0x0
0xffff7ab4b9c4   612  cmp w3, w1
0xffff7ab4b9c8   616  b.le #+0x20 (addr 0xffff7ab4b9e8)
0xffff7ab4b9cc   620  add x4, x0, #0x17 (23)
0xffff7ab4b9d0   624  ldrh w5, [x4, w1, sxtw #1]
0xffff7ab4b9d4   628  add w4, w2, w1
0xffff7ab4b9d8   632  add x6, x9, #0x17 (23)
0xffff7ab4b9dc   636  strh w5, [x6, w4, sxtw #1]
0xffff7ab4b9e0   640  add w1, w1, #0x1 (1)
0xffff7ab4b9e4   644  b #-0x20 (addr 0xffff7ab4b9c4)
0xffff7ab4b9e8   648  mov x0, x9
0xffff7ab4b9ec   652  b #+0xb4 (addr 0xffff7ab4baa0)
0xffff7ab4b9f0   656  ldr x6, [jssp, #24]
0xffff7ab4b9f4   660  mov x5, x1
0xffff7ab4b9f8   664  ldur x1, [x5, #-1]
0xffff7ab4b9fc   668  ldrb w1, [x1, #11]
0xffff7ab4ba00   672  ldur x2, [x0, #-1]
0xffff7ab4ba04   676  ldrb w2, [x2, #11]
0xffff7ab4ba08   680  movz x7, #0xe2c0
0xffff7ab4ba0c   684  movk x7, #0x9ab, lsl #16
0xffff7ab4ba10   688  ldp x8, x3, [x7]
0xffff7ab4ba14   692  adds x16, x8, #0x38 (56)
0xffff7ab4ba18   696  ccmp x16, x3, #nzCv, lo
0xffff7ab4ba1c   700  b.hi #+0x13c (addr 0xffff7ab4bb58)
0xffff7ab4ba20   704  str x16, [x7]
0xffff7ab4ba24   708  orr x8, x8, #0x1
0xffff7ab4ba28   712  add x3, x8, #0x28 (40)
0xffff7ab4ba2c   716  ldr x7, pc+444 (addr 0x0000ffff7ab4bbe8)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab4ba30   720  stur x7, [x3, #-1]
0xffff7ab4ba34   724  stur x6, [x3, #7]
0xffff7ab4ba38   728  ldur w3, [x6, #35]
0xffff7ab4ba3c   732  add w3, w3, #0x1 (1)
0xffff7ab4ba40   736  lsl x3, x3, #32
0xffff7ab4ba44   740  stur x3, [x6, #31]
0xffff7ab4ba48   744  and w3, w1, w2
0xffff7ab4ba4c   748  eor w1, w1, w2
0xffff7ab4ba50   752  and w2, w3, #0xc
0xffff7ab4ba54   756  cbnz w2, #+0x1c (addr 0xffff7ab4ba70)
0xffff7ab4ba58   760  and w1, w1, #0xc
0xffff7ab4ba5c   764  cmp w1, #0xc (12)
0xffff7ab4ba60   768  b.eq #+0x10 (addr 0xffff7ab4ba70)
0xffff7ab4ba64   772  ldr x1, pc+396 (addr 0x0000ffff7ab4bbf0)    ;; object: 0x4ec04c51 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab4ba68   776  stur x1, [x8, #-1]
0xffff7ab4ba6c   780  b #+0xc (addr 0xffff7ab4ba78)
0xffff7ab4ba70   784  ldr x1, pc+392 (addr 0x0000ffff7ab4bbf8)    ;; object: 0x4ec04ca9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab4ba74   788  stur x1, [x8, #-1]
0xffff7ab4ba78   792  movz w1, #0x3
0xffff7ab4ba7c   796  stur w1, [x8, #7]
0xffff7ab4ba80   800  lsl x1, x4, #32
0xffff7ab4ba84   804  stur x1, [x8, #15]
0xffff7ab4ba88   808  stur x5, [x8, #23]
0xffff7ab4ba8c   812  stur x0, [x8, #31]
0xffff7ab4ba90   816  mov x0, x8
0xffff7ab4ba94   820  b #+0xc (addr 0xffff7ab4baa0)
0xffff7ab4ba98   824  mov x5, x1
0xffff7ab4ba9c   828  mov x0, x5
0xffff7ab4baa0   832  ldr cp, [jssp]
0xffff7ab4baa4   836  mov jssp, fp
0xffff7ab4baa8   840  ldp fp, lr, [jssp], #16
0xffff7ab4baac   844  ret
0xffff7ab4bab0   848  ldur x16, [x0, #-1]
0xffff7ab4bab4   852  ldr x17, [x26, #120]
0xffff7ab4bab8   856  cmp x16, x17
0xffff7ab4babc   860  b.ne #+0x30 (addr 0xffff7ab4baec)
0xffff7ab4bac0   864  ldur d30, [x0, #7]
0xffff7ab4bac4   868  fcvtzs x7, d30
0xffff7ab4bac8   872  cmp x7, #0x1 (1)
0xffff7ab4bacc   876  ccmn x7, #1, #nzcV, vc
0xffff7ab4bad0   880  b.vc #+0x18 (addr 0xffff7ab4bae8)
0xffff7ab4bad4   884  sub csp, jssp, #0x8 (8)
0xffff7ab4bad8   888  str lr, [jssp, #-8]!
0xffff7ab4badc   892  ldr x16, pc+292 (addr 0x0000ffff7ab4bc00)    ;; code: STUB, DoubleToIStub, minor: 127424
0xffff7ab4bae0   896  blr x16
0xffff7ab4bae4   900  ldr lr, [jssp], #8
0xffff7ab4bae8   904  b #+0x24 (addr 0xffff7ab4bb0c)
0xffff7ab4baec   908  ldp x7, x6, [x26, #64]
0xffff7ab4baf0   912  cmp x0, x7
0xffff7ab4baf4   916  cset x7, eq
0xffff7ab4baf8   920  ccmp x0, x6, #nZcv, ne
0xffff7ab4bafc   924  b.eq #+0x10 (addr 0xffff7ab4bb0c)
0xffff7ab4bb00   928  ldr x16, [x26, #40]
0xffff7ab4bb04   932  cmp x0, x16
0xffff7ab4bb08   936  b.ne #+0x148 (addr 0xffff7ab4bc50)
0xffff7ab4bb0c   940  b #-0x348 (addr 0xffff7ab4b7c4)
0xffff7ab4bb10   944  movz x9, #0x0
0xffff7ab4bb14   948  mov x16, lr
0xffff7ab4bb18   952  ldr x17, pc+240 (addr 0x0000ffff7ab4bc08)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab4bb1c   956  blr x17
0xffff7ab4bb20   960  lsl x0, x6, #32
0xffff7ab4bb24   964  movz x10, #0x0
0xffff7ab4bb28   968  sub csp, jssp, #0x10 (16)
0xffff7ab4bb2c   972  stp x10, x0, [jssp, #-16]!
0xffff7ab4bb30   976  ldur cp, [fp, #-40]
0xffff7ab4bb34   980  movz x0, #0x2
0xffff7ab4bb38   984  movz x1, #0x5b88
0xffff7ab4bb3c   988  movk x1, #0xe2, lsl #16
0xffff7ab4bb40   992  ldr x16, pc+208 (addr 0x0000ffff7ab4bc10)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab4bb44   996  blr x16
0xffff7ab4bb48  1000  str x0, [jssp, #72]
0xffff7ab4bb4c  1004  ldr x16, pc+204 (addr 0x0000ffff7ab4bc18)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab4bb50  1008  blr x16
0xffff7ab4bb54  1012  b #-0x250 (addr 0xffff7ab4b904)
0xffff7ab4bb58  1016  movz x8, #0x0
0xffff7ab4bb5c  1020  mov x16, lr
0xffff7ab4bb60  1024  ldr x17, pc+192 (addr 0x0000ffff7ab4bc20)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab4bb64  1028  blr x17
0xffff7ab4bb68  1032  movz x0, #0x3800000000
0xffff7ab4bb6c  1036  movz x10, #0x0
0xffff7ab4bb70  1040  sub csp, jssp, #0x10 (16)
0xffff7ab4bb74  1044  stp x10, x0, [jssp, #-16]!
0xffff7ab4bb78  1048  ldur cp, [fp, #-40]
0xffff7ab4bb7c  1052  movz x0, #0x2
0xffff7ab4bb80  1056  movz x1, #0x5b88
0xffff7ab4bb84  1060  movk x1, #0xe2, lsl #16
0xffff7ab4bb88  1064  ldr x16, pc+160 (addr 0x0000ffff7ab4bc28)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab4bb8c  1068  blr x16
0xffff7ab4bb90  1072  str x0, [jssp, #64]
0xffff7ab4bb94  1076  ldr x16, pc+156 (addr 0x0000ffff7ab4bc30)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab4bb98  1080  blr x16
0xffff7ab4bb9c  1084  b #-0x174 (addr 0xffff7ab4ba28)
0xffff7ab4bba0  1088  580004bf       constant pool begin (num_const = 37)    ;; constant pool
0xffff7ab4bba4  1092  d63f03e0       constant
0xffff7ab4bba8  1096  7a906010       constant
0xffff7ab4bbac  1100  0000ffff       constant
0xffff7ab4bbb0  1104  7ab06060       constant
0xffff7ab4bbb4  1108  0000ffff       constant
0xffff7ab4bbb8  1112  7ab06060       constant
0xffff7ab4bbbc  1116  0000ffff       constant
0xffff7ab4bbc0  1120  4ec04ba1       constant
0xffff7ab4bbc4  1124  00000000       constant
0xffff7ab4bbc8  1128  4ec04bf9       constant
0xffff7ab4bbcc  1132  00000000       constant
0xffff7ab4bbd0  1136  7ab06060       constant
0xffff7ab4bbd4  1140  0000ffff       constant
0xffff7ab4bbd8  1144  4ec05d81       constant
0xffff7ab4bbdc  1148  00000000       constant
0xffff7ab4bbe0  1152  4ec04ba1       constant
0xffff7ab4bbe4  1156  00000000       constant
0xffff7ab4bbe8  1160  4ec05d81       constant
0xffff7ab4bbec  1164  00000000       constant
0xffff7ab4bbf0  1168  4ec04c51       constant
0xffff7ab4bbf4  1172  00000000       constant
0xffff7ab4bbf8  1176  4ec04ca9       constant
0xffff7ab4bbfc  1180  00000000       constant
0xffff7ab4bc00  1184  7ab4b6c0       constant
0xffff7ab4bc04  1188  0000ffff       constant
0xffff7ab4bc08  1192  7ab06820       constant
0xffff7ab4bc0c  1196  0000ffff       constant
0xffff7ab4bc10  1200  7ab06260       constant
0xffff7ab4bc14  1204  0000ffff       constant
0xffff7ab4bc18  1208  7ab068e0       constant
0xffff7ab4bc1c  1212  0000ffff       constant
0xffff7ab4bc20  1216  7ab06820       constant
0xffff7ab4bc24  1220  0000ffff       constant
0xffff7ab4bc28  1224  7ab06260       constant
0xffff7ab4bc2c  1228  0000ffff       constant
0xffff7ab4bc30  1232  7ab068e0       constant
0xffff7ab4bc34  1236  0000ffff       constant
0xffff7ab4bc38  1240  movz x16, #0x0
0xffff7ab4bc3c  1244  bl #+0x1c (addr 0xffff7ab4bc58)
0xffff7ab4bc40  1248  movz x16, #0x8
0xffff7ab4bc44  1252  bl #+0x14 (addr 0xffff7ab4bc58)
0xffff7ab4bc48  1256  movz x16, #0x20
0xffff7ab4bc4c  1260  bl #+0xc (addr 0xffff7ab4bc58)
0xffff7ab4bc50  1264  movz x16, #0x38
0xffff7ab4bc54  1268  bl #+0x4 (addr 0xffff7ab4bc58)
0xffff7ab4bc58  1272  ldr x17, pc+24 (addr 0x0000ffff7ab4bc70)    ;; lazy deoptimization bailout 0
0xffff7ab4bc5c  1276  add x17, x17, x16
0xffff7ab4bc60  1280  br x17
0xffff7ab4bc64  1284  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab4bc68  1288  d63f03e0       constant
0xffff7ab4bc6c  1292  d503201f       constant
0xffff7ab4bc70  1296  7a906000       constant
0xffff7ab4bc74  1300  0000ffff       constant


Safepoints (size = 73)
0xffff7ab4b7fc   156  1111000 (sp -> fp)       3
0xffff7ab4b880   288  1111000 (sp -> fp)       5
0xffff7ab4b8d8   376  1111000 (sp -> fp)       6
0xffff7ab4bb48  1000  1011000 | x0 | x1 | x9 (sp -> fp)  <none> argc: 2
0xffff7ab4bb90  1072  1011000 | x0 | x5 | x6 | x8 (sp -> fp)  <none> argc: 2

RelocInfo (size = 45)
0xffff7ab4b7b4  runtime entry
0xffff7ab4b7f4  code target (STUB)  (0xffff7ab06060)
0xffff7ab4b878  code target (STUB)  (0xffff7ab06060)
0xffff7ab4b894  embedded object  (0x4ec04ba1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab4b8a0  embedded object  (0x4ec04bf9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab4b8d0  code target (STUB)  (0xffff7ab06060)
0xffff7ab4b908  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab4b93c  embedded object  (0x4ec04ba1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab4ba2c  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab4ba64  embedded object  (0x4ec04c51 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab4ba70  embedded object  (0x4ec04ca9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab4badc  code target (STUB)  (0xffff7ab4b6c0)
0xffff7ab4bb18  code target (STUB)  (0xffff7ab06820)
0xffff7ab4bb40  code target (STUB)  (0xffff7ab06260)
0xffff7ab4bb4c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab4bb60  code target (STUB)  (0xffff7ab06820)
0xffff7ab4bb88  code target (STUB)  (0xffff7ab06260)
0xffff7ab4bb94  code target (STUB)  (0xffff7ab068e0)
0xffff7ab4bba0  constant pool (size 152)
0xffff7ab4bc58  runtime entry
0xffff7ab4bc64  constant pool (size 20)


kind = BINARY_OP_IC
major_key = BinaryOpICWithAllocationSiteStub
ic_state = MONOMORPHIC
extra_ic_state = 2631
type = NORMAL
name = BinaryOpICWithAllocationSiteStub(ADD_CreateAllocationMementos:String*Smi->String)
compiler = unknown
Instructions (size = 40)
0xffff7ab4bd40     0  ldr x2, pc+24 (addr 0x0000ffff7ab4bd58)    ;; object: 0x20d04241 <undefined>
0xffff7ab4bd44     4  ldr x16, pc+28 (addr 0x0000ffff7ab4bd60)    ;; code: STUB, BinaryOpWithAllocationSiteStub, minor: 2631
0xffff7ab4bd48     8  br x16
0xffff7ab4bd4c    12  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab4bd50    16  d63f03e0       constant
0xffff7ab4bd54    20  d503201f       constant
0xffff7ab4bd58    24  20d04241       constant
0xffff7ab4bd5c    28  00000000       constant
0xffff7ab4bd60    32  7ab4b760       constant
0xffff7ab4bd64    36  0000ffff       constant


RelocInfo (size = 8)
0xffff7ab4bd40  embedded object  (0x20d04241 <undefined>)
0xffff7ab4bd44  code target (STUB)  (0xffff7ab4b760)
0xffff7ab4bd4c  constant pool (size 28)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 269)
0xffff7ab4be80     0  movz x2, #0xe2c0
0xffff7ab4be84     4  movk x2, #0x9ab, lsl #16
0xffff7ab4be88     8  ldp x3, x0, [x2]
0xffff7ab4be8c    12  adds x16, x3, #0x38 (56)
0xffff7ab4be90    16  ccmp x16, x0, #nzCv, lo
0xffff7ab4be94    20  b.hi #+0x44 (addr 0xffff7ab4bed8)
0xffff7ab4be98    24  str x16, [x2]
0xffff7ab4be9c    28  orr x3, x3, #0x1
0xffff7ab4bea0    32  ldr x0, pc+168 (addr 0x0000ffff7ab4bf48)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab4bea4    36  stur x0, [x3, #-1]
0xffff7ab4bea8    40  movz x0, #0x500000000
0xffff7ab4beac    44  stur x0, [x3, #7]
0xffff7ab4beb0    48  stur x1, [x3, #15]
0xffff7ab4beb4    52  stur cp, [x3, #23]
0xffff7ab4beb8    56  ldr x0, pc+152 (addr 0x0000ffff7ab4bf50)    ;; object: 0x20d04519 <the hole>
0xffff7ab4bebc    60  stur x0, [x3, #31]
0xffff7ab4bec0    64  ldur x0, [cp, #39]
0xffff7ab4bec4    68  stur x0, [x3, #39]
0xffff7ab4bec8    72  ldr x0, pc+144 (addr 0x0000ffff7ab4bf58)    ;; object: 0x20d04241 <undefined>
0xffff7ab4becc    76  stur x0, [x3, #47]
0xffff7ab4bed0    80  mov x0, x3
0xffff7ab4bed4    84  ret
0xffff7ab4bed8    88  sub csp, jssp, #0x10 (16)
0xffff7ab4bedc    92  stp fp, lr, [jssp, #-16]!
0xffff7ab4bee0    96  movz fp, #0xa00000000
0xffff7ab4bee4   100  sub csp, jssp, #0x8 (8)
0xffff7ab4bee8   104  str fp, [jssp, #-8]!
0xffff7ab4beec   108  add fp, jssp, #0x8 (8)
0xffff7ab4bef0   112  movz x3, #0x0
0xffff7ab4bef4   116  mov x16, lr
0xffff7ab4bef8   120  ldr x17, pc+104 (addr 0x0000ffff7ab4bf60)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab4befc   124  blr x17
0xffff7ab4bf00   128  movz x0, #0x3800000000
0xffff7ab4bf04   132  movz x10, #0x0
0xffff7ab4bf08   136  sub csp, jssp, #0x10 (16)
0xffff7ab4bf0c   140  stp x10, x0, [jssp, #-16]!
0xffff7ab4bf10   144  movz x0, #0x2
0xffff7ab4bf14   148  movz x1, #0x5b88
0xffff7ab4bf18   152  movk x1, #0xe2, lsl #16
0xffff7ab4bf1c   156  ldr x16, pc+76 (addr 0x0000ffff7ab4bf68)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab4bf20   160  blr x16
0xffff7ab4bf24   164  str x0, [jssp, #24]
0xffff7ab4bf28   168  ldr x16, pc+72 (addr 0x0000ffff7ab4bf70)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab4bf2c   172  blr x16
0xffff7ab4bf30   176  ldr lr, [jssp, #16]
0xffff7ab4bf34   180  ldp xzr, fp, [jssp], #24
0xffff7ab4bf38   184  b #-0x98 (addr 0xffff7ab4bea0)
0xffff7ab4bf3c   188  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7ab4bf40   192  d63f03e0       constant
0xffff7ab4bf44   196  d503201f       constant
0xffff7ab4bf48   200  4ec06149       constant
0xffff7ab4bf4c   204  00000000       constant
0xffff7ab4bf50   208  20d04519       constant
0xffff7ab4bf54   212  00000000       constant
0xffff7ab4bf58   216  20d04241       constant
0xffff7ab4bf5c   220  00000000       constant
0xffff7ab4bf60   224  7ab06820       constant
0xffff7ab4bf64   228  0000ffff       constant
0xffff7ab4bf68   232  7ab06260       constant
0xffff7ab4bf6c   236  0000ffff       constant
0xffff7ab4bf70   240  7ab068e0       constant
0xffff7ab4bf74   244  0000ffff       constant


Safepoints (size = 21)
0xffff7ab4bf24   164  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 12)
0xffff7ab4bea0  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab4beb8  embedded object  (0x20d04519 <the hole>)
0xffff7ab4bec8  embedded object  (0x20d04241 <undefined>)
0xffff7ab4bef8  code target (STUB)  (0xffff7ab06820)
0xffff7ab4bf1c  code target (STUB)  (0xffff7ab06260)
0xffff7ab4bf28  code target (STUB)  (0xffff7ab068e0)
0xffff7ab4bf3c  constant pool (size 60)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab4c160     0  ldur x0, [x1, #-1]
0xffff7ab4c164     4  ldur x0, [x0, #47]
0xffff7ab4c168     8  ldur x0, [x0, #239]
0xffff7ab4c16c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab52500     0  ldur x0, [x1, #-1]
0xffff7ab52504     4  ldur x0, [x0, #47]
0xffff7ab52508     8  movz x16, #0x7f7
0xffff7ab5250c    12  ldr x0, [x0, x16]
0xffff7ab52510    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 393220
name = CallICStub(args(4), ANY, 
compiler = unknown
Instructions (size = 488)
0xffff7ab52580     0  add x4, x2, x3, asr #29
0xffff7ab52584     4  ldur x4, [x4, #15]
0xffff7ab52588     8  ldur x5, [x4, #7]
0xffff7ab5258c    12  cmp x5, x1
0xffff7ab52590    16  b.ne #+0x2c (addr 0xffff7ab525bc)
0xffff7ab52594    20  tbz w1, #0, #+0x28 (addr 0xffff7ab525bc)
0xffff7ab52598    24  add x2, x2, x3, asr #29
0xffff7ab5259c    28  add x2, x2, #0x18 (24)
0xffff7ab525a0    32  ldur x3, [x2, #-1]
0xffff7ab525a4    36  movz x16, #0x200000000
0xffff7ab525a8    40  add x3, x3, x16
0xffff7ab525ac    44  stur x3, [x2, #-1]
0xffff7ab525b0    48  movz x0, #0x4
0xffff7ab525b4    52  ldr x16, pc+372 (addr 0x0000ffff7ab52728)    ;; code: BUILTIN
0xffff7ab525b8    56  br x16
0xffff7ab525bc    60  ldr x16, [x26, #2400]
0xffff7ab525c0    64  cmp x4, x16
0xffff7ab525c4    68  b.eq #+0x78 (addr 0xffff7ab5263c)
0xffff7ab525c8    72  ldur x5, [x4, #-1]
0xffff7ab525cc    76  ldr x16, [x26, #2736]
0xffff7ab525d0    80  cmp x5, x16
0xffff7ab525d4    84  b.ne #+0x40 (addr 0xffff7ab52614)
0xffff7ab525d8    88  ldur x5, [cp, #39]
0xffff7ab525dc    92  ldur x5, [x5, #95]
0xffff7ab525e0    96  cmp x1, x5
0xffff7ab525e4   100  b.ne #+0xec (addr 0xffff7ab526d0)
0xffff7ab525e8   104  movz x0, #0x4
0xffff7ab525ec   108  add x2, x2, x3, asr #29
0xffff7ab525f0   112  add x2, x2, #0x18 (24)
0xffff7ab525f4   116  ldur x3, [x2, #-1]
0xffff7ab525f8   120  movz x16, #0x200000000
0xffff7ab525fc   124  add x3, x3, x16
0xffff7ab52600   128  stur x3, [x2, #-1]
0xffff7ab52604   132  mov x2, x4
0xffff7ab52608   136  mov x3, x1
0xffff7ab5260c   140  ldr x16, pc+292 (addr 0x0000ffff7ab52730)    ;; code: STUB, ArrayConstructorStub, minor: 3
0xffff7ab52610   144  br x16
0xffff7ab52614   148  ldr x16, [x26, #2568]
0xffff7ab52618   152  cmp x4, x16
0xffff7ab5261c   156  b.eq #+0xb4 (addr 0xffff7ab526d0)
0xffff7ab52620   160  ldur x5, [x4, #-1]
0xffff7ab52624   164  ldrb w5, [x5, #11]
0xffff7ab52628   168  cmp x5, #0xc9 (201)
0xffff7ab5262c   172  b.ne #+0xa4 (addr 0xffff7ab526d0)
0xffff7ab52630   176  add x4, x2, x3, asr #29
0xffff7ab52634   180  ldr x5, [x26, #2400]
0xffff7ab52638   184  stur x5, [x4, #15]
0xffff7ab5263c   188  movz x0, #0x4
0xffff7ab52640   192  ldr x16, pc+248 (addr 0x0000ffff7ab52738)    ;; code: BUILTIN
0xffff7ab52644   196  br x16
0xffff7ab52648   200  tbz w1, #0, #+0x88 (addr 0xffff7ab526d0)
0xffff7ab5264c   204  ldur x5, [x1, #-1]
0xffff7ab52650   208  ldrb w5, [x5, #11]
0xffff7ab52654   212  cmp x5, #0xc9 (201)
0xffff7ab52658   216  b.ne #+0x78 (addr 0xffff7ab526d0)
0xffff7ab5265c   220  ldur x5, [cp, #39]
0xffff7ab52660   224  ldur x5, [x5, #95]
0xffff7ab52664   228  cmp x1, x5
0xffff7ab52668   232  b.eq #+0x68 (addr 0xffff7ab526d0)
0xffff7ab5266c   236  ldur x4, [x1, #39]
0xffff7ab52670   240  ldur x4, [x4, #39]
0xffff7ab52674   244  ldur x5, [cp, #39]
0xffff7ab52678   248  cmp x4, x5
0xffff7ab5267c   252  b.ne #+0x54 (addr 0xffff7ab526d0)
0xffff7ab52680   256  movz x5, #0x200000000
0xffff7ab52684   260  adds x4, x2, x3, asr #29
0xffff7ab52688   264  stur x5, [x4, #23]
0xffff7ab5268c   268  movz x16, #0xc00000000
0xffff7ab52690   272  sub csp, jssp, #0x10 (16)
0xffff7ab52694   276  stp fp, lr, [jssp, #-16]!
0xffff7ab52698   280  sub csp, jssp, #0x10 (16)
0xffff7ab5269c   284  str x16, [jssp, #-8]!
0xffff7ab526a0   288  ldr x17, pc+160 (addr 0x0000ffff7ab52740)    ;; object: 0xffff7ab52521 <Code: CALL_IC>
0xffff7ab526a4   292  sub csp, jssp, #0x10 (16)
0xffff7ab526a8   296  str x17, [jssp, #-8]!
0xffff7ab526ac   300  add fp, jssp, #0x10 (16)
0xffff7ab526b0   304  sub csp, jssp, #0x8 (8)
0xffff7ab526b4   308  str x1, [jssp, #-8]!
0xffff7ab526b8   312  ldr x16, pc+144 (addr 0x0000ffff7ab52748)    ;; code: STUB, CreateWeakCellStub, minor: 0
0xffff7ab526bc   316  blr x16
0xffff7ab526c0   320  ldr x1, [jssp], #8
0xffff7ab526c4   324  mov jssp, fp
0xffff7ab526c8   328  ldp fp, lr, [jssp], #16
0xffff7ab526cc   332  b #-0x11c (addr 0xffff7ab525b0)
0xffff7ab526d0   336  movz x16, #0xc00000000
0xffff7ab526d4   340  sub csp, jssp, #0x10 (16)
0xffff7ab526d8   344  stp fp, lr, [jssp, #-16]!
0xffff7ab526dc   348  sub csp, jssp, #0x10 (16)
0xffff7ab526e0   352  str x16, [jssp, #-8]!
0xffff7ab526e4   356  ldr x17, pc+108 (addr 0x0000ffff7ab52750)    ;; object: 0xffff7ab52521 <Code: CALL_IC>
0xffff7ab526e8   360  sub csp, jssp, #0x10 (16)
0xffff7ab526ec   364  str x17, [jssp, #-8]!
0xffff7ab526f0   368  add fp, jssp, #0x10 (16)
0xffff7ab526f4   372  sub csp, jssp, #0x18 (24)
0xffff7ab526f8   376  stp x3, x2, [jssp, #-24]!
0xffff7ab526fc   380  str x1, [jssp, #16]
0xffff7ab52700   384  movz x0, #0x3
0xffff7ab52704   388  ldr x1, pc+84 (addr 0x0000ffff7ab52758)    ;; external reference (Runtime::CallIC_Miss)
0xffff7ab52708   392  ldr x16, pc+88 (addr 0x0000ffff7ab52760)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab5270c   396  blr x16
0xffff7ab52710   400  mov x1, x0
0xffff7ab52714   404  mov jssp, fp
0xffff7ab52718   408  ldp fp, lr, [jssp], #16
0xffff7ab5271c   412  b #-0xe0 (addr 0xffff7ab5263c)
0xffff7ab52720   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7ab52724   420  d63f03e0       constant
0xffff7ab52728   424  7ab1e820       constant
0xffff7ab5272c   428  0000ffff       constant
0xffff7ab52730   432  7ab33b00       constant
0xffff7ab52734   436  0000ffff       constant
0xffff7ab52738   440  7ab1f820       constant
0xffff7ab5273c   444  0000ffff       constant
0xffff7ab52740   448  7ab52521       constant
0xffff7ab52744   452  0000ffff       constant
0xffff7ab52748   456  7ab0ddc0       constant
0xffff7ab5274c   460  0000ffff       constant
0xffff7ab52750   464  7ab52521       constant
0xffff7ab52754   468  0000ffff       constant
0xffff7ab52758   472  00c86928       constant
0xffff7ab5275c   476  00000000       constant
0xffff7ab52760   480  7ab06060       constant
0xffff7ab52764   484  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab525b4  code target (BUILTIN)  (0xffff7ab1e820)
0xffff7ab5260c  code target (STUB)  (0xffff7ab33b00)
0xffff7ab52640  code target (BUILTIN)  (0xffff7ab1f820)
0xffff7ab526a0  embedded object  (0xffff7ab52521 <Code: CALL_IC>)
0xffff7ab526b8  code target (STUB)  (0xffff7ab0ddc0)
0xffff7ab526e4  embedded object  (0xffff7ab52521 <Code: CALL_IC>)
0xffff7ab52704  external reference (Runtime::CallIC_Miss)  (0xc86928)
0xffff7ab52708  code target (STUB)  (0xffff7ab06060)
0xffff7ab52720  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 393220
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0xffff7ab527e0     0  ldur x2, [fp, #-16]
0xffff7ab527e4     4  ldur x2, [x2, #31]
0xffff7ab527e8     8  ldur x2, [x2, #87]
0xffff7ab527ec    12  ldr x16, pc+20 (addr 0x0000ffff7ab52800)    ;; code: CALL_IC, GENERIC
0xffff7ab527f0    16  br x16
0xffff7ab527f4    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab527f8    24  d63f03e0       constant
0xffff7ab527fc    28  d503201f       constant
0xffff7ab52800    32  7ab52580       constant
0xffff7ab52804    36  0000ffff       constant


RelocInfo (size = 7)
0xffff7ab527ec  code target (CALL_IC)  (0xffff7ab52580)
0xffff7ab527f4  constant pool (size 20)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab569e0     0  ldur x0, [x1, #7]
0xffff7ab569e4     4  movz x16, #0x1d7
0xffff7ab569e8     8  ldr x0, [x0, x16]
0xffff7ab569ec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab57320     0  ldur x0, [x1, #7]
0xffff7ab57324     4  movz x16, #0x1df
0xffff7ab57328     8  ldr x0, [x0, x16]
0xffff7ab5732c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab573a0     0  ldur x0, [x1, #-1]
0xffff7ab573a4     4  ldur x0, [x0, #47]
0xffff7ab573a8     8  movz x16, #0x5cf
0xffff7ab573ac    12  ldr x0, [x0, x16]
0xffff7ab573b0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 1165)
0xffff7ab57420     0  movz x2, #0xe2c0
0xffff7ab57424     4  movk x2, #0x9ab, lsl #16
0xffff7ab57428     8  ldp x3, x0, [x2]
0xffff7ab5742c    12  adds x16, x3, #0x1c8 (456)
0xffff7ab57430    16  ccmp x16, x0, #nzCv, lo
0xffff7ab57434    20  b.hi #+0x234 (addr 0xffff7ab57668)
0xffff7ab57438    24  str x16, [x2]
0xffff7ab5743c    28  orr x3, x3, #0x1
0xffff7ab57440    32  ldr x0, pc+664 (addr 0x0000ffff7ab576d8)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab57444    36  stur x0, [x3, #-1]
0xffff7ab57448    40  movz x0, #0x3700000000
0xffff7ab5744c    44  stur x0, [x3, #7]
0xffff7ab57450    48  stur x1, [x3, #15]
0xffff7ab57454    52  stur cp, [x3, #23]
0xffff7ab57458    56  ldr x0, pc+648 (addr 0x0000ffff7ab576e0)    ;; object: 0x20d04519 <the hole>
0xffff7ab5745c    60  stur x0, [x3, #31]
0xffff7ab57460    64  ldur x0, [cp, #39]
0xffff7ab57464    68  stur x0, [x3, #39]
0xffff7ab57468    72  ldr x0, pc+640 (addr 0x0000ffff7ab576e8)    ;; object: 0x20d04241 <undefined>
0xffff7ab5746c    76  stur x0, [x3, #47]
0xffff7ab57470    80  ldr x0, pc+640 (addr 0x0000ffff7ab576f0)    ;; object: 0x20d04241 <undefined>
0xffff7ab57474    84  stur x0, [x3, #55]
0xffff7ab57478    88  ldr x0, pc+640 (addr 0x0000ffff7ab576f8)    ;; object: 0x20d04241 <undefined>
0xffff7ab5747c    92  stur x0, [x3, #63]
0xffff7ab57480    96  ldr x0, pc+640 (addr 0x0000ffff7ab57700)    ;; object: 0x20d04241 <undefined>
0xffff7ab57484   100  stur x0, [x3, #71]
0xffff7ab57488   104  ldr x0, pc+640 (addr 0x0000ffff7ab57708)    ;; object: 0x20d04241 <undefined>
0xffff7ab5748c   108  stur x0, [x3, #79]
0xffff7ab57490   112  ldr x0, pc+640 (addr 0x0000ffff7ab57710)    ;; object: 0x20d04241 <undefined>
0xffff7ab57494   116  stur x0, [x3, #87]
0xffff7ab57498   120  ldr x0, pc+640 (addr 0x0000ffff7ab57718)    ;; object: 0x20d04241 <undefined>
0xffff7ab5749c   124  stur x0, [x3, #95]
0xffff7ab574a0   128  ldr x0, pc+640 (addr 0x0000ffff7ab57720)    ;; object: 0x20d04241 <undefined>
0xffff7ab574a4   132  stur x0, [x3, #103]
0xffff7ab574a8   136  ldr x0, pc+640 (addr 0x0000ffff7ab57728)    ;; object: 0x20d04241 <undefined>
0xffff7ab574ac   140  stur x0, [x3, #111]
0xffff7ab574b0   144  ldr x0, pc+640 (addr 0x0000ffff7ab57730)    ;; object: 0x20d04241 <undefined>
0xffff7ab574b4   148  stur x0, [x3, #119]
0xffff7ab574b8   152  ldr x0, pc+640 (addr 0x0000ffff7ab57738)    ;; object: 0x20d04241 <undefined>
0xffff7ab574bc   156  stur x0, [x3, #127]
0xffff7ab574c0   160  ldr x0, pc+640 (addr 0x0000ffff7ab57740)    ;; object: 0x20d04241 <undefined>
0xffff7ab574c4   164  stur x0, [x3, #135]
0xffff7ab574c8   168  ldr x0, pc+640 (addr 0x0000ffff7ab57748)    ;; object: 0x20d04241 <undefined>
0xffff7ab574cc   172  stur x0, [x3, #143]
0xffff7ab574d0   176  ldr x0, pc+640 (addr 0x0000ffff7ab57750)    ;; object: 0x20d04241 <undefined>
0xffff7ab574d4   180  stur x0, [x3, #151]
0xffff7ab574d8   184  ldr x0, pc+640 (addr 0x0000ffff7ab57758)    ;; object: 0x20d04241 <undefined>
0xffff7ab574dc   188  stur x0, [x3, #159]
0xffff7ab574e0   192  ldr x0, pc+640 (addr 0x0000ffff7ab57760)    ;; object: 0x20d04241 <undefined>
0xffff7ab574e4   196  stur x0, [x3, #167]
0xffff7ab574e8   200  ldr x0, pc+640 (addr 0x0000ffff7ab57768)    ;; object: 0x20d04241 <undefined>
0xffff7ab574ec   204  stur x0, [x3, #175]
0xffff7ab574f0   208  ldr x0, pc+640 (addr 0x0000ffff7ab57770)    ;; object: 0x20d04241 <undefined>
0xffff7ab574f4   212  stur x0, [x3, #183]
0xffff7ab574f8   216  ldr x0, pc+640 (addr 0x0000ffff7ab57778)    ;; object: 0x20d04241 <undefined>
0xffff7ab574fc   220  stur x0, [x3, #191]
0xffff7ab57500   224  ldr x0, pc+640 (addr 0x0000ffff7ab57780)    ;; object: 0x20d04241 <undefined>
0xffff7ab57504   228  stur x0, [x3, #199]
0xffff7ab57508   232  ldr x0, pc+640 (addr 0x0000ffff7ab57788)    ;; object: 0x20d04241 <undefined>
0xffff7ab5750c   236  stur x0, [x3, #207]
0xffff7ab57510   240  ldr x0, pc+640 (addr 0x0000ffff7ab57790)    ;; object: 0x20d04241 <undefined>
0xffff7ab57514   244  stur x0, [x3, #215]
0xffff7ab57518   248  ldr x0, pc+640 (addr 0x0000ffff7ab57798)    ;; object: 0x20d04241 <undefined>
0xffff7ab5751c   252  stur x0, [x3, #223]
0xffff7ab57520   256  ldr x0, pc+640 (addr 0x0000ffff7ab577a0)    ;; object: 0x20d04241 <undefined>
0xffff7ab57524   260  stur x0, [x3, #231]
0xffff7ab57528   264  ldr x0, pc+640 (addr 0x0000ffff7ab577a8)    ;; object: 0x20d04241 <undefined>
0xffff7ab5752c   268  stur x0, [x3, #239]
0xffff7ab57530   272  ldr x0, pc+640 (addr 0x0000ffff7ab577b0)    ;; object: 0x20d04241 <undefined>
0xffff7ab57534   276  stur x0, [x3, #247]
0xffff7ab57538   280  ldr x0, pc+640 (addr 0x0000ffff7ab577b8)    ;; object: 0x20d04241 <undefined>
0xffff7ab5753c   284  stur x0, [x3, #255]
0xffff7ab57540   288  ldr x0, pc+640 (addr 0x0000ffff7ab577c0)    ;; object: 0x20d04241 <undefined>
0xffff7ab57544   292  movz x16, #0x107
0xffff7ab57548   296  str x0, [x3, x16]
0xffff7ab5754c   300  ldr x0, pc+636 (addr 0x0000ffff7ab577c8)    ;; object: 0x20d04241 <undefined>
0xffff7ab57550   304  movz x16, #0x10f
0xffff7ab57554   308  str x0, [x3, x16]
0xffff7ab57558   312  ldr x0, pc+632 (addr 0x0000ffff7ab577d0)    ;; object: 0x20d04241 <undefined>
0xffff7ab5755c   316  movz x16, #0x117
0xffff7ab57560   320  str x0, [x3, x16]
0xffff7ab57564   324  ldr x0, pc+628 (addr 0x0000ffff7ab577d8)    ;; object: 0x20d04241 <undefined>
0xffff7ab57568   328  movz x16, #0x11f
0xffff7ab5756c   332  str x0, [x3, x16]
0xffff7ab57570   336  ldr x0, pc+624 (addr 0x0000ffff7ab577e0)    ;; object: 0x20d04241 <undefined>
0xffff7ab57574   340  movz x16, #0x127
0xffff7ab57578   344  str x0, [x3, x16]
0xffff7ab5757c   348  ldr x0, pc+620 (addr 0x0000ffff7ab577e8)    ;; object: 0x20d04241 <undefined>
0xffff7ab57580   352  movz x16, #0x12f
0xffff7ab57584   356  str x0, [x3, x16]
0xffff7ab57588   360  ldr x0, pc+616 (addr 0x0000ffff7ab577f0)    ;; object: 0x20d04241 <undefined>
0xffff7ab5758c   364  movz x16, #0x137
0xffff7ab57590   368  str x0, [x3, x16]
0xffff7ab57594   372  ldr x0, pc+612 (addr 0x0000ffff7ab577f8)    ;; object: 0x20d04241 <undefined>
0xffff7ab57598   376  movz x16, #0x13f
0xffff7ab5759c   380  str x0, [x3, x16]
0xffff7ab575a0   384  ldr x0, pc+608 (addr 0x0000ffff7ab57800)    ;; object: 0x20d04241 <undefined>
0xffff7ab575a4   388  movz x16, #0x147
0xffff7ab575a8   392  str x0, [x3, x16]
0xffff7ab575ac   396  ldr x0, pc+604 (addr 0x0000ffff7ab57808)    ;; object: 0x20d04241 <undefined>
0xffff7ab575b0   400  movz x16, #0x14f
0xffff7ab575b4   404  str x0, [x3, x16]
0xffff7ab575b8   408  ldr x0, pc+600 (addr 0x0000ffff7ab57810)    ;; object: 0x20d04241 <undefined>
0xffff7ab575bc   412  movz x16, #0x157
0xffff7ab575c0   416  str x0, [x3, x16]
0xffff7ab575c4   420  ldr x0, pc+596 (addr 0x0000ffff7ab57818)    ;; object: 0x20d04241 <undefined>
0xffff7ab575c8   424  movz x16, #0x15f
0xffff7ab575cc   428  str x0, [x3, x16]
0xffff7ab575d0   432  ldr x0, pc+592 (addr 0x0000ffff7ab57820)    ;; object: 0x20d04241 <undefined>
0xffff7ab575d4   436  movz x16, #0x167
0xffff7ab575d8   440  str x0, [x3, x16]
0xffff7ab575dc   444  ldr x0, pc+588 (addr 0x0000ffff7ab57828)    ;; object: 0x20d04241 <undefined>
0xffff7ab575e0   448  movz x16, #0x16f
0xffff7ab575e4   452  str x0, [x3, x16]
0xffff7ab575e8   456  ldr x0, pc+584 (addr 0x0000ffff7ab57830)    ;; object: 0x20d04241 <undefined>
0xffff7ab575ec   460  movz x16, #0x177
0xffff7ab575f0   464  str x0, [x3, x16]
0xffff7ab575f4   468  ldr x0, pc+580 (addr 0x0000ffff7ab57838)    ;; object: 0x20d04241 <undefined>
0xffff7ab575f8   472  movz x16, #0x17f
0xffff7ab575fc   476  str x0, [x3, x16]
0xffff7ab57600   480  ldr x0, pc+576 (addr 0x0000ffff7ab57840)    ;; object: 0x20d04241 <undefined>
0xffff7ab57604   484  movz x16, #0x187
0xffff7ab57608   488  str x0, [x3, x16]
0xffff7ab5760c   492  ldr x0, pc+572 (addr 0x0000ffff7ab57848)    ;; object: 0x20d04241 <undefined>
0xffff7ab57610   496  movz x16, #0x18f
0xffff7ab57614   500  str x0, [x3, x16]
0xffff7ab57618   504  ldr x0, pc+568 (addr 0x0000ffff7ab57850)    ;; object: 0x20d04241 <undefined>
0xffff7ab5761c   508  movz x16, #0x197
0xffff7ab57620   512  str x0, [x3, x16]
0xffff7ab57624   516  ldr x0, pc+564 (addr 0x0000ffff7ab57858)    ;; object: 0x20d04241 <undefined>
0xffff7ab57628   520  movz x16, #0x19f
0xffff7ab5762c   524  str x0, [x3, x16]
0xffff7ab57630   528  ldr x0, pc+560 (addr 0x0000ffff7ab57860)    ;; object: 0x20d04241 <undefined>
0xffff7ab57634   532  movz x16, #0x1a7
0xffff7ab57638   536  str x0, [x3, x16]
0xffff7ab5763c   540  ldr x0, pc+556 (addr 0x0000ffff7ab57868)    ;; object: 0x20d04241 <undefined>
0xffff7ab57640   544  movz x16, #0x1af
0xffff7ab57644   548  str x0, [x3, x16]
0xffff7ab57648   552  ldr x0, pc+552 (addr 0x0000ffff7ab57870)    ;; object: 0x20d04241 <undefined>
0xffff7ab5764c   556  movz x16, #0x1b7
0xffff7ab57650   560  str x0, [x3, x16]
0xffff7ab57654   564  ldr x0, pc+548 (addr 0x0000ffff7ab57878)    ;; object: 0x20d04241 <undefined>
0xffff7ab57658   568  movz x16, #0x1bf
0xffff7ab5765c   572  str x0, [x3, x16]
0xffff7ab57660   576  mov x0, x3
0xffff7ab57664   580  ret
0xffff7ab57668   584  sub csp, jssp, #0x10 (16)
0xffff7ab5766c   588  stp fp, lr, [jssp, #-16]!
0xffff7ab57670   592  movz fp, #0xa00000000
0xffff7ab57674   596  sub csp, jssp, #0x8 (8)
0xffff7ab57678   600  str fp, [jssp, #-8]!
0xffff7ab5767c   604  add fp, jssp, #0x8 (8)
0xffff7ab57680   608  movz x3, #0x0
0xffff7ab57684   612  mov x16, lr
0xffff7ab57688   616  ldr x17, pc+504 (addr 0x0000ffff7ab57880)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab5768c   620  blr x17
0xffff7ab57690   624  movz x0, #0x1c800000000
0xffff7ab57694   628  movz x10, #0x0
0xffff7ab57698   632  sub csp, jssp, #0x10 (16)
0xffff7ab5769c   636  stp x10, x0, [jssp, #-16]!
0xffff7ab576a0   640  movz x0, #0x2
0xffff7ab576a4   644  movz x1, #0x5b88
0xffff7ab576a8   648  movk x1, #0xe2, lsl #16
0xffff7ab576ac   652  ldr x16, pc+476 (addr 0x0000ffff7ab57888)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab576b0   656  blr x16
0xffff7ab576b4   660  str x0, [jssp, #24]
0xffff7ab576b8   664  ldr x16, pc+472 (addr 0x0000ffff7ab57890)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab576bc   668  blr x16
0xffff7ab576c0   672  ldr lr, [jssp, #16]
0xffff7ab576c4   676  ldp xzr, fp, [jssp], #24
0xffff7ab576c8   680  b #-0x288 (addr 0xffff7ab57440)
0xffff7ab576cc   684  58000e5f       constant pool begin (num_const = 114)    ;; constant pool
0xffff7ab576d0   688  d63f03e0       constant
0xffff7ab576d4   692  d503201f       constant
0xffff7ab576d8   696  4ec06149       constant
0xffff7ab576dc   700  00000000       constant
0xffff7ab576e0   704  20d04519       constant
0xffff7ab576e4   708  00000000       constant
0xffff7ab576e8   712  20d04241       constant
0xffff7ab576ec   716  00000000       constant
0xffff7ab576f0   720  20d04241       constant
0xffff7ab576f4   724  00000000       constant
0xffff7ab576f8   728  20d04241       constant
0xffff7ab576fc   732  00000000       constant
0xffff7ab57700   736  20d04241       constant
0xffff7ab57704   740  00000000       constant
0xffff7ab57708   744  20d04241       constant
0xffff7ab5770c   748  00000000       constant
0xffff7ab57710   752  20d04241       constant
0xffff7ab57714   756  00000000       constant
0xffff7ab57718   760  20d04241       constant
0xffff7ab5771c   764  00000000       constant
0xffff7ab57720   768  20d04241       constant
0xffff7ab57724   772  00000000       constant
0xffff7ab57728   776  20d04241       constant
0xffff7ab5772c   780  00000000       constant
0xffff7ab57730   784  20d04241       constant
0xffff7ab57734   788  00000000       constant
0xffff7ab57738   792  20d04241       constant
0xffff7ab5773c   796  00000000       constant
0xffff7ab57740   800  20d04241       constant
0xffff7ab57744   804  00000000       constant
0xffff7ab57748   808  20d04241       constant
0xffff7ab5774c   812  00000000       constant
0xffff7ab57750   816  20d04241       constant
0xffff7ab57754   820  00000000       constant
0xffff7ab57758   824  20d04241       constant
0xffff7ab5775c   828  00000000       constant
0xffff7ab57760   832  20d04241       constant
0xffff7ab57764   836  00000000       constant
0xffff7ab57768   840  20d04241       constant
0xffff7ab5776c   844  00000000       constant
0xffff7ab57770   848  20d04241       constant
0xffff7ab57774   852  00000000       constant
0xffff7ab57778   856  20d04241       constant
0xffff7ab5777c   860  00000000       constant
0xffff7ab57780   864  20d04241       constant
0xffff7ab57784   868  00000000       constant
0xffff7ab57788   872  20d04241       constant
0xffff7ab5778c   876  00000000       constant
0xffff7ab57790   880  20d04241       constant
0xffff7ab57794   884  00000000       constant
0xffff7ab57798   888  20d04241       constant
0xffff7ab5779c   892  00000000       constant
0xffff7ab577a0   896  20d04241       constant
0xffff7ab577a4   900  00000000       constant
0xffff7ab577a8   904  20d04241       constant
0xffff7ab577ac   908  00000000       constant
0xffff7ab577b0   912  20d04241       constant
0xffff7ab577b4   916  00000000       constant
0xffff7ab577b8   920  20d04241       constant
0xffff7ab577bc   924  00000000       constant
0xffff7ab577c0   928  20d04241       constant
0xffff7ab577c4   932  00000000       constant
0xffff7ab577c8   936  20d04241       constant
0xffff7ab577cc   940  00000000       constant
0xffff7ab577d0   944  20d04241       constant
0xffff7ab577d4   948  00000000       constant
0xffff7ab577d8   952  20d04241       constant
0xffff7ab577dc   956  00000000       constant
0xffff7ab577e0   960  20d04241       constant
0xffff7ab577e4   964  00000000       constant
0xffff7ab577e8   968  20d04241       constant
0xffff7ab577ec   972  00000000       constant
0xffff7ab577f0   976  20d04241       constant
0xffff7ab577f4   980  00000000       constant
0xffff7ab577f8   984  20d04241       constant
0xffff7ab577fc   988  00000000       constant
0xffff7ab57800   992  20d04241       constant
0xffff7ab57804   996  00000000       constant
0xffff7ab57808  1000  20d04241       constant
0xffff7ab5780c  1004  00000000       constant
0xffff7ab57810  1008  20d04241       constant
0xffff7ab57814  1012  00000000       constant
0xffff7ab57818  1016  20d04241       constant
0xffff7ab5781c  1020  00000000       constant
0xffff7ab57820  1024  20d04241       constant
0xffff7ab57824  1028  00000000       constant
0xffff7ab57828  1032  20d04241       constant
0xffff7ab5782c  1036  00000000       constant
0xffff7ab57830  1040  20d04241       constant
0xffff7ab57834  1044  00000000       constant
0xffff7ab57838  1048  20d04241       constant
0xffff7ab5783c  1052  00000000       constant
0xffff7ab57840  1056  20d04241       constant
0xffff7ab57844  1060  00000000       constant
0xffff7ab57848  1064  20d04241       constant
0xffff7ab5784c  1068  00000000       constant
0xffff7ab57850  1072  20d04241       constant
0xffff7ab57854  1076  00000000       constant
0xffff7ab57858  1080  20d04241       constant
0xffff7ab5785c  1084  00000000       constant
0xffff7ab57860  1088  20d04241       constant
0xffff7ab57864  1092  00000000       constant
0xffff7ab57868  1096  20d04241       constant
0xffff7ab5786c  1100  00000000       constant
0xffff7ab57870  1104  20d04241       constant
0xffff7ab57874  1108  00000000       constant
0xffff7ab57878  1112  20d04241       constant
0xffff7ab5787c  1116  00000000       constant
0xffff7ab57880  1120  7ab06820       constant
0xffff7ab57884  1124  0000ffff       constant
0xffff7ab57888  1128  7ab06260       constant
0xffff7ab5788c  1132  0000ffff       constant
0xffff7ab57890  1136  7ab068e0       constant
0xffff7ab57894  1140  0000ffff       constant


Safepoints (size = 21)
0xffff7ab576b4   660  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 62)
0xffff7ab57440  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab57458  embedded object  (0x20d04519 <the hole>)
0xffff7ab57468  embedded object  (0x20d04241 <undefined>)
0xffff7ab57470  embedded object  (0x20d04241 <undefined>)
0xffff7ab57478  embedded object  (0x20d04241 <undefined>)
0xffff7ab57480  embedded object  (0x20d04241 <undefined>)
0xffff7ab57488  embedded object  (0x20d04241 <undefined>)
0xffff7ab57490  embedded object  (0x20d04241 <undefined>)
0xffff7ab57498  embedded object  (0x20d04241 <undefined>)
0xffff7ab574a0  embedded object  (0x20d04241 <undefined>)
0xffff7ab574a8  embedded object  (0x20d04241 <undefined>)
0xffff7ab574b0  embedded object  (0x20d04241 <undefined>)
0xffff7ab574b8  embedded object  (0x20d04241 <undefined>)
0xffff7ab574c0  embedded object  (0x20d04241 <undefined>)
0xffff7ab574c8  embedded object  (0x20d04241 <undefined>)
0xffff7ab574d0  embedded object  (0x20d04241 <undefined>)
0xffff7ab574d8  embedded object  (0x20d04241 <undefined>)
0xffff7ab574e0  embedded object  (0x20d04241 <undefined>)
0xffff7ab574e8  embedded object  (0x20d04241 <undefined>)
0xffff7ab574f0  embedded object  (0x20d04241 <undefined>)
0xffff7ab574f8  embedded object  (0x20d04241 <undefined>)
0xffff7ab57500  embedded object  (0x20d04241 <undefined>)
0xffff7ab57508  embedded object  (0x20d04241 <undefined>)
0xffff7ab57510  embedded object  (0x20d04241 <undefined>)
0xffff7ab57518  embedded object  (0x20d04241 <undefined>)
0xffff7ab57520  embedded object  (0x20d04241 <undefined>)
0xffff7ab57528  embedded object  (0x20d04241 <undefined>)
0xffff7ab57530  embedded object  (0x20d04241 <undefined>)
0xffff7ab57538  embedded object  (0x20d04241 <undefined>)
0xffff7ab57540  embedded object  (0x20d04241 <undefined>)
0xffff7ab5754c  embedded object  (0x20d04241 <undefined>)
0xffff7ab57558  embedded object  (0x20d04241 <undefined>)
0xffff7ab57564  embedded object  (0x20d04241 <undefined>)
0xffff7ab57570  embedded object  (0x20d04241 <undefined>)
0xffff7ab5757c  embedded object  (0x20d04241 <undefined>)
0xffff7ab57588  embedded object  (0x20d04241 <undefined>)
0xffff7ab57594  embedded object  (0x20d04241 <undefined>)
0xffff7ab575a0  embedded object  (0x20d04241 <undefined>)
0xffff7ab575ac  embedded object  (0x20d04241 <undefined>)
0xffff7ab575b8  embedded object  (0x20d04241 <undefined>)
0xffff7ab575c4  embedded object  (0x20d04241 <undefined>)
0xffff7ab575d0  embedded object  (0x20d04241 <undefined>)
0xffff7ab575dc  embedded object  (0x20d04241 <undefined>)
0xffff7ab575e8  embedded object  (0x20d04241 <undefined>)
0xffff7ab575f4  embedded object  (0x20d04241 <undefined>)
0xffff7ab57600  embedded object  (0x20d04241 <undefined>)
0xffff7ab5760c  embedded object  (0x20d04241 <undefined>)
0xffff7ab57618  embedded object  (0x20d04241 <undefined>)
0xffff7ab57624  embedded object  (0x20d04241 <undefined>)
0xffff7ab57630  embedded object  (0x20d04241 <undefined>)
0xffff7ab5763c  embedded object  (0x20d04241 <undefined>)
0xffff7ab57648  embedded object  (0x20d04241 <undefined>)
0xffff7ab57654  embedded object  (0x20d04241 <undefined>)
0xffff7ab57688  code target (STUB)  (0xffff7ab06820)
0xffff7ab576ac  code target (STUB)  (0xffff7ab06260)
0xffff7ab576b8  code target (STUB)  (0xffff7ab068e0)
0xffff7ab576cc  constant pool (size 460)


kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 168)
0xffff7ab59c60     0  mov x6, x0
0xffff7ab59c64     4  tbnz w6, #0, #+0x5c (addr 0xffff7ab59cc0)
0xffff7ab59c68     8  ldur x3, [x1, #7]
0xffff7ab59c6c    12  stur x6, [x3, #23]
0xffff7ab59c70    16  stur x5, [x1, #-1]
0xffff7ab59c74    20  tbz w5, #0, #+0x34 (addr 0xffff7ab59ca8)
0xffff7ab59c78    24  sub x2, x1, #0x1 (1)
0xffff7ab59c7c    28  and x5, x5, #0xfffffffffff00000
0xffff7ab59c80    32  ldr x5, [x5, #8]
0xffff7ab59c84    36  tbz w5, #1, #+0x24 (addr 0xffff7ab59ca8)
0xffff7ab59c88    40  and x5, x1, #0xfffffffffff00000
0xffff7ab59c8c    44  ldr x5, [x5, #8]
0xffff7ab59c90    48  tbz w5, #2, #+0x18 (addr 0xffff7ab59ca8)
0xffff7ab59c94    52  sub csp, jssp, #0x8 (8)
0xffff7ab59c98    56  str lr, [jssp, #-8]!
0xffff7ab59c9c    60  ldr x16, pc+28 (addr 0x0000ffff7ab59cb8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab59ca0    64  blr x16
0xffff7ab59ca4    68  ldr lr, [jssp], #8
0xffff7ab59ca8    72  ret
0xffff7ab59cac    76  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab59cb0    80  d63f03e0       constant
0xffff7ab59cb4    84  d503201f       constant
0xffff7ab59cb8    88  7ab38080       constant
0xffff7ab59cbc    92  0000ffff       constant
0xffff7ab59cc0    96  movz x16, #0x0
0xffff7ab59cc4   100  sub csp, jssp, #0x10 (16)
0xffff7ab59cc8   104  stp fp, lr, [jssp, #-16]!
0xffff7ab59ccc   108  bl #+0x4 (addr 0xffff7ab59cd0)
0xffff7ab59cd0   112  movz x17, #0xa00000000
0xffff7ab59cd4   116  sub csp, jssp, #0x10 (16)
0xffff7ab59cd8   120  stp x17, cp, [jssp, #-16]!
0xffff7ab59cdc   124  add fp, jssp, #0x10 (16)
0xffff7ab59ce0   128  ldr x17, pc+24 (addr 0x0000ffff7ab59cf8)    ;; lazy deoptimization bailout 0
0xffff7ab59ce4   132  add x17, x17, x16
0xffff7ab59ce8   136  br x17
0xffff7ab59cec   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab59cf0   144  d63f03e0       constant
0xffff7ab59cf4   148  d503201f       constant
0xffff7ab59cf8   152  7a906000       constant
0xffff7ab59cfc   156  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7ab59c9c  code target (STUB)  (0xffff7ab38080)
0xffff7ab59cac  constant pool (size 20)
0xffff7ab59ce0  runtime entry
0xffff7ab59cec  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = update
compiler = unknown
Instructions (size = 128)
0xffff7ab59d80     0  sub csp, jssp, #0x8 (8)
0xffff7ab59d84     4  str x3, [jssp, #-8]!
0xffff7ab59d88     8  sub csp, jssp, #0x8 (8)
0xffff7ab59d8c    12  str x4, [jssp, #-8]!
0xffff7ab59d90    16  ldr x5, pc+72 (addr 0x0000ffff7ab59dd8)    ;; object: 0x20d88701 WeakCell for 0x4ec10d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab59d94    20  ldur x5, [x5, #7]
0xffff7ab59d98    24  tbz w5, #0, #+0x20 (addr 0xffff7ab59db8)
0xffff7ab59d9c    28  ldursw x4, [x5, #15]
0xffff7ab59da0    32  tbnz w4, #23, #+0x18 (addr 0xffff7ab59db8)
0xffff7ab59da4    36  ldr x4, [jssp], #8
0xffff7ab59da8    40  ldr x3, [jssp], #8
0xffff7ab59dac    44  ldr x2, pc+52 (addr 0x0000ffff7ab59de0)    ;; object: 0x20d83a31 <String[6]: update>
0xffff7ab59db0    48  ldr x16, pc+56 (addr 0x0000ffff7ab59de8)    ;; code: HANDLER, StoreTransitionStub, minor: 172035
0xffff7ab59db4    52  br x16
0xffff7ab59db8    56  ldr x2, pc+56 (addr 0x0000ffff7ab59df0)    ;; object: 0x20d83a31 <String[6]: update>
0xffff7ab59dbc    60  ldr x4, [jssp], #8
0xffff7ab59dc0    64  ldr x3, [jssp], #8
0xffff7ab59dc4    68  ldr x16, pc+52 (addr 0x0000ffff7ab59df8)    ;; code: BUILTIN
0xffff7ab59dc8    72  br x16
0xffff7ab59dcc    76  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0xffff7ab59dd0    80  d63f03e0       constant
0xffff7ab59dd4    84  d503201f       constant
0xffff7ab59dd8    88  20d88701       constant
0xffff7ab59ddc    92  00000000       constant
0xffff7ab59de0    96  20d83a31       constant
0xffff7ab59de4   100  00000000       constant
0xffff7ab59de8   104  7ab59c60       constant
0xffff7ab59dec   108  0000ffff       constant
0xffff7ab59df0   112  20d83a31       constant
0xffff7ab59df4   116  00000000       constant
0xffff7ab59df8   120  7ab22420       constant
0xffff7ab59dfc   124  0000ffff       constant


RelocInfo (size = 11)
0xffff7ab59d90  embedded object  (0x20d88701 WeakCell for 0x4ec10d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab59dac  embedded object  (0x20d83a31 <String[6]: update>)
0xffff7ab59db0  code target (HANDLER)  (0xffff7ab59c60)
0xffff7ab59db8  embedded object  (0x20d83a31 <String[6]: update>)
0xffff7ab59dc4  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab59dcc  constant pool (size 52)

kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 168)
0xffff7ab59e60     0  mov x6, x0
0xffff7ab59e64     4  tbnz w6, #0, #+0x5c (addr 0xffff7ab59ec0)
0xffff7ab59e68     8  ldur x3, [x1, #7]
0xffff7ab59e6c    12  stur x6, [x3, #31]
0xffff7ab59e70    16  stur x5, [x1, #-1]
0xffff7ab59e74    20  tbz w5, #0, #+0x34 (addr 0xffff7ab59ea8)
0xffff7ab59e78    24  sub x2, x1, #0x1 (1)
0xffff7ab59e7c    28  and x5, x5, #0xfffffffffff00000
0xffff7ab59e80    32  ldr x5, [x5, #8]
0xffff7ab59e84    36  tbz w5, #1, #+0x24 (addr 0xffff7ab59ea8)
0xffff7ab59e88    40  and x5, x1, #0xfffffffffff00000
0xffff7ab59e8c    44  ldr x5, [x5, #8]
0xffff7ab59e90    48  tbz w5, #2, #+0x18 (addr 0xffff7ab59ea8)
0xffff7ab59e94    52  sub csp, jssp, #0x8 (8)
0xffff7ab59e98    56  str lr, [jssp, #-8]!
0xffff7ab59e9c    60  ldr x16, pc+28 (addr 0x0000ffff7ab59eb8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab59ea0    64  blr x16
0xffff7ab59ea4    68  ldr lr, [jssp], #8
0xffff7ab59ea8    72  ret
0xffff7ab59eac    76  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab59eb0    80  d63f03e0       constant
0xffff7ab59eb4    84  d503201f       constant
0xffff7ab59eb8    88  7ab38080       constant
0xffff7ab59ebc    92  0000ffff       constant
0xffff7ab59ec0    96  movz x16, #0x0
0xffff7ab59ec4   100  sub csp, jssp, #0x10 (16)
0xffff7ab59ec8   104  stp fp, lr, [jssp, #-16]!
0xffff7ab59ecc   108  bl #+0x4 (addr 0xffff7ab59ed0)
0xffff7ab59ed0   112  movz x17, #0xa00000000
0xffff7ab59ed4   116  sub csp, jssp, #0x10 (16)
0xffff7ab59ed8   120  stp x17, cp, [jssp, #-16]!
0xffff7ab59edc   124  add fp, jssp, #0x10 (16)
0xffff7ab59ee0   128  ldr x17, pc+24 (addr 0x0000ffff7ab59ef8)    ;; lazy deoptimization bailout 0
0xffff7ab59ee4   132  add x17, x17, x16
0xffff7ab59ee8   136  br x17
0xffff7ab59eec   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab59ef0   144  d63f03e0       constant
0xffff7ab59ef4   148  d503201f       constant
0xffff7ab59ef8   152  7a906000       constant
0xffff7ab59efc   156  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7ab59e9c  code target (STUB)  (0xffff7ab38080)
0xffff7ab59eac  constant pool (size 20)
0xffff7ab59ee0  runtime entry
0xffff7ab59eec  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = delete
compiler = unknown
Instructions (size = 128)
0xffff7ab59f80     0  sub csp, jssp, #0x8 (8)
0xffff7ab59f84     4  str x3, [jssp, #-8]!
0xffff7ab59f88     8  sub csp, jssp, #0x8 (8)
0xffff7ab59f8c    12  str x4, [jssp, #-8]!
0xffff7ab59f90    16  ldr x5, pc+72 (addr 0x0000ffff7ab59fd8)    ;; object: 0x20d88809 WeakCell for 0x4ec10dd9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab59f94    20  ldur x5, [x5, #7]
0xffff7ab59f98    24  tbz w5, #0, #+0x20 (addr 0xffff7ab59fb8)
0xffff7ab59f9c    28  ldursw x4, [x5, #15]
0xffff7ab59fa0    32  tbnz w4, #23, #+0x18 (addr 0xffff7ab59fb8)
0xffff7ab59fa4    36  ldr x4, [jssp], #8
0xffff7ab59fa8    40  ldr x3, [jssp], #8
0xffff7ab59fac    44  ldr x2, pc+52 (addr 0x0000ffff7ab59fe0)    ;; object: 0x20d83a51 <String[6]: delete>
0xffff7ab59fb0    48  ldr x16, pc+56 (addr 0x0000ffff7ab59fe8)    ;; code: HANDLER, StoreTransitionStub, minor: 172036
0xffff7ab59fb4    52  br x16
0xffff7ab59fb8    56  ldr x2, pc+56 (addr 0x0000ffff7ab59ff0)    ;; object: 0x20d83a51 <String[6]: delete>
0xffff7ab59fbc    60  ldr x4, [jssp], #8
0xffff7ab59fc0    64  ldr x3, [jssp], #8
0xffff7ab59fc4    68  ldr x16, pc+52 (addr 0x0000ffff7ab59ff8)    ;; code: BUILTIN
0xffff7ab59fc8    72  br x16
0xffff7ab59fcc    76  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0xffff7ab59fd0    80  d63f03e0       constant
0xffff7ab59fd4    84  d503201f       constant
0xffff7ab59fd8    88  20d88809       constant
0xffff7ab59fdc    92  00000000       constant
0xffff7ab59fe0    96  20d83a51       constant
0xffff7ab59fe4   100  00000000       constant
0xffff7ab59fe8   104  7ab59e60       constant
0xffff7ab59fec   108  0000ffff       constant
0xffff7ab59ff0   112  20d83a51       constant
0xffff7ab59ff4   116  00000000       constant
0xffff7ab59ff8   120  7ab22420       constant
0xffff7ab59ffc   124  0000ffff       constant


RelocInfo (size = 11)
0xffff7ab59f90  embedded object  (0x20d88809 WeakCell for 0x4ec10dd9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab59fac  embedded object  (0x20d83a51 <String[6]: delete>)
0xffff7ab59fb0  code target (HANDLER)  (0xffff7ab59e60)
0xffff7ab59fb8  embedded object  (0x20d83a51 <String[6]: delete>)
0xffff7ab59fc4  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab59fcc  constant pool (size 52)

kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 549)
0xffff7ab5a060     0  ldur x6, [x1, #7]
0xffff7ab5a064     4  ldur w7, [x6, #11]
0xffff7ab5a068     8  adds w8, w7, #0x3 (3)
0xffff7ab5a06c    12  b.vs #+0x1a4 (addr 0xffff7ab5a210)
0xffff7ab5a070    16  movz w16, #0x95ff
0xffff7ab5a074    20  cmp w8, w16, lsl #1
0xffff7ab5a078    24  b.hs #+0x1a8 (addr 0xffff7ab5a220)
0xffff7ab5a07c    28  lsl x9, x8, #32
0xffff7ab5a080    32  lsl w10, w8, #3
0xffff7ab5a084    36  add w10, w10, #0x10 (16)
0xffff7ab5a088    40  sxtw x10, w10
0xffff7ab5a08c    44  movz x11, #0xe2c0
0xffff7ab5a090    48  movk x11, #0x9ab, lsl #16
0xffff7ab5a094    52  ldp x13, x16, [x11]
0xffff7ab5a098    56  adds x12, x13, x10
0xffff7ab5a09c    60  ccmp x12, x16, #nzCv, lo
0xffff7ab5a0a0    64  b.hi #+0xc8 (addr 0xffff7ab5a168)
0xffff7ab5a0a4    68  str x12, [x11]
0xffff7ab5a0a8    72  orr x13, x13, #0x1
0xffff7ab5a0ac    76  ldr x10, pc+300 (addr 0x0000ffff7ab5a1d8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab5a0b0    80  stur x10, [x13, #-1]
0xffff7ab5a0b4    84  stur x9, [x13, #7]
0xffff7ab5a0b8    88  cmp w7, w8
0xffff7ab5a0bc    92  b.ge #+0x18 (addr 0xffff7ab5a0d4)
0xffff7ab5a0c0    96  sub w8, w8, #0x1 (1)
0xffff7ab5a0c4   100  ldr x9, pc+284 (addr 0x0000ffff7ab5a1e0)    ;; object: 0x20d04241 <undefined>
0xffff7ab5a0c8   104  add x10, x13, #0xf (15)
0xffff7ab5a0cc   108  str x9, [x10, w8, sxtw #3]
0xffff7ab5a0d0   112  b #-0x18 (addr 0xffff7ab5a0b8)
0xffff7ab5a0d4   116  cmp w7, #0x0 (0)
0xffff7ab5a0d8   120  b.le #+0x1c (addr 0xffff7ab5a0f4)
0xffff7ab5a0dc   124  sub w7, w7, #0x1 (1)
0xffff7ab5a0e0   128  add x8, x6, #0xf (15)
0xffff7ab5a0e4   132  ldr x9, [x8, w7, sxtw #3]
0xffff7ab5a0e8   136  add x8, x13, #0xf (15)
0xffff7ab5a0ec   140  str x9, [x8, w7, sxtw #3]
0xffff7ab5a0f0   144  b #-0x1c (addr 0xffff7ab5a0d4)
0xffff7ab5a0f4   148  stur x13, [x1, #7]
0xffff7ab5a0f8   152  add x6, x1, #0x7 (7)
0xffff7ab5a0fc   156  and x13, x1, #0xfffffffffff00000
0xffff7ab5a100   160  ldr x13, [x13, #8]
0xffff7ab5a104   164  tbz w13, #2, #+0x18 (addr 0xffff7ab5a11c)
0xffff7ab5a108   168  sub csp, jssp, #0x8 (8)
0xffff7ab5a10c   172  str lr, [jssp, #-8]!
0xffff7ab5a110   176  ldr x16, pc+216 (addr 0x0000ffff7ab5a1e8)    ;; code: STUB, RecordWriteStub, minor: 72097
0xffff7ab5a114   180  blr x16
0xffff7ab5a118   184  ldr lr, [jssp], #8
0xffff7ab5a11c   188  mov x6, x0
0xffff7ab5a120   192  tbnz w6, #0, #+0x110 (addr 0xffff7ab5a230)
0xffff7ab5a124   196  ldur x3, [x1, #7]
0xffff7ab5a128   200  stur x6, [x3, #39]
0xffff7ab5a12c   204  stur x5, [x1, #-1]
0xffff7ab5a130   208  tbz w5, #0, #+0x34 (addr 0xffff7ab5a164)
0xffff7ab5a134   212  sub x2, x1, #0x1 (1)
0xffff7ab5a138   216  and x5, x5, #0xfffffffffff00000
0xffff7ab5a13c   220  ldr x5, [x5, #8]
0xffff7ab5a140   224  tbz w5, #1, #+0x24 (addr 0xffff7ab5a164)
0xffff7ab5a144   228  and x5, x1, #0xfffffffffff00000
0xffff7ab5a148   232  ldr x5, [x5, #8]
0xffff7ab5a14c   236  tbz w5, #2, #+0x18 (addr 0xffff7ab5a164)
0xffff7ab5a150   240  sub csp, jssp, #0x8 (8)
0xffff7ab5a154   244  str lr, [jssp, #-8]!
0xffff7ab5a158   248  ldr x16, pc+152 (addr 0x0000ffff7ab5a1f0)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab5a15c   252  blr x16
0xffff7ab5a160   256  ldr lr, [jssp], #8
0xffff7ab5a164   260  ret
0xffff7ab5a168   264  sub csp, jssp, #0x10 (16)
0xffff7ab5a16c   268  stp fp, lr, [jssp, #-16]!
0xffff7ab5a170   272  movz fp, #0xa00000000
0xffff7ab5a174   276  sub csp, jssp, #0x8 (8)
0xffff7ab5a178   280  str fp, [jssp, #-8]!
0xffff7ab5a17c   284  add fp, jssp, #0x8 (8)
0xffff7ab5a180   288  movz x13, #0x0
0xffff7ab5a184   292  mov x16, lr
0xffff7ab5a188   296  ldr x17, pc+112 (addr 0x0000ffff7ab5a1f8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab5a18c   300  blr x17
0xffff7ab5a190   304  lsl x0, x10, #32
0xffff7ab5a194   308  movz x10, #0x0
0xffff7ab5a198   312  sub csp, jssp, #0x10 (16)
0xffff7ab5a19c   316  stp x10, x0, [jssp, #-16]!
0xffff7ab5a1a0   320  movz x0, #0x2
0xffff7ab5a1a4   324  movz x1, #0x5b88
0xffff7ab5a1a8   328  movk x1, #0xe2, lsl #16
0xffff7ab5a1ac   332  ldr x16, pc+84 (addr 0x0000ffff7ab5a200)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab5a1b0   336  blr x16
0xffff7ab5a1b4   340  str x0, [jssp, #104]
0xffff7ab5a1b8   344  ldr x16, pc+80 (addr 0x0000ffff7ab5a208)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab5a1bc   348  blr x16
0xffff7ab5a1c0   352  ldr lr, [jssp, #16]
0xffff7ab5a1c4   356  ldp xzr, fp, [jssp], #24
0xffff7ab5a1c8   360  b #-0x11c (addr 0xffff7ab5a0ac)
0xffff7ab5a1cc   364  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab5a1d0   368  d63f03e0       constant
0xffff7ab5a1d4   372  d503201f       constant
0xffff7ab5a1d8   376  4ec04259       constant
0xffff7ab5a1dc   380  00000000       constant
0xffff7ab5a1e0   384  20d04241       constant
0xffff7ab5a1e4   388  00000000       constant
0xffff7ab5a1e8   392  7ab370c0       constant
0xffff7ab5a1ec   396  0000ffff       constant
0xffff7ab5a1f0   400  7ab38080       constant
0xffff7ab5a1f4   404  0000ffff       constant
0xffff7ab5a1f8   408  7ab06820       constant
0xffff7ab5a1fc   412  0000ffff       constant
0xffff7ab5a200   416  7ab06260       constant
0xffff7ab5a204   420  0000ffff       constant
0xffff7ab5a208   424  7ab068e0       constant
0xffff7ab5a20c   428  0000ffff       constant
0xffff7ab5a210   432  movz x16, #0x0
0xffff7ab5a214   436  sub csp, jssp, #0x10 (16)
0xffff7ab5a218   440  stp fp, lr, [jssp, #-16]!
0xffff7ab5a21c   444  bl #+0x24 (addr 0xffff7ab5a240)
0xffff7ab5a220   448  movz x16, #0x8
0xffff7ab5a224   452  sub csp, jssp, #0x10 (16)
0xffff7ab5a228   456  stp fp, lr, [jssp, #-16]!
0xffff7ab5a22c   460  bl #+0x14 (addr 0xffff7ab5a240)
0xffff7ab5a230   464  movz x16, #0x10
0xffff7ab5a234   468  sub csp, jssp, #0x10 (16)
0xffff7ab5a238   472  stp fp, lr, [jssp, #-16]!
0xffff7ab5a23c   476  bl #+0x4 (addr 0xffff7ab5a240)
0xffff7ab5a240   480  movz x17, #0xa00000000
0xffff7ab5a244   484  sub csp, jssp, #0x10 (16)
0xffff7ab5a248   488  stp x17, cp, [jssp, #-16]!
0xffff7ab5a24c   492  add fp, jssp, #0x10 (16)
0xffff7ab5a250   496  ldr x17, pc+24 (addr 0x0000ffff7ab5a268)    ;; lazy deoptimization bailout 0
0xffff7ab5a254   500  add x17, x17, x16
0xffff7ab5a258   504  br x17
0xffff7ab5a25c   508  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab5a260   512  d63f03e0       constant
0xffff7ab5a264   516  d503201f       constant
0xffff7ab5a268   520  7a906000       constant
0xffff7ab5a26c   524  0000ffff       constant


Safepoints (size = 21)
0xffff7ab5a1b4   340  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 29)
0xffff7ab5a0ac  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab5a0c4  embedded object  (0x20d04241 <undefined>)
0xffff7ab5a110  code target (STUB)  (0xffff7ab370c0)
0xffff7ab5a158  code target (STUB)  (0xffff7ab38080)
0xffff7ab5a188  code target (STUB)  (0xffff7ab06820)
0xffff7ab5a1ac  code target (STUB)  (0xffff7ab06260)
0xffff7ab5a1b8  code target (STUB)  (0xffff7ab068e0)
0xffff7ab5a1cc  constant pool (size 68)
0xffff7ab5a250  runtime entry
0xffff7ab5a25c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = setPrototype
compiler = unknown
Instructions (size = 128)
0xffff7ab5a300     0  sub csp, jssp, #0x8 (8)
0xffff7ab5a304     4  str x3, [jssp, #-8]!
0xffff7ab5a308     8  sub csp, jssp, #0x8 (8)
0xffff7ab5a30c    12  str x4, [jssp, #-8]!
0xffff7ab5a310    16  ldr x5, pc+72 (addr 0x0000ffff7ab5a358)    ;; object: 0x20d88911 WeakCell for 0x4ec10e31 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab5a314    20  ldur x5, [x5, #7]
0xffff7ab5a318    24  tbz w5, #0, #+0x20 (addr 0xffff7ab5a338)
0xffff7ab5a31c    28  ldursw x4, [x5, #15]
0xffff7ab5a320    32  tbnz w4, #23, #+0x18 (addr 0xffff7ab5a338)
0xffff7ab5a324    36  ldr x4, [jssp], #8
0xffff7ab5a328    40  ldr x3, [jssp], #8
0xffff7ab5a32c    44  ldr x2, pc+52 (addr 0x0000ffff7ab5a360)    ;; object: 0x20d83a71 <String[12]: setPrototype>
0xffff7ab5a330    48  ldr x16, pc+56 (addr 0x0000ffff7ab5a368)    ;; code: HANDLER, StoreTransitionStub, minor: 303109
0xffff7ab5a334    52  br x16
0xffff7ab5a338    56  ldr x2, pc+56 (addr 0x0000ffff7ab5a370)    ;; object: 0x20d83a71 <String[12]: setPrototype>
0xffff7ab5a33c    60  ldr x4, [jssp], #8
0xffff7ab5a340    64  ldr x3, [jssp], #8
0xffff7ab5a344    68  ldr x16, pc+52 (addr 0x0000ffff7ab5a378)    ;; code: BUILTIN
0xffff7ab5a348    72  br x16
0xffff7ab5a34c    76  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0xffff7ab5a350    80  d63f03e0       constant
0xffff7ab5a354    84  d503201f       constant
0xffff7ab5a358    88  20d88911       constant
0xffff7ab5a35c    92  00000000       constant
0xffff7ab5a360    96  20d83a71       constant
0xffff7ab5a364   100  00000000       constant
0xffff7ab5a368   104  7ab5a060       constant
0xffff7ab5a36c   108  0000ffff       constant
0xffff7ab5a370   112  20d83a71       constant
0xffff7ab5a374   116  00000000       constant
0xffff7ab5a378   120  7ab22420       constant
0xffff7ab5a37c   124  0000ffff       constant


RelocInfo (size = 11)
0xffff7ab5a310  embedded object  (0x20d88911 WeakCell for 0x4ec10e31 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab5a32c  embedded object  (0x20d83a71 <String[12]: setPrototype>)
0xffff7ab5a330  code target (HANDLER)  (0xffff7ab5a060)
0xffff7ab5a338  embedded object  (0x20d83a71 <String[12]: setPrototype>)
0xffff7ab5a344  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab5a34c  constant pool (size 52)

kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 168)
0xffff7ab5a3e0     0  mov x6, x0
0xffff7ab5a3e4     4  tbnz w6, #0, #+0x5c (addr 0xffff7ab5a440)
0xffff7ab5a3e8     8  ldur x3, [x1, #7]
0xffff7ab5a3ec    12  stur x6, [x3, #47]
0xffff7ab5a3f0    16  stur x5, [x1, #-1]
0xffff7ab5a3f4    20  tbz w5, #0, #+0x34 (addr 0xffff7ab5a428)
0xffff7ab5a3f8    24  sub x2, x1, #0x1 (1)
0xffff7ab5a3fc    28  and x5, x5, #0xfffffffffff00000
0xffff7ab5a400    32  ldr x5, [x5, #8]
0xffff7ab5a404    36  tbz w5, #1, #+0x24 (addr 0xffff7ab5a428)
0xffff7ab5a408    40  and x5, x1, #0xfffffffffff00000
0xffff7ab5a40c    44  ldr x5, [x5, #8]
0xffff7ab5a410    48  tbz w5, #2, #+0x18 (addr 0xffff7ab5a428)
0xffff7ab5a414    52  sub csp, jssp, #0x8 (8)
0xffff7ab5a418    56  str lr, [jssp, #-8]!
0xffff7ab5a41c    60  ldr x16, pc+28 (addr 0x0000ffff7ab5a438)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab5a420    64  blr x16
0xffff7ab5a424    68  ldr lr, [jssp], #8
0xffff7ab5a428    72  ret
0xffff7ab5a42c    76  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab5a430    80  d63f03e0       constant
0xffff7ab5a434    84  d503201f       constant
0xffff7ab5a438    88  7ab38080       constant
0xffff7ab5a43c    92  0000ffff       constant
0xffff7ab5a440    96  movz x16, #0x0
0xffff7ab5a444   100  sub csp, jssp, #0x10 (16)
0xffff7ab5a448   104  stp fp, lr, [jssp, #-16]!
0xffff7ab5a44c   108  bl #+0x4 (addr 0xffff7ab5a450)
0xffff7ab5a450   112  movz x17, #0xa00000000
0xffff7ab5a454   116  sub csp, jssp, #0x10 (16)
0xffff7ab5a458   120  stp x17, cp, [jssp, #-16]!
0xffff7ab5a45c   124  add fp, jssp, #0x10 (16)
0xffff7ab5a460   128  ldr x17, pc+24 (addr 0x0000ffff7ab5a478)    ;; lazy deoptimization bailout 0
0xffff7ab5a464   132  add x17, x17, x16
0xffff7ab5a468   136  br x17
0xffff7ab5a46c   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab5a470   144  d63f03e0       constant
0xffff7ab5a474   148  d503201f       constant
0xffff7ab5a478   152  7a906000       constant
0xffff7ab5a47c   156  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7ab5a41c  code target (STUB)  (0xffff7ab38080)
0xffff7ab5a42c  constant pool (size 20)
0xffff7ab5a460  runtime entry
0xffff7ab5a46c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = reconfigure
compiler = unknown
Instructions (size = 128)
0xffff7ab5a500     0  sub csp, jssp, #0x8 (8)
0xffff7ab5a504     4  str x3, [jssp, #-8]!
0xffff7ab5a508     8  sub csp, jssp, #0x8 (8)
0xffff7ab5a50c    12  str x4, [jssp, #-8]!
0xffff7ab5a510    16  ldr x5, pc+72 (addr 0x0000ffff7ab5a558)    ;; object: 0x20d88a91 WeakCell for 0x4ec10e89 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab5a514    20  ldur x5, [x5, #7]
0xffff7ab5a518    24  tbz w5, #0, #+0x20 (addr 0xffff7ab5a538)
0xffff7ab5a51c    28  ldursw x4, [x5, #15]
0xffff7ab5a520    32  tbnz w4, #23, #+0x18 (addr 0xffff7ab5a538)
0xffff7ab5a524    36  ldr x4, [jssp], #8
0xffff7ab5a528    40  ldr x3, [jssp], #8
0xffff7ab5a52c    44  ldr x2, pc+52 (addr 0x0000ffff7ab5a560)    ;; object: 0x20d83a99 <String[11]: reconfigure>
0xffff7ab5a530    48  ldr x16, pc+56 (addr 0x0000ffff7ab5a568)    ;; code: HANDLER, StoreTransitionStub, minor: 172038
0xffff7ab5a534    52  br x16
0xffff7ab5a538    56  ldr x2, pc+56 (addr 0x0000ffff7ab5a570)    ;; object: 0x20d83a99 <String[11]: reconfigure>
0xffff7ab5a53c    60  ldr x4, [jssp], #8
0xffff7ab5a540    64  ldr x3, [jssp], #8
0xffff7ab5a544    68  ldr x16, pc+52 (addr 0x0000ffff7ab5a578)    ;; code: BUILTIN
0xffff7ab5a548    72  br x16
0xffff7ab5a54c    76  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0xffff7ab5a550    80  d63f03e0       constant
0xffff7ab5a554    84  d503201f       constant
0xffff7ab5a558    88  20d88a91       constant
0xffff7ab5a55c    92  00000000       constant
0xffff7ab5a560    96  20d83a99       constant
0xffff7ab5a564   100  00000000       constant
0xffff7ab5a568   104  7ab5a3e0       constant
0xffff7ab5a56c   108  0000ffff       constant
0xffff7ab5a570   112  20d83a99       constant
0xffff7ab5a574   116  00000000       constant
0xffff7ab5a578   120  7ab22420       constant
0xffff7ab5a57c   124  0000ffff       constant


RelocInfo (size = 11)
0xffff7ab5a510  embedded object  (0x20d88a91 WeakCell for 0x4ec10e89 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab5a52c  embedded object  (0x20d83a99 <String[11]: reconfigure>)
0xffff7ab5a530  code target (HANDLER)  (0xffff7ab5a3e0)
0xffff7ab5a538  embedded object  (0x20d83a99 <String[11]: reconfigure>)
0xffff7ab5a544  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab5a54c  constant pool (size 52)

kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 168)
0xffff7ab5a5e0     0  mov x6, x0
0xffff7ab5a5e4     4  tbnz w6, #0, #+0x5c (addr 0xffff7ab5a640)
0xffff7ab5a5e8     8  ldur x3, [x1, #7]
0xffff7ab5a5ec    12  stur x6, [x3, #55]
0xffff7ab5a5f0    16  stur x5, [x1, #-1]
0xffff7ab5a5f4    20  tbz w5, #0, #+0x34 (addr 0xffff7ab5a628)
0xffff7ab5a5f8    24  sub x2, x1, #0x1 (1)
0xffff7ab5a5fc    28  and x5, x5, #0xfffffffffff00000
0xffff7ab5a600    32  ldr x5, [x5, #8]
0xffff7ab5a604    36  tbz w5, #1, #+0x24 (addr 0xffff7ab5a628)
0xffff7ab5a608    40  and x5, x1, #0xfffffffffff00000
0xffff7ab5a60c    44  ldr x5, [x5, #8]
0xffff7ab5a610    48  tbz w5, #2, #+0x18 (addr 0xffff7ab5a628)
0xffff7ab5a614    52  sub csp, jssp, #0x8 (8)
0xffff7ab5a618    56  str lr, [jssp, #-8]!
0xffff7ab5a61c    60  ldr x16, pc+28 (addr 0x0000ffff7ab5a638)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab5a620    64  blr x16
0xffff7ab5a624    68  ldr lr, [jssp], #8
0xffff7ab5a628    72  ret
0xffff7ab5a62c    76  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab5a630    80  d63f03e0       constant
0xffff7ab5a634    84  d503201f       constant
0xffff7ab5a638    88  7ab38080       constant
0xffff7ab5a63c    92  0000ffff       constant
0xffff7ab5a640    96  movz x16, #0x0
0xffff7ab5a644   100  sub csp, jssp, #0x10 (16)
0xffff7ab5a648   104  stp fp, lr, [jssp, #-16]!
0xffff7ab5a64c   108  bl #+0x4 (addr 0xffff7ab5a650)
0xffff7ab5a650   112  movz x17, #0xa00000000
0xffff7ab5a654   116  sub csp, jssp, #0x10 (16)
0xffff7ab5a658   120  stp x17, cp, [jssp, #-16]!
0xffff7ab5a65c   124  add fp, jssp, #0x10 (16)
0xffff7ab5a660   128  ldr x17, pc+24 (addr 0x0000ffff7ab5a678)    ;; lazy deoptimization bailout 0
0xffff7ab5a664   132  add x17, x17, x16
0xffff7ab5a668   136  br x17
0xffff7ab5a66c   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab5a670   144  d63f03e0       constant
0xffff7ab5a674   148  d503201f       constant
0xffff7ab5a678   152  7a906000       constant
0xffff7ab5a67c   156  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7ab5a61c  code target (STUB)  (0xffff7ab38080)
0xffff7ab5a62c  constant pool (size 20)
0xffff7ab5a660  runtime entry
0xffff7ab5a66c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = preventExtensions
compiler = unknown
Instructions (size = 128)
0xffff7ab5a700     0  sub csp, jssp, #0x8 (8)
0xffff7ab5a704     4  str x3, [jssp, #-8]!
0xffff7ab5a708     8  sub csp, jssp, #0x8 (8)
0xffff7ab5a70c    12  str x4, [jssp, #-8]!
0xffff7ab5a710    16  ldr x5, pc+72 (addr 0x0000ffff7ab5a758)    ;; object: 0x20d88b99 WeakCell for 0x4ec10ee1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab5a714    20  ldur x5, [x5, #7]
0xffff7ab5a718    24  tbz w5, #0, #+0x20 (addr 0xffff7ab5a738)
0xffff7ab5a71c    28  ldursw x4, [x5, #15]
0xffff7ab5a720    32  tbnz w4, #23, #+0x18 (addr 0xffff7ab5a738)
0xffff7ab5a724    36  ldr x4, [jssp], #8
0xffff7ab5a728    40  ldr x3, [jssp], #8
0xffff7ab5a72c    44  ldr x2, pc+52 (addr 0x0000ffff7ab5a760)    ;; object: 0x20d052d1 <String[17]: preventExtensions>
0xffff7ab5a730    48  ldr x16, pc+56 (addr 0x0000ffff7ab5a768)    ;; code: HANDLER, StoreTransitionStub, minor: 172039
0xffff7ab5a734    52  br x16
0xffff7ab5a738    56  ldr x2, pc+56 (addr 0x0000ffff7ab5a770)    ;; object: 0x20d052d1 <String[17]: preventExtensions>
0xffff7ab5a73c    60  ldr x4, [jssp], #8
0xffff7ab5a740    64  ldr x3, [jssp], #8
0xffff7ab5a744    68  ldr x16, pc+52 (addr 0x0000ffff7ab5a778)    ;; code: BUILTIN
0xffff7ab5a748    72  br x16
0xffff7ab5a74c    76  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0xffff7ab5a750    80  d63f03e0       constant
0xffff7ab5a754    84  d503201f       constant
0xffff7ab5a758    88  20d88b99       constant
0xffff7ab5a75c    92  00000000       constant
0xffff7ab5a760    96  20d052d1       constant
0xffff7ab5a764   100  00000000       constant
0xffff7ab5a768   104  7ab5a5e0       constant
0xffff7ab5a76c   108  0000ffff       constant
0xffff7ab5a770   112  20d052d1       constant
0xffff7ab5a774   116  00000000       constant
0xffff7ab5a778   120  7ab22420       constant
0xffff7ab5a77c   124  0000ffff       constant


RelocInfo (size = 11)
0xffff7ab5a710  embedded object  (0x20d88b99 WeakCell for 0x4ec10ee1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab5a72c  embedded object  (0x20d052d1 <String[17]: preventExtensions>)
0xffff7ab5a730  code target (HANDLER)  (0xffff7ab5a5e0)
0xffff7ab5a738  embedded object  (0x20d052d1 <String[17]: preventExtensions>)
0xffff7ab5a744  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab5a74c  constant pool (size 52)

kind = STUB
major_key = ToLengthStub
name = ToLengthStub
compiler = turbofan
Instructions (size = 442)
0xffff7ab5a7e0     0  and x1, x0, #0x8000000000000001
0xffff7ab5a7e4     4  cmp x1, #0x0 (0)
0xffff7ab5a7e8     8  b.eq #+0xb0 (addr 0xffff7ab5a898)
0xffff7ab5a7ec    12  and x1, x0, #0x1
0xffff7ab5a7f0    16  cmp x1, #0x0 (0)
0xffff7ab5a7f4    20  b.eq #+0x154 (addr 0xffff7ab5a948)
0xffff7ab5a7f8    24  ldur x1, [x0, #-1]
0xffff7ab5a7fc    28  ldr x2, [x26, #120]
0xffff7ab5a800    32  cmp x1, x2
0xffff7ab5a804    36  b.ne #+0x98 (addr 0xffff7ab5a89c)
0xffff7ab5a808    40  ldur d0, [x0, #7]
0xffff7ab5a80c    44  fcmp d0, #0.0
0xffff7ab5a810    48  b.le #+0x138 (addr 0xffff7ab5a948)
0xffff7ab5a814    52  ldr d1, pc+324 (addr 0x0000ffff7ab5a958)
0xffff7ab5a818    56  fcmp d1, d0
0xffff7ab5a81c    60  b.ls #+0x124 (addr 0xffff7ab5a940)
0xffff7ab5a820    64  frintm d0, d0
0xffff7ab5a824    68  fcvtzs w0, d0
0xffff7ab5a828    72  scvtf d1, w0
0xffff7ab5a82c    76  fcmp d0, d1
0xffff7ab5a830    80  b.ne #+0x24 (addr 0xffff7ab5a854)
0xffff7ab5a834    84  fcmp d0, #0.0
0xffff7ab5a838    88  b.ne #+0x14 (addr 0xffff7ab5a84c)
0xffff7ab5a83c    92  fmov x1, d0
0xffff7ab5a840    96  lsr x1, x1, #32
0xffff7ab5a844   100  cmp w1, #0x0 (0)
0xffff7ab5a848   104  b.lt #+0xc (addr 0xffff7ab5a854)
0xffff7ab5a84c   108  lsl x0, x0, #32
0xffff7ab5a850   112  b #+0x40 (addr 0xffff7ab5a890)
0xffff7ab5a854   116  movz x0, #0xe2c0
0xffff7ab5a858   120  movk x0, #0x9ab, lsl #16
0xffff7ab5a85c   124  ldr x1, [x0]
0xffff7ab5a860   128  movz x2, #0xe2c8
0xffff7ab5a864   132  movk x2, #0x9ab, lsl #16
0xffff7ab5a868   136  ldr x2, [x2]
0xffff7ab5a86c   140  sub x2, x2, x1
0xffff7ab5a870   144  cmp x2, #0x10 (16)
0xffff7ab5a874   148  b.lt #+0x64 (addr 0xffff7ab5a8d8)
0xffff7ab5a878   152  add x2, x1, #0x10 (16)
0xffff7ab5a87c   156  str x2, [x0]
0xffff7ab5a880   160  add x0, x1, #0x1 (1)
0xffff7ab5a884   164  ldr x1, [x26, #120]
0xffff7ab5a888   168  stur x1, [x0, #-1]
0xffff7ab5a88c   172  stur d0, [x0, #7]
0xffff7ab5a890   176  ret
0xffff7ab5a894   180  b #+0xb4 (addr 0xffff7ab5a948)
0xffff7ab5a898   184  ret
0xffff7ab5a89c   188  movz x16, #0xa00000000
0xffff7ab5a8a0   192  sub csp, jssp, #0x10 (16)
0xffff7ab5a8a4   196  stp fp, lr, [jssp, #-16]!
0xffff7ab5a8a8   200  mov fp, jssp
0xffff7ab5a8ac   204  sub csp, jssp, #0x20 (32)
0xffff7ab5a8b0   208  sub jssp, jssp, #0x20 (32)
0xffff7ab5a8b4   212  stur x16, [fp, #-8]
0xffff7ab5a8b8   216  mov x1, cp
0xffff7ab5a8bc   220  str cp, [jssp, #8]
0xffff7ab5a8c0   224  ldr x16, pc+160 (addr 0x0000ffff7ab5a960)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0xffff7ab5a8c4   228  blr x16
0xffff7ab5a8c8   232  ldr cp, [jssp, #8]
0xffff7ab5a8cc   236  mov jssp, fp
0xffff7ab5a8d0   240  ldp fp, lr, [jssp], #16
0xffff7ab5a8d4   244  b #-0xf4 (addr 0xffff7ab5a7e0)
0xffff7ab5a8d8   248  movz x16, #0xa00000000
0xffff7ab5a8dc   252  sub csp, jssp, #0x10 (16)
0xffff7ab5a8e0   256  stp fp, lr, [jssp, #-16]!
0xffff7ab5a8e4   260  mov fp, jssp
0xffff7ab5a8e8   264  sub csp, jssp, #0x20 (32)
0xffff7ab5a8ec   268  sub jssp, jssp, #0x20 (32)
0xffff7ab5a8f0   272  stur x16, [fp, #-8]
0xffff7ab5a8f4   276  movz x0, #0x0
0xffff7ab5a8f8   280  lsl x0, x0, #32
0xffff7ab5a8fc   284  movz x1, #0x10
0xffff7ab5a900   288  lsl x1, x1, #32
0xffff7ab5a904   292  sub csp, jssp, #0x10 (16)
0xffff7ab5a908   296  sub jssp, jssp, #0x10 (16)
0xffff7ab5a90c   300  str x1, [jssp, #8]
0xffff7ab5a910   304  str x0, [jssp]
0xffff7ab5a914   308  str d0, [jssp, #32]
0xffff7ab5a918   312  movz x1, #0x5b88
0xffff7ab5a91c   316  movk x1, #0xe2, lsl #16
0xffff7ab5a920   320  movz x0, #0x2
0xffff7ab5a924   324  movz cp, #0x0
0xffff7ab5a928   328  ldr x16, pc+64 (addr 0x0000ffff7ab5a968)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab5a92c   332  blr x16
0xffff7ab5a930   336  ldr d0, [jssp, #16]
0xffff7ab5a934   340  mov jssp, fp
0xffff7ab5a938   344  ldp fp, lr, [jssp], #16
0xffff7ab5a93c   348  b #-0xb8 (addr 0xffff7ab5a884)
0xffff7ab5a940   352  ldr x0, pc+48 (addr 0x0000ffff7ab5a970)    ;; object: 0x20d88e41 <Number: 9.0072e+15>
0xffff7ab5a944   356  ret
0xffff7ab5a948   360  movz x0, #0x0
0xffff7ab5a94c   364  ret
0xffff7ab5a950   368  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7ab5a954   372  d63f03e0       constant
0xffff7ab5a958   376  ffffffff       constant
0xffff7ab5a95c   380  433fffff       constant
0xffff7ab5a960   384  7ab29d80       constant
0xffff7ab5a964   388  0000ffff       constant
0xffff7ab5a968   392  7ab06060       constant
0xffff7ab5a96c   396  0000ffff       constant
0xffff7ab5a970   400  20d88e41       constant
0xffff7ab5a974   404  00000000       constant


Safepoints (size = 34)
0xffff7ab5a8c8   232  010000 (sp -> fp)  <none>
0xffff7ab5a930   336  000000 (sp -> fp)  <none>

RelocInfo (size = 13)
0xffff7ab5a8c0  code target (STUB)  (0xffff7ab29d80)
0xffff7ab5a928  code target (STUB)  (0xffff7ab06060)
0xffff7ab5a940  embedded object  (0x20d88e41 <Number: 9.0072e+15>)
0xffff7ab5a950  constant pool (size 40)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = SMI*SMI -> SMI
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 152)
0xffff7ab5b5e0     0  orr x16, x0, x1
0xffff7ab5b5e4     4  tbnz w16, #0, #+0xc (addr 0xffff7ab5b5f0)
0xffff7ab5b5e8     8  sub x0, x0, x1
0xffff7ab5b5ec    12  ret
0xffff7ab5b5f0    16  movz x16, #0xc00000000
0xffff7ab5b5f4    20  sub csp, jssp, #0x10 (16)
0xffff7ab5b5f8    24  stp fp, lr, [jssp, #-16]!
0xffff7ab5b5fc    28  sub csp, jssp, #0x10 (16)
0xffff7ab5b600    32  str x16, [jssp, #-8]!
0xffff7ab5b604    36  ldr x17, pc+92 (addr 0x0000ffff7ab5b660)    ;; object: 0xffff7ab5b581 <Code: COMPARE_IC>
0xffff7ab5b608    40  sub csp, jssp, #0x10 (16)
0xffff7ab5b60c    44  str x17, [jssp, #-8]!
0xffff7ab5b610    48  add fp, jssp, #0x10 (16)
0xffff7ab5b614    52  sub csp, jssp, #0x18 (24)
0xffff7ab5b618    56  stp lr, x0, [jssp, #-24]!
0xffff7ab5b61c    60  str x1, [jssp, #16]
0xffff7ab5b620    64  movz x10, #0x2f00000000
0xffff7ab5b624    68  sub csp, jssp, #0x18 (24)
0xffff7ab5b628    72  stp x10, x0, [jssp, #-24]!
0xffff7ab5b62c    76  str x1, [jssp, #16]
0xffff7ab5b630    80  movz x0, #0x3
0xffff7ab5b634    84  ldr x1, pc+52 (addr 0x0000ffff7ab5b668)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ab5b638    88  ldr x16, pc+56 (addr 0x0000ffff7ab5b670)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab5b63c    92  blr x16
0xffff7ab5b640    96  add x11, x0, #0x5f (95)
0xffff7ab5b644   100  ldr x1, [jssp, #16]
0xffff7ab5b648   104  ldp lr, x0, [jssp], #24
0xffff7ab5b64c   108  mov jssp, fp
0xffff7ab5b650   112  ldp fp, lr, [jssp], #16
0xffff7ab5b654   116  br x11
0xffff7ab5b658   120  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab5b65c   124  d63f03e0       constant
0xffff7ab5b660   128  7ab5b581       constant
0xffff7ab5b664   132  0000ffff       constant
0xffff7ab5b668   136  00c8a980       constant
0xffff7ab5b66c   140  00000000       constant
0xffff7ab5b670   144  7ab06060       constant
0xffff7ab5b674   148  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab5b604  embedded object  (0xffff7ab5b581 <Code: COMPARE_IC>)
0xffff7ab5b634  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ab5b638  code target (STUB)  (0xffff7ab06060)
0xffff7ab5b658  constant pool (size 32)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 445)
0xffff7ab5b920     0  movz x2, #0xe2c0
0xffff7ab5b924     4  movk x2, #0x9ab, lsl #16
0xffff7ab5b928     8  ldp x3, x0, [x2]
0xffff7ab5b92c    12  adds x16, x3, #0x90 (144)
0xffff7ab5b930    16  ccmp x16, x0, #nzCv, lo
0xffff7ab5b934    20  b.hi #+0x9c (addr 0xffff7ab5b9d0)
0xffff7ab5b938    24  str x16, [x2]
0xffff7ab5b93c    28  orr x3, x3, #0x1
0xffff7ab5b940    32  ldr x0, pc+256 (addr 0x0000ffff7ab5ba40)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab5b944    36  stur x0, [x3, #-1]
0xffff7ab5b948    40  movz x0, #0x1000000000
0xffff7ab5b94c    44  stur x0, [x3, #7]
0xffff7ab5b950    48  stur x1, [x3, #15]
0xffff7ab5b954    52  stur cp, [x3, #23]
0xffff7ab5b958    56  ldr x0, pc+240 (addr 0x0000ffff7ab5ba48)    ;; object: 0x20d04519 <the hole>
0xffff7ab5b95c    60  stur x0, [x3, #31]
0xffff7ab5b960    64  ldur x0, [cp, #39]
0xffff7ab5b964    68  stur x0, [x3, #39]
0xffff7ab5b968    72  ldr x0, pc+232 (addr 0x0000ffff7ab5ba50)    ;; object: 0x20d04241 <undefined>
0xffff7ab5b96c    76  stur x0, [x3, #47]
0xffff7ab5b970    80  ldr x0, pc+232 (addr 0x0000ffff7ab5ba58)    ;; object: 0x20d04241 <undefined>
0xffff7ab5b974    84  stur x0, [x3, #55]
0xffff7ab5b978    88  ldr x0, pc+232 (addr 0x0000ffff7ab5ba60)    ;; object: 0x20d04241 <undefined>
0xffff7ab5b97c    92  stur x0, [x3, #63]
0xffff7ab5b980    96  ldr x0, pc+232 (addr 0x0000ffff7ab5ba68)    ;; object: 0x20d04241 <undefined>
0xffff7ab5b984   100  stur x0, [x3, #71]
0xffff7ab5b988   104  ldr x0, pc+232 (addr 0x0000ffff7ab5ba70)    ;; object: 0x20d04241 <undefined>
0xffff7ab5b98c   108  stur x0, [x3, #79]
0xffff7ab5b990   112  ldr x0, pc+232 (addr 0x0000ffff7ab5ba78)    ;; object: 0x20d04241 <undefined>
0xffff7ab5b994   116  stur x0, [x3, #87]
0xffff7ab5b998   120  ldr x0, pc+232 (addr 0x0000ffff7ab5ba80)    ;; object: 0x20d04241 <undefined>
0xffff7ab5b99c   124  stur x0, [x3, #95]
0xffff7ab5b9a0   128  ldr x0, pc+232 (addr 0x0000ffff7ab5ba88)    ;; object: 0x20d04241 <undefined>
0xffff7ab5b9a4   132  stur x0, [x3, #103]
0xffff7ab5b9a8   136  ldr x0, pc+232 (addr 0x0000ffff7ab5ba90)    ;; object: 0x20d04241 <undefined>
0xffff7ab5b9ac   140  stur x0, [x3, #111]
0xffff7ab5b9b0   144  ldr x0, pc+232 (addr 0x0000ffff7ab5ba98)    ;; object: 0x20d04241 <undefined>
0xffff7ab5b9b4   148  stur x0, [x3, #119]
0xffff7ab5b9b8   152  ldr x0, pc+232 (addr 0x0000ffff7ab5baa0)    ;; object: 0x20d04241 <undefined>
0xffff7ab5b9bc   156  stur x0, [x3, #127]
0xffff7ab5b9c0   160  ldr x0, pc+232 (addr 0x0000ffff7ab5baa8)    ;; object: 0x20d04241 <undefined>
0xffff7ab5b9c4   164  stur x0, [x3, #135]
0xffff7ab5b9c8   168  mov x0, x3
0xffff7ab5b9cc   172  ret
0xffff7ab5b9d0   176  sub csp, jssp, #0x10 (16)
0xffff7ab5b9d4   180  stp fp, lr, [jssp, #-16]!
0xffff7ab5b9d8   184  movz fp, #0xa00000000
0xffff7ab5b9dc   188  sub csp, jssp, #0x8 (8)
0xffff7ab5b9e0   192  str fp, [jssp, #-8]!
0xffff7ab5b9e4   196  add fp, jssp, #0x8 (8)
0xffff7ab5b9e8   200  movz x3, #0x0
0xffff7ab5b9ec   204  mov x16, lr
0xffff7ab5b9f0   208  ldr x17, pc+192 (addr 0x0000ffff7ab5bab0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab5b9f4   212  blr x17
0xffff7ab5b9f8   216  movz x0, #0x9000000000
0xffff7ab5b9fc   220  movz x10, #0x0
0xffff7ab5ba00   224  sub csp, jssp, #0x10 (16)
0xffff7ab5ba04   228  stp x10, x0, [jssp, #-16]!
0xffff7ab5ba08   232  movz x0, #0x2
0xffff7ab5ba0c   236  movz x1, #0x5b88
0xffff7ab5ba10   240  movk x1, #0xe2, lsl #16
0xffff7ab5ba14   244  ldr x16, pc+164 (addr 0x0000ffff7ab5bab8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab5ba18   248  blr x16
0xffff7ab5ba1c   252  str x0, [jssp, #24]
0xffff7ab5ba20   256  ldr x16, pc+160 (addr 0x0000ffff7ab5bac0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab5ba24   260  blr x16
0xffff7ab5ba28   264  ldr lr, [jssp, #16]
0xffff7ab5ba2c   268  ldp xzr, fp, [jssp], #24
0xffff7ab5ba30   272  b #-0xf0 (addr 0xffff7ab5b940)
0xffff7ab5ba34   276  5800049f       constant pool begin (num_const = 36)    ;; constant pool
0xffff7ab5ba38   280  d63f03e0       constant
0xffff7ab5ba3c   284  d503201f       constant
0xffff7ab5ba40   288  4ec06149       constant
0xffff7ab5ba44   292  00000000       constant
0xffff7ab5ba48   296  20d04519       constant
0xffff7ab5ba4c   300  00000000       constant
0xffff7ab5ba50   304  20d04241       constant
0xffff7ab5ba54   308  00000000       constant
0xffff7ab5ba58   312  20d04241       constant
0xffff7ab5ba5c   316  00000000       constant
0xffff7ab5ba60   320  20d04241       constant
0xffff7ab5ba64   324  00000000       constant
0xffff7ab5ba68   328  20d04241       constant
0xffff7ab5ba6c   332  00000000       constant
0xffff7ab5ba70   336  20d04241       constant
0xffff7ab5ba74   340  00000000       constant
0xffff7ab5ba78   344  20d04241       constant
0xffff7ab5ba7c   348  00000000       constant
0xffff7ab5ba80   352  20d04241       constant
0xffff7ab5ba84   356  00000000       constant
0xffff7ab5ba88   360  20d04241       constant
0xffff7ab5ba8c   364  00000000       constant
0xffff7ab5ba90   368  20d04241       constant
0xffff7ab5ba94   372  00000000       constant
0xffff7ab5ba98   376  20d04241       constant
0xffff7ab5ba9c   380  00000000       constant
0xffff7ab5baa0   384  20d04241       constant
0xffff7ab5baa4   388  00000000       constant
0xffff7ab5baa8   392  20d04241       constant
0xffff7ab5baac   396  00000000       constant
0xffff7ab5bab0   400  7ab06820       constant
0xffff7ab5bab4   404  0000ffff       constant
0xffff7ab5bab8   408  7ab06260       constant
0xffff7ab5babc   412  0000ffff       constant
0xffff7ab5bac0   416  7ab068e0       constant
0xffff7ab5bac4   420  0000ffff       constant


Safepoints (size = 21)
0xffff7ab5ba1c   252  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 23)
0xffff7ab5b940  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab5b958  embedded object  (0x20d04519 <the hole>)
0xffff7ab5b968  embedded object  (0x20d04241 <undefined>)
0xffff7ab5b970  embedded object  (0x20d04241 <undefined>)
0xffff7ab5b978  embedded object  (0x20d04241 <undefined>)
0xffff7ab5b980  embedded object  (0x20d04241 <undefined>)
0xffff7ab5b988  embedded object  (0x20d04241 <undefined>)
0xffff7ab5b990  embedded object  (0x20d04241 <undefined>)
0xffff7ab5b998  embedded object  (0x20d04241 <undefined>)
0xffff7ab5b9a0  embedded object  (0x20d04241 <undefined>)
0xffff7ab5b9a8  embedded object  (0x20d04241 <undefined>)
0xffff7ab5b9b0  embedded object  (0x20d04241 <undefined>)
0xffff7ab5b9b8  embedded object  (0x20d04241 <undefined>)
0xffff7ab5b9c0  embedded object  (0x20d04241 <undefined>)
0xffff7ab5b9f0  code target (STUB)  (0xffff7ab06820)
0xffff7ab5ba14  code target (STUB)  (0xffff7ab06260)
0xffff7ab5ba20  code target (STUB)  (0xffff7ab068e0)
0xffff7ab5ba34  constant pool (size 148)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7ab5cee0     0  ldur x0, [x1, #7]
0xffff7ab5cee4     4  ldur x0, [x0, #143]
0xffff7ab5cee8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 327680
name = CallICStub(args(0), NOT_NULL_OR_UNDEFINED, 
compiler = unknown
Instructions (size = 488)
0xffff7ab5cf60     0  add x4, x2, x3, asr #29
0xffff7ab5cf64     4  ldur x4, [x4, #15]
0xffff7ab5cf68     8  ldur x5, [x4, #7]
0xffff7ab5cf6c    12  cmp x5, x1
0xffff7ab5cf70    16  b.ne #+0x2c (addr 0xffff7ab5cf9c)
0xffff7ab5cf74    20  tbz w1, #0, #+0x28 (addr 0xffff7ab5cf9c)
0xffff7ab5cf78    24  add x2, x2, x3, asr #29
0xffff7ab5cf7c    28  add x2, x2, #0x18 (24)
0xffff7ab5cf80    32  ldur x3, [x2, #-1]
0xffff7ab5cf84    36  movz x16, #0x200000000
0xffff7ab5cf88    40  add x3, x3, x16
0xffff7ab5cf8c    44  stur x3, [x2, #-1]
0xffff7ab5cf90    48  movz x0, #0x0
0xffff7ab5cf94    52  ldr x16, pc+372 (addr 0x0000ffff7ab5d108)    ;; code: BUILTIN
0xffff7ab5cf98    56  br x16
0xffff7ab5cf9c    60  ldr x16, [x26, #2400]
0xffff7ab5cfa0    64  cmp x4, x16
0xffff7ab5cfa4    68  b.eq #+0x78 (addr 0xffff7ab5d01c)
0xffff7ab5cfa8    72  ldur x5, [x4, #-1]
0xffff7ab5cfac    76  ldr x16, [x26, #2736]
0xffff7ab5cfb0    80  cmp x5, x16
0xffff7ab5cfb4    84  b.ne #+0x40 (addr 0xffff7ab5cff4)
0xffff7ab5cfb8    88  ldur x5, [cp, #39]
0xffff7ab5cfbc    92  ldur x5, [x5, #95]
0xffff7ab5cfc0    96  cmp x1, x5
0xffff7ab5cfc4   100  b.ne #+0xec (addr 0xffff7ab5d0b0)
0xffff7ab5cfc8   104  movz x0, #0x0
0xffff7ab5cfcc   108  add x2, x2, x3, asr #29
0xffff7ab5cfd0   112  add x2, x2, #0x18 (24)
0xffff7ab5cfd4   116  ldur x3, [x2, #-1]
0xffff7ab5cfd8   120  movz x16, #0x200000000
0xffff7ab5cfdc   124  add x3, x3, x16
0xffff7ab5cfe0   128  stur x3, [x2, #-1]
0xffff7ab5cfe4   132  mov x2, x4
0xffff7ab5cfe8   136  mov x3, x1
0xffff7ab5cfec   140  ldr x16, pc+292 (addr 0x0000ffff7ab5d110)    ;; code: STUB, ArrayConstructorStub, minor: 1
0xffff7ab5cff0   144  br x16
0xffff7ab5cff4   148  ldr x16, [x26, #2568]
0xffff7ab5cff8   152  cmp x4, x16
0xffff7ab5cffc   156  b.eq #+0xb4 (addr 0xffff7ab5d0b0)
0xffff7ab5d000   160  ldur x5, [x4, #-1]
0xffff7ab5d004   164  ldrb w5, [x5, #11]
0xffff7ab5d008   168  cmp x5, #0xc9 (201)
0xffff7ab5d00c   172  b.ne #+0xa4 (addr 0xffff7ab5d0b0)
0xffff7ab5d010   176  add x4, x2, x3, asr #29
0xffff7ab5d014   180  ldr x5, [x26, #2400]
0xffff7ab5d018   184  stur x5, [x4, #15]
0xffff7ab5d01c   188  movz x0, #0x0
0xffff7ab5d020   192  ldr x16, pc+248 (addr 0x0000ffff7ab5d118)    ;; code: BUILTIN
0xffff7ab5d024   196  br x16
0xffff7ab5d028   200  tbz w1, #0, #+0x88 (addr 0xffff7ab5d0b0)
0xffff7ab5d02c   204  ldur x5, [x1, #-1]
0xffff7ab5d030   208  ldrb w5, [x5, #11]
0xffff7ab5d034   212  cmp x5, #0xc9 (201)
0xffff7ab5d038   216  b.ne #+0x78 (addr 0xffff7ab5d0b0)
0xffff7ab5d03c   220  ldur x5, [cp, #39]
0xffff7ab5d040   224  ldur x5, [x5, #95]
0xffff7ab5d044   228  cmp x1, x5
0xffff7ab5d048   232  b.eq #+0x68 (addr 0xffff7ab5d0b0)
0xffff7ab5d04c   236  ldur x4, [x1, #39]
0xffff7ab5d050   240  ldur x4, [x4, #39]
0xffff7ab5d054   244  ldur x5, [cp, #39]
0xffff7ab5d058   248  cmp x4, x5
0xffff7ab5d05c   252  b.ne #+0x54 (addr 0xffff7ab5d0b0)
0xffff7ab5d060   256  movz x5, #0x200000000
0xffff7ab5d064   260  adds x4, x2, x3, asr #29
0xffff7ab5d068   264  stur x5, [x4, #23]
0xffff7ab5d06c   268  movz x16, #0xc00000000
0xffff7ab5d070   272  sub csp, jssp, #0x10 (16)
0xffff7ab5d074   276  stp fp, lr, [jssp, #-16]!
0xffff7ab5d078   280  sub csp, jssp, #0x10 (16)
0xffff7ab5d07c   284  str x16, [jssp, #-8]!
0xffff7ab5d080   288  ldr x17, pc+160 (addr 0x0000ffff7ab5d120)    ;; object: 0xffff7ab5cf01 <Code: CALL_IC>
0xffff7ab5d084   292  sub csp, jssp, #0x10 (16)
0xffff7ab5d088   296  str x17, [jssp, #-8]!
0xffff7ab5d08c   300  add fp, jssp, #0x10 (16)
0xffff7ab5d090   304  sub csp, jssp, #0x8 (8)
0xffff7ab5d094   308  str x1, [jssp, #-8]!
0xffff7ab5d098   312  ldr x16, pc+144 (addr 0x0000ffff7ab5d128)    ;; code: STUB, CreateWeakCellStub, minor: 0
0xffff7ab5d09c   316  blr x16
0xffff7ab5d0a0   320  ldr x1, [jssp], #8
0xffff7ab5d0a4   324  mov jssp, fp
0xffff7ab5d0a8   328  ldp fp, lr, [jssp], #16
0xffff7ab5d0ac   332  b #-0x11c (addr 0xffff7ab5cf90)
0xffff7ab5d0b0   336  movz x16, #0xc00000000
0xffff7ab5d0b4   340  sub csp, jssp, #0x10 (16)
0xffff7ab5d0b8   344  stp fp, lr, [jssp, #-16]!
0xffff7ab5d0bc   348  sub csp, jssp, #0x10 (16)
0xffff7ab5d0c0   352  str x16, [jssp, #-8]!
0xffff7ab5d0c4   356  ldr x17, pc+108 (addr 0x0000ffff7ab5d130)    ;; object: 0xffff7ab5cf01 <Code: CALL_IC>
0xffff7ab5d0c8   360  sub csp, jssp, #0x10 (16)
0xffff7ab5d0cc   364  str x17, [jssp, #-8]!
0xffff7ab5d0d0   368  add fp, jssp, #0x10 (16)
0xffff7ab5d0d4   372  sub csp, jssp, #0x18 (24)
0xffff7ab5d0d8   376  stp x3, x2, [jssp, #-24]!
0xffff7ab5d0dc   380  str x1, [jssp, #16]
0xffff7ab5d0e0   384  movz x0, #0x3
0xffff7ab5d0e4   388  ldr x1, pc+84 (addr 0x0000ffff7ab5d138)    ;; external reference (Runtime::CallIC_Miss)
0xffff7ab5d0e8   392  ldr x16, pc+88 (addr 0x0000ffff7ab5d140)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab5d0ec   396  blr x16
0xffff7ab5d0f0   400  mov x1, x0
0xffff7ab5d0f4   404  mov jssp, fp
0xffff7ab5d0f8   408  ldp fp, lr, [jssp], #16
0xffff7ab5d0fc   412  b #-0xe0 (addr 0xffff7ab5d01c)
0xffff7ab5d100   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7ab5d104   420  d63f03e0       constant
0xffff7ab5d108   424  7ab1e600       constant
0xffff7ab5d10c   428  0000ffff       constant
0xffff7ab5d110   432  7ab3d580       constant
0xffff7ab5d114   436  0000ffff       constant
0xffff7ab5d118   440  7ab1f6c0       constant
0xffff7ab5d11c   444  0000ffff       constant
0xffff7ab5d120   448  7ab5cf01       constant
0xffff7ab5d124   452  0000ffff       constant
0xffff7ab5d128   456  7ab0ddc0       constant
0xffff7ab5d12c   460  0000ffff       constant
0xffff7ab5d130   464  7ab5cf01       constant
0xffff7ab5d134   468  0000ffff       constant
0xffff7ab5d138   472  00c86928       constant
0xffff7ab5d13c   476  00000000       constant
0xffff7ab5d140   480  7ab06060       constant
0xffff7ab5d144   484  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab5cf94  code target (BUILTIN)  (0xffff7ab1e600)
0xffff7ab5cfec  code target (STUB)  (0xffff7ab3d580)
0xffff7ab5d020  code target (BUILTIN)  (0xffff7ab1f6c0)
0xffff7ab5d080  embedded object  (0xffff7ab5cf01 <Code: CALL_IC>)
0xffff7ab5d098  code target (STUB)  (0xffff7ab0ddc0)
0xffff7ab5d0c4  embedded object  (0xffff7ab5cf01 <Code: CALL_IC>)
0xffff7ab5d0e4  external reference (Runtime::CallIC_Miss)  (0xc86928)
0xffff7ab5d0e8  code target (STUB)  (0xffff7ab06060)
0xffff7ab5d100  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 327680
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0xffff7ab5d1c0     0  ldur x2, [fp, #-16]
0xffff7ab5d1c4     4  ldur x2, [x2, #31]
0xffff7ab5d1c8     8  ldur x2, [x2, #87]
0xffff7ab5d1cc    12  ldr x16, pc+20 (addr 0x0000ffff7ab5d1e0)    ;; code: CALL_IC, GENERIC
0xffff7ab5d1d0    16  br x16
0xffff7ab5d1d4    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab5d1d8    24  d63f03e0       constant
0xffff7ab5d1dc    28  d503201f       constant
0xffff7ab5d1e0    32  7ab5cf60       constant
0xffff7ab5d1e4    36  0000ffff       constant


RelocInfo (size = 7)
0xffff7ab5d1cc  code target (CALL_IC)  (0xffff7ab5cf60)
0xffff7ab5d1d4  constant pool (size 20)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 301)
0xffff7ab5e860     0  movz x2, #0xe2c0
0xffff7ab5e864     4  movk x2, #0x9ab, lsl #16
0xffff7ab5e868     8  ldp x3, x0, [x2]
0xffff7ab5e86c    12  adds x16, x3, #0x48 (72)
0xffff7ab5e870    16  ccmp x16, x0, #nzCv, lo
0xffff7ab5e874    20  b.hi #+0x54 (addr 0xffff7ab5e8c8)
0xffff7ab5e878    24  str x16, [x2]
0xffff7ab5e87c    28  orr x3, x3, #0x1
0xffff7ab5e880    32  ldr x0, pc+184 (addr 0x0000ffff7ab5e938)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab5e884    36  stur x0, [x3, #-1]
0xffff7ab5e888    40  movz x0, #0x700000000
0xffff7ab5e88c    44  stur x0, [x3, #7]
0xffff7ab5e890    48  stur x1, [x3, #15]
0xffff7ab5e894    52  stur cp, [x3, #23]
0xffff7ab5e898    56  ldr x0, pc+168 (addr 0x0000ffff7ab5e940)    ;; object: 0x20d04519 <the hole>
0xffff7ab5e89c    60  stur x0, [x3, #31]
0xffff7ab5e8a0    64  ldur x0, [cp, #39]
0xffff7ab5e8a4    68  stur x0, [x3, #39]
0xffff7ab5e8a8    72  ldr x0, pc+160 (addr 0x0000ffff7ab5e948)    ;; object: 0x20d04241 <undefined>
0xffff7ab5e8ac    76  stur x0, [x3, #47]
0xffff7ab5e8b0    80  ldr x0, pc+160 (addr 0x0000ffff7ab5e950)    ;; object: 0x20d04241 <undefined>
0xffff7ab5e8b4    84  stur x0, [x3, #55]
0xffff7ab5e8b8    88  ldr x0, pc+160 (addr 0x0000ffff7ab5e958)    ;; object: 0x20d04241 <undefined>
0xffff7ab5e8bc    92  stur x0, [x3, #63]
0xffff7ab5e8c0    96  mov x0, x3
0xffff7ab5e8c4   100  ret
0xffff7ab5e8c8   104  sub csp, jssp, #0x10 (16)
0xffff7ab5e8cc   108  stp fp, lr, [jssp, #-16]!
0xffff7ab5e8d0   112  movz fp, #0xa00000000
0xffff7ab5e8d4   116  sub csp, jssp, #0x8 (8)
0xffff7ab5e8d8   120  str fp, [jssp, #-8]!
0xffff7ab5e8dc   124  add fp, jssp, #0x8 (8)
0xffff7ab5e8e0   128  movz x3, #0x0
0xffff7ab5e8e4   132  mov x16, lr
0xffff7ab5e8e8   136  ldr x17, pc+120 (addr 0x0000ffff7ab5e960)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab5e8ec   140  blr x17
0xffff7ab5e8f0   144  movz x0, #0x4800000000
0xffff7ab5e8f4   148  movz x10, #0x0
0xffff7ab5e8f8   152  sub csp, jssp, #0x10 (16)
0xffff7ab5e8fc   156  stp x10, x0, [jssp, #-16]!
0xffff7ab5e900   160  movz x0, #0x2
0xffff7ab5e904   164  movz x1, #0x5b88
0xffff7ab5e908   168  movk x1, #0xe2, lsl #16
0xffff7ab5e90c   172  ldr x16, pc+92 (addr 0x0000ffff7ab5e968)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab5e910   176  blr x16
0xffff7ab5e914   180  str x0, [jssp, #24]
0xffff7ab5e918   184  ldr x16, pc+88 (addr 0x0000ffff7ab5e970)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab5e91c   188  blr x16
0xffff7ab5e920   192  ldr lr, [jssp, #16]
0xffff7ab5e924   196  ldp xzr, fp, [jssp], #24
0xffff7ab5e928   200  b #-0xa8 (addr 0xffff7ab5e880)
0xffff7ab5e92c   204  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0xffff7ab5e930   208  d63f03e0       constant
0xffff7ab5e934   212  d503201f       constant
0xffff7ab5e938   216  4ec06149       constant
0xffff7ab5e93c   220  00000000       constant
0xffff7ab5e940   224  20d04519       constant
0xffff7ab5e944   228  00000000       constant
0xffff7ab5e948   232  20d04241       constant
0xffff7ab5e94c   236  00000000       constant
0xffff7ab5e950   240  20d04241       constant
0xffff7ab5e954   244  00000000       constant
0xffff7ab5e958   248  20d04241       constant
0xffff7ab5e95c   252  00000000       constant
0xffff7ab5e960   256  7ab06820       constant
0xffff7ab5e964   260  0000ffff       constant
0xffff7ab5e968   264  7ab06260       constant
0xffff7ab5e96c   268  0000ffff       constant
0xffff7ab5e970   272  7ab068e0       constant
0xffff7ab5e974   276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab5e914   180  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 14)
0xffff7ab5e880  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab5e898  embedded object  (0x20d04519 <the hole>)
0xffff7ab5e8a8  embedded object  (0x20d04241 <undefined>)
0xffff7ab5e8b0  embedded object  (0x20d04241 <undefined>)
0xffff7ab5e8b8  embedded object  (0x20d04241 <undefined>)
0xffff7ab5e8e8  code target (STUB)  (0xffff7ab06820)
0xffff7ab5e90c  code target (STUB)  (0xffff7ab06260)
0xffff7ab5e918  code target (STUB)  (0xffff7ab068e0)
0xffff7ab5e92c  constant pool (size 76)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 365)
0xffff7ab609e0     0  movz x2, #0xe2c0
0xffff7ab609e4     4  movk x2, #0x9ab, lsl #16
0xffff7ab609e8     8  ldp x3, x0, [x2]
0xffff7ab609ec    12  adds x16, x3, #0x68 (104)
0xffff7ab609f0    16  ccmp x16, x0, #nzCv, lo
0xffff7ab609f4    20  b.hi #+0x74 (addr 0xffff7ab60a68)
0xffff7ab609f8    24  str x16, [x2]
0xffff7ab609fc    28  orr x3, x3, #0x1
0xffff7ab60a00    32  ldr x0, pc+216 (addr 0x0000ffff7ab60ad8)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab60a04    36  stur x0, [x3, #-1]
0xffff7ab60a08    40  movz x0, #0xb00000000
0xffff7ab60a0c    44  stur x0, [x3, #7]
0xffff7ab60a10    48  stur x1, [x3, #15]
0xffff7ab60a14    52  stur cp, [x3, #23]
0xffff7ab60a18    56  ldr x0, pc+200 (addr 0x0000ffff7ab60ae0)    ;; object: 0x20d04519 <the hole>
0xffff7ab60a1c    60  stur x0, [x3, #31]
0xffff7ab60a20    64  ldur x0, [cp, #39]
0xffff7ab60a24    68  stur x0, [x3, #39]
0xffff7ab60a28    72  ldr x0, pc+192 (addr 0x0000ffff7ab60ae8)    ;; object: 0x20d04241 <undefined>
0xffff7ab60a2c    76  stur x0, [x3, #47]
0xffff7ab60a30    80  ldr x0, pc+192 (addr 0x0000ffff7ab60af0)    ;; object: 0x20d04241 <undefined>
0xffff7ab60a34    84  stur x0, [x3, #55]
0xffff7ab60a38    88  ldr x0, pc+192 (addr 0x0000ffff7ab60af8)    ;; object: 0x20d04241 <undefined>
0xffff7ab60a3c    92  stur x0, [x3, #63]
0xffff7ab60a40    96  ldr x0, pc+192 (addr 0x0000ffff7ab60b00)    ;; object: 0x20d04241 <undefined>
0xffff7ab60a44   100  stur x0, [x3, #71]
0xffff7ab60a48   104  ldr x0, pc+192 (addr 0x0000ffff7ab60b08)    ;; object: 0x20d04241 <undefined>
0xffff7ab60a4c   108  stur x0, [x3, #79]
0xffff7ab60a50   112  ldr x0, pc+192 (addr 0x0000ffff7ab60b10)    ;; object: 0x20d04241 <undefined>
0xffff7ab60a54   116  stur x0, [x3, #87]
0xffff7ab60a58   120  ldr x0, pc+192 (addr 0x0000ffff7ab60b18)    ;; object: 0x20d04241 <undefined>
0xffff7ab60a5c   124  stur x0, [x3, #95]
0xffff7ab60a60   128  mov x0, x3
0xffff7ab60a64   132  ret
0xffff7ab60a68   136  sub csp, jssp, #0x10 (16)
0xffff7ab60a6c   140  stp fp, lr, [jssp, #-16]!
0xffff7ab60a70   144  movz fp, #0xa00000000
0xffff7ab60a74   148  sub csp, jssp, #0x8 (8)
0xffff7ab60a78   152  str fp, [jssp, #-8]!
0xffff7ab60a7c   156  add fp, jssp, #0x8 (8)
0xffff7ab60a80   160  movz x3, #0x0
0xffff7ab60a84   164  mov x16, lr
0xffff7ab60a88   168  ldr x17, pc+152 (addr 0x0000ffff7ab60b20)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab60a8c   172  blr x17
0xffff7ab60a90   176  movz x0, #0x6800000000
0xffff7ab60a94   180  movz x10, #0x0
0xffff7ab60a98   184  sub csp, jssp, #0x10 (16)
0xffff7ab60a9c   188  stp x10, x0, [jssp, #-16]!
0xffff7ab60aa0   192  movz x0, #0x2
0xffff7ab60aa4   196  movz x1, #0x5b88
0xffff7ab60aa8   200  movk x1, #0xe2, lsl #16
0xffff7ab60aac   204  ldr x16, pc+124 (addr 0x0000ffff7ab60b28)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab60ab0   208  blr x16
0xffff7ab60ab4   212  str x0, [jssp, #24]
0xffff7ab60ab8   216  ldr x16, pc+120 (addr 0x0000ffff7ab60b30)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab60abc   220  blr x16
0xffff7ab60ac0   224  ldr lr, [jssp, #16]
0xffff7ab60ac4   228  ldp xzr, fp, [jssp], #24
0xffff7ab60ac8   232  b #-0xc8 (addr 0xffff7ab60a00)
0xffff7ab60acc   236  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0xffff7ab60ad0   240  d63f03e0       constant
0xffff7ab60ad4   244  d503201f       constant
0xffff7ab60ad8   248  4ec06149       constant
0xffff7ab60adc   252  00000000       constant
0xffff7ab60ae0   256  20d04519       constant
0xffff7ab60ae4   260  00000000       constant
0xffff7ab60ae8   264  20d04241       constant
0xffff7ab60aec   268  00000000       constant
0xffff7ab60af0   272  20d04241       constant
0xffff7ab60af4   276  00000000       constant
0xffff7ab60af8   280  20d04241       constant
0xffff7ab60afc   284  00000000       constant
0xffff7ab60b00   288  20d04241       constant
0xffff7ab60b04   292  00000000       constant
0xffff7ab60b08   296  20d04241       constant
0xffff7ab60b0c   300  00000000       constant
0xffff7ab60b10   304  20d04241       constant
0xffff7ab60b14   308  00000000       constant
0xffff7ab60b18   312  20d04241       constant
0xffff7ab60b1c   316  00000000       constant
0xffff7ab60b20   320  7ab06820       constant
0xffff7ab60b24   324  0000ffff       constant
0xffff7ab60b28   328  7ab06260       constant
0xffff7ab60b2c   332  0000ffff       constant
0xffff7ab60b30   336  7ab068e0       constant
0xffff7ab60b34   340  0000ffff       constant


Safepoints (size = 21)
0xffff7ab60ab4   212  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 18)
0xffff7ab60a00  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab60a18  embedded object  (0x20d04519 <the hole>)
0xffff7ab60a28  embedded object  (0x20d04241 <undefined>)
0xffff7ab60a30  embedded object  (0x20d04241 <undefined>)
0xffff7ab60a38  embedded object  (0x20d04241 <undefined>)
0xffff7ab60a40  embedded object  (0x20d04241 <undefined>)
0xffff7ab60a48  embedded object  (0x20d04241 <undefined>)
0xffff7ab60a50  embedded object  (0x20d04241 <undefined>)
0xffff7ab60a58  embedded object  (0x20d04241 <undefined>)
0xffff7ab60a88  code target (STUB)  (0xffff7ab06820)
0xffff7ab60aac  code target (STUB)  (0xffff7ab06260)
0xffff7ab60ab8  code target (STUB)  (0xffff7ab068e0)
0xffff7ab60acc  constant pool (size 108)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab61b20     0  ldur x0, [x1, #-1]
0xffff7ab61b24     4  ldur x0, [x0, #47]
0xffff7ab61b28     8  movz x16, #0x5ff
0xffff7ab61b2c    12  ldr x0, [x0, x16]
0xffff7ab61b30    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab61ba0     0  ldur x0, [x1, #-1]
0xffff7ab61ba4     4  ldur x0, [x0, #47]
0xffff7ab61ba8     8  movz x16, #0x5e7
0xffff7ab61bac    12  ldr x0, [x0, x16]
0xffff7ab61bb0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 821)
0xffff7ab620e0     0  movz x2, #0xe2c0
0xffff7ab620e4     4  movk x2, #0x9ab, lsl #16
0xffff7ab620e8     8  ldp x3, x0, [x2]
0xffff7ab620ec    12  adds x16, x3, #0x140 (320)
0xffff7ab620f0    16  ccmp x16, x0, #nzCv, lo
0xffff7ab620f4    20  b.hi #+0x168 (addr 0xffff7ab6225c)
0xffff7ab620f8    24  str x16, [x2]
0xffff7ab620fc    28  orr x3, x3, #0x1
0xffff7ab62100    32  ldr x0, pc+456 (addr 0x0000ffff7ab622c8)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab62104    36  stur x0, [x3, #-1]
0xffff7ab62108    40  movz x0, #0x2600000000
0xffff7ab6210c    44  stur x0, [x3, #7]
0xffff7ab62110    48  stur x1, [x3, #15]
0xffff7ab62114    52  stur cp, [x3, #23]
0xffff7ab62118    56  ldr x0, pc+440 (addr 0x0000ffff7ab622d0)    ;; object: 0x20d04519 <the hole>
0xffff7ab6211c    60  stur x0, [x3, #31]
0xffff7ab62120    64  ldur x0, [cp, #39]
0xffff7ab62124    68  stur x0, [x3, #39]
0xffff7ab62128    72  ldr x0, pc+432 (addr 0x0000ffff7ab622d8)    ;; object: 0x20d04241 <undefined>
0xffff7ab6212c    76  stur x0, [x3, #47]
0xffff7ab62130    80  ldr x0, pc+432 (addr 0x0000ffff7ab622e0)    ;; object: 0x20d04241 <undefined>
0xffff7ab62134    84  stur x0, [x3, #55]
0xffff7ab62138    88  ldr x0, pc+432 (addr 0x0000ffff7ab622e8)    ;; object: 0x20d04241 <undefined>
0xffff7ab6213c    92  stur x0, [x3, #63]
0xffff7ab62140    96  ldr x0, pc+432 (addr 0x0000ffff7ab622f0)    ;; object: 0x20d04241 <undefined>
0xffff7ab62144   100  stur x0, [x3, #71]
0xffff7ab62148   104  ldr x0, pc+432 (addr 0x0000ffff7ab622f8)    ;; object: 0x20d04241 <undefined>
0xffff7ab6214c   108  stur x0, [x3, #79]
0xffff7ab62150   112  ldr x0, pc+432 (addr 0x0000ffff7ab62300)    ;; object: 0x20d04241 <undefined>
0xffff7ab62154   116  stur x0, [x3, #87]
0xffff7ab62158   120  ldr x0, pc+432 (addr 0x0000ffff7ab62308)    ;; object: 0x20d04241 <undefined>
0xffff7ab6215c   124  stur x0, [x3, #95]
0xffff7ab62160   128  ldr x0, pc+432 (addr 0x0000ffff7ab62310)    ;; object: 0x20d04241 <undefined>
0xffff7ab62164   132  stur x0, [x3, #103]
0xffff7ab62168   136  ldr x0, pc+432 (addr 0x0000ffff7ab62318)    ;; object: 0x20d04241 <undefined>
0xffff7ab6216c   140  stur x0, [x3, #111]
0xffff7ab62170   144  ldr x0, pc+432 (addr 0x0000ffff7ab62320)    ;; object: 0x20d04241 <undefined>
0xffff7ab62174   148  stur x0, [x3, #119]
0xffff7ab62178   152  ldr x0, pc+432 (addr 0x0000ffff7ab62328)    ;; object: 0x20d04241 <undefined>
0xffff7ab6217c   156  stur x0, [x3, #127]
0xffff7ab62180   160  ldr x0, pc+432 (addr 0x0000ffff7ab62330)    ;; object: 0x20d04241 <undefined>
0xffff7ab62184   164  stur x0, [x3, #135]
0xffff7ab62188   168  ldr x0, pc+432 (addr 0x0000ffff7ab62338)    ;; object: 0x20d04241 <undefined>
0xffff7ab6218c   172  stur x0, [x3, #143]
0xffff7ab62190   176  ldr x0, pc+432 (addr 0x0000ffff7ab62340)    ;; object: 0x20d04241 <undefined>
0xffff7ab62194   180  stur x0, [x3, #151]
0xffff7ab62198   184  ldr x0, pc+432 (addr 0x0000ffff7ab62348)    ;; object: 0x20d04241 <undefined>
0xffff7ab6219c   188  stur x0, [x3, #159]
0xffff7ab621a0   192  ldr x0, pc+432 (addr 0x0000ffff7ab62350)    ;; object: 0x20d04241 <undefined>
0xffff7ab621a4   196  stur x0, [x3, #167]
0xffff7ab621a8   200  ldr x0, pc+432 (addr 0x0000ffff7ab62358)    ;; object: 0x20d04241 <undefined>
0xffff7ab621ac   204  stur x0, [x3, #175]
0xffff7ab621b0   208  ldr x0, pc+432 (addr 0x0000ffff7ab62360)    ;; object: 0x20d04241 <undefined>
0xffff7ab621b4   212  stur x0, [x3, #183]
0xffff7ab621b8   216  ldr x0, pc+432 (addr 0x0000ffff7ab62368)    ;; object: 0x20d04241 <undefined>
0xffff7ab621bc   220  stur x0, [x3, #191]
0xffff7ab621c0   224  ldr x0, pc+432 (addr 0x0000ffff7ab62370)    ;; object: 0x20d04241 <undefined>
0xffff7ab621c4   228  stur x0, [x3, #199]
0xffff7ab621c8   232  ldr x0, pc+432 (addr 0x0000ffff7ab62378)    ;; object: 0x20d04241 <undefined>
0xffff7ab621cc   236  stur x0, [x3, #207]
0xffff7ab621d0   240  ldr x0, pc+432 (addr 0x0000ffff7ab62380)    ;; object: 0x20d04241 <undefined>
0xffff7ab621d4   244  stur x0, [x3, #215]
0xffff7ab621d8   248  ldr x0, pc+432 (addr 0x0000ffff7ab62388)    ;; object: 0x20d04241 <undefined>
0xffff7ab621dc   252  stur x0, [x3, #223]
0xffff7ab621e0   256  ldr x0, pc+432 (addr 0x0000ffff7ab62390)    ;; object: 0x20d04241 <undefined>
0xffff7ab621e4   260  stur x0, [x3, #231]
0xffff7ab621e8   264  ldr x0, pc+432 (addr 0x0000ffff7ab62398)    ;; object: 0x20d04241 <undefined>
0xffff7ab621ec   268  stur x0, [x3, #239]
0xffff7ab621f0   272  ldr x0, pc+432 (addr 0x0000ffff7ab623a0)    ;; object: 0x20d04241 <undefined>
0xffff7ab621f4   276  stur x0, [x3, #247]
0xffff7ab621f8   280  ldr x0, pc+432 (addr 0x0000ffff7ab623a8)    ;; object: 0x20d04241 <undefined>
0xffff7ab621fc   284  stur x0, [x3, #255]
0xffff7ab62200   288  ldr x0, pc+432 (addr 0x0000ffff7ab623b0)    ;; object: 0x20d04241 <undefined>
0xffff7ab62204   292  movz x16, #0x107
0xffff7ab62208   296  str x0, [x3, x16]
0xffff7ab6220c   300  ldr x0, pc+428 (addr 0x0000ffff7ab623b8)    ;; object: 0x20d04241 <undefined>
0xffff7ab62210   304  movz x16, #0x10f
0xffff7ab62214   308  str x0, [x3, x16]
0xffff7ab62218   312  ldr x0, pc+424 (addr 0x0000ffff7ab623c0)    ;; object: 0x20d04241 <undefined>
0xffff7ab6221c   316  movz x16, #0x117
0xffff7ab62220   320  str x0, [x3, x16]
0xffff7ab62224   324  ldr x0, pc+420 (addr 0x0000ffff7ab623c8)    ;; object: 0x20d04241 <undefined>
0xffff7ab62228   328  movz x16, #0x11f
0xffff7ab6222c   332  str x0, [x3, x16]
0xffff7ab62230   336  ldr x0, pc+416 (addr 0x0000ffff7ab623d0)    ;; object: 0x20d04241 <undefined>
0xffff7ab62234   340  movz x16, #0x127
0xffff7ab62238   344  str x0, [x3, x16]
0xffff7ab6223c   348  ldr x0, pc+412 (addr 0x0000ffff7ab623d8)    ;; object: 0x20d04241 <undefined>
0xffff7ab62240   352  movz x16, #0x12f
0xffff7ab62244   356  str x0, [x3, x16]
0xffff7ab62248   360  ldr x0, pc+408 (addr 0x0000ffff7ab623e0)    ;; object: 0x20d04241 <undefined>
0xffff7ab6224c   364  movz x16, #0x137
0xffff7ab62250   368  str x0, [x3, x16]
0xffff7ab62254   372  mov x0, x3
0xffff7ab62258   376  ret
0xffff7ab6225c   380  sub csp, jssp, #0x10 (16)
0xffff7ab62260   384  stp fp, lr, [jssp, #-16]!
0xffff7ab62264   388  movz fp, #0xa00000000
0xffff7ab62268   392  sub csp, jssp, #0x8 (8)
0xffff7ab6226c   396  str fp, [jssp, #-8]!
0xffff7ab62270   400  add fp, jssp, #0x8 (8)
0xffff7ab62274   404  movz x3, #0x0
0xffff7ab62278   408  mov x16, lr
0xffff7ab6227c   412  ldr x17, pc+364 (addr 0x0000ffff7ab623e8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab62280   416  blr x17
0xffff7ab62284   420  movz x0, #0x14000000000
0xffff7ab62288   424  movz x10, #0x0
0xffff7ab6228c   428  sub csp, jssp, #0x10 (16)
0xffff7ab62290   432  stp x10, x0, [jssp, #-16]!
0xffff7ab62294   436  movz x0, #0x2
0xffff7ab62298   440  movz x1, #0x5b88
0xffff7ab6229c   444  movk x1, #0xe2, lsl #16
0xffff7ab622a0   448  ldr x16, pc+336 (addr 0x0000ffff7ab623f0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab622a4   452  blr x16
0xffff7ab622a8   456  str x0, [jssp, #24]
0xffff7ab622ac   460  ldr x16, pc+332 (addr 0x0000ffff7ab623f8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab622b0   464  blr x16
0xffff7ab622b4   468  ldr lr, [jssp, #16]
0xffff7ab622b8   472  ldp xzr, fp, [jssp], #24
0xffff7ab622bc   476  b #-0x1bc (addr 0xffff7ab62100)
0xffff7ab622c0   480  580009ff       constant pool begin (num_const = 79)    ;; constant pool
0xffff7ab622c4   484  d63f03e0       constant
0xffff7ab622c8   488  4ec06149       constant
0xffff7ab622cc   492  00000000       constant
0xffff7ab622d0   496  20d04519       constant
0xffff7ab622d4   500  00000000       constant
0xffff7ab622d8   504  20d04241       constant
0xffff7ab622dc   508  00000000       constant
0xffff7ab622e0   512  20d04241       constant
0xffff7ab622e4   516  00000000       constant
0xffff7ab622e8   520  20d04241       constant
0xffff7ab622ec   524  00000000       constant
0xffff7ab622f0   528  20d04241       constant
0xffff7ab622f4   532  00000000       constant
0xffff7ab622f8   536  20d04241       constant
0xffff7ab622fc   540  00000000       constant
0xffff7ab62300   544  20d04241       constant
0xffff7ab62304   548  00000000       constant
0xffff7ab62308   552  20d04241       constant
0xffff7ab6230c   556  00000000       constant
0xffff7ab62310   560  20d04241       constant
0xffff7ab62314   564  00000000       constant
0xffff7ab62318   568  20d04241       constant
0xffff7ab6231c   572  00000000       constant
0xffff7ab62320   576  20d04241       constant
0xffff7ab62324   580  00000000       constant
0xffff7ab62328   584  20d04241       constant
0xffff7ab6232c   588  00000000       constant
0xffff7ab62330   592  20d04241       constant
0xffff7ab62334   596  00000000       constant
0xffff7ab62338   600  20d04241       constant
0xffff7ab6233c   604  00000000       constant
0xffff7ab62340   608  20d04241       constant
0xffff7ab62344   612  00000000       constant
0xffff7ab62348   616  20d04241       constant
0xffff7ab6234c   620  00000000       constant
0xffff7ab62350   624  20d04241       constant
0xffff7ab62354   628  00000000       constant
0xffff7ab62358   632  20d04241       constant
0xffff7ab6235c   636  00000000       constant
0xffff7ab62360   640  20d04241       constant
0xffff7ab62364   644  00000000       constant
0xffff7ab62368   648  20d04241       constant
0xffff7ab6236c   652  00000000       constant
0xffff7ab62370   656  20d04241       constant
0xffff7ab62374   660  00000000       constant
0xffff7ab62378   664  20d04241       constant
0xffff7ab6237c   668  00000000       constant
0xffff7ab62380   672  20d04241       constant
0xffff7ab62384   676  00000000       constant
0xffff7ab62388   680  20d04241       constant
0xffff7ab6238c   684  00000000       constant
0xffff7ab62390   688  20d04241       constant
0xffff7ab62394   692  00000000       constant
0xffff7ab62398   696  20d04241       constant
0xffff7ab6239c   700  00000000       constant
0xffff7ab623a0   704  20d04241       constant
0xffff7ab623a4   708  00000000       constant
0xffff7ab623a8   712  20d04241       constant
0xffff7ab623ac   716  00000000       constant
0xffff7ab623b0   720  20d04241       constant
0xffff7ab623b4   724  00000000       constant
0xffff7ab623b8   728  20d04241       constant
0xffff7ab623bc   732  00000000       constant
0xffff7ab623c0   736  20d04241       constant
0xffff7ab623c4   740  00000000       constant
0xffff7ab623c8   744  20d04241       constant
0xffff7ab623cc   748  00000000       constant
0xffff7ab623d0   752  20d04241       constant
0xffff7ab623d4   756  00000000       constant
0xffff7ab623d8   760  20d04241       constant
0xffff7ab623dc   764  00000000       constant
0xffff7ab623e0   768  20d04241       constant
0xffff7ab623e4   772  00000000       constant
0xffff7ab623e8   776  7ab06820       constant
0xffff7ab623ec   780  0000ffff       constant
0xffff7ab623f0   784  7ab06260       constant
0xffff7ab623f4   788  0000ffff       constant
0xffff7ab623f8   792  7ab068e0       constant
0xffff7ab623fc   796  0000ffff       constant


Safepoints (size = 21)
0xffff7ab622a8   456  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 45)
0xffff7ab62100  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab62118  embedded object  (0x20d04519 <the hole>)
0xffff7ab62128  embedded object  (0x20d04241 <undefined>)
0xffff7ab62130  embedded object  (0x20d04241 <undefined>)
0xffff7ab62138  embedded object  (0x20d04241 <undefined>)
0xffff7ab62140  embedded object  (0x20d04241 <undefined>)
0xffff7ab62148  embedded object  (0x20d04241 <undefined>)
0xffff7ab62150  embedded object  (0x20d04241 <undefined>)
0xffff7ab62158  embedded object  (0x20d04241 <undefined>)
0xffff7ab62160  embedded object  (0x20d04241 <undefined>)
0xffff7ab62168  embedded object  (0x20d04241 <undefined>)
0xffff7ab62170  embedded object  (0x20d04241 <undefined>)
0xffff7ab62178  embedded object  (0x20d04241 <undefined>)
0xffff7ab62180  embedded object  (0x20d04241 <undefined>)
0xffff7ab62188  embedded object  (0x20d04241 <undefined>)
0xffff7ab62190  embedded object  (0x20d04241 <undefined>)
0xffff7ab62198  embedded object  (0x20d04241 <undefined>)
0xffff7ab621a0  embedded object  (0x20d04241 <undefined>)
0xffff7ab621a8  embedded object  (0x20d04241 <undefined>)
0xffff7ab621b0  embedded object  (0x20d04241 <undefined>)
0xffff7ab621b8  embedded object  (0x20d04241 <undefined>)
0xffff7ab621c0  embedded object  (0x20d04241 <undefined>)
0xffff7ab621c8  embedded object  (0x20d04241 <undefined>)
0xffff7ab621d0  embedded object  (0x20d04241 <undefined>)
0xffff7ab621d8  embedded object  (0x20d04241 <undefined>)
0xffff7ab621e0  embedded object  (0x20d04241 <undefined>)
0xffff7ab621e8  embedded object  (0x20d04241 <undefined>)
0xffff7ab621f0  embedded object  (0x20d04241 <undefined>)
0xffff7ab621f8  embedded object  (0x20d04241 <undefined>)
0xffff7ab62200  embedded object  (0x20d04241 <undefined>)
0xffff7ab6220c  embedded object  (0x20d04241 <undefined>)
0xffff7ab62218  embedded object  (0x20d04241 <undefined>)
0xffff7ab62224  embedded object  (0x20d04241 <undefined>)
0xffff7ab62230  embedded object  (0x20d04241 <undefined>)
0xffff7ab6223c  embedded object  (0x20d04241 <undefined>)
0xffff7ab62248  embedded object  (0x20d04241 <undefined>)
0xffff7ab6227c  code target (STUB)  (0xffff7ab06820)
0xffff7ab622a0  code target (STUB)  (0xffff7ab06260)
0xffff7ab622ac  code target (STUB)  (0xffff7ab068e0)
0xffff7ab622c0  constant pool (size 320)


kind = STUB
major_key = FastNewClosureStub
name = FastNewClosureStub
compiler = crankshaft
Instructions (size = 773)
0xffff7ab62480     0  movz x1, #0xe2c0
0xffff7ab62484     4  movk x1, #0x9ab, lsl #16
0xffff7ab62488     8  ldp x3, x0, [x1]
0xffff7ab6248c    12  adds x16, x3, #0x48 (72)
0xffff7ab62490    16  ccmp x16, x0, #nzCv, lo
0xffff7ab62494    20  b.hi #+0x1bc (addr 0xffff7ab62650)
0xffff7ab62498    24  str x16, [x1]
0xffff7ab6249c    28  orr x3, x3, #0x1
0xffff7ab624a0    32  ldur x0, [cp, #39]
0xffff7ab624a4    36  movz x16, #0x2d7
0xffff7ab624a8    40  ldr x1, [x0, x16]
0xffff7ab624ac    44  stur x1, [x3, #-1]
0xffff7ab624b0    48  ldr x1, pc+528 (addr 0x0000ffff7ab626c0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab624b4    52  stur x1, [x3, #7]
0xffff7ab624b8    56  ldr x1, pc+528 (addr 0x0000ffff7ab626c8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab624bc    60  stur x1, [x3, #15]
0xffff7ab624c0    64  ldr x1, pc+528 (addr 0x0000ffff7ab626d0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab624c4    68  stur x1, [x3, #47]
0xffff7ab624c8    72  ldr x1, pc+528 (addr 0x0000ffff7ab626d8)    ;; object: 0x20d04519 <the hole>
0xffff7ab624cc    76  stur x1, [x3, #23]
0xffff7ab624d0    80  stur x2, [x3, #31]
0xffff7ab624d4    84  stur cp, [x3, #39]
0xffff7ab624d8    88  ldur x1, [x2, #23]
0xffff7ab624dc    92  movz x4, #0x0
0xffff7ab624e0    96  cmp x1, x4
0xffff7ab624e4   100  b.eq #+0x150 (addr 0xffff7ab62634)
0xffff7ab624e8   104  ldur w4, [x1, #11]
0xffff7ab624ec   108  subs w4, w4, #0x4 (4)
0xffff7ab624f0   112  b.vs #+0x230 (addr 0xffff7ab62720)
0xffff7ab624f4   116  mov x5, x4
0xffff7ab624f8   120  cmp w5, #0x1 (1)
0xffff7ab624fc   124  b.lt #+0xb4 (addr 0xffff7ab625b0)
0xffff7ab62500   128  add x4, x1, #0xf (15)
0xffff7ab62504   132  ldr x6, [x4, w5, sxtw #3]
0xffff7ab62508   136  ldur x4, [x6, #7]
0xffff7ab6250c   140  add x6, x1, #0x27 (39)
0xffff7ab62510   144  ldr x7, [x6, w5, sxtw #3]
0xffff7ab62514   148  add x6, x1, #0x17 (23)
0xffff7ab62518   152  ldr x8, [x6, w5, sxtw #3]
0xffff7ab6251c   156  ldur x6, [x8, #7]
0xffff7ab62520   160  cmp x0, x4
0xffff7ab62524   164  b.ne #+0x1c (addr 0xffff7ab62540)
0xffff7ab62528   168  mov x4, #0xffffffff00000000
0xffff7ab6252c   172  cmp x7, x4
0xffff7ab62530   176  b.ne #+0x10 (addr 0xffff7ab62540)
0xffff7ab62534   180  movz x4, #0x0
0xffff7ab62538   184  cmp x6, x4
0xffff7ab6253c   188  b.ne #+0xc (addr 0xffff7ab62548)
0xffff7ab62540   192  sub w5, w5, #0x4 (4)
0xffff7ab62544   196  b #-0x4c (addr 0xffff7ab624f8)
0xffff7ab62548   200  add x4, x1, #0x1f (31)
0xffff7ab6254c   204  ldr x7, [x4, w5, sxtw #3]
0xffff7ab62550   208  ldur x7, [x7, #7]
0xffff7ab62554   212  movz x4, #0x0
0xffff7ab62558   216  cmp x7, x4
0xffff7ab6255c   220  b.eq #+0x50 (addr 0xffff7ab625ac)
0xffff7ab62560   224  add x4, x6, #0x5f (95)
0xffff7ab62564   228  stur x4, [x3, #55]
0xffff7ab62568   232  stur x7, [x3, #47]
0xffff7ab6256c   236  movz x16, #0x557
0xffff7ab62570   240  ldr x4, [x0, x16]
0xffff7ab62574   244  stur x4, [x3, #63]
0xffff7ab62578   248  mov x4, x3
0xffff7ab6257c   252  movz x16, #0x557
0xffff7ab62580   256  str x4, [x0, x16]
0xffff7ab62584   260  add x6, x0, #0x557 (1367)
0xffff7ab62588   264  and x4, x0, #0xfffffffffff00000
0xffff7ab6258c   268  ldr x4, [x4, #8]
0xffff7ab62590   272  tbz w4, #2, #+0x18 (addr 0xffff7ab625a8)
0xffff7ab62594   276  sub csp, jssp, #0x8 (8)
0xffff7ab62598   280  str lr, [jssp, #-8]!
0xffff7ab6259c   284  ldr x16, pc+324 (addr 0x0000ffff7ab626e0)    ;; code: STUB, RecordWriteStub, minor: 71808
0xffff7ab625a0   288  blr x16
0xffff7ab625a4   292  ldr lr, [jssp], #8
0xffff7ab625a8   296  b #+0x8 (addr 0xffff7ab625b0)
0xffff7ab625ac   300  b #+0x184 (addr 0xffff7ab62730)
0xffff7ab625b0   304  cmp w5, #0x1 (1)
0xffff7ab625b4   308  b.ge #+0x94 (addr 0xffff7ab62648)
0xffff7ab625b8   312  ldur x1, [x1, #15]
0xffff7ab625bc   316  ldur x1, [x1, #7]
0xffff7ab625c0   320  movz x4, #0x0
0xffff7ab625c4   324  cmp x1, x4
0xffff7ab625c8   328  b.eq #+0x54 (addr 0xffff7ab6261c)
0xffff7ab625cc   332  add x1, x1, #0x5f (95)
0xffff7ab625d0   336  stur x1, [x3, #55]
0xffff7ab625d4   340  ldr x1, pc+276 (addr 0x0000ffff7ab626e8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab625d8   344  stur x1, [x3, #47]
0xffff7ab625dc   348  movz x16, #0x557
0xffff7ab625e0   352  ldr x1, [x0, x16]
0xffff7ab625e4   356  stur x1, [x3, #63]
0xffff7ab625e8   360  mov x1, x3
0xffff7ab625ec   364  movz x16, #0x557
0xffff7ab625f0   368  str x1, [x0, x16]
0xffff7ab625f4   372  add x2, x0, #0x557 (1367)
0xffff7ab625f8   376  and x1, x0, #0xfffffffffff00000
0xffff7ab625fc   380  ldr x1, [x1, #8]
0xffff7ab62600   384  tbz w1, #2, #+0x18 (addr 0xffff7ab62618)
0xffff7ab62604   388  sub csp, jssp, #0x8 (8)
0xffff7ab62608   392  str lr, [jssp, #-8]!
0xffff7ab6260c   396  ldr x16, pc+228 (addr 0x0000ffff7ab626f0)    ;; code: STUB, RecordWriteStub, minor: 67616
0xffff7ab62610   400  blr x16
0xffff7ab62614   404  ldr lr, [jssp], #8
0xffff7ab62618   408  b #+0x30 (addr 0xffff7ab62648)
0xffff7ab6261c   412  ldr x0, pc+220 (addr 0x0000ffff7ab626f8)    ;; object: 0x20d04241 <undefined>
0xffff7ab62620   416  stur x0, [x3, #63]
0xffff7ab62624   420  ldur x0, [x2, #15]
0xffff7ab62628   424  add x0, x0, #0x5f (95)
0xffff7ab6262c   428  stur x0, [x3, #55]
0xffff7ab62630   432  b #+0x18 (addr 0xffff7ab62648)
0xffff7ab62634   436  ldr x0, pc+204 (addr 0x0000ffff7ab62700)    ;; object: 0x20d04241 <undefined>
0xffff7ab62638   440  stur x0, [x3, #63]
0xffff7ab6263c   444  ldur x0, [x2, #15]
0xffff7ab62640   448  add x0, x0, #0x5f (95)
0xffff7ab62644   452  stur x0, [x3, #55]
0xffff7ab62648   456  mov x0, x3
0xffff7ab6264c   460  ret
0xffff7ab62650   464  sub csp, jssp, #0x10 (16)
0xffff7ab62654   468  stp fp, lr, [jssp, #-16]!
0xffff7ab62658   472  movz fp, #0xa00000000
0xffff7ab6265c   476  sub csp, jssp, #0x8 (8)
0xffff7ab62660   480  str fp, [jssp, #-8]!
0xffff7ab62664   484  add fp, jssp, #0x8 (8)
0xffff7ab62668   488  movz x3, #0x0
0xffff7ab6266c   492  mov x16, lr
0xffff7ab62670   496  ldr x17, pc+152 (addr 0x0000ffff7ab62708)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab62674   500  blr x17
0xffff7ab62678   504  movz x0, #0x4800000000
0xffff7ab6267c   508  movz x10, #0x0
0xffff7ab62680   512  sub csp, jssp, #0x10 (16)
0xffff7ab62684   516  stp x10, x0, [jssp, #-16]!
0xffff7ab62688   520  movz x0, #0x2
0xffff7ab6268c   524  movz x1, #0x5b88
0xffff7ab62690   528  movk x1, #0xe2, lsl #16
0xffff7ab62694   532  ldr x16, pc+124 (addr 0x0000ffff7ab62710)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab62698   536  blr x16
0xffff7ab6269c   540  str x0, [jssp, #24]
0xffff7ab626a0   544  ldr x16, pc+120 (addr 0x0000ffff7ab62718)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab626a4   548  blr x16
0xffff7ab626a8   552  ldr lr, [jssp, #16]
0xffff7ab626ac   556  ldp xzr, fp, [jssp], #24
0xffff7ab626b0   560  b #-0x210 (addr 0xffff7ab624a0)
0xffff7ab626b4   564  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0xffff7ab626b8   568  d63f03e0       constant
0xffff7ab626bc   572  d503201f       constant
0xffff7ab626c0   576  20d04201       constant
0xffff7ab626c4   580  00000000       constant
0xffff7ab626c8   584  20d04201       constant
0xffff7ab626cc   588  00000000       constant
0xffff7ab626d0   592  20d04201       constant
0xffff7ab626d4   596  00000000       constant
0xffff7ab626d8   600  20d04519       constant
0xffff7ab626dc   604  00000000       constant
0xffff7ab626e0   608  7ab2d2c0       constant
0xffff7ab626e4   612  0000ffff       constant
0xffff7ab626e8   616  20d04201       constant
0xffff7ab626ec   620  00000000       constant
0xffff7ab626f0   624  7ab2daa0       constant
0xffff7ab626f4   628  0000ffff       constant
0xffff7ab626f8   632  20d04241       constant
0xffff7ab626fc   636  00000000       constant
0xffff7ab62700   640  20d04241       constant
0xffff7ab62704   644  00000000       constant
0xffff7ab62708   648  7ab06820       constant
0xffff7ab6270c   652  0000ffff       constant
0xffff7ab62710   656  7ab06260       constant
0xffff7ab62714   660  0000ffff       constant
0xffff7ab62718   664  7ab068e0       constant
0xffff7ab6271c   668  0000ffff       constant
0xffff7ab62720   672  movz x16, #0x0
0xffff7ab62724   676  sub csp, jssp, #0x10 (16)
0xffff7ab62728   680  stp fp, lr, [jssp, #-16]!
0xffff7ab6272c   684  bl #+0x14 (addr 0xffff7ab62740)
0xffff7ab62730   688  movz x16, #0x8
0xffff7ab62734   692  sub csp, jssp, #0x10 (16)
0xffff7ab62738   696  stp fp, lr, [jssp, #-16]!
0xffff7ab6273c   700  bl #+0x4 (addr 0xffff7ab62740)
0xffff7ab62740   704  movz x17, #0xa00000000
0xffff7ab62744   708  sub csp, jssp, #0x10 (16)
0xffff7ab62748   712  stp x17, cp, [jssp, #-16]!
0xffff7ab6274c   716  add fp, jssp, #0x10 (16)
0xffff7ab62750   720  ldr x17, pc+24 (addr 0x0000ffff7ab62768)    ;; lazy deoptimization bailout 0
0xffff7ab62754   724  add x17, x17, x16
0xffff7ab62758   728  br x17
0xffff7ab6275c   732  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab62760   736  d63f03e0       constant
0xffff7ab62764   740  d503201f       constant
0xffff7ab62768   744  7a906000       constant
0xffff7ab6276c   748  0000ffff       constant


Safepoints (size = 21)
0xffff7ab6269c   540  000 | x2 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0xffff7ab624b0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab624b8  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab624c0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab624c8  embedded object  (0x20d04519 <the hole>)
0xffff7ab6259c  code target (STUB)  (0xffff7ab2d2c0)
0xffff7ab625d4  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab6260c  code target (STUB)  (0xffff7ab2daa0)
0xffff7ab6261c  embedded object  (0x20d04241 <undefined>)
0xffff7ab62634  embedded object  (0x20d04241 <undefined>)
0xffff7ab62670  code target (STUB)  (0xffff7ab06820)
0xffff7ab62694  code target (STUB)  (0xffff7ab06260)
0xffff7ab626a0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab626b4  constant pool (size 108)
0xffff7ab62750  runtime entry
0xffff7ab6275c  constant pool (size 20)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab64020     0  ldur x0, [x1, #7]
0xffff7ab64024     4  movz x16, #0x10f
0xffff7ab64028     8  ldr x0, [x0, x16]
0xffff7ab6402c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab640a0     0  ldur x0, [x1, #7]
0xffff7ab640a4     4  movz x16, #0x11f
0xffff7ab640a8     8  ldr x0, [x0, x16]
0xffff7ab640ac    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab64120     0  ldur x0, [x1, #7]
0xffff7ab64124     4  movz x16, #0x12f
0xffff7ab64128     8  ldr x0, [x0, x16]
0xffff7ab6412c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab641a0     0  ldur x0, [x1, #7]
0xffff7ab641a4     4  movz x16, #0x127
0xffff7ab641a8     8  ldr x0, [x0, x16]
0xffff7ab641ac    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab64220     0  ldur x0, [x1, #7]
0xffff7ab64224     4  movz x16, #0x137
0xffff7ab64228     8  ldr x0, [x0, x16]
0xffff7ab6422c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab642a0     0  ldur x0, [x1, #7]
0xffff7ab642a4     4  movz x16, #0x13f
0xffff7ab642a8     8  ldr x0, [x0, x16]
0xffff7ab642ac    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab64320     0  ldur x0, [x1, #7]
0xffff7ab64324     4  movz x16, #0x147
0xffff7ab64328     8  ldr x0, [x0, x16]
0xffff7ab6432c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 1301)
0xffff7ab646a0     0  movz x2, #0xe2c0
0xffff7ab646a4     4  movk x2, #0x9ab, lsl #16
0xffff7ab646a8     8  ldp x3, x0, [x2]
0xffff7ab646ac    12  adds x16, x3, #0x200 (512)
0xffff7ab646b0    16  ccmp x16, x0, #nzCv, lo
0xffff7ab646b4    20  b.hi #+0x288 (addr 0xffff7ab6493c)
0xffff7ab646b8    24  str x16, [x2]
0xffff7ab646bc    28  orr x3, x3, #0x1
0xffff7ab646c0    32  ldr x0, pc+744 (addr 0x0000ffff7ab649a8)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab646c4    36  stur x0, [x3, #-1]
0xffff7ab646c8    40  movz x0, #0x3e00000000
0xffff7ab646cc    44  stur x0, [x3, #7]
0xffff7ab646d0    48  stur x1, [x3, #15]
0xffff7ab646d4    52  stur cp, [x3, #23]
0xffff7ab646d8    56  ldr x0, pc+728 (addr 0x0000ffff7ab649b0)    ;; object: 0x20d04519 <the hole>
0xffff7ab646dc    60  stur x0, [x3, #31]
0xffff7ab646e0    64  ldur x0, [cp, #39]
0xffff7ab646e4    68  stur x0, [x3, #39]
0xffff7ab646e8    72  ldr x0, pc+720 (addr 0x0000ffff7ab649b8)    ;; object: 0x20d04241 <undefined>
0xffff7ab646ec    76  stur x0, [x3, #47]
0xffff7ab646f0    80  ldr x0, pc+720 (addr 0x0000ffff7ab649c0)    ;; object: 0x20d04241 <undefined>
0xffff7ab646f4    84  stur x0, [x3, #55]
0xffff7ab646f8    88  ldr x0, pc+720 (addr 0x0000ffff7ab649c8)    ;; object: 0x20d04241 <undefined>
0xffff7ab646fc    92  stur x0, [x3, #63]
0xffff7ab64700    96  ldr x0, pc+720 (addr 0x0000ffff7ab649d0)    ;; object: 0x20d04241 <undefined>
0xffff7ab64704   100  stur x0, [x3, #71]
0xffff7ab64708   104  ldr x0, pc+720 (addr 0x0000ffff7ab649d8)    ;; object: 0x20d04241 <undefined>
0xffff7ab6470c   108  stur x0, [x3, #79]
0xffff7ab64710   112  ldr x0, pc+720 (addr 0x0000ffff7ab649e0)    ;; object: 0x20d04241 <undefined>
0xffff7ab64714   116  stur x0, [x3, #87]
0xffff7ab64718   120  ldr x0, pc+720 (addr 0x0000ffff7ab649e8)    ;; object: 0x20d04241 <undefined>
0xffff7ab6471c   124  stur x0, [x3, #95]
0xffff7ab64720   128  ldr x0, pc+720 (addr 0x0000ffff7ab649f0)    ;; object: 0x20d04241 <undefined>
0xffff7ab64724   132  stur x0, [x3, #103]
0xffff7ab64728   136  ldr x0, pc+720 (addr 0x0000ffff7ab649f8)    ;; object: 0x20d04241 <undefined>
0xffff7ab6472c   140  stur x0, [x3, #111]
0xffff7ab64730   144  ldr x0, pc+720 (addr 0x0000ffff7ab64a00)    ;; object: 0x20d04241 <undefined>
0xffff7ab64734   148  stur x0, [x3, #119]
0xffff7ab64738   152  ldr x0, pc+720 (addr 0x0000ffff7ab64a08)    ;; object: 0x20d04241 <undefined>
0xffff7ab6473c   156  stur x0, [x3, #127]
0xffff7ab64740   160  ldr x0, pc+720 (addr 0x0000ffff7ab64a10)    ;; object: 0x20d04241 <undefined>
0xffff7ab64744   164  stur x0, [x3, #135]
0xffff7ab64748   168  ldr x0, pc+720 (addr 0x0000ffff7ab64a18)    ;; object: 0x20d04241 <undefined>
0xffff7ab6474c   172  stur x0, [x3, #143]
0xffff7ab64750   176  ldr x0, pc+720 (addr 0x0000ffff7ab64a20)    ;; object: 0x20d04241 <undefined>
0xffff7ab64754   180  stur x0, [x3, #151]
0xffff7ab64758   184  ldr x0, pc+720 (addr 0x0000ffff7ab64a28)    ;; object: 0x20d04241 <undefined>
0xffff7ab6475c   188  stur x0, [x3, #159]
0xffff7ab64760   192  ldr x0, pc+720 (addr 0x0000ffff7ab64a30)    ;; object: 0x20d04241 <undefined>
0xffff7ab64764   196  stur x0, [x3, #167]
0xffff7ab64768   200  ldr x0, pc+720 (addr 0x0000ffff7ab64a38)    ;; object: 0x20d04241 <undefined>
0xffff7ab6476c   204  stur x0, [x3, #175]
0xffff7ab64770   208  ldr x0, pc+720 (addr 0x0000ffff7ab64a40)    ;; object: 0x20d04241 <undefined>
0xffff7ab64774   212  stur x0, [x3, #183]
0xffff7ab64778   216  ldr x0, pc+720 (addr 0x0000ffff7ab64a48)    ;; object: 0x20d04241 <undefined>
0xffff7ab6477c   220  stur x0, [x3, #191]
0xffff7ab64780   224  ldr x0, pc+720 (addr 0x0000ffff7ab64a50)    ;; object: 0x20d04241 <undefined>
0xffff7ab64784   228  stur x0, [x3, #199]
0xffff7ab64788   232  ldr x0, pc+720 (addr 0x0000ffff7ab64a58)    ;; object: 0x20d04241 <undefined>
0xffff7ab6478c   236  stur x0, [x3, #207]
0xffff7ab64790   240  ldr x0, pc+720 (addr 0x0000ffff7ab64a60)    ;; object: 0x20d04241 <undefined>
0xffff7ab64794   244  stur x0, [x3, #215]
0xffff7ab64798   248  ldr x0, pc+720 (addr 0x0000ffff7ab64a68)    ;; object: 0x20d04241 <undefined>
0xffff7ab6479c   252  stur x0, [x3, #223]
0xffff7ab647a0   256  ldr x0, pc+720 (addr 0x0000ffff7ab64a70)    ;; object: 0x20d04241 <undefined>
0xffff7ab647a4   260  stur x0, [x3, #231]
0xffff7ab647a8   264  ldr x0, pc+720 (addr 0x0000ffff7ab64a78)    ;; object: 0x20d04241 <undefined>
0xffff7ab647ac   268  stur x0, [x3, #239]
0xffff7ab647b0   272  ldr x0, pc+720 (addr 0x0000ffff7ab64a80)    ;; object: 0x20d04241 <undefined>
0xffff7ab647b4   276  stur x0, [x3, #247]
0xffff7ab647b8   280  ldr x0, pc+720 (addr 0x0000ffff7ab64a88)    ;; object: 0x20d04241 <undefined>
0xffff7ab647bc   284  stur x0, [x3, #255]
0xffff7ab647c0   288  ldr x0, pc+720 (addr 0x0000ffff7ab64a90)    ;; object: 0x20d04241 <undefined>
0xffff7ab647c4   292  movz x16, #0x107
0xffff7ab647c8   296  str x0, [x3, x16]
0xffff7ab647cc   300  ldr x0, pc+716 (addr 0x0000ffff7ab64a98)    ;; object: 0x20d04241 <undefined>
0xffff7ab647d0   304  movz x16, #0x10f
0xffff7ab647d4   308  str x0, [x3, x16]
0xffff7ab647d8   312  ldr x0, pc+712 (addr 0x0000ffff7ab64aa0)    ;; object: 0x20d04241 <undefined>
0xffff7ab647dc   316  movz x16, #0x117
0xffff7ab647e0   320  str x0, [x3, x16]
0xffff7ab647e4   324  ldr x0, pc+708 (addr 0x0000ffff7ab64aa8)    ;; object: 0x20d04241 <undefined>
0xffff7ab647e8   328  movz x16, #0x11f
0xffff7ab647ec   332  str x0, [x3, x16]
0xffff7ab647f0   336  ldr x0, pc+704 (addr 0x0000ffff7ab64ab0)    ;; object: 0x20d04241 <undefined>
0xffff7ab647f4   340  movz x16, #0x127
0xffff7ab647f8   344  str x0, [x3, x16]
0xffff7ab647fc   348  ldr x0, pc+700 (addr 0x0000ffff7ab64ab8)    ;; object: 0x20d04241 <undefined>
0xffff7ab64800   352  movz x16, #0x12f
0xffff7ab64804   356  str x0, [x3, x16]
0xffff7ab64808   360  ldr x0, pc+696 (addr 0x0000ffff7ab64ac0)    ;; object: 0x20d04241 <undefined>
0xffff7ab6480c   364  movz x16, #0x137
0xffff7ab64810   368  str x0, [x3, x16]
0xffff7ab64814   372  ldr x0, pc+692 (addr 0x0000ffff7ab64ac8)    ;; object: 0x20d04241 <undefined>
0xffff7ab64818   376  movz x16, #0x13f
0xffff7ab6481c   380  str x0, [x3, x16]
0xffff7ab64820   384  ldr x0, pc+688 (addr 0x0000ffff7ab64ad0)    ;; object: 0x20d04241 <undefined>
0xffff7ab64824   388  movz x16, #0x147
0xffff7ab64828   392  str x0, [x3, x16]
0xffff7ab6482c   396  ldr x0, pc+684 (addr 0x0000ffff7ab64ad8)    ;; object: 0x20d04241 <undefined>
0xffff7ab64830   400  movz x16, #0x14f
0xffff7ab64834   404  str x0, [x3, x16]
0xffff7ab64838   408  ldr x0, pc+680 (addr 0x0000ffff7ab64ae0)    ;; object: 0x20d04241 <undefined>
0xffff7ab6483c   412  movz x16, #0x157
0xffff7ab64840   416  str x0, [x3, x16]
0xffff7ab64844   420  ldr x0, pc+676 (addr 0x0000ffff7ab64ae8)    ;; object: 0x20d04241 <undefined>
0xffff7ab64848   424  movz x16, #0x15f
0xffff7ab6484c   428  str x0, [x3, x16]
0xffff7ab64850   432  ldr x0, pc+672 (addr 0x0000ffff7ab64af0)    ;; object: 0x20d04241 <undefined>
0xffff7ab64854   436  movz x16, #0x167
0xffff7ab64858   440  str x0, [x3, x16]
0xffff7ab6485c   444  ldr x0, pc+668 (addr 0x0000ffff7ab64af8)    ;; object: 0x20d04241 <undefined>
0xffff7ab64860   448  movz x16, #0x16f
0xffff7ab64864   452  str x0, [x3, x16]
0xffff7ab64868   456  ldr x0, pc+664 (addr 0x0000ffff7ab64b00)    ;; object: 0x20d04241 <undefined>
0xffff7ab6486c   460  movz x16, #0x177
0xffff7ab64870   464  str x0, [x3, x16]
0xffff7ab64874   468  ldr x0, pc+660 (addr 0x0000ffff7ab64b08)    ;; object: 0x20d04241 <undefined>
0xffff7ab64878   472  movz x16, #0x17f
0xffff7ab6487c   476  str x0, [x3, x16]
0xffff7ab64880   480  ldr x0, pc+656 (addr 0x0000ffff7ab64b10)    ;; object: 0x20d04241 <undefined>
0xffff7ab64884   484  movz x16, #0x187
0xffff7ab64888   488  str x0, [x3, x16]
0xffff7ab6488c   492  ldr x0, pc+652 (addr 0x0000ffff7ab64b18)    ;; object: 0x20d04241 <undefined>
0xffff7ab64890   496  movz x16, #0x18f
0xffff7ab64894   500  str x0, [x3, x16]
0xffff7ab64898   504  ldr x0, pc+648 (addr 0x0000ffff7ab64b20)    ;; object: 0x20d04241 <undefined>
0xffff7ab6489c   508  movz x16, #0x197
0xffff7ab648a0   512  str x0, [x3, x16]
0xffff7ab648a4   516  ldr x0, pc+644 (addr 0x0000ffff7ab64b28)    ;; object: 0x20d04241 <undefined>
0xffff7ab648a8   520  movz x16, #0x19f
0xffff7ab648ac   524  str x0, [x3, x16]
0xffff7ab648b0   528  ldr x0, pc+640 (addr 0x0000ffff7ab64b30)    ;; object: 0x20d04241 <undefined>
0xffff7ab648b4   532  movz x16, #0x1a7
0xffff7ab648b8   536  str x0, [x3, x16]
0xffff7ab648bc   540  ldr x0, pc+636 (addr 0x0000ffff7ab64b38)    ;; object: 0x20d04241 <undefined>
0xffff7ab648c0   544  movz x16, #0x1af
0xffff7ab648c4   548  str x0, [x3, x16]
0xffff7ab648c8   552  ldr x0, pc+632 (addr 0x0000ffff7ab64b40)    ;; object: 0x20d04241 <undefined>
0xffff7ab648cc   556  movz x16, #0x1b7
0xffff7ab648d0   560  str x0, [x3, x16]
0xffff7ab648d4   564  ldr x0, pc+628 (addr 0x0000ffff7ab64b48)    ;; object: 0x20d04241 <undefined>
0xffff7ab648d8   568  movz x16, #0x1bf
0xffff7ab648dc   572  str x0, [x3, x16]
0xffff7ab648e0   576  ldr x0, pc+624 (addr 0x0000ffff7ab64b50)    ;; object: 0x20d04241 <undefined>
0xffff7ab648e4   580  movz x16, #0x1c7
0xffff7ab648e8   584  str x0, [x3, x16]
0xffff7ab648ec   588  ldr x0, pc+620 (addr 0x0000ffff7ab64b58)    ;; object: 0x20d04241 <undefined>
0xffff7ab648f0   592  movz x16, #0x1cf
0xffff7ab648f4   596  str x0, [x3, x16]
0xffff7ab648f8   600  ldr x0, pc+616 (addr 0x0000ffff7ab64b60)    ;; object: 0x20d04241 <undefined>
0xffff7ab648fc   604  movz x16, #0x1d7
0xffff7ab64900   608  str x0, [x3, x16]
0xffff7ab64904   612  ldr x0, pc+612 (addr 0x0000ffff7ab64b68)    ;; object: 0x20d04241 <undefined>
0xffff7ab64908   616  movz x16, #0x1df
0xffff7ab6490c   620  str x0, [x3, x16]
0xffff7ab64910   624  ldr x0, pc+608 (addr 0x0000ffff7ab64b70)    ;; object: 0x20d04241 <undefined>
0xffff7ab64914   628  movz x16, #0x1e7
0xffff7ab64918   632  str x0, [x3, x16]
0xffff7ab6491c   636  ldr x0, pc+604 (addr 0x0000ffff7ab64b78)    ;; object: 0x20d04241 <undefined>
0xffff7ab64920   640  movz x16, #0x1ef
0xffff7ab64924   644  str x0, [x3, x16]
0xffff7ab64928   648  ldr x0, pc+600 (addr 0x0000ffff7ab64b80)    ;; object: 0x20d04241 <undefined>
0xffff7ab6492c   652  movz x16, #0x1f7
0xffff7ab64930   656  str x0, [x3, x16]
0xffff7ab64934   660  mov x0, x3
0xffff7ab64938   664  ret
0xffff7ab6493c   668  sub csp, jssp, #0x10 (16)
0xffff7ab64940   672  stp fp, lr, [jssp, #-16]!
0xffff7ab64944   676  movz fp, #0xa00000000
0xffff7ab64948   680  sub csp, jssp, #0x8 (8)
0xffff7ab6494c   684  str fp, [jssp, #-8]!
0xffff7ab64950   688  add fp, jssp, #0x8 (8)
0xffff7ab64954   692  movz x3, #0x0
0xffff7ab64958   696  mov x16, lr
0xffff7ab6495c   700  ldr x17, pc+556 (addr 0x0000ffff7ab64b88)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab64960   704  blr x17
0xffff7ab64964   708  movz x0, #0x20000000000
0xffff7ab64968   712  movz x10, #0x0
0xffff7ab6496c   716  sub csp, jssp, #0x10 (16)
0xffff7ab64970   720  stp x10, x0, [jssp, #-16]!
0xffff7ab64974   724  movz x0, #0x2
0xffff7ab64978   728  movz x1, #0x5b88
0xffff7ab6497c   732  movk x1, #0xe2, lsl #16
0xffff7ab64980   736  ldr x16, pc+528 (addr 0x0000ffff7ab64b90)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab64984   740  blr x16
0xffff7ab64988   744  str x0, [jssp, #24]
0xffff7ab6498c   748  ldr x16, pc+524 (addr 0x0000ffff7ab64b98)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab64990   752  blr x16
0xffff7ab64994   756  ldr lr, [jssp, #16]
0xffff7ab64998   760  ldp xzr, fp, [jssp], #24
0xffff7ab6499c   764  b #-0x2dc (addr 0xffff7ab646c0)
0xffff7ab649a0   768  58000fff       constant pool begin (num_const = 127)    ;; constant pool
0xffff7ab649a4   772  d63f03e0       constant
0xffff7ab649a8   776  4ec06149       constant
0xffff7ab649ac   780  00000000       constant
0xffff7ab649b0   784  20d04519       constant
0xffff7ab649b4   788  00000000       constant
0xffff7ab649b8   792  20d04241       constant
0xffff7ab649bc   796  00000000       constant
0xffff7ab649c0   800  20d04241       constant
0xffff7ab649c4   804  00000000       constant
0xffff7ab649c8   808  20d04241       constant
0xffff7ab649cc   812  00000000       constant
0xffff7ab649d0   816  20d04241       constant
0xffff7ab649d4   820  00000000       constant
0xffff7ab649d8   824  20d04241       constant
0xffff7ab649dc   828  00000000       constant
0xffff7ab649e0   832  20d04241       constant
0xffff7ab649e4   836  00000000       constant
0xffff7ab649e8   840  20d04241       constant
0xffff7ab649ec   844  00000000       constant
0xffff7ab649f0   848  20d04241       constant
0xffff7ab649f4   852  00000000       constant
0xffff7ab649f8   856  20d04241       constant
0xffff7ab649fc   860  00000000       constant
0xffff7ab64a00   864  20d04241       constant
0xffff7ab64a04   868  00000000       constant
0xffff7ab64a08   872  20d04241       constant
0xffff7ab64a0c   876  00000000       constant
0xffff7ab64a10   880  20d04241       constant
0xffff7ab64a14   884  00000000       constant
0xffff7ab64a18   888  20d04241       constant
0xffff7ab64a1c   892  00000000       constant
0xffff7ab64a20   896  20d04241       constant
0xffff7ab64a24   900  00000000       constant
0xffff7ab64a28   904  20d04241       constant
0xffff7ab64a2c   908  00000000       constant
0xffff7ab64a30   912  20d04241       constant
0xffff7ab64a34   916  00000000       constant
0xffff7ab64a38   920  20d04241       constant
0xffff7ab64a3c   924  00000000       constant
0xffff7ab64a40   928  20d04241       constant
0xffff7ab64a44   932  00000000       constant
0xffff7ab64a48   936  20d04241       constant
0xffff7ab64a4c   940  00000000       constant
0xffff7ab64a50   944  20d04241       constant
0xffff7ab64a54   948  00000000       constant
0xffff7ab64a58   952  20d04241       constant
0xffff7ab64a5c   956  00000000       constant
0xffff7ab64a60   960  20d04241       constant
0xffff7ab64a64   964  00000000       constant
0xffff7ab64a68   968  20d04241       constant
0xffff7ab64a6c   972  00000000       constant
0xffff7ab64a70   976  20d04241       constant
0xffff7ab64a74   980  00000000       constant
0xffff7ab64a78   984  20d04241       constant
0xffff7ab64a7c   988  00000000       constant
0xffff7ab64a80   992  20d04241       constant
0xffff7ab64a84   996  00000000       constant
0xffff7ab64a88  1000  20d04241       constant
0xffff7ab64a8c  1004  00000000       constant
0xffff7ab64a90  1008  20d04241       constant
0xffff7ab64a94  1012  00000000       constant
0xffff7ab64a98  1016  20d04241       constant
0xffff7ab64a9c  1020  00000000       constant
0xffff7ab64aa0  1024  20d04241       constant
0xffff7ab64aa4  1028  00000000       constant
0xffff7ab64aa8  1032  20d04241       constant
0xffff7ab64aac  1036  00000000       constant
0xffff7ab64ab0  1040  20d04241       constant
0xffff7ab64ab4  1044  00000000       constant
0xffff7ab64ab8  1048  20d04241       constant
0xffff7ab64abc  1052  00000000       constant
0xffff7ab64ac0  1056  20d04241       constant
0xffff7ab64ac4  1060  00000000       constant
0xffff7ab64ac8  1064  20d04241       constant
0xffff7ab64acc  1068  00000000       constant
0xffff7ab64ad0  1072  20d04241       constant
0xffff7ab64ad4  1076  00000000       constant
0xffff7ab64ad8  1080  20d04241       constant
0xffff7ab64adc  1084  00000000       constant
0xffff7ab64ae0  1088  20d04241       constant
0xffff7ab64ae4  1092  00000000       constant
0xffff7ab64ae8  1096  20d04241       constant
0xffff7ab64aec  1100  00000000       constant
0xffff7ab64af0  1104  20d04241       constant
0xffff7ab64af4  1108  00000000       constant
0xffff7ab64af8  1112  20d04241       constant
0xffff7ab64afc  1116  00000000       constant
0xffff7ab64b00  1120  20d04241       constant
0xffff7ab64b04  1124  00000000       constant
0xffff7ab64b08  1128  20d04241       constant
0xffff7ab64b0c  1132  00000000       constant
0xffff7ab64b10  1136  20d04241       constant
0xffff7ab64b14  1140  00000000       constant
0xffff7ab64b18  1144  20d04241       constant
0xffff7ab64b1c  1148  00000000       constant
0xffff7ab64b20  1152  20d04241       constant
0xffff7ab64b24  1156  00000000       constant
0xffff7ab64b28  1160  20d04241       constant
0xffff7ab64b2c  1164  00000000       constant
0xffff7ab64b30  1168  20d04241       constant
0xffff7ab64b34  1172  00000000       constant
0xffff7ab64b38  1176  20d04241       constant
0xffff7ab64b3c  1180  00000000       constant
0xffff7ab64b40  1184  20d04241       constant
0xffff7ab64b44  1188  00000000       constant
0xffff7ab64b48  1192  20d04241       constant
0xffff7ab64b4c  1196  00000000       constant
0xffff7ab64b50  1200  20d04241       constant
0xffff7ab64b54  1204  00000000       constant
0xffff7ab64b58  1208  20d04241       constant
0xffff7ab64b5c  1212  00000000       constant
0xffff7ab64b60  1216  20d04241       constant
0xffff7ab64b64  1220  00000000       constant
0xffff7ab64b68  1224  20d04241       constant
0xffff7ab64b6c  1228  00000000       constant
0xffff7ab64b70  1232  20d04241       constant
0xffff7ab64b74  1236  00000000       constant
0xffff7ab64b78  1240  20d04241       constant
0xffff7ab64b7c  1244  00000000       constant
0xffff7ab64b80  1248  20d04241       constant
0xffff7ab64b84  1252  00000000       constant
0xffff7ab64b88  1256  7ab06820       constant
0xffff7ab64b8c  1260  0000ffff       constant
0xffff7ab64b90  1264  7ab06260       constant
0xffff7ab64b94  1268  0000ffff       constant
0xffff7ab64b98  1272  7ab068e0       constant
0xffff7ab64b9c  1276  0000ffff       constant


Safepoints (size = 21)
0xffff7ab64988   744  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 69)
0xffff7ab646c0  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab646d8  embedded object  (0x20d04519 <the hole>)
0xffff7ab646e8  embedded object  (0x20d04241 <undefined>)
0xffff7ab646f0  embedded object  (0x20d04241 <undefined>)
0xffff7ab646f8  embedded object  (0x20d04241 <undefined>)
0xffff7ab64700  embedded object  (0x20d04241 <undefined>)
0xffff7ab64708  embedded object  (0x20d04241 <undefined>)
0xffff7ab64710  embedded object  (0x20d04241 <undefined>)
0xffff7ab64718  embedded object  (0x20d04241 <undefined>)
0xffff7ab64720  embedded object  (0x20d04241 <undefined>)
0xffff7ab64728  embedded object  (0x20d04241 <undefined>)
0xffff7ab64730  embedded object  (0x20d04241 <undefined>)
0xffff7ab64738  embedded object  (0x20d04241 <undefined>)
0xffff7ab64740  embedded object  (0x20d04241 <undefined>)
0xffff7ab64748  embedded object  (0x20d04241 <undefined>)
0xffff7ab64750  embedded object  (0x20d04241 <undefined>)
0xffff7ab64758  embedded object  (0x20d04241 <undefined>)
0xffff7ab64760  embedded object  (0x20d04241 <undefined>)
0xffff7ab64768  embedded object  (0x20d04241 <undefined>)
0xffff7ab64770  embedded object  (0x20d04241 <undefined>)
0xffff7ab64778  embedded object  (0x20d04241 <undefined>)
0xffff7ab64780  embedded object  (0x20d04241 <undefined>)
0xffff7ab64788  embedded object  (0x20d04241 <undefined>)
0xffff7ab64790  embedded object  (0x20d04241 <undefined>)
0xffff7ab64798  embedded object  (0x20d04241 <undefined>)
0xffff7ab647a0  embedded object  (0x20d04241 <undefined>)
0xffff7ab647a8  embedded object  (0x20d04241 <undefined>)
0xffff7ab647b0  embedded object  (0x20d04241 <undefined>)
0xffff7ab647b8  embedded object  (0x20d04241 <undefined>)
0xffff7ab647c0  embedded object  (0x20d04241 <undefined>)
0xffff7ab647cc  embedded object  (0x20d04241 <undefined>)
0xffff7ab647d8  embedded object  (0x20d04241 <undefined>)
0xffff7ab647e4  embedded object  (0x20d04241 <undefined>)
0xffff7ab647f0  embedded object  (0x20d04241 <undefined>)
0xffff7ab647fc  embedded object  (0x20d04241 <undefined>)
0xffff7ab64808  embedded object  (0x20d04241 <undefined>)
0xffff7ab64814  embedded object  (0x20d04241 <undefined>)
0xffff7ab64820  embedded object  (0x20d04241 <undefined>)
0xffff7ab6482c  embedded object  (0x20d04241 <undefined>)
0xffff7ab64838  embedded object  (0x20d04241 <undefined>)
0xffff7ab64844  embedded object  (0x20d04241 <undefined>)
0xffff7ab64850  embedded object  (0x20d04241 <undefined>)
0xffff7ab6485c  embedded object  (0x20d04241 <undefined>)
0xffff7ab64868  embedded object  (0x20d04241 <undefined>)
0xffff7ab64874  embedded object  (0x20d04241 <undefined>)
0xffff7ab64880  embedded object  (0x20d04241 <undefined>)
0xffff7ab6488c  embedded object  (0x20d04241 <undefined>)
0xffff7ab64898  embedded object  (0x20d04241 <undefined>)
0xffff7ab648a4  embedded object  (0x20d04241 <undefined>)
0xffff7ab648b0  embedded object  (0x20d04241 <undefined>)
0xffff7ab648bc  embedded object  (0x20d04241 <undefined>)
0xffff7ab648c8  embedded object  (0x20d04241 <undefined>)
0xffff7ab648d4  embedded object  (0x20d04241 <undefined>)
0xffff7ab648e0  embedded object  (0x20d04241 <undefined>)
0xffff7ab648ec  embedded object  (0x20d04241 <undefined>)
0xffff7ab648f8  embedded object  (0x20d04241 <undefined>)
0xffff7ab64904  embedded object  (0x20d04241 <undefined>)
0xffff7ab64910  embedded object  (0x20d04241 <undefined>)
0xffff7ab6491c  embedded object  (0x20d04241 <undefined>)
0xffff7ab64928  embedded object  (0x20d04241 <undefined>)
0xffff7ab6495c  code target (STUB)  (0xffff7ab06820)
0xffff7ab64980  code target (STUB)  (0xffff7ab06260)
0xffff7ab6498c  code target (STUB)  (0xffff7ab068e0)
0xffff7ab649a0  constant pool (size 512)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7ab67340     0  ldur x0, [x1, #7]
0xffff7ab67344     4  ldur x0, [x0, #55]
0xffff7ab67348     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7ab673c0     0  ldur x0, [x1, #7]
0xffff7ab673c4     4  ldur x0, [x0, #39]
0xffff7ab673c8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7ab67440     0  ldur x0, [x1, #7]
0xffff7ab67444     4  ldur x0, [x0, #47]
0xffff7ab67448     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7ab674c0     0  ldur x0, [x1, #7]
0xffff7ab674c4     4  ldur x0, [x0, #63]
0xffff7ab674c8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7ab67540     0  ldur x0, [x1, #7]
0xffff7ab67544     4  ldur x0, [x0, #127]
0xffff7ab67548     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7ab675c0     0  ldur x0, [x1, #7]
0xffff7ab675c4     4  ldur x0, [x0, #167]
0xffff7ab675c8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab67640     0  ldur x0, [x1, #-1]
0xffff7ab67644     4  ldur x0, [x0, #47]
0xffff7ab67648     8  movz x16, #0x617
0xffff7ab6764c    12  ldr x0, [x0, x16]
0xffff7ab67650    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab676c0     0  ldur x0, [x1, #7]
0xffff7ab676c4     4  movz x16, #0x157
0xffff7ab676c8     8  ldr x0, [x0, x16]
0xffff7ab676cc    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = INTERNALIZED_STRING*INTERNALIZED_STRING -> INTERNALIZED_STRING
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 184)
0xffff7ab67de0     0  and x16, x1, x0
0xffff7ab67de4     4  tbz w16, #0, #+0x2c (addr 0xffff7ab67e10)
0xffff7ab67de8     8  ldur x11, [x1, #-1]
0xffff7ab67dec    12  ldur x10, [x0, #-1]
0xffff7ab67df0    16  ldrb w11, [x11, #11]
0xffff7ab67df4    20  ldrb w10, [x10, #11]
0xffff7ab67df8    24  orr x12, x11, x10
0xffff7ab67dfc    28  tst x12, #0xc0
0xffff7ab67e00    32  b.ne #+0x10 (addr 0xffff7ab67e10)
0xffff7ab67e04    36  cmp x1, x0
0xffff7ab67e08    40  cset x0, ne
0xffff7ab67e0c    44  ret
0xffff7ab67e10    48  movz x16, #0xc00000000
0xffff7ab67e14    52  sub csp, jssp, #0x10 (16)
0xffff7ab67e18    56  stp fp, lr, [jssp, #-16]!
0xffff7ab67e1c    60  sub csp, jssp, #0x10 (16)
0xffff7ab67e20    64  str x16, [jssp, #-8]!
0xffff7ab67e24    68  ldr x17, pc+92 (addr 0x0000ffff7ab67e80)    ;; object: 0xffff7ab67d81 <Code: COMPARE_IC>
0xffff7ab67e28    72  sub csp, jssp, #0x10 (16)
0xffff7ab67e2c    76  str x17, [jssp, #-8]!
0xffff7ab67e30    80  add fp, jssp, #0x10 (16)
0xffff7ab67e34    84  sub csp, jssp, #0x18 (24)
0xffff7ab67e38    88  stp lr, x0, [jssp, #-24]!
0xffff7ab67e3c    92  str x1, [jssp, #16]
0xffff7ab67e40    96  movz x10, #0x2f00000000
0xffff7ab67e44   100  sub csp, jssp, #0x18 (24)
0xffff7ab67e48   104  stp x10, x0, [jssp, #-24]!
0xffff7ab67e4c   108  str x1, [jssp, #16]
0xffff7ab67e50   112  movz x0, #0x3
0xffff7ab67e54   116  ldr x1, pc+52 (addr 0x0000ffff7ab67e88)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ab67e58   120  ldr x16, pc+56 (addr 0x0000ffff7ab67e90)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab67e5c   124  blr x16
0xffff7ab67e60   128  add x11, x0, #0x5f (95)
0xffff7ab67e64   132  ldr x1, [jssp, #16]
0xffff7ab67e68   136  ldp lr, x0, [jssp], #24
0xffff7ab67e6c   140  mov jssp, fp
0xffff7ab67e70   144  ldp fp, lr, [jssp], #16
0xffff7ab67e74   148  br x11
0xffff7ab67e78   152  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab67e7c   156  d63f03e0       constant
0xffff7ab67e80   160  7ab67d81       constant
0xffff7ab67e84   164  0000ffff       constant
0xffff7ab67e88   168  00c8a980       constant
0xffff7ab67e8c   172  00000000       constant
0xffff7ab67e90   176  7ab06060       constant
0xffff7ab67e94   180  0000ffff       constant


RelocInfo (size = 12)
0xffff7ab67e24  embedded object  (0xffff7ab67d81 <Code: COMPARE_IC>)
0xffff7ab67e54  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ab67e58  code target (STUB)  (0xffff7ab06060)
0xffff7ab67e78  constant pool (size 32)


kind = STUB
major_key = DirectCEntryStub
name = DirectCEntryStub
compiler = unknown
Instructions (size = 16)
0xffff7ab68200     0  str lr, [csp]
0xffff7ab68204     4  blr x10
0xffff7ab68208     8  ldr lr, [csp]
0xffff7ab6820c    12  ret


RelocInfo (size = 0)


kind = STUB
major_key = CallApiGetterStub
name = CallApiGetterStub
compiler = unknown
Instructions (size = 440)
0xffff7ab68280     0  mov x0, jssp
0xffff7ab68284     4  add x1, x0, #0x8 (8)
0xffff7ab68288     8  sub csp, jssp, #0x10 (16)
0xffff7ab6828c    12  stp fp, lr, [jssp, #-16]!
0xffff7ab68290    16  mov fp, jssp
0xffff7ab68294    20  movz x10, #0x300000000
0xffff7ab68298    24  sub csp, jssp, #0x8 (8)
0xffff7ab6829c    28  str x10, [jssp, #-8]!
0xffff7ab682a0    32  sub csp, jssp, #0x8 (8)
0xffff7ab682a4    36  str xzr, [jssp, #-8]!
0xffff7ab682a8    40  ldr x10, pc+288 (addr 0x0000ffff7ab683c8)    ;; object: 0xffff7ab68221 <Code: STUB>
0xffff7ab682ac    44  sub csp, jssp, #0x8 (8)
0xffff7ab682b0    48  str x10, [jssp, #-8]!
0xffff7ab682b4    52  ldr x10, pc+284 (addr 0x0000ffff7ab683d0)    ;; external reference (Isolate::c_entry_fp_address)
0xffff7ab682b8    56  str fp, [x10]
0xffff7ab682bc    60  ldr x10, pc+284 (addr 0x0000ffff7ab683d8)    ;; external reference (Isolate::context_address)
0xffff7ab682c0    64  str cp, [x10]
0xffff7ab682c4    68  sub csp, jssp, #0x30 (48)
0xffff7ab682c8    72  sub jssp, jssp, #0x30 (48)
0xffff7ab682cc    76  and csp, jssp, #0xfffffffffffffff0
0xffff7ab682d0    80  add x10, csp, #0x8 (8)
0xffff7ab682d4    84  stur x10, [fp, #-16]
0xffff7ab682d8    88  str x1, [csp, #8]
0xffff7ab682dc    92  add x1, csp, #0x8 (8)
0xffff7ab682e0    96  ldr x10, pc+256 (addr 0x0000ffff7ab683e0)    ;; external reference (CpuProfiler::is_profiling)
0xffff7ab682e4   100  ldrb w10, [x10]
0xffff7ab682e8   104  cbz w10, #+0xc (addr 0xffff7ab682f4)
0xffff7ab682ec   108  ldr x3, pc+252 (addr 0x0000ffff7ab683e8)    ;; external reference (InvokeAccessorGetterCallback)
0xffff7ab682f0   112  b #+0x8 (addr 0xffff7ab682f8)
0xffff7ab682f4   116  mov x3, x2
0xffff7ab682f8   120  str x19, [csp, #16]
0xffff7ab682fc   124  str x20, [csp, #24]
0xffff7ab68300   128  str x21, [csp, #32]
0xffff7ab68304   132  str x22, [csp, #40]
0xffff7ab68308   136  ldr x22, pc+232 (addr 0x0000ffff7ab683f0)    ;; external reference (HandleScope::next)
0xffff7ab6830c   140  ldr x19, [x22]
0xffff7ab68310   144  ldr x20, [x22, #8]
0xffff7ab68314   148  ldr w21, [x22, #16]
0xffff7ab68318   152  add w21, w21, #0x1 (1)
0xffff7ab6831c   156  str w21, [x22, #16]
0xffff7ab68320   160  ldr lr, pc+216 (addr 0x0000ffff7ab683f8)    ;; code: STUB, DirectCEntryStub, minor: 0
0xffff7ab68324   164  mov x10, x3
0xffff7ab68328   168  blr lr
0xffff7ab6832c   172  ldr x0, [fp, #56]
0xffff7ab68330   176  str x19, [x22]
0xffff7ab68334   180  sub w21, w21, #0x1 (1)
0xffff7ab68338   184  str w21, [x22, #16]
0xffff7ab6833c   188  ldr x1, [x22, #8]
0xffff7ab68340   192  cmp x20, x1
0xffff7ab68344   196  b.ne #+0x58 (addr 0xffff7ab6839c)
0xffff7ab68348   200  ldr x19, [csp, #16]
0xffff7ab6834c   204  ldr x20, [csp, #24]
0xffff7ab68350   208  ldr x21, [csp, #32]
0xffff7ab68354   212  ldr x22, [csp, #40]
0xffff7ab68358   216  ldr x1, pc+168 (addr 0x0000ffff7ab68400)    ;; external reference (Isolate::context_address)
0xffff7ab6835c   220  ldr cp, [x1]
0xffff7ab68360   224  ldr x1, pc+168 (addr 0x0000ffff7ab68408)    ;; external reference (Isolate::c_entry_fp_address)
0xffff7ab68364   228  str xzr, [x1]
0xffff7ab68368   232  mov jssp, fp
0xffff7ab6836c   236  ldp fp, lr, [jssp], #16
0xffff7ab68370   240  ldr x5, pc+160 (addr 0x0000ffff7ab68410)    ;; external reference (Isolate::scheduled_exception)
0xffff7ab68374   244  ldr x5, [x5]
0xffff7ab68378   248  ldr x16, [x26, #88]
0xffff7ab6837c   252  cmp x5, x16
0xffff7ab68380   256  b.ne #+0xc (addr 0xffff7ab6838c)
0xffff7ab68384   260  add jssp, jssp, #0x40 (64)
0xffff7ab68388   264  ret
0xffff7ab6838c   268  movz x0, #0x0
0xffff7ab68390   272  ldr x1, pc+136 (addr 0x0000ffff7ab68418)    ;; external reference (Runtime::PromoteScheduledException)
0xffff7ab68394   276  ldr x16, pc+140 (addr 0x0000ffff7ab68420)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab68398   280  br x16
0xffff7ab6839c   284  str x20, [x22, #8]
0xffff7ab683a0   288  mov x19, x0
0xffff7ab683a4   292  ldr x0, pc+132 (addr 0x0000ffff7ab68428)    ;; external reference (isolate)
0xffff7ab683a8   296  ldr x16, pc+136 (addr 0x0000ffff7ab68430)    ;; external reference (HandleScope::DeleteExtensions)
0xffff7ab683ac   300  and csp, jssp, #0xfffffffffffffff0
0xffff7ab683b0   304  blr x16
0xffff7ab683b4   308  mov x0, x19
0xffff7ab683b8   312  b #-0x70 (addr 0xffff7ab68348)
0xffff7ab683bc   316  580003df       constant pool begin (num_const = 30)    ;; constant pool
0xffff7ab683c0   320  d63f03e0       constant
0xffff7ab683c4   324  d503201f       constant
0xffff7ab683c8   328  7ab68221       constant
0xffff7ab683cc   332  0000ffff       constant
0xffff7ab683d0   336  09abedf8       constant
0xffff7ab683d4   340  00000000       constant
0xffff7ab683d8   344  09abed90       constant
0xffff7ab683dc   348  00000000       constant
0xffff7ab683e0   352  09ae85e1       constant
0xffff7ab683e4   356  00000000       constant
0xffff7ab683e8   360  009274e0       constant
0xffff7ab683ec   364  00000000       constant
0xffff7ab683f0   368  09abee70       constant
0xffff7ab683f4   372  00000000       constant
0xffff7ab683f8   376  7ab68200       constant
0xffff7ab683fc   380  0000ffff       constant
0xffff7ab68400   384  09abed90       constant
0xffff7ab68404   388  00000000       constant
0xffff7ab68408   392  09abedf8       constant
0xffff7ab6840c   396  00000000       constant
0xffff7ab68410   400  09abede0       constant
0xffff7ab68414   404  00000000       constant
0xffff7ab68418   408  00e234b8       constant
0xffff7ab6841c   412  00000000       constant
0xffff7ab68420   416  7ab06060       constant
0xffff7ab68424   420  0000ffff       constant
0xffff7ab68428   424  09abd2d0       constant
0xffff7ab6842c   428  00000000       constant
0xffff7ab68430   432  00c05c20       constant
0xffff7ab68434   436  00000000       constant


RelocInfo (size = 31)
0xffff7ab682a8  embedded object  (0xffff7ab68221 <Code: STUB>)
0xffff7ab682b4  external reference (Isolate::c_entry_fp_address)  (0x9abedf8)
0xffff7ab682bc  external reference (Isolate::context_address)  (0x9abed90)
0xffff7ab682e0  external reference (CpuProfiler::is_profiling)  (0x9ae85e1)
0xffff7ab682ec  external reference (InvokeAccessorGetterCallback)  (0x9274e0)
0xffff7ab68308  external reference (HandleScope::next)  (0x9abee70)
0xffff7ab68320  code target (STUB)  (0xffff7ab68200)
0xffff7ab68358  external reference (Isolate::context_address)  (0x9abed90)
0xffff7ab68360  external reference (Isolate::c_entry_fp_address)  (0x9abedf8)
0xffff7ab68370  external reference (Isolate::scheduled_exception)  (0x9abede0)
0xffff7ab68390  external reference (Runtime::PromoteScheduledException)  (0xe234b8)
0xffff7ab68394  code target (STUB)  (0xffff7ab06060)
0xffff7ab683a4  external reference (isolate)  (0x9abd2d0)
0xffff7ab683a8  external reference (HandleScope::DeleteExtensions)  (0xc05c20)
0xffff7ab683bc  constant pool (size 124)


kind = HANDLER
major_key = <NoCache>Stub
name = name
compiler = unknown
Instructions (size = 184)
0xffff7ab684a0     0  sub csp, jssp, #0x8 (8)
0xffff7ab684a4     4  str x3, [jssp, #-8]!
0xffff7ab684a8     8  sub csp, jssp, #0x8 (8)
0xffff7ab684ac    12  str x0, [jssp, #-8]!
0xffff7ab684b0    16  ldr x0, pc+120 (addr 0x0000ffff7ab68528)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7ab684b4    20  ldur x0, [x0, #7]
0xffff7ab684b8    24  cmp x0, #0x0 (0)
0xffff7ab684bc    28  b.ne #+0x8 (addr 0xffff7ab684c4)
0xffff7ab684c0    32  b #+0x14 (addr 0xffff7ab684d4)
0xffff7ab684c4    36  ldr x0, [jssp], #8
0xffff7ab684c8    40  ldr x3, [jssp], #8
0xffff7ab684cc    44  ldr x16, pc+100 (addr 0x0000ffff7ab68530)    ;; code: BUILTIN
0xffff7ab684d0    48  br x16
0xffff7ab684d4    52  add jssp, jssp, #0x10 (16)
0xffff7ab684d8    56  sub csp, jssp, #0x8 (8)
0xffff7ab684dc    60  str x1, [jssp, #-8]!
0xffff7ab684e0    64  ldr x4, pc+88 (addr 0x0000ffff7ab68538)    ;; object: 0x20d04241 <undefined>
0xffff7ab684e4    68  ldr x5, [x26, #40]
0xffff7ab684e8    72  ldr x0, pc+88 (addr 0x0000ffff7ab68540)    ;; external reference (isolate)
0xffff7ab684ec    76  sub csp, jssp, #0x28 (40)
0xffff7ab684f0    80  stp x0, x5, [jssp, #-32]!
0xffff7ab684f4    84  stp x5, x4, [jssp, #16]
0xffff7ab684f8    88  str x1, [jssp, #-8]!
0xffff7ab684fc    92  movz x16, #0x0
0xffff7ab68500    96  sub csp, jssp, #0x8 (8)
0xffff7ab68504   100  str x16, [jssp, #-8]!
0xffff7ab68508   104  sub csp, jssp, #0x8 (8)
0xffff7ab6850c   108  str x2, [jssp, #-8]!
0xffff7ab68510   112  ldr x2, pc+56 (addr 0x0000ffff7ab68548)    ;; external reference (Accessors::FunctionNameGetter)
0xffff7ab68514   116  ldr x16, pc+60 (addr 0x0000ffff7ab68550)    ;; code: STUB, CallApiGetterStub, minor: 0
0xffff7ab68518   120  br x16
0xffff7ab6851c   124  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7ab68520   128  d63f03e0       constant
0xffff7ab68524   132  d503201f       constant
0xffff7ab68528   136  20d5b0f1       constant
0xffff7ab6852c   140  00000000       constant
0xffff7ab68530   144  7ab222e0       constant
0xffff7ab68534   148  0000ffff       constant
0xffff7ab68538   152  20d04241       constant
0xffff7ab6853c   156  00000000       constant
0xffff7ab68540   160  09abd2d0       constant
0xffff7ab68544   164  00000000       constant
0xffff7ab68548   168  008fefd8       constant
0xffff7ab6854c   172  00000000       constant
0xffff7ab68550   176  7ab68280       constant
0xffff7ab68554   180  0000ffff       constant


RelocInfo (size = 14)
0xffff7ab684b0  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7ab684cc  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab684e0  embedded object  (0x20d04241 <undefined>)
0xffff7ab684e8  external reference (isolate)  (0x9abd2d0)
0xffff7ab68510  external reference (Accessors::FunctionNameGetter)  (0x8fefd8)
0xffff7ab68514  code target (STUB)  (0xffff7ab68280)
0xffff7ab6851c  constant pool (size 60)

kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 393221
name = CallICStub(args(5), ANY, 
compiler = unknown
Instructions (size = 488)
0xffff7ab685c0     0  add x4, x2, x3, asr #29
0xffff7ab685c4     4  ldur x4, [x4, #15]
0xffff7ab685c8     8  ldur x5, [x4, #7]
0xffff7ab685cc    12  cmp x5, x1
0xffff7ab685d0    16  b.ne #+0x2c (addr 0xffff7ab685fc)
0xffff7ab685d4    20  tbz w1, #0, #+0x28 (addr 0xffff7ab685fc)
0xffff7ab685d8    24  add x2, x2, x3, asr #29
0xffff7ab685dc    28  add x2, x2, #0x18 (24)
0xffff7ab685e0    32  ldur x3, [x2, #-1]
0xffff7ab685e4    36  movz x16, #0x200000000
0xffff7ab685e8    40  add x3, x3, x16
0xffff7ab685ec    44  stur x3, [x2, #-1]
0xffff7ab685f0    48  movz x0, #0x5
0xffff7ab685f4    52  ldr x16, pc+372 (addr 0x0000ffff7ab68768)    ;; code: BUILTIN
0xffff7ab685f8    56  br x16
0xffff7ab685fc    60  ldr x16, [x26, #2400]
0xffff7ab68600    64  cmp x4, x16
0xffff7ab68604    68  b.eq #+0x78 (addr 0xffff7ab6867c)
0xffff7ab68608    72  ldur x5, [x4, #-1]
0xffff7ab6860c    76  ldr x16, [x26, #2736]
0xffff7ab68610    80  cmp x5, x16
0xffff7ab68614    84  b.ne #+0x40 (addr 0xffff7ab68654)
0xffff7ab68618    88  ldur x5, [cp, #39]
0xffff7ab6861c    92  ldur x5, [x5, #95]
0xffff7ab68620    96  cmp x1, x5
0xffff7ab68624   100  b.ne #+0xec (addr 0xffff7ab68710)
0xffff7ab68628   104  movz x0, #0x5
0xffff7ab6862c   108  add x2, x2, x3, asr #29
0xffff7ab68630   112  add x2, x2, #0x18 (24)
0xffff7ab68634   116  ldur x3, [x2, #-1]
0xffff7ab68638   120  movz x16, #0x200000000
0xffff7ab6863c   124  add x3, x3, x16
0xffff7ab68640   128  stur x3, [x2, #-1]
0xffff7ab68644   132  mov x2, x4
0xffff7ab68648   136  mov x3, x1
0xffff7ab6864c   140  ldr x16, pc+292 (addr 0x0000ffff7ab68770)    ;; code: STUB, ArrayConstructorStub, minor: 3
0xffff7ab68650   144  br x16
0xffff7ab68654   148  ldr x16, [x26, #2568]
0xffff7ab68658   152  cmp x4, x16
0xffff7ab6865c   156  b.eq #+0xb4 (addr 0xffff7ab68710)
0xffff7ab68660   160  ldur x5, [x4, #-1]
0xffff7ab68664   164  ldrb w5, [x5, #11]
0xffff7ab68668   168  cmp x5, #0xc9 (201)
0xffff7ab6866c   172  b.ne #+0xa4 (addr 0xffff7ab68710)
0xffff7ab68670   176  add x4, x2, x3, asr #29
0xffff7ab68674   180  ldr x5, [x26, #2400]
0xffff7ab68678   184  stur x5, [x4, #15]
0xffff7ab6867c   188  movz x0, #0x5
0xffff7ab68680   192  ldr x16, pc+248 (addr 0x0000ffff7ab68778)    ;; code: BUILTIN
0xffff7ab68684   196  br x16
0xffff7ab68688   200  tbz w1, #0, #+0x88 (addr 0xffff7ab68710)
0xffff7ab6868c   204  ldur x5, [x1, #-1]
0xffff7ab68690   208  ldrb w5, [x5, #11]
0xffff7ab68694   212  cmp x5, #0xc9 (201)
0xffff7ab68698   216  b.ne #+0x78 (addr 0xffff7ab68710)
0xffff7ab6869c   220  ldur x5, [cp, #39]
0xffff7ab686a0   224  ldur x5, [x5, #95]
0xffff7ab686a4   228  cmp x1, x5
0xffff7ab686a8   232  b.eq #+0x68 (addr 0xffff7ab68710)
0xffff7ab686ac   236  ldur x4, [x1, #39]
0xffff7ab686b0   240  ldur x4, [x4, #39]
0xffff7ab686b4   244  ldur x5, [cp, #39]
0xffff7ab686b8   248  cmp x4, x5
0xffff7ab686bc   252  b.ne #+0x54 (addr 0xffff7ab68710)
0xffff7ab686c0   256  movz x5, #0x200000000
0xffff7ab686c4   260  adds x4, x2, x3, asr #29
0xffff7ab686c8   264  stur x5, [x4, #23]
0xffff7ab686cc   268  movz x16, #0xc00000000
0xffff7ab686d0   272  sub csp, jssp, #0x10 (16)
0xffff7ab686d4   276  stp fp, lr, [jssp, #-16]!
0xffff7ab686d8   280  sub csp, jssp, #0x10 (16)
0xffff7ab686dc   284  str x16, [jssp, #-8]!
0xffff7ab686e0   288  ldr x17, pc+160 (addr 0x0000ffff7ab68780)    ;; object: 0xffff7ab68561 <Code: CALL_IC>
0xffff7ab686e4   292  sub csp, jssp, #0x10 (16)
0xffff7ab686e8   296  str x17, [jssp, #-8]!
0xffff7ab686ec   300  add fp, jssp, #0x10 (16)
0xffff7ab686f0   304  sub csp, jssp, #0x8 (8)
0xffff7ab686f4   308  str x1, [jssp, #-8]!
0xffff7ab686f8   312  ldr x16, pc+144 (addr 0x0000ffff7ab68788)    ;; code: STUB, CreateWeakCellStub, minor: 0
0xffff7ab686fc   316  blr x16
0xffff7ab68700   320  ldr x1, [jssp], #8
0xffff7ab68704   324  mov jssp, fp
0xffff7ab68708   328  ldp fp, lr, [jssp], #16
0xffff7ab6870c   332  b #-0x11c (addr 0xffff7ab685f0)
0xffff7ab68710   336  movz x16, #0xc00000000
0xffff7ab68714   340  sub csp, jssp, #0x10 (16)
0xffff7ab68718   344  stp fp, lr, [jssp, #-16]!
0xffff7ab6871c   348  sub csp, jssp, #0x10 (16)
0xffff7ab68720   352  str x16, [jssp, #-8]!
0xffff7ab68724   356  ldr x17, pc+108 (addr 0x0000ffff7ab68790)    ;; object: 0xffff7ab68561 <Code: CALL_IC>
0xffff7ab68728   360  sub csp, jssp, #0x10 (16)
0xffff7ab6872c   364  str x17, [jssp, #-8]!
0xffff7ab68730   368  add fp, jssp, #0x10 (16)
0xffff7ab68734   372  sub csp, jssp, #0x18 (24)
0xffff7ab68738   376  stp x3, x2, [jssp, #-24]!
0xffff7ab6873c   380  str x1, [jssp, #16]
0xffff7ab68740   384  movz x0, #0x3
0xffff7ab68744   388  ldr x1, pc+84 (addr 0x0000ffff7ab68798)    ;; external reference (Runtime::CallIC_Miss)
0xffff7ab68748   392  ldr x16, pc+88 (addr 0x0000ffff7ab687a0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab6874c   396  blr x16
0xffff7ab68750   400  mov x1, x0
0xffff7ab68754   404  mov jssp, fp
0xffff7ab68758   408  ldp fp, lr, [jssp], #16
0xffff7ab6875c   412  b #-0xe0 (addr 0xffff7ab6867c)
0xffff7ab68760   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7ab68764   420  d63f03e0       constant
0xffff7ab68768   424  7ab1e820       constant
0xffff7ab6876c   428  0000ffff       constant
0xffff7ab68770   432  7ab33b00       constant
0xffff7ab68774   436  0000ffff       constant
0xffff7ab68778   440  7ab1f820       constant
0xffff7ab6877c   444  0000ffff       constant
0xffff7ab68780   448  7ab68561       constant
0xffff7ab68784   452  0000ffff       constant
0xffff7ab68788   456  7ab0ddc0       constant
0xffff7ab6878c   460  0000ffff       constant
0xffff7ab68790   464  7ab68561       constant
0xffff7ab68794   468  0000ffff       constant
0xffff7ab68798   472  00c86928       constant
0xffff7ab6879c   476  00000000       constant
0xffff7ab687a0   480  7ab06060       constant
0xffff7ab687a4   484  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab685f4  code target (BUILTIN)  (0xffff7ab1e820)
0xffff7ab6864c  code target (STUB)  (0xffff7ab33b00)
0xffff7ab68680  code target (BUILTIN)  (0xffff7ab1f820)
0xffff7ab686e0  embedded object  (0xffff7ab68561 <Code: CALL_IC>)
0xffff7ab686f8  code target (STUB)  (0xffff7ab0ddc0)
0xffff7ab68724  embedded object  (0xffff7ab68561 <Code: CALL_IC>)
0xffff7ab68744  external reference (Runtime::CallIC_Miss)  (0xc86928)
0xffff7ab68748  code target (STUB)  (0xffff7ab06060)
0xffff7ab68760  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 393221
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0xffff7ab68820     0  ldur x2, [fp, #-16]
0xffff7ab68824     4  ldur x2, [x2, #31]
0xffff7ab68828     8  ldur x2, [x2, #87]
0xffff7ab6882c    12  ldr x16, pc+20 (addr 0x0000ffff7ab68840)    ;; code: CALL_IC, GENERIC
0xffff7ab68830    16  br x16
0xffff7ab68834    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab68838    24  d63f03e0       constant
0xffff7ab6883c    28  d503201f       constant
0xffff7ab68840    32  7ab685c0       constant
0xffff7ab68844    36  0000ffff       constant


RelocInfo (size = 7)
0xffff7ab6882c  code target (CALL_IC)  (0xffff7ab685c0)
0xffff7ab68834  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = UNINITIALIZED
extra_ic_state = 0
compare_state = UNINITIALIZED*UNINITIALIZED -> UNINITIALIZED
compare_operation = GT
name = CompareICStub
compiler = unknown
Instructions (size = 136)
0xffff7ab68f60     0  movz x16, #0xc00000000
0xffff7ab68f64     4  sub csp, jssp, #0x10 (16)
0xffff7ab68f68     8  stp fp, lr, [jssp, #-16]!
0xffff7ab68f6c    12  sub csp, jssp, #0x10 (16)
0xffff7ab68f70    16  str x16, [jssp, #-8]!
0xffff7ab68f74    20  ldr x17, pc+92 (addr 0x0000ffff7ab68fd0)    ;; object: 0xffff7ab68f01 <Code: COMPARE_IC>
0xffff7ab68f78    24  sub csp, jssp, #0x10 (16)
0xffff7ab68f7c    28  str x17, [jssp, #-8]!
0xffff7ab68f80    32  add fp, jssp, #0x10 (16)
0xffff7ab68f84    36  sub csp, jssp, #0x18 (24)
0xffff7ab68f88    40  stp lr, x0, [jssp, #-24]!
0xffff7ab68f8c    44  str x1, [jssp, #16]
0xffff7ab68f90    48  movz x10, #0x3200000000
0xffff7ab68f94    52  sub csp, jssp, #0x18 (24)
0xffff7ab68f98    56  stp x10, x0, [jssp, #-24]!
0xffff7ab68f9c    60  str x1, [jssp, #16]
0xffff7ab68fa0    64  movz x0, #0x3
0xffff7ab68fa4    68  ldr x1, pc+52 (addr 0x0000ffff7ab68fd8)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ab68fa8    72  ldr x16, pc+56 (addr 0x0000ffff7ab68fe0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab68fac    76  blr x16
0xffff7ab68fb0    80  add x11, x0, #0x5f (95)
0xffff7ab68fb4    84  ldr x1, [jssp, #16]
0xffff7ab68fb8    88  ldp lr, x0, [jssp], #24
0xffff7ab68fbc    92  mov jssp, fp
0xffff7ab68fc0    96  ldp fp, lr, [jssp], #16
0xffff7ab68fc4   100  br x11
0xffff7ab68fc8   104  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab68fcc   108  d63f03e0       constant
0xffff7ab68fd0   112  7ab68f01       constant
0xffff7ab68fd4   116  0000ffff       constant
0xffff7ab68fd8   120  00c8a980       constant
0xffff7ab68fdc   124  00000000       constant
0xffff7ab68fe0   128  7ab06060       constant
0xffff7ab68fe4   132  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab68f74  embedded object  (0xffff7ab68f01 <Code: COMPARE_IC>)
0xffff7ab68fa4  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ab68fa8  code target (STUB)  (0xffff7ab06060)
0xffff7ab68fc8  constant pool (size 32)


kind = STUB
major_key = SubStringStub
name = SubStringStub
compiler = unknown
Instructions (size = 824)
0xffff7ab69060     0  ldr x0, [jssp]
0xffff7ab69064     4  ldr x15, [jssp, #8]
0xffff7ab69068     8  orr x16, x15, x0
0xffff7ab6906c    12  tbnz w16, #0, #+0x228 (addr 0xffff7ab69294)
0xffff7ab69070    16  asr x15, x15, #32
0xffff7ab69074    20  asr x0, x0, #32
0xffff7ab69078    24  subs x1, x0, x15
0xffff7ab6907c    28  b.mi #+0x218 (addr 0xffff7ab69294)
0xffff7ab69080    32  tbnz w15, #31, #+0x214 (addr 0xffff7ab69294)
0xffff7ab69084    36  ldr x10, [jssp, #16]
0xffff7ab69088    40  tbz w10, #0, #+0x20c (addr 0xffff7ab69294)
0xffff7ab6908c    44  ldur x12, [x10, #-1]
0xffff7ab69090    48  ldrb w12, [x12, #11]
0xffff7ab69094    52  tbnz w12, #7, #+0x200 (addr 0xffff7ab69294)
0xffff7ab69098    56  cmp x1, #0x1 (1)
0xffff7ab6909c    60  b.eq #+0x208 (addr 0xffff7ab692a4)
0xffff7ab690a0    64  ldursw x11, [x10, #19]
0xffff7ab690a4    68  cmp x1, x11
0xffff7ab690a8    72  csel x0, x10, x0, eq
0xffff7ab690ac    76  b.eq #+0x1e0 (addr 0xffff7ab6928c)
0xffff7ab690b0    80  b.hi #+0x1e4 (addr 0xffff7ab69294)
0xffff7ab690b4    84  tst x12, #0x1
0xffff7ab690b8    88  b.eq #+0x38 (addr 0xffff7ab690f0)
0xffff7ab690bc    92  tst x12, #0x2
0xffff7ab690c0    96  b.ne #+0x1c (addr 0xffff7ab690dc)
0xffff7ab690c4   100  ldur x3, [x10, #31]
0xffff7ab690c8   104  ldr x16, [x26, #80]
0xffff7ab690cc   108  cmp x3, x16
0xffff7ab690d0   112  b.ne #+0x1c4 (addr 0xffff7ab69294)
0xffff7ab690d4   116  ldur x10, [x10, #23]
0xffff7ab690d8   120  b #+0x10 (addr 0xffff7ab690e8)
0xffff7ab690dc   124  ldursw x3, [x10, #35]
0xffff7ab690e0   128  add x15, x15, x3
0xffff7ab690e4   132  ldur x10, [x10, #23]
0xffff7ab690e8   136  ldur x3, [x10, #-1]
0xffff7ab690ec   140  ldrb w12, [x3, #11]
0xffff7ab690f0   144  cmp x1, #0xd (13)
0xffff7ab690f4   148  b.lt #+0x84 (addr 0xffff7ab69178)
0xffff7ab690f8   152  tbz w12, #2, #+0x3c (addr 0xffff7ab69134)
0xffff7ab690fc   156  ldr x3, pc+620 (addr 0x0000ffff7ab69368)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0xffff7ab69100   160  ldp x0, x4, [x3]
0xffff7ab69104   164  adds x16, x0, #0x28 (40)
0xffff7ab69108   168  ccmp x16, x4, #nzCv, lo
0xffff7ab6910c   172  b.hi #+0x188 (addr 0xffff7ab69294)
0xffff7ab69110   176  str x16, [x3]
0xffff7ab69114   180  orr x0, x0, #0x1
0xffff7ab69118   184  ldr x4, [x26, #488]
0xffff7ab6911c   188  lsl x3, x1, #32
0xffff7ab69120   192  stur x4, [x0, #-1]
0xffff7ab69124   196  movz x4, #0x3
0xffff7ab69128   200  stur x3, [x0, #15]
0xffff7ab6912c   204  stur x4, [x0, #7]
0xffff7ab69130   208  b #+0x38 (addr 0xffff7ab69168)
0xffff7ab69134   212  ldr x3, pc+572 (addr 0x0000ffff7ab69370)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0xffff7ab69138   216  ldp x0, x4, [x3]
0xffff7ab6913c   220  adds x16, x0, #0x28 (40)
0xffff7ab69140   224  ccmp x16, x4, #nzCv, lo
0xffff7ab69144   228  b.hi #+0x150 (addr 0xffff7ab69294)
0xffff7ab69148   232  str x16, [x3]
0xffff7ab6914c   236  orr x0, x0, #0x1
0xffff7ab69150   240  ldr x4, [x26, #480]
0xffff7ab69154   244  lsl x3, x1, #32
0xffff7ab69158   248  stur x4, [x0, #-1]
0xffff7ab6915c   252  movz x4, #0x3
0xffff7ab69160   256  stur x3, [x0, #15]
0xffff7ab69164   260  stur x4, [x0, #7]
0xffff7ab69168   264  lsl x15, x15, #32
0xffff7ab6916c   268  stur x15, [x0, #31]
0xffff7ab69170   272  stur x10, [x0, #23]
0xffff7ab69174   276  b #+0x118 (addr 0xffff7ab6928c)
0xffff7ab69178   280  tst x12, #0x2
0xffff7ab6917c   284  b.eq #+0x14 (addr 0xffff7ab69190)
0xffff7ab69180   288  tst x12, #0x10
0xffff7ab69184   292  b.ne #+0x110 (addr 0xffff7ab69294)
0xffff7ab69188   296  ldur x13, [x10, #31]
0xffff7ab6918c   300  b #+0x8 (addr 0xffff7ab69194)
0xffff7ab69190   304  add x13, x10, #0x17 (23)
0xffff7ab69194   308  tbz w12, #2, #+0x7c (addr 0xffff7ab69210)
0xffff7ab69198   312  add x3, x1, #0x1f (31)
0xffff7ab6919c   316  and x3, x3, #0xfffffffffffffff8
0xffff7ab691a0   320  ldr x5, pc+472 (addr 0x0000ffff7ab69378)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0xffff7ab691a4   324  ldp x0, x16, [x5]
0xffff7ab691a8   328  adds x4, x0, x3
0xffff7ab691ac   332  ccmp x4, x16, #nzCv, lo
0xffff7ab691b0   336  b.hi #+0xe4 (addr 0xffff7ab69294)
0xffff7ab691b4   340  str x4, [x5]
0xffff7ab691b8   344  orr x0, x0, #0x1
0xffff7ab691bc   348  ldr x4, [x26, #280]
0xffff7ab691c0   352  lsl x3, x1, #32
0xffff7ab691c4   356  stur x4, [x0, #-1]
0xffff7ab691c8   360  movz x4, #0x3
0xffff7ab691cc   364  stur x3, [x0, #15]
0xffff7ab691d0   368  stur x4, [x0, #7]
0xffff7ab691d4   372  add x13, x13, x15
0xffff7ab691d8   376  add x14, x0, #0x17 (23)
0xffff7ab691dc   380  and x3, x1, #0xfffffffffffffff0
0xffff7ab691e0   384  cbz x3, #+0x18 (addr 0xffff7ab691f8)
0xffff7ab691e4   388  sub x3, x3, #0x10 (16)
0xffff7ab691e8   392  ldp x16, x17, [x13], #16
0xffff7ab691ec   396  stp x16, x17, [x14], #16
0xffff7ab691f0   400  cbnz x3, #-0xc (addr 0xffff7ab691e4)
0xffff7ab691f4   404  and x1, x1, #0xf
0xffff7ab691f8   408  cbz x1, #+0x14 (addr 0xffff7ab6920c)
0xffff7ab691fc   412  sub x1, x1, #0x1 (1)
0xffff7ab69200   416  ldrb w16, [x13], #1
0xffff7ab69204   420  strb w16, [x14], #1
0xffff7ab69208   424  cbnz x1, #-0xc (addr 0xffff7ab691fc)
0xffff7ab6920c   428  b #+0x80 (addr 0xffff7ab6928c)
0xffff7ab69210   432  add x3, x1, x1
0xffff7ab69214   436  add x3, x3, #0x1f (31)
0xffff7ab69218   440  and x3, x3, #0xfffffffffffffff8
0xffff7ab6921c   444  ldr x5, pc+356 (addr 0x0000ffff7ab69380)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0xffff7ab69220   448  ldp x0, x16, [x5]
0xffff7ab69224   452  adds x4, x0, x3
0xffff7ab69228   456  ccmp x4, x16, #nzCv, lo
0xffff7ab6922c   460  b.hi #+0x68 (addr 0xffff7ab69294)
0xffff7ab69230   464  str x4, [x5]
0xffff7ab69234   468  orr x0, x0, #0x1
0xffff7ab69238   472  ldr x4, [x26, #456]
0xffff7ab6923c   476  lsl x3, x1, #32
0xffff7ab69240   480  stur x4, [x0, #-1]
0xffff7ab69244   484  movz x4, #0x3
0xffff7ab69248   488  stur x3, [x0, #15]
0xffff7ab6924c   492  stur x4, [x0, #7]
0xffff7ab69250   496  add x13, x13, x15, lsl #1
0xffff7ab69254   500  add x14, x0, #0x17 (23)
0xffff7ab69258   504  add x1, x1, x1
0xffff7ab6925c   508  and x3, x1, #0xfffffffffffffff0
0xffff7ab69260   512  cbz x3, #+0x18 (addr 0xffff7ab69278)
0xffff7ab69264   516  sub x3, x3, #0x10 (16)
0xffff7ab69268   520  ldp x16, x17, [x13], #16
0xffff7ab6926c   524  stp x16, x17, [x14], #16
0xffff7ab69270   528  cbnz x3, #-0xc (addr 0xffff7ab69264)
0xffff7ab69274   532  and x1, x1, #0xf
0xffff7ab69278   536  cbz x1, #+0x14 (addr 0xffff7ab6928c)
0xffff7ab6927c   540  sub x1, x1, #0x1 (1)
0xffff7ab69280   544  ldrb w16, [x13], #1
0xffff7ab69284   548  strb w16, [x14], #1
0xffff7ab69288   552  cbnz x1, #-0xc (addr 0xffff7ab6927c)
0xffff7ab6928c   556  add jssp, jssp, #0x18 (24)
0xffff7ab69290   560  ret
0xffff7ab69294   564  movz x0, #0x3
0xffff7ab69298   568  ldr x1, pc+240 (addr 0x0000ffff7ab69388)    ;; external reference (Runtime::SubString)
0xffff7ab6929c   572  ldr x16, pc+244 (addr 0x0000ffff7ab69390)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab692a0   576  br x16
0xffff7ab692a4   580  lsl x15, x15, #32
0xffff7ab692a8   584  tbnz w15, #0, #+0xb0 (addr 0xffff7ab69358)
0xffff7ab692ac   588  ldursw x1, [x10, #19]
0xffff7ab692b0   592  cmp x1, x15, asr #32
0xffff7ab692b4   596  b.ls #-0x20 (addr 0xffff7ab69294)
0xffff7ab692b8   600  asr x15, x15, #32
0xffff7ab692bc   604  ldur x1, [x10, #-1]
0xffff7ab692c0   608  ldrb w1, [x1, #11]
0xffff7ab692c4   612  tbz w1, #0, #+0x34 (addr 0xffff7ab692f8)
0xffff7ab692c8   616  tbz w1, #1, #+0x14 (addr 0xffff7ab692dc)
0xffff7ab692cc   620  ldur w1, [x10, #35]
0xffff7ab692d0   624  ldur x10, [x10, #23]
0xffff7ab692d4   628  add w15, w15, w1
0xffff7ab692d8   632  b #+0x18 (addr 0xffff7ab692f0)
0xffff7ab692dc   636  ldur x1, [x10, #31]
0xffff7ab692e0   640  ldr x16, [x26, #80]
0xffff7ab692e4   644  cmp x1, x16
0xffff7ab692e8   648  b.ne #+0x70 (addr 0xffff7ab69358)
0xffff7ab692ec   652  ldur x10, [x10, #23]
0xffff7ab692f0   656  ldur x1, [x10, #-1]
0xffff7ab692f4   660  ldrb w1, [x1, #11]
0xffff7ab692f8   664  tst x1, #0x3
0xffff7ab692fc   668  b.ne #+0xc (addr 0xffff7ab69308)
0xffff7ab69300   672  add x10, x10, #0x17 (23)
0xffff7ab69304   676  b #+0x10 (addr 0xffff7ab69314)
0xffff7ab69308   680  tst x1, #0x10
0xffff7ab6930c   684  b.ne #+0x4c (addr 0xffff7ab69358)
0xffff7ab69310   688  ldur x10, [x10, #31]
0xffff7ab69314   692  tbnz w1, #2, #+0xc (addr 0xffff7ab69320)
0xffff7ab69318   696  ldrh w1, [x10, w15, sxtw #1]
0xffff7ab6931c   700  b #+0x8 (addr 0xffff7ab69324)
0xffff7ab69320   704  ldrb w1, [x10, w15, sxtw]
0xffff7ab69324   708  lsl x1, x1, #32
0xffff7ab69328   712  tbnz w1, #0, #+0x34 (addr 0xffff7ab6935c)
0xffff7ab6932c   716  movz x16, #0xff00000000
0xffff7ab69330   720  cmp x1, x16
0xffff7ab69334   724  b.hi #+0x28 (addr 0xffff7ab6935c)
0xffff7ab69338   728  ldr x0, [x26, #400]
0xffff7ab6933c   732  add x0, x0, x1, asr #29
0xffff7ab69340   736  ldur x0, [x0, #15]
0xffff7ab69344   740  ldr x16, [x26, #40]
0xffff7ab69348   744  cmp x0, x16
0xffff7ab6934c   748  b.eq #+0x10 (addr 0xffff7ab6935c)
0xffff7ab69350   752  add jssp, jssp, #0x18 (24)
0xffff7ab69354   756  ret
0xffff7ab69358   760  b #-0xc4 (addr 0xffff7ab69294)
0xffff7ab6935c   764  b #-0xc8 (addr 0xffff7ab69294)
0xffff7ab69360   768  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab69364   772  d63f03e0       constant
0xffff7ab69368   776  09abe2c0       constant
0xffff7ab6936c   780  00000000       constant
0xffff7ab69370   784  09abe2c0       constant
0xffff7ab69374   788  00000000       constant
0xffff7ab69378   792  09abe2c0       constant
0xffff7ab6937c   796  00000000       constant
0xffff7ab69380   800  09abe2c0       constant
0xffff7ab69384   804  00000000       constant
0xffff7ab69388   808  00eca0d8       constant
0xffff7ab6938c   812  00000000       constant
0xffff7ab69390   816  7ab06060       constant
0xffff7ab69394   820  0000ffff       constant


RelocInfo (size = 27)
0xffff7ab690fc  external reference (Heap::NewSpaceAllocationTopAddress())  (0x9abe2c0)
0xffff7ab69134  external reference (Heap::NewSpaceAllocationTopAddress())  (0x9abe2c0)
0xffff7ab691a0  external reference (Heap::NewSpaceAllocationTopAddress())  (0x9abe2c0)
0xffff7ab6921c  external reference (Heap::NewSpaceAllocationTopAddress())  (0x9abe2c0)
0xffff7ab69298  external reference (Runtime::SubString)  (0xeca0d8)
0xffff7ab6929c  code target (STUB)  (0xffff7ab06060)
0xffff7ab69360  constant pool (size 56)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 493)
0xffff7ab6a5e0     0  movz x2, #0xe2c0
0xffff7ab6a5e4     4  movk x2, #0x9ab, lsl #16
0xffff7ab6a5e8     8  ldp x3, x0, [x2]
0xffff7ab6a5ec    12  adds x16, x3, #0xa8 (168)
0xffff7ab6a5f0    16  ccmp x16, x0, #nzCv, lo
0xffff7ab6a5f4    20  b.hi #+0xb4 (addr 0xffff7ab6a6a8)
0xffff7ab6a5f8    24  str x16, [x2]
0xffff7ab6a5fc    28  orr x3, x3, #0x1
0xffff7ab6a600    32  ldr x0, pc+280 (addr 0x0000ffff7ab6a718)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab6a604    36  stur x0, [x3, #-1]
0xffff7ab6a608    40  movz x0, #0x1300000000
0xffff7ab6a60c    44  stur x0, [x3, #7]
0xffff7ab6a610    48  stur x1, [x3, #15]
0xffff7ab6a614    52  stur cp, [x3, #23]
0xffff7ab6a618    56  ldr x0, pc+264 (addr 0x0000ffff7ab6a720)    ;; object: 0x20d04519 <the hole>
0xffff7ab6a61c    60  stur x0, [x3, #31]
0xffff7ab6a620    64  ldur x0, [cp, #39]
0xffff7ab6a624    68  stur x0, [x3, #39]
0xffff7ab6a628    72  ldr x0, pc+256 (addr 0x0000ffff7ab6a728)    ;; object: 0x20d04241 <undefined>
0xffff7ab6a62c    76  stur x0, [x3, #47]
0xffff7ab6a630    80  ldr x0, pc+256 (addr 0x0000ffff7ab6a730)    ;; object: 0x20d04241 <undefined>
0xffff7ab6a634    84  stur x0, [x3, #55]
0xffff7ab6a638    88  ldr x0, pc+256 (addr 0x0000ffff7ab6a738)    ;; object: 0x20d04241 <undefined>
0xffff7ab6a63c    92  stur x0, [x3, #63]
0xffff7ab6a640    96  ldr x0, pc+256 (addr 0x0000ffff7ab6a740)    ;; object: 0x20d04241 <undefined>
0xffff7ab6a644   100  stur x0, [x3, #71]
0xffff7ab6a648   104  ldr x0, pc+256 (addr 0x0000ffff7ab6a748)    ;; object: 0x20d04241 <undefined>
0xffff7ab6a64c   108  stur x0, [x3, #79]
0xffff7ab6a650   112  ldr x0, pc+256 (addr 0x0000ffff7ab6a750)    ;; object: 0x20d04241 <undefined>
0xffff7ab6a654   116  stur x0, [x3, #87]
0xffff7ab6a658   120  ldr x0, pc+256 (addr 0x0000ffff7ab6a758)    ;; object: 0x20d04241 <undefined>
0xffff7ab6a65c   124  stur x0, [x3, #95]
0xffff7ab6a660   128  ldr x0, pc+256 (addr 0x0000ffff7ab6a760)    ;; object: 0x20d04241 <undefined>
0xffff7ab6a664   132  stur x0, [x3, #103]
0xffff7ab6a668   136  ldr x0, pc+256 (addr 0x0000ffff7ab6a768)    ;; object: 0x20d04241 <undefined>
0xffff7ab6a66c   140  stur x0, [x3, #111]
0xffff7ab6a670   144  ldr x0, pc+256 (addr 0x0000ffff7ab6a770)    ;; object: 0x20d04241 <undefined>
0xffff7ab6a674   148  stur x0, [x3, #119]
0xffff7ab6a678   152  ldr x0, pc+256 (addr 0x0000ffff7ab6a778)    ;; object: 0x20d04241 <undefined>
0xffff7ab6a67c   156  stur x0, [x3, #127]
0xffff7ab6a680   160  ldr x0, pc+256 (addr 0x0000ffff7ab6a780)    ;; object: 0x20d04241 <undefined>
0xffff7ab6a684   164  stur x0, [x3, #135]
0xffff7ab6a688   168  ldr x0, pc+256 (addr 0x0000ffff7ab6a788)    ;; object: 0x20d04241 <undefined>
0xffff7ab6a68c   172  stur x0, [x3, #143]
0xffff7ab6a690   176  ldr x0, pc+256 (addr 0x0000ffff7ab6a790)    ;; object: 0x20d04241 <undefined>
0xffff7ab6a694   180  stur x0, [x3, #151]
0xffff7ab6a698   184  ldr x0, pc+256 (addr 0x0000ffff7ab6a798)    ;; object: 0x20d04241 <undefined>
0xffff7ab6a69c   188  stur x0, [x3, #159]
0xffff7ab6a6a0   192  mov x0, x3
0xffff7ab6a6a4   196  ret
0xffff7ab6a6a8   200  sub csp, jssp, #0x10 (16)
0xffff7ab6a6ac   204  stp fp, lr, [jssp, #-16]!
0xffff7ab6a6b0   208  movz fp, #0xa00000000
0xffff7ab6a6b4   212  sub csp, jssp, #0x8 (8)
0xffff7ab6a6b8   216  str fp, [jssp, #-8]!
0xffff7ab6a6bc   220  add fp, jssp, #0x8 (8)
0xffff7ab6a6c0   224  movz x3, #0x0
0xffff7ab6a6c4   228  mov x16, lr
0xffff7ab6a6c8   232  ldr x17, pc+216 (addr 0x0000ffff7ab6a7a0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab6a6cc   236  blr x17
0xffff7ab6a6d0   240  movz x0, #0xa800000000
0xffff7ab6a6d4   244  movz x10, #0x0
0xffff7ab6a6d8   248  sub csp, jssp, #0x10 (16)
0xffff7ab6a6dc   252  stp x10, x0, [jssp, #-16]!
0xffff7ab6a6e0   256  movz x0, #0x2
0xffff7ab6a6e4   260  movz x1, #0x5b88
0xffff7ab6a6e8   264  movk x1, #0xe2, lsl #16
0xffff7ab6a6ec   268  ldr x16, pc+188 (addr 0x0000ffff7ab6a7a8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab6a6f0   272  blr x16
0xffff7ab6a6f4   276  str x0, [jssp, #24]
0xffff7ab6a6f8   280  ldr x16, pc+184 (addr 0x0000ffff7ab6a7b0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab6a6fc   284  blr x16
0xffff7ab6a700   288  ldr lr, [jssp, #16]
0xffff7ab6a704   292  ldp xzr, fp, [jssp], #24
0xffff7ab6a708   296  b #-0x108 (addr 0xffff7ab6a600)
0xffff7ab6a70c   300  5800055f       constant pool begin (num_const = 42)    ;; constant pool
0xffff7ab6a710   304  d63f03e0       constant
0xffff7ab6a714   308  d503201f       constant
0xffff7ab6a718   312  4ec06149       constant
0xffff7ab6a71c   316  00000000       constant
0xffff7ab6a720   320  20d04519       constant
0xffff7ab6a724   324  00000000       constant
0xffff7ab6a728   328  20d04241       constant
0xffff7ab6a72c   332  00000000       constant
0xffff7ab6a730   336  20d04241       constant
0xffff7ab6a734   340  00000000       constant
0xffff7ab6a738   344  20d04241       constant
0xffff7ab6a73c   348  00000000       constant
0xffff7ab6a740   352  20d04241       constant
0xffff7ab6a744   356  00000000       constant
0xffff7ab6a748   360  20d04241       constant
0xffff7ab6a74c   364  00000000       constant
0xffff7ab6a750   368  20d04241       constant
0xffff7ab6a754   372  00000000       constant
0xffff7ab6a758   376  20d04241       constant
0xffff7ab6a75c   380  00000000       constant
0xffff7ab6a760   384  20d04241       constant
0xffff7ab6a764   388  00000000       constant
0xffff7ab6a768   392  20d04241       constant
0xffff7ab6a76c   396  00000000       constant
0xffff7ab6a770   400  20d04241       constant
0xffff7ab6a774   404  00000000       constant
0xffff7ab6a778   408  20d04241       constant
0xffff7ab6a77c   412  00000000       constant
0xffff7ab6a780   416  20d04241       constant
0xffff7ab6a784   420  00000000       constant
0xffff7ab6a788   424  20d04241       constant
0xffff7ab6a78c   428  00000000       constant
0xffff7ab6a790   432  20d04241       constant
0xffff7ab6a794   436  00000000       constant
0xffff7ab6a798   440  20d04241       constant
0xffff7ab6a79c   444  00000000       constant
0xffff7ab6a7a0   448  7ab06820       constant
0xffff7ab6a7a4   452  0000ffff       constant
0xffff7ab6a7a8   456  7ab06260       constant
0xffff7ab6a7ac   460  0000ffff       constant
0xffff7ab6a7b0   464  7ab068e0       constant
0xffff7ab6a7b4   468  0000ffff       constant


Safepoints (size = 21)
0xffff7ab6a6f4   276  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0xffff7ab6a600  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab6a618  embedded object  (0x20d04519 <the hole>)
0xffff7ab6a628  embedded object  (0x20d04241 <undefined>)
0xffff7ab6a630  embedded object  (0x20d04241 <undefined>)
0xffff7ab6a638  embedded object  (0x20d04241 <undefined>)
0xffff7ab6a640  embedded object  (0x20d04241 <undefined>)
0xffff7ab6a648  embedded object  (0x20d04241 <undefined>)
0xffff7ab6a650  embedded object  (0x20d04241 <undefined>)
0xffff7ab6a658  embedded object  (0x20d04241 <undefined>)
0xffff7ab6a660  embedded object  (0x20d04241 <undefined>)
0xffff7ab6a668  embedded object  (0x20d04241 <undefined>)
0xffff7ab6a670  embedded object  (0x20d04241 <undefined>)
0xffff7ab6a678  embedded object  (0x20d04241 <undefined>)
0xffff7ab6a680  embedded object  (0x20d04241 <undefined>)
0xffff7ab6a688  embedded object  (0x20d04241 <undefined>)
0xffff7ab6a690  embedded object  (0x20d04241 <undefined>)
0xffff7ab6a698  embedded object  (0x20d04241 <undefined>)
0xffff7ab6a6c8  code target (STUB)  (0xffff7ab06820)
0xffff7ab6a6ec  code target (STUB)  (0xffff7ab06260)
0xffff7ab6a6f8  code target (STUB)  (0xffff7ab068e0)
0xffff7ab6a70c  constant pool (size 172)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7ab6c260     0  ldur x0, [x1, #7]
0xffff7ab6c264     4  ldur x0, [x0, #15]
0xffff7ab6c268     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7ab6c2e0     0  ldur x0, [x1, #7]
0xffff7ab6c2e4     4  ldur x0, [x0, #23]
0xffff7ab6c2e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7ab6c360     0  ldur x0, [x1, #7]
0xffff7ab6c364     4  ldur x0, [x0, #31]
0xffff7ab6c368     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab6d0c0     0  ldur x0, [x1, #7]
0xffff7ab6d0c4     4  movz x16, #0x167
0xffff7ab6d0c8     8  ldr x0, [x0, x16]
0xffff7ab6d0cc    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab6d140     0  ldur x0, [x1, #7]
0xffff7ab6d144     4  movz x16, #0x16f
0xffff7ab6d148     8  ldr x0, [x0, x16]
0xffff7ab6d14c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = STUB
major_key = FastNewClosureStub
name = FastNewClosureStub
compiler = crankshaft
Instructions (size = 773)
0xffff7ab6e060     0  movz x1, #0xe2c0
0xffff7ab6e064     4  movk x1, #0x9ab, lsl #16
0xffff7ab6e068     8  ldp x3, x0, [x1]
0xffff7ab6e06c    12  adds x16, x3, #0x48 (72)
0xffff7ab6e070    16  ccmp x16, x0, #nzCv, lo
0xffff7ab6e074    20  b.hi #+0x1bc (addr 0xffff7ab6e230)
0xffff7ab6e078    24  str x16, [x1]
0xffff7ab6e07c    28  orr x3, x3, #0x1
0xffff7ab6e080    32  ldur x0, [cp, #39]
0xffff7ab6e084    36  movz x16, #0x2d7
0xffff7ab6e088    40  ldr x1, [x0, x16]
0xffff7ab6e08c    44  stur x1, [x3, #-1]
0xffff7ab6e090    48  ldr x1, pc+528 (addr 0x0000ffff7ab6e2a0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab6e094    52  stur x1, [x3, #7]
0xffff7ab6e098    56  ldr x1, pc+528 (addr 0x0000ffff7ab6e2a8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab6e09c    60  stur x1, [x3, #15]
0xffff7ab6e0a0    64  ldr x1, pc+528 (addr 0x0000ffff7ab6e2b0)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab6e0a4    68  stur x1, [x3, #47]
0xffff7ab6e0a8    72  ldr x1, pc+528 (addr 0x0000ffff7ab6e2b8)    ;; object: 0x20d04519 <the hole>
0xffff7ab6e0ac    76  stur x1, [x3, #23]
0xffff7ab6e0b0    80  stur x2, [x3, #31]
0xffff7ab6e0b4    84  stur cp, [x3, #39]
0xffff7ab6e0b8    88  ldur x1, [x2, #23]
0xffff7ab6e0bc    92  movz x4, #0x0
0xffff7ab6e0c0    96  cmp x1, x4
0xffff7ab6e0c4   100  b.eq #+0x150 (addr 0xffff7ab6e214)
0xffff7ab6e0c8   104  ldur w4, [x1, #11]
0xffff7ab6e0cc   108  subs w4, w4, #0x4 (4)
0xffff7ab6e0d0   112  b.vs #+0x230 (addr 0xffff7ab6e300)
0xffff7ab6e0d4   116  mov x5, x4
0xffff7ab6e0d8   120  cmp w5, #0x1 (1)
0xffff7ab6e0dc   124  b.lt #+0xb4 (addr 0xffff7ab6e190)
0xffff7ab6e0e0   128  add x4, x1, #0xf (15)
0xffff7ab6e0e4   132  ldr x6, [x4, w5, sxtw #3]
0xffff7ab6e0e8   136  ldur x4, [x6, #7]
0xffff7ab6e0ec   140  add x6, x1, #0x27 (39)
0xffff7ab6e0f0   144  ldr x7, [x6, w5, sxtw #3]
0xffff7ab6e0f4   148  add x6, x1, #0x17 (23)
0xffff7ab6e0f8   152  ldr x8, [x6, w5, sxtw #3]
0xffff7ab6e0fc   156  ldur x6, [x8, #7]
0xffff7ab6e100   160  cmp x0, x4
0xffff7ab6e104   164  b.ne #+0x1c (addr 0xffff7ab6e120)
0xffff7ab6e108   168  mov x4, #0xffffffff00000000
0xffff7ab6e10c   172  cmp x7, x4
0xffff7ab6e110   176  b.ne #+0x10 (addr 0xffff7ab6e120)
0xffff7ab6e114   180  movz x4, #0x0
0xffff7ab6e118   184  cmp x6, x4
0xffff7ab6e11c   188  b.ne #+0xc (addr 0xffff7ab6e128)
0xffff7ab6e120   192  sub w5, w5, #0x4 (4)
0xffff7ab6e124   196  b #-0x4c (addr 0xffff7ab6e0d8)
0xffff7ab6e128   200  add x4, x1, #0x1f (31)
0xffff7ab6e12c   204  ldr x7, [x4, w5, sxtw #3]
0xffff7ab6e130   208  ldur x7, [x7, #7]
0xffff7ab6e134   212  movz x4, #0x0
0xffff7ab6e138   216  cmp x7, x4
0xffff7ab6e13c   220  b.eq #+0x50 (addr 0xffff7ab6e18c)
0xffff7ab6e140   224  add x4, x6, #0x5f (95)
0xffff7ab6e144   228  stur x4, [x3, #55]
0xffff7ab6e148   232  stur x7, [x3, #47]
0xffff7ab6e14c   236  movz x16, #0x557
0xffff7ab6e150   240  ldr x4, [x0, x16]
0xffff7ab6e154   244  stur x4, [x3, #63]
0xffff7ab6e158   248  mov x4, x3
0xffff7ab6e15c   252  movz x16, #0x557
0xffff7ab6e160   256  str x4, [x0, x16]
0xffff7ab6e164   260  add x6, x0, #0x557 (1367)
0xffff7ab6e168   264  and x4, x0, #0xfffffffffff00000
0xffff7ab6e16c   268  ldr x4, [x4, #8]
0xffff7ab6e170   272  tbz w4, #2, #+0x18 (addr 0xffff7ab6e188)
0xffff7ab6e174   276  sub csp, jssp, #0x8 (8)
0xffff7ab6e178   280  str lr, [jssp, #-8]!
0xffff7ab6e17c   284  ldr x16, pc+324 (addr 0x0000ffff7ab6e2c0)    ;; code: STUB, RecordWriteStub, minor: 71808
0xffff7ab6e180   288  blr x16
0xffff7ab6e184   292  ldr lr, [jssp], #8
0xffff7ab6e188   296  b #+0x8 (addr 0xffff7ab6e190)
0xffff7ab6e18c   300  b #+0x184 (addr 0xffff7ab6e310)
0xffff7ab6e190   304  cmp w5, #0x1 (1)
0xffff7ab6e194   308  b.ge #+0x94 (addr 0xffff7ab6e228)
0xffff7ab6e198   312  ldur x1, [x1, #15]
0xffff7ab6e19c   316  ldur x1, [x1, #7]
0xffff7ab6e1a0   320  movz x4, #0x0
0xffff7ab6e1a4   324  cmp x1, x4
0xffff7ab6e1a8   328  b.eq #+0x54 (addr 0xffff7ab6e1fc)
0xffff7ab6e1ac   332  add x1, x1, #0x5f (95)
0xffff7ab6e1b0   336  stur x1, [x3, #55]
0xffff7ab6e1b4   340  ldr x1, pc+276 (addr 0x0000ffff7ab6e2c8)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab6e1b8   344  stur x1, [x3, #47]
0xffff7ab6e1bc   348  movz x16, #0x557
0xffff7ab6e1c0   352  ldr x1, [x0, x16]
0xffff7ab6e1c4   356  stur x1, [x3, #63]
0xffff7ab6e1c8   360  mov x1, x3
0xffff7ab6e1cc   364  movz x16, #0x557
0xffff7ab6e1d0   368  str x1, [x0, x16]
0xffff7ab6e1d4   372  add x2, x0, #0x557 (1367)
0xffff7ab6e1d8   376  and x1, x0, #0xfffffffffff00000
0xffff7ab6e1dc   380  ldr x1, [x1, #8]
0xffff7ab6e1e0   384  tbz w1, #2, #+0x18 (addr 0xffff7ab6e1f8)
0xffff7ab6e1e4   388  sub csp, jssp, #0x8 (8)
0xffff7ab6e1e8   392  str lr, [jssp, #-8]!
0xffff7ab6e1ec   396  ldr x16, pc+228 (addr 0x0000ffff7ab6e2d0)    ;; code: STUB, RecordWriteStub, minor: 67616
0xffff7ab6e1f0   400  blr x16
0xffff7ab6e1f4   404  ldr lr, [jssp], #8
0xffff7ab6e1f8   408  b #+0x30 (addr 0xffff7ab6e228)
0xffff7ab6e1fc   412  ldr x0, pc+220 (addr 0x0000ffff7ab6e2d8)    ;; object: 0x20d04241 <undefined>
0xffff7ab6e200   416  stur x0, [x3, #63]
0xffff7ab6e204   420  ldur x0, [x2, #15]
0xffff7ab6e208   424  add x0, x0, #0x5f (95)
0xffff7ab6e20c   428  stur x0, [x3, #55]
0xffff7ab6e210   432  b #+0x18 (addr 0xffff7ab6e228)
0xffff7ab6e214   436  ldr x0, pc+204 (addr 0x0000ffff7ab6e2e0)    ;; object: 0x20d04241 <undefined>
0xffff7ab6e218   440  stur x0, [x3, #63]
0xffff7ab6e21c   444  ldur x0, [x2, #15]
0xffff7ab6e220   448  add x0, x0, #0x5f (95)
0xffff7ab6e224   452  stur x0, [x3, #55]
0xffff7ab6e228   456  mov x0, x3
0xffff7ab6e22c   460  ret
0xffff7ab6e230   464  sub csp, jssp, #0x10 (16)
0xffff7ab6e234   468  stp fp, lr, [jssp, #-16]!
0xffff7ab6e238   472  movz fp, #0xa00000000
0xffff7ab6e23c   476  sub csp, jssp, #0x8 (8)
0xffff7ab6e240   480  str fp, [jssp, #-8]!
0xffff7ab6e244   484  add fp, jssp, #0x8 (8)
0xffff7ab6e248   488  movz x3, #0x0
0xffff7ab6e24c   492  mov x16, lr
0xffff7ab6e250   496  ldr x17, pc+152 (addr 0x0000ffff7ab6e2e8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab6e254   500  blr x17
0xffff7ab6e258   504  movz x0, #0x4800000000
0xffff7ab6e25c   508  movz x10, #0x0
0xffff7ab6e260   512  sub csp, jssp, #0x10 (16)
0xffff7ab6e264   516  stp x10, x0, [jssp, #-16]!
0xffff7ab6e268   520  movz x0, #0x2
0xffff7ab6e26c   524  movz x1, #0x5b88
0xffff7ab6e270   528  movk x1, #0xe2, lsl #16
0xffff7ab6e274   532  ldr x16, pc+124 (addr 0x0000ffff7ab6e2f0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab6e278   536  blr x16
0xffff7ab6e27c   540  str x0, [jssp, #24]
0xffff7ab6e280   544  ldr x16, pc+120 (addr 0x0000ffff7ab6e2f8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab6e284   548  blr x16
0xffff7ab6e288   552  ldr lr, [jssp, #16]
0xffff7ab6e28c   556  ldp xzr, fp, [jssp], #24
0xffff7ab6e290   560  b #-0x210 (addr 0xffff7ab6e080)
0xffff7ab6e294   564  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0xffff7ab6e298   568  d63f03e0       constant
0xffff7ab6e29c   572  d503201f       constant
0xffff7ab6e2a0   576  20d04201       constant
0xffff7ab6e2a4   580  00000000       constant
0xffff7ab6e2a8   584  20d04201       constant
0xffff7ab6e2ac   588  00000000       constant
0xffff7ab6e2b0   592  20d04201       constant
0xffff7ab6e2b4   596  00000000       constant
0xffff7ab6e2b8   600  20d04519       constant
0xffff7ab6e2bc   604  00000000       constant
0xffff7ab6e2c0   608  7ab2d2c0       constant
0xffff7ab6e2c4   612  0000ffff       constant
0xffff7ab6e2c8   616  20d04201       constant
0xffff7ab6e2cc   620  00000000       constant
0xffff7ab6e2d0   624  7ab2daa0       constant
0xffff7ab6e2d4   628  0000ffff       constant
0xffff7ab6e2d8   632  20d04241       constant
0xffff7ab6e2dc   636  00000000       constant
0xffff7ab6e2e0   640  20d04241       constant
0xffff7ab6e2e4   644  00000000       constant
0xffff7ab6e2e8   648  7ab06820       constant
0xffff7ab6e2ec   652  0000ffff       constant
0xffff7ab6e2f0   656  7ab06260       constant
0xffff7ab6e2f4   660  0000ffff       constant
0xffff7ab6e2f8   664  7ab068e0       constant
0xffff7ab6e2fc   668  0000ffff       constant
0xffff7ab6e300   672  movz x16, #0x0
0xffff7ab6e304   676  sub csp, jssp, #0x10 (16)
0xffff7ab6e308   680  stp fp, lr, [jssp, #-16]!
0xffff7ab6e30c   684  bl #+0x14 (addr 0xffff7ab6e320)
0xffff7ab6e310   688  movz x16, #0x8
0xffff7ab6e314   692  sub csp, jssp, #0x10 (16)
0xffff7ab6e318   696  stp fp, lr, [jssp, #-16]!
0xffff7ab6e31c   700  bl #+0x4 (addr 0xffff7ab6e320)
0xffff7ab6e320   704  movz x17, #0xa00000000
0xffff7ab6e324   708  sub csp, jssp, #0x10 (16)
0xffff7ab6e328   712  stp x17, cp, [jssp, #-16]!
0xffff7ab6e32c   716  add fp, jssp, #0x10 (16)
0xffff7ab6e330   720  ldr x17, pc+24 (addr 0x0000ffff7ab6e348)    ;; lazy deoptimization bailout 0
0xffff7ab6e334   724  add x17, x17, x16
0xffff7ab6e338   728  br x17
0xffff7ab6e33c   732  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab6e340   736  d63f03e0       constant
0xffff7ab6e344   740  d503201f       constant
0xffff7ab6e348   744  7a906000       constant
0xffff7ab6e34c   748  0000ffff       constant


Safepoints (size = 21)
0xffff7ab6e27c   540  000 | x2 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0xffff7ab6e090  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab6e098  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab6e0a0  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab6e0a8  embedded object  (0x20d04519 <the hole>)
0xffff7ab6e17c  code target (STUB)  (0xffff7ab2d2c0)
0xffff7ab6e1b4  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab6e1ec  code target (STUB)  (0xffff7ab2daa0)
0xffff7ab6e1fc  embedded object  (0x20d04241 <undefined>)
0xffff7ab6e214  embedded object  (0x20d04241 <undefined>)
0xffff7ab6e250  code target (STUB)  (0xffff7ab06820)
0xffff7ab6e274  code target (STUB)  (0xffff7ab06260)
0xffff7ab6e280  code target (STUB)  (0xffff7ab068e0)
0xffff7ab6e294  constant pool (size 108)
0xffff7ab6e330  runtime entry
0xffff7ab6e33c  constant pool (size 20)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab71c60     0  ldur x0, [x1, #-1]
0xffff7ab71c64     4  ldur x0, [x0, #47]
0xffff7ab71c68     8  movz x16, #0x737
0xffff7ab71c6c    12  ldr x0, [x0, x16]
0xffff7ab71c70    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab71ce0     0  ldur x0, [x1, #-1]
0xffff7ab71ce4     4  ldur x0, [x0, #47]
0xffff7ab71ce8     8  movz x16, #0x74f
0xffff7ab71cec    12  ldr x0, [x0, x16]
0xffff7ab71cf0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab71d60     0  ldur x0, [x1, #-1]
0xffff7ab71d64     4  ldur x0, [x0, #47]
0xffff7ab71d68     8  movz x16, #0x767
0xffff7ab71d6c    12  ldr x0, [x0, x16]
0xffff7ab71d70    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7ab71de0     0  ldur x0, [x1, #7]
0xffff7ab71de4     4  ldur x0, [x0, #191]
0xffff7ab71de8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7ab71e60     0  ldur x0, [x1, #7]
0xffff7ab71e64     4  ldur x0, [x0, #199]
0xffff7ab71e68     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 317)
0xffff7ab722e0     0  movz x2, #0xe2c0
0xffff7ab722e4     4  movk x2, #0x9ab, lsl #16
0xffff7ab722e8     8  ldp x3, x0, [x2]
0xffff7ab722ec    12  adds x16, x3, #0x50 (80)
0xffff7ab722f0    16  ccmp x16, x0, #nzCv, lo
0xffff7ab722f4    20  b.hi #+0x5c (addr 0xffff7ab72350)
0xffff7ab722f8    24  str x16, [x2]
0xffff7ab722fc    28  orr x3, x3, #0x1
0xffff7ab72300    32  ldr x0, pc+192 (addr 0x0000ffff7ab723c0)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab72304    36  stur x0, [x3, #-1]
0xffff7ab72308    40  movz x0, #0x800000000
0xffff7ab7230c    44  stur x0, [x3, #7]
0xffff7ab72310    48  stur x1, [x3, #15]
0xffff7ab72314    52  stur cp, [x3, #23]
0xffff7ab72318    56  ldr x0, pc+176 (addr 0x0000ffff7ab723c8)    ;; object: 0x20d04519 <the hole>
0xffff7ab7231c    60  stur x0, [x3, #31]
0xffff7ab72320    64  ldur x0, [cp, #39]
0xffff7ab72324    68  stur x0, [x3, #39]
0xffff7ab72328    72  ldr x0, pc+168 (addr 0x0000ffff7ab723d0)    ;; object: 0x20d04241 <undefined>
0xffff7ab7232c    76  stur x0, [x3, #47]
0xffff7ab72330    80  ldr x0, pc+168 (addr 0x0000ffff7ab723d8)    ;; object: 0x20d04241 <undefined>
0xffff7ab72334    84  stur x0, [x3, #55]
0xffff7ab72338    88  ldr x0, pc+168 (addr 0x0000ffff7ab723e0)    ;; object: 0x20d04241 <undefined>
0xffff7ab7233c    92  stur x0, [x3, #63]
0xffff7ab72340    96  ldr x0, pc+168 (addr 0x0000ffff7ab723e8)    ;; object: 0x20d04241 <undefined>
0xffff7ab72344   100  stur x0, [x3, #71]
0xffff7ab72348   104  mov x0, x3
0xffff7ab7234c   108  ret
0xffff7ab72350   112  sub csp, jssp, #0x10 (16)
0xffff7ab72354   116  stp fp, lr, [jssp, #-16]!
0xffff7ab72358   120  movz fp, #0xa00000000
0xffff7ab7235c   124  sub csp, jssp, #0x8 (8)
0xffff7ab72360   128  str fp, [jssp, #-8]!
0xffff7ab72364   132  add fp, jssp, #0x8 (8)
0xffff7ab72368   136  movz x3, #0x0
0xffff7ab7236c   140  mov x16, lr
0xffff7ab72370   144  ldr x17, pc+128 (addr 0x0000ffff7ab723f0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab72374   148  blr x17
0xffff7ab72378   152  movz x0, #0x5000000000
0xffff7ab7237c   156  movz x10, #0x0
0xffff7ab72380   160  sub csp, jssp, #0x10 (16)
0xffff7ab72384   164  stp x10, x0, [jssp, #-16]!
0xffff7ab72388   168  movz x0, #0x2
0xffff7ab7238c   172  movz x1, #0x5b88
0xffff7ab72390   176  movk x1, #0xe2, lsl #16
0xffff7ab72394   180  ldr x16, pc+100 (addr 0x0000ffff7ab723f8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab72398   184  blr x16
0xffff7ab7239c   188  str x0, [jssp, #24]
0xffff7ab723a0   192  ldr x16, pc+96 (addr 0x0000ffff7ab72400)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab723a4   196  blr x16
0xffff7ab723a8   200  ldr lr, [jssp, #16]
0xffff7ab723ac   204  ldp xzr, fp, [jssp], #24
0xffff7ab723b0   208  b #-0xb0 (addr 0xffff7ab72300)
0xffff7ab723b4   212  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0xffff7ab723b8   216  d63f03e0       constant
0xffff7ab723bc   220  d503201f       constant
0xffff7ab723c0   224  4ec06149       constant
0xffff7ab723c4   228  00000000       constant
0xffff7ab723c8   232  20d04519       constant
0xffff7ab723cc   236  00000000       constant
0xffff7ab723d0   240  20d04241       constant
0xffff7ab723d4   244  00000000       constant
0xffff7ab723d8   248  20d04241       constant
0xffff7ab723dc   252  00000000       constant
0xffff7ab723e0   256  20d04241       constant
0xffff7ab723e4   260  00000000       constant
0xffff7ab723e8   264  20d04241       constant
0xffff7ab723ec   268  00000000       constant
0xffff7ab723f0   272  7ab06820       constant
0xffff7ab723f4   276  0000ffff       constant
0xffff7ab723f8   280  7ab06260       constant
0xffff7ab723fc   284  0000ffff       constant
0xffff7ab72400   288  7ab068e0       constant
0xffff7ab72404   292  0000ffff       constant


Safepoints (size = 21)
0xffff7ab7239c   188  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 15)
0xffff7ab72300  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab72318  embedded object  (0x20d04519 <the hole>)
0xffff7ab72328  embedded object  (0x20d04241 <undefined>)
0xffff7ab72330  embedded object  (0x20d04241 <undefined>)
0xffff7ab72338  embedded object  (0x20d04241 <undefined>)
0xffff7ab72340  embedded object  (0x20d04241 <undefined>)
0xffff7ab72370  code target (STUB)  (0xffff7ab06820)
0xffff7ab72394  code target (STUB)  (0xffff7ab06260)
0xffff7ab723a0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab723b4  constant pool (size 84)


kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 1
type = NORMAL
name = ToBooleanICStub(Undefined)
compiler = crankshaft
Instructions (size = 128)
0xffff7ab729c0     0  ldr x16, [x26, #40]
0xffff7ab729c4     4  cmp x0, x16
0xffff7ab729c8     8  b.eq #+0x8 (addr 0xffff7ab729d0)
0xffff7ab729cc    12  b #+0x2c (addr 0xffff7ab729f8)
0xffff7ab729d0    16  ldr x0, pc+24 (addr 0x0000ffff7ab729e8)    ;; object: 0x20d042b1 <false>
0xffff7ab729d4    20  ret
0xffff7ab729d8    24  ldr x0, pc+24 (addr 0x0000ffff7ab729f0)    ;; object: 0x20d04281 <true>
0xffff7ab729dc    28  ret
0xffff7ab729e0    32  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab729e4    36  d63f03e0       constant
0xffff7ab729e8    40  20d042b1       constant
0xffff7ab729ec    44  00000000       constant
0xffff7ab729f0    48  20d04281       constant
0xffff7ab729f4    52  00000000       constant
0xffff7ab729f8    56  movz x16, #0x0
0xffff7ab729fc    60  sub csp, jssp, #0x10 (16)
0xffff7ab72a00    64  stp fp, lr, [jssp, #-16]!
0xffff7ab72a04    68  bl #+0x4 (addr 0xffff7ab72a08)
0xffff7ab72a08    72  movz x17, #0xa00000000
0xffff7ab72a0c    76  sub csp, jssp, #0x10 (16)
0xffff7ab72a10    80  stp x17, cp, [jssp, #-16]!
0xffff7ab72a14    84  add fp, jssp, #0x10 (16)
0xffff7ab72a18    88  ldr x17, pc+24 (addr 0x0000ffff7ab72a30)    ;; lazy deoptimization bailout 0
0xffff7ab72a1c    92  add x17, x17, x16
0xffff7ab72a20    96  br x17
0xffff7ab72a24   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab72a28   104  d63f03e0       constant
0xffff7ab72a2c   108  d503201f       constant
0xffff7ab72a30   112  7a906000       constant
0xffff7ab72a34   116  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab729d0  embedded object  (0x20d042b1 <false>)
0xffff7ab729d8  embedded object  (0x20d04281 <true>)
0xffff7ab729e0  constant pool (size 24)
0xffff7ab72a18  runtime entry
0xffff7ab72a24  constant pool (size 20)


kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0xffff7ab72aa0     0  mov x2, x0
0xffff7ab72aa4     4  stur x2, [x1, #23]
0xffff7ab72aa8     8  tbz w2, #0, #+0x34 (addr 0xffff7ab72adc)
0xffff7ab72aac    12  add x3, x1, #0x17 (23)
0xffff7ab72ab0    16  and x2, x2, #0xfffffffffff00000
0xffff7ab72ab4    20  ldr x2, [x2, #8]
0xffff7ab72ab8    24  tbz w2, #1, #+0x24 (addr 0xffff7ab72adc)
0xffff7ab72abc    28  and x2, x1, #0xfffffffffff00000
0xffff7ab72ac0    32  ldr x2, [x2, #8]
0xffff7ab72ac4    36  tbz w2, #2, #+0x18 (addr 0xffff7ab72adc)
0xffff7ab72ac8    40  sub csp, jssp, #0x8 (8)
0xffff7ab72acc    44  str lr, [jssp, #-8]!
0xffff7ab72ad0    48  ldr x16, pc+24 (addr 0x0000ffff7ab72ae8)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab72ad4    52  blr x16
0xffff7ab72ad8    56  ldr lr, [jssp], #8
0xffff7ab72adc    60  ret
0xffff7ab72ae0    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab72ae4    68  d63f03e0       constant
0xffff7ab72ae8    72  7ab170c0       constant
0xffff7ab72aec    76  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 7)
0xffff7ab72ad0  code target (STUB)  (0xffff7ab170c0)
0xffff7ab72ae0  constant pool (size 16)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = SMI*SMI -> SMI
compare_operation = EQ
name = CompareICStub
compiler = unknown
Instructions (size = 152)
0xffff7ab78bc0     0  orr x16, x0, x1
0xffff7ab78bc4     4  tbnz w16, #0, #+0xc (addr 0xffff7ab78bd0)
0xffff7ab78bc8     8  sub x0, x0, x1
0xffff7ab78bcc    12  ret
0xffff7ab78bd0    16  movz x16, #0xc00000000
0xffff7ab78bd4    20  sub csp, jssp, #0x10 (16)
0xffff7ab78bd8    24  stp fp, lr, [jssp, #-16]!
0xffff7ab78bdc    28  sub csp, jssp, #0x10 (16)
0xffff7ab78be0    32  str x16, [jssp, #-8]!
0xffff7ab78be4    36  ldr x17, pc+92 (addr 0x0000ffff7ab78c40)    ;; object: 0xffff7ab78b61 <Code: COMPARE_IC>
0xffff7ab78be8    40  sub csp, jssp, #0x10 (16)
0xffff7ab78bec    44  str x17, [jssp, #-8]!
0xffff7ab78bf0    48  add fp, jssp, #0x10 (16)
0xffff7ab78bf4    52  sub csp, jssp, #0x18 (24)
0xffff7ab78bf8    56  stp lr, x0, [jssp, #-24]!
0xffff7ab78bfc    60  str x1, [jssp, #16]
0xffff7ab78c00    64  movz x10, #0x2d00000000
0xffff7ab78c04    68  sub csp, jssp, #0x18 (24)
0xffff7ab78c08    72  stp x10, x0, [jssp, #-24]!
0xffff7ab78c0c    76  str x1, [jssp, #16]
0xffff7ab78c10    80  movz x0, #0x3
0xffff7ab78c14    84  ldr x1, pc+52 (addr 0x0000ffff7ab78c48)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ab78c18    88  ldr x16, pc+56 (addr 0x0000ffff7ab78c50)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab78c1c    92  blr x16
0xffff7ab78c20    96  add x11, x0, #0x5f (95)
0xffff7ab78c24   100  ldr x1, [jssp, #16]
0xffff7ab78c28   104  ldp lr, x0, [jssp], #24
0xffff7ab78c2c   108  mov jssp, fp
0xffff7ab78c30   112  ldp fp, lr, [jssp], #16
0xffff7ab78c34   116  br x11
0xffff7ab78c38   120  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab78c3c   124  d63f03e0       constant
0xffff7ab78c40   128  7ab78b61       constant
0xffff7ab78c44   132  0000ffff       constant
0xffff7ab78c48   136  00c8a980       constant
0xffff7ab78c4c   140  00000000       constant
0xffff7ab78c50   144  7ab06060       constant
0xffff7ab78c54   148  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab78be4  embedded object  (0xffff7ab78b61 <Code: COMPARE_IC>)
0xffff7ab78c14  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ab78c18  code target (STUB)  (0xffff7ab06060)
0xffff7ab78c38  constant pool (size 32)


kind = HANDLER
major_key = <NoCache>Stub
name = next
compiler = unknown
Instructions (size = 120)
0xffff7ab78cc0     0  sub csp, jssp, #0x8 (8)
0xffff7ab78cc4     4  str x3, [jssp, #-8]!
0xffff7ab78cc8     8  sub csp, jssp, #0x8 (8)
0xffff7ab78ccc    12  str x0, [jssp, #-8]!
0xffff7ab78cd0    16  ldr x0, pc+72 (addr 0x0000ffff7ab78d18)    ;; object: 0x20dad1b1 Cell for 0
0xffff7ab78cd4    20  ldur x0, [x0, #7]
0xffff7ab78cd8    24  cmp x0, #0x0 (0)
0xffff7ab78cdc    28  b.ne #+0x14 (addr 0xffff7ab78cf0)
0xffff7ab78ce0    32  ldr x3, pc+64 (addr 0x0000ffff7ab78d20)    ;; object: 0x20dad1c1 WeakCell for 0x56e7bb31 <an Object with map 0x4ec13f01>
0xffff7ab78ce4    36  ldur x3, [x3, #7]
0xffff7ab78ce8    40  tbz w3, #0, #+0x8 (addr 0xffff7ab78cf0)
0xffff7ab78cec    44  b #+0x14 (addr 0xffff7ab78d00)
0xffff7ab78cf0    48  ldr x0, [jssp], #8
0xffff7ab78cf4    52  ldr x3, [jssp], #8
0xffff7ab78cf8    56  ldr x16, pc+48 (addr 0x0000ffff7ab78d28)    ;; code: BUILTIN
0xffff7ab78cfc    60  br x16
0xffff7ab78d00    64  add jssp, jssp, #0x10 (16)
0xffff7ab78d04    68  mov x1, x3
0xffff7ab78d08    72  ldr x16, pc+40 (addr 0x0000ffff7ab78d30)    ;; code: HANDLER, LoadConstantStub, minor: 0
0xffff7ab78d0c    76  br x16
0xffff7ab78d10    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7ab78d14    84  d63f03e0       constant
0xffff7ab78d18    88  20dad1b1       constant
0xffff7ab78d1c    92  00000000       constant
0xffff7ab78d20    96  20dad1c1       constant
0xffff7ab78d24   100  00000000       constant
0xffff7ab78d28   104  7ab222e0       constant
0xffff7ab78d2c   108  0000ffff       constant
0xffff7ab78d30   112  7ab431a0       constant
0xffff7ab78d34   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab78cd0  embedded object  (0x20dad1b1 Cell for 0)
0xffff7ab78ce0  embedded object  (0x20dad1c1 WeakCell for 0x56e7bb31 <an Object with map 0x4ec13f01>)
0xffff7ab78cf8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab78d08  code target (HANDLER)  (0xffff7ab431a0)
0xffff7ab78d10  constant pool (size 40)

kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0xffff7ab78da0     0  ldur x0, [x1, #31]
0xffff7ab78da4     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0xffff7ab78e20     0  ldur x0, [x1, #39]
0xffff7ab78e24     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0xffff7ab78ea0     0  mov x5, x0
0xffff7ab78ea4     4  tbnz w5, #0, #+0xc (addr 0xffff7ab78eb0)
0xffff7ab78ea8     8  stur x5, [x1, #31]
0xffff7ab78eac    12  ret
0xffff7ab78eb0    16  movz x16, #0x0
0xffff7ab78eb4    20  sub csp, jssp, #0x10 (16)
0xffff7ab78eb8    24  stp fp, lr, [jssp, #-16]!
0xffff7ab78ebc    28  bl #+0x4 (addr 0xffff7ab78ec0)
0xffff7ab78ec0    32  movz x17, #0xa00000000
0xffff7ab78ec4    36  sub csp, jssp, #0x10 (16)
0xffff7ab78ec8    40  stp x17, cp, [jssp, #-16]!
0xffff7ab78ecc    44  add fp, jssp, #0x10 (16)
0xffff7ab78ed0    48  ldr x17, pc+24 (addr 0x0000ffff7ab78ee8)    ;; lazy deoptimization bailout 0
0xffff7ab78ed4    52  add x17, x17, x16
0xffff7ab78ed8    56  br x17
0xffff7ab78edc    60  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab78ee0    64  d63f03e0       constant
0xffff7ab78ee4    68  d503201f       constant
0xffff7ab78ee8    72  7a906000       constant
0xffff7ab78eec    76  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 8)
0xffff7ab78ed0  runtime entry
0xffff7ab78edc  constant pool (size 20)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab78f60     0  ldur x0, [x1, #-1]
0xffff7ab78f64     4  ldur x0, [x0, #47]
0xffff7ab78f68     8  movz x16, #0xdc7
0xffff7ab78f6c    12  ldr x0, [x0, x16]
0xffff7ab78f70    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab78fe0     0  ldur x0, [x1, #-1]
0xffff7ab78fe4     4  ldur x0, [x0, #47]
0xffff7ab78fe8     8  movz x16, #0x6a7
0xffff7ab78fec    12  ldr x0, [x0, x16]
0xffff7ab78ff0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab79060     0  ldur x0, [x1, #-1]
0xffff7ab79064     4  ldur x0, [x0, #47]
0xffff7ab79068     8  movz x16, #0x6bf
0xffff7ab7906c    12  ldr x0, [x0, x16]
0xffff7ab79070    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab790e0     0  ldur x0, [x1, #-1]
0xffff7ab790e4     4  ldur x0, [x0, #47]
0xffff7ab790e8     8  movz x16, #0x6ef
0xffff7ab790ec    12  ldr x0, [x0, x16]
0xffff7ab790f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab79160     0  ldur x0, [x1, #-1]
0xffff7ab79164     4  ldur x0, [x0, #47]
0xffff7ab79168     8  movz x16, #0xddf
0xffff7ab7916c    12  ldr x0, [x0, x16]
0xffff7ab79170    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab791e0     0  ldur x0, [x1, #-1]
0xffff7ab791e4     4  ldur x0, [x0, #47]
0xffff7ab791e8     8  movz x16, #0xdf7
0xffff7ab791ec    12  ldr x0, [x0, x16]
0xffff7ab791f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab79260     0  ldur x0, [x1, #-1]
0xffff7ab79264     4  ldur x0, [x0, #47]
0xffff7ab79268     8  movz x16, #0xe27
0xffff7ab7926c    12  ldr x0, [x0, x16]
0xffff7ab79270    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab792e0     0  ldur x0, [x1, #-1]
0xffff7ab792e4     4  ldur x0, [x0, #47]
0xffff7ab792e8     8  movz x16, #0xd1f
0xffff7ab792ec    12  ldr x0, [x0, x16]
0xffff7ab792f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab79360     0  ldur x0, [x1, #-1]
0xffff7ab79364     4  ldur x0, [x0, #47]
0xffff7ab79368     8  movz x16, #0xd37
0xffff7ab7936c    12  ldr x0, [x0, x16]
0xffff7ab79370    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab793e0     0  ldur x0, [x1, #-1]
0xffff7ab793e4     4  ldur x0, [x0, #47]
0xffff7ab793e8     8  movz x16, #0x647
0xffff7ab793ec    12  ldr x0, [x0, x16]
0xffff7ab793f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab79460     0  ldur x0, [x1, #-1]
0xffff7ab79464     4  ldur x0, [x0, #47]
0xffff7ab79468     8  movz x16, #0x65f
0xffff7ab7946c    12  ldr x0, [x0, x16]
0xffff7ab79470    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab794e0     0  ldur x0, [x1, #-1]
0xffff7ab794e4     4  ldur x0, [x0, #47]
0xffff7ab794e8     8  movz x16, #0x71f
0xffff7ab794ec    12  ldr x0, [x0, x16]
0xffff7ab794f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab79560     0  ldur x0, [x1, #7]
0xffff7ab79564     4  movz x16, #0x1ef
0xffff7ab79568     8  ldr x0, [x0, x16]
0xffff7ab7956c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab795e0     0  ldur x0, [x1, #7]
0xffff7ab795e4     4  movz x16, #0x1f7
0xffff7ab795e8     8  ldr x0, [x0, x16]
0xffff7ab795ec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab79660     0  ldur x0, [x1, #-1]
0xffff7ab79664     4  ldur x0, [x0, #47]
0xffff7ab79668     8  movz x16, #0xd7f
0xffff7ab7966c    12  ldr x0, [x0, x16]
0xffff7ab79670    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab796e0     0  ldur x0, [x1, #-1]
0xffff7ab796e4     4  ldur x0, [x0, #47]
0xffff7ab796e8     8  movz x16, #0xd97
0xffff7ab796ec    12  ldr x0, [x0, x16]
0xffff7ab796f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab79760     0  ldur x0, [x1, #-1]
0xffff7ab79764     4  ldur x0, [x0, #47]
0xffff7ab79768     8  movz x16, #0xdaf
0xffff7ab7976c    12  ldr x0, [x0, x16]
0xffff7ab79770    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab797e0     0  ldur x0, [x1, #-1]
0xffff7ab797e4     4  ldur x0, [x0, #47]
0xffff7ab797e8     8  movz x16, #0xbcf
0xffff7ab797ec    12  ldr x0, [x0, x16]
0xffff7ab797f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab79860     0  ldur x0, [x1, #-1]
0xffff7ab79864     4  ldur x0, [x0, #47]
0xffff7ab79868     8  movz x16, #0xbe7
0xffff7ab7986c    12  ldr x0, [x0, x16]
0xffff7ab79870    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab798e0     0  ldur x0, [x1, #-1]
0xffff7ab798e4     4  ldur x0, [x0, #47]
0xffff7ab798e8     8  movz x16, #0xbff
0xffff7ab798ec    12  ldr x0, [x0, x16]
0xffff7ab798f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab79960     0  ldur x0, [x1, #-1]
0xffff7ab79964     4  ldur x0, [x0, #47]
0xffff7ab79968     8  movz x16, #0xc17
0xffff7ab7996c    12  ldr x0, [x0, x16]
0xffff7ab79970    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab799e0     0  ldur x0, [x1, #-1]
0xffff7ab799e4     4  ldur x0, [x0, #47]
0xffff7ab799e8     8  movz x16, #0xc2f
0xffff7ab799ec    12  ldr x0, [x0, x16]
0xffff7ab799f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab79a60     0  ldur x0, [x1, #-1]
0xffff7ab79a64     4  ldur x0, [x0, #47]
0xffff7ab79a68     8  movz x16, #0xc47
0xffff7ab79a6c    12  ldr x0, [x0, x16]
0xffff7ab79a70    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab79ae0     0  ldur x0, [x1, #-1]
0xffff7ab79ae4     4  ldur x0, [x0, #47]
0xffff7ab79ae8     8  movz x16, #0xd4f
0xffff7ab79aec    12  ldr x0, [x0, x16]
0xffff7ab79af0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab79b60     0  ldur x0, [x1, #-1]
0xffff7ab79b64     4  ldur x0, [x0, #47]
0xffff7ab79b68     8  movz x16, #0xd67
0xffff7ab79b6c    12  ldr x0, [x0, x16]
0xffff7ab79b70    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab79be0     0  ldur x0, [x1, #-1]
0xffff7ab79be4     4  ldur x0, [x0, #47]
0xffff7ab79be8     8  movz x16, #0x77f
0xffff7ab79bec    12  ldr x0, [x0, x16]
0xffff7ab79bf0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab79c60     0  ldur x0, [x1, #-1]
0xffff7ab79c64     4  ldur x0, [x0, #47]
0xffff7ab79c68     8  movz x16, #0x677
0xffff7ab79c6c    12  ldr x0, [x0, x16]
0xffff7ab79c70    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab79ce0     0  ldur x0, [x1, #7]
0xffff7ab79ce4     4  movz x16, #0x19f
0xffff7ab79ce8     8  ldr x0, [x0, x16]
0xffff7ab79cec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab7b1c0     0  ldur x0, [x1, #-1]
0xffff7ab7b1c4     4  ldur x0, [x0, #47]
0xffff7ab7b1c8     8  movz x16, #0x20f
0xffff7ab7b1cc    12  ldr x0, [x0, x16]
0xffff7ab7b1d0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab7b240     0  ldur x0, [x1, #-1]
0xffff7ab7b244     4  ldur x0, [x0, #47]
0xffff7ab7b248     8  movz x16, #0x227
0xffff7ab7b24c    12  ldr x0, [x0, x16]
0xffff7ab7b250    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab7b2c0     0  ldur x0, [x1, #-1]
0xffff7ab7b2c4     4  ldur x0, [x0, #47]
0xffff7ab7b2c8     8  movz x16, #0x23f
0xffff7ab7b2cc    12  ldr x0, [x0, x16]
0xffff7ab7b2d0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab7b340     0  ldur x0, [x1, #-1]
0xffff7ab7b344     4  ldur x0, [x0, #47]
0xffff7ab7b348     8  movz x16, #0x257
0xffff7ab7b34c    12  ldr x0, [x0, x16]
0xffff7ab7b350    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab7b3c0     0  ldur x0, [x1, #-1]
0xffff7ab7b3c4     4  ldur x0, [x0, #47]
0xffff7ab7b3c8     8  movz x16, #0x26f
0xffff7ab7b3cc    12  ldr x0, [x0, x16]
0xffff7ab7b3d0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab7b440     0  ldur x0, [x1, #-1]
0xffff7ab7b444     4  ldur x0, [x0, #47]
0xffff7ab7b448     8  movz x16, #0x287
0xffff7ab7b44c    12  ldr x0, [x0, x16]
0xffff7ab7b450    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7ab7b4c0     0  ldur x0, [x1, #7]
0xffff7ab7b4c4     4  ldur x0, [x0, #135]
0xffff7ab7b4c8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7ab7b540     0  ldur x0, [x1, #7]
0xffff7ab7b544     4  ldur x0, [x0, #151]
0xffff7ab7b548     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 3
type = NORMAL
name = ToBooleanICStub(Undefined,Bool)
compiler = crankshaft
Instructions (size = 152)
0xffff7ab7b5c0     0  ldr x16, [x26, #40]
0xffff7ab7b5c4     4  cmp x0, x16
0xffff7ab7b5c8     8  b.eq #+0x20 (addr 0xffff7ab7b5e8)
0xffff7ab7b5cc    12  ldr x16, [x26, #64]
0xffff7ab7b5d0    16  cmp x0, x16
0xffff7ab7b5d4    20  b.eq #+0x1c (addr 0xffff7ab7b5f0)
0xffff7ab7b5d8    24  ldr x16, [x26, #72]
0xffff7ab7b5dc    28  cmp x0, x16
0xffff7ab7b5e0    32  b.eq #+0x8 (addr 0xffff7ab7b5e8)
0xffff7ab7b5e4    36  b #+0x2c (addr 0xffff7ab7b610)
0xffff7ab7b5e8    40  ldr x0, pc+24 (addr 0x0000ffff7ab7b600)    ;; object: 0x20d042b1 <false>
0xffff7ab7b5ec    44  ret
0xffff7ab7b5f0    48  ldr x0, pc+24 (addr 0x0000ffff7ab7b608)    ;; object: 0x20d04281 <true>
0xffff7ab7b5f4    52  ret
0xffff7ab7b5f8    56  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab7b5fc    60  d63f03e0       constant
0xffff7ab7b600    64  20d042b1       constant
0xffff7ab7b604    68  00000000       constant
0xffff7ab7b608    72  20d04281       constant
0xffff7ab7b60c    76  00000000       constant
0xffff7ab7b610    80  movz x16, #0x0
0xffff7ab7b614    84  sub csp, jssp, #0x10 (16)
0xffff7ab7b618    88  stp fp, lr, [jssp, #-16]!
0xffff7ab7b61c    92  bl #+0x4 (addr 0xffff7ab7b620)
0xffff7ab7b620    96  movz x17, #0xa00000000
0xffff7ab7b624   100  sub csp, jssp, #0x10 (16)
0xffff7ab7b628   104  stp x17, cp, [jssp, #-16]!
0xffff7ab7b62c   108  add fp, jssp, #0x10 (16)
0xffff7ab7b630   112  ldr x17, pc+24 (addr 0x0000ffff7ab7b648)    ;; lazy deoptimization bailout 0
0xffff7ab7b634   116  add x17, x17, x16
0xffff7ab7b638   120  br x17
0xffff7ab7b63c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab7b640   128  d63f03e0       constant
0xffff7ab7b644   132  d503201f       constant
0xffff7ab7b648   136  7a906000       constant
0xffff7ab7b64c   140  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab7b5e8  embedded object  (0x20d042b1 <false>)
0xffff7ab7b5f0  embedded object  (0x20d04281 <true>)
0xffff7ab7b5f8  constant pool (size 24)
0xffff7ab7b630  runtime entry
0xffff7ab7b63c  constant pool (size 20)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7ab7c000     0  ldur x0, [x1, #7]
0xffff7ab7c004     4  ldur x0, [x0, #119]
0xffff7ab7c008     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = next
compiler = unknown
Instructions (size = 152)
0xffff7ab7c540     0  sub csp, jssp, #0x8 (8)
0xffff7ab7c544     4  str x3, [jssp, #-8]!
0xffff7ab7c548     8  sub csp, jssp, #0x8 (8)
0xffff7ab7c54c    12  str x4, [jssp, #-8]!
0xffff7ab7c550    16  ldr x3, pc+88 (addr 0x0000ffff7ab7c5a8)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7ab7c554    20  ldur x3, [x3, #7]
0xffff7ab7c558    24  cmp x3, #0x0 (0)
0xffff7ab7c55c    28  b.ne #+0x30 (addr 0xffff7ab7c58c)
0xffff7ab7c560    32  tbz w0, #0, #+0x2c (addr 0xffff7ab7c58c)
0xffff7ab7c564    36  ldr x5, pc+76 (addr 0x0000ffff7ab7c5b0)    ;; object: 0x20db0739 WeakCell for 0x4ec16479 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab7c568    40  ldur x5, [x5, #7]
0xffff7ab7c56c    44  tbz w5, #0, #+0x20 (addr 0xffff7ab7c58c)
0xffff7ab7c570    48  ldursw x4, [x5, #15]
0xffff7ab7c574    52  tbnz w4, #23, #+0x18 (addr 0xffff7ab7c58c)
0xffff7ab7c578    56  ldr x4, [jssp], #8
0xffff7ab7c57c    60  ldr x3, [jssp], #8
0xffff7ab7c580    64  ldr x2, pc+56 (addr 0x0000ffff7ab7c5b8)    ;; object: 0x20d05209 <String[4]: next>
0xffff7ab7c584    68  ldr x16, pc+60 (addr 0x0000ffff7ab7c5c0)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0xffff7ab7c588    72  br x16
0xffff7ab7c58c    76  ldr x2, pc+60 (addr 0x0000ffff7ab7c5c8)    ;; object: 0x20d05209 <String[4]: next>
0xffff7ab7c590    80  ldr x4, [jssp], #8
0xffff7ab7c594    84  ldr x3, [jssp], #8
0xffff7ab7c598    88  ldr x16, pc+56 (addr 0x0000ffff7ab7c5d0)    ;; code: BUILTIN
0xffff7ab7c59c    92  br x16
0xffff7ab7c5a0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab7c5a4   100  d63f03e0       constant
0xffff7ab7c5a8   104  20d5b0f1       constant
0xffff7ab7c5ac   108  00000000       constant
0xffff7ab7c5b0   112  20db0739       constant
0xffff7ab7c5b4   116  00000000       constant
0xffff7ab7c5b8   120  20d05209       constant
0xffff7ab7c5bc   124  00000000       constant
0xffff7ab7c5c0   128  7ab38860       constant
0xffff7ab7c5c4   132  0000ffff       constant
0xffff7ab7c5c8   136  20d05209       constant
0xffff7ab7c5cc   140  00000000       constant
0xffff7ab7c5d0   144  7ab22420       constant
0xffff7ab7c5d4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7ab7c550  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7ab7c564  embedded object  (0x20db0739 WeakCell for 0x4ec16479 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab7c580  embedded object  (0x20d05209 <String[4]: next>)
0xffff7ab7c584  code target (HANDLER)  (0xffff7ab38860)
0xffff7ab7c58c  embedded object  (0x20d05209 <String[4]: next>)
0xffff7ab7c598  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab7c5a0  constant pool (size 56)

kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab7cc40     0  ldur x0, [x1, #-1]
0xffff7ab7cc44     4  ldur x0, [x0, #47]
0xffff7ab7cc48     8  movz x16, #0x1c7
0xffff7ab7cc4c    12  ldr x0, [x0, x16]
0xffff7ab7cc50    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab7ccc0     0  ldur x0, [x1, #-1]
0xffff7ab7ccc4     4  ldur x0, [x0, #47]
0xffff7ab7ccc8     8  movz x16, #0x1df
0xffff7ab7cccc    12  ldr x0, [x0, x16]
0xffff7ab7ccd0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab7cd40     0  ldur x0, [x1, #-1]
0xffff7ab7cd44     4  ldur x0, [x0, #47]
0xffff7ab7cd48     8  movz x16, #0x1f7
0xffff7ab7cd4c    12  ldr x0, [x0, x16]
0xffff7ab7cd50    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*INTERNALIZED_STRING -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 624)
0xffff7ab7d920     0  orr x16, x1, x0
0xffff7ab7d924     4  tbnz w16, #0, #+0x10 (addr 0xffff7ab7d934)
0xffff7ab7d928     8  asr x1, x1, #32
0xffff7ab7d92c    12  sub x0, x1, x0, asr #32
0xffff7ab7d930    16  ret
0xffff7ab7d934    20  cmp x0, x1
0xffff7ab7d938    24  b.ne #+0x30 (addr 0xffff7ab7d968)
0xffff7ab7d93c    28  ldur x16, [x0, #-1]
0xffff7ab7d940    32  ldr x17, [x26, #120]
0xffff7ab7d944    36  cmp x16, x17
0xffff7ab7d948    40  b.eq #+0xc (addr 0xffff7ab7d954)
0xffff7ab7d94c    44  movz x0, #0x0
0xffff7ab7d950    48  ret
0xffff7ab7d954    52  ldur d0, [x0, #7]
0xffff7ab7d958    56  fcmp d0, d0
0xffff7ab7d95c    60  b.vc #-0x10 (addr 0xffff7ab7d94c)
0xffff7ab7d960    64  movn x0, #0x0
0xffff7ab7d964    68  ret
0xffff7ab7d968    72  and x16, x1, x0
0xffff7ab7d96c    76  tbnz w16, #0, #+0x64 (addr 0xffff7ab7d9d0)
0xffff7ab7d970    80  tbz w0, #0, #+0x24 (addr 0xffff7ab7d994)
0xffff7ab7d974    84  ldur x16, [x0, #-1]
0xffff7ab7d978    88  ldr x17, [x26, #120]
0xffff7ab7d97c    92  cmp x16, x17
0xffff7ab7d980    96  b.eq #+0x8 (addr 0xffff7ab7d988)
0xffff7ab7d984   100  ret
0xffff7ab7d988   104  ldur d0, [x0, #7]
0xffff7ab7d98c   108  scvtf d1, x1, #32
0xffff7ab7d990   112  b #+0x24 (addr 0xffff7ab7d9b4)
0xffff7ab7d994   116  ldur x16, [x1, #-1]
0xffff7ab7d998   120  ldr x17, [x26, #120]
0xffff7ab7d99c   124  cmp x16, x17
0xffff7ab7d9a0   128  b.eq #+0xc (addr 0xffff7ab7d9ac)
0xffff7ab7d9a4   132  movz x0, #0x1
0xffff7ab7d9a8   136  ret
0xffff7ab7d9ac   140  ldur d1, [x1, #7]
0xffff7ab7d9b0   144  scvtf d0, x0, #32
0xffff7ab7d9b4   148  fcmp d1, d0
0xffff7ab7d9b8   152  b.vs #+0x10 (addr 0xffff7ab7d9c8)
0xffff7ab7d9bc   156  cset x0, gt
0xffff7ab7d9c0   160  csinv x0, x0, xzr, ge
0xffff7ab7d9c4   164  ret
0xffff7ab7d9c8   168  movn x0, #0x0
0xffff7ab7d9cc   172  ret
0xffff7ab7d9d0   176  ldur x10, [x0, #-1]
0xffff7ab7d9d4   180  ldur x12, [x1, #-1]
0xffff7ab7d9d8   184  ldrb w11, [x10, #11]
0xffff7ab7d9dc   188  ldrb w13, [x12, #11]
0xffff7ab7d9e0   192  cmp x11, #0xb1 (177)
0xffff7ab7d9e4   196  b.lt #+0x8 (addr 0xffff7ab7d9ec)
0xffff7ab7d9e8   200  ret
0xffff7ab7d9ec   204  cmp x11, #0x83 (131)
0xffff7ab7d9f0   208  movz x16, #0x83
0xffff7ab7d9f4   212  ccmp x13, x16, #nZcv, ne
0xffff7ab7d9f8   216  movz x16, #0xb1
0xffff7ab7d9fc   220  ccmp x13, x16, #NzcV, ne
0xffff7ab7da00   224  b.ge #-0x18 (addr 0xffff7ab7d9e8)
0xffff7ab7da04   228  orr x14, x13, x11
0xffff7ab7da08   232  tst x14, #0xc0
0xffff7ab7da0c   236  b.eq #-0x24 (addr 0xffff7ab7d9e8)
0xffff7ab7da10   240  cmp x11, #0x81 (129)
0xffff7ab7da14   244  b.ne #+0x18 (addr 0xffff7ab7da2c)
0xffff7ab7da18   248  cmp x12, x10
0xffff7ab7da1c   252  b.ne #+0x10 (addr 0xffff7ab7da2c)
0xffff7ab7da20   256  ldur d1, [x1, #7]
0xffff7ab7da24   260  ldur d0, [x0, #7]
0xffff7ab7da28   264  b #-0x74 (addr 0xffff7ab7d9b4)
0xffff7ab7da2c   268  movz x16, #0x87
0xffff7ab7da30   272  and x14, x13, x16
0xffff7ab7da34   276  movz x16, #0x87
0xffff7ab7da38   280  and x15, x11, x16
0xffff7ab7da3c   284  cmp x14, #0x4 (4)
0xffff7ab7da40   288  ccmp x15, #4, #nzcv, eq
0xffff7ab7da44   292  b.ne #+0x5c (addr 0xffff7ab7daa0)
0xffff7ab7da48   296  ldur x10, [x1, #15]
0xffff7ab7da4c   300  ldur x11, [x0, #15]
0xffff7ab7da50   304  cmp x10, x11
0xffff7ab7da54   308  b.eq #+0xc (addr 0xffff7ab7da60)
0xffff7ab7da58   312  movz x0, #0x100000000
0xffff7ab7da5c   316  ret
0xffff7ab7da60   320  cbnz x10, #+0xc (addr 0xffff7ab7da6c)
0xffff7ab7da64   324  movz x0, #0x0
0xffff7ab7da68   328  ret
0xffff7ab7da6c   332  asr x10, x10, #32
0xffff7ab7da70   336  add x11, x10, #0x17 (23)
0xffff7ab7da74   340  add x1, x1, x11
0xffff7ab7da78   344  add x0, x0, x11
0xffff7ab7da7c   348  neg x10, x10
0xffff7ab7da80   352  ldrb w11, [x1, x10]
0xffff7ab7da84   356  ldrb w12, [x0, x10]
0xffff7ab7da88   360  cmp x11, x12
0xffff7ab7da8c   364  b.ne #-0x34 (addr 0xffff7ab7da58)
0xffff7ab7da90   368  add x10, x10, #0x1 (1)
0xffff7ab7da94   372  cbnz x10, #-0x14 (addr 0xffff7ab7da80)
0xffff7ab7da98   376  movz x0, #0x0
0xffff7ab7da9c   380  ret
0xffff7ab7daa0   384  movz x16, #0xc00000000
0xffff7ab7daa4   388  sub csp, jssp, #0x10 (16)
0xffff7ab7daa8   392  stp fp, lr, [jssp, #-16]!
0xffff7ab7daac   396  sub csp, jssp, #0x10 (16)
0xffff7ab7dab0   400  str x16, [jssp, #-8]!
0xffff7ab7dab4   404  ldr x17, pc+172 (addr 0x0000ffff7ab7db60)    ;; object: 0xffff7ab7d8c1 <Code: COMPARE_IC>
0xffff7ab7dab8   408  sub csp, jssp, #0x10 (16)
0xffff7ab7dabc   412  str x17, [jssp, #-8]!
0xffff7ab7dac0   416  add fp, jssp, #0x10 (16)
0xffff7ab7dac4   420  sub csp, jssp, #0x10 (16)
0xffff7ab7dac8   424  stp x0, x1, [jssp, #-16]!
0xffff7ab7dacc   428  movz x0, #0x2
0xffff7ab7dad0   432  ldr x1, pc+152 (addr 0x0000ffff7ab7db68)    ;; external reference (Runtime::StrictEqual)
0xffff7ab7dad4   436  ldr x16, pc+156 (addr 0x0000ffff7ab7db70)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab7dad8   440  blr x16
0xffff7ab7dadc   444  mov jssp, fp
0xffff7ab7dae0   448  ldp fp, lr, [jssp], #16
0xffff7ab7dae4   452  ldr x1, [x26, #64]
0xffff7ab7dae8   456  sub x0, x0, x1
0xffff7ab7daec   460  ret
0xffff7ab7daf0   464  movz x16, #0xc00000000
0xffff7ab7daf4   468  sub csp, jssp, #0x10 (16)
0xffff7ab7daf8   472  stp fp, lr, [jssp, #-16]!
0xffff7ab7dafc   476  sub csp, jssp, #0x10 (16)
0xffff7ab7db00   480  str x16, [jssp, #-8]!
0xffff7ab7db04   484  ldr x17, pc+116 (addr 0x0000ffff7ab7db78)    ;; object: 0xffff7ab7d8c1 <Code: COMPARE_IC>
0xffff7ab7db08   488  sub csp, jssp, #0x10 (16)
0xffff7ab7db0c   492  str x17, [jssp, #-8]!
0xffff7ab7db10   496  add fp, jssp, #0x10 (16)
0xffff7ab7db14   500  sub csp, jssp, #0x18 (24)
0xffff7ab7db18   504  stp lr, x0, [jssp, #-24]!
0xffff7ab7db1c   508  str x1, [jssp, #16]
0xffff7ab7db20   512  movz x10, #0x2f00000000
0xffff7ab7db24   516  sub csp, jssp, #0x18 (24)
0xffff7ab7db28   520  stp x10, x0, [jssp, #-24]!
0xffff7ab7db2c   524  str x1, [jssp, #16]
0xffff7ab7db30   528  movz x0, #0x3
0xffff7ab7db34   532  ldr x1, pc+76 (addr 0x0000ffff7ab7db80)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ab7db38   536  ldr x16, pc+80 (addr 0x0000ffff7ab7db88)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab7db3c   540  blr x16
0xffff7ab7db40   544  add x11, x0, #0x5f (95)
0xffff7ab7db44   548  ldr x1, [jssp, #16]
0xffff7ab7db48   552  ldp lr, x0, [jssp], #24
0xffff7ab7db4c   556  mov jssp, fp
0xffff7ab7db50   560  ldp fp, lr, [jssp], #16
0xffff7ab7db54   564  br x11
0xffff7ab7db58   568  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab7db5c   572  d63f03e0       constant
0xffff7ab7db60   576  7ab7d8c1       constant
0xffff7ab7db64   580  0000ffff       constant
0xffff7ab7db68   584  00e50928       constant
0xffff7ab7db6c   588  00000000       constant
0xffff7ab7db70   592  7ab06060       constant
0xffff7ab7db74   596  0000ffff       constant
0xffff7ab7db78   600  7ab7d8c1       constant
0xffff7ab7db7c   604  0000ffff       constant
0xffff7ab7db80   608  00c8a980       constant
0xffff7ab7db84   612  00000000       constant
0xffff7ab7db88   616  7ab06060       constant
0xffff7ab7db8c   620  0000ffff       constant


RelocInfo (size = 16)
0xffff7ab7dab4  embedded object  (0xffff7ab7d8c1 <Code: COMPARE_IC>)
0xffff7ab7dad0  external reference (Runtime::StrictEqual)  (0xe50928)
0xffff7ab7dad4  code target (STUB)  (0xffff7ab06060)
0xffff7ab7db04  embedded object  (0xffff7ab7d8c1 <Code: COMPARE_IC>)
0xffff7ab7db34  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ab7db38  code target (STUB)  (0xffff7ab06060)
0xffff7ab7db58  constant pool (size 56)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = SMI*SMI -> SMI
compare_operation = GT
name = CompareICStub
compiler = unknown
Instructions (size = 160)
0xffff7ab7e240     0  orr x16, x0, x1
0xffff7ab7e244     4  tbnz w16, #0, #+0x10 (addr 0xffff7ab7e254)
0xffff7ab7e248     8  asr x1, x1, #32
0xffff7ab7e24c    12  sub x0, x1, x0, asr #32
0xffff7ab7e250    16  ret
0xffff7ab7e254    20  movz x16, #0xc00000000
0xffff7ab7e258    24  sub csp, jssp, #0x10 (16)
0xffff7ab7e25c    28  stp fp, lr, [jssp, #-16]!
0xffff7ab7e260    32  sub csp, jssp, #0x10 (16)
0xffff7ab7e264    36  str x16, [jssp, #-8]!
0xffff7ab7e268    40  ldr x17, pc+96 (addr 0x0000ffff7ab7e2c8)    ;; object: 0xffff7ab7e1e1 <Code: COMPARE_IC>
0xffff7ab7e26c    44  sub csp, jssp, #0x10 (16)
0xffff7ab7e270    48  str x17, [jssp, #-8]!
0xffff7ab7e274    52  add fp, jssp, #0x10 (16)
0xffff7ab7e278    56  sub csp, jssp, #0x18 (24)
0xffff7ab7e27c    60  stp lr, x0, [jssp, #-24]!
0xffff7ab7e280    64  str x1, [jssp, #16]
0xffff7ab7e284    68  movz x10, #0x3200000000
0xffff7ab7e288    72  sub csp, jssp, #0x18 (24)
0xffff7ab7e28c    76  stp x10, x0, [jssp, #-24]!
0xffff7ab7e290    80  str x1, [jssp, #16]
0xffff7ab7e294    84  movz x0, #0x3
0xffff7ab7e298    88  ldr x1, pc+56 (addr 0x0000ffff7ab7e2d0)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ab7e29c    92  ldr x16, pc+60 (addr 0x0000ffff7ab7e2d8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab7e2a0    96  blr x16
0xffff7ab7e2a4   100  add x11, x0, #0x5f (95)
0xffff7ab7e2a8   104  ldr x1, [jssp, #16]
0xffff7ab7e2ac   108  ldp lr, x0, [jssp], #24
0xffff7ab7e2b0   112  mov jssp, fp
0xffff7ab7e2b4   116  ldp fp, lr, [jssp], #16
0xffff7ab7e2b8   120  br x11
0xffff7ab7e2bc   124  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab7e2c0   128  d63f03e0       constant
0xffff7ab7e2c4   132  d503201f       constant
0xffff7ab7e2c8   136  7ab7e1e1       constant
0xffff7ab7e2cc   140  0000ffff       constant
0xffff7ab7e2d0   144  00c8a980       constant
0xffff7ab7e2d4   148  00000000       constant
0xffff7ab7e2d8   152  7ab06060       constant
0xffff7ab7e2dc   156  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab7e268  embedded object  (0xffff7ab7e1e1 <Code: COMPARE_IC>)
0xffff7ab7e298  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ab7e29c  code target (STUB)  (0xffff7ab06060)
0xffff7ab7e2bc  constant pool (size 36)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 216)
0xffff7ab7f9e0     0  ldur x4, [x1, #15]
0xffff7ab7f9e4     4  ldur w5, [x1, #27]
0xffff7ab7f9e8     8  tbnz w2, #0, #+0x44 (addr 0xffff7ab7fa2c)
0xffff7ab7f9ec    12  asr x7, x2, #32
0xffff7ab7f9f0    16  cmp w7, w5
0xffff7ab7f9f4    20  b.hs #+0x60 (addr 0xffff7ab7fa54)
0xffff7ab7f9f8    24  add x5, x4, #0xf (15)
0xffff7ab7f9fc    28  ldr x6, [x5, w7, sxtw #3]
0xffff7ab7fa00    32  ldr x16, [x26, #88]
0xffff7ab7fa04    36  cmp x6, x16
0xffff7ab7fa08    40  b.ne #+0x1c (addr 0xffff7ab7fa24)
0xffff7ab7fa0c    44  ldr x6, [x26, #1160]
0xffff7ab7fa10    48  ldur x6, [x6, #7]
0xffff7ab7fa14    52  movz x16, #0x100000000
0xffff7ab7fa18    56  cmp x6, x16
0xffff7ab7fa1c    60  b.ne #+0x48 (addr 0xffff7ab7fa64)
0xffff7ab7fa20    64  ldr x6, [x26, #40]
0xffff7ab7fa24    68  mov x0, x6
0xffff7ab7fa28    72  ret
0xffff7ab7fa2c    76  ldur x16, [x2, #-1]
0xffff7ab7fa30    80  ldr x17, [x26, #120]
0xffff7ab7fa34    84  cmp x16, x17
0xffff7ab7fa38    88  b.ne #+0x3c (addr 0xffff7ab7fa74)
0xffff7ab7fa3c    92  ldur d29, [x2, #7]
0xffff7ab7fa40    96  fcvtzs w7, d29
0xffff7ab7fa44   100  scvtf d0, w7
0xffff7ab7fa48   104  fcmp d29, d0
0xffff7ab7fa4c   108  b.ne #+0x28 (addr 0xffff7ab7fa74)
0xffff7ab7fa50   112  b #-0x60 (addr 0xffff7ab7f9f0)
0xffff7ab7fa54   116  movz x16, #0x0
0xffff7ab7fa58   120  sub csp, jssp, #0x10 (16)
0xffff7ab7fa5c   124  stp fp, lr, [jssp, #-16]!
0xffff7ab7fa60   128  bl #+0x24 (addr 0xffff7ab7fa84)
0xffff7ab7fa64   132  movz x16, #0x8
0xffff7ab7fa68   136  sub csp, jssp, #0x10 (16)
0xffff7ab7fa6c   140  stp fp, lr, [jssp, #-16]!
0xffff7ab7fa70   144  bl #+0x14 (addr 0xffff7ab7fa84)
0xffff7ab7fa74   148  movz x16, #0x10
0xffff7ab7fa78   152  sub csp, jssp, #0x10 (16)
0xffff7ab7fa7c   156  stp fp, lr, [jssp, #-16]!
0xffff7ab7fa80   160  bl #+0x4 (addr 0xffff7ab7fa84)
0xffff7ab7fa84   164  movz x17, #0xa00000000
0xffff7ab7fa88   168  sub csp, jssp, #0x10 (16)
0xffff7ab7fa8c   172  stp x17, cp, [jssp, #-16]!
0xffff7ab7fa90   176  add fp, jssp, #0x10 (16)
0xffff7ab7fa94   180  ldr x17, pc+20 (addr 0x0000ffff7ab7faa8)    ;; lazy deoptimization bailout 0
0xffff7ab7fa98   184  add x17, x17, x16
0xffff7ab7fa9c   188  br x17
0xffff7ab7faa0   192  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab7faa4   196  d63f03e0       constant
0xffff7ab7faa8   200  7a906000       constant
0xffff7ab7faac   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab7fa94  runtime entry
0xffff7ab7faa0  constant pool (size 16)

--- End code ---
kind = HANDLER
major_key = LoadFastElementStub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 216)
0xffff7ab7f9e0     0  ldur x4, [x1, #15]
0xffff7ab7f9e4     4  ldur w5, [x1, #27]
0xffff7ab7f9e8     8  tbnz w2, #0, #+0x44 (addr 0xffff7ab7fa2c)
0xffff7ab7f9ec    12  asr x7, x2, #32
0xffff7ab7f9f0    16  cmp w7, w5
0xffff7ab7f9f4    20  b.hs #+0x60 (addr 0xffff7ab7fa54)
0xffff7ab7f9f8    24  add x5, x4, #0xf (15)
0xffff7ab7f9fc    28  ldr x6, [x5, w7, sxtw #3]
0xffff7ab7fa00    32  ldr x16, [x26, #88]
0xffff7ab7fa04    36  cmp x6, x16
0xffff7ab7fa08    40  b.ne #+0x1c (addr 0xffff7ab7fa24)
0xffff7ab7fa0c    44  ldr x6, [x26, #1160]
0xffff7ab7fa10    48  ldur x6, [x6, #7]
0xffff7ab7fa14    52  movz x16, #0x100000000
0xffff7ab7fa18    56  cmp x6, x16
0xffff7ab7fa1c    60  b.ne #+0x48 (addr 0xffff7ab7fa64)
0xffff7ab7fa20    64  ldr x6, [x26, #40]
0xffff7ab7fa24    68  mov x0, x6
0xffff7ab7fa28    72  ret
0xffff7ab7fa2c    76  ldur x16, [x2, #-1]
0xffff7ab7fa30    80  ldr x17, [x26, #120]
0xffff7ab7fa34    84  cmp x16, x17
0xffff7ab7fa38    88  b.ne #+0x3c (addr 0xffff7ab7fa74)
0xffff7ab7fa3c    92  ldur d29, [x2, #7]
0xffff7ab7fa40    96  fcvtzs w7, d29
0xffff7ab7fa44   100  scvtf d0, w7
0xffff7ab7fa48   104  fcmp d29, d0
0xffff7ab7fa4c   108  b.ne #+0x28 (addr 0xffff7ab7fa74)
0xffff7ab7fa50   112  b #-0x60 (addr 0xffff7ab7f9f0)
0xffff7ab7fa54   116  movz x16, #0x0
0xffff7ab7fa58   120  sub csp, jssp, #0x10 (16)
0xffff7ab7fa5c   124  stp fp, lr, [jssp, #-16]!
0xffff7ab7fa60   128  bl #+0x24 (addr 0xffff7ab7fa84)
0xffff7ab7fa64   132  movz x16, #0x8
0xffff7ab7fa68   136  sub csp, jssp, #0x10 (16)
0xffff7ab7fa6c   140  stp fp, lr, [jssp, #-16]!
0xffff7ab7fa70   144  bl #+0x14 (addr 0xffff7ab7fa84)
0xffff7ab7fa74   148  movz x16, #0x10
0xffff7ab7fa78   152  sub csp, jssp, #0x10 (16)
0xffff7ab7fa7c   156  stp fp, lr, [jssp, #-16]!
0xffff7ab7fa80   160  bl #+0x4 (addr 0xffff7ab7fa84)
0xffff7ab7fa84   164  movz x17, #0xa00000000
0xffff7ab7fa88   168  sub csp, jssp, #0x10 (16)
0xffff7ab7fa8c   172  stp x17, cp, [jssp, #-16]!
0xffff7ab7fa90   176  add fp, jssp, #0x10 (16)
0xffff7ab7fa94   180  ldr x17, pc+20 (addr 0x0000ffff7ab7faa8)    ;; lazy deoptimization bailout 0
0xffff7ab7fa98   184  add x17, x17, x16
0xffff7ab7fa9c   188  br x17
0xffff7ab7faa0   192  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab7faa4   196  d63f03e0       constant
0xffff7ab7faa8   200  7a906000       constant
0xffff7ab7faac   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7ab7fa94  runtime entry
0xffff7ab7faa0  constant pool (size 16)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastCloneRegExpStub
compiler = crankshaft
Instructions (size = 357)
0xffff7ab7fb20     0  ldur x4, [x3, #47]
0xffff7ab7fb24     4  asr x5, x2, #32
0xffff7ab7fb28     8  add x6, x4, #0x17 (23)
0xffff7ab7fb2c    12  ldr x7, [x6, w5, sxtw #3]
0xffff7ab7fb30    16  ldr x4, pc+224 (addr 0x0000ffff7ab7fc10)    ;; object: 0x20d04241 <undefined>
0xffff7ab7fb34    20  cmp x7, x4
0xffff7ab7fb38    24  b.eq #+0x64 (addr 0xffff7ab7fb9c)
0xffff7ab7fb3c    28  movz x1, #0xe2c0
0xffff7ab7fb40    32  movk x1, #0x9ab, lsl #16
0xffff7ab7fb44    36  ldp x2, x0, [x1]
0xffff7ab7fb48    40  adds x16, x2, #0x38 (56)
0xffff7ab7fb4c    44  ccmp x16, x0, #nzCv, lo
0xffff7ab7fb50    48  b.hi #+0x50 (addr 0xffff7ab7fba0)
0xffff7ab7fb54    52  str x16, [x1]
0xffff7ab7fb58    56  orr x2, x2, #0x1
0xffff7ab7fb5c    60  ldur x0, [x7, #-1]
0xffff7ab7fb60    64  stur x0, [x2, #-1]
0xffff7ab7fb64    68  ldur x0, [x7, #7]
0xffff7ab7fb68    72  stur x0, [x2, #7]
0xffff7ab7fb6c    76  ldur x0, [x7, #15]
0xffff7ab7fb70    80  stur x0, [x2, #15]
0xffff7ab7fb74    84  ldur x0, [x7, #23]
0xffff7ab7fb78    88  stur x0, [x2, #23]
0xffff7ab7fb7c    92  ldur x0, [x7, #31]
0xffff7ab7fb80    96  stur x0, [x2, #31]
0xffff7ab7fb84   100  ldur x0, [x7, #39]
0xffff7ab7fb88   104  stur x0, [x2, #39]
0xffff7ab7fb8c   108  ldur x0, [x7, #47]
0xffff7ab7fb90   112  stur x0, [x2, #47]
0xffff7ab7fb94   116  mov x0, x2
0xffff7ab7fb98   120  ret
0xffff7ab7fb9c   124  b #+0x94 (addr 0xffff7ab7fc30)
0xffff7ab7fba0   128  sub csp, jssp, #0x10 (16)
0xffff7ab7fba4   132  stp fp, lr, [jssp, #-16]!
0xffff7ab7fba8   136  movz fp, #0xa00000000
0xffff7ab7fbac   140  sub csp, jssp, #0x8 (8)
0xffff7ab7fbb0   144  str fp, [jssp, #-8]!
0xffff7ab7fbb4   148  add fp, jssp, #0x8 (8)
0xffff7ab7fbb8   152  movz x2, #0x0
0xffff7ab7fbbc   156  mov x16, lr
0xffff7ab7fbc0   160  ldr x17, pc+88 (addr 0x0000ffff7ab7fc18)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab7fbc4   164  blr x17
0xffff7ab7fbc8   168  movz x0, #0x3800000000
0xffff7ab7fbcc   172  movz x10, #0x0
0xffff7ab7fbd0   176  sub csp, jssp, #0x10 (16)
0xffff7ab7fbd4   180  stp x10, x0, [jssp, #-16]!
0xffff7ab7fbd8   184  movz x0, #0x2
0xffff7ab7fbdc   188  movz x1, #0x5b88
0xffff7ab7fbe0   192  movk x1, #0xe2, lsl #16
0xffff7ab7fbe4   196  ldr x16, pc+60 (addr 0x0000ffff7ab7fc20)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab7fbe8   200  blr x16
0xffff7ab7fbec   204  str x0, [jssp, #16]
0xffff7ab7fbf0   208  ldr x16, pc+56 (addr 0x0000ffff7ab7fc28)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab7fbf4   212  blr x16
0xffff7ab7fbf8   216  ldr lr, [jssp, #16]
0xffff7ab7fbfc   220  ldp xzr, fp, [jssp], #24
0xffff7ab7fc00   224  b #-0xa4 (addr 0xffff7ab7fb5c)
0xffff7ab7fc04   228  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0xffff7ab7fc08   232  d63f03e0       constant
0xffff7ab7fc0c   236  d503201f       constant
0xffff7ab7fc10   240  20d04241       constant
0xffff7ab7fc14   244  00000000       constant
0xffff7ab7fc18   248  7ab06820       constant
0xffff7ab7fc1c   252  0000ffff       constant
0xffff7ab7fc20   256  7ab06260       constant
0xffff7ab7fc24   260  0000ffff       constant
0xffff7ab7fc28   264  7ab068e0       constant
0xffff7ab7fc2c   268  0000ffff       constant
0xffff7ab7fc30   272  movz x16, #0x0
0xffff7ab7fc34   276  sub csp, jssp, #0x10 (16)
0xffff7ab7fc38   280  stp fp, lr, [jssp, #-16]!
0xffff7ab7fc3c   284  bl #+0x4 (addr 0xffff7ab7fc40)
0xffff7ab7fc40   288  movz x17, #0xa00000000
0xffff7ab7fc44   292  sub csp, jssp, #0x10 (16)
0xffff7ab7fc48   296  stp x17, cp, [jssp, #-16]!
0xffff7ab7fc4c   300  add fp, jssp, #0x10 (16)
0xffff7ab7fc50   304  ldr x17, pc+24 (addr 0x0000ffff7ab7fc68)    ;; lazy deoptimization bailout 0
0xffff7ab7fc54   308  add x17, x17, x16
0xffff7ab7fc58   312  br x17
0xffff7ab7fc5c   316  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab7fc60   320  d63f03e0       constant
0xffff7ab7fc64   324  d503201f       constant
0xffff7ab7fc68   328  7a906000       constant
0xffff7ab7fc6c   332  0000ffff       constant


Safepoints (size = 21)
0xffff7ab7fbec   204  000 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 22)
0xffff7ab7fb30  embedded object  (0x20d04241 <undefined>)
0xffff7ab7fbc0  code target (STUB)  (0xffff7ab06820)
0xffff7ab7fbe4  code target (STUB)  (0xffff7ab06260)
0xffff7ab7fbf0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab7fc04  constant pool (size 44)
0xffff7ab7fc50  runtime entry
0xffff7ab7fc5c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = FastCloneRegExpStub
name = FastCloneRegExpStub
compiler = crankshaft
Instructions (size = 357)
0xffff7ab7fb20     0  ldur x4, [x3, #47]
0xffff7ab7fb24     4  asr x5, x2, #32
0xffff7ab7fb28     8  add x6, x4, #0x17 (23)
0xffff7ab7fb2c    12  ldr x7, [x6, w5, sxtw #3]
0xffff7ab7fb30    16  ldr x4, pc+224 (addr 0x0000ffff7ab7fc10)    ;; object: 0x20d04241 <undefined>
0xffff7ab7fb34    20  cmp x7, x4
0xffff7ab7fb38    24  b.eq #+0x64 (addr 0xffff7ab7fb9c)
0xffff7ab7fb3c    28  movz x1, #0xe2c0
0xffff7ab7fb40    32  movk x1, #0x9ab, lsl #16
0xffff7ab7fb44    36  ldp x2, x0, [x1]
0xffff7ab7fb48    40  adds x16, x2, #0x38 (56)
0xffff7ab7fb4c    44  ccmp x16, x0, #nzCv, lo
0xffff7ab7fb50    48  b.hi #+0x50 (addr 0xffff7ab7fba0)
0xffff7ab7fb54    52  str x16, [x1]
0xffff7ab7fb58    56  orr x2, x2, #0x1
0xffff7ab7fb5c    60  ldur x0, [x7, #-1]
0xffff7ab7fb60    64  stur x0, [x2, #-1]
0xffff7ab7fb64    68  ldur x0, [x7, #7]
0xffff7ab7fb68    72  stur x0, [x2, #7]
0xffff7ab7fb6c    76  ldur x0, [x7, #15]
0xffff7ab7fb70    80  stur x0, [x2, #15]
0xffff7ab7fb74    84  ldur x0, [x7, #23]
0xffff7ab7fb78    88  stur x0, [x2, #23]
0xffff7ab7fb7c    92  ldur x0, [x7, #31]
0xffff7ab7fb80    96  stur x0, [x2, #31]
0xffff7ab7fb84   100  ldur x0, [x7, #39]
0xffff7ab7fb88   104  stur x0, [x2, #39]
0xffff7ab7fb8c   108  ldur x0, [x7, #47]
0xffff7ab7fb90   112  stur x0, [x2, #47]
0xffff7ab7fb94   116  mov x0, x2
0xffff7ab7fb98   120  ret
0xffff7ab7fb9c   124  b #+0x94 (addr 0xffff7ab7fc30)
0xffff7ab7fba0   128  sub csp, jssp, #0x10 (16)
0xffff7ab7fba4   132  stp fp, lr, [jssp, #-16]!
0xffff7ab7fba8   136  movz fp, #0xa00000000
0xffff7ab7fbac   140  sub csp, jssp, #0x8 (8)
0xffff7ab7fbb0   144  str fp, [jssp, #-8]!
0xffff7ab7fbb4   148  add fp, jssp, #0x8 (8)
0xffff7ab7fbb8   152  movz x2, #0x0
0xffff7ab7fbbc   156  mov x16, lr
0xffff7ab7fbc0   160  ldr x17, pc+88 (addr 0x0000ffff7ab7fc18)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab7fbc4   164  blr x17
0xffff7ab7fbc8   168  movz x0, #0x3800000000
0xffff7ab7fbcc   172  movz x10, #0x0
0xffff7ab7fbd0   176  sub csp, jssp, #0x10 (16)
0xffff7ab7fbd4   180  stp x10, x0, [jssp, #-16]!
0xffff7ab7fbd8   184  movz x0, #0x2
0xffff7ab7fbdc   188  movz x1, #0x5b88
0xffff7ab7fbe0   192  movk x1, #0xe2, lsl #16
0xffff7ab7fbe4   196  ldr x16, pc+60 (addr 0x0000ffff7ab7fc20)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab7fbe8   200  blr x16
0xffff7ab7fbec   204  str x0, [jssp, #16]
0xffff7ab7fbf0   208  ldr x16, pc+56 (addr 0x0000ffff7ab7fc28)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab7fbf4   212  blr x16
0xffff7ab7fbf8   216  ldr lr, [jssp, #16]
0xffff7ab7fbfc   220  ldp xzr, fp, [jssp], #24
0xffff7ab7fc00   224  b #-0xa4 (addr 0xffff7ab7fb5c)
0xffff7ab7fc04   228  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0xffff7ab7fc08   232  d63f03e0       constant
0xffff7ab7fc0c   236  d503201f       constant
0xffff7ab7fc10   240  20d04241       constant
0xffff7ab7fc14   244  00000000       constant
0xffff7ab7fc18   248  7ab06820       constant
0xffff7ab7fc1c   252  0000ffff       constant
0xffff7ab7fc20   256  7ab06260       constant
0xffff7ab7fc24   260  0000ffff       constant
0xffff7ab7fc28   264  7ab068e0       constant
0xffff7ab7fc2c   268  0000ffff       constant
0xffff7ab7fc30   272  movz x16, #0x0
0xffff7ab7fc34   276  sub csp, jssp, #0x10 (16)
0xffff7ab7fc38   280  stp fp, lr, [jssp, #-16]!
0xffff7ab7fc3c   284  bl #+0x4 (addr 0xffff7ab7fc40)
0xffff7ab7fc40   288  movz x17, #0xa00000000
0xffff7ab7fc44   292  sub csp, jssp, #0x10 (16)
0xffff7ab7fc48   296  stp x17, cp, [jssp, #-16]!
0xffff7ab7fc4c   300  add fp, jssp, #0x10 (16)
0xffff7ab7fc50   304  ldr x17, pc+24 (addr 0x0000ffff7ab7fc68)    ;; lazy deoptimization bailout 0
0xffff7ab7fc54   308  add x17, x17, x16
0xffff7ab7fc58   312  br x17
0xffff7ab7fc5c   316  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab7fc60   320  d63f03e0       constant
0xffff7ab7fc64   324  d503201f       constant
0xffff7ab7fc68   328  7a906000       constant
0xffff7ab7fc6c   332  0000ffff       constant


Safepoints (size = 21)
0xffff7ab7fbec   204  000 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 22)
0xffff7ab7fb30  embedded object  (0x20d04241 <undefined>)
0xffff7ab7fbc0  code target (STUB)  (0xffff7ab06820)
0xffff7ab7fbe4  code target (STUB)  (0xffff7ab06260)
0xffff7ab7fbf0  code target (STUB)  (0xffff7ab068e0)
0xffff7ab7fc04  constant pool (size 44)
0xffff7ab7fc50  runtime entry
0xffff7ab7fc5c  constant pool (size 20)


--- Code ---
kind = TO_BOOLEAN_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 8
type = NORMAL
name = ToBooleanICStub
compiler = crankshaft
Instructions (size = 128)
0xffff7ab80ba0     0  cbz x0, #+0xc (addr 0xffff7ab80bac)
0xffff7ab80ba4     4  tbz w0, #0, #+0x10 (addr 0xffff7ab80bb4)
0xffff7ab80ba8     8  b #+0x30 (addr 0xffff7ab80bd8)
0xffff7ab80bac    12  ldr x0, pc+28 (addr 0x0000ffff7ab80bc8)    ;; object: 0x20d042b1 <false>
0xffff7ab80bb0    16  ret
0xffff7ab80bb4    20  ldr x0, pc+28 (addr 0x0000ffff7ab80bd0)    ;; object: 0x20d04281 <true>
0xffff7ab80bb8    24  ret
0xffff7ab80bbc    28  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab80bc0    32  d63f03e0       constant
0xffff7ab80bc4    36  d503201f       constant
0xffff7ab80bc8    40  20d042b1       constant
0xffff7ab80bcc    44  00000000       constant
0xffff7ab80bd0    48  20d04281       constant
0xffff7ab80bd4    52  00000000       constant
0xffff7ab80bd8    56  movz x16, #0x0
0xffff7ab80bdc    60  sub csp, jssp, #0x10 (16)
0xffff7ab80be0    64  stp fp, lr, [jssp, #-16]!
0xffff7ab80be4    68  bl #+0x4 (addr 0xffff7ab80be8)
0xffff7ab80be8    72  movz x17, #0xa00000000
0xffff7ab80bec    76  sub csp, jssp, #0x10 (16)
0xffff7ab80bf0    80  stp x17, cp, [jssp, #-16]!
0xffff7ab80bf4    84  add fp, jssp, #0x10 (16)
0xffff7ab80bf8    88  ldr x17, pc+24 (addr 0x0000ffff7ab80c10)    ;; lazy deoptimization bailout 0
0xffff7ab80bfc    92  add x17, x17, x16
0xffff7ab80c00    96  br x17
0xffff7ab80c04   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab80c08   104  d63f03e0       constant
0xffff7ab80c0c   108  d503201f       constant
0xffff7ab80c10   112  7a906000       constant
0xffff7ab80c14   116  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab80bac  embedded object  (0x20d042b1 <false>)
0xffff7ab80bb4  embedded object  (0x20d04281 <true>)
0xffff7ab80bbc  constant pool (size 28)
0xffff7ab80bf8  runtime entry
0xffff7ab80c04  constant pool (size 20)

--- End code ---
kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 8
type = NORMAL
name = ToBooleanICStub(Smi)
compiler = crankshaft
Instructions (size = 128)
0xffff7ab80ba0     0  cbz x0, #+0xc (addr 0xffff7ab80bac)
0xffff7ab80ba4     4  tbz w0, #0, #+0x10 (addr 0xffff7ab80bb4)
0xffff7ab80ba8     8  b #+0x30 (addr 0xffff7ab80bd8)
0xffff7ab80bac    12  ldr x0, pc+28 (addr 0x0000ffff7ab80bc8)    ;; object: 0x20d042b1 <false>
0xffff7ab80bb0    16  ret
0xffff7ab80bb4    20  ldr x0, pc+28 (addr 0x0000ffff7ab80bd0)    ;; object: 0x20d04281 <true>
0xffff7ab80bb8    24  ret
0xffff7ab80bbc    28  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab80bc0    32  d63f03e0       constant
0xffff7ab80bc4    36  d503201f       constant
0xffff7ab80bc8    40  20d042b1       constant
0xffff7ab80bcc    44  00000000       constant
0xffff7ab80bd0    48  20d04281       constant
0xffff7ab80bd4    52  00000000       constant
0xffff7ab80bd8    56  movz x16, #0x0
0xffff7ab80bdc    60  sub csp, jssp, #0x10 (16)
0xffff7ab80be0    64  stp fp, lr, [jssp, #-16]!
0xffff7ab80be4    68  bl #+0x4 (addr 0xffff7ab80be8)
0xffff7ab80be8    72  movz x17, #0xa00000000
0xffff7ab80bec    76  sub csp, jssp, #0x10 (16)
0xffff7ab80bf0    80  stp x17, cp, [jssp, #-16]!
0xffff7ab80bf4    84  add fp, jssp, #0x10 (16)
0xffff7ab80bf8    88  ldr x17, pc+24 (addr 0x0000ffff7ab80c10)    ;; lazy deoptimization bailout 0
0xffff7ab80bfc    92  add x17, x17, x16
0xffff7ab80c00    96  br x17
0xffff7ab80c04   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab80c08   104  d63f03e0       constant
0xffff7ab80c0c   108  d503201f       constant
0xffff7ab80c10   112  7a906000       constant
0xffff7ab80c14   116  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab80bac  embedded object  (0x20d042b1 <false>)
0xffff7ab80bb4  embedded object  (0x20d04281 <true>)
0xffff7ab80bbc  constant pool (size 28)
0xffff7ab80bf8  runtime entry
0xffff7ab80c04  constant pool (size 20)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0xffff7ab80f80     0  adr xzr, #+0x40 (addr 0xffff7ab80fc0)
0xffff7ab80f84     4  adr xzr, #+0x2a8 (addr 0xffff7ab8122c)
0xffff7ab80f88     8  ldr x16, pc+1368 (addr 0x0000ffff7ab814e0)    ;; external reference (store_buffer_top)
0xffff7ab80f8c    12  ldr x10, [x16]
0xffff7ab80f90    16  str x11, [x10], #8
0xffff7ab80f94    20  str x10, [x16]
0xffff7ab80f98    24  tst x10, #0x1ffff
0xffff7ab80f9c    28  b.eq #+0x8 (addr 0xffff7ab80fa4)
0xffff7ab80fa0    32  ret
0xffff7ab80fa4    36  sub csp, jssp, #0x8 (8)
0xffff7ab80fa8    40  str lr, [jssp, #-8]!
0xffff7ab80fac    44  ldr x17, pc+1340 (addr 0x0000ffff7ab814e8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab80fb0    48  blr x17
0xffff7ab80fb4    52  ldr lr, [jssp], #8
0xffff7ab80fb8    56  ret
0xffff7ab80fbc    60  ret
0xffff7ab80fc0    64  sub csp, jssp, #0x10 (16)
0xffff7ab80fc4    68  stp x1, x0, [jssp, #-16]!
0xffff7ab80fc8    72  ldr x10, [x11]
0xffff7ab80fcc    76  and x16, x10, #0xfffffffffff00000
0xffff7ab80fd0    80  ldr x16, [x16, #8]
0xffff7ab80fd4    84  tst x16, #0x18
0xffff7ab80fd8    88  b.eq #+0x17c (addr 0xffff7ab81154)
0xffff7ab80fdc    92  and x16, x21, #0xfffffffffff00000
0xffff7ab80fe0    96  ldr x16, [x16, #8]
0xffff7ab80fe4   100  tst x16, #0x18
0xffff7ab80fe8   104  b.ne #+0x16c (addr 0xffff7ab81154)
0xffff7ab80fec   108  and x10, x21, #0xfffffffffff00000
0xffff7ab80ff0   112  ldr x0, [x10, #104]
0xffff7ab80ff4   116  subs x0, x0, #0x1 (1)
0xffff7ab80ff8   120  str x0, [x10, #104]
0xffff7ab80ffc   124  b.mi #+0xc4 (addr 0xffff7ab810c0)
0xffff7ab81000   128  ubfx x16, x21, #8, #12
0xffff7ab81004   132  and x10, x21, #0xfffffffffff00000
0xffff7ab81008   136  add x10, x10, x16, lsl #2
0xffff7ab8100c   140  ubfx x0, x21, #3, #5
0xffff7ab81010   144  ldr x10, [x10, #360]
0xffff7ab81014   148  lsr x10, x10, x0
0xffff7ab81018   152  tbz w10, #0, #+0x8 (addr 0xffff7ab81020)
0xffff7ab8101c   156  tbnz w10, #1, #+0x3c (addr 0xffff7ab81058)
0xffff7ab81020   160  ldp x1, x0, [jssp], #16
0xffff7ab81024   164  ldr x16, pc+1228 (addr 0x0000ffff7ab814f0)    ;; external reference (store_buffer_top)
0xffff7ab81028   168  ldr x10, [x16]
0xffff7ab8102c   172  str x11, [x10], #8
0xffff7ab81030   176  str x10, [x16]
0xffff7ab81034   180  tst x10, #0x1ffff
0xffff7ab81038   184  b.eq #+0x8 (addr 0xffff7ab81040)
0xffff7ab8103c   188  ret
0xffff7ab81040   192  sub csp, jssp, #0x8 (8)
0xffff7ab81044   196  str lr, [jssp, #-8]!
0xffff7ab81048   200  ldr x17, pc+1200 (addr 0x0000ffff7ab814f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab8104c   204  blr x17
0xffff7ab81050   208  ldr lr, [jssp], #8
0xffff7ab81054   212  ret
0xffff7ab81058   216  ldr x10, [x11]
0xffff7ab8105c   220  sub csp, jssp, #0x10 (16)
0xffff7ab81060   224  stp x21, x11, [jssp, #-16]!
0xffff7ab81064   228  ubfx x16, x10, #8, #12
0xffff7ab81068   232  and x0, x10, #0xfffffffffff00000
0xffff7ab8106c   236  add x0, x0, x16, lsl #2
0xffff7ab81070   240  ubfx x21, x10, #3, #5
0xffff7ab81074   244  ldr x11, [x0, #360]
0xffff7ab81078   248  lsr x11, x11, x21
0xffff7ab8107c   252  tbz w11, #0, #+0x40 (addr 0xffff7ab810bc)
0xffff7ab81080   256  ldp x21, x11, [jssp], #16
0xffff7ab81084   260  ldp x1, x0, [jssp], #16
0xffff7ab81088   264  ldr x16, pc+1144 (addr 0x0000ffff7ab81500)    ;; external reference (store_buffer_top)
0xffff7ab8108c   268  ldr x10, [x16]
0xffff7ab81090   272  str x11, [x10], #8
0xffff7ab81094   276  str x10, [x16]
0xffff7ab81098   280  tst x10, #0x1ffff
0xffff7ab8109c   284  b.eq #+0x8 (addr 0xffff7ab810a4)
0xffff7ab810a0   288  ret
0xffff7ab810a4   292  sub csp, jssp, #0x8 (8)
0xffff7ab810a8   296  str lr, [jssp, #-8]!
0xffff7ab810ac   300  ldr x17, pc+1116 (addr 0x0000ffff7ab81508)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab810b0   304  blr x17
0xffff7ab810b4   308  ldr lr, [jssp], #8
0xffff7ab810b8   312  ret
0xffff7ab810bc   316  ldp x21, x11, [jssp], #16
0xffff7ab810c0   320  sub csp, jssp, #0x78 (120)
0xffff7ab810c4   324  stp x14, x15, [jssp, #-32]!
0xffff7ab810c8   328  stp x18, lr, [jssp, #16]
0xffff7ab810cc   332  stp x9, x11, [jssp, #-32]!
0xffff7ab810d0   336  stp x12, x13, [jssp, #16]
0xffff7ab810d4   340  stp x5, x6, [jssp, #-32]!
0xffff7ab810d8   344  stp x7, x8, [jssp, #16]
0xffff7ab810dc   348  stp x2, x3, [jssp, #-24]!
0xffff7ab810e0   352  str x4, [jssp, #16]
0xffff7ab810e4   356  mov x0, x21
0xffff7ab810e8   360  mov x1, x11
0xffff7ab810ec   364  ldr x2, pc+1060 (addr 0x0000ffff7ab81510)    ;; external reference (isolate)
0xffff7ab810f0   368  ldr x16, pc+1064 (addr 0x0000ffff7ab81518)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab810f4   372  and csp, jssp, #0xfffffffffffffff0
0xffff7ab810f8   376  blr x16
0xffff7ab810fc   380  ldp x4, x5, [jssp, #16]
0xffff7ab81100   384  ldp x2, x3, [jssp], #32
0xffff7ab81104   388  ldp x8, x9, [jssp, #16]
0xffff7ab81108   392  ldp x6, x7, [jssp], #32
0xffff7ab8110c   396  ldp x13, x14, [jssp, #16]
0xffff7ab81110   400  ldp x11, x12, [jssp], #32
0xffff7ab81114   404  ldr lr, [jssp, #16]
0xffff7ab81118   408  ldp x15, x18, [jssp], #24
0xffff7ab8111c   412  ldp x1, x0, [jssp], #16
0xffff7ab81120   416  ldr x16, pc+1024 (addr 0x0000ffff7ab81520)    ;; external reference (store_buffer_top)
0xffff7ab81124   420  ldr x10, [x16]
0xffff7ab81128   424  str x11, [x10], #8
0xffff7ab8112c   428  str x10, [x16]
0xffff7ab81130   432  tst x10, #0x1ffff
0xffff7ab81134   436  b.eq #+0x8 (addr 0xffff7ab8113c)
0xffff7ab81138   440  ret
0xffff7ab8113c   444  sub csp, jssp, #0x8 (8)
0xffff7ab81140   448  str lr, [jssp, #-8]!
0xffff7ab81144   452  ldr x17, pc+996 (addr 0x0000ffff7ab81528)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab81148   456  blr x17
0xffff7ab8114c   460  ldr lr, [jssp], #8
0xffff7ab81150   464  ret
0xffff7ab81154   468  and x10, x21, #0xfffffffffff00000
0xffff7ab81158   472  ldr x0, [x10, #104]
0xffff7ab8115c   476  subs x0, x0, #0x1 (1)
0xffff7ab81160   480  str x0, [x10, #104]
0xffff7ab81164   484  b.mi #+0x64 (addr 0xffff7ab811c8)
0xffff7ab81168   488  ubfx x16, x21, #8, #12
0xffff7ab8116c   492  and x10, x21, #0xfffffffffff00000
0xffff7ab81170   496  add x10, x10, x16, lsl #2
0xffff7ab81174   500  ubfx x0, x21, #3, #5
0xffff7ab81178   504  ldr x10, [x10, #360]
0xffff7ab8117c   508  lsr x10, x10, x0
0xffff7ab81180   512  tbz w10, #0, #+0x8 (addr 0xffff7ab81188)
0xffff7ab81184   516  tbnz w10, #1, #+0xc (addr 0xffff7ab81190)
0xffff7ab81188   520  ldp x1, x0, [jssp], #16
0xffff7ab8118c   524  ret
0xffff7ab81190   528  ldr x10, [x11]
0xffff7ab81194   532  sub csp, jssp, #0x10 (16)
0xffff7ab81198   536  stp x21, x11, [jssp, #-16]!
0xffff7ab8119c   540  ubfx x16, x10, #8, #12
0xffff7ab811a0   544  and x0, x10, #0xfffffffffff00000
0xffff7ab811a4   548  add x0, x0, x16, lsl #2
0xffff7ab811a8   552  ubfx x21, x10, #3, #5
0xffff7ab811ac   556  ldr x11, [x0, #360]
0xffff7ab811b0   560  lsr x11, x11, x21
0xffff7ab811b4   564  tbz w11, #0, #+0x10 (addr 0xffff7ab811c4)
0xffff7ab811b8   568  ldp x21, x11, [jssp], #16
0xffff7ab811bc   572  ldp x1, x0, [jssp], #16
0xffff7ab811c0   576  ret
0xffff7ab811c4   580  ldp x21, x11, [jssp], #16
0xffff7ab811c8   584  sub csp, jssp, #0x78 (120)
0xffff7ab811cc   588  stp x14, x15, [jssp, #-32]!
0xffff7ab811d0   592  stp x18, lr, [jssp, #16]
0xffff7ab811d4   596  stp x9, x11, [jssp, #-32]!
0xffff7ab811d8   600  stp x12, x13, [jssp, #16]
0xffff7ab811dc   604  stp x5, x6, [jssp, #-32]!
0xffff7ab811e0   608  stp x7, x8, [jssp, #16]
0xffff7ab811e4   612  stp x2, x3, [jssp, #-24]!
0xffff7ab811e8   616  str x4, [jssp, #16]
0xffff7ab811ec   620  mov x0, x21
0xffff7ab811f0   624  mov x1, x11
0xffff7ab811f4   628  ldr x2, pc+828 (addr 0x0000ffff7ab81530)    ;; external reference (isolate)
0xffff7ab811f8   632  ldr x16, pc+832 (addr 0x0000ffff7ab81538)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab811fc   636  and csp, jssp, #0xfffffffffffffff0
0xffff7ab81200   640  blr x16
0xffff7ab81204   644  ldp x4, x5, [jssp, #16]
0xffff7ab81208   648  ldp x2, x3, [jssp], #32
0xffff7ab8120c   652  ldp x8, x9, [jssp, #16]
0xffff7ab81210   656  ldp x6, x7, [jssp], #32
0xffff7ab81214   660  ldp x13, x14, [jssp, #16]
0xffff7ab81218   664  ldp x11, x12, [jssp], #32
0xffff7ab8121c   668  ldr lr, [jssp, #16]
0xffff7ab81220   672  ldp x15, x18, [jssp], #24
0xffff7ab81224   676  ldp x1, x0, [jssp], #16
0xffff7ab81228   680  ret
0xffff7ab8122c   684  sub csp, jssp, #0x10 (16)
0xffff7ab81230   688  stp x1, x0, [jssp, #-16]!
0xffff7ab81234   692  ldr x10, [x11]
0xffff7ab81238   696  and x16, x10, #0xfffffffffff00000
0xffff7ab8123c   700  ldr x16, [x16, #8]
0xffff7ab81240   704  tst x16, #0x18
0xffff7ab81244   708  b.eq #+0x19c (addr 0xffff7ab813e0)
0xffff7ab81248   712  and x16, x21, #0xfffffffffff00000
0xffff7ab8124c   716  ldr x16, [x16, #8]
0xffff7ab81250   720  tst x16, #0x18
0xffff7ab81254   724  b.ne #+0x18c (addr 0xffff7ab813e0)
0xffff7ab81258   728  and x10, x21, #0xfffffffffff00000
0xffff7ab8125c   732  ldr x0, [x10, #104]
0xffff7ab81260   736  subs x0, x0, #0x1 (1)
0xffff7ab81264   740  str x0, [x10, #104]
0xffff7ab81268   744  b.mi #+0xe4 (addr 0xffff7ab8134c)
0xffff7ab8126c   748  ubfx x16, x21, #8, #12
0xffff7ab81270   752  and x10, x21, #0xfffffffffff00000
0xffff7ab81274   756  add x10, x10, x16, lsl #2
0xffff7ab81278   760  ubfx x0, x21, #3, #5
0xffff7ab8127c   764  ldr x10, [x10, #360]
0xffff7ab81280   768  lsr x10, x10, x0
0xffff7ab81284   772  tbz w10, #0, #+0x8 (addr 0xffff7ab8128c)
0xffff7ab81288   776  tbnz w10, #1, #+0x3c (addr 0xffff7ab812c4)
0xffff7ab8128c   780  ldp x1, x0, [jssp], #16
0xffff7ab81290   784  ldr x16, pc+688 (addr 0x0000ffff7ab81540)    ;; external reference (store_buffer_top)
0xffff7ab81294   788  ldr x10, [x16]
0xffff7ab81298   792  str x11, [x10], #8
0xffff7ab8129c   796  str x10, [x16]
0xffff7ab812a0   800  tst x10, #0x1ffff
0xffff7ab812a4   804  b.eq #+0x8 (addr 0xffff7ab812ac)
0xffff7ab812a8   808  ret
0xffff7ab812ac   812  sub csp, jssp, #0x8 (8)
0xffff7ab812b0   816  str lr, [jssp, #-8]!
0xffff7ab812b4   820  ldr x17, pc+660 (addr 0x0000ffff7ab81548)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab812b8   824  blr x17
0xffff7ab812bc   828  ldr lr, [jssp], #8
0xffff7ab812c0   832  ret
0xffff7ab812c4   836  ldr x10, [x11]
0xffff7ab812c8   840  and x0, x10, #0xfffffffffff00000
0xffff7ab812cc   844  ldr x0, [x0, #8]
0xffff7ab812d0   848  tbz w0, #6, #+0x18 (addr 0xffff7ab812e8)
0xffff7ab812d4   852  and x0, x21, #0xfffffffffff00000
0xffff7ab812d8   856  ldr x0, [x0, #8]
0xffff7ab812dc   860  movz x16, #0x58
0xffff7ab812e0   864  tst x0, x16
0xffff7ab812e4   868  b.eq #+0x68 (addr 0xffff7ab8134c)
0xffff7ab812e8   872  sub csp, jssp, #0x10 (16)
0xffff7ab812ec   876  stp x21, x11, [jssp, #-16]!
0xffff7ab812f0   880  ubfx x16, x10, #8, #12
0xffff7ab812f4   884  and x0, x10, #0xfffffffffff00000
0xffff7ab812f8   888  add x0, x0, x16, lsl #2
0xffff7ab812fc   892  ubfx x21, x10, #3, #5
0xffff7ab81300   896  ldr x11, [x0, #360]
0xffff7ab81304   900  lsr x11, x11, x21
0xffff7ab81308   904  tbz w11, #0, #+0x40 (addr 0xffff7ab81348)
0xffff7ab8130c   908  ldp x21, x11, [jssp], #16
0xffff7ab81310   912  ldp x1, x0, [jssp], #16
0xffff7ab81314   916  ldr x16, pc+572 (addr 0x0000ffff7ab81550)    ;; external reference (store_buffer_top)
0xffff7ab81318   920  ldr x10, [x16]
0xffff7ab8131c   924  str x11, [x10], #8
0xffff7ab81320   928  str x10, [x16]
0xffff7ab81324   932  tst x10, #0x1ffff
0xffff7ab81328   936  b.eq #+0x8 (addr 0xffff7ab81330)
0xffff7ab8132c   940  ret
0xffff7ab81330   944  sub csp, jssp, #0x8 (8)
0xffff7ab81334   948  str lr, [jssp, #-8]!
0xffff7ab81338   952  ldr x17, pc+544 (addr 0x0000ffff7ab81558)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab8133c   956  blr x17
0xffff7ab81340   960  ldr lr, [jssp], #8
0xffff7ab81344   964  ret
0xffff7ab81348   968  ldp x21, x11, [jssp], #16
0xffff7ab8134c   972  sub csp, jssp, #0x78 (120)
0xffff7ab81350   976  stp x14, x15, [jssp, #-32]!
0xffff7ab81354   980  stp x18, lr, [jssp, #16]
0xffff7ab81358   984  stp x9, x11, [jssp, #-32]!
0xffff7ab8135c   988  stp x12, x13, [jssp, #16]
0xffff7ab81360   992  stp x5, x6, [jssp, #-32]!
0xffff7ab81364   996  stp x7, x8, [jssp, #16]
0xffff7ab81368  1000  stp x2, x3, [jssp, #-24]!
0xffff7ab8136c  1004  str x4, [jssp, #16]
0xffff7ab81370  1008  mov x0, x21
0xffff7ab81374  1012  mov x1, x11
0xffff7ab81378  1016  ldr x2, pc+488 (addr 0x0000ffff7ab81560)    ;; external reference (isolate)
0xffff7ab8137c  1020  ldr x16, pc+492 (addr 0x0000ffff7ab81568)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab81380  1024  and csp, jssp, #0xfffffffffffffff0
0xffff7ab81384  1028  blr x16
0xffff7ab81388  1032  ldp x4, x5, [jssp, #16]
0xffff7ab8138c  1036  ldp x2, x3, [jssp], #32
0xffff7ab81390  1040  ldp x8, x9, [jssp, #16]
0xffff7ab81394  1044  ldp x6, x7, [jssp], #32
0xffff7ab81398  1048  ldp x13, x14, [jssp, #16]
0xffff7ab8139c  1052  ldp x11, x12, [jssp], #32
0xffff7ab813a0  1056  ldr lr, [jssp, #16]
0xffff7ab813a4  1060  ldp x15, x18, [jssp], #24
0xffff7ab813a8  1064  ldp x1, x0, [jssp], #16
0xffff7ab813ac  1068  ldr x16, pc+452 (addr 0x0000ffff7ab81570)    ;; external reference (store_buffer_top)
0xffff7ab813b0  1072  ldr x10, [x16]
0xffff7ab813b4  1076  str x11, [x10], #8
0xffff7ab813b8  1080  str x10, [x16]
0xffff7ab813bc  1084  tst x10, #0x1ffff
0xffff7ab813c0  1088  b.eq #+0x8 (addr 0xffff7ab813c8)
0xffff7ab813c4  1092  ret
0xffff7ab813c8  1096  sub csp, jssp, #0x8 (8)
0xffff7ab813cc  1100  str lr, [jssp, #-8]!
0xffff7ab813d0  1104  ldr x17, pc+424 (addr 0x0000ffff7ab81578)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0xffff7ab813d4  1108  blr x17
0xffff7ab813d8  1112  ldr lr, [jssp], #8
0xffff7ab813dc  1116  ret
0xffff7ab813e0  1120  and x10, x21, #0xfffffffffff00000
0xffff7ab813e4  1124  ldr x0, [x10, #104]
0xffff7ab813e8  1128  subs x0, x0, #0x1 (1)
0xffff7ab813ec  1132  str x0, [x10, #104]
0xffff7ab813f0  1136  b.mi #+0x84 (addr 0xffff7ab81474)
0xffff7ab813f4  1140  ubfx x16, x21, #8, #12
0xffff7ab813f8  1144  and x10, x21, #0xfffffffffff00000
0xffff7ab813fc  1148  add x10, x10, x16, lsl #2
0xffff7ab81400  1152  ubfx x0, x21, #3, #5
0xffff7ab81404  1156  ldr x10, [x10, #360]
0xffff7ab81408  1160  lsr x10, x10, x0
0xffff7ab8140c  1164  tbz w10, #0, #+0x8 (addr 0xffff7ab81414)
0xffff7ab81410  1168  tbnz w10, #1, #+0xc (addr 0xffff7ab8141c)
0xffff7ab81414  1172  ldp x1, x0, [jssp], #16
0xffff7ab81418  1176  ret
0xffff7ab8141c  1180  ldr x10, [x11]
0xffff7ab81420  1184  and x0, x10, #0xfffffffffff00000
0xffff7ab81424  1188  ldr x0, [x0, #8]
0xffff7ab81428  1192  tbz w0, #6, #+0x18 (addr 0xffff7ab81440)
0xffff7ab8142c  1196  and x0, x21, #0xfffffffffff00000
0xffff7ab81430  1200  ldr x0, [x0, #8]
0xffff7ab81434  1204  movz x16, #0x58
0xffff7ab81438  1208  tst x0, x16
0xffff7ab8143c  1212  b.eq #+0x38 (addr 0xffff7ab81474)
0xffff7ab81440  1216  sub csp, jssp, #0x10 (16)
0xffff7ab81444  1220  stp x21, x11, [jssp, #-16]!
0xffff7ab81448  1224  ubfx x16, x10, #8, #12
0xffff7ab8144c  1228  and x0, x10, #0xfffffffffff00000
0xffff7ab81450  1232  add x0, x0, x16, lsl #2
0xffff7ab81454  1236  ubfx x21, x10, #3, #5
0xffff7ab81458  1240  ldr x11, [x0, #360]
0xffff7ab8145c  1244  lsr x11, x11, x21
0xffff7ab81460  1248  tbz w11, #0, #+0x10 (addr 0xffff7ab81470)
0xffff7ab81464  1252  ldp x21, x11, [jssp], #16
0xffff7ab81468  1256  ldp x1, x0, [jssp], #16
0xffff7ab8146c  1260  ret
0xffff7ab81470  1264  ldp x21, x11, [jssp], #16
0xffff7ab81474  1268  sub csp, jssp, #0x78 (120)
0xffff7ab81478  1272  stp x14, x15, [jssp, #-32]!
0xffff7ab8147c  1276  stp x18, lr, [jssp, #16]
0xffff7ab81480  1280  stp x9, x11, [jssp, #-32]!
0xffff7ab81484  1284  stp x12, x13, [jssp, #16]
0xffff7ab81488  1288  stp x5, x6, [jssp, #-32]!
0xffff7ab8148c  1292  stp x7, x8, [jssp, #16]
0xffff7ab81490  1296  stp x2, x3, [jssp, #-24]!
0xffff7ab81494  1300  str x4, [jssp, #16]
0xffff7ab81498  1304  mov x0, x21
0xffff7ab8149c  1308  mov x1, x11
0xffff7ab814a0  1312  ldr x2, pc+224 (addr 0x0000ffff7ab81580)    ;; external reference (isolate)
0xffff7ab814a4  1316  ldr x16, pc+228 (addr 0x0000ffff7ab81588)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab814a8  1320  and csp, jssp, #0xfffffffffffffff0
0xffff7ab814ac  1324  blr x16
0xffff7ab814b0  1328  ldp x4, x5, [jssp, #16]
0xffff7ab814b4  1332  ldp x2, x3, [jssp], #32
0xffff7ab814b8  1336  ldp x8, x9, [jssp, #16]
0xffff7ab814bc  1340  ldp x6, x7, [jssp], #32
0xffff7ab814c0  1344  ldp x13, x14, [jssp, #16]
0xffff7ab814c4  1348  ldp x11, x12, [jssp], #32
0xffff7ab814c8  1352  ldr lr, [jssp, #16]
0xffff7ab814cc  1356  ldp x15, x18, [jssp], #24
0xffff7ab814d0  1360  ldp x1, x0, [jssp], #16
0xffff7ab814d4  1364  ret
0xffff7ab814d8  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab814dc  1372  d63f03e0       constant
0xffff7ab814e0  1376  09abe8c0       constant
0xffff7ab814e4  1380  00000000       constant
0xffff7ab814e8  1384  7ab064c0       constant
0xffff7ab814ec  1388  0000ffff       constant
0xffff7ab814f0  1392  09abe8c0       constant
0xffff7ab814f4  1396  00000000       constant
0xffff7ab814f8  1400  7ab064c0       constant
0xffff7ab814fc  1404  0000ffff       constant
0xffff7ab81500  1408  09abe8c0       constant
0xffff7ab81504  1412  00000000       constant
0xffff7ab81508  1416  7ab064c0       constant
0xffff7ab8150c  1420  0000ffff       constant
0xffff7ab81510  1424  09abd2d0       constant
0xffff7ab81514  1428  00000000       constant
0xffff7ab81518  1432  00c2d958       constant
0xffff7ab8151c  1436  00000000       constant
0xffff7ab81520  1440  09abe8c0       constant
0xffff7ab81524  1444  00000000       constant
0xffff7ab81528  1448  7ab064c0       constant
0xffff7ab8152c  1452  0000ffff       constant
0xffff7ab81530  1456  09abd2d0       constant
0xffff7ab81534  1460  00000000       constant
0xffff7ab81538  1464  00c2d958       constant
0xffff7ab8153c  1468  00000000       constant
0xffff7ab81540  1472  09abe8c0       constant
0xffff7ab81544  1476  00000000       constant
0xffff7ab81548  1480  7ab064c0       constant
0xffff7ab8154c  1484  0000ffff       constant
0xffff7ab81550  1488  09abe8c0       constant
0xffff7ab81554  1492  00000000       constant
0xffff7ab81558  1496  7ab064c0       constant
0xffff7ab8155c  1500  0000ffff       constant
0xffff7ab81560  1504  09abd2d0       constant
0xffff7ab81564  1508  00000000       constant
0xffff7ab81568  1512  00c2d958       constant
0xffff7ab8156c  1516  00000000       constant
0xffff7ab81570  1520  09abe8c0       constant
0xffff7ab81574  1524  00000000       constant
0xffff7ab81578  1528  7ab064c0       constant
0xffff7ab8157c  1532  0000ffff       constant
0xffff7ab81580  1536  09abd2d0       constant
0xffff7ab81584  1540  00000000       constant
0xffff7ab81588  1544  00c2d958       constant
0xffff7ab8158c  1548  00000000       constant


RelocInfo (size = 59)
0xffff7ab80f88  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab80fac  code target (STUB)  (0xffff7ab064c0)
0xffff7ab81024  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab81048  code target (STUB)  (0xffff7ab064c0)
0xffff7ab81088  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab810ac  code target (STUB)  (0xffff7ab064c0)
0xffff7ab810ec  external reference (isolate)  (0x9abd2d0)
0xffff7ab810f0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab81120  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab81144  code target (STUB)  (0xffff7ab064c0)
0xffff7ab811f4  external reference (isolate)  (0x9abd2d0)
0xffff7ab811f8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab81290  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab812b4  code target (STUB)  (0xffff7ab064c0)
0xffff7ab81314  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab81338  code target (STUB)  (0xffff7ab064c0)
0xffff7ab81378  external reference (isolate)  (0x9abd2d0)
0xffff7ab8137c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab813ac  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab813d0  code target (STUB)  (0xffff7ab064c0)
0xffff7ab814a0  external reference (isolate)  (0x9abd2d0)
0xffff7ab814a4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab814d8  constant pool (size 184)


kind = STUB
major_key = RegExpExecStub
name = RegExpExecStub
compiler = unknown
Instructions (size = 944)
0xffff7ab81600     0  ldr x10, pc+776 (addr 0x0000ffff7ab81908)    ;; external reference (RegExpStack::memory_size())
0xffff7ab81604     4  ldr x10, [x10]
0xffff7ab81608     8  cbz x10, #+0x2c0 (addr 0xffff7ab818c8)
0xffff7ab8160c    12  ldr x3, [jssp, #24]
0xffff7ab81610    16  tbz w3, #0, #+0x2b8 (addr 0xffff7ab818c8)
0xffff7ab81614    20  ldur x10, [x3, #-1]
0xffff7ab81618    24  ldrb w10, [x10, #11]
0xffff7ab8161c    28  cmp x10, #0xc7 (199)
0xffff7ab81620    32  b.ne #+0x2a8 (addr 0xffff7ab818c8)
0xffff7ab81624    36  ldur x20, [x3, #23]
0xffff7ab81628    40  ldur x10, [x20, #15]
0xffff7ab8162c    44  movz x16, #0x200000000
0xffff7ab81630    48  cmp x10, x16
0xffff7ab81634    52  b.ne #+0x294 (addr 0xffff7ab818c8)
0xffff7ab81638    56  ldursw x10, [x20, #83]
0xffff7ab8163c    60  add x10, x10, x10
0xffff7ab81640    64  cmp x10, #0x7e (126)
0xffff7ab81644    68  b.hi #+0x284 (addr 0xffff7ab818c8)
0xffff7ab81648    72  movz w5, #0x0
0xffff7ab8164c    76  ldr x19, [jssp, #16]
0xffff7ab81650    80  tbz w19, #0, #+0x278 (addr 0xffff7ab818c8)
0xffff7ab81654    84  ldur x2, [x19, #15]
0xffff7ab81658    88  ldur x10, [x19, #-1]
0xffff7ab8165c    92  ldrb w0, [x10, #11]
0xffff7ab81660    96  movz w16, #0x93
0xffff7ab81664   100  and w6, w0, w16
0xffff7ab81668   104  cbz w6, #+0x24 (addr 0xffff7ab8168c)
0xffff7ab8166c   108  cmp w6, #0x2 (2)
0xffff7ab81670   112  b.ge #+0x268 (addr 0xffff7ab818d8)
0xffff7ab81674   116  ldur x10, [x19, #31]
0xffff7ab81678   120  ldr x16, [x26, #80]
0xffff7ab8167c   124  cmp x10, x16
0xffff7ab81680   128  b.ne #+0x248 (addr 0xffff7ab818c8)
0xffff7ab81684   132  ldur x19, [x19, #23]
0xffff7ab81688   136  b #-0x30 (addr 0xffff7ab81658)
0xffff7ab8168c   140  ldr x10, [jssp, #8]
0xffff7ab81690   144  tbnz w10, #0, #+0x238 (addr 0xffff7ab818c8)
0xffff7ab81694   148  cmp x2, x10
0xffff7ab81698   152  b.ls #+0x230 (addr 0xffff7ab818c8)
0xffff7ab8169c   156  asr x1, x10, #32
0xffff7ab816a0   160  movz x10, #0x8
0xffff7ab816a4   164  ands w4, w0, #0x4
0xffff7ab816a8   168  csel x10, xzr, x10, ne
0xffff7ab816ac   172  add x10, x20, x10
0xffff7ab816b0   176  ldur x22, [x10, #39]
0xffff7ab816b4   180  tbz w22, #0, #+0x214 (addr 0xffff7ab818c8)
0xffff7ab816b8   184  sub csp, jssp, #0x10 (16)
0xffff7ab816bc   188  stp fp, lr, [jssp, #-16]!
0xffff7ab816c0   192  mov fp, jssp
0xffff7ab816c4   196  movz x10, #0x300000000
0xffff7ab816c8   200  sub csp, jssp, #0x8 (8)
0xffff7ab816cc   204  str x10, [jssp, #-8]!
0xffff7ab816d0   208  sub csp, jssp, #0x8 (8)
0xffff7ab816d4   212  str xzr, [jssp, #-8]!
0xffff7ab816d8   216  ldr x10, pc+568 (addr 0x0000ffff7ab81910)    ;; object: 0xffff7ab815a1 <Code: STUB>
0xffff7ab816dc   220  sub csp, jssp, #0x8 (8)
0xffff7ab816e0   224  str x10, [jssp, #-8]!
0xffff7ab816e4   228  ldr x10, pc+564 (addr 0x0000ffff7ab81918)    ;; external reference (Isolate::c_entry_fp_address)
0xffff7ab816e8   232  str fp, [x10]
0xffff7ab816ec   236  ldr x10, pc+564 (addr 0x0000ffff7ab81920)    ;; external reference (Isolate::context_address)
0xffff7ab816f0   240  str cp, [x10]
0xffff7ab816f4   244  sub csp, jssp, #0x10 (16)
0xffff7ab816f8   248  sub jssp, jssp, #0x10 (16)
0xffff7ab816fc   252  and csp, jssp, #0xfffffffffffffff0
0xffff7ab81700   256  add x10, csp, #0x8 (8)
0xffff7ab81704   260  stur x10, [fp, #-16]
0xffff7ab81708   264  ldr x10, pc+544 (addr 0x0000ffff7ab81928)    ;; external reference (isolate)
0xffff7ab8170c   268  str x10, [csp, #8]
0xffff7ab81710   272  add x13, x19, #0x17 (23)
0xffff7ab81714   276  ldr x19, [fp, #32]
0xffff7ab81718   280  ldur w11, [x19, #19]
0xffff7ab8171c   284  ubfx w4, w4, #2, #1
0xffff7ab81720   288  eor w4, w4, #0x1
0xffff7ab81724   292  lsl w12, w1, w4
0xffff7ab81728   296  lsl w11, w11, w4
0xffff7ab8172c   300  lsl w5, w5, w4
0xffff7ab81730   304  mov x0, x19
0xffff7ab81734   308  add w10, w12, w5
0xffff7ab81738   312  add x2, x13, w10, uxtw
0xffff7ab8173c   316  sub w10, w11, w12
0xffff7ab81740   320  add x3, x2, w10, uxtw
0xffff7ab81744   324  ldr x4, pc+492 (addr 0x0000ffff7ab81930)    ;; external reference (OffsetsVector::static_offsets_vector)
0xffff7ab81748   328  movz x5, #0x0
0xffff7ab8174c   332  ldr x10, pc+492 (addr 0x0000ffff7ab81938)    ;; external reference (RegExpStack::memory_address())
0xffff7ab81750   336  ldr x10, [x10]
0xffff7ab81754   340  ldr x11, pc+492 (addr 0x0000ffff7ab81940)    ;; external reference (RegExpStack::memory_size())
0xffff7ab81758   344  ldr x11, [x11]
0xffff7ab8175c   348  add x6, x10, x11
0xffff7ab81760   352  movz x7, #0x1
0xffff7ab81764   356  add x22, x22, #0x5f (95)
0xffff7ab81768   360  ldr lr, pc+480 (addr 0x0000ffff7ab81948)    ;; code: STUB, DirectCEntryStub, minor: 0
0xffff7ab8176c   364  mov x10, x22
0xffff7ab81770   368  blr lr
0xffff7ab81774   372  ldr x10, pc+476 (addr 0x0000ffff7ab81950)    ;; external reference (Isolate::context_address)
0xffff7ab81778   376  ldr cp, [x10]
0xffff7ab8177c   380  ldr x10, pc+476 (addr 0x0000ffff7ab81958)    ;; external reference (Isolate::c_entry_fp_address)
0xffff7ab81780   384  str xzr, [x10]
0xffff7ab81784   388  mov jssp, fp
0xffff7ab81788   392  ldp fp, lr, [jssp], #16
0xffff7ab8178c   396  cbz w0, #+0x130 (addr 0xffff7ab818bc)
0xffff7ab81790   400  cmn w0, #0x1 (1)
0xffff7ab81794   404  b.eq #+0x104 (addr 0xffff7ab81898)
0xffff7ab81798   408  cmn w0, #0x2 (2)
0xffff7ab8179c   412  b.eq #+0x12c (addr 0xffff7ab818c8)
0xffff7ab817a0   416  ldursw x10, [x20, #83]
0xffff7ab817a4   420  add x10, x10, x10
0xffff7ab817a8   424  add x12, x10, #0x2 (2)
0xffff7ab817ac   428  ldr x10, [jssp]
0xffff7ab817b0   432  tbz w10, #0, #+0x118 (addr 0xffff7ab818c8)
0xffff7ab817b4   436  ldur x11, [x10, #-1]
0xffff7ab817b8   440  ldrb w11, [x11, #11]
0xffff7ab817bc   444  cmp x11, #0xbc (188)
0xffff7ab817c0   448  b.ne #+0x108 (addr 0xffff7ab818c8)
0xffff7ab817c4   452  ldur x21, [x10, #15]
0xffff7ab817c8   456  ldur x10, [x21, #-1]
0xffff7ab817cc   460  ldr x16, [x26, #224]
0xffff7ab817d0   464  cmp x10, x16
0xffff7ab817d4   468  b.ne #+0xf4 (addr 0xffff7ab818c8)
0xffff7ab817d8   472  ldursw x10, [x21, #11]
0xffff7ab817dc   476  add x11, x12, #0x3 (3)
0xffff7ab817e0   480  cmp x11, x10
0xffff7ab817e4   484  b.gt #+0xe4 (addr 0xffff7ab818c8)
0xffff7ab817e8   488  lsl x10, x12, #32
0xffff7ab817ec   492  stur x10, [x21, #15]
0xffff7ab817f0   496  stur x19, [x21, #23]
0xffff7ab817f4   500  mov x10, x19
0xffff7ab817f8   504  tbz w10, #0, #+0x34 (addr 0xffff7ab8182c)
0xffff7ab817fc   508  add x11, x21, #0x17 (23)
0xffff7ab81800   512  and x10, x10, #0xfffffffffff00000
0xffff7ab81804   516  ldr x10, [x10, #8]
0xffff7ab81808   520  tbz w10, #1, #+0x24 (addr 0xffff7ab8182c)
0xffff7ab8180c   524  and x10, x21, #0xfffffffffff00000
0xffff7ab81810   528  ldr x10, [x10, #8]
0xffff7ab81814   532  tbz w10, #2, #+0x18 (addr 0xffff7ab8182c)
0xffff7ab81818   536  sub csp, jssp, #0x8 (8)
0xffff7ab8181c   540  str lr, [jssp, #-8]!
0xffff7ab81820   544  ldr x16, pc+320 (addr 0x0000ffff7ab81960)    ;; code: STUB, RecordWriteStub, minor: 11605
0xffff7ab81824   548  blr x16
0xffff7ab81828   552  ldr lr, [jssp], #8
0xffff7ab8182c   556  stur x19, [x21, #31]
0xffff7ab81830   560  mov x10, x19
0xffff7ab81834   564  tbz w10, #0, #+0x34 (addr 0xffff7ab81868)
0xffff7ab81838   568  add x11, x21, #0x1f (31)
0xffff7ab8183c   572  and x10, x10, #0xfffffffffff00000
0xffff7ab81840   576  ldr x10, [x10, #8]
0xffff7ab81844   580  tbz w10, #1, #+0x24 (addr 0xffff7ab81868)
0xffff7ab81848   584  and x10, x21, #0xfffffffffff00000
0xffff7ab8184c   588  ldr x10, [x10, #8]
0xffff7ab81850   592  tbz w10, #2, #+0x18 (addr 0xffff7ab81868)
0xffff7ab81854   596  sub csp, jssp, #0x8 (8)
0xffff7ab81858   600  str lr, [jssp, #-8]!
0xffff7ab8185c   604  ldr x16, pc+268 (addr 0x0000ffff7ab81968)    ;; code: STUB, RecordWriteStub, minor: 11605
0xffff7ab81860   608  blr x16
0xffff7ab81864   612  ldr lr, [jssp], #8
0xffff7ab81868   616  ldr x14, pc+264 (addr 0x0000ffff7ab81970)    ;; external reference (OffsetsVector::static_offsets_vector)
0xffff7ab8186c   620  add x13, x21, #0x27 (39)
0xffff7ab81870   624  subs x12, x12, #0x2 (2)
0xffff7ab81874   628  b.mi #+0x18 (addr 0xffff7ab8188c)
0xffff7ab81878   632  ldr x15, [x14], #8
0xffff7ab8187c   636  lsl x10, x15, #32
0xffff7ab81880   640  and x11, x15, #0xffffffff00000000
0xffff7ab81884   644  stp x10, x11, [x13], #16
0xffff7ab81888   648  b #-0x18 (addr 0xffff7ab81870)
0xffff7ab8188c   652  ldr x0, [jssp]
0xffff7ab81890   656  add jssp, jssp, #0x20 (32)
0xffff7ab81894   660  ret
0xffff7ab81898   664  ldr x10, pc+224 (addr 0x0000ffff7ab81978)    ;; object: 0x20d04519 <the hole>
0xffff7ab8189c   668  ldr x11, pc+228 (addr 0x0000ffff7ab81980)    ;; external reference (Isolate::pending_exception_address)
0xffff7ab818a0   672  ldr x0, [x11]
0xffff7ab818a4   676  cmp x10, x0
0xffff7ab818a8   680  b.eq #+0x20 (addr 0xffff7ab818c8)
0xffff7ab818ac   684  movz x0, #0x4
0xffff7ab818b0   688  ldr x1, pc+216 (addr 0x0000ffff7ab81988)    ;; external reference (Runtime::RegExpExecReThrow)
0xffff7ab818b4   692  ldr x16, pc+220 (addr 0x0000ffff7ab81990)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab818b8   696  br x16
0xffff7ab818bc   700  ldr x0, pc+220 (addr 0x0000ffff7ab81998)    ;; object: 0x20d04211 <null>
0xffff7ab818c0   704  add jssp, jssp, #0x20 (32)
0xffff7ab818c4   708  ret
0xffff7ab818c8   712  movz x0, #0x4
0xffff7ab818cc   716  ldr x1, pc+212 (addr 0x0000ffff7ab819a0)    ;; external reference (Runtime::RegExpExec)
0xffff7ab818d0   720  ldr x16, pc+216 (addr 0x0000ffff7ab819a8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab818d4   724  br x16
0xffff7ab818d8   728  b.ne #+0x10 (addr 0xffff7ab818e8)
0xffff7ab818dc   732  ldur x19, [x19, #31]
0xffff7ab818e0   736  sub x19, x19, #0x17 (23)
0xffff7ab818e4   740  b #-0x258 (addr 0xffff7ab8168c)
0xffff7ab818e8   744  movz w16, #0x90
0xffff7ab818ec   748  tst w6, w16
0xffff7ab818f0   752  b.ne #-0x28 (addr 0xffff7ab818c8)
0xffff7ab818f4   756  ldur w5, [x19, #35]
0xffff7ab818f8   760  ldur x19, [x19, #23]
0xffff7ab818fc   764  b #-0x2a4 (addr 0xffff7ab81658)
0xffff7ab81900   768  5800057f       constant pool begin (num_const = 43)    ;; constant pool
0xffff7ab81904   772  d63f03e0       constant
0xffff7ab81908   776  09ae7988       constant
0xffff7ab8190c   780  00000000       constant
0xffff7ab81910   784  7ab815a1       constant
0xffff7ab81914   788  0000ffff       constant
0xffff7ab81918   792  09abedf8       constant
0xffff7ab8191c   796  00000000       constant
0xffff7ab81920   800  09abed90       constant
0xffff7ab81924   804  00000000       constant
0xffff7ab81928   808  09abd2d0       constant
0xffff7ab8192c   812  00000000       constant
0xffff7ab81930   816  09ac1e28       constant
0xffff7ab81934   820  00000000       constant
0xffff7ab81938   824  09ae7980       constant
0xffff7ab8193c   828  00000000       constant
0xffff7ab81940   832  09ae7988       constant
0xffff7ab81944   836  00000000       constant
0xffff7ab81948   840  7ab68200       constant
0xffff7ab8194c   844  0000ffff       constant
0xffff7ab81950   848  09abed90       constant
0xffff7ab81954   852  00000000       constant
0xffff7ab81958   856  09abedf8       constant
0xffff7ab8195c   860  00000000       constant
0xffff7ab81960   864  7ab80f80       constant
0xffff7ab81964   868  0000ffff       constant
0xffff7ab81968   872  7ab80f80       constant
0xffff7ab8196c   876  0000ffff       constant
0xffff7ab81970   880  09ac1e28       constant
0xffff7ab81974   884  00000000       constant
0xffff7ab81978   888  20d04519       constant
0xffff7ab8197c   892  00000000       constant
0xffff7ab81980   896  09abeda0       constant
0xffff7ab81984   900  00000000       constant
0xffff7ab81988   904  00e59010       constant
0xffff7ab8198c   908  00000000       constant
0xffff7ab81990   912  7ab06060       constant
0xffff7ab81994   916  0000ffff       constant
0xffff7ab81998   920  20d04211       constant
0xffff7ab8199c   924  00000000       constant
0xffff7ab819a0   928  00e57200       constant
0xffff7ab819a4   932  00000000       constant
0xffff7ab819a8   936  7ab06060       constant
0xffff7ab819ac   940  0000ffff       constant


RelocInfo (size = 44)
0xffff7ab81600  external reference (RegExpStack::memory_size())  (0x9ae7988)
0xffff7ab816d8  embedded object  (0xffff7ab815a1 <Code: STUB>)
0xffff7ab816e4  external reference (Isolate::c_entry_fp_address)  (0x9abedf8)
0xffff7ab816ec  external reference (Isolate::context_address)  (0x9abed90)
0xffff7ab81708  external reference (isolate)  (0x9abd2d0)
0xffff7ab81744  external reference (OffsetsVector::static_offsets_vector)  (0x9ac1e28)
0xffff7ab8174c  external reference (RegExpStack::memory_address())  (0x9ae7980)
0xffff7ab81754  external reference (RegExpStack::memory_size())  (0x9ae7988)
0xffff7ab81768  code target (STUB)  (0xffff7ab68200)
0xffff7ab81774  external reference (Isolate::context_address)  (0x9abed90)
0xffff7ab8177c  external reference (Isolate::c_entry_fp_address)  (0x9abedf8)
0xffff7ab81820  code target (STUB)  (0xffff7ab80f80)
0xffff7ab8185c  code target (STUB)  (0xffff7ab80f80)
0xffff7ab81868  external reference (OffsetsVector::static_offsets_vector)  (0x9ac1e28)
0xffff7ab81898  embedded object  (0x20d04519 <the hole>)
0xffff7ab8189c  external reference (Isolate::pending_exception_address)  (0x9abeda0)
0xffff7ab818b0  external reference (Runtime::RegExpExecReThrow)  (0xe59010)
0xffff7ab818b4  code target (STUB)  (0xffff7ab06060)
0xffff7ab818bc  embedded object  (0x20d04211 <null>)
0xffff7ab818cc  external reference (Runtime::RegExpExec)  (0xe57200)
0xffff7ab818d0  code target (STUB)  (0xffff7ab06060)
0xffff7ab81900  constant pool (size 176)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0xffff7ab81a20     0  adr xzr, #+0x40 (addr 0xffff7ab81a60)
0xffff7ab81a24     4  adr xzr, #+0x360 (addr 0xffff7ab81d84)
0xffff7ab81a28     8  ldr x16, pc+1736 (addr 0x0000ffff7ab820f0)    ;; external reference (store_buffer_top)
0xffff7ab81a2c    12  ldr x3, [x16]
0xffff7ab81a30    16  str x4, [x3], #8
0xffff7ab81a34    20  str x3, [x16]
0xffff7ab81a38    24  tst x3, #0x1ffff
0xffff7ab81a3c    28  b.eq #+0x8 (addr 0xffff7ab81a44)
0xffff7ab81a40    32  ret
0xffff7ab81a44    36  sub csp, jssp, #0x8 (8)
0xffff7ab81a48    40  str lr, [jssp, #-8]!
0xffff7ab81a4c    44  ldr x17, pc+1708 (addr 0x0000ffff7ab820f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab81a50    48  blr x17
0xffff7ab81a54    52  ldr lr, [jssp], #8
0xffff7ab81a58    56  ret
0xffff7ab81a5c    60  ret
0xffff7ab81a60    64  sub csp, jssp, #0x10 (16)
0xffff7ab81a64    68  stp x1, x0, [jssp, #-16]!
0xffff7ab81a68    72  ldr x3, [x4]
0xffff7ab81a6c    76  and x16, x3, #0xfffffffffff00000
0xffff7ab81a70    80  ldr x16, [x16, #8]
0xffff7ab81a74    84  tst x16, #0x18
0xffff7ab81a78    88  b.eq #+0x1d8 (addr 0xffff7ab81c50)
0xffff7ab81a7c    92  and x16, x6, #0xfffffffffff00000
0xffff7ab81a80    96  ldr x16, [x16, #8]
0xffff7ab81a84   100  tst x16, #0x18
0xffff7ab81a88   104  b.ne #+0x1c8 (addr 0xffff7ab81c50)
0xffff7ab81a8c   108  and x3, x6, #0xfffffffffff00000
0xffff7ab81a90   112  ldr x0, [x3, #104]
0xffff7ab81a94   116  subs x0, x0, #0x1 (1)
0xffff7ab81a98   120  str x0, [x3, #104]
0xffff7ab81a9c   124  b.mi #+0xc4 (addr 0xffff7ab81b60)
0xffff7ab81aa0   128  ubfx x16, x6, #8, #12
0xffff7ab81aa4   132  and x3, x6, #0xfffffffffff00000
0xffff7ab81aa8   136  add x3, x3, x16, lsl #2
0xffff7ab81aac   140  ubfx x0, x6, #3, #5
0xffff7ab81ab0   144  ldr x3, [x3, #360]
0xffff7ab81ab4   148  lsr x3, x3, x0
0xffff7ab81ab8   152  tbz w3, #0, #+0x8 (addr 0xffff7ab81ac0)
0xffff7ab81abc   156  tbnz w3, #1, #+0x3c (addr 0xffff7ab81af8)
0xffff7ab81ac0   160  ldp x1, x0, [jssp], #16
0xffff7ab81ac4   164  ldr x16, pc+1596 (addr 0x0000ffff7ab82100)    ;; external reference (store_buffer_top)
0xffff7ab81ac8   168  ldr x3, [x16]
0xffff7ab81acc   172  str x4, [x3], #8
0xffff7ab81ad0   176  str x3, [x16]
0xffff7ab81ad4   180  tst x3, #0x1ffff
0xffff7ab81ad8   184  b.eq #+0x8 (addr 0xffff7ab81ae0)
0xffff7ab81adc   188  ret
0xffff7ab81ae0   192  sub csp, jssp, #0x8 (8)
0xffff7ab81ae4   196  str lr, [jssp, #-8]!
0xffff7ab81ae8   200  ldr x17, pc+1568 (addr 0x0000ffff7ab82108)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab81aec   204  blr x17
0xffff7ab81af0   208  ldr lr, [jssp], #8
0xffff7ab81af4   212  ret
0xffff7ab81af8   216  ldr x3, [x4]
0xffff7ab81afc   220  sub csp, jssp, #0x10 (16)
0xffff7ab81b00   224  stp x6, x4, [jssp, #-16]!
0xffff7ab81b04   228  ubfx x16, x3, #8, #12
0xffff7ab81b08   232  and x0, x3, #0xfffffffffff00000
0xffff7ab81b0c   236  add x0, x0, x16, lsl #2
0xffff7ab81b10   240  ubfx x6, x3, #3, #5
0xffff7ab81b14   244  ldr x4, [x0, #360]
0xffff7ab81b18   248  lsr x4, x4, x6
0xffff7ab81b1c   252  tbz w4, #0, #+0x40 (addr 0xffff7ab81b5c)
0xffff7ab81b20   256  ldp x6, x4, [jssp], #16
0xffff7ab81b24   260  ldp x1, x0, [jssp], #16
0xffff7ab81b28   264  ldr x16, pc+1512 (addr 0x0000ffff7ab82110)    ;; external reference (store_buffer_top)
0xffff7ab81b2c   268  ldr x3, [x16]
0xffff7ab81b30   272  str x4, [x3], #8
0xffff7ab81b34   276  str x3, [x16]
0xffff7ab81b38   280  tst x3, #0x1ffff
0xffff7ab81b3c   284  b.eq #+0x8 (addr 0xffff7ab81b44)
0xffff7ab81b40   288  ret
0xffff7ab81b44   292  sub csp, jssp, #0x8 (8)
0xffff7ab81b48   296  str lr, [jssp, #-8]!
0xffff7ab81b4c   300  ldr x17, pc+1484 (addr 0x0000ffff7ab82118)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab81b50   304  blr x17
0xffff7ab81b54   308  ldr lr, [jssp], #8
0xffff7ab81b58   312  ret
0xffff7ab81b5c   316  ldp x6, x4, [jssp], #16
0xffff7ab81b60   320  sub csp, jssp, #0x78 (120)
0xffff7ab81b64   324  stp x14, x15, [jssp, #-32]!
0xffff7ab81b68   328  stp x18, lr, [jssp, #16]
0xffff7ab81b6c   332  stp x10, x11, [jssp, #-32]!
0xffff7ab81b70   336  stp x12, x13, [jssp, #16]
0xffff7ab81b74   340  stp x6, x7, [jssp, #-32]!
0xffff7ab81b78   344  stp x8, x9, [jssp, #16]
0xffff7ab81b7c   348  stp x2, x4, [jssp, #-24]!
0xffff7ab81b80   352  str x5, [jssp, #16]
0xffff7ab81b84   356  sub csp, jssp, #0xb0 (176)
0xffff7ab81b88   360  stp d26, d27, [jssp, #-32]!
0xffff7ab81b8c   364  stp d28, d29, [jssp, #16]
0xffff7ab81b90   368  stp d22, d23, [jssp, #-32]!
0xffff7ab81b94   372  stp d24, d25, [jssp, #16]
0xffff7ab81b98   376  stp d18, d19, [jssp, #-32]!
0xffff7ab81b9c   380  stp d20, d21, [jssp, #16]
0xffff7ab81ba0   384  stp d6, d7, [jssp, #-32]!
0xffff7ab81ba4   388  stp d16, d17, [jssp, #16]
0xffff7ab81ba8   392  stp d2, d3, [jssp, #-32]!
0xffff7ab81bac   396  stp d4, d5, [jssp, #16]
0xffff7ab81bb0   400  stp d0, d1, [jssp, #-16]!
0xffff7ab81bb4   404  mov x0, x6
0xffff7ab81bb8   408  mov x1, x4
0xffff7ab81bbc   412  ldr x2, pc+1380 (addr 0x0000ffff7ab82120)    ;; external reference (isolate)
0xffff7ab81bc0   416  ldr x16, pc+1384 (addr 0x0000ffff7ab82128)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab81bc4   420  and csp, jssp, #0xfffffffffffffff0
0xffff7ab81bc8   424  blr x16
0xffff7ab81bcc   428  ldp d2, d3, [jssp, #16]
0xffff7ab81bd0   432  ldp d0, d1, [jssp], #32
0xffff7ab81bd4   436  ldp d6, d7, [jssp, #16]
0xffff7ab81bd8   440  ldp d4, d5, [jssp], #32
0xffff7ab81bdc   444  ldp d18, d19, [jssp, #16]
0xffff7ab81be0   448  ldp d16, d17, [jssp], #32
0xffff7ab81be4   452  ldp d22, d23, [jssp, #16]
0xffff7ab81be8   456  ldp d20, d21, [jssp], #32
0xffff7ab81bec   460  ldp d26, d27, [jssp, #16]
0xffff7ab81bf0   464  ldp d24, d25, [jssp], #32
0xffff7ab81bf4   468  ldp d28, d29, [jssp], #16
0xffff7ab81bf8   472  ldp x5, x6, [jssp, #16]
0xffff7ab81bfc   476  ldp x2, x4, [jssp], #32
0xffff7ab81c00   480  ldp x9, x10, [jssp, #16]
0xffff7ab81c04   484  ldp x7, x8, [jssp], #32
0xffff7ab81c08   488  ldp x13, x14, [jssp, #16]
0xffff7ab81c0c   492  ldp x11, x12, [jssp], #32
0xffff7ab81c10   496  ldr lr, [jssp, #16]
0xffff7ab81c14   500  ldp x15, x18, [jssp], #24
0xffff7ab81c18   504  ldp x1, x0, [jssp], #16
0xffff7ab81c1c   508  ldr x16, pc+1300 (addr 0x0000ffff7ab82130)    ;; external reference (store_buffer_top)
0xffff7ab81c20   512  ldr x3, [x16]
0xffff7ab81c24   516  str x4, [x3], #8
0xffff7ab81c28   520  str x3, [x16]
0xffff7ab81c2c   524  tst x3, #0x1ffff
0xffff7ab81c30   528  b.eq #+0x8 (addr 0xffff7ab81c38)
0xffff7ab81c34   532  ret
0xffff7ab81c38   536  sub csp, jssp, #0x8 (8)
0xffff7ab81c3c   540  str lr, [jssp, #-8]!
0xffff7ab81c40   544  ldr x17, pc+1272 (addr 0x0000ffff7ab82138)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab81c44   548  blr x17
0xffff7ab81c48   552  ldr lr, [jssp], #8
0xffff7ab81c4c   556  ret
0xffff7ab81c50   560  and x3, x6, #0xfffffffffff00000
0xffff7ab81c54   564  ldr x0, [x3, #104]
0xffff7ab81c58   568  subs x0, x0, #0x1 (1)
0xffff7ab81c5c   572  str x0, [x3, #104]
0xffff7ab81c60   576  b.mi #+0x64 (addr 0xffff7ab81cc4)
0xffff7ab81c64   580  ubfx x16, x6, #8, #12
0xffff7ab81c68   584  and x3, x6, #0xfffffffffff00000
0xffff7ab81c6c   588  add x3, x3, x16, lsl #2
0xffff7ab81c70   592  ubfx x0, x6, #3, #5
0xffff7ab81c74   596  ldr x3, [x3, #360]
0xffff7ab81c78   600  lsr x3, x3, x0
0xffff7ab81c7c   604  tbz w3, #0, #+0x8 (addr 0xffff7ab81c84)
0xffff7ab81c80   608  tbnz w3, #1, #+0xc (addr 0xffff7ab81c8c)
0xffff7ab81c84   612  ldp x1, x0, [jssp], #16
0xffff7ab81c88   616  ret
0xffff7ab81c8c   620  ldr x3, [x4]
0xffff7ab81c90   624  sub csp, jssp, #0x10 (16)
0xffff7ab81c94   628  stp x6, x4, [jssp, #-16]!
0xffff7ab81c98   632  ubfx x16, x3, #8, #12
0xffff7ab81c9c   636  and x0, x3, #0xfffffffffff00000
0xffff7ab81ca0   640  add x0, x0, x16, lsl #2
0xffff7ab81ca4   644  ubfx x6, x3, #3, #5
0xffff7ab81ca8   648  ldr x4, [x0, #360]
0xffff7ab81cac   652  lsr x4, x4, x6
0xffff7ab81cb0   656  tbz w4, #0, #+0x10 (addr 0xffff7ab81cc0)
0xffff7ab81cb4   660  ldp x6, x4, [jssp], #16
0xffff7ab81cb8   664  ldp x1, x0, [jssp], #16
0xffff7ab81cbc   668  ret
0xffff7ab81cc0   672  ldp x6, x4, [jssp], #16
0xffff7ab81cc4   676  sub csp, jssp, #0x78 (120)
0xffff7ab81cc8   680  stp x14, x15, [jssp, #-32]!
0xffff7ab81ccc   684  stp x18, lr, [jssp, #16]
0xffff7ab81cd0   688  stp x10, x11, [jssp, #-32]!
0xffff7ab81cd4   692  stp x12, x13, [jssp, #16]
0xffff7ab81cd8   696  stp x6, x7, [jssp, #-32]!
0xffff7ab81cdc   700  stp x8, x9, [jssp, #16]
0xffff7ab81ce0   704  stp x2, x4, [jssp, #-24]!
0xffff7ab81ce4   708  str x5, [jssp, #16]
0xffff7ab81ce8   712  sub csp, jssp, #0xb0 (176)
0xffff7ab81cec   716  stp d26, d27, [jssp, #-32]!
0xffff7ab81cf0   720  stp d28, d29, [jssp, #16]
0xffff7ab81cf4   724  stp d22, d23, [jssp, #-32]!
0xffff7ab81cf8   728  stp d24, d25, [jssp, #16]
0xffff7ab81cfc   732  stp d18, d19, [jssp, #-32]!
0xffff7ab81d00   736  stp d20, d21, [jssp, #16]
0xffff7ab81d04   740  stp d6, d7, [jssp, #-32]!
0xffff7ab81d08   744  stp d16, d17, [jssp, #16]
0xffff7ab81d0c   748  stp d2, d3, [jssp, #-32]!
0xffff7ab81d10   752  stp d4, d5, [jssp, #16]
0xffff7ab81d14   756  stp d0, d1, [jssp, #-16]!
0xffff7ab81d18   760  mov x0, x6
0xffff7ab81d1c   764  mov x1, x4
0xffff7ab81d20   768  ldr x2, pc+1056 (addr 0x0000ffff7ab82140)    ;; external reference (isolate)
0xffff7ab81d24   772  ldr x16, pc+1060 (addr 0x0000ffff7ab82148)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab81d28   776  and csp, jssp, #0xfffffffffffffff0
0xffff7ab81d2c   780  blr x16
0xffff7ab81d30   784  ldp d2, d3, [jssp, #16]
0xffff7ab81d34   788  ldp d0, d1, [jssp], #32
0xffff7ab81d38   792  ldp d6, d7, [jssp, #16]
0xffff7ab81d3c   796  ldp d4, d5, [jssp], #32
0xffff7ab81d40   800  ldp d18, d19, [jssp, #16]
0xffff7ab81d44   804  ldp d16, d17, [jssp], #32
0xffff7ab81d48   808  ldp d22, d23, [jssp, #16]
0xffff7ab81d4c   812  ldp d20, d21, [jssp], #32
0xffff7ab81d50   816  ldp d26, d27, [jssp, #16]
0xffff7ab81d54   820  ldp d24, d25, [jssp], #32
0xffff7ab81d58   824  ldp d28, d29, [jssp], #16
0xffff7ab81d5c   828  ldp x5, x6, [jssp, #16]
0xffff7ab81d60   832  ldp x2, x4, [jssp], #32
0xffff7ab81d64   836  ldp x9, x10, [jssp, #16]
0xffff7ab81d68   840  ldp x7, x8, [jssp], #32
0xffff7ab81d6c   844  ldp x13, x14, [jssp, #16]
0xffff7ab81d70   848  ldp x11, x12, [jssp], #32
0xffff7ab81d74   852  ldr lr, [jssp, #16]
0xffff7ab81d78   856  ldp x15, x18, [jssp], #24
0xffff7ab81d7c   860  ldp x1, x0, [jssp], #16
0xffff7ab81d80   864  ret
0xffff7ab81d84   868  sub csp, jssp, #0x10 (16)
0xffff7ab81d88   872  stp x1, x0, [jssp, #-16]!
0xffff7ab81d8c   876  ldr x3, [x4]
0xffff7ab81d90   880  and x16, x3, #0xfffffffffff00000
0xffff7ab81d94   884  ldr x16, [x16, #8]
0xffff7ab81d98   888  tst x16, #0x18
0xffff7ab81d9c   892  b.eq #+0x1f8 (addr 0xffff7ab81f94)
0xffff7ab81da0   896  and x16, x6, #0xfffffffffff00000
0xffff7ab81da4   900  ldr x16, [x16, #8]
0xffff7ab81da8   904  tst x16, #0x18
0xffff7ab81dac   908  b.ne #+0x1e8 (addr 0xffff7ab81f94)
0xffff7ab81db0   912  and x3, x6, #0xfffffffffff00000
0xffff7ab81db4   916  ldr x0, [x3, #104]
0xffff7ab81db8   920  subs x0, x0, #0x1 (1)
0xffff7ab81dbc   924  str x0, [x3, #104]
0xffff7ab81dc0   928  b.mi #+0xe4 (addr 0xffff7ab81ea4)
0xffff7ab81dc4   932  ubfx x16, x6, #8, #12
0xffff7ab81dc8   936  and x3, x6, #0xfffffffffff00000
0xffff7ab81dcc   940  add x3, x3, x16, lsl #2
0xffff7ab81dd0   944  ubfx x0, x6, #3, #5
0xffff7ab81dd4   948  ldr x3, [x3, #360]
0xffff7ab81dd8   952  lsr x3, x3, x0
0xffff7ab81ddc   956  tbz w3, #0, #+0x8 (addr 0xffff7ab81de4)
0xffff7ab81de0   960  tbnz w3, #1, #+0x3c (addr 0xffff7ab81e1c)
0xffff7ab81de4   964  ldp x1, x0, [jssp], #16
0xffff7ab81de8   968  ldr x16, pc+872 (addr 0x0000ffff7ab82150)    ;; external reference (store_buffer_top)
0xffff7ab81dec   972  ldr x3, [x16]
0xffff7ab81df0   976  str x4, [x3], #8
0xffff7ab81df4   980  str x3, [x16]
0xffff7ab81df8   984  tst x3, #0x1ffff
0xffff7ab81dfc   988  b.eq #+0x8 (addr 0xffff7ab81e04)
0xffff7ab81e00   992  ret
0xffff7ab81e04   996  sub csp, jssp, #0x8 (8)
0xffff7ab81e08  1000  str lr, [jssp, #-8]!
0xffff7ab81e0c  1004  ldr x17, pc+844 (addr 0x0000ffff7ab82158)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab81e10  1008  blr x17
0xffff7ab81e14  1012  ldr lr, [jssp], #8
0xffff7ab81e18  1016  ret
0xffff7ab81e1c  1020  ldr x3, [x4]
0xffff7ab81e20  1024  and x0, x3, #0xfffffffffff00000
0xffff7ab81e24  1028  ldr x0, [x0, #8]
0xffff7ab81e28  1032  tbz w0, #6, #+0x18 (addr 0xffff7ab81e40)
0xffff7ab81e2c  1036  and x0, x6, #0xfffffffffff00000
0xffff7ab81e30  1040  ldr x0, [x0, #8]
0xffff7ab81e34  1044  movz x16, #0x58
0xffff7ab81e38  1048  tst x0, x16
0xffff7ab81e3c  1052  b.eq #+0x68 (addr 0xffff7ab81ea4)
0xffff7ab81e40  1056  sub csp, jssp, #0x10 (16)
0xffff7ab81e44  1060  stp x6, x4, [jssp, #-16]!
0xffff7ab81e48  1064  ubfx x16, x3, #8, #12
0xffff7ab81e4c  1068  and x0, x3, #0xfffffffffff00000
0xffff7ab81e50  1072  add x0, x0, x16, lsl #2
0xffff7ab81e54  1076  ubfx x6, x3, #3, #5
0xffff7ab81e58  1080  ldr x4, [x0, #360]
0xffff7ab81e5c  1084  lsr x4, x4, x6
0xffff7ab81e60  1088  tbz w4, #0, #+0x40 (addr 0xffff7ab81ea0)
0xffff7ab81e64  1092  ldp x6, x4, [jssp], #16
0xffff7ab81e68  1096  ldp x1, x0, [jssp], #16
0xffff7ab81e6c  1100  ldr x16, pc+756 (addr 0x0000ffff7ab82160)    ;; external reference (store_buffer_top)
0xffff7ab81e70  1104  ldr x3, [x16]
0xffff7ab81e74  1108  str x4, [x3], #8
0xffff7ab81e78  1112  str x3, [x16]
0xffff7ab81e7c  1116  tst x3, #0x1ffff
0xffff7ab81e80  1120  b.eq #+0x8 (addr 0xffff7ab81e88)
0xffff7ab81e84  1124  ret
0xffff7ab81e88  1128  sub csp, jssp, #0x8 (8)
0xffff7ab81e8c  1132  str lr, [jssp, #-8]!
0xffff7ab81e90  1136  ldr x17, pc+728 (addr 0x0000ffff7ab82168)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab81e94  1140  blr x17
0xffff7ab81e98  1144  ldr lr, [jssp], #8
0xffff7ab81e9c  1148  ret
0xffff7ab81ea0  1152  ldp x6, x4, [jssp], #16
0xffff7ab81ea4  1156  sub csp, jssp, #0x78 (120)
0xffff7ab81ea8  1160  stp x14, x15, [jssp, #-32]!
0xffff7ab81eac  1164  stp x18, lr, [jssp, #16]
0xffff7ab81eb0  1168  stp x10, x11, [jssp, #-32]!
0xffff7ab81eb4  1172  stp x12, x13, [jssp, #16]
0xffff7ab81eb8  1176  stp x6, x7, [jssp, #-32]!
0xffff7ab81ebc  1180  stp x8, x9, [jssp, #16]
0xffff7ab81ec0  1184  stp x2, x4, [jssp, #-24]!
0xffff7ab81ec4  1188  str x5, [jssp, #16]
0xffff7ab81ec8  1192  sub csp, jssp, #0xb0 (176)
0xffff7ab81ecc  1196  stp d26, d27, [jssp, #-32]!
0xffff7ab81ed0  1200  stp d28, d29, [jssp, #16]
0xffff7ab81ed4  1204  stp d22, d23, [jssp, #-32]!
0xffff7ab81ed8  1208  stp d24, d25, [jssp, #16]
0xffff7ab81edc  1212  stp d18, d19, [jssp, #-32]!
0xffff7ab81ee0  1216  stp d20, d21, [jssp, #16]
0xffff7ab81ee4  1220  stp d6, d7, [jssp, #-32]!
0xffff7ab81ee8  1224  stp d16, d17, [jssp, #16]
0xffff7ab81eec  1228  stp d2, d3, [jssp, #-32]!
0xffff7ab81ef0  1232  stp d4, d5, [jssp, #16]
0xffff7ab81ef4  1236  stp d0, d1, [jssp, #-16]!
0xffff7ab81ef8  1240  mov x0, x6
0xffff7ab81efc  1244  mov x1, x4
0xffff7ab81f00  1248  ldr x2, pc+624 (addr 0x0000ffff7ab82170)    ;; external reference (isolate)
0xffff7ab81f04  1252  ldr x16, pc+628 (addr 0x0000ffff7ab82178)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab81f08  1256  and csp, jssp, #0xfffffffffffffff0
0xffff7ab81f0c  1260  blr x16
0xffff7ab81f10  1264  ldp d2, d3, [jssp, #16]
0xffff7ab81f14  1268  ldp d0, d1, [jssp], #32
0xffff7ab81f18  1272  ldp d6, d7, [jssp, #16]
0xffff7ab81f1c  1276  ldp d4, d5, [jssp], #32
0xffff7ab81f20  1280  ldp d18, d19, [jssp, #16]
0xffff7ab81f24  1284  ldp d16, d17, [jssp], #32
0xffff7ab81f28  1288  ldp d22, d23, [jssp, #16]
0xffff7ab81f2c  1292  ldp d20, d21, [jssp], #32
0xffff7ab81f30  1296  ldp d26, d27, [jssp, #16]
0xffff7ab81f34  1300  ldp d24, d25, [jssp], #32
0xffff7ab81f38  1304  ldp d28, d29, [jssp], #16
0xffff7ab81f3c  1308  ldp x5, x6, [jssp, #16]
0xffff7ab81f40  1312  ldp x2, x4, [jssp], #32
0xffff7ab81f44  1316  ldp x9, x10, [jssp, #16]
0xffff7ab81f48  1320  ldp x7, x8, [jssp], #32
0xffff7ab81f4c  1324  ldp x13, x14, [jssp, #16]
0xffff7ab81f50  1328  ldp x11, x12, [jssp], #32
0xffff7ab81f54  1332  ldr lr, [jssp, #16]
0xffff7ab81f58  1336  ldp x15, x18, [jssp], #24
0xffff7ab81f5c  1340  ldp x1, x0, [jssp], #16
0xffff7ab81f60  1344  ldr x16, pc+544 (addr 0x0000ffff7ab82180)    ;; external reference (store_buffer_top)
0xffff7ab81f64  1348  ldr x3, [x16]
0xffff7ab81f68  1352  str x4, [x3], #8
0xffff7ab81f6c  1356  str x3, [x16]
0xffff7ab81f70  1360  tst x3, #0x1ffff
0xffff7ab81f74  1364  b.eq #+0x8 (addr 0xffff7ab81f7c)
0xffff7ab81f78  1368  ret
0xffff7ab81f7c  1372  sub csp, jssp, #0x8 (8)
0xffff7ab81f80  1376  str lr, [jssp, #-8]!
0xffff7ab81f84  1380  ldr x17, pc+516 (addr 0x0000ffff7ab82188)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0xffff7ab81f88  1384  blr x17
0xffff7ab81f8c  1388  ldr lr, [jssp], #8
0xffff7ab81f90  1392  ret
0xffff7ab81f94  1396  and x3, x6, #0xfffffffffff00000
0xffff7ab81f98  1400  ldr x0, [x3, #104]
0xffff7ab81f9c  1404  subs x0, x0, #0x1 (1)
0xffff7ab81fa0  1408  str x0, [x3, #104]
0xffff7ab81fa4  1412  b.mi #+0x84 (addr 0xffff7ab82028)
0xffff7ab81fa8  1416  ubfx x16, x6, #8, #12
0xffff7ab81fac  1420  and x3, x6, #0xfffffffffff00000
0xffff7ab81fb0  1424  add x3, x3, x16, lsl #2
0xffff7ab81fb4  1428  ubfx x0, x6, #3, #5
0xffff7ab81fb8  1432  ldr x3, [x3, #360]
0xffff7ab81fbc  1436  lsr x3, x3, x0
0xffff7ab81fc0  1440  tbz w3, #0, #+0x8 (addr 0xffff7ab81fc8)
0xffff7ab81fc4  1444  tbnz w3, #1, #+0xc (addr 0xffff7ab81fd0)
0xffff7ab81fc8  1448  ldp x1, x0, [jssp], #16
0xffff7ab81fcc  1452  ret
0xffff7ab81fd0  1456  ldr x3, [x4]
0xffff7ab81fd4  1460  and x0, x3, #0xfffffffffff00000
0xffff7ab81fd8  1464  ldr x0, [x0, #8]
0xffff7ab81fdc  1468  tbz w0, #6, #+0x18 (addr 0xffff7ab81ff4)
0xffff7ab81fe0  1472  and x0, x6, #0xfffffffffff00000
0xffff7ab81fe4  1476  ldr x0, [x0, #8]
0xffff7ab81fe8  1480  movz x16, #0x58
0xffff7ab81fec  1484  tst x0, x16
0xffff7ab81ff0  1488  b.eq #+0x38 (addr 0xffff7ab82028)
0xffff7ab81ff4  1492  sub csp, jssp, #0x10 (16)
0xffff7ab81ff8  1496  stp x6, x4, [jssp, #-16]!
0xffff7ab81ffc  1500  ubfx x16, x3, #8, #12
0xffff7ab82000  1504  and x0, x3, #0xfffffffffff00000
0xffff7ab82004  1508  add x0, x0, x16, lsl #2
0xffff7ab82008  1512  ubfx x6, x3, #3, #5
0xffff7ab8200c  1516  ldr x4, [x0, #360]
0xffff7ab82010  1520  lsr x4, x4, x6
0xffff7ab82014  1524  tbz w4, #0, #+0x10 (addr 0xffff7ab82024)
0xffff7ab82018  1528  ldp x6, x4, [jssp], #16
0xffff7ab8201c  1532  ldp x1, x0, [jssp], #16
0xffff7ab82020  1536  ret
0xffff7ab82024  1540  ldp x6, x4, [jssp], #16
0xffff7ab82028  1544  sub csp, jssp, #0x78 (120)
0xffff7ab8202c  1548  stp x14, x15, [jssp, #-32]!
0xffff7ab82030  1552  stp x18, lr, [jssp, #16]
0xffff7ab82034  1556  stp x10, x11, [jssp, #-32]!
0xffff7ab82038  1560  stp x12, x13, [jssp, #16]
0xffff7ab8203c  1564  stp x6, x7, [jssp, #-32]!
0xffff7ab82040  1568  stp x8, x9, [jssp, #16]
0xffff7ab82044  1572  stp x2, x4, [jssp, #-24]!
0xffff7ab82048  1576  str x5, [jssp, #16]
0xffff7ab8204c  1580  sub csp, jssp, #0xb0 (176)
0xffff7ab82050  1584  stp d26, d27, [jssp, #-32]!
0xffff7ab82054  1588  stp d28, d29, [jssp, #16]
0xffff7ab82058  1592  stp d22, d23, [jssp, #-32]!
0xffff7ab8205c  1596  stp d24, d25, [jssp, #16]
0xffff7ab82060  1600  stp d18, d19, [jssp, #-32]!
0xffff7ab82064  1604  stp d20, d21, [jssp, #16]
0xffff7ab82068  1608  stp d6, d7, [jssp, #-32]!
0xffff7ab8206c  1612  stp d16, d17, [jssp, #16]
0xffff7ab82070  1616  stp d2, d3, [jssp, #-32]!
0xffff7ab82074  1620  stp d4, d5, [jssp, #16]
0xffff7ab82078  1624  stp d0, d1, [jssp, #-16]!
0xffff7ab8207c  1628  mov x0, x6
0xffff7ab82080  1632  mov x1, x4
0xffff7ab82084  1636  ldr x2, pc+268 (addr 0x0000ffff7ab82190)    ;; external reference (isolate)
0xffff7ab82088  1640  ldr x16, pc+272 (addr 0x0000ffff7ab82198)    ;; external reference (IncrementalMarking::RecordWrite)
0xffff7ab8208c  1644  and csp, jssp, #0xfffffffffffffff0
0xffff7ab82090  1648  blr x16
0xffff7ab82094  1652  ldp d2, d3, [jssp, #16]
0xffff7ab82098  1656  ldp d0, d1, [jssp], #32
0xffff7ab8209c  1660  ldp d6, d7, [jssp, #16]
0xffff7ab820a0  1664  ldp d4, d5, [jssp], #32
0xffff7ab820a4  1668  ldp d18, d19, [jssp, #16]
0xffff7ab820a8  1672  ldp d16, d17, [jssp], #32
0xffff7ab820ac  1676  ldp d22, d23, [jssp, #16]
0xffff7ab820b0  1680  ldp d20, d21, [jssp], #32
0xffff7ab820b4  1684  ldp d26, d27, [jssp, #16]
0xffff7ab820b8  1688  ldp d24, d25, [jssp], #32
0xffff7ab820bc  1692  ldp d28, d29, [jssp], #16
0xffff7ab820c0  1696  ldp x5, x6, [jssp, #16]
0xffff7ab820c4  1700  ldp x2, x4, [jssp], #32
0xffff7ab820c8  1704  ldp x9, x10, [jssp, #16]
0xffff7ab820cc  1708  ldp x7, x8, [jssp], #32
0xffff7ab820d0  1712  ldp x13, x14, [jssp, #16]
0xffff7ab820d4  1716  ldp x11, x12, [jssp], #32
0xffff7ab820d8  1720  ldr lr, [jssp, #16]
0xffff7ab820dc  1724  ldp x15, x18, [jssp], #24
0xffff7ab820e0  1728  ldp x1, x0, [jssp], #16
0xffff7ab820e4  1732  ret
0xffff7ab820e8  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0xffff7ab820ec  1740  d63f03e0       constant
0xffff7ab820f0  1744  09abe8c0       constant
0xffff7ab820f4  1748  00000000       constant
0xffff7ab820f8  1752  7ab065a0       constant
0xffff7ab820fc  1756  0000ffff       constant
0xffff7ab82100  1760  09abe8c0       constant
0xffff7ab82104  1764  00000000       constant
0xffff7ab82108  1768  7ab065a0       constant
0xffff7ab8210c  1772  0000ffff       constant
0xffff7ab82110  1776  09abe8c0       constant
0xffff7ab82114  1780  00000000       constant
0xffff7ab82118  1784  7ab065a0       constant
0xffff7ab8211c  1788  0000ffff       constant
0xffff7ab82120  1792  09abd2d0       constant
0xffff7ab82124  1796  00000000       constant
0xffff7ab82128  1800  00c2d958       constant
0xffff7ab8212c  1804  00000000       constant
0xffff7ab82130  1808  09abe8c0       constant
0xffff7ab82134  1812  00000000       constant
0xffff7ab82138  1816  7ab065a0       constant
0xffff7ab8213c  1820  0000ffff       constant
0xffff7ab82140  1824  09abd2d0       constant
0xffff7ab82144  1828  00000000       constant
0xffff7ab82148  1832  00c2d958       constant
0xffff7ab8214c  1836  00000000       constant
0xffff7ab82150  1840  09abe8c0       constant
0xffff7ab82154  1844  00000000       constant
0xffff7ab82158  1848  7ab065a0       constant
0xffff7ab8215c  1852  0000ffff       constant
0xffff7ab82160  1856  09abe8c0       constant
0xffff7ab82164  1860  00000000       constant
0xffff7ab82168  1864  7ab065a0       constant
0xffff7ab8216c  1868  0000ffff       constant
0xffff7ab82170  1872  09abd2d0       constant
0xffff7ab82174  1876  00000000       constant
0xffff7ab82178  1880  00c2d958       constant
0xffff7ab8217c  1884  00000000       constant
0xffff7ab82180  1888  09abe8c0       constant
0xffff7ab82184  1892  00000000       constant
0xffff7ab82188  1896  7ab065a0       constant
0xffff7ab8218c  1900  0000ffff       constant
0xffff7ab82190  1904  09abd2d0       constant
0xffff7ab82194  1908  00000000       constant
0xffff7ab82198  1912  00c2d958       constant
0xffff7ab8219c  1916  00000000       constant


RelocInfo (size = 65)
0xffff7ab81a28  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab81a4c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab81ac4  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab81ae8  code target (STUB)  (0xffff7ab065a0)
0xffff7ab81b28  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab81b4c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab81bbc  external reference (isolate)  (0x9abd2d0)
0xffff7ab81bc0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab81c1c  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab81c40  code target (STUB)  (0xffff7ab065a0)
0xffff7ab81d20  external reference (isolate)  (0x9abd2d0)
0xffff7ab81d24  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab81de8  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab81e0c  code target (STUB)  (0xffff7ab065a0)
0xffff7ab81e6c  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab81e90  code target (STUB)  (0xffff7ab065a0)
0xffff7ab81f00  external reference (isolate)  (0x9abd2d0)
0xffff7ab81f04  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab81f60  external reference (store_buffer_top)  (0x9abe8c0)
0xffff7ab81f84  code target (STUB)  (0xffff7ab065a0)
0xffff7ab82084  external reference (isolate)  (0x9abd2d0)
0xffff7ab82088  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0xffff7ab820e8  constant pool (size 184)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = RegExpConstructResultStub
compiler = crankshaft
Instructions (size = 826)
0xffff7ab82200     0  tbnz w2, #0, #+0x100 (addr 0xffff7ab82300)
0xffff7ab82204     4  asr x4, x2, #32
0xffff7ab82208     8  movz w16, #0x257f
0xffff7ab8220c    12  cmp w4, w16, lsl #3
0xffff7ab82210    16  b.hs #+0x2a8 (addr 0xffff7ab824b8)
0xffff7ab82214    20  lsl w3, w4, #3
0xffff7ab82218    24  add w3, w3, #0x10 (16)
0xffff7ab8221c    28  movz x5, #0xe2c0
0xffff7ab82220    32  movk x5, #0x9ab, lsl #16
0xffff7ab82224    36  ldp x6, x4, [x5]
0xffff7ab82228    40  adds x16, x6, #0x30 (48)
0xffff7ab8222c    44  ccmp x16, x4, #nzCv, lo
0xffff7ab82230    48  b.hi #+0x118 (addr 0xffff7ab82348)
0xffff7ab82234    52  str x16, [x5]
0xffff7ab82238    56  orr x6, x6, #0x1
0xffff7ab8223c    60  ldur x4, [cp, #39]
0xffff7ab82240    64  movz x16, #0x257
0xffff7ab82244    68  ldr x4, [x4, x16]
0xffff7ab82248    72  stur x4, [x6, #-1]
0xffff7ab8224c    76  ldr x4, pc+532 (addr 0x0000ffff7ab82460)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab82250    80  stur x4, [x6, #7]
0xffff7ab82254    84  ldr x4, pc+532 (addr 0x0000ffff7ab82468)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab82258    88  stur x4, [x6, #15]
0xffff7ab8225c    92  stur x2, [x6, #23]
0xffff7ab82260    96  stur x1, [x6, #31]
0xffff7ab82264   100  stur x0, [x6, #39]
0xffff7ab82268   104  sxtw x3, w3
0xffff7ab8226c   108  movz x4, #0xe2c0
0xffff7ab82270   112  movk x4, #0x9ab, lsl #16
0xffff7ab82274   116  ldp x7, x16, [x4]
0xffff7ab82278   120  adds x5, x7, x3
0xffff7ab8227c   124  ccmp x5, x16, #nzCv, lo
0xffff7ab82280   128  b.hi #+0x12c (addr 0xffff7ab823ac)
0xffff7ab82284   132  str x5, [x4]
0xffff7ab82288   136  orr x7, x7, #0x1
0xffff7ab8228c   140  ldr x3, pc+484 (addr 0x0000ffff7ab82470)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab82290   144  stur x3, [x7, #-1]
0xffff7ab82294   148  mov x3, x2
0xffff7ab82298   152  tbnz w3, #0, #+0x230 (addr 0xffff7ab824c8)
0xffff7ab8229c   156  stur x3, [x7, #7]
0xffff7ab822a0   160  mov x3, x7
0xffff7ab822a4   164  stur x3, [x6, #15]
0xffff7ab822a8   168  add x4, x6, #0xf (15)
0xffff7ab822ac   172  and x3, x6, #0xfffffffffff00000
0xffff7ab822b0   176  ldr x3, [x3, #8]
0xffff7ab822b4   180  tbz w3, #2, #+0x18 (addr 0xffff7ab822cc)
0xffff7ab822b8   184  sub csp, jssp, #0x8 (8)
0xffff7ab822bc   188  str lr, [jssp, #-8]!
0xffff7ab822c0   192  ldr x16, pc+440 (addr 0x0000ffff7ab82478)    ;; code: STUB, RecordWriteStub, minor: 69734
0xffff7ab822c4   196  blr x16
0xffff7ab822c8   200  ldr lr, [jssp], #8
0xffff7ab822cc   204  mov x3, x2
0xffff7ab822d0   208  tbnz w3, #0, #+0x140 (addr 0xffff7ab82410)
0xffff7ab822d4   212  asr x5, x3, #32
0xffff7ab822d8   216  cmp w5, #0x0 (0)
0xffff7ab822dc   220  b.le #+0x1c (addr 0xffff7ab822f8)
0xffff7ab822e0   224  sub w3, w5, #0x1 (1)
0xffff7ab822e4   228  ldr x4, pc+412 (addr 0x0000ffff7ab82480)    ;; object: 0x20d04241 <undefined>
0xffff7ab822e8   232  add x5, x7, #0xf (15)
0xffff7ab822ec   236  str x4, [x5, w3, sxtw #3]
0xffff7ab822f0   240  lsl x3, x3, #32
0xffff7ab822f4   244  b #-0x24 (addr 0xffff7ab822d0)
0xffff7ab822f8   248  mov x0, x6
0xffff7ab822fc   252  ret
0xffff7ab82300   256  sub csp, jssp, #0x10 (16)
0xffff7ab82304   260  stp fp, lr, [jssp, #-16]!
0xffff7ab82308   264  movz fp, #0xa00000000
0xffff7ab8230c   268  sub csp, jssp, #0x8 (8)
0xffff7ab82310   272  str fp, [jssp, #-8]!
0xffff7ab82314   276  add fp, jssp, #0x8 (8)
0xffff7ab82318   280  ldur x16, [x2, #-1]
0xffff7ab8231c   284  ldr x17, [x26, #120]
0xffff7ab82320   288  cmp x16, x17
0xffff7ab82324   292  b.ne #+0x1b4 (addr 0xffff7ab824d8)
0xffff7ab82328   296  ldur d29, [x2, #7]
0xffff7ab8232c   300  fcvtzs w4, d29
0xffff7ab82330   304  scvtf d0, w4
0xffff7ab82334   308  fcmp d29, d0
0xffff7ab82338   312  b.ne #+0x1a0 (addr 0xffff7ab824d8)
0xffff7ab8233c   316  ldr lr, [jssp, #16]
0xffff7ab82340   320  ldp xzr, fp, [jssp], #24
0xffff7ab82344   324  b #-0x13c (addr 0xffff7ab82208)
0xffff7ab82348   328  sub csp, jssp, #0x10 (16)
0xffff7ab8234c   332  stp fp, lr, [jssp, #-16]!
0xffff7ab82350   336  movz fp, #0xa00000000
0xffff7ab82354   340  sub csp, jssp, #0x8 (8)
0xffff7ab82358   344  str fp, [jssp, #-8]!
0xffff7ab8235c   348  add fp, jssp, #0x8 (8)
0xffff7ab82360   352  movz x6, #0x0
0xffff7ab82364   356  mov x16, lr
0xffff7ab82368   360  ldr x17, pc+288 (addr 0x0000ffff7ab82488)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab8236c   364  blr x17
0xffff7ab82370   368  movz x0, #0x3000000000
0xffff7ab82374   372  movz x10, #0x0
0xffff7ab82378   376  sub csp, jssp, #0x10 (16)
0xffff7ab8237c   380  stp x10, x0, [jssp, #-16]!
0xffff7ab82380   384  movz x0, #0x2
0xffff7ab82384   388  movz x1, #0x5b88
0xffff7ab82388   392  movk x1, #0xe2, lsl #16
0xffff7ab8238c   396  ldr x16, pc+260 (addr 0x0000ffff7ab82490)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab82390   400  blr x16
0xffff7ab82394   404  str x0, [jssp, #48]
0xffff7ab82398   408  ldr x16, pc+256 (addr 0x0000ffff7ab82498)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab8239c   412  blr x16
0xffff7ab823a0   416  ldr lr, [jssp, #16]
0xffff7ab823a4   420  ldp xzr, fp, [jssp], #24
0xffff7ab823a8   424  b #-0x16c (addr 0xffff7ab8223c)
0xffff7ab823ac   428  sub csp, jssp, #0x10 (16)
0xffff7ab823b0   432  stp fp, lr, [jssp, #-16]!
0xffff7ab823b4   436  movz fp, #0xa00000000
0xffff7ab823b8   440  sub csp, jssp, #0x8 (8)
0xffff7ab823bc   444  str fp, [jssp, #-8]!
0xffff7ab823c0   448  add fp, jssp, #0x8 (8)
0xffff7ab823c4   452  movz x7, #0x0
0xffff7ab823c8   456  mov x16, lr
0xffff7ab823cc   460  ldr x17, pc+212 (addr 0x0000ffff7ab824a0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab823d0   464  blr x17
0xffff7ab823d4   468  lsl x0, x3, #32
0xffff7ab823d8   472  movz x10, #0x0
0xffff7ab823dc   476  sub csp, jssp, #0x10 (16)
0xffff7ab823e0   480  stp x10, x0, [jssp, #-16]!
0xffff7ab823e4   484  movz x0, #0x2
0xffff7ab823e8   488  movz x1, #0x5b88
0xffff7ab823ec   492  movk x1, #0xe2, lsl #16
0xffff7ab823f0   496  ldr x16, pc+184 (addr 0x0000ffff7ab824a8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab823f4   500  blr x16
0xffff7ab823f8   504  str x0, [jssp, #56]
0xffff7ab823fc   508  ldr x16, pc+180 (addr 0x0000ffff7ab824b0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab82400   512  blr x16
0xffff7ab82404   516  ldr lr, [jssp, #16]
0xffff7ab82408   520  ldp xzr, fp, [jssp], #24
0xffff7ab8240c   524  b #-0x180 (addr 0xffff7ab8228c)
0xffff7ab82410   528  sub csp, jssp, #0x10 (16)
0xffff7ab82414   532  stp fp, lr, [jssp, #-16]!
0xffff7ab82418   536  movz fp, #0xa00000000
0xffff7ab8241c   540  sub csp, jssp, #0x8 (8)
0xffff7ab82420   544  str fp, [jssp, #-8]!
0xffff7ab82424   548  add fp, jssp, #0x8 (8)
0xffff7ab82428   552  ldur x16, [x3, #-1]
0xffff7ab8242c   556  ldr x17, [x26, #120]
0xffff7ab82430   560  cmp x16, x17
0xffff7ab82434   564  b.ne #+0xac (addr 0xffff7ab824e0)
0xffff7ab82438   568  ldur d29, [x3, #7]
0xffff7ab8243c   572  fcvtzs w5, d29
0xffff7ab82440   576  scvtf d0, w5
0xffff7ab82444   580  fcmp d29, d0
0xffff7ab82448   584  b.ne #+0x98 (addr 0xffff7ab824e0)
0xffff7ab8244c   588  ldr lr, [jssp, #16]
0xffff7ab82450   592  ldp xzr, fp, [jssp], #24
0xffff7ab82454   596  b #-0x17c (addr 0xffff7ab822d8)
0xffff7ab82458   600  580002ff       constant pool begin (num_const = 23)    ;; constant pool
0xffff7ab8245c   604  d63f03e0       constant
0xffff7ab82460   608  20d04201       constant
0xffff7ab82464   612  00000000       constant
0xffff7ab82468   616  20d04201       constant
0xffff7ab8246c   620  00000000       constant
0xffff7ab82470   624  4ec04259       constant
0xffff7ab82474   628  00000000       constant
0xffff7ab82478   632  7ab81a20       constant
0xffff7ab8247c   636  0000ffff       constant
0xffff7ab82480   640  20d04241       constant
0xffff7ab82484   644  00000000       constant
0xffff7ab82488   648  7ab06820       constant
0xffff7ab8248c   652  0000ffff       constant
0xffff7ab82490   656  7ab06260       constant
0xffff7ab82494   660  0000ffff       constant
0xffff7ab82498   664  7ab068e0       constant
0xffff7ab8249c   668  0000ffff       constant
0xffff7ab824a0   672  7ab06820       constant
0xffff7ab824a4   676  0000ffff       constant
0xffff7ab824a8   680  7ab06260       constant
0xffff7ab824ac   684  0000ffff       constant
0xffff7ab824b0   688  7ab068e0       constant
0xffff7ab824b4   692  0000ffff       constant
0xffff7ab824b8   696  movz x16, #0x0
0xffff7ab824bc   700  sub csp, jssp, #0x10 (16)
0xffff7ab824c0   704  stp fp, lr, [jssp, #-16]!
0xffff7ab824c4   708  bl #+0x24 (addr 0xffff7ab824e8)
0xffff7ab824c8   712  movz x16, #0x8
0xffff7ab824cc   716  sub csp, jssp, #0x10 (16)
0xffff7ab824d0   720  stp fp, lr, [jssp, #-16]!
0xffff7ab824d4   724  bl #+0x14 (addr 0xffff7ab824e8)
0xffff7ab824d8   728  movz x16, #0x10
0xffff7ab824dc   732  bl #+0x1c (addr 0xffff7ab824f8)
0xffff7ab824e0   736  movz x16, #0x18
0xffff7ab824e4   740  bl #+0x14 (addr 0xffff7ab824f8)
0xffff7ab824e8   744  movz x17, #0xa00000000
0xffff7ab824ec   748  sub csp, jssp, #0x10 (16)
0xffff7ab824f0   752  stp x17, cp, [jssp, #-16]!
0xffff7ab824f4   756  add fp, jssp, #0x10 (16)
0xffff7ab824f8   760  ldr x17, pc+24 (addr 0x0000ffff7ab82510)    ;; lazy deoptimization bailout 0
0xffff7ab824fc   764  add x17, x17, x16
0xffff7ab82500   768  br x17
0xffff7ab82504   772  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab82508   776  d63f03e0       constant
0xffff7ab8250c   780  d503201f       constant
0xffff7ab82510   784  7a906000       constant
0xffff7ab82514   788  0000ffff       constant


Safepoints (size = 34)
0xffff7ab82394   404  000 | x0 | x1 | x2 | x6 | x27 (sp -> fp)  <none> argc: 2
0xffff7ab823f8   504  000 | x0 | x1 | x2 | x6 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 33)
0xffff7ab8224c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab82254  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab8228c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab822c0  code target (STUB)  (0xffff7ab81a20)
0xffff7ab822e4  embedded object  (0x20d04241 <undefined>)
0xffff7ab82368  code target (STUB)  (0xffff7ab06820)
0xffff7ab8238c  code target (STUB)  (0xffff7ab06260)
0xffff7ab82398  code target (STUB)  (0xffff7ab068e0)
0xffff7ab823cc  code target (STUB)  (0xffff7ab06820)
0xffff7ab823f0  code target (STUB)  (0xffff7ab06260)
0xffff7ab823fc  code target (STUB)  (0xffff7ab068e0)
0xffff7ab82458  constant pool (size 96)
0xffff7ab824f8  runtime entry
0xffff7ab82504  constant pool (size 20)

--- End code ---
kind = STUB
major_key = RegExpConstructResultStub
name = RegExpConstructResultStub
compiler = crankshaft
Instructions (size = 826)
0xffff7ab82200     0  tbnz w2, #0, #+0x100 (addr 0xffff7ab82300)
0xffff7ab82204     4  asr x4, x2, #32
0xffff7ab82208     8  movz w16, #0x257f
0xffff7ab8220c    12  cmp w4, w16, lsl #3
0xffff7ab82210    16  b.hs #+0x2a8 (addr 0xffff7ab824b8)
0xffff7ab82214    20  lsl w3, w4, #3
0xffff7ab82218    24  add w3, w3, #0x10 (16)
0xffff7ab8221c    28  movz x5, #0xe2c0
0xffff7ab82220    32  movk x5, #0x9ab, lsl #16
0xffff7ab82224    36  ldp x6, x4, [x5]
0xffff7ab82228    40  adds x16, x6, #0x30 (48)
0xffff7ab8222c    44  ccmp x16, x4, #nzCv, lo
0xffff7ab82230    48  b.hi #+0x118 (addr 0xffff7ab82348)
0xffff7ab82234    52  str x16, [x5]
0xffff7ab82238    56  orr x6, x6, #0x1
0xffff7ab8223c    60  ldur x4, [cp, #39]
0xffff7ab82240    64  movz x16, #0x257
0xffff7ab82244    68  ldr x4, [x4, x16]
0xffff7ab82248    72  stur x4, [x6, #-1]
0xffff7ab8224c    76  ldr x4, pc+532 (addr 0x0000ffff7ab82460)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab82250    80  stur x4, [x6, #7]
0xffff7ab82254    84  ldr x4, pc+532 (addr 0x0000ffff7ab82468)    ;; object: 0x20d04201 <FixedArray[0]>
0xffff7ab82258    88  stur x4, [x6, #15]
0xffff7ab8225c    92  stur x2, [x6, #23]
0xffff7ab82260    96  stur x1, [x6, #31]
0xffff7ab82264   100  stur x0, [x6, #39]
0xffff7ab82268   104  sxtw x3, w3
0xffff7ab8226c   108  movz x4, #0xe2c0
0xffff7ab82270   112  movk x4, #0x9ab, lsl #16
0xffff7ab82274   116  ldp x7, x16, [x4]
0xffff7ab82278   120  adds x5, x7, x3
0xffff7ab8227c   124  ccmp x5, x16, #nzCv, lo
0xffff7ab82280   128  b.hi #+0x12c (addr 0xffff7ab823ac)
0xffff7ab82284   132  str x5, [x4]
0xffff7ab82288   136  orr x7, x7, #0x1
0xffff7ab8228c   140  ldr x3, pc+484 (addr 0x0000ffff7ab82470)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab82290   144  stur x3, [x7, #-1]
0xffff7ab82294   148  mov x3, x2
0xffff7ab82298   152  tbnz w3, #0, #+0x230 (addr 0xffff7ab824c8)
0xffff7ab8229c   156  stur x3, [x7, #7]
0xffff7ab822a0   160  mov x3, x7
0xffff7ab822a4   164  stur x3, [x6, #15]
0xffff7ab822a8   168  add x4, x6, #0xf (15)
0xffff7ab822ac   172  and x3, x6, #0xfffffffffff00000
0xffff7ab822b0   176  ldr x3, [x3, #8]
0xffff7ab822b4   180  tbz w3, #2, #+0x18 (addr 0xffff7ab822cc)
0xffff7ab822b8   184  sub csp, jssp, #0x8 (8)
0xffff7ab822bc   188  str lr, [jssp, #-8]!
0xffff7ab822c0   192  ldr x16, pc+440 (addr 0x0000ffff7ab82478)    ;; code: STUB, RecordWriteStub, minor: 69734
0xffff7ab822c4   196  blr x16
0xffff7ab822c8   200  ldr lr, [jssp], #8
0xffff7ab822cc   204  mov x3, x2
0xffff7ab822d0   208  tbnz w3, #0, #+0x140 (addr 0xffff7ab82410)
0xffff7ab822d4   212  asr x5, x3, #32
0xffff7ab822d8   216  cmp w5, #0x0 (0)
0xffff7ab822dc   220  b.le #+0x1c (addr 0xffff7ab822f8)
0xffff7ab822e0   224  sub w3, w5, #0x1 (1)
0xffff7ab822e4   228  ldr x4, pc+412 (addr 0x0000ffff7ab82480)    ;; object: 0x20d04241 <undefined>
0xffff7ab822e8   232  add x5, x7, #0xf (15)
0xffff7ab822ec   236  str x4, [x5, w3, sxtw #3]
0xffff7ab822f0   240  lsl x3, x3, #32
0xffff7ab822f4   244  b #-0x24 (addr 0xffff7ab822d0)
0xffff7ab822f8   248  mov x0, x6
0xffff7ab822fc   252  ret
0xffff7ab82300   256  sub csp, jssp, #0x10 (16)
0xffff7ab82304   260  stp fp, lr, [jssp, #-16]!
0xffff7ab82308   264  movz fp, #0xa00000000
0xffff7ab8230c   268  sub csp, jssp, #0x8 (8)
0xffff7ab82310   272  str fp, [jssp, #-8]!
0xffff7ab82314   276  add fp, jssp, #0x8 (8)
0xffff7ab82318   280  ldur x16, [x2, #-1]
0xffff7ab8231c   284  ldr x17, [x26, #120]
0xffff7ab82320   288  cmp x16, x17
0xffff7ab82324   292  b.ne #+0x1b4 (addr 0xffff7ab824d8)
0xffff7ab82328   296  ldur d29, [x2, #7]
0xffff7ab8232c   300  fcvtzs w4, d29
0xffff7ab82330   304  scvtf d0, w4
0xffff7ab82334   308  fcmp d29, d0
0xffff7ab82338   312  b.ne #+0x1a0 (addr 0xffff7ab824d8)
0xffff7ab8233c   316  ldr lr, [jssp, #16]
0xffff7ab82340   320  ldp xzr, fp, [jssp], #24
0xffff7ab82344   324  b #-0x13c (addr 0xffff7ab82208)
0xffff7ab82348   328  sub csp, jssp, #0x10 (16)
0xffff7ab8234c   332  stp fp, lr, [jssp, #-16]!
0xffff7ab82350   336  movz fp, #0xa00000000
0xffff7ab82354   340  sub csp, jssp, #0x8 (8)
0xffff7ab82358   344  str fp, [jssp, #-8]!
0xffff7ab8235c   348  add fp, jssp, #0x8 (8)
0xffff7ab82360   352  movz x6, #0x0
0xffff7ab82364   356  mov x16, lr
0xffff7ab82368   360  ldr x17, pc+288 (addr 0x0000ffff7ab82488)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab8236c   364  blr x17
0xffff7ab82370   368  movz x0, #0x3000000000
0xffff7ab82374   372  movz x10, #0x0
0xffff7ab82378   376  sub csp, jssp, #0x10 (16)
0xffff7ab8237c   380  stp x10, x0, [jssp, #-16]!
0xffff7ab82380   384  movz x0, #0x2
0xffff7ab82384   388  movz x1, #0x5b88
0xffff7ab82388   392  movk x1, #0xe2, lsl #16
0xffff7ab8238c   396  ldr x16, pc+260 (addr 0x0000ffff7ab82490)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab82390   400  blr x16
0xffff7ab82394   404  str x0, [jssp, #48]
0xffff7ab82398   408  ldr x16, pc+256 (addr 0x0000ffff7ab82498)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab8239c   412  blr x16
0xffff7ab823a0   416  ldr lr, [jssp, #16]
0xffff7ab823a4   420  ldp xzr, fp, [jssp], #24
0xffff7ab823a8   424  b #-0x16c (addr 0xffff7ab8223c)
0xffff7ab823ac   428  sub csp, jssp, #0x10 (16)
0xffff7ab823b0   432  stp fp, lr, [jssp, #-16]!
0xffff7ab823b4   436  movz fp, #0xa00000000
0xffff7ab823b8   440  sub csp, jssp, #0x8 (8)
0xffff7ab823bc   444  str fp, [jssp, #-8]!
0xffff7ab823c0   448  add fp, jssp, #0x8 (8)
0xffff7ab823c4   452  movz x7, #0x0
0xffff7ab823c8   456  mov x16, lr
0xffff7ab823cc   460  ldr x17, pc+212 (addr 0x0000ffff7ab824a0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab823d0   464  blr x17
0xffff7ab823d4   468  lsl x0, x3, #32
0xffff7ab823d8   472  movz x10, #0x0
0xffff7ab823dc   476  sub csp, jssp, #0x10 (16)
0xffff7ab823e0   480  stp x10, x0, [jssp, #-16]!
0xffff7ab823e4   484  movz x0, #0x2
0xffff7ab823e8   488  movz x1, #0x5b88
0xffff7ab823ec   492  movk x1, #0xe2, lsl #16
0xffff7ab823f0   496  ldr x16, pc+184 (addr 0x0000ffff7ab824a8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab823f4   500  blr x16
0xffff7ab823f8   504  str x0, [jssp, #56]
0xffff7ab823fc   508  ldr x16, pc+180 (addr 0x0000ffff7ab824b0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab82400   512  blr x16
0xffff7ab82404   516  ldr lr, [jssp, #16]
0xffff7ab82408   520  ldp xzr, fp, [jssp], #24
0xffff7ab8240c   524  b #-0x180 (addr 0xffff7ab8228c)
0xffff7ab82410   528  sub csp, jssp, #0x10 (16)
0xffff7ab82414   532  stp fp, lr, [jssp, #-16]!
0xffff7ab82418   536  movz fp, #0xa00000000
0xffff7ab8241c   540  sub csp, jssp, #0x8 (8)
0xffff7ab82420   544  str fp, [jssp, #-8]!
0xffff7ab82424   548  add fp, jssp, #0x8 (8)
0xffff7ab82428   552  ldur x16, [x3, #-1]
0xffff7ab8242c   556  ldr x17, [x26, #120]
0xffff7ab82430   560  cmp x16, x17
0xffff7ab82434   564  b.ne #+0xac (addr 0xffff7ab824e0)
0xffff7ab82438   568  ldur d29, [x3, #7]
0xffff7ab8243c   572  fcvtzs w5, d29
0xffff7ab82440   576  scvtf d0, w5
0xffff7ab82444   580  fcmp d29, d0
0xffff7ab82448   584  b.ne #+0x98 (addr 0xffff7ab824e0)
0xffff7ab8244c   588  ldr lr, [jssp, #16]
0xffff7ab82450   592  ldp xzr, fp, [jssp], #24
0xffff7ab82454   596  b #-0x17c (addr 0xffff7ab822d8)
0xffff7ab82458   600  580002ff       constant pool begin (num_const = 23)    ;; constant pool
0xffff7ab8245c   604  d63f03e0       constant
0xffff7ab82460   608  20d04201       constant
0xffff7ab82464   612  00000000       constant
0xffff7ab82468   616  20d04201       constant
0xffff7ab8246c   620  00000000       constant
0xffff7ab82470   624  4ec04259       constant
0xffff7ab82474   628  00000000       constant
0xffff7ab82478   632  7ab81a20       constant
0xffff7ab8247c   636  0000ffff       constant
0xffff7ab82480   640  20d04241       constant
0xffff7ab82484   644  00000000       constant
0xffff7ab82488   648  7ab06820       constant
0xffff7ab8248c   652  0000ffff       constant
0xffff7ab82490   656  7ab06260       constant
0xffff7ab82494   660  0000ffff       constant
0xffff7ab82498   664  7ab068e0       constant
0xffff7ab8249c   668  0000ffff       constant
0xffff7ab824a0   672  7ab06820       constant
0xffff7ab824a4   676  0000ffff       constant
0xffff7ab824a8   680  7ab06260       constant
0xffff7ab824ac   684  0000ffff       constant
0xffff7ab824b0   688  7ab068e0       constant
0xffff7ab824b4   692  0000ffff       constant
0xffff7ab824b8   696  movz x16, #0x0
0xffff7ab824bc   700  sub csp, jssp, #0x10 (16)
0xffff7ab824c0   704  stp fp, lr, [jssp, #-16]!
0xffff7ab824c4   708  bl #+0x24 (addr 0xffff7ab824e8)
0xffff7ab824c8   712  movz x16, #0x8
0xffff7ab824cc   716  sub csp, jssp, #0x10 (16)
0xffff7ab824d0   720  stp fp, lr, [jssp, #-16]!
0xffff7ab824d4   724  bl #+0x14 (addr 0xffff7ab824e8)
0xffff7ab824d8   728  movz x16, #0x10
0xffff7ab824dc   732  bl #+0x1c (addr 0xffff7ab824f8)
0xffff7ab824e0   736  movz x16, #0x18
0xffff7ab824e4   740  bl #+0x14 (addr 0xffff7ab824f8)
0xffff7ab824e8   744  movz x17, #0xa00000000
0xffff7ab824ec   748  sub csp, jssp, #0x10 (16)
0xffff7ab824f0   752  stp x17, cp, [jssp, #-16]!
0xffff7ab824f4   756  add fp, jssp, #0x10 (16)
0xffff7ab824f8   760  ldr x17, pc+24 (addr 0x0000ffff7ab82510)    ;; lazy deoptimization bailout 0
0xffff7ab824fc   764  add x17, x17, x16
0xffff7ab82500   768  br x17
0xffff7ab82504   772  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab82508   776  d63f03e0       constant
0xffff7ab8250c   780  d503201f       constant
0xffff7ab82510   784  7a906000       constant
0xffff7ab82514   788  0000ffff       constant


Safepoints (size = 34)
0xffff7ab82394   404  000 | x0 | x1 | x2 | x6 | x27 (sp -> fp)  <none> argc: 2
0xffff7ab823f8   504  000 | x0 | x1 | x2 | x6 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 33)
0xffff7ab8224c  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab82254  embedded object  (0x20d04201 <FixedArray[0]>)
0xffff7ab8228c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab822c0  code target (STUB)  (0xffff7ab81a20)
0xffff7ab822e4  embedded object  (0x20d04241 <undefined>)
0xffff7ab82368  code target (STUB)  (0xffff7ab06820)
0xffff7ab8238c  code target (STUB)  (0xffff7ab06260)
0xffff7ab82398  code target (STUB)  (0xffff7ab068e0)
0xffff7ab823cc  code target (STUB)  (0xffff7ab06820)
0xffff7ab823f0  code target (STUB)  (0xffff7ab06260)
0xffff7ab823fc  code target (STUB)  (0xffff7ab068e0)
0xffff7ab82458  constant pool (size 96)
0xffff7ab824f8  runtime entry
0xffff7ab82504  constant pool (size 20)


--- Code ---
kind = TO_BOOLEAN_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4
type = NORMAL
name = ToBooleanICStub
compiler = crankshaft
Instructions (size = 128)
0xffff7ab834a0     0  ldr x16, [x26, #56]
0xffff7ab834a4     4  cmp x0, x16
0xffff7ab834a8     8  b.eq #+0x8 (addr 0xffff7ab834b0)
0xffff7ab834ac    12  b #+0x2c (addr 0xffff7ab834d8)
0xffff7ab834b0    16  ldr x0, pc+24 (addr 0x0000ffff7ab834c8)    ;; object: 0x20d042b1 <false>
0xffff7ab834b4    20  ret
0xffff7ab834b8    24  ldr x0, pc+24 (addr 0x0000ffff7ab834d0)    ;; object: 0x20d04281 <true>
0xffff7ab834bc    28  ret
0xffff7ab834c0    32  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab834c4    36  d63f03e0       constant
0xffff7ab834c8    40  20d042b1       constant
0xffff7ab834cc    44  00000000       constant
0xffff7ab834d0    48  20d04281       constant
0xffff7ab834d4    52  00000000       constant
0xffff7ab834d8    56  movz x16, #0x0
0xffff7ab834dc    60  sub csp, jssp, #0x10 (16)
0xffff7ab834e0    64  stp fp, lr, [jssp, #-16]!
0xffff7ab834e4    68  bl #+0x4 (addr 0xffff7ab834e8)
0xffff7ab834e8    72  movz x17, #0xa00000000
0xffff7ab834ec    76  sub csp, jssp, #0x10 (16)
0xffff7ab834f0    80  stp x17, cp, [jssp, #-16]!
0xffff7ab834f4    84  add fp, jssp, #0x10 (16)
0xffff7ab834f8    88  ldr x17, pc+24 (addr 0x0000ffff7ab83510)    ;; lazy deoptimization bailout 0
0xffff7ab834fc    92  add x17, x17, x16
0xffff7ab83500    96  br x17
0xffff7ab83504   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab83508   104  d63f03e0       constant
0xffff7ab8350c   108  d503201f       constant
0xffff7ab83510   112  7a906000       constant
0xffff7ab83514   116  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab834b0  embedded object  (0x20d042b1 <false>)
0xffff7ab834b8  embedded object  (0x20d04281 <true>)
0xffff7ab834c0  constant pool (size 24)
0xffff7ab834f8  runtime entry
0xffff7ab83504  constant pool (size 20)

--- End code ---
kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 4
type = NORMAL
name = ToBooleanICStub(Null)
compiler = crankshaft
Instructions (size = 128)
0xffff7ab834a0     0  ldr x16, [x26, #56]
0xffff7ab834a4     4  cmp x0, x16
0xffff7ab834a8     8  b.eq #+0x8 (addr 0xffff7ab834b0)
0xffff7ab834ac    12  b #+0x2c (addr 0xffff7ab834d8)
0xffff7ab834b0    16  ldr x0, pc+24 (addr 0x0000ffff7ab834c8)    ;; object: 0x20d042b1 <false>
0xffff7ab834b4    20  ret
0xffff7ab834b8    24  ldr x0, pc+24 (addr 0x0000ffff7ab834d0)    ;; object: 0x20d04281 <true>
0xffff7ab834bc    28  ret
0xffff7ab834c0    32  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab834c4    36  d63f03e0       constant
0xffff7ab834c8    40  20d042b1       constant
0xffff7ab834cc    44  00000000       constant
0xffff7ab834d0    48  20d04281       constant
0xffff7ab834d4    52  00000000       constant
0xffff7ab834d8    56  movz x16, #0x0
0xffff7ab834dc    60  sub csp, jssp, #0x10 (16)
0xffff7ab834e0    64  stp fp, lr, [jssp, #-16]!
0xffff7ab834e4    68  bl #+0x4 (addr 0xffff7ab834e8)
0xffff7ab834e8    72  movz x17, #0xa00000000
0xffff7ab834ec    76  sub csp, jssp, #0x10 (16)
0xffff7ab834f0    80  stp x17, cp, [jssp, #-16]!
0xffff7ab834f4    84  add fp, jssp, #0x10 (16)
0xffff7ab834f8    88  ldr x17, pc+24 (addr 0x0000ffff7ab83510)    ;; lazy deoptimization bailout 0
0xffff7ab834fc    92  add x17, x17, x16
0xffff7ab83500    96  br x17
0xffff7ab83504   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab83508   104  d63f03e0       constant
0xffff7ab8350c   108  d503201f       constant
0xffff7ab83510   112  7a906000       constant
0xffff7ab83514   116  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab834b0  embedded object  (0x20d042b1 <false>)
0xffff7ab834b8  embedded object  (0x20d04281 <true>)
0xffff7ab834c0  constant pool (size 24)
0xffff7ab834f8  runtime entry
0xffff7ab83504  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 509)
0xffff7ab87c00     0  movz x2, #0xe2c0
0xffff7ab87c04     4  movk x2, #0x9ab, lsl #16
0xffff7ab87c08     8  ldp x3, x0, [x2]
0xffff7ab87c0c    12  adds x16, x3, #0xb0 (176)
0xffff7ab87c10    16  ccmp x16, x0, #nzCv, lo
0xffff7ab87c14    20  b.hi #+0xbc (addr 0xffff7ab87cd0)
0xffff7ab87c18    24  str x16, [x2]
0xffff7ab87c1c    28  orr x3, x3, #0x1
0xffff7ab87c20    32  ldr x0, pc+288 (addr 0x0000ffff7ab87d40)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab87c24    36  stur x0, [x3, #-1]
0xffff7ab87c28    40  movz x0, #0x1400000000
0xffff7ab87c2c    44  stur x0, [x3, #7]
0xffff7ab87c30    48  stur x1, [x3, #15]
0xffff7ab87c34    52  stur cp, [x3, #23]
0xffff7ab87c38    56  ldr x0, pc+272 (addr 0x0000ffff7ab87d48)    ;; object: 0x20d04519 <the hole>
0xffff7ab87c3c    60  stur x0, [x3, #31]
0xffff7ab87c40    64  ldur x0, [cp, #39]
0xffff7ab87c44    68  stur x0, [x3, #39]
0xffff7ab87c48    72  ldr x0, pc+264 (addr 0x0000ffff7ab87d50)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c4c    76  stur x0, [x3, #47]
0xffff7ab87c50    80  ldr x0, pc+264 (addr 0x0000ffff7ab87d58)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c54    84  stur x0, [x3, #55]
0xffff7ab87c58    88  ldr x0, pc+264 (addr 0x0000ffff7ab87d60)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c5c    92  stur x0, [x3, #63]
0xffff7ab87c60    96  ldr x0, pc+264 (addr 0x0000ffff7ab87d68)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c64   100  stur x0, [x3, #71]
0xffff7ab87c68   104  ldr x0, pc+264 (addr 0x0000ffff7ab87d70)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c6c   108  stur x0, [x3, #79]
0xffff7ab87c70   112  ldr x0, pc+264 (addr 0x0000ffff7ab87d78)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c74   116  stur x0, [x3, #87]
0xffff7ab87c78   120  ldr x0, pc+264 (addr 0x0000ffff7ab87d80)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c7c   124  stur x0, [x3, #95]
0xffff7ab87c80   128  ldr x0, pc+264 (addr 0x0000ffff7ab87d88)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c84   132  stur x0, [x3, #103]
0xffff7ab87c88   136  ldr x0, pc+264 (addr 0x0000ffff7ab87d90)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c8c   140  stur x0, [x3, #111]
0xffff7ab87c90   144  ldr x0, pc+264 (addr 0x0000ffff7ab87d98)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c94   148  stur x0, [x3, #119]
0xffff7ab87c98   152  ldr x0, pc+264 (addr 0x0000ffff7ab87da0)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c9c   156  stur x0, [x3, #127]
0xffff7ab87ca0   160  ldr x0, pc+264 (addr 0x0000ffff7ab87da8)    ;; object: 0x20d04241 <undefined>
0xffff7ab87ca4   164  stur x0, [x3, #135]
0xffff7ab87ca8   168  ldr x0, pc+264 (addr 0x0000ffff7ab87db0)    ;; object: 0x20d04241 <undefined>
0xffff7ab87cac   172  stur x0, [x3, #143]
0xffff7ab87cb0   176  ldr x0, pc+264 (addr 0x0000ffff7ab87db8)    ;; object: 0x20d04241 <undefined>
0xffff7ab87cb4   180  stur x0, [x3, #151]
0xffff7ab87cb8   184  ldr x0, pc+264 (addr 0x0000ffff7ab87dc0)    ;; object: 0x20d04241 <undefined>
0xffff7ab87cbc   188  stur x0, [x3, #159]
0xffff7ab87cc0   192  ldr x0, pc+264 (addr 0x0000ffff7ab87dc8)    ;; object: 0x20d04241 <undefined>
0xffff7ab87cc4   196  stur x0, [x3, #167]
0xffff7ab87cc8   200  mov x0, x3
0xffff7ab87ccc   204  ret
0xffff7ab87cd0   208  sub csp, jssp, #0x10 (16)
0xffff7ab87cd4   212  stp fp, lr, [jssp, #-16]!
0xffff7ab87cd8   216  movz fp, #0xa00000000
0xffff7ab87cdc   220  sub csp, jssp, #0x8 (8)
0xffff7ab87ce0   224  str fp, [jssp, #-8]!
0xffff7ab87ce4   228  add fp, jssp, #0x8 (8)
0xffff7ab87ce8   232  movz x3, #0x0
0xffff7ab87cec   236  mov x16, lr
0xffff7ab87cf0   240  ldr x17, pc+224 (addr 0x0000ffff7ab87dd0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab87cf4   244  blr x17
0xffff7ab87cf8   248  movz x0, #0xb000000000
0xffff7ab87cfc   252  movz x10, #0x0
0xffff7ab87d00   256  sub csp, jssp, #0x10 (16)
0xffff7ab87d04   260  stp x10, x0, [jssp, #-16]!
0xffff7ab87d08   264  movz x0, #0x2
0xffff7ab87d0c   268  movz x1, #0x5b88
0xffff7ab87d10   272  movk x1, #0xe2, lsl #16
0xffff7ab87d14   276  ldr x16, pc+196 (addr 0x0000ffff7ab87dd8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab87d18   280  blr x16
0xffff7ab87d1c   284  str x0, [jssp, #24]
0xffff7ab87d20   288  ldr x16, pc+192 (addr 0x0000ffff7ab87de0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab87d24   292  blr x16
0xffff7ab87d28   296  ldr lr, [jssp, #16]
0xffff7ab87d2c   300  ldp xzr, fp, [jssp], #24
0xffff7ab87d30   304  b #-0x110 (addr 0xffff7ab87c20)
0xffff7ab87d34   308  5800059f       constant pool begin (num_const = 44)    ;; constant pool
0xffff7ab87d38   312  d63f03e0       constant
0xffff7ab87d3c   316  d503201f       constant
0xffff7ab87d40   320  4ec06149       constant
0xffff7ab87d44   324  00000000       constant
0xffff7ab87d48   328  20d04519       constant
0xffff7ab87d4c   332  00000000       constant
0xffff7ab87d50   336  20d04241       constant
0xffff7ab87d54   340  00000000       constant
0xffff7ab87d58   344  20d04241       constant
0xffff7ab87d5c   348  00000000       constant
0xffff7ab87d60   352  20d04241       constant
0xffff7ab87d64   356  00000000       constant
0xffff7ab87d68   360  20d04241       constant
0xffff7ab87d6c   364  00000000       constant
0xffff7ab87d70   368  20d04241       constant
0xffff7ab87d74   372  00000000       constant
0xffff7ab87d78   376  20d04241       constant
0xffff7ab87d7c   380  00000000       constant
0xffff7ab87d80   384  20d04241       constant
0xffff7ab87d84   388  00000000       constant
0xffff7ab87d88   392  20d04241       constant
0xffff7ab87d8c   396  00000000       constant
0xffff7ab87d90   400  20d04241       constant
0xffff7ab87d94   404  00000000       constant
0xffff7ab87d98   408  20d04241       constant
0xffff7ab87d9c   412  00000000       constant
0xffff7ab87da0   416  20d04241       constant
0xffff7ab87da4   420  00000000       constant
0xffff7ab87da8   424  20d04241       constant
0xffff7ab87dac   428  00000000       constant
0xffff7ab87db0   432  20d04241       constant
0xffff7ab87db4   436  00000000       constant
0xffff7ab87db8   440  20d04241       constant
0xffff7ab87dbc   444  00000000       constant
0xffff7ab87dc0   448  20d04241       constant
0xffff7ab87dc4   452  00000000       constant
0xffff7ab87dc8   456  20d04241       constant
0xffff7ab87dcc   460  00000000       constant
0xffff7ab87dd0   464  7ab06820       constant
0xffff7ab87dd4   468  0000ffff       constant
0xffff7ab87dd8   472  7ab06260       constant
0xffff7ab87ddc   476  0000ffff       constant
0xffff7ab87de0   480  7ab068e0       constant
0xffff7ab87de4   484  0000ffff       constant


Safepoints (size = 21)
0xffff7ab87d1c   284  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab87c20  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab87c38  embedded object  (0x20d04519 <the hole>)
0xffff7ab87c48  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c50  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c58  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c60  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c68  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c70  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c78  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c80  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c88  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c90  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c98  embedded object  (0x20d04241 <undefined>)
0xffff7ab87ca0  embedded object  (0x20d04241 <undefined>)
0xffff7ab87ca8  embedded object  (0x20d04241 <undefined>)
0xffff7ab87cb0  embedded object  (0x20d04241 <undefined>)
0xffff7ab87cb8  embedded object  (0x20d04241 <undefined>)
0xffff7ab87cc0  embedded object  (0x20d04241 <undefined>)
0xffff7ab87cf0  code target (STUB)  (0xffff7ab06820)
0xffff7ab87d14  code target (STUB)  (0xffff7ab06260)
0xffff7ab87d20  code target (STUB)  (0xffff7ab068e0)
0xffff7ab87d34  constant pool (size 180)

--- End code ---
kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 509)
0xffff7ab87c00     0  movz x2, #0xe2c0
0xffff7ab87c04     4  movk x2, #0x9ab, lsl #16
0xffff7ab87c08     8  ldp x3, x0, [x2]
0xffff7ab87c0c    12  adds x16, x3, #0xb0 (176)
0xffff7ab87c10    16  ccmp x16, x0, #nzCv, lo
0xffff7ab87c14    20  b.hi #+0xbc (addr 0xffff7ab87cd0)
0xffff7ab87c18    24  str x16, [x2]
0xffff7ab87c1c    28  orr x3, x3, #0x1
0xffff7ab87c20    32  ldr x0, pc+288 (addr 0x0000ffff7ab87d40)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab87c24    36  stur x0, [x3, #-1]
0xffff7ab87c28    40  movz x0, #0x1400000000
0xffff7ab87c2c    44  stur x0, [x3, #7]
0xffff7ab87c30    48  stur x1, [x3, #15]
0xffff7ab87c34    52  stur cp, [x3, #23]
0xffff7ab87c38    56  ldr x0, pc+272 (addr 0x0000ffff7ab87d48)    ;; object: 0x20d04519 <the hole>
0xffff7ab87c3c    60  stur x0, [x3, #31]
0xffff7ab87c40    64  ldur x0, [cp, #39]
0xffff7ab87c44    68  stur x0, [x3, #39]
0xffff7ab87c48    72  ldr x0, pc+264 (addr 0x0000ffff7ab87d50)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c4c    76  stur x0, [x3, #47]
0xffff7ab87c50    80  ldr x0, pc+264 (addr 0x0000ffff7ab87d58)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c54    84  stur x0, [x3, #55]
0xffff7ab87c58    88  ldr x0, pc+264 (addr 0x0000ffff7ab87d60)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c5c    92  stur x0, [x3, #63]
0xffff7ab87c60    96  ldr x0, pc+264 (addr 0x0000ffff7ab87d68)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c64   100  stur x0, [x3, #71]
0xffff7ab87c68   104  ldr x0, pc+264 (addr 0x0000ffff7ab87d70)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c6c   108  stur x0, [x3, #79]
0xffff7ab87c70   112  ldr x0, pc+264 (addr 0x0000ffff7ab87d78)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c74   116  stur x0, [x3, #87]
0xffff7ab87c78   120  ldr x0, pc+264 (addr 0x0000ffff7ab87d80)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c7c   124  stur x0, [x3, #95]
0xffff7ab87c80   128  ldr x0, pc+264 (addr 0x0000ffff7ab87d88)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c84   132  stur x0, [x3, #103]
0xffff7ab87c88   136  ldr x0, pc+264 (addr 0x0000ffff7ab87d90)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c8c   140  stur x0, [x3, #111]
0xffff7ab87c90   144  ldr x0, pc+264 (addr 0x0000ffff7ab87d98)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c94   148  stur x0, [x3, #119]
0xffff7ab87c98   152  ldr x0, pc+264 (addr 0x0000ffff7ab87da0)    ;; object: 0x20d04241 <undefined>
0xffff7ab87c9c   156  stur x0, [x3, #127]
0xffff7ab87ca0   160  ldr x0, pc+264 (addr 0x0000ffff7ab87da8)    ;; object: 0x20d04241 <undefined>
0xffff7ab87ca4   164  stur x0, [x3, #135]
0xffff7ab87ca8   168  ldr x0, pc+264 (addr 0x0000ffff7ab87db0)    ;; object: 0x20d04241 <undefined>
0xffff7ab87cac   172  stur x0, [x3, #143]
0xffff7ab87cb0   176  ldr x0, pc+264 (addr 0x0000ffff7ab87db8)    ;; object: 0x20d04241 <undefined>
0xffff7ab87cb4   180  stur x0, [x3, #151]
0xffff7ab87cb8   184  ldr x0, pc+264 (addr 0x0000ffff7ab87dc0)    ;; object: 0x20d04241 <undefined>
0xffff7ab87cbc   188  stur x0, [x3, #159]
0xffff7ab87cc0   192  ldr x0, pc+264 (addr 0x0000ffff7ab87dc8)    ;; object: 0x20d04241 <undefined>
0xffff7ab87cc4   196  stur x0, [x3, #167]
0xffff7ab87cc8   200  mov x0, x3
0xffff7ab87ccc   204  ret
0xffff7ab87cd0   208  sub csp, jssp, #0x10 (16)
0xffff7ab87cd4   212  stp fp, lr, [jssp, #-16]!
0xffff7ab87cd8   216  movz fp, #0xa00000000
0xffff7ab87cdc   220  sub csp, jssp, #0x8 (8)
0xffff7ab87ce0   224  str fp, [jssp, #-8]!
0xffff7ab87ce4   228  add fp, jssp, #0x8 (8)
0xffff7ab87ce8   232  movz x3, #0x0
0xffff7ab87cec   236  mov x16, lr
0xffff7ab87cf0   240  ldr x17, pc+224 (addr 0x0000ffff7ab87dd0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab87cf4   244  blr x17
0xffff7ab87cf8   248  movz x0, #0xb000000000
0xffff7ab87cfc   252  movz x10, #0x0
0xffff7ab87d00   256  sub csp, jssp, #0x10 (16)
0xffff7ab87d04   260  stp x10, x0, [jssp, #-16]!
0xffff7ab87d08   264  movz x0, #0x2
0xffff7ab87d0c   268  movz x1, #0x5b88
0xffff7ab87d10   272  movk x1, #0xe2, lsl #16
0xffff7ab87d14   276  ldr x16, pc+196 (addr 0x0000ffff7ab87dd8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab87d18   280  blr x16
0xffff7ab87d1c   284  str x0, [jssp, #24]
0xffff7ab87d20   288  ldr x16, pc+192 (addr 0x0000ffff7ab87de0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab87d24   292  blr x16
0xffff7ab87d28   296  ldr lr, [jssp, #16]
0xffff7ab87d2c   300  ldp xzr, fp, [jssp], #24
0xffff7ab87d30   304  b #-0x110 (addr 0xffff7ab87c20)
0xffff7ab87d34   308  5800059f       constant pool begin (num_const = 44)    ;; constant pool
0xffff7ab87d38   312  d63f03e0       constant
0xffff7ab87d3c   316  d503201f       constant
0xffff7ab87d40   320  4ec06149       constant
0xffff7ab87d44   324  00000000       constant
0xffff7ab87d48   328  20d04519       constant
0xffff7ab87d4c   332  00000000       constant
0xffff7ab87d50   336  20d04241       constant
0xffff7ab87d54   340  00000000       constant
0xffff7ab87d58   344  20d04241       constant
0xffff7ab87d5c   348  00000000       constant
0xffff7ab87d60   352  20d04241       constant
0xffff7ab87d64   356  00000000       constant
0xffff7ab87d68   360  20d04241       constant
0xffff7ab87d6c   364  00000000       constant
0xffff7ab87d70   368  20d04241       constant
0xffff7ab87d74   372  00000000       constant
0xffff7ab87d78   376  20d04241       constant
0xffff7ab87d7c   380  00000000       constant
0xffff7ab87d80   384  20d04241       constant
0xffff7ab87d84   388  00000000       constant
0xffff7ab87d88   392  20d04241       constant
0xffff7ab87d8c   396  00000000       constant
0xffff7ab87d90   400  20d04241       constant
0xffff7ab87d94   404  00000000       constant
0xffff7ab87d98   408  20d04241       constant
0xffff7ab87d9c   412  00000000       constant
0xffff7ab87da0   416  20d04241       constant
0xffff7ab87da4   420  00000000       constant
0xffff7ab87da8   424  20d04241       constant
0xffff7ab87dac   428  00000000       constant
0xffff7ab87db0   432  20d04241       constant
0xffff7ab87db4   436  00000000       constant
0xffff7ab87db8   440  20d04241       constant
0xffff7ab87dbc   444  00000000       constant
0xffff7ab87dc0   448  20d04241       constant
0xffff7ab87dc4   452  00000000       constant
0xffff7ab87dc8   456  20d04241       constant
0xffff7ab87dcc   460  00000000       constant
0xffff7ab87dd0   464  7ab06820       constant
0xffff7ab87dd4   468  0000ffff       constant
0xffff7ab87dd8   472  7ab06260       constant
0xffff7ab87ddc   476  0000ffff       constant
0xffff7ab87de0   480  7ab068e0       constant
0xffff7ab87de4   484  0000ffff       constant


Safepoints (size = 21)
0xffff7ab87d1c   284  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0xffff7ab87c20  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab87c38  embedded object  (0x20d04519 <the hole>)
0xffff7ab87c48  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c50  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c58  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c60  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c68  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c70  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c78  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c80  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c88  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c90  embedded object  (0x20d04241 <undefined>)
0xffff7ab87c98  embedded object  (0x20d04241 <undefined>)
0xffff7ab87ca0  embedded object  (0x20d04241 <undefined>)
0xffff7ab87ca8  embedded object  (0x20d04241 <undefined>)
0xffff7ab87cb0  embedded object  (0x20d04241 <undefined>)
0xffff7ab87cb8  embedded object  (0x20d04241 <undefined>)
0xffff7ab87cc0  embedded object  (0x20d04241 <undefined>)
0xffff7ab87cf0  code target (STUB)  (0xffff7ab06820)
0xffff7ab87d14  code target (STUB)  (0xffff7ab06260)
0xffff7ab87d20  code target (STUB)  (0xffff7ab068e0)
0xffff7ab87d34  constant pool (size 180)


kind = HANDLER
major_key = <NoCache>Stub
name = undefined
compiler = unknown
Instructions (size = 112)
0xffff7ab89140     0  sub csp, jssp, #0x8 (8)
0xffff7ab89144     4  str x3, [jssp, #-8]!
0xffff7ab89148     8  sub csp, jssp, #0x8 (8)
0xffff7ab8914c    12  str x0, [jssp, #-8]!
0xffff7ab89150    16  ldr x0, pc+72 (addr 0x0000ffff7ab89198)    ;; object: 0x20dc5d51 Cell for 0
0xffff7ab89154    20  ldur x0, [x0, #7]
0xffff7ab89158    24  cmp x0, #0x0 (0)
0xffff7ab8915c    28  b.ne #+0x20 (addr 0xffff7ab8917c)
0xffff7ab89160    32  ldr x0, pc+64 (addr 0x0000ffff7ab891a0)    ;; object: 0x20dc5d61 WeakCell for 0x20d58101 PropertyCell for 0x20d04241 <undefined>
0xffff7ab89164    36  ldur x0, [x0, #7]
0xffff7ab89168    40  tbz w0, #0, #+0x14 (addr 0xffff7ab8917c)
0xffff7ab8916c    44  ldur x0, [x0, #15]
0xffff7ab89170    48  add jssp, jssp, #0x10 (16)
0xffff7ab89174    52  ret
0xffff7ab89178    56  b #+0x14 (addr 0xffff7ab8918c)
0xffff7ab8917c    60  ldr x0, [jssp], #8
0xffff7ab89180    64  ldr x3, [jssp], #8
0xffff7ab89184    68  ldr x16, pc+36 (addr 0x0000ffff7ab891a8)    ;; code: BUILTIN
0xffff7ab89188    72  br x16
0xffff7ab8918c    76  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab89190    80  d63f03e0       constant
0xffff7ab89194    84  d503201f       constant
0xffff7ab89198    88  20dc5d51       constant
0xffff7ab8919c    92  00000000       constant
0xffff7ab891a0    96  20dc5d61       constant
0xffff7ab891a4   100  00000000       constant
0xffff7ab891a8   104  7ab222e0       constant
0xffff7ab891ac   108  0000ffff       constant


RelocInfo (size = 9)
0xffff7ab89150  embedded object  (0x20dc5d51 Cell for 0)
0xffff7ab89160  embedded object  (0x20dc5d61 WeakCell for 0x20d58101 PropertyCell for 0x20d04241 <undefined>)
0xffff7ab89184  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab8918c  constant pool (size 36)

kind = HANDLER
major_key = <NoCache>Stub
name = Object
compiler = unknown
Instructions (size = 120)
0xffff7ab89220     0  sub csp, jssp, #0x8 (8)
0xffff7ab89224     4  str x3, [jssp, #-8]!
0xffff7ab89228     8  sub csp, jssp, #0x8 (8)
0xffff7ab8922c    12  str x0, [jssp, #-8]!
0xffff7ab89230    16  ldr x0, pc+80 (addr 0x0000ffff7ab89280)    ;; object: 0x20dc5d51 Cell for 0
0xffff7ab89234    20  ldur x0, [x0, #7]
0xffff7ab89238    24  cmp x0, #0x0 (0)
0xffff7ab8923c    28  b.ne #+0x2c (addr 0xffff7ab89268)
0xffff7ab89240    32  ldr x0, pc+72 (addr 0x0000ffff7ab89288)    ;; object: 0x20dc5dc9 WeakCell for 0x20d40909 PropertyCell for 0x20d3fef1 <JS Function Object (SharedFunctionInfo 0x20d3fe49)>
0xffff7ab89244    36  ldur x0, [x0, #7]
0xffff7ab89248    40  tbz w0, #0, #+0x20 (addr 0xffff7ab89268)
0xffff7ab8924c    44  ldur x0, [x0, #15]
0xffff7ab89250    48  ldr x16, [x26, #88]
0xffff7ab89254    52  cmp x0, x16
0xffff7ab89258    56  b.eq #+0x10 (addr 0xffff7ab89268)
0xffff7ab8925c    60  add jssp, jssp, #0x10 (16)
0xffff7ab89260    64  ret
0xffff7ab89264    68  b #+0x14 (addr 0xffff7ab89278)
0xffff7ab89268    72  ldr x0, [jssp], #8
0xffff7ab8926c    76  ldr x3, [jssp], #8
0xffff7ab89270    80  ldr x16, pc+32 (addr 0x0000ffff7ab89290)    ;; code: BUILTIN
0xffff7ab89274    84  br x16
0xffff7ab89278    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab8927c    92  d63f03e0       constant
0xffff7ab89280    96  20dc5d51       constant
0xffff7ab89284   100  00000000       constant
0xffff7ab89288   104  20dc5dc9       constant
0xffff7ab8928c   108  00000000       constant
0xffff7ab89290   112  7ab222e0       constant
0xffff7ab89294   116  0000ffff       constant


RelocInfo (size = 9)
0xffff7ab89230  embedded object  (0x20dc5d51 Cell for 0)
0xffff7ab89240  embedded object  (0x20dc5dc9 WeakCell for 0x20d40909 PropertyCell for 0x20d3fef1 <JS Function Object (SharedFunctionInfo 0x20d3fe49)>)
0xffff7ab89270  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab89278  constant pool (size 32)

kind = STUB
major_key = ToNameStub
name = ToNameStub
compiler = unknown
Instructions (size = 112)
0xffff7ab89300     0  tbz w0, #0, #+0x20 (addr 0xffff7ab89320)
0xffff7ab89304     4  ldur x1, [x0, #-1]
0xffff7ab89308     8  ldrb w1, [x1, #11]
0xffff7ab8930c    12  cmp x1, #0x80 (128)
0xffff7ab89310    16  b.hi #+0x8 (addr 0xffff7ab89318)
0xffff7ab89314    20  ret
0xffff7ab89318    24  cmp x1, #0x81 (129)
0xffff7ab8931c    28  b.ne #+0xc (addr 0xffff7ab89328)
0xffff7ab89320    32  ldr x16, pc+56 (addr 0x0000ffff7ab89358)    ;; code: STUB, NumberToStringStub, minor: 0
0xffff7ab89324    36  br x16
0xffff7ab89328    40  cmp x1, #0x83 (131)
0xffff7ab8932c    44  b.ne #+0xc (addr 0xffff7ab89338)
0xffff7ab89330    48  ldur x0, [x0, #7]
0xffff7ab89334    52  ret
0xffff7ab89338    56  sub csp, jssp, #0x8 (8)
0xffff7ab8933c    60  str x0, [jssp, #-8]!
0xffff7ab89340    64  movz x0, #0x1
0xffff7ab89344    68  ldr x1, pc+28 (addr 0x0000ffff7ab89360)    ;; external reference (Runtime::ToName)
0xffff7ab89348    72  ldr x16, pc+32 (addr 0x0000ffff7ab89368)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab8934c    76  br x16
0xffff7ab89350    80  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab89354    84  d63f03e0       constant
0xffff7ab89358    88  7ab2a480       constant
0xffff7ab8935c    92  0000ffff       constant
0xffff7ab89360    96  00e497a0       constant
0xffff7ab89364   100  00000000       constant
0xffff7ab89368   104  7ab06060       constant
0xffff7ab8936c   108  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab89320  code target (STUB)  (0xffff7ab2a480)
0xffff7ab89344  external reference (Runtime::ToName)  (0xe497a0)
0xffff7ab89348  code target (STUB)  (0xffff7ab06060)
0xffff7ab89350  constant pool (size 32)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = RECEIVER*GENERIC -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 624)
0xffff7ab8a5a0     0  orr x16, x1, x0
0xffff7ab8a5a4     4  tbnz w16, #0, #+0x10 (addr 0xffff7ab8a5b4)
0xffff7ab8a5a8     8  asr x1, x1, #32
0xffff7ab8a5ac    12  sub x0, x1, x0, asr #32
0xffff7ab8a5b0    16  ret
0xffff7ab8a5b4    20  cmp x0, x1
0xffff7ab8a5b8    24  b.ne #+0x30 (addr 0xffff7ab8a5e8)
0xffff7ab8a5bc    28  ldur x16, [x0, #-1]
0xffff7ab8a5c0    32  ldr x17, [x26, #120]
0xffff7ab8a5c4    36  cmp x16, x17
0xffff7ab8a5c8    40  b.eq #+0xc (addr 0xffff7ab8a5d4)
0xffff7ab8a5cc    44  movz x0, #0x0
0xffff7ab8a5d0    48  ret
0xffff7ab8a5d4    52  ldur d0, [x0, #7]
0xffff7ab8a5d8    56  fcmp d0, d0
0xffff7ab8a5dc    60  b.vc #-0x10 (addr 0xffff7ab8a5cc)
0xffff7ab8a5e0    64  movn x0, #0x0
0xffff7ab8a5e4    68  ret
0xffff7ab8a5e8    72  and x16, x1, x0
0xffff7ab8a5ec    76  tbnz w16, #0, #+0x64 (addr 0xffff7ab8a650)
0xffff7ab8a5f0    80  tbz w0, #0, #+0x24 (addr 0xffff7ab8a614)
0xffff7ab8a5f4    84  ldur x16, [x0, #-1]
0xffff7ab8a5f8    88  ldr x17, [x26, #120]
0xffff7ab8a5fc    92  cmp x16, x17
0xffff7ab8a600    96  b.eq #+0x8 (addr 0xffff7ab8a608)
0xffff7ab8a604   100  ret
0xffff7ab8a608   104  ldur d0, [x0, #7]
0xffff7ab8a60c   108  scvtf d1, x1, #32
0xffff7ab8a610   112  b #+0x24 (addr 0xffff7ab8a634)
0xffff7ab8a614   116  ldur x16, [x1, #-1]
0xffff7ab8a618   120  ldr x17, [x26, #120]
0xffff7ab8a61c   124  cmp x16, x17
0xffff7ab8a620   128  b.eq #+0xc (addr 0xffff7ab8a62c)
0xffff7ab8a624   132  movz x0, #0x1
0xffff7ab8a628   136  ret
0xffff7ab8a62c   140  ldur d1, [x1, #7]
0xffff7ab8a630   144  scvtf d0, x0, #32
0xffff7ab8a634   148  fcmp d1, d0
0xffff7ab8a638   152  b.vs #+0x10 (addr 0xffff7ab8a648)
0xffff7ab8a63c   156  cset x0, gt
0xffff7ab8a640   160  csinv x0, x0, xzr, ge
0xffff7ab8a644   164  ret
0xffff7ab8a648   168  movn x0, #0x0
0xffff7ab8a64c   172  ret
0xffff7ab8a650   176  ldur x10, [x0, #-1]
0xffff7ab8a654   180  ldur x12, [x1, #-1]
0xffff7ab8a658   184  ldrb w11, [x10, #11]
0xffff7ab8a65c   188  ldrb w13, [x12, #11]
0xffff7ab8a660   192  cmp x11, #0xb1 (177)
0xffff7ab8a664   196  b.lt #+0x8 (addr 0xffff7ab8a66c)
0xffff7ab8a668   200  ret
0xffff7ab8a66c   204  cmp x11, #0x83 (131)
0xffff7ab8a670   208  movz x16, #0x83
0xffff7ab8a674   212  ccmp x13, x16, #nZcv, ne
0xffff7ab8a678   216  movz x16, #0xb1
0xffff7ab8a67c   220  ccmp x13, x16, #NzcV, ne
0xffff7ab8a680   224  b.ge #-0x18 (addr 0xffff7ab8a668)
0xffff7ab8a684   228  orr x14, x13, x11
0xffff7ab8a688   232  tst x14, #0xc0
0xffff7ab8a68c   236  b.eq #-0x24 (addr 0xffff7ab8a668)
0xffff7ab8a690   240  cmp x11, #0x81 (129)
0xffff7ab8a694   244  b.ne #+0x18 (addr 0xffff7ab8a6ac)
0xffff7ab8a698   248  cmp x12, x10
0xffff7ab8a69c   252  b.ne #+0x10 (addr 0xffff7ab8a6ac)
0xffff7ab8a6a0   256  ldur d1, [x1, #7]
0xffff7ab8a6a4   260  ldur d0, [x0, #7]
0xffff7ab8a6a8   264  b #-0x74 (addr 0xffff7ab8a634)
0xffff7ab8a6ac   268  movz x16, #0x87
0xffff7ab8a6b0   272  and x14, x13, x16
0xffff7ab8a6b4   276  movz x16, #0x87
0xffff7ab8a6b8   280  and x15, x11, x16
0xffff7ab8a6bc   284  cmp x14, #0x4 (4)
0xffff7ab8a6c0   288  ccmp x15, #4, #nzcv, eq
0xffff7ab8a6c4   292  b.ne #+0x5c (addr 0xffff7ab8a720)
0xffff7ab8a6c8   296  ldur x10, [x1, #15]
0xffff7ab8a6cc   300  ldur x11, [x0, #15]
0xffff7ab8a6d0   304  cmp x10, x11
0xffff7ab8a6d4   308  b.eq #+0xc (addr 0xffff7ab8a6e0)
0xffff7ab8a6d8   312  movz x0, #0x100000000
0xffff7ab8a6dc   316  ret
0xffff7ab8a6e0   320  cbnz x10, #+0xc (addr 0xffff7ab8a6ec)
0xffff7ab8a6e4   324  movz x0, #0x0
0xffff7ab8a6e8   328  ret
0xffff7ab8a6ec   332  asr x10, x10, #32
0xffff7ab8a6f0   336  add x11, x10, #0x17 (23)
0xffff7ab8a6f4   340  add x1, x1, x11
0xffff7ab8a6f8   344  add x0, x0, x11
0xffff7ab8a6fc   348  neg x10, x10
0xffff7ab8a700   352  ldrb w11, [x1, x10]
0xffff7ab8a704   356  ldrb w12, [x0, x10]
0xffff7ab8a708   360  cmp x11, x12
0xffff7ab8a70c   364  b.ne #-0x34 (addr 0xffff7ab8a6d8)
0xffff7ab8a710   368  add x10, x10, #0x1 (1)
0xffff7ab8a714   372  cbnz x10, #-0x14 (addr 0xffff7ab8a700)
0xffff7ab8a718   376  movz x0, #0x0
0xffff7ab8a71c   380  ret
0xffff7ab8a720   384  movz x16, #0xc00000000
0xffff7ab8a724   388  sub csp, jssp, #0x10 (16)
0xffff7ab8a728   392  stp fp, lr, [jssp, #-16]!
0xffff7ab8a72c   396  sub csp, jssp, #0x10 (16)
0xffff7ab8a730   400  str x16, [jssp, #-8]!
0xffff7ab8a734   404  ldr x17, pc+172 (addr 0x0000ffff7ab8a7e0)    ;; object: 0xffff7ab8a541 <Code: COMPARE_IC>
0xffff7ab8a738   408  sub csp, jssp, #0x10 (16)
0xffff7ab8a73c   412  str x17, [jssp, #-8]!
0xffff7ab8a740   416  add fp, jssp, #0x10 (16)
0xffff7ab8a744   420  sub csp, jssp, #0x10 (16)
0xffff7ab8a748   424  stp x0, x1, [jssp, #-16]!
0xffff7ab8a74c   428  movz x0, #0x2
0xffff7ab8a750   432  ldr x1, pc+152 (addr 0x0000ffff7ab8a7e8)    ;; external reference (Runtime::StrictEqual)
0xffff7ab8a754   436  ldr x16, pc+156 (addr 0x0000ffff7ab8a7f0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab8a758   440  blr x16
0xffff7ab8a75c   444  mov jssp, fp
0xffff7ab8a760   448  ldp fp, lr, [jssp], #16
0xffff7ab8a764   452  ldr x1, [x26, #64]
0xffff7ab8a768   456  sub x0, x0, x1
0xffff7ab8a76c   460  ret
0xffff7ab8a770   464  movz x16, #0xc00000000
0xffff7ab8a774   468  sub csp, jssp, #0x10 (16)
0xffff7ab8a778   472  stp fp, lr, [jssp, #-16]!
0xffff7ab8a77c   476  sub csp, jssp, #0x10 (16)
0xffff7ab8a780   480  str x16, [jssp, #-8]!
0xffff7ab8a784   484  ldr x17, pc+116 (addr 0x0000ffff7ab8a7f8)    ;; object: 0xffff7ab8a541 <Code: COMPARE_IC>
0xffff7ab8a788   488  sub csp, jssp, #0x10 (16)
0xffff7ab8a78c   492  str x17, [jssp, #-8]!
0xffff7ab8a790   496  add fp, jssp, #0x10 (16)
0xffff7ab8a794   500  sub csp, jssp, #0x18 (24)
0xffff7ab8a798   504  stp lr, x0, [jssp, #-24]!
0xffff7ab8a79c   508  str x1, [jssp, #16]
0xffff7ab8a7a0   512  movz x10, #0x2f00000000
0xffff7ab8a7a4   516  sub csp, jssp, #0x18 (24)
0xffff7ab8a7a8   520  stp x10, x0, [jssp, #-24]!
0xffff7ab8a7ac   524  str x1, [jssp, #16]
0xffff7ab8a7b0   528  movz x0, #0x3
0xffff7ab8a7b4   532  ldr x1, pc+76 (addr 0x0000ffff7ab8a800)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ab8a7b8   536  ldr x16, pc+80 (addr 0x0000ffff7ab8a808)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab8a7bc   540  blr x16
0xffff7ab8a7c0   544  add x11, x0, #0x5f (95)
0xffff7ab8a7c4   548  ldr x1, [jssp, #16]
0xffff7ab8a7c8   552  ldp lr, x0, [jssp], #24
0xffff7ab8a7cc   556  mov jssp, fp
0xffff7ab8a7d0   560  ldp fp, lr, [jssp], #16
0xffff7ab8a7d4   564  br x11
0xffff7ab8a7d8   568  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab8a7dc   572  d63f03e0       constant
0xffff7ab8a7e0   576  7ab8a541       constant
0xffff7ab8a7e4   580  0000ffff       constant
0xffff7ab8a7e8   584  00e50928       constant
0xffff7ab8a7ec   588  00000000       constant
0xffff7ab8a7f0   592  7ab06060       constant
0xffff7ab8a7f4   596  0000ffff       constant
0xffff7ab8a7f8   600  7ab8a541       constant
0xffff7ab8a7fc   604  0000ffff       constant
0xffff7ab8a800   608  00c8a980       constant
0xffff7ab8a804   612  00000000       constant
0xffff7ab8a808   616  7ab06060       constant
0xffff7ab8a80c   620  0000ffff       constant


RelocInfo (size = 16)
0xffff7ab8a734  embedded object  (0xffff7ab8a541 <Code: COMPARE_IC>)
0xffff7ab8a750  external reference (Runtime::StrictEqual)  (0xe50928)
0xffff7ab8a754  code target (STUB)  (0xffff7ab06060)
0xffff7ab8a784  embedded object  (0xffff7ab8a541 <Code: COMPARE_IC>)
0xffff7ab8a7b4  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ab8a7b8  code target (STUB)  (0xffff7ab06060)
0xffff7ab8a7d8  constant pool (size 56)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab8b020     0  ldur x0, [x1, #-1]
0xffff7ab8b024     4  ldur x0, [x0, #47]
0xffff7ab8b028     8  ldur x0, [x0, #191]
0xffff7ab8b02c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab8b020     0  ldur x0, [x1, #-1]
0xffff7ab8b024     4  ldur x0, [x0, #47]
0xffff7ab8b028     8  ldur x0, [x0, #191]
0xffff7ab8b02c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab8b0a0     0  ldur x0, [x1, #-1]
0xffff7ab8b0a4     4  ldur x0, [x0, #47]
0xffff7ab8b0a8     8  ldur x0, [x0, #215]
0xffff7ab8b0ac    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0xffff7ab8b0a0     0  ldur x0, [x1, #-1]
0xffff7ab8b0a4     4  ldur x0, [x0, #47]
0xffff7ab8b0a8     8  ldur x0, [x0, #215]
0xffff7ab8b0ac    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = STUB
major_key = NameDictionaryLookupStub
name = NameDictionaryLookupStub
compiler = unknown
Instructions (size = 968)
0xffff7ab8b120     0  ldursw x3, [x0, #35]
0xffff7ab8b124     4  sub x3, x3, #0x1 (1)
0xffff7ab8b128     8  ldur x4, [x1, #7]
0xffff7ab8b12c    12  ldr x5, [x26, #40]
0xffff7ab8b130    16  add x2, x4, #0x28 (40)
0xffff7ab8b134    20  and x2, x3, x2, lsr #2
0xffff7ab8b138    24  add x2, x2, x2, lsl #1
0xffff7ab8b13c    28  add x2, x0, x2, lsl #3
0xffff7ab8b140    32  ldur x6, [x2, #55]
0xffff7ab8b144    36  cmp x6, x5
0xffff7ab8b148    40  b.eq #+0x398 (addr 0xffff7ab8b4e0)
0xffff7ab8b14c    44  cmp x6, x1
0xffff7ab8b150    48  b.eq #+0x388 (addr 0xffff7ab8b4d8)
0xffff7ab8b154    52  ldur x6, [x6, #-1]
0xffff7ab8b158    56  ldrb w6, [x6, #11]
0xffff7ab8b15c    60  tst x6, #0xc0
0xffff7ab8b160    64  movz x16, #0x80
0xffff7ab8b164    68  ccmp x6, x16, #nZcv, ne
0xffff7ab8b168    72  b.ne #+0x370 (addr 0xffff7ab8b4d8)
0xffff7ab8b16c    76  add x2, x4, #0x3c (60)
0xffff7ab8b170    80  and x2, x3, x2, lsr #2
0xffff7ab8b174    84  add x2, x2, x2, lsl #1
0xffff7ab8b178    88  add x2, x0, x2, lsl #3
0xffff7ab8b17c    92  ldur x6, [x2, #55]
0xffff7ab8b180    96  cmp x6, x5
0xffff7ab8b184   100  b.eq #+0x35c (addr 0xffff7ab8b4e0)
0xffff7ab8b188   104  cmp x6, x1
0xffff7ab8b18c   108  b.eq #+0x34c (addr 0xffff7ab8b4d8)
0xffff7ab8b190   112  ldur x6, [x6, #-1]
0xffff7ab8b194   116  ldrb w6, [x6, #11]
0xffff7ab8b198   120  tst x6, #0xc0
0xffff7ab8b19c   124  movz x16, #0x80
0xffff7ab8b1a0   128  ccmp x6, x16, #nZcv, ne
0xffff7ab8b1a4   132  b.ne #+0x334 (addr 0xffff7ab8b4d8)
0xffff7ab8b1a8   136  add x2, x4, #0x54 (84)
0xffff7ab8b1ac   140  and x2, x3, x2, lsr #2
0xffff7ab8b1b0   144  add x2, x2, x2, lsl #1
0xffff7ab8b1b4   148  add x2, x0, x2, lsl #3
0xffff7ab8b1b8   152  ldur x6, [x2, #55]
0xffff7ab8b1bc   156  cmp x6, x5
0xffff7ab8b1c0   160  b.eq #+0x320 (addr 0xffff7ab8b4e0)
0xffff7ab8b1c4   164  cmp x6, x1
0xffff7ab8b1c8   168  b.eq #+0x310 (addr 0xffff7ab8b4d8)
0xffff7ab8b1cc   172  ldur x6, [x6, #-1]
0xffff7ab8b1d0   176  ldrb w6, [x6, #11]
0xffff7ab8b1d4   180  tst x6, #0xc0
0xffff7ab8b1d8   184  movz x16, #0x80
0xffff7ab8b1dc   188  ccmp x6, x16, #nZcv, ne
0xffff7ab8b1e0   192  b.ne #+0x2f8 (addr 0xffff7ab8b4d8)
0xffff7ab8b1e4   196  add x2, x4, #0x70 (112)
0xffff7ab8b1e8   200  and x2, x3, x2, lsr #2
0xffff7ab8b1ec   204  add x2, x2, x2, lsl #1
0xffff7ab8b1f0   208  add x2, x0, x2, lsl #3
0xffff7ab8b1f4   212  ldur x6, [x2, #55]
0xffff7ab8b1f8   216  cmp x6, x5
0xffff7ab8b1fc   220  b.eq #+0x2e4 (addr 0xffff7ab8b4e0)
0xffff7ab8b200   224  cmp x6, x1
0xffff7ab8b204   228  b.eq #+0x2d4 (addr 0xffff7ab8b4d8)
0xffff7ab8b208   232  ldur x6, [x6, #-1]
0xffff7ab8b20c   236  ldrb w6, [x6, #11]
0xffff7ab8b210   240  tst x6, #0xc0
0xffff7ab8b214   244  movz x16, #0x80
0xffff7ab8b218   248  ccmp x6, x16, #nZcv, ne
0xffff7ab8b21c   252  b.ne #+0x2bc (addr 0xffff7ab8b4d8)
0xffff7ab8b220   256  add x2, x4, #0x90 (144)
0xffff7ab8b224   260  and x2, x3, x2, lsr #2
0xffff7ab8b228   264  add x2, x2, x2, lsl #1
0xffff7ab8b22c   268  add x2, x0, x2, lsl #3
0xffff7ab8b230   272  ldur x6, [x2, #55]
0xffff7ab8b234   276  cmp x6, x5
0xffff7ab8b238   280  b.eq #+0x2a8 (addr 0xffff7ab8b4e0)
0xffff7ab8b23c   284  cmp x6, x1
0xffff7ab8b240   288  b.eq #+0x298 (addr 0xffff7ab8b4d8)
0xffff7ab8b244   292  ldur x6, [x6, #-1]
0xffff7ab8b248   296  ldrb w6, [x6, #11]
0xffff7ab8b24c   300  tst x6, #0xc0
0xffff7ab8b250   304  movz x16, #0x80
0xffff7ab8b254   308  ccmp x6, x16, #nZcv, ne
0xffff7ab8b258   312  b.ne #+0x280 (addr 0xffff7ab8b4d8)
0xffff7ab8b25c   316  add x2, x4, #0xb4 (180)
0xffff7ab8b260   320  and x2, x3, x2, lsr #2
0xffff7ab8b264   324  add x2, x2, x2, lsl #1
0xffff7ab8b268   328  add x2, x0, x2, lsl #3
0xffff7ab8b26c   332  ldur x6, [x2, #55]
0xffff7ab8b270   336  cmp x6, x5
0xffff7ab8b274   340  b.eq #+0x26c (addr 0xffff7ab8b4e0)
0xffff7ab8b278   344  cmp x6, x1
0xffff7ab8b27c   348  b.eq #+0x25c (addr 0xffff7ab8b4d8)
0xffff7ab8b280   352  ldur x6, [x6, #-1]
0xffff7ab8b284   356  ldrb w6, [x6, #11]
0xffff7ab8b288   360  tst x6, #0xc0
0xffff7ab8b28c   364  movz x16, #0x80
0xffff7ab8b290   368  ccmp x6, x16, #nZcv, ne
0xffff7ab8b294   372  b.ne #+0x244 (addr 0xffff7ab8b4d8)
0xffff7ab8b298   376  add x2, x4, #0xdc (220)
0xffff7ab8b29c   380  and x2, x3, x2, lsr #2
0xffff7ab8b2a0   384  add x2, x2, x2, lsl #1
0xffff7ab8b2a4   388  add x2, x0, x2, lsl #3
0xffff7ab8b2a8   392  ldur x6, [x2, #55]
0xffff7ab8b2ac   396  cmp x6, x5
0xffff7ab8b2b0   400  b.eq #+0x230 (addr 0xffff7ab8b4e0)
0xffff7ab8b2b4   404  cmp x6, x1
0xffff7ab8b2b8   408  b.eq #+0x220 (addr 0xffff7ab8b4d8)
0xffff7ab8b2bc   412  ldur x6, [x6, #-1]
0xffff7ab8b2c0   416  ldrb w6, [x6, #11]
0xffff7ab8b2c4   420  tst x6, #0xc0
0xffff7ab8b2c8   424  movz x16, #0x80
0xffff7ab8b2cc   428  ccmp x6, x16, #nZcv, ne
0xffff7ab8b2d0   432  b.ne #+0x208 (addr 0xffff7ab8b4d8)
0xffff7ab8b2d4   436  add x2, x4, #0x108 (264)
0xffff7ab8b2d8   440  and x2, x3, x2, lsr #2
0xffff7ab8b2dc   444  add x2, x2, x2, lsl #1
0xffff7ab8b2e0   448  add x2, x0, x2, lsl #3
0xffff7ab8b2e4   452  ldur x6, [x2, #55]
0xffff7ab8b2e8   456  cmp x6, x5
0xffff7ab8b2ec   460  b.eq #+0x1f4 (addr 0xffff7ab8b4e0)
0xffff7ab8b2f0   464  cmp x6, x1
0xffff7ab8b2f4   468  b.eq #+0x1e4 (addr 0xffff7ab8b4d8)
0xffff7ab8b2f8   472  ldur x6, [x6, #-1]
0xffff7ab8b2fc   476  ldrb w6, [x6, #11]
0xffff7ab8b300   480  tst x6, #0xc0
0xffff7ab8b304   484  movz x16, #0x80
0xffff7ab8b308   488  ccmp x6, x16, #nZcv, ne
0xffff7ab8b30c   492  b.ne #+0x1cc (addr 0xffff7ab8b4d8)
0xffff7ab8b310   496  add x2, x4, #0x138 (312)
0xffff7ab8b314   500  and x2, x3, x2, lsr #2
0xffff7ab8b318   504  add x2, x2, x2, lsl #1
0xffff7ab8b31c   508  add x2, x0, x2, lsl #3
0xffff7ab8b320   512  ldur x6, [x2, #55]
0xffff7ab8b324   516  cmp x6, x5
0xffff7ab8b328   520  b.eq #+0x1b8 (addr 0xffff7ab8b4e0)
0xffff7ab8b32c   524  cmp x6, x1
0xffff7ab8b330   528  b.eq #+0x1a8 (addr 0xffff7ab8b4d8)
0xffff7ab8b334   532  ldur x6, [x6, #-1]
0xffff7ab8b338   536  ldrb w6, [x6, #11]
0xffff7ab8b33c   540  tst x6, #0xc0
0xffff7ab8b340   544  movz x16, #0x80
0xffff7ab8b344   548  ccmp x6, x16, #nZcv, ne
0xffff7ab8b348   552  b.ne #+0x190 (addr 0xffff7ab8b4d8)
0xffff7ab8b34c   556  add x2, x4, #0x16c (364)
0xffff7ab8b350   560  and x2, x3, x2, lsr #2
0xffff7ab8b354   564  add x2, x2, x2, lsl #1
0xffff7ab8b358   568  add x2, x0, x2, lsl #3
0xffff7ab8b35c   572  ldur x6, [x2, #55]
0xffff7ab8b360   576  cmp x6, x5
0xffff7ab8b364   580  b.eq #+0x17c (addr 0xffff7ab8b4e0)
0xffff7ab8b368   584  cmp x6, x1
0xffff7ab8b36c   588  b.eq #+0x16c (addr 0xffff7ab8b4d8)
0xffff7ab8b370   592  ldur x6, [x6, #-1]
0xffff7ab8b374   596  ldrb w6, [x6, #11]
0xffff7ab8b378   600  tst x6, #0xc0
0xffff7ab8b37c   604  movz x16, #0x80
0xffff7ab8b380   608  ccmp x6, x16, #nZcv, ne
0xffff7ab8b384   612  b.ne #+0x154 (addr 0xffff7ab8b4d8)
0xffff7ab8b388   616  add x2, x4, #0x1a4 (420)
0xffff7ab8b38c   620  and x2, x3, x2, lsr #2
0xffff7ab8b390   624  add x2, x2, x2, lsl #1
0xffff7ab8b394   628  add x2, x0, x2, lsl #3
0xffff7ab8b398   632  ldur x6, [x2, #55]
0xffff7ab8b39c   636  cmp x6, x5
0xffff7ab8b3a0   640  b.eq #+0x140 (addr 0xffff7ab8b4e0)
0xffff7ab8b3a4   644  cmp x6, x1
0xffff7ab8b3a8   648  b.eq #+0x130 (addr 0xffff7ab8b4d8)
0xffff7ab8b3ac   652  ldur x6, [x6, #-1]
0xffff7ab8b3b0   656  ldrb w6, [x6, #11]
0xffff7ab8b3b4   660  tst x6, #0xc0
0xffff7ab8b3b8   664  movz x16, #0x80
0xffff7ab8b3bc   668  ccmp x6, x16, #nZcv, ne
0xffff7ab8b3c0   672  b.ne #+0x118 (addr 0xffff7ab8b4d8)
0xffff7ab8b3c4   676  add x2, x4, #0x1e0 (480)
0xffff7ab8b3c8   680  and x2, x3, x2, lsr #2
0xffff7ab8b3cc   684  add x2, x2, x2, lsl #1
0xffff7ab8b3d0   688  add x2, x0, x2, lsl #3
0xffff7ab8b3d4   692  ldur x6, [x2, #55]
0xffff7ab8b3d8   696  cmp x6, x5
0xffff7ab8b3dc   700  b.eq #+0x104 (addr 0xffff7ab8b4e0)
0xffff7ab8b3e0   704  cmp x6, x1
0xffff7ab8b3e4   708  b.eq #+0xf4 (addr 0xffff7ab8b4d8)
0xffff7ab8b3e8   712  ldur x6, [x6, #-1]
0xffff7ab8b3ec   716  ldrb w6, [x6, #11]
0xffff7ab8b3f0   720  tst x6, #0xc0
0xffff7ab8b3f4   724  movz x16, #0x80
0xffff7ab8b3f8   728  ccmp x6, x16, #nZcv, ne
0xffff7ab8b3fc   732  b.ne #+0xdc (addr 0xffff7ab8b4d8)
0xffff7ab8b400   736  add x2, x4, #0x220 (544)
0xffff7ab8b404   740  and x2, x3, x2, lsr #2
0xffff7ab8b408   744  add x2, x2, x2, lsl #1
0xffff7ab8b40c   748  add x2, x0, x2, lsl #3
0xffff7ab8b410   752  ldur x6, [x2, #55]
0xffff7ab8b414   756  cmp x6, x5
0xffff7ab8b418   760  b.eq #+0xc8 (addr 0xffff7ab8b4e0)
0xffff7ab8b41c   764  cmp x6, x1
0xffff7ab8b420   768  b.eq #+0xb8 (addr 0xffff7ab8b4d8)
0xffff7ab8b424   772  ldur x6, [x6, #-1]
0xffff7ab8b428   776  ldrb w6, [x6, #11]
0xffff7ab8b42c   780  tst x6, #0xc0
0xffff7ab8b430   784  movz x16, #0x80
0xffff7ab8b434   788  ccmp x6, x16, #nZcv, ne
0xffff7ab8b438   792  b.ne #+0xa0 (addr 0xffff7ab8b4d8)
0xffff7ab8b43c   796  add x2, x4, #0x264 (612)
0xffff7ab8b440   800  and x2, x3, x2, lsr #2
0xffff7ab8b444   804  add x2, x2, x2, lsl #1
0xffff7ab8b448   808  add x2, x0, x2, lsl #3
0xffff7ab8b44c   812  ldur x6, [x2, #55]
0xffff7ab8b450   816  cmp x6, x5
0xffff7ab8b454   820  b.eq #+0x8c (addr 0xffff7ab8b4e0)
0xffff7ab8b458   824  cmp x6, x1
0xffff7ab8b45c   828  b.eq #+0x7c (addr 0xffff7ab8b4d8)
0xffff7ab8b460   832  ldur x6, [x6, #-1]
0xffff7ab8b464   836  ldrb w6, [x6, #11]
0xffff7ab8b468   840  tst x6, #0xc0
0xffff7ab8b46c   844  movz x16, #0x80
0xffff7ab8b470   848  ccmp x6, x16, #nZcv, ne
0xffff7ab8b474   852  b.ne #+0x64 (addr 0xffff7ab8b4d8)
0xffff7ab8b478   856  add x2, x4, #0x2ac (684)
0xffff7ab8b47c   860  and x2, x3, x2, lsr #2
0xffff7ab8b480   864  add x2, x2, x2, lsl #1
0xffff7ab8b484   868  add x2, x0, x2, lsl #3
0xffff7ab8b488   872  ldur x6, [x2, #55]
0xffff7ab8b48c   876  cmp x6, x5
0xffff7ab8b490   880  b.eq #+0x50 (addr 0xffff7ab8b4e0)
0xffff7ab8b494   884  cmp x6, x1
0xffff7ab8b498   888  b.eq #+0x40 (addr 0xffff7ab8b4d8)
0xffff7ab8b49c   892  ldur x6, [x6, #-1]
0xffff7ab8b4a0   896  ldrb w6, [x6, #11]
0xffff7ab8b4a4   900  tst x6, #0xc0
0xffff7ab8b4a8   904  movz x16, #0x80
0xffff7ab8b4ac   908  ccmp x6, x16, #nZcv, ne
0xffff7ab8b4b0   912  b.ne #+0x28 (addr 0xffff7ab8b4d8)
0xffff7ab8b4b4   916  add x2, x4, #0x2f8 (760)
0xffff7ab8b4b8   920  and x2, x3, x2, lsr #2
0xffff7ab8b4bc   924  add x2, x2, x2, lsl #1
0xffff7ab8b4c0   928  add x2, x0, x2, lsl #3
0xffff7ab8b4c4   932  ldur x6, [x2, #55]
0xffff7ab8b4c8   936  cmp x6, x5
0xffff7ab8b4cc   940  b.eq #+0x14 (addr 0xffff7ab8b4e0)
0xffff7ab8b4d0   944  cmp x6, x1
0xffff7ab8b4d4   948  b.eq #+0x4 (addr 0xffff7ab8b4d8)
0xffff7ab8b4d8   952  movz x0, #0x1
0xffff7ab8b4dc   956  ret
0xffff7ab8b4e0   960  movz x0, #0x0
0xffff7ab8b4e4   964  ret


RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = hasOwnProperty
compiler = unknown
Instructions (size = 656)
0xffff7ab8b560     0  sub csp, jssp, #0x8 (8)
0xffff7ab8b564     4  str x3, [jssp, #-8]!
0xffff7ab8b568     8  sub csp, jssp, #0x8 (8)
0xffff7ab8b56c    12  str x0, [jssp, #-8]!
0xffff7ab8b570    16  ldr x0, pc+560 (addr 0x0000ffff7ab8b7a0)    ;; object: 0x20d63e59 Cell for 0
0xffff7ab8b574    20  ldur x0, [x0, #7]
0xffff7ab8b578    24  cmp x0, #0x0 (0)
0xffff7ab8b57c    28  b.ne #+0x1f8 (addr 0xffff7ab8b774)
0xffff7ab8b580    32  ldur x4, [x1, #-1]
0xffff7ab8b584    36  ldrb w0, [x4, #12]
0xffff7ab8b588    40  movz x16, #0x44
0xffff7ab8b58c    44  tst x0, x16
0xffff7ab8b590    48  b.ne #+0x1e4 (addr 0xffff7ab8b774)
0xffff7ab8b594    52  ldrb w0, [x4, #11]
0xffff7ab8b598    56  cmp x0, #0xb1 (177)
0xffff7ab8b59c    60  b.lt #+0x1d8 (addr 0xffff7ab8b774)
0xffff7ab8b5a0    64  ldur x0, [x1, #7]
0xffff7ab8b5a4    68  ldur x4, [x0, #-1]
0xffff7ab8b5a8    72  ldr x16, [x26, #432]
0xffff7ab8b5ac    76  cmp x4, x16
0xffff7ab8b5b0    80  b.ne #+0x1c4 (addr 0xffff7ab8b774)
0xffff7ab8b5b4    84  ldursw x4, [x0, #35]
0xffff7ab8b5b8    88  sub x4, x4, #0x1 (1)
0xffff7ab8b5bc    92  movz x16, #0x8242
0xffff7ab8b5c0    96  movk x16, #0x275c, lsl #16
0xffff7ab8b5c4   100  and x4, x4, x16
0xffff7ab8b5c8   104  add x4, x4, x4, lsl #1
0xffff7ab8b5cc   108  add x4, x0, x4, lsl #3
0xffff7ab8b5d0   112  ldur x4, [x4, #55]
0xffff7ab8b5d4   116  ldr x16, [x26, #40]
0xffff7ab8b5d8   120  cmp x4, x16
0xffff7ab8b5dc   124  b.eq #+0x188 (addr 0xffff7ab8b764)
0xffff7ab8b5e0   128  ldr x16, pc+456 (addr 0x0000ffff7ab8b7a8)    ;; object: 0x20d417b1 <String[14]: hasOwnProperty>
0xffff7ab8b5e4   132  cmp x4, x16
0xffff7ab8b5e8   136  b.eq #+0x18c (addr 0xffff7ab8b774)
0xffff7ab8b5ec   140  ldr x16, [x26, #88]
0xffff7ab8b5f0   144  cmp x4, x16
0xffff7ab8b5f4   148  b.eq #+0x1c (addr 0xffff7ab8b610)
0xffff7ab8b5f8   152  ldur x4, [x4, #-1]
0xffff7ab8b5fc   156  ldrb w4, [x4, #11]
0xffff7ab8b600   160  tst x4, #0xc0
0xffff7ab8b604   164  movz x16, #0x80
0xffff7ab8b608   168  ccmp x4, x16, #nZcv, ne
0xffff7ab8b60c   172  b.ne #+0x168 (addr 0xffff7ab8b774)
0xffff7ab8b610   176  ldursw x4, [x0, #35]
0xffff7ab8b614   180  sub x4, x4, #0x1 (1)
0xffff7ab8b618   184  movz x16, #0x8243
0xffff7ab8b61c   188  movk x16, #0x275c, lsl #16
0xffff7ab8b620   192  and x4, x4, x16
0xffff7ab8b624   196  add x4, x4, x4, lsl #1
0xffff7ab8b628   200  add x4, x0, x4, lsl #3
0xffff7ab8b62c   204  ldur x4, [x4, #55]
0xffff7ab8b630   208  ldr x16, [x26, #40]
0xffff7ab8b634   212  cmp x4, x16
0xffff7ab8b638   216  b.eq #+0x12c (addr 0xffff7ab8b764)
0xffff7ab8b63c   220  ldr x16, pc+372 (addr 0x0000ffff7ab8b7b0)    ;; object: 0x20d417b1 <String[14]: hasOwnProperty>
0xffff7ab8b640   224  cmp x4, x16
0xffff7ab8b644   228  b.eq #+0x130 (addr 0xffff7ab8b774)
0xffff7ab8b648   232  ldr x16, [x26, #88]
0xffff7ab8b64c   236  cmp x4, x16
0xffff7ab8b650   240  b.eq #+0x1c (addr 0xffff7ab8b66c)
0xffff7ab8b654   244  ldur x4, [x4, #-1]
0xffff7ab8b658   248  ldrb w4, [x4, #11]
0xffff7ab8b65c   252  tst x4, #0xc0
0xffff7ab8b660   256  movz x16, #0x80
0xffff7ab8b664   260  ccmp x4, x16, #nZcv, ne
0xffff7ab8b668   264  b.ne #+0x10c (addr 0xffff7ab8b774)
0xffff7ab8b66c   268  ldursw x4, [x0, #35]
0xffff7ab8b670   272  sub x4, x4, #0x1 (1)
0xffff7ab8b674   276  movz x16, #0x8245
0xffff7ab8b678   280  movk x16, #0x275c, lsl #16
0xffff7ab8b67c   284  and x4, x4, x16
0xffff7ab8b680   288  add x4, x4, x4, lsl #1
0xffff7ab8b684   292  add x4, x0, x4, lsl #3
0xffff7ab8b688   296  ldur x4, [x4, #55]
0xffff7ab8b68c   300  ldr x16, [x26, #40]
0xffff7ab8b690   304  cmp x4, x16
0xffff7ab8b694   308  b.eq #+0xd0 (addr 0xffff7ab8b764)
0xffff7ab8b698   312  ldr x16, pc+288 (addr 0x0000ffff7ab8b7b8)    ;; object: 0x20d417b1 <String[14]: hasOwnProperty>
0xffff7ab8b69c   316  cmp x4, x16
0xffff7ab8b6a0   320  b.eq #+0xd4 (addr 0xffff7ab8b774)
0xffff7ab8b6a4   324  ldr x16, [x26, #88]
0xffff7ab8b6a8   328  cmp x4, x16
0xffff7ab8b6ac   332  b.eq #+0x1c (addr 0xffff7ab8b6c8)
0xffff7ab8b6b0   336  ldur x4, [x4, #-1]
0xffff7ab8b6b4   340  ldrb w4, [x4, #11]
0xffff7ab8b6b8   344  tst x4, #0xc0
0xffff7ab8b6bc   348  movz x16, #0x80
0xffff7ab8b6c0   352  ccmp x4, x16, #nZcv, ne
0xffff7ab8b6c4   356  b.ne #+0xb0 (addr 0xffff7ab8b774)
0xffff7ab8b6c8   360  ldursw x4, [x0, #35]
0xffff7ab8b6cc   364  sub x4, x4, #0x1 (1)
0xffff7ab8b6d0   368  movz x16, #0x8248
0xffff7ab8b6d4   372  movk x16, #0x275c, lsl #16
0xffff7ab8b6d8   376  and x4, x4, x16
0xffff7ab8b6dc   380  add x4, x4, x4, lsl #1
0xffff7ab8b6e0   384  add x4, x0, x4, lsl #3
0xffff7ab8b6e4   388  ldur x4, [x4, #55]
0xffff7ab8b6e8   392  ldr x16, [x26, #40]
0xffff7ab8b6ec   396  cmp x4, x16
0xffff7ab8b6f0   400  b.eq #+0x74 (addr 0xffff7ab8b764)
0xffff7ab8b6f4   404  ldr x16, pc+204 (addr 0x0000ffff7ab8b7c0)    ;; object: 0x20d417b1 <String[14]: hasOwnProperty>
0xffff7ab8b6f8   408  cmp x4, x16
0xffff7ab8b6fc   412  b.eq #+0x78 (addr 0xffff7ab8b774)
0xffff7ab8b700   416  ldr x16, [x26, #88]
0xffff7ab8b704   420  cmp x4, x16
0xffff7ab8b708   424  b.eq #+0x1c (addr 0xffff7ab8b724)
0xffff7ab8b70c   428  ldur x4, [x4, #-1]
0xffff7ab8b710   432  ldrb w4, [x4, #11]
0xffff7ab8b714   436  tst x4, #0xc0
0xffff7ab8b718   440  movz x16, #0x80
0xffff7ab8b71c   444  ccmp x4, x16, #nZcv, ne
0xffff7ab8b720   448  b.ne #+0x54 (addr 0xffff7ab8b774)
0xffff7ab8b724   452  sub csp, jssp, #0x38 (56)
0xffff7ab8b728   456  stp x3, x5, [jssp, #-32]!
0xffff7ab8b72c   460  stp x6, lr, [jssp, #16]
0xffff7ab8b730   464  stp x0, x1, [jssp, #-24]!
0xffff7ab8b734   468  str x2, [jssp, #16]
0xffff7ab8b738   472  ldur x0, [x1, #7]
0xffff7ab8b73c   476  ldr x1, pc+140 (addr 0x0000ffff7ab8b7c8)    ;; object: 0x20d417b1 <String[14]: hasOwnProperty>
0xffff7ab8b740   480  ldr x16, pc+144 (addr 0x0000ffff7ab8b7d0)    ;; code: STUB, NameDictionaryLookupStub, minor: 1
0xffff7ab8b744   484  blr x16
0xffff7ab8b748   488  mov x4, x0
0xffff7ab8b74c   492  ldp x2, x3, [jssp, #16]
0xffff7ab8b750   496  ldp x0, x1, [jssp], #32
0xffff7ab8b754   500  ldr lr, [jssp, #16]
0xffff7ab8b758   504  ldp x5, x6, [jssp], #24
0xffff7ab8b75c   508  cbz x4, #+0x8 (addr 0xffff7ab8b764)
0xffff7ab8b760   512  b #+0x14 (addr 0xffff7ab8b774)
0xffff7ab8b764   516  ldr x3, pc+116 (addr 0x0000ffff7ab8b7d8)    ;; object: 0x20dc7a51 WeakCell for 0x20d3ff39 <an Object with map 0x4ec0c081>
0xffff7ab8b768   520  ldur x3, [x3, #7]
0xffff7ab8b76c   524  tbz w3, #0, #+0x8 (addr 0xffff7ab8b774)
0xffff7ab8b770   528  b #+0x14 (addr 0xffff7ab8b784)
0xffff7ab8b774   532  ldr x0, [jssp], #8
0xffff7ab8b778   536  ldr x3, [jssp], #8
0xffff7ab8b77c   540  ldr x16, pc+100 (addr 0x0000ffff7ab8b7e0)    ;; code: BUILTIN
0xffff7ab8b780   544  br x16
0xffff7ab8b784   548  add jssp, jssp, #0x10 (16)
0xffff7ab8b788   552  mov x1, x3
0xffff7ab8b78c   556  ldr x16, pc+92 (addr 0x0000ffff7ab8b7e8)    ;; code: HANDLER, LoadConstantStub, minor: 0
0xffff7ab8b790   560  br x16
0xffff7ab8b794   564  580002df       constant pool begin (num_const = 22)    ;; constant pool
0xffff7ab8b798   568  d63f03e0       constant
0xffff7ab8b79c   572  d503201f       constant
0xffff7ab8b7a0   576  20d63e59       constant
0xffff7ab8b7a4   580  00000000       constant
0xffff7ab8b7a8   584  20d417b1       constant
0xffff7ab8b7ac   588  00000000       constant
0xffff7ab8b7b0   592  20d417b1       constant
0xffff7ab8b7b4   596  00000000       constant
0xffff7ab8b7b8   600  20d417b1       constant
0xffff7ab8b7bc   604  00000000       constant
0xffff7ab8b7c0   608  20d417b1       constant
0xffff7ab8b7c4   612  00000000       constant
0xffff7ab8b7c8   616  20d417b1       constant
0xffff7ab8b7cc   620  00000000       constant
0xffff7ab8b7d0   624  7ab8b120       constant
0xffff7ab8b7d4   628  0000ffff       constant
0xffff7ab8b7d8   632  20dc7a51       constant
0xffff7ab8b7dc   636  00000000       constant
0xffff7ab8b7e0   640  7ab222e0       constant
0xffff7ab8b7e4   644  0000ffff       constant
0xffff7ab8b7e8   648  7ab431a0       constant
0xffff7ab8b7ec   652  0000ffff       constant


RelocInfo (size = 26)
0xffff7ab8b570  embedded object  (0x20d63e59 Cell for 0)
0xffff7ab8b5e0  embedded object  (0x20d417b1 <String[14]: hasOwnProperty>)
0xffff7ab8b63c  embedded object  (0x20d417b1 <String[14]: hasOwnProperty>)
0xffff7ab8b698  embedded object  (0x20d417b1 <String[14]: hasOwnProperty>)
0xffff7ab8b6f4  embedded object  (0x20d417b1 <String[14]: hasOwnProperty>)
0xffff7ab8b73c  embedded object  (0x20d417b1 <String[14]: hasOwnProperty>)
0xffff7ab8b740  code target (STUB)  (0xffff7ab8b120)
0xffff7ab8b764  embedded object  (0x20dc7a51 WeakCell for 0x20d3ff39 <an Object with map 0x4ec0c081>)
0xffff7ab8b77c  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab8b78c  code target (HANDLER)  (0xffff7ab431a0)
0xffff7ab8b794  constant pool (size 92)

kind = HANDLER
major_key = <NoCache>Stub
name = push
compiler = unknown
Instructions (size = 120)
0xffff7ab8b860     0  sub csp, jssp, #0x8 (8)
0xffff7ab8b864     4  str x3, [jssp, #-8]!
0xffff7ab8b868     8  sub csp, jssp, #0x8 (8)
0xffff7ab8b86c    12  str x0, [jssp, #-8]!
0xffff7ab8b870    16  ldr x0, pc+72 (addr 0x0000ffff7ab8b8b8)    ;; object: 0x20dc7b09 Cell for 0
0xffff7ab8b874    20  ldur x0, [x0, #7]
0xffff7ab8b878    24  cmp x0, #0x0 (0)
0xffff7ab8b87c    28  b.ne #+0x14 (addr 0xffff7ab8b890)
0xffff7ab8b880    32  ldr x3, pc+64 (addr 0x0000ffff7ab8b8c0)    ;; object: 0x20dc7b19 WeakCell for 0x56e26419 <JS Array[0]>
0xffff7ab8b884    36  ldur x3, [x3, #7]
0xffff7ab8b888    40  tbz w3, #0, #+0x8 (addr 0xffff7ab8b890)
0xffff7ab8b88c    44  b #+0x14 (addr 0xffff7ab8b8a0)
0xffff7ab8b890    48  ldr x0, [jssp], #8
0xffff7ab8b894    52  ldr x3, [jssp], #8
0xffff7ab8b898    56  ldr x16, pc+48 (addr 0x0000ffff7ab8b8c8)    ;; code: BUILTIN
0xffff7ab8b89c    60  br x16
0xffff7ab8b8a0    64  add jssp, jssp, #0x10 (16)
0xffff7ab8b8a4    68  mov x1, x3
0xffff7ab8b8a8    72  ldr x16, pc+40 (addr 0x0000ffff7ab8b8d0)    ;; code: HANDLER, LoadConstantStub, minor: 7
0xffff7ab8b8ac    76  br x16
0xffff7ab8b8b0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7ab8b8b4    84  d63f03e0       constant
0xffff7ab8b8b8    88  20dc7b09       constant
0xffff7ab8b8bc    92  00000000       constant
0xffff7ab8b8c0    96  20dc7b19       constant
0xffff7ab8b8c4   100  00000000       constant
0xffff7ab8b8c8   104  7ab222e0       constant
0xffff7ab8b8cc   108  0000ffff       constant
0xffff7ab8b8d0   112  7ab8b0a0       constant
0xffff7ab8b8d4   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab8b870  embedded object  (0x20dc7b09 Cell for 0)
0xffff7ab8b880  embedded object  (0x20dc7b19 WeakCell for 0x56e26419 <JS Array[0]>)
0xffff7ab8b898  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab8b8a8  code target (HANDLER)  (0xffff7ab8b0a0)
0xffff7ab8b8b0  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7ab8b940     0  tbz w0, #0, #+0x90 (addr 0xffff7ab8b9d0)
0xffff7ab8b944     4  mov x2, x0
0xffff7ab8b948     8  stur x2, [x1, #23]
0xffff7ab8b94c    12  add x3, x1, #0x17 (23)
0xffff7ab8b950    16  and x2, x2, #0xfffffffffff00000
0xffff7ab8b954    20  ldr x2, [x2, #8]
0xffff7ab8b958    24  tbz w2, #1, #+0x24 (addr 0xffff7ab8b97c)
0xffff7ab8b95c    28  and x2, x1, #0xfffffffffff00000
0xffff7ab8b960    32  ldr x2, [x2, #8]
0xffff7ab8b964    36  tbz w2, #2, #+0x18 (addr 0xffff7ab8b97c)
0xffff7ab8b968    40  sub csp, jssp, #0x8 (8)
0xffff7ab8b96c    44  str lr, [jssp, #-8]!
0xffff7ab8b970    48  ldr x16, pc+80 (addr 0x0000ffff7ab8b9c0)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab8b974    52  blr x16
0xffff7ab8b978    56  ldr lr, [jssp], #8
0xffff7ab8b97c    60  stur x5, [x1, #-1]
0xffff7ab8b980    64  tbz w5, #0, #+0x34 (addr 0xffff7ab8b9b4)
0xffff7ab8b984    68  sub x2, x1, #0x1 (1)
0xffff7ab8b988    72  and x5, x5, #0xfffffffffff00000
0xffff7ab8b98c    76  ldr x5, [x5, #8]
0xffff7ab8b990    80  tbz w5, #1, #+0x24 (addr 0xffff7ab8b9b4)
0xffff7ab8b994    84  and x5, x1, #0xfffffffffff00000
0xffff7ab8b998    88  ldr x5, [x5, #8]
0xffff7ab8b99c    92  tbz w5, #2, #+0x18 (addr 0xffff7ab8b9b4)
0xffff7ab8b9a0    96  sub csp, jssp, #0x8 (8)
0xffff7ab8b9a4   100  str lr, [jssp, #-8]!
0xffff7ab8b9a8   104  ldr x16, pc+32 (addr 0x0000ffff7ab8b9c8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab8b9ac   108  blr x16
0xffff7ab8b9b0   112  ldr lr, [jssp], #8
0xffff7ab8b9b4   116  ret
0xffff7ab8b9b8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab8b9bc   124  d63f03e0       constant
0xffff7ab8b9c0   128  7ab170c0       constant
0xffff7ab8b9c4   132  0000ffff       constant
0xffff7ab8b9c8   136  7ab38080       constant
0xffff7ab8b9cc   140  0000ffff       constant
0xffff7ab8b9d0   144  movz x16, #0x0
0xffff7ab8b9d4   148  sub csp, jssp, #0x10 (16)
0xffff7ab8b9d8   152  stp fp, lr, [jssp, #-16]!
0xffff7ab8b9dc   156  bl #+0x4 (addr 0xffff7ab8b9e0)
0xffff7ab8b9e0   160  movz x17, #0xa00000000
0xffff7ab8b9e4   164  sub csp, jssp, #0x10 (16)
0xffff7ab8b9e8   168  stp x17, cp, [jssp, #-16]!
0xffff7ab8b9ec   172  add fp, jssp, #0x10 (16)
0xffff7ab8b9f0   176  ldr x17, pc+24 (addr 0x0000ffff7ab8ba08)    ;; lazy deoptimization bailout 0
0xffff7ab8b9f4   180  add x17, x17, x16
0xffff7ab8b9f8   184  br x17
0xffff7ab8b9fc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab8ba00   192  d63f03e0       constant
0xffff7ab8ba04   196  d503201f       constant
0xffff7ab8ba08   200  7a906000       constant
0xffff7ab8ba0c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab8b970  code target (STUB)  (0xffff7ab170c0)
0xffff7ab8b9a8  code target (STUB)  (0xffff7ab38080)
0xffff7ab8b9b8  constant pool (size 24)
0xffff7ab8b9f0  runtime entry
0xffff7ab8b9fc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7ab8b940     0  tbz w0, #0, #+0x90 (addr 0xffff7ab8b9d0)
0xffff7ab8b944     4  mov x2, x0
0xffff7ab8b948     8  stur x2, [x1, #23]
0xffff7ab8b94c    12  add x3, x1, #0x17 (23)
0xffff7ab8b950    16  and x2, x2, #0xfffffffffff00000
0xffff7ab8b954    20  ldr x2, [x2, #8]
0xffff7ab8b958    24  tbz w2, #1, #+0x24 (addr 0xffff7ab8b97c)
0xffff7ab8b95c    28  and x2, x1, #0xfffffffffff00000
0xffff7ab8b960    32  ldr x2, [x2, #8]
0xffff7ab8b964    36  tbz w2, #2, #+0x18 (addr 0xffff7ab8b97c)
0xffff7ab8b968    40  sub csp, jssp, #0x8 (8)
0xffff7ab8b96c    44  str lr, [jssp, #-8]!
0xffff7ab8b970    48  ldr x16, pc+80 (addr 0x0000ffff7ab8b9c0)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab8b974    52  blr x16
0xffff7ab8b978    56  ldr lr, [jssp], #8
0xffff7ab8b97c    60  stur x5, [x1, #-1]
0xffff7ab8b980    64  tbz w5, #0, #+0x34 (addr 0xffff7ab8b9b4)
0xffff7ab8b984    68  sub x2, x1, #0x1 (1)
0xffff7ab8b988    72  and x5, x5, #0xfffffffffff00000
0xffff7ab8b98c    76  ldr x5, [x5, #8]
0xffff7ab8b990    80  tbz w5, #1, #+0x24 (addr 0xffff7ab8b9b4)
0xffff7ab8b994    84  and x5, x1, #0xfffffffffff00000
0xffff7ab8b998    88  ldr x5, [x5, #8]
0xffff7ab8b99c    92  tbz w5, #2, #+0x18 (addr 0xffff7ab8b9b4)
0xffff7ab8b9a0    96  sub csp, jssp, #0x8 (8)
0xffff7ab8b9a4   100  str lr, [jssp, #-8]!
0xffff7ab8b9a8   104  ldr x16, pc+32 (addr 0x0000ffff7ab8b9c8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab8b9ac   108  blr x16
0xffff7ab8b9b0   112  ldr lr, [jssp], #8
0xffff7ab8b9b4   116  ret
0xffff7ab8b9b8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab8b9bc   124  d63f03e0       constant
0xffff7ab8b9c0   128  7ab170c0       constant
0xffff7ab8b9c4   132  0000ffff       constant
0xffff7ab8b9c8   136  7ab38080       constant
0xffff7ab8b9cc   140  0000ffff       constant
0xffff7ab8b9d0   144  movz x16, #0x0
0xffff7ab8b9d4   148  sub csp, jssp, #0x10 (16)
0xffff7ab8b9d8   152  stp fp, lr, [jssp, #-16]!
0xffff7ab8b9dc   156  bl #+0x4 (addr 0xffff7ab8b9e0)
0xffff7ab8b9e0   160  movz x17, #0xa00000000
0xffff7ab8b9e4   164  sub csp, jssp, #0x10 (16)
0xffff7ab8b9e8   168  stp x17, cp, [jssp, #-16]!
0xffff7ab8b9ec   172  add fp, jssp, #0x10 (16)
0xffff7ab8b9f0   176  ldr x17, pc+24 (addr 0x0000ffff7ab8ba08)    ;; lazy deoptimization bailout 0
0xffff7ab8b9f4   180  add x17, x17, x16
0xffff7ab8b9f8   184  br x17
0xffff7ab8b9fc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab8ba00   192  d63f03e0       constant
0xffff7ab8ba04   196  d503201f       constant
0xffff7ab8ba08   200  7a906000       constant
0xffff7ab8ba0c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab8b970  code target (STUB)  (0xffff7ab170c0)
0xffff7ab8b9a8  code target (STUB)  (0xffff7ab38080)
0xffff7ab8b9b8  constant pool (size 24)
0xffff7ab8b9f0  runtime entry
0xffff7ab8b9fc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = filename
compiler = unknown
Instructions (size = 152)
0xffff7ab8ba80     0  sub csp, jssp, #0x8 (8)
0xffff7ab8ba84     4  str x3, [jssp, #-8]!
0xffff7ab8ba88     8  sub csp, jssp, #0x8 (8)
0xffff7ab8ba8c    12  str x4, [jssp, #-8]!
0xffff7ab8ba90    16  ldr x3, pc+88 (addr 0x0000ffff7ab8bae8)    ;; object: 0x20dc7ba9 Cell for 0
0xffff7ab8ba94    20  ldur x3, [x3, #7]
0xffff7ab8ba98    24  cmp x3, #0x0 (0)
0xffff7ab8ba9c    28  b.ne #+0x30 (addr 0xffff7ab8bacc)
0xffff7ab8baa0    32  tbz w0, #0, #+0x2c (addr 0xffff7ab8bacc)
0xffff7ab8baa4    36  ldr x5, pc+76 (addr 0x0000ffff7ab8baf0)    ;; object: 0x20dc2219 WeakCell for 0x4ec1b2d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab8baa8    40  ldur x5, [x5, #7]
0xffff7ab8baac    44  tbz w5, #0, #+0x20 (addr 0xffff7ab8bacc)
0xffff7ab8bab0    48  ldursw x4, [x5, #15]
0xffff7ab8bab4    52  tbnz w4, #23, #+0x18 (addr 0xffff7ab8bacc)
0xffff7ab8bab8    56  ldr x4, [jssp], #8
0xffff7ab8babc    60  ldr x3, [jssp], #8
0xffff7ab8bac0    64  ldr x2, pc+56 (addr 0x0000ffff7ab8baf8)    ;; object: 0x20db9cf1 <String[8]: filename>
0xffff7ab8bac4    68  ldr x16, pc+60 (addr 0x0000ffff7ab8bb00)    ;; code: HANDLER, StoreTransitionStub, minor: 198659
0xffff7ab8bac8    72  br x16
0xffff7ab8bacc    76  ldr x2, pc+60 (addr 0x0000ffff7ab8bb08)    ;; object: 0x20db9cf1 <String[8]: filename>
0xffff7ab8bad0    80  ldr x4, [jssp], #8
0xffff7ab8bad4    84  ldr x3, [jssp], #8
0xffff7ab8bad8    88  ldr x16, pc+56 (addr 0x0000ffff7ab8bb10)    ;; code: BUILTIN
0xffff7ab8badc    92  br x16
0xffff7ab8bae0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab8bae4   100  d63f03e0       constant
0xffff7ab8bae8   104  20dc7ba9       constant
0xffff7ab8baec   108  00000000       constant
0xffff7ab8baf0   112  20dc2219       constant
0xffff7ab8baf4   116  00000000       constant
0xffff7ab8baf8   120  20db9cf1       constant
0xffff7ab8bafc   124  00000000       constant
0xffff7ab8bb00   128  7ab8b940       constant
0xffff7ab8bb04   132  0000ffff       constant
0xffff7ab8bb08   136  20db9cf1       constant
0xffff7ab8bb0c   140  00000000       constant
0xffff7ab8bb10   144  7ab22420       constant
0xffff7ab8bb14   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7ab8ba90  embedded object  (0x20dc7ba9 Cell for 0)
0xffff7ab8baa4  embedded object  (0x20dc2219 WeakCell for 0x4ec1b2d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab8bac0  embedded object  (0x20db9cf1 <String[8]: filename>)
0xffff7ab8bac4  code target (HANDLER)  (0xffff7ab8b940)
0xffff7ab8bacc  embedded object  (0x20db9cf1 <String[8]: filename>)
0xffff7ab8bad8  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab8bae0  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7ab8bb80     0  tbz w0, #0, #+0x90 (addr 0xffff7ab8bc10)
0xffff7ab8bb84     4  mov x2, x0
0xffff7ab8bb88     8  stur x2, [x1, #31]
0xffff7ab8bb8c    12  add x3, x1, #0x1f (31)
0xffff7ab8bb90    16  and x2, x2, #0xfffffffffff00000
0xffff7ab8bb94    20  ldr x2, [x2, #8]
0xffff7ab8bb98    24  tbz w2, #1, #+0x24 (addr 0xffff7ab8bbbc)
0xffff7ab8bb9c    28  and x2, x1, #0xfffffffffff00000
0xffff7ab8bba0    32  ldr x2, [x2, #8]
0xffff7ab8bba4    36  tbz w2, #2, #+0x18 (addr 0xffff7ab8bbbc)
0xffff7ab8bba8    40  sub csp, jssp, #0x8 (8)
0xffff7ab8bbac    44  str lr, [jssp, #-8]!
0xffff7ab8bbb0    48  ldr x16, pc+80 (addr 0x0000ffff7ab8bc00)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab8bbb4    52  blr x16
0xffff7ab8bbb8    56  ldr lr, [jssp], #8
0xffff7ab8bbbc    60  stur x5, [x1, #-1]
0xffff7ab8bbc0    64  tbz w5, #0, #+0x34 (addr 0xffff7ab8bbf4)
0xffff7ab8bbc4    68  sub x2, x1, #0x1 (1)
0xffff7ab8bbc8    72  and x5, x5, #0xfffffffffff00000
0xffff7ab8bbcc    76  ldr x5, [x5, #8]
0xffff7ab8bbd0    80  tbz w5, #1, #+0x24 (addr 0xffff7ab8bbf4)
0xffff7ab8bbd4    84  and x5, x1, #0xfffffffffff00000
0xffff7ab8bbd8    88  ldr x5, [x5, #8]
0xffff7ab8bbdc    92  tbz w5, #2, #+0x18 (addr 0xffff7ab8bbf4)
0xffff7ab8bbe0    96  sub csp, jssp, #0x8 (8)
0xffff7ab8bbe4   100  str lr, [jssp, #-8]!
0xffff7ab8bbe8   104  ldr x16, pc+32 (addr 0x0000ffff7ab8bc08)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab8bbec   108  blr x16
0xffff7ab8bbf0   112  ldr lr, [jssp], #8
0xffff7ab8bbf4   116  ret
0xffff7ab8bbf8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab8bbfc   124  d63f03e0       constant
0xffff7ab8bc00   128  7ab170c0       constant
0xffff7ab8bc04   132  0000ffff       constant
0xffff7ab8bc08   136  7ab38080       constant
0xffff7ab8bc0c   140  0000ffff       constant
0xffff7ab8bc10   144  movz x16, #0x0
0xffff7ab8bc14   148  sub csp, jssp, #0x10 (16)
0xffff7ab8bc18   152  stp fp, lr, [jssp, #-16]!
0xffff7ab8bc1c   156  bl #+0x4 (addr 0xffff7ab8bc20)
0xffff7ab8bc20   160  movz x17, #0xa00000000
0xffff7ab8bc24   164  sub csp, jssp, #0x10 (16)
0xffff7ab8bc28   168  stp x17, cp, [jssp, #-16]!
0xffff7ab8bc2c   172  add fp, jssp, #0x10 (16)
0xffff7ab8bc30   176  ldr x17, pc+24 (addr 0x0000ffff7ab8bc48)    ;; lazy deoptimization bailout 0
0xffff7ab8bc34   180  add x17, x17, x16
0xffff7ab8bc38   184  br x17
0xffff7ab8bc3c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab8bc40   192  d63f03e0       constant
0xffff7ab8bc44   196  d503201f       constant
0xffff7ab8bc48   200  7a906000       constant
0xffff7ab8bc4c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab8bbb0  code target (STUB)  (0xffff7ab170c0)
0xffff7ab8bbe8  code target (STUB)  (0xffff7ab38080)
0xffff7ab8bbf8  constant pool (size 24)
0xffff7ab8bc30  runtime entry
0xffff7ab8bc3c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7ab8bb80     0  tbz w0, #0, #+0x90 (addr 0xffff7ab8bc10)
0xffff7ab8bb84     4  mov x2, x0
0xffff7ab8bb88     8  stur x2, [x1, #31]
0xffff7ab8bb8c    12  add x3, x1, #0x1f (31)
0xffff7ab8bb90    16  and x2, x2, #0xfffffffffff00000
0xffff7ab8bb94    20  ldr x2, [x2, #8]
0xffff7ab8bb98    24  tbz w2, #1, #+0x24 (addr 0xffff7ab8bbbc)
0xffff7ab8bb9c    28  and x2, x1, #0xfffffffffff00000
0xffff7ab8bba0    32  ldr x2, [x2, #8]
0xffff7ab8bba4    36  tbz w2, #2, #+0x18 (addr 0xffff7ab8bbbc)
0xffff7ab8bba8    40  sub csp, jssp, #0x8 (8)
0xffff7ab8bbac    44  str lr, [jssp, #-8]!
0xffff7ab8bbb0    48  ldr x16, pc+80 (addr 0x0000ffff7ab8bc00)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab8bbb4    52  blr x16
0xffff7ab8bbb8    56  ldr lr, [jssp], #8
0xffff7ab8bbbc    60  stur x5, [x1, #-1]
0xffff7ab8bbc0    64  tbz w5, #0, #+0x34 (addr 0xffff7ab8bbf4)
0xffff7ab8bbc4    68  sub x2, x1, #0x1 (1)
0xffff7ab8bbc8    72  and x5, x5, #0xfffffffffff00000
0xffff7ab8bbcc    76  ldr x5, [x5, #8]
0xffff7ab8bbd0    80  tbz w5, #1, #+0x24 (addr 0xffff7ab8bbf4)
0xffff7ab8bbd4    84  and x5, x1, #0xfffffffffff00000
0xffff7ab8bbd8    88  ldr x5, [x5, #8]
0xffff7ab8bbdc    92  tbz w5, #2, #+0x18 (addr 0xffff7ab8bbf4)
0xffff7ab8bbe0    96  sub csp, jssp, #0x8 (8)
0xffff7ab8bbe4   100  str lr, [jssp, #-8]!
0xffff7ab8bbe8   104  ldr x16, pc+32 (addr 0x0000ffff7ab8bc08)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab8bbec   108  blr x16
0xffff7ab8bbf0   112  ldr lr, [jssp], #8
0xffff7ab8bbf4   116  ret
0xffff7ab8bbf8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab8bbfc   124  d63f03e0       constant
0xffff7ab8bc00   128  7ab170c0       constant
0xffff7ab8bc04   132  0000ffff       constant
0xffff7ab8bc08   136  7ab38080       constant
0xffff7ab8bc0c   140  0000ffff       constant
0xffff7ab8bc10   144  movz x16, #0x0
0xffff7ab8bc14   148  sub csp, jssp, #0x10 (16)
0xffff7ab8bc18   152  stp fp, lr, [jssp, #-16]!
0xffff7ab8bc1c   156  bl #+0x4 (addr 0xffff7ab8bc20)
0xffff7ab8bc20   160  movz x17, #0xa00000000
0xffff7ab8bc24   164  sub csp, jssp, #0x10 (16)
0xffff7ab8bc28   168  stp x17, cp, [jssp, #-16]!
0xffff7ab8bc2c   172  add fp, jssp, #0x10 (16)
0xffff7ab8bc30   176  ldr x17, pc+24 (addr 0x0000ffff7ab8bc48)    ;; lazy deoptimization bailout 0
0xffff7ab8bc34   180  add x17, x17, x16
0xffff7ab8bc38   184  br x17
0xffff7ab8bc3c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab8bc40   192  d63f03e0       constant
0xffff7ab8bc44   196  d503201f       constant
0xffff7ab8bc48   200  7a906000       constant
0xffff7ab8bc4c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab8bbb0  code target (STUB)  (0xffff7ab170c0)
0xffff7ab8bbe8  code target (STUB)  (0xffff7ab38080)
0xffff7ab8bbf8  constant pool (size 24)
0xffff7ab8bc30  runtime entry
0xffff7ab8bc3c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = id
compiler = unknown
Instructions (size = 152)
0xffff7ab8bcc0     0  sub csp, jssp, #0x8 (8)
0xffff7ab8bcc4     4  str x3, [jssp, #-8]!
0xffff7ab8bcc8     8  sub csp, jssp, #0x8 (8)
0xffff7ab8bccc    12  str x4, [jssp, #-8]!
0xffff7ab8bcd0    16  ldr x3, pc+88 (addr 0x0000ffff7ab8bd28)    ;; object: 0x20dc7ba9 Cell for 0
0xffff7ab8bcd4    20  ldur x3, [x3, #7]
0xffff7ab8bcd8    24  cmp x3, #0x0 (0)
0xffff7ab8bcdc    28  b.ne #+0x30 (addr 0xffff7ab8bd0c)
0xffff7ab8bce0    32  tbz w0, #0, #+0x2c (addr 0xffff7ab8bd0c)
0xffff7ab8bce4    36  ldr x5, pc+76 (addr 0x0000ffff7ab8bd30)    ;; object: 0x20dc2231 WeakCell for 0x4ec1b331 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab8bce8    40  ldur x5, [x5, #7]
0xffff7ab8bcec    44  tbz w5, #0, #+0x20 (addr 0xffff7ab8bd0c)
0xffff7ab8bcf0    48  ldursw x4, [x5, #15]
0xffff7ab8bcf4    52  tbnz w4, #23, #+0x18 (addr 0xffff7ab8bd0c)
0xffff7ab8bcf8    56  ldr x4, [jssp], #8
0xffff7ab8bcfc    60  ldr x3, [jssp], #8
0xffff7ab8bd00    64  ldr x2, pc+56 (addr 0x0000ffff7ab8bd38)    ;; object: 0x20d4e919 <String[2]: id>
0xffff7ab8bd04    68  ldr x16, pc+60 (addr 0x0000ffff7ab8bd40)    ;; code: HANDLER, StoreTransitionStub, minor: 198660
0xffff7ab8bd08    72  br x16
0xffff7ab8bd0c    76  ldr x2, pc+60 (addr 0x0000ffff7ab8bd48)    ;; object: 0x20d4e919 <String[2]: id>
0xffff7ab8bd10    80  ldr x4, [jssp], #8
0xffff7ab8bd14    84  ldr x3, [jssp], #8
0xffff7ab8bd18    88  ldr x16, pc+56 (addr 0x0000ffff7ab8bd50)    ;; code: BUILTIN
0xffff7ab8bd1c    92  br x16
0xffff7ab8bd20    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab8bd24   100  d63f03e0       constant
0xffff7ab8bd28   104  20dc7ba9       constant
0xffff7ab8bd2c   108  00000000       constant
0xffff7ab8bd30   112  20dc2231       constant
0xffff7ab8bd34   116  00000000       constant
0xffff7ab8bd38   120  20d4e919       constant
0xffff7ab8bd3c   124  00000000       constant
0xffff7ab8bd40   128  7ab8bb80       constant
0xffff7ab8bd44   132  0000ffff       constant
0xffff7ab8bd48   136  20d4e919       constant
0xffff7ab8bd4c   140  00000000       constant
0xffff7ab8bd50   144  7ab22420       constant
0xffff7ab8bd54   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7ab8bcd0  embedded object  (0x20dc7ba9 Cell for 0)
0xffff7ab8bce4  embedded object  (0x20dc2231 WeakCell for 0x4ec1b331 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab8bd00  embedded object  (0x20d4e919 <String[2]: id>)
0xffff7ab8bd04  code target (HANDLER)  (0xffff7ab8bb80)
0xffff7ab8bd0c  embedded object  (0x20d4e919 <String[2]: id>)
0xffff7ab8bd18  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab8bd20  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7ab8bdc0     0  tbz w0, #0, #+0x90 (addr 0xffff7ab8be50)
0xffff7ab8bdc4     4  mov x2, x0
0xffff7ab8bdc8     8  stur x2, [x1, #39]
0xffff7ab8bdcc    12  add x3, x1, #0x27 (39)
0xffff7ab8bdd0    16  and x2, x2, #0xfffffffffff00000
0xffff7ab8bdd4    20  ldr x2, [x2, #8]
0xffff7ab8bdd8    24  tbz w2, #1, #+0x24 (addr 0xffff7ab8bdfc)
0xffff7ab8bddc    28  and x2, x1, #0xfffffffffff00000
0xffff7ab8bde0    32  ldr x2, [x2, #8]
0xffff7ab8bde4    36  tbz w2, #2, #+0x18 (addr 0xffff7ab8bdfc)
0xffff7ab8bde8    40  sub csp, jssp, #0x8 (8)
0xffff7ab8bdec    44  str lr, [jssp, #-8]!
0xffff7ab8bdf0    48  ldr x16, pc+80 (addr 0x0000ffff7ab8be40)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab8bdf4    52  blr x16
0xffff7ab8bdf8    56  ldr lr, [jssp], #8
0xffff7ab8bdfc    60  stur x5, [x1, #-1]
0xffff7ab8be00    64  tbz w5, #0, #+0x34 (addr 0xffff7ab8be34)
0xffff7ab8be04    68  sub x2, x1, #0x1 (1)
0xffff7ab8be08    72  and x5, x5, #0xfffffffffff00000
0xffff7ab8be0c    76  ldr x5, [x5, #8]
0xffff7ab8be10    80  tbz w5, #1, #+0x24 (addr 0xffff7ab8be34)
0xffff7ab8be14    84  and x5, x1, #0xfffffffffff00000
0xffff7ab8be18    88  ldr x5, [x5, #8]
0xffff7ab8be1c    92  tbz w5, #2, #+0x18 (addr 0xffff7ab8be34)
0xffff7ab8be20    96  sub csp, jssp, #0x8 (8)
0xffff7ab8be24   100  str lr, [jssp, #-8]!
0xffff7ab8be28   104  ldr x16, pc+32 (addr 0x0000ffff7ab8be48)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab8be2c   108  blr x16
0xffff7ab8be30   112  ldr lr, [jssp], #8
0xffff7ab8be34   116  ret
0xffff7ab8be38   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab8be3c   124  d63f03e0       constant
0xffff7ab8be40   128  7ab170c0       constant
0xffff7ab8be44   132  0000ffff       constant
0xffff7ab8be48   136  7ab38080       constant
0xffff7ab8be4c   140  0000ffff       constant
0xffff7ab8be50   144  movz x16, #0x0
0xffff7ab8be54   148  sub csp, jssp, #0x10 (16)
0xffff7ab8be58   152  stp fp, lr, [jssp, #-16]!
0xffff7ab8be5c   156  bl #+0x4 (addr 0xffff7ab8be60)
0xffff7ab8be60   160  movz x17, #0xa00000000
0xffff7ab8be64   164  sub csp, jssp, #0x10 (16)
0xffff7ab8be68   168  stp x17, cp, [jssp, #-16]!
0xffff7ab8be6c   172  add fp, jssp, #0x10 (16)
0xffff7ab8be70   176  ldr x17, pc+24 (addr 0x0000ffff7ab8be88)    ;; lazy deoptimization bailout 0
0xffff7ab8be74   180  add x17, x17, x16
0xffff7ab8be78   184  br x17
0xffff7ab8be7c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab8be80   192  d63f03e0       constant
0xffff7ab8be84   196  d503201f       constant
0xffff7ab8be88   200  7a906000       constant
0xffff7ab8be8c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab8bdf0  code target (STUB)  (0xffff7ab170c0)
0xffff7ab8be28  code target (STUB)  (0xffff7ab38080)
0xffff7ab8be38  constant pool (size 24)
0xffff7ab8be70  runtime entry
0xffff7ab8be7c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7ab8bdc0     0  tbz w0, #0, #+0x90 (addr 0xffff7ab8be50)
0xffff7ab8bdc4     4  mov x2, x0
0xffff7ab8bdc8     8  stur x2, [x1, #39]
0xffff7ab8bdcc    12  add x3, x1, #0x27 (39)
0xffff7ab8bdd0    16  and x2, x2, #0xfffffffffff00000
0xffff7ab8bdd4    20  ldr x2, [x2, #8]
0xffff7ab8bdd8    24  tbz w2, #1, #+0x24 (addr 0xffff7ab8bdfc)
0xffff7ab8bddc    28  and x2, x1, #0xfffffffffff00000
0xffff7ab8bde0    32  ldr x2, [x2, #8]
0xffff7ab8bde4    36  tbz w2, #2, #+0x18 (addr 0xffff7ab8bdfc)
0xffff7ab8bde8    40  sub csp, jssp, #0x8 (8)
0xffff7ab8bdec    44  str lr, [jssp, #-8]!
0xffff7ab8bdf0    48  ldr x16, pc+80 (addr 0x0000ffff7ab8be40)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab8bdf4    52  blr x16
0xffff7ab8bdf8    56  ldr lr, [jssp], #8
0xffff7ab8bdfc    60  stur x5, [x1, #-1]
0xffff7ab8be00    64  tbz w5, #0, #+0x34 (addr 0xffff7ab8be34)
0xffff7ab8be04    68  sub x2, x1, #0x1 (1)
0xffff7ab8be08    72  and x5, x5, #0xfffffffffff00000
0xffff7ab8be0c    76  ldr x5, [x5, #8]
0xffff7ab8be10    80  tbz w5, #1, #+0x24 (addr 0xffff7ab8be34)
0xffff7ab8be14    84  and x5, x1, #0xfffffffffff00000
0xffff7ab8be18    88  ldr x5, [x5, #8]
0xffff7ab8be1c    92  tbz w5, #2, #+0x18 (addr 0xffff7ab8be34)
0xffff7ab8be20    96  sub csp, jssp, #0x8 (8)
0xffff7ab8be24   100  str lr, [jssp, #-8]!
0xffff7ab8be28   104  ldr x16, pc+32 (addr 0x0000ffff7ab8be48)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab8be2c   108  blr x16
0xffff7ab8be30   112  ldr lr, [jssp], #8
0xffff7ab8be34   116  ret
0xffff7ab8be38   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab8be3c   124  d63f03e0       constant
0xffff7ab8be40   128  7ab170c0       constant
0xffff7ab8be44   132  0000ffff       constant
0xffff7ab8be48   136  7ab38080       constant
0xffff7ab8be4c   140  0000ffff       constant
0xffff7ab8be50   144  movz x16, #0x0
0xffff7ab8be54   148  sub csp, jssp, #0x10 (16)
0xffff7ab8be58   152  stp fp, lr, [jssp, #-16]!
0xffff7ab8be5c   156  bl #+0x4 (addr 0xffff7ab8be60)
0xffff7ab8be60   160  movz x17, #0xa00000000
0xffff7ab8be64   164  sub csp, jssp, #0x10 (16)
0xffff7ab8be68   168  stp x17, cp, [jssp, #-16]!
0xffff7ab8be6c   172  add fp, jssp, #0x10 (16)
0xffff7ab8be70   176  ldr x17, pc+24 (addr 0x0000ffff7ab8be88)    ;; lazy deoptimization bailout 0
0xffff7ab8be74   180  add x17, x17, x16
0xffff7ab8be78   184  br x17
0xffff7ab8be7c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab8be80   192  d63f03e0       constant
0xffff7ab8be84   196  d503201f       constant
0xffff7ab8be88   200  7a906000       constant
0xffff7ab8be8c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab8bdf0  code target (STUB)  (0xffff7ab170c0)
0xffff7ab8be28  code target (STUB)  (0xffff7ab38080)
0xffff7ab8be38  constant pool (size 24)
0xffff7ab8be70  runtime entry
0xffff7ab8be7c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = exports
compiler = unknown
Instructions (size = 152)
0xffff7ab8bf00     0  sub csp, jssp, #0x8 (8)
0xffff7ab8bf04     4  str x3, [jssp, #-8]!
0xffff7ab8bf08     8  sub csp, jssp, #0x8 (8)
0xffff7ab8bf0c    12  str x4, [jssp, #-8]!
0xffff7ab8bf10    16  ldr x3, pc+88 (addr 0x0000ffff7ab8bf68)    ;; object: 0x20dc7ba9 Cell for 0
0xffff7ab8bf14    20  ldur x3, [x3, #7]
0xffff7ab8bf18    24  cmp x3, #0x0 (0)
0xffff7ab8bf1c    28  b.ne #+0x30 (addr 0xffff7ab8bf4c)
0xffff7ab8bf20    32  tbz w0, #0, #+0x2c (addr 0xffff7ab8bf4c)
0xffff7ab8bf24    36  ldr x5, pc+76 (addr 0x0000ffff7ab8bf70)    ;; object: 0x20dc2281 WeakCell for 0x4ec1b389 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab8bf28    40  ldur x5, [x5, #7]
0xffff7ab8bf2c    44  tbz w5, #0, #+0x20 (addr 0xffff7ab8bf4c)
0xffff7ab8bf30    48  ldursw x4, [x5, #15]
0xffff7ab8bf34    52  tbnz w4, #23, #+0x18 (addr 0xffff7ab8bf4c)
0xffff7ab8bf38    56  ldr x4, [jssp], #8
0xffff7ab8bf3c    60  ldr x3, [jssp], #8
0xffff7ab8bf40    64  ldr x2, pc+56 (addr 0x0000ffff7ab8bf78)    ;; object: 0x20db2651 <String[7]: exports>
0xffff7ab8bf44    68  ldr x16, pc+60 (addr 0x0000ffff7ab8bf80)    ;; code: HANDLER, StoreTransitionStub, minor: 198661
0xffff7ab8bf48    72  br x16
0xffff7ab8bf4c    76  ldr x2, pc+60 (addr 0x0000ffff7ab8bf88)    ;; object: 0x20db2651 <String[7]: exports>
0xffff7ab8bf50    80  ldr x4, [jssp], #8
0xffff7ab8bf54    84  ldr x3, [jssp], #8
0xffff7ab8bf58    88  ldr x16, pc+56 (addr 0x0000ffff7ab8bf90)    ;; code: BUILTIN
0xffff7ab8bf5c    92  br x16
0xffff7ab8bf60    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab8bf64   100  d63f03e0       constant
0xffff7ab8bf68   104  20dc7ba9       constant
0xffff7ab8bf6c   108  00000000       constant
0xffff7ab8bf70   112  20dc2281       constant
0xffff7ab8bf74   116  00000000       constant
0xffff7ab8bf78   120  20db2651       constant
0xffff7ab8bf7c   124  00000000       constant
0xffff7ab8bf80   128  7ab8bdc0       constant
0xffff7ab8bf84   132  0000ffff       constant
0xffff7ab8bf88   136  20db2651       constant
0xffff7ab8bf8c   140  00000000       constant
0xffff7ab8bf90   144  7ab22420       constant
0xffff7ab8bf94   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7ab8bf10  embedded object  (0x20dc7ba9 Cell for 0)
0xffff7ab8bf24  embedded object  (0x20dc2281 WeakCell for 0x4ec1b389 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab8bf40  embedded object  (0x20db2651 <String[7]: exports>)
0xffff7ab8bf44  code target (HANDLER)  (0xffff7ab8bdc0)
0xffff7ab8bf4c  embedded object  (0x20db2651 <String[7]: exports>)
0xffff7ab8bf58  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab8bf60  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7ab8c000     0  tbz w0, #0, #+0x90 (addr 0xffff7ab8c090)
0xffff7ab8c004     4  mov x2, x0
0xffff7ab8c008     8  stur x2, [x1, #47]
0xffff7ab8c00c    12  add x3, x1, #0x2f (47)
0xffff7ab8c010    16  and x2, x2, #0xfffffffffff00000
0xffff7ab8c014    20  ldr x2, [x2, #8]
0xffff7ab8c018    24  tbz w2, #1, #+0x24 (addr 0xffff7ab8c03c)
0xffff7ab8c01c    28  and x2, x1, #0xfffffffffff00000
0xffff7ab8c020    32  ldr x2, [x2, #8]
0xffff7ab8c024    36  tbz w2, #2, #+0x18 (addr 0xffff7ab8c03c)
0xffff7ab8c028    40  sub csp, jssp, #0x8 (8)
0xffff7ab8c02c    44  str lr, [jssp, #-8]!
0xffff7ab8c030    48  ldr x16, pc+80 (addr 0x0000ffff7ab8c080)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab8c034    52  blr x16
0xffff7ab8c038    56  ldr lr, [jssp], #8
0xffff7ab8c03c    60  stur x5, [x1, #-1]
0xffff7ab8c040    64  tbz w5, #0, #+0x34 (addr 0xffff7ab8c074)
0xffff7ab8c044    68  sub x2, x1, #0x1 (1)
0xffff7ab8c048    72  and x5, x5, #0xfffffffffff00000
0xffff7ab8c04c    76  ldr x5, [x5, #8]
0xffff7ab8c050    80  tbz w5, #1, #+0x24 (addr 0xffff7ab8c074)
0xffff7ab8c054    84  and x5, x1, #0xfffffffffff00000
0xffff7ab8c058    88  ldr x5, [x5, #8]
0xffff7ab8c05c    92  tbz w5, #2, #+0x18 (addr 0xffff7ab8c074)
0xffff7ab8c060    96  sub csp, jssp, #0x8 (8)
0xffff7ab8c064   100  str lr, [jssp, #-8]!
0xffff7ab8c068   104  ldr x16, pc+32 (addr 0x0000ffff7ab8c088)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab8c06c   108  blr x16
0xffff7ab8c070   112  ldr lr, [jssp], #8
0xffff7ab8c074   116  ret
0xffff7ab8c078   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab8c07c   124  d63f03e0       constant
0xffff7ab8c080   128  7ab170c0       constant
0xffff7ab8c084   132  0000ffff       constant
0xffff7ab8c088   136  7ab38080       constant
0xffff7ab8c08c   140  0000ffff       constant
0xffff7ab8c090   144  movz x16, #0x0
0xffff7ab8c094   148  sub csp, jssp, #0x10 (16)
0xffff7ab8c098   152  stp fp, lr, [jssp, #-16]!
0xffff7ab8c09c   156  bl #+0x4 (addr 0xffff7ab8c0a0)
0xffff7ab8c0a0   160  movz x17, #0xa00000000
0xffff7ab8c0a4   164  sub csp, jssp, #0x10 (16)
0xffff7ab8c0a8   168  stp x17, cp, [jssp, #-16]!
0xffff7ab8c0ac   172  add fp, jssp, #0x10 (16)
0xffff7ab8c0b0   176  ldr x17, pc+24 (addr 0x0000ffff7ab8c0c8)    ;; lazy deoptimization bailout 0
0xffff7ab8c0b4   180  add x17, x17, x16
0xffff7ab8c0b8   184  br x17
0xffff7ab8c0bc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab8c0c0   192  d63f03e0       constant
0xffff7ab8c0c4   196  d503201f       constant
0xffff7ab8c0c8   200  7a906000       constant
0xffff7ab8c0cc   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab8c030  code target (STUB)  (0xffff7ab170c0)
0xffff7ab8c068  code target (STUB)  (0xffff7ab38080)
0xffff7ab8c078  constant pool (size 24)
0xffff7ab8c0b0  runtime entry
0xffff7ab8c0bc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7ab8c000     0  tbz w0, #0, #+0x90 (addr 0xffff7ab8c090)
0xffff7ab8c004     4  mov x2, x0
0xffff7ab8c008     8  stur x2, [x1, #47]
0xffff7ab8c00c    12  add x3, x1, #0x2f (47)
0xffff7ab8c010    16  and x2, x2, #0xfffffffffff00000
0xffff7ab8c014    20  ldr x2, [x2, #8]
0xffff7ab8c018    24  tbz w2, #1, #+0x24 (addr 0xffff7ab8c03c)
0xffff7ab8c01c    28  and x2, x1, #0xfffffffffff00000
0xffff7ab8c020    32  ldr x2, [x2, #8]
0xffff7ab8c024    36  tbz w2, #2, #+0x18 (addr 0xffff7ab8c03c)
0xffff7ab8c028    40  sub csp, jssp, #0x8 (8)
0xffff7ab8c02c    44  str lr, [jssp, #-8]!
0xffff7ab8c030    48  ldr x16, pc+80 (addr 0x0000ffff7ab8c080)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab8c034    52  blr x16
0xffff7ab8c038    56  ldr lr, [jssp], #8
0xffff7ab8c03c    60  stur x5, [x1, #-1]
0xffff7ab8c040    64  tbz w5, #0, #+0x34 (addr 0xffff7ab8c074)
0xffff7ab8c044    68  sub x2, x1, #0x1 (1)
0xffff7ab8c048    72  and x5, x5, #0xfffffffffff00000
0xffff7ab8c04c    76  ldr x5, [x5, #8]
0xffff7ab8c050    80  tbz w5, #1, #+0x24 (addr 0xffff7ab8c074)
0xffff7ab8c054    84  and x5, x1, #0xfffffffffff00000
0xffff7ab8c058    88  ldr x5, [x5, #8]
0xffff7ab8c05c    92  tbz w5, #2, #+0x18 (addr 0xffff7ab8c074)
0xffff7ab8c060    96  sub csp, jssp, #0x8 (8)
0xffff7ab8c064   100  str lr, [jssp, #-8]!
0xffff7ab8c068   104  ldr x16, pc+32 (addr 0x0000ffff7ab8c088)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab8c06c   108  blr x16
0xffff7ab8c070   112  ldr lr, [jssp], #8
0xffff7ab8c074   116  ret
0xffff7ab8c078   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab8c07c   124  d63f03e0       constant
0xffff7ab8c080   128  7ab170c0       constant
0xffff7ab8c084   132  0000ffff       constant
0xffff7ab8c088   136  7ab38080       constant
0xffff7ab8c08c   140  0000ffff       constant
0xffff7ab8c090   144  movz x16, #0x0
0xffff7ab8c094   148  sub csp, jssp, #0x10 (16)
0xffff7ab8c098   152  stp fp, lr, [jssp, #-16]!
0xffff7ab8c09c   156  bl #+0x4 (addr 0xffff7ab8c0a0)
0xffff7ab8c0a0   160  movz x17, #0xa00000000
0xffff7ab8c0a4   164  sub csp, jssp, #0x10 (16)
0xffff7ab8c0a8   168  stp x17, cp, [jssp, #-16]!
0xffff7ab8c0ac   172  add fp, jssp, #0x10 (16)
0xffff7ab8c0b0   176  ldr x17, pc+24 (addr 0x0000ffff7ab8c0c8)    ;; lazy deoptimization bailout 0
0xffff7ab8c0b4   180  add x17, x17, x16
0xffff7ab8c0b8   184  br x17
0xffff7ab8c0bc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab8c0c0   192  d63f03e0       constant
0xffff7ab8c0c4   196  d503201f       constant
0xffff7ab8c0c8   200  7a906000       constant
0xffff7ab8c0cc   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab8c030  code target (STUB)  (0xffff7ab170c0)
0xffff7ab8c068  code target (STUB)  (0xffff7ab38080)
0xffff7ab8c078  constant pool (size 24)
0xffff7ab8c0b0  runtime entry
0xffff7ab8c0bc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = loaded
compiler = unknown
Instructions (size = 152)
0xffff7ab8c140     0  sub csp, jssp, #0x8 (8)
0xffff7ab8c144     4  str x3, [jssp, #-8]!
0xffff7ab8c148     8  sub csp, jssp, #0x8 (8)
0xffff7ab8c14c    12  str x4, [jssp, #-8]!
0xffff7ab8c150    16  ldr x3, pc+88 (addr 0x0000ffff7ab8c1a8)    ;; object: 0x20dc7ba9 Cell for 0
0xffff7ab8c154    20  ldur x3, [x3, #7]
0xffff7ab8c158    24  cmp x3, #0x0 (0)
0xffff7ab8c15c    28  b.ne #+0x30 (addr 0xffff7ab8c18c)
0xffff7ab8c160    32  tbz w0, #0, #+0x2c (addr 0xffff7ab8c18c)
0xffff7ab8c164    36  ldr x5, pc+76 (addr 0x0000ffff7ab8c1b0)    ;; object: 0x20dc2299 WeakCell for 0x4ec1b3e1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab8c168    40  ldur x5, [x5, #7]
0xffff7ab8c16c    44  tbz w5, #0, #+0x20 (addr 0xffff7ab8c18c)
0xffff7ab8c170    48  ldursw x4, [x5, #15]
0xffff7ab8c174    52  tbnz w4, #23, #+0x18 (addr 0xffff7ab8c18c)
0xffff7ab8c178    56  ldr x4, [jssp], #8
0xffff7ab8c17c    60  ldr x3, [jssp], #8
0xffff7ab8c180    64  ldr x2, pc+56 (addr 0x0000ffff7ab8c1b8)    ;; object: 0x20dba9e1 <String[6]: loaded>
0xffff7ab8c184    68  ldr x16, pc+60 (addr 0x0000ffff7ab8c1c0)    ;; code: HANDLER, StoreTransitionStub, minor: 198662
0xffff7ab8c188    72  br x16
0xffff7ab8c18c    76  ldr x2, pc+60 (addr 0x0000ffff7ab8c1c8)    ;; object: 0x20dba9e1 <String[6]: loaded>
0xffff7ab8c190    80  ldr x4, [jssp], #8
0xffff7ab8c194    84  ldr x3, [jssp], #8
0xffff7ab8c198    88  ldr x16, pc+56 (addr 0x0000ffff7ab8c1d0)    ;; code: BUILTIN
0xffff7ab8c19c    92  br x16
0xffff7ab8c1a0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab8c1a4   100  d63f03e0       constant
0xffff7ab8c1a8   104  20dc7ba9       constant
0xffff7ab8c1ac   108  00000000       constant
0xffff7ab8c1b0   112  20dc2299       constant
0xffff7ab8c1b4   116  00000000       constant
0xffff7ab8c1b8   120  20dba9e1       constant
0xffff7ab8c1bc   124  00000000       constant
0xffff7ab8c1c0   128  7ab8c000       constant
0xffff7ab8c1c4   132  0000ffff       constant
0xffff7ab8c1c8   136  20dba9e1       constant
0xffff7ab8c1cc   140  00000000       constant
0xffff7ab8c1d0   144  7ab22420       constant
0xffff7ab8c1d4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7ab8c150  embedded object  (0x20dc7ba9 Cell for 0)
0xffff7ab8c164  embedded object  (0x20dc2299 WeakCell for 0x4ec1b3e1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab8c180  embedded object  (0x20dba9e1 <String[6]: loaded>)
0xffff7ab8c184  code target (HANDLER)  (0xffff7ab8c000)
0xffff7ab8c18c  embedded object  (0x20dba9e1 <String[6]: loaded>)
0xffff7ab8c198  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab8c1a0  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7ab8c240     0  tbz w0, #0, #+0x90 (addr 0xffff7ab8c2d0)
0xffff7ab8c244     4  mov x2, x0
0xffff7ab8c248     8  stur x2, [x1, #55]
0xffff7ab8c24c    12  add x3, x1, #0x37 (55)
0xffff7ab8c250    16  and x2, x2, #0xfffffffffff00000
0xffff7ab8c254    20  ldr x2, [x2, #8]
0xffff7ab8c258    24  tbz w2, #1, #+0x24 (addr 0xffff7ab8c27c)
0xffff7ab8c25c    28  and x2, x1, #0xfffffffffff00000
0xffff7ab8c260    32  ldr x2, [x2, #8]
0xffff7ab8c264    36  tbz w2, #2, #+0x18 (addr 0xffff7ab8c27c)
0xffff7ab8c268    40  sub csp, jssp, #0x8 (8)
0xffff7ab8c26c    44  str lr, [jssp, #-8]!
0xffff7ab8c270    48  ldr x16, pc+80 (addr 0x0000ffff7ab8c2c0)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab8c274    52  blr x16
0xffff7ab8c278    56  ldr lr, [jssp], #8
0xffff7ab8c27c    60  stur x5, [x1, #-1]
0xffff7ab8c280    64  tbz w5, #0, #+0x34 (addr 0xffff7ab8c2b4)
0xffff7ab8c284    68  sub x2, x1, #0x1 (1)
0xffff7ab8c288    72  and x5, x5, #0xfffffffffff00000
0xffff7ab8c28c    76  ldr x5, [x5, #8]
0xffff7ab8c290    80  tbz w5, #1, #+0x24 (addr 0xffff7ab8c2b4)
0xffff7ab8c294    84  and x5, x1, #0xfffffffffff00000
0xffff7ab8c298    88  ldr x5, [x5, #8]
0xffff7ab8c29c    92  tbz w5, #2, #+0x18 (addr 0xffff7ab8c2b4)
0xffff7ab8c2a0    96  sub csp, jssp, #0x8 (8)
0xffff7ab8c2a4   100  str lr, [jssp, #-8]!
0xffff7ab8c2a8   104  ldr x16, pc+32 (addr 0x0000ffff7ab8c2c8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab8c2ac   108  blr x16
0xffff7ab8c2b0   112  ldr lr, [jssp], #8
0xffff7ab8c2b4   116  ret
0xffff7ab8c2b8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab8c2bc   124  d63f03e0       constant
0xffff7ab8c2c0   128  7ab170c0       constant
0xffff7ab8c2c4   132  0000ffff       constant
0xffff7ab8c2c8   136  7ab38080       constant
0xffff7ab8c2cc   140  0000ffff       constant
0xffff7ab8c2d0   144  movz x16, #0x0
0xffff7ab8c2d4   148  sub csp, jssp, #0x10 (16)
0xffff7ab8c2d8   152  stp fp, lr, [jssp, #-16]!
0xffff7ab8c2dc   156  bl #+0x4 (addr 0xffff7ab8c2e0)
0xffff7ab8c2e0   160  movz x17, #0xa00000000
0xffff7ab8c2e4   164  sub csp, jssp, #0x10 (16)
0xffff7ab8c2e8   168  stp x17, cp, [jssp, #-16]!
0xffff7ab8c2ec   172  add fp, jssp, #0x10 (16)
0xffff7ab8c2f0   176  ldr x17, pc+24 (addr 0x0000ffff7ab8c308)    ;; lazy deoptimization bailout 0
0xffff7ab8c2f4   180  add x17, x17, x16
0xffff7ab8c2f8   184  br x17
0xffff7ab8c2fc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab8c300   192  d63f03e0       constant
0xffff7ab8c304   196  d503201f       constant
0xffff7ab8c308   200  7a906000       constant
0xffff7ab8c30c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab8c270  code target (STUB)  (0xffff7ab170c0)
0xffff7ab8c2a8  code target (STUB)  (0xffff7ab38080)
0xffff7ab8c2b8  constant pool (size 24)
0xffff7ab8c2f0  runtime entry
0xffff7ab8c2fc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7ab8c240     0  tbz w0, #0, #+0x90 (addr 0xffff7ab8c2d0)
0xffff7ab8c244     4  mov x2, x0
0xffff7ab8c248     8  stur x2, [x1, #55]
0xffff7ab8c24c    12  add x3, x1, #0x37 (55)
0xffff7ab8c250    16  and x2, x2, #0xfffffffffff00000
0xffff7ab8c254    20  ldr x2, [x2, #8]
0xffff7ab8c258    24  tbz w2, #1, #+0x24 (addr 0xffff7ab8c27c)
0xffff7ab8c25c    28  and x2, x1, #0xfffffffffff00000
0xffff7ab8c260    32  ldr x2, [x2, #8]
0xffff7ab8c264    36  tbz w2, #2, #+0x18 (addr 0xffff7ab8c27c)
0xffff7ab8c268    40  sub csp, jssp, #0x8 (8)
0xffff7ab8c26c    44  str lr, [jssp, #-8]!
0xffff7ab8c270    48  ldr x16, pc+80 (addr 0x0000ffff7ab8c2c0)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab8c274    52  blr x16
0xffff7ab8c278    56  ldr lr, [jssp], #8
0xffff7ab8c27c    60  stur x5, [x1, #-1]
0xffff7ab8c280    64  tbz w5, #0, #+0x34 (addr 0xffff7ab8c2b4)
0xffff7ab8c284    68  sub x2, x1, #0x1 (1)
0xffff7ab8c288    72  and x5, x5, #0xfffffffffff00000
0xffff7ab8c28c    76  ldr x5, [x5, #8]
0xffff7ab8c290    80  tbz w5, #1, #+0x24 (addr 0xffff7ab8c2b4)
0xffff7ab8c294    84  and x5, x1, #0xfffffffffff00000
0xffff7ab8c298    88  ldr x5, [x5, #8]
0xffff7ab8c29c    92  tbz w5, #2, #+0x18 (addr 0xffff7ab8c2b4)
0xffff7ab8c2a0    96  sub csp, jssp, #0x8 (8)
0xffff7ab8c2a4   100  str lr, [jssp, #-8]!
0xffff7ab8c2a8   104  ldr x16, pc+32 (addr 0x0000ffff7ab8c2c8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab8c2ac   108  blr x16
0xffff7ab8c2b0   112  ldr lr, [jssp], #8
0xffff7ab8c2b4   116  ret
0xffff7ab8c2b8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7ab8c2bc   124  d63f03e0       constant
0xffff7ab8c2c0   128  7ab170c0       constant
0xffff7ab8c2c4   132  0000ffff       constant
0xffff7ab8c2c8   136  7ab38080       constant
0xffff7ab8c2cc   140  0000ffff       constant
0xffff7ab8c2d0   144  movz x16, #0x0
0xffff7ab8c2d4   148  sub csp, jssp, #0x10 (16)
0xffff7ab8c2d8   152  stp fp, lr, [jssp, #-16]!
0xffff7ab8c2dc   156  bl #+0x4 (addr 0xffff7ab8c2e0)
0xffff7ab8c2e0   160  movz x17, #0xa00000000
0xffff7ab8c2e4   164  sub csp, jssp, #0x10 (16)
0xffff7ab8c2e8   168  stp x17, cp, [jssp, #-16]!
0xffff7ab8c2ec   172  add fp, jssp, #0x10 (16)
0xffff7ab8c2f0   176  ldr x17, pc+24 (addr 0x0000ffff7ab8c308)    ;; lazy deoptimization bailout 0
0xffff7ab8c2f4   180  add x17, x17, x16
0xffff7ab8c2f8   184  br x17
0xffff7ab8c2fc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab8c300   192  d63f03e0       constant
0xffff7ab8c304   196  d503201f       constant
0xffff7ab8c308   200  7a906000       constant
0xffff7ab8c30c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab8c270  code target (STUB)  (0xffff7ab170c0)
0xffff7ab8c2a8  code target (STUB)  (0xffff7ab38080)
0xffff7ab8c2b8  constant pool (size 24)
0xffff7ab8c2f0  runtime entry
0xffff7ab8c2fc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = loading
compiler = unknown
Instructions (size = 152)
0xffff7ab8c380     0  sub csp, jssp, #0x8 (8)
0xffff7ab8c384     4  str x3, [jssp, #-8]!
0xffff7ab8c388     8  sub csp, jssp, #0x8 (8)
0xffff7ab8c38c    12  str x4, [jssp, #-8]!
0xffff7ab8c390    16  ldr x3, pc+88 (addr 0x0000ffff7ab8c3e8)    ;; object: 0x20dc7ba9 Cell for 0
0xffff7ab8c394    20  ldur x3, [x3, #7]
0xffff7ab8c398    24  cmp x3, #0x0 (0)
0xffff7ab8c39c    28  b.ne #+0x30 (addr 0xffff7ab8c3cc)
0xffff7ab8c3a0    32  tbz w0, #0, #+0x2c (addr 0xffff7ab8c3cc)
0xffff7ab8c3a4    36  ldr x5, pc+76 (addr 0x0000ffff7ab8c3f0)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab8c3a8    40  ldur x5, [x5, #7]
0xffff7ab8c3ac    44  tbz w5, #0, #+0x20 (addr 0xffff7ab8c3cc)
0xffff7ab8c3b0    48  ldursw x4, [x5, #15]
0xffff7ab8c3b4    52  tbnz w4, #23, #+0x18 (addr 0xffff7ab8c3cc)
0xffff7ab8c3b8    56  ldr x4, [jssp], #8
0xffff7ab8c3bc    60  ldr x3, [jssp], #8
0xffff7ab8c3c0    64  ldr x2, pc+56 (addr 0x0000ffff7ab8c3f8)    ;; object: 0x20dbaa01 <String[7]: loading>
0xffff7ab8c3c4    68  ldr x16, pc+60 (addr 0x0000ffff7ab8c400)    ;; code: HANDLER, StoreTransitionStub, minor: 198663
0xffff7ab8c3c8    72  br x16
0xffff7ab8c3cc    76  ldr x2, pc+60 (addr 0x0000ffff7ab8c408)    ;; object: 0x20dbaa01 <String[7]: loading>
0xffff7ab8c3d0    80  ldr x4, [jssp], #8
0xffff7ab8c3d4    84  ldr x3, [jssp], #8
0xffff7ab8c3d8    88  ldr x16, pc+56 (addr 0x0000ffff7ab8c410)    ;; code: BUILTIN
0xffff7ab8c3dc    92  br x16
0xffff7ab8c3e0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab8c3e4   100  d63f03e0       constant
0xffff7ab8c3e8   104  20dc7ba9       constant
0xffff7ab8c3ec   108  00000000       constant
0xffff7ab8c3f0   112  20dc22b1       constant
0xffff7ab8c3f4   116  00000000       constant
0xffff7ab8c3f8   120  20dbaa01       constant
0xffff7ab8c3fc   124  00000000       constant
0xffff7ab8c400   128  7ab8c240       constant
0xffff7ab8c404   132  0000ffff       constant
0xffff7ab8c408   136  20dbaa01       constant
0xffff7ab8c40c   140  00000000       constant
0xffff7ab8c410   144  7ab22420       constant
0xffff7ab8c414   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7ab8c390  embedded object  (0x20dc7ba9 Cell for 0)
0xffff7ab8c3a4  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab8c3c0  embedded object  (0x20dbaa01 <String[7]: loading>)
0xffff7ab8c3c4  code target (HANDLER)  (0xffff7ab8c240)
0xffff7ab8c3cc  embedded object  (0x20dbaa01 <String[7]: loading>)
0xffff7ab8c3d8  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab8c3e0  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = cache
compiler = unknown
Instructions (size = 120)
0xffff7ab8c480     0  sub csp, jssp, #0x8 (8)
0xffff7ab8c484     4  str x3, [jssp, #-8]!
0xffff7ab8c488     8  sub csp, jssp, #0x8 (8)
0xffff7ab8c48c    12  str x0, [jssp, #-8]!
0xffff7ab8c490    16  ldr x0, pc+72 (addr 0x0000ffff7ab8c4d8)    ;; object: 0x20dc7ba9 Cell for 0
0xffff7ab8c494    20  ldur x0, [x0, #7]
0xffff7ab8c498    24  cmp x0, #0x0 (0)
0xffff7ab8c49c    28  b.ne #+0x14 (addr 0xffff7ab8c4b0)
0xffff7ab8c4a0    32  ldr x3, pc+64 (addr 0x0000ffff7ab8c4e0)    ;; object: 0x20dc8009 WeakCell for 0x56ea3531 <an Object with map 0x4ec1b229>
0xffff7ab8c4a4    36  ldur x3, [x3, #7]
0xffff7ab8c4a8    40  tbz w3, #0, #+0x8 (addr 0xffff7ab8c4b0)
0xffff7ab8c4ac    44  b #+0x14 (addr 0xffff7ab8c4c0)
0xffff7ab8c4b0    48  ldr x0, [jssp], #8
0xffff7ab8c4b4    52  ldr x3, [jssp], #8
0xffff7ab8c4b8    56  ldr x16, pc+48 (addr 0x0000ffff7ab8c4e8)    ;; code: BUILTIN
0xffff7ab8c4bc    60  br x16
0xffff7ab8c4c0    64  add jssp, jssp, #0x10 (16)
0xffff7ab8c4c4    68  mov x1, x3
0xffff7ab8c4c8    72  ldr x16, pc+40 (addr 0x0000ffff7ab8c4f0)    ;; code: HANDLER, LoadConstantStub, minor: 2
0xffff7ab8c4cc    76  br x16
0xffff7ab8c4d0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7ab8c4d4    84  d63f03e0       constant
0xffff7ab8c4d8    88  20dc7ba9       constant
0xffff7ab8c4dc    92  00000000       constant
0xffff7ab8c4e0    96  20dc8009       constant
0xffff7ab8c4e4   100  00000000       constant
0xffff7ab8c4e8   104  7ab222e0       constant
0xffff7ab8c4ec   108  0000ffff       constant
0xffff7ab8c4f0   112  7ab43380       constant
0xffff7ab8c4f4   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab8c490  embedded object  (0x20dc7ba9 Cell for 0)
0xffff7ab8c4a0  embedded object  (0x20dc8009 WeakCell for 0x56ea3531 <an Object with map 0x4ec1b229>)
0xffff7ab8c4b8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab8c4c8  code target (HANDLER)  (0xffff7ab43380)
0xffff7ab8c4d0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = util
compiler = unknown
Instructions (size = 184)
0xffff7ab8c560     0  sub csp, jssp, #0x8 (8)
0xffff7ab8c564     4  str x3, [jssp, #-8]!
0xffff7ab8c568     8  sub csp, jssp, #0x8 (8)
0xffff7ab8c56c    12  str x4, [jssp, #-8]!
0xffff7ab8c570    16  ldr x3, pc+112 (addr 0x0000ffff7ab8c5e0)    ;; object: 0x20d63e59 Cell for 0
0xffff7ab8c574    20  ldur x3, [x3, #7]
0xffff7ab8c578    24  cmp x3, #0x0 (0)
0xffff7ab8c57c    28  b.ne #+0x44 (addr 0xffff7ab8c5c0)
0xffff7ab8c580    32  tbz w0, #0, #+0x40 (addr 0xffff7ab8c5c0)
0xffff7ab8c584    36  ldur x3, [x0, #-1]
0xffff7ab8c588    40  ldr x4, pc+96 (addr 0x0000ffff7ab8c5e8)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab8c58c    44  ldur x4, [x4, #7]
0xffff7ab8c590    48  cmp x3, x4
0xffff7ab8c594    52  b.ne #+0x2c (addr 0xffff7ab8c5c0)
0xffff7ab8c598    56  ldr x5, pc+88 (addr 0x0000ffff7ab8c5f0)    ;; object: 0x20dc8071 WeakCell for 0x4ec1c1f9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab8c59c    60  ldur x5, [x5, #7]
0xffff7ab8c5a0    64  tbz w5, #0, #+0x20 (addr 0xffff7ab8c5c0)
0xffff7ab8c5a4    68  ldursw x4, [x5, #15]
0xffff7ab8c5a8    72  tbnz w4, #23, #+0x18 (addr 0xffff7ab8c5c0)
0xffff7ab8c5ac    76  ldr x4, [jssp], #8
0xffff7ab8c5b0    80  ldr x3, [jssp], #8
0xffff7ab8c5b4    84  ldr x2, pc+68 (addr 0x0000ffff7ab8c5f8)    ;; object: 0x20dba081 <String[4]: util>
0xffff7ab8c5b8    88  ldr x16, pc+72 (addr 0x0000ffff7ab8c600)    ;; code: HANDLER, StoreTransitionStub, minor: 198660
0xffff7ab8c5bc    92  br x16
0xffff7ab8c5c0    96  ldr x2, pc+72 (addr 0x0000ffff7ab8c608)    ;; object: 0x20dba081 <String[4]: util>
0xffff7ab8c5c4   100  ldr x4, [jssp], #8
0xffff7ab8c5c8   104  ldr x3, [jssp], #8
0xffff7ab8c5cc   108  ldr x16, pc+68 (addr 0x0000ffff7ab8c610)    ;; code: BUILTIN
0xffff7ab8c5d0   112  br x16
0xffff7ab8c5d4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab8c5d8   120  d63f03e0       constant
0xffff7ab8c5dc   124  d503201f       constant
0xffff7ab8c5e0   128  20d63e59       constant
0xffff7ab8c5e4   132  00000000       constant
0xffff7ab8c5e8   136  20dc22b1       constant
0xffff7ab8c5ec   140  00000000       constant
0xffff7ab8c5f0   144  20dc8071       constant
0xffff7ab8c5f4   148  00000000       constant
0xffff7ab8c5f8   152  20dba081       constant
0xffff7ab8c5fc   156  00000000       constant
0xffff7ab8c600   160  7ab8bb80       constant
0xffff7ab8c604   164  0000ffff       constant
0xffff7ab8c608   168  20dba081       constant
0xffff7ab8c60c   172  00000000       constant
0xffff7ab8c610   176  7ab22420       constant
0xffff7ab8c614   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7ab8c570  embedded object  (0x20d63e59 Cell for 0)
0xffff7ab8c588  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab8c598  embedded object  (0x20dc8071 WeakCell for 0x4ec1c1f9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab8c5b4  embedded object  (0x20dba081 <String[4]: util>)
0xffff7ab8c5b8  code target (HANDLER)  (0xffff7ab8bb80)
0xffff7ab8c5c0  embedded object  (0x20dba081 <String[4]: util>)
0xffff7ab8c5cc  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab8c5d4  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = compile
compiler = unknown
Instructions (size = 120)
0xffff7ab8c680     0  sub csp, jssp, #0x8 (8)
0xffff7ab8c684     4  str x3, [jssp, #-8]!
0xffff7ab8c688     8  sub csp, jssp, #0x8 (8)
0xffff7ab8c68c    12  str x0, [jssp, #-8]!
0xffff7ab8c690    16  ldr x0, pc+72 (addr 0x0000ffff7ab8c6d8)    ;; object: 0x20dc7ba9 Cell for 0
0xffff7ab8c694    20  ldur x0, [x0, #7]
0xffff7ab8c698    24  cmp x0, #0x0 (0)
0xffff7ab8c69c    28  b.ne #+0x14 (addr 0xffff7ab8c6b0)
0xffff7ab8c6a0    32  ldr x3, pc+64 (addr 0x0000ffff7ab8c6e0)    ;; object: 0x20dc80a9 WeakCell for 0x56ea3531 <an Object with map 0x4ec1b229>
0xffff7ab8c6a4    36  ldur x3, [x3, #7]
0xffff7ab8c6a8    40  tbz w3, #0, #+0x8 (addr 0xffff7ab8c6b0)
0xffff7ab8c6ac    44  b #+0x14 (addr 0xffff7ab8c6c0)
0xffff7ab8c6b0    48  ldr x0, [jssp], #8
0xffff7ab8c6b4    52  ldr x3, [jssp], #8
0xffff7ab8c6b8    56  ldr x16, pc+48 (addr 0x0000ffff7ab8c6e8)    ;; code: BUILTIN
0xffff7ab8c6bc    60  br x16
0xffff7ab8c6c0    64  add jssp, jssp, #0x10 (16)
0xffff7ab8c6c4    68  mov x1, x3
0xffff7ab8c6c8    72  ldr x16, pc+40 (addr 0x0000ffff7ab8c6f0)    ;; code: HANDLER, LoadConstantStub, minor: 1
0xffff7ab8c6cc    76  br x16
0xffff7ab8c6d0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7ab8c6d4    84  d63f03e0       constant
0xffff7ab8c6d8    88  20dc7ba9       constant
0xffff7ab8c6dc    92  00000000       constant
0xffff7ab8c6e0    96  20dc80a9       constant
0xffff7ab8c6e4   100  00000000       constant
0xffff7ab8c6e8   104  7ab222e0       constant
0xffff7ab8c6ec   108  0000ffff       constant
0xffff7ab8c6f0   112  7ab43300       constant
0xffff7ab8c6f4   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab8c690  embedded object  (0x20dc7ba9 Cell for 0)
0xffff7ab8c6a0  embedded object  (0x20dc80a9 WeakCell for 0x56ea3531 <an Object with map 0x4ec1b229>)
0xffff7ab8c6b8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab8c6c8  code target (HANDLER)  (0xffff7ab43300)
0xffff7ab8c6d0  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab8c760     0  ldur x0, [x1, #-1]
0xffff7ab8c764     4  ldur x0, [x0, #47]
0xffff7ab8c768     8  movz x16, #0x11f
0xffff7ab8c76c    12  ldr x0, [x0, x16]
0xffff7ab8c770    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab8c760     0  ldur x0, [x1, #-1]
0xffff7ab8c764     4  ldur x0, [x0, #47]
0xffff7ab8c768     8  movz x16, #0x11f
0xffff7ab8c76c    12  ldr x0, [x0, x16]
0xffff7ab8c770    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab8c7e0     0  ldur x0, [x1, #-1]
0xffff7ab8c7e4     4  ldur x0, [x0, #47]
0xffff7ab8c7e8     8  movz x16, #0x137
0xffff7ab8c7ec    12  ldr x0, [x0, x16]
0xffff7ab8c7f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7ab8c7e0     0  ldur x0, [x1, #-1]
0xffff7ab8c7e4     4  ldur x0, [x0, #47]
0xffff7ab8c7e8     8  movz x16, #0x137
0xffff7ab8c7ec    12  ldr x0, [x0, x16]
0xffff7ab8c7f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0xffff7ab8c860     0  tbz w0, #0, #+0x50 (addr 0xffff7ab8c8b0)
0xffff7ab8c864     4  mov x2, x0
0xffff7ab8c868     8  stur x2, [x1, #55]
0xffff7ab8c86c    12  add x3, x1, #0x37 (55)
0xffff7ab8c870    16  and x2, x2, #0xfffffffffff00000
0xffff7ab8c874    20  ldr x2, [x2, #8]
0xffff7ab8c878    24  tbz w2, #1, #+0x24 (addr 0xffff7ab8c89c)
0xffff7ab8c87c    28  and x2, x1, #0xfffffffffff00000
0xffff7ab8c880    32  ldr x2, [x2, #8]
0xffff7ab8c884    36  tbz w2, #2, #+0x18 (addr 0xffff7ab8c89c)
0xffff7ab8c888    40  sub csp, jssp, #0x8 (8)
0xffff7ab8c88c    44  str lr, [jssp, #-8]!
0xffff7ab8c890    48  ldr x16, pc+24 (addr 0x0000ffff7ab8c8a8)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab8c894    52  blr x16
0xffff7ab8c898    56  ldr lr, [jssp], #8
0xffff7ab8c89c    60  ret
0xffff7ab8c8a0    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab8c8a4    68  d63f03e0       constant
0xffff7ab8c8a8    72  7ab170c0       constant
0xffff7ab8c8ac    76  0000ffff       constant
0xffff7ab8c8b0    80  movz x16, #0x0
0xffff7ab8c8b4    84  sub csp, jssp, #0x10 (16)
0xffff7ab8c8b8    88  stp fp, lr, [jssp, #-16]!
0xffff7ab8c8bc    92  bl #+0x4 (addr 0xffff7ab8c8c0)
0xffff7ab8c8c0    96  movz x17, #0xa00000000
0xffff7ab8c8c4   100  sub csp, jssp, #0x10 (16)
0xffff7ab8c8c8   104  stp x17, cp, [jssp, #-16]!
0xffff7ab8c8cc   108  add fp, jssp, #0x10 (16)
0xffff7ab8c8d0   112  ldr x17, pc+24 (addr 0x0000ffff7ab8c8e8)    ;; lazy deoptimization bailout 0
0xffff7ab8c8d4   116  add x17, x17, x16
0xffff7ab8c8d8   120  br x17
0xffff7ab8c8dc   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab8c8e0   128  d63f03e0       constant
0xffff7ab8c8e4   132  d503201f       constant
0xffff7ab8c8e8   136  7a906000       constant
0xffff7ab8c8ec   140  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7ab8c890  code target (STUB)  (0xffff7ab170c0)
0xffff7ab8c8a0  constant pool (size 16)
0xffff7ab8c8d0  runtime entry
0xffff7ab8c8dc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0xffff7ab8c860     0  tbz w0, #0, #+0x50 (addr 0xffff7ab8c8b0)
0xffff7ab8c864     4  mov x2, x0
0xffff7ab8c868     8  stur x2, [x1, #55]
0xffff7ab8c86c    12  add x3, x1, #0x37 (55)
0xffff7ab8c870    16  and x2, x2, #0xfffffffffff00000
0xffff7ab8c874    20  ldr x2, [x2, #8]
0xffff7ab8c878    24  tbz w2, #1, #+0x24 (addr 0xffff7ab8c89c)
0xffff7ab8c87c    28  and x2, x1, #0xfffffffffff00000
0xffff7ab8c880    32  ldr x2, [x2, #8]
0xffff7ab8c884    36  tbz w2, #2, #+0x18 (addr 0xffff7ab8c89c)
0xffff7ab8c888    40  sub csp, jssp, #0x8 (8)
0xffff7ab8c88c    44  str lr, [jssp, #-8]!
0xffff7ab8c890    48  ldr x16, pc+24 (addr 0x0000ffff7ab8c8a8)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab8c894    52  blr x16
0xffff7ab8c898    56  ldr lr, [jssp], #8
0xffff7ab8c89c    60  ret
0xffff7ab8c8a0    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab8c8a4    68  d63f03e0       constant
0xffff7ab8c8a8    72  7ab170c0       constant
0xffff7ab8c8ac    76  0000ffff       constant
0xffff7ab8c8b0    80  movz x16, #0x0
0xffff7ab8c8b4    84  sub csp, jssp, #0x10 (16)
0xffff7ab8c8b8    88  stp fp, lr, [jssp, #-16]!
0xffff7ab8c8bc    92  bl #+0x4 (addr 0xffff7ab8c8c0)
0xffff7ab8c8c0    96  movz x17, #0xa00000000
0xffff7ab8c8c4   100  sub csp, jssp, #0x10 (16)
0xffff7ab8c8c8   104  stp x17, cp, [jssp, #-16]!
0xffff7ab8c8cc   108  add fp, jssp, #0x10 (16)
0xffff7ab8c8d0   112  ldr x17, pc+24 (addr 0x0000ffff7ab8c8e8)    ;; lazy deoptimization bailout 0
0xffff7ab8c8d4   116  add x17, x17, x16
0xffff7ab8c8d8   120  br x17
0xffff7ab8c8dc   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab8c8e0   128  d63f03e0       constant
0xffff7ab8c8e4   132  d503201f       constant
0xffff7ab8c8e8   136  7a906000       constant
0xffff7ab8c8ec   140  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7ab8c890  code target (STUB)  (0xffff7ab170c0)
0xffff7ab8c8a0  constant pool (size 16)
0xffff7ab8c8d0  runtime entry
0xffff7ab8c8dc  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0xffff7ab8c960     0  tbz w0, #0, #+0x50 (addr 0xffff7ab8c9b0)
0xffff7ab8c964     4  mov x2, x0
0xffff7ab8c968     8  stur x2, [x1, #23]
0xffff7ab8c96c    12  add x3, x1, #0x17 (23)
0xffff7ab8c970    16  and x2, x2, #0xfffffffffff00000
0xffff7ab8c974    20  ldr x2, [x2, #8]
0xffff7ab8c978    24  tbz w2, #1, #+0x24 (addr 0xffff7ab8c99c)
0xffff7ab8c97c    28  and x2, x1, #0xfffffffffff00000
0xffff7ab8c980    32  ldr x2, [x2, #8]
0xffff7ab8c984    36  tbz w2, #2, #+0x18 (addr 0xffff7ab8c99c)
0xffff7ab8c988    40  sub csp, jssp, #0x8 (8)
0xffff7ab8c98c    44  str lr, [jssp, #-8]!
0xffff7ab8c990    48  ldr x16, pc+24 (addr 0x0000ffff7ab8c9a8)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab8c994    52  blr x16
0xffff7ab8c998    56  ldr lr, [jssp], #8
0xffff7ab8c99c    60  ret
0xffff7ab8c9a0    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab8c9a4    68  d63f03e0       constant
0xffff7ab8c9a8    72  7ab170c0       constant
0xffff7ab8c9ac    76  0000ffff       constant
0xffff7ab8c9b0    80  movz x16, #0x0
0xffff7ab8c9b4    84  sub csp, jssp, #0x10 (16)
0xffff7ab8c9b8    88  stp fp, lr, [jssp, #-16]!
0xffff7ab8c9bc    92  bl #+0x4 (addr 0xffff7ab8c9c0)
0xffff7ab8c9c0    96  movz x17, #0xa00000000
0xffff7ab8c9c4   100  sub csp, jssp, #0x10 (16)
0xffff7ab8c9c8   104  stp x17, cp, [jssp, #-16]!
0xffff7ab8c9cc   108  add fp, jssp, #0x10 (16)
0xffff7ab8c9d0   112  ldr x17, pc+24 (addr 0x0000ffff7ab8c9e8)    ;; lazy deoptimization bailout 0
0xffff7ab8c9d4   116  add x17, x17, x16
0xffff7ab8c9d8   120  br x17
0xffff7ab8c9dc   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab8c9e0   128  d63f03e0       constant
0xffff7ab8c9e4   132  d503201f       constant
0xffff7ab8c9e8   136  7a906000       constant
0xffff7ab8c9ec   140  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7ab8c990  code target (STUB)  (0xffff7ab170c0)
0xffff7ab8c9a0  constant pool (size 16)
0xffff7ab8c9d0  runtime entry
0xffff7ab8c9dc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0xffff7ab8c960     0  tbz w0, #0, #+0x50 (addr 0xffff7ab8c9b0)
0xffff7ab8c964     4  mov x2, x0
0xffff7ab8c968     8  stur x2, [x1, #23]
0xffff7ab8c96c    12  add x3, x1, #0x17 (23)
0xffff7ab8c970    16  and x2, x2, #0xfffffffffff00000
0xffff7ab8c974    20  ldr x2, [x2, #8]
0xffff7ab8c978    24  tbz w2, #1, #+0x24 (addr 0xffff7ab8c99c)
0xffff7ab8c97c    28  and x2, x1, #0xfffffffffff00000
0xffff7ab8c980    32  ldr x2, [x2, #8]
0xffff7ab8c984    36  tbz w2, #2, #+0x18 (addr 0xffff7ab8c99c)
0xffff7ab8c988    40  sub csp, jssp, #0x8 (8)
0xffff7ab8c98c    44  str lr, [jssp, #-8]!
0xffff7ab8c990    48  ldr x16, pc+24 (addr 0x0000ffff7ab8c9a8)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab8c994    52  blr x16
0xffff7ab8c998    56  ldr lr, [jssp], #8
0xffff7ab8c99c    60  ret
0xffff7ab8c9a0    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab8c9a4    68  d63f03e0       constant
0xffff7ab8c9a8    72  7ab170c0       constant
0xffff7ab8c9ac    76  0000ffff       constant
0xffff7ab8c9b0    80  movz x16, #0x0
0xffff7ab8c9b4    84  sub csp, jssp, #0x10 (16)
0xffff7ab8c9b8    88  stp fp, lr, [jssp, #-16]!
0xffff7ab8c9bc    92  bl #+0x4 (addr 0xffff7ab8c9c0)
0xffff7ab8c9c0    96  movz x17, #0xa00000000
0xffff7ab8c9c4   100  sub csp, jssp, #0x10 (16)
0xffff7ab8c9c8   104  stp x17, cp, [jssp, #-16]!
0xffff7ab8c9cc   108  add fp, jssp, #0x10 (16)
0xffff7ab8c9d0   112  ldr x17, pc+24 (addr 0x0000ffff7ab8c9e8)    ;; lazy deoptimization bailout 0
0xffff7ab8c9d4   116  add x17, x17, x16
0xffff7ab8c9d8   120  br x17
0xffff7ab8c9dc   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab8c9e0   128  d63f03e0       constant
0xffff7ab8c9e4   132  d503201f       constant
0xffff7ab8c9e8   136  7a906000       constant
0xffff7ab8c9ec   140  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7ab8c990  code target (STUB)  (0xffff7ab170c0)
0xffff7ab8c9a0  constant pool (size 16)
0xffff7ab8c9d0  runtime entry
0xffff7ab8c9dc  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 941)
0xffff7ab8ca60     0  movz x2, #0xe2c0
0xffff7ab8ca64     4  movk x2, #0x9ab, lsl #16
0xffff7ab8ca68     8  ldp x3, x0, [x2]
0xffff7ab8ca6c    12  adds x16, x3, #0x170 (368)
0xffff7ab8ca70    16  ccmp x16, x0, #nzCv, lo
0xffff7ab8ca74    20  b.hi #+0x1b0 (addr 0xffff7ab8cc24)
0xffff7ab8ca78    24  str x16, [x2]
0xffff7ab8ca7c    28  orr x3, x3, #0x1
0xffff7ab8ca80    32  ldr x0, pc+528 (addr 0x0000ffff7ab8cc90)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab8ca84    36  stur x0, [x3, #-1]
0xffff7ab8ca88    40  movz x0, #0x2c00000000
0xffff7ab8ca8c    44  stur x0, [x3, #7]
0xffff7ab8ca90    48  stur x1, [x3, #15]
0xffff7ab8ca94    52  stur cp, [x3, #23]
0xffff7ab8ca98    56  ldr x0, pc+512 (addr 0x0000ffff7ab8cc98)    ;; object: 0x20d04519 <the hole>
0xffff7ab8ca9c    60  stur x0, [x3, #31]
0xffff7ab8caa0    64  ldur x0, [cp, #39]
0xffff7ab8caa4    68  stur x0, [x3, #39]
0xffff7ab8caa8    72  ldr x0, pc+504 (addr 0x0000ffff7ab8cca0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8caac    76  stur x0, [x3, #47]
0xffff7ab8cab0    80  ldr x0, pc+504 (addr 0x0000ffff7ab8cca8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cab4    84  stur x0, [x3, #55]
0xffff7ab8cab8    88  ldr x0, pc+504 (addr 0x0000ffff7ab8ccb0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cabc    92  stur x0, [x3, #63]
0xffff7ab8cac0    96  ldr x0, pc+504 (addr 0x0000ffff7ab8ccb8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cac4   100  stur x0, [x3, #71]
0xffff7ab8cac8   104  ldr x0, pc+504 (addr 0x0000ffff7ab8ccc0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cacc   108  stur x0, [x3, #79]
0xffff7ab8cad0   112  ldr x0, pc+504 (addr 0x0000ffff7ab8ccc8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cad4   116  stur x0, [x3, #87]
0xffff7ab8cad8   120  ldr x0, pc+504 (addr 0x0000ffff7ab8ccd0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cadc   124  stur x0, [x3, #95]
0xffff7ab8cae0   128  ldr x0, pc+504 (addr 0x0000ffff7ab8ccd8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cae4   132  stur x0, [x3, #103]
0xffff7ab8cae8   136  ldr x0, pc+504 (addr 0x0000ffff7ab8cce0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8caec   140  stur x0, [x3, #111]
0xffff7ab8caf0   144  ldr x0, pc+504 (addr 0x0000ffff7ab8cce8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8caf4   148  stur x0, [x3, #119]
0xffff7ab8caf8   152  ldr x0, pc+504 (addr 0x0000ffff7ab8ccf0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cafc   156  stur x0, [x3, #127]
0xffff7ab8cb00   160  ldr x0, pc+504 (addr 0x0000ffff7ab8ccf8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb04   164  stur x0, [x3, #135]
0xffff7ab8cb08   168  ldr x0, pc+504 (addr 0x0000ffff7ab8cd00)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb0c   172  stur x0, [x3, #143]
0xffff7ab8cb10   176  ldr x0, pc+504 (addr 0x0000ffff7ab8cd08)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb14   180  stur x0, [x3, #151]
0xffff7ab8cb18   184  ldr x0, pc+504 (addr 0x0000ffff7ab8cd10)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb1c   188  stur x0, [x3, #159]
0xffff7ab8cb20   192  ldr x0, pc+504 (addr 0x0000ffff7ab8cd18)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb24   196  stur x0, [x3, #167]
0xffff7ab8cb28   200  ldr x0, pc+504 (addr 0x0000ffff7ab8cd20)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb2c   204  stur x0, [x3, #175]
0xffff7ab8cb30   208  ldr x0, pc+504 (addr 0x0000ffff7ab8cd28)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb34   212  stur x0, [x3, #183]
0xffff7ab8cb38   216  ldr x0, pc+504 (addr 0x0000ffff7ab8cd30)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb3c   220  stur x0, [x3, #191]
0xffff7ab8cb40   224  ldr x0, pc+504 (addr 0x0000ffff7ab8cd38)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb44   228  stur x0, [x3, #199]
0xffff7ab8cb48   232  ldr x0, pc+504 (addr 0x0000ffff7ab8cd40)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb4c   236  stur x0, [x3, #207]
0xffff7ab8cb50   240  ldr x0, pc+504 (addr 0x0000ffff7ab8cd48)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb54   244  stur x0, [x3, #215]
0xffff7ab8cb58   248  ldr x0, pc+504 (addr 0x0000ffff7ab8cd50)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb5c   252  stur x0, [x3, #223]
0xffff7ab8cb60   256  ldr x0, pc+504 (addr 0x0000ffff7ab8cd58)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb64   260  stur x0, [x3, #231]
0xffff7ab8cb68   264  ldr x0, pc+504 (addr 0x0000ffff7ab8cd60)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb6c   268  stur x0, [x3, #239]
0xffff7ab8cb70   272  ldr x0, pc+504 (addr 0x0000ffff7ab8cd68)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb74   276  stur x0, [x3, #247]
0xffff7ab8cb78   280  ldr x0, pc+504 (addr 0x0000ffff7ab8cd70)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb7c   284  stur x0, [x3, #255]
0xffff7ab8cb80   288  ldr x0, pc+504 (addr 0x0000ffff7ab8cd78)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb84   292  movz x16, #0x107
0xffff7ab8cb88   296  str x0, [x3, x16]
0xffff7ab8cb8c   300  ldr x0, pc+500 (addr 0x0000ffff7ab8cd80)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb90   304  movz x16, #0x10f
0xffff7ab8cb94   308  str x0, [x3, x16]
0xffff7ab8cb98   312  ldr x0, pc+496 (addr 0x0000ffff7ab8cd88)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb9c   316  movz x16, #0x117
0xffff7ab8cba0   320  str x0, [x3, x16]
0xffff7ab8cba4   324  ldr x0, pc+492 (addr 0x0000ffff7ab8cd90)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cba8   328  movz x16, #0x11f
0xffff7ab8cbac   332  str x0, [x3, x16]
0xffff7ab8cbb0   336  ldr x0, pc+488 (addr 0x0000ffff7ab8cd98)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cbb4   340  movz x16, #0x127
0xffff7ab8cbb8   344  str x0, [x3, x16]
0xffff7ab8cbbc   348  ldr x0, pc+484 (addr 0x0000ffff7ab8cda0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cbc0   352  movz x16, #0x12f
0xffff7ab8cbc4   356  str x0, [x3, x16]
0xffff7ab8cbc8   360  ldr x0, pc+480 (addr 0x0000ffff7ab8cda8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cbcc   364  movz x16, #0x137
0xffff7ab8cbd0   368  str x0, [x3, x16]
0xffff7ab8cbd4   372  ldr x0, pc+476 (addr 0x0000ffff7ab8cdb0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cbd8   376  movz x16, #0x13f
0xffff7ab8cbdc   380  str x0, [x3, x16]
0xffff7ab8cbe0   384  ldr x0, pc+472 (addr 0x0000ffff7ab8cdb8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cbe4   388  movz x16, #0x147
0xffff7ab8cbe8   392  str x0, [x3, x16]
0xffff7ab8cbec   396  ldr x0, pc+468 (addr 0x0000ffff7ab8cdc0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cbf0   400  movz x16, #0x14f
0xffff7ab8cbf4   404  str x0, [x3, x16]
0xffff7ab8cbf8   408  ldr x0, pc+464 (addr 0x0000ffff7ab8cdc8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cbfc   412  movz x16, #0x157
0xffff7ab8cc00   416  str x0, [x3, x16]
0xffff7ab8cc04   420  ldr x0, pc+460 (addr 0x0000ffff7ab8cdd0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cc08   424  movz x16, #0x15f
0xffff7ab8cc0c   428  str x0, [x3, x16]
0xffff7ab8cc10   432  ldr x0, pc+456 (addr 0x0000ffff7ab8cdd8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cc14   436  movz x16, #0x167
0xffff7ab8cc18   440  str x0, [x3, x16]
0xffff7ab8cc1c   444  mov x0, x3
0xffff7ab8cc20   448  ret
0xffff7ab8cc24   452  sub csp, jssp, #0x10 (16)
0xffff7ab8cc28   456  stp fp, lr, [jssp, #-16]!
0xffff7ab8cc2c   460  movz fp, #0xa00000000
0xffff7ab8cc30   464  sub csp, jssp, #0x8 (8)
0xffff7ab8cc34   468  str fp, [jssp, #-8]!
0xffff7ab8cc38   472  add fp, jssp, #0x8 (8)
0xffff7ab8cc3c   476  movz x3, #0x0
0xffff7ab8cc40   480  mov x16, lr
0xffff7ab8cc44   484  ldr x17, pc+412 (addr 0x0000ffff7ab8cde0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab8cc48   488  blr x17
0xffff7ab8cc4c   492  movz x0, #0x17000000000
0xffff7ab8cc50   496  movz x10, #0x0
0xffff7ab8cc54   500  sub csp, jssp, #0x10 (16)
0xffff7ab8cc58   504  stp x10, x0, [jssp, #-16]!
0xffff7ab8cc5c   508  movz x0, #0x2
0xffff7ab8cc60   512  movz x1, #0x5b88
0xffff7ab8cc64   516  movk x1, #0xe2, lsl #16
0xffff7ab8cc68   520  ldr x16, pc+384 (addr 0x0000ffff7ab8cde8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab8cc6c   524  blr x16
0xffff7ab8cc70   528  str x0, [jssp, #24]
0xffff7ab8cc74   532  ldr x16, pc+380 (addr 0x0000ffff7ab8cdf0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab8cc78   536  blr x16
0xffff7ab8cc7c   540  ldr lr, [jssp, #16]
0xffff7ab8cc80   544  ldp xzr, fp, [jssp], #24
0xffff7ab8cc84   548  b #-0x204 (addr 0xffff7ab8ca80)
0xffff7ab8cc88   552  58000b7f       constant pool begin (num_const = 91)    ;; constant pool
0xffff7ab8cc8c   556  d63f03e0       constant
0xffff7ab8cc90   560  4ec06149       constant
0xffff7ab8cc94   564  00000000       constant
0xffff7ab8cc98   568  20d04519       constant
0xffff7ab8cc9c   572  00000000       constant
0xffff7ab8cca0   576  20d04241       constant
0xffff7ab8cca4   580  00000000       constant
0xffff7ab8cca8   584  20d04241       constant
0xffff7ab8ccac   588  00000000       constant
0xffff7ab8ccb0   592  20d04241       constant
0xffff7ab8ccb4   596  00000000       constant
0xffff7ab8ccb8   600  20d04241       constant
0xffff7ab8ccbc   604  00000000       constant
0xffff7ab8ccc0   608  20d04241       constant
0xffff7ab8ccc4   612  00000000       constant
0xffff7ab8ccc8   616  20d04241       constant
0xffff7ab8cccc   620  00000000       constant
0xffff7ab8ccd0   624  20d04241       constant
0xffff7ab8ccd4   628  00000000       constant
0xffff7ab8ccd8   632  20d04241       constant
0xffff7ab8ccdc   636  00000000       constant
0xffff7ab8cce0   640  20d04241       constant
0xffff7ab8cce4   644  00000000       constant
0xffff7ab8cce8   648  20d04241       constant
0xffff7ab8ccec   652  00000000       constant
0xffff7ab8ccf0   656  20d04241       constant
0xffff7ab8ccf4   660  00000000       constant
0xffff7ab8ccf8   664  20d04241       constant
0xffff7ab8ccfc   668  00000000       constant
0xffff7ab8cd00   672  20d04241       constant
0xffff7ab8cd04   676  00000000       constant
0xffff7ab8cd08   680  20d04241       constant
0xffff7ab8cd0c   684  00000000       constant
0xffff7ab8cd10   688  20d04241       constant
0xffff7ab8cd14   692  00000000       constant
0xffff7ab8cd18   696  20d04241       constant
0xffff7ab8cd1c   700  00000000       constant
0xffff7ab8cd20   704  20d04241       constant
0xffff7ab8cd24   708  00000000       constant
0xffff7ab8cd28   712  20d04241       constant
0xffff7ab8cd2c   716  00000000       constant
0xffff7ab8cd30   720  20d04241       constant
0xffff7ab8cd34   724  00000000       constant
0xffff7ab8cd38   728  20d04241       constant
0xffff7ab8cd3c   732  00000000       constant
0xffff7ab8cd40   736  20d04241       constant
0xffff7ab8cd44   740  00000000       constant
0xffff7ab8cd48   744  20d04241       constant
0xffff7ab8cd4c   748  00000000       constant
0xffff7ab8cd50   752  20d04241       constant
0xffff7ab8cd54   756  00000000       constant
0xffff7ab8cd58   760  20d04241       constant
0xffff7ab8cd5c   764  00000000       constant
0xffff7ab8cd60   768  20d04241       constant
0xffff7ab8cd64   772  00000000       constant
0xffff7ab8cd68   776  20d04241       constant
0xffff7ab8cd6c   780  00000000       constant
0xffff7ab8cd70   784  20d04241       constant
0xffff7ab8cd74   788  00000000       constant
0xffff7ab8cd78   792  20d04241       constant
0xffff7ab8cd7c   796  00000000       constant
0xffff7ab8cd80   800  20d04241       constant
0xffff7ab8cd84   804  00000000       constant
0xffff7ab8cd88   808  20d04241       constant
0xffff7ab8cd8c   812  00000000       constant
0xffff7ab8cd90   816  20d04241       constant
0xffff7ab8cd94   820  00000000       constant
0xffff7ab8cd98   824  20d04241       constant
0xffff7ab8cd9c   828  00000000       constant
0xffff7ab8cda0   832  20d04241       constant
0xffff7ab8cda4   836  00000000       constant
0xffff7ab8cda8   840  20d04241       constant
0xffff7ab8cdac   844  00000000       constant
0xffff7ab8cdb0   848  20d04241       constant
0xffff7ab8cdb4   852  00000000       constant
0xffff7ab8cdb8   856  20d04241       constant
0xffff7ab8cdbc   860  00000000       constant
0xffff7ab8cdc0   864  20d04241       constant
0xffff7ab8cdc4   868  00000000       constant
0xffff7ab8cdc8   872  20d04241       constant
0xffff7ab8cdcc   876  00000000       constant
0xffff7ab8cdd0   880  20d04241       constant
0xffff7ab8cdd4   884  00000000       constant
0xffff7ab8cdd8   888  20d04241       constant
0xffff7ab8cddc   892  00000000       constant
0xffff7ab8cde0   896  7ab06820       constant
0xffff7ab8cde4   900  0000ffff       constant
0xffff7ab8cde8   904  7ab06260       constant
0xffff7ab8cdec   908  0000ffff       constant
0xffff7ab8cdf0   912  7ab068e0       constant
0xffff7ab8cdf4   916  0000ffff       constant


Safepoints (size = 21)
0xffff7ab8cc70   528  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 51)
0xffff7ab8ca80  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab8ca98  embedded object  (0x20d04519 <the hole>)
0xffff7ab8caa8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cab0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cab8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cac0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cac8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cad0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cad8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cae0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cae8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8caf0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8caf8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb00  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb08  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb10  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb18  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb20  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb28  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb30  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb38  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb40  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb48  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb50  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb58  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb60  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb68  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb70  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb78  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb80  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb8c  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb98  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cba4  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cbb0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cbbc  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cbc8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cbd4  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cbe0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cbec  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cbf8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cc04  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cc10  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cc44  code target (STUB)  (0xffff7ab06820)
0xffff7ab8cc68  code target (STUB)  (0xffff7ab06260)
0xffff7ab8cc74  code target (STUB)  (0xffff7ab068e0)
0xffff7ab8cc88  constant pool (size 368)

--- End code ---
kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 941)
0xffff7ab8ca60     0  movz x2, #0xe2c0
0xffff7ab8ca64     4  movk x2, #0x9ab, lsl #16
0xffff7ab8ca68     8  ldp x3, x0, [x2]
0xffff7ab8ca6c    12  adds x16, x3, #0x170 (368)
0xffff7ab8ca70    16  ccmp x16, x0, #nzCv, lo
0xffff7ab8ca74    20  b.hi #+0x1b0 (addr 0xffff7ab8cc24)
0xffff7ab8ca78    24  str x16, [x2]
0xffff7ab8ca7c    28  orr x3, x3, #0x1
0xffff7ab8ca80    32  ldr x0, pc+528 (addr 0x0000ffff7ab8cc90)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab8ca84    36  stur x0, [x3, #-1]
0xffff7ab8ca88    40  movz x0, #0x2c00000000
0xffff7ab8ca8c    44  stur x0, [x3, #7]
0xffff7ab8ca90    48  stur x1, [x3, #15]
0xffff7ab8ca94    52  stur cp, [x3, #23]
0xffff7ab8ca98    56  ldr x0, pc+512 (addr 0x0000ffff7ab8cc98)    ;; object: 0x20d04519 <the hole>
0xffff7ab8ca9c    60  stur x0, [x3, #31]
0xffff7ab8caa0    64  ldur x0, [cp, #39]
0xffff7ab8caa4    68  stur x0, [x3, #39]
0xffff7ab8caa8    72  ldr x0, pc+504 (addr 0x0000ffff7ab8cca0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8caac    76  stur x0, [x3, #47]
0xffff7ab8cab0    80  ldr x0, pc+504 (addr 0x0000ffff7ab8cca8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cab4    84  stur x0, [x3, #55]
0xffff7ab8cab8    88  ldr x0, pc+504 (addr 0x0000ffff7ab8ccb0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cabc    92  stur x0, [x3, #63]
0xffff7ab8cac0    96  ldr x0, pc+504 (addr 0x0000ffff7ab8ccb8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cac4   100  stur x0, [x3, #71]
0xffff7ab8cac8   104  ldr x0, pc+504 (addr 0x0000ffff7ab8ccc0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cacc   108  stur x0, [x3, #79]
0xffff7ab8cad0   112  ldr x0, pc+504 (addr 0x0000ffff7ab8ccc8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cad4   116  stur x0, [x3, #87]
0xffff7ab8cad8   120  ldr x0, pc+504 (addr 0x0000ffff7ab8ccd0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cadc   124  stur x0, [x3, #95]
0xffff7ab8cae0   128  ldr x0, pc+504 (addr 0x0000ffff7ab8ccd8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cae4   132  stur x0, [x3, #103]
0xffff7ab8cae8   136  ldr x0, pc+504 (addr 0x0000ffff7ab8cce0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8caec   140  stur x0, [x3, #111]
0xffff7ab8caf0   144  ldr x0, pc+504 (addr 0x0000ffff7ab8cce8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8caf4   148  stur x0, [x3, #119]
0xffff7ab8caf8   152  ldr x0, pc+504 (addr 0x0000ffff7ab8ccf0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cafc   156  stur x0, [x3, #127]
0xffff7ab8cb00   160  ldr x0, pc+504 (addr 0x0000ffff7ab8ccf8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb04   164  stur x0, [x3, #135]
0xffff7ab8cb08   168  ldr x0, pc+504 (addr 0x0000ffff7ab8cd00)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb0c   172  stur x0, [x3, #143]
0xffff7ab8cb10   176  ldr x0, pc+504 (addr 0x0000ffff7ab8cd08)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb14   180  stur x0, [x3, #151]
0xffff7ab8cb18   184  ldr x0, pc+504 (addr 0x0000ffff7ab8cd10)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb1c   188  stur x0, [x3, #159]
0xffff7ab8cb20   192  ldr x0, pc+504 (addr 0x0000ffff7ab8cd18)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb24   196  stur x0, [x3, #167]
0xffff7ab8cb28   200  ldr x0, pc+504 (addr 0x0000ffff7ab8cd20)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb2c   204  stur x0, [x3, #175]
0xffff7ab8cb30   208  ldr x0, pc+504 (addr 0x0000ffff7ab8cd28)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb34   212  stur x0, [x3, #183]
0xffff7ab8cb38   216  ldr x0, pc+504 (addr 0x0000ffff7ab8cd30)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb3c   220  stur x0, [x3, #191]
0xffff7ab8cb40   224  ldr x0, pc+504 (addr 0x0000ffff7ab8cd38)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb44   228  stur x0, [x3, #199]
0xffff7ab8cb48   232  ldr x0, pc+504 (addr 0x0000ffff7ab8cd40)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb4c   236  stur x0, [x3, #207]
0xffff7ab8cb50   240  ldr x0, pc+504 (addr 0x0000ffff7ab8cd48)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb54   244  stur x0, [x3, #215]
0xffff7ab8cb58   248  ldr x0, pc+504 (addr 0x0000ffff7ab8cd50)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb5c   252  stur x0, [x3, #223]
0xffff7ab8cb60   256  ldr x0, pc+504 (addr 0x0000ffff7ab8cd58)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb64   260  stur x0, [x3, #231]
0xffff7ab8cb68   264  ldr x0, pc+504 (addr 0x0000ffff7ab8cd60)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb6c   268  stur x0, [x3, #239]
0xffff7ab8cb70   272  ldr x0, pc+504 (addr 0x0000ffff7ab8cd68)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb74   276  stur x0, [x3, #247]
0xffff7ab8cb78   280  ldr x0, pc+504 (addr 0x0000ffff7ab8cd70)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb7c   284  stur x0, [x3, #255]
0xffff7ab8cb80   288  ldr x0, pc+504 (addr 0x0000ffff7ab8cd78)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb84   292  movz x16, #0x107
0xffff7ab8cb88   296  str x0, [x3, x16]
0xffff7ab8cb8c   300  ldr x0, pc+500 (addr 0x0000ffff7ab8cd80)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb90   304  movz x16, #0x10f
0xffff7ab8cb94   308  str x0, [x3, x16]
0xffff7ab8cb98   312  ldr x0, pc+496 (addr 0x0000ffff7ab8cd88)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cb9c   316  movz x16, #0x117
0xffff7ab8cba0   320  str x0, [x3, x16]
0xffff7ab8cba4   324  ldr x0, pc+492 (addr 0x0000ffff7ab8cd90)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cba8   328  movz x16, #0x11f
0xffff7ab8cbac   332  str x0, [x3, x16]
0xffff7ab8cbb0   336  ldr x0, pc+488 (addr 0x0000ffff7ab8cd98)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cbb4   340  movz x16, #0x127
0xffff7ab8cbb8   344  str x0, [x3, x16]
0xffff7ab8cbbc   348  ldr x0, pc+484 (addr 0x0000ffff7ab8cda0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cbc0   352  movz x16, #0x12f
0xffff7ab8cbc4   356  str x0, [x3, x16]
0xffff7ab8cbc8   360  ldr x0, pc+480 (addr 0x0000ffff7ab8cda8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cbcc   364  movz x16, #0x137
0xffff7ab8cbd0   368  str x0, [x3, x16]
0xffff7ab8cbd4   372  ldr x0, pc+476 (addr 0x0000ffff7ab8cdb0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cbd8   376  movz x16, #0x13f
0xffff7ab8cbdc   380  str x0, [x3, x16]
0xffff7ab8cbe0   384  ldr x0, pc+472 (addr 0x0000ffff7ab8cdb8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cbe4   388  movz x16, #0x147
0xffff7ab8cbe8   392  str x0, [x3, x16]
0xffff7ab8cbec   396  ldr x0, pc+468 (addr 0x0000ffff7ab8cdc0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cbf0   400  movz x16, #0x14f
0xffff7ab8cbf4   404  str x0, [x3, x16]
0xffff7ab8cbf8   408  ldr x0, pc+464 (addr 0x0000ffff7ab8cdc8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cbfc   412  movz x16, #0x157
0xffff7ab8cc00   416  str x0, [x3, x16]
0xffff7ab8cc04   420  ldr x0, pc+460 (addr 0x0000ffff7ab8cdd0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cc08   424  movz x16, #0x15f
0xffff7ab8cc0c   428  str x0, [x3, x16]
0xffff7ab8cc10   432  ldr x0, pc+456 (addr 0x0000ffff7ab8cdd8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8cc14   436  movz x16, #0x167
0xffff7ab8cc18   440  str x0, [x3, x16]
0xffff7ab8cc1c   444  mov x0, x3
0xffff7ab8cc20   448  ret
0xffff7ab8cc24   452  sub csp, jssp, #0x10 (16)
0xffff7ab8cc28   456  stp fp, lr, [jssp, #-16]!
0xffff7ab8cc2c   460  movz fp, #0xa00000000
0xffff7ab8cc30   464  sub csp, jssp, #0x8 (8)
0xffff7ab8cc34   468  str fp, [jssp, #-8]!
0xffff7ab8cc38   472  add fp, jssp, #0x8 (8)
0xffff7ab8cc3c   476  movz x3, #0x0
0xffff7ab8cc40   480  mov x16, lr
0xffff7ab8cc44   484  ldr x17, pc+412 (addr 0x0000ffff7ab8cde0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab8cc48   488  blr x17
0xffff7ab8cc4c   492  movz x0, #0x17000000000
0xffff7ab8cc50   496  movz x10, #0x0
0xffff7ab8cc54   500  sub csp, jssp, #0x10 (16)
0xffff7ab8cc58   504  stp x10, x0, [jssp, #-16]!
0xffff7ab8cc5c   508  movz x0, #0x2
0xffff7ab8cc60   512  movz x1, #0x5b88
0xffff7ab8cc64   516  movk x1, #0xe2, lsl #16
0xffff7ab8cc68   520  ldr x16, pc+384 (addr 0x0000ffff7ab8cde8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab8cc6c   524  blr x16
0xffff7ab8cc70   528  str x0, [jssp, #24]
0xffff7ab8cc74   532  ldr x16, pc+380 (addr 0x0000ffff7ab8cdf0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab8cc78   536  blr x16
0xffff7ab8cc7c   540  ldr lr, [jssp, #16]
0xffff7ab8cc80   544  ldp xzr, fp, [jssp], #24
0xffff7ab8cc84   548  b #-0x204 (addr 0xffff7ab8ca80)
0xffff7ab8cc88   552  58000b7f       constant pool begin (num_const = 91)    ;; constant pool
0xffff7ab8cc8c   556  d63f03e0       constant
0xffff7ab8cc90   560  4ec06149       constant
0xffff7ab8cc94   564  00000000       constant
0xffff7ab8cc98   568  20d04519       constant
0xffff7ab8cc9c   572  00000000       constant
0xffff7ab8cca0   576  20d04241       constant
0xffff7ab8cca4   580  00000000       constant
0xffff7ab8cca8   584  20d04241       constant
0xffff7ab8ccac   588  00000000       constant
0xffff7ab8ccb0   592  20d04241       constant
0xffff7ab8ccb4   596  00000000       constant
0xffff7ab8ccb8   600  20d04241       constant
0xffff7ab8ccbc   604  00000000       constant
0xffff7ab8ccc0   608  20d04241       constant
0xffff7ab8ccc4   612  00000000       constant
0xffff7ab8ccc8   616  20d04241       constant
0xffff7ab8cccc   620  00000000       constant
0xffff7ab8ccd0   624  20d04241       constant
0xffff7ab8ccd4   628  00000000       constant
0xffff7ab8ccd8   632  20d04241       constant
0xffff7ab8ccdc   636  00000000       constant
0xffff7ab8cce0   640  20d04241       constant
0xffff7ab8cce4   644  00000000       constant
0xffff7ab8cce8   648  20d04241       constant
0xffff7ab8ccec   652  00000000       constant
0xffff7ab8ccf0   656  20d04241       constant
0xffff7ab8ccf4   660  00000000       constant
0xffff7ab8ccf8   664  20d04241       constant
0xffff7ab8ccfc   668  00000000       constant
0xffff7ab8cd00   672  20d04241       constant
0xffff7ab8cd04   676  00000000       constant
0xffff7ab8cd08   680  20d04241       constant
0xffff7ab8cd0c   684  00000000       constant
0xffff7ab8cd10   688  20d04241       constant
0xffff7ab8cd14   692  00000000       constant
0xffff7ab8cd18   696  20d04241       constant
0xffff7ab8cd1c   700  00000000       constant
0xffff7ab8cd20   704  20d04241       constant
0xffff7ab8cd24   708  00000000       constant
0xffff7ab8cd28   712  20d04241       constant
0xffff7ab8cd2c   716  00000000       constant
0xffff7ab8cd30   720  20d04241       constant
0xffff7ab8cd34   724  00000000       constant
0xffff7ab8cd38   728  20d04241       constant
0xffff7ab8cd3c   732  00000000       constant
0xffff7ab8cd40   736  20d04241       constant
0xffff7ab8cd44   740  00000000       constant
0xffff7ab8cd48   744  20d04241       constant
0xffff7ab8cd4c   748  00000000       constant
0xffff7ab8cd50   752  20d04241       constant
0xffff7ab8cd54   756  00000000       constant
0xffff7ab8cd58   760  20d04241       constant
0xffff7ab8cd5c   764  00000000       constant
0xffff7ab8cd60   768  20d04241       constant
0xffff7ab8cd64   772  00000000       constant
0xffff7ab8cd68   776  20d04241       constant
0xffff7ab8cd6c   780  00000000       constant
0xffff7ab8cd70   784  20d04241       constant
0xffff7ab8cd74   788  00000000       constant
0xffff7ab8cd78   792  20d04241       constant
0xffff7ab8cd7c   796  00000000       constant
0xffff7ab8cd80   800  20d04241       constant
0xffff7ab8cd84   804  00000000       constant
0xffff7ab8cd88   808  20d04241       constant
0xffff7ab8cd8c   812  00000000       constant
0xffff7ab8cd90   816  20d04241       constant
0xffff7ab8cd94   820  00000000       constant
0xffff7ab8cd98   824  20d04241       constant
0xffff7ab8cd9c   828  00000000       constant
0xffff7ab8cda0   832  20d04241       constant
0xffff7ab8cda4   836  00000000       constant
0xffff7ab8cda8   840  20d04241       constant
0xffff7ab8cdac   844  00000000       constant
0xffff7ab8cdb0   848  20d04241       constant
0xffff7ab8cdb4   852  00000000       constant
0xffff7ab8cdb8   856  20d04241       constant
0xffff7ab8cdbc   860  00000000       constant
0xffff7ab8cdc0   864  20d04241       constant
0xffff7ab8cdc4   868  00000000       constant
0xffff7ab8cdc8   872  20d04241       constant
0xffff7ab8cdcc   876  00000000       constant
0xffff7ab8cdd0   880  20d04241       constant
0xffff7ab8cdd4   884  00000000       constant
0xffff7ab8cdd8   888  20d04241       constant
0xffff7ab8cddc   892  00000000       constant
0xffff7ab8cde0   896  7ab06820       constant
0xffff7ab8cde4   900  0000ffff       constant
0xffff7ab8cde8   904  7ab06260       constant
0xffff7ab8cdec   908  0000ffff       constant
0xffff7ab8cdf0   912  7ab068e0       constant
0xffff7ab8cdf4   916  0000ffff       constant


Safepoints (size = 21)
0xffff7ab8cc70   528  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 51)
0xffff7ab8ca80  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab8ca98  embedded object  (0x20d04519 <the hole>)
0xffff7ab8caa8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cab0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cab8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cac0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cac8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cad0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cad8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cae0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cae8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8caf0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8caf8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb00  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb08  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb10  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb18  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb20  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb28  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb30  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb38  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb40  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb48  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb50  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb58  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb60  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb68  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb70  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb78  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb80  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb8c  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cb98  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cba4  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cbb0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cbbc  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cbc8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cbd4  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cbe0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cbec  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cbf8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cc04  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cc10  embedded object  (0x20d04241 <undefined>)
0xffff7ab8cc44  code target (STUB)  (0xffff7ab06820)
0xffff7ab8cc68  code target (STUB)  (0xffff7ab06260)
0xffff7ab8cc74  code target (STUB)  (0xffff7ab068e0)
0xffff7ab8cc88  constant pool (size 368)


kind = HANDLER
major_key = <NoCache>Stub
name = runInThisContext
compiler = unknown
Instructions (size = 120)
0xffff7ab8f420     0  sub csp, jssp, #0x8 (8)
0xffff7ab8f424     4  str x3, [jssp, #-8]!
0xffff7ab8f428     8  sub csp, jssp, #0x8 (8)
0xffff7ab8f42c    12  str x0, [jssp, #-8]!
0xffff7ab8f430    16  ldr x0, pc+72 (addr 0x0000ffff7ab8f478)    ;; object: 0x20dcde09 Cell for 0
0xffff7ab8f434    20  ldur x0, [x0, #7]
0xffff7ab8f438    24  cmp x0, #0x0 (0)
0xffff7ab8f43c    28  b.ne #+0x14 (addr 0xffff7ab8f450)
0xffff7ab8f440    32  ldr x3, pc+64 (addr 0x0000ffff7ab8f480)    ;; object: 0x20dcde19 WeakCell for 0x56e9cef9 <an Object with map 0x4ec1a571>
0xffff7ab8f444    36  ldur x3, [x3, #7]
0xffff7ab8f448    40  tbz w3, #0, #+0x8 (addr 0xffff7ab8f450)
0xffff7ab8f44c    44  b #+0x14 (addr 0xffff7ab8f460)
0xffff7ab8f450    48  ldr x0, [jssp], #8
0xffff7ab8f454    52  ldr x3, [jssp], #8
0xffff7ab8f458    56  ldr x16, pc+48 (addr 0x0000ffff7ab8f488)    ;; code: BUILTIN
0xffff7ab8f45c    60  br x16
0xffff7ab8f460    64  add jssp, jssp, #0x10 (16)
0xffff7ab8f464    68  mov x1, x3
0xffff7ab8f468    72  ldr x16, pc+40 (addr 0x0000ffff7ab8f490)    ;; code: HANDLER, LoadConstantStub, minor: 1
0xffff7ab8f46c    76  br x16
0xffff7ab8f470    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7ab8f474    84  d63f03e0       constant
0xffff7ab8f478    88  20dcde09       constant
0xffff7ab8f47c    92  00000000       constant
0xffff7ab8f480    96  20dcde19       constant
0xffff7ab8f484   100  00000000       constant
0xffff7ab8f488   104  7ab222e0       constant
0xffff7ab8f48c   108  0000ffff       constant
0xffff7ab8f490   112  7ab43300       constant
0xffff7ab8f494   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab8f430  embedded object  (0x20dcde09 Cell for 0)
0xffff7ab8f440  embedded object  (0x20dcde19 WeakCell for 0x56e9cef9 <an Object with map 0x4ec1a571>)
0xffff7ab8f458  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab8f468  code target (HANDLER)  (0xffff7ab43300)
0xffff7ab8f470  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = buffer
compiler = unknown
Instructions (size = 184)
0xffff7ab8f500     0  sub csp, jssp, #0x8 (8)
0xffff7ab8f504     4  str x3, [jssp, #-8]!
0xffff7ab8f508     8  sub csp, jssp, #0x8 (8)
0xffff7ab8f50c    12  str x4, [jssp, #-8]!
0xffff7ab8f510    16  ldr x3, pc+112 (addr 0x0000ffff7ab8f580)    ;; object: 0x20d63e59 Cell for 0
0xffff7ab8f514    20  ldur x3, [x3, #7]
0xffff7ab8f518    24  cmp x3, #0x0 (0)
0xffff7ab8f51c    28  b.ne #+0x44 (addr 0xffff7ab8f560)
0xffff7ab8f520    32  tbz w0, #0, #+0x40 (addr 0xffff7ab8f560)
0xffff7ab8f524    36  ldur x3, [x0, #-1]
0xffff7ab8f528    40  ldr x4, pc+96 (addr 0x0000ffff7ab8f588)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab8f52c    44  ldur x4, [x4, #7]
0xffff7ab8f530    48  cmp x3, x4
0xffff7ab8f534    52  b.ne #+0x2c (addr 0xffff7ab8f560)
0xffff7ab8f538    56  ldr x5, pc+88 (addr 0x0000ffff7ab8f590)    ;; object: 0x20dcf261 WeakCell for 0x4ec1ca91 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab8f53c    60  ldur x5, [x5, #7]
0xffff7ab8f540    64  tbz w5, #0, #+0x20 (addr 0xffff7ab8f560)
0xffff7ab8f544    68  ldursw x4, [x5, #15]
0xffff7ab8f548    72  tbnz w4, #23, #+0x18 (addr 0xffff7ab8f560)
0xffff7ab8f54c    76  ldr x4, [jssp], #8
0xffff7ab8f550    80  ldr x3, [jssp], #8
0xffff7ab8f554    84  ldr x2, pc+68 (addr 0x0000ffff7ab8f598)    ;; object: 0x20d780a9 <String[6]: buffer>
0xffff7ab8f558    88  ldr x16, pc+72 (addr 0x0000ffff7ab8f5a0)    ;; code: HANDLER, StoreTransitionStub, minor: 198661
0xffff7ab8f55c    92  br x16
0xffff7ab8f560    96  ldr x2, pc+72 (addr 0x0000ffff7ab8f5a8)    ;; object: 0x20d780a9 <String[6]: buffer>
0xffff7ab8f564   100  ldr x4, [jssp], #8
0xffff7ab8f568   104  ldr x3, [jssp], #8
0xffff7ab8f56c   108  ldr x16, pc+68 (addr 0x0000ffff7ab8f5b0)    ;; code: BUILTIN
0xffff7ab8f570   112  br x16
0xffff7ab8f574   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab8f578   120  d63f03e0       constant
0xffff7ab8f57c   124  d503201f       constant
0xffff7ab8f580   128  20d63e59       constant
0xffff7ab8f584   132  00000000       constant
0xffff7ab8f588   136  20dc22b1       constant
0xffff7ab8f58c   140  00000000       constant
0xffff7ab8f590   144  20dcf261       constant
0xffff7ab8f594   148  00000000       constant
0xffff7ab8f598   152  20d780a9       constant
0xffff7ab8f59c   156  00000000       constant
0xffff7ab8f5a0   160  7ab8bdc0       constant
0xffff7ab8f5a4   164  0000ffff       constant
0xffff7ab8f5a8   168  20d780a9       constant
0xffff7ab8f5ac   172  00000000       constant
0xffff7ab8f5b0   176  7ab22420       constant
0xffff7ab8f5b4   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7ab8f510  embedded object  (0x20d63e59 Cell for 0)
0xffff7ab8f528  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab8f538  embedded object  (0x20dcf261 WeakCell for 0x4ec1ca91 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab8f554  embedded object  (0x20d780a9 <String[6]: buffer>)
0xffff7ab8f558  code target (HANDLER)  (0xffff7ab8bdc0)
0xffff7ab8f560  embedded object  (0x20d780a9 <String[6]: buffer>)
0xffff7ab8f56c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab8f574  constant pool (size 68)

--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 861)
0xffff7ab8f620     0  movz x2, #0xe2c0
0xffff7ab8f624     4  movk x2, #0x9ab, lsl #16
0xffff7ab8f628     8  ldp x3, x0, [x2]
0xffff7ab8f62c    12  adds x16, x3, #0x150 (336)
0xffff7ab8f630    16  ccmp x16, x0, #nzCv, lo
0xffff7ab8f634    20  b.hi #+0x180 (addr 0xffff7ab8f7b4)
0xffff7ab8f638    24  str x16, [x2]
0xffff7ab8f63c    28  orr x3, x3, #0x1
0xffff7ab8f640    32  ldr x0, pc+480 (addr 0x0000ffff7ab8f820)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab8f644    36  stur x0, [x3, #-1]
0xffff7ab8f648    40  movz x0, #0x2800000000
0xffff7ab8f64c    44  stur x0, [x3, #7]
0xffff7ab8f650    48  stur x1, [x3, #15]
0xffff7ab8f654    52  stur cp, [x3, #23]
0xffff7ab8f658    56  ldr x0, pc+464 (addr 0x0000ffff7ab8f828)    ;; object: 0x20d04519 <the hole>
0xffff7ab8f65c    60  stur x0, [x3, #31]
0xffff7ab8f660    64  ldur x0, [cp, #39]
0xffff7ab8f664    68  stur x0, [x3, #39]
0xffff7ab8f668    72  ldr x0, pc+456 (addr 0x0000ffff7ab8f830)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f66c    76  stur x0, [x3, #47]
0xffff7ab8f670    80  ldr x0, pc+456 (addr 0x0000ffff7ab8f838)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f674    84  stur x0, [x3, #55]
0xffff7ab8f678    88  ldr x0, pc+456 (addr 0x0000ffff7ab8f840)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f67c    92  stur x0, [x3, #63]
0xffff7ab8f680    96  ldr x0, pc+456 (addr 0x0000ffff7ab8f848)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f684   100  stur x0, [x3, #71]
0xffff7ab8f688   104  ldr x0, pc+456 (addr 0x0000ffff7ab8f850)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f68c   108  stur x0, [x3, #79]
0xffff7ab8f690   112  ldr x0, pc+456 (addr 0x0000ffff7ab8f858)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f694   116  stur x0, [x3, #87]
0xffff7ab8f698   120  ldr x0, pc+456 (addr 0x0000ffff7ab8f860)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f69c   124  stur x0, [x3, #95]
0xffff7ab8f6a0   128  ldr x0, pc+456 (addr 0x0000ffff7ab8f868)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6a4   132  stur x0, [x3, #103]
0xffff7ab8f6a8   136  ldr x0, pc+456 (addr 0x0000ffff7ab8f870)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6ac   140  stur x0, [x3, #111]
0xffff7ab8f6b0   144  ldr x0, pc+456 (addr 0x0000ffff7ab8f878)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6b4   148  stur x0, [x3, #119]
0xffff7ab8f6b8   152  ldr x0, pc+456 (addr 0x0000ffff7ab8f880)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6bc   156  stur x0, [x3, #127]
0xffff7ab8f6c0   160  ldr x0, pc+456 (addr 0x0000ffff7ab8f888)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6c4   164  stur x0, [x3, #135]
0xffff7ab8f6c8   168  ldr x0, pc+456 (addr 0x0000ffff7ab8f890)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6cc   172  stur x0, [x3, #143]
0xffff7ab8f6d0   176  ldr x0, pc+456 (addr 0x0000ffff7ab8f898)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6d4   180  stur x0, [x3, #151]
0xffff7ab8f6d8   184  ldr x0, pc+456 (addr 0x0000ffff7ab8f8a0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6dc   188  stur x0, [x3, #159]
0xffff7ab8f6e0   192  ldr x0, pc+456 (addr 0x0000ffff7ab8f8a8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6e4   196  stur x0, [x3, #167]
0xffff7ab8f6e8   200  ldr x0, pc+456 (addr 0x0000ffff7ab8f8b0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6ec   204  stur x0, [x3, #175]
0xffff7ab8f6f0   208  ldr x0, pc+456 (addr 0x0000ffff7ab8f8b8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6f4   212  stur x0, [x3, #183]
0xffff7ab8f6f8   216  ldr x0, pc+456 (addr 0x0000ffff7ab8f8c0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6fc   220  stur x0, [x3, #191]
0xffff7ab8f700   224  ldr x0, pc+456 (addr 0x0000ffff7ab8f8c8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f704   228  stur x0, [x3, #199]
0xffff7ab8f708   232  ldr x0, pc+456 (addr 0x0000ffff7ab8f8d0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f70c   236  stur x0, [x3, #207]
0xffff7ab8f710   240  ldr x0, pc+456 (addr 0x0000ffff7ab8f8d8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f714   244  stur x0, [x3, #215]
0xffff7ab8f718   248  ldr x0, pc+456 (addr 0x0000ffff7ab8f8e0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f71c   252  stur x0, [x3, #223]
0xffff7ab8f720   256  ldr x0, pc+456 (addr 0x0000ffff7ab8f8e8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f724   260  stur x0, [x3, #231]
0xffff7ab8f728   264  ldr x0, pc+456 (addr 0x0000ffff7ab8f8f0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f72c   268  stur x0, [x3, #239]
0xffff7ab8f730   272  ldr x0, pc+456 (addr 0x0000ffff7ab8f8f8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f734   276  stur x0, [x3, #247]
0xffff7ab8f738   280  ldr x0, pc+456 (addr 0x0000ffff7ab8f900)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f73c   284  stur x0, [x3, #255]
0xffff7ab8f740   288  ldr x0, pc+456 (addr 0x0000ffff7ab8f908)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f744   292  movz x16, #0x107
0xffff7ab8f748   296  str x0, [x3, x16]
0xffff7ab8f74c   300  ldr x0, pc+452 (addr 0x0000ffff7ab8f910)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f750   304  movz x16, #0x10f
0xffff7ab8f754   308  str x0, [x3, x16]
0xffff7ab8f758   312  ldr x0, pc+448 (addr 0x0000ffff7ab8f918)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f75c   316  movz x16, #0x117
0xffff7ab8f760   320  str x0, [x3, x16]
0xffff7ab8f764   324  ldr x0, pc+444 (addr 0x0000ffff7ab8f920)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f768   328  movz x16, #0x11f
0xffff7ab8f76c   332  str x0, [x3, x16]
0xffff7ab8f770   336  ldr x0, pc+440 (addr 0x0000ffff7ab8f928)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f774   340  movz x16, #0x127
0xffff7ab8f778   344  str x0, [x3, x16]
0xffff7ab8f77c   348  ldr x0, pc+436 (addr 0x0000ffff7ab8f930)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f780   352  movz x16, #0x12f
0xffff7ab8f784   356  str x0, [x3, x16]
0xffff7ab8f788   360  ldr x0, pc+432 (addr 0x0000ffff7ab8f938)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f78c   364  movz x16, #0x137
0xffff7ab8f790   368  str x0, [x3, x16]
0xffff7ab8f794   372  ldr x0, pc+428 (addr 0x0000ffff7ab8f940)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f798   376  movz x16, #0x13f
0xffff7ab8f79c   380  str x0, [x3, x16]
0xffff7ab8f7a0   384  ldr x0, pc+424 (addr 0x0000ffff7ab8f948)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f7a4   388  movz x16, #0x147
0xffff7ab8f7a8   392  str x0, [x3, x16]
0xffff7ab8f7ac   396  mov x0, x3
0xffff7ab8f7b0   400  ret
0xffff7ab8f7b4   404  sub csp, jssp, #0x10 (16)
0xffff7ab8f7b8   408  stp fp, lr, [jssp, #-16]!
0xffff7ab8f7bc   412  movz fp, #0xa00000000
0xffff7ab8f7c0   416  sub csp, jssp, #0x8 (8)
0xffff7ab8f7c4   420  str fp, [jssp, #-8]!
0xffff7ab8f7c8   424  add fp, jssp, #0x8 (8)
0xffff7ab8f7cc   428  movz x3, #0x0
0xffff7ab8f7d0   432  mov x16, lr
0xffff7ab8f7d4   436  ldr x17, pc+380 (addr 0x0000ffff7ab8f950)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab8f7d8   440  blr x17
0xffff7ab8f7dc   444  movz x0, #0x15000000000
0xffff7ab8f7e0   448  movz x10, #0x0
0xffff7ab8f7e4   452  sub csp, jssp, #0x10 (16)
0xffff7ab8f7e8   456  stp x10, x0, [jssp, #-16]!
0xffff7ab8f7ec   460  movz x0, #0x2
0xffff7ab8f7f0   464  movz x1, #0x5b88
0xffff7ab8f7f4   468  movk x1, #0xe2, lsl #16
0xffff7ab8f7f8   472  ldr x16, pc+352 (addr 0x0000ffff7ab8f958)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab8f7fc   476  blr x16
0xffff7ab8f800   480  str x0, [jssp, #24]
0xffff7ab8f804   484  ldr x16, pc+348 (addr 0x0000ffff7ab8f960)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab8f808   488  blr x16
0xffff7ab8f80c   492  ldr lr, [jssp, #16]
0xffff7ab8f810   496  ldp xzr, fp, [jssp], #24
0xffff7ab8f814   500  b #-0x1d4 (addr 0xffff7ab8f640)
0xffff7ab8f818   504  58000a7f       constant pool begin (num_const = 83)    ;; constant pool
0xffff7ab8f81c   508  d63f03e0       constant
0xffff7ab8f820   512  4ec06149       constant
0xffff7ab8f824   516  00000000       constant
0xffff7ab8f828   520  20d04519       constant
0xffff7ab8f82c   524  00000000       constant
0xffff7ab8f830   528  20d04241       constant
0xffff7ab8f834   532  00000000       constant
0xffff7ab8f838   536  20d04241       constant
0xffff7ab8f83c   540  00000000       constant
0xffff7ab8f840   544  20d04241       constant
0xffff7ab8f844   548  00000000       constant
0xffff7ab8f848   552  20d04241       constant
0xffff7ab8f84c   556  00000000       constant
0xffff7ab8f850   560  20d04241       constant
0xffff7ab8f854   564  00000000       constant
0xffff7ab8f858   568  20d04241       constant
0xffff7ab8f85c   572  00000000       constant
0xffff7ab8f860   576  20d04241       constant
0xffff7ab8f864   580  00000000       constant
0xffff7ab8f868   584  20d04241       constant
0xffff7ab8f86c   588  00000000       constant
0xffff7ab8f870   592  20d04241       constant
0xffff7ab8f874   596  00000000       constant
0xffff7ab8f878   600  20d04241       constant
0xffff7ab8f87c   604  00000000       constant
0xffff7ab8f880   608  20d04241       constant
0xffff7ab8f884   612  00000000       constant
0xffff7ab8f888   616  20d04241       constant
0xffff7ab8f88c   620  00000000       constant
0xffff7ab8f890   624  20d04241       constant
0xffff7ab8f894   628  00000000       constant
0xffff7ab8f898   632  20d04241       constant
0xffff7ab8f89c   636  00000000       constant
0xffff7ab8f8a0   640  20d04241       constant
0xffff7ab8f8a4   644  00000000       constant
0xffff7ab8f8a8   648  20d04241       constant
0xffff7ab8f8ac   652  00000000       constant
0xffff7ab8f8b0   656  20d04241       constant
0xffff7ab8f8b4   660  00000000       constant
0xffff7ab8f8b8   664  20d04241       constant
0xffff7ab8f8bc   668  00000000       constant
0xffff7ab8f8c0   672  20d04241       constant
0xffff7ab8f8c4   676  00000000       constant
0xffff7ab8f8c8   680  20d04241       constant
0xffff7ab8f8cc   684  00000000       constant
0xffff7ab8f8d0   688  20d04241       constant
0xffff7ab8f8d4   692  00000000       constant
0xffff7ab8f8d8   696  20d04241       constant
0xffff7ab8f8dc   700  00000000       constant
0xffff7ab8f8e0   704  20d04241       constant
0xffff7ab8f8e4   708  00000000       constant
0xffff7ab8f8e8   712  20d04241       constant
0xffff7ab8f8ec   716  00000000       constant
0xffff7ab8f8f0   720  20d04241       constant
0xffff7ab8f8f4   724  00000000       constant
0xffff7ab8f8f8   728  20d04241       constant
0xffff7ab8f8fc   732  00000000       constant
0xffff7ab8f900   736  20d04241       constant
0xffff7ab8f904   740  00000000       constant
0xffff7ab8f908   744  20d04241       constant
0xffff7ab8f90c   748  00000000       constant
0xffff7ab8f910   752  20d04241       constant
0xffff7ab8f914   756  00000000       constant
0xffff7ab8f918   760  20d04241       constant
0xffff7ab8f91c   764  00000000       constant
0xffff7ab8f920   768  20d04241       constant
0xffff7ab8f924   772  00000000       constant
0xffff7ab8f928   776  20d04241       constant
0xffff7ab8f92c   780  00000000       constant
0xffff7ab8f930   784  20d04241       constant
0xffff7ab8f934   788  00000000       constant
0xffff7ab8f938   792  20d04241       constant
0xffff7ab8f93c   796  00000000       constant
0xffff7ab8f940   800  20d04241       constant
0xffff7ab8f944   804  00000000       constant
0xffff7ab8f948   808  20d04241       constant
0xffff7ab8f94c   812  00000000       constant
0xffff7ab8f950   816  7ab06820       constant
0xffff7ab8f954   820  0000ffff       constant
0xffff7ab8f958   824  7ab06260       constant
0xffff7ab8f95c   828  0000ffff       constant
0xffff7ab8f960   832  7ab068e0       constant
0xffff7ab8f964   836  0000ffff       constant


Safepoints (size = 21)
0xffff7ab8f800   480  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 47)
0xffff7ab8f640  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab8f658  embedded object  (0x20d04519 <the hole>)
0xffff7ab8f668  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f670  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f678  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f680  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f688  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f690  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f698  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6a0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6a8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6b0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6b8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6c0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6c8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6d0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6d8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6e0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6e8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6f0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6f8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f700  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f708  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f710  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f718  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f720  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f728  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f730  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f738  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f740  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f74c  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f758  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f764  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f770  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f77c  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f788  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f794  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f7a0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f7d4  code target (STUB)  (0xffff7ab06820)
0xffff7ab8f7f8  code target (STUB)  (0xffff7ab06260)
0xffff7ab8f804  code target (STUB)  (0xffff7ab068e0)
0xffff7ab8f818  constant pool (size 336)

--- End code ---
kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 861)
0xffff7ab8f620     0  movz x2, #0xe2c0
0xffff7ab8f624     4  movk x2, #0x9ab, lsl #16
0xffff7ab8f628     8  ldp x3, x0, [x2]
0xffff7ab8f62c    12  adds x16, x3, #0x150 (336)
0xffff7ab8f630    16  ccmp x16, x0, #nzCv, lo
0xffff7ab8f634    20  b.hi #+0x180 (addr 0xffff7ab8f7b4)
0xffff7ab8f638    24  str x16, [x2]
0xffff7ab8f63c    28  orr x3, x3, #0x1
0xffff7ab8f640    32  ldr x0, pc+480 (addr 0x0000ffff7ab8f820)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab8f644    36  stur x0, [x3, #-1]
0xffff7ab8f648    40  movz x0, #0x2800000000
0xffff7ab8f64c    44  stur x0, [x3, #7]
0xffff7ab8f650    48  stur x1, [x3, #15]
0xffff7ab8f654    52  stur cp, [x3, #23]
0xffff7ab8f658    56  ldr x0, pc+464 (addr 0x0000ffff7ab8f828)    ;; object: 0x20d04519 <the hole>
0xffff7ab8f65c    60  stur x0, [x3, #31]
0xffff7ab8f660    64  ldur x0, [cp, #39]
0xffff7ab8f664    68  stur x0, [x3, #39]
0xffff7ab8f668    72  ldr x0, pc+456 (addr 0x0000ffff7ab8f830)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f66c    76  stur x0, [x3, #47]
0xffff7ab8f670    80  ldr x0, pc+456 (addr 0x0000ffff7ab8f838)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f674    84  stur x0, [x3, #55]
0xffff7ab8f678    88  ldr x0, pc+456 (addr 0x0000ffff7ab8f840)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f67c    92  stur x0, [x3, #63]
0xffff7ab8f680    96  ldr x0, pc+456 (addr 0x0000ffff7ab8f848)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f684   100  stur x0, [x3, #71]
0xffff7ab8f688   104  ldr x0, pc+456 (addr 0x0000ffff7ab8f850)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f68c   108  stur x0, [x3, #79]
0xffff7ab8f690   112  ldr x0, pc+456 (addr 0x0000ffff7ab8f858)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f694   116  stur x0, [x3, #87]
0xffff7ab8f698   120  ldr x0, pc+456 (addr 0x0000ffff7ab8f860)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f69c   124  stur x0, [x3, #95]
0xffff7ab8f6a0   128  ldr x0, pc+456 (addr 0x0000ffff7ab8f868)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6a4   132  stur x0, [x3, #103]
0xffff7ab8f6a8   136  ldr x0, pc+456 (addr 0x0000ffff7ab8f870)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6ac   140  stur x0, [x3, #111]
0xffff7ab8f6b0   144  ldr x0, pc+456 (addr 0x0000ffff7ab8f878)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6b4   148  stur x0, [x3, #119]
0xffff7ab8f6b8   152  ldr x0, pc+456 (addr 0x0000ffff7ab8f880)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6bc   156  stur x0, [x3, #127]
0xffff7ab8f6c0   160  ldr x0, pc+456 (addr 0x0000ffff7ab8f888)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6c4   164  stur x0, [x3, #135]
0xffff7ab8f6c8   168  ldr x0, pc+456 (addr 0x0000ffff7ab8f890)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6cc   172  stur x0, [x3, #143]
0xffff7ab8f6d0   176  ldr x0, pc+456 (addr 0x0000ffff7ab8f898)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6d4   180  stur x0, [x3, #151]
0xffff7ab8f6d8   184  ldr x0, pc+456 (addr 0x0000ffff7ab8f8a0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6dc   188  stur x0, [x3, #159]
0xffff7ab8f6e0   192  ldr x0, pc+456 (addr 0x0000ffff7ab8f8a8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6e4   196  stur x0, [x3, #167]
0xffff7ab8f6e8   200  ldr x0, pc+456 (addr 0x0000ffff7ab8f8b0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6ec   204  stur x0, [x3, #175]
0xffff7ab8f6f0   208  ldr x0, pc+456 (addr 0x0000ffff7ab8f8b8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6f4   212  stur x0, [x3, #183]
0xffff7ab8f6f8   216  ldr x0, pc+456 (addr 0x0000ffff7ab8f8c0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f6fc   220  stur x0, [x3, #191]
0xffff7ab8f700   224  ldr x0, pc+456 (addr 0x0000ffff7ab8f8c8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f704   228  stur x0, [x3, #199]
0xffff7ab8f708   232  ldr x0, pc+456 (addr 0x0000ffff7ab8f8d0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f70c   236  stur x0, [x3, #207]
0xffff7ab8f710   240  ldr x0, pc+456 (addr 0x0000ffff7ab8f8d8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f714   244  stur x0, [x3, #215]
0xffff7ab8f718   248  ldr x0, pc+456 (addr 0x0000ffff7ab8f8e0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f71c   252  stur x0, [x3, #223]
0xffff7ab8f720   256  ldr x0, pc+456 (addr 0x0000ffff7ab8f8e8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f724   260  stur x0, [x3, #231]
0xffff7ab8f728   264  ldr x0, pc+456 (addr 0x0000ffff7ab8f8f0)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f72c   268  stur x0, [x3, #239]
0xffff7ab8f730   272  ldr x0, pc+456 (addr 0x0000ffff7ab8f8f8)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f734   276  stur x0, [x3, #247]
0xffff7ab8f738   280  ldr x0, pc+456 (addr 0x0000ffff7ab8f900)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f73c   284  stur x0, [x3, #255]
0xffff7ab8f740   288  ldr x0, pc+456 (addr 0x0000ffff7ab8f908)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f744   292  movz x16, #0x107
0xffff7ab8f748   296  str x0, [x3, x16]
0xffff7ab8f74c   300  ldr x0, pc+452 (addr 0x0000ffff7ab8f910)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f750   304  movz x16, #0x10f
0xffff7ab8f754   308  str x0, [x3, x16]
0xffff7ab8f758   312  ldr x0, pc+448 (addr 0x0000ffff7ab8f918)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f75c   316  movz x16, #0x117
0xffff7ab8f760   320  str x0, [x3, x16]
0xffff7ab8f764   324  ldr x0, pc+444 (addr 0x0000ffff7ab8f920)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f768   328  movz x16, #0x11f
0xffff7ab8f76c   332  str x0, [x3, x16]
0xffff7ab8f770   336  ldr x0, pc+440 (addr 0x0000ffff7ab8f928)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f774   340  movz x16, #0x127
0xffff7ab8f778   344  str x0, [x3, x16]
0xffff7ab8f77c   348  ldr x0, pc+436 (addr 0x0000ffff7ab8f930)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f780   352  movz x16, #0x12f
0xffff7ab8f784   356  str x0, [x3, x16]
0xffff7ab8f788   360  ldr x0, pc+432 (addr 0x0000ffff7ab8f938)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f78c   364  movz x16, #0x137
0xffff7ab8f790   368  str x0, [x3, x16]
0xffff7ab8f794   372  ldr x0, pc+428 (addr 0x0000ffff7ab8f940)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f798   376  movz x16, #0x13f
0xffff7ab8f79c   380  str x0, [x3, x16]
0xffff7ab8f7a0   384  ldr x0, pc+424 (addr 0x0000ffff7ab8f948)    ;; object: 0x20d04241 <undefined>
0xffff7ab8f7a4   388  movz x16, #0x147
0xffff7ab8f7a8   392  str x0, [x3, x16]
0xffff7ab8f7ac   396  mov x0, x3
0xffff7ab8f7b0   400  ret
0xffff7ab8f7b4   404  sub csp, jssp, #0x10 (16)
0xffff7ab8f7b8   408  stp fp, lr, [jssp, #-16]!
0xffff7ab8f7bc   412  movz fp, #0xa00000000
0xffff7ab8f7c0   416  sub csp, jssp, #0x8 (8)
0xffff7ab8f7c4   420  str fp, [jssp, #-8]!
0xffff7ab8f7c8   424  add fp, jssp, #0x8 (8)
0xffff7ab8f7cc   428  movz x3, #0x0
0xffff7ab8f7d0   432  mov x16, lr
0xffff7ab8f7d4   436  ldr x17, pc+380 (addr 0x0000ffff7ab8f950)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab8f7d8   440  blr x17
0xffff7ab8f7dc   444  movz x0, #0x15000000000
0xffff7ab8f7e0   448  movz x10, #0x0
0xffff7ab8f7e4   452  sub csp, jssp, #0x10 (16)
0xffff7ab8f7e8   456  stp x10, x0, [jssp, #-16]!
0xffff7ab8f7ec   460  movz x0, #0x2
0xffff7ab8f7f0   464  movz x1, #0x5b88
0xffff7ab8f7f4   468  movk x1, #0xe2, lsl #16
0xffff7ab8f7f8   472  ldr x16, pc+352 (addr 0x0000ffff7ab8f958)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab8f7fc   476  blr x16
0xffff7ab8f800   480  str x0, [jssp, #24]
0xffff7ab8f804   484  ldr x16, pc+348 (addr 0x0000ffff7ab8f960)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab8f808   488  blr x16
0xffff7ab8f80c   492  ldr lr, [jssp, #16]
0xffff7ab8f810   496  ldp xzr, fp, [jssp], #24
0xffff7ab8f814   500  b #-0x1d4 (addr 0xffff7ab8f640)
0xffff7ab8f818   504  58000a7f       constant pool begin (num_const = 83)    ;; constant pool
0xffff7ab8f81c   508  d63f03e0       constant
0xffff7ab8f820   512  4ec06149       constant
0xffff7ab8f824   516  00000000       constant
0xffff7ab8f828   520  20d04519       constant
0xffff7ab8f82c   524  00000000       constant
0xffff7ab8f830   528  20d04241       constant
0xffff7ab8f834   532  00000000       constant
0xffff7ab8f838   536  20d04241       constant
0xffff7ab8f83c   540  00000000       constant
0xffff7ab8f840   544  20d04241       constant
0xffff7ab8f844   548  00000000       constant
0xffff7ab8f848   552  20d04241       constant
0xffff7ab8f84c   556  00000000       constant
0xffff7ab8f850   560  20d04241       constant
0xffff7ab8f854   564  00000000       constant
0xffff7ab8f858   568  20d04241       constant
0xffff7ab8f85c   572  00000000       constant
0xffff7ab8f860   576  20d04241       constant
0xffff7ab8f864   580  00000000       constant
0xffff7ab8f868   584  20d04241       constant
0xffff7ab8f86c   588  00000000       constant
0xffff7ab8f870   592  20d04241       constant
0xffff7ab8f874   596  00000000       constant
0xffff7ab8f878   600  20d04241       constant
0xffff7ab8f87c   604  00000000       constant
0xffff7ab8f880   608  20d04241       constant
0xffff7ab8f884   612  00000000       constant
0xffff7ab8f888   616  20d04241       constant
0xffff7ab8f88c   620  00000000       constant
0xffff7ab8f890   624  20d04241       constant
0xffff7ab8f894   628  00000000       constant
0xffff7ab8f898   632  20d04241       constant
0xffff7ab8f89c   636  00000000       constant
0xffff7ab8f8a0   640  20d04241       constant
0xffff7ab8f8a4   644  00000000       constant
0xffff7ab8f8a8   648  20d04241       constant
0xffff7ab8f8ac   652  00000000       constant
0xffff7ab8f8b0   656  20d04241       constant
0xffff7ab8f8b4   660  00000000       constant
0xffff7ab8f8b8   664  20d04241       constant
0xffff7ab8f8bc   668  00000000       constant
0xffff7ab8f8c0   672  20d04241       constant
0xffff7ab8f8c4   676  00000000       constant
0xffff7ab8f8c8   680  20d04241       constant
0xffff7ab8f8cc   684  00000000       constant
0xffff7ab8f8d0   688  20d04241       constant
0xffff7ab8f8d4   692  00000000       constant
0xffff7ab8f8d8   696  20d04241       constant
0xffff7ab8f8dc   700  00000000       constant
0xffff7ab8f8e0   704  20d04241       constant
0xffff7ab8f8e4   708  00000000       constant
0xffff7ab8f8e8   712  20d04241       constant
0xffff7ab8f8ec   716  00000000       constant
0xffff7ab8f8f0   720  20d04241       constant
0xffff7ab8f8f4   724  00000000       constant
0xffff7ab8f8f8   728  20d04241       constant
0xffff7ab8f8fc   732  00000000       constant
0xffff7ab8f900   736  20d04241       constant
0xffff7ab8f904   740  00000000       constant
0xffff7ab8f908   744  20d04241       constant
0xffff7ab8f90c   748  00000000       constant
0xffff7ab8f910   752  20d04241       constant
0xffff7ab8f914   756  00000000       constant
0xffff7ab8f918   760  20d04241       constant
0xffff7ab8f91c   764  00000000       constant
0xffff7ab8f920   768  20d04241       constant
0xffff7ab8f924   772  00000000       constant
0xffff7ab8f928   776  20d04241       constant
0xffff7ab8f92c   780  00000000       constant
0xffff7ab8f930   784  20d04241       constant
0xffff7ab8f934   788  00000000       constant
0xffff7ab8f938   792  20d04241       constant
0xffff7ab8f93c   796  00000000       constant
0xffff7ab8f940   800  20d04241       constant
0xffff7ab8f944   804  00000000       constant
0xffff7ab8f948   808  20d04241       constant
0xffff7ab8f94c   812  00000000       constant
0xffff7ab8f950   816  7ab06820       constant
0xffff7ab8f954   820  0000ffff       constant
0xffff7ab8f958   824  7ab06260       constant
0xffff7ab8f95c   828  0000ffff       constant
0xffff7ab8f960   832  7ab068e0       constant
0xffff7ab8f964   836  0000ffff       constant


Safepoints (size = 21)
0xffff7ab8f800   480  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 47)
0xffff7ab8f640  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab8f658  embedded object  (0x20d04519 <the hole>)
0xffff7ab8f668  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f670  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f678  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f680  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f688  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f690  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f698  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6a0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6a8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6b0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6b8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6c0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6c8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6d0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6d8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6e0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6e8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6f0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f6f8  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f700  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f708  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f710  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f718  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f720  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f728  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f730  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f738  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f740  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f74c  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f758  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f764  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f770  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f77c  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f788  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f794  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f7a0  embedded object  (0x20d04241 <undefined>)
0xffff7ab8f7d4  code target (STUB)  (0xffff7ab06820)
0xffff7ab8f7f8  code target (STUB)  (0xffff7ab06260)
0xffff7ab8f804  code target (STUB)  (0xffff7ab068e0)
0xffff7ab8f818  constant pool (size 336)


kind = HANDLER
major_key = <NoCache>Stub
name = process
compiler = unknown
Instructions (size = 120)
0xffff7ab93300     0  sub csp, jssp, #0x8 (8)
0xffff7ab93304     4  str x3, [jssp, #-8]!
0xffff7ab93308     8  sub csp, jssp, #0x8 (8)
0xffff7ab9330c    12  str x0, [jssp, #-8]!
0xffff7ab93310    16  ldr x0, pc+80 (addr 0x0000ffff7ab93360)    ;; object: 0x20dc5d51 Cell for 0
0xffff7ab93314    20  ldur x0, [x0, #7]
0xffff7ab93318    24  cmp x0, #0x0 (0)
0xffff7ab9331c    28  b.ne #+0x2c (addr 0xffff7ab93348)
0xffff7ab93320    32  ldr x0, pc+72 (addr 0x0000ffff7ab93368)    ;; object: 0x20dd89f9 WeakCell for 0x20dc79b9 PropertyCell for 0x56e92ce9 <a process with map 0x4ec1c0f1>
0xffff7ab93324    36  ldur x0, [x0, #7]
0xffff7ab93328    40  tbz w0, #0, #+0x20 (addr 0xffff7ab93348)
0xffff7ab9332c    44  ldur x0, [x0, #15]
0xffff7ab93330    48  ldr x16, [x26, #88]
0xffff7ab93334    52  cmp x0, x16
0xffff7ab93338    56  b.eq #+0x10 (addr 0xffff7ab93348)
0xffff7ab9333c    60  add jssp, jssp, #0x10 (16)
0xffff7ab93340    64  ret
0xffff7ab93344    68  b #+0x14 (addr 0xffff7ab93358)
0xffff7ab93348    72  ldr x0, [jssp], #8
0xffff7ab9334c    76  ldr x3, [jssp], #8
0xffff7ab93350    80  ldr x16, pc+32 (addr 0x0000ffff7ab93370)    ;; code: BUILTIN
0xffff7ab93354    84  br x16
0xffff7ab93358    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab9335c    92  d63f03e0       constant
0xffff7ab93360    96  20dc5d51       constant
0xffff7ab93364   100  00000000       constant
0xffff7ab93368   104  20dd89f9       constant
0xffff7ab9336c   108  00000000       constant
0xffff7ab93370   112  7ab222e0       constant
0xffff7ab93374   116  0000ffff       constant


RelocInfo (size = 9)
0xffff7ab93310  embedded object  (0x20dc5d51 Cell for 0)
0xffff7ab93320  embedded object  (0x20dd89f9 WeakCell for 0x20dc79b9 PropertyCell for 0x56e92ce9 <a process with map 0x4ec1c0f1>)
0xffff7ab93350  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab93358  constant pool (size 32)

kind = HANDLER
major_key = <NoCache>Stub
name = internal/util
compiler = unknown
Instructions (size = 184)
0xffff7ab933e0     0  sub csp, jssp, #0x8 (8)
0xffff7ab933e4     4  str x3, [jssp, #-8]!
0xffff7ab933e8     8  sub csp, jssp, #0x8 (8)
0xffff7ab933ec    12  str x4, [jssp, #-8]!
0xffff7ab933f0    16  ldr x3, pc+112 (addr 0x0000ffff7ab93460)    ;; object: 0x20d63e59 Cell for 0
0xffff7ab933f4    20  ldur x3, [x3, #7]
0xffff7ab933f8    24  cmp x3, #0x0 (0)
0xffff7ab933fc    28  b.ne #+0x44 (addr 0xffff7ab93440)
0xffff7ab93400    32  tbz w0, #0, #+0x40 (addr 0xffff7ab93440)
0xffff7ab93404    36  ldur x3, [x0, #-1]
0xffff7ab93408    40  ldr x4, pc+96 (addr 0x0000ffff7ab93468)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab9340c    44  ldur x4, [x4, #7]
0xffff7ab93410    48  cmp x3, x4
0xffff7ab93414    52  b.ne #+0x2c (addr 0xffff7ab93440)
0xffff7ab93418    56  ldr x5, pc+88 (addr 0x0000ffff7ab93470)    ;; object: 0x20ddacf1 WeakCell for 0x4ec1f2c9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab9341c    60  ldur x5, [x5, #7]
0xffff7ab93420    64  tbz w5, #0, #+0x20 (addr 0xffff7ab93440)
0xffff7ab93424    68  ldursw x4, [x5, #15]
0xffff7ab93428    72  tbnz w4, #23, #+0x18 (addr 0xffff7ab93440)
0xffff7ab9342c    76  ldr x4, [jssp], #8
0xffff7ab93430    80  ldr x3, [jssp], #8
0xffff7ab93434    84  ldr x2, pc+68 (addr 0x0000ffff7ab93478)    ;; object: 0x20db9451 <String[13]: internal/util>
0xffff7ab93438    88  ldr x16, pc+72 (addr 0x0000ffff7ab93480)    ;; code: HANDLER, StoreTransitionStub, minor: 198662
0xffff7ab9343c    92  br x16
0xffff7ab93440    96  ldr x2, pc+72 (addr 0x0000ffff7ab93488)    ;; object: 0x20db9451 <String[13]: internal/util>
0xffff7ab93444   100  ldr x4, [jssp], #8
0xffff7ab93448   104  ldr x3, [jssp], #8
0xffff7ab9344c   108  ldr x16, pc+68 (addr 0x0000ffff7ab93490)    ;; code: BUILTIN
0xffff7ab93450   112  br x16
0xffff7ab93454   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab93458   120  d63f03e0       constant
0xffff7ab9345c   124  d503201f       constant
0xffff7ab93460   128  20d63e59       constant
0xffff7ab93464   132  00000000       constant
0xffff7ab93468   136  20dc22b1       constant
0xffff7ab9346c   140  00000000       constant
0xffff7ab93470   144  20ddacf1       constant
0xffff7ab93474   148  00000000       constant
0xffff7ab93478   152  20db9451       constant
0xffff7ab9347c   156  00000000       constant
0xffff7ab93480   160  7ab8c000       constant
0xffff7ab93484   164  0000ffff       constant
0xffff7ab93488   168  20db9451       constant
0xffff7ab9348c   172  00000000       constant
0xffff7ab93490   176  7ab22420       constant
0xffff7ab93494   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7ab933f0  embedded object  (0x20d63e59 Cell for 0)
0xffff7ab93408  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab93418  embedded object  (0x20ddacf1 WeakCell for 0x4ec1f2c9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab93434  embedded object  (0x20db9451 <String[13]: internal/util>)
0xffff7ab93438  code target (HANDLER)  (0xffff7ab8c000)
0xffff7ab93440  embedded object  (0x20db9451 <String[13]: internal/util>)
0xffff7ab9344c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab93454  constant pool (size 68)

kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 262145
name = CallICStub(args(1), NULL_OR_UNDEFINED, 
compiler = unknown
Instructions (size = 488)
0xffff7ab93500     0  add x4, x2, x3, asr #29
0xffff7ab93504     4  ldur x4, [x4, #15]
0xffff7ab93508     8  ldur x5, [x4, #7]
0xffff7ab9350c    12  cmp x5, x1
0xffff7ab93510    16  b.ne #+0x2c (addr 0xffff7ab9353c)
0xffff7ab93514    20  tbz w1, #0, #+0x28 (addr 0xffff7ab9353c)
0xffff7ab93518    24  add x2, x2, x3, asr #29
0xffff7ab9351c    28  add x2, x2, #0x18 (24)
0xffff7ab93520    32  ldur x3, [x2, #-1]
0xffff7ab93524    36  movz x16, #0x200000000
0xffff7ab93528    40  add x3, x3, x16
0xffff7ab9352c    44  stur x3, [x2, #-1]
0xffff7ab93530    48  movz x0, #0x1
0xffff7ab93534    52  ldr x16, pc+372 (addr 0x0000ffff7ab936a8)    ;; code: BUILTIN
0xffff7ab93538    56  br x16
0xffff7ab9353c    60  ldr x16, [x26, #2400]
0xffff7ab93540    64  cmp x4, x16
0xffff7ab93544    68  b.eq #+0x78 (addr 0xffff7ab935bc)
0xffff7ab93548    72  ldur x5, [x4, #-1]
0xffff7ab9354c    76  ldr x16, [x26, #2736]
0xffff7ab93550    80  cmp x5, x16
0xffff7ab93554    84  b.ne #+0x40 (addr 0xffff7ab93594)
0xffff7ab93558    88  ldur x5, [cp, #39]
0xffff7ab9355c    92  ldur x5, [x5, #95]
0xffff7ab93560    96  cmp x1, x5
0xffff7ab93564   100  b.ne #+0xec (addr 0xffff7ab93650)
0xffff7ab93568   104  movz x0, #0x1
0xffff7ab9356c   108  add x2, x2, x3, asr #29
0xffff7ab93570   112  add x2, x2, #0x18 (24)
0xffff7ab93574   116  ldur x3, [x2, #-1]
0xffff7ab93578   120  movz x16, #0x200000000
0xffff7ab9357c   124  add x3, x3, x16
0xffff7ab93580   128  stur x3, [x2, #-1]
0xffff7ab93584   132  mov x2, x4
0xffff7ab93588   136  mov x3, x1
0xffff7ab9358c   140  ldr x16, pc+292 (addr 0x0000ffff7ab936b0)    ;; code: STUB, ArrayConstructorStub, minor: 2
0xffff7ab93590   144  br x16
0xffff7ab93594   148  ldr x16, [x26, #2568]
0xffff7ab93598   152  cmp x4, x16
0xffff7ab9359c   156  b.eq #+0xb4 (addr 0xffff7ab93650)
0xffff7ab935a0   160  ldur x5, [x4, #-1]
0xffff7ab935a4   164  ldrb w5, [x5, #11]
0xffff7ab935a8   168  cmp x5, #0xc9 (201)
0xffff7ab935ac   172  b.ne #+0xa4 (addr 0xffff7ab93650)
0xffff7ab935b0   176  add x4, x2, x3, asr #29
0xffff7ab935b4   180  ldr x5, [x26, #2400]
0xffff7ab935b8   184  stur x5, [x4, #15]
0xffff7ab935bc   188  movz x0, #0x1
0xffff7ab935c0   192  ldr x16, pc+248 (addr 0x0000ffff7ab936b8)    ;; code: BUILTIN
0xffff7ab935c4   196  br x16
0xffff7ab935c8   200  tbz w1, #0, #+0x88 (addr 0xffff7ab93650)
0xffff7ab935cc   204  ldur x5, [x1, #-1]
0xffff7ab935d0   208  ldrb w5, [x5, #11]
0xffff7ab935d4   212  cmp x5, #0xc9 (201)
0xffff7ab935d8   216  b.ne #+0x78 (addr 0xffff7ab93650)
0xffff7ab935dc   220  ldur x5, [cp, #39]
0xffff7ab935e0   224  ldur x5, [x5, #95]
0xffff7ab935e4   228  cmp x1, x5
0xffff7ab935e8   232  b.eq #+0x68 (addr 0xffff7ab93650)
0xffff7ab935ec   236  ldur x4, [x1, #39]
0xffff7ab935f0   240  ldur x4, [x4, #39]
0xffff7ab935f4   244  ldur x5, [cp, #39]
0xffff7ab935f8   248  cmp x4, x5
0xffff7ab935fc   252  b.ne #+0x54 (addr 0xffff7ab93650)
0xffff7ab93600   256  movz x5, #0x200000000
0xffff7ab93604   260  adds x4, x2, x3, asr #29
0xffff7ab93608   264  stur x5, [x4, #23]
0xffff7ab9360c   268  movz x16, #0xc00000000
0xffff7ab93610   272  sub csp, jssp, #0x10 (16)
0xffff7ab93614   276  stp fp, lr, [jssp, #-16]!
0xffff7ab93618   280  sub csp, jssp, #0x10 (16)
0xffff7ab9361c   284  str x16, [jssp, #-8]!
0xffff7ab93620   288  ldr x17, pc+160 (addr 0x0000ffff7ab936c0)    ;; object: 0xffff7ab934a1 <Code: CALL_IC>
0xffff7ab93624   292  sub csp, jssp, #0x10 (16)
0xffff7ab93628   296  str x17, [jssp, #-8]!
0xffff7ab9362c   300  add fp, jssp, #0x10 (16)
0xffff7ab93630   304  sub csp, jssp, #0x8 (8)
0xffff7ab93634   308  str x1, [jssp, #-8]!
0xffff7ab93638   312  ldr x16, pc+144 (addr 0x0000ffff7ab936c8)    ;; code: STUB, CreateWeakCellStub, minor: 0
0xffff7ab9363c   316  blr x16
0xffff7ab93640   320  ldr x1, [jssp], #8
0xffff7ab93644   324  mov jssp, fp
0xffff7ab93648   328  ldp fp, lr, [jssp], #16
0xffff7ab9364c   332  b #-0x11c (addr 0xffff7ab93530)
0xffff7ab93650   336  movz x16, #0xc00000000
0xffff7ab93654   340  sub csp, jssp, #0x10 (16)
0xffff7ab93658   344  stp fp, lr, [jssp, #-16]!
0xffff7ab9365c   348  sub csp, jssp, #0x10 (16)
0xffff7ab93660   352  str x16, [jssp, #-8]!
0xffff7ab93664   356  ldr x17, pc+108 (addr 0x0000ffff7ab936d0)    ;; object: 0xffff7ab934a1 <Code: CALL_IC>
0xffff7ab93668   360  sub csp, jssp, #0x10 (16)
0xffff7ab9366c   364  str x17, [jssp, #-8]!
0xffff7ab93670   368  add fp, jssp, #0x10 (16)
0xffff7ab93674   372  sub csp, jssp, #0x18 (24)
0xffff7ab93678   376  stp x3, x2, [jssp, #-24]!
0xffff7ab9367c   380  str x1, [jssp, #16]
0xffff7ab93680   384  movz x0, #0x3
0xffff7ab93684   388  ldr x1, pc+84 (addr 0x0000ffff7ab936d8)    ;; external reference (Runtime::CallIC_Miss)
0xffff7ab93688   392  ldr x16, pc+88 (addr 0x0000ffff7ab936e0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab9368c   396  blr x16
0xffff7ab93690   400  mov x1, x0
0xffff7ab93694   404  mov jssp, fp
0xffff7ab93698   408  ldp fp, lr, [jssp], #16
0xffff7ab9369c   412  b #-0xe0 (addr 0xffff7ab935bc)
0xffff7ab936a0   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7ab936a4   420  d63f03e0       constant
0xffff7ab936a8   424  7ab1e280       constant
0xffff7ab936ac   428  0000ffff       constant
0xffff7ab936b0   432  7ab30b00       constant
0xffff7ab936b4   436  0000ffff       constant
0xffff7ab936b8   440  7ab1f560       constant
0xffff7ab936bc   444  0000ffff       constant
0xffff7ab936c0   448  7ab934a1       constant
0xffff7ab936c4   452  0000ffff       constant
0xffff7ab936c8   456  7ab0ddc0       constant
0xffff7ab936cc   460  0000ffff       constant
0xffff7ab936d0   464  7ab934a1       constant
0xffff7ab936d4   468  0000ffff       constant
0xffff7ab936d8   472  00c86928       constant
0xffff7ab936dc   476  00000000       constant
0xffff7ab936e0   480  7ab06060       constant
0xffff7ab936e4   484  0000ffff       constant


RelocInfo (size = 19)
0xffff7ab93534  code target (BUILTIN)  (0xffff7ab1e280)
0xffff7ab9358c  code target (STUB)  (0xffff7ab30b00)
0xffff7ab935c0  code target (BUILTIN)  (0xffff7ab1f560)
0xffff7ab93620  embedded object  (0xffff7ab934a1 <Code: CALL_IC>)
0xffff7ab93638  code target (STUB)  (0xffff7ab0ddc0)
0xffff7ab93664  embedded object  (0xffff7ab934a1 <Code: CALL_IC>)
0xffff7ab93684  external reference (Runtime::CallIC_Miss)  (0xc86928)
0xffff7ab93688  code target (STUB)  (0xffff7ab06060)
0xffff7ab936a0  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 262145
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0xffff7ab93760     0  ldur x2, [fp, #-16]
0xffff7ab93764     4  ldur x2, [x2, #31]
0xffff7ab93768     8  ldur x2, [x2, #87]
0xffff7ab9376c    12  ldr x16, pc+20 (addr 0x0000ffff7ab93780)    ;; code: CALL_IC, GENERIC
0xffff7ab93770    16  br x16
0xffff7ab93774    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab93778    24  d63f03e0       constant
0xffff7ab9377c    28  d503201f       constant
0xffff7ab93780    32  7ab93500       constant
0xffff7ab93784    36  0000ffff       constant


RelocInfo (size = 7)
0xffff7ab9376c  code target (CALL_IC)  (0xffff7ab93500)
0xffff7ab93774  constant pool (size 20)


--- Code ---
kind = TO_BOOLEAN_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 32
type = NORMAL
name = ToBooleanICStub
compiler = crankshaft
Instructions (size = 152)
0xffff7ab94840     0  tbz w0, #0, #+0x50 (addr 0xffff7ab94890)
0xffff7ab94844     4  ldur x2, [x0, #-1]
0xffff7ab94848     8  ldrb w1, [x2, #11]
0xffff7ab9484c    12  cmp x1, #0x80 (128)
0xffff7ab94850    16  b.ge #+0x10 (addr 0xffff7ab94860)
0xffff7ab94854    20  ldur x1, [x0, #15]
0xffff7ab94858    24  cbz x1, #+0xc (addr 0xffff7ab94864)
0xffff7ab9485c    28  b #+0x10 (addr 0xffff7ab9486c)
0xffff7ab94860    32  b #+0x30 (addr 0xffff7ab94890)
0xffff7ab94864    36  ldr x0, pc+28 (addr 0x0000ffff7ab94880)    ;; object: 0x20d042b1 <false>
0xffff7ab94868    40  ret
0xffff7ab9486c    44  ldr x0, pc+28 (addr 0x0000ffff7ab94888)    ;; object: 0x20d04281 <true>
0xffff7ab94870    48  ret
0xffff7ab94874    52  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab94878    56  d63f03e0       constant
0xffff7ab9487c    60  d503201f       constant
0xffff7ab94880    64  20d042b1       constant
0xffff7ab94884    68  00000000       constant
0xffff7ab94888    72  20d04281       constant
0xffff7ab9488c    76  00000000       constant
0xffff7ab94890    80  movz x16, #0x0
0xffff7ab94894    84  sub csp, jssp, #0x10 (16)
0xffff7ab94898    88  stp fp, lr, [jssp, #-16]!
0xffff7ab9489c    92  bl #+0x4 (addr 0xffff7ab948a0)
0xffff7ab948a0    96  movz x17, #0xa00000000
0xffff7ab948a4   100  sub csp, jssp, #0x10 (16)
0xffff7ab948a8   104  stp x17, cp, [jssp, #-16]!
0xffff7ab948ac   108  add fp, jssp, #0x10 (16)
0xffff7ab948b0   112  ldr x17, pc+24 (addr 0x0000ffff7ab948c8)    ;; lazy deoptimization bailout 0
0xffff7ab948b4   116  add x17, x17, x16
0xffff7ab948b8   120  br x17
0xffff7ab948bc   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab948c0   128  d63f03e0       constant
0xffff7ab948c4   132  d503201f       constant
0xffff7ab948c8   136  7a906000       constant
0xffff7ab948cc   140  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab94864  embedded object  (0x20d042b1 <false>)
0xffff7ab9486c  embedded object  (0x20d04281 <true>)
0xffff7ab94874  constant pool (size 28)
0xffff7ab948b0  runtime entry
0xffff7ab948bc  constant pool (size 20)

--- End code ---
kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 32
type = NORMAL
name = ToBooleanICStub(String)
compiler = crankshaft
Instructions (size = 152)
0xffff7ab94840     0  tbz w0, #0, #+0x50 (addr 0xffff7ab94890)
0xffff7ab94844     4  ldur x2, [x0, #-1]
0xffff7ab94848     8  ldrb w1, [x2, #11]
0xffff7ab9484c    12  cmp x1, #0x80 (128)
0xffff7ab94850    16  b.ge #+0x10 (addr 0xffff7ab94860)
0xffff7ab94854    20  ldur x1, [x0, #15]
0xffff7ab94858    24  cbz x1, #+0xc (addr 0xffff7ab94864)
0xffff7ab9485c    28  b #+0x10 (addr 0xffff7ab9486c)
0xffff7ab94860    32  b #+0x30 (addr 0xffff7ab94890)
0xffff7ab94864    36  ldr x0, pc+28 (addr 0x0000ffff7ab94880)    ;; object: 0x20d042b1 <false>
0xffff7ab94868    40  ret
0xffff7ab9486c    44  ldr x0, pc+28 (addr 0x0000ffff7ab94888)    ;; object: 0x20d04281 <true>
0xffff7ab94870    48  ret
0xffff7ab94874    52  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab94878    56  d63f03e0       constant
0xffff7ab9487c    60  d503201f       constant
0xffff7ab94880    64  20d042b1       constant
0xffff7ab94884    68  00000000       constant
0xffff7ab94888    72  20d04281       constant
0xffff7ab9488c    76  00000000       constant
0xffff7ab94890    80  movz x16, #0x0
0xffff7ab94894    84  sub csp, jssp, #0x10 (16)
0xffff7ab94898    88  stp fp, lr, [jssp, #-16]!
0xffff7ab9489c    92  bl #+0x4 (addr 0xffff7ab948a0)
0xffff7ab948a0    96  movz x17, #0xa00000000
0xffff7ab948a4   100  sub csp, jssp, #0x10 (16)
0xffff7ab948a8   104  stp x17, cp, [jssp, #-16]!
0xffff7ab948ac   108  add fp, jssp, #0x10 (16)
0xffff7ab948b0   112  ldr x17, pc+24 (addr 0x0000ffff7ab948c8)    ;; lazy deoptimization bailout 0
0xffff7ab948b4   116  add x17, x17, x16
0xffff7ab948b8   120  br x17
0xffff7ab948bc   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab948c0   128  d63f03e0       constant
0xffff7ab948c4   132  d503201f       constant
0xffff7ab948c8   136  7a906000       constant
0xffff7ab948cc   140  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab94864  embedded object  (0x20d042b1 <false>)
0xffff7ab9486c  embedded object  (0x20d04281 <true>)
0xffff7ab94874  constant pool (size 28)
0xffff7ab948b0  runtime entry
0xffff7ab948bc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = Symbol
compiler = unknown
Instructions (size = 120)
0xffff7ab94940     0  sub csp, jssp, #0x8 (8)
0xffff7ab94944     4  str x3, [jssp, #-8]!
0xffff7ab94948     8  sub csp, jssp, #0x8 (8)
0xffff7ab9494c    12  str x0, [jssp, #-8]!
0xffff7ab94950    16  ldr x0, pc+80 (addr 0x0000ffff7ab949a0)    ;; object: 0x20dc5d51 Cell for 0
0xffff7ab94954    20  ldur x0, [x0, #7]
0xffff7ab94958    24  cmp x0, #0x0 (0)
0xffff7ab9495c    28  b.ne #+0x2c (addr 0xffff7ab94988)
0xffff7ab94960    32  ldr x0, pc+72 (addr 0x0000ffff7ab949a8)    ;; object: 0x20ddd079 WeakCell for 0x20d42b39 PropertyCell for 0x20d42ad1 <JS Function Symbol (SharedFunctionInfo 0x20d42a29)>
0xffff7ab94964    36  ldur x0, [x0, #7]
0xffff7ab94968    40  tbz w0, #0, #+0x20 (addr 0xffff7ab94988)
0xffff7ab9496c    44  ldur x0, [x0, #15]
0xffff7ab94970    48  ldr x16, [x26, #88]
0xffff7ab94974    52  cmp x0, x16
0xffff7ab94978    56  b.eq #+0x10 (addr 0xffff7ab94988)
0xffff7ab9497c    60  add jssp, jssp, #0x10 (16)
0xffff7ab94980    64  ret
0xffff7ab94984    68  b #+0x14 (addr 0xffff7ab94998)
0xffff7ab94988    72  ldr x0, [jssp], #8
0xffff7ab9498c    76  ldr x3, [jssp], #8
0xffff7ab94990    80  ldr x16, pc+32 (addr 0x0000ffff7ab949b0)    ;; code: BUILTIN
0xffff7ab94994    84  br x16
0xffff7ab94998    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab9499c    92  d63f03e0       constant
0xffff7ab949a0    96  20dc5d51       constant
0xffff7ab949a4   100  00000000       constant
0xffff7ab949a8   104  20ddd079       constant
0xffff7ab949ac   108  00000000       constant
0xffff7ab949b0   112  7ab222e0       constant
0xffff7ab949b4   116  0000ffff       constant


RelocInfo (size = 9)
0xffff7ab94950  embedded object  (0x20dc5d51 Cell for 0)
0xffff7ab94960  embedded object  (0x20ddd079 WeakCell for 0x20d42b39 PropertyCell for 0x20d42ad1 <JS Function Symbol (SharedFunctionInfo 0x20d42a29)>)
0xffff7ab94990  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab94998  constant pool (size 32)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0xffff7ab94a20     0  tbz w0, #0, #+0x50 (addr 0xffff7ab94a70)
0xffff7ab94a24     4  mov x2, x0
0xffff7ab94a28     8  stur x2, [x1, #47]
0xffff7ab94a2c    12  add x3, x1, #0x2f (47)
0xffff7ab94a30    16  and x2, x2, #0xfffffffffff00000
0xffff7ab94a34    20  ldr x2, [x2, #8]
0xffff7ab94a38    24  tbz w2, #1, #+0x24 (addr 0xffff7ab94a5c)
0xffff7ab94a3c    28  and x2, x1, #0xfffffffffff00000
0xffff7ab94a40    32  ldr x2, [x2, #8]
0xffff7ab94a44    36  tbz w2, #2, #+0x18 (addr 0xffff7ab94a5c)
0xffff7ab94a48    40  sub csp, jssp, #0x8 (8)
0xffff7ab94a4c    44  str lr, [jssp, #-8]!
0xffff7ab94a50    48  ldr x16, pc+24 (addr 0x0000ffff7ab94a68)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab94a54    52  blr x16
0xffff7ab94a58    56  ldr lr, [jssp], #8
0xffff7ab94a5c    60  ret
0xffff7ab94a60    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab94a64    68  d63f03e0       constant
0xffff7ab94a68    72  7ab170c0       constant
0xffff7ab94a6c    76  0000ffff       constant
0xffff7ab94a70    80  movz x16, #0x0
0xffff7ab94a74    84  sub csp, jssp, #0x10 (16)
0xffff7ab94a78    88  stp fp, lr, [jssp, #-16]!
0xffff7ab94a7c    92  bl #+0x4 (addr 0xffff7ab94a80)
0xffff7ab94a80    96  movz x17, #0xa00000000
0xffff7ab94a84   100  sub csp, jssp, #0x10 (16)
0xffff7ab94a88   104  stp x17, cp, [jssp, #-16]!
0xffff7ab94a8c   108  add fp, jssp, #0x10 (16)
0xffff7ab94a90   112  ldr x17, pc+24 (addr 0x0000ffff7ab94aa8)    ;; lazy deoptimization bailout 0
0xffff7ab94a94   116  add x17, x17, x16
0xffff7ab94a98   120  br x17
0xffff7ab94a9c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab94aa0   128  d63f03e0       constant
0xffff7ab94aa4   132  d503201f       constant
0xffff7ab94aa8   136  7a906000       constant
0xffff7ab94aac   140  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7ab94a50  code target (STUB)  (0xffff7ab170c0)
0xffff7ab94a60  constant pool (size 16)
0xffff7ab94a90  runtime entry
0xffff7ab94a9c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0xffff7ab94a20     0  tbz w0, #0, #+0x50 (addr 0xffff7ab94a70)
0xffff7ab94a24     4  mov x2, x0
0xffff7ab94a28     8  stur x2, [x1, #47]
0xffff7ab94a2c    12  add x3, x1, #0x2f (47)
0xffff7ab94a30    16  and x2, x2, #0xfffffffffff00000
0xffff7ab94a34    20  ldr x2, [x2, #8]
0xffff7ab94a38    24  tbz w2, #1, #+0x24 (addr 0xffff7ab94a5c)
0xffff7ab94a3c    28  and x2, x1, #0xfffffffffff00000
0xffff7ab94a40    32  ldr x2, [x2, #8]
0xffff7ab94a44    36  tbz w2, #2, #+0x18 (addr 0xffff7ab94a5c)
0xffff7ab94a48    40  sub csp, jssp, #0x8 (8)
0xffff7ab94a4c    44  str lr, [jssp, #-8]!
0xffff7ab94a50    48  ldr x16, pc+24 (addr 0x0000ffff7ab94a68)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab94a54    52  blr x16
0xffff7ab94a58    56  ldr lr, [jssp], #8
0xffff7ab94a5c    60  ret
0xffff7ab94a60    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab94a64    68  d63f03e0       constant
0xffff7ab94a68    72  7ab170c0       constant
0xffff7ab94a6c    76  0000ffff       constant
0xffff7ab94a70    80  movz x16, #0x0
0xffff7ab94a74    84  sub csp, jssp, #0x10 (16)
0xffff7ab94a78    88  stp fp, lr, [jssp, #-16]!
0xffff7ab94a7c    92  bl #+0x4 (addr 0xffff7ab94a80)
0xffff7ab94a80    96  movz x17, #0xa00000000
0xffff7ab94a84   100  sub csp, jssp, #0x10 (16)
0xffff7ab94a88   104  stp x17, cp, [jssp, #-16]!
0xffff7ab94a8c   108  add fp, jssp, #0x10 (16)
0xffff7ab94a90   112  ldr x17, pc+24 (addr 0x0000ffff7ab94aa8)    ;; lazy deoptimization bailout 0
0xffff7ab94a94   116  add x17, x17, x16
0xffff7ab94a98   120  br x17
0xffff7ab94a9c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab94aa0   128  d63f03e0       constant
0xffff7ab94aa4   132  d503201f       constant
0xffff7ab94aa8   136  7a906000       constant
0xffff7ab94aac   140  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7ab94a50  code target (STUB)  (0xffff7ab170c0)
0xffff7ab94a60  constant pool (size 16)
0xffff7ab94a90  runtime entry
0xffff7ab94a9c  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 344)
0xffff7ab951e0     0  ldur x5, [x1, #15]
0xffff7ab951e4     4  ldur w6, [x5, #11]
0xffff7ab951e8     8  ldur x16, [x1, #23]
0xffff7ab951ec    12  ldur x16, [x16, #39]
0xffff7ab951f0    16  tst x16, #0x8
0xffff7ab951f4    20  b.ne #+0xcc (addr 0xffff7ab952c0)
0xffff7ab951f8    24  ldur x7, [x5, #23]
0xffff7ab951fc    28  ldur x5, [x5, #15]
0xffff7ab95200    32  add x5, x7, x5
0xffff7ab95204    36  tbnz w2, #0, #+0x20 (addr 0xffff7ab95224)
0xffff7ab95208    40  asr x8, x2, #32
0xffff7ab9520c    44  cmp w8, w6
0xffff7ab95210    48  b.hs #+0xc0 (addr 0xffff7ab952d0)
0xffff7ab95214    52  tbnz w0, #0, #+0x38 (addr 0xffff7ab9524c)
0xffff7ab95218    56  asr x7, x0, #32
0xffff7ab9521c    60  str w7, [x5, w8, sxtw #2]
0xffff7ab95220    64  ret
0xffff7ab95224    68  ldur x16, [x2, #-1]
0xffff7ab95228    72  ldr x17, [x26, #120]
0xffff7ab9522c    76  cmp x16, x17
0xffff7ab95230    80  b.ne #+0xb0 (addr 0xffff7ab952e0)
0xffff7ab95234    84  ldur d29, [x2, #7]
0xffff7ab95238    88  fcvtzs w8, d29
0xffff7ab9523c    92  scvtf d0, w8
0xffff7ab95240    96  fcmp d29, d0
0xffff7ab95244   100  b.ne #+0x9c (addr 0xffff7ab952e0)
0xffff7ab95248   104  b #-0x3c (addr 0xffff7ab9520c)
0xffff7ab9524c   108  ldur x16, [x0, #-1]
0xffff7ab95250   112  ldr x17, [x26, #120]
0xffff7ab95254   116  cmp x16, x17
0xffff7ab95258   120  b.ne #+0x30 (addr 0xffff7ab95288)
0xffff7ab9525c   124  ldur d30, [x0, #7]
0xffff7ab95260   128  fcvtzs x7, d30
0xffff7ab95264   132  cmp x7, #0x1 (1)
0xffff7ab95268   136  ccmn x7, #1, #nzcV, vc
0xffff7ab9526c   140  b.vc #+0x18 (addr 0xffff7ab95284)
0xffff7ab95270   144  sub csp, jssp, #0x8 (8)
0xffff7ab95274   148  str lr, [jssp, #-8]!
0xffff7ab95278   152  ldr x16, pc+64 (addr 0x0000ffff7ab952b8)    ;; code: STUB, DoubleToIStub, minor: 127424
0xffff7ab9527c   156  blr x16
0xffff7ab95280   160  ldr lr, [jssp], #8
0xffff7ab95284   164  b #+0x24 (addr 0xffff7ab952a8)
0xffff7ab95288   168  ldp x7, x6, [x26, #64]
0xffff7ab9528c   172  cmp x0, x7
0xffff7ab95290   176  cset x7, eq
0xffff7ab95294   180  ccmp x0, x6, #nZcv, ne
0xffff7ab95298   184  b.eq #+0x10 (addr 0xffff7ab952a8)
0xffff7ab9529c   188  ldr x16, [x26, #40]
0xffff7ab952a0   192  cmp x0, x16
0xffff7ab952a4   196  b.ne #+0x4c (addr 0xffff7ab952f0)
0xffff7ab952a8   200  b #-0x8c (addr 0xffff7ab9521c)
0xffff7ab952ac   204  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab952b0   208  d63f03e0       constant
0xffff7ab952b4   212  d503201f       constant
0xffff7ab952b8   216  7ab4b6c0       constant
0xffff7ab952bc   220  0000ffff       constant
0xffff7ab952c0   224  movz x16, #0x0
0xffff7ab952c4   228  sub csp, jssp, #0x10 (16)
0xffff7ab952c8   232  stp fp, lr, [jssp, #-16]!
0xffff7ab952cc   236  bl #+0x34 (addr 0xffff7ab95300)
0xffff7ab952d0   240  movz x16, #0x8
0xffff7ab952d4   244  sub csp, jssp, #0x10 (16)
0xffff7ab952d8   248  stp fp, lr, [jssp, #-16]!
0xffff7ab952dc   252  bl #+0x24 (addr 0xffff7ab95300)
0xffff7ab952e0   256  movz x16, #0x10
0xffff7ab952e4   260  sub csp, jssp, #0x10 (16)
0xffff7ab952e8   264  stp fp, lr, [jssp, #-16]!
0xffff7ab952ec   268  bl #+0x14 (addr 0xffff7ab95300)
0xffff7ab952f0   272  movz x16, #0x18
0xffff7ab952f4   276  sub csp, jssp, #0x10 (16)
0xffff7ab952f8   280  stp fp, lr, [jssp, #-16]!
0xffff7ab952fc   284  bl #+0x4 (addr 0xffff7ab95300)
0xffff7ab95300   288  movz x17, #0xa00000000
0xffff7ab95304   292  sub csp, jssp, #0x10 (16)
0xffff7ab95308   296  stp x17, cp, [jssp, #-16]!
0xffff7ab9530c   300  add fp, jssp, #0x10 (16)
0xffff7ab95310   304  ldr x17, pc+24 (addr 0x0000ffff7ab95328)    ;; lazy deoptimization bailout 0
0xffff7ab95314   308  add x17, x17, x16
0xffff7ab95318   312  br x17
0xffff7ab9531c   316  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab95320   320  d63f03e0       constant
0xffff7ab95324   324  d503201f       constant
0xffff7ab95328   328  7a906000       constant
0xffff7ab9532c   332  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0xffff7ab95278  code target (STUB)  (0xffff7ab4b6c0)
0xffff7ab952ac  constant pool (size 20)
0xffff7ab95310  runtime entry
0xffff7ab9531c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 344)
0xffff7ab951e0     0  ldur x5, [x1, #15]
0xffff7ab951e4     4  ldur w6, [x5, #11]
0xffff7ab951e8     8  ldur x16, [x1, #23]
0xffff7ab951ec    12  ldur x16, [x16, #39]
0xffff7ab951f0    16  tst x16, #0x8
0xffff7ab951f4    20  b.ne #+0xcc (addr 0xffff7ab952c0)
0xffff7ab951f8    24  ldur x7, [x5, #23]
0xffff7ab951fc    28  ldur x5, [x5, #15]
0xffff7ab95200    32  add x5, x7, x5
0xffff7ab95204    36  tbnz w2, #0, #+0x20 (addr 0xffff7ab95224)
0xffff7ab95208    40  asr x8, x2, #32
0xffff7ab9520c    44  cmp w8, w6
0xffff7ab95210    48  b.hs #+0xc0 (addr 0xffff7ab952d0)
0xffff7ab95214    52  tbnz w0, #0, #+0x38 (addr 0xffff7ab9524c)
0xffff7ab95218    56  asr x7, x0, #32
0xffff7ab9521c    60  str w7, [x5, w8, sxtw #2]
0xffff7ab95220    64  ret
0xffff7ab95224    68  ldur x16, [x2, #-1]
0xffff7ab95228    72  ldr x17, [x26, #120]
0xffff7ab9522c    76  cmp x16, x17
0xffff7ab95230    80  b.ne #+0xb0 (addr 0xffff7ab952e0)
0xffff7ab95234    84  ldur d29, [x2, #7]
0xffff7ab95238    88  fcvtzs w8, d29
0xffff7ab9523c    92  scvtf d0, w8
0xffff7ab95240    96  fcmp d29, d0
0xffff7ab95244   100  b.ne #+0x9c (addr 0xffff7ab952e0)
0xffff7ab95248   104  b #-0x3c (addr 0xffff7ab9520c)
0xffff7ab9524c   108  ldur x16, [x0, #-1]
0xffff7ab95250   112  ldr x17, [x26, #120]
0xffff7ab95254   116  cmp x16, x17
0xffff7ab95258   120  b.ne #+0x30 (addr 0xffff7ab95288)
0xffff7ab9525c   124  ldur d30, [x0, #7]
0xffff7ab95260   128  fcvtzs x7, d30
0xffff7ab95264   132  cmp x7, #0x1 (1)
0xffff7ab95268   136  ccmn x7, #1, #nzcV, vc
0xffff7ab9526c   140  b.vc #+0x18 (addr 0xffff7ab95284)
0xffff7ab95270   144  sub csp, jssp, #0x8 (8)
0xffff7ab95274   148  str lr, [jssp, #-8]!
0xffff7ab95278   152  ldr x16, pc+64 (addr 0x0000ffff7ab952b8)    ;; code: STUB, DoubleToIStub, minor: 127424
0xffff7ab9527c   156  blr x16
0xffff7ab95280   160  ldr lr, [jssp], #8
0xffff7ab95284   164  b #+0x24 (addr 0xffff7ab952a8)
0xffff7ab95288   168  ldp x7, x6, [x26, #64]
0xffff7ab9528c   172  cmp x0, x7
0xffff7ab95290   176  cset x7, eq
0xffff7ab95294   180  ccmp x0, x6, #nZcv, ne
0xffff7ab95298   184  b.eq #+0x10 (addr 0xffff7ab952a8)
0xffff7ab9529c   188  ldr x16, [x26, #40]
0xffff7ab952a0   192  cmp x0, x16
0xffff7ab952a4   196  b.ne #+0x4c (addr 0xffff7ab952f0)
0xffff7ab952a8   200  b #-0x8c (addr 0xffff7ab9521c)
0xffff7ab952ac   204  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab952b0   208  d63f03e0       constant
0xffff7ab952b4   212  d503201f       constant
0xffff7ab952b8   216  7ab4b6c0       constant
0xffff7ab952bc   220  0000ffff       constant
0xffff7ab952c0   224  movz x16, #0x0
0xffff7ab952c4   228  sub csp, jssp, #0x10 (16)
0xffff7ab952c8   232  stp fp, lr, [jssp, #-16]!
0xffff7ab952cc   236  bl #+0x34 (addr 0xffff7ab95300)
0xffff7ab952d0   240  movz x16, #0x8
0xffff7ab952d4   244  sub csp, jssp, #0x10 (16)
0xffff7ab952d8   248  stp fp, lr, [jssp, #-16]!
0xffff7ab952dc   252  bl #+0x24 (addr 0xffff7ab95300)
0xffff7ab952e0   256  movz x16, #0x10
0xffff7ab952e4   260  sub csp, jssp, #0x10 (16)
0xffff7ab952e8   264  stp fp, lr, [jssp, #-16]!
0xffff7ab952ec   268  bl #+0x14 (addr 0xffff7ab95300)
0xffff7ab952f0   272  movz x16, #0x18
0xffff7ab952f4   276  sub csp, jssp, #0x10 (16)
0xffff7ab952f8   280  stp fp, lr, [jssp, #-16]!
0xffff7ab952fc   284  bl #+0x4 (addr 0xffff7ab95300)
0xffff7ab95300   288  movz x17, #0xa00000000
0xffff7ab95304   292  sub csp, jssp, #0x10 (16)
0xffff7ab95308   296  stp x17, cp, [jssp, #-16]!
0xffff7ab9530c   300  add fp, jssp, #0x10 (16)
0xffff7ab95310   304  ldr x17, pc+24 (addr 0x0000ffff7ab95328)    ;; lazy deoptimization bailout 0
0xffff7ab95314   308  add x17, x17, x16
0xffff7ab95318   312  br x17
0xffff7ab9531c   316  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab95320   320  d63f03e0       constant
0xffff7ab95324   324  d503201f       constant
0xffff7ab95328   328  7a906000       constant
0xffff7ab9532c   332  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0xffff7ab95278  code target (STUB)  (0xffff7ab4b6c0)
0xffff7ab952ac  constant pool (size 20)
0xffff7ab95310  runtime entry
0xffff7ab9531c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = Uint8Array
compiler = unknown
Instructions (size = 120)
0xffff7ab959e0     0  sub csp, jssp, #0x8 (8)
0xffff7ab959e4     4  str x3, [jssp, #-8]!
0xffff7ab959e8     8  sub csp, jssp, #0x8 (8)
0xffff7ab959ec    12  str x0, [jssp, #-8]!
0xffff7ab959f0    16  ldr x0, pc+80 (addr 0x0000ffff7ab95a40)    ;; object: 0x20dc5d51 Cell for 0
0xffff7ab959f4    20  ldur x0, [x0, #7]
0xffff7ab959f8    24  cmp x0, #0x0 (0)
0xffff7ab959fc    28  b.ne #+0x2c (addr 0xffff7ab95a28)
0xffff7ab95a00    32  ldr x0, pc+72 (addr 0x0000ffff7ab95a48)    ;; object: 0x20ddf5c9 WeakCell for 0x20d48251 PropertyCell for 0x20d481e9 <JS Function Uint8Array (SharedFunctionInfo 0x20d48141)>
0xffff7ab95a04    36  ldur x0, [x0, #7]
0xffff7ab95a08    40  tbz w0, #0, #+0x20 (addr 0xffff7ab95a28)
0xffff7ab95a0c    44  ldur x0, [x0, #15]
0xffff7ab95a10    48  ldr x16, [x26, #88]
0xffff7ab95a14    52  cmp x0, x16
0xffff7ab95a18    56  b.eq #+0x10 (addr 0xffff7ab95a28)
0xffff7ab95a1c    60  add jssp, jssp, #0x10 (16)
0xffff7ab95a20    64  ret
0xffff7ab95a24    68  b #+0x14 (addr 0xffff7ab95a38)
0xffff7ab95a28    72  ldr x0, [jssp], #8
0xffff7ab95a2c    76  ldr x3, [jssp], #8
0xffff7ab95a30    80  ldr x16, pc+32 (addr 0x0000ffff7ab95a50)    ;; code: BUILTIN
0xffff7ab95a34    84  br x16
0xffff7ab95a38    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab95a3c    92  d63f03e0       constant
0xffff7ab95a40    96  20dc5d51       constant
0xffff7ab95a44   100  00000000       constant
0xffff7ab95a48   104  20ddf5c9       constant
0xffff7ab95a4c   108  00000000       constant
0xffff7ab95a50   112  7ab222e0       constant
0xffff7ab95a54   116  0000ffff       constant


RelocInfo (size = 9)
0xffff7ab959f0  embedded object  (0x20dc5d51 Cell for 0)
0xffff7ab95a00  embedded object  (0x20ddf5c9 WeakCell for 0x20d48251 PropertyCell for 0x20d481e9 <JS Function Uint8Array (SharedFunctionInfo 0x20d48141)>)
0xffff7ab95a30  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab95a38  constant pool (size 32)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0xffff7ab95ac0     0  ldur x0, [x1, #47]
0xffff7ab95ac4     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0xffff7ab95ac0     0  ldur x0, [x1, #47]
0xffff7ab95ac4     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = TO_BOOLEAN_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 17
type = NORMAL
name = ToBooleanICStub
compiler = crankshaft
Instructions (size = 160)
0xffff7ab95b40     0  ldr x16, [x26, #40]
0xffff7ab95b44     4  cmp x0, x16
0xffff7ab95b48     8  b.eq #+0x24 (addr 0xffff7ab95b6c)
0xffff7ab95b4c    12  tbz w0, #0, #+0x4c (addr 0xffff7ab95b98)
0xffff7ab95b50    16  ldur x2, [x0, #-1]
0xffff7ab95b54    20  ldrb w1, [x2, #12]
0xffff7ab95b58    24  tbnz w1, #4, #+0x14 (addr 0xffff7ab95b6c)
0xffff7ab95b5c    28  ldrb w1, [x2, #11]
0xffff7ab95b60    32  cmp x1, #0xb1 (177)
0xffff7ab95b64    36  b.ge #+0x10 (addr 0xffff7ab95b74)
0xffff7ab95b68    40  b #+0x30 (addr 0xffff7ab95b98)
0xffff7ab95b6c    44  ldr x0, pc+28 (addr 0x0000ffff7ab95b88)    ;; object: 0x20d042b1 <false>
0xffff7ab95b70    48  ret
0xffff7ab95b74    52  ldr x0, pc+28 (addr 0x0000ffff7ab95b90)    ;; object: 0x20d04281 <true>
0xffff7ab95b78    56  ret
0xffff7ab95b7c    60  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab95b80    64  d63f03e0       constant
0xffff7ab95b84    68  d503201f       constant
0xffff7ab95b88    72  20d042b1       constant
0xffff7ab95b8c    76  00000000       constant
0xffff7ab95b90    80  20d04281       constant
0xffff7ab95b94    84  00000000       constant
0xffff7ab95b98    88  movz x16, #0x0
0xffff7ab95b9c    92  sub csp, jssp, #0x10 (16)
0xffff7ab95ba0    96  stp fp, lr, [jssp, #-16]!
0xffff7ab95ba4   100  bl #+0x4 (addr 0xffff7ab95ba8)
0xffff7ab95ba8   104  movz x17, #0xa00000000
0xffff7ab95bac   108  sub csp, jssp, #0x10 (16)
0xffff7ab95bb0   112  stp x17, cp, [jssp, #-16]!
0xffff7ab95bb4   116  add fp, jssp, #0x10 (16)
0xffff7ab95bb8   120  ldr x17, pc+24 (addr 0x0000ffff7ab95bd0)    ;; lazy deoptimization bailout 0
0xffff7ab95bbc   124  add x17, x17, x16
0xffff7ab95bc0   128  br x17
0xffff7ab95bc4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab95bc8   136  d63f03e0       constant
0xffff7ab95bcc   140  d503201f       constant
0xffff7ab95bd0   144  7a906000       constant
0xffff7ab95bd4   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab95b6c  embedded object  (0x20d042b1 <false>)
0xffff7ab95b74  embedded object  (0x20d04281 <true>)
0xffff7ab95b7c  constant pool (size 28)
0xffff7ab95bb8  runtime entry
0xffff7ab95bc4  constant pool (size 20)

--- End code ---
kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 17
type = NORMAL
name = ToBooleanICStub(Undefined,SpecObject)
compiler = crankshaft
Instructions (size = 160)
0xffff7ab95b40     0  ldr x16, [x26, #40]
0xffff7ab95b44     4  cmp x0, x16
0xffff7ab95b48     8  b.eq #+0x24 (addr 0xffff7ab95b6c)
0xffff7ab95b4c    12  tbz w0, #0, #+0x4c (addr 0xffff7ab95b98)
0xffff7ab95b50    16  ldur x2, [x0, #-1]
0xffff7ab95b54    20  ldrb w1, [x2, #12]
0xffff7ab95b58    24  tbnz w1, #4, #+0x14 (addr 0xffff7ab95b6c)
0xffff7ab95b5c    28  ldrb w1, [x2, #11]
0xffff7ab95b60    32  cmp x1, #0xb1 (177)
0xffff7ab95b64    36  b.ge #+0x10 (addr 0xffff7ab95b74)
0xffff7ab95b68    40  b #+0x30 (addr 0xffff7ab95b98)
0xffff7ab95b6c    44  ldr x0, pc+28 (addr 0x0000ffff7ab95b88)    ;; object: 0x20d042b1 <false>
0xffff7ab95b70    48  ret
0xffff7ab95b74    52  ldr x0, pc+28 (addr 0x0000ffff7ab95b90)    ;; object: 0x20d04281 <true>
0xffff7ab95b78    56  ret
0xffff7ab95b7c    60  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab95b80    64  d63f03e0       constant
0xffff7ab95b84    68  d503201f       constant
0xffff7ab95b88    72  20d042b1       constant
0xffff7ab95b8c    76  00000000       constant
0xffff7ab95b90    80  20d04281       constant
0xffff7ab95b94    84  00000000       constant
0xffff7ab95b98    88  movz x16, #0x0
0xffff7ab95b9c    92  sub csp, jssp, #0x10 (16)
0xffff7ab95ba0    96  stp fp, lr, [jssp, #-16]!
0xffff7ab95ba4   100  bl #+0x4 (addr 0xffff7ab95ba8)
0xffff7ab95ba8   104  movz x17, #0xa00000000
0xffff7ab95bac   108  sub csp, jssp, #0x10 (16)
0xffff7ab95bb0   112  stp x17, cp, [jssp, #-16]!
0xffff7ab95bb4   116  add fp, jssp, #0x10 (16)
0xffff7ab95bb8   120  ldr x17, pc+24 (addr 0x0000ffff7ab95bd0)    ;; lazy deoptimization bailout 0
0xffff7ab95bbc   124  add x17, x17, x16
0xffff7ab95bc0   128  br x17
0xffff7ab95bc4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab95bc8   136  d63f03e0       constant
0xffff7ab95bcc   140  d503201f       constant
0xffff7ab95bd0   144  7a906000       constant
0xffff7ab95bd4   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab95b6c  embedded object  (0x20d042b1 <false>)
0xffff7ab95b74  embedded object  (0x20d04281 <true>)
0xffff7ab95b7c  constant pool (size 28)
0xffff7ab95bb8  runtime entry
0xffff7ab95bc4  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*BOOLEAN -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 624)
0xffff7ab96240     0  orr x16, x1, x0
0xffff7ab96244     4  tbnz w16, #0, #+0x10 (addr 0xffff7ab96254)
0xffff7ab96248     8  asr x1, x1, #32
0xffff7ab9624c    12  sub x0, x1, x0, asr #32
0xffff7ab96250    16  ret
0xffff7ab96254    20  cmp x0, x1
0xffff7ab96258    24  b.ne #+0x30 (addr 0xffff7ab96288)
0xffff7ab9625c    28  ldur x16, [x0, #-1]
0xffff7ab96260    32  ldr x17, [x26, #120]
0xffff7ab96264    36  cmp x16, x17
0xffff7ab96268    40  b.eq #+0xc (addr 0xffff7ab96274)
0xffff7ab9626c    44  movz x0, #0x0
0xffff7ab96270    48  ret
0xffff7ab96274    52  ldur d0, [x0, #7]
0xffff7ab96278    56  fcmp d0, d0
0xffff7ab9627c    60  b.vc #-0x10 (addr 0xffff7ab9626c)
0xffff7ab96280    64  movn x0, #0x0
0xffff7ab96284    68  ret
0xffff7ab96288    72  and x16, x1, x0
0xffff7ab9628c    76  tbnz w16, #0, #+0x64 (addr 0xffff7ab962f0)
0xffff7ab96290    80  tbz w0, #0, #+0x24 (addr 0xffff7ab962b4)
0xffff7ab96294    84  ldur x16, [x0, #-1]
0xffff7ab96298    88  ldr x17, [x26, #120]
0xffff7ab9629c    92  cmp x16, x17
0xffff7ab962a0    96  b.eq #+0x8 (addr 0xffff7ab962a8)
0xffff7ab962a4   100  ret
0xffff7ab962a8   104  ldur d0, [x0, #7]
0xffff7ab962ac   108  scvtf d1, x1, #32
0xffff7ab962b0   112  b #+0x24 (addr 0xffff7ab962d4)
0xffff7ab962b4   116  ldur x16, [x1, #-1]
0xffff7ab962b8   120  ldr x17, [x26, #120]
0xffff7ab962bc   124  cmp x16, x17
0xffff7ab962c0   128  b.eq #+0xc (addr 0xffff7ab962cc)
0xffff7ab962c4   132  movz x0, #0x1
0xffff7ab962c8   136  ret
0xffff7ab962cc   140  ldur d1, [x1, #7]
0xffff7ab962d0   144  scvtf d0, x0, #32
0xffff7ab962d4   148  fcmp d1, d0
0xffff7ab962d8   152  b.vs #+0x10 (addr 0xffff7ab962e8)
0xffff7ab962dc   156  cset x0, gt
0xffff7ab962e0   160  csinv x0, x0, xzr, ge
0xffff7ab962e4   164  ret
0xffff7ab962e8   168  movn x0, #0x0
0xffff7ab962ec   172  ret
0xffff7ab962f0   176  ldur x10, [x0, #-1]
0xffff7ab962f4   180  ldur x12, [x1, #-1]
0xffff7ab962f8   184  ldrb w11, [x10, #11]
0xffff7ab962fc   188  ldrb w13, [x12, #11]
0xffff7ab96300   192  cmp x11, #0xb1 (177)
0xffff7ab96304   196  b.lt #+0x8 (addr 0xffff7ab9630c)
0xffff7ab96308   200  ret
0xffff7ab9630c   204  cmp x11, #0x83 (131)
0xffff7ab96310   208  movz x16, #0x83
0xffff7ab96314   212  ccmp x13, x16, #nZcv, ne
0xffff7ab96318   216  movz x16, #0xb1
0xffff7ab9631c   220  ccmp x13, x16, #NzcV, ne
0xffff7ab96320   224  b.ge #-0x18 (addr 0xffff7ab96308)
0xffff7ab96324   228  orr x14, x13, x11
0xffff7ab96328   232  tst x14, #0xc0
0xffff7ab9632c   236  b.eq #-0x24 (addr 0xffff7ab96308)
0xffff7ab96330   240  cmp x11, #0x81 (129)
0xffff7ab96334   244  b.ne #+0x18 (addr 0xffff7ab9634c)
0xffff7ab96338   248  cmp x12, x10
0xffff7ab9633c   252  b.ne #+0x10 (addr 0xffff7ab9634c)
0xffff7ab96340   256  ldur d1, [x1, #7]
0xffff7ab96344   260  ldur d0, [x0, #7]
0xffff7ab96348   264  b #-0x74 (addr 0xffff7ab962d4)
0xffff7ab9634c   268  movz x16, #0x87
0xffff7ab96350   272  and x14, x13, x16
0xffff7ab96354   276  movz x16, #0x87
0xffff7ab96358   280  and x15, x11, x16
0xffff7ab9635c   284  cmp x14, #0x4 (4)
0xffff7ab96360   288  ccmp x15, #4, #nzcv, eq
0xffff7ab96364   292  b.ne #+0x5c (addr 0xffff7ab963c0)
0xffff7ab96368   296  ldur x10, [x1, #15]
0xffff7ab9636c   300  ldur x11, [x0, #15]
0xffff7ab96370   304  cmp x10, x11
0xffff7ab96374   308  b.eq #+0xc (addr 0xffff7ab96380)
0xffff7ab96378   312  movz x0, #0x100000000
0xffff7ab9637c   316  ret
0xffff7ab96380   320  cbnz x10, #+0xc (addr 0xffff7ab9638c)
0xffff7ab96384   324  movz x0, #0x0
0xffff7ab96388   328  ret
0xffff7ab9638c   332  asr x10, x10, #32
0xffff7ab96390   336  add x11, x10, #0x17 (23)
0xffff7ab96394   340  add x1, x1, x11
0xffff7ab96398   344  add x0, x0, x11
0xffff7ab9639c   348  neg x10, x10
0xffff7ab963a0   352  ldrb w11, [x1, x10]
0xffff7ab963a4   356  ldrb w12, [x0, x10]
0xffff7ab963a8   360  cmp x11, x12
0xffff7ab963ac   364  b.ne #-0x34 (addr 0xffff7ab96378)
0xffff7ab963b0   368  add x10, x10, #0x1 (1)
0xffff7ab963b4   372  cbnz x10, #-0x14 (addr 0xffff7ab963a0)
0xffff7ab963b8   376  movz x0, #0x0
0xffff7ab963bc   380  ret
0xffff7ab963c0   384  movz x16, #0xc00000000
0xffff7ab963c4   388  sub csp, jssp, #0x10 (16)
0xffff7ab963c8   392  stp fp, lr, [jssp, #-16]!
0xffff7ab963cc   396  sub csp, jssp, #0x10 (16)
0xffff7ab963d0   400  str x16, [jssp, #-8]!
0xffff7ab963d4   404  ldr x17, pc+172 (addr 0x0000ffff7ab96480)    ;; object: 0xffff7ab961e1 <Code: COMPARE_IC>
0xffff7ab963d8   408  sub csp, jssp, #0x10 (16)
0xffff7ab963dc   412  str x17, [jssp, #-8]!
0xffff7ab963e0   416  add fp, jssp, #0x10 (16)
0xffff7ab963e4   420  sub csp, jssp, #0x10 (16)
0xffff7ab963e8   424  stp x0, x1, [jssp, #-16]!
0xffff7ab963ec   428  movz x0, #0x2
0xffff7ab963f0   432  ldr x1, pc+152 (addr 0x0000ffff7ab96488)    ;; external reference (Runtime::StrictEqual)
0xffff7ab963f4   436  ldr x16, pc+156 (addr 0x0000ffff7ab96490)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab963f8   440  blr x16
0xffff7ab963fc   444  mov jssp, fp
0xffff7ab96400   448  ldp fp, lr, [jssp], #16
0xffff7ab96404   452  ldr x1, [x26, #64]
0xffff7ab96408   456  sub x0, x0, x1
0xffff7ab9640c   460  ret
0xffff7ab96410   464  movz x16, #0xc00000000
0xffff7ab96414   468  sub csp, jssp, #0x10 (16)
0xffff7ab96418   472  stp fp, lr, [jssp, #-16]!
0xffff7ab9641c   476  sub csp, jssp, #0x10 (16)
0xffff7ab96420   480  str x16, [jssp, #-8]!
0xffff7ab96424   484  ldr x17, pc+116 (addr 0x0000ffff7ab96498)    ;; object: 0xffff7ab961e1 <Code: COMPARE_IC>
0xffff7ab96428   488  sub csp, jssp, #0x10 (16)
0xffff7ab9642c   492  str x17, [jssp, #-8]!
0xffff7ab96430   496  add fp, jssp, #0x10 (16)
0xffff7ab96434   500  sub csp, jssp, #0x18 (24)
0xffff7ab96438   504  stp lr, x0, [jssp, #-24]!
0xffff7ab9643c   508  str x1, [jssp, #16]
0xffff7ab96440   512  movz x10, #0x2f00000000
0xffff7ab96444   516  sub csp, jssp, #0x18 (24)
0xffff7ab96448   520  stp x10, x0, [jssp, #-24]!
0xffff7ab9644c   524  str x1, [jssp, #16]
0xffff7ab96450   528  movz x0, #0x3
0xffff7ab96454   532  ldr x1, pc+76 (addr 0x0000ffff7ab964a0)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ab96458   536  ldr x16, pc+80 (addr 0x0000ffff7ab964a8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab9645c   540  blr x16
0xffff7ab96460   544  add x11, x0, #0x5f (95)
0xffff7ab96464   548  ldr x1, [jssp, #16]
0xffff7ab96468   552  ldp lr, x0, [jssp], #24
0xffff7ab9646c   556  mov jssp, fp
0xffff7ab96470   560  ldp fp, lr, [jssp], #16
0xffff7ab96474   564  br x11
0xffff7ab96478   568  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab9647c   572  d63f03e0       constant
0xffff7ab96480   576  7ab961e1       constant
0xffff7ab96484   580  0000ffff       constant
0xffff7ab96488   584  00e50928       constant
0xffff7ab9648c   588  00000000       constant
0xffff7ab96490   592  7ab06060       constant
0xffff7ab96494   596  0000ffff       constant
0xffff7ab96498   600  7ab961e1       constant
0xffff7ab9649c   604  0000ffff       constant
0xffff7ab964a0   608  00c8a980       constant
0xffff7ab964a4   612  00000000       constant
0xffff7ab964a8   616  7ab06060       constant
0xffff7ab964ac   620  0000ffff       constant


RelocInfo (size = 16)
0xffff7ab963d4  embedded object  (0xffff7ab961e1 <Code: COMPARE_IC>)
0xffff7ab963f0  external reference (Runtime::StrictEqual)  (0xe50928)
0xffff7ab963f4  code target (STUB)  (0xffff7ab06060)
0xffff7ab96424  embedded object  (0xffff7ab961e1 <Code: COMPARE_IC>)
0xffff7ab96454  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ab96458  code target (STUB)  (0xffff7ab06060)
0xffff7ab96478  constant pool (size 56)


kind = HANDLER
major_key = <NoCache>Stub
name = global
compiler = unknown
Instructions (size = 120)
0xffff7ab96520     0  sub csp, jssp, #0x8 (8)
0xffff7ab96524     4  str x3, [jssp, #-8]!
0xffff7ab96528     8  sub csp, jssp, #0x8 (8)
0xffff7ab9652c    12  str x0, [jssp, #-8]!
0xffff7ab96530    16  ldr x0, pc+80 (addr 0x0000ffff7ab96580)    ;; object: 0x20dc5d51 Cell for 0
0xffff7ab96534    20  ldur x0, [x0, #7]
0xffff7ab96538    24  cmp x0, #0x0 (0)
0xffff7ab9653c    28  b.ne #+0x2c (addr 0xffff7ab96568)
0xffff7ab96540    32  ldr x0, pc+72 (addr 0x0000ffff7ab96588)    ;; object: 0x20de35c9 WeakCell for 0x20dbca39 PropertyCell for 0x56e153b9 <JS Global Object>
0xffff7ab96544    36  ldur x0, [x0, #7]
0xffff7ab96548    40  tbz w0, #0, #+0x20 (addr 0xffff7ab96568)
0xffff7ab9654c    44  ldur x0, [x0, #15]
0xffff7ab96550    48  ldr x16, [x26, #88]
0xffff7ab96554    52  cmp x0, x16
0xffff7ab96558    56  b.eq #+0x10 (addr 0xffff7ab96568)
0xffff7ab9655c    60  add jssp, jssp, #0x10 (16)
0xffff7ab96560    64  ret
0xffff7ab96564    68  b #+0x14 (addr 0xffff7ab96578)
0xffff7ab96568    72  ldr x0, [jssp], #8
0xffff7ab9656c    76  ldr x3, [jssp], #8
0xffff7ab96570    80  ldr x16, pc+32 (addr 0x0000ffff7ab96590)    ;; code: BUILTIN
0xffff7ab96574    84  br x16
0xffff7ab96578    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ab9657c    92  d63f03e0       constant
0xffff7ab96580    96  20dc5d51       constant
0xffff7ab96584   100  00000000       constant
0xffff7ab96588   104  20de35c9       constant
0xffff7ab9658c   108  00000000       constant
0xffff7ab96590   112  7ab222e0       constant
0xffff7ab96594   116  0000ffff       constant


RelocInfo (size = 9)
0xffff7ab96530  embedded object  (0x20dc5d51 Cell for 0)
0xffff7ab96540  embedded object  (0x20de35c9 WeakCell for 0x20dbca39 PropertyCell for 0x56e153b9 <JS Global Object>)
0xffff7ab96570  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab96578  constant pool (size 32)

kind = HANDLER
major_key = <NoCache>Stub
name = process
compiler = unknown
Instructions (size = 184)
0xffff7ab96600     0  sub csp, jssp, #0x8 (8)
0xffff7ab96604     4  str x3, [jssp, #-8]!
0xffff7ab96608     8  sub csp, jssp, #0x8 (8)
0xffff7ab9660c    12  str x0, [jssp, #-8]!
0xffff7ab96610    16  ldr x0, pc+144 (addr 0x0000ffff7ab966a0)    ;; object: 0x20de3629 Cell for 0
0xffff7ab96614    20  ldur x0, [x0, #7]
0xffff7ab96618    24  cmp x0, #0x0 (0)
0xffff7ab9661c    28  b.ne #+0x68 (addr 0xffff7ab96684)
0xffff7ab96620    32  mov x16, fp
0xffff7ab96624    36  ldur x4, [x16, #-8]
0xffff7ab96628    40  tbnz w4, #0, #+0xc (addr 0xffff7ab96634)
0xffff7ab9662c    44  ldr x16, [x16]
0xffff7ab96630    48  b #-0xc (addr 0xffff7ab96624)
0xffff7ab96634    52  ldur x4, [x4, #39]
0xffff7ab96638    56  ldur x16, [x1, #23]
0xffff7ab9663c    60  cmp x4, x16
0xffff7ab96640    64  b.eq #+0x1c (addr 0xffff7ab9665c)
0xffff7ab96644    68  movz x17, #0x26f
0xffff7ab96648    72  ldr x4, [x4, x17]
0xffff7ab9664c    76  movz x17, #0x26f
0xffff7ab96650    80  ldr x16, [x16, x17]
0xffff7ab96654    84  cmp x4, x16
0xffff7ab96658    88  b.ne #+0x2c (addr 0xffff7ab96684)
0xffff7ab9665c    92  ldr x0, pc+76 (addr 0x0000ffff7ab966a8)    ;; object: 0x20de3639 WeakCell for 0x20dc79b9 PropertyCell for 0x56e92ce9 <a process with map 0x4ec1c0f1>
0xffff7ab96660    96  ldur x0, [x0, #7]
0xffff7ab96664   100  tbz w0, #0, #+0x20 (addr 0xffff7ab96684)
0xffff7ab96668   104  ldur x0, [x0, #15]
0xffff7ab9666c   108  ldr x16, [x26, #88]
0xffff7ab96670   112  cmp x0, x16
0xffff7ab96674   116  b.eq #+0x10 (addr 0xffff7ab96684)
0xffff7ab96678   120  add jssp, jssp, #0x10 (16)
0xffff7ab9667c   124  ret
0xffff7ab96680   128  b #+0x14 (addr 0xffff7ab96694)
0xffff7ab96684   132  ldr x0, [jssp], #8
0xffff7ab96688   136  ldr x3, [jssp], #8
0xffff7ab9668c   140  ldr x16, pc+36 (addr 0x0000ffff7ab966b0)    ;; code: BUILTIN
0xffff7ab96690   144  br x16
0xffff7ab96694   148  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ab96698   152  d63f03e0       constant
0xffff7ab9669c   156  d503201f       constant
0xffff7ab966a0   160  20de3629       constant
0xffff7ab966a4   164  00000000       constant
0xffff7ab966a8   168  20de3639       constant
0xffff7ab966ac   172  00000000       constant
0xffff7ab966b0   176  7ab222e0       constant
0xffff7ab966b4   180  0000ffff       constant


RelocInfo (size = 11)
0xffff7ab96610  embedded object  (0x20de3629 Cell for 0)
0xffff7ab9665c  embedded object  (0x20de3639 WeakCell for 0x20dc79b9 PropertyCell for 0x56e92ce9 <a process with map 0x4ec1c0f1>)
0xffff7ab9668c  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab96694  constant pool (size 36)

kind = HANDLER
major_key = <NoCache>Stub
name = noDeprecation
compiler = unknown
Instructions (size = 632)
0xffff7ab96720     0  sub csp, jssp, #0x8 (8)
0xffff7ab96724     4  str x3, [jssp, #-8]!
0xffff7ab96728     8  sub csp, jssp, #0x8 (8)
0xffff7ab9672c    12  str x0, [jssp, #-8]!
0xffff7ab96730    16  ldr x0, pc+544 (addr 0x0000ffff7ab96950)    ;; object: 0x20de3709 Cell for 0
0xffff7ab96734    20  ldur x0, [x0, #7]
0xffff7ab96738    24  cmp x0, #0x0 (0)
0xffff7ab9673c    28  b.ne #+0x1f8 (addr 0xffff7ab96934)
0xffff7ab96740    32  ldur x4, [x1, #-1]
0xffff7ab96744    36  ldrb w0, [x4, #12]
0xffff7ab96748    40  movz x16, #0x44
0xffff7ab9674c    44  tst x0, x16
0xffff7ab96750    48  b.ne #+0x1e4 (addr 0xffff7ab96934)
0xffff7ab96754    52  ldrb w0, [x4, #11]
0xffff7ab96758    56  cmp x0, #0xb1 (177)
0xffff7ab9675c    60  b.lt #+0x1d8 (addr 0xffff7ab96934)
0xffff7ab96760    64  ldur x0, [x1, #7]
0xffff7ab96764    68  ldur x4, [x0, #-1]
0xffff7ab96768    72  ldr x16, [x26, #432]
0xffff7ab9676c    76  cmp x4, x16
0xffff7ab96770    80  b.ne #+0x1c4 (addr 0xffff7ab96934)
0xffff7ab96774    84  ldursw x4, [x0, #35]
0xffff7ab96778    88  sub x4, x4, #0x1 (1)
0xffff7ab9677c    92  movz x16, #0x230c
0xffff7ab96780    96  movk x16, #0x3e6a, lsl #16
0xffff7ab96784   100  and x4, x4, x16
0xffff7ab96788   104  add x4, x4, x4, lsl #1
0xffff7ab9678c   108  add x4, x0, x4, lsl #3
0xffff7ab96790   112  ldur x4, [x4, #55]
0xffff7ab96794   116  ldr x16, [x26, #40]
0xffff7ab96798   120  cmp x4, x16
0xffff7ab9679c   124  b.eq #+0x188 (addr 0xffff7ab96924)
0xffff7ab967a0   128  ldr x16, pc+440 (addr 0x0000ffff7ab96958)    ;; object: 0x20ddae31 <String[13]: noDeprecation>
0xffff7ab967a4   132  cmp x4, x16
0xffff7ab967a8   136  b.eq #+0x18c (addr 0xffff7ab96934)
0xffff7ab967ac   140  ldr x16, [x26, #88]
0xffff7ab967b0   144  cmp x4, x16
0xffff7ab967b4   148  b.eq #+0x1c (addr 0xffff7ab967d0)
0xffff7ab967b8   152  ldur x4, [x4, #-1]
0xffff7ab967bc   156  ldrb w4, [x4, #11]
0xffff7ab967c0   160  tst x4, #0xc0
0xffff7ab967c4   164  movz x16, #0x80
0xffff7ab967c8   168  ccmp x4, x16, #nZcv, ne
0xffff7ab967cc   172  b.ne #+0x168 (addr 0xffff7ab96934)
0xffff7ab967d0   176  ldursw x4, [x0, #35]
0xffff7ab967d4   180  sub x4, x4, #0x1 (1)
0xffff7ab967d8   184  movz x16, #0x230d
0xffff7ab967dc   188  movk x16, #0x3e6a, lsl #16
0xffff7ab967e0   192  and x4, x4, x16
0xffff7ab967e4   196  add x4, x4, x4, lsl #1
0xffff7ab967e8   200  add x4, x0, x4, lsl #3
0xffff7ab967ec   204  ldur x4, [x4, #55]
0xffff7ab967f0   208  ldr x16, [x26, #40]
0xffff7ab967f4   212  cmp x4, x16
0xffff7ab967f8   216  b.eq #+0x12c (addr 0xffff7ab96924)
0xffff7ab967fc   220  ldr x16, pc+356 (addr 0x0000ffff7ab96960)    ;; object: 0x20ddae31 <String[13]: noDeprecation>
0xffff7ab96800   224  cmp x4, x16
0xffff7ab96804   228  b.eq #+0x130 (addr 0xffff7ab96934)
0xffff7ab96808   232  ldr x16, [x26, #88]
0xffff7ab9680c   236  cmp x4, x16
0xffff7ab96810   240  b.eq #+0x1c (addr 0xffff7ab9682c)
0xffff7ab96814   244  ldur x4, [x4, #-1]
0xffff7ab96818   248  ldrb w4, [x4, #11]
0xffff7ab9681c   252  tst x4, #0xc0
0xffff7ab96820   256  movz x16, #0x80
0xffff7ab96824   260  ccmp x4, x16, #nZcv, ne
0xffff7ab96828   264  b.ne #+0x10c (addr 0xffff7ab96934)
0xffff7ab9682c   268  ldursw x4, [x0, #35]
0xffff7ab96830   272  sub x4, x4, #0x1 (1)
0xffff7ab96834   276  movz x16, #0x230f
0xffff7ab96838   280  movk x16, #0x3e6a, lsl #16
0xffff7ab9683c   284  and x4, x4, x16
0xffff7ab96840   288  add x4, x4, x4, lsl #1
0xffff7ab96844   292  add x4, x0, x4, lsl #3
0xffff7ab96848   296  ldur x4, [x4, #55]
0xffff7ab9684c   300  ldr x16, [x26, #40]
0xffff7ab96850   304  cmp x4, x16
0xffff7ab96854   308  b.eq #+0xd0 (addr 0xffff7ab96924)
0xffff7ab96858   312  ldr x16, pc+272 (addr 0x0000ffff7ab96968)    ;; object: 0x20ddae31 <String[13]: noDeprecation>
0xffff7ab9685c   316  cmp x4, x16
0xffff7ab96860   320  b.eq #+0xd4 (addr 0xffff7ab96934)
0xffff7ab96864   324  ldr x16, [x26, #88]
0xffff7ab96868   328  cmp x4, x16
0xffff7ab9686c   332  b.eq #+0x1c (addr 0xffff7ab96888)
0xffff7ab96870   336  ldur x4, [x4, #-1]
0xffff7ab96874   340  ldrb w4, [x4, #11]
0xffff7ab96878   344  tst x4, #0xc0
0xffff7ab9687c   348  movz x16, #0x80
0xffff7ab96880   352  ccmp x4, x16, #nZcv, ne
0xffff7ab96884   356  b.ne #+0xb0 (addr 0xffff7ab96934)
0xffff7ab96888   360  ldursw x4, [x0, #35]
0xffff7ab9688c   364  sub x4, x4, #0x1 (1)
0xffff7ab96890   368  movz x16, #0x2312
0xffff7ab96894   372  movk x16, #0x3e6a, lsl #16
0xffff7ab96898   376  and x4, x4, x16
0xffff7ab9689c   380  add x4, x4, x4, lsl #1
0xffff7ab968a0   384  add x4, x0, x4, lsl #3
0xffff7ab968a4   388  ldur x4, [x4, #55]
0xffff7ab968a8   392  ldr x16, [x26, #40]
0xffff7ab968ac   396  cmp x4, x16
0xffff7ab968b0   400  b.eq #+0x74 (addr 0xffff7ab96924)
0xffff7ab968b4   404  ldr x16, pc+188 (addr 0x0000ffff7ab96970)    ;; object: 0x20ddae31 <String[13]: noDeprecation>
0xffff7ab968b8   408  cmp x4, x16
0xffff7ab968bc   412  b.eq #+0x78 (addr 0xffff7ab96934)
0xffff7ab968c0   416  ldr x16, [x26, #88]
0xffff7ab968c4   420  cmp x4, x16
0xffff7ab968c8   424  b.eq #+0x1c (addr 0xffff7ab968e4)
0xffff7ab968cc   428  ldur x4, [x4, #-1]
0xffff7ab968d0   432  ldrb w4, [x4, #11]
0xffff7ab968d4   436  tst x4, #0xc0
0xffff7ab968d8   440  movz x16, #0x80
0xffff7ab968dc   444  ccmp x4, x16, #nZcv, ne
0xffff7ab968e0   448  b.ne #+0x54 (addr 0xffff7ab96934)
0xffff7ab968e4   452  sub csp, jssp, #0x38 (56)
0xffff7ab968e8   456  stp x3, x5, [jssp, #-32]!
0xffff7ab968ec   460  stp x6, lr, [jssp, #16]
0xffff7ab968f0   464  stp x0, x1, [jssp, #-24]!
0xffff7ab968f4   468  str x2, [jssp, #16]
0xffff7ab968f8   472  ldur x0, [x1, #7]
0xffff7ab968fc   476  ldr x1, pc+124 (addr 0x0000ffff7ab96978)    ;; object: 0x20ddae31 <String[13]: noDeprecation>
0xffff7ab96900   480  ldr x16, pc+128 (addr 0x0000ffff7ab96980)    ;; code: STUB, NameDictionaryLookupStub, minor: 1
0xffff7ab96904   484  blr x16
0xffff7ab96908   488  mov x4, x0
0xffff7ab9690c   492  ldp x2, x3, [jssp, #16]
0xffff7ab96910   496  ldp x0, x1, [jssp], #32
0xffff7ab96914   500  ldr lr, [jssp, #16]
0xffff7ab96918   504  ldp x5, x6, [jssp], #24
0xffff7ab9691c   508  cbz x4, #+0x8 (addr 0xffff7ab96924)
0xffff7ab96920   512  b #+0x14 (addr 0xffff7ab96934)
0xffff7ab96924   516  add jssp, jssp, #0x10 (16)
0xffff7ab96928   520  ldr x0, pc+96 (addr 0x0000ffff7ab96988)    ;; object: 0x20d04241 <undefined>
0xffff7ab9692c   524  ret
0xffff7ab96930   528  b #+0x14 (addr 0xffff7ab96944)
0xffff7ab96934   532  ldr x0, [jssp], #8
0xffff7ab96938   536  ldr x3, [jssp], #8
0xffff7ab9693c   540  ldr x16, pc+84 (addr 0x0000ffff7ab96990)    ;; code: BUILTIN
0xffff7ab96940   544  br x16
0xffff7ab96944   548  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0xffff7ab96948   552  d63f03e0       constant
0xffff7ab9694c   556  d503201f       constant
0xffff7ab96950   560  20de3709       constant
0xffff7ab96954   564  00000000       constant
0xffff7ab96958   568  20ddae31       constant
0xffff7ab9695c   572  00000000       constant
0xffff7ab96960   576  20ddae31       constant
0xffff7ab96964   580  00000000       constant
0xffff7ab96968   584  20ddae31       constant
0xffff7ab9696c   588  00000000       constant
0xffff7ab96970   592  20ddae31       constant
0xffff7ab96974   596  00000000       constant
0xffff7ab96978   600  20ddae31       constant
0xffff7ab9697c   604  00000000       constant
0xffff7ab96980   608  7ab8b120       constant
0xffff7ab96984   612  0000ffff       constant
0xffff7ab96988   616  20d04241       constant
0xffff7ab9698c   620  00000000       constant
0xffff7ab96990   624  7ab222e0       constant
0xffff7ab96994   628  0000ffff       constant


RelocInfo (size = 25)
0xffff7ab96730  embedded object  (0x20de3709 Cell for 0)
0xffff7ab967a0  embedded object  (0x20ddae31 <String[13]: noDeprecation>)
0xffff7ab967fc  embedded object  (0x20ddae31 <String[13]: noDeprecation>)
0xffff7ab96858  embedded object  (0x20ddae31 <String[13]: noDeprecation>)
0xffff7ab968b4  embedded object  (0x20ddae31 <String[13]: noDeprecation>)
0xffff7ab968fc  embedded object  (0x20ddae31 <String[13]: noDeprecation>)
0xffff7ab96900  code target (STUB)  (0xffff7ab8b120)
0xffff7ab96928  embedded object  (0x20d04241 <undefined>)
0xffff7ab9693c  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab96944  constant pool (size 84)

kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0xffff7ab96a00     0  sub csp, jssp, #0x8 (8)
0xffff7ab96a04     4  str x3, [jssp, #-8]!
0xffff7ab96a08     8  sub csp, jssp, #0x8 (8)
0xffff7ab96a0c    12  str x4, [jssp, #-8]!
0xffff7ab96a10    16  ldr x3, pc+104 (addr 0x0000ffff7ab96a78)    ;; object: 0x20de3839 Cell for 0
0xffff7ab96a14    20  ldur x3, [x3, #7]
0xffff7ab96a18    24  cmp x3, #0x0 (0)
0xffff7ab96a1c    28  b.ne #+0x8 (addr 0xffff7ab96a24)
0xffff7ab96a20    32  b #+0x18 (addr 0xffff7ab96a38)
0xffff7ab96a24    36  ldr x2, pc+92 (addr 0x0000ffff7ab96a80)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7ab96a28    40  ldr x4, [jssp], #8
0xffff7ab96a2c    44  ldr x3, [jssp], #8
0xffff7ab96a30    48  ldr x16, pc+88 (addr 0x0000ffff7ab96a88)    ;; code: BUILTIN
0xffff7ab96a34    52  br x16
0xffff7ab96a38    56  add jssp, jssp, #0x10 (16)
0xffff7ab96a3c    60  ldr x3, pc+84 (addr 0x0000ffff7ab96a90)    ;; object: 0x20d404a9 <AccessorInfo>
0xffff7ab96a40    64  ldr x4, pc+88 (addr 0x0000ffff7ab96a98)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7ab96a44    68  sub csp, jssp, #0x28 (40)
0xffff7ab96a48    72  stp x4, x3, [jssp, #-32]!
0xffff7ab96a4c    76  stp x1, x1, [jssp, #16]
0xffff7ab96a50    80  str x0, [jssp, #-8]!
0xffff7ab96a54    84  movz x16, #0x100000000
0xffff7ab96a58    88  sub csp, jssp, #0x8 (8)
0xffff7ab96a5c    92  str x16, [jssp, #-8]!
0xffff7ab96a60    96  movz x0, #0x6
0xffff7ab96a64   100  ldr x1, pc+60 (addr 0x0000ffff7ab96aa0)    ;; external reference (Runtime::StoreCallbackProperty)
0xffff7ab96a68   104  ldr x16, pc+64 (addr 0x0000ffff7ab96aa8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab96a6c   108  br x16
0xffff7ab96a70   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab96a74   116  d63f03e0       constant
0xffff7ab96a78   120  20de3839       constant
0xffff7ab96a7c   124  00000000       constant
0xffff7ab96a80   128  20d05371       constant
0xffff7ab96a84   132  00000000       constant
0xffff7ab96a88   136  7ab22420       constant
0xffff7ab96a8c   140  0000ffff       constant
0xffff7ab96a90   144  20d404a9       constant
0xffff7ab96a94   148  00000000       constant
0xffff7ab96a98   152  20d05371       constant
0xffff7ab96a9c   156  00000000       constant
0xffff7ab96aa0   160  00c8b560       constant
0xffff7ab96aa4   164  00000000       constant
0xffff7ab96aa8   168  7ab06060       constant
0xffff7ab96aac   172  0000ffff       constant


RelocInfo (size = 14)
0xffff7ab96a10  embedded object  (0x20de3839 Cell for 0)
0xffff7ab96a24  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7ab96a30  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab96a3c  embedded object  (0x20d404a9 <AccessorInfo>)
0xffff7ab96a40  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7ab96a64  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0xffff7ab96a68  code target (STUB)  (0xffff7ab06060)
0xffff7ab96a70  constant pool (size 64)

kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0xffff7ab96b20     0  sub csp, jssp, #0x8 (8)
0xffff7ab96b24     4  str x3, [jssp, #-8]!
0xffff7ab96b28     8  sub csp, jssp, #0x8 (8)
0xffff7ab96b2c    12  str x4, [jssp, #-8]!
0xffff7ab96b30    16  ldr x3, pc+104 (addr 0x0000ffff7ab96b98)    ;; object: 0x20de3941 Cell for 0
0xffff7ab96b34    20  ldur x3, [x3, #7]
0xffff7ab96b38    24  cmp x3, #0x0 (0)
0xffff7ab96b3c    28  b.ne #+0x8 (addr 0xffff7ab96b44)
0xffff7ab96b40    32  b #+0x18 (addr 0xffff7ab96b58)
0xffff7ab96b44    36  ldr x2, pc+92 (addr 0x0000ffff7ab96ba0)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7ab96b48    40  ldr x4, [jssp], #8
0xffff7ab96b4c    44  ldr x3, [jssp], #8
0xffff7ab96b50    48  ldr x16, pc+88 (addr 0x0000ffff7ab96ba8)    ;; code: BUILTIN
0xffff7ab96b54    52  br x16
0xffff7ab96b58    56  add jssp, jssp, #0x10 (16)
0xffff7ab96b5c    60  ldr x3, pc+84 (addr 0x0000ffff7ab96bb0)    ;; object: 0x20d404a9 <AccessorInfo>
0xffff7ab96b60    64  ldr x4, pc+88 (addr 0x0000ffff7ab96bb8)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7ab96b64    68  sub csp, jssp, #0x28 (40)
0xffff7ab96b68    72  stp x4, x3, [jssp, #-32]!
0xffff7ab96b6c    76  stp x1, x1, [jssp, #16]
0xffff7ab96b70    80  str x0, [jssp, #-8]!
0xffff7ab96b74    84  movz x16, #0x100000000
0xffff7ab96b78    88  sub csp, jssp, #0x8 (8)
0xffff7ab96b7c    92  str x16, [jssp, #-8]!
0xffff7ab96b80    96  movz x0, #0x6
0xffff7ab96b84   100  ldr x1, pc+60 (addr 0x0000ffff7ab96bc0)    ;; external reference (Runtime::StoreCallbackProperty)
0xffff7ab96b88   104  ldr x16, pc+64 (addr 0x0000ffff7ab96bc8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab96b8c   108  br x16
0xffff7ab96b90   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab96b94   116  d63f03e0       constant
0xffff7ab96b98   120  20de3941       constant
0xffff7ab96b9c   124  00000000       constant
0xffff7ab96ba0   128  20d05371       constant
0xffff7ab96ba4   132  00000000       constant
0xffff7ab96ba8   136  7ab22420       constant
0xffff7ab96bac   140  0000ffff       constant
0xffff7ab96bb0   144  20d404a9       constant
0xffff7ab96bb4   148  00000000       constant
0xffff7ab96bb8   152  20d05371       constant
0xffff7ab96bbc   156  00000000       constant
0xffff7ab96bc0   160  00c8b560       constant
0xffff7ab96bc4   164  00000000       constant
0xffff7ab96bc8   168  7ab06060       constant
0xffff7ab96bcc   172  0000ffff       constant


RelocInfo (size = 14)
0xffff7ab96b30  embedded object  (0x20de3941 Cell for 0)
0xffff7ab96b44  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7ab96b50  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab96b5c  embedded object  (0x20d404a9 <AccessorInfo>)
0xffff7ab96b60  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7ab96b84  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0xffff7ab96b88  code target (STUB)  (0xffff7ab06060)
0xffff7ab96b90  constant pool (size 64)

kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0xffff7ab96c40     0  sub csp, jssp, #0x8 (8)
0xffff7ab96c44     4  str x3, [jssp, #-8]!
0xffff7ab96c48     8  sub csp, jssp, #0x8 (8)
0xffff7ab96c4c    12  str x4, [jssp, #-8]!
0xffff7ab96c50    16  ldr x3, pc+104 (addr 0x0000ffff7ab96cb8)    ;; object: 0x20de3a49 Cell for 0
0xffff7ab96c54    20  ldur x3, [x3, #7]
0xffff7ab96c58    24  cmp x3, #0x0 (0)
0xffff7ab96c5c    28  b.ne #+0x8 (addr 0xffff7ab96c64)
0xffff7ab96c60    32  b #+0x18 (addr 0xffff7ab96c78)
0xffff7ab96c64    36  ldr x2, pc+92 (addr 0x0000ffff7ab96cc0)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7ab96c68    40  ldr x4, [jssp], #8
0xffff7ab96c6c    44  ldr x3, [jssp], #8
0xffff7ab96c70    48  ldr x16, pc+88 (addr 0x0000ffff7ab96cc8)    ;; code: BUILTIN
0xffff7ab96c74    52  br x16
0xffff7ab96c78    56  add jssp, jssp, #0x10 (16)
0xffff7ab96c7c    60  ldr x3, pc+84 (addr 0x0000ffff7ab96cd0)    ;; object: 0x20d404a9 <AccessorInfo>
0xffff7ab96c80    64  ldr x4, pc+88 (addr 0x0000ffff7ab96cd8)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7ab96c84    68  sub csp, jssp, #0x28 (40)
0xffff7ab96c88    72  stp x4, x3, [jssp, #-32]!
0xffff7ab96c8c    76  stp x1, x1, [jssp, #16]
0xffff7ab96c90    80  str x0, [jssp, #-8]!
0xffff7ab96c94    84  movz x16, #0x100000000
0xffff7ab96c98    88  sub csp, jssp, #0x8 (8)
0xffff7ab96c9c    92  str x16, [jssp, #-8]!
0xffff7ab96ca0    96  movz x0, #0x6
0xffff7ab96ca4   100  ldr x1, pc+60 (addr 0x0000ffff7ab96ce0)    ;; external reference (Runtime::StoreCallbackProperty)
0xffff7ab96ca8   104  ldr x16, pc+64 (addr 0x0000ffff7ab96ce8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab96cac   108  br x16
0xffff7ab96cb0   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab96cb4   116  d63f03e0       constant
0xffff7ab96cb8   120  20de3a49       constant
0xffff7ab96cbc   124  00000000       constant
0xffff7ab96cc0   128  20d05371       constant
0xffff7ab96cc4   132  00000000       constant
0xffff7ab96cc8   136  7ab22420       constant
0xffff7ab96ccc   140  0000ffff       constant
0xffff7ab96cd0   144  20d404a9       constant
0xffff7ab96cd4   148  00000000       constant
0xffff7ab96cd8   152  20d05371       constant
0xffff7ab96cdc   156  00000000       constant
0xffff7ab96ce0   160  00c8b560       constant
0xffff7ab96ce4   164  00000000       constant
0xffff7ab96ce8   168  7ab06060       constant
0xffff7ab96cec   172  0000ffff       constant


RelocInfo (size = 14)
0xffff7ab96c50  embedded object  (0x20de3a49 Cell for 0)
0xffff7ab96c64  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7ab96c70  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab96c7c  embedded object  (0x20d404a9 <AccessorInfo>)
0xffff7ab96c80  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7ab96ca4  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0xffff7ab96ca8  code target (STUB)  (0xffff7ab06060)
0xffff7ab96cb0  constant pool (size 64)

kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0xffff7ab973e0     0  sub csp, jssp, #0x8 (8)
0xffff7ab973e4     4  str x3, [jssp, #-8]!
0xffff7ab973e8     8  sub csp, jssp, #0x8 (8)
0xffff7ab973ec    12  str x4, [jssp, #-8]!
0xffff7ab973f0    16  ldr x3, pc+104 (addr 0x0000ffff7ab97458)    ;; object: 0x20de41d1 Cell for 0
0xffff7ab973f4    20  ldur x3, [x3, #7]
0xffff7ab973f8    24  cmp x3, #0x0 (0)
0xffff7ab973fc    28  b.ne #+0x8 (addr 0xffff7ab97404)
0xffff7ab97400    32  b #+0x18 (addr 0xffff7ab97418)
0xffff7ab97404    36  ldr x2, pc+92 (addr 0x0000ffff7ab97460)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7ab97408    40  ldr x4, [jssp], #8
0xffff7ab9740c    44  ldr x3, [jssp], #8
0xffff7ab97410    48  ldr x16, pc+88 (addr 0x0000ffff7ab97468)    ;; code: BUILTIN
0xffff7ab97414    52  br x16
0xffff7ab97418    56  add jssp, jssp, #0x10 (16)
0xffff7ab9741c    60  ldr x3, pc+84 (addr 0x0000ffff7ab97470)    ;; object: 0x20d404a9 <AccessorInfo>
0xffff7ab97420    64  ldr x4, pc+88 (addr 0x0000ffff7ab97478)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7ab97424    68  sub csp, jssp, #0x28 (40)
0xffff7ab97428    72  stp x4, x3, [jssp, #-32]!
0xffff7ab9742c    76  stp x1, x1, [jssp, #16]
0xffff7ab97430    80  str x0, [jssp, #-8]!
0xffff7ab97434    84  movz x16, #0x100000000
0xffff7ab97438    88  sub csp, jssp, #0x8 (8)
0xffff7ab9743c    92  str x16, [jssp, #-8]!
0xffff7ab97440    96  movz x0, #0x6
0xffff7ab97444   100  ldr x1, pc+60 (addr 0x0000ffff7ab97480)    ;; external reference (Runtime::StoreCallbackProperty)
0xffff7ab97448   104  ldr x16, pc+64 (addr 0x0000ffff7ab97488)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab9744c   108  br x16
0xffff7ab97450   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab97454   116  d63f03e0       constant
0xffff7ab97458   120  20de41d1       constant
0xffff7ab9745c   124  00000000       constant
0xffff7ab97460   128  20d05371       constant
0xffff7ab97464   132  00000000       constant
0xffff7ab97468   136  7ab22420       constant
0xffff7ab9746c   140  0000ffff       constant
0xffff7ab97470   144  20d404a9       constant
0xffff7ab97474   148  00000000       constant
0xffff7ab97478   152  20d05371       constant
0xffff7ab9747c   156  00000000       constant
0xffff7ab97480   160  00c8b560       constant
0xffff7ab97484   164  00000000       constant
0xffff7ab97488   168  7ab06060       constant
0xffff7ab9748c   172  0000ffff       constant


RelocInfo (size = 14)
0xffff7ab973f0  embedded object  (0x20de41d1 Cell for 0)
0xffff7ab97404  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7ab97410  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab9741c  embedded object  (0x20d404a9 <AccessorInfo>)
0xffff7ab97420  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7ab97444  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0xffff7ab97448  code target (STUB)  (0xffff7ab06060)
0xffff7ab97450  constant pool (size 64)

kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0xffff7ab97640     0  sub csp, jssp, #0x8 (8)
0xffff7ab97644     4  str x3, [jssp, #-8]!
0xffff7ab97648     8  sub csp, jssp, #0x8 (8)
0xffff7ab9764c    12  str x4, [jssp, #-8]!
0xffff7ab97650    16  ldr x3, pc+104 (addr 0x0000ffff7ab976b8)    ;; object: 0x20de4409 Cell for 0
0xffff7ab97654    20  ldur x3, [x3, #7]
0xffff7ab97658    24  cmp x3, #0x0 (0)
0xffff7ab9765c    28  b.ne #+0x8 (addr 0xffff7ab97664)
0xffff7ab97660    32  b #+0x18 (addr 0xffff7ab97678)
0xffff7ab97664    36  ldr x2, pc+92 (addr 0x0000ffff7ab976c0)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7ab97668    40  ldr x4, [jssp], #8
0xffff7ab9766c    44  ldr x3, [jssp], #8
0xffff7ab97670    48  ldr x16, pc+88 (addr 0x0000ffff7ab976c8)    ;; code: BUILTIN
0xffff7ab97674    52  br x16
0xffff7ab97678    56  add jssp, jssp, #0x10 (16)
0xffff7ab9767c    60  ldr x3, pc+84 (addr 0x0000ffff7ab976d0)    ;; object: 0x20d404a9 <AccessorInfo>
0xffff7ab97680    64  ldr x4, pc+88 (addr 0x0000ffff7ab976d8)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7ab97684    68  sub csp, jssp, #0x28 (40)
0xffff7ab97688    72  stp x4, x3, [jssp, #-32]!
0xffff7ab9768c    76  stp x1, x1, [jssp, #16]
0xffff7ab97690    80  str x0, [jssp, #-8]!
0xffff7ab97694    84  movz x16, #0x100000000
0xffff7ab97698    88  sub csp, jssp, #0x8 (8)
0xffff7ab9769c    92  str x16, [jssp, #-8]!
0xffff7ab976a0    96  movz x0, #0x6
0xffff7ab976a4   100  ldr x1, pc+60 (addr 0x0000ffff7ab976e0)    ;; external reference (Runtime::StoreCallbackProperty)
0xffff7ab976a8   104  ldr x16, pc+64 (addr 0x0000ffff7ab976e8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab976ac   108  br x16
0xffff7ab976b0   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab976b4   116  d63f03e0       constant
0xffff7ab976b8   120  20de4409       constant
0xffff7ab976bc   124  00000000       constant
0xffff7ab976c0   128  20d05371       constant
0xffff7ab976c4   132  00000000       constant
0xffff7ab976c8   136  7ab22420       constant
0xffff7ab976cc   140  0000ffff       constant
0xffff7ab976d0   144  20d404a9       constant
0xffff7ab976d4   148  00000000       constant
0xffff7ab976d8   152  20d05371       constant
0xffff7ab976dc   156  00000000       constant
0xffff7ab976e0   160  00c8b560       constant
0xffff7ab976e4   164  00000000       constant
0xffff7ab976e8   168  7ab06060       constant
0xffff7ab976ec   172  0000ffff       constant


RelocInfo (size = 14)
0xffff7ab97650  embedded object  (0x20de4409 Cell for 0)
0xffff7ab97664  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7ab97670  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab9767c  embedded object  (0x20d404a9 <AccessorInfo>)
0xffff7ab97680  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7ab976a4  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0xffff7ab976a8  code target (STUB)  (0xffff7ab06060)
0xffff7ab976b0  constant pool (size 64)

kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0xffff7ab97760     0  sub csp, jssp, #0x8 (8)
0xffff7ab97764     4  str x3, [jssp, #-8]!
0xffff7ab97768     8  sub csp, jssp, #0x8 (8)
0xffff7ab9776c    12  str x4, [jssp, #-8]!
0xffff7ab97770    16  ldr x3, pc+104 (addr 0x0000ffff7ab977d8)    ;; object: 0x20de4631 Cell for 0
0xffff7ab97774    20  ldur x3, [x3, #7]
0xffff7ab97778    24  cmp x3, #0x0 (0)
0xffff7ab9777c    28  b.ne #+0x8 (addr 0xffff7ab97784)
0xffff7ab97780    32  b #+0x18 (addr 0xffff7ab97798)
0xffff7ab97784    36  ldr x2, pc+92 (addr 0x0000ffff7ab977e0)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7ab97788    40  ldr x4, [jssp], #8
0xffff7ab9778c    44  ldr x3, [jssp], #8
0xffff7ab97790    48  ldr x16, pc+88 (addr 0x0000ffff7ab977e8)    ;; code: BUILTIN
0xffff7ab97794    52  br x16
0xffff7ab97798    56  add jssp, jssp, #0x10 (16)
0xffff7ab9779c    60  ldr x3, pc+84 (addr 0x0000ffff7ab977f0)    ;; object: 0x20d404a9 <AccessorInfo>
0xffff7ab977a0    64  ldr x4, pc+88 (addr 0x0000ffff7ab977f8)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7ab977a4    68  sub csp, jssp, #0x28 (40)
0xffff7ab977a8    72  stp x4, x3, [jssp, #-32]!
0xffff7ab977ac    76  stp x1, x1, [jssp, #16]
0xffff7ab977b0    80  str x0, [jssp, #-8]!
0xffff7ab977b4    84  movz x16, #0x100000000
0xffff7ab977b8    88  sub csp, jssp, #0x8 (8)
0xffff7ab977bc    92  str x16, [jssp, #-8]!
0xffff7ab977c0    96  movz x0, #0x6
0xffff7ab977c4   100  ldr x1, pc+60 (addr 0x0000ffff7ab97800)    ;; external reference (Runtime::StoreCallbackProperty)
0xffff7ab977c8   104  ldr x16, pc+64 (addr 0x0000ffff7ab97808)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab977cc   108  br x16
0xffff7ab977d0   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab977d4   116  d63f03e0       constant
0xffff7ab977d8   120  20de4631       constant
0xffff7ab977dc   124  00000000       constant
0xffff7ab977e0   128  20d05371       constant
0xffff7ab977e4   132  00000000       constant
0xffff7ab977e8   136  7ab22420       constant
0xffff7ab977ec   140  0000ffff       constant
0xffff7ab977f0   144  20d404a9       constant
0xffff7ab977f4   148  00000000       constant
0xffff7ab977f8   152  20d05371       constant
0xffff7ab977fc   156  00000000       constant
0xffff7ab97800   160  00c8b560       constant
0xffff7ab97804   164  00000000       constant
0xffff7ab97808   168  7ab06060       constant
0xffff7ab9780c   172  0000ffff       constant


RelocInfo (size = 14)
0xffff7ab97770  embedded object  (0x20de4631 Cell for 0)
0xffff7ab97784  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7ab97790  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab9779c  embedded object  (0x20d404a9 <AccessorInfo>)
0xffff7ab977a0  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7ab977c4  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0xffff7ab977c8  code target (STUB)  (0xffff7ab06060)
0xffff7ab977d0  constant pool (size 64)

kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0xffff7ab97880     0  sub csp, jssp, #0x8 (8)
0xffff7ab97884     4  str x3, [jssp, #-8]!
0xffff7ab97888     8  sub csp, jssp, #0x8 (8)
0xffff7ab9788c    12  str x4, [jssp, #-8]!
0xffff7ab97890    16  ldr x3, pc+104 (addr 0x0000ffff7ab978f8)    ;; object: 0x20de4709 Cell for 0
0xffff7ab97894    20  ldur x3, [x3, #7]
0xffff7ab97898    24  cmp x3, #0x0 (0)
0xffff7ab9789c    28  b.ne #+0x8 (addr 0xffff7ab978a4)
0xffff7ab978a0    32  b #+0x18 (addr 0xffff7ab978b8)
0xffff7ab978a4    36  ldr x2, pc+92 (addr 0x0000ffff7ab97900)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7ab978a8    40  ldr x4, [jssp], #8
0xffff7ab978ac    44  ldr x3, [jssp], #8
0xffff7ab978b0    48  ldr x16, pc+88 (addr 0x0000ffff7ab97908)    ;; code: BUILTIN
0xffff7ab978b4    52  br x16
0xffff7ab978b8    56  add jssp, jssp, #0x10 (16)
0xffff7ab978bc    60  ldr x3, pc+84 (addr 0x0000ffff7ab97910)    ;; object: 0x20d404a9 <AccessorInfo>
0xffff7ab978c0    64  ldr x4, pc+88 (addr 0x0000ffff7ab97918)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7ab978c4    68  sub csp, jssp, #0x28 (40)
0xffff7ab978c8    72  stp x4, x3, [jssp, #-32]!
0xffff7ab978cc    76  stp x1, x1, [jssp, #16]
0xffff7ab978d0    80  str x0, [jssp, #-8]!
0xffff7ab978d4    84  movz x16, #0x100000000
0xffff7ab978d8    88  sub csp, jssp, #0x8 (8)
0xffff7ab978dc    92  str x16, [jssp, #-8]!
0xffff7ab978e0    96  movz x0, #0x6
0xffff7ab978e4   100  ldr x1, pc+60 (addr 0x0000ffff7ab97920)    ;; external reference (Runtime::StoreCallbackProperty)
0xffff7ab978e8   104  ldr x16, pc+64 (addr 0x0000ffff7ab97928)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab978ec   108  br x16
0xffff7ab978f0   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7ab978f4   116  d63f03e0       constant
0xffff7ab978f8   120  20de4709       constant
0xffff7ab978fc   124  00000000       constant
0xffff7ab97900   128  20d05371       constant
0xffff7ab97904   132  00000000       constant
0xffff7ab97908   136  7ab22420       constant
0xffff7ab9790c   140  0000ffff       constant
0xffff7ab97910   144  20d404a9       constant
0xffff7ab97914   148  00000000       constant
0xffff7ab97918   152  20d05371       constant
0xffff7ab9791c   156  00000000       constant
0xffff7ab97920   160  00c8b560       constant
0xffff7ab97924   164  00000000       constant
0xffff7ab97928   168  7ab06060       constant
0xffff7ab9792c   172  0000ffff       constant


RelocInfo (size = 14)
0xffff7ab97890  embedded object  (0x20de4709 Cell for 0)
0xffff7ab978a4  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7ab978b0  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab978bc  embedded object  (0x20d404a9 <AccessorInfo>)
0xffff7ab978c0  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7ab978e4  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0xffff7ab978e8  code target (STUB)  (0xffff7ab06060)
0xffff7ab978f0  constant pool (size 64)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0xffff7ab979a0     0  tbz w0, #0, #+0x50 (addr 0xffff7ab979f0)
0xffff7ab979a4     4  mov x2, x0
0xffff7ab979a8     8  stur x2, [x1, #31]
0xffff7ab979ac    12  add x3, x1, #0x1f (31)
0xffff7ab979b0    16  and x2, x2, #0xfffffffffff00000
0xffff7ab979b4    20  ldr x2, [x2, #8]
0xffff7ab979b8    24  tbz w2, #1, #+0x24 (addr 0xffff7ab979dc)
0xffff7ab979bc    28  and x2, x1, #0xfffffffffff00000
0xffff7ab979c0    32  ldr x2, [x2, #8]
0xffff7ab979c4    36  tbz w2, #2, #+0x18 (addr 0xffff7ab979dc)
0xffff7ab979c8    40  sub csp, jssp, #0x8 (8)
0xffff7ab979cc    44  str lr, [jssp, #-8]!
0xffff7ab979d0    48  ldr x16, pc+24 (addr 0x0000ffff7ab979e8)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab979d4    52  blr x16
0xffff7ab979d8    56  ldr lr, [jssp], #8
0xffff7ab979dc    60  ret
0xffff7ab979e0    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab979e4    68  d63f03e0       constant
0xffff7ab979e8    72  7ab170c0       constant
0xffff7ab979ec    76  0000ffff       constant
0xffff7ab979f0    80  movz x16, #0x0
0xffff7ab979f4    84  sub csp, jssp, #0x10 (16)
0xffff7ab979f8    88  stp fp, lr, [jssp, #-16]!
0xffff7ab979fc    92  bl #+0x4 (addr 0xffff7ab97a00)
0xffff7ab97a00    96  movz x17, #0xa00000000
0xffff7ab97a04   100  sub csp, jssp, #0x10 (16)
0xffff7ab97a08   104  stp x17, cp, [jssp, #-16]!
0xffff7ab97a0c   108  add fp, jssp, #0x10 (16)
0xffff7ab97a10   112  ldr x17, pc+24 (addr 0x0000ffff7ab97a28)    ;; lazy deoptimization bailout 0
0xffff7ab97a14   116  add x17, x17, x16
0xffff7ab97a18   120  br x17
0xffff7ab97a1c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab97a20   128  d63f03e0       constant
0xffff7ab97a24   132  d503201f       constant
0xffff7ab97a28   136  7a906000       constant
0xffff7ab97a2c   140  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7ab979d0  code target (STUB)  (0xffff7ab170c0)
0xffff7ab979e0  constant pool (size 16)
0xffff7ab97a10  runtime entry
0xffff7ab97a1c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0xffff7ab979a0     0  tbz w0, #0, #+0x50 (addr 0xffff7ab979f0)
0xffff7ab979a4     4  mov x2, x0
0xffff7ab979a8     8  stur x2, [x1, #31]
0xffff7ab979ac    12  add x3, x1, #0x1f (31)
0xffff7ab979b0    16  and x2, x2, #0xfffffffffff00000
0xffff7ab979b4    20  ldr x2, [x2, #8]
0xffff7ab979b8    24  tbz w2, #1, #+0x24 (addr 0xffff7ab979dc)
0xffff7ab979bc    28  and x2, x1, #0xfffffffffff00000
0xffff7ab979c0    32  ldr x2, [x2, #8]
0xffff7ab979c4    36  tbz w2, #2, #+0x18 (addr 0xffff7ab979dc)
0xffff7ab979c8    40  sub csp, jssp, #0x8 (8)
0xffff7ab979cc    44  str lr, [jssp, #-8]!
0xffff7ab979d0    48  ldr x16, pc+24 (addr 0x0000ffff7ab979e8)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab979d4    52  blr x16
0xffff7ab979d8    56  ldr lr, [jssp], #8
0xffff7ab979dc    60  ret
0xffff7ab979e0    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab979e4    68  d63f03e0       constant
0xffff7ab979e8    72  7ab170c0       constant
0xffff7ab979ec    76  0000ffff       constant
0xffff7ab979f0    80  movz x16, #0x0
0xffff7ab979f4    84  sub csp, jssp, #0x10 (16)
0xffff7ab979f8    88  stp fp, lr, [jssp, #-16]!
0xffff7ab979fc    92  bl #+0x4 (addr 0xffff7ab97a00)
0xffff7ab97a00    96  movz x17, #0xa00000000
0xffff7ab97a04   100  sub csp, jssp, #0x10 (16)
0xffff7ab97a08   104  stp x17, cp, [jssp, #-16]!
0xffff7ab97a0c   108  add fp, jssp, #0x10 (16)
0xffff7ab97a10   112  ldr x17, pc+24 (addr 0x0000ffff7ab97a28)    ;; lazy deoptimization bailout 0
0xffff7ab97a14   116  add x17, x17, x16
0xffff7ab97a18   120  br x17
0xffff7ab97a1c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab97a20   128  d63f03e0       constant
0xffff7ab97a24   132  d503201f       constant
0xffff7ab97a28   136  7a906000       constant
0xffff7ab97a2c   140  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7ab979d0  code target (STUB)  (0xffff7ab170c0)
0xffff7ab979e0  constant pool (size 16)
0xffff7ab97a10  runtime entry
0xffff7ab97a1c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = timers
compiler = unknown
Instructions (size = 184)
0xffff7ab97f40     0  sub csp, jssp, #0x8 (8)
0xffff7ab97f44     4  str x3, [jssp, #-8]!
0xffff7ab97f48     8  sub csp, jssp, #0x8 (8)
0xffff7ab97f4c    12  str x4, [jssp, #-8]!
0xffff7ab97f50    16  ldr x3, pc+112 (addr 0x0000ffff7ab97fc0)    ;; object: 0x20d63e59 Cell for 0
0xffff7ab97f54    20  ldur x3, [x3, #7]
0xffff7ab97f58    24  cmp x3, #0x0 (0)
0xffff7ab97f5c    28  b.ne #+0x44 (addr 0xffff7ab97fa0)
0xffff7ab97f60    32  tbz w0, #0, #+0x40 (addr 0xffff7ab97fa0)
0xffff7ab97f64    36  ldur x3, [x0, #-1]
0xffff7ab97f68    40  ldr x4, pc+96 (addr 0x0000ffff7ab97fc8)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab97f6c    44  ldur x4, [x4, #7]
0xffff7ab97f70    48  cmp x3, x4
0xffff7ab97f74    52  b.ne #+0x2c (addr 0xffff7ab97fa0)
0xffff7ab97f78    56  ldr x5, pc+88 (addr 0x0000ffff7ab97fd0)    ;; object: 0x20de4b41 WeakCell for 0x4ec24441 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab97f7c    60  ldur x5, [x5, #7]
0xffff7ab97f80    64  tbz w5, #0, #+0x20 (addr 0xffff7ab97fa0)
0xffff7ab97f84    68  ldursw x4, [x5, #15]
0xffff7ab97f88    72  tbnz w4, #23, #+0x18 (addr 0xffff7ab97fa0)
0xffff7ab97f8c    76  ldr x4, [jssp], #8
0xffff7ab97f90    80  ldr x3, [jssp], #8
0xffff7ab97f94    84  ldr x2, pc+68 (addr 0x0000ffff7ab97fd8)    ;; object: 0x20dba181 <String[6]: timers>
0xffff7ab97f98    88  ldr x16, pc+72 (addr 0x0000ffff7ab97fe0)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0xffff7ab97f9c    92  br x16
0xffff7ab97fa0    96  ldr x2, pc+72 (addr 0x0000ffff7ab97fe8)    ;; object: 0x20dba181 <String[6]: timers>
0xffff7ab97fa4   100  ldr x4, [jssp], #8
0xffff7ab97fa8   104  ldr x3, [jssp], #8
0xffff7ab97fac   108  ldr x16, pc+68 (addr 0x0000ffff7ab97ff0)    ;; code: BUILTIN
0xffff7ab97fb0   112  br x16
0xffff7ab97fb4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab97fb8   120  d63f03e0       constant
0xffff7ab97fbc   124  d503201f       constant
0xffff7ab97fc0   128  20d63e59       constant
0xffff7ab97fc4   132  00000000       constant
0xffff7ab97fc8   136  20dc22b1       constant
0xffff7ab97fcc   140  00000000       constant
0xffff7ab97fd0   144  20de4b41       constant
0xffff7ab97fd4   148  00000000       constant
0xffff7ab97fd8   152  20dba181       constant
0xffff7ab97fdc   156  00000000       constant
0xffff7ab97fe0   160  7ab38860       constant
0xffff7ab97fe4   164  0000ffff       constant
0xffff7ab97fe8   168  20dba181       constant
0xffff7ab97fec   172  00000000       constant
0xffff7ab97ff0   176  7ab22420       constant
0xffff7ab97ff4   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7ab97f50  embedded object  (0x20d63e59 Cell for 0)
0xffff7ab97f68  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab97f78  embedded object  (0x20de4b41 WeakCell for 0x4ec24441 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab97f94  embedded object  (0x20dba181 <String[6]: timers>)
0xffff7ab97f98  code target (HANDLER)  (0xffff7ab38860)
0xffff7ab97fa0  embedded object  (0x20dba181 <String[6]: timers>)
0xffff7ab97fac  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab97fb4  constant pool (size 68)

--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 741)
0xffff7ab98060     0  movz x2, #0xe2c0
0xffff7ab98064     4  movk x2, #0x9ab, lsl #16
0xffff7ab98068     8  ldp x3, x0, [x2]
0xffff7ab9806c    12  adds x16, x3, #0x120 (288)
0xffff7ab98070    16  ccmp x16, x0, #nzCv, lo
0xffff7ab98074    20  b.hi #+0x138 (addr 0xffff7ab981ac)
0xffff7ab98078    24  str x16, [x2]
0xffff7ab9807c    28  orr x3, x3, #0x1
0xffff7ab98080    32  ldr x0, pc+408 (addr 0x0000ffff7ab98218)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab98084    36  stur x0, [x3, #-1]
0xffff7ab98088    40  movz x0, #0x2200000000
0xffff7ab9808c    44  stur x0, [x3, #7]
0xffff7ab98090    48  stur x1, [x3, #15]
0xffff7ab98094    52  stur cp, [x3, #23]
0xffff7ab98098    56  ldr x0, pc+392 (addr 0x0000ffff7ab98220)    ;; object: 0x20d04519 <the hole>
0xffff7ab9809c    60  stur x0, [x3, #31]
0xffff7ab980a0    64  ldur x0, [cp, #39]
0xffff7ab980a4    68  stur x0, [x3, #39]
0xffff7ab980a8    72  ldr x0, pc+384 (addr 0x0000ffff7ab98228)    ;; object: 0x20d04241 <undefined>
0xffff7ab980ac    76  stur x0, [x3, #47]
0xffff7ab980b0    80  ldr x0, pc+384 (addr 0x0000ffff7ab98230)    ;; object: 0x20d04241 <undefined>
0xffff7ab980b4    84  stur x0, [x3, #55]
0xffff7ab980b8    88  ldr x0, pc+384 (addr 0x0000ffff7ab98238)    ;; object: 0x20d04241 <undefined>
0xffff7ab980bc    92  stur x0, [x3, #63]
0xffff7ab980c0    96  ldr x0, pc+384 (addr 0x0000ffff7ab98240)    ;; object: 0x20d04241 <undefined>
0xffff7ab980c4   100  stur x0, [x3, #71]
0xffff7ab980c8   104  ldr x0, pc+384 (addr 0x0000ffff7ab98248)    ;; object: 0x20d04241 <undefined>
0xffff7ab980cc   108  stur x0, [x3, #79]
0xffff7ab980d0   112  ldr x0, pc+384 (addr 0x0000ffff7ab98250)    ;; object: 0x20d04241 <undefined>
0xffff7ab980d4   116  stur x0, [x3, #87]
0xffff7ab980d8   120  ldr x0, pc+384 (addr 0x0000ffff7ab98258)    ;; object: 0x20d04241 <undefined>
0xffff7ab980dc   124  stur x0, [x3, #95]
0xffff7ab980e0   128  ldr x0, pc+384 (addr 0x0000ffff7ab98260)    ;; object: 0x20d04241 <undefined>
0xffff7ab980e4   132  stur x0, [x3, #103]
0xffff7ab980e8   136  ldr x0, pc+384 (addr 0x0000ffff7ab98268)    ;; object: 0x20d04241 <undefined>
0xffff7ab980ec   140  stur x0, [x3, #111]
0xffff7ab980f0   144  ldr x0, pc+384 (addr 0x0000ffff7ab98270)    ;; object: 0x20d04241 <undefined>
0xffff7ab980f4   148  stur x0, [x3, #119]
0xffff7ab980f8   152  ldr x0, pc+384 (addr 0x0000ffff7ab98278)    ;; object: 0x20d04241 <undefined>
0xffff7ab980fc   156  stur x0, [x3, #127]
0xffff7ab98100   160  ldr x0, pc+384 (addr 0x0000ffff7ab98280)    ;; object: 0x20d04241 <undefined>
0xffff7ab98104   164  stur x0, [x3, #135]
0xffff7ab98108   168  ldr x0, pc+384 (addr 0x0000ffff7ab98288)    ;; object: 0x20d04241 <undefined>
0xffff7ab9810c   172  stur x0, [x3, #143]
0xffff7ab98110   176  ldr x0, pc+384 (addr 0x0000ffff7ab98290)    ;; object: 0x20d04241 <undefined>
0xffff7ab98114   180  stur x0, [x3, #151]
0xffff7ab98118   184  ldr x0, pc+384 (addr 0x0000ffff7ab98298)    ;; object: 0x20d04241 <undefined>
0xffff7ab9811c   188  stur x0, [x3, #159]
0xffff7ab98120   192  ldr x0, pc+384 (addr 0x0000ffff7ab982a0)    ;; object: 0x20d04241 <undefined>
0xffff7ab98124   196  stur x0, [x3, #167]
0xffff7ab98128   200  ldr x0, pc+384 (addr 0x0000ffff7ab982a8)    ;; object: 0x20d04241 <undefined>
0xffff7ab9812c   204  stur x0, [x3, #175]
0xffff7ab98130   208  ldr x0, pc+384 (addr 0x0000ffff7ab982b0)    ;; object: 0x20d04241 <undefined>
0xffff7ab98134   212  stur x0, [x3, #183]
0xffff7ab98138   216  ldr x0, pc+384 (addr 0x0000ffff7ab982b8)    ;; object: 0x20d04241 <undefined>
0xffff7ab9813c   220  stur x0, [x3, #191]
0xffff7ab98140   224  ldr x0, pc+384 (addr 0x0000ffff7ab982c0)    ;; object: 0x20d04241 <undefined>
0xffff7ab98144   228  stur x0, [x3, #199]
0xffff7ab98148   232  ldr x0, pc+384 (addr 0x0000ffff7ab982c8)    ;; object: 0x20d04241 <undefined>
0xffff7ab9814c   236  stur x0, [x3, #207]
0xffff7ab98150   240  ldr x0, pc+384 (addr 0x0000ffff7ab982d0)    ;; object: 0x20d04241 <undefined>
0xffff7ab98154   244  stur x0, [x3, #215]
0xffff7ab98158   248  ldr x0, pc+384 (addr 0x0000ffff7ab982d8)    ;; object: 0x20d04241 <undefined>
0xffff7ab9815c   252  stur x0, [x3, #223]
0xffff7ab98160   256  ldr x0, pc+384 (addr 0x0000ffff7ab982e0)    ;; object: 0x20d04241 <undefined>
0xffff7ab98164   260  stur x0, [x3, #231]
0xffff7ab98168   264  ldr x0, pc+384 (addr 0x0000ffff7ab982e8)    ;; object: 0x20d04241 <undefined>
0xffff7ab9816c   268  stur x0, [x3, #239]
0xffff7ab98170   272  ldr x0, pc+384 (addr 0x0000ffff7ab982f0)    ;; object: 0x20d04241 <undefined>
0xffff7ab98174   276  stur x0, [x3, #247]
0xffff7ab98178   280  ldr x0, pc+384 (addr 0x0000ffff7ab982f8)    ;; object: 0x20d04241 <undefined>
0xffff7ab9817c   284  stur x0, [x3, #255]
0xffff7ab98180   288  ldr x0, pc+384 (addr 0x0000ffff7ab98300)    ;; object: 0x20d04241 <undefined>
0xffff7ab98184   292  movz x16, #0x107
0xffff7ab98188   296  str x0, [x3, x16]
0xffff7ab9818c   300  ldr x0, pc+380 (addr 0x0000ffff7ab98308)    ;; object: 0x20d04241 <undefined>
0xffff7ab98190   304  movz x16, #0x10f
0xffff7ab98194   308  str x0, [x3, x16]
0xffff7ab98198   312  ldr x0, pc+376 (addr 0x0000ffff7ab98310)    ;; object: 0x20d04241 <undefined>
0xffff7ab9819c   316  movz x16, #0x117
0xffff7ab981a0   320  str x0, [x3, x16]
0xffff7ab981a4   324  mov x0, x3
0xffff7ab981a8   328  ret
0xffff7ab981ac   332  sub csp, jssp, #0x10 (16)
0xffff7ab981b0   336  stp fp, lr, [jssp, #-16]!
0xffff7ab981b4   340  movz fp, #0xa00000000
0xffff7ab981b8   344  sub csp, jssp, #0x8 (8)
0xffff7ab981bc   348  str fp, [jssp, #-8]!
0xffff7ab981c0   352  add fp, jssp, #0x8 (8)
0xffff7ab981c4   356  movz x3, #0x0
0xffff7ab981c8   360  mov x16, lr
0xffff7ab981cc   364  ldr x17, pc+332 (addr 0x0000ffff7ab98318)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab981d0   368  blr x17
0xffff7ab981d4   372  movz x0, #0x12000000000
0xffff7ab981d8   376  movz x10, #0x0
0xffff7ab981dc   380  sub csp, jssp, #0x10 (16)
0xffff7ab981e0   384  stp x10, x0, [jssp, #-16]!
0xffff7ab981e4   388  movz x0, #0x2
0xffff7ab981e8   392  movz x1, #0x5b88
0xffff7ab981ec   396  movk x1, #0xe2, lsl #16
0xffff7ab981f0   400  ldr x16, pc+304 (addr 0x0000ffff7ab98320)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab981f4   404  blr x16
0xffff7ab981f8   408  str x0, [jssp, #24]
0xffff7ab981fc   412  ldr x16, pc+300 (addr 0x0000ffff7ab98328)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab98200   416  blr x16
0xffff7ab98204   420  ldr lr, [jssp, #16]
0xffff7ab98208   424  ldp xzr, fp, [jssp], #24
0xffff7ab9820c   428  b #-0x18c (addr 0xffff7ab98080)
0xffff7ab98210   432  580008ff       constant pool begin (num_const = 71)    ;; constant pool
0xffff7ab98214   436  d63f03e0       constant
0xffff7ab98218   440  4ec06149       constant
0xffff7ab9821c   444  00000000       constant
0xffff7ab98220   448  20d04519       constant
0xffff7ab98224   452  00000000       constant
0xffff7ab98228   456  20d04241       constant
0xffff7ab9822c   460  00000000       constant
0xffff7ab98230   464  20d04241       constant
0xffff7ab98234   468  00000000       constant
0xffff7ab98238   472  20d04241       constant
0xffff7ab9823c   476  00000000       constant
0xffff7ab98240   480  20d04241       constant
0xffff7ab98244   484  00000000       constant
0xffff7ab98248   488  20d04241       constant
0xffff7ab9824c   492  00000000       constant
0xffff7ab98250   496  20d04241       constant
0xffff7ab98254   500  00000000       constant
0xffff7ab98258   504  20d04241       constant
0xffff7ab9825c   508  00000000       constant
0xffff7ab98260   512  20d04241       constant
0xffff7ab98264   516  00000000       constant
0xffff7ab98268   520  20d04241       constant
0xffff7ab9826c   524  00000000       constant
0xffff7ab98270   528  20d04241       constant
0xffff7ab98274   532  00000000       constant
0xffff7ab98278   536  20d04241       constant
0xffff7ab9827c   540  00000000       constant
0xffff7ab98280   544  20d04241       constant
0xffff7ab98284   548  00000000       constant
0xffff7ab98288   552  20d04241       constant
0xffff7ab9828c   556  00000000       constant
0xffff7ab98290   560  20d04241       constant
0xffff7ab98294   564  00000000       constant
0xffff7ab98298   568  20d04241       constant
0xffff7ab9829c   572  00000000       constant
0xffff7ab982a0   576  20d04241       constant
0xffff7ab982a4   580  00000000       constant
0xffff7ab982a8   584  20d04241       constant
0xffff7ab982ac   588  00000000       constant
0xffff7ab982b0   592  20d04241       constant
0xffff7ab982b4   596  00000000       constant
0xffff7ab982b8   600  20d04241       constant
0xffff7ab982bc   604  00000000       constant
0xffff7ab982c0   608  20d04241       constant
0xffff7ab982c4   612  00000000       constant
0xffff7ab982c8   616  20d04241       constant
0xffff7ab982cc   620  00000000       constant
0xffff7ab982d0   624  20d04241       constant
0xffff7ab982d4   628  00000000       constant
0xffff7ab982d8   632  20d04241       constant
0xffff7ab982dc   636  00000000       constant
0xffff7ab982e0   640  20d04241       constant
0xffff7ab982e4   644  00000000       constant
0xffff7ab982e8   648  20d04241       constant
0xffff7ab982ec   652  00000000       constant
0xffff7ab982f0   656  20d04241       constant
0xffff7ab982f4   660  00000000       constant
0xffff7ab982f8   664  20d04241       constant
0xffff7ab982fc   668  00000000       constant
0xffff7ab98300   672  20d04241       constant
0xffff7ab98304   676  00000000       constant
0xffff7ab98308   680  20d04241       constant
0xffff7ab9830c   684  00000000       constant
0xffff7ab98310   688  20d04241       constant
0xffff7ab98314   692  00000000       constant
0xffff7ab98318   696  7ab06820       constant
0xffff7ab9831c   700  0000ffff       constant
0xffff7ab98320   704  7ab06260       constant
0xffff7ab98324   708  0000ffff       constant
0xffff7ab98328   712  7ab068e0       constant
0xffff7ab9832c   716  0000ffff       constant


Safepoints (size = 21)
0xffff7ab981f8   408  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 41)
0xffff7ab98080  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab98098  embedded object  (0x20d04519 <the hole>)
0xffff7ab980a8  embedded object  (0x20d04241 <undefined>)
0xffff7ab980b0  embedded object  (0x20d04241 <undefined>)
0xffff7ab980b8  embedded object  (0x20d04241 <undefined>)
0xffff7ab980c0  embedded object  (0x20d04241 <undefined>)
0xffff7ab980c8  embedded object  (0x20d04241 <undefined>)
0xffff7ab980d0  embedded object  (0x20d04241 <undefined>)
0xffff7ab980d8  embedded object  (0x20d04241 <undefined>)
0xffff7ab980e0  embedded object  (0x20d04241 <undefined>)
0xffff7ab980e8  embedded object  (0x20d04241 <undefined>)
0xffff7ab980f0  embedded object  (0x20d04241 <undefined>)
0xffff7ab980f8  embedded object  (0x20d04241 <undefined>)
0xffff7ab98100  embedded object  (0x20d04241 <undefined>)
0xffff7ab98108  embedded object  (0x20d04241 <undefined>)
0xffff7ab98110  embedded object  (0x20d04241 <undefined>)
0xffff7ab98118  embedded object  (0x20d04241 <undefined>)
0xffff7ab98120  embedded object  (0x20d04241 <undefined>)
0xffff7ab98128  embedded object  (0x20d04241 <undefined>)
0xffff7ab98130  embedded object  (0x20d04241 <undefined>)
0xffff7ab98138  embedded object  (0x20d04241 <undefined>)
0xffff7ab98140  embedded object  (0x20d04241 <undefined>)
0xffff7ab98148  embedded object  (0x20d04241 <undefined>)
0xffff7ab98150  embedded object  (0x20d04241 <undefined>)
0xffff7ab98158  embedded object  (0x20d04241 <undefined>)
0xffff7ab98160  embedded object  (0x20d04241 <undefined>)
0xffff7ab98168  embedded object  (0x20d04241 <undefined>)
0xffff7ab98170  embedded object  (0x20d04241 <undefined>)
0xffff7ab98178  embedded object  (0x20d04241 <undefined>)
0xffff7ab98180  embedded object  (0x20d04241 <undefined>)
0xffff7ab9818c  embedded object  (0x20d04241 <undefined>)
0xffff7ab98198  embedded object  (0x20d04241 <undefined>)
0xffff7ab981cc  code target (STUB)  (0xffff7ab06820)
0xffff7ab981f0  code target (STUB)  (0xffff7ab06260)
0xffff7ab981fc  code target (STUB)  (0xffff7ab068e0)
0xffff7ab98210  constant pool (size 288)

--- End code ---
kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 741)
0xffff7ab98060     0  movz x2, #0xe2c0
0xffff7ab98064     4  movk x2, #0x9ab, lsl #16
0xffff7ab98068     8  ldp x3, x0, [x2]
0xffff7ab9806c    12  adds x16, x3, #0x120 (288)
0xffff7ab98070    16  ccmp x16, x0, #nzCv, lo
0xffff7ab98074    20  b.hi #+0x138 (addr 0xffff7ab981ac)
0xffff7ab98078    24  str x16, [x2]
0xffff7ab9807c    28  orr x3, x3, #0x1
0xffff7ab98080    32  ldr x0, pc+408 (addr 0x0000ffff7ab98218)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab98084    36  stur x0, [x3, #-1]
0xffff7ab98088    40  movz x0, #0x2200000000
0xffff7ab9808c    44  stur x0, [x3, #7]
0xffff7ab98090    48  stur x1, [x3, #15]
0xffff7ab98094    52  stur cp, [x3, #23]
0xffff7ab98098    56  ldr x0, pc+392 (addr 0x0000ffff7ab98220)    ;; object: 0x20d04519 <the hole>
0xffff7ab9809c    60  stur x0, [x3, #31]
0xffff7ab980a0    64  ldur x0, [cp, #39]
0xffff7ab980a4    68  stur x0, [x3, #39]
0xffff7ab980a8    72  ldr x0, pc+384 (addr 0x0000ffff7ab98228)    ;; object: 0x20d04241 <undefined>
0xffff7ab980ac    76  stur x0, [x3, #47]
0xffff7ab980b0    80  ldr x0, pc+384 (addr 0x0000ffff7ab98230)    ;; object: 0x20d04241 <undefined>
0xffff7ab980b4    84  stur x0, [x3, #55]
0xffff7ab980b8    88  ldr x0, pc+384 (addr 0x0000ffff7ab98238)    ;; object: 0x20d04241 <undefined>
0xffff7ab980bc    92  stur x0, [x3, #63]
0xffff7ab980c0    96  ldr x0, pc+384 (addr 0x0000ffff7ab98240)    ;; object: 0x20d04241 <undefined>
0xffff7ab980c4   100  stur x0, [x3, #71]
0xffff7ab980c8   104  ldr x0, pc+384 (addr 0x0000ffff7ab98248)    ;; object: 0x20d04241 <undefined>
0xffff7ab980cc   108  stur x0, [x3, #79]
0xffff7ab980d0   112  ldr x0, pc+384 (addr 0x0000ffff7ab98250)    ;; object: 0x20d04241 <undefined>
0xffff7ab980d4   116  stur x0, [x3, #87]
0xffff7ab980d8   120  ldr x0, pc+384 (addr 0x0000ffff7ab98258)    ;; object: 0x20d04241 <undefined>
0xffff7ab980dc   124  stur x0, [x3, #95]
0xffff7ab980e0   128  ldr x0, pc+384 (addr 0x0000ffff7ab98260)    ;; object: 0x20d04241 <undefined>
0xffff7ab980e4   132  stur x0, [x3, #103]
0xffff7ab980e8   136  ldr x0, pc+384 (addr 0x0000ffff7ab98268)    ;; object: 0x20d04241 <undefined>
0xffff7ab980ec   140  stur x0, [x3, #111]
0xffff7ab980f0   144  ldr x0, pc+384 (addr 0x0000ffff7ab98270)    ;; object: 0x20d04241 <undefined>
0xffff7ab980f4   148  stur x0, [x3, #119]
0xffff7ab980f8   152  ldr x0, pc+384 (addr 0x0000ffff7ab98278)    ;; object: 0x20d04241 <undefined>
0xffff7ab980fc   156  stur x0, [x3, #127]
0xffff7ab98100   160  ldr x0, pc+384 (addr 0x0000ffff7ab98280)    ;; object: 0x20d04241 <undefined>
0xffff7ab98104   164  stur x0, [x3, #135]
0xffff7ab98108   168  ldr x0, pc+384 (addr 0x0000ffff7ab98288)    ;; object: 0x20d04241 <undefined>
0xffff7ab9810c   172  stur x0, [x3, #143]
0xffff7ab98110   176  ldr x0, pc+384 (addr 0x0000ffff7ab98290)    ;; object: 0x20d04241 <undefined>
0xffff7ab98114   180  stur x0, [x3, #151]
0xffff7ab98118   184  ldr x0, pc+384 (addr 0x0000ffff7ab98298)    ;; object: 0x20d04241 <undefined>
0xffff7ab9811c   188  stur x0, [x3, #159]
0xffff7ab98120   192  ldr x0, pc+384 (addr 0x0000ffff7ab982a0)    ;; object: 0x20d04241 <undefined>
0xffff7ab98124   196  stur x0, [x3, #167]
0xffff7ab98128   200  ldr x0, pc+384 (addr 0x0000ffff7ab982a8)    ;; object: 0x20d04241 <undefined>
0xffff7ab9812c   204  stur x0, [x3, #175]
0xffff7ab98130   208  ldr x0, pc+384 (addr 0x0000ffff7ab982b0)    ;; object: 0x20d04241 <undefined>
0xffff7ab98134   212  stur x0, [x3, #183]
0xffff7ab98138   216  ldr x0, pc+384 (addr 0x0000ffff7ab982b8)    ;; object: 0x20d04241 <undefined>
0xffff7ab9813c   220  stur x0, [x3, #191]
0xffff7ab98140   224  ldr x0, pc+384 (addr 0x0000ffff7ab982c0)    ;; object: 0x20d04241 <undefined>
0xffff7ab98144   228  stur x0, [x3, #199]
0xffff7ab98148   232  ldr x0, pc+384 (addr 0x0000ffff7ab982c8)    ;; object: 0x20d04241 <undefined>
0xffff7ab9814c   236  stur x0, [x3, #207]
0xffff7ab98150   240  ldr x0, pc+384 (addr 0x0000ffff7ab982d0)    ;; object: 0x20d04241 <undefined>
0xffff7ab98154   244  stur x0, [x3, #215]
0xffff7ab98158   248  ldr x0, pc+384 (addr 0x0000ffff7ab982d8)    ;; object: 0x20d04241 <undefined>
0xffff7ab9815c   252  stur x0, [x3, #223]
0xffff7ab98160   256  ldr x0, pc+384 (addr 0x0000ffff7ab982e0)    ;; object: 0x20d04241 <undefined>
0xffff7ab98164   260  stur x0, [x3, #231]
0xffff7ab98168   264  ldr x0, pc+384 (addr 0x0000ffff7ab982e8)    ;; object: 0x20d04241 <undefined>
0xffff7ab9816c   268  stur x0, [x3, #239]
0xffff7ab98170   272  ldr x0, pc+384 (addr 0x0000ffff7ab982f0)    ;; object: 0x20d04241 <undefined>
0xffff7ab98174   276  stur x0, [x3, #247]
0xffff7ab98178   280  ldr x0, pc+384 (addr 0x0000ffff7ab982f8)    ;; object: 0x20d04241 <undefined>
0xffff7ab9817c   284  stur x0, [x3, #255]
0xffff7ab98180   288  ldr x0, pc+384 (addr 0x0000ffff7ab98300)    ;; object: 0x20d04241 <undefined>
0xffff7ab98184   292  movz x16, #0x107
0xffff7ab98188   296  str x0, [x3, x16]
0xffff7ab9818c   300  ldr x0, pc+380 (addr 0x0000ffff7ab98308)    ;; object: 0x20d04241 <undefined>
0xffff7ab98190   304  movz x16, #0x10f
0xffff7ab98194   308  str x0, [x3, x16]
0xffff7ab98198   312  ldr x0, pc+376 (addr 0x0000ffff7ab98310)    ;; object: 0x20d04241 <undefined>
0xffff7ab9819c   316  movz x16, #0x117
0xffff7ab981a0   320  str x0, [x3, x16]
0xffff7ab981a4   324  mov x0, x3
0xffff7ab981a8   328  ret
0xffff7ab981ac   332  sub csp, jssp, #0x10 (16)
0xffff7ab981b0   336  stp fp, lr, [jssp, #-16]!
0xffff7ab981b4   340  movz fp, #0xa00000000
0xffff7ab981b8   344  sub csp, jssp, #0x8 (8)
0xffff7ab981bc   348  str fp, [jssp, #-8]!
0xffff7ab981c0   352  add fp, jssp, #0x8 (8)
0xffff7ab981c4   356  movz x3, #0x0
0xffff7ab981c8   360  mov x16, lr
0xffff7ab981cc   364  ldr x17, pc+332 (addr 0x0000ffff7ab98318)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab981d0   368  blr x17
0xffff7ab981d4   372  movz x0, #0x12000000000
0xffff7ab981d8   376  movz x10, #0x0
0xffff7ab981dc   380  sub csp, jssp, #0x10 (16)
0xffff7ab981e0   384  stp x10, x0, [jssp, #-16]!
0xffff7ab981e4   388  movz x0, #0x2
0xffff7ab981e8   392  movz x1, #0x5b88
0xffff7ab981ec   396  movk x1, #0xe2, lsl #16
0xffff7ab981f0   400  ldr x16, pc+304 (addr 0x0000ffff7ab98320)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab981f4   404  blr x16
0xffff7ab981f8   408  str x0, [jssp, #24]
0xffff7ab981fc   412  ldr x16, pc+300 (addr 0x0000ffff7ab98328)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab98200   416  blr x16
0xffff7ab98204   420  ldr lr, [jssp, #16]
0xffff7ab98208   424  ldp xzr, fp, [jssp], #24
0xffff7ab9820c   428  b #-0x18c (addr 0xffff7ab98080)
0xffff7ab98210   432  580008ff       constant pool begin (num_const = 71)    ;; constant pool
0xffff7ab98214   436  d63f03e0       constant
0xffff7ab98218   440  4ec06149       constant
0xffff7ab9821c   444  00000000       constant
0xffff7ab98220   448  20d04519       constant
0xffff7ab98224   452  00000000       constant
0xffff7ab98228   456  20d04241       constant
0xffff7ab9822c   460  00000000       constant
0xffff7ab98230   464  20d04241       constant
0xffff7ab98234   468  00000000       constant
0xffff7ab98238   472  20d04241       constant
0xffff7ab9823c   476  00000000       constant
0xffff7ab98240   480  20d04241       constant
0xffff7ab98244   484  00000000       constant
0xffff7ab98248   488  20d04241       constant
0xffff7ab9824c   492  00000000       constant
0xffff7ab98250   496  20d04241       constant
0xffff7ab98254   500  00000000       constant
0xffff7ab98258   504  20d04241       constant
0xffff7ab9825c   508  00000000       constant
0xffff7ab98260   512  20d04241       constant
0xffff7ab98264   516  00000000       constant
0xffff7ab98268   520  20d04241       constant
0xffff7ab9826c   524  00000000       constant
0xffff7ab98270   528  20d04241       constant
0xffff7ab98274   532  00000000       constant
0xffff7ab98278   536  20d04241       constant
0xffff7ab9827c   540  00000000       constant
0xffff7ab98280   544  20d04241       constant
0xffff7ab98284   548  00000000       constant
0xffff7ab98288   552  20d04241       constant
0xffff7ab9828c   556  00000000       constant
0xffff7ab98290   560  20d04241       constant
0xffff7ab98294   564  00000000       constant
0xffff7ab98298   568  20d04241       constant
0xffff7ab9829c   572  00000000       constant
0xffff7ab982a0   576  20d04241       constant
0xffff7ab982a4   580  00000000       constant
0xffff7ab982a8   584  20d04241       constant
0xffff7ab982ac   588  00000000       constant
0xffff7ab982b0   592  20d04241       constant
0xffff7ab982b4   596  00000000       constant
0xffff7ab982b8   600  20d04241       constant
0xffff7ab982bc   604  00000000       constant
0xffff7ab982c0   608  20d04241       constant
0xffff7ab982c4   612  00000000       constant
0xffff7ab982c8   616  20d04241       constant
0xffff7ab982cc   620  00000000       constant
0xffff7ab982d0   624  20d04241       constant
0xffff7ab982d4   628  00000000       constant
0xffff7ab982d8   632  20d04241       constant
0xffff7ab982dc   636  00000000       constant
0xffff7ab982e0   640  20d04241       constant
0xffff7ab982e4   644  00000000       constant
0xffff7ab982e8   648  20d04241       constant
0xffff7ab982ec   652  00000000       constant
0xffff7ab982f0   656  20d04241       constant
0xffff7ab982f4   660  00000000       constant
0xffff7ab982f8   664  20d04241       constant
0xffff7ab982fc   668  00000000       constant
0xffff7ab98300   672  20d04241       constant
0xffff7ab98304   676  00000000       constant
0xffff7ab98308   680  20d04241       constant
0xffff7ab9830c   684  00000000       constant
0xffff7ab98310   688  20d04241       constant
0xffff7ab98314   692  00000000       constant
0xffff7ab98318   696  7ab06820       constant
0xffff7ab9831c   700  0000ffff       constant
0xffff7ab98320   704  7ab06260       constant
0xffff7ab98324   708  0000ffff       constant
0xffff7ab98328   712  7ab068e0       constant
0xffff7ab9832c   716  0000ffff       constant


Safepoints (size = 21)
0xffff7ab981f8   408  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 41)
0xffff7ab98080  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab98098  embedded object  (0x20d04519 <the hole>)
0xffff7ab980a8  embedded object  (0x20d04241 <undefined>)
0xffff7ab980b0  embedded object  (0x20d04241 <undefined>)
0xffff7ab980b8  embedded object  (0x20d04241 <undefined>)
0xffff7ab980c0  embedded object  (0x20d04241 <undefined>)
0xffff7ab980c8  embedded object  (0x20d04241 <undefined>)
0xffff7ab980d0  embedded object  (0x20d04241 <undefined>)
0xffff7ab980d8  embedded object  (0x20d04241 <undefined>)
0xffff7ab980e0  embedded object  (0x20d04241 <undefined>)
0xffff7ab980e8  embedded object  (0x20d04241 <undefined>)
0xffff7ab980f0  embedded object  (0x20d04241 <undefined>)
0xffff7ab980f8  embedded object  (0x20d04241 <undefined>)
0xffff7ab98100  embedded object  (0x20d04241 <undefined>)
0xffff7ab98108  embedded object  (0x20d04241 <undefined>)
0xffff7ab98110  embedded object  (0x20d04241 <undefined>)
0xffff7ab98118  embedded object  (0x20d04241 <undefined>)
0xffff7ab98120  embedded object  (0x20d04241 <undefined>)
0xffff7ab98128  embedded object  (0x20d04241 <undefined>)
0xffff7ab98130  embedded object  (0x20d04241 <undefined>)
0xffff7ab98138  embedded object  (0x20d04241 <undefined>)
0xffff7ab98140  embedded object  (0x20d04241 <undefined>)
0xffff7ab98148  embedded object  (0x20d04241 <undefined>)
0xffff7ab98150  embedded object  (0x20d04241 <undefined>)
0xffff7ab98158  embedded object  (0x20d04241 <undefined>)
0xffff7ab98160  embedded object  (0x20d04241 <undefined>)
0xffff7ab98168  embedded object  (0x20d04241 <undefined>)
0xffff7ab98170  embedded object  (0x20d04241 <undefined>)
0xffff7ab98178  embedded object  (0x20d04241 <undefined>)
0xffff7ab98180  embedded object  (0x20d04241 <undefined>)
0xffff7ab9818c  embedded object  (0x20d04241 <undefined>)
0xffff7ab98198  embedded object  (0x20d04241 <undefined>)
0xffff7ab981cc  code target (STUB)  (0xffff7ab06820)
0xffff7ab981f0  code target (STUB)  (0xffff7ab06260)
0xffff7ab981fc  code target (STUB)  (0xffff7ab068e0)
0xffff7ab98210  constant pool (size 288)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7ab99940     0  tbz w0, #0, #+0x98 (addr 0xffff7ab999d8)
0xffff7ab99944     4  mov x2, x0
0xffff7ab99948     8  ldur x4, [x1, #7]
0xffff7ab9994c    12  stur x2, [x4, #23]
0xffff7ab99950    16  add x3, x4, #0x17 (23)
0xffff7ab99954    20  and x2, x2, #0xfffffffffff00000
0xffff7ab99958    24  ldr x2, [x2, #8]
0xffff7ab9995c    28  tbz w2, #1, #+0x24 (addr 0xffff7ab99980)
0xffff7ab99960    32  and x2, x4, #0xfffffffffff00000
0xffff7ab99964    36  ldr x2, [x2, #8]
0xffff7ab99968    40  tbz w2, #2, #+0x18 (addr 0xffff7ab99980)
0xffff7ab9996c    44  sub csp, jssp, #0x8 (8)
0xffff7ab99970    48  str lr, [jssp, #-8]!
0xffff7ab99974    52  ldr x16, pc+84 (addr 0x0000ffff7ab999c8)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7ab99978    56  blr x16
0xffff7ab9997c    60  ldr lr, [jssp], #8
0xffff7ab99980    64  stur x5, [x1, #-1]
0xffff7ab99984    68  tbz w5, #0, #+0x34 (addr 0xffff7ab999b8)
0xffff7ab99988    72  sub x2, x1, #0x1 (1)
0xffff7ab9998c    76  and x5, x5, #0xfffffffffff00000
0xffff7ab99990    80  ldr x5, [x5, #8]
0xffff7ab99994    84  tbz w5, #1, #+0x24 (addr 0xffff7ab999b8)
0xffff7ab99998    88  and x5, x1, #0xfffffffffff00000
0xffff7ab9999c    92  ldr x5, [x5, #8]
0xffff7ab999a0    96  tbz w5, #2, #+0x18 (addr 0xffff7ab999b8)
0xffff7ab999a4   100  sub csp, jssp, #0x8 (8)
0xffff7ab999a8   104  str lr, [jssp, #-8]!
0xffff7ab999ac   108  ldr x16, pc+36 (addr 0x0000ffff7ab999d0)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab999b0   112  blr x16
0xffff7ab999b4   116  ldr lr, [jssp], #8
0xffff7ab999b8   120  ret
0xffff7ab999bc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab999c0   128  d63f03e0       constant
0xffff7ab999c4   132  d503201f       constant
0xffff7ab999c8   136  7ab378a0       constant
0xffff7ab999cc   140  0000ffff       constant
0xffff7ab999d0   144  7ab38080       constant
0xffff7ab999d4   148  0000ffff       constant
0xffff7ab999d8   152  movz x16, #0x0
0xffff7ab999dc   156  sub csp, jssp, #0x10 (16)
0xffff7ab999e0   160  stp fp, lr, [jssp, #-16]!
0xffff7ab999e4   164  bl #+0x4 (addr 0xffff7ab999e8)
0xffff7ab999e8   168  movz x17, #0xa00000000
0xffff7ab999ec   172  sub csp, jssp, #0x10 (16)
0xffff7ab999f0   176  stp x17, cp, [jssp, #-16]!
0xffff7ab999f4   180  add fp, jssp, #0x10 (16)
0xffff7ab999f8   184  ldr x17, pc+24 (addr 0x0000ffff7ab99a10)    ;; lazy deoptimization bailout 0
0xffff7ab999fc   188  add x17, x17, x16
0xffff7ab99a00   192  br x17
0xffff7ab99a04   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab99a08   200  d63f03e0       constant
0xffff7ab99a0c   204  d503201f       constant
0xffff7ab99a10   208  7a906000       constant
0xffff7ab99a14   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab99974  code target (STUB)  (0xffff7ab378a0)
0xffff7ab999ac  code target (STUB)  (0xffff7ab38080)
0xffff7ab999bc  constant pool (size 28)
0xffff7ab999f8  runtime entry
0xffff7ab99a04  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7ab99940     0  tbz w0, #0, #+0x98 (addr 0xffff7ab999d8)
0xffff7ab99944     4  mov x2, x0
0xffff7ab99948     8  ldur x4, [x1, #7]
0xffff7ab9994c    12  stur x2, [x4, #23]
0xffff7ab99950    16  add x3, x4, #0x17 (23)
0xffff7ab99954    20  and x2, x2, #0xfffffffffff00000
0xffff7ab99958    24  ldr x2, [x2, #8]
0xffff7ab9995c    28  tbz w2, #1, #+0x24 (addr 0xffff7ab99980)
0xffff7ab99960    32  and x2, x4, #0xfffffffffff00000
0xffff7ab99964    36  ldr x2, [x2, #8]
0xffff7ab99968    40  tbz w2, #2, #+0x18 (addr 0xffff7ab99980)
0xffff7ab9996c    44  sub csp, jssp, #0x8 (8)
0xffff7ab99970    48  str lr, [jssp, #-8]!
0xffff7ab99974    52  ldr x16, pc+84 (addr 0x0000ffff7ab999c8)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7ab99978    56  blr x16
0xffff7ab9997c    60  ldr lr, [jssp], #8
0xffff7ab99980    64  stur x5, [x1, #-1]
0xffff7ab99984    68  tbz w5, #0, #+0x34 (addr 0xffff7ab999b8)
0xffff7ab99988    72  sub x2, x1, #0x1 (1)
0xffff7ab9998c    76  and x5, x5, #0xfffffffffff00000
0xffff7ab99990    80  ldr x5, [x5, #8]
0xffff7ab99994    84  tbz w5, #1, #+0x24 (addr 0xffff7ab999b8)
0xffff7ab99998    88  and x5, x1, #0xfffffffffff00000
0xffff7ab9999c    92  ldr x5, [x5, #8]
0xffff7ab999a0    96  tbz w5, #2, #+0x18 (addr 0xffff7ab999b8)
0xffff7ab999a4   100  sub csp, jssp, #0x8 (8)
0xffff7ab999a8   104  str lr, [jssp, #-8]!
0xffff7ab999ac   108  ldr x16, pc+36 (addr 0x0000ffff7ab999d0)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab999b0   112  blr x16
0xffff7ab999b4   116  ldr lr, [jssp], #8
0xffff7ab999b8   120  ret
0xffff7ab999bc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab999c0   128  d63f03e0       constant
0xffff7ab999c4   132  d503201f       constant
0xffff7ab999c8   136  7ab378a0       constant
0xffff7ab999cc   140  0000ffff       constant
0xffff7ab999d0   144  7ab38080       constant
0xffff7ab999d4   148  0000ffff       constant
0xffff7ab999d8   152  movz x16, #0x0
0xffff7ab999dc   156  sub csp, jssp, #0x10 (16)
0xffff7ab999e0   160  stp fp, lr, [jssp, #-16]!
0xffff7ab999e4   164  bl #+0x4 (addr 0xffff7ab999e8)
0xffff7ab999e8   168  movz x17, #0xa00000000
0xffff7ab999ec   172  sub csp, jssp, #0x10 (16)
0xffff7ab999f0   176  stp x17, cp, [jssp, #-16]!
0xffff7ab999f4   180  add fp, jssp, #0x10 (16)
0xffff7ab999f8   184  ldr x17, pc+24 (addr 0x0000ffff7ab99a10)    ;; lazy deoptimization bailout 0
0xffff7ab999fc   188  add x17, x17, x16
0xffff7ab99a00   192  br x17
0xffff7ab99a04   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab99a08   200  d63f03e0       constant
0xffff7ab99a0c   204  d503201f       constant
0xffff7ab99a10   208  7a906000       constant
0xffff7ab99a14   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab99974  code target (STUB)  (0xffff7ab378a0)
0xffff7ab999ac  code target (STUB)  (0xffff7ab38080)
0xffff7ab999bc  constant pool (size 28)
0xffff7ab999f8  runtime entry
0xffff7ab99a04  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = internal/linkedlist
compiler = unknown
Instructions (size = 184)
0xffff7ab99a80     0  sub csp, jssp, #0x8 (8)
0xffff7ab99a84     4  str x3, [jssp, #-8]!
0xffff7ab99a88     8  sub csp, jssp, #0x8 (8)
0xffff7ab99a8c    12  str x4, [jssp, #-8]!
0xffff7ab99a90    16  ldr x3, pc+112 (addr 0x0000ffff7ab99b00)    ;; object: 0x20d63e59 Cell for 0
0xffff7ab99a94    20  ldur x3, [x3, #7]
0xffff7ab99a98    24  cmp x3, #0x0 (0)
0xffff7ab99a9c    28  b.ne #+0x44 (addr 0xffff7ab99ae0)
0xffff7ab99aa0    32  tbz w0, #0, #+0x40 (addr 0xffff7ab99ae0)
0xffff7ab99aa4    36  ldur x3, [x0, #-1]
0xffff7ab99aa8    40  ldr x4, pc+96 (addr 0x0000ffff7ab99b08)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab99aac    44  ldur x4, [x4, #7]
0xffff7ab99ab0    48  cmp x3, x4
0xffff7ab99ab4    52  b.ne #+0x2c (addr 0xffff7ab99ae0)
0xffff7ab99ab8    56  ldr x5, pc+88 (addr 0x0000ffff7ab99b10)    ;; object: 0x20de8e49 WeakCell for 0x4ec24de1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab99abc    60  ldur x5, [x5, #7]
0xffff7ab99ac0    64  tbz w5, #0, #+0x20 (addr 0xffff7ab99ae0)
0xffff7ab99ac4    68  ldursw x4, [x5, #15]
0xffff7ab99ac8    72  tbnz w4, #23, #+0x18 (addr 0xffff7ab99ae0)
0xffff7ab99acc    76  ldr x4, [jssp], #8
0xffff7ab99ad0    80  ldr x3, [jssp], #8
0xffff7ab99ad4    84  ldr x2, pc+68 (addr 0x0000ffff7ab99b18)    ;; object: 0x20dbe2f9 <String[19]: internal/linkedlist>
0xffff7ab99ad8    88  ldr x16, pc+72 (addr 0x0000ffff7ab99b20)    ;; code: HANDLER, StoreTransitionStub, minor: 196611
0xffff7ab99adc    92  br x16
0xffff7ab99ae0    96  ldr x2, pc+72 (addr 0x0000ffff7ab99b28)    ;; object: 0x20dbe2f9 <String[19]: internal/linkedlist>
0xffff7ab99ae4   100  ldr x4, [jssp], #8
0xffff7ab99ae8   104  ldr x3, [jssp], #8
0xffff7ab99aec   108  ldr x16, pc+68 (addr 0x0000ffff7ab99b30)    ;; code: BUILTIN
0xffff7ab99af0   112  br x16
0xffff7ab99af4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab99af8   120  d63f03e0       constant
0xffff7ab99afc   124  d503201f       constant
0xffff7ab99b00   128  20d63e59       constant
0xffff7ab99b04   132  00000000       constant
0xffff7ab99b08   136  20dc22b1       constant
0xffff7ab99b0c   140  00000000       constant
0xffff7ab99b10   144  20de8e49       constant
0xffff7ab99b14   148  00000000       constant
0xffff7ab99b18   152  20dbe2f9       constant
0xffff7ab99b1c   156  00000000       constant
0xffff7ab99b20   160  7ab99940       constant
0xffff7ab99b24   164  0000ffff       constant
0xffff7ab99b28   168  20dbe2f9       constant
0xffff7ab99b2c   172  00000000       constant
0xffff7ab99b30   176  7ab22420       constant
0xffff7ab99b34   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7ab99a90  embedded object  (0x20d63e59 Cell for 0)
0xffff7ab99aa8  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab99ab8  embedded object  (0x20de8e49 WeakCell for 0x4ec24de1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab99ad4  embedded object  (0x20dbe2f9 <String[19]: internal/linkedlist>)
0xffff7ab99ad8  code target (HANDLER)  (0xffff7ab99940)
0xffff7ab99ae0  embedded object  (0x20dbe2f9 <String[19]: internal/linkedlist>)
0xffff7ab99aec  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab99af4  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7ab9a100     0  tbz w0, #0, #+0x98 (addr 0xffff7ab9a198)
0xffff7ab9a104     4  mov x2, x0
0xffff7ab9a108     8  ldur x4, [x1, #7]
0xffff7ab9a10c    12  stur x2, [x4, #31]
0xffff7ab9a110    16  add x3, x4, #0x1f (31)
0xffff7ab9a114    20  and x2, x2, #0xfffffffffff00000
0xffff7ab9a118    24  ldr x2, [x2, #8]
0xffff7ab9a11c    28  tbz w2, #1, #+0x24 (addr 0xffff7ab9a140)
0xffff7ab9a120    32  and x2, x4, #0xfffffffffff00000
0xffff7ab9a124    36  ldr x2, [x2, #8]
0xffff7ab9a128    40  tbz w2, #2, #+0x18 (addr 0xffff7ab9a140)
0xffff7ab9a12c    44  sub csp, jssp, #0x8 (8)
0xffff7ab9a130    48  str lr, [jssp, #-8]!
0xffff7ab9a134    52  ldr x16, pc+84 (addr 0x0000ffff7ab9a188)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7ab9a138    56  blr x16
0xffff7ab9a13c    60  ldr lr, [jssp], #8
0xffff7ab9a140    64  stur x5, [x1, #-1]
0xffff7ab9a144    68  tbz w5, #0, #+0x34 (addr 0xffff7ab9a178)
0xffff7ab9a148    72  sub x2, x1, #0x1 (1)
0xffff7ab9a14c    76  and x5, x5, #0xfffffffffff00000
0xffff7ab9a150    80  ldr x5, [x5, #8]
0xffff7ab9a154    84  tbz w5, #1, #+0x24 (addr 0xffff7ab9a178)
0xffff7ab9a158    88  and x5, x1, #0xfffffffffff00000
0xffff7ab9a15c    92  ldr x5, [x5, #8]
0xffff7ab9a160    96  tbz w5, #2, #+0x18 (addr 0xffff7ab9a178)
0xffff7ab9a164   100  sub csp, jssp, #0x8 (8)
0xffff7ab9a168   104  str lr, [jssp, #-8]!
0xffff7ab9a16c   108  ldr x16, pc+36 (addr 0x0000ffff7ab9a190)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab9a170   112  blr x16
0xffff7ab9a174   116  ldr lr, [jssp], #8
0xffff7ab9a178   120  ret
0xffff7ab9a17c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab9a180   128  d63f03e0       constant
0xffff7ab9a184   132  d503201f       constant
0xffff7ab9a188   136  7ab378a0       constant
0xffff7ab9a18c   140  0000ffff       constant
0xffff7ab9a190   144  7ab38080       constant
0xffff7ab9a194   148  0000ffff       constant
0xffff7ab9a198   152  movz x16, #0x0
0xffff7ab9a19c   156  sub csp, jssp, #0x10 (16)
0xffff7ab9a1a0   160  stp fp, lr, [jssp, #-16]!
0xffff7ab9a1a4   164  bl #+0x4 (addr 0xffff7ab9a1a8)
0xffff7ab9a1a8   168  movz x17, #0xa00000000
0xffff7ab9a1ac   172  sub csp, jssp, #0x10 (16)
0xffff7ab9a1b0   176  stp x17, cp, [jssp, #-16]!
0xffff7ab9a1b4   180  add fp, jssp, #0x10 (16)
0xffff7ab9a1b8   184  ldr x17, pc+24 (addr 0x0000ffff7ab9a1d0)    ;; lazy deoptimization bailout 0
0xffff7ab9a1bc   188  add x17, x17, x16
0xffff7ab9a1c0   192  br x17
0xffff7ab9a1c4   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab9a1c8   200  d63f03e0       constant
0xffff7ab9a1cc   204  d503201f       constant
0xffff7ab9a1d0   208  7a906000       constant
0xffff7ab9a1d4   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab9a134  code target (STUB)  (0xffff7ab378a0)
0xffff7ab9a16c  code target (STUB)  (0xffff7ab38080)
0xffff7ab9a17c  constant pool (size 28)
0xffff7ab9a1b8  runtime entry
0xffff7ab9a1c4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7ab9a100     0  tbz w0, #0, #+0x98 (addr 0xffff7ab9a198)
0xffff7ab9a104     4  mov x2, x0
0xffff7ab9a108     8  ldur x4, [x1, #7]
0xffff7ab9a10c    12  stur x2, [x4, #31]
0xffff7ab9a110    16  add x3, x4, #0x1f (31)
0xffff7ab9a114    20  and x2, x2, #0xfffffffffff00000
0xffff7ab9a118    24  ldr x2, [x2, #8]
0xffff7ab9a11c    28  tbz w2, #1, #+0x24 (addr 0xffff7ab9a140)
0xffff7ab9a120    32  and x2, x4, #0xfffffffffff00000
0xffff7ab9a124    36  ldr x2, [x2, #8]
0xffff7ab9a128    40  tbz w2, #2, #+0x18 (addr 0xffff7ab9a140)
0xffff7ab9a12c    44  sub csp, jssp, #0x8 (8)
0xffff7ab9a130    48  str lr, [jssp, #-8]!
0xffff7ab9a134    52  ldr x16, pc+84 (addr 0x0000ffff7ab9a188)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7ab9a138    56  blr x16
0xffff7ab9a13c    60  ldr lr, [jssp], #8
0xffff7ab9a140    64  stur x5, [x1, #-1]
0xffff7ab9a144    68  tbz w5, #0, #+0x34 (addr 0xffff7ab9a178)
0xffff7ab9a148    72  sub x2, x1, #0x1 (1)
0xffff7ab9a14c    76  and x5, x5, #0xfffffffffff00000
0xffff7ab9a150    80  ldr x5, [x5, #8]
0xffff7ab9a154    84  tbz w5, #1, #+0x24 (addr 0xffff7ab9a178)
0xffff7ab9a158    88  and x5, x1, #0xfffffffffff00000
0xffff7ab9a15c    92  ldr x5, [x5, #8]
0xffff7ab9a160    96  tbz w5, #2, #+0x18 (addr 0xffff7ab9a178)
0xffff7ab9a164   100  sub csp, jssp, #0x8 (8)
0xffff7ab9a168   104  str lr, [jssp, #-8]!
0xffff7ab9a16c   108  ldr x16, pc+36 (addr 0x0000ffff7ab9a190)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab9a170   112  blr x16
0xffff7ab9a174   116  ldr lr, [jssp], #8
0xffff7ab9a178   120  ret
0xffff7ab9a17c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ab9a180   128  d63f03e0       constant
0xffff7ab9a184   132  d503201f       constant
0xffff7ab9a188   136  7ab378a0       constant
0xffff7ab9a18c   140  0000ffff       constant
0xffff7ab9a190   144  7ab38080       constant
0xffff7ab9a194   148  0000ffff       constant
0xffff7ab9a198   152  movz x16, #0x0
0xffff7ab9a19c   156  sub csp, jssp, #0x10 (16)
0xffff7ab9a1a0   160  stp fp, lr, [jssp, #-16]!
0xffff7ab9a1a4   164  bl #+0x4 (addr 0xffff7ab9a1a8)
0xffff7ab9a1a8   168  movz x17, #0xa00000000
0xffff7ab9a1ac   172  sub csp, jssp, #0x10 (16)
0xffff7ab9a1b0   176  stp x17, cp, [jssp, #-16]!
0xffff7ab9a1b4   180  add fp, jssp, #0x10 (16)
0xffff7ab9a1b8   184  ldr x17, pc+24 (addr 0x0000ffff7ab9a1d0)    ;; lazy deoptimization bailout 0
0xffff7ab9a1bc   188  add x17, x17, x16
0xffff7ab9a1c0   192  br x17
0xffff7ab9a1c4   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab9a1c8   200  d63f03e0       constant
0xffff7ab9a1cc   204  d503201f       constant
0xffff7ab9a1d0   208  7a906000       constant
0xffff7ab9a1d4   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7ab9a134  code target (STUB)  (0xffff7ab378a0)
0xffff7ab9a16c  code target (STUB)  (0xffff7ab38080)
0xffff7ab9a17c  constant pool (size 28)
0xffff7ab9a1b8  runtime entry
0xffff7ab9a1c4  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = assert
compiler = unknown
Instructions (size = 184)
0xffff7ab9a240     0  sub csp, jssp, #0x8 (8)
0xffff7ab9a244     4  str x3, [jssp, #-8]!
0xffff7ab9a248     8  sub csp, jssp, #0x8 (8)
0xffff7ab9a24c    12  str x4, [jssp, #-8]!
0xffff7ab9a250    16  ldr x3, pc+112 (addr 0x0000ffff7ab9a2c0)    ;; object: 0x20d63e59 Cell for 0
0xffff7ab9a254    20  ldur x3, [x3, #7]
0xffff7ab9a258    24  cmp x3, #0x0 (0)
0xffff7ab9a25c    28  b.ne #+0x44 (addr 0xffff7ab9a2a0)
0xffff7ab9a260    32  tbz w0, #0, #+0x40 (addr 0xffff7ab9a2a0)
0xffff7ab9a264    36  ldur x3, [x0, #-1]
0xffff7ab9a268    40  ldr x4, pc+96 (addr 0x0000ffff7ab9a2c8)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab9a26c    44  ldur x4, [x4, #7]
0xffff7ab9a270    48  cmp x3, x4
0xffff7ab9a274    52  b.ne #+0x2c (addr 0xffff7ab9a2a0)
0xffff7ab9a278    56  ldr x5, pc+88 (addr 0x0000ffff7ab9a2d0)    ;; object: 0x20de9b51 WeakCell for 0x4ec250a1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab9a27c    60  ldur x5, [x5, #7]
0xffff7ab9a280    64  tbz w5, #0, #+0x20 (addr 0xffff7ab9a2a0)
0xffff7ab9a284    68  ldursw x4, [x5, #15]
0xffff7ab9a288    72  tbnz w4, #23, #+0x18 (addr 0xffff7ab9a2a0)
0xffff7ab9a28c    76  ldr x4, [jssp], #8
0xffff7ab9a290    80  ldr x3, [jssp], #8
0xffff7ab9a294    84  ldr x2, pc+68 (addr 0x0000ffff7ab9a2d8)    ;; object: 0x20dbdc41 <String[6]: assert>
0xffff7ab9a298    88  ldr x16, pc+72 (addr 0x0000ffff7ab9a2e0)    ;; code: HANDLER, StoreTransitionStub, minor: 196612
0xffff7ab9a29c    92  br x16
0xffff7ab9a2a0    96  ldr x2, pc+72 (addr 0x0000ffff7ab9a2e8)    ;; object: 0x20dbdc41 <String[6]: assert>
0xffff7ab9a2a4   100  ldr x4, [jssp], #8
0xffff7ab9a2a8   104  ldr x3, [jssp], #8
0xffff7ab9a2ac   108  ldr x16, pc+68 (addr 0x0000ffff7ab9a2f0)    ;; code: BUILTIN
0xffff7ab9a2b0   112  br x16
0xffff7ab9a2b4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab9a2b8   120  d63f03e0       constant
0xffff7ab9a2bc   124  d503201f       constant
0xffff7ab9a2c0   128  20d63e59       constant
0xffff7ab9a2c4   132  00000000       constant
0xffff7ab9a2c8   136  20dc22b1       constant
0xffff7ab9a2cc   140  00000000       constant
0xffff7ab9a2d0   144  20de9b51       constant
0xffff7ab9a2d4   148  00000000       constant
0xffff7ab9a2d8   152  20dbdc41       constant
0xffff7ab9a2dc   156  00000000       constant
0xffff7ab9a2e0   160  7ab9a100       constant
0xffff7ab9a2e4   164  0000ffff       constant
0xffff7ab9a2e8   168  20dbdc41       constant
0xffff7ab9a2ec   172  00000000       constant
0xffff7ab9a2f0   176  7ab22420       constant
0xffff7ab9a2f4   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7ab9a250  embedded object  (0x20d63e59 Cell for 0)
0xffff7ab9a268  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab9a278  embedded object  (0x20de9b51 WeakCell for 0x4ec250a1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab9a294  embedded object  (0x20dbdc41 <String[6]: assert>)
0xffff7ab9a298  code target (HANDLER)  (0xffff7ab9a100)
0xffff7ab9a2a0  embedded object  (0x20dbdc41 <String[6]: assert>)
0xffff7ab9a2ac  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab9a2b4  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = exec
compiler = unknown
Instructions (size = 120)
0xffff7ab9c7a0     0  sub csp, jssp, #0x8 (8)
0xffff7ab9c7a4     4  str x3, [jssp, #-8]!
0xffff7ab9c7a8     8  sub csp, jssp, #0x8 (8)
0xffff7ab9c7ac    12  str x0, [jssp, #-8]!
0xffff7ab9c7b0    16  ldr x0, pc+72 (addr 0x0000ffff7ab9c7f8)    ;; object: 0x20ded491 Cell for 0
0xffff7ab9c7b4    20  ldur x0, [x0, #7]
0xffff7ab9c7b8    24  cmp x0, #0x0 (0)
0xffff7ab9c7bc    28  b.ne #+0x14 (addr 0xffff7ab9c7d0)
0xffff7ab9c7c0    32  ldr x3, pc+64 (addr 0x0000ffff7ab9c800)    ;; object: 0x20ded4a1 WeakCell for 0x56e5ea99 <an Object with map 0x4ec164d1>
0xffff7ab9c7c4    36  ldur x3, [x3, #7]
0xffff7ab9c7c8    40  tbz w3, #0, #+0x8 (addr 0xffff7ab9c7d0)
0xffff7ab9c7cc    44  b #+0x14 (addr 0xffff7ab9c7e0)
0xffff7ab9c7d0    48  ldr x0, [jssp], #8
0xffff7ab9c7d4    52  ldr x3, [jssp], #8
0xffff7ab9c7d8    56  ldr x16, pc+48 (addr 0x0000ffff7ab9c808)    ;; code: BUILTIN
0xffff7ab9c7dc    60  br x16
0xffff7ab9c7e0    64  add jssp, jssp, #0x10 (16)
0xffff7ab9c7e4    68  mov x1, x3
0xffff7ab9c7e8    72  ldr x16, pc+40 (addr 0x0000ffff7ab9c810)    ;; code: HANDLER, LoadFieldStub, minor: 2
0xffff7ab9c7ec    76  br x16
0xffff7ab9c7f0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7ab9c7f4    84  d63f03e0       constant
0xffff7ab9c7f8    88  20ded491       constant
0xffff7ab9c7fc    92  00000000       constant
0xffff7ab9c800    96  20ded4a1       constant
0xffff7ab9c804   100  00000000       constant
0xffff7ab9c808   104  7ab222e0       constant
0xffff7ab9c80c   108  0000ffff       constant
0xffff7ab9c810   112  7ab6c260       constant
0xffff7ab9c814   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7ab9c7b0  embedded object  (0x20ded491 Cell for 0)
0xffff7ab9c7c0  embedded object  (0x20ded4a1 WeakCell for 0x56e5ea99 <an Object with map 0x4ec164d1>)
0xffff7ab9c7d8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ab9c7e8  code target (HANDLER)  (0xffff7ab6c260)
0xffff7ab9c7f0  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0xffff7ab9cd40     0  mov x2, x0
0xffff7ab9cd44     4  stur x2, [x1, #47]
0xffff7ab9cd48     8  tbz w2, #0, #+0x34 (addr 0xffff7ab9cd7c)
0xffff7ab9cd4c    12  add x3, x1, #0x2f (47)
0xffff7ab9cd50    16  and x2, x2, #0xfffffffffff00000
0xffff7ab9cd54    20  ldr x2, [x2, #8]
0xffff7ab9cd58    24  tbz w2, #1, #+0x24 (addr 0xffff7ab9cd7c)
0xffff7ab9cd5c    28  and x2, x1, #0xfffffffffff00000
0xffff7ab9cd60    32  ldr x2, [x2, #8]
0xffff7ab9cd64    36  tbz w2, #2, #+0x18 (addr 0xffff7ab9cd7c)
0xffff7ab9cd68    40  sub csp, jssp, #0x8 (8)
0xffff7ab9cd6c    44  str lr, [jssp, #-8]!
0xffff7ab9cd70    48  ldr x16, pc+24 (addr 0x0000ffff7ab9cd88)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab9cd74    52  blr x16
0xffff7ab9cd78    56  ldr lr, [jssp], #8
0xffff7ab9cd7c    60  ret
0xffff7ab9cd80    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab9cd84    68  d63f03e0       constant
0xffff7ab9cd88    72  7ab170c0       constant
0xffff7ab9cd8c    76  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 7)
0xffff7ab9cd70  code target (STUB)  (0xffff7ab170c0)
0xffff7ab9cd80  constant pool (size 16)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0xffff7ab9cd40     0  mov x2, x0
0xffff7ab9cd44     4  stur x2, [x1, #47]
0xffff7ab9cd48     8  tbz w2, #0, #+0x34 (addr 0xffff7ab9cd7c)
0xffff7ab9cd4c    12  add x3, x1, #0x2f (47)
0xffff7ab9cd50    16  and x2, x2, #0xfffffffffff00000
0xffff7ab9cd54    20  ldr x2, [x2, #8]
0xffff7ab9cd58    24  tbz w2, #1, #+0x24 (addr 0xffff7ab9cd7c)
0xffff7ab9cd5c    28  and x2, x1, #0xfffffffffff00000
0xffff7ab9cd60    32  ldr x2, [x2, #8]
0xffff7ab9cd64    36  tbz w2, #2, #+0x18 (addr 0xffff7ab9cd7c)
0xffff7ab9cd68    40  sub csp, jssp, #0x8 (8)
0xffff7ab9cd6c    44  str lr, [jssp, #-8]!
0xffff7ab9cd70    48  ldr x16, pc+24 (addr 0x0000ffff7ab9cd88)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7ab9cd74    52  blr x16
0xffff7ab9cd78    56  ldr lr, [jssp], #8
0xffff7ab9cd7c    60  ret
0xffff7ab9cd80    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7ab9cd84    68  d63f03e0       constant
0xffff7ab9cd88    72  7ab170c0       constant
0xffff7ab9cd8c    76  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 7)
0xffff7ab9cd70  code target (STUB)  (0xffff7ab170c0)
0xffff7ab9cd80  constant pool (size 16)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0xffff7ab9d3c0     0  ldur x6, [x1, #7]
0xffff7ab9d3c4     4  ldur w7, [x6, #11]
0xffff7ab9d3c8     8  adds w8, w7, #0x3 (3)
0xffff7ab9d3cc    12  b.vs #+0x1dc (addr 0xffff7ab9d5a8)
0xffff7ab9d3d0    16  movz w16, #0x95ff
0xffff7ab9d3d4    20  cmp w8, w16, lsl #1
0xffff7ab9d3d8    24  b.hs #+0x1e0 (addr 0xffff7ab9d5b8)
0xffff7ab9d3dc    28  lsl x9, x8, #32
0xffff7ab9d3e0    32  lsl w10, w8, #3
0xffff7ab9d3e4    36  add w10, w10, #0x10 (16)
0xffff7ab9d3e8    40  sxtw x10, w10
0xffff7ab9d3ec    44  movz x11, #0xe2c0
0xffff7ab9d3f0    48  movk x11, #0x9ab, lsl #16
0xffff7ab9d3f4    52  ldp x13, x16, [x11]
0xffff7ab9d3f8    56  adds x12, x13, x10
0xffff7ab9d3fc    60  ccmp x12, x16, #nzCv, lo
0xffff7ab9d400    64  b.hi #+0xf8 (addr 0xffff7ab9d4f8)
0xffff7ab9d404    68  str x12, [x11]
0xffff7ab9d408    72  orr x13, x13, #0x1
0xffff7ab9d40c    76  ldr x10, pc+348 (addr 0x0000ffff7ab9d568)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab9d410    80  stur x10, [x13, #-1]
0xffff7ab9d414    84  stur x9, [x13, #7]
0xffff7ab9d418    88  cmp w7, w8
0xffff7ab9d41c    92  b.ge #+0x18 (addr 0xffff7ab9d434)
0xffff7ab9d420    96  sub w8, w8, #0x1 (1)
0xffff7ab9d424   100  ldr x9, pc+332 (addr 0x0000ffff7ab9d570)    ;; object: 0x20d04241 <undefined>
0xffff7ab9d428   104  add x10, x13, #0xf (15)
0xffff7ab9d42c   108  str x9, [x10, w8, sxtw #3]
0xffff7ab9d430   112  b #-0x18 (addr 0xffff7ab9d418)
0xffff7ab9d434   116  cmp w7, #0x0 (0)
0xffff7ab9d438   120  b.le #+0x1c (addr 0xffff7ab9d454)
0xffff7ab9d43c   124  sub w7, w7, #0x1 (1)
0xffff7ab9d440   128  add x8, x6, #0xf (15)
0xffff7ab9d444   132  ldr x9, [x8, w7, sxtw #3]
0xffff7ab9d448   136  add x8, x13, #0xf (15)
0xffff7ab9d44c   140  str x9, [x8, w7, sxtw #3]
0xffff7ab9d450   144  b #-0x1c (addr 0xffff7ab9d434)
0xffff7ab9d454   148  stur x13, [x1, #7]
0xffff7ab9d458   152  add x6, x1, #0x7 (7)
0xffff7ab9d45c   156  and x13, x1, #0xfffffffffff00000
0xffff7ab9d460   160  ldr x13, [x13, #8]
0xffff7ab9d464   164  tbz w13, #2, #+0x18 (addr 0xffff7ab9d47c)
0xffff7ab9d468   168  sub csp, jssp, #0x8 (8)
0xffff7ab9d46c   172  str lr, [jssp, #-8]!
0xffff7ab9d470   176  ldr x16, pc+264 (addr 0x0000ffff7ab9d578)    ;; code: STUB, RecordWriteStub, minor: 72097
0xffff7ab9d474   180  blr x16
0xffff7ab9d478   184  ldr lr, [jssp], #8
0xffff7ab9d47c   188  tbz w0, #0, #+0x14c (addr 0xffff7ab9d5c8)
0xffff7ab9d480   192  mov x2, x0
0xffff7ab9d484   196  ldur x4, [x1, #7]
0xffff7ab9d488   200  stur x2, [x4, #39]
0xffff7ab9d48c   204  add x3, x4, #0x27 (39)
0xffff7ab9d490   208  and x2, x2, #0xfffffffffff00000
0xffff7ab9d494   212  ldr x2, [x2, #8]
0xffff7ab9d498   216  tbz w2, #1, #+0x24 (addr 0xffff7ab9d4bc)
0xffff7ab9d49c   220  and x2, x4, #0xfffffffffff00000
0xffff7ab9d4a0   224  ldr x2, [x2, #8]
0xffff7ab9d4a4   228  tbz w2, #2, #+0x18 (addr 0xffff7ab9d4bc)
0xffff7ab9d4a8   232  sub csp, jssp, #0x8 (8)
0xffff7ab9d4ac   236  str lr, [jssp, #-8]!
0xffff7ab9d4b0   240  ldr x16, pc+208 (addr 0x0000ffff7ab9d580)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7ab9d4b4   244  blr x16
0xffff7ab9d4b8   248  ldr lr, [jssp], #8
0xffff7ab9d4bc   252  stur x5, [x1, #-1]
0xffff7ab9d4c0   256  tbz w5, #0, #+0x34 (addr 0xffff7ab9d4f4)
0xffff7ab9d4c4   260  sub x2, x1, #0x1 (1)
0xffff7ab9d4c8   264  and x5, x5, #0xfffffffffff00000
0xffff7ab9d4cc   268  ldr x5, [x5, #8]
0xffff7ab9d4d0   272  tbz w5, #1, #+0x24 (addr 0xffff7ab9d4f4)
0xffff7ab9d4d4   276  and x5, x1, #0xfffffffffff00000
0xffff7ab9d4d8   280  ldr x5, [x5, #8]
0xffff7ab9d4dc   284  tbz w5, #2, #+0x18 (addr 0xffff7ab9d4f4)
0xffff7ab9d4e0   288  sub csp, jssp, #0x8 (8)
0xffff7ab9d4e4   292  str lr, [jssp, #-8]!
0xffff7ab9d4e8   296  ldr x16, pc+160 (addr 0x0000ffff7ab9d588)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab9d4ec   300  blr x16
0xffff7ab9d4f0   304  ldr lr, [jssp], #8
0xffff7ab9d4f4   308  ret
0xffff7ab9d4f8   312  sub csp, jssp, #0x10 (16)
0xffff7ab9d4fc   316  stp fp, lr, [jssp, #-16]!
0xffff7ab9d500   320  movz fp, #0xa00000000
0xffff7ab9d504   324  sub csp, jssp, #0x8 (8)
0xffff7ab9d508   328  str fp, [jssp, #-8]!
0xffff7ab9d50c   332  add fp, jssp, #0x8 (8)
0xffff7ab9d510   336  movz x13, #0x0
0xffff7ab9d514   340  mov x16, lr
0xffff7ab9d518   344  ldr x17, pc+120 (addr 0x0000ffff7ab9d590)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab9d51c   348  blr x17
0xffff7ab9d520   352  lsl x0, x10, #32
0xffff7ab9d524   356  movz x10, #0x0
0xffff7ab9d528   360  sub csp, jssp, #0x10 (16)
0xffff7ab9d52c   364  stp x10, x0, [jssp, #-16]!
0xffff7ab9d530   368  movz x0, #0x2
0xffff7ab9d534   372  movz x1, #0x5b88
0xffff7ab9d538   376  movk x1, #0xe2, lsl #16
0xffff7ab9d53c   380  ldr x16, pc+92 (addr 0x0000ffff7ab9d598)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab9d540   384  blr x16
0xffff7ab9d544   388  str x0, [jssp, #104]
0xffff7ab9d548   392  ldr x16, pc+88 (addr 0x0000ffff7ab9d5a0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab9d54c   396  blr x16
0xffff7ab9d550   400  ldr lr, [jssp, #16]
0xffff7ab9d554   404  ldp xzr, fp, [jssp], #24
0xffff7ab9d558   408  b #-0x14c (addr 0xffff7ab9d40c)
0xffff7ab9d55c   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0xffff7ab9d560   416  d63f03e0       constant
0xffff7ab9d564   420  d503201f       constant
0xffff7ab9d568   424  4ec04259       constant
0xffff7ab9d56c   428  00000000       constant
0xffff7ab9d570   432  20d04241       constant
0xffff7ab9d574   436  00000000       constant
0xffff7ab9d578   440  7ab370c0       constant
0xffff7ab9d57c   444  0000ffff       constant
0xffff7ab9d580   448  7ab378a0       constant
0xffff7ab9d584   452  0000ffff       constant
0xffff7ab9d588   456  7ab38080       constant
0xffff7ab9d58c   460  0000ffff       constant
0xffff7ab9d590   464  7ab06820       constant
0xffff7ab9d594   468  0000ffff       constant
0xffff7ab9d598   472  7ab06260       constant
0xffff7ab9d59c   476  0000ffff       constant
0xffff7ab9d5a0   480  7ab068e0       constant
0xffff7ab9d5a4   484  0000ffff       constant
0xffff7ab9d5a8   488  movz x16, #0x0
0xffff7ab9d5ac   492  sub csp, jssp, #0x10 (16)
0xffff7ab9d5b0   496  stp fp, lr, [jssp, #-16]!
0xffff7ab9d5b4   500  bl #+0x24 (addr 0xffff7ab9d5d8)
0xffff7ab9d5b8   504  movz x16, #0x8
0xffff7ab9d5bc   508  sub csp, jssp, #0x10 (16)
0xffff7ab9d5c0   512  stp fp, lr, [jssp, #-16]!
0xffff7ab9d5c4   516  bl #+0x14 (addr 0xffff7ab9d5d8)
0xffff7ab9d5c8   520  movz x16, #0x10
0xffff7ab9d5cc   524  sub csp, jssp, #0x10 (16)
0xffff7ab9d5d0   528  stp fp, lr, [jssp, #-16]!
0xffff7ab9d5d4   532  bl #+0x4 (addr 0xffff7ab9d5d8)
0xffff7ab9d5d8   536  movz x17, #0xa00000000
0xffff7ab9d5dc   540  sub csp, jssp, #0x10 (16)
0xffff7ab9d5e0   544  stp x17, cp, [jssp, #-16]!
0xffff7ab9d5e4   548  add fp, jssp, #0x10 (16)
0xffff7ab9d5e8   552  ldr x17, pc+24 (addr 0x0000ffff7ab9d600)    ;; lazy deoptimization bailout 0
0xffff7ab9d5ec   556  add x17, x17, x16
0xffff7ab9d5f0   560  br x17
0xffff7ab9d5f4   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab9d5f8   568  d63f03e0       constant
0xffff7ab9d5fc   572  d503201f       constant
0xffff7ab9d600   576  7a906000       constant
0xffff7ab9d604   580  0000ffff       constant


Safepoints (size = 21)
0xffff7ab9d544   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0xffff7ab9d40c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab9d424  embedded object  (0x20d04241 <undefined>)
0xffff7ab9d470  code target (STUB)  (0xffff7ab370c0)
0xffff7ab9d4b0  code target (STUB)  (0xffff7ab378a0)
0xffff7ab9d4e8  code target (STUB)  (0xffff7ab38080)
0xffff7ab9d518  code target (STUB)  (0xffff7ab06820)
0xffff7ab9d53c  code target (STUB)  (0xffff7ab06260)
0xffff7ab9d548  code target (STUB)  (0xffff7ab068e0)
0xffff7ab9d55c  constant pool (size 76)
0xffff7ab9d5e8  runtime entry
0xffff7ab9d5f4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0xffff7ab9d3c0     0  ldur x6, [x1, #7]
0xffff7ab9d3c4     4  ldur w7, [x6, #11]
0xffff7ab9d3c8     8  adds w8, w7, #0x3 (3)
0xffff7ab9d3cc    12  b.vs #+0x1dc (addr 0xffff7ab9d5a8)
0xffff7ab9d3d0    16  movz w16, #0x95ff
0xffff7ab9d3d4    20  cmp w8, w16, lsl #1
0xffff7ab9d3d8    24  b.hs #+0x1e0 (addr 0xffff7ab9d5b8)
0xffff7ab9d3dc    28  lsl x9, x8, #32
0xffff7ab9d3e0    32  lsl w10, w8, #3
0xffff7ab9d3e4    36  add w10, w10, #0x10 (16)
0xffff7ab9d3e8    40  sxtw x10, w10
0xffff7ab9d3ec    44  movz x11, #0xe2c0
0xffff7ab9d3f0    48  movk x11, #0x9ab, lsl #16
0xffff7ab9d3f4    52  ldp x13, x16, [x11]
0xffff7ab9d3f8    56  adds x12, x13, x10
0xffff7ab9d3fc    60  ccmp x12, x16, #nzCv, lo
0xffff7ab9d400    64  b.hi #+0xf8 (addr 0xffff7ab9d4f8)
0xffff7ab9d404    68  str x12, [x11]
0xffff7ab9d408    72  orr x13, x13, #0x1
0xffff7ab9d40c    76  ldr x10, pc+348 (addr 0x0000ffff7ab9d568)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7ab9d410    80  stur x10, [x13, #-1]
0xffff7ab9d414    84  stur x9, [x13, #7]
0xffff7ab9d418    88  cmp w7, w8
0xffff7ab9d41c    92  b.ge #+0x18 (addr 0xffff7ab9d434)
0xffff7ab9d420    96  sub w8, w8, #0x1 (1)
0xffff7ab9d424   100  ldr x9, pc+332 (addr 0x0000ffff7ab9d570)    ;; object: 0x20d04241 <undefined>
0xffff7ab9d428   104  add x10, x13, #0xf (15)
0xffff7ab9d42c   108  str x9, [x10, w8, sxtw #3]
0xffff7ab9d430   112  b #-0x18 (addr 0xffff7ab9d418)
0xffff7ab9d434   116  cmp w7, #0x0 (0)
0xffff7ab9d438   120  b.le #+0x1c (addr 0xffff7ab9d454)
0xffff7ab9d43c   124  sub w7, w7, #0x1 (1)
0xffff7ab9d440   128  add x8, x6, #0xf (15)
0xffff7ab9d444   132  ldr x9, [x8, w7, sxtw #3]
0xffff7ab9d448   136  add x8, x13, #0xf (15)
0xffff7ab9d44c   140  str x9, [x8, w7, sxtw #3]
0xffff7ab9d450   144  b #-0x1c (addr 0xffff7ab9d434)
0xffff7ab9d454   148  stur x13, [x1, #7]
0xffff7ab9d458   152  add x6, x1, #0x7 (7)
0xffff7ab9d45c   156  and x13, x1, #0xfffffffffff00000
0xffff7ab9d460   160  ldr x13, [x13, #8]
0xffff7ab9d464   164  tbz w13, #2, #+0x18 (addr 0xffff7ab9d47c)
0xffff7ab9d468   168  sub csp, jssp, #0x8 (8)
0xffff7ab9d46c   172  str lr, [jssp, #-8]!
0xffff7ab9d470   176  ldr x16, pc+264 (addr 0x0000ffff7ab9d578)    ;; code: STUB, RecordWriteStub, minor: 72097
0xffff7ab9d474   180  blr x16
0xffff7ab9d478   184  ldr lr, [jssp], #8
0xffff7ab9d47c   188  tbz w0, #0, #+0x14c (addr 0xffff7ab9d5c8)
0xffff7ab9d480   192  mov x2, x0
0xffff7ab9d484   196  ldur x4, [x1, #7]
0xffff7ab9d488   200  stur x2, [x4, #39]
0xffff7ab9d48c   204  add x3, x4, #0x27 (39)
0xffff7ab9d490   208  and x2, x2, #0xfffffffffff00000
0xffff7ab9d494   212  ldr x2, [x2, #8]
0xffff7ab9d498   216  tbz w2, #1, #+0x24 (addr 0xffff7ab9d4bc)
0xffff7ab9d49c   220  and x2, x4, #0xfffffffffff00000
0xffff7ab9d4a0   224  ldr x2, [x2, #8]
0xffff7ab9d4a4   228  tbz w2, #2, #+0x18 (addr 0xffff7ab9d4bc)
0xffff7ab9d4a8   232  sub csp, jssp, #0x8 (8)
0xffff7ab9d4ac   236  str lr, [jssp, #-8]!
0xffff7ab9d4b0   240  ldr x16, pc+208 (addr 0x0000ffff7ab9d580)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7ab9d4b4   244  blr x16
0xffff7ab9d4b8   248  ldr lr, [jssp], #8
0xffff7ab9d4bc   252  stur x5, [x1, #-1]
0xffff7ab9d4c0   256  tbz w5, #0, #+0x34 (addr 0xffff7ab9d4f4)
0xffff7ab9d4c4   260  sub x2, x1, #0x1 (1)
0xffff7ab9d4c8   264  and x5, x5, #0xfffffffffff00000
0xffff7ab9d4cc   268  ldr x5, [x5, #8]
0xffff7ab9d4d0   272  tbz w5, #1, #+0x24 (addr 0xffff7ab9d4f4)
0xffff7ab9d4d4   276  and x5, x1, #0xfffffffffff00000
0xffff7ab9d4d8   280  ldr x5, [x5, #8]
0xffff7ab9d4dc   284  tbz w5, #2, #+0x18 (addr 0xffff7ab9d4f4)
0xffff7ab9d4e0   288  sub csp, jssp, #0x8 (8)
0xffff7ab9d4e4   292  str lr, [jssp, #-8]!
0xffff7ab9d4e8   296  ldr x16, pc+160 (addr 0x0000ffff7ab9d588)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7ab9d4ec   300  blr x16
0xffff7ab9d4f0   304  ldr lr, [jssp], #8
0xffff7ab9d4f4   308  ret
0xffff7ab9d4f8   312  sub csp, jssp, #0x10 (16)
0xffff7ab9d4fc   316  stp fp, lr, [jssp, #-16]!
0xffff7ab9d500   320  movz fp, #0xa00000000
0xffff7ab9d504   324  sub csp, jssp, #0x8 (8)
0xffff7ab9d508   328  str fp, [jssp, #-8]!
0xffff7ab9d50c   332  add fp, jssp, #0x8 (8)
0xffff7ab9d510   336  movz x13, #0x0
0xffff7ab9d514   340  mov x16, lr
0xffff7ab9d518   344  ldr x17, pc+120 (addr 0x0000ffff7ab9d590)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ab9d51c   348  blr x17
0xffff7ab9d520   352  lsl x0, x10, #32
0xffff7ab9d524   356  movz x10, #0x0
0xffff7ab9d528   360  sub csp, jssp, #0x10 (16)
0xffff7ab9d52c   364  stp x10, x0, [jssp, #-16]!
0xffff7ab9d530   368  movz x0, #0x2
0xffff7ab9d534   372  movz x1, #0x5b88
0xffff7ab9d538   376  movk x1, #0xe2, lsl #16
0xffff7ab9d53c   380  ldr x16, pc+92 (addr 0x0000ffff7ab9d598)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ab9d540   384  blr x16
0xffff7ab9d544   388  str x0, [jssp, #104]
0xffff7ab9d548   392  ldr x16, pc+88 (addr 0x0000ffff7ab9d5a0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ab9d54c   396  blr x16
0xffff7ab9d550   400  ldr lr, [jssp, #16]
0xffff7ab9d554   404  ldp xzr, fp, [jssp], #24
0xffff7ab9d558   408  b #-0x14c (addr 0xffff7ab9d40c)
0xffff7ab9d55c   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0xffff7ab9d560   416  d63f03e0       constant
0xffff7ab9d564   420  d503201f       constant
0xffff7ab9d568   424  4ec04259       constant
0xffff7ab9d56c   428  00000000       constant
0xffff7ab9d570   432  20d04241       constant
0xffff7ab9d574   436  00000000       constant
0xffff7ab9d578   440  7ab370c0       constant
0xffff7ab9d57c   444  0000ffff       constant
0xffff7ab9d580   448  7ab378a0       constant
0xffff7ab9d584   452  0000ffff       constant
0xffff7ab9d588   456  7ab38080       constant
0xffff7ab9d58c   460  0000ffff       constant
0xffff7ab9d590   464  7ab06820       constant
0xffff7ab9d594   468  0000ffff       constant
0xffff7ab9d598   472  7ab06260       constant
0xffff7ab9d59c   476  0000ffff       constant
0xffff7ab9d5a0   480  7ab068e0       constant
0xffff7ab9d5a4   484  0000ffff       constant
0xffff7ab9d5a8   488  movz x16, #0x0
0xffff7ab9d5ac   492  sub csp, jssp, #0x10 (16)
0xffff7ab9d5b0   496  stp fp, lr, [jssp, #-16]!
0xffff7ab9d5b4   500  bl #+0x24 (addr 0xffff7ab9d5d8)
0xffff7ab9d5b8   504  movz x16, #0x8
0xffff7ab9d5bc   508  sub csp, jssp, #0x10 (16)
0xffff7ab9d5c0   512  stp fp, lr, [jssp, #-16]!
0xffff7ab9d5c4   516  bl #+0x14 (addr 0xffff7ab9d5d8)
0xffff7ab9d5c8   520  movz x16, #0x10
0xffff7ab9d5cc   524  sub csp, jssp, #0x10 (16)
0xffff7ab9d5d0   528  stp fp, lr, [jssp, #-16]!
0xffff7ab9d5d4   532  bl #+0x4 (addr 0xffff7ab9d5d8)
0xffff7ab9d5d8   536  movz x17, #0xa00000000
0xffff7ab9d5dc   540  sub csp, jssp, #0x10 (16)
0xffff7ab9d5e0   544  stp x17, cp, [jssp, #-16]!
0xffff7ab9d5e4   548  add fp, jssp, #0x10 (16)
0xffff7ab9d5e8   552  ldr x17, pc+24 (addr 0x0000ffff7ab9d600)    ;; lazy deoptimization bailout 0
0xffff7ab9d5ec   556  add x17, x17, x16
0xffff7ab9d5f0   560  br x17
0xffff7ab9d5f4   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ab9d5f8   568  d63f03e0       constant
0xffff7ab9d5fc   572  d503201f       constant
0xffff7ab9d600   576  7a906000       constant
0xffff7ab9d604   580  0000ffff       constant


Safepoints (size = 21)
0xffff7ab9d544   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0xffff7ab9d40c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7ab9d424  embedded object  (0x20d04241 <undefined>)
0xffff7ab9d470  code target (STUB)  (0xffff7ab370c0)
0xffff7ab9d4b0  code target (STUB)  (0xffff7ab378a0)
0xffff7ab9d4e8  code target (STUB)  (0xffff7ab38080)
0xffff7ab9d518  code target (STUB)  (0xffff7ab06820)
0xffff7ab9d53c  code target (STUB)  (0xffff7ab06260)
0xffff7ab9d548  code target (STUB)  (0xffff7ab068e0)
0xffff7ab9d55c  constant pool (size 76)
0xffff7ab9d5e8  runtime entry
0xffff7ab9d5f4  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = internal/process
compiler = unknown
Instructions (size = 184)
0xffff7ab9d680     0  sub csp, jssp, #0x8 (8)
0xffff7ab9d684     4  str x3, [jssp, #-8]!
0xffff7ab9d688     8  sub csp, jssp, #0x8 (8)
0xffff7ab9d68c    12  str x4, [jssp, #-8]!
0xffff7ab9d690    16  ldr x3, pc+112 (addr 0x0000ffff7ab9d700)    ;; object: 0x20d63e59 Cell for 0
0xffff7ab9d694    20  ldur x3, [x3, #7]
0xffff7ab9d698    24  cmp x3, #0x0 (0)
0xffff7ab9d69c    28  b.ne #+0x44 (addr 0xffff7ab9d6e0)
0xffff7ab9d6a0    32  tbz w0, #0, #+0x40 (addr 0xffff7ab9d6e0)
0xffff7ab9d6a4    36  ldur x3, [x0, #-1]
0xffff7ab9d6a8    40  ldr x4, pc+96 (addr 0x0000ffff7ab9d708)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab9d6ac    44  ldur x4, [x4, #7]
0xffff7ab9d6b0    48  cmp x3, x4
0xffff7ab9d6b4    52  b.ne #+0x2c (addr 0xffff7ab9d6e0)
0xffff7ab9d6b8    56  ldr x5, pc+88 (addr 0x0000ffff7ab9d710)    ;; object: 0x20dee969 WeakCell for 0x4ec25f11 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ab9d6bc    60  ldur x5, [x5, #7]
0xffff7ab9d6c0    64  tbz w5, #0, #+0x20 (addr 0xffff7ab9d6e0)
0xffff7ab9d6c4    68  ldursw x4, [x5, #15]
0xffff7ab9d6c8    72  tbnz w4, #23, #+0x18 (addr 0xffff7ab9d6e0)
0xffff7ab9d6cc    76  ldr x4, [jssp], #8
0xffff7ab9d6d0    80  ldr x3, [jssp], #8
0xffff7ab9d6d4    84  ldr x2, pc+68 (addr 0x0000ffff7ab9d718)    ;; object: 0x20db9649 <String[16]: internal/process>
0xffff7ab9d6d8    88  ldr x16, pc+72 (addr 0x0000ffff7ab9d720)    ;; code: HANDLER, StoreTransitionStub, minor: 327685
0xffff7ab9d6dc    92  br x16
0xffff7ab9d6e0    96  ldr x2, pc+72 (addr 0x0000ffff7ab9d728)    ;; object: 0x20db9649 <String[16]: internal/process>
0xffff7ab9d6e4   100  ldr x4, [jssp], #8
0xffff7ab9d6e8   104  ldr x3, [jssp], #8
0xffff7ab9d6ec   108  ldr x16, pc+68 (addr 0x0000ffff7ab9d730)    ;; code: BUILTIN
0xffff7ab9d6f0   112  br x16
0xffff7ab9d6f4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7ab9d6f8   120  d63f03e0       constant
0xffff7ab9d6fc   124  d503201f       constant
0xffff7ab9d700   128  20d63e59       constant
0xffff7ab9d704   132  00000000       constant
0xffff7ab9d708   136  20dc22b1       constant
0xffff7ab9d70c   140  00000000       constant
0xffff7ab9d710   144  20dee969       constant
0xffff7ab9d714   148  00000000       constant
0xffff7ab9d718   152  20db9649       constant
0xffff7ab9d71c   156  00000000       constant
0xffff7ab9d720   160  7ab9d3c0       constant
0xffff7ab9d724   164  0000ffff       constant
0xffff7ab9d728   168  20db9649       constant
0xffff7ab9d72c   172  00000000       constant
0xffff7ab9d730   176  7ab22420       constant
0xffff7ab9d734   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7ab9d690  embedded object  (0x20d63e59 Cell for 0)
0xffff7ab9d6a8  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab9d6b8  embedded object  (0x20dee969 WeakCell for 0x4ec25f11 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ab9d6d4  embedded object  (0x20db9649 <String[16]: internal/process>)
0xffff7ab9d6d8  code target (HANDLER)  (0xffff7ab9d3c0)
0xffff7ab9d6e0  embedded object  (0x20db9649 <String[16]: internal/process>)
0xffff7ab9d6ec  code target (BUILTIN)  (0xffff7ab22420)
0xffff7ab9d6f4  constant pool (size 68)

kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*GENERIC -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 624)
0xffff7ab9faa0     0  orr x16, x1, x0
0xffff7ab9faa4     4  tbnz w16, #0, #+0x10 (addr 0xffff7ab9fab4)
0xffff7ab9faa8     8  asr x1, x1, #32
0xffff7ab9faac    12  sub x0, x1, x0, asr #32
0xffff7ab9fab0    16  ret
0xffff7ab9fab4    20  cmp x0, x1
0xffff7ab9fab8    24  b.ne #+0x30 (addr 0xffff7ab9fae8)
0xffff7ab9fabc    28  ldur x16, [x0, #-1]
0xffff7ab9fac0    32  ldr x17, [x26, #120]
0xffff7ab9fac4    36  cmp x16, x17
0xffff7ab9fac8    40  b.eq #+0xc (addr 0xffff7ab9fad4)
0xffff7ab9facc    44  movz x0, #0x0
0xffff7ab9fad0    48  ret
0xffff7ab9fad4    52  ldur d0, [x0, #7]
0xffff7ab9fad8    56  fcmp d0, d0
0xffff7ab9fadc    60  b.vc #-0x10 (addr 0xffff7ab9facc)
0xffff7ab9fae0    64  movn x0, #0x0
0xffff7ab9fae4    68  ret
0xffff7ab9fae8    72  and x16, x1, x0
0xffff7ab9faec    76  tbnz w16, #0, #+0x64 (addr 0xffff7ab9fb50)
0xffff7ab9faf0    80  tbz w0, #0, #+0x24 (addr 0xffff7ab9fb14)
0xffff7ab9faf4    84  ldur x16, [x0, #-1]
0xffff7ab9faf8    88  ldr x17, [x26, #120]
0xffff7ab9fafc    92  cmp x16, x17
0xffff7ab9fb00    96  b.eq #+0x8 (addr 0xffff7ab9fb08)
0xffff7ab9fb04   100  ret
0xffff7ab9fb08   104  ldur d0, [x0, #7]
0xffff7ab9fb0c   108  scvtf d1, x1, #32
0xffff7ab9fb10   112  b #+0x24 (addr 0xffff7ab9fb34)
0xffff7ab9fb14   116  ldur x16, [x1, #-1]
0xffff7ab9fb18   120  ldr x17, [x26, #120]
0xffff7ab9fb1c   124  cmp x16, x17
0xffff7ab9fb20   128  b.eq #+0xc (addr 0xffff7ab9fb2c)
0xffff7ab9fb24   132  movz x0, #0x1
0xffff7ab9fb28   136  ret
0xffff7ab9fb2c   140  ldur d1, [x1, #7]
0xffff7ab9fb30   144  scvtf d0, x0, #32
0xffff7ab9fb34   148  fcmp d1, d0
0xffff7ab9fb38   152  b.vs #+0x10 (addr 0xffff7ab9fb48)
0xffff7ab9fb3c   156  cset x0, gt
0xffff7ab9fb40   160  csinv x0, x0, xzr, ge
0xffff7ab9fb44   164  ret
0xffff7ab9fb48   168  movn x0, #0x0
0xffff7ab9fb4c   172  ret
0xffff7ab9fb50   176  ldur x10, [x0, #-1]
0xffff7ab9fb54   180  ldur x12, [x1, #-1]
0xffff7ab9fb58   184  ldrb w11, [x10, #11]
0xffff7ab9fb5c   188  ldrb w13, [x12, #11]
0xffff7ab9fb60   192  cmp x11, #0xb1 (177)
0xffff7ab9fb64   196  b.lt #+0x8 (addr 0xffff7ab9fb6c)
0xffff7ab9fb68   200  ret
0xffff7ab9fb6c   204  cmp x11, #0x83 (131)
0xffff7ab9fb70   208  movz x16, #0x83
0xffff7ab9fb74   212  ccmp x13, x16, #nZcv, ne
0xffff7ab9fb78   216  movz x16, #0xb1
0xffff7ab9fb7c   220  ccmp x13, x16, #NzcV, ne
0xffff7ab9fb80   224  b.ge #-0x18 (addr 0xffff7ab9fb68)
0xffff7ab9fb84   228  orr x14, x13, x11
0xffff7ab9fb88   232  tst x14, #0xc0
0xffff7ab9fb8c   236  b.eq #-0x24 (addr 0xffff7ab9fb68)
0xffff7ab9fb90   240  cmp x11, #0x81 (129)
0xffff7ab9fb94   244  b.ne #+0x18 (addr 0xffff7ab9fbac)
0xffff7ab9fb98   248  cmp x12, x10
0xffff7ab9fb9c   252  b.ne #+0x10 (addr 0xffff7ab9fbac)
0xffff7ab9fba0   256  ldur d1, [x1, #7]
0xffff7ab9fba4   260  ldur d0, [x0, #7]
0xffff7ab9fba8   264  b #-0x74 (addr 0xffff7ab9fb34)
0xffff7ab9fbac   268  movz x16, #0x87
0xffff7ab9fbb0   272  and x14, x13, x16
0xffff7ab9fbb4   276  movz x16, #0x87
0xffff7ab9fbb8   280  and x15, x11, x16
0xffff7ab9fbbc   284  cmp x14, #0x4 (4)
0xffff7ab9fbc0   288  ccmp x15, #4, #nzcv, eq
0xffff7ab9fbc4   292  b.ne #+0x5c (addr 0xffff7ab9fc20)
0xffff7ab9fbc8   296  ldur x10, [x1, #15]
0xffff7ab9fbcc   300  ldur x11, [x0, #15]
0xffff7ab9fbd0   304  cmp x10, x11
0xffff7ab9fbd4   308  b.eq #+0xc (addr 0xffff7ab9fbe0)
0xffff7ab9fbd8   312  movz x0, #0x100000000
0xffff7ab9fbdc   316  ret
0xffff7ab9fbe0   320  cbnz x10, #+0xc (addr 0xffff7ab9fbec)
0xffff7ab9fbe4   324  movz x0, #0x0
0xffff7ab9fbe8   328  ret
0xffff7ab9fbec   332  asr x10, x10, #32
0xffff7ab9fbf0   336  add x11, x10, #0x17 (23)
0xffff7ab9fbf4   340  add x1, x1, x11
0xffff7ab9fbf8   344  add x0, x0, x11
0xffff7ab9fbfc   348  neg x10, x10
0xffff7ab9fc00   352  ldrb w11, [x1, x10]
0xffff7ab9fc04   356  ldrb w12, [x0, x10]
0xffff7ab9fc08   360  cmp x11, x12
0xffff7ab9fc0c   364  b.ne #-0x34 (addr 0xffff7ab9fbd8)
0xffff7ab9fc10   368  add x10, x10, #0x1 (1)
0xffff7ab9fc14   372  cbnz x10, #-0x14 (addr 0xffff7ab9fc00)
0xffff7ab9fc18   376  movz x0, #0x0
0xffff7ab9fc1c   380  ret
0xffff7ab9fc20   384  movz x16, #0xc00000000
0xffff7ab9fc24   388  sub csp, jssp, #0x10 (16)
0xffff7ab9fc28   392  stp fp, lr, [jssp, #-16]!
0xffff7ab9fc2c   396  sub csp, jssp, #0x10 (16)
0xffff7ab9fc30   400  str x16, [jssp, #-8]!
0xffff7ab9fc34   404  ldr x17, pc+172 (addr 0x0000ffff7ab9fce0)    ;; object: 0xffff7ab9fa41 <Code: COMPARE_IC>
0xffff7ab9fc38   408  sub csp, jssp, #0x10 (16)
0xffff7ab9fc3c   412  str x17, [jssp, #-8]!
0xffff7ab9fc40   416  add fp, jssp, #0x10 (16)
0xffff7ab9fc44   420  sub csp, jssp, #0x10 (16)
0xffff7ab9fc48   424  stp x0, x1, [jssp, #-16]!
0xffff7ab9fc4c   428  movz x0, #0x2
0xffff7ab9fc50   432  ldr x1, pc+152 (addr 0x0000ffff7ab9fce8)    ;; external reference (Runtime::StrictEqual)
0xffff7ab9fc54   436  ldr x16, pc+156 (addr 0x0000ffff7ab9fcf0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab9fc58   440  blr x16
0xffff7ab9fc5c   444  mov jssp, fp
0xffff7ab9fc60   448  ldp fp, lr, [jssp], #16
0xffff7ab9fc64   452  ldr x1, [x26, #64]
0xffff7ab9fc68   456  sub x0, x0, x1
0xffff7ab9fc6c   460  ret
0xffff7ab9fc70   464  movz x16, #0xc00000000
0xffff7ab9fc74   468  sub csp, jssp, #0x10 (16)
0xffff7ab9fc78   472  stp fp, lr, [jssp, #-16]!
0xffff7ab9fc7c   476  sub csp, jssp, #0x10 (16)
0xffff7ab9fc80   480  str x16, [jssp, #-8]!
0xffff7ab9fc84   484  ldr x17, pc+116 (addr 0x0000ffff7ab9fcf8)    ;; object: 0xffff7ab9fa41 <Code: COMPARE_IC>
0xffff7ab9fc88   488  sub csp, jssp, #0x10 (16)
0xffff7ab9fc8c   492  str x17, [jssp, #-8]!
0xffff7ab9fc90   496  add fp, jssp, #0x10 (16)
0xffff7ab9fc94   500  sub csp, jssp, #0x18 (24)
0xffff7ab9fc98   504  stp lr, x0, [jssp, #-24]!
0xffff7ab9fc9c   508  str x1, [jssp, #16]
0xffff7ab9fca0   512  movz x10, #0x2f00000000
0xffff7ab9fca4   516  sub csp, jssp, #0x18 (24)
0xffff7ab9fca8   520  stp x10, x0, [jssp, #-24]!
0xffff7ab9fcac   524  str x1, [jssp, #16]
0xffff7ab9fcb0   528  movz x0, #0x3
0xffff7ab9fcb4   532  ldr x1, pc+76 (addr 0x0000ffff7ab9fd00)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ab9fcb8   536  ldr x16, pc+80 (addr 0x0000ffff7ab9fd08)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab9fcbc   540  blr x16
0xffff7ab9fcc0   544  add x11, x0, #0x5f (95)
0xffff7ab9fcc4   548  ldr x1, [jssp, #16]
0xffff7ab9fcc8   552  ldp lr, x0, [jssp], #24
0xffff7ab9fccc   556  mov jssp, fp
0xffff7ab9fcd0   560  ldp fp, lr, [jssp], #16
0xffff7ab9fcd4   564  br x11
0xffff7ab9fcd8   568  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ab9fcdc   572  d63f03e0       constant
0xffff7ab9fce0   576  7ab9fa41       constant
0xffff7ab9fce4   580  0000ffff       constant
0xffff7ab9fce8   584  00e50928       constant
0xffff7ab9fcec   588  00000000       constant
0xffff7ab9fcf0   592  7ab06060       constant
0xffff7ab9fcf4   596  0000ffff       constant
0xffff7ab9fcf8   600  7ab9fa41       constant
0xffff7ab9fcfc   604  0000ffff       constant
0xffff7ab9fd00   608  00c8a980       constant
0xffff7ab9fd04   612  00000000       constant
0xffff7ab9fd08   616  7ab06060       constant
0xffff7ab9fd0c   620  0000ffff       constant


RelocInfo (size = 16)
0xffff7ab9fc34  embedded object  (0xffff7ab9fa41 <Code: COMPARE_IC>)
0xffff7ab9fc50  external reference (Runtime::StrictEqual)  (0xe50928)
0xffff7ab9fc54  code target (STUB)  (0xffff7ab06060)
0xffff7ab9fc84  embedded object  (0xffff7ab9fa41 <Code: COMPARE_IC>)
0xffff7ab9fcb4  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ab9fcb8  code target (STUB)  (0xffff7ab06060)
0xffff7ab9fcd8  constant pool (size 56)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = NUMBER*SMI -> NUMBER
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 232)
0xffff7ab9fd80     0  tbnz w0, #0, #+0x58 (addr 0xffff7ab9fdd8)
0xffff7ab9fd84     4  scvtf d0, x0, #32
0xffff7ab9fd88     8  scvtf d1, x1, #32
0xffff7ab9fd8c    12  tbz w0, #0, #+0x18 (addr 0xffff7ab9fda4)
0xffff7ab9fd90    16  ldur x16, [x0, #-1]
0xffff7ab9fd94    20  ldr x17, [x26, #120]
0xffff7ab9fd98    24  cmp x16, x17
0xffff7ab9fd9c    28  b.ne #+0x3c (addr 0xffff7ab9fdd8)
0xffff7ab9fda0    32  ldur d0, [x0, #7]
0xffff7ab9fda4    36  tbz w1, #0, #+0x18 (addr 0xffff7ab9fdbc)
0xffff7ab9fda8    40  ldur x16, [x1, #-1]
0xffff7ab9fdac    44  ldr x17, [x26, #120]
0xffff7ab9fdb0    48  cmp x16, x17
0xffff7ab9fdb4    52  b.ne #+0x24 (addr 0xffff7ab9fdd8)
0xffff7ab9fdb8    56  ldur d1, [x1, #7]
0xffff7ab9fdbc    60  fcmp d1, d0
0xffff7ab9fdc0    64  b.vs #+0x10 (addr 0xffff7ab9fdd0)
0xffff7ab9fdc4    68  cset x0, gt
0xffff7ab9fdc8    72  csinv x0, x0, xzr, ge
0xffff7ab9fdcc    76  ret
0xffff7ab9fdd0    80  ldr x16, pc+120 (addr 0x0000ffff7ab9fe48)    ;; code: COMPARE_IC, GENERIC
0xffff7ab9fdd4    84  br x16
0xffff7ab9fdd8    88  movz x16, #0xc00000000
0xffff7ab9fddc    92  sub csp, jssp, #0x10 (16)
0xffff7ab9fde0    96  stp fp, lr, [jssp, #-16]!
0xffff7ab9fde4   100  sub csp, jssp, #0x10 (16)
0xffff7ab9fde8   104  str x16, [jssp, #-8]!
0xffff7ab9fdec   108  ldr x17, pc+100 (addr 0x0000ffff7ab9fe50)    ;; object: 0xffff7ab9fd21 <Code: COMPARE_IC>
0xffff7ab9fdf0   112  sub csp, jssp, #0x10 (16)
0xffff7ab9fdf4   116  str x17, [jssp, #-8]!
0xffff7ab9fdf8   120  add fp, jssp, #0x10 (16)
0xffff7ab9fdfc   124  sub csp, jssp, #0x18 (24)
0xffff7ab9fe00   128  stp lr, x0, [jssp, #-24]!
0xffff7ab9fe04   132  str x1, [jssp, #16]
0xffff7ab9fe08   136  movz x10, #0x2f00000000
0xffff7ab9fe0c   140  sub csp, jssp, #0x18 (24)
0xffff7ab9fe10   144  stp x10, x0, [jssp, #-24]!
0xffff7ab9fe14   148  str x1, [jssp, #16]
0xffff7ab9fe18   152  movz x0, #0x3
0xffff7ab9fe1c   156  ldr x1, pc+60 (addr 0x0000ffff7ab9fe58)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ab9fe20   160  ldr x16, pc+64 (addr 0x0000ffff7ab9fe60)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ab9fe24   164  blr x16
0xffff7ab9fe28   168  add x11, x0, #0x5f (95)
0xffff7ab9fe2c   172  ldr x1, [jssp, #16]
0xffff7ab9fe30   176  ldp lr, x0, [jssp], #24
0xffff7ab9fe34   180  mov jssp, fp
0xffff7ab9fe38   184  ldp fp, lr, [jssp], #16
0xffff7ab9fe3c   188  br x11
0xffff7ab9fe40   192  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7ab9fe44   196  d63f03e0       constant
0xffff7ab9fe48   200  7ab9faa0       constant
0xffff7ab9fe4c   204  0000ffff       constant
0xffff7ab9fe50   208  7ab9fd21       constant
0xffff7ab9fe54   212  0000ffff       constant
0xffff7ab9fe58   216  00c8a980       constant
0xffff7ab9fe5c   220  00000000       constant
0xffff7ab9fe60   224  7ab06060       constant
0xffff7ab9fe64   228  0000ffff       constant


RelocInfo (size = 13)
0xffff7ab9fdd0  code target (COMPARE_IC)  (0xffff7ab9faa0)
0xffff7ab9fdec  embedded object  (0xffff7ab9fd21 <Code: COMPARE_IC>)
0xffff7ab9fe1c  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ab9fe20  code target (STUB)  (0xffff7ab06060)
0xffff7ab9fe40  constant pool (size 40)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ToIntegerStub
compiler = turbofan
Instructions (size = 386)
0xffff7aba28a0     0  and x1, x0, #0x1
0xffff7aba28a4     4  cmp x1, #0x0 (0)
0xffff7aba28a8     8  b.eq #+0x90 (addr 0xffff7aba2938)
0xffff7aba28ac    12  ldur x1, [x0, #-1]
0xffff7aba28b0    16  ldr x2, [x26, #120]
0xffff7aba28b4    20  cmp x1, x2
0xffff7aba28b8    24  b.ne #+0x84 (addr 0xffff7aba293c)
0xffff7aba28bc    28  ldur d0, [x0, #7]
0xffff7aba28c0    32  fcmp d0, d0
0xffff7aba28c4    36  b.ne #+0xb4 (addr 0xffff7aba2978)
0xffff7aba28c8    40  frintz d0, d0
0xffff7aba28cc    44  fcvtzs w0, d0
0xffff7aba28d0    48  scvtf d1, w0
0xffff7aba28d4    52  fcmp d0, d1
0xffff7aba28d8    56  b.ne #+0x24 (addr 0xffff7aba28fc)
0xffff7aba28dc    60  fcmp d0, #0.0
0xffff7aba28e0    64  b.ne #+0x14 (addr 0xffff7aba28f4)
0xffff7aba28e4    68  fmov x1, d0
0xffff7aba28e8    72  lsr x1, x1, #32
0xffff7aba28ec    76  cmp w1, #0x0 (0)
0xffff7aba28f0    80  b.lt #+0xc (addr 0xffff7aba28fc)
0xffff7aba28f4    84  lsl x0, x0, #32
0xffff7aba28f8    88  b #+0x40 (addr 0xffff7aba2938)
0xffff7aba28fc    92  movz x0, #0xe2c0
0xffff7aba2900    96  movk x0, #0x9ab, lsl #16
0xffff7aba2904   100  ldr x1, [x0]
0xffff7aba2908   104  movz x2, #0xe2c8
0xffff7aba290c   108  movk x2, #0x9ab, lsl #16
0xffff7aba2910   112  ldr x2, [x2]
0xffff7aba2914   116  sub x2, x2, x1
0xffff7aba2918   120  cmp x2, #0x10 (16)
0xffff7aba291c   124  b.lt #+0x64 (addr 0xffff7aba2980)
0xffff7aba2920   128  add x2, x1, #0x10 (16)
0xffff7aba2924   132  str x2, [x0]
0xffff7aba2928   136  add x0, x1, #0x1 (1)
0xffff7aba292c   140  ldr x1, [x26, #120]
0xffff7aba2930   144  stur x1, [x0, #-1]
0xffff7aba2934   148  stur d0, [x0, #7]
0xffff7aba2938   152  ret
0xffff7aba293c   156  movz x16, #0xa00000000
0xffff7aba2940   160  sub csp, jssp, #0x10 (16)
0xffff7aba2944   164  stp fp, lr, [jssp, #-16]!
0xffff7aba2948   168  mov fp, jssp
0xffff7aba294c   172  sub csp, jssp, #0x20 (32)
0xffff7aba2950   176  sub jssp, jssp, #0x20 (32)
0xffff7aba2954   180  stur x16, [fp, #-8]
0xffff7aba2958   184  mov x1, cp
0xffff7aba295c   188  str cp, [jssp, #8]
0xffff7aba2960   192  ldr x16, pc+144 (addr 0x0000ffff7aba29f0)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0xffff7aba2964   196  blr x16
0xffff7aba2968   200  ldr cp, [jssp, #8]
0xffff7aba296c   204  mov jssp, fp
0xffff7aba2970   208  ldp fp, lr, [jssp], #16
0xffff7aba2974   212  b #-0xd4 (addr 0xffff7aba28a0)
0xffff7aba2978   216  movz x0, #0x0
0xffff7aba297c   220  ret
0xffff7aba2980   224  movz x16, #0xa00000000
0xffff7aba2984   228  sub csp, jssp, #0x10 (16)
0xffff7aba2988   232  stp fp, lr, [jssp, #-16]!
0xffff7aba298c   236  mov fp, jssp
0xffff7aba2990   240  sub csp, jssp, #0x20 (32)
0xffff7aba2994   244  sub jssp, jssp, #0x20 (32)
0xffff7aba2998   248  stur x16, [fp, #-8]
0xffff7aba299c   252  movz x0, #0x0
0xffff7aba29a0   256  lsl x0, x0, #32
0xffff7aba29a4   260  movz x1, #0x10
0xffff7aba29a8   264  lsl x1, x1, #32
0xffff7aba29ac   268  sub csp, jssp, #0x10 (16)
0xffff7aba29b0   272  sub jssp, jssp, #0x10 (16)
0xffff7aba29b4   276  str x1, [jssp, #8]
0xffff7aba29b8   280  str x0, [jssp]
0xffff7aba29bc   284  str d0, [jssp, #32]
0xffff7aba29c0   288  movz x1, #0x5b88
0xffff7aba29c4   292  movk x1, #0xe2, lsl #16
0xffff7aba29c8   296  movz x0, #0x2
0xffff7aba29cc   300  movz cp, #0x0
0xffff7aba29d0   304  ldr x16, pc+40 (addr 0x0000ffff7aba29f8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7aba29d4   308  blr x16
0xffff7aba29d8   312  ldr d0, [jssp, #16]
0xffff7aba29dc   316  mov jssp, fp
0xffff7aba29e0   320  ldp fp, lr, [jssp], #16
0xffff7aba29e4   324  b #-0xb8 (addr 0xffff7aba292c)
0xffff7aba29e8   328  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7aba29ec   332  d63f03e0       constant
0xffff7aba29f0   336  7ab29d80       constant
0xffff7aba29f4   340  0000ffff       constant
0xffff7aba29f8   344  7ab06060       constant
0xffff7aba29fc   348  0000ffff       constant


Safepoints (size = 34)
0xffff7aba2968   200  010000 (sp -> fp)  <none>
0xffff7aba29d8   312  000000 (sp -> fp)  <none>

RelocInfo (size = 12)
0xffff7aba2960  code target (STUB)  (0xffff7ab29d80)
0xffff7aba29d0  code target (STUB)  (0xffff7ab06060)
0xffff7aba29e8  constant pool (size 24)

--- End code ---
kind = STUB
major_key = ToIntegerStub
name = ToIntegerStub
compiler = turbofan
Instructions (size = 386)
0xffff7aba28a0     0  and x1, x0, #0x1
0xffff7aba28a4     4  cmp x1, #0x0 (0)
0xffff7aba28a8     8  b.eq #+0x90 (addr 0xffff7aba2938)
0xffff7aba28ac    12  ldur x1, [x0, #-1]
0xffff7aba28b0    16  ldr x2, [x26, #120]
0xffff7aba28b4    20  cmp x1, x2
0xffff7aba28b8    24  b.ne #+0x84 (addr 0xffff7aba293c)
0xffff7aba28bc    28  ldur d0, [x0, #7]
0xffff7aba28c0    32  fcmp d0, d0
0xffff7aba28c4    36  b.ne #+0xb4 (addr 0xffff7aba2978)
0xffff7aba28c8    40  frintz d0, d0
0xffff7aba28cc    44  fcvtzs w0, d0
0xffff7aba28d0    48  scvtf d1, w0
0xffff7aba28d4    52  fcmp d0, d1
0xffff7aba28d8    56  b.ne #+0x24 (addr 0xffff7aba28fc)
0xffff7aba28dc    60  fcmp d0, #0.0
0xffff7aba28e0    64  b.ne #+0x14 (addr 0xffff7aba28f4)
0xffff7aba28e4    68  fmov x1, d0
0xffff7aba28e8    72  lsr x1, x1, #32
0xffff7aba28ec    76  cmp w1, #0x0 (0)
0xffff7aba28f0    80  b.lt #+0xc (addr 0xffff7aba28fc)
0xffff7aba28f4    84  lsl x0, x0, #32
0xffff7aba28f8    88  b #+0x40 (addr 0xffff7aba2938)
0xffff7aba28fc    92  movz x0, #0xe2c0
0xffff7aba2900    96  movk x0, #0x9ab, lsl #16
0xffff7aba2904   100  ldr x1, [x0]
0xffff7aba2908   104  movz x2, #0xe2c8
0xffff7aba290c   108  movk x2, #0x9ab, lsl #16
0xffff7aba2910   112  ldr x2, [x2]
0xffff7aba2914   116  sub x2, x2, x1
0xffff7aba2918   120  cmp x2, #0x10 (16)
0xffff7aba291c   124  b.lt #+0x64 (addr 0xffff7aba2980)
0xffff7aba2920   128  add x2, x1, #0x10 (16)
0xffff7aba2924   132  str x2, [x0]
0xffff7aba2928   136  add x0, x1, #0x1 (1)
0xffff7aba292c   140  ldr x1, [x26, #120]
0xffff7aba2930   144  stur x1, [x0, #-1]
0xffff7aba2934   148  stur d0, [x0, #7]
0xffff7aba2938   152  ret
0xffff7aba293c   156  movz x16, #0xa00000000
0xffff7aba2940   160  sub csp, jssp, #0x10 (16)
0xffff7aba2944   164  stp fp, lr, [jssp, #-16]!
0xffff7aba2948   168  mov fp, jssp
0xffff7aba294c   172  sub csp, jssp, #0x20 (32)
0xffff7aba2950   176  sub jssp, jssp, #0x20 (32)
0xffff7aba2954   180  stur x16, [fp, #-8]
0xffff7aba2958   184  mov x1, cp
0xffff7aba295c   188  str cp, [jssp, #8]
0xffff7aba2960   192  ldr x16, pc+144 (addr 0x0000ffff7aba29f0)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0xffff7aba2964   196  blr x16
0xffff7aba2968   200  ldr cp, [jssp, #8]
0xffff7aba296c   204  mov jssp, fp
0xffff7aba2970   208  ldp fp, lr, [jssp], #16
0xffff7aba2974   212  b #-0xd4 (addr 0xffff7aba28a0)
0xffff7aba2978   216  movz x0, #0x0
0xffff7aba297c   220  ret
0xffff7aba2980   224  movz x16, #0xa00000000
0xffff7aba2984   228  sub csp, jssp, #0x10 (16)
0xffff7aba2988   232  stp fp, lr, [jssp, #-16]!
0xffff7aba298c   236  mov fp, jssp
0xffff7aba2990   240  sub csp, jssp, #0x20 (32)
0xffff7aba2994   244  sub jssp, jssp, #0x20 (32)
0xffff7aba2998   248  stur x16, [fp, #-8]
0xffff7aba299c   252  movz x0, #0x0
0xffff7aba29a0   256  lsl x0, x0, #32
0xffff7aba29a4   260  movz x1, #0x10
0xffff7aba29a8   264  lsl x1, x1, #32
0xffff7aba29ac   268  sub csp, jssp, #0x10 (16)
0xffff7aba29b0   272  sub jssp, jssp, #0x10 (16)
0xffff7aba29b4   276  str x1, [jssp, #8]
0xffff7aba29b8   280  str x0, [jssp]
0xffff7aba29bc   284  str d0, [jssp, #32]
0xffff7aba29c0   288  movz x1, #0x5b88
0xffff7aba29c4   292  movk x1, #0xe2, lsl #16
0xffff7aba29c8   296  movz x0, #0x2
0xffff7aba29cc   300  movz cp, #0x0
0xffff7aba29d0   304  ldr x16, pc+40 (addr 0x0000ffff7aba29f8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7aba29d4   308  blr x16
0xffff7aba29d8   312  ldr d0, [jssp, #16]
0xffff7aba29dc   316  mov jssp, fp
0xffff7aba29e0   320  ldp fp, lr, [jssp], #16
0xffff7aba29e4   324  b #-0xb8 (addr 0xffff7aba292c)
0xffff7aba29e8   328  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7aba29ec   332  d63f03e0       constant
0xffff7aba29f0   336  7ab29d80       constant
0xffff7aba29f4   340  0000ffff       constant
0xffff7aba29f8   344  7ab06060       constant
0xffff7aba29fc   348  0000ffff       constant


Safepoints (size = 34)
0xffff7aba2968   200  010000 (sp -> fp)  <none>
0xffff7aba29d8   312  000000 (sp -> fp)  <none>

RelocInfo (size = 12)
0xffff7aba2960  code target (STUB)  (0xffff7ab29d80)
0xffff7aba29d0  code target (STUB)  (0xffff7ab06060)
0xffff7aba29e8  constant pool (size 24)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = RECEIVER*RECEIVER -> KNOWN_RECEIVER
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 192)
0xffff7aba3fe0     0  and x16, x0, x1
0xffff7aba3fe4     4  tbz w16, #0, #+0x2c (addr 0xffff7aba4010)
0xffff7aba3fe8     8  ldr x12, pc+152 (addr 0x0000ffff7aba4080)    ;; object: 0x20df2f21 WeakCell for 0x4ec06671 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7aba3fec    12  ldur x12, [x12, #7]
0xffff7aba3ff0    16  ldur x10, [x0, #-1]
0xffff7aba3ff4    20  ldur x11, [x1, #-1]
0xffff7aba3ff8    24  cmp x10, x12
0xffff7aba3ffc    28  b.ne #+0x14 (addr 0xffff7aba4010)
0xffff7aba4000    32  cmp x11, x12
0xffff7aba4004    36  b.ne #+0xc (addr 0xffff7aba4010)
0xffff7aba4008    40  sub x0, x0, x1
0xffff7aba400c    44  ret
0xffff7aba4010    48  movz x16, #0xc00000000
0xffff7aba4014    52  sub csp, jssp, #0x10 (16)
0xffff7aba4018    56  stp fp, lr, [jssp, #-16]!
0xffff7aba401c    60  sub csp, jssp, #0x10 (16)
0xffff7aba4020    64  str x16, [jssp, #-8]!
0xffff7aba4024    68  ldr x17, pc+100 (addr 0x0000ffff7aba4088)    ;; object: 0xffff7aba3f81 <Code: COMPARE_IC>
0xffff7aba4028    72  sub csp, jssp, #0x10 (16)
0xffff7aba402c    76  str x17, [jssp, #-8]!
0xffff7aba4030    80  add fp, jssp, #0x10 (16)
0xffff7aba4034    84  sub csp, jssp, #0x18 (24)
0xffff7aba4038    88  stp lr, x0, [jssp, #-24]!
0xffff7aba403c    92  str x1, [jssp, #16]
0xffff7aba4040    96  movz x10, #0x2f00000000
0xffff7aba4044   100  sub csp, jssp, #0x18 (24)
0xffff7aba4048   104  stp x10, x0, [jssp, #-24]!
0xffff7aba404c   108  str x1, [jssp, #16]
0xffff7aba4050   112  movz x0, #0x3
0xffff7aba4054   116  ldr x1, pc+60 (addr 0x0000ffff7aba4090)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7aba4058   120  ldr x16, pc+64 (addr 0x0000ffff7aba4098)    ;; code: STUB, CEntryStub, minor: 4
0xffff7aba405c   124  blr x16
0xffff7aba4060   128  add x11, x0, #0x5f (95)
0xffff7aba4064   132  ldr x1, [jssp, #16]
0xffff7aba4068   136  ldp lr, x0, [jssp], #24
0xffff7aba406c   140  mov jssp, fp
0xffff7aba4070   144  ldp fp, lr, [jssp], #16
0xffff7aba4074   148  br x11
0xffff7aba4078   152  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7aba407c   156  d63f03e0       constant
0xffff7aba4080   160  20df2f21       constant
0xffff7aba4084   164  00000000       constant
0xffff7aba4088   168  7aba3f81       constant
0xffff7aba408c   172  0000ffff       constant
0xffff7aba4090   176  00c8a980       constant
0xffff7aba4094   180  00000000       constant
0xffff7aba4098   184  7ab06060       constant
0xffff7aba409c   188  0000ffff       constant


RelocInfo (size = 11)
0xffff7aba3fe8  embedded object  (0x20df2f21 WeakCell for 0x4ec06671 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7aba4024  embedded object  (0xffff7aba3f81 <Code: COMPARE_IC>)
0xffff7aba4054  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7aba4058  code target (STUB)  (0xffff7ab06060)
0xffff7aba4078  constant pool (size 40)


kind = HANDLER
major_key = <NoCache>Stub
compiler = unknown
Instructions (size = 120)
0xffff7aba4900     0  sub csp, jssp, #0x8 (8)
0xffff7aba4904     4  str x3, [jssp, #-8]!
0xffff7aba4908     8  sub csp, jssp, #0x8 (8)
0xffff7aba490c    12  str x0, [jssp, #-8]!
0xffff7aba4910    16  ldr x0, pc+72 (addr 0x0000ffff7aba4958)    ;; object: 0x20ded491 Cell for 0
0xffff7aba4914    20  ldur x0, [x0, #7]
0xffff7aba4918    24  cmp x0, #0x0 (0)
0xffff7aba491c    28  b.ne #+0x14 (addr 0xffff7aba4930)
0xffff7aba4920    32  ldr x3, pc+64 (addr 0x0000ffff7aba4960)    ;; object: 0x20df3289 WeakCell for 0x56e5ea99 <an Object with map 0x4ec164d1>
0xffff7aba4924    36  ldur x3, [x3, #7]
0xffff7aba4928    40  tbz w3, #0, #+0x8 (addr 0xffff7aba4930)
0xffff7aba492c    44  b #+0x14 (addr 0xffff7aba4940)
0xffff7aba4930    48  ldr x0, [jssp], #8
0xffff7aba4934    52  ldr x3, [jssp], #8
0xffff7aba4938    56  ldr x16, pc+48 (addr 0x0000ffff7aba4968)    ;; code: BUILTIN
0xffff7aba493c    60  br x16
0xffff7aba4940    64  add jssp, jssp, #0x10 (16)
0xffff7aba4944    68  mov x1, x3
0xffff7aba4948    72  ldr x16, pc+40 (addr 0x0000ffff7aba4970)    ;; code: HANDLER, LoadFieldStub, minor: 4
0xffff7aba494c    76  br x16
0xffff7aba4950    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7aba4954    84  d63f03e0       constant
0xffff7aba4958    88  20ded491       constant
0xffff7aba495c    92  00000000       constant
0xffff7aba4960    96  20df3289       constant
0xffff7aba4964   100  00000000       constant
0xffff7aba4968   104  7ab222e0       constant
0xffff7aba496c   108  0000ffff       constant
0xffff7aba4970   112  7ab6c360       constant
0xffff7aba4974   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7aba4910  embedded object  (0x20ded491 Cell for 0)
0xffff7aba4920  embedded object  (0x20df3289 WeakCell for 0x56e5ea99 <an Object with map 0x4ec164d1>)
0xffff7aba4938  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7aba4948  code target (HANDLER)  (0xffff7ab6c360)
0xffff7aba4950  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0xffff7aba49e0     0  ldur x0, [x1, #15]
0xffff7aba49e4     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0xffff7aba49e0     0  ldur x0, [x1, #15]
0xffff7aba49e4     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = global
compiler = unknown
Instructions (size = 216)
0xffff7aba4a60     0  sub csp, jssp, #0x8 (8)
0xffff7aba4a64     4  str x3, [jssp, #-8]!
0xffff7aba4a68     8  sub csp, jssp, #0x8 (8)
0xffff7aba4a6c    12  str x0, [jssp, #-8]!
0xffff7aba4a70    16  ldr x0, pc+160 (addr 0x0000ffff7aba4b10)    ;; object: 0x20ded491 Cell for 0
0xffff7aba4a74    20  ldur x0, [x0, #7]
0xffff7aba4a78    24  cmp x0, #0x0 (0)
0xffff7aba4a7c    28  b.ne #+0x14 (addr 0xffff7aba4a90)
0xffff7aba4a80    32  ldr x3, pc+152 (addr 0x0000ffff7aba4b18)    ;; object: 0x20df32e9 WeakCell for 0x56e5ea99 <an Object with map 0x4ec164d1>
0xffff7aba4a84    36  ldur x3, [x3, #7]
0xffff7aba4a88    40  tbz w3, #0, #+0x8 (addr 0xffff7aba4a90)
0xffff7aba4a8c    44  b #+0x14 (addr 0xffff7aba4aa0)
0xffff7aba4a90    48  ldr x0, [jssp], #8
0xffff7aba4a94    52  ldr x3, [jssp], #8
0xffff7aba4a98    56  ldr x16, pc+136 (addr 0x0000ffff7aba4b20)    ;; code: BUILTIN
0xffff7aba4a9c    60  br x16
0xffff7aba4aa0    64  add jssp, jssp, #0x10 (16)
0xffff7aba4aa4    68  movz x16, #0xc00000000
0xffff7aba4aa8    72  sub csp, jssp, #0x10 (16)
0xffff7aba4aac    76  stp fp, lr, [jssp, #-16]!
0xffff7aba4ab0    80  sub csp, jssp, #0x10 (16)
0xffff7aba4ab4    84  str x16, [jssp, #-8]!
0xffff7aba4ab8    88  ldr x17, pc+112 (addr 0x0000ffff7aba4b28)    ;; object: 0xffff7aba4a01 <Code: HANDLER>
0xffff7aba4abc    92  sub csp, jssp, #0x10 (16)
0xffff7aba4ac0    96  str x17, [jssp, #-8]!
0xffff7aba4ac4   100  add fp, jssp, #0x10 (16)
0xffff7aba4ac8   104  sub csp, jssp, #0x8 (8)
0xffff7aba4acc   108  str cp, [jssp, #-8]!
0xffff7aba4ad0   112  sub csp, jssp, #0x8 (8)
0xffff7aba4ad4   116  str x1, [jssp, #-8]!
0xffff7aba4ad8   120  ldur x1, [x3, #-1]
0xffff7aba4adc   124  ldur x1, [x1, #47]
0xffff7aba4ae0   128  movz x16, #0x11f
0xffff7aba4ae4   132  ldr x1, [x1, x16]
0xffff7aba4ae8   136  ldur x1, [x1, #7]
0xffff7aba4aec   140  movz x0, #0x0
0xffff7aba4af0   144  ldr x16, pc+64 (addr 0x0000ffff7aba4b30)    ;; code: BUILTIN
0xffff7aba4af4   148  blr x16
0xffff7aba4af8   152  ldr cp, [jssp], #8
0xffff7aba4afc   156  mov jssp, fp
0xffff7aba4b00   160  ldp fp, lr, [jssp], #16
0xffff7aba4b04   164  ret
0xffff7aba4b08   168  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0xffff7aba4b0c   172  d63f03e0       constant
0xffff7aba4b10   176  20ded491       constant
0xffff7aba4b14   180  00000000       constant
0xffff7aba4b18   184  20df32e9       constant
0xffff7aba4b1c   188  00000000       constant
0xffff7aba4b20   192  7ab222e0       constant
0xffff7aba4b24   196  0000ffff       constant
0xffff7aba4b28   200  7aba4a01       constant
0xffff7aba4b2c   204  0000ffff       constant
0xffff7aba4b30   208  7ab1e600       constant
0xffff7aba4b34   212  0000ffff       constant


RelocInfo (size = 11)
0xffff7aba4a70  embedded object  (0x20ded491 Cell for 0)
0xffff7aba4a80  embedded object  (0x20df32e9 WeakCell for 0x56e5ea99 <an Object with map 0x4ec164d1>)
0xffff7aba4a98  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7aba4ab8  embedded object  (0xffff7aba4a01 <Code: HANDLER>)
0xffff7aba4af0  code target (BUILTIN)  (0xffff7ab1e600)
0xffff7aba4b08  constant pool (size 48)

kind = HANDLER
major_key = <NoCache>Stub
name = unicode
compiler = unknown
Instructions (size = 216)
0xffff7aba4ba0     0  sub csp, jssp, #0x8 (8)
0xffff7aba4ba4     4  str x3, [jssp, #-8]!
0xffff7aba4ba8     8  sub csp, jssp, #0x8 (8)
0xffff7aba4bac    12  str x0, [jssp, #-8]!
0xffff7aba4bb0    16  ldr x0, pc+160 (addr 0x0000ffff7aba4c50)    ;; object: 0x20ded491 Cell for 0
0xffff7aba4bb4    20  ldur x0, [x0, #7]
0xffff7aba4bb8    24  cmp x0, #0x0 (0)
0xffff7aba4bbc    28  b.ne #+0x14 (addr 0xffff7aba4bd0)
0xffff7aba4bc0    32  ldr x3, pc+152 (addr 0x0000ffff7aba4c58)    ;; object: 0x20df3321 WeakCell for 0x56e5ea99 <an Object with map 0x4ec164d1>
0xffff7aba4bc4    36  ldur x3, [x3, #7]
0xffff7aba4bc8    40  tbz w3, #0, #+0x8 (addr 0xffff7aba4bd0)
0xffff7aba4bcc    44  b #+0x14 (addr 0xffff7aba4be0)
0xffff7aba4bd0    48  ldr x0, [jssp], #8
0xffff7aba4bd4    52  ldr x3, [jssp], #8
0xffff7aba4bd8    56  ldr x16, pc+136 (addr 0x0000ffff7aba4c60)    ;; code: BUILTIN
0xffff7aba4bdc    60  br x16
0xffff7aba4be0    64  add jssp, jssp, #0x10 (16)
0xffff7aba4be4    68  movz x16, #0xc00000000
0xffff7aba4be8    72  sub csp, jssp, #0x10 (16)
0xffff7aba4bec    76  stp fp, lr, [jssp, #-16]!
0xffff7aba4bf0    80  sub csp, jssp, #0x10 (16)
0xffff7aba4bf4    84  str x16, [jssp, #-8]!
0xffff7aba4bf8    88  ldr x17, pc+112 (addr 0x0000ffff7aba4c68)    ;; object: 0xffff7aba4b41 <Code: HANDLER>
0xffff7aba4bfc    92  sub csp, jssp, #0x10 (16)
0xffff7aba4c00    96  str x17, [jssp, #-8]!
0xffff7aba4c04   100  add fp, jssp, #0x10 (16)
0xffff7aba4c08   104  sub csp, jssp, #0x8 (8)
0xffff7aba4c0c   108  str cp, [jssp, #-8]!
0xffff7aba4c10   112  sub csp, jssp, #0x8 (8)
0xffff7aba4c14   116  str x1, [jssp, #-8]!
0xffff7aba4c18   120  ldur x1, [x3, #-1]
0xffff7aba4c1c   124  ldur x1, [x1, #47]
0xffff7aba4c20   128  movz x16, #0x197
0xffff7aba4c24   132  ldr x1, [x1, x16]
0xffff7aba4c28   136  ldur x1, [x1, #7]
0xffff7aba4c2c   140  movz x0, #0x0
0xffff7aba4c30   144  ldr x16, pc+64 (addr 0x0000ffff7aba4c70)    ;; code: BUILTIN
0xffff7aba4c34   148  blr x16
0xffff7aba4c38   152  ldr cp, [jssp], #8
0xffff7aba4c3c   156  mov jssp, fp
0xffff7aba4c40   160  ldp fp, lr, [jssp], #16
0xffff7aba4c44   164  ret
0xffff7aba4c48   168  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0xffff7aba4c4c   172  d63f03e0       constant
0xffff7aba4c50   176  20ded491       constant
0xffff7aba4c54   180  00000000       constant
0xffff7aba4c58   184  20df3321       constant
0xffff7aba4c5c   188  00000000       constant
0xffff7aba4c60   192  7ab222e0       constant
0xffff7aba4c64   196  0000ffff       constant
0xffff7aba4c68   200  7aba4b41       constant
0xffff7aba4c6c   204  0000ffff       constant
0xffff7aba4c70   208  7ab1e600       constant
0xffff7aba4c74   212  0000ffff       constant


RelocInfo (size = 11)
0xffff7aba4bb0  embedded object  (0x20ded491 Cell for 0)
0xffff7aba4bc0  embedded object  (0x20df3321 WeakCell for 0x56e5ea99 <an Object with map 0x4ec164d1>)
0xffff7aba4bd8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7aba4bf8  embedded object  (0xffff7aba4b41 <Code: HANDLER>)
0xffff7aba4c30  code target (BUILTIN)  (0xffff7ab1e600)
0xffff7aba4c48  constant pool (size 48)

kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = RECEIVER*INTERNALIZED_STRING -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 624)
0xffff7aba5900     0  orr x16, x1, x0
0xffff7aba5904     4  tbnz w16, #0, #+0x10 (addr 0xffff7aba5914)
0xffff7aba5908     8  asr x1, x1, #32
0xffff7aba590c    12  sub x0, x1, x0, asr #32
0xffff7aba5910    16  ret
0xffff7aba5914    20  cmp x0, x1
0xffff7aba5918    24  b.ne #+0x30 (addr 0xffff7aba5948)
0xffff7aba591c    28  ldur x16, [x0, #-1]
0xffff7aba5920    32  ldr x17, [x26, #120]
0xffff7aba5924    36  cmp x16, x17
0xffff7aba5928    40  b.eq #+0xc (addr 0xffff7aba5934)
0xffff7aba592c    44  movz x0, #0x0
0xffff7aba5930    48  ret
0xffff7aba5934    52  ldur d0, [x0, #7]
0xffff7aba5938    56  fcmp d0, d0
0xffff7aba593c    60  b.vc #-0x10 (addr 0xffff7aba592c)
0xffff7aba5940    64  movn x0, #0x0
0xffff7aba5944    68  ret
0xffff7aba5948    72  and x16, x1, x0
0xffff7aba594c    76  tbnz w16, #0, #+0x64 (addr 0xffff7aba59b0)
0xffff7aba5950    80  tbz w0, #0, #+0x24 (addr 0xffff7aba5974)
0xffff7aba5954    84  ldur x16, [x0, #-1]
0xffff7aba5958    88  ldr x17, [x26, #120]
0xffff7aba595c    92  cmp x16, x17
0xffff7aba5960    96  b.eq #+0x8 (addr 0xffff7aba5968)
0xffff7aba5964   100  ret
0xffff7aba5968   104  ldur d0, [x0, #7]
0xffff7aba596c   108  scvtf d1, x1, #32
0xffff7aba5970   112  b #+0x24 (addr 0xffff7aba5994)
0xffff7aba5974   116  ldur x16, [x1, #-1]
0xffff7aba5978   120  ldr x17, [x26, #120]
0xffff7aba597c   124  cmp x16, x17
0xffff7aba5980   128  b.eq #+0xc (addr 0xffff7aba598c)
0xffff7aba5984   132  movz x0, #0x1
0xffff7aba5988   136  ret
0xffff7aba598c   140  ldur d1, [x1, #7]
0xffff7aba5990   144  scvtf d0, x0, #32
0xffff7aba5994   148  fcmp d1, d0
0xffff7aba5998   152  b.vs #+0x10 (addr 0xffff7aba59a8)
0xffff7aba599c   156  cset x0, gt
0xffff7aba59a0   160  csinv x0, x0, xzr, ge
0xffff7aba59a4   164  ret
0xffff7aba59a8   168  movn x0, #0x0
0xffff7aba59ac   172  ret
0xffff7aba59b0   176  ldur x10, [x0, #-1]
0xffff7aba59b4   180  ldur x12, [x1, #-1]
0xffff7aba59b8   184  ldrb w11, [x10, #11]
0xffff7aba59bc   188  ldrb w13, [x12, #11]
0xffff7aba59c0   192  cmp x11, #0xb1 (177)
0xffff7aba59c4   196  b.lt #+0x8 (addr 0xffff7aba59cc)
0xffff7aba59c8   200  ret
0xffff7aba59cc   204  cmp x11, #0x83 (131)
0xffff7aba59d0   208  movz x16, #0x83
0xffff7aba59d4   212  ccmp x13, x16, #nZcv, ne
0xffff7aba59d8   216  movz x16, #0xb1
0xffff7aba59dc   220  ccmp x13, x16, #NzcV, ne
0xffff7aba59e0   224  b.ge #-0x18 (addr 0xffff7aba59c8)
0xffff7aba59e4   228  orr x14, x13, x11
0xffff7aba59e8   232  tst x14, #0xc0
0xffff7aba59ec   236  b.eq #-0x24 (addr 0xffff7aba59c8)
0xffff7aba59f0   240  cmp x11, #0x81 (129)
0xffff7aba59f4   244  b.ne #+0x18 (addr 0xffff7aba5a0c)
0xffff7aba59f8   248  cmp x12, x10
0xffff7aba59fc   252  b.ne #+0x10 (addr 0xffff7aba5a0c)
0xffff7aba5a00   256  ldur d1, [x1, #7]
0xffff7aba5a04   260  ldur d0, [x0, #7]
0xffff7aba5a08   264  b #-0x74 (addr 0xffff7aba5994)
0xffff7aba5a0c   268  movz x16, #0x87
0xffff7aba5a10   272  and x14, x13, x16
0xffff7aba5a14   276  movz x16, #0x87
0xffff7aba5a18   280  and x15, x11, x16
0xffff7aba5a1c   284  cmp x14, #0x4 (4)
0xffff7aba5a20   288  ccmp x15, #4, #nzcv, eq
0xffff7aba5a24   292  b.ne #+0x5c (addr 0xffff7aba5a80)
0xffff7aba5a28   296  ldur x10, [x1, #15]
0xffff7aba5a2c   300  ldur x11, [x0, #15]
0xffff7aba5a30   304  cmp x10, x11
0xffff7aba5a34   308  b.eq #+0xc (addr 0xffff7aba5a40)
0xffff7aba5a38   312  movz x0, #0x100000000
0xffff7aba5a3c   316  ret
0xffff7aba5a40   320  cbnz x10, #+0xc (addr 0xffff7aba5a4c)
0xffff7aba5a44   324  movz x0, #0x0
0xffff7aba5a48   328  ret
0xffff7aba5a4c   332  asr x10, x10, #32
0xffff7aba5a50   336  add x11, x10, #0x17 (23)
0xffff7aba5a54   340  add x1, x1, x11
0xffff7aba5a58   344  add x0, x0, x11
0xffff7aba5a5c   348  neg x10, x10
0xffff7aba5a60   352  ldrb w11, [x1, x10]
0xffff7aba5a64   356  ldrb w12, [x0, x10]
0xffff7aba5a68   360  cmp x11, x12
0xffff7aba5a6c   364  b.ne #-0x34 (addr 0xffff7aba5a38)
0xffff7aba5a70   368  add x10, x10, #0x1 (1)
0xffff7aba5a74   372  cbnz x10, #-0x14 (addr 0xffff7aba5a60)
0xffff7aba5a78   376  movz x0, #0x0
0xffff7aba5a7c   380  ret
0xffff7aba5a80   384  movz x16, #0xc00000000
0xffff7aba5a84   388  sub csp, jssp, #0x10 (16)
0xffff7aba5a88   392  stp fp, lr, [jssp, #-16]!
0xffff7aba5a8c   396  sub csp, jssp, #0x10 (16)
0xffff7aba5a90   400  str x16, [jssp, #-8]!
0xffff7aba5a94   404  ldr x17, pc+172 (addr 0x0000ffff7aba5b40)    ;; object: 0xffff7aba58a1 <Code: COMPARE_IC>
0xffff7aba5a98   408  sub csp, jssp, #0x10 (16)
0xffff7aba5a9c   412  str x17, [jssp, #-8]!
0xffff7aba5aa0   416  add fp, jssp, #0x10 (16)
0xffff7aba5aa4   420  sub csp, jssp, #0x10 (16)
0xffff7aba5aa8   424  stp x0, x1, [jssp, #-16]!
0xffff7aba5aac   428  movz x0, #0x2
0xffff7aba5ab0   432  ldr x1, pc+152 (addr 0x0000ffff7aba5b48)    ;; external reference (Runtime::StrictEqual)
0xffff7aba5ab4   436  ldr x16, pc+156 (addr 0x0000ffff7aba5b50)    ;; code: STUB, CEntryStub, minor: 4
0xffff7aba5ab8   440  blr x16
0xffff7aba5abc   444  mov jssp, fp
0xffff7aba5ac0   448  ldp fp, lr, [jssp], #16
0xffff7aba5ac4   452  ldr x1, [x26, #64]
0xffff7aba5ac8   456  sub x0, x0, x1
0xffff7aba5acc   460  ret
0xffff7aba5ad0   464  movz x16, #0xc00000000
0xffff7aba5ad4   468  sub csp, jssp, #0x10 (16)
0xffff7aba5ad8   472  stp fp, lr, [jssp, #-16]!
0xffff7aba5adc   476  sub csp, jssp, #0x10 (16)
0xffff7aba5ae0   480  str x16, [jssp, #-8]!
0xffff7aba5ae4   484  ldr x17, pc+116 (addr 0x0000ffff7aba5b58)    ;; object: 0xffff7aba58a1 <Code: COMPARE_IC>
0xffff7aba5ae8   488  sub csp, jssp, #0x10 (16)
0xffff7aba5aec   492  str x17, [jssp, #-8]!
0xffff7aba5af0   496  add fp, jssp, #0x10 (16)
0xffff7aba5af4   500  sub csp, jssp, #0x18 (24)
0xffff7aba5af8   504  stp lr, x0, [jssp, #-24]!
0xffff7aba5afc   508  str x1, [jssp, #16]
0xffff7aba5b00   512  movz x10, #0x2f00000000
0xffff7aba5b04   516  sub csp, jssp, #0x18 (24)
0xffff7aba5b08   520  stp x10, x0, [jssp, #-24]!
0xffff7aba5b0c   524  str x1, [jssp, #16]
0xffff7aba5b10   528  movz x0, #0x3
0xffff7aba5b14   532  ldr x1, pc+76 (addr 0x0000ffff7aba5b60)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7aba5b18   536  ldr x16, pc+80 (addr 0x0000ffff7aba5b68)    ;; code: STUB, CEntryStub, minor: 4
0xffff7aba5b1c   540  blr x16
0xffff7aba5b20   544  add x11, x0, #0x5f (95)
0xffff7aba5b24   548  ldr x1, [jssp, #16]
0xffff7aba5b28   552  ldp lr, x0, [jssp], #24
0xffff7aba5b2c   556  mov jssp, fp
0xffff7aba5b30   560  ldp fp, lr, [jssp], #16
0xffff7aba5b34   564  br x11
0xffff7aba5b38   568  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7aba5b3c   572  d63f03e0       constant
0xffff7aba5b40   576  7aba58a1       constant
0xffff7aba5b44   580  0000ffff       constant
0xffff7aba5b48   584  00e50928       constant
0xffff7aba5b4c   588  00000000       constant
0xffff7aba5b50   592  7ab06060       constant
0xffff7aba5b54   596  0000ffff       constant
0xffff7aba5b58   600  7aba58a1       constant
0xffff7aba5b5c   604  0000ffff       constant
0xffff7aba5b60   608  00c8a980       constant
0xffff7aba5b64   612  00000000       constant
0xffff7aba5b68   616  7ab06060       constant
0xffff7aba5b6c   620  0000ffff       constant


RelocInfo (size = 16)
0xffff7aba5a94  embedded object  (0xffff7aba58a1 <Code: COMPARE_IC>)
0xffff7aba5ab0  external reference (Runtime::StrictEqual)  (0xe50928)
0xffff7aba5ab4  code target (STUB)  (0xffff7ab06060)
0xffff7aba5ae4  embedded object  (0xffff7aba58a1 <Code: COMPARE_IC>)
0xffff7aba5b14  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7aba5b18  code target (STUB)  (0xffff7ab06060)
0xffff7aba5b38  constant pool (size 56)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba5de0     0  ldur x0, [x1, #7]
0xffff7aba5de4     4  ldur x0, [x0, #71]
0xffff7aba5de8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba5de0     0  ldur x0, [x1, #7]
0xffff7aba5de4     4  ldur x0, [x0, #71]
0xffff7aba5de8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba5e60     0  ldur x0, [x1, #7]
0xffff7aba5e64     4  ldur x0, [x0, #79]
0xffff7aba5e68     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba5e60     0  ldur x0, [x1, #7]
0xffff7aba5e64     4  ldur x0, [x0, #79]
0xffff7aba5e68     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba5ee0     0  ldur x0, [x1, #7]
0xffff7aba5ee4     4  ldur x0, [x0, #87]
0xffff7aba5ee8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba5ee0     0  ldur x0, [x1, #7]
0xffff7aba5ee4     4  ldur x0, [x0, #87]
0xffff7aba5ee8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba5f60     0  ldur x0, [x1, #7]
0xffff7aba5f64     4  ldur x0, [x0, #95]
0xffff7aba5f68     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba5f60     0  ldur x0, [x1, #7]
0xffff7aba5f64     4  ldur x0, [x0, #95]
0xffff7aba5f68     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba5fe0     0  ldur x0, [x1, #7]
0xffff7aba5fe4     4  ldur x0, [x0, #103]
0xffff7aba5fe8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba5fe0     0  ldur x0, [x1, #7]
0xffff7aba5fe4     4  ldur x0, [x0, #103]
0xffff7aba5fe8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba6060     0  ldur x0, [x1, #7]
0xffff7aba6064     4  ldur x0, [x0, #111]
0xffff7aba6068     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba6060     0  ldur x0, [x1, #7]
0xffff7aba6064     4  ldur x0, [x0, #111]
0xffff7aba6068     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba60e0     0  ldur x0, [x1, #7]
0xffff7aba60e4     4  ldur x0, [x0, #159]
0xffff7aba60e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba60e0     0  ldur x0, [x1, #7]
0xffff7aba60e4     4  ldur x0, [x0, #159]
0xffff7aba60e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba6160     0  ldur x0, [x1, #7]
0xffff7aba6164     4  ldur x0, [x0, #175]
0xffff7aba6168     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba6160     0  ldur x0, [x1, #7]
0xffff7aba6164     4  ldur x0, [x0, #175]
0xffff7aba6168     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba61e0     0  ldur x0, [x1, #7]
0xffff7aba61e4     4  ldur x0, [x0, #183]
0xffff7aba61e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba61e0     0  ldur x0, [x1, #7]
0xffff7aba61e4     4  ldur x0, [x0, #183]
0xffff7aba61e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba6260     0  ldur x0, [x1, #7]
0xffff7aba6264     4  ldur x0, [x0, #207]
0xffff7aba6268     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba6260     0  ldur x0, [x1, #7]
0xffff7aba6264     4  ldur x0, [x0, #207]
0xffff7aba6268     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba62e0     0  ldur x0, [x1, #7]
0xffff7aba62e4     4  ldur x0, [x0, #215]
0xffff7aba62e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba62e0     0  ldur x0, [x1, #7]
0xffff7aba62e4     4  ldur x0, [x0, #215]
0xffff7aba62e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba6360     0  ldur x0, [x1, #7]
0xffff7aba6364     4  ldur x0, [x0, #223]
0xffff7aba6368     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba6360     0  ldur x0, [x1, #7]
0xffff7aba6364     4  ldur x0, [x0, #223]
0xffff7aba6368     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba63e0     0  ldur x0, [x1, #7]
0xffff7aba63e4     4  ldur x0, [x0, #231]
0xffff7aba63e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba63e0     0  ldur x0, [x1, #7]
0xffff7aba63e4     4  ldur x0, [x0, #231]
0xffff7aba63e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba6460     0  ldur x0, [x1, #7]
0xffff7aba6464     4  ldur x0, [x0, #239]
0xffff7aba6468     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba6460     0  ldur x0, [x1, #7]
0xffff7aba6464     4  ldur x0, [x0, #239]
0xffff7aba6468     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba64e0     0  ldur x0, [x1, #7]
0xffff7aba64e4     4  ldur x0, [x0, #247]
0xffff7aba64e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba64e0     0  ldur x0, [x1, #7]
0xffff7aba64e4     4  ldur x0, [x0, #247]
0xffff7aba64e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba6560     0  ldur x0, [x1, #7]
0xffff7aba6564     4  ldur x0, [x0, #255]
0xffff7aba6568     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0xffff7aba6560     0  ldur x0, [x1, #7]
0xffff7aba6564     4  ldur x0, [x0, #255]
0xffff7aba6568     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7aba65e0     0  ldur x0, [x1, #7]
0xffff7aba65e4     4  movz x16, #0x107
0xffff7aba65e8     8  ldr x0, [x0, x16]
0xffff7aba65ec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7aba65e0     0  ldur x0, [x1, #7]
0xffff7aba65e4     4  movz x16, #0x107
0xffff7aba65e8     8  ldr x0, [x0, x16]
0xffff7aba65ec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7aba6660     0  ldur x0, [x1, #7]
0xffff7aba6664     4  movz x16, #0x117
0xffff7aba6668     8  ldr x0, [x0, x16]
0xffff7aba666c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7aba6660     0  ldur x0, [x1, #7]
0xffff7aba6664     4  movz x16, #0x117
0xffff7aba6668     8  ldr x0, [x0, x16]
0xffff7aba666c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7aba66e0     0  ldur x0, [x1, #7]
0xffff7aba66e4     4  movz x16, #0x14f
0xffff7aba66e8     8  ldr x0, [x0, x16]
0xffff7aba66ec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7aba66e0     0  ldur x0, [x1, #7]
0xffff7aba66e4     4  movz x16, #0x14f
0xffff7aba66e8     8  ldr x0, [x0, x16]
0xffff7aba66ec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7aba6760     0  ldur x0, [x1, #7]
0xffff7aba6764     4  movz x16, #0x15f
0xffff7aba6768     8  ldr x0, [x0, x16]
0xffff7aba676c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7aba6760     0  ldur x0, [x1, #7]
0xffff7aba6764     4  movz x16, #0x15f
0xffff7aba6768     8  ldr x0, [x0, x16]
0xffff7aba676c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7aba67e0     0  ldur x0, [x1, #7]
0xffff7aba67e4     4  movz x16, #0x177
0xffff7aba67e8     8  ldr x0, [x0, x16]
0xffff7aba67ec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0xffff7aba67e0     0  ldur x0, [x1, #7]
0xffff7aba67e4     4  movz x16, #0x177
0xffff7aba67e8     8  ldr x0, [x0, x16]
0xffff7aba67ec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = Intl
compiler = unknown
Instructions (size = 120)
0xffff7aba6860     0  sub csp, jssp, #0x8 (8)
0xffff7aba6864     4  str x3, [jssp, #-8]!
0xffff7aba6868     8  sub csp, jssp, #0x8 (8)
0xffff7aba686c    12  str x0, [jssp, #-8]!
0xffff7aba6870    16  ldr x0, pc+80 (addr 0x0000ffff7aba68c0)    ;; object: 0x20dc5d51 Cell for 0
0xffff7aba6874    20  ldur x0, [x0, #7]
0xffff7aba6878    24  cmp x0, #0x0 (0)
0xffff7aba687c    28  b.ne #+0x2c (addr 0xffff7aba68a8)
0xffff7aba6880    32  ldr x0, pc+72 (addr 0x0000ffff7aba68c8)    ;; object: 0x20df4e89 WeakCell for 0x20da8f41 PropertyCell for 0x2ae43859 <an Object with map 0x4ec15031>
0xffff7aba6884    36  ldur x0, [x0, #7]
0xffff7aba6888    40  tbz w0, #0, #+0x20 (addr 0xffff7aba68a8)
0xffff7aba688c    44  ldur x0, [x0, #15]
0xffff7aba6890    48  ldr x16, [x26, #88]
0xffff7aba6894    52  cmp x0, x16
0xffff7aba6898    56  b.eq #+0x10 (addr 0xffff7aba68a8)
0xffff7aba689c    60  add jssp, jssp, #0x10 (16)
0xffff7aba68a0    64  ret
0xffff7aba68a4    68  b #+0x14 (addr 0xffff7aba68b8)
0xffff7aba68a8    72  ldr x0, [jssp], #8
0xffff7aba68ac    76  ldr x3, [jssp], #8
0xffff7aba68b0    80  ldr x16, pc+32 (addr 0x0000ffff7aba68d0)    ;; code: BUILTIN
0xffff7aba68b4    84  br x16
0xffff7aba68b8    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7aba68bc    92  d63f03e0       constant
0xffff7aba68c0    96  20dc5d51       constant
0xffff7aba68c4   100  00000000       constant
0xffff7aba68c8   104  20df4e89       constant
0xffff7aba68cc   108  00000000       constant
0xffff7aba68d0   112  7ab222e0       constant
0xffff7aba68d4   116  0000ffff       constant


RelocInfo (size = 9)
0xffff7aba6870  embedded object  (0x20dc5d51 Cell for 0)
0xffff7aba6880  embedded object  (0x20df4e89 WeakCell for 0x20da8f41 PropertyCell for 0x2ae43859 <an Object with map 0x4ec15031>)
0xffff7aba68b0  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7aba68b8  constant pool (size 32)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7aba6940     0  tbz w0, #0, #+0x98 (addr 0xffff7aba69d8)
0xffff7aba6944     4  mov x2, x0
0xffff7aba6948     8  ldur x4, [x1, #7]
0xffff7aba694c    12  stur x2, [x4, #47]
0xffff7aba6950    16  add x3, x4, #0x2f (47)
0xffff7aba6954    20  and x2, x2, #0xfffffffffff00000
0xffff7aba6958    24  ldr x2, [x2, #8]
0xffff7aba695c    28  tbz w2, #1, #+0x24 (addr 0xffff7aba6980)
0xffff7aba6960    32  and x2, x4, #0xfffffffffff00000
0xffff7aba6964    36  ldr x2, [x2, #8]
0xffff7aba6968    40  tbz w2, #2, #+0x18 (addr 0xffff7aba6980)
0xffff7aba696c    44  sub csp, jssp, #0x8 (8)
0xffff7aba6970    48  str lr, [jssp, #-8]!
0xffff7aba6974    52  ldr x16, pc+84 (addr 0x0000ffff7aba69c8)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7aba6978    56  blr x16
0xffff7aba697c    60  ldr lr, [jssp], #8
0xffff7aba6980    64  stur x5, [x1, #-1]
0xffff7aba6984    68  tbz w5, #0, #+0x34 (addr 0xffff7aba69b8)
0xffff7aba6988    72  sub x2, x1, #0x1 (1)
0xffff7aba698c    76  and x5, x5, #0xfffffffffff00000
0xffff7aba6990    80  ldr x5, [x5, #8]
0xffff7aba6994    84  tbz w5, #1, #+0x24 (addr 0xffff7aba69b8)
0xffff7aba6998    88  and x5, x1, #0xfffffffffff00000
0xffff7aba699c    92  ldr x5, [x5, #8]
0xffff7aba69a0    96  tbz w5, #2, #+0x18 (addr 0xffff7aba69b8)
0xffff7aba69a4   100  sub csp, jssp, #0x8 (8)
0xffff7aba69a8   104  str lr, [jssp, #-8]!
0xffff7aba69ac   108  ldr x16, pc+36 (addr 0x0000ffff7aba69d0)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7aba69b0   112  blr x16
0xffff7aba69b4   116  ldr lr, [jssp], #8
0xffff7aba69b8   120  ret
0xffff7aba69bc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7aba69c0   128  d63f03e0       constant
0xffff7aba69c4   132  d503201f       constant
0xffff7aba69c8   136  7ab378a0       constant
0xffff7aba69cc   140  0000ffff       constant
0xffff7aba69d0   144  7ab38080       constant
0xffff7aba69d4   148  0000ffff       constant
0xffff7aba69d8   152  movz x16, #0x0
0xffff7aba69dc   156  sub csp, jssp, #0x10 (16)
0xffff7aba69e0   160  stp fp, lr, [jssp, #-16]!
0xffff7aba69e4   164  bl #+0x4 (addr 0xffff7aba69e8)
0xffff7aba69e8   168  movz x17, #0xa00000000
0xffff7aba69ec   172  sub csp, jssp, #0x10 (16)
0xffff7aba69f0   176  stp x17, cp, [jssp, #-16]!
0xffff7aba69f4   180  add fp, jssp, #0x10 (16)
0xffff7aba69f8   184  ldr x17, pc+24 (addr 0x0000ffff7aba6a10)    ;; lazy deoptimization bailout 0
0xffff7aba69fc   188  add x17, x17, x16
0xffff7aba6a00   192  br x17
0xffff7aba6a04   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7aba6a08   200  d63f03e0       constant
0xffff7aba6a0c   204  d503201f       constant
0xffff7aba6a10   208  7a906000       constant
0xffff7aba6a14   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7aba6974  code target (STUB)  (0xffff7ab378a0)
0xffff7aba69ac  code target (STUB)  (0xffff7ab38080)
0xffff7aba69bc  constant pool (size 28)
0xffff7aba69f8  runtime entry
0xffff7aba6a04  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7aba6940     0  tbz w0, #0, #+0x98 (addr 0xffff7aba69d8)
0xffff7aba6944     4  mov x2, x0
0xffff7aba6948     8  ldur x4, [x1, #7]
0xffff7aba694c    12  stur x2, [x4, #47]
0xffff7aba6950    16  add x3, x4, #0x2f (47)
0xffff7aba6954    20  and x2, x2, #0xfffffffffff00000
0xffff7aba6958    24  ldr x2, [x2, #8]
0xffff7aba695c    28  tbz w2, #1, #+0x24 (addr 0xffff7aba6980)
0xffff7aba6960    32  and x2, x4, #0xfffffffffff00000
0xffff7aba6964    36  ldr x2, [x2, #8]
0xffff7aba6968    40  tbz w2, #2, #+0x18 (addr 0xffff7aba6980)
0xffff7aba696c    44  sub csp, jssp, #0x8 (8)
0xffff7aba6970    48  str lr, [jssp, #-8]!
0xffff7aba6974    52  ldr x16, pc+84 (addr 0x0000ffff7aba69c8)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7aba6978    56  blr x16
0xffff7aba697c    60  ldr lr, [jssp], #8
0xffff7aba6980    64  stur x5, [x1, #-1]
0xffff7aba6984    68  tbz w5, #0, #+0x34 (addr 0xffff7aba69b8)
0xffff7aba6988    72  sub x2, x1, #0x1 (1)
0xffff7aba698c    76  and x5, x5, #0xfffffffffff00000
0xffff7aba6990    80  ldr x5, [x5, #8]
0xffff7aba6994    84  tbz w5, #1, #+0x24 (addr 0xffff7aba69b8)
0xffff7aba6998    88  and x5, x1, #0xfffffffffff00000
0xffff7aba699c    92  ldr x5, [x5, #8]
0xffff7aba69a0    96  tbz w5, #2, #+0x18 (addr 0xffff7aba69b8)
0xffff7aba69a4   100  sub csp, jssp, #0x8 (8)
0xffff7aba69a8   104  str lr, [jssp, #-8]!
0xffff7aba69ac   108  ldr x16, pc+36 (addr 0x0000ffff7aba69d0)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7aba69b0   112  blr x16
0xffff7aba69b4   116  ldr lr, [jssp], #8
0xffff7aba69b8   120  ret
0xffff7aba69bc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7aba69c0   128  d63f03e0       constant
0xffff7aba69c4   132  d503201f       constant
0xffff7aba69c8   136  7ab378a0       constant
0xffff7aba69cc   140  0000ffff       constant
0xffff7aba69d0   144  7ab38080       constant
0xffff7aba69d4   148  0000ffff       constant
0xffff7aba69d8   152  movz x16, #0x0
0xffff7aba69dc   156  sub csp, jssp, #0x10 (16)
0xffff7aba69e0   160  stp fp, lr, [jssp, #-16]!
0xffff7aba69e4   164  bl #+0x4 (addr 0xffff7aba69e8)
0xffff7aba69e8   168  movz x17, #0xa00000000
0xffff7aba69ec   172  sub csp, jssp, #0x10 (16)
0xffff7aba69f0   176  stp x17, cp, [jssp, #-16]!
0xffff7aba69f4   180  add fp, jssp, #0x10 (16)
0xffff7aba69f8   184  ldr x17, pc+24 (addr 0x0000ffff7aba6a10)    ;; lazy deoptimization bailout 0
0xffff7aba69fc   188  add x17, x17, x16
0xffff7aba6a00   192  br x17
0xffff7aba6a04   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7aba6a08   200  d63f03e0       constant
0xffff7aba6a0c   204  d503201f       constant
0xffff7aba6a10   208  7a906000       constant
0xffff7aba6a14   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7aba6974  code target (STUB)  (0xffff7ab378a0)
0xffff7aba69ac  code target (STUB)  (0xffff7ab38080)
0xffff7aba69bc  constant pool (size 28)
0xffff7aba69f8  runtime entry
0xffff7aba6a04  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = internal/process/warning
compiler = unknown
Instructions (size = 184)
0xffff7aba6a80     0  sub csp, jssp, #0x8 (8)
0xffff7aba6a84     4  str x3, [jssp, #-8]!
0xffff7aba6a88     8  sub csp, jssp, #0x8 (8)
0xffff7aba6a8c    12  str x4, [jssp, #-8]!
0xffff7aba6a90    16  ldr x3, pc+112 (addr 0x0000ffff7aba6b00)    ;; object: 0x20d63e59 Cell for 0
0xffff7aba6a94    20  ldur x3, [x3, #7]
0xffff7aba6a98    24  cmp x3, #0x0 (0)
0xffff7aba6a9c    28  b.ne #+0x44 (addr 0xffff7aba6ae0)
0xffff7aba6aa0    32  tbz w0, #0, #+0x40 (addr 0xffff7aba6ae0)
0xffff7aba6aa4    36  ldur x3, [x0, #-1]
0xffff7aba6aa8    40  ldr x4, pc+96 (addr 0x0000ffff7aba6b08)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7aba6aac    44  ldur x4, [x4, #7]
0xffff7aba6ab0    48  cmp x3, x4
0xffff7aba6ab4    52  b.ne #+0x2c (addr 0xffff7aba6ae0)
0xffff7aba6ab8    56  ldr x5, pc+88 (addr 0x0000ffff7aba6b10)    ;; object: 0x20df4fd1 WeakCell for 0x4ec27a91 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7aba6abc    60  ldur x5, [x5, #7]
0xffff7aba6ac0    64  tbz w5, #0, #+0x20 (addr 0xffff7aba6ae0)
0xffff7aba6ac4    68  ldursw x4, [x5, #15]
0xffff7aba6ac8    72  tbnz w4, #23, #+0x18 (addr 0xffff7aba6ae0)
0xffff7aba6acc    76  ldr x4, [jssp], #8
0xffff7aba6ad0    80  ldr x3, [jssp], #8
0xffff7aba6ad4    84  ldr x2, pc+68 (addr 0x0000ffff7aba6b18)    ;; object: 0x20db9731 <String[24]: internal/process/warning>
0xffff7aba6ad8    88  ldr x16, pc+72 (addr 0x0000ffff7aba6b20)    ;; code: HANDLER, StoreTransitionStub, minor: 196614
0xffff7aba6adc    92  br x16
0xffff7aba6ae0    96  ldr x2, pc+72 (addr 0x0000ffff7aba6b28)    ;; object: 0x20db9731 <String[24]: internal/process/warning>
0xffff7aba6ae4   100  ldr x4, [jssp], #8
0xffff7aba6ae8   104  ldr x3, [jssp], #8
0xffff7aba6aec   108  ldr x16, pc+68 (addr 0x0000ffff7aba6b30)    ;; code: BUILTIN
0xffff7aba6af0   112  br x16
0xffff7aba6af4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7aba6af8   120  d63f03e0       constant
0xffff7aba6afc   124  d503201f       constant
0xffff7aba6b00   128  20d63e59       constant
0xffff7aba6b04   132  00000000       constant
0xffff7aba6b08   136  20dc22b1       constant
0xffff7aba6b0c   140  00000000       constant
0xffff7aba6b10   144  20df4fd1       constant
0xffff7aba6b14   148  00000000       constant
0xffff7aba6b18   152  20db9731       constant
0xffff7aba6b1c   156  00000000       constant
0xffff7aba6b20   160  7aba6940       constant
0xffff7aba6b24   164  0000ffff       constant
0xffff7aba6b28   168  20db9731       constant
0xffff7aba6b2c   172  00000000       constant
0xffff7aba6b30   176  7ab22420       constant
0xffff7aba6b34   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7aba6a90  embedded object  (0x20d63e59 Cell for 0)
0xffff7aba6aa8  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7aba6ab8  embedded object  (0x20df4fd1 WeakCell for 0x4ec27a91 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7aba6ad4  embedded object  (0x20db9731 <String[24]: internal/process/warning>)
0xffff7aba6ad8  code target (HANDLER)  (0xffff7aba6940)
0xffff7aba6ae0  embedded object  (0x20db9731 <String[24]: internal/process/warning>)
0xffff7aba6aec  code target (BUILTIN)  (0xffff7ab22420)
0xffff7aba6af4  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7aba87a0     0  tbz w0, #0, #+0x98 (addr 0xffff7aba8838)
0xffff7aba87a4     4  mov x2, x0
0xffff7aba87a8     8  ldur x4, [x1, #7]
0xffff7aba87ac    12  stur x2, [x4, #55]
0xffff7aba87b0    16  add x3, x4, #0x37 (55)
0xffff7aba87b4    20  and x2, x2, #0xfffffffffff00000
0xffff7aba87b8    24  ldr x2, [x2, #8]
0xffff7aba87bc    28  tbz w2, #1, #+0x24 (addr 0xffff7aba87e0)
0xffff7aba87c0    32  and x2, x4, #0xfffffffffff00000
0xffff7aba87c4    36  ldr x2, [x2, #8]
0xffff7aba87c8    40  tbz w2, #2, #+0x18 (addr 0xffff7aba87e0)
0xffff7aba87cc    44  sub csp, jssp, #0x8 (8)
0xffff7aba87d0    48  str lr, [jssp, #-8]!
0xffff7aba87d4    52  ldr x16, pc+84 (addr 0x0000ffff7aba8828)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7aba87d8    56  blr x16
0xffff7aba87dc    60  ldr lr, [jssp], #8
0xffff7aba87e0    64  stur x5, [x1, #-1]
0xffff7aba87e4    68  tbz w5, #0, #+0x34 (addr 0xffff7aba8818)
0xffff7aba87e8    72  sub x2, x1, #0x1 (1)
0xffff7aba87ec    76  and x5, x5, #0xfffffffffff00000
0xffff7aba87f0    80  ldr x5, [x5, #8]
0xffff7aba87f4    84  tbz w5, #1, #+0x24 (addr 0xffff7aba8818)
0xffff7aba87f8    88  and x5, x1, #0xfffffffffff00000
0xffff7aba87fc    92  ldr x5, [x5, #8]
0xffff7aba8800    96  tbz w5, #2, #+0x18 (addr 0xffff7aba8818)
0xffff7aba8804   100  sub csp, jssp, #0x8 (8)
0xffff7aba8808   104  str lr, [jssp, #-8]!
0xffff7aba880c   108  ldr x16, pc+36 (addr 0x0000ffff7aba8830)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7aba8810   112  blr x16
0xffff7aba8814   116  ldr lr, [jssp], #8
0xffff7aba8818   120  ret
0xffff7aba881c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7aba8820   128  d63f03e0       constant
0xffff7aba8824   132  d503201f       constant
0xffff7aba8828   136  7ab378a0       constant
0xffff7aba882c   140  0000ffff       constant
0xffff7aba8830   144  7ab38080       constant
0xffff7aba8834   148  0000ffff       constant
0xffff7aba8838   152  movz x16, #0x0
0xffff7aba883c   156  sub csp, jssp, #0x10 (16)
0xffff7aba8840   160  stp fp, lr, [jssp, #-16]!
0xffff7aba8844   164  bl #+0x4 (addr 0xffff7aba8848)
0xffff7aba8848   168  movz x17, #0xa00000000
0xffff7aba884c   172  sub csp, jssp, #0x10 (16)
0xffff7aba8850   176  stp x17, cp, [jssp, #-16]!
0xffff7aba8854   180  add fp, jssp, #0x10 (16)
0xffff7aba8858   184  ldr x17, pc+24 (addr 0x0000ffff7aba8870)    ;; lazy deoptimization bailout 0
0xffff7aba885c   188  add x17, x17, x16
0xffff7aba8860   192  br x17
0xffff7aba8864   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7aba8868   200  d63f03e0       constant
0xffff7aba886c   204  d503201f       constant
0xffff7aba8870   208  7a906000       constant
0xffff7aba8874   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7aba87d4  code target (STUB)  (0xffff7ab378a0)
0xffff7aba880c  code target (STUB)  (0xffff7ab38080)
0xffff7aba881c  constant pool (size 28)
0xffff7aba8858  runtime entry
0xffff7aba8864  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7aba87a0     0  tbz w0, #0, #+0x98 (addr 0xffff7aba8838)
0xffff7aba87a4     4  mov x2, x0
0xffff7aba87a8     8  ldur x4, [x1, #7]
0xffff7aba87ac    12  stur x2, [x4, #55]
0xffff7aba87b0    16  add x3, x4, #0x37 (55)
0xffff7aba87b4    20  and x2, x2, #0xfffffffffff00000
0xffff7aba87b8    24  ldr x2, [x2, #8]
0xffff7aba87bc    28  tbz w2, #1, #+0x24 (addr 0xffff7aba87e0)
0xffff7aba87c0    32  and x2, x4, #0xfffffffffff00000
0xffff7aba87c4    36  ldr x2, [x2, #8]
0xffff7aba87c8    40  tbz w2, #2, #+0x18 (addr 0xffff7aba87e0)
0xffff7aba87cc    44  sub csp, jssp, #0x8 (8)
0xffff7aba87d0    48  str lr, [jssp, #-8]!
0xffff7aba87d4    52  ldr x16, pc+84 (addr 0x0000ffff7aba8828)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7aba87d8    56  blr x16
0xffff7aba87dc    60  ldr lr, [jssp], #8
0xffff7aba87e0    64  stur x5, [x1, #-1]
0xffff7aba87e4    68  tbz w5, #0, #+0x34 (addr 0xffff7aba8818)
0xffff7aba87e8    72  sub x2, x1, #0x1 (1)
0xffff7aba87ec    76  and x5, x5, #0xfffffffffff00000
0xffff7aba87f0    80  ldr x5, [x5, #8]
0xffff7aba87f4    84  tbz w5, #1, #+0x24 (addr 0xffff7aba8818)
0xffff7aba87f8    88  and x5, x1, #0xfffffffffff00000
0xffff7aba87fc    92  ldr x5, [x5, #8]
0xffff7aba8800    96  tbz w5, #2, #+0x18 (addr 0xffff7aba8818)
0xffff7aba8804   100  sub csp, jssp, #0x8 (8)
0xffff7aba8808   104  str lr, [jssp, #-8]!
0xffff7aba880c   108  ldr x16, pc+36 (addr 0x0000ffff7aba8830)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7aba8810   112  blr x16
0xffff7aba8814   116  ldr lr, [jssp], #8
0xffff7aba8818   120  ret
0xffff7aba881c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7aba8820   128  d63f03e0       constant
0xffff7aba8824   132  d503201f       constant
0xffff7aba8828   136  7ab378a0       constant
0xffff7aba882c   140  0000ffff       constant
0xffff7aba8830   144  7ab38080       constant
0xffff7aba8834   148  0000ffff       constant
0xffff7aba8838   152  movz x16, #0x0
0xffff7aba883c   156  sub csp, jssp, #0x10 (16)
0xffff7aba8840   160  stp fp, lr, [jssp, #-16]!
0xffff7aba8844   164  bl #+0x4 (addr 0xffff7aba8848)
0xffff7aba8848   168  movz x17, #0xa00000000
0xffff7aba884c   172  sub csp, jssp, #0x10 (16)
0xffff7aba8850   176  stp x17, cp, [jssp, #-16]!
0xffff7aba8854   180  add fp, jssp, #0x10 (16)
0xffff7aba8858   184  ldr x17, pc+24 (addr 0x0000ffff7aba8870)    ;; lazy deoptimization bailout 0
0xffff7aba885c   188  add x17, x17, x16
0xffff7aba8860   192  br x17
0xffff7aba8864   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7aba8868   200  d63f03e0       constant
0xffff7aba886c   204  d503201f       constant
0xffff7aba8870   208  7a906000       constant
0xffff7aba8874   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7aba87d4  code target (STUB)  (0xffff7ab378a0)
0xffff7aba880c  code target (STUB)  (0xffff7ab38080)
0xffff7aba881c  constant pool (size 28)
0xffff7aba8858  runtime entry
0xffff7aba8864  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = internal/process/next_tick
compiler = unknown
Instructions (size = 184)
0xffff7aba88e0     0  sub csp, jssp, #0x8 (8)
0xffff7aba88e4     4  str x3, [jssp, #-8]!
0xffff7aba88e8     8  sub csp, jssp, #0x8 (8)
0xffff7aba88ec    12  str x4, [jssp, #-8]!
0xffff7aba88f0    16  ldr x3, pc+112 (addr 0x0000ffff7aba8960)    ;; object: 0x20d63e59 Cell for 0
0xffff7aba88f4    20  ldur x3, [x3, #7]
0xffff7aba88f8    24  cmp x3, #0x0 (0)
0xffff7aba88fc    28  b.ne #+0x44 (addr 0xffff7aba8940)
0xffff7aba8900    32  tbz w0, #0, #+0x40 (addr 0xffff7aba8940)
0xffff7aba8904    36  ldur x3, [x0, #-1]
0xffff7aba8908    40  ldr x4, pc+96 (addr 0x0000ffff7aba8968)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7aba890c    44  ldur x4, [x4, #7]
0xffff7aba8910    48  cmp x3, x4
0xffff7aba8914    52  b.ne #+0x2c (addr 0xffff7aba8940)
0xffff7aba8918    56  ldr x5, pc+88 (addr 0x0000ffff7aba8970)    ;; object: 0x20df6569 WeakCell for 0x4ec27b99 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7aba891c    60  ldur x5, [x5, #7]
0xffff7aba8920    64  tbz w5, #0, #+0x20 (addr 0xffff7aba8940)
0xffff7aba8924    68  ldursw x4, [x5, #15]
0xffff7aba8928    72  tbnz w4, #23, #+0x18 (addr 0xffff7aba8940)
0xffff7aba892c    76  ldr x4, [jssp], #8
0xffff7aba8930    80  ldr x3, [jssp], #8
0xffff7aba8934    84  ldr x2, pc+68 (addr 0x0000ffff7aba8978)    ;; object: 0x20db9781 <String[26]: internal/process/next_tick>
0xffff7aba8938    88  ldr x16, pc+72 (addr 0x0000ffff7aba8980)    ;; code: HANDLER, StoreTransitionStub, minor: 196615
0xffff7aba893c    92  br x16
0xffff7aba8940    96  ldr x2, pc+72 (addr 0x0000ffff7aba8988)    ;; object: 0x20db9781 <String[26]: internal/process/next_tick>
0xffff7aba8944   100  ldr x4, [jssp], #8
0xffff7aba8948   104  ldr x3, [jssp], #8
0xffff7aba894c   108  ldr x16, pc+68 (addr 0x0000ffff7aba8990)    ;; code: BUILTIN
0xffff7aba8950   112  br x16
0xffff7aba8954   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7aba8958   120  d63f03e0       constant
0xffff7aba895c   124  d503201f       constant
0xffff7aba8960   128  20d63e59       constant
0xffff7aba8964   132  00000000       constant
0xffff7aba8968   136  20dc22b1       constant
0xffff7aba896c   140  00000000       constant
0xffff7aba8970   144  20df6569       constant
0xffff7aba8974   148  00000000       constant
0xffff7aba8978   152  20db9781       constant
0xffff7aba897c   156  00000000       constant
0xffff7aba8980   160  7aba87a0       constant
0xffff7aba8984   164  0000ffff       constant
0xffff7aba8988   168  20db9781       constant
0xffff7aba898c   172  00000000       constant
0xffff7aba8990   176  7ab22420       constant
0xffff7aba8994   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7aba88f0  embedded object  (0x20d63e59 Cell for 0)
0xffff7aba8908  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7aba8918  embedded object  (0x20df6569 WeakCell for 0x4ec27b99 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7aba8934  embedded object  (0x20db9781 <String[26]: internal/process/next_tick>)
0xffff7aba8938  code target (HANDLER)  (0xffff7aba87a0)
0xffff7aba8940  embedded object  (0x20db9781 <String[26]: internal/process/next_tick>)
0xffff7aba894c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7aba8954  constant pool (size 68)

--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 429)
0xffff7aba8d60     0  movz x2, #0xe2c0
0xffff7aba8d64     4  movk x2, #0x9ab, lsl #16
0xffff7aba8d68     8  ldp x3, x0, [x2]
0xffff7aba8d6c    12  adds x16, x3, #0x88 (136)
0xffff7aba8d70    16  ccmp x16, x0, #nzCv, lo
0xffff7aba8d74    20  b.hi #+0x94 (addr 0xffff7aba8e08)
0xffff7aba8d78    24  str x16, [x2]
0xffff7aba8d7c    28  orr x3, x3, #0x1
0xffff7aba8d80    32  ldr x0, pc+248 (addr 0x0000ffff7aba8e78)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7aba8d84    36  stur x0, [x3, #-1]
0xffff7aba8d88    40  movz x0, #0xf00000000
0xffff7aba8d8c    44  stur x0, [x3, #7]
0xffff7aba8d90    48  stur x1, [x3, #15]
0xffff7aba8d94    52  stur cp, [x3, #23]
0xffff7aba8d98    56  ldr x0, pc+232 (addr 0x0000ffff7aba8e80)    ;; object: 0x20d04519 <the hole>
0xffff7aba8d9c    60  stur x0, [x3, #31]
0xffff7aba8da0    64  ldur x0, [cp, #39]
0xffff7aba8da4    68  stur x0, [x3, #39]
0xffff7aba8da8    72  ldr x0, pc+224 (addr 0x0000ffff7aba8e88)    ;; object: 0x20d04241 <undefined>
0xffff7aba8dac    76  stur x0, [x3, #47]
0xffff7aba8db0    80  ldr x0, pc+224 (addr 0x0000ffff7aba8e90)    ;; object: 0x20d04241 <undefined>
0xffff7aba8db4    84  stur x0, [x3, #55]
0xffff7aba8db8    88  ldr x0, pc+224 (addr 0x0000ffff7aba8e98)    ;; object: 0x20d04241 <undefined>
0xffff7aba8dbc    92  stur x0, [x3, #63]
0xffff7aba8dc0    96  ldr x0, pc+224 (addr 0x0000ffff7aba8ea0)    ;; object: 0x20d04241 <undefined>
0xffff7aba8dc4   100  stur x0, [x3, #71]
0xffff7aba8dc8   104  ldr x0, pc+224 (addr 0x0000ffff7aba8ea8)    ;; object: 0x20d04241 <undefined>
0xffff7aba8dcc   108  stur x0, [x3, #79]
0xffff7aba8dd0   112  ldr x0, pc+224 (addr 0x0000ffff7aba8eb0)    ;; object: 0x20d04241 <undefined>
0xffff7aba8dd4   116  stur x0, [x3, #87]
0xffff7aba8dd8   120  ldr x0, pc+224 (addr 0x0000ffff7aba8eb8)    ;; object: 0x20d04241 <undefined>
0xffff7aba8ddc   124  stur x0, [x3, #95]
0xffff7aba8de0   128  ldr x0, pc+224 (addr 0x0000ffff7aba8ec0)    ;; object: 0x20d04241 <undefined>
0xffff7aba8de4   132  stur x0, [x3, #103]
0xffff7aba8de8   136  ldr x0, pc+224 (addr 0x0000ffff7aba8ec8)    ;; object: 0x20d04241 <undefined>
0xffff7aba8dec   140  stur x0, [x3, #111]
0xffff7aba8df0   144  ldr x0, pc+224 (addr 0x0000ffff7aba8ed0)    ;; object: 0x20d04241 <undefined>
0xffff7aba8df4   148  stur x0, [x3, #119]
0xffff7aba8df8   152  ldr x0, pc+224 (addr 0x0000ffff7aba8ed8)    ;; object: 0x20d04241 <undefined>
0xffff7aba8dfc   156  stur x0, [x3, #127]
0xffff7aba8e00   160  mov x0, x3
0xffff7aba8e04   164  ret
0xffff7aba8e08   168  sub csp, jssp, #0x10 (16)
0xffff7aba8e0c   172  stp fp, lr, [jssp, #-16]!
0xffff7aba8e10   176  movz fp, #0xa00000000
0xffff7aba8e14   180  sub csp, jssp, #0x8 (8)
0xffff7aba8e18   184  str fp, [jssp, #-8]!
0xffff7aba8e1c   188  add fp, jssp, #0x8 (8)
0xffff7aba8e20   192  movz x3, #0x0
0xffff7aba8e24   196  mov x16, lr
0xffff7aba8e28   200  ldr x17, pc+184 (addr 0x0000ffff7aba8ee0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7aba8e2c   204  blr x17
0xffff7aba8e30   208  movz x0, #0x8800000000
0xffff7aba8e34   212  movz x10, #0x0
0xffff7aba8e38   216  sub csp, jssp, #0x10 (16)
0xffff7aba8e3c   220  stp x10, x0, [jssp, #-16]!
0xffff7aba8e40   224  movz x0, #0x2
0xffff7aba8e44   228  movz x1, #0x5b88
0xffff7aba8e48   232  movk x1, #0xe2, lsl #16
0xffff7aba8e4c   236  ldr x16, pc+156 (addr 0x0000ffff7aba8ee8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7aba8e50   240  blr x16
0xffff7aba8e54   244  str x0, [jssp, #24]
0xffff7aba8e58   248  ldr x16, pc+152 (addr 0x0000ffff7aba8ef0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7aba8e5c   252  blr x16
0xffff7aba8e60   256  ldr lr, [jssp, #16]
0xffff7aba8e64   260  ldp xzr, fp, [jssp], #24
0xffff7aba8e68   264  b #-0xe8 (addr 0xffff7aba8d80)
0xffff7aba8e6c   268  5800045f       constant pool begin (num_const = 34)    ;; constant pool
0xffff7aba8e70   272  d63f03e0       constant
0xffff7aba8e74   276  d503201f       constant
0xffff7aba8e78   280  4ec06149       constant
0xffff7aba8e7c   284  00000000       constant
0xffff7aba8e80   288  20d04519       constant
0xffff7aba8e84   292  00000000       constant
0xffff7aba8e88   296  20d04241       constant
0xffff7aba8e8c   300  00000000       constant
0xffff7aba8e90   304  20d04241       constant
0xffff7aba8e94   308  00000000       constant
0xffff7aba8e98   312  20d04241       constant
0xffff7aba8e9c   316  00000000       constant
0xffff7aba8ea0   320  20d04241       constant
0xffff7aba8ea4   324  00000000       constant
0xffff7aba8ea8   328  20d04241       constant
0xffff7aba8eac   332  00000000       constant
0xffff7aba8eb0   336  20d04241       constant
0xffff7aba8eb4   340  00000000       constant
0xffff7aba8eb8   344  20d04241       constant
0xffff7aba8ebc   348  00000000       constant
0xffff7aba8ec0   352  20d04241       constant
0xffff7aba8ec4   356  00000000       constant
0xffff7aba8ec8   360  20d04241       constant
0xffff7aba8ecc   364  00000000       constant
0xffff7aba8ed0   368  20d04241       constant
0xffff7aba8ed4   372  00000000       constant
0xffff7aba8ed8   376  20d04241       constant
0xffff7aba8edc   380  00000000       constant
0xffff7aba8ee0   384  7ab06820       constant
0xffff7aba8ee4   388  0000ffff       constant
0xffff7aba8ee8   392  7ab06260       constant
0xffff7aba8eec   396  0000ffff       constant
0xffff7aba8ef0   400  7ab068e0       constant
0xffff7aba8ef4   404  0000ffff       constant


Safepoints (size = 21)
0xffff7aba8e54   244  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 22)
0xffff7aba8d80  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7aba8d98  embedded object  (0x20d04519 <the hole>)
0xffff7aba8da8  embedded object  (0x20d04241 <undefined>)
0xffff7aba8db0  embedded object  (0x20d04241 <undefined>)
0xffff7aba8db8  embedded object  (0x20d04241 <undefined>)
0xffff7aba8dc0  embedded object  (0x20d04241 <undefined>)
0xffff7aba8dc8  embedded object  (0x20d04241 <undefined>)
0xffff7aba8dd0  embedded object  (0x20d04241 <undefined>)
0xffff7aba8dd8  embedded object  (0x20d04241 <undefined>)
0xffff7aba8de0  embedded object  (0x20d04241 <undefined>)
0xffff7aba8de8  embedded object  (0x20d04241 <undefined>)
0xffff7aba8df0  embedded object  (0x20d04241 <undefined>)
0xffff7aba8df8  embedded object  (0x20d04241 <undefined>)
0xffff7aba8e28  code target (STUB)  (0xffff7ab06820)
0xffff7aba8e4c  code target (STUB)  (0xffff7ab06260)
0xffff7aba8e58  code target (STUB)  (0xffff7ab068e0)
0xffff7aba8e6c  constant pool (size 140)

--- End code ---
kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 429)
0xffff7aba8d60     0  movz x2, #0xe2c0
0xffff7aba8d64     4  movk x2, #0x9ab, lsl #16
0xffff7aba8d68     8  ldp x3, x0, [x2]
0xffff7aba8d6c    12  adds x16, x3, #0x88 (136)
0xffff7aba8d70    16  ccmp x16, x0, #nzCv, lo
0xffff7aba8d74    20  b.hi #+0x94 (addr 0xffff7aba8e08)
0xffff7aba8d78    24  str x16, [x2]
0xffff7aba8d7c    28  orr x3, x3, #0x1
0xffff7aba8d80    32  ldr x0, pc+248 (addr 0x0000ffff7aba8e78)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7aba8d84    36  stur x0, [x3, #-1]
0xffff7aba8d88    40  movz x0, #0xf00000000
0xffff7aba8d8c    44  stur x0, [x3, #7]
0xffff7aba8d90    48  stur x1, [x3, #15]
0xffff7aba8d94    52  stur cp, [x3, #23]
0xffff7aba8d98    56  ldr x0, pc+232 (addr 0x0000ffff7aba8e80)    ;; object: 0x20d04519 <the hole>
0xffff7aba8d9c    60  stur x0, [x3, #31]
0xffff7aba8da0    64  ldur x0, [cp, #39]
0xffff7aba8da4    68  stur x0, [x3, #39]
0xffff7aba8da8    72  ldr x0, pc+224 (addr 0x0000ffff7aba8e88)    ;; object: 0x20d04241 <undefined>
0xffff7aba8dac    76  stur x0, [x3, #47]
0xffff7aba8db0    80  ldr x0, pc+224 (addr 0x0000ffff7aba8e90)    ;; object: 0x20d04241 <undefined>
0xffff7aba8db4    84  stur x0, [x3, #55]
0xffff7aba8db8    88  ldr x0, pc+224 (addr 0x0000ffff7aba8e98)    ;; object: 0x20d04241 <undefined>
0xffff7aba8dbc    92  stur x0, [x3, #63]
0xffff7aba8dc0    96  ldr x0, pc+224 (addr 0x0000ffff7aba8ea0)    ;; object: 0x20d04241 <undefined>
0xffff7aba8dc4   100  stur x0, [x3, #71]
0xffff7aba8dc8   104  ldr x0, pc+224 (addr 0x0000ffff7aba8ea8)    ;; object: 0x20d04241 <undefined>
0xffff7aba8dcc   108  stur x0, [x3, #79]
0xffff7aba8dd0   112  ldr x0, pc+224 (addr 0x0000ffff7aba8eb0)    ;; object: 0x20d04241 <undefined>
0xffff7aba8dd4   116  stur x0, [x3, #87]
0xffff7aba8dd8   120  ldr x0, pc+224 (addr 0x0000ffff7aba8eb8)    ;; object: 0x20d04241 <undefined>
0xffff7aba8ddc   124  stur x0, [x3, #95]
0xffff7aba8de0   128  ldr x0, pc+224 (addr 0x0000ffff7aba8ec0)    ;; object: 0x20d04241 <undefined>
0xffff7aba8de4   132  stur x0, [x3, #103]
0xffff7aba8de8   136  ldr x0, pc+224 (addr 0x0000ffff7aba8ec8)    ;; object: 0x20d04241 <undefined>
0xffff7aba8dec   140  stur x0, [x3, #111]
0xffff7aba8df0   144  ldr x0, pc+224 (addr 0x0000ffff7aba8ed0)    ;; object: 0x20d04241 <undefined>
0xffff7aba8df4   148  stur x0, [x3, #119]
0xffff7aba8df8   152  ldr x0, pc+224 (addr 0x0000ffff7aba8ed8)    ;; object: 0x20d04241 <undefined>
0xffff7aba8dfc   156  stur x0, [x3, #127]
0xffff7aba8e00   160  mov x0, x3
0xffff7aba8e04   164  ret
0xffff7aba8e08   168  sub csp, jssp, #0x10 (16)
0xffff7aba8e0c   172  stp fp, lr, [jssp, #-16]!
0xffff7aba8e10   176  movz fp, #0xa00000000
0xffff7aba8e14   180  sub csp, jssp, #0x8 (8)
0xffff7aba8e18   184  str fp, [jssp, #-8]!
0xffff7aba8e1c   188  add fp, jssp, #0x8 (8)
0xffff7aba8e20   192  movz x3, #0x0
0xffff7aba8e24   196  mov x16, lr
0xffff7aba8e28   200  ldr x17, pc+184 (addr 0x0000ffff7aba8ee0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7aba8e2c   204  blr x17
0xffff7aba8e30   208  movz x0, #0x8800000000
0xffff7aba8e34   212  movz x10, #0x0
0xffff7aba8e38   216  sub csp, jssp, #0x10 (16)
0xffff7aba8e3c   220  stp x10, x0, [jssp, #-16]!
0xffff7aba8e40   224  movz x0, #0x2
0xffff7aba8e44   228  movz x1, #0x5b88
0xffff7aba8e48   232  movk x1, #0xe2, lsl #16
0xffff7aba8e4c   236  ldr x16, pc+156 (addr 0x0000ffff7aba8ee8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7aba8e50   240  blr x16
0xffff7aba8e54   244  str x0, [jssp, #24]
0xffff7aba8e58   248  ldr x16, pc+152 (addr 0x0000ffff7aba8ef0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7aba8e5c   252  blr x16
0xffff7aba8e60   256  ldr lr, [jssp, #16]
0xffff7aba8e64   260  ldp xzr, fp, [jssp], #24
0xffff7aba8e68   264  b #-0xe8 (addr 0xffff7aba8d80)
0xffff7aba8e6c   268  5800045f       constant pool begin (num_const = 34)    ;; constant pool
0xffff7aba8e70   272  d63f03e0       constant
0xffff7aba8e74   276  d503201f       constant
0xffff7aba8e78   280  4ec06149       constant
0xffff7aba8e7c   284  00000000       constant
0xffff7aba8e80   288  20d04519       constant
0xffff7aba8e84   292  00000000       constant
0xffff7aba8e88   296  20d04241       constant
0xffff7aba8e8c   300  00000000       constant
0xffff7aba8e90   304  20d04241       constant
0xffff7aba8e94   308  00000000       constant
0xffff7aba8e98   312  20d04241       constant
0xffff7aba8e9c   316  00000000       constant
0xffff7aba8ea0   320  20d04241       constant
0xffff7aba8ea4   324  00000000       constant
0xffff7aba8ea8   328  20d04241       constant
0xffff7aba8eac   332  00000000       constant
0xffff7aba8eb0   336  20d04241       constant
0xffff7aba8eb4   340  00000000       constant
0xffff7aba8eb8   344  20d04241       constant
0xffff7aba8ebc   348  00000000       constant
0xffff7aba8ec0   352  20d04241       constant
0xffff7aba8ec4   356  00000000       constant
0xffff7aba8ec8   360  20d04241       constant
0xffff7aba8ecc   364  00000000       constant
0xffff7aba8ed0   368  20d04241       constant
0xffff7aba8ed4   372  00000000       constant
0xffff7aba8ed8   376  20d04241       constant
0xffff7aba8edc   380  00000000       constant
0xffff7aba8ee0   384  7ab06820       constant
0xffff7aba8ee4   388  0000ffff       constant
0xffff7aba8ee8   392  7ab06260       constant
0xffff7aba8eec   396  0000ffff       constant
0xffff7aba8ef0   400  7ab068e0       constant
0xffff7aba8ef4   404  0000ffff       constant


Safepoints (size = 21)
0xffff7aba8e54   244  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 22)
0xffff7aba8d80  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7aba8d98  embedded object  (0x20d04519 <the hole>)
0xffff7aba8da8  embedded object  (0x20d04241 <undefined>)
0xffff7aba8db0  embedded object  (0x20d04241 <undefined>)
0xffff7aba8db8  embedded object  (0x20d04241 <undefined>)
0xffff7aba8dc0  embedded object  (0x20d04241 <undefined>)
0xffff7aba8dc8  embedded object  (0x20d04241 <undefined>)
0xffff7aba8dd0  embedded object  (0x20d04241 <undefined>)
0xffff7aba8dd8  embedded object  (0x20d04241 <undefined>)
0xffff7aba8de0  embedded object  (0x20d04241 <undefined>)
0xffff7aba8de8  embedded object  (0x20d04241 <undefined>)
0xffff7aba8df0  embedded object  (0x20d04241 <undefined>)
0xffff7aba8df8  embedded object  (0x20d04241 <undefined>)
0xffff7aba8e28  code target (STUB)  (0xffff7ab06820)
0xffff7aba8e4c  code target (STUB)  (0xffff7ab06260)
0xffff7aba8e58  code target (STUB)  (0xffff7ab068e0)
0xffff7aba8e6c  constant pool (size 140)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0xffff7aba9780     0  ldur x6, [x1, #7]
0xffff7aba9784     4  ldur w7, [x6, #11]
0xffff7aba9788     8  adds w8, w7, #0x3 (3)
0xffff7aba978c    12  b.vs #+0x1dc (addr 0xffff7aba9968)
0xffff7aba9790    16  movz w16, #0x95ff
0xffff7aba9794    20  cmp w8, w16, lsl #1
0xffff7aba9798    24  b.hs #+0x1e0 (addr 0xffff7aba9978)
0xffff7aba979c    28  lsl x9, x8, #32
0xffff7aba97a0    32  lsl w10, w8, #3
0xffff7aba97a4    36  add w10, w10, #0x10 (16)
0xffff7aba97a8    40  sxtw x10, w10
0xffff7aba97ac    44  movz x11, #0xe2c0
0xffff7aba97b0    48  movk x11, #0x9ab, lsl #16
0xffff7aba97b4    52  ldp x13, x16, [x11]
0xffff7aba97b8    56  adds x12, x13, x10
0xffff7aba97bc    60  ccmp x12, x16, #nzCv, lo
0xffff7aba97c0    64  b.hi #+0xf8 (addr 0xffff7aba98b8)
0xffff7aba97c4    68  str x12, [x11]
0xffff7aba97c8    72  orr x13, x13, #0x1
0xffff7aba97cc    76  ldr x10, pc+348 (addr 0x0000ffff7aba9928)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7aba97d0    80  stur x10, [x13, #-1]
0xffff7aba97d4    84  stur x9, [x13, #7]
0xffff7aba97d8    88  cmp w7, w8
0xffff7aba97dc    92  b.ge #+0x18 (addr 0xffff7aba97f4)
0xffff7aba97e0    96  sub w8, w8, #0x1 (1)
0xffff7aba97e4   100  ldr x9, pc+332 (addr 0x0000ffff7aba9930)    ;; object: 0x20d04241 <undefined>
0xffff7aba97e8   104  add x10, x13, #0xf (15)
0xffff7aba97ec   108  str x9, [x10, w8, sxtw #3]
0xffff7aba97f0   112  b #-0x18 (addr 0xffff7aba97d8)
0xffff7aba97f4   116  cmp w7, #0x0 (0)
0xffff7aba97f8   120  b.le #+0x1c (addr 0xffff7aba9814)
0xffff7aba97fc   124  sub w7, w7, #0x1 (1)
0xffff7aba9800   128  add x8, x6, #0xf (15)
0xffff7aba9804   132  ldr x9, [x8, w7, sxtw #3]
0xffff7aba9808   136  add x8, x13, #0xf (15)
0xffff7aba980c   140  str x9, [x8, w7, sxtw #3]
0xffff7aba9810   144  b #-0x1c (addr 0xffff7aba97f4)
0xffff7aba9814   148  stur x13, [x1, #7]
0xffff7aba9818   152  add x6, x1, #0x7 (7)
0xffff7aba981c   156  and x13, x1, #0xfffffffffff00000
0xffff7aba9820   160  ldr x13, [x13, #8]
0xffff7aba9824   164  tbz w13, #2, #+0x18 (addr 0xffff7aba983c)
0xffff7aba9828   168  sub csp, jssp, #0x8 (8)
0xffff7aba982c   172  str lr, [jssp, #-8]!
0xffff7aba9830   176  ldr x16, pc+264 (addr 0x0000ffff7aba9938)    ;; code: STUB, RecordWriteStub, minor: 72097
0xffff7aba9834   180  blr x16
0xffff7aba9838   184  ldr lr, [jssp], #8
0xffff7aba983c   188  tbz w0, #0, #+0x14c (addr 0xffff7aba9988)
0xffff7aba9840   192  mov x2, x0
0xffff7aba9844   196  ldur x4, [x1, #7]
0xffff7aba9848   200  stur x2, [x4, #63]
0xffff7aba984c   204  add x3, x4, #0x3f (63)
0xffff7aba9850   208  and x2, x2, #0xfffffffffff00000
0xffff7aba9854   212  ldr x2, [x2, #8]
0xffff7aba9858   216  tbz w2, #1, #+0x24 (addr 0xffff7aba987c)
0xffff7aba985c   220  and x2, x4, #0xfffffffffff00000
0xffff7aba9860   224  ldr x2, [x2, #8]
0xffff7aba9864   228  tbz w2, #2, #+0x18 (addr 0xffff7aba987c)
0xffff7aba9868   232  sub csp, jssp, #0x8 (8)
0xffff7aba986c   236  str lr, [jssp, #-8]!
0xffff7aba9870   240  ldr x16, pc+208 (addr 0x0000ffff7aba9940)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7aba9874   244  blr x16
0xffff7aba9878   248  ldr lr, [jssp], #8
0xffff7aba987c   252  stur x5, [x1, #-1]
0xffff7aba9880   256  tbz w5, #0, #+0x34 (addr 0xffff7aba98b4)
0xffff7aba9884   260  sub x2, x1, #0x1 (1)
0xffff7aba9888   264  and x5, x5, #0xfffffffffff00000
0xffff7aba988c   268  ldr x5, [x5, #8]
0xffff7aba9890   272  tbz w5, #1, #+0x24 (addr 0xffff7aba98b4)
0xffff7aba9894   276  and x5, x1, #0xfffffffffff00000
0xffff7aba9898   280  ldr x5, [x5, #8]
0xffff7aba989c   284  tbz w5, #2, #+0x18 (addr 0xffff7aba98b4)
0xffff7aba98a0   288  sub csp, jssp, #0x8 (8)
0xffff7aba98a4   292  str lr, [jssp, #-8]!
0xffff7aba98a8   296  ldr x16, pc+160 (addr 0x0000ffff7aba9948)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7aba98ac   300  blr x16
0xffff7aba98b0   304  ldr lr, [jssp], #8
0xffff7aba98b4   308  ret
0xffff7aba98b8   312  sub csp, jssp, #0x10 (16)
0xffff7aba98bc   316  stp fp, lr, [jssp, #-16]!
0xffff7aba98c0   320  movz fp, #0xa00000000
0xffff7aba98c4   324  sub csp, jssp, #0x8 (8)
0xffff7aba98c8   328  str fp, [jssp, #-8]!
0xffff7aba98cc   332  add fp, jssp, #0x8 (8)
0xffff7aba98d0   336  movz x13, #0x0
0xffff7aba98d4   340  mov x16, lr
0xffff7aba98d8   344  ldr x17, pc+120 (addr 0x0000ffff7aba9950)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7aba98dc   348  blr x17
0xffff7aba98e0   352  lsl x0, x10, #32
0xffff7aba98e4   356  movz x10, #0x0
0xffff7aba98e8   360  sub csp, jssp, #0x10 (16)
0xffff7aba98ec   364  stp x10, x0, [jssp, #-16]!
0xffff7aba98f0   368  movz x0, #0x2
0xffff7aba98f4   372  movz x1, #0x5b88
0xffff7aba98f8   376  movk x1, #0xe2, lsl #16
0xffff7aba98fc   380  ldr x16, pc+92 (addr 0x0000ffff7aba9958)    ;; code: STUB, CEntryStub, minor: 5
0xffff7aba9900   384  blr x16
0xffff7aba9904   388  str x0, [jssp, #104]
0xffff7aba9908   392  ldr x16, pc+88 (addr 0x0000ffff7aba9960)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7aba990c   396  blr x16
0xffff7aba9910   400  ldr lr, [jssp, #16]
0xffff7aba9914   404  ldp xzr, fp, [jssp], #24
0xffff7aba9918   408  b #-0x14c (addr 0xffff7aba97cc)
0xffff7aba991c   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0xffff7aba9920   416  d63f03e0       constant
0xffff7aba9924   420  d503201f       constant
0xffff7aba9928   424  4ec04259       constant
0xffff7aba992c   428  00000000       constant
0xffff7aba9930   432  20d04241       constant
0xffff7aba9934   436  00000000       constant
0xffff7aba9938   440  7ab370c0       constant
0xffff7aba993c   444  0000ffff       constant
0xffff7aba9940   448  7ab378a0       constant
0xffff7aba9944   452  0000ffff       constant
0xffff7aba9948   456  7ab38080       constant
0xffff7aba994c   460  0000ffff       constant
0xffff7aba9950   464  7ab06820       constant
0xffff7aba9954   468  0000ffff       constant
0xffff7aba9958   472  7ab06260       constant
0xffff7aba995c   476  0000ffff       constant
0xffff7aba9960   480  7ab068e0       constant
0xffff7aba9964   484  0000ffff       constant
0xffff7aba9968   488  movz x16, #0x0
0xffff7aba996c   492  sub csp, jssp, #0x10 (16)
0xffff7aba9970   496  stp fp, lr, [jssp, #-16]!
0xffff7aba9974   500  bl #+0x24 (addr 0xffff7aba9998)
0xffff7aba9978   504  movz x16, #0x8
0xffff7aba997c   508  sub csp, jssp, #0x10 (16)
0xffff7aba9980   512  stp fp, lr, [jssp, #-16]!
0xffff7aba9984   516  bl #+0x14 (addr 0xffff7aba9998)
0xffff7aba9988   520  movz x16, #0x10
0xffff7aba998c   524  sub csp, jssp, #0x10 (16)
0xffff7aba9990   528  stp fp, lr, [jssp, #-16]!
0xffff7aba9994   532  bl #+0x4 (addr 0xffff7aba9998)
0xffff7aba9998   536  movz x17, #0xa00000000
0xffff7aba999c   540  sub csp, jssp, #0x10 (16)
0xffff7aba99a0   544  stp x17, cp, [jssp, #-16]!
0xffff7aba99a4   548  add fp, jssp, #0x10 (16)
0xffff7aba99a8   552  ldr x17, pc+24 (addr 0x0000ffff7aba99c0)    ;; lazy deoptimization bailout 0
0xffff7aba99ac   556  add x17, x17, x16
0xffff7aba99b0   560  br x17
0xffff7aba99b4   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7aba99b8   568  d63f03e0       constant
0xffff7aba99bc   572  d503201f       constant
0xffff7aba99c0   576  7a906000       constant
0xffff7aba99c4   580  0000ffff       constant


Safepoints (size = 21)
0xffff7aba9904   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0xffff7aba97cc  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7aba97e4  embedded object  (0x20d04241 <undefined>)
0xffff7aba9830  code target (STUB)  (0xffff7ab370c0)
0xffff7aba9870  code target (STUB)  (0xffff7ab378a0)
0xffff7aba98a8  code target (STUB)  (0xffff7ab38080)
0xffff7aba98d8  code target (STUB)  (0xffff7ab06820)
0xffff7aba98fc  code target (STUB)  (0xffff7ab06260)
0xffff7aba9908  code target (STUB)  (0xffff7ab068e0)
0xffff7aba991c  constant pool (size 76)
0xffff7aba99a8  runtime entry
0xffff7aba99b4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0xffff7aba9780     0  ldur x6, [x1, #7]
0xffff7aba9784     4  ldur w7, [x6, #11]
0xffff7aba9788     8  adds w8, w7, #0x3 (3)
0xffff7aba978c    12  b.vs #+0x1dc (addr 0xffff7aba9968)
0xffff7aba9790    16  movz w16, #0x95ff
0xffff7aba9794    20  cmp w8, w16, lsl #1
0xffff7aba9798    24  b.hs #+0x1e0 (addr 0xffff7aba9978)
0xffff7aba979c    28  lsl x9, x8, #32
0xffff7aba97a0    32  lsl w10, w8, #3
0xffff7aba97a4    36  add w10, w10, #0x10 (16)
0xffff7aba97a8    40  sxtw x10, w10
0xffff7aba97ac    44  movz x11, #0xe2c0
0xffff7aba97b0    48  movk x11, #0x9ab, lsl #16
0xffff7aba97b4    52  ldp x13, x16, [x11]
0xffff7aba97b8    56  adds x12, x13, x10
0xffff7aba97bc    60  ccmp x12, x16, #nzCv, lo
0xffff7aba97c0    64  b.hi #+0xf8 (addr 0xffff7aba98b8)
0xffff7aba97c4    68  str x12, [x11]
0xffff7aba97c8    72  orr x13, x13, #0x1
0xffff7aba97cc    76  ldr x10, pc+348 (addr 0x0000ffff7aba9928)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7aba97d0    80  stur x10, [x13, #-1]
0xffff7aba97d4    84  stur x9, [x13, #7]
0xffff7aba97d8    88  cmp w7, w8
0xffff7aba97dc    92  b.ge #+0x18 (addr 0xffff7aba97f4)
0xffff7aba97e0    96  sub w8, w8, #0x1 (1)
0xffff7aba97e4   100  ldr x9, pc+332 (addr 0x0000ffff7aba9930)    ;; object: 0x20d04241 <undefined>
0xffff7aba97e8   104  add x10, x13, #0xf (15)
0xffff7aba97ec   108  str x9, [x10, w8, sxtw #3]
0xffff7aba97f0   112  b #-0x18 (addr 0xffff7aba97d8)
0xffff7aba97f4   116  cmp w7, #0x0 (0)
0xffff7aba97f8   120  b.le #+0x1c (addr 0xffff7aba9814)
0xffff7aba97fc   124  sub w7, w7, #0x1 (1)
0xffff7aba9800   128  add x8, x6, #0xf (15)
0xffff7aba9804   132  ldr x9, [x8, w7, sxtw #3]
0xffff7aba9808   136  add x8, x13, #0xf (15)
0xffff7aba980c   140  str x9, [x8, w7, sxtw #3]
0xffff7aba9810   144  b #-0x1c (addr 0xffff7aba97f4)
0xffff7aba9814   148  stur x13, [x1, #7]
0xffff7aba9818   152  add x6, x1, #0x7 (7)
0xffff7aba981c   156  and x13, x1, #0xfffffffffff00000
0xffff7aba9820   160  ldr x13, [x13, #8]
0xffff7aba9824   164  tbz w13, #2, #+0x18 (addr 0xffff7aba983c)
0xffff7aba9828   168  sub csp, jssp, #0x8 (8)
0xffff7aba982c   172  str lr, [jssp, #-8]!
0xffff7aba9830   176  ldr x16, pc+264 (addr 0x0000ffff7aba9938)    ;; code: STUB, RecordWriteStub, minor: 72097
0xffff7aba9834   180  blr x16
0xffff7aba9838   184  ldr lr, [jssp], #8
0xffff7aba983c   188  tbz w0, #0, #+0x14c (addr 0xffff7aba9988)
0xffff7aba9840   192  mov x2, x0
0xffff7aba9844   196  ldur x4, [x1, #7]
0xffff7aba9848   200  stur x2, [x4, #63]
0xffff7aba984c   204  add x3, x4, #0x3f (63)
0xffff7aba9850   208  and x2, x2, #0xfffffffffff00000
0xffff7aba9854   212  ldr x2, [x2, #8]
0xffff7aba9858   216  tbz w2, #1, #+0x24 (addr 0xffff7aba987c)
0xffff7aba985c   220  and x2, x4, #0xfffffffffff00000
0xffff7aba9860   224  ldr x2, [x2, #8]
0xffff7aba9864   228  tbz w2, #2, #+0x18 (addr 0xffff7aba987c)
0xffff7aba9868   232  sub csp, jssp, #0x8 (8)
0xffff7aba986c   236  str lr, [jssp, #-8]!
0xffff7aba9870   240  ldr x16, pc+208 (addr 0x0000ffff7aba9940)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7aba9874   244  blr x16
0xffff7aba9878   248  ldr lr, [jssp], #8
0xffff7aba987c   252  stur x5, [x1, #-1]
0xffff7aba9880   256  tbz w5, #0, #+0x34 (addr 0xffff7aba98b4)
0xffff7aba9884   260  sub x2, x1, #0x1 (1)
0xffff7aba9888   264  and x5, x5, #0xfffffffffff00000
0xffff7aba988c   268  ldr x5, [x5, #8]
0xffff7aba9890   272  tbz w5, #1, #+0x24 (addr 0xffff7aba98b4)
0xffff7aba9894   276  and x5, x1, #0xfffffffffff00000
0xffff7aba9898   280  ldr x5, [x5, #8]
0xffff7aba989c   284  tbz w5, #2, #+0x18 (addr 0xffff7aba98b4)
0xffff7aba98a0   288  sub csp, jssp, #0x8 (8)
0xffff7aba98a4   292  str lr, [jssp, #-8]!
0xffff7aba98a8   296  ldr x16, pc+160 (addr 0x0000ffff7aba9948)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7aba98ac   300  blr x16
0xffff7aba98b0   304  ldr lr, [jssp], #8
0xffff7aba98b4   308  ret
0xffff7aba98b8   312  sub csp, jssp, #0x10 (16)
0xffff7aba98bc   316  stp fp, lr, [jssp, #-16]!
0xffff7aba98c0   320  movz fp, #0xa00000000
0xffff7aba98c4   324  sub csp, jssp, #0x8 (8)
0xffff7aba98c8   328  str fp, [jssp, #-8]!
0xffff7aba98cc   332  add fp, jssp, #0x8 (8)
0xffff7aba98d0   336  movz x13, #0x0
0xffff7aba98d4   340  mov x16, lr
0xffff7aba98d8   344  ldr x17, pc+120 (addr 0x0000ffff7aba9950)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7aba98dc   348  blr x17
0xffff7aba98e0   352  lsl x0, x10, #32
0xffff7aba98e4   356  movz x10, #0x0
0xffff7aba98e8   360  sub csp, jssp, #0x10 (16)
0xffff7aba98ec   364  stp x10, x0, [jssp, #-16]!
0xffff7aba98f0   368  movz x0, #0x2
0xffff7aba98f4   372  movz x1, #0x5b88
0xffff7aba98f8   376  movk x1, #0xe2, lsl #16
0xffff7aba98fc   380  ldr x16, pc+92 (addr 0x0000ffff7aba9958)    ;; code: STUB, CEntryStub, minor: 5
0xffff7aba9900   384  blr x16
0xffff7aba9904   388  str x0, [jssp, #104]
0xffff7aba9908   392  ldr x16, pc+88 (addr 0x0000ffff7aba9960)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7aba990c   396  blr x16
0xffff7aba9910   400  ldr lr, [jssp, #16]
0xffff7aba9914   404  ldp xzr, fp, [jssp], #24
0xffff7aba9918   408  b #-0x14c (addr 0xffff7aba97cc)
0xffff7aba991c   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0xffff7aba9920   416  d63f03e0       constant
0xffff7aba9924   420  d503201f       constant
0xffff7aba9928   424  4ec04259       constant
0xffff7aba992c   428  00000000       constant
0xffff7aba9930   432  20d04241       constant
0xffff7aba9934   436  00000000       constant
0xffff7aba9938   440  7ab370c0       constant
0xffff7aba993c   444  0000ffff       constant
0xffff7aba9940   448  7ab378a0       constant
0xffff7aba9944   452  0000ffff       constant
0xffff7aba9948   456  7ab38080       constant
0xffff7aba994c   460  0000ffff       constant
0xffff7aba9950   464  7ab06820       constant
0xffff7aba9954   468  0000ffff       constant
0xffff7aba9958   472  7ab06260       constant
0xffff7aba995c   476  0000ffff       constant
0xffff7aba9960   480  7ab068e0       constant
0xffff7aba9964   484  0000ffff       constant
0xffff7aba9968   488  movz x16, #0x0
0xffff7aba996c   492  sub csp, jssp, #0x10 (16)
0xffff7aba9970   496  stp fp, lr, [jssp, #-16]!
0xffff7aba9974   500  bl #+0x24 (addr 0xffff7aba9998)
0xffff7aba9978   504  movz x16, #0x8
0xffff7aba997c   508  sub csp, jssp, #0x10 (16)
0xffff7aba9980   512  stp fp, lr, [jssp, #-16]!
0xffff7aba9984   516  bl #+0x14 (addr 0xffff7aba9998)
0xffff7aba9988   520  movz x16, #0x10
0xffff7aba998c   524  sub csp, jssp, #0x10 (16)
0xffff7aba9990   528  stp fp, lr, [jssp, #-16]!
0xffff7aba9994   532  bl #+0x4 (addr 0xffff7aba9998)
0xffff7aba9998   536  movz x17, #0xa00000000
0xffff7aba999c   540  sub csp, jssp, #0x10 (16)
0xffff7aba99a0   544  stp x17, cp, [jssp, #-16]!
0xffff7aba99a4   548  add fp, jssp, #0x10 (16)
0xffff7aba99a8   552  ldr x17, pc+24 (addr 0x0000ffff7aba99c0)    ;; lazy deoptimization bailout 0
0xffff7aba99ac   556  add x17, x17, x16
0xffff7aba99b0   560  br x17
0xffff7aba99b4   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7aba99b8   568  d63f03e0       constant
0xffff7aba99bc   572  d503201f       constant
0xffff7aba99c0   576  7a906000       constant
0xffff7aba99c4   580  0000ffff       constant


Safepoints (size = 21)
0xffff7aba9904   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0xffff7aba97cc  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7aba97e4  embedded object  (0x20d04241 <undefined>)
0xffff7aba9830  code target (STUB)  (0xffff7ab370c0)
0xffff7aba9870  code target (STUB)  (0xffff7ab378a0)
0xffff7aba98a8  code target (STUB)  (0xffff7ab38080)
0xffff7aba98d8  code target (STUB)  (0xffff7ab06820)
0xffff7aba98fc  code target (STUB)  (0xffff7ab06260)
0xffff7aba9908  code target (STUB)  (0xffff7ab068e0)
0xffff7aba991c  constant pool (size 76)
0xffff7aba99a8  runtime entry
0xffff7aba99b4  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = internal/process/promises
compiler = unknown
Instructions (size = 184)
0xffff7aba9a40     0  sub csp, jssp, #0x8 (8)
0xffff7aba9a44     4  str x3, [jssp, #-8]!
0xffff7aba9a48     8  sub csp, jssp, #0x8 (8)
0xffff7aba9a4c    12  str x4, [jssp, #-8]!
0xffff7aba9a50    16  ldr x3, pc+112 (addr 0x0000ffff7aba9ac0)    ;; object: 0x20d63e59 Cell for 0
0xffff7aba9a54    20  ldur x3, [x3, #7]
0xffff7aba9a58    24  cmp x3, #0x0 (0)
0xffff7aba9a5c    28  b.ne #+0x44 (addr 0xffff7aba9aa0)
0xffff7aba9a60    32  tbz w0, #0, #+0x40 (addr 0xffff7aba9aa0)
0xffff7aba9a64    36  ldur x3, [x0, #-1]
0xffff7aba9a68    40  ldr x4, pc+96 (addr 0x0000ffff7aba9ac8)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7aba9a6c    44  ldur x4, [x4, #7]
0xffff7aba9a70    48  cmp x3, x4
0xffff7aba9a74    52  b.ne #+0x2c (addr 0xffff7aba9aa0)
0xffff7aba9a78    56  ldr x5, pc+88 (addr 0x0000ffff7aba9ad0)    ;; object: 0x20df78b1 WeakCell for 0x4ec27c49 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7aba9a7c    60  ldur x5, [x5, #7]
0xffff7aba9a80    64  tbz w5, #0, #+0x20 (addr 0xffff7aba9aa0)
0xffff7aba9a84    68  ldursw x4, [x5, #15]
0xffff7aba9a88    72  tbnz w4, #23, #+0x18 (addr 0xffff7aba9aa0)
0xffff7aba9a8c    76  ldr x4, [jssp], #8
0xffff7aba9a90    80  ldr x3, [jssp], #8
0xffff7aba9a94    84  ldr x2, pc+68 (addr 0x0000ffff7aba9ad8)    ;; object: 0x20dbe351 <String[25]: internal/process/promises>
0xffff7aba9a98    88  ldr x16, pc+72 (addr 0x0000ffff7aba9ae0)    ;; code: HANDLER, StoreTransitionStub, minor: 327688
0xffff7aba9a9c    92  br x16
0xffff7aba9aa0    96  ldr x2, pc+72 (addr 0x0000ffff7aba9ae8)    ;; object: 0x20dbe351 <String[25]: internal/process/promises>
0xffff7aba9aa4   100  ldr x4, [jssp], #8
0xffff7aba9aa8   104  ldr x3, [jssp], #8
0xffff7aba9aac   108  ldr x16, pc+68 (addr 0x0000ffff7aba9af0)    ;; code: BUILTIN
0xffff7aba9ab0   112  br x16
0xffff7aba9ab4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7aba9ab8   120  d63f03e0       constant
0xffff7aba9abc   124  d503201f       constant
0xffff7aba9ac0   128  20d63e59       constant
0xffff7aba9ac4   132  00000000       constant
0xffff7aba9ac8   136  20dc22b1       constant
0xffff7aba9acc   140  00000000       constant
0xffff7aba9ad0   144  20df78b1       constant
0xffff7aba9ad4   148  00000000       constant
0xffff7aba9ad8   152  20dbe351       constant
0xffff7aba9adc   156  00000000       constant
0xffff7aba9ae0   160  7aba9780       constant
0xffff7aba9ae4   164  0000ffff       constant
0xffff7aba9ae8   168  20dbe351       constant
0xffff7aba9aec   172  00000000       constant
0xffff7aba9af0   176  7ab22420       constant
0xffff7aba9af4   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7aba9a50  embedded object  (0x20d63e59 Cell for 0)
0xffff7aba9a68  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7aba9a78  embedded object  (0x20df78b1 WeakCell for 0x4ec27c49 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7aba9a94  embedded object  (0x20dbe351 <String[25]: internal/process/promises>)
0xffff7aba9a98  code target (HANDLER)  (0xffff7aba9780)
0xffff7aba9aa0  embedded object  (0x20dbe351 <String[25]: internal/process/promises>)
0xffff7aba9aac  code target (BUILTIN)  (0xffff7ab22420)
0xffff7aba9ab4  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = WeakMap
compiler = unknown
Instructions (size = 120)
0xffff7abaa120     0  sub csp, jssp, #0x8 (8)
0xffff7abaa124     4  str x3, [jssp, #-8]!
0xffff7abaa128     8  sub csp, jssp, #0x8 (8)
0xffff7abaa12c    12  str x0, [jssp, #-8]!
0xffff7abaa130    16  ldr x0, pc+80 (addr 0x0000ffff7abaa180)    ;; object: 0x20dc5d51 Cell for 0
0xffff7abaa134    20  ldur x0, [x0, #7]
0xffff7abaa138    24  cmp x0, #0x0 (0)
0xffff7abaa13c    28  b.ne #+0x2c (addr 0xffff7abaa168)
0xffff7abaa140    32  ldr x0, pc+72 (addr 0x0000ffff7abaa188)    ;; object: 0x20df8569 WeakCell for 0x20d491f9 PropertyCell for 0x20d49191 <JS Function WeakMap (SharedFunctionInfo 0x20d490e9)>
0xffff7abaa144    36  ldur x0, [x0, #7]
0xffff7abaa148    40  tbz w0, #0, #+0x20 (addr 0xffff7abaa168)
0xffff7abaa14c    44  ldur x0, [x0, #15]
0xffff7abaa150    48  ldr x16, [x26, #88]
0xffff7abaa154    52  cmp x0, x16
0xffff7abaa158    56  b.eq #+0x10 (addr 0xffff7abaa168)
0xffff7abaa15c    60  add jssp, jssp, #0x10 (16)
0xffff7abaa160    64  ret
0xffff7abaa164    68  b #+0x14 (addr 0xffff7abaa178)
0xffff7abaa168    72  ldr x0, [jssp], #8
0xffff7abaa16c    76  ldr x3, [jssp], #8
0xffff7abaa170    80  ldr x16, pc+32 (addr 0x0000ffff7abaa190)    ;; code: BUILTIN
0xffff7abaa174    84  br x16
0xffff7abaa178    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7abaa17c    92  d63f03e0       constant
0xffff7abaa180    96  20dc5d51       constant
0xffff7abaa184   100  00000000       constant
0xffff7abaa188   104  20df8569       constant
0xffff7abaa18c   108  00000000       constant
0xffff7abaa190   112  7ab222e0       constant
0xffff7abaa194   116  0000ffff       constant


RelocInfo (size = 9)
0xffff7abaa130  embedded object  (0x20dc5d51 Cell for 0)
0xffff7abaa140  embedded object  (0x20df8569 WeakCell for 0x20d491f9 PropertyCell for 0x20d49191 <JS Function WeakMap (SharedFunctionInfo 0x20d490e9)>)
0xffff7abaa170  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abaa178  constant pool (size 32)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7abaa500     0  tbz w0, #0, #+0x98 (addr 0xffff7abaa598)
0xffff7abaa504     4  mov x2, x0
0xffff7abaa508     8  ldur x4, [x1, #7]
0xffff7abaa50c    12  stur x2, [x4, #71]
0xffff7abaa510    16  add x3, x4, #0x47 (71)
0xffff7abaa514    20  and x2, x2, #0xfffffffffff00000
0xffff7abaa518    24  ldr x2, [x2, #8]
0xffff7abaa51c    28  tbz w2, #1, #+0x24 (addr 0xffff7abaa540)
0xffff7abaa520    32  and x2, x4, #0xfffffffffff00000
0xffff7abaa524    36  ldr x2, [x2, #8]
0xffff7abaa528    40  tbz w2, #2, #+0x18 (addr 0xffff7abaa540)
0xffff7abaa52c    44  sub csp, jssp, #0x8 (8)
0xffff7abaa530    48  str lr, [jssp, #-8]!
0xffff7abaa534    52  ldr x16, pc+84 (addr 0x0000ffff7abaa588)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abaa538    56  blr x16
0xffff7abaa53c    60  ldr lr, [jssp], #8
0xffff7abaa540    64  stur x5, [x1, #-1]
0xffff7abaa544    68  tbz w5, #0, #+0x34 (addr 0xffff7abaa578)
0xffff7abaa548    72  sub x2, x1, #0x1 (1)
0xffff7abaa54c    76  and x5, x5, #0xfffffffffff00000
0xffff7abaa550    80  ldr x5, [x5, #8]
0xffff7abaa554    84  tbz w5, #1, #+0x24 (addr 0xffff7abaa578)
0xffff7abaa558    88  and x5, x1, #0xfffffffffff00000
0xffff7abaa55c    92  ldr x5, [x5, #8]
0xffff7abaa560    96  tbz w5, #2, #+0x18 (addr 0xffff7abaa578)
0xffff7abaa564   100  sub csp, jssp, #0x8 (8)
0xffff7abaa568   104  str lr, [jssp, #-8]!
0xffff7abaa56c   108  ldr x16, pc+36 (addr 0x0000ffff7abaa590)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abaa570   112  blr x16
0xffff7abaa574   116  ldr lr, [jssp], #8
0xffff7abaa578   120  ret
0xffff7abaa57c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abaa580   128  d63f03e0       constant
0xffff7abaa584   132  d503201f       constant
0xffff7abaa588   136  7ab378a0       constant
0xffff7abaa58c   140  0000ffff       constant
0xffff7abaa590   144  7ab38080       constant
0xffff7abaa594   148  0000ffff       constant
0xffff7abaa598   152  movz x16, #0x0
0xffff7abaa59c   156  sub csp, jssp, #0x10 (16)
0xffff7abaa5a0   160  stp fp, lr, [jssp, #-16]!
0xffff7abaa5a4   164  bl #+0x4 (addr 0xffff7abaa5a8)
0xffff7abaa5a8   168  movz x17, #0xa00000000
0xffff7abaa5ac   172  sub csp, jssp, #0x10 (16)
0xffff7abaa5b0   176  stp x17, cp, [jssp, #-16]!
0xffff7abaa5b4   180  add fp, jssp, #0x10 (16)
0xffff7abaa5b8   184  ldr x17, pc+24 (addr 0x0000ffff7abaa5d0)    ;; lazy deoptimization bailout 0
0xffff7abaa5bc   188  add x17, x17, x16
0xffff7abaa5c0   192  br x17
0xffff7abaa5c4   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abaa5c8   200  d63f03e0       constant
0xffff7abaa5cc   204  d503201f       constant
0xffff7abaa5d0   208  7a906000       constant
0xffff7abaa5d4   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abaa534  code target (STUB)  (0xffff7ab378a0)
0xffff7abaa56c  code target (STUB)  (0xffff7ab38080)
0xffff7abaa57c  constant pool (size 28)
0xffff7abaa5b8  runtime entry
0xffff7abaa5c4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7abaa500     0  tbz w0, #0, #+0x98 (addr 0xffff7abaa598)
0xffff7abaa504     4  mov x2, x0
0xffff7abaa508     8  ldur x4, [x1, #7]
0xffff7abaa50c    12  stur x2, [x4, #71]
0xffff7abaa510    16  add x3, x4, #0x47 (71)
0xffff7abaa514    20  and x2, x2, #0xfffffffffff00000
0xffff7abaa518    24  ldr x2, [x2, #8]
0xffff7abaa51c    28  tbz w2, #1, #+0x24 (addr 0xffff7abaa540)
0xffff7abaa520    32  and x2, x4, #0xfffffffffff00000
0xffff7abaa524    36  ldr x2, [x2, #8]
0xffff7abaa528    40  tbz w2, #2, #+0x18 (addr 0xffff7abaa540)
0xffff7abaa52c    44  sub csp, jssp, #0x8 (8)
0xffff7abaa530    48  str lr, [jssp, #-8]!
0xffff7abaa534    52  ldr x16, pc+84 (addr 0x0000ffff7abaa588)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abaa538    56  blr x16
0xffff7abaa53c    60  ldr lr, [jssp], #8
0xffff7abaa540    64  stur x5, [x1, #-1]
0xffff7abaa544    68  tbz w5, #0, #+0x34 (addr 0xffff7abaa578)
0xffff7abaa548    72  sub x2, x1, #0x1 (1)
0xffff7abaa54c    76  and x5, x5, #0xfffffffffff00000
0xffff7abaa550    80  ldr x5, [x5, #8]
0xffff7abaa554    84  tbz w5, #1, #+0x24 (addr 0xffff7abaa578)
0xffff7abaa558    88  and x5, x1, #0xfffffffffff00000
0xffff7abaa55c    92  ldr x5, [x5, #8]
0xffff7abaa560    96  tbz w5, #2, #+0x18 (addr 0xffff7abaa578)
0xffff7abaa564   100  sub csp, jssp, #0x8 (8)
0xffff7abaa568   104  str lr, [jssp, #-8]!
0xffff7abaa56c   108  ldr x16, pc+36 (addr 0x0000ffff7abaa590)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abaa570   112  blr x16
0xffff7abaa574   116  ldr lr, [jssp], #8
0xffff7abaa578   120  ret
0xffff7abaa57c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abaa580   128  d63f03e0       constant
0xffff7abaa584   132  d503201f       constant
0xffff7abaa588   136  7ab378a0       constant
0xffff7abaa58c   140  0000ffff       constant
0xffff7abaa590   144  7ab38080       constant
0xffff7abaa594   148  0000ffff       constant
0xffff7abaa598   152  movz x16, #0x0
0xffff7abaa59c   156  sub csp, jssp, #0x10 (16)
0xffff7abaa5a0   160  stp fp, lr, [jssp, #-16]!
0xffff7abaa5a4   164  bl #+0x4 (addr 0xffff7abaa5a8)
0xffff7abaa5a8   168  movz x17, #0xa00000000
0xffff7abaa5ac   172  sub csp, jssp, #0x10 (16)
0xffff7abaa5b0   176  stp x17, cp, [jssp, #-16]!
0xffff7abaa5b4   180  add fp, jssp, #0x10 (16)
0xffff7abaa5b8   184  ldr x17, pc+24 (addr 0x0000ffff7abaa5d0)    ;; lazy deoptimization bailout 0
0xffff7abaa5bc   188  add x17, x17, x16
0xffff7abaa5c0   192  br x17
0xffff7abaa5c4   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abaa5c8   200  d63f03e0       constant
0xffff7abaa5cc   204  d503201f       constant
0xffff7abaa5d0   208  7a906000       constant
0xffff7abaa5d4   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abaa534  code target (STUB)  (0xffff7ab378a0)
0xffff7abaa56c  code target (STUB)  (0xffff7ab38080)
0xffff7abaa57c  constant pool (size 28)
0xffff7abaa5b8  runtime entry
0xffff7abaa5c4  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = internal/process/stdio
compiler = unknown
Instructions (size = 184)
0xffff7abaa640     0  sub csp, jssp, #0x8 (8)
0xffff7abaa644     4  str x3, [jssp, #-8]!
0xffff7abaa648     8  sub csp, jssp, #0x8 (8)
0xffff7abaa64c    12  str x4, [jssp, #-8]!
0xffff7abaa650    16  ldr x3, pc+112 (addr 0x0000ffff7abaa6c0)    ;; object: 0x20d63e59 Cell for 0
0xffff7abaa654    20  ldur x3, [x3, #7]
0xffff7abaa658    24  cmp x3, #0x0 (0)
0xffff7abaa65c    28  b.ne #+0x44 (addr 0xffff7abaa6a0)
0xffff7abaa660    32  tbz w0, #0, #+0x40 (addr 0xffff7abaa6a0)
0xffff7abaa664    36  ldur x3, [x0, #-1]
0xffff7abaa668    40  ldr x4, pc+96 (addr 0x0000ffff7abaa6c8)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abaa66c    44  ldur x4, [x4, #7]
0xffff7abaa670    48  cmp x3, x4
0xffff7abaa674    52  b.ne #+0x2c (addr 0xffff7abaa6a0)
0xffff7abaa678    56  ldr x5, pc+88 (addr 0x0000ffff7abaa6d0)    ;; object: 0x20df8dd1 WeakCell for 0x4ec27da9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abaa67c    60  ldur x5, [x5, #7]
0xffff7abaa680    64  tbz w5, #0, #+0x20 (addr 0xffff7abaa6a0)
0xffff7abaa684    68  ldursw x4, [x5, #15]
0xffff7abaa688    72  tbnz w4, #23, #+0x18 (addr 0xffff7abaa6a0)
0xffff7abaa68c    76  ldr x4, [jssp], #8
0xffff7abaa690    80  ldr x3, [jssp], #8
0xffff7abaa694    84  ldr x2, pc+68 (addr 0x0000ffff7abaa6d8)    ;; object: 0x20db97b9 <String[22]: internal/process/stdio>
0xffff7abaa698    88  ldr x16, pc+72 (addr 0x0000ffff7abaa6e0)    ;; code: HANDLER, StoreTransitionStub, minor: 196617
0xffff7abaa69c    92  br x16
0xffff7abaa6a0    96  ldr x2, pc+72 (addr 0x0000ffff7abaa6e8)    ;; object: 0x20db97b9 <String[22]: internal/process/stdio>
0xffff7abaa6a4   100  ldr x4, [jssp], #8
0xffff7abaa6a8   104  ldr x3, [jssp], #8
0xffff7abaa6ac   108  ldr x16, pc+68 (addr 0x0000ffff7abaa6f0)    ;; code: BUILTIN
0xffff7abaa6b0   112  br x16
0xffff7abaa6b4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abaa6b8   120  d63f03e0       constant
0xffff7abaa6bc   124  d503201f       constant
0xffff7abaa6c0   128  20d63e59       constant
0xffff7abaa6c4   132  00000000       constant
0xffff7abaa6c8   136  20dc22b1       constant
0xffff7abaa6cc   140  00000000       constant
0xffff7abaa6d0   144  20df8dd1       constant
0xffff7abaa6d4   148  00000000       constant
0xffff7abaa6d8   152  20db97b9       constant
0xffff7abaa6dc   156  00000000       constant
0xffff7abaa6e0   160  7abaa500       constant
0xffff7abaa6e4   164  0000ffff       constant
0xffff7abaa6e8   168  20db97b9       constant
0xffff7abaa6ec   172  00000000       constant
0xffff7abaa6f0   176  7ab22420       constant
0xffff7abaa6f4   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abaa650  embedded object  (0x20d63e59 Cell for 0)
0xffff7abaa668  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abaa678  embedded object  (0x20df8dd1 WeakCell for 0x4ec27da9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abaa694  embedded object  (0x20db97b9 <String[22]: internal/process/stdio>)
0xffff7abaa698  code target (HANDLER)  (0xffff7abaa500)
0xffff7abaa6a0  embedded object  (0x20db97b9 <String[22]: internal/process/stdio>)
0xffff7abaa6ac  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abaa6b4  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = newListener
compiler = unknown
Instructions (size = 144)
0xffff7abab640     0  sub csp, jssp, #0x8 (8)
0xffff7abab644     4  str x3, [jssp, #-8]!
0xffff7abab648     8  sub csp, jssp, #0x8 (8)
0xffff7abab64c    12  str x4, [jssp, #-8]!
0xffff7abab650    16  ldr x5, pc+88 (addr 0x0000ffff7abab6a8)    ;; object: 0x20dfabf9 WeakCell for 0x4ec27e01 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abab654    20  ldur x5, [x5, #7]
0xffff7abab658    24  tbz w5, #0, #+0x30 (addr 0xffff7abab688)
0xffff7abab65c    28  ldursw x4, [x5, #15]
0xffff7abab660    32  tbnz w4, #23, #+0x28 (addr 0xffff7abab688)
0xffff7abab664    36  ldur x4, [x5, #47]
0xffff7abab668    40  ldur x4, [x4, #71]
0xffff7abab66c    44  cmp x0, x4
0xffff7abab670    48  b.ne #+0x18 (addr 0xffff7abab688)
0xffff7abab674    52  ldr x4, [jssp], #8
0xffff7abab678    56  ldr x3, [jssp], #8
0xffff7abab67c    60  ldr x2, pc+52 (addr 0x0000ffff7abab6b0)    ;; object: 0x20dc3819 <String[11]: newListener>
0xffff7abab680    64  ldr x16, pc+56 (addr 0x0000ffff7abab6b8)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0xffff7abab684    68  br x16
0xffff7abab688    72  ldr x2, pc+56 (addr 0x0000ffff7abab6c0)    ;; object: 0x20dc3819 <String[11]: newListener>
0xffff7abab68c    76  ldr x4, [jssp], #8
0xffff7abab690    80  ldr x3, [jssp], #8
0xffff7abab694    84  ldr x16, pc+52 (addr 0x0000ffff7abab6c8)    ;; code: BUILTIN
0xffff7abab698    88  br x16
0xffff7abab69c    92  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0xffff7abab6a0    96  d63f03e0       constant
0xffff7abab6a4   100  d503201f       constant
0xffff7abab6a8   104  20dfabf9       constant
0xffff7abab6ac   108  00000000       constant
0xffff7abab6b0   112  20dc3819       constant
0xffff7abab6b4   116  00000000       constant
0xffff7abab6b8   120  7ab3cea0       constant
0xffff7abab6bc   124  0000ffff       constant
0xffff7abab6c0   128  20dc3819       constant
0xffff7abab6c4   132  00000000       constant
0xffff7abab6c8   136  7ab22420       constant
0xffff7abab6cc   140  0000ffff       constant


RelocInfo (size = 11)
0xffff7abab650  embedded object  (0x20dfabf9 WeakCell for 0x4ec27e01 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abab67c  embedded object  (0x20dc3819 <String[11]: newListener>)
0xffff7abab680  code target (HANDLER)  (0xffff7ab3cea0)
0xffff7abab688  embedded object  (0x20dc3819 <String[11]: newListener>)
0xffff7abab694  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abab69c  constant pool (size 52)

kind = STUB
major_key = FastNewStrictArgumentsStub
name = FastNewStrictArgumentsStub
compiler = unknown
Instructions (size = 336)
0xffff7abab740     0  mov x2, fp
0xffff7abab744     4  b #+0x8 (addr 0xffff7abab74c)
0xffff7abab748     8  ldr x2, [x2]
0xffff7abab74c    12  ldur x3, [x2, #-16]
0xffff7abab750    16  cmp x3, x1
0xffff7abab754    20  b.ne #-0xc (addr 0xffff7abab748)
0xffff7abab758    24  ldr x3, [x2]
0xffff7abab75c    28  ldur x4, [x3, #-8]
0xffff7abab760    32  movz x16, #0xe00000000
0xffff7abab764    36  cmp x4, x16
0xffff7abab768    40  b.eq #+0x18 (addr 0xffff7abab780)
0xffff7abab76c    44  ldur x1, [x1, #31]
0xffff7abab770    48  ldursw x0, [x1, #99]
0xffff7abab774    52  add x2, x2, x0, lsl #3
0xffff7abab778    56  add x2, x2, #0x8 (8)
0xffff7abab77c    60  b #+0x10 (addr 0xffff7abab78c)
0xffff7abab780    64  ldursw x0, [x3, #-20]
0xffff7abab784    68  add x2, x3, x0, lsl #3
0xffff7abab788    72  add x2, x2, #0x8 (8)
0xffff7abab78c    76  movz x1, #0x30
0xffff7abab790    80  add x1, x1, x0, lsl #3
0xffff7abab794    84  ldr x5, pc+220 (addr 0x0000ffff7abab870)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0xffff7abab798    88  ldp x3, x16, [x5]
0xffff7abab79c    92  adds x4, x3, x1
0xffff7abab7a0    96  ccmp x4, x16, #nzCv, lo
0xffff7abab7a4   100  b.hi #+0x64 (addr 0xffff7abab808)
0xffff7abab7a8   104  str x4, [x5]
0xffff7abab7ac   108  orr x3, x3, #0x1
0xffff7abab7b0   112  lsl x6, x0, #32
0xffff7abab7b4   116  ldr x1, [x26, #224]
0xffff7abab7b8   120  stur x1, [x3, #-1]
0xffff7abab7bc   124  stur x6, [x3, #7]
0xffff7abab7c0   128  add x4, x3, #0x10 (16)
0xffff7abab7c4   132  add x0, x4, x0, lsl #3
0xffff7abab7c8   136  cmp x4, x0
0xffff7abab7cc   140  b.eq #+0x18 (addr 0xffff7abab7e4)
0xffff7abab7d0   144  ldr x5, [x2]
0xffff7abab7d4   148  stur x5, [x4, #-1]
0xffff7abab7d8   152  sub x2, x2, #0x8 (8)
0xffff7abab7dc   156  add x4, x4, #0x8 (8)
0xffff7abab7e0   160  b #-0x18 (addr 0xffff7abab7c8)
0xffff7abab7e4   164  ldur x1, [cp, #39]
0xffff7abab7e8   168  movz x16, #0x2c7
0xffff7abab7ec   172  ldr x1, [x1, x16]
0xffff7abab7f0   176  stur x1, [x0, #-1]
0xffff7abab7f4   180  ldr x1, [x26, #304]
0xffff7abab7f8   184  stur x1, [x0, #7]
0xffff7abab7fc   188  stur x3, [x0, #15]
0xffff7abab800   192  stur x6, [x0, #23]
0xffff7abab804   196  ret
0xffff7abab808   200  movz x16, #0xc00000000
0xffff7abab80c   204  sub csp, jssp, #0x10 (16)
0xffff7abab810   208  stp fp, lr, [jssp, #-16]!
0xffff7abab814   212  sub csp, jssp, #0x10 (16)
0xffff7abab818   216  str x16, [jssp, #-8]!
0xffff7abab81c   220  ldr x17, pc+92 (addr 0x0000ffff7abab878)    ;; object: 0xffff7abab6e1 <Code: STUB>
0xffff7abab820   224  sub csp, jssp, #0x10 (16)
0xffff7abab824   228  str x17, [jssp, #-8]!
0xffff7abab828   232  add fp, jssp, #0x10 (16)
0xffff7abab82c   236  lsl x0, x0, #32
0xffff7abab830   240  lsl x1, x1, #32
0xffff7abab834   244  sub csp, jssp, #0x18 (24)
0xffff7abab838   248  stp x1, x2, [jssp, #-24]!
0xffff7abab83c   252  str x0, [jssp, #16]
0xffff7abab840   256  movz x0, #0x1
0xffff7abab844   260  ldr x1, pc+60 (addr 0x0000ffff7abab880)    ;; external reference (Runtime::AllocateInNewSpace)
0xffff7abab848   264  ldr x16, pc+64 (addr 0x0000ffff7abab888)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abab84c   268  blr x16
0xffff7abab850   272  mov x3, x0
0xffff7abab854   276  ldp x2, x0, [jssp], #16
0xffff7abab858   280  asr x0, x0, #32
0xffff7abab85c   284  mov jssp, fp
0xffff7abab860   288  ldp fp, lr, [jssp], #16
0xffff7abab864   292  b #-0xb4 (addr 0xffff7abab7b0)
0xffff7abab868   296  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abab86c   300  d63f03e0       constant
0xffff7abab870   304  09abe2c0       constant
0xffff7abab874   308  00000000       constant
0xffff7abab878   312  7abab6e1       constant
0xffff7abab87c   316  0000ffff       constant
0xffff7abab880   320  00e25898       constant
0xffff7abab884   324  00000000       constant
0xffff7abab888   328  7ab06060       constant
0xffff7abab88c   332  0000ffff       constant


RelocInfo (size = 16)
0xffff7abab794  external reference (Heap::NewSpaceAllocationTopAddress())  (0x9abe2c0)
0xffff7abab81c  embedded object  (0xffff7abab6e1 <Code: STUB>)
0xffff7abab844  external reference (Runtime::AllocateInNewSpace)  (0xe25898)
0xffff7abab848  code target (STUB)  (0xffff7ab06060)
0xffff7abab868  constant pool (size 40)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 393222
name = CallICStub(args(6), ANY, 
compiler = unknown
Instructions (size = 488)
0xffff7abab900     0  add x4, x2, x3, asr #29
0xffff7abab904     4  ldur x4, [x4, #15]
0xffff7abab908     8  ldur x5, [x4, #7]
0xffff7abab90c    12  cmp x5, x1
0xffff7abab910    16  b.ne #+0x2c (addr 0xffff7abab93c)
0xffff7abab914    20  tbz w1, #0, #+0x28 (addr 0xffff7abab93c)
0xffff7abab918    24  add x2, x2, x3, asr #29
0xffff7abab91c    28  add x2, x2, #0x18 (24)
0xffff7abab920    32  ldur x3, [x2, #-1]
0xffff7abab924    36  movz x16, #0x200000000
0xffff7abab928    40  add x3, x3, x16
0xffff7abab92c    44  stur x3, [x2, #-1]
0xffff7abab930    48  movz x0, #0x6
0xffff7abab934    52  ldr x16, pc+372 (addr 0x0000ffff7ababaa8)    ;; code: BUILTIN
0xffff7abab938    56  br x16
0xffff7abab93c    60  ldr x16, [x26, #2400]
0xffff7abab940    64  cmp x4, x16
0xffff7abab944    68  b.eq #+0x78 (addr 0xffff7abab9bc)
0xffff7abab948    72  ldur x5, [x4, #-1]
0xffff7abab94c    76  ldr x16, [x26, #2736]
0xffff7abab950    80  cmp x5, x16
0xffff7abab954    84  b.ne #+0x40 (addr 0xffff7abab994)
0xffff7abab958    88  ldur x5, [cp, #39]
0xffff7abab95c    92  ldur x5, [x5, #95]
0xffff7abab960    96  cmp x1, x5
0xffff7abab964   100  b.ne #+0xec (addr 0xffff7ababa50)
0xffff7abab968   104  movz x0, #0x6
0xffff7abab96c   108  add x2, x2, x3, asr #29
0xffff7abab970   112  add x2, x2, #0x18 (24)
0xffff7abab974   116  ldur x3, [x2, #-1]
0xffff7abab978   120  movz x16, #0x200000000
0xffff7abab97c   124  add x3, x3, x16
0xffff7abab980   128  stur x3, [x2, #-1]
0xffff7abab984   132  mov x2, x4
0xffff7abab988   136  mov x3, x1
0xffff7abab98c   140  ldr x16, pc+292 (addr 0x0000ffff7ababab0)    ;; code: STUB, ArrayConstructorStub, minor: 3
0xffff7abab990   144  br x16
0xffff7abab994   148  ldr x16, [x26, #2568]
0xffff7abab998   152  cmp x4, x16
0xffff7abab99c   156  b.eq #+0xb4 (addr 0xffff7ababa50)
0xffff7abab9a0   160  ldur x5, [x4, #-1]
0xffff7abab9a4   164  ldrb w5, [x5, #11]
0xffff7abab9a8   168  cmp x5, #0xc9 (201)
0xffff7abab9ac   172  b.ne #+0xa4 (addr 0xffff7ababa50)
0xffff7abab9b0   176  add x4, x2, x3, asr #29
0xffff7abab9b4   180  ldr x5, [x26, #2400]
0xffff7abab9b8   184  stur x5, [x4, #15]
0xffff7abab9bc   188  movz x0, #0x6
0xffff7abab9c0   192  ldr x16, pc+248 (addr 0x0000ffff7ababab8)    ;; code: BUILTIN
0xffff7abab9c4   196  br x16
0xffff7abab9c8   200  tbz w1, #0, #+0x88 (addr 0xffff7ababa50)
0xffff7abab9cc   204  ldur x5, [x1, #-1]
0xffff7abab9d0   208  ldrb w5, [x5, #11]
0xffff7abab9d4   212  cmp x5, #0xc9 (201)
0xffff7abab9d8   216  b.ne #+0x78 (addr 0xffff7ababa50)
0xffff7abab9dc   220  ldur x5, [cp, #39]
0xffff7abab9e0   224  ldur x5, [x5, #95]
0xffff7abab9e4   228  cmp x1, x5
0xffff7abab9e8   232  b.eq #+0x68 (addr 0xffff7ababa50)
0xffff7abab9ec   236  ldur x4, [x1, #39]
0xffff7abab9f0   240  ldur x4, [x4, #39]
0xffff7abab9f4   244  ldur x5, [cp, #39]
0xffff7abab9f8   248  cmp x4, x5
0xffff7abab9fc   252  b.ne #+0x54 (addr 0xffff7ababa50)
0xffff7ababa00   256  movz x5, #0x200000000
0xffff7ababa04   260  adds x4, x2, x3, asr #29
0xffff7ababa08   264  stur x5, [x4, #23]
0xffff7ababa0c   268  movz x16, #0xc00000000
0xffff7ababa10   272  sub csp, jssp, #0x10 (16)
0xffff7ababa14   276  stp fp, lr, [jssp, #-16]!
0xffff7ababa18   280  sub csp, jssp, #0x10 (16)
0xffff7ababa1c   284  str x16, [jssp, #-8]!
0xffff7ababa20   288  ldr x17, pc+160 (addr 0x0000ffff7ababac0)    ;; object: 0xffff7abab8a1 <Code: CALL_IC>
0xffff7ababa24   292  sub csp, jssp, #0x10 (16)
0xffff7ababa28   296  str x17, [jssp, #-8]!
0xffff7ababa2c   300  add fp, jssp, #0x10 (16)
0xffff7ababa30   304  sub csp, jssp, #0x8 (8)
0xffff7ababa34   308  str x1, [jssp, #-8]!
0xffff7ababa38   312  ldr x16, pc+144 (addr 0x0000ffff7ababac8)    ;; code: STUB, CreateWeakCellStub, minor: 0
0xffff7ababa3c   316  blr x16
0xffff7ababa40   320  ldr x1, [jssp], #8
0xffff7ababa44   324  mov jssp, fp
0xffff7ababa48   328  ldp fp, lr, [jssp], #16
0xffff7ababa4c   332  b #-0x11c (addr 0xffff7abab930)
0xffff7ababa50   336  movz x16, #0xc00000000
0xffff7ababa54   340  sub csp, jssp, #0x10 (16)
0xffff7ababa58   344  stp fp, lr, [jssp, #-16]!
0xffff7ababa5c   348  sub csp, jssp, #0x10 (16)
0xffff7ababa60   352  str x16, [jssp, #-8]!
0xffff7ababa64   356  ldr x17, pc+108 (addr 0x0000ffff7ababad0)    ;; object: 0xffff7abab8a1 <Code: CALL_IC>
0xffff7ababa68   360  sub csp, jssp, #0x10 (16)
0xffff7ababa6c   364  str x17, [jssp, #-8]!
0xffff7ababa70   368  add fp, jssp, #0x10 (16)
0xffff7ababa74   372  sub csp, jssp, #0x18 (24)
0xffff7ababa78   376  stp x3, x2, [jssp, #-24]!
0xffff7ababa7c   380  str x1, [jssp, #16]
0xffff7ababa80   384  movz x0, #0x3
0xffff7ababa84   388  ldr x1, pc+84 (addr 0x0000ffff7ababad8)    ;; external reference (Runtime::CallIC_Miss)
0xffff7ababa88   392  ldr x16, pc+88 (addr 0x0000ffff7ababae0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ababa8c   396  blr x16
0xffff7ababa90   400  mov x1, x0
0xffff7ababa94   404  mov jssp, fp
0xffff7ababa98   408  ldp fp, lr, [jssp], #16
0xffff7ababa9c   412  b #-0xe0 (addr 0xffff7abab9bc)
0xffff7ababaa0   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7ababaa4   420  d63f03e0       constant
0xffff7ababaa8   424  7ab1e820       constant
0xffff7ababaac   428  0000ffff       constant
0xffff7ababab0   432  7ab33b00       constant
0xffff7ababab4   436  0000ffff       constant
0xffff7ababab8   440  7ab1f820       constant
0xffff7abababc   444  0000ffff       constant
0xffff7ababac0   448  7abab8a1       constant
0xffff7ababac4   452  0000ffff       constant
0xffff7ababac8   456  7ab0ddc0       constant
0xffff7ababacc   460  0000ffff       constant
0xffff7ababad0   464  7abab8a1       constant
0xffff7ababad4   468  0000ffff       constant
0xffff7ababad8   472  00c86928       constant
0xffff7ababadc   476  00000000       constant
0xffff7ababae0   480  7ab06060       constant
0xffff7ababae4   484  0000ffff       constant


RelocInfo (size = 19)
0xffff7abab934  code target (BUILTIN)  (0xffff7ab1e820)
0xffff7abab98c  code target (STUB)  (0xffff7ab33b00)
0xffff7abab9c0  code target (BUILTIN)  (0xffff7ab1f820)
0xffff7ababa20  embedded object  (0xffff7abab8a1 <Code: CALL_IC>)
0xffff7ababa38  code target (STUB)  (0xffff7ab0ddc0)
0xffff7ababa64  embedded object  (0xffff7abab8a1 <Code: CALL_IC>)
0xffff7ababa84  external reference (Runtime::CallIC_Miss)  (0xc86928)
0xffff7ababa88  code target (STUB)  (0xffff7ab06060)
0xffff7ababaa0  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 393222
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0xffff7ababb60     0  ldur x2, [fp, #-16]
0xffff7ababb64     4  ldur x2, [x2, #31]
0xffff7ababb68     8  ldur x2, [x2, #87]
0xffff7ababb6c    12  ldr x16, pc+20 (addr 0x0000ffff7ababb80)    ;; code: CALL_IC, GENERIC
0xffff7ababb70    16  br x16
0xffff7ababb74    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ababb78    24  d63f03e0       constant
0xffff7ababb7c    28  d503201f       constant
0xffff7ababb80    32  7abab900       constant
0xffff7ababb84    36  0000ffff       constant


RelocInfo (size = 7)
0xffff7ababb6c  code target (CALL_IC)  (0xffff7abab900)
0xffff7ababb74  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 168)
0xffff7abacde0     0  ldur x4, [x1, #15]
0xffff7abacde4     4  ldur w5, [x4, #11]
0xffff7abacde8     8  tbnz w2, #0, #+0x20 (addr 0xffff7abace08)
0xffff7abacdec    12  asr x7, x2, #32
0xffff7abacdf0    16  cmp w7, w5
0xffff7abacdf4    20  b.hs #+0x3c (addr 0xffff7abace30)
0xffff7abacdf8    24  add x0, x4, #0xf (15)
0xffff7abacdfc    28  ldr x1, [x0, w7, sxtw #3]
0xffff7abace00    32  mov x0, x1
0xffff7abace04    36  ret
0xffff7abace08    40  ldur x16, [x2, #-1]
0xffff7abace0c    44  ldr x17, [x26, #120]
0xffff7abace10    48  cmp x16, x17
0xffff7abace14    52  b.ne #+0x2c (addr 0xffff7abace40)
0xffff7abace18    56  ldur d29, [x2, #7]
0xffff7abace1c    60  fcvtzs w7, d29
0xffff7abace20    64  scvtf d0, w7
0xffff7abace24    68  fcmp d29, d0
0xffff7abace28    72  b.ne #+0x18 (addr 0xffff7abace40)
0xffff7abace2c    76  b #-0x3c (addr 0xffff7abacdf0)
0xffff7abace30    80  movz x16, #0x0
0xffff7abace34    84  sub csp, jssp, #0x10 (16)
0xffff7abace38    88  stp fp, lr, [jssp, #-16]!
0xffff7abace3c    92  bl #+0x14 (addr 0xffff7abace50)
0xffff7abace40    96  movz x16, #0x8
0xffff7abace44   100  sub csp, jssp, #0x10 (16)
0xffff7abace48   104  stp fp, lr, [jssp, #-16]!
0xffff7abace4c   108  bl #+0x4 (addr 0xffff7abace50)
0xffff7abace50   112  movz x17, #0xa00000000
0xffff7abace54   116  sub csp, jssp, #0x10 (16)
0xffff7abace58   120  stp x17, cp, [jssp, #-16]!
0xffff7abace5c   124  add fp, jssp, #0x10 (16)
0xffff7abace60   128  ldr x17, pc+24 (addr 0x0000ffff7abace78)    ;; lazy deoptimization bailout 0
0xffff7abace64   132  add x17, x17, x16
0xffff7abace68   136  br x17
0xffff7abace6c   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abace70   144  d63f03e0       constant
0xffff7abace74   148  d503201f       constant
0xffff7abace78   152  7a906000       constant
0xffff7abace7c   156  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7abace60  runtime entry
0xffff7abace6c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = LoadFastElementStub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 168)
0xffff7abacde0     0  ldur x4, [x1, #15]
0xffff7abacde4     4  ldur w5, [x4, #11]
0xffff7abacde8     8  tbnz w2, #0, #+0x20 (addr 0xffff7abace08)
0xffff7abacdec    12  asr x7, x2, #32
0xffff7abacdf0    16  cmp w7, w5
0xffff7abacdf4    20  b.hs #+0x3c (addr 0xffff7abace30)
0xffff7abacdf8    24  add x0, x4, #0xf (15)
0xffff7abacdfc    28  ldr x1, [x0, w7, sxtw #3]
0xffff7abace00    32  mov x0, x1
0xffff7abace04    36  ret
0xffff7abace08    40  ldur x16, [x2, #-1]
0xffff7abace0c    44  ldr x17, [x26, #120]
0xffff7abace10    48  cmp x16, x17
0xffff7abace14    52  b.ne #+0x2c (addr 0xffff7abace40)
0xffff7abace18    56  ldur d29, [x2, #7]
0xffff7abace1c    60  fcvtzs w7, d29
0xffff7abace20    64  scvtf d0, w7
0xffff7abace24    68  fcmp d29, d0
0xffff7abace28    72  b.ne #+0x18 (addr 0xffff7abace40)
0xffff7abace2c    76  b #-0x3c (addr 0xffff7abacdf0)
0xffff7abace30    80  movz x16, #0x0
0xffff7abace34    84  sub csp, jssp, #0x10 (16)
0xffff7abace38    88  stp fp, lr, [jssp, #-16]!
0xffff7abace3c    92  bl #+0x14 (addr 0xffff7abace50)
0xffff7abace40    96  movz x16, #0x8
0xffff7abace44   100  sub csp, jssp, #0x10 (16)
0xffff7abace48   104  stp fp, lr, [jssp, #-16]!
0xffff7abace4c   108  bl #+0x4 (addr 0xffff7abace50)
0xffff7abace50   112  movz x17, #0xa00000000
0xffff7abace54   116  sub csp, jssp, #0x10 (16)
0xffff7abace58   120  stp x17, cp, [jssp, #-16]!
0xffff7abace5c   124  add fp, jssp, #0x10 (16)
0xffff7abace60   128  ldr x17, pc+24 (addr 0x0000ffff7abace78)    ;; lazy deoptimization bailout 0
0xffff7abace64   132  add x17, x17, x16
0xffff7abace68   136  br x17
0xffff7abace6c   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abace70   144  d63f03e0       constant
0xffff7abace74   148  d503201f       constant
0xffff7abace78   152  7a906000       constant
0xffff7abace7c   156  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7abace60  runtime entry
0xffff7abace6c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = removeListener
compiler = unknown
Instructions (size = 144)
0xffff7abade80     0  sub csp, jssp, #0x8 (8)
0xffff7abade84     4  str x3, [jssp, #-8]!
0xffff7abade88     8  sub csp, jssp, #0x8 (8)
0xffff7abade8c    12  str x4, [jssp, #-8]!
0xffff7abade90    16  ldr x5, pc+88 (addr 0x0000ffff7abadee8)    ;; object: 0x20dff459 WeakCell for 0x4ec2caa9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abade94    20  ldur x5, [x5, #7]
0xffff7abade98    24  tbz w5, #0, #+0x30 (addr 0xffff7abadec8)
0xffff7abade9c    28  ldursw x4, [x5, #15]
0xffff7abadea0    32  tbnz w4, #23, #+0x28 (addr 0xffff7abadec8)
0xffff7abadea4    36  ldur x4, [x5, #47]
0xffff7abadea8    40  ldur x4, [x4, #95]
0xffff7abadeac    44  cmp x0, x4
0xffff7abadeb0    48  b.ne #+0x18 (addr 0xffff7abadec8)
0xffff7abadeb4    52  ldr x4, [jssp], #8
0xffff7abadeb8    56  ldr x3, [jssp], #8
0xffff7abadebc    60  ldr x2, pc+52 (addr 0x0000ffff7abadef0)    ;; object: 0x20dc3a59 <String[14]: removeListener>
0xffff7abadec0    64  ldr x16, pc+56 (addr 0x0000ffff7abadef8)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0xffff7abadec4    68  br x16
0xffff7abadec8    72  ldr x2, pc+56 (addr 0x0000ffff7abadf00)    ;; object: 0x20dc3a59 <String[14]: removeListener>
0xffff7abadecc    76  ldr x4, [jssp], #8
0xffff7abaded0    80  ldr x3, [jssp], #8
0xffff7abaded4    84  ldr x16, pc+52 (addr 0x0000ffff7abadf08)    ;; code: BUILTIN
0xffff7abaded8    88  br x16
0xffff7abadedc    92  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0xffff7abadee0    96  d63f03e0       constant
0xffff7abadee4   100  d503201f       constant
0xffff7abadee8   104  20dff459       constant
0xffff7abadeec   108  00000000       constant
0xffff7abadef0   112  20dc3a59       constant
0xffff7abadef4   116  00000000       constant
0xffff7abadef8   120  7ab3cea0       constant
0xffff7abadefc   124  0000ffff       constant
0xffff7abadf00   128  20dc3a59       constant
0xffff7abadf04   132  00000000       constant
0xffff7abadf08   136  7ab22420       constant
0xffff7abadf0c   140  0000ffff       constant


RelocInfo (size = 11)
0xffff7abade90  embedded object  (0x20dff459 WeakCell for 0x4ec2caa9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abadebc  embedded object  (0x20dc3a59 <String[14]: removeListener>)
0xffff7abadec0  code target (HANDLER)  (0xffff7ab3cea0)
0xffff7abadec8  embedded object  (0x20dc3a59 <String[14]: removeListener>)
0xffff7abaded4  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abadedc  constant pool (size 52)

kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = STRING*INTERNALIZED_STRING -> STRING
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 416)
0xffff7abadf80     0  and x16, x0, x1
0xffff7abadf84     4  tbz w16, #0, #+0xfc (addr 0xffff7abae080)
0xffff7abadf88     8  ldur x11, [x1, #-1]
0xffff7abadf8c    12  ldur x10, [x0, #-1]
0xffff7abadf90    16  ldrb w11, [x11, #11]
0xffff7abadf94    20  ldrb w10, [x10, #11]
0xffff7abadf98    24  orr x12, x11, x10
0xffff7abadf9c    28  tbnz w12, #7, #+0xe4 (addr 0xffff7abae080)
0xffff7abadfa0    32  cmp x1, x0
0xffff7abadfa4    36  b.ne #+0xc (addr 0xffff7abadfb0)
0xffff7abadfa8    40  movz x0, #0x0
0xffff7abadfac    44  ret
0xffff7abadfb0    48  orr x12, x11, x10
0xffff7abadfb4    52  tbnz w12, #6, #+0x8 (addr 0xffff7abadfbc)
0xffff7abadfb8    56  ret
0xffff7abadfbc    60  movz x16, #0x87
0xffff7abadfc0    64  and x12, x11, x16
0xffff7abadfc4    68  movz x16, #0x87
0xffff7abadfc8    72  and x13, x10, x16
0xffff7abadfcc    76  cmp x12, #0x4 (4)
0xffff7abadfd0    80  ccmp x13, #4, #nzcv, eq
0xffff7abadfd4    84  b.ne #+0x5c (addr 0xffff7abae030)
0xffff7abadfd8    88  ldur x10, [x1, #15]
0xffff7abadfdc    92  ldur x11, [x0, #15]
0xffff7abadfe0    96  cmp x10, x11
0xffff7abadfe4   100  b.eq #+0xc (addr 0xffff7abadff0)
0xffff7abadfe8   104  movz x0, #0x100000000
0xffff7abadfec   108  ret
0xffff7abadff0   112  cbnz x10, #+0xc (addr 0xffff7abadffc)
0xffff7abadff4   116  movz x0, #0x0
0xffff7abadff8   120  ret
0xffff7abadffc   124  asr x10, x10, #32
0xffff7abae000   128  add x11, x10, #0x17 (23)
0xffff7abae004   132  add x1, x1, x11
0xffff7abae008   136  add x0, x0, x11
0xffff7abae00c   140  neg x10, x10
0xffff7abae010   144  ldrb w11, [x1, x10]
0xffff7abae014   148  ldrb w12, [x0, x10]
0xffff7abae018   152  cmp x11, x12
0xffff7abae01c   156  b.ne #-0x34 (addr 0xffff7abadfe8)
0xffff7abae020   160  add x10, x10, #0x1 (1)
0xffff7abae024   164  cbnz x10, #-0x14 (addr 0xffff7abae010)
0xffff7abae028   168  movz x0, #0x0
0xffff7abae02c   172  ret
0xffff7abae030   176  movz x16, #0xc00000000
0xffff7abae034   180  sub csp, jssp, #0x10 (16)
0xffff7abae038   184  stp fp, lr, [jssp, #-16]!
0xffff7abae03c   188  sub csp, jssp, #0x10 (16)
0xffff7abae040   192  str x16, [jssp, #-8]!
0xffff7abae044   196  ldr x17, pc+172 (addr 0x0000ffff7abae0f0)    ;; object: 0xffff7abadf21 <Code: COMPARE_IC>
0xffff7abae048   200  sub csp, jssp, #0x10 (16)
0xffff7abae04c   204  str x17, [jssp, #-8]!
0xffff7abae050   208  add fp, jssp, #0x10 (16)
0xffff7abae054   212  sub csp, jssp, #0x10 (16)
0xffff7abae058   216  stp x0, x1, [jssp, #-16]!
0xffff7abae05c   220  movz x0, #0x2
0xffff7abae060   224  ldr x1, pc+152 (addr 0x0000ffff7abae0f8)    ;; external reference (Runtime::StringEqual)
0xffff7abae064   228  ldr x16, pc+156 (addr 0x0000ffff7abae100)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abae068   232  blr x16
0xffff7abae06c   236  mov jssp, fp
0xffff7abae070   240  ldp fp, lr, [jssp], #16
0xffff7abae074   244  ldr x1, [x26, #64]
0xffff7abae078   248  sub x0, x0, x1
0xffff7abae07c   252  ret
0xffff7abae080   256  movz x16, #0xc00000000
0xffff7abae084   260  sub csp, jssp, #0x10 (16)
0xffff7abae088   264  stp fp, lr, [jssp, #-16]!
0xffff7abae08c   268  sub csp, jssp, #0x10 (16)
0xffff7abae090   272  str x16, [jssp, #-8]!
0xffff7abae094   276  ldr x17, pc+116 (addr 0x0000ffff7abae108)    ;; object: 0xffff7abadf21 <Code: COMPARE_IC>
0xffff7abae098   280  sub csp, jssp, #0x10 (16)
0xffff7abae09c   284  str x17, [jssp, #-8]!
0xffff7abae0a0   288  add fp, jssp, #0x10 (16)
0xffff7abae0a4   292  sub csp, jssp, #0x18 (24)
0xffff7abae0a8   296  stp lr, x0, [jssp, #-24]!
0xffff7abae0ac   300  str x1, [jssp, #16]
0xffff7abae0b0   304  movz x10, #0x2f00000000
0xffff7abae0b4   308  sub csp, jssp, #0x18 (24)
0xffff7abae0b8   312  stp x10, x0, [jssp, #-24]!
0xffff7abae0bc   316  str x1, [jssp, #16]
0xffff7abae0c0   320  movz x0, #0x3
0xffff7abae0c4   324  ldr x1, pc+76 (addr 0x0000ffff7abae110)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7abae0c8   328  ldr x16, pc+80 (addr 0x0000ffff7abae118)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abae0cc   332  blr x16
0xffff7abae0d0   336  add x11, x0, #0x5f (95)
0xffff7abae0d4   340  ldr x1, [jssp, #16]
0xffff7abae0d8   344  ldp lr, x0, [jssp], #24
0xffff7abae0dc   348  mov jssp, fp
0xffff7abae0e0   352  ldp fp, lr, [jssp], #16
0xffff7abae0e4   356  br x11
0xffff7abae0e8   360  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abae0ec   364  d63f03e0       constant
0xffff7abae0f0   368  7abadf21       constant
0xffff7abae0f4   372  0000ffff       constant
0xffff7abae0f8   376  00ed0748       constant
0xffff7abae0fc   380  00000000       constant
0xffff7abae100   384  7ab06060       constant
0xffff7abae104   388  0000ffff       constant
0xffff7abae108   392  7abadf21       constant
0xffff7abae10c   396  0000ffff       constant
0xffff7abae110   400  00c8a980       constant
0xffff7abae114   404  00000000       constant
0xffff7abae118   408  7ab06060       constant
0xffff7abae11c   412  0000ffff       constant


RelocInfo (size = 16)
0xffff7abae044  embedded object  (0xffff7abadf21 <Code: COMPARE_IC>)
0xffff7abae060  external reference (Runtime::StringEqual)  (0xed0748)
0xffff7abae064  code target (STUB)  (0xffff7ab06060)
0xffff7abae094  embedded object  (0xffff7abadf21 <Code: COMPARE_IC>)
0xffff7abae0c4  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7abae0c8  code target (STUB)  (0xffff7ab06060)
0xffff7abae0e8  constant pool (size 56)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 262146
name = CallICStub(args(2), NULL_OR_UNDEFINED, 
compiler = unknown
Instructions (size = 488)
0xffff7abae180     0  add x4, x2, x3, asr #29
0xffff7abae184     4  ldur x4, [x4, #15]
0xffff7abae188     8  ldur x5, [x4, #7]
0xffff7abae18c    12  cmp x5, x1
0xffff7abae190    16  b.ne #+0x2c (addr 0xffff7abae1bc)
0xffff7abae194    20  tbz w1, #0, #+0x28 (addr 0xffff7abae1bc)
0xffff7abae198    24  add x2, x2, x3, asr #29
0xffff7abae19c    28  add x2, x2, #0x18 (24)
0xffff7abae1a0    32  ldur x3, [x2, #-1]
0xffff7abae1a4    36  movz x16, #0x200000000
0xffff7abae1a8    40  add x3, x3, x16
0xffff7abae1ac    44  stur x3, [x2, #-1]
0xffff7abae1b0    48  movz x0, #0x2
0xffff7abae1b4    52  ldr x16, pc+372 (addr 0x0000ffff7abae328)    ;; code: BUILTIN
0xffff7abae1b8    56  br x16
0xffff7abae1bc    60  ldr x16, [x26, #2400]
0xffff7abae1c0    64  cmp x4, x16
0xffff7abae1c4    68  b.eq #+0x78 (addr 0xffff7abae23c)
0xffff7abae1c8    72  ldur x5, [x4, #-1]
0xffff7abae1cc    76  ldr x16, [x26, #2736]
0xffff7abae1d0    80  cmp x5, x16
0xffff7abae1d4    84  b.ne #+0x40 (addr 0xffff7abae214)
0xffff7abae1d8    88  ldur x5, [cp, #39]
0xffff7abae1dc    92  ldur x5, [x5, #95]
0xffff7abae1e0    96  cmp x1, x5
0xffff7abae1e4   100  b.ne #+0xec (addr 0xffff7abae2d0)
0xffff7abae1e8   104  movz x0, #0x2
0xffff7abae1ec   108  add x2, x2, x3, asr #29
0xffff7abae1f0   112  add x2, x2, #0x18 (24)
0xffff7abae1f4   116  ldur x3, [x2, #-1]
0xffff7abae1f8   120  movz x16, #0x200000000
0xffff7abae1fc   124  add x3, x3, x16
0xffff7abae200   128  stur x3, [x2, #-1]
0xffff7abae204   132  mov x2, x4
0xffff7abae208   136  mov x3, x1
0xffff7abae20c   140  ldr x16, pc+292 (addr 0x0000ffff7abae330)    ;; code: STUB, ArrayConstructorStub, minor: 3
0xffff7abae210   144  br x16
0xffff7abae214   148  ldr x16, [x26, #2568]
0xffff7abae218   152  cmp x4, x16
0xffff7abae21c   156  b.eq #+0xb4 (addr 0xffff7abae2d0)
0xffff7abae220   160  ldur x5, [x4, #-1]
0xffff7abae224   164  ldrb w5, [x5, #11]
0xffff7abae228   168  cmp x5, #0xc9 (201)
0xffff7abae22c   172  b.ne #+0xa4 (addr 0xffff7abae2d0)
0xffff7abae230   176  add x4, x2, x3, asr #29
0xffff7abae234   180  ldr x5, [x26, #2400]
0xffff7abae238   184  stur x5, [x4, #15]
0xffff7abae23c   188  movz x0, #0x2
0xffff7abae240   192  ldr x16, pc+248 (addr 0x0000ffff7abae338)    ;; code: BUILTIN
0xffff7abae244   196  br x16
0xffff7abae248   200  tbz w1, #0, #+0x88 (addr 0xffff7abae2d0)
0xffff7abae24c   204  ldur x5, [x1, #-1]
0xffff7abae250   208  ldrb w5, [x5, #11]
0xffff7abae254   212  cmp x5, #0xc9 (201)
0xffff7abae258   216  b.ne #+0x78 (addr 0xffff7abae2d0)
0xffff7abae25c   220  ldur x5, [cp, #39]
0xffff7abae260   224  ldur x5, [x5, #95]
0xffff7abae264   228  cmp x1, x5
0xffff7abae268   232  b.eq #+0x68 (addr 0xffff7abae2d0)
0xffff7abae26c   236  ldur x4, [x1, #39]
0xffff7abae270   240  ldur x4, [x4, #39]
0xffff7abae274   244  ldur x5, [cp, #39]
0xffff7abae278   248  cmp x4, x5
0xffff7abae27c   252  b.ne #+0x54 (addr 0xffff7abae2d0)
0xffff7abae280   256  movz x5, #0x200000000
0xffff7abae284   260  adds x4, x2, x3, asr #29
0xffff7abae288   264  stur x5, [x4, #23]
0xffff7abae28c   268  movz x16, #0xc00000000
0xffff7abae290   272  sub csp, jssp, #0x10 (16)
0xffff7abae294   276  stp fp, lr, [jssp, #-16]!
0xffff7abae298   280  sub csp, jssp, #0x10 (16)
0xffff7abae29c   284  str x16, [jssp, #-8]!
0xffff7abae2a0   288  ldr x17, pc+160 (addr 0x0000ffff7abae340)    ;; object: 0xffff7abae121 <Code: CALL_IC>
0xffff7abae2a4   292  sub csp, jssp, #0x10 (16)
0xffff7abae2a8   296  str x17, [jssp, #-8]!
0xffff7abae2ac   300  add fp, jssp, #0x10 (16)
0xffff7abae2b0   304  sub csp, jssp, #0x8 (8)
0xffff7abae2b4   308  str x1, [jssp, #-8]!
0xffff7abae2b8   312  ldr x16, pc+144 (addr 0x0000ffff7abae348)    ;; code: STUB, CreateWeakCellStub, minor: 0
0xffff7abae2bc   316  blr x16
0xffff7abae2c0   320  ldr x1, [jssp], #8
0xffff7abae2c4   324  mov jssp, fp
0xffff7abae2c8   328  ldp fp, lr, [jssp], #16
0xffff7abae2cc   332  b #-0x11c (addr 0xffff7abae1b0)
0xffff7abae2d0   336  movz x16, #0xc00000000
0xffff7abae2d4   340  sub csp, jssp, #0x10 (16)
0xffff7abae2d8   344  stp fp, lr, [jssp, #-16]!
0xffff7abae2dc   348  sub csp, jssp, #0x10 (16)
0xffff7abae2e0   352  str x16, [jssp, #-8]!
0xffff7abae2e4   356  ldr x17, pc+108 (addr 0x0000ffff7abae350)    ;; object: 0xffff7abae121 <Code: CALL_IC>
0xffff7abae2e8   360  sub csp, jssp, #0x10 (16)
0xffff7abae2ec   364  str x17, [jssp, #-8]!
0xffff7abae2f0   368  add fp, jssp, #0x10 (16)
0xffff7abae2f4   372  sub csp, jssp, #0x18 (24)
0xffff7abae2f8   376  stp x3, x2, [jssp, #-24]!
0xffff7abae2fc   380  str x1, [jssp, #16]
0xffff7abae300   384  movz x0, #0x3
0xffff7abae304   388  ldr x1, pc+84 (addr 0x0000ffff7abae358)    ;; external reference (Runtime::CallIC_Miss)
0xffff7abae308   392  ldr x16, pc+88 (addr 0x0000ffff7abae360)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abae30c   396  blr x16
0xffff7abae310   400  mov x1, x0
0xffff7abae314   404  mov jssp, fp
0xffff7abae318   408  ldp fp, lr, [jssp], #16
0xffff7abae31c   412  b #-0xe0 (addr 0xffff7abae23c)
0xffff7abae320   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7abae324   420  d63f03e0       constant
0xffff7abae328   424  7ab1e280       constant
0xffff7abae32c   428  0000ffff       constant
0xffff7abae330   432  7ab33b00       constant
0xffff7abae334   436  0000ffff       constant
0xffff7abae338   440  7ab1f560       constant
0xffff7abae33c   444  0000ffff       constant
0xffff7abae340   448  7abae121       constant
0xffff7abae344   452  0000ffff       constant
0xffff7abae348   456  7ab0ddc0       constant
0xffff7abae34c   460  0000ffff       constant
0xffff7abae350   464  7abae121       constant
0xffff7abae354   468  0000ffff       constant
0xffff7abae358   472  00c86928       constant
0xffff7abae35c   476  00000000       constant
0xffff7abae360   480  7ab06060       constant
0xffff7abae364   484  0000ffff       constant


RelocInfo (size = 19)
0xffff7abae1b4  code target (BUILTIN)  (0xffff7ab1e280)
0xffff7abae20c  code target (STUB)  (0xffff7ab33b00)
0xffff7abae240  code target (BUILTIN)  (0xffff7ab1f560)
0xffff7abae2a0  embedded object  (0xffff7abae121 <Code: CALL_IC>)
0xffff7abae2b8  code target (STUB)  (0xffff7ab0ddc0)
0xffff7abae2e4  embedded object  (0xffff7abae121 <Code: CALL_IC>)
0xffff7abae304  external reference (Runtime::CallIC_Miss)  (0xc86928)
0xffff7abae308  code target (STUB)  (0xffff7ab06060)
0xffff7abae320  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 262146
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0xffff7abae3e0     0  ldur x2, [fp, #-16]
0xffff7abae3e4     4  ldur x2, [x2, #31]
0xffff7abae3e8     8  ldur x2, [x2, #87]
0xffff7abae3ec    12  ldr x16, pc+20 (addr 0x0000ffff7abae400)    ;; code: CALL_IC, GENERIC
0xffff7abae3f0    16  br x16
0xffff7abae3f4    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abae3f8    24  d63f03e0       constant
0xffff7abae3fc    28  d503201f       constant
0xffff7abae400    32  7abae180       constant
0xffff7abae404    36  0000ffff       constant


RelocInfo (size = 7)
0xffff7abae3ec  code target (CALL_IC)  (0xffff7abae180)
0xffff7abae3f4  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7abaed80     0  tbz w0, #0, #+0x98 (addr 0xffff7abaee18)
0xffff7abaed84     4  mov x2, x0
0xffff7abaed88     8  ldur x4, [x1, #7]
0xffff7abaed8c    12  stur x2, [x4, #79]
0xffff7abaed90    16  add x3, x4, #0x4f (79)
0xffff7abaed94    20  and x2, x2, #0xfffffffffff00000
0xffff7abaed98    24  ldr x2, [x2, #8]
0xffff7abaed9c    28  tbz w2, #1, #+0x24 (addr 0xffff7abaedc0)
0xffff7abaeda0    32  and x2, x4, #0xfffffffffff00000
0xffff7abaeda4    36  ldr x2, [x2, #8]
0xffff7abaeda8    40  tbz w2, #2, #+0x18 (addr 0xffff7abaedc0)
0xffff7abaedac    44  sub csp, jssp, #0x8 (8)
0xffff7abaedb0    48  str lr, [jssp, #-8]!
0xffff7abaedb4    52  ldr x16, pc+84 (addr 0x0000ffff7abaee08)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abaedb8    56  blr x16
0xffff7abaedbc    60  ldr lr, [jssp], #8
0xffff7abaedc0    64  stur x5, [x1, #-1]
0xffff7abaedc4    68  tbz w5, #0, #+0x34 (addr 0xffff7abaedf8)
0xffff7abaedc8    72  sub x2, x1, #0x1 (1)
0xffff7abaedcc    76  and x5, x5, #0xfffffffffff00000
0xffff7abaedd0    80  ldr x5, [x5, #8]
0xffff7abaedd4    84  tbz w5, #1, #+0x24 (addr 0xffff7abaedf8)
0xffff7abaedd8    88  and x5, x1, #0xfffffffffff00000
0xffff7abaeddc    92  ldr x5, [x5, #8]
0xffff7abaede0    96  tbz w5, #2, #+0x18 (addr 0xffff7abaedf8)
0xffff7abaede4   100  sub csp, jssp, #0x8 (8)
0xffff7abaede8   104  str lr, [jssp, #-8]!
0xffff7abaedec   108  ldr x16, pc+36 (addr 0x0000ffff7abaee10)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abaedf0   112  blr x16
0xffff7abaedf4   116  ldr lr, [jssp], #8
0xffff7abaedf8   120  ret
0xffff7abaedfc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abaee00   128  d63f03e0       constant
0xffff7abaee04   132  d503201f       constant
0xffff7abaee08   136  7ab378a0       constant
0xffff7abaee0c   140  0000ffff       constant
0xffff7abaee10   144  7ab38080       constant
0xffff7abaee14   148  0000ffff       constant
0xffff7abaee18   152  movz x16, #0x0
0xffff7abaee1c   156  sub csp, jssp, #0x10 (16)
0xffff7abaee20   160  stp fp, lr, [jssp, #-16]!
0xffff7abaee24   164  bl #+0x4 (addr 0xffff7abaee28)
0xffff7abaee28   168  movz x17, #0xa00000000
0xffff7abaee2c   172  sub csp, jssp, #0x10 (16)
0xffff7abaee30   176  stp x17, cp, [jssp, #-16]!
0xffff7abaee34   180  add fp, jssp, #0x10 (16)
0xffff7abaee38   184  ldr x17, pc+24 (addr 0x0000ffff7abaee50)    ;; lazy deoptimization bailout 0
0xffff7abaee3c   188  add x17, x17, x16
0xffff7abaee40   192  br x17
0xffff7abaee44   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abaee48   200  d63f03e0       constant
0xffff7abaee4c   204  d503201f       constant
0xffff7abaee50   208  7a906000       constant
0xffff7abaee54   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abaedb4  code target (STUB)  (0xffff7ab378a0)
0xffff7abaedec  code target (STUB)  (0xffff7ab38080)
0xffff7abaedfc  constant pool (size 28)
0xffff7abaee38  runtime entry
0xffff7abaee44  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7abaed80     0  tbz w0, #0, #+0x98 (addr 0xffff7abaee18)
0xffff7abaed84     4  mov x2, x0
0xffff7abaed88     8  ldur x4, [x1, #7]
0xffff7abaed8c    12  stur x2, [x4, #79]
0xffff7abaed90    16  add x3, x4, #0x4f (79)
0xffff7abaed94    20  and x2, x2, #0xfffffffffff00000
0xffff7abaed98    24  ldr x2, [x2, #8]
0xffff7abaed9c    28  tbz w2, #1, #+0x24 (addr 0xffff7abaedc0)
0xffff7abaeda0    32  and x2, x4, #0xfffffffffff00000
0xffff7abaeda4    36  ldr x2, [x2, #8]
0xffff7abaeda8    40  tbz w2, #2, #+0x18 (addr 0xffff7abaedc0)
0xffff7abaedac    44  sub csp, jssp, #0x8 (8)
0xffff7abaedb0    48  str lr, [jssp, #-8]!
0xffff7abaedb4    52  ldr x16, pc+84 (addr 0x0000ffff7abaee08)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abaedb8    56  blr x16
0xffff7abaedbc    60  ldr lr, [jssp], #8
0xffff7abaedc0    64  stur x5, [x1, #-1]
0xffff7abaedc4    68  tbz w5, #0, #+0x34 (addr 0xffff7abaedf8)
0xffff7abaedc8    72  sub x2, x1, #0x1 (1)
0xffff7abaedcc    76  and x5, x5, #0xfffffffffff00000
0xffff7abaedd0    80  ldr x5, [x5, #8]
0xffff7abaedd4    84  tbz w5, #1, #+0x24 (addr 0xffff7abaedf8)
0xffff7abaedd8    88  and x5, x1, #0xfffffffffff00000
0xffff7abaeddc    92  ldr x5, [x5, #8]
0xffff7abaede0    96  tbz w5, #2, #+0x18 (addr 0xffff7abaedf8)
0xffff7abaede4   100  sub csp, jssp, #0x8 (8)
0xffff7abaede8   104  str lr, [jssp, #-8]!
0xffff7abaedec   108  ldr x16, pc+36 (addr 0x0000ffff7abaee10)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abaedf0   112  blr x16
0xffff7abaedf4   116  ldr lr, [jssp], #8
0xffff7abaedf8   120  ret
0xffff7abaedfc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abaee00   128  d63f03e0       constant
0xffff7abaee04   132  d503201f       constant
0xffff7abaee08   136  7ab378a0       constant
0xffff7abaee0c   140  0000ffff       constant
0xffff7abaee10   144  7ab38080       constant
0xffff7abaee14   148  0000ffff       constant
0xffff7abaee18   152  movz x16, #0x0
0xffff7abaee1c   156  sub csp, jssp, #0x10 (16)
0xffff7abaee20   160  stp fp, lr, [jssp, #-16]!
0xffff7abaee24   164  bl #+0x4 (addr 0xffff7abaee28)
0xffff7abaee28   168  movz x17, #0xa00000000
0xffff7abaee2c   172  sub csp, jssp, #0x10 (16)
0xffff7abaee30   176  stp x17, cp, [jssp, #-16]!
0xffff7abaee34   180  add fp, jssp, #0x10 (16)
0xffff7abaee38   184  ldr x17, pc+24 (addr 0x0000ffff7abaee50)    ;; lazy deoptimization bailout 0
0xffff7abaee3c   188  add x17, x17, x16
0xffff7abaee40   192  br x17
0xffff7abaee44   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abaee48   200  d63f03e0       constant
0xffff7abaee4c   204  d503201f       constant
0xffff7abaee50   208  7a906000       constant
0xffff7abaee54   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abaedb4  code target (STUB)  (0xffff7ab378a0)
0xffff7abaedec  code target (STUB)  (0xffff7ab38080)
0xffff7abaedfc  constant pool (size 28)
0xffff7abaee38  runtime entry
0xffff7abaee44  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = path
compiler = unknown
Instructions (size = 184)
0xffff7abaeec0     0  sub csp, jssp, #0x8 (8)
0xffff7abaeec4     4  str x3, [jssp, #-8]!
0xffff7abaeec8     8  sub csp, jssp, #0x8 (8)
0xffff7abaeecc    12  str x4, [jssp, #-8]!
0xffff7abaeed0    16  ldr x3, pc+112 (addr 0x0000ffff7abaef40)    ;; object: 0x20d63e59 Cell for 0
0xffff7abaeed4    20  ldur x3, [x3, #7]
0xffff7abaeed8    24  cmp x3, #0x0 (0)
0xffff7abaeedc    28  b.ne #+0x44 (addr 0xffff7abaef20)
0xffff7abaeee0    32  tbz w0, #0, #+0x40 (addr 0xffff7abaef20)
0xffff7abaeee4    36  ldur x3, [x0, #-1]
0xffff7abaeee8    40  ldr x4, pc+96 (addr 0x0000ffff7abaef48)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abaeeec    44  ldur x4, [x4, #7]
0xffff7abaeef0    48  cmp x3, x4
0xffff7abaeef4    52  b.ne #+0x2c (addr 0xffff7abaef20)
0xffff7abaeef8    56  ldr x5, pc+88 (addr 0x0000ffff7abaef50)    ;; object: 0x20dffb89 WeakCell for 0x4ec2cbb1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abaeefc    60  ldur x5, [x5, #7]
0xffff7abaef00    64  tbz w5, #0, #+0x20 (addr 0xffff7abaef20)
0xffff7abaef04    68  ldursw x4, [x5, #15]
0xffff7abaef08    72  tbnz w4, #23, #+0x18 (addr 0xffff7abaef20)
0xffff7abaef0c    76  ldr x4, [jssp], #8
0xffff7abaef10    80  ldr x3, [jssp], #8
0xffff7abaef14    84  ldr x2, pc+68 (addr 0x0000ffff7abaef58)    ;; object: 0x20db2e69 <String[4]: path>
0xffff7abaef18    88  ldr x16, pc+72 (addr 0x0000ffff7abaef60)    ;; code: HANDLER, StoreTransitionStub, minor: 196618
0xffff7abaef1c    92  br x16
0xffff7abaef20    96  ldr x2, pc+72 (addr 0x0000ffff7abaef68)    ;; object: 0x20db2e69 <String[4]: path>
0xffff7abaef24   100  ldr x4, [jssp], #8
0xffff7abaef28   104  ldr x3, [jssp], #8
0xffff7abaef2c   108  ldr x16, pc+68 (addr 0x0000ffff7abaef70)    ;; code: BUILTIN
0xffff7abaef30   112  br x16
0xffff7abaef34   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abaef38   120  d63f03e0       constant
0xffff7abaef3c   124  d503201f       constant
0xffff7abaef40   128  20d63e59       constant
0xffff7abaef44   132  00000000       constant
0xffff7abaef48   136  20dc22b1       constant
0xffff7abaef4c   140  00000000       constant
0xffff7abaef50   144  20dffb89       constant
0xffff7abaef54   148  00000000       constant
0xffff7abaef58   152  20db2e69       constant
0xffff7abaef5c   156  00000000       constant
0xffff7abaef60   160  7abaed80       constant
0xffff7abaef64   164  0000ffff       constant
0xffff7abaef68   168  20db2e69       constant
0xffff7abaef6c   172  00000000       constant
0xffff7abaef70   176  7ab22420       constant
0xffff7abaef74   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abaeed0  embedded object  (0x20d63e59 Cell for 0)
0xffff7abaeee8  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abaeef8  embedded object  (0x20dffb89 WeakCell for 0x4ec2cbb1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abaef14  embedded object  (0x20db2e69 <String[4]: path>)
0xffff7abaef18  code target (HANDLER)  (0xffff7abaed80)
0xffff7abaef20  embedded object  (0x20db2e69 <String[4]: path>)
0xffff7abaef2c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abaef34  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = charCodeAt
compiler = unknown
Instructions (size = 152)
0xffff7abb0e00     0  sub csp, jssp, #0x8 (8)
0xffff7abb0e04     4  str x3, [jssp, #-8]!
0xffff7abb0e08     8  sub csp, jssp, #0x8 (8)
0xffff7abb0e0c    12  str x0, [jssp, #-8]!
0xffff7abb0e10    16  ldur x3, [cp, #39]
0xffff7abb0e14    20  movz x16, #0x2e7
0xffff7abb0e18    24  ldr x3, [x3, x16]
0xffff7abb0e1c    28  ldur x3, [x3, #23]
0xffff7abb0e20    32  ldur x3, [x3, #23]
0xffff7abb0e24    36  ldr x0, pc+84 (addr 0x0000ffff7abb0e78)    ;; object: 0x20d63e59 Cell for 0
0xffff7abb0e28    40  ldur x0, [x0, #7]
0xffff7abb0e2c    44  cmp x0, #0x0 (0)
0xffff7abb0e30    48  b.ne #+0x1c (addr 0xffff7abb0e4c)
0xffff7abb0e34    52  ldur x0, [x3, #-1]
0xffff7abb0e38    56  ldr x4, pc+72 (addr 0x0000ffff7abb0e80)    ;; object: 0x5d406e39 WeakCell for 0x4ec156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>
0xffff7abb0e3c    60  ldur x4, [x4, #7]
0xffff7abb0e40    64  cmp x0, x4
0xffff7abb0e44    68  b.ne #+0x8 (addr 0xffff7abb0e4c)
0xffff7abb0e48    72  b #+0x14 (addr 0xffff7abb0e5c)
0xffff7abb0e4c    76  ldr x0, [jssp], #8
0xffff7abb0e50    80  ldr x3, [jssp], #8
0xffff7abb0e54    84  ldr x16, pc+52 (addr 0x0000ffff7abb0e88)    ;; code: BUILTIN
0xffff7abb0e58    88  br x16
0xffff7abb0e5c    92  add jssp, jssp, #0x10 (16)
0xffff7abb0e60    96  mov x1, x3
0xffff7abb0e64   100  ldr x16, pc+44 (addr 0x0000ffff7abb0e90)    ;; code: HANDLER, LoadConstantStub, minor: 5
0xffff7abb0e68   104  br x16
0xffff7abb0e6c   108  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0xffff7abb0e70   112  d63f03e0       constant
0xffff7abb0e74   116  d503201f       constant
0xffff7abb0e78   120  20d63e59       constant
0xffff7abb0e7c   124  00000000       constant
0xffff7abb0e80   128  5d406e39       constant
0xffff7abb0e84   132  00000000       constant
0xffff7abb0e88   136  7ab222e0       constant
0xffff7abb0e8c   140  0000ffff       constant
0xffff7abb0e90   144  7ab43500       constant
0xffff7abb0e94   148  0000ffff       constant


RelocInfo (size = 10)
0xffff7abb0e24  embedded object  (0x20d63e59 Cell for 0)
0xffff7abb0e38  embedded object  (0x5d406e39 WeakCell for 0x4ec156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>)
0xffff7abb0e54  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abb0e64  code target (HANDLER)  (0xffff7ab43500)
0xffff7abb0e6c  constant pool (size 44)

kind = COMPARE_IC
major_key = CompareICStub
ic_state = UNINITIALIZED
extra_ic_state = 0
compare_state = UNINITIALIZED*UNINITIALIZED -> UNINITIALIZED
compare_operation = LTE
name = CompareICStub
compiler = unknown
Instructions (size = 136)
0xffff7abb0f00     0  movz x16, #0xc00000000
0xffff7abb0f04     4  sub csp, jssp, #0x10 (16)
0xffff7abb0f08     8  stp fp, lr, [jssp, #-16]!
0xffff7abb0f0c    12  sub csp, jssp, #0x10 (16)
0xffff7abb0f10    16  str x16, [jssp, #-8]!
0xffff7abb0f14    20  ldr x17, pc+92 (addr 0x0000ffff7abb0f70)    ;; object: 0xffff7abb0ea1 <Code: COMPARE_IC>
0xffff7abb0f18    24  sub csp, jssp, #0x10 (16)
0xffff7abb0f1c    28  str x17, [jssp, #-8]!
0xffff7abb0f20    32  add fp, jssp, #0x10 (16)
0xffff7abb0f24    36  sub csp, jssp, #0x18 (24)
0xffff7abb0f28    40  stp lr, x0, [jssp, #-24]!
0xffff7abb0f2c    44  str x1, [jssp, #16]
0xffff7abb0f30    48  movz x10, #0x3300000000
0xffff7abb0f34    52  sub csp, jssp, #0x18 (24)
0xffff7abb0f38    56  stp x10, x0, [jssp, #-24]!
0xffff7abb0f3c    60  str x1, [jssp, #16]
0xffff7abb0f40    64  movz x0, #0x3
0xffff7abb0f44    68  ldr x1, pc+52 (addr 0x0000ffff7abb0f78)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7abb0f48    72  ldr x16, pc+56 (addr 0x0000ffff7abb0f80)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abb0f4c    76  blr x16
0xffff7abb0f50    80  add x11, x0, #0x5f (95)
0xffff7abb0f54    84  ldr x1, [jssp, #16]
0xffff7abb0f58    88  ldp lr, x0, [jssp], #24
0xffff7abb0f5c    92  mov jssp, fp
0xffff7abb0f60    96  ldp fp, lr, [jssp], #16
0xffff7abb0f64   100  br x11
0xffff7abb0f68   104  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7abb0f6c   108  d63f03e0       constant
0xffff7abb0f70   112  7abb0ea1       constant
0xffff7abb0f74   116  0000ffff       constant
0xffff7abb0f78   120  00c8a980       constant
0xffff7abb0f7c   124  00000000       constant
0xffff7abb0f80   128  7ab06060       constant
0xffff7abb0f84   132  0000ffff       constant


RelocInfo (size = 10)
0xffff7abb0f14  embedded object  (0xffff7abb0ea1 <Code: COMPARE_IC>)
0xffff7abb0f44  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7abb0f48  code target (STUB)  (0xffff7ab06060)
0xffff7abb0f68  constant pool (size 32)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = SMI*SMI -> SMI
compare_operation = LTE
name = CompareICStub
compiler = unknown
Instructions (size = 160)
0xffff7abb2220     0  orr x16, x0, x1
0xffff7abb2224     4  tbnz w16, #0, #+0x10 (addr 0xffff7abb2234)
0xffff7abb2228     8  asr x1, x1, #32
0xffff7abb222c    12  sub x0, x1, x0, asr #32
0xffff7abb2230    16  ret
0xffff7abb2234    20  movz x16, #0xc00000000
0xffff7abb2238    24  sub csp, jssp, #0x10 (16)
0xffff7abb223c    28  stp fp, lr, [jssp, #-16]!
0xffff7abb2240    32  sub csp, jssp, #0x10 (16)
0xffff7abb2244    36  str x16, [jssp, #-8]!
0xffff7abb2248    40  ldr x17, pc+96 (addr 0x0000ffff7abb22a8)    ;; object: 0xffff7abb21c1 <Code: COMPARE_IC>
0xffff7abb224c    44  sub csp, jssp, #0x10 (16)
0xffff7abb2250    48  str x17, [jssp, #-8]!
0xffff7abb2254    52  add fp, jssp, #0x10 (16)
0xffff7abb2258    56  sub csp, jssp, #0x18 (24)
0xffff7abb225c    60  stp lr, x0, [jssp, #-24]!
0xffff7abb2260    64  str x1, [jssp, #16]
0xffff7abb2264    68  movz x10, #0x3300000000
0xffff7abb2268    72  sub csp, jssp, #0x18 (24)
0xffff7abb226c    76  stp x10, x0, [jssp, #-24]!
0xffff7abb2270    80  str x1, [jssp, #16]
0xffff7abb2274    84  movz x0, #0x3
0xffff7abb2278    88  ldr x1, pc+56 (addr 0x0000ffff7abb22b0)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7abb227c    92  ldr x16, pc+60 (addr 0x0000ffff7abb22b8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abb2280    96  blr x16
0xffff7abb2284   100  add x11, x0, #0x5f (95)
0xffff7abb2288   104  ldr x1, [jssp, #16]
0xffff7abb228c   108  ldp lr, x0, [jssp], #24
0xffff7abb2290   112  mov jssp, fp
0xffff7abb2294   116  ldp fp, lr, [jssp], #16
0xffff7abb2298   120  br x11
0xffff7abb229c   124  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7abb22a0   128  d63f03e0       constant
0xffff7abb22a4   132  d503201f       constant
0xffff7abb22a8   136  7abb21c1       constant
0xffff7abb22ac   140  0000ffff       constant
0xffff7abb22b0   144  00c8a980       constant
0xffff7abb22b4   148  00000000       constant
0xffff7abb22b8   152  7ab06060       constant
0xffff7abb22bc   156  0000ffff       constant


RelocInfo (size = 10)
0xffff7abb2248  embedded object  (0xffff7abb21c1 <Code: COMPARE_IC>)
0xffff7abb2278  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7abb227c  code target (STUB)  (0xffff7ab06060)
0xffff7abb229c  constant pool (size 36)


kind = HANDLER
major_key = <NoCache>Stub
name = slice
compiler = unknown
Instructions (size = 152)
0xffff7abb29a0     0  sub csp, jssp, #0x8 (8)
0xffff7abb29a4     4  str x3, [jssp, #-8]!
0xffff7abb29a8     8  sub csp, jssp, #0x8 (8)
0xffff7abb29ac    12  str x0, [jssp, #-8]!
0xffff7abb29b0    16  ldur x3, [cp, #39]
0xffff7abb29b4    20  movz x16, #0x2e7
0xffff7abb29b8    24  ldr x3, [x3, x16]
0xffff7abb29bc    28  ldur x3, [x3, #23]
0xffff7abb29c0    32  ldur x3, [x3, #23]
0xffff7abb29c4    36  ldr x0, pc+84 (addr 0x0000ffff7abb2a18)    ;; object: 0x20d63e59 Cell for 0
0xffff7abb29c8    40  ldur x0, [x0, #7]
0xffff7abb29cc    44  cmp x0, #0x0 (0)
0xffff7abb29d0    48  b.ne #+0x1c (addr 0xffff7abb29ec)
0xffff7abb29d4    52  ldur x0, [x3, #-1]
0xffff7abb29d8    56  ldr x4, pc+72 (addr 0x0000ffff7abb2a20)    ;; object: 0x5d406e39 WeakCell for 0x4ec156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>
0xffff7abb29dc    60  ldur x4, [x4, #7]
0xffff7abb29e0    64  cmp x0, x4
0xffff7abb29e4    68  b.ne #+0x8 (addr 0xffff7abb29ec)
0xffff7abb29e8    72  b #+0x14 (addr 0xffff7abb29fc)
0xffff7abb29ec    76  ldr x0, [jssp], #8
0xffff7abb29f0    80  ldr x3, [jssp], #8
0xffff7abb29f4    84  ldr x16, pc+52 (addr 0x0000ffff7abb2a28)    ;; code: BUILTIN
0xffff7abb29f8    88  br x16
0xffff7abb29fc    92  add jssp, jssp, #0x10 (16)
0xffff7abb2a00    96  mov x1, x3
0xffff7abb2a04   100  ldr x16, pc+44 (addr 0x0000ffff7abb2a30)    ;; code: HANDLER, LoadConstantStub, minor: 18
0xffff7abb2a08   104  br x16
0xffff7abb2a0c   108  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0xffff7abb2a10   112  d63f03e0       constant
0xffff7abb2a14   116  d503201f       constant
0xffff7abb2a18   120  20d63e59       constant
0xffff7abb2a1c   124  00000000       constant
0xffff7abb2a20   128  5d406e39       constant
0xffff7abb2a24   132  00000000       constant
0xffff7abb2a28   136  7ab222e0       constant
0xffff7abb2a2c   140  0000ffff       constant
0xffff7abb2a30   144  7ab7ccc0       constant
0xffff7abb2a34   148  0000ffff       constant


RelocInfo (size = 10)
0xffff7abb29c4  embedded object  (0x20d63e59 Cell for 0)
0xffff7abb29d8  embedded object  (0x5d406e39 WeakCell for 0x4ec156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>)
0xffff7abb29f4  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abb2a04  code target (HANDLER)  (0xffff7ab7ccc0)
0xffff7abb2a0c  constant pool (size 44)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0xffff7abb2b40     0  ldur x6, [x1, #7]
0xffff7abb2b44     4  ldur w7, [x6, #11]
0xffff7abb2b48     8  adds w8, w7, #0x3 (3)
0xffff7abb2b4c    12  b.vs #+0x1dc (addr 0xffff7abb2d28)
0xffff7abb2b50    16  movz w16, #0x95ff
0xffff7abb2b54    20  cmp w8, w16, lsl #1
0xffff7abb2b58    24  b.hs #+0x1e0 (addr 0xffff7abb2d38)
0xffff7abb2b5c    28  lsl x9, x8, #32
0xffff7abb2b60    32  lsl w10, w8, #3
0xffff7abb2b64    36  add w10, w10, #0x10 (16)
0xffff7abb2b68    40  sxtw x10, w10
0xffff7abb2b6c    44  movz x11, #0xe2c0
0xffff7abb2b70    48  movk x11, #0x9ab, lsl #16
0xffff7abb2b74    52  ldp x13, x16, [x11]
0xffff7abb2b78    56  adds x12, x13, x10
0xffff7abb2b7c    60  ccmp x12, x16, #nzCv, lo
0xffff7abb2b80    64  b.hi #+0xf8 (addr 0xffff7abb2c78)
0xffff7abb2b84    68  str x12, [x11]
0xffff7abb2b88    72  orr x13, x13, #0x1
0xffff7abb2b8c    76  ldr x10, pc+348 (addr 0x0000ffff7abb2ce8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7abb2b90    80  stur x10, [x13, #-1]
0xffff7abb2b94    84  stur x9, [x13, #7]
0xffff7abb2b98    88  cmp w7, w8
0xffff7abb2b9c    92  b.ge #+0x18 (addr 0xffff7abb2bb4)
0xffff7abb2ba0    96  sub w8, w8, #0x1 (1)
0xffff7abb2ba4   100  ldr x9, pc+332 (addr 0x0000ffff7abb2cf0)    ;; object: 0x20d04241 <undefined>
0xffff7abb2ba8   104  add x10, x13, #0xf (15)
0xffff7abb2bac   108  str x9, [x10, w8, sxtw #3]
0xffff7abb2bb0   112  b #-0x18 (addr 0xffff7abb2b98)
0xffff7abb2bb4   116  cmp w7, #0x0 (0)
0xffff7abb2bb8   120  b.le #+0x1c (addr 0xffff7abb2bd4)
0xffff7abb2bbc   124  sub w7, w7, #0x1 (1)
0xffff7abb2bc0   128  add x8, x6, #0xf (15)
0xffff7abb2bc4   132  ldr x9, [x8, w7, sxtw #3]
0xffff7abb2bc8   136  add x8, x13, #0xf (15)
0xffff7abb2bcc   140  str x9, [x8, w7, sxtw #3]
0xffff7abb2bd0   144  b #-0x1c (addr 0xffff7abb2bb4)
0xffff7abb2bd4   148  stur x13, [x1, #7]
0xffff7abb2bd8   152  add x6, x1, #0x7 (7)
0xffff7abb2bdc   156  and x13, x1, #0xfffffffffff00000
0xffff7abb2be0   160  ldr x13, [x13, #8]
0xffff7abb2be4   164  tbz w13, #2, #+0x18 (addr 0xffff7abb2bfc)
0xffff7abb2be8   168  sub csp, jssp, #0x8 (8)
0xffff7abb2bec   172  str lr, [jssp, #-8]!
0xffff7abb2bf0   176  ldr x16, pc+264 (addr 0x0000ffff7abb2cf8)    ;; code: STUB, RecordWriteStub, minor: 72097
0xffff7abb2bf4   180  blr x16
0xffff7abb2bf8   184  ldr lr, [jssp], #8
0xffff7abb2bfc   188  tbz w0, #0, #+0x14c (addr 0xffff7abb2d48)
0xffff7abb2c00   192  mov x2, x0
0xffff7abb2c04   196  ldur x4, [x1, #7]
0xffff7abb2c08   200  stur x2, [x4, #87]
0xffff7abb2c0c   204  add x3, x4, #0x57 (87)
0xffff7abb2c10   208  and x2, x2, #0xfffffffffff00000
0xffff7abb2c14   212  ldr x2, [x2, #8]
0xffff7abb2c18   216  tbz w2, #1, #+0x24 (addr 0xffff7abb2c3c)
0xffff7abb2c1c   220  and x2, x4, #0xfffffffffff00000
0xffff7abb2c20   224  ldr x2, [x2, #8]
0xffff7abb2c24   228  tbz w2, #2, #+0x18 (addr 0xffff7abb2c3c)
0xffff7abb2c28   232  sub csp, jssp, #0x8 (8)
0xffff7abb2c2c   236  str lr, [jssp, #-8]!
0xffff7abb2c30   240  ldr x16, pc+208 (addr 0x0000ffff7abb2d00)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abb2c34   244  blr x16
0xffff7abb2c38   248  ldr lr, [jssp], #8
0xffff7abb2c3c   252  stur x5, [x1, #-1]
0xffff7abb2c40   256  tbz w5, #0, #+0x34 (addr 0xffff7abb2c74)
0xffff7abb2c44   260  sub x2, x1, #0x1 (1)
0xffff7abb2c48   264  and x5, x5, #0xfffffffffff00000
0xffff7abb2c4c   268  ldr x5, [x5, #8]
0xffff7abb2c50   272  tbz w5, #1, #+0x24 (addr 0xffff7abb2c74)
0xffff7abb2c54   276  and x5, x1, #0xfffffffffff00000
0xffff7abb2c58   280  ldr x5, [x5, #8]
0xffff7abb2c5c   284  tbz w5, #2, #+0x18 (addr 0xffff7abb2c74)
0xffff7abb2c60   288  sub csp, jssp, #0x8 (8)
0xffff7abb2c64   292  str lr, [jssp, #-8]!
0xffff7abb2c68   296  ldr x16, pc+160 (addr 0x0000ffff7abb2d08)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abb2c6c   300  blr x16
0xffff7abb2c70   304  ldr lr, [jssp], #8
0xffff7abb2c74   308  ret
0xffff7abb2c78   312  sub csp, jssp, #0x10 (16)
0xffff7abb2c7c   316  stp fp, lr, [jssp, #-16]!
0xffff7abb2c80   320  movz fp, #0xa00000000
0xffff7abb2c84   324  sub csp, jssp, #0x8 (8)
0xffff7abb2c88   328  str fp, [jssp, #-8]!
0xffff7abb2c8c   332  add fp, jssp, #0x8 (8)
0xffff7abb2c90   336  movz x13, #0x0
0xffff7abb2c94   340  mov x16, lr
0xffff7abb2c98   344  ldr x17, pc+120 (addr 0x0000ffff7abb2d10)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abb2c9c   348  blr x17
0xffff7abb2ca0   352  lsl x0, x10, #32
0xffff7abb2ca4   356  movz x10, #0x0
0xffff7abb2ca8   360  sub csp, jssp, #0x10 (16)
0xffff7abb2cac   364  stp x10, x0, [jssp, #-16]!
0xffff7abb2cb0   368  movz x0, #0x2
0xffff7abb2cb4   372  movz x1, #0x5b88
0xffff7abb2cb8   376  movk x1, #0xe2, lsl #16
0xffff7abb2cbc   380  ldr x16, pc+92 (addr 0x0000ffff7abb2d18)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abb2cc0   384  blr x16
0xffff7abb2cc4   388  str x0, [jssp, #104]
0xffff7abb2cc8   392  ldr x16, pc+88 (addr 0x0000ffff7abb2d20)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abb2ccc   396  blr x16
0xffff7abb2cd0   400  ldr lr, [jssp, #16]
0xffff7abb2cd4   404  ldp xzr, fp, [jssp], #24
0xffff7abb2cd8   408  b #-0x14c (addr 0xffff7abb2b8c)
0xffff7abb2cdc   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0xffff7abb2ce0   416  d63f03e0       constant
0xffff7abb2ce4   420  d503201f       constant
0xffff7abb2ce8   424  4ec04259       constant
0xffff7abb2cec   428  00000000       constant
0xffff7abb2cf0   432  20d04241       constant
0xffff7abb2cf4   436  00000000       constant
0xffff7abb2cf8   440  7ab370c0       constant
0xffff7abb2cfc   444  0000ffff       constant
0xffff7abb2d00   448  7ab378a0       constant
0xffff7abb2d04   452  0000ffff       constant
0xffff7abb2d08   456  7ab38080       constant
0xffff7abb2d0c   460  0000ffff       constant
0xffff7abb2d10   464  7ab06820       constant
0xffff7abb2d14   468  0000ffff       constant
0xffff7abb2d18   472  7ab06260       constant
0xffff7abb2d1c   476  0000ffff       constant
0xffff7abb2d20   480  7ab068e0       constant
0xffff7abb2d24   484  0000ffff       constant
0xffff7abb2d28   488  movz x16, #0x0
0xffff7abb2d2c   492  sub csp, jssp, #0x10 (16)
0xffff7abb2d30   496  stp fp, lr, [jssp, #-16]!
0xffff7abb2d34   500  bl #+0x24 (addr 0xffff7abb2d58)
0xffff7abb2d38   504  movz x16, #0x8
0xffff7abb2d3c   508  sub csp, jssp, #0x10 (16)
0xffff7abb2d40   512  stp fp, lr, [jssp, #-16]!
0xffff7abb2d44   516  bl #+0x14 (addr 0xffff7abb2d58)
0xffff7abb2d48   520  movz x16, #0x10
0xffff7abb2d4c   524  sub csp, jssp, #0x10 (16)
0xffff7abb2d50   528  stp fp, lr, [jssp, #-16]!
0xffff7abb2d54   532  bl #+0x4 (addr 0xffff7abb2d58)
0xffff7abb2d58   536  movz x17, #0xa00000000
0xffff7abb2d5c   540  sub csp, jssp, #0x10 (16)
0xffff7abb2d60   544  stp x17, cp, [jssp, #-16]!
0xffff7abb2d64   548  add fp, jssp, #0x10 (16)
0xffff7abb2d68   552  ldr x17, pc+24 (addr 0x0000ffff7abb2d80)    ;; lazy deoptimization bailout 0
0xffff7abb2d6c   556  add x17, x17, x16
0xffff7abb2d70   560  br x17
0xffff7abb2d74   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abb2d78   568  d63f03e0       constant
0xffff7abb2d7c   572  d503201f       constant
0xffff7abb2d80   576  7a906000       constant
0xffff7abb2d84   580  0000ffff       constant


Safepoints (size = 21)
0xffff7abb2cc4   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0xffff7abb2b8c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7abb2ba4  embedded object  (0x20d04241 <undefined>)
0xffff7abb2bf0  code target (STUB)  (0xffff7ab370c0)
0xffff7abb2c30  code target (STUB)  (0xffff7ab378a0)
0xffff7abb2c68  code target (STUB)  (0xffff7ab38080)
0xffff7abb2c98  code target (STUB)  (0xffff7ab06820)
0xffff7abb2cbc  code target (STUB)  (0xffff7ab06260)
0xffff7abb2cc8  code target (STUB)  (0xffff7ab068e0)
0xffff7abb2cdc  constant pool (size 76)
0xffff7abb2d68  runtime entry
0xffff7abb2d74  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0xffff7abb2b40     0  ldur x6, [x1, #7]
0xffff7abb2b44     4  ldur w7, [x6, #11]
0xffff7abb2b48     8  adds w8, w7, #0x3 (3)
0xffff7abb2b4c    12  b.vs #+0x1dc (addr 0xffff7abb2d28)
0xffff7abb2b50    16  movz w16, #0x95ff
0xffff7abb2b54    20  cmp w8, w16, lsl #1
0xffff7abb2b58    24  b.hs #+0x1e0 (addr 0xffff7abb2d38)
0xffff7abb2b5c    28  lsl x9, x8, #32
0xffff7abb2b60    32  lsl w10, w8, #3
0xffff7abb2b64    36  add w10, w10, #0x10 (16)
0xffff7abb2b68    40  sxtw x10, w10
0xffff7abb2b6c    44  movz x11, #0xe2c0
0xffff7abb2b70    48  movk x11, #0x9ab, lsl #16
0xffff7abb2b74    52  ldp x13, x16, [x11]
0xffff7abb2b78    56  adds x12, x13, x10
0xffff7abb2b7c    60  ccmp x12, x16, #nzCv, lo
0xffff7abb2b80    64  b.hi #+0xf8 (addr 0xffff7abb2c78)
0xffff7abb2b84    68  str x12, [x11]
0xffff7abb2b88    72  orr x13, x13, #0x1
0xffff7abb2b8c    76  ldr x10, pc+348 (addr 0x0000ffff7abb2ce8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7abb2b90    80  stur x10, [x13, #-1]
0xffff7abb2b94    84  stur x9, [x13, #7]
0xffff7abb2b98    88  cmp w7, w8
0xffff7abb2b9c    92  b.ge #+0x18 (addr 0xffff7abb2bb4)
0xffff7abb2ba0    96  sub w8, w8, #0x1 (1)
0xffff7abb2ba4   100  ldr x9, pc+332 (addr 0x0000ffff7abb2cf0)    ;; object: 0x20d04241 <undefined>
0xffff7abb2ba8   104  add x10, x13, #0xf (15)
0xffff7abb2bac   108  str x9, [x10, w8, sxtw #3]
0xffff7abb2bb0   112  b #-0x18 (addr 0xffff7abb2b98)
0xffff7abb2bb4   116  cmp w7, #0x0 (0)
0xffff7abb2bb8   120  b.le #+0x1c (addr 0xffff7abb2bd4)
0xffff7abb2bbc   124  sub w7, w7, #0x1 (1)
0xffff7abb2bc0   128  add x8, x6, #0xf (15)
0xffff7abb2bc4   132  ldr x9, [x8, w7, sxtw #3]
0xffff7abb2bc8   136  add x8, x13, #0xf (15)
0xffff7abb2bcc   140  str x9, [x8, w7, sxtw #3]
0xffff7abb2bd0   144  b #-0x1c (addr 0xffff7abb2bb4)
0xffff7abb2bd4   148  stur x13, [x1, #7]
0xffff7abb2bd8   152  add x6, x1, #0x7 (7)
0xffff7abb2bdc   156  and x13, x1, #0xfffffffffff00000
0xffff7abb2be0   160  ldr x13, [x13, #8]
0xffff7abb2be4   164  tbz w13, #2, #+0x18 (addr 0xffff7abb2bfc)
0xffff7abb2be8   168  sub csp, jssp, #0x8 (8)
0xffff7abb2bec   172  str lr, [jssp, #-8]!
0xffff7abb2bf0   176  ldr x16, pc+264 (addr 0x0000ffff7abb2cf8)    ;; code: STUB, RecordWriteStub, minor: 72097
0xffff7abb2bf4   180  blr x16
0xffff7abb2bf8   184  ldr lr, [jssp], #8
0xffff7abb2bfc   188  tbz w0, #0, #+0x14c (addr 0xffff7abb2d48)
0xffff7abb2c00   192  mov x2, x0
0xffff7abb2c04   196  ldur x4, [x1, #7]
0xffff7abb2c08   200  stur x2, [x4, #87]
0xffff7abb2c0c   204  add x3, x4, #0x57 (87)
0xffff7abb2c10   208  and x2, x2, #0xfffffffffff00000
0xffff7abb2c14   212  ldr x2, [x2, #8]
0xffff7abb2c18   216  tbz w2, #1, #+0x24 (addr 0xffff7abb2c3c)
0xffff7abb2c1c   220  and x2, x4, #0xfffffffffff00000
0xffff7abb2c20   224  ldr x2, [x2, #8]
0xffff7abb2c24   228  tbz w2, #2, #+0x18 (addr 0xffff7abb2c3c)
0xffff7abb2c28   232  sub csp, jssp, #0x8 (8)
0xffff7abb2c2c   236  str lr, [jssp, #-8]!
0xffff7abb2c30   240  ldr x16, pc+208 (addr 0x0000ffff7abb2d00)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abb2c34   244  blr x16
0xffff7abb2c38   248  ldr lr, [jssp], #8
0xffff7abb2c3c   252  stur x5, [x1, #-1]
0xffff7abb2c40   256  tbz w5, #0, #+0x34 (addr 0xffff7abb2c74)
0xffff7abb2c44   260  sub x2, x1, #0x1 (1)
0xffff7abb2c48   264  and x5, x5, #0xfffffffffff00000
0xffff7abb2c4c   268  ldr x5, [x5, #8]
0xffff7abb2c50   272  tbz w5, #1, #+0x24 (addr 0xffff7abb2c74)
0xffff7abb2c54   276  and x5, x1, #0xfffffffffff00000
0xffff7abb2c58   280  ldr x5, [x5, #8]
0xffff7abb2c5c   284  tbz w5, #2, #+0x18 (addr 0xffff7abb2c74)
0xffff7abb2c60   288  sub csp, jssp, #0x8 (8)
0xffff7abb2c64   292  str lr, [jssp, #-8]!
0xffff7abb2c68   296  ldr x16, pc+160 (addr 0x0000ffff7abb2d08)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abb2c6c   300  blr x16
0xffff7abb2c70   304  ldr lr, [jssp], #8
0xffff7abb2c74   308  ret
0xffff7abb2c78   312  sub csp, jssp, #0x10 (16)
0xffff7abb2c7c   316  stp fp, lr, [jssp, #-16]!
0xffff7abb2c80   320  movz fp, #0xa00000000
0xffff7abb2c84   324  sub csp, jssp, #0x8 (8)
0xffff7abb2c88   328  str fp, [jssp, #-8]!
0xffff7abb2c8c   332  add fp, jssp, #0x8 (8)
0xffff7abb2c90   336  movz x13, #0x0
0xffff7abb2c94   340  mov x16, lr
0xffff7abb2c98   344  ldr x17, pc+120 (addr 0x0000ffff7abb2d10)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abb2c9c   348  blr x17
0xffff7abb2ca0   352  lsl x0, x10, #32
0xffff7abb2ca4   356  movz x10, #0x0
0xffff7abb2ca8   360  sub csp, jssp, #0x10 (16)
0xffff7abb2cac   364  stp x10, x0, [jssp, #-16]!
0xffff7abb2cb0   368  movz x0, #0x2
0xffff7abb2cb4   372  movz x1, #0x5b88
0xffff7abb2cb8   376  movk x1, #0xe2, lsl #16
0xffff7abb2cbc   380  ldr x16, pc+92 (addr 0x0000ffff7abb2d18)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abb2cc0   384  blr x16
0xffff7abb2cc4   388  str x0, [jssp, #104]
0xffff7abb2cc8   392  ldr x16, pc+88 (addr 0x0000ffff7abb2d20)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abb2ccc   396  blr x16
0xffff7abb2cd0   400  ldr lr, [jssp, #16]
0xffff7abb2cd4   404  ldp xzr, fp, [jssp], #24
0xffff7abb2cd8   408  b #-0x14c (addr 0xffff7abb2b8c)
0xffff7abb2cdc   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0xffff7abb2ce0   416  d63f03e0       constant
0xffff7abb2ce4   420  d503201f       constant
0xffff7abb2ce8   424  4ec04259       constant
0xffff7abb2cec   428  00000000       constant
0xffff7abb2cf0   432  20d04241       constant
0xffff7abb2cf4   436  00000000       constant
0xffff7abb2cf8   440  7ab370c0       constant
0xffff7abb2cfc   444  0000ffff       constant
0xffff7abb2d00   448  7ab378a0       constant
0xffff7abb2d04   452  0000ffff       constant
0xffff7abb2d08   456  7ab38080       constant
0xffff7abb2d0c   460  0000ffff       constant
0xffff7abb2d10   464  7ab06820       constant
0xffff7abb2d14   468  0000ffff       constant
0xffff7abb2d18   472  7ab06260       constant
0xffff7abb2d1c   476  0000ffff       constant
0xffff7abb2d20   480  7ab068e0       constant
0xffff7abb2d24   484  0000ffff       constant
0xffff7abb2d28   488  movz x16, #0x0
0xffff7abb2d2c   492  sub csp, jssp, #0x10 (16)
0xffff7abb2d30   496  stp fp, lr, [jssp, #-16]!
0xffff7abb2d34   500  bl #+0x24 (addr 0xffff7abb2d58)
0xffff7abb2d38   504  movz x16, #0x8
0xffff7abb2d3c   508  sub csp, jssp, #0x10 (16)
0xffff7abb2d40   512  stp fp, lr, [jssp, #-16]!
0xffff7abb2d44   516  bl #+0x14 (addr 0xffff7abb2d58)
0xffff7abb2d48   520  movz x16, #0x10
0xffff7abb2d4c   524  sub csp, jssp, #0x10 (16)
0xffff7abb2d50   528  stp fp, lr, [jssp, #-16]!
0xffff7abb2d54   532  bl #+0x4 (addr 0xffff7abb2d58)
0xffff7abb2d58   536  movz x17, #0xa00000000
0xffff7abb2d5c   540  sub csp, jssp, #0x10 (16)
0xffff7abb2d60   544  stp x17, cp, [jssp, #-16]!
0xffff7abb2d64   548  add fp, jssp, #0x10 (16)
0xffff7abb2d68   552  ldr x17, pc+24 (addr 0x0000ffff7abb2d80)    ;; lazy deoptimization bailout 0
0xffff7abb2d6c   556  add x17, x17, x16
0xffff7abb2d70   560  br x17
0xffff7abb2d74   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abb2d78   568  d63f03e0       constant
0xffff7abb2d7c   572  d503201f       constant
0xffff7abb2d80   576  7a906000       constant
0xffff7abb2d84   580  0000ffff       constant


Safepoints (size = 21)
0xffff7abb2cc4   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0xffff7abb2b8c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7abb2ba4  embedded object  (0x20d04241 <undefined>)
0xffff7abb2bf0  code target (STUB)  (0xffff7ab370c0)
0xffff7abb2c30  code target (STUB)  (0xffff7ab378a0)
0xffff7abb2c68  code target (STUB)  (0xffff7ab38080)
0xffff7abb2c98  code target (STUB)  (0xffff7ab06820)
0xffff7abb2cbc  code target (STUB)  (0xffff7ab06260)
0xffff7abb2cc8  code target (STUB)  (0xffff7ab068e0)
0xffff7abb2cdc  constant pool (size 76)
0xffff7abb2d68  runtime entry
0xffff7abb2d74  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = module
compiler = unknown
Instructions (size = 184)
0xffff7abb2e00     0  sub csp, jssp, #0x8 (8)
0xffff7abb2e04     4  str x3, [jssp, #-8]!
0xffff7abb2e08     8  sub csp, jssp, #0x8 (8)
0xffff7abb2e0c    12  str x4, [jssp, #-8]!
0xffff7abb2e10    16  ldr x3, pc+112 (addr 0x0000ffff7abb2e80)    ;; object: 0x20d63e59 Cell for 0
0xffff7abb2e14    20  ldur x3, [x3, #7]
0xffff7abb2e18    24  cmp x3, #0x0 (0)
0xffff7abb2e1c    28  b.ne #+0x44 (addr 0xffff7abb2e60)
0xffff7abb2e20    32  tbz w0, #0, #+0x40 (addr 0xffff7abb2e60)
0xffff7abb2e24    36  ldur x3, [x0, #-1]
0xffff7abb2e28    40  ldr x4, pc+96 (addr 0x0000ffff7abb2e88)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abb2e2c    44  ldur x4, [x4, #7]
0xffff7abb2e30    48  cmp x3, x4
0xffff7abb2e34    52  b.ne #+0x2c (addr 0xffff7abb2e60)
0xffff7abb2e38    56  ldr x5, pc+88 (addr 0x0000ffff7abb2e90)    ;; object: 0x5d407701 WeakCell for 0x4ec2d189 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abb2e3c    60  ldur x5, [x5, #7]
0xffff7abb2e40    64  tbz w5, #0, #+0x20 (addr 0xffff7abb2e60)
0xffff7abb2e44    68  ldursw x4, [x5, #15]
0xffff7abb2e48    72  tbnz w4, #23, #+0x18 (addr 0xffff7abb2e60)
0xffff7abb2e4c    76  ldr x4, [jssp], #8
0xffff7abb2e50    80  ldr x3, [jssp], #8
0xffff7abb2e54    84  ldr x2, pc+68 (addr 0x0000ffff7abb2e98)    ;; object: 0x20db9c61 <String[6]: module>
0xffff7abb2e58    88  ldr x16, pc+72 (addr 0x0000ffff7abb2ea0)    ;; code: HANDLER, StoreTransitionStub, minor: 327691
0xffff7abb2e5c    92  br x16
0xffff7abb2e60    96  ldr x2, pc+72 (addr 0x0000ffff7abb2ea8)    ;; object: 0x20db9c61 <String[6]: module>
0xffff7abb2e64   100  ldr x4, [jssp], #8
0xffff7abb2e68   104  ldr x3, [jssp], #8
0xffff7abb2e6c   108  ldr x16, pc+68 (addr 0x0000ffff7abb2eb0)    ;; code: BUILTIN
0xffff7abb2e70   112  br x16
0xffff7abb2e74   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abb2e78   120  d63f03e0       constant
0xffff7abb2e7c   124  d503201f       constant
0xffff7abb2e80   128  20d63e59       constant
0xffff7abb2e84   132  00000000       constant
0xffff7abb2e88   136  20dc22b1       constant
0xffff7abb2e8c   140  00000000       constant
0xffff7abb2e90   144  5d407701       constant
0xffff7abb2e94   148  00000000       constant
0xffff7abb2e98   152  20db9c61       constant
0xffff7abb2e9c   156  00000000       constant
0xffff7abb2ea0   160  7abb2b40       constant
0xffff7abb2ea4   164  0000ffff       constant
0xffff7abb2ea8   168  20db9c61       constant
0xffff7abb2eac   172  00000000       constant
0xffff7abb2eb0   176  7ab22420       constant
0xffff7abb2eb4   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abb2e10  embedded object  (0x20d63e59 Cell for 0)
0xffff7abb2e28  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abb2e38  embedded object  (0x5d407701 WeakCell for 0x4ec2d189 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abb2e54  embedded object  (0x20db9c61 <String[6]: module>)
0xffff7abb2e58  code target (HANDLER)  (0xffff7abb2b40)
0xffff7abb2e60  embedded object  (0x20db9c61 <String[6]: module>)
0xffff7abb2e6c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abb2e74  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7abb4c80     0  tbz w0, #0, #+0x98 (addr 0xffff7abb4d18)
0xffff7abb4c84     4  mov x2, x0
0xffff7abb4c88     8  ldur x4, [x1, #7]
0xffff7abb4c8c    12  stur x2, [x4, #95]
0xffff7abb4c90    16  add x3, x4, #0x5f (95)
0xffff7abb4c94    20  and x2, x2, #0xfffffffffff00000
0xffff7abb4c98    24  ldr x2, [x2, #8]
0xffff7abb4c9c    28  tbz w2, #1, #+0x24 (addr 0xffff7abb4cc0)
0xffff7abb4ca0    32  and x2, x4, #0xfffffffffff00000
0xffff7abb4ca4    36  ldr x2, [x2, #8]
0xffff7abb4ca8    40  tbz w2, #2, #+0x18 (addr 0xffff7abb4cc0)
0xffff7abb4cac    44  sub csp, jssp, #0x8 (8)
0xffff7abb4cb0    48  str lr, [jssp, #-8]!
0xffff7abb4cb4    52  ldr x16, pc+84 (addr 0x0000ffff7abb4d08)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abb4cb8    56  blr x16
0xffff7abb4cbc    60  ldr lr, [jssp], #8
0xffff7abb4cc0    64  stur x5, [x1, #-1]
0xffff7abb4cc4    68  tbz w5, #0, #+0x34 (addr 0xffff7abb4cf8)
0xffff7abb4cc8    72  sub x2, x1, #0x1 (1)
0xffff7abb4ccc    76  and x5, x5, #0xfffffffffff00000
0xffff7abb4cd0    80  ldr x5, [x5, #8]
0xffff7abb4cd4    84  tbz w5, #1, #+0x24 (addr 0xffff7abb4cf8)
0xffff7abb4cd8    88  and x5, x1, #0xfffffffffff00000
0xffff7abb4cdc    92  ldr x5, [x5, #8]
0xffff7abb4ce0    96  tbz w5, #2, #+0x18 (addr 0xffff7abb4cf8)
0xffff7abb4ce4   100  sub csp, jssp, #0x8 (8)
0xffff7abb4ce8   104  str lr, [jssp, #-8]!
0xffff7abb4cec   108  ldr x16, pc+36 (addr 0x0000ffff7abb4d10)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abb4cf0   112  blr x16
0xffff7abb4cf4   116  ldr lr, [jssp], #8
0xffff7abb4cf8   120  ret
0xffff7abb4cfc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abb4d00   128  d63f03e0       constant
0xffff7abb4d04   132  d503201f       constant
0xffff7abb4d08   136  7ab378a0       constant
0xffff7abb4d0c   140  0000ffff       constant
0xffff7abb4d10   144  7ab38080       constant
0xffff7abb4d14   148  0000ffff       constant
0xffff7abb4d18   152  movz x16, #0x0
0xffff7abb4d1c   156  sub csp, jssp, #0x10 (16)
0xffff7abb4d20   160  stp fp, lr, [jssp, #-16]!
0xffff7abb4d24   164  bl #+0x4 (addr 0xffff7abb4d28)
0xffff7abb4d28   168  movz x17, #0xa00000000
0xffff7abb4d2c   172  sub csp, jssp, #0x10 (16)
0xffff7abb4d30   176  stp x17, cp, [jssp, #-16]!
0xffff7abb4d34   180  add fp, jssp, #0x10 (16)
0xffff7abb4d38   184  ldr x17, pc+24 (addr 0x0000ffff7abb4d50)    ;; lazy deoptimization bailout 0
0xffff7abb4d3c   188  add x17, x17, x16
0xffff7abb4d40   192  br x17
0xffff7abb4d44   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abb4d48   200  d63f03e0       constant
0xffff7abb4d4c   204  d503201f       constant
0xffff7abb4d50   208  7a906000       constant
0xffff7abb4d54   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abb4cb4  code target (STUB)  (0xffff7ab378a0)
0xffff7abb4cec  code target (STUB)  (0xffff7ab38080)
0xffff7abb4cfc  constant pool (size 28)
0xffff7abb4d38  runtime entry
0xffff7abb4d44  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7abb4c80     0  tbz w0, #0, #+0x98 (addr 0xffff7abb4d18)
0xffff7abb4c84     4  mov x2, x0
0xffff7abb4c88     8  ldur x4, [x1, #7]
0xffff7abb4c8c    12  stur x2, [x4, #95]
0xffff7abb4c90    16  add x3, x4, #0x5f (95)
0xffff7abb4c94    20  and x2, x2, #0xfffffffffff00000
0xffff7abb4c98    24  ldr x2, [x2, #8]
0xffff7abb4c9c    28  tbz w2, #1, #+0x24 (addr 0xffff7abb4cc0)
0xffff7abb4ca0    32  and x2, x4, #0xfffffffffff00000
0xffff7abb4ca4    36  ldr x2, [x2, #8]
0xffff7abb4ca8    40  tbz w2, #2, #+0x18 (addr 0xffff7abb4cc0)
0xffff7abb4cac    44  sub csp, jssp, #0x8 (8)
0xffff7abb4cb0    48  str lr, [jssp, #-8]!
0xffff7abb4cb4    52  ldr x16, pc+84 (addr 0x0000ffff7abb4d08)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abb4cb8    56  blr x16
0xffff7abb4cbc    60  ldr lr, [jssp], #8
0xffff7abb4cc0    64  stur x5, [x1, #-1]
0xffff7abb4cc4    68  tbz w5, #0, #+0x34 (addr 0xffff7abb4cf8)
0xffff7abb4cc8    72  sub x2, x1, #0x1 (1)
0xffff7abb4ccc    76  and x5, x5, #0xfffffffffff00000
0xffff7abb4cd0    80  ldr x5, [x5, #8]
0xffff7abb4cd4    84  tbz w5, #1, #+0x24 (addr 0xffff7abb4cf8)
0xffff7abb4cd8    88  and x5, x1, #0xfffffffffff00000
0xffff7abb4cdc    92  ldr x5, [x5, #8]
0xffff7abb4ce0    96  tbz w5, #2, #+0x18 (addr 0xffff7abb4cf8)
0xffff7abb4ce4   100  sub csp, jssp, #0x8 (8)
0xffff7abb4ce8   104  str lr, [jssp, #-8]!
0xffff7abb4cec   108  ldr x16, pc+36 (addr 0x0000ffff7abb4d10)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abb4cf0   112  blr x16
0xffff7abb4cf4   116  ldr lr, [jssp], #8
0xffff7abb4cf8   120  ret
0xffff7abb4cfc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abb4d00   128  d63f03e0       constant
0xffff7abb4d04   132  d503201f       constant
0xffff7abb4d08   136  7ab378a0       constant
0xffff7abb4d0c   140  0000ffff       constant
0xffff7abb4d10   144  7ab38080       constant
0xffff7abb4d14   148  0000ffff       constant
0xffff7abb4d18   152  movz x16, #0x0
0xffff7abb4d1c   156  sub csp, jssp, #0x10 (16)
0xffff7abb4d20   160  stp fp, lr, [jssp, #-16]!
0xffff7abb4d24   164  bl #+0x4 (addr 0xffff7abb4d28)
0xffff7abb4d28   168  movz x17, #0xa00000000
0xffff7abb4d2c   172  sub csp, jssp, #0x10 (16)
0xffff7abb4d30   176  stp x17, cp, [jssp, #-16]!
0xffff7abb4d34   180  add fp, jssp, #0x10 (16)
0xffff7abb4d38   184  ldr x17, pc+24 (addr 0x0000ffff7abb4d50)    ;; lazy deoptimization bailout 0
0xffff7abb4d3c   188  add x17, x17, x16
0xffff7abb4d40   192  br x17
0xffff7abb4d44   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abb4d48   200  d63f03e0       constant
0xffff7abb4d4c   204  d503201f       constant
0xffff7abb4d50   208  7a906000       constant
0xffff7abb4d54   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abb4cb4  code target (STUB)  (0xffff7ab378a0)
0xffff7abb4cec  code target (STUB)  (0xffff7ab38080)
0xffff7abb4cfc  constant pool (size 28)
0xffff7abb4d38  runtime entry
0xffff7abb4d44  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = internal/module
compiler = unknown
Instructions (size = 184)
0xffff7abb4dc0     0  sub csp, jssp, #0x8 (8)
0xffff7abb4dc4     4  str x3, [jssp, #-8]!
0xffff7abb4dc8     8  sub csp, jssp, #0x8 (8)
0xffff7abb4dcc    12  str x4, [jssp, #-8]!
0xffff7abb4dd0    16  ldr x3, pc+112 (addr 0x0000ffff7abb4e40)    ;; object: 0x20d63e59 Cell for 0
0xffff7abb4dd4    20  ldur x3, [x3, #7]
0xffff7abb4dd8    24  cmp x3, #0x0 (0)
0xffff7abb4ddc    28  b.ne #+0x44 (addr 0xffff7abb4e20)
0xffff7abb4de0    32  tbz w0, #0, #+0x40 (addr 0xffff7abb4e20)
0xffff7abb4de4    36  ldur x3, [x0, #-1]
0xffff7abb4de8    40  ldr x4, pc+96 (addr 0x0000ffff7abb4e48)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abb4dec    44  ldur x4, [x4, #7]
0xffff7abb4df0    48  cmp x3, x4
0xffff7abb4df4    52  b.ne #+0x2c (addr 0xffff7abb4e20)
0xffff7abb4df8    56  ldr x5, pc+88 (addr 0x0000ffff7abb4e50)    ;; object: 0x5d40a861 WeakCell for 0x4ec2d1e1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abb4dfc    60  ldur x5, [x5, #7]
0xffff7abb4e00    64  tbz w5, #0, #+0x20 (addr 0xffff7abb4e20)
0xffff7abb4e04    68  ldursw x4, [x5, #15]
0xffff7abb4e08    72  tbnz w4, #23, #+0x18 (addr 0xffff7abb4e20)
0xffff7abb4e0c    76  ldr x4, [jssp], #8
0xffff7abb4e10    80  ldr x3, [jssp], #8
0xffff7abb4e14    84  ldr x2, pc+68 (addr 0x0000ffff7abb4e58)    ;; object: 0x20db9b81 <String[15]: internal/module>
0xffff7abb4e18    88  ldr x16, pc+72 (addr 0x0000ffff7abb4e60)    ;; code: HANDLER, StoreTransitionStub, minor: 196620
0xffff7abb4e1c    92  br x16
0xffff7abb4e20    96  ldr x2, pc+72 (addr 0x0000ffff7abb4e68)    ;; object: 0x20db9b81 <String[15]: internal/module>
0xffff7abb4e24   100  ldr x4, [jssp], #8
0xffff7abb4e28   104  ldr x3, [jssp], #8
0xffff7abb4e2c   108  ldr x16, pc+68 (addr 0x0000ffff7abb4e70)    ;; code: BUILTIN
0xffff7abb4e30   112  br x16
0xffff7abb4e34   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abb4e38   120  d63f03e0       constant
0xffff7abb4e3c   124  d503201f       constant
0xffff7abb4e40   128  20d63e59       constant
0xffff7abb4e44   132  00000000       constant
0xffff7abb4e48   136  20dc22b1       constant
0xffff7abb4e4c   140  00000000       constant
0xffff7abb4e50   144  5d40a861       constant
0xffff7abb4e54   148  00000000       constant
0xffff7abb4e58   152  20db9b81       constant
0xffff7abb4e5c   156  00000000       constant
0xffff7abb4e60   160  7abb4c80       constant
0xffff7abb4e64   164  0000ffff       constant
0xffff7abb4e68   168  20db9b81       constant
0xffff7abb4e6c   172  00000000       constant
0xffff7abb4e70   176  7ab22420       constant
0xffff7abb4e74   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abb4dd0  embedded object  (0x20d63e59 Cell for 0)
0xffff7abb4de8  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abb4df8  embedded object  (0x5d40a861 WeakCell for 0x4ec2d1e1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abb4e14  embedded object  (0x20db9b81 <String[15]: internal/module>)
0xffff7abb4e18  code target (HANDLER)  (0xffff7abb4c80)
0xffff7abb4e20  embedded object  (0x20db9b81 <String[15]: internal/module>)
0xffff7abb4e2c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abb4e34  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7abb53c0     0  tbz w0, #0, #+0x98 (addr 0xffff7abb5458)
0xffff7abb53c4     4  mov x2, x0
0xffff7abb53c8     8  ldur x4, [x1, #7]
0xffff7abb53cc    12  stur x2, [x4, #103]
0xffff7abb53d0    16  add x3, x4, #0x67 (103)
0xffff7abb53d4    20  and x2, x2, #0xfffffffffff00000
0xffff7abb53d8    24  ldr x2, [x2, #8]
0xffff7abb53dc    28  tbz w2, #1, #+0x24 (addr 0xffff7abb5400)
0xffff7abb53e0    32  and x2, x4, #0xfffffffffff00000
0xffff7abb53e4    36  ldr x2, [x2, #8]
0xffff7abb53e8    40  tbz w2, #2, #+0x18 (addr 0xffff7abb5400)
0xffff7abb53ec    44  sub csp, jssp, #0x8 (8)
0xffff7abb53f0    48  str lr, [jssp, #-8]!
0xffff7abb53f4    52  ldr x16, pc+84 (addr 0x0000ffff7abb5448)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abb53f8    56  blr x16
0xffff7abb53fc    60  ldr lr, [jssp], #8
0xffff7abb5400    64  stur x5, [x1, #-1]
0xffff7abb5404    68  tbz w5, #0, #+0x34 (addr 0xffff7abb5438)
0xffff7abb5408    72  sub x2, x1, #0x1 (1)
0xffff7abb540c    76  and x5, x5, #0xfffffffffff00000
0xffff7abb5410    80  ldr x5, [x5, #8]
0xffff7abb5414    84  tbz w5, #1, #+0x24 (addr 0xffff7abb5438)
0xffff7abb5418    88  and x5, x1, #0xfffffffffff00000
0xffff7abb541c    92  ldr x5, [x5, #8]
0xffff7abb5420    96  tbz w5, #2, #+0x18 (addr 0xffff7abb5438)
0xffff7abb5424   100  sub csp, jssp, #0x8 (8)
0xffff7abb5428   104  str lr, [jssp, #-8]!
0xffff7abb542c   108  ldr x16, pc+36 (addr 0x0000ffff7abb5450)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abb5430   112  blr x16
0xffff7abb5434   116  ldr lr, [jssp], #8
0xffff7abb5438   120  ret
0xffff7abb543c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abb5440   128  d63f03e0       constant
0xffff7abb5444   132  d503201f       constant
0xffff7abb5448   136  7ab378a0       constant
0xffff7abb544c   140  0000ffff       constant
0xffff7abb5450   144  7ab38080       constant
0xffff7abb5454   148  0000ffff       constant
0xffff7abb5458   152  movz x16, #0x0
0xffff7abb545c   156  sub csp, jssp, #0x10 (16)
0xffff7abb5460   160  stp fp, lr, [jssp, #-16]!
0xffff7abb5464   164  bl #+0x4 (addr 0xffff7abb5468)
0xffff7abb5468   168  movz x17, #0xa00000000
0xffff7abb546c   172  sub csp, jssp, #0x10 (16)
0xffff7abb5470   176  stp x17, cp, [jssp, #-16]!
0xffff7abb5474   180  add fp, jssp, #0x10 (16)
0xffff7abb5478   184  ldr x17, pc+24 (addr 0x0000ffff7abb5490)    ;; lazy deoptimization bailout 0
0xffff7abb547c   188  add x17, x17, x16
0xffff7abb5480   192  br x17
0xffff7abb5484   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abb5488   200  d63f03e0       constant
0xffff7abb548c   204  d503201f       constant
0xffff7abb5490   208  7a906000       constant
0xffff7abb5494   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abb53f4  code target (STUB)  (0xffff7ab378a0)
0xffff7abb542c  code target (STUB)  (0xffff7ab38080)
0xffff7abb543c  constant pool (size 28)
0xffff7abb5478  runtime entry
0xffff7abb5484  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7abb53c0     0  tbz w0, #0, #+0x98 (addr 0xffff7abb5458)
0xffff7abb53c4     4  mov x2, x0
0xffff7abb53c8     8  ldur x4, [x1, #7]
0xffff7abb53cc    12  stur x2, [x4, #103]
0xffff7abb53d0    16  add x3, x4, #0x67 (103)
0xffff7abb53d4    20  and x2, x2, #0xfffffffffff00000
0xffff7abb53d8    24  ldr x2, [x2, #8]
0xffff7abb53dc    28  tbz w2, #1, #+0x24 (addr 0xffff7abb5400)
0xffff7abb53e0    32  and x2, x4, #0xfffffffffff00000
0xffff7abb53e4    36  ldr x2, [x2, #8]
0xffff7abb53e8    40  tbz w2, #2, #+0x18 (addr 0xffff7abb5400)
0xffff7abb53ec    44  sub csp, jssp, #0x8 (8)
0xffff7abb53f0    48  str lr, [jssp, #-8]!
0xffff7abb53f4    52  ldr x16, pc+84 (addr 0x0000ffff7abb5448)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abb53f8    56  blr x16
0xffff7abb53fc    60  ldr lr, [jssp], #8
0xffff7abb5400    64  stur x5, [x1, #-1]
0xffff7abb5404    68  tbz w5, #0, #+0x34 (addr 0xffff7abb5438)
0xffff7abb5408    72  sub x2, x1, #0x1 (1)
0xffff7abb540c    76  and x5, x5, #0xfffffffffff00000
0xffff7abb5410    80  ldr x5, [x5, #8]
0xffff7abb5414    84  tbz w5, #1, #+0x24 (addr 0xffff7abb5438)
0xffff7abb5418    88  and x5, x1, #0xfffffffffff00000
0xffff7abb541c    92  ldr x5, [x5, #8]
0xffff7abb5420    96  tbz w5, #2, #+0x18 (addr 0xffff7abb5438)
0xffff7abb5424   100  sub csp, jssp, #0x8 (8)
0xffff7abb5428   104  str lr, [jssp, #-8]!
0xffff7abb542c   108  ldr x16, pc+36 (addr 0x0000ffff7abb5450)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abb5430   112  blr x16
0xffff7abb5434   116  ldr lr, [jssp], #8
0xffff7abb5438   120  ret
0xffff7abb543c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abb5440   128  d63f03e0       constant
0xffff7abb5444   132  d503201f       constant
0xffff7abb5448   136  7ab378a0       constant
0xffff7abb544c   140  0000ffff       constant
0xffff7abb5450   144  7ab38080       constant
0xffff7abb5454   148  0000ffff       constant
0xffff7abb5458   152  movz x16, #0x0
0xffff7abb545c   156  sub csp, jssp, #0x10 (16)
0xffff7abb5460   160  stp fp, lr, [jssp, #-16]!
0xffff7abb5464   164  bl #+0x4 (addr 0xffff7abb5468)
0xffff7abb5468   168  movz x17, #0xa00000000
0xffff7abb546c   172  sub csp, jssp, #0x10 (16)
0xffff7abb5470   176  stp x17, cp, [jssp, #-16]!
0xffff7abb5474   180  add fp, jssp, #0x10 (16)
0xffff7abb5478   184  ldr x17, pc+24 (addr 0x0000ffff7abb5490)    ;; lazy deoptimization bailout 0
0xffff7abb547c   188  add x17, x17, x16
0xffff7abb5480   192  br x17
0xffff7abb5484   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abb5488   200  d63f03e0       constant
0xffff7abb548c   204  d503201f       constant
0xffff7abb5490   208  7a906000       constant
0xffff7abb5494   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abb53f4  code target (STUB)  (0xffff7ab378a0)
0xffff7abb542c  code target (STUB)  (0xffff7ab38080)
0xffff7abb543c  constant pool (size 28)
0xffff7abb5478  runtime entry
0xffff7abb5484  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = vm
compiler = unknown
Instructions (size = 184)
0xffff7abb5500     0  sub csp, jssp, #0x8 (8)
0xffff7abb5504     4  str x3, [jssp, #-8]!
0xffff7abb5508     8  sub csp, jssp, #0x8 (8)
0xffff7abb550c    12  str x4, [jssp, #-8]!
0xffff7abb5510    16  ldr x3, pc+112 (addr 0x0000ffff7abb5580)    ;; object: 0x20d63e59 Cell for 0
0xffff7abb5514    20  ldur x3, [x3, #7]
0xffff7abb5518    24  cmp x3, #0x0 (0)
0xffff7abb551c    28  b.ne #+0x44 (addr 0xffff7abb5560)
0xffff7abb5520    32  tbz w0, #0, #+0x40 (addr 0xffff7abb5560)
0xffff7abb5524    36  ldur x3, [x0, #-1]
0xffff7abb5528    40  ldr x4, pc+96 (addr 0x0000ffff7abb5588)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abb552c    44  ldur x4, [x4, #7]
0xffff7abb5530    48  cmp x3, x4
0xffff7abb5534    52  b.ne #+0x2c (addr 0xffff7abb5560)
0xffff7abb5538    56  ldr x5, pc+88 (addr 0x0000ffff7abb5590)    ;; object: 0x5d40b391 WeakCell for 0x4ec2d3f1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abb553c    60  ldur x5, [x5, #7]
0xffff7abb5540    64  tbz w5, #0, #+0x20 (addr 0xffff7abb5560)
0xffff7abb5544    68  ldursw x4, [x5, #15]
0xffff7abb5548    72  tbnz w4, #23, #+0x18 (addr 0xffff7abb5560)
0xffff7abb554c    76  ldr x4, [jssp], #8
0xffff7abb5550    80  ldr x3, [jssp], #8
0xffff7abb5554    84  ldr x2, pc+68 (addr 0x0000ffff7abb5598)    ;; object: 0x20db9cb1 <String[2]: vm>
0xffff7abb5558    88  ldr x16, pc+72 (addr 0x0000ffff7abb55a0)    ;; code: HANDLER, StoreTransitionStub, minor: 196621
0xffff7abb555c    92  br x16
0xffff7abb5560    96  ldr x2, pc+72 (addr 0x0000ffff7abb55a8)    ;; object: 0x20db9cb1 <String[2]: vm>
0xffff7abb5564   100  ldr x4, [jssp], #8
0xffff7abb5568   104  ldr x3, [jssp], #8
0xffff7abb556c   108  ldr x16, pc+68 (addr 0x0000ffff7abb55b0)    ;; code: BUILTIN
0xffff7abb5570   112  br x16
0xffff7abb5574   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abb5578   120  d63f03e0       constant
0xffff7abb557c   124  d503201f       constant
0xffff7abb5580   128  20d63e59       constant
0xffff7abb5584   132  00000000       constant
0xffff7abb5588   136  20dc22b1       constant
0xffff7abb558c   140  00000000       constant
0xffff7abb5590   144  5d40b391       constant
0xffff7abb5594   148  00000000       constant
0xffff7abb5598   152  20db9cb1       constant
0xffff7abb559c   156  00000000       constant
0xffff7abb55a0   160  7abb53c0       constant
0xffff7abb55a4   164  0000ffff       constant
0xffff7abb55a8   168  20db9cb1       constant
0xffff7abb55ac   172  00000000       constant
0xffff7abb55b0   176  7ab22420       constant
0xffff7abb55b4   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abb5510  embedded object  (0x20d63e59 Cell for 0)
0xffff7abb5528  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abb5538  embedded object  (0x5d40b391 WeakCell for 0x4ec2d3f1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abb5554  embedded object  (0x20db9cb1 <String[2]: vm>)
0xffff7abb5558  code target (HANDLER)  (0xffff7abb53c0)
0xffff7abb5560  embedded object  (0x20db9cb1 <String[2]: vm>)
0xffff7abb556c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abb5574  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0xffff7abb6040     0  ldur x6, [x1, #7]
0xffff7abb6044     4  ldur w7, [x6, #11]
0xffff7abb6048     8  adds w8, w7, #0x3 (3)
0xffff7abb604c    12  b.vs #+0x1dc (addr 0xffff7abb6228)
0xffff7abb6050    16  movz w16, #0x95ff
0xffff7abb6054    20  cmp w8, w16, lsl #1
0xffff7abb6058    24  b.hs #+0x1e0 (addr 0xffff7abb6238)
0xffff7abb605c    28  lsl x9, x8, #32
0xffff7abb6060    32  lsl w10, w8, #3
0xffff7abb6064    36  add w10, w10, #0x10 (16)
0xffff7abb6068    40  sxtw x10, w10
0xffff7abb606c    44  movz x11, #0xe2c0
0xffff7abb6070    48  movk x11, #0x9ab, lsl #16
0xffff7abb6074    52  ldp x13, x16, [x11]
0xffff7abb6078    56  adds x12, x13, x10
0xffff7abb607c    60  ccmp x12, x16, #nzCv, lo
0xffff7abb6080    64  b.hi #+0xf8 (addr 0xffff7abb6178)
0xffff7abb6084    68  str x12, [x11]
0xffff7abb6088    72  orr x13, x13, #0x1
0xffff7abb608c    76  ldr x10, pc+348 (addr 0x0000ffff7abb61e8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7abb6090    80  stur x10, [x13, #-1]
0xffff7abb6094    84  stur x9, [x13, #7]
0xffff7abb6098    88  cmp w7, w8
0xffff7abb609c    92  b.ge #+0x18 (addr 0xffff7abb60b4)
0xffff7abb60a0    96  sub w8, w8, #0x1 (1)
0xffff7abb60a4   100  ldr x9, pc+332 (addr 0x0000ffff7abb61f0)    ;; object: 0x20d04241 <undefined>
0xffff7abb60a8   104  add x10, x13, #0xf (15)
0xffff7abb60ac   108  str x9, [x10, w8, sxtw #3]
0xffff7abb60b0   112  b #-0x18 (addr 0xffff7abb6098)
0xffff7abb60b4   116  cmp w7, #0x0 (0)
0xffff7abb60b8   120  b.le #+0x1c (addr 0xffff7abb60d4)
0xffff7abb60bc   124  sub w7, w7, #0x1 (1)
0xffff7abb60c0   128  add x8, x6, #0xf (15)
0xffff7abb60c4   132  ldr x9, [x8, w7, sxtw #3]
0xffff7abb60c8   136  add x8, x13, #0xf (15)
0xffff7abb60cc   140  str x9, [x8, w7, sxtw #3]
0xffff7abb60d0   144  b #-0x1c (addr 0xffff7abb60b4)
0xffff7abb60d4   148  stur x13, [x1, #7]
0xffff7abb60d8   152  add x6, x1, #0x7 (7)
0xffff7abb60dc   156  and x13, x1, #0xfffffffffff00000
0xffff7abb60e0   160  ldr x13, [x13, #8]
0xffff7abb60e4   164  tbz w13, #2, #+0x18 (addr 0xffff7abb60fc)
0xffff7abb60e8   168  sub csp, jssp, #0x8 (8)
0xffff7abb60ec   172  str lr, [jssp, #-8]!
0xffff7abb60f0   176  ldr x16, pc+264 (addr 0x0000ffff7abb61f8)    ;; code: STUB, RecordWriteStub, minor: 72097
0xffff7abb60f4   180  blr x16
0xffff7abb60f8   184  ldr lr, [jssp], #8
0xffff7abb60fc   188  tbz w0, #0, #+0x14c (addr 0xffff7abb6248)
0xffff7abb6100   192  mov x2, x0
0xffff7abb6104   196  ldur x4, [x1, #7]
0xffff7abb6108   200  stur x2, [x4, #111]
0xffff7abb610c   204  add x3, x4, #0x6f (111)
0xffff7abb6110   208  and x2, x2, #0xfffffffffff00000
0xffff7abb6114   212  ldr x2, [x2, #8]
0xffff7abb6118   216  tbz w2, #1, #+0x24 (addr 0xffff7abb613c)
0xffff7abb611c   220  and x2, x4, #0xfffffffffff00000
0xffff7abb6120   224  ldr x2, [x2, #8]
0xffff7abb6124   228  tbz w2, #2, #+0x18 (addr 0xffff7abb613c)
0xffff7abb6128   232  sub csp, jssp, #0x8 (8)
0xffff7abb612c   236  str lr, [jssp, #-8]!
0xffff7abb6130   240  ldr x16, pc+208 (addr 0x0000ffff7abb6200)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abb6134   244  blr x16
0xffff7abb6138   248  ldr lr, [jssp], #8
0xffff7abb613c   252  stur x5, [x1, #-1]
0xffff7abb6140   256  tbz w5, #0, #+0x34 (addr 0xffff7abb6174)
0xffff7abb6144   260  sub x2, x1, #0x1 (1)
0xffff7abb6148   264  and x5, x5, #0xfffffffffff00000
0xffff7abb614c   268  ldr x5, [x5, #8]
0xffff7abb6150   272  tbz w5, #1, #+0x24 (addr 0xffff7abb6174)
0xffff7abb6154   276  and x5, x1, #0xfffffffffff00000
0xffff7abb6158   280  ldr x5, [x5, #8]
0xffff7abb615c   284  tbz w5, #2, #+0x18 (addr 0xffff7abb6174)
0xffff7abb6160   288  sub csp, jssp, #0x8 (8)
0xffff7abb6164   292  str lr, [jssp, #-8]!
0xffff7abb6168   296  ldr x16, pc+160 (addr 0x0000ffff7abb6208)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abb616c   300  blr x16
0xffff7abb6170   304  ldr lr, [jssp], #8
0xffff7abb6174   308  ret
0xffff7abb6178   312  sub csp, jssp, #0x10 (16)
0xffff7abb617c   316  stp fp, lr, [jssp, #-16]!
0xffff7abb6180   320  movz fp, #0xa00000000
0xffff7abb6184   324  sub csp, jssp, #0x8 (8)
0xffff7abb6188   328  str fp, [jssp, #-8]!
0xffff7abb618c   332  add fp, jssp, #0x8 (8)
0xffff7abb6190   336  movz x13, #0x0
0xffff7abb6194   340  mov x16, lr
0xffff7abb6198   344  ldr x17, pc+120 (addr 0x0000ffff7abb6210)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abb619c   348  blr x17
0xffff7abb61a0   352  lsl x0, x10, #32
0xffff7abb61a4   356  movz x10, #0x0
0xffff7abb61a8   360  sub csp, jssp, #0x10 (16)
0xffff7abb61ac   364  stp x10, x0, [jssp, #-16]!
0xffff7abb61b0   368  movz x0, #0x2
0xffff7abb61b4   372  movz x1, #0x5b88
0xffff7abb61b8   376  movk x1, #0xe2, lsl #16
0xffff7abb61bc   380  ldr x16, pc+92 (addr 0x0000ffff7abb6218)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abb61c0   384  blr x16
0xffff7abb61c4   388  str x0, [jssp, #104]
0xffff7abb61c8   392  ldr x16, pc+88 (addr 0x0000ffff7abb6220)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abb61cc   396  blr x16
0xffff7abb61d0   400  ldr lr, [jssp, #16]
0xffff7abb61d4   404  ldp xzr, fp, [jssp], #24
0xffff7abb61d8   408  b #-0x14c (addr 0xffff7abb608c)
0xffff7abb61dc   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0xffff7abb61e0   416  d63f03e0       constant
0xffff7abb61e4   420  d503201f       constant
0xffff7abb61e8   424  4ec04259       constant
0xffff7abb61ec   428  00000000       constant
0xffff7abb61f0   432  20d04241       constant
0xffff7abb61f4   436  00000000       constant
0xffff7abb61f8   440  7ab370c0       constant
0xffff7abb61fc   444  0000ffff       constant
0xffff7abb6200   448  7ab378a0       constant
0xffff7abb6204   452  0000ffff       constant
0xffff7abb6208   456  7ab38080       constant
0xffff7abb620c   460  0000ffff       constant
0xffff7abb6210   464  7ab06820       constant
0xffff7abb6214   468  0000ffff       constant
0xffff7abb6218   472  7ab06260       constant
0xffff7abb621c   476  0000ffff       constant
0xffff7abb6220   480  7ab068e0       constant
0xffff7abb6224   484  0000ffff       constant
0xffff7abb6228   488  movz x16, #0x0
0xffff7abb622c   492  sub csp, jssp, #0x10 (16)
0xffff7abb6230   496  stp fp, lr, [jssp, #-16]!
0xffff7abb6234   500  bl #+0x24 (addr 0xffff7abb6258)
0xffff7abb6238   504  movz x16, #0x8
0xffff7abb623c   508  sub csp, jssp, #0x10 (16)
0xffff7abb6240   512  stp fp, lr, [jssp, #-16]!
0xffff7abb6244   516  bl #+0x14 (addr 0xffff7abb6258)
0xffff7abb6248   520  movz x16, #0x10
0xffff7abb624c   524  sub csp, jssp, #0x10 (16)
0xffff7abb6250   528  stp fp, lr, [jssp, #-16]!
0xffff7abb6254   532  bl #+0x4 (addr 0xffff7abb6258)
0xffff7abb6258   536  movz x17, #0xa00000000
0xffff7abb625c   540  sub csp, jssp, #0x10 (16)
0xffff7abb6260   544  stp x17, cp, [jssp, #-16]!
0xffff7abb6264   548  add fp, jssp, #0x10 (16)
0xffff7abb6268   552  ldr x17, pc+24 (addr 0x0000ffff7abb6280)    ;; lazy deoptimization bailout 0
0xffff7abb626c   556  add x17, x17, x16
0xffff7abb6270   560  br x17
0xffff7abb6274   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abb6278   568  d63f03e0       constant
0xffff7abb627c   572  d503201f       constant
0xffff7abb6280   576  7a906000       constant
0xffff7abb6284   580  0000ffff       constant


Safepoints (size = 21)
0xffff7abb61c4   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0xffff7abb608c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7abb60a4  embedded object  (0x20d04241 <undefined>)
0xffff7abb60f0  code target (STUB)  (0xffff7ab370c0)
0xffff7abb6130  code target (STUB)  (0xffff7ab378a0)
0xffff7abb6168  code target (STUB)  (0xffff7ab38080)
0xffff7abb6198  code target (STUB)  (0xffff7ab06820)
0xffff7abb61bc  code target (STUB)  (0xffff7ab06260)
0xffff7abb61c8  code target (STUB)  (0xffff7ab068e0)
0xffff7abb61dc  constant pool (size 76)
0xffff7abb6268  runtime entry
0xffff7abb6274  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0xffff7abb6040     0  ldur x6, [x1, #7]
0xffff7abb6044     4  ldur w7, [x6, #11]
0xffff7abb6048     8  adds w8, w7, #0x3 (3)
0xffff7abb604c    12  b.vs #+0x1dc (addr 0xffff7abb6228)
0xffff7abb6050    16  movz w16, #0x95ff
0xffff7abb6054    20  cmp w8, w16, lsl #1
0xffff7abb6058    24  b.hs #+0x1e0 (addr 0xffff7abb6238)
0xffff7abb605c    28  lsl x9, x8, #32
0xffff7abb6060    32  lsl w10, w8, #3
0xffff7abb6064    36  add w10, w10, #0x10 (16)
0xffff7abb6068    40  sxtw x10, w10
0xffff7abb606c    44  movz x11, #0xe2c0
0xffff7abb6070    48  movk x11, #0x9ab, lsl #16
0xffff7abb6074    52  ldp x13, x16, [x11]
0xffff7abb6078    56  adds x12, x13, x10
0xffff7abb607c    60  ccmp x12, x16, #nzCv, lo
0xffff7abb6080    64  b.hi #+0xf8 (addr 0xffff7abb6178)
0xffff7abb6084    68  str x12, [x11]
0xffff7abb6088    72  orr x13, x13, #0x1
0xffff7abb608c    76  ldr x10, pc+348 (addr 0x0000ffff7abb61e8)    ;; object: 0x4ec04259 <Map(FAST_SMI_ELEMENTS)>
0xffff7abb6090    80  stur x10, [x13, #-1]
0xffff7abb6094    84  stur x9, [x13, #7]
0xffff7abb6098    88  cmp w7, w8
0xffff7abb609c    92  b.ge #+0x18 (addr 0xffff7abb60b4)
0xffff7abb60a0    96  sub w8, w8, #0x1 (1)
0xffff7abb60a4   100  ldr x9, pc+332 (addr 0x0000ffff7abb61f0)    ;; object: 0x20d04241 <undefined>
0xffff7abb60a8   104  add x10, x13, #0xf (15)
0xffff7abb60ac   108  str x9, [x10, w8, sxtw #3]
0xffff7abb60b0   112  b #-0x18 (addr 0xffff7abb6098)
0xffff7abb60b4   116  cmp w7, #0x0 (0)
0xffff7abb60b8   120  b.le #+0x1c (addr 0xffff7abb60d4)
0xffff7abb60bc   124  sub w7, w7, #0x1 (1)
0xffff7abb60c0   128  add x8, x6, #0xf (15)
0xffff7abb60c4   132  ldr x9, [x8, w7, sxtw #3]
0xffff7abb60c8   136  add x8, x13, #0xf (15)
0xffff7abb60cc   140  str x9, [x8, w7, sxtw #3]
0xffff7abb60d0   144  b #-0x1c (addr 0xffff7abb60b4)
0xffff7abb60d4   148  stur x13, [x1, #7]
0xffff7abb60d8   152  add x6, x1, #0x7 (7)
0xffff7abb60dc   156  and x13, x1, #0xfffffffffff00000
0xffff7abb60e0   160  ldr x13, [x13, #8]
0xffff7abb60e4   164  tbz w13, #2, #+0x18 (addr 0xffff7abb60fc)
0xffff7abb60e8   168  sub csp, jssp, #0x8 (8)
0xffff7abb60ec   172  str lr, [jssp, #-8]!
0xffff7abb60f0   176  ldr x16, pc+264 (addr 0x0000ffff7abb61f8)    ;; code: STUB, RecordWriteStub, minor: 72097
0xffff7abb60f4   180  blr x16
0xffff7abb60f8   184  ldr lr, [jssp], #8
0xffff7abb60fc   188  tbz w0, #0, #+0x14c (addr 0xffff7abb6248)
0xffff7abb6100   192  mov x2, x0
0xffff7abb6104   196  ldur x4, [x1, #7]
0xffff7abb6108   200  stur x2, [x4, #111]
0xffff7abb610c   204  add x3, x4, #0x6f (111)
0xffff7abb6110   208  and x2, x2, #0xfffffffffff00000
0xffff7abb6114   212  ldr x2, [x2, #8]
0xffff7abb6118   216  tbz w2, #1, #+0x24 (addr 0xffff7abb613c)
0xffff7abb611c   220  and x2, x4, #0xfffffffffff00000
0xffff7abb6120   224  ldr x2, [x2, #8]
0xffff7abb6124   228  tbz w2, #2, #+0x18 (addr 0xffff7abb613c)
0xffff7abb6128   232  sub csp, jssp, #0x8 (8)
0xffff7abb612c   236  str lr, [jssp, #-8]!
0xffff7abb6130   240  ldr x16, pc+208 (addr 0x0000ffff7abb6200)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abb6134   244  blr x16
0xffff7abb6138   248  ldr lr, [jssp], #8
0xffff7abb613c   252  stur x5, [x1, #-1]
0xffff7abb6140   256  tbz w5, #0, #+0x34 (addr 0xffff7abb6174)
0xffff7abb6144   260  sub x2, x1, #0x1 (1)
0xffff7abb6148   264  and x5, x5, #0xfffffffffff00000
0xffff7abb614c   268  ldr x5, [x5, #8]
0xffff7abb6150   272  tbz w5, #1, #+0x24 (addr 0xffff7abb6174)
0xffff7abb6154   276  and x5, x1, #0xfffffffffff00000
0xffff7abb6158   280  ldr x5, [x5, #8]
0xffff7abb615c   284  tbz w5, #2, #+0x18 (addr 0xffff7abb6174)
0xffff7abb6160   288  sub csp, jssp, #0x8 (8)
0xffff7abb6164   292  str lr, [jssp, #-8]!
0xffff7abb6168   296  ldr x16, pc+160 (addr 0x0000ffff7abb6208)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abb616c   300  blr x16
0xffff7abb6170   304  ldr lr, [jssp], #8
0xffff7abb6174   308  ret
0xffff7abb6178   312  sub csp, jssp, #0x10 (16)
0xffff7abb617c   316  stp fp, lr, [jssp, #-16]!
0xffff7abb6180   320  movz fp, #0xa00000000
0xffff7abb6184   324  sub csp, jssp, #0x8 (8)
0xffff7abb6188   328  str fp, [jssp, #-8]!
0xffff7abb618c   332  add fp, jssp, #0x8 (8)
0xffff7abb6190   336  movz x13, #0x0
0xffff7abb6194   340  mov x16, lr
0xffff7abb6198   344  ldr x17, pc+120 (addr 0x0000ffff7abb6210)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abb619c   348  blr x17
0xffff7abb61a0   352  lsl x0, x10, #32
0xffff7abb61a4   356  movz x10, #0x0
0xffff7abb61a8   360  sub csp, jssp, #0x10 (16)
0xffff7abb61ac   364  stp x10, x0, [jssp, #-16]!
0xffff7abb61b0   368  movz x0, #0x2
0xffff7abb61b4   372  movz x1, #0x5b88
0xffff7abb61b8   376  movk x1, #0xe2, lsl #16
0xffff7abb61bc   380  ldr x16, pc+92 (addr 0x0000ffff7abb6218)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abb61c0   384  blr x16
0xffff7abb61c4   388  str x0, [jssp, #104]
0xffff7abb61c8   392  ldr x16, pc+88 (addr 0x0000ffff7abb6220)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abb61cc   396  blr x16
0xffff7abb61d0   400  ldr lr, [jssp, #16]
0xffff7abb61d4   404  ldp xzr, fp, [jssp], #24
0xffff7abb61d8   408  b #-0x14c (addr 0xffff7abb608c)
0xffff7abb61dc   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0xffff7abb61e0   416  d63f03e0       constant
0xffff7abb61e4   420  d503201f       constant
0xffff7abb61e8   424  4ec04259       constant
0xffff7abb61ec   428  00000000       constant
0xffff7abb61f0   432  20d04241       constant
0xffff7abb61f4   436  00000000       constant
0xffff7abb61f8   440  7ab370c0       constant
0xffff7abb61fc   444  0000ffff       constant
0xffff7abb6200   448  7ab378a0       constant
0xffff7abb6204   452  0000ffff       constant
0xffff7abb6208   456  7ab38080       constant
0xffff7abb620c   460  0000ffff       constant
0xffff7abb6210   464  7ab06820       constant
0xffff7abb6214   468  0000ffff       constant
0xffff7abb6218   472  7ab06260       constant
0xffff7abb621c   476  0000ffff       constant
0xffff7abb6220   480  7ab068e0       constant
0xffff7abb6224   484  0000ffff       constant
0xffff7abb6228   488  movz x16, #0x0
0xffff7abb622c   492  sub csp, jssp, #0x10 (16)
0xffff7abb6230   496  stp fp, lr, [jssp, #-16]!
0xffff7abb6234   500  bl #+0x24 (addr 0xffff7abb6258)
0xffff7abb6238   504  movz x16, #0x8
0xffff7abb623c   508  sub csp, jssp, #0x10 (16)
0xffff7abb6240   512  stp fp, lr, [jssp, #-16]!
0xffff7abb6244   516  bl #+0x14 (addr 0xffff7abb6258)
0xffff7abb6248   520  movz x16, #0x10
0xffff7abb624c   524  sub csp, jssp, #0x10 (16)
0xffff7abb6250   528  stp fp, lr, [jssp, #-16]!
0xffff7abb6254   532  bl #+0x4 (addr 0xffff7abb6258)
0xffff7abb6258   536  movz x17, #0xa00000000
0xffff7abb625c   540  sub csp, jssp, #0x10 (16)
0xffff7abb6260   544  stp x17, cp, [jssp, #-16]!
0xffff7abb6264   548  add fp, jssp, #0x10 (16)
0xffff7abb6268   552  ldr x17, pc+24 (addr 0x0000ffff7abb6280)    ;; lazy deoptimization bailout 0
0xffff7abb626c   556  add x17, x17, x16
0xffff7abb6270   560  br x17
0xffff7abb6274   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abb6278   568  d63f03e0       constant
0xffff7abb627c   572  d503201f       constant
0xffff7abb6280   576  7a906000       constant
0xffff7abb6284   580  0000ffff       constant


Safepoints (size = 21)
0xffff7abb61c4   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0xffff7abb608c  embedded object  (0x4ec04259 <Map(FAST_SMI_ELEMENTS)>)
0xffff7abb60a4  embedded object  (0x20d04241 <undefined>)
0xffff7abb60f0  code target (STUB)  (0xffff7ab370c0)
0xffff7abb6130  code target (STUB)  (0xffff7ab378a0)
0xffff7abb6168  code target (STUB)  (0xffff7ab38080)
0xffff7abb6198  code target (STUB)  (0xffff7ab06820)
0xffff7abb61bc  code target (STUB)  (0xffff7ab06260)
0xffff7abb61c8  code target (STUB)  (0xffff7ab068e0)
0xffff7abb61dc  constant pool (size 76)
0xffff7abb6268  runtime entry
0xffff7abb6274  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = fs
compiler = unknown
Instructions (size = 184)
0xffff7abb6300     0  sub csp, jssp, #0x8 (8)
0xffff7abb6304     4  str x3, [jssp, #-8]!
0xffff7abb6308     8  sub csp, jssp, #0x8 (8)
0xffff7abb630c    12  str x4, [jssp, #-8]!
0xffff7abb6310    16  ldr x3, pc+112 (addr 0x0000ffff7abb6380)    ;; object: 0x20d63e59 Cell for 0
0xffff7abb6314    20  ldur x3, [x3, #7]
0xffff7abb6318    24  cmp x3, #0x0 (0)
0xffff7abb631c    28  b.ne #+0x44 (addr 0xffff7abb6360)
0xffff7abb6320    32  tbz w0, #0, #+0x40 (addr 0xffff7abb6360)
0xffff7abb6324    36  ldur x3, [x0, #-1]
0xffff7abb6328    40  ldr x4, pc+96 (addr 0x0000ffff7abb6388)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abb632c    44  ldur x4, [x4, #7]
0xffff7abb6330    48  cmp x3, x4
0xffff7abb6334    52  b.ne #+0x2c (addr 0xffff7abb6360)
0xffff7abb6338    56  ldr x5, pc+88 (addr 0x0000ffff7abb6390)    ;; object: 0x5d40ca39 WeakCell for 0x4ec2d869 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abb633c    60  ldur x5, [x5, #7]
0xffff7abb6340    64  tbz w5, #0, #+0x20 (addr 0xffff7abb6360)
0xffff7abb6344    68  ldursw x4, [x5, #15]
0xffff7abb6348    72  tbnz w4, #23, #+0x18 (addr 0xffff7abb6360)
0xffff7abb634c    76  ldr x4, [jssp], #8
0xffff7abb6350    80  ldr x3, [jssp], #8
0xffff7abb6354    84  ldr x2, pc+68 (addr 0x0000ffff7abb6398)    ;; object: 0x20db9cd1 <String[2]: fs>
0xffff7abb6358    88  ldr x16, pc+72 (addr 0x0000ffff7abb63a0)    ;; code: HANDLER, StoreTransitionStub, minor: 327694
0xffff7abb635c    92  br x16
0xffff7abb6360    96  ldr x2, pc+72 (addr 0x0000ffff7abb63a8)    ;; object: 0x20db9cd1 <String[2]: fs>
0xffff7abb6364   100  ldr x4, [jssp], #8
0xffff7abb6368   104  ldr x3, [jssp], #8
0xffff7abb636c   108  ldr x16, pc+68 (addr 0x0000ffff7abb63b0)    ;; code: BUILTIN
0xffff7abb6370   112  br x16
0xffff7abb6374   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abb6378   120  d63f03e0       constant
0xffff7abb637c   124  d503201f       constant
0xffff7abb6380   128  20d63e59       constant
0xffff7abb6384   132  00000000       constant
0xffff7abb6388   136  20dc22b1       constant
0xffff7abb638c   140  00000000       constant
0xffff7abb6390   144  5d40ca39       constant
0xffff7abb6394   148  00000000       constant
0xffff7abb6398   152  20db9cd1       constant
0xffff7abb639c   156  00000000       constant
0xffff7abb63a0   160  7abb6040       constant
0xffff7abb63a4   164  0000ffff       constant
0xffff7abb63a8   168  20db9cd1       constant
0xffff7abb63ac   172  00000000       constant
0xffff7abb63b0   176  7ab22420       constant
0xffff7abb63b4   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abb6310  embedded object  (0x20d63e59 Cell for 0)
0xffff7abb6328  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abb6338  embedded object  (0x5d40ca39 WeakCell for 0x4ec2d869 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abb6354  embedded object  (0x20db9cd1 <String[2]: fs>)
0xffff7abb6358  code target (HANDLER)  (0xffff7abb6040)
0xffff7abb6360  embedded object  (0x20db9cd1 <String[2]: fs>)
0xffff7abb636c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abb6374  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = runInThisContext
compiler = unknown
Instructions (size = 120)
0xffff7abbc220     0  sub csp, jssp, #0x8 (8)
0xffff7abbc224     4  str x3, [jssp, #-8]!
0xffff7abbc228     8  sub csp, jssp, #0x8 (8)
0xffff7abbc22c    12  str x0, [jssp, #-8]!
0xffff7abbc230    16  ldr x0, pc+72 (addr 0x0000ffff7abbc278)    ;; object: 0x5d417749 Cell for 0
0xffff7abbc234    20  ldur x0, [x0, #7]
0xffff7abbc238    24  cmp x0, #0x0 (0)
0xffff7abbc23c    28  b.ne #+0x14 (addr 0xffff7abbc250)
0xffff7abbc240    32  ldr x3, pc+64 (addr 0x0000ffff7abbc280)    ;; object: 0x5d417759 WeakCell for 0x2ae51f71 <an Object with map 0x4ec2d4f9>
0xffff7abbc244    36  ldur x3, [x3, #7]
0xffff7abbc248    40  tbz w3, #0, #+0x8 (addr 0xffff7abbc250)
0xffff7abbc24c    44  b #+0x14 (addr 0xffff7abbc260)
0xffff7abbc250    48  ldr x0, [jssp], #8
0xffff7abbc254    52  ldr x3, [jssp], #8
0xffff7abbc258    56  ldr x16, pc+48 (addr 0x0000ffff7abbc288)    ;; code: BUILTIN
0xffff7abbc25c    60  br x16
0xffff7abbc260    64  add jssp, jssp, #0x10 (16)
0xffff7abbc264    68  mov x1, x3
0xffff7abbc268    72  ldr x16, pc+40 (addr 0x0000ffff7abbc290)    ;; code: HANDLER, LoadFieldStub, minor: 2051
0xffff7abbc26c    76  br x16
0xffff7abbc270    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abbc274    84  d63f03e0       constant
0xffff7abbc278    88  5d417749       constant
0xffff7abbc27c    92  00000000       constant
0xffff7abbc280    96  5d417759       constant
0xffff7abbc284   100  00000000       constant
0xffff7abbc288   104  7ab222e0       constant
0xffff7abbc28c   108  0000ffff       constant
0xffff7abbc290   112  7ab39340       constant
0xffff7abbc294   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abbc230  embedded object  (0x5d417749 Cell for 0)
0xffff7abbc240  embedded object  (0x5d417759 WeakCell for 0x2ae51f71 <an Object with map 0x4ec2d4f9>)
0xffff7abbc258  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abbc268  code target (HANDLER)  (0xffff7ab39340)
0xffff7abbc270  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7abbc5e0     0  tbz w0, #0, #+0x98 (addr 0xffff7abbc678)
0xffff7abbc5e4     4  mov x2, x0
0xffff7abbc5e8     8  ldur x4, [x1, #7]
0xffff7abbc5ec    12  stur x2, [x4, #119]
0xffff7abbc5f0    16  add x3, x4, #0x77 (119)
0xffff7abbc5f4    20  and x2, x2, #0xfffffffffff00000
0xffff7abbc5f8    24  ldr x2, [x2, #8]
0xffff7abbc5fc    28  tbz w2, #1, #+0x24 (addr 0xffff7abbc620)
0xffff7abbc600    32  and x2, x4, #0xfffffffffff00000
0xffff7abbc604    36  ldr x2, [x2, #8]
0xffff7abbc608    40  tbz w2, #2, #+0x18 (addr 0xffff7abbc620)
0xffff7abbc60c    44  sub csp, jssp, #0x8 (8)
0xffff7abbc610    48  str lr, [jssp, #-8]!
0xffff7abbc614    52  ldr x16, pc+84 (addr 0x0000ffff7abbc668)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abbc618    56  blr x16
0xffff7abbc61c    60  ldr lr, [jssp], #8
0xffff7abbc620    64  stur x5, [x1, #-1]
0xffff7abbc624    68  tbz w5, #0, #+0x34 (addr 0xffff7abbc658)
0xffff7abbc628    72  sub x2, x1, #0x1 (1)
0xffff7abbc62c    76  and x5, x5, #0xfffffffffff00000
0xffff7abbc630    80  ldr x5, [x5, #8]
0xffff7abbc634    84  tbz w5, #1, #+0x24 (addr 0xffff7abbc658)
0xffff7abbc638    88  and x5, x1, #0xfffffffffff00000
0xffff7abbc63c    92  ldr x5, [x5, #8]
0xffff7abbc640    96  tbz w5, #2, #+0x18 (addr 0xffff7abbc658)
0xffff7abbc644   100  sub csp, jssp, #0x8 (8)
0xffff7abbc648   104  str lr, [jssp, #-8]!
0xffff7abbc64c   108  ldr x16, pc+36 (addr 0x0000ffff7abbc670)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abbc650   112  blr x16
0xffff7abbc654   116  ldr lr, [jssp], #8
0xffff7abbc658   120  ret
0xffff7abbc65c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abbc660   128  d63f03e0       constant
0xffff7abbc664   132  d503201f       constant
0xffff7abbc668   136  7ab378a0       constant
0xffff7abbc66c   140  0000ffff       constant
0xffff7abbc670   144  7ab38080       constant
0xffff7abbc674   148  0000ffff       constant
0xffff7abbc678   152  movz x16, #0x0
0xffff7abbc67c   156  sub csp, jssp, #0x10 (16)
0xffff7abbc680   160  stp fp, lr, [jssp, #-16]!
0xffff7abbc684   164  bl #+0x4 (addr 0xffff7abbc688)
0xffff7abbc688   168  movz x17, #0xa00000000
0xffff7abbc68c   172  sub csp, jssp, #0x10 (16)
0xffff7abbc690   176  stp x17, cp, [jssp, #-16]!
0xffff7abbc694   180  add fp, jssp, #0x10 (16)
0xffff7abbc698   184  ldr x17, pc+24 (addr 0x0000ffff7abbc6b0)    ;; lazy deoptimization bailout 0
0xffff7abbc69c   188  add x17, x17, x16
0xffff7abbc6a0   192  br x17
0xffff7abbc6a4   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abbc6a8   200  d63f03e0       constant
0xffff7abbc6ac   204  d503201f       constant
0xffff7abbc6b0   208  7a906000       constant
0xffff7abbc6b4   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abbc614  code target (STUB)  (0xffff7ab378a0)
0xffff7abbc64c  code target (STUB)  (0xffff7ab38080)
0xffff7abbc65c  constant pool (size 28)
0xffff7abbc698  runtime entry
0xffff7abbc6a4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7abbc5e0     0  tbz w0, #0, #+0x98 (addr 0xffff7abbc678)
0xffff7abbc5e4     4  mov x2, x0
0xffff7abbc5e8     8  ldur x4, [x1, #7]
0xffff7abbc5ec    12  stur x2, [x4, #119]
0xffff7abbc5f0    16  add x3, x4, #0x77 (119)
0xffff7abbc5f4    20  and x2, x2, #0xfffffffffff00000
0xffff7abbc5f8    24  ldr x2, [x2, #8]
0xffff7abbc5fc    28  tbz w2, #1, #+0x24 (addr 0xffff7abbc620)
0xffff7abbc600    32  and x2, x4, #0xfffffffffff00000
0xffff7abbc604    36  ldr x2, [x2, #8]
0xffff7abbc608    40  tbz w2, #2, #+0x18 (addr 0xffff7abbc620)
0xffff7abbc60c    44  sub csp, jssp, #0x8 (8)
0xffff7abbc610    48  str lr, [jssp, #-8]!
0xffff7abbc614    52  ldr x16, pc+84 (addr 0x0000ffff7abbc668)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abbc618    56  blr x16
0xffff7abbc61c    60  ldr lr, [jssp], #8
0xffff7abbc620    64  stur x5, [x1, #-1]
0xffff7abbc624    68  tbz w5, #0, #+0x34 (addr 0xffff7abbc658)
0xffff7abbc628    72  sub x2, x1, #0x1 (1)
0xffff7abbc62c    76  and x5, x5, #0xfffffffffff00000
0xffff7abbc630    80  ldr x5, [x5, #8]
0xffff7abbc634    84  tbz w5, #1, #+0x24 (addr 0xffff7abbc658)
0xffff7abbc638    88  and x5, x1, #0xfffffffffff00000
0xffff7abbc63c    92  ldr x5, [x5, #8]
0xffff7abbc640    96  tbz w5, #2, #+0x18 (addr 0xffff7abbc658)
0xffff7abbc644   100  sub csp, jssp, #0x8 (8)
0xffff7abbc648   104  str lr, [jssp, #-8]!
0xffff7abbc64c   108  ldr x16, pc+36 (addr 0x0000ffff7abbc670)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abbc650   112  blr x16
0xffff7abbc654   116  ldr lr, [jssp], #8
0xffff7abbc658   120  ret
0xffff7abbc65c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abbc660   128  d63f03e0       constant
0xffff7abbc664   132  d503201f       constant
0xffff7abbc668   136  7ab378a0       constant
0xffff7abbc66c   140  0000ffff       constant
0xffff7abbc670   144  7ab38080       constant
0xffff7abbc674   148  0000ffff       constant
0xffff7abbc678   152  movz x16, #0x0
0xffff7abbc67c   156  sub csp, jssp, #0x10 (16)
0xffff7abbc680   160  stp fp, lr, [jssp, #-16]!
0xffff7abbc684   164  bl #+0x4 (addr 0xffff7abbc688)
0xffff7abbc688   168  movz x17, #0xa00000000
0xffff7abbc68c   172  sub csp, jssp, #0x10 (16)
0xffff7abbc690   176  stp x17, cp, [jssp, #-16]!
0xffff7abbc694   180  add fp, jssp, #0x10 (16)
0xffff7abbc698   184  ldr x17, pc+24 (addr 0x0000ffff7abbc6b0)    ;; lazy deoptimization bailout 0
0xffff7abbc69c   188  add x17, x17, x16
0xffff7abbc6a0   192  br x17
0xffff7abbc6a4   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abbc6a8   200  d63f03e0       constant
0xffff7abbc6ac   204  d503201f       constant
0xffff7abbc6b0   208  7a906000       constant
0xffff7abbc6b4   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abbc614  code target (STUB)  (0xffff7ab378a0)
0xffff7abbc64c  code target (STUB)  (0xffff7ab38080)
0xffff7abbc65c  constant pool (size 28)
0xffff7abbc698  runtime entry
0xffff7abbc6a4  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = stream
compiler = unknown
Instructions (size = 184)
0xffff7abbc720     0  sub csp, jssp, #0x8 (8)
0xffff7abbc724     4  str x3, [jssp, #-8]!
0xffff7abbc728     8  sub csp, jssp, #0x8 (8)
0xffff7abbc72c    12  str x4, [jssp, #-8]!
0xffff7abbc730    16  ldr x3, pc+112 (addr 0x0000ffff7abbc7a0)    ;; object: 0x20d63e59 Cell for 0
0xffff7abbc734    20  ldur x3, [x3, #7]
0xffff7abbc738    24  cmp x3, #0x0 (0)
0xffff7abbc73c    28  b.ne #+0x44 (addr 0xffff7abbc780)
0xffff7abbc740    32  tbz w0, #0, #+0x40 (addr 0xffff7abbc780)
0xffff7abbc744    36  ldur x3, [x0, #-1]
0xffff7abbc748    40  ldr x4, pc+96 (addr 0x0000ffff7abbc7a8)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abbc74c    44  ldur x4, [x4, #7]
0xffff7abbc750    48  cmp x3, x4
0xffff7abbc754    52  b.ne #+0x2c (addr 0xffff7abbc780)
0xffff7abbc758    56  ldr x5, pc+88 (addr 0x0000ffff7abbc7b0)    ;; object: 0x5d41c4a9 WeakCell for 0x4ec2fe91 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abbc75c    60  ldur x5, [x5, #7]
0xffff7abbc760    64  tbz w5, #0, #+0x20 (addr 0xffff7abbc780)
0xffff7abbc764    68  ldursw x4, [x5, #15]
0xffff7abbc768    72  tbnz w4, #23, #+0x18 (addr 0xffff7abbc780)
0xffff7abbc76c    76  ldr x4, [jssp], #8
0xffff7abbc770    80  ldr x3, [jssp], #8
0xffff7abbc774    84  ldr x2, pc+68 (addr 0x0000ffff7abbc7b8)    ;; object: 0x20dbe091 <String[6]: stream>
0xffff7abbc778    88  ldr x16, pc+72 (addr 0x0000ffff7abbc7c0)    ;; code: HANDLER, StoreTransitionStub, minor: 196623
0xffff7abbc77c    92  br x16
0xffff7abbc780    96  ldr x2, pc+72 (addr 0x0000ffff7abbc7c8)    ;; object: 0x20dbe091 <String[6]: stream>
0xffff7abbc784   100  ldr x4, [jssp], #8
0xffff7abbc788   104  ldr x3, [jssp], #8
0xffff7abbc78c   108  ldr x16, pc+68 (addr 0x0000ffff7abbc7d0)    ;; code: BUILTIN
0xffff7abbc790   112  br x16
0xffff7abbc794   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abbc798   120  d63f03e0       constant
0xffff7abbc79c   124  d503201f       constant
0xffff7abbc7a0   128  20d63e59       constant
0xffff7abbc7a4   132  00000000       constant
0xffff7abbc7a8   136  20dc22b1       constant
0xffff7abbc7ac   140  00000000       constant
0xffff7abbc7b0   144  5d41c4a9       constant
0xffff7abbc7b4   148  00000000       constant
0xffff7abbc7b8   152  20dbe091       constant
0xffff7abbc7bc   156  00000000       constant
0xffff7abbc7c0   160  7abbc5e0       constant
0xffff7abbc7c4   164  0000ffff       constant
0xffff7abbc7c8   168  20dbe091       constant
0xffff7abbc7cc   172  00000000       constant
0xffff7abbc7d0   176  7ab22420       constant
0xffff7abbc7d4   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abbc730  embedded object  (0x20d63e59 Cell for 0)
0xffff7abbc748  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abbc758  embedded object  (0x5d41c4a9 WeakCell for 0x4ec2fe91 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abbc774  embedded object  (0x20dbe091 <String[6]: stream>)
0xffff7abbc778  code target (HANDLER)  (0xffff7abbc5e0)
0xffff7abbc780  embedded object  (0x20dbe091 <String[6]: stream>)
0xffff7abbc78c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abbc794  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = call
compiler = unknown
Instructions (size = 120)
0xffff7abbce00     0  sub csp, jssp, #0x8 (8)
0xffff7abbce04     4  str x3, [jssp, #-8]!
0xffff7abbce08     8  sub csp, jssp, #0x8 (8)
0xffff7abbce0c    12  str x0, [jssp, #-8]!
0xffff7abbce10    16  ldr x0, pc+72 (addr 0x0000ffff7abbce58)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7abbce14    20  ldur x0, [x0, #7]
0xffff7abbce18    24  cmp x0, #0x0 (0)
0xffff7abbce1c    28  b.ne #+0x14 (addr 0xffff7abbce30)
0xffff7abbce20    32  ldr x3, pc+64 (addr 0x0000ffff7abbce60)    ;; object: 0x5d41cb01 WeakCell for 0x20d40019 <JS Function (SharedFunctionInfo 0x20d3ff71)>
0xffff7abbce24    36  ldur x3, [x3, #7]
0xffff7abbce28    40  tbz w3, #0, #+0x8 (addr 0xffff7abbce30)
0xffff7abbce2c    44  b #+0x14 (addr 0xffff7abbce40)
0xffff7abbce30    48  ldr x0, [jssp], #8
0xffff7abbce34    52  ldr x3, [jssp], #8
0xffff7abbce38    56  ldr x16, pc+48 (addr 0x0000ffff7abbce68)    ;; code: BUILTIN
0xffff7abbce3c    60  br x16
0xffff7abbce40    64  add jssp, jssp, #0x10 (16)
0xffff7abbce44    68  mov x1, x3
0xffff7abbce48    72  ldr x16, pc+40 (addr 0x0000ffff7abbce70)    ;; code: HANDLER, LoadConstantStub, minor: 6
0xffff7abbce4c    76  br x16
0xffff7abbce50    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abbce54    84  d63f03e0       constant
0xffff7abbce58    88  20d5b0f1       constant
0xffff7abbce5c    92  00000000       constant
0xffff7abbce60    96  5d41cb01       constant
0xffff7abbce64   100  00000000       constant
0xffff7abbce68   104  7ab222e0       constant
0xffff7abbce6c   108  0000ffff       constant
0xffff7abbce70   112  7ab8b020       constant
0xffff7abbce74   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abbce10  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7abbce20  embedded object  (0x5d41cb01 WeakCell for 0x20d40019 <JS Function (SharedFunctionInfo 0x20d3ff71)>)
0xffff7abbce38  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abbce48  code target (HANDLER)  (0xffff7ab8b020)
0xffff7abbce50  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7abbcee0     0  tbz w0, #0, #+0x98 (addr 0xffff7abbcf78)
0xffff7abbcee4     4  mov x2, x0
0xffff7abbcee8     8  ldur x4, [x1, #7]
0xffff7abbceec    12  stur x2, [x4, #127]
0xffff7abbcef0    16  add x3, x4, #0x7f (127)
0xffff7abbcef4    20  and x2, x2, #0xfffffffffff00000
0xffff7abbcef8    24  ldr x2, [x2, #8]
0xffff7abbcefc    28  tbz w2, #1, #+0x24 (addr 0xffff7abbcf20)
0xffff7abbcf00    32  and x2, x4, #0xfffffffffff00000
0xffff7abbcf04    36  ldr x2, [x2, #8]
0xffff7abbcf08    40  tbz w2, #2, #+0x18 (addr 0xffff7abbcf20)
0xffff7abbcf0c    44  sub csp, jssp, #0x8 (8)
0xffff7abbcf10    48  str lr, [jssp, #-8]!
0xffff7abbcf14    52  ldr x16, pc+84 (addr 0x0000ffff7abbcf68)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abbcf18    56  blr x16
0xffff7abbcf1c    60  ldr lr, [jssp], #8
0xffff7abbcf20    64  stur x5, [x1, #-1]
0xffff7abbcf24    68  tbz w5, #0, #+0x34 (addr 0xffff7abbcf58)
0xffff7abbcf28    72  sub x2, x1, #0x1 (1)
0xffff7abbcf2c    76  and x5, x5, #0xfffffffffff00000
0xffff7abbcf30    80  ldr x5, [x5, #8]
0xffff7abbcf34    84  tbz w5, #1, #+0x24 (addr 0xffff7abbcf58)
0xffff7abbcf38    88  and x5, x1, #0xfffffffffff00000
0xffff7abbcf3c    92  ldr x5, [x5, #8]
0xffff7abbcf40    96  tbz w5, #2, #+0x18 (addr 0xffff7abbcf58)
0xffff7abbcf44   100  sub csp, jssp, #0x8 (8)
0xffff7abbcf48   104  str lr, [jssp, #-8]!
0xffff7abbcf4c   108  ldr x16, pc+36 (addr 0x0000ffff7abbcf70)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abbcf50   112  blr x16
0xffff7abbcf54   116  ldr lr, [jssp], #8
0xffff7abbcf58   120  ret
0xffff7abbcf5c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abbcf60   128  d63f03e0       constant
0xffff7abbcf64   132  d503201f       constant
0xffff7abbcf68   136  7ab378a0       constant
0xffff7abbcf6c   140  0000ffff       constant
0xffff7abbcf70   144  7ab38080       constant
0xffff7abbcf74   148  0000ffff       constant
0xffff7abbcf78   152  movz x16, #0x0
0xffff7abbcf7c   156  sub csp, jssp, #0x10 (16)
0xffff7abbcf80   160  stp fp, lr, [jssp, #-16]!
0xffff7abbcf84   164  bl #+0x4 (addr 0xffff7abbcf88)
0xffff7abbcf88   168  movz x17, #0xa00000000
0xffff7abbcf8c   172  sub csp, jssp, #0x10 (16)
0xffff7abbcf90   176  stp x17, cp, [jssp, #-16]!
0xffff7abbcf94   180  add fp, jssp, #0x10 (16)
0xffff7abbcf98   184  ldr x17, pc+24 (addr 0x0000ffff7abbcfb0)    ;; lazy deoptimization bailout 0
0xffff7abbcf9c   188  add x17, x17, x16
0xffff7abbcfa0   192  br x17
0xffff7abbcfa4   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abbcfa8   200  d63f03e0       constant
0xffff7abbcfac   204  d503201f       constant
0xffff7abbcfb0   208  7a906000       constant
0xffff7abbcfb4   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abbcf14  code target (STUB)  (0xffff7ab378a0)
0xffff7abbcf4c  code target (STUB)  (0xffff7ab38080)
0xffff7abbcf5c  constant pool (size 28)
0xffff7abbcf98  runtime entry
0xffff7abbcfa4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7abbcee0     0  tbz w0, #0, #+0x98 (addr 0xffff7abbcf78)
0xffff7abbcee4     4  mov x2, x0
0xffff7abbcee8     8  ldur x4, [x1, #7]
0xffff7abbceec    12  stur x2, [x4, #127]
0xffff7abbcef0    16  add x3, x4, #0x7f (127)
0xffff7abbcef4    20  and x2, x2, #0xfffffffffff00000
0xffff7abbcef8    24  ldr x2, [x2, #8]
0xffff7abbcefc    28  tbz w2, #1, #+0x24 (addr 0xffff7abbcf20)
0xffff7abbcf00    32  and x2, x4, #0xfffffffffff00000
0xffff7abbcf04    36  ldr x2, [x2, #8]
0xffff7abbcf08    40  tbz w2, #2, #+0x18 (addr 0xffff7abbcf20)
0xffff7abbcf0c    44  sub csp, jssp, #0x8 (8)
0xffff7abbcf10    48  str lr, [jssp, #-8]!
0xffff7abbcf14    52  ldr x16, pc+84 (addr 0x0000ffff7abbcf68)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abbcf18    56  blr x16
0xffff7abbcf1c    60  ldr lr, [jssp], #8
0xffff7abbcf20    64  stur x5, [x1, #-1]
0xffff7abbcf24    68  tbz w5, #0, #+0x34 (addr 0xffff7abbcf58)
0xffff7abbcf28    72  sub x2, x1, #0x1 (1)
0xffff7abbcf2c    76  and x5, x5, #0xfffffffffff00000
0xffff7abbcf30    80  ldr x5, [x5, #8]
0xffff7abbcf34    84  tbz w5, #1, #+0x24 (addr 0xffff7abbcf58)
0xffff7abbcf38    88  and x5, x1, #0xfffffffffff00000
0xffff7abbcf3c    92  ldr x5, [x5, #8]
0xffff7abbcf40    96  tbz w5, #2, #+0x18 (addr 0xffff7abbcf58)
0xffff7abbcf44   100  sub csp, jssp, #0x8 (8)
0xffff7abbcf48   104  str lr, [jssp, #-8]!
0xffff7abbcf4c   108  ldr x16, pc+36 (addr 0x0000ffff7abbcf70)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abbcf50   112  blr x16
0xffff7abbcf54   116  ldr lr, [jssp], #8
0xffff7abbcf58   120  ret
0xffff7abbcf5c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abbcf60   128  d63f03e0       constant
0xffff7abbcf64   132  d503201f       constant
0xffff7abbcf68   136  7ab378a0       constant
0xffff7abbcf6c   140  0000ffff       constant
0xffff7abbcf70   144  7ab38080       constant
0xffff7abbcf74   148  0000ffff       constant
0xffff7abbcf78   152  movz x16, #0x0
0xffff7abbcf7c   156  sub csp, jssp, #0x10 (16)
0xffff7abbcf80   160  stp fp, lr, [jssp, #-16]!
0xffff7abbcf84   164  bl #+0x4 (addr 0xffff7abbcf88)
0xffff7abbcf88   168  movz x17, #0xa00000000
0xffff7abbcf8c   172  sub csp, jssp, #0x10 (16)
0xffff7abbcf90   176  stp x17, cp, [jssp, #-16]!
0xffff7abbcf94   180  add fp, jssp, #0x10 (16)
0xffff7abbcf98   184  ldr x17, pc+24 (addr 0x0000ffff7abbcfb0)    ;; lazy deoptimization bailout 0
0xffff7abbcf9c   188  add x17, x17, x16
0xffff7abbcfa0   192  br x17
0xffff7abbcfa4   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abbcfa8   200  d63f03e0       constant
0xffff7abbcfac   204  d503201f       constant
0xffff7abbcfb0   208  7a906000       constant
0xffff7abbcfb4   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abbcf14  code target (STUB)  (0xffff7ab378a0)
0xffff7abbcf4c  code target (STUB)  (0xffff7ab38080)
0xffff7abbcf5c  constant pool (size 28)
0xffff7abbcf98  runtime entry
0xffff7abbcfa4  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = internal/streams/legacy
compiler = unknown
Instructions (size = 184)
0xffff7abbd020     0  sub csp, jssp, #0x8 (8)
0xffff7abbd024     4  str x3, [jssp, #-8]!
0xffff7abbd028     8  sub csp, jssp, #0x8 (8)
0xffff7abbd02c    12  str x4, [jssp, #-8]!
0xffff7abbd030    16  ldr x3, pc+112 (addr 0x0000ffff7abbd0a0)    ;; object: 0x20d63e59 Cell for 0
0xffff7abbd034    20  ldur x3, [x3, #7]
0xffff7abbd038    24  cmp x3, #0x0 (0)
0xffff7abbd03c    28  b.ne #+0x44 (addr 0xffff7abbd080)
0xffff7abbd040    32  tbz w0, #0, #+0x40 (addr 0xffff7abbd080)
0xffff7abbd044    36  ldur x3, [x0, #-1]
0xffff7abbd048    40  ldr x4, pc+96 (addr 0x0000ffff7abbd0a8)    ;; object: 0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abbd04c    44  ldur x4, [x4, #7]
0xffff7abbd050    48  cmp x3, x4
0xffff7abbd054    52  b.ne #+0x2c (addr 0xffff7abbd080)
0xffff7abbd058    56  ldr x5, pc+88 (addr 0x0000ffff7abbd0b0)    ;; object: 0x5d41cc81 WeakCell for 0x4ec2fee9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abbd05c    60  ldur x5, [x5, #7]
0xffff7abbd060    64  tbz w5, #0, #+0x20 (addr 0xffff7abbd080)
0xffff7abbd064    68  ldursw x4, [x5, #15]
0xffff7abbd068    72  tbnz w4, #23, #+0x18 (addr 0xffff7abbd080)
0xffff7abbd06c    76  ldr x4, [jssp], #8
0xffff7abbd070    80  ldr x3, [jssp], #8
0xffff7abbd074    84  ldr x2, pc+68 (addr 0x0000ffff7abbd0b8)    ;; object: 0x20dbe491 <String[23]: internal/streams/legacy>
0xffff7abbd078    88  ldr x16, pc+72 (addr 0x0000ffff7abbd0c0)    ;; code: HANDLER, StoreTransitionStub, minor: 196624
0xffff7abbd07c    92  br x16
0xffff7abbd080    96  ldr x2, pc+72 (addr 0x0000ffff7abbd0c8)    ;; object: 0x20dbe491 <String[23]: internal/streams/legacy>
0xffff7abbd084   100  ldr x4, [jssp], #8
0xffff7abbd088   104  ldr x3, [jssp], #8
0xffff7abbd08c   108  ldr x16, pc+68 (addr 0x0000ffff7abbd0d0)    ;; code: BUILTIN
0xffff7abbd090   112  br x16
0xffff7abbd094   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abbd098   120  d63f03e0       constant
0xffff7abbd09c   124  d503201f       constant
0xffff7abbd0a0   128  20d63e59       constant
0xffff7abbd0a4   132  00000000       constant
0xffff7abbd0a8   136  20dc22b1       constant
0xffff7abbd0ac   140  00000000       constant
0xffff7abbd0b0   144  5d41cc81       constant
0xffff7abbd0b4   148  00000000       constant
0xffff7abbd0b8   152  20dbe491       constant
0xffff7abbd0bc   156  00000000       constant
0xffff7abbd0c0   160  7abbcee0       constant
0xffff7abbd0c4   164  0000ffff       constant
0xffff7abbd0c8   168  20dbe491       constant
0xffff7abbd0cc   172  00000000       constant
0xffff7abbd0d0   176  7ab22420       constant
0xffff7abbd0d4   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abbd030  embedded object  (0x20d63e59 Cell for 0)
0xffff7abbd048  embedded object  (0x20dc22b1 WeakCell for 0x4ec1b439 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abbd058  embedded object  (0x5d41cc81 WeakCell for 0x4ec2fee9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abbd074  embedded object  (0x20dbe491 <String[23]: internal/streams/legacy>)
0xffff7abbd078  code target (HANDLER)  (0xffff7abbcee0)
0xffff7abbd080  embedded object  (0x20dbe491 <String[23]: internal/streams/legacy>)
0xffff7abbd08c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abbd094  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = super_
compiler = unknown
Instructions (size = 152)
0xffff7abbd620     0  sub csp, jssp, #0x8 (8)
0xffff7abbd624     4  str x3, [jssp, #-8]!
0xffff7abbd628     8  sub csp, jssp, #0x8 (8)
0xffff7abbd62c    12  str x4, [jssp, #-8]!
0xffff7abbd630    16  ldr x3, pc+88 (addr 0x0000ffff7abbd688)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7abbd634    20  ldur x3, [x3, #7]
0xffff7abbd638    24  cmp x3, #0x0 (0)
0xffff7abbd63c    28  b.ne #+0x30 (addr 0xffff7abbd66c)
0xffff7abbd640    32  tbz w0, #0, #+0x2c (addr 0xffff7abbd66c)
0xffff7abbd644    36  ldr x5, pc+76 (addr 0x0000ffff7abbd690)    ;; object: 0x5d41d5d9 WeakCell for 0x4ec2ff41 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abbd648    40  ldur x5, [x5, #7]
0xffff7abbd64c    44  tbz w5, #0, #+0x20 (addr 0xffff7abbd66c)
0xffff7abbd650    48  ldursw x4, [x5, #15]
0xffff7abbd654    52  tbnz w4, #23, #+0x18 (addr 0xffff7abbd66c)
0xffff7abbd658    56  ldr x4, [jssp], #8
0xffff7abbd65c    60  ldr x3, [jssp], #8
0xffff7abbd660    64  ldr x2, pc+56 (addr 0x0000ffff7abbd698)    ;; object: 0x20dc9f09 <String[6]: super_>
0xffff7abbd664    68  ldr x16, pc+60 (addr 0x0000ffff7abbd6a0)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0xffff7abbd668    72  br x16
0xffff7abbd66c    76  ldr x2, pc+60 (addr 0x0000ffff7abbd6a8)    ;; object: 0x20dc9f09 <String[6]: super_>
0xffff7abbd670    80  ldr x4, [jssp], #8
0xffff7abbd674    84  ldr x3, [jssp], #8
0xffff7abbd678    88  ldr x16, pc+56 (addr 0x0000ffff7abbd6b0)    ;; code: BUILTIN
0xffff7abbd67c    92  br x16
0xffff7abbd680    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abbd684   100  d63f03e0       constant
0xffff7abbd688   104  20d5b0f1       constant
0xffff7abbd68c   108  00000000       constant
0xffff7abbd690   112  5d41d5d9       constant
0xffff7abbd694   116  00000000       constant
0xffff7abbd698   120  20dc9f09       constant
0xffff7abbd69c   124  00000000       constant
0xffff7abbd6a0   128  7ab38860       constant
0xffff7abbd6a4   132  0000ffff       constant
0xffff7abbd6a8   136  20dc9f09       constant
0xffff7abbd6ac   140  00000000       constant
0xffff7abbd6b0   144  7ab22420       constant
0xffff7abbd6b4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abbd630  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7abbd644  embedded object  (0x5d41d5d9 WeakCell for 0x4ec2ff41 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abbd660  embedded object  (0x20dc9f09 <String[6]: super_>)
0xffff7abbd664  code target (HANDLER)  (0xffff7ab38860)
0xffff7abbd66c  embedded object  (0x20dc9f09 <String[6]: super_>)
0xffff7abbd678  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abbd680  constant pool (size 56)

--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 781)
0xffff7abbd720     0  movz x2, #0xe2c0
0xffff7abbd724     4  movk x2, #0x9ab, lsl #16
0xffff7abbd728     8  ldp x3, x0, [x2]
0xffff7abbd72c    12  adds x16, x3, #0x130 (304)
0xffff7abbd730    16  ccmp x16, x0, #nzCv, lo
0xffff7abbd734    20  b.hi #+0x150 (addr 0xffff7abbd884)
0xffff7abbd738    24  str x16, [x2]
0xffff7abbd73c    28  orr x3, x3, #0x1
0xffff7abbd740    32  ldr x0, pc+432 (addr 0x0000ffff7abbd8f0)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abbd744    36  stur x0, [x3, #-1]
0xffff7abbd748    40  movz x0, #0x2400000000
0xffff7abbd74c    44  stur x0, [x3, #7]
0xffff7abbd750    48  stur x1, [x3, #15]
0xffff7abbd754    52  stur cp, [x3, #23]
0xffff7abbd758    56  ldr x0, pc+416 (addr 0x0000ffff7abbd8f8)    ;; object: 0x20d04519 <the hole>
0xffff7abbd75c    60  stur x0, [x3, #31]
0xffff7abbd760    64  ldur x0, [cp, #39]
0xffff7abbd764    68  stur x0, [x3, #39]
0xffff7abbd768    72  ldr x0, pc+408 (addr 0x0000ffff7abbd900)    ;; object: 0x20d04241 <undefined>
0xffff7abbd76c    76  stur x0, [x3, #47]
0xffff7abbd770    80  ldr x0, pc+408 (addr 0x0000ffff7abbd908)    ;; object: 0x20d04241 <undefined>
0xffff7abbd774    84  stur x0, [x3, #55]
0xffff7abbd778    88  ldr x0, pc+408 (addr 0x0000ffff7abbd910)    ;; object: 0x20d04241 <undefined>
0xffff7abbd77c    92  stur x0, [x3, #63]
0xffff7abbd780    96  ldr x0, pc+408 (addr 0x0000ffff7abbd918)    ;; object: 0x20d04241 <undefined>
0xffff7abbd784   100  stur x0, [x3, #71]
0xffff7abbd788   104  ldr x0, pc+408 (addr 0x0000ffff7abbd920)    ;; object: 0x20d04241 <undefined>
0xffff7abbd78c   108  stur x0, [x3, #79]
0xffff7abbd790   112  ldr x0, pc+408 (addr 0x0000ffff7abbd928)    ;; object: 0x20d04241 <undefined>
0xffff7abbd794   116  stur x0, [x3, #87]
0xffff7abbd798   120  ldr x0, pc+408 (addr 0x0000ffff7abbd930)    ;; object: 0x20d04241 <undefined>
0xffff7abbd79c   124  stur x0, [x3, #95]
0xffff7abbd7a0   128  ldr x0, pc+408 (addr 0x0000ffff7abbd938)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7a4   132  stur x0, [x3, #103]
0xffff7abbd7a8   136  ldr x0, pc+408 (addr 0x0000ffff7abbd940)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7ac   140  stur x0, [x3, #111]
0xffff7abbd7b0   144  ldr x0, pc+408 (addr 0x0000ffff7abbd948)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7b4   148  stur x0, [x3, #119]
0xffff7abbd7b8   152  ldr x0, pc+408 (addr 0x0000ffff7abbd950)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7bc   156  stur x0, [x3, #127]
0xffff7abbd7c0   160  ldr x0, pc+408 (addr 0x0000ffff7abbd958)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7c4   164  stur x0, [x3, #135]
0xffff7abbd7c8   168  ldr x0, pc+408 (addr 0x0000ffff7abbd960)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7cc   172  stur x0, [x3, #143]
0xffff7abbd7d0   176  ldr x0, pc+408 (addr 0x0000ffff7abbd968)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7d4   180  stur x0, [x3, #151]
0xffff7abbd7d8   184  ldr x0, pc+408 (addr 0x0000ffff7abbd970)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7dc   188  stur x0, [x3, #159]
0xffff7abbd7e0   192  ldr x0, pc+408 (addr 0x0000ffff7abbd978)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7e4   196  stur x0, [x3, #167]
0xffff7abbd7e8   200  ldr x0, pc+408 (addr 0x0000ffff7abbd980)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7ec   204  stur x0, [x3, #175]
0xffff7abbd7f0   208  ldr x0, pc+408 (addr 0x0000ffff7abbd988)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7f4   212  stur x0, [x3, #183]
0xffff7abbd7f8   216  ldr x0, pc+408 (addr 0x0000ffff7abbd990)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7fc   220  stur x0, [x3, #191]
0xffff7abbd800   224  ldr x0, pc+408 (addr 0x0000ffff7abbd998)    ;; object: 0x20d04241 <undefined>
0xffff7abbd804   228  stur x0, [x3, #199]
0xffff7abbd808   232  ldr x0, pc+408 (addr 0x0000ffff7abbd9a0)    ;; object: 0x20d04241 <undefined>
0xffff7abbd80c   236  stur x0, [x3, #207]
0xffff7abbd810   240  ldr x0, pc+408 (addr 0x0000ffff7abbd9a8)    ;; object: 0x20d04241 <undefined>
0xffff7abbd814   244  stur x0, [x3, #215]
0xffff7abbd818   248  ldr x0, pc+408 (addr 0x0000ffff7abbd9b0)    ;; object: 0x20d04241 <undefined>
0xffff7abbd81c   252  stur x0, [x3, #223]
0xffff7abbd820   256  ldr x0, pc+408 (addr 0x0000ffff7abbd9b8)    ;; object: 0x20d04241 <undefined>
0xffff7abbd824   260  stur x0, [x3, #231]
0xffff7abbd828   264  ldr x0, pc+408 (addr 0x0000ffff7abbd9c0)    ;; object: 0x20d04241 <undefined>
0xffff7abbd82c   268  stur x0, [x3, #239]
0xffff7abbd830   272  ldr x0, pc+408 (addr 0x0000ffff7abbd9c8)    ;; object: 0x20d04241 <undefined>
0xffff7abbd834   276  stur x0, [x3, #247]
0xffff7abbd838   280  ldr x0, pc+408 (addr 0x0000ffff7abbd9d0)    ;; object: 0x20d04241 <undefined>
0xffff7abbd83c   284  stur x0, [x3, #255]
0xffff7abbd840   288  ldr x0, pc+408 (addr 0x0000ffff7abbd9d8)    ;; object: 0x20d04241 <undefined>
0xffff7abbd844   292  movz x16, #0x107
0xffff7abbd848   296  str x0, [x3, x16]
0xffff7abbd84c   300  ldr x0, pc+404 (addr 0x0000ffff7abbd9e0)    ;; object: 0x20d04241 <undefined>
0xffff7abbd850   304  movz x16, #0x10f
0xffff7abbd854   308  str x0, [x3, x16]
0xffff7abbd858   312  ldr x0, pc+400 (addr 0x0000ffff7abbd9e8)    ;; object: 0x20d04241 <undefined>
0xffff7abbd85c   316  movz x16, #0x117
0xffff7abbd860   320  str x0, [x3, x16]
0xffff7abbd864   324  ldr x0, pc+396 (addr 0x0000ffff7abbd9f0)    ;; object: 0x20d04241 <undefined>
0xffff7abbd868   328  movz x16, #0x11f
0xffff7abbd86c   332  str x0, [x3, x16]
0xffff7abbd870   336  ldr x0, pc+392 (addr 0x0000ffff7abbd9f8)    ;; object: 0x20d04241 <undefined>
0xffff7abbd874   340  movz x16, #0x127
0xffff7abbd878   344  str x0, [x3, x16]
0xffff7abbd87c   348  mov x0, x3
0xffff7abbd880   352  ret
0xffff7abbd884   356  sub csp, jssp, #0x10 (16)
0xffff7abbd888   360  stp fp, lr, [jssp, #-16]!
0xffff7abbd88c   364  movz fp, #0xa00000000
0xffff7abbd890   368  sub csp, jssp, #0x8 (8)
0xffff7abbd894   372  str fp, [jssp, #-8]!
0xffff7abbd898   376  add fp, jssp, #0x8 (8)
0xffff7abbd89c   380  movz x3, #0x0
0xffff7abbd8a0   384  mov x16, lr
0xffff7abbd8a4   388  ldr x17, pc+348 (addr 0x0000ffff7abbda00)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abbd8a8   392  blr x17
0xffff7abbd8ac   396  movz x0, #0x13000000000
0xffff7abbd8b0   400  movz x10, #0x0
0xffff7abbd8b4   404  sub csp, jssp, #0x10 (16)
0xffff7abbd8b8   408  stp x10, x0, [jssp, #-16]!
0xffff7abbd8bc   412  movz x0, #0x2
0xffff7abbd8c0   416  movz x1, #0x5b88
0xffff7abbd8c4   420  movk x1, #0xe2, lsl #16
0xffff7abbd8c8   424  ldr x16, pc+320 (addr 0x0000ffff7abbda08)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abbd8cc   428  blr x16
0xffff7abbd8d0   432  str x0, [jssp, #24]
0xffff7abbd8d4   436  ldr x16, pc+316 (addr 0x0000ffff7abbda10)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abbd8d8   440  blr x16
0xffff7abbd8dc   444  ldr lr, [jssp, #16]
0xffff7abbd8e0   448  ldp xzr, fp, [jssp], #24
0xffff7abbd8e4   452  b #-0x1a4 (addr 0xffff7abbd740)
0xffff7abbd8e8   456  5800097f       constant pool begin (num_const = 75)    ;; constant pool
0xffff7abbd8ec   460  d63f03e0       constant
0xffff7abbd8f0   464  4ec06149       constant
0xffff7abbd8f4   468  00000000       constant
0xffff7abbd8f8   472  20d04519       constant
0xffff7abbd8fc   476  00000000       constant
0xffff7abbd900   480  20d04241       constant
0xffff7abbd904   484  00000000       constant
0xffff7abbd908   488  20d04241       constant
0xffff7abbd90c   492  00000000       constant
0xffff7abbd910   496  20d04241       constant
0xffff7abbd914   500  00000000       constant
0xffff7abbd918   504  20d04241       constant
0xffff7abbd91c   508  00000000       constant
0xffff7abbd920   512  20d04241       constant
0xffff7abbd924   516  00000000       constant
0xffff7abbd928   520  20d04241       constant
0xffff7abbd92c   524  00000000       constant
0xffff7abbd930   528  20d04241       constant
0xffff7abbd934   532  00000000       constant
0xffff7abbd938   536  20d04241       constant
0xffff7abbd93c   540  00000000       constant
0xffff7abbd940   544  20d04241       constant
0xffff7abbd944   548  00000000       constant
0xffff7abbd948   552  20d04241       constant
0xffff7abbd94c   556  00000000       constant
0xffff7abbd950   560  20d04241       constant
0xffff7abbd954   564  00000000       constant
0xffff7abbd958   568  20d04241       constant
0xffff7abbd95c   572  00000000       constant
0xffff7abbd960   576  20d04241       constant
0xffff7abbd964   580  00000000       constant
0xffff7abbd968   584  20d04241       constant
0xffff7abbd96c   588  00000000       constant
0xffff7abbd970   592  20d04241       constant
0xffff7abbd974   596  00000000       constant
0xffff7abbd978   600  20d04241       constant
0xffff7abbd97c   604  00000000       constant
0xffff7abbd980   608  20d04241       constant
0xffff7abbd984   612  00000000       constant
0xffff7abbd988   616  20d04241       constant
0xffff7abbd98c   620  00000000       constant
0xffff7abbd990   624  20d04241       constant
0xffff7abbd994   628  00000000       constant
0xffff7abbd998   632  20d04241       constant
0xffff7abbd99c   636  00000000       constant
0xffff7abbd9a0   640  20d04241       constant
0xffff7abbd9a4   644  00000000       constant
0xffff7abbd9a8   648  20d04241       constant
0xffff7abbd9ac   652  00000000       constant
0xffff7abbd9b0   656  20d04241       constant
0xffff7abbd9b4   660  00000000       constant
0xffff7abbd9b8   664  20d04241       constant
0xffff7abbd9bc   668  00000000       constant
0xffff7abbd9c0   672  20d04241       constant
0xffff7abbd9c4   676  00000000       constant
0xffff7abbd9c8   680  20d04241       constant
0xffff7abbd9cc   684  00000000       constant
0xffff7abbd9d0   688  20d04241       constant
0xffff7abbd9d4   692  00000000       constant
0xffff7abbd9d8   696  20d04241       constant
0xffff7abbd9dc   700  00000000       constant
0xffff7abbd9e0   704  20d04241       constant
0xffff7abbd9e4   708  00000000       constant
0xffff7abbd9e8   712  20d04241       constant
0xffff7abbd9ec   716  00000000       constant
0xffff7abbd9f0   720  20d04241       constant
0xffff7abbd9f4   724  00000000       constant
0xffff7abbd9f8   728  20d04241       constant
0xffff7abbd9fc   732  00000000       constant
0xffff7abbda00   736  7ab06820       constant
0xffff7abbda04   740  0000ffff       constant
0xffff7abbda08   744  7ab06260       constant
0xffff7abbda0c   748  0000ffff       constant
0xffff7abbda10   752  7ab068e0       constant
0xffff7abbda14   756  0000ffff       constant


Safepoints (size = 21)
0xffff7abbd8d0   432  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 43)
0xffff7abbd740  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abbd758  embedded object  (0x20d04519 <the hole>)
0xffff7abbd768  embedded object  (0x20d04241 <undefined>)
0xffff7abbd770  embedded object  (0x20d04241 <undefined>)
0xffff7abbd778  embedded object  (0x20d04241 <undefined>)
0xffff7abbd780  embedded object  (0x20d04241 <undefined>)
0xffff7abbd788  embedded object  (0x20d04241 <undefined>)
0xffff7abbd790  embedded object  (0x20d04241 <undefined>)
0xffff7abbd798  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7a0  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7a8  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7b0  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7b8  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7c0  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7c8  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7d0  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7d8  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7e0  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7e8  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7f0  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7f8  embedded object  (0x20d04241 <undefined>)
0xffff7abbd800  embedded object  (0x20d04241 <undefined>)
0xffff7abbd808  embedded object  (0x20d04241 <undefined>)
0xffff7abbd810  embedded object  (0x20d04241 <undefined>)
0xffff7abbd818  embedded object  (0x20d04241 <undefined>)
0xffff7abbd820  embedded object  (0x20d04241 <undefined>)
0xffff7abbd828  embedded object  (0x20d04241 <undefined>)
0xffff7abbd830  embedded object  (0x20d04241 <undefined>)
0xffff7abbd838  embedded object  (0x20d04241 <undefined>)
0xffff7abbd840  embedded object  (0x20d04241 <undefined>)
0xffff7abbd84c  embedded object  (0x20d04241 <undefined>)
0xffff7abbd858  embedded object  (0x20d04241 <undefined>)
0xffff7abbd864  embedded object  (0x20d04241 <undefined>)
0xffff7abbd870  embedded object  (0x20d04241 <undefined>)
0xffff7abbd8a4  code target (STUB)  (0xffff7ab06820)
0xffff7abbd8c8  code target (STUB)  (0xffff7ab06260)
0xffff7abbd8d4  code target (STUB)  (0xffff7ab068e0)
0xffff7abbd8e8  constant pool (size 304)

--- End code ---
kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 781)
0xffff7abbd720     0  movz x2, #0xe2c0
0xffff7abbd724     4  movk x2, #0x9ab, lsl #16
0xffff7abbd728     8  ldp x3, x0, [x2]
0xffff7abbd72c    12  adds x16, x3, #0x130 (304)
0xffff7abbd730    16  ccmp x16, x0, #nzCv, lo
0xffff7abbd734    20  b.hi #+0x150 (addr 0xffff7abbd884)
0xffff7abbd738    24  str x16, [x2]
0xffff7abbd73c    28  orr x3, x3, #0x1
0xffff7abbd740    32  ldr x0, pc+432 (addr 0x0000ffff7abbd8f0)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abbd744    36  stur x0, [x3, #-1]
0xffff7abbd748    40  movz x0, #0x2400000000
0xffff7abbd74c    44  stur x0, [x3, #7]
0xffff7abbd750    48  stur x1, [x3, #15]
0xffff7abbd754    52  stur cp, [x3, #23]
0xffff7abbd758    56  ldr x0, pc+416 (addr 0x0000ffff7abbd8f8)    ;; object: 0x20d04519 <the hole>
0xffff7abbd75c    60  stur x0, [x3, #31]
0xffff7abbd760    64  ldur x0, [cp, #39]
0xffff7abbd764    68  stur x0, [x3, #39]
0xffff7abbd768    72  ldr x0, pc+408 (addr 0x0000ffff7abbd900)    ;; object: 0x20d04241 <undefined>
0xffff7abbd76c    76  stur x0, [x3, #47]
0xffff7abbd770    80  ldr x0, pc+408 (addr 0x0000ffff7abbd908)    ;; object: 0x20d04241 <undefined>
0xffff7abbd774    84  stur x0, [x3, #55]
0xffff7abbd778    88  ldr x0, pc+408 (addr 0x0000ffff7abbd910)    ;; object: 0x20d04241 <undefined>
0xffff7abbd77c    92  stur x0, [x3, #63]
0xffff7abbd780    96  ldr x0, pc+408 (addr 0x0000ffff7abbd918)    ;; object: 0x20d04241 <undefined>
0xffff7abbd784   100  stur x0, [x3, #71]
0xffff7abbd788   104  ldr x0, pc+408 (addr 0x0000ffff7abbd920)    ;; object: 0x20d04241 <undefined>
0xffff7abbd78c   108  stur x0, [x3, #79]
0xffff7abbd790   112  ldr x0, pc+408 (addr 0x0000ffff7abbd928)    ;; object: 0x20d04241 <undefined>
0xffff7abbd794   116  stur x0, [x3, #87]
0xffff7abbd798   120  ldr x0, pc+408 (addr 0x0000ffff7abbd930)    ;; object: 0x20d04241 <undefined>
0xffff7abbd79c   124  stur x0, [x3, #95]
0xffff7abbd7a0   128  ldr x0, pc+408 (addr 0x0000ffff7abbd938)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7a4   132  stur x0, [x3, #103]
0xffff7abbd7a8   136  ldr x0, pc+408 (addr 0x0000ffff7abbd940)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7ac   140  stur x0, [x3, #111]
0xffff7abbd7b0   144  ldr x0, pc+408 (addr 0x0000ffff7abbd948)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7b4   148  stur x0, [x3, #119]
0xffff7abbd7b8   152  ldr x0, pc+408 (addr 0x0000ffff7abbd950)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7bc   156  stur x0, [x3, #127]
0xffff7abbd7c0   160  ldr x0, pc+408 (addr 0x0000ffff7abbd958)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7c4   164  stur x0, [x3, #135]
0xffff7abbd7c8   168  ldr x0, pc+408 (addr 0x0000ffff7abbd960)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7cc   172  stur x0, [x3, #143]
0xffff7abbd7d0   176  ldr x0, pc+408 (addr 0x0000ffff7abbd968)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7d4   180  stur x0, [x3, #151]
0xffff7abbd7d8   184  ldr x0, pc+408 (addr 0x0000ffff7abbd970)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7dc   188  stur x0, [x3, #159]
0xffff7abbd7e0   192  ldr x0, pc+408 (addr 0x0000ffff7abbd978)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7e4   196  stur x0, [x3, #167]
0xffff7abbd7e8   200  ldr x0, pc+408 (addr 0x0000ffff7abbd980)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7ec   204  stur x0, [x3, #175]
0xffff7abbd7f0   208  ldr x0, pc+408 (addr 0x0000ffff7abbd988)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7f4   212  stur x0, [x3, #183]
0xffff7abbd7f8   216  ldr x0, pc+408 (addr 0x0000ffff7abbd990)    ;; object: 0x20d04241 <undefined>
0xffff7abbd7fc   220  stur x0, [x3, #191]
0xffff7abbd800   224  ldr x0, pc+408 (addr 0x0000ffff7abbd998)    ;; object: 0x20d04241 <undefined>
0xffff7abbd804   228  stur x0, [x3, #199]
0xffff7abbd808   232  ldr x0, pc+408 (addr 0x0000ffff7abbd9a0)    ;; object: 0x20d04241 <undefined>
0xffff7abbd80c   236  stur x0, [x3, #207]
0xffff7abbd810   240  ldr x0, pc+408 (addr 0x0000ffff7abbd9a8)    ;; object: 0x20d04241 <undefined>
0xffff7abbd814   244  stur x0, [x3, #215]
0xffff7abbd818   248  ldr x0, pc+408 (addr 0x0000ffff7abbd9b0)    ;; object: 0x20d04241 <undefined>
0xffff7abbd81c   252  stur x0, [x3, #223]
0xffff7abbd820   256  ldr x0, pc+408 (addr 0x0000ffff7abbd9b8)    ;; object: 0x20d04241 <undefined>
0xffff7abbd824   260  stur x0, [x3, #231]
0xffff7abbd828   264  ldr x0, pc+408 (addr 0x0000ffff7abbd9c0)    ;; object: 0x20d04241 <undefined>
0xffff7abbd82c   268  stur x0, [x3, #239]
0xffff7abbd830   272  ldr x0, pc+408 (addr 0x0000ffff7abbd9c8)    ;; object: 0x20d04241 <undefined>
0xffff7abbd834   276  stur x0, [x3, #247]
0xffff7abbd838   280  ldr x0, pc+408 (addr 0x0000ffff7abbd9d0)    ;; object: 0x20d04241 <undefined>
0xffff7abbd83c   284  stur x0, [x3, #255]
0xffff7abbd840   288  ldr x0, pc+408 (addr 0x0000ffff7abbd9d8)    ;; object: 0x20d04241 <undefined>
0xffff7abbd844   292  movz x16, #0x107
0xffff7abbd848   296  str x0, [x3, x16]
0xffff7abbd84c   300  ldr x0, pc+404 (addr 0x0000ffff7abbd9e0)    ;; object: 0x20d04241 <undefined>
0xffff7abbd850   304  movz x16, #0x10f
0xffff7abbd854   308  str x0, [x3, x16]
0xffff7abbd858   312  ldr x0, pc+400 (addr 0x0000ffff7abbd9e8)    ;; object: 0x20d04241 <undefined>
0xffff7abbd85c   316  movz x16, #0x117
0xffff7abbd860   320  str x0, [x3, x16]
0xffff7abbd864   324  ldr x0, pc+396 (addr 0x0000ffff7abbd9f0)    ;; object: 0x20d04241 <undefined>
0xffff7abbd868   328  movz x16, #0x11f
0xffff7abbd86c   332  str x0, [x3, x16]
0xffff7abbd870   336  ldr x0, pc+392 (addr 0x0000ffff7abbd9f8)    ;; object: 0x20d04241 <undefined>
0xffff7abbd874   340  movz x16, #0x127
0xffff7abbd878   344  str x0, [x3, x16]
0xffff7abbd87c   348  mov x0, x3
0xffff7abbd880   352  ret
0xffff7abbd884   356  sub csp, jssp, #0x10 (16)
0xffff7abbd888   360  stp fp, lr, [jssp, #-16]!
0xffff7abbd88c   364  movz fp, #0xa00000000
0xffff7abbd890   368  sub csp, jssp, #0x8 (8)
0xffff7abbd894   372  str fp, [jssp, #-8]!
0xffff7abbd898   376  add fp, jssp, #0x8 (8)
0xffff7abbd89c   380  movz x3, #0x0
0xffff7abbd8a0   384  mov x16, lr
0xffff7abbd8a4   388  ldr x17, pc+348 (addr 0x0000ffff7abbda00)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abbd8a8   392  blr x17
0xffff7abbd8ac   396  movz x0, #0x13000000000
0xffff7abbd8b0   400  movz x10, #0x0
0xffff7abbd8b4   404  sub csp, jssp, #0x10 (16)
0xffff7abbd8b8   408  stp x10, x0, [jssp, #-16]!
0xffff7abbd8bc   412  movz x0, #0x2
0xffff7abbd8c0   416  movz x1, #0x5b88
0xffff7abbd8c4   420  movk x1, #0xe2, lsl #16
0xffff7abbd8c8   424  ldr x16, pc+320 (addr 0x0000ffff7abbda08)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abbd8cc   428  blr x16
0xffff7abbd8d0   432  str x0, [jssp, #24]
0xffff7abbd8d4   436  ldr x16, pc+316 (addr 0x0000ffff7abbda10)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abbd8d8   440  blr x16
0xffff7abbd8dc   444  ldr lr, [jssp, #16]
0xffff7abbd8e0   448  ldp xzr, fp, [jssp], #24
0xffff7abbd8e4   452  b #-0x1a4 (addr 0xffff7abbd740)
0xffff7abbd8e8   456  5800097f       constant pool begin (num_const = 75)    ;; constant pool
0xffff7abbd8ec   460  d63f03e0       constant
0xffff7abbd8f0   464  4ec06149       constant
0xffff7abbd8f4   468  00000000       constant
0xffff7abbd8f8   472  20d04519       constant
0xffff7abbd8fc   476  00000000       constant
0xffff7abbd900   480  20d04241       constant
0xffff7abbd904   484  00000000       constant
0xffff7abbd908   488  20d04241       constant
0xffff7abbd90c   492  00000000       constant
0xffff7abbd910   496  20d04241       constant
0xffff7abbd914   500  00000000       constant
0xffff7abbd918   504  20d04241       constant
0xffff7abbd91c   508  00000000       constant
0xffff7abbd920   512  20d04241       constant
0xffff7abbd924   516  00000000       constant
0xffff7abbd928   520  20d04241       constant
0xffff7abbd92c   524  00000000       constant
0xffff7abbd930   528  20d04241       constant
0xffff7abbd934   532  00000000       constant
0xffff7abbd938   536  20d04241       constant
0xffff7abbd93c   540  00000000       constant
0xffff7abbd940   544  20d04241       constant
0xffff7abbd944   548  00000000       constant
0xffff7abbd948   552  20d04241       constant
0xffff7abbd94c   556  00000000       constant
0xffff7abbd950   560  20d04241       constant
0xffff7abbd954   564  00000000       constant
0xffff7abbd958   568  20d04241       constant
0xffff7abbd95c   572  00000000       constant
0xffff7abbd960   576  20d04241       constant
0xffff7abbd964   580  00000000       constant
0xffff7abbd968   584  20d04241       constant
0xffff7abbd96c   588  00000000       constant
0xffff7abbd970   592  20d04241       constant
0xffff7abbd974   596  00000000       constant
0xffff7abbd978   600  20d04241       constant
0xffff7abbd97c   604  00000000       constant
0xffff7abbd980   608  20d04241       constant
0xffff7abbd984   612  00000000       constant
0xffff7abbd988   616  20d04241       constant
0xffff7abbd98c   620  00000000       constant
0xffff7abbd990   624  20d04241       constant
0xffff7abbd994   628  00000000       constant
0xffff7abbd998   632  20d04241       constant
0xffff7abbd99c   636  00000000       constant
0xffff7abbd9a0   640  20d04241       constant
0xffff7abbd9a4   644  00000000       constant
0xffff7abbd9a8   648  20d04241       constant
0xffff7abbd9ac   652  00000000       constant
0xffff7abbd9b0   656  20d04241       constant
0xffff7abbd9b4   660  00000000       constant
0xffff7abbd9b8   664  20d04241       constant
0xffff7abbd9bc   668  00000000       constant
0xffff7abbd9c0   672  20d04241       constant
0xffff7abbd9c4   676  00000000       constant
0xffff7abbd9c8   680  20d04241       constant
0xffff7abbd9cc   684  00000000       constant
0xffff7abbd9d0   688  20d04241       constant
0xffff7abbd9d4   692  00000000       constant
0xffff7abbd9d8   696  20d04241       constant
0xffff7abbd9dc   700  00000000       constant
0xffff7abbd9e0   704  20d04241       constant
0xffff7abbd9e4   708  00000000       constant
0xffff7abbd9e8   712  20d04241       constant
0xffff7abbd9ec   716  00000000       constant
0xffff7abbd9f0   720  20d04241       constant
0xffff7abbd9f4   724  00000000       constant
0xffff7abbd9f8   728  20d04241       constant
0xffff7abbd9fc   732  00000000       constant
0xffff7abbda00   736  7ab06820       constant
0xffff7abbda04   740  0000ffff       constant
0xffff7abbda08   744  7ab06260       constant
0xffff7abbda0c   748  0000ffff       constant
0xffff7abbda10   752  7ab068e0       constant
0xffff7abbda14   756  0000ffff       constant


Safepoints (size = 21)
0xffff7abbd8d0   432  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 43)
0xffff7abbd740  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abbd758  embedded object  (0x20d04519 <the hole>)
0xffff7abbd768  embedded object  (0x20d04241 <undefined>)
0xffff7abbd770  embedded object  (0x20d04241 <undefined>)
0xffff7abbd778  embedded object  (0x20d04241 <undefined>)
0xffff7abbd780  embedded object  (0x20d04241 <undefined>)
0xffff7abbd788  embedded object  (0x20d04241 <undefined>)
0xffff7abbd790  embedded object  (0x20d04241 <undefined>)
0xffff7abbd798  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7a0  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7a8  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7b0  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7b8  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7c0  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7c8  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7d0  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7d8  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7e0  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7e8  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7f0  embedded object  (0x20d04241 <undefined>)
0xffff7abbd7f8  embedded object  (0x20d04241 <undefined>)
0xffff7abbd800  embedded object  (0x20d04241 <undefined>)
0xffff7abbd808  embedded object  (0x20d04241 <undefined>)
0xffff7abbd810  embedded object  (0x20d04241 <undefined>)
0xffff7abbd818  embedded object  (0x20d04241 <undefined>)
0xffff7abbd820  embedded object  (0x20d04241 <undefined>)
0xffff7abbd828  embedded object  (0x20d04241 <undefined>)
0xffff7abbd830  embedded object  (0x20d04241 <undefined>)
0xffff7abbd838  embedded object  (0x20d04241 <undefined>)
0xffff7abbd840  embedded object  (0x20d04241 <undefined>)
0xffff7abbd84c  embedded object  (0x20d04241 <undefined>)
0xffff7abbd858  embedded object  (0x20d04241 <undefined>)
0xffff7abbd864  embedded object  (0x20d04241 <undefined>)
0xffff7abbd870  embedded object  (0x20d04241 <undefined>)
0xffff7abbd8a4  code target (STUB)  (0xffff7ab06820)
0xffff7abbd8c8  code target (STUB)  (0xffff7ab06260)
0xffff7abbd8d4  code target (STUB)  (0xffff7ab068e0)
0xffff7abbd8e8  constant pool (size 304)


kind = HANDLER
major_key = <NoCache>Stub
name = toUpperCase
compiler = unknown
Instructions (size = 152)
0xffff7abbf0a0     0  sub csp, jssp, #0x8 (8)
0xffff7abbf0a4     4  str x3, [jssp, #-8]!
0xffff7abbf0a8     8  sub csp, jssp, #0x8 (8)
0xffff7abbf0ac    12  str x0, [jssp, #-8]!
0xffff7abbf0b0    16  ldur x3, [cp, #39]
0xffff7abbf0b4    20  movz x16, #0x2e7
0xffff7abbf0b8    24  ldr x3, [x3, x16]
0xffff7abbf0bc    28  ldur x3, [x3, #23]
0xffff7abbf0c0    32  ldur x3, [x3, #23]
0xffff7abbf0c4    36  ldr x0, pc+84 (addr 0x0000ffff7abbf118)    ;; object: 0x20d63e59 Cell for 0
0xffff7abbf0c8    40  ldur x0, [x0, #7]
0xffff7abbf0cc    44  cmp x0, #0x0 (0)
0xffff7abbf0d0    48  b.ne #+0x1c (addr 0xffff7abbf0ec)
0xffff7abbf0d4    52  ldur x0, [x3, #-1]
0xffff7abbf0d8    56  ldr x4, pc+72 (addr 0x0000ffff7abbf120)    ;; object: 0x5d406e39 WeakCell for 0x4ec156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>
0xffff7abbf0dc    60  ldur x4, [x4, #7]
0xffff7abbf0e0    64  cmp x0, x4
0xffff7abbf0e4    68  b.ne #+0x8 (addr 0xffff7abbf0ec)
0xffff7abbf0e8    72  b #+0x14 (addr 0xffff7abbf0fc)
0xffff7abbf0ec    76  ldr x0, [jssp], #8
0xffff7abbf0f0    80  ldr x3, [jssp], #8
0xffff7abbf0f4    84  ldr x16, pc+52 (addr 0x0000ffff7abbf128)    ;; code: BUILTIN
0xffff7abbf0f8    88  br x16
0xffff7abbf0fc    92  add jssp, jssp, #0x10 (16)
0xffff7abbf100    96  mov x1, x3
0xffff7abbf104   100  ldr x16, pc+44 (addr 0x0000ffff7abbf130)    ;; code: HANDLER, LoadConstantStub, minor: 25
0xffff7abbf108   104  br x16
0xffff7abbf10c   108  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0xffff7abbf110   112  d63f03e0       constant
0xffff7abbf114   116  d503201f       constant
0xffff7abbf118   120  20d63e59       constant
0xffff7abbf11c   124  00000000       constant
0xffff7abbf120   128  5d406e39       constant
0xffff7abbf124   132  00000000       constant
0xffff7abbf128   136  7ab222e0       constant
0xffff7abbf12c   140  0000ffff       constant
0xffff7abbf130   144  7ab7b440       constant
0xffff7abbf134   148  0000ffff       constant


RelocInfo (size = 10)
0xffff7abbf0c4  embedded object  (0x20d63e59 Cell for 0)
0xffff7abbf0d8  embedded object  (0x5d406e39 WeakCell for 0x4ec156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>)
0xffff7abbf0f4  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abbf104  code target (HANDLER)  (0xffff7ab7b440)
0xffff7abbf10c  constant pool (size 44)

kind = HANDLER
major_key = <NoCache>Stub
name = RegExp
compiler = unknown
Instructions (size = 120)
0xffff7abbf1a0     0  sub csp, jssp, #0x8 (8)
0xffff7abbf1a4     4  str x3, [jssp, #-8]!
0xffff7abbf1a8     8  sub csp, jssp, #0x8 (8)
0xffff7abbf1ac    12  str x0, [jssp, #-8]!
0xffff7abbf1b0    16  ldr x0, pc+80 (addr 0x0000ffff7abbf200)    ;; object: 0x20dc5d51 Cell for 0
0xffff7abbf1b4    20  ldur x0, [x0, #7]
0xffff7abbf1b8    24  cmp x0, #0x0 (0)
0xffff7abbf1bc    28  b.ne #+0x2c (addr 0xffff7abbf1e8)
0xffff7abbf1c0    32  ldr x0, pc+72 (addr 0x0000ffff7abbf208)    ;; object: 0x5d420c49 WeakCell for 0x20d46281 PropertyCell for 0x20d46219 <JS Function RegExp (SharedFunctionInfo 0x20d46171)>
0xffff7abbf1c4    36  ldur x0, [x0, #7]
0xffff7abbf1c8    40  tbz w0, #0, #+0x20 (addr 0xffff7abbf1e8)
0xffff7abbf1cc    44  ldur x0, [x0, #15]
0xffff7abbf1d0    48  ldr x16, [x26, #88]
0xffff7abbf1d4    52  cmp x0, x16
0xffff7abbf1d8    56  b.eq #+0x10 (addr 0xffff7abbf1e8)
0xffff7abbf1dc    60  add jssp, jssp, #0x10 (16)
0xffff7abbf1e0    64  ret
0xffff7abbf1e4    68  b #+0x14 (addr 0xffff7abbf1f8)
0xffff7abbf1e8    72  ldr x0, [jssp], #8
0xffff7abbf1ec    76  ldr x3, [jssp], #8
0xffff7abbf1f0    80  ldr x16, pc+32 (addr 0x0000ffff7abbf210)    ;; code: BUILTIN
0xffff7abbf1f4    84  br x16
0xffff7abbf1f8    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7abbf1fc    92  d63f03e0       constant
0xffff7abbf200    96  20dc5d51       constant
0xffff7abbf204   100  00000000       constant
0xffff7abbf208   104  5d420c49       constant
0xffff7abbf20c   108  00000000       constant
0xffff7abbf210   112  7ab222e0       constant
0xffff7abbf214   116  0000ffff       constant


RelocInfo (size = 9)
0xffff7abbf1b0  embedded object  (0x20dc5d51 Cell for 0)
0xffff7abbf1c0  embedded object  (0x5d420c49 WeakCell for 0x20d46281 PropertyCell for 0x20d46219 <JS Function RegExp (SharedFunctionInfo 0x20d46171)>)
0xffff7abbf1f0  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abbf1f8  constant pool (size 32)

kind = HANDLER
major_key = <NoCache>Stub
name = test
compiler = unknown
Instructions (size = 120)
0xffff7abbf280     0  sub csp, jssp, #0x8 (8)
0xffff7abbf284     4  str x3, [jssp, #-8]!
0xffff7abbf288     8  sub csp, jssp, #0x8 (8)
0xffff7abbf28c    12  str x0, [jssp, #-8]!
0xffff7abbf290    16  ldr x0, pc+72 (addr 0x0000ffff7abbf2d8)    ;; object: 0x20ded491 Cell for 0
0xffff7abbf294    20  ldur x0, [x0, #7]
0xffff7abbf298    24  cmp x0, #0x0 (0)
0xffff7abbf29c    28  b.ne #+0x14 (addr 0xffff7abbf2b0)
0xffff7abbf2a0    32  ldr x3, pc+64 (addr 0x0000ffff7abbf2e0)    ;; object: 0x5d420c81 WeakCell for 0x2ae6ca81 <an Object with map 0x4ec164d1>
0xffff7abbf2a4    36  ldur x3, [x3, #7]
0xffff7abbf2a8    40  tbz w3, #0, #+0x8 (addr 0xffff7abbf2b0)
0xffff7abbf2ac    44  b #+0x14 (addr 0xffff7abbf2c0)
0xffff7abbf2b0    48  ldr x0, [jssp], #8
0xffff7abbf2b4    52  ldr x3, [jssp], #8
0xffff7abbf2b8    56  ldr x16, pc+48 (addr 0x0000ffff7abbf2e8)    ;; code: BUILTIN
0xffff7abbf2bc    60  br x16
0xffff7abbf2c0    64  add jssp, jssp, #0x10 (16)
0xffff7abbf2c4    68  mov x1, x3
0xffff7abbf2c8    72  ldr x16, pc+40 (addr 0x0000ffff7abbf2f0)    ;; code: HANDLER, LoadFieldStub, minor: 7
0xffff7abbf2cc    76  br x16
0xffff7abbf2d0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abbf2d4    84  d63f03e0       constant
0xffff7abbf2d8    88  20ded491       constant
0xffff7abbf2dc    92  00000000       constant
0xffff7abbf2e0    96  5d420c81       constant
0xffff7abbf2e4   100  00000000       constant
0xffff7abbf2e8   104  7ab222e0       constant
0xffff7abbf2ec   108  0000ffff       constant
0xffff7abbf2f0   112  7ab67340       constant
0xffff7abbf2f4   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abbf290  embedded object  (0x20ded491 Cell for 0)
0xffff7abbf2a0  embedded object  (0x5d420c81 WeakCell for 0x2ae6ca81 <an Object with map 0x4ec164d1>)
0xffff7abbf2b8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abbf2c8  code target (HANDLER)  (0xffff7ab67340)
0xffff7abbf2d0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = super_
compiler = unknown
Instructions (size = 168)
0xffff7abbff00     0  sub csp, jssp, #0x8 (8)
0xffff7abbff04     4  str x3, [jssp, #-8]!
0xffff7abbff08     8  sub csp, jssp, #0x8 (8)
0xffff7abbff0c    12  str x4, [jssp, #-8]!
0xffff7abbff10    16  ldr x3, pc+104 (addr 0x0000ffff7abbff78)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7abbff14    20  ldur x3, [x3, #7]
0xffff7abbff18    24  cmp x3, #0x0 (0)
0xffff7abbff1c    28  b.ne #+0x3c (addr 0xffff7abbff58)
0xffff7abbff20    32  ldr x5, pc+96 (addr 0x0000ffff7abbff80)    ;; object: 0x5d421e39 WeakCell for 0x4ec30469 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abbff24    36  ldur x5, [x5, #7]
0xffff7abbff28    40  tbz w5, #0, #+0x30 (addr 0xffff7abbff58)
0xffff7abbff2c    44  ldursw x4, [x5, #15]
0xffff7abbff30    48  tbnz w4, #23, #+0x28 (addr 0xffff7abbff58)
0xffff7abbff34    52  ldur x4, [x5, #47]
0xffff7abbff38    56  ldur x4, [x4, #143]
0xffff7abbff3c    60  cmp x0, x4
0xffff7abbff40    64  b.ne #+0x18 (addr 0xffff7abbff58)
0xffff7abbff44    68  ldr x4, [jssp], #8
0xffff7abbff48    72  ldr x3, [jssp], #8
0xffff7abbff4c    76  ldr x2, pc+60 (addr 0x0000ffff7abbff88)    ;; object: 0x20dc9f09 <String[6]: super_>
0xffff7abbff50    80  ldr x16, pc+64 (addr 0x0000ffff7abbff90)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0xffff7abbff54    84  br x16
0xffff7abbff58    88  ldr x2, pc+64 (addr 0x0000ffff7abbff98)    ;; object: 0x20dc9f09 <String[6]: super_>
0xffff7abbff5c    92  ldr x4, [jssp], #8
0xffff7abbff60    96  ldr x3, [jssp], #8
0xffff7abbff64   100  ldr x16, pc+60 (addr 0x0000ffff7abbffa0)    ;; code: BUILTIN
0xffff7abbff68   104  br x16
0xffff7abbff6c   108  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abbff70   112  d63f03e0       constant
0xffff7abbff74   116  d503201f       constant
0xffff7abbff78   120  20d5b0f1       constant
0xffff7abbff7c   124  00000000       constant
0xffff7abbff80   128  5d421e39       constant
0xffff7abbff84   132  00000000       constant
0xffff7abbff88   136  20dc9f09       constant
0xffff7abbff8c   140  00000000       constant
0xffff7abbff90   144  7ab3cea0       constant
0xffff7abbff94   148  0000ffff       constant
0xffff7abbff98   152  20dc9f09       constant
0xffff7abbff9c   156  00000000       constant
0xffff7abbffa0   160  7ab22420       constant
0xffff7abbffa4   164  0000ffff       constant


RelocInfo (size = 12)
0xffff7abbff10  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7abbff20  embedded object  (0x5d421e39 WeakCell for 0x4ec30469 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abbff4c  embedded object  (0x20dc9f09 <String[6]: super_>)
0xffff7abbff50  code target (HANDLER)  (0xffff7ab3cea0)
0xffff7abbff58  embedded object  (0x20dc9f09 <String[6]: super_>)
0xffff7abbff64  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abbff6c  constant pool (size 60)

--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 621)
0xffff7abc0020     0  movz x2, #0xe2c0
0xffff7abc0024     4  movk x2, #0x9ab, lsl #16
0xffff7abc0028     8  ldp x3, x0, [x2]
0xffff7abc002c    12  adds x16, x3, #0xe8 (232)
0xffff7abc0030    16  ccmp x16, x0, #nzCv, lo
0xffff7abc0034    20  b.hi #+0xf4 (addr 0xffff7abc0128)
0xffff7abc0038    24  str x16, [x2]
0xffff7abc003c    28  orr x3, x3, #0x1
0xffff7abc0040    32  ldr x0, pc+344 (addr 0x0000ffff7abc0198)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abc0044    36  stur x0, [x3, #-1]
0xffff7abc0048    40  movz x0, #0x1b00000000
0xffff7abc004c    44  stur x0, [x3, #7]
0xffff7abc0050    48  stur x1, [x3, #15]
0xffff7abc0054    52  stur cp, [x3, #23]
0xffff7abc0058    56  ldr x0, pc+328 (addr 0x0000ffff7abc01a0)    ;; object: 0x20d04519 <the hole>
0xffff7abc005c    60  stur x0, [x3, #31]
0xffff7abc0060    64  ldur x0, [cp, #39]
0xffff7abc0064    68  stur x0, [x3, #39]
0xffff7abc0068    72  ldr x0, pc+320 (addr 0x0000ffff7abc01a8)    ;; object: 0x20d04241 <undefined>
0xffff7abc006c    76  stur x0, [x3, #47]
0xffff7abc0070    80  ldr x0, pc+320 (addr 0x0000ffff7abc01b0)    ;; object: 0x20d04241 <undefined>
0xffff7abc0074    84  stur x0, [x3, #55]
0xffff7abc0078    88  ldr x0, pc+320 (addr 0x0000ffff7abc01b8)    ;; object: 0x20d04241 <undefined>
0xffff7abc007c    92  stur x0, [x3, #63]
0xffff7abc0080    96  ldr x0, pc+320 (addr 0x0000ffff7abc01c0)    ;; object: 0x20d04241 <undefined>
0xffff7abc0084   100  stur x0, [x3, #71]
0xffff7abc0088   104  ldr x0, pc+320 (addr 0x0000ffff7abc01c8)    ;; object: 0x20d04241 <undefined>
0xffff7abc008c   108  stur x0, [x3, #79]
0xffff7abc0090   112  ldr x0, pc+320 (addr 0x0000ffff7abc01d0)    ;; object: 0x20d04241 <undefined>
0xffff7abc0094   116  stur x0, [x3, #87]
0xffff7abc0098   120  ldr x0, pc+320 (addr 0x0000ffff7abc01d8)    ;; object: 0x20d04241 <undefined>
0xffff7abc009c   124  stur x0, [x3, #95]
0xffff7abc00a0   128  ldr x0, pc+320 (addr 0x0000ffff7abc01e0)    ;; object: 0x20d04241 <undefined>
0xffff7abc00a4   132  stur x0, [x3, #103]
0xffff7abc00a8   136  ldr x0, pc+320 (addr 0x0000ffff7abc01e8)    ;; object: 0x20d04241 <undefined>
0xffff7abc00ac   140  stur x0, [x3, #111]
0xffff7abc00b0   144  ldr x0, pc+320 (addr 0x0000ffff7abc01f0)    ;; object: 0x20d04241 <undefined>
0xffff7abc00b4   148  stur x0, [x3, #119]
0xffff7abc00b8   152  ldr x0, pc+320 (addr 0x0000ffff7abc01f8)    ;; object: 0x20d04241 <undefined>
0xffff7abc00bc   156  stur x0, [x3, #127]
0xffff7abc00c0   160  ldr x0, pc+320 (addr 0x0000ffff7abc0200)    ;; object: 0x20d04241 <undefined>
0xffff7abc00c4   164  stur x0, [x3, #135]
0xffff7abc00c8   168  ldr x0, pc+320 (addr 0x0000ffff7abc0208)    ;; object: 0x20d04241 <undefined>
0xffff7abc00cc   172  stur x0, [x3, #143]
0xffff7abc00d0   176  ldr x0, pc+320 (addr 0x0000ffff7abc0210)    ;; object: 0x20d04241 <undefined>
0xffff7abc00d4   180  stur x0, [x3, #151]
0xffff7abc00d8   184  ldr x0, pc+320 (addr 0x0000ffff7abc0218)    ;; object: 0x20d04241 <undefined>
0xffff7abc00dc   188  stur x0, [x3, #159]
0xffff7abc00e0   192  ldr x0, pc+320 (addr 0x0000ffff7abc0220)    ;; object: 0x20d04241 <undefined>
0xffff7abc00e4   196  stur x0, [x3, #167]
0xffff7abc00e8   200  ldr x0, pc+320 (addr 0x0000ffff7abc0228)    ;; object: 0x20d04241 <undefined>
0xffff7abc00ec   204  stur x0, [x3, #175]
0xffff7abc00f0   208  ldr x0, pc+320 (addr 0x0000ffff7abc0230)    ;; object: 0x20d04241 <undefined>
0xffff7abc00f4   212  stur x0, [x3, #183]
0xffff7abc00f8   216  ldr x0, pc+320 (addr 0x0000ffff7abc0238)    ;; object: 0x20d04241 <undefined>
0xffff7abc00fc   220  stur x0, [x3, #191]
0xffff7abc0100   224  ldr x0, pc+320 (addr 0x0000ffff7abc0240)    ;; object: 0x20d04241 <undefined>
0xffff7abc0104   228  stur x0, [x3, #199]
0xffff7abc0108   232  ldr x0, pc+320 (addr 0x0000ffff7abc0248)    ;; object: 0x20d04241 <undefined>
0xffff7abc010c   236  stur x0, [x3, #207]
0xffff7abc0110   240  ldr x0, pc+320 (addr 0x0000ffff7abc0250)    ;; object: 0x20d04241 <undefined>
0xffff7abc0114   244  stur x0, [x3, #215]
0xffff7abc0118   248  ldr x0, pc+320 (addr 0x0000ffff7abc0258)    ;; object: 0x20d04241 <undefined>
0xffff7abc011c   252  stur x0, [x3, #223]
0xffff7abc0120   256  mov x0, x3
0xffff7abc0124   260  ret
0xffff7abc0128   264  sub csp, jssp, #0x10 (16)
0xffff7abc012c   268  stp fp, lr, [jssp, #-16]!
0xffff7abc0130   272  movz fp, #0xa00000000
0xffff7abc0134   276  sub csp, jssp, #0x8 (8)
0xffff7abc0138   280  str fp, [jssp, #-8]!
0xffff7abc013c   284  add fp, jssp, #0x8 (8)
0xffff7abc0140   288  movz x3, #0x0
0xffff7abc0144   292  mov x16, lr
0xffff7abc0148   296  ldr x17, pc+280 (addr 0x0000ffff7abc0260)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abc014c   300  blr x17
0xffff7abc0150   304  movz x0, #0xe800000000
0xffff7abc0154   308  movz x10, #0x0
0xffff7abc0158   312  sub csp, jssp, #0x10 (16)
0xffff7abc015c   316  stp x10, x0, [jssp, #-16]!
0xffff7abc0160   320  movz x0, #0x2
0xffff7abc0164   324  movz x1, #0x5b88
0xffff7abc0168   328  movk x1, #0xe2, lsl #16
0xffff7abc016c   332  ldr x16, pc+252 (addr 0x0000ffff7abc0268)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abc0170   336  blr x16
0xffff7abc0174   340  str x0, [jssp, #24]
0xffff7abc0178   344  ldr x16, pc+248 (addr 0x0000ffff7abc0270)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abc017c   348  blr x16
0xffff7abc0180   352  ldr lr, [jssp, #16]
0xffff7abc0184   356  ldp xzr, fp, [jssp], #24
0xffff7abc0188   360  b #-0x148 (addr 0xffff7abc0040)
0xffff7abc018c   364  5800075f       constant pool begin (num_const = 58)    ;; constant pool
0xffff7abc0190   368  d63f03e0       constant
0xffff7abc0194   372  d503201f       constant
0xffff7abc0198   376  4ec06149       constant
0xffff7abc019c   380  00000000       constant
0xffff7abc01a0   384  20d04519       constant
0xffff7abc01a4   388  00000000       constant
0xffff7abc01a8   392  20d04241       constant
0xffff7abc01ac   396  00000000       constant
0xffff7abc01b0   400  20d04241       constant
0xffff7abc01b4   404  00000000       constant
0xffff7abc01b8   408  20d04241       constant
0xffff7abc01bc   412  00000000       constant
0xffff7abc01c0   416  20d04241       constant
0xffff7abc01c4   420  00000000       constant
0xffff7abc01c8   424  20d04241       constant
0xffff7abc01cc   428  00000000       constant
0xffff7abc01d0   432  20d04241       constant
0xffff7abc01d4   436  00000000       constant
0xffff7abc01d8   440  20d04241       constant
0xffff7abc01dc   444  00000000       constant
0xffff7abc01e0   448  20d04241       constant
0xffff7abc01e4   452  00000000       constant
0xffff7abc01e8   456  20d04241       constant
0xffff7abc01ec   460  00000000       constant
0xffff7abc01f0   464  20d04241       constant
0xffff7abc01f4   468  00000000       constant
0xffff7abc01f8   472  20d04241       constant
0xffff7abc01fc   476  00000000       constant
0xffff7abc0200   480  20d04241       constant
0xffff7abc0204   484  00000000       constant
0xffff7abc0208   488  20d04241       constant
0xffff7abc020c   492  00000000       constant
0xffff7abc0210   496  20d04241       constant
0xffff7abc0214   500  00000000       constant
0xffff7abc0218   504  20d04241       constant
0xffff7abc021c   508  00000000       constant
0xffff7abc0220   512  20d04241       constant
0xffff7abc0224   516  00000000       constant
0xffff7abc0228   520  20d04241       constant
0xffff7abc022c   524  00000000       constant
0xffff7abc0230   528  20d04241       constant
0xffff7abc0234   532  00000000       constant
0xffff7abc0238   536  20d04241       constant
0xffff7abc023c   540  00000000       constant
0xffff7abc0240   544  20d04241       constant
0xffff7abc0244   548  00000000       constant
0xffff7abc0248   552  20d04241       constant
0xffff7abc024c   556  00000000       constant
0xffff7abc0250   560  20d04241       constant
0xffff7abc0254   564  00000000       constant
0xffff7abc0258   568  20d04241       constant
0xffff7abc025c   572  00000000       constant
0xffff7abc0260   576  7ab06820       constant
0xffff7abc0264   580  0000ffff       constant
0xffff7abc0268   584  7ab06260       constant
0xffff7abc026c   588  0000ffff       constant
0xffff7abc0270   592  7ab068e0       constant
0xffff7abc0274   596  0000ffff       constant


Safepoints (size = 21)
0xffff7abc0174   340  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0xffff7abc0040  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abc0058  embedded object  (0x20d04519 <the hole>)
0xffff7abc0068  embedded object  (0x20d04241 <undefined>)
0xffff7abc0070  embedded object  (0x20d04241 <undefined>)
0xffff7abc0078  embedded object  (0x20d04241 <undefined>)
0xffff7abc0080  embedded object  (0x20d04241 <undefined>)
0xffff7abc0088  embedded object  (0x20d04241 <undefined>)
0xffff7abc0090  embedded object  (0x20d04241 <undefined>)
0xffff7abc0098  embedded object  (0x20d04241 <undefined>)
0xffff7abc00a0  embedded object  (0x20d04241 <undefined>)
0xffff7abc00a8  embedded object  (0x20d04241 <undefined>)
0xffff7abc00b0  embedded object  (0x20d04241 <undefined>)
0xffff7abc00b8  embedded object  (0x20d04241 <undefined>)
0xffff7abc00c0  embedded object  (0x20d04241 <undefined>)
0xffff7abc00c8  embedded object  (0x20d04241 <undefined>)
0xffff7abc00d0  embedded object  (0x20d04241 <undefined>)
0xffff7abc00d8  embedded object  (0x20d04241 <undefined>)
0xffff7abc00e0  embedded object  (0x20d04241 <undefined>)
0xffff7abc00e8  embedded object  (0x20d04241 <undefined>)
0xffff7abc00f0  embedded object  (0x20d04241 <undefined>)
0xffff7abc00f8  embedded object  (0x20d04241 <undefined>)
0xffff7abc0100  embedded object  (0x20d04241 <undefined>)
0xffff7abc0108  embedded object  (0x20d04241 <undefined>)
0xffff7abc0110  embedded object  (0x20d04241 <undefined>)
0xffff7abc0118  embedded object  (0x20d04241 <undefined>)
0xffff7abc0148  code target (STUB)  (0xffff7ab06820)
0xffff7abc016c  code target (STUB)  (0xffff7ab06260)
0xffff7abc0178  code target (STUB)  (0xffff7ab068e0)
0xffff7abc018c  constant pool (size 236)

--- End code ---
kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 621)
0xffff7abc0020     0  movz x2, #0xe2c0
0xffff7abc0024     4  movk x2, #0x9ab, lsl #16
0xffff7abc0028     8  ldp x3, x0, [x2]
0xffff7abc002c    12  adds x16, x3, #0xe8 (232)
0xffff7abc0030    16  ccmp x16, x0, #nzCv, lo
0xffff7abc0034    20  b.hi #+0xf4 (addr 0xffff7abc0128)
0xffff7abc0038    24  str x16, [x2]
0xffff7abc003c    28  orr x3, x3, #0x1
0xffff7abc0040    32  ldr x0, pc+344 (addr 0x0000ffff7abc0198)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abc0044    36  stur x0, [x3, #-1]
0xffff7abc0048    40  movz x0, #0x1b00000000
0xffff7abc004c    44  stur x0, [x3, #7]
0xffff7abc0050    48  stur x1, [x3, #15]
0xffff7abc0054    52  stur cp, [x3, #23]
0xffff7abc0058    56  ldr x0, pc+328 (addr 0x0000ffff7abc01a0)    ;; object: 0x20d04519 <the hole>
0xffff7abc005c    60  stur x0, [x3, #31]
0xffff7abc0060    64  ldur x0, [cp, #39]
0xffff7abc0064    68  stur x0, [x3, #39]
0xffff7abc0068    72  ldr x0, pc+320 (addr 0x0000ffff7abc01a8)    ;; object: 0x20d04241 <undefined>
0xffff7abc006c    76  stur x0, [x3, #47]
0xffff7abc0070    80  ldr x0, pc+320 (addr 0x0000ffff7abc01b0)    ;; object: 0x20d04241 <undefined>
0xffff7abc0074    84  stur x0, [x3, #55]
0xffff7abc0078    88  ldr x0, pc+320 (addr 0x0000ffff7abc01b8)    ;; object: 0x20d04241 <undefined>
0xffff7abc007c    92  stur x0, [x3, #63]
0xffff7abc0080    96  ldr x0, pc+320 (addr 0x0000ffff7abc01c0)    ;; object: 0x20d04241 <undefined>
0xffff7abc0084   100  stur x0, [x3, #71]
0xffff7abc0088   104  ldr x0, pc+320 (addr 0x0000ffff7abc01c8)    ;; object: 0x20d04241 <undefined>
0xffff7abc008c   108  stur x0, [x3, #79]
0xffff7abc0090   112  ldr x0, pc+320 (addr 0x0000ffff7abc01d0)    ;; object: 0x20d04241 <undefined>
0xffff7abc0094   116  stur x0, [x3, #87]
0xffff7abc0098   120  ldr x0, pc+320 (addr 0x0000ffff7abc01d8)    ;; object: 0x20d04241 <undefined>
0xffff7abc009c   124  stur x0, [x3, #95]
0xffff7abc00a0   128  ldr x0, pc+320 (addr 0x0000ffff7abc01e0)    ;; object: 0x20d04241 <undefined>
0xffff7abc00a4   132  stur x0, [x3, #103]
0xffff7abc00a8   136  ldr x0, pc+320 (addr 0x0000ffff7abc01e8)    ;; object: 0x20d04241 <undefined>
0xffff7abc00ac   140  stur x0, [x3, #111]
0xffff7abc00b0   144  ldr x0, pc+320 (addr 0x0000ffff7abc01f0)    ;; object: 0x20d04241 <undefined>
0xffff7abc00b4   148  stur x0, [x3, #119]
0xffff7abc00b8   152  ldr x0, pc+320 (addr 0x0000ffff7abc01f8)    ;; object: 0x20d04241 <undefined>
0xffff7abc00bc   156  stur x0, [x3, #127]
0xffff7abc00c0   160  ldr x0, pc+320 (addr 0x0000ffff7abc0200)    ;; object: 0x20d04241 <undefined>
0xffff7abc00c4   164  stur x0, [x3, #135]
0xffff7abc00c8   168  ldr x0, pc+320 (addr 0x0000ffff7abc0208)    ;; object: 0x20d04241 <undefined>
0xffff7abc00cc   172  stur x0, [x3, #143]
0xffff7abc00d0   176  ldr x0, pc+320 (addr 0x0000ffff7abc0210)    ;; object: 0x20d04241 <undefined>
0xffff7abc00d4   180  stur x0, [x3, #151]
0xffff7abc00d8   184  ldr x0, pc+320 (addr 0x0000ffff7abc0218)    ;; object: 0x20d04241 <undefined>
0xffff7abc00dc   188  stur x0, [x3, #159]
0xffff7abc00e0   192  ldr x0, pc+320 (addr 0x0000ffff7abc0220)    ;; object: 0x20d04241 <undefined>
0xffff7abc00e4   196  stur x0, [x3, #167]
0xffff7abc00e8   200  ldr x0, pc+320 (addr 0x0000ffff7abc0228)    ;; object: 0x20d04241 <undefined>
0xffff7abc00ec   204  stur x0, [x3, #175]
0xffff7abc00f0   208  ldr x0, pc+320 (addr 0x0000ffff7abc0230)    ;; object: 0x20d04241 <undefined>
0xffff7abc00f4   212  stur x0, [x3, #183]
0xffff7abc00f8   216  ldr x0, pc+320 (addr 0x0000ffff7abc0238)    ;; object: 0x20d04241 <undefined>
0xffff7abc00fc   220  stur x0, [x3, #191]
0xffff7abc0100   224  ldr x0, pc+320 (addr 0x0000ffff7abc0240)    ;; object: 0x20d04241 <undefined>
0xffff7abc0104   228  stur x0, [x3, #199]
0xffff7abc0108   232  ldr x0, pc+320 (addr 0x0000ffff7abc0248)    ;; object: 0x20d04241 <undefined>
0xffff7abc010c   236  stur x0, [x3, #207]
0xffff7abc0110   240  ldr x0, pc+320 (addr 0x0000ffff7abc0250)    ;; object: 0x20d04241 <undefined>
0xffff7abc0114   244  stur x0, [x3, #215]
0xffff7abc0118   248  ldr x0, pc+320 (addr 0x0000ffff7abc0258)    ;; object: 0x20d04241 <undefined>
0xffff7abc011c   252  stur x0, [x3, #223]
0xffff7abc0120   256  mov x0, x3
0xffff7abc0124   260  ret
0xffff7abc0128   264  sub csp, jssp, #0x10 (16)
0xffff7abc012c   268  stp fp, lr, [jssp, #-16]!
0xffff7abc0130   272  movz fp, #0xa00000000
0xffff7abc0134   276  sub csp, jssp, #0x8 (8)
0xffff7abc0138   280  str fp, [jssp, #-8]!
0xffff7abc013c   284  add fp, jssp, #0x8 (8)
0xffff7abc0140   288  movz x3, #0x0
0xffff7abc0144   292  mov x16, lr
0xffff7abc0148   296  ldr x17, pc+280 (addr 0x0000ffff7abc0260)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abc014c   300  blr x17
0xffff7abc0150   304  movz x0, #0xe800000000
0xffff7abc0154   308  movz x10, #0x0
0xffff7abc0158   312  sub csp, jssp, #0x10 (16)
0xffff7abc015c   316  stp x10, x0, [jssp, #-16]!
0xffff7abc0160   320  movz x0, #0x2
0xffff7abc0164   324  movz x1, #0x5b88
0xffff7abc0168   328  movk x1, #0xe2, lsl #16
0xffff7abc016c   332  ldr x16, pc+252 (addr 0x0000ffff7abc0268)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abc0170   336  blr x16
0xffff7abc0174   340  str x0, [jssp, #24]
0xffff7abc0178   344  ldr x16, pc+248 (addr 0x0000ffff7abc0270)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abc017c   348  blr x16
0xffff7abc0180   352  ldr lr, [jssp, #16]
0xffff7abc0184   356  ldp xzr, fp, [jssp], #24
0xffff7abc0188   360  b #-0x148 (addr 0xffff7abc0040)
0xffff7abc018c   364  5800075f       constant pool begin (num_const = 58)    ;; constant pool
0xffff7abc0190   368  d63f03e0       constant
0xffff7abc0194   372  d503201f       constant
0xffff7abc0198   376  4ec06149       constant
0xffff7abc019c   380  00000000       constant
0xffff7abc01a0   384  20d04519       constant
0xffff7abc01a4   388  00000000       constant
0xffff7abc01a8   392  20d04241       constant
0xffff7abc01ac   396  00000000       constant
0xffff7abc01b0   400  20d04241       constant
0xffff7abc01b4   404  00000000       constant
0xffff7abc01b8   408  20d04241       constant
0xffff7abc01bc   412  00000000       constant
0xffff7abc01c0   416  20d04241       constant
0xffff7abc01c4   420  00000000       constant
0xffff7abc01c8   424  20d04241       constant
0xffff7abc01cc   428  00000000       constant
0xffff7abc01d0   432  20d04241       constant
0xffff7abc01d4   436  00000000       constant
0xffff7abc01d8   440  20d04241       constant
0xffff7abc01dc   444  00000000       constant
0xffff7abc01e0   448  20d04241       constant
0xffff7abc01e4   452  00000000       constant
0xffff7abc01e8   456  20d04241       constant
0xffff7abc01ec   460  00000000       constant
0xffff7abc01f0   464  20d04241       constant
0xffff7abc01f4   468  00000000       constant
0xffff7abc01f8   472  20d04241       constant
0xffff7abc01fc   476  00000000       constant
0xffff7abc0200   480  20d04241       constant
0xffff7abc0204   484  00000000       constant
0xffff7abc0208   488  20d04241       constant
0xffff7abc020c   492  00000000       constant
0xffff7abc0210   496  20d04241       constant
0xffff7abc0214   500  00000000       constant
0xffff7abc0218   504  20d04241       constant
0xffff7abc021c   508  00000000       constant
0xffff7abc0220   512  20d04241       constant
0xffff7abc0224   516  00000000       constant
0xffff7abc0228   520  20d04241       constant
0xffff7abc022c   524  00000000       constant
0xffff7abc0230   528  20d04241       constant
0xffff7abc0234   532  00000000       constant
0xffff7abc0238   536  20d04241       constant
0xffff7abc023c   540  00000000       constant
0xffff7abc0240   544  20d04241       constant
0xffff7abc0244   548  00000000       constant
0xffff7abc0248   552  20d04241       constant
0xffff7abc024c   556  00000000       constant
0xffff7abc0250   560  20d04241       constant
0xffff7abc0254   564  00000000       constant
0xffff7abc0258   568  20d04241       constant
0xffff7abc025c   572  00000000       constant
0xffff7abc0260   576  7ab06820       constant
0xffff7abc0264   580  0000ffff       constant
0xffff7abc0268   584  7ab06260       constant
0xffff7abc026c   588  0000ffff       constant
0xffff7abc0270   592  7ab068e0       constant
0xffff7abc0274   596  0000ffff       constant


Safepoints (size = 21)
0xffff7abc0174   340  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0xffff7abc0040  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abc0058  embedded object  (0x20d04519 <the hole>)
0xffff7abc0068  embedded object  (0x20d04241 <undefined>)
0xffff7abc0070  embedded object  (0x20d04241 <undefined>)
0xffff7abc0078  embedded object  (0x20d04241 <undefined>)
0xffff7abc0080  embedded object  (0x20d04241 <undefined>)
0xffff7abc0088  embedded object  (0x20d04241 <undefined>)
0xffff7abc0090  embedded object  (0x20d04241 <undefined>)
0xffff7abc0098  embedded object  (0x20d04241 <undefined>)
0xffff7abc00a0  embedded object  (0x20d04241 <undefined>)
0xffff7abc00a8  embedded object  (0x20d04241 <undefined>)
0xffff7abc00b0  embedded object  (0x20d04241 <undefined>)
0xffff7abc00b8  embedded object  (0x20d04241 <undefined>)
0xffff7abc00c0  embedded object  (0x20d04241 <undefined>)
0xffff7abc00c8  embedded object  (0x20d04241 <undefined>)
0xffff7abc00d0  embedded object  (0x20d04241 <undefined>)
0xffff7abc00d8  embedded object  (0x20d04241 <undefined>)
0xffff7abc00e0  embedded object  (0x20d04241 <undefined>)
0xffff7abc00e8  embedded object  (0x20d04241 <undefined>)
0xffff7abc00f0  embedded object  (0x20d04241 <undefined>)
0xffff7abc00f8  embedded object  (0x20d04241 <undefined>)
0xffff7abc0100  embedded object  (0x20d04241 <undefined>)
0xffff7abc0108  embedded object  (0x20d04241 <undefined>)
0xffff7abc0110  embedded object  (0x20d04241 <undefined>)
0xffff7abc0118  embedded object  (0x20d04241 <undefined>)
0xffff7abc0148  code target (STUB)  (0xffff7ab06820)
0xffff7abc016c  code target (STUB)  (0xffff7ab06260)
0xffff7abc0178  code target (STUB)  (0xffff7ab068e0)
0xffff7abc018c  constant pool (size 236)


kind = LOAD_IC
major_key = LoadICTrampolineStub
ic_state = GENERIC
extra_ic_state = 0
name = LoadICTrampolineStub
compiler = unknown
Instructions (size = 440)
0xffff7abc0300     0  ldur x3, [fp, #-16]
0xffff7abc0304     4  ldur x3, [x3, #31]
0xffff7abc0308     8  ldur x3, [x3, #87]
0xffff7abc030c    12  add x4, x3, x0, asr #29
0xffff7abc0310    16  ldur x4, [x4, #15]
0xffff7abc0314    20  tbz w1, #0, #+0x170 (addr 0xffff7abc0484)
0xffff7abc0318    24  ldur x5, [x1, #-1]
0xffff7abc031c    28  ldur x6, [x4, #7]
0xffff7abc0320    32  cmp x6, x5
0xffff7abc0324    36  b.ne #+0x14 (addr 0xffff7abc0338)
0xffff7abc0328    40  add x4, x3, x0, asr #29
0xffff7abc032c    44  ldur x4, [x4, #23]
0xffff7abc0330    48  add x4, x4, #0x5f (95)
0xffff7abc0334    52  br x4
0xffff7abc0338    56  ldur x6, [x4, #-1]
0xffff7abc033c    60  ldr x16, [x26, #224]
0xffff7abc0340    64  cmp x6, x16
0xffff7abc0344    68  b.ne #+0x5c (addr 0xffff7abc03a0)
0xffff7abc0348    72  ldur x6, [x4, #15]
0xffff7abc034c    76  ldur x6, [x6, #7]
0xffff7abc0350    80  cmp x5, x6
0xffff7abc0354    84  b.ne #+0x10 (addr 0xffff7abc0364)
0xffff7abc0358    88  ldur x4, [x4, #23]
0xffff7abc035c    92  add x4, x4, #0x5f (95)
0xffff7abc0360    96  br x4
0xffff7abc0364   100  ldur x7, [x4, #7]
0xffff7abc0368   104  add x7, x4, x7, asr #29
0xffff7abc036c   108  add x7, x7, #0xf (15)
0xffff7abc0370   112  add x4, x4, #0x1f (31)
0xffff7abc0374   116  ldr x6, [x4]
0xffff7abc0378   120  ldur x6, [x6, #7]
0xffff7abc037c   124  cmp x5, x6
0xffff7abc0380   128  b.ne #+0x10 (addr 0xffff7abc0390)
0xffff7abc0384   132  ldr x4, [x4, #8]
0xffff7abc0388   136  add x4, x4, #0x5f (95)
0xffff7abc038c   140  br x4
0xffff7abc0390   144  add x4, x4, #0x10 (16)
0xffff7abc0394   148  cmp x4, x7
0xffff7abc0398   152  b.lt #-0x24 (addr 0xffff7abc0374)
0xffff7abc039c   156  b #+0xcc (addr 0xffff7abc0468)
0xffff7abc03a0   160  ldr x16, [x26, #2400]
0xffff7abc03a4   164  cmp x4, x16
0xffff7abc03a8   168  b.ne #+0xc0 (addr 0xffff7abc0468)
0xffff7abc03ac   172  tbz w1, #0, #+0xbc (addr 0xffff7abc0468)
0xffff7abc03b0   176  ldur x4, [x2, #7]
0xffff7abc03b4   180  ldur x5, [x1, #-1]
0xffff7abc03b8   184  add x4, x4, x5
0xffff7abc03bc   188  movz x16, #0x5102
0xffff7abc03c0   192  eor x4, x4, x16
0xffff7abc03c4   196  ubfx x4, x4, #2, #11
0xffff7abc03c8   200  add x7, x4, x4, lsl #1
0xffff7abc03cc   204  ldr x5, pc+204 (addr 0x0000ffff7abc0498)    ;; external reference (StubCache::primary_->key)
0xffff7abc03d0   208  add x5, x5, x7, lsl #3
0xffff7abc03d4   212  ldr x6, [x5]
0xffff7abc03d8   216  cmp x2, x6
0xffff7abc03dc   220  b.ne #+0x34 (addr 0xffff7abc0410)
0xffff7abc03e0   224  ldr x6, [x5, #16]
0xffff7abc03e4   228  ldur x7, [x1, #-1]
0xffff7abc03e8   232  cmp x6, x7
0xffff7abc03ec   236  b.ne #+0x24 (addr 0xffff7abc0410)
0xffff7abc03f0   240  ldr x5, [x5, #8]
0xffff7abc03f4   244  ldur w6, [x5, #63]
0xffff7abc03f8   248  and w6, w6, #0xffffffc7
0xffff7abc03fc   252  movz w16, #0x5102
0xffff7abc0400   256  cmp w6, w16
0xffff7abc0404   260  b.ne #+0xc (addr 0xffff7abc0410)
0xffff7abc0408   264  add x5, x5, #0x5f (95)
0xffff7abc040c   268  br x5
0xffff7abc0410   272  sub x4, x4, x2, lsr #2
0xffff7abc0414   276  movz x16, #0x1440
0xffff7abc0418   280  add x4, x4, x16
0xffff7abc041c   284  and x4, x4, #0x1ff
0xffff7abc0420   288  add x7, x4, x4, lsl #1
0xffff7abc0424   292  ldr x5, pc+124 (addr 0x0000ffff7abc04a0)    ;; external reference (StubCache::secondary_->key)
0xffff7abc0428   296  add x5, x5, x7, lsl #3
0xffff7abc042c   300  ldr x6, [x5]
0xffff7abc0430   304  cmp x2, x6
0xffff7abc0434   308  b.ne #+0x34 (addr 0xffff7abc0468)
0xffff7abc0438   312  ldr x6, [x5, #16]
0xffff7abc043c   316  ldur x7, [x1, #-1]
0xffff7abc0440   320  cmp x6, x7
0xffff7abc0444   324  b.ne #+0x24 (addr 0xffff7abc0468)
0xffff7abc0448   328  ldr x5, [x5, #8]
0xffff7abc044c   332  ldur w6, [x5, #63]
0xffff7abc0450   336  and w6, w6, #0xffffffc7
0xffff7abc0454   340  movz w16, #0x5102
0xffff7abc0458   344  cmp w6, w16
0xffff7abc045c   348  b.ne #+0xc (addr 0xffff7abc0468)
0xffff7abc0460   352  add x5, x5, #0x5f (95)
0xffff7abc0464   356  br x5
0xffff7abc0468   360  sub csp, jssp, #0x20 (32)
0xffff7abc046c   364  stp x3, x0, [jssp, #-32]!
0xffff7abc0470   368  stp x2, x1, [jssp, #16]
0xffff7abc0474   372  movz x0, #0x4
0xffff7abc0478   376  ldr x1, pc+48 (addr 0x0000ffff7abc04a8)    ;; external reference (Runtime::LoadIC_Miss)
0xffff7abc047c   380  ldr x16, pc+52 (addr 0x0000ffff7abc04b0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abc0480   384  br x16
0xffff7abc0484   388  ldr x5, [x26, #120]
0xffff7abc0488   392  b #-0x16c (addr 0xffff7abc031c)
0xffff7abc048c   396  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0xffff7abc0490   400  d63f03e0       constant
0xffff7abc0494   404  d503201f       constant
0xffff7abc0498   408  09ad8950       constant
0xffff7abc049c   412  00000000       constant
0xffff7abc04a0   416  09ae4950       constant
0xffff7abc04a4   420  00000000       constant
0xffff7abc04a8   424  00c86e20       constant
0xffff7abc04ac   428  00000000       constant
0xffff7abc04b0   432  7ab06060       constant
0xffff7abc04b4   436  0000ffff       constant


RelocInfo (size = 19)
0xffff7abc03cc  external reference (StubCache::primary_->key)  (0x9ad8950)
0xffff7abc0424  external reference (StubCache::secondary_->key)  (0x9ae4950)
0xffff7abc0478  external reference (Runtime::LoadIC_Miss)  (0xc86e20)
0xffff7abc047c  code target (STUB)  (0xffff7ab06060)
0xffff7abc048c  constant pool (size 44)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0xffff7abc1ac0     0  ldur x0, [x1, #55]
0xffff7abc1ac4     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0xffff7abc1ac0     0  ldur x0, [x1, #55]
0xffff7abc1ac4     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = super_
compiler = unknown
Instructions (size = 168)
0xffff7abc1b40     0  sub csp, jssp, #0x8 (8)
0xffff7abc1b44     4  str x3, [jssp, #-8]!
0xffff7abc1b48     8  sub csp, jssp, #0x8 (8)
0xffff7abc1b4c    12  str x4, [jssp, #-8]!
0xffff7abc1b50    16  ldr x3, pc+104 (addr 0x0000ffff7abc1bb8)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7abc1b54    20  ldur x3, [x3, #7]
0xffff7abc1b58    24  cmp x3, #0x0 (0)
0xffff7abc1b5c    28  b.ne #+0x3c (addr 0xffff7abc1b98)
0xffff7abc1b60    32  ldr x5, pc+96 (addr 0x0000ffff7abc1bc0)    ;; object: 0x5d425349 WeakCell for 0x4ec30af1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abc1b64    36  ldur x5, [x5, #7]
0xffff7abc1b68    40  tbz w5, #0, #+0x30 (addr 0xffff7abc1b98)
0xffff7abc1b6c    44  ldursw x4, [x5, #15]
0xffff7abc1b70    48  tbnz w4, #23, #+0x28 (addr 0xffff7abc1b98)
0xffff7abc1b74    52  ldur x4, [x5, #47]
0xffff7abc1b78    56  ldur x4, [x4, #143]
0xffff7abc1b7c    60  cmp x0, x4
0xffff7abc1b80    64  b.ne #+0x18 (addr 0xffff7abc1b98)
0xffff7abc1b84    68  ldr x4, [jssp], #8
0xffff7abc1b88    72  ldr x3, [jssp], #8
0xffff7abc1b8c    76  ldr x2, pc+60 (addr 0x0000ffff7abc1bc8)    ;; object: 0x20dc9f09 <String[6]: super_>
0xffff7abc1b90    80  ldr x16, pc+64 (addr 0x0000ffff7abc1bd0)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0xffff7abc1b94    84  br x16
0xffff7abc1b98    88  ldr x2, pc+64 (addr 0x0000ffff7abc1bd8)    ;; object: 0x20dc9f09 <String[6]: super_>
0xffff7abc1b9c    92  ldr x4, [jssp], #8
0xffff7abc1ba0    96  ldr x3, [jssp], #8
0xffff7abc1ba4   100  ldr x16, pc+60 (addr 0x0000ffff7abc1be0)    ;; code: BUILTIN
0xffff7abc1ba8   104  br x16
0xffff7abc1bac   108  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abc1bb0   112  d63f03e0       constant
0xffff7abc1bb4   116  d503201f       constant
0xffff7abc1bb8   120  20d5b0f1       constant
0xffff7abc1bbc   124  00000000       constant
0xffff7abc1bc0   128  5d425349       constant
0xffff7abc1bc4   132  00000000       constant
0xffff7abc1bc8   136  20dc9f09       constant
0xffff7abc1bcc   140  00000000       constant
0xffff7abc1bd0   144  7ab3cea0       constant
0xffff7abc1bd4   148  0000ffff       constant
0xffff7abc1bd8   152  20dc9f09       constant
0xffff7abc1bdc   156  00000000       constant
0xffff7abc1be0   160  7ab22420       constant
0xffff7abc1be4   164  0000ffff       constant


RelocInfo (size = 12)
0xffff7abc1b50  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7abc1b60  embedded object  (0x5d425349 WeakCell for 0x4ec30af1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abc1b8c  embedded object  (0x20dc9f09 <String[6]: super_>)
0xffff7abc1b90  code target (HANDLER)  (0xffff7ab3cea0)
0xffff7abc1b98  embedded object  (0x20dc9f09 <String[6]: super_>)
0xffff7abc1ba4  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abc1bac  constant pool (size 60)

kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0xffff7abc1d00     0  sub csp, jssp, #0x8 (8)
0xffff7abc1d04     4  str x3, [jssp, #-8]!
0xffff7abc1d08     8  sub csp, jssp, #0x8 (8)
0xffff7abc1d0c    12  str x4, [jssp, #-8]!
0xffff7abc1d10    16  ldr x3, pc+104 (addr 0x0000ffff7abc1d78)    ;; object: 0x5d4255d9 Cell for 0
0xffff7abc1d14    20  ldur x3, [x3, #7]
0xffff7abc1d18    24  cmp x3, #0x0 (0)
0xffff7abc1d1c    28  b.ne #+0x8 (addr 0xffff7abc1d24)
0xffff7abc1d20    32  b #+0x18 (addr 0xffff7abc1d38)
0xffff7abc1d24    36  ldr x2, pc+92 (addr 0x0000ffff7abc1d80)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7abc1d28    40  ldr x4, [jssp], #8
0xffff7abc1d2c    44  ldr x3, [jssp], #8
0xffff7abc1d30    48  ldr x16, pc+88 (addr 0x0000ffff7abc1d88)    ;; code: BUILTIN
0xffff7abc1d34    52  br x16
0xffff7abc1d38    56  add jssp, jssp, #0x10 (16)
0xffff7abc1d3c    60  ldr x3, pc+84 (addr 0x0000ffff7abc1d90)    ;; object: 0x20d404a9 <AccessorInfo>
0xffff7abc1d40    64  ldr x4, pc+88 (addr 0x0000ffff7abc1d98)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7abc1d44    68  sub csp, jssp, #0x28 (40)
0xffff7abc1d48    72  stp x4, x3, [jssp, #-32]!
0xffff7abc1d4c    76  stp x1, x1, [jssp, #16]
0xffff7abc1d50    80  str x0, [jssp, #-8]!
0xffff7abc1d54    84  movz x16, #0x100000000
0xffff7abc1d58    88  sub csp, jssp, #0x8 (8)
0xffff7abc1d5c    92  str x16, [jssp, #-8]!
0xffff7abc1d60    96  movz x0, #0x6
0xffff7abc1d64   100  ldr x1, pc+60 (addr 0x0000ffff7abc1da0)    ;; external reference (Runtime::StoreCallbackProperty)
0xffff7abc1d68   104  ldr x16, pc+64 (addr 0x0000ffff7abc1da8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abc1d6c   108  br x16
0xffff7abc1d70   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7abc1d74   116  d63f03e0       constant
0xffff7abc1d78   120  5d4255d9       constant
0xffff7abc1d7c   124  00000000       constant
0xffff7abc1d80   128  20d05371       constant
0xffff7abc1d84   132  00000000       constant
0xffff7abc1d88   136  7ab22420       constant
0xffff7abc1d8c   140  0000ffff       constant
0xffff7abc1d90   144  20d404a9       constant
0xffff7abc1d94   148  00000000       constant
0xffff7abc1d98   152  20d05371       constant
0xffff7abc1d9c   156  00000000       constant
0xffff7abc1da0   160  00c8b560       constant
0xffff7abc1da4   164  00000000       constant
0xffff7abc1da8   168  7ab06060       constant
0xffff7abc1dac   172  0000ffff       constant


RelocInfo (size = 14)
0xffff7abc1d10  embedded object  (0x5d4255d9 Cell for 0)
0xffff7abc1d24  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7abc1d30  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abc1d3c  embedded object  (0x20d404a9 <AccessorInfo>)
0xffff7abc1d40  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7abc1d64  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0xffff7abc1d68  code target (STUB)  (0xffff7ab06060)
0xffff7abc1d70  constant pool (size 64)

--- Code ---
kind = TO_BOOLEAN_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 64
type = NORMAL
name = ToBooleanICStub
compiler = crankshaft
Instructions (size = 136)
0xffff7abc1e20     0  tbz w0, #0, #+0x40 (addr 0xffff7abc1e60)
0xffff7abc1e24     4  ldur x2, [x0, #-1]
0xffff7abc1e28     8  ldrb w1, [x2, #11]
0xffff7abc1e2c    12  cmp x1, #0x80 (128)
0xffff7abc1e30    16  b.eq #+0x10 (addr 0xffff7abc1e40)
0xffff7abc1e34    20  b #+0x2c (addr 0xffff7abc1e60)
0xffff7abc1e38    24  ldr x0, pc+24 (addr 0x0000ffff7abc1e50)    ;; object: 0x20d042b1 <false>
0xffff7abc1e3c    28  ret
0xffff7abc1e40    32  ldr x0, pc+24 (addr 0x0000ffff7abc1e58)    ;; object: 0x20d04281 <true>
0xffff7abc1e44    36  ret
0xffff7abc1e48    40  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abc1e4c    44  d63f03e0       constant
0xffff7abc1e50    48  20d042b1       constant
0xffff7abc1e54    52  00000000       constant
0xffff7abc1e58    56  20d04281       constant
0xffff7abc1e5c    60  00000000       constant
0xffff7abc1e60    64  movz x16, #0x0
0xffff7abc1e64    68  sub csp, jssp, #0x10 (16)
0xffff7abc1e68    72  stp fp, lr, [jssp, #-16]!
0xffff7abc1e6c    76  bl #+0x4 (addr 0xffff7abc1e70)
0xffff7abc1e70    80  movz x17, #0xa00000000
0xffff7abc1e74    84  sub csp, jssp, #0x10 (16)
0xffff7abc1e78    88  stp x17, cp, [jssp, #-16]!
0xffff7abc1e7c    92  add fp, jssp, #0x10 (16)
0xffff7abc1e80    96  ldr x17, pc+24 (addr 0x0000ffff7abc1e98)    ;; lazy deoptimization bailout 0
0xffff7abc1e84   100  add x17, x17, x16
0xffff7abc1e88   104  br x17
0xffff7abc1e8c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abc1e90   112  d63f03e0       constant
0xffff7abc1e94   116  d503201f       constant
0xffff7abc1e98   120  7a906000       constant
0xffff7abc1e9c   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abc1e38  embedded object  (0x20d042b1 <false>)
0xffff7abc1e40  embedded object  (0x20d04281 <true>)
0xffff7abc1e48  constant pool (size 24)
0xffff7abc1e80  runtime entry
0xffff7abc1e8c  constant pool (size 20)

--- End code ---
kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 64
type = NORMAL
name = ToBooleanICStub(Symbol)
compiler = crankshaft
Instructions (size = 136)
0xffff7abc1e20     0  tbz w0, #0, #+0x40 (addr 0xffff7abc1e60)
0xffff7abc1e24     4  ldur x2, [x0, #-1]
0xffff7abc1e28     8  ldrb w1, [x2, #11]
0xffff7abc1e2c    12  cmp x1, #0x80 (128)
0xffff7abc1e30    16  b.eq #+0x10 (addr 0xffff7abc1e40)
0xffff7abc1e34    20  b #+0x2c (addr 0xffff7abc1e60)
0xffff7abc1e38    24  ldr x0, pc+24 (addr 0x0000ffff7abc1e50)    ;; object: 0x20d042b1 <false>
0xffff7abc1e3c    28  ret
0xffff7abc1e40    32  ldr x0, pc+24 (addr 0x0000ffff7abc1e58)    ;; object: 0x20d04281 <true>
0xffff7abc1e44    36  ret
0xffff7abc1e48    40  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abc1e4c    44  d63f03e0       constant
0xffff7abc1e50    48  20d042b1       constant
0xffff7abc1e54    52  00000000       constant
0xffff7abc1e58    56  20d04281       constant
0xffff7abc1e5c    60  00000000       constant
0xffff7abc1e60    64  movz x16, #0x0
0xffff7abc1e64    68  sub csp, jssp, #0x10 (16)
0xffff7abc1e68    72  stp fp, lr, [jssp, #-16]!
0xffff7abc1e6c    76  bl #+0x4 (addr 0xffff7abc1e70)
0xffff7abc1e70    80  movz x17, #0xa00000000
0xffff7abc1e74    84  sub csp, jssp, #0x10 (16)
0xffff7abc1e78    88  stp x17, cp, [jssp, #-16]!
0xffff7abc1e7c    92  add fp, jssp, #0x10 (16)
0xffff7abc1e80    96  ldr x17, pc+24 (addr 0x0000ffff7abc1e98)    ;; lazy deoptimization bailout 0
0xffff7abc1e84   100  add x17, x17, x16
0xffff7abc1e88   104  br x17
0xffff7abc1e8c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abc1e90   112  d63f03e0       constant
0xffff7abc1e94   116  d503201f       constant
0xffff7abc1e98   120  7a906000       constant
0xffff7abc1e9c   124  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abc1e38  embedded object  (0x20d042b1 <false>)
0xffff7abc1e40  embedded object  (0x20d04281 <true>)
0xffff7abc1e48  constant pool (size 24)
0xffff7abc1e80  runtime entry
0xffff7abc1e8c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0xffff7abc3c80     0  sub csp, jssp, #0x8 (8)
0xffff7abc3c84     4  str x3, [jssp, #-8]!
0xffff7abc3c88     8  sub csp, jssp, #0x8 (8)
0xffff7abc3c8c    12  str x4, [jssp, #-8]!
0xffff7abc3c90    16  ldr x3, pc+104 (addr 0x0000ffff7abc3cf8)    ;; object: 0x5d42e999 Cell for 0
0xffff7abc3c94    20  ldur x3, [x3, #7]
0xffff7abc3c98    24  cmp x3, #0x0 (0)
0xffff7abc3c9c    28  b.ne #+0x8 (addr 0xffff7abc3ca4)
0xffff7abc3ca0    32  b #+0x18 (addr 0xffff7abc3cb8)
0xffff7abc3ca4    36  ldr x2, pc+92 (addr 0x0000ffff7abc3d00)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7abc3ca8    40  ldr x4, [jssp], #8
0xffff7abc3cac    44  ldr x3, [jssp], #8
0xffff7abc3cb0    48  ldr x16, pc+88 (addr 0x0000ffff7abc3d08)    ;; code: BUILTIN
0xffff7abc3cb4    52  br x16
0xffff7abc3cb8    56  add jssp, jssp, #0x10 (16)
0xffff7abc3cbc    60  ldr x3, pc+84 (addr 0x0000ffff7abc3d10)    ;; object: 0x20d404a9 <AccessorInfo>
0xffff7abc3cc0    64  ldr x4, pc+88 (addr 0x0000ffff7abc3d18)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7abc3cc4    68  sub csp, jssp, #0x28 (40)
0xffff7abc3cc8    72  stp x4, x3, [jssp, #-32]!
0xffff7abc3ccc    76  stp x1, x1, [jssp, #16]
0xffff7abc3cd0    80  str x0, [jssp, #-8]!
0xffff7abc3cd4    84  movz x16, #0x100000000
0xffff7abc3cd8    88  sub csp, jssp, #0x8 (8)
0xffff7abc3cdc    92  str x16, [jssp, #-8]!
0xffff7abc3ce0    96  movz x0, #0x6
0xffff7abc3ce4   100  ldr x1, pc+60 (addr 0x0000ffff7abc3d20)    ;; external reference (Runtime::StoreCallbackProperty)
0xffff7abc3ce8   104  ldr x16, pc+64 (addr 0x0000ffff7abc3d28)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abc3cec   108  br x16
0xffff7abc3cf0   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7abc3cf4   116  d63f03e0       constant
0xffff7abc3cf8   120  5d42e999       constant
0xffff7abc3cfc   124  00000000       constant
0xffff7abc3d00   128  20d05371       constant
0xffff7abc3d04   132  00000000       constant
0xffff7abc3d08   136  7ab22420       constant
0xffff7abc3d0c   140  0000ffff       constant
0xffff7abc3d10   144  20d404a9       constant
0xffff7abc3d14   148  00000000       constant
0xffff7abc3d18   152  20d05371       constant
0xffff7abc3d1c   156  00000000       constant
0xffff7abc3d20   160  00c8b560       constant
0xffff7abc3d24   164  00000000       constant
0xffff7abc3d28   168  7ab06060       constant
0xffff7abc3d2c   172  0000ffff       constant


RelocInfo (size = 14)
0xffff7abc3c90  embedded object  (0x5d42e999 Cell for 0)
0xffff7abc3ca4  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7abc3cb0  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abc3cbc  embedded object  (0x20d404a9 <AccessorInfo>)
0xffff7abc3cc0  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7abc3ce4  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0xffff7abc3ce8  code target (STUB)  (0xffff7ab06060)
0xffff7abc3cf0  constant pool (size 64)

--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 349)
0xffff7abcb800     0  movz x2, #0xe2c0
0xffff7abcb804     4  movk x2, #0x9ab, lsl #16
0xffff7abcb808     8  ldp x3, x0, [x2]
0xffff7abcb80c    12  adds x16, x3, #0x60 (96)
0xffff7abcb810    16  ccmp x16, x0, #nzCv, lo
0xffff7abcb814    20  b.hi #+0x6c (addr 0xffff7abcb880)
0xffff7abcb818    24  str x16, [x2]
0xffff7abcb81c    28  orr x3, x3, #0x1
0xffff7abcb820    32  ldr x0, pc+208 (addr 0x0000ffff7abcb8f0)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abcb824    36  stur x0, [x3, #-1]
0xffff7abcb828    40  movz x0, #0xa00000000
0xffff7abcb82c    44  stur x0, [x3, #7]
0xffff7abcb830    48  stur x1, [x3, #15]
0xffff7abcb834    52  stur cp, [x3, #23]
0xffff7abcb838    56  ldr x0, pc+192 (addr 0x0000ffff7abcb8f8)    ;; object: 0x20d04519 <the hole>
0xffff7abcb83c    60  stur x0, [x3, #31]
0xffff7abcb840    64  ldur x0, [cp, #39]
0xffff7abcb844    68  stur x0, [x3, #39]
0xffff7abcb848    72  ldr x0, pc+184 (addr 0x0000ffff7abcb900)    ;; object: 0x20d04241 <undefined>
0xffff7abcb84c    76  stur x0, [x3, #47]
0xffff7abcb850    80  ldr x0, pc+184 (addr 0x0000ffff7abcb908)    ;; object: 0x20d04241 <undefined>
0xffff7abcb854    84  stur x0, [x3, #55]
0xffff7abcb858    88  ldr x0, pc+184 (addr 0x0000ffff7abcb910)    ;; object: 0x20d04241 <undefined>
0xffff7abcb85c    92  stur x0, [x3, #63]
0xffff7abcb860    96  ldr x0, pc+184 (addr 0x0000ffff7abcb918)    ;; object: 0x20d04241 <undefined>
0xffff7abcb864   100  stur x0, [x3, #71]
0xffff7abcb868   104  ldr x0, pc+184 (addr 0x0000ffff7abcb920)    ;; object: 0x20d04241 <undefined>
0xffff7abcb86c   108  stur x0, [x3, #79]
0xffff7abcb870   112  ldr x0, pc+184 (addr 0x0000ffff7abcb928)    ;; object: 0x20d04241 <undefined>
0xffff7abcb874   116  stur x0, [x3, #87]
0xffff7abcb878   120  mov x0, x3
0xffff7abcb87c   124  ret
0xffff7abcb880   128  sub csp, jssp, #0x10 (16)
0xffff7abcb884   132  stp fp, lr, [jssp, #-16]!
0xffff7abcb888   136  movz fp, #0xa00000000
0xffff7abcb88c   140  sub csp, jssp, #0x8 (8)
0xffff7abcb890   144  str fp, [jssp, #-8]!
0xffff7abcb894   148  add fp, jssp, #0x8 (8)
0xffff7abcb898   152  movz x3, #0x0
0xffff7abcb89c   156  mov x16, lr
0xffff7abcb8a0   160  ldr x17, pc+144 (addr 0x0000ffff7abcb930)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abcb8a4   164  blr x17
0xffff7abcb8a8   168  movz x0, #0x6000000000
0xffff7abcb8ac   172  movz x10, #0x0
0xffff7abcb8b0   176  sub csp, jssp, #0x10 (16)
0xffff7abcb8b4   180  stp x10, x0, [jssp, #-16]!
0xffff7abcb8b8   184  movz x0, #0x2
0xffff7abcb8bc   188  movz x1, #0x5b88
0xffff7abcb8c0   192  movk x1, #0xe2, lsl #16
0xffff7abcb8c4   196  ldr x16, pc+116 (addr 0x0000ffff7abcb938)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abcb8c8   200  blr x16
0xffff7abcb8cc   204  str x0, [jssp, #24]
0xffff7abcb8d0   208  ldr x16, pc+112 (addr 0x0000ffff7abcb940)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abcb8d4   212  blr x16
0xffff7abcb8d8   216  ldr lr, [jssp, #16]
0xffff7abcb8dc   220  ldp xzr, fp, [jssp], #24
0xffff7abcb8e0   224  b #-0xc0 (addr 0xffff7abcb820)
0xffff7abcb8e4   228  5800031f       constant pool begin (num_const = 24)    ;; constant pool
0xffff7abcb8e8   232  d63f03e0       constant
0xffff7abcb8ec   236  d503201f       constant
0xffff7abcb8f0   240  4ec06149       constant
0xffff7abcb8f4   244  00000000       constant
0xffff7abcb8f8   248  20d04519       constant
0xffff7abcb8fc   252  00000000       constant
0xffff7abcb900   256  20d04241       constant
0xffff7abcb904   260  00000000       constant
0xffff7abcb908   264  20d04241       constant
0xffff7abcb90c   268  00000000       constant
0xffff7abcb910   272  20d04241       constant
0xffff7abcb914   276  00000000       constant
0xffff7abcb918   280  20d04241       constant
0xffff7abcb91c   284  00000000       constant
0xffff7abcb920   288  20d04241       constant
0xffff7abcb924   292  00000000       constant
0xffff7abcb928   296  20d04241       constant
0xffff7abcb92c   300  00000000       constant
0xffff7abcb930   304  7ab06820       constant
0xffff7abcb934   308  0000ffff       constant
0xffff7abcb938   312  7ab06260       constant
0xffff7abcb93c   316  0000ffff       constant
0xffff7abcb940   320  7ab068e0       constant
0xffff7abcb944   324  0000ffff       constant


Safepoints (size = 21)
0xffff7abcb8cc   204  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 17)
0xffff7abcb820  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abcb838  embedded object  (0x20d04519 <the hole>)
0xffff7abcb848  embedded object  (0x20d04241 <undefined>)
0xffff7abcb850  embedded object  (0x20d04241 <undefined>)
0xffff7abcb858  embedded object  (0x20d04241 <undefined>)
0xffff7abcb860  embedded object  (0x20d04241 <undefined>)
0xffff7abcb868  embedded object  (0x20d04241 <undefined>)
0xffff7abcb870  embedded object  (0x20d04241 <undefined>)
0xffff7abcb8a0  code target (STUB)  (0xffff7ab06820)
0xffff7abcb8c4  code target (STUB)  (0xffff7ab06260)
0xffff7abcb8d0  code target (STUB)  (0xffff7ab068e0)
0xffff7abcb8e4  constant pool (size 100)

--- End code ---
kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 349)
0xffff7abcb800     0  movz x2, #0xe2c0
0xffff7abcb804     4  movk x2, #0x9ab, lsl #16
0xffff7abcb808     8  ldp x3, x0, [x2]
0xffff7abcb80c    12  adds x16, x3, #0x60 (96)
0xffff7abcb810    16  ccmp x16, x0, #nzCv, lo
0xffff7abcb814    20  b.hi #+0x6c (addr 0xffff7abcb880)
0xffff7abcb818    24  str x16, [x2]
0xffff7abcb81c    28  orr x3, x3, #0x1
0xffff7abcb820    32  ldr x0, pc+208 (addr 0x0000ffff7abcb8f0)    ;; object: 0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abcb824    36  stur x0, [x3, #-1]
0xffff7abcb828    40  movz x0, #0xa00000000
0xffff7abcb82c    44  stur x0, [x3, #7]
0xffff7abcb830    48  stur x1, [x3, #15]
0xffff7abcb834    52  stur cp, [x3, #23]
0xffff7abcb838    56  ldr x0, pc+192 (addr 0x0000ffff7abcb8f8)    ;; object: 0x20d04519 <the hole>
0xffff7abcb83c    60  stur x0, [x3, #31]
0xffff7abcb840    64  ldur x0, [cp, #39]
0xffff7abcb844    68  stur x0, [x3, #39]
0xffff7abcb848    72  ldr x0, pc+184 (addr 0x0000ffff7abcb900)    ;; object: 0x20d04241 <undefined>
0xffff7abcb84c    76  stur x0, [x3, #47]
0xffff7abcb850    80  ldr x0, pc+184 (addr 0x0000ffff7abcb908)    ;; object: 0x20d04241 <undefined>
0xffff7abcb854    84  stur x0, [x3, #55]
0xffff7abcb858    88  ldr x0, pc+184 (addr 0x0000ffff7abcb910)    ;; object: 0x20d04241 <undefined>
0xffff7abcb85c    92  stur x0, [x3, #63]
0xffff7abcb860    96  ldr x0, pc+184 (addr 0x0000ffff7abcb918)    ;; object: 0x20d04241 <undefined>
0xffff7abcb864   100  stur x0, [x3, #71]
0xffff7abcb868   104  ldr x0, pc+184 (addr 0x0000ffff7abcb920)    ;; object: 0x20d04241 <undefined>
0xffff7abcb86c   108  stur x0, [x3, #79]
0xffff7abcb870   112  ldr x0, pc+184 (addr 0x0000ffff7abcb928)    ;; object: 0x20d04241 <undefined>
0xffff7abcb874   116  stur x0, [x3, #87]
0xffff7abcb878   120  mov x0, x3
0xffff7abcb87c   124  ret
0xffff7abcb880   128  sub csp, jssp, #0x10 (16)
0xffff7abcb884   132  stp fp, lr, [jssp, #-16]!
0xffff7abcb888   136  movz fp, #0xa00000000
0xffff7abcb88c   140  sub csp, jssp, #0x8 (8)
0xffff7abcb890   144  str fp, [jssp, #-8]!
0xffff7abcb894   148  add fp, jssp, #0x8 (8)
0xffff7abcb898   152  movz x3, #0x0
0xffff7abcb89c   156  mov x16, lr
0xffff7abcb8a0   160  ldr x17, pc+144 (addr 0x0000ffff7abcb930)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abcb8a4   164  blr x17
0xffff7abcb8a8   168  movz x0, #0x6000000000
0xffff7abcb8ac   172  movz x10, #0x0
0xffff7abcb8b0   176  sub csp, jssp, #0x10 (16)
0xffff7abcb8b4   180  stp x10, x0, [jssp, #-16]!
0xffff7abcb8b8   184  movz x0, #0x2
0xffff7abcb8bc   188  movz x1, #0x5b88
0xffff7abcb8c0   192  movk x1, #0xe2, lsl #16
0xffff7abcb8c4   196  ldr x16, pc+116 (addr 0x0000ffff7abcb938)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abcb8c8   200  blr x16
0xffff7abcb8cc   204  str x0, [jssp, #24]
0xffff7abcb8d0   208  ldr x16, pc+112 (addr 0x0000ffff7abcb940)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abcb8d4   212  blr x16
0xffff7abcb8d8   216  ldr lr, [jssp, #16]
0xffff7abcb8dc   220  ldp xzr, fp, [jssp], #24
0xffff7abcb8e0   224  b #-0xc0 (addr 0xffff7abcb820)
0xffff7abcb8e4   228  5800031f       constant pool begin (num_const = 24)    ;; constant pool
0xffff7abcb8e8   232  d63f03e0       constant
0xffff7abcb8ec   236  d503201f       constant
0xffff7abcb8f0   240  4ec06149       constant
0xffff7abcb8f4   244  00000000       constant
0xffff7abcb8f8   248  20d04519       constant
0xffff7abcb8fc   252  00000000       constant
0xffff7abcb900   256  20d04241       constant
0xffff7abcb904   260  00000000       constant
0xffff7abcb908   264  20d04241       constant
0xffff7abcb90c   268  00000000       constant
0xffff7abcb910   272  20d04241       constant
0xffff7abcb914   276  00000000       constant
0xffff7abcb918   280  20d04241       constant
0xffff7abcb91c   284  00000000       constant
0xffff7abcb920   288  20d04241       constant
0xffff7abcb924   292  00000000       constant
0xffff7abcb928   296  20d04241       constant
0xffff7abcb92c   300  00000000       constant
0xffff7abcb930   304  7ab06820       constant
0xffff7abcb934   308  0000ffff       constant
0xffff7abcb938   312  7ab06260       constant
0xffff7abcb93c   316  0000ffff       constant
0xffff7abcb940   320  7ab068e0       constant
0xffff7abcb944   324  0000ffff       constant


Safepoints (size = 21)
0xffff7abcb8cc   204  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 17)
0xffff7abcb820  embedded object  (0x4ec06149 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abcb838  embedded object  (0x20d04519 <the hole>)
0xffff7abcb848  embedded object  (0x20d04241 <undefined>)
0xffff7abcb850  embedded object  (0x20d04241 <undefined>)
0xffff7abcb858  embedded object  (0x20d04241 <undefined>)
0xffff7abcb860  embedded object  (0x20d04241 <undefined>)
0xffff7abcb868  embedded object  (0x20d04241 <undefined>)
0xffff7abcb870  embedded object  (0x20d04241 <undefined>)
0xffff7abcb8a0  code target (STUB)  (0xffff7ab06820)
0xffff7abcb8c4  code target (STUB)  (0xffff7ab06260)
0xffff7abcb8d0  code target (STUB)  (0xffff7ab068e0)
0xffff7abcb8e4  constant pool (size 100)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 192)
0xffff7abcfa60     0  ldur x4, [x1, #15]
0xffff7abcfa64     4  ldur w5, [x1, #27]
0xffff7abcfa68     8  tbnz w2, #0, #+0x2c (addr 0xffff7abcfa94)
0xffff7abcfa6c    12  asr x7, x2, #32
0xffff7abcfa70    16  cmp w7, w5
0xffff7abcfa74    20  b.hs #+0x48 (addr 0xffff7abcfabc)
0xffff7abcfa78    24  add x5, x4, #0xf (15)
0xffff7abcfa7c    28  ldr x6, [x5, w7, sxtw #3]
0xffff7abcfa80    32  ldr x16, [x26, #88]
0xffff7abcfa84    36  cmp x6, x16
0xffff7abcfa88    40  b.eq #+0x44 (addr 0xffff7abcfacc)
0xffff7abcfa8c    44  mov x0, x6
0xffff7abcfa90    48  ret
0xffff7abcfa94    52  ldur x16, [x2, #-1]
0xffff7abcfa98    56  ldr x17, [x26, #120]
0xffff7abcfa9c    60  cmp x16, x17
0xffff7abcfaa0    64  b.ne #+0x3c (addr 0xffff7abcfadc)
0xffff7abcfaa4    68  ldur d29, [x2, #7]
0xffff7abcfaa8    72  fcvtzs w7, d29
0xffff7abcfaac    76  scvtf d0, w7
0xffff7abcfab0    80  fcmp d29, d0
0xffff7abcfab4    84  b.ne #+0x28 (addr 0xffff7abcfadc)
0xffff7abcfab8    88  b #-0x48 (addr 0xffff7abcfa70)
0xffff7abcfabc    92  movz x16, #0x0
0xffff7abcfac0    96  sub csp, jssp, #0x10 (16)
0xffff7abcfac4   100  stp fp, lr, [jssp, #-16]!
0xffff7abcfac8   104  bl #+0x24 (addr 0xffff7abcfaec)
0xffff7abcfacc   108  movz x16, #0x8
0xffff7abcfad0   112  sub csp, jssp, #0x10 (16)
0xffff7abcfad4   116  stp fp, lr, [jssp, #-16]!
0xffff7abcfad8   120  bl #+0x14 (addr 0xffff7abcfaec)
0xffff7abcfadc   124  movz x16, #0x10
0xffff7abcfae0   128  sub csp, jssp, #0x10 (16)
0xffff7abcfae4   132  stp fp, lr, [jssp, #-16]!
0xffff7abcfae8   136  bl #+0x4 (addr 0xffff7abcfaec)
0xffff7abcfaec   140  movz x17, #0xa00000000
0xffff7abcfaf0   144  sub csp, jssp, #0x10 (16)
0xffff7abcfaf4   148  stp x17, cp, [jssp, #-16]!
0xffff7abcfaf8   152  add fp, jssp, #0x10 (16)
0xffff7abcfafc   156  ldr x17, pc+20 (addr 0x0000ffff7abcfb10)    ;; lazy deoptimization bailout 0
0xffff7abcfb00   160  add x17, x17, x16
0xffff7abcfb04   164  br x17
0xffff7abcfb08   168  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abcfb0c   172  d63f03e0       constant
0xffff7abcfb10   176  7a906000       constant
0xffff7abcfb14   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7abcfafc  runtime entry
0xffff7abcfb08  constant pool (size 16)

--- End code ---
kind = HANDLER
major_key = LoadFastElementStub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 192)
0xffff7abcfa60     0  ldur x4, [x1, #15]
0xffff7abcfa64     4  ldur w5, [x1, #27]
0xffff7abcfa68     8  tbnz w2, #0, #+0x2c (addr 0xffff7abcfa94)
0xffff7abcfa6c    12  asr x7, x2, #32
0xffff7abcfa70    16  cmp w7, w5
0xffff7abcfa74    20  b.hs #+0x48 (addr 0xffff7abcfabc)
0xffff7abcfa78    24  add x5, x4, #0xf (15)
0xffff7abcfa7c    28  ldr x6, [x5, w7, sxtw #3]
0xffff7abcfa80    32  ldr x16, [x26, #88]
0xffff7abcfa84    36  cmp x6, x16
0xffff7abcfa88    40  b.eq #+0x44 (addr 0xffff7abcfacc)
0xffff7abcfa8c    44  mov x0, x6
0xffff7abcfa90    48  ret
0xffff7abcfa94    52  ldur x16, [x2, #-1]
0xffff7abcfa98    56  ldr x17, [x26, #120]
0xffff7abcfa9c    60  cmp x16, x17
0xffff7abcfaa0    64  b.ne #+0x3c (addr 0xffff7abcfadc)
0xffff7abcfaa4    68  ldur d29, [x2, #7]
0xffff7abcfaa8    72  fcvtzs w7, d29
0xffff7abcfaac    76  scvtf d0, w7
0xffff7abcfab0    80  fcmp d29, d0
0xffff7abcfab4    84  b.ne #+0x28 (addr 0xffff7abcfadc)
0xffff7abcfab8    88  b #-0x48 (addr 0xffff7abcfa70)
0xffff7abcfabc    92  movz x16, #0x0
0xffff7abcfac0    96  sub csp, jssp, #0x10 (16)
0xffff7abcfac4   100  stp fp, lr, [jssp, #-16]!
0xffff7abcfac8   104  bl #+0x24 (addr 0xffff7abcfaec)
0xffff7abcfacc   108  movz x16, #0x8
0xffff7abcfad0   112  sub csp, jssp, #0x10 (16)
0xffff7abcfad4   116  stp fp, lr, [jssp, #-16]!
0xffff7abcfad8   120  bl #+0x14 (addr 0xffff7abcfaec)
0xffff7abcfadc   124  movz x16, #0x10
0xffff7abcfae0   128  sub csp, jssp, #0x10 (16)
0xffff7abcfae4   132  stp fp, lr, [jssp, #-16]!
0xffff7abcfae8   136  bl #+0x4 (addr 0xffff7abcfaec)
0xffff7abcfaec   140  movz x17, #0xa00000000
0xffff7abcfaf0   144  sub csp, jssp, #0x10 (16)
0xffff7abcfaf4   148  stp x17, cp, [jssp, #-16]!
0xffff7abcfaf8   152  add fp, jssp, #0x10 (16)
0xffff7abcfafc   156  ldr x17, pc+20 (addr 0x0000ffff7abcfb10)    ;; lazy deoptimization bailout 0
0xffff7abcfb00   160  add x17, x17, x16
0xffff7abcfb04   164  br x17
0xffff7abcfb08   168  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abcfb0c   172  d63f03e0       constant
0xffff7abcfb10   176  7a906000       constant
0xffff7abcfb14   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7abcfafc  runtime entry
0xffff7abcfb08  constant pool (size 16)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*STRING -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 624)
0xffff7abd0200     0  orr x16, x1, x0
0xffff7abd0204     4  tbnz w16, #0, #+0x10 (addr 0xffff7abd0214)
0xffff7abd0208     8  asr x1, x1, #32
0xffff7abd020c    12  sub x0, x1, x0, asr #32
0xffff7abd0210    16  ret
0xffff7abd0214    20  cmp x0, x1
0xffff7abd0218    24  b.ne #+0x30 (addr 0xffff7abd0248)
0xffff7abd021c    28  ldur x16, [x0, #-1]
0xffff7abd0220    32  ldr x17, [x26, #120]
0xffff7abd0224    36  cmp x16, x17
0xffff7abd0228    40  b.eq #+0xc (addr 0xffff7abd0234)
0xffff7abd022c    44  movz x0, #0x0
0xffff7abd0230    48  ret
0xffff7abd0234    52  ldur d0, [x0, #7]
0xffff7abd0238    56  fcmp d0, d0
0xffff7abd023c    60  b.vc #-0x10 (addr 0xffff7abd022c)
0xffff7abd0240    64  movn x0, #0x0
0xffff7abd0244    68  ret
0xffff7abd0248    72  and x16, x1, x0
0xffff7abd024c    76  tbnz w16, #0, #+0x64 (addr 0xffff7abd02b0)
0xffff7abd0250    80  tbz w0, #0, #+0x24 (addr 0xffff7abd0274)
0xffff7abd0254    84  ldur x16, [x0, #-1]
0xffff7abd0258    88  ldr x17, [x26, #120]
0xffff7abd025c    92  cmp x16, x17
0xffff7abd0260    96  b.eq #+0x8 (addr 0xffff7abd0268)
0xffff7abd0264   100  ret
0xffff7abd0268   104  ldur d0, [x0, #7]
0xffff7abd026c   108  scvtf d1, x1, #32
0xffff7abd0270   112  b #+0x24 (addr 0xffff7abd0294)
0xffff7abd0274   116  ldur x16, [x1, #-1]
0xffff7abd0278   120  ldr x17, [x26, #120]
0xffff7abd027c   124  cmp x16, x17
0xffff7abd0280   128  b.eq #+0xc (addr 0xffff7abd028c)
0xffff7abd0284   132  movz x0, #0x1
0xffff7abd0288   136  ret
0xffff7abd028c   140  ldur d1, [x1, #7]
0xffff7abd0290   144  scvtf d0, x0, #32
0xffff7abd0294   148  fcmp d1, d0
0xffff7abd0298   152  b.vs #+0x10 (addr 0xffff7abd02a8)
0xffff7abd029c   156  cset x0, gt
0xffff7abd02a0   160  csinv x0, x0, xzr, ge
0xffff7abd02a4   164  ret
0xffff7abd02a8   168  movn x0, #0x0
0xffff7abd02ac   172  ret
0xffff7abd02b0   176  ldur x10, [x0, #-1]
0xffff7abd02b4   180  ldur x12, [x1, #-1]
0xffff7abd02b8   184  ldrb w11, [x10, #11]
0xffff7abd02bc   188  ldrb w13, [x12, #11]
0xffff7abd02c0   192  cmp x11, #0xb1 (177)
0xffff7abd02c4   196  b.lt #+0x8 (addr 0xffff7abd02cc)
0xffff7abd02c8   200  ret
0xffff7abd02cc   204  cmp x11, #0x83 (131)
0xffff7abd02d0   208  movz x16, #0x83
0xffff7abd02d4   212  ccmp x13, x16, #nZcv, ne
0xffff7abd02d8   216  movz x16, #0xb1
0xffff7abd02dc   220  ccmp x13, x16, #NzcV, ne
0xffff7abd02e0   224  b.ge #-0x18 (addr 0xffff7abd02c8)
0xffff7abd02e4   228  orr x14, x13, x11
0xffff7abd02e8   232  tst x14, #0xc0
0xffff7abd02ec   236  b.eq #-0x24 (addr 0xffff7abd02c8)
0xffff7abd02f0   240  cmp x11, #0x81 (129)
0xffff7abd02f4   244  b.ne #+0x18 (addr 0xffff7abd030c)
0xffff7abd02f8   248  cmp x12, x10
0xffff7abd02fc   252  b.ne #+0x10 (addr 0xffff7abd030c)
0xffff7abd0300   256  ldur d1, [x1, #7]
0xffff7abd0304   260  ldur d0, [x0, #7]
0xffff7abd0308   264  b #-0x74 (addr 0xffff7abd0294)
0xffff7abd030c   268  movz x16, #0x87
0xffff7abd0310   272  and x14, x13, x16
0xffff7abd0314   276  movz x16, #0x87
0xffff7abd0318   280  and x15, x11, x16
0xffff7abd031c   284  cmp x14, #0x4 (4)
0xffff7abd0320   288  ccmp x15, #4, #nzcv, eq
0xffff7abd0324   292  b.ne #+0x5c (addr 0xffff7abd0380)
0xffff7abd0328   296  ldur x10, [x1, #15]
0xffff7abd032c   300  ldur x11, [x0, #15]
0xffff7abd0330   304  cmp x10, x11
0xffff7abd0334   308  b.eq #+0xc (addr 0xffff7abd0340)
0xffff7abd0338   312  movz x0, #0x100000000
0xffff7abd033c   316  ret
0xffff7abd0340   320  cbnz x10, #+0xc (addr 0xffff7abd034c)
0xffff7abd0344   324  movz x0, #0x0
0xffff7abd0348   328  ret
0xffff7abd034c   332  asr x10, x10, #32
0xffff7abd0350   336  add x11, x10, #0x17 (23)
0xffff7abd0354   340  add x1, x1, x11
0xffff7abd0358   344  add x0, x0, x11
0xffff7abd035c   348  neg x10, x10
0xffff7abd0360   352  ldrb w11, [x1, x10]
0xffff7abd0364   356  ldrb w12, [x0, x10]
0xffff7abd0368   360  cmp x11, x12
0xffff7abd036c   364  b.ne #-0x34 (addr 0xffff7abd0338)
0xffff7abd0370   368  add x10, x10, #0x1 (1)
0xffff7abd0374   372  cbnz x10, #-0x14 (addr 0xffff7abd0360)
0xffff7abd0378   376  movz x0, #0x0
0xffff7abd037c   380  ret
0xffff7abd0380   384  movz x16, #0xc00000000
0xffff7abd0384   388  sub csp, jssp, #0x10 (16)
0xffff7abd0388   392  stp fp, lr, [jssp, #-16]!
0xffff7abd038c   396  sub csp, jssp, #0x10 (16)
0xffff7abd0390   400  str x16, [jssp, #-8]!
0xffff7abd0394   404  ldr x17, pc+172 (addr 0x0000ffff7abd0440)    ;; object: 0xffff7abd01a1 <Code: COMPARE_IC>
0xffff7abd0398   408  sub csp, jssp, #0x10 (16)
0xffff7abd039c   412  str x17, [jssp, #-8]!
0xffff7abd03a0   416  add fp, jssp, #0x10 (16)
0xffff7abd03a4   420  sub csp, jssp, #0x10 (16)
0xffff7abd03a8   424  stp x0, x1, [jssp, #-16]!
0xffff7abd03ac   428  movz x0, #0x2
0xffff7abd03b0   432  ldr x1, pc+152 (addr 0x0000ffff7abd0448)    ;; external reference (Runtime::StrictEqual)
0xffff7abd03b4   436  ldr x16, pc+156 (addr 0x0000ffff7abd0450)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abd03b8   440  blr x16
0xffff7abd03bc   444  mov jssp, fp
0xffff7abd03c0   448  ldp fp, lr, [jssp], #16
0xffff7abd03c4   452  ldr x1, [x26, #64]
0xffff7abd03c8   456  sub x0, x0, x1
0xffff7abd03cc   460  ret
0xffff7abd03d0   464  movz x16, #0xc00000000
0xffff7abd03d4   468  sub csp, jssp, #0x10 (16)
0xffff7abd03d8   472  stp fp, lr, [jssp, #-16]!
0xffff7abd03dc   476  sub csp, jssp, #0x10 (16)
0xffff7abd03e0   480  str x16, [jssp, #-8]!
0xffff7abd03e4   484  ldr x17, pc+116 (addr 0x0000ffff7abd0458)    ;; object: 0xffff7abd01a1 <Code: COMPARE_IC>
0xffff7abd03e8   488  sub csp, jssp, #0x10 (16)
0xffff7abd03ec   492  str x17, [jssp, #-8]!
0xffff7abd03f0   496  add fp, jssp, #0x10 (16)
0xffff7abd03f4   500  sub csp, jssp, #0x18 (24)
0xffff7abd03f8   504  stp lr, x0, [jssp, #-24]!
0xffff7abd03fc   508  str x1, [jssp, #16]
0xffff7abd0400   512  movz x10, #0x2f00000000
0xffff7abd0404   516  sub csp, jssp, #0x18 (24)
0xffff7abd0408   520  stp x10, x0, [jssp, #-24]!
0xffff7abd040c   524  str x1, [jssp, #16]
0xffff7abd0410   528  movz x0, #0x3
0xffff7abd0414   532  ldr x1, pc+76 (addr 0x0000ffff7abd0460)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7abd0418   536  ldr x16, pc+80 (addr 0x0000ffff7abd0468)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abd041c   540  blr x16
0xffff7abd0420   544  add x11, x0, #0x5f (95)
0xffff7abd0424   548  ldr x1, [jssp, #16]
0xffff7abd0428   552  ldp lr, x0, [jssp], #24
0xffff7abd042c   556  mov jssp, fp
0xffff7abd0430   560  ldp fp, lr, [jssp], #16
0xffff7abd0434   564  br x11
0xffff7abd0438   568  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abd043c   572  d63f03e0       constant
0xffff7abd0440   576  7abd01a1       constant
0xffff7abd0444   580  0000ffff       constant
0xffff7abd0448   584  00e50928       constant
0xffff7abd044c   588  00000000       constant
0xffff7abd0450   592  7ab06060       constant
0xffff7abd0454   596  0000ffff       constant
0xffff7abd0458   600  7abd01a1       constant
0xffff7abd045c   604  0000ffff       constant
0xffff7abd0460   608  00c8a980       constant
0xffff7abd0464   612  00000000       constant
0xffff7abd0468   616  7ab06060       constant
0xffff7abd046c   620  0000ffff       constant


RelocInfo (size = 16)
0xffff7abd0394  embedded object  (0xffff7abd01a1 <Code: COMPARE_IC>)
0xffff7abd03b0  external reference (Runtime::StrictEqual)  (0xe50928)
0xffff7abd03b4  code target (STUB)  (0xffff7ab06060)
0xffff7abd03e4  embedded object  (0xffff7abd01a1 <Code: COMPARE_IC>)
0xffff7abd0414  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7abd0418  code target (STUB)  (0xffff7ab06060)
0xffff7abd0438  constant pool (size 56)


kind = HANDLER
major_key = <NoCache>Stub
name = indexOf
compiler = unknown
Instructions (size = 152)
0xffff7abd0820     0  sub csp, jssp, #0x8 (8)
0xffff7abd0824     4  str x3, [jssp, #-8]!
0xffff7abd0828     8  sub csp, jssp, #0x8 (8)
0xffff7abd082c    12  str x0, [jssp, #-8]!
0xffff7abd0830    16  ldur x3, [cp, #39]
0xffff7abd0834    20  movz x16, #0x2e7
0xffff7abd0838    24  ldr x3, [x3, x16]
0xffff7abd083c    28  ldur x3, [x3, #23]
0xffff7abd0840    32  ldur x3, [x3, #23]
0xffff7abd0844    36  ldr x0, pc+84 (addr 0x0000ffff7abd0898)    ;; object: 0x20d63e59 Cell for 0
0xffff7abd0848    40  ldur x0, [x0, #7]
0xffff7abd084c    44  cmp x0, #0x0 (0)
0xffff7abd0850    48  b.ne #+0x1c (addr 0xffff7abd086c)
0xffff7abd0854    52  ldur x0, [x3, #-1]
0xffff7abd0858    56  ldr x4, pc+72 (addr 0x0000ffff7abd08a0)    ;; object: 0x5d406e39 WeakCell for 0x4ec156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>
0xffff7abd085c    60  ldur x4, [x4, #7]
0xffff7abd0860    64  cmp x0, x4
0xffff7abd0864    68  b.ne #+0x8 (addr 0xffff7abd086c)
0xffff7abd0868    72  b #+0x14 (addr 0xffff7abd087c)
0xffff7abd086c    76  ldr x0, [jssp], #8
0xffff7abd0870    80  ldr x3, [jssp], #8
0xffff7abd0874    84  ldr x16, pc+52 (addr 0x0000ffff7abd08a8)    ;; code: BUILTIN
0xffff7abd0878    88  br x16
0xffff7abd087c    92  add jssp, jssp, #0x10 (16)
0xffff7abd0880    96  mov x1, x3
0xffff7abd0884   100  ldr x16, pc+44 (addr 0x0000ffff7abd08b0)    ;; code: HANDLER, LoadConstantStub, minor: 10
0xffff7abd0888   104  br x16
0xffff7abd088c   108  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0xffff7abd0890   112  d63f03e0       constant
0xffff7abd0894   116  d503201f       constant
0xffff7abd0898   120  20d63e59       constant
0xffff7abd089c   124  00000000       constant
0xffff7abd08a0   128  5d406e39       constant
0xffff7abd08a4   132  00000000       constant
0xffff7abd08a8   136  7ab222e0       constant
0xffff7abd08ac   140  0000ffff       constant
0xffff7abd08b0   144  7ab8c760       constant
0xffff7abd08b4   148  0000ffff       constant


RelocInfo (size = 10)
0xffff7abd0844  embedded object  (0x20d63e59 Cell for 0)
0xffff7abd0858  embedded object  (0x5d406e39 WeakCell for 0x4ec156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>)
0xffff7abd0874  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abd0884  code target (HANDLER)  (0xffff7ab8c760)
0xffff7abd088c  constant pool (size 44)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 413)
0xffff7abd12e0     0  ldur x4, [x1, #15]
0xffff7abd12e4     4  ldur w5, [x4, #11]
0xffff7abd12e8     8  ldur x16, [x1, #23]
0xffff7abd12ec    12  ldur x16, [x16, #39]
0xffff7abd12f0    16  tst x16, #0x8
0xffff7abd12f4    20  b.ne #+0x11c (addr 0xffff7abd1410)
0xffff7abd12f8    24  ldur x6, [x4, #23]
0xffff7abd12fc    28  ldur x4, [x4, #15]
0xffff7abd1300    32  add x4, x6, x4
0xffff7abd1304    36  tbnz w2, #0, #+0x48 (addr 0xffff7abd134c)
0xffff7abd1308    40  asr x7, x2, #32
0xffff7abd130c    44  cmp w7, w5
0xffff7abd1310    48  b.hs #+0x110 (addr 0xffff7abd1420)
0xffff7abd1314    52  ldr d0, [x4, w7, sxtw #3]
0xffff7abd1318    56  movz x1, #0xe2c0
0xffff7abd131c    60  movk x1, #0x9ab, lsl #16
0xffff7abd1320    64  ldp x2, x0, [x1]
0xffff7abd1324    68  adds x16, x2, #0x10 (16)
0xffff7abd1328    72  ccmp x16, x0, #nzCv, lo
0xffff7abd132c    76  b.hi #+0x68 (addr 0xffff7abd1394)
0xffff7abd1330    80  str x16, [x1]
0xffff7abd1334    84  ldr x1, [x26, #120]
0xffff7abd1338    88  str x1, [x2]
0xffff7abd133c    92  orr x2, x2, #0x1
0xffff7abd1340    96  stur d0, [x2, #7]
0xffff7abd1344   100  mov x0, x2
0xffff7abd1348   104  ret
0xffff7abd134c   108  sub csp, jssp, #0x10 (16)
0xffff7abd1350   112  stp fp, lr, [jssp, #-16]!
0xffff7abd1354   116  movz fp, #0xa00000000
0xffff7abd1358   120  sub csp, jssp, #0x8 (8)
0xffff7abd135c   124  str fp, [jssp, #-8]!
0xffff7abd1360   128  add fp, jssp, #0x8 (8)
0xffff7abd1364   132  ldur x16, [x2, #-1]
0xffff7abd1368   136  ldr x17, [x26, #120]
0xffff7abd136c   140  cmp x16, x17
0xffff7abd1370   144  b.ne #+0xc0 (addr 0xffff7abd1430)
0xffff7abd1374   148  ldur d29, [x2, #7]
0xffff7abd1378   152  fcvtzs w7, d29
0xffff7abd137c   156  scvtf d0, w7
0xffff7abd1380   160  fcmp d29, d0
0xffff7abd1384   164  b.ne #+0xac (addr 0xffff7abd1430)
0xffff7abd1388   168  ldr lr, [jssp, #16]
0xffff7abd138c   172  ldp xzr, fp, [jssp], #24
0xffff7abd1390   176  b #-0x84 (addr 0xffff7abd130c)
0xffff7abd1394   180  sub csp, jssp, #0x10 (16)
0xffff7abd1398   184  stp fp, lr, [jssp, #-16]!
0xffff7abd139c   188  movz fp, #0xa00000000
0xffff7abd13a0   192  sub csp, jssp, #0x8 (8)
0xffff7abd13a4   196  str fp, [jssp, #-8]!
0xffff7abd13a8   200  add fp, jssp, #0x8 (8)
0xffff7abd13ac   204  movz x2, #0x0
0xffff7abd13b0   208  mov x16, lr
0xffff7abd13b4   212  ldr x17, pc+68 (addr 0x0000ffff7abd13f8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abd13b8   216  blr x17
0xffff7abd13bc   220  ldur cp, [fp, #-8]
0xffff7abd13c0   224  movz x0, #0x0
0xffff7abd13c4   228  movz x1, #0x4b48
0xffff7abd13c8   232  movk x1, #0xe4, lsl #16
0xffff7abd13cc   236  ldr x16, pc+52 (addr 0x0000ffff7abd1400)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abd13d0   240  blr x16
0xffff7abd13d4   244  str x0, [jssp, #16]
0xffff7abd13d8   248  ldr x16, pc+48 (addr 0x0000ffff7abd1408)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abd13dc   252  blr x16
0xffff7abd13e0   256  ldr lr, [jssp, #16]
0xffff7abd13e4   260  ldp xzr, fp, [jssp], #24
0xffff7abd13e8   264  b #-0xa8 (addr 0xffff7abd1340)
0xffff7abd13ec   268  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7abd13f0   272  d63f03e0       constant
0xffff7abd13f4   276  d503201f       constant
0xffff7abd13f8   280  7ab06820       constant
0xffff7abd13fc   284  0000ffff       constant
0xffff7abd1400   288  7ab06260       constant
0xffff7abd1404   292  0000ffff       constant
0xffff7abd1408   296  7ab068e0       constant
0xffff7abd140c   300  0000ffff       constant
0xffff7abd1410   304  movz x16, #0x0
0xffff7abd1414   308  sub csp, jssp, #0x10 (16)
0xffff7abd1418   312  stp fp, lr, [jssp, #-16]!
0xffff7abd141c   316  bl #+0x1c (addr 0xffff7abd1438)
0xffff7abd1420   320  movz x16, #0x8
0xffff7abd1424   324  sub csp, jssp, #0x10 (16)
0xffff7abd1428   328  stp fp, lr, [jssp, #-16]!
0xffff7abd142c   332  bl #+0xc (addr 0xffff7abd1438)
0xffff7abd1430   336  movz x16, #0x10
0xffff7abd1434   340  bl #+0x14 (addr 0xffff7abd1448)
0xffff7abd1438   344  movz x17, #0xa00000000
0xffff7abd143c   348  sub csp, jssp, #0x10 (16)
0xffff7abd1440   352  stp x17, cp, [jssp, #-16]!
0xffff7abd1444   356  add fp, jssp, #0x10 (16)
0xffff7abd1448   360  ldr x17, pc+24 (addr 0x0000ffff7abd1460)    ;; lazy deoptimization bailout 0
0xffff7abd144c   364  add x17, x17, x16
0xffff7abd1450   368  br x17
0xffff7abd1454   372  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd1458   376  d63f03e0       constant
0xffff7abd145c   380  d503201f       constant
0xffff7abd1460   384  7a906000       constant
0xffff7abd1464   388  0000ffff       constant


Safepoints (size = 21)
0xffff7abd13d4   244  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7abd13b4  code target (STUB)  (0xffff7ab06820)
0xffff7abd13cc  code target (STUB)  (0xffff7ab06260)
0xffff7abd13d8  code target (STUB)  (0xffff7ab068e0)
0xffff7abd13ec  constant pool (size 36)
0xffff7abd1448  runtime entry
0xffff7abd1454  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = LoadFastElementStub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 413)
0xffff7abd12e0     0  ldur x4, [x1, #15]
0xffff7abd12e4     4  ldur w5, [x4, #11]
0xffff7abd12e8     8  ldur x16, [x1, #23]
0xffff7abd12ec    12  ldur x16, [x16, #39]
0xffff7abd12f0    16  tst x16, #0x8
0xffff7abd12f4    20  b.ne #+0x11c (addr 0xffff7abd1410)
0xffff7abd12f8    24  ldur x6, [x4, #23]
0xffff7abd12fc    28  ldur x4, [x4, #15]
0xffff7abd1300    32  add x4, x6, x4
0xffff7abd1304    36  tbnz w2, #0, #+0x48 (addr 0xffff7abd134c)
0xffff7abd1308    40  asr x7, x2, #32
0xffff7abd130c    44  cmp w7, w5
0xffff7abd1310    48  b.hs #+0x110 (addr 0xffff7abd1420)
0xffff7abd1314    52  ldr d0, [x4, w7, sxtw #3]
0xffff7abd1318    56  movz x1, #0xe2c0
0xffff7abd131c    60  movk x1, #0x9ab, lsl #16
0xffff7abd1320    64  ldp x2, x0, [x1]
0xffff7abd1324    68  adds x16, x2, #0x10 (16)
0xffff7abd1328    72  ccmp x16, x0, #nzCv, lo
0xffff7abd132c    76  b.hi #+0x68 (addr 0xffff7abd1394)
0xffff7abd1330    80  str x16, [x1]
0xffff7abd1334    84  ldr x1, [x26, #120]
0xffff7abd1338    88  str x1, [x2]
0xffff7abd133c    92  orr x2, x2, #0x1
0xffff7abd1340    96  stur d0, [x2, #7]
0xffff7abd1344   100  mov x0, x2
0xffff7abd1348   104  ret
0xffff7abd134c   108  sub csp, jssp, #0x10 (16)
0xffff7abd1350   112  stp fp, lr, [jssp, #-16]!
0xffff7abd1354   116  movz fp, #0xa00000000
0xffff7abd1358   120  sub csp, jssp, #0x8 (8)
0xffff7abd135c   124  str fp, [jssp, #-8]!
0xffff7abd1360   128  add fp, jssp, #0x8 (8)
0xffff7abd1364   132  ldur x16, [x2, #-1]
0xffff7abd1368   136  ldr x17, [x26, #120]
0xffff7abd136c   140  cmp x16, x17
0xffff7abd1370   144  b.ne #+0xc0 (addr 0xffff7abd1430)
0xffff7abd1374   148  ldur d29, [x2, #7]
0xffff7abd1378   152  fcvtzs w7, d29
0xffff7abd137c   156  scvtf d0, w7
0xffff7abd1380   160  fcmp d29, d0
0xffff7abd1384   164  b.ne #+0xac (addr 0xffff7abd1430)
0xffff7abd1388   168  ldr lr, [jssp, #16]
0xffff7abd138c   172  ldp xzr, fp, [jssp], #24
0xffff7abd1390   176  b #-0x84 (addr 0xffff7abd130c)
0xffff7abd1394   180  sub csp, jssp, #0x10 (16)
0xffff7abd1398   184  stp fp, lr, [jssp, #-16]!
0xffff7abd139c   188  movz fp, #0xa00000000
0xffff7abd13a0   192  sub csp, jssp, #0x8 (8)
0xffff7abd13a4   196  str fp, [jssp, #-8]!
0xffff7abd13a8   200  add fp, jssp, #0x8 (8)
0xffff7abd13ac   204  movz x2, #0x0
0xffff7abd13b0   208  mov x16, lr
0xffff7abd13b4   212  ldr x17, pc+68 (addr 0x0000ffff7abd13f8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abd13b8   216  blr x17
0xffff7abd13bc   220  ldur cp, [fp, #-8]
0xffff7abd13c0   224  movz x0, #0x0
0xffff7abd13c4   228  movz x1, #0x4b48
0xffff7abd13c8   232  movk x1, #0xe4, lsl #16
0xffff7abd13cc   236  ldr x16, pc+52 (addr 0x0000ffff7abd1400)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abd13d0   240  blr x16
0xffff7abd13d4   244  str x0, [jssp, #16]
0xffff7abd13d8   248  ldr x16, pc+48 (addr 0x0000ffff7abd1408)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abd13dc   252  blr x16
0xffff7abd13e0   256  ldr lr, [jssp, #16]
0xffff7abd13e4   260  ldp xzr, fp, [jssp], #24
0xffff7abd13e8   264  b #-0xa8 (addr 0xffff7abd1340)
0xffff7abd13ec   268  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7abd13f0   272  d63f03e0       constant
0xffff7abd13f4   276  d503201f       constant
0xffff7abd13f8   280  7ab06820       constant
0xffff7abd13fc   284  0000ffff       constant
0xffff7abd1400   288  7ab06260       constant
0xffff7abd1404   292  0000ffff       constant
0xffff7abd1408   296  7ab068e0       constant
0xffff7abd140c   300  0000ffff       constant
0xffff7abd1410   304  movz x16, #0x0
0xffff7abd1414   308  sub csp, jssp, #0x10 (16)
0xffff7abd1418   312  stp fp, lr, [jssp, #-16]!
0xffff7abd141c   316  bl #+0x1c (addr 0xffff7abd1438)
0xffff7abd1420   320  movz x16, #0x8
0xffff7abd1424   324  sub csp, jssp, #0x10 (16)
0xffff7abd1428   328  stp fp, lr, [jssp, #-16]!
0xffff7abd142c   332  bl #+0xc (addr 0xffff7abd1438)
0xffff7abd1430   336  movz x16, #0x10
0xffff7abd1434   340  bl #+0x14 (addr 0xffff7abd1448)
0xffff7abd1438   344  movz x17, #0xa00000000
0xffff7abd143c   348  sub csp, jssp, #0x10 (16)
0xffff7abd1440   352  stp x17, cp, [jssp, #-16]!
0xffff7abd1444   356  add fp, jssp, #0x10 (16)
0xffff7abd1448   360  ldr x17, pc+24 (addr 0x0000ffff7abd1460)    ;; lazy deoptimization bailout 0
0xffff7abd144c   364  add x17, x17, x16
0xffff7abd1450   368  br x17
0xffff7abd1454   372  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd1458   376  d63f03e0       constant
0xffff7abd145c   380  d503201f       constant
0xffff7abd1460   384  7a906000       constant
0xffff7abd1464   388  0000ffff       constant


Safepoints (size = 21)
0xffff7abd13d4   244  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7abd13b4  code target (STUB)  (0xffff7ab06820)
0xffff7abd13cc  code target (STUB)  (0xffff7ab06260)
0xffff7abd13d8  code target (STUB)  (0xffff7ab068e0)
0xffff7abd13ec  constant pool (size 36)
0xffff7abd1448  runtime entry
0xffff7abd1454  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = Date
compiler = unknown
Instructions (size = 120)
0xffff7abd1a60     0  sub csp, jssp, #0x8 (8)
0xffff7abd1a64     4  str x3, [jssp, #-8]!
0xffff7abd1a68     8  sub csp, jssp, #0x8 (8)
0xffff7abd1a6c    12  str x0, [jssp, #-8]!
0xffff7abd1a70    16  ldr x0, pc+80 (addr 0x0000ffff7abd1ac0)    ;; object: 0x20dc5d51 Cell for 0
0xffff7abd1a74    20  ldur x0, [x0, #7]
0xffff7abd1a78    24  cmp x0, #0x0 (0)
0xffff7abd1a7c    28  b.ne #+0x2c (addr 0xffff7abd1aa8)
0xffff7abd1a80    32  ldr x0, pc+72 (addr 0x0000ffff7abd1ac8)    ;; object: 0x5d434939 WeakCell for 0x20d42ca1 PropertyCell for 0x20d42c39 <JS Function Date (SharedFunctionInfo 0x20d42b91)>
0xffff7abd1a84    36  ldur x0, [x0, #7]
0xffff7abd1a88    40  tbz w0, #0, #+0x20 (addr 0xffff7abd1aa8)
0xffff7abd1a8c    44  ldur x0, [x0, #15]
0xffff7abd1a90    48  ldr x16, [x26, #88]
0xffff7abd1a94    52  cmp x0, x16
0xffff7abd1a98    56  b.eq #+0x10 (addr 0xffff7abd1aa8)
0xffff7abd1a9c    60  add jssp, jssp, #0x10 (16)
0xffff7abd1aa0    64  ret
0xffff7abd1aa4    68  b #+0x14 (addr 0xffff7abd1ab8)
0xffff7abd1aa8    72  ldr x0, [jssp], #8
0xffff7abd1aac    76  ldr x3, [jssp], #8
0xffff7abd1ab0    80  ldr x16, pc+32 (addr 0x0000ffff7abd1ad0)    ;; code: BUILTIN
0xffff7abd1ab4    84  br x16
0xffff7abd1ab8    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7abd1abc    92  d63f03e0       constant
0xffff7abd1ac0    96  20dc5d51       constant
0xffff7abd1ac4   100  00000000       constant
0xffff7abd1ac8   104  5d434939       constant
0xffff7abd1acc   108  00000000       constant
0xffff7abd1ad0   112  7ab222e0       constant
0xffff7abd1ad4   116  0000ffff       constant


RelocInfo (size = 9)
0xffff7abd1a70  embedded object  (0x20dc5d51 Cell for 0)
0xffff7abd1a80  embedded object  (0x5d434939 WeakCell for 0x20d42ca1 PropertyCell for 0x20d42c39 <JS Function Date (SharedFunctionInfo 0x20d42b91)>)
0xffff7abd1ab0  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abd1ab8  constant pool (size 32)

kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = STRING*SMI -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 632)
0xffff7abd2a40     0  tbnz w0, #0, #+0x1d4 (addr 0xffff7abd2c14)
0xffff7abd2a44     4  orr x16, x1, x0
0xffff7abd2a48     8  tbnz w16, #0, #+0x10 (addr 0xffff7abd2a58)
0xffff7abd2a4c    12  asr x1, x1, #32
0xffff7abd2a50    16  sub x0, x1, x0, asr #32
0xffff7abd2a54    20  ret
0xffff7abd2a58    24  cmp x0, x1
0xffff7abd2a5c    28  b.ne #+0x30 (addr 0xffff7abd2a8c)
0xffff7abd2a60    32  ldur x16, [x0, #-1]
0xffff7abd2a64    36  ldr x17, [x26, #120]
0xffff7abd2a68    40  cmp x16, x17
0xffff7abd2a6c    44  b.eq #+0xc (addr 0xffff7abd2a78)
0xffff7abd2a70    48  movz x0, #0x0
0xffff7abd2a74    52  ret
0xffff7abd2a78    56  ldur d0, [x0, #7]
0xffff7abd2a7c    60  fcmp d0, d0
0xffff7abd2a80    64  b.vc #-0x10 (addr 0xffff7abd2a70)
0xffff7abd2a84    68  movn x0, #0x0
0xffff7abd2a88    72  ret
0xffff7abd2a8c    76  and x16, x1, x0
0xffff7abd2a90    80  tbnz w16, #0, #+0x64 (addr 0xffff7abd2af4)
0xffff7abd2a94    84  tbz w0, #0, #+0x24 (addr 0xffff7abd2ab8)
0xffff7abd2a98    88  ldur x16, [x0, #-1]
0xffff7abd2a9c    92  ldr x17, [x26, #120]
0xffff7abd2aa0    96  cmp x16, x17
0xffff7abd2aa4   100  b.eq #+0x8 (addr 0xffff7abd2aac)
0xffff7abd2aa8   104  ret
0xffff7abd2aac   108  ldur d0, [x0, #7]
0xffff7abd2ab0   112  scvtf d1, x1, #32
0xffff7abd2ab4   116  b #+0x24 (addr 0xffff7abd2ad8)
0xffff7abd2ab8   120  ldur x16, [x1, #-1]
0xffff7abd2abc   124  ldr x17, [x26, #120]
0xffff7abd2ac0   128  cmp x16, x17
0xffff7abd2ac4   132  b.eq #+0xc (addr 0xffff7abd2ad0)
0xffff7abd2ac8   136  movz x0, #0x1
0xffff7abd2acc   140  ret
0xffff7abd2ad0   144  ldur d1, [x1, #7]
0xffff7abd2ad4   148  scvtf d0, x0, #32
0xffff7abd2ad8   152  fcmp d1, d0
0xffff7abd2adc   156  b.vs #+0x10 (addr 0xffff7abd2aec)
0xffff7abd2ae0   160  cset x0, gt
0xffff7abd2ae4   164  csinv x0, x0, xzr, ge
0xffff7abd2ae8   168  ret
0xffff7abd2aec   172  movn x0, #0x0
0xffff7abd2af0   176  ret
0xffff7abd2af4   180  ldur x10, [x0, #-1]
0xffff7abd2af8   184  ldur x12, [x1, #-1]
0xffff7abd2afc   188  ldrb w11, [x10, #11]
0xffff7abd2b00   192  ldrb w13, [x12, #11]
0xffff7abd2b04   196  cmp x11, #0xb1 (177)
0xffff7abd2b08   200  b.lt #+0x8 (addr 0xffff7abd2b10)
0xffff7abd2b0c   204  ret
0xffff7abd2b10   208  cmp x11, #0x83 (131)
0xffff7abd2b14   212  movz x16, #0x83
0xffff7abd2b18   216  ccmp x13, x16, #nZcv, ne
0xffff7abd2b1c   220  movz x16, #0xb1
0xffff7abd2b20   224  ccmp x13, x16, #NzcV, ne
0xffff7abd2b24   228  b.ge #-0x18 (addr 0xffff7abd2b0c)
0xffff7abd2b28   232  orr x14, x13, x11
0xffff7abd2b2c   236  tst x14, #0xc0
0xffff7abd2b30   240  b.eq #-0x24 (addr 0xffff7abd2b0c)
0xffff7abd2b34   244  cmp x11, #0x81 (129)
0xffff7abd2b38   248  b.ne #+0x18 (addr 0xffff7abd2b50)
0xffff7abd2b3c   252  cmp x12, x10
0xffff7abd2b40   256  b.ne #+0x10 (addr 0xffff7abd2b50)
0xffff7abd2b44   260  ldur d1, [x1, #7]
0xffff7abd2b48   264  ldur d0, [x0, #7]
0xffff7abd2b4c   268  b #-0x74 (addr 0xffff7abd2ad8)
0xffff7abd2b50   272  movz x16, #0x87
0xffff7abd2b54   276  and x14, x13, x16
0xffff7abd2b58   280  movz x16, #0x87
0xffff7abd2b5c   284  and x15, x11, x16
0xffff7abd2b60   288  cmp x14, #0x4 (4)
0xffff7abd2b64   292  ccmp x15, #4, #nzcv, eq
0xffff7abd2b68   296  b.ne #+0x5c (addr 0xffff7abd2bc4)
0xffff7abd2b6c   300  ldur x10, [x1, #15]
0xffff7abd2b70   304  ldur x11, [x0, #15]
0xffff7abd2b74   308  cmp x10, x11
0xffff7abd2b78   312  b.eq #+0xc (addr 0xffff7abd2b84)
0xffff7abd2b7c   316  movz x0, #0x100000000
0xffff7abd2b80   320  ret
0xffff7abd2b84   324  cbnz x10, #+0xc (addr 0xffff7abd2b90)
0xffff7abd2b88   328  movz x0, #0x0
0xffff7abd2b8c   332  ret
0xffff7abd2b90   336  asr x10, x10, #32
0xffff7abd2b94   340  add x11, x10, #0x17 (23)
0xffff7abd2b98   344  add x1, x1, x11
0xffff7abd2b9c   348  add x0, x0, x11
0xffff7abd2ba0   352  neg x10, x10
0xffff7abd2ba4   356  ldrb w11, [x1, x10]
0xffff7abd2ba8   360  ldrb w12, [x0, x10]
0xffff7abd2bac   364  cmp x11, x12
0xffff7abd2bb0   368  b.ne #-0x34 (addr 0xffff7abd2b7c)
0xffff7abd2bb4   372  add x10, x10, #0x1 (1)
0xffff7abd2bb8   376  cbnz x10, #-0x14 (addr 0xffff7abd2ba4)
0xffff7abd2bbc   380  movz x0, #0x0
0xffff7abd2bc0   384  ret
0xffff7abd2bc4   388  movz x16, #0xc00000000
0xffff7abd2bc8   392  sub csp, jssp, #0x10 (16)
0xffff7abd2bcc   396  stp fp, lr, [jssp, #-16]!
0xffff7abd2bd0   400  sub csp, jssp, #0x10 (16)
0xffff7abd2bd4   404  str x16, [jssp, #-8]!
0xffff7abd2bd8   408  ldr x17, pc+176 (addr 0x0000ffff7abd2c88)    ;; object: 0xffff7abd29e1 <Code: COMPARE_IC>
0xffff7abd2bdc   412  sub csp, jssp, #0x10 (16)
0xffff7abd2be0   416  str x17, [jssp, #-8]!
0xffff7abd2be4   420  add fp, jssp, #0x10 (16)
0xffff7abd2be8   424  sub csp, jssp, #0x10 (16)
0xffff7abd2bec   428  stp x0, x1, [jssp, #-16]!
0xffff7abd2bf0   432  movz x0, #0x2
0xffff7abd2bf4   436  ldr x1, pc+156 (addr 0x0000ffff7abd2c90)    ;; external reference (Runtime::StrictEqual)
0xffff7abd2bf8   440  ldr x16, pc+160 (addr 0x0000ffff7abd2c98)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abd2bfc   444  blr x16
0xffff7abd2c00   448  mov jssp, fp
0xffff7abd2c04   452  ldp fp, lr, [jssp], #16
0xffff7abd2c08   456  ldr x1, [x26, #64]
0xffff7abd2c0c   460  sub x0, x0, x1
0xffff7abd2c10   464  ret
0xffff7abd2c14   468  movz x16, #0xc00000000
0xffff7abd2c18   472  sub csp, jssp, #0x10 (16)
0xffff7abd2c1c   476  stp fp, lr, [jssp, #-16]!
0xffff7abd2c20   480  sub csp, jssp, #0x10 (16)
0xffff7abd2c24   484  str x16, [jssp, #-8]!
0xffff7abd2c28   488  ldr x17, pc+120 (addr 0x0000ffff7abd2ca0)    ;; object: 0xffff7abd29e1 <Code: COMPARE_IC>
0xffff7abd2c2c   492  sub csp, jssp, #0x10 (16)
0xffff7abd2c30   496  str x17, [jssp, #-8]!
0xffff7abd2c34   500  add fp, jssp, #0x10 (16)
0xffff7abd2c38   504  sub csp, jssp, #0x18 (24)
0xffff7abd2c3c   508  stp lr, x0, [jssp, #-24]!
0xffff7abd2c40   512  str x1, [jssp, #16]
0xffff7abd2c44   516  movz x10, #0x2f00000000
0xffff7abd2c48   520  sub csp, jssp, #0x18 (24)
0xffff7abd2c4c   524  stp x10, x0, [jssp, #-24]!
0xffff7abd2c50   528  str x1, [jssp, #16]
0xffff7abd2c54   532  movz x0, #0x3
0xffff7abd2c58   536  ldr x1, pc+80 (addr 0x0000ffff7abd2ca8)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7abd2c5c   540  ldr x16, pc+84 (addr 0x0000ffff7abd2cb0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abd2c60   544  blr x16
0xffff7abd2c64   548  add x11, x0, #0x5f (95)
0xffff7abd2c68   552  ldr x1, [jssp, #16]
0xffff7abd2c6c   556  ldp lr, x0, [jssp], #24
0xffff7abd2c70   560  mov jssp, fp
0xffff7abd2c74   564  ldp fp, lr, [jssp], #16
0xffff7abd2c78   568  br x11
0xffff7abd2c7c   572  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abd2c80   576  d63f03e0       constant
0xffff7abd2c84   580  d503201f       constant
0xffff7abd2c88   584  7abd29e1       constant
0xffff7abd2c8c   588  0000ffff       constant
0xffff7abd2c90   592  00e50928       constant
0xffff7abd2c94   596  00000000       constant
0xffff7abd2c98   600  7ab06060       constant
0xffff7abd2c9c   604  0000ffff       constant
0xffff7abd2ca0   608  7abd29e1       constant
0xffff7abd2ca4   612  0000ffff       constant
0xffff7abd2ca8   616  00c8a980       constant
0xffff7abd2cac   620  00000000       constant
0xffff7abd2cb0   624  7ab06060       constant
0xffff7abd2cb4   628  0000ffff       constant


RelocInfo (size = 16)
0xffff7abd2bd8  embedded object  (0xffff7abd29e1 <Code: COMPARE_IC>)
0xffff7abd2bf4  external reference (Runtime::StrictEqual)  (0xe50928)
0xffff7abd2bf8  code target (STUB)  (0xffff7ab06060)
0xffff7abd2c28  embedded object  (0xffff7abd29e1 <Code: COMPARE_IC>)
0xffff7abd2c58  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7abd2c5c  code target (STUB)  (0xffff7ab06060)
0xffff7abd2c7c  constant pool (size 60)


kind = HANDLER
major_key = <NoCache>Stub
name = get
compiler = unknown
Instructions (size = 120)
0xffff7abd2fa0     0  sub csp, jssp, #0x8 (8)
0xffff7abd2fa4     4  str x3, [jssp, #-8]!
0xffff7abd2fa8     8  sub csp, jssp, #0x8 (8)
0xffff7abd2fac    12  str x0, [jssp, #-8]!
0xffff7abd2fb0    16  ldr x0, pc+72 (addr 0x0000ffff7abd2ff8)    ;; object: 0x5d435189 Cell for 0
0xffff7abd2fb4    20  ldur x0, [x0, #7]
0xffff7abd2fb8    24  cmp x0, #0x0 (0)
0xffff7abd2fbc    28  b.ne #+0x14 (addr 0xffff7abd2fd0)
0xffff7abd2fc0    32  ldr x3, pc+64 (addr 0x0000ffff7abd3000)    ;; object: 0x5d435199 WeakCell for 0x2ae757c1 <an Object with map 0x4ec11eb1>
0xffff7abd2fc4    36  ldur x3, [x3, #7]
0xffff7abd2fc8    40  tbz w3, #0, #+0x8 (addr 0xffff7abd2fd0)
0xffff7abd2fcc    44  b #+0x14 (addr 0xffff7abd2fe0)
0xffff7abd2fd0    48  ldr x0, [jssp], #8
0xffff7abd2fd4    52  ldr x3, [jssp], #8
0xffff7abd2fd8    56  ldr x16, pc+48 (addr 0x0000ffff7abd3008)    ;; code: BUILTIN
0xffff7abd2fdc    60  br x16
0xffff7abd2fe0    64  add jssp, jssp, #0x10 (16)
0xffff7abd2fe4    68  mov x1, x3
0xffff7abd2fe8    72  ldr x16, pc+40 (addr 0x0000ffff7abd3010)    ;; code: HANDLER, LoadConstantStub, minor: 3
0xffff7abd2fec    76  br x16
0xffff7abd2ff0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abd2ff4    84  d63f03e0       constant
0xffff7abd2ff8    88  5d435189       constant
0xffff7abd2ffc    92  00000000       constant
0xffff7abd3000    96  5d435199       constant
0xffff7abd3004   100  00000000       constant
0xffff7abd3008   104  7ab222e0       constant
0xffff7abd300c   108  0000ffff       constant
0xffff7abd3010   112  7ab43400       constant
0xffff7abd3014   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abd2fb0  embedded object  (0x5d435189 Cell for 0)
0xffff7abd2fc0  embedded object  (0x5d435199 WeakCell for 0x2ae757c1 <an Object with map 0x4ec11eb1>)
0xffff7abd2fd8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abd2fe8  code target (HANDLER)  (0xffff7ab43400)
0xffff7abd2ff0  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7abd3080     0  ldur x0, [x1, #-1]
0xffff7abd3084     4  ldur x0, [x0, #47]
0xffff7abd3088     8  movz x16, #0x197
0xffff7abd308c    12  ldr x0, [x0, x16]
0xffff7abd3090    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7abd3080     0  ldur x0, [x1, #-1]
0xffff7abd3084     4  ldur x0, [x0, #47]
0xffff7abd3088     8  movz x16, #0x197
0xffff7abd308c    12  ldr x0, [x0, x16]
0xffff7abd3090    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0xffff7abd3100     0  ldur x0, [x1, #63]
0xffff7abd3104     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0xffff7abd3100     0  ldur x0, [x1, #63]
0xffff7abd3104     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*GENERIC -> GENERIC
compare_operation = LT
name = CompareICStub
compiler = unknown
Instructions (size = 512)
0xffff7abd3180     0  orr x16, x1, x0
0xffff7abd3184     4  tbnz w16, #0, #+0x10 (addr 0xffff7abd3194)
0xffff7abd3188     8  asr x1, x1, #32
0xffff7abd318c    12  sub x0, x1, x0, asr #32
0xffff7abd3190    16  ret
0xffff7abd3194    20  cmp x0, x1
0xffff7abd3198    24  b.ne #+0x2c (addr 0xffff7abd31c4)
0xffff7abd319c    28  ldur x10, [x0, #-1]
0xffff7abd31a0    32  ldrb w10, [x10, #11]
0xffff7abd31a4    36  cmp x10, #0xb1 (177)
0xffff7abd31a8    40  b.ge #+0x118 (addr 0xffff7abd32c0)
0xffff7abd31ac    44  cmp x10, #0x80 (128)
0xffff7abd31b0    48  b.eq #+0x110 (addr 0xffff7abd32c0)
0xffff7abd31b4    52  cmp x10, #0x82 (130)
0xffff7abd31b8    56  b.eq #+0x108 (addr 0xffff7abd32c0)
0xffff7abd31bc    60  movz x0, #0x1
0xffff7abd31c0    64  ret
0xffff7abd31c4    68  and x16, x1, x0
0xffff7abd31c8    72  tbnz w16, #0, #+0x58 (addr 0xffff7abd3220)
0xffff7abd31cc    76  tbz w0, #0, #+0x20 (addr 0xffff7abd31ec)
0xffff7abd31d0    80  ldur x16, [x0, #-1]
0xffff7abd31d4    84  ldr x17, [x26, #120]
0xffff7abd31d8    88  cmp x16, x17
0xffff7abd31dc    92  b.ne #+0xe4 (addr 0xffff7abd32c0)
0xffff7abd31e0    96  ldur d0, [x0, #7]
0xffff7abd31e4   100  scvtf d1, x1, #32
0xffff7abd31e8   104  b #+0x1c (addr 0xffff7abd3204)
0xffff7abd31ec   108  ldur x16, [x1, #-1]
0xffff7abd31f0   112  ldr x17, [x26, #120]
0xffff7abd31f4   116  cmp x16, x17
0xffff7abd31f8   120  b.ne #+0xc8 (addr 0xffff7abd32c0)
0xffff7abd31fc   124  ldur d1, [x1, #7]
0xffff7abd3200   128  scvtf d0, x0, #32
0xffff7abd3204   132  fcmp d1, d0
0xffff7abd3208   136  b.vs #+0x10 (addr 0xffff7abd3218)
0xffff7abd320c   140  cset x0, gt
0xffff7abd3210   144  csinv x0, x0, xzr, ge
0xffff7abd3214   148  ret
0xffff7abd3218   152  movz x0, #0x1
0xffff7abd321c   156  ret
0xffff7abd3220   160  ldur x10, [x0, #-1]
0xffff7abd3224   164  ldur x12, [x1, #-1]
0xffff7abd3228   168  ldrb w11, [x10, #11]
0xffff7abd322c   172  ldrb w13, [x12, #11]
0xffff7abd3230   176  cmp x11, #0x81 (129)
0xffff7abd3234   180  b.ne #+0x18 (addr 0xffff7abd324c)
0xffff7abd3238   184  cmp x12, x10
0xffff7abd323c   188  b.ne #+0x10 (addr 0xffff7abd324c)
0xffff7abd3240   192  ldur d1, [x1, #7]
0xffff7abd3244   196  ldur d0, [x0, #7]
0xffff7abd3248   200  b #-0x44 (addr 0xffff7abd3204)
0xffff7abd324c   204  movz x16, #0x87
0xffff7abd3250   208  and x14, x13, x16
0xffff7abd3254   212  movz x16, #0x87
0xffff7abd3258   216  and x15, x11, x16
0xffff7abd325c   220  cmp x14, #0x4 (4)
0xffff7abd3260   224  ccmp x15, #4, #nzcv, eq
0xffff7abd3264   228  b.ne #+0x5c (addr 0xffff7abd32c0)
0xffff7abd3268   232  ldur x10, [x1, #15]
0xffff7abd326c   236  ldur x11, [x0, #15]
0xffff7abd3270   240  subs x12, x10, x11
0xffff7abd3274   244  csel x10, x11, x10, gt
0xffff7abd3278   248  cbz x10, #+0x30 (addr 0xffff7abd32a8)
0xffff7abd327c   252  asr x10, x10, #32
0xffff7abd3280   256  add x11, x10, #0x17 (23)
0xffff7abd3284   260  add x1, x1, x11
0xffff7abd3288   264  add x0, x0, x11
0xffff7abd328c   268  neg x10, x10
0xffff7abd3290   272  ldrb w11, [x1, x10]
0xffff7abd3294   276  ldrb w13, [x0, x10]
0xffff7abd3298   280  cmp x11, x13
0xffff7abd329c   284  b.ne #+0x10 (addr 0xffff7abd32ac)
0xffff7abd32a0   288  add x10, x10, #0x1 (1)
0xffff7abd32a4   292  cbnz x10, #-0x14 (addr 0xffff7abd3290)
0xffff7abd32a8   296  subs x0, x12, #0x0 (0)
0xffff7abd32ac   300  movz x10, #0x100000000
0xffff7abd32b0   304  mov x11, #0xffffffff00000000
0xffff7abd32b4   308  csel x0, x10, x0, gt
0xffff7abd32b8   312  csel x0, x11, x0, lt
0xffff7abd32bc   316  ret
0xffff7abd32c0   320  sub csp, jssp, #0x10 (16)
0xffff7abd32c4   324  stp x0, x1, [jssp, #-16]!
0xffff7abd32c8   328  movz x10, #0x100000000
0xffff7abd32cc   332  sub csp, jssp, #0x8 (8)
0xffff7abd32d0   336  str x10, [jssp, #-8]!
0xffff7abd32d4   340  movz x0, #0x3
0xffff7abd32d8   344  ldr x1, pc+128 (addr 0x0000ffff7abd3358)    ;; external reference (Runtime::Compare)
0xffff7abd32dc   348  ldr x16, pc+132 (addr 0x0000ffff7abd3360)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abd32e0   352  br x16
0xffff7abd32e4   356  movz x16, #0xc00000000
0xffff7abd32e8   360  sub csp, jssp, #0x10 (16)
0xffff7abd32ec   364  stp fp, lr, [jssp, #-16]!
0xffff7abd32f0   368  sub csp, jssp, #0x10 (16)
0xffff7abd32f4   372  str x16, [jssp, #-8]!
0xffff7abd32f8   376  ldr x17, pc+112 (addr 0x0000ffff7abd3368)    ;; object: 0xffff7abd3121 <Code: COMPARE_IC>
0xffff7abd32fc   380  sub csp, jssp, #0x10 (16)
0xffff7abd3300   384  str x17, [jssp, #-8]!
0xffff7abd3304   388  add fp, jssp, #0x10 (16)
0xffff7abd3308   392  sub csp, jssp, #0x18 (24)
0xffff7abd330c   396  stp lr, x0, [jssp, #-24]!
0xffff7abd3310   400  str x1, [jssp, #16]
0xffff7abd3314   404  movz x10, #0x3100000000
0xffff7abd3318   408  sub csp, jssp, #0x18 (24)
0xffff7abd331c   412  stp x10, x0, [jssp, #-24]!
0xffff7abd3320   416  str x1, [jssp, #16]
0xffff7abd3324   420  movz x0, #0x3
0xffff7abd3328   424  ldr x1, pc+72 (addr 0x0000ffff7abd3370)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7abd332c   428  ldr x16, pc+76 (addr 0x0000ffff7abd3378)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abd3330   432  blr x16
0xffff7abd3334   436  add x11, x0, #0x5f (95)
0xffff7abd3338   440  ldr x1, [jssp, #16]
0xffff7abd333c   444  ldp lr, x0, [jssp], #24
0xffff7abd3340   448  mov jssp, fp
0xffff7abd3344   452  ldp fp, lr, [jssp], #16
0xffff7abd3348   456  br x11
0xffff7abd334c   460  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0xffff7abd3350   464  d63f03e0       constant
0xffff7abd3354   468  d503201f       constant
0xffff7abd3358   472  00e49ea8       constant
0xffff7abd335c   476  00000000       constant
0xffff7abd3360   480  7ab06060       constant
0xffff7abd3364   484  0000ffff       constant
0xffff7abd3368   488  7abd3121       constant
0xffff7abd336c   492  0000ffff       constant
0xffff7abd3370   496  00c8a980       constant
0xffff7abd3374   500  00000000       constant
0xffff7abd3378   504  7ab06060       constant
0xffff7abd337c   508  0000ffff       constant


RelocInfo (size = 15)
0xffff7abd32d8  external reference (Runtime::Compare)  (0xe49ea8)
0xffff7abd32dc  code target (STUB)  (0xffff7ab06060)
0xffff7abd32f8  embedded object  (0xffff7abd3121 <Code: COMPARE_IC>)
0xffff7abd3328  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7abd332c  code target (STUB)  (0xffff7ab06060)
0xffff7abd334c  constant pool (size 52)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = NUMBER*SMI -> NUMBER
compare_operation = LT
name = CompareICStub
compiler = unknown
Instructions (size = 280)
0xffff7abd33e0     0  tbnz w0, #0, #+0x88 (addr 0xffff7abd3468)
0xffff7abd33e4     4  scvtf d0, x0, #32
0xffff7abd33e8     8  scvtf d1, x1, #32
0xffff7abd33ec    12  tbz w0, #0, #+0x18 (addr 0xffff7abd3404)
0xffff7abd33f0    16  ldur x16, [x0, #-1]
0xffff7abd33f4    20  ldr x17, [x26, #120]
0xffff7abd33f8    24  cmp x16, x17
0xffff7abd33fc    28  b.ne #+0x3c (addr 0xffff7abd3438)
0xffff7abd3400    32  ldur d0, [x0, #7]
0xffff7abd3404    36  tbz w1, #0, #+0x18 (addr 0xffff7abd341c)
0xffff7abd3408    40  ldur x16, [x1, #-1]
0xffff7abd340c    44  ldr x17, [x26, #120]
0xffff7abd3410    48  cmp x16, x17
0xffff7abd3414    52  b.ne #+0x48 (addr 0xffff7abd345c)
0xffff7abd3418    56  ldur d1, [x1, #7]
0xffff7abd341c    60  fcmp d1, d0
0xffff7abd3420    64  b.vs #+0x10 (addr 0xffff7abd3430)
0xffff7abd3424    68  cset x0, gt
0xffff7abd3428    72  csinv x0, x0, xzr, ge
0xffff7abd342c    76  ret
0xffff7abd3430    80  ldr x16, pc+168 (addr 0x0000ffff7abd34d8)    ;; code: COMPARE_IC, GENERIC
0xffff7abd3434    84  br x16
0xffff7abd3438    88  ldr x16, [x26, #40]
0xffff7abd343c    92  cmp x0, x16
0xffff7abd3440    96  b.ne #+0x28 (addr 0xffff7abd3468)
0xffff7abd3444   100  tbz w1, #0, #-0x14 (addr 0xffff7abd3430)
0xffff7abd3448   104  ldur x16, [x1, #-1]
0xffff7abd344c   108  ldr x17, [x26, #120]
0xffff7abd3450   112  cmp x16, x17
0xffff7abd3454   116  b.ne #+0x8 (addr 0xffff7abd345c)
0xffff7abd3458   120  b #-0x28 (addr 0xffff7abd3430)
0xffff7abd345c   124  ldr x16, [x26, #40]
0xffff7abd3460   128  cmp x1, x16
0xffff7abd3464   132  b.eq #-0x34 (addr 0xffff7abd3430)
0xffff7abd3468   136  movz x16, #0xc00000000
0xffff7abd346c   140  sub csp, jssp, #0x10 (16)
0xffff7abd3470   144  stp fp, lr, [jssp, #-16]!
0xffff7abd3474   148  sub csp, jssp, #0x10 (16)
0xffff7abd3478   152  str x16, [jssp, #-8]!
0xffff7abd347c   156  ldr x17, pc+100 (addr 0x0000ffff7abd34e0)    ;; object: 0xffff7abd3381 <Code: COMPARE_IC>
0xffff7abd3480   160  sub csp, jssp, #0x10 (16)
0xffff7abd3484   164  str x17, [jssp, #-8]!
0xffff7abd3488   168  add fp, jssp, #0x10 (16)
0xffff7abd348c   172  sub csp, jssp, #0x18 (24)
0xffff7abd3490   176  stp lr, x0, [jssp, #-24]!
0xffff7abd3494   180  str x1, [jssp, #16]
0xffff7abd3498   184  movz x10, #0x3100000000
0xffff7abd349c   188  sub csp, jssp, #0x18 (24)
0xffff7abd34a0   192  stp x10, x0, [jssp, #-24]!
0xffff7abd34a4   196  str x1, [jssp, #16]
0xffff7abd34a8   200  movz x0, #0x3
0xffff7abd34ac   204  ldr x1, pc+60 (addr 0x0000ffff7abd34e8)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7abd34b0   208  ldr x16, pc+64 (addr 0x0000ffff7abd34f0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abd34b4   212  blr x16
0xffff7abd34b8   216  add x11, x0, #0x5f (95)
0xffff7abd34bc   220  ldr x1, [jssp, #16]
0xffff7abd34c0   224  ldp lr, x0, [jssp], #24
0xffff7abd34c4   228  mov jssp, fp
0xffff7abd34c8   232  ldp fp, lr, [jssp], #16
0xffff7abd34cc   236  br x11
0xffff7abd34d0   240  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abd34d4   244  d63f03e0       constant
0xffff7abd34d8   248  7abd3180       constant
0xffff7abd34dc   252  0000ffff       constant
0xffff7abd34e0   256  7abd3381       constant
0xffff7abd34e4   260  0000ffff       constant
0xffff7abd34e8   264  00c8a980       constant
0xffff7abd34ec   268  00000000       constant
0xffff7abd34f0   272  7ab06060       constant
0xffff7abd34f4   276  0000ffff       constant


RelocInfo (size = 15)
0xffff7abd3430  code target (COMPARE_IC)  (0xffff7abd3180)
0xffff7abd347c  embedded object  (0xffff7abd3381 <Code: COMPARE_IC>)
0xffff7abd34ac  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7abd34b0  code target (STUB)  (0xffff7ab06060)
0xffff7abd34d0  constant pool (size 40)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd3560     0  tbz w0, #0, #+0x1c (addr 0xffff7abd357c)
0xffff7abd3564     4  ldur x16, [x0, #-1]
0xffff7abd3568     8  ldr x17, [x26, #120]
0xffff7abd356c    12  cmp x16, x17
0xffff7abd3570    16  b.ne #+0x60 (addr 0xffff7abd35d0)
0xffff7abd3574    20  ldur d0, [x0, #7]
0xffff7abd3578    24  b #+0x8 (addr 0xffff7abd3580)
0xffff7abd357c    28  scvtf d0, x0, #32
0xffff7abd3580    32  stur d0, [x1, #23]
0xffff7abd3584    36  stur x5, [x1, #-1]
0xffff7abd3588    40  tbz w5, #0, #+0x34 (addr 0xffff7abd35bc)
0xffff7abd358c    44  sub x2, x1, #0x1 (1)
0xffff7abd3590    48  and x5, x5, #0xfffffffffff00000
0xffff7abd3594    52  ldr x5, [x5, #8]
0xffff7abd3598    56  tbz w5, #1, #+0x24 (addr 0xffff7abd35bc)
0xffff7abd359c    60  and x5, x1, #0xfffffffffff00000
0xffff7abd35a0    64  ldr x5, [x5, #8]
0xffff7abd35a4    68  tbz w5, #2, #+0x18 (addr 0xffff7abd35bc)
0xffff7abd35a8    72  sub csp, jssp, #0x8 (8)
0xffff7abd35ac    76  str lr, [jssp, #-8]!
0xffff7abd35b0    80  ldr x16, pc+24 (addr 0x0000ffff7abd35c8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd35b4    84  blr x16
0xffff7abd35b8    88  ldr lr, [jssp], #8
0xffff7abd35bc    92  ret
0xffff7abd35c0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd35c4   100  d63f03e0       constant
0xffff7abd35c8   104  7ab38080       constant
0xffff7abd35cc   108  0000ffff       constant
0xffff7abd35d0   112  movz x16, #0x0
0xffff7abd35d4   116  sub csp, jssp, #0x10 (16)
0xffff7abd35d8   120  stp fp, lr, [jssp, #-16]!
0xffff7abd35dc   124  bl #+0x4 (addr 0xffff7abd35e0)
0xffff7abd35e0   128  movz x17, #0xa00000000
0xffff7abd35e4   132  sub csp, jssp, #0x10 (16)
0xffff7abd35e8   136  stp x17, cp, [jssp, #-16]!
0xffff7abd35ec   140  add fp, jssp, #0x10 (16)
0xffff7abd35f0   144  ldr x17, pc+24 (addr 0x0000ffff7abd3608)    ;; lazy deoptimization bailout 0
0xffff7abd35f4   148  add x17, x17, x16
0xffff7abd35f8   152  br x17
0xffff7abd35fc   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd3600   160  d63f03e0       constant
0xffff7abd3604   164  d503201f       constant
0xffff7abd3608   168  7a906000       constant
0xffff7abd360c   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd35b0  code target (STUB)  (0xffff7ab38080)
0xffff7abd35c0  constant pool (size 16)
0xffff7abd35f0  runtime entry
0xffff7abd35fc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd3560     0  tbz w0, #0, #+0x1c (addr 0xffff7abd357c)
0xffff7abd3564     4  ldur x16, [x0, #-1]
0xffff7abd3568     8  ldr x17, [x26, #120]
0xffff7abd356c    12  cmp x16, x17
0xffff7abd3570    16  b.ne #+0x60 (addr 0xffff7abd35d0)
0xffff7abd3574    20  ldur d0, [x0, #7]
0xffff7abd3578    24  b #+0x8 (addr 0xffff7abd3580)
0xffff7abd357c    28  scvtf d0, x0, #32
0xffff7abd3580    32  stur d0, [x1, #23]
0xffff7abd3584    36  stur x5, [x1, #-1]
0xffff7abd3588    40  tbz w5, #0, #+0x34 (addr 0xffff7abd35bc)
0xffff7abd358c    44  sub x2, x1, #0x1 (1)
0xffff7abd3590    48  and x5, x5, #0xfffffffffff00000
0xffff7abd3594    52  ldr x5, [x5, #8]
0xffff7abd3598    56  tbz w5, #1, #+0x24 (addr 0xffff7abd35bc)
0xffff7abd359c    60  and x5, x1, #0xfffffffffff00000
0xffff7abd35a0    64  ldr x5, [x5, #8]
0xffff7abd35a4    68  tbz w5, #2, #+0x18 (addr 0xffff7abd35bc)
0xffff7abd35a8    72  sub csp, jssp, #0x8 (8)
0xffff7abd35ac    76  str lr, [jssp, #-8]!
0xffff7abd35b0    80  ldr x16, pc+24 (addr 0x0000ffff7abd35c8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd35b4    84  blr x16
0xffff7abd35b8    88  ldr lr, [jssp], #8
0xffff7abd35bc    92  ret
0xffff7abd35c0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd35c4   100  d63f03e0       constant
0xffff7abd35c8   104  7ab38080       constant
0xffff7abd35cc   108  0000ffff       constant
0xffff7abd35d0   112  movz x16, #0x0
0xffff7abd35d4   116  sub csp, jssp, #0x10 (16)
0xffff7abd35d8   120  stp fp, lr, [jssp, #-16]!
0xffff7abd35dc   124  bl #+0x4 (addr 0xffff7abd35e0)
0xffff7abd35e0   128  movz x17, #0xa00000000
0xffff7abd35e4   132  sub csp, jssp, #0x10 (16)
0xffff7abd35e8   136  stp x17, cp, [jssp, #-16]!
0xffff7abd35ec   140  add fp, jssp, #0x10 (16)
0xffff7abd35f0   144  ldr x17, pc+24 (addr 0x0000ffff7abd3608)    ;; lazy deoptimization bailout 0
0xffff7abd35f4   148  add x17, x17, x16
0xffff7abd35f8   152  br x17
0xffff7abd35fc   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd3600   160  d63f03e0       constant
0xffff7abd3604   164  d503201f       constant
0xffff7abd3608   168  7a906000       constant
0xffff7abd360c   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd35b0  code target (STUB)  (0xffff7ab38080)
0xffff7abd35c0  constant pool (size 16)
0xffff7abd35f0  runtime entry
0xffff7abd35fc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = dev
compiler = unknown
Instructions (size = 152)
0xffff7abd3680     0  sub csp, jssp, #0x8 (8)
0xffff7abd3684     4  str x3, [jssp, #-8]!
0xffff7abd3688     8  sub csp, jssp, #0x8 (8)
0xffff7abd368c    12  str x4, [jssp, #-8]!
0xffff7abd3690    16  ldr x3, pc+88 (addr 0x0000ffff7abd36e8)    ;; object: 0x5d4352e9 Cell for 0
0xffff7abd3694    20  ldur x3, [x3, #7]
0xffff7abd3698    24  cmp x3, #0x0 (0)
0xffff7abd369c    28  b.ne #+0x2c (addr 0xffff7abd36c8)
0xffff7abd36a0    32  ldr x5, pc+80 (addr 0x0000ffff7abd36f0)    ;; object: 0x5d435291 WeakCell for 0x4ec35c11 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abd36a4    36  ldur x5, [x5, #7]
0xffff7abd36a8    40  tbz w5, #0, #+0x20 (addr 0xffff7abd36c8)
0xffff7abd36ac    44  ldursw x4, [x5, #15]
0xffff7abd36b0    48  tbnz w4, #23, #+0x18 (addr 0xffff7abd36c8)
0xffff7abd36b4    52  ldr x4, [jssp], #8
0xffff7abd36b8    56  ldr x3, [jssp], #8
0xffff7abd36bc    60  ldr x2, pc+60 (addr 0x0000ffff7abd36f8)    ;; object: 0x5d40d0c9 <String[3]: dev>
0xffff7abd36c0    64  ldr x16, pc+64 (addr 0x0000ffff7abd3700)    ;; code: HANDLER, StoreTransitionStub, minor: 194563
0xffff7abd36c4    68  br x16
0xffff7abd36c8    72  ldr x2, pc+64 (addr 0x0000ffff7abd3708)    ;; object: 0x5d40d0c9 <String[3]: dev>
0xffff7abd36cc    76  ldr x4, [jssp], #8
0xffff7abd36d0    80  ldr x3, [jssp], #8
0xffff7abd36d4    84  ldr x16, pc+60 (addr 0x0000ffff7abd3710)    ;; code: BUILTIN
0xffff7abd36d8    88  br x16
0xffff7abd36dc    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abd36e0    96  d63f03e0       constant
0xffff7abd36e4   100  d503201f       constant
0xffff7abd36e8   104  5d4352e9       constant
0xffff7abd36ec   108  00000000       constant
0xffff7abd36f0   112  5d435291       constant
0xffff7abd36f4   116  00000000       constant
0xffff7abd36f8   120  5d40d0c9       constant
0xffff7abd36fc   124  00000000       constant
0xffff7abd3700   128  7abd3560       constant
0xffff7abd3704   132  0000ffff       constant
0xffff7abd3708   136  5d40d0c9       constant
0xffff7abd370c   140  00000000       constant
0xffff7abd3710   144  7ab22420       constant
0xffff7abd3714   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abd3690  embedded object  (0x5d4352e9 Cell for 0)
0xffff7abd36a0  embedded object  (0x5d435291 WeakCell for 0x4ec35c11 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abd36bc  embedded object  (0x5d40d0c9 <String[3]: dev>)
0xffff7abd36c0  code target (HANDLER)  (0xffff7abd3560)
0xffff7abd36c8  embedded object  (0x5d40d0c9 <String[3]: dev>)
0xffff7abd36d4  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abd36dc  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd3780     0  tbz w0, #0, #+0x1c (addr 0xffff7abd379c)
0xffff7abd3784     4  ldur x16, [x0, #-1]
0xffff7abd3788     8  ldr x17, [x26, #120]
0xffff7abd378c    12  cmp x16, x17
0xffff7abd3790    16  b.ne #+0x60 (addr 0xffff7abd37f0)
0xffff7abd3794    20  ldur d0, [x0, #7]
0xffff7abd3798    24  b #+0x8 (addr 0xffff7abd37a0)
0xffff7abd379c    28  scvtf d0, x0, #32
0xffff7abd37a0    32  stur d0, [x1, #31]
0xffff7abd37a4    36  stur x5, [x1, #-1]
0xffff7abd37a8    40  tbz w5, #0, #+0x34 (addr 0xffff7abd37dc)
0xffff7abd37ac    44  sub x2, x1, #0x1 (1)
0xffff7abd37b0    48  and x5, x5, #0xfffffffffff00000
0xffff7abd37b4    52  ldr x5, [x5, #8]
0xffff7abd37b8    56  tbz w5, #1, #+0x24 (addr 0xffff7abd37dc)
0xffff7abd37bc    60  and x5, x1, #0xfffffffffff00000
0xffff7abd37c0    64  ldr x5, [x5, #8]
0xffff7abd37c4    68  tbz w5, #2, #+0x18 (addr 0xffff7abd37dc)
0xffff7abd37c8    72  sub csp, jssp, #0x8 (8)
0xffff7abd37cc    76  str lr, [jssp, #-8]!
0xffff7abd37d0    80  ldr x16, pc+24 (addr 0x0000ffff7abd37e8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd37d4    84  blr x16
0xffff7abd37d8    88  ldr lr, [jssp], #8
0xffff7abd37dc    92  ret
0xffff7abd37e0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd37e4   100  d63f03e0       constant
0xffff7abd37e8   104  7ab38080       constant
0xffff7abd37ec   108  0000ffff       constant
0xffff7abd37f0   112  movz x16, #0x0
0xffff7abd37f4   116  sub csp, jssp, #0x10 (16)
0xffff7abd37f8   120  stp fp, lr, [jssp, #-16]!
0xffff7abd37fc   124  bl #+0x4 (addr 0xffff7abd3800)
0xffff7abd3800   128  movz x17, #0xa00000000
0xffff7abd3804   132  sub csp, jssp, #0x10 (16)
0xffff7abd3808   136  stp x17, cp, [jssp, #-16]!
0xffff7abd380c   140  add fp, jssp, #0x10 (16)
0xffff7abd3810   144  ldr x17, pc+24 (addr 0x0000ffff7abd3828)    ;; lazy deoptimization bailout 0
0xffff7abd3814   148  add x17, x17, x16
0xffff7abd3818   152  br x17
0xffff7abd381c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd3820   160  d63f03e0       constant
0xffff7abd3824   164  d503201f       constant
0xffff7abd3828   168  7a906000       constant
0xffff7abd382c   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd37d0  code target (STUB)  (0xffff7ab38080)
0xffff7abd37e0  constant pool (size 16)
0xffff7abd3810  runtime entry
0xffff7abd381c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd3780     0  tbz w0, #0, #+0x1c (addr 0xffff7abd379c)
0xffff7abd3784     4  ldur x16, [x0, #-1]
0xffff7abd3788     8  ldr x17, [x26, #120]
0xffff7abd378c    12  cmp x16, x17
0xffff7abd3790    16  b.ne #+0x60 (addr 0xffff7abd37f0)
0xffff7abd3794    20  ldur d0, [x0, #7]
0xffff7abd3798    24  b #+0x8 (addr 0xffff7abd37a0)
0xffff7abd379c    28  scvtf d0, x0, #32
0xffff7abd37a0    32  stur d0, [x1, #31]
0xffff7abd37a4    36  stur x5, [x1, #-1]
0xffff7abd37a8    40  tbz w5, #0, #+0x34 (addr 0xffff7abd37dc)
0xffff7abd37ac    44  sub x2, x1, #0x1 (1)
0xffff7abd37b0    48  and x5, x5, #0xfffffffffff00000
0xffff7abd37b4    52  ldr x5, [x5, #8]
0xffff7abd37b8    56  tbz w5, #1, #+0x24 (addr 0xffff7abd37dc)
0xffff7abd37bc    60  and x5, x1, #0xfffffffffff00000
0xffff7abd37c0    64  ldr x5, [x5, #8]
0xffff7abd37c4    68  tbz w5, #2, #+0x18 (addr 0xffff7abd37dc)
0xffff7abd37c8    72  sub csp, jssp, #0x8 (8)
0xffff7abd37cc    76  str lr, [jssp, #-8]!
0xffff7abd37d0    80  ldr x16, pc+24 (addr 0x0000ffff7abd37e8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd37d4    84  blr x16
0xffff7abd37d8    88  ldr lr, [jssp], #8
0xffff7abd37dc    92  ret
0xffff7abd37e0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd37e4   100  d63f03e0       constant
0xffff7abd37e8   104  7ab38080       constant
0xffff7abd37ec   108  0000ffff       constant
0xffff7abd37f0   112  movz x16, #0x0
0xffff7abd37f4   116  sub csp, jssp, #0x10 (16)
0xffff7abd37f8   120  stp fp, lr, [jssp, #-16]!
0xffff7abd37fc   124  bl #+0x4 (addr 0xffff7abd3800)
0xffff7abd3800   128  movz x17, #0xa00000000
0xffff7abd3804   132  sub csp, jssp, #0x10 (16)
0xffff7abd3808   136  stp x17, cp, [jssp, #-16]!
0xffff7abd380c   140  add fp, jssp, #0x10 (16)
0xffff7abd3810   144  ldr x17, pc+24 (addr 0x0000ffff7abd3828)    ;; lazy deoptimization bailout 0
0xffff7abd3814   148  add x17, x17, x16
0xffff7abd3818   152  br x17
0xffff7abd381c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd3820   160  d63f03e0       constant
0xffff7abd3824   164  d503201f       constant
0xffff7abd3828   168  7a906000       constant
0xffff7abd382c   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd37d0  code target (STUB)  (0xffff7ab38080)
0xffff7abd37e0  constant pool (size 16)
0xffff7abd3810  runtime entry
0xffff7abd381c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = mode
compiler = unknown
Instructions (size = 152)
0xffff7abd38a0     0  sub csp, jssp, #0x8 (8)
0xffff7abd38a4     4  str x3, [jssp, #-8]!
0xffff7abd38a8     8  sub csp, jssp, #0x8 (8)
0xffff7abd38ac    12  str x4, [jssp, #-8]!
0xffff7abd38b0    16  ldr x3, pc+88 (addr 0x0000ffff7abd3908)    ;; object: 0x5d4352e9 Cell for 0
0xffff7abd38b4    20  ldur x3, [x3, #7]
0xffff7abd38b8    24  cmp x3, #0x0 (0)
0xffff7abd38bc    28  b.ne #+0x2c (addr 0xffff7abd38e8)
0xffff7abd38c0    32  ldr x5, pc+80 (addr 0x0000ffff7abd3910)    ;; object: 0x5d4353f1 WeakCell for 0x4ec35c69 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abd38c4    36  ldur x5, [x5, #7]
0xffff7abd38c8    40  tbz w5, #0, #+0x20 (addr 0xffff7abd38e8)
0xffff7abd38cc    44  ldursw x4, [x5, #15]
0xffff7abd38d0    48  tbnz w4, #23, #+0x18 (addr 0xffff7abd38e8)
0xffff7abd38d4    52  ldr x4, [jssp], #8
0xffff7abd38d8    56  ldr x3, [jssp], #8
0xffff7abd38dc    60  ldr x2, pc+60 (addr 0x0000ffff7abd3918)    ;; object: 0x5d40d0e9 <String[4]: mode>
0xffff7abd38e0    64  ldr x16, pc+64 (addr 0x0000ffff7abd3920)    ;; code: HANDLER, StoreTransitionStub, minor: 194564
0xffff7abd38e4    68  br x16
0xffff7abd38e8    72  ldr x2, pc+64 (addr 0x0000ffff7abd3928)    ;; object: 0x5d40d0e9 <String[4]: mode>
0xffff7abd38ec    76  ldr x4, [jssp], #8
0xffff7abd38f0    80  ldr x3, [jssp], #8
0xffff7abd38f4    84  ldr x16, pc+60 (addr 0x0000ffff7abd3930)    ;; code: BUILTIN
0xffff7abd38f8    88  br x16
0xffff7abd38fc    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abd3900    96  d63f03e0       constant
0xffff7abd3904   100  d503201f       constant
0xffff7abd3908   104  5d4352e9       constant
0xffff7abd390c   108  00000000       constant
0xffff7abd3910   112  5d4353f1       constant
0xffff7abd3914   116  00000000       constant
0xffff7abd3918   120  5d40d0e9       constant
0xffff7abd391c   124  00000000       constant
0xffff7abd3920   128  7abd3780       constant
0xffff7abd3924   132  0000ffff       constant
0xffff7abd3928   136  5d40d0e9       constant
0xffff7abd392c   140  00000000       constant
0xffff7abd3930   144  7ab22420       constant
0xffff7abd3934   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abd38b0  embedded object  (0x5d4352e9 Cell for 0)
0xffff7abd38c0  embedded object  (0x5d4353f1 WeakCell for 0x4ec35c69 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abd38dc  embedded object  (0x5d40d0e9 <String[4]: mode>)
0xffff7abd38e0  code target (HANDLER)  (0xffff7abd3780)
0xffff7abd38e8  embedded object  (0x5d40d0e9 <String[4]: mode>)
0xffff7abd38f4  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abd38fc  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd39a0     0  tbz w0, #0, #+0x1c (addr 0xffff7abd39bc)
0xffff7abd39a4     4  ldur x16, [x0, #-1]
0xffff7abd39a8     8  ldr x17, [x26, #120]
0xffff7abd39ac    12  cmp x16, x17
0xffff7abd39b0    16  b.ne #+0x60 (addr 0xffff7abd3a10)
0xffff7abd39b4    20  ldur d0, [x0, #7]
0xffff7abd39b8    24  b #+0x8 (addr 0xffff7abd39c0)
0xffff7abd39bc    28  scvtf d0, x0, #32
0xffff7abd39c0    32  stur d0, [x1, #39]
0xffff7abd39c4    36  stur x5, [x1, #-1]
0xffff7abd39c8    40  tbz w5, #0, #+0x34 (addr 0xffff7abd39fc)
0xffff7abd39cc    44  sub x2, x1, #0x1 (1)
0xffff7abd39d0    48  and x5, x5, #0xfffffffffff00000
0xffff7abd39d4    52  ldr x5, [x5, #8]
0xffff7abd39d8    56  tbz w5, #1, #+0x24 (addr 0xffff7abd39fc)
0xffff7abd39dc    60  and x5, x1, #0xfffffffffff00000
0xffff7abd39e0    64  ldr x5, [x5, #8]
0xffff7abd39e4    68  tbz w5, #2, #+0x18 (addr 0xffff7abd39fc)
0xffff7abd39e8    72  sub csp, jssp, #0x8 (8)
0xffff7abd39ec    76  str lr, [jssp, #-8]!
0xffff7abd39f0    80  ldr x16, pc+24 (addr 0x0000ffff7abd3a08)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd39f4    84  blr x16
0xffff7abd39f8    88  ldr lr, [jssp], #8
0xffff7abd39fc    92  ret
0xffff7abd3a00    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd3a04   100  d63f03e0       constant
0xffff7abd3a08   104  7ab38080       constant
0xffff7abd3a0c   108  0000ffff       constant
0xffff7abd3a10   112  movz x16, #0x0
0xffff7abd3a14   116  sub csp, jssp, #0x10 (16)
0xffff7abd3a18   120  stp fp, lr, [jssp, #-16]!
0xffff7abd3a1c   124  bl #+0x4 (addr 0xffff7abd3a20)
0xffff7abd3a20   128  movz x17, #0xa00000000
0xffff7abd3a24   132  sub csp, jssp, #0x10 (16)
0xffff7abd3a28   136  stp x17, cp, [jssp, #-16]!
0xffff7abd3a2c   140  add fp, jssp, #0x10 (16)
0xffff7abd3a30   144  ldr x17, pc+24 (addr 0x0000ffff7abd3a48)    ;; lazy deoptimization bailout 0
0xffff7abd3a34   148  add x17, x17, x16
0xffff7abd3a38   152  br x17
0xffff7abd3a3c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd3a40   160  d63f03e0       constant
0xffff7abd3a44   164  d503201f       constant
0xffff7abd3a48   168  7a906000       constant
0xffff7abd3a4c   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd39f0  code target (STUB)  (0xffff7ab38080)
0xffff7abd3a00  constant pool (size 16)
0xffff7abd3a30  runtime entry
0xffff7abd3a3c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd39a0     0  tbz w0, #0, #+0x1c (addr 0xffff7abd39bc)
0xffff7abd39a4     4  ldur x16, [x0, #-1]
0xffff7abd39a8     8  ldr x17, [x26, #120]
0xffff7abd39ac    12  cmp x16, x17
0xffff7abd39b0    16  b.ne #+0x60 (addr 0xffff7abd3a10)
0xffff7abd39b4    20  ldur d0, [x0, #7]
0xffff7abd39b8    24  b #+0x8 (addr 0xffff7abd39c0)
0xffff7abd39bc    28  scvtf d0, x0, #32
0xffff7abd39c0    32  stur d0, [x1, #39]
0xffff7abd39c4    36  stur x5, [x1, #-1]
0xffff7abd39c8    40  tbz w5, #0, #+0x34 (addr 0xffff7abd39fc)
0xffff7abd39cc    44  sub x2, x1, #0x1 (1)
0xffff7abd39d0    48  and x5, x5, #0xfffffffffff00000
0xffff7abd39d4    52  ldr x5, [x5, #8]
0xffff7abd39d8    56  tbz w5, #1, #+0x24 (addr 0xffff7abd39fc)
0xffff7abd39dc    60  and x5, x1, #0xfffffffffff00000
0xffff7abd39e0    64  ldr x5, [x5, #8]
0xffff7abd39e4    68  tbz w5, #2, #+0x18 (addr 0xffff7abd39fc)
0xffff7abd39e8    72  sub csp, jssp, #0x8 (8)
0xffff7abd39ec    76  str lr, [jssp, #-8]!
0xffff7abd39f0    80  ldr x16, pc+24 (addr 0x0000ffff7abd3a08)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd39f4    84  blr x16
0xffff7abd39f8    88  ldr lr, [jssp], #8
0xffff7abd39fc    92  ret
0xffff7abd3a00    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd3a04   100  d63f03e0       constant
0xffff7abd3a08   104  7ab38080       constant
0xffff7abd3a0c   108  0000ffff       constant
0xffff7abd3a10   112  movz x16, #0x0
0xffff7abd3a14   116  sub csp, jssp, #0x10 (16)
0xffff7abd3a18   120  stp fp, lr, [jssp, #-16]!
0xffff7abd3a1c   124  bl #+0x4 (addr 0xffff7abd3a20)
0xffff7abd3a20   128  movz x17, #0xa00000000
0xffff7abd3a24   132  sub csp, jssp, #0x10 (16)
0xffff7abd3a28   136  stp x17, cp, [jssp, #-16]!
0xffff7abd3a2c   140  add fp, jssp, #0x10 (16)
0xffff7abd3a30   144  ldr x17, pc+24 (addr 0x0000ffff7abd3a48)    ;; lazy deoptimization bailout 0
0xffff7abd3a34   148  add x17, x17, x16
0xffff7abd3a38   152  br x17
0xffff7abd3a3c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd3a40   160  d63f03e0       constant
0xffff7abd3a44   164  d503201f       constant
0xffff7abd3a48   168  7a906000       constant
0xffff7abd3a4c   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd39f0  code target (STUB)  (0xffff7ab38080)
0xffff7abd3a00  constant pool (size 16)
0xffff7abd3a30  runtime entry
0xffff7abd3a3c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = nlink
compiler = unknown
Instructions (size = 152)
0xffff7abd3ac0     0  sub csp, jssp, #0x8 (8)
0xffff7abd3ac4     4  str x3, [jssp, #-8]!
0xffff7abd3ac8     8  sub csp, jssp, #0x8 (8)
0xffff7abd3acc    12  str x4, [jssp, #-8]!
0xffff7abd3ad0    16  ldr x3, pc+88 (addr 0x0000ffff7abd3b28)    ;; object: 0x5d4352e9 Cell for 0
0xffff7abd3ad4    20  ldur x3, [x3, #7]
0xffff7abd3ad8    24  cmp x3, #0x0 (0)
0xffff7abd3adc    28  b.ne #+0x2c (addr 0xffff7abd3b08)
0xffff7abd3ae0    32  ldr x5, pc+80 (addr 0x0000ffff7abd3b30)    ;; object: 0x5d4354e9 WeakCell for 0x4ec35cc1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abd3ae4    36  ldur x5, [x5, #7]
0xffff7abd3ae8    40  tbz w5, #0, #+0x20 (addr 0xffff7abd3b08)
0xffff7abd3aec    44  ldursw x4, [x5, #15]
0xffff7abd3af0    48  tbnz w4, #23, #+0x18 (addr 0xffff7abd3b08)
0xffff7abd3af4    52  ldr x4, [jssp], #8
0xffff7abd3af8    56  ldr x3, [jssp], #8
0xffff7abd3afc    60  ldr x2, pc+60 (addr 0x0000ffff7abd3b38)    ;; object: 0x5d40d109 <String[5]: nlink>
0xffff7abd3b00    64  ldr x16, pc+64 (addr 0x0000ffff7abd3b40)    ;; code: HANDLER, StoreTransitionStub, minor: 194565
0xffff7abd3b04    68  br x16
0xffff7abd3b08    72  ldr x2, pc+64 (addr 0x0000ffff7abd3b48)    ;; object: 0x5d40d109 <String[5]: nlink>
0xffff7abd3b0c    76  ldr x4, [jssp], #8
0xffff7abd3b10    80  ldr x3, [jssp], #8
0xffff7abd3b14    84  ldr x16, pc+60 (addr 0x0000ffff7abd3b50)    ;; code: BUILTIN
0xffff7abd3b18    88  br x16
0xffff7abd3b1c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abd3b20    96  d63f03e0       constant
0xffff7abd3b24   100  d503201f       constant
0xffff7abd3b28   104  5d4352e9       constant
0xffff7abd3b2c   108  00000000       constant
0xffff7abd3b30   112  5d4354e9       constant
0xffff7abd3b34   116  00000000       constant
0xffff7abd3b38   120  5d40d109       constant
0xffff7abd3b3c   124  00000000       constant
0xffff7abd3b40   128  7abd39a0       constant
0xffff7abd3b44   132  0000ffff       constant
0xffff7abd3b48   136  5d40d109       constant
0xffff7abd3b4c   140  00000000       constant
0xffff7abd3b50   144  7ab22420       constant
0xffff7abd3b54   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abd3ad0  embedded object  (0x5d4352e9 Cell for 0)
0xffff7abd3ae0  embedded object  (0x5d4354e9 WeakCell for 0x4ec35cc1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abd3afc  embedded object  (0x5d40d109 <String[5]: nlink>)
0xffff7abd3b00  code target (HANDLER)  (0xffff7abd39a0)
0xffff7abd3b08  embedded object  (0x5d40d109 <String[5]: nlink>)
0xffff7abd3b14  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abd3b1c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd3bc0     0  tbz w0, #0, #+0x1c (addr 0xffff7abd3bdc)
0xffff7abd3bc4     4  ldur x16, [x0, #-1]
0xffff7abd3bc8     8  ldr x17, [x26, #120]
0xffff7abd3bcc    12  cmp x16, x17
0xffff7abd3bd0    16  b.ne #+0x60 (addr 0xffff7abd3c30)
0xffff7abd3bd4    20  ldur d0, [x0, #7]
0xffff7abd3bd8    24  b #+0x8 (addr 0xffff7abd3be0)
0xffff7abd3bdc    28  scvtf d0, x0, #32
0xffff7abd3be0    32  stur d0, [x1, #47]
0xffff7abd3be4    36  stur x5, [x1, #-1]
0xffff7abd3be8    40  tbz w5, #0, #+0x34 (addr 0xffff7abd3c1c)
0xffff7abd3bec    44  sub x2, x1, #0x1 (1)
0xffff7abd3bf0    48  and x5, x5, #0xfffffffffff00000
0xffff7abd3bf4    52  ldr x5, [x5, #8]
0xffff7abd3bf8    56  tbz w5, #1, #+0x24 (addr 0xffff7abd3c1c)
0xffff7abd3bfc    60  and x5, x1, #0xfffffffffff00000
0xffff7abd3c00    64  ldr x5, [x5, #8]
0xffff7abd3c04    68  tbz w5, #2, #+0x18 (addr 0xffff7abd3c1c)
0xffff7abd3c08    72  sub csp, jssp, #0x8 (8)
0xffff7abd3c0c    76  str lr, [jssp, #-8]!
0xffff7abd3c10    80  ldr x16, pc+24 (addr 0x0000ffff7abd3c28)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd3c14    84  blr x16
0xffff7abd3c18    88  ldr lr, [jssp], #8
0xffff7abd3c1c    92  ret
0xffff7abd3c20    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd3c24   100  d63f03e0       constant
0xffff7abd3c28   104  7ab38080       constant
0xffff7abd3c2c   108  0000ffff       constant
0xffff7abd3c30   112  movz x16, #0x0
0xffff7abd3c34   116  sub csp, jssp, #0x10 (16)
0xffff7abd3c38   120  stp fp, lr, [jssp, #-16]!
0xffff7abd3c3c   124  bl #+0x4 (addr 0xffff7abd3c40)
0xffff7abd3c40   128  movz x17, #0xa00000000
0xffff7abd3c44   132  sub csp, jssp, #0x10 (16)
0xffff7abd3c48   136  stp x17, cp, [jssp, #-16]!
0xffff7abd3c4c   140  add fp, jssp, #0x10 (16)
0xffff7abd3c50   144  ldr x17, pc+24 (addr 0x0000ffff7abd3c68)    ;; lazy deoptimization bailout 0
0xffff7abd3c54   148  add x17, x17, x16
0xffff7abd3c58   152  br x17
0xffff7abd3c5c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd3c60   160  d63f03e0       constant
0xffff7abd3c64   164  d503201f       constant
0xffff7abd3c68   168  7a906000       constant
0xffff7abd3c6c   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd3c10  code target (STUB)  (0xffff7ab38080)
0xffff7abd3c20  constant pool (size 16)
0xffff7abd3c50  runtime entry
0xffff7abd3c5c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd3bc0     0  tbz w0, #0, #+0x1c (addr 0xffff7abd3bdc)
0xffff7abd3bc4     4  ldur x16, [x0, #-1]
0xffff7abd3bc8     8  ldr x17, [x26, #120]
0xffff7abd3bcc    12  cmp x16, x17
0xffff7abd3bd0    16  b.ne #+0x60 (addr 0xffff7abd3c30)
0xffff7abd3bd4    20  ldur d0, [x0, #7]
0xffff7abd3bd8    24  b #+0x8 (addr 0xffff7abd3be0)
0xffff7abd3bdc    28  scvtf d0, x0, #32
0xffff7abd3be0    32  stur d0, [x1, #47]
0xffff7abd3be4    36  stur x5, [x1, #-1]
0xffff7abd3be8    40  tbz w5, #0, #+0x34 (addr 0xffff7abd3c1c)
0xffff7abd3bec    44  sub x2, x1, #0x1 (1)
0xffff7abd3bf0    48  and x5, x5, #0xfffffffffff00000
0xffff7abd3bf4    52  ldr x5, [x5, #8]
0xffff7abd3bf8    56  tbz w5, #1, #+0x24 (addr 0xffff7abd3c1c)
0xffff7abd3bfc    60  and x5, x1, #0xfffffffffff00000
0xffff7abd3c00    64  ldr x5, [x5, #8]
0xffff7abd3c04    68  tbz w5, #2, #+0x18 (addr 0xffff7abd3c1c)
0xffff7abd3c08    72  sub csp, jssp, #0x8 (8)
0xffff7abd3c0c    76  str lr, [jssp, #-8]!
0xffff7abd3c10    80  ldr x16, pc+24 (addr 0x0000ffff7abd3c28)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd3c14    84  blr x16
0xffff7abd3c18    88  ldr lr, [jssp], #8
0xffff7abd3c1c    92  ret
0xffff7abd3c20    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd3c24   100  d63f03e0       constant
0xffff7abd3c28   104  7ab38080       constant
0xffff7abd3c2c   108  0000ffff       constant
0xffff7abd3c30   112  movz x16, #0x0
0xffff7abd3c34   116  sub csp, jssp, #0x10 (16)
0xffff7abd3c38   120  stp fp, lr, [jssp, #-16]!
0xffff7abd3c3c   124  bl #+0x4 (addr 0xffff7abd3c40)
0xffff7abd3c40   128  movz x17, #0xa00000000
0xffff7abd3c44   132  sub csp, jssp, #0x10 (16)
0xffff7abd3c48   136  stp x17, cp, [jssp, #-16]!
0xffff7abd3c4c   140  add fp, jssp, #0x10 (16)
0xffff7abd3c50   144  ldr x17, pc+24 (addr 0x0000ffff7abd3c68)    ;; lazy deoptimization bailout 0
0xffff7abd3c54   148  add x17, x17, x16
0xffff7abd3c58   152  br x17
0xffff7abd3c5c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd3c60   160  d63f03e0       constant
0xffff7abd3c64   164  d503201f       constant
0xffff7abd3c68   168  7a906000       constant
0xffff7abd3c6c   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd3c10  code target (STUB)  (0xffff7ab38080)
0xffff7abd3c20  constant pool (size 16)
0xffff7abd3c50  runtime entry
0xffff7abd3c5c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = uid
compiler = unknown
Instructions (size = 152)
0xffff7abd3ce0     0  sub csp, jssp, #0x8 (8)
0xffff7abd3ce4     4  str x3, [jssp, #-8]!
0xffff7abd3ce8     8  sub csp, jssp, #0x8 (8)
0xffff7abd3cec    12  str x4, [jssp, #-8]!
0xffff7abd3cf0    16  ldr x3, pc+88 (addr 0x0000ffff7abd3d48)    ;; object: 0x5d4352e9 Cell for 0
0xffff7abd3cf4    20  ldur x3, [x3, #7]
0xffff7abd3cf8    24  cmp x3, #0x0 (0)
0xffff7abd3cfc    28  b.ne #+0x2c (addr 0xffff7abd3d28)
0xffff7abd3d00    32  ldr x5, pc+80 (addr 0x0000ffff7abd3d50)    ;; object: 0x5d4355e1 WeakCell for 0x4ec35d19 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abd3d04    36  ldur x5, [x5, #7]
0xffff7abd3d08    40  tbz w5, #0, #+0x20 (addr 0xffff7abd3d28)
0xffff7abd3d0c    44  ldursw x4, [x5, #15]
0xffff7abd3d10    48  tbnz w4, #23, #+0x18 (addr 0xffff7abd3d28)
0xffff7abd3d14    52  ldr x4, [jssp], #8
0xffff7abd3d18    56  ldr x3, [jssp], #8
0xffff7abd3d1c    60  ldr x2, pc+60 (addr 0x0000ffff7abd3d58)    ;; object: 0x20db33a9 <String[3]: uid>
0xffff7abd3d20    64  ldr x16, pc+64 (addr 0x0000ffff7abd3d60)    ;; code: HANDLER, StoreTransitionStub, minor: 194566
0xffff7abd3d24    68  br x16
0xffff7abd3d28    72  ldr x2, pc+64 (addr 0x0000ffff7abd3d68)    ;; object: 0x20db33a9 <String[3]: uid>
0xffff7abd3d2c    76  ldr x4, [jssp], #8
0xffff7abd3d30    80  ldr x3, [jssp], #8
0xffff7abd3d34    84  ldr x16, pc+60 (addr 0x0000ffff7abd3d70)    ;; code: BUILTIN
0xffff7abd3d38    88  br x16
0xffff7abd3d3c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abd3d40    96  d63f03e0       constant
0xffff7abd3d44   100  d503201f       constant
0xffff7abd3d48   104  5d4352e9       constant
0xffff7abd3d4c   108  00000000       constant
0xffff7abd3d50   112  5d4355e1       constant
0xffff7abd3d54   116  00000000       constant
0xffff7abd3d58   120  20db33a9       constant
0xffff7abd3d5c   124  00000000       constant
0xffff7abd3d60   128  7abd3bc0       constant
0xffff7abd3d64   132  0000ffff       constant
0xffff7abd3d68   136  20db33a9       constant
0xffff7abd3d6c   140  00000000       constant
0xffff7abd3d70   144  7ab22420       constant
0xffff7abd3d74   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abd3cf0  embedded object  (0x5d4352e9 Cell for 0)
0xffff7abd3d00  embedded object  (0x5d4355e1 WeakCell for 0x4ec35d19 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abd3d1c  embedded object  (0x20db33a9 <String[3]: uid>)
0xffff7abd3d20  code target (HANDLER)  (0xffff7abd3bc0)
0xffff7abd3d28  embedded object  (0x20db33a9 <String[3]: uid>)
0xffff7abd3d34  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abd3d3c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd3de0     0  tbz w0, #0, #+0x1c (addr 0xffff7abd3dfc)
0xffff7abd3de4     4  ldur x16, [x0, #-1]
0xffff7abd3de8     8  ldr x17, [x26, #120]
0xffff7abd3dec    12  cmp x16, x17
0xffff7abd3df0    16  b.ne #+0x60 (addr 0xffff7abd3e50)
0xffff7abd3df4    20  ldur d0, [x0, #7]
0xffff7abd3df8    24  b #+0x8 (addr 0xffff7abd3e00)
0xffff7abd3dfc    28  scvtf d0, x0, #32
0xffff7abd3e00    32  stur d0, [x1, #55]
0xffff7abd3e04    36  stur x5, [x1, #-1]
0xffff7abd3e08    40  tbz w5, #0, #+0x34 (addr 0xffff7abd3e3c)
0xffff7abd3e0c    44  sub x2, x1, #0x1 (1)
0xffff7abd3e10    48  and x5, x5, #0xfffffffffff00000
0xffff7abd3e14    52  ldr x5, [x5, #8]
0xffff7abd3e18    56  tbz w5, #1, #+0x24 (addr 0xffff7abd3e3c)
0xffff7abd3e1c    60  and x5, x1, #0xfffffffffff00000
0xffff7abd3e20    64  ldr x5, [x5, #8]
0xffff7abd3e24    68  tbz w5, #2, #+0x18 (addr 0xffff7abd3e3c)
0xffff7abd3e28    72  sub csp, jssp, #0x8 (8)
0xffff7abd3e2c    76  str lr, [jssp, #-8]!
0xffff7abd3e30    80  ldr x16, pc+24 (addr 0x0000ffff7abd3e48)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd3e34    84  blr x16
0xffff7abd3e38    88  ldr lr, [jssp], #8
0xffff7abd3e3c    92  ret
0xffff7abd3e40    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd3e44   100  d63f03e0       constant
0xffff7abd3e48   104  7ab38080       constant
0xffff7abd3e4c   108  0000ffff       constant
0xffff7abd3e50   112  movz x16, #0x0
0xffff7abd3e54   116  sub csp, jssp, #0x10 (16)
0xffff7abd3e58   120  stp fp, lr, [jssp, #-16]!
0xffff7abd3e5c   124  bl #+0x4 (addr 0xffff7abd3e60)
0xffff7abd3e60   128  movz x17, #0xa00000000
0xffff7abd3e64   132  sub csp, jssp, #0x10 (16)
0xffff7abd3e68   136  stp x17, cp, [jssp, #-16]!
0xffff7abd3e6c   140  add fp, jssp, #0x10 (16)
0xffff7abd3e70   144  ldr x17, pc+24 (addr 0x0000ffff7abd3e88)    ;; lazy deoptimization bailout 0
0xffff7abd3e74   148  add x17, x17, x16
0xffff7abd3e78   152  br x17
0xffff7abd3e7c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd3e80   160  d63f03e0       constant
0xffff7abd3e84   164  d503201f       constant
0xffff7abd3e88   168  7a906000       constant
0xffff7abd3e8c   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd3e30  code target (STUB)  (0xffff7ab38080)
0xffff7abd3e40  constant pool (size 16)
0xffff7abd3e70  runtime entry
0xffff7abd3e7c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd3de0     0  tbz w0, #0, #+0x1c (addr 0xffff7abd3dfc)
0xffff7abd3de4     4  ldur x16, [x0, #-1]
0xffff7abd3de8     8  ldr x17, [x26, #120]
0xffff7abd3dec    12  cmp x16, x17
0xffff7abd3df0    16  b.ne #+0x60 (addr 0xffff7abd3e50)
0xffff7abd3df4    20  ldur d0, [x0, #7]
0xffff7abd3df8    24  b #+0x8 (addr 0xffff7abd3e00)
0xffff7abd3dfc    28  scvtf d0, x0, #32
0xffff7abd3e00    32  stur d0, [x1, #55]
0xffff7abd3e04    36  stur x5, [x1, #-1]
0xffff7abd3e08    40  tbz w5, #0, #+0x34 (addr 0xffff7abd3e3c)
0xffff7abd3e0c    44  sub x2, x1, #0x1 (1)
0xffff7abd3e10    48  and x5, x5, #0xfffffffffff00000
0xffff7abd3e14    52  ldr x5, [x5, #8]
0xffff7abd3e18    56  tbz w5, #1, #+0x24 (addr 0xffff7abd3e3c)
0xffff7abd3e1c    60  and x5, x1, #0xfffffffffff00000
0xffff7abd3e20    64  ldr x5, [x5, #8]
0xffff7abd3e24    68  tbz w5, #2, #+0x18 (addr 0xffff7abd3e3c)
0xffff7abd3e28    72  sub csp, jssp, #0x8 (8)
0xffff7abd3e2c    76  str lr, [jssp, #-8]!
0xffff7abd3e30    80  ldr x16, pc+24 (addr 0x0000ffff7abd3e48)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd3e34    84  blr x16
0xffff7abd3e38    88  ldr lr, [jssp], #8
0xffff7abd3e3c    92  ret
0xffff7abd3e40    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd3e44   100  d63f03e0       constant
0xffff7abd3e48   104  7ab38080       constant
0xffff7abd3e4c   108  0000ffff       constant
0xffff7abd3e50   112  movz x16, #0x0
0xffff7abd3e54   116  sub csp, jssp, #0x10 (16)
0xffff7abd3e58   120  stp fp, lr, [jssp, #-16]!
0xffff7abd3e5c   124  bl #+0x4 (addr 0xffff7abd3e60)
0xffff7abd3e60   128  movz x17, #0xa00000000
0xffff7abd3e64   132  sub csp, jssp, #0x10 (16)
0xffff7abd3e68   136  stp x17, cp, [jssp, #-16]!
0xffff7abd3e6c   140  add fp, jssp, #0x10 (16)
0xffff7abd3e70   144  ldr x17, pc+24 (addr 0x0000ffff7abd3e88)    ;; lazy deoptimization bailout 0
0xffff7abd3e74   148  add x17, x17, x16
0xffff7abd3e78   152  br x17
0xffff7abd3e7c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd3e80   160  d63f03e0       constant
0xffff7abd3e84   164  d503201f       constant
0xffff7abd3e88   168  7a906000       constant
0xffff7abd3e8c   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd3e30  code target (STUB)  (0xffff7ab38080)
0xffff7abd3e40  constant pool (size 16)
0xffff7abd3e70  runtime entry
0xffff7abd3e7c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = gid
compiler = unknown
Instructions (size = 152)
0xffff7abd3f00     0  sub csp, jssp, #0x8 (8)
0xffff7abd3f04     4  str x3, [jssp, #-8]!
0xffff7abd3f08     8  sub csp, jssp, #0x8 (8)
0xffff7abd3f0c    12  str x4, [jssp, #-8]!
0xffff7abd3f10    16  ldr x3, pc+88 (addr 0x0000ffff7abd3f68)    ;; object: 0x5d4352e9 Cell for 0
0xffff7abd3f14    20  ldur x3, [x3, #7]
0xffff7abd3f18    24  cmp x3, #0x0 (0)
0xffff7abd3f1c    28  b.ne #+0x2c (addr 0xffff7abd3f48)
0xffff7abd3f20    32  ldr x5, pc+80 (addr 0x0000ffff7abd3f70)    ;; object: 0x5d4356d9 WeakCell for 0x4ec35d71 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abd3f24    36  ldur x5, [x5, #7]
0xffff7abd3f28    40  tbz w5, #0, #+0x20 (addr 0xffff7abd3f48)
0xffff7abd3f2c    44  ldursw x4, [x5, #15]
0xffff7abd3f30    48  tbnz w4, #23, #+0x18 (addr 0xffff7abd3f48)
0xffff7abd3f34    52  ldr x4, [jssp], #8
0xffff7abd3f38    56  ldr x3, [jssp], #8
0xffff7abd3f3c    60  ldr x2, pc+60 (addr 0x0000ffff7abd3f78)    ;; object: 0x20db2771 <String[3]: gid>
0xffff7abd3f40    64  ldr x16, pc+64 (addr 0x0000ffff7abd3f80)    ;; code: HANDLER, StoreTransitionStub, minor: 194567
0xffff7abd3f44    68  br x16
0xffff7abd3f48    72  ldr x2, pc+64 (addr 0x0000ffff7abd3f88)    ;; object: 0x20db2771 <String[3]: gid>
0xffff7abd3f4c    76  ldr x4, [jssp], #8
0xffff7abd3f50    80  ldr x3, [jssp], #8
0xffff7abd3f54    84  ldr x16, pc+60 (addr 0x0000ffff7abd3f90)    ;; code: BUILTIN
0xffff7abd3f58    88  br x16
0xffff7abd3f5c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abd3f60    96  d63f03e0       constant
0xffff7abd3f64   100  d503201f       constant
0xffff7abd3f68   104  5d4352e9       constant
0xffff7abd3f6c   108  00000000       constant
0xffff7abd3f70   112  5d4356d9       constant
0xffff7abd3f74   116  00000000       constant
0xffff7abd3f78   120  20db2771       constant
0xffff7abd3f7c   124  00000000       constant
0xffff7abd3f80   128  7abd3de0       constant
0xffff7abd3f84   132  0000ffff       constant
0xffff7abd3f88   136  20db2771       constant
0xffff7abd3f8c   140  00000000       constant
0xffff7abd3f90   144  7ab22420       constant
0xffff7abd3f94   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abd3f10  embedded object  (0x5d4352e9 Cell for 0)
0xffff7abd3f20  embedded object  (0x5d4356d9 WeakCell for 0x4ec35d71 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abd3f3c  embedded object  (0x20db2771 <String[3]: gid>)
0xffff7abd3f40  code target (HANDLER)  (0xffff7abd3de0)
0xffff7abd3f48  embedded object  (0x20db2771 <String[3]: gid>)
0xffff7abd3f54  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abd3f5c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd4000     0  tbz w0, #0, #+0x1c (addr 0xffff7abd401c)
0xffff7abd4004     4  ldur x16, [x0, #-1]
0xffff7abd4008     8  ldr x17, [x26, #120]
0xffff7abd400c    12  cmp x16, x17
0xffff7abd4010    16  b.ne #+0x60 (addr 0xffff7abd4070)
0xffff7abd4014    20  ldur d0, [x0, #7]
0xffff7abd4018    24  b #+0x8 (addr 0xffff7abd4020)
0xffff7abd401c    28  scvtf d0, x0, #32
0xffff7abd4020    32  stur d0, [x1, #63]
0xffff7abd4024    36  stur x5, [x1, #-1]
0xffff7abd4028    40  tbz w5, #0, #+0x34 (addr 0xffff7abd405c)
0xffff7abd402c    44  sub x2, x1, #0x1 (1)
0xffff7abd4030    48  and x5, x5, #0xfffffffffff00000
0xffff7abd4034    52  ldr x5, [x5, #8]
0xffff7abd4038    56  tbz w5, #1, #+0x24 (addr 0xffff7abd405c)
0xffff7abd403c    60  and x5, x1, #0xfffffffffff00000
0xffff7abd4040    64  ldr x5, [x5, #8]
0xffff7abd4044    68  tbz w5, #2, #+0x18 (addr 0xffff7abd405c)
0xffff7abd4048    72  sub csp, jssp, #0x8 (8)
0xffff7abd404c    76  str lr, [jssp, #-8]!
0xffff7abd4050    80  ldr x16, pc+24 (addr 0x0000ffff7abd4068)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd4054    84  blr x16
0xffff7abd4058    88  ldr lr, [jssp], #8
0xffff7abd405c    92  ret
0xffff7abd4060    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd4064   100  d63f03e0       constant
0xffff7abd4068   104  7ab38080       constant
0xffff7abd406c   108  0000ffff       constant
0xffff7abd4070   112  movz x16, #0x0
0xffff7abd4074   116  sub csp, jssp, #0x10 (16)
0xffff7abd4078   120  stp fp, lr, [jssp, #-16]!
0xffff7abd407c   124  bl #+0x4 (addr 0xffff7abd4080)
0xffff7abd4080   128  movz x17, #0xa00000000
0xffff7abd4084   132  sub csp, jssp, #0x10 (16)
0xffff7abd4088   136  stp x17, cp, [jssp, #-16]!
0xffff7abd408c   140  add fp, jssp, #0x10 (16)
0xffff7abd4090   144  ldr x17, pc+24 (addr 0x0000ffff7abd40a8)    ;; lazy deoptimization bailout 0
0xffff7abd4094   148  add x17, x17, x16
0xffff7abd4098   152  br x17
0xffff7abd409c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd40a0   160  d63f03e0       constant
0xffff7abd40a4   164  d503201f       constant
0xffff7abd40a8   168  7a906000       constant
0xffff7abd40ac   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd4050  code target (STUB)  (0xffff7ab38080)
0xffff7abd4060  constant pool (size 16)
0xffff7abd4090  runtime entry
0xffff7abd409c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd4000     0  tbz w0, #0, #+0x1c (addr 0xffff7abd401c)
0xffff7abd4004     4  ldur x16, [x0, #-1]
0xffff7abd4008     8  ldr x17, [x26, #120]
0xffff7abd400c    12  cmp x16, x17
0xffff7abd4010    16  b.ne #+0x60 (addr 0xffff7abd4070)
0xffff7abd4014    20  ldur d0, [x0, #7]
0xffff7abd4018    24  b #+0x8 (addr 0xffff7abd4020)
0xffff7abd401c    28  scvtf d0, x0, #32
0xffff7abd4020    32  stur d0, [x1, #63]
0xffff7abd4024    36  stur x5, [x1, #-1]
0xffff7abd4028    40  tbz w5, #0, #+0x34 (addr 0xffff7abd405c)
0xffff7abd402c    44  sub x2, x1, #0x1 (1)
0xffff7abd4030    48  and x5, x5, #0xfffffffffff00000
0xffff7abd4034    52  ldr x5, [x5, #8]
0xffff7abd4038    56  tbz w5, #1, #+0x24 (addr 0xffff7abd405c)
0xffff7abd403c    60  and x5, x1, #0xfffffffffff00000
0xffff7abd4040    64  ldr x5, [x5, #8]
0xffff7abd4044    68  tbz w5, #2, #+0x18 (addr 0xffff7abd405c)
0xffff7abd4048    72  sub csp, jssp, #0x8 (8)
0xffff7abd404c    76  str lr, [jssp, #-8]!
0xffff7abd4050    80  ldr x16, pc+24 (addr 0x0000ffff7abd4068)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd4054    84  blr x16
0xffff7abd4058    88  ldr lr, [jssp], #8
0xffff7abd405c    92  ret
0xffff7abd4060    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd4064   100  d63f03e0       constant
0xffff7abd4068   104  7ab38080       constant
0xffff7abd406c   108  0000ffff       constant
0xffff7abd4070   112  movz x16, #0x0
0xffff7abd4074   116  sub csp, jssp, #0x10 (16)
0xffff7abd4078   120  stp fp, lr, [jssp, #-16]!
0xffff7abd407c   124  bl #+0x4 (addr 0xffff7abd4080)
0xffff7abd4080   128  movz x17, #0xa00000000
0xffff7abd4084   132  sub csp, jssp, #0x10 (16)
0xffff7abd4088   136  stp x17, cp, [jssp, #-16]!
0xffff7abd408c   140  add fp, jssp, #0x10 (16)
0xffff7abd4090   144  ldr x17, pc+24 (addr 0x0000ffff7abd40a8)    ;; lazy deoptimization bailout 0
0xffff7abd4094   148  add x17, x17, x16
0xffff7abd4098   152  br x17
0xffff7abd409c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd40a0   160  d63f03e0       constant
0xffff7abd40a4   164  d503201f       constant
0xffff7abd40a8   168  7a906000       constant
0xffff7abd40ac   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd4050  code target (STUB)  (0xffff7ab38080)
0xffff7abd4060  constant pool (size 16)
0xffff7abd4090  runtime entry
0xffff7abd409c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = rdev
compiler = unknown
Instructions (size = 152)
0xffff7abd4120     0  sub csp, jssp, #0x8 (8)
0xffff7abd4124     4  str x3, [jssp, #-8]!
0xffff7abd4128     8  sub csp, jssp, #0x8 (8)
0xffff7abd412c    12  str x4, [jssp, #-8]!
0xffff7abd4130    16  ldr x3, pc+88 (addr 0x0000ffff7abd4188)    ;; object: 0x5d4352e9 Cell for 0
0xffff7abd4134    20  ldur x3, [x3, #7]
0xffff7abd4138    24  cmp x3, #0x0 (0)
0xffff7abd413c    28  b.ne #+0x2c (addr 0xffff7abd4168)
0xffff7abd4140    32  ldr x5, pc+80 (addr 0x0000ffff7abd4190)    ;; object: 0x5d4357d1 WeakCell for 0x4ec35dc9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abd4144    36  ldur x5, [x5, #7]
0xffff7abd4148    40  tbz w5, #0, #+0x20 (addr 0xffff7abd4168)
0xffff7abd414c    44  ldursw x4, [x5, #15]
0xffff7abd4150    48  tbnz w4, #23, #+0x18 (addr 0xffff7abd4168)
0xffff7abd4154    52  ldr x4, [jssp], #8
0xffff7abd4158    56  ldr x3, [jssp], #8
0xffff7abd415c    60  ldr x2, pc+60 (addr 0x0000ffff7abd4198)    ;; object: 0x5d40d129 <String[4]: rdev>
0xffff7abd4160    64  ldr x16, pc+64 (addr 0x0000ffff7abd41a0)    ;; code: HANDLER, StoreTransitionStub, minor: 194568
0xffff7abd4164    68  br x16
0xffff7abd4168    72  ldr x2, pc+64 (addr 0x0000ffff7abd41a8)    ;; object: 0x5d40d129 <String[4]: rdev>
0xffff7abd416c    76  ldr x4, [jssp], #8
0xffff7abd4170    80  ldr x3, [jssp], #8
0xffff7abd4174    84  ldr x16, pc+60 (addr 0x0000ffff7abd41b0)    ;; code: BUILTIN
0xffff7abd4178    88  br x16
0xffff7abd417c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abd4180    96  d63f03e0       constant
0xffff7abd4184   100  d503201f       constant
0xffff7abd4188   104  5d4352e9       constant
0xffff7abd418c   108  00000000       constant
0xffff7abd4190   112  5d4357d1       constant
0xffff7abd4194   116  00000000       constant
0xffff7abd4198   120  5d40d129       constant
0xffff7abd419c   124  00000000       constant
0xffff7abd41a0   128  7abd4000       constant
0xffff7abd41a4   132  0000ffff       constant
0xffff7abd41a8   136  5d40d129       constant
0xffff7abd41ac   140  00000000       constant
0xffff7abd41b0   144  7ab22420       constant
0xffff7abd41b4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abd4130  embedded object  (0x5d4352e9 Cell for 0)
0xffff7abd4140  embedded object  (0x5d4357d1 WeakCell for 0x4ec35dc9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abd415c  embedded object  (0x5d40d129 <String[4]: rdev>)
0xffff7abd4160  code target (HANDLER)  (0xffff7abd4000)
0xffff7abd4168  embedded object  (0x5d40d129 <String[4]: rdev>)
0xffff7abd4174  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abd417c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd4220     0  tbz w0, #0, #+0x1c (addr 0xffff7abd423c)
0xffff7abd4224     4  ldur x16, [x0, #-1]
0xffff7abd4228     8  ldr x17, [x26, #120]
0xffff7abd422c    12  cmp x16, x17
0xffff7abd4230    16  b.ne #+0x60 (addr 0xffff7abd4290)
0xffff7abd4234    20  ldur d0, [x0, #7]
0xffff7abd4238    24  b #+0x8 (addr 0xffff7abd4240)
0xffff7abd423c    28  scvtf d0, x0, #32
0xffff7abd4240    32  stur d0, [x1, #71]
0xffff7abd4244    36  stur x5, [x1, #-1]
0xffff7abd4248    40  tbz w5, #0, #+0x34 (addr 0xffff7abd427c)
0xffff7abd424c    44  sub x2, x1, #0x1 (1)
0xffff7abd4250    48  and x5, x5, #0xfffffffffff00000
0xffff7abd4254    52  ldr x5, [x5, #8]
0xffff7abd4258    56  tbz w5, #1, #+0x24 (addr 0xffff7abd427c)
0xffff7abd425c    60  and x5, x1, #0xfffffffffff00000
0xffff7abd4260    64  ldr x5, [x5, #8]
0xffff7abd4264    68  tbz w5, #2, #+0x18 (addr 0xffff7abd427c)
0xffff7abd4268    72  sub csp, jssp, #0x8 (8)
0xffff7abd426c    76  str lr, [jssp, #-8]!
0xffff7abd4270    80  ldr x16, pc+24 (addr 0x0000ffff7abd4288)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd4274    84  blr x16
0xffff7abd4278    88  ldr lr, [jssp], #8
0xffff7abd427c    92  ret
0xffff7abd4280    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd4284   100  d63f03e0       constant
0xffff7abd4288   104  7ab38080       constant
0xffff7abd428c   108  0000ffff       constant
0xffff7abd4290   112  movz x16, #0x0
0xffff7abd4294   116  sub csp, jssp, #0x10 (16)
0xffff7abd4298   120  stp fp, lr, [jssp, #-16]!
0xffff7abd429c   124  bl #+0x4 (addr 0xffff7abd42a0)
0xffff7abd42a0   128  movz x17, #0xa00000000
0xffff7abd42a4   132  sub csp, jssp, #0x10 (16)
0xffff7abd42a8   136  stp x17, cp, [jssp, #-16]!
0xffff7abd42ac   140  add fp, jssp, #0x10 (16)
0xffff7abd42b0   144  ldr x17, pc+24 (addr 0x0000ffff7abd42c8)    ;; lazy deoptimization bailout 0
0xffff7abd42b4   148  add x17, x17, x16
0xffff7abd42b8   152  br x17
0xffff7abd42bc   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd42c0   160  d63f03e0       constant
0xffff7abd42c4   164  d503201f       constant
0xffff7abd42c8   168  7a906000       constant
0xffff7abd42cc   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd4270  code target (STUB)  (0xffff7ab38080)
0xffff7abd4280  constant pool (size 16)
0xffff7abd42b0  runtime entry
0xffff7abd42bc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd4220     0  tbz w0, #0, #+0x1c (addr 0xffff7abd423c)
0xffff7abd4224     4  ldur x16, [x0, #-1]
0xffff7abd4228     8  ldr x17, [x26, #120]
0xffff7abd422c    12  cmp x16, x17
0xffff7abd4230    16  b.ne #+0x60 (addr 0xffff7abd4290)
0xffff7abd4234    20  ldur d0, [x0, #7]
0xffff7abd4238    24  b #+0x8 (addr 0xffff7abd4240)
0xffff7abd423c    28  scvtf d0, x0, #32
0xffff7abd4240    32  stur d0, [x1, #71]
0xffff7abd4244    36  stur x5, [x1, #-1]
0xffff7abd4248    40  tbz w5, #0, #+0x34 (addr 0xffff7abd427c)
0xffff7abd424c    44  sub x2, x1, #0x1 (1)
0xffff7abd4250    48  and x5, x5, #0xfffffffffff00000
0xffff7abd4254    52  ldr x5, [x5, #8]
0xffff7abd4258    56  tbz w5, #1, #+0x24 (addr 0xffff7abd427c)
0xffff7abd425c    60  and x5, x1, #0xfffffffffff00000
0xffff7abd4260    64  ldr x5, [x5, #8]
0xffff7abd4264    68  tbz w5, #2, #+0x18 (addr 0xffff7abd427c)
0xffff7abd4268    72  sub csp, jssp, #0x8 (8)
0xffff7abd426c    76  str lr, [jssp, #-8]!
0xffff7abd4270    80  ldr x16, pc+24 (addr 0x0000ffff7abd4288)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd4274    84  blr x16
0xffff7abd4278    88  ldr lr, [jssp], #8
0xffff7abd427c    92  ret
0xffff7abd4280    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd4284   100  d63f03e0       constant
0xffff7abd4288   104  7ab38080       constant
0xffff7abd428c   108  0000ffff       constant
0xffff7abd4290   112  movz x16, #0x0
0xffff7abd4294   116  sub csp, jssp, #0x10 (16)
0xffff7abd4298   120  stp fp, lr, [jssp, #-16]!
0xffff7abd429c   124  bl #+0x4 (addr 0xffff7abd42a0)
0xffff7abd42a0   128  movz x17, #0xa00000000
0xffff7abd42a4   132  sub csp, jssp, #0x10 (16)
0xffff7abd42a8   136  stp x17, cp, [jssp, #-16]!
0xffff7abd42ac   140  add fp, jssp, #0x10 (16)
0xffff7abd42b0   144  ldr x17, pc+24 (addr 0x0000ffff7abd42c8)    ;; lazy deoptimization bailout 0
0xffff7abd42b4   148  add x17, x17, x16
0xffff7abd42b8   152  br x17
0xffff7abd42bc   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd42c0   160  d63f03e0       constant
0xffff7abd42c4   164  d503201f       constant
0xffff7abd42c8   168  7a906000       constant
0xffff7abd42cc   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd4270  code target (STUB)  (0xffff7ab38080)
0xffff7abd4280  constant pool (size 16)
0xffff7abd42b0  runtime entry
0xffff7abd42bc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = blksize
compiler = unknown
Instructions (size = 152)
0xffff7abd4340     0  sub csp, jssp, #0x8 (8)
0xffff7abd4344     4  str x3, [jssp, #-8]!
0xffff7abd4348     8  sub csp, jssp, #0x8 (8)
0xffff7abd434c    12  str x4, [jssp, #-8]!
0xffff7abd4350    16  ldr x3, pc+88 (addr 0x0000ffff7abd43a8)    ;; object: 0x5d4352e9 Cell for 0
0xffff7abd4354    20  ldur x3, [x3, #7]
0xffff7abd4358    24  cmp x3, #0x0 (0)
0xffff7abd435c    28  b.ne #+0x2c (addr 0xffff7abd4388)
0xffff7abd4360    32  ldr x5, pc+80 (addr 0x0000ffff7abd43b0)    ;; object: 0x5d4358c9 WeakCell for 0x4ec35e21 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abd4364    36  ldur x5, [x5, #7]
0xffff7abd4368    40  tbz w5, #0, #+0x20 (addr 0xffff7abd4388)
0xffff7abd436c    44  ldursw x4, [x5, #15]
0xffff7abd4370    48  tbnz w4, #23, #+0x18 (addr 0xffff7abd4388)
0xffff7abd4374    52  ldr x4, [jssp], #8
0xffff7abd4378    56  ldr x3, [jssp], #8
0xffff7abd437c    60  ldr x2, pc+60 (addr 0x0000ffff7abd43b8)    ;; object: 0x5d40d149 <String[7]: blksize>
0xffff7abd4380    64  ldr x16, pc+64 (addr 0x0000ffff7abd43c0)    ;; code: HANDLER, StoreTransitionStub, minor: 194569
0xffff7abd4384    68  br x16
0xffff7abd4388    72  ldr x2, pc+64 (addr 0x0000ffff7abd43c8)    ;; object: 0x5d40d149 <String[7]: blksize>
0xffff7abd438c    76  ldr x4, [jssp], #8
0xffff7abd4390    80  ldr x3, [jssp], #8
0xffff7abd4394    84  ldr x16, pc+60 (addr 0x0000ffff7abd43d0)    ;; code: BUILTIN
0xffff7abd4398    88  br x16
0xffff7abd439c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abd43a0    96  d63f03e0       constant
0xffff7abd43a4   100  d503201f       constant
0xffff7abd43a8   104  5d4352e9       constant
0xffff7abd43ac   108  00000000       constant
0xffff7abd43b0   112  5d4358c9       constant
0xffff7abd43b4   116  00000000       constant
0xffff7abd43b8   120  5d40d149       constant
0xffff7abd43bc   124  00000000       constant
0xffff7abd43c0   128  7abd4220       constant
0xffff7abd43c4   132  0000ffff       constant
0xffff7abd43c8   136  5d40d149       constant
0xffff7abd43cc   140  00000000       constant
0xffff7abd43d0   144  7ab22420       constant
0xffff7abd43d4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abd4350  embedded object  (0x5d4352e9 Cell for 0)
0xffff7abd4360  embedded object  (0x5d4358c9 WeakCell for 0x4ec35e21 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abd437c  embedded object  (0x5d40d149 <String[7]: blksize>)
0xffff7abd4380  code target (HANDLER)  (0xffff7abd4220)
0xffff7abd4388  embedded object  (0x5d40d149 <String[7]: blksize>)
0xffff7abd4394  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abd439c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd4440     0  tbz w0, #0, #+0x1c (addr 0xffff7abd445c)
0xffff7abd4444     4  ldur x16, [x0, #-1]
0xffff7abd4448     8  ldr x17, [x26, #120]
0xffff7abd444c    12  cmp x16, x17
0xffff7abd4450    16  b.ne #+0x60 (addr 0xffff7abd44b0)
0xffff7abd4454    20  ldur d0, [x0, #7]
0xffff7abd4458    24  b #+0x8 (addr 0xffff7abd4460)
0xffff7abd445c    28  scvtf d0, x0, #32
0xffff7abd4460    32  stur d0, [x1, #79]
0xffff7abd4464    36  stur x5, [x1, #-1]
0xffff7abd4468    40  tbz w5, #0, #+0x34 (addr 0xffff7abd449c)
0xffff7abd446c    44  sub x2, x1, #0x1 (1)
0xffff7abd4470    48  and x5, x5, #0xfffffffffff00000
0xffff7abd4474    52  ldr x5, [x5, #8]
0xffff7abd4478    56  tbz w5, #1, #+0x24 (addr 0xffff7abd449c)
0xffff7abd447c    60  and x5, x1, #0xfffffffffff00000
0xffff7abd4480    64  ldr x5, [x5, #8]
0xffff7abd4484    68  tbz w5, #2, #+0x18 (addr 0xffff7abd449c)
0xffff7abd4488    72  sub csp, jssp, #0x8 (8)
0xffff7abd448c    76  str lr, [jssp, #-8]!
0xffff7abd4490    80  ldr x16, pc+24 (addr 0x0000ffff7abd44a8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd4494    84  blr x16
0xffff7abd4498    88  ldr lr, [jssp], #8
0xffff7abd449c    92  ret
0xffff7abd44a0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd44a4   100  d63f03e0       constant
0xffff7abd44a8   104  7ab38080       constant
0xffff7abd44ac   108  0000ffff       constant
0xffff7abd44b0   112  movz x16, #0x0
0xffff7abd44b4   116  sub csp, jssp, #0x10 (16)
0xffff7abd44b8   120  stp fp, lr, [jssp, #-16]!
0xffff7abd44bc   124  bl #+0x4 (addr 0xffff7abd44c0)
0xffff7abd44c0   128  movz x17, #0xa00000000
0xffff7abd44c4   132  sub csp, jssp, #0x10 (16)
0xffff7abd44c8   136  stp x17, cp, [jssp, #-16]!
0xffff7abd44cc   140  add fp, jssp, #0x10 (16)
0xffff7abd44d0   144  ldr x17, pc+24 (addr 0x0000ffff7abd44e8)    ;; lazy deoptimization bailout 0
0xffff7abd44d4   148  add x17, x17, x16
0xffff7abd44d8   152  br x17
0xffff7abd44dc   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd44e0   160  d63f03e0       constant
0xffff7abd44e4   164  d503201f       constant
0xffff7abd44e8   168  7a906000       constant
0xffff7abd44ec   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd4490  code target (STUB)  (0xffff7ab38080)
0xffff7abd44a0  constant pool (size 16)
0xffff7abd44d0  runtime entry
0xffff7abd44dc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd4440     0  tbz w0, #0, #+0x1c (addr 0xffff7abd445c)
0xffff7abd4444     4  ldur x16, [x0, #-1]
0xffff7abd4448     8  ldr x17, [x26, #120]
0xffff7abd444c    12  cmp x16, x17
0xffff7abd4450    16  b.ne #+0x60 (addr 0xffff7abd44b0)
0xffff7abd4454    20  ldur d0, [x0, #7]
0xffff7abd4458    24  b #+0x8 (addr 0xffff7abd4460)
0xffff7abd445c    28  scvtf d0, x0, #32
0xffff7abd4460    32  stur d0, [x1, #79]
0xffff7abd4464    36  stur x5, [x1, #-1]
0xffff7abd4468    40  tbz w5, #0, #+0x34 (addr 0xffff7abd449c)
0xffff7abd446c    44  sub x2, x1, #0x1 (1)
0xffff7abd4470    48  and x5, x5, #0xfffffffffff00000
0xffff7abd4474    52  ldr x5, [x5, #8]
0xffff7abd4478    56  tbz w5, #1, #+0x24 (addr 0xffff7abd449c)
0xffff7abd447c    60  and x5, x1, #0xfffffffffff00000
0xffff7abd4480    64  ldr x5, [x5, #8]
0xffff7abd4484    68  tbz w5, #2, #+0x18 (addr 0xffff7abd449c)
0xffff7abd4488    72  sub csp, jssp, #0x8 (8)
0xffff7abd448c    76  str lr, [jssp, #-8]!
0xffff7abd4490    80  ldr x16, pc+24 (addr 0x0000ffff7abd44a8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd4494    84  blr x16
0xffff7abd4498    88  ldr lr, [jssp], #8
0xffff7abd449c    92  ret
0xffff7abd44a0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd44a4   100  d63f03e0       constant
0xffff7abd44a8   104  7ab38080       constant
0xffff7abd44ac   108  0000ffff       constant
0xffff7abd44b0   112  movz x16, #0x0
0xffff7abd44b4   116  sub csp, jssp, #0x10 (16)
0xffff7abd44b8   120  stp fp, lr, [jssp, #-16]!
0xffff7abd44bc   124  bl #+0x4 (addr 0xffff7abd44c0)
0xffff7abd44c0   128  movz x17, #0xa00000000
0xffff7abd44c4   132  sub csp, jssp, #0x10 (16)
0xffff7abd44c8   136  stp x17, cp, [jssp, #-16]!
0xffff7abd44cc   140  add fp, jssp, #0x10 (16)
0xffff7abd44d0   144  ldr x17, pc+24 (addr 0x0000ffff7abd44e8)    ;; lazy deoptimization bailout 0
0xffff7abd44d4   148  add x17, x17, x16
0xffff7abd44d8   152  br x17
0xffff7abd44dc   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd44e0   160  d63f03e0       constant
0xffff7abd44e4   164  d503201f       constant
0xffff7abd44e8   168  7a906000       constant
0xffff7abd44ec   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd4490  code target (STUB)  (0xffff7ab38080)
0xffff7abd44a0  constant pool (size 16)
0xffff7abd44d0  runtime entry
0xffff7abd44dc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = ino
compiler = unknown
Instructions (size = 152)
0xffff7abd4560     0  sub csp, jssp, #0x8 (8)
0xffff7abd4564     4  str x3, [jssp, #-8]!
0xffff7abd4568     8  sub csp, jssp, #0x8 (8)
0xffff7abd456c    12  str x4, [jssp, #-8]!
0xffff7abd4570    16  ldr x3, pc+88 (addr 0x0000ffff7abd45c8)    ;; object: 0x5d4352e9 Cell for 0
0xffff7abd4574    20  ldur x3, [x3, #7]
0xffff7abd4578    24  cmp x3, #0x0 (0)
0xffff7abd457c    28  b.ne #+0x2c (addr 0xffff7abd45a8)
0xffff7abd4580    32  ldr x5, pc+80 (addr 0x0000ffff7abd45d0)    ;; object: 0x5d4359c1 WeakCell for 0x4ec35e79 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abd4584    36  ldur x5, [x5, #7]
0xffff7abd4588    40  tbz w5, #0, #+0x20 (addr 0xffff7abd45a8)
0xffff7abd458c    44  ldursw x4, [x5, #15]
0xffff7abd4590    48  tbnz w4, #23, #+0x18 (addr 0xffff7abd45a8)
0xffff7abd4594    52  ldr x4, [jssp], #8
0xffff7abd4598    56  ldr x3, [jssp], #8
0xffff7abd459c    60  ldr x2, pc+60 (addr 0x0000ffff7abd45d8)    ;; object: 0x5d40d169 <String[3]: ino>
0xffff7abd45a0    64  ldr x16, pc+64 (addr 0x0000ffff7abd45e0)    ;; code: HANDLER, StoreTransitionStub, minor: 194570
0xffff7abd45a4    68  br x16
0xffff7abd45a8    72  ldr x2, pc+64 (addr 0x0000ffff7abd45e8)    ;; object: 0x5d40d169 <String[3]: ino>
0xffff7abd45ac    76  ldr x4, [jssp], #8
0xffff7abd45b0    80  ldr x3, [jssp], #8
0xffff7abd45b4    84  ldr x16, pc+60 (addr 0x0000ffff7abd45f0)    ;; code: BUILTIN
0xffff7abd45b8    88  br x16
0xffff7abd45bc    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abd45c0    96  d63f03e0       constant
0xffff7abd45c4   100  d503201f       constant
0xffff7abd45c8   104  5d4352e9       constant
0xffff7abd45cc   108  00000000       constant
0xffff7abd45d0   112  5d4359c1       constant
0xffff7abd45d4   116  00000000       constant
0xffff7abd45d8   120  5d40d169       constant
0xffff7abd45dc   124  00000000       constant
0xffff7abd45e0   128  7abd4440       constant
0xffff7abd45e4   132  0000ffff       constant
0xffff7abd45e8   136  5d40d169       constant
0xffff7abd45ec   140  00000000       constant
0xffff7abd45f0   144  7ab22420       constant
0xffff7abd45f4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abd4570  embedded object  (0x5d4352e9 Cell for 0)
0xffff7abd4580  embedded object  (0x5d4359c1 WeakCell for 0x4ec35e79 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abd459c  embedded object  (0x5d40d169 <String[3]: ino>)
0xffff7abd45a0  code target (HANDLER)  (0xffff7abd4440)
0xffff7abd45a8  embedded object  (0x5d40d169 <String[3]: ino>)
0xffff7abd45b4  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abd45bc  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd4660     0  tbz w0, #0, #+0x1c (addr 0xffff7abd467c)
0xffff7abd4664     4  ldur x16, [x0, #-1]
0xffff7abd4668     8  ldr x17, [x26, #120]
0xffff7abd466c    12  cmp x16, x17
0xffff7abd4670    16  b.ne #+0x60 (addr 0xffff7abd46d0)
0xffff7abd4674    20  ldur d0, [x0, #7]
0xffff7abd4678    24  b #+0x8 (addr 0xffff7abd4680)
0xffff7abd467c    28  scvtf d0, x0, #32
0xffff7abd4680    32  stur d0, [x1, #87]
0xffff7abd4684    36  stur x5, [x1, #-1]
0xffff7abd4688    40  tbz w5, #0, #+0x34 (addr 0xffff7abd46bc)
0xffff7abd468c    44  sub x2, x1, #0x1 (1)
0xffff7abd4690    48  and x5, x5, #0xfffffffffff00000
0xffff7abd4694    52  ldr x5, [x5, #8]
0xffff7abd4698    56  tbz w5, #1, #+0x24 (addr 0xffff7abd46bc)
0xffff7abd469c    60  and x5, x1, #0xfffffffffff00000
0xffff7abd46a0    64  ldr x5, [x5, #8]
0xffff7abd46a4    68  tbz w5, #2, #+0x18 (addr 0xffff7abd46bc)
0xffff7abd46a8    72  sub csp, jssp, #0x8 (8)
0xffff7abd46ac    76  str lr, [jssp, #-8]!
0xffff7abd46b0    80  ldr x16, pc+24 (addr 0x0000ffff7abd46c8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd46b4    84  blr x16
0xffff7abd46b8    88  ldr lr, [jssp], #8
0xffff7abd46bc    92  ret
0xffff7abd46c0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd46c4   100  d63f03e0       constant
0xffff7abd46c8   104  7ab38080       constant
0xffff7abd46cc   108  0000ffff       constant
0xffff7abd46d0   112  movz x16, #0x0
0xffff7abd46d4   116  sub csp, jssp, #0x10 (16)
0xffff7abd46d8   120  stp fp, lr, [jssp, #-16]!
0xffff7abd46dc   124  bl #+0x4 (addr 0xffff7abd46e0)
0xffff7abd46e0   128  movz x17, #0xa00000000
0xffff7abd46e4   132  sub csp, jssp, #0x10 (16)
0xffff7abd46e8   136  stp x17, cp, [jssp, #-16]!
0xffff7abd46ec   140  add fp, jssp, #0x10 (16)
0xffff7abd46f0   144  ldr x17, pc+24 (addr 0x0000ffff7abd4708)    ;; lazy deoptimization bailout 0
0xffff7abd46f4   148  add x17, x17, x16
0xffff7abd46f8   152  br x17
0xffff7abd46fc   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd4700   160  d63f03e0       constant
0xffff7abd4704   164  d503201f       constant
0xffff7abd4708   168  7a906000       constant
0xffff7abd470c   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd46b0  code target (STUB)  (0xffff7ab38080)
0xffff7abd46c0  constant pool (size 16)
0xffff7abd46f0  runtime entry
0xffff7abd46fc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd4660     0  tbz w0, #0, #+0x1c (addr 0xffff7abd467c)
0xffff7abd4664     4  ldur x16, [x0, #-1]
0xffff7abd4668     8  ldr x17, [x26, #120]
0xffff7abd466c    12  cmp x16, x17
0xffff7abd4670    16  b.ne #+0x60 (addr 0xffff7abd46d0)
0xffff7abd4674    20  ldur d0, [x0, #7]
0xffff7abd4678    24  b #+0x8 (addr 0xffff7abd4680)
0xffff7abd467c    28  scvtf d0, x0, #32
0xffff7abd4680    32  stur d0, [x1, #87]
0xffff7abd4684    36  stur x5, [x1, #-1]
0xffff7abd4688    40  tbz w5, #0, #+0x34 (addr 0xffff7abd46bc)
0xffff7abd468c    44  sub x2, x1, #0x1 (1)
0xffff7abd4690    48  and x5, x5, #0xfffffffffff00000
0xffff7abd4694    52  ldr x5, [x5, #8]
0xffff7abd4698    56  tbz w5, #1, #+0x24 (addr 0xffff7abd46bc)
0xffff7abd469c    60  and x5, x1, #0xfffffffffff00000
0xffff7abd46a0    64  ldr x5, [x5, #8]
0xffff7abd46a4    68  tbz w5, #2, #+0x18 (addr 0xffff7abd46bc)
0xffff7abd46a8    72  sub csp, jssp, #0x8 (8)
0xffff7abd46ac    76  str lr, [jssp, #-8]!
0xffff7abd46b0    80  ldr x16, pc+24 (addr 0x0000ffff7abd46c8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd46b4    84  blr x16
0xffff7abd46b8    88  ldr lr, [jssp], #8
0xffff7abd46bc    92  ret
0xffff7abd46c0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd46c4   100  d63f03e0       constant
0xffff7abd46c8   104  7ab38080       constant
0xffff7abd46cc   108  0000ffff       constant
0xffff7abd46d0   112  movz x16, #0x0
0xffff7abd46d4   116  sub csp, jssp, #0x10 (16)
0xffff7abd46d8   120  stp fp, lr, [jssp, #-16]!
0xffff7abd46dc   124  bl #+0x4 (addr 0xffff7abd46e0)
0xffff7abd46e0   128  movz x17, #0xa00000000
0xffff7abd46e4   132  sub csp, jssp, #0x10 (16)
0xffff7abd46e8   136  stp x17, cp, [jssp, #-16]!
0xffff7abd46ec   140  add fp, jssp, #0x10 (16)
0xffff7abd46f0   144  ldr x17, pc+24 (addr 0x0000ffff7abd4708)    ;; lazy deoptimization bailout 0
0xffff7abd46f4   148  add x17, x17, x16
0xffff7abd46f8   152  br x17
0xffff7abd46fc   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd4700   160  d63f03e0       constant
0xffff7abd4704   164  d503201f       constant
0xffff7abd4708   168  7a906000       constant
0xffff7abd470c   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd46b0  code target (STUB)  (0xffff7ab38080)
0xffff7abd46c0  constant pool (size 16)
0xffff7abd46f0  runtime entry
0xffff7abd46fc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = size
compiler = unknown
Instructions (size = 152)
0xffff7abd4780     0  sub csp, jssp, #0x8 (8)
0xffff7abd4784     4  str x3, [jssp, #-8]!
0xffff7abd4788     8  sub csp, jssp, #0x8 (8)
0xffff7abd478c    12  str x4, [jssp, #-8]!
0xffff7abd4790    16  ldr x3, pc+88 (addr 0x0000ffff7abd47e8)    ;; object: 0x5d4352e9 Cell for 0
0xffff7abd4794    20  ldur x3, [x3, #7]
0xffff7abd4798    24  cmp x3, #0x0 (0)
0xffff7abd479c    28  b.ne #+0x2c (addr 0xffff7abd47c8)
0xffff7abd47a0    32  ldr x5, pc+80 (addr 0x0000ffff7abd47f0)    ;; object: 0x5d435ab9 WeakCell for 0x4ec35ed1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abd47a4    36  ldur x5, [x5, #7]
0xffff7abd47a8    40  tbz w5, #0, #+0x20 (addr 0xffff7abd47c8)
0xffff7abd47ac    44  ldursw x4, [x5, #15]
0xffff7abd47b0    48  tbnz w4, #23, #+0x18 (addr 0xffff7abd47c8)
0xffff7abd47b4    52  ldr x4, [jssp], #8
0xffff7abd47b8    56  ldr x3, [jssp], #8
0xffff7abd47bc    60  ldr x2, pc+60 (addr 0x0000ffff7abd47f8)    ;; object: 0x20d89861 <String[4]: size>
0xffff7abd47c0    64  ldr x16, pc+64 (addr 0x0000ffff7abd4800)    ;; code: HANDLER, StoreTransitionStub, minor: 194571
0xffff7abd47c4    68  br x16
0xffff7abd47c8    72  ldr x2, pc+64 (addr 0x0000ffff7abd4808)    ;; object: 0x20d89861 <String[4]: size>
0xffff7abd47cc    76  ldr x4, [jssp], #8
0xffff7abd47d0    80  ldr x3, [jssp], #8
0xffff7abd47d4    84  ldr x16, pc+60 (addr 0x0000ffff7abd4810)    ;; code: BUILTIN
0xffff7abd47d8    88  br x16
0xffff7abd47dc    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abd47e0    96  d63f03e0       constant
0xffff7abd47e4   100  d503201f       constant
0xffff7abd47e8   104  5d4352e9       constant
0xffff7abd47ec   108  00000000       constant
0xffff7abd47f0   112  5d435ab9       constant
0xffff7abd47f4   116  00000000       constant
0xffff7abd47f8   120  20d89861       constant
0xffff7abd47fc   124  00000000       constant
0xffff7abd4800   128  7abd4660       constant
0xffff7abd4804   132  0000ffff       constant
0xffff7abd4808   136  20d89861       constant
0xffff7abd480c   140  00000000       constant
0xffff7abd4810   144  7ab22420       constant
0xffff7abd4814   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abd4790  embedded object  (0x5d4352e9 Cell for 0)
0xffff7abd47a0  embedded object  (0x5d435ab9 WeakCell for 0x4ec35ed1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abd47bc  embedded object  (0x20d89861 <String[4]: size>)
0xffff7abd47c0  code target (HANDLER)  (0xffff7abd4660)
0xffff7abd47c8  embedded object  (0x20d89861 <String[4]: size>)
0xffff7abd47d4  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abd47dc  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd4880     0  tbz w0, #0, #+0x1c (addr 0xffff7abd489c)
0xffff7abd4884     4  ldur x16, [x0, #-1]
0xffff7abd4888     8  ldr x17, [x26, #120]
0xffff7abd488c    12  cmp x16, x17
0xffff7abd4890    16  b.ne #+0x60 (addr 0xffff7abd48f0)
0xffff7abd4894    20  ldur d0, [x0, #7]
0xffff7abd4898    24  b #+0x8 (addr 0xffff7abd48a0)
0xffff7abd489c    28  scvtf d0, x0, #32
0xffff7abd48a0    32  stur d0, [x1, #95]
0xffff7abd48a4    36  stur x5, [x1, #-1]
0xffff7abd48a8    40  tbz w5, #0, #+0x34 (addr 0xffff7abd48dc)
0xffff7abd48ac    44  sub x2, x1, #0x1 (1)
0xffff7abd48b0    48  and x5, x5, #0xfffffffffff00000
0xffff7abd48b4    52  ldr x5, [x5, #8]
0xffff7abd48b8    56  tbz w5, #1, #+0x24 (addr 0xffff7abd48dc)
0xffff7abd48bc    60  and x5, x1, #0xfffffffffff00000
0xffff7abd48c0    64  ldr x5, [x5, #8]
0xffff7abd48c4    68  tbz w5, #2, #+0x18 (addr 0xffff7abd48dc)
0xffff7abd48c8    72  sub csp, jssp, #0x8 (8)
0xffff7abd48cc    76  str lr, [jssp, #-8]!
0xffff7abd48d0    80  ldr x16, pc+24 (addr 0x0000ffff7abd48e8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd48d4    84  blr x16
0xffff7abd48d8    88  ldr lr, [jssp], #8
0xffff7abd48dc    92  ret
0xffff7abd48e0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd48e4   100  d63f03e0       constant
0xffff7abd48e8   104  7ab38080       constant
0xffff7abd48ec   108  0000ffff       constant
0xffff7abd48f0   112  movz x16, #0x0
0xffff7abd48f4   116  sub csp, jssp, #0x10 (16)
0xffff7abd48f8   120  stp fp, lr, [jssp, #-16]!
0xffff7abd48fc   124  bl #+0x4 (addr 0xffff7abd4900)
0xffff7abd4900   128  movz x17, #0xa00000000
0xffff7abd4904   132  sub csp, jssp, #0x10 (16)
0xffff7abd4908   136  stp x17, cp, [jssp, #-16]!
0xffff7abd490c   140  add fp, jssp, #0x10 (16)
0xffff7abd4910   144  ldr x17, pc+24 (addr 0x0000ffff7abd4928)    ;; lazy deoptimization bailout 0
0xffff7abd4914   148  add x17, x17, x16
0xffff7abd4918   152  br x17
0xffff7abd491c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd4920   160  d63f03e0       constant
0xffff7abd4924   164  d503201f       constant
0xffff7abd4928   168  7a906000       constant
0xffff7abd492c   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd48d0  code target (STUB)  (0xffff7ab38080)
0xffff7abd48e0  constant pool (size 16)
0xffff7abd4910  runtime entry
0xffff7abd491c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abd4880     0  tbz w0, #0, #+0x1c (addr 0xffff7abd489c)
0xffff7abd4884     4  ldur x16, [x0, #-1]
0xffff7abd4888     8  ldr x17, [x26, #120]
0xffff7abd488c    12  cmp x16, x17
0xffff7abd4890    16  b.ne #+0x60 (addr 0xffff7abd48f0)
0xffff7abd4894    20  ldur d0, [x0, #7]
0xffff7abd4898    24  b #+0x8 (addr 0xffff7abd48a0)
0xffff7abd489c    28  scvtf d0, x0, #32
0xffff7abd48a0    32  stur d0, [x1, #95]
0xffff7abd48a4    36  stur x5, [x1, #-1]
0xffff7abd48a8    40  tbz w5, #0, #+0x34 (addr 0xffff7abd48dc)
0xffff7abd48ac    44  sub x2, x1, #0x1 (1)
0xffff7abd48b0    48  and x5, x5, #0xfffffffffff00000
0xffff7abd48b4    52  ldr x5, [x5, #8]
0xffff7abd48b8    56  tbz w5, #1, #+0x24 (addr 0xffff7abd48dc)
0xffff7abd48bc    60  and x5, x1, #0xfffffffffff00000
0xffff7abd48c0    64  ldr x5, [x5, #8]
0xffff7abd48c4    68  tbz w5, #2, #+0x18 (addr 0xffff7abd48dc)
0xffff7abd48c8    72  sub csp, jssp, #0x8 (8)
0xffff7abd48cc    76  str lr, [jssp, #-8]!
0xffff7abd48d0    80  ldr x16, pc+24 (addr 0x0000ffff7abd48e8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd48d4    84  blr x16
0xffff7abd48d8    88  ldr lr, [jssp], #8
0xffff7abd48dc    92  ret
0xffff7abd48e0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abd48e4   100  d63f03e0       constant
0xffff7abd48e8   104  7ab38080       constant
0xffff7abd48ec   108  0000ffff       constant
0xffff7abd48f0   112  movz x16, #0x0
0xffff7abd48f4   116  sub csp, jssp, #0x10 (16)
0xffff7abd48f8   120  stp fp, lr, [jssp, #-16]!
0xffff7abd48fc   124  bl #+0x4 (addr 0xffff7abd4900)
0xffff7abd4900   128  movz x17, #0xa00000000
0xffff7abd4904   132  sub csp, jssp, #0x10 (16)
0xffff7abd4908   136  stp x17, cp, [jssp, #-16]!
0xffff7abd490c   140  add fp, jssp, #0x10 (16)
0xffff7abd4910   144  ldr x17, pc+24 (addr 0x0000ffff7abd4928)    ;; lazy deoptimization bailout 0
0xffff7abd4914   148  add x17, x17, x16
0xffff7abd4918   152  br x17
0xffff7abd491c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd4920   160  d63f03e0       constant
0xffff7abd4924   164  d503201f       constant
0xffff7abd4928   168  7a906000       constant
0xffff7abd492c   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0xffff7abd48d0  code target (STUB)  (0xffff7ab38080)
0xffff7abd48e0  constant pool (size 16)
0xffff7abd4910  runtime entry
0xffff7abd491c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = blocks
compiler = unknown
Instructions (size = 152)
0xffff7abd49a0     0  sub csp, jssp, #0x8 (8)
0xffff7abd49a4     4  str x3, [jssp, #-8]!
0xffff7abd49a8     8  sub csp, jssp, #0x8 (8)
0xffff7abd49ac    12  str x4, [jssp, #-8]!
0xffff7abd49b0    16  ldr x3, pc+88 (addr 0x0000ffff7abd4a08)    ;; object: 0x5d4352e9 Cell for 0
0xffff7abd49b4    20  ldur x3, [x3, #7]
0xffff7abd49b8    24  cmp x3, #0x0 (0)
0xffff7abd49bc    28  b.ne #+0x2c (addr 0xffff7abd49e8)
0xffff7abd49c0    32  ldr x5, pc+80 (addr 0x0000ffff7abd4a10)    ;; object: 0x5d435bb1 WeakCell for 0x4ec35f29 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abd49c4    36  ldur x5, [x5, #7]
0xffff7abd49c8    40  tbz w5, #0, #+0x20 (addr 0xffff7abd49e8)
0xffff7abd49cc    44  ldursw x4, [x5, #15]
0xffff7abd49d0    48  tbnz w4, #23, #+0x18 (addr 0xffff7abd49e8)
0xffff7abd49d4    52  ldr x4, [jssp], #8
0xffff7abd49d8    56  ldr x3, [jssp], #8
0xffff7abd49dc    60  ldr x2, pc+60 (addr 0x0000ffff7abd4a18)    ;; object: 0x5d40d189 <String[6]: blocks>
0xffff7abd49e0    64  ldr x16, pc+64 (addr 0x0000ffff7abd4a20)    ;; code: HANDLER, StoreTransitionStub, minor: 194572
0xffff7abd49e4    68  br x16
0xffff7abd49e8    72  ldr x2, pc+64 (addr 0x0000ffff7abd4a28)    ;; object: 0x5d40d189 <String[6]: blocks>
0xffff7abd49ec    76  ldr x4, [jssp], #8
0xffff7abd49f0    80  ldr x3, [jssp], #8
0xffff7abd49f4    84  ldr x16, pc+60 (addr 0x0000ffff7abd4a30)    ;; code: BUILTIN
0xffff7abd49f8    88  br x16
0xffff7abd49fc    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abd4a00    96  d63f03e0       constant
0xffff7abd4a04   100  d503201f       constant
0xffff7abd4a08   104  5d4352e9       constant
0xffff7abd4a0c   108  00000000       constant
0xffff7abd4a10   112  5d435bb1       constant
0xffff7abd4a14   116  00000000       constant
0xffff7abd4a18   120  5d40d189       constant
0xffff7abd4a1c   124  00000000       constant
0xffff7abd4a20   128  7abd4880       constant
0xffff7abd4a24   132  0000ffff       constant
0xffff7abd4a28   136  5d40d189       constant
0xffff7abd4a2c   140  00000000       constant
0xffff7abd4a30   144  7ab22420       constant
0xffff7abd4a34   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abd49b0  embedded object  (0x5d4352e9 Cell for 0)
0xffff7abd49c0  embedded object  (0x5d435bb1 WeakCell for 0x4ec35f29 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abd49dc  embedded object  (0x5d40d189 <String[6]: blocks>)
0xffff7abd49e0  code target (HANDLER)  (0xffff7abd4880)
0xffff7abd49e8  embedded object  (0x5d40d189 <String[6]: blocks>)
0xffff7abd49f4  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abd49fc  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abd4aa0     0  tbz w0, #0, #+0x90 (addr 0xffff7abd4b30)
0xffff7abd4aa4     4  mov x2, x0
0xffff7abd4aa8     8  stur x2, [x1, #103]
0xffff7abd4aac    12  add x3, x1, #0x67 (103)
0xffff7abd4ab0    16  and x2, x2, #0xfffffffffff00000
0xffff7abd4ab4    20  ldr x2, [x2, #8]
0xffff7abd4ab8    24  tbz w2, #1, #+0x24 (addr 0xffff7abd4adc)
0xffff7abd4abc    28  and x2, x1, #0xfffffffffff00000
0xffff7abd4ac0    32  ldr x2, [x2, #8]
0xffff7abd4ac4    36  tbz w2, #2, #+0x18 (addr 0xffff7abd4adc)
0xffff7abd4ac8    40  sub csp, jssp, #0x8 (8)
0xffff7abd4acc    44  str lr, [jssp, #-8]!
0xffff7abd4ad0    48  ldr x16, pc+80 (addr 0x0000ffff7abd4b20)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abd4ad4    52  blr x16
0xffff7abd4ad8    56  ldr lr, [jssp], #8
0xffff7abd4adc    60  stur x5, [x1, #-1]
0xffff7abd4ae0    64  tbz w5, #0, #+0x34 (addr 0xffff7abd4b14)
0xffff7abd4ae4    68  sub x2, x1, #0x1 (1)
0xffff7abd4ae8    72  and x5, x5, #0xfffffffffff00000
0xffff7abd4aec    76  ldr x5, [x5, #8]
0xffff7abd4af0    80  tbz w5, #1, #+0x24 (addr 0xffff7abd4b14)
0xffff7abd4af4    84  and x5, x1, #0xfffffffffff00000
0xffff7abd4af8    88  ldr x5, [x5, #8]
0xffff7abd4afc    92  tbz w5, #2, #+0x18 (addr 0xffff7abd4b14)
0xffff7abd4b00    96  sub csp, jssp, #0x8 (8)
0xffff7abd4b04   100  str lr, [jssp, #-8]!
0xffff7abd4b08   104  ldr x16, pc+32 (addr 0x0000ffff7abd4b28)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd4b0c   108  blr x16
0xffff7abd4b10   112  ldr lr, [jssp], #8
0xffff7abd4b14   116  ret
0xffff7abd4b18   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abd4b1c   124  d63f03e0       constant
0xffff7abd4b20   128  7ab170c0       constant
0xffff7abd4b24   132  0000ffff       constant
0xffff7abd4b28   136  7ab38080       constant
0xffff7abd4b2c   140  0000ffff       constant
0xffff7abd4b30   144  movz x16, #0x0
0xffff7abd4b34   148  sub csp, jssp, #0x10 (16)
0xffff7abd4b38   152  stp fp, lr, [jssp, #-16]!
0xffff7abd4b3c   156  bl #+0x4 (addr 0xffff7abd4b40)
0xffff7abd4b40   160  movz x17, #0xa00000000
0xffff7abd4b44   164  sub csp, jssp, #0x10 (16)
0xffff7abd4b48   168  stp x17, cp, [jssp, #-16]!
0xffff7abd4b4c   172  add fp, jssp, #0x10 (16)
0xffff7abd4b50   176  ldr x17, pc+24 (addr 0x0000ffff7abd4b68)    ;; lazy deoptimization bailout 0
0xffff7abd4b54   180  add x17, x17, x16
0xffff7abd4b58   184  br x17
0xffff7abd4b5c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd4b60   192  d63f03e0       constant
0xffff7abd4b64   196  d503201f       constant
0xffff7abd4b68   200  7a906000       constant
0xffff7abd4b6c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abd4ad0  code target (STUB)  (0xffff7ab170c0)
0xffff7abd4b08  code target (STUB)  (0xffff7ab38080)
0xffff7abd4b18  constant pool (size 24)
0xffff7abd4b50  runtime entry
0xffff7abd4b5c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abd4aa0     0  tbz w0, #0, #+0x90 (addr 0xffff7abd4b30)
0xffff7abd4aa4     4  mov x2, x0
0xffff7abd4aa8     8  stur x2, [x1, #103]
0xffff7abd4aac    12  add x3, x1, #0x67 (103)
0xffff7abd4ab0    16  and x2, x2, #0xfffffffffff00000
0xffff7abd4ab4    20  ldr x2, [x2, #8]
0xffff7abd4ab8    24  tbz w2, #1, #+0x24 (addr 0xffff7abd4adc)
0xffff7abd4abc    28  and x2, x1, #0xfffffffffff00000
0xffff7abd4ac0    32  ldr x2, [x2, #8]
0xffff7abd4ac4    36  tbz w2, #2, #+0x18 (addr 0xffff7abd4adc)
0xffff7abd4ac8    40  sub csp, jssp, #0x8 (8)
0xffff7abd4acc    44  str lr, [jssp, #-8]!
0xffff7abd4ad0    48  ldr x16, pc+80 (addr 0x0000ffff7abd4b20)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abd4ad4    52  blr x16
0xffff7abd4ad8    56  ldr lr, [jssp], #8
0xffff7abd4adc    60  stur x5, [x1, #-1]
0xffff7abd4ae0    64  tbz w5, #0, #+0x34 (addr 0xffff7abd4b14)
0xffff7abd4ae4    68  sub x2, x1, #0x1 (1)
0xffff7abd4ae8    72  and x5, x5, #0xfffffffffff00000
0xffff7abd4aec    76  ldr x5, [x5, #8]
0xffff7abd4af0    80  tbz w5, #1, #+0x24 (addr 0xffff7abd4b14)
0xffff7abd4af4    84  and x5, x1, #0xfffffffffff00000
0xffff7abd4af8    88  ldr x5, [x5, #8]
0xffff7abd4afc    92  tbz w5, #2, #+0x18 (addr 0xffff7abd4b14)
0xffff7abd4b00    96  sub csp, jssp, #0x8 (8)
0xffff7abd4b04   100  str lr, [jssp, #-8]!
0xffff7abd4b08   104  ldr x16, pc+32 (addr 0x0000ffff7abd4b28)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd4b0c   108  blr x16
0xffff7abd4b10   112  ldr lr, [jssp], #8
0xffff7abd4b14   116  ret
0xffff7abd4b18   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abd4b1c   124  d63f03e0       constant
0xffff7abd4b20   128  7ab170c0       constant
0xffff7abd4b24   132  0000ffff       constant
0xffff7abd4b28   136  7ab38080       constant
0xffff7abd4b2c   140  0000ffff       constant
0xffff7abd4b30   144  movz x16, #0x0
0xffff7abd4b34   148  sub csp, jssp, #0x10 (16)
0xffff7abd4b38   152  stp fp, lr, [jssp, #-16]!
0xffff7abd4b3c   156  bl #+0x4 (addr 0xffff7abd4b40)
0xffff7abd4b40   160  movz x17, #0xa00000000
0xffff7abd4b44   164  sub csp, jssp, #0x10 (16)
0xffff7abd4b48   168  stp x17, cp, [jssp, #-16]!
0xffff7abd4b4c   172  add fp, jssp, #0x10 (16)
0xffff7abd4b50   176  ldr x17, pc+24 (addr 0x0000ffff7abd4b68)    ;; lazy deoptimization bailout 0
0xffff7abd4b54   180  add x17, x17, x16
0xffff7abd4b58   184  br x17
0xffff7abd4b5c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd4b60   192  d63f03e0       constant
0xffff7abd4b64   196  d503201f       constant
0xffff7abd4b68   200  7a906000       constant
0xffff7abd4b6c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abd4ad0  code target (STUB)  (0xffff7ab170c0)
0xffff7abd4b08  code target (STUB)  (0xffff7ab38080)
0xffff7abd4b18  constant pool (size 24)
0xffff7abd4b50  runtime entry
0xffff7abd4b5c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = atime
compiler = unknown
Instructions (size = 184)
0xffff7abd4be0     0  sub csp, jssp, #0x8 (8)
0xffff7abd4be4     4  str x3, [jssp, #-8]!
0xffff7abd4be8     8  sub csp, jssp, #0x8 (8)
0xffff7abd4bec    12  str x4, [jssp, #-8]!
0xffff7abd4bf0    16  ldr x3, pc+112 (addr 0x0000ffff7abd4c60)    ;; object: 0x5d4352e9 Cell for 0
0xffff7abd4bf4    20  ldur x3, [x3, #7]
0xffff7abd4bf8    24  cmp x3, #0x0 (0)
0xffff7abd4bfc    28  b.ne #+0x44 (addr 0xffff7abd4c40)
0xffff7abd4c00    32  tbz w0, #0, #+0x40 (addr 0xffff7abd4c40)
0xffff7abd4c04    36  ldur x3, [x0, #-1]
0xffff7abd4c08    40  ldr x4, pc+96 (addr 0x0000ffff7abd4c68)    ;; object: 0x5d434909 WeakCell for 0x4ec07e29 <Map(FAST_HOLEY_SMI_ELEMENTS)>
0xffff7abd4c0c    44  ldur x4, [x4, #7]
0xffff7abd4c10    48  cmp x3, x4
0xffff7abd4c14    52  b.ne #+0x2c (addr 0xffff7abd4c40)
0xffff7abd4c18    56  ldr x5, pc+88 (addr 0x0000ffff7abd4c70)    ;; object: 0x5d435ca9 WeakCell for 0x4ec35f81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abd4c1c    60  ldur x5, [x5, #7]
0xffff7abd4c20    64  tbz w5, #0, #+0x20 (addr 0xffff7abd4c40)
0xffff7abd4c24    68  ldursw x4, [x5, #15]
0xffff7abd4c28    72  tbnz w4, #23, #+0x18 (addr 0xffff7abd4c40)
0xffff7abd4c2c    76  ldr x4, [jssp], #8
0xffff7abd4c30    80  ldr x3, [jssp], #8
0xffff7abd4c34    84  ldr x2, pc+68 (addr 0x0000ffff7abd4c78)    ;; object: 0x5d40d249 <String[5]: atime>
0xffff7abd4c38    88  ldr x16, pc+72 (addr 0x0000ffff7abd4c80)    ;; code: HANDLER, StoreTransitionStub, minor: 198669
0xffff7abd4c3c    92  br x16
0xffff7abd4c40    96  ldr x2, pc+72 (addr 0x0000ffff7abd4c88)    ;; object: 0x5d40d249 <String[5]: atime>
0xffff7abd4c44   100  ldr x4, [jssp], #8
0xffff7abd4c48   104  ldr x3, [jssp], #8
0xffff7abd4c4c   108  ldr x16, pc+68 (addr 0x0000ffff7abd4c90)    ;; code: BUILTIN
0xffff7abd4c50   112  br x16
0xffff7abd4c54   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abd4c58   120  d63f03e0       constant
0xffff7abd4c5c   124  d503201f       constant
0xffff7abd4c60   128  5d4352e9       constant
0xffff7abd4c64   132  00000000       constant
0xffff7abd4c68   136  5d434909       constant
0xffff7abd4c6c   140  00000000       constant
0xffff7abd4c70   144  5d435ca9       constant
0xffff7abd4c74   148  00000000       constant
0xffff7abd4c78   152  5d40d249       constant
0xffff7abd4c7c   156  00000000       constant
0xffff7abd4c80   160  7abd4aa0       constant
0xffff7abd4c84   164  0000ffff       constant
0xffff7abd4c88   168  5d40d249       constant
0xffff7abd4c8c   172  00000000       constant
0xffff7abd4c90   176  7ab22420       constant
0xffff7abd4c94   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abd4bf0  embedded object  (0x5d4352e9 Cell for 0)
0xffff7abd4c08  embedded object  (0x5d434909 WeakCell for 0x4ec07e29 <Map(FAST_HOLEY_SMI_ELEMENTS)>)
0xffff7abd4c18  embedded object  (0x5d435ca9 WeakCell for 0x4ec35f81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abd4c34  embedded object  (0x5d40d249 <String[5]: atime>)
0xffff7abd4c38  code target (HANDLER)  (0xffff7abd4aa0)
0xffff7abd4c40  embedded object  (0x5d40d249 <String[5]: atime>)
0xffff7abd4c4c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abd4c54  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abd4d00     0  tbz w0, #0, #+0x90 (addr 0xffff7abd4d90)
0xffff7abd4d04     4  mov x2, x0
0xffff7abd4d08     8  stur x2, [x1, #111]
0xffff7abd4d0c    12  add x3, x1, #0x6f (111)
0xffff7abd4d10    16  and x2, x2, #0xfffffffffff00000
0xffff7abd4d14    20  ldr x2, [x2, #8]
0xffff7abd4d18    24  tbz w2, #1, #+0x24 (addr 0xffff7abd4d3c)
0xffff7abd4d1c    28  and x2, x1, #0xfffffffffff00000
0xffff7abd4d20    32  ldr x2, [x2, #8]
0xffff7abd4d24    36  tbz w2, #2, #+0x18 (addr 0xffff7abd4d3c)
0xffff7abd4d28    40  sub csp, jssp, #0x8 (8)
0xffff7abd4d2c    44  str lr, [jssp, #-8]!
0xffff7abd4d30    48  ldr x16, pc+80 (addr 0x0000ffff7abd4d80)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abd4d34    52  blr x16
0xffff7abd4d38    56  ldr lr, [jssp], #8
0xffff7abd4d3c    60  stur x5, [x1, #-1]
0xffff7abd4d40    64  tbz w5, #0, #+0x34 (addr 0xffff7abd4d74)
0xffff7abd4d44    68  sub x2, x1, #0x1 (1)
0xffff7abd4d48    72  and x5, x5, #0xfffffffffff00000
0xffff7abd4d4c    76  ldr x5, [x5, #8]
0xffff7abd4d50    80  tbz w5, #1, #+0x24 (addr 0xffff7abd4d74)
0xffff7abd4d54    84  and x5, x1, #0xfffffffffff00000
0xffff7abd4d58    88  ldr x5, [x5, #8]
0xffff7abd4d5c    92  tbz w5, #2, #+0x18 (addr 0xffff7abd4d74)
0xffff7abd4d60    96  sub csp, jssp, #0x8 (8)
0xffff7abd4d64   100  str lr, [jssp, #-8]!
0xffff7abd4d68   104  ldr x16, pc+32 (addr 0x0000ffff7abd4d88)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd4d6c   108  blr x16
0xffff7abd4d70   112  ldr lr, [jssp], #8
0xffff7abd4d74   116  ret
0xffff7abd4d78   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abd4d7c   124  d63f03e0       constant
0xffff7abd4d80   128  7ab170c0       constant
0xffff7abd4d84   132  0000ffff       constant
0xffff7abd4d88   136  7ab38080       constant
0xffff7abd4d8c   140  0000ffff       constant
0xffff7abd4d90   144  movz x16, #0x0
0xffff7abd4d94   148  sub csp, jssp, #0x10 (16)
0xffff7abd4d98   152  stp fp, lr, [jssp, #-16]!
0xffff7abd4d9c   156  bl #+0x4 (addr 0xffff7abd4da0)
0xffff7abd4da0   160  movz x17, #0xa00000000
0xffff7abd4da4   164  sub csp, jssp, #0x10 (16)
0xffff7abd4da8   168  stp x17, cp, [jssp, #-16]!
0xffff7abd4dac   172  add fp, jssp, #0x10 (16)
0xffff7abd4db0   176  ldr x17, pc+24 (addr 0x0000ffff7abd4dc8)    ;; lazy deoptimization bailout 0
0xffff7abd4db4   180  add x17, x17, x16
0xffff7abd4db8   184  br x17
0xffff7abd4dbc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd4dc0   192  d63f03e0       constant
0xffff7abd4dc4   196  d503201f       constant
0xffff7abd4dc8   200  7a906000       constant
0xffff7abd4dcc   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abd4d30  code target (STUB)  (0xffff7ab170c0)
0xffff7abd4d68  code target (STUB)  (0xffff7ab38080)
0xffff7abd4d78  constant pool (size 24)
0xffff7abd4db0  runtime entry
0xffff7abd4dbc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abd4d00     0  tbz w0, #0, #+0x90 (addr 0xffff7abd4d90)
0xffff7abd4d04     4  mov x2, x0
0xffff7abd4d08     8  stur x2, [x1, #111]
0xffff7abd4d0c    12  add x3, x1, #0x6f (111)
0xffff7abd4d10    16  and x2, x2, #0xfffffffffff00000
0xffff7abd4d14    20  ldr x2, [x2, #8]
0xffff7abd4d18    24  tbz w2, #1, #+0x24 (addr 0xffff7abd4d3c)
0xffff7abd4d1c    28  and x2, x1, #0xfffffffffff00000
0xffff7abd4d20    32  ldr x2, [x2, #8]
0xffff7abd4d24    36  tbz w2, #2, #+0x18 (addr 0xffff7abd4d3c)
0xffff7abd4d28    40  sub csp, jssp, #0x8 (8)
0xffff7abd4d2c    44  str lr, [jssp, #-8]!
0xffff7abd4d30    48  ldr x16, pc+80 (addr 0x0000ffff7abd4d80)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abd4d34    52  blr x16
0xffff7abd4d38    56  ldr lr, [jssp], #8
0xffff7abd4d3c    60  stur x5, [x1, #-1]
0xffff7abd4d40    64  tbz w5, #0, #+0x34 (addr 0xffff7abd4d74)
0xffff7abd4d44    68  sub x2, x1, #0x1 (1)
0xffff7abd4d48    72  and x5, x5, #0xfffffffffff00000
0xffff7abd4d4c    76  ldr x5, [x5, #8]
0xffff7abd4d50    80  tbz w5, #1, #+0x24 (addr 0xffff7abd4d74)
0xffff7abd4d54    84  and x5, x1, #0xfffffffffff00000
0xffff7abd4d58    88  ldr x5, [x5, #8]
0xffff7abd4d5c    92  tbz w5, #2, #+0x18 (addr 0xffff7abd4d74)
0xffff7abd4d60    96  sub csp, jssp, #0x8 (8)
0xffff7abd4d64   100  str lr, [jssp, #-8]!
0xffff7abd4d68   104  ldr x16, pc+32 (addr 0x0000ffff7abd4d88)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd4d6c   108  blr x16
0xffff7abd4d70   112  ldr lr, [jssp], #8
0xffff7abd4d74   116  ret
0xffff7abd4d78   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abd4d7c   124  d63f03e0       constant
0xffff7abd4d80   128  7ab170c0       constant
0xffff7abd4d84   132  0000ffff       constant
0xffff7abd4d88   136  7ab38080       constant
0xffff7abd4d8c   140  0000ffff       constant
0xffff7abd4d90   144  movz x16, #0x0
0xffff7abd4d94   148  sub csp, jssp, #0x10 (16)
0xffff7abd4d98   152  stp fp, lr, [jssp, #-16]!
0xffff7abd4d9c   156  bl #+0x4 (addr 0xffff7abd4da0)
0xffff7abd4da0   160  movz x17, #0xa00000000
0xffff7abd4da4   164  sub csp, jssp, #0x10 (16)
0xffff7abd4da8   168  stp x17, cp, [jssp, #-16]!
0xffff7abd4dac   172  add fp, jssp, #0x10 (16)
0xffff7abd4db0   176  ldr x17, pc+24 (addr 0x0000ffff7abd4dc8)    ;; lazy deoptimization bailout 0
0xffff7abd4db4   180  add x17, x17, x16
0xffff7abd4db8   184  br x17
0xffff7abd4dbc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd4dc0   192  d63f03e0       constant
0xffff7abd4dc4   196  d503201f       constant
0xffff7abd4dc8   200  7a906000       constant
0xffff7abd4dcc   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abd4d30  code target (STUB)  (0xffff7ab170c0)
0xffff7abd4d68  code target (STUB)  (0xffff7ab38080)
0xffff7abd4d78  constant pool (size 24)
0xffff7abd4db0  runtime entry
0xffff7abd4dbc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = mtime
compiler = unknown
Instructions (size = 184)
0xffff7abd4e40     0  sub csp, jssp, #0x8 (8)
0xffff7abd4e44     4  str x3, [jssp, #-8]!
0xffff7abd4e48     8  sub csp, jssp, #0x8 (8)
0xffff7abd4e4c    12  str x4, [jssp, #-8]!
0xffff7abd4e50    16  ldr x3, pc+112 (addr 0x0000ffff7abd4ec0)    ;; object: 0x5d4352e9 Cell for 0
0xffff7abd4e54    20  ldur x3, [x3, #7]
0xffff7abd4e58    24  cmp x3, #0x0 (0)
0xffff7abd4e5c    28  b.ne #+0x44 (addr 0xffff7abd4ea0)
0xffff7abd4e60    32  tbz w0, #0, #+0x40 (addr 0xffff7abd4ea0)
0xffff7abd4e64    36  ldur x3, [x0, #-1]
0xffff7abd4e68    40  ldr x4, pc+96 (addr 0x0000ffff7abd4ec8)    ;; object: 0x5d434909 WeakCell for 0x4ec07e29 <Map(FAST_HOLEY_SMI_ELEMENTS)>
0xffff7abd4e6c    44  ldur x4, [x4, #7]
0xffff7abd4e70    48  cmp x3, x4
0xffff7abd4e74    52  b.ne #+0x2c (addr 0xffff7abd4ea0)
0xffff7abd4e78    56  ldr x5, pc+88 (addr 0x0000ffff7abd4ed0)    ;; object: 0x5d435d99 WeakCell for 0x4ec35fd9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abd4e7c    60  ldur x5, [x5, #7]
0xffff7abd4e80    64  tbz w5, #0, #+0x20 (addr 0xffff7abd4ea0)
0xffff7abd4e84    68  ldursw x4, [x5, #15]
0xffff7abd4e88    72  tbnz w4, #23, #+0x18 (addr 0xffff7abd4ea0)
0xffff7abd4e8c    76  ldr x4, [jssp], #8
0xffff7abd4e90    80  ldr x3, [jssp], #8
0xffff7abd4e94    84  ldr x2, pc+68 (addr 0x0000ffff7abd4ed8)    ;; object: 0x5d40d269 <String[5]: mtime>
0xffff7abd4e98    88  ldr x16, pc+72 (addr 0x0000ffff7abd4ee0)    ;; code: HANDLER, StoreTransitionStub, minor: 198670
0xffff7abd4e9c    92  br x16
0xffff7abd4ea0    96  ldr x2, pc+72 (addr 0x0000ffff7abd4ee8)    ;; object: 0x5d40d269 <String[5]: mtime>
0xffff7abd4ea4   100  ldr x4, [jssp], #8
0xffff7abd4ea8   104  ldr x3, [jssp], #8
0xffff7abd4eac   108  ldr x16, pc+68 (addr 0x0000ffff7abd4ef0)    ;; code: BUILTIN
0xffff7abd4eb0   112  br x16
0xffff7abd4eb4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abd4eb8   120  d63f03e0       constant
0xffff7abd4ebc   124  d503201f       constant
0xffff7abd4ec0   128  5d4352e9       constant
0xffff7abd4ec4   132  00000000       constant
0xffff7abd4ec8   136  5d434909       constant
0xffff7abd4ecc   140  00000000       constant
0xffff7abd4ed0   144  5d435d99       constant
0xffff7abd4ed4   148  00000000       constant
0xffff7abd4ed8   152  5d40d269       constant
0xffff7abd4edc   156  00000000       constant
0xffff7abd4ee0   160  7abd4d00       constant
0xffff7abd4ee4   164  0000ffff       constant
0xffff7abd4ee8   168  5d40d269       constant
0xffff7abd4eec   172  00000000       constant
0xffff7abd4ef0   176  7ab22420       constant
0xffff7abd4ef4   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abd4e50  embedded object  (0x5d4352e9 Cell for 0)
0xffff7abd4e68  embedded object  (0x5d434909 WeakCell for 0x4ec07e29 <Map(FAST_HOLEY_SMI_ELEMENTS)>)
0xffff7abd4e78  embedded object  (0x5d435d99 WeakCell for 0x4ec35fd9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abd4e94  embedded object  (0x5d40d269 <String[5]: mtime>)
0xffff7abd4e98  code target (HANDLER)  (0xffff7abd4d00)
0xffff7abd4ea0  embedded object  (0x5d40d269 <String[5]: mtime>)
0xffff7abd4eac  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abd4eb4  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abd4f60     0  tbz w0, #0, #+0x90 (addr 0xffff7abd4ff0)
0xffff7abd4f64     4  mov x2, x0
0xffff7abd4f68     8  stur x2, [x1, #119]
0xffff7abd4f6c    12  add x3, x1, #0x77 (119)
0xffff7abd4f70    16  and x2, x2, #0xfffffffffff00000
0xffff7abd4f74    20  ldr x2, [x2, #8]
0xffff7abd4f78    24  tbz w2, #1, #+0x24 (addr 0xffff7abd4f9c)
0xffff7abd4f7c    28  and x2, x1, #0xfffffffffff00000
0xffff7abd4f80    32  ldr x2, [x2, #8]
0xffff7abd4f84    36  tbz w2, #2, #+0x18 (addr 0xffff7abd4f9c)
0xffff7abd4f88    40  sub csp, jssp, #0x8 (8)
0xffff7abd4f8c    44  str lr, [jssp, #-8]!
0xffff7abd4f90    48  ldr x16, pc+80 (addr 0x0000ffff7abd4fe0)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abd4f94    52  blr x16
0xffff7abd4f98    56  ldr lr, [jssp], #8
0xffff7abd4f9c    60  stur x5, [x1, #-1]
0xffff7abd4fa0    64  tbz w5, #0, #+0x34 (addr 0xffff7abd4fd4)
0xffff7abd4fa4    68  sub x2, x1, #0x1 (1)
0xffff7abd4fa8    72  and x5, x5, #0xfffffffffff00000
0xffff7abd4fac    76  ldr x5, [x5, #8]
0xffff7abd4fb0    80  tbz w5, #1, #+0x24 (addr 0xffff7abd4fd4)
0xffff7abd4fb4    84  and x5, x1, #0xfffffffffff00000
0xffff7abd4fb8    88  ldr x5, [x5, #8]
0xffff7abd4fbc    92  tbz w5, #2, #+0x18 (addr 0xffff7abd4fd4)
0xffff7abd4fc0    96  sub csp, jssp, #0x8 (8)
0xffff7abd4fc4   100  str lr, [jssp, #-8]!
0xffff7abd4fc8   104  ldr x16, pc+32 (addr 0x0000ffff7abd4fe8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd4fcc   108  blr x16
0xffff7abd4fd0   112  ldr lr, [jssp], #8
0xffff7abd4fd4   116  ret
0xffff7abd4fd8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abd4fdc   124  d63f03e0       constant
0xffff7abd4fe0   128  7ab170c0       constant
0xffff7abd4fe4   132  0000ffff       constant
0xffff7abd4fe8   136  7ab38080       constant
0xffff7abd4fec   140  0000ffff       constant
0xffff7abd4ff0   144  movz x16, #0x0
0xffff7abd4ff4   148  sub csp, jssp, #0x10 (16)
0xffff7abd4ff8   152  stp fp, lr, [jssp, #-16]!
0xffff7abd4ffc   156  bl #+0x4 (addr 0xffff7abd5000)
0xffff7abd5000   160  movz x17, #0xa00000000
0xffff7abd5004   164  sub csp, jssp, #0x10 (16)
0xffff7abd5008   168  stp x17, cp, [jssp, #-16]!
0xffff7abd500c   172  add fp, jssp, #0x10 (16)
0xffff7abd5010   176  ldr x17, pc+24 (addr 0x0000ffff7abd5028)    ;; lazy deoptimization bailout 0
0xffff7abd5014   180  add x17, x17, x16
0xffff7abd5018   184  br x17
0xffff7abd501c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd5020   192  d63f03e0       constant
0xffff7abd5024   196  d503201f       constant
0xffff7abd5028   200  7a906000       constant
0xffff7abd502c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abd4f90  code target (STUB)  (0xffff7ab170c0)
0xffff7abd4fc8  code target (STUB)  (0xffff7ab38080)
0xffff7abd4fd8  constant pool (size 24)
0xffff7abd5010  runtime entry
0xffff7abd501c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abd4f60     0  tbz w0, #0, #+0x90 (addr 0xffff7abd4ff0)
0xffff7abd4f64     4  mov x2, x0
0xffff7abd4f68     8  stur x2, [x1, #119]
0xffff7abd4f6c    12  add x3, x1, #0x77 (119)
0xffff7abd4f70    16  and x2, x2, #0xfffffffffff00000
0xffff7abd4f74    20  ldr x2, [x2, #8]
0xffff7abd4f78    24  tbz w2, #1, #+0x24 (addr 0xffff7abd4f9c)
0xffff7abd4f7c    28  and x2, x1, #0xfffffffffff00000
0xffff7abd4f80    32  ldr x2, [x2, #8]
0xffff7abd4f84    36  tbz w2, #2, #+0x18 (addr 0xffff7abd4f9c)
0xffff7abd4f88    40  sub csp, jssp, #0x8 (8)
0xffff7abd4f8c    44  str lr, [jssp, #-8]!
0xffff7abd4f90    48  ldr x16, pc+80 (addr 0x0000ffff7abd4fe0)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abd4f94    52  blr x16
0xffff7abd4f98    56  ldr lr, [jssp], #8
0xffff7abd4f9c    60  stur x5, [x1, #-1]
0xffff7abd4fa0    64  tbz w5, #0, #+0x34 (addr 0xffff7abd4fd4)
0xffff7abd4fa4    68  sub x2, x1, #0x1 (1)
0xffff7abd4fa8    72  and x5, x5, #0xfffffffffff00000
0xffff7abd4fac    76  ldr x5, [x5, #8]
0xffff7abd4fb0    80  tbz w5, #1, #+0x24 (addr 0xffff7abd4fd4)
0xffff7abd4fb4    84  and x5, x1, #0xfffffffffff00000
0xffff7abd4fb8    88  ldr x5, [x5, #8]
0xffff7abd4fbc    92  tbz w5, #2, #+0x18 (addr 0xffff7abd4fd4)
0xffff7abd4fc0    96  sub csp, jssp, #0x8 (8)
0xffff7abd4fc4   100  str lr, [jssp, #-8]!
0xffff7abd4fc8   104  ldr x16, pc+32 (addr 0x0000ffff7abd4fe8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd4fcc   108  blr x16
0xffff7abd4fd0   112  ldr lr, [jssp], #8
0xffff7abd4fd4   116  ret
0xffff7abd4fd8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abd4fdc   124  d63f03e0       constant
0xffff7abd4fe0   128  7ab170c0       constant
0xffff7abd4fe4   132  0000ffff       constant
0xffff7abd4fe8   136  7ab38080       constant
0xffff7abd4fec   140  0000ffff       constant
0xffff7abd4ff0   144  movz x16, #0x0
0xffff7abd4ff4   148  sub csp, jssp, #0x10 (16)
0xffff7abd4ff8   152  stp fp, lr, [jssp, #-16]!
0xffff7abd4ffc   156  bl #+0x4 (addr 0xffff7abd5000)
0xffff7abd5000   160  movz x17, #0xa00000000
0xffff7abd5004   164  sub csp, jssp, #0x10 (16)
0xffff7abd5008   168  stp x17, cp, [jssp, #-16]!
0xffff7abd500c   172  add fp, jssp, #0x10 (16)
0xffff7abd5010   176  ldr x17, pc+24 (addr 0x0000ffff7abd5028)    ;; lazy deoptimization bailout 0
0xffff7abd5014   180  add x17, x17, x16
0xffff7abd5018   184  br x17
0xffff7abd501c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd5020   192  d63f03e0       constant
0xffff7abd5024   196  d503201f       constant
0xffff7abd5028   200  7a906000       constant
0xffff7abd502c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abd4f90  code target (STUB)  (0xffff7ab170c0)
0xffff7abd4fc8  code target (STUB)  (0xffff7ab38080)
0xffff7abd4fd8  constant pool (size 24)
0xffff7abd5010  runtime entry
0xffff7abd501c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = ctime
compiler = unknown
Instructions (size = 184)
0xffff7abd50a0     0  sub csp, jssp, #0x8 (8)
0xffff7abd50a4     4  str x3, [jssp, #-8]!
0xffff7abd50a8     8  sub csp, jssp, #0x8 (8)
0xffff7abd50ac    12  str x4, [jssp, #-8]!
0xffff7abd50b0    16  ldr x3, pc+112 (addr 0x0000ffff7abd5120)    ;; object: 0x5d4352e9 Cell for 0
0xffff7abd50b4    20  ldur x3, [x3, #7]
0xffff7abd50b8    24  cmp x3, #0x0 (0)
0xffff7abd50bc    28  b.ne #+0x44 (addr 0xffff7abd5100)
0xffff7abd50c0    32  tbz w0, #0, #+0x40 (addr 0xffff7abd5100)
0xffff7abd50c4    36  ldur x3, [x0, #-1]
0xffff7abd50c8    40  ldr x4, pc+96 (addr 0x0000ffff7abd5128)    ;; object: 0x5d434909 WeakCell for 0x4ec07e29 <Map(FAST_HOLEY_SMI_ELEMENTS)>
0xffff7abd50cc    44  ldur x4, [x4, #7]
0xffff7abd50d0    48  cmp x3, x4
0xffff7abd50d4    52  b.ne #+0x2c (addr 0xffff7abd5100)
0xffff7abd50d8    56  ldr x5, pc+88 (addr 0x0000ffff7abd5130)    ;; object: 0x5d435e89 WeakCell for 0x4ec36031 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abd50dc    60  ldur x5, [x5, #7]
0xffff7abd50e0    64  tbz w5, #0, #+0x20 (addr 0xffff7abd5100)
0xffff7abd50e4    68  ldursw x4, [x5, #15]
0xffff7abd50e8    72  tbnz w4, #23, #+0x18 (addr 0xffff7abd5100)
0xffff7abd50ec    76  ldr x4, [jssp], #8
0xffff7abd50f0    80  ldr x3, [jssp], #8
0xffff7abd50f4    84  ldr x2, pc+68 (addr 0x0000ffff7abd5138)    ;; object: 0x5d40d289 <String[5]: ctime>
0xffff7abd50f8    88  ldr x16, pc+72 (addr 0x0000ffff7abd5140)    ;; code: HANDLER, StoreTransitionStub, minor: 198671
0xffff7abd50fc    92  br x16
0xffff7abd5100    96  ldr x2, pc+72 (addr 0x0000ffff7abd5148)    ;; object: 0x5d40d289 <String[5]: ctime>
0xffff7abd5104   100  ldr x4, [jssp], #8
0xffff7abd5108   104  ldr x3, [jssp], #8
0xffff7abd510c   108  ldr x16, pc+68 (addr 0x0000ffff7abd5150)    ;; code: BUILTIN
0xffff7abd5110   112  br x16
0xffff7abd5114   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abd5118   120  d63f03e0       constant
0xffff7abd511c   124  d503201f       constant
0xffff7abd5120   128  5d4352e9       constant
0xffff7abd5124   132  00000000       constant
0xffff7abd5128   136  5d434909       constant
0xffff7abd512c   140  00000000       constant
0xffff7abd5130   144  5d435e89       constant
0xffff7abd5134   148  00000000       constant
0xffff7abd5138   152  5d40d289       constant
0xffff7abd513c   156  00000000       constant
0xffff7abd5140   160  7abd4f60       constant
0xffff7abd5144   164  0000ffff       constant
0xffff7abd5148   168  5d40d289       constant
0xffff7abd514c   172  00000000       constant
0xffff7abd5150   176  7ab22420       constant
0xffff7abd5154   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abd50b0  embedded object  (0x5d4352e9 Cell for 0)
0xffff7abd50c8  embedded object  (0x5d434909 WeakCell for 0x4ec07e29 <Map(FAST_HOLEY_SMI_ELEMENTS)>)
0xffff7abd50d8  embedded object  (0x5d435e89 WeakCell for 0x4ec36031 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abd50f4  embedded object  (0x5d40d289 <String[5]: ctime>)
0xffff7abd50f8  code target (HANDLER)  (0xffff7abd4f60)
0xffff7abd5100  embedded object  (0x5d40d289 <String[5]: ctime>)
0xffff7abd510c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abd5114  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abd51c0     0  tbz w0, #0, #+0x90 (addr 0xffff7abd5250)
0xffff7abd51c4     4  mov x2, x0
0xffff7abd51c8     8  stur x2, [x1, #127]
0xffff7abd51cc    12  add x3, x1, #0x7f (127)
0xffff7abd51d0    16  and x2, x2, #0xfffffffffff00000
0xffff7abd51d4    20  ldr x2, [x2, #8]
0xffff7abd51d8    24  tbz w2, #1, #+0x24 (addr 0xffff7abd51fc)
0xffff7abd51dc    28  and x2, x1, #0xfffffffffff00000
0xffff7abd51e0    32  ldr x2, [x2, #8]
0xffff7abd51e4    36  tbz w2, #2, #+0x18 (addr 0xffff7abd51fc)
0xffff7abd51e8    40  sub csp, jssp, #0x8 (8)
0xffff7abd51ec    44  str lr, [jssp, #-8]!
0xffff7abd51f0    48  ldr x16, pc+80 (addr 0x0000ffff7abd5240)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abd51f4    52  blr x16
0xffff7abd51f8    56  ldr lr, [jssp], #8
0xffff7abd51fc    60  stur x5, [x1, #-1]
0xffff7abd5200    64  tbz w5, #0, #+0x34 (addr 0xffff7abd5234)
0xffff7abd5204    68  sub x2, x1, #0x1 (1)
0xffff7abd5208    72  and x5, x5, #0xfffffffffff00000
0xffff7abd520c    76  ldr x5, [x5, #8]
0xffff7abd5210    80  tbz w5, #1, #+0x24 (addr 0xffff7abd5234)
0xffff7abd5214    84  and x5, x1, #0xfffffffffff00000
0xffff7abd5218    88  ldr x5, [x5, #8]
0xffff7abd521c    92  tbz w5, #2, #+0x18 (addr 0xffff7abd5234)
0xffff7abd5220    96  sub csp, jssp, #0x8 (8)
0xffff7abd5224   100  str lr, [jssp, #-8]!
0xffff7abd5228   104  ldr x16, pc+32 (addr 0x0000ffff7abd5248)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd522c   108  blr x16
0xffff7abd5230   112  ldr lr, [jssp], #8
0xffff7abd5234   116  ret
0xffff7abd5238   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abd523c   124  d63f03e0       constant
0xffff7abd5240   128  7ab170c0       constant
0xffff7abd5244   132  0000ffff       constant
0xffff7abd5248   136  7ab38080       constant
0xffff7abd524c   140  0000ffff       constant
0xffff7abd5250   144  movz x16, #0x0
0xffff7abd5254   148  sub csp, jssp, #0x10 (16)
0xffff7abd5258   152  stp fp, lr, [jssp, #-16]!
0xffff7abd525c   156  bl #+0x4 (addr 0xffff7abd5260)
0xffff7abd5260   160  movz x17, #0xa00000000
0xffff7abd5264   164  sub csp, jssp, #0x10 (16)
0xffff7abd5268   168  stp x17, cp, [jssp, #-16]!
0xffff7abd526c   172  add fp, jssp, #0x10 (16)
0xffff7abd5270   176  ldr x17, pc+24 (addr 0x0000ffff7abd5288)    ;; lazy deoptimization bailout 0
0xffff7abd5274   180  add x17, x17, x16
0xffff7abd5278   184  br x17
0xffff7abd527c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd5280   192  d63f03e0       constant
0xffff7abd5284   196  d503201f       constant
0xffff7abd5288   200  7a906000       constant
0xffff7abd528c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abd51f0  code target (STUB)  (0xffff7ab170c0)
0xffff7abd5228  code target (STUB)  (0xffff7ab38080)
0xffff7abd5238  constant pool (size 24)
0xffff7abd5270  runtime entry
0xffff7abd527c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abd51c0     0  tbz w0, #0, #+0x90 (addr 0xffff7abd5250)
0xffff7abd51c4     4  mov x2, x0
0xffff7abd51c8     8  stur x2, [x1, #127]
0xffff7abd51cc    12  add x3, x1, #0x7f (127)
0xffff7abd51d0    16  and x2, x2, #0xfffffffffff00000
0xffff7abd51d4    20  ldr x2, [x2, #8]
0xffff7abd51d8    24  tbz w2, #1, #+0x24 (addr 0xffff7abd51fc)
0xffff7abd51dc    28  and x2, x1, #0xfffffffffff00000
0xffff7abd51e0    32  ldr x2, [x2, #8]
0xffff7abd51e4    36  tbz w2, #2, #+0x18 (addr 0xffff7abd51fc)
0xffff7abd51e8    40  sub csp, jssp, #0x8 (8)
0xffff7abd51ec    44  str lr, [jssp, #-8]!
0xffff7abd51f0    48  ldr x16, pc+80 (addr 0x0000ffff7abd5240)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abd51f4    52  blr x16
0xffff7abd51f8    56  ldr lr, [jssp], #8
0xffff7abd51fc    60  stur x5, [x1, #-1]
0xffff7abd5200    64  tbz w5, #0, #+0x34 (addr 0xffff7abd5234)
0xffff7abd5204    68  sub x2, x1, #0x1 (1)
0xffff7abd5208    72  and x5, x5, #0xfffffffffff00000
0xffff7abd520c    76  ldr x5, [x5, #8]
0xffff7abd5210    80  tbz w5, #1, #+0x24 (addr 0xffff7abd5234)
0xffff7abd5214    84  and x5, x1, #0xfffffffffff00000
0xffff7abd5218    88  ldr x5, [x5, #8]
0xffff7abd521c    92  tbz w5, #2, #+0x18 (addr 0xffff7abd5234)
0xffff7abd5220    96  sub csp, jssp, #0x8 (8)
0xffff7abd5224   100  str lr, [jssp, #-8]!
0xffff7abd5228   104  ldr x16, pc+32 (addr 0x0000ffff7abd5248)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abd522c   108  blr x16
0xffff7abd5230   112  ldr lr, [jssp], #8
0xffff7abd5234   116  ret
0xffff7abd5238   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abd523c   124  d63f03e0       constant
0xffff7abd5240   128  7ab170c0       constant
0xffff7abd5244   132  0000ffff       constant
0xffff7abd5248   136  7ab38080       constant
0xffff7abd524c   140  0000ffff       constant
0xffff7abd5250   144  movz x16, #0x0
0xffff7abd5254   148  sub csp, jssp, #0x10 (16)
0xffff7abd5258   152  stp fp, lr, [jssp, #-16]!
0xffff7abd525c   156  bl #+0x4 (addr 0xffff7abd5260)
0xffff7abd5260   160  movz x17, #0xa00000000
0xffff7abd5264   164  sub csp, jssp, #0x10 (16)
0xffff7abd5268   168  stp x17, cp, [jssp, #-16]!
0xffff7abd526c   172  add fp, jssp, #0x10 (16)
0xffff7abd5270   176  ldr x17, pc+24 (addr 0x0000ffff7abd5288)    ;; lazy deoptimization bailout 0
0xffff7abd5274   180  add x17, x17, x16
0xffff7abd5278   184  br x17
0xffff7abd527c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd5280   192  d63f03e0       constant
0xffff7abd5284   196  d503201f       constant
0xffff7abd5288   200  7a906000       constant
0xffff7abd528c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abd51f0  code target (STUB)  (0xffff7ab170c0)
0xffff7abd5228  code target (STUB)  (0xffff7ab38080)
0xffff7abd5238  constant pool (size 24)
0xffff7abd5270  runtime entry
0xffff7abd527c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = birthtime
compiler = unknown
Instructions (size = 184)
0xffff7abd5300     0  sub csp, jssp, #0x8 (8)
0xffff7abd5304     4  str x3, [jssp, #-8]!
0xffff7abd5308     8  sub csp, jssp, #0x8 (8)
0xffff7abd530c    12  str x4, [jssp, #-8]!
0xffff7abd5310    16  ldr x3, pc+112 (addr 0x0000ffff7abd5380)    ;; object: 0x5d4352e9 Cell for 0
0xffff7abd5314    20  ldur x3, [x3, #7]
0xffff7abd5318    24  cmp x3, #0x0 (0)
0xffff7abd531c    28  b.ne #+0x44 (addr 0xffff7abd5360)
0xffff7abd5320    32  tbz w0, #0, #+0x40 (addr 0xffff7abd5360)
0xffff7abd5324    36  ldur x3, [x0, #-1]
0xffff7abd5328    40  ldr x4, pc+96 (addr 0x0000ffff7abd5388)    ;; object: 0x5d434909 WeakCell for 0x4ec07e29 <Map(FAST_HOLEY_SMI_ELEMENTS)>
0xffff7abd532c    44  ldur x4, [x4, #7]
0xffff7abd5330    48  cmp x3, x4
0xffff7abd5334    52  b.ne #+0x2c (addr 0xffff7abd5360)
0xffff7abd5338    56  ldr x5, pc+88 (addr 0x0000ffff7abd5390)    ;; object: 0x5d435f79 WeakCell for 0x4ec36089 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abd533c    60  ldur x5, [x5, #7]
0xffff7abd5340    64  tbz w5, #0, #+0x20 (addr 0xffff7abd5360)
0xffff7abd5344    68  ldursw x4, [x5, #15]
0xffff7abd5348    72  tbnz w4, #23, #+0x18 (addr 0xffff7abd5360)
0xffff7abd534c    76  ldr x4, [jssp], #8
0xffff7abd5350    80  ldr x3, [jssp], #8
0xffff7abd5354    84  ldr x2, pc+68 (addr 0x0000ffff7abd5398)    ;; object: 0x5d40d2a9 <String[9]: birthtime>
0xffff7abd5358    88  ldr x16, pc+72 (addr 0x0000ffff7abd53a0)    ;; code: HANDLER, StoreTransitionStub, minor: 198672
0xffff7abd535c    92  br x16
0xffff7abd5360    96  ldr x2, pc+72 (addr 0x0000ffff7abd53a8)    ;; object: 0x5d40d2a9 <String[9]: birthtime>
0xffff7abd5364   100  ldr x4, [jssp], #8
0xffff7abd5368   104  ldr x3, [jssp], #8
0xffff7abd536c   108  ldr x16, pc+68 (addr 0x0000ffff7abd53b0)    ;; code: BUILTIN
0xffff7abd5370   112  br x16
0xffff7abd5374   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abd5378   120  d63f03e0       constant
0xffff7abd537c   124  d503201f       constant
0xffff7abd5380   128  5d4352e9       constant
0xffff7abd5384   132  00000000       constant
0xffff7abd5388   136  5d434909       constant
0xffff7abd538c   140  00000000       constant
0xffff7abd5390   144  5d435f79       constant
0xffff7abd5394   148  00000000       constant
0xffff7abd5398   152  5d40d2a9       constant
0xffff7abd539c   156  00000000       constant
0xffff7abd53a0   160  7abd51c0       constant
0xffff7abd53a4   164  0000ffff       constant
0xffff7abd53a8   168  5d40d2a9       constant
0xffff7abd53ac   172  00000000       constant
0xffff7abd53b0   176  7ab22420       constant
0xffff7abd53b4   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abd5310  embedded object  (0x5d4352e9 Cell for 0)
0xffff7abd5328  embedded object  (0x5d434909 WeakCell for 0x4ec07e29 <Map(FAST_HOLEY_SMI_ELEMENTS)>)
0xffff7abd5338  embedded object  (0x5d435f79 WeakCell for 0x4ec36089 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abd5354  embedded object  (0x5d40d2a9 <String[9]: birthtime>)
0xffff7abd5358  code target (HANDLER)  (0xffff7abd51c0)
0xffff7abd5360  embedded object  (0x5d40d2a9 <String[9]: birthtime>)
0xffff7abd536c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abd5374  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = isSymbolicLink
compiler = unknown
Instructions (size = 120)
0xffff7abd5420     0  sub csp, jssp, #0x8 (8)
0xffff7abd5424     4  str x3, [jssp, #-8]!
0xffff7abd5428     8  sub csp, jssp, #0x8 (8)
0xffff7abd542c    12  str x0, [jssp, #-8]!
0xffff7abd5430    16  ldr x0, pc+72 (addr 0x0000ffff7abd5478)    ;; object: 0x5d4352e9 Cell for 0
0xffff7abd5434    20  ldur x0, [x0, #7]
0xffff7abd5438    24  cmp x0, #0x0 (0)
0xffff7abd543c    28  b.ne #+0x14 (addr 0xffff7abd5450)
0xffff7abd5440    32  ldr x3, pc+64 (addr 0x0000ffff7abd5480)    ;; object: 0x5d436069 WeakCell for 0x2aef2831 <an Object with map 0x4ec320f1>
0xffff7abd5444    36  ldur x3, [x3, #7]
0xffff7abd5448    40  tbz w3, #0, #+0x8 (addr 0xffff7abd5450)
0xffff7abd544c    44  b #+0x14 (addr 0xffff7abd5460)
0xffff7abd5450    48  ldr x0, [jssp], #8
0xffff7abd5454    52  ldr x3, [jssp], #8
0xffff7abd5458    56  ldr x16, pc+48 (addr 0x0000ffff7abd5488)    ;; code: BUILTIN
0xffff7abd545c    60  br x16
0xffff7abd5460    64  add jssp, jssp, #0x10 (16)
0xffff7abd5464    68  mov x1, x3
0xffff7abd5468    72  ldr x16, pc+40 (addr 0x0000ffff7abd5490)    ;; code: HANDLER, LoadConstantStub, minor: 6
0xffff7abd546c    76  br x16
0xffff7abd5470    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abd5474    84  d63f03e0       constant
0xffff7abd5478    88  5d4352e9       constant
0xffff7abd547c    92  00000000       constant
0xffff7abd5480    96  5d436069       constant
0xffff7abd5484   100  00000000       constant
0xffff7abd5488   104  7ab222e0       constant
0xffff7abd548c   108  0000ffff       constant
0xffff7abd5490   112  7ab8b020       constant
0xffff7abd5494   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abd5430  embedded object  (0x5d4352e9 Cell for 0)
0xffff7abd5440  embedded object  (0x5d436069 WeakCell for 0x2aef2831 <an Object with map 0x4ec320f1>)
0xffff7abd5458  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abd5468  code target (HANDLER)  (0xffff7ab8b020)
0xffff7abd5470  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = _checkModeProperty
compiler = unknown
Instructions (size = 120)
0xffff7abd5500     0  sub csp, jssp, #0x8 (8)
0xffff7abd5504     4  str x3, [jssp, #-8]!
0xffff7abd5508     8  sub csp, jssp, #0x8 (8)
0xffff7abd550c    12  str x0, [jssp, #-8]!
0xffff7abd5510    16  ldr x0, pc+72 (addr 0x0000ffff7abd5558)    ;; object: 0x5d4352e9 Cell for 0
0xffff7abd5514    20  ldur x0, [x0, #7]
0xffff7abd5518    24  cmp x0, #0x0 (0)
0xffff7abd551c    28  b.ne #+0x14 (addr 0xffff7abd5530)
0xffff7abd5520    32  ldr x3, pc+64 (addr 0x0000ffff7abd5560)    ;; object: 0x5d4360b9 WeakCell for 0x2aef2831 <an Object with map 0x4ec320f1>
0xffff7abd5524    36  ldur x3, [x3, #7]
0xffff7abd5528    40  tbz w3, #0, #+0x8 (addr 0xffff7abd5530)
0xffff7abd552c    44  b #+0x14 (addr 0xffff7abd5540)
0xffff7abd5530    48  ldr x0, [jssp], #8
0xffff7abd5534    52  ldr x3, [jssp], #8
0xffff7abd5538    56  ldr x16, pc+48 (addr 0x0000ffff7abd5568)    ;; code: BUILTIN
0xffff7abd553c    60  br x16
0xffff7abd5540    64  add jssp, jssp, #0x10 (16)
0xffff7abd5544    68  mov x1, x3
0xffff7abd5548    72  ldr x16, pc+40 (addr 0x0000ffff7abd5570)    ;; code: HANDLER, LoadConstantStub, minor: 1
0xffff7abd554c    76  br x16
0xffff7abd5550    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abd5554    84  d63f03e0       constant
0xffff7abd5558    88  5d4352e9       constant
0xffff7abd555c    92  00000000       constant
0xffff7abd5560    96  5d4360b9       constant
0xffff7abd5564   100  00000000       constant
0xffff7abd5568   104  7ab222e0       constant
0xffff7abd556c   108  0000ffff       constant
0xffff7abd5570   112  7ab43300       constant
0xffff7abd5574   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abd5510  embedded object  (0x5d4352e9 Cell for 0)
0xffff7abd5520  embedded object  (0x5d4360b9 WeakCell for 0x2aef2831 <an Object with map 0x4ec320f1>)
0xffff7abd5538  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abd5548  code target (HANDLER)  (0xffff7ab43300)
0xffff7abd5550  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 197)
0xffff7abd55e0     0  ldur d0, [x1, #31]
0xffff7abd55e4     4  movz x1, #0xe2c0
0xffff7abd55e8     8  movk x1, #0x9ab, lsl #16
0xffff7abd55ec    12  ldp x2, x0, [x1]
0xffff7abd55f0    16  adds x16, x2, #0x10 (16)
0xffff7abd55f4    20  ccmp x16, x0, #nzCv, lo
0xffff7abd55f8    24  b.hi #+0x20 (addr 0xffff7abd5618)
0xffff7abd55fc    28  str x16, [x1]
0xffff7abd5600    32  ldr x1, [x26, #120]
0xffff7abd5604    36  str x1, [x2]
0xffff7abd5608    40  orr x2, x2, #0x1
0xffff7abd560c    44  stur d0, [x2, #7]
0xffff7abd5610    48  mov x0, x2
0xffff7abd5614    52  ret
0xffff7abd5618    56  sub csp, jssp, #0x10 (16)
0xffff7abd561c    60  stp fp, lr, [jssp, #-16]!
0xffff7abd5620    64  movz fp, #0xa00000000
0xffff7abd5624    68  sub csp, jssp, #0x8 (8)
0xffff7abd5628    72  str fp, [jssp, #-8]!
0xffff7abd562c    76  add fp, jssp, #0x8 (8)
0xffff7abd5630    80  movz x2, #0x0
0xffff7abd5634    84  mov x16, lr
0xffff7abd5638    88  ldr x17, pc+64 (addr 0x0000ffff7abd5678)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abd563c    92  blr x17
0xffff7abd5640    96  ldur cp, [fp, #-8]
0xffff7abd5644   100  movz x0, #0x0
0xffff7abd5648   104  movz x1, #0x4b48
0xffff7abd564c   108  movk x1, #0xe4, lsl #16
0xffff7abd5650   112  ldr x16, pc+48 (addr 0x0000ffff7abd5680)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abd5654   116  blr x16
0xffff7abd5658   120  str x0, [jssp, #16]
0xffff7abd565c   124  ldr x16, pc+44 (addr 0x0000ffff7abd5688)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abd5660   128  blr x16
0xffff7abd5664   132  ldr lr, [jssp, #16]
0xffff7abd5668   136  ldp xzr, fp, [jssp], #24
0xffff7abd566c   140  b #-0x60 (addr 0xffff7abd560c)
0xffff7abd5670   144  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7abd5674   148  d63f03e0       constant
0xffff7abd5678   152  7ab06820       constant
0xffff7abd567c   156  0000ffff       constant
0xffff7abd5680   160  7ab06260       constant
0xffff7abd5684   164  0000ffff       constant
0xffff7abd5688   168  7ab068e0       constant
0xffff7abd568c   172  0000ffff       constant


Safepoints (size = 21)
0xffff7abd5658   120  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 11)
0xffff7abd5638  code target (STUB)  (0xffff7ab06820)
0xffff7abd5650  code target (STUB)  (0xffff7ab06260)
0xffff7abd565c  code target (STUB)  (0xffff7ab068e0)
0xffff7abd5670  constant pool (size 32)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 197)
0xffff7abd55e0     0  ldur d0, [x1, #31]
0xffff7abd55e4     4  movz x1, #0xe2c0
0xffff7abd55e8     8  movk x1, #0x9ab, lsl #16
0xffff7abd55ec    12  ldp x2, x0, [x1]
0xffff7abd55f0    16  adds x16, x2, #0x10 (16)
0xffff7abd55f4    20  ccmp x16, x0, #nzCv, lo
0xffff7abd55f8    24  b.hi #+0x20 (addr 0xffff7abd5618)
0xffff7abd55fc    28  str x16, [x1]
0xffff7abd5600    32  ldr x1, [x26, #120]
0xffff7abd5604    36  str x1, [x2]
0xffff7abd5608    40  orr x2, x2, #0x1
0xffff7abd560c    44  stur d0, [x2, #7]
0xffff7abd5610    48  mov x0, x2
0xffff7abd5614    52  ret
0xffff7abd5618    56  sub csp, jssp, #0x10 (16)
0xffff7abd561c    60  stp fp, lr, [jssp, #-16]!
0xffff7abd5620    64  movz fp, #0xa00000000
0xffff7abd5624    68  sub csp, jssp, #0x8 (8)
0xffff7abd5628    72  str fp, [jssp, #-8]!
0xffff7abd562c    76  add fp, jssp, #0x8 (8)
0xffff7abd5630    80  movz x2, #0x0
0xffff7abd5634    84  mov x16, lr
0xffff7abd5638    88  ldr x17, pc+64 (addr 0x0000ffff7abd5678)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abd563c    92  blr x17
0xffff7abd5640    96  ldur cp, [fp, #-8]
0xffff7abd5644   100  movz x0, #0x0
0xffff7abd5648   104  movz x1, #0x4b48
0xffff7abd564c   108  movk x1, #0xe4, lsl #16
0xffff7abd5650   112  ldr x16, pc+48 (addr 0x0000ffff7abd5680)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abd5654   116  blr x16
0xffff7abd5658   120  str x0, [jssp, #16]
0xffff7abd565c   124  ldr x16, pc+44 (addr 0x0000ffff7abd5688)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abd5660   128  blr x16
0xffff7abd5664   132  ldr lr, [jssp, #16]
0xffff7abd5668   136  ldp xzr, fp, [jssp], #24
0xffff7abd566c   140  b #-0x60 (addr 0xffff7abd560c)
0xffff7abd5670   144  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7abd5674   148  d63f03e0       constant
0xffff7abd5678   152  7ab06820       constant
0xffff7abd567c   156  0000ffff       constant
0xffff7abd5680   160  7ab06260       constant
0xffff7abd5684   164  0000ffff       constant
0xffff7abd5688   168  7ab068e0       constant
0xffff7abd568c   172  0000ffff       constant


Safepoints (size = 21)
0xffff7abd5658   120  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 11)
0xffff7abd5638  code target (STUB)  (0xffff7ab06820)
0xffff7abd5650  code target (STUB)  (0xffff7ab06260)
0xffff7abd565c  code target (STUB)  (0xffff7ab068e0)
0xffff7abd5670  constant pool (size 32)


kind = HANDLER
major_key = <NoCache>Stub
name = set
compiler = unknown
Instructions (size = 120)
0xffff7abd5720     0  sub csp, jssp, #0x8 (8)
0xffff7abd5724     4  str x3, [jssp, #-8]!
0xffff7abd5728     8  sub csp, jssp, #0x8 (8)
0xffff7abd572c    12  str x0, [jssp, #-8]!
0xffff7abd5730    16  ldr x0, pc+72 (addr 0x0000ffff7abd5778)    ;; object: 0x5d435189 Cell for 0
0xffff7abd5734    20  ldur x0, [x0, #7]
0xffff7abd5738    24  cmp x0, #0x0 (0)
0xffff7abd573c    28  b.ne #+0x14 (addr 0xffff7abd5750)
0xffff7abd5740    32  ldr x3, pc+64 (addr 0x0000ffff7abd5780)    ;; object: 0x5d436141 WeakCell for 0x2ae757c1 <an Object with map 0x4ec11eb1>
0xffff7abd5744    36  ldur x3, [x3, #7]
0xffff7abd5748    40  tbz w3, #0, #+0x8 (addr 0xffff7abd5750)
0xffff7abd574c    44  b #+0x14 (addr 0xffff7abd5760)
0xffff7abd5750    48  ldr x0, [jssp], #8
0xffff7abd5754    52  ldr x3, [jssp], #8
0xffff7abd5758    56  ldr x16, pc+48 (addr 0x0000ffff7abd5788)    ;; code: BUILTIN
0xffff7abd575c    60  br x16
0xffff7abd5760    64  add jssp, jssp, #0x10 (16)
0xffff7abd5764    68  mov x1, x3
0xffff7abd5768    72  ldr x16, pc+40 (addr 0x0000ffff7abd5790)    ;; code: HANDLER, LoadConstantStub, minor: 4
0xffff7abd576c    76  br x16
0xffff7abd5770    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abd5774    84  d63f03e0       constant
0xffff7abd5778    88  5d435189       constant
0xffff7abd577c    92  00000000       constant
0xffff7abd5780    96  5d436141       constant
0xffff7abd5784   100  00000000       constant
0xffff7abd5788   104  7ab222e0       constant
0xffff7abd578c   108  0000ffff       constant
0xffff7abd5790   112  7ab43480       constant
0xffff7abd5794   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abd5730  embedded object  (0x5d435189 Cell for 0)
0xffff7abd5740  embedded object  (0x5d436141 WeakCell for 0x2ae757c1 <an Object with map 0x4ec11eb1>)
0xffff7abd5758  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abd5768  code target (HANDLER)  (0xffff7ab43480)
0xffff7abd5770  constant pool (size 40)

kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = STRING*STRING -> STRING
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 416)
0xffff7abd5800     0  and x16, x0, x1
0xffff7abd5804     4  tbz w16, #0, #+0xfc (addr 0xffff7abd5900)
0xffff7abd5808     8  ldur x11, [x1, #-1]
0xffff7abd580c    12  ldur x10, [x0, #-1]
0xffff7abd5810    16  ldrb w11, [x11, #11]
0xffff7abd5814    20  ldrb w10, [x10, #11]
0xffff7abd5818    24  orr x12, x11, x10
0xffff7abd581c    28  tbnz w12, #7, #+0xe4 (addr 0xffff7abd5900)
0xffff7abd5820    32  cmp x1, x0
0xffff7abd5824    36  b.ne #+0xc (addr 0xffff7abd5830)
0xffff7abd5828    40  movz x0, #0x0
0xffff7abd582c    44  ret
0xffff7abd5830    48  orr x12, x11, x10
0xffff7abd5834    52  tbnz w12, #6, #+0x8 (addr 0xffff7abd583c)
0xffff7abd5838    56  ret
0xffff7abd583c    60  movz x16, #0x87
0xffff7abd5840    64  and x12, x11, x16
0xffff7abd5844    68  movz x16, #0x87
0xffff7abd5848    72  and x13, x10, x16
0xffff7abd584c    76  cmp x12, #0x4 (4)
0xffff7abd5850    80  ccmp x13, #4, #nzcv, eq
0xffff7abd5854    84  b.ne #+0x5c (addr 0xffff7abd58b0)
0xffff7abd5858    88  ldur x10, [x1, #15]
0xffff7abd585c    92  ldur x11, [x0, #15]
0xffff7abd5860    96  cmp x10, x11
0xffff7abd5864   100  b.eq #+0xc (addr 0xffff7abd5870)
0xffff7abd5868   104  movz x0, #0x100000000
0xffff7abd586c   108  ret
0xffff7abd5870   112  cbnz x10, #+0xc (addr 0xffff7abd587c)
0xffff7abd5874   116  movz x0, #0x0
0xffff7abd5878   120  ret
0xffff7abd587c   124  asr x10, x10, #32
0xffff7abd5880   128  add x11, x10, #0x17 (23)
0xffff7abd5884   132  add x1, x1, x11
0xffff7abd5888   136  add x0, x0, x11
0xffff7abd588c   140  neg x10, x10
0xffff7abd5890   144  ldrb w11, [x1, x10]
0xffff7abd5894   148  ldrb w12, [x0, x10]
0xffff7abd5898   152  cmp x11, x12
0xffff7abd589c   156  b.ne #-0x34 (addr 0xffff7abd5868)
0xffff7abd58a0   160  add x10, x10, #0x1 (1)
0xffff7abd58a4   164  cbnz x10, #-0x14 (addr 0xffff7abd5890)
0xffff7abd58a8   168  movz x0, #0x0
0xffff7abd58ac   172  ret
0xffff7abd58b0   176  movz x16, #0xc00000000
0xffff7abd58b4   180  sub csp, jssp, #0x10 (16)
0xffff7abd58b8   184  stp fp, lr, [jssp, #-16]!
0xffff7abd58bc   188  sub csp, jssp, #0x10 (16)
0xffff7abd58c0   192  str x16, [jssp, #-8]!
0xffff7abd58c4   196  ldr x17, pc+172 (addr 0x0000ffff7abd5970)    ;; object: 0xffff7abd57a1 <Code: COMPARE_IC>
0xffff7abd58c8   200  sub csp, jssp, #0x10 (16)
0xffff7abd58cc   204  str x17, [jssp, #-8]!
0xffff7abd58d0   208  add fp, jssp, #0x10 (16)
0xffff7abd58d4   212  sub csp, jssp, #0x10 (16)
0xffff7abd58d8   216  stp x0, x1, [jssp, #-16]!
0xffff7abd58dc   220  movz x0, #0x2
0xffff7abd58e0   224  ldr x1, pc+152 (addr 0x0000ffff7abd5978)    ;; external reference (Runtime::StringEqual)
0xffff7abd58e4   228  ldr x16, pc+156 (addr 0x0000ffff7abd5980)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abd58e8   232  blr x16
0xffff7abd58ec   236  mov jssp, fp
0xffff7abd58f0   240  ldp fp, lr, [jssp], #16
0xffff7abd58f4   244  ldr x1, [x26, #64]
0xffff7abd58f8   248  sub x0, x0, x1
0xffff7abd58fc   252  ret
0xffff7abd5900   256  movz x16, #0xc00000000
0xffff7abd5904   260  sub csp, jssp, #0x10 (16)
0xffff7abd5908   264  stp fp, lr, [jssp, #-16]!
0xffff7abd590c   268  sub csp, jssp, #0x10 (16)
0xffff7abd5910   272  str x16, [jssp, #-8]!
0xffff7abd5914   276  ldr x17, pc+116 (addr 0x0000ffff7abd5988)    ;; object: 0xffff7abd57a1 <Code: COMPARE_IC>
0xffff7abd5918   280  sub csp, jssp, #0x10 (16)
0xffff7abd591c   284  str x17, [jssp, #-8]!
0xffff7abd5920   288  add fp, jssp, #0x10 (16)
0xffff7abd5924   292  sub csp, jssp, #0x18 (24)
0xffff7abd5928   296  stp lr, x0, [jssp, #-24]!
0xffff7abd592c   300  str x1, [jssp, #16]
0xffff7abd5930   304  movz x10, #0x2f00000000
0xffff7abd5934   308  sub csp, jssp, #0x18 (24)
0xffff7abd5938   312  stp x10, x0, [jssp, #-24]!
0xffff7abd593c   316  str x1, [jssp, #16]
0xffff7abd5940   320  movz x0, #0x3
0xffff7abd5944   324  ldr x1, pc+76 (addr 0x0000ffff7abd5990)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7abd5948   328  ldr x16, pc+80 (addr 0x0000ffff7abd5998)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abd594c   332  blr x16
0xffff7abd5950   336  add x11, x0, #0x5f (95)
0xffff7abd5954   340  ldr x1, [jssp, #16]
0xffff7abd5958   344  ldp lr, x0, [jssp], #24
0xffff7abd595c   348  mov jssp, fp
0xffff7abd5960   352  ldp fp, lr, [jssp], #16
0xffff7abd5964   356  br x11
0xffff7abd5968   360  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abd596c   364  d63f03e0       constant
0xffff7abd5970   368  7abd57a1       constant
0xffff7abd5974   372  0000ffff       constant
0xffff7abd5978   376  00ed0748       constant
0xffff7abd597c   380  00000000       constant
0xffff7abd5980   384  7ab06060       constant
0xffff7abd5984   388  0000ffff       constant
0xffff7abd5988   392  7abd57a1       constant
0xffff7abd598c   396  0000ffff       constant
0xffff7abd5990   400  00c8a980       constant
0xffff7abd5994   404  00000000       constant
0xffff7abd5998   408  7ab06060       constant
0xffff7abd599c   412  0000ffff       constant


RelocInfo (size = 16)
0xffff7abd58c4  embedded object  (0xffff7abd57a1 <Code: COMPARE_IC>)
0xffff7abd58e0  external reference (Runtime::StringEqual)  (0xed0748)
0xffff7abd58e4  code target (STUB)  (0xffff7ab06060)
0xffff7abd5914  embedded object  (0xffff7abd57a1 <Code: COMPARE_IC>)
0xffff7abd5944  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7abd5948  code target (STUB)  (0xffff7ab06060)
0xffff7abd5968  constant pool (size 56)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 192)
0xffff7abd7d60     0  ldur x4, [x1, #15]
0xffff7abd7d64     4  ldur w5, [x1, #27]
0xffff7abd7d68     8  tbnz w2, #0, #+0x20 (addr 0xffff7abd7d88)
0xffff7abd7d6c    12  asr x7, x2, #32
0xffff7abd7d70    16  cmp w7, w5
0xffff7abd7d74    20  b.hs #+0x5c (addr 0xffff7abd7dd0)
0xffff7abd7d78    24  add x0, x4, w7, sxtw #3
0xffff7abd7d7c    28  ldur w1, [x0, #19]
0xffff7abd7d80    32  lsl x0, x1, #32
0xffff7abd7d84    36  ret
0xffff7abd7d88    40  sub csp, jssp, #0x10 (16)
0xffff7abd7d8c    44  stp fp, lr, [jssp, #-16]!
0xffff7abd7d90    48  movz fp, #0xa00000000
0xffff7abd7d94    52  sub csp, jssp, #0x8 (8)
0xffff7abd7d98    56  str fp, [jssp, #-8]!
0xffff7abd7d9c    60  add fp, jssp, #0x8 (8)
0xffff7abd7da0    64  ldur x16, [x2, #-1]
0xffff7abd7da4    68  ldr x17, [x26, #120]
0xffff7abd7da8    72  cmp x16, x17
0xffff7abd7dac    76  b.ne #+0x34 (addr 0xffff7abd7de0)
0xffff7abd7db0    80  ldur d29, [x2, #7]
0xffff7abd7db4    84  fcvtzs w7, d29
0xffff7abd7db8    88  scvtf d0, w7
0xffff7abd7dbc    92  fcmp d29, d0
0xffff7abd7dc0    96  b.ne #+0x20 (addr 0xffff7abd7de0)
0xffff7abd7dc4   100  ldr lr, [jssp, #16]
0xffff7abd7dc8   104  ldp xzr, fp, [jssp], #24
0xffff7abd7dcc   108  b #-0x5c (addr 0xffff7abd7d70)
0xffff7abd7dd0   112  movz x16, #0x0
0xffff7abd7dd4   116  sub csp, jssp, #0x10 (16)
0xffff7abd7dd8   120  stp fp, lr, [jssp, #-16]!
0xffff7abd7ddc   124  bl #+0xc (addr 0xffff7abd7de8)
0xffff7abd7de0   128  movz x16, #0x8
0xffff7abd7de4   132  bl #+0x14 (addr 0xffff7abd7df8)
0xffff7abd7de8   136  movz x17, #0xa00000000
0xffff7abd7dec   140  sub csp, jssp, #0x10 (16)
0xffff7abd7df0   144  stp x17, cp, [jssp, #-16]!
0xffff7abd7df4   148  add fp, jssp, #0x10 (16)
0xffff7abd7df8   152  ldr x17, pc+24 (addr 0x0000ffff7abd7e10)    ;; lazy deoptimization bailout 0
0xffff7abd7dfc   156  add x17, x17, x16
0xffff7abd7e00   160  br x17
0xffff7abd7e04   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd7e08   168  d63f03e0       constant
0xffff7abd7e0c   172  d503201f       constant
0xffff7abd7e10   176  7a906000       constant
0xffff7abd7e14   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7abd7df8  runtime entry
0xffff7abd7e04  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = LoadFastElementStub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 192)
0xffff7abd7d60     0  ldur x4, [x1, #15]
0xffff7abd7d64     4  ldur w5, [x1, #27]
0xffff7abd7d68     8  tbnz w2, #0, #+0x20 (addr 0xffff7abd7d88)
0xffff7abd7d6c    12  asr x7, x2, #32
0xffff7abd7d70    16  cmp w7, w5
0xffff7abd7d74    20  b.hs #+0x5c (addr 0xffff7abd7dd0)
0xffff7abd7d78    24  add x0, x4, w7, sxtw #3
0xffff7abd7d7c    28  ldur w1, [x0, #19]
0xffff7abd7d80    32  lsl x0, x1, #32
0xffff7abd7d84    36  ret
0xffff7abd7d88    40  sub csp, jssp, #0x10 (16)
0xffff7abd7d8c    44  stp fp, lr, [jssp, #-16]!
0xffff7abd7d90    48  movz fp, #0xa00000000
0xffff7abd7d94    52  sub csp, jssp, #0x8 (8)
0xffff7abd7d98    56  str fp, [jssp, #-8]!
0xffff7abd7d9c    60  add fp, jssp, #0x8 (8)
0xffff7abd7da0    64  ldur x16, [x2, #-1]
0xffff7abd7da4    68  ldr x17, [x26, #120]
0xffff7abd7da8    72  cmp x16, x17
0xffff7abd7dac    76  b.ne #+0x34 (addr 0xffff7abd7de0)
0xffff7abd7db0    80  ldur d29, [x2, #7]
0xffff7abd7db4    84  fcvtzs w7, d29
0xffff7abd7db8    88  scvtf d0, w7
0xffff7abd7dbc    92  fcmp d29, d0
0xffff7abd7dc0    96  b.ne #+0x20 (addr 0xffff7abd7de0)
0xffff7abd7dc4   100  ldr lr, [jssp, #16]
0xffff7abd7dc8   104  ldp xzr, fp, [jssp], #24
0xffff7abd7dcc   108  b #-0x5c (addr 0xffff7abd7d70)
0xffff7abd7dd0   112  movz x16, #0x0
0xffff7abd7dd4   116  sub csp, jssp, #0x10 (16)
0xffff7abd7dd8   120  stp fp, lr, [jssp, #-16]!
0xffff7abd7ddc   124  bl #+0xc (addr 0xffff7abd7de8)
0xffff7abd7de0   128  movz x16, #0x8
0xffff7abd7de4   132  bl #+0x14 (addr 0xffff7abd7df8)
0xffff7abd7de8   136  movz x17, #0xa00000000
0xffff7abd7dec   140  sub csp, jssp, #0x10 (16)
0xffff7abd7df0   144  stp x17, cp, [jssp, #-16]!
0xffff7abd7df4   148  add fp, jssp, #0x10 (16)
0xffff7abd7df8   152  ldr x17, pc+24 (addr 0x0000ffff7abd7e10)    ;; lazy deoptimization bailout 0
0xffff7abd7dfc   156  add x17, x17, x16
0xffff7abd7e00   160  br x17
0xffff7abd7e04   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd7e08   168  d63f03e0       constant
0xffff7abd7e0c   172  d503201f       constant
0xffff7abd7e10   176  7a906000       constant
0xffff7abd7e14   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7abd7df8  runtime entry
0xffff7abd7e04  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastCloneShallowObjectStub
compiler = crankshaft
Instructions (size = 477)
0xffff7abd8ac0     0  ldur x4, [x3, #47]
0xffff7abd8ac4     4  tbnz w2, #0, #+0xa0 (addr 0xffff7abd8b64)
0xffff7abd8ac8     8  asr x6, x2, #32
0xffff7abd8acc    12  add x5, x4, #0x17 (23)
0xffff7abd8ad0    16  ldr x7, [x5, w6, sxtw #3]
0xffff7abd8ad4    20  ldr x4, pc+324 (addr 0x0000ffff7abd8c18)    ;; object: 0x20d04241 <undefined>
0xffff7abd8ad8    24  cmp x7, x4
0xffff7abd8adc    28  b.eq #+0x84 (addr 0xffff7abd8b60)
0xffff7abd8ae0    32  ldur x4, [x7, #7]
0xffff7abd8ae4    36  ldur x5, [x4, #-1]
0xffff7abd8ae8    40  ldrb w6, [x5, #7]
0xffff7abd8aec    44  cmp w6, #0x5 (5)
0xffff7abd8af0    48  b.ne #+0x70 (addr 0xffff7abd8b60)
0xffff7abd8af4    52  movz x1, #0xe2c0
0xffff7abd8af8    56  movk x1, #0x9ab, lsl #16
0xffff7abd8afc    60  ldp x2, x0, [x1]
0xffff7abd8b00    64  adds x16, x2, #0x38 (56)
0xffff7abd8b04    68  ccmp x16, x0, #nzCv, lo
0xffff7abd8b08    72  b.hi #+0xa4 (addr 0xffff7abd8bac)
0xffff7abd8b0c    76  str x16, [x1]
0xffff7abd8b10    80  orr x2, x2, #0x1
0xffff7abd8b14    84  stur x5, [x2, #-1]
0xffff7abd8b18    88  ldur x0, [x4, #7]
0xffff7abd8b1c    92  stur x0, [x2, #7]
0xffff7abd8b20    96  ldur x0, [x4, #15]
0xffff7abd8b24   100  stur x0, [x2, #15]
0xffff7abd8b28   104  ldur x0, [x4, #23]
0xffff7abd8b2c   108  stur x0, [x2, #23]
0xffff7abd8b30   112  ldur x0, [x4, #31]
0xffff7abd8b34   116  stur x0, [x2, #31]
0xffff7abd8b38   120  add x0, x2, #0x28 (40)
0xffff7abd8b3c   124  ldr x1, pc+228 (addr 0x0000ffff7abd8c20)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abd8b40   128  stur x1, [x0, #-1]
0xffff7abd8b44   132  stur x7, [x0, #7]
0xffff7abd8b48   136  ldur w0, [x7, #35]
0xffff7abd8b4c   140  add w0, w0, #0x1 (1)
0xffff7abd8b50   144  lsl x0, x0, #32
0xffff7abd8b54   148  stur x0, [x7, #31]
0xffff7abd8b58   152  mov x0, x2
0xffff7abd8b5c   156  ret
0xffff7abd8b60   160  b #+0xe0 (addr 0xffff7abd8c40)
0xffff7abd8b64   164  sub csp, jssp, #0x10 (16)
0xffff7abd8b68   168  stp fp, lr, [jssp, #-16]!
0xffff7abd8b6c   172  movz fp, #0xa00000000
0xffff7abd8b70   176  sub csp, jssp, #0x8 (8)
0xffff7abd8b74   180  str fp, [jssp, #-8]!
0xffff7abd8b78   184  add fp, jssp, #0x8 (8)
0xffff7abd8b7c   188  ldur x16, [x2, #-1]
0xffff7abd8b80   192  ldr x17, [x26, #120]
0xffff7abd8b84   196  cmp x16, x17
0xffff7abd8b88   200  b.ne #+0xc8 (addr 0xffff7abd8c50)
0xffff7abd8b8c   204  ldur d29, [x2, #7]
0xffff7abd8b90   208  fcvtzs w6, d29
0xffff7abd8b94   212  scvtf d0, w6
0xffff7abd8b98   216  fcmp d29, d0
0xffff7abd8b9c   220  b.ne #+0xb4 (addr 0xffff7abd8c50)
0xffff7abd8ba0   224  ldr lr, [jssp, #16]
0xffff7abd8ba4   228  ldp xzr, fp, [jssp], #24
0xffff7abd8ba8   232  b #-0xdc (addr 0xffff7abd8acc)
0xffff7abd8bac   236  sub csp, jssp, #0x10 (16)
0xffff7abd8bb0   240  stp fp, lr, [jssp, #-16]!
0xffff7abd8bb4   244  movz fp, #0xa00000000
0xffff7abd8bb8   248  sub csp, jssp, #0x8 (8)
0xffff7abd8bbc   252  str fp, [jssp, #-8]!
0xffff7abd8bc0   256  add fp, jssp, #0x8 (8)
0xffff7abd8bc4   260  movz x2, #0x0
0xffff7abd8bc8   264  mov x16, lr
0xffff7abd8bcc   268  ldr x17, pc+92 (addr 0x0000ffff7abd8c28)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abd8bd0   272  blr x17
0xffff7abd8bd4   276  movz x0, #0x3800000000
0xffff7abd8bd8   280  movz x10, #0x0
0xffff7abd8bdc   284  sub csp, jssp, #0x10 (16)
0xffff7abd8be0   288  stp x10, x0, [jssp, #-16]!
0xffff7abd8be4   292  movz x0, #0x2
0xffff7abd8be8   296  movz x1, #0x5b88
0xffff7abd8bec   300  movk x1, #0xe2, lsl #16
0xffff7abd8bf0   304  ldr x16, pc+64 (addr 0x0000ffff7abd8c30)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abd8bf4   308  blr x16
0xffff7abd8bf8   312  str x0, [jssp, #16]
0xffff7abd8bfc   316  ldr x16, pc+60 (addr 0x0000ffff7abd8c38)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abd8c00   320  blr x16
0xffff7abd8c04   324  ldr lr, [jssp, #16]
0xffff7abd8c08   328  ldp xzr, fp, [jssp], #24
0xffff7abd8c0c   332  b #-0xf8 (addr 0xffff7abd8b14)
0xffff7abd8c10   336  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0xffff7abd8c14   340  d63f03e0       constant
0xffff7abd8c18   344  20d04241       constant
0xffff7abd8c1c   348  00000000       constant
0xffff7abd8c20   352  4ec05d81       constant
0xffff7abd8c24   356  00000000       constant
0xffff7abd8c28   360  7ab06820       constant
0xffff7abd8c2c   364  0000ffff       constant
0xffff7abd8c30   368  7ab06260       constant
0xffff7abd8c34   372  0000ffff       constant
0xffff7abd8c38   376  7ab068e0       constant
0xffff7abd8c3c   380  0000ffff       constant
0xffff7abd8c40   384  movz x16, #0x0
0xffff7abd8c44   388  sub csp, jssp, #0x10 (16)
0xffff7abd8c48   392  stp fp, lr, [jssp, #-16]!
0xffff7abd8c4c   396  bl #+0xc (addr 0xffff7abd8c58)
0xffff7abd8c50   400  movz x16, #0x8
0xffff7abd8c54   404  bl #+0x14 (addr 0xffff7abd8c68)
0xffff7abd8c58   408  movz x17, #0xa00000000
0xffff7abd8c5c   412  sub csp, jssp, #0x10 (16)
0xffff7abd8c60   416  stp x17, cp, [jssp, #-16]!
0xffff7abd8c64   420  add fp, jssp, #0x10 (16)
0xffff7abd8c68   424  ldr x17, pc+24 (addr 0x0000ffff7abd8c80)    ;; lazy deoptimization bailout 0
0xffff7abd8c6c   428  add x17, x17, x16
0xffff7abd8c70   432  br x17
0xffff7abd8c74   436  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd8c78   440  d63f03e0       constant
0xffff7abd8c7c   444  d503201f       constant
0xffff7abd8c80   448  7a906000       constant
0xffff7abd8c84   452  0000ffff       constant


Safepoints (size = 21)
0xffff7abd8bf8   312  000 | x2 | x4 | x5 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 25)
0xffff7abd8ad4  embedded object  (0x20d04241 <undefined>)
0xffff7abd8b3c  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abd8bcc  code target (STUB)  (0xffff7ab06820)
0xffff7abd8bf0  code target (STUB)  (0xffff7ab06260)
0xffff7abd8bfc  code target (STUB)  (0xffff7ab068e0)
0xffff7abd8c10  constant pool (size 48)
0xffff7abd8c68  runtime entry
0xffff7abd8c74  constant pool (size 20)

--- End code ---
kind = STUB
major_key = FastCloneShallowObjectStub
name = FastCloneShallowObjectStub
compiler = crankshaft
Instructions (size = 477)
0xffff7abd8ac0     0  ldur x4, [x3, #47]
0xffff7abd8ac4     4  tbnz w2, #0, #+0xa0 (addr 0xffff7abd8b64)
0xffff7abd8ac8     8  asr x6, x2, #32
0xffff7abd8acc    12  add x5, x4, #0x17 (23)
0xffff7abd8ad0    16  ldr x7, [x5, w6, sxtw #3]
0xffff7abd8ad4    20  ldr x4, pc+324 (addr 0x0000ffff7abd8c18)    ;; object: 0x20d04241 <undefined>
0xffff7abd8ad8    24  cmp x7, x4
0xffff7abd8adc    28  b.eq #+0x84 (addr 0xffff7abd8b60)
0xffff7abd8ae0    32  ldur x4, [x7, #7]
0xffff7abd8ae4    36  ldur x5, [x4, #-1]
0xffff7abd8ae8    40  ldrb w6, [x5, #7]
0xffff7abd8aec    44  cmp w6, #0x5 (5)
0xffff7abd8af0    48  b.ne #+0x70 (addr 0xffff7abd8b60)
0xffff7abd8af4    52  movz x1, #0xe2c0
0xffff7abd8af8    56  movk x1, #0x9ab, lsl #16
0xffff7abd8afc    60  ldp x2, x0, [x1]
0xffff7abd8b00    64  adds x16, x2, #0x38 (56)
0xffff7abd8b04    68  ccmp x16, x0, #nzCv, lo
0xffff7abd8b08    72  b.hi #+0xa4 (addr 0xffff7abd8bac)
0xffff7abd8b0c    76  str x16, [x1]
0xffff7abd8b10    80  orr x2, x2, #0x1
0xffff7abd8b14    84  stur x5, [x2, #-1]
0xffff7abd8b18    88  ldur x0, [x4, #7]
0xffff7abd8b1c    92  stur x0, [x2, #7]
0xffff7abd8b20    96  ldur x0, [x4, #15]
0xffff7abd8b24   100  stur x0, [x2, #15]
0xffff7abd8b28   104  ldur x0, [x4, #23]
0xffff7abd8b2c   108  stur x0, [x2, #23]
0xffff7abd8b30   112  ldur x0, [x4, #31]
0xffff7abd8b34   116  stur x0, [x2, #31]
0xffff7abd8b38   120  add x0, x2, #0x28 (40)
0xffff7abd8b3c   124  ldr x1, pc+228 (addr 0x0000ffff7abd8c20)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abd8b40   128  stur x1, [x0, #-1]
0xffff7abd8b44   132  stur x7, [x0, #7]
0xffff7abd8b48   136  ldur w0, [x7, #35]
0xffff7abd8b4c   140  add w0, w0, #0x1 (1)
0xffff7abd8b50   144  lsl x0, x0, #32
0xffff7abd8b54   148  stur x0, [x7, #31]
0xffff7abd8b58   152  mov x0, x2
0xffff7abd8b5c   156  ret
0xffff7abd8b60   160  b #+0xe0 (addr 0xffff7abd8c40)
0xffff7abd8b64   164  sub csp, jssp, #0x10 (16)
0xffff7abd8b68   168  stp fp, lr, [jssp, #-16]!
0xffff7abd8b6c   172  movz fp, #0xa00000000
0xffff7abd8b70   176  sub csp, jssp, #0x8 (8)
0xffff7abd8b74   180  str fp, [jssp, #-8]!
0xffff7abd8b78   184  add fp, jssp, #0x8 (8)
0xffff7abd8b7c   188  ldur x16, [x2, #-1]
0xffff7abd8b80   192  ldr x17, [x26, #120]
0xffff7abd8b84   196  cmp x16, x17
0xffff7abd8b88   200  b.ne #+0xc8 (addr 0xffff7abd8c50)
0xffff7abd8b8c   204  ldur d29, [x2, #7]
0xffff7abd8b90   208  fcvtzs w6, d29
0xffff7abd8b94   212  scvtf d0, w6
0xffff7abd8b98   216  fcmp d29, d0
0xffff7abd8b9c   220  b.ne #+0xb4 (addr 0xffff7abd8c50)
0xffff7abd8ba0   224  ldr lr, [jssp, #16]
0xffff7abd8ba4   228  ldp xzr, fp, [jssp], #24
0xffff7abd8ba8   232  b #-0xdc (addr 0xffff7abd8acc)
0xffff7abd8bac   236  sub csp, jssp, #0x10 (16)
0xffff7abd8bb0   240  stp fp, lr, [jssp, #-16]!
0xffff7abd8bb4   244  movz fp, #0xa00000000
0xffff7abd8bb8   248  sub csp, jssp, #0x8 (8)
0xffff7abd8bbc   252  str fp, [jssp, #-8]!
0xffff7abd8bc0   256  add fp, jssp, #0x8 (8)
0xffff7abd8bc4   260  movz x2, #0x0
0xffff7abd8bc8   264  mov x16, lr
0xffff7abd8bcc   268  ldr x17, pc+92 (addr 0x0000ffff7abd8c28)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abd8bd0   272  blr x17
0xffff7abd8bd4   276  movz x0, #0x3800000000
0xffff7abd8bd8   280  movz x10, #0x0
0xffff7abd8bdc   284  sub csp, jssp, #0x10 (16)
0xffff7abd8be0   288  stp x10, x0, [jssp, #-16]!
0xffff7abd8be4   292  movz x0, #0x2
0xffff7abd8be8   296  movz x1, #0x5b88
0xffff7abd8bec   300  movk x1, #0xe2, lsl #16
0xffff7abd8bf0   304  ldr x16, pc+64 (addr 0x0000ffff7abd8c30)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abd8bf4   308  blr x16
0xffff7abd8bf8   312  str x0, [jssp, #16]
0xffff7abd8bfc   316  ldr x16, pc+60 (addr 0x0000ffff7abd8c38)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abd8c00   320  blr x16
0xffff7abd8c04   324  ldr lr, [jssp, #16]
0xffff7abd8c08   328  ldp xzr, fp, [jssp], #24
0xffff7abd8c0c   332  b #-0xf8 (addr 0xffff7abd8b14)
0xffff7abd8c10   336  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0xffff7abd8c14   340  d63f03e0       constant
0xffff7abd8c18   344  20d04241       constant
0xffff7abd8c1c   348  00000000       constant
0xffff7abd8c20   352  4ec05d81       constant
0xffff7abd8c24   356  00000000       constant
0xffff7abd8c28   360  7ab06820       constant
0xffff7abd8c2c   364  0000ffff       constant
0xffff7abd8c30   368  7ab06260       constant
0xffff7abd8c34   372  0000ffff       constant
0xffff7abd8c38   376  7ab068e0       constant
0xffff7abd8c3c   380  0000ffff       constant
0xffff7abd8c40   384  movz x16, #0x0
0xffff7abd8c44   388  sub csp, jssp, #0x10 (16)
0xffff7abd8c48   392  stp fp, lr, [jssp, #-16]!
0xffff7abd8c4c   396  bl #+0xc (addr 0xffff7abd8c58)
0xffff7abd8c50   400  movz x16, #0x8
0xffff7abd8c54   404  bl #+0x14 (addr 0xffff7abd8c68)
0xffff7abd8c58   408  movz x17, #0xa00000000
0xffff7abd8c5c   412  sub csp, jssp, #0x10 (16)
0xffff7abd8c60   416  stp x17, cp, [jssp, #-16]!
0xffff7abd8c64   420  add fp, jssp, #0x10 (16)
0xffff7abd8c68   424  ldr x17, pc+24 (addr 0x0000ffff7abd8c80)    ;; lazy deoptimization bailout 0
0xffff7abd8c6c   428  add x17, x17, x16
0xffff7abd8c70   432  br x17
0xffff7abd8c74   436  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abd8c78   440  d63f03e0       constant
0xffff7abd8c7c   444  d503201f       constant
0xffff7abd8c80   448  7a906000       constant
0xffff7abd8c84   452  0000ffff       constant


Safepoints (size = 21)
0xffff7abd8bf8   312  000 | x2 | x4 | x5 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 25)
0xffff7abd8ad4  embedded object  (0x20d04241 <undefined>)
0xffff7abd8b3c  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abd8bcc  code target (STUB)  (0xffff7ab06820)
0xffff7abd8bf0  code target (STUB)  (0xffff7ab06260)
0xffff7abd8bfc  code target (STUB)  (0xffff7ab068e0)
0xffff7abd8c10  constant pool (size 48)
0xffff7abd8c68  runtime entry
0xffff7abd8c74  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MEGAMORPHIC
extra_ic_state = 2709
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 181)
0xffff7abdaa00     0  movz x16, #0xa00000000
0xffff7abdaa04     4  sub csp, jssp, #0x10 (16)
0xffff7abdaa08     8  stp fp, lr, [jssp, #-16]!
0xffff7abdaa0c    12  mov fp, jssp
0xffff7abdaa10    16  sub csp, jssp, #0x20 (32)
0xffff7abdaa14    20  sub jssp, jssp, #0x20 (32)
0xffff7abdaa18    24  stur x16, [fp, #-8]
0xffff7abdaa1c    28  str x1, [jssp, #16]
0xffff7abdaa20    32  str x0, [jssp, #8]
0xffff7abdaa24    36  str cp, [jssp]
0xffff7abdaa28    40  mov x3, cp
0xffff7abdaa2c    44  mov x2, x0
0xffff7abdaa30    48  tbnz w2, #0, #+0x48 (addr 0xffff7abdaa78)
0xffff7abdaa34    52  sub csp, jssp, #0x10 (16)
0xffff7abdaa38    56  stp x2, x1, [jssp, #-16]!
0xffff7abdaa3c    60  mov cp, x3
0xffff7abdaa40    64  movz x0, #0x2
0xffff7abdaa44    68  movz x1, #0xf938
0xffff7abdaa48    72  movk x1, #0xe4, lsl #16
0xffff7abdaa4c    76  ldr x16, pc+36 (addr 0x0000ffff7abdaa70)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abdaa50    80  blr x16
0xffff7abdaa54    84  ldr cp, [jssp]
0xffff7abdaa58    88  mov jssp, fp
0xffff7abdaa5c    92  ldp fp, lr, [jssp], #16
0xffff7abdaa60    96  ret
0xffff7abdaa64   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abdaa68   104  d63f03e0       constant
0xffff7abdaa6c   108  d503201f       constant
0xffff7abdaa70   112  7ab06060       constant
0xffff7abdaa74   116  0000ffff       constant
0xffff7abdaa78   120  movz x16, #0x0
0xffff7abdaa7c   124  bl #+0x4 (addr 0xffff7abdaa80)
0xffff7abdaa80   128  ldr x17, pc+24 (addr 0x0000ffff7abdaa98)    ;; lazy deoptimization bailout 0
0xffff7abdaa84   132  add x17, x17, x16
0xffff7abdaa88   136  br x17
0xffff7abdaa8c   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abdaa90   144  d63f03e0       constant
0xffff7abdaa94   148  d503201f       constant
0xffff7abdaa98   152  7a906000       constant
0xffff7abdaa9c   156  0000ffff       constant


Safepoints (size = 21)
0xffff7abdaa54    84  111000 (sp -> fp)       1

RelocInfo (size = 17)
0xffff7abdaa4c  code target (STUB)  (0xffff7ab06060)
0xffff7abdaa64  constant pool (size 20)
0xffff7abdaa80  runtime entry
0xffff7abdaa8c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MEGAMORPHIC
extra_ic_state = 2709
name = BinaryOpICStub(SHR:Generic*Smi->Smi)
compiler = crankshaft
Instructions (size = 181)
0xffff7abdaa00     0  movz x16, #0xa00000000
0xffff7abdaa04     4  sub csp, jssp, #0x10 (16)
0xffff7abdaa08     8  stp fp, lr, [jssp, #-16]!
0xffff7abdaa0c    12  mov fp, jssp
0xffff7abdaa10    16  sub csp, jssp, #0x20 (32)
0xffff7abdaa14    20  sub jssp, jssp, #0x20 (32)
0xffff7abdaa18    24  stur x16, [fp, #-8]
0xffff7abdaa1c    28  str x1, [jssp, #16]
0xffff7abdaa20    32  str x0, [jssp, #8]
0xffff7abdaa24    36  str cp, [jssp]
0xffff7abdaa28    40  mov x3, cp
0xffff7abdaa2c    44  mov x2, x0
0xffff7abdaa30    48  tbnz w2, #0, #+0x48 (addr 0xffff7abdaa78)
0xffff7abdaa34    52  sub csp, jssp, #0x10 (16)
0xffff7abdaa38    56  stp x2, x1, [jssp, #-16]!
0xffff7abdaa3c    60  mov cp, x3
0xffff7abdaa40    64  movz x0, #0x2
0xffff7abdaa44    68  movz x1, #0xf938
0xffff7abdaa48    72  movk x1, #0xe4, lsl #16
0xffff7abdaa4c    76  ldr x16, pc+36 (addr 0x0000ffff7abdaa70)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abdaa50    80  blr x16
0xffff7abdaa54    84  ldr cp, [jssp]
0xffff7abdaa58    88  mov jssp, fp
0xffff7abdaa5c    92  ldp fp, lr, [jssp], #16
0xffff7abdaa60    96  ret
0xffff7abdaa64   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abdaa68   104  d63f03e0       constant
0xffff7abdaa6c   108  d503201f       constant
0xffff7abdaa70   112  7ab06060       constant
0xffff7abdaa74   116  0000ffff       constant
0xffff7abdaa78   120  movz x16, #0x0
0xffff7abdaa7c   124  bl #+0x4 (addr 0xffff7abdaa80)
0xffff7abdaa80   128  ldr x17, pc+24 (addr 0x0000ffff7abdaa98)    ;; lazy deoptimization bailout 0
0xffff7abdaa84   132  add x17, x17, x16
0xffff7abdaa88   136  br x17
0xffff7abdaa8c   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abdaa90   144  d63f03e0       constant
0xffff7abdaa94   148  d503201f       constant
0xffff7abdaa98   152  7a906000       constant
0xffff7abdaa9c   156  0000ffff       constant


Safepoints (size = 21)
0xffff7abdaa54    84  111000 (sp -> fp)       1

RelocInfo (size = 17)
0xffff7abdaa4c  code target (STUB)  (0xffff7ab06060)
0xffff7abdaa64  constant pool (size 20)
0xffff7abdaa80  runtime entry
0xffff7abdaa8c  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = SMI*STRING -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 632)
0xffff7abdab20     0  tbnz w1, #0, #+0x1d4 (addr 0xffff7abdacf4)
0xffff7abdab24     4  orr x16, x1, x0
0xffff7abdab28     8  tbnz w16, #0, #+0x10 (addr 0xffff7abdab38)
0xffff7abdab2c    12  asr x1, x1, #32
0xffff7abdab30    16  sub x0, x1, x0, asr #32
0xffff7abdab34    20  ret
0xffff7abdab38    24  cmp x0, x1
0xffff7abdab3c    28  b.ne #+0x30 (addr 0xffff7abdab6c)
0xffff7abdab40    32  ldur x16, [x0, #-1]
0xffff7abdab44    36  ldr x17, [x26, #120]
0xffff7abdab48    40  cmp x16, x17
0xffff7abdab4c    44  b.eq #+0xc (addr 0xffff7abdab58)
0xffff7abdab50    48  movz x0, #0x0
0xffff7abdab54    52  ret
0xffff7abdab58    56  ldur d0, [x0, #7]
0xffff7abdab5c    60  fcmp d0, d0
0xffff7abdab60    64  b.vc #-0x10 (addr 0xffff7abdab50)
0xffff7abdab64    68  movn x0, #0x0
0xffff7abdab68    72  ret
0xffff7abdab6c    76  and x16, x1, x0
0xffff7abdab70    80  tbnz w16, #0, #+0x64 (addr 0xffff7abdabd4)
0xffff7abdab74    84  tbz w0, #0, #+0x24 (addr 0xffff7abdab98)
0xffff7abdab78    88  ldur x16, [x0, #-1]
0xffff7abdab7c    92  ldr x17, [x26, #120]
0xffff7abdab80    96  cmp x16, x17
0xffff7abdab84   100  b.eq #+0x8 (addr 0xffff7abdab8c)
0xffff7abdab88   104  ret
0xffff7abdab8c   108  ldur d0, [x0, #7]
0xffff7abdab90   112  scvtf d1, x1, #32
0xffff7abdab94   116  b #+0x24 (addr 0xffff7abdabb8)
0xffff7abdab98   120  ldur x16, [x1, #-1]
0xffff7abdab9c   124  ldr x17, [x26, #120]
0xffff7abdaba0   128  cmp x16, x17
0xffff7abdaba4   132  b.eq #+0xc (addr 0xffff7abdabb0)
0xffff7abdaba8   136  movz x0, #0x1
0xffff7abdabac   140  ret
0xffff7abdabb0   144  ldur d1, [x1, #7]
0xffff7abdabb4   148  scvtf d0, x0, #32
0xffff7abdabb8   152  fcmp d1, d0
0xffff7abdabbc   156  b.vs #+0x10 (addr 0xffff7abdabcc)
0xffff7abdabc0   160  cset x0, gt
0xffff7abdabc4   164  csinv x0, x0, xzr, ge
0xffff7abdabc8   168  ret
0xffff7abdabcc   172  movn x0, #0x0
0xffff7abdabd0   176  ret
0xffff7abdabd4   180  ldur x10, [x0, #-1]
0xffff7abdabd8   184  ldur x12, [x1, #-1]
0xffff7abdabdc   188  ldrb w11, [x10, #11]
0xffff7abdabe0   192  ldrb w13, [x12, #11]
0xffff7abdabe4   196  cmp x11, #0xb1 (177)
0xffff7abdabe8   200  b.lt #+0x8 (addr 0xffff7abdabf0)
0xffff7abdabec   204  ret
0xffff7abdabf0   208  cmp x11, #0x83 (131)
0xffff7abdabf4   212  movz x16, #0x83
0xffff7abdabf8   216  ccmp x13, x16, #nZcv, ne
0xffff7abdabfc   220  movz x16, #0xb1
0xffff7abdac00   224  ccmp x13, x16, #NzcV, ne
0xffff7abdac04   228  b.ge #-0x18 (addr 0xffff7abdabec)
0xffff7abdac08   232  orr x14, x13, x11
0xffff7abdac0c   236  tst x14, #0xc0
0xffff7abdac10   240  b.eq #-0x24 (addr 0xffff7abdabec)
0xffff7abdac14   244  cmp x11, #0x81 (129)
0xffff7abdac18   248  b.ne #+0x18 (addr 0xffff7abdac30)
0xffff7abdac1c   252  cmp x12, x10
0xffff7abdac20   256  b.ne #+0x10 (addr 0xffff7abdac30)
0xffff7abdac24   260  ldur d1, [x1, #7]
0xffff7abdac28   264  ldur d0, [x0, #7]
0xffff7abdac2c   268  b #-0x74 (addr 0xffff7abdabb8)
0xffff7abdac30   272  movz x16, #0x87
0xffff7abdac34   276  and x14, x13, x16
0xffff7abdac38   280  movz x16, #0x87
0xffff7abdac3c   284  and x15, x11, x16
0xffff7abdac40   288  cmp x14, #0x4 (4)
0xffff7abdac44   292  ccmp x15, #4, #nzcv, eq
0xffff7abdac48   296  b.ne #+0x5c (addr 0xffff7abdaca4)
0xffff7abdac4c   300  ldur x10, [x1, #15]
0xffff7abdac50   304  ldur x11, [x0, #15]
0xffff7abdac54   308  cmp x10, x11
0xffff7abdac58   312  b.eq #+0xc (addr 0xffff7abdac64)
0xffff7abdac5c   316  movz x0, #0x100000000
0xffff7abdac60   320  ret
0xffff7abdac64   324  cbnz x10, #+0xc (addr 0xffff7abdac70)
0xffff7abdac68   328  movz x0, #0x0
0xffff7abdac6c   332  ret
0xffff7abdac70   336  asr x10, x10, #32
0xffff7abdac74   340  add x11, x10, #0x17 (23)
0xffff7abdac78   344  add x1, x1, x11
0xffff7abdac7c   348  add x0, x0, x11
0xffff7abdac80   352  neg x10, x10
0xffff7abdac84   356  ldrb w11, [x1, x10]
0xffff7abdac88   360  ldrb w12, [x0, x10]
0xffff7abdac8c   364  cmp x11, x12
0xffff7abdac90   368  b.ne #-0x34 (addr 0xffff7abdac5c)
0xffff7abdac94   372  add x10, x10, #0x1 (1)
0xffff7abdac98   376  cbnz x10, #-0x14 (addr 0xffff7abdac84)
0xffff7abdac9c   380  movz x0, #0x0
0xffff7abdaca0   384  ret
0xffff7abdaca4   388  movz x16, #0xc00000000
0xffff7abdaca8   392  sub csp, jssp, #0x10 (16)
0xffff7abdacac   396  stp fp, lr, [jssp, #-16]!
0xffff7abdacb0   400  sub csp, jssp, #0x10 (16)
0xffff7abdacb4   404  str x16, [jssp, #-8]!
0xffff7abdacb8   408  ldr x17, pc+176 (addr 0x0000ffff7abdad68)    ;; object: 0xffff7abdaac1 <Code: COMPARE_IC>
0xffff7abdacbc   412  sub csp, jssp, #0x10 (16)
0xffff7abdacc0   416  str x17, [jssp, #-8]!
0xffff7abdacc4   420  add fp, jssp, #0x10 (16)
0xffff7abdacc8   424  sub csp, jssp, #0x10 (16)
0xffff7abdaccc   428  stp x0, x1, [jssp, #-16]!
0xffff7abdacd0   432  movz x0, #0x2
0xffff7abdacd4   436  ldr x1, pc+156 (addr 0x0000ffff7abdad70)    ;; external reference (Runtime::StrictEqual)
0xffff7abdacd8   440  ldr x16, pc+160 (addr 0x0000ffff7abdad78)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abdacdc   444  blr x16
0xffff7abdace0   448  mov jssp, fp
0xffff7abdace4   452  ldp fp, lr, [jssp], #16
0xffff7abdace8   456  ldr x1, [x26, #64]
0xffff7abdacec   460  sub x0, x0, x1
0xffff7abdacf0   464  ret
0xffff7abdacf4   468  movz x16, #0xc00000000
0xffff7abdacf8   472  sub csp, jssp, #0x10 (16)
0xffff7abdacfc   476  stp fp, lr, [jssp, #-16]!
0xffff7abdad00   480  sub csp, jssp, #0x10 (16)
0xffff7abdad04   484  str x16, [jssp, #-8]!
0xffff7abdad08   488  ldr x17, pc+120 (addr 0x0000ffff7abdad80)    ;; object: 0xffff7abdaac1 <Code: COMPARE_IC>
0xffff7abdad0c   492  sub csp, jssp, #0x10 (16)
0xffff7abdad10   496  str x17, [jssp, #-8]!
0xffff7abdad14   500  add fp, jssp, #0x10 (16)
0xffff7abdad18   504  sub csp, jssp, #0x18 (24)
0xffff7abdad1c   508  stp lr, x0, [jssp, #-24]!
0xffff7abdad20   512  str x1, [jssp, #16]
0xffff7abdad24   516  movz x10, #0x2f00000000
0xffff7abdad28   520  sub csp, jssp, #0x18 (24)
0xffff7abdad2c   524  stp x10, x0, [jssp, #-24]!
0xffff7abdad30   528  str x1, [jssp, #16]
0xffff7abdad34   532  movz x0, #0x3
0xffff7abdad38   536  ldr x1, pc+80 (addr 0x0000ffff7abdad88)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7abdad3c   540  ldr x16, pc+84 (addr 0x0000ffff7abdad90)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abdad40   544  blr x16
0xffff7abdad44   548  add x11, x0, #0x5f (95)
0xffff7abdad48   552  ldr x1, [jssp, #16]
0xffff7abdad4c   556  ldp lr, x0, [jssp], #24
0xffff7abdad50   560  mov jssp, fp
0xffff7abdad54   564  ldp fp, lr, [jssp], #16
0xffff7abdad58   568  br x11
0xffff7abdad5c   572  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abdad60   576  d63f03e0       constant
0xffff7abdad64   580  d503201f       constant
0xffff7abdad68   584  7abdaac1       constant
0xffff7abdad6c   588  0000ffff       constant
0xffff7abdad70   592  00e50928       constant
0xffff7abdad74   596  00000000       constant
0xffff7abdad78   600  7ab06060       constant
0xffff7abdad7c   604  0000ffff       constant
0xffff7abdad80   608  7abdaac1       constant
0xffff7abdad84   612  0000ffff       constant
0xffff7abdad88   616  00c8a980       constant
0xffff7abdad8c   620  00000000       constant
0xffff7abdad90   624  7ab06060       constant
0xffff7abdad94   628  0000ffff       constant


RelocInfo (size = 16)
0xffff7abdacb8  embedded object  (0xffff7abdaac1 <Code: COMPARE_IC>)
0xffff7abdacd4  external reference (Runtime::StrictEqual)  (0xe50928)
0xffff7abdacd8  code target (STUB)  (0xffff7ab06060)
0xffff7abdad08  embedded object  (0xffff7abdaac1 <Code: COMPARE_IC>)
0xffff7abdad38  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7abdad3c  code target (STUB)  (0xffff7ab06060)
0xffff7abdad5c  constant pool (size 60)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*GENERIC -> GENERIC
compare_operation = LTE
name = CompareICStub
compiler = unknown
Instructions (size = 568)
0xffff7abddba0     0  orr x16, x1, x0
0xffff7abddba4     4  tbnz w16, #0, #+0x10 (addr 0xffff7abddbb4)
0xffff7abddba8     8  asr x1, x1, #32
0xffff7abddbac    12  sub x0, x1, x0, asr #32
0xffff7abddbb0    16  ret
0xffff7abddbb4    20  cmp x0, x1
0xffff7abddbb8    24  b.ne #+0x64 (addr 0xffff7abddc1c)
0xffff7abddbbc    28  ldur x10, [x0, #-1]
0xffff7abddbc0    32  ldrb w10, [x10, #11]
0xffff7abddbc4    36  cmp x10, #0x81 (129)
0xffff7abddbc8    40  b.eq #+0x40 (addr 0xffff7abddc08)
0xffff7abddbcc    44  cmp x10, #0xb1 (177)
0xffff7abddbd0    48  b.ge #+0x148 (addr 0xffff7abddd18)
0xffff7abddbd4    52  cmp x10, #0x80 (128)
0xffff7abddbd8    56  b.eq #+0x140 (addr 0xffff7abddd18)
0xffff7abddbdc    60  cmp x10, #0x82 (130)
0xffff7abddbe0    64  b.eq #+0x138 (addr 0xffff7abddd18)
0xffff7abddbe4    68  cmp x10, #0x83 (131)
0xffff7abddbe8    72  b.ne #+0x18 (addr 0xffff7abddc00)
0xffff7abddbec    76  ldr x16, [x26, #40]
0xffff7abddbf0    80  cmp x0, x16
0xffff7abddbf4    84  b.ne #+0xc (addr 0xffff7abddc00)
0xffff7abddbf8    88  movz x0, #0x1
0xffff7abddbfc    92  ret
0xffff7abddc00    96  movz x0, #0x0
0xffff7abddc04   100  ret
0xffff7abddc08   104  ldur d0, [x0, #7]
0xffff7abddc0c   108  fcmp d0, d0
0xffff7abddc10   112  b.vc #-0x10 (addr 0xffff7abddc00)
0xffff7abddc14   116  movz x0, #0x1
0xffff7abddc18   120  ret
0xffff7abddc1c   124  and x16, x1, x0
0xffff7abddc20   128  tbnz w16, #0, #+0x58 (addr 0xffff7abddc78)
0xffff7abddc24   132  tbz w0, #0, #+0x20 (addr 0xffff7abddc44)
0xffff7abddc28   136  ldur x16, [x0, #-1]
0xffff7abddc2c   140  ldr x17, [x26, #120]
0xffff7abddc30   144  cmp x16, x17
0xffff7abddc34   148  b.ne #+0xe4 (addr 0xffff7abddd18)
0xffff7abddc38   152  ldur d0, [x0, #7]
0xffff7abddc3c   156  scvtf d1, x1, #32
0xffff7abddc40   160  b #+0x1c (addr 0xffff7abddc5c)
0xffff7abddc44   164  ldur x16, [x1, #-1]
0xffff7abddc48   168  ldr x17, [x26, #120]
0xffff7abddc4c   172  cmp x16, x17
0xffff7abddc50   176  b.ne #+0xc8 (addr 0xffff7abddd18)
0xffff7abddc54   180  ldur d1, [x1, #7]
0xffff7abddc58   184  scvtf d0, x0, #32
0xffff7abddc5c   188  fcmp d1, d0
0xffff7abddc60   192  b.vs #+0x10 (addr 0xffff7abddc70)
0xffff7abddc64   196  cset x0, gt
0xffff7abddc68   200  csinv x0, x0, xzr, ge
0xffff7abddc6c   204  ret
0xffff7abddc70   208  movz x0, #0x1
0xffff7abddc74   212  ret
0xffff7abddc78   216  ldur x10, [x0, #-1]
0xffff7abddc7c   220  ldur x12, [x1, #-1]
0xffff7abddc80   224  ldrb w11, [x10, #11]
0xffff7abddc84   228  ldrb w13, [x12, #11]
0xffff7abddc88   232  cmp x11, #0x81 (129)
0xffff7abddc8c   236  b.ne #+0x18 (addr 0xffff7abddca4)
0xffff7abddc90   240  cmp x12, x10
0xffff7abddc94   244  b.ne #+0x10 (addr 0xffff7abddca4)
0xffff7abddc98   248  ldur d1, [x1, #7]
0xffff7abddc9c   252  ldur d0, [x0, #7]
0xffff7abddca0   256  b #-0x44 (addr 0xffff7abddc5c)
0xffff7abddca4   260  movz x16, #0x87
0xffff7abddca8   264  and x14, x13, x16
0xffff7abddcac   268  movz x16, #0x87
0xffff7abddcb0   272  and x15, x11, x16
0xffff7abddcb4   276  cmp x14, #0x4 (4)
0xffff7abddcb8   280  ccmp x15, #4, #nzcv, eq
0xffff7abddcbc   284  b.ne #+0x5c (addr 0xffff7abddd18)
0xffff7abddcc0   288  ldur x10, [x1, #15]
0xffff7abddcc4   292  ldur x11, [x0, #15]
0xffff7abddcc8   296  subs x12, x10, x11
0xffff7abddccc   300  csel x10, x11, x10, gt
0xffff7abddcd0   304  cbz x10, #+0x30 (addr 0xffff7abddd00)
0xffff7abddcd4   308  asr x10, x10, #32
0xffff7abddcd8   312  add x11, x10, #0x17 (23)
0xffff7abddcdc   316  add x1, x1, x11
0xffff7abddce0   320  add x0, x0, x11
0xffff7abddce4   324  neg x10, x10
0xffff7abddce8   328  ldrb w11, [x1, x10]
0xffff7abddcec   332  ldrb w13, [x0, x10]
0xffff7abddcf0   336  cmp x11, x13
0xffff7abddcf4   340  b.ne #+0x10 (addr 0xffff7abddd04)
0xffff7abddcf8   344  add x10, x10, #0x1 (1)
0xffff7abddcfc   348  cbnz x10, #-0x14 (addr 0xffff7abddce8)
0xffff7abddd00   352  subs x0, x12, #0x0 (0)
0xffff7abddd04   356  movz x10, #0x100000000
0xffff7abddd08   360  mov x11, #0xffffffff00000000
0xffff7abddd0c   364  csel x0, x10, x0, gt
0xffff7abddd10   368  csel x0, x11, x0, lt
0xffff7abddd14   372  ret
0xffff7abddd18   376  sub csp, jssp, #0x10 (16)
0xffff7abddd1c   380  stp x0, x1, [jssp, #-16]!
0xffff7abddd20   384  movz x10, #0x100000000
0xffff7abddd24   388  sub csp, jssp, #0x8 (8)
0xffff7abddd28   392  str x10, [jssp, #-8]!
0xffff7abddd2c   396  movz x0, #0x3
0xffff7abddd30   400  ldr x1, pc+128 (addr 0x0000ffff7abdddb0)    ;; external reference (Runtime::Compare)
0xffff7abddd34   404  ldr x16, pc+132 (addr 0x0000ffff7abdddb8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abddd38   408  br x16
0xffff7abddd3c   412  movz x16, #0xc00000000
0xffff7abddd40   416  sub csp, jssp, #0x10 (16)
0xffff7abddd44   420  stp fp, lr, [jssp, #-16]!
0xffff7abddd48   424  sub csp, jssp, #0x10 (16)
0xffff7abddd4c   428  str x16, [jssp, #-8]!
0xffff7abddd50   432  ldr x17, pc+112 (addr 0x0000ffff7abdddc0)    ;; object: 0xffff7abddb41 <Code: COMPARE_IC>
0xffff7abddd54   436  sub csp, jssp, #0x10 (16)
0xffff7abddd58   440  str x17, [jssp, #-8]!
0xffff7abddd5c   444  add fp, jssp, #0x10 (16)
0xffff7abddd60   448  sub csp, jssp, #0x18 (24)
0xffff7abddd64   452  stp lr, x0, [jssp, #-24]!
0xffff7abddd68   456  str x1, [jssp, #16]
0xffff7abddd6c   460  movz x10, #0x3300000000
0xffff7abddd70   464  sub csp, jssp, #0x18 (24)
0xffff7abddd74   468  stp x10, x0, [jssp, #-24]!
0xffff7abddd78   472  str x1, [jssp, #16]
0xffff7abddd7c   476  movz x0, #0x3
0xffff7abddd80   480  ldr x1, pc+72 (addr 0x0000ffff7abdddc8)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7abddd84   484  ldr x16, pc+76 (addr 0x0000ffff7abdddd0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abddd88   488  blr x16
0xffff7abddd8c   492  add x11, x0, #0x5f (95)
0xffff7abddd90   496  ldr x1, [jssp, #16]
0xffff7abddd94   500  ldp lr, x0, [jssp], #24
0xffff7abddd98   504  mov jssp, fp
0xffff7abddd9c   508  ldp fp, lr, [jssp], #16
0xffff7abddda0   512  br x11
0xffff7abddda4   516  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0xffff7abddda8   520  d63f03e0       constant
0xffff7abdddac   524  d503201f       constant
0xffff7abdddb0   528  00e49ea8       constant
0xffff7abdddb4   532  00000000       constant
0xffff7abdddb8   536  7ab06060       constant
0xffff7abdddbc   540  0000ffff       constant
0xffff7abdddc0   544  7abddb41       constant
0xffff7abdddc4   548  0000ffff       constant
0xffff7abdddc8   552  00c8a980       constant
0xffff7abdddcc   556  00000000       constant
0xffff7abdddd0   560  7ab06060       constant
0xffff7abdddd4   564  0000ffff       constant


RelocInfo (size = 15)
0xffff7abddd30  external reference (Runtime::Compare)  (0xe49ea8)
0xffff7abddd34  code target (STUB)  (0xffff7ab06060)
0xffff7abddd50  embedded object  (0xffff7abddb41 <Code: COMPARE_IC>)
0xffff7abddd80  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7abddd84  code target (STUB)  (0xffff7ab06060)
0xffff7abddda4  constant pool (size 52)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = NUMBER*SMI -> NUMBER
compare_operation = LTE
name = CompareICStub
compiler = unknown
Instructions (size = 280)
0xffff7abdde40     0  tbnz w0, #0, #+0x88 (addr 0xffff7abddec8)
0xffff7abdde44     4  scvtf d0, x0, #32
0xffff7abdde48     8  scvtf d1, x1, #32
0xffff7abdde4c    12  tbz w0, #0, #+0x18 (addr 0xffff7abdde64)
0xffff7abdde50    16  ldur x16, [x0, #-1]
0xffff7abdde54    20  ldr x17, [x26, #120]
0xffff7abdde58    24  cmp x16, x17
0xffff7abdde5c    28  b.ne #+0x3c (addr 0xffff7abdde98)
0xffff7abdde60    32  ldur d0, [x0, #7]
0xffff7abdde64    36  tbz w1, #0, #+0x18 (addr 0xffff7abdde7c)
0xffff7abdde68    40  ldur x16, [x1, #-1]
0xffff7abdde6c    44  ldr x17, [x26, #120]
0xffff7abdde70    48  cmp x16, x17
0xffff7abdde74    52  b.ne #+0x48 (addr 0xffff7abddebc)
0xffff7abdde78    56  ldur d1, [x1, #7]
0xffff7abdde7c    60  fcmp d1, d0
0xffff7abdde80    64  b.vs #+0x10 (addr 0xffff7abdde90)
0xffff7abdde84    68  cset x0, gt
0xffff7abdde88    72  csinv x0, x0, xzr, ge
0xffff7abdde8c    76  ret
0xffff7abdde90    80  ldr x16, pc+168 (addr 0x0000ffff7abddf38)    ;; code: COMPARE_IC, GENERIC
0xffff7abdde94    84  br x16
0xffff7abdde98    88  ldr x16, [x26, #40]
0xffff7abdde9c    92  cmp x0, x16
0xffff7abddea0    96  b.ne #+0x28 (addr 0xffff7abddec8)
0xffff7abddea4   100  tbz w1, #0, #-0x14 (addr 0xffff7abdde90)
0xffff7abddea8   104  ldur x16, [x1, #-1]
0xffff7abddeac   108  ldr x17, [x26, #120]
0xffff7abddeb0   112  cmp x16, x17
0xffff7abddeb4   116  b.ne #+0x8 (addr 0xffff7abddebc)
0xffff7abddeb8   120  b #-0x28 (addr 0xffff7abdde90)
0xffff7abddebc   124  ldr x16, [x26, #40]
0xffff7abddec0   128  cmp x1, x16
0xffff7abddec4   132  b.eq #-0x34 (addr 0xffff7abdde90)
0xffff7abddec8   136  movz x16, #0xc00000000
0xffff7abddecc   140  sub csp, jssp, #0x10 (16)
0xffff7abdded0   144  stp fp, lr, [jssp, #-16]!
0xffff7abdded4   148  sub csp, jssp, #0x10 (16)
0xffff7abdded8   152  str x16, [jssp, #-8]!
0xffff7abddedc   156  ldr x17, pc+100 (addr 0x0000ffff7abddf40)    ;; object: 0xffff7abddde1 <Code: COMPARE_IC>
0xffff7abddee0   160  sub csp, jssp, #0x10 (16)
0xffff7abddee4   164  str x17, [jssp, #-8]!
0xffff7abddee8   168  add fp, jssp, #0x10 (16)
0xffff7abddeec   172  sub csp, jssp, #0x18 (24)
0xffff7abddef0   176  stp lr, x0, [jssp, #-24]!
0xffff7abddef4   180  str x1, [jssp, #16]
0xffff7abddef8   184  movz x10, #0x3300000000
0xffff7abddefc   188  sub csp, jssp, #0x18 (24)
0xffff7abddf00   192  stp x10, x0, [jssp, #-24]!
0xffff7abddf04   196  str x1, [jssp, #16]
0xffff7abddf08   200  movz x0, #0x3
0xffff7abddf0c   204  ldr x1, pc+60 (addr 0x0000ffff7abddf48)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7abddf10   208  ldr x16, pc+64 (addr 0x0000ffff7abddf50)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abddf14   212  blr x16
0xffff7abddf18   216  add x11, x0, #0x5f (95)
0xffff7abddf1c   220  ldr x1, [jssp, #16]
0xffff7abddf20   224  ldp lr, x0, [jssp], #24
0xffff7abddf24   228  mov jssp, fp
0xffff7abddf28   232  ldp fp, lr, [jssp], #16
0xffff7abddf2c   236  br x11
0xffff7abddf30   240  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abddf34   244  d63f03e0       constant
0xffff7abddf38   248  7abddba0       constant
0xffff7abddf3c   252  0000ffff       constant
0xffff7abddf40   256  7abddde1       constant
0xffff7abddf44   260  0000ffff       constant
0xffff7abddf48   264  00c8a980       constant
0xffff7abddf4c   268  00000000       constant
0xffff7abddf50   272  7ab06060       constant
0xffff7abddf54   276  0000ffff       constant


RelocInfo (size = 15)
0xffff7abdde90  code target (COMPARE_IC)  (0xffff7abddba0)
0xffff7abddedc  embedded object  (0xffff7abddde1 <Code: COMPARE_IC>)
0xffff7abddf0c  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7abddf10  code target (STUB)  (0xffff7ab06060)
0xffff7abddf30  constant pool (size 40)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*GENERIC -> GENERIC
compare_operation = GT
name = CompareICStub
compiler = unknown
Instructions (size = 512)
0xffff7abddfc0     0  orr x16, x1, x0
0xffff7abddfc4     4  tbnz w16, #0, #+0x10 (addr 0xffff7abddfd4)
0xffff7abddfc8     8  asr x1, x1, #32
0xffff7abddfcc    12  sub x0, x1, x0, asr #32
0xffff7abddfd0    16  ret
0xffff7abddfd4    20  cmp x0, x1
0xffff7abddfd8    24  b.ne #+0x2c (addr 0xffff7abde004)
0xffff7abddfdc    28  ldur x10, [x0, #-1]
0xffff7abddfe0    32  ldrb w10, [x10, #11]
0xffff7abddfe4    36  cmp x10, #0xb1 (177)
0xffff7abddfe8    40  b.ge #+0x118 (addr 0xffff7abde100)
0xffff7abddfec    44  cmp x10, #0x80 (128)
0xffff7abddff0    48  b.eq #+0x110 (addr 0xffff7abde100)
0xffff7abddff4    52  cmp x10, #0x82 (130)
0xffff7abddff8    56  b.eq #+0x108 (addr 0xffff7abde100)
0xffff7abddffc    60  movn x0, #0x0
0xffff7abde000    64  ret
0xffff7abde004    68  and x16, x1, x0
0xffff7abde008    72  tbnz w16, #0, #+0x58 (addr 0xffff7abde060)
0xffff7abde00c    76  tbz w0, #0, #+0x20 (addr 0xffff7abde02c)
0xffff7abde010    80  ldur x16, [x0, #-1]
0xffff7abde014    84  ldr x17, [x26, #120]
0xffff7abde018    88  cmp x16, x17
0xffff7abde01c    92  b.ne #+0xe4 (addr 0xffff7abde100)
0xffff7abde020    96  ldur d0, [x0, #7]
0xffff7abde024   100  scvtf d1, x1, #32
0xffff7abde028   104  b #+0x1c (addr 0xffff7abde044)
0xffff7abde02c   108  ldur x16, [x1, #-1]
0xffff7abde030   112  ldr x17, [x26, #120]
0xffff7abde034   116  cmp x16, x17
0xffff7abde038   120  b.ne #+0xc8 (addr 0xffff7abde100)
0xffff7abde03c   124  ldur d1, [x1, #7]
0xffff7abde040   128  scvtf d0, x0, #32
0xffff7abde044   132  fcmp d1, d0
0xffff7abde048   136  b.vs #+0x10 (addr 0xffff7abde058)
0xffff7abde04c   140  cset x0, gt
0xffff7abde050   144  csinv x0, x0, xzr, ge
0xffff7abde054   148  ret
0xffff7abde058   152  movn x0, #0x0
0xffff7abde05c   156  ret
0xffff7abde060   160  ldur x10, [x0, #-1]
0xffff7abde064   164  ldur x12, [x1, #-1]
0xffff7abde068   168  ldrb w11, [x10, #11]
0xffff7abde06c   172  ldrb w13, [x12, #11]
0xffff7abde070   176  cmp x11, #0x81 (129)
0xffff7abde074   180  b.ne #+0x18 (addr 0xffff7abde08c)
0xffff7abde078   184  cmp x12, x10
0xffff7abde07c   188  b.ne #+0x10 (addr 0xffff7abde08c)
0xffff7abde080   192  ldur d1, [x1, #7]
0xffff7abde084   196  ldur d0, [x0, #7]
0xffff7abde088   200  b #-0x44 (addr 0xffff7abde044)
0xffff7abde08c   204  movz x16, #0x87
0xffff7abde090   208  and x14, x13, x16
0xffff7abde094   212  movz x16, #0x87
0xffff7abde098   216  and x15, x11, x16
0xffff7abde09c   220  cmp x14, #0x4 (4)
0xffff7abde0a0   224  ccmp x15, #4, #nzcv, eq
0xffff7abde0a4   228  b.ne #+0x5c (addr 0xffff7abde100)
0xffff7abde0a8   232  ldur x10, [x1, #15]
0xffff7abde0ac   236  ldur x11, [x0, #15]
0xffff7abde0b0   240  subs x12, x10, x11
0xffff7abde0b4   244  csel x10, x11, x10, gt
0xffff7abde0b8   248  cbz x10, #+0x30 (addr 0xffff7abde0e8)
0xffff7abde0bc   252  asr x10, x10, #32
0xffff7abde0c0   256  add x11, x10, #0x17 (23)
0xffff7abde0c4   260  add x1, x1, x11
0xffff7abde0c8   264  add x0, x0, x11
0xffff7abde0cc   268  neg x10, x10
0xffff7abde0d0   272  ldrb w11, [x1, x10]
0xffff7abde0d4   276  ldrb w13, [x0, x10]
0xffff7abde0d8   280  cmp x11, x13
0xffff7abde0dc   284  b.ne #+0x10 (addr 0xffff7abde0ec)
0xffff7abde0e0   288  add x10, x10, #0x1 (1)
0xffff7abde0e4   292  cbnz x10, #-0x14 (addr 0xffff7abde0d0)
0xffff7abde0e8   296  subs x0, x12, #0x0 (0)
0xffff7abde0ec   300  movz x10, #0x100000000
0xffff7abde0f0   304  mov x11, #0xffffffff00000000
0xffff7abde0f4   308  csel x0, x10, x0, gt
0xffff7abde0f8   312  csel x0, x11, x0, lt
0xffff7abde0fc   316  ret
0xffff7abde100   320  sub csp, jssp, #0x10 (16)
0xffff7abde104   324  stp x0, x1, [jssp, #-16]!
0xffff7abde108   328  mov x10, #0xffffffff00000000
0xffff7abde10c   332  sub csp, jssp, #0x8 (8)
0xffff7abde110   336  str x10, [jssp, #-8]!
0xffff7abde114   340  movz x0, #0x3
0xffff7abde118   344  ldr x1, pc+128 (addr 0x0000ffff7abde198)    ;; external reference (Runtime::Compare)
0xffff7abde11c   348  ldr x16, pc+132 (addr 0x0000ffff7abde1a0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abde120   352  br x16
0xffff7abde124   356  movz x16, #0xc00000000
0xffff7abde128   360  sub csp, jssp, #0x10 (16)
0xffff7abde12c   364  stp fp, lr, [jssp, #-16]!
0xffff7abde130   368  sub csp, jssp, #0x10 (16)
0xffff7abde134   372  str x16, [jssp, #-8]!
0xffff7abde138   376  ldr x17, pc+112 (addr 0x0000ffff7abde1a8)    ;; object: 0xffff7abddf61 <Code: COMPARE_IC>
0xffff7abde13c   380  sub csp, jssp, #0x10 (16)
0xffff7abde140   384  str x17, [jssp, #-8]!
0xffff7abde144   388  add fp, jssp, #0x10 (16)
0xffff7abde148   392  sub csp, jssp, #0x18 (24)
0xffff7abde14c   396  stp lr, x0, [jssp, #-24]!
0xffff7abde150   400  str x1, [jssp, #16]
0xffff7abde154   404  movz x10, #0x3200000000
0xffff7abde158   408  sub csp, jssp, #0x18 (24)
0xffff7abde15c   412  stp x10, x0, [jssp, #-24]!
0xffff7abde160   416  str x1, [jssp, #16]
0xffff7abde164   420  movz x0, #0x3
0xffff7abde168   424  ldr x1, pc+72 (addr 0x0000ffff7abde1b0)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7abde16c   428  ldr x16, pc+76 (addr 0x0000ffff7abde1b8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abde170   432  blr x16
0xffff7abde174   436  add x11, x0, #0x5f (95)
0xffff7abde178   440  ldr x1, [jssp, #16]
0xffff7abde17c   444  ldp lr, x0, [jssp], #24
0xffff7abde180   448  mov jssp, fp
0xffff7abde184   452  ldp fp, lr, [jssp], #16
0xffff7abde188   456  br x11
0xffff7abde18c   460  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0xffff7abde190   464  d63f03e0       constant
0xffff7abde194   468  d503201f       constant
0xffff7abde198   472  00e49ea8       constant
0xffff7abde19c   476  00000000       constant
0xffff7abde1a0   480  7ab06060       constant
0xffff7abde1a4   484  0000ffff       constant
0xffff7abde1a8   488  7abddf61       constant
0xffff7abde1ac   492  0000ffff       constant
0xffff7abde1b0   496  00c8a980       constant
0xffff7abde1b4   500  00000000       constant
0xffff7abde1b8   504  7ab06060       constant
0xffff7abde1bc   508  0000ffff       constant


RelocInfo (size = 15)
0xffff7abde118  external reference (Runtime::Compare)  (0xe49ea8)
0xffff7abde11c  code target (STUB)  (0xffff7ab06060)
0xffff7abde138  embedded object  (0xffff7abddf61 <Code: COMPARE_IC>)
0xffff7abde168  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7abde16c  code target (STUB)  (0xffff7ab06060)
0xffff7abde18c  constant pool (size 52)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = NUMBER*SMI -> NUMBER
compare_operation = GT
name = CompareICStub
compiler = unknown
Instructions (size = 280)
0xffff7abde220     0  tbnz w0, #0, #+0x88 (addr 0xffff7abde2a8)
0xffff7abde224     4  scvtf d0, x0, #32
0xffff7abde228     8  scvtf d1, x1, #32
0xffff7abde22c    12  tbz w0, #0, #+0x18 (addr 0xffff7abde244)
0xffff7abde230    16  ldur x16, [x0, #-1]
0xffff7abde234    20  ldr x17, [x26, #120]
0xffff7abde238    24  cmp x16, x17
0xffff7abde23c    28  b.ne #+0x3c (addr 0xffff7abde278)
0xffff7abde240    32  ldur d0, [x0, #7]
0xffff7abde244    36  tbz w1, #0, #+0x18 (addr 0xffff7abde25c)
0xffff7abde248    40  ldur x16, [x1, #-1]
0xffff7abde24c    44  ldr x17, [x26, #120]
0xffff7abde250    48  cmp x16, x17
0xffff7abde254    52  b.ne #+0x48 (addr 0xffff7abde29c)
0xffff7abde258    56  ldur d1, [x1, #7]
0xffff7abde25c    60  fcmp d1, d0
0xffff7abde260    64  b.vs #+0x10 (addr 0xffff7abde270)
0xffff7abde264    68  cset x0, gt
0xffff7abde268    72  csinv x0, x0, xzr, ge
0xffff7abde26c    76  ret
0xffff7abde270    80  ldr x16, pc+168 (addr 0x0000ffff7abde318)    ;; code: COMPARE_IC, GENERIC
0xffff7abde274    84  br x16
0xffff7abde278    88  ldr x16, [x26, #40]
0xffff7abde27c    92  cmp x0, x16
0xffff7abde280    96  b.ne #+0x28 (addr 0xffff7abde2a8)
0xffff7abde284   100  tbz w1, #0, #-0x14 (addr 0xffff7abde270)
0xffff7abde288   104  ldur x16, [x1, #-1]
0xffff7abde28c   108  ldr x17, [x26, #120]
0xffff7abde290   112  cmp x16, x17
0xffff7abde294   116  b.ne #+0x8 (addr 0xffff7abde29c)
0xffff7abde298   120  b #-0x28 (addr 0xffff7abde270)
0xffff7abde29c   124  ldr x16, [x26, #40]
0xffff7abde2a0   128  cmp x1, x16
0xffff7abde2a4   132  b.eq #-0x34 (addr 0xffff7abde270)
0xffff7abde2a8   136  movz x16, #0xc00000000
0xffff7abde2ac   140  sub csp, jssp, #0x10 (16)
0xffff7abde2b0   144  stp fp, lr, [jssp, #-16]!
0xffff7abde2b4   148  sub csp, jssp, #0x10 (16)
0xffff7abde2b8   152  str x16, [jssp, #-8]!
0xffff7abde2bc   156  ldr x17, pc+100 (addr 0x0000ffff7abde320)    ;; object: 0xffff7abde1c1 <Code: COMPARE_IC>
0xffff7abde2c0   160  sub csp, jssp, #0x10 (16)
0xffff7abde2c4   164  str x17, [jssp, #-8]!
0xffff7abde2c8   168  add fp, jssp, #0x10 (16)
0xffff7abde2cc   172  sub csp, jssp, #0x18 (24)
0xffff7abde2d0   176  stp lr, x0, [jssp, #-24]!
0xffff7abde2d4   180  str x1, [jssp, #16]
0xffff7abde2d8   184  movz x10, #0x3200000000
0xffff7abde2dc   188  sub csp, jssp, #0x18 (24)
0xffff7abde2e0   192  stp x10, x0, [jssp, #-24]!
0xffff7abde2e4   196  str x1, [jssp, #16]
0xffff7abde2e8   200  movz x0, #0x3
0xffff7abde2ec   204  ldr x1, pc+60 (addr 0x0000ffff7abde328)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7abde2f0   208  ldr x16, pc+64 (addr 0x0000ffff7abde330)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abde2f4   212  blr x16
0xffff7abde2f8   216  add x11, x0, #0x5f (95)
0xffff7abde2fc   220  ldr x1, [jssp, #16]
0xffff7abde300   224  ldp lr, x0, [jssp], #24
0xffff7abde304   228  mov jssp, fp
0xffff7abde308   232  ldp fp, lr, [jssp], #16
0xffff7abde30c   236  br x11
0xffff7abde310   240  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abde314   244  d63f03e0       constant
0xffff7abde318   248  7abddfc0       constant
0xffff7abde31c   252  0000ffff       constant
0xffff7abde320   256  7abde1c1       constant
0xffff7abde324   260  0000ffff       constant
0xffff7abde328   264  00c8a980       constant
0xffff7abde32c   268  00000000       constant
0xffff7abde330   272  7ab06060       constant
0xffff7abde334   276  0000ffff       constant


RelocInfo (size = 15)
0xffff7abde270  code target (COMPARE_IC)  (0xffff7abddfc0)
0xffff7abde2bc  embedded object  (0xffff7abde1c1 <Code: COMPARE_IC>)
0xffff7abde2ec  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7abde2f0  code target (STUB)  (0xffff7ab06060)
0xffff7abde310  constant pool (size 40)


kind = HANDLER
major_key = <NoCache>Stub
name = Math
compiler = unknown
Instructions (size = 120)
0xffff7abded40     0  sub csp, jssp, #0x8 (8)
0xffff7abded44     4  str x3, [jssp, #-8]!
0xffff7abded48     8  sub csp, jssp, #0x8 (8)
0xffff7abded4c    12  str x0, [jssp, #-8]!
0xffff7abded50    16  ldr x0, pc+80 (addr 0x0000ffff7abdeda0)    ;; object: 0x20dc5d51 Cell for 0
0xffff7abded54    20  ldur x0, [x0, #7]
0xffff7abded58    24  cmp x0, #0x0 (0)
0xffff7abded5c    28  b.ne #+0x2c (addr 0xffff7abded88)
0xffff7abded60    32  ldr x0, pc+72 (addr 0x0000ffff7abdeda8)    ;; object: 0x5d4c7bf9 WeakCell for 0x20d46e89 PropertyCell for 0x20d46e51 <a Math with map 0x4ec0e5a1>
0xffff7abded64    36  ldur x0, [x0, #7]
0xffff7abded68    40  tbz w0, #0, #+0x20 (addr 0xffff7abded88)
0xffff7abded6c    44  ldur x0, [x0, #15]
0xffff7abded70    48  ldr x16, [x26, #88]
0xffff7abded74    52  cmp x0, x16
0xffff7abded78    56  b.eq #+0x10 (addr 0xffff7abded88)
0xffff7abded7c    60  add jssp, jssp, #0x10 (16)
0xffff7abded80    64  ret
0xffff7abded84    68  b #+0x14 (addr 0xffff7abded98)
0xffff7abded88    72  ldr x0, [jssp], #8
0xffff7abded8c    76  ldr x3, [jssp], #8
0xffff7abded90    80  ldr x16, pc+32 (addr 0x0000ffff7abdedb0)    ;; code: BUILTIN
0xffff7abded94    84  br x16
0xffff7abded98    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7abded9c    92  d63f03e0       constant
0xffff7abdeda0    96  20dc5d51       constant
0xffff7abdeda4   100  00000000       constant
0xffff7abdeda8   104  5d4c7bf9       constant
0xffff7abdedac   108  00000000       constant
0xffff7abdedb0   112  7ab222e0       constant
0xffff7abdedb4   116  0000ffff       constant


RelocInfo (size = 9)
0xffff7abded50  embedded object  (0x20dc5d51 Cell for 0)
0xffff7abded60  embedded object  (0x5d4c7bf9 WeakCell for 0x20d46e89 PropertyCell for 0x20d46e51 <a Math with map 0x4ec0e5a1>)
0xffff7abded90  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abded98  constant pool (size 32)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7abdee20     0  ldur x0, [x1, #-1]
0xffff7abdee24     4  ldur x0, [x0, #47]
0xffff7abdee28     8  movz x16, #0x14f
0xffff7abdee2c    12  ldr x0, [x0, x16]
0xffff7abdee30    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7abdee20     0  ldur x0, [x1, #-1]
0xffff7abdee24     4  ldur x0, [x0, #47]
0xffff7abdee28     8  movz x16, #0x14f
0xffff7abdee2c    12  ldr x0, [x0, x16]
0xffff7abdee30    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 1179
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 192)
0xffff7abdfa20     0  mov x2, x1
0xffff7abdfa24     4  tbnz w2, #0, #+0x44 (addr 0xffff7abdfa68)
0xffff7abdfa28     8  mov x3, x0
0xffff7abdfa2c    12  tbnz w3, #0, #+0x4c (addr 0xffff7abdfa78)
0xffff7abdfa30    16  asr x3, x3, #32
0xffff7abdfa34    20  cmp w3, #0x1 (1)
0xffff7abdfa38    24  b.eq #+0x8 (addr 0xffff7abdfa40)
0xffff7abdfa3c    28  b #+0x4c (addr 0xffff7abdfa88)
0xffff7abdfa40    32  asr x2, x2, #32
0xffff7abdfa44    36  tbz w2, #31, #+0x18 (addr 0xffff7abdfa5c)
0xffff7abdfa48    40  neg w2, w2
0xffff7abdfa4c    44  movz w2, #0x0
0xffff7abdfa50    48  negs w2, w2
0xffff7abdfa54    52  b.eq #+0x44 (addr 0xffff7abdfa98)
0xffff7abdfa58    56  b #+0x8 (addr 0xffff7abdfa60)
0xffff7abdfa5c    60  movz w2, #0x0
0xffff7abdfa60    64  lsl x0, x2, #32
0xffff7abdfa64    68  ret
0xffff7abdfa68    72  movz x16, #0x0
0xffff7abdfa6c    76  sub csp, jssp, #0x10 (16)
0xffff7abdfa70    80  stp fp, lr, [jssp, #-16]!
0xffff7abdfa74    84  bl #+0x34 (addr 0xffff7abdfaa8)
0xffff7abdfa78    88  movz x16, #0x8
0xffff7abdfa7c    92  sub csp, jssp, #0x10 (16)
0xffff7abdfa80    96  stp fp, lr, [jssp, #-16]!
0xffff7abdfa84   100  bl #+0x24 (addr 0xffff7abdfaa8)
0xffff7abdfa88   104  movz x16, #0x10
0xffff7abdfa8c   108  sub csp, jssp, #0x10 (16)
0xffff7abdfa90   112  stp fp, lr, [jssp, #-16]!
0xffff7abdfa94   116  bl #+0x14 (addr 0xffff7abdfaa8)
0xffff7abdfa98   120  movz x16, #0x18
0xffff7abdfa9c   124  sub csp, jssp, #0x10 (16)
0xffff7abdfaa0   128  stp fp, lr, [jssp, #-16]!
0xffff7abdfaa4   132  bl #+0x4 (addr 0xffff7abdfaa8)
0xffff7abdfaa8   136  movz x17, #0xa00000000
0xffff7abdfaac   140  sub csp, jssp, #0x10 (16)
0xffff7abdfab0   144  stp x17, cp, [jssp, #-16]!
0xffff7abdfab4   148  add fp, jssp, #0x10 (16)
0xffff7abdfab8   152  ldr x17, pc+24 (addr 0x0000ffff7abdfad0)    ;; lazy deoptimization bailout 0
0xffff7abdfabc   156  add x17, x17, x16
0xffff7abdfac0   160  br x17
0xffff7abdfac4   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abdfac8   168  d63f03e0       constant
0xffff7abdfacc   172  d503201f       constant
0xffff7abdfad0   176  7a906000       constant
0xffff7abdfad4   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7abdfab8  runtime entry
0xffff7abdfac4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 1179
type = NORMAL
name = BinaryOpICStub(MOD:Smi*1->Smi)
compiler = crankshaft
Instructions (size = 192)
0xffff7abdfa20     0  mov x2, x1
0xffff7abdfa24     4  tbnz w2, #0, #+0x44 (addr 0xffff7abdfa68)
0xffff7abdfa28     8  mov x3, x0
0xffff7abdfa2c    12  tbnz w3, #0, #+0x4c (addr 0xffff7abdfa78)
0xffff7abdfa30    16  asr x3, x3, #32
0xffff7abdfa34    20  cmp w3, #0x1 (1)
0xffff7abdfa38    24  b.eq #+0x8 (addr 0xffff7abdfa40)
0xffff7abdfa3c    28  b #+0x4c (addr 0xffff7abdfa88)
0xffff7abdfa40    32  asr x2, x2, #32
0xffff7abdfa44    36  tbz w2, #31, #+0x18 (addr 0xffff7abdfa5c)
0xffff7abdfa48    40  neg w2, w2
0xffff7abdfa4c    44  movz w2, #0x0
0xffff7abdfa50    48  negs w2, w2
0xffff7abdfa54    52  b.eq #+0x44 (addr 0xffff7abdfa98)
0xffff7abdfa58    56  b #+0x8 (addr 0xffff7abdfa60)
0xffff7abdfa5c    60  movz w2, #0x0
0xffff7abdfa60    64  lsl x0, x2, #32
0xffff7abdfa64    68  ret
0xffff7abdfa68    72  movz x16, #0x0
0xffff7abdfa6c    76  sub csp, jssp, #0x10 (16)
0xffff7abdfa70    80  stp fp, lr, [jssp, #-16]!
0xffff7abdfa74    84  bl #+0x34 (addr 0xffff7abdfaa8)
0xffff7abdfa78    88  movz x16, #0x8
0xffff7abdfa7c    92  sub csp, jssp, #0x10 (16)
0xffff7abdfa80    96  stp fp, lr, [jssp, #-16]!
0xffff7abdfa84   100  bl #+0x24 (addr 0xffff7abdfaa8)
0xffff7abdfa88   104  movz x16, #0x10
0xffff7abdfa8c   108  sub csp, jssp, #0x10 (16)
0xffff7abdfa90   112  stp fp, lr, [jssp, #-16]!
0xffff7abdfa94   116  bl #+0x14 (addr 0xffff7abdfaa8)
0xffff7abdfa98   120  movz x16, #0x18
0xffff7abdfa9c   124  sub csp, jssp, #0x10 (16)
0xffff7abdfaa0   128  stp fp, lr, [jssp, #-16]!
0xffff7abdfaa4   132  bl #+0x4 (addr 0xffff7abdfaa8)
0xffff7abdfaa8   136  movz x17, #0xa00000000
0xffff7abdfaac   140  sub csp, jssp, #0x10 (16)
0xffff7abdfab0   144  stp x17, cp, [jssp, #-16]!
0xffff7abdfab4   148  add fp, jssp, #0x10 (16)
0xffff7abdfab8   152  ldr x17, pc+24 (addr 0x0000ffff7abdfad0)    ;; lazy deoptimization bailout 0
0xffff7abdfabc   156  add x17, x17, x16
0xffff7abdfac0   160  br x17
0xffff7abdfac4   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abdfac8   168  d63f03e0       constant
0xffff7abdfacc   172  d503201f       constant
0xffff7abdfad0   176  7a906000       constant
0xffff7abdfad4   180  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7abdfab8  runtime entry
0xffff7abdfac4  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = SMI*NUMBER -> NUMBER
compare_operation = LT
name = CompareICStub
compiler = unknown
Instructions (size = 280)
0xffff7abe0ae0     0  tbnz w1, #0, #+0x88 (addr 0xffff7abe0b68)
0xffff7abe0ae4     4  scvtf d0, x0, #32
0xffff7abe0ae8     8  scvtf d1, x1, #32
0xffff7abe0aec    12  tbz w0, #0, #+0x18 (addr 0xffff7abe0b04)
0xffff7abe0af0    16  ldur x16, [x0, #-1]
0xffff7abe0af4    20  ldr x17, [x26, #120]
0xffff7abe0af8    24  cmp x16, x17
0xffff7abe0afc    28  b.ne #+0x3c (addr 0xffff7abe0b38)
0xffff7abe0b00    32  ldur d0, [x0, #7]
0xffff7abe0b04    36  tbz w1, #0, #+0x18 (addr 0xffff7abe0b1c)
0xffff7abe0b08    40  ldur x16, [x1, #-1]
0xffff7abe0b0c    44  ldr x17, [x26, #120]
0xffff7abe0b10    48  cmp x16, x17
0xffff7abe0b14    52  b.ne #+0x48 (addr 0xffff7abe0b5c)
0xffff7abe0b18    56  ldur d1, [x1, #7]
0xffff7abe0b1c    60  fcmp d1, d0
0xffff7abe0b20    64  b.vs #+0x10 (addr 0xffff7abe0b30)
0xffff7abe0b24    68  cset x0, gt
0xffff7abe0b28    72  csinv x0, x0, xzr, ge
0xffff7abe0b2c    76  ret
0xffff7abe0b30    80  ldr x16, pc+168 (addr 0x0000ffff7abe0bd8)    ;; code: COMPARE_IC, GENERIC
0xffff7abe0b34    84  br x16
0xffff7abe0b38    88  ldr x16, [x26, #40]
0xffff7abe0b3c    92  cmp x0, x16
0xffff7abe0b40    96  b.ne #+0x28 (addr 0xffff7abe0b68)
0xffff7abe0b44   100  tbz w1, #0, #-0x14 (addr 0xffff7abe0b30)
0xffff7abe0b48   104  ldur x16, [x1, #-1]
0xffff7abe0b4c   108  ldr x17, [x26, #120]
0xffff7abe0b50   112  cmp x16, x17
0xffff7abe0b54   116  b.ne #+0x8 (addr 0xffff7abe0b5c)
0xffff7abe0b58   120  b #-0x28 (addr 0xffff7abe0b30)
0xffff7abe0b5c   124  ldr x16, [x26, #40]
0xffff7abe0b60   128  cmp x1, x16
0xffff7abe0b64   132  b.eq #-0x34 (addr 0xffff7abe0b30)
0xffff7abe0b68   136  movz x16, #0xc00000000
0xffff7abe0b6c   140  sub csp, jssp, #0x10 (16)
0xffff7abe0b70   144  stp fp, lr, [jssp, #-16]!
0xffff7abe0b74   148  sub csp, jssp, #0x10 (16)
0xffff7abe0b78   152  str x16, [jssp, #-8]!
0xffff7abe0b7c   156  ldr x17, pc+100 (addr 0x0000ffff7abe0be0)    ;; object: 0xffff7abe0a81 <Code: COMPARE_IC>
0xffff7abe0b80   160  sub csp, jssp, #0x10 (16)
0xffff7abe0b84   164  str x17, [jssp, #-8]!
0xffff7abe0b88   168  add fp, jssp, #0x10 (16)
0xffff7abe0b8c   172  sub csp, jssp, #0x18 (24)
0xffff7abe0b90   176  stp lr, x0, [jssp, #-24]!
0xffff7abe0b94   180  str x1, [jssp, #16]
0xffff7abe0b98   184  movz x10, #0x3100000000
0xffff7abe0b9c   188  sub csp, jssp, #0x18 (24)
0xffff7abe0ba0   192  stp x10, x0, [jssp, #-24]!
0xffff7abe0ba4   196  str x1, [jssp, #16]
0xffff7abe0ba8   200  movz x0, #0x3
0xffff7abe0bac   204  ldr x1, pc+60 (addr 0x0000ffff7abe0be8)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7abe0bb0   208  ldr x16, pc+64 (addr 0x0000ffff7abe0bf0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abe0bb4   212  blr x16
0xffff7abe0bb8   216  add x11, x0, #0x5f (95)
0xffff7abe0bbc   220  ldr x1, [jssp, #16]
0xffff7abe0bc0   224  ldp lr, x0, [jssp], #24
0xffff7abe0bc4   228  mov jssp, fp
0xffff7abe0bc8   232  ldp fp, lr, [jssp], #16
0xffff7abe0bcc   236  br x11
0xffff7abe0bd0   240  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abe0bd4   244  d63f03e0       constant
0xffff7abe0bd8   248  7abd3180       constant
0xffff7abe0bdc   252  0000ffff       constant
0xffff7abe0be0   256  7abe0a81       constant
0xffff7abe0be4   260  0000ffff       constant
0xffff7abe0be8   264  00c8a980       constant
0xffff7abe0bec   268  00000000       constant
0xffff7abe0bf0   272  7ab06060       constant
0xffff7abe0bf4   276  0000ffff       constant


RelocInfo (size = 15)
0xffff7abe0b30  code target (COMPARE_IC)  (0xffff7abd3180)
0xffff7abe0b7c  embedded object  (0xffff7abe0a81 <Code: COMPARE_IC>)
0xffff7abe0bac  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7abe0bb0  code target (STUB)  (0xffff7ab06060)
0xffff7abe0bd0  constant pool (size 40)


--- Code ---
kind = TO_BOOLEAN_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 34
type = NORMAL
name = ToBooleanICStub
compiler = crankshaft
Instructions (size = 176)
0xffff7abe4400     0  ldr x16, [x26, #64]
0xffff7abe4404     4  cmp x0, x16
0xffff7abe4408     8  b.eq #+0x3c (addr 0xffff7abe4444)
0xffff7abe440c    12  ldr x16, [x26, #72]
0xffff7abe4410    16  cmp x0, x16
0xffff7abe4414    20  b.eq #+0x28 (addr 0xffff7abe443c)
0xffff7abe4418    24  tbz w0, #0, #+0x50 (addr 0xffff7abe4468)
0xffff7abe441c    28  ldur x2, [x0, #-1]
0xffff7abe4420    32  ldrb w1, [x2, #11]
0xffff7abe4424    36  cmp x1, #0x80 (128)
0xffff7abe4428    40  b.ge #+0x10 (addr 0xffff7abe4438)
0xffff7abe442c    44  ldur x1, [x0, #15]
0xffff7abe4430    48  cbz x1, #+0xc (addr 0xffff7abe443c)
0xffff7abe4434    52  b #+0x10 (addr 0xffff7abe4444)
0xffff7abe4438    56  b #+0x30 (addr 0xffff7abe4468)
0xffff7abe443c    60  ldr x0, pc+28 (addr 0x0000ffff7abe4458)    ;; object: 0x20d042b1 <false>
0xffff7abe4440    64  ret
0xffff7abe4444    68  ldr x0, pc+28 (addr 0x0000ffff7abe4460)    ;; object: 0x20d04281 <true>
0xffff7abe4448    72  ret
0xffff7abe444c    76  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abe4450    80  d63f03e0       constant
0xffff7abe4454    84  d503201f       constant
0xffff7abe4458    88  20d042b1       constant
0xffff7abe445c    92  00000000       constant
0xffff7abe4460    96  20d04281       constant
0xffff7abe4464   100  00000000       constant
0xffff7abe4468   104  movz x16, #0x0
0xffff7abe446c   108  sub csp, jssp, #0x10 (16)
0xffff7abe4470   112  stp fp, lr, [jssp, #-16]!
0xffff7abe4474   116  bl #+0x4 (addr 0xffff7abe4478)
0xffff7abe4478   120  movz x17, #0xa00000000
0xffff7abe447c   124  sub csp, jssp, #0x10 (16)
0xffff7abe4480   128  stp x17, cp, [jssp, #-16]!
0xffff7abe4484   132  add fp, jssp, #0x10 (16)
0xffff7abe4488   136  ldr x17, pc+24 (addr 0x0000ffff7abe44a0)    ;; lazy deoptimization bailout 0
0xffff7abe448c   140  add x17, x17, x16
0xffff7abe4490   144  br x17
0xffff7abe4494   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abe4498   152  d63f03e0       constant
0xffff7abe449c   156  d503201f       constant
0xffff7abe44a0   160  7a906000       constant
0xffff7abe44a4   164  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abe443c  embedded object  (0x20d042b1 <false>)
0xffff7abe4444  embedded object  (0x20d04281 <true>)
0xffff7abe444c  constant pool (size 28)
0xffff7abe4488  runtime entry
0xffff7abe4494  constant pool (size 20)

--- End code ---
kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 34
type = NORMAL
name = ToBooleanICStub(Bool,String)
compiler = crankshaft
Instructions (size = 176)
0xffff7abe4400     0  ldr x16, [x26, #64]
0xffff7abe4404     4  cmp x0, x16
0xffff7abe4408     8  b.eq #+0x3c (addr 0xffff7abe4444)
0xffff7abe440c    12  ldr x16, [x26, #72]
0xffff7abe4410    16  cmp x0, x16
0xffff7abe4414    20  b.eq #+0x28 (addr 0xffff7abe443c)
0xffff7abe4418    24  tbz w0, #0, #+0x50 (addr 0xffff7abe4468)
0xffff7abe441c    28  ldur x2, [x0, #-1]
0xffff7abe4420    32  ldrb w1, [x2, #11]
0xffff7abe4424    36  cmp x1, #0x80 (128)
0xffff7abe4428    40  b.ge #+0x10 (addr 0xffff7abe4438)
0xffff7abe442c    44  ldur x1, [x0, #15]
0xffff7abe4430    48  cbz x1, #+0xc (addr 0xffff7abe443c)
0xffff7abe4434    52  b #+0x10 (addr 0xffff7abe4444)
0xffff7abe4438    56  b #+0x30 (addr 0xffff7abe4468)
0xffff7abe443c    60  ldr x0, pc+28 (addr 0x0000ffff7abe4458)    ;; object: 0x20d042b1 <false>
0xffff7abe4440    64  ret
0xffff7abe4444    68  ldr x0, pc+28 (addr 0x0000ffff7abe4460)    ;; object: 0x20d04281 <true>
0xffff7abe4448    72  ret
0xffff7abe444c    76  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abe4450    80  d63f03e0       constant
0xffff7abe4454    84  d503201f       constant
0xffff7abe4458    88  20d042b1       constant
0xffff7abe445c    92  00000000       constant
0xffff7abe4460    96  20d04281       constant
0xffff7abe4464   100  00000000       constant
0xffff7abe4468   104  movz x16, #0x0
0xffff7abe446c   108  sub csp, jssp, #0x10 (16)
0xffff7abe4470   112  stp fp, lr, [jssp, #-16]!
0xffff7abe4474   116  bl #+0x4 (addr 0xffff7abe4478)
0xffff7abe4478   120  movz x17, #0xa00000000
0xffff7abe447c   124  sub csp, jssp, #0x10 (16)
0xffff7abe4480   128  stp x17, cp, [jssp, #-16]!
0xffff7abe4484   132  add fp, jssp, #0x10 (16)
0xffff7abe4488   136  ldr x17, pc+24 (addr 0x0000ffff7abe44a0)    ;; lazy deoptimization bailout 0
0xffff7abe448c   140  add x17, x17, x16
0xffff7abe4490   144  br x17
0xffff7abe4494   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abe4498   152  d63f03e0       constant
0xffff7abe449c   156  d503201f       constant
0xffff7abe44a0   160  7a906000       constant
0xffff7abe44a4   164  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abe443c  embedded object  (0x20d042b1 <false>)
0xffff7abe4444  embedded object  (0x20d04281 <true>)
0xffff7abe444c  constant pool (size 28)
0xffff7abe4488  runtime entry
0xffff7abe4494  constant pool (size 20)


--- Code ---
kind = TO_BOOLEAN_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 20
type = NORMAL
name = ToBooleanICStub
compiler = crankshaft
Instructions (size = 160)
0xffff7abe4520     0  ldr x16, [x26, #56]
0xffff7abe4524     4  cmp x0, x16
0xffff7abe4528     8  b.eq #+0x24 (addr 0xffff7abe454c)
0xffff7abe452c    12  tbz w0, #0, #+0x4c (addr 0xffff7abe4578)
0xffff7abe4530    16  ldur x2, [x0, #-1]
0xffff7abe4534    20  ldrb w1, [x2, #12]
0xffff7abe4538    24  tbnz w1, #4, #+0x14 (addr 0xffff7abe454c)
0xffff7abe453c    28  ldrb w1, [x2, #11]
0xffff7abe4540    32  cmp x1, #0xb1 (177)
0xffff7abe4544    36  b.ge #+0x10 (addr 0xffff7abe4554)
0xffff7abe4548    40  b #+0x30 (addr 0xffff7abe4578)
0xffff7abe454c    44  ldr x0, pc+28 (addr 0x0000ffff7abe4568)    ;; object: 0x20d042b1 <false>
0xffff7abe4550    48  ret
0xffff7abe4554    52  ldr x0, pc+28 (addr 0x0000ffff7abe4570)    ;; object: 0x20d04281 <true>
0xffff7abe4558    56  ret
0xffff7abe455c    60  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abe4560    64  d63f03e0       constant
0xffff7abe4564    68  d503201f       constant
0xffff7abe4568    72  20d042b1       constant
0xffff7abe456c    76  00000000       constant
0xffff7abe4570    80  20d04281       constant
0xffff7abe4574    84  00000000       constant
0xffff7abe4578    88  movz x16, #0x0
0xffff7abe457c    92  sub csp, jssp, #0x10 (16)
0xffff7abe4580    96  stp fp, lr, [jssp, #-16]!
0xffff7abe4584   100  bl #+0x4 (addr 0xffff7abe4588)
0xffff7abe4588   104  movz x17, #0xa00000000
0xffff7abe458c   108  sub csp, jssp, #0x10 (16)
0xffff7abe4590   112  stp x17, cp, [jssp, #-16]!
0xffff7abe4594   116  add fp, jssp, #0x10 (16)
0xffff7abe4598   120  ldr x17, pc+24 (addr 0x0000ffff7abe45b0)    ;; lazy deoptimization bailout 0
0xffff7abe459c   124  add x17, x17, x16
0xffff7abe45a0   128  br x17
0xffff7abe45a4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abe45a8   136  d63f03e0       constant
0xffff7abe45ac   140  d503201f       constant
0xffff7abe45b0   144  7a906000       constant
0xffff7abe45b4   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abe454c  embedded object  (0x20d042b1 <false>)
0xffff7abe4554  embedded object  (0x20d04281 <true>)
0xffff7abe455c  constant pool (size 28)
0xffff7abe4598  runtime entry
0xffff7abe45a4  constant pool (size 20)

--- End code ---
kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 20
type = NORMAL
name = ToBooleanICStub(Null,SpecObject)
compiler = crankshaft
Instructions (size = 160)
0xffff7abe4520     0  ldr x16, [x26, #56]
0xffff7abe4524     4  cmp x0, x16
0xffff7abe4528     8  b.eq #+0x24 (addr 0xffff7abe454c)
0xffff7abe452c    12  tbz w0, #0, #+0x4c (addr 0xffff7abe4578)
0xffff7abe4530    16  ldur x2, [x0, #-1]
0xffff7abe4534    20  ldrb w1, [x2, #12]
0xffff7abe4538    24  tbnz w1, #4, #+0x14 (addr 0xffff7abe454c)
0xffff7abe453c    28  ldrb w1, [x2, #11]
0xffff7abe4540    32  cmp x1, #0xb1 (177)
0xffff7abe4544    36  b.ge #+0x10 (addr 0xffff7abe4554)
0xffff7abe4548    40  b #+0x30 (addr 0xffff7abe4578)
0xffff7abe454c    44  ldr x0, pc+28 (addr 0x0000ffff7abe4568)    ;; object: 0x20d042b1 <false>
0xffff7abe4550    48  ret
0xffff7abe4554    52  ldr x0, pc+28 (addr 0x0000ffff7abe4570)    ;; object: 0x20d04281 <true>
0xffff7abe4558    56  ret
0xffff7abe455c    60  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abe4560    64  d63f03e0       constant
0xffff7abe4564    68  d503201f       constant
0xffff7abe4568    72  20d042b1       constant
0xffff7abe456c    76  00000000       constant
0xffff7abe4570    80  20d04281       constant
0xffff7abe4574    84  00000000       constant
0xffff7abe4578    88  movz x16, #0x0
0xffff7abe457c    92  sub csp, jssp, #0x10 (16)
0xffff7abe4580    96  stp fp, lr, [jssp, #-16]!
0xffff7abe4584   100  bl #+0x4 (addr 0xffff7abe4588)
0xffff7abe4588   104  movz x17, #0xa00000000
0xffff7abe458c   108  sub csp, jssp, #0x10 (16)
0xffff7abe4590   112  stp x17, cp, [jssp, #-16]!
0xffff7abe4594   116  add fp, jssp, #0x10 (16)
0xffff7abe4598   120  ldr x17, pc+24 (addr 0x0000ffff7abe45b0)    ;; lazy deoptimization bailout 0
0xffff7abe459c   124  add x17, x17, x16
0xffff7abe45a0   128  br x17
0xffff7abe45a4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abe45a8   136  d63f03e0       constant
0xffff7abe45ac   140  d503201f       constant
0xffff7abe45b0   144  7a906000       constant
0xffff7abe45b4   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abe454c  embedded object  (0x20d042b1 <false>)
0xffff7abe4554  embedded object  (0x20d04281 <true>)
0xffff7abe455c  constant pool (size 28)
0xffff7abe4598  runtime entry
0xffff7abe45a4  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7abe4620     0  ldur x0, [x1, #-1]
0xffff7abe4624     4  ldur x0, [x0, #47]
0xffff7abe4628     8  movz x16, #0x17f
0xffff7abe462c    12  ldr x0, [x0, x16]
0xffff7abe4630    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7abe4620     0  ldur x0, [x1, #-1]
0xffff7abe4624     4  ldur x0, [x0, #47]
0xffff7abe4628     8  movz x16, #0x17f
0xffff7abe462c    12  ldr x0, [x0, x16]
0xffff7abe4630    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = JSON
compiler = unknown
Instructions (size = 120)
0xffff7abe5580     0  sub csp, jssp, #0x8 (8)
0xffff7abe5584     4  str x3, [jssp, #-8]!
0xffff7abe5588     8  sub csp, jssp, #0x8 (8)
0xffff7abe558c    12  str x0, [jssp, #-8]!
0xffff7abe5590    16  ldr x0, pc+80 (addr 0x0000ffff7abe55e0)    ;; object: 0x20dc5d51 Cell for 0
0xffff7abe5594    20  ldur x0, [x0, #7]
0xffff7abe5598    24  cmp x0, #0x0 (0)
0xffff7abe559c    28  b.ne #+0x2c (addr 0xffff7abe55c8)
0xffff7abe55a0    32  ldr x0, pc+72 (addr 0x0000ffff7abe55e8)    ;; object: 0x5d4cb1c1 WeakCell for 0x20d46d21 PropertyCell for 0x20d46ce9 <a JSON with map 0x4ec13b91>
0xffff7abe55a4    36  ldur x0, [x0, #7]
0xffff7abe55a8    40  tbz w0, #0, #+0x20 (addr 0xffff7abe55c8)
0xffff7abe55ac    44  ldur x0, [x0, #15]
0xffff7abe55b0    48  ldr x16, [x26, #88]
0xffff7abe55b4    52  cmp x0, x16
0xffff7abe55b8    56  b.eq #+0x10 (addr 0xffff7abe55c8)
0xffff7abe55bc    60  add jssp, jssp, #0x10 (16)
0xffff7abe55c0    64  ret
0xffff7abe55c4    68  b #+0x14 (addr 0xffff7abe55d8)
0xffff7abe55c8    72  ldr x0, [jssp], #8
0xffff7abe55cc    76  ldr x3, [jssp], #8
0xffff7abe55d0    80  ldr x16, pc+32 (addr 0x0000ffff7abe55f0)    ;; code: BUILTIN
0xffff7abe55d4    84  br x16
0xffff7abe55d8    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7abe55dc    92  d63f03e0       constant
0xffff7abe55e0    96  20dc5d51       constant
0xffff7abe55e4   100  00000000       constant
0xffff7abe55e8   104  5d4cb1c1       constant
0xffff7abe55ec   108  00000000       constant
0xffff7abe55f0   112  7ab222e0       constant
0xffff7abe55f4   116  0000ffff       constant


RelocInfo (size = 9)
0xffff7abe5590  embedded object  (0x20dc5d51 Cell for 0)
0xffff7abe55a0  embedded object  (0x5d4cb1c1 WeakCell for 0x20d46d21 PropertyCell for 0x20d46ce9 <a JSON with map 0x4ec13b91>)
0xffff7abe55d0  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abe55d8  constant pool (size 32)

kind = HANDLER
major_key = <NoCache>Stub
name = toString
compiler = unknown
Instructions (size = 152)
0xffff7abe5660     0  sub csp, jssp, #0x8 (8)
0xffff7abe5664     4  str x3, [jssp, #-8]!
0xffff7abe5668     8  sub csp, jssp, #0x8 (8)
0xffff7abe566c    12  str x0, [jssp, #-8]!
0xffff7abe5670    16  ldur x3, [cp, #39]
0xffff7abe5674    20  movz x16, #0x2e7
0xffff7abe5678    24  ldr x3, [x3, x16]
0xffff7abe567c    28  ldur x3, [x3, #23]
0xffff7abe5680    32  ldur x3, [x3, #23]
0xffff7abe5684    36  ldr x0, pc+84 (addr 0x0000ffff7abe56d8)    ;; object: 0x20d63e59 Cell for 0
0xffff7abe5688    40  ldur x0, [x0, #7]
0xffff7abe568c    44  cmp x0, #0x0 (0)
0xffff7abe5690    48  b.ne #+0x1c (addr 0xffff7abe56ac)
0xffff7abe5694    52  ldur x0, [x3, #-1]
0xffff7abe5698    56  ldr x4, pc+72 (addr 0x0000ffff7abe56e0)    ;; object: 0x5d406e39 WeakCell for 0x4ec156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>
0xffff7abe569c    60  ldur x4, [x4, #7]
0xffff7abe56a0    64  cmp x0, x4
0xffff7abe56a4    68  b.ne #+0x8 (addr 0xffff7abe56ac)
0xffff7abe56a8    72  b #+0x14 (addr 0xffff7abe56bc)
0xffff7abe56ac    76  ldr x0, [jssp], #8
0xffff7abe56b0    80  ldr x3, [jssp], #8
0xffff7abe56b4    84  ldr x16, pc+52 (addr 0x0000ffff7abe56e8)    ;; code: BUILTIN
0xffff7abe56b8    88  br x16
0xffff7abe56bc    92  add jssp, jssp, #0x10 (16)
0xffff7abe56c0    96  mov x1, x3
0xffff7abe56c4   100  ldr x16, pc+44 (addr 0x0000ffff7abe56f0)    ;; code: HANDLER, LoadConstantStub, minor: 3
0xffff7abe56c8   104  br x16
0xffff7abe56cc   108  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0xffff7abe56d0   112  d63f03e0       constant
0xffff7abe56d4   116  d503201f       constant
0xffff7abe56d8   120  20d63e59       constant
0xffff7abe56dc   124  00000000       constant
0xffff7abe56e0   128  5d406e39       constant
0xffff7abe56e4   132  00000000       constant
0xffff7abe56e8   136  7ab222e0       constant
0xffff7abe56ec   140  0000ffff       constant
0xffff7abe56f0   144  7ab43400       constant
0xffff7abe56f4   148  0000ffff       constant


RelocInfo (size = 10)
0xffff7abe5684  embedded object  (0x20d63e59 Cell for 0)
0xffff7abe5698  embedded object  (0x5d406e39 WeakCell for 0x4ec156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>)
0xffff7abe56b4  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abe56c4  code target (HANDLER)  (0xffff7ab43400)
0xffff7abe56cc  constant pool (size 44)

kind = HANDLER
major_key = <NoCache>Stub
compiler = unknown
Instructions (size = 96)
0xffff7abe5760     0  sub csp, jssp, #0x8 (8)
0xffff7abe5764     4  str x3, [jssp, #-8]!
0xffff7abe5768     8  sub csp, jssp, #0x8 (8)
0xffff7abe576c    12  str x0, [jssp, #-8]!
0xffff7abe5770    16  ldr x0, pc+56 (addr 0x0000ffff7abe57a8)    ;; object: 0x20d63e59 Cell for 0
0xffff7abe5774    20  ldur x0, [x0, #7]
0xffff7abe5778    24  cmp x0, #0x0 (0)
0xffff7abe577c    28  b.ne #+0x14 (addr 0xffff7abe5790)
0xffff7abe5780    32  add jssp, jssp, #0x10 (16)
0xffff7abe5784    36  ldr x0, pc+44 (addr 0x0000ffff7abe57b0)    ;; object: 0x20d04241 <undefined>
0xffff7abe5788    40  ret
0xffff7abe578c    44  b #+0x14 (addr 0xffff7abe57a0)
0xffff7abe5790    48  ldr x0, [jssp], #8
0xffff7abe5794    52  ldr x3, [jssp], #8
0xffff7abe5798    56  ldr x16, pc+32 (addr 0x0000ffff7abe57b8)    ;; code: BUILTIN
0xffff7abe579c    60  br x16
0xffff7abe57a0    64  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7abe57a4    68  d63f03e0       constant
0xffff7abe57a8    72  20d63e59       constant
0xffff7abe57ac    76  00000000       constant
0xffff7abe57b0    80  20d04241       constant
0xffff7abe57b4    84  00000000       constant
0xffff7abe57b8    88  7ab222e0       constant
0xffff7abe57bc    92  0000ffff       constant


RelocInfo (size = 9)
0xffff7abe5770  embedded object  (0x20d63e59 Cell for 0)
0xffff7abe5784  embedded object  (0x20d04241 <undefined>)
0xffff7abe5798  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abe57a0  constant pool (size 32)

kind = HANDLER
major_key = <NoCache>Stub
name = id
compiler = unknown
Instructions (size = 152)
0xffff7abe5820     0  sub csp, jssp, #0x8 (8)
0xffff7abe5824     4  str x3, [jssp, #-8]!
0xffff7abe5828     8  sub csp, jssp, #0x8 (8)
0xffff7abe582c    12  str x4, [jssp, #-8]!
0xffff7abe5830    16  ldr x3, pc+88 (addr 0x0000ffff7abe5888)    ;; object: 0x5d4cb411 Cell for 0
0xffff7abe5834    20  ldur x3, [x3, #7]
0xffff7abe5838    24  cmp x3, #0x0 (0)
0xffff7abe583c    28  b.ne #+0x30 (addr 0xffff7abe586c)
0xffff7abe5840    32  tbz w0, #0, #+0x2c (addr 0xffff7abe586c)
0xffff7abe5844    36  ldr x5, pc+76 (addr 0x0000ffff7abe5890)    ;; object: 0x5d436b19 WeakCell for 0x4ec362f1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abe5848    40  ldur x5, [x5, #7]
0xffff7abe584c    44  tbz w5, #0, #+0x20 (addr 0xffff7abe586c)
0xffff7abe5850    48  ldursw x4, [x5, #15]
0xffff7abe5854    52  tbnz w4, #23, #+0x18 (addr 0xffff7abe586c)
0xffff7abe5858    56  ldr x4, [jssp], #8
0xffff7abe585c    60  ldr x3, [jssp], #8
0xffff7abe5860    64  ldr x2, pc+56 (addr 0x0000ffff7abe5898)    ;; object: 0x20d4e919 <String[2]: id>
0xffff7abe5864    68  ldr x16, pc+60 (addr 0x0000ffff7abe58a0)    ;; code: HANDLER, StoreTransitionStub, minor: 198659
0xffff7abe5868    72  br x16
0xffff7abe586c    76  ldr x2, pc+60 (addr 0x0000ffff7abe58a8)    ;; object: 0x20d4e919 <String[2]: id>
0xffff7abe5870    80  ldr x4, [jssp], #8
0xffff7abe5874    84  ldr x3, [jssp], #8
0xffff7abe5878    88  ldr x16, pc+56 (addr 0x0000ffff7abe58b0)    ;; code: BUILTIN
0xffff7abe587c    92  br x16
0xffff7abe5880    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abe5884   100  d63f03e0       constant
0xffff7abe5888   104  5d4cb411       constant
0xffff7abe588c   108  00000000       constant
0xffff7abe5890   112  5d436b19       constant
0xffff7abe5894   116  00000000       constant
0xffff7abe5898   120  20d4e919       constant
0xffff7abe589c   124  00000000       constant
0xffff7abe58a0   128  7ab8b940       constant
0xffff7abe58a4   132  0000ffff       constant
0xffff7abe58a8   136  20d4e919       constant
0xffff7abe58ac   140  00000000       constant
0xffff7abe58b0   144  7ab22420       constant
0xffff7abe58b4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abe5830  embedded object  (0x5d4cb411 Cell for 0)
0xffff7abe5844  embedded object  (0x5d436b19 WeakCell for 0x4ec362f1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abe5860  embedded object  (0x20d4e919 <String[2]: id>)
0xffff7abe5864  code target (HANDLER)  (0xffff7ab8b940)
0xffff7abe586c  embedded object  (0x20d4e919 <String[2]: id>)
0xffff7abe5878  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abe5880  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = exports
compiler = unknown
Instructions (size = 152)
0xffff7abe5920     0  sub csp, jssp, #0x8 (8)
0xffff7abe5924     4  str x3, [jssp, #-8]!
0xffff7abe5928     8  sub csp, jssp, #0x8 (8)
0xffff7abe592c    12  str x4, [jssp, #-8]!
0xffff7abe5930    16  ldr x3, pc+88 (addr 0x0000ffff7abe5988)    ;; object: 0x5d4cb411 Cell for 0
0xffff7abe5934    20  ldur x3, [x3, #7]
0xffff7abe5938    24  cmp x3, #0x0 (0)
0xffff7abe593c    28  b.ne #+0x30 (addr 0xffff7abe596c)
0xffff7abe5940    32  tbz w0, #0, #+0x2c (addr 0xffff7abe596c)
0xffff7abe5944    36  ldr x5, pc+76 (addr 0x0000ffff7abe5990)    ;; object: 0x5d436b69 WeakCell for 0x4ec36349 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abe5948    40  ldur x5, [x5, #7]
0xffff7abe594c    44  tbz w5, #0, #+0x20 (addr 0xffff7abe596c)
0xffff7abe5950    48  ldursw x4, [x5, #15]
0xffff7abe5954    52  tbnz w4, #23, #+0x18 (addr 0xffff7abe596c)
0xffff7abe5958    56  ldr x4, [jssp], #8
0xffff7abe595c    60  ldr x3, [jssp], #8
0xffff7abe5960    64  ldr x2, pc+56 (addr 0x0000ffff7abe5998)    ;; object: 0x20db2651 <String[7]: exports>
0xffff7abe5964    68  ldr x16, pc+60 (addr 0x0000ffff7abe59a0)    ;; code: HANDLER, StoreTransitionStub, minor: 198660
0xffff7abe5968    72  br x16
0xffff7abe596c    76  ldr x2, pc+60 (addr 0x0000ffff7abe59a8)    ;; object: 0x20db2651 <String[7]: exports>
0xffff7abe5970    80  ldr x4, [jssp], #8
0xffff7abe5974    84  ldr x3, [jssp], #8
0xffff7abe5978    88  ldr x16, pc+56 (addr 0x0000ffff7abe59b0)    ;; code: BUILTIN
0xffff7abe597c    92  br x16
0xffff7abe5980    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abe5984   100  d63f03e0       constant
0xffff7abe5988   104  5d4cb411       constant
0xffff7abe598c   108  00000000       constant
0xffff7abe5990   112  5d436b69       constant
0xffff7abe5994   116  00000000       constant
0xffff7abe5998   120  20db2651       constant
0xffff7abe599c   124  00000000       constant
0xffff7abe59a0   128  7ab8bb80       constant
0xffff7abe59a4   132  0000ffff       constant
0xffff7abe59a8   136  20db2651       constant
0xffff7abe59ac   140  00000000       constant
0xffff7abe59b0   144  7ab22420       constant
0xffff7abe59b4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abe5930  embedded object  (0x5d4cb411 Cell for 0)
0xffff7abe5944  embedded object  (0x5d436b69 WeakCell for 0x4ec36349 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abe5960  embedded object  (0x20db2651 <String[7]: exports>)
0xffff7abe5964  code target (HANDLER)  (0xffff7ab8bb80)
0xffff7abe596c  embedded object  (0x20db2651 <String[7]: exports>)
0xffff7abe5978  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abe5980  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = parent
compiler = unknown
Instructions (size = 152)
0xffff7abe5a20     0  sub csp, jssp, #0x8 (8)
0xffff7abe5a24     4  str x3, [jssp, #-8]!
0xffff7abe5a28     8  sub csp, jssp, #0x8 (8)
0xffff7abe5a2c    12  str x4, [jssp, #-8]!
0xffff7abe5a30    16  ldr x3, pc+88 (addr 0x0000ffff7abe5a88)    ;; object: 0x5d4cb411 Cell for 0
0xffff7abe5a34    20  ldur x3, [x3, #7]
0xffff7abe5a38    24  cmp x3, #0x0 (0)
0xffff7abe5a3c    28  b.ne #+0x30 (addr 0xffff7abe5a6c)
0xffff7abe5a40    32  tbz w0, #0, #+0x2c (addr 0xffff7abe5a6c)
0xffff7abe5a44    36  ldr x5, pc+76 (addr 0x0000ffff7abe5a90)    ;; object: 0x5d436b81 WeakCell for 0x4ec363a1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abe5a48    40  ldur x5, [x5, #7]
0xffff7abe5a4c    44  tbz w5, #0, #+0x20 (addr 0xffff7abe5a6c)
0xffff7abe5a50    48  ldursw x4, [x5, #15]
0xffff7abe5a54    52  tbnz w4, #23, #+0x18 (addr 0xffff7abe5a6c)
0xffff7abe5a58    56  ldr x4, [jssp], #8
0xffff7abe5a5c    60  ldr x3, [jssp], #8
0xffff7abe5a60    64  ldr x2, pc+56 (addr 0x0000ffff7abe5a98)    ;; object: 0x20dcfca1 <String[6]: parent>
0xffff7abe5a64    68  ldr x16, pc+60 (addr 0x0000ffff7abe5aa0)    ;; code: HANDLER, StoreTransitionStub, minor: 198661
0xffff7abe5a68    72  br x16
0xffff7abe5a6c    76  ldr x2, pc+60 (addr 0x0000ffff7abe5aa8)    ;; object: 0x20dcfca1 <String[6]: parent>
0xffff7abe5a70    80  ldr x4, [jssp], #8
0xffff7abe5a74    84  ldr x3, [jssp], #8
0xffff7abe5a78    88  ldr x16, pc+56 (addr 0x0000ffff7abe5ab0)    ;; code: BUILTIN
0xffff7abe5a7c    92  br x16
0xffff7abe5a80    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abe5a84   100  d63f03e0       constant
0xffff7abe5a88   104  5d4cb411       constant
0xffff7abe5a8c   108  00000000       constant
0xffff7abe5a90   112  5d436b81       constant
0xffff7abe5a94   116  00000000       constant
0xffff7abe5a98   120  20dcfca1       constant
0xffff7abe5a9c   124  00000000       constant
0xffff7abe5aa0   128  7ab8bdc0       constant
0xffff7abe5aa4   132  0000ffff       constant
0xffff7abe5aa8   136  20dcfca1       constant
0xffff7abe5aac   140  00000000       constant
0xffff7abe5ab0   144  7ab22420       constant
0xffff7abe5ab4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abe5a30  embedded object  (0x5d4cb411 Cell for 0)
0xffff7abe5a44  embedded object  (0x5d436b81 WeakCell for 0x4ec363a1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abe5a60  embedded object  (0x20dcfca1 <String[6]: parent>)
0xffff7abe5a64  code target (HANDLER)  (0xffff7ab8bdc0)
0xffff7abe5a6c  embedded object  (0x20dcfca1 <String[6]: parent>)
0xffff7abe5a78  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abe5a80  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = filename
compiler = unknown
Instructions (size = 152)
0xffff7abe5b20     0  sub csp, jssp, #0x8 (8)
0xffff7abe5b24     4  str x3, [jssp, #-8]!
0xffff7abe5b28     8  sub csp, jssp, #0x8 (8)
0xffff7abe5b2c    12  str x4, [jssp, #-8]!
0xffff7abe5b30    16  ldr x3, pc+88 (addr 0x0000ffff7abe5b88)    ;; object: 0x5d4cb411 Cell for 0
0xffff7abe5b34    20  ldur x3, [x3, #7]
0xffff7abe5b38    24  cmp x3, #0x0 (0)
0xffff7abe5b3c    28  b.ne #+0x30 (addr 0xffff7abe5b6c)
0xffff7abe5b40    32  tbz w0, #0, #+0x2c (addr 0xffff7abe5b6c)
0xffff7abe5b44    36  ldr x5, pc+76 (addr 0x0000ffff7abe5b90)    ;; object: 0x5d436b99 WeakCell for 0x4ec363f9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abe5b48    40  ldur x5, [x5, #7]
0xffff7abe5b4c    44  tbz w5, #0, #+0x20 (addr 0xffff7abe5b6c)
0xffff7abe5b50    48  ldursw x4, [x5, #15]
0xffff7abe5b54    52  tbnz w4, #23, #+0x18 (addr 0xffff7abe5b6c)
0xffff7abe5b58    56  ldr x4, [jssp], #8
0xffff7abe5b5c    60  ldr x3, [jssp], #8
0xffff7abe5b60    64  ldr x2, pc+56 (addr 0x0000ffff7abe5b98)    ;; object: 0x20db9cf1 <String[8]: filename>
0xffff7abe5b64    68  ldr x16, pc+60 (addr 0x0000ffff7abe5ba0)    ;; code: HANDLER, StoreTransitionStub, minor: 198662
0xffff7abe5b68    72  br x16
0xffff7abe5b6c    76  ldr x2, pc+60 (addr 0x0000ffff7abe5ba8)    ;; object: 0x20db9cf1 <String[8]: filename>
0xffff7abe5b70    80  ldr x4, [jssp], #8
0xffff7abe5b74    84  ldr x3, [jssp], #8
0xffff7abe5b78    88  ldr x16, pc+56 (addr 0x0000ffff7abe5bb0)    ;; code: BUILTIN
0xffff7abe5b7c    92  br x16
0xffff7abe5b80    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abe5b84   100  d63f03e0       constant
0xffff7abe5b88   104  5d4cb411       constant
0xffff7abe5b8c   108  00000000       constant
0xffff7abe5b90   112  5d436b99       constant
0xffff7abe5b94   116  00000000       constant
0xffff7abe5b98   120  20db9cf1       constant
0xffff7abe5b9c   124  00000000       constant
0xffff7abe5ba0   128  7ab8c000       constant
0xffff7abe5ba4   132  0000ffff       constant
0xffff7abe5ba8   136  20db9cf1       constant
0xffff7abe5bac   140  00000000       constant
0xffff7abe5bb0   144  7ab22420       constant
0xffff7abe5bb4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abe5b30  embedded object  (0x5d4cb411 Cell for 0)
0xffff7abe5b44  embedded object  (0x5d436b99 WeakCell for 0x4ec363f9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abe5b60  embedded object  (0x20db9cf1 <String[8]: filename>)
0xffff7abe5b64  code target (HANDLER)  (0xffff7ab8c000)
0xffff7abe5b6c  embedded object  (0x20db9cf1 <String[8]: filename>)
0xffff7abe5b78  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abe5b80  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = loaded
compiler = unknown
Instructions (size = 152)
0xffff7abe5c20     0  sub csp, jssp, #0x8 (8)
0xffff7abe5c24     4  str x3, [jssp, #-8]!
0xffff7abe5c28     8  sub csp, jssp, #0x8 (8)
0xffff7abe5c2c    12  str x4, [jssp, #-8]!
0xffff7abe5c30    16  ldr x3, pc+88 (addr 0x0000ffff7abe5c88)    ;; object: 0x5d4cb411 Cell for 0
0xffff7abe5c34    20  ldur x3, [x3, #7]
0xffff7abe5c38    24  cmp x3, #0x0 (0)
0xffff7abe5c3c    28  b.ne #+0x30 (addr 0xffff7abe5c6c)
0xffff7abe5c40    32  tbz w0, #0, #+0x2c (addr 0xffff7abe5c6c)
0xffff7abe5c44    36  ldr x5, pc+76 (addr 0x0000ffff7abe5c90)    ;; object: 0x5d436bb1 WeakCell for 0x4ec36451 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abe5c48    40  ldur x5, [x5, #7]
0xffff7abe5c4c    44  tbz w5, #0, #+0x20 (addr 0xffff7abe5c6c)
0xffff7abe5c50    48  ldursw x4, [x5, #15]
0xffff7abe5c54    52  tbnz w4, #23, #+0x18 (addr 0xffff7abe5c6c)
0xffff7abe5c58    56  ldr x4, [jssp], #8
0xffff7abe5c5c    60  ldr x3, [jssp], #8
0xffff7abe5c60    64  ldr x2, pc+56 (addr 0x0000ffff7abe5c98)    ;; object: 0x20dba9e1 <String[6]: loaded>
0xffff7abe5c64    68  ldr x16, pc+60 (addr 0x0000ffff7abe5ca0)    ;; code: HANDLER, StoreTransitionStub, minor: 198663
0xffff7abe5c68    72  br x16
0xffff7abe5c6c    76  ldr x2, pc+60 (addr 0x0000ffff7abe5ca8)    ;; object: 0x20dba9e1 <String[6]: loaded>
0xffff7abe5c70    80  ldr x4, [jssp], #8
0xffff7abe5c74    84  ldr x3, [jssp], #8
0xffff7abe5c78    88  ldr x16, pc+56 (addr 0x0000ffff7abe5cb0)    ;; code: BUILTIN
0xffff7abe5c7c    92  br x16
0xffff7abe5c80    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abe5c84   100  d63f03e0       constant
0xffff7abe5c88   104  5d4cb411       constant
0xffff7abe5c8c   108  00000000       constant
0xffff7abe5c90   112  5d436bb1       constant
0xffff7abe5c94   116  00000000       constant
0xffff7abe5c98   120  20dba9e1       constant
0xffff7abe5c9c   124  00000000       constant
0xffff7abe5ca0   128  7ab8c240       constant
0xffff7abe5ca4   132  0000ffff       constant
0xffff7abe5ca8   136  20dba9e1       constant
0xffff7abe5cac   140  00000000       constant
0xffff7abe5cb0   144  7ab22420       constant
0xffff7abe5cb4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abe5c30  embedded object  (0x5d4cb411 Cell for 0)
0xffff7abe5c44  embedded object  (0x5d436bb1 WeakCell for 0x4ec36451 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abe5c60  embedded object  (0x20dba9e1 <String[6]: loaded>)
0xffff7abe5c64  code target (HANDLER)  (0xffff7ab8c240)
0xffff7abe5c6c  embedded object  (0x20dba9e1 <String[6]: loaded>)
0xffff7abe5c78  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abe5c80  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abe5d20     0  tbz w0, #0, #+0x90 (addr 0xffff7abe5db0)
0xffff7abe5d24     4  mov x2, x0
0xffff7abe5d28     8  stur x2, [x1, #63]
0xffff7abe5d2c    12  add x3, x1, #0x3f (63)
0xffff7abe5d30    16  and x2, x2, #0xfffffffffff00000
0xffff7abe5d34    20  ldr x2, [x2, #8]
0xffff7abe5d38    24  tbz w2, #1, #+0x24 (addr 0xffff7abe5d5c)
0xffff7abe5d3c    28  and x2, x1, #0xfffffffffff00000
0xffff7abe5d40    32  ldr x2, [x2, #8]
0xffff7abe5d44    36  tbz w2, #2, #+0x18 (addr 0xffff7abe5d5c)
0xffff7abe5d48    40  sub csp, jssp, #0x8 (8)
0xffff7abe5d4c    44  str lr, [jssp, #-8]!
0xffff7abe5d50    48  ldr x16, pc+80 (addr 0x0000ffff7abe5da0)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abe5d54    52  blr x16
0xffff7abe5d58    56  ldr lr, [jssp], #8
0xffff7abe5d5c    60  stur x5, [x1, #-1]
0xffff7abe5d60    64  tbz w5, #0, #+0x34 (addr 0xffff7abe5d94)
0xffff7abe5d64    68  sub x2, x1, #0x1 (1)
0xffff7abe5d68    72  and x5, x5, #0xfffffffffff00000
0xffff7abe5d6c    76  ldr x5, [x5, #8]
0xffff7abe5d70    80  tbz w5, #1, #+0x24 (addr 0xffff7abe5d94)
0xffff7abe5d74    84  and x5, x1, #0xfffffffffff00000
0xffff7abe5d78    88  ldr x5, [x5, #8]
0xffff7abe5d7c    92  tbz w5, #2, #+0x18 (addr 0xffff7abe5d94)
0xffff7abe5d80    96  sub csp, jssp, #0x8 (8)
0xffff7abe5d84   100  str lr, [jssp, #-8]!
0xffff7abe5d88   104  ldr x16, pc+32 (addr 0x0000ffff7abe5da8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abe5d8c   108  blr x16
0xffff7abe5d90   112  ldr lr, [jssp], #8
0xffff7abe5d94   116  ret
0xffff7abe5d98   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abe5d9c   124  d63f03e0       constant
0xffff7abe5da0   128  7ab170c0       constant
0xffff7abe5da4   132  0000ffff       constant
0xffff7abe5da8   136  7ab38080       constant
0xffff7abe5dac   140  0000ffff       constant
0xffff7abe5db0   144  movz x16, #0x0
0xffff7abe5db4   148  sub csp, jssp, #0x10 (16)
0xffff7abe5db8   152  stp fp, lr, [jssp, #-16]!
0xffff7abe5dbc   156  bl #+0x4 (addr 0xffff7abe5dc0)
0xffff7abe5dc0   160  movz x17, #0xa00000000
0xffff7abe5dc4   164  sub csp, jssp, #0x10 (16)
0xffff7abe5dc8   168  stp x17, cp, [jssp, #-16]!
0xffff7abe5dcc   172  add fp, jssp, #0x10 (16)
0xffff7abe5dd0   176  ldr x17, pc+24 (addr 0x0000ffff7abe5de8)    ;; lazy deoptimization bailout 0
0xffff7abe5dd4   180  add x17, x17, x16
0xffff7abe5dd8   184  br x17
0xffff7abe5ddc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abe5de0   192  d63f03e0       constant
0xffff7abe5de4   196  d503201f       constant
0xffff7abe5de8   200  7a906000       constant
0xffff7abe5dec   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abe5d50  code target (STUB)  (0xffff7ab170c0)
0xffff7abe5d88  code target (STUB)  (0xffff7ab38080)
0xffff7abe5d98  constant pool (size 24)
0xffff7abe5dd0  runtime entry
0xffff7abe5ddc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abe5d20     0  tbz w0, #0, #+0x90 (addr 0xffff7abe5db0)
0xffff7abe5d24     4  mov x2, x0
0xffff7abe5d28     8  stur x2, [x1, #63]
0xffff7abe5d2c    12  add x3, x1, #0x3f (63)
0xffff7abe5d30    16  and x2, x2, #0xfffffffffff00000
0xffff7abe5d34    20  ldr x2, [x2, #8]
0xffff7abe5d38    24  tbz w2, #1, #+0x24 (addr 0xffff7abe5d5c)
0xffff7abe5d3c    28  and x2, x1, #0xfffffffffff00000
0xffff7abe5d40    32  ldr x2, [x2, #8]
0xffff7abe5d44    36  tbz w2, #2, #+0x18 (addr 0xffff7abe5d5c)
0xffff7abe5d48    40  sub csp, jssp, #0x8 (8)
0xffff7abe5d4c    44  str lr, [jssp, #-8]!
0xffff7abe5d50    48  ldr x16, pc+80 (addr 0x0000ffff7abe5da0)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abe5d54    52  blr x16
0xffff7abe5d58    56  ldr lr, [jssp], #8
0xffff7abe5d5c    60  stur x5, [x1, #-1]
0xffff7abe5d60    64  tbz w5, #0, #+0x34 (addr 0xffff7abe5d94)
0xffff7abe5d64    68  sub x2, x1, #0x1 (1)
0xffff7abe5d68    72  and x5, x5, #0xfffffffffff00000
0xffff7abe5d6c    76  ldr x5, [x5, #8]
0xffff7abe5d70    80  tbz w5, #1, #+0x24 (addr 0xffff7abe5d94)
0xffff7abe5d74    84  and x5, x1, #0xfffffffffff00000
0xffff7abe5d78    88  ldr x5, [x5, #8]
0xffff7abe5d7c    92  tbz w5, #2, #+0x18 (addr 0xffff7abe5d94)
0xffff7abe5d80    96  sub csp, jssp, #0x8 (8)
0xffff7abe5d84   100  str lr, [jssp, #-8]!
0xffff7abe5d88   104  ldr x16, pc+32 (addr 0x0000ffff7abe5da8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abe5d8c   108  blr x16
0xffff7abe5d90   112  ldr lr, [jssp], #8
0xffff7abe5d94   116  ret
0xffff7abe5d98   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abe5d9c   124  d63f03e0       constant
0xffff7abe5da0   128  7ab170c0       constant
0xffff7abe5da4   132  0000ffff       constant
0xffff7abe5da8   136  7ab38080       constant
0xffff7abe5dac   140  0000ffff       constant
0xffff7abe5db0   144  movz x16, #0x0
0xffff7abe5db4   148  sub csp, jssp, #0x10 (16)
0xffff7abe5db8   152  stp fp, lr, [jssp, #-16]!
0xffff7abe5dbc   156  bl #+0x4 (addr 0xffff7abe5dc0)
0xffff7abe5dc0   160  movz x17, #0xa00000000
0xffff7abe5dc4   164  sub csp, jssp, #0x10 (16)
0xffff7abe5dc8   168  stp x17, cp, [jssp, #-16]!
0xffff7abe5dcc   172  add fp, jssp, #0x10 (16)
0xffff7abe5dd0   176  ldr x17, pc+24 (addr 0x0000ffff7abe5de8)    ;; lazy deoptimization bailout 0
0xffff7abe5dd4   180  add x17, x17, x16
0xffff7abe5dd8   184  br x17
0xffff7abe5ddc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abe5de0   192  d63f03e0       constant
0xffff7abe5de4   196  d503201f       constant
0xffff7abe5de8   200  7a906000       constant
0xffff7abe5dec   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abe5d50  code target (STUB)  (0xffff7ab170c0)
0xffff7abe5d88  code target (STUB)  (0xffff7ab38080)
0xffff7abe5d98  constant pool (size 24)
0xffff7abe5dd0  runtime entry
0xffff7abe5ddc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = children
compiler = unknown
Instructions (size = 152)
0xffff7abe5e60     0  sub csp, jssp, #0x8 (8)
0xffff7abe5e64     4  str x3, [jssp, #-8]!
0xffff7abe5e68     8  sub csp, jssp, #0x8 (8)
0xffff7abe5e6c    12  str x4, [jssp, #-8]!
0xffff7abe5e70    16  ldr x3, pc+88 (addr 0x0000ffff7abe5ec8)    ;; object: 0x5d4cb411 Cell for 0
0xffff7abe5e74    20  ldur x3, [x3, #7]
0xffff7abe5e78    24  cmp x3, #0x0 (0)
0xffff7abe5e7c    28  b.ne #+0x30 (addr 0xffff7abe5eac)
0xffff7abe5e80    32  tbz w0, #0, #+0x2c (addr 0xffff7abe5eac)
0xffff7abe5e84    36  ldr x5, pc+76 (addr 0x0000ffff7abe5ed0)    ;; object: 0x5d436c01 WeakCell for 0x4ec364a9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abe5e88    40  ldur x5, [x5, #7]
0xffff7abe5e8c    44  tbz w5, #0, #+0x20 (addr 0xffff7abe5eac)
0xffff7abe5e90    48  ldursw x4, [x5, #15]
0xffff7abe5e94    52  tbnz w4, #23, #+0x18 (addr 0xffff7abe5eac)
0xffff7abe5e98    56  ldr x4, [jssp], #8
0xffff7abe5e9c    60  ldr x3, [jssp], #8
0xffff7abe5ea0    64  ldr x2, pc+56 (addr 0x0000ffff7abe5ed8)    ;; object: 0x5d4079a9 <String[8]: children>
0xffff7abe5ea4    68  ldr x16, pc+60 (addr 0x0000ffff7abe5ee0)    ;; code: HANDLER, StoreTransitionStub, minor: 198664
0xffff7abe5ea8    72  br x16
0xffff7abe5eac    76  ldr x2, pc+60 (addr 0x0000ffff7abe5ee8)    ;; object: 0x5d4079a9 <String[8]: children>
0xffff7abe5eb0    80  ldr x4, [jssp], #8
0xffff7abe5eb4    84  ldr x3, [jssp], #8
0xffff7abe5eb8    88  ldr x16, pc+56 (addr 0x0000ffff7abe5ef0)    ;; code: BUILTIN
0xffff7abe5ebc    92  br x16
0xffff7abe5ec0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abe5ec4   100  d63f03e0       constant
0xffff7abe5ec8   104  5d4cb411       constant
0xffff7abe5ecc   108  00000000       constant
0xffff7abe5ed0   112  5d436c01       constant
0xffff7abe5ed4   116  00000000       constant
0xffff7abe5ed8   120  5d4079a9       constant
0xffff7abe5edc   124  00000000       constant
0xffff7abe5ee0   128  7abe5d20       constant
0xffff7abe5ee4   132  0000ffff       constant
0xffff7abe5ee8   136  5d4079a9       constant
0xffff7abe5eec   140  00000000       constant
0xffff7abe5ef0   144  7ab22420       constant
0xffff7abe5ef4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abe5e70  embedded object  (0x5d4cb411 Cell for 0)
0xffff7abe5e84  embedded object  (0x5d436c01 WeakCell for 0x4ec364a9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abe5ea0  embedded object  (0x5d4079a9 <String[8]: children>)
0xffff7abe5ea4  code target (HANDLER)  (0xffff7abe5d20)
0xffff7abe5eac  embedded object  (0x5d4079a9 <String[8]: children>)
0xffff7abe5eb8  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abe5ec0  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = load
compiler = unknown
Instructions (size = 120)
0xffff7abe5f60     0  sub csp, jssp, #0x8 (8)
0xffff7abe5f64     4  str x3, [jssp, #-8]!
0xffff7abe5f68     8  sub csp, jssp, #0x8 (8)
0xffff7abe5f6c    12  str x0, [jssp, #-8]!
0xffff7abe5f70    16  ldr x0, pc+72 (addr 0x0000ffff7abe5fb8)    ;; object: 0x5d4cb411 Cell for 0
0xffff7abe5f74    20  ldur x0, [x0, #7]
0xffff7abe5f78    24  cmp x0, #0x0 (0)
0xffff7abe5f7c    28  b.ne #+0x14 (addr 0xffff7abe5f90)
0xffff7abe5f80    32  ldr x3, pc+64 (addr 0x0000ffff7abe5fc0)    ;; object: 0x5d4cb5e1 WeakCell for 0x56e40601 <an Object with map 0x4ec35009>
0xffff7abe5f84    36  ldur x3, [x3, #7]
0xffff7abe5f88    40  tbz w3, #0, #+0x8 (addr 0xffff7abe5f90)
0xffff7abe5f8c    44  b #+0x14 (addr 0xffff7abe5fa0)
0xffff7abe5f90    48  ldr x0, [jssp], #8
0xffff7abe5f94    52  ldr x3, [jssp], #8
0xffff7abe5f98    56  ldr x16, pc+48 (addr 0x0000ffff7abe5fc8)    ;; code: BUILTIN
0xffff7abe5f9c    60  br x16
0xffff7abe5fa0    64  add jssp, jssp, #0x10 (16)
0xffff7abe5fa4    68  mov x1, x3
0xffff7abe5fa8    72  ldr x16, pc+40 (addr 0x0000ffff7abe5fd0)    ;; code: HANDLER, LoadConstantStub, minor: 1
0xffff7abe5fac    76  br x16
0xffff7abe5fb0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abe5fb4    84  d63f03e0       constant
0xffff7abe5fb8    88  5d4cb411       constant
0xffff7abe5fbc    92  00000000       constant
0xffff7abe5fc0    96  5d4cb5e1       constant
0xffff7abe5fc4   100  00000000       constant
0xffff7abe5fc8   104  7ab222e0       constant
0xffff7abe5fcc   108  0000ffff       constant
0xffff7abe5fd0   112  7ab43300       constant
0xffff7abe5fd4   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abe5f70  embedded object  (0x5d4cb411 Cell for 0)
0xffff7abe5f80  embedded object  (0x5d4cb5e1 WeakCell for 0x56e40601 <an Object with map 0x4ec35009>)
0xffff7abe5f98  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abe5fa8  code target (HANDLER)  (0xffff7ab43300)
0xffff7abe5fb0  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0xffff7abe6040     0  ldur x0, [x1, #71]
0xffff7abe6044     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0xffff7abe6040     0  ldur x0, [x1, #71]
0xffff7abe6044     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abe60c0     0  tbz w0, #0, #+0x90 (addr 0xffff7abe6150)
0xffff7abe60c4     4  mov x2, x0
0xffff7abe60c8     8  stur x2, [x1, #71]
0xffff7abe60cc    12  add x3, x1, #0x47 (71)
0xffff7abe60d0    16  and x2, x2, #0xfffffffffff00000
0xffff7abe60d4    20  ldr x2, [x2, #8]
0xffff7abe60d8    24  tbz w2, #1, #+0x24 (addr 0xffff7abe60fc)
0xffff7abe60dc    28  and x2, x1, #0xfffffffffff00000
0xffff7abe60e0    32  ldr x2, [x2, #8]
0xffff7abe60e4    36  tbz w2, #2, #+0x18 (addr 0xffff7abe60fc)
0xffff7abe60e8    40  sub csp, jssp, #0x8 (8)
0xffff7abe60ec    44  str lr, [jssp, #-8]!
0xffff7abe60f0    48  ldr x16, pc+80 (addr 0x0000ffff7abe6140)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abe60f4    52  blr x16
0xffff7abe60f8    56  ldr lr, [jssp], #8
0xffff7abe60fc    60  stur x5, [x1, #-1]
0xffff7abe6100    64  tbz w5, #0, #+0x34 (addr 0xffff7abe6134)
0xffff7abe6104    68  sub x2, x1, #0x1 (1)
0xffff7abe6108    72  and x5, x5, #0xfffffffffff00000
0xffff7abe610c    76  ldr x5, [x5, #8]
0xffff7abe6110    80  tbz w5, #1, #+0x24 (addr 0xffff7abe6134)
0xffff7abe6114    84  and x5, x1, #0xfffffffffff00000
0xffff7abe6118    88  ldr x5, [x5, #8]
0xffff7abe611c    92  tbz w5, #2, #+0x18 (addr 0xffff7abe6134)
0xffff7abe6120    96  sub csp, jssp, #0x8 (8)
0xffff7abe6124   100  str lr, [jssp, #-8]!
0xffff7abe6128   104  ldr x16, pc+32 (addr 0x0000ffff7abe6148)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abe612c   108  blr x16
0xffff7abe6130   112  ldr lr, [jssp], #8
0xffff7abe6134   116  ret
0xffff7abe6138   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abe613c   124  d63f03e0       constant
0xffff7abe6140   128  7ab170c0       constant
0xffff7abe6144   132  0000ffff       constant
0xffff7abe6148   136  7ab38080       constant
0xffff7abe614c   140  0000ffff       constant
0xffff7abe6150   144  movz x16, #0x0
0xffff7abe6154   148  sub csp, jssp, #0x10 (16)
0xffff7abe6158   152  stp fp, lr, [jssp, #-16]!
0xffff7abe615c   156  bl #+0x4 (addr 0xffff7abe6160)
0xffff7abe6160   160  movz x17, #0xa00000000
0xffff7abe6164   164  sub csp, jssp, #0x10 (16)
0xffff7abe6168   168  stp x17, cp, [jssp, #-16]!
0xffff7abe616c   172  add fp, jssp, #0x10 (16)
0xffff7abe6170   176  ldr x17, pc+24 (addr 0x0000ffff7abe6188)    ;; lazy deoptimization bailout 0
0xffff7abe6174   180  add x17, x17, x16
0xffff7abe6178   184  br x17
0xffff7abe617c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abe6180   192  d63f03e0       constant
0xffff7abe6184   196  d503201f       constant
0xffff7abe6188   200  7a906000       constant
0xffff7abe618c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abe60f0  code target (STUB)  (0xffff7ab170c0)
0xffff7abe6128  code target (STUB)  (0xffff7ab38080)
0xffff7abe6138  constant pool (size 24)
0xffff7abe6170  runtime entry
0xffff7abe617c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abe60c0     0  tbz w0, #0, #+0x90 (addr 0xffff7abe6150)
0xffff7abe60c4     4  mov x2, x0
0xffff7abe60c8     8  stur x2, [x1, #71]
0xffff7abe60cc    12  add x3, x1, #0x47 (71)
0xffff7abe60d0    16  and x2, x2, #0xfffffffffff00000
0xffff7abe60d4    20  ldr x2, [x2, #8]
0xffff7abe60d8    24  tbz w2, #1, #+0x24 (addr 0xffff7abe60fc)
0xffff7abe60dc    28  and x2, x1, #0xfffffffffff00000
0xffff7abe60e0    32  ldr x2, [x2, #8]
0xffff7abe60e4    36  tbz w2, #2, #+0x18 (addr 0xffff7abe60fc)
0xffff7abe60e8    40  sub csp, jssp, #0x8 (8)
0xffff7abe60ec    44  str lr, [jssp, #-8]!
0xffff7abe60f0    48  ldr x16, pc+80 (addr 0x0000ffff7abe6140)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abe60f4    52  blr x16
0xffff7abe60f8    56  ldr lr, [jssp], #8
0xffff7abe60fc    60  stur x5, [x1, #-1]
0xffff7abe6100    64  tbz w5, #0, #+0x34 (addr 0xffff7abe6134)
0xffff7abe6104    68  sub x2, x1, #0x1 (1)
0xffff7abe6108    72  and x5, x5, #0xfffffffffff00000
0xffff7abe610c    76  ldr x5, [x5, #8]
0xffff7abe6110    80  tbz w5, #1, #+0x24 (addr 0xffff7abe6134)
0xffff7abe6114    84  and x5, x1, #0xfffffffffff00000
0xffff7abe6118    88  ldr x5, [x5, #8]
0xffff7abe611c    92  tbz w5, #2, #+0x18 (addr 0xffff7abe6134)
0xffff7abe6120    96  sub csp, jssp, #0x8 (8)
0xffff7abe6124   100  str lr, [jssp, #-8]!
0xffff7abe6128   104  ldr x16, pc+32 (addr 0x0000ffff7abe6148)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abe612c   108  blr x16
0xffff7abe6130   112  ldr lr, [jssp], #8
0xffff7abe6134   116  ret
0xffff7abe6138   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abe613c   124  d63f03e0       constant
0xffff7abe6140   128  7ab170c0       constant
0xffff7abe6144   132  0000ffff       constant
0xffff7abe6148   136  7ab38080       constant
0xffff7abe614c   140  0000ffff       constant
0xffff7abe6150   144  movz x16, #0x0
0xffff7abe6154   148  sub csp, jssp, #0x10 (16)
0xffff7abe6158   152  stp fp, lr, [jssp, #-16]!
0xffff7abe615c   156  bl #+0x4 (addr 0xffff7abe6160)
0xffff7abe6160   160  movz x17, #0xa00000000
0xffff7abe6164   164  sub csp, jssp, #0x10 (16)
0xffff7abe6168   168  stp x17, cp, [jssp, #-16]!
0xffff7abe616c   172  add fp, jssp, #0x10 (16)
0xffff7abe6170   176  ldr x17, pc+24 (addr 0x0000ffff7abe6188)    ;; lazy deoptimization bailout 0
0xffff7abe6174   180  add x17, x17, x16
0xffff7abe6178   184  br x17
0xffff7abe617c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abe6180   192  d63f03e0       constant
0xffff7abe6184   196  d503201f       constant
0xffff7abe6188   200  7a906000       constant
0xffff7abe618c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abe60f0  code target (STUB)  (0xffff7ab170c0)
0xffff7abe6128  code target (STUB)  (0xffff7ab38080)
0xffff7abe6138  constant pool (size 24)
0xffff7abe6170  runtime entry
0xffff7abe617c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = paths
compiler = unknown
Instructions (size = 152)
0xffff7abe6200     0  sub csp, jssp, #0x8 (8)
0xffff7abe6204     4  str x3, [jssp, #-8]!
0xffff7abe6208     8  sub csp, jssp, #0x8 (8)
0xffff7abe620c    12  str x4, [jssp, #-8]!
0xffff7abe6210    16  ldr x3, pc+88 (addr 0x0000ffff7abe6268)    ;; object: 0x5d4cb411 Cell for 0
0xffff7abe6214    20  ldur x3, [x3, #7]
0xffff7abe6218    24  cmp x3, #0x0 (0)
0xffff7abe621c    28  b.ne #+0x30 (addr 0xffff7abe624c)
0xffff7abe6220    32  tbz w0, #0, #+0x2c (addr 0xffff7abe624c)
0xffff7abe6224    36  ldr x5, pc+76 (addr 0x0000ffff7abe6270)    ;; object: 0x5d4c5369 WeakCell for 0x4ec36559 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abe6228    40  ldur x5, [x5, #7]
0xffff7abe622c    44  tbz w5, #0, #+0x20 (addr 0xffff7abe624c)
0xffff7abe6230    48  ldursw x4, [x5, #15]
0xffff7abe6234    52  tbnz w4, #23, #+0x18 (addr 0xffff7abe624c)
0xffff7abe6238    56  ldr x4, [jssp], #8
0xffff7abe623c    60  ldr x3, [jssp], #8
0xffff7abe6240    64  ldr x2, pc+56 (addr 0x0000ffff7abe6278)    ;; object: 0x20dba4c1 <String[5]: paths>
0xffff7abe6244    68  ldr x16, pc+60 (addr 0x0000ffff7abe6280)    ;; code: HANDLER, StoreTransitionStub, minor: 198665
0xffff7abe6248    72  br x16
0xffff7abe624c    76  ldr x2, pc+60 (addr 0x0000ffff7abe6288)    ;; object: 0x20dba4c1 <String[5]: paths>
0xffff7abe6250    80  ldr x4, [jssp], #8
0xffff7abe6254    84  ldr x3, [jssp], #8
0xffff7abe6258    88  ldr x16, pc+56 (addr 0x0000ffff7abe6290)    ;; code: BUILTIN
0xffff7abe625c    92  br x16
0xffff7abe6260    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abe6264   100  d63f03e0       constant
0xffff7abe6268   104  5d4cb411       constant
0xffff7abe626c   108  00000000       constant
0xffff7abe6270   112  5d4c5369       constant
0xffff7abe6274   116  00000000       constant
0xffff7abe6278   120  20dba4c1       constant
0xffff7abe627c   124  00000000       constant
0xffff7abe6280   128  7abe60c0       constant
0xffff7abe6284   132  0000ffff       constant
0xffff7abe6288   136  20dba4c1       constant
0xffff7abe628c   140  00000000       constant
0xffff7abe6290   144  7ab22420       constant
0xffff7abe6294   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abe6210  embedded object  (0x5d4cb411 Cell for 0)
0xffff7abe6224  embedded object  (0x5d4c5369 WeakCell for 0x4ec36559 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abe6240  embedded object  (0x20dba4c1 <String[5]: paths>)
0xffff7abe6244  code target (HANDLER)  (0xffff7abe60c0)
0xffff7abe624c  embedded object  (0x20dba4c1 <String[5]: paths>)
0xffff7abe6258  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abe6260  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0xffff7abe6300     0  ldur x0, [x1, #87]
0xffff7abe6304     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0xffff7abe6300     0  ldur x0, [x1, #87]
0xffff7abe6304     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7abe6380     0  ldur x0, [x1, #-1]
0xffff7abe6384     4  ldur x0, [x0, #47]
0xffff7abe6388     8  movz x16, #0x1af
0xffff7abe638c    12  ldr x0, [x0, x16]
0xffff7abe6390    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7abe6380     0  ldur x0, [x1, #-1]
0xffff7abe6384     4  ldur x0, [x0, #47]
0xffff7abe6388     8  movz x16, #0x1af
0xffff7abe638c    12  ldr x0, [x0, x16]
0xffff7abe6390    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = isFile
compiler = unknown
Instructions (size = 120)
0xffff7abe6400     0  sub csp, jssp, #0x8 (8)
0xffff7abe6404     4  str x3, [jssp, #-8]!
0xffff7abe6408     8  sub csp, jssp, #0x8 (8)
0xffff7abe640c    12  str x0, [jssp, #-8]!
0xffff7abe6410    16  ldr x0, pc+72 (addr 0x0000ffff7abe6458)    ;; object: 0x5d4352e9 Cell for 0
0xffff7abe6414    20  ldur x0, [x0, #7]
0xffff7abe6418    24  cmp x0, #0x0 (0)
0xffff7abe641c    28  b.ne #+0x14 (addr 0xffff7abe6430)
0xffff7abe6420    32  ldr x3, pc+64 (addr 0x0000ffff7abe6460)    ;; object: 0x5d4cb781 WeakCell for 0x56e3b031 <an Object with map 0x4ec320f1>
0xffff7abe6424    36  ldur x3, [x3, #7]
0xffff7abe6428    40  tbz w3, #0, #+0x8 (addr 0xffff7abe6430)
0xffff7abe642c    44  b #+0x14 (addr 0xffff7abe6440)
0xffff7abe6430    48  ldr x0, [jssp], #8
0xffff7abe6434    52  ldr x3, [jssp], #8
0xffff7abe6438    56  ldr x16, pc+48 (addr 0x0000ffff7abe6468)    ;; code: BUILTIN
0xffff7abe643c    60  br x16
0xffff7abe6440    64  add jssp, jssp, #0x10 (16)
0xffff7abe6444    68  mov x1, x3
0xffff7abe6448    72  ldr x16, pc+40 (addr 0x0000ffff7abe6470)    ;; code: HANDLER, LoadConstantStub, minor: 3
0xffff7abe644c    76  br x16
0xffff7abe6450    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abe6454    84  d63f03e0       constant
0xffff7abe6458    88  5d4352e9       constant
0xffff7abe645c    92  00000000       constant
0xffff7abe6460    96  5d4cb781       constant
0xffff7abe6464   100  00000000       constant
0xffff7abe6468   104  7ab222e0       constant
0xffff7abe646c   108  0000ffff       constant
0xffff7abe6470   112  7ab43400       constant
0xffff7abe6474   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abe6410  embedded object  (0x5d4352e9 Cell for 0)
0xffff7abe6420  embedded object  (0x5d4cb781 WeakCell for 0x56e3b031 <an Object with map 0x4ec320f1>)
0xffff7abe6438  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abe6448  code target (HANDLER)  (0xffff7ab43400)
0xffff7abe6450  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 197)
0xffff7abe64e0     0  ldur d0, [x1, #87]
0xffff7abe64e4     4  movz x1, #0xe2c0
0xffff7abe64e8     8  movk x1, #0x9ab, lsl #16
0xffff7abe64ec    12  ldp x2, x0, [x1]
0xffff7abe64f0    16  adds x16, x2, #0x10 (16)
0xffff7abe64f4    20  ccmp x16, x0, #nzCv, lo
0xffff7abe64f8    24  b.hi #+0x20 (addr 0xffff7abe6518)
0xffff7abe64fc    28  str x16, [x1]
0xffff7abe6500    32  ldr x1, [x26, #120]
0xffff7abe6504    36  str x1, [x2]
0xffff7abe6508    40  orr x2, x2, #0x1
0xffff7abe650c    44  stur d0, [x2, #7]
0xffff7abe6510    48  mov x0, x2
0xffff7abe6514    52  ret
0xffff7abe6518    56  sub csp, jssp, #0x10 (16)
0xffff7abe651c    60  stp fp, lr, [jssp, #-16]!
0xffff7abe6520    64  movz fp, #0xa00000000
0xffff7abe6524    68  sub csp, jssp, #0x8 (8)
0xffff7abe6528    72  str fp, [jssp, #-8]!
0xffff7abe652c    76  add fp, jssp, #0x8 (8)
0xffff7abe6530    80  movz x2, #0x0
0xffff7abe6534    84  mov x16, lr
0xffff7abe6538    88  ldr x17, pc+64 (addr 0x0000ffff7abe6578)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abe653c    92  blr x17
0xffff7abe6540    96  ldur cp, [fp, #-8]
0xffff7abe6544   100  movz x0, #0x0
0xffff7abe6548   104  movz x1, #0x4b48
0xffff7abe654c   108  movk x1, #0xe4, lsl #16
0xffff7abe6550   112  ldr x16, pc+48 (addr 0x0000ffff7abe6580)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abe6554   116  blr x16
0xffff7abe6558   120  str x0, [jssp, #16]
0xffff7abe655c   124  ldr x16, pc+44 (addr 0x0000ffff7abe6588)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abe6560   128  blr x16
0xffff7abe6564   132  ldr lr, [jssp, #16]
0xffff7abe6568   136  ldp xzr, fp, [jssp], #24
0xffff7abe656c   140  b #-0x60 (addr 0xffff7abe650c)
0xffff7abe6570   144  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7abe6574   148  d63f03e0       constant
0xffff7abe6578   152  7ab06820       constant
0xffff7abe657c   156  0000ffff       constant
0xffff7abe6580   160  7ab06260       constant
0xffff7abe6584   164  0000ffff       constant
0xffff7abe6588   168  7ab068e0       constant
0xffff7abe658c   172  0000ffff       constant


Safepoints (size = 21)
0xffff7abe6558   120  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 11)
0xffff7abe6538  code target (STUB)  (0xffff7ab06820)
0xffff7abe6550  code target (STUB)  (0xffff7ab06260)
0xffff7abe655c  code target (STUB)  (0xffff7ab068e0)
0xffff7abe6570  constant pool (size 32)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 197)
0xffff7abe64e0     0  ldur d0, [x1, #87]
0xffff7abe64e4     4  movz x1, #0xe2c0
0xffff7abe64e8     8  movk x1, #0x9ab, lsl #16
0xffff7abe64ec    12  ldp x2, x0, [x1]
0xffff7abe64f0    16  adds x16, x2, #0x10 (16)
0xffff7abe64f4    20  ccmp x16, x0, #nzCv, lo
0xffff7abe64f8    24  b.hi #+0x20 (addr 0xffff7abe6518)
0xffff7abe64fc    28  str x16, [x1]
0xffff7abe6500    32  ldr x1, [x26, #120]
0xffff7abe6504    36  str x1, [x2]
0xffff7abe6508    40  orr x2, x2, #0x1
0xffff7abe650c    44  stur d0, [x2, #7]
0xffff7abe6510    48  mov x0, x2
0xffff7abe6514    52  ret
0xffff7abe6518    56  sub csp, jssp, #0x10 (16)
0xffff7abe651c    60  stp fp, lr, [jssp, #-16]!
0xffff7abe6520    64  movz fp, #0xa00000000
0xffff7abe6524    68  sub csp, jssp, #0x8 (8)
0xffff7abe6528    72  str fp, [jssp, #-8]!
0xffff7abe652c    76  add fp, jssp, #0x8 (8)
0xffff7abe6530    80  movz x2, #0x0
0xffff7abe6534    84  mov x16, lr
0xffff7abe6538    88  ldr x17, pc+64 (addr 0x0000ffff7abe6578)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abe653c    92  blr x17
0xffff7abe6540    96  ldur cp, [fp, #-8]
0xffff7abe6544   100  movz x0, #0x0
0xffff7abe6548   104  movz x1, #0x4b48
0xffff7abe654c   108  movk x1, #0xe4, lsl #16
0xffff7abe6550   112  ldr x16, pc+48 (addr 0x0000ffff7abe6580)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abe6554   116  blr x16
0xffff7abe6558   120  str x0, [jssp, #16]
0xffff7abe655c   124  ldr x16, pc+44 (addr 0x0000ffff7abe6588)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abe6560   128  blr x16
0xffff7abe6564   132  ldr lr, [jssp, #16]
0xffff7abe6568   136  ldp xzr, fp, [jssp], #24
0xffff7abe656c   140  b #-0x60 (addr 0xffff7abe650c)
0xffff7abe6570   144  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7abe6574   148  d63f03e0       constant
0xffff7abe6578   152  7ab06820       constant
0xffff7abe657c   156  0000ffff       constant
0xffff7abe6580   160  7ab06260       constant
0xffff7abe6584   164  0000ffff       constant
0xffff7abe6588   168  7ab068e0       constant
0xffff7abe658c   172  0000ffff       constant


Safepoints (size = 21)
0xffff7abe6558   120  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 11)
0xffff7abe6538  code target (STUB)  (0xffff7ab06820)
0xffff7abe6550  code target (STUB)  (0xffff7ab06260)
0xffff7abe655c  code target (STUB)  (0xffff7ab068e0)
0xffff7abe6570  constant pool (size 32)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7abe6620     0  ldur x0, [x1, #-1]
0xffff7abe6624     4  ldur x0, [x0, #47]
0xffff7abe6628     8  movz x16, #0x2b7
0xffff7abe662c    12  ldr x0, [x0, x16]
0xffff7abe6630    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7abe6620     0  ldur x0, [x1, #-1]
0xffff7abe6624     4  ldur x0, [x0, #47]
0xffff7abe6628     8  movz x16, #0x2b7
0xffff7abe662c    12  ldr x0, [x0, x16]
0xffff7abe6630    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = slice
compiler = unknown
Instructions (size = 120)
0xffff7abe66a0     0  sub csp, jssp, #0x8 (8)
0xffff7abe66a4     4  str x3, [jssp, #-8]!
0xffff7abe66a8     8  sub csp, jssp, #0x8 (8)
0xffff7abe66ac    12  str x0, [jssp, #-8]!
0xffff7abe66b0    16  ldr x0, pc+72 (addr 0x0000ffff7abe66f8)    ;; object: 0x5d4cb899 Cell for 0
0xffff7abe66b4    20  ldur x0, [x0, #7]
0xffff7abe66b8    24  cmp x0, #0x0 (0)
0xffff7abe66bc    28  b.ne #+0x14 (addr 0xffff7abe66d0)
0xffff7abe66c0    32  ldr x3, pc+64 (addr 0x0000ffff7abe6700)    ;; object: 0x5d4cb8a9 WeakCell for 0x5d440909 <a FastBuffer with map 0x4ec22341>
0xffff7abe66c4    36  ldur x3, [x3, #7]
0xffff7abe66c8    40  tbz w3, #0, #+0x8 (addr 0xffff7abe66d0)
0xffff7abe66cc    44  b #+0x14 (addr 0xffff7abe66e0)
0xffff7abe66d0    48  ldr x0, [jssp], #8
0xffff7abe66d4    52  ldr x3, [jssp], #8
0xffff7abe66d8    56  ldr x16, pc+48 (addr 0x0000ffff7abe6708)    ;; code: BUILTIN
0xffff7abe66dc    60  br x16
0xffff7abe66e0    64  add jssp, jssp, #0x10 (16)
0xffff7abe66e4    68  mov x1, x3
0xffff7abe66e8    72  ldr x16, pc+40 (addr 0x0000ffff7abe6710)    ;; code: HANDLER, LoadConstantStub, minor: 27
0xffff7abe66ec    76  br x16
0xffff7abe66f0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abe66f4    84  d63f03e0       constant
0xffff7abe66f8    88  5d4cb899       constant
0xffff7abe66fc    92  00000000       constant
0xffff7abe6700    96  5d4cb8a9       constant
0xffff7abe6704   100  00000000       constant
0xffff7abe6708   104  7ab222e0       constant
0xffff7abe670c   108  0000ffff       constant
0xffff7abe6710   112  7abe6620       constant
0xffff7abe6714   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abe66b0  embedded object  (0x5d4cb899 Cell for 0)
0xffff7abe66c0  embedded object  (0x5d4cb8a9 WeakCell for 0x5d440909 <a FastBuffer with map 0x4ec22341>)
0xffff7abe66d8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abe66e8  code target (HANDLER)  (0xffff7abe6620)
0xffff7abe66f0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = length
compiler = unknown
Instructions (size = 216)
0xffff7abe6780     0  sub csp, jssp, #0x8 (8)
0xffff7abe6784     4  str x3, [jssp, #-8]!
0xffff7abe6788     8  sub csp, jssp, #0x8 (8)
0xffff7abe678c    12  str x0, [jssp, #-8]!
0xffff7abe6790    16  ldr x0, pc+160 (addr 0x0000ffff7abe6830)    ;; object: 0x5d4cb899 Cell for 0
0xffff7abe6794    20  ldur x0, [x0, #7]
0xffff7abe6798    24  cmp x0, #0x0 (0)
0xffff7abe679c    28  b.ne #+0x14 (addr 0xffff7abe67b0)
0xffff7abe67a0    32  ldr x3, pc+152 (addr 0x0000ffff7abe6838)    ;; object: 0x5d4cb921 WeakCell for 0x5d4a6e31 <an Object with map 0x4ec14111>
0xffff7abe67a4    36  ldur x3, [x3, #7]
0xffff7abe67a8    40  tbz w3, #0, #+0x8 (addr 0xffff7abe67b0)
0xffff7abe67ac    44  b #+0x14 (addr 0xffff7abe67c0)
0xffff7abe67b0    48  ldr x0, [jssp], #8
0xffff7abe67b4    52  ldr x3, [jssp], #8
0xffff7abe67b8    56  ldr x16, pc+136 (addr 0x0000ffff7abe6840)    ;; code: BUILTIN
0xffff7abe67bc    60  br x16
0xffff7abe67c0    64  add jssp, jssp, #0x10 (16)
0xffff7abe67c4    68  movz x16, #0xc00000000
0xffff7abe67c8    72  sub csp, jssp, #0x10 (16)
0xffff7abe67cc    76  stp fp, lr, [jssp, #-16]!
0xffff7abe67d0    80  sub csp, jssp, #0x10 (16)
0xffff7abe67d4    84  str x16, [jssp, #-8]!
0xffff7abe67d8    88  ldr x17, pc+112 (addr 0x0000ffff7abe6848)    ;; object: 0xffff7abe6721 <Code: HANDLER>
0xffff7abe67dc    92  sub csp, jssp, #0x10 (16)
0xffff7abe67e0    96  str x17, [jssp, #-8]!
0xffff7abe67e4   100  add fp, jssp, #0x10 (16)
0xffff7abe67e8   104  sub csp, jssp, #0x8 (8)
0xffff7abe67ec   108  str cp, [jssp, #-8]!
0xffff7abe67f0   112  sub csp, jssp, #0x8 (8)
0xffff7abe67f4   116  str x1, [jssp, #-8]!
0xffff7abe67f8   120  ldur x1, [x3, #-1]
0xffff7abe67fc   124  ldur x1, [x1, #47]
0xffff7abe6800   128  ldur x1, [x1, #143]
0xffff7abe6804   132  ldur x1, [x1, #7]
0xffff7abe6808   136  movz x0, #0x0
0xffff7abe680c   140  ldr x16, pc+68 (addr 0x0000ffff7abe6850)    ;; code: BUILTIN
0xffff7abe6810   144  blr x16
0xffff7abe6814   148  ldr cp, [jssp], #8
0xffff7abe6818   152  mov jssp, fp
0xffff7abe681c   156  ldp fp, lr, [jssp], #16
0xffff7abe6820   160  ret
0xffff7abe6824   164  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0xffff7abe6828   168  d63f03e0       constant
0xffff7abe682c   172  d503201f       constant
0xffff7abe6830   176  5d4cb899       constant
0xffff7abe6834   180  00000000       constant
0xffff7abe6838   184  5d4cb921       constant
0xffff7abe683c   188  00000000       constant
0xffff7abe6840   192  7ab222e0       constant
0xffff7abe6844   196  0000ffff       constant
0xffff7abe6848   200  7abe6721       constant
0xffff7abe684c   204  0000ffff       constant
0xffff7abe6850   208  7ab1e600       constant
0xffff7abe6854   212  0000ffff       constant


RelocInfo (size = 11)
0xffff7abe6790  embedded object  (0x5d4cb899 Cell for 0)
0xffff7abe67a0  embedded object  (0x5d4cb921 WeakCell for 0x5d4a6e31 <an Object with map 0x4ec14111>)
0xffff7abe67b8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abe67d8  embedded object  (0xffff7abe6721 <Code: HANDLER>)
0xffff7abe680c  code target (BUILTIN)  (0xffff7ab1e600)
0xffff7abe6824  constant pool (size 52)

kind = HANDLER
major_key = <NoCache>Stub
name = Number
compiler = unknown
Instructions (size = 120)
0xffff7abe68c0     0  sub csp, jssp, #0x8 (8)
0xffff7abe68c4     4  str x3, [jssp, #-8]!
0xffff7abe68c8     8  sub csp, jssp, #0x8 (8)
0xffff7abe68cc    12  str x0, [jssp, #-8]!
0xffff7abe68d0    16  ldr x0, pc+80 (addr 0x0000ffff7abe6920)    ;; object: 0x20dc5d51 Cell for 0
0xffff7abe68d4    20  ldur x0, [x0, #7]
0xffff7abe68d8    24  cmp x0, #0x0 (0)
0xffff7abe68dc    28  b.ne #+0x2c (addr 0xffff7abe6908)
0xffff7abe68e0    32  ldr x0, pc+72 (addr 0x0000ffff7abe6928)    ;; object: 0x5d4cb959 WeakCell for 0x20d423d9 PropertyCell for 0x20d42371 <JS Function Number (SharedFunctionInfo 0x20d422c9)>
0xffff7abe68e4    36  ldur x0, [x0, #7]
0xffff7abe68e8    40  tbz w0, #0, #+0x20 (addr 0xffff7abe6908)
0xffff7abe68ec    44  ldur x0, [x0, #15]
0xffff7abe68f0    48  ldr x16, [x26, #88]
0xffff7abe68f4    52  cmp x0, x16
0xffff7abe68f8    56  b.eq #+0x10 (addr 0xffff7abe6908)
0xffff7abe68fc    60  add jssp, jssp, #0x10 (16)
0xffff7abe6900    64  ret
0xffff7abe6904    68  b #+0x14 (addr 0xffff7abe6918)
0xffff7abe6908    72  ldr x0, [jssp], #8
0xffff7abe690c    76  ldr x3, [jssp], #8
0xffff7abe6910    80  ldr x16, pc+32 (addr 0x0000ffff7abe6930)    ;; code: BUILTIN
0xffff7abe6914    84  br x16
0xffff7abe6918    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7abe691c    92  d63f03e0       constant
0xffff7abe6920    96  20dc5d51       constant
0xffff7abe6924   100  00000000       constant
0xffff7abe6928   104  5d4cb959       constant
0xffff7abe692c   108  00000000       constant
0xffff7abe6930   112  7ab222e0       constant
0xffff7abe6934   116  0000ffff       constant


RelocInfo (size = 9)
0xffff7abe68d0  embedded object  (0x20dc5d51 Cell for 0)
0xffff7abe68e0  embedded object  (0x5d4cb959 WeakCell for 0x20d423d9 PropertyCell for 0x20d42371 <JS Function Number (SharedFunctionInfo 0x20d422c9)>)
0xffff7abe6910  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abe6918  constant pool (size 32)

kind = HANDLER
major_key = <NoCache>Stub
name = buffer
compiler = unknown
Instructions (size = 216)
0xffff7abe69a0     0  sub csp, jssp, #0x8 (8)
0xffff7abe69a4     4  str x3, [jssp, #-8]!
0xffff7abe69a8     8  sub csp, jssp, #0x8 (8)
0xffff7abe69ac    12  str x0, [jssp, #-8]!
0xffff7abe69b0    16  ldr x0, pc+160 (addr 0x0000ffff7abe6a50)    ;; object: 0x5d4cb899 Cell for 0
0xffff7abe69b4    20  ldur x0, [x0, #7]
0xffff7abe69b8    24  cmp x0, #0x0 (0)
0xffff7abe69bc    28  b.ne #+0x14 (addr 0xffff7abe69d0)
0xffff7abe69c0    32  ldr x3, pc+152 (addr 0x0000ffff7abe6a58)    ;; object: 0x5d4cb9c1 WeakCell for 0x5d4a6e31 <an Object with map 0x4ec14111>
0xffff7abe69c4    36  ldur x3, [x3, #7]
0xffff7abe69c8    40  tbz w3, #0, #+0x8 (addr 0xffff7abe69d0)
0xffff7abe69cc    44  b #+0x14 (addr 0xffff7abe69e0)
0xffff7abe69d0    48  ldr x0, [jssp], #8
0xffff7abe69d4    52  ldr x3, [jssp], #8
0xffff7abe69d8    56  ldr x16, pc+136 (addr 0x0000ffff7abe6a60)    ;; code: BUILTIN
0xffff7abe69dc    60  br x16
0xffff7abe69e0    64  add jssp, jssp, #0x10 (16)
0xffff7abe69e4    68  movz x16, #0xc00000000
0xffff7abe69e8    72  sub csp, jssp, #0x10 (16)
0xffff7abe69ec    76  stp fp, lr, [jssp, #-16]!
0xffff7abe69f0    80  sub csp, jssp, #0x10 (16)
0xffff7abe69f4    84  str x16, [jssp, #-8]!
0xffff7abe69f8    88  ldr x17, pc+112 (addr 0x0000ffff7abe6a68)    ;; object: 0xffff7abe6941 <Code: HANDLER>
0xffff7abe69fc    92  sub csp, jssp, #0x10 (16)
0xffff7abe6a00    96  str x17, [jssp, #-8]!
0xffff7abe6a04   100  add fp, jssp, #0x10 (16)
0xffff7abe6a08   104  sub csp, jssp, #0x8 (8)
0xffff7abe6a0c   108  str cp, [jssp, #-8]!
0xffff7abe6a10   112  sub csp, jssp, #0x8 (8)
0xffff7abe6a14   116  str x1, [jssp, #-8]!
0xffff7abe6a18   120  ldur x1, [x3, #-1]
0xffff7abe6a1c   124  ldur x1, [x1, #47]
0xffff7abe6a20   128  ldur x1, [x1, #71]
0xffff7abe6a24   132  ldur x1, [x1, #7]
0xffff7abe6a28   136  movz x0, #0x0
0xffff7abe6a2c   140  ldr x16, pc+68 (addr 0x0000ffff7abe6a70)    ;; code: BUILTIN
0xffff7abe6a30   144  blr x16
0xffff7abe6a34   148  ldr cp, [jssp], #8
0xffff7abe6a38   152  mov jssp, fp
0xffff7abe6a3c   156  ldp fp, lr, [jssp], #16
0xffff7abe6a40   160  ret
0xffff7abe6a44   164  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0xffff7abe6a48   168  d63f03e0       constant
0xffff7abe6a4c   172  d503201f       constant
0xffff7abe6a50   176  5d4cb899       constant
0xffff7abe6a54   180  00000000       constant
0xffff7abe6a58   184  5d4cb9c1       constant
0xffff7abe6a5c   188  00000000       constant
0xffff7abe6a60   192  7ab222e0       constant
0xffff7abe6a64   196  0000ffff       constant
0xffff7abe6a68   200  7abe6941       constant
0xffff7abe6a6c   204  0000ffff       constant
0xffff7abe6a70   208  7ab1e600       constant
0xffff7abe6a74   212  0000ffff       constant


RelocInfo (size = 11)
0xffff7abe69b0  embedded object  (0x5d4cb899 Cell for 0)
0xffff7abe69c0  embedded object  (0x5d4cb9c1 WeakCell for 0x5d4a6e31 <an Object with map 0x4ec14111>)
0xffff7abe69d8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abe69f8  embedded object  (0xffff7abe6941 <Code: HANDLER>)
0xffff7abe6a2c  code target (BUILTIN)  (0xffff7ab1e600)
0xffff7abe6a44  constant pool (size 52)

kind = HANDLER
major_key = <NoCache>Stub
name = byteOffset
compiler = unknown
Instructions (size = 216)
0xffff7abe6ae0     0  sub csp, jssp, #0x8 (8)
0xffff7abe6ae4     4  str x3, [jssp, #-8]!
0xffff7abe6ae8     8  sub csp, jssp, #0x8 (8)
0xffff7abe6aec    12  str x0, [jssp, #-8]!
0xffff7abe6af0    16  ldr x0, pc+160 (addr 0x0000ffff7abe6b90)    ;; object: 0x5d4cb899 Cell for 0
0xffff7abe6af4    20  ldur x0, [x0, #7]
0xffff7abe6af8    24  cmp x0, #0x0 (0)
0xffff7abe6afc    28  b.ne #+0x14 (addr 0xffff7abe6b10)
0xffff7abe6b00    32  ldr x3, pc+152 (addr 0x0000ffff7abe6b98)    ;; object: 0x5d4cb9f9 WeakCell for 0x5d4a6e31 <an Object with map 0x4ec14111>
0xffff7abe6b04    36  ldur x3, [x3, #7]
0xffff7abe6b08    40  tbz w3, #0, #+0x8 (addr 0xffff7abe6b10)
0xffff7abe6b0c    44  b #+0x14 (addr 0xffff7abe6b20)
0xffff7abe6b10    48  ldr x0, [jssp], #8
0xffff7abe6b14    52  ldr x3, [jssp], #8
0xffff7abe6b18    56  ldr x16, pc+136 (addr 0x0000ffff7abe6ba0)    ;; code: BUILTIN
0xffff7abe6b1c    60  br x16
0xffff7abe6b20    64  add jssp, jssp, #0x10 (16)
0xffff7abe6b24    68  movz x16, #0xc00000000
0xffff7abe6b28    72  sub csp, jssp, #0x10 (16)
0xffff7abe6b2c    76  stp fp, lr, [jssp, #-16]!
0xffff7abe6b30    80  sub csp, jssp, #0x10 (16)
0xffff7abe6b34    84  str x16, [jssp, #-8]!
0xffff7abe6b38    88  ldr x17, pc+112 (addr 0x0000ffff7abe6ba8)    ;; object: 0xffff7abe6a81 <Code: HANDLER>
0xffff7abe6b3c    92  sub csp, jssp, #0x10 (16)
0xffff7abe6b40    96  str x17, [jssp, #-8]!
0xffff7abe6b44   100  add fp, jssp, #0x10 (16)
0xffff7abe6b48   104  sub csp, jssp, #0x8 (8)
0xffff7abe6b4c   108  str cp, [jssp, #-8]!
0xffff7abe6b50   112  sub csp, jssp, #0x8 (8)
0xffff7abe6b54   116  str x1, [jssp, #-8]!
0xffff7abe6b58   120  ldur x1, [x3, #-1]
0xffff7abe6b5c   124  ldur x1, [x1, #47]
0xffff7abe6b60   128  ldur x1, [x1, #95]
0xffff7abe6b64   132  ldur x1, [x1, #7]
0xffff7abe6b68   136  movz x0, #0x0
0xffff7abe6b6c   140  ldr x16, pc+68 (addr 0x0000ffff7abe6bb0)    ;; code: BUILTIN
0xffff7abe6b70   144  blr x16
0xffff7abe6b74   148  ldr cp, [jssp], #8
0xffff7abe6b78   152  mov jssp, fp
0xffff7abe6b7c   156  ldp fp, lr, [jssp], #16
0xffff7abe6b80   160  ret
0xffff7abe6b84   164  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0xffff7abe6b88   168  d63f03e0       constant
0xffff7abe6b8c   172  d503201f       constant
0xffff7abe6b90   176  5d4cb899       constant
0xffff7abe6b94   180  00000000       constant
0xffff7abe6b98   184  5d4cb9f9       constant
0xffff7abe6b9c   188  00000000       constant
0xffff7abe6ba0   192  7ab222e0       constant
0xffff7abe6ba4   196  0000ffff       constant
0xffff7abe6ba8   200  7abe6a81       constant
0xffff7abe6bac   204  0000ffff       constant
0xffff7abe6bb0   208  7ab1e600       constant
0xffff7abe6bb4   212  0000ffff       constant


RelocInfo (size = 11)
0xffff7abe6af0  embedded object  (0x5d4cb899 Cell for 0)
0xffff7abe6b00  embedded object  (0x5d4cb9f9 WeakCell for 0x5d4a6e31 <an Object with map 0x4ec14111>)
0xffff7abe6b18  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abe6b38  embedded object  (0xffff7abe6a81 <Code: HANDLER>)
0xffff7abe6b6c  code target (BUILTIN)  (0xffff7ab1e600)
0xffff7abe6b84  constant pool (size 52)

kind = HANDLER
major_key = <NoCache>Stub
compiler = unknown
Instructions (size = 120)
0xffff7abe6c20     0  sub csp, jssp, #0x8 (8)
0xffff7abe6c24     4  str x3, [jssp, #-8]!
0xffff7abe6c28     8  sub csp, jssp, #0x8 (8)
0xffff7abe6c2c    12  str x0, [jssp, #-8]!
0xffff7abe6c30    16  ldr x0, pc+72 (addr 0x0000ffff7abe6c78)    ;; object: 0x5d4cbab1 Cell for 0
0xffff7abe6c34    20  ldur x0, [x0, #7]
0xffff7abe6c38    24  cmp x0, #0x0 (0)
0xffff7abe6c3c    28  b.ne #+0x14 (addr 0xffff7abe6c50)
0xffff7abe6c40    32  ldr x3, pc+64 (addr 0x0000ffff7abe6c80)    ;; object: 0x5d4cbac1 WeakCell for 0x20d40019 <JS Function (SharedFunctionInfo 0x20d3ff71)>
0xffff7abe6c44    36  ldur x3, [x3, #7]
0xffff7abe6c48    40  tbz w3, #0, #+0x8 (addr 0xffff7abe6c50)
0xffff7abe6c4c    44  b #+0x14 (addr 0xffff7abe6c60)
0xffff7abe6c50    48  ldr x0, [jssp], #8
0xffff7abe6c54    52  ldr x3, [jssp], #8
0xffff7abe6c58    56  ldr x16, pc+48 (addr 0x0000ffff7abe6c88)    ;; code: BUILTIN
0xffff7abe6c5c    60  br x16
0xffff7abe6c60    64  add jssp, jssp, #0x10 (16)
0xffff7abe6c64    68  mov x1, x3
0xffff7abe6c68    72  ldr x16, pc+40 (addr 0x0000ffff7abe6c90)    ;; code: HANDLER, LoadConstantStub, minor: 8
0xffff7abe6c6c    76  br x16
0xffff7abe6c70    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abe6c74    84  d63f03e0       constant
0xffff7abe6c78    88  5d4cbab1       constant
0xffff7abe6c7c    92  00000000       constant
0xffff7abe6c80    96  5d4cbac1       constant
0xffff7abe6c84   100  00000000       constant
0xffff7abe6c88   104  7ab222e0       constant
0xffff7abe6c8c   108  0000ffff       constant
0xffff7abe6c90   112  7ab4c160       constant
0xffff7abe6c94   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abe6c30  embedded object  (0x5d4cbab1 Cell for 0)
0xffff7abe6c40  embedded object  (0x5d4cbac1 WeakCell for 0x20d40019 <JS Function (SharedFunctionInfo 0x20d3ff71)>)
0xffff7abe6c58  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abe6c68  code target (HANDLER)  (0xffff7ab4c160)
0xffff7abe6c70  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = toString
compiler = unknown
Instructions (size = 120)
0xffff7abe6d00     0  sub csp, jssp, #0x8 (8)
0xffff7abe6d04     4  str x3, [jssp, #-8]!
0xffff7abe6d08     8  sub csp, jssp, #0x8 (8)
0xffff7abe6d0c    12  str x0, [jssp, #-8]!
0xffff7abe6d10    16  ldr x0, pc+72 (addr 0x0000ffff7abe6d58)    ;; object: 0x5d4cb899 Cell for 0
0xffff7abe6d14    20  ldur x0, [x0, #7]
0xffff7abe6d18    24  cmp x0, #0x0 (0)
0xffff7abe6d1c    28  b.ne #+0x14 (addr 0xffff7abe6d30)
0xffff7abe6d20    32  ldr x3, pc+64 (addr 0x0000ffff7abe6d60)    ;; object: 0x5d4cbb11 WeakCell for 0x5d440909 <a FastBuffer with map 0x4ec22341>
0xffff7abe6d24    36  ldur x3, [x3, #7]
0xffff7abe6d28    40  tbz w3, #0, #+0x8 (addr 0xffff7abe6d30)
0xffff7abe6d2c    44  b #+0x14 (addr 0xffff7abe6d40)
0xffff7abe6d30    48  ldr x0, [jssp], #8
0xffff7abe6d34    52  ldr x3, [jssp], #8
0xffff7abe6d38    56  ldr x16, pc+48 (addr 0x0000ffff7abe6d68)    ;; code: BUILTIN
0xffff7abe6d3c    60  br x16
0xffff7abe6d40    64  add jssp, jssp, #0x10 (16)
0xffff7abe6d44    68  mov x1, x3
0xffff7abe6d48    72  ldr x16, pc+40 (addr 0x0000ffff7abe6d70)    ;; code: HANDLER, LoadConstantStub, minor: 16
0xffff7abe6d4c    76  br x16
0xffff7abe6d50    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abe6d54    84  d63f03e0       constant
0xffff7abe6d58    88  5d4cb899       constant
0xffff7abe6d5c    92  00000000       constant
0xffff7abe6d60    96  5d4cbb11       constant
0xffff7abe6d64   100  00000000       constant
0xffff7abe6d68   104  7ab222e0       constant
0xffff7abe6d6c   108  0000ffff       constant
0xffff7abe6d70   112  7abe6380       constant
0xffff7abe6d74   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abe6d10  embedded object  (0x5d4cb899 Cell for 0)
0xffff7abe6d20  embedded object  (0x5d4cbb11 WeakCell for 0x5d440909 <a FastBuffer with map 0x4ec22341>)
0xffff7abe6d38  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abe6d48  code target (HANDLER)  (0xffff7abe6380)
0xffff7abe6d50  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = apply
compiler = unknown
Instructions (size = 120)
0xffff7abe6de0     0  sub csp, jssp, #0x8 (8)
0xffff7abe6de4     4  str x3, [jssp, #-8]!
0xffff7abe6de8     8  sub csp, jssp, #0x8 (8)
0xffff7abe6dec    12  str x0, [jssp, #-8]!
0xffff7abe6df0    16  ldr x0, pc+72 (addr 0x0000ffff7abe6e38)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7abe6df4    20  ldur x0, [x0, #7]
0xffff7abe6df8    24  cmp x0, #0x0 (0)
0xffff7abe6dfc    28  b.ne #+0x14 (addr 0xffff7abe6e10)
0xffff7abe6e00    32  ldr x3, pc+64 (addr 0x0000ffff7abe6e40)    ;; object: 0x5d4cbb49 WeakCell for 0x20d40019 <JS Function (SharedFunctionInfo 0x20d3ff71)>
0xffff7abe6e04    36  ldur x3, [x3, #7]
0xffff7abe6e08    40  tbz w3, #0, #+0x8 (addr 0xffff7abe6e10)
0xffff7abe6e0c    44  b #+0x14 (addr 0xffff7abe6e20)
0xffff7abe6e10    48  ldr x0, [jssp], #8
0xffff7abe6e14    52  ldr x3, [jssp], #8
0xffff7abe6e18    56  ldr x16, pc+48 (addr 0x0000ffff7abe6e48)    ;; code: BUILTIN
0xffff7abe6e1c    60  br x16
0xffff7abe6e20    64  add jssp, jssp, #0x10 (16)
0xffff7abe6e24    68  mov x1, x3
0xffff7abe6e28    72  ldr x16, pc+40 (addr 0x0000ffff7abe6e50)    ;; code: HANDLER, LoadConstantStub, minor: 4
0xffff7abe6e2c    76  br x16
0xffff7abe6e30    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abe6e34    84  d63f03e0       constant
0xffff7abe6e38    88  20d5b0f1       constant
0xffff7abe6e3c    92  00000000       constant
0xffff7abe6e40    96  5d4cbb49       constant
0xffff7abe6e44   100  00000000       constant
0xffff7abe6e48   104  7ab222e0       constant
0xffff7abe6e4c   108  0000ffff       constant
0xffff7abe6e50   112  7ab43480       constant
0xffff7abe6e54   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abe6df0  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7abe6e00  embedded object  (0x5d4cbb49 WeakCell for 0x20d40019 <JS Function (SharedFunctionInfo 0x20d3ff71)>)
0xffff7abe6e18  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abe6e28  code target (HANDLER)  (0xffff7ab43480)
0xffff7abe6e30  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = utf8Slice
compiler = unknown
Instructions (size = 120)
0xffff7abe6ec0     0  sub csp, jssp, #0x8 (8)
0xffff7abe6ec4     4  str x3, [jssp, #-8]!
0xffff7abe6ec8     8  sub csp, jssp, #0x8 (8)
0xffff7abe6ecc    12  str x0, [jssp, #-8]!
0xffff7abe6ed0    16  ldr x0, pc+72 (addr 0x0000ffff7abe6f18)    ;; object: 0x5d4cb899 Cell for 0
0xffff7abe6ed4    20  ldur x0, [x0, #7]
0xffff7abe6ed8    24  cmp x0, #0x0 (0)
0xffff7abe6edc    28  b.ne #+0x14 (addr 0xffff7abe6ef0)
0xffff7abe6ee0    32  ldr x3, pc+64 (addr 0x0000ffff7abe6f20)    ;; object: 0x5d4cbb81 WeakCell for 0x5d440909 <a FastBuffer with map 0x4ec22341>
0xffff7abe6ee4    36  ldur x3, [x3, #7]
0xffff7abe6ee8    40  tbz w3, #0, #+0x8 (addr 0xffff7abe6ef0)
0xffff7abe6eec    44  b #+0x14 (addr 0xffff7abe6f00)
0xffff7abe6ef0    48  ldr x0, [jssp], #8
0xffff7abe6ef4    52  ldr x3, [jssp], #8
0xffff7abe6ef8    56  ldr x16, pc+48 (addr 0x0000ffff7abe6f28)    ;; code: BUILTIN
0xffff7abe6efc    60  br x16
0xffff7abe6f00    64  add jssp, jssp, #0x10 (16)
0xffff7abe6f04    68  mov x1, x3
0xffff7abe6f08    72  ldr x16, pc+40 (addr 0x0000ffff7abe6f30)    ;; code: HANDLER, LoadConstantStub, minor: 6
0xffff7abe6f0c    76  br x16
0xffff7abe6f10    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abe6f14    84  d63f03e0       constant
0xffff7abe6f18    88  5d4cb899       constant
0xffff7abe6f1c    92  00000000       constant
0xffff7abe6f20    96  5d4cbb81       constant
0xffff7abe6f24   100  00000000       constant
0xffff7abe6f28   104  7ab222e0       constant
0xffff7abe6f2c   108  0000ffff       constant
0xffff7abe6f30   112  7ab8b020       constant
0xffff7abe6f34   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abe6ed0  embedded object  (0x5d4cb899 Cell for 0)
0xffff7abe6ee0  embedded object  (0x5d4cbb81 WeakCell for 0x5d440909 <a FastBuffer with map 0x4ec22341>)
0xffff7abe6ef8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abe6f08  code target (HANDLER)  (0xffff7ab8b020)
0xffff7abe6f10  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = _compile
compiler = unknown
Instructions (size = 120)
0xffff7abe6fa0     0  sub csp, jssp, #0x8 (8)
0xffff7abe6fa4     4  str x3, [jssp, #-8]!
0xffff7abe6fa8     8  sub csp, jssp, #0x8 (8)
0xffff7abe6fac    12  str x0, [jssp, #-8]!
0xffff7abe6fb0    16  ldr x0, pc+72 (addr 0x0000ffff7abe6ff8)    ;; object: 0x5d4cb411 Cell for 0
0xffff7abe6fb4    20  ldur x0, [x0, #7]
0xffff7abe6fb8    24  cmp x0, #0x0 (0)
0xffff7abe6fbc    28  b.ne #+0x14 (addr 0xffff7abe6fd0)
0xffff7abe6fc0    32  ldr x3, pc+64 (addr 0x0000ffff7abe7000)    ;; object: 0x5d4cbbb9 WeakCell for 0x56e40601 <an Object with map 0x4ec35009>
0xffff7abe6fc4    36  ldur x3, [x3, #7]
0xffff7abe6fc8    40  tbz w3, #0, #+0x8 (addr 0xffff7abe6fd0)
0xffff7abe6fcc    44  b #+0x14 (addr 0xffff7abe6fe0)
0xffff7abe6fd0    48  ldr x0, [jssp], #8
0xffff7abe6fd4    52  ldr x3, [jssp], #8
0xffff7abe6fd8    56  ldr x16, pc+48 (addr 0x0000ffff7abe7008)    ;; code: BUILTIN
0xffff7abe6fdc    60  br x16
0xffff7abe6fe0    64  add jssp, jssp, #0x10 (16)
0xffff7abe6fe4    68  mov x1, x3
0xffff7abe6fe8    72  ldr x16, pc+40 (addr 0x0000ffff7abe7010)    ;; code: HANDLER, LoadConstantStub, minor: 3
0xffff7abe6fec    76  br x16
0xffff7abe6ff0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abe6ff4    84  d63f03e0       constant
0xffff7abe6ff8    88  5d4cb411       constant
0xffff7abe6ffc    92  00000000       constant
0xffff7abe7000    96  5d4cbbb9       constant
0xffff7abe7004   100  00000000       constant
0xffff7abe7008   104  7ab222e0       constant
0xffff7abe700c   108  0000ffff       constant
0xffff7abe7010   112  7ab43400       constant
0xffff7abe7014   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abe6fb0  embedded object  (0x5d4cb411 Cell for 0)
0xffff7abe6fc0  embedded object  (0x5d4cbbb9 WeakCell for 0x56e40601 <an Object with map 0x4ec35009>)
0xffff7abe6fd8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abe6fe8  code target (HANDLER)  (0xffff7ab43400)
0xffff7abe6ff0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = _debugWaitConnect
compiler = unknown
Instructions (size = 632)
0xffff7abe73c0     0  sub csp, jssp, #0x8 (8)
0xffff7abe73c4     4  str x3, [jssp, #-8]!
0xffff7abe73c8     8  sub csp, jssp, #0x8 (8)
0xffff7abe73cc    12  str x0, [jssp, #-8]!
0xffff7abe73d0    16  ldr x0, pc+544 (addr 0x0000ffff7abe75f0)    ;; object: 0x20de3709 Cell for 0
0xffff7abe73d4    20  ldur x0, [x0, #7]
0xffff7abe73d8    24  cmp x0, #0x0 (0)
0xffff7abe73dc    28  b.ne #+0x1f8 (addr 0xffff7abe75d4)
0xffff7abe73e0    32  ldur x4, [x1, #-1]
0xffff7abe73e4    36  ldrb w0, [x4, #12]
0xffff7abe73e8    40  movz x16, #0x44
0xffff7abe73ec    44  tst x0, x16
0xffff7abe73f0    48  b.ne #+0x1e4 (addr 0xffff7abe75d4)
0xffff7abe73f4    52  ldrb w0, [x4, #11]
0xffff7abe73f8    56  cmp x0, #0xb1 (177)
0xffff7abe73fc    60  b.lt #+0x1d8 (addr 0xffff7abe75d4)
0xffff7abe7400    64  ldur x0, [x1, #7]
0xffff7abe7404    68  ldur x4, [x0, #-1]
0xffff7abe7408    72  ldr x16, [x26, #432]
0xffff7abe740c    76  cmp x4, x16
0xffff7abe7410    80  b.ne #+0x1c4 (addr 0xffff7abe75d4)
0xffff7abe7414    84  ldursw x4, [x0, #35]
0xffff7abe7418    88  sub x4, x4, #0x1 (1)
0xffff7abe741c    92  movz x16, #0x614a
0xffff7abe7420    96  movk x16, #0x92f, lsl #16
0xffff7abe7424   100  and x4, x4, x16
0xffff7abe7428   104  add x4, x4, x4, lsl #1
0xffff7abe742c   108  add x4, x0, x4, lsl #3
0xffff7abe7430   112  ldur x4, [x4, #55]
0xffff7abe7434   116  ldr x16, [x26, #40]
0xffff7abe7438   120  cmp x4, x16
0xffff7abe743c   124  b.eq #+0x188 (addr 0xffff7abe75c4)
0xffff7abe7440   128  ldr x16, pc+440 (addr 0x0000ffff7abe75f8)    ;; object: 0x20dba8a1 <String[17]: _debugWaitConnect>
0xffff7abe7444   132  cmp x4, x16
0xffff7abe7448   136  b.eq #+0x18c (addr 0xffff7abe75d4)
0xffff7abe744c   140  ldr x16, [x26, #88]
0xffff7abe7450   144  cmp x4, x16
0xffff7abe7454   148  b.eq #+0x1c (addr 0xffff7abe7470)
0xffff7abe7458   152  ldur x4, [x4, #-1]
0xffff7abe745c   156  ldrb w4, [x4, #11]
0xffff7abe7460   160  tst x4, #0xc0
0xffff7abe7464   164  movz x16, #0x80
0xffff7abe7468   168  ccmp x4, x16, #nZcv, ne
0xffff7abe746c   172  b.ne #+0x168 (addr 0xffff7abe75d4)
0xffff7abe7470   176  ldursw x4, [x0, #35]
0xffff7abe7474   180  sub x4, x4, #0x1 (1)
0xffff7abe7478   184  movz x16, #0x614b
0xffff7abe747c   188  movk x16, #0x92f, lsl #16
0xffff7abe7480   192  and x4, x4, x16
0xffff7abe7484   196  add x4, x4, x4, lsl #1
0xffff7abe7488   200  add x4, x0, x4, lsl #3
0xffff7abe748c   204  ldur x4, [x4, #55]
0xffff7abe7490   208  ldr x16, [x26, #40]
0xffff7abe7494   212  cmp x4, x16
0xffff7abe7498   216  b.eq #+0x12c (addr 0xffff7abe75c4)
0xffff7abe749c   220  ldr x16, pc+356 (addr 0x0000ffff7abe7600)    ;; object: 0x20dba8a1 <String[17]: _debugWaitConnect>
0xffff7abe74a0   224  cmp x4, x16
0xffff7abe74a4   228  b.eq #+0x130 (addr 0xffff7abe75d4)
0xffff7abe74a8   232  ldr x16, [x26, #88]
0xffff7abe74ac   236  cmp x4, x16
0xffff7abe74b0   240  b.eq #+0x1c (addr 0xffff7abe74cc)
0xffff7abe74b4   244  ldur x4, [x4, #-1]
0xffff7abe74b8   248  ldrb w4, [x4, #11]
0xffff7abe74bc   252  tst x4, #0xc0
0xffff7abe74c0   256  movz x16, #0x80
0xffff7abe74c4   260  ccmp x4, x16, #nZcv, ne
0xffff7abe74c8   264  b.ne #+0x10c (addr 0xffff7abe75d4)
0xffff7abe74cc   268  ldursw x4, [x0, #35]
0xffff7abe74d0   272  sub x4, x4, #0x1 (1)
0xffff7abe74d4   276  movz x16, #0x614d
0xffff7abe74d8   280  movk x16, #0x92f, lsl #16
0xffff7abe74dc   284  and x4, x4, x16
0xffff7abe74e0   288  add x4, x4, x4, lsl #1
0xffff7abe74e4   292  add x4, x0, x4, lsl #3
0xffff7abe74e8   296  ldur x4, [x4, #55]
0xffff7abe74ec   300  ldr x16, [x26, #40]
0xffff7abe74f0   304  cmp x4, x16
0xffff7abe74f4   308  b.eq #+0xd0 (addr 0xffff7abe75c4)
0xffff7abe74f8   312  ldr x16, pc+272 (addr 0x0000ffff7abe7608)    ;; object: 0x20dba8a1 <String[17]: _debugWaitConnect>
0xffff7abe74fc   316  cmp x4, x16
0xffff7abe7500   320  b.eq #+0xd4 (addr 0xffff7abe75d4)
0xffff7abe7504   324  ldr x16, [x26, #88]
0xffff7abe7508   328  cmp x4, x16
0xffff7abe750c   332  b.eq #+0x1c (addr 0xffff7abe7528)
0xffff7abe7510   336  ldur x4, [x4, #-1]
0xffff7abe7514   340  ldrb w4, [x4, #11]
0xffff7abe7518   344  tst x4, #0xc0
0xffff7abe751c   348  movz x16, #0x80
0xffff7abe7520   352  ccmp x4, x16, #nZcv, ne
0xffff7abe7524   356  b.ne #+0xb0 (addr 0xffff7abe75d4)
0xffff7abe7528   360  ldursw x4, [x0, #35]
0xffff7abe752c   364  sub x4, x4, #0x1 (1)
0xffff7abe7530   368  movz x16, #0x6150
0xffff7abe7534   372  movk x16, #0x92f, lsl #16
0xffff7abe7538   376  and x4, x4, x16
0xffff7abe753c   380  add x4, x4, x4, lsl #1
0xffff7abe7540   384  add x4, x0, x4, lsl #3
0xffff7abe7544   388  ldur x4, [x4, #55]
0xffff7abe7548   392  ldr x16, [x26, #40]
0xffff7abe754c   396  cmp x4, x16
0xffff7abe7550   400  b.eq #+0x74 (addr 0xffff7abe75c4)
0xffff7abe7554   404  ldr x16, pc+188 (addr 0x0000ffff7abe7610)    ;; object: 0x20dba8a1 <String[17]: _debugWaitConnect>
0xffff7abe7558   408  cmp x4, x16
0xffff7abe755c   412  b.eq #+0x78 (addr 0xffff7abe75d4)
0xffff7abe7560   416  ldr x16, [x26, #88]
0xffff7abe7564   420  cmp x4, x16
0xffff7abe7568   424  b.eq #+0x1c (addr 0xffff7abe7584)
0xffff7abe756c   428  ldur x4, [x4, #-1]
0xffff7abe7570   432  ldrb w4, [x4, #11]
0xffff7abe7574   436  tst x4, #0xc0
0xffff7abe7578   440  movz x16, #0x80
0xffff7abe757c   444  ccmp x4, x16, #nZcv, ne
0xffff7abe7580   448  b.ne #+0x54 (addr 0xffff7abe75d4)
0xffff7abe7584   452  sub csp, jssp, #0x38 (56)
0xffff7abe7588   456  stp x3, x5, [jssp, #-32]!
0xffff7abe758c   460  stp x6, lr, [jssp, #16]
0xffff7abe7590   464  stp x0, x1, [jssp, #-24]!
0xffff7abe7594   468  str x2, [jssp, #16]
0xffff7abe7598   472  ldur x0, [x1, #7]
0xffff7abe759c   476  ldr x1, pc+124 (addr 0x0000ffff7abe7618)    ;; object: 0x20dba8a1 <String[17]: _debugWaitConnect>
0xffff7abe75a0   480  ldr x16, pc+128 (addr 0x0000ffff7abe7620)    ;; code: STUB, NameDictionaryLookupStub, minor: 1
0xffff7abe75a4   484  blr x16
0xffff7abe75a8   488  mov x4, x0
0xffff7abe75ac   492  ldp x2, x3, [jssp, #16]
0xffff7abe75b0   496  ldp x0, x1, [jssp], #32
0xffff7abe75b4   500  ldr lr, [jssp, #16]
0xffff7abe75b8   504  ldp x5, x6, [jssp], #24
0xffff7abe75bc   508  cbz x4, #+0x8 (addr 0xffff7abe75c4)
0xffff7abe75c0   512  b #+0x14 (addr 0xffff7abe75d4)
0xffff7abe75c4   516  add jssp, jssp, #0x10 (16)
0xffff7abe75c8   520  ldr x0, pc+96 (addr 0x0000ffff7abe7628)    ;; object: 0x20d04241 <undefined>
0xffff7abe75cc   524  ret
0xffff7abe75d0   528  b #+0x14 (addr 0xffff7abe75e4)
0xffff7abe75d4   532  ldr x0, [jssp], #8
0xffff7abe75d8   536  ldr x3, [jssp], #8
0xffff7abe75dc   540  ldr x16, pc+84 (addr 0x0000ffff7abe7630)    ;; code: BUILTIN
0xffff7abe75e0   544  br x16
0xffff7abe75e4   548  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0xffff7abe75e8   552  d63f03e0       constant
0xffff7abe75ec   556  d503201f       constant
0xffff7abe75f0   560  20de3709       constant
0xffff7abe75f4   564  00000000       constant
0xffff7abe75f8   568  20dba8a1       constant
0xffff7abe75fc   572  00000000       constant
0xffff7abe7600   576  20dba8a1       constant
0xffff7abe7604   580  00000000       constant
0xffff7abe7608   584  20dba8a1       constant
0xffff7abe760c   588  00000000       constant
0xffff7abe7610   592  20dba8a1       constant
0xffff7abe7614   596  00000000       constant
0xffff7abe7618   600  20dba8a1       constant
0xffff7abe761c   604  00000000       constant
0xffff7abe7620   608  7ab8b120       constant
0xffff7abe7624   612  0000ffff       constant
0xffff7abe7628   616  20d04241       constant
0xffff7abe762c   620  00000000       constant
0xffff7abe7630   624  7ab222e0       constant
0xffff7abe7634   628  0000ffff       constant


RelocInfo (size = 25)
0xffff7abe73d0  embedded object  (0x20de3709 Cell for 0)
0xffff7abe7440  embedded object  (0x20dba8a1 <String[17]: _debugWaitConnect>)
0xffff7abe749c  embedded object  (0x20dba8a1 <String[17]: _debugWaitConnect>)
0xffff7abe74f8  embedded object  (0x20dba8a1 <String[17]: _debugWaitConnect>)
0xffff7abe7554  embedded object  (0x20dba8a1 <String[17]: _debugWaitConnect>)
0xffff7abe759c  embedded object  (0x20dba8a1 <String[17]: _debugWaitConnect>)
0xffff7abe75a0  code target (STUB)  (0xffff7ab8b120)
0xffff7abe75c8  embedded object  (0x20d04241 <undefined>)
0xffff7abe75dc  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abe75e4  constant pool (size 84)

kind = HANDLER
major_key = <NoCache>Stub
name = constructor
compiler = unknown
Instructions (size = 120)
0xffff7abe76a0     0  sub csp, jssp, #0x8 (8)
0xffff7abe76a4     4  str x3, [jssp, #-8]!
0xffff7abe76a8     8  sub csp, jssp, #0x8 (8)
0xffff7abe76ac    12  str x0, [jssp, #-8]!
0xffff7abe76b0    16  ldr x0, pc+72 (addr 0x0000ffff7abe76f8)    ;; object: 0x5d4cb411 Cell for 0
0xffff7abe76b4    20  ldur x0, [x0, #7]
0xffff7abe76b8    24  cmp x0, #0x0 (0)
0xffff7abe76bc    28  b.ne #+0x14 (addr 0xffff7abe76d0)
0xffff7abe76c0    32  ldr x3, pc+64 (addr 0x0000ffff7abe7700)    ;; object: 0x5d4cc239 WeakCell for 0x56e40601 <an Object with map 0x4ec35009>
0xffff7abe76c4    36  ldur x3, [x3, #7]
0xffff7abe76c8    40  tbz w3, #0, #+0x8 (addr 0xffff7abe76d0)
0xffff7abe76cc    44  b #+0x14 (addr 0xffff7abe76e0)
0xffff7abe76d0    48  ldr x0, [jssp], #8
0xffff7abe76d4    52  ldr x3, [jssp], #8
0xffff7abe76d8    56  ldr x16, pc+48 (addr 0x0000ffff7abe7708)    ;; code: BUILTIN
0xffff7abe76dc    60  br x16
0xffff7abe76e0    64  add jssp, jssp, #0x10 (16)
0xffff7abe76e4    68  mov x1, x3
0xffff7abe76e8    72  ldr x16, pc+40 (addr 0x0000ffff7abe7710)    ;; code: HANDLER, LoadConstantStub, minor: 0
0xffff7abe76ec    76  br x16
0xffff7abe76f0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abe76f4    84  d63f03e0       constant
0xffff7abe76f8    88  5d4cb411       constant
0xffff7abe76fc    92  00000000       constant
0xffff7abe7700    96  5d4cc239       constant
0xffff7abe7704   100  00000000       constant
0xffff7abe7708   104  7ab222e0       constant
0xffff7abe770c   108  0000ffff       constant
0xffff7abe7710   112  7ab431a0       constant
0xffff7abe7714   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abe76b0  embedded object  (0x5d4cb411 Cell for 0)
0xffff7abe76c0  embedded object  (0x5d4cc239 WeakCell for 0x56e40601 <an Object with map 0x4ec35009>)
0xffff7abe76d8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abe76e8  code target (HANDLER)  (0xffff7ab431a0)
0xffff7abe76f0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = resolve
compiler = unknown
Instructions (size = 152)
0xffff7abe7780     0  sub csp, jssp, #0x8 (8)
0xffff7abe7784     4  str x3, [jssp, #-8]!
0xffff7abe7788     8  sub csp, jssp, #0x8 (8)
0xffff7abe778c    12  str x4, [jssp, #-8]!
0xffff7abe7790    16  ldr x3, pc+88 (addr 0x0000ffff7abe77e8)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7abe7794    20  ldur x3, [x3, #7]
0xffff7abe7798    24  cmp x3, #0x0 (0)
0xffff7abe779c    28  b.ne #+0x30 (addr 0xffff7abe77cc)
0xffff7abe77a0    32  tbz w0, #0, #+0x2c (addr 0xffff7abe77cc)
0xffff7abe77a4    36  ldr x5, pc+76 (addr 0x0000ffff7abe77f0)    ;; object: 0x5d4cc271 WeakCell for 0x4ec368c9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abe77a8    40  ldur x5, [x5, #7]
0xffff7abe77ac    44  tbz w5, #0, #+0x20 (addr 0xffff7abe77cc)
0xffff7abe77b0    48  ldursw x4, [x5, #15]
0xffff7abe77b4    52  tbnz w4, #23, #+0x18 (addr 0xffff7abe77cc)
0xffff7abe77b8    56  ldr x4, [jssp], #8
0xffff7abe77bc    60  ldr x3, [jssp], #8
0xffff7abe77c0    64  ldr x2, pc+56 (addr 0x0000ffff7abe77f8)    ;; object: 0x20d8fcd9 <String[7]: resolve>
0xffff7abe77c4    68  ldr x16, pc+60 (addr 0x0000ffff7abe7800)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0xffff7abe77c8    72  br x16
0xffff7abe77cc    76  ldr x2, pc+60 (addr 0x0000ffff7abe7808)    ;; object: 0x20d8fcd9 <String[7]: resolve>
0xffff7abe77d0    80  ldr x4, [jssp], #8
0xffff7abe77d4    84  ldr x3, [jssp], #8
0xffff7abe77d8    88  ldr x16, pc+56 (addr 0x0000ffff7abe7810)    ;; code: BUILTIN
0xffff7abe77dc    92  br x16
0xffff7abe77e0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abe77e4   100  d63f03e0       constant
0xffff7abe77e8   104  20d5b0f1       constant
0xffff7abe77ec   108  00000000       constant
0xffff7abe77f0   112  5d4cc271       constant
0xffff7abe77f4   116  00000000       constant
0xffff7abe77f8   120  20d8fcd9       constant
0xffff7abe77fc   124  00000000       constant
0xffff7abe7800   128  7ab38860       constant
0xffff7abe7804   132  0000ffff       constant
0xffff7abe7808   136  20d8fcd9       constant
0xffff7abe780c   140  00000000       constant
0xffff7abe7810   144  7ab22420       constant
0xffff7abe7814   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abe7790  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7abe77a4  embedded object  (0x5d4cc271 WeakCell for 0x4ec368c9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abe77c0  embedded object  (0x20d8fcd9 <String[7]: resolve>)
0xffff7abe77c4  code target (HANDLER)  (0xffff7ab38860)
0xffff7abe77cc  embedded object  (0x20d8fcd9 <String[7]: resolve>)
0xffff7abe77d8  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abe77e0  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = main
compiler = unknown
Instructions (size = 184)
0xffff7abe7880     0  sub csp, jssp, #0x8 (8)
0xffff7abe7884     4  str x3, [jssp, #-8]!
0xffff7abe7888     8  sub csp, jssp, #0x8 (8)
0xffff7abe788c    12  str x4, [jssp, #-8]!
0xffff7abe7890    16  ldr x3, pc+112 (addr 0x0000ffff7abe7900)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7abe7894    20  ldur x3, [x3, #7]
0xffff7abe7898    24  cmp x3, #0x0 (0)
0xffff7abe789c    28  b.ne #+0x44 (addr 0xffff7abe78e0)
0xffff7abe78a0    32  tbz w0, #0, #+0x40 (addr 0xffff7abe78e0)
0xffff7abe78a4    36  ldur x3, [x0, #-1]
0xffff7abe78a8    40  ldr x4, pc+96 (addr 0x0000ffff7abe7908)    ;; object: 0x5d4c5369 WeakCell for 0x4ec36559 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abe78ac    44  ldur x4, [x4, #7]
0xffff7abe78b0    48  cmp x3, x4
0xffff7abe78b4    52  b.ne #+0x2c (addr 0xffff7abe78e0)
0xffff7abe78b8    56  ldr x5, pc+88 (addr 0x0000ffff7abe7910)    ;; object: 0x5d4cc2a9 WeakCell for 0x4ec36921 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abe78bc    60  ldur x5, [x5, #7]
0xffff7abe78c0    64  tbz w5, #0, #+0x20 (addr 0xffff7abe78e0)
0xffff7abe78c4    68  ldursw x4, [x5, #15]
0xffff7abe78c8    72  tbnz w4, #23, #+0x18 (addr 0xffff7abe78e0)
0xffff7abe78cc    76  ldr x4, [jssp], #8
0xffff7abe78d0    80  ldr x3, [jssp], #8
0xffff7abe78d4    84  ldr x2, pc+68 (addr 0x0000ffff7abe7918)    ;; object: 0x5d407b89 <String[4]: main>
0xffff7abe78d8    88  ldr x16, pc+72 (addr 0x0000ffff7abe7920)    ;; code: HANDLER, StoreTransitionStub, minor: 196611
0xffff7abe78dc    92  br x16
0xffff7abe78e0    96  ldr x2, pc+72 (addr 0x0000ffff7abe7928)    ;; object: 0x5d407b89 <String[4]: main>
0xffff7abe78e4   100  ldr x4, [jssp], #8
0xffff7abe78e8   104  ldr x3, [jssp], #8
0xffff7abe78ec   108  ldr x16, pc+68 (addr 0x0000ffff7abe7930)    ;; code: BUILTIN
0xffff7abe78f0   112  br x16
0xffff7abe78f4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abe78f8   120  d63f03e0       constant
0xffff7abe78fc   124  d503201f       constant
0xffff7abe7900   128  20d5b0f1       constant
0xffff7abe7904   132  00000000       constant
0xffff7abe7908   136  5d4c5369       constant
0xffff7abe790c   140  00000000       constant
0xffff7abe7910   144  5d4cc2a9       constant
0xffff7abe7914   148  00000000       constant
0xffff7abe7918   152  5d407b89       constant
0xffff7abe791c   156  00000000       constant
0xffff7abe7920   160  7ab99940       constant
0xffff7abe7924   164  0000ffff       constant
0xffff7abe7928   168  5d407b89       constant
0xffff7abe792c   172  00000000       constant
0xffff7abe7930   176  7ab22420       constant
0xffff7abe7934   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abe7890  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7abe78a8  embedded object  (0x5d4c5369 WeakCell for 0x4ec36559 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abe78b8  embedded object  (0x5d4cc2a9 WeakCell for 0x4ec36921 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abe78d4  embedded object  (0x5d407b89 <String[4]: main>)
0xffff7abe78d8  code target (HANDLER)  (0xffff7ab99940)
0xffff7abe78e0  embedded object  (0x5d407b89 <String[4]: main>)
0xffff7abe78ec  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abe78f4  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = extensions
compiler = unknown
Instructions (size = 184)
0xffff7abe79a0     0  sub csp, jssp, #0x8 (8)
0xffff7abe79a4     4  str x3, [jssp, #-8]!
0xffff7abe79a8     8  sub csp, jssp, #0x8 (8)
0xffff7abe79ac    12  str x4, [jssp, #-8]!
0xffff7abe79b0    16  ldr x3, pc+112 (addr 0x0000ffff7abe7a20)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7abe79b4    20  ldur x3, [x3, #7]
0xffff7abe79b8    24  cmp x3, #0x0 (0)
0xffff7abe79bc    28  b.ne #+0x44 (addr 0xffff7abe7a00)
0xffff7abe79c0    32  tbz w0, #0, #+0x40 (addr 0xffff7abe7a00)
0xffff7abe79c4    36  ldur x3, [x0, #-1]
0xffff7abe79c8    40  ldr x4, pc+96 (addr 0x0000ffff7abe7a28)    ;; object: 0x5d42e741 WeakCell for 0x4ec35111 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abe79cc    44  ldur x4, [x4, #7]
0xffff7abe79d0    48  cmp x3, x4
0xffff7abe79d4    52  b.ne #+0x2c (addr 0xffff7abe7a00)
0xffff7abe79d8    56  ldr x5, pc+88 (addr 0x0000ffff7abe7a30)    ;; object: 0x5d4cc2e1 WeakCell for 0x4ec36979 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abe79dc    60  ldur x5, [x5, #7]
0xffff7abe79e0    64  tbz w5, #0, #+0x20 (addr 0xffff7abe7a00)
0xffff7abe79e4    68  ldursw x4, [x5, #15]
0xffff7abe79e8    72  tbnz w4, #23, #+0x18 (addr 0xffff7abe7a00)
0xffff7abe79ec    76  ldr x4, [jssp], #8
0xffff7abe79f0    80  ldr x3, [jssp], #8
0xffff7abe79f4    84  ldr x2, pc+68 (addr 0x0000ffff7abe7a38)    ;; object: 0x5d40a9e9 <String[10]: extensions>
0xffff7abe79f8    88  ldr x16, pc+72 (addr 0x0000ffff7abe7a40)    ;; code: HANDLER, StoreTransitionStub, minor: 196612
0xffff7abe79fc    92  br x16
0xffff7abe7a00    96  ldr x2, pc+72 (addr 0x0000ffff7abe7a48)    ;; object: 0x5d40a9e9 <String[10]: extensions>
0xffff7abe7a04   100  ldr x4, [jssp], #8
0xffff7abe7a08   104  ldr x3, [jssp], #8
0xffff7abe7a0c   108  ldr x16, pc+68 (addr 0x0000ffff7abe7a50)    ;; code: BUILTIN
0xffff7abe7a10   112  br x16
0xffff7abe7a14   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abe7a18   120  d63f03e0       constant
0xffff7abe7a1c   124  d503201f       constant
0xffff7abe7a20   128  20d5b0f1       constant
0xffff7abe7a24   132  00000000       constant
0xffff7abe7a28   136  5d42e741       constant
0xffff7abe7a2c   140  00000000       constant
0xffff7abe7a30   144  5d4cc2e1       constant
0xffff7abe7a34   148  00000000       constant
0xffff7abe7a38   152  5d40a9e9       constant
0xffff7abe7a3c   156  00000000       constant
0xffff7abe7a40   160  7ab9a100       constant
0xffff7abe7a44   164  0000ffff       constant
0xffff7abe7a48   168  5d40a9e9       constant
0xffff7abe7a4c   172  00000000       constant
0xffff7abe7a50   176  7ab22420       constant
0xffff7abe7a54   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abe79b0  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7abe79c8  embedded object  (0x5d42e741 WeakCell for 0x4ec35111 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abe79d8  embedded object  (0x5d4cc2e1 WeakCell for 0x4ec36979 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abe79f4  embedded object  (0x5d40a9e9 <String[10]: extensions>)
0xffff7abe79f8  code target (HANDLER)  (0xffff7ab9a100)
0xffff7abe7a00  embedded object  (0x5d40a9e9 <String[10]: extensions>)
0xffff7abe7a0c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abe7a14  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = cache
compiler = unknown
Instructions (size = 184)
0xffff7abe7ac0     0  sub csp, jssp, #0x8 (8)
0xffff7abe7ac4     4  str x3, [jssp, #-8]!
0xffff7abe7ac8     8  sub csp, jssp, #0x8 (8)
0xffff7abe7acc    12  str x4, [jssp, #-8]!
0xffff7abe7ad0    16  ldr x3, pc+112 (addr 0x0000ffff7abe7b40)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7abe7ad4    20  ldur x3, [x3, #7]
0xffff7abe7ad8    24  cmp x3, #0x0 (0)
0xffff7abe7adc    28  b.ne #+0x44 (addr 0xffff7abe7b20)
0xffff7abe7ae0    32  tbz w0, #0, #+0x40 (addr 0xffff7abe7b20)
0xffff7abe7ae4    36  ldur x3, [x0, #-1]
0xffff7abe7ae8    40  ldr x4, pc+96 (addr 0x0000ffff7abe7b48)    ;; object: 0x5d4cb5c9 WeakCell for 0x4ec36871 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abe7aec    44  ldur x4, [x4, #7]
0xffff7abe7af0    48  cmp x3, x4
0xffff7abe7af4    52  b.ne #+0x2c (addr 0xffff7abe7b20)
0xffff7abe7af8    56  ldr x5, pc+88 (addr 0x0000ffff7abe7b50)    ;; object: 0x5d4cc319 WeakCell for 0x4ec369d1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abe7afc    60  ldur x5, [x5, #7]
0xffff7abe7b00    64  tbz w5, #0, #+0x20 (addr 0xffff7abe7b20)
0xffff7abe7b04    68  ldursw x4, [x5, #15]
0xffff7abe7b08    72  tbnz w4, #23, #+0x18 (addr 0xffff7abe7b20)
0xffff7abe7b0c    76  ldr x4, [jssp], #8
0xffff7abe7b10    80  ldr x3, [jssp], #8
0xffff7abe7b14    84  ldr x2, pc+68 (addr 0x0000ffff7abe7b58)    ;; object: 0x20dbab51 <String[5]: cache>
0xffff7abe7b18    88  ldr x16, pc+72 (addr 0x0000ffff7abe7b60)    ;; code: HANDLER, StoreTransitionStub, minor: 327685
0xffff7abe7b1c    92  br x16
0xffff7abe7b20    96  ldr x2, pc+72 (addr 0x0000ffff7abe7b68)    ;; object: 0x20dbab51 <String[5]: cache>
0xffff7abe7b24   100  ldr x4, [jssp], #8
0xffff7abe7b28   104  ldr x3, [jssp], #8
0xffff7abe7b2c   108  ldr x16, pc+68 (addr 0x0000ffff7abe7b70)    ;; code: BUILTIN
0xffff7abe7b30   112  br x16
0xffff7abe7b34   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abe7b38   120  d63f03e0       constant
0xffff7abe7b3c   124  d503201f       constant
0xffff7abe7b40   128  20d5b0f1       constant
0xffff7abe7b44   132  00000000       constant
0xffff7abe7b48   136  5d4cb5c9       constant
0xffff7abe7b4c   140  00000000       constant
0xffff7abe7b50   144  5d4cc319       constant
0xffff7abe7b54   148  00000000       constant
0xffff7abe7b58   152  20dbab51       constant
0xffff7abe7b5c   156  00000000       constant
0xffff7abe7b60   160  7ab9d3c0       constant
0xffff7abe7b64   164  0000ffff       constant
0xffff7abe7b68   168  20dbab51       constant
0xffff7abe7b6c   172  00000000       constant
0xffff7abe7b70   176  7ab22420       constant
0xffff7abe7b74   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abe7ad0  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7abe7ae8  embedded object  (0x5d4cb5c9 WeakCell for 0x4ec36871 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abe7af8  embedded object  (0x5d4cc319 WeakCell for 0x4ec369d1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abe7b14  embedded object  (0x20dbab51 <String[5]: cache>)
0xffff7abe7b18  code target (HANDLER)  (0xffff7ab9d3c0)
0xffff7abe7b20  embedded object  (0x20dbab51 <String[5]: cache>)
0xffff7abe7b2c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abe7b34  constant pool (size 68)

--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastCloneShallowObjectStub
compiler = crankshaft
Instructions (size = 469)
0xffff7abe8ec0     0  ldur x4, [x3, #47]
0xffff7abe8ec4     4  tbnz w2, #0, #+0x98 (addr 0xffff7abe8f5c)
0xffff7abe8ec8     8  asr x6, x2, #32
0xffff7abe8ecc    12  add x5, x4, #0x17 (23)
0xffff7abe8ed0    16  ldr x7, [x5, w6, sxtw #3]
0xffff7abe8ed4    20  ldr x4, pc+316 (addr 0x0000ffff7abe9010)    ;; object: 0x20d04241 <undefined>
0xffff7abe8ed8    24  cmp x7, x4
0xffff7abe8edc    28  b.eq #+0x7c (addr 0xffff7abe8f58)
0xffff7abe8ee0    32  ldur x4, [x7, #7]
0xffff7abe8ee4    36  ldur x5, [x4, #-1]
0xffff7abe8ee8    40  ldrb w6, [x5, #7]
0xffff7abe8eec    44  cmp w6, #0x4 (4)
0xffff7abe8ef0    48  b.ne #+0x68 (addr 0xffff7abe8f58)
0xffff7abe8ef4    52  movz x1, #0xe2c0
0xffff7abe8ef8    56  movk x1, #0x9ab, lsl #16
0xffff7abe8efc    60  ldp x2, x0, [x1]
0xffff7abe8f00    64  adds x16, x2, #0x30 (48)
0xffff7abe8f04    68  ccmp x16, x0, #nzCv, lo
0xffff7abe8f08    72  b.hi #+0x9c (addr 0xffff7abe8fa4)
0xffff7abe8f0c    76  str x16, [x1]
0xffff7abe8f10    80  orr x2, x2, #0x1
0xffff7abe8f14    84  stur x5, [x2, #-1]
0xffff7abe8f18    88  ldur x0, [x4, #7]
0xffff7abe8f1c    92  stur x0, [x2, #7]
0xffff7abe8f20    96  ldur x0, [x4, #15]
0xffff7abe8f24   100  stur x0, [x2, #15]
0xffff7abe8f28   104  ldur x0, [x4, #23]
0xffff7abe8f2c   108  stur x0, [x2, #23]
0xffff7abe8f30   112  add x0, x2, #0x20 (32)
0xffff7abe8f34   116  ldr x1, pc+228 (addr 0x0000ffff7abe9018)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abe8f38   120  stur x1, [x0, #-1]
0xffff7abe8f3c   124  stur x7, [x0, #7]
0xffff7abe8f40   128  ldur w0, [x7, #35]
0xffff7abe8f44   132  add w0, w0, #0x1 (1)
0xffff7abe8f48   136  lsl x0, x0, #32
0xffff7abe8f4c   140  stur x0, [x7, #31]
0xffff7abe8f50   144  mov x0, x2
0xffff7abe8f54   148  ret
0xffff7abe8f58   152  b #+0xe0 (addr 0xffff7abe9038)
0xffff7abe8f5c   156  sub csp, jssp, #0x10 (16)
0xffff7abe8f60   160  stp fp, lr, [jssp, #-16]!
0xffff7abe8f64   164  movz fp, #0xa00000000
0xffff7abe8f68   168  sub csp, jssp, #0x8 (8)
0xffff7abe8f6c   172  str fp, [jssp, #-8]!
0xffff7abe8f70   176  add fp, jssp, #0x8 (8)
0xffff7abe8f74   180  ldur x16, [x2, #-1]
0xffff7abe8f78   184  ldr x17, [x26, #120]
0xffff7abe8f7c   188  cmp x16, x17
0xffff7abe8f80   192  b.ne #+0xc8 (addr 0xffff7abe9048)
0xffff7abe8f84   196  ldur d29, [x2, #7]
0xffff7abe8f88   200  fcvtzs w6, d29
0xffff7abe8f8c   204  scvtf d0, w6
0xffff7abe8f90   208  fcmp d29, d0
0xffff7abe8f94   212  b.ne #+0xb4 (addr 0xffff7abe9048)
0xffff7abe8f98   216  ldr lr, [jssp, #16]
0xffff7abe8f9c   220  ldp xzr, fp, [jssp], #24
0xffff7abe8fa0   224  b #-0xd4 (addr 0xffff7abe8ecc)
0xffff7abe8fa4   228  sub csp, jssp, #0x10 (16)
0xffff7abe8fa8   232  stp fp, lr, [jssp, #-16]!
0xffff7abe8fac   236  movz fp, #0xa00000000
0xffff7abe8fb0   240  sub csp, jssp, #0x8 (8)
0xffff7abe8fb4   244  str fp, [jssp, #-8]!
0xffff7abe8fb8   248  add fp, jssp, #0x8 (8)
0xffff7abe8fbc   252  movz x2, #0x0
0xffff7abe8fc0   256  mov x16, lr
0xffff7abe8fc4   260  ldr x17, pc+92 (addr 0x0000ffff7abe9020)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abe8fc8   264  blr x17
0xffff7abe8fcc   268  movz x0, #0x3000000000
0xffff7abe8fd0   272  movz x10, #0x0
0xffff7abe8fd4   276  sub csp, jssp, #0x10 (16)
0xffff7abe8fd8   280  stp x10, x0, [jssp, #-16]!
0xffff7abe8fdc   284  movz x0, #0x2
0xffff7abe8fe0   288  movz x1, #0x5b88
0xffff7abe8fe4   292  movk x1, #0xe2, lsl #16
0xffff7abe8fe8   296  ldr x16, pc+64 (addr 0x0000ffff7abe9028)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abe8fec   300  blr x16
0xffff7abe8ff0   304  str x0, [jssp, #16]
0xffff7abe8ff4   308  ldr x16, pc+60 (addr 0x0000ffff7abe9030)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abe8ff8   312  blr x16
0xffff7abe8ffc   316  ldr lr, [jssp, #16]
0xffff7abe9000   320  ldp xzr, fp, [jssp], #24
0xffff7abe9004   324  b #-0xf0 (addr 0xffff7abe8f14)
0xffff7abe9008   328  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0xffff7abe900c   332  d63f03e0       constant
0xffff7abe9010   336  20d04241       constant
0xffff7abe9014   340  00000000       constant
0xffff7abe9018   344  4ec05d81       constant
0xffff7abe901c   348  00000000       constant
0xffff7abe9020   352  7ab06820       constant
0xffff7abe9024   356  0000ffff       constant
0xffff7abe9028   360  7ab06260       constant
0xffff7abe902c   364  0000ffff       constant
0xffff7abe9030   368  7ab068e0       constant
0xffff7abe9034   372  0000ffff       constant
0xffff7abe9038   376  movz x16, #0x0
0xffff7abe903c   380  sub csp, jssp, #0x10 (16)
0xffff7abe9040   384  stp fp, lr, [jssp, #-16]!
0xffff7abe9044   388  bl #+0xc (addr 0xffff7abe9050)
0xffff7abe9048   392  movz x16, #0x8
0xffff7abe904c   396  bl #+0x14 (addr 0xffff7abe9060)
0xffff7abe9050   400  movz x17, #0xa00000000
0xffff7abe9054   404  sub csp, jssp, #0x10 (16)
0xffff7abe9058   408  stp x17, cp, [jssp, #-16]!
0xffff7abe905c   412  add fp, jssp, #0x10 (16)
0xffff7abe9060   416  ldr x17, pc+24 (addr 0x0000ffff7abe9078)    ;; lazy deoptimization bailout 0
0xffff7abe9064   420  add x17, x17, x16
0xffff7abe9068   424  br x17
0xffff7abe906c   428  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abe9070   432  d63f03e0       constant
0xffff7abe9074   436  d503201f       constant
0xffff7abe9078   440  7a906000       constant
0xffff7abe907c   444  0000ffff       constant


Safepoints (size = 21)
0xffff7abe8ff0   304  000 | x2 | x4 | x5 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 25)
0xffff7abe8ed4  embedded object  (0x20d04241 <undefined>)
0xffff7abe8f34  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abe8fc4  code target (STUB)  (0xffff7ab06820)
0xffff7abe8fe8  code target (STUB)  (0xffff7ab06260)
0xffff7abe8ff4  code target (STUB)  (0xffff7ab068e0)
0xffff7abe9008  constant pool (size 48)
0xffff7abe9060  runtime entry
0xffff7abe906c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = FastCloneShallowObjectStub
name = FastCloneShallowObjectStub
compiler = crankshaft
Instructions (size = 469)
0xffff7abe8ec0     0  ldur x4, [x3, #47]
0xffff7abe8ec4     4  tbnz w2, #0, #+0x98 (addr 0xffff7abe8f5c)
0xffff7abe8ec8     8  asr x6, x2, #32
0xffff7abe8ecc    12  add x5, x4, #0x17 (23)
0xffff7abe8ed0    16  ldr x7, [x5, w6, sxtw #3]
0xffff7abe8ed4    20  ldr x4, pc+316 (addr 0x0000ffff7abe9010)    ;; object: 0x20d04241 <undefined>
0xffff7abe8ed8    24  cmp x7, x4
0xffff7abe8edc    28  b.eq #+0x7c (addr 0xffff7abe8f58)
0xffff7abe8ee0    32  ldur x4, [x7, #7]
0xffff7abe8ee4    36  ldur x5, [x4, #-1]
0xffff7abe8ee8    40  ldrb w6, [x5, #7]
0xffff7abe8eec    44  cmp w6, #0x4 (4)
0xffff7abe8ef0    48  b.ne #+0x68 (addr 0xffff7abe8f58)
0xffff7abe8ef4    52  movz x1, #0xe2c0
0xffff7abe8ef8    56  movk x1, #0x9ab, lsl #16
0xffff7abe8efc    60  ldp x2, x0, [x1]
0xffff7abe8f00    64  adds x16, x2, #0x30 (48)
0xffff7abe8f04    68  ccmp x16, x0, #nzCv, lo
0xffff7abe8f08    72  b.hi #+0x9c (addr 0xffff7abe8fa4)
0xffff7abe8f0c    76  str x16, [x1]
0xffff7abe8f10    80  orr x2, x2, #0x1
0xffff7abe8f14    84  stur x5, [x2, #-1]
0xffff7abe8f18    88  ldur x0, [x4, #7]
0xffff7abe8f1c    92  stur x0, [x2, #7]
0xffff7abe8f20    96  ldur x0, [x4, #15]
0xffff7abe8f24   100  stur x0, [x2, #15]
0xffff7abe8f28   104  ldur x0, [x4, #23]
0xffff7abe8f2c   108  stur x0, [x2, #23]
0xffff7abe8f30   112  add x0, x2, #0x20 (32)
0xffff7abe8f34   116  ldr x1, pc+228 (addr 0x0000ffff7abe9018)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abe8f38   120  stur x1, [x0, #-1]
0xffff7abe8f3c   124  stur x7, [x0, #7]
0xffff7abe8f40   128  ldur w0, [x7, #35]
0xffff7abe8f44   132  add w0, w0, #0x1 (1)
0xffff7abe8f48   136  lsl x0, x0, #32
0xffff7abe8f4c   140  stur x0, [x7, #31]
0xffff7abe8f50   144  mov x0, x2
0xffff7abe8f54   148  ret
0xffff7abe8f58   152  b #+0xe0 (addr 0xffff7abe9038)
0xffff7abe8f5c   156  sub csp, jssp, #0x10 (16)
0xffff7abe8f60   160  stp fp, lr, [jssp, #-16]!
0xffff7abe8f64   164  movz fp, #0xa00000000
0xffff7abe8f68   168  sub csp, jssp, #0x8 (8)
0xffff7abe8f6c   172  str fp, [jssp, #-8]!
0xffff7abe8f70   176  add fp, jssp, #0x8 (8)
0xffff7abe8f74   180  ldur x16, [x2, #-1]
0xffff7abe8f78   184  ldr x17, [x26, #120]
0xffff7abe8f7c   188  cmp x16, x17
0xffff7abe8f80   192  b.ne #+0xc8 (addr 0xffff7abe9048)
0xffff7abe8f84   196  ldur d29, [x2, #7]
0xffff7abe8f88   200  fcvtzs w6, d29
0xffff7abe8f8c   204  scvtf d0, w6
0xffff7abe8f90   208  fcmp d29, d0
0xffff7abe8f94   212  b.ne #+0xb4 (addr 0xffff7abe9048)
0xffff7abe8f98   216  ldr lr, [jssp, #16]
0xffff7abe8f9c   220  ldp xzr, fp, [jssp], #24
0xffff7abe8fa0   224  b #-0xd4 (addr 0xffff7abe8ecc)
0xffff7abe8fa4   228  sub csp, jssp, #0x10 (16)
0xffff7abe8fa8   232  stp fp, lr, [jssp, #-16]!
0xffff7abe8fac   236  movz fp, #0xa00000000
0xffff7abe8fb0   240  sub csp, jssp, #0x8 (8)
0xffff7abe8fb4   244  str fp, [jssp, #-8]!
0xffff7abe8fb8   248  add fp, jssp, #0x8 (8)
0xffff7abe8fbc   252  movz x2, #0x0
0xffff7abe8fc0   256  mov x16, lr
0xffff7abe8fc4   260  ldr x17, pc+92 (addr 0x0000ffff7abe9020)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abe8fc8   264  blr x17
0xffff7abe8fcc   268  movz x0, #0x3000000000
0xffff7abe8fd0   272  movz x10, #0x0
0xffff7abe8fd4   276  sub csp, jssp, #0x10 (16)
0xffff7abe8fd8   280  stp x10, x0, [jssp, #-16]!
0xffff7abe8fdc   284  movz x0, #0x2
0xffff7abe8fe0   288  movz x1, #0x5b88
0xffff7abe8fe4   292  movk x1, #0xe2, lsl #16
0xffff7abe8fe8   296  ldr x16, pc+64 (addr 0x0000ffff7abe9028)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abe8fec   300  blr x16
0xffff7abe8ff0   304  str x0, [jssp, #16]
0xffff7abe8ff4   308  ldr x16, pc+60 (addr 0x0000ffff7abe9030)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abe8ff8   312  blr x16
0xffff7abe8ffc   316  ldr lr, [jssp, #16]
0xffff7abe9000   320  ldp xzr, fp, [jssp], #24
0xffff7abe9004   324  b #-0xf0 (addr 0xffff7abe8f14)
0xffff7abe9008   328  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0xffff7abe900c   332  d63f03e0       constant
0xffff7abe9010   336  20d04241       constant
0xffff7abe9014   340  00000000       constant
0xffff7abe9018   344  4ec05d81       constant
0xffff7abe901c   348  00000000       constant
0xffff7abe9020   352  7ab06820       constant
0xffff7abe9024   356  0000ffff       constant
0xffff7abe9028   360  7ab06260       constant
0xffff7abe902c   364  0000ffff       constant
0xffff7abe9030   368  7ab068e0       constant
0xffff7abe9034   372  0000ffff       constant
0xffff7abe9038   376  movz x16, #0x0
0xffff7abe903c   380  sub csp, jssp, #0x10 (16)
0xffff7abe9040   384  stp fp, lr, [jssp, #-16]!
0xffff7abe9044   388  bl #+0xc (addr 0xffff7abe9050)
0xffff7abe9048   392  movz x16, #0x8
0xffff7abe904c   396  bl #+0x14 (addr 0xffff7abe9060)
0xffff7abe9050   400  movz x17, #0xa00000000
0xffff7abe9054   404  sub csp, jssp, #0x10 (16)
0xffff7abe9058   408  stp x17, cp, [jssp, #-16]!
0xffff7abe905c   412  add fp, jssp, #0x10 (16)
0xffff7abe9060   416  ldr x17, pc+24 (addr 0x0000ffff7abe9078)    ;; lazy deoptimization bailout 0
0xffff7abe9064   420  add x17, x17, x16
0xffff7abe9068   424  br x17
0xffff7abe906c   428  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abe9070   432  d63f03e0       constant
0xffff7abe9074   436  d503201f       constant
0xffff7abe9078   440  7a906000       constant
0xffff7abe907c   444  0000ffff       constant


Safepoints (size = 21)
0xffff7abe8ff0   304  000 | x2 | x4 | x5 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 25)
0xffff7abe8ed4  embedded object  (0x20d04241 <undefined>)
0xffff7abe8f34  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abe8fc4  code target (STUB)  (0xffff7ab06820)
0xffff7abe8fe8  code target (STUB)  (0xffff7ab06260)
0xffff7abe8ff4  code target (STUB)  (0xffff7ab068e0)
0xffff7abe9008  constant pool (size 48)
0xffff7abe9060  runtime entry
0xffff7abe906c  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*SMI -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 632)
0xffff7abeb380     0  tbnz w0, #0, #+0x1d4 (addr 0xffff7abeb554)
0xffff7abeb384     4  orr x16, x1, x0
0xffff7abeb388     8  tbnz w16, #0, #+0x10 (addr 0xffff7abeb398)
0xffff7abeb38c    12  asr x1, x1, #32
0xffff7abeb390    16  sub x0, x1, x0, asr #32
0xffff7abeb394    20  ret
0xffff7abeb398    24  cmp x0, x1
0xffff7abeb39c    28  b.ne #+0x30 (addr 0xffff7abeb3cc)
0xffff7abeb3a0    32  ldur x16, [x0, #-1]
0xffff7abeb3a4    36  ldr x17, [x26, #120]
0xffff7abeb3a8    40  cmp x16, x17
0xffff7abeb3ac    44  b.eq #+0xc (addr 0xffff7abeb3b8)
0xffff7abeb3b0    48  movz x0, #0x0
0xffff7abeb3b4    52  ret
0xffff7abeb3b8    56  ldur d0, [x0, #7]
0xffff7abeb3bc    60  fcmp d0, d0
0xffff7abeb3c0    64  b.vc #-0x10 (addr 0xffff7abeb3b0)
0xffff7abeb3c4    68  movn x0, #0x0
0xffff7abeb3c8    72  ret
0xffff7abeb3cc    76  and x16, x1, x0
0xffff7abeb3d0    80  tbnz w16, #0, #+0x64 (addr 0xffff7abeb434)
0xffff7abeb3d4    84  tbz w0, #0, #+0x24 (addr 0xffff7abeb3f8)
0xffff7abeb3d8    88  ldur x16, [x0, #-1]
0xffff7abeb3dc    92  ldr x17, [x26, #120]
0xffff7abeb3e0    96  cmp x16, x17
0xffff7abeb3e4   100  b.eq #+0x8 (addr 0xffff7abeb3ec)
0xffff7abeb3e8   104  ret
0xffff7abeb3ec   108  ldur d0, [x0, #7]
0xffff7abeb3f0   112  scvtf d1, x1, #32
0xffff7abeb3f4   116  b #+0x24 (addr 0xffff7abeb418)
0xffff7abeb3f8   120  ldur x16, [x1, #-1]
0xffff7abeb3fc   124  ldr x17, [x26, #120]
0xffff7abeb400   128  cmp x16, x17
0xffff7abeb404   132  b.eq #+0xc (addr 0xffff7abeb410)
0xffff7abeb408   136  movz x0, #0x1
0xffff7abeb40c   140  ret
0xffff7abeb410   144  ldur d1, [x1, #7]
0xffff7abeb414   148  scvtf d0, x0, #32
0xffff7abeb418   152  fcmp d1, d0
0xffff7abeb41c   156  b.vs #+0x10 (addr 0xffff7abeb42c)
0xffff7abeb420   160  cset x0, gt
0xffff7abeb424   164  csinv x0, x0, xzr, ge
0xffff7abeb428   168  ret
0xffff7abeb42c   172  movn x0, #0x0
0xffff7abeb430   176  ret
0xffff7abeb434   180  ldur x10, [x0, #-1]
0xffff7abeb438   184  ldur x12, [x1, #-1]
0xffff7abeb43c   188  ldrb w11, [x10, #11]
0xffff7abeb440   192  ldrb w13, [x12, #11]
0xffff7abeb444   196  cmp x11, #0xb1 (177)
0xffff7abeb448   200  b.lt #+0x8 (addr 0xffff7abeb450)
0xffff7abeb44c   204  ret
0xffff7abeb450   208  cmp x11, #0x83 (131)
0xffff7abeb454   212  movz x16, #0x83
0xffff7abeb458   216  ccmp x13, x16, #nZcv, ne
0xffff7abeb45c   220  movz x16, #0xb1
0xffff7abeb460   224  ccmp x13, x16, #NzcV, ne
0xffff7abeb464   228  b.ge #-0x18 (addr 0xffff7abeb44c)
0xffff7abeb468   232  orr x14, x13, x11
0xffff7abeb46c   236  tst x14, #0xc0
0xffff7abeb470   240  b.eq #-0x24 (addr 0xffff7abeb44c)
0xffff7abeb474   244  cmp x11, #0x81 (129)
0xffff7abeb478   248  b.ne #+0x18 (addr 0xffff7abeb490)
0xffff7abeb47c   252  cmp x12, x10
0xffff7abeb480   256  b.ne #+0x10 (addr 0xffff7abeb490)
0xffff7abeb484   260  ldur d1, [x1, #7]
0xffff7abeb488   264  ldur d0, [x0, #7]
0xffff7abeb48c   268  b #-0x74 (addr 0xffff7abeb418)
0xffff7abeb490   272  movz x16, #0x87
0xffff7abeb494   276  and x14, x13, x16
0xffff7abeb498   280  movz x16, #0x87
0xffff7abeb49c   284  and x15, x11, x16
0xffff7abeb4a0   288  cmp x14, #0x4 (4)
0xffff7abeb4a4   292  ccmp x15, #4, #nzcv, eq
0xffff7abeb4a8   296  b.ne #+0x5c (addr 0xffff7abeb504)
0xffff7abeb4ac   300  ldur x10, [x1, #15]
0xffff7abeb4b0   304  ldur x11, [x0, #15]
0xffff7abeb4b4   308  cmp x10, x11
0xffff7abeb4b8   312  b.eq #+0xc (addr 0xffff7abeb4c4)
0xffff7abeb4bc   316  movz x0, #0x100000000
0xffff7abeb4c0   320  ret
0xffff7abeb4c4   324  cbnz x10, #+0xc (addr 0xffff7abeb4d0)
0xffff7abeb4c8   328  movz x0, #0x0
0xffff7abeb4cc   332  ret
0xffff7abeb4d0   336  asr x10, x10, #32
0xffff7abeb4d4   340  add x11, x10, #0x17 (23)
0xffff7abeb4d8   344  add x1, x1, x11
0xffff7abeb4dc   348  add x0, x0, x11
0xffff7abeb4e0   352  neg x10, x10
0xffff7abeb4e4   356  ldrb w11, [x1, x10]
0xffff7abeb4e8   360  ldrb w12, [x0, x10]
0xffff7abeb4ec   364  cmp x11, x12
0xffff7abeb4f0   368  b.ne #-0x34 (addr 0xffff7abeb4bc)
0xffff7abeb4f4   372  add x10, x10, #0x1 (1)
0xffff7abeb4f8   376  cbnz x10, #-0x14 (addr 0xffff7abeb4e4)
0xffff7abeb4fc   380  movz x0, #0x0
0xffff7abeb500   384  ret
0xffff7abeb504   388  movz x16, #0xc00000000
0xffff7abeb508   392  sub csp, jssp, #0x10 (16)
0xffff7abeb50c   396  stp fp, lr, [jssp, #-16]!
0xffff7abeb510   400  sub csp, jssp, #0x10 (16)
0xffff7abeb514   404  str x16, [jssp, #-8]!
0xffff7abeb518   408  ldr x17, pc+176 (addr 0x0000ffff7abeb5c8)    ;; object: 0xffff7abeb321 <Code: COMPARE_IC>
0xffff7abeb51c   412  sub csp, jssp, #0x10 (16)
0xffff7abeb520   416  str x17, [jssp, #-8]!
0xffff7abeb524   420  add fp, jssp, #0x10 (16)
0xffff7abeb528   424  sub csp, jssp, #0x10 (16)
0xffff7abeb52c   428  stp x0, x1, [jssp, #-16]!
0xffff7abeb530   432  movz x0, #0x2
0xffff7abeb534   436  ldr x1, pc+156 (addr 0x0000ffff7abeb5d0)    ;; external reference (Runtime::StrictEqual)
0xffff7abeb538   440  ldr x16, pc+160 (addr 0x0000ffff7abeb5d8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abeb53c   444  blr x16
0xffff7abeb540   448  mov jssp, fp
0xffff7abeb544   452  ldp fp, lr, [jssp], #16
0xffff7abeb548   456  ldr x1, [x26, #64]
0xffff7abeb54c   460  sub x0, x0, x1
0xffff7abeb550   464  ret
0xffff7abeb554   468  movz x16, #0xc00000000
0xffff7abeb558   472  sub csp, jssp, #0x10 (16)
0xffff7abeb55c   476  stp fp, lr, [jssp, #-16]!
0xffff7abeb560   480  sub csp, jssp, #0x10 (16)
0xffff7abeb564   484  str x16, [jssp, #-8]!
0xffff7abeb568   488  ldr x17, pc+120 (addr 0x0000ffff7abeb5e0)    ;; object: 0xffff7abeb321 <Code: COMPARE_IC>
0xffff7abeb56c   492  sub csp, jssp, #0x10 (16)
0xffff7abeb570   496  str x17, [jssp, #-8]!
0xffff7abeb574   500  add fp, jssp, #0x10 (16)
0xffff7abeb578   504  sub csp, jssp, #0x18 (24)
0xffff7abeb57c   508  stp lr, x0, [jssp, #-24]!
0xffff7abeb580   512  str x1, [jssp, #16]
0xffff7abeb584   516  movz x10, #0x2f00000000
0xffff7abeb588   520  sub csp, jssp, #0x18 (24)
0xffff7abeb58c   524  stp x10, x0, [jssp, #-24]!
0xffff7abeb590   528  str x1, [jssp, #16]
0xffff7abeb594   532  movz x0, #0x3
0xffff7abeb598   536  ldr x1, pc+80 (addr 0x0000ffff7abeb5e8)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7abeb59c   540  ldr x16, pc+84 (addr 0x0000ffff7abeb5f0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abeb5a0   544  blr x16
0xffff7abeb5a4   548  add x11, x0, #0x5f (95)
0xffff7abeb5a8   552  ldr x1, [jssp, #16]
0xffff7abeb5ac   556  ldp lr, x0, [jssp], #24
0xffff7abeb5b0   560  mov jssp, fp
0xffff7abeb5b4   564  ldp fp, lr, [jssp], #16
0xffff7abeb5b8   568  br x11
0xffff7abeb5bc   572  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abeb5c0   576  d63f03e0       constant
0xffff7abeb5c4   580  d503201f       constant
0xffff7abeb5c8   584  7abeb321       constant
0xffff7abeb5cc   588  0000ffff       constant
0xffff7abeb5d0   592  00e50928       constant
0xffff7abeb5d4   596  00000000       constant
0xffff7abeb5d8   600  7ab06060       constant
0xffff7abeb5dc   604  0000ffff       constant
0xffff7abeb5e0   608  7abeb321       constant
0xffff7abeb5e4   612  0000ffff       constant
0xffff7abeb5e8   616  00c8a980       constant
0xffff7abeb5ec   620  00000000       constant
0xffff7abeb5f0   624  7ab06060       constant
0xffff7abeb5f4   628  0000ffff       constant


RelocInfo (size = 16)
0xffff7abeb518  embedded object  (0xffff7abeb321 <Code: COMPARE_IC>)
0xffff7abeb534  external reference (Runtime::StrictEqual)  (0xe50928)
0xffff7abeb538  code target (STUB)  (0xffff7ab06060)
0xffff7abeb568  embedded object  (0xffff7abeb321 <Code: COMPARE_IC>)
0xffff7abeb598  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7abeb59c  code target (STUB)  (0xffff7ab06060)
0xffff7abeb5bc  constant pool (size 60)


kind = HANDLER
major_key = <NoCache>Stub
name = domain
compiler = unknown
Instructions (size = 152)
0xffff7abeba40     0  sub csp, jssp, #0x8 (8)
0xffff7abeba44     4  str x3, [jssp, #-8]!
0xffff7abeba48     8  sub csp, jssp, #0x8 (8)
0xffff7abeba4c    12  str x4, [jssp, #-8]!
0xffff7abeba50    16  ldr x3, pc+88 (addr 0x0000ffff7abebaa8)    ;; object: 0x5d4d1d41 Cell for 0
0xffff7abeba54    20  ldur x3, [x3, #7]
0xffff7abeba58    24  cmp x3, #0x0 (0)
0xffff7abeba5c    28  b.ne #+0x30 (addr 0xffff7abeba8c)
0xffff7abeba60    32  tbz w0, #0, #+0x2c (addr 0xffff7abeba8c)
0xffff7abeba64    36  ldr x5, pc+76 (addr 0x0000ffff7abebab0)    ;; object: 0x5d4d1c81 WeakCell for 0x4ec38a79 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abeba68    40  ldur x5, [x5, #7]
0xffff7abeba6c    44  tbz w5, #0, #+0x20 (addr 0xffff7abeba8c)
0xffff7abeba70    48  ldursw x4, [x5, #15]
0xffff7abeba74    52  tbnz w4, #23, #+0x18 (addr 0xffff7abeba8c)
0xffff7abeba78    56  ldr x4, [jssp], #8
0xffff7abeba7c    60  ldr x3, [jssp], #8
0xffff7abeba80    64  ldr x2, pc+56 (addr 0x0000ffff7abebab8)    ;; object: 0x20db2439 <String[6]: domain>
0xffff7abeba84    68  ldr x16, pc+60 (addr 0x0000ffff7abebac0)    ;; code: HANDLER, StoreTransitionStub, minor: 198661
0xffff7abeba88    72  br x16
0xffff7abeba8c    76  ldr x2, pc+60 (addr 0x0000ffff7abebac8)    ;; object: 0x20db2439 <String[6]: domain>
0xffff7abeba90    80  ldr x4, [jssp], #8
0xffff7abeba94    84  ldr x3, [jssp], #8
0xffff7abeba98    88  ldr x16, pc+56 (addr 0x0000ffff7abebad0)    ;; code: BUILTIN
0xffff7abeba9c    92  br x16
0xffff7abebaa0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abebaa4   100  d63f03e0       constant
0xffff7abebaa8   104  5d4d1d41       constant
0xffff7abebaac   108  00000000       constant
0xffff7abebab0   112  5d4d1c81       constant
0xffff7abebab4   116  00000000       constant
0xffff7abebab8   120  20db2439       constant
0xffff7abebabc   124  00000000       constant
0xffff7abebac0   128  7ab8bdc0       constant
0xffff7abebac4   132  0000ffff       constant
0xffff7abebac8   136  20db2439       constant
0xffff7abebacc   140  00000000       constant
0xffff7abebad0   144  7ab22420       constant
0xffff7abebad4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abeba50  embedded object  (0x5d4d1d41 Cell for 0)
0xffff7abeba64  embedded object  (0x5d4d1c81 WeakCell for 0x4ec38a79 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abeba80  embedded object  (0x20db2439 <String[6]: domain>)
0xffff7abeba84  code target (HANDLER)  (0xffff7ab8bdc0)
0xffff7abeba8c  embedded object  (0x20db2439 <String[6]: domain>)
0xffff7abeba98  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abebaa0  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = _events
compiler = unknown
Instructions (size = 120)
0xffff7abebb40     0  sub csp, jssp, #0x8 (8)
0xffff7abebb44     4  str x3, [jssp, #-8]!
0xffff7abebb48     8  sub csp, jssp, #0x8 (8)
0xffff7abebb4c    12  str x0, [jssp, #-8]!
0xffff7abebb50    16  ldr x0, pc+72 (addr 0x0000ffff7abebb98)    ;; object: 0x5d4d1d41 Cell for 0
0xffff7abebb54    20  ldur x0, [x0, #7]
0xffff7abebb58    24  cmp x0, #0x0 (0)
0xffff7abebb5c    28  b.ne #+0x14 (addr 0xffff7abebb70)
0xffff7abebb60    32  ldr x3, pc+64 (addr 0x0000ffff7abebba0)    ;; object: 0x5d4d1d71 WeakCell for 0x5d4acc61 <an Object with map 0x4ec1bf39>
0xffff7abebb64    36  ldur x3, [x3, #7]
0xffff7abebb68    40  tbz w3, #0, #+0x8 (addr 0xffff7abebb70)
0xffff7abebb6c    44  b #+0x14 (addr 0xffff7abebb80)
0xffff7abebb70    48  ldr x0, [jssp], #8
0xffff7abebb74    52  ldr x3, [jssp], #8
0xffff7abebb78    56  ldr x16, pc+48 (addr 0x0000ffff7abebba8)    ;; code: BUILTIN
0xffff7abebb7c    60  br x16
0xffff7abebb80    64  add jssp, jssp, #0x10 (16)
0xffff7abebb84    68  mov x1, x3
0xffff7abebb88    72  ldr x16, pc+40 (addr 0x0000ffff7abebbb0)    ;; code: HANDLER, LoadFieldStub, minor: 2052
0xffff7abebb8c    76  br x16
0xffff7abebb90    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abebb94    84  d63f03e0       constant
0xffff7abebb98    88  5d4d1d41       constant
0xffff7abebb9c    92  00000000       constant
0xffff7abebba0    96  5d4d1d71       constant
0xffff7abebba4   100  00000000       constant
0xffff7abebba8   104  7ab222e0       constant
0xffff7abebbac   108  0000ffff       constant
0xffff7abebbb0   112  7ab78da0       constant
0xffff7abebbb4   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abebb50  embedded object  (0x5d4d1d41 Cell for 0)
0xffff7abebb60  embedded object  (0x5d4d1d71 WeakCell for 0x5d4acc61 <an Object with map 0x4ec1bf39>)
0xffff7abebb78  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abebb88  code target (HANDLER)  (0xffff7ab78da0)
0xffff7abebb90  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = _maxListeners
compiler = unknown
Instructions (size = 120)
0xffff7abebd40     0  sub csp, jssp, #0x8 (8)
0xffff7abebd44     4  str x3, [jssp, #-8]!
0xffff7abebd48     8  sub csp, jssp, #0x8 (8)
0xffff7abebd4c    12  str x0, [jssp, #-8]!
0xffff7abebd50    16  ldr x0, pc+72 (addr 0x0000ffff7abebd98)    ;; object: 0x5d4d1d41 Cell for 0
0xffff7abebd54    20  ldur x0, [x0, #7]
0xffff7abebd58    24  cmp x0, #0x0 (0)
0xffff7abebd5c    28  b.ne #+0x14 (addr 0xffff7abebd70)
0xffff7abebd60    32  ldr x3, pc+64 (addr 0x0000ffff7abebda0)    ;; object: 0x5d4d1eb9 WeakCell for 0x5d4acc61 <an Object with map 0x4ec1bf39>
0xffff7abebd64    36  ldur x3, [x3, #7]
0xffff7abebd68    40  tbz w3, #0, #+0x8 (addr 0xffff7abebd70)
0xffff7abebd6c    44  b #+0x14 (addr 0xffff7abebd80)
0xffff7abebd70    48  ldr x0, [jssp], #8
0xffff7abebd74    52  ldr x3, [jssp], #8
0xffff7abebd78    56  ldr x16, pc+48 (addr 0x0000ffff7abebda8)    ;; code: BUILTIN
0xffff7abebd7c    60  br x16
0xffff7abebd80    64  add jssp, jssp, #0x10 (16)
0xffff7abebd84    68  mov x1, x3
0xffff7abebd88    72  ldr x16, pc+40 (addr 0x0000ffff7abebdb0)    ;; code: HANDLER, LoadFieldStub, minor: 2053
0xffff7abebd8c    76  br x16
0xffff7abebd90    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abebd94    84  d63f03e0       constant
0xffff7abebd98    88  5d4d1d41       constant
0xffff7abebd9c    92  00000000       constant
0xffff7abebda0    96  5d4d1eb9       constant
0xffff7abebda4   100  00000000       constant
0xffff7abebda8   104  7ab222e0       constant
0xffff7abebdac   108  0000ffff       constant
0xffff7abebdb0   112  7ab78e20       constant
0xffff7abebdb4   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abebd50  embedded object  (0x5d4d1d41 Cell for 0)
0xffff7abebd60  embedded object  (0x5d4d1eb9 WeakCell for 0x5d4acc61 <an Object with map 0x4ec1bf39>)
0xffff7abebd78  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abebd88  code target (HANDLER)  (0xffff7ab78e20)
0xffff7abebd90  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = _maxListeners
compiler = unknown
Instructions (size = 152)
0xffff7abebe20     0  sub csp, jssp, #0x8 (8)
0xffff7abebe24     4  str x3, [jssp, #-8]!
0xffff7abebe28     8  sub csp, jssp, #0x8 (8)
0xffff7abebe2c    12  str x4, [jssp, #-8]!
0xffff7abebe30    16  ldr x3, pc+88 (addr 0x0000ffff7abebe88)    ;; object: 0x5d4d1d41 Cell for 0
0xffff7abebe34    20  ldur x3, [x3, #7]
0xffff7abebe38    24  cmp x3, #0x0 (0)
0xffff7abebe3c    28  b.ne #+0x30 (addr 0xffff7abebe6c)
0xffff7abebe40    32  tbz w0, #0, #+0x2c (addr 0xffff7abebe6c)
0xffff7abebe44    36  ldr x5, pc+76 (addr 0x0000ffff7abebe90)    ;; object: 0x5d4d1ef1 WeakCell for 0x4ec38bd9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abebe48    40  ldur x5, [x5, #7]
0xffff7abebe4c    44  tbz w5, #0, #+0x20 (addr 0xffff7abebe6c)
0xffff7abebe50    48  ldursw x4, [x5, #15]
0xffff7abebe54    52  tbnz w4, #23, #+0x18 (addr 0xffff7abebe6c)
0xffff7abebe58    56  ldr x4, [jssp], #8
0xffff7abebe5c    60  ldr x3, [jssp], #8
0xffff7abebe60    64  ldr x2, pc+56 (addr 0x0000ffff7abebe98)    ;; object: 0x20dc32b1 <String[13]: _maxListeners>
0xffff7abebe64    68  ldr x16, pc+60 (addr 0x0000ffff7abebea0)    ;; code: HANDLER, StoreTransitionStub, minor: 198664
0xffff7abebe68    72  br x16
0xffff7abebe6c    76  ldr x2, pc+60 (addr 0x0000ffff7abebea8)    ;; object: 0x20dc32b1 <String[13]: _maxListeners>
0xffff7abebe70    80  ldr x4, [jssp], #8
0xffff7abebe74    84  ldr x3, [jssp], #8
0xffff7abebe78    88  ldr x16, pc+56 (addr 0x0000ffff7abebeb0)    ;; code: BUILTIN
0xffff7abebe7c    92  br x16
0xffff7abebe80    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abebe84   100  d63f03e0       constant
0xffff7abebe88   104  5d4d1d41       constant
0xffff7abebe8c   108  00000000       constant
0xffff7abebe90   112  5d4d1ef1       constant
0xffff7abebe94   116  00000000       constant
0xffff7abebe98   120  20dc32b1       constant
0xffff7abebe9c   124  00000000       constant
0xffff7abebea0   128  7abe5d20       constant
0xffff7abebea4   132  0000ffff       constant
0xffff7abebea8   136  20dc32b1       constant
0xffff7abebeac   140  00000000       constant
0xffff7abebeb0   144  7ab22420       constant
0xffff7abebeb4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abebe30  embedded object  (0x5d4d1d41 Cell for 0)
0xffff7abebe44  embedded object  (0x5d4d1ef1 WeakCell for 0x4ec38bd9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abebe60  embedded object  (0x20dc32b1 <String[13]: _maxListeners>)
0xffff7abebe64  code target (HANDLER)  (0xffff7abe5d20)
0xffff7abebe6c  embedded object  (0x20dc32b1 <String[13]: _maxListeners>)
0xffff7abebe78  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abebe80  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
compiler = unknown
Instructions (size = 96)
0xffff7abebf20     0  sub csp, jssp, #0x8 (8)
0xffff7abebf24     4  str x3, [jssp, #-8]!
0xffff7abebf28     8  sub csp, jssp, #0x8 (8)
0xffff7abebf2c    12  str x0, [jssp, #-8]!
0xffff7abebf30    16  ldr x0, pc+56 (addr 0x0000ffff7abebf68)    ;; object: 0x5d4d1fc9 Cell for 0
0xffff7abebf34    20  ldur x0, [x0, #7]
0xffff7abebf38    24  cmp x0, #0x0 (0)
0xffff7abebf3c    28  b.ne #+0x14 (addr 0xffff7abebf50)
0xffff7abebf40    32  add jssp, jssp, #0x10 (16)
0xffff7abebf44    36  ldr x0, pc+44 (addr 0x0000ffff7abebf70)    ;; object: 0x20d04241 <undefined>
0xffff7abebf48    40  ret
0xffff7abebf4c    44  b #+0x14 (addr 0xffff7abebf60)
0xffff7abebf50    48  ldr x0, [jssp], #8
0xffff7abebf54    52  ldr x3, [jssp], #8
0xffff7abebf58    56  ldr x16, pc+32 (addr 0x0000ffff7abebf78)    ;; code: BUILTIN
0xffff7abebf5c    60  br x16
0xffff7abebf60    64  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7abebf64    68  d63f03e0       constant
0xffff7abebf68    72  5d4d1fc9       constant
0xffff7abebf6c    76  00000000       constant
0xffff7abebf70    80  20d04241       constant
0xffff7abebf74    84  00000000       constant
0xffff7abebf78    88  7ab222e0       constant
0xffff7abebf7c    92  0000ffff       constant


RelocInfo (size = 9)
0xffff7abebf30  embedded object  (0x5d4d1fc9 Cell for 0)
0xffff7abebf44  embedded object  (0x20d04241 <undefined>)
0xffff7abebf58  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abebf60  constant pool (size 32)

kind = HANDLER
major_key = <NoCache>Stub
name = end
compiler = unknown
Instructions (size = 168)
0xffff7abebfe0     0  sub csp, jssp, #0x8 (8)
0xffff7abebfe4     4  str x3, [jssp, #-8]!
0xffff7abebfe8     8  sub csp, jssp, #0x8 (8)
0xffff7abebfec    12  str x4, [jssp, #-8]!
0xffff7abebff0    16  ldr x3, pc+104 (addr 0x0000ffff7abec058)    ;; object: 0x5d4d1fc9 Cell for 0
0xffff7abebff4    20  ldur x3, [x3, #7]
0xffff7abebff8    24  cmp x3, #0x0 (0)
0xffff7abebffc    28  b.ne #+0x3c (addr 0xffff7abec038)
0xffff7abec000    32  ldr x5, pc+96 (addr 0x0000ffff7abec060)    ;; object: 0x5d4d2011 WeakCell for 0x4ec38d39 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abec004    36  ldur x5, [x5, #7]
0xffff7abec008    40  tbz w5, #0, #+0x30 (addr 0xffff7abec038)
0xffff7abec00c    44  ldursw x4, [x5, #15]
0xffff7abec010    48  tbnz w4, #23, #+0x28 (addr 0xffff7abec038)
0xffff7abec014    52  ldur x4, [x5, #47]
0xffff7abec018    56  ldur x4, [x4, #47]
0xffff7abec01c    60  cmp x0, x4
0xffff7abec020    64  b.ne #+0x18 (addr 0xffff7abec038)
0xffff7abec024    68  ldr x4, [jssp], #8
0xffff7abec028    72  ldr x3, [jssp], #8
0xffff7abec02c    76  ldr x2, pc+60 (addr 0x0000ffff7abec068)    ;; object: 0x20d93989 <String[3]: end>
0xffff7abec030    80  ldr x16, pc+64 (addr 0x0000ffff7abec070)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0xffff7abec034    84  br x16
0xffff7abec038    88  ldr x2, pc+64 (addr 0x0000ffff7abec078)    ;; object: 0x20d93989 <String[3]: end>
0xffff7abec03c    92  ldr x4, [jssp], #8
0xffff7abec040    96  ldr x3, [jssp], #8
0xffff7abec044   100  ldr x16, pc+60 (addr 0x0000ffff7abec080)    ;; code: BUILTIN
0xffff7abec048   104  br x16
0xffff7abec04c   108  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abec050   112  d63f03e0       constant
0xffff7abec054   116  d503201f       constant
0xffff7abec058   120  5d4d1fc9       constant
0xffff7abec05c   124  00000000       constant
0xffff7abec060   128  5d4d2011       constant
0xffff7abec064   132  00000000       constant
0xffff7abec068   136  20d93989       constant
0xffff7abec06c   140  00000000       constant
0xffff7abec070   144  7ab3cea0       constant
0xffff7abec074   148  0000ffff       constant
0xffff7abec078   152  20d93989       constant
0xffff7abec07c   156  00000000       constant
0xffff7abec080   160  7ab22420       constant
0xffff7abec084   164  0000ffff       constant


RelocInfo (size = 12)
0xffff7abebff0  embedded object  (0x5d4d1fc9 Cell for 0)
0xffff7abec000  embedded object  (0x5d4d2011 WeakCell for 0x4ec38d39 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abec02c  embedded object  (0x20d93989 <String[3]: end>)
0xffff7abec030  code target (HANDLER)  (0xffff7ab3cea0)
0xffff7abec038  embedded object  (0x20d93989 <String[3]: end>)
0xffff7abec044  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abec04c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0xffff7abec100     0  mov x5, x0
0xffff7abec104     4  tbnz w5, #0, #+0xc (addr 0xffff7abec110)
0xffff7abec108     8  stur x5, [x1, #55]
0xffff7abec10c    12  ret
0xffff7abec110    16  movz x16, #0x0
0xffff7abec114    20  sub csp, jssp, #0x10 (16)
0xffff7abec118    24  stp fp, lr, [jssp, #-16]!
0xffff7abec11c    28  bl #+0x4 (addr 0xffff7abec120)
0xffff7abec120    32  movz x17, #0xa00000000
0xffff7abec124    36  sub csp, jssp, #0x10 (16)
0xffff7abec128    40  stp x17, cp, [jssp, #-16]!
0xffff7abec12c    44  add fp, jssp, #0x10 (16)
0xffff7abec130    48  ldr x17, pc+24 (addr 0x0000ffff7abec148)    ;; lazy deoptimization bailout 0
0xffff7abec134    52  add x17, x17, x16
0xffff7abec138    56  br x17
0xffff7abec13c    60  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abec140    64  d63f03e0       constant
0xffff7abec144    68  d503201f       constant
0xffff7abec148    72  7a906000       constant
0xffff7abec14c    76  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 8)
0xffff7abec130  runtime entry
0xffff7abec13c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0xffff7abec100     0  mov x5, x0
0xffff7abec104     4  tbnz w5, #0, #+0xc (addr 0xffff7abec110)
0xffff7abec108     8  stur x5, [x1, #55]
0xffff7abec10c    12  ret
0xffff7abec110    16  movz x16, #0x0
0xffff7abec114    20  sub csp, jssp, #0x10 (16)
0xffff7abec118    24  stp fp, lr, [jssp, #-16]!
0xffff7abec11c    28  bl #+0x4 (addr 0xffff7abec120)
0xffff7abec120    32  movz x17, #0xa00000000
0xffff7abec124    36  sub csp, jssp, #0x10 (16)
0xffff7abec128    40  stp x17, cp, [jssp, #-16]!
0xffff7abec12c    44  add fp, jssp, #0x10 (16)
0xffff7abec130    48  ldr x17, pc+24 (addr 0x0000ffff7abec148)    ;; lazy deoptimization bailout 0
0xffff7abec134    52  add x17, x17, x16
0xffff7abec138    56  br x17
0xffff7abec13c    60  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abec140    64  d63f03e0       constant
0xffff7abec144    68  d503201f       constant
0xffff7abec148    72  7a906000       constant
0xffff7abec14c    76  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 8)
0xffff7abec130  runtime entry
0xffff7abec13c  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0xffff7abf1900     0  tbz w0, #0, #+0x50 (addr 0xffff7abf1950)
0xffff7abf1904     4  mov x2, x0
0xffff7abf1908     8  stur x2, [x1, #39]
0xffff7abf190c    12  add x3, x1, #0x27 (39)
0xffff7abf1910    16  and x2, x2, #0xfffffffffff00000
0xffff7abf1914    20  ldr x2, [x2, #8]
0xffff7abf1918    24  tbz w2, #1, #+0x24 (addr 0xffff7abf193c)
0xffff7abf191c    28  and x2, x1, #0xfffffffffff00000
0xffff7abf1920    32  ldr x2, [x2, #8]
0xffff7abf1924    36  tbz w2, #2, #+0x18 (addr 0xffff7abf193c)
0xffff7abf1928    40  sub csp, jssp, #0x8 (8)
0xffff7abf192c    44  str lr, [jssp, #-8]!
0xffff7abf1930    48  ldr x16, pc+24 (addr 0x0000ffff7abf1948)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf1934    52  blr x16
0xffff7abf1938    56  ldr lr, [jssp], #8
0xffff7abf193c    60  ret
0xffff7abf1940    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf1944    68  d63f03e0       constant
0xffff7abf1948    72  7ab170c0       constant
0xffff7abf194c    76  0000ffff       constant
0xffff7abf1950    80  movz x16, #0x0
0xffff7abf1954    84  sub csp, jssp, #0x10 (16)
0xffff7abf1958    88  stp fp, lr, [jssp, #-16]!
0xffff7abf195c    92  bl #+0x4 (addr 0xffff7abf1960)
0xffff7abf1960    96  movz x17, #0xa00000000
0xffff7abf1964   100  sub csp, jssp, #0x10 (16)
0xffff7abf1968   104  stp x17, cp, [jssp, #-16]!
0xffff7abf196c   108  add fp, jssp, #0x10 (16)
0xffff7abf1970   112  ldr x17, pc+24 (addr 0x0000ffff7abf1988)    ;; lazy deoptimization bailout 0
0xffff7abf1974   116  add x17, x17, x16
0xffff7abf1978   120  br x17
0xffff7abf197c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf1980   128  d63f03e0       constant
0xffff7abf1984   132  d503201f       constant
0xffff7abf1988   136  7a906000       constant
0xffff7abf198c   140  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf1930  code target (STUB)  (0xffff7ab170c0)
0xffff7abf1940  constant pool (size 16)
0xffff7abf1970  runtime entry
0xffff7abf197c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0xffff7abf1900     0  tbz w0, #0, #+0x50 (addr 0xffff7abf1950)
0xffff7abf1904     4  mov x2, x0
0xffff7abf1908     8  stur x2, [x1, #39]
0xffff7abf190c    12  add x3, x1, #0x27 (39)
0xffff7abf1910    16  and x2, x2, #0xfffffffffff00000
0xffff7abf1914    20  ldr x2, [x2, #8]
0xffff7abf1918    24  tbz w2, #1, #+0x24 (addr 0xffff7abf193c)
0xffff7abf191c    28  and x2, x1, #0xfffffffffff00000
0xffff7abf1920    32  ldr x2, [x2, #8]
0xffff7abf1924    36  tbz w2, #2, #+0x18 (addr 0xffff7abf193c)
0xffff7abf1928    40  sub csp, jssp, #0x8 (8)
0xffff7abf192c    44  str lr, [jssp, #-8]!
0xffff7abf1930    48  ldr x16, pc+24 (addr 0x0000ffff7abf1948)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf1934    52  blr x16
0xffff7abf1938    56  ldr lr, [jssp], #8
0xffff7abf193c    60  ret
0xffff7abf1940    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf1944    68  d63f03e0       constant
0xffff7abf1948    72  7ab170c0       constant
0xffff7abf194c    76  0000ffff       constant
0xffff7abf1950    80  movz x16, #0x0
0xffff7abf1954    84  sub csp, jssp, #0x10 (16)
0xffff7abf1958    88  stp fp, lr, [jssp, #-16]!
0xffff7abf195c    92  bl #+0x4 (addr 0xffff7abf1960)
0xffff7abf1960    96  movz x17, #0xa00000000
0xffff7abf1964   100  sub csp, jssp, #0x10 (16)
0xffff7abf1968   104  stp x17, cp, [jssp, #-16]!
0xffff7abf196c   108  add fp, jssp, #0x10 (16)
0xffff7abf1970   112  ldr x17, pc+24 (addr 0x0000ffff7abf1988)    ;; lazy deoptimization bailout 0
0xffff7abf1974   116  add x17, x17, x16
0xffff7abf1978   120  br x17
0xffff7abf197c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf1980   128  d63f03e0       constant
0xffff7abf1984   132  d503201f       constant
0xffff7abf1988   136  7a906000       constant
0xffff7abf198c   140  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf1930  code target (STUB)  (0xffff7ab170c0)
0xffff7abf1940  constant pool (size 16)
0xffff7abf1970  runtime entry
0xffff7abf197c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0xffff7abf1a00     0  sub csp, jssp, #0x8 (8)
0xffff7abf1a04     4  str x3, [jssp, #-8]!
0xffff7abf1a08     8  sub csp, jssp, #0x8 (8)
0xffff7abf1a0c    12  str x4, [jssp, #-8]!
0xffff7abf1a10    16  ldr x3, pc+104 (addr 0x0000ffff7abf1a78)    ;; object: 0x5d4e6961 Cell for 0
0xffff7abf1a14    20  ldur x3, [x3, #7]
0xffff7abf1a18    24  cmp x3, #0x0 (0)
0xffff7abf1a1c    28  b.ne #+0x8 (addr 0xffff7abf1a24)
0xffff7abf1a20    32  b #+0x18 (addr 0xffff7abf1a38)
0xffff7abf1a24    36  ldr x2, pc+92 (addr 0x0000ffff7abf1a80)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7abf1a28    40  ldr x4, [jssp], #8
0xffff7abf1a2c    44  ldr x3, [jssp], #8
0xffff7abf1a30    48  ldr x16, pc+88 (addr 0x0000ffff7abf1a88)    ;; code: BUILTIN
0xffff7abf1a34    52  br x16
0xffff7abf1a38    56  add jssp, jssp, #0x10 (16)
0xffff7abf1a3c    60  ldr x3, pc+84 (addr 0x0000ffff7abf1a90)    ;; object: 0x20d404a9 <AccessorInfo>
0xffff7abf1a40    64  ldr x4, pc+88 (addr 0x0000ffff7abf1a98)    ;; object: 0x20d05371 <String[9]: prototype>
0xffff7abf1a44    68  sub csp, jssp, #0x28 (40)
0xffff7abf1a48    72  stp x4, x3, [jssp, #-32]!
0xffff7abf1a4c    76  stp x1, x1, [jssp, #16]
0xffff7abf1a50    80  str x0, [jssp, #-8]!
0xffff7abf1a54    84  movz x16, #0x100000000
0xffff7abf1a58    88  sub csp, jssp, #0x8 (8)
0xffff7abf1a5c    92  str x16, [jssp, #-8]!
0xffff7abf1a60    96  movz x0, #0x6
0xffff7abf1a64   100  ldr x1, pc+60 (addr 0x0000ffff7abf1aa0)    ;; external reference (Runtime::StoreCallbackProperty)
0xffff7abf1a68   104  ldr x16, pc+64 (addr 0x0000ffff7abf1aa8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abf1a6c   108  br x16
0xffff7abf1a70   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0xffff7abf1a74   116  d63f03e0       constant
0xffff7abf1a78   120  5d4e6961       constant
0xffff7abf1a7c   124  00000000       constant
0xffff7abf1a80   128  20d05371       constant
0xffff7abf1a84   132  00000000       constant
0xffff7abf1a88   136  7ab22420       constant
0xffff7abf1a8c   140  0000ffff       constant
0xffff7abf1a90   144  20d404a9       constant
0xffff7abf1a94   148  00000000       constant
0xffff7abf1a98   152  20d05371       constant
0xffff7abf1a9c   156  00000000       constant
0xffff7abf1aa0   160  00c8b560       constant
0xffff7abf1aa4   164  00000000       constant
0xffff7abf1aa8   168  7ab06060       constant
0xffff7abf1aac   172  0000ffff       constant


RelocInfo (size = 14)
0xffff7abf1a10  embedded object  (0x5d4e6961 Cell for 0)
0xffff7abf1a24  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7abf1a30  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf1a3c  embedded object  (0x20d404a9 <AccessorInfo>)
0xffff7abf1a40  embedded object  (0x20d05371 <String[9]: prototype>)
0xffff7abf1a64  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0xffff7abf1a68  code target (STUB)  (0xffff7ab06060)
0xffff7abf1a70  constant pool (size 64)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf5aa0     0  tbz w0, #0, #+0x90 (addr 0xffff7abf5b30)
0xffff7abf5aa4     4  mov x2, x0
0xffff7abf5aa8     8  stur x2, [x1, #79]
0xffff7abf5aac    12  add x3, x1, #0x4f (79)
0xffff7abf5ab0    16  and x2, x2, #0xfffffffffff00000
0xffff7abf5ab4    20  ldr x2, [x2, #8]
0xffff7abf5ab8    24  tbz w2, #1, #+0x24 (addr 0xffff7abf5adc)
0xffff7abf5abc    28  and x2, x1, #0xfffffffffff00000
0xffff7abf5ac0    32  ldr x2, [x2, #8]
0xffff7abf5ac4    36  tbz w2, #2, #+0x18 (addr 0xffff7abf5adc)
0xffff7abf5ac8    40  sub csp, jssp, #0x8 (8)
0xffff7abf5acc    44  str lr, [jssp, #-8]!
0xffff7abf5ad0    48  ldr x16, pc+80 (addr 0x0000ffff7abf5b20)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf5ad4    52  blr x16
0xffff7abf5ad8    56  ldr lr, [jssp], #8
0xffff7abf5adc    60  stur x5, [x1, #-1]
0xffff7abf5ae0    64  tbz w5, #0, #+0x34 (addr 0xffff7abf5b14)
0xffff7abf5ae4    68  sub x2, x1, #0x1 (1)
0xffff7abf5ae8    72  and x5, x5, #0xfffffffffff00000
0xffff7abf5aec    76  ldr x5, [x5, #8]
0xffff7abf5af0    80  tbz w5, #1, #+0x24 (addr 0xffff7abf5b14)
0xffff7abf5af4    84  and x5, x1, #0xfffffffffff00000
0xffff7abf5af8    88  ldr x5, [x5, #8]
0xffff7abf5afc    92  tbz w5, #2, #+0x18 (addr 0xffff7abf5b14)
0xffff7abf5b00    96  sub csp, jssp, #0x8 (8)
0xffff7abf5b04   100  str lr, [jssp, #-8]!
0xffff7abf5b08   104  ldr x16, pc+32 (addr 0x0000ffff7abf5b28)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf5b0c   108  blr x16
0xffff7abf5b10   112  ldr lr, [jssp], #8
0xffff7abf5b14   116  ret
0xffff7abf5b18   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf5b1c   124  d63f03e0       constant
0xffff7abf5b20   128  7ab170c0       constant
0xffff7abf5b24   132  0000ffff       constant
0xffff7abf5b28   136  7ab38080       constant
0xffff7abf5b2c   140  0000ffff       constant
0xffff7abf5b30   144  movz x16, #0x0
0xffff7abf5b34   148  sub csp, jssp, #0x10 (16)
0xffff7abf5b38   152  stp fp, lr, [jssp, #-16]!
0xffff7abf5b3c   156  bl #+0x4 (addr 0xffff7abf5b40)
0xffff7abf5b40   160  movz x17, #0xa00000000
0xffff7abf5b44   164  sub csp, jssp, #0x10 (16)
0xffff7abf5b48   168  stp x17, cp, [jssp, #-16]!
0xffff7abf5b4c   172  add fp, jssp, #0x10 (16)
0xffff7abf5b50   176  ldr x17, pc+24 (addr 0x0000ffff7abf5b68)    ;; lazy deoptimization bailout 0
0xffff7abf5b54   180  add x17, x17, x16
0xffff7abf5b58   184  br x17
0xffff7abf5b5c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf5b60   192  d63f03e0       constant
0xffff7abf5b64   196  d503201f       constant
0xffff7abf5b68   200  7a906000       constant
0xffff7abf5b6c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf5ad0  code target (STUB)  (0xffff7ab170c0)
0xffff7abf5b08  code target (STUB)  (0xffff7ab38080)
0xffff7abf5b18  constant pool (size 24)
0xffff7abf5b50  runtime entry
0xffff7abf5b5c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf5aa0     0  tbz w0, #0, #+0x90 (addr 0xffff7abf5b30)
0xffff7abf5aa4     4  mov x2, x0
0xffff7abf5aa8     8  stur x2, [x1, #79]
0xffff7abf5aac    12  add x3, x1, #0x4f (79)
0xffff7abf5ab0    16  and x2, x2, #0xfffffffffff00000
0xffff7abf5ab4    20  ldr x2, [x2, #8]
0xffff7abf5ab8    24  tbz w2, #1, #+0x24 (addr 0xffff7abf5adc)
0xffff7abf5abc    28  and x2, x1, #0xfffffffffff00000
0xffff7abf5ac0    32  ldr x2, [x2, #8]
0xffff7abf5ac4    36  tbz w2, #2, #+0x18 (addr 0xffff7abf5adc)
0xffff7abf5ac8    40  sub csp, jssp, #0x8 (8)
0xffff7abf5acc    44  str lr, [jssp, #-8]!
0xffff7abf5ad0    48  ldr x16, pc+80 (addr 0x0000ffff7abf5b20)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf5ad4    52  blr x16
0xffff7abf5ad8    56  ldr lr, [jssp], #8
0xffff7abf5adc    60  stur x5, [x1, #-1]
0xffff7abf5ae0    64  tbz w5, #0, #+0x34 (addr 0xffff7abf5b14)
0xffff7abf5ae4    68  sub x2, x1, #0x1 (1)
0xffff7abf5ae8    72  and x5, x5, #0xfffffffffff00000
0xffff7abf5aec    76  ldr x5, [x5, #8]
0xffff7abf5af0    80  tbz w5, #1, #+0x24 (addr 0xffff7abf5b14)
0xffff7abf5af4    84  and x5, x1, #0xfffffffffff00000
0xffff7abf5af8    88  ldr x5, [x5, #8]
0xffff7abf5afc    92  tbz w5, #2, #+0x18 (addr 0xffff7abf5b14)
0xffff7abf5b00    96  sub csp, jssp, #0x8 (8)
0xffff7abf5b04   100  str lr, [jssp, #-8]!
0xffff7abf5b08   104  ldr x16, pc+32 (addr 0x0000ffff7abf5b28)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf5b0c   108  blr x16
0xffff7abf5b10   112  ldr lr, [jssp], #8
0xffff7abf5b14   116  ret
0xffff7abf5b18   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf5b1c   124  d63f03e0       constant
0xffff7abf5b20   128  7ab170c0       constant
0xffff7abf5b24   132  0000ffff       constant
0xffff7abf5b28   136  7ab38080       constant
0xffff7abf5b2c   140  0000ffff       constant
0xffff7abf5b30   144  movz x16, #0x0
0xffff7abf5b34   148  sub csp, jssp, #0x10 (16)
0xffff7abf5b38   152  stp fp, lr, [jssp, #-16]!
0xffff7abf5b3c   156  bl #+0x4 (addr 0xffff7abf5b40)
0xffff7abf5b40   160  movz x17, #0xa00000000
0xffff7abf5b44   164  sub csp, jssp, #0x10 (16)
0xffff7abf5b48   168  stp x17, cp, [jssp, #-16]!
0xffff7abf5b4c   172  add fp, jssp, #0x10 (16)
0xffff7abf5b50   176  ldr x17, pc+24 (addr 0x0000ffff7abf5b68)    ;; lazy deoptimization bailout 0
0xffff7abf5b54   180  add x17, x17, x16
0xffff7abf5b58   184  br x17
0xffff7abf5b5c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf5b60   192  d63f03e0       constant
0xffff7abf5b64   196  d503201f       constant
0xffff7abf5b68   200  7a906000       constant
0xffff7abf5b6c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf5ad0  code target (STUB)  (0xffff7ab170c0)
0xffff7abf5b08  code target (STUB)  (0xffff7ab38080)
0xffff7abf5b18  constant pool (size 24)
0xffff7abf5b50  runtime entry
0xffff7abf5b5c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = domain
compiler = unknown
Instructions (size = 152)
0xffff7abf5be0     0  sub csp, jssp, #0x8 (8)
0xffff7abf5be4     4  str x3, [jssp, #-8]!
0xffff7abf5be8     8  sub csp, jssp, #0x8 (8)
0xffff7abf5bec    12  str x4, [jssp, #-8]!
0xffff7abf5bf0    16  ldr x3, pc+88 (addr 0x0000ffff7abf5c48)    ;; object: 0x5d4e9049 Cell for 0
0xffff7abf5bf4    20  ldur x3, [x3, #7]
0xffff7abf5bf8    24  cmp x3, #0x0 (0)
0xffff7abf5bfc    28  b.ne #+0x30 (addr 0xffff7abf5c2c)
0xffff7abf5c00    32  tbz w0, #0, #+0x2c (addr 0xffff7abf5c2c)
0xffff7abf5c04    36  ldr x5, pc+76 (addr 0x0000ffff7abf5c50)    ;; object: 0x5d4e8f31 WeakCell for 0x4ec40481 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf5c08    40  ldur x5, [x5, #7]
0xffff7abf5c0c    44  tbz w5, #0, #+0x20 (addr 0xffff7abf5c2c)
0xffff7abf5c10    48  ldursw x4, [x5, #15]
0xffff7abf5c14    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf5c2c)
0xffff7abf5c18    56  ldr x4, [jssp], #8
0xffff7abf5c1c    60  ldr x3, [jssp], #8
0xffff7abf5c20    64  ldr x2, pc+56 (addr 0x0000ffff7abf5c58)    ;; object: 0x20db2439 <String[6]: domain>
0xffff7abf5c24    68  ldr x16, pc+60 (addr 0x0000ffff7abf5c60)    ;; code: HANDLER, StoreTransitionStub, minor: 198666
0xffff7abf5c28    72  br x16
0xffff7abf5c2c    76  ldr x2, pc+60 (addr 0x0000ffff7abf5c68)    ;; object: 0x20db2439 <String[6]: domain>
0xffff7abf5c30    80  ldr x4, [jssp], #8
0xffff7abf5c34    84  ldr x3, [jssp], #8
0xffff7abf5c38    88  ldr x16, pc+56 (addr 0x0000ffff7abf5c70)    ;; code: BUILTIN
0xffff7abf5c3c    92  br x16
0xffff7abf5c40    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf5c44   100  d63f03e0       constant
0xffff7abf5c48   104  5d4e9049       constant
0xffff7abf5c4c   108  00000000       constant
0xffff7abf5c50   112  5d4e8f31       constant
0xffff7abf5c54   116  00000000       constant
0xffff7abf5c58   120  20db2439       constant
0xffff7abf5c5c   124  00000000       constant
0xffff7abf5c60   128  7abf5aa0       constant
0xffff7abf5c64   132  0000ffff       constant
0xffff7abf5c68   136  20db2439       constant
0xffff7abf5c6c   140  00000000       constant
0xffff7abf5c70   144  7ab22420       constant
0xffff7abf5c74   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf5bf0  embedded object  (0x5d4e9049 Cell for 0)
0xffff7abf5c04  embedded object  (0x5d4e8f31 WeakCell for 0x4ec40481 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf5c20  embedded object  (0x20db2439 <String[6]: domain>)
0xffff7abf5c24  code target (HANDLER)  (0xffff7abf5aa0)
0xffff7abf5c2c  embedded object  (0x20db2439 <String[6]: domain>)
0xffff7abf5c38  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf5c40  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = _events
compiler = unknown
Instructions (size = 120)
0xffff7abf5ce0     0  sub csp, jssp, #0x8 (8)
0xffff7abf5ce4     4  str x3, [jssp, #-8]!
0xffff7abf5ce8     8  sub csp, jssp, #0x8 (8)
0xffff7abf5cec    12  str x0, [jssp, #-8]!
0xffff7abf5cf0    16  ldr x0, pc+72 (addr 0x0000ffff7abf5d38)    ;; object: 0x5d4e9049 Cell for 0
0xffff7abf5cf4    20  ldur x0, [x0, #7]
0xffff7abf5cf8    24  cmp x0, #0x0 (0)
0xffff7abf5cfc    28  b.ne #+0x14 (addr 0xffff7abf5d10)
0xffff7abf5d00    32  ldr x3, pc+64 (addr 0x0000ffff7abf5d40)    ;; object: 0x5d4e9131 WeakCell for 0x5d4acc61 <an Object with map 0x4ec1bf39>
0xffff7abf5d04    36  ldur x3, [x3, #7]
0xffff7abf5d08    40  tbz w3, #0, #+0x8 (addr 0xffff7abf5d10)
0xffff7abf5d0c    44  b #+0x14 (addr 0xffff7abf5d20)
0xffff7abf5d10    48  ldr x0, [jssp], #8
0xffff7abf5d14    52  ldr x3, [jssp], #8
0xffff7abf5d18    56  ldr x16, pc+48 (addr 0x0000ffff7abf5d48)    ;; code: BUILTIN
0xffff7abf5d1c    60  br x16
0xffff7abf5d20    64  add jssp, jssp, #0x10 (16)
0xffff7abf5d24    68  mov x1, x3
0xffff7abf5d28    72  ldr x16, pc+40 (addr 0x0000ffff7abf5d50)    ;; code: HANDLER, LoadFieldStub, minor: 2052
0xffff7abf5d2c    76  br x16
0xffff7abf5d30    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abf5d34    84  d63f03e0       constant
0xffff7abf5d38    88  5d4e9049       constant
0xffff7abf5d3c    92  00000000       constant
0xffff7abf5d40    96  5d4e9131       constant
0xffff7abf5d44   100  00000000       constant
0xffff7abf5d48   104  7ab222e0       constant
0xffff7abf5d4c   108  0000ffff       constant
0xffff7abf5d50   112  7ab78da0       constant
0xffff7abf5d54   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abf5cf0  embedded object  (0x5d4e9049 Cell for 0)
0xffff7abf5d00  embedded object  (0x5d4e9131 WeakCell for 0x5d4acc61 <an Object with map 0x4ec1bf39>)
0xffff7abf5d18  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abf5d28  code target (HANDLER)  (0xffff7ab78da0)
0xffff7abf5d30  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf5dc0     0  tbz w0, #0, #+0x90 (addr 0xffff7abf5e50)
0xffff7abf5dc4     4  mov x2, x0
0xffff7abf5dc8     8  stur x2, [x1, #87]
0xffff7abf5dcc    12  add x3, x1, #0x57 (87)
0xffff7abf5dd0    16  and x2, x2, #0xfffffffffff00000
0xffff7abf5dd4    20  ldr x2, [x2, #8]
0xffff7abf5dd8    24  tbz w2, #1, #+0x24 (addr 0xffff7abf5dfc)
0xffff7abf5ddc    28  and x2, x1, #0xfffffffffff00000
0xffff7abf5de0    32  ldr x2, [x2, #8]
0xffff7abf5de4    36  tbz w2, #2, #+0x18 (addr 0xffff7abf5dfc)
0xffff7abf5de8    40  sub csp, jssp, #0x8 (8)
0xffff7abf5dec    44  str lr, [jssp, #-8]!
0xffff7abf5df0    48  ldr x16, pc+80 (addr 0x0000ffff7abf5e40)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf5df4    52  blr x16
0xffff7abf5df8    56  ldr lr, [jssp], #8
0xffff7abf5dfc    60  stur x5, [x1, #-1]
0xffff7abf5e00    64  tbz w5, #0, #+0x34 (addr 0xffff7abf5e34)
0xffff7abf5e04    68  sub x2, x1, #0x1 (1)
0xffff7abf5e08    72  and x5, x5, #0xfffffffffff00000
0xffff7abf5e0c    76  ldr x5, [x5, #8]
0xffff7abf5e10    80  tbz w5, #1, #+0x24 (addr 0xffff7abf5e34)
0xffff7abf5e14    84  and x5, x1, #0xfffffffffff00000
0xffff7abf5e18    88  ldr x5, [x5, #8]
0xffff7abf5e1c    92  tbz w5, #2, #+0x18 (addr 0xffff7abf5e34)
0xffff7abf5e20    96  sub csp, jssp, #0x8 (8)
0xffff7abf5e24   100  str lr, [jssp, #-8]!
0xffff7abf5e28   104  ldr x16, pc+32 (addr 0x0000ffff7abf5e48)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf5e2c   108  blr x16
0xffff7abf5e30   112  ldr lr, [jssp], #8
0xffff7abf5e34   116  ret
0xffff7abf5e38   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf5e3c   124  d63f03e0       constant
0xffff7abf5e40   128  7ab170c0       constant
0xffff7abf5e44   132  0000ffff       constant
0xffff7abf5e48   136  7ab38080       constant
0xffff7abf5e4c   140  0000ffff       constant
0xffff7abf5e50   144  movz x16, #0x0
0xffff7abf5e54   148  sub csp, jssp, #0x10 (16)
0xffff7abf5e58   152  stp fp, lr, [jssp, #-16]!
0xffff7abf5e5c   156  bl #+0x4 (addr 0xffff7abf5e60)
0xffff7abf5e60   160  movz x17, #0xa00000000
0xffff7abf5e64   164  sub csp, jssp, #0x10 (16)
0xffff7abf5e68   168  stp x17, cp, [jssp, #-16]!
0xffff7abf5e6c   172  add fp, jssp, #0x10 (16)
0xffff7abf5e70   176  ldr x17, pc+24 (addr 0x0000ffff7abf5e88)    ;; lazy deoptimization bailout 0
0xffff7abf5e74   180  add x17, x17, x16
0xffff7abf5e78   184  br x17
0xffff7abf5e7c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf5e80   192  d63f03e0       constant
0xffff7abf5e84   196  d503201f       constant
0xffff7abf5e88   200  7a906000       constant
0xffff7abf5e8c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf5df0  code target (STUB)  (0xffff7ab170c0)
0xffff7abf5e28  code target (STUB)  (0xffff7ab38080)
0xffff7abf5e38  constant pool (size 24)
0xffff7abf5e70  runtime entry
0xffff7abf5e7c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf5dc0     0  tbz w0, #0, #+0x90 (addr 0xffff7abf5e50)
0xffff7abf5dc4     4  mov x2, x0
0xffff7abf5dc8     8  stur x2, [x1, #87]
0xffff7abf5dcc    12  add x3, x1, #0x57 (87)
0xffff7abf5dd0    16  and x2, x2, #0xfffffffffff00000
0xffff7abf5dd4    20  ldr x2, [x2, #8]
0xffff7abf5dd8    24  tbz w2, #1, #+0x24 (addr 0xffff7abf5dfc)
0xffff7abf5ddc    28  and x2, x1, #0xfffffffffff00000
0xffff7abf5de0    32  ldr x2, [x2, #8]
0xffff7abf5de4    36  tbz w2, #2, #+0x18 (addr 0xffff7abf5dfc)
0xffff7abf5de8    40  sub csp, jssp, #0x8 (8)
0xffff7abf5dec    44  str lr, [jssp, #-8]!
0xffff7abf5df0    48  ldr x16, pc+80 (addr 0x0000ffff7abf5e40)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf5df4    52  blr x16
0xffff7abf5df8    56  ldr lr, [jssp], #8
0xffff7abf5dfc    60  stur x5, [x1, #-1]
0xffff7abf5e00    64  tbz w5, #0, #+0x34 (addr 0xffff7abf5e34)
0xffff7abf5e04    68  sub x2, x1, #0x1 (1)
0xffff7abf5e08    72  and x5, x5, #0xfffffffffff00000
0xffff7abf5e0c    76  ldr x5, [x5, #8]
0xffff7abf5e10    80  tbz w5, #1, #+0x24 (addr 0xffff7abf5e34)
0xffff7abf5e14    84  and x5, x1, #0xfffffffffff00000
0xffff7abf5e18    88  ldr x5, [x5, #8]
0xffff7abf5e1c    92  tbz w5, #2, #+0x18 (addr 0xffff7abf5e34)
0xffff7abf5e20    96  sub csp, jssp, #0x8 (8)
0xffff7abf5e24   100  str lr, [jssp, #-8]!
0xffff7abf5e28   104  ldr x16, pc+32 (addr 0x0000ffff7abf5e48)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf5e2c   108  blr x16
0xffff7abf5e30   112  ldr lr, [jssp], #8
0xffff7abf5e34   116  ret
0xffff7abf5e38   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf5e3c   124  d63f03e0       constant
0xffff7abf5e40   128  7ab170c0       constant
0xffff7abf5e44   132  0000ffff       constant
0xffff7abf5e48   136  7ab38080       constant
0xffff7abf5e4c   140  0000ffff       constant
0xffff7abf5e50   144  movz x16, #0x0
0xffff7abf5e54   148  sub csp, jssp, #0x10 (16)
0xffff7abf5e58   152  stp fp, lr, [jssp, #-16]!
0xffff7abf5e5c   156  bl #+0x4 (addr 0xffff7abf5e60)
0xffff7abf5e60   160  movz x17, #0xa00000000
0xffff7abf5e64   164  sub csp, jssp, #0x10 (16)
0xffff7abf5e68   168  stp x17, cp, [jssp, #-16]!
0xffff7abf5e6c   172  add fp, jssp, #0x10 (16)
0xffff7abf5e70   176  ldr x17, pc+24 (addr 0x0000ffff7abf5e88)    ;; lazy deoptimization bailout 0
0xffff7abf5e74   180  add x17, x17, x16
0xffff7abf5e78   184  br x17
0xffff7abf5e7c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf5e80   192  d63f03e0       constant
0xffff7abf5e84   196  d503201f       constant
0xffff7abf5e88   200  7a906000       constant
0xffff7abf5e8c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf5df0  code target (STUB)  (0xffff7ab170c0)
0xffff7abf5e28  code target (STUB)  (0xffff7ab38080)
0xffff7abf5e38  constant pool (size 24)
0xffff7abf5e70  runtime entry
0xffff7abf5e7c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = _events
compiler = unknown
Instructions (size = 152)
0xffff7abf5f00     0  sub csp, jssp, #0x8 (8)
0xffff7abf5f04     4  str x3, [jssp, #-8]!
0xffff7abf5f08     8  sub csp, jssp, #0x8 (8)
0xffff7abf5f0c    12  str x4, [jssp, #-8]!
0xffff7abf5f10    16  ldr x3, pc+88 (addr 0x0000ffff7abf5f68)    ;; object: 0x5d4e9049 Cell for 0
0xffff7abf5f14    20  ldur x3, [x3, #7]
0xffff7abf5f18    24  cmp x3, #0x0 (0)
0xffff7abf5f1c    28  b.ne #+0x30 (addr 0xffff7abf5f4c)
0xffff7abf5f20    32  tbz w0, #0, #+0x2c (addr 0xffff7abf5f4c)
0xffff7abf5f24    36  ldr x5, pc+76 (addr 0x0000ffff7abf5f70)    ;; object: 0x5d4e9181 WeakCell for 0x4ec404d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf5f28    40  ldur x5, [x5, #7]
0xffff7abf5f2c    44  tbz w5, #0, #+0x20 (addr 0xffff7abf5f4c)
0xffff7abf5f30    48  ldursw x4, [x5, #15]
0xffff7abf5f34    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf5f4c)
0xffff7abf5f38    56  ldr x4, [jssp], #8
0xffff7abf5f3c    60  ldr x3, [jssp], #8
0xffff7abf5f40    64  ldr x2, pc+56 (addr 0x0000ffff7abf5f78)    ;; object: 0x20db2591 <String[7]: _events>
0xffff7abf5f44    68  ldr x16, pc+60 (addr 0x0000ffff7abf5f80)    ;; code: HANDLER, StoreTransitionStub, minor: 198667
0xffff7abf5f48    72  br x16
0xffff7abf5f4c    76  ldr x2, pc+60 (addr 0x0000ffff7abf5f88)    ;; object: 0x20db2591 <String[7]: _events>
0xffff7abf5f50    80  ldr x4, [jssp], #8
0xffff7abf5f54    84  ldr x3, [jssp], #8
0xffff7abf5f58    88  ldr x16, pc+56 (addr 0x0000ffff7abf5f90)    ;; code: BUILTIN
0xffff7abf5f5c    92  br x16
0xffff7abf5f60    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf5f64   100  d63f03e0       constant
0xffff7abf5f68   104  5d4e9049       constant
0xffff7abf5f6c   108  00000000       constant
0xffff7abf5f70   112  5d4e9181       constant
0xffff7abf5f74   116  00000000       constant
0xffff7abf5f78   120  20db2591       constant
0xffff7abf5f7c   124  00000000       constant
0xffff7abf5f80   128  7abf5dc0       constant
0xffff7abf5f84   132  0000ffff       constant
0xffff7abf5f88   136  20db2591       constant
0xffff7abf5f8c   140  00000000       constant
0xffff7abf5f90   144  7ab22420       constant
0xffff7abf5f94   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf5f10  embedded object  (0x5d4e9049 Cell for 0)
0xffff7abf5f24  embedded object  (0x5d4e9181 WeakCell for 0x4ec404d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf5f40  embedded object  (0x20db2591 <String[7]: _events>)
0xffff7abf5f44  code target (HANDLER)  (0xffff7abf5dc0)
0xffff7abf5f4c  embedded object  (0x20db2591 <String[7]: _events>)
0xffff7abf5f58  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf5f60  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0xffff7abf6000     0  mov x6, x0
0xffff7abf6004     4  tbnz w6, #0, #+0x54 (addr 0xffff7abf6058)
0xffff7abf6008     8  stur x6, [x1, #95]
0xffff7abf600c    12  stur x5, [x1, #-1]
0xffff7abf6010    16  tbz w5, #0, #+0x34 (addr 0xffff7abf6044)
0xffff7abf6014    20  sub x2, x1, #0x1 (1)
0xffff7abf6018    24  and x5, x5, #0xfffffffffff00000
0xffff7abf601c    28  ldr x5, [x5, #8]
0xffff7abf6020    32  tbz w5, #1, #+0x24 (addr 0xffff7abf6044)
0xffff7abf6024    36  and x5, x1, #0xfffffffffff00000
0xffff7abf6028    40  ldr x5, [x5, #8]
0xffff7abf602c    44  tbz w5, #2, #+0x18 (addr 0xffff7abf6044)
0xffff7abf6030    48  sub csp, jssp, #0x8 (8)
0xffff7abf6034    52  str lr, [jssp, #-8]!
0xffff7abf6038    56  ldr x16, pc+24 (addr 0x0000ffff7abf6050)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf603c    60  blr x16
0xffff7abf6040    64  ldr lr, [jssp], #8
0xffff7abf6044    68  ret
0xffff7abf6048    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf604c    76  d63f03e0       constant
0xffff7abf6050    80  7ab38080       constant
0xffff7abf6054    84  0000ffff       constant
0xffff7abf6058    88  movz x16, #0x0
0xffff7abf605c    92  sub csp, jssp, #0x10 (16)
0xffff7abf6060    96  stp fp, lr, [jssp, #-16]!
0xffff7abf6064   100  bl #+0x4 (addr 0xffff7abf6068)
0xffff7abf6068   104  movz x17, #0xa00000000
0xffff7abf606c   108  sub csp, jssp, #0x10 (16)
0xffff7abf6070   112  stp x17, cp, [jssp, #-16]!
0xffff7abf6074   116  add fp, jssp, #0x10 (16)
0xffff7abf6078   120  ldr x17, pc+24 (addr 0x0000ffff7abf6090)    ;; lazy deoptimization bailout 0
0xffff7abf607c   124  add x17, x17, x16
0xffff7abf6080   128  br x17
0xffff7abf6084   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf6088   136  d63f03e0       constant
0xffff7abf608c   140  d503201f       constant
0xffff7abf6090   144  7a906000       constant
0xffff7abf6094   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf6038  code target (STUB)  (0xffff7ab38080)
0xffff7abf6048  constant pool (size 16)
0xffff7abf6078  runtime entry
0xffff7abf6084  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0xffff7abf6000     0  mov x6, x0
0xffff7abf6004     4  tbnz w6, #0, #+0x54 (addr 0xffff7abf6058)
0xffff7abf6008     8  stur x6, [x1, #95]
0xffff7abf600c    12  stur x5, [x1, #-1]
0xffff7abf6010    16  tbz w5, #0, #+0x34 (addr 0xffff7abf6044)
0xffff7abf6014    20  sub x2, x1, #0x1 (1)
0xffff7abf6018    24  and x5, x5, #0xfffffffffff00000
0xffff7abf601c    28  ldr x5, [x5, #8]
0xffff7abf6020    32  tbz w5, #1, #+0x24 (addr 0xffff7abf6044)
0xffff7abf6024    36  and x5, x1, #0xfffffffffff00000
0xffff7abf6028    40  ldr x5, [x5, #8]
0xffff7abf602c    44  tbz w5, #2, #+0x18 (addr 0xffff7abf6044)
0xffff7abf6030    48  sub csp, jssp, #0x8 (8)
0xffff7abf6034    52  str lr, [jssp, #-8]!
0xffff7abf6038    56  ldr x16, pc+24 (addr 0x0000ffff7abf6050)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf603c    60  blr x16
0xffff7abf6040    64  ldr lr, [jssp], #8
0xffff7abf6044    68  ret
0xffff7abf6048    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf604c    76  d63f03e0       constant
0xffff7abf6050    80  7ab38080       constant
0xffff7abf6054    84  0000ffff       constant
0xffff7abf6058    88  movz x16, #0x0
0xffff7abf605c    92  sub csp, jssp, #0x10 (16)
0xffff7abf6060    96  stp fp, lr, [jssp, #-16]!
0xffff7abf6064   100  bl #+0x4 (addr 0xffff7abf6068)
0xffff7abf6068   104  movz x17, #0xa00000000
0xffff7abf606c   108  sub csp, jssp, #0x10 (16)
0xffff7abf6070   112  stp x17, cp, [jssp, #-16]!
0xffff7abf6074   116  add fp, jssp, #0x10 (16)
0xffff7abf6078   120  ldr x17, pc+24 (addr 0x0000ffff7abf6090)    ;; lazy deoptimization bailout 0
0xffff7abf607c   124  add x17, x17, x16
0xffff7abf6080   128  br x17
0xffff7abf6084   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf6088   136  d63f03e0       constant
0xffff7abf608c   140  d503201f       constant
0xffff7abf6090   144  7a906000       constant
0xffff7abf6094   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf6038  code target (STUB)  (0xffff7ab38080)
0xffff7abf6048  constant pool (size 16)
0xffff7abf6078  runtime entry
0xffff7abf6084  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = _eventsCount
compiler = unknown
Instructions (size = 152)
0xffff7abf6100     0  sub csp, jssp, #0x8 (8)
0xffff7abf6104     4  str x3, [jssp, #-8]!
0xffff7abf6108     8  sub csp, jssp, #0x8 (8)
0xffff7abf610c    12  str x4, [jssp, #-8]!
0xffff7abf6110    16  ldr x3, pc+88 (addr 0x0000ffff7abf6168)    ;; object: 0x5d4e9049 Cell for 0
0xffff7abf6114    20  ldur x3, [x3, #7]
0xffff7abf6118    24  cmp x3, #0x0 (0)
0xffff7abf611c    28  b.ne #+0x2c (addr 0xffff7abf6148)
0xffff7abf6120    32  ldr x5, pc+80 (addr 0x0000ffff7abf6170)    ;; object: 0x5d4e9271 WeakCell for 0x4ec40531 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf6124    36  ldur x5, [x5, #7]
0xffff7abf6128    40  tbz w5, #0, #+0x20 (addr 0xffff7abf6148)
0xffff7abf612c    44  ldursw x4, [x5, #15]
0xffff7abf6130    48  tbnz w4, #23, #+0x18 (addr 0xffff7abf6148)
0xffff7abf6134    52  ldr x4, [jssp], #8
0xffff7abf6138    56  ldr x3, [jssp], #8
0xffff7abf613c    60  ldr x2, pc+60 (addr 0x0000ffff7abf6178)    ;; object: 0x20db93b9 <String[12]: _eventsCount>
0xffff7abf6140    64  ldr x16, pc+64 (addr 0x0000ffff7abf6180)    ;; code: HANDLER, StoreTransitionStub, minor: 174092
0xffff7abf6144    68  br x16
0xffff7abf6148    72  ldr x2, pc+64 (addr 0x0000ffff7abf6188)    ;; object: 0x20db93b9 <String[12]: _eventsCount>
0xffff7abf614c    76  ldr x4, [jssp], #8
0xffff7abf6150    80  ldr x3, [jssp], #8
0xffff7abf6154    84  ldr x16, pc+60 (addr 0x0000ffff7abf6190)    ;; code: BUILTIN
0xffff7abf6158    88  br x16
0xffff7abf615c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abf6160    96  d63f03e0       constant
0xffff7abf6164   100  d503201f       constant
0xffff7abf6168   104  5d4e9049       constant
0xffff7abf616c   108  00000000       constant
0xffff7abf6170   112  5d4e9271       constant
0xffff7abf6174   116  00000000       constant
0xffff7abf6178   120  20db93b9       constant
0xffff7abf617c   124  00000000       constant
0xffff7abf6180   128  7abf6000       constant
0xffff7abf6184   132  0000ffff       constant
0xffff7abf6188   136  20db93b9       constant
0xffff7abf618c   140  00000000       constant
0xffff7abf6190   144  7ab22420       constant
0xffff7abf6194   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf6110  embedded object  (0x5d4e9049 Cell for 0)
0xffff7abf6120  embedded object  (0x5d4e9271 WeakCell for 0x4ec40531 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf613c  embedded object  (0x20db93b9 <String[12]: _eventsCount>)
0xffff7abf6140  code target (HANDLER)  (0xffff7abf6000)
0xffff7abf6148  embedded object  (0x20db93b9 <String[12]: _eventsCount>)
0xffff7abf6154  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf615c  constant pool (size 60)

kind = HANDLER
major_key = <NoCache>Stub
name = _maxListeners
compiler = unknown
Instructions (size = 120)
0xffff7abf6200     0  sub csp, jssp, #0x8 (8)
0xffff7abf6204     4  str x3, [jssp, #-8]!
0xffff7abf6208     8  sub csp, jssp, #0x8 (8)
0xffff7abf620c    12  str x0, [jssp, #-8]!
0xffff7abf6210    16  ldr x0, pc+72 (addr 0x0000ffff7abf6258)    ;; object: 0x5d4e9049 Cell for 0
0xffff7abf6214    20  ldur x0, [x0, #7]
0xffff7abf6218    24  cmp x0, #0x0 (0)
0xffff7abf621c    28  b.ne #+0x14 (addr 0xffff7abf6230)
0xffff7abf6220    32  ldr x3, pc+64 (addr 0x0000ffff7abf6260)    ;; object: 0x5d4e9361 WeakCell for 0x5d4acc61 <an Object with map 0x4ec1bf39>
0xffff7abf6224    36  ldur x3, [x3, #7]
0xffff7abf6228    40  tbz w3, #0, #+0x8 (addr 0xffff7abf6230)
0xffff7abf622c    44  b #+0x14 (addr 0xffff7abf6240)
0xffff7abf6230    48  ldr x0, [jssp], #8
0xffff7abf6234    52  ldr x3, [jssp], #8
0xffff7abf6238    56  ldr x16, pc+48 (addr 0x0000ffff7abf6268)    ;; code: BUILTIN
0xffff7abf623c    60  br x16
0xffff7abf6240    64  add jssp, jssp, #0x10 (16)
0xffff7abf6244    68  mov x1, x3
0xffff7abf6248    72  ldr x16, pc+40 (addr 0x0000ffff7abf6270)    ;; code: HANDLER, LoadFieldStub, minor: 2053
0xffff7abf624c    76  br x16
0xffff7abf6250    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abf6254    84  d63f03e0       constant
0xffff7abf6258    88  5d4e9049       constant
0xffff7abf625c    92  00000000       constant
0xffff7abf6260    96  5d4e9361       constant
0xffff7abf6264   100  00000000       constant
0xffff7abf6268   104  7ab222e0       constant
0xffff7abf626c   108  0000ffff       constant
0xffff7abf6270   112  7ab78e20       constant
0xffff7abf6274   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abf6210  embedded object  (0x5d4e9049 Cell for 0)
0xffff7abf6220  embedded object  (0x5d4e9361 WeakCell for 0x5d4acc61 <an Object with map 0x4ec1bf39>)
0xffff7abf6238  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abf6248  code target (HANDLER)  (0xffff7ab78e20)
0xffff7abf6250  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = _maxListeners
compiler = unknown
Instructions (size = 152)
0xffff7abf62e0     0  sub csp, jssp, #0x8 (8)
0xffff7abf62e4     4  str x3, [jssp, #-8]!
0xffff7abf62e8     8  sub csp, jssp, #0x8 (8)
0xffff7abf62ec    12  str x4, [jssp, #-8]!
0xffff7abf62f0    16  ldr x3, pc+88 (addr 0x0000ffff7abf6348)    ;; object: 0x5d4e9049 Cell for 0
0xffff7abf62f4    20  ldur x3, [x3, #7]
0xffff7abf62f8    24  cmp x3, #0x0 (0)
0xffff7abf62fc    28  b.ne #+0x30 (addr 0xffff7abf632c)
0xffff7abf6300    32  tbz w0, #0, #+0x2c (addr 0xffff7abf632c)
0xffff7abf6304    36  ldr x5, pc+76 (addr 0x0000ffff7abf6350)    ;; object: 0x5d4e9399 WeakCell for 0x4ec40589 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf6308    40  ldur x5, [x5, #7]
0xffff7abf630c    44  tbz w5, #0, #+0x20 (addr 0xffff7abf632c)
0xffff7abf6310    48  ldursw x4, [x5, #15]
0xffff7abf6314    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf632c)
0xffff7abf6318    56  ldr x4, [jssp], #8
0xffff7abf631c    60  ldr x3, [jssp], #8
0xffff7abf6320    64  ldr x2, pc+56 (addr 0x0000ffff7abf6358)    ;; object: 0x20dc32b1 <String[13]: _maxListeners>
0xffff7abf6324    68  ldr x16, pc+60 (addr 0x0000ffff7abf6360)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0xffff7abf6328    72  br x16
0xffff7abf632c    76  ldr x2, pc+60 (addr 0x0000ffff7abf6368)    ;; object: 0x20dc32b1 <String[13]: _maxListeners>
0xffff7abf6330    80  ldr x4, [jssp], #8
0xffff7abf6334    84  ldr x3, [jssp], #8
0xffff7abf6338    88  ldr x16, pc+56 (addr 0x0000ffff7abf6370)    ;; code: BUILTIN
0xffff7abf633c    92  br x16
0xffff7abf6340    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf6344   100  d63f03e0       constant
0xffff7abf6348   104  5d4e9049       constant
0xffff7abf634c   108  00000000       constant
0xffff7abf6350   112  5d4e9399       constant
0xffff7abf6354   116  00000000       constant
0xffff7abf6358   120  20dc32b1       constant
0xffff7abf635c   124  00000000       constant
0xffff7abf6360   128  7ab38860       constant
0xffff7abf6364   132  0000ffff       constant
0xffff7abf6368   136  20dc32b1       constant
0xffff7abf636c   140  00000000       constant
0xffff7abf6370   144  7ab22420       constant
0xffff7abf6374   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf62f0  embedded object  (0x5d4e9049 Cell for 0)
0xffff7abf6304  embedded object  (0x5d4e9399 WeakCell for 0x4ec40589 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf6320  embedded object  (0x20dc32b1 <String[13]: _maxListeners>)
0xffff7abf6324  code target (HANDLER)  (0xffff7ab38860)
0xffff7abf632c  embedded object  (0x20dc32b1 <String[13]: _maxListeners>)
0xffff7abf6338  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf6340  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = objectMode
compiler = unknown
Instructions (size = 152)
0xffff7abf63e0     0  sub csp, jssp, #0x8 (8)
0xffff7abf63e4     4  str x3, [jssp, #-8]!
0xffff7abf63e8     8  sub csp, jssp, #0x8 (8)
0xffff7abf63ec    12  str x4, [jssp, #-8]!
0xffff7abf63f0    16  ldr x3, pc+88 (addr 0x0000ffff7abf6448)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf63f4    20  ldur x3, [x3, #7]
0xffff7abf63f8    24  cmp x3, #0x0 (0)
0xffff7abf63fc    28  b.ne #+0x30 (addr 0xffff7abf642c)
0xffff7abf6400    32  tbz w0, #0, #+0x2c (addr 0xffff7abf642c)
0xffff7abf6404    36  ldr x5, pc+76 (addr 0x0000ffff7abf6450)    ;; object: 0x5d4d14b9 WeakCell for 0x4ec38029 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf6408    40  ldur x5, [x5, #7]
0xffff7abf640c    44  tbz w5, #0, #+0x20 (addr 0xffff7abf642c)
0xffff7abf6410    48  ldursw x4, [x5, #15]
0xffff7abf6414    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf642c)
0xffff7abf6418    56  ldr x4, [jssp], #8
0xffff7abf641c    60  ldr x3, [jssp], #8
0xffff7abf6420    64  ldr x2, pc+56 (addr 0x0000ffff7abf6458)    ;; object: 0x5d41d821 <String[10]: objectMode>
0xffff7abf6424    68  ldr x16, pc+60 (addr 0x0000ffff7abf6460)    ;; code: HANDLER, StoreTransitionStub, minor: 198659
0xffff7abf6428    72  br x16
0xffff7abf642c    76  ldr x2, pc+60 (addr 0x0000ffff7abf6468)    ;; object: 0x5d41d821 <String[10]: objectMode>
0xffff7abf6430    80  ldr x4, [jssp], #8
0xffff7abf6434    84  ldr x3, [jssp], #8
0xffff7abf6438    88  ldr x16, pc+56 (addr 0x0000ffff7abf6470)    ;; code: BUILTIN
0xffff7abf643c    92  br x16
0xffff7abf6440    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf6444   100  d63f03e0       constant
0xffff7abf6448   104  5d4e9429       constant
0xffff7abf644c   108  00000000       constant
0xffff7abf6450   112  5d4d14b9       constant
0xffff7abf6454   116  00000000       constant
0xffff7abf6458   120  5d41d821       constant
0xffff7abf645c   124  00000000       constant
0xffff7abf6460   128  7ab8b940       constant
0xffff7abf6464   132  0000ffff       constant
0xffff7abf6468   136  5d41d821       constant
0xffff7abf646c   140  00000000       constant
0xffff7abf6470   144  7ab22420       constant
0xffff7abf6474   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf63f0  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf6404  embedded object  (0x5d4d14b9 WeakCell for 0x4ec38029 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf6420  embedded object  (0x5d41d821 <String[10]: objectMode>)
0xffff7abf6424  code target (HANDLER)  (0xffff7ab8b940)
0xffff7abf642c  embedded object  (0x5d41d821 <String[10]: objectMode>)
0xffff7abf6438  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf6440  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
compiler = unknown
Instructions (size = 120)
0xffff7abf64e0     0  sub csp, jssp, #0x8 (8)
0xffff7abf64e4     4  str x3, [jssp, #-8]!
0xffff7abf64e8     8  sub csp, jssp, #0x8 (8)
0xffff7abf64ec    12  str x0, [jssp, #-8]!
0xffff7abf64f0    16  ldr x0, pc+72 (addr 0x0000ffff7abf6538)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7abf64f4    20  ldur x0, [x0, #7]
0xffff7abf64f8    24  cmp x0, #0x0 (0)
0xffff7abf64fc    28  b.ne #+0x14 (addr 0xffff7abf6510)
0xffff7abf6500    32  ldr x3, pc+64 (addr 0x0000ffff7abf6540)    ;; object: 0x5d4e9489 WeakCell for 0x20d40019 <JS Function (SharedFunctionInfo 0x20d3ff71)>
0xffff7abf6504    36  ldur x3, [x3, #7]
0xffff7abf6508    40  tbz w3, #0, #+0x8 (addr 0xffff7abf6510)
0xffff7abf650c    44  b #+0x14 (addr 0xffff7abf6520)
0xffff7abf6510    48  ldr x0, [jssp], #8
0xffff7abf6514    52  ldr x3, [jssp], #8
0xffff7abf6518    56  ldr x16, pc+48 (addr 0x0000ffff7abf6548)    ;; code: BUILTIN
0xffff7abf651c    60  br x16
0xffff7abf6520    64  add jssp, jssp, #0x10 (16)
0xffff7abf6524    68  mov x1, x3
0xffff7abf6528    72  ldr x16, pc+40 (addr 0x0000ffff7abf6550)    ;; code: HANDLER, LoadConstantStub, minor: 8
0xffff7abf652c    76  br x16
0xffff7abf6530    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abf6534    84  d63f03e0       constant
0xffff7abf6538    88  20d5b0f1       constant
0xffff7abf653c    92  00000000       constant
0xffff7abf6540    96  5d4e9489       constant
0xffff7abf6544   100  00000000       constant
0xffff7abf6548   104  7ab222e0       constant
0xffff7abf654c   108  0000ffff       constant
0xffff7abf6550   112  7ab4c160       constant
0xffff7abf6554   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abf64f0  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7abf6500  embedded object  (0x5d4e9489 WeakCell for 0x20d40019 <JS Function (SharedFunctionInfo 0x20d3ff71)>)
0xffff7abf6518  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abf6528  code target (HANDLER)  (0xffff7ab4c160)
0xffff7abf6530  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0xffff7abf65c0     0  mov x6, x0
0xffff7abf65c4     4  tbnz w6, #0, #+0x54 (addr 0xffff7abf6618)
0xffff7abf65c8     8  stur x6, [x1, #31]
0xffff7abf65cc    12  stur x5, [x1, #-1]
0xffff7abf65d0    16  tbz w5, #0, #+0x34 (addr 0xffff7abf6604)
0xffff7abf65d4    20  sub x2, x1, #0x1 (1)
0xffff7abf65d8    24  and x5, x5, #0xfffffffffff00000
0xffff7abf65dc    28  ldr x5, [x5, #8]
0xffff7abf65e0    32  tbz w5, #1, #+0x24 (addr 0xffff7abf6604)
0xffff7abf65e4    36  and x5, x1, #0xfffffffffff00000
0xffff7abf65e8    40  ldr x5, [x5, #8]
0xffff7abf65ec    44  tbz w5, #2, #+0x18 (addr 0xffff7abf6604)
0xffff7abf65f0    48  sub csp, jssp, #0x8 (8)
0xffff7abf65f4    52  str lr, [jssp, #-8]!
0xffff7abf65f8    56  ldr x16, pc+24 (addr 0x0000ffff7abf6610)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf65fc    60  blr x16
0xffff7abf6600    64  ldr lr, [jssp], #8
0xffff7abf6604    68  ret
0xffff7abf6608    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf660c    76  d63f03e0       constant
0xffff7abf6610    80  7ab38080       constant
0xffff7abf6614    84  0000ffff       constant
0xffff7abf6618    88  movz x16, #0x0
0xffff7abf661c    92  sub csp, jssp, #0x10 (16)
0xffff7abf6620    96  stp fp, lr, [jssp, #-16]!
0xffff7abf6624   100  bl #+0x4 (addr 0xffff7abf6628)
0xffff7abf6628   104  movz x17, #0xa00000000
0xffff7abf662c   108  sub csp, jssp, #0x10 (16)
0xffff7abf6630   112  stp x17, cp, [jssp, #-16]!
0xffff7abf6634   116  add fp, jssp, #0x10 (16)
0xffff7abf6638   120  ldr x17, pc+24 (addr 0x0000ffff7abf6650)    ;; lazy deoptimization bailout 0
0xffff7abf663c   124  add x17, x17, x16
0xffff7abf6640   128  br x17
0xffff7abf6644   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf6648   136  d63f03e0       constant
0xffff7abf664c   140  d503201f       constant
0xffff7abf6650   144  7a906000       constant
0xffff7abf6654   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf65f8  code target (STUB)  (0xffff7ab38080)
0xffff7abf6608  constant pool (size 16)
0xffff7abf6638  runtime entry
0xffff7abf6644  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0xffff7abf65c0     0  mov x6, x0
0xffff7abf65c4     4  tbnz w6, #0, #+0x54 (addr 0xffff7abf6618)
0xffff7abf65c8     8  stur x6, [x1, #31]
0xffff7abf65cc    12  stur x5, [x1, #-1]
0xffff7abf65d0    16  tbz w5, #0, #+0x34 (addr 0xffff7abf6604)
0xffff7abf65d4    20  sub x2, x1, #0x1 (1)
0xffff7abf65d8    24  and x5, x5, #0xfffffffffff00000
0xffff7abf65dc    28  ldr x5, [x5, #8]
0xffff7abf65e0    32  tbz w5, #1, #+0x24 (addr 0xffff7abf6604)
0xffff7abf65e4    36  and x5, x1, #0xfffffffffff00000
0xffff7abf65e8    40  ldr x5, [x5, #8]
0xffff7abf65ec    44  tbz w5, #2, #+0x18 (addr 0xffff7abf6604)
0xffff7abf65f0    48  sub csp, jssp, #0x8 (8)
0xffff7abf65f4    52  str lr, [jssp, #-8]!
0xffff7abf65f8    56  ldr x16, pc+24 (addr 0x0000ffff7abf6610)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf65fc    60  blr x16
0xffff7abf6600    64  ldr lr, [jssp], #8
0xffff7abf6604    68  ret
0xffff7abf6608    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf660c    76  d63f03e0       constant
0xffff7abf6610    80  7ab38080       constant
0xffff7abf6614    84  0000ffff       constant
0xffff7abf6618    88  movz x16, #0x0
0xffff7abf661c    92  sub csp, jssp, #0x10 (16)
0xffff7abf6620    96  stp fp, lr, [jssp, #-16]!
0xffff7abf6624   100  bl #+0x4 (addr 0xffff7abf6628)
0xffff7abf6628   104  movz x17, #0xa00000000
0xffff7abf662c   108  sub csp, jssp, #0x10 (16)
0xffff7abf6630   112  stp x17, cp, [jssp, #-16]!
0xffff7abf6634   116  add fp, jssp, #0x10 (16)
0xffff7abf6638   120  ldr x17, pc+24 (addr 0x0000ffff7abf6650)    ;; lazy deoptimization bailout 0
0xffff7abf663c   124  add x17, x17, x16
0xffff7abf6640   128  br x17
0xffff7abf6644   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf6648   136  d63f03e0       constant
0xffff7abf664c   140  d503201f       constant
0xffff7abf6650   144  7a906000       constant
0xffff7abf6654   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf65f8  code target (STUB)  (0xffff7ab38080)
0xffff7abf6608  constant pool (size 16)
0xffff7abf6638  runtime entry
0xffff7abf6644  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = highWaterMark
compiler = unknown
Instructions (size = 152)
0xffff7abf66c0     0  sub csp, jssp, #0x8 (8)
0xffff7abf66c4     4  str x3, [jssp, #-8]!
0xffff7abf66c8     8  sub csp, jssp, #0x8 (8)
0xffff7abf66cc    12  str x4, [jssp, #-8]!
0xffff7abf66d0    16  ldr x3, pc+88 (addr 0x0000ffff7abf6728)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf66d4    20  ldur x3, [x3, #7]
0xffff7abf66d8    24  cmp x3, #0x0 (0)
0xffff7abf66dc    28  b.ne #+0x2c (addr 0xffff7abf6708)
0xffff7abf66e0    32  ldr x5, pc+80 (addr 0x0000ffff7abf6730)    ;; object: 0x5d4d14f1 WeakCell for 0x4ec38081 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf66e4    36  ldur x5, [x5, #7]
0xffff7abf66e8    40  tbz w5, #0, #+0x20 (addr 0xffff7abf6708)
0xffff7abf66ec    44  ldursw x4, [x5, #15]
0xffff7abf66f0    48  tbnz w4, #23, #+0x18 (addr 0xffff7abf6708)
0xffff7abf66f4    52  ldr x4, [jssp], #8
0xffff7abf66f8    56  ldr x3, [jssp], #8
0xffff7abf66fc    60  ldr x2, pc+60 (addr 0x0000ffff7abf6738)    ;; object: 0x20df91d9 <String[13]: highWaterMark>
0xffff7abf6700    64  ldr x16, pc+64 (addr 0x0000ffff7abf6740)    ;; code: HANDLER, StoreTransitionStub, minor: 174084
0xffff7abf6704    68  br x16
0xffff7abf6708    72  ldr x2, pc+64 (addr 0x0000ffff7abf6748)    ;; object: 0x20df91d9 <String[13]: highWaterMark>
0xffff7abf670c    76  ldr x4, [jssp], #8
0xffff7abf6710    80  ldr x3, [jssp], #8
0xffff7abf6714    84  ldr x16, pc+60 (addr 0x0000ffff7abf6750)    ;; code: BUILTIN
0xffff7abf6718    88  br x16
0xffff7abf671c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abf6720    96  d63f03e0       constant
0xffff7abf6724   100  d503201f       constant
0xffff7abf6728   104  5d4e9429       constant
0xffff7abf672c   108  00000000       constant
0xffff7abf6730   112  5d4d14f1       constant
0xffff7abf6734   116  00000000       constant
0xffff7abf6738   120  20df91d9       constant
0xffff7abf673c   124  00000000       constant
0xffff7abf6740   128  7abf65c0       constant
0xffff7abf6744   132  0000ffff       constant
0xffff7abf6748   136  20df91d9       constant
0xffff7abf674c   140  00000000       constant
0xffff7abf6750   144  7ab22420       constant
0xffff7abf6754   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf66d0  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf66e0  embedded object  (0x5d4d14f1 WeakCell for 0x4ec38081 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf66fc  embedded object  (0x20df91d9 <String[13]: highWaterMark>)
0xffff7abf6700  code target (HANDLER)  (0xffff7abf65c0)
0xffff7abf6708  embedded object  (0x20df91d9 <String[13]: highWaterMark>)
0xffff7abf6714  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf671c  constant pool (size 60)

kind = HANDLER
major_key = <NoCache>Stub
name = needDrain
compiler = unknown
Instructions (size = 152)
0xffff7abf67c0     0  sub csp, jssp, #0x8 (8)
0xffff7abf67c4     4  str x3, [jssp, #-8]!
0xffff7abf67c8     8  sub csp, jssp, #0x8 (8)
0xffff7abf67cc    12  str x4, [jssp, #-8]!
0xffff7abf67d0    16  ldr x3, pc+88 (addr 0x0000ffff7abf6828)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf67d4    20  ldur x3, [x3, #7]
0xffff7abf67d8    24  cmp x3, #0x0 (0)
0xffff7abf67dc    28  b.ne #+0x30 (addr 0xffff7abf680c)
0xffff7abf67e0    32  tbz w0, #0, #+0x2c (addr 0xffff7abf680c)
0xffff7abf67e4    36  ldr x5, pc+76 (addr 0x0000ffff7abf6830)    ;; object: 0x5d4d1509 WeakCell for 0x4ec380d9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf67e8    40  ldur x5, [x5, #7]
0xffff7abf67ec    44  tbz w5, #0, #+0x20 (addr 0xffff7abf680c)
0xffff7abf67f0    48  ldursw x4, [x5, #15]
0xffff7abf67f4    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf680c)
0xffff7abf67f8    56  ldr x4, [jssp], #8
0xffff7abf67fc    60  ldr x3, [jssp], #8
0xffff7abf6800    64  ldr x2, pc+56 (addr 0x0000ffff7abf6838)    ;; object: 0x5d41e111 <String[9]: needDrain>
0xffff7abf6804    68  ldr x16, pc+60 (addr 0x0000ffff7abf6840)    ;; code: HANDLER, StoreTransitionStub, minor: 198661
0xffff7abf6808    72  br x16
0xffff7abf680c    76  ldr x2, pc+60 (addr 0x0000ffff7abf6848)    ;; object: 0x5d41e111 <String[9]: needDrain>
0xffff7abf6810    80  ldr x4, [jssp], #8
0xffff7abf6814    84  ldr x3, [jssp], #8
0xffff7abf6818    88  ldr x16, pc+56 (addr 0x0000ffff7abf6850)    ;; code: BUILTIN
0xffff7abf681c    92  br x16
0xffff7abf6820    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf6824   100  d63f03e0       constant
0xffff7abf6828   104  5d4e9429       constant
0xffff7abf682c   108  00000000       constant
0xffff7abf6830   112  5d4d1509       constant
0xffff7abf6834   116  00000000       constant
0xffff7abf6838   120  5d41e111       constant
0xffff7abf683c   124  00000000       constant
0xffff7abf6840   128  7ab8bdc0       constant
0xffff7abf6844   132  0000ffff       constant
0xffff7abf6848   136  5d41e111       constant
0xffff7abf684c   140  00000000       constant
0xffff7abf6850   144  7ab22420       constant
0xffff7abf6854   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf67d0  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf67e4  embedded object  (0x5d4d1509 WeakCell for 0x4ec380d9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf6800  embedded object  (0x5d41e111 <String[9]: needDrain>)
0xffff7abf6804  code target (HANDLER)  (0xffff7ab8bdc0)
0xffff7abf680c  embedded object  (0x5d41e111 <String[9]: needDrain>)
0xffff7abf6818  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf6820  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = ending
compiler = unknown
Instructions (size = 152)
0xffff7abf68c0     0  sub csp, jssp, #0x8 (8)
0xffff7abf68c4     4  str x3, [jssp, #-8]!
0xffff7abf68c8     8  sub csp, jssp, #0x8 (8)
0xffff7abf68cc    12  str x4, [jssp, #-8]!
0xffff7abf68d0    16  ldr x3, pc+88 (addr 0x0000ffff7abf6928)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf68d4    20  ldur x3, [x3, #7]
0xffff7abf68d8    24  cmp x3, #0x0 (0)
0xffff7abf68dc    28  b.ne #+0x30 (addr 0xffff7abf690c)
0xffff7abf68e0    32  tbz w0, #0, #+0x2c (addr 0xffff7abf690c)
0xffff7abf68e4    36  ldr x5, pc+76 (addr 0x0000ffff7abf6930)    ;; object: 0x5d4d1521 WeakCell for 0x4ec38131 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf68e8    40  ldur x5, [x5, #7]
0xffff7abf68ec    44  tbz w5, #0, #+0x20 (addr 0xffff7abf690c)
0xffff7abf68f0    48  ldursw x4, [x5, #15]
0xffff7abf68f4    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf690c)
0xffff7abf68f8    56  ldr x4, [jssp], #8
0xffff7abf68fc    60  ldr x3, [jssp], #8
0xffff7abf6900    64  ldr x2, pc+56 (addr 0x0000ffff7abf6938)    ;; object: 0x5d422889 <String[6]: ending>
0xffff7abf6904    68  ldr x16, pc+60 (addr 0x0000ffff7abf6940)    ;; code: HANDLER, StoreTransitionStub, minor: 198662
0xffff7abf6908    72  br x16
0xffff7abf690c    76  ldr x2, pc+60 (addr 0x0000ffff7abf6948)    ;; object: 0x5d422889 <String[6]: ending>
0xffff7abf6910    80  ldr x4, [jssp], #8
0xffff7abf6914    84  ldr x3, [jssp], #8
0xffff7abf6918    88  ldr x16, pc+56 (addr 0x0000ffff7abf6950)    ;; code: BUILTIN
0xffff7abf691c    92  br x16
0xffff7abf6920    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf6924   100  d63f03e0       constant
0xffff7abf6928   104  5d4e9429       constant
0xffff7abf692c   108  00000000       constant
0xffff7abf6930   112  5d4d1521       constant
0xffff7abf6934   116  00000000       constant
0xffff7abf6938   120  5d422889       constant
0xffff7abf693c   124  00000000       constant
0xffff7abf6940   128  7ab8c000       constant
0xffff7abf6944   132  0000ffff       constant
0xffff7abf6948   136  5d422889       constant
0xffff7abf694c   140  00000000       constant
0xffff7abf6950   144  7ab22420       constant
0xffff7abf6954   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf68d0  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf68e4  embedded object  (0x5d4d1521 WeakCell for 0x4ec38131 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf6900  embedded object  (0x5d422889 <String[6]: ending>)
0xffff7abf6904  code target (HANDLER)  (0xffff7ab8c000)
0xffff7abf690c  embedded object  (0x5d422889 <String[6]: ending>)
0xffff7abf6918  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf6920  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = ended
compiler = unknown
Instructions (size = 152)
0xffff7abf69c0     0  sub csp, jssp, #0x8 (8)
0xffff7abf69c4     4  str x3, [jssp, #-8]!
0xffff7abf69c8     8  sub csp, jssp, #0x8 (8)
0xffff7abf69cc    12  str x4, [jssp, #-8]!
0xffff7abf69d0    16  ldr x3, pc+88 (addr 0x0000ffff7abf6a28)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf69d4    20  ldur x3, [x3, #7]
0xffff7abf69d8    24  cmp x3, #0x0 (0)
0xffff7abf69dc    28  b.ne #+0x30 (addr 0xffff7abf6a0c)
0xffff7abf69e0    32  tbz w0, #0, #+0x2c (addr 0xffff7abf6a0c)
0xffff7abf69e4    36  ldr x5, pc+76 (addr 0x0000ffff7abf6a30)    ;; object: 0x5d4d1539 WeakCell for 0x4ec38189 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf69e8    40  ldur x5, [x5, #7]
0xffff7abf69ec    44  tbz w5, #0, #+0x20 (addr 0xffff7abf6a0c)
0xffff7abf69f0    48  ldursw x4, [x5, #15]
0xffff7abf69f4    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf6a0c)
0xffff7abf69f8    56  ldr x4, [jssp], #8
0xffff7abf69fc    60  ldr x3, [jssp], #8
0xffff7abf6a00    64  ldr x2, pc+56 (addr 0x0000ffff7abf6a38)    ;; object: 0x20df92f1 <String[5]: ended>
0xffff7abf6a04    68  ldr x16, pc+60 (addr 0x0000ffff7abf6a40)    ;; code: HANDLER, StoreTransitionStub, minor: 198663
0xffff7abf6a08    72  br x16
0xffff7abf6a0c    76  ldr x2, pc+60 (addr 0x0000ffff7abf6a48)    ;; object: 0x20df92f1 <String[5]: ended>
0xffff7abf6a10    80  ldr x4, [jssp], #8
0xffff7abf6a14    84  ldr x3, [jssp], #8
0xffff7abf6a18    88  ldr x16, pc+56 (addr 0x0000ffff7abf6a50)    ;; code: BUILTIN
0xffff7abf6a1c    92  br x16
0xffff7abf6a20    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf6a24   100  d63f03e0       constant
0xffff7abf6a28   104  5d4e9429       constant
0xffff7abf6a2c   108  00000000       constant
0xffff7abf6a30   112  5d4d1539       constant
0xffff7abf6a34   116  00000000       constant
0xffff7abf6a38   120  20df92f1       constant
0xffff7abf6a3c   124  00000000       constant
0xffff7abf6a40   128  7ab8c240       constant
0xffff7abf6a44   132  0000ffff       constant
0xffff7abf6a48   136  20df92f1       constant
0xffff7abf6a4c   140  00000000       constant
0xffff7abf6a50   144  7ab22420       constant
0xffff7abf6a54   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf69d0  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf69e4  embedded object  (0x5d4d1539 WeakCell for 0x4ec38189 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf6a00  embedded object  (0x20df92f1 <String[5]: ended>)
0xffff7abf6a04  code target (HANDLER)  (0xffff7ab8c240)
0xffff7abf6a0c  embedded object  (0x20df92f1 <String[5]: ended>)
0xffff7abf6a18  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf6a20  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = finished
compiler = unknown
Instructions (size = 152)
0xffff7abf6ac0     0  sub csp, jssp, #0x8 (8)
0xffff7abf6ac4     4  str x3, [jssp, #-8]!
0xffff7abf6ac8     8  sub csp, jssp, #0x8 (8)
0xffff7abf6acc    12  str x4, [jssp, #-8]!
0xffff7abf6ad0    16  ldr x3, pc+88 (addr 0x0000ffff7abf6b28)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf6ad4    20  ldur x3, [x3, #7]
0xffff7abf6ad8    24  cmp x3, #0x0 (0)
0xffff7abf6adc    28  b.ne #+0x30 (addr 0xffff7abf6b0c)
0xffff7abf6ae0    32  tbz w0, #0, #+0x2c (addr 0xffff7abf6b0c)
0xffff7abf6ae4    36  ldr x5, pc+76 (addr 0x0000ffff7abf6b30)    ;; object: 0x5d4d1551 WeakCell for 0x4ec381e1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf6ae8    40  ldur x5, [x5, #7]
0xffff7abf6aec    44  tbz w5, #0, #+0x20 (addr 0xffff7abf6b0c)
0xffff7abf6af0    48  ldursw x4, [x5, #15]
0xffff7abf6af4    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf6b0c)
0xffff7abf6af8    56  ldr x4, [jssp], #8
0xffff7abf6afc    60  ldr x3, [jssp], #8
0xffff7abf6b00    64  ldr x2, pc+56 (addr 0x0000ffff7abf6b38)    ;; object: 0x5d4228a9 <String[8]: finished>
0xffff7abf6b04    68  ldr x16, pc+60 (addr 0x0000ffff7abf6b40)    ;; code: HANDLER, StoreTransitionStub, minor: 198664
0xffff7abf6b08    72  br x16
0xffff7abf6b0c    76  ldr x2, pc+60 (addr 0x0000ffff7abf6b48)    ;; object: 0x5d4228a9 <String[8]: finished>
0xffff7abf6b10    80  ldr x4, [jssp], #8
0xffff7abf6b14    84  ldr x3, [jssp], #8
0xffff7abf6b18    88  ldr x16, pc+56 (addr 0x0000ffff7abf6b50)    ;; code: BUILTIN
0xffff7abf6b1c    92  br x16
0xffff7abf6b20    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf6b24   100  d63f03e0       constant
0xffff7abf6b28   104  5d4e9429       constant
0xffff7abf6b2c   108  00000000       constant
0xffff7abf6b30   112  5d4d1551       constant
0xffff7abf6b34   116  00000000       constant
0xffff7abf6b38   120  5d4228a9       constant
0xffff7abf6b3c   124  00000000       constant
0xffff7abf6b40   128  7abe5d20       constant
0xffff7abf6b44   132  0000ffff       constant
0xffff7abf6b48   136  5d4228a9       constant
0xffff7abf6b4c   140  00000000       constant
0xffff7abf6b50   144  7ab22420       constant
0xffff7abf6b54   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf6ad0  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf6ae4  embedded object  (0x5d4d1551 WeakCell for 0x4ec381e1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf6b00  embedded object  (0x5d4228a9 <String[8]: finished>)
0xffff7abf6b04  code target (HANDLER)  (0xffff7abe5d20)
0xffff7abf6b0c  embedded object  (0x5d4228a9 <String[8]: finished>)
0xffff7abf6b18  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf6b20  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = decodeStrings
compiler = unknown
Instructions (size = 152)
0xffff7abf6bc0     0  sub csp, jssp, #0x8 (8)
0xffff7abf6bc4     4  str x3, [jssp, #-8]!
0xffff7abf6bc8     8  sub csp, jssp, #0x8 (8)
0xffff7abf6bcc    12  str x4, [jssp, #-8]!
0xffff7abf6bd0    16  ldr x3, pc+88 (addr 0x0000ffff7abf6c28)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf6bd4    20  ldur x3, [x3, #7]
0xffff7abf6bd8    24  cmp x3, #0x0 (0)
0xffff7abf6bdc    28  b.ne #+0x30 (addr 0xffff7abf6c0c)
0xffff7abf6be0    32  tbz w0, #0, #+0x2c (addr 0xffff7abf6c0c)
0xffff7abf6be4    36  ldr x5, pc+76 (addr 0x0000ffff7abf6c30)    ;; object: 0x5d4d1569 WeakCell for 0x4ec38239 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf6be8    40  ldur x5, [x5, #7]
0xffff7abf6bec    44  tbz w5, #0, #+0x20 (addr 0xffff7abf6c0c)
0xffff7abf6bf0    48  ldursw x4, [x5, #15]
0xffff7abf6bf4    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf6c0c)
0xffff7abf6bf8    56  ldr x4, [jssp], #8
0xffff7abf6bfc    60  ldr x3, [jssp], #8
0xffff7abf6c00    64  ldr x2, pc+56 (addr 0x0000ffff7abf6c38)    ;; object: 0x5d4228e9 <String[13]: decodeStrings>
0xffff7abf6c04    68  ldr x16, pc+60 (addr 0x0000ffff7abf6c40)    ;; code: HANDLER, StoreTransitionStub, minor: 198665
0xffff7abf6c08    72  br x16
0xffff7abf6c0c    76  ldr x2, pc+60 (addr 0x0000ffff7abf6c48)    ;; object: 0x5d4228e9 <String[13]: decodeStrings>
0xffff7abf6c10    80  ldr x4, [jssp], #8
0xffff7abf6c14    84  ldr x3, [jssp], #8
0xffff7abf6c18    88  ldr x16, pc+56 (addr 0x0000ffff7abf6c50)    ;; code: BUILTIN
0xffff7abf6c1c    92  br x16
0xffff7abf6c20    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf6c24   100  d63f03e0       constant
0xffff7abf6c28   104  5d4e9429       constant
0xffff7abf6c2c   108  00000000       constant
0xffff7abf6c30   112  5d4d1569       constant
0xffff7abf6c34   116  00000000       constant
0xffff7abf6c38   120  5d4228e9       constant
0xffff7abf6c3c   124  00000000       constant
0xffff7abf6c40   128  7abe60c0       constant
0xffff7abf6c44   132  0000ffff       constant
0xffff7abf6c48   136  5d4228e9       constant
0xffff7abf6c4c   140  00000000       constant
0xffff7abf6c50   144  7ab22420       constant
0xffff7abf6c54   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf6bd0  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf6be4  embedded object  (0x5d4d1569 WeakCell for 0x4ec38239 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf6c00  embedded object  (0x5d4228e9 <String[13]: decodeStrings>)
0xffff7abf6c04  code target (HANDLER)  (0xffff7abe60c0)
0xffff7abf6c0c  embedded object  (0x5d4228e9 <String[13]: decodeStrings>)
0xffff7abf6c18  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf6c20  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = defaultEncoding
compiler = unknown
Instructions (size = 152)
0xffff7abf6cc0     0  sub csp, jssp, #0x8 (8)
0xffff7abf6cc4     4  str x3, [jssp, #-8]!
0xffff7abf6cc8     8  sub csp, jssp, #0x8 (8)
0xffff7abf6ccc    12  str x4, [jssp, #-8]!
0xffff7abf6cd0    16  ldr x3, pc+88 (addr 0x0000ffff7abf6d28)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf6cd4    20  ldur x3, [x3, #7]
0xffff7abf6cd8    24  cmp x3, #0x0 (0)
0xffff7abf6cdc    28  b.ne #+0x30 (addr 0xffff7abf6d0c)
0xffff7abf6ce0    32  tbz w0, #0, #+0x2c (addr 0xffff7abf6d0c)
0xffff7abf6ce4    36  ldr x5, pc+76 (addr 0x0000ffff7abf6d30)    ;; object: 0x5d4d1581 WeakCell for 0x4ec38291 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf6ce8    40  ldur x5, [x5, #7]
0xffff7abf6cec    44  tbz w5, #0, #+0x20 (addr 0xffff7abf6d0c)
0xffff7abf6cf0    48  ldursw x4, [x5, #15]
0xffff7abf6cf4    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf6d0c)
0xffff7abf6cf8    56  ldr x4, [jssp], #8
0xffff7abf6cfc    60  ldr x3, [jssp], #8
0xffff7abf6d00    64  ldr x2, pc+56 (addr 0x0000ffff7abf6d38)    ;; object: 0x5d41da19 <String[15]: defaultEncoding>
0xffff7abf6d04    68  ldr x16, pc+60 (addr 0x0000ffff7abf6d40)    ;; code: HANDLER, StoreTransitionStub, minor: 198666
0xffff7abf6d08    72  br x16
0xffff7abf6d0c    76  ldr x2, pc+60 (addr 0x0000ffff7abf6d48)    ;; object: 0x5d41da19 <String[15]: defaultEncoding>
0xffff7abf6d10    80  ldr x4, [jssp], #8
0xffff7abf6d14    84  ldr x3, [jssp], #8
0xffff7abf6d18    88  ldr x16, pc+56 (addr 0x0000ffff7abf6d50)    ;; code: BUILTIN
0xffff7abf6d1c    92  br x16
0xffff7abf6d20    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf6d24   100  d63f03e0       constant
0xffff7abf6d28   104  5d4e9429       constant
0xffff7abf6d2c   108  00000000       constant
0xffff7abf6d30   112  5d4d1581       constant
0xffff7abf6d34   116  00000000       constant
0xffff7abf6d38   120  5d41da19       constant
0xffff7abf6d3c   124  00000000       constant
0xffff7abf6d40   128  7abf5aa0       constant
0xffff7abf6d44   132  0000ffff       constant
0xffff7abf6d48   136  5d41da19       constant
0xffff7abf6d4c   140  00000000       constant
0xffff7abf6d50   144  7ab22420       constant
0xffff7abf6d54   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf6cd0  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf6ce4  embedded object  (0x5d4d1581 WeakCell for 0x4ec38291 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf6d00  embedded object  (0x5d41da19 <String[15]: defaultEncoding>)
0xffff7abf6d04  code target (HANDLER)  (0xffff7abf5aa0)
0xffff7abf6d0c  embedded object  (0x5d41da19 <String[15]: defaultEncoding>)
0xffff7abf6d18  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf6d20  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0xffff7abf6dc0     0  mov x6, x0
0xffff7abf6dc4     4  tbnz w6, #0, #+0x54 (addr 0xffff7abf6e18)
0xffff7abf6dc8     8  stur x6, [x1, #87]
0xffff7abf6dcc    12  stur x5, [x1, #-1]
0xffff7abf6dd0    16  tbz w5, #0, #+0x34 (addr 0xffff7abf6e04)
0xffff7abf6dd4    20  sub x2, x1, #0x1 (1)
0xffff7abf6dd8    24  and x5, x5, #0xfffffffffff00000
0xffff7abf6ddc    28  ldr x5, [x5, #8]
0xffff7abf6de0    32  tbz w5, #1, #+0x24 (addr 0xffff7abf6e04)
0xffff7abf6de4    36  and x5, x1, #0xfffffffffff00000
0xffff7abf6de8    40  ldr x5, [x5, #8]
0xffff7abf6dec    44  tbz w5, #2, #+0x18 (addr 0xffff7abf6e04)
0xffff7abf6df0    48  sub csp, jssp, #0x8 (8)
0xffff7abf6df4    52  str lr, [jssp, #-8]!
0xffff7abf6df8    56  ldr x16, pc+24 (addr 0x0000ffff7abf6e10)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf6dfc    60  blr x16
0xffff7abf6e00    64  ldr lr, [jssp], #8
0xffff7abf6e04    68  ret
0xffff7abf6e08    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf6e0c    76  d63f03e0       constant
0xffff7abf6e10    80  7ab38080       constant
0xffff7abf6e14    84  0000ffff       constant
0xffff7abf6e18    88  movz x16, #0x0
0xffff7abf6e1c    92  sub csp, jssp, #0x10 (16)
0xffff7abf6e20    96  stp fp, lr, [jssp, #-16]!
0xffff7abf6e24   100  bl #+0x4 (addr 0xffff7abf6e28)
0xffff7abf6e28   104  movz x17, #0xa00000000
0xffff7abf6e2c   108  sub csp, jssp, #0x10 (16)
0xffff7abf6e30   112  stp x17, cp, [jssp, #-16]!
0xffff7abf6e34   116  add fp, jssp, #0x10 (16)
0xffff7abf6e38   120  ldr x17, pc+24 (addr 0x0000ffff7abf6e50)    ;; lazy deoptimization bailout 0
0xffff7abf6e3c   124  add x17, x17, x16
0xffff7abf6e40   128  br x17
0xffff7abf6e44   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf6e48   136  d63f03e0       constant
0xffff7abf6e4c   140  d503201f       constant
0xffff7abf6e50   144  7a906000       constant
0xffff7abf6e54   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf6df8  code target (STUB)  (0xffff7ab38080)
0xffff7abf6e08  constant pool (size 16)
0xffff7abf6e38  runtime entry
0xffff7abf6e44  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0xffff7abf6dc0     0  mov x6, x0
0xffff7abf6dc4     4  tbnz w6, #0, #+0x54 (addr 0xffff7abf6e18)
0xffff7abf6dc8     8  stur x6, [x1, #87]
0xffff7abf6dcc    12  stur x5, [x1, #-1]
0xffff7abf6dd0    16  tbz w5, #0, #+0x34 (addr 0xffff7abf6e04)
0xffff7abf6dd4    20  sub x2, x1, #0x1 (1)
0xffff7abf6dd8    24  and x5, x5, #0xfffffffffff00000
0xffff7abf6ddc    28  ldr x5, [x5, #8]
0xffff7abf6de0    32  tbz w5, #1, #+0x24 (addr 0xffff7abf6e04)
0xffff7abf6de4    36  and x5, x1, #0xfffffffffff00000
0xffff7abf6de8    40  ldr x5, [x5, #8]
0xffff7abf6dec    44  tbz w5, #2, #+0x18 (addr 0xffff7abf6e04)
0xffff7abf6df0    48  sub csp, jssp, #0x8 (8)
0xffff7abf6df4    52  str lr, [jssp, #-8]!
0xffff7abf6df8    56  ldr x16, pc+24 (addr 0x0000ffff7abf6e10)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf6dfc    60  blr x16
0xffff7abf6e00    64  ldr lr, [jssp], #8
0xffff7abf6e04    68  ret
0xffff7abf6e08    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf6e0c    76  d63f03e0       constant
0xffff7abf6e10    80  7ab38080       constant
0xffff7abf6e14    84  0000ffff       constant
0xffff7abf6e18    88  movz x16, #0x0
0xffff7abf6e1c    92  sub csp, jssp, #0x10 (16)
0xffff7abf6e20    96  stp fp, lr, [jssp, #-16]!
0xffff7abf6e24   100  bl #+0x4 (addr 0xffff7abf6e28)
0xffff7abf6e28   104  movz x17, #0xa00000000
0xffff7abf6e2c   108  sub csp, jssp, #0x10 (16)
0xffff7abf6e30   112  stp x17, cp, [jssp, #-16]!
0xffff7abf6e34   116  add fp, jssp, #0x10 (16)
0xffff7abf6e38   120  ldr x17, pc+24 (addr 0x0000ffff7abf6e50)    ;; lazy deoptimization bailout 0
0xffff7abf6e3c   124  add x17, x17, x16
0xffff7abf6e40   128  br x17
0xffff7abf6e44   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf6e48   136  d63f03e0       constant
0xffff7abf6e4c   140  d503201f       constant
0xffff7abf6e50   144  7a906000       constant
0xffff7abf6e54   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf6df8  code target (STUB)  (0xffff7ab38080)
0xffff7abf6e08  constant pool (size 16)
0xffff7abf6e38  runtime entry
0xffff7abf6e44  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = length
compiler = unknown
Instructions (size = 152)
0xffff7abf6ec0     0  sub csp, jssp, #0x8 (8)
0xffff7abf6ec4     4  str x3, [jssp, #-8]!
0xffff7abf6ec8     8  sub csp, jssp, #0x8 (8)
0xffff7abf6ecc    12  str x4, [jssp, #-8]!
0xffff7abf6ed0    16  ldr x3, pc+88 (addr 0x0000ffff7abf6f28)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf6ed4    20  ldur x3, [x3, #7]
0xffff7abf6ed8    24  cmp x3, #0x0 (0)
0xffff7abf6edc    28  b.ne #+0x2c (addr 0xffff7abf6f08)
0xffff7abf6ee0    32  ldr x5, pc+80 (addr 0x0000ffff7abf6f30)    ;; object: 0x5d4d1599 WeakCell for 0x4ec382e9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf6ee4    36  ldur x5, [x5, #7]
0xffff7abf6ee8    40  tbz w5, #0, #+0x20 (addr 0xffff7abf6f08)
0xffff7abf6eec    44  ldursw x4, [x5, #15]
0xffff7abf6ef0    48  tbnz w4, #23, #+0x18 (addr 0xffff7abf6f08)
0xffff7abf6ef4    52  ldr x4, [jssp], #8
0xffff7abf6ef8    56  ldr x3, [jssp], #8
0xffff7abf6efc    60  ldr x2, pc+60 (addr 0x0000ffff7abf6f38)    ;; object: 0x20d05141 <String[6]: length>
0xffff7abf6f00    64  ldr x16, pc+64 (addr 0x0000ffff7abf6f40)    ;; code: HANDLER, StoreTransitionStub, minor: 174091
0xffff7abf6f04    68  br x16
0xffff7abf6f08    72  ldr x2, pc+64 (addr 0x0000ffff7abf6f48)    ;; object: 0x20d05141 <String[6]: length>
0xffff7abf6f0c    76  ldr x4, [jssp], #8
0xffff7abf6f10    80  ldr x3, [jssp], #8
0xffff7abf6f14    84  ldr x16, pc+60 (addr 0x0000ffff7abf6f50)    ;; code: BUILTIN
0xffff7abf6f18    88  br x16
0xffff7abf6f1c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abf6f20    96  d63f03e0       constant
0xffff7abf6f24   100  d503201f       constant
0xffff7abf6f28   104  5d4e9429       constant
0xffff7abf6f2c   108  00000000       constant
0xffff7abf6f30   112  5d4d1599       constant
0xffff7abf6f34   116  00000000       constant
0xffff7abf6f38   120  20d05141       constant
0xffff7abf6f3c   124  00000000       constant
0xffff7abf6f40   128  7abf6dc0       constant
0xffff7abf6f44   132  0000ffff       constant
0xffff7abf6f48   136  20d05141       constant
0xffff7abf6f4c   140  00000000       constant
0xffff7abf6f50   144  7ab22420       constant
0xffff7abf6f54   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf6ed0  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf6ee0  embedded object  (0x5d4d1599 WeakCell for 0x4ec382e9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf6efc  embedded object  (0x20d05141 <String[6]: length>)
0xffff7abf6f00  code target (HANDLER)  (0xffff7abf6dc0)
0xffff7abf6f08  embedded object  (0x20d05141 <String[6]: length>)
0xffff7abf6f14  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf6f1c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf6fc0     0  tbz w0, #0, #+0x90 (addr 0xffff7abf7050)
0xffff7abf6fc4     4  mov x2, x0
0xffff7abf6fc8     8  stur x2, [x1, #95]
0xffff7abf6fcc    12  add x3, x1, #0x5f (95)
0xffff7abf6fd0    16  and x2, x2, #0xfffffffffff00000
0xffff7abf6fd4    20  ldr x2, [x2, #8]
0xffff7abf6fd8    24  tbz w2, #1, #+0x24 (addr 0xffff7abf6ffc)
0xffff7abf6fdc    28  and x2, x1, #0xfffffffffff00000
0xffff7abf6fe0    32  ldr x2, [x2, #8]
0xffff7abf6fe4    36  tbz w2, #2, #+0x18 (addr 0xffff7abf6ffc)
0xffff7abf6fe8    40  sub csp, jssp, #0x8 (8)
0xffff7abf6fec    44  str lr, [jssp, #-8]!
0xffff7abf6ff0    48  ldr x16, pc+80 (addr 0x0000ffff7abf7040)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf6ff4    52  blr x16
0xffff7abf6ff8    56  ldr lr, [jssp], #8
0xffff7abf6ffc    60  stur x5, [x1, #-1]
0xffff7abf7000    64  tbz w5, #0, #+0x34 (addr 0xffff7abf7034)
0xffff7abf7004    68  sub x2, x1, #0x1 (1)
0xffff7abf7008    72  and x5, x5, #0xfffffffffff00000
0xffff7abf700c    76  ldr x5, [x5, #8]
0xffff7abf7010    80  tbz w5, #1, #+0x24 (addr 0xffff7abf7034)
0xffff7abf7014    84  and x5, x1, #0xfffffffffff00000
0xffff7abf7018    88  ldr x5, [x5, #8]
0xffff7abf701c    92  tbz w5, #2, #+0x18 (addr 0xffff7abf7034)
0xffff7abf7020    96  sub csp, jssp, #0x8 (8)
0xffff7abf7024   100  str lr, [jssp, #-8]!
0xffff7abf7028   104  ldr x16, pc+32 (addr 0x0000ffff7abf7048)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf702c   108  blr x16
0xffff7abf7030   112  ldr lr, [jssp], #8
0xffff7abf7034   116  ret
0xffff7abf7038   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf703c   124  d63f03e0       constant
0xffff7abf7040   128  7ab170c0       constant
0xffff7abf7044   132  0000ffff       constant
0xffff7abf7048   136  7ab38080       constant
0xffff7abf704c   140  0000ffff       constant
0xffff7abf7050   144  movz x16, #0x0
0xffff7abf7054   148  sub csp, jssp, #0x10 (16)
0xffff7abf7058   152  stp fp, lr, [jssp, #-16]!
0xffff7abf705c   156  bl #+0x4 (addr 0xffff7abf7060)
0xffff7abf7060   160  movz x17, #0xa00000000
0xffff7abf7064   164  sub csp, jssp, #0x10 (16)
0xffff7abf7068   168  stp x17, cp, [jssp, #-16]!
0xffff7abf706c   172  add fp, jssp, #0x10 (16)
0xffff7abf7070   176  ldr x17, pc+24 (addr 0x0000ffff7abf7088)    ;; lazy deoptimization bailout 0
0xffff7abf7074   180  add x17, x17, x16
0xffff7abf7078   184  br x17
0xffff7abf707c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf7080   192  d63f03e0       constant
0xffff7abf7084   196  d503201f       constant
0xffff7abf7088   200  7a906000       constant
0xffff7abf708c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf6ff0  code target (STUB)  (0xffff7ab170c0)
0xffff7abf7028  code target (STUB)  (0xffff7ab38080)
0xffff7abf7038  constant pool (size 24)
0xffff7abf7070  runtime entry
0xffff7abf707c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf6fc0     0  tbz w0, #0, #+0x90 (addr 0xffff7abf7050)
0xffff7abf6fc4     4  mov x2, x0
0xffff7abf6fc8     8  stur x2, [x1, #95]
0xffff7abf6fcc    12  add x3, x1, #0x5f (95)
0xffff7abf6fd0    16  and x2, x2, #0xfffffffffff00000
0xffff7abf6fd4    20  ldr x2, [x2, #8]
0xffff7abf6fd8    24  tbz w2, #1, #+0x24 (addr 0xffff7abf6ffc)
0xffff7abf6fdc    28  and x2, x1, #0xfffffffffff00000
0xffff7abf6fe0    32  ldr x2, [x2, #8]
0xffff7abf6fe4    36  tbz w2, #2, #+0x18 (addr 0xffff7abf6ffc)
0xffff7abf6fe8    40  sub csp, jssp, #0x8 (8)
0xffff7abf6fec    44  str lr, [jssp, #-8]!
0xffff7abf6ff0    48  ldr x16, pc+80 (addr 0x0000ffff7abf7040)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf6ff4    52  blr x16
0xffff7abf6ff8    56  ldr lr, [jssp], #8
0xffff7abf6ffc    60  stur x5, [x1, #-1]
0xffff7abf7000    64  tbz w5, #0, #+0x34 (addr 0xffff7abf7034)
0xffff7abf7004    68  sub x2, x1, #0x1 (1)
0xffff7abf7008    72  and x5, x5, #0xfffffffffff00000
0xffff7abf700c    76  ldr x5, [x5, #8]
0xffff7abf7010    80  tbz w5, #1, #+0x24 (addr 0xffff7abf7034)
0xffff7abf7014    84  and x5, x1, #0xfffffffffff00000
0xffff7abf7018    88  ldr x5, [x5, #8]
0xffff7abf701c    92  tbz w5, #2, #+0x18 (addr 0xffff7abf7034)
0xffff7abf7020    96  sub csp, jssp, #0x8 (8)
0xffff7abf7024   100  str lr, [jssp, #-8]!
0xffff7abf7028   104  ldr x16, pc+32 (addr 0x0000ffff7abf7048)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf702c   108  blr x16
0xffff7abf7030   112  ldr lr, [jssp], #8
0xffff7abf7034   116  ret
0xffff7abf7038   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf703c   124  d63f03e0       constant
0xffff7abf7040   128  7ab170c0       constant
0xffff7abf7044   132  0000ffff       constant
0xffff7abf7048   136  7ab38080       constant
0xffff7abf704c   140  0000ffff       constant
0xffff7abf7050   144  movz x16, #0x0
0xffff7abf7054   148  sub csp, jssp, #0x10 (16)
0xffff7abf7058   152  stp fp, lr, [jssp, #-16]!
0xffff7abf705c   156  bl #+0x4 (addr 0xffff7abf7060)
0xffff7abf7060   160  movz x17, #0xa00000000
0xffff7abf7064   164  sub csp, jssp, #0x10 (16)
0xffff7abf7068   168  stp x17, cp, [jssp, #-16]!
0xffff7abf706c   172  add fp, jssp, #0x10 (16)
0xffff7abf7070   176  ldr x17, pc+24 (addr 0x0000ffff7abf7088)    ;; lazy deoptimization bailout 0
0xffff7abf7074   180  add x17, x17, x16
0xffff7abf7078   184  br x17
0xffff7abf707c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf7080   192  d63f03e0       constant
0xffff7abf7084   196  d503201f       constant
0xffff7abf7088   200  7a906000       constant
0xffff7abf708c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf6ff0  code target (STUB)  (0xffff7ab170c0)
0xffff7abf7028  code target (STUB)  (0xffff7ab38080)
0xffff7abf7038  constant pool (size 24)
0xffff7abf7070  runtime entry
0xffff7abf707c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = writing
compiler = unknown
Instructions (size = 152)
0xffff7abf7100     0  sub csp, jssp, #0x8 (8)
0xffff7abf7104     4  str x3, [jssp, #-8]!
0xffff7abf7108     8  sub csp, jssp, #0x8 (8)
0xffff7abf710c    12  str x4, [jssp, #-8]!
0xffff7abf7110    16  ldr x3, pc+88 (addr 0x0000ffff7abf7168)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf7114    20  ldur x3, [x3, #7]
0xffff7abf7118    24  cmp x3, #0x0 (0)
0xffff7abf711c    28  b.ne #+0x30 (addr 0xffff7abf714c)
0xffff7abf7120    32  tbz w0, #0, #+0x2c (addr 0xffff7abf714c)
0xffff7abf7124    36  ldr x5, pc+76 (addr 0x0000ffff7abf7170)    ;; object: 0x5d4d15b1 WeakCell for 0x4ec38341 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf7128    40  ldur x5, [x5, #7]
0xffff7abf712c    44  tbz w5, #0, #+0x20 (addr 0xffff7abf714c)
0xffff7abf7130    48  ldursw x4, [x5, #15]
0xffff7abf7134    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf714c)
0xffff7abf7138    56  ldr x4, [jssp], #8
0xffff7abf713c    60  ldr x3, [jssp], #8
0xffff7abf7140    64  ldr x2, pc+56 (addr 0x0000ffff7abf7178)    ;; object: 0x5d422911 <String[7]: writing>
0xffff7abf7144    68  ldr x16, pc+60 (addr 0x0000ffff7abf7180)    ;; code: HANDLER, StoreTransitionStub, minor: 198668
0xffff7abf7148    72  br x16
0xffff7abf714c    76  ldr x2, pc+60 (addr 0x0000ffff7abf7188)    ;; object: 0x5d422911 <String[7]: writing>
0xffff7abf7150    80  ldr x4, [jssp], #8
0xffff7abf7154    84  ldr x3, [jssp], #8
0xffff7abf7158    88  ldr x16, pc+56 (addr 0x0000ffff7abf7190)    ;; code: BUILTIN
0xffff7abf715c    92  br x16
0xffff7abf7160    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf7164   100  d63f03e0       constant
0xffff7abf7168   104  5d4e9429       constant
0xffff7abf716c   108  00000000       constant
0xffff7abf7170   112  5d4d15b1       constant
0xffff7abf7174   116  00000000       constant
0xffff7abf7178   120  5d422911       constant
0xffff7abf717c   124  00000000       constant
0xffff7abf7180   128  7abf6fc0       constant
0xffff7abf7184   132  0000ffff       constant
0xffff7abf7188   136  5d422911       constant
0xffff7abf718c   140  00000000       constant
0xffff7abf7190   144  7ab22420       constant
0xffff7abf7194   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf7110  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf7124  embedded object  (0x5d4d15b1 WeakCell for 0x4ec38341 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf7140  embedded object  (0x5d422911 <String[7]: writing>)
0xffff7abf7144  code target (HANDLER)  (0xffff7abf6fc0)
0xffff7abf714c  embedded object  (0x5d422911 <String[7]: writing>)
0xffff7abf7158  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf7160  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0xffff7abf7200     0  mov x6, x0
0xffff7abf7204     4  tbnz w6, #0, #+0x54 (addr 0xffff7abf7258)
0xffff7abf7208     8  stur x6, [x1, #103]
0xffff7abf720c    12  stur x5, [x1, #-1]
0xffff7abf7210    16  tbz w5, #0, #+0x34 (addr 0xffff7abf7244)
0xffff7abf7214    20  sub x2, x1, #0x1 (1)
0xffff7abf7218    24  and x5, x5, #0xfffffffffff00000
0xffff7abf721c    28  ldr x5, [x5, #8]
0xffff7abf7220    32  tbz w5, #1, #+0x24 (addr 0xffff7abf7244)
0xffff7abf7224    36  and x5, x1, #0xfffffffffff00000
0xffff7abf7228    40  ldr x5, [x5, #8]
0xffff7abf722c    44  tbz w5, #2, #+0x18 (addr 0xffff7abf7244)
0xffff7abf7230    48  sub csp, jssp, #0x8 (8)
0xffff7abf7234    52  str lr, [jssp, #-8]!
0xffff7abf7238    56  ldr x16, pc+24 (addr 0x0000ffff7abf7250)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf723c    60  blr x16
0xffff7abf7240    64  ldr lr, [jssp], #8
0xffff7abf7244    68  ret
0xffff7abf7248    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf724c    76  d63f03e0       constant
0xffff7abf7250    80  7ab38080       constant
0xffff7abf7254    84  0000ffff       constant
0xffff7abf7258    88  movz x16, #0x0
0xffff7abf725c    92  sub csp, jssp, #0x10 (16)
0xffff7abf7260    96  stp fp, lr, [jssp, #-16]!
0xffff7abf7264   100  bl #+0x4 (addr 0xffff7abf7268)
0xffff7abf7268   104  movz x17, #0xa00000000
0xffff7abf726c   108  sub csp, jssp, #0x10 (16)
0xffff7abf7270   112  stp x17, cp, [jssp, #-16]!
0xffff7abf7274   116  add fp, jssp, #0x10 (16)
0xffff7abf7278   120  ldr x17, pc+24 (addr 0x0000ffff7abf7290)    ;; lazy deoptimization bailout 0
0xffff7abf727c   124  add x17, x17, x16
0xffff7abf7280   128  br x17
0xffff7abf7284   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf7288   136  d63f03e0       constant
0xffff7abf728c   140  d503201f       constant
0xffff7abf7290   144  7a906000       constant
0xffff7abf7294   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf7238  code target (STUB)  (0xffff7ab38080)
0xffff7abf7248  constant pool (size 16)
0xffff7abf7278  runtime entry
0xffff7abf7284  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0xffff7abf7200     0  mov x6, x0
0xffff7abf7204     4  tbnz w6, #0, #+0x54 (addr 0xffff7abf7258)
0xffff7abf7208     8  stur x6, [x1, #103]
0xffff7abf720c    12  stur x5, [x1, #-1]
0xffff7abf7210    16  tbz w5, #0, #+0x34 (addr 0xffff7abf7244)
0xffff7abf7214    20  sub x2, x1, #0x1 (1)
0xffff7abf7218    24  and x5, x5, #0xfffffffffff00000
0xffff7abf721c    28  ldr x5, [x5, #8]
0xffff7abf7220    32  tbz w5, #1, #+0x24 (addr 0xffff7abf7244)
0xffff7abf7224    36  and x5, x1, #0xfffffffffff00000
0xffff7abf7228    40  ldr x5, [x5, #8]
0xffff7abf722c    44  tbz w5, #2, #+0x18 (addr 0xffff7abf7244)
0xffff7abf7230    48  sub csp, jssp, #0x8 (8)
0xffff7abf7234    52  str lr, [jssp, #-8]!
0xffff7abf7238    56  ldr x16, pc+24 (addr 0x0000ffff7abf7250)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf723c    60  blr x16
0xffff7abf7240    64  ldr lr, [jssp], #8
0xffff7abf7244    68  ret
0xffff7abf7248    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf724c    76  d63f03e0       constant
0xffff7abf7250    80  7ab38080       constant
0xffff7abf7254    84  0000ffff       constant
0xffff7abf7258    88  movz x16, #0x0
0xffff7abf725c    92  sub csp, jssp, #0x10 (16)
0xffff7abf7260    96  stp fp, lr, [jssp, #-16]!
0xffff7abf7264   100  bl #+0x4 (addr 0xffff7abf7268)
0xffff7abf7268   104  movz x17, #0xa00000000
0xffff7abf726c   108  sub csp, jssp, #0x10 (16)
0xffff7abf7270   112  stp x17, cp, [jssp, #-16]!
0xffff7abf7274   116  add fp, jssp, #0x10 (16)
0xffff7abf7278   120  ldr x17, pc+24 (addr 0x0000ffff7abf7290)    ;; lazy deoptimization bailout 0
0xffff7abf727c   124  add x17, x17, x16
0xffff7abf7280   128  br x17
0xffff7abf7284   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf7288   136  d63f03e0       constant
0xffff7abf728c   140  d503201f       constant
0xffff7abf7290   144  7a906000       constant
0xffff7abf7294   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf7238  code target (STUB)  (0xffff7ab38080)
0xffff7abf7248  constant pool (size 16)
0xffff7abf7278  runtime entry
0xffff7abf7284  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = corked
compiler = unknown
Instructions (size = 152)
0xffff7abf7300     0  sub csp, jssp, #0x8 (8)
0xffff7abf7304     4  str x3, [jssp, #-8]!
0xffff7abf7308     8  sub csp, jssp, #0x8 (8)
0xffff7abf730c    12  str x4, [jssp, #-8]!
0xffff7abf7310    16  ldr x3, pc+88 (addr 0x0000ffff7abf7368)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf7314    20  ldur x3, [x3, #7]
0xffff7abf7318    24  cmp x3, #0x0 (0)
0xffff7abf731c    28  b.ne #+0x2c (addr 0xffff7abf7348)
0xffff7abf7320    32  ldr x5, pc+80 (addr 0x0000ffff7abf7370)    ;; object: 0x5d4d15c9 WeakCell for 0x4ec38399 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf7324    36  ldur x5, [x5, #7]
0xffff7abf7328    40  tbz w5, #0, #+0x20 (addr 0xffff7abf7348)
0xffff7abf732c    44  ldursw x4, [x5, #15]
0xffff7abf7330    48  tbnz w4, #23, #+0x18 (addr 0xffff7abf7348)
0xffff7abf7334    52  ldr x4, [jssp], #8
0xffff7abf7338    56  ldr x3, [jssp], #8
0xffff7abf733c    60  ldr x2, pc+60 (addr 0x0000ffff7abf7378)    ;; object: 0x5d422931 <String[6]: corked>
0xffff7abf7340    64  ldr x16, pc+64 (addr 0x0000ffff7abf7380)    ;; code: HANDLER, StoreTransitionStub, minor: 174093
0xffff7abf7344    68  br x16
0xffff7abf7348    72  ldr x2, pc+64 (addr 0x0000ffff7abf7388)    ;; object: 0x5d422931 <String[6]: corked>
0xffff7abf734c    76  ldr x4, [jssp], #8
0xffff7abf7350    80  ldr x3, [jssp], #8
0xffff7abf7354    84  ldr x16, pc+60 (addr 0x0000ffff7abf7390)    ;; code: BUILTIN
0xffff7abf7358    88  br x16
0xffff7abf735c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abf7360    96  d63f03e0       constant
0xffff7abf7364   100  d503201f       constant
0xffff7abf7368   104  5d4e9429       constant
0xffff7abf736c   108  00000000       constant
0xffff7abf7370   112  5d4d15c9       constant
0xffff7abf7374   116  00000000       constant
0xffff7abf7378   120  5d422931       constant
0xffff7abf737c   124  00000000       constant
0xffff7abf7380   128  7abf7200       constant
0xffff7abf7384   132  0000ffff       constant
0xffff7abf7388   136  5d422931       constant
0xffff7abf738c   140  00000000       constant
0xffff7abf7390   144  7ab22420       constant
0xffff7abf7394   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf7310  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf7320  embedded object  (0x5d4d15c9 WeakCell for 0x4ec38399 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf733c  embedded object  (0x5d422931 <String[6]: corked>)
0xffff7abf7340  code target (HANDLER)  (0xffff7abf7200)
0xffff7abf7348  embedded object  (0x5d422931 <String[6]: corked>)
0xffff7abf7354  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf735c  constant pool (size 60)

kind = HANDLER
major_key = <NoCache>Stub
name = sync
compiler = unknown
Instructions (size = 152)
0xffff7abf7400     0  sub csp, jssp, #0x8 (8)
0xffff7abf7404     4  str x3, [jssp, #-8]!
0xffff7abf7408     8  sub csp, jssp, #0x8 (8)
0xffff7abf740c    12  str x4, [jssp, #-8]!
0xffff7abf7410    16  ldr x3, pc+88 (addr 0x0000ffff7abf7468)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf7414    20  ldur x3, [x3, #7]
0xffff7abf7418    24  cmp x3, #0x0 (0)
0xffff7abf741c    28  b.ne #+0x30 (addr 0xffff7abf744c)
0xffff7abf7420    32  tbz w0, #0, #+0x2c (addr 0xffff7abf744c)
0xffff7abf7424    36  ldr x5, pc+76 (addr 0x0000ffff7abf7470)    ;; object: 0x5d4d15e1 WeakCell for 0x4ec383f1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf7428    40  ldur x5, [x5, #7]
0xffff7abf742c    44  tbz w5, #0, #+0x20 (addr 0xffff7abf744c)
0xffff7abf7430    48  ldursw x4, [x5, #15]
0xffff7abf7434    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf744c)
0xffff7abf7438    56  ldr x4, [jssp], #8
0xffff7abf743c    60  ldr x3, [jssp], #8
0xffff7abf7440    64  ldr x2, pc+56 (addr 0x0000ffff7abf7478)    ;; object: 0x5d41d951 <String[4]: sync>
0xffff7abf7444    68  ldr x16, pc+60 (addr 0x0000ffff7abf7480)    ;; code: HANDLER, StoreTransitionStub, minor: 198670
0xffff7abf7448    72  br x16
0xffff7abf744c    76  ldr x2, pc+60 (addr 0x0000ffff7abf7488)    ;; object: 0x5d41d951 <String[4]: sync>
0xffff7abf7450    80  ldr x4, [jssp], #8
0xffff7abf7454    84  ldr x3, [jssp], #8
0xffff7abf7458    88  ldr x16, pc+56 (addr 0x0000ffff7abf7490)    ;; code: BUILTIN
0xffff7abf745c    92  br x16
0xffff7abf7460    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf7464   100  d63f03e0       constant
0xffff7abf7468   104  5d4e9429       constant
0xffff7abf746c   108  00000000       constant
0xffff7abf7470   112  5d4d15e1       constant
0xffff7abf7474   116  00000000       constant
0xffff7abf7478   120  5d41d951       constant
0xffff7abf747c   124  00000000       constant
0xffff7abf7480   128  7abd4d00       constant
0xffff7abf7484   132  0000ffff       constant
0xffff7abf7488   136  5d41d951       constant
0xffff7abf748c   140  00000000       constant
0xffff7abf7490   144  7ab22420       constant
0xffff7abf7494   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf7410  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf7424  embedded object  (0x5d4d15e1 WeakCell for 0x4ec383f1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf7440  embedded object  (0x5d41d951 <String[4]: sync>)
0xffff7abf7444  code target (HANDLER)  (0xffff7abd4d00)
0xffff7abf744c  embedded object  (0x5d41d951 <String[4]: sync>)
0xffff7abf7458  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf7460  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = bufferProcessing
compiler = unknown
Instructions (size = 152)
0xffff7abf7500     0  sub csp, jssp, #0x8 (8)
0xffff7abf7504     4  str x3, [jssp, #-8]!
0xffff7abf7508     8  sub csp, jssp, #0x8 (8)
0xffff7abf750c    12  str x4, [jssp, #-8]!
0xffff7abf7510    16  ldr x3, pc+88 (addr 0x0000ffff7abf7568)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf7514    20  ldur x3, [x3, #7]
0xffff7abf7518    24  cmp x3, #0x0 (0)
0xffff7abf751c    28  b.ne #+0x30 (addr 0xffff7abf754c)
0xffff7abf7520    32  tbz w0, #0, #+0x2c (addr 0xffff7abf754c)
0xffff7abf7524    36  ldr x5, pc+76 (addr 0x0000ffff7abf7570)    ;; object: 0x5d4d15f9 WeakCell for 0x4ec38449 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf7528    40  ldur x5, [x5, #7]
0xffff7abf752c    44  tbz w5, #0, #+0x20 (addr 0xffff7abf754c)
0xffff7abf7530    48  ldursw x4, [x5, #15]
0xffff7abf7534    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf754c)
0xffff7abf7538    56  ldr x4, [jssp], #8
0xffff7abf753c    60  ldr x3, [jssp], #8
0xffff7abf7540    64  ldr x2, pc+56 (addr 0x0000ffff7abf7578)    ;; object: 0x5d422951 <String[16]: bufferProcessing>
0xffff7abf7544    68  ldr x16, pc+60 (addr 0x0000ffff7abf7580)    ;; code: HANDLER, StoreTransitionStub, minor: 198671
0xffff7abf7548    72  br x16
0xffff7abf754c    76  ldr x2, pc+60 (addr 0x0000ffff7abf7588)    ;; object: 0x5d422951 <String[16]: bufferProcessing>
0xffff7abf7550    80  ldr x4, [jssp], #8
0xffff7abf7554    84  ldr x3, [jssp], #8
0xffff7abf7558    88  ldr x16, pc+56 (addr 0x0000ffff7abf7590)    ;; code: BUILTIN
0xffff7abf755c    92  br x16
0xffff7abf7560    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf7564   100  d63f03e0       constant
0xffff7abf7568   104  5d4e9429       constant
0xffff7abf756c   108  00000000       constant
0xffff7abf7570   112  5d4d15f9       constant
0xffff7abf7574   116  00000000       constant
0xffff7abf7578   120  5d422951       constant
0xffff7abf757c   124  00000000       constant
0xffff7abf7580   128  7abd4f60       constant
0xffff7abf7584   132  0000ffff       constant
0xffff7abf7588   136  5d422951       constant
0xffff7abf758c   140  00000000       constant
0xffff7abf7590   144  7ab22420       constant
0xffff7abf7594   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf7510  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf7524  embedded object  (0x5d4d15f9 WeakCell for 0x4ec38449 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf7540  embedded object  (0x5d422951 <String[16]: bufferProcessing>)
0xffff7abf7544  code target (HANDLER)  (0xffff7abd4f60)
0xffff7abf754c  embedded object  (0x5d422951 <String[16]: bufferProcessing>)
0xffff7abf7558  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf7560  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = onwrite
compiler = unknown
Instructions (size = 152)
0xffff7abf7600     0  sub csp, jssp, #0x8 (8)
0xffff7abf7604     4  str x3, [jssp, #-8]!
0xffff7abf7608     8  sub csp, jssp, #0x8 (8)
0xffff7abf760c    12  str x4, [jssp, #-8]!
0xffff7abf7610    16  ldr x3, pc+88 (addr 0x0000ffff7abf7668)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf7614    20  ldur x3, [x3, #7]
0xffff7abf7618    24  cmp x3, #0x0 (0)
0xffff7abf761c    28  b.ne #+0x30 (addr 0xffff7abf764c)
0xffff7abf7620    32  tbz w0, #0, #+0x2c (addr 0xffff7abf764c)
0xffff7abf7624    36  ldr x5, pc+76 (addr 0x0000ffff7abf7670)    ;; object: 0x5d4e9999 WeakCell for 0x4ec405e1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf7628    40  ldur x5, [x5, #7]
0xffff7abf762c    44  tbz w5, #0, #+0x20 (addr 0xffff7abf764c)
0xffff7abf7630    48  ldursw x4, [x5, #15]
0xffff7abf7634    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf764c)
0xffff7abf7638    56  ldr x4, [jssp], #8
0xffff7abf763c    60  ldr x3, [jssp], #8
0xffff7abf7640    64  ldr x2, pc+56 (addr 0x0000ffff7abf7678)    ;; object: 0x20db2dc1 <String[7]: onwrite>
0xffff7abf7644    68  ldr x16, pc+60 (addr 0x0000ffff7abf7680)    ;; code: HANDLER, StoreTransitionStub, minor: 198672
0xffff7abf7648    72  br x16
0xffff7abf764c    76  ldr x2, pc+60 (addr 0x0000ffff7abf7688)    ;; object: 0x20db2dc1 <String[7]: onwrite>
0xffff7abf7650    80  ldr x4, [jssp], #8
0xffff7abf7654    84  ldr x3, [jssp], #8
0xffff7abf7658    88  ldr x16, pc+56 (addr 0x0000ffff7abf7690)    ;; code: BUILTIN
0xffff7abf765c    92  br x16
0xffff7abf7660    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf7664   100  d63f03e0       constant
0xffff7abf7668   104  5d4e9429       constant
0xffff7abf766c   108  00000000       constant
0xffff7abf7670   112  5d4e9999       constant
0xffff7abf7674   116  00000000       constant
0xffff7abf7678   120  20db2dc1       constant
0xffff7abf767c   124  00000000       constant
0xffff7abf7680   128  7abd51c0       constant
0xffff7abf7684   132  0000ffff       constant
0xffff7abf7688   136  20db2dc1       constant
0xffff7abf768c   140  00000000       constant
0xffff7abf7690   144  7ab22420       constant
0xffff7abf7694   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf7610  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf7624  embedded object  (0x5d4e9999 WeakCell for 0x4ec405e1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf7640  embedded object  (0x20db2dc1 <String[7]: onwrite>)
0xffff7abf7644  code target (HANDLER)  (0xffff7abd51c0)
0xffff7abf764c  embedded object  (0x20db2dc1 <String[7]: onwrite>)
0xffff7abf7658  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf7660  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf7700     0  tbz w0, #0, #+0x90 (addr 0xffff7abf7790)
0xffff7abf7704     4  mov x2, x0
0xffff7abf7708     8  stur x2, [x1, #135]
0xffff7abf770c    12  add x3, x1, #0x87 (135)
0xffff7abf7710    16  and x2, x2, #0xfffffffffff00000
0xffff7abf7714    20  ldr x2, [x2, #8]
0xffff7abf7718    24  tbz w2, #1, #+0x24 (addr 0xffff7abf773c)
0xffff7abf771c    28  and x2, x1, #0xfffffffffff00000
0xffff7abf7720    32  ldr x2, [x2, #8]
0xffff7abf7724    36  tbz w2, #2, #+0x18 (addr 0xffff7abf773c)
0xffff7abf7728    40  sub csp, jssp, #0x8 (8)
0xffff7abf772c    44  str lr, [jssp, #-8]!
0xffff7abf7730    48  ldr x16, pc+80 (addr 0x0000ffff7abf7780)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf7734    52  blr x16
0xffff7abf7738    56  ldr lr, [jssp], #8
0xffff7abf773c    60  stur x5, [x1, #-1]
0xffff7abf7740    64  tbz w5, #0, #+0x34 (addr 0xffff7abf7774)
0xffff7abf7744    68  sub x2, x1, #0x1 (1)
0xffff7abf7748    72  and x5, x5, #0xfffffffffff00000
0xffff7abf774c    76  ldr x5, [x5, #8]
0xffff7abf7750    80  tbz w5, #1, #+0x24 (addr 0xffff7abf7774)
0xffff7abf7754    84  and x5, x1, #0xfffffffffff00000
0xffff7abf7758    88  ldr x5, [x5, #8]
0xffff7abf775c    92  tbz w5, #2, #+0x18 (addr 0xffff7abf7774)
0xffff7abf7760    96  sub csp, jssp, #0x8 (8)
0xffff7abf7764   100  str lr, [jssp, #-8]!
0xffff7abf7768   104  ldr x16, pc+32 (addr 0x0000ffff7abf7788)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf776c   108  blr x16
0xffff7abf7770   112  ldr lr, [jssp], #8
0xffff7abf7774   116  ret
0xffff7abf7778   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf777c   124  d63f03e0       constant
0xffff7abf7780   128  7ab170c0       constant
0xffff7abf7784   132  0000ffff       constant
0xffff7abf7788   136  7ab38080       constant
0xffff7abf778c   140  0000ffff       constant
0xffff7abf7790   144  movz x16, #0x0
0xffff7abf7794   148  sub csp, jssp, #0x10 (16)
0xffff7abf7798   152  stp fp, lr, [jssp, #-16]!
0xffff7abf779c   156  bl #+0x4 (addr 0xffff7abf77a0)
0xffff7abf77a0   160  movz x17, #0xa00000000
0xffff7abf77a4   164  sub csp, jssp, #0x10 (16)
0xffff7abf77a8   168  stp x17, cp, [jssp, #-16]!
0xffff7abf77ac   172  add fp, jssp, #0x10 (16)
0xffff7abf77b0   176  ldr x17, pc+24 (addr 0x0000ffff7abf77c8)    ;; lazy deoptimization bailout 0
0xffff7abf77b4   180  add x17, x17, x16
0xffff7abf77b8   184  br x17
0xffff7abf77bc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf77c0   192  d63f03e0       constant
0xffff7abf77c4   196  d503201f       constant
0xffff7abf77c8   200  7a906000       constant
0xffff7abf77cc   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf7730  code target (STUB)  (0xffff7ab170c0)
0xffff7abf7768  code target (STUB)  (0xffff7ab38080)
0xffff7abf7778  constant pool (size 24)
0xffff7abf77b0  runtime entry
0xffff7abf77bc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf7700     0  tbz w0, #0, #+0x90 (addr 0xffff7abf7790)
0xffff7abf7704     4  mov x2, x0
0xffff7abf7708     8  stur x2, [x1, #135]
0xffff7abf770c    12  add x3, x1, #0x87 (135)
0xffff7abf7710    16  and x2, x2, #0xfffffffffff00000
0xffff7abf7714    20  ldr x2, [x2, #8]
0xffff7abf7718    24  tbz w2, #1, #+0x24 (addr 0xffff7abf773c)
0xffff7abf771c    28  and x2, x1, #0xfffffffffff00000
0xffff7abf7720    32  ldr x2, [x2, #8]
0xffff7abf7724    36  tbz w2, #2, #+0x18 (addr 0xffff7abf773c)
0xffff7abf7728    40  sub csp, jssp, #0x8 (8)
0xffff7abf772c    44  str lr, [jssp, #-8]!
0xffff7abf7730    48  ldr x16, pc+80 (addr 0x0000ffff7abf7780)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf7734    52  blr x16
0xffff7abf7738    56  ldr lr, [jssp], #8
0xffff7abf773c    60  stur x5, [x1, #-1]
0xffff7abf7740    64  tbz w5, #0, #+0x34 (addr 0xffff7abf7774)
0xffff7abf7744    68  sub x2, x1, #0x1 (1)
0xffff7abf7748    72  and x5, x5, #0xfffffffffff00000
0xffff7abf774c    76  ldr x5, [x5, #8]
0xffff7abf7750    80  tbz w5, #1, #+0x24 (addr 0xffff7abf7774)
0xffff7abf7754    84  and x5, x1, #0xfffffffffff00000
0xffff7abf7758    88  ldr x5, [x5, #8]
0xffff7abf775c    92  tbz w5, #2, #+0x18 (addr 0xffff7abf7774)
0xffff7abf7760    96  sub csp, jssp, #0x8 (8)
0xffff7abf7764   100  str lr, [jssp, #-8]!
0xffff7abf7768   104  ldr x16, pc+32 (addr 0x0000ffff7abf7788)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf776c   108  blr x16
0xffff7abf7770   112  ldr lr, [jssp], #8
0xffff7abf7774   116  ret
0xffff7abf7778   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf777c   124  d63f03e0       constant
0xffff7abf7780   128  7ab170c0       constant
0xffff7abf7784   132  0000ffff       constant
0xffff7abf7788   136  7ab38080       constant
0xffff7abf778c   140  0000ffff       constant
0xffff7abf7790   144  movz x16, #0x0
0xffff7abf7794   148  sub csp, jssp, #0x10 (16)
0xffff7abf7798   152  stp fp, lr, [jssp, #-16]!
0xffff7abf779c   156  bl #+0x4 (addr 0xffff7abf77a0)
0xffff7abf77a0   160  movz x17, #0xa00000000
0xffff7abf77a4   164  sub csp, jssp, #0x10 (16)
0xffff7abf77a8   168  stp x17, cp, [jssp, #-16]!
0xffff7abf77ac   172  add fp, jssp, #0x10 (16)
0xffff7abf77b0   176  ldr x17, pc+24 (addr 0x0000ffff7abf77c8)    ;; lazy deoptimization bailout 0
0xffff7abf77b4   180  add x17, x17, x16
0xffff7abf77b8   184  br x17
0xffff7abf77bc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf77c0   192  d63f03e0       constant
0xffff7abf77c4   196  d503201f       constant
0xffff7abf77c8   200  7a906000       constant
0xffff7abf77cc   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf7730  code target (STUB)  (0xffff7ab170c0)
0xffff7abf7768  code target (STUB)  (0xffff7ab38080)
0xffff7abf7778  constant pool (size 24)
0xffff7abf77b0  runtime entry
0xffff7abf77bc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = writecb
compiler = unknown
Instructions (size = 152)
0xffff7abf7840     0  sub csp, jssp, #0x8 (8)
0xffff7abf7844     4  str x3, [jssp, #-8]!
0xffff7abf7848     8  sub csp, jssp, #0x8 (8)
0xffff7abf784c    12  str x4, [jssp, #-8]!
0xffff7abf7850    16  ldr x3, pc+88 (addr 0x0000ffff7abf78a8)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf7854    20  ldur x3, [x3, #7]
0xffff7abf7858    24  cmp x3, #0x0 (0)
0xffff7abf785c    28  b.ne #+0x30 (addr 0xffff7abf788c)
0xffff7abf7860    32  tbz w0, #0, #+0x2c (addr 0xffff7abf788c)
0xffff7abf7864    36  ldr x5, pc+76 (addr 0x0000ffff7abf78b0)    ;; object: 0x5d4e99d1 WeakCell for 0x4ec40639 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf7868    40  ldur x5, [x5, #7]
0xffff7abf786c    44  tbz w5, #0, #+0x20 (addr 0xffff7abf788c)
0xffff7abf7870    48  ldursw x4, [x5, #15]
0xffff7abf7874    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf788c)
0xffff7abf7878    56  ldr x4, [jssp], #8
0xffff7abf787c    60  ldr x3, [jssp], #8
0xffff7abf7880    64  ldr x2, pc+56 (addr 0x0000ffff7abf78b8)    ;; object: 0x5d422979 <String[7]: writecb>
0xffff7abf7884    68  ldr x16, pc+60 (addr 0x0000ffff7abf78c0)    ;; code: HANDLER, StoreTransitionStub, minor: 198673
0xffff7abf7888    72  br x16
0xffff7abf788c    76  ldr x2, pc+60 (addr 0x0000ffff7abf78c8)    ;; object: 0x5d422979 <String[7]: writecb>
0xffff7abf7890    80  ldr x4, [jssp], #8
0xffff7abf7894    84  ldr x3, [jssp], #8
0xffff7abf7898    88  ldr x16, pc+56 (addr 0x0000ffff7abf78d0)    ;; code: BUILTIN
0xffff7abf789c    92  br x16
0xffff7abf78a0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf78a4   100  d63f03e0       constant
0xffff7abf78a8   104  5d4e9429       constant
0xffff7abf78ac   108  00000000       constant
0xffff7abf78b0   112  5d4e99d1       constant
0xffff7abf78b4   116  00000000       constant
0xffff7abf78b8   120  5d422979       constant
0xffff7abf78bc   124  00000000       constant
0xffff7abf78c0   128  7abf7700       constant
0xffff7abf78c4   132  0000ffff       constant
0xffff7abf78c8   136  5d422979       constant
0xffff7abf78cc   140  00000000       constant
0xffff7abf78d0   144  7ab22420       constant
0xffff7abf78d4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf7850  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf7864  embedded object  (0x5d4e99d1 WeakCell for 0x4ec40639 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf7880  embedded object  (0x5d422979 <String[7]: writecb>)
0xffff7abf7884  code target (HANDLER)  (0xffff7abf7700)
0xffff7abf788c  embedded object  (0x5d422979 <String[7]: writecb>)
0xffff7abf7898  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf78a0  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0xffff7abf7940     0  mov x6, x0
0xffff7abf7944     4  tbnz w6, #0, #+0x54 (addr 0xffff7abf7998)
0xffff7abf7948     8  stur x6, [x1, #143]
0xffff7abf794c    12  stur x5, [x1, #-1]
0xffff7abf7950    16  tbz w5, #0, #+0x34 (addr 0xffff7abf7984)
0xffff7abf7954    20  sub x2, x1, #0x1 (1)
0xffff7abf7958    24  and x5, x5, #0xfffffffffff00000
0xffff7abf795c    28  ldr x5, [x5, #8]
0xffff7abf7960    32  tbz w5, #1, #+0x24 (addr 0xffff7abf7984)
0xffff7abf7964    36  and x5, x1, #0xfffffffffff00000
0xffff7abf7968    40  ldr x5, [x5, #8]
0xffff7abf796c    44  tbz w5, #2, #+0x18 (addr 0xffff7abf7984)
0xffff7abf7970    48  sub csp, jssp, #0x8 (8)
0xffff7abf7974    52  str lr, [jssp, #-8]!
0xffff7abf7978    56  ldr x16, pc+24 (addr 0x0000ffff7abf7990)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf797c    60  blr x16
0xffff7abf7980    64  ldr lr, [jssp], #8
0xffff7abf7984    68  ret
0xffff7abf7988    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf798c    76  d63f03e0       constant
0xffff7abf7990    80  7ab38080       constant
0xffff7abf7994    84  0000ffff       constant
0xffff7abf7998    88  movz x16, #0x0
0xffff7abf799c    92  sub csp, jssp, #0x10 (16)
0xffff7abf79a0    96  stp fp, lr, [jssp, #-16]!
0xffff7abf79a4   100  bl #+0x4 (addr 0xffff7abf79a8)
0xffff7abf79a8   104  movz x17, #0xa00000000
0xffff7abf79ac   108  sub csp, jssp, #0x10 (16)
0xffff7abf79b0   112  stp x17, cp, [jssp, #-16]!
0xffff7abf79b4   116  add fp, jssp, #0x10 (16)
0xffff7abf79b8   120  ldr x17, pc+24 (addr 0x0000ffff7abf79d0)    ;; lazy deoptimization bailout 0
0xffff7abf79bc   124  add x17, x17, x16
0xffff7abf79c0   128  br x17
0xffff7abf79c4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf79c8   136  d63f03e0       constant
0xffff7abf79cc   140  d503201f       constant
0xffff7abf79d0   144  7a906000       constant
0xffff7abf79d4   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf7978  code target (STUB)  (0xffff7ab38080)
0xffff7abf7988  constant pool (size 16)
0xffff7abf79b8  runtime entry
0xffff7abf79c4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0xffff7abf7940     0  mov x6, x0
0xffff7abf7944     4  tbnz w6, #0, #+0x54 (addr 0xffff7abf7998)
0xffff7abf7948     8  stur x6, [x1, #143]
0xffff7abf794c    12  stur x5, [x1, #-1]
0xffff7abf7950    16  tbz w5, #0, #+0x34 (addr 0xffff7abf7984)
0xffff7abf7954    20  sub x2, x1, #0x1 (1)
0xffff7abf7958    24  and x5, x5, #0xfffffffffff00000
0xffff7abf795c    28  ldr x5, [x5, #8]
0xffff7abf7960    32  tbz w5, #1, #+0x24 (addr 0xffff7abf7984)
0xffff7abf7964    36  and x5, x1, #0xfffffffffff00000
0xffff7abf7968    40  ldr x5, [x5, #8]
0xffff7abf796c    44  tbz w5, #2, #+0x18 (addr 0xffff7abf7984)
0xffff7abf7970    48  sub csp, jssp, #0x8 (8)
0xffff7abf7974    52  str lr, [jssp, #-8]!
0xffff7abf7978    56  ldr x16, pc+24 (addr 0x0000ffff7abf7990)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf797c    60  blr x16
0xffff7abf7980    64  ldr lr, [jssp], #8
0xffff7abf7984    68  ret
0xffff7abf7988    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf798c    76  d63f03e0       constant
0xffff7abf7990    80  7ab38080       constant
0xffff7abf7994    84  0000ffff       constant
0xffff7abf7998    88  movz x16, #0x0
0xffff7abf799c    92  sub csp, jssp, #0x10 (16)
0xffff7abf79a0    96  stp fp, lr, [jssp, #-16]!
0xffff7abf79a4   100  bl #+0x4 (addr 0xffff7abf79a8)
0xffff7abf79a8   104  movz x17, #0xa00000000
0xffff7abf79ac   108  sub csp, jssp, #0x10 (16)
0xffff7abf79b0   112  stp x17, cp, [jssp, #-16]!
0xffff7abf79b4   116  add fp, jssp, #0x10 (16)
0xffff7abf79b8   120  ldr x17, pc+24 (addr 0x0000ffff7abf79d0)    ;; lazy deoptimization bailout 0
0xffff7abf79bc   124  add x17, x17, x16
0xffff7abf79c0   128  br x17
0xffff7abf79c4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf79c8   136  d63f03e0       constant
0xffff7abf79cc   140  d503201f       constant
0xffff7abf79d0   144  7a906000       constant
0xffff7abf79d4   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf7978  code target (STUB)  (0xffff7ab38080)
0xffff7abf7988  constant pool (size 16)
0xffff7abf79b8  runtime entry
0xffff7abf79c4  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = writelen
compiler = unknown
Instructions (size = 152)
0xffff7abf7a40     0  sub csp, jssp, #0x8 (8)
0xffff7abf7a44     4  str x3, [jssp, #-8]!
0xffff7abf7a48     8  sub csp, jssp, #0x8 (8)
0xffff7abf7a4c    12  str x4, [jssp, #-8]!
0xffff7abf7a50    16  ldr x3, pc+88 (addr 0x0000ffff7abf7aa8)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf7a54    20  ldur x3, [x3, #7]
0xffff7abf7a58    24  cmp x3, #0x0 (0)
0xffff7abf7a5c    28  b.ne #+0x2c (addr 0xffff7abf7a88)
0xffff7abf7a60    32  ldr x5, pc+80 (addr 0x0000ffff7abf7ab0)    ;; object: 0x5d4e9ac1 WeakCell for 0x4ec40691 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf7a64    36  ldur x5, [x5, #7]
0xffff7abf7a68    40  tbz w5, #0, #+0x20 (addr 0xffff7abf7a88)
0xffff7abf7a6c    44  ldursw x4, [x5, #15]
0xffff7abf7a70    48  tbnz w4, #23, #+0x18 (addr 0xffff7abf7a88)
0xffff7abf7a74    52  ldr x4, [jssp], #8
0xffff7abf7a78    56  ldr x3, [jssp], #8
0xffff7abf7a7c    60  ldr x2, pc+60 (addr 0x0000ffff7abf7ab8)    ;; object: 0x5d422999 <String[8]: writelen>
0xffff7abf7a80    64  ldr x16, pc+64 (addr 0x0000ffff7abf7ac0)    ;; code: HANDLER, StoreTransitionStub, minor: 174098
0xffff7abf7a84    68  br x16
0xffff7abf7a88    72  ldr x2, pc+64 (addr 0x0000ffff7abf7ac8)    ;; object: 0x5d422999 <String[8]: writelen>
0xffff7abf7a8c    76  ldr x4, [jssp], #8
0xffff7abf7a90    80  ldr x3, [jssp], #8
0xffff7abf7a94    84  ldr x16, pc+60 (addr 0x0000ffff7abf7ad0)    ;; code: BUILTIN
0xffff7abf7a98    88  br x16
0xffff7abf7a9c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abf7aa0    96  d63f03e0       constant
0xffff7abf7aa4   100  d503201f       constant
0xffff7abf7aa8   104  5d4e9429       constant
0xffff7abf7aac   108  00000000       constant
0xffff7abf7ab0   112  5d4e9ac1       constant
0xffff7abf7ab4   116  00000000       constant
0xffff7abf7ab8   120  5d422999       constant
0xffff7abf7abc   124  00000000       constant
0xffff7abf7ac0   128  7abf7940       constant
0xffff7abf7ac4   132  0000ffff       constant
0xffff7abf7ac8   136  5d422999       constant
0xffff7abf7acc   140  00000000       constant
0xffff7abf7ad0   144  7ab22420       constant
0xffff7abf7ad4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf7a50  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf7a60  embedded object  (0x5d4e9ac1 WeakCell for 0x4ec40691 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf7a7c  embedded object  (0x5d422999 <String[8]: writelen>)
0xffff7abf7a80  code target (HANDLER)  (0xffff7abf7940)
0xffff7abf7a88  embedded object  (0x5d422999 <String[8]: writelen>)
0xffff7abf7a94  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf7a9c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf7b40     0  tbz w0, #0, #+0x90 (addr 0xffff7abf7bd0)
0xffff7abf7b44     4  mov x2, x0
0xffff7abf7b48     8  stur x2, [x1, #151]
0xffff7abf7b4c    12  add x3, x1, #0x97 (151)
0xffff7abf7b50    16  and x2, x2, #0xfffffffffff00000
0xffff7abf7b54    20  ldr x2, [x2, #8]
0xffff7abf7b58    24  tbz w2, #1, #+0x24 (addr 0xffff7abf7b7c)
0xffff7abf7b5c    28  and x2, x1, #0xfffffffffff00000
0xffff7abf7b60    32  ldr x2, [x2, #8]
0xffff7abf7b64    36  tbz w2, #2, #+0x18 (addr 0xffff7abf7b7c)
0xffff7abf7b68    40  sub csp, jssp, #0x8 (8)
0xffff7abf7b6c    44  str lr, [jssp, #-8]!
0xffff7abf7b70    48  ldr x16, pc+80 (addr 0x0000ffff7abf7bc0)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf7b74    52  blr x16
0xffff7abf7b78    56  ldr lr, [jssp], #8
0xffff7abf7b7c    60  stur x5, [x1, #-1]
0xffff7abf7b80    64  tbz w5, #0, #+0x34 (addr 0xffff7abf7bb4)
0xffff7abf7b84    68  sub x2, x1, #0x1 (1)
0xffff7abf7b88    72  and x5, x5, #0xfffffffffff00000
0xffff7abf7b8c    76  ldr x5, [x5, #8]
0xffff7abf7b90    80  tbz w5, #1, #+0x24 (addr 0xffff7abf7bb4)
0xffff7abf7b94    84  and x5, x1, #0xfffffffffff00000
0xffff7abf7b98    88  ldr x5, [x5, #8]
0xffff7abf7b9c    92  tbz w5, #2, #+0x18 (addr 0xffff7abf7bb4)
0xffff7abf7ba0    96  sub csp, jssp, #0x8 (8)
0xffff7abf7ba4   100  str lr, [jssp, #-8]!
0xffff7abf7ba8   104  ldr x16, pc+32 (addr 0x0000ffff7abf7bc8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf7bac   108  blr x16
0xffff7abf7bb0   112  ldr lr, [jssp], #8
0xffff7abf7bb4   116  ret
0xffff7abf7bb8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf7bbc   124  d63f03e0       constant
0xffff7abf7bc0   128  7ab170c0       constant
0xffff7abf7bc4   132  0000ffff       constant
0xffff7abf7bc8   136  7ab38080       constant
0xffff7abf7bcc   140  0000ffff       constant
0xffff7abf7bd0   144  movz x16, #0x0
0xffff7abf7bd4   148  sub csp, jssp, #0x10 (16)
0xffff7abf7bd8   152  stp fp, lr, [jssp, #-16]!
0xffff7abf7bdc   156  bl #+0x4 (addr 0xffff7abf7be0)
0xffff7abf7be0   160  movz x17, #0xa00000000
0xffff7abf7be4   164  sub csp, jssp, #0x10 (16)
0xffff7abf7be8   168  stp x17, cp, [jssp, #-16]!
0xffff7abf7bec   172  add fp, jssp, #0x10 (16)
0xffff7abf7bf0   176  ldr x17, pc+24 (addr 0x0000ffff7abf7c08)    ;; lazy deoptimization bailout 0
0xffff7abf7bf4   180  add x17, x17, x16
0xffff7abf7bf8   184  br x17
0xffff7abf7bfc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf7c00   192  d63f03e0       constant
0xffff7abf7c04   196  d503201f       constant
0xffff7abf7c08   200  7a906000       constant
0xffff7abf7c0c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf7b70  code target (STUB)  (0xffff7ab170c0)
0xffff7abf7ba8  code target (STUB)  (0xffff7ab38080)
0xffff7abf7bb8  constant pool (size 24)
0xffff7abf7bf0  runtime entry
0xffff7abf7bfc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf7b40     0  tbz w0, #0, #+0x90 (addr 0xffff7abf7bd0)
0xffff7abf7b44     4  mov x2, x0
0xffff7abf7b48     8  stur x2, [x1, #151]
0xffff7abf7b4c    12  add x3, x1, #0x97 (151)
0xffff7abf7b50    16  and x2, x2, #0xfffffffffff00000
0xffff7abf7b54    20  ldr x2, [x2, #8]
0xffff7abf7b58    24  tbz w2, #1, #+0x24 (addr 0xffff7abf7b7c)
0xffff7abf7b5c    28  and x2, x1, #0xfffffffffff00000
0xffff7abf7b60    32  ldr x2, [x2, #8]
0xffff7abf7b64    36  tbz w2, #2, #+0x18 (addr 0xffff7abf7b7c)
0xffff7abf7b68    40  sub csp, jssp, #0x8 (8)
0xffff7abf7b6c    44  str lr, [jssp, #-8]!
0xffff7abf7b70    48  ldr x16, pc+80 (addr 0x0000ffff7abf7bc0)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf7b74    52  blr x16
0xffff7abf7b78    56  ldr lr, [jssp], #8
0xffff7abf7b7c    60  stur x5, [x1, #-1]
0xffff7abf7b80    64  tbz w5, #0, #+0x34 (addr 0xffff7abf7bb4)
0xffff7abf7b84    68  sub x2, x1, #0x1 (1)
0xffff7abf7b88    72  and x5, x5, #0xfffffffffff00000
0xffff7abf7b8c    76  ldr x5, [x5, #8]
0xffff7abf7b90    80  tbz w5, #1, #+0x24 (addr 0xffff7abf7bb4)
0xffff7abf7b94    84  and x5, x1, #0xfffffffffff00000
0xffff7abf7b98    88  ldr x5, [x5, #8]
0xffff7abf7b9c    92  tbz w5, #2, #+0x18 (addr 0xffff7abf7bb4)
0xffff7abf7ba0    96  sub csp, jssp, #0x8 (8)
0xffff7abf7ba4   100  str lr, [jssp, #-8]!
0xffff7abf7ba8   104  ldr x16, pc+32 (addr 0x0000ffff7abf7bc8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf7bac   108  blr x16
0xffff7abf7bb0   112  ldr lr, [jssp], #8
0xffff7abf7bb4   116  ret
0xffff7abf7bb8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf7bbc   124  d63f03e0       constant
0xffff7abf7bc0   128  7ab170c0       constant
0xffff7abf7bc4   132  0000ffff       constant
0xffff7abf7bc8   136  7ab38080       constant
0xffff7abf7bcc   140  0000ffff       constant
0xffff7abf7bd0   144  movz x16, #0x0
0xffff7abf7bd4   148  sub csp, jssp, #0x10 (16)
0xffff7abf7bd8   152  stp fp, lr, [jssp, #-16]!
0xffff7abf7bdc   156  bl #+0x4 (addr 0xffff7abf7be0)
0xffff7abf7be0   160  movz x17, #0xa00000000
0xffff7abf7be4   164  sub csp, jssp, #0x10 (16)
0xffff7abf7be8   168  stp x17, cp, [jssp, #-16]!
0xffff7abf7bec   172  add fp, jssp, #0x10 (16)
0xffff7abf7bf0   176  ldr x17, pc+24 (addr 0x0000ffff7abf7c08)    ;; lazy deoptimization bailout 0
0xffff7abf7bf4   180  add x17, x17, x16
0xffff7abf7bf8   184  br x17
0xffff7abf7bfc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf7c00   192  d63f03e0       constant
0xffff7abf7c04   196  d503201f       constant
0xffff7abf7c08   200  7a906000       constant
0xffff7abf7c0c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf7b70  code target (STUB)  (0xffff7ab170c0)
0xffff7abf7ba8  code target (STUB)  (0xffff7ab38080)
0xffff7abf7bb8  constant pool (size 24)
0xffff7abf7bf0  runtime entry
0xffff7abf7bfc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = bufferedRequest
compiler = unknown
Instructions (size = 152)
0xffff7abf7c80     0  sub csp, jssp, #0x8 (8)
0xffff7abf7c84     4  str x3, [jssp, #-8]!
0xffff7abf7c88     8  sub csp, jssp, #0x8 (8)
0xffff7abf7c8c    12  str x4, [jssp, #-8]!
0xffff7abf7c90    16  ldr x3, pc+88 (addr 0x0000ffff7abf7ce8)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf7c94    20  ldur x3, [x3, #7]
0xffff7abf7c98    24  cmp x3, #0x0 (0)
0xffff7abf7c9c    28  b.ne #+0x30 (addr 0xffff7abf7ccc)
0xffff7abf7ca0    32  tbz w0, #0, #+0x2c (addr 0xffff7abf7ccc)
0xffff7abf7ca4    36  ldr x5, pc+76 (addr 0x0000ffff7abf7cf0)    ;; object: 0x5d4e9bb1 WeakCell for 0x4ec406e9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf7ca8    40  ldur x5, [x5, #7]
0xffff7abf7cac    44  tbz w5, #0, #+0x20 (addr 0xffff7abf7ccc)
0xffff7abf7cb0    48  ldursw x4, [x5, #15]
0xffff7abf7cb4    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf7ccc)
0xffff7abf7cb8    56  ldr x4, [jssp], #8
0xffff7abf7cbc    60  ldr x3, [jssp], #8
0xffff7abf7cc0    64  ldr x2, pc+56 (addr 0x0000ffff7abf7cf8)    ;; object: 0x5d4229b9 <String[15]: bufferedRequest>
0xffff7abf7cc4    68  ldr x16, pc+60 (addr 0x0000ffff7abf7d00)    ;; code: HANDLER, StoreTransitionStub, minor: 198675
0xffff7abf7cc8    72  br x16
0xffff7abf7ccc    76  ldr x2, pc+60 (addr 0x0000ffff7abf7d08)    ;; object: 0x5d4229b9 <String[15]: bufferedRequest>
0xffff7abf7cd0    80  ldr x4, [jssp], #8
0xffff7abf7cd4    84  ldr x3, [jssp], #8
0xffff7abf7cd8    88  ldr x16, pc+56 (addr 0x0000ffff7abf7d10)    ;; code: BUILTIN
0xffff7abf7cdc    92  br x16
0xffff7abf7ce0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf7ce4   100  d63f03e0       constant
0xffff7abf7ce8   104  5d4e9429       constant
0xffff7abf7cec   108  00000000       constant
0xffff7abf7cf0   112  5d4e9bb1       constant
0xffff7abf7cf4   116  00000000       constant
0xffff7abf7cf8   120  5d4229b9       constant
0xffff7abf7cfc   124  00000000       constant
0xffff7abf7d00   128  7abf7b40       constant
0xffff7abf7d04   132  0000ffff       constant
0xffff7abf7d08   136  5d4229b9       constant
0xffff7abf7d0c   140  00000000       constant
0xffff7abf7d10   144  7ab22420       constant
0xffff7abf7d14   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf7c90  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf7ca4  embedded object  (0x5d4e9bb1 WeakCell for 0x4ec406e9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf7cc0  embedded object  (0x5d4229b9 <String[15]: bufferedRequest>)
0xffff7abf7cc4  code target (HANDLER)  (0xffff7abf7b40)
0xffff7abf7ccc  embedded object  (0x5d4229b9 <String[15]: bufferedRequest>)
0xffff7abf7cd8  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf7ce0  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf7d80     0  tbz w0, #0, #+0x90 (addr 0xffff7abf7e10)
0xffff7abf7d84     4  mov x2, x0
0xffff7abf7d88     8  stur x2, [x1, #159]
0xffff7abf7d8c    12  add x3, x1, #0x9f (159)
0xffff7abf7d90    16  and x2, x2, #0xfffffffffff00000
0xffff7abf7d94    20  ldr x2, [x2, #8]
0xffff7abf7d98    24  tbz w2, #1, #+0x24 (addr 0xffff7abf7dbc)
0xffff7abf7d9c    28  and x2, x1, #0xfffffffffff00000
0xffff7abf7da0    32  ldr x2, [x2, #8]
0xffff7abf7da4    36  tbz w2, #2, #+0x18 (addr 0xffff7abf7dbc)
0xffff7abf7da8    40  sub csp, jssp, #0x8 (8)
0xffff7abf7dac    44  str lr, [jssp, #-8]!
0xffff7abf7db0    48  ldr x16, pc+80 (addr 0x0000ffff7abf7e00)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf7db4    52  blr x16
0xffff7abf7db8    56  ldr lr, [jssp], #8
0xffff7abf7dbc    60  stur x5, [x1, #-1]
0xffff7abf7dc0    64  tbz w5, #0, #+0x34 (addr 0xffff7abf7df4)
0xffff7abf7dc4    68  sub x2, x1, #0x1 (1)
0xffff7abf7dc8    72  and x5, x5, #0xfffffffffff00000
0xffff7abf7dcc    76  ldr x5, [x5, #8]
0xffff7abf7dd0    80  tbz w5, #1, #+0x24 (addr 0xffff7abf7df4)
0xffff7abf7dd4    84  and x5, x1, #0xfffffffffff00000
0xffff7abf7dd8    88  ldr x5, [x5, #8]
0xffff7abf7ddc    92  tbz w5, #2, #+0x18 (addr 0xffff7abf7df4)
0xffff7abf7de0    96  sub csp, jssp, #0x8 (8)
0xffff7abf7de4   100  str lr, [jssp, #-8]!
0xffff7abf7de8   104  ldr x16, pc+32 (addr 0x0000ffff7abf7e08)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf7dec   108  blr x16
0xffff7abf7df0   112  ldr lr, [jssp], #8
0xffff7abf7df4   116  ret
0xffff7abf7df8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf7dfc   124  d63f03e0       constant
0xffff7abf7e00   128  7ab170c0       constant
0xffff7abf7e04   132  0000ffff       constant
0xffff7abf7e08   136  7ab38080       constant
0xffff7abf7e0c   140  0000ffff       constant
0xffff7abf7e10   144  movz x16, #0x0
0xffff7abf7e14   148  sub csp, jssp, #0x10 (16)
0xffff7abf7e18   152  stp fp, lr, [jssp, #-16]!
0xffff7abf7e1c   156  bl #+0x4 (addr 0xffff7abf7e20)
0xffff7abf7e20   160  movz x17, #0xa00000000
0xffff7abf7e24   164  sub csp, jssp, #0x10 (16)
0xffff7abf7e28   168  stp x17, cp, [jssp, #-16]!
0xffff7abf7e2c   172  add fp, jssp, #0x10 (16)
0xffff7abf7e30   176  ldr x17, pc+24 (addr 0x0000ffff7abf7e48)    ;; lazy deoptimization bailout 0
0xffff7abf7e34   180  add x17, x17, x16
0xffff7abf7e38   184  br x17
0xffff7abf7e3c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf7e40   192  d63f03e0       constant
0xffff7abf7e44   196  d503201f       constant
0xffff7abf7e48   200  7a906000       constant
0xffff7abf7e4c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf7db0  code target (STUB)  (0xffff7ab170c0)
0xffff7abf7de8  code target (STUB)  (0xffff7ab38080)
0xffff7abf7df8  constant pool (size 24)
0xffff7abf7e30  runtime entry
0xffff7abf7e3c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf7d80     0  tbz w0, #0, #+0x90 (addr 0xffff7abf7e10)
0xffff7abf7d84     4  mov x2, x0
0xffff7abf7d88     8  stur x2, [x1, #159]
0xffff7abf7d8c    12  add x3, x1, #0x9f (159)
0xffff7abf7d90    16  and x2, x2, #0xfffffffffff00000
0xffff7abf7d94    20  ldr x2, [x2, #8]
0xffff7abf7d98    24  tbz w2, #1, #+0x24 (addr 0xffff7abf7dbc)
0xffff7abf7d9c    28  and x2, x1, #0xfffffffffff00000
0xffff7abf7da0    32  ldr x2, [x2, #8]
0xffff7abf7da4    36  tbz w2, #2, #+0x18 (addr 0xffff7abf7dbc)
0xffff7abf7da8    40  sub csp, jssp, #0x8 (8)
0xffff7abf7dac    44  str lr, [jssp, #-8]!
0xffff7abf7db0    48  ldr x16, pc+80 (addr 0x0000ffff7abf7e00)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf7db4    52  blr x16
0xffff7abf7db8    56  ldr lr, [jssp], #8
0xffff7abf7dbc    60  stur x5, [x1, #-1]
0xffff7abf7dc0    64  tbz w5, #0, #+0x34 (addr 0xffff7abf7df4)
0xffff7abf7dc4    68  sub x2, x1, #0x1 (1)
0xffff7abf7dc8    72  and x5, x5, #0xfffffffffff00000
0xffff7abf7dcc    76  ldr x5, [x5, #8]
0xffff7abf7dd0    80  tbz w5, #1, #+0x24 (addr 0xffff7abf7df4)
0xffff7abf7dd4    84  and x5, x1, #0xfffffffffff00000
0xffff7abf7dd8    88  ldr x5, [x5, #8]
0xffff7abf7ddc    92  tbz w5, #2, #+0x18 (addr 0xffff7abf7df4)
0xffff7abf7de0    96  sub csp, jssp, #0x8 (8)
0xffff7abf7de4   100  str lr, [jssp, #-8]!
0xffff7abf7de8   104  ldr x16, pc+32 (addr 0x0000ffff7abf7e08)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf7dec   108  blr x16
0xffff7abf7df0   112  ldr lr, [jssp], #8
0xffff7abf7df4   116  ret
0xffff7abf7df8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf7dfc   124  d63f03e0       constant
0xffff7abf7e00   128  7ab170c0       constant
0xffff7abf7e04   132  0000ffff       constant
0xffff7abf7e08   136  7ab38080       constant
0xffff7abf7e0c   140  0000ffff       constant
0xffff7abf7e10   144  movz x16, #0x0
0xffff7abf7e14   148  sub csp, jssp, #0x10 (16)
0xffff7abf7e18   152  stp fp, lr, [jssp, #-16]!
0xffff7abf7e1c   156  bl #+0x4 (addr 0xffff7abf7e20)
0xffff7abf7e20   160  movz x17, #0xa00000000
0xffff7abf7e24   164  sub csp, jssp, #0x10 (16)
0xffff7abf7e28   168  stp x17, cp, [jssp, #-16]!
0xffff7abf7e2c   172  add fp, jssp, #0x10 (16)
0xffff7abf7e30   176  ldr x17, pc+24 (addr 0x0000ffff7abf7e48)    ;; lazy deoptimization bailout 0
0xffff7abf7e34   180  add x17, x17, x16
0xffff7abf7e38   184  br x17
0xffff7abf7e3c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf7e40   192  d63f03e0       constant
0xffff7abf7e44   196  d503201f       constant
0xffff7abf7e48   200  7a906000       constant
0xffff7abf7e4c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf7db0  code target (STUB)  (0xffff7ab170c0)
0xffff7abf7de8  code target (STUB)  (0xffff7ab38080)
0xffff7abf7df8  constant pool (size 24)
0xffff7abf7e30  runtime entry
0xffff7abf7e3c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = lastBufferedRequest
compiler = unknown
Instructions (size = 152)
0xffff7abf7ec0     0  sub csp, jssp, #0x8 (8)
0xffff7abf7ec4     4  str x3, [jssp, #-8]!
0xffff7abf7ec8     8  sub csp, jssp, #0x8 (8)
0xffff7abf7ecc    12  str x4, [jssp, #-8]!
0xffff7abf7ed0    16  ldr x3, pc+88 (addr 0x0000ffff7abf7f28)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf7ed4    20  ldur x3, [x3, #7]
0xffff7abf7ed8    24  cmp x3, #0x0 (0)
0xffff7abf7edc    28  b.ne #+0x30 (addr 0xffff7abf7f0c)
0xffff7abf7ee0    32  tbz w0, #0, #+0x2c (addr 0xffff7abf7f0c)
0xffff7abf7ee4    36  ldr x5, pc+76 (addr 0x0000ffff7abf7f30)    ;; object: 0x5d4e9ca1 WeakCell for 0x4ec40741 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf7ee8    40  ldur x5, [x5, #7]
0xffff7abf7eec    44  tbz w5, #0, #+0x20 (addr 0xffff7abf7f0c)
0xffff7abf7ef0    48  ldursw x4, [x5, #15]
0xffff7abf7ef4    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf7f0c)
0xffff7abf7ef8    56  ldr x4, [jssp], #8
0xffff7abf7efc    60  ldr x3, [jssp], #8
0xffff7abf7f00    64  ldr x2, pc+56 (addr 0x0000ffff7abf7f38)    ;; object: 0x5d4229e1 <String[19]: lastBufferedRequest>
0xffff7abf7f04    68  ldr x16, pc+60 (addr 0x0000ffff7abf7f40)    ;; code: HANDLER, StoreTransitionStub, minor: 198676
0xffff7abf7f08    72  br x16
0xffff7abf7f0c    76  ldr x2, pc+60 (addr 0x0000ffff7abf7f48)    ;; object: 0x5d4229e1 <String[19]: lastBufferedRequest>
0xffff7abf7f10    80  ldr x4, [jssp], #8
0xffff7abf7f14    84  ldr x3, [jssp], #8
0xffff7abf7f18    88  ldr x16, pc+56 (addr 0x0000ffff7abf7f50)    ;; code: BUILTIN
0xffff7abf7f1c    92  br x16
0xffff7abf7f20    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf7f24   100  d63f03e0       constant
0xffff7abf7f28   104  5d4e9429       constant
0xffff7abf7f2c   108  00000000       constant
0xffff7abf7f30   112  5d4e9ca1       constant
0xffff7abf7f34   116  00000000       constant
0xffff7abf7f38   120  5d4229e1       constant
0xffff7abf7f3c   124  00000000       constant
0xffff7abf7f40   128  7abf7d80       constant
0xffff7abf7f44   132  0000ffff       constant
0xffff7abf7f48   136  5d4229e1       constant
0xffff7abf7f4c   140  00000000       constant
0xffff7abf7f50   144  7ab22420       constant
0xffff7abf7f54   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf7ed0  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf7ee4  embedded object  (0x5d4e9ca1 WeakCell for 0x4ec40741 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf7f00  embedded object  (0x5d4229e1 <String[19]: lastBufferedRequest>)
0xffff7abf7f04  code target (HANDLER)  (0xffff7abf7d80)
0xffff7abf7f0c  embedded object  (0x5d4229e1 <String[19]: lastBufferedRequest>)
0xffff7abf7f18  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf7f20  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0xffff7abf7fc0     0  mov x6, x0
0xffff7abf7fc4     4  tbnz w6, #0, #+0x54 (addr 0xffff7abf8018)
0xffff7abf7fc8     8  stur x6, [x1, #167]
0xffff7abf7fcc    12  stur x5, [x1, #-1]
0xffff7abf7fd0    16  tbz w5, #0, #+0x34 (addr 0xffff7abf8004)
0xffff7abf7fd4    20  sub x2, x1, #0x1 (1)
0xffff7abf7fd8    24  and x5, x5, #0xfffffffffff00000
0xffff7abf7fdc    28  ldr x5, [x5, #8]
0xffff7abf7fe0    32  tbz w5, #1, #+0x24 (addr 0xffff7abf8004)
0xffff7abf7fe4    36  and x5, x1, #0xfffffffffff00000
0xffff7abf7fe8    40  ldr x5, [x5, #8]
0xffff7abf7fec    44  tbz w5, #2, #+0x18 (addr 0xffff7abf8004)
0xffff7abf7ff0    48  sub csp, jssp, #0x8 (8)
0xffff7abf7ff4    52  str lr, [jssp, #-8]!
0xffff7abf7ff8    56  ldr x16, pc+24 (addr 0x0000ffff7abf8010)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf7ffc    60  blr x16
0xffff7abf8000    64  ldr lr, [jssp], #8
0xffff7abf8004    68  ret
0xffff7abf8008    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf800c    76  d63f03e0       constant
0xffff7abf8010    80  7ab38080       constant
0xffff7abf8014    84  0000ffff       constant
0xffff7abf8018    88  movz x16, #0x0
0xffff7abf801c    92  sub csp, jssp, #0x10 (16)
0xffff7abf8020    96  stp fp, lr, [jssp, #-16]!
0xffff7abf8024   100  bl #+0x4 (addr 0xffff7abf8028)
0xffff7abf8028   104  movz x17, #0xa00000000
0xffff7abf802c   108  sub csp, jssp, #0x10 (16)
0xffff7abf8030   112  stp x17, cp, [jssp, #-16]!
0xffff7abf8034   116  add fp, jssp, #0x10 (16)
0xffff7abf8038   120  ldr x17, pc+24 (addr 0x0000ffff7abf8050)    ;; lazy deoptimization bailout 0
0xffff7abf803c   124  add x17, x17, x16
0xffff7abf8040   128  br x17
0xffff7abf8044   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf8048   136  d63f03e0       constant
0xffff7abf804c   140  d503201f       constant
0xffff7abf8050   144  7a906000       constant
0xffff7abf8054   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf7ff8  code target (STUB)  (0xffff7ab38080)
0xffff7abf8008  constant pool (size 16)
0xffff7abf8038  runtime entry
0xffff7abf8044  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0xffff7abf7fc0     0  mov x6, x0
0xffff7abf7fc4     4  tbnz w6, #0, #+0x54 (addr 0xffff7abf8018)
0xffff7abf7fc8     8  stur x6, [x1, #167]
0xffff7abf7fcc    12  stur x5, [x1, #-1]
0xffff7abf7fd0    16  tbz w5, #0, #+0x34 (addr 0xffff7abf8004)
0xffff7abf7fd4    20  sub x2, x1, #0x1 (1)
0xffff7abf7fd8    24  and x5, x5, #0xfffffffffff00000
0xffff7abf7fdc    28  ldr x5, [x5, #8]
0xffff7abf7fe0    32  tbz w5, #1, #+0x24 (addr 0xffff7abf8004)
0xffff7abf7fe4    36  and x5, x1, #0xfffffffffff00000
0xffff7abf7fe8    40  ldr x5, [x5, #8]
0xffff7abf7fec    44  tbz w5, #2, #+0x18 (addr 0xffff7abf8004)
0xffff7abf7ff0    48  sub csp, jssp, #0x8 (8)
0xffff7abf7ff4    52  str lr, [jssp, #-8]!
0xffff7abf7ff8    56  ldr x16, pc+24 (addr 0x0000ffff7abf8010)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf7ffc    60  blr x16
0xffff7abf8000    64  ldr lr, [jssp], #8
0xffff7abf8004    68  ret
0xffff7abf8008    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf800c    76  d63f03e0       constant
0xffff7abf8010    80  7ab38080       constant
0xffff7abf8014    84  0000ffff       constant
0xffff7abf8018    88  movz x16, #0x0
0xffff7abf801c    92  sub csp, jssp, #0x10 (16)
0xffff7abf8020    96  stp fp, lr, [jssp, #-16]!
0xffff7abf8024   100  bl #+0x4 (addr 0xffff7abf8028)
0xffff7abf8028   104  movz x17, #0xa00000000
0xffff7abf802c   108  sub csp, jssp, #0x10 (16)
0xffff7abf8030   112  stp x17, cp, [jssp, #-16]!
0xffff7abf8034   116  add fp, jssp, #0x10 (16)
0xffff7abf8038   120  ldr x17, pc+24 (addr 0x0000ffff7abf8050)    ;; lazy deoptimization bailout 0
0xffff7abf803c   124  add x17, x17, x16
0xffff7abf8040   128  br x17
0xffff7abf8044   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf8048   136  d63f03e0       constant
0xffff7abf804c   140  d503201f       constant
0xffff7abf8050   144  7a906000       constant
0xffff7abf8054   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf7ff8  code target (STUB)  (0xffff7ab38080)
0xffff7abf8008  constant pool (size 16)
0xffff7abf8038  runtime entry
0xffff7abf8044  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = pendingcb
compiler = unknown
Instructions (size = 152)
0xffff7abf80c0     0  sub csp, jssp, #0x8 (8)
0xffff7abf80c4     4  str x3, [jssp, #-8]!
0xffff7abf80c8     8  sub csp, jssp, #0x8 (8)
0xffff7abf80cc    12  str x4, [jssp, #-8]!
0xffff7abf80d0    16  ldr x3, pc+88 (addr 0x0000ffff7abf8128)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf80d4    20  ldur x3, [x3, #7]
0xffff7abf80d8    24  cmp x3, #0x0 (0)
0xffff7abf80dc    28  b.ne #+0x2c (addr 0xffff7abf8108)
0xffff7abf80e0    32  ldr x5, pc+80 (addr 0x0000ffff7abf8130)    ;; object: 0x5d4e9d91 WeakCell for 0x4ec40799 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf80e4    36  ldur x5, [x5, #7]
0xffff7abf80e8    40  tbz w5, #0, #+0x20 (addr 0xffff7abf8108)
0xffff7abf80ec    44  ldursw x4, [x5, #15]
0xffff7abf80f0    48  tbnz w4, #23, #+0x18 (addr 0xffff7abf8108)
0xffff7abf80f4    52  ldr x4, [jssp], #8
0xffff7abf80f8    56  ldr x3, [jssp], #8
0xffff7abf80fc    60  ldr x2, pc+60 (addr 0x0000ffff7abf8138)    ;; object: 0x5d422a11 <String[9]: pendingcb>
0xffff7abf8100    64  ldr x16, pc+64 (addr 0x0000ffff7abf8140)    ;; code: HANDLER, StoreTransitionStub, minor: 174101
0xffff7abf8104    68  br x16
0xffff7abf8108    72  ldr x2, pc+64 (addr 0x0000ffff7abf8148)    ;; object: 0x5d422a11 <String[9]: pendingcb>
0xffff7abf810c    76  ldr x4, [jssp], #8
0xffff7abf8110    80  ldr x3, [jssp], #8
0xffff7abf8114    84  ldr x16, pc+60 (addr 0x0000ffff7abf8150)    ;; code: BUILTIN
0xffff7abf8118    88  br x16
0xffff7abf811c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abf8120    96  d63f03e0       constant
0xffff7abf8124   100  d503201f       constant
0xffff7abf8128   104  5d4e9429       constant
0xffff7abf812c   108  00000000       constant
0xffff7abf8130   112  5d4e9d91       constant
0xffff7abf8134   116  00000000       constant
0xffff7abf8138   120  5d422a11       constant
0xffff7abf813c   124  00000000       constant
0xffff7abf8140   128  7abf7fc0       constant
0xffff7abf8144   132  0000ffff       constant
0xffff7abf8148   136  5d422a11       constant
0xffff7abf814c   140  00000000       constant
0xffff7abf8150   144  7ab22420       constant
0xffff7abf8154   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf80d0  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf80e0  embedded object  (0x5d4e9d91 WeakCell for 0x4ec40799 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf80fc  embedded object  (0x5d422a11 <String[9]: pendingcb>)
0xffff7abf8100  code target (HANDLER)  (0xffff7abf7fc0)
0xffff7abf8108  embedded object  (0x5d422a11 <String[9]: pendingcb>)
0xffff7abf8114  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf811c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf81c0     0  tbz w0, #0, #+0x90 (addr 0xffff7abf8250)
0xffff7abf81c4     4  mov x2, x0
0xffff7abf81c8     8  stur x2, [x1, #175]
0xffff7abf81cc    12  add x3, x1, #0xaf (175)
0xffff7abf81d0    16  and x2, x2, #0xfffffffffff00000
0xffff7abf81d4    20  ldr x2, [x2, #8]
0xffff7abf81d8    24  tbz w2, #1, #+0x24 (addr 0xffff7abf81fc)
0xffff7abf81dc    28  and x2, x1, #0xfffffffffff00000
0xffff7abf81e0    32  ldr x2, [x2, #8]
0xffff7abf81e4    36  tbz w2, #2, #+0x18 (addr 0xffff7abf81fc)
0xffff7abf81e8    40  sub csp, jssp, #0x8 (8)
0xffff7abf81ec    44  str lr, [jssp, #-8]!
0xffff7abf81f0    48  ldr x16, pc+80 (addr 0x0000ffff7abf8240)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf81f4    52  blr x16
0xffff7abf81f8    56  ldr lr, [jssp], #8
0xffff7abf81fc    60  stur x5, [x1, #-1]
0xffff7abf8200    64  tbz w5, #0, #+0x34 (addr 0xffff7abf8234)
0xffff7abf8204    68  sub x2, x1, #0x1 (1)
0xffff7abf8208    72  and x5, x5, #0xfffffffffff00000
0xffff7abf820c    76  ldr x5, [x5, #8]
0xffff7abf8210    80  tbz w5, #1, #+0x24 (addr 0xffff7abf8234)
0xffff7abf8214    84  and x5, x1, #0xfffffffffff00000
0xffff7abf8218    88  ldr x5, [x5, #8]
0xffff7abf821c    92  tbz w5, #2, #+0x18 (addr 0xffff7abf8234)
0xffff7abf8220    96  sub csp, jssp, #0x8 (8)
0xffff7abf8224   100  str lr, [jssp, #-8]!
0xffff7abf8228   104  ldr x16, pc+32 (addr 0x0000ffff7abf8248)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf822c   108  blr x16
0xffff7abf8230   112  ldr lr, [jssp], #8
0xffff7abf8234   116  ret
0xffff7abf8238   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf823c   124  d63f03e0       constant
0xffff7abf8240   128  7ab170c0       constant
0xffff7abf8244   132  0000ffff       constant
0xffff7abf8248   136  7ab38080       constant
0xffff7abf824c   140  0000ffff       constant
0xffff7abf8250   144  movz x16, #0x0
0xffff7abf8254   148  sub csp, jssp, #0x10 (16)
0xffff7abf8258   152  stp fp, lr, [jssp, #-16]!
0xffff7abf825c   156  bl #+0x4 (addr 0xffff7abf8260)
0xffff7abf8260   160  movz x17, #0xa00000000
0xffff7abf8264   164  sub csp, jssp, #0x10 (16)
0xffff7abf8268   168  stp x17, cp, [jssp, #-16]!
0xffff7abf826c   172  add fp, jssp, #0x10 (16)
0xffff7abf8270   176  ldr x17, pc+24 (addr 0x0000ffff7abf8288)    ;; lazy deoptimization bailout 0
0xffff7abf8274   180  add x17, x17, x16
0xffff7abf8278   184  br x17
0xffff7abf827c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf8280   192  d63f03e0       constant
0xffff7abf8284   196  d503201f       constant
0xffff7abf8288   200  7a906000       constant
0xffff7abf828c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf81f0  code target (STUB)  (0xffff7ab170c0)
0xffff7abf8228  code target (STUB)  (0xffff7ab38080)
0xffff7abf8238  constant pool (size 24)
0xffff7abf8270  runtime entry
0xffff7abf827c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf81c0     0  tbz w0, #0, #+0x90 (addr 0xffff7abf8250)
0xffff7abf81c4     4  mov x2, x0
0xffff7abf81c8     8  stur x2, [x1, #175]
0xffff7abf81cc    12  add x3, x1, #0xaf (175)
0xffff7abf81d0    16  and x2, x2, #0xfffffffffff00000
0xffff7abf81d4    20  ldr x2, [x2, #8]
0xffff7abf81d8    24  tbz w2, #1, #+0x24 (addr 0xffff7abf81fc)
0xffff7abf81dc    28  and x2, x1, #0xfffffffffff00000
0xffff7abf81e0    32  ldr x2, [x2, #8]
0xffff7abf81e4    36  tbz w2, #2, #+0x18 (addr 0xffff7abf81fc)
0xffff7abf81e8    40  sub csp, jssp, #0x8 (8)
0xffff7abf81ec    44  str lr, [jssp, #-8]!
0xffff7abf81f0    48  ldr x16, pc+80 (addr 0x0000ffff7abf8240)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf81f4    52  blr x16
0xffff7abf81f8    56  ldr lr, [jssp], #8
0xffff7abf81fc    60  stur x5, [x1, #-1]
0xffff7abf8200    64  tbz w5, #0, #+0x34 (addr 0xffff7abf8234)
0xffff7abf8204    68  sub x2, x1, #0x1 (1)
0xffff7abf8208    72  and x5, x5, #0xfffffffffff00000
0xffff7abf820c    76  ldr x5, [x5, #8]
0xffff7abf8210    80  tbz w5, #1, #+0x24 (addr 0xffff7abf8234)
0xffff7abf8214    84  and x5, x1, #0xfffffffffff00000
0xffff7abf8218    88  ldr x5, [x5, #8]
0xffff7abf821c    92  tbz w5, #2, #+0x18 (addr 0xffff7abf8234)
0xffff7abf8220    96  sub csp, jssp, #0x8 (8)
0xffff7abf8224   100  str lr, [jssp, #-8]!
0xffff7abf8228   104  ldr x16, pc+32 (addr 0x0000ffff7abf8248)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf822c   108  blr x16
0xffff7abf8230   112  ldr lr, [jssp], #8
0xffff7abf8234   116  ret
0xffff7abf8238   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf823c   124  d63f03e0       constant
0xffff7abf8240   128  7ab170c0       constant
0xffff7abf8244   132  0000ffff       constant
0xffff7abf8248   136  7ab38080       constant
0xffff7abf824c   140  0000ffff       constant
0xffff7abf8250   144  movz x16, #0x0
0xffff7abf8254   148  sub csp, jssp, #0x10 (16)
0xffff7abf8258   152  stp fp, lr, [jssp, #-16]!
0xffff7abf825c   156  bl #+0x4 (addr 0xffff7abf8260)
0xffff7abf8260   160  movz x17, #0xa00000000
0xffff7abf8264   164  sub csp, jssp, #0x10 (16)
0xffff7abf8268   168  stp x17, cp, [jssp, #-16]!
0xffff7abf826c   172  add fp, jssp, #0x10 (16)
0xffff7abf8270   176  ldr x17, pc+24 (addr 0x0000ffff7abf8288)    ;; lazy deoptimization bailout 0
0xffff7abf8274   180  add x17, x17, x16
0xffff7abf8278   184  br x17
0xffff7abf827c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf8280   192  d63f03e0       constant
0xffff7abf8284   196  d503201f       constant
0xffff7abf8288   200  7a906000       constant
0xffff7abf828c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf81f0  code target (STUB)  (0xffff7ab170c0)
0xffff7abf8228  code target (STUB)  (0xffff7ab38080)
0xffff7abf8238  constant pool (size 24)
0xffff7abf8270  runtime entry
0xffff7abf827c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = prefinished
compiler = unknown
Instructions (size = 152)
0xffff7abf8300     0  sub csp, jssp, #0x8 (8)
0xffff7abf8304     4  str x3, [jssp, #-8]!
0xffff7abf8308     8  sub csp, jssp, #0x8 (8)
0xffff7abf830c    12  str x4, [jssp, #-8]!
0xffff7abf8310    16  ldr x3, pc+88 (addr 0x0000ffff7abf8368)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf8314    20  ldur x3, [x3, #7]
0xffff7abf8318    24  cmp x3, #0x0 (0)
0xffff7abf831c    28  b.ne #+0x30 (addr 0xffff7abf834c)
0xffff7abf8320    32  tbz w0, #0, #+0x2c (addr 0xffff7abf834c)
0xffff7abf8324    36  ldr x5, pc+76 (addr 0x0000ffff7abf8370)    ;; object: 0x5d4e9e81 WeakCell for 0x4ec407f1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf8328    40  ldur x5, [x5, #7]
0xffff7abf832c    44  tbz w5, #0, #+0x20 (addr 0xffff7abf834c)
0xffff7abf8330    48  ldursw x4, [x5, #15]
0xffff7abf8334    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf834c)
0xffff7abf8338    56  ldr x4, [jssp], #8
0xffff7abf833c    60  ldr x3, [jssp], #8
0xffff7abf8340    64  ldr x2, pc+56 (addr 0x0000ffff7abf8378)    ;; object: 0x5d422a39 <String[11]: prefinished>
0xffff7abf8344    68  ldr x16, pc+60 (addr 0x0000ffff7abf8380)    ;; code: HANDLER, StoreTransitionStub, minor: 198678
0xffff7abf8348    72  br x16
0xffff7abf834c    76  ldr x2, pc+60 (addr 0x0000ffff7abf8388)    ;; object: 0x5d422a39 <String[11]: prefinished>
0xffff7abf8350    80  ldr x4, [jssp], #8
0xffff7abf8354    84  ldr x3, [jssp], #8
0xffff7abf8358    88  ldr x16, pc+56 (addr 0x0000ffff7abf8390)    ;; code: BUILTIN
0xffff7abf835c    92  br x16
0xffff7abf8360    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf8364   100  d63f03e0       constant
0xffff7abf8368   104  5d4e9429       constant
0xffff7abf836c   108  00000000       constant
0xffff7abf8370   112  5d4e9e81       constant
0xffff7abf8374   116  00000000       constant
0xffff7abf8378   120  5d422a39       constant
0xffff7abf837c   124  00000000       constant
0xffff7abf8380   128  7abf81c0       constant
0xffff7abf8384   132  0000ffff       constant
0xffff7abf8388   136  5d422a39       constant
0xffff7abf838c   140  00000000       constant
0xffff7abf8390   144  7ab22420       constant
0xffff7abf8394   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf8310  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf8324  embedded object  (0x5d4e9e81 WeakCell for 0x4ec407f1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf8340  embedded object  (0x5d422a39 <String[11]: prefinished>)
0xffff7abf8344  code target (HANDLER)  (0xffff7abf81c0)
0xffff7abf834c  embedded object  (0x5d422a39 <String[11]: prefinished>)
0xffff7abf8358  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf8360  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf8400     0  tbz w0, #0, #+0x90 (addr 0xffff7abf8490)
0xffff7abf8404     4  mov x2, x0
0xffff7abf8408     8  stur x2, [x1, #183]
0xffff7abf840c    12  add x3, x1, #0xb7 (183)
0xffff7abf8410    16  and x2, x2, #0xfffffffffff00000
0xffff7abf8414    20  ldr x2, [x2, #8]
0xffff7abf8418    24  tbz w2, #1, #+0x24 (addr 0xffff7abf843c)
0xffff7abf841c    28  and x2, x1, #0xfffffffffff00000
0xffff7abf8420    32  ldr x2, [x2, #8]
0xffff7abf8424    36  tbz w2, #2, #+0x18 (addr 0xffff7abf843c)
0xffff7abf8428    40  sub csp, jssp, #0x8 (8)
0xffff7abf842c    44  str lr, [jssp, #-8]!
0xffff7abf8430    48  ldr x16, pc+80 (addr 0x0000ffff7abf8480)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf8434    52  blr x16
0xffff7abf8438    56  ldr lr, [jssp], #8
0xffff7abf843c    60  stur x5, [x1, #-1]
0xffff7abf8440    64  tbz w5, #0, #+0x34 (addr 0xffff7abf8474)
0xffff7abf8444    68  sub x2, x1, #0x1 (1)
0xffff7abf8448    72  and x5, x5, #0xfffffffffff00000
0xffff7abf844c    76  ldr x5, [x5, #8]
0xffff7abf8450    80  tbz w5, #1, #+0x24 (addr 0xffff7abf8474)
0xffff7abf8454    84  and x5, x1, #0xfffffffffff00000
0xffff7abf8458    88  ldr x5, [x5, #8]
0xffff7abf845c    92  tbz w5, #2, #+0x18 (addr 0xffff7abf8474)
0xffff7abf8460    96  sub csp, jssp, #0x8 (8)
0xffff7abf8464   100  str lr, [jssp, #-8]!
0xffff7abf8468   104  ldr x16, pc+32 (addr 0x0000ffff7abf8488)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf846c   108  blr x16
0xffff7abf8470   112  ldr lr, [jssp], #8
0xffff7abf8474   116  ret
0xffff7abf8478   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf847c   124  d63f03e0       constant
0xffff7abf8480   128  7ab170c0       constant
0xffff7abf8484   132  0000ffff       constant
0xffff7abf8488   136  7ab38080       constant
0xffff7abf848c   140  0000ffff       constant
0xffff7abf8490   144  movz x16, #0x0
0xffff7abf8494   148  sub csp, jssp, #0x10 (16)
0xffff7abf8498   152  stp fp, lr, [jssp, #-16]!
0xffff7abf849c   156  bl #+0x4 (addr 0xffff7abf84a0)
0xffff7abf84a0   160  movz x17, #0xa00000000
0xffff7abf84a4   164  sub csp, jssp, #0x10 (16)
0xffff7abf84a8   168  stp x17, cp, [jssp, #-16]!
0xffff7abf84ac   172  add fp, jssp, #0x10 (16)
0xffff7abf84b0   176  ldr x17, pc+24 (addr 0x0000ffff7abf84c8)    ;; lazy deoptimization bailout 0
0xffff7abf84b4   180  add x17, x17, x16
0xffff7abf84b8   184  br x17
0xffff7abf84bc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf84c0   192  d63f03e0       constant
0xffff7abf84c4   196  d503201f       constant
0xffff7abf84c8   200  7a906000       constant
0xffff7abf84cc   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf8430  code target (STUB)  (0xffff7ab170c0)
0xffff7abf8468  code target (STUB)  (0xffff7ab38080)
0xffff7abf8478  constant pool (size 24)
0xffff7abf84b0  runtime entry
0xffff7abf84bc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf8400     0  tbz w0, #0, #+0x90 (addr 0xffff7abf8490)
0xffff7abf8404     4  mov x2, x0
0xffff7abf8408     8  stur x2, [x1, #183]
0xffff7abf840c    12  add x3, x1, #0xb7 (183)
0xffff7abf8410    16  and x2, x2, #0xfffffffffff00000
0xffff7abf8414    20  ldr x2, [x2, #8]
0xffff7abf8418    24  tbz w2, #1, #+0x24 (addr 0xffff7abf843c)
0xffff7abf841c    28  and x2, x1, #0xfffffffffff00000
0xffff7abf8420    32  ldr x2, [x2, #8]
0xffff7abf8424    36  tbz w2, #2, #+0x18 (addr 0xffff7abf843c)
0xffff7abf8428    40  sub csp, jssp, #0x8 (8)
0xffff7abf842c    44  str lr, [jssp, #-8]!
0xffff7abf8430    48  ldr x16, pc+80 (addr 0x0000ffff7abf8480)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf8434    52  blr x16
0xffff7abf8438    56  ldr lr, [jssp], #8
0xffff7abf843c    60  stur x5, [x1, #-1]
0xffff7abf8440    64  tbz w5, #0, #+0x34 (addr 0xffff7abf8474)
0xffff7abf8444    68  sub x2, x1, #0x1 (1)
0xffff7abf8448    72  and x5, x5, #0xfffffffffff00000
0xffff7abf844c    76  ldr x5, [x5, #8]
0xffff7abf8450    80  tbz w5, #1, #+0x24 (addr 0xffff7abf8474)
0xffff7abf8454    84  and x5, x1, #0xfffffffffff00000
0xffff7abf8458    88  ldr x5, [x5, #8]
0xffff7abf845c    92  tbz w5, #2, #+0x18 (addr 0xffff7abf8474)
0xffff7abf8460    96  sub csp, jssp, #0x8 (8)
0xffff7abf8464   100  str lr, [jssp, #-8]!
0xffff7abf8468   104  ldr x16, pc+32 (addr 0x0000ffff7abf8488)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf846c   108  blr x16
0xffff7abf8470   112  ldr lr, [jssp], #8
0xffff7abf8474   116  ret
0xffff7abf8478   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf847c   124  d63f03e0       constant
0xffff7abf8480   128  7ab170c0       constant
0xffff7abf8484   132  0000ffff       constant
0xffff7abf8488   136  7ab38080       constant
0xffff7abf848c   140  0000ffff       constant
0xffff7abf8490   144  movz x16, #0x0
0xffff7abf8494   148  sub csp, jssp, #0x10 (16)
0xffff7abf8498   152  stp fp, lr, [jssp, #-16]!
0xffff7abf849c   156  bl #+0x4 (addr 0xffff7abf84a0)
0xffff7abf84a0   160  movz x17, #0xa00000000
0xffff7abf84a4   164  sub csp, jssp, #0x10 (16)
0xffff7abf84a8   168  stp x17, cp, [jssp, #-16]!
0xffff7abf84ac   172  add fp, jssp, #0x10 (16)
0xffff7abf84b0   176  ldr x17, pc+24 (addr 0x0000ffff7abf84c8)    ;; lazy deoptimization bailout 0
0xffff7abf84b4   180  add x17, x17, x16
0xffff7abf84b8   184  br x17
0xffff7abf84bc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf84c0   192  d63f03e0       constant
0xffff7abf84c4   196  d503201f       constant
0xffff7abf84c8   200  7a906000       constant
0xffff7abf84cc   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf8430  code target (STUB)  (0xffff7ab170c0)
0xffff7abf8468  code target (STUB)  (0xffff7ab38080)
0xffff7abf8478  constant pool (size 24)
0xffff7abf84b0  runtime entry
0xffff7abf84bc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = errorEmitted
compiler = unknown
Instructions (size = 152)
0xffff7abf8540     0  sub csp, jssp, #0x8 (8)
0xffff7abf8544     4  str x3, [jssp, #-8]!
0xffff7abf8548     8  sub csp, jssp, #0x8 (8)
0xffff7abf854c    12  str x4, [jssp, #-8]!
0xffff7abf8550    16  ldr x3, pc+88 (addr 0x0000ffff7abf85a8)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf8554    20  ldur x3, [x3, #7]
0xffff7abf8558    24  cmp x3, #0x0 (0)
0xffff7abf855c    28  b.ne #+0x30 (addr 0xffff7abf858c)
0xffff7abf8560    32  tbz w0, #0, #+0x2c (addr 0xffff7abf858c)
0xffff7abf8564    36  ldr x5, pc+76 (addr 0x0000ffff7abf85b0)    ;; object: 0x5d4e9f71 WeakCell for 0x4ec40849 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf8568    40  ldur x5, [x5, #7]
0xffff7abf856c    44  tbz w5, #0, #+0x20 (addr 0xffff7abf858c)
0xffff7abf8570    48  ldursw x4, [x5, #15]
0xffff7abf8574    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf858c)
0xffff7abf8578    56  ldr x4, [jssp], #8
0xffff7abf857c    60  ldr x3, [jssp], #8
0xffff7abf8580    64  ldr x2, pc+56 (addr 0x0000ffff7abf85b8)    ;; object: 0x5d422a61 <String[12]: errorEmitted>
0xffff7abf8584    68  ldr x16, pc+60 (addr 0x0000ffff7abf85c0)    ;; code: HANDLER, StoreTransitionStub, minor: 198679
0xffff7abf8588    72  br x16
0xffff7abf858c    76  ldr x2, pc+60 (addr 0x0000ffff7abf85c8)    ;; object: 0x5d422a61 <String[12]: errorEmitted>
0xffff7abf8590    80  ldr x4, [jssp], #8
0xffff7abf8594    84  ldr x3, [jssp], #8
0xffff7abf8598    88  ldr x16, pc+56 (addr 0x0000ffff7abf85d0)    ;; code: BUILTIN
0xffff7abf859c    92  br x16
0xffff7abf85a0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf85a4   100  d63f03e0       constant
0xffff7abf85a8   104  5d4e9429       constant
0xffff7abf85ac   108  00000000       constant
0xffff7abf85b0   112  5d4e9f71       constant
0xffff7abf85b4   116  00000000       constant
0xffff7abf85b8   120  5d422a61       constant
0xffff7abf85bc   124  00000000       constant
0xffff7abf85c0   128  7abf8400       constant
0xffff7abf85c4   132  0000ffff       constant
0xffff7abf85c8   136  5d422a61       constant
0xffff7abf85cc   140  00000000       constant
0xffff7abf85d0   144  7ab22420       constant
0xffff7abf85d4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf8550  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf8564  embedded object  (0x5d4e9f71 WeakCell for 0x4ec40849 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf8580  embedded object  (0x5d422a61 <String[12]: errorEmitted>)
0xffff7abf8584  code target (HANDLER)  (0xffff7abf8400)
0xffff7abf858c  embedded object  (0x5d422a61 <String[12]: errorEmitted>)
0xffff7abf8598  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf85a0  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0xffff7abf8640     0  mov x6, x0
0xffff7abf8644     4  tbnz w6, #0, #+0x54 (addr 0xffff7abf8698)
0xffff7abf8648     8  stur x6, [x1, #191]
0xffff7abf864c    12  stur x5, [x1, #-1]
0xffff7abf8650    16  tbz w5, #0, #+0x34 (addr 0xffff7abf8684)
0xffff7abf8654    20  sub x2, x1, #0x1 (1)
0xffff7abf8658    24  and x5, x5, #0xfffffffffff00000
0xffff7abf865c    28  ldr x5, [x5, #8]
0xffff7abf8660    32  tbz w5, #1, #+0x24 (addr 0xffff7abf8684)
0xffff7abf8664    36  and x5, x1, #0xfffffffffff00000
0xffff7abf8668    40  ldr x5, [x5, #8]
0xffff7abf866c    44  tbz w5, #2, #+0x18 (addr 0xffff7abf8684)
0xffff7abf8670    48  sub csp, jssp, #0x8 (8)
0xffff7abf8674    52  str lr, [jssp, #-8]!
0xffff7abf8678    56  ldr x16, pc+24 (addr 0x0000ffff7abf8690)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf867c    60  blr x16
0xffff7abf8680    64  ldr lr, [jssp], #8
0xffff7abf8684    68  ret
0xffff7abf8688    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf868c    76  d63f03e0       constant
0xffff7abf8690    80  7ab38080       constant
0xffff7abf8694    84  0000ffff       constant
0xffff7abf8698    88  movz x16, #0x0
0xffff7abf869c    92  sub csp, jssp, #0x10 (16)
0xffff7abf86a0    96  stp fp, lr, [jssp, #-16]!
0xffff7abf86a4   100  bl #+0x4 (addr 0xffff7abf86a8)
0xffff7abf86a8   104  movz x17, #0xa00000000
0xffff7abf86ac   108  sub csp, jssp, #0x10 (16)
0xffff7abf86b0   112  stp x17, cp, [jssp, #-16]!
0xffff7abf86b4   116  add fp, jssp, #0x10 (16)
0xffff7abf86b8   120  ldr x17, pc+24 (addr 0x0000ffff7abf86d0)    ;; lazy deoptimization bailout 0
0xffff7abf86bc   124  add x17, x17, x16
0xffff7abf86c0   128  br x17
0xffff7abf86c4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf86c8   136  d63f03e0       constant
0xffff7abf86cc   140  d503201f       constant
0xffff7abf86d0   144  7a906000       constant
0xffff7abf86d4   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf8678  code target (STUB)  (0xffff7ab38080)
0xffff7abf8688  constant pool (size 16)
0xffff7abf86b8  runtime entry
0xffff7abf86c4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0xffff7abf8640     0  mov x6, x0
0xffff7abf8644     4  tbnz w6, #0, #+0x54 (addr 0xffff7abf8698)
0xffff7abf8648     8  stur x6, [x1, #191]
0xffff7abf864c    12  stur x5, [x1, #-1]
0xffff7abf8650    16  tbz w5, #0, #+0x34 (addr 0xffff7abf8684)
0xffff7abf8654    20  sub x2, x1, #0x1 (1)
0xffff7abf8658    24  and x5, x5, #0xfffffffffff00000
0xffff7abf865c    28  ldr x5, [x5, #8]
0xffff7abf8660    32  tbz w5, #1, #+0x24 (addr 0xffff7abf8684)
0xffff7abf8664    36  and x5, x1, #0xfffffffffff00000
0xffff7abf8668    40  ldr x5, [x5, #8]
0xffff7abf866c    44  tbz w5, #2, #+0x18 (addr 0xffff7abf8684)
0xffff7abf8670    48  sub csp, jssp, #0x8 (8)
0xffff7abf8674    52  str lr, [jssp, #-8]!
0xffff7abf8678    56  ldr x16, pc+24 (addr 0x0000ffff7abf8690)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf867c    60  blr x16
0xffff7abf8680    64  ldr lr, [jssp], #8
0xffff7abf8684    68  ret
0xffff7abf8688    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf868c    76  d63f03e0       constant
0xffff7abf8690    80  7ab38080       constant
0xffff7abf8694    84  0000ffff       constant
0xffff7abf8698    88  movz x16, #0x0
0xffff7abf869c    92  sub csp, jssp, #0x10 (16)
0xffff7abf86a0    96  stp fp, lr, [jssp, #-16]!
0xffff7abf86a4   100  bl #+0x4 (addr 0xffff7abf86a8)
0xffff7abf86a8   104  movz x17, #0xa00000000
0xffff7abf86ac   108  sub csp, jssp, #0x10 (16)
0xffff7abf86b0   112  stp x17, cp, [jssp, #-16]!
0xffff7abf86b4   116  add fp, jssp, #0x10 (16)
0xffff7abf86b8   120  ldr x17, pc+24 (addr 0x0000ffff7abf86d0)    ;; lazy deoptimization bailout 0
0xffff7abf86bc   124  add x17, x17, x16
0xffff7abf86c0   128  br x17
0xffff7abf86c4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf86c8   136  d63f03e0       constant
0xffff7abf86cc   140  d503201f       constant
0xffff7abf86d0   144  7a906000       constant
0xffff7abf86d4   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf8678  code target (STUB)  (0xffff7ab38080)
0xffff7abf8688  constant pool (size 16)
0xffff7abf86b8  runtime entry
0xffff7abf86c4  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = bufferedRequestCount
compiler = unknown
Instructions (size = 152)
0xffff7abf8740     0  sub csp, jssp, #0x8 (8)
0xffff7abf8744     4  str x3, [jssp, #-8]!
0xffff7abf8748     8  sub csp, jssp, #0x8 (8)
0xffff7abf874c    12  str x4, [jssp, #-8]!
0xffff7abf8750    16  ldr x3, pc+88 (addr 0x0000ffff7abf87a8)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf8754    20  ldur x3, [x3, #7]
0xffff7abf8758    24  cmp x3, #0x0 (0)
0xffff7abf875c    28  b.ne #+0x2c (addr 0xffff7abf8788)
0xffff7abf8760    32  ldr x5, pc+80 (addr 0x0000ffff7abf87b0)    ;; object: 0x5d4ea061 WeakCell for 0x4ec408a1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf8764    36  ldur x5, [x5, #7]
0xffff7abf8768    40  tbz w5, #0, #+0x20 (addr 0xffff7abf8788)
0xffff7abf876c    44  ldursw x4, [x5, #15]
0xffff7abf8770    48  tbnz w4, #23, #+0x18 (addr 0xffff7abf8788)
0xffff7abf8774    52  ldr x4, [jssp], #8
0xffff7abf8778    56  ldr x3, [jssp], #8
0xffff7abf877c    60  ldr x2, pc+60 (addr 0x0000ffff7abf87b8)    ;; object: 0x5d422a89 <String[20]: bufferedRequestCount>
0xffff7abf8780    64  ldr x16, pc+64 (addr 0x0000ffff7abf87c0)    ;; code: HANDLER, StoreTransitionStub, minor: 174104
0xffff7abf8784    68  br x16
0xffff7abf8788    72  ldr x2, pc+64 (addr 0x0000ffff7abf87c8)    ;; object: 0x5d422a89 <String[20]: bufferedRequestCount>
0xffff7abf878c    76  ldr x4, [jssp], #8
0xffff7abf8790    80  ldr x3, [jssp], #8
0xffff7abf8794    84  ldr x16, pc+60 (addr 0x0000ffff7abf87d0)    ;; code: BUILTIN
0xffff7abf8798    88  br x16
0xffff7abf879c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abf87a0    96  d63f03e0       constant
0xffff7abf87a4   100  d503201f       constant
0xffff7abf87a8   104  5d4e9429       constant
0xffff7abf87ac   108  00000000       constant
0xffff7abf87b0   112  5d4ea061       constant
0xffff7abf87b4   116  00000000       constant
0xffff7abf87b8   120  5d422a89       constant
0xffff7abf87bc   124  00000000       constant
0xffff7abf87c0   128  7abf8640       constant
0xffff7abf87c4   132  0000ffff       constant
0xffff7abf87c8   136  5d422a89       constant
0xffff7abf87cc   140  00000000       constant
0xffff7abf87d0   144  7ab22420       constant
0xffff7abf87d4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf8750  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf8760  embedded object  (0x5d4ea061 WeakCell for 0x4ec408a1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf877c  embedded object  (0x5d422a89 <String[20]: bufferedRequestCount>)
0xffff7abf8780  code target (HANDLER)  (0xffff7abf8640)
0xffff7abf8788  embedded object  (0x5d422a89 <String[20]: bufferedRequestCount>)
0xffff7abf8794  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf879c  constant pool (size 60)

kind = HANDLER
major_key = <NoCache>Stub
name = next
compiler = unknown
Instructions (size = 152)
0xffff7abf8840     0  sub csp, jssp, #0x8 (8)
0xffff7abf8844     4  str x3, [jssp, #-8]!
0xffff7abf8848     8  sub csp, jssp, #0x8 (8)
0xffff7abf884c    12  str x4, [jssp, #-8]!
0xffff7abf8850    16  ldr x3, pc+88 (addr 0x0000ffff7abf88a8)    ;; object: 0x5d4ea191 Cell for 0
0xffff7abf8854    20  ldur x3, [x3, #7]
0xffff7abf8858    24  cmp x3, #0x0 (0)
0xffff7abf885c    28  b.ne #+0x30 (addr 0xffff7abf888c)
0xffff7abf8860    32  tbz w0, #0, #+0x2c (addr 0xffff7abf888c)
0xffff7abf8864    36  ldr x5, pc+76 (addr 0x0000ffff7abf88b0)    ;; object: 0x5d4d19f9 WeakCell for 0x4ec38869 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf8868    40  ldur x5, [x5, #7]
0xffff7abf886c    44  tbz w5, #0, #+0x20 (addr 0xffff7abf888c)
0xffff7abf8870    48  ldursw x4, [x5, #15]
0xffff7abf8874    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf888c)
0xffff7abf8878    56  ldr x4, [jssp], #8
0xffff7abf887c    60  ldr x3, [jssp], #8
0xffff7abf8880    64  ldr x2, pc+56 (addr 0x0000ffff7abf88b8)    ;; object: 0x20d05209 <String[4]: next>
0xffff7abf8884    68  ldr x16, pc+60 (addr 0x0000ffff7abf88c0)    ;; code: HANDLER, StoreTransitionStub, minor: 198659
0xffff7abf8888    72  br x16
0xffff7abf888c    76  ldr x2, pc+60 (addr 0x0000ffff7abf88c8)    ;; object: 0x20d05209 <String[4]: next>
0xffff7abf8890    80  ldr x4, [jssp], #8
0xffff7abf8894    84  ldr x3, [jssp], #8
0xffff7abf8898    88  ldr x16, pc+56 (addr 0x0000ffff7abf88d0)    ;; code: BUILTIN
0xffff7abf889c    92  br x16
0xffff7abf88a0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf88a4   100  d63f03e0       constant
0xffff7abf88a8   104  5d4ea191       constant
0xffff7abf88ac   108  00000000       constant
0xffff7abf88b0   112  5d4d19f9       constant
0xffff7abf88b4   116  00000000       constant
0xffff7abf88b8   120  20d05209       constant
0xffff7abf88bc   124  00000000       constant
0xffff7abf88c0   128  7ab8b940       constant
0xffff7abf88c4   132  0000ffff       constant
0xffff7abf88c8   136  20d05209       constant
0xffff7abf88cc   140  00000000       constant
0xffff7abf88d0   144  7ab22420       constant
0xffff7abf88d4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf8850  embedded object  (0x5d4ea191 Cell for 0)
0xffff7abf8864  embedded object  (0x5d4d19f9 WeakCell for 0x4ec38869 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf8880  embedded object  (0x20d05209 <String[4]: next>)
0xffff7abf8884  code target (HANDLER)  (0xffff7ab8b940)
0xffff7abf888c  embedded object  (0x20d05209 <String[4]: next>)
0xffff7abf8898  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf88a0  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = entry
compiler = unknown
Instructions (size = 152)
0xffff7abf8940     0  sub csp, jssp, #0x8 (8)
0xffff7abf8944     4  str x3, [jssp, #-8]!
0xffff7abf8948     8  sub csp, jssp, #0x8 (8)
0xffff7abf894c    12  str x4, [jssp, #-8]!
0xffff7abf8950    16  ldr x3, pc+88 (addr 0x0000ffff7abf89a8)    ;; object: 0x5d4ea191 Cell for 0
0xffff7abf8954    20  ldur x3, [x3, #7]
0xffff7abf8958    24  cmp x3, #0x0 (0)
0xffff7abf895c    28  b.ne #+0x30 (addr 0xffff7abf898c)
0xffff7abf8960    32  tbz w0, #0, #+0x2c (addr 0xffff7abf898c)
0xffff7abf8964    36  ldr x5, pc+76 (addr 0x0000ffff7abf89b0)    ;; object: 0x5d4d1a11 WeakCell for 0x4ec388c1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf8968    40  ldur x5, [x5, #7]
0xffff7abf896c    44  tbz w5, #0, #+0x20 (addr 0xffff7abf898c)
0xffff7abf8970    48  ldursw x4, [x5, #15]
0xffff7abf8974    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf898c)
0xffff7abf8978    56  ldr x4, [jssp], #8
0xffff7abf897c    60  ldr x3, [jssp], #8
0xffff7abf8980    64  ldr x2, pc+56 (addr 0x0000ffff7abf89b8)    ;; object: 0x5d420e89 <String[5]: entry>
0xffff7abf8984    68  ldr x16, pc+60 (addr 0x0000ffff7abf89c0)    ;; code: HANDLER, StoreTransitionStub, minor: 198660
0xffff7abf8988    72  br x16
0xffff7abf898c    76  ldr x2, pc+60 (addr 0x0000ffff7abf89c8)    ;; object: 0x5d420e89 <String[5]: entry>
0xffff7abf8990    80  ldr x4, [jssp], #8
0xffff7abf8994    84  ldr x3, [jssp], #8
0xffff7abf8998    88  ldr x16, pc+56 (addr 0x0000ffff7abf89d0)    ;; code: BUILTIN
0xffff7abf899c    92  br x16
0xffff7abf89a0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf89a4   100  d63f03e0       constant
0xffff7abf89a8   104  5d4ea191       constant
0xffff7abf89ac   108  00000000       constant
0xffff7abf89b0   112  5d4d1a11       constant
0xffff7abf89b4   116  00000000       constant
0xffff7abf89b8   120  5d420e89       constant
0xffff7abf89bc   124  00000000       constant
0xffff7abf89c0   128  7ab8bb80       constant
0xffff7abf89c4   132  0000ffff       constant
0xffff7abf89c8   136  5d420e89       constant
0xffff7abf89cc   140  00000000       constant
0xffff7abf89d0   144  7ab22420       constant
0xffff7abf89d4   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf8950  embedded object  (0x5d4ea191 Cell for 0)
0xffff7abf8964  embedded object  (0x5d4d1a11 WeakCell for 0x4ec388c1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf8980  embedded object  (0x5d420e89 <String[5]: entry>)
0xffff7abf8984  code target (HANDLER)  (0xffff7ab8bb80)
0xffff7abf898c  embedded object  (0x5d420e89 <String[5]: entry>)
0xffff7abf8998  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf89a0  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = finish
compiler = unknown
Instructions (size = 184)
0xffff7abf8a40     0  sub csp, jssp, #0x8 (8)
0xffff7abf8a44     4  str x3, [jssp, #-8]!
0xffff7abf8a48     8  sub csp, jssp, #0x8 (8)
0xffff7abf8a4c    12  str x4, [jssp, #-8]!
0xffff7abf8a50    16  ldr x3, pc+112 (addr 0x0000ffff7abf8ac0)    ;; object: 0x5d4ea191 Cell for 0
0xffff7abf8a54    20  ldur x3, [x3, #7]
0xffff7abf8a58    24  cmp x3, #0x0 (0)
0xffff7abf8a5c    28  b.ne #+0x44 (addr 0xffff7abf8aa0)
0xffff7abf8a60    32  tbz w0, #0, #+0x40 (addr 0xffff7abf8aa0)
0xffff7abf8a64    36  ldur x3, [x0, #-1]
0xffff7abf8a68    40  ldr x4, pc+96 (addr 0x0000ffff7abf8ac8)    ;; object: 0x20dc71e1 WeakCell for 0x4ec06989 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf8a6c    44  ldur x4, [x4, #7]
0xffff7abf8a70    48  cmp x3, x4
0xffff7abf8a74    52  b.ne #+0x2c (addr 0xffff7abf8aa0)
0xffff7abf8a78    56  ldr x5, pc+88 (addr 0x0000ffff7abf8ad0)    ;; object: 0x5d4ea241 WeakCell for 0x4ec408f9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf8a7c    60  ldur x5, [x5, #7]
0xffff7abf8a80    64  tbz w5, #0, #+0x20 (addr 0xffff7abf8aa0)
0xffff7abf8a84    68  ldursw x4, [x5, #15]
0xffff7abf8a88    72  tbnz w4, #23, #+0x18 (addr 0xffff7abf8aa0)
0xffff7abf8a8c    76  ldr x4, [jssp], #8
0xffff7abf8a90    80  ldr x3, [jssp], #8
0xffff7abf8a94    84  ldr x2, pc+68 (addr 0x0000ffff7abf8ad8)    ;; object: 0x5d40f0e9 <String[6]: finish>
0xffff7abf8a98    88  ldr x16, pc+72 (addr 0x0000ffff7abf8ae0)    ;; code: HANDLER, StoreTransitionStub, minor: 198661
0xffff7abf8a9c    92  br x16
0xffff7abf8aa0    96  ldr x2, pc+72 (addr 0x0000ffff7abf8ae8)    ;; object: 0x5d40f0e9 <String[6]: finish>
0xffff7abf8aa4   100  ldr x4, [jssp], #8
0xffff7abf8aa8   104  ldr x3, [jssp], #8
0xffff7abf8aac   108  ldr x16, pc+68 (addr 0x0000ffff7abf8af0)    ;; code: BUILTIN
0xffff7abf8ab0   112  br x16
0xffff7abf8ab4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abf8ab8   120  d63f03e0       constant
0xffff7abf8abc   124  d503201f       constant
0xffff7abf8ac0   128  5d4ea191       constant
0xffff7abf8ac4   132  00000000       constant
0xffff7abf8ac8   136  20dc71e1       constant
0xffff7abf8acc   140  00000000       constant
0xffff7abf8ad0   144  5d4ea241       constant
0xffff7abf8ad4   148  00000000       constant
0xffff7abf8ad8   152  5d40f0e9       constant
0xffff7abf8adc   156  00000000       constant
0xffff7abf8ae0   160  7ab8bdc0       constant
0xffff7abf8ae4   164  0000ffff       constant
0xffff7abf8ae8   168  5d40f0e9       constant
0xffff7abf8aec   172  00000000       constant
0xffff7abf8af0   176  7ab22420       constant
0xffff7abf8af4   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abf8a50  embedded object  (0x5d4ea191 Cell for 0)
0xffff7abf8a68  embedded object  (0x20dc71e1 WeakCell for 0x4ec06989 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf8a78  embedded object  (0x5d4ea241 WeakCell for 0x4ec408f9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf8a94  embedded object  (0x5d40f0e9 <String[6]: finish>)
0xffff7abf8a98  code target (HANDLER)  (0xffff7ab8bdc0)
0xffff7abf8aa0  embedded object  (0x5d40f0e9 <String[6]: finish>)
0xffff7abf8aac  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf8ab4  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf8b60     0  tbz w0, #0, #+0x90 (addr 0xffff7abf8bf0)
0xffff7abf8b64     4  mov x2, x0
0xffff7abf8b68     8  stur x2, [x1, #199]
0xffff7abf8b6c    12  add x3, x1, #0xc7 (199)
0xffff7abf8b70    16  and x2, x2, #0xfffffffffff00000
0xffff7abf8b74    20  ldr x2, [x2, #8]
0xffff7abf8b78    24  tbz w2, #1, #+0x24 (addr 0xffff7abf8b9c)
0xffff7abf8b7c    28  and x2, x1, #0xfffffffffff00000
0xffff7abf8b80    32  ldr x2, [x2, #8]
0xffff7abf8b84    36  tbz w2, #2, #+0x18 (addr 0xffff7abf8b9c)
0xffff7abf8b88    40  sub csp, jssp, #0x8 (8)
0xffff7abf8b8c    44  str lr, [jssp, #-8]!
0xffff7abf8b90    48  ldr x16, pc+80 (addr 0x0000ffff7abf8be0)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf8b94    52  blr x16
0xffff7abf8b98    56  ldr lr, [jssp], #8
0xffff7abf8b9c    60  stur x5, [x1, #-1]
0xffff7abf8ba0    64  tbz w5, #0, #+0x34 (addr 0xffff7abf8bd4)
0xffff7abf8ba4    68  sub x2, x1, #0x1 (1)
0xffff7abf8ba8    72  and x5, x5, #0xfffffffffff00000
0xffff7abf8bac    76  ldr x5, [x5, #8]
0xffff7abf8bb0    80  tbz w5, #1, #+0x24 (addr 0xffff7abf8bd4)
0xffff7abf8bb4    84  and x5, x1, #0xfffffffffff00000
0xffff7abf8bb8    88  ldr x5, [x5, #8]
0xffff7abf8bbc    92  tbz w5, #2, #+0x18 (addr 0xffff7abf8bd4)
0xffff7abf8bc0    96  sub csp, jssp, #0x8 (8)
0xffff7abf8bc4   100  str lr, [jssp, #-8]!
0xffff7abf8bc8   104  ldr x16, pc+32 (addr 0x0000ffff7abf8be8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf8bcc   108  blr x16
0xffff7abf8bd0   112  ldr lr, [jssp], #8
0xffff7abf8bd4   116  ret
0xffff7abf8bd8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf8bdc   124  d63f03e0       constant
0xffff7abf8be0   128  7ab170c0       constant
0xffff7abf8be4   132  0000ffff       constant
0xffff7abf8be8   136  7ab38080       constant
0xffff7abf8bec   140  0000ffff       constant
0xffff7abf8bf0   144  movz x16, #0x0
0xffff7abf8bf4   148  sub csp, jssp, #0x10 (16)
0xffff7abf8bf8   152  stp fp, lr, [jssp, #-16]!
0xffff7abf8bfc   156  bl #+0x4 (addr 0xffff7abf8c00)
0xffff7abf8c00   160  movz x17, #0xa00000000
0xffff7abf8c04   164  sub csp, jssp, #0x10 (16)
0xffff7abf8c08   168  stp x17, cp, [jssp, #-16]!
0xffff7abf8c0c   172  add fp, jssp, #0x10 (16)
0xffff7abf8c10   176  ldr x17, pc+24 (addr 0x0000ffff7abf8c28)    ;; lazy deoptimization bailout 0
0xffff7abf8c14   180  add x17, x17, x16
0xffff7abf8c18   184  br x17
0xffff7abf8c1c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf8c20   192  d63f03e0       constant
0xffff7abf8c24   196  d503201f       constant
0xffff7abf8c28   200  7a906000       constant
0xffff7abf8c2c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf8b90  code target (STUB)  (0xffff7ab170c0)
0xffff7abf8bc8  code target (STUB)  (0xffff7ab38080)
0xffff7abf8bd8  constant pool (size 24)
0xffff7abf8c10  runtime entry
0xffff7abf8c1c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0xffff7abf8b60     0  tbz w0, #0, #+0x90 (addr 0xffff7abf8bf0)
0xffff7abf8b64     4  mov x2, x0
0xffff7abf8b68     8  stur x2, [x1, #199]
0xffff7abf8b6c    12  add x3, x1, #0xc7 (199)
0xffff7abf8b70    16  and x2, x2, #0xfffffffffff00000
0xffff7abf8b74    20  ldr x2, [x2, #8]
0xffff7abf8b78    24  tbz w2, #1, #+0x24 (addr 0xffff7abf8b9c)
0xffff7abf8b7c    28  and x2, x1, #0xfffffffffff00000
0xffff7abf8b80    32  ldr x2, [x2, #8]
0xffff7abf8b84    36  tbz w2, #2, #+0x18 (addr 0xffff7abf8b9c)
0xffff7abf8b88    40  sub csp, jssp, #0x8 (8)
0xffff7abf8b8c    44  str lr, [jssp, #-8]!
0xffff7abf8b90    48  ldr x16, pc+80 (addr 0x0000ffff7abf8be0)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf8b94    52  blr x16
0xffff7abf8b98    56  ldr lr, [jssp], #8
0xffff7abf8b9c    60  stur x5, [x1, #-1]
0xffff7abf8ba0    64  tbz w5, #0, #+0x34 (addr 0xffff7abf8bd4)
0xffff7abf8ba4    68  sub x2, x1, #0x1 (1)
0xffff7abf8ba8    72  and x5, x5, #0xfffffffffff00000
0xffff7abf8bac    76  ldr x5, [x5, #8]
0xffff7abf8bb0    80  tbz w5, #1, #+0x24 (addr 0xffff7abf8bd4)
0xffff7abf8bb4    84  and x5, x1, #0xfffffffffff00000
0xffff7abf8bb8    88  ldr x5, [x5, #8]
0xffff7abf8bbc    92  tbz w5, #2, #+0x18 (addr 0xffff7abf8bd4)
0xffff7abf8bc0    96  sub csp, jssp, #0x8 (8)
0xffff7abf8bc4   100  str lr, [jssp, #-8]!
0xffff7abf8bc8   104  ldr x16, pc+32 (addr 0x0000ffff7abf8be8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abf8bcc   108  blr x16
0xffff7abf8bd0   112  ldr lr, [jssp], #8
0xffff7abf8bd4   116  ret
0xffff7abf8bd8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0xffff7abf8bdc   124  d63f03e0       constant
0xffff7abf8be0   128  7ab170c0       constant
0xffff7abf8be4   132  0000ffff       constant
0xffff7abf8be8   136  7ab38080       constant
0xffff7abf8bec   140  0000ffff       constant
0xffff7abf8bf0   144  movz x16, #0x0
0xffff7abf8bf4   148  sub csp, jssp, #0x10 (16)
0xffff7abf8bf8   152  stp fp, lr, [jssp, #-16]!
0xffff7abf8bfc   156  bl #+0x4 (addr 0xffff7abf8c00)
0xffff7abf8c00   160  movz x17, #0xa00000000
0xffff7abf8c04   164  sub csp, jssp, #0x10 (16)
0xffff7abf8c08   168  stp x17, cp, [jssp, #-16]!
0xffff7abf8c0c   172  add fp, jssp, #0x10 (16)
0xffff7abf8c10   176  ldr x17, pc+24 (addr 0x0000ffff7abf8c28)    ;; lazy deoptimization bailout 0
0xffff7abf8c14   180  add x17, x17, x16
0xffff7abf8c18   184  br x17
0xffff7abf8c1c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf8c20   192  d63f03e0       constant
0xffff7abf8c24   196  d503201f       constant
0xffff7abf8c28   200  7a906000       constant
0xffff7abf8c2c   204  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abf8b90  code target (STUB)  (0xffff7ab170c0)
0xffff7abf8bc8  code target (STUB)  (0xffff7ab38080)
0xffff7abf8bd8  constant pool (size 24)
0xffff7abf8c10  runtime entry
0xffff7abf8c1c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = corkedRequestsFree
compiler = unknown
Instructions (size = 184)
0xffff7abf8ca0     0  sub csp, jssp, #0x8 (8)
0xffff7abf8ca4     4  str x3, [jssp, #-8]!
0xffff7abf8ca8     8  sub csp, jssp, #0x8 (8)
0xffff7abf8cac    12  str x4, [jssp, #-8]!
0xffff7abf8cb0    16  ldr x3, pc+112 (addr 0x0000ffff7abf8d20)    ;; object: 0x5d4e9429 Cell for 0
0xffff7abf8cb4    20  ldur x3, [x3, #7]
0xffff7abf8cb8    24  cmp x3, #0x0 (0)
0xffff7abf8cbc    28  b.ne #+0x44 (addr 0xffff7abf8d00)
0xffff7abf8cc0    32  tbz w0, #0, #+0x40 (addr 0xffff7abf8d00)
0xffff7abf8cc4    36  ldur x3, [x0, #-1]
0xffff7abf8cc8    40  ldr x4, pc+96 (addr 0x0000ffff7abf8d28)    ;; object: 0x5d4ea241 WeakCell for 0x4ec408f9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf8ccc    44  ldur x4, [x4, #7]
0xffff7abf8cd0    48  cmp x3, x4
0xffff7abf8cd4    52  b.ne #+0x2c (addr 0xffff7abf8d00)
0xffff7abf8cd8    56  ldr x5, pc+88 (addr 0x0000ffff7abf8d30)    ;; object: 0x5d4ea279 WeakCell for 0x4ec40951 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf8cdc    60  ldur x5, [x5, #7]
0xffff7abf8ce0    64  tbz w5, #0, #+0x20 (addr 0xffff7abf8d00)
0xffff7abf8ce4    68  ldursw x4, [x5, #15]
0xffff7abf8ce8    72  tbnz w4, #23, #+0x18 (addr 0xffff7abf8d00)
0xffff7abf8cec    76  ldr x4, [jssp], #8
0xffff7abf8cf0    80  ldr x3, [jssp], #8
0xffff7abf8cf4    84  ldr x2, pc+68 (addr 0x0000ffff7abf8d38)    ;; object: 0x5d422ab9 <String[18]: corkedRequestsFree>
0xffff7abf8cf8    88  ldr x16, pc+72 (addr 0x0000ffff7abf8d40)    ;; code: HANDLER, StoreTransitionStub, minor: 198681
0xffff7abf8cfc    92  br x16
0xffff7abf8d00    96  ldr x2, pc+72 (addr 0x0000ffff7abf8d48)    ;; object: 0x5d422ab9 <String[18]: corkedRequestsFree>
0xffff7abf8d04   100  ldr x4, [jssp], #8
0xffff7abf8d08   104  ldr x3, [jssp], #8
0xffff7abf8d0c   108  ldr x16, pc+68 (addr 0x0000ffff7abf8d50)    ;; code: BUILTIN
0xffff7abf8d10   112  br x16
0xffff7abf8d14   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abf8d18   120  d63f03e0       constant
0xffff7abf8d1c   124  d503201f       constant
0xffff7abf8d20   128  5d4e9429       constant
0xffff7abf8d24   132  00000000       constant
0xffff7abf8d28   136  5d4ea241       constant
0xffff7abf8d2c   140  00000000       constant
0xffff7abf8d30   144  5d4ea279       constant
0xffff7abf8d34   148  00000000       constant
0xffff7abf8d38   152  5d422ab9       constant
0xffff7abf8d3c   156  00000000       constant
0xffff7abf8d40   160  7abf8b60       constant
0xffff7abf8d44   164  0000ffff       constant
0xffff7abf8d48   168  5d422ab9       constant
0xffff7abf8d4c   172  00000000       constant
0xffff7abf8d50   176  7ab22420       constant
0xffff7abf8d54   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abf8cb0  embedded object  (0x5d4e9429 Cell for 0)
0xffff7abf8cc8  embedded object  (0x5d4ea241 WeakCell for 0x4ec408f9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf8cd8  embedded object  (0x5d4ea279 WeakCell for 0x4ec40951 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf8cf4  embedded object  (0x5d422ab9 <String[18]: corkedRequestsFree>)
0xffff7abf8cf8  code target (HANDLER)  (0xffff7abf8b60)
0xffff7abf8d00  embedded object  (0x5d422ab9 <String[18]: corkedRequestsFree>)
0xffff7abf8d0c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf8d14  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = _writableState
compiler = unknown
Instructions (size = 184)
0xffff7abf8dc0     0  sub csp, jssp, #0x8 (8)
0xffff7abf8dc4     4  str x3, [jssp, #-8]!
0xffff7abf8dc8     8  sub csp, jssp, #0x8 (8)
0xffff7abf8dcc    12  str x4, [jssp, #-8]!
0xffff7abf8dd0    16  ldr x3, pc+112 (addr 0x0000ffff7abf8e40)    ;; object: 0x5d4e9049 Cell for 0
0xffff7abf8dd4    20  ldur x3, [x3, #7]
0xffff7abf8dd8    24  cmp x3, #0x0 (0)
0xffff7abf8ddc    28  b.ne #+0x44 (addr 0xffff7abf8e20)
0xffff7abf8de0    32  tbz w0, #0, #+0x40 (addr 0xffff7abf8e20)
0xffff7abf8de4    36  ldur x3, [x0, #-1]
0xffff7abf8de8    40  ldr x4, pc+96 (addr 0x0000ffff7abf8e48)    ;; object: 0x5d4ea279 WeakCell for 0x4ec40951 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf8dec    44  ldur x4, [x4, #7]
0xffff7abf8df0    48  cmp x3, x4
0xffff7abf8df4    52  b.ne #+0x2c (addr 0xffff7abf8e20)
0xffff7abf8df8    56  ldr x5, pc+88 (addr 0x0000ffff7abf8e50)    ;; object: 0x5d4ea369 WeakCell for 0x4ec409a9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf8dfc    60  ldur x5, [x5, #7]
0xffff7abf8e00    64  tbz w5, #0, #+0x20 (addr 0xffff7abf8e20)
0xffff7abf8e04    68  ldursw x4, [x5, #15]
0xffff7abf8e08    72  tbnz w4, #23, #+0x18 (addr 0xffff7abf8e20)
0xffff7abf8e0c    76  ldr x4, [jssp], #8
0xffff7abf8e10    80  ldr x3, [jssp], #8
0xffff7abf8e14    84  ldr x2, pc+68 (addr 0x0000ffff7abf8e58)    ;; object: 0x20df92c9 <String[14]: _writableState>
0xffff7abf8e18    88  ldr x16, pc+72 (addr 0x0000ffff7abf8e60)    ;; code: HANDLER, StoreTransitionStub, minor: 196611
0xffff7abf8e1c    92  br x16
0xffff7abf8e20    96  ldr x2, pc+72 (addr 0x0000ffff7abf8e68)    ;; object: 0x20df92c9 <String[14]: _writableState>
0xffff7abf8e24   100  ldr x4, [jssp], #8
0xffff7abf8e28   104  ldr x3, [jssp], #8
0xffff7abf8e2c   108  ldr x16, pc+68 (addr 0x0000ffff7abf8e70)    ;; code: BUILTIN
0xffff7abf8e30   112  br x16
0xffff7abf8e34   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abf8e38   120  d63f03e0       constant
0xffff7abf8e3c   124  d503201f       constant
0xffff7abf8e40   128  5d4e9049       constant
0xffff7abf8e44   132  00000000       constant
0xffff7abf8e48   136  5d4ea279       constant
0xffff7abf8e4c   140  00000000       constant
0xffff7abf8e50   144  5d4ea369       constant
0xffff7abf8e54   148  00000000       constant
0xffff7abf8e58   152  20df92c9       constant
0xffff7abf8e5c   156  00000000       constant
0xffff7abf8e60   160  7ab99940       constant
0xffff7abf8e64   164  0000ffff       constant
0xffff7abf8e68   168  20df92c9       constant
0xffff7abf8e6c   172  00000000       constant
0xffff7abf8e70   176  7ab22420       constant
0xffff7abf8e74   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abf8dd0  embedded object  (0x5d4e9049 Cell for 0)
0xffff7abf8de8  embedded object  (0x5d4ea279 WeakCell for 0x4ec40951 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf8df8  embedded object  (0x5d4ea369 WeakCell for 0x4ec409a9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf8e14  embedded object  (0x20df92c9 <String[14]: _writableState>)
0xffff7abf8e18  code target (HANDLER)  (0xffff7ab99940)
0xffff7abf8e20  embedded object  (0x20df92c9 <String[14]: _writableState>)
0xffff7abf8e2c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf8e34  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = writable
compiler = unknown
Instructions (size = 152)
0xffff7abf8ee0     0  sub csp, jssp, #0x8 (8)
0xffff7abf8ee4     4  str x3, [jssp, #-8]!
0xffff7abf8ee8     8  sub csp, jssp, #0x8 (8)
0xffff7abf8eec    12  str x4, [jssp, #-8]!
0xffff7abf8ef0    16  ldr x3, pc+88 (addr 0x0000ffff7abf8f48)    ;; object: 0x5d4e9049 Cell for 0
0xffff7abf8ef4    20  ldur x3, [x3, #7]
0xffff7abf8ef8    24  cmp x3, #0x0 (0)
0xffff7abf8efc    28  b.ne #+0x30 (addr 0xffff7abf8f2c)
0xffff7abf8f00    32  tbz w0, #0, #+0x2c (addr 0xffff7abf8f2c)
0xffff7abf8f04    36  ldr x5, pc+76 (addr 0x0000ffff7abf8f50)    ;; object: 0x5d4ea3a1 WeakCell for 0x4ec40a01 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf8f08    40  ldur x5, [x5, #7]
0xffff7abf8f0c    44  tbz w5, #0, #+0x20 (addr 0xffff7abf8f2c)
0xffff7abf8f10    48  ldursw x4, [x5, #15]
0xffff7abf8f14    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf8f2c)
0xffff7abf8f18    56  ldr x4, [jssp], #8
0xffff7abf8f1c    60  ldr x3, [jssp], #8
0xffff7abf8f20    64  ldr x2, pc+56 (addr 0x0000ffff7abf8f58)    ;; object: 0x20d057a9 <String[8]: writable>
0xffff7abf8f24    68  ldr x16, pc+60 (addr 0x0000ffff7abf8f60)    ;; code: HANDLER, StoreTransitionStub, minor: 196612
0xffff7abf8f28    72  br x16
0xffff7abf8f2c    76  ldr x2, pc+60 (addr 0x0000ffff7abf8f68)    ;; object: 0x20d057a9 <String[8]: writable>
0xffff7abf8f30    80  ldr x4, [jssp], #8
0xffff7abf8f34    84  ldr x3, [jssp], #8
0xffff7abf8f38    88  ldr x16, pc+56 (addr 0x0000ffff7abf8f70)    ;; code: BUILTIN
0xffff7abf8f3c    92  br x16
0xffff7abf8f40    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf8f44   100  d63f03e0       constant
0xffff7abf8f48   104  5d4e9049       constant
0xffff7abf8f4c   108  00000000       constant
0xffff7abf8f50   112  5d4ea3a1       constant
0xffff7abf8f54   116  00000000       constant
0xffff7abf8f58   120  20d057a9       constant
0xffff7abf8f5c   124  00000000       constant
0xffff7abf8f60   128  7ab9a100       constant
0xffff7abf8f64   132  0000ffff       constant
0xffff7abf8f68   136  20d057a9       constant
0xffff7abf8f6c   140  00000000       constant
0xffff7abf8f70   144  7ab22420       constant
0xffff7abf8f74   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf8ef0  embedded object  (0x5d4e9049 Cell for 0)
0xffff7abf8f04  embedded object  (0x5d4ea3a1 WeakCell for 0x4ec40a01 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf8f20  embedded object  (0x20d057a9 <String[8]: writable>)
0xffff7abf8f24  code target (HANDLER)  (0xffff7ab9a100)
0xffff7abf8f2c  embedded object  (0x20d057a9 <String[8]: writable>)
0xffff7abf8f38  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf8f40  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0xffff7abf8fe0     0  tbz w0, #0, #+0x50 (addr 0xffff7abf9030)
0xffff7abf8fe4     4  mov x2, x0
0xffff7abf8fe8     8  stur x2, [x1, #79]
0xffff7abf8fec    12  add x3, x1, #0x4f (79)
0xffff7abf8ff0    16  and x2, x2, #0xfffffffffff00000
0xffff7abf8ff4    20  ldr x2, [x2, #8]
0xffff7abf8ff8    24  tbz w2, #1, #+0x24 (addr 0xffff7abf901c)
0xffff7abf8ffc    28  and x2, x1, #0xfffffffffff00000
0xffff7abf9000    32  ldr x2, [x2, #8]
0xffff7abf9004    36  tbz w2, #2, #+0x18 (addr 0xffff7abf901c)
0xffff7abf9008    40  sub csp, jssp, #0x8 (8)
0xffff7abf900c    44  str lr, [jssp, #-8]!
0xffff7abf9010    48  ldr x16, pc+24 (addr 0x0000ffff7abf9028)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf9014    52  blr x16
0xffff7abf9018    56  ldr lr, [jssp], #8
0xffff7abf901c    60  ret
0xffff7abf9020    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf9024    68  d63f03e0       constant
0xffff7abf9028    72  7ab170c0       constant
0xffff7abf902c    76  0000ffff       constant
0xffff7abf9030    80  movz x16, #0x0
0xffff7abf9034    84  sub csp, jssp, #0x10 (16)
0xffff7abf9038    88  stp fp, lr, [jssp, #-16]!
0xffff7abf903c    92  bl #+0x4 (addr 0xffff7abf9040)
0xffff7abf9040    96  movz x17, #0xa00000000
0xffff7abf9044   100  sub csp, jssp, #0x10 (16)
0xffff7abf9048   104  stp x17, cp, [jssp, #-16]!
0xffff7abf904c   108  add fp, jssp, #0x10 (16)
0xffff7abf9050   112  ldr x17, pc+24 (addr 0x0000ffff7abf9068)    ;; lazy deoptimization bailout 0
0xffff7abf9054   116  add x17, x17, x16
0xffff7abf9058   120  br x17
0xffff7abf905c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf9060   128  d63f03e0       constant
0xffff7abf9064   132  d503201f       constant
0xffff7abf9068   136  7a906000       constant
0xffff7abf906c   140  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf9010  code target (STUB)  (0xffff7ab170c0)
0xffff7abf9020  constant pool (size 16)
0xffff7abf9050  runtime entry
0xffff7abf905c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0xffff7abf8fe0     0  tbz w0, #0, #+0x50 (addr 0xffff7abf9030)
0xffff7abf8fe4     4  mov x2, x0
0xffff7abf8fe8     8  stur x2, [x1, #79]
0xffff7abf8fec    12  add x3, x1, #0x4f (79)
0xffff7abf8ff0    16  and x2, x2, #0xfffffffffff00000
0xffff7abf8ff4    20  ldr x2, [x2, #8]
0xffff7abf8ff8    24  tbz w2, #1, #+0x24 (addr 0xffff7abf901c)
0xffff7abf8ffc    28  and x2, x1, #0xfffffffffff00000
0xffff7abf9000    32  ldr x2, [x2, #8]
0xffff7abf9004    36  tbz w2, #2, #+0x18 (addr 0xffff7abf901c)
0xffff7abf9008    40  sub csp, jssp, #0x8 (8)
0xffff7abf900c    44  str lr, [jssp, #-8]!
0xffff7abf9010    48  ldr x16, pc+24 (addr 0x0000ffff7abf9028)    ;; code: STUB, RecordWriteStub, minor: 68673
0xffff7abf9014    52  blr x16
0xffff7abf9018    56  ldr lr, [jssp], #8
0xffff7abf901c    60  ret
0xffff7abf9020    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abf9024    68  d63f03e0       constant
0xffff7abf9028    72  7ab170c0       constant
0xffff7abf902c    76  0000ffff       constant
0xffff7abf9030    80  movz x16, #0x0
0xffff7abf9034    84  sub csp, jssp, #0x10 (16)
0xffff7abf9038    88  stp fp, lr, [jssp, #-16]!
0xffff7abf903c    92  bl #+0x4 (addr 0xffff7abf9040)
0xffff7abf9040    96  movz x17, #0xa00000000
0xffff7abf9044   100  sub csp, jssp, #0x10 (16)
0xffff7abf9048   104  stp x17, cp, [jssp, #-16]!
0xffff7abf904c   108  add fp, jssp, #0x10 (16)
0xffff7abf9050   112  ldr x17, pc+24 (addr 0x0000ffff7abf9068)    ;; lazy deoptimization bailout 0
0xffff7abf9054   116  add x17, x17, x16
0xffff7abf9058   120  br x17
0xffff7abf905c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf9060   128  d63f03e0       constant
0xffff7abf9064   132  d503201f       constant
0xffff7abf9068   136  7a906000       constant
0xffff7abf906c   140  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf9010  code target (STUB)  (0xffff7ab170c0)
0xffff7abf9020  constant pool (size 16)
0xffff7abf9050  runtime entry
0xffff7abf905c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = _events
compiler = unknown
Instructions (size = 120)
0xffff7abf90e0     0  sub csp, jssp, #0x8 (8)
0xffff7abf90e4     4  str x3, [jssp, #-8]!
0xffff7abf90e8     8  sub csp, jssp, #0x8 (8)
0xffff7abf90ec    12  str x0, [jssp, #-8]!
0xffff7abf90f0    16  ldr x0, pc+72 (addr 0x0000ffff7abf9138)    ;; object: 0x5d4ea4a9 Cell for 0
0xffff7abf90f4    20  ldur x0, [x0, #7]
0xffff7abf90f8    24  cmp x0, #0x0 (0)
0xffff7abf90fc    28  b.ne #+0x14 (addr 0xffff7abf9110)
0xffff7abf9100    32  ldr x3, pc+64 (addr 0x0000ffff7abf9140)    ;; object: 0x5d4ea4b9 WeakCell for 0x5d4acc61 <an Object with map 0x4ec1bf39>
0xffff7abf9104    36  ldur x3, [x3, #7]
0xffff7abf9108    40  tbz w3, #0, #+0x8 (addr 0xffff7abf9110)
0xffff7abf910c    44  b #+0x14 (addr 0xffff7abf9120)
0xffff7abf9110    48  ldr x0, [jssp], #8
0xffff7abf9114    52  ldr x3, [jssp], #8
0xffff7abf9118    56  ldr x16, pc+48 (addr 0x0000ffff7abf9148)    ;; code: BUILTIN
0xffff7abf911c    60  br x16
0xffff7abf9120    64  add jssp, jssp, #0x10 (16)
0xffff7abf9124    68  mov x1, x3
0xffff7abf9128    72  ldr x16, pc+40 (addr 0x0000ffff7abf9150)    ;; code: HANDLER, LoadFieldStub, minor: 2052
0xffff7abf912c    76  br x16
0xffff7abf9130    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abf9134    84  d63f03e0       constant
0xffff7abf9138    88  5d4ea4a9       constant
0xffff7abf913c    92  00000000       constant
0xffff7abf9140    96  5d4ea4b9       constant
0xffff7abf9144   100  00000000       constant
0xffff7abf9148   104  7ab222e0       constant
0xffff7abf914c   108  0000ffff       constant
0xffff7abf9150   112  7ab78da0       constant
0xffff7abf9154   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abf90f0  embedded object  (0x5d4ea4a9 Cell for 0)
0xffff7abf9100  embedded object  (0x5d4ea4b9 WeakCell for 0x5d4acc61 <an Object with map 0x4ec1bf39>)
0xffff7abf9118  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abf9128  code target (HANDLER)  (0xffff7ab78da0)
0xffff7abf9130  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 160)
0xffff7abf91c0     0  tbz w0, #0, #+0x58 (addr 0xffff7abf9218)
0xffff7abf91c4     4  mov x2, x0
0xffff7abf91c8     8  ldur x4, [x1, #7]
0xffff7abf91cc    12  stur x2, [x4, #15]
0xffff7abf91d0    16  add x3, x4, #0xf (15)
0xffff7abf91d4    20  and x2, x2, #0xfffffffffff00000
0xffff7abf91d8    24  ldr x2, [x2, #8]
0xffff7abf91dc    28  tbz w2, #1, #+0x24 (addr 0xffff7abf9200)
0xffff7abf91e0    32  and x2, x4, #0xfffffffffff00000
0xffff7abf91e4    36  ldr x2, [x2, #8]
0xffff7abf91e8    40  tbz w2, #2, #+0x18 (addr 0xffff7abf9200)
0xffff7abf91ec    44  sub csp, jssp, #0x8 (8)
0xffff7abf91f0    48  str lr, [jssp, #-8]!
0xffff7abf91f4    52  ldr x16, pc+28 (addr 0x0000ffff7abf9210)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abf91f8    56  blr x16
0xffff7abf91fc    60  ldr lr, [jssp], #8
0xffff7abf9200    64  ret
0xffff7abf9204    68  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf9208    72  d63f03e0       constant
0xffff7abf920c    76  d503201f       constant
0xffff7abf9210    80  7ab378a0       constant
0xffff7abf9214    84  0000ffff       constant
0xffff7abf9218    88  movz x16, #0x0
0xffff7abf921c    92  sub csp, jssp, #0x10 (16)
0xffff7abf9220    96  stp fp, lr, [jssp, #-16]!
0xffff7abf9224   100  bl #+0x4 (addr 0xffff7abf9228)
0xffff7abf9228   104  movz x17, #0xa00000000
0xffff7abf922c   108  sub csp, jssp, #0x10 (16)
0xffff7abf9230   112  stp x17, cp, [jssp, #-16]!
0xffff7abf9234   116  add fp, jssp, #0x10 (16)
0xffff7abf9238   120  ldr x17, pc+24 (addr 0x0000ffff7abf9250)    ;; lazy deoptimization bailout 0
0xffff7abf923c   124  add x17, x17, x16
0xffff7abf9240   128  br x17
0xffff7abf9244   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf9248   136  d63f03e0       constant
0xffff7abf924c   140  d503201f       constant
0xffff7abf9250   144  7a906000       constant
0xffff7abf9254   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf91f4  code target (STUB)  (0xffff7ab378a0)
0xffff7abf9204  constant pool (size 20)
0xffff7abf9238  runtime entry
0xffff7abf9244  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 160)
0xffff7abf91c0     0  tbz w0, #0, #+0x58 (addr 0xffff7abf9218)
0xffff7abf91c4     4  mov x2, x0
0xffff7abf91c8     8  ldur x4, [x1, #7]
0xffff7abf91cc    12  stur x2, [x4, #15]
0xffff7abf91d0    16  add x3, x4, #0xf (15)
0xffff7abf91d4    20  and x2, x2, #0xfffffffffff00000
0xffff7abf91d8    24  ldr x2, [x2, #8]
0xffff7abf91dc    28  tbz w2, #1, #+0x24 (addr 0xffff7abf9200)
0xffff7abf91e0    32  and x2, x4, #0xfffffffffff00000
0xffff7abf91e4    36  ldr x2, [x2, #8]
0xffff7abf91e8    40  tbz w2, #2, #+0x18 (addr 0xffff7abf9200)
0xffff7abf91ec    44  sub csp, jssp, #0x8 (8)
0xffff7abf91f0    48  str lr, [jssp, #-8]!
0xffff7abf91f4    52  ldr x16, pc+28 (addr 0x0000ffff7abf9210)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abf91f8    56  blr x16
0xffff7abf91fc    60  ldr lr, [jssp], #8
0xffff7abf9200    64  ret
0xffff7abf9204    68  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf9208    72  d63f03e0       constant
0xffff7abf920c    76  d503201f       constant
0xffff7abf9210    80  7ab378a0       constant
0xffff7abf9214    84  0000ffff       constant
0xffff7abf9218    88  movz x16, #0x0
0xffff7abf921c    92  sub csp, jssp, #0x10 (16)
0xffff7abf9220    96  stp fp, lr, [jssp, #-16]!
0xffff7abf9224   100  bl #+0x4 (addr 0xffff7abf9228)
0xffff7abf9228   104  movz x17, #0xa00000000
0xffff7abf922c   108  sub csp, jssp, #0x10 (16)
0xffff7abf9230   112  stp x17, cp, [jssp, #-16]!
0xffff7abf9234   116  add fp, jssp, #0x10 (16)
0xffff7abf9238   120  ldr x17, pc+24 (addr 0x0000ffff7abf9250)    ;; lazy deoptimization bailout 0
0xffff7abf923c   124  add x17, x17, x16
0xffff7abf9240   128  br x17
0xffff7abf9244   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abf9248   136  d63f03e0       constant
0xffff7abf924c   140  d503201f       constant
0xffff7abf9250   144  7a906000       constant
0xffff7abf9254   148  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abf91f4  code target (STUB)  (0xffff7ab378a0)
0xffff7abf9204  constant pool (size 20)
0xffff7abf9238  runtime entry
0xffff7abf9244  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = BOOLEAN*BOOLEAN -> BOOLEAN
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 184)
0xffff7abf92c0     0  tbz w1, #0, #+0x30 (addr 0xffff7abf92f0)
0xffff7abf92c4     4  ldur x2, [x1, #-1]
0xffff7abf92c8     8  ldr x16, [x26, #840]
0xffff7abf92cc    12  cmp x2, x16
0xffff7abf92d0    16  b.ne #+0x20 (addr 0xffff7abf92f0)
0xffff7abf92d4    20  tbz w0, #0, #+0x1c (addr 0xffff7abf92f0)
0xffff7abf92d8    24  ldur x3, [x0, #-1]
0xffff7abf92dc    28  ldr x16, [x26, #840]
0xffff7abf92e0    32  cmp x3, x16
0xffff7abf92e4    36  b.ne #+0xc (addr 0xffff7abf92f0)
0xffff7abf92e8    40  sub x0, x1, x0
0xffff7abf92ec    44  ret
0xffff7abf92f0    48  movz x16, #0xc00000000
0xffff7abf92f4    52  sub csp, jssp, #0x10 (16)
0xffff7abf92f8    56  stp fp, lr, [jssp, #-16]!
0xffff7abf92fc    60  sub csp, jssp, #0x10 (16)
0xffff7abf9300    64  str x16, [jssp, #-8]!
0xffff7abf9304    68  ldr x17, pc+92 (addr 0x0000ffff7abf9360)    ;; object: 0xffff7abf9261 <Code: COMPARE_IC>
0xffff7abf9308    72  sub csp, jssp, #0x10 (16)
0xffff7abf930c    76  str x17, [jssp, #-8]!
0xffff7abf9310    80  add fp, jssp, #0x10 (16)
0xffff7abf9314    84  sub csp, jssp, #0x18 (24)
0xffff7abf9318    88  stp lr, x0, [jssp, #-24]!
0xffff7abf931c    92  str x1, [jssp, #16]
0xffff7abf9320    96  movz x10, #0x2f00000000
0xffff7abf9324   100  sub csp, jssp, #0x18 (24)
0xffff7abf9328   104  stp x10, x0, [jssp, #-24]!
0xffff7abf932c   108  str x1, [jssp, #16]
0xffff7abf9330   112  movz x0, #0x3
0xffff7abf9334   116  ldr x1, pc+52 (addr 0x0000ffff7abf9368)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7abf9338   120  ldr x16, pc+56 (addr 0x0000ffff7abf9370)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abf933c   124  blr x16
0xffff7abf9340   128  add x11, x0, #0x5f (95)
0xffff7abf9344   132  ldr x1, [jssp, #16]
0xffff7abf9348   136  ldp lr, x0, [jssp], #24
0xffff7abf934c   140  mov jssp, fp
0xffff7abf9350   144  ldp fp, lr, [jssp], #16
0xffff7abf9354   148  br x11
0xffff7abf9358   152  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7abf935c   156  d63f03e0       constant
0xffff7abf9360   160  7abf9261       constant
0xffff7abf9364   164  0000ffff       constant
0xffff7abf9368   168  00c8a980       constant
0xffff7abf936c   172  00000000       constant
0xffff7abf9370   176  7ab06060       constant
0xffff7abf9374   180  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf9304  embedded object  (0xffff7abf9261 <Code: COMPARE_IC>)
0xffff7abf9334  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7abf9338  code target (STUB)  (0xffff7ab06060)
0xffff7abf9358  constant pool (size 32)


kind = HANDLER
major_key = <NoCache>Stub
name = end
compiler = unknown
Instructions (size = 152)
0xffff7abf9f80     0  sub csp, jssp, #0x8 (8)
0xffff7abf9f84     4  str x3, [jssp, #-8]!
0xffff7abf9f88     8  sub csp, jssp, #0x8 (8)
0xffff7abf9f8c    12  str x4, [jssp, #-8]!
0xffff7abf9f90    16  ldr x3, pc+88 (addr 0x0000ffff7abf9fe8)    ;; object: 0x5d4d1fc9 Cell for 0
0xffff7abf9f94    20  ldur x3, [x3, #7]
0xffff7abf9f98    24  cmp x3, #0x0 (0)
0xffff7abf9f9c    28  b.ne #+0x30 (addr 0xffff7abf9fcc)
0xffff7abf9fa0    32  tbz w0, #0, #+0x2c (addr 0xffff7abf9fcc)
0xffff7abf9fa4    36  ldr x5, pc+76 (addr 0x0000ffff7abf9ff0)    ;; object: 0x5d4ead11 WeakCell for 0x4ec40b09 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abf9fa8    40  ldur x5, [x5, #7]
0xffff7abf9fac    44  tbz w5, #0, #+0x20 (addr 0xffff7abf9fcc)
0xffff7abf9fb0    48  ldursw x4, [x5, #15]
0xffff7abf9fb4    52  tbnz w4, #23, #+0x18 (addr 0xffff7abf9fcc)
0xffff7abf9fb8    56  ldr x4, [jssp], #8
0xffff7abf9fbc    60  ldr x3, [jssp], #8
0xffff7abf9fc0    64  ldr x2, pc+56 (addr 0x0000ffff7abf9ff8)    ;; object: 0x20d93989 <String[3]: end>
0xffff7abf9fc4    68  ldr x16, pc+60 (addr 0x0000ffff7abfa000)    ;; code: HANDLER, StoreTransitionStub, minor: 198659
0xffff7abf9fc8    72  br x16
0xffff7abf9fcc    76  ldr x2, pc+60 (addr 0x0000ffff7abfa008)    ;; object: 0x20d93989 <String[3]: end>
0xffff7abf9fd0    80  ldr x4, [jssp], #8
0xffff7abf9fd4    84  ldr x3, [jssp], #8
0xffff7abf9fd8    88  ldr x16, pc+56 (addr 0x0000ffff7abfa010)    ;; code: BUILTIN
0xffff7abf9fdc    92  br x16
0xffff7abf9fe0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abf9fe4   100  d63f03e0       constant
0xffff7abf9fe8   104  5d4d1fc9       constant
0xffff7abf9fec   108  00000000       constant
0xffff7abf9ff0   112  5d4ead11       constant
0xffff7abf9ff4   116  00000000       constant
0xffff7abf9ff8   120  20d93989       constant
0xffff7abf9ffc   124  00000000       constant
0xffff7abfa000   128  7ab8b940       constant
0xffff7abfa004   132  0000ffff       constant
0xffff7abfa008   136  20d93989       constant
0xffff7abfa00c   140  00000000       constant
0xffff7abfa010   144  7ab22420       constant
0xffff7abfa014   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abf9f90  embedded object  (0x5d4d1fc9 Cell for 0)
0xffff7abf9fa4  embedded object  (0x5d4ead11 WeakCell for 0x4ec40b09 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abf9fc0  embedded object  (0x20d93989 <String[3]: end>)
0xffff7abf9fc4  code target (HANDLER)  (0xffff7ab8b940)
0xffff7abf9fcc  embedded object  (0x20d93989 <String[3]: end>)
0xffff7abf9fd8  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abf9fe0  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0xffff7abfa080     0  ldur x0, [x1, #95]
0xffff7abfa084     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0xffff7abfa080     0  ldur x0, [x1, #95]
0xffff7abfa084     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0xffff7abfa100     0  mov x5, x0
0xffff7abfa104     4  tbnz w5, #0, #+0xc (addr 0xffff7abfa110)
0xffff7abfa108     8  stur x5, [x1, #95]
0xffff7abfa10c    12  ret
0xffff7abfa110    16  movz x16, #0x0
0xffff7abfa114    20  sub csp, jssp, #0x10 (16)
0xffff7abfa118    24  stp fp, lr, [jssp, #-16]!
0xffff7abfa11c    28  bl #+0x4 (addr 0xffff7abfa120)
0xffff7abfa120    32  movz x17, #0xa00000000
0xffff7abfa124    36  sub csp, jssp, #0x10 (16)
0xffff7abfa128    40  stp x17, cp, [jssp, #-16]!
0xffff7abfa12c    44  add fp, jssp, #0x10 (16)
0xffff7abfa130    48  ldr x17, pc+24 (addr 0x0000ffff7abfa148)    ;; lazy deoptimization bailout 0
0xffff7abfa134    52  add x17, x17, x16
0xffff7abfa138    56  br x17
0xffff7abfa13c    60  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abfa140    64  d63f03e0       constant
0xffff7abfa144    68  d503201f       constant
0xffff7abfa148    72  7a906000       constant
0xffff7abfa14c    76  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 8)
0xffff7abfa130  runtime entry
0xffff7abfa13c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0xffff7abfa100     0  mov x5, x0
0xffff7abfa104     4  tbnz w5, #0, #+0xc (addr 0xffff7abfa110)
0xffff7abfa108     8  stur x5, [x1, #95]
0xffff7abfa10c    12  ret
0xffff7abfa110    16  movz x16, #0x0
0xffff7abfa114    20  sub csp, jssp, #0x10 (16)
0xffff7abfa118    24  stp fp, lr, [jssp, #-16]!
0xffff7abfa11c    28  bl #+0x4 (addr 0xffff7abfa120)
0xffff7abfa120    32  movz x17, #0xa00000000
0xffff7abfa124    36  sub csp, jssp, #0x10 (16)
0xffff7abfa128    40  stp x17, cp, [jssp, #-16]!
0xffff7abfa12c    44  add fp, jssp, #0x10 (16)
0xffff7abfa130    48  ldr x17, pc+24 (addr 0x0000ffff7abfa148)    ;; lazy deoptimization bailout 0
0xffff7abfa134    52  add x17, x17, x16
0xffff7abfa138    56  br x17
0xffff7abfa13c    60  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abfa140    64  d63f03e0       constant
0xffff7abfa144    68  d503201f       constant
0xffff7abfa148    72  7a906000       constant
0xffff7abfa14c    76  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 8)
0xffff7abfa130  runtime entry
0xffff7abfa13c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = on
compiler = unknown
Instructions (size = 120)
0xffff7abfa1c0     0  sub csp, jssp, #0x8 (8)
0xffff7abfa1c4     4  str x3, [jssp, #-8]!
0xffff7abfa1c8     8  sub csp, jssp, #0x8 (8)
0xffff7abfa1cc    12  str x0, [jssp, #-8]!
0xffff7abfa1d0    16  ldr x0, pc+72 (addr 0x0000ffff7abfa218)    ;; object: 0x5d4eae21 Cell for 0
0xffff7abfa1d4    20  ldur x0, [x0, #7]
0xffff7abfa1d8    24  cmp x0, #0x0 (0)
0xffff7abfa1dc    28  b.ne #+0x14 (addr 0xffff7abfa1f0)
0xffff7abfa1e0    32  ldr x3, pc+64 (addr 0x0000ffff7abfa220)    ;; object: 0x5d4eae31 WeakCell for 0x5d4acc61 <an Object with map 0x4ec1bf39>
0xffff7abfa1e4    36  ldur x3, [x3, #7]
0xffff7abfa1e8    40  tbz w3, #0, #+0x8 (addr 0xffff7abfa1f0)
0xffff7abfa1ec    44  b #+0x14 (addr 0xffff7abfa200)
0xffff7abfa1f0    48  ldr x0, [jssp], #8
0xffff7abfa1f4    52  ldr x3, [jssp], #8
0xffff7abfa1f8    56  ldr x16, pc+48 (addr 0x0000ffff7abfa228)    ;; code: BUILTIN
0xffff7abfa1fc    60  br x16
0xffff7abfa200    64  add jssp, jssp, #0x10 (16)
0xffff7abfa204    68  mov x1, x3
0xffff7abfa208    72  ldr x16, pc+40 (addr 0x0000ffff7abfa230)    ;; code: HANDLER, LoadConstantStub, minor: 8
0xffff7abfa20c    76  br x16
0xffff7abfa210    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abfa214    84  d63f03e0       constant
0xffff7abfa218    88  5d4eae21       constant
0xffff7abfa21c    92  00000000       constant
0xffff7abfa220    96  5d4eae31       constant
0xffff7abfa224   100  00000000       constant
0xffff7abfa228   104  7ab222e0       constant
0xffff7abfa22c   108  0000ffff       constant
0xffff7abfa230   112  7ab4c160       constant
0xffff7abfa234   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abfa1d0  embedded object  (0x5d4eae21 Cell for 0)
0xffff7abfa1e0  embedded object  (0x5d4eae31 WeakCell for 0x5d4acc61 <an Object with map 0x4ec1bf39>)
0xffff7abfa1f8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abfa208  code target (HANDLER)  (0xffff7ab4c160)
0xffff7abfa210  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = finish
compiler = unknown
Instructions (size = 168)
0xffff7abfa2a0     0  sub csp, jssp, #0x8 (8)
0xffff7abfa2a4     4  str x3, [jssp, #-8]!
0xffff7abfa2a8     8  sub csp, jssp, #0x8 (8)
0xffff7abfa2ac    12  str x4, [jssp, #-8]!
0xffff7abfa2b0    16  ldr x3, pc+104 (addr 0x0000ffff7abfa318)    ;; object: 0x5d4d1fc9 Cell for 0
0xffff7abfa2b4    20  ldur x3, [x3, #7]
0xffff7abfa2b8    24  cmp x3, #0x0 (0)
0xffff7abfa2bc    28  b.ne #+0x3c (addr 0xffff7abfa2f8)
0xffff7abfa2c0    32  ldr x5, pc+96 (addr 0x0000ffff7abfa320)    ;; object: 0x5d4eae81 WeakCell for 0x4ec40b61 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfa2c4    36  ldur x5, [x5, #7]
0xffff7abfa2c8    40  tbz w5, #0, #+0x30 (addr 0xffff7abfa2f8)
0xffff7abfa2cc    44  ldursw x4, [x5, #15]
0xffff7abfa2d0    48  tbnz w4, #23, #+0x28 (addr 0xffff7abfa2f8)
0xffff7abfa2d4    52  ldur x4, [x5, #47]
0xffff7abfa2d8    56  ldur x4, [x4, #71]
0xffff7abfa2dc    60  cmp x0, x4
0xffff7abfa2e0    64  b.ne #+0x18 (addr 0xffff7abfa2f8)
0xffff7abfa2e4    68  ldr x4, [jssp], #8
0xffff7abfa2e8    72  ldr x3, [jssp], #8
0xffff7abfa2ec    76  ldr x2, pc+60 (addr 0x0000ffff7abfa328)    ;; object: 0x5d40f0e9 <String[6]: finish>
0xffff7abfa2f0    80  ldr x16, pc+64 (addr 0x0000ffff7abfa330)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0xffff7abfa2f4    84  br x16
0xffff7abfa2f8    88  ldr x2, pc+64 (addr 0x0000ffff7abfa338)    ;; object: 0x5d40f0e9 <String[6]: finish>
0xffff7abfa2fc    92  ldr x4, [jssp], #8
0xffff7abfa300    96  ldr x3, [jssp], #8
0xffff7abfa304   100  ldr x16, pc+60 (addr 0x0000ffff7abfa340)    ;; code: BUILTIN
0xffff7abfa308   104  br x16
0xffff7abfa30c   108  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abfa310   112  d63f03e0       constant
0xffff7abfa314   116  d503201f       constant
0xffff7abfa318   120  5d4d1fc9       constant
0xffff7abfa31c   124  00000000       constant
0xffff7abfa320   128  5d4eae81       constant
0xffff7abfa324   132  00000000       constant
0xffff7abfa328   136  5d40f0e9       constant
0xffff7abfa32c   140  00000000       constant
0xffff7abfa330   144  7ab3cea0       constant
0xffff7abfa334   148  0000ffff       constant
0xffff7abfa338   152  5d40f0e9       constant
0xffff7abfa33c   156  00000000       constant
0xffff7abfa340   160  7ab22420       constant
0xffff7abfa344   164  0000ffff       constant


RelocInfo (size = 12)
0xffff7abfa2b0  embedded object  (0x5d4d1fc9 Cell for 0)
0xffff7abfa2c0  embedded object  (0x5d4eae81 WeakCell for 0x4ec40b61 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfa2ec  embedded object  (0x5d40f0e9 <String[6]: finish>)
0xffff7abfa2f0  code target (HANDLER)  (0xffff7ab3cea0)
0xffff7abfa2f8  embedded object  (0x5d40f0e9 <String[6]: finish>)
0xffff7abfa304  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abfa30c  constant pool (size 60)

kind = HANDLER
major_key = <NoCache>Stub
name = _socketEnd
compiler = unknown
Instructions (size = 168)
0xffff7abfa3c0     0  sub csp, jssp, #0x8 (8)
0xffff7abfa3c4     4  str x3, [jssp, #-8]!
0xffff7abfa3c8     8  sub csp, jssp, #0x8 (8)
0xffff7abfa3cc    12  str x4, [jssp, #-8]!
0xffff7abfa3d0    16  ldr x3, pc+104 (addr 0x0000ffff7abfa438)    ;; object: 0x5d4d1fc9 Cell for 0
0xffff7abfa3d4    20  ldur x3, [x3, #7]
0xffff7abfa3d8    24  cmp x3, #0x0 (0)
0xffff7abfa3dc    28  b.ne #+0x3c (addr 0xffff7abfa418)
0xffff7abfa3e0    32  ldr x5, pc+96 (addr 0x0000ffff7abfa440)    ;; object: 0x5d4eaed1 WeakCell for 0x4ec40bb9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfa3e4    36  ldur x5, [x5, #7]
0xffff7abfa3e8    40  tbz w5, #0, #+0x30 (addr 0xffff7abfa418)
0xffff7abfa3ec    44  ldursw x4, [x5, #15]
0xffff7abfa3f0    48  tbnz w4, #23, #+0x28 (addr 0xffff7abfa418)
0xffff7abfa3f4    52  ldur x4, [x5, #47]
0xffff7abfa3f8    56  ldur x4, [x4, #95]
0xffff7abfa3fc    60  cmp x0, x4
0xffff7abfa400    64  b.ne #+0x18 (addr 0xffff7abfa418)
0xffff7abfa404    68  ldr x4, [jssp], #8
0xffff7abfa408    72  ldr x3, [jssp], #8
0xffff7abfa40c    76  ldr x2, pc+60 (addr 0x0000ffff7abfa448)    ;; object: 0x5d4d3ea1 <String[10]: _socketEnd>
0xffff7abfa410    80  ldr x16, pc+64 (addr 0x0000ffff7abfa450)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0xffff7abfa414    84  br x16
0xffff7abfa418    88  ldr x2, pc+64 (addr 0x0000ffff7abfa458)    ;; object: 0x5d4d3ea1 <String[10]: _socketEnd>
0xffff7abfa41c    92  ldr x4, [jssp], #8
0xffff7abfa420    96  ldr x3, [jssp], #8
0xffff7abfa424   100  ldr x16, pc+60 (addr 0x0000ffff7abfa460)    ;; code: BUILTIN
0xffff7abfa428   104  br x16
0xffff7abfa42c   108  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abfa430   112  d63f03e0       constant
0xffff7abfa434   116  d503201f       constant
0xffff7abfa438   120  5d4d1fc9       constant
0xffff7abfa43c   124  00000000       constant
0xffff7abfa440   128  5d4eaed1       constant
0xffff7abfa444   132  00000000       constant
0xffff7abfa448   136  5d4d3ea1       constant
0xffff7abfa44c   140  00000000       constant
0xffff7abfa450   144  7ab3cea0       constant
0xffff7abfa454   148  0000ffff       constant
0xffff7abfa458   152  5d4d3ea1       constant
0xffff7abfa45c   156  00000000       constant
0xffff7abfa460   160  7ab22420       constant
0xffff7abfa464   164  0000ffff       constant


RelocInfo (size = 12)
0xffff7abfa3d0  embedded object  (0x5d4d1fc9 Cell for 0)
0xffff7abfa3e0  embedded object  (0x5d4eaed1 WeakCell for 0x4ec40bb9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfa40c  embedded object  (0x5d4d3ea1 <String[10]: _socketEnd>)
0xffff7abfa410  code target (HANDLER)  (0xffff7ab3cea0)
0xffff7abfa418  embedded object  (0x5d4d3ea1 <String[10]: _socketEnd>)
0xffff7abfa424  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abfa42c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abfa840     0  ldur x4, [x1, #15]
0xffff7abfa844     4  ldur w5, [x1, #27]
0xffff7abfa848     8  tbnz w2, #0, #+0x24 (addr 0xffff7abfa86c)
0xffff7abfa84c    12  asr x7, x2, #32
0xffff7abfa850    16  cmp w7, w5
0xffff7abfa854    20  b.hs #+0x40 (addr 0xffff7abfa894)
0xffff7abfa858    24  add x5, x4, #0xf (15)
0xffff7abfa85c    28  ldr x6, [x5, w7, sxtw #3]
0xffff7abfa860    32  tbnz w6, #0, #+0x44 (addr 0xffff7abfa8a4)
0xffff7abfa864    36  mov x0, x6
0xffff7abfa868    40  ret
0xffff7abfa86c    44  ldur x16, [x2, #-1]
0xffff7abfa870    48  ldr x17, [x26, #120]
0xffff7abfa874    52  cmp x16, x17
0xffff7abfa878    56  b.ne #+0x3c (addr 0xffff7abfa8b4)
0xffff7abfa87c    60  ldur d29, [x2, #7]
0xffff7abfa880    64  fcvtzs w7, d29
0xffff7abfa884    68  scvtf d0, w7
0xffff7abfa888    72  fcmp d29, d0
0xffff7abfa88c    76  b.ne #+0x28 (addr 0xffff7abfa8b4)
0xffff7abfa890    80  b #-0x40 (addr 0xffff7abfa850)
0xffff7abfa894    84  movz x16, #0x0
0xffff7abfa898    88  sub csp, jssp, #0x10 (16)
0xffff7abfa89c    92  stp fp, lr, [jssp, #-16]!
0xffff7abfa8a0    96  bl #+0x24 (addr 0xffff7abfa8c4)
0xffff7abfa8a4   100  movz x16, #0x8
0xffff7abfa8a8   104  sub csp, jssp, #0x10 (16)
0xffff7abfa8ac   108  stp fp, lr, [jssp, #-16]!
0xffff7abfa8b0   112  bl #+0x14 (addr 0xffff7abfa8c4)
0xffff7abfa8b4   116  movz x16, #0x10
0xffff7abfa8b8   120  sub csp, jssp, #0x10 (16)
0xffff7abfa8bc   124  stp fp, lr, [jssp, #-16]!
0xffff7abfa8c0   128  bl #+0x4 (addr 0xffff7abfa8c4)
0xffff7abfa8c4   132  movz x17, #0xa00000000
0xffff7abfa8c8   136  sub csp, jssp, #0x10 (16)
0xffff7abfa8cc   140  stp x17, cp, [jssp, #-16]!
0xffff7abfa8d0   144  add fp, jssp, #0x10 (16)
0xffff7abfa8d4   148  ldr x17, pc+20 (addr 0x0000ffff7abfa8e8)    ;; lazy deoptimization bailout 0
0xffff7abfa8d8   152  add x17, x17, x16
0xffff7abfa8dc   156  br x17
0xffff7abfa8e0   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abfa8e4   164  d63f03e0       constant
0xffff7abfa8e8   168  7a906000       constant
0xffff7abfa8ec   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7abfa8d4  runtime entry
0xffff7abfa8e0  constant pool (size 16)

--- End code ---
kind = HANDLER
major_key = LoadFastElementStub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 184)
0xffff7abfa840     0  ldur x4, [x1, #15]
0xffff7abfa844     4  ldur w5, [x1, #27]
0xffff7abfa848     8  tbnz w2, #0, #+0x24 (addr 0xffff7abfa86c)
0xffff7abfa84c    12  asr x7, x2, #32
0xffff7abfa850    16  cmp w7, w5
0xffff7abfa854    20  b.hs #+0x40 (addr 0xffff7abfa894)
0xffff7abfa858    24  add x5, x4, #0xf (15)
0xffff7abfa85c    28  ldr x6, [x5, w7, sxtw #3]
0xffff7abfa860    32  tbnz w6, #0, #+0x44 (addr 0xffff7abfa8a4)
0xffff7abfa864    36  mov x0, x6
0xffff7abfa868    40  ret
0xffff7abfa86c    44  ldur x16, [x2, #-1]
0xffff7abfa870    48  ldr x17, [x26, #120]
0xffff7abfa874    52  cmp x16, x17
0xffff7abfa878    56  b.ne #+0x3c (addr 0xffff7abfa8b4)
0xffff7abfa87c    60  ldur d29, [x2, #7]
0xffff7abfa880    64  fcvtzs w7, d29
0xffff7abfa884    68  scvtf d0, w7
0xffff7abfa888    72  fcmp d29, d0
0xffff7abfa88c    76  b.ne #+0x28 (addr 0xffff7abfa8b4)
0xffff7abfa890    80  b #-0x40 (addr 0xffff7abfa850)
0xffff7abfa894    84  movz x16, #0x0
0xffff7abfa898    88  sub csp, jssp, #0x10 (16)
0xffff7abfa89c    92  stp fp, lr, [jssp, #-16]!
0xffff7abfa8a0    96  bl #+0x24 (addr 0xffff7abfa8c4)
0xffff7abfa8a4   100  movz x16, #0x8
0xffff7abfa8a8   104  sub csp, jssp, #0x10 (16)
0xffff7abfa8ac   108  stp fp, lr, [jssp, #-16]!
0xffff7abfa8b0   112  bl #+0x14 (addr 0xffff7abfa8c4)
0xffff7abfa8b4   116  movz x16, #0x10
0xffff7abfa8b8   120  sub csp, jssp, #0x10 (16)
0xffff7abfa8bc   124  stp fp, lr, [jssp, #-16]!
0xffff7abfa8c0   128  bl #+0x4 (addr 0xffff7abfa8c4)
0xffff7abfa8c4   132  movz x17, #0xa00000000
0xffff7abfa8c8   136  sub csp, jssp, #0x10 (16)
0xffff7abfa8cc   140  stp x17, cp, [jssp, #-16]!
0xffff7abfa8d0   144  add fp, jssp, #0x10 (16)
0xffff7abfa8d4   148  ldr x17, pc+20 (addr 0x0000ffff7abfa8e8)    ;; lazy deoptimization bailout 0
0xffff7abfa8d8   152  add x17, x17, x16
0xffff7abfa8dc   156  br x17
0xffff7abfa8e0   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0xffff7abfa8e4   164  d63f03e0       constant
0xffff7abfa8e8   168  7a906000       constant
0xffff7abfa8ec   172  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0xffff7abfa8d4  runtime entry
0xffff7abfa8e0  constant pool (size 16)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 168)
0xffff7abfa960     0  mov x6, x0
0xffff7abfa964     4  tbnz w6, #0, #+0x5c (addr 0xffff7abfa9c0)
0xffff7abfa968     8  ldur x3, [x1, #7]
0xffff7abfa96c    12  stur x6, [x3, #143]
0xffff7abfa970    16  stur x5, [x1, #-1]
0xffff7abfa974    20  tbz w5, #0, #+0x34 (addr 0xffff7abfa9a8)
0xffff7abfa978    24  sub x2, x1, #0x1 (1)
0xffff7abfa97c    28  and x5, x5, #0xfffffffffff00000
0xffff7abfa980    32  ldr x5, [x5, #8]
0xffff7abfa984    36  tbz w5, #1, #+0x24 (addr 0xffff7abfa9a8)
0xffff7abfa988    40  and x5, x1, #0xfffffffffff00000
0xffff7abfa98c    44  ldr x5, [x5, #8]
0xffff7abfa990    48  tbz w5, #2, #+0x18 (addr 0xffff7abfa9a8)
0xffff7abfa994    52  sub csp, jssp, #0x8 (8)
0xffff7abfa998    56  str lr, [jssp, #-8]!
0xffff7abfa99c    60  ldr x16, pc+28 (addr 0x0000ffff7abfa9b8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abfa9a0    64  blr x16
0xffff7abfa9a4    68  ldr lr, [jssp], #8
0xffff7abfa9a8    72  ret
0xffff7abfa9ac    76  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abfa9b0    80  d63f03e0       constant
0xffff7abfa9b4    84  d503201f       constant
0xffff7abfa9b8    88  7ab38080       constant
0xffff7abfa9bc    92  0000ffff       constant
0xffff7abfa9c0    96  movz x16, #0x0
0xffff7abfa9c4   100  sub csp, jssp, #0x10 (16)
0xffff7abfa9c8   104  stp fp, lr, [jssp, #-16]!
0xffff7abfa9cc   108  bl #+0x4 (addr 0xffff7abfa9d0)
0xffff7abfa9d0   112  movz x17, #0xa00000000
0xffff7abfa9d4   116  sub csp, jssp, #0x10 (16)
0xffff7abfa9d8   120  stp x17, cp, [jssp, #-16]!
0xffff7abfa9dc   124  add fp, jssp, #0x10 (16)
0xffff7abfa9e0   128  ldr x17, pc+24 (addr 0x0000ffff7abfa9f8)    ;; lazy deoptimization bailout 0
0xffff7abfa9e4   132  add x17, x17, x16
0xffff7abfa9e8   136  br x17
0xffff7abfa9ec   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abfa9f0   144  d63f03e0       constant
0xffff7abfa9f4   148  d503201f       constant
0xffff7abfa9f8   152  7a906000       constant
0xffff7abfa9fc   156  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abfa99c  code target (STUB)  (0xffff7ab38080)
0xffff7abfa9ac  constant pool (size 20)
0xffff7abfa9e0  runtime entry
0xffff7abfa9ec  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 168)
0xffff7abfa960     0  mov x6, x0
0xffff7abfa964     4  tbnz w6, #0, #+0x5c (addr 0xffff7abfa9c0)
0xffff7abfa968     8  ldur x3, [x1, #7]
0xffff7abfa96c    12  stur x6, [x3, #143]
0xffff7abfa970    16  stur x5, [x1, #-1]
0xffff7abfa974    20  tbz w5, #0, #+0x34 (addr 0xffff7abfa9a8)
0xffff7abfa978    24  sub x2, x1, #0x1 (1)
0xffff7abfa97c    28  and x5, x5, #0xfffffffffff00000
0xffff7abfa980    32  ldr x5, [x5, #8]
0xffff7abfa984    36  tbz w5, #1, #+0x24 (addr 0xffff7abfa9a8)
0xffff7abfa988    40  and x5, x1, #0xfffffffffff00000
0xffff7abfa98c    44  ldr x5, [x5, #8]
0xffff7abfa990    48  tbz w5, #2, #+0x18 (addr 0xffff7abfa9a8)
0xffff7abfa994    52  sub csp, jssp, #0x8 (8)
0xffff7abfa998    56  str lr, [jssp, #-8]!
0xffff7abfa99c    60  ldr x16, pc+28 (addr 0x0000ffff7abfa9b8)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abfa9a0    64  blr x16
0xffff7abfa9a4    68  ldr lr, [jssp], #8
0xffff7abfa9a8    72  ret
0xffff7abfa9ac    76  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abfa9b0    80  d63f03e0       constant
0xffff7abfa9b4    84  d503201f       constant
0xffff7abfa9b8    88  7ab38080       constant
0xffff7abfa9bc    92  0000ffff       constant
0xffff7abfa9c0    96  movz x16, #0x0
0xffff7abfa9c4   100  sub csp, jssp, #0x10 (16)
0xffff7abfa9c8   104  stp fp, lr, [jssp, #-16]!
0xffff7abfa9cc   108  bl #+0x4 (addr 0xffff7abfa9d0)
0xffff7abfa9d0   112  movz x17, #0xa00000000
0xffff7abfa9d4   116  sub csp, jssp, #0x10 (16)
0xffff7abfa9d8   120  stp x17, cp, [jssp, #-16]!
0xffff7abfa9dc   124  add fp, jssp, #0x10 (16)
0xffff7abfa9e0   128  ldr x17, pc+24 (addr 0x0000ffff7abfa9f8)    ;; lazy deoptimization bailout 0
0xffff7abfa9e4   132  add x17, x17, x16
0xffff7abfa9e8   136  br x17
0xffff7abfa9ec   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abfa9f0   144  d63f03e0       constant
0xffff7abfa9f4   148  d503201f       constant
0xffff7abfa9f8   152  7a906000       constant
0xffff7abfa9fc   156  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0xffff7abfa99c  code target (STUB)  (0xffff7ab38080)
0xffff7abfa9ac  constant pool (size 20)
0xffff7abfa9e0  runtime entry
0xffff7abfa9ec  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = fd
compiler = unknown
Instructions (size = 152)
0xffff7abfaa80     0  sub csp, jssp, #0x8 (8)
0xffff7abfaa84     4  str x3, [jssp, #-8]!
0xffff7abfaa88     8  sub csp, jssp, #0x8 (8)
0xffff7abfaa8c    12  str x4, [jssp, #-8]!
0xffff7abfaa90    16  ldr x3, pc+88 (addr 0x0000ffff7abfaae8)    ;; object: 0x5d4e9049 Cell for 0
0xffff7abfaa94    20  ldur x3, [x3, #7]
0xffff7abfaa98    24  cmp x3, #0x0 (0)
0xffff7abfaa9c    28  b.ne #+0x2c (addr 0xffff7abfaac8)
0xffff7abfaaa0    32  ldr x5, pc+80 (addr 0x0000ffff7abfaaf0)    ;; object: 0x5d4eb401 WeakCell for 0x4ec410e1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfaaa4    36  ldur x5, [x5, #7]
0xffff7abfaaa8    40  tbz w5, #0, #+0x20 (addr 0xffff7abfaac8)
0xffff7abfaaac    44  ldursw x4, [x5, #15]
0xffff7abfaab0    48  tbnz w4, #23, #+0x18 (addr 0xffff7abfaac8)
0xffff7abfaab4    52  ldr x4, [jssp], #8
0xffff7abfaab8    56  ldr x3, [jssp], #8
0xffff7abfaabc    60  ldr x2, pc+60 (addr 0x0000ffff7abfaaf8)    ;; object: 0x20db2709 <String[2]: fd>
0xffff7abfaac0    64  ldr x16, pc+64 (addr 0x0000ffff7abfab00)    ;; code: HANDLER, StoreTransitionStub, minor: 172050
0xffff7abfaac4    68  br x16
0xffff7abfaac8    72  ldr x2, pc+64 (addr 0x0000ffff7abfab08)    ;; object: 0x20db2709 <String[2]: fd>
0xffff7abfaacc    76  ldr x4, [jssp], #8
0xffff7abfaad0    80  ldr x3, [jssp], #8
0xffff7abfaad4    84  ldr x16, pc+60 (addr 0x0000ffff7abfab10)    ;; code: BUILTIN
0xffff7abfaad8    88  br x16
0xffff7abfaadc    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0xffff7abfaae0    96  d63f03e0       constant
0xffff7abfaae4   100  d503201f       constant
0xffff7abfaae8   104  5d4e9049       constant
0xffff7abfaaec   108  00000000       constant
0xffff7abfaaf0   112  5d4eb401       constant
0xffff7abfaaf4   116  00000000       constant
0xffff7abfaaf8   120  20db2709       constant
0xffff7abfaafc   124  00000000       constant
0xffff7abfab00   128  7abfa960       constant
0xffff7abfab04   132  0000ffff       constant
0xffff7abfab08   136  20db2709       constant
0xffff7abfab0c   140  00000000       constant
0xffff7abfab10   144  7ab22420       constant
0xffff7abfab14   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abfaa90  embedded object  (0x5d4e9049 Cell for 0)
0xffff7abfaaa0  embedded object  (0x5d4eb401 WeakCell for 0x4ec410e1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfaabc  embedded object  (0x20db2709 <String[2]: fd>)
0xffff7abfaac0  code target (HANDLER)  (0xffff7abfa960)
0xffff7abfaac8  embedded object  (0x20db2709 <String[2]: fd>)
0xffff7abfaad4  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abfaadc  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7abfab80     0  tbz w0, #0, #+0x98 (addr 0xffff7abfac18)
0xffff7abfab84     4  mov x2, x0
0xffff7abfab88     8  ldur x4, [x1, #7]
0xffff7abfab8c    12  stur x2, [x4, #151]
0xffff7abfab90    16  add x3, x4, #0x97 (151)
0xffff7abfab94    20  and x2, x2, #0xfffffffffff00000
0xffff7abfab98    24  ldr x2, [x2, #8]
0xffff7abfab9c    28  tbz w2, #1, #+0x24 (addr 0xffff7abfabc0)
0xffff7abfaba0    32  and x2, x4, #0xfffffffffff00000
0xffff7abfaba4    36  ldr x2, [x2, #8]
0xffff7abfaba8    40  tbz w2, #2, #+0x18 (addr 0xffff7abfabc0)
0xffff7abfabac    44  sub csp, jssp, #0x8 (8)
0xffff7abfabb0    48  str lr, [jssp, #-8]!
0xffff7abfabb4    52  ldr x16, pc+84 (addr 0x0000ffff7abfac08)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abfabb8    56  blr x16
0xffff7abfabbc    60  ldr lr, [jssp], #8
0xffff7abfabc0    64  stur x5, [x1, #-1]
0xffff7abfabc4    68  tbz w5, #0, #+0x34 (addr 0xffff7abfabf8)
0xffff7abfabc8    72  sub x2, x1, #0x1 (1)
0xffff7abfabcc    76  and x5, x5, #0xfffffffffff00000
0xffff7abfabd0    80  ldr x5, [x5, #8]
0xffff7abfabd4    84  tbz w5, #1, #+0x24 (addr 0xffff7abfabf8)
0xffff7abfabd8    88  and x5, x1, #0xfffffffffff00000
0xffff7abfabdc    92  ldr x5, [x5, #8]
0xffff7abfabe0    96  tbz w5, #2, #+0x18 (addr 0xffff7abfabf8)
0xffff7abfabe4   100  sub csp, jssp, #0x8 (8)
0xffff7abfabe8   104  str lr, [jssp, #-8]!
0xffff7abfabec   108  ldr x16, pc+36 (addr 0x0000ffff7abfac10)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abfabf0   112  blr x16
0xffff7abfabf4   116  ldr lr, [jssp], #8
0xffff7abfabf8   120  ret
0xffff7abfabfc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abfac00   128  d63f03e0       constant
0xffff7abfac04   132  d503201f       constant
0xffff7abfac08   136  7ab378a0       constant
0xffff7abfac0c   140  0000ffff       constant
0xffff7abfac10   144  7ab38080       constant
0xffff7abfac14   148  0000ffff       constant
0xffff7abfac18   152  movz x16, #0x0
0xffff7abfac1c   156  sub csp, jssp, #0x10 (16)
0xffff7abfac20   160  stp fp, lr, [jssp, #-16]!
0xffff7abfac24   164  bl #+0x4 (addr 0xffff7abfac28)
0xffff7abfac28   168  movz x17, #0xa00000000
0xffff7abfac2c   172  sub csp, jssp, #0x10 (16)
0xffff7abfac30   176  stp x17, cp, [jssp, #-16]!
0xffff7abfac34   180  add fp, jssp, #0x10 (16)
0xffff7abfac38   184  ldr x17, pc+24 (addr 0x0000ffff7abfac50)    ;; lazy deoptimization bailout 0
0xffff7abfac3c   188  add x17, x17, x16
0xffff7abfac40   192  br x17
0xffff7abfac44   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abfac48   200  d63f03e0       constant
0xffff7abfac4c   204  d503201f       constant
0xffff7abfac50   208  7a906000       constant
0xffff7abfac54   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abfabb4  code target (STUB)  (0xffff7ab378a0)
0xffff7abfabec  code target (STUB)  (0xffff7ab38080)
0xffff7abfabfc  constant pool (size 28)
0xffff7abfac38  runtime entry
0xffff7abfac44  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0xffff7abfab80     0  tbz w0, #0, #+0x98 (addr 0xffff7abfac18)
0xffff7abfab84     4  mov x2, x0
0xffff7abfab88     8  ldur x4, [x1, #7]
0xffff7abfab8c    12  stur x2, [x4, #151]
0xffff7abfab90    16  add x3, x4, #0x97 (151)
0xffff7abfab94    20  and x2, x2, #0xfffffffffff00000
0xffff7abfab98    24  ldr x2, [x2, #8]
0xffff7abfab9c    28  tbz w2, #1, #+0x24 (addr 0xffff7abfabc0)
0xffff7abfaba0    32  and x2, x4, #0xfffffffffff00000
0xffff7abfaba4    36  ldr x2, [x2, #8]
0xffff7abfaba8    40  tbz w2, #2, #+0x18 (addr 0xffff7abfabc0)
0xffff7abfabac    44  sub csp, jssp, #0x8 (8)
0xffff7abfabb0    48  str lr, [jssp, #-8]!
0xffff7abfabb4    52  ldr x16, pc+84 (addr 0x0000ffff7abfac08)    ;; code: STUB, RecordWriteStub, minor: 68676
0xffff7abfabb8    56  blr x16
0xffff7abfabbc    60  ldr lr, [jssp], #8
0xffff7abfabc0    64  stur x5, [x1, #-1]
0xffff7abfabc4    68  tbz w5, #0, #+0x34 (addr 0xffff7abfabf8)
0xffff7abfabc8    72  sub x2, x1, #0x1 (1)
0xffff7abfabcc    76  and x5, x5, #0xfffffffffff00000
0xffff7abfabd0    80  ldr x5, [x5, #8]
0xffff7abfabd4    84  tbz w5, #1, #+0x24 (addr 0xffff7abfabf8)
0xffff7abfabd8    88  and x5, x1, #0xfffffffffff00000
0xffff7abfabdc    92  ldr x5, [x5, #8]
0xffff7abfabe0    96  tbz w5, #2, #+0x18 (addr 0xffff7abfabf8)
0xffff7abfabe4   100  sub csp, jssp, #0x8 (8)
0xffff7abfabe8   104  str lr, [jssp, #-8]!
0xffff7abfabec   108  ldr x16, pc+36 (addr 0x0000ffff7abfac10)    ;; code: STUB, RecordWriteStub, minor: 67745
0xffff7abfabf0   112  blr x16
0xffff7abfabf4   116  ldr lr, [jssp], #8
0xffff7abfabf8   120  ret
0xffff7abfabfc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7abfac00   128  d63f03e0       constant
0xffff7abfac04   132  d503201f       constant
0xffff7abfac08   136  7ab378a0       constant
0xffff7abfac0c   140  0000ffff       constant
0xffff7abfac10   144  7ab38080       constant
0xffff7abfac14   148  0000ffff       constant
0xffff7abfac18   152  movz x16, #0x0
0xffff7abfac1c   156  sub csp, jssp, #0x10 (16)
0xffff7abfac20   160  stp fp, lr, [jssp, #-16]!
0xffff7abfac24   164  bl #+0x4 (addr 0xffff7abfac28)
0xffff7abfac28   168  movz x17, #0xa00000000
0xffff7abfac2c   172  sub csp, jssp, #0x10 (16)
0xffff7abfac30   176  stp x17, cp, [jssp, #-16]!
0xffff7abfac34   180  add fp, jssp, #0x10 (16)
0xffff7abfac38   184  ldr x17, pc+24 (addr 0x0000ffff7abfac50)    ;; lazy deoptimization bailout 0
0xffff7abfac3c   188  add x17, x17, x16
0xffff7abfac40   192  br x17
0xffff7abfac44   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abfac48   200  d63f03e0       constant
0xffff7abfac4c   204  d503201f       constant
0xffff7abfac50   208  7a906000       constant
0xffff7abfac54   212  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0xffff7abfabb4  code target (STUB)  (0xffff7ab378a0)
0xffff7abfabec  code target (STUB)  (0xffff7ab38080)
0xffff7abfabfc  constant pool (size 28)
0xffff7abfac38  runtime entry
0xffff7abfac44  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = _isStdio
compiler = unknown
Instructions (size = 152)
0xffff7abfacc0     0  sub csp, jssp, #0x8 (8)
0xffff7abfacc4     4  str x3, [jssp, #-8]!
0xffff7abfacc8     8  sub csp, jssp, #0x8 (8)
0xffff7abfaccc    12  str x4, [jssp, #-8]!
0xffff7abfacd0    16  ldr x3, pc+88 (addr 0x0000ffff7abfad28)    ;; object: 0x5d4e9049 Cell for 0
0xffff7abfacd4    20  ldur x3, [x3, #7]
0xffff7abfacd8    24  cmp x3, #0x0 (0)
0xffff7abfacdc    28  b.ne #+0x30 (addr 0xffff7abfad0c)
0xffff7abface0    32  tbz w0, #0, #+0x2c (addr 0xffff7abfad0c)
0xffff7abface4    36  ldr x5, pc+76 (addr 0x0000ffff7abfad30)    ;; object: 0x5d4eb4f1 WeakCell for 0x4ec41139 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abface8    40  ldur x5, [x5, #7]
0xffff7abfacec    44  tbz w5, #0, #+0x20 (addr 0xffff7abfad0c)
0xffff7abfacf0    48  ldursw x4, [x5, #15]
0xffff7abfacf4    52  tbnz w4, #23, #+0x18 (addr 0xffff7abfad0c)
0xffff7abfacf8    56  ldr x4, [jssp], #8
0xffff7abfacfc    60  ldr x3, [jssp], #8
0xffff7abfad00    64  ldr x2, pc+56 (addr 0x0000ffff7abfad38)    ;; object: 0x20df94b1 <String[8]: _isStdio>
0xffff7abfad04    68  ldr x16, pc+60 (addr 0x0000ffff7abfad40)    ;; code: HANDLER, StoreTransitionStub, minor: 196627
0xffff7abfad08    72  br x16
0xffff7abfad0c    76  ldr x2, pc+60 (addr 0x0000ffff7abfad48)    ;; object: 0x20df94b1 <String[8]: _isStdio>
0xffff7abfad10    80  ldr x4, [jssp], #8
0xffff7abfad14    84  ldr x3, [jssp], #8
0xffff7abfad18    88  ldr x16, pc+56 (addr 0x0000ffff7abfad50)    ;; code: BUILTIN
0xffff7abfad1c    92  br x16
0xffff7abfad20    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7abfad24   100  d63f03e0       constant
0xffff7abfad28   104  5d4e9049       constant
0xffff7abfad2c   108  00000000       constant
0xffff7abfad30   112  5d4eb4f1       constant
0xffff7abfad34   116  00000000       constant
0xffff7abfad38   120  20df94b1       constant
0xffff7abfad3c   124  00000000       constant
0xffff7abfad40   128  7abfab80       constant
0xffff7abfad44   132  0000ffff       constant
0xffff7abfad48   136  20df94b1       constant
0xffff7abfad4c   140  00000000       constant
0xffff7abfad50   144  7ab22420       constant
0xffff7abfad54   148  0000ffff       constant


RelocInfo (size = 12)
0xffff7abfacd0  embedded object  (0x5d4e9049 Cell for 0)
0xffff7abface4  embedded object  (0x5d4eb4f1 WeakCell for 0x4ec41139 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfad00  embedded object  (0x20df94b1 <String[8]: _isStdio>)
0xffff7abfad04  code target (HANDLER)  (0xffff7abfab80)
0xffff7abfad0c  embedded object  (0x20df94b1 <String[8]: _isStdio>)
0xffff7abfad18  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abfad20  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = emit
compiler = unknown
Instructions (size = 656)
0xffff7abfadc0     0  sub csp, jssp, #0x8 (8)
0xffff7abfadc4     4  str x3, [jssp, #-8]!
0xffff7abfadc8     8  sub csp, jssp, #0x8 (8)
0xffff7abfadcc    12  str x0, [jssp, #-8]!
0xffff7abfadd0    16  ldr x0, pc+560 (addr 0x0000ffff7abfb000)    ;; object: 0x20de3709 Cell for 0
0xffff7abfadd4    20  ldur x0, [x0, #7]
0xffff7abfadd8    24  cmp x0, #0x0 (0)
0xffff7abfaddc    28  b.ne #+0x1f8 (addr 0xffff7abfafd4)
0xffff7abfade0    32  ldur x4, [x1, #-1]
0xffff7abfade4    36  ldrb w0, [x4, #12]
0xffff7abfade8    40  movz x16, #0x44
0xffff7abfadec    44  tst x0, x16
0xffff7abfadf0    48  b.ne #+0x1e4 (addr 0xffff7abfafd4)
0xffff7abfadf4    52  ldrb w0, [x4, #11]
0xffff7abfadf8    56  cmp x0, #0xb1 (177)
0xffff7abfadfc    60  b.lt #+0x1d8 (addr 0xffff7abfafd4)
0xffff7abfae00    64  ldur x0, [x1, #7]
0xffff7abfae04    68  ldur x4, [x0, #-1]
0xffff7abfae08    72  ldr x16, [x26, #432]
0xffff7abfae0c    76  cmp x4, x16
0xffff7abfae10    80  b.ne #+0x1c4 (addr 0xffff7abfafd4)
0xffff7abfae14    84  ldursw x4, [x0, #35]
0xffff7abfae18    88  sub x4, x4, #0x1 (1)
0xffff7abfae1c    92  movz x16, #0x5f9f
0xffff7abfae20    96  movk x16, #0x176c, lsl #16
0xffff7abfae24   100  and x4, x4, x16
0xffff7abfae28   104  add x4, x4, x4, lsl #1
0xffff7abfae2c   108  add x4, x0, x4, lsl #3
0xffff7abfae30   112  ldur x4, [x4, #55]
0xffff7abfae34   116  ldr x16, [x26, #40]
0xffff7abfae38   120  cmp x4, x16
0xffff7abfae3c   124  b.eq #+0x188 (addr 0xffff7abfafc4)
0xffff7abfae40   128  ldr x16, pc+456 (addr 0x0000ffff7abfb008)    ;; object: 0x20dba409 <String[4]: emit>
0xffff7abfae44   132  cmp x4, x16
0xffff7abfae48   136  b.eq #+0x18c (addr 0xffff7abfafd4)
0xffff7abfae4c   140  ldr x16, [x26, #88]
0xffff7abfae50   144  cmp x4, x16
0xffff7abfae54   148  b.eq #+0x1c (addr 0xffff7abfae70)
0xffff7abfae58   152  ldur x4, [x4, #-1]
0xffff7abfae5c   156  ldrb w4, [x4, #11]
0xffff7abfae60   160  tst x4, #0xc0
0xffff7abfae64   164  movz x16, #0x80
0xffff7abfae68   168  ccmp x4, x16, #nZcv, ne
0xffff7abfae6c   172  b.ne #+0x168 (addr 0xffff7abfafd4)
0xffff7abfae70   176  ldursw x4, [x0, #35]
0xffff7abfae74   180  sub x4, x4, #0x1 (1)
0xffff7abfae78   184  movz x16, #0x5fa0
0xffff7abfae7c   188  movk x16, #0x176c, lsl #16
0xffff7abfae80   192  and x4, x4, x16
0xffff7abfae84   196  add x4, x4, x4, lsl #1
0xffff7abfae88   200  add x4, x0, x4, lsl #3
0xffff7abfae8c   204  ldur x4, [x4, #55]
0xffff7abfae90   208  ldr x16, [x26, #40]
0xffff7abfae94   212  cmp x4, x16
0xffff7abfae98   216  b.eq #+0x12c (addr 0xffff7abfafc4)
0xffff7abfae9c   220  ldr x16, pc+372 (addr 0x0000ffff7abfb010)    ;; object: 0x20dba409 <String[4]: emit>
0xffff7abfaea0   224  cmp x4, x16
0xffff7abfaea4   228  b.eq #+0x130 (addr 0xffff7abfafd4)
0xffff7abfaea8   232  ldr x16, [x26, #88]
0xffff7abfaeac   236  cmp x4, x16
0xffff7abfaeb0   240  b.eq #+0x1c (addr 0xffff7abfaecc)
0xffff7abfaeb4   244  ldur x4, [x4, #-1]
0xffff7abfaeb8   248  ldrb w4, [x4, #11]
0xffff7abfaebc   252  tst x4, #0xc0
0xffff7abfaec0   256  movz x16, #0x80
0xffff7abfaec4   260  ccmp x4, x16, #nZcv, ne
0xffff7abfaec8   264  b.ne #+0x10c (addr 0xffff7abfafd4)
0xffff7abfaecc   268  ldursw x4, [x0, #35]
0xffff7abfaed0   272  sub x4, x4, #0x1 (1)
0xffff7abfaed4   276  movz x16, #0x5fa2
0xffff7abfaed8   280  movk x16, #0x176c, lsl #16
0xffff7abfaedc   284  and x4, x4, x16
0xffff7abfaee0   288  add x4, x4, x4, lsl #1
0xffff7abfaee4   292  add x4, x0, x4, lsl #3
0xffff7abfaee8   296  ldur x4, [x4, #55]
0xffff7abfaeec   300  ldr x16, [x26, #40]
0xffff7abfaef0   304  cmp x4, x16
0xffff7abfaef4   308  b.eq #+0xd0 (addr 0xffff7abfafc4)
0xffff7abfaef8   312  ldr x16, pc+288 (addr 0x0000ffff7abfb018)    ;; object: 0x20dba409 <String[4]: emit>
0xffff7abfaefc   316  cmp x4, x16
0xffff7abfaf00   320  b.eq #+0xd4 (addr 0xffff7abfafd4)
0xffff7abfaf04   324  ldr x16, [x26, #88]
0xffff7abfaf08   328  cmp x4, x16
0xffff7abfaf0c   332  b.eq #+0x1c (addr 0xffff7abfaf28)
0xffff7abfaf10   336  ldur x4, [x4, #-1]
0xffff7abfaf14   340  ldrb w4, [x4, #11]
0xffff7abfaf18   344  tst x4, #0xc0
0xffff7abfaf1c   348  movz x16, #0x80
0xffff7abfaf20   352  ccmp x4, x16, #nZcv, ne
0xffff7abfaf24   356  b.ne #+0xb0 (addr 0xffff7abfafd4)
0xffff7abfaf28   360  ldursw x4, [x0, #35]
0xffff7abfaf2c   364  sub x4, x4, #0x1 (1)
0xffff7abfaf30   368  movz x16, #0x5fa5
0xffff7abfaf34   372  movk x16, #0x176c, lsl #16
0xffff7abfaf38   376  and x4, x4, x16
0xffff7abfaf3c   380  add x4, x4, x4, lsl #1
0xffff7abfaf40   384  add x4, x0, x4, lsl #3
0xffff7abfaf44   388  ldur x4, [x4, #55]
0xffff7abfaf48   392  ldr x16, [x26, #40]
0xffff7abfaf4c   396  cmp x4, x16
0xffff7abfaf50   400  b.eq #+0x74 (addr 0xffff7abfafc4)
0xffff7abfaf54   404  ldr x16, pc+204 (addr 0x0000ffff7abfb020)    ;; object: 0x20dba409 <String[4]: emit>
0xffff7abfaf58   408  cmp x4, x16
0xffff7abfaf5c   412  b.eq #+0x78 (addr 0xffff7abfafd4)
0xffff7abfaf60   416  ldr x16, [x26, #88]
0xffff7abfaf64   420  cmp x4, x16
0xffff7abfaf68   424  b.eq #+0x1c (addr 0xffff7abfaf84)
0xffff7abfaf6c   428  ldur x4, [x4, #-1]
0xffff7abfaf70   432  ldrb w4, [x4, #11]
0xffff7abfaf74   436  tst x4, #0xc0
0xffff7abfaf78   440  movz x16, #0x80
0xffff7abfaf7c   444  ccmp x4, x16, #nZcv, ne
0xffff7abfaf80   448  b.ne #+0x54 (addr 0xffff7abfafd4)
0xffff7abfaf84   452  sub csp, jssp, #0x38 (56)
0xffff7abfaf88   456  stp x3, x5, [jssp, #-32]!
0xffff7abfaf8c   460  stp x6, lr, [jssp, #16]
0xffff7abfaf90   464  stp x0, x1, [jssp, #-24]!
0xffff7abfaf94   468  str x2, [jssp, #16]
0xffff7abfaf98   472  ldur x0, [x1, #7]
0xffff7abfaf9c   476  ldr x1, pc+140 (addr 0x0000ffff7abfb028)    ;; object: 0x20dba409 <String[4]: emit>
0xffff7abfafa0   480  ldr x16, pc+144 (addr 0x0000ffff7abfb030)    ;; code: STUB, NameDictionaryLookupStub, minor: 1
0xffff7abfafa4   484  blr x16
0xffff7abfafa8   488  mov x4, x0
0xffff7abfafac   492  ldp x2, x3, [jssp, #16]
0xffff7abfafb0   496  ldp x0, x1, [jssp], #32
0xffff7abfafb4   500  ldr lr, [jssp, #16]
0xffff7abfafb8   504  ldp x5, x6, [jssp], #24
0xffff7abfafbc   508  cbz x4, #+0x8 (addr 0xffff7abfafc4)
0xffff7abfafc0   512  b #+0x14 (addr 0xffff7abfafd4)
0xffff7abfafc4   516  ldr x3, pc+116 (addr 0x0000ffff7abfb038)    ;; object: 0x5d4eb6f1 WeakCell for 0x5d4acc61 <an Object with map 0x4ec1bf39>
0xffff7abfafc8   520  ldur x3, [x3, #7]
0xffff7abfafcc   524  tbz w3, #0, #+0x8 (addr 0xffff7abfafd4)
0xffff7abfafd0   528  b #+0x14 (addr 0xffff7abfafe4)
0xffff7abfafd4   532  ldr x0, [jssp], #8
0xffff7abfafd8   536  ldr x3, [jssp], #8
0xffff7abfafdc   540  ldr x16, pc+100 (addr 0x0000ffff7abfb040)    ;; code: BUILTIN
0xffff7abfafe0   544  br x16
0xffff7abfafe4   548  add jssp, jssp, #0x10 (16)
0xffff7abfafe8   552  mov x1, x3
0xffff7abfafec   556  ldr x16, pc+92 (addr 0x0000ffff7abfb048)    ;; code: HANDLER, LoadConstantStub, minor: 6
0xffff7abfaff0   560  br x16
0xffff7abfaff4   564  580002df       constant pool begin (num_const = 22)    ;; constant pool
0xffff7abfaff8   568  d63f03e0       constant
0xffff7abfaffc   572  d503201f       constant
0xffff7abfb000   576  20de3709       constant
0xffff7abfb004   580  00000000       constant
0xffff7abfb008   584  20dba409       constant
0xffff7abfb00c   588  00000000       constant
0xffff7abfb010   592  20dba409       constant
0xffff7abfb014   596  00000000       constant
0xffff7abfb018   600  20dba409       constant
0xffff7abfb01c   604  00000000       constant
0xffff7abfb020   608  20dba409       constant
0xffff7abfb024   612  00000000       constant
0xffff7abfb028   616  20dba409       constant
0xffff7abfb02c   620  00000000       constant
0xffff7abfb030   624  7ab8b120       constant
0xffff7abfb034   628  0000ffff       constant
0xffff7abfb038   632  5d4eb6f1       constant
0xffff7abfb03c   636  00000000       constant
0xffff7abfb040   640  7ab222e0       constant
0xffff7abfb044   644  0000ffff       constant
0xffff7abfb048   648  7ab8b020       constant
0xffff7abfb04c   652  0000ffff       constant


RelocInfo (size = 26)
0xffff7abfadd0  embedded object  (0x20de3709 Cell for 0)
0xffff7abfae40  embedded object  (0x20dba409 <String[4]: emit>)
0xffff7abfae9c  embedded object  (0x20dba409 <String[4]: emit>)
0xffff7abfaef8  embedded object  (0x20dba409 <String[4]: emit>)
0xffff7abfaf54  embedded object  (0x20dba409 <String[4]: emit>)
0xffff7abfaf9c  embedded object  (0x20dba409 <String[4]: emit>)
0xffff7abfafa0  code target (STUB)  (0xffff7ab8b120)
0xffff7abfafc4  embedded object  (0x5d4eb6f1 WeakCell for 0x5d4acc61 <an Object with map 0x4ec1bf39>)
0xffff7abfafdc  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abfafec  code target (HANDLER)  (0xffff7ab8b020)
0xffff7abfaff4  constant pool (size 92)

kind = HANDLER
major_key = <NoCache>Stub
compiler = unknown
Instructions (size = 96)
0xffff7abfb0c0     0  sub csp, jssp, #0x8 (8)
0xffff7abfb0c4     4  str x3, [jssp, #-8]!
0xffff7abfb0c8     8  sub csp, jssp, #0x8 (8)
0xffff7abfb0cc    12  str x0, [jssp, #-8]!
0xffff7abfb0d0    16  ldr x0, pc+56 (addr 0x0000ffff7abfb108)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7abfb0d4    20  ldur x0, [x0, #7]
0xffff7abfb0d8    24  cmp x0, #0x0 (0)
0xffff7abfb0dc    28  b.ne #+0x14 (addr 0xffff7abfb0f0)
0xffff7abfb0e0    32  add jssp, jssp, #0x10 (16)
0xffff7abfb0e4    36  ldr x0, pc+44 (addr 0x0000ffff7abfb110)    ;; object: 0x20d04241 <undefined>
0xffff7abfb0e8    40  ret
0xffff7abfb0ec    44  b #+0x14 (addr 0xffff7abfb100)
0xffff7abfb0f0    48  ldr x0, [jssp], #8
0xffff7abfb0f4    52  ldr x3, [jssp], #8
0xffff7abfb0f8    56  ldr x16, pc+32 (addr 0x0000ffff7abfb118)    ;; code: BUILTIN
0xffff7abfb0fc    60  br x16
0xffff7abfb100    64  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7abfb104    68  d63f03e0       constant
0xffff7abfb108    72  20d5b0f1       constant
0xffff7abfb10c    76  00000000       constant
0xffff7abfb110    80  20d04241       constant
0xffff7abfb114    84  00000000       constant
0xffff7abfb118    88  7ab222e0       constant
0xffff7abfb11c    92  0000ffff       constant


RelocInfo (size = 9)
0xffff7abfb0d0  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7abfb0e4  embedded object  (0x20d04241 <undefined>)
0xffff7abfb0f8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abfb100  constant pool (size 32)

kind = HANDLER
major_key = <NoCache>Stub
name = SIGWINCH
compiler = unknown
Instructions (size = 144)
0xffff7abfb180     0  sub csp, jssp, #0x8 (8)
0xffff7abfb184     4  str x3, [jssp, #-8]!
0xffff7abfb188     8  sub csp, jssp, #0x8 (8)
0xffff7abfb18c    12  str x4, [jssp, #-8]!
0xffff7abfb190    16  ldr x5, pc+88 (addr 0x0000ffff7abfb1e8)    ;; object: 0x5d4ec799 WeakCell for 0x4ec41a81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfb194    20  ldur x5, [x5, #7]
0xffff7abfb198    24  tbz w5, #0, #+0x30 (addr 0xffff7abfb1c8)
0xffff7abfb19c    28  ldursw x4, [x5, #15]
0xffff7abfb1a0    32  tbnz w4, #23, #+0x28 (addr 0xffff7abfb1c8)
0xffff7abfb1a4    36  ldur x4, [x5, #47]
0xffff7abfb1a8    40  ldur x4, [x4, #119]
0xffff7abfb1ac    44  cmp x0, x4
0xffff7abfb1b0    48  b.ne #+0x18 (addr 0xffff7abfb1c8)
0xffff7abfb1b4    52  ldr x4, [jssp], #8
0xffff7abfb1b8    56  ldr x3, [jssp], #8
0xffff7abfb1bc    60  ldr x2, pc+52 (addr 0x0000ffff7abfb1f0)    ;; object: 0x20df9081 <String[8]: SIGWINCH>
0xffff7abfb1c0    64  ldr x16, pc+56 (addr 0x0000ffff7abfb1f8)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0xffff7abfb1c4    68  br x16
0xffff7abfb1c8    72  ldr x2, pc+56 (addr 0x0000ffff7abfb200)    ;; object: 0x20df9081 <String[8]: SIGWINCH>
0xffff7abfb1cc    76  ldr x4, [jssp], #8
0xffff7abfb1d0    80  ldr x3, [jssp], #8
0xffff7abfb1d4    84  ldr x16, pc+52 (addr 0x0000ffff7abfb208)    ;; code: BUILTIN
0xffff7abfb1d8    88  br x16
0xffff7abfb1dc    92  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0xffff7abfb1e0    96  d63f03e0       constant
0xffff7abfb1e4   100  d503201f       constant
0xffff7abfb1e8   104  5d4ec799       constant
0xffff7abfb1ec   108  00000000       constant
0xffff7abfb1f0   112  20df9081       constant
0xffff7abfb1f4   116  00000000       constant
0xffff7abfb1f8   120  7ab3cea0       constant
0xffff7abfb1fc   124  0000ffff       constant
0xffff7abfb200   128  20df9081       constant
0xffff7abfb204   132  00000000       constant
0xffff7abfb208   136  7ab22420       constant
0xffff7abfb20c   140  0000ffff       constant


RelocInfo (size = 11)
0xffff7abfb190  embedded object  (0x5d4ec799 WeakCell for 0x4ec41a81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfb1bc  embedded object  (0x20df9081 <String[8]: SIGWINCH>)
0xffff7abfb1c0  code target (HANDLER)  (0xffff7ab3cea0)
0xffff7abfb1c8  embedded object  (0x20df9081 <String[8]: SIGWINCH>)
0xffff7abfb1d4  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abfb1dc  constant pool (size 52)

--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastCloneShallowObjectStub
compiler = crankshaft
Instructions (size = 485)
0xffff7abfb280     0  ldur x4, [x3, #47]
0xffff7abfb284     4  tbnz w2, #0, #+0xa8 (addr 0xffff7abfb32c)
0xffff7abfb288     8  asr x6, x2, #32
0xffff7abfb28c    12  add x5, x4, #0x17 (23)
0xffff7abfb290    16  ldr x7, [x5, w6, sxtw #3]
0xffff7abfb294    20  ldr x4, pc+332 (addr 0x0000ffff7abfb3e0)    ;; object: 0x20d04241 <undefined>
0xffff7abfb298    24  cmp x7, x4
0xffff7abfb29c    28  b.eq #+0x8c (addr 0xffff7abfb328)
0xffff7abfb2a0    32  ldur x4, [x7, #7]
0xffff7abfb2a4    36  ldur x5, [x4, #-1]
0xffff7abfb2a8    40  ldrb w6, [x5, #7]
0xffff7abfb2ac    44  cmp w6, #0x6 (6)
0xffff7abfb2b0    48  b.ne #+0x78 (addr 0xffff7abfb328)
0xffff7abfb2b4    52  movz x1, #0xe2c0
0xffff7abfb2b8    56  movk x1, #0x9ab, lsl #16
0xffff7abfb2bc    60  ldp x2, x0, [x1]
0xffff7abfb2c0    64  adds x16, x2, #0x40 (64)
0xffff7abfb2c4    68  ccmp x16, x0, #nzCv, lo
0xffff7abfb2c8    72  b.hi #+0xac (addr 0xffff7abfb374)
0xffff7abfb2cc    76  str x16, [x1]
0xffff7abfb2d0    80  orr x2, x2, #0x1
0xffff7abfb2d4    84  stur x5, [x2, #-1]
0xffff7abfb2d8    88  ldur x0, [x4, #7]
0xffff7abfb2dc    92  stur x0, [x2, #7]
0xffff7abfb2e0    96  ldur x0, [x4, #15]
0xffff7abfb2e4   100  stur x0, [x2, #15]
0xffff7abfb2e8   104  ldur x0, [x4, #23]
0xffff7abfb2ec   108  stur x0, [x2, #23]
0xffff7abfb2f0   112  ldur x0, [x4, #31]
0xffff7abfb2f4   116  stur x0, [x2, #31]
0xffff7abfb2f8   120  ldur x0, [x4, #39]
0xffff7abfb2fc   124  stur x0, [x2, #39]
0xffff7abfb300   128  add x0, x2, #0x30 (48)
0xffff7abfb304   132  ldr x1, pc+228 (addr 0x0000ffff7abfb3e8)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfb308   136  stur x1, [x0, #-1]
0xffff7abfb30c   140  stur x7, [x0, #7]
0xffff7abfb310   144  ldur w0, [x7, #35]
0xffff7abfb314   148  add w0, w0, #0x1 (1)
0xffff7abfb318   152  lsl x0, x0, #32
0xffff7abfb31c   156  stur x0, [x7, #31]
0xffff7abfb320   160  mov x0, x2
0xffff7abfb324   164  ret
0xffff7abfb328   168  b #+0xe0 (addr 0xffff7abfb408)
0xffff7abfb32c   172  sub csp, jssp, #0x10 (16)
0xffff7abfb330   176  stp fp, lr, [jssp, #-16]!
0xffff7abfb334   180  movz fp, #0xa00000000
0xffff7abfb338   184  sub csp, jssp, #0x8 (8)
0xffff7abfb33c   188  str fp, [jssp, #-8]!
0xffff7abfb340   192  add fp, jssp, #0x8 (8)
0xffff7abfb344   196  ldur x16, [x2, #-1]
0xffff7abfb348   200  ldr x17, [x26, #120]
0xffff7abfb34c   204  cmp x16, x17
0xffff7abfb350   208  b.ne #+0xc8 (addr 0xffff7abfb418)
0xffff7abfb354   212  ldur d29, [x2, #7]
0xffff7abfb358   216  fcvtzs w6, d29
0xffff7abfb35c   220  scvtf d0, w6
0xffff7abfb360   224  fcmp d29, d0
0xffff7abfb364   228  b.ne #+0xb4 (addr 0xffff7abfb418)
0xffff7abfb368   232  ldr lr, [jssp, #16]
0xffff7abfb36c   236  ldp xzr, fp, [jssp], #24
0xffff7abfb370   240  b #-0xe4 (addr 0xffff7abfb28c)
0xffff7abfb374   244  sub csp, jssp, #0x10 (16)
0xffff7abfb378   248  stp fp, lr, [jssp, #-16]!
0xffff7abfb37c   252  movz fp, #0xa00000000
0xffff7abfb380   256  sub csp, jssp, #0x8 (8)
0xffff7abfb384   260  str fp, [jssp, #-8]!
0xffff7abfb388   264  add fp, jssp, #0x8 (8)
0xffff7abfb38c   268  movz x2, #0x0
0xffff7abfb390   272  mov x16, lr
0xffff7abfb394   276  ldr x17, pc+92 (addr 0x0000ffff7abfb3f0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abfb398   280  blr x17
0xffff7abfb39c   284  movz x0, #0x4000000000
0xffff7abfb3a0   288  movz x10, #0x0
0xffff7abfb3a4   292  sub csp, jssp, #0x10 (16)
0xffff7abfb3a8   296  stp x10, x0, [jssp, #-16]!
0xffff7abfb3ac   300  movz x0, #0x2
0xffff7abfb3b0   304  movz x1, #0x5b88
0xffff7abfb3b4   308  movk x1, #0xe2, lsl #16
0xffff7abfb3b8   312  ldr x16, pc+64 (addr 0x0000ffff7abfb3f8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abfb3bc   316  blr x16
0xffff7abfb3c0   320  str x0, [jssp, #16]
0xffff7abfb3c4   324  ldr x16, pc+60 (addr 0x0000ffff7abfb400)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abfb3c8   328  blr x16
0xffff7abfb3cc   332  ldr lr, [jssp, #16]
0xffff7abfb3d0   336  ldp xzr, fp, [jssp], #24
0xffff7abfb3d4   340  b #-0x100 (addr 0xffff7abfb2d4)
0xffff7abfb3d8   344  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0xffff7abfb3dc   348  d63f03e0       constant
0xffff7abfb3e0   352  20d04241       constant
0xffff7abfb3e4   356  00000000       constant
0xffff7abfb3e8   360  4ec05d81       constant
0xffff7abfb3ec   364  00000000       constant
0xffff7abfb3f0   368  7ab06820       constant
0xffff7abfb3f4   372  0000ffff       constant
0xffff7abfb3f8   376  7ab06260       constant
0xffff7abfb3fc   380  0000ffff       constant
0xffff7abfb400   384  7ab068e0       constant
0xffff7abfb404   388  0000ffff       constant
0xffff7abfb408   392  movz x16, #0x0
0xffff7abfb40c   396  sub csp, jssp, #0x10 (16)
0xffff7abfb410   400  stp fp, lr, [jssp, #-16]!
0xffff7abfb414   404  bl #+0xc (addr 0xffff7abfb420)
0xffff7abfb418   408  movz x16, #0x8
0xffff7abfb41c   412  bl #+0x14 (addr 0xffff7abfb430)
0xffff7abfb420   416  movz x17, #0xa00000000
0xffff7abfb424   420  sub csp, jssp, #0x10 (16)
0xffff7abfb428   424  stp x17, cp, [jssp, #-16]!
0xffff7abfb42c   428  add fp, jssp, #0x10 (16)
0xffff7abfb430   432  ldr x17, pc+24 (addr 0x0000ffff7abfb448)    ;; lazy deoptimization bailout 0
0xffff7abfb434   436  add x17, x17, x16
0xffff7abfb438   440  br x17
0xffff7abfb43c   444  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abfb440   448  d63f03e0       constant
0xffff7abfb444   452  d503201f       constant
0xffff7abfb448   456  7a906000       constant
0xffff7abfb44c   460  0000ffff       constant


Safepoints (size = 21)
0xffff7abfb3c0   320  000 | x2 | x4 | x5 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 25)
0xffff7abfb294  embedded object  (0x20d04241 <undefined>)
0xffff7abfb304  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfb394  code target (STUB)  (0xffff7ab06820)
0xffff7abfb3b8  code target (STUB)  (0xffff7ab06260)
0xffff7abfb3c4  code target (STUB)  (0xffff7ab068e0)
0xffff7abfb3d8  constant pool (size 48)
0xffff7abfb430  runtime entry
0xffff7abfb43c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = FastCloneShallowObjectStub
name = FastCloneShallowObjectStub
compiler = crankshaft
Instructions (size = 485)
0xffff7abfb280     0  ldur x4, [x3, #47]
0xffff7abfb284     4  tbnz w2, #0, #+0xa8 (addr 0xffff7abfb32c)
0xffff7abfb288     8  asr x6, x2, #32
0xffff7abfb28c    12  add x5, x4, #0x17 (23)
0xffff7abfb290    16  ldr x7, [x5, w6, sxtw #3]
0xffff7abfb294    20  ldr x4, pc+332 (addr 0x0000ffff7abfb3e0)    ;; object: 0x20d04241 <undefined>
0xffff7abfb298    24  cmp x7, x4
0xffff7abfb29c    28  b.eq #+0x8c (addr 0xffff7abfb328)
0xffff7abfb2a0    32  ldur x4, [x7, #7]
0xffff7abfb2a4    36  ldur x5, [x4, #-1]
0xffff7abfb2a8    40  ldrb w6, [x5, #7]
0xffff7abfb2ac    44  cmp w6, #0x6 (6)
0xffff7abfb2b0    48  b.ne #+0x78 (addr 0xffff7abfb328)
0xffff7abfb2b4    52  movz x1, #0xe2c0
0xffff7abfb2b8    56  movk x1, #0x9ab, lsl #16
0xffff7abfb2bc    60  ldp x2, x0, [x1]
0xffff7abfb2c0    64  adds x16, x2, #0x40 (64)
0xffff7abfb2c4    68  ccmp x16, x0, #nzCv, lo
0xffff7abfb2c8    72  b.hi #+0xac (addr 0xffff7abfb374)
0xffff7abfb2cc    76  str x16, [x1]
0xffff7abfb2d0    80  orr x2, x2, #0x1
0xffff7abfb2d4    84  stur x5, [x2, #-1]
0xffff7abfb2d8    88  ldur x0, [x4, #7]
0xffff7abfb2dc    92  stur x0, [x2, #7]
0xffff7abfb2e0    96  ldur x0, [x4, #15]
0xffff7abfb2e4   100  stur x0, [x2, #15]
0xffff7abfb2e8   104  ldur x0, [x4, #23]
0xffff7abfb2ec   108  stur x0, [x2, #23]
0xffff7abfb2f0   112  ldur x0, [x4, #31]
0xffff7abfb2f4   116  stur x0, [x2, #31]
0xffff7abfb2f8   120  ldur x0, [x4, #39]
0xffff7abfb2fc   124  stur x0, [x2, #39]
0xffff7abfb300   128  add x0, x2, #0x30 (48)
0xffff7abfb304   132  ldr x1, pc+228 (addr 0x0000ffff7abfb3e8)    ;; object: 0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfb308   136  stur x1, [x0, #-1]
0xffff7abfb30c   140  stur x7, [x0, #7]
0xffff7abfb310   144  ldur w0, [x7, #35]
0xffff7abfb314   148  add w0, w0, #0x1 (1)
0xffff7abfb318   152  lsl x0, x0, #32
0xffff7abfb31c   156  stur x0, [x7, #31]
0xffff7abfb320   160  mov x0, x2
0xffff7abfb324   164  ret
0xffff7abfb328   168  b #+0xe0 (addr 0xffff7abfb408)
0xffff7abfb32c   172  sub csp, jssp, #0x10 (16)
0xffff7abfb330   176  stp fp, lr, [jssp, #-16]!
0xffff7abfb334   180  movz fp, #0xa00000000
0xffff7abfb338   184  sub csp, jssp, #0x8 (8)
0xffff7abfb33c   188  str fp, [jssp, #-8]!
0xffff7abfb340   192  add fp, jssp, #0x8 (8)
0xffff7abfb344   196  ldur x16, [x2, #-1]
0xffff7abfb348   200  ldr x17, [x26, #120]
0xffff7abfb34c   204  cmp x16, x17
0xffff7abfb350   208  b.ne #+0xc8 (addr 0xffff7abfb418)
0xffff7abfb354   212  ldur d29, [x2, #7]
0xffff7abfb358   216  fcvtzs w6, d29
0xffff7abfb35c   220  scvtf d0, w6
0xffff7abfb360   224  fcmp d29, d0
0xffff7abfb364   228  b.ne #+0xb4 (addr 0xffff7abfb418)
0xffff7abfb368   232  ldr lr, [jssp, #16]
0xffff7abfb36c   236  ldp xzr, fp, [jssp], #24
0xffff7abfb370   240  b #-0xe4 (addr 0xffff7abfb28c)
0xffff7abfb374   244  sub csp, jssp, #0x10 (16)
0xffff7abfb378   248  stp fp, lr, [jssp, #-16]!
0xffff7abfb37c   252  movz fp, #0xa00000000
0xffff7abfb380   256  sub csp, jssp, #0x8 (8)
0xffff7abfb384   260  str fp, [jssp, #-8]!
0xffff7abfb388   264  add fp, jssp, #0x8 (8)
0xffff7abfb38c   268  movz x2, #0x0
0xffff7abfb390   272  mov x16, lr
0xffff7abfb394   276  ldr x17, pc+92 (addr 0x0000ffff7abfb3f0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7abfb398   280  blr x17
0xffff7abfb39c   284  movz x0, #0x4000000000
0xffff7abfb3a0   288  movz x10, #0x0
0xffff7abfb3a4   292  sub csp, jssp, #0x10 (16)
0xffff7abfb3a8   296  stp x10, x0, [jssp, #-16]!
0xffff7abfb3ac   300  movz x0, #0x2
0xffff7abfb3b0   304  movz x1, #0x5b88
0xffff7abfb3b4   308  movk x1, #0xe2, lsl #16
0xffff7abfb3b8   312  ldr x16, pc+64 (addr 0x0000ffff7abfb3f8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7abfb3bc   316  blr x16
0xffff7abfb3c0   320  str x0, [jssp, #16]
0xffff7abfb3c4   324  ldr x16, pc+60 (addr 0x0000ffff7abfb400)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7abfb3c8   328  blr x16
0xffff7abfb3cc   332  ldr lr, [jssp, #16]
0xffff7abfb3d0   336  ldp xzr, fp, [jssp], #24
0xffff7abfb3d4   340  b #-0x100 (addr 0xffff7abfb2d4)
0xffff7abfb3d8   344  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0xffff7abfb3dc   348  d63f03e0       constant
0xffff7abfb3e0   352  20d04241       constant
0xffff7abfb3e4   356  00000000       constant
0xffff7abfb3e8   360  4ec05d81       constant
0xffff7abfb3ec   364  00000000       constant
0xffff7abfb3f0   368  7ab06820       constant
0xffff7abfb3f4   372  0000ffff       constant
0xffff7abfb3f8   376  7ab06260       constant
0xffff7abfb3fc   380  0000ffff       constant
0xffff7abfb400   384  7ab068e0       constant
0xffff7abfb404   388  0000ffff       constant
0xffff7abfb408   392  movz x16, #0x0
0xffff7abfb40c   396  sub csp, jssp, #0x10 (16)
0xffff7abfb410   400  stp fp, lr, [jssp, #-16]!
0xffff7abfb414   404  bl #+0xc (addr 0xffff7abfb420)
0xffff7abfb418   408  movz x16, #0x8
0xffff7abfb41c   412  bl #+0x14 (addr 0xffff7abfb430)
0xffff7abfb420   416  movz x17, #0xa00000000
0xffff7abfb424   420  sub csp, jssp, #0x10 (16)
0xffff7abfb428   424  stp x17, cp, [jssp, #-16]!
0xffff7abfb42c   428  add fp, jssp, #0x10 (16)
0xffff7abfb430   432  ldr x17, pc+24 (addr 0x0000ffff7abfb448)    ;; lazy deoptimization bailout 0
0xffff7abfb434   436  add x17, x17, x16
0xffff7abfb438   440  br x17
0xffff7abfb43c   444  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7abfb440   448  d63f03e0       constant
0xffff7abfb444   452  d503201f       constant
0xffff7abfb448   456  7a906000       constant
0xffff7abfb44c   460  0000ffff       constant


Safepoints (size = 21)
0xffff7abfb3c0   320  000 | x2 | x4 | x5 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 25)
0xffff7abfb294  embedded object  (0x20d04241 <undefined>)
0xffff7abfb304  embedded object  (0x4ec05d81 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfb394  code target (STUB)  (0xffff7ab06820)
0xffff7abfb3b8  code target (STUB)  (0xffff7ab06260)
0xffff7abfb3c4  code target (STUB)  (0xffff7ab068e0)
0xffff7abfb3d8  constant pool (size 48)
0xffff7abfb430  runtime entry
0xffff7abfb43c  constant pool (size 20)


kind = STUB
major_key = FastNewRestParameterStub
name = FastNewRestParameterStub
compiler = unknown
Instructions (size = 512)
0xffff7abfc120     0  mov x2, fp
0xffff7abfc124     4  b #+0x8 (addr 0xffff7abfc12c)
0xffff7abfc128     8  ldr x2, [x2]
0xffff7abfc12c    12  ldur x3, [x2, #-16]
0xffff7abfc130    16  cmp x3, x1
0xffff7abfc134    20  b.ne #-0xc (addr 0xffff7abfc128)
0xffff7abfc138    24  ldr x2, [x2]
0xffff7abfc13c    28  ldur x3, [x2, #-8]
0xffff7abfc140    32  movz x16, #0xe00000000
0xffff7abfc144    36  cmp x3, x16
0xffff7abfc148    40  b.ne #+0x18 (addr 0xffff7abfc160)
0xffff7abfc14c    44  ldursw x0, [x2, #-20]
0xffff7abfc150    48  ldur x1, [x1, #31]
0xffff7abfc154    52  ldursw x1, [x1, #99]
0xffff7abfc158    56  subs x0, x0, x1
0xffff7abfc15c    60  b.gt #+0x94 (addr 0xffff7abfc1f0)
0xffff7abfc160    64  ldr x1, pc+384 (addr 0x0000ffff7abfc2e0)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0xffff7abfc164    68  ldp x0, x2, [x1]
0xffff7abfc168    72  adds x16, x0, #0x20 (32)
0xffff7abfc16c    76  ccmp x16, x2, #nzCv, lo
0xffff7abfc170    80  b.hi #+0x34 (addr 0xffff7abfc1a4)
0xffff7abfc174    84  str x16, [x1]
0xffff7abfc178    88  orr x0, x0, #0x1
0xffff7abfc17c    92  ldur x1, [cp, #39]
0xffff7abfc180    96  movz x16, #0x187
0xffff7abfc184   100  ldr x1, [x1, x16]
0xffff7abfc188   104  stur x1, [x0, #-1]
0xffff7abfc18c   108  ldr x1, [x26, #304]
0xffff7abfc190   112  stur x1, [x0, #7]
0xffff7abfc194   116  stur x1, [x0, #15]
0xffff7abfc198   120  movz x1, #0x0
0xffff7abfc19c   124  stur x1, [x0, #23]
0xffff7abfc1a0   128  ret
0xffff7abfc1a4   132  movz x16, #0xc00000000
0xffff7abfc1a8   136  sub csp, jssp, #0x10 (16)
0xffff7abfc1ac   140  stp fp, lr, [jssp, #-16]!
0xffff7abfc1b0   144  sub csp, jssp, #0x10 (16)
0xffff7abfc1b4   148  str x16, [jssp, #-8]!
0xffff7abfc1b8   152  ldr x17, pc+304 (addr 0x0000ffff7abfc2e8)    ;; object: 0xffff7abfc0c1 <Code: STUB>
0xffff7abfc1bc   156  sub csp, jssp, #0x10 (16)
0xffff7abfc1c0   160  str x17, [jssp, #-8]!
0xffff7abfc1c4   164  add fp, jssp, #0x10 (16)
0xffff7abfc1c8   168  movz x16, #0x2000000000
0xffff7abfc1cc   172  sub csp, jssp, #0x8 (8)
0xffff7abfc1d0   176  str x16, [jssp, #-8]!
0xffff7abfc1d4   180  movz x0, #0x1
0xffff7abfc1d8   184  ldr x1, pc+280 (addr 0x0000ffff7abfc2f0)    ;; external reference (Runtime::AllocateInNewSpace)
0xffff7abfc1dc   188  ldr x16, pc+284 (addr 0x0000ffff7abfc2f8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abfc1e0   192  blr x16
0xffff7abfc1e4   196  mov jssp, fp
0xffff7abfc1e8   200  ldp fp, lr, [jssp], #16
0xffff7abfc1ec   204  b #-0x70 (addr 0xffff7abfc17c)
0xffff7abfc1f0   208  add x2, x2, x0, lsl #3
0xffff7abfc1f4   212  add x2, x2, #0x8 (8)
0xffff7abfc1f8   216  movz x1, #0x30
0xffff7abfc1fc   220  add x1, x1, x0, lsl #3
0xffff7abfc200   224  ldr x5, pc+256 (addr 0x0000ffff7abfc300)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0xffff7abfc204   228  ldp x3, x16, [x5]
0xffff7abfc208   232  adds x4, x3, x1
0xffff7abfc20c   236  ccmp x4, x16, #nzCv, lo
0xffff7abfc210   240  b.hi #+0x64 (addr 0xffff7abfc274)
0xffff7abfc214   244  str x4, [x5]
0xffff7abfc218   248  orr x3, x3, #0x1
0xffff7abfc21c   252  lsl x6, x0, #32
0xffff7abfc220   256  ldr x1, [x26, #224]
0xffff7abfc224   260  stur x1, [x3, #-1]
0xffff7abfc228   264  stur x6, [x3, #7]
0xffff7abfc22c   268  add x4, x3, #0x10 (16)
0xffff7abfc230   272  add x0, x4, x0, lsl #3
0xffff7abfc234   276  cmp x4, x0
0xffff7abfc238   280  b.eq #+0x18 (addr 0xffff7abfc250)
0xffff7abfc23c   284  ldr x5, [x2]
0xffff7abfc240   288  stur x5, [x4, #-1]
0xffff7abfc244   292  sub x2, x2, #0x8 (8)
0xffff7abfc248   296  add x4, x4, #0x8 (8)
0xffff7abfc24c   300  b #-0x18 (addr 0xffff7abfc234)
0xffff7abfc250   304  ldur x1, [cp, #39]
0xffff7abfc254   308  movz x16, #0x187
0xffff7abfc258   312  ldr x1, [x1, x16]
0xffff7abfc25c   316  stur x1, [x0, #-1]
0xffff7abfc260   320  ldr x1, [x26, #304]
0xffff7abfc264   324  stur x1, [x0, #7]
0xffff7abfc268   328  stur x3, [x0, #15]
0xffff7abfc26c   332  stur x6, [x0, #23]
0xffff7abfc270   336  ret
0xffff7abfc274   340  movz x16, #0xc00000000
0xffff7abfc278   344  sub csp, jssp, #0x10 (16)
0xffff7abfc27c   348  stp fp, lr, [jssp, #-16]!
0xffff7abfc280   352  sub csp, jssp, #0x10 (16)
0xffff7abfc284   356  str x16, [jssp, #-8]!
0xffff7abfc288   360  ldr x17, pc+128 (addr 0x0000ffff7abfc308)    ;; object: 0xffff7abfc0c1 <Code: STUB>
0xffff7abfc28c   364  sub csp, jssp, #0x10 (16)
0xffff7abfc290   368  str x17, [jssp, #-8]!
0xffff7abfc294   372  add fp, jssp, #0x10 (16)
0xffff7abfc298   376  lsl x0, x0, #32
0xffff7abfc29c   380  lsl x1, x1, #32
0xffff7abfc2a0   384  sub csp, jssp, #0x18 (24)
0xffff7abfc2a4   388  stp x1, x2, [jssp, #-24]!
0xffff7abfc2a8   392  str x0, [jssp, #16]
0xffff7abfc2ac   396  movz x0, #0x1
0xffff7abfc2b0   400  ldr x1, pc+96 (addr 0x0000ffff7abfc310)    ;; external reference (Runtime::AllocateInNewSpace)
0xffff7abfc2b4   404  ldr x16, pc+100 (addr 0x0000ffff7abfc318)    ;; code: STUB, CEntryStub, minor: 4
0xffff7abfc2b8   408  blr x16
0xffff7abfc2bc   412  mov x3, x0
0xffff7abfc2c0   416  ldp x2, x0, [jssp], #16
0xffff7abfc2c4   420  asr x0, x0, #32
0xffff7abfc2c8   424  mov jssp, fp
0xffff7abfc2cc   428  ldp fp, lr, [jssp], #16
0xffff7abfc2d0   432  b #-0xb4 (addr 0xffff7abfc21c)
0xffff7abfc2d4   436  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0xffff7abfc2d8   440  d63f03e0       constant
0xffff7abfc2dc   444  d503201f       constant
0xffff7abfc2e0   448  09abe2c0       constant
0xffff7abfc2e4   452  00000000       constant
0xffff7abfc2e8   456  7abfc0c1       constant
0xffff7abfc2ec   460  0000ffff       constant
0xffff7abfc2f0   464  00e25898       constant
0xffff7abfc2f4   468  00000000       constant
0xffff7abfc2f8   472  7ab06060       constant
0xffff7abfc2fc   476  0000ffff       constant
0xffff7abfc300   480  09abe2c0       constant
0xffff7abfc304   484  00000000       constant
0xffff7abfc308   488  7abfc0c1       constant
0xffff7abfc30c   492  0000ffff       constant
0xffff7abfc310   496  00e25898       constant
0xffff7abfc314   500  00000000       constant
0xffff7abfc318   504  7ab06060       constant
0xffff7abfc31c   508  0000ffff       constant


RelocInfo (size = 24)
0xffff7abfc160  external reference (Heap::NewSpaceAllocationTopAddress())  (0x9abe2c0)
0xffff7abfc1b8  embedded object  (0xffff7abfc0c1 <Code: STUB>)
0xffff7abfc1d8  external reference (Runtime::AllocateInNewSpace)  (0xe25898)
0xffff7abfc1dc  code target (STUB)  (0xffff7ab06060)
0xffff7abfc200  external reference (Heap::NewSpaceAllocationTopAddress())  (0x9abe2c0)
0xffff7abfc288  embedded object  (0xffff7abfc0c1 <Code: STUB>)
0xffff7abfc2b0  external reference (Runtime::AllocateInNewSpace)  (0xe25898)
0xffff7abfc2b4  code target (STUB)  (0xffff7ab06060)
0xffff7abfc2d4  constant pool (size 76)


kind = HANDLER
major_key = <NoCache>Stub
name = info
compiler = unknown
Instructions (size = 120)
0xffff7abfc6a0     0  sub csp, jssp, #0x8 (8)
0xffff7abfc6a4     4  str x3, [jssp, #-8]!
0xffff7abfc6a8     8  sub csp, jssp, #0x8 (8)
0xffff7abfc6ac    12  str x0, [jssp, #-8]!
0xffff7abfc6b0    16  ldr x0, pc+72 (addr 0x0000ffff7abfc6f8)    ;; object: 0x5d4ed151 Cell for 0
0xffff7abfc6b4    20  ldur x0, [x0, #7]
0xffff7abfc6b8    24  cmp x0, #0x0 (0)
0xffff7abfc6bc    28  b.ne #+0x14 (addr 0xffff7abfc6d0)
0xffff7abfc6c0    32  ldr x3, pc+64 (addr 0x0000ffff7abfc700)    ;; object: 0x5d4ed161 WeakCell for 0x56e4f711 <an Object with map 0x4ec36d99>
0xffff7abfc6c4    36  ldur x3, [x3, #7]
0xffff7abfc6c8    40  tbz w3, #0, #+0x8 (addr 0xffff7abfc6d0)
0xffff7abfc6cc    44  b #+0x14 (addr 0xffff7abfc6e0)
0xffff7abfc6d0    48  ldr x0, [jssp], #8
0xffff7abfc6d4    52  ldr x3, [jssp], #8
0xffff7abfc6d8    56  ldr x16, pc+48 (addr 0x0000ffff7abfc708)    ;; code: BUILTIN
0xffff7abfc6dc    60  br x16
0xffff7abfc6e0    64  add jssp, jssp, #0x10 (16)
0xffff7abfc6e4    68  mov x1, x3
0xffff7abfc6e8    72  ldr x16, pc+40 (addr 0x0000ffff7abfc710)    ;; code: HANDLER, LoadConstantStub, minor: 2
0xffff7abfc6ec    76  br x16
0xffff7abfc6f0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abfc6f4    84  d63f03e0       constant
0xffff7abfc6f8    88  5d4ed151       constant
0xffff7abfc6fc    92  00000000       constant
0xffff7abfc700    96  5d4ed161       constant
0xffff7abfc704   100  00000000       constant
0xffff7abfc708   104  7ab222e0       constant
0xffff7abfc70c   108  0000ffff       constant
0xffff7abfc710   112  7ab43380       constant
0xffff7abfc714   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abfc6b0  embedded object  (0x5d4ed151 Cell for 0)
0xffff7abfc6c0  embedded object  (0x5d4ed161 WeakCell for 0x56e4f711 <an Object with map 0x4ec36d99>)
0xffff7abfc6d8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abfc6e8  code target (HANDLER)  (0xffff7ab43380)
0xffff7abfc6f0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = bind
compiler = unknown
Instructions (size = 120)
0xffff7abfc780     0  sub csp, jssp, #0x8 (8)
0xffff7abfc784     4  str x3, [jssp, #-8]!
0xffff7abfc788     8  sub csp, jssp, #0x8 (8)
0xffff7abfc78c    12  str x0, [jssp, #-8]!
0xffff7abfc790    16  ldr x0, pc+72 (addr 0x0000ffff7abfc7d8)    ;; object: 0x20d5b0f1 Cell for 0
0xffff7abfc794    20  ldur x0, [x0, #7]
0xffff7abfc798    24  cmp x0, #0x0 (0)
0xffff7abfc79c    28  b.ne #+0x14 (addr 0xffff7abfc7b0)
0xffff7abfc7a0    32  ldr x3, pc+64 (addr 0x0000ffff7abfc7e0)    ;; object: 0x5d4ed1b1 WeakCell for 0x20d40019 <JS Function (SharedFunctionInfo 0x20d3ff71)>
0xffff7abfc7a4    36  ldur x3, [x3, #7]
0xffff7abfc7a8    40  tbz w3, #0, #+0x8 (addr 0xffff7abfc7b0)
0xffff7abfc7ac    44  b #+0x14 (addr 0xffff7abfc7c0)
0xffff7abfc7b0    48  ldr x0, [jssp], #8
0xffff7abfc7b4    52  ldr x3, [jssp], #8
0xffff7abfc7b8    56  ldr x16, pc+48 (addr 0x0000ffff7abfc7e8)    ;; code: BUILTIN
0xffff7abfc7bc    60  br x16
0xffff7abfc7c0    64  add jssp, jssp, #0x10 (16)
0xffff7abfc7c4    68  mov x1, x3
0xffff7abfc7c8    72  ldr x16, pc+40 (addr 0x0000ffff7abfc7f0)    ;; code: HANDLER, LoadConstantStub, minor: 5
0xffff7abfc7cc    76  br x16
0xffff7abfc7d0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abfc7d4    84  d63f03e0       constant
0xffff7abfc7d8    88  20d5b0f1       constant
0xffff7abfc7dc    92  00000000       constant
0xffff7abfc7e0    96  5d4ed1b1       constant
0xffff7abfc7e4   100  00000000       constant
0xffff7abfc7e8   104  7ab222e0       constant
0xffff7abfc7ec   108  0000ffff       constant
0xffff7abfc7f0   112  7ab43500       constant
0xffff7abfc7f4   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abfc790  embedded object  (0x20d5b0f1 Cell for 0)
0xffff7abfc7a0  embedded object  (0x5d4ed1b1 WeakCell for 0x20d40019 <JS Function (SharedFunctionInfo 0x20d3ff71)>)
0xffff7abfc7b8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abfc7c8  code target (HANDLER)  (0xffff7ab43500)
0xffff7abfc7d0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = info
compiler = unknown
Instructions (size = 184)
0xffff7abfc860     0  sub csp, jssp, #0x8 (8)
0xffff7abfc864     4  str x3, [jssp, #-8]!
0xffff7abfc868     8  sub csp, jssp, #0x8 (8)
0xffff7abfc86c    12  str x4, [jssp, #-8]!
0xffff7abfc870    16  ldr x3, pc+112 (addr 0x0000ffff7abfc8e0)    ;; object: 0x5d4ed151 Cell for 0
0xffff7abfc874    20  ldur x3, [x3, #7]
0xffff7abfc878    24  cmp x3, #0x0 (0)
0xffff7abfc87c    28  b.ne #+0x44 (addr 0xffff7abfc8c0)
0xffff7abfc880    32  tbz w0, #0, #+0x40 (addr 0xffff7abfc8c0)
0xffff7abfc884    36  ldur x3, [x0, #-1]
0xffff7abfc888    40  ldr x4, pc+96 (addr 0x0000ffff7abfc8e8)    ;; object: 0x5d4ed0e1 WeakCell for 0x4ec0a871 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfc88c    44  ldur x4, [x4, #7]
0xffff7abfc890    48  cmp x3, x4
0xffff7abfc894    52  b.ne #+0x2c (addr 0xffff7abfc8c0)
0xffff7abfc898    56  ldr x5, pc+88 (addr 0x0000ffff7abfc8f0)    ;; object: 0x5d4ed1e9 WeakCell for 0x4ec41df1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfc89c    60  ldur x5, [x5, #7]
0xffff7abfc8a0    64  tbz w5, #0, #+0x20 (addr 0xffff7abfc8c0)
0xffff7abfc8a4    68  ldursw x4, [x5, #15]
0xffff7abfc8a8    72  tbnz w4, #23, #+0x18 (addr 0xffff7abfc8c0)
0xffff7abfc8ac    76  ldr x4, [jssp], #8
0xffff7abfc8b0    80  ldr x3, [jssp], #8
0xffff7abfc8b4    84  ldr x2, pc+68 (addr 0x0000ffff7abfc8f8)    ;; object: 0x5d4cc8d9 <String[4]: info>
0xffff7abfc8b8    88  ldr x16, pc+72 (addr 0x0000ffff7abfc900)    ;; code: HANDLER, StoreTransitionStub, minor: 198663
0xffff7abfc8bc    92  br x16
0xffff7abfc8c0    96  ldr x2, pc+72 (addr 0x0000ffff7abfc908)    ;; object: 0x5d4cc8d9 <String[4]: info>
0xffff7abfc8c4   100  ldr x4, [jssp], #8
0xffff7abfc8c8   104  ldr x3, [jssp], #8
0xffff7abfc8cc   108  ldr x16, pc+68 (addr 0x0000ffff7abfc910)    ;; code: BUILTIN
0xffff7abfc8d0   112  br x16
0xffff7abfc8d4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abfc8d8   120  d63f03e0       constant
0xffff7abfc8dc   124  d503201f       constant
0xffff7abfc8e0   128  5d4ed151       constant
0xffff7abfc8e4   132  00000000       constant
0xffff7abfc8e8   136  5d4ed0e1       constant
0xffff7abfc8ec   140  00000000       constant
0xffff7abfc8f0   144  5d4ed1e9       constant
0xffff7abfc8f4   148  00000000       constant
0xffff7abfc8f8   152  5d4cc8d9       constant
0xffff7abfc8fc   156  00000000       constant
0xffff7abfc900   160  7ab8c240       constant
0xffff7abfc904   164  0000ffff       constant
0xffff7abfc908   168  5d4cc8d9       constant
0xffff7abfc90c   172  00000000       constant
0xffff7abfc910   176  7ab22420       constant
0xffff7abfc914   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abfc870  embedded object  (0x5d4ed151 Cell for 0)
0xffff7abfc888  embedded object  (0x5d4ed0e1 WeakCell for 0x4ec0a871 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfc898  embedded object  (0x5d4ed1e9 WeakCell for 0x4ec41df1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfc8b4  embedded object  (0x5d4cc8d9 <String[4]: info>)
0xffff7abfc8b8  code target (HANDLER)  (0xffff7ab8c240)
0xffff7abfc8c0  embedded object  (0x5d4cc8d9 <String[4]: info>)
0xffff7abfc8cc  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abfc8d4  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = warn
compiler = unknown
Instructions (size = 120)
0xffff7abfc980     0  sub csp, jssp, #0x8 (8)
0xffff7abfc984     4  str x3, [jssp, #-8]!
0xffff7abfc988     8  sub csp, jssp, #0x8 (8)
0xffff7abfc98c    12  str x0, [jssp, #-8]!
0xffff7abfc990    16  ldr x0, pc+72 (addr 0x0000ffff7abfc9d8)    ;; object: 0x5d4ed151 Cell for 0
0xffff7abfc994    20  ldur x0, [x0, #7]
0xffff7abfc998    24  cmp x0, #0x0 (0)
0xffff7abfc99c    28  b.ne #+0x14 (addr 0xffff7abfc9b0)
0xffff7abfc9a0    32  ldr x3, pc+64 (addr 0x0000ffff7abfc9e0)    ;; object: 0x5d4ed221 WeakCell for 0x56e4f711 <an Object with map 0x4ec36d99>
0xffff7abfc9a4    36  ldur x3, [x3, #7]
0xffff7abfc9a8    40  tbz w3, #0, #+0x8 (addr 0xffff7abfc9b0)
0xffff7abfc9ac    44  b #+0x14 (addr 0xffff7abfc9c0)
0xffff7abfc9b0    48  ldr x0, [jssp], #8
0xffff7abfc9b4    52  ldr x3, [jssp], #8
0xffff7abfc9b8    56  ldr x16, pc+48 (addr 0x0000ffff7abfc9e8)    ;; code: BUILTIN
0xffff7abfc9bc    60  br x16
0xffff7abfc9c0    64  add jssp, jssp, #0x10 (16)
0xffff7abfc9c4    68  mov x1, x3
0xffff7abfc9c8    72  ldr x16, pc+40 (addr 0x0000ffff7abfc9f0)    ;; code: HANDLER, LoadConstantStub, minor: 3
0xffff7abfc9cc    76  br x16
0xffff7abfc9d0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abfc9d4    84  d63f03e0       constant
0xffff7abfc9d8    88  5d4ed151       constant
0xffff7abfc9dc    92  00000000       constant
0xffff7abfc9e0    96  5d4ed221       constant
0xffff7abfc9e4   100  00000000       constant
0xffff7abfc9e8   104  7ab222e0       constant
0xffff7abfc9ec   108  0000ffff       constant
0xffff7abfc9f0   112  7ab43400       constant
0xffff7abfc9f4   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abfc990  embedded object  (0x5d4ed151 Cell for 0)
0xffff7abfc9a0  embedded object  (0x5d4ed221 WeakCell for 0x56e4f711 <an Object with map 0x4ec36d99>)
0xffff7abfc9b8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abfc9c8  code target (HANDLER)  (0xffff7ab43400)
0xffff7abfc9d0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = warn
compiler = unknown
Instructions (size = 184)
0xffff7abfcd80     0  sub csp, jssp, #0x8 (8)
0xffff7abfcd84     4  str x3, [jssp, #-8]!
0xffff7abfcd88     8  sub csp, jssp, #0x8 (8)
0xffff7abfcd8c    12  str x4, [jssp, #-8]!
0xffff7abfcd90    16  ldr x3, pc+112 (addr 0x0000ffff7abfce00)    ;; object: 0x5d4ed151 Cell for 0
0xffff7abfcd94    20  ldur x3, [x3, #7]
0xffff7abfcd98    24  cmp x3, #0x0 (0)
0xffff7abfcd9c    28  b.ne #+0x44 (addr 0xffff7abfcde0)
0xffff7abfcda0    32  tbz w0, #0, #+0x40 (addr 0xffff7abfcde0)
0xffff7abfcda4    36  ldur x3, [x0, #-1]
0xffff7abfcda8    40  ldr x4, pc+96 (addr 0x0000ffff7abfce08)    ;; object: 0x5d4ed0e1 WeakCell for 0x4ec0a871 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfcdac    44  ldur x4, [x4, #7]
0xffff7abfcdb0    48  cmp x3, x4
0xffff7abfcdb4    52  b.ne #+0x2c (addr 0xffff7abfcde0)
0xffff7abfcdb8    56  ldr x5, pc+88 (addr 0x0000ffff7abfce10)    ;; object: 0x5d4ed3d1 WeakCell for 0x4ec41e49 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfcdbc    60  ldur x5, [x5, #7]
0xffff7abfcdc0    64  tbz w5, #0, #+0x20 (addr 0xffff7abfcde0)
0xffff7abfcdc4    68  ldursw x4, [x5, #15]
0xffff7abfcdc8    72  tbnz w4, #23, #+0x18 (addr 0xffff7abfcde0)
0xffff7abfcdcc    76  ldr x4, [jssp], #8
0xffff7abfcdd0    80  ldr x3, [jssp], #8
0xffff7abfcdd4    84  ldr x2, pc+68 (addr 0x0000ffff7abfce18)    ;; object: 0x5d4cc8f9 <String[4]: warn>
0xffff7abfcdd8    88  ldr x16, pc+72 (addr 0x0000ffff7abfce20)    ;; code: HANDLER, StoreTransitionStub, minor: 198664
0xffff7abfcddc    92  br x16
0xffff7abfcde0    96  ldr x2, pc+72 (addr 0x0000ffff7abfce28)    ;; object: 0x5d4cc8f9 <String[4]: warn>
0xffff7abfcde4   100  ldr x4, [jssp], #8
0xffff7abfcde8   104  ldr x3, [jssp], #8
0xffff7abfcdec   108  ldr x16, pc+68 (addr 0x0000ffff7abfce30)    ;; code: BUILTIN
0xffff7abfcdf0   112  br x16
0xffff7abfcdf4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abfcdf8   120  d63f03e0       constant
0xffff7abfcdfc   124  d503201f       constant
0xffff7abfce00   128  5d4ed151       constant
0xffff7abfce04   132  00000000       constant
0xffff7abfce08   136  5d4ed0e1       constant
0xffff7abfce0c   140  00000000       constant
0xffff7abfce10   144  5d4ed3d1       constant
0xffff7abfce14   148  00000000       constant
0xffff7abfce18   152  5d4cc8f9       constant
0xffff7abfce1c   156  00000000       constant
0xffff7abfce20   160  7abe5d20       constant
0xffff7abfce24   164  0000ffff       constant
0xffff7abfce28   168  5d4cc8f9       constant
0xffff7abfce2c   172  00000000       constant
0xffff7abfce30   176  7ab22420       constant
0xffff7abfce34   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abfcd90  embedded object  (0x5d4ed151 Cell for 0)
0xffff7abfcda8  embedded object  (0x5d4ed0e1 WeakCell for 0x4ec0a871 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfcdb8  embedded object  (0x5d4ed3d1 WeakCell for 0x4ec41e49 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfcdd4  embedded object  (0x5d4cc8f9 <String[4]: warn>)
0xffff7abfcdd8  code target (HANDLER)  (0xffff7abe5d20)
0xffff7abfcde0  embedded object  (0x5d4cc8f9 <String[4]: warn>)
0xffff7abfcdec  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abfcdf4  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = error
compiler = unknown
Instructions (size = 120)
0xffff7abfcea0     0  sub csp, jssp, #0x8 (8)
0xffff7abfcea4     4  str x3, [jssp, #-8]!
0xffff7abfcea8     8  sub csp, jssp, #0x8 (8)
0xffff7abfceac    12  str x0, [jssp, #-8]!
0xffff7abfceb0    16  ldr x0, pc+72 (addr 0x0000ffff7abfcef8)    ;; object: 0x5d4ed151 Cell for 0
0xffff7abfceb4    20  ldur x0, [x0, #7]
0xffff7abfceb8    24  cmp x0, #0x0 (0)
0xffff7abfcebc    28  b.ne #+0x14 (addr 0xffff7abfced0)
0xffff7abfcec0    32  ldr x3, pc+64 (addr 0x0000ffff7abfcf00)    ;; object: 0x5d4ed409 WeakCell for 0x56e4f711 <an Object with map 0x4ec36d99>
0xffff7abfcec4    36  ldur x3, [x3, #7]
0xffff7abfcec8    40  tbz w3, #0, #+0x8 (addr 0xffff7abfced0)
0xffff7abfcecc    44  b #+0x14 (addr 0xffff7abfcee0)
0xffff7abfced0    48  ldr x0, [jssp], #8
0xffff7abfced4    52  ldr x3, [jssp], #8
0xffff7abfced8    56  ldr x16, pc+48 (addr 0x0000ffff7abfcf08)    ;; code: BUILTIN
0xffff7abfcedc    60  br x16
0xffff7abfcee0    64  add jssp, jssp, #0x10 (16)
0xffff7abfcee4    68  mov x1, x3
0xffff7abfcee8    72  ldr x16, pc+40 (addr 0x0000ffff7abfcf10)    ;; code: HANDLER, LoadConstantStub, minor: 4
0xffff7abfceec    76  br x16
0xffff7abfcef0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abfcef4    84  d63f03e0       constant
0xffff7abfcef8    88  5d4ed151       constant
0xffff7abfcefc    92  00000000       constant
0xffff7abfcf00    96  5d4ed409       constant
0xffff7abfcf04   100  00000000       constant
0xffff7abfcf08   104  7ab222e0       constant
0xffff7abfcf0c   108  0000ffff       constant
0xffff7abfcf10   112  7ab43480       constant
0xffff7abfcf14   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abfceb0  embedded object  (0x5d4ed151 Cell for 0)
0xffff7abfcec0  embedded object  (0x5d4ed409 WeakCell for 0x56e4f711 <an Object with map 0x4ec36d99>)
0xffff7abfced8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abfcee8  code target (HANDLER)  (0xffff7ab43480)
0xffff7abfcef0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = error
compiler = unknown
Instructions (size = 184)
0xffff7abfcf80     0  sub csp, jssp, #0x8 (8)
0xffff7abfcf84     4  str x3, [jssp, #-8]!
0xffff7abfcf88     8  sub csp, jssp, #0x8 (8)
0xffff7abfcf8c    12  str x4, [jssp, #-8]!
0xffff7abfcf90    16  ldr x3, pc+112 (addr 0x0000ffff7abfd000)    ;; object: 0x5d4ed151 Cell for 0
0xffff7abfcf94    20  ldur x3, [x3, #7]
0xffff7abfcf98    24  cmp x3, #0x0 (0)
0xffff7abfcf9c    28  b.ne #+0x44 (addr 0xffff7abfcfe0)
0xffff7abfcfa0    32  tbz w0, #0, #+0x40 (addr 0xffff7abfcfe0)
0xffff7abfcfa4    36  ldur x3, [x0, #-1]
0xffff7abfcfa8    40  ldr x4, pc+96 (addr 0x0000ffff7abfd008)    ;; object: 0x5d4ed0e1 WeakCell for 0x4ec0a871 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfcfac    44  ldur x4, [x4, #7]
0xffff7abfcfb0    48  cmp x3, x4
0xffff7abfcfb4    52  b.ne #+0x2c (addr 0xffff7abfcfe0)
0xffff7abfcfb8    56  ldr x5, pc+88 (addr 0x0000ffff7abfd010)    ;; object: 0x5d4ed441 WeakCell for 0x4ec41ea1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfcfbc    60  ldur x5, [x5, #7]
0xffff7abfcfc0    64  tbz w5, #0, #+0x20 (addr 0xffff7abfcfe0)
0xffff7abfcfc4    68  ldursw x4, [x5, #15]
0xffff7abfcfc8    72  tbnz w4, #23, #+0x18 (addr 0xffff7abfcfe0)
0xffff7abfcfcc    76  ldr x4, [jssp], #8
0xffff7abfcfd0    80  ldr x3, [jssp], #8
0xffff7abfcfd4    84  ldr x2, pc+68 (addr 0x0000ffff7abfd018)    ;; object: 0x20db2571 <String[5]: error>
0xffff7abfcfd8    88  ldr x16, pc+72 (addr 0x0000ffff7abfd020)    ;; code: HANDLER, StoreTransitionStub, minor: 198665
0xffff7abfcfdc    92  br x16
0xffff7abfcfe0    96  ldr x2, pc+72 (addr 0x0000ffff7abfd028)    ;; object: 0x20db2571 <String[5]: error>
0xffff7abfcfe4   100  ldr x4, [jssp], #8
0xffff7abfcfe8   104  ldr x3, [jssp], #8
0xffff7abfcfec   108  ldr x16, pc+68 (addr 0x0000ffff7abfd030)    ;; code: BUILTIN
0xffff7abfcff0   112  br x16
0xffff7abfcff4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abfcff8   120  d63f03e0       constant
0xffff7abfcffc   124  d503201f       constant
0xffff7abfd000   128  5d4ed151       constant
0xffff7abfd004   132  00000000       constant
0xffff7abfd008   136  5d4ed0e1       constant
0xffff7abfd00c   140  00000000       constant
0xffff7abfd010   144  5d4ed441       constant
0xffff7abfd014   148  00000000       constant
0xffff7abfd018   152  20db2571       constant
0xffff7abfd01c   156  00000000       constant
0xffff7abfd020   160  7abe60c0       constant
0xffff7abfd024   164  0000ffff       constant
0xffff7abfd028   168  20db2571       constant
0xffff7abfd02c   172  00000000       constant
0xffff7abfd030   176  7ab22420       constant
0xffff7abfd034   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abfcf90  embedded object  (0x5d4ed151 Cell for 0)
0xffff7abfcfa8  embedded object  (0x5d4ed0e1 WeakCell for 0x4ec0a871 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfcfb8  embedded object  (0x5d4ed441 WeakCell for 0x4ec41ea1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfcfd4  embedded object  (0x20db2571 <String[5]: error>)
0xffff7abfcfd8  code target (HANDLER)  (0xffff7abe60c0)
0xffff7abfcfe0  embedded object  (0x20db2571 <String[5]: error>)
0xffff7abfcfec  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abfcff4  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = dir
compiler = unknown
Instructions (size = 120)
0xffff7abfd0a0     0  sub csp, jssp, #0x8 (8)
0xffff7abfd0a4     4  str x3, [jssp, #-8]!
0xffff7abfd0a8     8  sub csp, jssp, #0x8 (8)
0xffff7abfd0ac    12  str x0, [jssp, #-8]!
0xffff7abfd0b0    16  ldr x0, pc+72 (addr 0x0000ffff7abfd0f8)    ;; object: 0x5d4ed151 Cell for 0
0xffff7abfd0b4    20  ldur x0, [x0, #7]
0xffff7abfd0b8    24  cmp x0, #0x0 (0)
0xffff7abfd0bc    28  b.ne #+0x14 (addr 0xffff7abfd0d0)
0xffff7abfd0c0    32  ldr x3, pc+64 (addr 0x0000ffff7abfd100)    ;; object: 0x5d4ed479 WeakCell for 0x56e4f711 <an Object with map 0x4ec36d99>
0xffff7abfd0c4    36  ldur x3, [x3, #7]
0xffff7abfd0c8    40  tbz w3, #0, #+0x8 (addr 0xffff7abfd0d0)
0xffff7abfd0cc    44  b #+0x14 (addr 0xffff7abfd0e0)
0xffff7abfd0d0    48  ldr x0, [jssp], #8
0xffff7abfd0d4    52  ldr x3, [jssp], #8
0xffff7abfd0d8    56  ldr x16, pc+48 (addr 0x0000ffff7abfd108)    ;; code: BUILTIN
0xffff7abfd0dc    60  br x16
0xffff7abfd0e0    64  add jssp, jssp, #0x10 (16)
0xffff7abfd0e4    68  mov x1, x3
0xffff7abfd0e8    72  ldr x16, pc+40 (addr 0x0000ffff7abfd110)    ;; code: HANDLER, LoadConstantStub, minor: 5
0xffff7abfd0ec    76  br x16
0xffff7abfd0f0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abfd0f4    84  d63f03e0       constant
0xffff7abfd0f8    88  5d4ed151       constant
0xffff7abfd0fc    92  00000000       constant
0xffff7abfd100    96  5d4ed479       constant
0xffff7abfd104   100  00000000       constant
0xffff7abfd108   104  7ab222e0       constant
0xffff7abfd10c   108  0000ffff       constant
0xffff7abfd110   112  7ab43500       constant
0xffff7abfd114   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abfd0b0  embedded object  (0x5d4ed151 Cell for 0)
0xffff7abfd0c0  embedded object  (0x5d4ed479 WeakCell for 0x56e4f711 <an Object with map 0x4ec36d99>)
0xffff7abfd0d8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abfd0e8  code target (HANDLER)  (0xffff7ab43500)
0xffff7abfd0f0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = dir
compiler = unknown
Instructions (size = 184)
0xffff7abfd500     0  sub csp, jssp, #0x8 (8)
0xffff7abfd504     4  str x3, [jssp, #-8]!
0xffff7abfd508     8  sub csp, jssp, #0x8 (8)
0xffff7abfd50c    12  str x4, [jssp, #-8]!
0xffff7abfd510    16  ldr x3, pc+112 (addr 0x0000ffff7abfd580)    ;; object: 0x5d4ed151 Cell for 0
0xffff7abfd514    20  ldur x3, [x3, #7]
0xffff7abfd518    24  cmp x3, #0x0 (0)
0xffff7abfd51c    28  b.ne #+0x44 (addr 0xffff7abfd560)
0xffff7abfd520    32  tbz w0, #0, #+0x40 (addr 0xffff7abfd560)
0xffff7abfd524    36  ldur x3, [x0, #-1]
0xffff7abfd528    40  ldr x4, pc+96 (addr 0x0000ffff7abfd588)    ;; object: 0x5d4ed0e1 WeakCell for 0x4ec0a871 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfd52c    44  ldur x4, [x4, #7]
0xffff7abfd530    48  cmp x3, x4
0xffff7abfd534    52  b.ne #+0x2c (addr 0xffff7abfd560)
0xffff7abfd538    56  ldr x5, pc+88 (addr 0x0000ffff7abfd590)    ;; object: 0x5d4ed689 WeakCell for 0x4ec41ef9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfd53c    60  ldur x5, [x5, #7]
0xffff7abfd540    64  tbz w5, #0, #+0x20 (addr 0xffff7abfd560)
0xffff7abfd544    68  ldursw x4, [x5, #15]
0xffff7abfd548    72  tbnz w4, #23, #+0x18 (addr 0xffff7abfd560)
0xffff7abfd54c    76  ldr x4, [jssp], #8
0xffff7abfd550    80  ldr x3, [jssp], #8
0xffff7abfd554    84  ldr x2, pc+68 (addr 0x0000ffff7abfd598)    ;; object: 0x20dcffd1 <String[3]: dir>
0xffff7abfd558    88  ldr x16, pc+72 (addr 0x0000ffff7abfd5a0)    ;; code: HANDLER, StoreTransitionStub, minor: 198666
0xffff7abfd55c    92  br x16
0xffff7abfd560    96  ldr x2, pc+72 (addr 0x0000ffff7abfd5a8)    ;; object: 0x20dcffd1 <String[3]: dir>
0xffff7abfd564   100  ldr x4, [jssp], #8
0xffff7abfd568   104  ldr x3, [jssp], #8
0xffff7abfd56c   108  ldr x16, pc+68 (addr 0x0000ffff7abfd5b0)    ;; code: BUILTIN
0xffff7abfd570   112  br x16
0xffff7abfd574   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abfd578   120  d63f03e0       constant
0xffff7abfd57c   124  d503201f       constant
0xffff7abfd580   128  5d4ed151       constant
0xffff7abfd584   132  00000000       constant
0xffff7abfd588   136  5d4ed0e1       constant
0xffff7abfd58c   140  00000000       constant
0xffff7abfd590   144  5d4ed689       constant
0xffff7abfd594   148  00000000       constant
0xffff7abfd598   152  20dcffd1       constant
0xffff7abfd59c   156  00000000       constant
0xffff7abfd5a0   160  7abf5aa0       constant
0xffff7abfd5a4   164  0000ffff       constant
0xffff7abfd5a8   168  20dcffd1       constant
0xffff7abfd5ac   172  00000000       constant
0xffff7abfd5b0   176  7ab22420       constant
0xffff7abfd5b4   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abfd510  embedded object  (0x5d4ed151 Cell for 0)
0xffff7abfd528  embedded object  (0x5d4ed0e1 WeakCell for 0x4ec0a871 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfd538  embedded object  (0x5d4ed689 WeakCell for 0x4ec41ef9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfd554  embedded object  (0x20dcffd1 <String[3]: dir>)
0xffff7abfd558  code target (HANDLER)  (0xffff7abf5aa0)
0xffff7abfd560  embedded object  (0x20dcffd1 <String[3]: dir>)
0xffff7abfd56c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abfd574  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = time
compiler = unknown
Instructions (size = 120)
0xffff7abfd620     0  sub csp, jssp, #0x8 (8)
0xffff7abfd624     4  str x3, [jssp, #-8]!
0xffff7abfd628     8  sub csp, jssp, #0x8 (8)
0xffff7abfd62c    12  str x0, [jssp, #-8]!
0xffff7abfd630    16  ldr x0, pc+72 (addr 0x0000ffff7abfd678)    ;; object: 0x5d4ed151 Cell for 0
0xffff7abfd634    20  ldur x0, [x0, #7]
0xffff7abfd638    24  cmp x0, #0x0 (0)
0xffff7abfd63c    28  b.ne #+0x14 (addr 0xffff7abfd650)
0xffff7abfd640    32  ldr x3, pc+64 (addr 0x0000ffff7abfd680)    ;; object: 0x5d4ed6c1 WeakCell for 0x56e4f711 <an Object with map 0x4ec36d99>
0xffff7abfd644    36  ldur x3, [x3, #7]
0xffff7abfd648    40  tbz w3, #0, #+0x8 (addr 0xffff7abfd650)
0xffff7abfd64c    44  b #+0x14 (addr 0xffff7abfd660)
0xffff7abfd650    48  ldr x0, [jssp], #8
0xffff7abfd654    52  ldr x3, [jssp], #8
0xffff7abfd658    56  ldr x16, pc+48 (addr 0x0000ffff7abfd688)    ;; code: BUILTIN
0xffff7abfd65c    60  br x16
0xffff7abfd660    64  add jssp, jssp, #0x10 (16)
0xffff7abfd664    68  mov x1, x3
0xffff7abfd668    72  ldr x16, pc+40 (addr 0x0000ffff7abfd690)    ;; code: HANDLER, LoadConstantStub, minor: 6
0xffff7abfd66c    76  br x16
0xffff7abfd670    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abfd674    84  d63f03e0       constant
0xffff7abfd678    88  5d4ed151       constant
0xffff7abfd67c    92  00000000       constant
0xffff7abfd680    96  5d4ed6c1       constant
0xffff7abfd684   100  00000000       constant
0xffff7abfd688   104  7ab222e0       constant
0xffff7abfd68c   108  0000ffff       constant
0xffff7abfd690   112  7ab8b020       constant
0xffff7abfd694   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abfd630  embedded object  (0x5d4ed151 Cell for 0)
0xffff7abfd640  embedded object  (0x5d4ed6c1 WeakCell for 0x56e4f711 <an Object with map 0x4ec36d99>)
0xffff7abfd658  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abfd668  code target (HANDLER)  (0xffff7ab8b020)
0xffff7abfd670  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = time
compiler = unknown
Instructions (size = 184)
0xffff7abfd920     0  sub csp, jssp, #0x8 (8)
0xffff7abfd924     4  str x3, [jssp, #-8]!
0xffff7abfd928     8  sub csp, jssp, #0x8 (8)
0xffff7abfd92c    12  str x4, [jssp, #-8]!
0xffff7abfd930    16  ldr x3, pc+112 (addr 0x0000ffff7abfd9a0)    ;; object: 0x5d4ed151 Cell for 0
0xffff7abfd934    20  ldur x3, [x3, #7]
0xffff7abfd938    24  cmp x3, #0x0 (0)
0xffff7abfd93c    28  b.ne #+0x44 (addr 0xffff7abfd980)
0xffff7abfd940    32  tbz w0, #0, #+0x40 (addr 0xffff7abfd980)
0xffff7abfd944    36  ldur x3, [x0, #-1]
0xffff7abfd948    40  ldr x4, pc+96 (addr 0x0000ffff7abfd9a8)    ;; object: 0x5d4ed0e1 WeakCell for 0x4ec0a871 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfd94c    44  ldur x4, [x4, #7]
0xffff7abfd950    48  cmp x3, x4
0xffff7abfd954    52  b.ne #+0x2c (addr 0xffff7abfd980)
0xffff7abfd958    56  ldr x5, pc+88 (addr 0x0000ffff7abfd9b0)    ;; object: 0x5d4ed859 WeakCell for 0x4ec41f51 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfd95c    60  ldur x5, [x5, #7]
0xffff7abfd960    64  tbz w5, #0, #+0x20 (addr 0xffff7abfd980)
0xffff7abfd964    68  ldursw x4, [x5, #15]
0xffff7abfd968    72  tbnz w4, #23, #+0x18 (addr 0xffff7abfd980)
0xffff7abfd96c    76  ldr x4, [jssp], #8
0xffff7abfd970    80  ldr x3, [jssp], #8
0xffff7abfd974    84  ldr x2, pc+68 (addr 0x0000ffff7abfd9b8)    ;; object: 0x20da2941 <String[4]: time>
0xffff7abfd978    88  ldr x16, pc+72 (addr 0x0000ffff7abfd9c0)    ;; code: HANDLER, StoreTransitionStub, minor: 198667
0xffff7abfd97c    92  br x16
0xffff7abfd980    96  ldr x2, pc+72 (addr 0x0000ffff7abfd9c8)    ;; object: 0x20da2941 <String[4]: time>
0xffff7abfd984   100  ldr x4, [jssp], #8
0xffff7abfd988   104  ldr x3, [jssp], #8
0xffff7abfd98c   108  ldr x16, pc+68 (addr 0x0000ffff7abfd9d0)    ;; code: BUILTIN
0xffff7abfd990   112  br x16
0xffff7abfd994   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abfd998   120  d63f03e0       constant
0xffff7abfd99c   124  d503201f       constant
0xffff7abfd9a0   128  5d4ed151       constant
0xffff7abfd9a4   132  00000000       constant
0xffff7abfd9a8   136  5d4ed0e1       constant
0xffff7abfd9ac   140  00000000       constant
0xffff7abfd9b0   144  5d4ed859       constant
0xffff7abfd9b4   148  00000000       constant
0xffff7abfd9b8   152  20da2941       constant
0xffff7abfd9bc   156  00000000       constant
0xffff7abfd9c0   160  7abf5dc0       constant
0xffff7abfd9c4   164  0000ffff       constant
0xffff7abfd9c8   168  20da2941       constant
0xffff7abfd9cc   172  00000000       constant
0xffff7abfd9d0   176  7ab22420       constant
0xffff7abfd9d4   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abfd930  embedded object  (0x5d4ed151 Cell for 0)
0xffff7abfd948  embedded object  (0x5d4ed0e1 WeakCell for 0x4ec0a871 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfd958  embedded object  (0x5d4ed859 WeakCell for 0x4ec41f51 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfd974  embedded object  (0x20da2941 <String[4]: time>)
0xffff7abfd978  code target (HANDLER)  (0xffff7abf5dc0)
0xffff7abfd980  embedded object  (0x20da2941 <String[4]: time>)
0xffff7abfd98c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abfd994  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = timeEnd
compiler = unknown
Instructions (size = 120)
0xffff7abfda40     0  sub csp, jssp, #0x8 (8)
0xffff7abfda44     4  str x3, [jssp, #-8]!
0xffff7abfda48     8  sub csp, jssp, #0x8 (8)
0xffff7abfda4c    12  str x0, [jssp, #-8]!
0xffff7abfda50    16  ldr x0, pc+72 (addr 0x0000ffff7abfda98)    ;; object: 0x5d4ed151 Cell for 0
0xffff7abfda54    20  ldur x0, [x0, #7]
0xffff7abfda58    24  cmp x0, #0x0 (0)
0xffff7abfda5c    28  b.ne #+0x14 (addr 0xffff7abfda70)
0xffff7abfda60    32  ldr x3, pc+64 (addr 0x0000ffff7abfdaa0)    ;; object: 0x5d4ed891 WeakCell for 0x56e4f711 <an Object with map 0x4ec36d99>
0xffff7abfda64    36  ldur x3, [x3, #7]
0xffff7abfda68    40  tbz w3, #0, #+0x8 (addr 0xffff7abfda70)
0xffff7abfda6c    44  b #+0x14 (addr 0xffff7abfda80)
0xffff7abfda70    48  ldr x0, [jssp], #8
0xffff7abfda74    52  ldr x3, [jssp], #8
0xffff7abfda78    56  ldr x16, pc+48 (addr 0x0000ffff7abfdaa8)    ;; code: BUILTIN
0xffff7abfda7c    60  br x16
0xffff7abfda80    64  add jssp, jssp, #0x10 (16)
0xffff7abfda84    68  mov x1, x3
0xffff7abfda88    72  ldr x16, pc+40 (addr 0x0000ffff7abfdab0)    ;; code: HANDLER, LoadConstantStub, minor: 7
0xffff7abfda8c    76  br x16
0xffff7abfda90    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abfda94    84  d63f03e0       constant
0xffff7abfda98    88  5d4ed151       constant
0xffff7abfda9c    92  00000000       constant
0xffff7abfdaa0    96  5d4ed891       constant
0xffff7abfdaa4   100  00000000       constant
0xffff7abfdaa8   104  7ab222e0       constant
0xffff7abfdaac   108  0000ffff       constant
0xffff7abfdab0   112  7ab8b0a0       constant
0xffff7abfdab4   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abfda50  embedded object  (0x5d4ed151 Cell for 0)
0xffff7abfda60  embedded object  (0x5d4ed891 WeakCell for 0x56e4f711 <an Object with map 0x4ec36d99>)
0xffff7abfda78  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abfda88  code target (HANDLER)  (0xffff7ab8b0a0)
0xffff7abfda90  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = timeEnd
compiler = unknown
Instructions (size = 184)
0xffff7abfe0e0     0  sub csp, jssp, #0x8 (8)
0xffff7abfe0e4     4  str x3, [jssp, #-8]!
0xffff7abfe0e8     8  sub csp, jssp, #0x8 (8)
0xffff7abfe0ec    12  str x4, [jssp, #-8]!
0xffff7abfe0f0    16  ldr x3, pc+112 (addr 0x0000ffff7abfe160)    ;; object: 0x5d4ed151 Cell for 0
0xffff7abfe0f4    20  ldur x3, [x3, #7]
0xffff7abfe0f8    24  cmp x3, #0x0 (0)
0xffff7abfe0fc    28  b.ne #+0x44 (addr 0xffff7abfe140)
0xffff7abfe100    32  tbz w0, #0, #+0x40 (addr 0xffff7abfe140)
0xffff7abfe104    36  ldur x3, [x0, #-1]
0xffff7abfe108    40  ldr x4, pc+96 (addr 0x0000ffff7abfe168)    ;; object: 0x5d4ed0e1 WeakCell for 0x4ec0a871 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfe10c    44  ldur x4, [x4, #7]
0xffff7abfe110    48  cmp x3, x4
0xffff7abfe114    52  b.ne #+0x2c (addr 0xffff7abfe140)
0xffff7abfe118    56  ldr x5, pc+88 (addr 0x0000ffff7abfe170)    ;; object: 0x5d4edb89 WeakCell for 0x4ec41fa9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfe11c    60  ldur x5, [x5, #7]
0xffff7abfe120    64  tbz w5, #0, #+0x20 (addr 0xffff7abfe140)
0xffff7abfe124    68  ldursw x4, [x5, #15]
0xffff7abfe128    72  tbnz w4, #23, #+0x18 (addr 0xffff7abfe140)
0xffff7abfe12c    76  ldr x4, [jssp], #8
0xffff7abfe130    80  ldr x3, [jssp], #8
0xffff7abfe134    84  ldr x2, pc+68 (addr 0x0000ffff7abfe178)    ;; object: 0x5d4cc939 <String[7]: timeEnd>
0xffff7abfe138    88  ldr x16, pc+72 (addr 0x0000ffff7abfe180)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0xffff7abfe13c    92  br x16
0xffff7abfe140    96  ldr x2, pc+72 (addr 0x0000ffff7abfe188)    ;; object: 0x5d4cc939 <String[7]: timeEnd>
0xffff7abfe144   100  ldr x4, [jssp], #8
0xffff7abfe148   104  ldr x3, [jssp], #8
0xffff7abfe14c   108  ldr x16, pc+68 (addr 0x0000ffff7abfe190)    ;; code: BUILTIN
0xffff7abfe150   112  br x16
0xffff7abfe154   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abfe158   120  d63f03e0       constant
0xffff7abfe15c   124  d503201f       constant
0xffff7abfe160   128  5d4ed151       constant
0xffff7abfe164   132  00000000       constant
0xffff7abfe168   136  5d4ed0e1       constant
0xffff7abfe16c   140  00000000       constant
0xffff7abfe170   144  5d4edb89       constant
0xffff7abfe174   148  00000000       constant
0xffff7abfe178   152  5d4cc939       constant
0xffff7abfe17c   156  00000000       constant
0xffff7abfe180   160  7ab38860       constant
0xffff7abfe184   164  0000ffff       constant
0xffff7abfe188   168  5d4cc939       constant
0xffff7abfe18c   172  00000000       constant
0xffff7abfe190   176  7ab22420       constant
0xffff7abfe194   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abfe0f0  embedded object  (0x5d4ed151 Cell for 0)
0xffff7abfe108  embedded object  (0x5d4ed0e1 WeakCell for 0x4ec0a871 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfe118  embedded object  (0x5d4edb89 WeakCell for 0x4ec41fa9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfe134  embedded object  (0x5d4cc939 <String[7]: timeEnd>)
0xffff7abfe138  code target (HANDLER)  (0xffff7ab38860)
0xffff7abfe140  embedded object  (0x5d4cc939 <String[7]: timeEnd>)
0xffff7abfe14c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abfe154  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = trace
compiler = unknown
Instructions (size = 120)
0xffff7abfe200     0  sub csp, jssp, #0x8 (8)
0xffff7abfe204     4  str x3, [jssp, #-8]!
0xffff7abfe208     8  sub csp, jssp, #0x8 (8)
0xffff7abfe20c    12  str x0, [jssp, #-8]!
0xffff7abfe210    16  ldr x0, pc+72 (addr 0x0000ffff7abfe258)    ;; object: 0x5d4ed151 Cell for 0
0xffff7abfe214    20  ldur x0, [x0, #7]
0xffff7abfe218    24  cmp x0, #0x0 (0)
0xffff7abfe21c    28  b.ne #+0x14 (addr 0xffff7abfe230)
0xffff7abfe220    32  ldr x3, pc+64 (addr 0x0000ffff7abfe260)    ;; object: 0x5d4edbc1 WeakCell for 0x56e4f711 <an Object with map 0x4ec36d99>
0xffff7abfe224    36  ldur x3, [x3, #7]
0xffff7abfe228    40  tbz w3, #0, #+0x8 (addr 0xffff7abfe230)
0xffff7abfe22c    44  b #+0x14 (addr 0xffff7abfe240)
0xffff7abfe230    48  ldr x0, [jssp], #8
0xffff7abfe234    52  ldr x3, [jssp], #8
0xffff7abfe238    56  ldr x16, pc+48 (addr 0x0000ffff7abfe268)    ;; code: BUILTIN
0xffff7abfe23c    60  br x16
0xffff7abfe240    64  add jssp, jssp, #0x10 (16)
0xffff7abfe244    68  mov x1, x3
0xffff7abfe248    72  ldr x16, pc+40 (addr 0x0000ffff7abfe270)    ;; code: HANDLER, LoadConstantStub, minor: 8
0xffff7abfe24c    76  br x16
0xffff7abfe250    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abfe254    84  d63f03e0       constant
0xffff7abfe258    88  5d4ed151       constant
0xffff7abfe25c    92  00000000       constant
0xffff7abfe260    96  5d4edbc1       constant
0xffff7abfe264   100  00000000       constant
0xffff7abfe268   104  7ab222e0       constant
0xffff7abfe26c   108  0000ffff       constant
0xffff7abfe270   112  7ab4c160       constant
0xffff7abfe274   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abfe210  embedded object  (0x5d4ed151 Cell for 0)
0xffff7abfe220  embedded object  (0x5d4edbc1 WeakCell for 0x56e4f711 <an Object with map 0x4ec36d99>)
0xffff7abfe238  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abfe248  code target (HANDLER)  (0xffff7ab4c160)
0xffff7abfe250  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = trace
compiler = unknown
Instructions (size = 184)
0xffff7abfe700     0  sub csp, jssp, #0x8 (8)
0xffff7abfe704     4  str x3, [jssp, #-8]!
0xffff7abfe708     8  sub csp, jssp, #0x8 (8)
0xffff7abfe70c    12  str x4, [jssp, #-8]!
0xffff7abfe710    16  ldr x3, pc+112 (addr 0x0000ffff7abfe780)    ;; object: 0x5d4ed151 Cell for 0
0xffff7abfe714    20  ldur x3, [x3, #7]
0xffff7abfe718    24  cmp x3, #0x0 (0)
0xffff7abfe71c    28  b.ne #+0x44 (addr 0xffff7abfe760)
0xffff7abfe720    32  tbz w0, #0, #+0x40 (addr 0xffff7abfe760)
0xffff7abfe724    36  ldur x3, [x0, #-1]
0xffff7abfe728    40  ldr x4, pc+96 (addr 0x0000ffff7abfe788)    ;; object: 0x5d4ed0e1 WeakCell for 0x4ec0a871 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfe72c    44  ldur x4, [x4, #7]
0xffff7abfe730    48  cmp x3, x4
0xffff7abfe734    52  b.ne #+0x2c (addr 0xffff7abfe760)
0xffff7abfe738    56  ldr x5, pc+88 (addr 0x0000ffff7abfe790)    ;; object: 0x5d4ede09 WeakCell for 0x4ec42001 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfe73c    60  ldur x5, [x5, #7]
0xffff7abfe740    64  tbz w5, #0, #+0x20 (addr 0xffff7abfe760)
0xffff7abfe744    68  ldursw x4, [x5, #15]
0xffff7abfe748    72  tbnz w4, #23, #+0x18 (addr 0xffff7abfe760)
0xffff7abfe74c    76  ldr x4, [jssp], #8
0xffff7abfe750    80  ldr x3, [jssp], #8
0xffff7abfe754    84  ldr x2, pc+68 (addr 0x0000ffff7abfe798)    ;; object: 0x20ddaea9 <String[5]: trace>
0xffff7abfe758    88  ldr x16, pc+72 (addr 0x0000ffff7abfe7a0)    ;; code: HANDLER, StoreTransitionStub, minor: 196611
0xffff7abfe75c    92  br x16
0xffff7abfe760    96  ldr x2, pc+72 (addr 0x0000ffff7abfe7a8)    ;; object: 0x20ddaea9 <String[5]: trace>
0xffff7abfe764   100  ldr x4, [jssp], #8
0xffff7abfe768   104  ldr x3, [jssp], #8
0xffff7abfe76c   108  ldr x16, pc+68 (addr 0x0000ffff7abfe7b0)    ;; code: BUILTIN
0xffff7abfe770   112  br x16
0xffff7abfe774   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abfe778   120  d63f03e0       constant
0xffff7abfe77c   124  d503201f       constant
0xffff7abfe780   128  5d4ed151       constant
0xffff7abfe784   132  00000000       constant
0xffff7abfe788   136  5d4ed0e1       constant
0xffff7abfe78c   140  00000000       constant
0xffff7abfe790   144  5d4ede09       constant
0xffff7abfe794   148  00000000       constant
0xffff7abfe798   152  20ddaea9       constant
0xffff7abfe79c   156  00000000       constant
0xffff7abfe7a0   160  7ab99940       constant
0xffff7abfe7a4   164  0000ffff       constant
0xffff7abfe7a8   168  20ddaea9       constant
0xffff7abfe7ac   172  00000000       constant
0xffff7abfe7b0   176  7ab22420       constant
0xffff7abfe7b4   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abfe710  embedded object  (0x5d4ed151 Cell for 0)
0xffff7abfe728  embedded object  (0x5d4ed0e1 WeakCell for 0x4ec0a871 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfe738  embedded object  (0x5d4ede09 WeakCell for 0x4ec42001 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfe754  embedded object  (0x20ddaea9 <String[5]: trace>)
0xffff7abfe758  code target (HANDLER)  (0xffff7ab99940)
0xffff7abfe760  embedded object  (0x20ddaea9 <String[5]: trace>)
0xffff7abfe76c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abfe774  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7abfe820     0  ldur x0, [x1, #-1]
0xffff7abfe824     4  ldur x0, [x0, #47]
0xffff7abfe828     8  movz x16, #0x107
0xffff7abfe82c    12  ldr x0, [x0, x16]
0xffff7abfe830    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0xffff7abfe820     0  ldur x0, [x1, #-1]
0xffff7abfe824     4  ldur x0, [x0, #47]
0xffff7abfe828     8  movz x16, #0x107
0xffff7abfe82c    12  ldr x0, [x0, x16]
0xffff7abfe830    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = assert
compiler = unknown
Instructions (size = 120)
0xffff7abfe8a0     0  sub csp, jssp, #0x8 (8)
0xffff7abfe8a4     4  str x3, [jssp, #-8]!
0xffff7abfe8a8     8  sub csp, jssp, #0x8 (8)
0xffff7abfe8ac    12  str x0, [jssp, #-8]!
0xffff7abfe8b0    16  ldr x0, pc+72 (addr 0x0000ffff7abfe8f8)    ;; object: 0x5d4ed151 Cell for 0
0xffff7abfe8b4    20  ldur x0, [x0, #7]
0xffff7abfe8b8    24  cmp x0, #0x0 (0)
0xffff7abfe8bc    28  b.ne #+0x14 (addr 0xffff7abfe8d0)
0xffff7abfe8c0    32  ldr x3, pc+64 (addr 0x0000ffff7abfe900)    ;; object: 0x5d4ede41 WeakCell for 0x56e4f711 <an Object with map 0x4ec36d99>
0xffff7abfe8c4    36  ldur x3, [x3, #7]
0xffff7abfe8c8    40  tbz w3, #0, #+0x8 (addr 0xffff7abfe8d0)
0xffff7abfe8cc    44  b #+0x14 (addr 0xffff7abfe8e0)
0xffff7abfe8d0    48  ldr x0, [jssp], #8
0xffff7abfe8d4    52  ldr x3, [jssp], #8
0xffff7abfe8d8    56  ldr x16, pc+48 (addr 0x0000ffff7abfe908)    ;; code: BUILTIN
0xffff7abfe8dc    60  br x16
0xffff7abfe8e0    64  add jssp, jssp, #0x10 (16)
0xffff7abfe8e4    68  mov x1, x3
0xffff7abfe8e8    72  ldr x16, pc+40 (addr 0x0000ffff7abfe910)    ;; code: HANDLER, LoadConstantStub, minor: 9
0xffff7abfe8ec    76  br x16
0xffff7abfe8f0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7abfe8f4    84  d63f03e0       constant
0xffff7abfe8f8    88  5d4ed151       constant
0xffff7abfe8fc    92  00000000       constant
0xffff7abfe900    96  5d4ede41       constant
0xffff7abfe904   100  00000000       constant
0xffff7abfe908   104  7ab222e0       constant
0xffff7abfe90c   108  0000ffff       constant
0xffff7abfe910   112  7abfe820       constant
0xffff7abfe914   116  0000ffff       constant


RelocInfo (size = 10)
0xffff7abfe8b0  embedded object  (0x5d4ed151 Cell for 0)
0xffff7abfe8c0  embedded object  (0x5d4ede41 WeakCell for 0x56e4f711 <an Object with map 0x4ec36d99>)
0xffff7abfe8d8  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7abfe8e8  code target (HANDLER)  (0xffff7abfe820)
0xffff7abfe8f0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = assert
compiler = unknown
Instructions (size = 184)
0xffff7abfecc0     0  sub csp, jssp, #0x8 (8)
0xffff7abfecc4     4  str x3, [jssp, #-8]!
0xffff7abfecc8     8  sub csp, jssp, #0x8 (8)
0xffff7abfeccc    12  str x4, [jssp, #-8]!
0xffff7abfecd0    16  ldr x3, pc+112 (addr 0x0000ffff7abfed40)    ;; object: 0x5d4ed151 Cell for 0
0xffff7abfecd4    20  ldur x3, [x3, #7]
0xffff7abfecd8    24  cmp x3, #0x0 (0)
0xffff7abfecdc    28  b.ne #+0x44 (addr 0xffff7abfed20)
0xffff7abfece0    32  tbz w0, #0, #+0x40 (addr 0xffff7abfed20)
0xffff7abfece4    36  ldur x3, [x0, #-1]
0xffff7abfece8    40  ldr x4, pc+96 (addr 0x0000ffff7abfed48)    ;; object: 0x5d4ed0e1 WeakCell for 0x4ec0a871 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfecec    44  ldur x4, [x4, #7]
0xffff7abfecf0    48  cmp x3, x4
0xffff7abfecf4    52  b.ne #+0x2c (addr 0xffff7abfed20)
0xffff7abfecf8    56  ldr x5, pc+88 (addr 0x0000ffff7abfed50)    ;; object: 0x5d4ee009 WeakCell for 0x4ec42059 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7abfecfc    60  ldur x5, [x5, #7]
0xffff7abfed00    64  tbz w5, #0, #+0x20 (addr 0xffff7abfed20)
0xffff7abfed04    68  ldursw x4, [x5, #15]
0xffff7abfed08    72  tbnz w4, #23, #+0x18 (addr 0xffff7abfed20)
0xffff7abfed0c    76  ldr x4, [jssp], #8
0xffff7abfed10    80  ldr x3, [jssp], #8
0xffff7abfed14    84  ldr x2, pc+68 (addr 0x0000ffff7abfed58)    ;; object: 0x20dbdc41 <String[6]: assert>
0xffff7abfed18    88  ldr x16, pc+72 (addr 0x0000ffff7abfed60)    ;; code: HANDLER, StoreTransitionStub, minor: 196612
0xffff7abfed1c    92  br x16
0xffff7abfed20    96  ldr x2, pc+72 (addr 0x0000ffff7abfed68)    ;; object: 0x20dbdc41 <String[6]: assert>
0xffff7abfed24   100  ldr x4, [jssp], #8
0xffff7abfed28   104  ldr x3, [jssp], #8
0xffff7abfed2c   108  ldr x16, pc+68 (addr 0x0000ffff7abfed70)    ;; code: BUILTIN
0xffff7abfed30   112  br x16
0xffff7abfed34   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0xffff7abfed38   120  d63f03e0       constant
0xffff7abfed3c   124  d503201f       constant
0xffff7abfed40   128  5d4ed151       constant
0xffff7abfed44   132  00000000       constant
0xffff7abfed48   136  5d4ed0e1       constant
0xffff7abfed4c   140  00000000       constant
0xffff7abfed50   144  5d4ee009       constant
0xffff7abfed54   148  00000000       constant
0xffff7abfed58   152  20dbdc41       constant
0xffff7abfed5c   156  00000000       constant
0xffff7abfed60   160  7ab9a100       constant
0xffff7abfed64   164  0000ffff       constant
0xffff7abfed68   168  20dbdc41       constant
0xffff7abfed6c   172  00000000       constant
0xffff7abfed70   176  7ab22420       constant
0xffff7abfed74   180  0000ffff       constant


RelocInfo (size = 13)
0xffff7abfecd0  embedded object  (0x5d4ed151 Cell for 0)
0xffff7abfece8  embedded object  (0x5d4ed0e1 WeakCell for 0x4ec0a871 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfecf8  embedded object  (0x5d4ee009 WeakCell for 0x4ec42059 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7abfed14  embedded object  (0x20dbdc41 <String[6]: assert>)
0xffff7abfed18  code target (HANDLER)  (0xffff7ab9a100)
0xffff7abfed20  embedded object  (0x20dbdc41 <String[6]: assert>)
0xffff7abfed2c  code target (BUILTIN)  (0xffff7ab22420)
0xffff7abfed34  constant pool (size 68)

kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = RECEIVER*RECEIVER -> KNOWN_RECEIVER
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 192)
0xffff7ac07840     0  and x16, x0, x1
0xffff7ac07844     4  tbz w16, #0, #+0x2c (addr 0xffff7ac07870)
0xffff7ac07848     8  ldr x12, pc+152 (addr 0x0000ffff7ac078e0)    ;; object: 0x20dc71e1 WeakCell for 0x4ec06989 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ac0784c    12  ldur x12, [x12, #7]
0xffff7ac07850    16  ldur x10, [x0, #-1]
0xffff7ac07854    20  ldur x11, [x1, #-1]
0xffff7ac07858    24  cmp x10, x12
0xffff7ac0785c    28  b.ne #+0x14 (addr 0xffff7ac07870)
0xffff7ac07860    32  cmp x11, x12
0xffff7ac07864    36  b.ne #+0xc (addr 0xffff7ac07870)
0xffff7ac07868    40  sub x0, x0, x1
0xffff7ac0786c    44  ret
0xffff7ac07870    48  movz x16, #0xc00000000
0xffff7ac07874    52  sub csp, jssp, #0x10 (16)
0xffff7ac07878    56  stp fp, lr, [jssp, #-16]!
0xffff7ac0787c    60  sub csp, jssp, #0x10 (16)
0xffff7ac07880    64  str x16, [jssp, #-8]!
0xffff7ac07884    68  ldr x17, pc+100 (addr 0x0000ffff7ac078e8)    ;; object: 0xffff7ac077e1 <Code: COMPARE_IC>
0xffff7ac07888    72  sub csp, jssp, #0x10 (16)
0xffff7ac0788c    76  str x17, [jssp, #-8]!
0xffff7ac07890    80  add fp, jssp, #0x10 (16)
0xffff7ac07894    84  sub csp, jssp, #0x18 (24)
0xffff7ac07898    88  stp lr, x0, [jssp, #-24]!
0xffff7ac0789c    92  str x1, [jssp, #16]
0xffff7ac078a0    96  movz x10, #0x2f00000000
0xffff7ac078a4   100  sub csp, jssp, #0x18 (24)
0xffff7ac078a8   104  stp x10, x0, [jssp, #-24]!
0xffff7ac078ac   108  str x1, [jssp, #16]
0xffff7ac078b0   112  movz x0, #0x3
0xffff7ac078b4   116  ldr x1, pc+60 (addr 0x0000ffff7ac078f0)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ac078b8   120  ldr x16, pc+64 (addr 0x0000ffff7ac078f8)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ac078bc   124  blr x16
0xffff7ac078c0   128  add x11, x0, #0x5f (95)
0xffff7ac078c4   132  ldr x1, [jssp, #16]
0xffff7ac078c8   136  ldp lr, x0, [jssp], #24
0xffff7ac078cc   140  mov jssp, fp
0xffff7ac078d0   144  ldp fp, lr, [jssp], #16
0xffff7ac078d4   148  br x11
0xffff7ac078d8   152  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0xffff7ac078dc   156  d63f03e0       constant
0xffff7ac078e0   160  20dc71e1       constant
0xffff7ac078e4   164  00000000       constant
0xffff7ac078e8   168  7ac077e1       constant
0xffff7ac078ec   172  0000ffff       constant
0xffff7ac078f0   176  00c8a980       constant
0xffff7ac078f4   180  00000000       constant
0xffff7ac078f8   184  7ab06060       constant
0xffff7ac078fc   188  0000ffff       constant


RelocInfo (size = 11)
0xffff7ac07848  embedded object  (0x20dc71e1 WeakCell for 0x4ec06989 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ac07884  embedded object  (0xffff7ac077e1 <Code: COMPARE_IC>)
0xffff7ac078b4  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ac078b8  code target (STUB)  (0xffff7ab06060)
0xffff7ac078d8  constant pool (size 40)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0xffff7ac07960     0  mov x5, x0
0xffff7ac07964     4  tbnz w5, #0, #+0xc (addr 0xffff7ac07970)
0xffff7ac07968     8  stur x5, [x1, #23]
0xffff7ac0796c    12  ret
0xffff7ac07970    16  movz x16, #0x0
0xffff7ac07974    20  sub csp, jssp, #0x10 (16)
0xffff7ac07978    24  stp fp, lr, [jssp, #-16]!
0xffff7ac0797c    28  bl #+0x4 (addr 0xffff7ac07980)
0xffff7ac07980    32  movz x17, #0xa00000000
0xffff7ac07984    36  sub csp, jssp, #0x10 (16)
0xffff7ac07988    40  stp x17, cp, [jssp, #-16]!
0xffff7ac0798c    44  add fp, jssp, #0x10 (16)
0xffff7ac07990    48  ldr x17, pc+24 (addr 0x0000ffff7ac079a8)    ;; lazy deoptimization bailout 0
0xffff7ac07994    52  add x17, x17, x16
0xffff7ac07998    56  br x17
0xffff7ac0799c    60  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ac079a0    64  d63f03e0       constant
0xffff7ac079a4    68  d503201f       constant
0xffff7ac079a8    72  7a906000       constant
0xffff7ac079ac    76  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 8)
0xffff7ac07990  runtime entry
0xffff7ac0799c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0xffff7ac07960     0  mov x5, x0
0xffff7ac07964     4  tbnz w5, #0, #+0xc (addr 0xffff7ac07970)
0xffff7ac07968     8  stur x5, [x1, #23]
0xffff7ac0796c    12  ret
0xffff7ac07970    16  movz x16, #0x0
0xffff7ac07974    20  sub csp, jssp, #0x10 (16)
0xffff7ac07978    24  stp fp, lr, [jssp, #-16]!
0xffff7ac0797c    28  bl #+0x4 (addr 0xffff7ac07980)
0xffff7ac07980    32  movz x17, #0xa00000000
0xffff7ac07984    36  sub csp, jssp, #0x10 (16)
0xffff7ac07988    40  stp x17, cp, [jssp, #-16]!
0xffff7ac0798c    44  add fp, jssp, #0x10 (16)
0xffff7ac07990    48  ldr x17, pc+24 (addr 0x0000ffff7ac079a8)    ;; lazy deoptimization bailout 0
0xffff7ac07994    52  add x17, x17, x16
0xffff7ac07998    56  br x17
0xffff7ac0799c    60  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ac079a0    64  d63f03e0       constant
0xffff7ac079a4    68  d503201f       constant
0xffff7ac079a8    72  7a906000       constant
0xffff7ac079ac    76  0000ffff       constant


Safepoints (size = 8)

RelocInfo (size = 8)
0xffff7ac07990  runtime entry
0xffff7ac0799c  constant pool (size 20)


kind = STUB
major_key = DoubleToIStub
name = DoubleToIStub
compiler = unknown
Instructions (size = 60)
0xffff7ac07a20     0  sub csp, jssp, #0x10 (16)
0xffff7ac07a24     4  stp x1, x0, [jssp, #-16]!
0xffff7ac07a28     8  ldur x4, [x2, #7]
0xffff7ac07a2c    12  ubfx x0, x4, #52, #11
0xffff7ac07a30    16  cmp x0, #0x453 (1107)
0xffff7ac07a34    20  csel x4, xzr, x4, ge
0xffff7ac07a38    24  b.ge #+0x1c (addr 0xffff7ac07a54)
0xffff7ac07a3c    28  ubfx x1, x4, #0, #52
0xffff7ac07a40    32  orr x1, x1, #0x10000000000000
0xffff7ac07a44    36  tst x4, #0x8000000000000000
0xffff7ac07a48    40  cneg x1, x1, ne
0xffff7ac07a4c    44  sub x0, x0, #0x433 (1075)
0xffff7ac07a50    48  lsl x4, x1, x0
0xffff7ac07a54    52  ldp x1, x0, [jssp], #16
0xffff7ac07a58    56  ret


RelocInfo (size = 0)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = StringAddStub
compiler = crankshaft
Instructions (size = 1483)
0xffff7ac07ac0     0  movz x16, #0xa00000000
0xffff7ac07ac4     4  sub csp, jssp, #0x10 (16)
0xffff7ac07ac8     8  stp fp, lr, [jssp, #-16]!
0xffff7ac07acc    12  mov fp, jssp
0xffff7ac07ad0    16  sub csp, jssp, #0x20 (32)
0xffff7ac07ad4    20  sub jssp, jssp, #0x20 (32)
0xffff7ac07ad8    24  stur x16, [fp, #-8]
0xffff7ac07adc    28  str x1, [jssp, #16]
0xffff7ac07ae0    32  str x0, [jssp, #8]
0xffff7ac07ae4    36  str cp, [jssp]
0xffff7ac07ae8    40  mov x2, cp
0xffff7ac07aec    44  tbz w0, #0, #+0xb8 (addr 0xffff7ac07ba4)
0xffff7ac07af0    48  ldur x3, [x0, #-1]
0xffff7ac07af4    52  ldrb w4, [x3, #11]
0xffff7ac07af8    56  cmp w4, #0x80 (128)
0xffff7ac07afc    60  b.lt #+0xa0 (addr 0xffff7ac07b9c)
0xffff7ac07b00    64  cmp w4, #0x83 (131)
0xffff7ac07b04    68  b.le #+0x80 (addr 0xffff7ac07b84)
0xffff7ac07b08    72  ldur x4, [x2, #39]
0xffff7ac07b0c    76  movz x16, #0x217
0xffff7ac07b10    80  ldr x5, [x4, x16]
0xffff7ac07b14    84  movz x16, #0x2ef
0xffff7ac07b18    88  ldr x6, [x4, x16]
0xffff7ac07b1c    92  movz x16, #0x2e7
0xffff7ac07b20    96  ldr x4, [x4, x16]
0xffff7ac07b24   100  ldur x4, [x4, #23]
0xffff7ac07b28   104  ldur x7, [x3, #23]
0xffff7ac07b2c   108  ldur x7, [x7, #-1]
0xffff7ac07b30   112  cmp x3, x4
0xffff7ac07b34   116  b.ne #+0x1c (addr 0xffff7ac07b50)
0xffff7ac07b38   120  cmp x7, x6
0xffff7ac07b3c   124  b.ne #+0x14 (addr 0xffff7ac07b50)
0xffff7ac07b40   128  ldur x3, [x7, #23]
0xffff7ac07b44   132  ldur x3, [x3, #-1]
0xffff7ac07b48   136  cmp x3, x5
0xffff7ac07b4c   140  b.eq #+0x2c (addr 0xffff7ac07b78)
0xffff7ac07b50   144  sub csp, jssp, #0x8 (8)
0xffff7ac07b54   148  str x0, [jssp, #-8]!
0xffff7ac07b58   152  mov cp, x2
0xffff7ac07b5c   156  movz x0, #0x1
0xffff7ac07b60   160  movz x1, #0x84c0
0xffff7ac07b64   164  movk x1, #0xe4, lsl #16
0xffff7ac07b68   168  ldr x16, pc+1032 (addr 0x0000ffff7ac07f70)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ac07b6c   172  blr x16
0xffff7ac07b70   176  ldr x1, [jssp, #8]
0xffff7ac07b74   180  b #+0x18 (addr 0xffff7ac07b8c)
0xffff7ac07b78   184  ldr x1, [jssp, #8]
0xffff7ac07b7c   188  ldur x0, [x1, #23]
0xffff7ac07b80   192  b #+0xc (addr 0xffff7ac07b8c)
0xffff7ac07b84   196  mov x1, x0
0xffff7ac07b88   200  mov x0, x1
0xffff7ac07b8c   204  ldr cp, [jssp]
0xffff7ac07b90   208  ldr x16, pc+1000 (addr 0x0000ffff7ac07f78)    ;; code: STUB, ToStringStub, minor: 0
0xffff7ac07b94   212  blr x16
0xffff7ac07b98   216  b #+0x7c (addr 0xffff7ac07c14)
0xffff7ac07b9c   220  ldr x0, [jssp, #8]
0xffff7ac07ba0   224  b #+0x74 (addr 0xffff7ac07c14)
0xffff7ac07ba4   228  ldr x0, [x26, #368]
0xffff7ac07ba8   232  ldur w1, [x0, #11]
0xffff7ac07bac   236  asr w1, w1, #1
0xffff7ac07bb0   240  sub w1, w1, #0x1 (1)
0xffff7ac07bb4   244  ldr x2, [jssp, #8]
0xffff7ac07bb8   248  tbz w2, #0, #+0xc (addr 0xffff7ac07bc4)
0xffff7ac07bbc   252  ldr x16, pc+940 (addr 0x0000ffff7ac07f68)    ;; lazy deoptimization bailout 2
0xffff7ac07bc0   256  blr x16
0xffff7ac07bc4   260  tbnz w2, #0, #+0x2a8 (addr 0xffff7ac07e6c)
0xffff7ac07bc8   264  asr x4, x2, #32
0xffff7ac07bcc   268  and w1, w1, w4
0xffff7ac07bd0   272  lsl w1, w1, #1
0xffff7ac07bd4   276  add x3, x0, #0xf (15)
0xffff7ac07bd8   280  ldr x4, [x3, w1, sxtw #3]
0xffff7ac07bdc   284  cmp x2, x4
0xffff7ac07be0   288  b.eq #+0x28 (addr 0xffff7ac07c08)
0xffff7ac07be4   292  sub csp, jssp, #0x8 (8)
0xffff7ac07be8   296  str x2, [jssp, #-8]!
0xffff7ac07bec   300  ldr cp, [jssp, #8]
0xffff7ac07bf0   304  movz x0, #0x1
0xffff7ac07bf4   308  movz x1, #0xce00
0xffff7ac07bf8   312  movk x1, #0xe3, lsl #16
0xffff7ac07bfc   316  ldr x16, pc+900 (addr 0x0000ffff7ac07f80)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ac07c00   320  blr x16
0xffff7ac07c04   324  b #+0x10 (addr 0xffff7ac07c14)
0xffff7ac07c08   328  add x2, x0, #0x17 (23)
0xffff7ac07c0c   332  ldr x3, [x2, w1, sxtw #3]
0xffff7ac07c10   336  mov x0, x3
0xffff7ac07c14   340  ldr x1, [jssp, #16]
0xffff7ac07c18   344  ldur w2, [x1, #19]
0xffff7ac07c1c   348  ldur w3, [x0, #19]
0xffff7ac07c20   352  cbz w2, #+0x23c (addr 0xffff7ac07e5c)
0xffff7ac07c24   356  cbz w3, #+0x230 (addr 0xffff7ac07e54)
0xffff7ac07c28   360  add w4, w2, w3
0xffff7ac07c2c   364  movn w16, #0xe0
0xffff7ac07c30   368  cmp w4, w16, lsr #4
0xffff7ac07c34   372  b.hs #+0x3c4 (addr 0xffff7ac07ff8)
0xffff7ac07c38   376  cmp w4, #0xd (13)
0xffff7ac07c3c   380  b.ge #+0x194 (addr 0xffff7ac07dd0)
0xffff7ac07c40   384  ldur x5, [x1, #-1]
0xffff7ac07c44   388  ldrb w5, [x5, #11]
0xffff7ac07c48   392  ldur x6, [x0, #-1]
0xffff7ac07c4c   396  ldrb w6, [x6, #11]
0xffff7ac07c50   400  orr w7, w5, w6
0xffff7ac07c54   404  eor w5, w5, w6
0xffff7ac07c58   408  and w5, w5, #0x4
0xffff7ac07c5c   412  cbnz w5, #+0xc (addr 0xffff7ac07c68)
0xffff7ac07c60   416  and w5, w7, #0x3
0xffff7ac07c64   420  cbz w5, #+0x28 (addr 0xffff7ac07c8c)
0xffff7ac07c68   424  sub csp, jssp, #0x10 (16)
0xffff7ac07c6c   428  stp x0, x1, [jssp, #-16]!
0xffff7ac07c70   432  ldr cp, [jssp, #16]
0xffff7ac07c74   436  movz x0, #0x2
0xffff7ac07c78   440  movz x1, #0xa6c0
0xffff7ac07c7c   444  movk x1, #0xec, lsl #16
0xffff7ac07c80   448  ldr x16, pc+776 (addr 0x0000ffff7ac07f88)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ac07c84   452  blr x16
0xffff7ac07c88   456  b #+0x1d4 (addr 0xffff7ac07e5c)
0xffff7ac07c8c   460  and w1, w7, #0x4
0xffff7ac07c90   464  cbnz w1, #+0x14 (addr 0xffff7ac07ca4)
0xffff7ac07c94   468  lsl w1, w4, #1
0xffff7ac07c98   472  mov x5, x1
0xffff7ac07c9c   476  ldr x1, pc+756 (addr 0x0000ffff7ac07f90)    ;; object: 0x4ec04ba1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ac07ca0   480  b #+0xc (addr 0xffff7ac07cac)
0xffff7ac07ca4   484  mov x5, x4
0xffff7ac07ca8   488  ldr x1, pc+752 (addr 0x0000ffff7ac07f98)    ;; object: 0x4ec04bf9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ac07cac   492  add w5, w5, #0x1f (31)
0xffff7ac07cb0   496  and w5, w5, #0xfffffff8
0xffff7ac07cb4   500  cmp w5, #0x96000 (614400)
0xffff7ac07cb8   504  b.lt #+0x2c (addr 0xffff7ac07ce4)
0xffff7ac07cbc   508  sub csp, jssp, #0x10 (16)
0xffff7ac07cc0   512  ldr x1, [jssp, #16]
0xffff7ac07cc4   516  stp x0, x1, [jssp, #-16]!
0xffff7ac07cc8   520  ldr cp, [jssp, #16]
0xffff7ac07ccc   524  movz x0, #0x2
0xffff7ac07cd0   528  movz x1, #0xa6c0
0xffff7ac07cd4   532  movk x1, #0xec, lsl #16
0xffff7ac07cd8   536  ldr x16, pc+712 (addr 0x0000ffff7ac07fa0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ac07cdc   540  blr x16
0xffff7ac07ce0   544  b #+0x17c (addr 0xffff7ac07e5c)
0xffff7ac07ce4   548  sxtw x5, w5
0xffff7ac07ce8   552  movz x6, #0xe2c0
0xffff7ac07cec   556  movk x6, #0x9ab, lsl #16
0xffff7ac07cf0   560  ldp x8, x16, [x6]
0xffff7ac07cf4   564  adds x7, x8, x5
0xffff7ac07cf8   568  ccmp x7, x16, #nzCv, lo
0xffff7ac07cfc   572  b.hi #+0x1d0 (addr 0xffff7ac07ecc)
0xffff7ac07d00   576  str x7, [x6]
0xffff7ac07d04   580  orr x8, x8, #0x1
0xffff7ac07d08   584  stur x1, [x8, #-1]
0xffff7ac07d0c   588  movz w5, #0x3
0xffff7ac07d10   592  stur w5, [x8, #7]
0xffff7ac07d14   596  lsl x4, x4, #32
0xffff7ac07d18   600  stur x4, [x8, #15]
0xffff7ac07d1c   604  ldr x4, pc+652 (addr 0x0000ffff7ac07fa8)    ;; object: 0x4ec04ba1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ac07d20   608  cmp x1, x4
0xffff7ac07d24   612  b.eq #+0x54 (addr 0xffff7ac07d78)
0xffff7ac07d28   616  ldr x5, [jssp, #16]
0xffff7ac07d2c   620  movz x1, #0x0
0xffff7ac07d30   624  cmp w2, w1
0xffff7ac07d34   628  b.le #+0x1c (addr 0xffff7ac07d50)
0xffff7ac07d38   632  add x4, x5, #0x17 (23)
0xffff7ac07d3c   636  ldrb w6, [x4, w1, sxtw]
0xffff7ac07d40   640  add x4, x8, #0x17 (23)
0xffff7ac07d44   644  strb w6, [x4, w1, sxtw]
0xffff7ac07d48   648  add w1, w1, #0x1 (1)
0xffff7ac07d4c   652  b #-0x1c (addr 0xffff7ac07d30)
0xffff7ac07d50   656  movz x1, #0x0
0xffff7ac07d54   660  cmp w3, w1
0xffff7ac07d58   664  b.le #+0x70 (addr 0xffff7ac07dc8)
0xffff7ac07d5c   668  add x4, x0, #0x17 (23)
0xffff7ac07d60   672  ldrb w5, [x4, w1, sxtw]
0xffff7ac07d64   676  add w4, w2, w1
0xffff7ac07d68   680  add x6, x8, #0x17 (23)
0xffff7ac07d6c   684  strb w5, [x6, w4, sxtw]
0xffff7ac07d70   688  add w1, w1, #0x1 (1)
0xffff7ac07d74   692  b #-0x20 (addr 0xffff7ac07d54)
0xffff7ac07d78   696  ldr x5, [jssp, #16]
0xffff7ac07d7c   700  movz x1, #0x0
0xffff7ac07d80   704  cmp w2, w1
0xffff7ac07d84   708  b.le #+0x1c (addr 0xffff7ac07da0)
0xffff7ac07d88   712  add x4, x5, #0x17 (23)
0xffff7ac07d8c   716  ldrh w6, [x4, w1, sxtw #1]
0xffff7ac07d90   720  add x4, x8, #0x17 (23)
0xffff7ac07d94   724  strh w6, [x4, w1, sxtw #1]
0xffff7ac07d98   728  add w1, w1, #0x1 (1)
0xffff7ac07d9c   732  b #-0x1c (addr 0xffff7ac07d80)
0xffff7ac07da0   736  movz x1, #0x0
0xffff7ac07da4   740  cmp w3, w1
0xffff7ac07da8   744  b.le #+0x20 (addr 0xffff7ac07dc8)
0xffff7ac07dac   748  add x4, x0, #0x17 (23)
0xffff7ac07db0   752  ldrh w5, [x4, w1, sxtw #1]
0xffff7ac07db4   756  add w4, w2, w1
0xffff7ac07db8   760  add x6, x8, #0x17 (23)
0xffff7ac07dbc   764  strh w5, [x6, w4, sxtw #1]
0xffff7ac07dc0   768  add w1, w1, #0x1 (1)
0xffff7ac07dc4   772  b #-0x20 (addr 0xffff7ac07da4)
0xffff7ac07dc8   776  mov x0, x8
0xffff7ac07dcc   780  b #+0x90 (addr 0xffff7ac07e5c)
0xffff7ac07dd0   784  mov x5, x1
0xffff7ac07dd4   788  ldur x1, [x5, #-1]
0xffff7ac07dd8   792  ldrb w1, [x1, #11]
0xffff7ac07ddc   796  ldur x2, [x0, #-1]
0xffff7ac07de0   800  ldrb w2, [x2, #11]
0xffff7ac07de4   804  movz x6, #0xe2c0
0xffff7ac07de8   808  movk x6, #0x9ab, lsl #16
0xffff7ac07dec   812  ldp x7, x3, [x6]
0xffff7ac07df0   816  adds x16, x7, #0x28 (40)
0xffff7ac07df4   820  ccmp x16, x3, #nzCv, lo
0xffff7ac07df8   824  b.hi #+0x11c (addr 0xffff7ac07f14)
0xffff7ac07dfc   828  str x16, [x6]
0xffff7ac07e00   832  orr x7, x7, #0x1
0xffff7ac07e04   836  and w3, w1, w2
0xffff7ac07e08   840  eor w1, w1, w2
0xffff7ac07e0c   844  and w2, w3, #0xc
0xffff7ac07e10   848  cbnz w2, #+0x1c (addr 0xffff7ac07e2c)
0xffff7ac07e14   852  and w1, w1, #0xc
0xffff7ac07e18   856  cmp w1, #0xc (12)
0xffff7ac07e1c   860  b.eq #+0x10 (addr 0xffff7ac07e2c)
0xffff7ac07e20   864  ldr x1, pc+400 (addr 0x0000ffff7ac07fb0)    ;; object: 0x4ec04c51 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ac07e24   868  stur x1, [x7, #-1]
0xffff7ac07e28   872  b #+0xc (addr 0xffff7ac07e34)
0xffff7ac07e2c   876  ldr x1, pc+396 (addr 0x0000ffff7ac07fb8)    ;; object: 0x4ec04ca9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ac07e30   880  stur x1, [x7, #-1]
0xffff7ac07e34   884  movz w1, #0x3
0xffff7ac07e38   888  stur w1, [x7, #7]
0xffff7ac07e3c   892  lsl x1, x4, #32
0xffff7ac07e40   896  stur x1, [x7, #15]
0xffff7ac07e44   900  stur x5, [x7, #23]
0xffff7ac07e48   904  stur x0, [x7, #31]
0xffff7ac07e4c   908  mov x0, x7
0xffff7ac07e50   912  b #+0xc (addr 0xffff7ac07e5c)
0xffff7ac07e54   916  mov x5, x1
0xffff7ac07e58   920  mov x0, x5
0xffff7ac07e5c   924  ldr cp, [jssp]
0xffff7ac07e60   928  mov jssp, fp
0xffff7ac07e64   932  ldp fp, lr, [jssp], #16
0xffff7ac07e68   936  ret
0xffff7ac07e6c   940  ldur x16, [x2, #-1]
0xffff7ac07e70   944  ldr x17, [x26, #120]
0xffff7ac07e74   948  cmp x16, x17
0xffff7ac07e78   952  b.ne #+0x30 (addr 0xffff7ac07ea8)
0xffff7ac07e7c   956  ldur d30, [x2, #7]
0xffff7ac07e80   960  fcvtzs x4, d30
0xffff7ac07e84   964  cmp x4, #0x1 (1)
0xffff7ac07e88   968  ccmn x4, #1, #nzcV, vc
0xffff7ac07e8c   972  b.vc #+0x18 (addr 0xffff7ac07ea4)
0xffff7ac07e90   976  sub csp, jssp, #0x8 (8)
0xffff7ac07e94   980  str lr, [jssp, #-8]!
0xffff7ac07e98   984  ldr x16, pc+296 (addr 0x0000ffff7ac07fc0)    ;; code: STUB, DoubleToIStub, minor: 127234
0xffff7ac07e9c   988  blr x16
0xffff7ac07ea0   992  ldr lr, [jssp], #8
0xffff7ac07ea4   996  b #+0x24 (addr 0xffff7ac07ec8)
0xffff7ac07ea8  1000  ldp x4, x3, [x26, #64]
0xffff7ac07eac  1004  cmp x2, x4
0xffff7ac07eb0  1008  cset x4, eq
0xffff7ac07eb4  1012  ccmp x2, x3, #nZcv, ne
0xffff7ac07eb8  1016  b.eq #+0x10 (addr 0xffff7ac07ec8)
0xffff7ac07ebc  1020  ldr x16, [x26, #40]
0xffff7ac07ec0  1024  cmp x2, x16
0xffff7ac07ec4  1028  b.ne #+0x13c (addr 0xffff7ac08000)
0xffff7ac07ec8  1032  b #-0x2fc (addr 0xffff7ac07bcc)
0xffff7ac07ecc  1036  movz x8, #0x0
0xffff7ac07ed0  1040  mov x16, lr
0xffff7ac07ed4  1044  ldr x17, pc+244 (addr 0x0000ffff7ac07fc8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ac07ed8  1048  blr x17
0xffff7ac07edc  1052  lsl x0, x5, #32
0xffff7ac07ee0  1056  movz x10, #0x0
0xffff7ac07ee4  1060  sub csp, jssp, #0x10 (16)
0xffff7ac07ee8  1064  stp x10, x0, [jssp, #-16]!
0xffff7ac07eec  1068  ldur cp, [fp, #-32]
0xffff7ac07ef0  1072  movz x0, #0x2
0xffff7ac07ef4  1076  movz x1, #0x5b88
0xffff7ac07ef8  1080  movk x1, #0xe2, lsl #16
0xffff7ac07efc  1084  ldr x16, pc+212 (addr 0x0000ffff7ac07fd0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ac07f00  1088  blr x16
0xffff7ac07f04  1092  str x0, [jssp, #64]
0xffff7ac07f08  1096  ldr x16, pc+208 (addr 0x0000ffff7ac07fd8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ac07f0c  1100  blr x16
0xffff7ac07f10  1104  b #-0x208 (addr 0xffff7ac07d08)
0xffff7ac07f14  1108  movz x7, #0x0
0xffff7ac07f18  1112  mov x16, lr
0xffff7ac07f1c  1116  ldr x17, pc+196 (addr 0x0000ffff7ac07fe0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ac07f20  1120  blr x17
0xffff7ac07f24  1124  movz x0, #0x2800000000
0xffff7ac07f28  1128  movz x10, #0x0
0xffff7ac07f2c  1132  sub csp, jssp, #0x10 (16)
0xffff7ac07f30  1136  stp x10, x0, [jssp, #-16]!
0xffff7ac07f34  1140  ldur cp, [fp, #-32]
0xffff7ac07f38  1144  movz x0, #0x2
0xffff7ac07f3c  1148  movz x1, #0x5b88
0xffff7ac07f40  1152  movk x1, #0xe2, lsl #16
0xffff7ac07f44  1156  ldr x16, pc+164 (addr 0x0000ffff7ac07fe8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ac07f48  1160  blr x16
0xffff7ac07f4c  1164  str x0, [jssp, #56]
0xffff7ac07f50  1168  ldr x16, pc+160 (addr 0x0000ffff7ac07ff0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ac07f54  1172  blr x16
0xffff7ac07f58  1176  b #-0x154 (addr 0xffff7ac07e04)
0xffff7ac07f5c  1180  580004df       constant pool begin (num_const = 38)    ;; constant pool
0xffff7ac07f60  1184  d63f03e0       constant
0xffff7ac07f64  1188  d503201f       constant
0xffff7ac07f68  1192  7a906010       constant
0xffff7ac07f6c  1196  0000ffff       constant
0xffff7ac07f70  1200  7ab06060       constant
0xffff7ac07f74  1204  0000ffff       constant
0xffff7ac07f78  1208  7ab2a6c0       constant
0xffff7ac07f7c  1212  0000ffff       constant
0xffff7ac07f80  1216  7ab06060       constant
0xffff7ac07f84  1220  0000ffff       constant
0xffff7ac07f88  1224  7ab06060       constant
0xffff7ac07f8c  1228  0000ffff       constant
0xffff7ac07f90  1232  4ec04ba1       constant
0xffff7ac07f94  1236  00000000       constant
0xffff7ac07f98  1240  4ec04bf9       constant
0xffff7ac07f9c  1244  00000000       constant
0xffff7ac07fa0  1248  7ab06060       constant
0xffff7ac07fa4  1252  0000ffff       constant
0xffff7ac07fa8  1256  4ec04ba1       constant
0xffff7ac07fac  1260  00000000       constant
0xffff7ac07fb0  1264  4ec04c51       constant
0xffff7ac07fb4  1268  00000000       constant
0xffff7ac07fb8  1272  4ec04ca9       constant
0xffff7ac07fbc  1276  00000000       constant
0xffff7ac07fc0  1280  7ac07a20       constant
0xffff7ac07fc4  1284  0000ffff       constant
0xffff7ac07fc8  1288  7ab06820       constant
0xffff7ac07fcc  1292  0000ffff       constant
0xffff7ac07fd0  1296  7ab06260       constant
0xffff7ac07fd4  1300  0000ffff       constant
0xffff7ac07fd8  1304  7ab068e0       constant
0xffff7ac07fdc  1308  0000ffff       constant
0xffff7ac07fe0  1312  7ab06820       constant
0xffff7ac07fe4  1316  0000ffff       constant
0xffff7ac07fe8  1320  7ab06260       constant
0xffff7ac07fec  1324  0000ffff       constant
0xffff7ac07ff0  1328  7ab068e0       constant
0xffff7ac07ff4  1332  0000ffff       constant
0xffff7ac07ff8  1336  movz x16, #0x0
0xffff7ac07ffc  1340  bl #+0xc (addr 0xffff7ac08008)
0xffff7ac08000  1344  movz x16, #0x18
0xffff7ac08004  1348  bl #+0x4 (addr 0xffff7ac08008)
0xffff7ac08008  1352  ldr x17, pc+24 (addr 0x0000ffff7ac08020)    ;; lazy deoptimization bailout 4
0xffff7ac0800c  1356  add x17, x17, x16
0xffff7ac08010  1360  br x17
0xffff7ac08014  1364  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ac08018  1368  d63f03e0       constant
0xffff7ac0801c  1372  d503201f       constant
0xffff7ac08020  1376  7a906020       constant
0xffff7ac08024  1380  0000ffff       constant


Safepoints (size = 99)
0xffff7ac07b70   176  111000 (sp -> fp)       0
0xffff7ac07b98   216  111000 (sp -> fp)       1
0xffff7ac07c04   324  111000 (sp -> fp)       3
0xffff7ac07c88   456  111000 (sp -> fp)       5
0xffff7ac07ce0   544  111000 (sp -> fp)       6
0xffff7ac07f04  1092  101000 | x0 | x1 | x8 (sp -> fp)  <none> argc: 2
0xffff7ac07f4c  1164  101000 | x0 | x5 | x7 (sp -> fp)  <none> argc: 2

RelocInfo (size = 47)
0xffff7ac07b68  code target (STUB)  (0xffff7ab06060)
0xffff7ac07b90  code target (STUB)  (0xffff7ab2a6c0)
0xffff7ac07bbc  runtime entry
0xffff7ac07bfc  code target (STUB)  (0xffff7ab06060)
0xffff7ac07c80  code target (STUB)  (0xffff7ab06060)
0xffff7ac07c9c  embedded object  (0x4ec04ba1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ac07ca8  embedded object  (0x4ec04bf9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ac07cd8  code target (STUB)  (0xffff7ab06060)
0xffff7ac07d1c  embedded object  (0x4ec04ba1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ac07e20  embedded object  (0x4ec04c51 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ac07e2c  embedded object  (0x4ec04ca9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ac07e98  code target (STUB)  (0xffff7ac07a20)
0xffff7ac07ed4  code target (STUB)  (0xffff7ab06820)
0xffff7ac07efc  code target (STUB)  (0xffff7ab06260)
0xffff7ac07f08  code target (STUB)  (0xffff7ab068e0)
0xffff7ac07f1c  code target (STUB)  (0xffff7ab06820)
0xffff7ac07f44  code target (STUB)  (0xffff7ab06260)
0xffff7ac07f50  code target (STUB)  (0xffff7ab068e0)
0xffff7ac07f5c  constant pool (size 156)
0xffff7ac08008  runtime entry
0xffff7ac08014  constant pool (size 20)

--- End code ---
kind = STUB
major_key = StringAddStub
name = StringAddStub_ConvertRight_NotTenured
compiler = crankshaft
Instructions (size = 1483)
0xffff7ac07ac0     0  movz x16, #0xa00000000
0xffff7ac07ac4     4  sub csp, jssp, #0x10 (16)
0xffff7ac07ac8     8  stp fp, lr, [jssp, #-16]!
0xffff7ac07acc    12  mov fp, jssp
0xffff7ac07ad0    16  sub csp, jssp, #0x20 (32)
0xffff7ac07ad4    20  sub jssp, jssp, #0x20 (32)
0xffff7ac07ad8    24  stur x16, [fp, #-8]
0xffff7ac07adc    28  str x1, [jssp, #16]
0xffff7ac07ae0    32  str x0, [jssp, #8]
0xffff7ac07ae4    36  str cp, [jssp]
0xffff7ac07ae8    40  mov x2, cp
0xffff7ac07aec    44  tbz w0, #0, #+0xb8 (addr 0xffff7ac07ba4)
0xffff7ac07af0    48  ldur x3, [x0, #-1]
0xffff7ac07af4    52  ldrb w4, [x3, #11]
0xffff7ac07af8    56  cmp w4, #0x80 (128)
0xffff7ac07afc    60  b.lt #+0xa0 (addr 0xffff7ac07b9c)
0xffff7ac07b00    64  cmp w4, #0x83 (131)
0xffff7ac07b04    68  b.le #+0x80 (addr 0xffff7ac07b84)
0xffff7ac07b08    72  ldur x4, [x2, #39]
0xffff7ac07b0c    76  movz x16, #0x217
0xffff7ac07b10    80  ldr x5, [x4, x16]
0xffff7ac07b14    84  movz x16, #0x2ef
0xffff7ac07b18    88  ldr x6, [x4, x16]
0xffff7ac07b1c    92  movz x16, #0x2e7
0xffff7ac07b20    96  ldr x4, [x4, x16]
0xffff7ac07b24   100  ldur x4, [x4, #23]
0xffff7ac07b28   104  ldur x7, [x3, #23]
0xffff7ac07b2c   108  ldur x7, [x7, #-1]
0xffff7ac07b30   112  cmp x3, x4
0xffff7ac07b34   116  b.ne #+0x1c (addr 0xffff7ac07b50)
0xffff7ac07b38   120  cmp x7, x6
0xffff7ac07b3c   124  b.ne #+0x14 (addr 0xffff7ac07b50)
0xffff7ac07b40   128  ldur x3, [x7, #23]
0xffff7ac07b44   132  ldur x3, [x3, #-1]
0xffff7ac07b48   136  cmp x3, x5
0xffff7ac07b4c   140  b.eq #+0x2c (addr 0xffff7ac07b78)
0xffff7ac07b50   144  sub csp, jssp, #0x8 (8)
0xffff7ac07b54   148  str x0, [jssp, #-8]!
0xffff7ac07b58   152  mov cp, x2
0xffff7ac07b5c   156  movz x0, #0x1
0xffff7ac07b60   160  movz x1, #0x84c0
0xffff7ac07b64   164  movk x1, #0xe4, lsl #16
0xffff7ac07b68   168  ldr x16, pc+1032 (addr 0x0000ffff7ac07f70)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ac07b6c   172  blr x16
0xffff7ac07b70   176  ldr x1, [jssp, #8]
0xffff7ac07b74   180  b #+0x18 (addr 0xffff7ac07b8c)
0xffff7ac07b78   184  ldr x1, [jssp, #8]
0xffff7ac07b7c   188  ldur x0, [x1, #23]
0xffff7ac07b80   192  b #+0xc (addr 0xffff7ac07b8c)
0xffff7ac07b84   196  mov x1, x0
0xffff7ac07b88   200  mov x0, x1
0xffff7ac07b8c   204  ldr cp, [jssp]
0xffff7ac07b90   208  ldr x16, pc+1000 (addr 0x0000ffff7ac07f78)    ;; code: STUB, ToStringStub, minor: 0
0xffff7ac07b94   212  blr x16
0xffff7ac07b98   216  b #+0x7c (addr 0xffff7ac07c14)
0xffff7ac07b9c   220  ldr x0, [jssp, #8]
0xffff7ac07ba0   224  b #+0x74 (addr 0xffff7ac07c14)
0xffff7ac07ba4   228  ldr x0, [x26, #368]
0xffff7ac07ba8   232  ldur w1, [x0, #11]
0xffff7ac07bac   236  asr w1, w1, #1
0xffff7ac07bb0   240  sub w1, w1, #0x1 (1)
0xffff7ac07bb4   244  ldr x2, [jssp, #8]
0xffff7ac07bb8   248  tbz w2, #0, #+0xc (addr 0xffff7ac07bc4)
0xffff7ac07bbc   252  ldr x16, pc+940 (addr 0x0000ffff7ac07f68)    ;; lazy deoptimization bailout 2
0xffff7ac07bc0   256  blr x16
0xffff7ac07bc4   260  tbnz w2, #0, #+0x2a8 (addr 0xffff7ac07e6c)
0xffff7ac07bc8   264  asr x4, x2, #32
0xffff7ac07bcc   268  and w1, w1, w4
0xffff7ac07bd0   272  lsl w1, w1, #1
0xffff7ac07bd4   276  add x3, x0, #0xf (15)
0xffff7ac07bd8   280  ldr x4, [x3, w1, sxtw #3]
0xffff7ac07bdc   284  cmp x2, x4
0xffff7ac07be0   288  b.eq #+0x28 (addr 0xffff7ac07c08)
0xffff7ac07be4   292  sub csp, jssp, #0x8 (8)
0xffff7ac07be8   296  str x2, [jssp, #-8]!
0xffff7ac07bec   300  ldr cp, [jssp, #8]
0xffff7ac07bf0   304  movz x0, #0x1
0xffff7ac07bf4   308  movz x1, #0xce00
0xffff7ac07bf8   312  movk x1, #0xe3, lsl #16
0xffff7ac07bfc   316  ldr x16, pc+900 (addr 0x0000ffff7ac07f80)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ac07c00   320  blr x16
0xffff7ac07c04   324  b #+0x10 (addr 0xffff7ac07c14)
0xffff7ac07c08   328  add x2, x0, #0x17 (23)
0xffff7ac07c0c   332  ldr x3, [x2, w1, sxtw #3]
0xffff7ac07c10   336  mov x0, x3
0xffff7ac07c14   340  ldr x1, [jssp, #16]
0xffff7ac07c18   344  ldur w2, [x1, #19]
0xffff7ac07c1c   348  ldur w3, [x0, #19]
0xffff7ac07c20   352  cbz w2, #+0x23c (addr 0xffff7ac07e5c)
0xffff7ac07c24   356  cbz w3, #+0x230 (addr 0xffff7ac07e54)
0xffff7ac07c28   360  add w4, w2, w3
0xffff7ac07c2c   364  movn w16, #0xe0
0xffff7ac07c30   368  cmp w4, w16, lsr #4
0xffff7ac07c34   372  b.hs #+0x3c4 (addr 0xffff7ac07ff8)
0xffff7ac07c38   376  cmp w4, #0xd (13)
0xffff7ac07c3c   380  b.ge #+0x194 (addr 0xffff7ac07dd0)
0xffff7ac07c40   384  ldur x5, [x1, #-1]
0xffff7ac07c44   388  ldrb w5, [x5, #11]
0xffff7ac07c48   392  ldur x6, [x0, #-1]
0xffff7ac07c4c   396  ldrb w6, [x6, #11]
0xffff7ac07c50   400  orr w7, w5, w6
0xffff7ac07c54   404  eor w5, w5, w6
0xffff7ac07c58   408  and w5, w5, #0x4
0xffff7ac07c5c   412  cbnz w5, #+0xc (addr 0xffff7ac07c68)
0xffff7ac07c60   416  and w5, w7, #0x3
0xffff7ac07c64   420  cbz w5, #+0x28 (addr 0xffff7ac07c8c)
0xffff7ac07c68   424  sub csp, jssp, #0x10 (16)
0xffff7ac07c6c   428  stp x0, x1, [jssp, #-16]!
0xffff7ac07c70   432  ldr cp, [jssp, #16]
0xffff7ac07c74   436  movz x0, #0x2
0xffff7ac07c78   440  movz x1, #0xa6c0
0xffff7ac07c7c   444  movk x1, #0xec, lsl #16
0xffff7ac07c80   448  ldr x16, pc+776 (addr 0x0000ffff7ac07f88)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ac07c84   452  blr x16
0xffff7ac07c88   456  b #+0x1d4 (addr 0xffff7ac07e5c)
0xffff7ac07c8c   460  and w1, w7, #0x4
0xffff7ac07c90   464  cbnz w1, #+0x14 (addr 0xffff7ac07ca4)
0xffff7ac07c94   468  lsl w1, w4, #1
0xffff7ac07c98   472  mov x5, x1
0xffff7ac07c9c   476  ldr x1, pc+756 (addr 0x0000ffff7ac07f90)    ;; object: 0x4ec04ba1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ac07ca0   480  b #+0xc (addr 0xffff7ac07cac)
0xffff7ac07ca4   484  mov x5, x4
0xffff7ac07ca8   488  ldr x1, pc+752 (addr 0x0000ffff7ac07f98)    ;; object: 0x4ec04bf9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ac07cac   492  add w5, w5, #0x1f (31)
0xffff7ac07cb0   496  and w5, w5, #0xfffffff8
0xffff7ac07cb4   500  cmp w5, #0x96000 (614400)
0xffff7ac07cb8   504  b.lt #+0x2c (addr 0xffff7ac07ce4)
0xffff7ac07cbc   508  sub csp, jssp, #0x10 (16)
0xffff7ac07cc0   512  ldr x1, [jssp, #16]
0xffff7ac07cc4   516  stp x0, x1, [jssp, #-16]!
0xffff7ac07cc8   520  ldr cp, [jssp, #16]
0xffff7ac07ccc   524  movz x0, #0x2
0xffff7ac07cd0   528  movz x1, #0xa6c0
0xffff7ac07cd4   532  movk x1, #0xec, lsl #16
0xffff7ac07cd8   536  ldr x16, pc+712 (addr 0x0000ffff7ac07fa0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ac07cdc   540  blr x16
0xffff7ac07ce0   544  b #+0x17c (addr 0xffff7ac07e5c)
0xffff7ac07ce4   548  sxtw x5, w5
0xffff7ac07ce8   552  movz x6, #0xe2c0
0xffff7ac07cec   556  movk x6, #0x9ab, lsl #16
0xffff7ac07cf0   560  ldp x8, x16, [x6]
0xffff7ac07cf4   564  adds x7, x8, x5
0xffff7ac07cf8   568  ccmp x7, x16, #nzCv, lo
0xffff7ac07cfc   572  b.hi #+0x1d0 (addr 0xffff7ac07ecc)
0xffff7ac07d00   576  str x7, [x6]
0xffff7ac07d04   580  orr x8, x8, #0x1
0xffff7ac07d08   584  stur x1, [x8, #-1]
0xffff7ac07d0c   588  movz w5, #0x3
0xffff7ac07d10   592  stur w5, [x8, #7]
0xffff7ac07d14   596  lsl x4, x4, #32
0xffff7ac07d18   600  stur x4, [x8, #15]
0xffff7ac07d1c   604  ldr x4, pc+652 (addr 0x0000ffff7ac07fa8)    ;; object: 0x4ec04ba1 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ac07d20   608  cmp x1, x4
0xffff7ac07d24   612  b.eq #+0x54 (addr 0xffff7ac07d78)
0xffff7ac07d28   616  ldr x5, [jssp, #16]
0xffff7ac07d2c   620  movz x1, #0x0
0xffff7ac07d30   624  cmp w2, w1
0xffff7ac07d34   628  b.le #+0x1c (addr 0xffff7ac07d50)
0xffff7ac07d38   632  add x4, x5, #0x17 (23)
0xffff7ac07d3c   636  ldrb w6, [x4, w1, sxtw]
0xffff7ac07d40   640  add x4, x8, #0x17 (23)
0xffff7ac07d44   644  strb w6, [x4, w1, sxtw]
0xffff7ac07d48   648  add w1, w1, #0x1 (1)
0xffff7ac07d4c   652  b #-0x1c (addr 0xffff7ac07d30)
0xffff7ac07d50   656  movz x1, #0x0
0xffff7ac07d54   660  cmp w3, w1
0xffff7ac07d58   664  b.le #+0x70 (addr 0xffff7ac07dc8)
0xffff7ac07d5c   668  add x4, x0, #0x17 (23)
0xffff7ac07d60   672  ldrb w5, [x4, w1, sxtw]
0xffff7ac07d64   676  add w4, w2, w1
0xffff7ac07d68   680  add x6, x8, #0x17 (23)
0xffff7ac07d6c   684  strb w5, [x6, w4, sxtw]
0xffff7ac07d70   688  add w1, w1, #0x1 (1)
0xffff7ac07d74   692  b #-0x20 (addr 0xffff7ac07d54)
0xffff7ac07d78   696  ldr x5, [jssp, #16]
0xffff7ac07d7c   700  movz x1, #0x0
0xffff7ac07d80   704  cmp w2, w1
0xffff7ac07d84   708  b.le #+0x1c (addr 0xffff7ac07da0)
0xffff7ac07d88   712  add x4, x5, #0x17 (23)
0xffff7ac07d8c   716  ldrh w6, [x4, w1, sxtw #1]
0xffff7ac07d90   720  add x4, x8, #0x17 (23)
0xffff7ac07d94   724  strh w6, [x4, w1, sxtw #1]
0xffff7ac07d98   728  add w1, w1, #0x1 (1)
0xffff7ac07d9c   732  b #-0x1c (addr 0xffff7ac07d80)
0xffff7ac07da0   736  movz x1, #0x0
0xffff7ac07da4   740  cmp w3, w1
0xffff7ac07da8   744  b.le #+0x20 (addr 0xffff7ac07dc8)
0xffff7ac07dac   748  add x4, x0, #0x17 (23)
0xffff7ac07db0   752  ldrh w5, [x4, w1, sxtw #1]
0xffff7ac07db4   756  add w4, w2, w1
0xffff7ac07db8   760  add x6, x8, #0x17 (23)
0xffff7ac07dbc   764  strh w5, [x6, w4, sxtw #1]
0xffff7ac07dc0   768  add w1, w1, #0x1 (1)
0xffff7ac07dc4   772  b #-0x20 (addr 0xffff7ac07da4)
0xffff7ac07dc8   776  mov x0, x8
0xffff7ac07dcc   780  b #+0x90 (addr 0xffff7ac07e5c)
0xffff7ac07dd0   784  mov x5, x1
0xffff7ac07dd4   788  ldur x1, [x5, #-1]
0xffff7ac07dd8   792  ldrb w1, [x1, #11]
0xffff7ac07ddc   796  ldur x2, [x0, #-1]
0xffff7ac07de0   800  ldrb w2, [x2, #11]
0xffff7ac07de4   804  movz x6, #0xe2c0
0xffff7ac07de8   808  movk x6, #0x9ab, lsl #16
0xffff7ac07dec   812  ldp x7, x3, [x6]
0xffff7ac07df0   816  adds x16, x7, #0x28 (40)
0xffff7ac07df4   820  ccmp x16, x3, #nzCv, lo
0xffff7ac07df8   824  b.hi #+0x11c (addr 0xffff7ac07f14)
0xffff7ac07dfc   828  str x16, [x6]
0xffff7ac07e00   832  orr x7, x7, #0x1
0xffff7ac07e04   836  and w3, w1, w2
0xffff7ac07e08   840  eor w1, w1, w2
0xffff7ac07e0c   844  and w2, w3, #0xc
0xffff7ac07e10   848  cbnz w2, #+0x1c (addr 0xffff7ac07e2c)
0xffff7ac07e14   852  and w1, w1, #0xc
0xffff7ac07e18   856  cmp w1, #0xc (12)
0xffff7ac07e1c   860  b.eq #+0x10 (addr 0xffff7ac07e2c)
0xffff7ac07e20   864  ldr x1, pc+400 (addr 0x0000ffff7ac07fb0)    ;; object: 0x4ec04c51 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ac07e24   868  stur x1, [x7, #-1]
0xffff7ac07e28   872  b #+0xc (addr 0xffff7ac07e34)
0xffff7ac07e2c   876  ldr x1, pc+396 (addr 0x0000ffff7ac07fb8)    ;; object: 0x4ec04ca9 <Map(FAST_HOLEY_ELEMENTS)>
0xffff7ac07e30   880  stur x1, [x7, #-1]
0xffff7ac07e34   884  movz w1, #0x3
0xffff7ac07e38   888  stur w1, [x7, #7]
0xffff7ac07e3c   892  lsl x1, x4, #32
0xffff7ac07e40   896  stur x1, [x7, #15]
0xffff7ac07e44   900  stur x5, [x7, #23]
0xffff7ac07e48   904  stur x0, [x7, #31]
0xffff7ac07e4c   908  mov x0, x7
0xffff7ac07e50   912  b #+0xc (addr 0xffff7ac07e5c)
0xffff7ac07e54   916  mov x5, x1
0xffff7ac07e58   920  mov x0, x5
0xffff7ac07e5c   924  ldr cp, [jssp]
0xffff7ac07e60   928  mov jssp, fp
0xffff7ac07e64   932  ldp fp, lr, [jssp], #16
0xffff7ac07e68   936  ret
0xffff7ac07e6c   940  ldur x16, [x2, #-1]
0xffff7ac07e70   944  ldr x17, [x26, #120]
0xffff7ac07e74   948  cmp x16, x17
0xffff7ac07e78   952  b.ne #+0x30 (addr 0xffff7ac07ea8)
0xffff7ac07e7c   956  ldur d30, [x2, #7]
0xffff7ac07e80   960  fcvtzs x4, d30
0xffff7ac07e84   964  cmp x4, #0x1 (1)
0xffff7ac07e88   968  ccmn x4, #1, #nzcV, vc
0xffff7ac07e8c   972  b.vc #+0x18 (addr 0xffff7ac07ea4)
0xffff7ac07e90   976  sub csp, jssp, #0x8 (8)
0xffff7ac07e94   980  str lr, [jssp, #-8]!
0xffff7ac07e98   984  ldr x16, pc+296 (addr 0x0000ffff7ac07fc0)    ;; code: STUB, DoubleToIStub, minor: 127234
0xffff7ac07e9c   988  blr x16
0xffff7ac07ea0   992  ldr lr, [jssp], #8
0xffff7ac07ea4   996  b #+0x24 (addr 0xffff7ac07ec8)
0xffff7ac07ea8  1000  ldp x4, x3, [x26, #64]
0xffff7ac07eac  1004  cmp x2, x4
0xffff7ac07eb0  1008  cset x4, eq
0xffff7ac07eb4  1012  ccmp x2, x3, #nZcv, ne
0xffff7ac07eb8  1016  b.eq #+0x10 (addr 0xffff7ac07ec8)
0xffff7ac07ebc  1020  ldr x16, [x26, #40]
0xffff7ac07ec0  1024  cmp x2, x16
0xffff7ac07ec4  1028  b.ne #+0x13c (addr 0xffff7ac08000)
0xffff7ac07ec8  1032  b #-0x2fc (addr 0xffff7ac07bcc)
0xffff7ac07ecc  1036  movz x8, #0x0
0xffff7ac07ed0  1040  mov x16, lr
0xffff7ac07ed4  1044  ldr x17, pc+244 (addr 0x0000ffff7ac07fc8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ac07ed8  1048  blr x17
0xffff7ac07edc  1052  lsl x0, x5, #32
0xffff7ac07ee0  1056  movz x10, #0x0
0xffff7ac07ee4  1060  sub csp, jssp, #0x10 (16)
0xffff7ac07ee8  1064  stp x10, x0, [jssp, #-16]!
0xffff7ac07eec  1068  ldur cp, [fp, #-32]
0xffff7ac07ef0  1072  movz x0, #0x2
0xffff7ac07ef4  1076  movz x1, #0x5b88
0xffff7ac07ef8  1080  movk x1, #0xe2, lsl #16
0xffff7ac07efc  1084  ldr x16, pc+212 (addr 0x0000ffff7ac07fd0)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ac07f00  1088  blr x16
0xffff7ac07f04  1092  str x0, [jssp, #64]
0xffff7ac07f08  1096  ldr x16, pc+208 (addr 0x0000ffff7ac07fd8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ac07f0c  1100  blr x16
0xffff7ac07f10  1104  b #-0x208 (addr 0xffff7ac07d08)
0xffff7ac07f14  1108  movz x7, #0x0
0xffff7ac07f18  1112  mov x16, lr
0xffff7ac07f1c  1116  ldr x17, pc+196 (addr 0x0000ffff7ac07fe0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ac07f20  1120  blr x17
0xffff7ac07f24  1124  movz x0, #0x2800000000
0xffff7ac07f28  1128  movz x10, #0x0
0xffff7ac07f2c  1132  sub csp, jssp, #0x10 (16)
0xffff7ac07f30  1136  stp x10, x0, [jssp, #-16]!
0xffff7ac07f34  1140  ldur cp, [fp, #-32]
0xffff7ac07f38  1144  movz x0, #0x2
0xffff7ac07f3c  1148  movz x1, #0x5b88
0xffff7ac07f40  1152  movk x1, #0xe2, lsl #16
0xffff7ac07f44  1156  ldr x16, pc+164 (addr 0x0000ffff7ac07fe8)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ac07f48  1160  blr x16
0xffff7ac07f4c  1164  str x0, [jssp, #56]
0xffff7ac07f50  1168  ldr x16, pc+160 (addr 0x0000ffff7ac07ff0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ac07f54  1172  blr x16
0xffff7ac07f58  1176  b #-0x154 (addr 0xffff7ac07e04)
0xffff7ac07f5c  1180  580004df       constant pool begin (num_const = 38)    ;; constant pool
0xffff7ac07f60  1184  d63f03e0       constant
0xffff7ac07f64  1188  d503201f       constant
0xffff7ac07f68  1192  7a906010       constant
0xffff7ac07f6c  1196  0000ffff       constant
0xffff7ac07f70  1200  7ab06060       constant
0xffff7ac07f74  1204  0000ffff       constant
0xffff7ac07f78  1208  7ab2a6c0       constant
0xffff7ac07f7c  1212  0000ffff       constant
0xffff7ac07f80  1216  7ab06060       constant
0xffff7ac07f84  1220  0000ffff       constant
0xffff7ac07f88  1224  7ab06060       constant
0xffff7ac07f8c  1228  0000ffff       constant
0xffff7ac07f90  1232  4ec04ba1       constant
0xffff7ac07f94  1236  00000000       constant
0xffff7ac07f98  1240  4ec04bf9       constant
0xffff7ac07f9c  1244  00000000       constant
0xffff7ac07fa0  1248  7ab06060       constant
0xffff7ac07fa4  1252  0000ffff       constant
0xffff7ac07fa8  1256  4ec04ba1       constant
0xffff7ac07fac  1260  00000000       constant
0xffff7ac07fb0  1264  4ec04c51       constant
0xffff7ac07fb4  1268  00000000       constant
0xffff7ac07fb8  1272  4ec04ca9       constant
0xffff7ac07fbc  1276  00000000       constant
0xffff7ac07fc0  1280  7ac07a20       constant
0xffff7ac07fc4  1284  0000ffff       constant
0xffff7ac07fc8  1288  7ab06820       constant
0xffff7ac07fcc  1292  0000ffff       constant
0xffff7ac07fd0  1296  7ab06260       constant
0xffff7ac07fd4  1300  0000ffff       constant
0xffff7ac07fd8  1304  7ab068e0       constant
0xffff7ac07fdc  1308  0000ffff       constant
0xffff7ac07fe0  1312  7ab06820       constant
0xffff7ac07fe4  1316  0000ffff       constant
0xffff7ac07fe8  1320  7ab06260       constant
0xffff7ac07fec  1324  0000ffff       constant
0xffff7ac07ff0  1328  7ab068e0       constant
0xffff7ac07ff4  1332  0000ffff       constant
0xffff7ac07ff8  1336  movz x16, #0x0
0xffff7ac07ffc  1340  bl #+0xc (addr 0xffff7ac08008)
0xffff7ac08000  1344  movz x16, #0x18
0xffff7ac08004  1348  bl #+0x4 (addr 0xffff7ac08008)
0xffff7ac08008  1352  ldr x17, pc+24 (addr 0x0000ffff7ac08020)    ;; lazy deoptimization bailout 4
0xffff7ac0800c  1356  add x17, x17, x16
0xffff7ac08010  1360  br x17
0xffff7ac08014  1364  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ac08018  1368  d63f03e0       constant
0xffff7ac0801c  1372  d503201f       constant
0xffff7ac08020  1376  7a906020       constant
0xffff7ac08024  1380  0000ffff       constant


Safepoints (size = 99)
0xffff7ac07b70   176  111000 (sp -> fp)       0
0xffff7ac07b98   216  111000 (sp -> fp)       1
0xffff7ac07c04   324  111000 (sp -> fp)       3
0xffff7ac07c88   456  111000 (sp -> fp)       5
0xffff7ac07ce0   544  111000 (sp -> fp)       6
0xffff7ac07f04  1092  101000 | x0 | x1 | x8 (sp -> fp)  <none> argc: 2
0xffff7ac07f4c  1164  101000 | x0 | x5 | x7 (sp -> fp)  <none> argc: 2

RelocInfo (size = 47)
0xffff7ac07b68  code target (STUB)  (0xffff7ab06060)
0xffff7ac07b90  code target (STUB)  (0xffff7ab2a6c0)
0xffff7ac07bbc  runtime entry
0xffff7ac07bfc  code target (STUB)  (0xffff7ab06060)
0xffff7ac07c80  code target (STUB)  (0xffff7ab06060)
0xffff7ac07c9c  embedded object  (0x4ec04ba1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ac07ca8  embedded object  (0x4ec04bf9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ac07cd8  code target (STUB)  (0xffff7ab06060)
0xffff7ac07d1c  embedded object  (0x4ec04ba1 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ac07e20  embedded object  (0x4ec04c51 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ac07e2c  embedded object  (0x4ec04ca9 <Map(FAST_HOLEY_ELEMENTS)>)
0xffff7ac07e98  code target (STUB)  (0xffff7ac07a20)
0xffff7ac07ed4  code target (STUB)  (0xffff7ab06820)
0xffff7ac07efc  code target (STUB)  (0xffff7ab06260)
0xffff7ac07f08  code target (STUB)  (0xffff7ab068e0)
0xffff7ac07f1c  code target (STUB)  (0xffff7ab06820)
0xffff7ac07f44  code target (STUB)  (0xffff7ab06260)
0xffff7ac07f50  code target (STUB)  (0xffff7ab068e0)
0xffff7ac07f5c  constant pool (size 156)
0xffff7ac08008  runtime entry
0xffff7ac08014  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = BinaryOpWithAllocationSiteStub
compiler = crankshaft
Instructions (size = 197)
0xffff7ac08100     0  movz x16, #0xa00000000
0xffff7ac08104     4  sub csp, jssp, #0x10 (16)
0xffff7ac08108     8  stp fp, lr, [jssp, #-16]!
0xffff7ac0810c    12  mov fp, jssp
0xffff7ac08110    16  sub csp, jssp, #0x28 (40)
0xffff7ac08114    20  sub jssp, jssp, #0x28 (40)
0xffff7ac08118    24  stur x16, [fp, #-8]
0xffff7ac0811c    28  str x2, [jssp, #24]
0xffff7ac08120    32  str x1, [jssp, #16]
0xffff7ac08124    36  mov x3, x1
0xffff7ac08128    40  str x0, [jssp, #8]
0xffff7ac0812c    44  mov x4, x0
0xffff7ac08130    48  str cp, [jssp]
0xffff7ac08134    52  mov x5, cp
0xffff7ac08138    56  tbz w3, #0, #+0x48 (addr 0xffff7ac08180)
0xffff7ac0813c    60  ldur x0, [x3, #-1]
0xffff7ac08140    64  ldrb w0, [x0, #11]
0xffff7ac08144    68  tbnz w0, #7, #+0x44 (addr 0xffff7ac08188)
0xffff7ac08148    72  mov cp, x5
0xffff7ac0814c    76  mov x1, x3
0xffff7ac08150    80  mov x0, x4
0xffff7ac08154    84  ldr x16, pc+36 (addr 0x0000ffff7ac08178)    ;; code: STUB, StringAddStub, minor: 6
0xffff7ac08158    88  blr x16
0xffff7ac0815c    92  ldr cp, [jssp]
0xffff7ac08160    96  mov jssp, fp
0xffff7ac08164   100  ldp fp, lr, [jssp], #16
0xffff7ac08168   104  ret
0xffff7ac0816c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ac08170   112  d63f03e0       constant
0xffff7ac08174   116  d503201f       constant
0xffff7ac08178   120  7ac07ac0       constant
0xffff7ac0817c   124  0000ffff       constant
0xffff7ac08180   128  movz x16, #0x0
0xffff7ac08184   132  bl #+0xc (addr 0xffff7ac08190)
0xffff7ac08188   136  movz x16, #0x8
0xffff7ac0818c   140  bl #+0x4 (addr 0xffff7ac08190)
0xffff7ac08190   144  ldr x17, pc+24 (addr 0x0000ffff7ac081a8)    ;; lazy deoptimization bailout 0
0xffff7ac08194   148  add x17, x17, x16
0xffff7ac08198   152  br x17
0xffff7ac0819c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ac081a0   160  d63f03e0       constant
0xffff7ac081a4   164  d503201f       constant
0xffff7ac081a8   168  7a906000       constant
0xffff7ac081ac   172  0000ffff       constant


Safepoints (size = 21)
0xffff7ac0815c    92  1111000 (sp -> fp)       2

RelocInfo (size = 17)
0xffff7ac08154  code target (STUB)  (0xffff7ac07ac0)
0xffff7ac0816c  constant pool (size 20)
0xffff7ac08190  runtime entry
0xffff7ac0819c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = BinaryOpWithAllocationSiteStub
name = BinaryOpWithAllocationSiteStub(ADD_CreateAllocationMementos:String*Generic->String)
compiler = crankshaft
Instructions (size = 197)
0xffff7ac08100     0  movz x16, #0xa00000000
0xffff7ac08104     4  sub csp, jssp, #0x10 (16)
0xffff7ac08108     8  stp fp, lr, [jssp, #-16]!
0xffff7ac0810c    12  mov fp, jssp
0xffff7ac08110    16  sub csp, jssp, #0x28 (40)
0xffff7ac08114    20  sub jssp, jssp, #0x28 (40)
0xffff7ac08118    24  stur x16, [fp, #-8]
0xffff7ac0811c    28  str x2, [jssp, #24]
0xffff7ac08120    32  str x1, [jssp, #16]
0xffff7ac08124    36  mov x3, x1
0xffff7ac08128    40  str x0, [jssp, #8]
0xffff7ac0812c    44  mov x4, x0
0xffff7ac08130    48  str cp, [jssp]
0xffff7ac08134    52  mov x5, cp
0xffff7ac08138    56  tbz w3, #0, #+0x48 (addr 0xffff7ac08180)
0xffff7ac0813c    60  ldur x0, [x3, #-1]
0xffff7ac08140    64  ldrb w0, [x0, #11]
0xffff7ac08144    68  tbnz w0, #7, #+0x44 (addr 0xffff7ac08188)
0xffff7ac08148    72  mov cp, x5
0xffff7ac0814c    76  mov x1, x3
0xffff7ac08150    80  mov x0, x4
0xffff7ac08154    84  ldr x16, pc+36 (addr 0x0000ffff7ac08178)    ;; code: STUB, StringAddStub, minor: 6
0xffff7ac08158    88  blr x16
0xffff7ac0815c    92  ldr cp, [jssp]
0xffff7ac08160    96  mov jssp, fp
0xffff7ac08164   100  ldp fp, lr, [jssp], #16
0xffff7ac08168   104  ret
0xffff7ac0816c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ac08170   112  d63f03e0       constant
0xffff7ac08174   116  d503201f       constant
0xffff7ac08178   120  7ac07ac0       constant
0xffff7ac0817c   124  0000ffff       constant
0xffff7ac08180   128  movz x16, #0x0
0xffff7ac08184   132  bl #+0xc (addr 0xffff7ac08190)
0xffff7ac08188   136  movz x16, #0x8
0xffff7ac0818c   140  bl #+0x4 (addr 0xffff7ac08190)
0xffff7ac08190   144  ldr x17, pc+24 (addr 0x0000ffff7ac081a8)    ;; lazy deoptimization bailout 0
0xffff7ac08194   148  add x17, x17, x16
0xffff7ac08198   152  br x17
0xffff7ac0819c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ac081a0   160  d63f03e0       constant
0xffff7ac081a4   164  d503201f       constant
0xffff7ac081a8   168  7a906000       constant
0xffff7ac081ac   172  0000ffff       constant


Safepoints (size = 21)
0xffff7ac0815c    92  1111000 (sp -> fp)       2

RelocInfo (size = 17)
0xffff7ac08154  code target (STUB)  (0xffff7ac07ac0)
0xffff7ac0816c  constant pool (size 20)
0xffff7ac08190  runtime entry
0xffff7ac0819c  constant pool (size 20)


kind = BINARY_OP_IC
major_key = BinaryOpICWithAllocationSiteStub
ic_state = MEGAMORPHIC
extra_ic_state = 10823
name = BinaryOpICWithAllocationSiteStub(ADD_CreateAllocationMementos:String*Generic->String)
compiler = unknown
Instructions (size = 40)
0xffff7ac08240     0  ldr x2, pc+24 (addr 0x0000ffff7ac08258)    ;; object: 0x20d04241 <undefined>
0xffff7ac08244     4  ldr x16, pc+28 (addr 0x0000ffff7ac08260)    ;; code: STUB, BinaryOpWithAllocationSiteStub, minor: 10823
0xffff7ac08248     8  br x16
0xffff7ac0824c    12  580000df       constant pool begin (num_const = 6)    ;; constant pool
0xffff7ac08250    16  d63f03e0       constant
0xffff7ac08254    20  d503201f       constant
0xffff7ac08258    24  20d04241       constant
0xffff7ac0825c    28  00000000       constant
0xffff7ac08260    32  7ac08100       constant
0xffff7ac08264    36  0000ffff       constant


RelocInfo (size = 8)
0xffff7ac08240  embedded object  (0x20d04241 <undefined>)
0xffff7ac08244  code target (STUB)  (0xffff7ac08100)
0xffff7ac0824c  constant pool (size 28)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 393223
name = CallICStub(args(7), ANY, 
compiler = unknown
Instructions (size = 488)
0xffff7ac0a8e0     0  add x4, x2, x3, asr #29
0xffff7ac0a8e4     4  ldur x4, [x4, #15]
0xffff7ac0a8e8     8  ldur x5, [x4, #7]
0xffff7ac0a8ec    12  cmp x5, x1
0xffff7ac0a8f0    16  b.ne #+0x2c (addr 0xffff7ac0a91c)
0xffff7ac0a8f4    20  tbz w1, #0, #+0x28 (addr 0xffff7ac0a91c)
0xffff7ac0a8f8    24  add x2, x2, x3, asr #29
0xffff7ac0a8fc    28  add x2, x2, #0x18 (24)
0xffff7ac0a900    32  ldur x3, [x2, #-1]
0xffff7ac0a904    36  movz x16, #0x200000000
0xffff7ac0a908    40  add x3, x3, x16
0xffff7ac0a90c    44  stur x3, [x2, #-1]
0xffff7ac0a910    48  movz x0, #0x7
0xffff7ac0a914    52  ldr x16, pc+372 (addr 0x0000ffff7ac0aa88)    ;; code: BUILTIN
0xffff7ac0a918    56  br x16
0xffff7ac0a91c    60  ldr x16, [x26, #2400]
0xffff7ac0a920    64  cmp x4, x16
0xffff7ac0a924    68  b.eq #+0x78 (addr 0xffff7ac0a99c)
0xffff7ac0a928    72  ldur x5, [x4, #-1]
0xffff7ac0a92c    76  ldr x16, [x26, #2736]
0xffff7ac0a930    80  cmp x5, x16
0xffff7ac0a934    84  b.ne #+0x40 (addr 0xffff7ac0a974)
0xffff7ac0a938    88  ldur x5, [cp, #39]
0xffff7ac0a93c    92  ldur x5, [x5, #95]
0xffff7ac0a940    96  cmp x1, x5
0xffff7ac0a944   100  b.ne #+0xec (addr 0xffff7ac0aa30)
0xffff7ac0a948   104  movz x0, #0x7
0xffff7ac0a94c   108  add x2, x2, x3, asr #29
0xffff7ac0a950   112  add x2, x2, #0x18 (24)
0xffff7ac0a954   116  ldur x3, [x2, #-1]
0xffff7ac0a958   120  movz x16, #0x200000000
0xffff7ac0a95c   124  add x3, x3, x16
0xffff7ac0a960   128  stur x3, [x2, #-1]
0xffff7ac0a964   132  mov x2, x4
0xffff7ac0a968   136  mov x3, x1
0xffff7ac0a96c   140  ldr x16, pc+292 (addr 0x0000ffff7ac0aa90)    ;; code: STUB, ArrayConstructorStub, minor: 3
0xffff7ac0a970   144  br x16
0xffff7ac0a974   148  ldr x16, [x26, #2568]
0xffff7ac0a978   152  cmp x4, x16
0xffff7ac0a97c   156  b.eq #+0xb4 (addr 0xffff7ac0aa30)
0xffff7ac0a980   160  ldur x5, [x4, #-1]
0xffff7ac0a984   164  ldrb w5, [x5, #11]
0xffff7ac0a988   168  cmp x5, #0xc9 (201)
0xffff7ac0a98c   172  b.ne #+0xa4 (addr 0xffff7ac0aa30)
0xffff7ac0a990   176  add x4, x2, x3, asr #29
0xffff7ac0a994   180  ldr x5, [x26, #2400]
0xffff7ac0a998   184  stur x5, [x4, #15]
0xffff7ac0a99c   188  movz x0, #0x7
0xffff7ac0a9a0   192  ldr x16, pc+248 (addr 0x0000ffff7ac0aa98)    ;; code: BUILTIN
0xffff7ac0a9a4   196  br x16
0xffff7ac0a9a8   200  tbz w1, #0, #+0x88 (addr 0xffff7ac0aa30)
0xffff7ac0a9ac   204  ldur x5, [x1, #-1]
0xffff7ac0a9b0   208  ldrb w5, [x5, #11]
0xffff7ac0a9b4   212  cmp x5, #0xc9 (201)
0xffff7ac0a9b8   216  b.ne #+0x78 (addr 0xffff7ac0aa30)
0xffff7ac0a9bc   220  ldur x5, [cp, #39]
0xffff7ac0a9c0   224  ldur x5, [x5, #95]
0xffff7ac0a9c4   228  cmp x1, x5
0xffff7ac0a9c8   232  b.eq #+0x68 (addr 0xffff7ac0aa30)
0xffff7ac0a9cc   236  ldur x4, [x1, #39]
0xffff7ac0a9d0   240  ldur x4, [x4, #39]
0xffff7ac0a9d4   244  ldur x5, [cp, #39]
0xffff7ac0a9d8   248  cmp x4, x5
0xffff7ac0a9dc   252  b.ne #+0x54 (addr 0xffff7ac0aa30)
0xffff7ac0a9e0   256  movz x5, #0x200000000
0xffff7ac0a9e4   260  adds x4, x2, x3, asr #29
0xffff7ac0a9e8   264  stur x5, [x4, #23]
0xffff7ac0a9ec   268  movz x16, #0xc00000000
0xffff7ac0a9f0   272  sub csp, jssp, #0x10 (16)
0xffff7ac0a9f4   276  stp fp, lr, [jssp, #-16]!
0xffff7ac0a9f8   280  sub csp, jssp, #0x10 (16)
0xffff7ac0a9fc   284  str x16, [jssp, #-8]!
0xffff7ac0aa00   288  ldr x17, pc+160 (addr 0x0000ffff7ac0aaa0)    ;; object: 0xffff7ac0a881 <Code: CALL_IC>
0xffff7ac0aa04   292  sub csp, jssp, #0x10 (16)
0xffff7ac0aa08   296  str x17, [jssp, #-8]!
0xffff7ac0aa0c   300  add fp, jssp, #0x10 (16)
0xffff7ac0aa10   304  sub csp, jssp, #0x8 (8)
0xffff7ac0aa14   308  str x1, [jssp, #-8]!
0xffff7ac0aa18   312  ldr x16, pc+144 (addr 0x0000ffff7ac0aaa8)    ;; code: STUB, CreateWeakCellStub, minor: 0
0xffff7ac0aa1c   316  blr x16
0xffff7ac0aa20   320  ldr x1, [jssp], #8
0xffff7ac0aa24   324  mov jssp, fp
0xffff7ac0aa28   328  ldp fp, lr, [jssp], #16
0xffff7ac0aa2c   332  b #-0x11c (addr 0xffff7ac0a910)
0xffff7ac0aa30   336  movz x16, #0xc00000000
0xffff7ac0aa34   340  sub csp, jssp, #0x10 (16)
0xffff7ac0aa38   344  stp fp, lr, [jssp, #-16]!
0xffff7ac0aa3c   348  sub csp, jssp, #0x10 (16)
0xffff7ac0aa40   352  str x16, [jssp, #-8]!
0xffff7ac0aa44   356  ldr x17, pc+108 (addr 0x0000ffff7ac0aab0)    ;; object: 0xffff7ac0a881 <Code: CALL_IC>
0xffff7ac0aa48   360  sub csp, jssp, #0x10 (16)
0xffff7ac0aa4c   364  str x17, [jssp, #-8]!
0xffff7ac0aa50   368  add fp, jssp, #0x10 (16)
0xffff7ac0aa54   372  sub csp, jssp, #0x18 (24)
0xffff7ac0aa58   376  stp x3, x2, [jssp, #-24]!
0xffff7ac0aa5c   380  str x1, [jssp, #16]
0xffff7ac0aa60   384  movz x0, #0x3
0xffff7ac0aa64   388  ldr x1, pc+84 (addr 0x0000ffff7ac0aab8)    ;; external reference (Runtime::CallIC_Miss)
0xffff7ac0aa68   392  ldr x16, pc+88 (addr 0x0000ffff7ac0aac0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ac0aa6c   396  blr x16
0xffff7ac0aa70   400  mov x1, x0
0xffff7ac0aa74   404  mov jssp, fp
0xffff7ac0aa78   408  ldp fp, lr, [jssp], #16
0xffff7ac0aa7c   412  b #-0xe0 (addr 0xffff7ac0a99c)
0xffff7ac0aa80   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0xffff7ac0aa84   420  d63f03e0       constant
0xffff7ac0aa88   424  7ab1e820       constant
0xffff7ac0aa8c   428  0000ffff       constant
0xffff7ac0aa90   432  7ab33b00       constant
0xffff7ac0aa94   436  0000ffff       constant
0xffff7ac0aa98   440  7ab1f820       constant
0xffff7ac0aa9c   444  0000ffff       constant
0xffff7ac0aaa0   448  7ac0a881       constant
0xffff7ac0aaa4   452  0000ffff       constant
0xffff7ac0aaa8   456  7ab0ddc0       constant
0xffff7ac0aaac   460  0000ffff       constant
0xffff7ac0aab0   464  7ac0a881       constant
0xffff7ac0aab4   468  0000ffff       constant
0xffff7ac0aab8   472  00c86928       constant
0xffff7ac0aabc   476  00000000       constant
0xffff7ac0aac0   480  7ab06060       constant
0xffff7ac0aac4   484  0000ffff       constant


RelocInfo (size = 19)
0xffff7ac0a914  code target (BUILTIN)  (0xffff7ab1e820)
0xffff7ac0a96c  code target (STUB)  (0xffff7ab33b00)
0xffff7ac0a9a0  code target (BUILTIN)  (0xffff7ab1f820)
0xffff7ac0aa00  embedded object  (0xffff7ac0a881 <Code: CALL_IC>)
0xffff7ac0aa18  code target (STUB)  (0xffff7ab0ddc0)
0xffff7ac0aa44  embedded object  (0xffff7ac0a881 <Code: CALL_IC>)
0xffff7ac0aa64  external reference (Runtime::CallIC_Miss)  (0xc86928)
0xffff7ac0aa68  code target (STUB)  (0xffff7ab06060)
0xffff7ac0aa80  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 393223
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0xffff7ac0ab40     0  ldur x2, [fp, #-16]
0xffff7ac0ab44     4  ldur x2, [x2, #31]
0xffff7ac0ab48     8  ldur x2, [x2, #87]
0xffff7ac0ab4c    12  ldr x16, pc+20 (addr 0x0000ffff7ac0ab60)    ;; code: CALL_IC, GENERIC
0xffff7ac0ab50    16  br x16
0xffff7ac0ab54    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ac0ab58    24  d63f03e0       constant
0xffff7ac0ab5c    28  d503201f       constant
0xffff7ac0ab60    32  7ac0a8e0       constant
0xffff7ac0ab64    36  0000ffff       constant


RelocInfo (size = 7)
0xffff7ac0ab4c  code target (CALL_IC)  (0xffff7ac0a8e0)
0xffff7ac0ab54  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*GENERIC -> GENERIC
compare_operation = EQ
name = CompareICStub
compiler = unknown
Instructions (size = 664)
0xffff7ac0e420     0  orr x16, x1, x0
0xffff7ac0e424     4  tbnz w16, #0, #+0x10 (addr 0xffff7ac0e434)
0xffff7ac0e428     8  asr x1, x1, #32
0xffff7ac0e42c    12  sub x0, x1, x0, asr #32
0xffff7ac0e430    16  ret
0xffff7ac0e434    20  cmp x0, x1
0xffff7ac0e438    24  b.ne #+0x30 (addr 0xffff7ac0e468)
0xffff7ac0e43c    28  ldur x16, [x0, #-1]
0xffff7ac0e440    32  ldr x17, [x26, #120]
0xffff7ac0e444    36  cmp x16, x17
0xffff7ac0e448    40  b.eq #+0xc (addr 0xffff7ac0e454)
0xffff7ac0e44c    44  movz x0, #0x0
0xffff7ac0e450    48  ret
0xffff7ac0e454    52  ldur d0, [x0, #7]
0xffff7ac0e458    56  fcmp d0, d0
0xffff7ac0e45c    60  b.vc #-0x10 (addr 0xffff7ac0e44c)
0xffff7ac0e460    64  movn x0, #0x0
0xffff7ac0e464    68  ret
0xffff7ac0e468    72  and x16, x1, x0
0xffff7ac0e46c    76  tbnz w16, #0, #+0x58 (addr 0xffff7ac0e4c4)
0xffff7ac0e470    80  tbz w0, #0, #+0x20 (addr 0xffff7ac0e490)
0xffff7ac0e474    84  ldur x16, [x0, #-1]
0xffff7ac0e478    88  ldr x17, [x26, #120]
0xffff7ac0e47c    92  cmp x16, x17
0xffff7ac0e480    96  b.ne #+0x148 (addr 0xffff7ac0e5c8)
0xffff7ac0e484   100  ldur d0, [x0, #7]
0xffff7ac0e488   104  scvtf d1, x1, #32
0xffff7ac0e48c   108  b #+0x1c (addr 0xffff7ac0e4a8)
0xffff7ac0e490   112  ldur x16, [x1, #-1]
0xffff7ac0e494   116  ldr x17, [x26, #120]
0xffff7ac0e498   120  cmp x16, x17
0xffff7ac0e49c   124  b.ne #+0x12c (addr 0xffff7ac0e5c8)
0xffff7ac0e4a0   128  ldur d1, [x1, #7]
0xffff7ac0e4a4   132  scvtf d0, x0, #32
0xffff7ac0e4a8   136  fcmp d1, d0
0xffff7ac0e4ac   140  b.vs #+0x10 (addr 0xffff7ac0e4bc)
0xffff7ac0e4b0   144  cset x0, gt
0xffff7ac0e4b4   148  csinv x0, x0, xzr, ge
0xffff7ac0e4b8   152  ret
0xffff7ac0e4bc   156  movn x0, #0x0
0xffff7ac0e4c0   160  ret
0xffff7ac0e4c4   164  ldur x10, [x0, #-1]
0xffff7ac0e4c8   168  ldur x12, [x1, #-1]
0xffff7ac0e4cc   172  ldrb w11, [x10, #11]
0xffff7ac0e4d0   176  ldrb w13, [x12, #11]
0xffff7ac0e4d4   180  cmp x11, #0x81 (129)
0xffff7ac0e4d8   184  b.ne #+0x18 (addr 0xffff7ac0e4f0)
0xffff7ac0e4dc   188  cmp x12, x10
0xffff7ac0e4e0   192  b.ne #+0x74 (addr 0xffff7ac0e554)
0xffff7ac0e4e4   196  ldur d1, [x1, #7]
0xffff7ac0e4e8   200  ldur d0, [x0, #7]
0xffff7ac0e4ec   204  b #-0x44 (addr 0xffff7ac0e4a8)
0xffff7ac0e4f0   208  tbnz w11, #7, #+0x14 (addr 0xffff7ac0e504)
0xffff7ac0e4f4   212  tbnz w11, #6, #+0x60 (addr 0xffff7ac0e554)
0xffff7ac0e4f8   216  tbnz w13, #7, #+0xd0 (addr 0xffff7ac0e5c8)
0xffff7ac0e4fc   220  tbnz w13, #6, #+0x58 (addr 0xffff7ac0e554)
0xffff7ac0e500   224  ret
0xffff7ac0e504   228  ldrb w11, [x10, #12]
0xffff7ac0e508   232  ldrb w13, [x12, #12]
0xffff7ac0e50c   236  tbnz w11, #4, #+0x24 (addr 0xffff7ac0e530)
0xffff7ac0e510   240  tbnz w13, #4, #+0x1c (addr 0xffff7ac0e52c)
0xffff7ac0e514   244  ldrb w11, [x10, #11]
0xffff7ac0e518   248  cmp x11, #0xb1 (177)
0xffff7ac0e51c   252  b.lt #+0xac (addr 0xffff7ac0e5c8)
0xffff7ac0e520   256  ldrb w13, [x12, #11]
0xffff7ac0e524   260  cmp x13, #0xb1 (177)
0xffff7ac0e528   264  b.lt #+0xa0 (addr 0xffff7ac0e5c8)
0xffff7ac0e52c   268  ret
0xffff7ac0e530   272  tbz w13, #4, #-0x4 (addr 0xffff7ac0e52c)
0xffff7ac0e534   276  ldrb w11, [x10, #11]
0xffff7ac0e538   280  cmp x11, #0x83 (131)
0xffff7ac0e53c   284  b.eq #+0x10 (addr 0xffff7ac0e54c)
0xffff7ac0e540   288  ldrb w13, [x12, #11]
0xffff7ac0e544   292  cmp x13, #0x83 (131)
0xffff7ac0e548   296  b.ne #-0x1c (addr 0xffff7ac0e52c)
0xffff7ac0e54c   300  movz x0, #0x0
0xffff7ac0e550   304  ret
0xffff7ac0e554   308  movz x16, #0x87
0xffff7ac0e558   312  and x14, x13, x16
0xffff7ac0e55c   316  movz x16, #0x87
0xffff7ac0e560   320  and x15, x11, x16
0xffff7ac0e564   324  cmp x14, #0x4 (4)
0xffff7ac0e568   328  ccmp x15, #4, #nzcv, eq
0xffff7ac0e56c   332  b.ne #+0x5c (addr 0xffff7ac0e5c8)
0xffff7ac0e570   336  ldur x10, [x1, #15]
0xffff7ac0e574   340  ldur x11, [x0, #15]
0xffff7ac0e578   344  cmp x10, x11
0xffff7ac0e57c   348  b.eq #+0xc (addr 0xffff7ac0e588)
0xffff7ac0e580   352  movz x0, #0x100000000
0xffff7ac0e584   356  ret
0xffff7ac0e588   360  cbnz x10, #+0xc (addr 0xffff7ac0e594)
0xffff7ac0e58c   364  movz x0, #0x0
0xffff7ac0e590   368  ret
0xffff7ac0e594   372  asr x10, x10, #32
0xffff7ac0e598   376  add x11, x10, #0x17 (23)
0xffff7ac0e59c   380  add x1, x1, x11
0xffff7ac0e5a0   384  add x0, x0, x11
0xffff7ac0e5a4   388  neg x10, x10
0xffff7ac0e5a8   392  ldrb w11, [x1, x10]
0xffff7ac0e5ac   396  ldrb w12, [x0, x10]
0xffff7ac0e5b0   400  cmp x11, x12
0xffff7ac0e5b4   404  b.ne #-0x34 (addr 0xffff7ac0e580)
0xffff7ac0e5b8   408  add x10, x10, #0x1 (1)
0xffff7ac0e5bc   412  cbnz x10, #-0x14 (addr 0xffff7ac0e5a8)
0xffff7ac0e5c0   416  movz x0, #0x0
0xffff7ac0e5c4   420  ret
0xffff7ac0e5c8   424  movz x16, #0xc00000000
0xffff7ac0e5cc   428  sub csp, jssp, #0x10 (16)
0xffff7ac0e5d0   432  stp fp, lr, [jssp, #-16]!
0xffff7ac0e5d4   436  sub csp, jssp, #0x10 (16)
0xffff7ac0e5d8   440  str x16, [jssp, #-8]!
0xffff7ac0e5dc   444  ldr x17, pc+172 (addr 0x0000ffff7ac0e688)    ;; object: 0xffff7ac0e3c1 <Code: COMPARE_IC>
0xffff7ac0e5e0   448  sub csp, jssp, #0x10 (16)
0xffff7ac0e5e4   452  str x17, [jssp, #-8]!
0xffff7ac0e5e8   456  add fp, jssp, #0x10 (16)
0xffff7ac0e5ec   460  sub csp, jssp, #0x10 (16)
0xffff7ac0e5f0   464  stp x0, x1, [jssp, #-16]!
0xffff7ac0e5f4   468  movz x0, #0x2
0xffff7ac0e5f8   472  ldr x1, pc+152 (addr 0x0000ffff7ac0e690)    ;; external reference (Runtime::Equal)
0xffff7ac0e5fc   476  ldr x16, pc+156 (addr 0x0000ffff7ac0e698)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ac0e600   480  blr x16
0xffff7ac0e604   484  mov jssp, fp
0xffff7ac0e608   488  ldp fp, lr, [jssp], #16
0xffff7ac0e60c   492  ldr x1, [x26, #64]
0xffff7ac0e610   496  sub x0, x0, x1
0xffff7ac0e614   500  ret
0xffff7ac0e618   504  movz x16, #0xc00000000
0xffff7ac0e61c   508  sub csp, jssp, #0x10 (16)
0xffff7ac0e620   512  stp fp, lr, [jssp, #-16]!
0xffff7ac0e624   516  sub csp, jssp, #0x10 (16)
0xffff7ac0e628   520  str x16, [jssp, #-8]!
0xffff7ac0e62c   524  ldr x17, pc+116 (addr 0x0000ffff7ac0e6a0)    ;; object: 0xffff7ac0e3c1 <Code: COMPARE_IC>
0xffff7ac0e630   528  sub csp, jssp, #0x10 (16)
0xffff7ac0e634   532  str x17, [jssp, #-8]!
0xffff7ac0e638   536  add fp, jssp, #0x10 (16)
0xffff7ac0e63c   540  sub csp, jssp, #0x18 (24)
0xffff7ac0e640   544  stp lr, x0, [jssp, #-24]!
0xffff7ac0e644   548  str x1, [jssp, #16]
0xffff7ac0e648   552  movz x10, #0x2d00000000
0xffff7ac0e64c   556  sub csp, jssp, #0x18 (24)
0xffff7ac0e650   560  stp x10, x0, [jssp, #-24]!
0xffff7ac0e654   564  str x1, [jssp, #16]
0xffff7ac0e658   568  movz x0, #0x3
0xffff7ac0e65c   572  ldr x1, pc+76 (addr 0x0000ffff7ac0e6a8)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ac0e660   576  ldr x16, pc+80 (addr 0x0000ffff7ac0e6b0)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ac0e664   580  blr x16
0xffff7ac0e668   584  add x11, x0, #0x5f (95)
0xffff7ac0e66c   588  ldr x1, [jssp, #16]
0xffff7ac0e670   592  ldp lr, x0, [jssp], #24
0xffff7ac0e674   596  mov jssp, fp
0xffff7ac0e678   600  ldp fp, lr, [jssp], #16
0xffff7ac0e67c   604  br x11
0xffff7ac0e680   608  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0xffff7ac0e684   612  d63f03e0       constant
0xffff7ac0e688   616  7ac0e3c1       constant
0xffff7ac0e68c   620  0000ffff       constant
0xffff7ac0e690   624  00e503b8       constant
0xffff7ac0e694   628  00000000       constant
0xffff7ac0e698   632  7ab06060       constant
0xffff7ac0e69c   636  0000ffff       constant
0xffff7ac0e6a0   640  7ac0e3c1       constant
0xffff7ac0e6a4   644  0000ffff       constant
0xffff7ac0e6a8   648  00c8a980       constant
0xffff7ac0e6ac   652  00000000       constant
0xffff7ac0e6b0   656  7ab06060       constant
0xffff7ac0e6b4   660  0000ffff       constant


RelocInfo (size = 16)
0xffff7ac0e5dc  embedded object  (0xffff7ac0e3c1 <Code: COMPARE_IC>)
0xffff7ac0e5f8  external reference (Runtime::Equal)  (0xe503b8)
0xffff7ac0e5fc  code target (STUB)  (0xffff7ab06060)
0xffff7ac0e62c  embedded object  (0xffff7ac0e3c1 <Code: COMPARE_IC>)
0xffff7ac0e65c  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ac0e660  code target (STUB)  (0xffff7ab06060)
0xffff7ac0e680  constant pool (size 56)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = NUMBER*NUMBER -> NUMBER
compare_operation = EQ
name = CompareICStub
compiler = unknown
Instructions (size = 232)
0xffff7ac0e720     0  scvtf d0, x0, #32
0xffff7ac0e724     4  scvtf d1, x1, #32
0xffff7ac0e728     8  tbz w0, #0, #+0x18 (addr 0xffff7ac0e740)
0xffff7ac0e72c    12  ldur x16, [x0, #-1]
0xffff7ac0e730    16  ldr x17, [x26, #120]
0xffff7ac0e734    20  cmp x16, x17
0xffff7ac0e738    24  b.ne #+0x3c (addr 0xffff7ac0e774)
0xffff7ac0e73c    28  ldur d0, [x0, #7]
0xffff7ac0e740    32  tbz w1, #0, #+0x18 (addr 0xffff7ac0e758)
0xffff7ac0e744    36  ldur x16, [x1, #-1]
0xffff7ac0e748    40  ldr x17, [x26, #120]
0xffff7ac0e74c    44  cmp x16, x17
0xffff7ac0e750    48  b.ne #+0x24 (addr 0xffff7ac0e774)
0xffff7ac0e754    52  ldur d1, [x1, #7]
0xffff7ac0e758    56  fcmp d1, d0
0xffff7ac0e75c    60  b.vs #+0x10 (addr 0xffff7ac0e76c)
0xffff7ac0e760    64  cset x0, gt
0xffff7ac0e764    68  csinv x0, x0, xzr, ge
0xffff7ac0e768    72  ret
0xffff7ac0e76c    76  ldr x16, pc+124 (addr 0x0000ffff7ac0e7e8)    ;; code: COMPARE_IC, GENERIC
0xffff7ac0e770    80  br x16
0xffff7ac0e774    84  movz x16, #0xc00000000
0xffff7ac0e778    88  sub csp, jssp, #0x10 (16)
0xffff7ac0e77c    92  stp fp, lr, [jssp, #-16]!
0xffff7ac0e780    96  sub csp, jssp, #0x10 (16)
0xffff7ac0e784   100  str x16, [jssp, #-8]!
0xffff7ac0e788   104  ldr x17, pc+104 (addr 0x0000ffff7ac0e7f0)    ;; object: 0xffff7ac0e6c1 <Code: COMPARE_IC>
0xffff7ac0e78c   108  sub csp, jssp, #0x10 (16)
0xffff7ac0e790   112  str x17, [jssp, #-8]!
0xffff7ac0e794   116  add fp, jssp, #0x10 (16)
0xffff7ac0e798   120  sub csp, jssp, #0x18 (24)
0xffff7ac0e79c   124  stp lr, x0, [jssp, #-24]!
0xffff7ac0e7a0   128  str x1, [jssp, #16]
0xffff7ac0e7a4   132  movz x10, #0x2d00000000
0xffff7ac0e7a8   136  sub csp, jssp, #0x18 (24)
0xffff7ac0e7ac   140  stp x10, x0, [jssp, #-24]!
0xffff7ac0e7b0   144  str x1, [jssp, #16]
0xffff7ac0e7b4   148  movz x0, #0x3
0xffff7ac0e7b8   152  ldr x1, pc+64 (addr 0x0000ffff7ac0e7f8)    ;; external reference (Runtime::CompareIC_Miss)
0xffff7ac0e7bc   156  ldr x16, pc+68 (addr 0x0000ffff7ac0e800)    ;; code: STUB, CEntryStub, minor: 4
0xffff7ac0e7c0   160  blr x16
0xffff7ac0e7c4   164  add x11, x0, #0x5f (95)
0xffff7ac0e7c8   168  ldr x1, [jssp, #16]
0xffff7ac0e7cc   172  ldp lr, x0, [jssp], #24
0xffff7ac0e7d0   176  mov jssp, fp
0xffff7ac0e7d4   180  ldp fp, lr, [jssp], #16
0xffff7ac0e7d8   184  br x11
0xffff7ac0e7dc   188  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0xffff7ac0e7e0   192  d63f03e0       constant
0xffff7ac0e7e4   196  d503201f       constant
0xffff7ac0e7e8   200  7ac0e420       constant
0xffff7ac0e7ec   204  0000ffff       constant
0xffff7ac0e7f0   208  7ac0e6c1       constant
0xffff7ac0e7f4   212  0000ffff       constant
0xffff7ac0e7f8   216  00c8a980       constant
0xffff7ac0e7fc   220  00000000       constant
0xffff7ac0e800   224  7ab06060       constant
0xffff7ac0e804   228  0000ffff       constant


RelocInfo (size = 13)
0xffff7ac0e76c  code target (COMPARE_IC)  (0xffff7ac0e420)
0xffff7ac0e788  embedded object  (0xffff7ac0e6c1 <Code: COMPARE_IC>)
0xffff7ac0e7b8  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0xffff7ac0e7bc  code target (STUB)  (0xffff7ab06060)
0xffff7ac0e7dc  constant pool (size 44)


kind = HANDLER
major_key = <NoCache>Stub
name = isFinite
compiler = unknown
Instructions (size = 120)
0xffff7ac0e880     0  sub csp, jssp, #0x8 (8)
0xffff7ac0e884     4  str x3, [jssp, #-8]!
0xffff7ac0e888     8  sub csp, jssp, #0x8 (8)
0xffff7ac0e88c    12  str x0, [jssp, #-8]!
0xffff7ac0e890    16  ldr x0, pc+80 (addr 0x0000ffff7ac0e8e0)    ;; object: 0x20dc5d51 Cell for 0
0xffff7ac0e894    20  ldur x0, [x0, #7]
0xffff7ac0e898    24  cmp x0, #0x0 (0)
0xffff7ac0e89c    28  b.ne #+0x2c (addr 0xffff7ac0e8c8)
0xffff7ac0e8a0    32  ldr x0, pc+72 (addr 0x0000ffff7ac0e8e8)    ;; object: 0x5d4f0e79 WeakCell for 0x20d584e1 PropertyCell for 0x5d468a01 <JS Function isFinite (SharedFunctionInfo 0x20d539f1)>
0xffff7ac0e8a4    36  ldur x0, [x0, #7]
0xffff7ac0e8a8    40  tbz w0, #0, #+0x20 (addr 0xffff7ac0e8c8)
0xffff7ac0e8ac    44  ldur x0, [x0, #15]
0xffff7ac0e8b0    48  ldr x16, [x26, #88]
0xffff7ac0e8b4    52  cmp x0, x16
0xffff7ac0e8b8    56  b.eq #+0x10 (addr 0xffff7ac0e8c8)
0xffff7ac0e8bc    60  add jssp, jssp, #0x10 (16)
0xffff7ac0e8c0    64  ret
0xffff7ac0e8c4    68  b #+0x14 (addr 0xffff7ac0e8d8)
0xffff7ac0e8c8    72  ldr x0, [jssp], #8
0xffff7ac0e8cc    76  ldr x3, [jssp], #8
0xffff7ac0e8d0    80  ldr x16, pc+32 (addr 0x0000ffff7ac0e8f0)    ;; code: BUILTIN
0xffff7ac0e8d4    84  br x16
0xffff7ac0e8d8    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0xffff7ac0e8dc    92  d63f03e0       constant
0xffff7ac0e8e0    96  20dc5d51       constant
0xffff7ac0e8e4   100  00000000       constant
0xffff7ac0e8e8   104  5d4f0e79       constant
0xffff7ac0e8ec   108  00000000       constant
0xffff7ac0e8f0   112  7ab222e0       constant
0xffff7ac0e8f4   116  0000ffff       constant


RelocInfo (size = 9)
0xffff7ac0e890  embedded object  (0x20dc5d51 Cell for 0)
0xffff7ac0e8a0  embedded object  (0x5d4f0e79 WeakCell for 0x20d584e1 PropertyCell for 0x5d468a01 <JS Function isFinite (SharedFunctionInfo 0x20d539f1)>)
0xffff7ac0e8d0  code target (BUILTIN)  (0xffff7ab222e0)
0xffff7ac0e8d8  constant pool (size 32)

argv length -- 2: /usr/bin/nodejs,/root/28bce2/more/argv/unsafe.js
--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 437)
0xffff7ac10a60     0  ldur x4, [x1, #15]
0xffff7ac10a64     4  ldur w5, [x4, #11]
0xffff7ac10a68     8  ldur x16, [x1, #23]
0xffff7ac10a6c    12  ldur x16, [x16, #39]
0xffff7ac10a70    16  tst x16, #0x8
0xffff7ac10a74    20  b.ne #+0x134 (addr 0xffff7ac10ba8)
0xffff7ac10a78    24  ldur x6, [x4, #23]
0xffff7ac10a7c    28  ldur x4, [x4, #15]
0xffff7ac10a80    32  add x4, x6, x4
0xffff7ac10a84    36  tbnz w2, #0, #+0x2c (addr 0xffff7ac10ab0)
0xffff7ac10a88    40  asr x7, x2, #32
0xffff7ac10a8c    44  cmp w7, w5
0xffff7ac10a90    48  b.hs #+0x128 (addr 0xffff7ac10bb8)
0xffff7ac10a94    52  ldr w2, [x4, w7, sxtw #2]
0xffff7ac10a98    56  movn w16, #0x80000000
0xffff7ac10a9c    60  cmp w2, w16
0xffff7ac10aa0    64  b.hi #+0x58 (addr 0xffff7ac10af8)
0xffff7ac10aa4    68  lsl x3, x2, #32
0xffff7ac10aa8    72  mov x0, x3
0xffff7ac10aac    76  ret
0xffff7ac10ab0    80  sub csp, jssp, #0x10 (16)
0xffff7ac10ab4    84  stp fp, lr, [jssp, #-16]!
0xffff7ac10ab8    88  movz fp, #0xa00000000
0xffff7ac10abc    92  sub csp, jssp, #0x8 (8)
0xffff7ac10ac0    96  str fp, [jssp, #-8]!
0xffff7ac10ac4   100  add fp, jssp, #0x8 (8)
0xffff7ac10ac8   104  ldur x16, [x2, #-1]
0xffff7ac10acc   108  ldr x17, [x26, #120]
0xffff7ac10ad0   112  cmp x16, x17
0xffff7ac10ad4   116  b.ne #+0xf4 (addr 0xffff7ac10bc8)
0xffff7ac10ad8   120  ldur d29, [x2, #7]
0xffff7ac10adc   124  fcvtzs w7, d29
0xffff7ac10ae0   128  scvtf d0, w7
0xffff7ac10ae4   132  fcmp d29, d0
0xffff7ac10ae8   136  b.ne #+0xe0 (addr 0xffff7ac10bc8)
0xffff7ac10aec   140  ldr lr, [jssp, #16]
0xffff7ac10af0   144  ldp xzr, fp, [jssp], #24
0xffff7ac10af4   148  b #-0x68 (addr 0xffff7ac10a8c)
0xffff7ac10af8   152  sub csp, jssp, #0x10 (16)
0xffff7ac10afc   156  stp fp, lr, [jssp, #-16]!
0xffff7ac10b00   160  movz fp, #0xa00000000
0xffff7ac10b04   164  sub csp, jssp, #0x8 (8)
0xffff7ac10b08   168  str fp, [jssp, #-8]!
0xffff7ac10b0c   172  add fp, jssp, #0x8 (8)
0xffff7ac10b10   176  movz x1, #0xe2c0
0xffff7ac10b14   180  movk x1, #0x9ab, lsl #16
0xffff7ac10b18   184  ldp x3, x0, [x1]
0xffff7ac10b1c   188  adds x16, x3, #0x10 (16)
0xffff7ac10b20   192  ccmp x16, x0, #nzCv, lo
0xffff7ac10b24   196  b.hi #+0x18 (addr 0xffff7ac10b3c)
0xffff7ac10b28   200  str x16, [x1]
0xffff7ac10b2c   204  ldr x1, [x26, #120]
0xffff7ac10b30   208  str x1, [x3]
0xffff7ac10b34   212  orr x3, x3, #0x1
0xffff7ac10b38   216  b #+0x38 (addr 0xffff7ac10b70)
0xffff7ac10b3c   220  movz x3, #0x0
0xffff7ac10b40   224  mov x16, lr
0xffff7ac10b44   228  ldr x17, pc+76 (addr 0x0000ffff7ac10b90)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ac10b48   232  blr x17
0xffff7ac10b4c   236  ldur cp, [fp, #-8]
0xffff7ac10b50   240  movz x0, #0x0
0xffff7ac10b54   244  movz x1, #0x4b48
0xffff7ac10b58   248  movk x1, #0xe4, lsl #16
0xffff7ac10b5c   252  ldr x16, pc+60 (addr 0x0000ffff7ac10b98)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ac10b60   256  blr x16
0xffff7ac10b64   260  str x0, [jssp, #24]
0xffff7ac10b68   264  ldr x16, pc+56 (addr 0x0000ffff7ac10ba0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ac10b6c   268  blr x16
0xffff7ac10b70   272  ucvtf d29, w2
0xffff7ac10b74   276  stur d29, [x3, #7]
0xffff7ac10b78   280  ldr lr, [jssp, #16]
0xffff7ac10b7c   284  ldp xzr, fp, [jssp], #24
0xffff7ac10b80   288  b #-0xd8 (addr 0xffff7ac10aa8)
0xffff7ac10b84   292  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ac10b88   296  d63f03e0       constant
0xffff7ac10b8c   300  d503201f       constant
0xffff7ac10b90   304  7ab06820       constant
0xffff7ac10b94   308  0000ffff       constant
0xffff7ac10b98   312  7ab06260       constant
0xffff7ac10b9c   316  0000ffff       constant
0xffff7ac10ba0   320  7ab068e0       constant
0xffff7ac10ba4   324  0000ffff       constant
0xffff7ac10ba8   328  movz x16, #0x0
0xffff7ac10bac   332  sub csp, jssp, #0x10 (16)
0xffff7ac10bb0   336  stp fp, lr, [jssp, #-16]!
0xffff7ac10bb4   340  bl #+0x1c (addr 0xffff7ac10bd0)
0xffff7ac10bb8   344  movz x16, #0x8
0xffff7ac10bbc   348  sub csp, jssp, #0x10 (16)
0xffff7ac10bc0   352  stp fp, lr, [jssp, #-16]!
0xffff7ac10bc4   356  bl #+0xc (addr 0xffff7ac10bd0)
0xffff7ac10bc8   360  movz x16, #0x10
0xffff7ac10bcc   364  bl #+0x14 (addr 0xffff7ac10be0)
0xffff7ac10bd0   368  movz x17, #0xa00000000
0xffff7ac10bd4   372  sub csp, jssp, #0x10 (16)
0xffff7ac10bd8   376  stp x17, cp, [jssp, #-16]!
0xffff7ac10bdc   380  add fp, jssp, #0x10 (16)
0xffff7ac10be0   384  ldr x17, pc+24 (addr 0x0000ffff7ac10bf8)    ;; lazy deoptimization bailout 0
0xffff7ac10be4   388  add x17, x17, x16
0xffff7ac10be8   392  br x17
0xffff7ac10bec   396  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ac10bf0   400  d63f03e0       constant
0xffff7ac10bf4   404  d503201f       constant
0xffff7ac10bf8   408  7a906000       constant
0xffff7ac10bfc   412  0000ffff       constant


Safepoints (size = 21)
0xffff7ac10b64   260  000 | x3 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ac10b44  code target (STUB)  (0xffff7ab06820)
0xffff7ac10b5c  code target (STUB)  (0xffff7ab06260)
0xffff7ac10b68  code target (STUB)  (0xffff7ab068e0)
0xffff7ac10b84  constant pool (size 36)
0xffff7ac10be0  runtime entry
0xffff7ac10bec  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = LoadFastElementStub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 437)
0xffff7ac10a60     0  ldur x4, [x1, #15]
0xffff7ac10a64     4  ldur w5, [x4, #11]
0xffff7ac10a68     8  ldur x16, [x1, #23]
0xffff7ac10a6c    12  ldur x16, [x16, #39]
0xffff7ac10a70    16  tst x16, #0x8
0xffff7ac10a74    20  b.ne #+0x134 (addr 0xffff7ac10ba8)
0xffff7ac10a78    24  ldur x6, [x4, #23]
0xffff7ac10a7c    28  ldur x4, [x4, #15]
0xffff7ac10a80    32  add x4, x6, x4
0xffff7ac10a84    36  tbnz w2, #0, #+0x2c (addr 0xffff7ac10ab0)
0xffff7ac10a88    40  asr x7, x2, #32
0xffff7ac10a8c    44  cmp w7, w5
0xffff7ac10a90    48  b.hs #+0x128 (addr 0xffff7ac10bb8)
0xffff7ac10a94    52  ldr w2, [x4, w7, sxtw #2]
0xffff7ac10a98    56  movn w16, #0x80000000
0xffff7ac10a9c    60  cmp w2, w16
0xffff7ac10aa0    64  b.hi #+0x58 (addr 0xffff7ac10af8)
0xffff7ac10aa4    68  lsl x3, x2, #32
0xffff7ac10aa8    72  mov x0, x3
0xffff7ac10aac    76  ret
0xffff7ac10ab0    80  sub csp, jssp, #0x10 (16)
0xffff7ac10ab4    84  stp fp, lr, [jssp, #-16]!
0xffff7ac10ab8    88  movz fp, #0xa00000000
0xffff7ac10abc    92  sub csp, jssp, #0x8 (8)
0xffff7ac10ac0    96  str fp, [jssp, #-8]!
0xffff7ac10ac4   100  add fp, jssp, #0x8 (8)
0xffff7ac10ac8   104  ldur x16, [x2, #-1]
0xffff7ac10acc   108  ldr x17, [x26, #120]
0xffff7ac10ad0   112  cmp x16, x17
0xffff7ac10ad4   116  b.ne #+0xf4 (addr 0xffff7ac10bc8)
0xffff7ac10ad8   120  ldur d29, [x2, #7]
0xffff7ac10adc   124  fcvtzs w7, d29
0xffff7ac10ae0   128  scvtf d0, w7
0xffff7ac10ae4   132  fcmp d29, d0
0xffff7ac10ae8   136  b.ne #+0xe0 (addr 0xffff7ac10bc8)
0xffff7ac10aec   140  ldr lr, [jssp, #16]
0xffff7ac10af0   144  ldp xzr, fp, [jssp], #24
0xffff7ac10af4   148  b #-0x68 (addr 0xffff7ac10a8c)
0xffff7ac10af8   152  sub csp, jssp, #0x10 (16)
0xffff7ac10afc   156  stp fp, lr, [jssp, #-16]!
0xffff7ac10b00   160  movz fp, #0xa00000000
0xffff7ac10b04   164  sub csp, jssp, #0x8 (8)
0xffff7ac10b08   168  str fp, [jssp, #-8]!
0xffff7ac10b0c   172  add fp, jssp, #0x8 (8)
0xffff7ac10b10   176  movz x1, #0xe2c0
0xffff7ac10b14   180  movk x1, #0x9ab, lsl #16
0xffff7ac10b18   184  ldp x3, x0, [x1]
0xffff7ac10b1c   188  adds x16, x3, #0x10 (16)
0xffff7ac10b20   192  ccmp x16, x0, #nzCv, lo
0xffff7ac10b24   196  b.hi #+0x18 (addr 0xffff7ac10b3c)
0xffff7ac10b28   200  str x16, [x1]
0xffff7ac10b2c   204  ldr x1, [x26, #120]
0xffff7ac10b30   208  str x1, [x3]
0xffff7ac10b34   212  orr x3, x3, #0x1
0xffff7ac10b38   216  b #+0x38 (addr 0xffff7ac10b70)
0xffff7ac10b3c   220  movz x3, #0x0
0xffff7ac10b40   224  mov x16, lr
0xffff7ac10b44   228  ldr x17, pc+76 (addr 0x0000ffff7ac10b90)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0xffff7ac10b48   232  blr x17
0xffff7ac10b4c   236  ldur cp, [fp, #-8]
0xffff7ac10b50   240  movz x0, #0x0
0xffff7ac10b54   244  movz x1, #0x4b48
0xffff7ac10b58   248  movk x1, #0xe4, lsl #16
0xffff7ac10b5c   252  ldr x16, pc+60 (addr 0x0000ffff7ac10b98)    ;; code: STUB, CEntryStub, minor: 5
0xffff7ac10b60   256  blr x16
0xffff7ac10b64   260  str x0, [jssp, #24]
0xffff7ac10b68   264  ldr x16, pc+56 (addr 0x0000ffff7ac10ba0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0xffff7ac10b6c   268  blr x16
0xffff7ac10b70   272  ucvtf d29, w2
0xffff7ac10b74   276  stur d29, [x3, #7]
0xffff7ac10b78   280  ldr lr, [jssp, #16]
0xffff7ac10b7c   284  ldp xzr, fp, [jssp], #24
0xffff7ac10b80   288  b #-0xd8 (addr 0xffff7ac10aa8)
0xffff7ac10b84   292  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0xffff7ac10b88   296  d63f03e0       constant
0xffff7ac10b8c   300  d503201f       constant
0xffff7ac10b90   304  7ab06820       constant
0xffff7ac10b94   308  0000ffff       constant
0xffff7ac10b98   312  7ab06260       constant
0xffff7ac10b9c   316  0000ffff       constant
0xffff7ac10ba0   320  7ab068e0       constant
0xffff7ac10ba4   324  0000ffff       constant
0xffff7ac10ba8   328  movz x16, #0x0
0xffff7ac10bac   332  sub csp, jssp, #0x10 (16)
0xffff7ac10bb0   336  stp fp, lr, [jssp, #-16]!
0xffff7ac10bb4   340  bl #+0x1c (addr 0xffff7ac10bd0)
0xffff7ac10bb8   344  movz x16, #0x8
0xffff7ac10bbc   348  sub csp, jssp, #0x10 (16)
0xffff7ac10bc0   352  stp fp, lr, [jssp, #-16]!
0xffff7ac10bc4   356  bl #+0xc (addr 0xffff7ac10bd0)
0xffff7ac10bc8   360  movz x16, #0x10
0xffff7ac10bcc   364  bl #+0x14 (addr 0xffff7ac10be0)
0xffff7ac10bd0   368  movz x17, #0xa00000000
0xffff7ac10bd4   372  sub csp, jssp, #0x10 (16)
0xffff7ac10bd8   376  stp x17, cp, [jssp, #-16]!
0xffff7ac10bdc   380  add fp, jssp, #0x10 (16)
0xffff7ac10be0   384  ldr x17, pc+24 (addr 0x0000ffff7ac10bf8)    ;; lazy deoptimization bailout 0
0xffff7ac10be4   388  add x17, x17, x16
0xffff7ac10be8   392  br x17
0xffff7ac10bec   396  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0xffff7ac10bf0   400  d63f03e0       constant
0xffff7ac10bf4   404  d503201f       constant
0xffff7ac10bf8   408  7a906000       constant
0xffff7ac10bfc   412  0000ffff       constant


Safepoints (size = 21)
0xffff7ac10b64   260  000 | x3 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0xffff7ac10b44  code target (STUB)  (0xffff7ab06820)
0xffff7ac10b5c  code target (STUB)  (0xffff7ab06260)
0xffff7ac10b68  code target (STUB)  (0xffff7ab068e0)
0xffff7ac10b84  constant pool (size 36)
0xffff7ac10be0  runtime entry
0xffff7ac10bec  constant pool (size 20)


