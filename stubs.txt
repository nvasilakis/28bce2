kind = STUB
major_key = CEntryStub
name = CEntryStub
compiler = unknown
Instructions (size = 392)
0x4cd06060     0  add x11, jssp, x0, lsl #3
0x4cd06064     4  sub x11, x11, #0x8 (8)
0x4cd06068     8  sub csp, jssp, #0x10 (16)
0x4cd0606c    12  stp fp, lr, [jssp, #-16]!
0x4cd06070    16  mov fp, jssp
0x4cd06074    20  movz x10, #0x300000000
0x4cd06078    24  sub csp, jssp, #0x8 (8)
0x4cd0607c    28  str x10, [jssp, #-8]!
0x4cd06080    32  sub csp, jssp, #0x8 (8)
0x4cd06084    36  str xzr, [jssp, #-8]!
0x4cd06088    40  ldr x10, pc+248 (addr 0x000000004cd06180)    ;; object: 0x4cd06001 <Code: STUB>
0x4cd0608c    44  sub csp, jssp, #0x8 (8)
0x4cd06090    48  str x10, [jssp, #-8]!
0x4cd06094    52  ldr x10, pc+244 (addr 0x000000004cd06188)    ;; external reference (Isolate::c_entry_fp_address)
0x4cd06098    56  str fp, [x10]
0x4cd0609c    60  ldr x10, pc+244 (addr 0x000000004cd06190)    ;; external reference (Isolate::context_address)
0x4cd060a0    64  str cp, [x10]
0x4cd060a4    68  sub csp, jssp, #0x20 (32)
0x4cd060a8    72  sub jssp, jssp, #0x20 (32)
0x4cd060ac    76  and csp, jssp, #0xfffffffffffffff0
0x4cd060b0    80  add x10, csp, #0x8 (8)
0x4cd060b4    84  stur x10, [fp, #-16]
0x4cd060b8    88  str x21, [csp, #8]
0x4cd060bc    92  str x22, [csp, #16]
0x4cd060c0    96  str x23, [csp, #24]
0x4cd060c4   100  mov x22, x0
0x4cd060c8   104  mov x23, x1
0x4cd060cc   108  mov x21, x11
0x4cd060d0   112  mov x0, x22
0x4cd060d4   116  mov x1, x21
0x4cd060d8   120  ldr x2, pc+192 (addr 0x000000004cd06198)    ;; external reference (isolate)
0x4cd060dc   124  adr x12, #+0xc (addr 0x4cd060e8)
0x4cd060e0   128  str x12, [csp]
0x4cd060e4   132  blr x23
0x4cd060e8   136  ldr x16, [x26, #344]
0x4cd060ec   140  cmp x0, x16
0x4cd060f0   144  b.eq #+0x34 (addr 0x4cd06124)
0x4cd060f4   148  mov x11, x22
0x4cd060f8   152  ldr x21, [csp, #8]
0x4cd060fc   156  ldr x22, [csp, #16]
0x4cd06100   160  ldr x23, [csp, #24]
0x4cd06104   164  ldr x10, pc+156 (addr 0x000000004cd061a0)    ;; external reference (Isolate::context_address)
0x4cd06108   168  ldr cp, [x10]
0x4cd0610c   172  ldr x10, pc+156 (addr 0x000000004cd061a8)    ;; external reference (Isolate::c_entry_fp_address)
0x4cd06110   176  str xzr, [x10]
0x4cd06114   180  mov jssp, fp
0x4cd06118   184  ldp fp, lr, [jssp], #16
0x4cd0611c   188  add jssp, jssp, x11, lsl #3
0x4cd06120   192  ret
0x4cd06124   196  movz x0, #0x0
0x4cd06128   200  movz x1, #0x0
0x4cd0612c   204  ldr x2, pc+132 (addr 0x000000004cd061b0)    ;; external reference (isolate)
0x4cd06130   208  ldr x16, pc+136 (addr 0x000000004cd061b8)    ;; external reference (Runtime::UnwindAndFindExceptionHandler)
0x4cd06134   212  blr x16
0x4cd06138   216  ldr cp, pc+136 (addr 0x000000004cd061c0)    ;; external reference (Isolate::pending_handler_context_address)
0x4cd0613c   220  ldr cp, [cp]
0x4cd06140   224  ldr jssp, pc+136 (addr 0x000000004cd061c8)    ;; external reference (Isolate::pending_handler_sp_address)
0x4cd06144   228  ldr jssp, [jssp]
0x4cd06148   232  ldr fp, pc+136 (addr 0x000000004cd061d0)    ;; external reference (Isolate::pending_handler_fp_address)
0x4cd0614c   236  ldr fp, [fp]
0x4cd06150   240  cbz cp, #+0x8 (addr 0x4cd06158)
0x4cd06154   244  stur cp, [fp, #-8]
0x4cd06158   248  ldr x10, pc+128 (addr 0x000000004cd061d8)    ;; external reference (Isolate::pending_handler_code_address)
0x4cd0615c   252  ldr x10, [x10]
0x4cd06160   256  ldr x11, pc+128 (addr 0x000000004cd061e0)    ;; external reference (Isolate::pending_handler_offset_address)
0x4cd06164   260  ldr x11, [x11]
0x4cd06168   264  add x10, x10, #0x5f (95)
0x4cd0616c   268  add x10, x10, x11
0x4cd06170   272  br x10
0x4cd06174   276  5800039f       constant pool begin (num_const = 28)    ;; constant pool
0x4cd06178   280  d63f03e0       constant
0x4cd0617c   284  d503201f       constant
0x4cd06180   288  4cd06001       constant
0x4cd06184   292  00000000       constant
0x4cd06188   296  166dddf8       constant
0x4cd0618c   300  00000000       constant
0x4cd06190   304  166ddd90       constant
0x4cd06194   308  00000000       constant
0x4cd06198   312  166dc2d0       constant
0x4cd0619c   316  00000000       constant
0x4cd061a0   320  166ddd90       constant
0x4cd061a4   324  00000000       constant
0x4cd061a8   328  166dddf8       constant
0x4cd061ac   332  00000000       constant
0x4cd061b0   336  166dc2d0       constant
0x4cd061b4   340  00000000       constant
0x4cd061b8   344  00e232d8       constant
0x4cd061bc   348  00000000       constant
0x4cd061c0   352  166ddda8       constant
0x4cd061c4   356  00000000       constant
0x4cd061c8   360  166dddc8       constant
0x4cd061cc   364  00000000       constant
0x4cd061d0   368  166dddc0       constant
0x4cd061d4   372  00000000       constant
0x4cd061d8   376  166dddb0       constant
0x4cd061dc   380  00000000       constant
0x4cd061e0   384  166dddb8       constant
0x4cd061e4   388  00000000       constant


RelocInfo (size = 31)
0x4cd06088  embedded object  (0x4cd06001 <Code: STUB>)
0x4cd06094  external reference (Isolate::c_entry_fp_address)  (0x166dddf8)
0x4cd0609c  external reference (Isolate::context_address)  (0x166ddd90)
0x4cd060d8  external reference (isolate)  (0x166dc2d0)
0x4cd06104  external reference (Isolate::context_address)  (0x166ddd90)
0x4cd0610c  external reference (Isolate::c_entry_fp_address)  (0x166dddf8)
0x4cd0612c  external reference (isolate)  (0x166dc2d0)
0x4cd06130  external reference (Runtime::UnwindAndFindExceptionHandler)  (0xe232d8)
0x4cd06138  external reference (Isolate::pending_handler_context_address)  (0x166ddda8)
0x4cd06140  external reference (Isolate::pending_handler_sp_address)  (0x166dddc8)
0x4cd06148  external reference (Isolate::pending_handler_fp_address)  (0x166dddc0)
0x4cd06158  external reference (Isolate::pending_handler_code_address)  (0x166dddb0)
0x4cd06160  external reference (Isolate::pending_handler_offset_address)  (0x166dddb8)
0x4cd06174  constant pool (size 116)


kind = STUB
major_key = CEntryStub
name = CEntryStub
compiler = unknown
Instructions (size = 488)
0x4cd06260     0  add x11, jssp, x0, lsl #3
0x4cd06264     4  sub x11, x11, #0x8 (8)
0x4cd06268     8  sub csp, jssp, #0x10 (16)
0x4cd0626c    12  stp fp, lr, [jssp, #-16]!
0x4cd06270    16  mov fp, jssp
0x4cd06274    20  movz x10, #0x300000000
0x4cd06278    24  sub csp, jssp, #0x8 (8)
0x4cd0627c    28  str x10, [jssp, #-8]!
0x4cd06280    32  sub csp, jssp, #0x8 (8)
0x4cd06284    36  str xzr, [jssp, #-8]!
0x4cd06288    40  ldr x10, pc+344 (addr 0x000000004cd063e0)    ;; object: 0x4cd06201 <Code: STUB>
0x4cd0628c    44  sub csp, jssp, #0x8 (8)
0x4cd06290    48  str x10, [jssp, #-8]!
0x4cd06294    52  ldr x10, pc+340 (addr 0x000000004cd063e8)    ;; external reference (Isolate::c_entry_fp_address)
0x4cd06298    56  str fp, [x10]
0x4cd0629c    60  ldr x10, pc+340 (addr 0x000000004cd063f0)    ;; external reference (Isolate::context_address)
0x4cd062a0    64  str cp, [x10]
0x4cd062a4    68  sub csp, jssp, #0xc0 (192)
0x4cd062a8    72  stp d28, d29, [jssp, #-32]!
0x4cd062ac    76  stp d30, d31, [jssp, #16]
0x4cd062b0    80  stp d24, d25, [jssp, #-32]!
0x4cd062b4    84  stp d26, d27, [jssp, #16]
0x4cd062b8    88  stp d20, d21, [jssp, #-32]!
0x4cd062bc    92  stp d22, d23, [jssp, #16]
0x4cd062c0    96  stp d16, d17, [jssp, #-32]!
0x4cd062c4   100  stp d18, d19, [jssp, #16]
0x4cd062c8   104  stp d4, d5, [jssp, #-32]!
0x4cd062cc   108  stp d6, d7, [jssp, #16]
0x4cd062d0   112  stp d0, d1, [jssp, #-32]!
0x4cd062d4   116  stp d2, d3, [jssp, #16]
0x4cd062d8   120  sub csp, jssp, #0x20 (32)
0x4cd062dc   124  sub jssp, jssp, #0x20 (32)
0x4cd062e0   128  and csp, jssp, #0xfffffffffffffff0
0x4cd062e4   132  add x10, csp, #0x8 (8)
0x4cd062e8   136  stur x10, [fp, #-16]
0x4cd062ec   140  str x21, [csp, #8]
0x4cd062f0   144  str x22, [csp, #16]
0x4cd062f4   148  str x23, [csp, #24]
0x4cd062f8   152  mov x22, x0
0x4cd062fc   156  mov x23, x1
0x4cd06300   160  mov x21, x11
0x4cd06304   164  mov x0, x22
0x4cd06308   168  mov x1, x21
0x4cd0630c   172  ldr x2, pc+236 (addr 0x000000004cd063f8)    ;; external reference (isolate)
0x4cd06310   176  adr x12, #+0xc (addr 0x4cd0631c)
0x4cd06314   180  str x12, [csp]
0x4cd06318   184  blr x23
0x4cd0631c   188  ldr x16, [x26, #344]
0x4cd06320   192  cmp x0, x16
0x4cd06324   196  b.eq #+0x64 (addr 0x4cd06388)
0x4cd06328   200  mov x11, x22
0x4cd0632c   204  ldr x21, [csp, #8]
0x4cd06330   208  ldr x22, [csp, #16]
0x4cd06334   212  ldr x23, [csp, #24]
0x4cd06338   216  ldp d30, d31, [fp, #-40]
0x4cd0633c   220  ldp d28, d29, [fp, #-56]
0x4cd06340   224  ldp d26, d27, [fp, #-72]
0x4cd06344   228  ldp d24, d25, [fp, #-88]
0x4cd06348   232  ldp d22, d23, [fp, #-104]
0x4cd0634c   236  ldp d20, d21, [fp, #-120]
0x4cd06350   240  ldp d18, d19, [fp, #-136]
0x4cd06354   244  ldp d16, d17, [fp, #-152]
0x4cd06358   248  ldp d6, d7, [fp, #-168]
0x4cd0635c   252  ldp d4, d5, [fp, #-184]
0x4cd06360   256  ldp d2, d3, [fp, #-200]
0x4cd06364   260  ldp d0, d1, [fp, #-216]
0x4cd06368   264  ldr x10, pc+152 (addr 0x000000004cd06400)    ;; external reference (Isolate::context_address)
0x4cd0636c   268  ldr cp, [x10]
0x4cd06370   272  ldr x10, pc+152 (addr 0x000000004cd06408)    ;; external reference (Isolate::c_entry_fp_address)
0x4cd06374   276  str xzr, [x10]
0x4cd06378   280  mov jssp, fp
0x4cd0637c   284  ldp fp, lr, [jssp], #16
0x4cd06380   288  add jssp, jssp, x11, lsl #3
0x4cd06384   292  ret
0x4cd06388   296  movz x0, #0x0
0x4cd0638c   300  movz x1, #0x0
0x4cd06390   304  ldr x2, pc+128 (addr 0x000000004cd06410)    ;; external reference (isolate)
0x4cd06394   308  ldr x16, pc+132 (addr 0x000000004cd06418)    ;; external reference (Runtime::UnwindAndFindExceptionHandler)
0x4cd06398   312  blr x16
0x4cd0639c   316  ldr cp, pc+132 (addr 0x000000004cd06420)    ;; external reference (Isolate::pending_handler_context_address)
0x4cd063a0   320  ldr cp, [cp]
0x4cd063a4   324  ldr jssp, pc+132 (addr 0x000000004cd06428)    ;; external reference (Isolate::pending_handler_sp_address)
0x4cd063a8   328  ldr jssp, [jssp]
0x4cd063ac   332  ldr fp, pc+132 (addr 0x000000004cd06430)    ;; external reference (Isolate::pending_handler_fp_address)
0x4cd063b0   336  ldr fp, [fp]
0x4cd063b4   340  cbz cp, #+0x8 (addr 0x4cd063bc)
0x4cd063b8   344  stur cp, [fp, #-8]
0x4cd063bc   348  ldr x10, pc+124 (addr 0x000000004cd06438)    ;; external reference (Isolate::pending_handler_code_address)
0x4cd063c0   352  ldr x10, [x10]
0x4cd063c4   356  ldr x11, pc+124 (addr 0x000000004cd06440)    ;; external reference (Isolate::pending_handler_offset_address)
0x4cd063c8   360  ldr x11, [x11]
0x4cd063cc   364  add x10, x10, #0x5f (95)
0x4cd063d0   368  add x10, x10, x11
0x4cd063d4   372  br x10
0x4cd063d8   376  5800037f       constant pool begin (num_const = 27)    ;; constant pool
0x4cd063dc   380  d63f03e0       constant
0x4cd063e0   384  4cd06201       constant
0x4cd063e4   388  00000000       constant
0x4cd063e8   392  166dddf8       constant
0x4cd063ec   396  00000000       constant
0x4cd063f0   400  166ddd90       constant
0x4cd063f4   404  00000000       constant
0x4cd063f8   408  166dc2d0       constant
0x4cd063fc   412  00000000       constant
0x4cd06400   416  166ddd90       constant
0x4cd06404   420  00000000       constant
0x4cd06408   424  166dddf8       constant
0x4cd0640c   428  00000000       constant
0x4cd06410   432  166dc2d0       constant
0x4cd06414   436  00000000       constant
0x4cd06418   440  00e232d8       constant
0x4cd0641c   444  00000000       constant
0x4cd06420   448  166ddda8       constant
0x4cd06424   452  00000000       constant
0x4cd06428   456  166dddc8       constant
0x4cd0642c   460  00000000       constant
0x4cd06430   464  166dddc0       constant
0x4cd06434   468  00000000       constant
0x4cd06438   472  166dddb0       constant
0x4cd0643c   476  00000000       constant
0x4cd06440   480  166dddb8       constant
0x4cd06444   484  00000000       constant


RelocInfo (size = 35)
0x4cd06288  embedded object  (0x4cd06201 <Code: STUB>)
0x4cd06294  external reference (Isolate::c_entry_fp_address)  (0x166dddf8)
0x4cd0629c  external reference (Isolate::context_address)  (0x166ddd90)
0x4cd0630c  external reference (isolate)  (0x166dc2d0)
0x4cd06368  external reference (Isolate::context_address)  (0x166ddd90)
0x4cd06370  external reference (Isolate::c_entry_fp_address)  (0x166dddf8)
0x4cd06390  external reference (isolate)  (0x166dc2d0)
0x4cd06394  external reference (Runtime::UnwindAndFindExceptionHandler)  (0xe232d8)
0x4cd0639c  external reference (Isolate::pending_handler_context_address)  (0x166ddda8)
0x4cd063a4  external reference (Isolate::pending_handler_sp_address)  (0x166dddc8)
0x4cd063ac  external reference (Isolate::pending_handler_fp_address)  (0x166dddc0)
0x4cd063bc  external reference (Isolate::pending_handler_code_address)  (0x166dddb0)
0x4cd063c4  external reference (Isolate::pending_handler_offset_address)  (0x166dddb8)
0x4cd063d8  constant pool (size 112)


kind = STUB
major_key = StoreBufferOverflowStub
name = StoreBufferOverflowStub
compiler = unknown
Instructions (size = 120)
0x4cd064c0     0  sub csp, jssp, #0x90 (144)
0x4cd064c4     4  stp x14, x15, [jssp, #-32]!
0x4cd064c8     8  stp x18, lr, [jssp, #16]
0x4cd064cc    12  stp x10, x11, [jssp, #-32]!
0x4cd064d0    16  stp x12, x13, [jssp, #16]
0x4cd064d4    20  stp x6, x7, [jssp, #-32]!
0x4cd064d8    24  stp x8, x9, [jssp, #16]
0x4cd064dc    28  stp x2, x3, [jssp, #-32]!
0x4cd064e0    32  stp x4, x5, [jssp, #16]
0x4cd064e4    36  stp x0, x1, [jssp, #-16]!
0x4cd064e8    40  ldr x0, pc+64 (addr 0x000000004cd06528)    ;; external reference (isolate)
0x4cd064ec    44  ldr x16, pc+68 (addr 0x000000004cd06530)    ;; external reference (StoreBuffer::StoreBufferOverflow)
0x4cd064f0    48  and csp, jssp, #0xfffffffffffffff0
0x4cd064f4    52  blr x16
0x4cd064f8    56  ldp x2, x3, [jssp, #16]
0x4cd064fc    60  ldp x0, x1, [jssp], #32
0x4cd06500    64  ldp x6, x7, [jssp, #16]
0x4cd06504    68  ldp x4, x5, [jssp], #32
0x4cd06508    72  ldp x10, x11, [jssp, #16]
0x4cd0650c    76  ldp x8, x9, [jssp], #32
0x4cd06510    80  ldp x14, x15, [jssp, #16]
0x4cd06514    84  ldp x12, x13, [jssp], #32
0x4cd06518    88  ldp x18, lr, [jssp], #16
0x4cd0651c    92  ret
0x4cd06520    96  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd06524   100  d63f03e0       constant
0x4cd06528   104  166dc2d0       constant
0x4cd0652c   108  00000000       constant
0x4cd06530   112  00c716d0       constant
0x4cd06534   116  00000000       constant


RelocInfo (size = 10)
0x4cd064e8  external reference (isolate)  (0x166dc2d0)
0x4cd064ec  external reference (StoreBuffer::StoreBufferOverflow)  (0xc716d0)
0x4cd06520  constant pool (size 24)


kind = STUB
major_key = StoreBufferOverflowStub
name = StoreBufferOverflowStub
compiler = unknown
Instructions (size = 216)
0x4cd065a0     0  sub csp, jssp, #0x90 (144)
0x4cd065a4     4  stp x14, x15, [jssp, #-32]!
0x4cd065a8     8  stp x18, lr, [jssp, #16]
0x4cd065ac    12  stp x10, x11, [jssp, #-32]!
0x4cd065b0    16  stp x12, x13, [jssp, #16]
0x4cd065b4    20  stp x6, x7, [jssp, #-32]!
0x4cd065b8    24  stp x8, x9, [jssp, #16]
0x4cd065bc    28  stp x2, x3, [jssp, #-32]!
0x4cd065c0    32  stp x4, x5, [jssp, #16]
0x4cd065c4    36  stp x0, x1, [jssp, #-16]!
0x4cd065c8    40  sub csp, jssp, #0xb0 (176)
0x4cd065cc    44  stp d26, d27, [jssp, #-32]!
0x4cd065d0    48  stp d28, d29, [jssp, #16]
0x4cd065d4    52  stp d22, d23, [jssp, #-32]!
0x4cd065d8    56  stp d24, d25, [jssp, #16]
0x4cd065dc    60  stp d18, d19, [jssp, #-32]!
0x4cd065e0    64  stp d20, d21, [jssp, #16]
0x4cd065e4    68  stp d6, d7, [jssp, #-32]!
0x4cd065e8    72  stp d16, d17, [jssp, #16]
0x4cd065ec    76  stp d2, d3, [jssp, #-32]!
0x4cd065f0    80  stp d4, d5, [jssp, #16]
0x4cd065f4    84  stp d0, d1, [jssp, #-16]!
0x4cd065f8    88  ldr x0, pc+112 (addr 0x000000004cd06668)    ;; external reference (isolate)
0x4cd065fc    92  ldr x16, pc+116 (addr 0x000000004cd06670)    ;; external reference (StoreBuffer::StoreBufferOverflow)
0x4cd06600    96  and csp, jssp, #0xfffffffffffffff0
0x4cd06604   100  blr x16
0x4cd06608   104  ldp d2, d3, [jssp, #16]
0x4cd0660c   108  ldp d0, d1, [jssp], #32
0x4cd06610   112  ldp d6, d7, [jssp, #16]
0x4cd06614   116  ldp d4, d5, [jssp], #32
0x4cd06618   120  ldp d18, d19, [jssp, #16]
0x4cd0661c   124  ldp d16, d17, [jssp], #32
0x4cd06620   128  ldp d22, d23, [jssp, #16]
0x4cd06624   132  ldp d20, d21, [jssp], #32
0x4cd06628   136  ldp d26, d27, [jssp, #16]
0x4cd0662c   140  ldp d24, d25, [jssp], #32
0x4cd06630   144  ldp d28, d29, [jssp], #16
0x4cd06634   148  ldp x2, x3, [jssp, #16]
0x4cd06638   152  ldp x0, x1, [jssp], #32
0x4cd0663c   156  ldp x6, x7, [jssp, #16]
0x4cd06640   160  ldp x4, x5, [jssp], #32
0x4cd06644   164  ldp x10, x11, [jssp, #16]
0x4cd06648   168  ldp x8, x9, [jssp], #32
0x4cd0664c   172  ldp x14, x15, [jssp, #16]
0x4cd06650   176  ldp x12, x13, [jssp], #32
0x4cd06654   180  ldp x18, lr, [jssp], #16
0x4cd06658   184  ret
0x4cd0665c   188  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd06660   192  d63f03e0       constant
0x4cd06664   196  d503201f       constant
0x4cd06668   200  166dc2d0       constant
0x4cd0666c   204  00000000       constant
0x4cd06670   208  00c716d0       constant
0x4cd06674   212  00000000       constant


RelocInfo (size = 14)
0x4cd065f8  external reference (isolate)  (0x166dc2d0)
0x4cd065fc  external reference (StoreBuffer::StoreBufferOverflow)  (0xc716d0)
0x4cd0665c  constant pool (size 28)


kind = STUB
major_key = StubFailureTrampolineStub
name = StubFailureTrampolineStub
compiler = unknown
Instructions (size = 48)
0x4cd066e0     0  ldr x16, pc+40 (addr 0x000000004cd06708)    ;; code: STUB, CEntryStub, minor: 5
0x4cd066e4     4  blr x16
0x4cd066e8     8  ldur x1, [fp, #-24]
0x4cd066ec    12  mov jssp, fp
0x4cd066f0    16  ldp fp, lr, [jssp], #16
0x4cd066f4    20  add jssp, jssp, x1, lsl #3
0x4cd066f8    24  ret
0x4cd066fc    28  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd06700    32  d63f03e0       constant
0x4cd06704    36  d503201f       constant
0x4cd06708    40  4cd06260       constant
0x4cd0670c    44  00000000       constant


RelocInfo (size = 7)
0x4cd066e0  code target (STUB)  (0x4cd06260)
0x4cd066fc  constant pool (size 20)


kind = STUB
major_key = StubFailureTrampolineStub
name = StubFailureTrampolineStub
compiler = unknown
Instructions (size = 48)
0x4cd06780     0  ldr x16, pc+40 (addr 0x000000004cd067a8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd06784     4  blr x16
0x4cd06788     8  ldur x1, [fp, #-24]
0x4cd0678c    12  add x1, x1, #0x1 (1)
0x4cd06790    16  mov jssp, fp
0x4cd06794    20  ldp fp, lr, [jssp], #16
0x4cd06798    24  add jssp, jssp, x1, lsl #3
0x4cd0679c    28  ret
0x4cd067a0    32  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd067a4    36  d63f03e0       constant
0x4cd067a8    40  4cd06260       constant
0x4cd067ac    44  00000000       constant


RelocInfo (size = 7)
0x4cd06780  code target (STUB)  (0x4cd06260)
0x4cd067a0  constant pool (size 16)


kind = STUB
major_key = StoreRegistersStateStub
name = StoreRegistersStateStub
compiler = unknown
Instructions (size = 80)
0x4cd06820     0  mov x17, lr
0x4cd06824     4  mov lr, x16
0x4cd06828     8  sub csp, jssp, #0x20 (32)
0x4cd0682c    12  sub jssp, jssp, #0x20 (32)
0x4cd06830    16  sub csp, jssp, #0xe0 (224)
0x4cd06834    20  stp x26, cp, [jssp, #-32]!
0x4cd06838    24  stp fp, lr, [jssp, #16]
0x4cd0683c    28  stp x22, x23, [jssp, #-32]!
0x4cd06840    32  stp x24, x25, [jssp, #16]
0x4cd06844    36  stp x18, x19, [jssp, #-32]!
0x4cd06848    40  stp x20, x21, [jssp, #16]
0x4cd0684c    44  stp x12, x13, [jssp, #-32]!
0x4cd06850    48  stp x14, x15, [jssp, #16]
0x4cd06854    52  stp x8, x9, [jssp, #-32]!
0x4cd06858    56  stp x10, x11, [jssp, #16]
0x4cd0685c    60  stp x4, x5, [jssp, #-32]!
0x4cd06860    64  stp x6, x7, [jssp, #16]
0x4cd06864    68  stp x0, x1, [jssp, #-32]!
0x4cd06868    72  stp x2, x3, [jssp, #16]
0x4cd0686c    76  ret x17


RelocInfo (size = 0)


kind = STUB
major_key = RestoreRegistersStateStub
name = RestoreRegistersStateStub
compiler = unknown
Instructions (size = 68)
0x4cd068e0     0  mov x16, lr
0x4cd068e4     4  ldp x2, x3, [jssp, #16]
0x4cd068e8     8  ldp x0, x1, [jssp], #32
0x4cd068ec    12  ldp x6, x7, [jssp, #16]
0x4cd068f0    16  ldp x4, x5, [jssp], #32
0x4cd068f4    20  ldp x10, x11, [jssp, #16]
0x4cd068f8    24  ldp x8, x9, [jssp], #32
0x4cd068fc    28  ldp x14, x15, [jssp, #16]
0x4cd06900    32  ldp x12, x13, [jssp], #32
0x4cd06904    36  ldp x20, x21, [jssp, #16]
0x4cd06908    40  ldp x18, x19, [jssp], #32
0x4cd0690c    44  ldp x24, x25, [jssp, #16]
0x4cd06910    48  ldp x22, x23, [jssp], #32
0x4cd06914    52  ldp fp, lr, [jssp, #16]
0x4cd06918    56  ldp x26, cp, [jssp], #32
0x4cd0691c    60  add jssp, jssp, #0x20 (32)
0x4cd06920    64  ret x16


RelocInfo (size = 0)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 469)
0x4cd069a0     0  movz w0, #0x6000
0x4cd069a4     4  movk w0, #0x9, lsl #16
0x4cd069a8     8  cmp w0, #0x30 (48)
0x4cd069ac    12  b.ls #+0x174 (addr 0x4cd06b20)
0x4cd069b0    16  movz x3, #0xd2c0
0x4cd069b4    20  movk x3, #0x166d, lsl #16
0x4cd069b8    24  ldp x4, x0, [x3]
0x4cd069bc    28  adds x16, x4, #0x60 (96)
0x4cd069c0    32  ccmp x16, x0, #nzCv, lo
0x4cd069c4    36  b.hi #+0x98 (addr 0x4cd06a5c)
0x4cd069c8    40  str x16, [x3]
0x4cd069cc    44  orr x4, x4, #0x1
0x4cd069d0    48  movz w0, #0x0
0x4cd069d4    52  stur x0, [x4, #47]
0x4cd069d8    56  ldur x0, [x1, #23]
0x4cd069dc    60  stur x0, [x4, #-1]
0x4cd069e0    64  ldr x0, pc+232 (addr 0x000000004cd06ac8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd069e4    68  stur x0, [x4, #7]
0x4cd069e8    72  ldr x0, pc+232 (addr 0x000000004cd06ad0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd069ec    76  stur x0, [x4, #15]
0x4cd069f0    80  movz x0, #0x0
0x4cd069f4    84  stur x0, [x4, #23]
0x4cd069f8    88  add x0, x4, #0x20 (32)
0x4cd069fc    92  ldr x1, pc+220 (addr 0x000000004cd06ad8)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd06a00    96  stur x1, [x0, #-1]
0x4cd06a04   100  stur x2, [x0, #7]
0x4cd06a08   104  ldur w0, [x2, #35]
0x4cd06a0c   108  add w0, w0, #0x1 (1)
0x4cd06a10   112  lsl x0, x0, #32
0x4cd06a14   116  stur x0, [x2, #31]
0x4cd06a18   120  add x0, x4, #0x30 (48)
0x4cd06a1c   124  ldr x1, pc+196 (addr 0x000000004cd06ae0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd06a20   128  stur x1, [x0, #-1]
0x4cd06a24   132  movz x1, #0x400000000
0x4cd06a28   136  stur x1, [x0, #7]
0x4cd06a2c   140  stur x0, [x4, #15]
0x4cd06a30   144  ldr x1, pc+184 (addr 0x000000004cd06ae8)    ;; object: 0x21004519 <the hole>
0x4cd06a34   148  stur x1, [x0, #15]
0x4cd06a38   152  ldr x1, pc+184 (addr 0x000000004cd06af0)    ;; object: 0x21004519 <the hole>
0x4cd06a3c   156  stur x1, [x0, #23]
0x4cd06a40   160  ldr x1, pc+184 (addr 0x000000004cd06af8)    ;; object: 0x21004519 <the hole>
0x4cd06a44   164  stur x1, [x0, #31]
0x4cd06a48   168  ldr x1, pc+184 (addr 0x000000004cd06b00)    ;; object: 0x21004519 <the hole>
0x4cd06a4c   172  stur x1, [x0, #39]
0x4cd06a50   176  mov x0, x4
0x4cd06a54   180  add jssp, jssp, #0x8 (8)
0x4cd06a58   184  ret
0x4cd06a5c   188  sub csp, jssp, #0x10 (16)
0x4cd06a60   192  stp fp, lr, [jssp, #-16]!
0x4cd06a64   196  movz fp, #0xa00000000
0x4cd06a68   200  sub csp, jssp, #0x8 (8)
0x4cd06a6c   204  str fp, [jssp, #-8]!
0x4cd06a70   208  add fp, jssp, #0x8 (8)
0x4cd06a74   212  movz x4, #0x0
0x4cd06a78   216  mov x16, lr
0x4cd06a7c   220  ldr x17, pc+140 (addr 0x000000004cd06b08)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd06a80   224  blr x17
0x4cd06a84   228  movz x0, #0x6000000000
0x4cd06a88   232  movz x10, #0x0
0x4cd06a8c   236  sub csp, jssp, #0x10 (16)
0x4cd06a90   240  stp x10, x0, [jssp, #-16]!
0x4cd06a94   244  movz x0, #0x2
0x4cd06a98   248  movz x1, #0x5b88
0x4cd06a9c   252  movk x1, #0xe2, lsl #16
0x4cd06aa0   256  ldr x16, pc+112 (addr 0x000000004cd06b10)    ;; code: STUB, CEntryStub, minor: 5
0x4cd06aa4   260  blr x16
0x4cd06aa8   264  str x0, [jssp, #32]
0x4cd06aac   268  ldr x16, pc+108 (addr 0x000000004cd06b18)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd06ab0   272  blr x16
0x4cd06ab4   276  ldr lr, [jssp, #16]
0x4cd06ab8   280  ldp xzr, fp, [jssp], #24
0x4cd06abc   284  b #-0xec (addr 0x4cd069d0)
0x4cd06ac0   288  580002ff       constant pool begin (num_const = 23)    ;; constant pool
0x4cd06ac4   292  d63f03e0       constant
0x4cd06ac8   296  21004201       constant
0x4cd06acc   300  00000000       constant
0x4cd06ad0   304  21004201       constant
0x4cd06ad4   308  00000000       constant
0x4cd06ad8   312  2a805d81       constant
0x4cd06adc   316  00000000       constant
0x4cd06ae0   320  2a804259       constant
0x4cd06ae4   324  00000000       constant
0x4cd06ae8   328  21004519       constant
0x4cd06aec   332  00000000       constant
0x4cd06af0   336  21004519       constant
0x4cd06af4   340  00000000       constant
0x4cd06af8   344  21004519       constant
0x4cd06afc   348  00000000       constant
0x4cd06b00   352  21004519       constant
0x4cd06b04   356  00000000       constant
0x4cd06b08   360  4cd06820       constant
0x4cd06b0c   364  00000000       constant
0x4cd06b10   368  4cd06260       constant
0x4cd06b14   372  00000000       constant
0x4cd06b18   376  4cd068e0       constant
0x4cd06b1c   380  00000000       constant
0x4cd06b20   384  movz x16, #0x0
0x4cd06b24   388  sub csp, jssp, #0x10 (16)
0x4cd06b28   392  stp fp, lr, [jssp, #-16]!
0x4cd06b2c   396  bl #+0x4 (addr 0x4cd06b30)
0x4cd06b30   400  movz x17, #0xa00000000
0x4cd06b34   404  sub csp, jssp, #0x10 (16)
0x4cd06b38   408  stp x17, cp, [jssp, #-16]!
0x4cd06b3c   412  add fp, jssp, #0x10 (16)
0x4cd06b40   416  ldr x17, pc+24 (addr 0x000000004cd06b58)    ;; lazy deoptimization bailout 0
0x4cd06b44   420  add x17, x17, x16
0x4cd06b48   424  br x17
0x4cd06b4c   428  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd06b50   432  d63f03e0       constant
0x4cd06b54   436  d503201f       constant
0x4cd06b58   440  4cb06000       constant
0x4cd06b5c   444  00000000       constant


Safepoints (size = 21)
0x4cd06aa8   264  000 | x1 | x2 | x4 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 29)
0x4cd069e0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd069e8  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd069fc  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd06a1c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd06a30  embedded object  (0x21004519 <the hole>)
0x4cd06a38  embedded object  (0x21004519 <the hole>)
0x4cd06a40  embedded object  (0x21004519 <the hole>)
0x4cd06a48  embedded object  (0x21004519 <the hole>)
0x4cd06a7c  code target (STUB)  (0x4cd06820)
0x4cd06aa0  code target (STUB)  (0x4cd06260)
0x4cd06aac  code target (STUB)  (0x4cd068e0)
0x4cd06ac0  constant pool (size 96)
0x4cd06b40  runtime entry
0x4cd06b4c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNoArgumentConstructorStub
name = ArrayNoArgumentConstructorStub_FAST_SMI_ELEMENTS
compiler = crankshaft
Instructions (size = 469)
0x4cd069a0     0  movz w0, #0x6000
0x4cd069a4     4  movk w0, #0x9, lsl #16
0x4cd069a8     8  cmp w0, #0x30 (48)
0x4cd069ac    12  b.ls #+0x174 (addr 0x4cd06b20)
0x4cd069b0    16  movz x3, #0xd2c0
0x4cd069b4    20  movk x3, #0x166d, lsl #16
0x4cd069b8    24  ldp x4, x0, [x3]
0x4cd069bc    28  adds x16, x4, #0x60 (96)
0x4cd069c0    32  ccmp x16, x0, #nzCv, lo
0x4cd069c4    36  b.hi #+0x98 (addr 0x4cd06a5c)
0x4cd069c8    40  str x16, [x3]
0x4cd069cc    44  orr x4, x4, #0x1
0x4cd069d0    48  movz w0, #0x0
0x4cd069d4    52  stur x0, [x4, #47]
0x4cd069d8    56  ldur x0, [x1, #23]
0x4cd069dc    60  stur x0, [x4, #-1]
0x4cd069e0    64  ldr x0, pc+232 (addr 0x000000004cd06ac8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd069e4    68  stur x0, [x4, #7]
0x4cd069e8    72  ldr x0, pc+232 (addr 0x000000004cd06ad0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd069ec    76  stur x0, [x4, #15]
0x4cd069f0    80  movz x0, #0x0
0x4cd069f4    84  stur x0, [x4, #23]
0x4cd069f8    88  add x0, x4, #0x20 (32)
0x4cd069fc    92  ldr x1, pc+220 (addr 0x000000004cd06ad8)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd06a00    96  stur x1, [x0, #-1]
0x4cd06a04   100  stur x2, [x0, #7]
0x4cd06a08   104  ldur w0, [x2, #35]
0x4cd06a0c   108  add w0, w0, #0x1 (1)
0x4cd06a10   112  lsl x0, x0, #32
0x4cd06a14   116  stur x0, [x2, #31]
0x4cd06a18   120  add x0, x4, #0x30 (48)
0x4cd06a1c   124  ldr x1, pc+196 (addr 0x000000004cd06ae0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd06a20   128  stur x1, [x0, #-1]
0x4cd06a24   132  movz x1, #0x400000000
0x4cd06a28   136  stur x1, [x0, #7]
0x4cd06a2c   140  stur x0, [x4, #15]
0x4cd06a30   144  ldr x1, pc+184 (addr 0x000000004cd06ae8)    ;; object: 0x21004519 <the hole>
0x4cd06a34   148  stur x1, [x0, #15]
0x4cd06a38   152  ldr x1, pc+184 (addr 0x000000004cd06af0)    ;; object: 0x21004519 <the hole>
0x4cd06a3c   156  stur x1, [x0, #23]
0x4cd06a40   160  ldr x1, pc+184 (addr 0x000000004cd06af8)    ;; object: 0x21004519 <the hole>
0x4cd06a44   164  stur x1, [x0, #31]
0x4cd06a48   168  ldr x1, pc+184 (addr 0x000000004cd06b00)    ;; object: 0x21004519 <the hole>
0x4cd06a4c   172  stur x1, [x0, #39]
0x4cd06a50   176  mov x0, x4
0x4cd06a54   180  add jssp, jssp, #0x8 (8)
0x4cd06a58   184  ret
0x4cd06a5c   188  sub csp, jssp, #0x10 (16)
0x4cd06a60   192  stp fp, lr, [jssp, #-16]!
0x4cd06a64   196  movz fp, #0xa00000000
0x4cd06a68   200  sub csp, jssp, #0x8 (8)
0x4cd06a6c   204  str fp, [jssp, #-8]!
0x4cd06a70   208  add fp, jssp, #0x8 (8)
0x4cd06a74   212  movz x4, #0x0
0x4cd06a78   216  mov x16, lr
0x4cd06a7c   220  ldr x17, pc+140 (addr 0x000000004cd06b08)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd06a80   224  blr x17
0x4cd06a84   228  movz x0, #0x6000000000
0x4cd06a88   232  movz x10, #0x0
0x4cd06a8c   236  sub csp, jssp, #0x10 (16)
0x4cd06a90   240  stp x10, x0, [jssp, #-16]!
0x4cd06a94   244  movz x0, #0x2
0x4cd06a98   248  movz x1, #0x5b88
0x4cd06a9c   252  movk x1, #0xe2, lsl #16
0x4cd06aa0   256  ldr x16, pc+112 (addr 0x000000004cd06b10)    ;; code: STUB, CEntryStub, minor: 5
0x4cd06aa4   260  blr x16
0x4cd06aa8   264  str x0, [jssp, #32]
0x4cd06aac   268  ldr x16, pc+108 (addr 0x000000004cd06b18)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd06ab0   272  blr x16
0x4cd06ab4   276  ldr lr, [jssp, #16]
0x4cd06ab8   280  ldp xzr, fp, [jssp], #24
0x4cd06abc   284  b #-0xec (addr 0x4cd069d0)
0x4cd06ac0   288  580002ff       constant pool begin (num_const = 23)    ;; constant pool
0x4cd06ac4   292  d63f03e0       constant
0x4cd06ac8   296  21004201       constant
0x4cd06acc   300  00000000       constant
0x4cd06ad0   304  21004201       constant
0x4cd06ad4   308  00000000       constant
0x4cd06ad8   312  2a805d81       constant
0x4cd06adc   316  00000000       constant
0x4cd06ae0   320  2a804259       constant
0x4cd06ae4   324  00000000       constant
0x4cd06ae8   328  21004519       constant
0x4cd06aec   332  00000000       constant
0x4cd06af0   336  21004519       constant
0x4cd06af4   340  00000000       constant
0x4cd06af8   344  21004519       constant
0x4cd06afc   348  00000000       constant
0x4cd06b00   352  21004519       constant
0x4cd06b04   356  00000000       constant
0x4cd06b08   360  4cd06820       constant
0x4cd06b0c   364  00000000       constant
0x4cd06b10   368  4cd06260       constant
0x4cd06b14   372  00000000       constant
0x4cd06b18   376  4cd068e0       constant
0x4cd06b1c   380  00000000       constant
0x4cd06b20   384  movz x16, #0x0
0x4cd06b24   388  sub csp, jssp, #0x10 (16)
0x4cd06b28   392  stp fp, lr, [jssp, #-16]!
0x4cd06b2c   396  bl #+0x4 (addr 0x4cd06b30)
0x4cd06b30   400  movz x17, #0xa00000000
0x4cd06b34   404  sub csp, jssp, #0x10 (16)
0x4cd06b38   408  stp x17, cp, [jssp, #-16]!
0x4cd06b3c   412  add fp, jssp, #0x10 (16)
0x4cd06b40   416  ldr x17, pc+24 (addr 0x000000004cd06b58)    ;; lazy deoptimization bailout 0
0x4cd06b44   420  add x17, x17, x16
0x4cd06b48   424  br x17
0x4cd06b4c   428  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd06b50   432  d63f03e0       constant
0x4cd06b54   436  d503201f       constant
0x4cd06b58   440  4cb06000       constant
0x4cd06b5c   444  00000000       constant


Safepoints (size = 21)
0x4cd06aa8   264  000 | x1 | x2 | x4 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 29)
0x4cd069e0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd069e8  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd069fc  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd06a1c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd06a30  embedded object  (0x21004519 <the hole>)
0x4cd06a38  embedded object  (0x21004519 <the hole>)
0x4cd06a40  embedded object  (0x21004519 <the hole>)
0x4cd06a48  embedded object  (0x21004519 <the hole>)
0x4cd06a7c  code target (STUB)  (0x4cd06820)
0x4cd06aa0  code target (STUB)  (0x4cd06260)
0x4cd06aac  code target (STUB)  (0x4cd068e0)
0x4cd06ac0  constant pool (size 96)
0x4cd06b40  runtime entry
0x4cd06b4c  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 429)
0x4cd06be0     0  movz w0, #0x6000
0x4cd06be4     4  movk w0, #0x9, lsl #16
0x4cd06be8     8  cmp w0, #0x30 (48)
0x4cd06bec    12  b.ls #+0x14c (addr 0x4cd06d38)
0x4cd06bf0    16  movz x2, #0xd2c0
0x4cd06bf4    20  movk x2, #0x166d, lsl #16
0x4cd06bf8    24  ldp x3, x0, [x2]
0x4cd06bfc    28  adds x16, x3, #0x50 (80)
0x4cd06c00    32  ccmp x16, x0, #nzCv, lo
0x4cd06c04    36  b.hi #+0x78 (addr 0x4cd06c7c)
0x4cd06c08    40  str x16, [x2]
0x4cd06c0c    44  orr x3, x3, #0x1
0x4cd06c10    48  movz w0, #0x0
0x4cd06c14    52  stur x0, [x3, #31]
0x4cd06c18    56  ldur x0, [x1, #23]
0x4cd06c1c    60  stur x0, [x3, #-1]
0x4cd06c20    64  ldr x0, pc+200 (addr 0x000000004cd06ce8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd06c24    68  stur x0, [x3, #7]
0x4cd06c28    72  ldr x0, pc+200 (addr 0x000000004cd06cf0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd06c2c    76  stur x0, [x3, #15]
0x4cd06c30    80  movz x0, #0x0
0x4cd06c34    84  stur x0, [x3, #23]
0x4cd06c38    88  add x0, x3, #0x20 (32)
0x4cd06c3c    92  ldr x1, pc+188 (addr 0x000000004cd06cf8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd06c40    96  stur x1, [x0, #-1]
0x4cd06c44   100  movz x1, #0x400000000
0x4cd06c48   104  stur x1, [x0, #7]
0x4cd06c4c   108  stur x0, [x3, #15]
0x4cd06c50   112  ldr x1, pc+176 (addr 0x000000004cd06d00)    ;; object: 0x21004519 <the hole>
0x4cd06c54   116  stur x1, [x0, #15]
0x4cd06c58   120  ldr x1, pc+176 (addr 0x000000004cd06d08)    ;; object: 0x21004519 <the hole>
0x4cd06c5c   124  stur x1, [x0, #23]
0x4cd06c60   128  ldr x1, pc+176 (addr 0x000000004cd06d10)    ;; object: 0x21004519 <the hole>
0x4cd06c64   132  stur x1, [x0, #31]
0x4cd06c68   136  ldr x1, pc+176 (addr 0x000000004cd06d18)    ;; object: 0x21004519 <the hole>
0x4cd06c6c   140  stur x1, [x0, #39]
0x4cd06c70   144  mov x0, x3
0x4cd06c74   148  add jssp, jssp, #0x8 (8)
0x4cd06c78   152  ret
0x4cd06c7c   156  sub csp, jssp, #0x10 (16)
0x4cd06c80   160  stp fp, lr, [jssp, #-16]!
0x4cd06c84   164  movz fp, #0xa00000000
0x4cd06c88   168  sub csp, jssp, #0x8 (8)
0x4cd06c8c   172  str fp, [jssp, #-8]!
0x4cd06c90   176  add fp, jssp, #0x8 (8)
0x4cd06c94   180  movz x3, #0x0
0x4cd06c98   184  mov x16, lr
0x4cd06c9c   188  ldr x17, pc+132 (addr 0x000000004cd06d20)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd06ca0   192  blr x17
0x4cd06ca4   196  movz x0, #0x5000000000
0x4cd06ca8   200  movz x10, #0x0
0x4cd06cac   204  sub csp, jssp, #0x10 (16)
0x4cd06cb0   208  stp x10, x0, [jssp, #-16]!
0x4cd06cb4   212  movz x0, #0x2
0x4cd06cb8   216  movz x1, #0x5b88
0x4cd06cbc   220  movk x1, #0xe2, lsl #16
0x4cd06cc0   224  ldr x16, pc+104 (addr 0x000000004cd06d28)    ;; code: STUB, CEntryStub, minor: 5
0x4cd06cc4   228  blr x16
0x4cd06cc8   232  str x0, [jssp, #24]
0x4cd06ccc   236  ldr x16, pc+100 (addr 0x000000004cd06d30)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd06cd0   240  blr x16
0x4cd06cd4   244  ldr lr, [jssp, #16]
0x4cd06cd8   248  ldp xzr, fp, [jssp], #24
0x4cd06cdc   252  b #-0xcc (addr 0x4cd06c10)
0x4cd06ce0   256  580002bf       constant pool begin (num_const = 21)    ;; constant pool
0x4cd06ce4   260  d63f03e0       constant
0x4cd06ce8   264  21004201       constant
0x4cd06cec   268  00000000       constant
0x4cd06cf0   272  21004201       constant
0x4cd06cf4   276  00000000       constant
0x4cd06cf8   280  2a804259       constant
0x4cd06cfc   284  00000000       constant
0x4cd06d00   288  21004519       constant
0x4cd06d04   292  00000000       constant
0x4cd06d08   296  21004519       constant
0x4cd06d0c   300  00000000       constant
0x4cd06d10   304  21004519       constant
0x4cd06d14   308  00000000       constant
0x4cd06d18   312  21004519       constant
0x4cd06d1c   316  00000000       constant
0x4cd06d20   320  4cd06820       constant
0x4cd06d24   324  00000000       constant
0x4cd06d28   328  4cd06260       constant
0x4cd06d2c   332  00000000       constant
0x4cd06d30   336  4cd068e0       constant
0x4cd06d34   340  00000000       constant
0x4cd06d38   344  movz x16, #0x0
0x4cd06d3c   348  sub csp, jssp, #0x10 (16)
0x4cd06d40   352  stp fp, lr, [jssp, #-16]!
0x4cd06d44   356  bl #+0x4 (addr 0x4cd06d48)
0x4cd06d48   360  movz x17, #0xa00000000
0x4cd06d4c   364  sub csp, jssp, #0x10 (16)
0x4cd06d50   368  stp x17, cp, [jssp, #-16]!
0x4cd06d54   372  add fp, jssp, #0x10 (16)
0x4cd06d58   376  ldr x17, pc+24 (addr 0x000000004cd06d70)    ;; lazy deoptimization bailout 0
0x4cd06d5c   380  add x17, x17, x16
0x4cd06d60   384  br x17
0x4cd06d64   388  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd06d68   392  d63f03e0       constant
0x4cd06d6c   396  d503201f       constant
0x4cd06d70   400  4cb06000       constant
0x4cd06d74   404  00000000       constant


Safepoints (size = 21)
0x4cd06cc8   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0x4cd06c20  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd06c28  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd06c3c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd06c50  embedded object  (0x21004519 <the hole>)
0x4cd06c58  embedded object  (0x21004519 <the hole>)
0x4cd06c60  embedded object  (0x21004519 <the hole>)
0x4cd06c68  embedded object  (0x21004519 <the hole>)
0x4cd06c9c  code target (STUB)  (0x4cd06820)
0x4cd06cc0  code target (STUB)  (0x4cd06260)
0x4cd06ccc  code target (STUB)  (0x4cd068e0)
0x4cd06ce0  constant pool (size 88)
0x4cd06d58  runtime entry
0x4cd06d64  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNoArgumentConstructorStub
name = ArrayNoArgumentConstructorStub_FAST_SMI_ELEMENTS_DISABLE_ALLOCATION_SITES
compiler = crankshaft
Instructions (size = 429)
0x4cd06be0     0  movz w0, #0x6000
0x4cd06be4     4  movk w0, #0x9, lsl #16
0x4cd06be8     8  cmp w0, #0x30 (48)
0x4cd06bec    12  b.ls #+0x14c (addr 0x4cd06d38)
0x4cd06bf0    16  movz x2, #0xd2c0
0x4cd06bf4    20  movk x2, #0x166d, lsl #16
0x4cd06bf8    24  ldp x3, x0, [x2]
0x4cd06bfc    28  adds x16, x3, #0x50 (80)
0x4cd06c00    32  ccmp x16, x0, #nzCv, lo
0x4cd06c04    36  b.hi #+0x78 (addr 0x4cd06c7c)
0x4cd06c08    40  str x16, [x2]
0x4cd06c0c    44  orr x3, x3, #0x1
0x4cd06c10    48  movz w0, #0x0
0x4cd06c14    52  stur x0, [x3, #31]
0x4cd06c18    56  ldur x0, [x1, #23]
0x4cd06c1c    60  stur x0, [x3, #-1]
0x4cd06c20    64  ldr x0, pc+200 (addr 0x000000004cd06ce8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd06c24    68  stur x0, [x3, #7]
0x4cd06c28    72  ldr x0, pc+200 (addr 0x000000004cd06cf0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd06c2c    76  stur x0, [x3, #15]
0x4cd06c30    80  movz x0, #0x0
0x4cd06c34    84  stur x0, [x3, #23]
0x4cd06c38    88  add x0, x3, #0x20 (32)
0x4cd06c3c    92  ldr x1, pc+188 (addr 0x000000004cd06cf8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd06c40    96  stur x1, [x0, #-1]
0x4cd06c44   100  movz x1, #0x400000000
0x4cd06c48   104  stur x1, [x0, #7]
0x4cd06c4c   108  stur x0, [x3, #15]
0x4cd06c50   112  ldr x1, pc+176 (addr 0x000000004cd06d00)    ;; object: 0x21004519 <the hole>
0x4cd06c54   116  stur x1, [x0, #15]
0x4cd06c58   120  ldr x1, pc+176 (addr 0x000000004cd06d08)    ;; object: 0x21004519 <the hole>
0x4cd06c5c   124  stur x1, [x0, #23]
0x4cd06c60   128  ldr x1, pc+176 (addr 0x000000004cd06d10)    ;; object: 0x21004519 <the hole>
0x4cd06c64   132  stur x1, [x0, #31]
0x4cd06c68   136  ldr x1, pc+176 (addr 0x000000004cd06d18)    ;; object: 0x21004519 <the hole>
0x4cd06c6c   140  stur x1, [x0, #39]
0x4cd06c70   144  mov x0, x3
0x4cd06c74   148  add jssp, jssp, #0x8 (8)
0x4cd06c78   152  ret
0x4cd06c7c   156  sub csp, jssp, #0x10 (16)
0x4cd06c80   160  stp fp, lr, [jssp, #-16]!
0x4cd06c84   164  movz fp, #0xa00000000
0x4cd06c88   168  sub csp, jssp, #0x8 (8)
0x4cd06c8c   172  str fp, [jssp, #-8]!
0x4cd06c90   176  add fp, jssp, #0x8 (8)
0x4cd06c94   180  movz x3, #0x0
0x4cd06c98   184  mov x16, lr
0x4cd06c9c   188  ldr x17, pc+132 (addr 0x000000004cd06d20)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd06ca0   192  blr x17
0x4cd06ca4   196  movz x0, #0x5000000000
0x4cd06ca8   200  movz x10, #0x0
0x4cd06cac   204  sub csp, jssp, #0x10 (16)
0x4cd06cb0   208  stp x10, x0, [jssp, #-16]!
0x4cd06cb4   212  movz x0, #0x2
0x4cd06cb8   216  movz x1, #0x5b88
0x4cd06cbc   220  movk x1, #0xe2, lsl #16
0x4cd06cc0   224  ldr x16, pc+104 (addr 0x000000004cd06d28)    ;; code: STUB, CEntryStub, minor: 5
0x4cd06cc4   228  blr x16
0x4cd06cc8   232  str x0, [jssp, #24]
0x4cd06ccc   236  ldr x16, pc+100 (addr 0x000000004cd06d30)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd06cd0   240  blr x16
0x4cd06cd4   244  ldr lr, [jssp, #16]
0x4cd06cd8   248  ldp xzr, fp, [jssp], #24
0x4cd06cdc   252  b #-0xcc (addr 0x4cd06c10)
0x4cd06ce0   256  580002bf       constant pool begin (num_const = 21)    ;; constant pool
0x4cd06ce4   260  d63f03e0       constant
0x4cd06ce8   264  21004201       constant
0x4cd06cec   268  00000000       constant
0x4cd06cf0   272  21004201       constant
0x4cd06cf4   276  00000000       constant
0x4cd06cf8   280  2a804259       constant
0x4cd06cfc   284  00000000       constant
0x4cd06d00   288  21004519       constant
0x4cd06d04   292  00000000       constant
0x4cd06d08   296  21004519       constant
0x4cd06d0c   300  00000000       constant
0x4cd06d10   304  21004519       constant
0x4cd06d14   308  00000000       constant
0x4cd06d18   312  21004519       constant
0x4cd06d1c   316  00000000       constant
0x4cd06d20   320  4cd06820       constant
0x4cd06d24   324  00000000       constant
0x4cd06d28   328  4cd06260       constant
0x4cd06d2c   332  00000000       constant
0x4cd06d30   336  4cd068e0       constant
0x4cd06d34   340  00000000       constant
0x4cd06d38   344  movz x16, #0x0
0x4cd06d3c   348  sub csp, jssp, #0x10 (16)
0x4cd06d40   352  stp fp, lr, [jssp, #-16]!
0x4cd06d44   356  bl #+0x4 (addr 0x4cd06d48)
0x4cd06d48   360  movz x17, #0xa00000000
0x4cd06d4c   364  sub csp, jssp, #0x10 (16)
0x4cd06d50   368  stp x17, cp, [jssp, #-16]!
0x4cd06d54   372  add fp, jssp, #0x10 (16)
0x4cd06d58   376  ldr x17, pc+24 (addr 0x000000004cd06d70)    ;; lazy deoptimization bailout 0
0x4cd06d5c   380  add x17, x17, x16
0x4cd06d60   384  br x17
0x4cd06d64   388  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd06d68   392  d63f03e0       constant
0x4cd06d6c   396  d503201f       constant
0x4cd06d70   400  4cb06000       constant
0x4cd06d74   404  00000000       constant


Safepoints (size = 21)
0x4cd06cc8   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0x4cd06c20  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd06c28  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd06c3c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd06c50  embedded object  (0x21004519 <the hole>)
0x4cd06c58  embedded object  (0x21004519 <the hole>)
0x4cd06c60  embedded object  (0x21004519 <the hole>)
0x4cd06c68  embedded object  (0x21004519 <the hole>)
0x4cd06c9c  code target (STUB)  (0x4cd06820)
0x4cd06cc0  code target (STUB)  (0x4cd06260)
0x4cd06ccc  code target (STUB)  (0x4cd068e0)
0x4cd06ce0  constant pool (size 88)
0x4cd06d58  runtime entry
0x4cd06d64  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 485)
0x4cd06e00     0  movz w0, #0x6000
0x4cd06e04     4  movk w0, #0x9, lsl #16
0x4cd06e08     8  cmp w0, #0x30 (48)
0x4cd06e0c    12  b.ls #+0x184 (addr 0x4cd06f90)
0x4cd06e10    16  movz x3, #0xd2c0
0x4cd06e14    20  movk x3, #0x166d, lsl #16
0x4cd06e18    24  ldp x4, x0, [x3]
0x4cd06e1c    28  adds x16, x4, #0x60 (96)
0x4cd06e20    32  ccmp x16, x0, #nzCv, lo
0x4cd06e24    36  b.hi #+0xa4 (addr 0x4cd06ec8)
0x4cd06e28    40  str x16, [x3]
0x4cd06e2c    44  orr x4, x4, #0x1
0x4cd06e30    48  movz w0, #0x0
0x4cd06e34    52  stur x0, [x4, #47]
0x4cd06e38    56  ldur x0, [x1, #39]
0x4cd06e3c    60  ldur x0, [x0, #39]
0x4cd06e40    64  movz x16, #0x17f
0x4cd06e44    68  ldr x0, [x0, x16]
0x4cd06e48    72  stur x0, [x4, #-1]
0x4cd06e4c    76  ldr x0, pc+236 (addr 0x000000004cd06f38)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd06e50    80  stur x0, [x4, #7]
0x4cd06e54    84  ldr x0, pc+236 (addr 0x000000004cd06f40)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd06e58    88  stur x0, [x4, #15]
0x4cd06e5c    92  movz x0, #0x0
0x4cd06e60    96  stur x0, [x4, #23]
0x4cd06e64   100  add x0, x4, #0x20 (32)
0x4cd06e68   104  ldr x1, pc+224 (addr 0x000000004cd06f48)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd06e6c   108  stur x1, [x0, #-1]
0x4cd06e70   112  stur x2, [x0, #7]
0x4cd06e74   116  ldur w0, [x2, #35]
0x4cd06e78   120  add w0, w0, #0x1 (1)
0x4cd06e7c   124  lsl x0, x0, #32
0x4cd06e80   128  stur x0, [x2, #31]
0x4cd06e84   132  add x0, x4, #0x30 (48)
0x4cd06e88   136  ldr x1, pc+200 (addr 0x000000004cd06f50)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd06e8c   140  stur x1, [x0, #-1]
0x4cd06e90   144  movz x1, #0x400000000
0x4cd06e94   148  stur x1, [x0, #7]
0x4cd06e98   152  stur x0, [x4, #15]
0x4cd06e9c   156  ldr x1, pc+188 (addr 0x000000004cd06f58)    ;; object: 0x21004519 <the hole>
0x4cd06ea0   160  stur x1, [x0, #15]
0x4cd06ea4   164  ldr x1, pc+188 (addr 0x000000004cd06f60)    ;; object: 0x21004519 <the hole>
0x4cd06ea8   168  stur x1, [x0, #23]
0x4cd06eac   172  ldr x1, pc+188 (addr 0x000000004cd06f68)    ;; object: 0x21004519 <the hole>
0x4cd06eb0   176  stur x1, [x0, #31]
0x4cd06eb4   180  ldr x1, pc+188 (addr 0x000000004cd06f70)    ;; object: 0x21004519 <the hole>
0x4cd06eb8   184  stur x1, [x0, #39]
0x4cd06ebc   188  mov x0, x4
0x4cd06ec0   192  add jssp, jssp, #0x8 (8)
0x4cd06ec4   196  ret
0x4cd06ec8   200  sub csp, jssp, #0x10 (16)
0x4cd06ecc   204  stp fp, lr, [jssp, #-16]!
0x4cd06ed0   208  movz fp, #0xa00000000
0x4cd06ed4   212  sub csp, jssp, #0x8 (8)
0x4cd06ed8   216  str fp, [jssp, #-8]!
0x4cd06edc   220  add fp, jssp, #0x8 (8)
0x4cd06ee0   224  movz x4, #0x0
0x4cd06ee4   228  mov x16, lr
0x4cd06ee8   232  ldr x17, pc+144 (addr 0x000000004cd06f78)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd06eec   236  blr x17
0x4cd06ef0   240  movz x0, #0x6000000000
0x4cd06ef4   244  movz x10, #0x0
0x4cd06ef8   248  sub csp, jssp, #0x10 (16)
0x4cd06efc   252  stp x10, x0, [jssp, #-16]!
0x4cd06f00   256  movz x0, #0x2
0x4cd06f04   260  movz x1, #0x5b88
0x4cd06f08   264  movk x1, #0xe2, lsl #16
0x4cd06f0c   268  ldr x16, pc+116 (addr 0x000000004cd06f80)    ;; code: STUB, CEntryStub, minor: 5
0x4cd06f10   272  blr x16
0x4cd06f14   276  str x0, [jssp, #32]
0x4cd06f18   280  ldr x16, pc+112 (addr 0x000000004cd06f88)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd06f1c   284  blr x16
0x4cd06f20   288  ldr lr, [jssp, #16]
0x4cd06f24   292  ldp xzr, fp, [jssp], #24
0x4cd06f28   296  b #-0xf8 (addr 0x4cd06e30)
0x4cd06f2c   300  5800031f       constant pool begin (num_const = 24)    ;; constant pool
0x4cd06f30   304  d63f03e0       constant
0x4cd06f34   308  d503201f       constant
0x4cd06f38   312  21004201       constant
0x4cd06f3c   316  00000000       constant
0x4cd06f40   320  21004201       constant
0x4cd06f44   324  00000000       constant
0x4cd06f48   328  2a805d81       constant
0x4cd06f4c   332  00000000       constant
0x4cd06f50   336  2a804259       constant
0x4cd06f54   340  00000000       constant
0x4cd06f58   344  21004519       constant
0x4cd06f5c   348  00000000       constant
0x4cd06f60   352  21004519       constant
0x4cd06f64   356  00000000       constant
0x4cd06f68   360  21004519       constant
0x4cd06f6c   364  00000000       constant
0x4cd06f70   368  21004519       constant
0x4cd06f74   372  00000000       constant
0x4cd06f78   376  4cd06820       constant
0x4cd06f7c   380  00000000       constant
0x4cd06f80   384  4cd06260       constant
0x4cd06f84   388  00000000       constant
0x4cd06f88   392  4cd068e0       constant
0x4cd06f8c   396  00000000       constant
0x4cd06f90   400  movz x16, #0x0
0x4cd06f94   404  sub csp, jssp, #0x10 (16)
0x4cd06f98   408  stp fp, lr, [jssp, #-16]!
0x4cd06f9c   412  bl #+0x4 (addr 0x4cd06fa0)
0x4cd06fa0   416  movz x17, #0xa00000000
0x4cd06fa4   420  sub csp, jssp, #0x10 (16)
0x4cd06fa8   424  stp x17, cp, [jssp, #-16]!
0x4cd06fac   428  add fp, jssp, #0x10 (16)
0x4cd06fb0   432  ldr x17, pc+24 (addr 0x000000004cd06fc8)    ;; lazy deoptimization bailout 0
0x4cd06fb4   436  add x17, x17, x16
0x4cd06fb8   440  br x17
0x4cd06fbc   444  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd06fc0   448  d63f03e0       constant
0x4cd06fc4   452  d503201f       constant
0x4cd06fc8   456  4cb06000       constant
0x4cd06fcc   460  00000000       constant


Safepoints (size = 21)
0x4cd06f14   276  000 | x1 | x2 | x4 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 29)
0x4cd06e4c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd06e54  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd06e68  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd06e88  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd06e9c  embedded object  (0x21004519 <the hole>)
0x4cd06ea4  embedded object  (0x21004519 <the hole>)
0x4cd06eac  embedded object  (0x21004519 <the hole>)
0x4cd06eb4  embedded object  (0x21004519 <the hole>)
0x4cd06ee8  code target (STUB)  (0x4cd06820)
0x4cd06f0c  code target (STUB)  (0x4cd06260)
0x4cd06f18  code target (STUB)  (0x4cd068e0)
0x4cd06f2c  constant pool (size 100)
0x4cd06fb0  runtime entry
0x4cd06fbc  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNoArgumentConstructorStub
name = ArrayNoArgumentConstructorStub_FAST_HOLEY_SMI_ELEMENTS
compiler = crankshaft
Instructions (size = 485)
0x4cd06e00     0  movz w0, #0x6000
0x4cd06e04     4  movk w0, #0x9, lsl #16
0x4cd06e08     8  cmp w0, #0x30 (48)
0x4cd06e0c    12  b.ls #+0x184 (addr 0x4cd06f90)
0x4cd06e10    16  movz x3, #0xd2c0
0x4cd06e14    20  movk x3, #0x166d, lsl #16
0x4cd06e18    24  ldp x4, x0, [x3]
0x4cd06e1c    28  adds x16, x4, #0x60 (96)
0x4cd06e20    32  ccmp x16, x0, #nzCv, lo
0x4cd06e24    36  b.hi #+0xa4 (addr 0x4cd06ec8)
0x4cd06e28    40  str x16, [x3]
0x4cd06e2c    44  orr x4, x4, #0x1
0x4cd06e30    48  movz w0, #0x0
0x4cd06e34    52  stur x0, [x4, #47]
0x4cd06e38    56  ldur x0, [x1, #39]
0x4cd06e3c    60  ldur x0, [x0, #39]
0x4cd06e40    64  movz x16, #0x17f
0x4cd06e44    68  ldr x0, [x0, x16]
0x4cd06e48    72  stur x0, [x4, #-1]
0x4cd06e4c    76  ldr x0, pc+236 (addr 0x000000004cd06f38)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd06e50    80  stur x0, [x4, #7]
0x4cd06e54    84  ldr x0, pc+236 (addr 0x000000004cd06f40)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd06e58    88  stur x0, [x4, #15]
0x4cd06e5c    92  movz x0, #0x0
0x4cd06e60    96  stur x0, [x4, #23]
0x4cd06e64   100  add x0, x4, #0x20 (32)
0x4cd06e68   104  ldr x1, pc+224 (addr 0x000000004cd06f48)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd06e6c   108  stur x1, [x0, #-1]
0x4cd06e70   112  stur x2, [x0, #7]
0x4cd06e74   116  ldur w0, [x2, #35]
0x4cd06e78   120  add w0, w0, #0x1 (1)
0x4cd06e7c   124  lsl x0, x0, #32
0x4cd06e80   128  stur x0, [x2, #31]
0x4cd06e84   132  add x0, x4, #0x30 (48)
0x4cd06e88   136  ldr x1, pc+200 (addr 0x000000004cd06f50)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd06e8c   140  stur x1, [x0, #-1]
0x4cd06e90   144  movz x1, #0x400000000
0x4cd06e94   148  stur x1, [x0, #7]
0x4cd06e98   152  stur x0, [x4, #15]
0x4cd06e9c   156  ldr x1, pc+188 (addr 0x000000004cd06f58)    ;; object: 0x21004519 <the hole>
0x4cd06ea0   160  stur x1, [x0, #15]
0x4cd06ea4   164  ldr x1, pc+188 (addr 0x000000004cd06f60)    ;; object: 0x21004519 <the hole>
0x4cd06ea8   168  stur x1, [x0, #23]
0x4cd06eac   172  ldr x1, pc+188 (addr 0x000000004cd06f68)    ;; object: 0x21004519 <the hole>
0x4cd06eb0   176  stur x1, [x0, #31]
0x4cd06eb4   180  ldr x1, pc+188 (addr 0x000000004cd06f70)    ;; object: 0x21004519 <the hole>
0x4cd06eb8   184  stur x1, [x0, #39]
0x4cd06ebc   188  mov x0, x4
0x4cd06ec0   192  add jssp, jssp, #0x8 (8)
0x4cd06ec4   196  ret
0x4cd06ec8   200  sub csp, jssp, #0x10 (16)
0x4cd06ecc   204  stp fp, lr, [jssp, #-16]!
0x4cd06ed0   208  movz fp, #0xa00000000
0x4cd06ed4   212  sub csp, jssp, #0x8 (8)
0x4cd06ed8   216  str fp, [jssp, #-8]!
0x4cd06edc   220  add fp, jssp, #0x8 (8)
0x4cd06ee0   224  movz x4, #0x0
0x4cd06ee4   228  mov x16, lr
0x4cd06ee8   232  ldr x17, pc+144 (addr 0x000000004cd06f78)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd06eec   236  blr x17
0x4cd06ef0   240  movz x0, #0x6000000000
0x4cd06ef4   244  movz x10, #0x0
0x4cd06ef8   248  sub csp, jssp, #0x10 (16)
0x4cd06efc   252  stp x10, x0, [jssp, #-16]!
0x4cd06f00   256  movz x0, #0x2
0x4cd06f04   260  movz x1, #0x5b88
0x4cd06f08   264  movk x1, #0xe2, lsl #16
0x4cd06f0c   268  ldr x16, pc+116 (addr 0x000000004cd06f80)    ;; code: STUB, CEntryStub, minor: 5
0x4cd06f10   272  blr x16
0x4cd06f14   276  str x0, [jssp, #32]
0x4cd06f18   280  ldr x16, pc+112 (addr 0x000000004cd06f88)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd06f1c   284  blr x16
0x4cd06f20   288  ldr lr, [jssp, #16]
0x4cd06f24   292  ldp xzr, fp, [jssp], #24
0x4cd06f28   296  b #-0xf8 (addr 0x4cd06e30)
0x4cd06f2c   300  5800031f       constant pool begin (num_const = 24)    ;; constant pool
0x4cd06f30   304  d63f03e0       constant
0x4cd06f34   308  d503201f       constant
0x4cd06f38   312  21004201       constant
0x4cd06f3c   316  00000000       constant
0x4cd06f40   320  21004201       constant
0x4cd06f44   324  00000000       constant
0x4cd06f48   328  2a805d81       constant
0x4cd06f4c   332  00000000       constant
0x4cd06f50   336  2a804259       constant
0x4cd06f54   340  00000000       constant
0x4cd06f58   344  21004519       constant
0x4cd06f5c   348  00000000       constant
0x4cd06f60   352  21004519       constant
0x4cd06f64   356  00000000       constant
0x4cd06f68   360  21004519       constant
0x4cd06f6c   364  00000000       constant
0x4cd06f70   368  21004519       constant
0x4cd06f74   372  00000000       constant
0x4cd06f78   376  4cd06820       constant
0x4cd06f7c   380  00000000       constant
0x4cd06f80   384  4cd06260       constant
0x4cd06f84   388  00000000       constant
0x4cd06f88   392  4cd068e0       constant
0x4cd06f8c   396  00000000       constant
0x4cd06f90   400  movz x16, #0x0
0x4cd06f94   404  sub csp, jssp, #0x10 (16)
0x4cd06f98   408  stp fp, lr, [jssp, #-16]!
0x4cd06f9c   412  bl #+0x4 (addr 0x4cd06fa0)
0x4cd06fa0   416  movz x17, #0xa00000000
0x4cd06fa4   420  sub csp, jssp, #0x10 (16)
0x4cd06fa8   424  stp x17, cp, [jssp, #-16]!
0x4cd06fac   428  add fp, jssp, #0x10 (16)
0x4cd06fb0   432  ldr x17, pc+24 (addr 0x000000004cd06fc8)    ;; lazy deoptimization bailout 0
0x4cd06fb4   436  add x17, x17, x16
0x4cd06fb8   440  br x17
0x4cd06fbc   444  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd06fc0   448  d63f03e0       constant
0x4cd06fc4   452  d503201f       constant
0x4cd06fc8   456  4cb06000       constant
0x4cd06fcc   460  00000000       constant


Safepoints (size = 21)
0x4cd06f14   276  000 | x1 | x2 | x4 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 29)
0x4cd06e4c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd06e54  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd06e68  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd06e88  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd06e9c  embedded object  (0x21004519 <the hole>)
0x4cd06ea4  embedded object  (0x21004519 <the hole>)
0x4cd06eac  embedded object  (0x21004519 <the hole>)
0x4cd06eb4  embedded object  (0x21004519 <the hole>)
0x4cd06ee8  code target (STUB)  (0x4cd06820)
0x4cd06f0c  code target (STUB)  (0x4cd06260)
0x4cd06f18  code target (STUB)  (0x4cd068e0)
0x4cd06f2c  constant pool (size 100)
0x4cd06fb0  runtime entry
0x4cd06fbc  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 445)
0x4cd07060     0  movz w0, #0x6000
0x4cd07064     4  movk w0, #0x9, lsl #16
0x4cd07068     8  cmp w0, #0x30 (48)
0x4cd0706c    12  b.ls #+0x15c (addr 0x4cd071c8)
0x4cd07070    16  movz x2, #0xd2c0
0x4cd07074    20  movk x2, #0x166d, lsl #16
0x4cd07078    24  ldp x3, x0, [x2]
0x4cd0707c    28  adds x16, x3, #0x50 (80)
0x4cd07080    32  ccmp x16, x0, #nzCv, lo
0x4cd07084    36  b.hi #+0x84 (addr 0x4cd07108)
0x4cd07088    40  str x16, [x2]
0x4cd0708c    44  orr x3, x3, #0x1
0x4cd07090    48  movz w0, #0x0
0x4cd07094    52  stur x0, [x3, #31]
0x4cd07098    56  ldur x0, [x1, #39]
0x4cd0709c    60  ldur x0, [x0, #39]
0x4cd070a0    64  movz x16, #0x17f
0x4cd070a4    68  ldr x0, [x0, x16]
0x4cd070a8    72  stur x0, [x3, #-1]
0x4cd070ac    76  ldr x0, pc+204 (addr 0x000000004cd07178)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd070b0    80  stur x0, [x3, #7]
0x4cd070b4    84  ldr x0, pc+204 (addr 0x000000004cd07180)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd070b8    88  stur x0, [x3, #15]
0x4cd070bc    92  movz x0, #0x0
0x4cd070c0    96  stur x0, [x3, #23]
0x4cd070c4   100  add x0, x3, #0x20 (32)
0x4cd070c8   104  ldr x1, pc+192 (addr 0x000000004cd07188)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd070cc   108  stur x1, [x0, #-1]
0x4cd070d0   112  movz x1, #0x400000000
0x4cd070d4   116  stur x1, [x0, #7]
0x4cd070d8   120  stur x0, [x3, #15]
0x4cd070dc   124  ldr x1, pc+180 (addr 0x000000004cd07190)    ;; object: 0x21004519 <the hole>
0x4cd070e0   128  stur x1, [x0, #15]
0x4cd070e4   132  ldr x1, pc+180 (addr 0x000000004cd07198)    ;; object: 0x21004519 <the hole>
0x4cd070e8   136  stur x1, [x0, #23]
0x4cd070ec   140  ldr x1, pc+180 (addr 0x000000004cd071a0)    ;; object: 0x21004519 <the hole>
0x4cd070f0   144  stur x1, [x0, #31]
0x4cd070f4   148  ldr x1, pc+180 (addr 0x000000004cd071a8)    ;; object: 0x21004519 <the hole>
0x4cd070f8   152  stur x1, [x0, #39]
0x4cd070fc   156  mov x0, x3
0x4cd07100   160  add jssp, jssp, #0x8 (8)
0x4cd07104   164  ret
0x4cd07108   168  sub csp, jssp, #0x10 (16)
0x4cd0710c   172  stp fp, lr, [jssp, #-16]!
0x4cd07110   176  movz fp, #0xa00000000
0x4cd07114   180  sub csp, jssp, #0x8 (8)
0x4cd07118   184  str fp, [jssp, #-8]!
0x4cd0711c   188  add fp, jssp, #0x8 (8)
0x4cd07120   192  movz x3, #0x0
0x4cd07124   196  mov x16, lr
0x4cd07128   200  ldr x17, pc+136 (addr 0x000000004cd071b0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0712c   204  blr x17
0x4cd07130   208  movz x0, #0x5000000000
0x4cd07134   212  movz x10, #0x0
0x4cd07138   216  sub csp, jssp, #0x10 (16)
0x4cd0713c   220  stp x10, x0, [jssp, #-16]!
0x4cd07140   224  movz x0, #0x2
0x4cd07144   228  movz x1, #0x5b88
0x4cd07148   232  movk x1, #0xe2, lsl #16
0x4cd0714c   236  ldr x16, pc+108 (addr 0x000000004cd071b8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd07150   240  blr x16
0x4cd07154   244  str x0, [jssp, #24]
0x4cd07158   248  ldr x16, pc+104 (addr 0x000000004cd071c0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0715c   252  blr x16
0x4cd07160   256  ldr lr, [jssp, #16]
0x4cd07164   260  ldp xzr, fp, [jssp], #24
0x4cd07168   264  b #-0xd8 (addr 0x4cd07090)
0x4cd0716c   268  580002df       constant pool begin (num_const = 22)    ;; constant pool
0x4cd07170   272  d63f03e0       constant
0x4cd07174   276  d503201f       constant
0x4cd07178   280  21004201       constant
0x4cd0717c   284  00000000       constant
0x4cd07180   288  21004201       constant
0x4cd07184   292  00000000       constant
0x4cd07188   296  2a804259       constant
0x4cd0718c   300  00000000       constant
0x4cd07190   304  21004519       constant
0x4cd07194   308  00000000       constant
0x4cd07198   312  21004519       constant
0x4cd0719c   316  00000000       constant
0x4cd071a0   320  21004519       constant
0x4cd071a4   324  00000000       constant
0x4cd071a8   328  21004519       constant
0x4cd071ac   332  00000000       constant
0x4cd071b0   336  4cd06820       constant
0x4cd071b4   340  00000000       constant
0x4cd071b8   344  4cd06260       constant
0x4cd071bc   348  00000000       constant
0x4cd071c0   352  4cd068e0       constant
0x4cd071c4   356  00000000       constant
0x4cd071c8   360  movz x16, #0x0
0x4cd071cc   364  sub csp, jssp, #0x10 (16)
0x4cd071d0   368  stp fp, lr, [jssp, #-16]!
0x4cd071d4   372  bl #+0x4 (addr 0x4cd071d8)
0x4cd071d8   376  movz x17, #0xa00000000
0x4cd071dc   380  sub csp, jssp, #0x10 (16)
0x4cd071e0   384  stp x17, cp, [jssp, #-16]!
0x4cd071e4   388  add fp, jssp, #0x10 (16)
0x4cd071e8   392  ldr x17, pc+24 (addr 0x000000004cd07200)    ;; lazy deoptimization bailout 0
0x4cd071ec   396  add x17, x17, x16
0x4cd071f0   400  br x17
0x4cd071f4   404  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd071f8   408  d63f03e0       constant
0x4cd071fc   412  d503201f       constant
0x4cd07200   416  4cb06000       constant
0x4cd07204   420  00000000       constant


Safepoints (size = 21)
0x4cd07154   244  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0x4cd070ac  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd070b4  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd070c8  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd070dc  embedded object  (0x21004519 <the hole>)
0x4cd070e4  embedded object  (0x21004519 <the hole>)
0x4cd070ec  embedded object  (0x21004519 <the hole>)
0x4cd070f4  embedded object  (0x21004519 <the hole>)
0x4cd07128  code target (STUB)  (0x4cd06820)
0x4cd0714c  code target (STUB)  (0x4cd06260)
0x4cd07158  code target (STUB)  (0x4cd068e0)
0x4cd0716c  constant pool (size 92)
0x4cd071e8  runtime entry
0x4cd071f4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNoArgumentConstructorStub
name = ArrayNoArgumentConstructorStub_FAST_HOLEY_SMI_ELEMENTS_DISABLE_ALLOCATION_SITES
compiler = crankshaft
Instructions (size = 445)
0x4cd07060     0  movz w0, #0x6000
0x4cd07064     4  movk w0, #0x9, lsl #16
0x4cd07068     8  cmp w0, #0x30 (48)
0x4cd0706c    12  b.ls #+0x15c (addr 0x4cd071c8)
0x4cd07070    16  movz x2, #0xd2c0
0x4cd07074    20  movk x2, #0x166d, lsl #16
0x4cd07078    24  ldp x3, x0, [x2]
0x4cd0707c    28  adds x16, x3, #0x50 (80)
0x4cd07080    32  ccmp x16, x0, #nzCv, lo
0x4cd07084    36  b.hi #+0x84 (addr 0x4cd07108)
0x4cd07088    40  str x16, [x2]
0x4cd0708c    44  orr x3, x3, #0x1
0x4cd07090    48  movz w0, #0x0
0x4cd07094    52  stur x0, [x3, #31]
0x4cd07098    56  ldur x0, [x1, #39]
0x4cd0709c    60  ldur x0, [x0, #39]
0x4cd070a0    64  movz x16, #0x17f
0x4cd070a4    68  ldr x0, [x0, x16]
0x4cd070a8    72  stur x0, [x3, #-1]
0x4cd070ac    76  ldr x0, pc+204 (addr 0x000000004cd07178)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd070b0    80  stur x0, [x3, #7]
0x4cd070b4    84  ldr x0, pc+204 (addr 0x000000004cd07180)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd070b8    88  stur x0, [x3, #15]
0x4cd070bc    92  movz x0, #0x0
0x4cd070c0    96  stur x0, [x3, #23]
0x4cd070c4   100  add x0, x3, #0x20 (32)
0x4cd070c8   104  ldr x1, pc+192 (addr 0x000000004cd07188)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd070cc   108  stur x1, [x0, #-1]
0x4cd070d0   112  movz x1, #0x400000000
0x4cd070d4   116  stur x1, [x0, #7]
0x4cd070d8   120  stur x0, [x3, #15]
0x4cd070dc   124  ldr x1, pc+180 (addr 0x000000004cd07190)    ;; object: 0x21004519 <the hole>
0x4cd070e0   128  stur x1, [x0, #15]
0x4cd070e4   132  ldr x1, pc+180 (addr 0x000000004cd07198)    ;; object: 0x21004519 <the hole>
0x4cd070e8   136  stur x1, [x0, #23]
0x4cd070ec   140  ldr x1, pc+180 (addr 0x000000004cd071a0)    ;; object: 0x21004519 <the hole>
0x4cd070f0   144  stur x1, [x0, #31]
0x4cd070f4   148  ldr x1, pc+180 (addr 0x000000004cd071a8)    ;; object: 0x21004519 <the hole>
0x4cd070f8   152  stur x1, [x0, #39]
0x4cd070fc   156  mov x0, x3
0x4cd07100   160  add jssp, jssp, #0x8 (8)
0x4cd07104   164  ret
0x4cd07108   168  sub csp, jssp, #0x10 (16)
0x4cd0710c   172  stp fp, lr, [jssp, #-16]!
0x4cd07110   176  movz fp, #0xa00000000
0x4cd07114   180  sub csp, jssp, #0x8 (8)
0x4cd07118   184  str fp, [jssp, #-8]!
0x4cd0711c   188  add fp, jssp, #0x8 (8)
0x4cd07120   192  movz x3, #0x0
0x4cd07124   196  mov x16, lr
0x4cd07128   200  ldr x17, pc+136 (addr 0x000000004cd071b0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0712c   204  blr x17
0x4cd07130   208  movz x0, #0x5000000000
0x4cd07134   212  movz x10, #0x0
0x4cd07138   216  sub csp, jssp, #0x10 (16)
0x4cd0713c   220  stp x10, x0, [jssp, #-16]!
0x4cd07140   224  movz x0, #0x2
0x4cd07144   228  movz x1, #0x5b88
0x4cd07148   232  movk x1, #0xe2, lsl #16
0x4cd0714c   236  ldr x16, pc+108 (addr 0x000000004cd071b8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd07150   240  blr x16
0x4cd07154   244  str x0, [jssp, #24]
0x4cd07158   248  ldr x16, pc+104 (addr 0x000000004cd071c0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0715c   252  blr x16
0x4cd07160   256  ldr lr, [jssp, #16]
0x4cd07164   260  ldp xzr, fp, [jssp], #24
0x4cd07168   264  b #-0xd8 (addr 0x4cd07090)
0x4cd0716c   268  580002df       constant pool begin (num_const = 22)    ;; constant pool
0x4cd07170   272  d63f03e0       constant
0x4cd07174   276  d503201f       constant
0x4cd07178   280  21004201       constant
0x4cd0717c   284  00000000       constant
0x4cd07180   288  21004201       constant
0x4cd07184   292  00000000       constant
0x4cd07188   296  2a804259       constant
0x4cd0718c   300  00000000       constant
0x4cd07190   304  21004519       constant
0x4cd07194   308  00000000       constant
0x4cd07198   312  21004519       constant
0x4cd0719c   316  00000000       constant
0x4cd071a0   320  21004519       constant
0x4cd071a4   324  00000000       constant
0x4cd071a8   328  21004519       constant
0x4cd071ac   332  00000000       constant
0x4cd071b0   336  4cd06820       constant
0x4cd071b4   340  00000000       constant
0x4cd071b8   344  4cd06260       constant
0x4cd071bc   348  00000000       constant
0x4cd071c0   352  4cd068e0       constant
0x4cd071c4   356  00000000       constant
0x4cd071c8   360  movz x16, #0x0
0x4cd071cc   364  sub csp, jssp, #0x10 (16)
0x4cd071d0   368  stp fp, lr, [jssp, #-16]!
0x4cd071d4   372  bl #+0x4 (addr 0x4cd071d8)
0x4cd071d8   376  movz x17, #0xa00000000
0x4cd071dc   380  sub csp, jssp, #0x10 (16)
0x4cd071e0   384  stp x17, cp, [jssp, #-16]!
0x4cd071e4   388  add fp, jssp, #0x10 (16)
0x4cd071e8   392  ldr x17, pc+24 (addr 0x000000004cd07200)    ;; lazy deoptimization bailout 0
0x4cd071ec   396  add x17, x17, x16
0x4cd071f0   400  br x17
0x4cd071f4   404  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd071f8   408  d63f03e0       constant
0x4cd071fc   412  d503201f       constant
0x4cd07200   416  4cb06000       constant
0x4cd07204   420  00000000       constant


Safepoints (size = 21)
0x4cd07154   244  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0x4cd070ac  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd070b4  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd070c8  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd070dc  embedded object  (0x21004519 <the hole>)
0x4cd070e4  embedded object  (0x21004519 <the hole>)
0x4cd070ec  embedded object  (0x21004519 <the hole>)
0x4cd070f4  embedded object  (0x21004519 <the hole>)
0x4cd07128  code target (STUB)  (0x4cd06820)
0x4cd0714c  code target (STUB)  (0x4cd06260)
0x4cd07158  code target (STUB)  (0x4cd068e0)
0x4cd0716c  constant pool (size 92)
0x4cd071e8  runtime entry
0x4cd071f4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 405)
0x4cd07280     0  movz w0, #0x6000
0x4cd07284     4  movk w0, #0x9, lsl #16
0x4cd07288     8  cmp w0, #0x30 (48)
0x4cd0728c    12  b.ls #+0x134 (addr 0x4cd073c0)
0x4cd07290    16  movz x2, #0xd2c0
0x4cd07294    20  movk x2, #0x166d, lsl #16
0x4cd07298    24  ldp x3, x0, [x2]
0x4cd0729c    28  adds x16, x3, #0x50 (80)
0x4cd072a0    32  ccmp x16, x0, #nzCv, lo
0x4cd072a4    36  b.hi #+0x78 (addr 0x4cd0731c)
0x4cd072a8    40  str x16, [x2]
0x4cd072ac    44  orr x3, x3, #0x1
0x4cd072b0    48  movz w0, #0x0
0x4cd072b4    52  stur x0, [x3, #31]
0x4cd072b8    56  ldur x0, [x1, #39]
0x4cd072bc    60  ldur x0, [x0, #39]
0x4cd072c0    64  movz x16, #0x197
0x4cd072c4    68  ldr x0, [x0, x16]
0x4cd072c8    72  stur x0, [x3, #-1]
0x4cd072cc    76  ldr x0, pc+196 (addr 0x000000004cd07390)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd072d0    80  stur x0, [x3, #7]
0x4cd072d4    84  ldr x0, pc+196 (addr 0x000000004cd07398)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd072d8    88  stur x0, [x3, #15]
0x4cd072dc    92  movz x0, #0x0
0x4cd072e0    96  stur x0, [x3, #23]
0x4cd072e4   100  add x0, x3, #0x20 (32)
0x4cd072e8   104  ldr x1, pc+184 (addr 0x000000004cd073a0)    ;; object: 0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd072ec   108  stur x1, [x0, #-1]
0x4cd072f0   112  movz x1, #0x400000000
0x4cd072f4   116  stur x1, [x0, #7]
0x4cd072f8   120  stur x0, [x3, #15]
0x4cd072fc   124  ldr d0, pc+140 (addr 0x000000004cd07388)
0x4cd07300   128  stur d0, [x0, #15]
0x4cd07304   132  stur d0, [x0, #23]
0x4cd07308   136  stur d0, [x0, #31]
0x4cd0730c   140  stur d0, [x0, #39]
0x4cd07310   144  mov x0, x3
0x4cd07314   148  add jssp, jssp, #0x8 (8)
0x4cd07318   152  ret
0x4cd0731c   156  sub csp, jssp, #0x10 (16)
0x4cd07320   160  stp fp, lr, [jssp, #-16]!
0x4cd07324   164  movz fp, #0xa00000000
0x4cd07328   168  sub csp, jssp, #0x8 (8)
0x4cd0732c   172  str fp, [jssp, #-8]!
0x4cd07330   176  add fp, jssp, #0x8 (8)
0x4cd07334   180  movz x3, #0x0
0x4cd07338   184  mov x16, lr
0x4cd0733c   188  ldr x17, pc+108 (addr 0x000000004cd073a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd07340   192  blr x17
0x4cd07344   196  movz x0, #0x5000000000
0x4cd07348   200  movz x10, #0x100000000
0x4cd0734c   204  sub csp, jssp, #0x10 (16)
0x4cd07350   208  stp x10, x0, [jssp, #-16]!
0x4cd07354   212  movz x0, #0x2
0x4cd07358   216  movz x1, #0x5b88
0x4cd0735c   220  movk x1, #0xe2, lsl #16
0x4cd07360   224  ldr x16, pc+80 (addr 0x000000004cd073b0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd07364   228  blr x16
0x4cd07368   232  str x0, [jssp, #24]
0x4cd0736c   236  ldr x16, pc+76 (addr 0x000000004cd073b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd07370   240  blr x16
0x4cd07374   244  ldr lr, [jssp, #16]
0x4cd07378   248  ldp xzr, fp, [jssp], #24
0x4cd0737c   252  b #-0xcc (addr 0x4cd072b0)
0x4cd07380   256  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd07384   260  d63f03e0       constant
0x4cd07388   264  fff7ffff       constant
0x4cd0738c   268  fff7ffff       constant
0x4cd07390   272  21004201       constant
0x4cd07394   276  00000000       constant
0x4cd07398   280  21004201       constant
0x4cd0739c   284  00000000       constant
0x4cd073a0   288  2a8052d9       constant
0x4cd073a4   292  00000000       constant
0x4cd073a8   296  4cd06820       constant
0x4cd073ac   300  00000000       constant
0x4cd073b0   304  4cd06260       constant
0x4cd073b4   308  00000000       constant
0x4cd073b8   312  4cd068e0       constant
0x4cd073bc   316  00000000       constant
0x4cd073c0   320  movz x16, #0x0
0x4cd073c4   324  sub csp, jssp, #0x10 (16)
0x4cd073c8   328  stp fp, lr, [jssp, #-16]!
0x4cd073cc   332  bl #+0x4 (addr 0x4cd073d0)
0x4cd073d0   336  movz x17, #0xa00000000
0x4cd073d4   340  sub csp, jssp, #0x10 (16)
0x4cd073d8   344  stp x17, cp, [jssp, #-16]!
0x4cd073dc   348  add fp, jssp, #0x10 (16)
0x4cd073e0   352  ldr x17, pc+24 (addr 0x000000004cd073f8)    ;; lazy deoptimization bailout 0
0x4cd073e4   356  add x17, x17, x16
0x4cd073e8   360  br x17
0x4cd073ec   364  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd073f0   368  d63f03e0       constant
0x4cd073f4   372  d503201f       constant
0x4cd073f8   376  4cb06000       constant
0x4cd073fc   380  00000000       constant


Safepoints (size = 21)
0x4cd07368   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd072cc  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd072d4  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd072e8  embedded object  (0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd0733c  code target (STUB)  (0x4cd06820)
0x4cd07360  code target (STUB)  (0x4cd06260)
0x4cd0736c  code target (STUB)  (0x4cd068e0)
0x4cd07380  constant pool (size 64)
0x4cd073e0  runtime entry
0x4cd073ec  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNoArgumentConstructorStub
name = ArrayNoArgumentConstructorStub_FAST_DOUBLE_ELEMENTS
compiler = crankshaft
Instructions (size = 405)
0x4cd07280     0  movz w0, #0x6000
0x4cd07284     4  movk w0, #0x9, lsl #16
0x4cd07288     8  cmp w0, #0x30 (48)
0x4cd0728c    12  b.ls #+0x134 (addr 0x4cd073c0)
0x4cd07290    16  movz x2, #0xd2c0
0x4cd07294    20  movk x2, #0x166d, lsl #16
0x4cd07298    24  ldp x3, x0, [x2]
0x4cd0729c    28  adds x16, x3, #0x50 (80)
0x4cd072a0    32  ccmp x16, x0, #nzCv, lo
0x4cd072a4    36  b.hi #+0x78 (addr 0x4cd0731c)
0x4cd072a8    40  str x16, [x2]
0x4cd072ac    44  orr x3, x3, #0x1
0x4cd072b0    48  movz w0, #0x0
0x4cd072b4    52  stur x0, [x3, #31]
0x4cd072b8    56  ldur x0, [x1, #39]
0x4cd072bc    60  ldur x0, [x0, #39]
0x4cd072c0    64  movz x16, #0x197
0x4cd072c4    68  ldr x0, [x0, x16]
0x4cd072c8    72  stur x0, [x3, #-1]
0x4cd072cc    76  ldr x0, pc+196 (addr 0x000000004cd07390)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd072d0    80  stur x0, [x3, #7]
0x4cd072d4    84  ldr x0, pc+196 (addr 0x000000004cd07398)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd072d8    88  stur x0, [x3, #15]
0x4cd072dc    92  movz x0, #0x0
0x4cd072e0    96  stur x0, [x3, #23]
0x4cd072e4   100  add x0, x3, #0x20 (32)
0x4cd072e8   104  ldr x1, pc+184 (addr 0x000000004cd073a0)    ;; object: 0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd072ec   108  stur x1, [x0, #-1]
0x4cd072f0   112  movz x1, #0x400000000
0x4cd072f4   116  stur x1, [x0, #7]
0x4cd072f8   120  stur x0, [x3, #15]
0x4cd072fc   124  ldr d0, pc+140 (addr 0x000000004cd07388)
0x4cd07300   128  stur d0, [x0, #15]
0x4cd07304   132  stur d0, [x0, #23]
0x4cd07308   136  stur d0, [x0, #31]
0x4cd0730c   140  stur d0, [x0, #39]
0x4cd07310   144  mov x0, x3
0x4cd07314   148  add jssp, jssp, #0x8 (8)
0x4cd07318   152  ret
0x4cd0731c   156  sub csp, jssp, #0x10 (16)
0x4cd07320   160  stp fp, lr, [jssp, #-16]!
0x4cd07324   164  movz fp, #0xa00000000
0x4cd07328   168  sub csp, jssp, #0x8 (8)
0x4cd0732c   172  str fp, [jssp, #-8]!
0x4cd07330   176  add fp, jssp, #0x8 (8)
0x4cd07334   180  movz x3, #0x0
0x4cd07338   184  mov x16, lr
0x4cd0733c   188  ldr x17, pc+108 (addr 0x000000004cd073a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd07340   192  blr x17
0x4cd07344   196  movz x0, #0x5000000000
0x4cd07348   200  movz x10, #0x100000000
0x4cd0734c   204  sub csp, jssp, #0x10 (16)
0x4cd07350   208  stp x10, x0, [jssp, #-16]!
0x4cd07354   212  movz x0, #0x2
0x4cd07358   216  movz x1, #0x5b88
0x4cd0735c   220  movk x1, #0xe2, lsl #16
0x4cd07360   224  ldr x16, pc+80 (addr 0x000000004cd073b0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd07364   228  blr x16
0x4cd07368   232  str x0, [jssp, #24]
0x4cd0736c   236  ldr x16, pc+76 (addr 0x000000004cd073b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd07370   240  blr x16
0x4cd07374   244  ldr lr, [jssp, #16]
0x4cd07378   248  ldp xzr, fp, [jssp], #24
0x4cd0737c   252  b #-0xcc (addr 0x4cd072b0)
0x4cd07380   256  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd07384   260  d63f03e0       constant
0x4cd07388   264  fff7ffff       constant
0x4cd0738c   268  fff7ffff       constant
0x4cd07390   272  21004201       constant
0x4cd07394   276  00000000       constant
0x4cd07398   280  21004201       constant
0x4cd0739c   284  00000000       constant
0x4cd073a0   288  2a8052d9       constant
0x4cd073a4   292  00000000       constant
0x4cd073a8   296  4cd06820       constant
0x4cd073ac   300  00000000       constant
0x4cd073b0   304  4cd06260       constant
0x4cd073b4   308  00000000       constant
0x4cd073b8   312  4cd068e0       constant
0x4cd073bc   316  00000000       constant
0x4cd073c0   320  movz x16, #0x0
0x4cd073c4   324  sub csp, jssp, #0x10 (16)
0x4cd073c8   328  stp fp, lr, [jssp, #-16]!
0x4cd073cc   332  bl #+0x4 (addr 0x4cd073d0)
0x4cd073d0   336  movz x17, #0xa00000000
0x4cd073d4   340  sub csp, jssp, #0x10 (16)
0x4cd073d8   344  stp x17, cp, [jssp, #-16]!
0x4cd073dc   348  add fp, jssp, #0x10 (16)
0x4cd073e0   352  ldr x17, pc+24 (addr 0x000000004cd073f8)    ;; lazy deoptimization bailout 0
0x4cd073e4   356  add x17, x17, x16
0x4cd073e8   360  br x17
0x4cd073ec   364  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd073f0   368  d63f03e0       constant
0x4cd073f4   372  d503201f       constant
0x4cd073f8   376  4cb06000       constant
0x4cd073fc   380  00000000       constant


Safepoints (size = 21)
0x4cd07368   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd072cc  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd072d4  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd072e8  embedded object  (0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd0733c  code target (STUB)  (0x4cd06820)
0x4cd07360  code target (STUB)  (0x4cd06260)
0x4cd0736c  code target (STUB)  (0x4cd068e0)
0x4cd07380  constant pool (size 64)
0x4cd073e0  runtime entry
0x4cd073ec  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 405)
0x4cd07480     0  movz w0, #0x6000
0x4cd07484     4  movk w0, #0x9, lsl #16
0x4cd07488     8  cmp w0, #0x30 (48)
0x4cd0748c    12  b.ls #+0x134 (addr 0x4cd075c0)
0x4cd07490    16  movz x2, #0xd2c0
0x4cd07494    20  movk x2, #0x166d, lsl #16
0x4cd07498    24  ldp x3, x0, [x2]
0x4cd0749c    28  adds x16, x3, #0x50 (80)
0x4cd074a0    32  ccmp x16, x0, #nzCv, lo
0x4cd074a4    36  b.hi #+0x78 (addr 0x4cd0751c)
0x4cd074a8    40  str x16, [x2]
0x4cd074ac    44  orr x3, x3, #0x1
0x4cd074b0    48  movz w0, #0x0
0x4cd074b4    52  stur x0, [x3, #31]
0x4cd074b8    56  ldur x0, [x1, #39]
0x4cd074bc    60  ldur x0, [x0, #39]
0x4cd074c0    64  movz x16, #0x19f
0x4cd074c4    68  ldr x0, [x0, x16]
0x4cd074c8    72  stur x0, [x3, #-1]
0x4cd074cc    76  ldr x0, pc+196 (addr 0x000000004cd07590)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd074d0    80  stur x0, [x3, #7]
0x4cd074d4    84  ldr x0, pc+196 (addr 0x000000004cd07598)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd074d8    88  stur x0, [x3, #15]
0x4cd074dc    92  movz x0, #0x0
0x4cd074e0    96  stur x0, [x3, #23]
0x4cd074e4   100  add x0, x3, #0x20 (32)
0x4cd074e8   104  ldr x1, pc+184 (addr 0x000000004cd075a0)    ;; object: 0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd074ec   108  stur x1, [x0, #-1]
0x4cd074f0   112  movz x1, #0x400000000
0x4cd074f4   116  stur x1, [x0, #7]
0x4cd074f8   120  stur x0, [x3, #15]
0x4cd074fc   124  ldr d0, pc+140 (addr 0x000000004cd07588)
0x4cd07500   128  stur d0, [x0, #15]
0x4cd07504   132  stur d0, [x0, #23]
0x4cd07508   136  stur d0, [x0, #31]
0x4cd0750c   140  stur d0, [x0, #39]
0x4cd07510   144  mov x0, x3
0x4cd07514   148  add jssp, jssp, #0x8 (8)
0x4cd07518   152  ret
0x4cd0751c   156  sub csp, jssp, #0x10 (16)
0x4cd07520   160  stp fp, lr, [jssp, #-16]!
0x4cd07524   164  movz fp, #0xa00000000
0x4cd07528   168  sub csp, jssp, #0x8 (8)
0x4cd0752c   172  str fp, [jssp, #-8]!
0x4cd07530   176  add fp, jssp, #0x8 (8)
0x4cd07534   180  movz x3, #0x0
0x4cd07538   184  mov x16, lr
0x4cd0753c   188  ldr x17, pc+108 (addr 0x000000004cd075a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd07540   192  blr x17
0x4cd07544   196  movz x0, #0x5000000000
0x4cd07548   200  movz x10, #0x100000000
0x4cd0754c   204  sub csp, jssp, #0x10 (16)
0x4cd07550   208  stp x10, x0, [jssp, #-16]!
0x4cd07554   212  movz x0, #0x2
0x4cd07558   216  movz x1, #0x5b88
0x4cd0755c   220  movk x1, #0xe2, lsl #16
0x4cd07560   224  ldr x16, pc+80 (addr 0x000000004cd075b0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd07564   228  blr x16
0x4cd07568   232  str x0, [jssp, #24]
0x4cd0756c   236  ldr x16, pc+76 (addr 0x000000004cd075b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd07570   240  blr x16
0x4cd07574   244  ldr lr, [jssp, #16]
0x4cd07578   248  ldp xzr, fp, [jssp], #24
0x4cd0757c   252  b #-0xcc (addr 0x4cd074b0)
0x4cd07580   256  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd07584   260  d63f03e0       constant
0x4cd07588   264  fff7ffff       constant
0x4cd0758c   268  fff7ffff       constant
0x4cd07590   272  21004201       constant
0x4cd07594   276  00000000       constant
0x4cd07598   280  21004201       constant
0x4cd0759c   284  00000000       constant
0x4cd075a0   288  2a8052d9       constant
0x4cd075a4   292  00000000       constant
0x4cd075a8   296  4cd06820       constant
0x4cd075ac   300  00000000       constant
0x4cd075b0   304  4cd06260       constant
0x4cd075b4   308  00000000       constant
0x4cd075b8   312  4cd068e0       constant
0x4cd075bc   316  00000000       constant
0x4cd075c0   320  movz x16, #0x0
0x4cd075c4   324  sub csp, jssp, #0x10 (16)
0x4cd075c8   328  stp fp, lr, [jssp, #-16]!
0x4cd075cc   332  bl #+0x4 (addr 0x4cd075d0)
0x4cd075d0   336  movz x17, #0xa00000000
0x4cd075d4   340  sub csp, jssp, #0x10 (16)
0x4cd075d8   344  stp x17, cp, [jssp, #-16]!
0x4cd075dc   348  add fp, jssp, #0x10 (16)
0x4cd075e0   352  ldr x17, pc+24 (addr 0x000000004cd075f8)    ;; lazy deoptimization bailout 0
0x4cd075e4   356  add x17, x17, x16
0x4cd075e8   360  br x17
0x4cd075ec   364  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd075f0   368  d63f03e0       constant
0x4cd075f4   372  d503201f       constant
0x4cd075f8   376  4cb06000       constant
0x4cd075fc   380  00000000       constant


Safepoints (size = 21)
0x4cd07568   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd074cc  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd074d4  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd074e8  embedded object  (0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd0753c  code target (STUB)  (0x4cd06820)
0x4cd07560  code target (STUB)  (0x4cd06260)
0x4cd0756c  code target (STUB)  (0x4cd068e0)
0x4cd07580  constant pool (size 64)
0x4cd075e0  runtime entry
0x4cd075ec  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNoArgumentConstructorStub
name = ArrayNoArgumentConstructorStub_FAST_HOLEY_DOUBLE_ELEMENTS
compiler = crankshaft
Instructions (size = 405)
0x4cd07480     0  movz w0, #0x6000
0x4cd07484     4  movk w0, #0x9, lsl #16
0x4cd07488     8  cmp w0, #0x30 (48)
0x4cd0748c    12  b.ls #+0x134 (addr 0x4cd075c0)
0x4cd07490    16  movz x2, #0xd2c0
0x4cd07494    20  movk x2, #0x166d, lsl #16
0x4cd07498    24  ldp x3, x0, [x2]
0x4cd0749c    28  adds x16, x3, #0x50 (80)
0x4cd074a0    32  ccmp x16, x0, #nzCv, lo
0x4cd074a4    36  b.hi #+0x78 (addr 0x4cd0751c)
0x4cd074a8    40  str x16, [x2]
0x4cd074ac    44  orr x3, x3, #0x1
0x4cd074b0    48  movz w0, #0x0
0x4cd074b4    52  stur x0, [x3, #31]
0x4cd074b8    56  ldur x0, [x1, #39]
0x4cd074bc    60  ldur x0, [x0, #39]
0x4cd074c0    64  movz x16, #0x19f
0x4cd074c4    68  ldr x0, [x0, x16]
0x4cd074c8    72  stur x0, [x3, #-1]
0x4cd074cc    76  ldr x0, pc+196 (addr 0x000000004cd07590)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd074d0    80  stur x0, [x3, #7]
0x4cd074d4    84  ldr x0, pc+196 (addr 0x000000004cd07598)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd074d8    88  stur x0, [x3, #15]
0x4cd074dc    92  movz x0, #0x0
0x4cd074e0    96  stur x0, [x3, #23]
0x4cd074e4   100  add x0, x3, #0x20 (32)
0x4cd074e8   104  ldr x1, pc+184 (addr 0x000000004cd075a0)    ;; object: 0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd074ec   108  stur x1, [x0, #-1]
0x4cd074f0   112  movz x1, #0x400000000
0x4cd074f4   116  stur x1, [x0, #7]
0x4cd074f8   120  stur x0, [x3, #15]
0x4cd074fc   124  ldr d0, pc+140 (addr 0x000000004cd07588)
0x4cd07500   128  stur d0, [x0, #15]
0x4cd07504   132  stur d0, [x0, #23]
0x4cd07508   136  stur d0, [x0, #31]
0x4cd0750c   140  stur d0, [x0, #39]
0x4cd07510   144  mov x0, x3
0x4cd07514   148  add jssp, jssp, #0x8 (8)
0x4cd07518   152  ret
0x4cd0751c   156  sub csp, jssp, #0x10 (16)
0x4cd07520   160  stp fp, lr, [jssp, #-16]!
0x4cd07524   164  movz fp, #0xa00000000
0x4cd07528   168  sub csp, jssp, #0x8 (8)
0x4cd0752c   172  str fp, [jssp, #-8]!
0x4cd07530   176  add fp, jssp, #0x8 (8)
0x4cd07534   180  movz x3, #0x0
0x4cd07538   184  mov x16, lr
0x4cd0753c   188  ldr x17, pc+108 (addr 0x000000004cd075a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd07540   192  blr x17
0x4cd07544   196  movz x0, #0x5000000000
0x4cd07548   200  movz x10, #0x100000000
0x4cd0754c   204  sub csp, jssp, #0x10 (16)
0x4cd07550   208  stp x10, x0, [jssp, #-16]!
0x4cd07554   212  movz x0, #0x2
0x4cd07558   216  movz x1, #0x5b88
0x4cd0755c   220  movk x1, #0xe2, lsl #16
0x4cd07560   224  ldr x16, pc+80 (addr 0x000000004cd075b0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd07564   228  blr x16
0x4cd07568   232  str x0, [jssp, #24]
0x4cd0756c   236  ldr x16, pc+76 (addr 0x000000004cd075b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd07570   240  blr x16
0x4cd07574   244  ldr lr, [jssp, #16]
0x4cd07578   248  ldp xzr, fp, [jssp], #24
0x4cd0757c   252  b #-0xcc (addr 0x4cd074b0)
0x4cd07580   256  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd07584   260  d63f03e0       constant
0x4cd07588   264  fff7ffff       constant
0x4cd0758c   268  fff7ffff       constant
0x4cd07590   272  21004201       constant
0x4cd07594   276  00000000       constant
0x4cd07598   280  21004201       constant
0x4cd0759c   284  00000000       constant
0x4cd075a0   288  2a8052d9       constant
0x4cd075a4   292  00000000       constant
0x4cd075a8   296  4cd06820       constant
0x4cd075ac   300  00000000       constant
0x4cd075b0   304  4cd06260       constant
0x4cd075b4   308  00000000       constant
0x4cd075b8   312  4cd068e0       constant
0x4cd075bc   316  00000000       constant
0x4cd075c0   320  movz x16, #0x0
0x4cd075c4   324  sub csp, jssp, #0x10 (16)
0x4cd075c8   328  stp fp, lr, [jssp, #-16]!
0x4cd075cc   332  bl #+0x4 (addr 0x4cd075d0)
0x4cd075d0   336  movz x17, #0xa00000000
0x4cd075d4   340  sub csp, jssp, #0x10 (16)
0x4cd075d8   344  stp x17, cp, [jssp, #-16]!
0x4cd075dc   348  add fp, jssp, #0x10 (16)
0x4cd075e0   352  ldr x17, pc+24 (addr 0x000000004cd075f8)    ;; lazy deoptimization bailout 0
0x4cd075e4   356  add x17, x17, x16
0x4cd075e8   360  br x17
0x4cd075ec   364  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd075f0   368  d63f03e0       constant
0x4cd075f4   372  d503201f       constant
0x4cd075f8   376  4cb06000       constant
0x4cd075fc   380  00000000       constant


Safepoints (size = 21)
0x4cd07568   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd074cc  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd074d4  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd074e8  embedded object  (0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd0753c  code target (STUB)  (0x4cd06820)
0x4cd07560  code target (STUB)  (0x4cd06260)
0x4cd0756c  code target (STUB)  (0x4cd068e0)
0x4cd07580  constant pool (size 64)
0x4cd075e0  runtime entry
0x4cd075ec  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 445)
0x4cd07680     0  movz w0, #0x6000
0x4cd07684     4  movk w0, #0x9, lsl #16
0x4cd07688     8  cmp w0, #0x30 (48)
0x4cd0768c    12  b.ls #+0x15c (addr 0x4cd077e8)
0x4cd07690    16  movz x2, #0xd2c0
0x4cd07694    20  movk x2, #0x166d, lsl #16
0x4cd07698    24  ldp x3, x0, [x2]
0x4cd0769c    28  adds x16, x3, #0x50 (80)
0x4cd076a0    32  ccmp x16, x0, #nzCv, lo
0x4cd076a4    36  b.hi #+0x84 (addr 0x4cd07728)
0x4cd076a8    40  str x16, [x2]
0x4cd076ac    44  orr x3, x3, #0x1
0x4cd076b0    48  movz w0, #0x0
0x4cd076b4    52  stur x0, [x3, #31]
0x4cd076b8    56  ldur x0, [x1, #39]
0x4cd076bc    60  ldur x0, [x0, #39]
0x4cd076c0    64  movz x16, #0x187
0x4cd076c4    68  ldr x0, [x0, x16]
0x4cd076c8    72  stur x0, [x3, #-1]
0x4cd076cc    76  ldr x0, pc+204 (addr 0x000000004cd07798)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd076d0    80  stur x0, [x3, #7]
0x4cd076d4    84  ldr x0, pc+204 (addr 0x000000004cd077a0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd076d8    88  stur x0, [x3, #15]
0x4cd076dc    92  movz x0, #0x0
0x4cd076e0    96  stur x0, [x3, #23]
0x4cd076e4   100  add x0, x3, #0x20 (32)
0x4cd076e8   104  ldr x1, pc+192 (addr 0x000000004cd077a8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd076ec   108  stur x1, [x0, #-1]
0x4cd076f0   112  movz x1, #0x400000000
0x4cd076f4   116  stur x1, [x0, #7]
0x4cd076f8   120  stur x0, [x3, #15]
0x4cd076fc   124  ldr x1, pc+180 (addr 0x000000004cd077b0)    ;; object: 0x21004519 <the hole>
0x4cd07700   128  stur x1, [x0, #15]
0x4cd07704   132  ldr x1, pc+180 (addr 0x000000004cd077b8)    ;; object: 0x21004519 <the hole>
0x4cd07708   136  stur x1, [x0, #23]
0x4cd0770c   140  ldr x1, pc+180 (addr 0x000000004cd077c0)    ;; object: 0x21004519 <the hole>
0x4cd07710   144  stur x1, [x0, #31]
0x4cd07714   148  ldr x1, pc+180 (addr 0x000000004cd077c8)    ;; object: 0x21004519 <the hole>
0x4cd07718   152  stur x1, [x0, #39]
0x4cd0771c   156  mov x0, x3
0x4cd07720   160  add jssp, jssp, #0x8 (8)
0x4cd07724   164  ret
0x4cd07728   168  sub csp, jssp, #0x10 (16)
0x4cd0772c   172  stp fp, lr, [jssp, #-16]!
0x4cd07730   176  movz fp, #0xa00000000
0x4cd07734   180  sub csp, jssp, #0x8 (8)
0x4cd07738   184  str fp, [jssp, #-8]!
0x4cd0773c   188  add fp, jssp, #0x8 (8)
0x4cd07740   192  movz x3, #0x0
0x4cd07744   196  mov x16, lr
0x4cd07748   200  ldr x17, pc+136 (addr 0x000000004cd077d0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0774c   204  blr x17
0x4cd07750   208  movz x0, #0x5000000000
0x4cd07754   212  movz x10, #0x0
0x4cd07758   216  sub csp, jssp, #0x10 (16)
0x4cd0775c   220  stp x10, x0, [jssp, #-16]!
0x4cd07760   224  movz x0, #0x2
0x4cd07764   228  movz x1, #0x5b88
0x4cd07768   232  movk x1, #0xe2, lsl #16
0x4cd0776c   236  ldr x16, pc+108 (addr 0x000000004cd077d8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd07770   240  blr x16
0x4cd07774   244  str x0, [jssp, #24]
0x4cd07778   248  ldr x16, pc+104 (addr 0x000000004cd077e0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0777c   252  blr x16
0x4cd07780   256  ldr lr, [jssp, #16]
0x4cd07784   260  ldp xzr, fp, [jssp], #24
0x4cd07788   264  b #-0xd8 (addr 0x4cd076b0)
0x4cd0778c   268  580002df       constant pool begin (num_const = 22)    ;; constant pool
0x4cd07790   272  d63f03e0       constant
0x4cd07794   276  d503201f       constant
0x4cd07798   280  21004201       constant
0x4cd0779c   284  00000000       constant
0x4cd077a0   288  21004201       constant
0x4cd077a4   292  00000000       constant
0x4cd077a8   296  2a804259       constant
0x4cd077ac   300  00000000       constant
0x4cd077b0   304  21004519       constant
0x4cd077b4   308  00000000       constant
0x4cd077b8   312  21004519       constant
0x4cd077bc   316  00000000       constant
0x4cd077c0   320  21004519       constant
0x4cd077c4   324  00000000       constant
0x4cd077c8   328  21004519       constant
0x4cd077cc   332  00000000       constant
0x4cd077d0   336  4cd06820       constant
0x4cd077d4   340  00000000       constant
0x4cd077d8   344  4cd06260       constant
0x4cd077dc   348  00000000       constant
0x4cd077e0   352  4cd068e0       constant
0x4cd077e4   356  00000000       constant
0x4cd077e8   360  movz x16, #0x0
0x4cd077ec   364  sub csp, jssp, #0x10 (16)
0x4cd077f0   368  stp fp, lr, [jssp, #-16]!
0x4cd077f4   372  bl #+0x4 (addr 0x4cd077f8)
0x4cd077f8   376  movz x17, #0xa00000000
0x4cd077fc   380  sub csp, jssp, #0x10 (16)
0x4cd07800   384  stp x17, cp, [jssp, #-16]!
0x4cd07804   388  add fp, jssp, #0x10 (16)
0x4cd07808   392  ldr x17, pc+24 (addr 0x000000004cd07820)    ;; lazy deoptimization bailout 0
0x4cd0780c   396  add x17, x17, x16
0x4cd07810   400  br x17
0x4cd07814   404  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd07818   408  d63f03e0       constant
0x4cd0781c   412  d503201f       constant
0x4cd07820   416  4cb06000       constant
0x4cd07824   420  00000000       constant


Safepoints (size = 21)
0x4cd07774   244  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0x4cd076cc  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd076d4  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd076e8  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd076fc  embedded object  (0x21004519 <the hole>)
0x4cd07704  embedded object  (0x21004519 <the hole>)
0x4cd0770c  embedded object  (0x21004519 <the hole>)
0x4cd07714  embedded object  (0x21004519 <the hole>)
0x4cd07748  code target (STUB)  (0x4cd06820)
0x4cd0776c  code target (STUB)  (0x4cd06260)
0x4cd07778  code target (STUB)  (0x4cd068e0)
0x4cd0778c  constant pool (size 92)
0x4cd07808  runtime entry
0x4cd07814  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNoArgumentConstructorStub
name = ArrayNoArgumentConstructorStub_FAST_ELEMENTS
compiler = crankshaft
Instructions (size = 445)
0x4cd07680     0  movz w0, #0x6000
0x4cd07684     4  movk w0, #0x9, lsl #16
0x4cd07688     8  cmp w0, #0x30 (48)
0x4cd0768c    12  b.ls #+0x15c (addr 0x4cd077e8)
0x4cd07690    16  movz x2, #0xd2c0
0x4cd07694    20  movk x2, #0x166d, lsl #16
0x4cd07698    24  ldp x3, x0, [x2]
0x4cd0769c    28  adds x16, x3, #0x50 (80)
0x4cd076a0    32  ccmp x16, x0, #nzCv, lo
0x4cd076a4    36  b.hi #+0x84 (addr 0x4cd07728)
0x4cd076a8    40  str x16, [x2]
0x4cd076ac    44  orr x3, x3, #0x1
0x4cd076b0    48  movz w0, #0x0
0x4cd076b4    52  stur x0, [x3, #31]
0x4cd076b8    56  ldur x0, [x1, #39]
0x4cd076bc    60  ldur x0, [x0, #39]
0x4cd076c0    64  movz x16, #0x187
0x4cd076c4    68  ldr x0, [x0, x16]
0x4cd076c8    72  stur x0, [x3, #-1]
0x4cd076cc    76  ldr x0, pc+204 (addr 0x000000004cd07798)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd076d0    80  stur x0, [x3, #7]
0x4cd076d4    84  ldr x0, pc+204 (addr 0x000000004cd077a0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd076d8    88  stur x0, [x3, #15]
0x4cd076dc    92  movz x0, #0x0
0x4cd076e0    96  stur x0, [x3, #23]
0x4cd076e4   100  add x0, x3, #0x20 (32)
0x4cd076e8   104  ldr x1, pc+192 (addr 0x000000004cd077a8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd076ec   108  stur x1, [x0, #-1]
0x4cd076f0   112  movz x1, #0x400000000
0x4cd076f4   116  stur x1, [x0, #7]
0x4cd076f8   120  stur x0, [x3, #15]
0x4cd076fc   124  ldr x1, pc+180 (addr 0x000000004cd077b0)    ;; object: 0x21004519 <the hole>
0x4cd07700   128  stur x1, [x0, #15]
0x4cd07704   132  ldr x1, pc+180 (addr 0x000000004cd077b8)    ;; object: 0x21004519 <the hole>
0x4cd07708   136  stur x1, [x0, #23]
0x4cd0770c   140  ldr x1, pc+180 (addr 0x000000004cd077c0)    ;; object: 0x21004519 <the hole>
0x4cd07710   144  stur x1, [x0, #31]
0x4cd07714   148  ldr x1, pc+180 (addr 0x000000004cd077c8)    ;; object: 0x21004519 <the hole>
0x4cd07718   152  stur x1, [x0, #39]
0x4cd0771c   156  mov x0, x3
0x4cd07720   160  add jssp, jssp, #0x8 (8)
0x4cd07724   164  ret
0x4cd07728   168  sub csp, jssp, #0x10 (16)
0x4cd0772c   172  stp fp, lr, [jssp, #-16]!
0x4cd07730   176  movz fp, #0xa00000000
0x4cd07734   180  sub csp, jssp, #0x8 (8)
0x4cd07738   184  str fp, [jssp, #-8]!
0x4cd0773c   188  add fp, jssp, #0x8 (8)
0x4cd07740   192  movz x3, #0x0
0x4cd07744   196  mov x16, lr
0x4cd07748   200  ldr x17, pc+136 (addr 0x000000004cd077d0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0774c   204  blr x17
0x4cd07750   208  movz x0, #0x5000000000
0x4cd07754   212  movz x10, #0x0
0x4cd07758   216  sub csp, jssp, #0x10 (16)
0x4cd0775c   220  stp x10, x0, [jssp, #-16]!
0x4cd07760   224  movz x0, #0x2
0x4cd07764   228  movz x1, #0x5b88
0x4cd07768   232  movk x1, #0xe2, lsl #16
0x4cd0776c   236  ldr x16, pc+108 (addr 0x000000004cd077d8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd07770   240  blr x16
0x4cd07774   244  str x0, [jssp, #24]
0x4cd07778   248  ldr x16, pc+104 (addr 0x000000004cd077e0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0777c   252  blr x16
0x4cd07780   256  ldr lr, [jssp, #16]
0x4cd07784   260  ldp xzr, fp, [jssp], #24
0x4cd07788   264  b #-0xd8 (addr 0x4cd076b0)
0x4cd0778c   268  580002df       constant pool begin (num_const = 22)    ;; constant pool
0x4cd07790   272  d63f03e0       constant
0x4cd07794   276  d503201f       constant
0x4cd07798   280  21004201       constant
0x4cd0779c   284  00000000       constant
0x4cd077a0   288  21004201       constant
0x4cd077a4   292  00000000       constant
0x4cd077a8   296  2a804259       constant
0x4cd077ac   300  00000000       constant
0x4cd077b0   304  21004519       constant
0x4cd077b4   308  00000000       constant
0x4cd077b8   312  21004519       constant
0x4cd077bc   316  00000000       constant
0x4cd077c0   320  21004519       constant
0x4cd077c4   324  00000000       constant
0x4cd077c8   328  21004519       constant
0x4cd077cc   332  00000000       constant
0x4cd077d0   336  4cd06820       constant
0x4cd077d4   340  00000000       constant
0x4cd077d8   344  4cd06260       constant
0x4cd077dc   348  00000000       constant
0x4cd077e0   352  4cd068e0       constant
0x4cd077e4   356  00000000       constant
0x4cd077e8   360  movz x16, #0x0
0x4cd077ec   364  sub csp, jssp, #0x10 (16)
0x4cd077f0   368  stp fp, lr, [jssp, #-16]!
0x4cd077f4   372  bl #+0x4 (addr 0x4cd077f8)
0x4cd077f8   376  movz x17, #0xa00000000
0x4cd077fc   380  sub csp, jssp, #0x10 (16)
0x4cd07800   384  stp x17, cp, [jssp, #-16]!
0x4cd07804   388  add fp, jssp, #0x10 (16)
0x4cd07808   392  ldr x17, pc+24 (addr 0x000000004cd07820)    ;; lazy deoptimization bailout 0
0x4cd0780c   396  add x17, x17, x16
0x4cd07810   400  br x17
0x4cd07814   404  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd07818   408  d63f03e0       constant
0x4cd0781c   412  d503201f       constant
0x4cd07820   416  4cb06000       constant
0x4cd07824   420  00000000       constant


Safepoints (size = 21)
0x4cd07774   244  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0x4cd076cc  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd076d4  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd076e8  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd076fc  embedded object  (0x21004519 <the hole>)
0x4cd07704  embedded object  (0x21004519 <the hole>)
0x4cd0770c  embedded object  (0x21004519 <the hole>)
0x4cd07714  embedded object  (0x21004519 <the hole>)
0x4cd07748  code target (STUB)  (0x4cd06820)
0x4cd0776c  code target (STUB)  (0x4cd06260)
0x4cd07778  code target (STUB)  (0x4cd068e0)
0x4cd0778c  constant pool (size 92)
0x4cd07808  runtime entry
0x4cd07814  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 445)
0x4cd078a0     0  movz w0, #0x6000
0x4cd078a4     4  movk w0, #0x9, lsl #16
0x4cd078a8     8  cmp w0, #0x30 (48)
0x4cd078ac    12  b.ls #+0x15c (addr 0x4cd07a08)
0x4cd078b0    16  movz x2, #0xd2c0
0x4cd078b4    20  movk x2, #0x166d, lsl #16
0x4cd078b8    24  ldp x3, x0, [x2]
0x4cd078bc    28  adds x16, x3, #0x50 (80)
0x4cd078c0    32  ccmp x16, x0, #nzCv, lo
0x4cd078c4    36  b.hi #+0x84 (addr 0x4cd07948)
0x4cd078c8    40  str x16, [x2]
0x4cd078cc    44  orr x3, x3, #0x1
0x4cd078d0    48  movz w0, #0x0
0x4cd078d4    52  stur x0, [x3, #31]
0x4cd078d8    56  ldur x0, [x1, #39]
0x4cd078dc    60  ldur x0, [x0, #39]
0x4cd078e0    64  movz x16, #0x18f
0x4cd078e4    68  ldr x0, [x0, x16]
0x4cd078e8    72  stur x0, [x3, #-1]
0x4cd078ec    76  ldr x0, pc+204 (addr 0x000000004cd079b8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd078f0    80  stur x0, [x3, #7]
0x4cd078f4    84  ldr x0, pc+204 (addr 0x000000004cd079c0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd078f8    88  stur x0, [x3, #15]
0x4cd078fc    92  movz x0, #0x0
0x4cd07900    96  stur x0, [x3, #23]
0x4cd07904   100  add x0, x3, #0x20 (32)
0x4cd07908   104  ldr x1, pc+192 (addr 0x000000004cd079c8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd0790c   108  stur x1, [x0, #-1]
0x4cd07910   112  movz x1, #0x400000000
0x4cd07914   116  stur x1, [x0, #7]
0x4cd07918   120  stur x0, [x3, #15]
0x4cd0791c   124  ldr x1, pc+180 (addr 0x000000004cd079d0)    ;; object: 0x21004519 <the hole>
0x4cd07920   128  stur x1, [x0, #15]
0x4cd07924   132  ldr x1, pc+180 (addr 0x000000004cd079d8)    ;; object: 0x21004519 <the hole>
0x4cd07928   136  stur x1, [x0, #23]
0x4cd0792c   140  ldr x1, pc+180 (addr 0x000000004cd079e0)    ;; object: 0x21004519 <the hole>
0x4cd07930   144  stur x1, [x0, #31]
0x4cd07934   148  ldr x1, pc+180 (addr 0x000000004cd079e8)    ;; object: 0x21004519 <the hole>
0x4cd07938   152  stur x1, [x0, #39]
0x4cd0793c   156  mov x0, x3
0x4cd07940   160  add jssp, jssp, #0x8 (8)
0x4cd07944   164  ret
0x4cd07948   168  sub csp, jssp, #0x10 (16)
0x4cd0794c   172  stp fp, lr, [jssp, #-16]!
0x4cd07950   176  movz fp, #0xa00000000
0x4cd07954   180  sub csp, jssp, #0x8 (8)
0x4cd07958   184  str fp, [jssp, #-8]!
0x4cd0795c   188  add fp, jssp, #0x8 (8)
0x4cd07960   192  movz x3, #0x0
0x4cd07964   196  mov x16, lr
0x4cd07968   200  ldr x17, pc+136 (addr 0x000000004cd079f0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0796c   204  blr x17
0x4cd07970   208  movz x0, #0x5000000000
0x4cd07974   212  movz x10, #0x0
0x4cd07978   216  sub csp, jssp, #0x10 (16)
0x4cd0797c   220  stp x10, x0, [jssp, #-16]!
0x4cd07980   224  movz x0, #0x2
0x4cd07984   228  movz x1, #0x5b88
0x4cd07988   232  movk x1, #0xe2, lsl #16
0x4cd0798c   236  ldr x16, pc+108 (addr 0x000000004cd079f8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd07990   240  blr x16
0x4cd07994   244  str x0, [jssp, #24]
0x4cd07998   248  ldr x16, pc+104 (addr 0x000000004cd07a00)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0799c   252  blr x16
0x4cd079a0   256  ldr lr, [jssp, #16]
0x4cd079a4   260  ldp xzr, fp, [jssp], #24
0x4cd079a8   264  b #-0xd8 (addr 0x4cd078d0)
0x4cd079ac   268  580002df       constant pool begin (num_const = 22)    ;; constant pool
0x4cd079b0   272  d63f03e0       constant
0x4cd079b4   276  d503201f       constant
0x4cd079b8   280  21004201       constant
0x4cd079bc   284  00000000       constant
0x4cd079c0   288  21004201       constant
0x4cd079c4   292  00000000       constant
0x4cd079c8   296  2a804259       constant
0x4cd079cc   300  00000000       constant
0x4cd079d0   304  21004519       constant
0x4cd079d4   308  00000000       constant
0x4cd079d8   312  21004519       constant
0x4cd079dc   316  00000000       constant
0x4cd079e0   320  21004519       constant
0x4cd079e4   324  00000000       constant
0x4cd079e8   328  21004519       constant
0x4cd079ec   332  00000000       constant
0x4cd079f0   336  4cd06820       constant
0x4cd079f4   340  00000000       constant
0x4cd079f8   344  4cd06260       constant
0x4cd079fc   348  00000000       constant
0x4cd07a00   352  4cd068e0       constant
0x4cd07a04   356  00000000       constant
0x4cd07a08   360  movz x16, #0x0
0x4cd07a0c   364  sub csp, jssp, #0x10 (16)
0x4cd07a10   368  stp fp, lr, [jssp, #-16]!
0x4cd07a14   372  bl #+0x4 (addr 0x4cd07a18)
0x4cd07a18   376  movz x17, #0xa00000000
0x4cd07a1c   380  sub csp, jssp, #0x10 (16)
0x4cd07a20   384  stp x17, cp, [jssp, #-16]!
0x4cd07a24   388  add fp, jssp, #0x10 (16)
0x4cd07a28   392  ldr x17, pc+24 (addr 0x000000004cd07a40)    ;; lazy deoptimization bailout 0
0x4cd07a2c   396  add x17, x17, x16
0x4cd07a30   400  br x17
0x4cd07a34   404  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd07a38   408  d63f03e0       constant
0x4cd07a3c   412  d503201f       constant
0x4cd07a40   416  4cb06000       constant
0x4cd07a44   420  00000000       constant


Safepoints (size = 21)
0x4cd07994   244  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0x4cd078ec  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd078f4  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd07908  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd0791c  embedded object  (0x21004519 <the hole>)
0x4cd07924  embedded object  (0x21004519 <the hole>)
0x4cd0792c  embedded object  (0x21004519 <the hole>)
0x4cd07934  embedded object  (0x21004519 <the hole>)
0x4cd07968  code target (STUB)  (0x4cd06820)
0x4cd0798c  code target (STUB)  (0x4cd06260)
0x4cd07998  code target (STUB)  (0x4cd068e0)
0x4cd079ac  constant pool (size 92)
0x4cd07a28  runtime entry
0x4cd07a34  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNoArgumentConstructorStub
name = ArrayNoArgumentConstructorStub_FAST_HOLEY_ELEMENTS
compiler = crankshaft
Instructions (size = 445)
0x4cd078a0     0  movz w0, #0x6000
0x4cd078a4     4  movk w0, #0x9, lsl #16
0x4cd078a8     8  cmp w0, #0x30 (48)
0x4cd078ac    12  b.ls #+0x15c (addr 0x4cd07a08)
0x4cd078b0    16  movz x2, #0xd2c0
0x4cd078b4    20  movk x2, #0x166d, lsl #16
0x4cd078b8    24  ldp x3, x0, [x2]
0x4cd078bc    28  adds x16, x3, #0x50 (80)
0x4cd078c0    32  ccmp x16, x0, #nzCv, lo
0x4cd078c4    36  b.hi #+0x84 (addr 0x4cd07948)
0x4cd078c8    40  str x16, [x2]
0x4cd078cc    44  orr x3, x3, #0x1
0x4cd078d0    48  movz w0, #0x0
0x4cd078d4    52  stur x0, [x3, #31]
0x4cd078d8    56  ldur x0, [x1, #39]
0x4cd078dc    60  ldur x0, [x0, #39]
0x4cd078e0    64  movz x16, #0x18f
0x4cd078e4    68  ldr x0, [x0, x16]
0x4cd078e8    72  stur x0, [x3, #-1]
0x4cd078ec    76  ldr x0, pc+204 (addr 0x000000004cd079b8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd078f0    80  stur x0, [x3, #7]
0x4cd078f4    84  ldr x0, pc+204 (addr 0x000000004cd079c0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd078f8    88  stur x0, [x3, #15]
0x4cd078fc    92  movz x0, #0x0
0x4cd07900    96  stur x0, [x3, #23]
0x4cd07904   100  add x0, x3, #0x20 (32)
0x4cd07908   104  ldr x1, pc+192 (addr 0x000000004cd079c8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd0790c   108  stur x1, [x0, #-1]
0x4cd07910   112  movz x1, #0x400000000
0x4cd07914   116  stur x1, [x0, #7]
0x4cd07918   120  stur x0, [x3, #15]
0x4cd0791c   124  ldr x1, pc+180 (addr 0x000000004cd079d0)    ;; object: 0x21004519 <the hole>
0x4cd07920   128  stur x1, [x0, #15]
0x4cd07924   132  ldr x1, pc+180 (addr 0x000000004cd079d8)    ;; object: 0x21004519 <the hole>
0x4cd07928   136  stur x1, [x0, #23]
0x4cd0792c   140  ldr x1, pc+180 (addr 0x000000004cd079e0)    ;; object: 0x21004519 <the hole>
0x4cd07930   144  stur x1, [x0, #31]
0x4cd07934   148  ldr x1, pc+180 (addr 0x000000004cd079e8)    ;; object: 0x21004519 <the hole>
0x4cd07938   152  stur x1, [x0, #39]
0x4cd0793c   156  mov x0, x3
0x4cd07940   160  add jssp, jssp, #0x8 (8)
0x4cd07944   164  ret
0x4cd07948   168  sub csp, jssp, #0x10 (16)
0x4cd0794c   172  stp fp, lr, [jssp, #-16]!
0x4cd07950   176  movz fp, #0xa00000000
0x4cd07954   180  sub csp, jssp, #0x8 (8)
0x4cd07958   184  str fp, [jssp, #-8]!
0x4cd0795c   188  add fp, jssp, #0x8 (8)
0x4cd07960   192  movz x3, #0x0
0x4cd07964   196  mov x16, lr
0x4cd07968   200  ldr x17, pc+136 (addr 0x000000004cd079f0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0796c   204  blr x17
0x4cd07970   208  movz x0, #0x5000000000
0x4cd07974   212  movz x10, #0x0
0x4cd07978   216  sub csp, jssp, #0x10 (16)
0x4cd0797c   220  stp x10, x0, [jssp, #-16]!
0x4cd07980   224  movz x0, #0x2
0x4cd07984   228  movz x1, #0x5b88
0x4cd07988   232  movk x1, #0xe2, lsl #16
0x4cd0798c   236  ldr x16, pc+108 (addr 0x000000004cd079f8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd07990   240  blr x16
0x4cd07994   244  str x0, [jssp, #24]
0x4cd07998   248  ldr x16, pc+104 (addr 0x000000004cd07a00)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0799c   252  blr x16
0x4cd079a0   256  ldr lr, [jssp, #16]
0x4cd079a4   260  ldp xzr, fp, [jssp], #24
0x4cd079a8   264  b #-0xd8 (addr 0x4cd078d0)
0x4cd079ac   268  580002df       constant pool begin (num_const = 22)    ;; constant pool
0x4cd079b0   272  d63f03e0       constant
0x4cd079b4   276  d503201f       constant
0x4cd079b8   280  21004201       constant
0x4cd079bc   284  00000000       constant
0x4cd079c0   288  21004201       constant
0x4cd079c4   292  00000000       constant
0x4cd079c8   296  2a804259       constant
0x4cd079cc   300  00000000       constant
0x4cd079d0   304  21004519       constant
0x4cd079d4   308  00000000       constant
0x4cd079d8   312  21004519       constant
0x4cd079dc   316  00000000       constant
0x4cd079e0   320  21004519       constant
0x4cd079e4   324  00000000       constant
0x4cd079e8   328  21004519       constant
0x4cd079ec   332  00000000       constant
0x4cd079f0   336  4cd06820       constant
0x4cd079f4   340  00000000       constant
0x4cd079f8   344  4cd06260       constant
0x4cd079fc   348  00000000       constant
0x4cd07a00   352  4cd068e0       constant
0x4cd07a04   356  00000000       constant
0x4cd07a08   360  movz x16, #0x0
0x4cd07a0c   364  sub csp, jssp, #0x10 (16)
0x4cd07a10   368  stp fp, lr, [jssp, #-16]!
0x4cd07a14   372  bl #+0x4 (addr 0x4cd07a18)
0x4cd07a18   376  movz x17, #0xa00000000
0x4cd07a1c   380  sub csp, jssp, #0x10 (16)
0x4cd07a20   384  stp x17, cp, [jssp, #-16]!
0x4cd07a24   388  add fp, jssp, #0x10 (16)
0x4cd07a28   392  ldr x17, pc+24 (addr 0x000000004cd07a40)    ;; lazy deoptimization bailout 0
0x4cd07a2c   396  add x17, x17, x16
0x4cd07a30   400  br x17
0x4cd07a34   404  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd07a38   408  d63f03e0       constant
0x4cd07a3c   412  d503201f       constant
0x4cd07a40   416  4cb06000       constant
0x4cd07a44   420  00000000       constant


Safepoints (size = 21)
0x4cd07994   244  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0x4cd078ec  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd078f4  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd07908  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd0791c  embedded object  (0x21004519 <the hole>)
0x4cd07924  embedded object  (0x21004519 <the hole>)
0x4cd0792c  embedded object  (0x21004519 <the hole>)
0x4cd07934  embedded object  (0x21004519 <the hole>)
0x4cd07968  code target (STUB)  (0x4cd06820)
0x4cd0798c  code target (STUB)  (0x4cd06260)
0x4cd07998  code target (STUB)  (0x4cd068e0)
0x4cd079ac  constant pool (size 92)
0x4cd07a28  runtime entry
0x4cd07a34  constant pool (size 20)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1904)
0x4cd07ac0     0  adr xzr, #+0x40 (addr 0x4cd07b00)
0x4cd07ac4     4  adr xzr, #+0x358 (addr 0x4cd07e1c)
0x4cd07ac8     8  ldr x16, pc+1720 (addr 0x000000004cd08180)    ;; external reference (store_buffer_top)
0x4cd07acc    12  ldr x0, [x16]
0x4cd07ad0    16  str x1, [x0], #8
0x4cd07ad4    20  str x0, [x16]
0x4cd07ad8    24  tst x0, #0x1ffff
0x4cd07adc    28  b.eq #+0x8 (addr 0x4cd07ae4)
0x4cd07ae0    32  ret
0x4cd07ae4    36  sub csp, jssp, #0x8 (8)
0x4cd07ae8    40  str lr, [jssp, #-8]!
0x4cd07aec    44  ldr x17, pc+1692 (addr 0x000000004cd08188)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd07af0    48  blr x17
0x4cd07af4    52  ldr lr, [jssp], #8
0x4cd07af8    56  ret
0x4cd07afc    60  ret
0x4cd07b00    64  sub csp, jssp, #0x10 (16)
0x4cd07b04    68  stp x3, x2, [jssp, #-16]!
0x4cd07b08    72  ldr x0, [x1]
0x4cd07b0c    76  and x16, x0, #0xfffffffffff00000
0x4cd07b10    80  ldr x16, [x16, #8]
0x4cd07b14    84  tst x16, #0x18
0x4cd07b18    88  b.eq #+0x1d4 (addr 0x4cd07cec)
0x4cd07b1c    92  and x16, x8, #0xfffffffffff00000
0x4cd07b20    96  ldr x16, [x16, #8]
0x4cd07b24   100  tst x16, #0x18
0x4cd07b28   104  b.ne #+0x1c4 (addr 0x4cd07cec)
0x4cd07b2c   108  and x0, x8, #0xfffffffffff00000
0x4cd07b30   112  ldr x2, [x0, #104]
0x4cd07b34   116  subs x2, x2, #0x1 (1)
0x4cd07b38   120  str x2, [x0, #104]
0x4cd07b3c   124  b.mi #+0xc4 (addr 0x4cd07c00)
0x4cd07b40   128  ubfx x16, x8, #8, #12
0x4cd07b44   132  and x0, x8, #0xfffffffffff00000
0x4cd07b48   136  add x0, x0, x16, lsl #2
0x4cd07b4c   140  ubfx x2, x8, #3, #5
0x4cd07b50   144  ldr x0, [x0, #360]
0x4cd07b54   148  lsr x0, x0, x2
0x4cd07b58   152  tbz w0, #0, #+0x8 (addr 0x4cd07b60)
0x4cd07b5c   156  tbnz w0, #1, #+0x3c (addr 0x4cd07b98)
0x4cd07b60   160  ldp x3, x2, [jssp], #16
0x4cd07b64   164  ldr x16, pc+1580 (addr 0x000000004cd08190)    ;; external reference (store_buffer_top)
0x4cd07b68   168  ldr x0, [x16]
0x4cd07b6c   172  str x1, [x0], #8
0x4cd07b70   176  str x0, [x16]
0x4cd07b74   180  tst x0, #0x1ffff
0x4cd07b78   184  b.eq #+0x8 (addr 0x4cd07b80)
0x4cd07b7c   188  ret
0x4cd07b80   192  sub csp, jssp, #0x8 (8)
0x4cd07b84   196  str lr, [jssp, #-8]!
0x4cd07b88   200  ldr x17, pc+1552 (addr 0x000000004cd08198)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd07b8c   204  blr x17
0x4cd07b90   208  ldr lr, [jssp], #8
0x4cd07b94   212  ret
0x4cd07b98   216  ldr x0, [x1]
0x4cd07b9c   220  sub csp, jssp, #0x10 (16)
0x4cd07ba0   224  stp x8, x1, [jssp, #-16]!
0x4cd07ba4   228  ubfx x16, x0, #8, #12
0x4cd07ba8   232  and x2, x0, #0xfffffffffff00000
0x4cd07bac   236  add x2, x2, x16, lsl #2
0x4cd07bb0   240  ubfx x8, x0, #3, #5
0x4cd07bb4   244  ldr x1, [x2, #360]
0x4cd07bb8   248  lsr x1, x1, x8
0x4cd07bbc   252  tbz w1, #0, #+0x40 (addr 0x4cd07bfc)
0x4cd07bc0   256  ldp x8, x1, [jssp], #16
0x4cd07bc4   260  ldp x3, x2, [jssp], #16
0x4cd07bc8   264  ldr x16, pc+1496 (addr 0x000000004cd081a0)    ;; external reference (store_buffer_top)
0x4cd07bcc   268  ldr x0, [x16]
0x4cd07bd0   272  str x1, [x0], #8
0x4cd07bd4   276  str x0, [x16]
0x4cd07bd8   280  tst x0, #0x1ffff
0x4cd07bdc   284  b.eq #+0x8 (addr 0x4cd07be4)
0x4cd07be0   288  ret
0x4cd07be4   292  sub csp, jssp, #0x8 (8)
0x4cd07be8   296  str lr, [jssp, #-8]!
0x4cd07bec   300  ldr x17, pc+1468 (addr 0x000000004cd081a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd07bf0   304  blr x17
0x4cd07bf4   308  ldr lr, [jssp], #8
0x4cd07bf8   312  ret
0x4cd07bfc   316  ldp x8, x1, [jssp], #16
0x4cd07c00   320  sub csp, jssp, #0x78 (120)
0x4cd07c04   324  stp x14, x15, [jssp, #-32]!
0x4cd07c08   328  stp x18, lr, [jssp, #16]
0x4cd07c0c   332  stp x10, x11, [jssp, #-32]!
0x4cd07c10   336  stp x12, x13, [jssp, #16]
0x4cd07c14   340  stp x6, x7, [jssp, #-32]!
0x4cd07c18   344  stp x8, x9, [jssp, #16]
0x4cd07c1c   348  stp x1, x4, [jssp, #-24]!
0x4cd07c20   352  str x5, [jssp, #16]
0x4cd07c24   356  sub csp, jssp, #0xb0 (176)
0x4cd07c28   360  stp d26, d27, [jssp, #-32]!
0x4cd07c2c   364  stp d28, d29, [jssp, #16]
0x4cd07c30   368  stp d22, d23, [jssp, #-32]!
0x4cd07c34   372  stp d24, d25, [jssp, #16]
0x4cd07c38   376  stp d18, d19, [jssp, #-32]!
0x4cd07c3c   380  stp d20, d21, [jssp, #16]
0x4cd07c40   384  stp d6, d7, [jssp, #-32]!
0x4cd07c44   388  stp d16, d17, [jssp, #16]
0x4cd07c48   392  stp d2, d3, [jssp, #-32]!
0x4cd07c4c   396  stp d4, d5, [jssp, #16]
0x4cd07c50   400  stp d0, d1, [jssp, #-16]!
0x4cd07c54   404  mov x0, x8
0x4cd07c58   408  ldr x2, pc+1368 (addr 0x000000004cd081b0)    ;; external reference (isolate)
0x4cd07c5c   412  ldr x16, pc+1372 (addr 0x000000004cd081b8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd07c60   416  and csp, jssp, #0xfffffffffffffff0
0x4cd07c64   420  blr x16
0x4cd07c68   424  ldp d2, d3, [jssp, #16]
0x4cd07c6c   428  ldp d0, d1, [jssp], #32
0x4cd07c70   432  ldp d6, d7, [jssp, #16]
0x4cd07c74   436  ldp d4, d5, [jssp], #32
0x4cd07c78   440  ldp d18, d19, [jssp, #16]
0x4cd07c7c   444  ldp d16, d17, [jssp], #32
0x4cd07c80   448  ldp d22, d23, [jssp, #16]
0x4cd07c84   452  ldp d20, d21, [jssp], #32
0x4cd07c88   456  ldp d26, d27, [jssp, #16]
0x4cd07c8c   460  ldp d24, d25, [jssp], #32
0x4cd07c90   464  ldp d28, d29, [jssp], #16
0x4cd07c94   468  ldp x5, x6, [jssp, #16]
0x4cd07c98   472  ldp x1, x4, [jssp], #32
0x4cd07c9c   476  ldp x9, x10, [jssp, #16]
0x4cd07ca0   480  ldp x7, x8, [jssp], #32
0x4cd07ca4   484  ldp x13, x14, [jssp, #16]
0x4cd07ca8   488  ldp x11, x12, [jssp], #32
0x4cd07cac   492  ldr lr, [jssp, #16]
0x4cd07cb0   496  ldp x15, x18, [jssp], #24
0x4cd07cb4   500  ldp x3, x2, [jssp], #16
0x4cd07cb8   504  ldr x16, pc+1288 (addr 0x000000004cd081c0)    ;; external reference (store_buffer_top)
0x4cd07cbc   508  ldr x0, [x16]
0x4cd07cc0   512  str x1, [x0], #8
0x4cd07cc4   516  str x0, [x16]
0x4cd07cc8   520  tst x0, #0x1ffff
0x4cd07ccc   524  b.eq #+0x8 (addr 0x4cd07cd4)
0x4cd07cd0   528  ret
0x4cd07cd4   532  sub csp, jssp, #0x8 (8)
0x4cd07cd8   536  str lr, [jssp, #-8]!
0x4cd07cdc   540  ldr x17, pc+1260 (addr 0x000000004cd081c8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd07ce0   544  blr x17
0x4cd07ce4   548  ldr lr, [jssp], #8
0x4cd07ce8   552  ret
0x4cd07cec   556  and x0, x8, #0xfffffffffff00000
0x4cd07cf0   560  ldr x2, [x0, #104]
0x4cd07cf4   564  subs x2, x2, #0x1 (1)
0x4cd07cf8   568  str x2, [x0, #104]
0x4cd07cfc   572  b.mi #+0x64 (addr 0x4cd07d60)
0x4cd07d00   576  ubfx x16, x8, #8, #12
0x4cd07d04   580  and x0, x8, #0xfffffffffff00000
0x4cd07d08   584  add x0, x0, x16, lsl #2
0x4cd07d0c   588  ubfx x2, x8, #3, #5
0x4cd07d10   592  ldr x0, [x0, #360]
0x4cd07d14   596  lsr x0, x0, x2
0x4cd07d18   600  tbz w0, #0, #+0x8 (addr 0x4cd07d20)
0x4cd07d1c   604  tbnz w0, #1, #+0xc (addr 0x4cd07d28)
0x4cd07d20   608  ldp x3, x2, [jssp], #16
0x4cd07d24   612  ret
0x4cd07d28   616  ldr x0, [x1]
0x4cd07d2c   620  sub csp, jssp, #0x10 (16)
0x4cd07d30   624  stp x8, x1, [jssp, #-16]!
0x4cd07d34   628  ubfx x16, x0, #8, #12
0x4cd07d38   632  and x2, x0, #0xfffffffffff00000
0x4cd07d3c   636  add x2, x2, x16, lsl #2
0x4cd07d40   640  ubfx x8, x0, #3, #5
0x4cd07d44   644  ldr x1, [x2, #360]
0x4cd07d48   648  lsr x1, x1, x8
0x4cd07d4c   652  tbz w1, #0, #+0x10 (addr 0x4cd07d5c)
0x4cd07d50   656  ldp x8, x1, [jssp], #16
0x4cd07d54   660  ldp x3, x2, [jssp], #16
0x4cd07d58   664  ret
0x4cd07d5c   668  ldp x8, x1, [jssp], #16
0x4cd07d60   672  sub csp, jssp, #0x78 (120)
0x4cd07d64   676  stp x14, x15, [jssp, #-32]!
0x4cd07d68   680  stp x18, lr, [jssp, #16]
0x4cd07d6c   684  stp x10, x11, [jssp, #-32]!
0x4cd07d70   688  stp x12, x13, [jssp, #16]
0x4cd07d74   692  stp x6, x7, [jssp, #-32]!
0x4cd07d78   696  stp x8, x9, [jssp, #16]
0x4cd07d7c   700  stp x1, x4, [jssp, #-24]!
0x4cd07d80   704  str x5, [jssp, #16]
0x4cd07d84   708  sub csp, jssp, #0xb0 (176)
0x4cd07d88   712  stp d26, d27, [jssp, #-32]!
0x4cd07d8c   716  stp d28, d29, [jssp, #16]
0x4cd07d90   720  stp d22, d23, [jssp, #-32]!
0x4cd07d94   724  stp d24, d25, [jssp, #16]
0x4cd07d98   728  stp d18, d19, [jssp, #-32]!
0x4cd07d9c   732  stp d20, d21, [jssp, #16]
0x4cd07da0   736  stp d6, d7, [jssp, #-32]!
0x4cd07da4   740  stp d16, d17, [jssp, #16]
0x4cd07da8   744  stp d2, d3, [jssp, #-32]!
0x4cd07dac   748  stp d4, d5, [jssp, #16]
0x4cd07db0   752  stp d0, d1, [jssp, #-16]!
0x4cd07db4   756  mov x0, x8
0x4cd07db8   760  ldr x2, pc+1048 (addr 0x000000004cd081d0)    ;; external reference (isolate)
0x4cd07dbc   764  ldr x16, pc+1052 (addr 0x000000004cd081d8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd07dc0   768  and csp, jssp, #0xfffffffffffffff0
0x4cd07dc4   772  blr x16
0x4cd07dc8   776  ldp d2, d3, [jssp, #16]
0x4cd07dcc   780  ldp d0, d1, [jssp], #32
0x4cd07dd0   784  ldp d6, d7, [jssp, #16]
0x4cd07dd4   788  ldp d4, d5, [jssp], #32
0x4cd07dd8   792  ldp d18, d19, [jssp, #16]
0x4cd07ddc   796  ldp d16, d17, [jssp], #32
0x4cd07de0   800  ldp d22, d23, [jssp, #16]
0x4cd07de4   804  ldp d20, d21, [jssp], #32
0x4cd07de8   808  ldp d26, d27, [jssp, #16]
0x4cd07dec   812  ldp d24, d25, [jssp], #32
0x4cd07df0   816  ldp d28, d29, [jssp], #16
0x4cd07df4   820  ldp x5, x6, [jssp, #16]
0x4cd07df8   824  ldp x1, x4, [jssp], #32
0x4cd07dfc   828  ldp x9, x10, [jssp, #16]
0x4cd07e00   832  ldp x7, x8, [jssp], #32
0x4cd07e04   836  ldp x13, x14, [jssp, #16]
0x4cd07e08   840  ldp x11, x12, [jssp], #32
0x4cd07e0c   844  ldr lr, [jssp, #16]
0x4cd07e10   848  ldp x15, x18, [jssp], #24
0x4cd07e14   852  ldp x3, x2, [jssp], #16
0x4cd07e18   856  ret
0x4cd07e1c   860  sub csp, jssp, #0x10 (16)
0x4cd07e20   864  stp x3, x2, [jssp, #-16]!
0x4cd07e24   868  ldr x0, [x1]
0x4cd07e28   872  and x16, x0, #0xfffffffffff00000
0x4cd07e2c   876  ldr x16, [x16, #8]
0x4cd07e30   880  tst x16, #0x18
0x4cd07e34   884  b.eq #+0x1f4 (addr 0x4cd08028)
0x4cd07e38   888  and x16, x8, #0xfffffffffff00000
0x4cd07e3c   892  ldr x16, [x16, #8]
0x4cd07e40   896  tst x16, #0x18
0x4cd07e44   900  b.ne #+0x1e4 (addr 0x4cd08028)
0x4cd07e48   904  and x0, x8, #0xfffffffffff00000
0x4cd07e4c   908  ldr x2, [x0, #104]
0x4cd07e50   912  subs x2, x2, #0x1 (1)
0x4cd07e54   916  str x2, [x0, #104]
0x4cd07e58   920  b.mi #+0xe4 (addr 0x4cd07f3c)
0x4cd07e5c   924  ubfx x16, x8, #8, #12
0x4cd07e60   928  and x0, x8, #0xfffffffffff00000
0x4cd07e64   932  add x0, x0, x16, lsl #2
0x4cd07e68   936  ubfx x2, x8, #3, #5
0x4cd07e6c   940  ldr x0, [x0, #360]
0x4cd07e70   944  lsr x0, x0, x2
0x4cd07e74   948  tbz w0, #0, #+0x8 (addr 0x4cd07e7c)
0x4cd07e78   952  tbnz w0, #1, #+0x3c (addr 0x4cd07eb4)
0x4cd07e7c   956  ldp x3, x2, [jssp], #16
0x4cd07e80   960  ldr x16, pc+864 (addr 0x000000004cd081e0)    ;; external reference (store_buffer_top)
0x4cd07e84   964  ldr x0, [x16]
0x4cd07e88   968  str x1, [x0], #8
0x4cd07e8c   972  str x0, [x16]
0x4cd07e90   976  tst x0, #0x1ffff
0x4cd07e94   980  b.eq #+0x8 (addr 0x4cd07e9c)
0x4cd07e98   984  ret
0x4cd07e9c   988  sub csp, jssp, #0x8 (8)
0x4cd07ea0   992  str lr, [jssp, #-8]!
0x4cd07ea4   996  ldr x17, pc+836 (addr 0x000000004cd081e8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd07ea8  1000  blr x17
0x4cd07eac  1004  ldr lr, [jssp], #8
0x4cd07eb0  1008  ret
0x4cd07eb4  1012  ldr x0, [x1]
0x4cd07eb8  1016  and x2, x0, #0xfffffffffff00000
0x4cd07ebc  1020  ldr x2, [x2, #8]
0x4cd07ec0  1024  tbz w2, #6, #+0x18 (addr 0x4cd07ed8)
0x4cd07ec4  1028  and x2, x8, #0xfffffffffff00000
0x4cd07ec8  1032  ldr x2, [x2, #8]
0x4cd07ecc  1036  movz x16, #0x58
0x4cd07ed0  1040  tst x2, x16
0x4cd07ed4  1044  b.eq #+0x68 (addr 0x4cd07f3c)
0x4cd07ed8  1048  sub csp, jssp, #0x10 (16)
0x4cd07edc  1052  stp x8, x1, [jssp, #-16]!
0x4cd07ee0  1056  ubfx x16, x0, #8, #12
0x4cd07ee4  1060  and x2, x0, #0xfffffffffff00000
0x4cd07ee8  1064  add x2, x2, x16, lsl #2
0x4cd07eec  1068  ubfx x8, x0, #3, #5
0x4cd07ef0  1072  ldr x1, [x2, #360]
0x4cd07ef4  1076  lsr x1, x1, x8
0x4cd07ef8  1080  tbz w1, #0, #+0x40 (addr 0x4cd07f38)
0x4cd07efc  1084  ldp x8, x1, [jssp], #16
0x4cd07f00  1088  ldp x3, x2, [jssp], #16
0x4cd07f04  1092  ldr x16, pc+748 (addr 0x000000004cd081f0)    ;; external reference (store_buffer_top)
0x4cd07f08  1096  ldr x0, [x16]
0x4cd07f0c  1100  str x1, [x0], #8
0x4cd07f10  1104  str x0, [x16]
0x4cd07f14  1108  tst x0, #0x1ffff
0x4cd07f18  1112  b.eq #+0x8 (addr 0x4cd07f20)
0x4cd07f1c  1116  ret
0x4cd07f20  1120  sub csp, jssp, #0x8 (8)
0x4cd07f24  1124  str lr, [jssp, #-8]!
0x4cd07f28  1128  ldr x17, pc+720 (addr 0x000000004cd081f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd07f2c  1132  blr x17
0x4cd07f30  1136  ldr lr, [jssp], #8
0x4cd07f34  1140  ret
0x4cd07f38  1144  ldp x8, x1, [jssp], #16
0x4cd07f3c  1148  sub csp, jssp, #0x78 (120)
0x4cd07f40  1152  stp x14, x15, [jssp, #-32]!
0x4cd07f44  1156  stp x18, lr, [jssp, #16]
0x4cd07f48  1160  stp x10, x11, [jssp, #-32]!
0x4cd07f4c  1164  stp x12, x13, [jssp, #16]
0x4cd07f50  1168  stp x6, x7, [jssp, #-32]!
0x4cd07f54  1172  stp x8, x9, [jssp, #16]
0x4cd07f58  1176  stp x1, x4, [jssp, #-24]!
0x4cd07f5c  1180  str x5, [jssp, #16]
0x4cd07f60  1184  sub csp, jssp, #0xb0 (176)
0x4cd07f64  1188  stp d26, d27, [jssp, #-32]!
0x4cd07f68  1192  stp d28, d29, [jssp, #16]
0x4cd07f6c  1196  stp d22, d23, [jssp, #-32]!
0x4cd07f70  1200  stp d24, d25, [jssp, #16]
0x4cd07f74  1204  stp d18, d19, [jssp, #-32]!
0x4cd07f78  1208  stp d20, d21, [jssp, #16]
0x4cd07f7c  1212  stp d6, d7, [jssp, #-32]!
0x4cd07f80  1216  stp d16, d17, [jssp, #16]
0x4cd07f84  1220  stp d2, d3, [jssp, #-32]!
0x4cd07f88  1224  stp d4, d5, [jssp, #16]
0x4cd07f8c  1228  stp d0, d1, [jssp, #-16]!
0x4cd07f90  1232  mov x0, x8
0x4cd07f94  1236  ldr x2, pc+620 (addr 0x000000004cd08200)    ;; external reference (isolate)
0x4cd07f98  1240  ldr x16, pc+624 (addr 0x000000004cd08208)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd07f9c  1244  and csp, jssp, #0xfffffffffffffff0
0x4cd07fa0  1248  blr x16
0x4cd07fa4  1252  ldp d2, d3, [jssp, #16]
0x4cd07fa8  1256  ldp d0, d1, [jssp], #32
0x4cd07fac  1260  ldp d6, d7, [jssp, #16]
0x4cd07fb0  1264  ldp d4, d5, [jssp], #32
0x4cd07fb4  1268  ldp d18, d19, [jssp, #16]
0x4cd07fb8  1272  ldp d16, d17, [jssp], #32
0x4cd07fbc  1276  ldp d22, d23, [jssp, #16]
0x4cd07fc0  1280  ldp d20, d21, [jssp], #32
0x4cd07fc4  1284  ldp d26, d27, [jssp, #16]
0x4cd07fc8  1288  ldp d24, d25, [jssp], #32
0x4cd07fcc  1292  ldp d28, d29, [jssp], #16
0x4cd07fd0  1296  ldp x5, x6, [jssp, #16]
0x4cd07fd4  1300  ldp x1, x4, [jssp], #32
0x4cd07fd8  1304  ldp x9, x10, [jssp, #16]
0x4cd07fdc  1308  ldp x7, x8, [jssp], #32
0x4cd07fe0  1312  ldp x13, x14, [jssp, #16]
0x4cd07fe4  1316  ldp x11, x12, [jssp], #32
0x4cd07fe8  1320  ldr lr, [jssp, #16]
0x4cd07fec  1324  ldp x15, x18, [jssp], #24
0x4cd07ff0  1328  ldp x3, x2, [jssp], #16
0x4cd07ff4  1332  ldr x16, pc+540 (addr 0x000000004cd08210)    ;; external reference (store_buffer_top)
0x4cd07ff8  1336  ldr x0, [x16]
0x4cd07ffc  1340  str x1, [x0], #8
0x4cd08000  1344  str x0, [x16]
0x4cd08004  1348  tst x0, #0x1ffff
0x4cd08008  1352  b.eq #+0x8 (addr 0x4cd08010)
0x4cd0800c  1356  ret
0x4cd08010  1360  sub csp, jssp, #0x8 (8)
0x4cd08014  1364  str lr, [jssp, #-8]!
0x4cd08018  1368  ldr x17, pc+512 (addr 0x000000004cd08218)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0801c  1372  blr x17
0x4cd08020  1376  ldr lr, [jssp], #8
0x4cd08024  1380  ret
0x4cd08028  1384  and x0, x8, #0xfffffffffff00000
0x4cd0802c  1388  ldr x2, [x0, #104]
0x4cd08030  1392  subs x2, x2, #0x1 (1)
0x4cd08034  1396  str x2, [x0, #104]
0x4cd08038  1400  b.mi #+0x84 (addr 0x4cd080bc)
0x4cd0803c  1404  ubfx x16, x8, #8, #12
0x4cd08040  1408  and x0, x8, #0xfffffffffff00000
0x4cd08044  1412  add x0, x0, x16, lsl #2
0x4cd08048  1416  ubfx x2, x8, #3, #5
0x4cd0804c  1420  ldr x0, [x0, #360]
0x4cd08050  1424  lsr x0, x0, x2
0x4cd08054  1428  tbz w0, #0, #+0x8 (addr 0x4cd0805c)
0x4cd08058  1432  tbnz w0, #1, #+0xc (addr 0x4cd08064)
0x4cd0805c  1436  ldp x3, x2, [jssp], #16
0x4cd08060  1440  ret
0x4cd08064  1444  ldr x0, [x1]
0x4cd08068  1448  and x2, x0, #0xfffffffffff00000
0x4cd0806c  1452  ldr x2, [x2, #8]
0x4cd08070  1456  tbz w2, #6, #+0x18 (addr 0x4cd08088)
0x4cd08074  1460  and x2, x8, #0xfffffffffff00000
0x4cd08078  1464  ldr x2, [x2, #8]
0x4cd0807c  1468  movz x16, #0x58
0x4cd08080  1472  tst x2, x16
0x4cd08084  1476  b.eq #+0x38 (addr 0x4cd080bc)
0x4cd08088  1480  sub csp, jssp, #0x10 (16)
0x4cd0808c  1484  stp x8, x1, [jssp, #-16]!
0x4cd08090  1488  ubfx x16, x0, #8, #12
0x4cd08094  1492  and x2, x0, #0xfffffffffff00000
0x4cd08098  1496  add x2, x2, x16, lsl #2
0x4cd0809c  1500  ubfx x8, x0, #3, #5
0x4cd080a0  1504  ldr x1, [x2, #360]
0x4cd080a4  1508  lsr x1, x1, x8
0x4cd080a8  1512  tbz w1, #0, #+0x10 (addr 0x4cd080b8)
0x4cd080ac  1516  ldp x8, x1, [jssp], #16
0x4cd080b0  1520  ldp x3, x2, [jssp], #16
0x4cd080b4  1524  ret
0x4cd080b8  1528  ldp x8, x1, [jssp], #16
0x4cd080bc  1532  sub csp, jssp, #0x78 (120)
0x4cd080c0  1536  stp x14, x15, [jssp, #-32]!
0x4cd080c4  1540  stp x18, lr, [jssp, #16]
0x4cd080c8  1544  stp x10, x11, [jssp, #-32]!
0x4cd080cc  1548  stp x12, x13, [jssp, #16]
0x4cd080d0  1552  stp x6, x7, [jssp, #-32]!
0x4cd080d4  1556  stp x8, x9, [jssp, #16]
0x4cd080d8  1560  stp x1, x4, [jssp, #-24]!
0x4cd080dc  1564  str x5, [jssp, #16]
0x4cd080e0  1568  sub csp, jssp, #0xb0 (176)
0x4cd080e4  1572  stp d26, d27, [jssp, #-32]!
0x4cd080e8  1576  stp d28, d29, [jssp, #16]
0x4cd080ec  1580  stp d22, d23, [jssp, #-32]!
0x4cd080f0  1584  stp d24, d25, [jssp, #16]
0x4cd080f4  1588  stp d18, d19, [jssp, #-32]!
0x4cd080f8  1592  stp d20, d21, [jssp, #16]
0x4cd080fc  1596  stp d6, d7, [jssp, #-32]!
0x4cd08100  1600  stp d16, d17, [jssp, #16]
0x4cd08104  1604  stp d2, d3, [jssp, #-32]!
0x4cd08108  1608  stp d4, d5, [jssp, #16]
0x4cd0810c  1612  stp d0, d1, [jssp, #-16]!
0x4cd08110  1616  mov x0, x8
0x4cd08114  1620  ldr x2, pc+268 (addr 0x000000004cd08220)    ;; external reference (isolate)
0x4cd08118  1624  ldr x16, pc+272 (addr 0x000000004cd08228)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0811c  1628  and csp, jssp, #0xfffffffffffffff0
0x4cd08120  1632  blr x16
0x4cd08124  1636  ldp d2, d3, [jssp, #16]
0x4cd08128  1640  ldp d0, d1, [jssp], #32
0x4cd0812c  1644  ldp d6, d7, [jssp, #16]
0x4cd08130  1648  ldp d4, d5, [jssp], #32
0x4cd08134  1652  ldp d18, d19, [jssp, #16]
0x4cd08138  1656  ldp d16, d17, [jssp], #32
0x4cd0813c  1660  ldp d22, d23, [jssp, #16]
0x4cd08140  1664  ldp d20, d21, [jssp], #32
0x4cd08144  1668  ldp d26, d27, [jssp, #16]
0x4cd08148  1672  ldp d24, d25, [jssp], #32
0x4cd0814c  1676  ldp d28, d29, [jssp], #16
0x4cd08150  1680  ldp x5, x6, [jssp, #16]
0x4cd08154  1684  ldp x1, x4, [jssp], #32
0x4cd08158  1688  ldp x9, x10, [jssp, #16]
0x4cd0815c  1692  ldp x7, x8, [jssp], #32
0x4cd08160  1696  ldp x13, x14, [jssp, #16]
0x4cd08164  1700  ldp x11, x12, [jssp], #32
0x4cd08168  1704  ldr lr, [jssp, #16]
0x4cd0816c  1708  ldp x15, x18, [jssp], #24
0x4cd08170  1712  ldp x3, x2, [jssp], #16
0x4cd08174  1716  ret
0x4cd08178  1720  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd0817c  1724  d63f03e0       constant
0x4cd08180  1728  166dd8c0       constant
0x4cd08184  1732  00000000       constant
0x4cd08188  1736  4cd065a0       constant
0x4cd0818c  1740  00000000       constant
0x4cd08190  1744  166dd8c0       constant
0x4cd08194  1748  00000000       constant
0x4cd08198  1752  4cd065a0       constant
0x4cd0819c  1756  00000000       constant
0x4cd081a0  1760  166dd8c0       constant
0x4cd081a4  1764  00000000       constant
0x4cd081a8  1768  4cd065a0       constant
0x4cd081ac  1772  00000000       constant
0x4cd081b0  1776  166dc2d0       constant
0x4cd081b4  1780  00000000       constant
0x4cd081b8  1784  00c2d958       constant
0x4cd081bc  1788  00000000       constant
0x4cd081c0  1792  166dd8c0       constant
0x4cd081c4  1796  00000000       constant
0x4cd081c8  1800  4cd065a0       constant
0x4cd081cc  1804  00000000       constant
0x4cd081d0  1808  166dc2d0       constant
0x4cd081d4  1812  00000000       constant
0x4cd081d8  1816  00c2d958       constant
0x4cd081dc  1820  00000000       constant
0x4cd081e0  1824  166dd8c0       constant
0x4cd081e4  1828  00000000       constant
0x4cd081e8  1832  4cd065a0       constant
0x4cd081ec  1836  00000000       constant
0x4cd081f0  1840  166dd8c0       constant
0x4cd081f4  1844  00000000       constant
0x4cd081f8  1848  4cd065a0       constant
0x4cd081fc  1852  00000000       constant
0x4cd08200  1856  166dc2d0       constant
0x4cd08204  1860  00000000       constant
0x4cd08208  1864  00c2d958       constant
0x4cd0820c  1868  00000000       constant
0x4cd08210  1872  166dd8c0       constant
0x4cd08214  1876  00000000       constant
0x4cd08218  1880  4cd065a0       constant
0x4cd0821c  1884  00000000       constant
0x4cd08220  1888  166dc2d0       constant
0x4cd08224  1892  00000000       constant
0x4cd08228  1896  00c2d958       constant
0x4cd0822c  1900  00000000       constant


RelocInfo (size = 65)
0x4cd07ac8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd07aec  code target (STUB)  (0x4cd065a0)
0x4cd07b64  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd07b88  code target (STUB)  (0x4cd065a0)
0x4cd07bc8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd07bec  code target (STUB)  (0x4cd065a0)
0x4cd07c58  external reference (isolate)  (0x166dc2d0)
0x4cd07c5c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd07cb8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd07cdc  code target (STUB)  (0x4cd065a0)
0x4cd07db8  external reference (isolate)  (0x166dc2d0)
0x4cd07dbc  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd07e80  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd07ea4  code target (STUB)  (0x4cd065a0)
0x4cd07f04  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd07f28  code target (STUB)  (0x4cd065a0)
0x4cd07f94  external reference (isolate)  (0x166dc2d0)
0x4cd07f98  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd07ff4  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd08018  code target (STUB)  (0x4cd065a0)
0x4cd08114  external reference (isolate)  (0x166dc2d0)
0x4cd08118  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd08178  constant pool (size 184)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 706)
0x4cd082a0     0  movz x16, #0xa00000000
0x4cd082a4     4  sub csp, jssp, #0x10 (16)
0x4cd082a8     8  stp fp, lr, [jssp, #-16]!
0x4cd082ac    12  mov fp, jssp
0x4cd082b0    16  sub csp, jssp, #0x8 (8)
0x4cd082b4    20  sub jssp, jssp, #0x8 (8)
0x4cd082b8    24  stur x16, [fp, #-8]
0x4cd082bc    28  ldr x3, [fp]
0x4cd082c0    32  ldur x4, [x3, #-8]
0x4cd082c4    36  movz x16, #0xe00000000
0x4cd082c8    40  cmp x4, x16
0x4cd082cc    44  csel x4, fp, x3, ne
0x4cd082d0    48  ldr x3, [x4, #16]
0x4cd082d4    52  tbnz w3, #0, #+0x11c (addr 0x4cd083f0)
0x4cd082d8    56  asr x5, x3, #32
0x4cd082dc    60  movz w16, #0x257f
0x4cd082e0    64  cmp w5, w16, lsl #3
0x4cd082e4    68  b.hs #+0x224 (addr 0x4cd08508)
0x4cd082e8    72  cbz w5, #+0xc (addr 0x4cd082f4)
0x4cd082ec    76  mov x3, x5
0x4cd082f0    80  b #+0xc (addr 0x4cd082fc)
0x4cd082f4    84  movz x3, #0x4
0x4cd082f8    88  movz x5, #0x0
0x4cd082fc    92  lsl x4, x3, #32
0x4cd08300    96  lsl x5, x5, #32
0x4cd08304   100  lsl w6, w3, #3
0x4cd08308   104  add w6, w6, #0x10 (16)
0x4cd0830c   108  cmp w6, #0x96000 (614400)
0x4cd08310   112  b.hs #+0x200 (addr 0x4cd08510)
0x4cd08314   116  movz x7, #0xd2c0
0x4cd08318   120  movk x7, #0x166d, lsl #16
0x4cd0831c   124  ldp x8, x0, [x7]
0x4cd08320   128  adds x16, x8, #0x30 (48)
0x4cd08324   132  ccmp x16, x0, #nzCv, lo
0x4cd08328   136  b.hi #+0xf0 (addr 0x4cd08418)
0x4cd0832c   140  str x16, [x7]
0x4cd08330   144  orr x8, x8, #0x1
0x4cd08334   148  ldur x0, [x1, #23]
0x4cd08338   152  stur x0, [x8, #-1]
0x4cd0833c   156  ldr x0, pc+364 (addr 0x000000004cd084a8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd08340   160  stur x0, [x8, #7]
0x4cd08344   164  ldr x0, pc+364 (addr 0x000000004cd084b0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd08348   168  stur x0, [x8, #15]
0x4cd0834c   172  stur x5, [x8, #23]
0x4cd08350   176  add x0, x8, #0x20 (32)
0x4cd08354   180  ldr x1, pc+356 (addr 0x000000004cd084b8)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd08358   184  stur x1, [x0, #-1]
0x4cd0835c   188  stur x2, [x0, #7]
0x4cd08360   192  ldur w0, [x2, #35]
0x4cd08364   196  add w0, w0, #0x1 (1)
0x4cd08368   200  lsl x0, x0, #32
0x4cd0836c   204  stur x0, [x2, #31]
0x4cd08370   208  sxtw x6, w6
0x4cd08374   212  movz x0, #0xd2c0
0x4cd08378   216  movk x0, #0x166d, lsl #16
0x4cd0837c   220  ldp x2, x16, [x0]
0x4cd08380   224  adds x1, x2, x6
0x4cd08384   228  ccmp x1, x16, #nzCv, lo
0x4cd08388   232  b.hi #+0xd4 (addr 0x4cd0845c)
0x4cd0838c   236  str x1, [x0]
0x4cd08390   240  orr x2, x2, #0x1
0x4cd08394   244  ldr x0, pc+300 (addr 0x000000004cd084c0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd08398   248  stur x0, [x2, #-1]
0x4cd0839c   252  stur x4, [x2, #7]
0x4cd083a0   256  mov x0, x2
0x4cd083a4   260  stur x0, [x8, #15]
0x4cd083a8   264  add x1, x8, #0xf (15)
0x4cd083ac   268  and x0, x8, #0xfffffffffff00000
0x4cd083b0   272  ldr x0, [x0, #8]
0x4cd083b4   276  tbz w0, #2, #+0xc (addr 0x4cd083c0)
0x4cd083b8   280  ldr x16, pc+272 (addr 0x000000004cd084c8)    ;; code: STUB, RecordWriteStub, minor: 66568
0x4cd083bc   284  blr x16
0x4cd083c0   288  cmp w3, #0x0 (0)
0x4cd083c4   292  b.le #+0x18 (addr 0x4cd083dc)
0x4cd083c8   296  sub w3, w3, #0x1 (1)
0x4cd083cc   300  ldr x0, pc+260 (addr 0x000000004cd084d0)    ;; object: 0x21004519 <the hole>
0x4cd083d0   304  add x1, x2, #0xf (15)
0x4cd083d4   308  str x0, [x1, w3, sxtw #3]
0x4cd083d8   312  b #-0x18 (addr 0x4cd083c0)
0x4cd083dc   316  mov x0, x8
0x4cd083e0   320  mov jssp, fp
0x4cd083e4   324  ldp fp, lr, [jssp], #16
0x4cd083e8   328  add jssp, jssp, #0x10 (16)
0x4cd083ec   332  ret
0x4cd083f0   336  ldur x16, [x3, #-1]
0x4cd083f4   340  ldr x17, [x26, #120]
0x4cd083f8   344  cmp x16, x17
0x4cd083fc   348  b.ne #+0x11c (addr 0x4cd08518)
0x4cd08400   352  ldur d29, [x3, #7]
0x4cd08404   356  fcvtzs w5, d29
0x4cd08408   360  scvtf d0, w5
0x4cd0840c   364  fcmp d29, d0
0x4cd08410   368  b.ne #+0x108 (addr 0x4cd08518)
0x4cd08414   372  b #-0x138 (addr 0x4cd082dc)
0x4cd08418   376  movz x8, #0x0
0x4cd0841c   380  mov x16, lr
0x4cd08420   384  ldr x17, pc+184 (addr 0x000000004cd084d8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd08424   388  blr x17
0x4cd08428   392  movz x0, #0x3000000000
0x4cd0842c   396  movz x10, #0x0
0x4cd08430   400  sub csp, jssp, #0x10 (16)
0x4cd08434   404  stp x10, x0, [jssp, #-16]!
0x4cd08438   408  movz x0, #0x2
0x4cd0843c   412  movz x1, #0x5b88
0x4cd08440   416  movk x1, #0xe2, lsl #16
0x4cd08444   420  ldr x16, pc+156 (addr 0x000000004cd084e0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd08448   424  blr x16
0x4cd0844c   428  str x0, [jssp, #64]
0x4cd08450   432  ldr x16, pc+152 (addr 0x000000004cd084e8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd08454   436  blr x16
0x4cd08458   440  b #-0x124 (addr 0x4cd08334)
0x4cd0845c   444  movz x2, #0x0
0x4cd08460   448  mov x16, lr
0x4cd08464   452  ldr x17, pc+140 (addr 0x000000004cd084f0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd08468   456  blr x17
0x4cd0846c   460  lsl x0, x6, #32
0x4cd08470   464  movz x10, #0x0
0x4cd08474   468  sub csp, jssp, #0x10 (16)
0x4cd08478   472  stp x10, x0, [jssp, #-16]!
0x4cd0847c   476  movz x0, #0x2
0x4cd08480   480  movz x1, #0x5b88
0x4cd08484   484  movk x1, #0xe2, lsl #16
0x4cd08488   488  ldr x16, pc+112 (addr 0x000000004cd084f8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0848c   492  blr x16
0x4cd08490   496  str x0, [jssp, #16]
0x4cd08494   500  ldr x16, pc+108 (addr 0x000000004cd08500)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd08498   504  blr x16
0x4cd0849c   508  b #-0x108 (addr 0x4cd08394)
0x4cd084a0   512  5800033f       constant pool begin (num_const = 25)    ;; constant pool
0x4cd084a4   516  d63f03e0       constant
0x4cd084a8   520  21004201       constant
0x4cd084ac   524  00000000       constant
0x4cd084b0   528  21004201       constant
0x4cd084b4   532  00000000       constant
0x4cd084b8   536  2a805d81       constant
0x4cd084bc   540  00000000       constant
0x4cd084c0   544  2a804259       constant
0x4cd084c4   548  00000000       constant
0x4cd084c8   552  4cd07ac0       constant
0x4cd084cc   556  00000000       constant
0x4cd084d0   560  21004519       constant
0x4cd084d4   564  00000000       constant
0x4cd084d8   568  4cd06820       constant
0x4cd084dc   572  00000000       constant
0x4cd084e0   576  4cd06260       constant
0x4cd084e4   580  00000000       constant
0x4cd084e8   584  4cd068e0       constant
0x4cd084ec   588  00000000       constant
0x4cd084f0   592  4cd06820       constant
0x4cd084f4   596  00000000       constant
0x4cd084f8   600  4cd06260       constant
0x4cd084fc   604  00000000       constant
0x4cd08500   608  4cd068e0       constant
0x4cd08504   612  00000000       constant
0x4cd08508   616  movz x16, #0x0
0x4cd0850c   620  bl #+0x14 (addr 0x4cd08520)
0x4cd08510   624  movz x16, #0x8
0x4cd08514   628  bl #+0xc (addr 0x4cd08520)
0x4cd08518   632  movz x16, #0x10
0x4cd0851c   636  bl #+0x4 (addr 0x4cd08520)
0x4cd08520   640  ldr x17, pc+24 (addr 0x000000004cd08538)    ;; lazy deoptimization bailout 0
0x4cd08524   644  add x17, x17, x16
0x4cd08528   648  br x17
0x4cd0852c   652  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd08530   656  d63f03e0       constant
0x4cd08534   660  d503201f       constant
0x4cd08538   664  4cb06000       constant
0x4cd0853c   668  00000000       constant


Safepoints (size = 34)
0x4cd0844c   428  000 | x1 | x2 | x8 | x27 (sp -> fp)  <none> argc: 2
0x4cd08490   496  000 | x2 | x8 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0x4cd0833c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd08344  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd08354  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd08394  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd083b8  code target (STUB)  (0x4cd07ac0)
0x4cd083cc  embedded object  (0x21004519 <the hole>)
0x4cd08420  code target (STUB)  (0x4cd06820)
0x4cd08444  code target (STUB)  (0x4cd06260)
0x4cd08450  code target (STUB)  (0x4cd068e0)
0x4cd08464  code target (STUB)  (0x4cd06820)
0x4cd08488  code target (STUB)  (0x4cd06260)
0x4cd08494  code target (STUB)  (0x4cd068e0)
0x4cd084a0  constant pool (size 104)
0x4cd08520  runtime entry
0x4cd0852c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArraySingleArgumentConstructorStub
name = ArraySingleArgumentConstructorStub_FAST_SMI_ELEMENTS
compiler = crankshaft
Instructions (size = 706)
0x4cd082a0     0  movz x16, #0xa00000000
0x4cd082a4     4  sub csp, jssp, #0x10 (16)
0x4cd082a8     8  stp fp, lr, [jssp, #-16]!
0x4cd082ac    12  mov fp, jssp
0x4cd082b0    16  sub csp, jssp, #0x8 (8)
0x4cd082b4    20  sub jssp, jssp, #0x8 (8)
0x4cd082b8    24  stur x16, [fp, #-8]
0x4cd082bc    28  ldr x3, [fp]
0x4cd082c0    32  ldur x4, [x3, #-8]
0x4cd082c4    36  movz x16, #0xe00000000
0x4cd082c8    40  cmp x4, x16
0x4cd082cc    44  csel x4, fp, x3, ne
0x4cd082d0    48  ldr x3, [x4, #16]
0x4cd082d4    52  tbnz w3, #0, #+0x11c (addr 0x4cd083f0)
0x4cd082d8    56  asr x5, x3, #32
0x4cd082dc    60  movz w16, #0x257f
0x4cd082e0    64  cmp w5, w16, lsl #3
0x4cd082e4    68  b.hs #+0x224 (addr 0x4cd08508)
0x4cd082e8    72  cbz w5, #+0xc (addr 0x4cd082f4)
0x4cd082ec    76  mov x3, x5
0x4cd082f0    80  b #+0xc (addr 0x4cd082fc)
0x4cd082f4    84  movz x3, #0x4
0x4cd082f8    88  movz x5, #0x0
0x4cd082fc    92  lsl x4, x3, #32
0x4cd08300    96  lsl x5, x5, #32
0x4cd08304   100  lsl w6, w3, #3
0x4cd08308   104  add w6, w6, #0x10 (16)
0x4cd0830c   108  cmp w6, #0x96000 (614400)
0x4cd08310   112  b.hs #+0x200 (addr 0x4cd08510)
0x4cd08314   116  movz x7, #0xd2c0
0x4cd08318   120  movk x7, #0x166d, lsl #16
0x4cd0831c   124  ldp x8, x0, [x7]
0x4cd08320   128  adds x16, x8, #0x30 (48)
0x4cd08324   132  ccmp x16, x0, #nzCv, lo
0x4cd08328   136  b.hi #+0xf0 (addr 0x4cd08418)
0x4cd0832c   140  str x16, [x7]
0x4cd08330   144  orr x8, x8, #0x1
0x4cd08334   148  ldur x0, [x1, #23]
0x4cd08338   152  stur x0, [x8, #-1]
0x4cd0833c   156  ldr x0, pc+364 (addr 0x000000004cd084a8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd08340   160  stur x0, [x8, #7]
0x4cd08344   164  ldr x0, pc+364 (addr 0x000000004cd084b0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd08348   168  stur x0, [x8, #15]
0x4cd0834c   172  stur x5, [x8, #23]
0x4cd08350   176  add x0, x8, #0x20 (32)
0x4cd08354   180  ldr x1, pc+356 (addr 0x000000004cd084b8)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd08358   184  stur x1, [x0, #-1]
0x4cd0835c   188  stur x2, [x0, #7]
0x4cd08360   192  ldur w0, [x2, #35]
0x4cd08364   196  add w0, w0, #0x1 (1)
0x4cd08368   200  lsl x0, x0, #32
0x4cd0836c   204  stur x0, [x2, #31]
0x4cd08370   208  sxtw x6, w6
0x4cd08374   212  movz x0, #0xd2c0
0x4cd08378   216  movk x0, #0x166d, lsl #16
0x4cd0837c   220  ldp x2, x16, [x0]
0x4cd08380   224  adds x1, x2, x6
0x4cd08384   228  ccmp x1, x16, #nzCv, lo
0x4cd08388   232  b.hi #+0xd4 (addr 0x4cd0845c)
0x4cd0838c   236  str x1, [x0]
0x4cd08390   240  orr x2, x2, #0x1
0x4cd08394   244  ldr x0, pc+300 (addr 0x000000004cd084c0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd08398   248  stur x0, [x2, #-1]
0x4cd0839c   252  stur x4, [x2, #7]
0x4cd083a0   256  mov x0, x2
0x4cd083a4   260  stur x0, [x8, #15]
0x4cd083a8   264  add x1, x8, #0xf (15)
0x4cd083ac   268  and x0, x8, #0xfffffffffff00000
0x4cd083b0   272  ldr x0, [x0, #8]
0x4cd083b4   276  tbz w0, #2, #+0xc (addr 0x4cd083c0)
0x4cd083b8   280  ldr x16, pc+272 (addr 0x000000004cd084c8)    ;; code: STUB, RecordWriteStub, minor: 66568
0x4cd083bc   284  blr x16
0x4cd083c0   288  cmp w3, #0x0 (0)
0x4cd083c4   292  b.le #+0x18 (addr 0x4cd083dc)
0x4cd083c8   296  sub w3, w3, #0x1 (1)
0x4cd083cc   300  ldr x0, pc+260 (addr 0x000000004cd084d0)    ;; object: 0x21004519 <the hole>
0x4cd083d0   304  add x1, x2, #0xf (15)
0x4cd083d4   308  str x0, [x1, w3, sxtw #3]
0x4cd083d8   312  b #-0x18 (addr 0x4cd083c0)
0x4cd083dc   316  mov x0, x8
0x4cd083e0   320  mov jssp, fp
0x4cd083e4   324  ldp fp, lr, [jssp], #16
0x4cd083e8   328  add jssp, jssp, #0x10 (16)
0x4cd083ec   332  ret
0x4cd083f0   336  ldur x16, [x3, #-1]
0x4cd083f4   340  ldr x17, [x26, #120]
0x4cd083f8   344  cmp x16, x17
0x4cd083fc   348  b.ne #+0x11c (addr 0x4cd08518)
0x4cd08400   352  ldur d29, [x3, #7]
0x4cd08404   356  fcvtzs w5, d29
0x4cd08408   360  scvtf d0, w5
0x4cd0840c   364  fcmp d29, d0
0x4cd08410   368  b.ne #+0x108 (addr 0x4cd08518)
0x4cd08414   372  b #-0x138 (addr 0x4cd082dc)
0x4cd08418   376  movz x8, #0x0
0x4cd0841c   380  mov x16, lr
0x4cd08420   384  ldr x17, pc+184 (addr 0x000000004cd084d8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd08424   388  blr x17
0x4cd08428   392  movz x0, #0x3000000000
0x4cd0842c   396  movz x10, #0x0
0x4cd08430   400  sub csp, jssp, #0x10 (16)
0x4cd08434   404  stp x10, x0, [jssp, #-16]!
0x4cd08438   408  movz x0, #0x2
0x4cd0843c   412  movz x1, #0x5b88
0x4cd08440   416  movk x1, #0xe2, lsl #16
0x4cd08444   420  ldr x16, pc+156 (addr 0x000000004cd084e0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd08448   424  blr x16
0x4cd0844c   428  str x0, [jssp, #64]
0x4cd08450   432  ldr x16, pc+152 (addr 0x000000004cd084e8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd08454   436  blr x16
0x4cd08458   440  b #-0x124 (addr 0x4cd08334)
0x4cd0845c   444  movz x2, #0x0
0x4cd08460   448  mov x16, lr
0x4cd08464   452  ldr x17, pc+140 (addr 0x000000004cd084f0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd08468   456  blr x17
0x4cd0846c   460  lsl x0, x6, #32
0x4cd08470   464  movz x10, #0x0
0x4cd08474   468  sub csp, jssp, #0x10 (16)
0x4cd08478   472  stp x10, x0, [jssp, #-16]!
0x4cd0847c   476  movz x0, #0x2
0x4cd08480   480  movz x1, #0x5b88
0x4cd08484   484  movk x1, #0xe2, lsl #16
0x4cd08488   488  ldr x16, pc+112 (addr 0x000000004cd084f8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0848c   492  blr x16
0x4cd08490   496  str x0, [jssp, #16]
0x4cd08494   500  ldr x16, pc+108 (addr 0x000000004cd08500)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd08498   504  blr x16
0x4cd0849c   508  b #-0x108 (addr 0x4cd08394)
0x4cd084a0   512  5800033f       constant pool begin (num_const = 25)    ;; constant pool
0x4cd084a4   516  d63f03e0       constant
0x4cd084a8   520  21004201       constant
0x4cd084ac   524  00000000       constant
0x4cd084b0   528  21004201       constant
0x4cd084b4   532  00000000       constant
0x4cd084b8   536  2a805d81       constant
0x4cd084bc   540  00000000       constant
0x4cd084c0   544  2a804259       constant
0x4cd084c4   548  00000000       constant
0x4cd084c8   552  4cd07ac0       constant
0x4cd084cc   556  00000000       constant
0x4cd084d0   560  21004519       constant
0x4cd084d4   564  00000000       constant
0x4cd084d8   568  4cd06820       constant
0x4cd084dc   572  00000000       constant
0x4cd084e0   576  4cd06260       constant
0x4cd084e4   580  00000000       constant
0x4cd084e8   584  4cd068e0       constant
0x4cd084ec   588  00000000       constant
0x4cd084f0   592  4cd06820       constant
0x4cd084f4   596  00000000       constant
0x4cd084f8   600  4cd06260       constant
0x4cd084fc   604  00000000       constant
0x4cd08500   608  4cd068e0       constant
0x4cd08504   612  00000000       constant
0x4cd08508   616  movz x16, #0x0
0x4cd0850c   620  bl #+0x14 (addr 0x4cd08520)
0x4cd08510   624  movz x16, #0x8
0x4cd08514   628  bl #+0xc (addr 0x4cd08520)
0x4cd08518   632  movz x16, #0x10
0x4cd0851c   636  bl #+0x4 (addr 0x4cd08520)
0x4cd08520   640  ldr x17, pc+24 (addr 0x000000004cd08538)    ;; lazy deoptimization bailout 0
0x4cd08524   644  add x17, x17, x16
0x4cd08528   648  br x17
0x4cd0852c   652  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd08530   656  d63f03e0       constant
0x4cd08534   660  d503201f       constant
0x4cd08538   664  4cb06000       constant
0x4cd0853c   668  00000000       constant


Safepoints (size = 34)
0x4cd0844c   428  000 | x1 | x2 | x8 | x27 (sp -> fp)  <none> argc: 2
0x4cd08490   496  000 | x2 | x8 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0x4cd0833c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd08344  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd08354  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd08394  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd083b8  code target (STUB)  (0x4cd07ac0)
0x4cd083cc  embedded object  (0x21004519 <the hole>)
0x4cd08420  code target (STUB)  (0x4cd06820)
0x4cd08444  code target (STUB)  (0x4cd06260)
0x4cd08450  code target (STUB)  (0x4cd068e0)
0x4cd08464  code target (STUB)  (0x4cd06820)
0x4cd08488  code target (STUB)  (0x4cd06260)
0x4cd08494  code target (STUB)  (0x4cd068e0)
0x4cd084a0  constant pool (size 104)
0x4cd08520  runtime entry
0x4cd0852c  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 509)
0x4cd085e0     0  movz x16, #0xa00000000
0x4cd085e4     4  sub csp, jssp, #0x10 (16)
0x4cd085e8     8  stp fp, lr, [jssp, #-16]!
0x4cd085ec    12  mov fp, jssp
0x4cd085f0    16  sub csp, jssp, #0x8 (8)
0x4cd085f4    20  sub jssp, jssp, #0x8 (8)
0x4cd085f8    24  stur x16, [fp, #-8]
0x4cd085fc    28  ldr x3, [fp]
0x4cd08600    32  ldur x4, [x3, #-8]
0x4cd08604    36  movz x16, #0xe00000000
0x4cd08608    40  cmp x4, x16
0x4cd0860c    44  csel x4, fp, x3, ne
0x4cd08610    48  ldr x3, [x4, #16]
0x4cd08614    52  tbnz w3, #0, #+0xd0 (addr 0x4cd086e4)
0x4cd08618    56  asr x5, x3, #32
0x4cd0861c    60  movz w16, #0x257f
0x4cd08620    64  cmp w5, w16, lsl #3
0x4cd08624    68  b.hs #+0x16c (addr 0x4cd08790)
0x4cd08628    72  cbz w5, #+0xc (addr 0x4cd08634)
0x4cd0862c    76  mov x3, x5
0x4cd08630    80  b #+0xc (addr 0x4cd0863c)
0x4cd08634    84  movz x3, #0x4
0x4cd08638    88  movz x5, #0x0
0x4cd0863c    92  lsl x4, x3, #32
0x4cd08640    96  lsl x5, x5, #32
0x4cd08644   100  lsl w6, w3, #3
0x4cd08648   104  add w6, w6, #0x10 (16)
0x4cd0864c   108  cmp w6, #0x96000 (614400)
0x4cd08650   112  b.hs #+0x148 (addr 0x4cd08798)
0x4cd08654   116  add w0, w6, #0x20 (32)
0x4cd08658   120  sxtw x0, w0
0x4cd0865c   124  movz x2, #0xd2c0
0x4cd08660   128  movk x2, #0x166d, lsl #16
0x4cd08664   132  ldp x7, x16, [x2]
0x4cd08668   136  adds x6, x7, x0
0x4cd0866c   140  ccmp x6, x16, #nzCv, lo
0x4cd08670   144  b.hi #+0x9c (addr 0x4cd0870c)
0x4cd08674   148  str x6, [x2]
0x4cd08678   152  orr x7, x7, #0x1
0x4cd0867c   156  movz w0, #0x0
0x4cd08680   160  stur x0, [x7, #31]
0x4cd08684   164  ldur x0, [x1, #23]
0x4cd08688   168  stur x0, [x7, #-1]
0x4cd0868c   172  ldr x0, pc+204 (addr 0x000000004cd08758)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd08690   176  stur x0, [x7, #7]
0x4cd08694   180  ldr x0, pc+204 (addr 0x000000004cd08760)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd08698   184  stur x0, [x7, #15]
0x4cd0869c   188  stur x5, [x7, #23]
0x4cd086a0   192  add x0, x7, #0x20 (32)
0x4cd086a4   196  ldr x1, pc+196 (addr 0x000000004cd08768)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd086a8   200  stur x1, [x0, #-1]
0x4cd086ac   204  stur x4, [x0, #7]
0x4cd086b0   208  stur x0, [x7, #15]
0x4cd086b4   212  cmp w3, #0x0 (0)
0x4cd086b8   216  b.le #+0x18 (addr 0x4cd086d0)
0x4cd086bc   220  sub w3, w3, #0x1 (1)
0x4cd086c0   224  ldr x1, pc+176 (addr 0x000000004cd08770)    ;; object: 0x21004519 <the hole>
0x4cd086c4   228  add x2, x0, #0xf (15)
0x4cd086c8   232  str x1, [x2, w3, sxtw #3]
0x4cd086cc   236  b #-0x18 (addr 0x4cd086b4)
0x4cd086d0   240  mov x0, x7
0x4cd086d4   244  mov jssp, fp
0x4cd086d8   248  ldp fp, lr, [jssp], #16
0x4cd086dc   252  add jssp, jssp, #0x10 (16)
0x4cd086e0   256  ret
0x4cd086e4   260  ldur x16, [x3, #-1]
0x4cd086e8   264  ldr x17, [x26, #120]
0x4cd086ec   268  cmp x16, x17
0x4cd086f0   272  b.ne #+0xb0 (addr 0x4cd087a0)
0x4cd086f4   276  ldur d29, [x3, #7]
0x4cd086f8   280  fcvtzs w5, d29
0x4cd086fc   284  scvtf d0, w5
0x4cd08700   288  fcmp d29, d0
0x4cd08704   292  b.ne #+0x9c (addr 0x4cd087a0)
0x4cd08708   296  b #-0xec (addr 0x4cd0861c)
0x4cd0870c   300  movz x7, #0x0
0x4cd08710   304  mov x16, lr
0x4cd08714   308  ldr x17, pc+100 (addr 0x000000004cd08778)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd08718   312  blr x17
0x4cd0871c   316  lsl x0, x0, #32
0x4cd08720   320  movz x10, #0x0
0x4cd08724   324  sub csp, jssp, #0x10 (16)
0x4cd08728   328  stp x10, x0, [jssp, #-16]!
0x4cd0872c   332  movz x0, #0x2
0x4cd08730   336  movz x1, #0x5b88
0x4cd08734   340  movk x1, #0xe2, lsl #16
0x4cd08738   344  ldr x16, pc+72 (addr 0x000000004cd08780)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0873c   348  blr x16
0x4cd08740   352  str x0, [jssp, #56]
0x4cd08744   356  ldr x16, pc+68 (addr 0x000000004cd08788)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd08748   360  blr x16
0x4cd0874c   364  b #-0xd0 (addr 0x4cd0867c)
0x4cd08750   368  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd08754   372  d63f03e0       constant
0x4cd08758   376  21004201       constant
0x4cd0875c   380  00000000       constant
0x4cd08760   384  21004201       constant
0x4cd08764   388  00000000       constant
0x4cd08768   392  2a804259       constant
0x4cd0876c   396  00000000       constant
0x4cd08770   400  21004519       constant
0x4cd08774   404  00000000       constant
0x4cd08778   408  4cd06820       constant
0x4cd0877c   412  00000000       constant
0x4cd08780   416  4cd06260       constant
0x4cd08784   420  00000000       constant
0x4cd08788   424  4cd068e0       constant
0x4cd0878c   428  00000000       constant
0x4cd08790   432  movz x16, #0x0
0x4cd08794   436  bl #+0x14 (addr 0x4cd087a8)
0x4cd08798   440  movz x16, #0x8
0x4cd0879c   444  bl #+0xc (addr 0x4cd087a8)
0x4cd087a0   448  movz x16, #0x10
0x4cd087a4   452  bl #+0x4 (addr 0x4cd087a8)
0x4cd087a8   456  ldr x17, pc+24 (addr 0x000000004cd087c0)    ;; lazy deoptimization bailout 0
0x4cd087ac   460  add x17, x17, x16
0x4cd087b0   464  br x17
0x4cd087b4   468  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd087b8   472  d63f03e0       constant
0x4cd087bc   476  d503201f       constant
0x4cd087c0   480  4cb06000       constant
0x4cd087c4   484  00000000       constant


Safepoints (size = 21)
0x4cd08740   352  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd0868c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd08694  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd086a4  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd086c0  embedded object  (0x21004519 <the hole>)
0x4cd08714  code target (STUB)  (0x4cd06820)
0x4cd08738  code target (STUB)  (0x4cd06260)
0x4cd08744  code target (STUB)  (0x4cd068e0)
0x4cd08750  constant pool (size 64)
0x4cd087a8  runtime entry
0x4cd087b4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArraySingleArgumentConstructorStub
name = ArraySingleArgumentConstructorStub_FAST_SMI_ELEMENTS_DISABLE_ALLOCATION_SITES
compiler = crankshaft
Instructions (size = 509)
0x4cd085e0     0  movz x16, #0xa00000000
0x4cd085e4     4  sub csp, jssp, #0x10 (16)
0x4cd085e8     8  stp fp, lr, [jssp, #-16]!
0x4cd085ec    12  mov fp, jssp
0x4cd085f0    16  sub csp, jssp, #0x8 (8)
0x4cd085f4    20  sub jssp, jssp, #0x8 (8)
0x4cd085f8    24  stur x16, [fp, #-8]
0x4cd085fc    28  ldr x3, [fp]
0x4cd08600    32  ldur x4, [x3, #-8]
0x4cd08604    36  movz x16, #0xe00000000
0x4cd08608    40  cmp x4, x16
0x4cd0860c    44  csel x4, fp, x3, ne
0x4cd08610    48  ldr x3, [x4, #16]
0x4cd08614    52  tbnz w3, #0, #+0xd0 (addr 0x4cd086e4)
0x4cd08618    56  asr x5, x3, #32
0x4cd0861c    60  movz w16, #0x257f
0x4cd08620    64  cmp w5, w16, lsl #3
0x4cd08624    68  b.hs #+0x16c (addr 0x4cd08790)
0x4cd08628    72  cbz w5, #+0xc (addr 0x4cd08634)
0x4cd0862c    76  mov x3, x5
0x4cd08630    80  b #+0xc (addr 0x4cd0863c)
0x4cd08634    84  movz x3, #0x4
0x4cd08638    88  movz x5, #0x0
0x4cd0863c    92  lsl x4, x3, #32
0x4cd08640    96  lsl x5, x5, #32
0x4cd08644   100  lsl w6, w3, #3
0x4cd08648   104  add w6, w6, #0x10 (16)
0x4cd0864c   108  cmp w6, #0x96000 (614400)
0x4cd08650   112  b.hs #+0x148 (addr 0x4cd08798)
0x4cd08654   116  add w0, w6, #0x20 (32)
0x4cd08658   120  sxtw x0, w0
0x4cd0865c   124  movz x2, #0xd2c0
0x4cd08660   128  movk x2, #0x166d, lsl #16
0x4cd08664   132  ldp x7, x16, [x2]
0x4cd08668   136  adds x6, x7, x0
0x4cd0866c   140  ccmp x6, x16, #nzCv, lo
0x4cd08670   144  b.hi #+0x9c (addr 0x4cd0870c)
0x4cd08674   148  str x6, [x2]
0x4cd08678   152  orr x7, x7, #0x1
0x4cd0867c   156  movz w0, #0x0
0x4cd08680   160  stur x0, [x7, #31]
0x4cd08684   164  ldur x0, [x1, #23]
0x4cd08688   168  stur x0, [x7, #-1]
0x4cd0868c   172  ldr x0, pc+204 (addr 0x000000004cd08758)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd08690   176  stur x0, [x7, #7]
0x4cd08694   180  ldr x0, pc+204 (addr 0x000000004cd08760)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd08698   184  stur x0, [x7, #15]
0x4cd0869c   188  stur x5, [x7, #23]
0x4cd086a0   192  add x0, x7, #0x20 (32)
0x4cd086a4   196  ldr x1, pc+196 (addr 0x000000004cd08768)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd086a8   200  stur x1, [x0, #-1]
0x4cd086ac   204  stur x4, [x0, #7]
0x4cd086b0   208  stur x0, [x7, #15]
0x4cd086b4   212  cmp w3, #0x0 (0)
0x4cd086b8   216  b.le #+0x18 (addr 0x4cd086d0)
0x4cd086bc   220  sub w3, w3, #0x1 (1)
0x4cd086c0   224  ldr x1, pc+176 (addr 0x000000004cd08770)    ;; object: 0x21004519 <the hole>
0x4cd086c4   228  add x2, x0, #0xf (15)
0x4cd086c8   232  str x1, [x2, w3, sxtw #3]
0x4cd086cc   236  b #-0x18 (addr 0x4cd086b4)
0x4cd086d0   240  mov x0, x7
0x4cd086d4   244  mov jssp, fp
0x4cd086d8   248  ldp fp, lr, [jssp], #16
0x4cd086dc   252  add jssp, jssp, #0x10 (16)
0x4cd086e0   256  ret
0x4cd086e4   260  ldur x16, [x3, #-1]
0x4cd086e8   264  ldr x17, [x26, #120]
0x4cd086ec   268  cmp x16, x17
0x4cd086f0   272  b.ne #+0xb0 (addr 0x4cd087a0)
0x4cd086f4   276  ldur d29, [x3, #7]
0x4cd086f8   280  fcvtzs w5, d29
0x4cd086fc   284  scvtf d0, w5
0x4cd08700   288  fcmp d29, d0
0x4cd08704   292  b.ne #+0x9c (addr 0x4cd087a0)
0x4cd08708   296  b #-0xec (addr 0x4cd0861c)
0x4cd0870c   300  movz x7, #0x0
0x4cd08710   304  mov x16, lr
0x4cd08714   308  ldr x17, pc+100 (addr 0x000000004cd08778)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd08718   312  blr x17
0x4cd0871c   316  lsl x0, x0, #32
0x4cd08720   320  movz x10, #0x0
0x4cd08724   324  sub csp, jssp, #0x10 (16)
0x4cd08728   328  stp x10, x0, [jssp, #-16]!
0x4cd0872c   332  movz x0, #0x2
0x4cd08730   336  movz x1, #0x5b88
0x4cd08734   340  movk x1, #0xe2, lsl #16
0x4cd08738   344  ldr x16, pc+72 (addr 0x000000004cd08780)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0873c   348  blr x16
0x4cd08740   352  str x0, [jssp, #56]
0x4cd08744   356  ldr x16, pc+68 (addr 0x000000004cd08788)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd08748   360  blr x16
0x4cd0874c   364  b #-0xd0 (addr 0x4cd0867c)
0x4cd08750   368  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd08754   372  d63f03e0       constant
0x4cd08758   376  21004201       constant
0x4cd0875c   380  00000000       constant
0x4cd08760   384  21004201       constant
0x4cd08764   388  00000000       constant
0x4cd08768   392  2a804259       constant
0x4cd0876c   396  00000000       constant
0x4cd08770   400  21004519       constant
0x4cd08774   404  00000000       constant
0x4cd08778   408  4cd06820       constant
0x4cd0877c   412  00000000       constant
0x4cd08780   416  4cd06260       constant
0x4cd08784   420  00000000       constant
0x4cd08788   424  4cd068e0       constant
0x4cd0878c   428  00000000       constant
0x4cd08790   432  movz x16, #0x0
0x4cd08794   436  bl #+0x14 (addr 0x4cd087a8)
0x4cd08798   440  movz x16, #0x8
0x4cd0879c   444  bl #+0xc (addr 0x4cd087a8)
0x4cd087a0   448  movz x16, #0x10
0x4cd087a4   452  bl #+0x4 (addr 0x4cd087a8)
0x4cd087a8   456  ldr x17, pc+24 (addr 0x000000004cd087c0)    ;; lazy deoptimization bailout 0
0x4cd087ac   460  add x17, x17, x16
0x4cd087b0   464  br x17
0x4cd087b4   468  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd087b8   472  d63f03e0       constant
0x4cd087bc   476  d503201f       constant
0x4cd087c0   480  4cb06000       constant
0x4cd087c4   484  00000000       constant


Safepoints (size = 21)
0x4cd08740   352  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd0868c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd08694  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd086a4  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd086c0  embedded object  (0x21004519 <the hole>)
0x4cd08714  code target (STUB)  (0x4cd06820)
0x4cd08738  code target (STUB)  (0x4cd06260)
0x4cd08744  code target (STUB)  (0x4cd068e0)
0x4cd08750  constant pool (size 64)
0x4cd087a8  runtime entry
0x4cd087b4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 722)
0x4cd08840     0  movz x16, #0xa00000000
0x4cd08844     4  sub csp, jssp, #0x10 (16)
0x4cd08848     8  stp fp, lr, [jssp, #-16]!
0x4cd0884c    12  mov fp, jssp
0x4cd08850    16  sub csp, jssp, #0x8 (8)
0x4cd08854    20  sub jssp, jssp, #0x8 (8)
0x4cd08858    24  stur x16, [fp, #-8]
0x4cd0885c    28  ldr x3, [fp]
0x4cd08860    32  ldur x4, [x3, #-8]
0x4cd08864    36  movz x16, #0xe00000000
0x4cd08868    40  cmp x4, x16
0x4cd0886c    44  csel x4, fp, x3, ne
0x4cd08870    48  ldr x3, [x4, #16]
0x4cd08874    52  tbnz w3, #0, #+0x128 (addr 0x4cd0899c)
0x4cd08878    56  asr x5, x3, #32
0x4cd0887c    60  movz w16, #0x257f
0x4cd08880    64  cmp w5, w16, lsl #3
0x4cd08884    68  b.hs #+0x234 (addr 0x4cd08ab8)
0x4cd08888    72  cbz w5, #+0xc (addr 0x4cd08894)
0x4cd0888c    76  mov x3, x5
0x4cd08890    80  b #+0xc (addr 0x4cd0889c)
0x4cd08894    84  movz x3, #0x4
0x4cd08898    88  movz x5, #0x0
0x4cd0889c    92  lsl x4, x3, #32
0x4cd088a0    96  lsl x5, x5, #32
0x4cd088a4   100  lsl w6, w3, #3
0x4cd088a8   104  add w6, w6, #0x10 (16)
0x4cd088ac   108  cmp w6, #0x96000 (614400)
0x4cd088b0   112  b.hs #+0x210 (addr 0x4cd08ac0)
0x4cd088b4   116  movz x7, #0xd2c0
0x4cd088b8   120  movk x7, #0x166d, lsl #16
0x4cd088bc   124  ldp x8, x0, [x7]
0x4cd088c0   128  adds x16, x8, #0x30 (48)
0x4cd088c4   132  ccmp x16, x0, #nzCv, lo
0x4cd088c8   136  b.hi #+0xfc (addr 0x4cd089c4)
0x4cd088cc   140  str x16, [x7]
0x4cd088d0   144  orr x8, x8, #0x1
0x4cd088d4   148  ldur x0, [x1, #39]
0x4cd088d8   152  ldur x0, [x0, #39]
0x4cd088dc   156  movz x16, #0x17f
0x4cd088e0   160  ldr x0, [x0, x16]
0x4cd088e4   164  stur x0, [x8, #-1]
0x4cd088e8   168  ldr x0, pc+368 (addr 0x000000004cd08a58)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd088ec   172  stur x0, [x8, #7]
0x4cd088f0   176  ldr x0, pc+368 (addr 0x000000004cd08a60)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd088f4   180  stur x0, [x8, #15]
0x4cd088f8   184  stur x5, [x8, #23]
0x4cd088fc   188  add x0, x8, #0x20 (32)
0x4cd08900   192  ldr x1, pc+360 (addr 0x000000004cd08a68)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd08904   196  stur x1, [x0, #-1]
0x4cd08908   200  stur x2, [x0, #7]
0x4cd0890c   204  ldur w0, [x2, #35]
0x4cd08910   208  add w0, w0, #0x1 (1)
0x4cd08914   212  lsl x0, x0, #32
0x4cd08918   216  stur x0, [x2, #31]
0x4cd0891c   220  sxtw x6, w6
0x4cd08920   224  movz x0, #0xd2c0
0x4cd08924   228  movk x0, #0x166d, lsl #16
0x4cd08928   232  ldp x2, x16, [x0]
0x4cd0892c   236  adds x1, x2, x6
0x4cd08930   240  ccmp x1, x16, #nzCv, lo
0x4cd08934   244  b.hi #+0xd4 (addr 0x4cd08a08)
0x4cd08938   248  str x1, [x0]
0x4cd0893c   252  orr x2, x2, #0x1
0x4cd08940   256  ldr x0, pc+304 (addr 0x000000004cd08a70)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd08944   260  stur x0, [x2, #-1]
0x4cd08948   264  stur x4, [x2, #7]
0x4cd0894c   268  mov x0, x2
0x4cd08950   272  stur x0, [x8, #15]
0x4cd08954   276  add x1, x8, #0xf (15)
0x4cd08958   280  and x0, x8, #0xfffffffffff00000
0x4cd0895c   284  ldr x0, [x0, #8]
0x4cd08960   288  tbz w0, #2, #+0xc (addr 0x4cd0896c)
0x4cd08964   292  ldr x16, pc+276 (addr 0x000000004cd08a78)    ;; code: STUB, RecordWriteStub, minor: 66568
0x4cd08968   296  blr x16
0x4cd0896c   300  cmp w3, #0x0 (0)
0x4cd08970   304  b.le #+0x18 (addr 0x4cd08988)
0x4cd08974   308  sub w3, w3, #0x1 (1)
0x4cd08978   312  ldr x0, pc+264 (addr 0x000000004cd08a80)    ;; object: 0x21004519 <the hole>
0x4cd0897c   316  add x1, x2, #0xf (15)
0x4cd08980   320  str x0, [x1, w3, sxtw #3]
0x4cd08984   324  b #-0x18 (addr 0x4cd0896c)
0x4cd08988   328  mov x0, x8
0x4cd0898c   332  mov jssp, fp
0x4cd08990   336  ldp fp, lr, [jssp], #16
0x4cd08994   340  add jssp, jssp, #0x10 (16)
0x4cd08998   344  ret
0x4cd0899c   348  ldur x16, [x3, #-1]
0x4cd089a0   352  ldr x17, [x26, #120]
0x4cd089a4   356  cmp x16, x17
0x4cd089a8   360  b.ne #+0x120 (addr 0x4cd08ac8)
0x4cd089ac   364  ldur d29, [x3, #7]
0x4cd089b0   368  fcvtzs w5, d29
0x4cd089b4   372  scvtf d0, w5
0x4cd089b8   376  fcmp d29, d0
0x4cd089bc   380  b.ne #+0x10c (addr 0x4cd08ac8)
0x4cd089c0   384  b #-0x144 (addr 0x4cd0887c)
0x4cd089c4   388  movz x8, #0x0
0x4cd089c8   392  mov x16, lr
0x4cd089cc   396  ldr x17, pc+188 (addr 0x000000004cd08a88)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd089d0   400  blr x17
0x4cd089d4   404  movz x0, #0x3000000000
0x4cd089d8   408  movz x10, #0x0
0x4cd089dc   412  sub csp, jssp, #0x10 (16)
0x4cd089e0   416  stp x10, x0, [jssp, #-16]!
0x4cd089e4   420  movz x0, #0x2
0x4cd089e8   424  movz x1, #0x5b88
0x4cd089ec   428  movk x1, #0xe2, lsl #16
0x4cd089f0   432  ldr x16, pc+160 (addr 0x000000004cd08a90)    ;; code: STUB, CEntryStub, minor: 5
0x4cd089f4   436  blr x16
0x4cd089f8   440  str x0, [jssp, #64]
0x4cd089fc   444  ldr x16, pc+156 (addr 0x000000004cd08a98)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd08a00   448  blr x16
0x4cd08a04   452  b #-0x130 (addr 0x4cd088d4)
0x4cd08a08   456  movz x2, #0x0
0x4cd08a0c   460  mov x16, lr
0x4cd08a10   464  ldr x17, pc+144 (addr 0x000000004cd08aa0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd08a14   468  blr x17
0x4cd08a18   472  lsl x0, x6, #32
0x4cd08a1c   476  movz x10, #0x0
0x4cd08a20   480  sub csp, jssp, #0x10 (16)
0x4cd08a24   484  stp x10, x0, [jssp, #-16]!
0x4cd08a28   488  movz x0, #0x2
0x4cd08a2c   492  movz x1, #0x5b88
0x4cd08a30   496  movk x1, #0xe2, lsl #16
0x4cd08a34   500  ldr x16, pc+116 (addr 0x000000004cd08aa8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd08a38   504  blr x16
0x4cd08a3c   508  str x0, [jssp, #16]
0x4cd08a40   512  ldr x16, pc+112 (addr 0x000000004cd08ab0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd08a44   516  blr x16
0x4cd08a48   520  b #-0x108 (addr 0x4cd08940)
0x4cd08a4c   524  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0x4cd08a50   528  d63f03e0       constant
0x4cd08a54   532  d503201f       constant
0x4cd08a58   536  21004201       constant
0x4cd08a5c   540  00000000       constant
0x4cd08a60   544  21004201       constant
0x4cd08a64   548  00000000       constant
0x4cd08a68   552  2a805d81       constant
0x4cd08a6c   556  00000000       constant
0x4cd08a70   560  2a804259       constant
0x4cd08a74   564  00000000       constant
0x4cd08a78   568  4cd07ac0       constant
0x4cd08a7c   572  00000000       constant
0x4cd08a80   576  21004519       constant
0x4cd08a84   580  00000000       constant
0x4cd08a88   584  4cd06820       constant
0x4cd08a8c   588  00000000       constant
0x4cd08a90   592  4cd06260       constant
0x4cd08a94   596  00000000       constant
0x4cd08a98   600  4cd068e0       constant
0x4cd08a9c   604  00000000       constant
0x4cd08aa0   608  4cd06820       constant
0x4cd08aa4   612  00000000       constant
0x4cd08aa8   616  4cd06260       constant
0x4cd08aac   620  00000000       constant
0x4cd08ab0   624  4cd068e0       constant
0x4cd08ab4   628  00000000       constant
0x4cd08ab8   632  movz x16, #0x0
0x4cd08abc   636  bl #+0x14 (addr 0x4cd08ad0)
0x4cd08ac0   640  movz x16, #0x8
0x4cd08ac4   644  bl #+0xc (addr 0x4cd08ad0)
0x4cd08ac8   648  movz x16, #0x10
0x4cd08acc   652  bl #+0x4 (addr 0x4cd08ad0)
0x4cd08ad0   656  ldr x17, pc+24 (addr 0x000000004cd08ae8)    ;; lazy deoptimization bailout 0
0x4cd08ad4   660  add x17, x17, x16
0x4cd08ad8   664  br x17
0x4cd08adc   668  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd08ae0   672  d63f03e0       constant
0x4cd08ae4   676  d503201f       constant
0x4cd08ae8   680  4cb06000       constant
0x4cd08aec   684  00000000       constant


Safepoints (size = 34)
0x4cd089f8   440  000 | x1 | x2 | x8 | x27 (sp -> fp)  <none> argc: 2
0x4cd08a3c   508  000 | x2 | x8 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0x4cd088e8  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd088f0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd08900  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd08940  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd08964  code target (STUB)  (0x4cd07ac0)
0x4cd08978  embedded object  (0x21004519 <the hole>)
0x4cd089cc  code target (STUB)  (0x4cd06820)
0x4cd089f0  code target (STUB)  (0x4cd06260)
0x4cd089fc  code target (STUB)  (0x4cd068e0)
0x4cd08a10  code target (STUB)  (0x4cd06820)
0x4cd08a34  code target (STUB)  (0x4cd06260)
0x4cd08a40  code target (STUB)  (0x4cd068e0)
0x4cd08a4c  constant pool (size 108)
0x4cd08ad0  runtime entry
0x4cd08adc  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArraySingleArgumentConstructorStub
name = ArraySingleArgumentConstructorStub_FAST_HOLEY_SMI_ELEMENTS
compiler = crankshaft
Instructions (size = 722)
0x4cd08840     0  movz x16, #0xa00000000
0x4cd08844     4  sub csp, jssp, #0x10 (16)
0x4cd08848     8  stp fp, lr, [jssp, #-16]!
0x4cd0884c    12  mov fp, jssp
0x4cd08850    16  sub csp, jssp, #0x8 (8)
0x4cd08854    20  sub jssp, jssp, #0x8 (8)
0x4cd08858    24  stur x16, [fp, #-8]
0x4cd0885c    28  ldr x3, [fp]
0x4cd08860    32  ldur x4, [x3, #-8]
0x4cd08864    36  movz x16, #0xe00000000
0x4cd08868    40  cmp x4, x16
0x4cd0886c    44  csel x4, fp, x3, ne
0x4cd08870    48  ldr x3, [x4, #16]
0x4cd08874    52  tbnz w3, #0, #+0x128 (addr 0x4cd0899c)
0x4cd08878    56  asr x5, x3, #32
0x4cd0887c    60  movz w16, #0x257f
0x4cd08880    64  cmp w5, w16, lsl #3
0x4cd08884    68  b.hs #+0x234 (addr 0x4cd08ab8)
0x4cd08888    72  cbz w5, #+0xc (addr 0x4cd08894)
0x4cd0888c    76  mov x3, x5
0x4cd08890    80  b #+0xc (addr 0x4cd0889c)
0x4cd08894    84  movz x3, #0x4
0x4cd08898    88  movz x5, #0x0
0x4cd0889c    92  lsl x4, x3, #32
0x4cd088a0    96  lsl x5, x5, #32
0x4cd088a4   100  lsl w6, w3, #3
0x4cd088a8   104  add w6, w6, #0x10 (16)
0x4cd088ac   108  cmp w6, #0x96000 (614400)
0x4cd088b0   112  b.hs #+0x210 (addr 0x4cd08ac0)
0x4cd088b4   116  movz x7, #0xd2c0
0x4cd088b8   120  movk x7, #0x166d, lsl #16
0x4cd088bc   124  ldp x8, x0, [x7]
0x4cd088c0   128  adds x16, x8, #0x30 (48)
0x4cd088c4   132  ccmp x16, x0, #nzCv, lo
0x4cd088c8   136  b.hi #+0xfc (addr 0x4cd089c4)
0x4cd088cc   140  str x16, [x7]
0x4cd088d0   144  orr x8, x8, #0x1
0x4cd088d4   148  ldur x0, [x1, #39]
0x4cd088d8   152  ldur x0, [x0, #39]
0x4cd088dc   156  movz x16, #0x17f
0x4cd088e0   160  ldr x0, [x0, x16]
0x4cd088e4   164  stur x0, [x8, #-1]
0x4cd088e8   168  ldr x0, pc+368 (addr 0x000000004cd08a58)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd088ec   172  stur x0, [x8, #7]
0x4cd088f0   176  ldr x0, pc+368 (addr 0x000000004cd08a60)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd088f4   180  stur x0, [x8, #15]
0x4cd088f8   184  stur x5, [x8, #23]
0x4cd088fc   188  add x0, x8, #0x20 (32)
0x4cd08900   192  ldr x1, pc+360 (addr 0x000000004cd08a68)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd08904   196  stur x1, [x0, #-1]
0x4cd08908   200  stur x2, [x0, #7]
0x4cd0890c   204  ldur w0, [x2, #35]
0x4cd08910   208  add w0, w0, #0x1 (1)
0x4cd08914   212  lsl x0, x0, #32
0x4cd08918   216  stur x0, [x2, #31]
0x4cd0891c   220  sxtw x6, w6
0x4cd08920   224  movz x0, #0xd2c0
0x4cd08924   228  movk x0, #0x166d, lsl #16
0x4cd08928   232  ldp x2, x16, [x0]
0x4cd0892c   236  adds x1, x2, x6
0x4cd08930   240  ccmp x1, x16, #nzCv, lo
0x4cd08934   244  b.hi #+0xd4 (addr 0x4cd08a08)
0x4cd08938   248  str x1, [x0]
0x4cd0893c   252  orr x2, x2, #0x1
0x4cd08940   256  ldr x0, pc+304 (addr 0x000000004cd08a70)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd08944   260  stur x0, [x2, #-1]
0x4cd08948   264  stur x4, [x2, #7]
0x4cd0894c   268  mov x0, x2
0x4cd08950   272  stur x0, [x8, #15]
0x4cd08954   276  add x1, x8, #0xf (15)
0x4cd08958   280  and x0, x8, #0xfffffffffff00000
0x4cd0895c   284  ldr x0, [x0, #8]
0x4cd08960   288  tbz w0, #2, #+0xc (addr 0x4cd0896c)
0x4cd08964   292  ldr x16, pc+276 (addr 0x000000004cd08a78)    ;; code: STUB, RecordWriteStub, minor: 66568
0x4cd08968   296  blr x16
0x4cd0896c   300  cmp w3, #0x0 (0)
0x4cd08970   304  b.le #+0x18 (addr 0x4cd08988)
0x4cd08974   308  sub w3, w3, #0x1 (1)
0x4cd08978   312  ldr x0, pc+264 (addr 0x000000004cd08a80)    ;; object: 0x21004519 <the hole>
0x4cd0897c   316  add x1, x2, #0xf (15)
0x4cd08980   320  str x0, [x1, w3, sxtw #3]
0x4cd08984   324  b #-0x18 (addr 0x4cd0896c)
0x4cd08988   328  mov x0, x8
0x4cd0898c   332  mov jssp, fp
0x4cd08990   336  ldp fp, lr, [jssp], #16
0x4cd08994   340  add jssp, jssp, #0x10 (16)
0x4cd08998   344  ret
0x4cd0899c   348  ldur x16, [x3, #-1]
0x4cd089a0   352  ldr x17, [x26, #120]
0x4cd089a4   356  cmp x16, x17
0x4cd089a8   360  b.ne #+0x120 (addr 0x4cd08ac8)
0x4cd089ac   364  ldur d29, [x3, #7]
0x4cd089b0   368  fcvtzs w5, d29
0x4cd089b4   372  scvtf d0, w5
0x4cd089b8   376  fcmp d29, d0
0x4cd089bc   380  b.ne #+0x10c (addr 0x4cd08ac8)
0x4cd089c0   384  b #-0x144 (addr 0x4cd0887c)
0x4cd089c4   388  movz x8, #0x0
0x4cd089c8   392  mov x16, lr
0x4cd089cc   396  ldr x17, pc+188 (addr 0x000000004cd08a88)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd089d0   400  blr x17
0x4cd089d4   404  movz x0, #0x3000000000
0x4cd089d8   408  movz x10, #0x0
0x4cd089dc   412  sub csp, jssp, #0x10 (16)
0x4cd089e0   416  stp x10, x0, [jssp, #-16]!
0x4cd089e4   420  movz x0, #0x2
0x4cd089e8   424  movz x1, #0x5b88
0x4cd089ec   428  movk x1, #0xe2, lsl #16
0x4cd089f0   432  ldr x16, pc+160 (addr 0x000000004cd08a90)    ;; code: STUB, CEntryStub, minor: 5
0x4cd089f4   436  blr x16
0x4cd089f8   440  str x0, [jssp, #64]
0x4cd089fc   444  ldr x16, pc+156 (addr 0x000000004cd08a98)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd08a00   448  blr x16
0x4cd08a04   452  b #-0x130 (addr 0x4cd088d4)
0x4cd08a08   456  movz x2, #0x0
0x4cd08a0c   460  mov x16, lr
0x4cd08a10   464  ldr x17, pc+144 (addr 0x000000004cd08aa0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd08a14   468  blr x17
0x4cd08a18   472  lsl x0, x6, #32
0x4cd08a1c   476  movz x10, #0x0
0x4cd08a20   480  sub csp, jssp, #0x10 (16)
0x4cd08a24   484  stp x10, x0, [jssp, #-16]!
0x4cd08a28   488  movz x0, #0x2
0x4cd08a2c   492  movz x1, #0x5b88
0x4cd08a30   496  movk x1, #0xe2, lsl #16
0x4cd08a34   500  ldr x16, pc+116 (addr 0x000000004cd08aa8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd08a38   504  blr x16
0x4cd08a3c   508  str x0, [jssp, #16]
0x4cd08a40   512  ldr x16, pc+112 (addr 0x000000004cd08ab0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd08a44   516  blr x16
0x4cd08a48   520  b #-0x108 (addr 0x4cd08940)
0x4cd08a4c   524  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0x4cd08a50   528  d63f03e0       constant
0x4cd08a54   532  d503201f       constant
0x4cd08a58   536  21004201       constant
0x4cd08a5c   540  00000000       constant
0x4cd08a60   544  21004201       constant
0x4cd08a64   548  00000000       constant
0x4cd08a68   552  2a805d81       constant
0x4cd08a6c   556  00000000       constant
0x4cd08a70   560  2a804259       constant
0x4cd08a74   564  00000000       constant
0x4cd08a78   568  4cd07ac0       constant
0x4cd08a7c   572  00000000       constant
0x4cd08a80   576  21004519       constant
0x4cd08a84   580  00000000       constant
0x4cd08a88   584  4cd06820       constant
0x4cd08a8c   588  00000000       constant
0x4cd08a90   592  4cd06260       constant
0x4cd08a94   596  00000000       constant
0x4cd08a98   600  4cd068e0       constant
0x4cd08a9c   604  00000000       constant
0x4cd08aa0   608  4cd06820       constant
0x4cd08aa4   612  00000000       constant
0x4cd08aa8   616  4cd06260       constant
0x4cd08aac   620  00000000       constant
0x4cd08ab0   624  4cd068e0       constant
0x4cd08ab4   628  00000000       constant
0x4cd08ab8   632  movz x16, #0x0
0x4cd08abc   636  bl #+0x14 (addr 0x4cd08ad0)
0x4cd08ac0   640  movz x16, #0x8
0x4cd08ac4   644  bl #+0xc (addr 0x4cd08ad0)
0x4cd08ac8   648  movz x16, #0x10
0x4cd08acc   652  bl #+0x4 (addr 0x4cd08ad0)
0x4cd08ad0   656  ldr x17, pc+24 (addr 0x000000004cd08ae8)    ;; lazy deoptimization bailout 0
0x4cd08ad4   660  add x17, x17, x16
0x4cd08ad8   664  br x17
0x4cd08adc   668  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd08ae0   672  d63f03e0       constant
0x4cd08ae4   676  d503201f       constant
0x4cd08ae8   680  4cb06000       constant
0x4cd08aec   684  00000000       constant


Safepoints (size = 34)
0x4cd089f8   440  000 | x1 | x2 | x8 | x27 (sp -> fp)  <none> argc: 2
0x4cd08a3c   508  000 | x2 | x8 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0x4cd088e8  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd088f0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd08900  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd08940  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd08964  code target (STUB)  (0x4cd07ac0)
0x4cd08978  embedded object  (0x21004519 <the hole>)
0x4cd089cc  code target (STUB)  (0x4cd06820)
0x4cd089f0  code target (STUB)  (0x4cd06260)
0x4cd089fc  code target (STUB)  (0x4cd068e0)
0x4cd08a10  code target (STUB)  (0x4cd06820)
0x4cd08a34  code target (STUB)  (0x4cd06260)
0x4cd08a40  code target (STUB)  (0x4cd068e0)
0x4cd08a4c  constant pool (size 108)
0x4cd08ad0  runtime entry
0x4cd08adc  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 525)
0x4cd08b80     0  movz x16, #0xa00000000
0x4cd08b84     4  sub csp, jssp, #0x10 (16)
0x4cd08b88     8  stp fp, lr, [jssp, #-16]!
0x4cd08b8c    12  mov fp, jssp
0x4cd08b90    16  sub csp, jssp, #0x8 (8)
0x4cd08b94    20  sub jssp, jssp, #0x8 (8)
0x4cd08b98    24  stur x16, [fp, #-8]
0x4cd08b9c    28  ldr x3, [fp]
0x4cd08ba0    32  ldur x4, [x3, #-8]
0x4cd08ba4    36  movz x16, #0xe00000000
0x4cd08ba8    40  cmp x4, x16
0x4cd08bac    44  csel x4, fp, x3, ne
0x4cd08bb0    48  ldr x3, [x4, #16]
0x4cd08bb4    52  tbnz w3, #0, #+0xdc (addr 0x4cd08c90)
0x4cd08bb8    56  asr x5, x3, #32
0x4cd08bbc    60  movz w16, #0x257f
0x4cd08bc0    64  cmp w5, w16, lsl #3
0x4cd08bc4    68  b.hs #+0x17c (addr 0x4cd08d40)
0x4cd08bc8    72  cbz w5, #+0xc (addr 0x4cd08bd4)
0x4cd08bcc    76  mov x3, x5
0x4cd08bd0    80  b #+0xc (addr 0x4cd08bdc)
0x4cd08bd4    84  movz x3, #0x4
0x4cd08bd8    88  movz x5, #0x0
0x4cd08bdc    92  lsl x4, x3, #32
0x4cd08be0    96  lsl x5, x5, #32
0x4cd08be4   100  lsl w6, w3, #3
0x4cd08be8   104  add w6, w6, #0x10 (16)
0x4cd08bec   108  cmp w6, #0x96000 (614400)
0x4cd08bf0   112  b.hs #+0x158 (addr 0x4cd08d48)
0x4cd08bf4   116  add w0, w6, #0x20 (32)
0x4cd08bf8   120  sxtw x0, w0
0x4cd08bfc   124  movz x2, #0xd2c0
0x4cd08c00   128  movk x2, #0x166d, lsl #16
0x4cd08c04   132  ldp x7, x16, [x2]
0x4cd08c08   136  adds x6, x7, x0
0x4cd08c0c   140  ccmp x6, x16, #nzCv, lo
0x4cd08c10   144  b.hi #+0xa8 (addr 0x4cd08cb8)
0x4cd08c14   148  str x6, [x2]
0x4cd08c18   152  orr x7, x7, #0x1
0x4cd08c1c   156  movz w0, #0x0
0x4cd08c20   160  stur x0, [x7, #31]
0x4cd08c24   164  ldur x0, [x1, #39]
0x4cd08c28   168  ldur x0, [x0, #39]
0x4cd08c2c   172  movz x16, #0x17f
0x4cd08c30   176  ldr x0, [x0, x16]
0x4cd08c34   180  stur x0, [x7, #-1]
0x4cd08c38   184  ldr x0, pc+208 (addr 0x000000004cd08d08)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd08c3c   188  stur x0, [x7, #7]
0x4cd08c40   192  ldr x0, pc+208 (addr 0x000000004cd08d10)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd08c44   196  stur x0, [x7, #15]
0x4cd08c48   200  stur x5, [x7, #23]
0x4cd08c4c   204  add x0, x7, #0x20 (32)
0x4cd08c50   208  ldr x1, pc+200 (addr 0x000000004cd08d18)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd08c54   212  stur x1, [x0, #-1]
0x4cd08c58   216  stur x4, [x0, #7]
0x4cd08c5c   220  stur x0, [x7, #15]
0x4cd08c60   224  cmp w3, #0x0 (0)
0x4cd08c64   228  b.le #+0x18 (addr 0x4cd08c7c)
0x4cd08c68   232  sub w3, w3, #0x1 (1)
0x4cd08c6c   236  ldr x1, pc+180 (addr 0x000000004cd08d20)    ;; object: 0x21004519 <the hole>
0x4cd08c70   240  add x2, x0, #0xf (15)
0x4cd08c74   244  str x1, [x2, w3, sxtw #3]
0x4cd08c78   248  b #-0x18 (addr 0x4cd08c60)
0x4cd08c7c   252  mov x0, x7
0x4cd08c80   256  mov jssp, fp
0x4cd08c84   260  ldp fp, lr, [jssp], #16
0x4cd08c88   264  add jssp, jssp, #0x10 (16)
0x4cd08c8c   268  ret
0x4cd08c90   272  ldur x16, [x3, #-1]
0x4cd08c94   276  ldr x17, [x26, #120]
0x4cd08c98   280  cmp x16, x17
0x4cd08c9c   284  b.ne #+0xb4 (addr 0x4cd08d50)
0x4cd08ca0   288  ldur d29, [x3, #7]
0x4cd08ca4   292  fcvtzs w5, d29
0x4cd08ca8   296  scvtf d0, w5
0x4cd08cac   300  fcmp d29, d0
0x4cd08cb0   304  b.ne #+0xa0 (addr 0x4cd08d50)
0x4cd08cb4   308  b #-0xf8 (addr 0x4cd08bbc)
0x4cd08cb8   312  movz x7, #0x0
0x4cd08cbc   316  mov x16, lr
0x4cd08cc0   320  ldr x17, pc+104 (addr 0x000000004cd08d28)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd08cc4   324  blr x17
0x4cd08cc8   328  lsl x0, x0, #32
0x4cd08ccc   332  movz x10, #0x0
0x4cd08cd0   336  sub csp, jssp, #0x10 (16)
0x4cd08cd4   340  stp x10, x0, [jssp, #-16]!
0x4cd08cd8   344  movz x0, #0x2
0x4cd08cdc   348  movz x1, #0x5b88
0x4cd08ce0   352  movk x1, #0xe2, lsl #16
0x4cd08ce4   356  ldr x16, pc+76 (addr 0x000000004cd08d30)    ;; code: STUB, CEntryStub, minor: 5
0x4cd08ce8   360  blr x16
0x4cd08cec   364  str x0, [jssp, #56]
0x4cd08cf0   368  ldr x16, pc+72 (addr 0x000000004cd08d38)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd08cf4   372  blr x16
0x4cd08cf8   376  b #-0xdc (addr 0x4cd08c1c)
0x4cd08cfc   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd08d00   384  d63f03e0       constant
0x4cd08d04   388  d503201f       constant
0x4cd08d08   392  21004201       constant
0x4cd08d0c   396  00000000       constant
0x4cd08d10   400  21004201       constant
0x4cd08d14   404  00000000       constant
0x4cd08d18   408  2a804259       constant
0x4cd08d1c   412  00000000       constant
0x4cd08d20   416  21004519       constant
0x4cd08d24   420  00000000       constant
0x4cd08d28   424  4cd06820       constant
0x4cd08d2c   428  00000000       constant
0x4cd08d30   432  4cd06260       constant
0x4cd08d34   436  00000000       constant
0x4cd08d38   440  4cd068e0       constant
0x4cd08d3c   444  00000000       constant
0x4cd08d40   448  movz x16, #0x0
0x4cd08d44   452  bl #+0x14 (addr 0x4cd08d58)
0x4cd08d48   456  movz x16, #0x8
0x4cd08d4c   460  bl #+0xc (addr 0x4cd08d58)
0x4cd08d50   464  movz x16, #0x10
0x4cd08d54   468  bl #+0x4 (addr 0x4cd08d58)
0x4cd08d58   472  ldr x17, pc+24 (addr 0x000000004cd08d70)    ;; lazy deoptimization bailout 0
0x4cd08d5c   476  add x17, x17, x16
0x4cd08d60   480  br x17
0x4cd08d64   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd08d68   488  d63f03e0       constant
0x4cd08d6c   492  d503201f       constant
0x4cd08d70   496  4cb06000       constant
0x4cd08d74   500  00000000       constant


Safepoints (size = 21)
0x4cd08cec   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd08c38  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd08c40  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd08c50  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd08c6c  embedded object  (0x21004519 <the hole>)
0x4cd08cc0  code target (STUB)  (0x4cd06820)
0x4cd08ce4  code target (STUB)  (0x4cd06260)
0x4cd08cf0  code target (STUB)  (0x4cd068e0)
0x4cd08cfc  constant pool (size 68)
0x4cd08d58  runtime entry
0x4cd08d64  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArraySingleArgumentConstructorStub
name = ArraySingleArgumentConstructorStub_FAST_HOLEY_SMI_ELEMENTS_DISABLE_ALLOCATION_SITES
compiler = crankshaft
Instructions (size = 525)
0x4cd08b80     0  movz x16, #0xa00000000
0x4cd08b84     4  sub csp, jssp, #0x10 (16)
0x4cd08b88     8  stp fp, lr, [jssp, #-16]!
0x4cd08b8c    12  mov fp, jssp
0x4cd08b90    16  sub csp, jssp, #0x8 (8)
0x4cd08b94    20  sub jssp, jssp, #0x8 (8)
0x4cd08b98    24  stur x16, [fp, #-8]
0x4cd08b9c    28  ldr x3, [fp]
0x4cd08ba0    32  ldur x4, [x3, #-8]
0x4cd08ba4    36  movz x16, #0xe00000000
0x4cd08ba8    40  cmp x4, x16
0x4cd08bac    44  csel x4, fp, x3, ne
0x4cd08bb0    48  ldr x3, [x4, #16]
0x4cd08bb4    52  tbnz w3, #0, #+0xdc (addr 0x4cd08c90)
0x4cd08bb8    56  asr x5, x3, #32
0x4cd08bbc    60  movz w16, #0x257f
0x4cd08bc0    64  cmp w5, w16, lsl #3
0x4cd08bc4    68  b.hs #+0x17c (addr 0x4cd08d40)
0x4cd08bc8    72  cbz w5, #+0xc (addr 0x4cd08bd4)
0x4cd08bcc    76  mov x3, x5
0x4cd08bd0    80  b #+0xc (addr 0x4cd08bdc)
0x4cd08bd4    84  movz x3, #0x4
0x4cd08bd8    88  movz x5, #0x0
0x4cd08bdc    92  lsl x4, x3, #32
0x4cd08be0    96  lsl x5, x5, #32
0x4cd08be4   100  lsl w6, w3, #3
0x4cd08be8   104  add w6, w6, #0x10 (16)
0x4cd08bec   108  cmp w6, #0x96000 (614400)
0x4cd08bf0   112  b.hs #+0x158 (addr 0x4cd08d48)
0x4cd08bf4   116  add w0, w6, #0x20 (32)
0x4cd08bf8   120  sxtw x0, w0
0x4cd08bfc   124  movz x2, #0xd2c0
0x4cd08c00   128  movk x2, #0x166d, lsl #16
0x4cd08c04   132  ldp x7, x16, [x2]
0x4cd08c08   136  adds x6, x7, x0
0x4cd08c0c   140  ccmp x6, x16, #nzCv, lo
0x4cd08c10   144  b.hi #+0xa8 (addr 0x4cd08cb8)
0x4cd08c14   148  str x6, [x2]
0x4cd08c18   152  orr x7, x7, #0x1
0x4cd08c1c   156  movz w0, #0x0
0x4cd08c20   160  stur x0, [x7, #31]
0x4cd08c24   164  ldur x0, [x1, #39]
0x4cd08c28   168  ldur x0, [x0, #39]
0x4cd08c2c   172  movz x16, #0x17f
0x4cd08c30   176  ldr x0, [x0, x16]
0x4cd08c34   180  stur x0, [x7, #-1]
0x4cd08c38   184  ldr x0, pc+208 (addr 0x000000004cd08d08)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd08c3c   188  stur x0, [x7, #7]
0x4cd08c40   192  ldr x0, pc+208 (addr 0x000000004cd08d10)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd08c44   196  stur x0, [x7, #15]
0x4cd08c48   200  stur x5, [x7, #23]
0x4cd08c4c   204  add x0, x7, #0x20 (32)
0x4cd08c50   208  ldr x1, pc+200 (addr 0x000000004cd08d18)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd08c54   212  stur x1, [x0, #-1]
0x4cd08c58   216  stur x4, [x0, #7]
0x4cd08c5c   220  stur x0, [x7, #15]
0x4cd08c60   224  cmp w3, #0x0 (0)
0x4cd08c64   228  b.le #+0x18 (addr 0x4cd08c7c)
0x4cd08c68   232  sub w3, w3, #0x1 (1)
0x4cd08c6c   236  ldr x1, pc+180 (addr 0x000000004cd08d20)    ;; object: 0x21004519 <the hole>
0x4cd08c70   240  add x2, x0, #0xf (15)
0x4cd08c74   244  str x1, [x2, w3, sxtw #3]
0x4cd08c78   248  b #-0x18 (addr 0x4cd08c60)
0x4cd08c7c   252  mov x0, x7
0x4cd08c80   256  mov jssp, fp
0x4cd08c84   260  ldp fp, lr, [jssp], #16
0x4cd08c88   264  add jssp, jssp, #0x10 (16)
0x4cd08c8c   268  ret
0x4cd08c90   272  ldur x16, [x3, #-1]
0x4cd08c94   276  ldr x17, [x26, #120]
0x4cd08c98   280  cmp x16, x17
0x4cd08c9c   284  b.ne #+0xb4 (addr 0x4cd08d50)
0x4cd08ca0   288  ldur d29, [x3, #7]
0x4cd08ca4   292  fcvtzs w5, d29
0x4cd08ca8   296  scvtf d0, w5
0x4cd08cac   300  fcmp d29, d0
0x4cd08cb0   304  b.ne #+0xa0 (addr 0x4cd08d50)
0x4cd08cb4   308  b #-0xf8 (addr 0x4cd08bbc)
0x4cd08cb8   312  movz x7, #0x0
0x4cd08cbc   316  mov x16, lr
0x4cd08cc0   320  ldr x17, pc+104 (addr 0x000000004cd08d28)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd08cc4   324  blr x17
0x4cd08cc8   328  lsl x0, x0, #32
0x4cd08ccc   332  movz x10, #0x0
0x4cd08cd0   336  sub csp, jssp, #0x10 (16)
0x4cd08cd4   340  stp x10, x0, [jssp, #-16]!
0x4cd08cd8   344  movz x0, #0x2
0x4cd08cdc   348  movz x1, #0x5b88
0x4cd08ce0   352  movk x1, #0xe2, lsl #16
0x4cd08ce4   356  ldr x16, pc+76 (addr 0x000000004cd08d30)    ;; code: STUB, CEntryStub, minor: 5
0x4cd08ce8   360  blr x16
0x4cd08cec   364  str x0, [jssp, #56]
0x4cd08cf0   368  ldr x16, pc+72 (addr 0x000000004cd08d38)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd08cf4   372  blr x16
0x4cd08cf8   376  b #-0xdc (addr 0x4cd08c1c)
0x4cd08cfc   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd08d00   384  d63f03e0       constant
0x4cd08d04   388  d503201f       constant
0x4cd08d08   392  21004201       constant
0x4cd08d0c   396  00000000       constant
0x4cd08d10   400  21004201       constant
0x4cd08d14   404  00000000       constant
0x4cd08d18   408  2a804259       constant
0x4cd08d1c   412  00000000       constant
0x4cd08d20   416  21004519       constant
0x4cd08d24   420  00000000       constant
0x4cd08d28   424  4cd06820       constant
0x4cd08d2c   428  00000000       constant
0x4cd08d30   432  4cd06260       constant
0x4cd08d34   436  00000000       constant
0x4cd08d38   440  4cd068e0       constant
0x4cd08d3c   444  00000000       constant
0x4cd08d40   448  movz x16, #0x0
0x4cd08d44   452  bl #+0x14 (addr 0x4cd08d58)
0x4cd08d48   456  movz x16, #0x8
0x4cd08d4c   460  bl #+0xc (addr 0x4cd08d58)
0x4cd08d50   464  movz x16, #0x10
0x4cd08d54   468  bl #+0x4 (addr 0x4cd08d58)
0x4cd08d58   472  ldr x17, pc+24 (addr 0x000000004cd08d70)    ;; lazy deoptimization bailout 0
0x4cd08d5c   476  add x17, x17, x16
0x4cd08d60   480  br x17
0x4cd08d64   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd08d68   488  d63f03e0       constant
0x4cd08d6c   492  d503201f       constant
0x4cd08d70   496  4cb06000       constant
0x4cd08d74   500  00000000       constant


Safepoints (size = 21)
0x4cd08cec   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd08c38  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd08c40  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd08c50  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd08c6c  embedded object  (0x21004519 <the hole>)
0x4cd08cc0  code target (STUB)  (0x4cd06820)
0x4cd08ce4  code target (STUB)  (0x4cd06260)
0x4cd08cf0  code target (STUB)  (0x4cd068e0)
0x4cd08cfc  constant pool (size 68)
0x4cd08d58  runtime entry
0x4cd08d64  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 525)
0x4cd08e00     0  movz x16, #0xa00000000
0x4cd08e04     4  sub csp, jssp, #0x10 (16)
0x4cd08e08     8  stp fp, lr, [jssp, #-16]!
0x4cd08e0c    12  mov fp, jssp
0x4cd08e10    16  sub csp, jssp, #0x8 (8)
0x4cd08e14    20  sub jssp, jssp, #0x8 (8)
0x4cd08e18    24  stur x16, [fp, #-8]
0x4cd08e1c    28  ldr x3, [fp]
0x4cd08e20    32  ldur x4, [x3, #-8]
0x4cd08e24    36  movz x16, #0xe00000000
0x4cd08e28    40  cmp x4, x16
0x4cd08e2c    44  csel x4, fp, x3, ne
0x4cd08e30    48  ldr x3, [x4, #16]
0x4cd08e34    52  tbnz w3, #0, #+0xdc (addr 0x4cd08f10)
0x4cd08e38    56  asr x5, x3, #32
0x4cd08e3c    60  movz w16, #0x257f
0x4cd08e40    64  cmp w5, w16, lsl #3
0x4cd08e44    68  b.hs #+0x17c (addr 0x4cd08fc0)
0x4cd08e48    72  cbz w5, #+0xc (addr 0x4cd08e54)
0x4cd08e4c    76  mov x3, x5
0x4cd08e50    80  b #+0xc (addr 0x4cd08e5c)
0x4cd08e54    84  movz x3, #0x4
0x4cd08e58    88  movz x5, #0x0
0x4cd08e5c    92  lsl x4, x3, #32
0x4cd08e60    96  lsl x5, x5, #32
0x4cd08e64   100  lsl w6, w3, #3
0x4cd08e68   104  add w6, w6, #0x10 (16)
0x4cd08e6c   108  cmp w6, #0x96000 (614400)
0x4cd08e70   112  b.hs #+0x158 (addr 0x4cd08fc8)
0x4cd08e74   116  add w0, w6, #0x20 (32)
0x4cd08e78   120  sxtw x0, w0
0x4cd08e7c   124  movz x2, #0xd2c0
0x4cd08e80   128  movk x2, #0x166d, lsl #16
0x4cd08e84   132  ldp x7, x16, [x2]
0x4cd08e88   136  adds x6, x7, x0
0x4cd08e8c   140  ccmp x6, x16, #nzCv, lo
0x4cd08e90   144  b.hi #+0xa8 (addr 0x4cd08f38)
0x4cd08e94   148  str x6, [x2]
0x4cd08e98   152  orr x7, x7, #0x1
0x4cd08e9c   156  movz w0, #0x0
0x4cd08ea0   160  stur x0, [x7, #31]
0x4cd08ea4   164  ldur x0, [x1, #39]
0x4cd08ea8   168  ldur x0, [x0, #39]
0x4cd08eac   172  movz x16, #0x197
0x4cd08eb0   176  ldr x0, [x0, x16]
0x4cd08eb4   180  stur x0, [x7, #-1]
0x4cd08eb8   184  ldr x0, pc+216 (addr 0x000000004cd08f90)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd08ebc   188  stur x0, [x7, #7]
0x4cd08ec0   192  ldr x0, pc+216 (addr 0x000000004cd08f98)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd08ec4   196  stur x0, [x7, #15]
0x4cd08ec8   200  stur x5, [x7, #23]
0x4cd08ecc   204  add x0, x7, #0x20 (32)
0x4cd08ed0   208  ldr x1, pc+208 (addr 0x000000004cd08fa0)    ;; object: 0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd08ed4   212  stur x1, [x0, #-1]
0x4cd08ed8   216  stur x4, [x0, #7]
0x4cd08edc   220  stur x0, [x7, #15]
0x4cd08ee0   224  ldr d0, pc+168 (addr 0x000000004cd08f88)
0x4cd08ee4   228  cmp w3, #0x0 (0)
0x4cd08ee8   232  b.le #+0x14 (addr 0x4cd08efc)
0x4cd08eec   236  sub w3, w3, #0x1 (1)
0x4cd08ef0   240  add x1, x0, #0xf (15)
0x4cd08ef4   244  str d0, [x1, w3, sxtw #3]
0x4cd08ef8   248  b #-0x14 (addr 0x4cd08ee4)
0x4cd08efc   252  mov x0, x7
0x4cd08f00   256  mov jssp, fp
0x4cd08f04   260  ldp fp, lr, [jssp], #16
0x4cd08f08   264  add jssp, jssp, #0x10 (16)
0x4cd08f0c   268  ret
0x4cd08f10   272  ldur x16, [x3, #-1]
0x4cd08f14   276  ldr x17, [x26, #120]
0x4cd08f18   280  cmp x16, x17
0x4cd08f1c   284  b.ne #+0xb4 (addr 0x4cd08fd0)
0x4cd08f20   288  ldur d29, [x3, #7]
0x4cd08f24   292  fcvtzs w5, d29
0x4cd08f28   296  scvtf d0, w5
0x4cd08f2c   300  fcmp d29, d0
0x4cd08f30   304  b.ne #+0xa0 (addr 0x4cd08fd0)
0x4cd08f34   308  b #-0xf8 (addr 0x4cd08e3c)
0x4cd08f38   312  movz x7, #0x0
0x4cd08f3c   316  mov x16, lr
0x4cd08f40   320  ldr x17, pc+104 (addr 0x000000004cd08fa8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd08f44   324  blr x17
0x4cd08f48   328  lsl x0, x0, #32
0x4cd08f4c   332  movz x10, #0x100000000
0x4cd08f50   336  sub csp, jssp, #0x10 (16)
0x4cd08f54   340  stp x10, x0, [jssp, #-16]!
0x4cd08f58   344  movz x0, #0x2
0x4cd08f5c   348  movz x1, #0x5b88
0x4cd08f60   352  movk x1, #0xe2, lsl #16
0x4cd08f64   356  ldr x16, pc+76 (addr 0x000000004cd08fb0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd08f68   360  blr x16
0x4cd08f6c   364  str x0, [jssp, #56]
0x4cd08f70   368  ldr x16, pc+72 (addr 0x000000004cd08fb8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd08f74   372  blr x16
0x4cd08f78   376  b #-0xdc (addr 0x4cd08e9c)
0x4cd08f7c   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd08f80   384  d63f03e0       constant
0x4cd08f84   388  d503201f       constant
0x4cd08f88   392  fff7ffff       constant
0x4cd08f8c   396  fff7ffff       constant
0x4cd08f90   400  21004201       constant
0x4cd08f94   404  00000000       constant
0x4cd08f98   408  21004201       constant
0x4cd08f9c   412  00000000       constant
0x4cd08fa0   416  2a8052d9       constant
0x4cd08fa4   420  00000000       constant
0x4cd08fa8   424  4cd06820       constant
0x4cd08fac   428  00000000       constant
0x4cd08fb0   432  4cd06260       constant
0x4cd08fb4   436  00000000       constant
0x4cd08fb8   440  4cd068e0       constant
0x4cd08fbc   444  00000000       constant
0x4cd08fc0   448  movz x16, #0x0
0x4cd08fc4   452  bl #+0x14 (addr 0x4cd08fd8)
0x4cd08fc8   456  movz x16, #0x8
0x4cd08fcc   460  bl #+0xc (addr 0x4cd08fd8)
0x4cd08fd0   464  movz x16, #0x10
0x4cd08fd4   468  bl #+0x4 (addr 0x4cd08fd8)
0x4cd08fd8   472  ldr x17, pc+24 (addr 0x000000004cd08ff0)    ;; lazy deoptimization bailout 0
0x4cd08fdc   476  add x17, x17, x16
0x4cd08fe0   480  br x17
0x4cd08fe4   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd08fe8   488  d63f03e0       constant
0x4cd08fec   492  d503201f       constant
0x4cd08ff0   496  4cb06000       constant
0x4cd08ff4   500  00000000       constant


Safepoints (size = 21)
0x4cd08f6c   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd08eb8  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd08ec0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd08ed0  embedded object  (0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd08f40  code target (STUB)  (0x4cd06820)
0x4cd08f64  code target (STUB)  (0x4cd06260)
0x4cd08f70  code target (STUB)  (0x4cd068e0)
0x4cd08f7c  constant pool (size 68)
0x4cd08fd8  runtime entry
0x4cd08fe4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArraySingleArgumentConstructorStub
name = ArraySingleArgumentConstructorStub_FAST_DOUBLE_ELEMENTS
compiler = crankshaft
Instructions (size = 525)
0x4cd08e00     0  movz x16, #0xa00000000
0x4cd08e04     4  sub csp, jssp, #0x10 (16)
0x4cd08e08     8  stp fp, lr, [jssp, #-16]!
0x4cd08e0c    12  mov fp, jssp
0x4cd08e10    16  sub csp, jssp, #0x8 (8)
0x4cd08e14    20  sub jssp, jssp, #0x8 (8)
0x4cd08e18    24  stur x16, [fp, #-8]
0x4cd08e1c    28  ldr x3, [fp]
0x4cd08e20    32  ldur x4, [x3, #-8]
0x4cd08e24    36  movz x16, #0xe00000000
0x4cd08e28    40  cmp x4, x16
0x4cd08e2c    44  csel x4, fp, x3, ne
0x4cd08e30    48  ldr x3, [x4, #16]
0x4cd08e34    52  tbnz w3, #0, #+0xdc (addr 0x4cd08f10)
0x4cd08e38    56  asr x5, x3, #32
0x4cd08e3c    60  movz w16, #0x257f
0x4cd08e40    64  cmp w5, w16, lsl #3
0x4cd08e44    68  b.hs #+0x17c (addr 0x4cd08fc0)
0x4cd08e48    72  cbz w5, #+0xc (addr 0x4cd08e54)
0x4cd08e4c    76  mov x3, x5
0x4cd08e50    80  b #+0xc (addr 0x4cd08e5c)
0x4cd08e54    84  movz x3, #0x4
0x4cd08e58    88  movz x5, #0x0
0x4cd08e5c    92  lsl x4, x3, #32
0x4cd08e60    96  lsl x5, x5, #32
0x4cd08e64   100  lsl w6, w3, #3
0x4cd08e68   104  add w6, w6, #0x10 (16)
0x4cd08e6c   108  cmp w6, #0x96000 (614400)
0x4cd08e70   112  b.hs #+0x158 (addr 0x4cd08fc8)
0x4cd08e74   116  add w0, w6, #0x20 (32)
0x4cd08e78   120  sxtw x0, w0
0x4cd08e7c   124  movz x2, #0xd2c0
0x4cd08e80   128  movk x2, #0x166d, lsl #16
0x4cd08e84   132  ldp x7, x16, [x2]
0x4cd08e88   136  adds x6, x7, x0
0x4cd08e8c   140  ccmp x6, x16, #nzCv, lo
0x4cd08e90   144  b.hi #+0xa8 (addr 0x4cd08f38)
0x4cd08e94   148  str x6, [x2]
0x4cd08e98   152  orr x7, x7, #0x1
0x4cd08e9c   156  movz w0, #0x0
0x4cd08ea0   160  stur x0, [x7, #31]
0x4cd08ea4   164  ldur x0, [x1, #39]
0x4cd08ea8   168  ldur x0, [x0, #39]
0x4cd08eac   172  movz x16, #0x197
0x4cd08eb0   176  ldr x0, [x0, x16]
0x4cd08eb4   180  stur x0, [x7, #-1]
0x4cd08eb8   184  ldr x0, pc+216 (addr 0x000000004cd08f90)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd08ebc   188  stur x0, [x7, #7]
0x4cd08ec0   192  ldr x0, pc+216 (addr 0x000000004cd08f98)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd08ec4   196  stur x0, [x7, #15]
0x4cd08ec8   200  stur x5, [x7, #23]
0x4cd08ecc   204  add x0, x7, #0x20 (32)
0x4cd08ed0   208  ldr x1, pc+208 (addr 0x000000004cd08fa0)    ;; object: 0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd08ed4   212  stur x1, [x0, #-1]
0x4cd08ed8   216  stur x4, [x0, #7]
0x4cd08edc   220  stur x0, [x7, #15]
0x4cd08ee0   224  ldr d0, pc+168 (addr 0x000000004cd08f88)
0x4cd08ee4   228  cmp w3, #0x0 (0)
0x4cd08ee8   232  b.le #+0x14 (addr 0x4cd08efc)
0x4cd08eec   236  sub w3, w3, #0x1 (1)
0x4cd08ef0   240  add x1, x0, #0xf (15)
0x4cd08ef4   244  str d0, [x1, w3, sxtw #3]
0x4cd08ef8   248  b #-0x14 (addr 0x4cd08ee4)
0x4cd08efc   252  mov x0, x7
0x4cd08f00   256  mov jssp, fp
0x4cd08f04   260  ldp fp, lr, [jssp], #16
0x4cd08f08   264  add jssp, jssp, #0x10 (16)
0x4cd08f0c   268  ret
0x4cd08f10   272  ldur x16, [x3, #-1]
0x4cd08f14   276  ldr x17, [x26, #120]
0x4cd08f18   280  cmp x16, x17
0x4cd08f1c   284  b.ne #+0xb4 (addr 0x4cd08fd0)
0x4cd08f20   288  ldur d29, [x3, #7]
0x4cd08f24   292  fcvtzs w5, d29
0x4cd08f28   296  scvtf d0, w5
0x4cd08f2c   300  fcmp d29, d0
0x4cd08f30   304  b.ne #+0xa0 (addr 0x4cd08fd0)
0x4cd08f34   308  b #-0xf8 (addr 0x4cd08e3c)
0x4cd08f38   312  movz x7, #0x0
0x4cd08f3c   316  mov x16, lr
0x4cd08f40   320  ldr x17, pc+104 (addr 0x000000004cd08fa8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd08f44   324  blr x17
0x4cd08f48   328  lsl x0, x0, #32
0x4cd08f4c   332  movz x10, #0x100000000
0x4cd08f50   336  sub csp, jssp, #0x10 (16)
0x4cd08f54   340  stp x10, x0, [jssp, #-16]!
0x4cd08f58   344  movz x0, #0x2
0x4cd08f5c   348  movz x1, #0x5b88
0x4cd08f60   352  movk x1, #0xe2, lsl #16
0x4cd08f64   356  ldr x16, pc+76 (addr 0x000000004cd08fb0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd08f68   360  blr x16
0x4cd08f6c   364  str x0, [jssp, #56]
0x4cd08f70   368  ldr x16, pc+72 (addr 0x000000004cd08fb8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd08f74   372  blr x16
0x4cd08f78   376  b #-0xdc (addr 0x4cd08e9c)
0x4cd08f7c   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd08f80   384  d63f03e0       constant
0x4cd08f84   388  d503201f       constant
0x4cd08f88   392  fff7ffff       constant
0x4cd08f8c   396  fff7ffff       constant
0x4cd08f90   400  21004201       constant
0x4cd08f94   404  00000000       constant
0x4cd08f98   408  21004201       constant
0x4cd08f9c   412  00000000       constant
0x4cd08fa0   416  2a8052d9       constant
0x4cd08fa4   420  00000000       constant
0x4cd08fa8   424  4cd06820       constant
0x4cd08fac   428  00000000       constant
0x4cd08fb0   432  4cd06260       constant
0x4cd08fb4   436  00000000       constant
0x4cd08fb8   440  4cd068e0       constant
0x4cd08fbc   444  00000000       constant
0x4cd08fc0   448  movz x16, #0x0
0x4cd08fc4   452  bl #+0x14 (addr 0x4cd08fd8)
0x4cd08fc8   456  movz x16, #0x8
0x4cd08fcc   460  bl #+0xc (addr 0x4cd08fd8)
0x4cd08fd0   464  movz x16, #0x10
0x4cd08fd4   468  bl #+0x4 (addr 0x4cd08fd8)
0x4cd08fd8   472  ldr x17, pc+24 (addr 0x000000004cd08ff0)    ;; lazy deoptimization bailout 0
0x4cd08fdc   476  add x17, x17, x16
0x4cd08fe0   480  br x17
0x4cd08fe4   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd08fe8   488  d63f03e0       constant
0x4cd08fec   492  d503201f       constant
0x4cd08ff0   496  4cb06000       constant
0x4cd08ff4   500  00000000       constant


Safepoints (size = 21)
0x4cd08f6c   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd08eb8  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd08ec0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd08ed0  embedded object  (0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd08f40  code target (STUB)  (0x4cd06820)
0x4cd08f64  code target (STUB)  (0x4cd06260)
0x4cd08f70  code target (STUB)  (0x4cd068e0)
0x4cd08f7c  constant pool (size 68)
0x4cd08fd8  runtime entry
0x4cd08fe4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 525)
0x4cd09080     0  movz x16, #0xa00000000
0x4cd09084     4  sub csp, jssp, #0x10 (16)
0x4cd09088     8  stp fp, lr, [jssp, #-16]!
0x4cd0908c    12  mov fp, jssp
0x4cd09090    16  sub csp, jssp, #0x8 (8)
0x4cd09094    20  sub jssp, jssp, #0x8 (8)
0x4cd09098    24  stur x16, [fp, #-8]
0x4cd0909c    28  ldr x3, [fp]
0x4cd090a0    32  ldur x4, [x3, #-8]
0x4cd090a4    36  movz x16, #0xe00000000
0x4cd090a8    40  cmp x4, x16
0x4cd090ac    44  csel x4, fp, x3, ne
0x4cd090b0    48  ldr x3, [x4, #16]
0x4cd090b4    52  tbnz w3, #0, #+0xdc (addr 0x4cd09190)
0x4cd090b8    56  asr x5, x3, #32
0x4cd090bc    60  movz w16, #0x257f
0x4cd090c0    64  cmp w5, w16, lsl #3
0x4cd090c4    68  b.hs #+0x17c (addr 0x4cd09240)
0x4cd090c8    72  cbz w5, #+0xc (addr 0x4cd090d4)
0x4cd090cc    76  mov x3, x5
0x4cd090d0    80  b #+0xc (addr 0x4cd090dc)
0x4cd090d4    84  movz x3, #0x4
0x4cd090d8    88  movz x5, #0x0
0x4cd090dc    92  lsl x4, x3, #32
0x4cd090e0    96  lsl x5, x5, #32
0x4cd090e4   100  lsl w6, w3, #3
0x4cd090e8   104  add w6, w6, #0x10 (16)
0x4cd090ec   108  cmp w6, #0x96000 (614400)
0x4cd090f0   112  b.hs #+0x158 (addr 0x4cd09248)
0x4cd090f4   116  add w0, w6, #0x20 (32)
0x4cd090f8   120  sxtw x0, w0
0x4cd090fc   124  movz x2, #0xd2c0
0x4cd09100   128  movk x2, #0x166d, lsl #16
0x4cd09104   132  ldp x7, x16, [x2]
0x4cd09108   136  adds x6, x7, x0
0x4cd0910c   140  ccmp x6, x16, #nzCv, lo
0x4cd09110   144  b.hi #+0xa8 (addr 0x4cd091b8)
0x4cd09114   148  str x6, [x2]
0x4cd09118   152  orr x7, x7, #0x1
0x4cd0911c   156  movz w0, #0x0
0x4cd09120   160  stur x0, [x7, #31]
0x4cd09124   164  ldur x0, [x1, #39]
0x4cd09128   168  ldur x0, [x0, #39]
0x4cd0912c   172  movz x16, #0x19f
0x4cd09130   176  ldr x0, [x0, x16]
0x4cd09134   180  stur x0, [x7, #-1]
0x4cd09138   184  ldr x0, pc+216 (addr 0x000000004cd09210)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0913c   188  stur x0, [x7, #7]
0x4cd09140   192  ldr x0, pc+216 (addr 0x000000004cd09218)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd09144   196  stur x0, [x7, #15]
0x4cd09148   200  stur x5, [x7, #23]
0x4cd0914c   204  add x0, x7, #0x20 (32)
0x4cd09150   208  ldr x1, pc+208 (addr 0x000000004cd09220)    ;; object: 0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd09154   212  stur x1, [x0, #-1]
0x4cd09158   216  stur x4, [x0, #7]
0x4cd0915c   220  stur x0, [x7, #15]
0x4cd09160   224  ldr d0, pc+168 (addr 0x000000004cd09208)
0x4cd09164   228  cmp w3, #0x0 (0)
0x4cd09168   232  b.le #+0x14 (addr 0x4cd0917c)
0x4cd0916c   236  sub w3, w3, #0x1 (1)
0x4cd09170   240  add x1, x0, #0xf (15)
0x4cd09174   244  str d0, [x1, w3, sxtw #3]
0x4cd09178   248  b #-0x14 (addr 0x4cd09164)
0x4cd0917c   252  mov x0, x7
0x4cd09180   256  mov jssp, fp
0x4cd09184   260  ldp fp, lr, [jssp], #16
0x4cd09188   264  add jssp, jssp, #0x10 (16)
0x4cd0918c   268  ret
0x4cd09190   272  ldur x16, [x3, #-1]
0x4cd09194   276  ldr x17, [x26, #120]
0x4cd09198   280  cmp x16, x17
0x4cd0919c   284  b.ne #+0xb4 (addr 0x4cd09250)
0x4cd091a0   288  ldur d29, [x3, #7]
0x4cd091a4   292  fcvtzs w5, d29
0x4cd091a8   296  scvtf d0, w5
0x4cd091ac   300  fcmp d29, d0
0x4cd091b0   304  b.ne #+0xa0 (addr 0x4cd09250)
0x4cd091b4   308  b #-0xf8 (addr 0x4cd090bc)
0x4cd091b8   312  movz x7, #0x0
0x4cd091bc   316  mov x16, lr
0x4cd091c0   320  ldr x17, pc+104 (addr 0x000000004cd09228)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd091c4   324  blr x17
0x4cd091c8   328  lsl x0, x0, #32
0x4cd091cc   332  movz x10, #0x100000000
0x4cd091d0   336  sub csp, jssp, #0x10 (16)
0x4cd091d4   340  stp x10, x0, [jssp, #-16]!
0x4cd091d8   344  movz x0, #0x2
0x4cd091dc   348  movz x1, #0x5b88
0x4cd091e0   352  movk x1, #0xe2, lsl #16
0x4cd091e4   356  ldr x16, pc+76 (addr 0x000000004cd09230)    ;; code: STUB, CEntryStub, minor: 5
0x4cd091e8   360  blr x16
0x4cd091ec   364  str x0, [jssp, #56]
0x4cd091f0   368  ldr x16, pc+72 (addr 0x000000004cd09238)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd091f4   372  blr x16
0x4cd091f8   376  b #-0xdc (addr 0x4cd0911c)
0x4cd091fc   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd09200   384  d63f03e0       constant
0x4cd09204   388  d503201f       constant
0x4cd09208   392  fff7ffff       constant
0x4cd0920c   396  fff7ffff       constant
0x4cd09210   400  21004201       constant
0x4cd09214   404  00000000       constant
0x4cd09218   408  21004201       constant
0x4cd0921c   412  00000000       constant
0x4cd09220   416  2a8052d9       constant
0x4cd09224   420  00000000       constant
0x4cd09228   424  4cd06820       constant
0x4cd0922c   428  00000000       constant
0x4cd09230   432  4cd06260       constant
0x4cd09234   436  00000000       constant
0x4cd09238   440  4cd068e0       constant
0x4cd0923c   444  00000000       constant
0x4cd09240   448  movz x16, #0x0
0x4cd09244   452  bl #+0x14 (addr 0x4cd09258)
0x4cd09248   456  movz x16, #0x8
0x4cd0924c   460  bl #+0xc (addr 0x4cd09258)
0x4cd09250   464  movz x16, #0x10
0x4cd09254   468  bl #+0x4 (addr 0x4cd09258)
0x4cd09258   472  ldr x17, pc+24 (addr 0x000000004cd09270)    ;; lazy deoptimization bailout 0
0x4cd0925c   476  add x17, x17, x16
0x4cd09260   480  br x17
0x4cd09264   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd09268   488  d63f03e0       constant
0x4cd0926c   492  d503201f       constant
0x4cd09270   496  4cb06000       constant
0x4cd09274   500  00000000       constant


Safepoints (size = 21)
0x4cd091ec   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd09138  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd09140  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd09150  embedded object  (0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd091c0  code target (STUB)  (0x4cd06820)
0x4cd091e4  code target (STUB)  (0x4cd06260)
0x4cd091f0  code target (STUB)  (0x4cd068e0)
0x4cd091fc  constant pool (size 68)
0x4cd09258  runtime entry
0x4cd09264  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArraySingleArgumentConstructorStub
name = ArraySingleArgumentConstructorStub_FAST_HOLEY_DOUBLE_ELEMENTS
compiler = crankshaft
Instructions (size = 525)
0x4cd09080     0  movz x16, #0xa00000000
0x4cd09084     4  sub csp, jssp, #0x10 (16)
0x4cd09088     8  stp fp, lr, [jssp, #-16]!
0x4cd0908c    12  mov fp, jssp
0x4cd09090    16  sub csp, jssp, #0x8 (8)
0x4cd09094    20  sub jssp, jssp, #0x8 (8)
0x4cd09098    24  stur x16, [fp, #-8]
0x4cd0909c    28  ldr x3, [fp]
0x4cd090a0    32  ldur x4, [x3, #-8]
0x4cd090a4    36  movz x16, #0xe00000000
0x4cd090a8    40  cmp x4, x16
0x4cd090ac    44  csel x4, fp, x3, ne
0x4cd090b0    48  ldr x3, [x4, #16]
0x4cd090b4    52  tbnz w3, #0, #+0xdc (addr 0x4cd09190)
0x4cd090b8    56  asr x5, x3, #32
0x4cd090bc    60  movz w16, #0x257f
0x4cd090c0    64  cmp w5, w16, lsl #3
0x4cd090c4    68  b.hs #+0x17c (addr 0x4cd09240)
0x4cd090c8    72  cbz w5, #+0xc (addr 0x4cd090d4)
0x4cd090cc    76  mov x3, x5
0x4cd090d0    80  b #+0xc (addr 0x4cd090dc)
0x4cd090d4    84  movz x3, #0x4
0x4cd090d8    88  movz x5, #0x0
0x4cd090dc    92  lsl x4, x3, #32
0x4cd090e0    96  lsl x5, x5, #32
0x4cd090e4   100  lsl w6, w3, #3
0x4cd090e8   104  add w6, w6, #0x10 (16)
0x4cd090ec   108  cmp w6, #0x96000 (614400)
0x4cd090f0   112  b.hs #+0x158 (addr 0x4cd09248)
0x4cd090f4   116  add w0, w6, #0x20 (32)
0x4cd090f8   120  sxtw x0, w0
0x4cd090fc   124  movz x2, #0xd2c0
0x4cd09100   128  movk x2, #0x166d, lsl #16
0x4cd09104   132  ldp x7, x16, [x2]
0x4cd09108   136  adds x6, x7, x0
0x4cd0910c   140  ccmp x6, x16, #nzCv, lo
0x4cd09110   144  b.hi #+0xa8 (addr 0x4cd091b8)
0x4cd09114   148  str x6, [x2]
0x4cd09118   152  orr x7, x7, #0x1
0x4cd0911c   156  movz w0, #0x0
0x4cd09120   160  stur x0, [x7, #31]
0x4cd09124   164  ldur x0, [x1, #39]
0x4cd09128   168  ldur x0, [x0, #39]
0x4cd0912c   172  movz x16, #0x19f
0x4cd09130   176  ldr x0, [x0, x16]
0x4cd09134   180  stur x0, [x7, #-1]
0x4cd09138   184  ldr x0, pc+216 (addr 0x000000004cd09210)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0913c   188  stur x0, [x7, #7]
0x4cd09140   192  ldr x0, pc+216 (addr 0x000000004cd09218)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd09144   196  stur x0, [x7, #15]
0x4cd09148   200  stur x5, [x7, #23]
0x4cd0914c   204  add x0, x7, #0x20 (32)
0x4cd09150   208  ldr x1, pc+208 (addr 0x000000004cd09220)    ;; object: 0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd09154   212  stur x1, [x0, #-1]
0x4cd09158   216  stur x4, [x0, #7]
0x4cd0915c   220  stur x0, [x7, #15]
0x4cd09160   224  ldr d0, pc+168 (addr 0x000000004cd09208)
0x4cd09164   228  cmp w3, #0x0 (0)
0x4cd09168   232  b.le #+0x14 (addr 0x4cd0917c)
0x4cd0916c   236  sub w3, w3, #0x1 (1)
0x4cd09170   240  add x1, x0, #0xf (15)
0x4cd09174   244  str d0, [x1, w3, sxtw #3]
0x4cd09178   248  b #-0x14 (addr 0x4cd09164)
0x4cd0917c   252  mov x0, x7
0x4cd09180   256  mov jssp, fp
0x4cd09184   260  ldp fp, lr, [jssp], #16
0x4cd09188   264  add jssp, jssp, #0x10 (16)
0x4cd0918c   268  ret
0x4cd09190   272  ldur x16, [x3, #-1]
0x4cd09194   276  ldr x17, [x26, #120]
0x4cd09198   280  cmp x16, x17
0x4cd0919c   284  b.ne #+0xb4 (addr 0x4cd09250)
0x4cd091a0   288  ldur d29, [x3, #7]
0x4cd091a4   292  fcvtzs w5, d29
0x4cd091a8   296  scvtf d0, w5
0x4cd091ac   300  fcmp d29, d0
0x4cd091b0   304  b.ne #+0xa0 (addr 0x4cd09250)
0x4cd091b4   308  b #-0xf8 (addr 0x4cd090bc)
0x4cd091b8   312  movz x7, #0x0
0x4cd091bc   316  mov x16, lr
0x4cd091c0   320  ldr x17, pc+104 (addr 0x000000004cd09228)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd091c4   324  blr x17
0x4cd091c8   328  lsl x0, x0, #32
0x4cd091cc   332  movz x10, #0x100000000
0x4cd091d0   336  sub csp, jssp, #0x10 (16)
0x4cd091d4   340  stp x10, x0, [jssp, #-16]!
0x4cd091d8   344  movz x0, #0x2
0x4cd091dc   348  movz x1, #0x5b88
0x4cd091e0   352  movk x1, #0xe2, lsl #16
0x4cd091e4   356  ldr x16, pc+76 (addr 0x000000004cd09230)    ;; code: STUB, CEntryStub, minor: 5
0x4cd091e8   360  blr x16
0x4cd091ec   364  str x0, [jssp, #56]
0x4cd091f0   368  ldr x16, pc+72 (addr 0x000000004cd09238)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd091f4   372  blr x16
0x4cd091f8   376  b #-0xdc (addr 0x4cd0911c)
0x4cd091fc   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd09200   384  d63f03e0       constant
0x4cd09204   388  d503201f       constant
0x4cd09208   392  fff7ffff       constant
0x4cd0920c   396  fff7ffff       constant
0x4cd09210   400  21004201       constant
0x4cd09214   404  00000000       constant
0x4cd09218   408  21004201       constant
0x4cd0921c   412  00000000       constant
0x4cd09220   416  2a8052d9       constant
0x4cd09224   420  00000000       constant
0x4cd09228   424  4cd06820       constant
0x4cd0922c   428  00000000       constant
0x4cd09230   432  4cd06260       constant
0x4cd09234   436  00000000       constant
0x4cd09238   440  4cd068e0       constant
0x4cd0923c   444  00000000       constant
0x4cd09240   448  movz x16, #0x0
0x4cd09244   452  bl #+0x14 (addr 0x4cd09258)
0x4cd09248   456  movz x16, #0x8
0x4cd0924c   460  bl #+0xc (addr 0x4cd09258)
0x4cd09250   464  movz x16, #0x10
0x4cd09254   468  bl #+0x4 (addr 0x4cd09258)
0x4cd09258   472  ldr x17, pc+24 (addr 0x000000004cd09270)    ;; lazy deoptimization bailout 0
0x4cd0925c   476  add x17, x17, x16
0x4cd09260   480  br x17
0x4cd09264   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd09268   488  d63f03e0       constant
0x4cd0926c   492  d503201f       constant
0x4cd09270   496  4cb06000       constant
0x4cd09274   500  00000000       constant


Safepoints (size = 21)
0x4cd091ec   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd09138  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd09140  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd09150  embedded object  (0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd091c0  code target (STUB)  (0x4cd06820)
0x4cd091e4  code target (STUB)  (0x4cd06260)
0x4cd091f0  code target (STUB)  (0x4cd068e0)
0x4cd091fc  constant pool (size 68)
0x4cd09258  runtime entry
0x4cd09264  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 525)
0x4cd09300     0  movz x16, #0xa00000000
0x4cd09304     4  sub csp, jssp, #0x10 (16)
0x4cd09308     8  stp fp, lr, [jssp, #-16]!
0x4cd0930c    12  mov fp, jssp
0x4cd09310    16  sub csp, jssp, #0x8 (8)
0x4cd09314    20  sub jssp, jssp, #0x8 (8)
0x4cd09318    24  stur x16, [fp, #-8]
0x4cd0931c    28  ldr x3, [fp]
0x4cd09320    32  ldur x4, [x3, #-8]
0x4cd09324    36  movz x16, #0xe00000000
0x4cd09328    40  cmp x4, x16
0x4cd0932c    44  csel x4, fp, x3, ne
0x4cd09330    48  ldr x3, [x4, #16]
0x4cd09334    52  tbnz w3, #0, #+0xdc (addr 0x4cd09410)
0x4cd09338    56  asr x5, x3, #32
0x4cd0933c    60  movz w16, #0x257f
0x4cd09340    64  cmp w5, w16, lsl #3
0x4cd09344    68  b.hs #+0x17c (addr 0x4cd094c0)
0x4cd09348    72  cbz w5, #+0xc (addr 0x4cd09354)
0x4cd0934c    76  mov x3, x5
0x4cd09350    80  b #+0xc (addr 0x4cd0935c)
0x4cd09354    84  movz x3, #0x4
0x4cd09358    88  movz x5, #0x0
0x4cd0935c    92  lsl x4, x3, #32
0x4cd09360    96  lsl x5, x5, #32
0x4cd09364   100  lsl w6, w3, #3
0x4cd09368   104  add w6, w6, #0x10 (16)
0x4cd0936c   108  cmp w6, #0x96000 (614400)
0x4cd09370   112  b.hs #+0x158 (addr 0x4cd094c8)
0x4cd09374   116  add w0, w6, #0x20 (32)
0x4cd09378   120  sxtw x0, w0
0x4cd0937c   124  movz x2, #0xd2c0
0x4cd09380   128  movk x2, #0x166d, lsl #16
0x4cd09384   132  ldp x7, x16, [x2]
0x4cd09388   136  adds x6, x7, x0
0x4cd0938c   140  ccmp x6, x16, #nzCv, lo
0x4cd09390   144  b.hi #+0xa8 (addr 0x4cd09438)
0x4cd09394   148  str x6, [x2]
0x4cd09398   152  orr x7, x7, #0x1
0x4cd0939c   156  movz w0, #0x0
0x4cd093a0   160  stur x0, [x7, #31]
0x4cd093a4   164  ldur x0, [x1, #39]
0x4cd093a8   168  ldur x0, [x0, #39]
0x4cd093ac   172  movz x16, #0x187
0x4cd093b0   176  ldr x0, [x0, x16]
0x4cd093b4   180  stur x0, [x7, #-1]
0x4cd093b8   184  ldr x0, pc+208 (addr 0x000000004cd09488)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd093bc   188  stur x0, [x7, #7]
0x4cd093c0   192  ldr x0, pc+208 (addr 0x000000004cd09490)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd093c4   196  stur x0, [x7, #15]
0x4cd093c8   200  stur x5, [x7, #23]
0x4cd093cc   204  add x0, x7, #0x20 (32)
0x4cd093d0   208  ldr x1, pc+200 (addr 0x000000004cd09498)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd093d4   212  stur x1, [x0, #-1]
0x4cd093d8   216  stur x4, [x0, #7]
0x4cd093dc   220  stur x0, [x7, #15]
0x4cd093e0   224  cmp w3, #0x0 (0)
0x4cd093e4   228  b.le #+0x18 (addr 0x4cd093fc)
0x4cd093e8   232  sub w3, w3, #0x1 (1)
0x4cd093ec   236  ldr x1, pc+180 (addr 0x000000004cd094a0)    ;; object: 0x21004519 <the hole>
0x4cd093f0   240  add x2, x0, #0xf (15)
0x4cd093f4   244  str x1, [x2, w3, sxtw #3]
0x4cd093f8   248  b #-0x18 (addr 0x4cd093e0)
0x4cd093fc   252  mov x0, x7
0x4cd09400   256  mov jssp, fp
0x4cd09404   260  ldp fp, lr, [jssp], #16
0x4cd09408   264  add jssp, jssp, #0x10 (16)
0x4cd0940c   268  ret
0x4cd09410   272  ldur x16, [x3, #-1]
0x4cd09414   276  ldr x17, [x26, #120]
0x4cd09418   280  cmp x16, x17
0x4cd0941c   284  b.ne #+0xb4 (addr 0x4cd094d0)
0x4cd09420   288  ldur d29, [x3, #7]
0x4cd09424   292  fcvtzs w5, d29
0x4cd09428   296  scvtf d0, w5
0x4cd0942c   300  fcmp d29, d0
0x4cd09430   304  b.ne #+0xa0 (addr 0x4cd094d0)
0x4cd09434   308  b #-0xf8 (addr 0x4cd0933c)
0x4cd09438   312  movz x7, #0x0
0x4cd0943c   316  mov x16, lr
0x4cd09440   320  ldr x17, pc+104 (addr 0x000000004cd094a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd09444   324  blr x17
0x4cd09448   328  lsl x0, x0, #32
0x4cd0944c   332  movz x10, #0x0
0x4cd09450   336  sub csp, jssp, #0x10 (16)
0x4cd09454   340  stp x10, x0, [jssp, #-16]!
0x4cd09458   344  movz x0, #0x2
0x4cd0945c   348  movz x1, #0x5b88
0x4cd09460   352  movk x1, #0xe2, lsl #16
0x4cd09464   356  ldr x16, pc+76 (addr 0x000000004cd094b0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd09468   360  blr x16
0x4cd0946c   364  str x0, [jssp, #56]
0x4cd09470   368  ldr x16, pc+72 (addr 0x000000004cd094b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd09474   372  blr x16
0x4cd09478   376  b #-0xdc (addr 0x4cd0939c)
0x4cd0947c   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd09480   384  d63f03e0       constant
0x4cd09484   388  d503201f       constant
0x4cd09488   392  21004201       constant
0x4cd0948c   396  00000000       constant
0x4cd09490   400  21004201       constant
0x4cd09494   404  00000000       constant
0x4cd09498   408  2a804259       constant
0x4cd0949c   412  00000000       constant
0x4cd094a0   416  21004519       constant
0x4cd094a4   420  00000000       constant
0x4cd094a8   424  4cd06820       constant
0x4cd094ac   428  00000000       constant
0x4cd094b0   432  4cd06260       constant
0x4cd094b4   436  00000000       constant
0x4cd094b8   440  4cd068e0       constant
0x4cd094bc   444  00000000       constant
0x4cd094c0   448  movz x16, #0x0
0x4cd094c4   452  bl #+0x14 (addr 0x4cd094d8)
0x4cd094c8   456  movz x16, #0x8
0x4cd094cc   460  bl #+0xc (addr 0x4cd094d8)
0x4cd094d0   464  movz x16, #0x10
0x4cd094d4   468  bl #+0x4 (addr 0x4cd094d8)
0x4cd094d8   472  ldr x17, pc+24 (addr 0x000000004cd094f0)    ;; lazy deoptimization bailout 0
0x4cd094dc   476  add x17, x17, x16
0x4cd094e0   480  br x17
0x4cd094e4   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd094e8   488  d63f03e0       constant
0x4cd094ec   492  d503201f       constant
0x4cd094f0   496  4cb06000       constant
0x4cd094f4   500  00000000       constant


Safepoints (size = 21)
0x4cd0946c   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd093b8  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd093c0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd093d0  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd093ec  embedded object  (0x21004519 <the hole>)
0x4cd09440  code target (STUB)  (0x4cd06820)
0x4cd09464  code target (STUB)  (0x4cd06260)
0x4cd09470  code target (STUB)  (0x4cd068e0)
0x4cd0947c  constant pool (size 68)
0x4cd094d8  runtime entry
0x4cd094e4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArraySingleArgumentConstructorStub
name = ArraySingleArgumentConstructorStub_FAST_ELEMENTS
compiler = crankshaft
Instructions (size = 525)
0x4cd09300     0  movz x16, #0xa00000000
0x4cd09304     4  sub csp, jssp, #0x10 (16)
0x4cd09308     8  stp fp, lr, [jssp, #-16]!
0x4cd0930c    12  mov fp, jssp
0x4cd09310    16  sub csp, jssp, #0x8 (8)
0x4cd09314    20  sub jssp, jssp, #0x8 (8)
0x4cd09318    24  stur x16, [fp, #-8]
0x4cd0931c    28  ldr x3, [fp]
0x4cd09320    32  ldur x4, [x3, #-8]
0x4cd09324    36  movz x16, #0xe00000000
0x4cd09328    40  cmp x4, x16
0x4cd0932c    44  csel x4, fp, x3, ne
0x4cd09330    48  ldr x3, [x4, #16]
0x4cd09334    52  tbnz w3, #0, #+0xdc (addr 0x4cd09410)
0x4cd09338    56  asr x5, x3, #32
0x4cd0933c    60  movz w16, #0x257f
0x4cd09340    64  cmp w5, w16, lsl #3
0x4cd09344    68  b.hs #+0x17c (addr 0x4cd094c0)
0x4cd09348    72  cbz w5, #+0xc (addr 0x4cd09354)
0x4cd0934c    76  mov x3, x5
0x4cd09350    80  b #+0xc (addr 0x4cd0935c)
0x4cd09354    84  movz x3, #0x4
0x4cd09358    88  movz x5, #0x0
0x4cd0935c    92  lsl x4, x3, #32
0x4cd09360    96  lsl x5, x5, #32
0x4cd09364   100  lsl w6, w3, #3
0x4cd09368   104  add w6, w6, #0x10 (16)
0x4cd0936c   108  cmp w6, #0x96000 (614400)
0x4cd09370   112  b.hs #+0x158 (addr 0x4cd094c8)
0x4cd09374   116  add w0, w6, #0x20 (32)
0x4cd09378   120  sxtw x0, w0
0x4cd0937c   124  movz x2, #0xd2c0
0x4cd09380   128  movk x2, #0x166d, lsl #16
0x4cd09384   132  ldp x7, x16, [x2]
0x4cd09388   136  adds x6, x7, x0
0x4cd0938c   140  ccmp x6, x16, #nzCv, lo
0x4cd09390   144  b.hi #+0xa8 (addr 0x4cd09438)
0x4cd09394   148  str x6, [x2]
0x4cd09398   152  orr x7, x7, #0x1
0x4cd0939c   156  movz w0, #0x0
0x4cd093a0   160  stur x0, [x7, #31]
0x4cd093a4   164  ldur x0, [x1, #39]
0x4cd093a8   168  ldur x0, [x0, #39]
0x4cd093ac   172  movz x16, #0x187
0x4cd093b0   176  ldr x0, [x0, x16]
0x4cd093b4   180  stur x0, [x7, #-1]
0x4cd093b8   184  ldr x0, pc+208 (addr 0x000000004cd09488)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd093bc   188  stur x0, [x7, #7]
0x4cd093c0   192  ldr x0, pc+208 (addr 0x000000004cd09490)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd093c4   196  stur x0, [x7, #15]
0x4cd093c8   200  stur x5, [x7, #23]
0x4cd093cc   204  add x0, x7, #0x20 (32)
0x4cd093d0   208  ldr x1, pc+200 (addr 0x000000004cd09498)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd093d4   212  stur x1, [x0, #-1]
0x4cd093d8   216  stur x4, [x0, #7]
0x4cd093dc   220  stur x0, [x7, #15]
0x4cd093e0   224  cmp w3, #0x0 (0)
0x4cd093e4   228  b.le #+0x18 (addr 0x4cd093fc)
0x4cd093e8   232  sub w3, w3, #0x1 (1)
0x4cd093ec   236  ldr x1, pc+180 (addr 0x000000004cd094a0)    ;; object: 0x21004519 <the hole>
0x4cd093f0   240  add x2, x0, #0xf (15)
0x4cd093f4   244  str x1, [x2, w3, sxtw #3]
0x4cd093f8   248  b #-0x18 (addr 0x4cd093e0)
0x4cd093fc   252  mov x0, x7
0x4cd09400   256  mov jssp, fp
0x4cd09404   260  ldp fp, lr, [jssp], #16
0x4cd09408   264  add jssp, jssp, #0x10 (16)
0x4cd0940c   268  ret
0x4cd09410   272  ldur x16, [x3, #-1]
0x4cd09414   276  ldr x17, [x26, #120]
0x4cd09418   280  cmp x16, x17
0x4cd0941c   284  b.ne #+0xb4 (addr 0x4cd094d0)
0x4cd09420   288  ldur d29, [x3, #7]
0x4cd09424   292  fcvtzs w5, d29
0x4cd09428   296  scvtf d0, w5
0x4cd0942c   300  fcmp d29, d0
0x4cd09430   304  b.ne #+0xa0 (addr 0x4cd094d0)
0x4cd09434   308  b #-0xf8 (addr 0x4cd0933c)
0x4cd09438   312  movz x7, #0x0
0x4cd0943c   316  mov x16, lr
0x4cd09440   320  ldr x17, pc+104 (addr 0x000000004cd094a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd09444   324  blr x17
0x4cd09448   328  lsl x0, x0, #32
0x4cd0944c   332  movz x10, #0x0
0x4cd09450   336  sub csp, jssp, #0x10 (16)
0x4cd09454   340  stp x10, x0, [jssp, #-16]!
0x4cd09458   344  movz x0, #0x2
0x4cd0945c   348  movz x1, #0x5b88
0x4cd09460   352  movk x1, #0xe2, lsl #16
0x4cd09464   356  ldr x16, pc+76 (addr 0x000000004cd094b0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd09468   360  blr x16
0x4cd0946c   364  str x0, [jssp, #56]
0x4cd09470   368  ldr x16, pc+72 (addr 0x000000004cd094b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd09474   372  blr x16
0x4cd09478   376  b #-0xdc (addr 0x4cd0939c)
0x4cd0947c   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd09480   384  d63f03e0       constant
0x4cd09484   388  d503201f       constant
0x4cd09488   392  21004201       constant
0x4cd0948c   396  00000000       constant
0x4cd09490   400  21004201       constant
0x4cd09494   404  00000000       constant
0x4cd09498   408  2a804259       constant
0x4cd0949c   412  00000000       constant
0x4cd094a0   416  21004519       constant
0x4cd094a4   420  00000000       constant
0x4cd094a8   424  4cd06820       constant
0x4cd094ac   428  00000000       constant
0x4cd094b0   432  4cd06260       constant
0x4cd094b4   436  00000000       constant
0x4cd094b8   440  4cd068e0       constant
0x4cd094bc   444  00000000       constant
0x4cd094c0   448  movz x16, #0x0
0x4cd094c4   452  bl #+0x14 (addr 0x4cd094d8)
0x4cd094c8   456  movz x16, #0x8
0x4cd094cc   460  bl #+0xc (addr 0x4cd094d8)
0x4cd094d0   464  movz x16, #0x10
0x4cd094d4   468  bl #+0x4 (addr 0x4cd094d8)
0x4cd094d8   472  ldr x17, pc+24 (addr 0x000000004cd094f0)    ;; lazy deoptimization bailout 0
0x4cd094dc   476  add x17, x17, x16
0x4cd094e0   480  br x17
0x4cd094e4   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd094e8   488  d63f03e0       constant
0x4cd094ec   492  d503201f       constant
0x4cd094f0   496  4cb06000       constant
0x4cd094f4   500  00000000       constant


Safepoints (size = 21)
0x4cd0946c   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd093b8  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd093c0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd093d0  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd093ec  embedded object  (0x21004519 <the hole>)
0x4cd09440  code target (STUB)  (0x4cd06820)
0x4cd09464  code target (STUB)  (0x4cd06260)
0x4cd09470  code target (STUB)  (0x4cd068e0)
0x4cd0947c  constant pool (size 68)
0x4cd094d8  runtime entry
0x4cd094e4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 525)
0x4cd09580     0  movz x16, #0xa00000000
0x4cd09584     4  sub csp, jssp, #0x10 (16)
0x4cd09588     8  stp fp, lr, [jssp, #-16]!
0x4cd0958c    12  mov fp, jssp
0x4cd09590    16  sub csp, jssp, #0x8 (8)
0x4cd09594    20  sub jssp, jssp, #0x8 (8)
0x4cd09598    24  stur x16, [fp, #-8]
0x4cd0959c    28  ldr x3, [fp]
0x4cd095a0    32  ldur x4, [x3, #-8]
0x4cd095a4    36  movz x16, #0xe00000000
0x4cd095a8    40  cmp x4, x16
0x4cd095ac    44  csel x4, fp, x3, ne
0x4cd095b0    48  ldr x3, [x4, #16]
0x4cd095b4    52  tbnz w3, #0, #+0xdc (addr 0x4cd09690)
0x4cd095b8    56  asr x5, x3, #32
0x4cd095bc    60  movz w16, #0x257f
0x4cd095c0    64  cmp w5, w16, lsl #3
0x4cd095c4    68  b.hs #+0x17c (addr 0x4cd09740)
0x4cd095c8    72  cbz w5, #+0xc (addr 0x4cd095d4)
0x4cd095cc    76  mov x3, x5
0x4cd095d0    80  b #+0xc (addr 0x4cd095dc)
0x4cd095d4    84  movz x3, #0x4
0x4cd095d8    88  movz x5, #0x0
0x4cd095dc    92  lsl x4, x3, #32
0x4cd095e0    96  lsl x5, x5, #32
0x4cd095e4   100  lsl w6, w3, #3
0x4cd095e8   104  add w6, w6, #0x10 (16)
0x4cd095ec   108  cmp w6, #0x96000 (614400)
0x4cd095f0   112  b.hs #+0x158 (addr 0x4cd09748)
0x4cd095f4   116  add w0, w6, #0x20 (32)
0x4cd095f8   120  sxtw x0, w0
0x4cd095fc   124  movz x2, #0xd2c0
0x4cd09600   128  movk x2, #0x166d, lsl #16
0x4cd09604   132  ldp x7, x16, [x2]
0x4cd09608   136  adds x6, x7, x0
0x4cd0960c   140  ccmp x6, x16, #nzCv, lo
0x4cd09610   144  b.hi #+0xa8 (addr 0x4cd096b8)
0x4cd09614   148  str x6, [x2]
0x4cd09618   152  orr x7, x7, #0x1
0x4cd0961c   156  movz w0, #0x0
0x4cd09620   160  stur x0, [x7, #31]
0x4cd09624   164  ldur x0, [x1, #39]
0x4cd09628   168  ldur x0, [x0, #39]
0x4cd0962c   172  movz x16, #0x18f
0x4cd09630   176  ldr x0, [x0, x16]
0x4cd09634   180  stur x0, [x7, #-1]
0x4cd09638   184  ldr x0, pc+208 (addr 0x000000004cd09708)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0963c   188  stur x0, [x7, #7]
0x4cd09640   192  ldr x0, pc+208 (addr 0x000000004cd09710)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd09644   196  stur x0, [x7, #15]
0x4cd09648   200  stur x5, [x7, #23]
0x4cd0964c   204  add x0, x7, #0x20 (32)
0x4cd09650   208  ldr x1, pc+200 (addr 0x000000004cd09718)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd09654   212  stur x1, [x0, #-1]
0x4cd09658   216  stur x4, [x0, #7]
0x4cd0965c   220  stur x0, [x7, #15]
0x4cd09660   224  cmp w3, #0x0 (0)
0x4cd09664   228  b.le #+0x18 (addr 0x4cd0967c)
0x4cd09668   232  sub w3, w3, #0x1 (1)
0x4cd0966c   236  ldr x1, pc+180 (addr 0x000000004cd09720)    ;; object: 0x21004519 <the hole>
0x4cd09670   240  add x2, x0, #0xf (15)
0x4cd09674   244  str x1, [x2, w3, sxtw #3]
0x4cd09678   248  b #-0x18 (addr 0x4cd09660)
0x4cd0967c   252  mov x0, x7
0x4cd09680   256  mov jssp, fp
0x4cd09684   260  ldp fp, lr, [jssp], #16
0x4cd09688   264  add jssp, jssp, #0x10 (16)
0x4cd0968c   268  ret
0x4cd09690   272  ldur x16, [x3, #-1]
0x4cd09694   276  ldr x17, [x26, #120]
0x4cd09698   280  cmp x16, x17
0x4cd0969c   284  b.ne #+0xb4 (addr 0x4cd09750)
0x4cd096a0   288  ldur d29, [x3, #7]
0x4cd096a4   292  fcvtzs w5, d29
0x4cd096a8   296  scvtf d0, w5
0x4cd096ac   300  fcmp d29, d0
0x4cd096b0   304  b.ne #+0xa0 (addr 0x4cd09750)
0x4cd096b4   308  b #-0xf8 (addr 0x4cd095bc)
0x4cd096b8   312  movz x7, #0x0
0x4cd096bc   316  mov x16, lr
0x4cd096c0   320  ldr x17, pc+104 (addr 0x000000004cd09728)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd096c4   324  blr x17
0x4cd096c8   328  lsl x0, x0, #32
0x4cd096cc   332  movz x10, #0x0
0x4cd096d0   336  sub csp, jssp, #0x10 (16)
0x4cd096d4   340  stp x10, x0, [jssp, #-16]!
0x4cd096d8   344  movz x0, #0x2
0x4cd096dc   348  movz x1, #0x5b88
0x4cd096e0   352  movk x1, #0xe2, lsl #16
0x4cd096e4   356  ldr x16, pc+76 (addr 0x000000004cd09730)    ;; code: STUB, CEntryStub, minor: 5
0x4cd096e8   360  blr x16
0x4cd096ec   364  str x0, [jssp, #56]
0x4cd096f0   368  ldr x16, pc+72 (addr 0x000000004cd09738)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd096f4   372  blr x16
0x4cd096f8   376  b #-0xdc (addr 0x4cd0961c)
0x4cd096fc   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd09700   384  d63f03e0       constant
0x4cd09704   388  d503201f       constant
0x4cd09708   392  21004201       constant
0x4cd0970c   396  00000000       constant
0x4cd09710   400  21004201       constant
0x4cd09714   404  00000000       constant
0x4cd09718   408  2a804259       constant
0x4cd0971c   412  00000000       constant
0x4cd09720   416  21004519       constant
0x4cd09724   420  00000000       constant
0x4cd09728   424  4cd06820       constant
0x4cd0972c   428  00000000       constant
0x4cd09730   432  4cd06260       constant
0x4cd09734   436  00000000       constant
0x4cd09738   440  4cd068e0       constant
0x4cd0973c   444  00000000       constant
0x4cd09740   448  movz x16, #0x0
0x4cd09744   452  bl #+0x14 (addr 0x4cd09758)
0x4cd09748   456  movz x16, #0x8
0x4cd0974c   460  bl #+0xc (addr 0x4cd09758)
0x4cd09750   464  movz x16, #0x10
0x4cd09754   468  bl #+0x4 (addr 0x4cd09758)
0x4cd09758   472  ldr x17, pc+24 (addr 0x000000004cd09770)    ;; lazy deoptimization bailout 0
0x4cd0975c   476  add x17, x17, x16
0x4cd09760   480  br x17
0x4cd09764   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd09768   488  d63f03e0       constant
0x4cd0976c   492  d503201f       constant
0x4cd09770   496  4cb06000       constant
0x4cd09774   500  00000000       constant


Safepoints (size = 21)
0x4cd096ec   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd09638  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd09640  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd09650  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd0966c  embedded object  (0x21004519 <the hole>)
0x4cd096c0  code target (STUB)  (0x4cd06820)
0x4cd096e4  code target (STUB)  (0x4cd06260)
0x4cd096f0  code target (STUB)  (0x4cd068e0)
0x4cd096fc  constant pool (size 68)
0x4cd09758  runtime entry
0x4cd09764  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArraySingleArgumentConstructorStub
name = ArraySingleArgumentConstructorStub_FAST_HOLEY_ELEMENTS
compiler = crankshaft
Instructions (size = 525)
0x4cd09580     0  movz x16, #0xa00000000
0x4cd09584     4  sub csp, jssp, #0x10 (16)
0x4cd09588     8  stp fp, lr, [jssp, #-16]!
0x4cd0958c    12  mov fp, jssp
0x4cd09590    16  sub csp, jssp, #0x8 (8)
0x4cd09594    20  sub jssp, jssp, #0x8 (8)
0x4cd09598    24  stur x16, [fp, #-8]
0x4cd0959c    28  ldr x3, [fp]
0x4cd095a0    32  ldur x4, [x3, #-8]
0x4cd095a4    36  movz x16, #0xe00000000
0x4cd095a8    40  cmp x4, x16
0x4cd095ac    44  csel x4, fp, x3, ne
0x4cd095b0    48  ldr x3, [x4, #16]
0x4cd095b4    52  tbnz w3, #0, #+0xdc (addr 0x4cd09690)
0x4cd095b8    56  asr x5, x3, #32
0x4cd095bc    60  movz w16, #0x257f
0x4cd095c0    64  cmp w5, w16, lsl #3
0x4cd095c4    68  b.hs #+0x17c (addr 0x4cd09740)
0x4cd095c8    72  cbz w5, #+0xc (addr 0x4cd095d4)
0x4cd095cc    76  mov x3, x5
0x4cd095d0    80  b #+0xc (addr 0x4cd095dc)
0x4cd095d4    84  movz x3, #0x4
0x4cd095d8    88  movz x5, #0x0
0x4cd095dc    92  lsl x4, x3, #32
0x4cd095e0    96  lsl x5, x5, #32
0x4cd095e4   100  lsl w6, w3, #3
0x4cd095e8   104  add w6, w6, #0x10 (16)
0x4cd095ec   108  cmp w6, #0x96000 (614400)
0x4cd095f0   112  b.hs #+0x158 (addr 0x4cd09748)
0x4cd095f4   116  add w0, w6, #0x20 (32)
0x4cd095f8   120  sxtw x0, w0
0x4cd095fc   124  movz x2, #0xd2c0
0x4cd09600   128  movk x2, #0x166d, lsl #16
0x4cd09604   132  ldp x7, x16, [x2]
0x4cd09608   136  adds x6, x7, x0
0x4cd0960c   140  ccmp x6, x16, #nzCv, lo
0x4cd09610   144  b.hi #+0xa8 (addr 0x4cd096b8)
0x4cd09614   148  str x6, [x2]
0x4cd09618   152  orr x7, x7, #0x1
0x4cd0961c   156  movz w0, #0x0
0x4cd09620   160  stur x0, [x7, #31]
0x4cd09624   164  ldur x0, [x1, #39]
0x4cd09628   168  ldur x0, [x0, #39]
0x4cd0962c   172  movz x16, #0x18f
0x4cd09630   176  ldr x0, [x0, x16]
0x4cd09634   180  stur x0, [x7, #-1]
0x4cd09638   184  ldr x0, pc+208 (addr 0x000000004cd09708)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0963c   188  stur x0, [x7, #7]
0x4cd09640   192  ldr x0, pc+208 (addr 0x000000004cd09710)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd09644   196  stur x0, [x7, #15]
0x4cd09648   200  stur x5, [x7, #23]
0x4cd0964c   204  add x0, x7, #0x20 (32)
0x4cd09650   208  ldr x1, pc+200 (addr 0x000000004cd09718)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd09654   212  stur x1, [x0, #-1]
0x4cd09658   216  stur x4, [x0, #7]
0x4cd0965c   220  stur x0, [x7, #15]
0x4cd09660   224  cmp w3, #0x0 (0)
0x4cd09664   228  b.le #+0x18 (addr 0x4cd0967c)
0x4cd09668   232  sub w3, w3, #0x1 (1)
0x4cd0966c   236  ldr x1, pc+180 (addr 0x000000004cd09720)    ;; object: 0x21004519 <the hole>
0x4cd09670   240  add x2, x0, #0xf (15)
0x4cd09674   244  str x1, [x2, w3, sxtw #3]
0x4cd09678   248  b #-0x18 (addr 0x4cd09660)
0x4cd0967c   252  mov x0, x7
0x4cd09680   256  mov jssp, fp
0x4cd09684   260  ldp fp, lr, [jssp], #16
0x4cd09688   264  add jssp, jssp, #0x10 (16)
0x4cd0968c   268  ret
0x4cd09690   272  ldur x16, [x3, #-1]
0x4cd09694   276  ldr x17, [x26, #120]
0x4cd09698   280  cmp x16, x17
0x4cd0969c   284  b.ne #+0xb4 (addr 0x4cd09750)
0x4cd096a0   288  ldur d29, [x3, #7]
0x4cd096a4   292  fcvtzs w5, d29
0x4cd096a8   296  scvtf d0, w5
0x4cd096ac   300  fcmp d29, d0
0x4cd096b0   304  b.ne #+0xa0 (addr 0x4cd09750)
0x4cd096b4   308  b #-0xf8 (addr 0x4cd095bc)
0x4cd096b8   312  movz x7, #0x0
0x4cd096bc   316  mov x16, lr
0x4cd096c0   320  ldr x17, pc+104 (addr 0x000000004cd09728)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd096c4   324  blr x17
0x4cd096c8   328  lsl x0, x0, #32
0x4cd096cc   332  movz x10, #0x0
0x4cd096d0   336  sub csp, jssp, #0x10 (16)
0x4cd096d4   340  stp x10, x0, [jssp, #-16]!
0x4cd096d8   344  movz x0, #0x2
0x4cd096dc   348  movz x1, #0x5b88
0x4cd096e0   352  movk x1, #0xe2, lsl #16
0x4cd096e4   356  ldr x16, pc+76 (addr 0x000000004cd09730)    ;; code: STUB, CEntryStub, minor: 5
0x4cd096e8   360  blr x16
0x4cd096ec   364  str x0, [jssp, #56]
0x4cd096f0   368  ldr x16, pc+72 (addr 0x000000004cd09738)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd096f4   372  blr x16
0x4cd096f8   376  b #-0xdc (addr 0x4cd0961c)
0x4cd096fc   380  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd09700   384  d63f03e0       constant
0x4cd09704   388  d503201f       constant
0x4cd09708   392  21004201       constant
0x4cd0970c   396  00000000       constant
0x4cd09710   400  21004201       constant
0x4cd09714   404  00000000       constant
0x4cd09718   408  2a804259       constant
0x4cd0971c   412  00000000       constant
0x4cd09720   416  21004519       constant
0x4cd09724   420  00000000       constant
0x4cd09728   424  4cd06820       constant
0x4cd0972c   428  00000000       constant
0x4cd09730   432  4cd06260       constant
0x4cd09734   436  00000000       constant
0x4cd09738   440  4cd068e0       constant
0x4cd0973c   444  00000000       constant
0x4cd09740   448  movz x16, #0x0
0x4cd09744   452  bl #+0x14 (addr 0x4cd09758)
0x4cd09748   456  movz x16, #0x8
0x4cd0974c   460  bl #+0xc (addr 0x4cd09758)
0x4cd09750   464  movz x16, #0x10
0x4cd09754   468  bl #+0x4 (addr 0x4cd09758)
0x4cd09758   472  ldr x17, pc+24 (addr 0x000000004cd09770)    ;; lazy deoptimization bailout 0
0x4cd0975c   476  add x17, x17, x16
0x4cd09760   480  br x17
0x4cd09764   484  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd09768   488  d63f03e0       constant
0x4cd0976c   492  d503201f       constant
0x4cd09770   496  4cb06000       constant
0x4cd09774   500  00000000       constant


Safepoints (size = 21)
0x4cd096ec   364  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd09638  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd09640  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd09650  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd0966c  embedded object  (0x21004519 <the hole>)
0x4cd096c0  code target (STUB)  (0x4cd06820)
0x4cd096e4  code target (STUB)  (0x4cd06260)
0x4cd096f0  code target (STUB)  (0x4cd068e0)
0x4cd096fc  constant pool (size 68)
0x4cd09758  runtime entry
0x4cd09764  constant pool (size 20)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0x4cd09800     0  adr xzr, #+0x40 (addr 0x4cd09840)
0x4cd09804     4  adr xzr, #+0x360 (addr 0x4cd09b64)
0x4cd09808     8  ldr x16, pc+1736 (addr 0x000000004cd09ed0)    ;; external reference (store_buffer_top)
0x4cd0980c    12  ldr x3, [x16]
0x4cd09810    16  str x4, [x3], #8
0x4cd09814    20  str x3, [x16]
0x4cd09818    24  tst x3, #0x1ffff
0x4cd0981c    28  b.eq #+0x8 (addr 0x4cd09824)
0x4cd09820    32  ret
0x4cd09824    36  sub csp, jssp, #0x8 (8)
0x4cd09828    40  str lr, [jssp, #-8]!
0x4cd0982c    44  ldr x17, pc+1708 (addr 0x000000004cd09ed8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd09830    48  blr x17
0x4cd09834    52  ldr lr, [jssp], #8
0x4cd09838    56  ret
0x4cd0983c    60  ret
0x4cd09840    64  sub csp, jssp, #0x10 (16)
0x4cd09844    68  stp x1, x0, [jssp, #-16]!
0x4cd09848    72  ldr x3, [x4]
0x4cd0984c    76  and x16, x3, #0xfffffffffff00000
0x4cd09850    80  ldr x16, [x16, #8]
0x4cd09854    84  tst x16, #0x18
0x4cd09858    88  b.eq #+0x1d8 (addr 0x4cd09a30)
0x4cd0985c    92  and x16, x7, #0xfffffffffff00000
0x4cd09860    96  ldr x16, [x16, #8]
0x4cd09864   100  tst x16, #0x18
0x4cd09868   104  b.ne #+0x1c8 (addr 0x4cd09a30)
0x4cd0986c   108  and x3, x7, #0xfffffffffff00000
0x4cd09870   112  ldr x0, [x3, #104]
0x4cd09874   116  subs x0, x0, #0x1 (1)
0x4cd09878   120  str x0, [x3, #104]
0x4cd0987c   124  b.mi #+0xc4 (addr 0x4cd09940)
0x4cd09880   128  ubfx x16, x7, #8, #12
0x4cd09884   132  and x3, x7, #0xfffffffffff00000
0x4cd09888   136  add x3, x3, x16, lsl #2
0x4cd0988c   140  ubfx x0, x7, #3, #5
0x4cd09890   144  ldr x3, [x3, #360]
0x4cd09894   148  lsr x3, x3, x0
0x4cd09898   152  tbz w3, #0, #+0x8 (addr 0x4cd098a0)
0x4cd0989c   156  tbnz w3, #1, #+0x3c (addr 0x4cd098d8)
0x4cd098a0   160  ldp x1, x0, [jssp], #16
0x4cd098a4   164  ldr x16, pc+1596 (addr 0x000000004cd09ee0)    ;; external reference (store_buffer_top)
0x4cd098a8   168  ldr x3, [x16]
0x4cd098ac   172  str x4, [x3], #8
0x4cd098b0   176  str x3, [x16]
0x4cd098b4   180  tst x3, #0x1ffff
0x4cd098b8   184  b.eq #+0x8 (addr 0x4cd098c0)
0x4cd098bc   188  ret
0x4cd098c0   192  sub csp, jssp, #0x8 (8)
0x4cd098c4   196  str lr, [jssp, #-8]!
0x4cd098c8   200  ldr x17, pc+1568 (addr 0x000000004cd09ee8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd098cc   204  blr x17
0x4cd098d0   208  ldr lr, [jssp], #8
0x4cd098d4   212  ret
0x4cd098d8   216  ldr x3, [x4]
0x4cd098dc   220  sub csp, jssp, #0x10 (16)
0x4cd098e0   224  stp x7, x4, [jssp, #-16]!
0x4cd098e4   228  ubfx x16, x3, #8, #12
0x4cd098e8   232  and x0, x3, #0xfffffffffff00000
0x4cd098ec   236  add x0, x0, x16, lsl #2
0x4cd098f0   240  ubfx x7, x3, #3, #5
0x4cd098f4   244  ldr x4, [x0, #360]
0x4cd098f8   248  lsr x4, x4, x7
0x4cd098fc   252  tbz w4, #0, #+0x40 (addr 0x4cd0993c)
0x4cd09900   256  ldp x7, x4, [jssp], #16
0x4cd09904   260  ldp x1, x0, [jssp], #16
0x4cd09908   264  ldr x16, pc+1512 (addr 0x000000004cd09ef0)    ;; external reference (store_buffer_top)
0x4cd0990c   268  ldr x3, [x16]
0x4cd09910   272  str x4, [x3], #8
0x4cd09914   276  str x3, [x16]
0x4cd09918   280  tst x3, #0x1ffff
0x4cd0991c   284  b.eq #+0x8 (addr 0x4cd09924)
0x4cd09920   288  ret
0x4cd09924   292  sub csp, jssp, #0x8 (8)
0x4cd09928   296  str lr, [jssp, #-8]!
0x4cd0992c   300  ldr x17, pc+1484 (addr 0x000000004cd09ef8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd09930   304  blr x17
0x4cd09934   308  ldr lr, [jssp], #8
0x4cd09938   312  ret
0x4cd0993c   316  ldp x7, x4, [jssp], #16
0x4cd09940   320  sub csp, jssp, #0x78 (120)
0x4cd09944   324  stp x14, x15, [jssp, #-32]!
0x4cd09948   328  stp x18, lr, [jssp, #16]
0x4cd0994c   332  stp x10, x11, [jssp, #-32]!
0x4cd09950   336  stp x12, x13, [jssp, #16]
0x4cd09954   340  stp x6, x7, [jssp, #-32]!
0x4cd09958   344  stp x8, x9, [jssp, #16]
0x4cd0995c   348  stp x2, x4, [jssp, #-24]!
0x4cd09960   352  str x5, [jssp, #16]
0x4cd09964   356  sub csp, jssp, #0xb0 (176)
0x4cd09968   360  stp d26, d27, [jssp, #-32]!
0x4cd0996c   364  stp d28, d29, [jssp, #16]
0x4cd09970   368  stp d22, d23, [jssp, #-32]!
0x4cd09974   372  stp d24, d25, [jssp, #16]
0x4cd09978   376  stp d18, d19, [jssp, #-32]!
0x4cd0997c   380  stp d20, d21, [jssp, #16]
0x4cd09980   384  stp d6, d7, [jssp, #-32]!
0x4cd09984   388  stp d16, d17, [jssp, #16]
0x4cd09988   392  stp d2, d3, [jssp, #-32]!
0x4cd0998c   396  stp d4, d5, [jssp, #16]
0x4cd09990   400  stp d0, d1, [jssp, #-16]!
0x4cd09994   404  mov x0, x7
0x4cd09998   408  mov x1, x4
0x4cd0999c   412  ldr x2, pc+1380 (addr 0x000000004cd09f00)    ;; external reference (isolate)
0x4cd099a0   416  ldr x16, pc+1384 (addr 0x000000004cd09f08)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd099a4   420  and csp, jssp, #0xfffffffffffffff0
0x4cd099a8   424  blr x16
0x4cd099ac   428  ldp d2, d3, [jssp, #16]
0x4cd099b0   432  ldp d0, d1, [jssp], #32
0x4cd099b4   436  ldp d6, d7, [jssp, #16]
0x4cd099b8   440  ldp d4, d5, [jssp], #32
0x4cd099bc   444  ldp d18, d19, [jssp, #16]
0x4cd099c0   448  ldp d16, d17, [jssp], #32
0x4cd099c4   452  ldp d22, d23, [jssp, #16]
0x4cd099c8   456  ldp d20, d21, [jssp], #32
0x4cd099cc   460  ldp d26, d27, [jssp, #16]
0x4cd099d0   464  ldp d24, d25, [jssp], #32
0x4cd099d4   468  ldp d28, d29, [jssp], #16
0x4cd099d8   472  ldp x5, x6, [jssp, #16]
0x4cd099dc   476  ldp x2, x4, [jssp], #32
0x4cd099e0   480  ldp x9, x10, [jssp, #16]
0x4cd099e4   484  ldp x7, x8, [jssp], #32
0x4cd099e8   488  ldp x13, x14, [jssp, #16]
0x4cd099ec   492  ldp x11, x12, [jssp], #32
0x4cd099f0   496  ldr lr, [jssp, #16]
0x4cd099f4   500  ldp x15, x18, [jssp], #24
0x4cd099f8   504  ldp x1, x0, [jssp], #16
0x4cd099fc   508  ldr x16, pc+1300 (addr 0x000000004cd09f10)    ;; external reference (store_buffer_top)
0x4cd09a00   512  ldr x3, [x16]
0x4cd09a04   516  str x4, [x3], #8
0x4cd09a08   520  str x3, [x16]
0x4cd09a0c   524  tst x3, #0x1ffff
0x4cd09a10   528  b.eq #+0x8 (addr 0x4cd09a18)
0x4cd09a14   532  ret
0x4cd09a18   536  sub csp, jssp, #0x8 (8)
0x4cd09a1c   540  str lr, [jssp, #-8]!
0x4cd09a20   544  ldr x17, pc+1272 (addr 0x000000004cd09f18)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd09a24   548  blr x17
0x4cd09a28   552  ldr lr, [jssp], #8
0x4cd09a2c   556  ret
0x4cd09a30   560  and x3, x7, #0xfffffffffff00000
0x4cd09a34   564  ldr x0, [x3, #104]
0x4cd09a38   568  subs x0, x0, #0x1 (1)
0x4cd09a3c   572  str x0, [x3, #104]
0x4cd09a40   576  b.mi #+0x64 (addr 0x4cd09aa4)
0x4cd09a44   580  ubfx x16, x7, #8, #12
0x4cd09a48   584  and x3, x7, #0xfffffffffff00000
0x4cd09a4c   588  add x3, x3, x16, lsl #2
0x4cd09a50   592  ubfx x0, x7, #3, #5
0x4cd09a54   596  ldr x3, [x3, #360]
0x4cd09a58   600  lsr x3, x3, x0
0x4cd09a5c   604  tbz w3, #0, #+0x8 (addr 0x4cd09a64)
0x4cd09a60   608  tbnz w3, #1, #+0xc (addr 0x4cd09a6c)
0x4cd09a64   612  ldp x1, x0, [jssp], #16
0x4cd09a68   616  ret
0x4cd09a6c   620  ldr x3, [x4]
0x4cd09a70   624  sub csp, jssp, #0x10 (16)
0x4cd09a74   628  stp x7, x4, [jssp, #-16]!
0x4cd09a78   632  ubfx x16, x3, #8, #12
0x4cd09a7c   636  and x0, x3, #0xfffffffffff00000
0x4cd09a80   640  add x0, x0, x16, lsl #2
0x4cd09a84   644  ubfx x7, x3, #3, #5
0x4cd09a88   648  ldr x4, [x0, #360]
0x4cd09a8c   652  lsr x4, x4, x7
0x4cd09a90   656  tbz w4, #0, #+0x10 (addr 0x4cd09aa0)
0x4cd09a94   660  ldp x7, x4, [jssp], #16
0x4cd09a98   664  ldp x1, x0, [jssp], #16
0x4cd09a9c   668  ret
0x4cd09aa0   672  ldp x7, x4, [jssp], #16
0x4cd09aa4   676  sub csp, jssp, #0x78 (120)
0x4cd09aa8   680  stp x14, x15, [jssp, #-32]!
0x4cd09aac   684  stp x18, lr, [jssp, #16]
0x4cd09ab0   688  stp x10, x11, [jssp, #-32]!
0x4cd09ab4   692  stp x12, x13, [jssp, #16]
0x4cd09ab8   696  stp x6, x7, [jssp, #-32]!
0x4cd09abc   700  stp x8, x9, [jssp, #16]
0x4cd09ac0   704  stp x2, x4, [jssp, #-24]!
0x4cd09ac4   708  str x5, [jssp, #16]
0x4cd09ac8   712  sub csp, jssp, #0xb0 (176)
0x4cd09acc   716  stp d26, d27, [jssp, #-32]!
0x4cd09ad0   720  stp d28, d29, [jssp, #16]
0x4cd09ad4   724  stp d22, d23, [jssp, #-32]!
0x4cd09ad8   728  stp d24, d25, [jssp, #16]
0x4cd09adc   732  stp d18, d19, [jssp, #-32]!
0x4cd09ae0   736  stp d20, d21, [jssp, #16]
0x4cd09ae4   740  stp d6, d7, [jssp, #-32]!
0x4cd09ae8   744  stp d16, d17, [jssp, #16]
0x4cd09aec   748  stp d2, d3, [jssp, #-32]!
0x4cd09af0   752  stp d4, d5, [jssp, #16]
0x4cd09af4   756  stp d0, d1, [jssp, #-16]!
0x4cd09af8   760  mov x0, x7
0x4cd09afc   764  mov x1, x4
0x4cd09b00   768  ldr x2, pc+1056 (addr 0x000000004cd09f20)    ;; external reference (isolate)
0x4cd09b04   772  ldr x16, pc+1060 (addr 0x000000004cd09f28)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd09b08   776  and csp, jssp, #0xfffffffffffffff0
0x4cd09b0c   780  blr x16
0x4cd09b10   784  ldp d2, d3, [jssp, #16]
0x4cd09b14   788  ldp d0, d1, [jssp], #32
0x4cd09b18   792  ldp d6, d7, [jssp, #16]
0x4cd09b1c   796  ldp d4, d5, [jssp], #32
0x4cd09b20   800  ldp d18, d19, [jssp, #16]
0x4cd09b24   804  ldp d16, d17, [jssp], #32
0x4cd09b28   808  ldp d22, d23, [jssp, #16]
0x4cd09b2c   812  ldp d20, d21, [jssp], #32
0x4cd09b30   816  ldp d26, d27, [jssp, #16]
0x4cd09b34   820  ldp d24, d25, [jssp], #32
0x4cd09b38   824  ldp d28, d29, [jssp], #16
0x4cd09b3c   828  ldp x5, x6, [jssp, #16]
0x4cd09b40   832  ldp x2, x4, [jssp], #32
0x4cd09b44   836  ldp x9, x10, [jssp, #16]
0x4cd09b48   840  ldp x7, x8, [jssp], #32
0x4cd09b4c   844  ldp x13, x14, [jssp, #16]
0x4cd09b50   848  ldp x11, x12, [jssp], #32
0x4cd09b54   852  ldr lr, [jssp, #16]
0x4cd09b58   856  ldp x15, x18, [jssp], #24
0x4cd09b5c   860  ldp x1, x0, [jssp], #16
0x4cd09b60   864  ret
0x4cd09b64   868  sub csp, jssp, #0x10 (16)
0x4cd09b68   872  stp x1, x0, [jssp, #-16]!
0x4cd09b6c   876  ldr x3, [x4]
0x4cd09b70   880  and x16, x3, #0xfffffffffff00000
0x4cd09b74   884  ldr x16, [x16, #8]
0x4cd09b78   888  tst x16, #0x18
0x4cd09b7c   892  b.eq #+0x1f8 (addr 0x4cd09d74)
0x4cd09b80   896  and x16, x7, #0xfffffffffff00000
0x4cd09b84   900  ldr x16, [x16, #8]
0x4cd09b88   904  tst x16, #0x18
0x4cd09b8c   908  b.ne #+0x1e8 (addr 0x4cd09d74)
0x4cd09b90   912  and x3, x7, #0xfffffffffff00000
0x4cd09b94   916  ldr x0, [x3, #104]
0x4cd09b98   920  subs x0, x0, #0x1 (1)
0x4cd09b9c   924  str x0, [x3, #104]
0x4cd09ba0   928  b.mi #+0xe4 (addr 0x4cd09c84)
0x4cd09ba4   932  ubfx x16, x7, #8, #12
0x4cd09ba8   936  and x3, x7, #0xfffffffffff00000
0x4cd09bac   940  add x3, x3, x16, lsl #2
0x4cd09bb0   944  ubfx x0, x7, #3, #5
0x4cd09bb4   948  ldr x3, [x3, #360]
0x4cd09bb8   952  lsr x3, x3, x0
0x4cd09bbc   956  tbz w3, #0, #+0x8 (addr 0x4cd09bc4)
0x4cd09bc0   960  tbnz w3, #1, #+0x3c (addr 0x4cd09bfc)
0x4cd09bc4   964  ldp x1, x0, [jssp], #16
0x4cd09bc8   968  ldr x16, pc+872 (addr 0x000000004cd09f30)    ;; external reference (store_buffer_top)
0x4cd09bcc   972  ldr x3, [x16]
0x4cd09bd0   976  str x4, [x3], #8
0x4cd09bd4   980  str x3, [x16]
0x4cd09bd8   984  tst x3, #0x1ffff
0x4cd09bdc   988  b.eq #+0x8 (addr 0x4cd09be4)
0x4cd09be0   992  ret
0x4cd09be4   996  sub csp, jssp, #0x8 (8)
0x4cd09be8  1000  str lr, [jssp, #-8]!
0x4cd09bec  1004  ldr x17, pc+844 (addr 0x000000004cd09f38)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd09bf0  1008  blr x17
0x4cd09bf4  1012  ldr lr, [jssp], #8
0x4cd09bf8  1016  ret
0x4cd09bfc  1020  ldr x3, [x4]
0x4cd09c00  1024  and x0, x3, #0xfffffffffff00000
0x4cd09c04  1028  ldr x0, [x0, #8]
0x4cd09c08  1032  tbz w0, #6, #+0x18 (addr 0x4cd09c20)
0x4cd09c0c  1036  and x0, x7, #0xfffffffffff00000
0x4cd09c10  1040  ldr x0, [x0, #8]
0x4cd09c14  1044  movz x16, #0x58
0x4cd09c18  1048  tst x0, x16
0x4cd09c1c  1052  b.eq #+0x68 (addr 0x4cd09c84)
0x4cd09c20  1056  sub csp, jssp, #0x10 (16)
0x4cd09c24  1060  stp x7, x4, [jssp, #-16]!
0x4cd09c28  1064  ubfx x16, x3, #8, #12
0x4cd09c2c  1068  and x0, x3, #0xfffffffffff00000
0x4cd09c30  1072  add x0, x0, x16, lsl #2
0x4cd09c34  1076  ubfx x7, x3, #3, #5
0x4cd09c38  1080  ldr x4, [x0, #360]
0x4cd09c3c  1084  lsr x4, x4, x7
0x4cd09c40  1088  tbz w4, #0, #+0x40 (addr 0x4cd09c80)
0x4cd09c44  1092  ldp x7, x4, [jssp], #16
0x4cd09c48  1096  ldp x1, x0, [jssp], #16
0x4cd09c4c  1100  ldr x16, pc+756 (addr 0x000000004cd09f40)    ;; external reference (store_buffer_top)
0x4cd09c50  1104  ldr x3, [x16]
0x4cd09c54  1108  str x4, [x3], #8
0x4cd09c58  1112  str x3, [x16]
0x4cd09c5c  1116  tst x3, #0x1ffff
0x4cd09c60  1120  b.eq #+0x8 (addr 0x4cd09c68)
0x4cd09c64  1124  ret
0x4cd09c68  1128  sub csp, jssp, #0x8 (8)
0x4cd09c6c  1132  str lr, [jssp, #-8]!
0x4cd09c70  1136  ldr x17, pc+728 (addr 0x000000004cd09f48)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd09c74  1140  blr x17
0x4cd09c78  1144  ldr lr, [jssp], #8
0x4cd09c7c  1148  ret
0x4cd09c80  1152  ldp x7, x4, [jssp], #16
0x4cd09c84  1156  sub csp, jssp, #0x78 (120)
0x4cd09c88  1160  stp x14, x15, [jssp, #-32]!
0x4cd09c8c  1164  stp x18, lr, [jssp, #16]
0x4cd09c90  1168  stp x10, x11, [jssp, #-32]!
0x4cd09c94  1172  stp x12, x13, [jssp, #16]
0x4cd09c98  1176  stp x6, x7, [jssp, #-32]!
0x4cd09c9c  1180  stp x8, x9, [jssp, #16]
0x4cd09ca0  1184  stp x2, x4, [jssp, #-24]!
0x4cd09ca4  1188  str x5, [jssp, #16]
0x4cd09ca8  1192  sub csp, jssp, #0xb0 (176)
0x4cd09cac  1196  stp d26, d27, [jssp, #-32]!
0x4cd09cb0  1200  stp d28, d29, [jssp, #16]
0x4cd09cb4  1204  stp d22, d23, [jssp, #-32]!
0x4cd09cb8  1208  stp d24, d25, [jssp, #16]
0x4cd09cbc  1212  stp d18, d19, [jssp, #-32]!
0x4cd09cc0  1216  stp d20, d21, [jssp, #16]
0x4cd09cc4  1220  stp d6, d7, [jssp, #-32]!
0x4cd09cc8  1224  stp d16, d17, [jssp, #16]
0x4cd09ccc  1228  stp d2, d3, [jssp, #-32]!
0x4cd09cd0  1232  stp d4, d5, [jssp, #16]
0x4cd09cd4  1236  stp d0, d1, [jssp, #-16]!
0x4cd09cd8  1240  mov x0, x7
0x4cd09cdc  1244  mov x1, x4
0x4cd09ce0  1248  ldr x2, pc+624 (addr 0x000000004cd09f50)    ;; external reference (isolate)
0x4cd09ce4  1252  ldr x16, pc+628 (addr 0x000000004cd09f58)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd09ce8  1256  and csp, jssp, #0xfffffffffffffff0
0x4cd09cec  1260  blr x16
0x4cd09cf0  1264  ldp d2, d3, [jssp, #16]
0x4cd09cf4  1268  ldp d0, d1, [jssp], #32
0x4cd09cf8  1272  ldp d6, d7, [jssp, #16]
0x4cd09cfc  1276  ldp d4, d5, [jssp], #32
0x4cd09d00  1280  ldp d18, d19, [jssp, #16]
0x4cd09d04  1284  ldp d16, d17, [jssp], #32
0x4cd09d08  1288  ldp d22, d23, [jssp, #16]
0x4cd09d0c  1292  ldp d20, d21, [jssp], #32
0x4cd09d10  1296  ldp d26, d27, [jssp, #16]
0x4cd09d14  1300  ldp d24, d25, [jssp], #32
0x4cd09d18  1304  ldp d28, d29, [jssp], #16
0x4cd09d1c  1308  ldp x5, x6, [jssp, #16]
0x4cd09d20  1312  ldp x2, x4, [jssp], #32
0x4cd09d24  1316  ldp x9, x10, [jssp, #16]
0x4cd09d28  1320  ldp x7, x8, [jssp], #32
0x4cd09d2c  1324  ldp x13, x14, [jssp, #16]
0x4cd09d30  1328  ldp x11, x12, [jssp], #32
0x4cd09d34  1332  ldr lr, [jssp, #16]
0x4cd09d38  1336  ldp x15, x18, [jssp], #24
0x4cd09d3c  1340  ldp x1, x0, [jssp], #16
0x4cd09d40  1344  ldr x16, pc+544 (addr 0x000000004cd09f60)    ;; external reference (store_buffer_top)
0x4cd09d44  1348  ldr x3, [x16]
0x4cd09d48  1352  str x4, [x3], #8
0x4cd09d4c  1356  str x3, [x16]
0x4cd09d50  1360  tst x3, #0x1ffff
0x4cd09d54  1364  b.eq #+0x8 (addr 0x4cd09d5c)
0x4cd09d58  1368  ret
0x4cd09d5c  1372  sub csp, jssp, #0x8 (8)
0x4cd09d60  1376  str lr, [jssp, #-8]!
0x4cd09d64  1380  ldr x17, pc+516 (addr 0x000000004cd09f68)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd09d68  1384  blr x17
0x4cd09d6c  1388  ldr lr, [jssp], #8
0x4cd09d70  1392  ret
0x4cd09d74  1396  and x3, x7, #0xfffffffffff00000
0x4cd09d78  1400  ldr x0, [x3, #104]
0x4cd09d7c  1404  subs x0, x0, #0x1 (1)
0x4cd09d80  1408  str x0, [x3, #104]
0x4cd09d84  1412  b.mi #+0x84 (addr 0x4cd09e08)
0x4cd09d88  1416  ubfx x16, x7, #8, #12
0x4cd09d8c  1420  and x3, x7, #0xfffffffffff00000
0x4cd09d90  1424  add x3, x3, x16, lsl #2
0x4cd09d94  1428  ubfx x0, x7, #3, #5
0x4cd09d98  1432  ldr x3, [x3, #360]
0x4cd09d9c  1436  lsr x3, x3, x0
0x4cd09da0  1440  tbz w3, #0, #+0x8 (addr 0x4cd09da8)
0x4cd09da4  1444  tbnz w3, #1, #+0xc (addr 0x4cd09db0)
0x4cd09da8  1448  ldp x1, x0, [jssp], #16
0x4cd09dac  1452  ret
0x4cd09db0  1456  ldr x3, [x4]
0x4cd09db4  1460  and x0, x3, #0xfffffffffff00000
0x4cd09db8  1464  ldr x0, [x0, #8]
0x4cd09dbc  1468  tbz w0, #6, #+0x18 (addr 0x4cd09dd4)
0x4cd09dc0  1472  and x0, x7, #0xfffffffffff00000
0x4cd09dc4  1476  ldr x0, [x0, #8]
0x4cd09dc8  1480  movz x16, #0x58
0x4cd09dcc  1484  tst x0, x16
0x4cd09dd0  1488  b.eq #+0x38 (addr 0x4cd09e08)
0x4cd09dd4  1492  sub csp, jssp, #0x10 (16)
0x4cd09dd8  1496  stp x7, x4, [jssp, #-16]!
0x4cd09ddc  1500  ubfx x16, x3, #8, #12
0x4cd09de0  1504  and x0, x3, #0xfffffffffff00000
0x4cd09de4  1508  add x0, x0, x16, lsl #2
0x4cd09de8  1512  ubfx x7, x3, #3, #5
0x4cd09dec  1516  ldr x4, [x0, #360]
0x4cd09df0  1520  lsr x4, x4, x7
0x4cd09df4  1524  tbz w4, #0, #+0x10 (addr 0x4cd09e04)
0x4cd09df8  1528  ldp x7, x4, [jssp], #16
0x4cd09dfc  1532  ldp x1, x0, [jssp], #16
0x4cd09e00  1536  ret
0x4cd09e04  1540  ldp x7, x4, [jssp], #16
0x4cd09e08  1544  sub csp, jssp, #0x78 (120)
0x4cd09e0c  1548  stp x14, x15, [jssp, #-32]!
0x4cd09e10  1552  stp x18, lr, [jssp, #16]
0x4cd09e14  1556  stp x10, x11, [jssp, #-32]!
0x4cd09e18  1560  stp x12, x13, [jssp, #16]
0x4cd09e1c  1564  stp x6, x7, [jssp, #-32]!
0x4cd09e20  1568  stp x8, x9, [jssp, #16]
0x4cd09e24  1572  stp x2, x4, [jssp, #-24]!
0x4cd09e28  1576  str x5, [jssp, #16]
0x4cd09e2c  1580  sub csp, jssp, #0xb0 (176)
0x4cd09e30  1584  stp d26, d27, [jssp, #-32]!
0x4cd09e34  1588  stp d28, d29, [jssp, #16]
0x4cd09e38  1592  stp d22, d23, [jssp, #-32]!
0x4cd09e3c  1596  stp d24, d25, [jssp, #16]
0x4cd09e40  1600  stp d18, d19, [jssp, #-32]!
0x4cd09e44  1604  stp d20, d21, [jssp, #16]
0x4cd09e48  1608  stp d6, d7, [jssp, #-32]!
0x4cd09e4c  1612  stp d16, d17, [jssp, #16]
0x4cd09e50  1616  stp d2, d3, [jssp, #-32]!
0x4cd09e54  1620  stp d4, d5, [jssp, #16]
0x4cd09e58  1624  stp d0, d1, [jssp, #-16]!
0x4cd09e5c  1628  mov x0, x7
0x4cd09e60  1632  mov x1, x4
0x4cd09e64  1636  ldr x2, pc+268 (addr 0x000000004cd09f70)    ;; external reference (isolate)
0x4cd09e68  1640  ldr x16, pc+272 (addr 0x000000004cd09f78)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd09e6c  1644  and csp, jssp, #0xfffffffffffffff0
0x4cd09e70  1648  blr x16
0x4cd09e74  1652  ldp d2, d3, [jssp, #16]
0x4cd09e78  1656  ldp d0, d1, [jssp], #32
0x4cd09e7c  1660  ldp d6, d7, [jssp, #16]
0x4cd09e80  1664  ldp d4, d5, [jssp], #32
0x4cd09e84  1668  ldp d18, d19, [jssp, #16]
0x4cd09e88  1672  ldp d16, d17, [jssp], #32
0x4cd09e8c  1676  ldp d22, d23, [jssp, #16]
0x4cd09e90  1680  ldp d20, d21, [jssp], #32
0x4cd09e94  1684  ldp d26, d27, [jssp, #16]
0x4cd09e98  1688  ldp d24, d25, [jssp], #32
0x4cd09e9c  1692  ldp d28, d29, [jssp], #16
0x4cd09ea0  1696  ldp x5, x6, [jssp, #16]
0x4cd09ea4  1700  ldp x2, x4, [jssp], #32
0x4cd09ea8  1704  ldp x9, x10, [jssp, #16]
0x4cd09eac  1708  ldp x7, x8, [jssp], #32
0x4cd09eb0  1712  ldp x13, x14, [jssp, #16]
0x4cd09eb4  1716  ldp x11, x12, [jssp], #32
0x4cd09eb8  1720  ldr lr, [jssp, #16]
0x4cd09ebc  1724  ldp x15, x18, [jssp], #24
0x4cd09ec0  1728  ldp x1, x0, [jssp], #16
0x4cd09ec4  1732  ret
0x4cd09ec8  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd09ecc  1740  d63f03e0       constant
0x4cd09ed0  1744  166dd8c0       constant
0x4cd09ed4  1748  00000000       constant
0x4cd09ed8  1752  4cd065a0       constant
0x4cd09edc  1756  00000000       constant
0x4cd09ee0  1760  166dd8c0       constant
0x4cd09ee4  1764  00000000       constant
0x4cd09ee8  1768  4cd065a0       constant
0x4cd09eec  1772  00000000       constant
0x4cd09ef0  1776  166dd8c0       constant
0x4cd09ef4  1780  00000000       constant
0x4cd09ef8  1784  4cd065a0       constant
0x4cd09efc  1788  00000000       constant
0x4cd09f00  1792  166dc2d0       constant
0x4cd09f04  1796  00000000       constant
0x4cd09f08  1800  00c2d958       constant
0x4cd09f0c  1804  00000000       constant
0x4cd09f10  1808  166dd8c0       constant
0x4cd09f14  1812  00000000       constant
0x4cd09f18  1816  4cd065a0       constant
0x4cd09f1c  1820  00000000       constant
0x4cd09f20  1824  166dc2d0       constant
0x4cd09f24  1828  00000000       constant
0x4cd09f28  1832  00c2d958       constant
0x4cd09f2c  1836  00000000       constant
0x4cd09f30  1840  166dd8c0       constant
0x4cd09f34  1844  00000000       constant
0x4cd09f38  1848  4cd065a0       constant
0x4cd09f3c  1852  00000000       constant
0x4cd09f40  1856  166dd8c0       constant
0x4cd09f44  1860  00000000       constant
0x4cd09f48  1864  4cd065a0       constant
0x4cd09f4c  1868  00000000       constant
0x4cd09f50  1872  166dc2d0       constant
0x4cd09f54  1876  00000000       constant
0x4cd09f58  1880  00c2d958       constant
0x4cd09f5c  1884  00000000       constant
0x4cd09f60  1888  166dd8c0       constant
0x4cd09f64  1892  00000000       constant
0x4cd09f68  1896  4cd065a0       constant
0x4cd09f6c  1900  00000000       constant
0x4cd09f70  1904  166dc2d0       constant
0x4cd09f74  1908  00000000       constant
0x4cd09f78  1912  00c2d958       constant
0x4cd09f7c  1916  00000000       constant


RelocInfo (size = 65)
0x4cd09808  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0982c  code target (STUB)  (0x4cd065a0)
0x4cd098a4  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd098c8  code target (STUB)  (0x4cd065a0)
0x4cd09908  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0992c  code target (STUB)  (0x4cd065a0)
0x4cd0999c  external reference (isolate)  (0x166dc2d0)
0x4cd099a0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd099fc  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd09a20  code target (STUB)  (0x4cd065a0)
0x4cd09b00  external reference (isolate)  (0x166dc2d0)
0x4cd09b04  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd09bc8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd09bec  code target (STUB)  (0x4cd065a0)
0x4cd09c4c  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd09c70  code target (STUB)  (0x4cd065a0)
0x4cd09ce0  external reference (isolate)  (0x166dc2d0)
0x4cd09ce4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd09d40  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd09d64  code target (STUB)  (0x4cd065a0)
0x4cd09e64  external reference (isolate)  (0x166dc2d0)
0x4cd09e68  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd09ec8  constant pool (size 184)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 690)
0x4cd09fe0     0  movz x16, #0xa00000000
0x4cd09fe4     4  sub csp, jssp, #0x10 (16)
0x4cd09fe8     8  stp fp, lr, [jssp, #-16]!
0x4cd09fec    12  mov fp, jssp
0x4cd09ff0    16  sub csp, jssp, #0x8 (8)
0x4cd09ff4    20  sub jssp, jssp, #0x8 (8)
0x4cd09ff8    24  stur x16, [fp, #-8]
0x4cd09ffc    28  movz w16, #0x257f
0x4cd0a000    32  cmp w0, w16, lsl #3
0x4cd0a004    36  b.hs #+0x234 (addr 0x4cd0a238)
0x4cd0a008    40  lsl x3, x0, #32
0x4cd0a00c    44  lsl w4, w0, #3
0x4cd0a010    48  add w4, w4, #0x10 (16)
0x4cd0a014    52  cmp w4, #0x96000 (614400)
0x4cd0a018    56  b.hs #+0x228 (addr 0x4cd0a240)
0x4cd0a01c    60  movz x6, #0xd2c0
0x4cd0a020    64  movk x6, #0x166d, lsl #16
0x4cd0a024    68  ldp x7, x5, [x6]
0x4cd0a028    72  adds x16, x7, #0x30 (48)
0x4cd0a02c    76  ccmp x16, x5, #nzCv, lo
0x4cd0a030    80  b.hi #+0x114 (addr 0x4cd0a144)
0x4cd0a034    84  str x16, [x6]
0x4cd0a038    88  orr x7, x7, #0x1
0x4cd0a03c    92  ldur x5, [x1, #23]
0x4cd0a040    96  stur x5, [x7, #-1]
0x4cd0a044   100  ldr x5, pc+404 (addr 0x000000004cd0a1d8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0a048   104  stur x5, [x7, #7]
0x4cd0a04c   108  ldr x5, pc+404 (addr 0x000000004cd0a1e0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0a050   112  stur x5, [x7, #15]
0x4cd0a054   116  stur x3, [x7, #23]
0x4cd0a058   120  add x5, x7, #0x20 (32)
0x4cd0a05c   124  ldr x6, pc+396 (addr 0x000000004cd0a1e8)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd0a060   128  stur x6, [x5, #-1]
0x4cd0a064   132  stur x2, [x5, #7]
0x4cd0a068   136  ldur w5, [x2, #35]
0x4cd0a06c   140  add w5, w5, #0x1 (1)
0x4cd0a070   144  lsl x5, x5, #32
0x4cd0a074   148  stur x5, [x2, #31]
0x4cd0a078   152  sxtw x4, w4
0x4cd0a07c   156  movz x5, #0xd2c0
0x4cd0a080   160  movk x5, #0x166d, lsl #16
0x4cd0a084   164  ldp x8, x16, [x5]
0x4cd0a088   168  adds x6, x8, x4
0x4cd0a08c   172  ccmp x6, x16, #nzCv, lo
0x4cd0a090   176  b.hi #+0xf8 (addr 0x4cd0a188)
0x4cd0a094   180  str x6, [x5]
0x4cd0a098   184  orr x8, x8, #0x1
0x4cd0a09c   188  ldr x4, pc+340 (addr 0x000000004cd0a1f0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd0a0a0   192  stur x4, [x8, #-1]
0x4cd0a0a4   196  stur x3, [x8, #7]
0x4cd0a0a8   200  mov x3, x8
0x4cd0a0ac   204  stur x3, [x7, #15]
0x4cd0a0b0   208  add x4, x7, #0xf (15)
0x4cd0a0b4   212  and x3, x7, #0xfffffffffff00000
0x4cd0a0b8   216  ldr x3, [x3, #8]
0x4cd0a0bc   220  tbz w3, #2, #+0xc (addr 0x4cd0a0c8)
0x4cd0a0c0   224  ldr x16, pc+312 (addr 0x000000004cd0a1f8)    ;; code: STUB, RecordWriteStub, minor: 69735
0x4cd0a0c4   228  blr x16
0x4cd0a0c8   232  mov x3, x0
0x4cd0a0cc   236  cmp w3, #0x0 (0)
0x4cd0a0d0   240  b.le #+0x18 (addr 0x4cd0a0e8)
0x4cd0a0d4   244  sub w3, w3, #0x1 (1)
0x4cd0a0d8   248  ldr x4, pc+296 (addr 0x000000004cd0a200)    ;; object: 0x21004519 <the hole>
0x4cd0a0dc   252  add x5, x8, #0xf (15)
0x4cd0a0e0   256  str x4, [x5, w3, sxtw #3]
0x4cd0a0e4   260  b #-0x18 (addr 0x4cd0a0cc)
0x4cd0a0e8   264  ldr x3, [fp]
0x4cd0a0ec   268  ldur x4, [x3, #-8]
0x4cd0a0f0   272  movz x16, #0xe00000000
0x4cd0a0f4   276  cmp x4, x16
0x4cd0a0f8   280  csel x4, fp, x3, ne
0x4cd0a0fc   284  movz x3, #0x0
0x4cd0a100   288  cmp w0, w3
0x4cd0a104   292  b.le #+0x24 (addr 0x4cd0a128)
0x4cd0a108   296  sub w5, w0, w3
0x4cd0a10c   300  add w5, w5, #0x1 (1)
0x4cd0a110   304  ldr x5, [x4, w5, uxtw #3]
0x4cd0a114   308  tbnz w5, #0, #+0x134 (addr 0x4cd0a248)
0x4cd0a118   312  add x6, x8, #0xf (15)
0x4cd0a11c   316  str x5, [x6, w3, sxtw #3]
0x4cd0a120   320  add w3, w3, #0x1 (1)
0x4cd0a124   324  b #-0x24 (addr 0x4cd0a100)
0x4cd0a128   328  add w0, w0, #0x1 (1)
0x4cd0a12c   332  lsl x1, x0, #32
0x4cd0a130   336  mov x0, x7
0x4cd0a134   340  mov jssp, fp
0x4cd0a138   344  ldp fp, lr, [jssp], #16
0x4cd0a13c   348  add jssp, jssp, x1, lsr #29
0x4cd0a140   352  ret
0x4cd0a144   356  movz x7, #0x0
0x4cd0a148   360  mov x16, lr
0x4cd0a14c   364  ldr x17, pc+188 (addr 0x000000004cd0a208)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0a150   368  blr x17
0x4cd0a154   372  movz x0, #0x3000000000
0x4cd0a158   376  movz x10, #0x0
0x4cd0a15c   380  sub csp, jssp, #0x10 (16)
0x4cd0a160   384  stp x10, x0, [jssp, #-16]!
0x4cd0a164   388  movz x0, #0x2
0x4cd0a168   392  movz x1, #0x5b88
0x4cd0a16c   396  movk x1, #0xe2, lsl #16
0x4cd0a170   400  ldr x16, pc+160 (addr 0x000000004cd0a210)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0a174   404  blr x16
0x4cd0a178   408  str x0, [jssp, #56]
0x4cd0a17c   412  ldr x16, pc+156 (addr 0x000000004cd0a218)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0a180   416  blr x16
0x4cd0a184   420  b #-0x148 (addr 0x4cd0a03c)
0x4cd0a188   424  movz x8, #0x0
0x4cd0a18c   428  mov x16, lr
0x4cd0a190   432  ldr x17, pc+144 (addr 0x000000004cd0a220)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0a194   436  blr x17
0x4cd0a198   440  lsl x0, x4, #32
0x4cd0a19c   444  movz x10, #0x0
0x4cd0a1a0   448  sub csp, jssp, #0x10 (16)
0x4cd0a1a4   452  stp x10, x0, [jssp, #-16]!
0x4cd0a1a8   456  movz x0, #0x2
0x4cd0a1ac   460  movz x1, #0x5b88
0x4cd0a1b0   464  movk x1, #0xe2, lsl #16
0x4cd0a1b4   468  ldr x16, pc+116 (addr 0x000000004cd0a228)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0a1b8   472  blr x16
0x4cd0a1bc   476  str x0, [jssp, #64]
0x4cd0a1c0   480  ldr x16, pc+112 (addr 0x000000004cd0a230)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0a1c4   484  blr x16
0x4cd0a1c8   488  b #-0x12c (addr 0x4cd0a09c)
0x4cd0a1cc   492  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0x4cd0a1d0   496  d63f03e0       constant
0x4cd0a1d4   500  d503201f       constant
0x4cd0a1d8   504  21004201       constant
0x4cd0a1dc   508  00000000       constant
0x4cd0a1e0   512  21004201       constant
0x4cd0a1e4   516  00000000       constant
0x4cd0a1e8   520  2a805d81       constant
0x4cd0a1ec   524  00000000       constant
0x4cd0a1f0   528  2a804259       constant
0x4cd0a1f4   532  00000000       constant
0x4cd0a1f8   536  4cd09800       constant
0x4cd0a1fc   540  00000000       constant
0x4cd0a200   544  21004519       constant
0x4cd0a204   548  00000000       constant
0x4cd0a208   552  4cd06820       constant
0x4cd0a20c   556  00000000       constant
0x4cd0a210   560  4cd06260       constant
0x4cd0a214   564  00000000       constant
0x4cd0a218   568  4cd068e0       constant
0x4cd0a21c   572  00000000       constant
0x4cd0a220   576  4cd06820       constant
0x4cd0a224   580  00000000       constant
0x4cd0a228   584  4cd06260       constant
0x4cd0a22c   588  00000000       constant
0x4cd0a230   592  4cd068e0       constant
0x4cd0a234   596  00000000       constant
0x4cd0a238   600  movz x16, #0x0
0x4cd0a23c   604  bl #+0x14 (addr 0x4cd0a250)
0x4cd0a240   608  movz x16, #0x8
0x4cd0a244   612  bl #+0xc (addr 0x4cd0a250)
0x4cd0a248   616  movz x16, #0x10
0x4cd0a24c   620  bl #+0x4 (addr 0x4cd0a250)
0x4cd0a250   624  ldr x17, pc+24 (addr 0x000000004cd0a268)    ;; lazy deoptimization bailout 0
0x4cd0a254   628  add x17, x17, x16
0x4cd0a258   632  br x17
0x4cd0a25c   636  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0a260   640  d63f03e0       constant
0x4cd0a264   644  d503201f       constant
0x4cd0a268   648  4cb06000       constant
0x4cd0a26c   652  00000000       constant


Safepoints (size = 34)
0x4cd0a178   408  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2
0x4cd0a1bc   476  000 | x1 | x2 | x7 | x8 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0x4cd0a044  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0a04c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0a05c  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd0a09c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd0a0c0  code target (STUB)  (0x4cd09800)
0x4cd0a0d8  embedded object  (0x21004519 <the hole>)
0x4cd0a14c  code target (STUB)  (0x4cd06820)
0x4cd0a170  code target (STUB)  (0x4cd06260)
0x4cd0a17c  code target (STUB)  (0x4cd068e0)
0x4cd0a190  code target (STUB)  (0x4cd06820)
0x4cd0a1b4  code target (STUB)  (0x4cd06260)
0x4cd0a1c0  code target (STUB)  (0x4cd068e0)
0x4cd0a1cc  constant pool (size 108)
0x4cd0a250  runtime entry
0x4cd0a25c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNArgumentsConstructorStub
name = ArrayNArgumentsConstructorStub_FAST_SMI_ELEMENTS
compiler = crankshaft
Instructions (size = 690)
0x4cd09fe0     0  movz x16, #0xa00000000
0x4cd09fe4     4  sub csp, jssp, #0x10 (16)
0x4cd09fe8     8  stp fp, lr, [jssp, #-16]!
0x4cd09fec    12  mov fp, jssp
0x4cd09ff0    16  sub csp, jssp, #0x8 (8)
0x4cd09ff4    20  sub jssp, jssp, #0x8 (8)
0x4cd09ff8    24  stur x16, [fp, #-8]
0x4cd09ffc    28  movz w16, #0x257f
0x4cd0a000    32  cmp w0, w16, lsl #3
0x4cd0a004    36  b.hs #+0x234 (addr 0x4cd0a238)
0x4cd0a008    40  lsl x3, x0, #32
0x4cd0a00c    44  lsl w4, w0, #3
0x4cd0a010    48  add w4, w4, #0x10 (16)
0x4cd0a014    52  cmp w4, #0x96000 (614400)
0x4cd0a018    56  b.hs #+0x228 (addr 0x4cd0a240)
0x4cd0a01c    60  movz x6, #0xd2c0
0x4cd0a020    64  movk x6, #0x166d, lsl #16
0x4cd0a024    68  ldp x7, x5, [x6]
0x4cd0a028    72  adds x16, x7, #0x30 (48)
0x4cd0a02c    76  ccmp x16, x5, #nzCv, lo
0x4cd0a030    80  b.hi #+0x114 (addr 0x4cd0a144)
0x4cd0a034    84  str x16, [x6]
0x4cd0a038    88  orr x7, x7, #0x1
0x4cd0a03c    92  ldur x5, [x1, #23]
0x4cd0a040    96  stur x5, [x7, #-1]
0x4cd0a044   100  ldr x5, pc+404 (addr 0x000000004cd0a1d8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0a048   104  stur x5, [x7, #7]
0x4cd0a04c   108  ldr x5, pc+404 (addr 0x000000004cd0a1e0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0a050   112  stur x5, [x7, #15]
0x4cd0a054   116  stur x3, [x7, #23]
0x4cd0a058   120  add x5, x7, #0x20 (32)
0x4cd0a05c   124  ldr x6, pc+396 (addr 0x000000004cd0a1e8)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd0a060   128  stur x6, [x5, #-1]
0x4cd0a064   132  stur x2, [x5, #7]
0x4cd0a068   136  ldur w5, [x2, #35]
0x4cd0a06c   140  add w5, w5, #0x1 (1)
0x4cd0a070   144  lsl x5, x5, #32
0x4cd0a074   148  stur x5, [x2, #31]
0x4cd0a078   152  sxtw x4, w4
0x4cd0a07c   156  movz x5, #0xd2c0
0x4cd0a080   160  movk x5, #0x166d, lsl #16
0x4cd0a084   164  ldp x8, x16, [x5]
0x4cd0a088   168  adds x6, x8, x4
0x4cd0a08c   172  ccmp x6, x16, #nzCv, lo
0x4cd0a090   176  b.hi #+0xf8 (addr 0x4cd0a188)
0x4cd0a094   180  str x6, [x5]
0x4cd0a098   184  orr x8, x8, #0x1
0x4cd0a09c   188  ldr x4, pc+340 (addr 0x000000004cd0a1f0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd0a0a0   192  stur x4, [x8, #-1]
0x4cd0a0a4   196  stur x3, [x8, #7]
0x4cd0a0a8   200  mov x3, x8
0x4cd0a0ac   204  stur x3, [x7, #15]
0x4cd0a0b0   208  add x4, x7, #0xf (15)
0x4cd0a0b4   212  and x3, x7, #0xfffffffffff00000
0x4cd0a0b8   216  ldr x3, [x3, #8]
0x4cd0a0bc   220  tbz w3, #2, #+0xc (addr 0x4cd0a0c8)
0x4cd0a0c0   224  ldr x16, pc+312 (addr 0x000000004cd0a1f8)    ;; code: STUB, RecordWriteStub, minor: 69735
0x4cd0a0c4   228  blr x16
0x4cd0a0c8   232  mov x3, x0
0x4cd0a0cc   236  cmp w3, #0x0 (0)
0x4cd0a0d0   240  b.le #+0x18 (addr 0x4cd0a0e8)
0x4cd0a0d4   244  sub w3, w3, #0x1 (1)
0x4cd0a0d8   248  ldr x4, pc+296 (addr 0x000000004cd0a200)    ;; object: 0x21004519 <the hole>
0x4cd0a0dc   252  add x5, x8, #0xf (15)
0x4cd0a0e0   256  str x4, [x5, w3, sxtw #3]
0x4cd0a0e4   260  b #-0x18 (addr 0x4cd0a0cc)
0x4cd0a0e8   264  ldr x3, [fp]
0x4cd0a0ec   268  ldur x4, [x3, #-8]
0x4cd0a0f0   272  movz x16, #0xe00000000
0x4cd0a0f4   276  cmp x4, x16
0x4cd0a0f8   280  csel x4, fp, x3, ne
0x4cd0a0fc   284  movz x3, #0x0
0x4cd0a100   288  cmp w0, w3
0x4cd0a104   292  b.le #+0x24 (addr 0x4cd0a128)
0x4cd0a108   296  sub w5, w0, w3
0x4cd0a10c   300  add w5, w5, #0x1 (1)
0x4cd0a110   304  ldr x5, [x4, w5, uxtw #3]
0x4cd0a114   308  tbnz w5, #0, #+0x134 (addr 0x4cd0a248)
0x4cd0a118   312  add x6, x8, #0xf (15)
0x4cd0a11c   316  str x5, [x6, w3, sxtw #3]
0x4cd0a120   320  add w3, w3, #0x1 (1)
0x4cd0a124   324  b #-0x24 (addr 0x4cd0a100)
0x4cd0a128   328  add w0, w0, #0x1 (1)
0x4cd0a12c   332  lsl x1, x0, #32
0x4cd0a130   336  mov x0, x7
0x4cd0a134   340  mov jssp, fp
0x4cd0a138   344  ldp fp, lr, [jssp], #16
0x4cd0a13c   348  add jssp, jssp, x1, lsr #29
0x4cd0a140   352  ret
0x4cd0a144   356  movz x7, #0x0
0x4cd0a148   360  mov x16, lr
0x4cd0a14c   364  ldr x17, pc+188 (addr 0x000000004cd0a208)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0a150   368  blr x17
0x4cd0a154   372  movz x0, #0x3000000000
0x4cd0a158   376  movz x10, #0x0
0x4cd0a15c   380  sub csp, jssp, #0x10 (16)
0x4cd0a160   384  stp x10, x0, [jssp, #-16]!
0x4cd0a164   388  movz x0, #0x2
0x4cd0a168   392  movz x1, #0x5b88
0x4cd0a16c   396  movk x1, #0xe2, lsl #16
0x4cd0a170   400  ldr x16, pc+160 (addr 0x000000004cd0a210)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0a174   404  blr x16
0x4cd0a178   408  str x0, [jssp, #56]
0x4cd0a17c   412  ldr x16, pc+156 (addr 0x000000004cd0a218)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0a180   416  blr x16
0x4cd0a184   420  b #-0x148 (addr 0x4cd0a03c)
0x4cd0a188   424  movz x8, #0x0
0x4cd0a18c   428  mov x16, lr
0x4cd0a190   432  ldr x17, pc+144 (addr 0x000000004cd0a220)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0a194   436  blr x17
0x4cd0a198   440  lsl x0, x4, #32
0x4cd0a19c   444  movz x10, #0x0
0x4cd0a1a0   448  sub csp, jssp, #0x10 (16)
0x4cd0a1a4   452  stp x10, x0, [jssp, #-16]!
0x4cd0a1a8   456  movz x0, #0x2
0x4cd0a1ac   460  movz x1, #0x5b88
0x4cd0a1b0   464  movk x1, #0xe2, lsl #16
0x4cd0a1b4   468  ldr x16, pc+116 (addr 0x000000004cd0a228)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0a1b8   472  blr x16
0x4cd0a1bc   476  str x0, [jssp, #64]
0x4cd0a1c0   480  ldr x16, pc+112 (addr 0x000000004cd0a230)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0a1c4   484  blr x16
0x4cd0a1c8   488  b #-0x12c (addr 0x4cd0a09c)
0x4cd0a1cc   492  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0x4cd0a1d0   496  d63f03e0       constant
0x4cd0a1d4   500  d503201f       constant
0x4cd0a1d8   504  21004201       constant
0x4cd0a1dc   508  00000000       constant
0x4cd0a1e0   512  21004201       constant
0x4cd0a1e4   516  00000000       constant
0x4cd0a1e8   520  2a805d81       constant
0x4cd0a1ec   524  00000000       constant
0x4cd0a1f0   528  2a804259       constant
0x4cd0a1f4   532  00000000       constant
0x4cd0a1f8   536  4cd09800       constant
0x4cd0a1fc   540  00000000       constant
0x4cd0a200   544  21004519       constant
0x4cd0a204   548  00000000       constant
0x4cd0a208   552  4cd06820       constant
0x4cd0a20c   556  00000000       constant
0x4cd0a210   560  4cd06260       constant
0x4cd0a214   564  00000000       constant
0x4cd0a218   568  4cd068e0       constant
0x4cd0a21c   572  00000000       constant
0x4cd0a220   576  4cd06820       constant
0x4cd0a224   580  00000000       constant
0x4cd0a228   584  4cd06260       constant
0x4cd0a22c   588  00000000       constant
0x4cd0a230   592  4cd068e0       constant
0x4cd0a234   596  00000000       constant
0x4cd0a238   600  movz x16, #0x0
0x4cd0a23c   604  bl #+0x14 (addr 0x4cd0a250)
0x4cd0a240   608  movz x16, #0x8
0x4cd0a244   612  bl #+0xc (addr 0x4cd0a250)
0x4cd0a248   616  movz x16, #0x10
0x4cd0a24c   620  bl #+0x4 (addr 0x4cd0a250)
0x4cd0a250   624  ldr x17, pc+24 (addr 0x000000004cd0a268)    ;; lazy deoptimization bailout 0
0x4cd0a254   628  add x17, x17, x16
0x4cd0a258   632  br x17
0x4cd0a25c   636  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0a260   640  d63f03e0       constant
0x4cd0a264   644  d503201f       constant
0x4cd0a268   648  4cb06000       constant
0x4cd0a26c   652  00000000       constant


Safepoints (size = 34)
0x4cd0a178   408  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2
0x4cd0a1bc   476  000 | x1 | x2 | x7 | x8 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0x4cd0a044  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0a04c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0a05c  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd0a09c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd0a0c0  code target (STUB)  (0x4cd09800)
0x4cd0a0d8  embedded object  (0x21004519 <the hole>)
0x4cd0a14c  code target (STUB)  (0x4cd06820)
0x4cd0a170  code target (STUB)  (0x4cd06260)
0x4cd0a17c  code target (STUB)  (0x4cd068e0)
0x4cd0a190  code target (STUB)  (0x4cd06820)
0x4cd0a1b4  code target (STUB)  (0x4cd06260)
0x4cd0a1c0  code target (STUB)  (0x4cd068e0)
0x4cd0a1cc  constant pool (size 108)
0x4cd0a250  runtime entry
0x4cd0a25c  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 493)
0x4cd0a300     0  movz x16, #0xa00000000
0x4cd0a304     4  sub csp, jssp, #0x10 (16)
0x4cd0a308     8  stp fp, lr, [jssp, #-16]!
0x4cd0a30c    12  mov fp, jssp
0x4cd0a310    16  sub csp, jssp, #0x8 (8)
0x4cd0a314    20  sub jssp, jssp, #0x8 (8)
0x4cd0a318    24  stur x16, [fp, #-8]
0x4cd0a31c    28  movz w16, #0x257f
0x4cd0a320    32  cmp w0, w16, lsl #3
0x4cd0a324    36  b.hs #+0x17c (addr 0x4cd0a4a0)
0x4cd0a328    40  lsl x3, x0, #32
0x4cd0a32c    44  lsl w4, w0, #3
0x4cd0a330    48  add w4, w4, #0x10 (16)
0x4cd0a334    52  cmp w4, #0x96000 (614400)
0x4cd0a338    56  b.hs #+0x170 (addr 0x4cd0a4a8)
0x4cd0a33c    60  add w4, w4, #0x20 (32)
0x4cd0a340    64  sxtw x4, w4
0x4cd0a344    68  movz x5, #0xd2c0
0x4cd0a348    72  movk x5, #0x166d, lsl #16
0x4cd0a34c    76  ldp x7, x16, [x5]
0x4cd0a350    80  adds x6, x7, x4
0x4cd0a354    84  ccmp x6, x16, #nzCv, lo
0x4cd0a358    88  b.hi #+0xc0 (addr 0x4cd0a418)
0x4cd0a35c    92  str x6, [x5]
0x4cd0a360    96  orr x7, x7, #0x1
0x4cd0a364   100  movz w4, #0x0
0x4cd0a368   104  stur x4, [x7, #31]
0x4cd0a36c   108  ldur x4, [x1, #23]
0x4cd0a370   112  stur x4, [x7, #-1]
0x4cd0a374   116  ldr x4, pc+244 (addr 0x000000004cd0a468)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0a378   120  stur x4, [x7, #7]
0x4cd0a37c   124  ldr x4, pc+244 (addr 0x000000004cd0a470)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0a380   128  stur x4, [x7, #15]
0x4cd0a384   132  stur x3, [x7, #23]
0x4cd0a388   136  add x4, x7, #0x20 (32)
0x4cd0a38c   140  ldr x5, pc+236 (addr 0x000000004cd0a478)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd0a390   144  stur x5, [x4, #-1]
0x4cd0a394   148  stur x3, [x4, #7]
0x4cd0a398   152  stur x4, [x7, #15]
0x4cd0a39c   156  mov x3, x0
0x4cd0a3a0   160  cmp w3, #0x0 (0)
0x4cd0a3a4   164  b.le #+0x18 (addr 0x4cd0a3bc)
0x4cd0a3a8   168  sub w3, w3, #0x1 (1)
0x4cd0a3ac   172  ldr x5, pc+212 (addr 0x000000004cd0a480)    ;; object: 0x21004519 <the hole>
0x4cd0a3b0   176  add x6, x4, #0xf (15)
0x4cd0a3b4   180  str x5, [x6, w3, sxtw #3]
0x4cd0a3b8   184  b #-0x18 (addr 0x4cd0a3a0)
0x4cd0a3bc   188  ldr x3, [fp]
0x4cd0a3c0   192  ldur x5, [x3, #-8]
0x4cd0a3c4   196  movz x16, #0xe00000000
0x4cd0a3c8   200  cmp x5, x16
0x4cd0a3cc   204  csel x5, fp, x3, ne
0x4cd0a3d0   208  movz x3, #0x0
0x4cd0a3d4   212  cmp w0, w3
0x4cd0a3d8   216  b.le #+0x24 (addr 0x4cd0a3fc)
0x4cd0a3dc   220  sub w6, w0, w3
0x4cd0a3e0   224  add w6, w6, #0x1 (1)
0x4cd0a3e4   228  ldr x6, [x5, w6, uxtw #3]
0x4cd0a3e8   232  tbnz w6, #0, #+0xc8 (addr 0x4cd0a4b0)
0x4cd0a3ec   236  add x8, x4, #0xf (15)
0x4cd0a3f0   240  str x6, [x8, w3, sxtw #3]
0x4cd0a3f4   244  add w3, w3, #0x1 (1)
0x4cd0a3f8   248  b #-0x24 (addr 0x4cd0a3d4)
0x4cd0a3fc   252  add w0, w0, #0x1 (1)
0x4cd0a400   256  lsl x1, x0, #32
0x4cd0a404   260  mov x0, x7
0x4cd0a408   264  mov jssp, fp
0x4cd0a40c   268  ldp fp, lr, [jssp], #16
0x4cd0a410   272  add jssp, jssp, x1, lsr #29
0x4cd0a414   276  ret
0x4cd0a418   280  movz x7, #0x0
0x4cd0a41c   284  mov x16, lr
0x4cd0a420   288  ldr x17, pc+104 (addr 0x000000004cd0a488)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0a424   292  blr x17
0x4cd0a428   296  lsl x0, x4, #32
0x4cd0a42c   300  movz x10, #0x0
0x4cd0a430   304  sub csp, jssp, #0x10 (16)
0x4cd0a434   308  stp x10, x0, [jssp, #-16]!
0x4cd0a438   312  movz x0, #0x2
0x4cd0a43c   316  movz x1, #0x5b88
0x4cd0a440   320  movk x1, #0xe2, lsl #16
0x4cd0a444   324  ldr x16, pc+76 (addr 0x000000004cd0a490)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0a448   328  blr x16
0x4cd0a44c   332  str x0, [jssp, #56]
0x4cd0a450   336  ldr x16, pc+72 (addr 0x000000004cd0a498)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0a454   340  blr x16
0x4cd0a458   344  b #-0xf4 (addr 0x4cd0a364)
0x4cd0a45c   348  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd0a460   352  d63f03e0       constant
0x4cd0a464   356  d503201f       constant
0x4cd0a468   360  21004201       constant
0x4cd0a46c   364  00000000       constant
0x4cd0a470   368  21004201       constant
0x4cd0a474   372  00000000       constant
0x4cd0a478   376  2a804259       constant
0x4cd0a47c   380  00000000       constant
0x4cd0a480   384  21004519       constant
0x4cd0a484   388  00000000       constant
0x4cd0a488   392  4cd06820       constant
0x4cd0a48c   396  00000000       constant
0x4cd0a490   400  4cd06260       constant
0x4cd0a494   404  00000000       constant
0x4cd0a498   408  4cd068e0       constant
0x4cd0a49c   412  00000000       constant
0x4cd0a4a0   416  movz x16, #0x0
0x4cd0a4a4   420  bl #+0x14 (addr 0x4cd0a4b8)
0x4cd0a4a8   424  movz x16, #0x8
0x4cd0a4ac   428  bl #+0xc (addr 0x4cd0a4b8)
0x4cd0a4b0   432  movz x16, #0x10
0x4cd0a4b4   436  bl #+0x4 (addr 0x4cd0a4b8)
0x4cd0a4b8   440  ldr x17, pc+24 (addr 0x000000004cd0a4d0)    ;; lazy deoptimization bailout 0
0x4cd0a4bc   444  add x17, x17, x16
0x4cd0a4c0   448  br x17
0x4cd0a4c4   452  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0a4c8   456  d63f03e0       constant
0x4cd0a4cc   460  d503201f       constant
0x4cd0a4d0   464  4cb06000       constant
0x4cd0a4d4   468  00000000       constant


Safepoints (size = 21)
0x4cd0a44c   332  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd0a374  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0a37c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0a38c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd0a3ac  embedded object  (0x21004519 <the hole>)
0x4cd0a420  code target (STUB)  (0x4cd06820)
0x4cd0a444  code target (STUB)  (0x4cd06260)
0x4cd0a450  code target (STUB)  (0x4cd068e0)
0x4cd0a45c  constant pool (size 68)
0x4cd0a4b8  runtime entry
0x4cd0a4c4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNArgumentsConstructorStub
name = ArrayNArgumentsConstructorStub_FAST_SMI_ELEMENTS_DISABLE_ALLOCATION_SITES
compiler = crankshaft
Instructions (size = 493)
0x4cd0a300     0  movz x16, #0xa00000000
0x4cd0a304     4  sub csp, jssp, #0x10 (16)
0x4cd0a308     8  stp fp, lr, [jssp, #-16]!
0x4cd0a30c    12  mov fp, jssp
0x4cd0a310    16  sub csp, jssp, #0x8 (8)
0x4cd0a314    20  sub jssp, jssp, #0x8 (8)
0x4cd0a318    24  stur x16, [fp, #-8]
0x4cd0a31c    28  movz w16, #0x257f
0x4cd0a320    32  cmp w0, w16, lsl #3
0x4cd0a324    36  b.hs #+0x17c (addr 0x4cd0a4a0)
0x4cd0a328    40  lsl x3, x0, #32
0x4cd0a32c    44  lsl w4, w0, #3
0x4cd0a330    48  add w4, w4, #0x10 (16)
0x4cd0a334    52  cmp w4, #0x96000 (614400)
0x4cd0a338    56  b.hs #+0x170 (addr 0x4cd0a4a8)
0x4cd0a33c    60  add w4, w4, #0x20 (32)
0x4cd0a340    64  sxtw x4, w4
0x4cd0a344    68  movz x5, #0xd2c0
0x4cd0a348    72  movk x5, #0x166d, lsl #16
0x4cd0a34c    76  ldp x7, x16, [x5]
0x4cd0a350    80  adds x6, x7, x4
0x4cd0a354    84  ccmp x6, x16, #nzCv, lo
0x4cd0a358    88  b.hi #+0xc0 (addr 0x4cd0a418)
0x4cd0a35c    92  str x6, [x5]
0x4cd0a360    96  orr x7, x7, #0x1
0x4cd0a364   100  movz w4, #0x0
0x4cd0a368   104  stur x4, [x7, #31]
0x4cd0a36c   108  ldur x4, [x1, #23]
0x4cd0a370   112  stur x4, [x7, #-1]
0x4cd0a374   116  ldr x4, pc+244 (addr 0x000000004cd0a468)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0a378   120  stur x4, [x7, #7]
0x4cd0a37c   124  ldr x4, pc+244 (addr 0x000000004cd0a470)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0a380   128  stur x4, [x7, #15]
0x4cd0a384   132  stur x3, [x7, #23]
0x4cd0a388   136  add x4, x7, #0x20 (32)
0x4cd0a38c   140  ldr x5, pc+236 (addr 0x000000004cd0a478)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd0a390   144  stur x5, [x4, #-1]
0x4cd0a394   148  stur x3, [x4, #7]
0x4cd0a398   152  stur x4, [x7, #15]
0x4cd0a39c   156  mov x3, x0
0x4cd0a3a0   160  cmp w3, #0x0 (0)
0x4cd0a3a4   164  b.le #+0x18 (addr 0x4cd0a3bc)
0x4cd0a3a8   168  sub w3, w3, #0x1 (1)
0x4cd0a3ac   172  ldr x5, pc+212 (addr 0x000000004cd0a480)    ;; object: 0x21004519 <the hole>
0x4cd0a3b0   176  add x6, x4, #0xf (15)
0x4cd0a3b4   180  str x5, [x6, w3, sxtw #3]
0x4cd0a3b8   184  b #-0x18 (addr 0x4cd0a3a0)
0x4cd0a3bc   188  ldr x3, [fp]
0x4cd0a3c0   192  ldur x5, [x3, #-8]
0x4cd0a3c4   196  movz x16, #0xe00000000
0x4cd0a3c8   200  cmp x5, x16
0x4cd0a3cc   204  csel x5, fp, x3, ne
0x4cd0a3d0   208  movz x3, #0x0
0x4cd0a3d4   212  cmp w0, w3
0x4cd0a3d8   216  b.le #+0x24 (addr 0x4cd0a3fc)
0x4cd0a3dc   220  sub w6, w0, w3
0x4cd0a3e0   224  add w6, w6, #0x1 (1)
0x4cd0a3e4   228  ldr x6, [x5, w6, uxtw #3]
0x4cd0a3e8   232  tbnz w6, #0, #+0xc8 (addr 0x4cd0a4b0)
0x4cd0a3ec   236  add x8, x4, #0xf (15)
0x4cd0a3f0   240  str x6, [x8, w3, sxtw #3]
0x4cd0a3f4   244  add w3, w3, #0x1 (1)
0x4cd0a3f8   248  b #-0x24 (addr 0x4cd0a3d4)
0x4cd0a3fc   252  add w0, w0, #0x1 (1)
0x4cd0a400   256  lsl x1, x0, #32
0x4cd0a404   260  mov x0, x7
0x4cd0a408   264  mov jssp, fp
0x4cd0a40c   268  ldp fp, lr, [jssp], #16
0x4cd0a410   272  add jssp, jssp, x1, lsr #29
0x4cd0a414   276  ret
0x4cd0a418   280  movz x7, #0x0
0x4cd0a41c   284  mov x16, lr
0x4cd0a420   288  ldr x17, pc+104 (addr 0x000000004cd0a488)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0a424   292  blr x17
0x4cd0a428   296  lsl x0, x4, #32
0x4cd0a42c   300  movz x10, #0x0
0x4cd0a430   304  sub csp, jssp, #0x10 (16)
0x4cd0a434   308  stp x10, x0, [jssp, #-16]!
0x4cd0a438   312  movz x0, #0x2
0x4cd0a43c   316  movz x1, #0x5b88
0x4cd0a440   320  movk x1, #0xe2, lsl #16
0x4cd0a444   324  ldr x16, pc+76 (addr 0x000000004cd0a490)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0a448   328  blr x16
0x4cd0a44c   332  str x0, [jssp, #56]
0x4cd0a450   336  ldr x16, pc+72 (addr 0x000000004cd0a498)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0a454   340  blr x16
0x4cd0a458   344  b #-0xf4 (addr 0x4cd0a364)
0x4cd0a45c   348  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd0a460   352  d63f03e0       constant
0x4cd0a464   356  d503201f       constant
0x4cd0a468   360  21004201       constant
0x4cd0a46c   364  00000000       constant
0x4cd0a470   368  21004201       constant
0x4cd0a474   372  00000000       constant
0x4cd0a478   376  2a804259       constant
0x4cd0a47c   380  00000000       constant
0x4cd0a480   384  21004519       constant
0x4cd0a484   388  00000000       constant
0x4cd0a488   392  4cd06820       constant
0x4cd0a48c   396  00000000       constant
0x4cd0a490   400  4cd06260       constant
0x4cd0a494   404  00000000       constant
0x4cd0a498   408  4cd068e0       constant
0x4cd0a49c   412  00000000       constant
0x4cd0a4a0   416  movz x16, #0x0
0x4cd0a4a4   420  bl #+0x14 (addr 0x4cd0a4b8)
0x4cd0a4a8   424  movz x16, #0x8
0x4cd0a4ac   428  bl #+0xc (addr 0x4cd0a4b8)
0x4cd0a4b0   432  movz x16, #0x10
0x4cd0a4b4   436  bl #+0x4 (addr 0x4cd0a4b8)
0x4cd0a4b8   440  ldr x17, pc+24 (addr 0x000000004cd0a4d0)    ;; lazy deoptimization bailout 0
0x4cd0a4bc   444  add x17, x17, x16
0x4cd0a4c0   448  br x17
0x4cd0a4c4   452  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0a4c8   456  d63f03e0       constant
0x4cd0a4cc   460  d503201f       constant
0x4cd0a4d0   464  4cb06000       constant
0x4cd0a4d4   468  00000000       constant


Safepoints (size = 21)
0x4cd0a44c   332  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd0a374  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0a37c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0a38c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd0a3ac  embedded object  (0x21004519 <the hole>)
0x4cd0a420  code target (STUB)  (0x4cd06820)
0x4cd0a444  code target (STUB)  (0x4cd06260)
0x4cd0a450  code target (STUB)  (0x4cd068e0)
0x4cd0a45c  constant pool (size 68)
0x4cd0a4b8  runtime entry
0x4cd0a4c4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 698)
0x4cd0a560     0  movz x16, #0xa00000000
0x4cd0a564     4  sub csp, jssp, #0x10 (16)
0x4cd0a568     8  stp fp, lr, [jssp, #-16]!
0x4cd0a56c    12  mov fp, jssp
0x4cd0a570    16  sub csp, jssp, #0x8 (8)
0x4cd0a574    20  sub jssp, jssp, #0x8 (8)
0x4cd0a578    24  stur x16, [fp, #-8]
0x4cd0a57c    28  movz w16, #0x257f
0x4cd0a580    32  cmp w0, w16, lsl #3
0x4cd0a584    36  b.hs #+0x23c (addr 0x4cd0a7c0)
0x4cd0a588    40  lsl x3, x0, #32
0x4cd0a58c    44  lsl w4, w0, #3
0x4cd0a590    48  add w4, w4, #0x10 (16)
0x4cd0a594    52  cmp w4, #0x96000 (614400)
0x4cd0a598    56  b.hs #+0x230 (addr 0x4cd0a7c8)
0x4cd0a59c    60  movz x6, #0xd2c0
0x4cd0a5a0    64  movk x6, #0x166d, lsl #16
0x4cd0a5a4    68  ldp x7, x5, [x6]
0x4cd0a5a8    72  adds x16, x7, #0x30 (48)
0x4cd0a5ac    76  ccmp x16, x5, #nzCv, lo
0x4cd0a5b0    80  b.hi #+0x120 (addr 0x4cd0a6d0)
0x4cd0a5b4    84  str x16, [x6]
0x4cd0a5b8    88  orr x7, x7, #0x1
0x4cd0a5bc    92  ldur x5, [x1, #39]
0x4cd0a5c0    96  ldur x5, [x5, #39]
0x4cd0a5c4   100  movz x16, #0x17f
0x4cd0a5c8   104  ldr x5, [x5, x16]
0x4cd0a5cc   108  stur x5, [x7, #-1]
0x4cd0a5d0   112  ldr x5, pc+400 (addr 0x000000004cd0a760)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0a5d4   116  stur x5, [x7, #7]
0x4cd0a5d8   120  ldr x5, pc+400 (addr 0x000000004cd0a768)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0a5dc   124  stur x5, [x7, #15]
0x4cd0a5e0   128  stur x3, [x7, #23]
0x4cd0a5e4   132  add x5, x7, #0x20 (32)
0x4cd0a5e8   136  ldr x6, pc+392 (addr 0x000000004cd0a770)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd0a5ec   140  stur x6, [x5, #-1]
0x4cd0a5f0   144  stur x2, [x5, #7]
0x4cd0a5f4   148  ldur w5, [x2, #35]
0x4cd0a5f8   152  add w5, w5, #0x1 (1)
0x4cd0a5fc   156  lsl x5, x5, #32
0x4cd0a600   160  stur x5, [x2, #31]
0x4cd0a604   164  sxtw x4, w4
0x4cd0a608   168  movz x5, #0xd2c0
0x4cd0a60c   172  movk x5, #0x166d, lsl #16
0x4cd0a610   176  ldp x8, x16, [x5]
0x4cd0a614   180  adds x6, x8, x4
0x4cd0a618   184  ccmp x6, x16, #nzCv, lo
0x4cd0a61c   188  b.hi #+0xf8 (addr 0x4cd0a714)
0x4cd0a620   192  str x6, [x5]
0x4cd0a624   196  orr x8, x8, #0x1
0x4cd0a628   200  ldr x4, pc+336 (addr 0x000000004cd0a778)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd0a62c   204  stur x4, [x8, #-1]
0x4cd0a630   208  stur x3, [x8, #7]
0x4cd0a634   212  mov x3, x8
0x4cd0a638   216  stur x3, [x7, #15]
0x4cd0a63c   220  add x4, x7, #0xf (15)
0x4cd0a640   224  and x3, x7, #0xfffffffffff00000
0x4cd0a644   228  ldr x3, [x3, #8]
0x4cd0a648   232  tbz w3, #2, #+0xc (addr 0x4cd0a654)
0x4cd0a64c   236  ldr x16, pc+308 (addr 0x000000004cd0a780)    ;; code: STUB, RecordWriteStub, minor: 69735
0x4cd0a650   240  blr x16
0x4cd0a654   244  mov x3, x0
0x4cd0a658   248  cmp w3, #0x0 (0)
0x4cd0a65c   252  b.le #+0x18 (addr 0x4cd0a674)
0x4cd0a660   256  sub w3, w3, #0x1 (1)
0x4cd0a664   260  ldr x4, pc+292 (addr 0x000000004cd0a788)    ;; object: 0x21004519 <the hole>
0x4cd0a668   264  add x5, x8, #0xf (15)
0x4cd0a66c   268  str x4, [x5, w3, sxtw #3]
0x4cd0a670   272  b #-0x18 (addr 0x4cd0a658)
0x4cd0a674   276  ldr x3, [fp]
0x4cd0a678   280  ldur x4, [x3, #-8]
0x4cd0a67c   284  movz x16, #0xe00000000
0x4cd0a680   288  cmp x4, x16
0x4cd0a684   292  csel x4, fp, x3, ne
0x4cd0a688   296  movz x3, #0x0
0x4cd0a68c   300  cmp w0, w3
0x4cd0a690   304  b.le #+0x24 (addr 0x4cd0a6b4)
0x4cd0a694   308  sub w5, w0, w3
0x4cd0a698   312  add w5, w5, #0x1 (1)
0x4cd0a69c   316  ldr x5, [x4, w5, uxtw #3]
0x4cd0a6a0   320  tbnz w5, #0, #+0x130 (addr 0x4cd0a7d0)
0x4cd0a6a4   324  add x6, x8, #0xf (15)
0x4cd0a6a8   328  str x5, [x6, w3, sxtw #3]
0x4cd0a6ac   332  add w3, w3, #0x1 (1)
0x4cd0a6b0   336  b #-0x24 (addr 0x4cd0a68c)
0x4cd0a6b4   340  add w0, w0, #0x1 (1)
0x4cd0a6b8   344  lsl x1, x0, #32
0x4cd0a6bc   348  mov x0, x7
0x4cd0a6c0   352  mov jssp, fp
0x4cd0a6c4   356  ldp fp, lr, [jssp], #16
0x4cd0a6c8   360  add jssp, jssp, x1, lsr #29
0x4cd0a6cc   364  ret
0x4cd0a6d0   368  movz x7, #0x0
0x4cd0a6d4   372  mov x16, lr
0x4cd0a6d8   376  ldr x17, pc+184 (addr 0x000000004cd0a790)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0a6dc   380  blr x17
0x4cd0a6e0   384  movz x0, #0x3000000000
0x4cd0a6e4   388  movz x10, #0x0
0x4cd0a6e8   392  sub csp, jssp, #0x10 (16)
0x4cd0a6ec   396  stp x10, x0, [jssp, #-16]!
0x4cd0a6f0   400  movz x0, #0x2
0x4cd0a6f4   404  movz x1, #0x5b88
0x4cd0a6f8   408  movk x1, #0xe2, lsl #16
0x4cd0a6fc   412  ldr x16, pc+156 (addr 0x000000004cd0a798)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0a700   416  blr x16
0x4cd0a704   420  str x0, [jssp, #56]
0x4cd0a708   424  ldr x16, pc+152 (addr 0x000000004cd0a7a0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0a70c   428  blr x16
0x4cd0a710   432  b #-0x154 (addr 0x4cd0a5bc)
0x4cd0a714   436  movz x8, #0x0
0x4cd0a718   440  mov x16, lr
0x4cd0a71c   444  ldr x17, pc+140 (addr 0x000000004cd0a7a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0a720   448  blr x17
0x4cd0a724   452  lsl x0, x4, #32
0x4cd0a728   456  movz x10, #0x0
0x4cd0a72c   460  sub csp, jssp, #0x10 (16)
0x4cd0a730   464  stp x10, x0, [jssp, #-16]!
0x4cd0a734   468  movz x0, #0x2
0x4cd0a738   472  movz x1, #0x5b88
0x4cd0a73c   476  movk x1, #0xe2, lsl #16
0x4cd0a740   480  ldr x16, pc+112 (addr 0x000000004cd0a7b0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0a744   484  blr x16
0x4cd0a748   488  str x0, [jssp, #64]
0x4cd0a74c   492  ldr x16, pc+108 (addr 0x000000004cd0a7b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0a750   496  blr x16
0x4cd0a754   500  b #-0x12c (addr 0x4cd0a628)
0x4cd0a758   504  5800033f       constant pool begin (num_const = 25)    ;; constant pool
0x4cd0a75c   508  d63f03e0       constant
0x4cd0a760   512  21004201       constant
0x4cd0a764   516  00000000       constant
0x4cd0a768   520  21004201       constant
0x4cd0a76c   524  00000000       constant
0x4cd0a770   528  2a805d81       constant
0x4cd0a774   532  00000000       constant
0x4cd0a778   536  2a804259       constant
0x4cd0a77c   540  00000000       constant
0x4cd0a780   544  4cd09800       constant
0x4cd0a784   548  00000000       constant
0x4cd0a788   552  21004519       constant
0x4cd0a78c   556  00000000       constant
0x4cd0a790   560  4cd06820       constant
0x4cd0a794   564  00000000       constant
0x4cd0a798   568  4cd06260       constant
0x4cd0a79c   572  00000000       constant
0x4cd0a7a0   576  4cd068e0       constant
0x4cd0a7a4   580  00000000       constant
0x4cd0a7a8   584  4cd06820       constant
0x4cd0a7ac   588  00000000       constant
0x4cd0a7b0   592  4cd06260       constant
0x4cd0a7b4   596  00000000       constant
0x4cd0a7b8   600  4cd068e0       constant
0x4cd0a7bc   604  00000000       constant
0x4cd0a7c0   608  movz x16, #0x0
0x4cd0a7c4   612  bl #+0x14 (addr 0x4cd0a7d8)
0x4cd0a7c8   616  movz x16, #0x8
0x4cd0a7cc   620  bl #+0xc (addr 0x4cd0a7d8)
0x4cd0a7d0   624  movz x16, #0x10
0x4cd0a7d4   628  bl #+0x4 (addr 0x4cd0a7d8)
0x4cd0a7d8   632  ldr x17, pc+24 (addr 0x000000004cd0a7f0)    ;; lazy deoptimization bailout 0
0x4cd0a7dc   636  add x17, x17, x16
0x4cd0a7e0   640  br x17
0x4cd0a7e4   644  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0a7e8   648  d63f03e0       constant
0x4cd0a7ec   652  d503201f       constant
0x4cd0a7f0   656  4cb06000       constant
0x4cd0a7f4   660  00000000       constant


Safepoints (size = 34)
0x4cd0a704   420  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2
0x4cd0a748   488  000 | x1 | x2 | x7 | x8 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0x4cd0a5d0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0a5d8  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0a5e8  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd0a628  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd0a64c  code target (STUB)  (0x4cd09800)
0x4cd0a664  embedded object  (0x21004519 <the hole>)
0x4cd0a6d8  code target (STUB)  (0x4cd06820)
0x4cd0a6fc  code target (STUB)  (0x4cd06260)
0x4cd0a708  code target (STUB)  (0x4cd068e0)
0x4cd0a71c  code target (STUB)  (0x4cd06820)
0x4cd0a740  code target (STUB)  (0x4cd06260)
0x4cd0a74c  code target (STUB)  (0x4cd068e0)
0x4cd0a758  constant pool (size 104)
0x4cd0a7d8  runtime entry
0x4cd0a7e4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNArgumentsConstructorStub
name = ArrayNArgumentsConstructorStub_FAST_HOLEY_SMI_ELEMENTS
compiler = crankshaft
Instructions (size = 698)
0x4cd0a560     0  movz x16, #0xa00000000
0x4cd0a564     4  sub csp, jssp, #0x10 (16)
0x4cd0a568     8  stp fp, lr, [jssp, #-16]!
0x4cd0a56c    12  mov fp, jssp
0x4cd0a570    16  sub csp, jssp, #0x8 (8)
0x4cd0a574    20  sub jssp, jssp, #0x8 (8)
0x4cd0a578    24  stur x16, [fp, #-8]
0x4cd0a57c    28  movz w16, #0x257f
0x4cd0a580    32  cmp w0, w16, lsl #3
0x4cd0a584    36  b.hs #+0x23c (addr 0x4cd0a7c0)
0x4cd0a588    40  lsl x3, x0, #32
0x4cd0a58c    44  lsl w4, w0, #3
0x4cd0a590    48  add w4, w4, #0x10 (16)
0x4cd0a594    52  cmp w4, #0x96000 (614400)
0x4cd0a598    56  b.hs #+0x230 (addr 0x4cd0a7c8)
0x4cd0a59c    60  movz x6, #0xd2c0
0x4cd0a5a0    64  movk x6, #0x166d, lsl #16
0x4cd0a5a4    68  ldp x7, x5, [x6]
0x4cd0a5a8    72  adds x16, x7, #0x30 (48)
0x4cd0a5ac    76  ccmp x16, x5, #nzCv, lo
0x4cd0a5b0    80  b.hi #+0x120 (addr 0x4cd0a6d0)
0x4cd0a5b4    84  str x16, [x6]
0x4cd0a5b8    88  orr x7, x7, #0x1
0x4cd0a5bc    92  ldur x5, [x1, #39]
0x4cd0a5c0    96  ldur x5, [x5, #39]
0x4cd0a5c4   100  movz x16, #0x17f
0x4cd0a5c8   104  ldr x5, [x5, x16]
0x4cd0a5cc   108  stur x5, [x7, #-1]
0x4cd0a5d0   112  ldr x5, pc+400 (addr 0x000000004cd0a760)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0a5d4   116  stur x5, [x7, #7]
0x4cd0a5d8   120  ldr x5, pc+400 (addr 0x000000004cd0a768)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0a5dc   124  stur x5, [x7, #15]
0x4cd0a5e0   128  stur x3, [x7, #23]
0x4cd0a5e4   132  add x5, x7, #0x20 (32)
0x4cd0a5e8   136  ldr x6, pc+392 (addr 0x000000004cd0a770)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd0a5ec   140  stur x6, [x5, #-1]
0x4cd0a5f0   144  stur x2, [x5, #7]
0x4cd0a5f4   148  ldur w5, [x2, #35]
0x4cd0a5f8   152  add w5, w5, #0x1 (1)
0x4cd0a5fc   156  lsl x5, x5, #32
0x4cd0a600   160  stur x5, [x2, #31]
0x4cd0a604   164  sxtw x4, w4
0x4cd0a608   168  movz x5, #0xd2c0
0x4cd0a60c   172  movk x5, #0x166d, lsl #16
0x4cd0a610   176  ldp x8, x16, [x5]
0x4cd0a614   180  adds x6, x8, x4
0x4cd0a618   184  ccmp x6, x16, #nzCv, lo
0x4cd0a61c   188  b.hi #+0xf8 (addr 0x4cd0a714)
0x4cd0a620   192  str x6, [x5]
0x4cd0a624   196  orr x8, x8, #0x1
0x4cd0a628   200  ldr x4, pc+336 (addr 0x000000004cd0a778)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd0a62c   204  stur x4, [x8, #-1]
0x4cd0a630   208  stur x3, [x8, #7]
0x4cd0a634   212  mov x3, x8
0x4cd0a638   216  stur x3, [x7, #15]
0x4cd0a63c   220  add x4, x7, #0xf (15)
0x4cd0a640   224  and x3, x7, #0xfffffffffff00000
0x4cd0a644   228  ldr x3, [x3, #8]
0x4cd0a648   232  tbz w3, #2, #+0xc (addr 0x4cd0a654)
0x4cd0a64c   236  ldr x16, pc+308 (addr 0x000000004cd0a780)    ;; code: STUB, RecordWriteStub, minor: 69735
0x4cd0a650   240  blr x16
0x4cd0a654   244  mov x3, x0
0x4cd0a658   248  cmp w3, #0x0 (0)
0x4cd0a65c   252  b.le #+0x18 (addr 0x4cd0a674)
0x4cd0a660   256  sub w3, w3, #0x1 (1)
0x4cd0a664   260  ldr x4, pc+292 (addr 0x000000004cd0a788)    ;; object: 0x21004519 <the hole>
0x4cd0a668   264  add x5, x8, #0xf (15)
0x4cd0a66c   268  str x4, [x5, w3, sxtw #3]
0x4cd0a670   272  b #-0x18 (addr 0x4cd0a658)
0x4cd0a674   276  ldr x3, [fp]
0x4cd0a678   280  ldur x4, [x3, #-8]
0x4cd0a67c   284  movz x16, #0xe00000000
0x4cd0a680   288  cmp x4, x16
0x4cd0a684   292  csel x4, fp, x3, ne
0x4cd0a688   296  movz x3, #0x0
0x4cd0a68c   300  cmp w0, w3
0x4cd0a690   304  b.le #+0x24 (addr 0x4cd0a6b4)
0x4cd0a694   308  sub w5, w0, w3
0x4cd0a698   312  add w5, w5, #0x1 (1)
0x4cd0a69c   316  ldr x5, [x4, w5, uxtw #3]
0x4cd0a6a0   320  tbnz w5, #0, #+0x130 (addr 0x4cd0a7d0)
0x4cd0a6a4   324  add x6, x8, #0xf (15)
0x4cd0a6a8   328  str x5, [x6, w3, sxtw #3]
0x4cd0a6ac   332  add w3, w3, #0x1 (1)
0x4cd0a6b0   336  b #-0x24 (addr 0x4cd0a68c)
0x4cd0a6b4   340  add w0, w0, #0x1 (1)
0x4cd0a6b8   344  lsl x1, x0, #32
0x4cd0a6bc   348  mov x0, x7
0x4cd0a6c0   352  mov jssp, fp
0x4cd0a6c4   356  ldp fp, lr, [jssp], #16
0x4cd0a6c8   360  add jssp, jssp, x1, lsr #29
0x4cd0a6cc   364  ret
0x4cd0a6d0   368  movz x7, #0x0
0x4cd0a6d4   372  mov x16, lr
0x4cd0a6d8   376  ldr x17, pc+184 (addr 0x000000004cd0a790)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0a6dc   380  blr x17
0x4cd0a6e0   384  movz x0, #0x3000000000
0x4cd0a6e4   388  movz x10, #0x0
0x4cd0a6e8   392  sub csp, jssp, #0x10 (16)
0x4cd0a6ec   396  stp x10, x0, [jssp, #-16]!
0x4cd0a6f0   400  movz x0, #0x2
0x4cd0a6f4   404  movz x1, #0x5b88
0x4cd0a6f8   408  movk x1, #0xe2, lsl #16
0x4cd0a6fc   412  ldr x16, pc+156 (addr 0x000000004cd0a798)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0a700   416  blr x16
0x4cd0a704   420  str x0, [jssp, #56]
0x4cd0a708   424  ldr x16, pc+152 (addr 0x000000004cd0a7a0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0a70c   428  blr x16
0x4cd0a710   432  b #-0x154 (addr 0x4cd0a5bc)
0x4cd0a714   436  movz x8, #0x0
0x4cd0a718   440  mov x16, lr
0x4cd0a71c   444  ldr x17, pc+140 (addr 0x000000004cd0a7a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0a720   448  blr x17
0x4cd0a724   452  lsl x0, x4, #32
0x4cd0a728   456  movz x10, #0x0
0x4cd0a72c   460  sub csp, jssp, #0x10 (16)
0x4cd0a730   464  stp x10, x0, [jssp, #-16]!
0x4cd0a734   468  movz x0, #0x2
0x4cd0a738   472  movz x1, #0x5b88
0x4cd0a73c   476  movk x1, #0xe2, lsl #16
0x4cd0a740   480  ldr x16, pc+112 (addr 0x000000004cd0a7b0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0a744   484  blr x16
0x4cd0a748   488  str x0, [jssp, #64]
0x4cd0a74c   492  ldr x16, pc+108 (addr 0x000000004cd0a7b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0a750   496  blr x16
0x4cd0a754   500  b #-0x12c (addr 0x4cd0a628)
0x4cd0a758   504  5800033f       constant pool begin (num_const = 25)    ;; constant pool
0x4cd0a75c   508  d63f03e0       constant
0x4cd0a760   512  21004201       constant
0x4cd0a764   516  00000000       constant
0x4cd0a768   520  21004201       constant
0x4cd0a76c   524  00000000       constant
0x4cd0a770   528  2a805d81       constant
0x4cd0a774   532  00000000       constant
0x4cd0a778   536  2a804259       constant
0x4cd0a77c   540  00000000       constant
0x4cd0a780   544  4cd09800       constant
0x4cd0a784   548  00000000       constant
0x4cd0a788   552  21004519       constant
0x4cd0a78c   556  00000000       constant
0x4cd0a790   560  4cd06820       constant
0x4cd0a794   564  00000000       constant
0x4cd0a798   568  4cd06260       constant
0x4cd0a79c   572  00000000       constant
0x4cd0a7a0   576  4cd068e0       constant
0x4cd0a7a4   580  00000000       constant
0x4cd0a7a8   584  4cd06820       constant
0x4cd0a7ac   588  00000000       constant
0x4cd0a7b0   592  4cd06260       constant
0x4cd0a7b4   596  00000000       constant
0x4cd0a7b8   600  4cd068e0       constant
0x4cd0a7bc   604  00000000       constant
0x4cd0a7c0   608  movz x16, #0x0
0x4cd0a7c4   612  bl #+0x14 (addr 0x4cd0a7d8)
0x4cd0a7c8   616  movz x16, #0x8
0x4cd0a7cc   620  bl #+0xc (addr 0x4cd0a7d8)
0x4cd0a7d0   624  movz x16, #0x10
0x4cd0a7d4   628  bl #+0x4 (addr 0x4cd0a7d8)
0x4cd0a7d8   632  ldr x17, pc+24 (addr 0x000000004cd0a7f0)    ;; lazy deoptimization bailout 0
0x4cd0a7dc   636  add x17, x17, x16
0x4cd0a7e0   640  br x17
0x4cd0a7e4   644  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0a7e8   648  d63f03e0       constant
0x4cd0a7ec   652  d503201f       constant
0x4cd0a7f0   656  4cb06000       constant
0x4cd0a7f4   660  00000000       constant


Safepoints (size = 34)
0x4cd0a704   420  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2
0x4cd0a748   488  000 | x1 | x2 | x7 | x8 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0x4cd0a5d0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0a5d8  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0a5e8  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd0a628  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd0a64c  code target (STUB)  (0x4cd09800)
0x4cd0a664  embedded object  (0x21004519 <the hole>)
0x4cd0a6d8  code target (STUB)  (0x4cd06820)
0x4cd0a6fc  code target (STUB)  (0x4cd06260)
0x4cd0a708  code target (STUB)  (0x4cd068e0)
0x4cd0a71c  code target (STUB)  (0x4cd06820)
0x4cd0a740  code target (STUB)  (0x4cd06260)
0x4cd0a74c  code target (STUB)  (0x4cd068e0)
0x4cd0a758  constant pool (size 104)
0x4cd0a7d8  runtime entry
0x4cd0a7e4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 501)
0x4cd0a880     0  movz x16, #0xa00000000
0x4cd0a884     4  sub csp, jssp, #0x10 (16)
0x4cd0a888     8  stp fp, lr, [jssp, #-16]!
0x4cd0a88c    12  mov fp, jssp
0x4cd0a890    16  sub csp, jssp, #0x8 (8)
0x4cd0a894    20  sub jssp, jssp, #0x8 (8)
0x4cd0a898    24  stur x16, [fp, #-8]
0x4cd0a89c    28  movz w16, #0x257f
0x4cd0a8a0    32  cmp w0, w16, lsl #3
0x4cd0a8a4    36  b.hs #+0x184 (addr 0x4cd0aa28)
0x4cd0a8a8    40  lsl x3, x0, #32
0x4cd0a8ac    44  lsl w4, w0, #3
0x4cd0a8b0    48  add w4, w4, #0x10 (16)
0x4cd0a8b4    52  cmp w4, #0x96000 (614400)
0x4cd0a8b8    56  b.hs #+0x178 (addr 0x4cd0aa30)
0x4cd0a8bc    60  add w4, w4, #0x20 (32)
0x4cd0a8c0    64  sxtw x4, w4
0x4cd0a8c4    68  movz x5, #0xd2c0
0x4cd0a8c8    72  movk x5, #0x166d, lsl #16
0x4cd0a8cc    76  ldp x7, x16, [x5]
0x4cd0a8d0    80  adds x6, x7, x4
0x4cd0a8d4    84  ccmp x6, x16, #nzCv, lo
0x4cd0a8d8    88  b.hi #+0xcc (addr 0x4cd0a9a4)
0x4cd0a8dc    92  str x6, [x5]
0x4cd0a8e0    96  orr x7, x7, #0x1
0x4cd0a8e4   100  movz w4, #0x0
0x4cd0a8e8   104  stur x4, [x7, #31]
0x4cd0a8ec   108  ldur x4, [x1, #39]
0x4cd0a8f0   112  ldur x4, [x4, #39]
0x4cd0a8f4   116  movz x16, #0x17f
0x4cd0a8f8   120  ldr x4, [x4, x16]
0x4cd0a8fc   124  stur x4, [x7, #-1]
0x4cd0a900   128  ldr x4, pc+240 (addr 0x000000004cd0a9f0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0a904   132  stur x4, [x7, #7]
0x4cd0a908   136  ldr x4, pc+240 (addr 0x000000004cd0a9f8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0a90c   140  stur x4, [x7, #15]
0x4cd0a910   144  stur x3, [x7, #23]
0x4cd0a914   148  add x4, x7, #0x20 (32)
0x4cd0a918   152  ldr x5, pc+232 (addr 0x000000004cd0aa00)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd0a91c   156  stur x5, [x4, #-1]
0x4cd0a920   160  stur x3, [x4, #7]
0x4cd0a924   164  stur x4, [x7, #15]
0x4cd0a928   168  mov x3, x0
0x4cd0a92c   172  cmp w3, #0x0 (0)
0x4cd0a930   176  b.le #+0x18 (addr 0x4cd0a948)
0x4cd0a934   180  sub w3, w3, #0x1 (1)
0x4cd0a938   184  ldr x5, pc+208 (addr 0x000000004cd0aa08)    ;; object: 0x21004519 <the hole>
0x4cd0a93c   188  add x6, x4, #0xf (15)
0x4cd0a940   192  str x5, [x6, w3, sxtw #3]
0x4cd0a944   196  b #-0x18 (addr 0x4cd0a92c)
0x4cd0a948   200  ldr x3, [fp]
0x4cd0a94c   204  ldur x5, [x3, #-8]
0x4cd0a950   208  movz x16, #0xe00000000
0x4cd0a954   212  cmp x5, x16
0x4cd0a958   216  csel x5, fp, x3, ne
0x4cd0a95c   220  movz x3, #0x0
0x4cd0a960   224  cmp w0, w3
0x4cd0a964   228  b.le #+0x24 (addr 0x4cd0a988)
0x4cd0a968   232  sub w6, w0, w3
0x4cd0a96c   236  add w6, w6, #0x1 (1)
0x4cd0a970   240  ldr x6, [x5, w6, uxtw #3]
0x4cd0a974   244  tbnz w6, #0, #+0xc4 (addr 0x4cd0aa38)
0x4cd0a978   248  add x8, x4, #0xf (15)
0x4cd0a97c   252  str x6, [x8, w3, sxtw #3]
0x4cd0a980   256  add w3, w3, #0x1 (1)
0x4cd0a984   260  b #-0x24 (addr 0x4cd0a960)
0x4cd0a988   264  add w0, w0, #0x1 (1)
0x4cd0a98c   268  lsl x1, x0, #32
0x4cd0a990   272  mov x0, x7
0x4cd0a994   276  mov jssp, fp
0x4cd0a998   280  ldp fp, lr, [jssp], #16
0x4cd0a99c   284  add jssp, jssp, x1, lsr #29
0x4cd0a9a0   288  ret
0x4cd0a9a4   292  movz x7, #0x0
0x4cd0a9a8   296  mov x16, lr
0x4cd0a9ac   300  ldr x17, pc+100 (addr 0x000000004cd0aa10)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0a9b0   304  blr x17
0x4cd0a9b4   308  lsl x0, x4, #32
0x4cd0a9b8   312  movz x10, #0x0
0x4cd0a9bc   316  sub csp, jssp, #0x10 (16)
0x4cd0a9c0   320  stp x10, x0, [jssp, #-16]!
0x4cd0a9c4   324  movz x0, #0x2
0x4cd0a9c8   328  movz x1, #0x5b88
0x4cd0a9cc   332  movk x1, #0xe2, lsl #16
0x4cd0a9d0   336  ldr x16, pc+72 (addr 0x000000004cd0aa18)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0a9d4   340  blr x16
0x4cd0a9d8   344  str x0, [jssp, #56]
0x4cd0a9dc   348  ldr x16, pc+68 (addr 0x000000004cd0aa20)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0a9e0   352  blr x16
0x4cd0a9e4   356  b #-0x100 (addr 0x4cd0a8e4)
0x4cd0a9e8   360  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd0a9ec   364  d63f03e0       constant
0x4cd0a9f0   368  21004201       constant
0x4cd0a9f4   372  00000000       constant
0x4cd0a9f8   376  21004201       constant
0x4cd0a9fc   380  00000000       constant
0x4cd0aa00   384  2a804259       constant
0x4cd0aa04   388  00000000       constant
0x4cd0aa08   392  21004519       constant
0x4cd0aa0c   396  00000000       constant
0x4cd0aa10   400  4cd06820       constant
0x4cd0aa14   404  00000000       constant
0x4cd0aa18   408  4cd06260       constant
0x4cd0aa1c   412  00000000       constant
0x4cd0aa20   416  4cd068e0       constant
0x4cd0aa24   420  00000000       constant
0x4cd0aa28   424  movz x16, #0x0
0x4cd0aa2c   428  bl #+0x14 (addr 0x4cd0aa40)
0x4cd0aa30   432  movz x16, #0x8
0x4cd0aa34   436  bl #+0xc (addr 0x4cd0aa40)
0x4cd0aa38   440  movz x16, #0x10
0x4cd0aa3c   444  bl #+0x4 (addr 0x4cd0aa40)
0x4cd0aa40   448  ldr x17, pc+24 (addr 0x000000004cd0aa58)    ;; lazy deoptimization bailout 0
0x4cd0aa44   452  add x17, x17, x16
0x4cd0aa48   456  br x17
0x4cd0aa4c   460  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0aa50   464  d63f03e0       constant
0x4cd0aa54   468  d503201f       constant
0x4cd0aa58   472  4cb06000       constant
0x4cd0aa5c   476  00000000       constant


Safepoints (size = 21)
0x4cd0a9d8   344  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd0a900  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0a908  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0a918  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd0a938  embedded object  (0x21004519 <the hole>)
0x4cd0a9ac  code target (STUB)  (0x4cd06820)
0x4cd0a9d0  code target (STUB)  (0x4cd06260)
0x4cd0a9dc  code target (STUB)  (0x4cd068e0)
0x4cd0a9e8  constant pool (size 64)
0x4cd0aa40  runtime entry
0x4cd0aa4c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNArgumentsConstructorStub
name = ArrayNArgumentsConstructorStub_FAST_HOLEY_SMI_ELEMENTS_DISABLE_ALLOCATION_SITES
compiler = crankshaft
Instructions (size = 501)
0x4cd0a880     0  movz x16, #0xa00000000
0x4cd0a884     4  sub csp, jssp, #0x10 (16)
0x4cd0a888     8  stp fp, lr, [jssp, #-16]!
0x4cd0a88c    12  mov fp, jssp
0x4cd0a890    16  sub csp, jssp, #0x8 (8)
0x4cd0a894    20  sub jssp, jssp, #0x8 (8)
0x4cd0a898    24  stur x16, [fp, #-8]
0x4cd0a89c    28  movz w16, #0x257f
0x4cd0a8a0    32  cmp w0, w16, lsl #3
0x4cd0a8a4    36  b.hs #+0x184 (addr 0x4cd0aa28)
0x4cd0a8a8    40  lsl x3, x0, #32
0x4cd0a8ac    44  lsl w4, w0, #3
0x4cd0a8b0    48  add w4, w4, #0x10 (16)
0x4cd0a8b4    52  cmp w4, #0x96000 (614400)
0x4cd0a8b8    56  b.hs #+0x178 (addr 0x4cd0aa30)
0x4cd0a8bc    60  add w4, w4, #0x20 (32)
0x4cd0a8c0    64  sxtw x4, w4
0x4cd0a8c4    68  movz x5, #0xd2c0
0x4cd0a8c8    72  movk x5, #0x166d, lsl #16
0x4cd0a8cc    76  ldp x7, x16, [x5]
0x4cd0a8d0    80  adds x6, x7, x4
0x4cd0a8d4    84  ccmp x6, x16, #nzCv, lo
0x4cd0a8d8    88  b.hi #+0xcc (addr 0x4cd0a9a4)
0x4cd0a8dc    92  str x6, [x5]
0x4cd0a8e0    96  orr x7, x7, #0x1
0x4cd0a8e4   100  movz w4, #0x0
0x4cd0a8e8   104  stur x4, [x7, #31]
0x4cd0a8ec   108  ldur x4, [x1, #39]
0x4cd0a8f0   112  ldur x4, [x4, #39]
0x4cd0a8f4   116  movz x16, #0x17f
0x4cd0a8f8   120  ldr x4, [x4, x16]
0x4cd0a8fc   124  stur x4, [x7, #-1]
0x4cd0a900   128  ldr x4, pc+240 (addr 0x000000004cd0a9f0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0a904   132  stur x4, [x7, #7]
0x4cd0a908   136  ldr x4, pc+240 (addr 0x000000004cd0a9f8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0a90c   140  stur x4, [x7, #15]
0x4cd0a910   144  stur x3, [x7, #23]
0x4cd0a914   148  add x4, x7, #0x20 (32)
0x4cd0a918   152  ldr x5, pc+232 (addr 0x000000004cd0aa00)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd0a91c   156  stur x5, [x4, #-1]
0x4cd0a920   160  stur x3, [x4, #7]
0x4cd0a924   164  stur x4, [x7, #15]
0x4cd0a928   168  mov x3, x0
0x4cd0a92c   172  cmp w3, #0x0 (0)
0x4cd0a930   176  b.le #+0x18 (addr 0x4cd0a948)
0x4cd0a934   180  sub w3, w3, #0x1 (1)
0x4cd0a938   184  ldr x5, pc+208 (addr 0x000000004cd0aa08)    ;; object: 0x21004519 <the hole>
0x4cd0a93c   188  add x6, x4, #0xf (15)
0x4cd0a940   192  str x5, [x6, w3, sxtw #3]
0x4cd0a944   196  b #-0x18 (addr 0x4cd0a92c)
0x4cd0a948   200  ldr x3, [fp]
0x4cd0a94c   204  ldur x5, [x3, #-8]
0x4cd0a950   208  movz x16, #0xe00000000
0x4cd0a954   212  cmp x5, x16
0x4cd0a958   216  csel x5, fp, x3, ne
0x4cd0a95c   220  movz x3, #0x0
0x4cd0a960   224  cmp w0, w3
0x4cd0a964   228  b.le #+0x24 (addr 0x4cd0a988)
0x4cd0a968   232  sub w6, w0, w3
0x4cd0a96c   236  add w6, w6, #0x1 (1)
0x4cd0a970   240  ldr x6, [x5, w6, uxtw #3]
0x4cd0a974   244  tbnz w6, #0, #+0xc4 (addr 0x4cd0aa38)
0x4cd0a978   248  add x8, x4, #0xf (15)
0x4cd0a97c   252  str x6, [x8, w3, sxtw #3]
0x4cd0a980   256  add w3, w3, #0x1 (1)
0x4cd0a984   260  b #-0x24 (addr 0x4cd0a960)
0x4cd0a988   264  add w0, w0, #0x1 (1)
0x4cd0a98c   268  lsl x1, x0, #32
0x4cd0a990   272  mov x0, x7
0x4cd0a994   276  mov jssp, fp
0x4cd0a998   280  ldp fp, lr, [jssp], #16
0x4cd0a99c   284  add jssp, jssp, x1, lsr #29
0x4cd0a9a0   288  ret
0x4cd0a9a4   292  movz x7, #0x0
0x4cd0a9a8   296  mov x16, lr
0x4cd0a9ac   300  ldr x17, pc+100 (addr 0x000000004cd0aa10)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0a9b0   304  blr x17
0x4cd0a9b4   308  lsl x0, x4, #32
0x4cd0a9b8   312  movz x10, #0x0
0x4cd0a9bc   316  sub csp, jssp, #0x10 (16)
0x4cd0a9c0   320  stp x10, x0, [jssp, #-16]!
0x4cd0a9c4   324  movz x0, #0x2
0x4cd0a9c8   328  movz x1, #0x5b88
0x4cd0a9cc   332  movk x1, #0xe2, lsl #16
0x4cd0a9d0   336  ldr x16, pc+72 (addr 0x000000004cd0aa18)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0a9d4   340  blr x16
0x4cd0a9d8   344  str x0, [jssp, #56]
0x4cd0a9dc   348  ldr x16, pc+68 (addr 0x000000004cd0aa20)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0a9e0   352  blr x16
0x4cd0a9e4   356  b #-0x100 (addr 0x4cd0a8e4)
0x4cd0a9e8   360  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd0a9ec   364  d63f03e0       constant
0x4cd0a9f0   368  21004201       constant
0x4cd0a9f4   372  00000000       constant
0x4cd0a9f8   376  21004201       constant
0x4cd0a9fc   380  00000000       constant
0x4cd0aa00   384  2a804259       constant
0x4cd0aa04   388  00000000       constant
0x4cd0aa08   392  21004519       constant
0x4cd0aa0c   396  00000000       constant
0x4cd0aa10   400  4cd06820       constant
0x4cd0aa14   404  00000000       constant
0x4cd0aa18   408  4cd06260       constant
0x4cd0aa1c   412  00000000       constant
0x4cd0aa20   416  4cd068e0       constant
0x4cd0aa24   420  00000000       constant
0x4cd0aa28   424  movz x16, #0x0
0x4cd0aa2c   428  bl #+0x14 (addr 0x4cd0aa40)
0x4cd0aa30   432  movz x16, #0x8
0x4cd0aa34   436  bl #+0xc (addr 0x4cd0aa40)
0x4cd0aa38   440  movz x16, #0x10
0x4cd0aa3c   444  bl #+0x4 (addr 0x4cd0aa40)
0x4cd0aa40   448  ldr x17, pc+24 (addr 0x000000004cd0aa58)    ;; lazy deoptimization bailout 0
0x4cd0aa44   452  add x17, x17, x16
0x4cd0aa48   456  br x17
0x4cd0aa4c   460  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0aa50   464  d63f03e0       constant
0x4cd0aa54   468  d503201f       constant
0x4cd0aa58   472  4cb06000       constant
0x4cd0aa5c   476  00000000       constant


Safepoints (size = 21)
0x4cd0a9d8   344  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd0a900  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0a908  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0a918  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd0a938  embedded object  (0x21004519 <the hole>)
0x4cd0a9ac  code target (STUB)  (0x4cd06820)
0x4cd0a9d0  code target (STUB)  (0x4cd06260)
0x4cd0a9dc  code target (STUB)  (0x4cd068e0)
0x4cd0a9e8  constant pool (size 64)
0x4cd0aa40  runtime entry
0x4cd0aa4c  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 493)
0x4cd0aae0     0  movz x16, #0xa00000000
0x4cd0aae4     4  sub csp, jssp, #0x10 (16)
0x4cd0aae8     8  stp fp, lr, [jssp, #-16]!
0x4cd0aaec    12  mov fp, jssp
0x4cd0aaf0    16  sub csp, jssp, #0x8 (8)
0x4cd0aaf4    20  sub jssp, jssp, #0x8 (8)
0x4cd0aaf8    24  stur x16, [fp, #-8]
0x4cd0aafc    28  movz w16, #0x257f
0x4cd0ab00    32  cmp w0, w16, lsl #3
0x4cd0ab04    36  b.hs #+0x17c (addr 0x4cd0ac80)
0x4cd0ab08    40  lsl x3, x0, #32
0x4cd0ab0c    44  lsl w4, w0, #3
0x4cd0ab10    48  add w4, w4, #0x10 (16)
0x4cd0ab14    52  cmp w4, #0x96000 (614400)
0x4cd0ab18    56  b.hs #+0x170 (addr 0x4cd0ac88)
0x4cd0ab1c    60  add w4, w4, #0x20 (32)
0x4cd0ab20    64  sxtw x4, w4
0x4cd0ab24    68  movz x5, #0xd2c0
0x4cd0ab28    72  movk x5, #0x166d, lsl #16
0x4cd0ab2c    76  ldp x7, x16, [x5]
0x4cd0ab30    80  adds x6, x7, x4
0x4cd0ab34    84  ccmp x6, x16, #nzCv, lo
0x4cd0ab38    88  b.hi #+0xcc (addr 0x4cd0ac04)
0x4cd0ab3c    92  str x6, [x5]
0x4cd0ab40    96  orr x7, x7, #0x1
0x4cd0ab44   100  movz w4, #0x0
0x4cd0ab48   104  stur x4, [x7, #31]
0x4cd0ab4c   108  ldur x4, [x1, #39]
0x4cd0ab50   112  ldur x4, [x4, #39]
0x4cd0ab54   116  movz x16, #0x197
0x4cd0ab58   120  ldr x4, [x4, x16]
0x4cd0ab5c   124  stur x4, [x7, #-1]
0x4cd0ab60   128  ldr x4, pc+240 (addr 0x000000004cd0ac50)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0ab64   132  stur x4, [x7, #7]
0x4cd0ab68   136  ldr x4, pc+240 (addr 0x000000004cd0ac58)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0ab6c   140  stur x4, [x7, #15]
0x4cd0ab70   144  stur x3, [x7, #23]
0x4cd0ab74   148  add x4, x7, #0x20 (32)
0x4cd0ab78   152  ldr x5, pc+232 (addr 0x000000004cd0ac60)    ;; object: 0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd0ab7c   156  stur x5, [x4, #-1]
0x4cd0ab80   160  stur x3, [x4, #7]
0x4cd0ab84   164  stur x4, [x7, #15]
0x4cd0ab88   168  ldr x3, [fp]
0x4cd0ab8c   172  ldur x5, [x3, #-8]
0x4cd0ab90   176  movz x16, #0xe00000000
0x4cd0ab94   180  cmp x5, x16
0x4cd0ab98   184  csel x5, fp, x3, ne
0x4cd0ab9c   188  movz x3, #0x0
0x4cd0aba0   192  cmp w0, w3
0x4cd0aba4   196  b.le #+0x44 (addr 0x4cd0abe8)
0x4cd0aba8   200  sub w6, w0, w3
0x4cd0abac   204  add w6, w6, #0x1 (1)
0x4cd0abb0   208  ldr x6, [x5, w6, uxtw #3]
0x4cd0abb4   212  tbz w6, #0, #+0x1c (addr 0x4cd0abd0)
0x4cd0abb8   216  ldur x16, [x6, #-1]
0x4cd0abbc   220  ldr x17, [x26, #120]
0x4cd0abc0   224  cmp x16, x17
0x4cd0abc4   228  b.ne #+0xcc (addr 0x4cd0ac90)
0x4cd0abc8   232  ldur d0, [x6, #7]
0x4cd0abcc   236  b #+0x8 (addr 0x4cd0abd4)
0x4cd0abd0   240  scvtf d0, x6, #32
0x4cd0abd4   244  add x6, x4, #0xf (15)
0x4cd0abd8   248  fsub d29, d0, d15
0x4cd0abdc   252  str d29, [x6, w3, sxtw #3]
0x4cd0abe0   256  add w3, w3, #0x1 (1)
0x4cd0abe4   260  b #-0x44 (addr 0x4cd0aba0)
0x4cd0abe8   264  add w0, w0, #0x1 (1)
0x4cd0abec   268  lsl x1, x0, #32
0x4cd0abf0   272  mov x0, x7
0x4cd0abf4   276  mov jssp, fp
0x4cd0abf8   280  ldp fp, lr, [jssp], #16
0x4cd0abfc   284  add jssp, jssp, x1, lsr #29
0x4cd0ac00   288  ret
0x4cd0ac04   292  movz x7, #0x0
0x4cd0ac08   296  mov x16, lr
0x4cd0ac0c   300  ldr x17, pc+92 (addr 0x000000004cd0ac68)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0ac10   304  blr x17
0x4cd0ac14   308  lsl x0, x4, #32
0x4cd0ac18   312  movz x10, #0x100000000
0x4cd0ac1c   316  sub csp, jssp, #0x10 (16)
0x4cd0ac20   320  stp x10, x0, [jssp, #-16]!
0x4cd0ac24   324  movz x0, #0x2
0x4cd0ac28   328  movz x1, #0x5b88
0x4cd0ac2c   332  movk x1, #0xe2, lsl #16
0x4cd0ac30   336  ldr x16, pc+64 (addr 0x000000004cd0ac70)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0ac34   340  blr x16
0x4cd0ac38   344  str x0, [jssp, #56]
0x4cd0ac3c   348  ldr x16, pc+60 (addr 0x000000004cd0ac78)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0ac40   352  blr x16
0x4cd0ac44   356  b #-0x100 (addr 0x4cd0ab44)
0x4cd0ac48   360  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd0ac4c   364  d63f03e0       constant
0x4cd0ac50   368  21004201       constant
0x4cd0ac54   372  00000000       constant
0x4cd0ac58   376  21004201       constant
0x4cd0ac5c   380  00000000       constant
0x4cd0ac60   384  2a8052d9       constant
0x4cd0ac64   388  00000000       constant
0x4cd0ac68   392  4cd06820       constant
0x4cd0ac6c   396  00000000       constant
0x4cd0ac70   400  4cd06260       constant
0x4cd0ac74   404  00000000       constant
0x4cd0ac78   408  4cd068e0       constant
0x4cd0ac7c   412  00000000       constant
0x4cd0ac80   416  movz x16, #0x0
0x4cd0ac84   420  bl #+0x14 (addr 0x4cd0ac98)
0x4cd0ac88   424  movz x16, #0x8
0x4cd0ac8c   428  bl #+0xc (addr 0x4cd0ac98)
0x4cd0ac90   432  movz x16, #0x10
0x4cd0ac94   436  bl #+0x4 (addr 0x4cd0ac98)
0x4cd0ac98   440  ldr x17, pc+24 (addr 0x000000004cd0acb0)    ;; lazy deoptimization bailout 0
0x4cd0ac9c   444  add x17, x17, x16
0x4cd0aca0   448  br x17
0x4cd0aca4   452  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0aca8   456  d63f03e0       constant
0x4cd0acac   460  d503201f       constant
0x4cd0acb0   464  4cb06000       constant
0x4cd0acb4   468  00000000       constant


Safepoints (size = 21)
0x4cd0ac38   344  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd0ab60  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0ab68  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0ab78  embedded object  (0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd0ac0c  code target (STUB)  (0x4cd06820)
0x4cd0ac30  code target (STUB)  (0x4cd06260)
0x4cd0ac3c  code target (STUB)  (0x4cd068e0)
0x4cd0ac48  constant pool (size 56)
0x4cd0ac98  runtime entry
0x4cd0aca4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNArgumentsConstructorStub
name = ArrayNArgumentsConstructorStub_FAST_DOUBLE_ELEMENTS
compiler = crankshaft
Instructions (size = 493)
0x4cd0aae0     0  movz x16, #0xa00000000
0x4cd0aae4     4  sub csp, jssp, #0x10 (16)
0x4cd0aae8     8  stp fp, lr, [jssp, #-16]!
0x4cd0aaec    12  mov fp, jssp
0x4cd0aaf0    16  sub csp, jssp, #0x8 (8)
0x4cd0aaf4    20  sub jssp, jssp, #0x8 (8)
0x4cd0aaf8    24  stur x16, [fp, #-8]
0x4cd0aafc    28  movz w16, #0x257f
0x4cd0ab00    32  cmp w0, w16, lsl #3
0x4cd0ab04    36  b.hs #+0x17c (addr 0x4cd0ac80)
0x4cd0ab08    40  lsl x3, x0, #32
0x4cd0ab0c    44  lsl w4, w0, #3
0x4cd0ab10    48  add w4, w4, #0x10 (16)
0x4cd0ab14    52  cmp w4, #0x96000 (614400)
0x4cd0ab18    56  b.hs #+0x170 (addr 0x4cd0ac88)
0x4cd0ab1c    60  add w4, w4, #0x20 (32)
0x4cd0ab20    64  sxtw x4, w4
0x4cd0ab24    68  movz x5, #0xd2c0
0x4cd0ab28    72  movk x5, #0x166d, lsl #16
0x4cd0ab2c    76  ldp x7, x16, [x5]
0x4cd0ab30    80  adds x6, x7, x4
0x4cd0ab34    84  ccmp x6, x16, #nzCv, lo
0x4cd0ab38    88  b.hi #+0xcc (addr 0x4cd0ac04)
0x4cd0ab3c    92  str x6, [x5]
0x4cd0ab40    96  orr x7, x7, #0x1
0x4cd0ab44   100  movz w4, #0x0
0x4cd0ab48   104  stur x4, [x7, #31]
0x4cd0ab4c   108  ldur x4, [x1, #39]
0x4cd0ab50   112  ldur x4, [x4, #39]
0x4cd0ab54   116  movz x16, #0x197
0x4cd0ab58   120  ldr x4, [x4, x16]
0x4cd0ab5c   124  stur x4, [x7, #-1]
0x4cd0ab60   128  ldr x4, pc+240 (addr 0x000000004cd0ac50)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0ab64   132  stur x4, [x7, #7]
0x4cd0ab68   136  ldr x4, pc+240 (addr 0x000000004cd0ac58)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0ab6c   140  stur x4, [x7, #15]
0x4cd0ab70   144  stur x3, [x7, #23]
0x4cd0ab74   148  add x4, x7, #0x20 (32)
0x4cd0ab78   152  ldr x5, pc+232 (addr 0x000000004cd0ac60)    ;; object: 0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd0ab7c   156  stur x5, [x4, #-1]
0x4cd0ab80   160  stur x3, [x4, #7]
0x4cd0ab84   164  stur x4, [x7, #15]
0x4cd0ab88   168  ldr x3, [fp]
0x4cd0ab8c   172  ldur x5, [x3, #-8]
0x4cd0ab90   176  movz x16, #0xe00000000
0x4cd0ab94   180  cmp x5, x16
0x4cd0ab98   184  csel x5, fp, x3, ne
0x4cd0ab9c   188  movz x3, #0x0
0x4cd0aba0   192  cmp w0, w3
0x4cd0aba4   196  b.le #+0x44 (addr 0x4cd0abe8)
0x4cd0aba8   200  sub w6, w0, w3
0x4cd0abac   204  add w6, w6, #0x1 (1)
0x4cd0abb0   208  ldr x6, [x5, w6, uxtw #3]
0x4cd0abb4   212  tbz w6, #0, #+0x1c (addr 0x4cd0abd0)
0x4cd0abb8   216  ldur x16, [x6, #-1]
0x4cd0abbc   220  ldr x17, [x26, #120]
0x4cd0abc0   224  cmp x16, x17
0x4cd0abc4   228  b.ne #+0xcc (addr 0x4cd0ac90)
0x4cd0abc8   232  ldur d0, [x6, #7]
0x4cd0abcc   236  b #+0x8 (addr 0x4cd0abd4)
0x4cd0abd0   240  scvtf d0, x6, #32
0x4cd0abd4   244  add x6, x4, #0xf (15)
0x4cd0abd8   248  fsub d29, d0, d15
0x4cd0abdc   252  str d29, [x6, w3, sxtw #3]
0x4cd0abe0   256  add w3, w3, #0x1 (1)
0x4cd0abe4   260  b #-0x44 (addr 0x4cd0aba0)
0x4cd0abe8   264  add w0, w0, #0x1 (1)
0x4cd0abec   268  lsl x1, x0, #32
0x4cd0abf0   272  mov x0, x7
0x4cd0abf4   276  mov jssp, fp
0x4cd0abf8   280  ldp fp, lr, [jssp], #16
0x4cd0abfc   284  add jssp, jssp, x1, lsr #29
0x4cd0ac00   288  ret
0x4cd0ac04   292  movz x7, #0x0
0x4cd0ac08   296  mov x16, lr
0x4cd0ac0c   300  ldr x17, pc+92 (addr 0x000000004cd0ac68)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0ac10   304  blr x17
0x4cd0ac14   308  lsl x0, x4, #32
0x4cd0ac18   312  movz x10, #0x100000000
0x4cd0ac1c   316  sub csp, jssp, #0x10 (16)
0x4cd0ac20   320  stp x10, x0, [jssp, #-16]!
0x4cd0ac24   324  movz x0, #0x2
0x4cd0ac28   328  movz x1, #0x5b88
0x4cd0ac2c   332  movk x1, #0xe2, lsl #16
0x4cd0ac30   336  ldr x16, pc+64 (addr 0x000000004cd0ac70)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0ac34   340  blr x16
0x4cd0ac38   344  str x0, [jssp, #56]
0x4cd0ac3c   348  ldr x16, pc+60 (addr 0x000000004cd0ac78)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0ac40   352  blr x16
0x4cd0ac44   356  b #-0x100 (addr 0x4cd0ab44)
0x4cd0ac48   360  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd0ac4c   364  d63f03e0       constant
0x4cd0ac50   368  21004201       constant
0x4cd0ac54   372  00000000       constant
0x4cd0ac58   376  21004201       constant
0x4cd0ac5c   380  00000000       constant
0x4cd0ac60   384  2a8052d9       constant
0x4cd0ac64   388  00000000       constant
0x4cd0ac68   392  4cd06820       constant
0x4cd0ac6c   396  00000000       constant
0x4cd0ac70   400  4cd06260       constant
0x4cd0ac74   404  00000000       constant
0x4cd0ac78   408  4cd068e0       constant
0x4cd0ac7c   412  00000000       constant
0x4cd0ac80   416  movz x16, #0x0
0x4cd0ac84   420  bl #+0x14 (addr 0x4cd0ac98)
0x4cd0ac88   424  movz x16, #0x8
0x4cd0ac8c   428  bl #+0xc (addr 0x4cd0ac98)
0x4cd0ac90   432  movz x16, #0x10
0x4cd0ac94   436  bl #+0x4 (addr 0x4cd0ac98)
0x4cd0ac98   440  ldr x17, pc+24 (addr 0x000000004cd0acb0)    ;; lazy deoptimization bailout 0
0x4cd0ac9c   444  add x17, x17, x16
0x4cd0aca0   448  br x17
0x4cd0aca4   452  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0aca8   456  d63f03e0       constant
0x4cd0acac   460  d503201f       constant
0x4cd0acb0   464  4cb06000       constant
0x4cd0acb4   468  00000000       constant


Safepoints (size = 21)
0x4cd0ac38   344  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd0ab60  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0ab68  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0ab78  embedded object  (0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd0ac0c  code target (STUB)  (0x4cd06820)
0x4cd0ac30  code target (STUB)  (0x4cd06260)
0x4cd0ac3c  code target (STUB)  (0x4cd068e0)
0x4cd0ac48  constant pool (size 56)
0x4cd0ac98  runtime entry
0x4cd0aca4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 493)
0x4cd0ad40     0  movz x16, #0xa00000000
0x4cd0ad44     4  sub csp, jssp, #0x10 (16)
0x4cd0ad48     8  stp fp, lr, [jssp, #-16]!
0x4cd0ad4c    12  mov fp, jssp
0x4cd0ad50    16  sub csp, jssp, #0x8 (8)
0x4cd0ad54    20  sub jssp, jssp, #0x8 (8)
0x4cd0ad58    24  stur x16, [fp, #-8]
0x4cd0ad5c    28  movz w16, #0x257f
0x4cd0ad60    32  cmp w0, w16, lsl #3
0x4cd0ad64    36  b.hs #+0x17c (addr 0x4cd0aee0)
0x4cd0ad68    40  lsl x3, x0, #32
0x4cd0ad6c    44  lsl w4, w0, #3
0x4cd0ad70    48  add w4, w4, #0x10 (16)
0x4cd0ad74    52  cmp w4, #0x96000 (614400)
0x4cd0ad78    56  b.hs #+0x170 (addr 0x4cd0aee8)
0x4cd0ad7c    60  add w4, w4, #0x20 (32)
0x4cd0ad80    64  sxtw x4, w4
0x4cd0ad84    68  movz x5, #0xd2c0
0x4cd0ad88    72  movk x5, #0x166d, lsl #16
0x4cd0ad8c    76  ldp x7, x16, [x5]
0x4cd0ad90    80  adds x6, x7, x4
0x4cd0ad94    84  ccmp x6, x16, #nzCv, lo
0x4cd0ad98    88  b.hi #+0xcc (addr 0x4cd0ae64)
0x4cd0ad9c    92  str x6, [x5]
0x4cd0ada0    96  orr x7, x7, #0x1
0x4cd0ada4   100  movz w4, #0x0
0x4cd0ada8   104  stur x4, [x7, #31]
0x4cd0adac   108  ldur x4, [x1, #39]
0x4cd0adb0   112  ldur x4, [x4, #39]
0x4cd0adb4   116  movz x16, #0x19f
0x4cd0adb8   120  ldr x4, [x4, x16]
0x4cd0adbc   124  stur x4, [x7, #-1]
0x4cd0adc0   128  ldr x4, pc+240 (addr 0x000000004cd0aeb0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0adc4   132  stur x4, [x7, #7]
0x4cd0adc8   136  ldr x4, pc+240 (addr 0x000000004cd0aeb8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0adcc   140  stur x4, [x7, #15]
0x4cd0add0   144  stur x3, [x7, #23]
0x4cd0add4   148  add x4, x7, #0x20 (32)
0x4cd0add8   152  ldr x5, pc+232 (addr 0x000000004cd0aec0)    ;; object: 0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd0addc   156  stur x5, [x4, #-1]
0x4cd0ade0   160  stur x3, [x4, #7]
0x4cd0ade4   164  stur x4, [x7, #15]
0x4cd0ade8   168  ldr x3, [fp]
0x4cd0adec   172  ldur x5, [x3, #-8]
0x4cd0adf0   176  movz x16, #0xe00000000
0x4cd0adf4   180  cmp x5, x16
0x4cd0adf8   184  csel x5, fp, x3, ne
0x4cd0adfc   188  movz x3, #0x0
0x4cd0ae00   192  cmp w0, w3
0x4cd0ae04   196  b.le #+0x44 (addr 0x4cd0ae48)
0x4cd0ae08   200  sub w6, w0, w3
0x4cd0ae0c   204  add w6, w6, #0x1 (1)
0x4cd0ae10   208  ldr x6, [x5, w6, uxtw #3]
0x4cd0ae14   212  tbz w6, #0, #+0x1c (addr 0x4cd0ae30)
0x4cd0ae18   216  ldur x16, [x6, #-1]
0x4cd0ae1c   220  ldr x17, [x26, #120]
0x4cd0ae20   224  cmp x16, x17
0x4cd0ae24   228  b.ne #+0xcc (addr 0x4cd0aef0)
0x4cd0ae28   232  ldur d0, [x6, #7]
0x4cd0ae2c   236  b #+0x8 (addr 0x4cd0ae34)
0x4cd0ae30   240  scvtf d0, x6, #32
0x4cd0ae34   244  add x6, x4, #0xf (15)
0x4cd0ae38   248  fsub d29, d0, d15
0x4cd0ae3c   252  str d29, [x6, w3, sxtw #3]
0x4cd0ae40   256  add w3, w3, #0x1 (1)
0x4cd0ae44   260  b #-0x44 (addr 0x4cd0ae00)
0x4cd0ae48   264  add w0, w0, #0x1 (1)
0x4cd0ae4c   268  lsl x1, x0, #32
0x4cd0ae50   272  mov x0, x7
0x4cd0ae54   276  mov jssp, fp
0x4cd0ae58   280  ldp fp, lr, [jssp], #16
0x4cd0ae5c   284  add jssp, jssp, x1, lsr #29
0x4cd0ae60   288  ret
0x4cd0ae64   292  movz x7, #0x0
0x4cd0ae68   296  mov x16, lr
0x4cd0ae6c   300  ldr x17, pc+92 (addr 0x000000004cd0aec8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0ae70   304  blr x17
0x4cd0ae74   308  lsl x0, x4, #32
0x4cd0ae78   312  movz x10, #0x100000000
0x4cd0ae7c   316  sub csp, jssp, #0x10 (16)
0x4cd0ae80   320  stp x10, x0, [jssp, #-16]!
0x4cd0ae84   324  movz x0, #0x2
0x4cd0ae88   328  movz x1, #0x5b88
0x4cd0ae8c   332  movk x1, #0xe2, lsl #16
0x4cd0ae90   336  ldr x16, pc+64 (addr 0x000000004cd0aed0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0ae94   340  blr x16
0x4cd0ae98   344  str x0, [jssp, #56]
0x4cd0ae9c   348  ldr x16, pc+60 (addr 0x000000004cd0aed8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0aea0   352  blr x16
0x4cd0aea4   356  b #-0x100 (addr 0x4cd0ada4)
0x4cd0aea8   360  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd0aeac   364  d63f03e0       constant
0x4cd0aeb0   368  21004201       constant
0x4cd0aeb4   372  00000000       constant
0x4cd0aeb8   376  21004201       constant
0x4cd0aebc   380  00000000       constant
0x4cd0aec0   384  2a8052d9       constant
0x4cd0aec4   388  00000000       constant
0x4cd0aec8   392  4cd06820       constant
0x4cd0aecc   396  00000000       constant
0x4cd0aed0   400  4cd06260       constant
0x4cd0aed4   404  00000000       constant
0x4cd0aed8   408  4cd068e0       constant
0x4cd0aedc   412  00000000       constant
0x4cd0aee0   416  movz x16, #0x0
0x4cd0aee4   420  bl #+0x14 (addr 0x4cd0aef8)
0x4cd0aee8   424  movz x16, #0x8
0x4cd0aeec   428  bl #+0xc (addr 0x4cd0aef8)
0x4cd0aef0   432  movz x16, #0x10
0x4cd0aef4   436  bl #+0x4 (addr 0x4cd0aef8)
0x4cd0aef8   440  ldr x17, pc+24 (addr 0x000000004cd0af10)    ;; lazy deoptimization bailout 0
0x4cd0aefc   444  add x17, x17, x16
0x4cd0af00   448  br x17
0x4cd0af04   452  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0af08   456  d63f03e0       constant
0x4cd0af0c   460  d503201f       constant
0x4cd0af10   464  4cb06000       constant
0x4cd0af14   468  00000000       constant


Safepoints (size = 21)
0x4cd0ae98   344  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd0adc0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0adc8  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0add8  embedded object  (0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd0ae6c  code target (STUB)  (0x4cd06820)
0x4cd0ae90  code target (STUB)  (0x4cd06260)
0x4cd0ae9c  code target (STUB)  (0x4cd068e0)
0x4cd0aea8  constant pool (size 56)
0x4cd0aef8  runtime entry
0x4cd0af04  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNArgumentsConstructorStub
name = ArrayNArgumentsConstructorStub_FAST_HOLEY_DOUBLE_ELEMENTS
compiler = crankshaft
Instructions (size = 493)
0x4cd0ad40     0  movz x16, #0xa00000000
0x4cd0ad44     4  sub csp, jssp, #0x10 (16)
0x4cd0ad48     8  stp fp, lr, [jssp, #-16]!
0x4cd0ad4c    12  mov fp, jssp
0x4cd0ad50    16  sub csp, jssp, #0x8 (8)
0x4cd0ad54    20  sub jssp, jssp, #0x8 (8)
0x4cd0ad58    24  stur x16, [fp, #-8]
0x4cd0ad5c    28  movz w16, #0x257f
0x4cd0ad60    32  cmp w0, w16, lsl #3
0x4cd0ad64    36  b.hs #+0x17c (addr 0x4cd0aee0)
0x4cd0ad68    40  lsl x3, x0, #32
0x4cd0ad6c    44  lsl w4, w0, #3
0x4cd0ad70    48  add w4, w4, #0x10 (16)
0x4cd0ad74    52  cmp w4, #0x96000 (614400)
0x4cd0ad78    56  b.hs #+0x170 (addr 0x4cd0aee8)
0x4cd0ad7c    60  add w4, w4, #0x20 (32)
0x4cd0ad80    64  sxtw x4, w4
0x4cd0ad84    68  movz x5, #0xd2c0
0x4cd0ad88    72  movk x5, #0x166d, lsl #16
0x4cd0ad8c    76  ldp x7, x16, [x5]
0x4cd0ad90    80  adds x6, x7, x4
0x4cd0ad94    84  ccmp x6, x16, #nzCv, lo
0x4cd0ad98    88  b.hi #+0xcc (addr 0x4cd0ae64)
0x4cd0ad9c    92  str x6, [x5]
0x4cd0ada0    96  orr x7, x7, #0x1
0x4cd0ada4   100  movz w4, #0x0
0x4cd0ada8   104  stur x4, [x7, #31]
0x4cd0adac   108  ldur x4, [x1, #39]
0x4cd0adb0   112  ldur x4, [x4, #39]
0x4cd0adb4   116  movz x16, #0x19f
0x4cd0adb8   120  ldr x4, [x4, x16]
0x4cd0adbc   124  stur x4, [x7, #-1]
0x4cd0adc0   128  ldr x4, pc+240 (addr 0x000000004cd0aeb0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0adc4   132  stur x4, [x7, #7]
0x4cd0adc8   136  ldr x4, pc+240 (addr 0x000000004cd0aeb8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0adcc   140  stur x4, [x7, #15]
0x4cd0add0   144  stur x3, [x7, #23]
0x4cd0add4   148  add x4, x7, #0x20 (32)
0x4cd0add8   152  ldr x5, pc+232 (addr 0x000000004cd0aec0)    ;; object: 0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd0addc   156  stur x5, [x4, #-1]
0x4cd0ade0   160  stur x3, [x4, #7]
0x4cd0ade4   164  stur x4, [x7, #15]
0x4cd0ade8   168  ldr x3, [fp]
0x4cd0adec   172  ldur x5, [x3, #-8]
0x4cd0adf0   176  movz x16, #0xe00000000
0x4cd0adf4   180  cmp x5, x16
0x4cd0adf8   184  csel x5, fp, x3, ne
0x4cd0adfc   188  movz x3, #0x0
0x4cd0ae00   192  cmp w0, w3
0x4cd0ae04   196  b.le #+0x44 (addr 0x4cd0ae48)
0x4cd0ae08   200  sub w6, w0, w3
0x4cd0ae0c   204  add w6, w6, #0x1 (1)
0x4cd0ae10   208  ldr x6, [x5, w6, uxtw #3]
0x4cd0ae14   212  tbz w6, #0, #+0x1c (addr 0x4cd0ae30)
0x4cd0ae18   216  ldur x16, [x6, #-1]
0x4cd0ae1c   220  ldr x17, [x26, #120]
0x4cd0ae20   224  cmp x16, x17
0x4cd0ae24   228  b.ne #+0xcc (addr 0x4cd0aef0)
0x4cd0ae28   232  ldur d0, [x6, #7]
0x4cd0ae2c   236  b #+0x8 (addr 0x4cd0ae34)
0x4cd0ae30   240  scvtf d0, x6, #32
0x4cd0ae34   244  add x6, x4, #0xf (15)
0x4cd0ae38   248  fsub d29, d0, d15
0x4cd0ae3c   252  str d29, [x6, w3, sxtw #3]
0x4cd0ae40   256  add w3, w3, #0x1 (1)
0x4cd0ae44   260  b #-0x44 (addr 0x4cd0ae00)
0x4cd0ae48   264  add w0, w0, #0x1 (1)
0x4cd0ae4c   268  lsl x1, x0, #32
0x4cd0ae50   272  mov x0, x7
0x4cd0ae54   276  mov jssp, fp
0x4cd0ae58   280  ldp fp, lr, [jssp], #16
0x4cd0ae5c   284  add jssp, jssp, x1, lsr #29
0x4cd0ae60   288  ret
0x4cd0ae64   292  movz x7, #0x0
0x4cd0ae68   296  mov x16, lr
0x4cd0ae6c   300  ldr x17, pc+92 (addr 0x000000004cd0aec8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0ae70   304  blr x17
0x4cd0ae74   308  lsl x0, x4, #32
0x4cd0ae78   312  movz x10, #0x100000000
0x4cd0ae7c   316  sub csp, jssp, #0x10 (16)
0x4cd0ae80   320  stp x10, x0, [jssp, #-16]!
0x4cd0ae84   324  movz x0, #0x2
0x4cd0ae88   328  movz x1, #0x5b88
0x4cd0ae8c   332  movk x1, #0xe2, lsl #16
0x4cd0ae90   336  ldr x16, pc+64 (addr 0x000000004cd0aed0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0ae94   340  blr x16
0x4cd0ae98   344  str x0, [jssp, #56]
0x4cd0ae9c   348  ldr x16, pc+60 (addr 0x000000004cd0aed8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0aea0   352  blr x16
0x4cd0aea4   356  b #-0x100 (addr 0x4cd0ada4)
0x4cd0aea8   360  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd0aeac   364  d63f03e0       constant
0x4cd0aeb0   368  21004201       constant
0x4cd0aeb4   372  00000000       constant
0x4cd0aeb8   376  21004201       constant
0x4cd0aebc   380  00000000       constant
0x4cd0aec0   384  2a8052d9       constant
0x4cd0aec4   388  00000000       constant
0x4cd0aec8   392  4cd06820       constant
0x4cd0aecc   396  00000000       constant
0x4cd0aed0   400  4cd06260       constant
0x4cd0aed4   404  00000000       constant
0x4cd0aed8   408  4cd068e0       constant
0x4cd0aedc   412  00000000       constant
0x4cd0aee0   416  movz x16, #0x0
0x4cd0aee4   420  bl #+0x14 (addr 0x4cd0aef8)
0x4cd0aee8   424  movz x16, #0x8
0x4cd0aeec   428  bl #+0xc (addr 0x4cd0aef8)
0x4cd0aef0   432  movz x16, #0x10
0x4cd0aef4   436  bl #+0x4 (addr 0x4cd0aef8)
0x4cd0aef8   440  ldr x17, pc+24 (addr 0x000000004cd0af10)    ;; lazy deoptimization bailout 0
0x4cd0aefc   444  add x17, x17, x16
0x4cd0af00   448  br x17
0x4cd0af04   452  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0af08   456  d63f03e0       constant
0x4cd0af0c   460  d503201f       constant
0x4cd0af10   464  4cb06000       constant
0x4cd0af14   468  00000000       constant


Safepoints (size = 21)
0x4cd0ae98   344  000 | x1 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd0adc0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0adc8  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0add8  embedded object  (0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd0ae6c  code target (STUB)  (0x4cd06820)
0x4cd0ae90  code target (STUB)  (0x4cd06260)
0x4cd0ae9c  code target (STUB)  (0x4cd068e0)
0x4cd0aea8  constant pool (size 56)
0x4cd0aef8  runtime entry
0x4cd0af04  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 453)
0x4cd0afa0     0  movz x16, #0xa00000000
0x4cd0afa4     4  sub csp, jssp, #0x10 (16)
0x4cd0afa8     8  stp fp, lr, [jssp, #-16]!
0x4cd0afac    12  mov fp, jssp
0x4cd0afb0    16  sub csp, jssp, #0x8 (8)
0x4cd0afb4    20  sub jssp, jssp, #0x8 (8)
0x4cd0afb8    24  stur x16, [fp, #-8]
0x4cd0afbc    28  movz w16, #0x257f
0x4cd0afc0    32  cmp w0, w16, lsl #3
0x4cd0afc4    36  b.hs #+0x15c (addr 0x4cd0b120)
0x4cd0afc8    40  lsl x3, x0, #32
0x4cd0afcc    44  lsl w4, w0, #3
0x4cd0afd0    48  add w4, w4, #0x10 (16)
0x4cd0afd4    52  cmp w4, #0x96000 (614400)
0x4cd0afd8    56  b.hs #+0x150 (addr 0x4cd0b128)
0x4cd0afdc    60  add w2, w4, #0x20 (32)
0x4cd0afe0    64  sxtw x2, w2
0x4cd0afe4    68  movz x4, #0xd2c0
0x4cd0afe8    72  movk x4, #0x166d, lsl #16
0x4cd0afec    76  ldp x6, x16, [x4]
0x4cd0aff0    80  adds x5, x6, x2
0x4cd0aff4    84  ccmp x5, x16, #nzCv, lo
0x4cd0aff8    88  b.hi #+0xa8 (addr 0x4cd0b0a0)
0x4cd0affc    92  str x5, [x4]
0x4cd0b000    96  orr x6, x6, #0x1
0x4cd0b004   100  movz w2, #0x0
0x4cd0b008   104  stur x2, [x6, #31]
0x4cd0b00c   108  ldur x1, [x1, #39]
0x4cd0b010   112  ldur x1, [x1, #39]
0x4cd0b014   116  movz x16, #0x187
0x4cd0b018   120  ldr x1, [x1, x16]
0x4cd0b01c   124  stur x1, [x6, #-1]
0x4cd0b020   128  ldr x1, pc+208 (addr 0x000000004cd0b0f0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0b024   132  stur x1, [x6, #7]
0x4cd0b028   136  ldr x1, pc+208 (addr 0x000000004cd0b0f8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0b02c   140  stur x1, [x6, #15]
0x4cd0b030   144  stur x3, [x6, #23]
0x4cd0b034   148  add x1, x6, #0x20 (32)
0x4cd0b038   152  ldr x2, pc+200 (addr 0x000000004cd0b100)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd0b03c   156  stur x2, [x1, #-1]
0x4cd0b040   160  stur x3, [x1, #7]
0x4cd0b044   164  stur x1, [x6, #15]
0x4cd0b048   168  ldr x2, [fp]
0x4cd0b04c   172  ldur x3, [x2, #-8]
0x4cd0b050   176  movz x16, #0xe00000000
0x4cd0b054   180  cmp x3, x16
0x4cd0b058   184  csel x3, fp, x2, ne
0x4cd0b05c   188  movz x2, #0x0
0x4cd0b060   192  cmp w0, w2
0x4cd0b064   196  b.le #+0x20 (addr 0x4cd0b084)
0x4cd0b068   200  sub w4, w0, w2
0x4cd0b06c   204  add w4, w4, #0x1 (1)
0x4cd0b070   208  ldr x4, [x3, w4, uxtw #3]
0x4cd0b074   212  add x5, x1, #0xf (15)
0x4cd0b078   216  str x4, [x5, w2, sxtw #3]
0x4cd0b07c   220  add w2, w2, #0x1 (1)
0x4cd0b080   224  b #-0x20 (addr 0x4cd0b060)
0x4cd0b084   228  add w0, w0, #0x1 (1)
0x4cd0b088   232  lsl x1, x0, #32
0x4cd0b08c   236  mov x0, x6
0x4cd0b090   240  mov jssp, fp
0x4cd0b094   244  ldp fp, lr, [jssp], #16
0x4cd0b098   248  add jssp, jssp, x1, lsr #29
0x4cd0b09c   252  ret
0x4cd0b0a0   256  movz x6, #0x0
0x4cd0b0a4   260  mov x16, lr
0x4cd0b0a8   264  ldr x17, pc+96 (addr 0x000000004cd0b108)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0b0ac   268  blr x17
0x4cd0b0b0   272  lsl x0, x2, #32
0x4cd0b0b4   276  movz x10, #0x0
0x4cd0b0b8   280  sub csp, jssp, #0x10 (16)
0x4cd0b0bc   284  stp x10, x0, [jssp, #-16]!
0x4cd0b0c0   288  movz x0, #0x2
0x4cd0b0c4   292  movz x1, #0x5b88
0x4cd0b0c8   296  movk x1, #0xe2, lsl #16
0x4cd0b0cc   300  ldr x16, pc+68 (addr 0x000000004cd0b110)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0b0d0   304  blr x16
0x4cd0b0d4   308  str x0, [jssp, #48]
0x4cd0b0d8   312  ldr x16, pc+64 (addr 0x000000004cd0b118)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0b0dc   316  blr x16
0x4cd0b0e0   320  b #-0xdc (addr 0x4cd0b004)
0x4cd0b0e4   324  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cd0b0e8   328  d63f03e0       constant
0x4cd0b0ec   332  d503201f       constant
0x4cd0b0f0   336  21004201       constant
0x4cd0b0f4   340  00000000       constant
0x4cd0b0f8   344  21004201       constant
0x4cd0b0fc   348  00000000       constant
0x4cd0b100   352  2a804259       constant
0x4cd0b104   356  00000000       constant
0x4cd0b108   360  4cd06820       constant
0x4cd0b10c   364  00000000       constant
0x4cd0b110   368  4cd06260       constant
0x4cd0b114   372  00000000       constant
0x4cd0b118   376  4cd068e0       constant
0x4cd0b11c   380  00000000       constant
0x4cd0b120   384  movz x16, #0x0
0x4cd0b124   388  bl #+0xc (addr 0x4cd0b130)
0x4cd0b128   392  movz x16, #0x8
0x4cd0b12c   396  bl #+0x4 (addr 0x4cd0b130)
0x4cd0b130   400  ldr x17, pc+24 (addr 0x000000004cd0b148)    ;; lazy deoptimization bailout 0
0x4cd0b134   404  add x17, x17, x16
0x4cd0b138   408  br x17
0x4cd0b13c   412  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0b140   416  d63f03e0       constant
0x4cd0b144   420  d503201f       constant
0x4cd0b148   424  4cb06000       constant
0x4cd0b14c   428  00000000       constant


Safepoints (size = 21)
0x4cd0b0d4   308  000 | x1 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd0b020  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0b028  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0b038  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd0b0a8  code target (STUB)  (0x4cd06820)
0x4cd0b0cc  code target (STUB)  (0x4cd06260)
0x4cd0b0d8  code target (STUB)  (0x4cd068e0)
0x4cd0b0e4  constant pool (size 60)
0x4cd0b130  runtime entry
0x4cd0b13c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNArgumentsConstructorStub
name = ArrayNArgumentsConstructorStub_FAST_ELEMENTS
compiler = crankshaft
Instructions (size = 453)
0x4cd0afa0     0  movz x16, #0xa00000000
0x4cd0afa4     4  sub csp, jssp, #0x10 (16)
0x4cd0afa8     8  stp fp, lr, [jssp, #-16]!
0x4cd0afac    12  mov fp, jssp
0x4cd0afb0    16  sub csp, jssp, #0x8 (8)
0x4cd0afb4    20  sub jssp, jssp, #0x8 (8)
0x4cd0afb8    24  stur x16, [fp, #-8]
0x4cd0afbc    28  movz w16, #0x257f
0x4cd0afc0    32  cmp w0, w16, lsl #3
0x4cd0afc4    36  b.hs #+0x15c (addr 0x4cd0b120)
0x4cd0afc8    40  lsl x3, x0, #32
0x4cd0afcc    44  lsl w4, w0, #3
0x4cd0afd0    48  add w4, w4, #0x10 (16)
0x4cd0afd4    52  cmp w4, #0x96000 (614400)
0x4cd0afd8    56  b.hs #+0x150 (addr 0x4cd0b128)
0x4cd0afdc    60  add w2, w4, #0x20 (32)
0x4cd0afe0    64  sxtw x2, w2
0x4cd0afe4    68  movz x4, #0xd2c0
0x4cd0afe8    72  movk x4, #0x166d, lsl #16
0x4cd0afec    76  ldp x6, x16, [x4]
0x4cd0aff0    80  adds x5, x6, x2
0x4cd0aff4    84  ccmp x5, x16, #nzCv, lo
0x4cd0aff8    88  b.hi #+0xa8 (addr 0x4cd0b0a0)
0x4cd0affc    92  str x5, [x4]
0x4cd0b000    96  orr x6, x6, #0x1
0x4cd0b004   100  movz w2, #0x0
0x4cd0b008   104  stur x2, [x6, #31]
0x4cd0b00c   108  ldur x1, [x1, #39]
0x4cd0b010   112  ldur x1, [x1, #39]
0x4cd0b014   116  movz x16, #0x187
0x4cd0b018   120  ldr x1, [x1, x16]
0x4cd0b01c   124  stur x1, [x6, #-1]
0x4cd0b020   128  ldr x1, pc+208 (addr 0x000000004cd0b0f0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0b024   132  stur x1, [x6, #7]
0x4cd0b028   136  ldr x1, pc+208 (addr 0x000000004cd0b0f8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0b02c   140  stur x1, [x6, #15]
0x4cd0b030   144  stur x3, [x6, #23]
0x4cd0b034   148  add x1, x6, #0x20 (32)
0x4cd0b038   152  ldr x2, pc+200 (addr 0x000000004cd0b100)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd0b03c   156  stur x2, [x1, #-1]
0x4cd0b040   160  stur x3, [x1, #7]
0x4cd0b044   164  stur x1, [x6, #15]
0x4cd0b048   168  ldr x2, [fp]
0x4cd0b04c   172  ldur x3, [x2, #-8]
0x4cd0b050   176  movz x16, #0xe00000000
0x4cd0b054   180  cmp x3, x16
0x4cd0b058   184  csel x3, fp, x2, ne
0x4cd0b05c   188  movz x2, #0x0
0x4cd0b060   192  cmp w0, w2
0x4cd0b064   196  b.le #+0x20 (addr 0x4cd0b084)
0x4cd0b068   200  sub w4, w0, w2
0x4cd0b06c   204  add w4, w4, #0x1 (1)
0x4cd0b070   208  ldr x4, [x3, w4, uxtw #3]
0x4cd0b074   212  add x5, x1, #0xf (15)
0x4cd0b078   216  str x4, [x5, w2, sxtw #3]
0x4cd0b07c   220  add w2, w2, #0x1 (1)
0x4cd0b080   224  b #-0x20 (addr 0x4cd0b060)
0x4cd0b084   228  add w0, w0, #0x1 (1)
0x4cd0b088   232  lsl x1, x0, #32
0x4cd0b08c   236  mov x0, x6
0x4cd0b090   240  mov jssp, fp
0x4cd0b094   244  ldp fp, lr, [jssp], #16
0x4cd0b098   248  add jssp, jssp, x1, lsr #29
0x4cd0b09c   252  ret
0x4cd0b0a0   256  movz x6, #0x0
0x4cd0b0a4   260  mov x16, lr
0x4cd0b0a8   264  ldr x17, pc+96 (addr 0x000000004cd0b108)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0b0ac   268  blr x17
0x4cd0b0b0   272  lsl x0, x2, #32
0x4cd0b0b4   276  movz x10, #0x0
0x4cd0b0b8   280  sub csp, jssp, #0x10 (16)
0x4cd0b0bc   284  stp x10, x0, [jssp, #-16]!
0x4cd0b0c0   288  movz x0, #0x2
0x4cd0b0c4   292  movz x1, #0x5b88
0x4cd0b0c8   296  movk x1, #0xe2, lsl #16
0x4cd0b0cc   300  ldr x16, pc+68 (addr 0x000000004cd0b110)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0b0d0   304  blr x16
0x4cd0b0d4   308  str x0, [jssp, #48]
0x4cd0b0d8   312  ldr x16, pc+64 (addr 0x000000004cd0b118)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0b0dc   316  blr x16
0x4cd0b0e0   320  b #-0xdc (addr 0x4cd0b004)
0x4cd0b0e4   324  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cd0b0e8   328  d63f03e0       constant
0x4cd0b0ec   332  d503201f       constant
0x4cd0b0f0   336  21004201       constant
0x4cd0b0f4   340  00000000       constant
0x4cd0b0f8   344  21004201       constant
0x4cd0b0fc   348  00000000       constant
0x4cd0b100   352  2a804259       constant
0x4cd0b104   356  00000000       constant
0x4cd0b108   360  4cd06820       constant
0x4cd0b10c   364  00000000       constant
0x4cd0b110   368  4cd06260       constant
0x4cd0b114   372  00000000       constant
0x4cd0b118   376  4cd068e0       constant
0x4cd0b11c   380  00000000       constant
0x4cd0b120   384  movz x16, #0x0
0x4cd0b124   388  bl #+0xc (addr 0x4cd0b130)
0x4cd0b128   392  movz x16, #0x8
0x4cd0b12c   396  bl #+0x4 (addr 0x4cd0b130)
0x4cd0b130   400  ldr x17, pc+24 (addr 0x000000004cd0b148)    ;; lazy deoptimization bailout 0
0x4cd0b134   404  add x17, x17, x16
0x4cd0b138   408  br x17
0x4cd0b13c   412  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0b140   416  d63f03e0       constant
0x4cd0b144   420  d503201f       constant
0x4cd0b148   424  4cb06000       constant
0x4cd0b14c   428  00000000       constant


Safepoints (size = 21)
0x4cd0b0d4   308  000 | x1 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd0b020  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0b028  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0b038  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd0b0a8  code target (STUB)  (0x4cd06820)
0x4cd0b0cc  code target (STUB)  (0x4cd06260)
0x4cd0b0d8  code target (STUB)  (0x4cd068e0)
0x4cd0b0e4  constant pool (size 60)
0x4cd0b130  runtime entry
0x4cd0b13c  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 453)
0x4cd0b1e0     0  movz x16, #0xa00000000
0x4cd0b1e4     4  sub csp, jssp, #0x10 (16)
0x4cd0b1e8     8  stp fp, lr, [jssp, #-16]!
0x4cd0b1ec    12  mov fp, jssp
0x4cd0b1f0    16  sub csp, jssp, #0x8 (8)
0x4cd0b1f4    20  sub jssp, jssp, #0x8 (8)
0x4cd0b1f8    24  stur x16, [fp, #-8]
0x4cd0b1fc    28  movz w16, #0x257f
0x4cd0b200    32  cmp w0, w16, lsl #3
0x4cd0b204    36  b.hs #+0x15c (addr 0x4cd0b360)
0x4cd0b208    40  lsl x3, x0, #32
0x4cd0b20c    44  lsl w4, w0, #3
0x4cd0b210    48  add w4, w4, #0x10 (16)
0x4cd0b214    52  cmp w4, #0x96000 (614400)
0x4cd0b218    56  b.hs #+0x150 (addr 0x4cd0b368)
0x4cd0b21c    60  add w2, w4, #0x20 (32)
0x4cd0b220    64  sxtw x2, w2
0x4cd0b224    68  movz x4, #0xd2c0
0x4cd0b228    72  movk x4, #0x166d, lsl #16
0x4cd0b22c    76  ldp x6, x16, [x4]
0x4cd0b230    80  adds x5, x6, x2
0x4cd0b234    84  ccmp x5, x16, #nzCv, lo
0x4cd0b238    88  b.hi #+0xa8 (addr 0x4cd0b2e0)
0x4cd0b23c    92  str x5, [x4]
0x4cd0b240    96  orr x6, x6, #0x1
0x4cd0b244   100  movz w2, #0x0
0x4cd0b248   104  stur x2, [x6, #31]
0x4cd0b24c   108  ldur x1, [x1, #39]
0x4cd0b250   112  ldur x1, [x1, #39]
0x4cd0b254   116  movz x16, #0x18f
0x4cd0b258   120  ldr x1, [x1, x16]
0x4cd0b25c   124  stur x1, [x6, #-1]
0x4cd0b260   128  ldr x1, pc+208 (addr 0x000000004cd0b330)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0b264   132  stur x1, [x6, #7]
0x4cd0b268   136  ldr x1, pc+208 (addr 0x000000004cd0b338)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0b26c   140  stur x1, [x6, #15]
0x4cd0b270   144  stur x3, [x6, #23]
0x4cd0b274   148  add x1, x6, #0x20 (32)
0x4cd0b278   152  ldr x2, pc+200 (addr 0x000000004cd0b340)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd0b27c   156  stur x2, [x1, #-1]
0x4cd0b280   160  stur x3, [x1, #7]
0x4cd0b284   164  stur x1, [x6, #15]
0x4cd0b288   168  ldr x2, [fp]
0x4cd0b28c   172  ldur x3, [x2, #-8]
0x4cd0b290   176  movz x16, #0xe00000000
0x4cd0b294   180  cmp x3, x16
0x4cd0b298   184  csel x3, fp, x2, ne
0x4cd0b29c   188  movz x2, #0x0
0x4cd0b2a0   192  cmp w0, w2
0x4cd0b2a4   196  b.le #+0x20 (addr 0x4cd0b2c4)
0x4cd0b2a8   200  sub w4, w0, w2
0x4cd0b2ac   204  add w4, w4, #0x1 (1)
0x4cd0b2b0   208  ldr x4, [x3, w4, uxtw #3]
0x4cd0b2b4   212  add x5, x1, #0xf (15)
0x4cd0b2b8   216  str x4, [x5, w2, sxtw #3]
0x4cd0b2bc   220  add w2, w2, #0x1 (1)
0x4cd0b2c0   224  b #-0x20 (addr 0x4cd0b2a0)
0x4cd0b2c4   228  add w0, w0, #0x1 (1)
0x4cd0b2c8   232  lsl x1, x0, #32
0x4cd0b2cc   236  mov x0, x6
0x4cd0b2d0   240  mov jssp, fp
0x4cd0b2d4   244  ldp fp, lr, [jssp], #16
0x4cd0b2d8   248  add jssp, jssp, x1, lsr #29
0x4cd0b2dc   252  ret
0x4cd0b2e0   256  movz x6, #0x0
0x4cd0b2e4   260  mov x16, lr
0x4cd0b2e8   264  ldr x17, pc+96 (addr 0x000000004cd0b348)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0b2ec   268  blr x17
0x4cd0b2f0   272  lsl x0, x2, #32
0x4cd0b2f4   276  movz x10, #0x0
0x4cd0b2f8   280  sub csp, jssp, #0x10 (16)
0x4cd0b2fc   284  stp x10, x0, [jssp, #-16]!
0x4cd0b300   288  movz x0, #0x2
0x4cd0b304   292  movz x1, #0x5b88
0x4cd0b308   296  movk x1, #0xe2, lsl #16
0x4cd0b30c   300  ldr x16, pc+68 (addr 0x000000004cd0b350)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0b310   304  blr x16
0x4cd0b314   308  str x0, [jssp, #48]
0x4cd0b318   312  ldr x16, pc+64 (addr 0x000000004cd0b358)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0b31c   316  blr x16
0x4cd0b320   320  b #-0xdc (addr 0x4cd0b244)
0x4cd0b324   324  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cd0b328   328  d63f03e0       constant
0x4cd0b32c   332  d503201f       constant
0x4cd0b330   336  21004201       constant
0x4cd0b334   340  00000000       constant
0x4cd0b338   344  21004201       constant
0x4cd0b33c   348  00000000       constant
0x4cd0b340   352  2a804259       constant
0x4cd0b344   356  00000000       constant
0x4cd0b348   360  4cd06820       constant
0x4cd0b34c   364  00000000       constant
0x4cd0b350   368  4cd06260       constant
0x4cd0b354   372  00000000       constant
0x4cd0b358   376  4cd068e0       constant
0x4cd0b35c   380  00000000       constant
0x4cd0b360   384  movz x16, #0x0
0x4cd0b364   388  bl #+0xc (addr 0x4cd0b370)
0x4cd0b368   392  movz x16, #0x8
0x4cd0b36c   396  bl #+0x4 (addr 0x4cd0b370)
0x4cd0b370   400  ldr x17, pc+24 (addr 0x000000004cd0b388)    ;; lazy deoptimization bailout 0
0x4cd0b374   404  add x17, x17, x16
0x4cd0b378   408  br x17
0x4cd0b37c   412  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0b380   416  d63f03e0       constant
0x4cd0b384   420  d503201f       constant
0x4cd0b388   424  4cb06000       constant
0x4cd0b38c   428  00000000       constant


Safepoints (size = 21)
0x4cd0b314   308  000 | x1 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd0b260  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0b268  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0b278  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd0b2e8  code target (STUB)  (0x4cd06820)
0x4cd0b30c  code target (STUB)  (0x4cd06260)
0x4cd0b318  code target (STUB)  (0x4cd068e0)
0x4cd0b324  constant pool (size 60)
0x4cd0b370  runtime entry
0x4cd0b37c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ArrayNArgumentsConstructorStub
name = ArrayNArgumentsConstructorStub_FAST_HOLEY_ELEMENTS
compiler = crankshaft
Instructions (size = 453)
0x4cd0b1e0     0  movz x16, #0xa00000000
0x4cd0b1e4     4  sub csp, jssp, #0x10 (16)
0x4cd0b1e8     8  stp fp, lr, [jssp, #-16]!
0x4cd0b1ec    12  mov fp, jssp
0x4cd0b1f0    16  sub csp, jssp, #0x8 (8)
0x4cd0b1f4    20  sub jssp, jssp, #0x8 (8)
0x4cd0b1f8    24  stur x16, [fp, #-8]
0x4cd0b1fc    28  movz w16, #0x257f
0x4cd0b200    32  cmp w0, w16, lsl #3
0x4cd0b204    36  b.hs #+0x15c (addr 0x4cd0b360)
0x4cd0b208    40  lsl x3, x0, #32
0x4cd0b20c    44  lsl w4, w0, #3
0x4cd0b210    48  add w4, w4, #0x10 (16)
0x4cd0b214    52  cmp w4, #0x96000 (614400)
0x4cd0b218    56  b.hs #+0x150 (addr 0x4cd0b368)
0x4cd0b21c    60  add w2, w4, #0x20 (32)
0x4cd0b220    64  sxtw x2, w2
0x4cd0b224    68  movz x4, #0xd2c0
0x4cd0b228    72  movk x4, #0x166d, lsl #16
0x4cd0b22c    76  ldp x6, x16, [x4]
0x4cd0b230    80  adds x5, x6, x2
0x4cd0b234    84  ccmp x5, x16, #nzCv, lo
0x4cd0b238    88  b.hi #+0xa8 (addr 0x4cd0b2e0)
0x4cd0b23c    92  str x5, [x4]
0x4cd0b240    96  orr x6, x6, #0x1
0x4cd0b244   100  movz w2, #0x0
0x4cd0b248   104  stur x2, [x6, #31]
0x4cd0b24c   108  ldur x1, [x1, #39]
0x4cd0b250   112  ldur x1, [x1, #39]
0x4cd0b254   116  movz x16, #0x18f
0x4cd0b258   120  ldr x1, [x1, x16]
0x4cd0b25c   124  stur x1, [x6, #-1]
0x4cd0b260   128  ldr x1, pc+208 (addr 0x000000004cd0b330)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0b264   132  stur x1, [x6, #7]
0x4cd0b268   136  ldr x1, pc+208 (addr 0x000000004cd0b338)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0b26c   140  stur x1, [x6, #15]
0x4cd0b270   144  stur x3, [x6, #23]
0x4cd0b274   148  add x1, x6, #0x20 (32)
0x4cd0b278   152  ldr x2, pc+200 (addr 0x000000004cd0b340)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd0b27c   156  stur x2, [x1, #-1]
0x4cd0b280   160  stur x3, [x1, #7]
0x4cd0b284   164  stur x1, [x6, #15]
0x4cd0b288   168  ldr x2, [fp]
0x4cd0b28c   172  ldur x3, [x2, #-8]
0x4cd0b290   176  movz x16, #0xe00000000
0x4cd0b294   180  cmp x3, x16
0x4cd0b298   184  csel x3, fp, x2, ne
0x4cd0b29c   188  movz x2, #0x0
0x4cd0b2a0   192  cmp w0, w2
0x4cd0b2a4   196  b.le #+0x20 (addr 0x4cd0b2c4)
0x4cd0b2a8   200  sub w4, w0, w2
0x4cd0b2ac   204  add w4, w4, #0x1 (1)
0x4cd0b2b0   208  ldr x4, [x3, w4, uxtw #3]
0x4cd0b2b4   212  add x5, x1, #0xf (15)
0x4cd0b2b8   216  str x4, [x5, w2, sxtw #3]
0x4cd0b2bc   220  add w2, w2, #0x1 (1)
0x4cd0b2c0   224  b #-0x20 (addr 0x4cd0b2a0)
0x4cd0b2c4   228  add w0, w0, #0x1 (1)
0x4cd0b2c8   232  lsl x1, x0, #32
0x4cd0b2cc   236  mov x0, x6
0x4cd0b2d0   240  mov jssp, fp
0x4cd0b2d4   244  ldp fp, lr, [jssp], #16
0x4cd0b2d8   248  add jssp, jssp, x1, lsr #29
0x4cd0b2dc   252  ret
0x4cd0b2e0   256  movz x6, #0x0
0x4cd0b2e4   260  mov x16, lr
0x4cd0b2e8   264  ldr x17, pc+96 (addr 0x000000004cd0b348)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0b2ec   268  blr x17
0x4cd0b2f0   272  lsl x0, x2, #32
0x4cd0b2f4   276  movz x10, #0x0
0x4cd0b2f8   280  sub csp, jssp, #0x10 (16)
0x4cd0b2fc   284  stp x10, x0, [jssp, #-16]!
0x4cd0b300   288  movz x0, #0x2
0x4cd0b304   292  movz x1, #0x5b88
0x4cd0b308   296  movk x1, #0xe2, lsl #16
0x4cd0b30c   300  ldr x16, pc+68 (addr 0x000000004cd0b350)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0b310   304  blr x16
0x4cd0b314   308  str x0, [jssp, #48]
0x4cd0b318   312  ldr x16, pc+64 (addr 0x000000004cd0b358)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0b31c   316  blr x16
0x4cd0b320   320  b #-0xdc (addr 0x4cd0b244)
0x4cd0b324   324  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cd0b328   328  d63f03e0       constant
0x4cd0b32c   332  d503201f       constant
0x4cd0b330   336  21004201       constant
0x4cd0b334   340  00000000       constant
0x4cd0b338   344  21004201       constant
0x4cd0b33c   348  00000000       constant
0x4cd0b340   352  2a804259       constant
0x4cd0b344   356  00000000       constant
0x4cd0b348   360  4cd06820       constant
0x4cd0b34c   364  00000000       constant
0x4cd0b350   368  4cd06260       constant
0x4cd0b354   372  00000000       constant
0x4cd0b358   376  4cd068e0       constant
0x4cd0b35c   380  00000000       constant
0x4cd0b360   384  movz x16, #0x0
0x4cd0b364   388  bl #+0xc (addr 0x4cd0b370)
0x4cd0b368   392  movz x16, #0x8
0x4cd0b36c   396  bl #+0x4 (addr 0x4cd0b370)
0x4cd0b370   400  ldr x17, pc+24 (addr 0x000000004cd0b388)    ;; lazy deoptimization bailout 0
0x4cd0b374   404  add x17, x17, x16
0x4cd0b378   408  br x17
0x4cd0b37c   412  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0b380   416  d63f03e0       constant
0x4cd0b384   420  d503201f       constant
0x4cd0b388   424  4cb06000       constant
0x4cd0b38c   428  00000000       constant


Safepoints (size = 21)
0x4cd0b314   308  000 | x1 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd0b260  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0b268  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0b278  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd0b2e8  code target (STUB)  (0x4cd06820)
0x4cd0b30c  code target (STUB)  (0x4cd06260)
0x4cd0b318  code target (STUB)  (0x4cd068e0)
0x4cd0b324  constant pool (size 60)
0x4cd0b370  runtime entry
0x4cd0b37c  constant pool (size 20)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1904)
0x4cd0b420     0  adr xzr, #+0x40 (addr 0x4cd0b460)
0x4cd0b424     4  adr xzr, #+0x358 (addr 0x4cd0b77c)
0x4cd0b428     8  ldr x16, pc+1720 (addr 0x000000004cd0bae0)    ;; external reference (store_buffer_top)
0x4cd0b42c    12  ldr x0, [x16]
0x4cd0b430    16  str x1, [x0], #8
0x4cd0b434    20  str x0, [x16]
0x4cd0b438    24  tst x0, #0x1ffff
0x4cd0b43c    28  b.eq #+0x8 (addr 0x4cd0b444)
0x4cd0b440    32  ret
0x4cd0b444    36  sub csp, jssp, #0x8 (8)
0x4cd0b448    40  str lr, [jssp, #-8]!
0x4cd0b44c    44  ldr x17, pc+1692 (addr 0x000000004cd0bae8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0b450    48  blr x17
0x4cd0b454    52  ldr lr, [jssp], #8
0x4cd0b458    56  ret
0x4cd0b45c    60  ret
0x4cd0b460    64  sub csp, jssp, #0x10 (16)
0x4cd0b464    68  stp x3, x2, [jssp, #-16]!
0x4cd0b468    72  ldr x0, [x1]
0x4cd0b46c    76  and x16, x0, #0xfffffffffff00000
0x4cd0b470    80  ldr x16, [x16, #8]
0x4cd0b474    84  tst x16, #0x18
0x4cd0b478    88  b.eq #+0x1d4 (addr 0x4cd0b64c)
0x4cd0b47c    92  and x16, x4, #0xfffffffffff00000
0x4cd0b480    96  ldr x16, [x16, #8]
0x4cd0b484   100  tst x16, #0x18
0x4cd0b488   104  b.ne #+0x1c4 (addr 0x4cd0b64c)
0x4cd0b48c   108  and x0, x4, #0xfffffffffff00000
0x4cd0b490   112  ldr x2, [x0, #104]
0x4cd0b494   116  subs x2, x2, #0x1 (1)
0x4cd0b498   120  str x2, [x0, #104]
0x4cd0b49c   124  b.mi #+0xc4 (addr 0x4cd0b560)
0x4cd0b4a0   128  ubfx x16, x4, #8, #12
0x4cd0b4a4   132  and x0, x4, #0xfffffffffff00000
0x4cd0b4a8   136  add x0, x0, x16, lsl #2
0x4cd0b4ac   140  ubfx x2, x4, #3, #5
0x4cd0b4b0   144  ldr x0, [x0, #360]
0x4cd0b4b4   148  lsr x0, x0, x2
0x4cd0b4b8   152  tbz w0, #0, #+0x8 (addr 0x4cd0b4c0)
0x4cd0b4bc   156  tbnz w0, #1, #+0x3c (addr 0x4cd0b4f8)
0x4cd0b4c0   160  ldp x3, x2, [jssp], #16
0x4cd0b4c4   164  ldr x16, pc+1580 (addr 0x000000004cd0baf0)    ;; external reference (store_buffer_top)
0x4cd0b4c8   168  ldr x0, [x16]
0x4cd0b4cc   172  str x1, [x0], #8
0x4cd0b4d0   176  str x0, [x16]
0x4cd0b4d4   180  tst x0, #0x1ffff
0x4cd0b4d8   184  b.eq #+0x8 (addr 0x4cd0b4e0)
0x4cd0b4dc   188  ret
0x4cd0b4e0   192  sub csp, jssp, #0x8 (8)
0x4cd0b4e4   196  str lr, [jssp, #-8]!
0x4cd0b4e8   200  ldr x17, pc+1552 (addr 0x000000004cd0baf8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0b4ec   204  blr x17
0x4cd0b4f0   208  ldr lr, [jssp], #8
0x4cd0b4f4   212  ret
0x4cd0b4f8   216  ldr x0, [x1]
0x4cd0b4fc   220  sub csp, jssp, #0x10 (16)
0x4cd0b500   224  stp x4, x1, [jssp, #-16]!
0x4cd0b504   228  ubfx x16, x0, #8, #12
0x4cd0b508   232  and x2, x0, #0xfffffffffff00000
0x4cd0b50c   236  add x2, x2, x16, lsl #2
0x4cd0b510   240  ubfx x4, x0, #3, #5
0x4cd0b514   244  ldr x1, [x2, #360]
0x4cd0b518   248  lsr x1, x1, x4
0x4cd0b51c   252  tbz w1, #0, #+0x40 (addr 0x4cd0b55c)
0x4cd0b520   256  ldp x4, x1, [jssp], #16
0x4cd0b524   260  ldp x3, x2, [jssp], #16
0x4cd0b528   264  ldr x16, pc+1496 (addr 0x000000004cd0bb00)    ;; external reference (store_buffer_top)
0x4cd0b52c   268  ldr x0, [x16]
0x4cd0b530   272  str x1, [x0], #8
0x4cd0b534   276  str x0, [x16]
0x4cd0b538   280  tst x0, #0x1ffff
0x4cd0b53c   284  b.eq #+0x8 (addr 0x4cd0b544)
0x4cd0b540   288  ret
0x4cd0b544   292  sub csp, jssp, #0x8 (8)
0x4cd0b548   296  str lr, [jssp, #-8]!
0x4cd0b54c   300  ldr x17, pc+1468 (addr 0x000000004cd0bb08)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0b550   304  blr x17
0x4cd0b554   308  ldr lr, [jssp], #8
0x4cd0b558   312  ret
0x4cd0b55c   316  ldp x4, x1, [jssp], #16
0x4cd0b560   320  sub csp, jssp, #0x78 (120)
0x4cd0b564   324  stp x14, x15, [jssp, #-32]!
0x4cd0b568   328  stp x18, lr, [jssp, #16]
0x4cd0b56c   332  stp x10, x11, [jssp, #-32]!
0x4cd0b570   336  stp x12, x13, [jssp, #16]
0x4cd0b574   340  stp x6, x7, [jssp, #-32]!
0x4cd0b578   344  stp x8, x9, [jssp, #16]
0x4cd0b57c   348  stp x1, x4, [jssp, #-24]!
0x4cd0b580   352  str x5, [jssp, #16]
0x4cd0b584   356  sub csp, jssp, #0xb0 (176)
0x4cd0b588   360  stp d26, d27, [jssp, #-32]!
0x4cd0b58c   364  stp d28, d29, [jssp, #16]
0x4cd0b590   368  stp d22, d23, [jssp, #-32]!
0x4cd0b594   372  stp d24, d25, [jssp, #16]
0x4cd0b598   376  stp d18, d19, [jssp, #-32]!
0x4cd0b59c   380  stp d20, d21, [jssp, #16]
0x4cd0b5a0   384  stp d6, d7, [jssp, #-32]!
0x4cd0b5a4   388  stp d16, d17, [jssp, #16]
0x4cd0b5a8   392  stp d2, d3, [jssp, #-32]!
0x4cd0b5ac   396  stp d4, d5, [jssp, #16]
0x4cd0b5b0   400  stp d0, d1, [jssp, #-16]!
0x4cd0b5b4   404  mov x0, x4
0x4cd0b5b8   408  ldr x2, pc+1368 (addr 0x000000004cd0bb10)    ;; external reference (isolate)
0x4cd0b5bc   412  ldr x16, pc+1372 (addr 0x000000004cd0bb18)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0b5c0   416  and csp, jssp, #0xfffffffffffffff0
0x4cd0b5c4   420  blr x16
0x4cd0b5c8   424  ldp d2, d3, [jssp, #16]
0x4cd0b5cc   428  ldp d0, d1, [jssp], #32
0x4cd0b5d0   432  ldp d6, d7, [jssp, #16]
0x4cd0b5d4   436  ldp d4, d5, [jssp], #32
0x4cd0b5d8   440  ldp d18, d19, [jssp, #16]
0x4cd0b5dc   444  ldp d16, d17, [jssp], #32
0x4cd0b5e0   448  ldp d22, d23, [jssp, #16]
0x4cd0b5e4   452  ldp d20, d21, [jssp], #32
0x4cd0b5e8   456  ldp d26, d27, [jssp, #16]
0x4cd0b5ec   460  ldp d24, d25, [jssp], #32
0x4cd0b5f0   464  ldp d28, d29, [jssp], #16
0x4cd0b5f4   468  ldp x5, x6, [jssp, #16]
0x4cd0b5f8   472  ldp x1, x4, [jssp], #32
0x4cd0b5fc   476  ldp x9, x10, [jssp, #16]
0x4cd0b600   480  ldp x7, x8, [jssp], #32
0x4cd0b604   484  ldp x13, x14, [jssp, #16]
0x4cd0b608   488  ldp x11, x12, [jssp], #32
0x4cd0b60c   492  ldr lr, [jssp, #16]
0x4cd0b610   496  ldp x15, x18, [jssp], #24
0x4cd0b614   500  ldp x3, x2, [jssp], #16
0x4cd0b618   504  ldr x16, pc+1288 (addr 0x000000004cd0bb20)    ;; external reference (store_buffer_top)
0x4cd0b61c   508  ldr x0, [x16]
0x4cd0b620   512  str x1, [x0], #8
0x4cd0b624   516  str x0, [x16]
0x4cd0b628   520  tst x0, #0x1ffff
0x4cd0b62c   524  b.eq #+0x8 (addr 0x4cd0b634)
0x4cd0b630   528  ret
0x4cd0b634   532  sub csp, jssp, #0x8 (8)
0x4cd0b638   536  str lr, [jssp, #-8]!
0x4cd0b63c   540  ldr x17, pc+1260 (addr 0x000000004cd0bb28)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0b640   544  blr x17
0x4cd0b644   548  ldr lr, [jssp], #8
0x4cd0b648   552  ret
0x4cd0b64c   556  and x0, x4, #0xfffffffffff00000
0x4cd0b650   560  ldr x2, [x0, #104]
0x4cd0b654   564  subs x2, x2, #0x1 (1)
0x4cd0b658   568  str x2, [x0, #104]
0x4cd0b65c   572  b.mi #+0x64 (addr 0x4cd0b6c0)
0x4cd0b660   576  ubfx x16, x4, #8, #12
0x4cd0b664   580  and x0, x4, #0xfffffffffff00000
0x4cd0b668   584  add x0, x0, x16, lsl #2
0x4cd0b66c   588  ubfx x2, x4, #3, #5
0x4cd0b670   592  ldr x0, [x0, #360]
0x4cd0b674   596  lsr x0, x0, x2
0x4cd0b678   600  tbz w0, #0, #+0x8 (addr 0x4cd0b680)
0x4cd0b67c   604  tbnz w0, #1, #+0xc (addr 0x4cd0b688)
0x4cd0b680   608  ldp x3, x2, [jssp], #16
0x4cd0b684   612  ret
0x4cd0b688   616  ldr x0, [x1]
0x4cd0b68c   620  sub csp, jssp, #0x10 (16)
0x4cd0b690   624  stp x4, x1, [jssp, #-16]!
0x4cd0b694   628  ubfx x16, x0, #8, #12
0x4cd0b698   632  and x2, x0, #0xfffffffffff00000
0x4cd0b69c   636  add x2, x2, x16, lsl #2
0x4cd0b6a0   640  ubfx x4, x0, #3, #5
0x4cd0b6a4   644  ldr x1, [x2, #360]
0x4cd0b6a8   648  lsr x1, x1, x4
0x4cd0b6ac   652  tbz w1, #0, #+0x10 (addr 0x4cd0b6bc)
0x4cd0b6b0   656  ldp x4, x1, [jssp], #16
0x4cd0b6b4   660  ldp x3, x2, [jssp], #16
0x4cd0b6b8   664  ret
0x4cd0b6bc   668  ldp x4, x1, [jssp], #16
0x4cd0b6c0   672  sub csp, jssp, #0x78 (120)
0x4cd0b6c4   676  stp x14, x15, [jssp, #-32]!
0x4cd0b6c8   680  stp x18, lr, [jssp, #16]
0x4cd0b6cc   684  stp x10, x11, [jssp, #-32]!
0x4cd0b6d0   688  stp x12, x13, [jssp, #16]
0x4cd0b6d4   692  stp x6, x7, [jssp, #-32]!
0x4cd0b6d8   696  stp x8, x9, [jssp, #16]
0x4cd0b6dc   700  stp x1, x4, [jssp, #-24]!
0x4cd0b6e0   704  str x5, [jssp, #16]
0x4cd0b6e4   708  sub csp, jssp, #0xb0 (176)
0x4cd0b6e8   712  stp d26, d27, [jssp, #-32]!
0x4cd0b6ec   716  stp d28, d29, [jssp, #16]
0x4cd0b6f0   720  stp d22, d23, [jssp, #-32]!
0x4cd0b6f4   724  stp d24, d25, [jssp, #16]
0x4cd0b6f8   728  stp d18, d19, [jssp, #-32]!
0x4cd0b6fc   732  stp d20, d21, [jssp, #16]
0x4cd0b700   736  stp d6, d7, [jssp, #-32]!
0x4cd0b704   740  stp d16, d17, [jssp, #16]
0x4cd0b708   744  stp d2, d3, [jssp, #-32]!
0x4cd0b70c   748  stp d4, d5, [jssp, #16]
0x4cd0b710   752  stp d0, d1, [jssp, #-16]!
0x4cd0b714   756  mov x0, x4
0x4cd0b718   760  ldr x2, pc+1048 (addr 0x000000004cd0bb30)    ;; external reference (isolate)
0x4cd0b71c   764  ldr x16, pc+1052 (addr 0x000000004cd0bb38)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0b720   768  and csp, jssp, #0xfffffffffffffff0
0x4cd0b724   772  blr x16
0x4cd0b728   776  ldp d2, d3, [jssp, #16]
0x4cd0b72c   780  ldp d0, d1, [jssp], #32
0x4cd0b730   784  ldp d6, d7, [jssp, #16]
0x4cd0b734   788  ldp d4, d5, [jssp], #32
0x4cd0b738   792  ldp d18, d19, [jssp, #16]
0x4cd0b73c   796  ldp d16, d17, [jssp], #32
0x4cd0b740   800  ldp d22, d23, [jssp, #16]
0x4cd0b744   804  ldp d20, d21, [jssp], #32
0x4cd0b748   808  ldp d26, d27, [jssp, #16]
0x4cd0b74c   812  ldp d24, d25, [jssp], #32
0x4cd0b750   816  ldp d28, d29, [jssp], #16
0x4cd0b754   820  ldp x5, x6, [jssp, #16]
0x4cd0b758   824  ldp x1, x4, [jssp], #32
0x4cd0b75c   828  ldp x9, x10, [jssp, #16]
0x4cd0b760   832  ldp x7, x8, [jssp], #32
0x4cd0b764   836  ldp x13, x14, [jssp, #16]
0x4cd0b768   840  ldp x11, x12, [jssp], #32
0x4cd0b76c   844  ldr lr, [jssp, #16]
0x4cd0b770   848  ldp x15, x18, [jssp], #24
0x4cd0b774   852  ldp x3, x2, [jssp], #16
0x4cd0b778   856  ret
0x4cd0b77c   860  sub csp, jssp, #0x10 (16)
0x4cd0b780   864  stp x3, x2, [jssp, #-16]!
0x4cd0b784   868  ldr x0, [x1]
0x4cd0b788   872  and x16, x0, #0xfffffffffff00000
0x4cd0b78c   876  ldr x16, [x16, #8]
0x4cd0b790   880  tst x16, #0x18
0x4cd0b794   884  b.eq #+0x1f4 (addr 0x4cd0b988)
0x4cd0b798   888  and x16, x4, #0xfffffffffff00000
0x4cd0b79c   892  ldr x16, [x16, #8]
0x4cd0b7a0   896  tst x16, #0x18
0x4cd0b7a4   900  b.ne #+0x1e4 (addr 0x4cd0b988)
0x4cd0b7a8   904  and x0, x4, #0xfffffffffff00000
0x4cd0b7ac   908  ldr x2, [x0, #104]
0x4cd0b7b0   912  subs x2, x2, #0x1 (1)
0x4cd0b7b4   916  str x2, [x0, #104]
0x4cd0b7b8   920  b.mi #+0xe4 (addr 0x4cd0b89c)
0x4cd0b7bc   924  ubfx x16, x4, #8, #12
0x4cd0b7c0   928  and x0, x4, #0xfffffffffff00000
0x4cd0b7c4   932  add x0, x0, x16, lsl #2
0x4cd0b7c8   936  ubfx x2, x4, #3, #5
0x4cd0b7cc   940  ldr x0, [x0, #360]
0x4cd0b7d0   944  lsr x0, x0, x2
0x4cd0b7d4   948  tbz w0, #0, #+0x8 (addr 0x4cd0b7dc)
0x4cd0b7d8   952  tbnz w0, #1, #+0x3c (addr 0x4cd0b814)
0x4cd0b7dc   956  ldp x3, x2, [jssp], #16
0x4cd0b7e0   960  ldr x16, pc+864 (addr 0x000000004cd0bb40)    ;; external reference (store_buffer_top)
0x4cd0b7e4   964  ldr x0, [x16]
0x4cd0b7e8   968  str x1, [x0], #8
0x4cd0b7ec   972  str x0, [x16]
0x4cd0b7f0   976  tst x0, #0x1ffff
0x4cd0b7f4   980  b.eq #+0x8 (addr 0x4cd0b7fc)
0x4cd0b7f8   984  ret
0x4cd0b7fc   988  sub csp, jssp, #0x8 (8)
0x4cd0b800   992  str lr, [jssp, #-8]!
0x4cd0b804   996  ldr x17, pc+836 (addr 0x000000004cd0bb48)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0b808  1000  blr x17
0x4cd0b80c  1004  ldr lr, [jssp], #8
0x4cd0b810  1008  ret
0x4cd0b814  1012  ldr x0, [x1]
0x4cd0b818  1016  and x2, x0, #0xfffffffffff00000
0x4cd0b81c  1020  ldr x2, [x2, #8]
0x4cd0b820  1024  tbz w2, #6, #+0x18 (addr 0x4cd0b838)
0x4cd0b824  1028  and x2, x4, #0xfffffffffff00000
0x4cd0b828  1032  ldr x2, [x2, #8]
0x4cd0b82c  1036  movz x16, #0x58
0x4cd0b830  1040  tst x2, x16
0x4cd0b834  1044  b.eq #+0x68 (addr 0x4cd0b89c)
0x4cd0b838  1048  sub csp, jssp, #0x10 (16)
0x4cd0b83c  1052  stp x4, x1, [jssp, #-16]!
0x4cd0b840  1056  ubfx x16, x0, #8, #12
0x4cd0b844  1060  and x2, x0, #0xfffffffffff00000
0x4cd0b848  1064  add x2, x2, x16, lsl #2
0x4cd0b84c  1068  ubfx x4, x0, #3, #5
0x4cd0b850  1072  ldr x1, [x2, #360]
0x4cd0b854  1076  lsr x1, x1, x4
0x4cd0b858  1080  tbz w1, #0, #+0x40 (addr 0x4cd0b898)
0x4cd0b85c  1084  ldp x4, x1, [jssp], #16
0x4cd0b860  1088  ldp x3, x2, [jssp], #16
0x4cd0b864  1092  ldr x16, pc+748 (addr 0x000000004cd0bb50)    ;; external reference (store_buffer_top)
0x4cd0b868  1096  ldr x0, [x16]
0x4cd0b86c  1100  str x1, [x0], #8
0x4cd0b870  1104  str x0, [x16]
0x4cd0b874  1108  tst x0, #0x1ffff
0x4cd0b878  1112  b.eq #+0x8 (addr 0x4cd0b880)
0x4cd0b87c  1116  ret
0x4cd0b880  1120  sub csp, jssp, #0x8 (8)
0x4cd0b884  1124  str lr, [jssp, #-8]!
0x4cd0b888  1128  ldr x17, pc+720 (addr 0x000000004cd0bb58)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0b88c  1132  blr x17
0x4cd0b890  1136  ldr lr, [jssp], #8
0x4cd0b894  1140  ret
0x4cd0b898  1144  ldp x4, x1, [jssp], #16
0x4cd0b89c  1148  sub csp, jssp, #0x78 (120)
0x4cd0b8a0  1152  stp x14, x15, [jssp, #-32]!
0x4cd0b8a4  1156  stp x18, lr, [jssp, #16]
0x4cd0b8a8  1160  stp x10, x11, [jssp, #-32]!
0x4cd0b8ac  1164  stp x12, x13, [jssp, #16]
0x4cd0b8b0  1168  stp x6, x7, [jssp, #-32]!
0x4cd0b8b4  1172  stp x8, x9, [jssp, #16]
0x4cd0b8b8  1176  stp x1, x4, [jssp, #-24]!
0x4cd0b8bc  1180  str x5, [jssp, #16]
0x4cd0b8c0  1184  sub csp, jssp, #0xb0 (176)
0x4cd0b8c4  1188  stp d26, d27, [jssp, #-32]!
0x4cd0b8c8  1192  stp d28, d29, [jssp, #16]
0x4cd0b8cc  1196  stp d22, d23, [jssp, #-32]!
0x4cd0b8d0  1200  stp d24, d25, [jssp, #16]
0x4cd0b8d4  1204  stp d18, d19, [jssp, #-32]!
0x4cd0b8d8  1208  stp d20, d21, [jssp, #16]
0x4cd0b8dc  1212  stp d6, d7, [jssp, #-32]!
0x4cd0b8e0  1216  stp d16, d17, [jssp, #16]
0x4cd0b8e4  1220  stp d2, d3, [jssp, #-32]!
0x4cd0b8e8  1224  stp d4, d5, [jssp, #16]
0x4cd0b8ec  1228  stp d0, d1, [jssp, #-16]!
0x4cd0b8f0  1232  mov x0, x4
0x4cd0b8f4  1236  ldr x2, pc+620 (addr 0x000000004cd0bb60)    ;; external reference (isolate)
0x4cd0b8f8  1240  ldr x16, pc+624 (addr 0x000000004cd0bb68)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0b8fc  1244  and csp, jssp, #0xfffffffffffffff0
0x4cd0b900  1248  blr x16
0x4cd0b904  1252  ldp d2, d3, [jssp, #16]
0x4cd0b908  1256  ldp d0, d1, [jssp], #32
0x4cd0b90c  1260  ldp d6, d7, [jssp, #16]
0x4cd0b910  1264  ldp d4, d5, [jssp], #32
0x4cd0b914  1268  ldp d18, d19, [jssp, #16]
0x4cd0b918  1272  ldp d16, d17, [jssp], #32
0x4cd0b91c  1276  ldp d22, d23, [jssp, #16]
0x4cd0b920  1280  ldp d20, d21, [jssp], #32
0x4cd0b924  1284  ldp d26, d27, [jssp, #16]
0x4cd0b928  1288  ldp d24, d25, [jssp], #32
0x4cd0b92c  1292  ldp d28, d29, [jssp], #16
0x4cd0b930  1296  ldp x5, x6, [jssp, #16]
0x4cd0b934  1300  ldp x1, x4, [jssp], #32
0x4cd0b938  1304  ldp x9, x10, [jssp, #16]
0x4cd0b93c  1308  ldp x7, x8, [jssp], #32
0x4cd0b940  1312  ldp x13, x14, [jssp, #16]
0x4cd0b944  1316  ldp x11, x12, [jssp], #32
0x4cd0b948  1320  ldr lr, [jssp, #16]
0x4cd0b94c  1324  ldp x15, x18, [jssp], #24
0x4cd0b950  1328  ldp x3, x2, [jssp], #16
0x4cd0b954  1332  ldr x16, pc+540 (addr 0x000000004cd0bb70)    ;; external reference (store_buffer_top)
0x4cd0b958  1336  ldr x0, [x16]
0x4cd0b95c  1340  str x1, [x0], #8
0x4cd0b960  1344  str x0, [x16]
0x4cd0b964  1348  tst x0, #0x1ffff
0x4cd0b968  1352  b.eq #+0x8 (addr 0x4cd0b970)
0x4cd0b96c  1356  ret
0x4cd0b970  1360  sub csp, jssp, #0x8 (8)
0x4cd0b974  1364  str lr, [jssp, #-8]!
0x4cd0b978  1368  ldr x17, pc+512 (addr 0x000000004cd0bb78)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0b97c  1372  blr x17
0x4cd0b980  1376  ldr lr, [jssp], #8
0x4cd0b984  1380  ret
0x4cd0b988  1384  and x0, x4, #0xfffffffffff00000
0x4cd0b98c  1388  ldr x2, [x0, #104]
0x4cd0b990  1392  subs x2, x2, #0x1 (1)
0x4cd0b994  1396  str x2, [x0, #104]
0x4cd0b998  1400  b.mi #+0x84 (addr 0x4cd0ba1c)
0x4cd0b99c  1404  ubfx x16, x4, #8, #12
0x4cd0b9a0  1408  and x0, x4, #0xfffffffffff00000
0x4cd0b9a4  1412  add x0, x0, x16, lsl #2
0x4cd0b9a8  1416  ubfx x2, x4, #3, #5
0x4cd0b9ac  1420  ldr x0, [x0, #360]
0x4cd0b9b0  1424  lsr x0, x0, x2
0x4cd0b9b4  1428  tbz w0, #0, #+0x8 (addr 0x4cd0b9bc)
0x4cd0b9b8  1432  tbnz w0, #1, #+0xc (addr 0x4cd0b9c4)
0x4cd0b9bc  1436  ldp x3, x2, [jssp], #16
0x4cd0b9c0  1440  ret
0x4cd0b9c4  1444  ldr x0, [x1]
0x4cd0b9c8  1448  and x2, x0, #0xfffffffffff00000
0x4cd0b9cc  1452  ldr x2, [x2, #8]
0x4cd0b9d0  1456  tbz w2, #6, #+0x18 (addr 0x4cd0b9e8)
0x4cd0b9d4  1460  and x2, x4, #0xfffffffffff00000
0x4cd0b9d8  1464  ldr x2, [x2, #8]
0x4cd0b9dc  1468  movz x16, #0x58
0x4cd0b9e0  1472  tst x2, x16
0x4cd0b9e4  1476  b.eq #+0x38 (addr 0x4cd0ba1c)
0x4cd0b9e8  1480  sub csp, jssp, #0x10 (16)
0x4cd0b9ec  1484  stp x4, x1, [jssp, #-16]!
0x4cd0b9f0  1488  ubfx x16, x0, #8, #12
0x4cd0b9f4  1492  and x2, x0, #0xfffffffffff00000
0x4cd0b9f8  1496  add x2, x2, x16, lsl #2
0x4cd0b9fc  1500  ubfx x4, x0, #3, #5
0x4cd0ba00  1504  ldr x1, [x2, #360]
0x4cd0ba04  1508  lsr x1, x1, x4
0x4cd0ba08  1512  tbz w1, #0, #+0x10 (addr 0x4cd0ba18)
0x4cd0ba0c  1516  ldp x4, x1, [jssp], #16
0x4cd0ba10  1520  ldp x3, x2, [jssp], #16
0x4cd0ba14  1524  ret
0x4cd0ba18  1528  ldp x4, x1, [jssp], #16
0x4cd0ba1c  1532  sub csp, jssp, #0x78 (120)
0x4cd0ba20  1536  stp x14, x15, [jssp, #-32]!
0x4cd0ba24  1540  stp x18, lr, [jssp, #16]
0x4cd0ba28  1544  stp x10, x11, [jssp, #-32]!
0x4cd0ba2c  1548  stp x12, x13, [jssp, #16]
0x4cd0ba30  1552  stp x6, x7, [jssp, #-32]!
0x4cd0ba34  1556  stp x8, x9, [jssp, #16]
0x4cd0ba38  1560  stp x1, x4, [jssp, #-24]!
0x4cd0ba3c  1564  str x5, [jssp, #16]
0x4cd0ba40  1568  sub csp, jssp, #0xb0 (176)
0x4cd0ba44  1572  stp d26, d27, [jssp, #-32]!
0x4cd0ba48  1576  stp d28, d29, [jssp, #16]
0x4cd0ba4c  1580  stp d22, d23, [jssp, #-32]!
0x4cd0ba50  1584  stp d24, d25, [jssp, #16]
0x4cd0ba54  1588  stp d18, d19, [jssp, #-32]!
0x4cd0ba58  1592  stp d20, d21, [jssp, #16]
0x4cd0ba5c  1596  stp d6, d7, [jssp, #-32]!
0x4cd0ba60  1600  stp d16, d17, [jssp, #16]
0x4cd0ba64  1604  stp d2, d3, [jssp, #-32]!
0x4cd0ba68  1608  stp d4, d5, [jssp, #16]
0x4cd0ba6c  1612  stp d0, d1, [jssp, #-16]!
0x4cd0ba70  1616  mov x0, x4
0x4cd0ba74  1620  ldr x2, pc+268 (addr 0x000000004cd0bb80)    ;; external reference (isolate)
0x4cd0ba78  1624  ldr x16, pc+272 (addr 0x000000004cd0bb88)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0ba7c  1628  and csp, jssp, #0xfffffffffffffff0
0x4cd0ba80  1632  blr x16
0x4cd0ba84  1636  ldp d2, d3, [jssp, #16]
0x4cd0ba88  1640  ldp d0, d1, [jssp], #32
0x4cd0ba8c  1644  ldp d6, d7, [jssp, #16]
0x4cd0ba90  1648  ldp d4, d5, [jssp], #32
0x4cd0ba94  1652  ldp d18, d19, [jssp, #16]
0x4cd0ba98  1656  ldp d16, d17, [jssp], #32
0x4cd0ba9c  1660  ldp d22, d23, [jssp, #16]
0x4cd0baa0  1664  ldp d20, d21, [jssp], #32
0x4cd0baa4  1668  ldp d26, d27, [jssp, #16]
0x4cd0baa8  1672  ldp d24, d25, [jssp], #32
0x4cd0baac  1676  ldp d28, d29, [jssp], #16
0x4cd0bab0  1680  ldp x5, x6, [jssp, #16]
0x4cd0bab4  1684  ldp x1, x4, [jssp], #32
0x4cd0bab8  1688  ldp x9, x10, [jssp, #16]
0x4cd0babc  1692  ldp x7, x8, [jssp], #32
0x4cd0bac0  1696  ldp x13, x14, [jssp, #16]
0x4cd0bac4  1700  ldp x11, x12, [jssp], #32
0x4cd0bac8  1704  ldr lr, [jssp, #16]
0x4cd0bacc  1708  ldp x15, x18, [jssp], #24
0x4cd0bad0  1712  ldp x3, x2, [jssp], #16
0x4cd0bad4  1716  ret
0x4cd0bad8  1720  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd0badc  1724  d63f03e0       constant
0x4cd0bae0  1728  166dd8c0       constant
0x4cd0bae4  1732  00000000       constant
0x4cd0bae8  1736  4cd065a0       constant
0x4cd0baec  1740  00000000       constant
0x4cd0baf0  1744  166dd8c0       constant
0x4cd0baf4  1748  00000000       constant
0x4cd0baf8  1752  4cd065a0       constant
0x4cd0bafc  1756  00000000       constant
0x4cd0bb00  1760  166dd8c0       constant
0x4cd0bb04  1764  00000000       constant
0x4cd0bb08  1768  4cd065a0       constant
0x4cd0bb0c  1772  00000000       constant
0x4cd0bb10  1776  166dc2d0       constant
0x4cd0bb14  1780  00000000       constant
0x4cd0bb18  1784  00c2d958       constant
0x4cd0bb1c  1788  00000000       constant
0x4cd0bb20  1792  166dd8c0       constant
0x4cd0bb24  1796  00000000       constant
0x4cd0bb28  1800  4cd065a0       constant
0x4cd0bb2c  1804  00000000       constant
0x4cd0bb30  1808  166dc2d0       constant
0x4cd0bb34  1812  00000000       constant
0x4cd0bb38  1816  00c2d958       constant
0x4cd0bb3c  1820  00000000       constant
0x4cd0bb40  1824  166dd8c0       constant
0x4cd0bb44  1828  00000000       constant
0x4cd0bb48  1832  4cd065a0       constant
0x4cd0bb4c  1836  00000000       constant
0x4cd0bb50  1840  166dd8c0       constant
0x4cd0bb54  1844  00000000       constant
0x4cd0bb58  1848  4cd065a0       constant
0x4cd0bb5c  1852  00000000       constant
0x4cd0bb60  1856  166dc2d0       constant
0x4cd0bb64  1860  00000000       constant
0x4cd0bb68  1864  00c2d958       constant
0x4cd0bb6c  1868  00000000       constant
0x4cd0bb70  1872  166dd8c0       constant
0x4cd0bb74  1876  00000000       constant
0x4cd0bb78  1880  4cd065a0       constant
0x4cd0bb7c  1884  00000000       constant
0x4cd0bb80  1888  166dc2d0       constant
0x4cd0bb84  1892  00000000       constant
0x4cd0bb88  1896  00c2d958       constant
0x4cd0bb8c  1900  00000000       constant


RelocInfo (size = 65)
0x4cd0b428  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0b44c  code target (STUB)  (0x4cd065a0)
0x4cd0b4c4  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0b4e8  code target (STUB)  (0x4cd065a0)
0x4cd0b528  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0b54c  code target (STUB)  (0x4cd065a0)
0x4cd0b5b8  external reference (isolate)  (0x166dc2d0)
0x4cd0b5bc  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0b618  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0b63c  code target (STUB)  (0x4cd065a0)
0x4cd0b718  external reference (isolate)  (0x166dc2d0)
0x4cd0b71c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0b7e0  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0b804  code target (STUB)  (0x4cd065a0)
0x4cd0b864  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0b888  code target (STUB)  (0x4cd065a0)
0x4cd0b8f4  external reference (isolate)  (0x166dc2d0)
0x4cd0b8f8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0b954  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0b978  code target (STUB)  (0x4cd065a0)
0x4cd0ba74  external reference (isolate)  (0x166dc2d0)
0x4cd0ba78  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0bad8  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0x4cd0bc00     0  adr xzr, #+0x40 (addr 0x4cd0bc40)
0x4cd0bc04     4  adr xzr, #+0x360 (addr 0x4cd0bf64)
0x4cd0bc08     8  ldr x16, pc+1736 (addr 0x000000004cd0c2d0)    ;; external reference (store_buffer_top)
0x4cd0bc0c    12  ldr x1, [x16]
0x4cd0bc10    16  str x5, [x1], #8
0x4cd0bc14    20  str x1, [x16]
0x4cd0bc18    24  tst x1, #0x1ffff
0x4cd0bc1c    28  b.eq #+0x8 (addr 0x4cd0bc24)
0x4cd0bc20    32  ret
0x4cd0bc24    36  sub csp, jssp, #0x8 (8)
0x4cd0bc28    40  str lr, [jssp, #-8]!
0x4cd0bc2c    44  ldr x17, pc+1708 (addr 0x000000004cd0c2d8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0bc30    48  blr x17
0x4cd0bc34    52  ldr lr, [jssp], #8
0x4cd0bc38    56  ret
0x4cd0bc3c    60  ret
0x4cd0bc40    64  sub csp, jssp, #0x10 (16)
0x4cd0bc44    68  stp x2, x0, [jssp, #-16]!
0x4cd0bc48    72  ldr x1, [x5]
0x4cd0bc4c    76  and x16, x1, #0xfffffffffff00000
0x4cd0bc50    80  ldr x16, [x16, #8]
0x4cd0bc54    84  tst x16, #0x18
0x4cd0bc58    88  b.eq #+0x1d8 (addr 0x4cd0be30)
0x4cd0bc5c    92  and x16, x4, #0xfffffffffff00000
0x4cd0bc60    96  ldr x16, [x16, #8]
0x4cd0bc64   100  tst x16, #0x18
0x4cd0bc68   104  b.ne #+0x1c8 (addr 0x4cd0be30)
0x4cd0bc6c   108  and x1, x4, #0xfffffffffff00000
0x4cd0bc70   112  ldr x0, [x1, #104]
0x4cd0bc74   116  subs x0, x0, #0x1 (1)
0x4cd0bc78   120  str x0, [x1, #104]
0x4cd0bc7c   124  b.mi #+0xc4 (addr 0x4cd0bd40)
0x4cd0bc80   128  ubfx x16, x4, #8, #12
0x4cd0bc84   132  and x1, x4, #0xfffffffffff00000
0x4cd0bc88   136  add x1, x1, x16, lsl #2
0x4cd0bc8c   140  ubfx x0, x4, #3, #5
0x4cd0bc90   144  ldr x1, [x1, #360]
0x4cd0bc94   148  lsr x1, x1, x0
0x4cd0bc98   152  tbz w1, #0, #+0x8 (addr 0x4cd0bca0)
0x4cd0bc9c   156  tbnz w1, #1, #+0x3c (addr 0x4cd0bcd8)
0x4cd0bca0   160  ldp x2, x0, [jssp], #16
0x4cd0bca4   164  ldr x16, pc+1596 (addr 0x000000004cd0c2e0)    ;; external reference (store_buffer_top)
0x4cd0bca8   168  ldr x1, [x16]
0x4cd0bcac   172  str x5, [x1], #8
0x4cd0bcb0   176  str x1, [x16]
0x4cd0bcb4   180  tst x1, #0x1ffff
0x4cd0bcb8   184  b.eq #+0x8 (addr 0x4cd0bcc0)
0x4cd0bcbc   188  ret
0x4cd0bcc0   192  sub csp, jssp, #0x8 (8)
0x4cd0bcc4   196  str lr, [jssp, #-8]!
0x4cd0bcc8   200  ldr x17, pc+1568 (addr 0x000000004cd0c2e8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0bccc   204  blr x17
0x4cd0bcd0   208  ldr lr, [jssp], #8
0x4cd0bcd4   212  ret
0x4cd0bcd8   216  ldr x1, [x5]
0x4cd0bcdc   220  sub csp, jssp, #0x10 (16)
0x4cd0bce0   224  stp x4, x5, [jssp, #-16]!
0x4cd0bce4   228  ubfx x16, x1, #8, #12
0x4cd0bce8   232  and x0, x1, #0xfffffffffff00000
0x4cd0bcec   236  add x0, x0, x16, lsl #2
0x4cd0bcf0   240  ubfx x4, x1, #3, #5
0x4cd0bcf4   244  ldr x5, [x0, #360]
0x4cd0bcf8   248  lsr x5, x5, x4
0x4cd0bcfc   252  tbz w5, #0, #+0x40 (addr 0x4cd0bd3c)
0x4cd0bd00   256  ldp x4, x5, [jssp], #16
0x4cd0bd04   260  ldp x2, x0, [jssp], #16
0x4cd0bd08   264  ldr x16, pc+1512 (addr 0x000000004cd0c2f0)    ;; external reference (store_buffer_top)
0x4cd0bd0c   268  ldr x1, [x16]
0x4cd0bd10   272  str x5, [x1], #8
0x4cd0bd14   276  str x1, [x16]
0x4cd0bd18   280  tst x1, #0x1ffff
0x4cd0bd1c   284  b.eq #+0x8 (addr 0x4cd0bd24)
0x4cd0bd20   288  ret
0x4cd0bd24   292  sub csp, jssp, #0x8 (8)
0x4cd0bd28   296  str lr, [jssp, #-8]!
0x4cd0bd2c   300  ldr x17, pc+1484 (addr 0x000000004cd0c2f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0bd30   304  blr x17
0x4cd0bd34   308  ldr lr, [jssp], #8
0x4cd0bd38   312  ret
0x4cd0bd3c   316  ldp x4, x5, [jssp], #16
0x4cd0bd40   320  sub csp, jssp, #0x78 (120)
0x4cd0bd44   324  stp x14, x15, [jssp, #-32]!
0x4cd0bd48   328  stp x18, lr, [jssp, #16]
0x4cd0bd4c   332  stp x10, x11, [jssp, #-32]!
0x4cd0bd50   336  stp x12, x13, [jssp, #16]
0x4cd0bd54   340  stp x6, x7, [jssp, #-32]!
0x4cd0bd58   344  stp x8, x9, [jssp, #16]
0x4cd0bd5c   348  stp x3, x4, [jssp, #-24]!
0x4cd0bd60   352  str x5, [jssp, #16]
0x4cd0bd64   356  sub csp, jssp, #0xb0 (176)
0x4cd0bd68   360  stp d26, d27, [jssp, #-32]!
0x4cd0bd6c   364  stp d28, d29, [jssp, #16]
0x4cd0bd70   368  stp d22, d23, [jssp, #-32]!
0x4cd0bd74   372  stp d24, d25, [jssp, #16]
0x4cd0bd78   376  stp d18, d19, [jssp, #-32]!
0x4cd0bd7c   380  stp d20, d21, [jssp, #16]
0x4cd0bd80   384  stp d6, d7, [jssp, #-32]!
0x4cd0bd84   388  stp d16, d17, [jssp, #16]
0x4cd0bd88   392  stp d2, d3, [jssp, #-32]!
0x4cd0bd8c   396  stp d4, d5, [jssp, #16]
0x4cd0bd90   400  stp d0, d1, [jssp, #-16]!
0x4cd0bd94   404  mov x0, x4
0x4cd0bd98   408  mov x1, x5
0x4cd0bd9c   412  ldr x2, pc+1380 (addr 0x000000004cd0c300)    ;; external reference (isolate)
0x4cd0bda0   416  ldr x16, pc+1384 (addr 0x000000004cd0c308)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0bda4   420  and csp, jssp, #0xfffffffffffffff0
0x4cd0bda8   424  blr x16
0x4cd0bdac   428  ldp d2, d3, [jssp, #16]
0x4cd0bdb0   432  ldp d0, d1, [jssp], #32
0x4cd0bdb4   436  ldp d6, d7, [jssp, #16]
0x4cd0bdb8   440  ldp d4, d5, [jssp], #32
0x4cd0bdbc   444  ldp d18, d19, [jssp, #16]
0x4cd0bdc0   448  ldp d16, d17, [jssp], #32
0x4cd0bdc4   452  ldp d22, d23, [jssp, #16]
0x4cd0bdc8   456  ldp d20, d21, [jssp], #32
0x4cd0bdcc   460  ldp d26, d27, [jssp, #16]
0x4cd0bdd0   464  ldp d24, d25, [jssp], #32
0x4cd0bdd4   468  ldp d28, d29, [jssp], #16
0x4cd0bdd8   472  ldp x5, x6, [jssp, #16]
0x4cd0bddc   476  ldp x3, x4, [jssp], #32
0x4cd0bde0   480  ldp x9, x10, [jssp, #16]
0x4cd0bde4   484  ldp x7, x8, [jssp], #32
0x4cd0bde8   488  ldp x13, x14, [jssp, #16]
0x4cd0bdec   492  ldp x11, x12, [jssp], #32
0x4cd0bdf0   496  ldr lr, [jssp, #16]
0x4cd0bdf4   500  ldp x15, x18, [jssp], #24
0x4cd0bdf8   504  ldp x2, x0, [jssp], #16
0x4cd0bdfc   508  ldr x16, pc+1300 (addr 0x000000004cd0c310)    ;; external reference (store_buffer_top)
0x4cd0be00   512  ldr x1, [x16]
0x4cd0be04   516  str x5, [x1], #8
0x4cd0be08   520  str x1, [x16]
0x4cd0be0c   524  tst x1, #0x1ffff
0x4cd0be10   528  b.eq #+0x8 (addr 0x4cd0be18)
0x4cd0be14   532  ret
0x4cd0be18   536  sub csp, jssp, #0x8 (8)
0x4cd0be1c   540  str lr, [jssp, #-8]!
0x4cd0be20   544  ldr x17, pc+1272 (addr 0x000000004cd0c318)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0be24   548  blr x17
0x4cd0be28   552  ldr lr, [jssp], #8
0x4cd0be2c   556  ret
0x4cd0be30   560  and x1, x4, #0xfffffffffff00000
0x4cd0be34   564  ldr x0, [x1, #104]
0x4cd0be38   568  subs x0, x0, #0x1 (1)
0x4cd0be3c   572  str x0, [x1, #104]
0x4cd0be40   576  b.mi #+0x64 (addr 0x4cd0bea4)
0x4cd0be44   580  ubfx x16, x4, #8, #12
0x4cd0be48   584  and x1, x4, #0xfffffffffff00000
0x4cd0be4c   588  add x1, x1, x16, lsl #2
0x4cd0be50   592  ubfx x0, x4, #3, #5
0x4cd0be54   596  ldr x1, [x1, #360]
0x4cd0be58   600  lsr x1, x1, x0
0x4cd0be5c   604  tbz w1, #0, #+0x8 (addr 0x4cd0be64)
0x4cd0be60   608  tbnz w1, #1, #+0xc (addr 0x4cd0be6c)
0x4cd0be64   612  ldp x2, x0, [jssp], #16
0x4cd0be68   616  ret
0x4cd0be6c   620  ldr x1, [x5]
0x4cd0be70   624  sub csp, jssp, #0x10 (16)
0x4cd0be74   628  stp x4, x5, [jssp, #-16]!
0x4cd0be78   632  ubfx x16, x1, #8, #12
0x4cd0be7c   636  and x0, x1, #0xfffffffffff00000
0x4cd0be80   640  add x0, x0, x16, lsl #2
0x4cd0be84   644  ubfx x4, x1, #3, #5
0x4cd0be88   648  ldr x5, [x0, #360]
0x4cd0be8c   652  lsr x5, x5, x4
0x4cd0be90   656  tbz w5, #0, #+0x10 (addr 0x4cd0bea0)
0x4cd0be94   660  ldp x4, x5, [jssp], #16
0x4cd0be98   664  ldp x2, x0, [jssp], #16
0x4cd0be9c   668  ret
0x4cd0bea0   672  ldp x4, x5, [jssp], #16
0x4cd0bea4   676  sub csp, jssp, #0x78 (120)
0x4cd0bea8   680  stp x14, x15, [jssp, #-32]!
0x4cd0beac   684  stp x18, lr, [jssp, #16]
0x4cd0beb0   688  stp x10, x11, [jssp, #-32]!
0x4cd0beb4   692  stp x12, x13, [jssp, #16]
0x4cd0beb8   696  stp x6, x7, [jssp, #-32]!
0x4cd0bebc   700  stp x8, x9, [jssp, #16]
0x4cd0bec0   704  stp x3, x4, [jssp, #-24]!
0x4cd0bec4   708  str x5, [jssp, #16]
0x4cd0bec8   712  sub csp, jssp, #0xb0 (176)
0x4cd0becc   716  stp d26, d27, [jssp, #-32]!
0x4cd0bed0   720  stp d28, d29, [jssp, #16]
0x4cd0bed4   724  stp d22, d23, [jssp, #-32]!
0x4cd0bed8   728  stp d24, d25, [jssp, #16]
0x4cd0bedc   732  stp d18, d19, [jssp, #-32]!
0x4cd0bee0   736  stp d20, d21, [jssp, #16]
0x4cd0bee4   740  stp d6, d7, [jssp, #-32]!
0x4cd0bee8   744  stp d16, d17, [jssp, #16]
0x4cd0beec   748  stp d2, d3, [jssp, #-32]!
0x4cd0bef0   752  stp d4, d5, [jssp, #16]
0x4cd0bef4   756  stp d0, d1, [jssp, #-16]!
0x4cd0bef8   760  mov x0, x4
0x4cd0befc   764  mov x1, x5
0x4cd0bf00   768  ldr x2, pc+1056 (addr 0x000000004cd0c320)    ;; external reference (isolate)
0x4cd0bf04   772  ldr x16, pc+1060 (addr 0x000000004cd0c328)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0bf08   776  and csp, jssp, #0xfffffffffffffff0
0x4cd0bf0c   780  blr x16
0x4cd0bf10   784  ldp d2, d3, [jssp, #16]
0x4cd0bf14   788  ldp d0, d1, [jssp], #32
0x4cd0bf18   792  ldp d6, d7, [jssp, #16]
0x4cd0bf1c   796  ldp d4, d5, [jssp], #32
0x4cd0bf20   800  ldp d18, d19, [jssp, #16]
0x4cd0bf24   804  ldp d16, d17, [jssp], #32
0x4cd0bf28   808  ldp d22, d23, [jssp, #16]
0x4cd0bf2c   812  ldp d20, d21, [jssp], #32
0x4cd0bf30   816  ldp d26, d27, [jssp, #16]
0x4cd0bf34   820  ldp d24, d25, [jssp], #32
0x4cd0bf38   824  ldp d28, d29, [jssp], #16
0x4cd0bf3c   828  ldp x5, x6, [jssp, #16]
0x4cd0bf40   832  ldp x3, x4, [jssp], #32
0x4cd0bf44   836  ldp x9, x10, [jssp, #16]
0x4cd0bf48   840  ldp x7, x8, [jssp], #32
0x4cd0bf4c   844  ldp x13, x14, [jssp, #16]
0x4cd0bf50   848  ldp x11, x12, [jssp], #32
0x4cd0bf54   852  ldr lr, [jssp, #16]
0x4cd0bf58   856  ldp x15, x18, [jssp], #24
0x4cd0bf5c   860  ldp x2, x0, [jssp], #16
0x4cd0bf60   864  ret
0x4cd0bf64   868  sub csp, jssp, #0x10 (16)
0x4cd0bf68   872  stp x2, x0, [jssp, #-16]!
0x4cd0bf6c   876  ldr x1, [x5]
0x4cd0bf70   880  and x16, x1, #0xfffffffffff00000
0x4cd0bf74   884  ldr x16, [x16, #8]
0x4cd0bf78   888  tst x16, #0x18
0x4cd0bf7c   892  b.eq #+0x1f8 (addr 0x4cd0c174)
0x4cd0bf80   896  and x16, x4, #0xfffffffffff00000
0x4cd0bf84   900  ldr x16, [x16, #8]
0x4cd0bf88   904  tst x16, #0x18
0x4cd0bf8c   908  b.ne #+0x1e8 (addr 0x4cd0c174)
0x4cd0bf90   912  and x1, x4, #0xfffffffffff00000
0x4cd0bf94   916  ldr x0, [x1, #104]
0x4cd0bf98   920  subs x0, x0, #0x1 (1)
0x4cd0bf9c   924  str x0, [x1, #104]
0x4cd0bfa0   928  b.mi #+0xe4 (addr 0x4cd0c084)
0x4cd0bfa4   932  ubfx x16, x4, #8, #12
0x4cd0bfa8   936  and x1, x4, #0xfffffffffff00000
0x4cd0bfac   940  add x1, x1, x16, lsl #2
0x4cd0bfb0   944  ubfx x0, x4, #3, #5
0x4cd0bfb4   948  ldr x1, [x1, #360]
0x4cd0bfb8   952  lsr x1, x1, x0
0x4cd0bfbc   956  tbz w1, #0, #+0x8 (addr 0x4cd0bfc4)
0x4cd0bfc0   960  tbnz w1, #1, #+0x3c (addr 0x4cd0bffc)
0x4cd0bfc4   964  ldp x2, x0, [jssp], #16
0x4cd0bfc8   968  ldr x16, pc+872 (addr 0x000000004cd0c330)    ;; external reference (store_buffer_top)
0x4cd0bfcc   972  ldr x1, [x16]
0x4cd0bfd0   976  str x5, [x1], #8
0x4cd0bfd4   980  str x1, [x16]
0x4cd0bfd8   984  tst x1, #0x1ffff
0x4cd0bfdc   988  b.eq #+0x8 (addr 0x4cd0bfe4)
0x4cd0bfe0   992  ret
0x4cd0bfe4   996  sub csp, jssp, #0x8 (8)
0x4cd0bfe8  1000  str lr, [jssp, #-8]!
0x4cd0bfec  1004  ldr x17, pc+844 (addr 0x000000004cd0c338)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0bff0  1008  blr x17
0x4cd0bff4  1012  ldr lr, [jssp], #8
0x4cd0bff8  1016  ret
0x4cd0bffc  1020  ldr x1, [x5]
0x4cd0c000  1024  and x0, x1, #0xfffffffffff00000
0x4cd0c004  1028  ldr x0, [x0, #8]
0x4cd0c008  1032  tbz w0, #6, #+0x18 (addr 0x4cd0c020)
0x4cd0c00c  1036  and x0, x4, #0xfffffffffff00000
0x4cd0c010  1040  ldr x0, [x0, #8]
0x4cd0c014  1044  movz x16, #0x58
0x4cd0c018  1048  tst x0, x16
0x4cd0c01c  1052  b.eq #+0x68 (addr 0x4cd0c084)
0x4cd0c020  1056  sub csp, jssp, #0x10 (16)
0x4cd0c024  1060  stp x4, x5, [jssp, #-16]!
0x4cd0c028  1064  ubfx x16, x1, #8, #12
0x4cd0c02c  1068  and x0, x1, #0xfffffffffff00000
0x4cd0c030  1072  add x0, x0, x16, lsl #2
0x4cd0c034  1076  ubfx x4, x1, #3, #5
0x4cd0c038  1080  ldr x5, [x0, #360]
0x4cd0c03c  1084  lsr x5, x5, x4
0x4cd0c040  1088  tbz w5, #0, #+0x40 (addr 0x4cd0c080)
0x4cd0c044  1092  ldp x4, x5, [jssp], #16
0x4cd0c048  1096  ldp x2, x0, [jssp], #16
0x4cd0c04c  1100  ldr x16, pc+756 (addr 0x000000004cd0c340)    ;; external reference (store_buffer_top)
0x4cd0c050  1104  ldr x1, [x16]
0x4cd0c054  1108  str x5, [x1], #8
0x4cd0c058  1112  str x1, [x16]
0x4cd0c05c  1116  tst x1, #0x1ffff
0x4cd0c060  1120  b.eq #+0x8 (addr 0x4cd0c068)
0x4cd0c064  1124  ret
0x4cd0c068  1128  sub csp, jssp, #0x8 (8)
0x4cd0c06c  1132  str lr, [jssp, #-8]!
0x4cd0c070  1136  ldr x17, pc+728 (addr 0x000000004cd0c348)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0c074  1140  blr x17
0x4cd0c078  1144  ldr lr, [jssp], #8
0x4cd0c07c  1148  ret
0x4cd0c080  1152  ldp x4, x5, [jssp], #16
0x4cd0c084  1156  sub csp, jssp, #0x78 (120)
0x4cd0c088  1160  stp x14, x15, [jssp, #-32]!
0x4cd0c08c  1164  stp x18, lr, [jssp, #16]
0x4cd0c090  1168  stp x10, x11, [jssp, #-32]!
0x4cd0c094  1172  stp x12, x13, [jssp, #16]
0x4cd0c098  1176  stp x6, x7, [jssp, #-32]!
0x4cd0c09c  1180  stp x8, x9, [jssp, #16]
0x4cd0c0a0  1184  stp x3, x4, [jssp, #-24]!
0x4cd0c0a4  1188  str x5, [jssp, #16]
0x4cd0c0a8  1192  sub csp, jssp, #0xb0 (176)
0x4cd0c0ac  1196  stp d26, d27, [jssp, #-32]!
0x4cd0c0b0  1200  stp d28, d29, [jssp, #16]
0x4cd0c0b4  1204  stp d22, d23, [jssp, #-32]!
0x4cd0c0b8  1208  stp d24, d25, [jssp, #16]
0x4cd0c0bc  1212  stp d18, d19, [jssp, #-32]!
0x4cd0c0c0  1216  stp d20, d21, [jssp, #16]
0x4cd0c0c4  1220  stp d6, d7, [jssp, #-32]!
0x4cd0c0c8  1224  stp d16, d17, [jssp, #16]
0x4cd0c0cc  1228  stp d2, d3, [jssp, #-32]!
0x4cd0c0d0  1232  stp d4, d5, [jssp, #16]
0x4cd0c0d4  1236  stp d0, d1, [jssp, #-16]!
0x4cd0c0d8  1240  mov x0, x4
0x4cd0c0dc  1244  mov x1, x5
0x4cd0c0e0  1248  ldr x2, pc+624 (addr 0x000000004cd0c350)    ;; external reference (isolate)
0x4cd0c0e4  1252  ldr x16, pc+628 (addr 0x000000004cd0c358)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0c0e8  1256  and csp, jssp, #0xfffffffffffffff0
0x4cd0c0ec  1260  blr x16
0x4cd0c0f0  1264  ldp d2, d3, [jssp, #16]
0x4cd0c0f4  1268  ldp d0, d1, [jssp], #32
0x4cd0c0f8  1272  ldp d6, d7, [jssp, #16]
0x4cd0c0fc  1276  ldp d4, d5, [jssp], #32
0x4cd0c100  1280  ldp d18, d19, [jssp, #16]
0x4cd0c104  1284  ldp d16, d17, [jssp], #32
0x4cd0c108  1288  ldp d22, d23, [jssp, #16]
0x4cd0c10c  1292  ldp d20, d21, [jssp], #32
0x4cd0c110  1296  ldp d26, d27, [jssp, #16]
0x4cd0c114  1300  ldp d24, d25, [jssp], #32
0x4cd0c118  1304  ldp d28, d29, [jssp], #16
0x4cd0c11c  1308  ldp x5, x6, [jssp, #16]
0x4cd0c120  1312  ldp x3, x4, [jssp], #32
0x4cd0c124  1316  ldp x9, x10, [jssp, #16]
0x4cd0c128  1320  ldp x7, x8, [jssp], #32
0x4cd0c12c  1324  ldp x13, x14, [jssp, #16]
0x4cd0c130  1328  ldp x11, x12, [jssp], #32
0x4cd0c134  1332  ldr lr, [jssp, #16]
0x4cd0c138  1336  ldp x15, x18, [jssp], #24
0x4cd0c13c  1340  ldp x2, x0, [jssp], #16
0x4cd0c140  1344  ldr x16, pc+544 (addr 0x000000004cd0c360)    ;; external reference (store_buffer_top)
0x4cd0c144  1348  ldr x1, [x16]
0x4cd0c148  1352  str x5, [x1], #8
0x4cd0c14c  1356  str x1, [x16]
0x4cd0c150  1360  tst x1, #0x1ffff
0x4cd0c154  1364  b.eq #+0x8 (addr 0x4cd0c15c)
0x4cd0c158  1368  ret
0x4cd0c15c  1372  sub csp, jssp, #0x8 (8)
0x4cd0c160  1376  str lr, [jssp, #-8]!
0x4cd0c164  1380  ldr x17, pc+516 (addr 0x000000004cd0c368)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0c168  1384  blr x17
0x4cd0c16c  1388  ldr lr, [jssp], #8
0x4cd0c170  1392  ret
0x4cd0c174  1396  and x1, x4, #0xfffffffffff00000
0x4cd0c178  1400  ldr x0, [x1, #104]
0x4cd0c17c  1404  subs x0, x0, #0x1 (1)
0x4cd0c180  1408  str x0, [x1, #104]
0x4cd0c184  1412  b.mi #+0x84 (addr 0x4cd0c208)
0x4cd0c188  1416  ubfx x16, x4, #8, #12
0x4cd0c18c  1420  and x1, x4, #0xfffffffffff00000
0x4cd0c190  1424  add x1, x1, x16, lsl #2
0x4cd0c194  1428  ubfx x0, x4, #3, #5
0x4cd0c198  1432  ldr x1, [x1, #360]
0x4cd0c19c  1436  lsr x1, x1, x0
0x4cd0c1a0  1440  tbz w1, #0, #+0x8 (addr 0x4cd0c1a8)
0x4cd0c1a4  1444  tbnz w1, #1, #+0xc (addr 0x4cd0c1b0)
0x4cd0c1a8  1448  ldp x2, x0, [jssp], #16
0x4cd0c1ac  1452  ret
0x4cd0c1b0  1456  ldr x1, [x5]
0x4cd0c1b4  1460  and x0, x1, #0xfffffffffff00000
0x4cd0c1b8  1464  ldr x0, [x0, #8]
0x4cd0c1bc  1468  tbz w0, #6, #+0x18 (addr 0x4cd0c1d4)
0x4cd0c1c0  1472  and x0, x4, #0xfffffffffff00000
0x4cd0c1c4  1476  ldr x0, [x0, #8]
0x4cd0c1c8  1480  movz x16, #0x58
0x4cd0c1cc  1484  tst x0, x16
0x4cd0c1d0  1488  b.eq #+0x38 (addr 0x4cd0c208)
0x4cd0c1d4  1492  sub csp, jssp, #0x10 (16)
0x4cd0c1d8  1496  stp x4, x5, [jssp, #-16]!
0x4cd0c1dc  1500  ubfx x16, x1, #8, #12
0x4cd0c1e0  1504  and x0, x1, #0xfffffffffff00000
0x4cd0c1e4  1508  add x0, x0, x16, lsl #2
0x4cd0c1e8  1512  ubfx x4, x1, #3, #5
0x4cd0c1ec  1516  ldr x5, [x0, #360]
0x4cd0c1f0  1520  lsr x5, x5, x4
0x4cd0c1f4  1524  tbz w5, #0, #+0x10 (addr 0x4cd0c204)
0x4cd0c1f8  1528  ldp x4, x5, [jssp], #16
0x4cd0c1fc  1532  ldp x2, x0, [jssp], #16
0x4cd0c200  1536  ret
0x4cd0c204  1540  ldp x4, x5, [jssp], #16
0x4cd0c208  1544  sub csp, jssp, #0x78 (120)
0x4cd0c20c  1548  stp x14, x15, [jssp, #-32]!
0x4cd0c210  1552  stp x18, lr, [jssp, #16]
0x4cd0c214  1556  stp x10, x11, [jssp, #-32]!
0x4cd0c218  1560  stp x12, x13, [jssp, #16]
0x4cd0c21c  1564  stp x6, x7, [jssp, #-32]!
0x4cd0c220  1568  stp x8, x9, [jssp, #16]
0x4cd0c224  1572  stp x3, x4, [jssp, #-24]!
0x4cd0c228  1576  str x5, [jssp, #16]
0x4cd0c22c  1580  sub csp, jssp, #0xb0 (176)
0x4cd0c230  1584  stp d26, d27, [jssp, #-32]!
0x4cd0c234  1588  stp d28, d29, [jssp, #16]
0x4cd0c238  1592  stp d22, d23, [jssp, #-32]!
0x4cd0c23c  1596  stp d24, d25, [jssp, #16]
0x4cd0c240  1600  stp d18, d19, [jssp, #-32]!
0x4cd0c244  1604  stp d20, d21, [jssp, #16]
0x4cd0c248  1608  stp d6, d7, [jssp, #-32]!
0x4cd0c24c  1612  stp d16, d17, [jssp, #16]
0x4cd0c250  1616  stp d2, d3, [jssp, #-32]!
0x4cd0c254  1620  stp d4, d5, [jssp, #16]
0x4cd0c258  1624  stp d0, d1, [jssp, #-16]!
0x4cd0c25c  1628  mov x0, x4
0x4cd0c260  1632  mov x1, x5
0x4cd0c264  1636  ldr x2, pc+268 (addr 0x000000004cd0c370)    ;; external reference (isolate)
0x4cd0c268  1640  ldr x16, pc+272 (addr 0x000000004cd0c378)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0c26c  1644  and csp, jssp, #0xfffffffffffffff0
0x4cd0c270  1648  blr x16
0x4cd0c274  1652  ldp d2, d3, [jssp, #16]
0x4cd0c278  1656  ldp d0, d1, [jssp], #32
0x4cd0c27c  1660  ldp d6, d7, [jssp, #16]
0x4cd0c280  1664  ldp d4, d5, [jssp], #32
0x4cd0c284  1668  ldp d18, d19, [jssp, #16]
0x4cd0c288  1672  ldp d16, d17, [jssp], #32
0x4cd0c28c  1676  ldp d22, d23, [jssp, #16]
0x4cd0c290  1680  ldp d20, d21, [jssp], #32
0x4cd0c294  1684  ldp d26, d27, [jssp, #16]
0x4cd0c298  1688  ldp d24, d25, [jssp], #32
0x4cd0c29c  1692  ldp d28, d29, [jssp], #16
0x4cd0c2a0  1696  ldp x5, x6, [jssp, #16]
0x4cd0c2a4  1700  ldp x3, x4, [jssp], #32
0x4cd0c2a8  1704  ldp x9, x10, [jssp, #16]
0x4cd0c2ac  1708  ldp x7, x8, [jssp], #32
0x4cd0c2b0  1712  ldp x13, x14, [jssp, #16]
0x4cd0c2b4  1716  ldp x11, x12, [jssp], #32
0x4cd0c2b8  1720  ldr lr, [jssp, #16]
0x4cd0c2bc  1724  ldp x15, x18, [jssp], #24
0x4cd0c2c0  1728  ldp x2, x0, [jssp], #16
0x4cd0c2c4  1732  ret
0x4cd0c2c8  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd0c2cc  1740  d63f03e0       constant
0x4cd0c2d0  1744  166dd8c0       constant
0x4cd0c2d4  1748  00000000       constant
0x4cd0c2d8  1752  4cd065a0       constant
0x4cd0c2dc  1756  00000000       constant
0x4cd0c2e0  1760  166dd8c0       constant
0x4cd0c2e4  1764  00000000       constant
0x4cd0c2e8  1768  4cd065a0       constant
0x4cd0c2ec  1772  00000000       constant
0x4cd0c2f0  1776  166dd8c0       constant
0x4cd0c2f4  1780  00000000       constant
0x4cd0c2f8  1784  4cd065a0       constant
0x4cd0c2fc  1788  00000000       constant
0x4cd0c300  1792  166dc2d0       constant
0x4cd0c304  1796  00000000       constant
0x4cd0c308  1800  00c2d958       constant
0x4cd0c30c  1804  00000000       constant
0x4cd0c310  1808  166dd8c0       constant
0x4cd0c314  1812  00000000       constant
0x4cd0c318  1816  4cd065a0       constant
0x4cd0c31c  1820  00000000       constant
0x4cd0c320  1824  166dc2d0       constant
0x4cd0c324  1828  00000000       constant
0x4cd0c328  1832  00c2d958       constant
0x4cd0c32c  1836  00000000       constant
0x4cd0c330  1840  166dd8c0       constant
0x4cd0c334  1844  00000000       constant
0x4cd0c338  1848  4cd065a0       constant
0x4cd0c33c  1852  00000000       constant
0x4cd0c340  1856  166dd8c0       constant
0x4cd0c344  1860  00000000       constant
0x4cd0c348  1864  4cd065a0       constant
0x4cd0c34c  1868  00000000       constant
0x4cd0c350  1872  166dc2d0       constant
0x4cd0c354  1876  00000000       constant
0x4cd0c358  1880  00c2d958       constant
0x4cd0c35c  1884  00000000       constant
0x4cd0c360  1888  166dd8c0       constant
0x4cd0c364  1892  00000000       constant
0x4cd0c368  1896  4cd065a0       constant
0x4cd0c36c  1900  00000000       constant
0x4cd0c370  1904  166dc2d0       constant
0x4cd0c374  1908  00000000       constant
0x4cd0c378  1912  00c2d958       constant
0x4cd0c37c  1916  00000000       constant


RelocInfo (size = 65)
0x4cd0bc08  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0bc2c  code target (STUB)  (0x4cd065a0)
0x4cd0bca4  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0bcc8  code target (STUB)  (0x4cd065a0)
0x4cd0bd08  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0bd2c  code target (STUB)  (0x4cd065a0)
0x4cd0bd9c  external reference (isolate)  (0x166dc2d0)
0x4cd0bda0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0bdfc  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0be20  code target (STUB)  (0x4cd065a0)
0x4cd0bf00  external reference (isolate)  (0x166dc2d0)
0x4cd0bf04  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0bfc8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0bfec  code target (STUB)  (0x4cd065a0)
0x4cd0c04c  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0c070  code target (STUB)  (0x4cd065a0)
0x4cd0c0e0  external reference (isolate)  (0x166dc2d0)
0x4cd0c0e4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0c140  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0c164  code target (STUB)  (0x4cd065a0)
0x4cd0c264  external reference (isolate)  (0x166dc2d0)
0x4cd0c268  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0c2c8  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0x4cd0c3e0     0  adr xzr, #+0x40 (addr 0x4cd0c420)
0x4cd0c3e4     4  adr xzr, #+0x360 (addr 0x4cd0c744)
0x4cd0c3e8     8  ldr x16, pc+1736 (addr 0x000000004cd0cab0)    ;; external reference (store_buffer_top)
0x4cd0c3ec    12  ldr x4, [x16]
0x4cd0c3f0    16  str x3, [x4], #8
0x4cd0c3f4    20  str x4, [x16]
0x4cd0c3f8    24  tst x4, #0x1ffff
0x4cd0c3fc    28  b.eq #+0x8 (addr 0x4cd0c404)
0x4cd0c400    32  ret
0x4cd0c404    36  sub csp, jssp, #0x8 (8)
0x4cd0c408    40  str lr, [jssp, #-8]!
0x4cd0c40c    44  ldr x17, pc+1708 (addr 0x000000004cd0cab8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0c410    48  blr x17
0x4cd0c414    52  ldr lr, [jssp], #8
0x4cd0c418    56  ret
0x4cd0c41c    60  ret
0x4cd0c420    64  sub csp, jssp, #0x10 (16)
0x4cd0c424    68  stp x2, x0, [jssp, #-16]!
0x4cd0c428    72  ldr x4, [x3]
0x4cd0c42c    76  and x16, x4, #0xfffffffffff00000
0x4cd0c430    80  ldr x16, [x16, #8]
0x4cd0c434    84  tst x16, #0x18
0x4cd0c438    88  b.eq #+0x1d8 (addr 0x4cd0c610)
0x4cd0c43c    92  and x16, x1, #0xfffffffffff00000
0x4cd0c440    96  ldr x16, [x16, #8]
0x4cd0c444   100  tst x16, #0x18
0x4cd0c448   104  b.ne #+0x1c8 (addr 0x4cd0c610)
0x4cd0c44c   108  and x4, x1, #0xfffffffffff00000
0x4cd0c450   112  ldr x0, [x4, #104]
0x4cd0c454   116  subs x0, x0, #0x1 (1)
0x4cd0c458   120  str x0, [x4, #104]
0x4cd0c45c   124  b.mi #+0xc4 (addr 0x4cd0c520)
0x4cd0c460   128  ubfx x16, x1, #8, #12
0x4cd0c464   132  and x4, x1, #0xfffffffffff00000
0x4cd0c468   136  add x4, x4, x16, lsl #2
0x4cd0c46c   140  ubfx x0, x1, #3, #5
0x4cd0c470   144  ldr x4, [x4, #360]
0x4cd0c474   148  lsr x4, x4, x0
0x4cd0c478   152  tbz w4, #0, #+0x8 (addr 0x4cd0c480)
0x4cd0c47c   156  tbnz w4, #1, #+0x3c (addr 0x4cd0c4b8)
0x4cd0c480   160  ldp x2, x0, [jssp], #16
0x4cd0c484   164  ldr x16, pc+1596 (addr 0x000000004cd0cac0)    ;; external reference (store_buffer_top)
0x4cd0c488   168  ldr x4, [x16]
0x4cd0c48c   172  str x3, [x4], #8
0x4cd0c490   176  str x4, [x16]
0x4cd0c494   180  tst x4, #0x1ffff
0x4cd0c498   184  b.eq #+0x8 (addr 0x4cd0c4a0)
0x4cd0c49c   188  ret
0x4cd0c4a0   192  sub csp, jssp, #0x8 (8)
0x4cd0c4a4   196  str lr, [jssp, #-8]!
0x4cd0c4a8   200  ldr x17, pc+1568 (addr 0x000000004cd0cac8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0c4ac   204  blr x17
0x4cd0c4b0   208  ldr lr, [jssp], #8
0x4cd0c4b4   212  ret
0x4cd0c4b8   216  ldr x4, [x3]
0x4cd0c4bc   220  sub csp, jssp, #0x10 (16)
0x4cd0c4c0   224  stp x1, x3, [jssp, #-16]!
0x4cd0c4c4   228  ubfx x16, x4, #8, #12
0x4cd0c4c8   232  and x0, x4, #0xfffffffffff00000
0x4cd0c4cc   236  add x0, x0, x16, lsl #2
0x4cd0c4d0   240  ubfx x1, x4, #3, #5
0x4cd0c4d4   244  ldr x3, [x0, #360]
0x4cd0c4d8   248  lsr x3, x3, x1
0x4cd0c4dc   252  tbz w3, #0, #+0x40 (addr 0x4cd0c51c)
0x4cd0c4e0   256  ldp x1, x3, [jssp], #16
0x4cd0c4e4   260  ldp x2, x0, [jssp], #16
0x4cd0c4e8   264  ldr x16, pc+1512 (addr 0x000000004cd0cad0)    ;; external reference (store_buffer_top)
0x4cd0c4ec   268  ldr x4, [x16]
0x4cd0c4f0   272  str x3, [x4], #8
0x4cd0c4f4   276  str x4, [x16]
0x4cd0c4f8   280  tst x4, #0x1ffff
0x4cd0c4fc   284  b.eq #+0x8 (addr 0x4cd0c504)
0x4cd0c500   288  ret
0x4cd0c504   292  sub csp, jssp, #0x8 (8)
0x4cd0c508   296  str lr, [jssp, #-8]!
0x4cd0c50c   300  ldr x17, pc+1484 (addr 0x000000004cd0cad8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0c510   304  blr x17
0x4cd0c514   308  ldr lr, [jssp], #8
0x4cd0c518   312  ret
0x4cd0c51c   316  ldp x1, x3, [jssp], #16
0x4cd0c520   320  sub csp, jssp, #0x78 (120)
0x4cd0c524   324  stp x14, x15, [jssp, #-32]!
0x4cd0c528   328  stp x18, lr, [jssp, #16]
0x4cd0c52c   332  stp x10, x11, [jssp, #-32]!
0x4cd0c530   336  stp x12, x13, [jssp, #16]
0x4cd0c534   340  stp x6, x7, [jssp, #-32]!
0x4cd0c538   344  stp x8, x9, [jssp, #16]
0x4cd0c53c   348  stp x1, x3, [jssp, #-24]!
0x4cd0c540   352  str x5, [jssp, #16]
0x4cd0c544   356  sub csp, jssp, #0xb0 (176)
0x4cd0c548   360  stp d26, d27, [jssp, #-32]!
0x4cd0c54c   364  stp d28, d29, [jssp, #16]
0x4cd0c550   368  stp d22, d23, [jssp, #-32]!
0x4cd0c554   372  stp d24, d25, [jssp, #16]
0x4cd0c558   376  stp d18, d19, [jssp, #-32]!
0x4cd0c55c   380  stp d20, d21, [jssp, #16]
0x4cd0c560   384  stp d6, d7, [jssp, #-32]!
0x4cd0c564   388  stp d16, d17, [jssp, #16]
0x4cd0c568   392  stp d2, d3, [jssp, #-32]!
0x4cd0c56c   396  stp d4, d5, [jssp, #16]
0x4cd0c570   400  stp d0, d1, [jssp, #-16]!
0x4cd0c574   404  mov x0, x1
0x4cd0c578   408  mov x1, x3
0x4cd0c57c   412  ldr x2, pc+1380 (addr 0x000000004cd0cae0)    ;; external reference (isolate)
0x4cd0c580   416  ldr x16, pc+1384 (addr 0x000000004cd0cae8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0c584   420  and csp, jssp, #0xfffffffffffffff0
0x4cd0c588   424  blr x16
0x4cd0c58c   428  ldp d2, d3, [jssp, #16]
0x4cd0c590   432  ldp d0, d1, [jssp], #32
0x4cd0c594   436  ldp d6, d7, [jssp, #16]
0x4cd0c598   440  ldp d4, d5, [jssp], #32
0x4cd0c59c   444  ldp d18, d19, [jssp, #16]
0x4cd0c5a0   448  ldp d16, d17, [jssp], #32
0x4cd0c5a4   452  ldp d22, d23, [jssp, #16]
0x4cd0c5a8   456  ldp d20, d21, [jssp], #32
0x4cd0c5ac   460  ldp d26, d27, [jssp, #16]
0x4cd0c5b0   464  ldp d24, d25, [jssp], #32
0x4cd0c5b4   468  ldp d28, d29, [jssp], #16
0x4cd0c5b8   472  ldp x5, x6, [jssp, #16]
0x4cd0c5bc   476  ldp x1, x3, [jssp], #32
0x4cd0c5c0   480  ldp x9, x10, [jssp, #16]
0x4cd0c5c4   484  ldp x7, x8, [jssp], #32
0x4cd0c5c8   488  ldp x13, x14, [jssp, #16]
0x4cd0c5cc   492  ldp x11, x12, [jssp], #32
0x4cd0c5d0   496  ldr lr, [jssp, #16]
0x4cd0c5d4   500  ldp x15, x18, [jssp], #24
0x4cd0c5d8   504  ldp x2, x0, [jssp], #16
0x4cd0c5dc   508  ldr x16, pc+1300 (addr 0x000000004cd0caf0)    ;; external reference (store_buffer_top)
0x4cd0c5e0   512  ldr x4, [x16]
0x4cd0c5e4   516  str x3, [x4], #8
0x4cd0c5e8   520  str x4, [x16]
0x4cd0c5ec   524  tst x4, #0x1ffff
0x4cd0c5f0   528  b.eq #+0x8 (addr 0x4cd0c5f8)
0x4cd0c5f4   532  ret
0x4cd0c5f8   536  sub csp, jssp, #0x8 (8)
0x4cd0c5fc   540  str lr, [jssp, #-8]!
0x4cd0c600   544  ldr x17, pc+1272 (addr 0x000000004cd0caf8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0c604   548  blr x17
0x4cd0c608   552  ldr lr, [jssp], #8
0x4cd0c60c   556  ret
0x4cd0c610   560  and x4, x1, #0xfffffffffff00000
0x4cd0c614   564  ldr x0, [x4, #104]
0x4cd0c618   568  subs x0, x0, #0x1 (1)
0x4cd0c61c   572  str x0, [x4, #104]
0x4cd0c620   576  b.mi #+0x64 (addr 0x4cd0c684)
0x4cd0c624   580  ubfx x16, x1, #8, #12
0x4cd0c628   584  and x4, x1, #0xfffffffffff00000
0x4cd0c62c   588  add x4, x4, x16, lsl #2
0x4cd0c630   592  ubfx x0, x1, #3, #5
0x4cd0c634   596  ldr x4, [x4, #360]
0x4cd0c638   600  lsr x4, x4, x0
0x4cd0c63c   604  tbz w4, #0, #+0x8 (addr 0x4cd0c644)
0x4cd0c640   608  tbnz w4, #1, #+0xc (addr 0x4cd0c64c)
0x4cd0c644   612  ldp x2, x0, [jssp], #16
0x4cd0c648   616  ret
0x4cd0c64c   620  ldr x4, [x3]
0x4cd0c650   624  sub csp, jssp, #0x10 (16)
0x4cd0c654   628  stp x1, x3, [jssp, #-16]!
0x4cd0c658   632  ubfx x16, x4, #8, #12
0x4cd0c65c   636  and x0, x4, #0xfffffffffff00000
0x4cd0c660   640  add x0, x0, x16, lsl #2
0x4cd0c664   644  ubfx x1, x4, #3, #5
0x4cd0c668   648  ldr x3, [x0, #360]
0x4cd0c66c   652  lsr x3, x3, x1
0x4cd0c670   656  tbz w3, #0, #+0x10 (addr 0x4cd0c680)
0x4cd0c674   660  ldp x1, x3, [jssp], #16
0x4cd0c678   664  ldp x2, x0, [jssp], #16
0x4cd0c67c   668  ret
0x4cd0c680   672  ldp x1, x3, [jssp], #16
0x4cd0c684   676  sub csp, jssp, #0x78 (120)
0x4cd0c688   680  stp x14, x15, [jssp, #-32]!
0x4cd0c68c   684  stp x18, lr, [jssp, #16]
0x4cd0c690   688  stp x10, x11, [jssp, #-32]!
0x4cd0c694   692  stp x12, x13, [jssp, #16]
0x4cd0c698   696  stp x6, x7, [jssp, #-32]!
0x4cd0c69c   700  stp x8, x9, [jssp, #16]
0x4cd0c6a0   704  stp x1, x3, [jssp, #-24]!
0x4cd0c6a4   708  str x5, [jssp, #16]
0x4cd0c6a8   712  sub csp, jssp, #0xb0 (176)
0x4cd0c6ac   716  stp d26, d27, [jssp, #-32]!
0x4cd0c6b0   720  stp d28, d29, [jssp, #16]
0x4cd0c6b4   724  stp d22, d23, [jssp, #-32]!
0x4cd0c6b8   728  stp d24, d25, [jssp, #16]
0x4cd0c6bc   732  stp d18, d19, [jssp, #-32]!
0x4cd0c6c0   736  stp d20, d21, [jssp, #16]
0x4cd0c6c4   740  stp d6, d7, [jssp, #-32]!
0x4cd0c6c8   744  stp d16, d17, [jssp, #16]
0x4cd0c6cc   748  stp d2, d3, [jssp, #-32]!
0x4cd0c6d0   752  stp d4, d5, [jssp, #16]
0x4cd0c6d4   756  stp d0, d1, [jssp, #-16]!
0x4cd0c6d8   760  mov x0, x1
0x4cd0c6dc   764  mov x1, x3
0x4cd0c6e0   768  ldr x2, pc+1056 (addr 0x000000004cd0cb00)    ;; external reference (isolate)
0x4cd0c6e4   772  ldr x16, pc+1060 (addr 0x000000004cd0cb08)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0c6e8   776  and csp, jssp, #0xfffffffffffffff0
0x4cd0c6ec   780  blr x16
0x4cd0c6f0   784  ldp d2, d3, [jssp, #16]
0x4cd0c6f4   788  ldp d0, d1, [jssp], #32
0x4cd0c6f8   792  ldp d6, d7, [jssp, #16]
0x4cd0c6fc   796  ldp d4, d5, [jssp], #32
0x4cd0c700   800  ldp d18, d19, [jssp, #16]
0x4cd0c704   804  ldp d16, d17, [jssp], #32
0x4cd0c708   808  ldp d22, d23, [jssp, #16]
0x4cd0c70c   812  ldp d20, d21, [jssp], #32
0x4cd0c710   816  ldp d26, d27, [jssp, #16]
0x4cd0c714   820  ldp d24, d25, [jssp], #32
0x4cd0c718   824  ldp d28, d29, [jssp], #16
0x4cd0c71c   828  ldp x5, x6, [jssp, #16]
0x4cd0c720   832  ldp x1, x3, [jssp], #32
0x4cd0c724   836  ldp x9, x10, [jssp, #16]
0x4cd0c728   840  ldp x7, x8, [jssp], #32
0x4cd0c72c   844  ldp x13, x14, [jssp, #16]
0x4cd0c730   848  ldp x11, x12, [jssp], #32
0x4cd0c734   852  ldr lr, [jssp, #16]
0x4cd0c738   856  ldp x15, x18, [jssp], #24
0x4cd0c73c   860  ldp x2, x0, [jssp], #16
0x4cd0c740   864  ret
0x4cd0c744   868  sub csp, jssp, #0x10 (16)
0x4cd0c748   872  stp x2, x0, [jssp, #-16]!
0x4cd0c74c   876  ldr x4, [x3]
0x4cd0c750   880  and x16, x4, #0xfffffffffff00000
0x4cd0c754   884  ldr x16, [x16, #8]
0x4cd0c758   888  tst x16, #0x18
0x4cd0c75c   892  b.eq #+0x1f8 (addr 0x4cd0c954)
0x4cd0c760   896  and x16, x1, #0xfffffffffff00000
0x4cd0c764   900  ldr x16, [x16, #8]
0x4cd0c768   904  tst x16, #0x18
0x4cd0c76c   908  b.ne #+0x1e8 (addr 0x4cd0c954)
0x4cd0c770   912  and x4, x1, #0xfffffffffff00000
0x4cd0c774   916  ldr x0, [x4, #104]
0x4cd0c778   920  subs x0, x0, #0x1 (1)
0x4cd0c77c   924  str x0, [x4, #104]
0x4cd0c780   928  b.mi #+0xe4 (addr 0x4cd0c864)
0x4cd0c784   932  ubfx x16, x1, #8, #12
0x4cd0c788   936  and x4, x1, #0xfffffffffff00000
0x4cd0c78c   940  add x4, x4, x16, lsl #2
0x4cd0c790   944  ubfx x0, x1, #3, #5
0x4cd0c794   948  ldr x4, [x4, #360]
0x4cd0c798   952  lsr x4, x4, x0
0x4cd0c79c   956  tbz w4, #0, #+0x8 (addr 0x4cd0c7a4)
0x4cd0c7a0   960  tbnz w4, #1, #+0x3c (addr 0x4cd0c7dc)
0x4cd0c7a4   964  ldp x2, x0, [jssp], #16
0x4cd0c7a8   968  ldr x16, pc+872 (addr 0x000000004cd0cb10)    ;; external reference (store_buffer_top)
0x4cd0c7ac   972  ldr x4, [x16]
0x4cd0c7b0   976  str x3, [x4], #8
0x4cd0c7b4   980  str x4, [x16]
0x4cd0c7b8   984  tst x4, #0x1ffff
0x4cd0c7bc   988  b.eq #+0x8 (addr 0x4cd0c7c4)
0x4cd0c7c0   992  ret
0x4cd0c7c4   996  sub csp, jssp, #0x8 (8)
0x4cd0c7c8  1000  str lr, [jssp, #-8]!
0x4cd0c7cc  1004  ldr x17, pc+844 (addr 0x000000004cd0cb18)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0c7d0  1008  blr x17
0x4cd0c7d4  1012  ldr lr, [jssp], #8
0x4cd0c7d8  1016  ret
0x4cd0c7dc  1020  ldr x4, [x3]
0x4cd0c7e0  1024  and x0, x4, #0xfffffffffff00000
0x4cd0c7e4  1028  ldr x0, [x0, #8]
0x4cd0c7e8  1032  tbz w0, #6, #+0x18 (addr 0x4cd0c800)
0x4cd0c7ec  1036  and x0, x1, #0xfffffffffff00000
0x4cd0c7f0  1040  ldr x0, [x0, #8]
0x4cd0c7f4  1044  movz x16, #0x58
0x4cd0c7f8  1048  tst x0, x16
0x4cd0c7fc  1052  b.eq #+0x68 (addr 0x4cd0c864)
0x4cd0c800  1056  sub csp, jssp, #0x10 (16)
0x4cd0c804  1060  stp x1, x3, [jssp, #-16]!
0x4cd0c808  1064  ubfx x16, x4, #8, #12
0x4cd0c80c  1068  and x0, x4, #0xfffffffffff00000
0x4cd0c810  1072  add x0, x0, x16, lsl #2
0x4cd0c814  1076  ubfx x1, x4, #3, #5
0x4cd0c818  1080  ldr x3, [x0, #360]
0x4cd0c81c  1084  lsr x3, x3, x1
0x4cd0c820  1088  tbz w3, #0, #+0x40 (addr 0x4cd0c860)
0x4cd0c824  1092  ldp x1, x3, [jssp], #16
0x4cd0c828  1096  ldp x2, x0, [jssp], #16
0x4cd0c82c  1100  ldr x16, pc+756 (addr 0x000000004cd0cb20)    ;; external reference (store_buffer_top)
0x4cd0c830  1104  ldr x4, [x16]
0x4cd0c834  1108  str x3, [x4], #8
0x4cd0c838  1112  str x4, [x16]
0x4cd0c83c  1116  tst x4, #0x1ffff
0x4cd0c840  1120  b.eq #+0x8 (addr 0x4cd0c848)
0x4cd0c844  1124  ret
0x4cd0c848  1128  sub csp, jssp, #0x8 (8)
0x4cd0c84c  1132  str lr, [jssp, #-8]!
0x4cd0c850  1136  ldr x17, pc+728 (addr 0x000000004cd0cb28)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0c854  1140  blr x17
0x4cd0c858  1144  ldr lr, [jssp], #8
0x4cd0c85c  1148  ret
0x4cd0c860  1152  ldp x1, x3, [jssp], #16
0x4cd0c864  1156  sub csp, jssp, #0x78 (120)
0x4cd0c868  1160  stp x14, x15, [jssp, #-32]!
0x4cd0c86c  1164  stp x18, lr, [jssp, #16]
0x4cd0c870  1168  stp x10, x11, [jssp, #-32]!
0x4cd0c874  1172  stp x12, x13, [jssp, #16]
0x4cd0c878  1176  stp x6, x7, [jssp, #-32]!
0x4cd0c87c  1180  stp x8, x9, [jssp, #16]
0x4cd0c880  1184  stp x1, x3, [jssp, #-24]!
0x4cd0c884  1188  str x5, [jssp, #16]
0x4cd0c888  1192  sub csp, jssp, #0xb0 (176)
0x4cd0c88c  1196  stp d26, d27, [jssp, #-32]!
0x4cd0c890  1200  stp d28, d29, [jssp, #16]
0x4cd0c894  1204  stp d22, d23, [jssp, #-32]!
0x4cd0c898  1208  stp d24, d25, [jssp, #16]
0x4cd0c89c  1212  stp d18, d19, [jssp, #-32]!
0x4cd0c8a0  1216  stp d20, d21, [jssp, #16]
0x4cd0c8a4  1220  stp d6, d7, [jssp, #-32]!
0x4cd0c8a8  1224  stp d16, d17, [jssp, #16]
0x4cd0c8ac  1228  stp d2, d3, [jssp, #-32]!
0x4cd0c8b0  1232  stp d4, d5, [jssp, #16]
0x4cd0c8b4  1236  stp d0, d1, [jssp, #-16]!
0x4cd0c8b8  1240  mov x0, x1
0x4cd0c8bc  1244  mov x1, x3
0x4cd0c8c0  1248  ldr x2, pc+624 (addr 0x000000004cd0cb30)    ;; external reference (isolate)
0x4cd0c8c4  1252  ldr x16, pc+628 (addr 0x000000004cd0cb38)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0c8c8  1256  and csp, jssp, #0xfffffffffffffff0
0x4cd0c8cc  1260  blr x16
0x4cd0c8d0  1264  ldp d2, d3, [jssp, #16]
0x4cd0c8d4  1268  ldp d0, d1, [jssp], #32
0x4cd0c8d8  1272  ldp d6, d7, [jssp, #16]
0x4cd0c8dc  1276  ldp d4, d5, [jssp], #32
0x4cd0c8e0  1280  ldp d18, d19, [jssp, #16]
0x4cd0c8e4  1284  ldp d16, d17, [jssp], #32
0x4cd0c8e8  1288  ldp d22, d23, [jssp, #16]
0x4cd0c8ec  1292  ldp d20, d21, [jssp], #32
0x4cd0c8f0  1296  ldp d26, d27, [jssp, #16]
0x4cd0c8f4  1300  ldp d24, d25, [jssp], #32
0x4cd0c8f8  1304  ldp d28, d29, [jssp], #16
0x4cd0c8fc  1308  ldp x5, x6, [jssp, #16]
0x4cd0c900  1312  ldp x1, x3, [jssp], #32
0x4cd0c904  1316  ldp x9, x10, [jssp, #16]
0x4cd0c908  1320  ldp x7, x8, [jssp], #32
0x4cd0c90c  1324  ldp x13, x14, [jssp, #16]
0x4cd0c910  1328  ldp x11, x12, [jssp], #32
0x4cd0c914  1332  ldr lr, [jssp, #16]
0x4cd0c918  1336  ldp x15, x18, [jssp], #24
0x4cd0c91c  1340  ldp x2, x0, [jssp], #16
0x4cd0c920  1344  ldr x16, pc+544 (addr 0x000000004cd0cb40)    ;; external reference (store_buffer_top)
0x4cd0c924  1348  ldr x4, [x16]
0x4cd0c928  1352  str x3, [x4], #8
0x4cd0c92c  1356  str x4, [x16]
0x4cd0c930  1360  tst x4, #0x1ffff
0x4cd0c934  1364  b.eq #+0x8 (addr 0x4cd0c93c)
0x4cd0c938  1368  ret
0x4cd0c93c  1372  sub csp, jssp, #0x8 (8)
0x4cd0c940  1376  str lr, [jssp, #-8]!
0x4cd0c944  1380  ldr x17, pc+516 (addr 0x000000004cd0cb48)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0c948  1384  blr x17
0x4cd0c94c  1388  ldr lr, [jssp], #8
0x4cd0c950  1392  ret
0x4cd0c954  1396  and x4, x1, #0xfffffffffff00000
0x4cd0c958  1400  ldr x0, [x4, #104]
0x4cd0c95c  1404  subs x0, x0, #0x1 (1)
0x4cd0c960  1408  str x0, [x4, #104]
0x4cd0c964  1412  b.mi #+0x84 (addr 0x4cd0c9e8)
0x4cd0c968  1416  ubfx x16, x1, #8, #12
0x4cd0c96c  1420  and x4, x1, #0xfffffffffff00000
0x4cd0c970  1424  add x4, x4, x16, lsl #2
0x4cd0c974  1428  ubfx x0, x1, #3, #5
0x4cd0c978  1432  ldr x4, [x4, #360]
0x4cd0c97c  1436  lsr x4, x4, x0
0x4cd0c980  1440  tbz w4, #0, #+0x8 (addr 0x4cd0c988)
0x4cd0c984  1444  tbnz w4, #1, #+0xc (addr 0x4cd0c990)
0x4cd0c988  1448  ldp x2, x0, [jssp], #16
0x4cd0c98c  1452  ret
0x4cd0c990  1456  ldr x4, [x3]
0x4cd0c994  1460  and x0, x4, #0xfffffffffff00000
0x4cd0c998  1464  ldr x0, [x0, #8]
0x4cd0c99c  1468  tbz w0, #6, #+0x18 (addr 0x4cd0c9b4)
0x4cd0c9a0  1472  and x0, x1, #0xfffffffffff00000
0x4cd0c9a4  1476  ldr x0, [x0, #8]
0x4cd0c9a8  1480  movz x16, #0x58
0x4cd0c9ac  1484  tst x0, x16
0x4cd0c9b0  1488  b.eq #+0x38 (addr 0x4cd0c9e8)
0x4cd0c9b4  1492  sub csp, jssp, #0x10 (16)
0x4cd0c9b8  1496  stp x1, x3, [jssp, #-16]!
0x4cd0c9bc  1500  ubfx x16, x4, #8, #12
0x4cd0c9c0  1504  and x0, x4, #0xfffffffffff00000
0x4cd0c9c4  1508  add x0, x0, x16, lsl #2
0x4cd0c9c8  1512  ubfx x1, x4, #3, #5
0x4cd0c9cc  1516  ldr x3, [x0, #360]
0x4cd0c9d0  1520  lsr x3, x3, x1
0x4cd0c9d4  1524  tbz w3, #0, #+0x10 (addr 0x4cd0c9e4)
0x4cd0c9d8  1528  ldp x1, x3, [jssp], #16
0x4cd0c9dc  1532  ldp x2, x0, [jssp], #16
0x4cd0c9e0  1536  ret
0x4cd0c9e4  1540  ldp x1, x3, [jssp], #16
0x4cd0c9e8  1544  sub csp, jssp, #0x78 (120)
0x4cd0c9ec  1548  stp x14, x15, [jssp, #-32]!
0x4cd0c9f0  1552  stp x18, lr, [jssp, #16]
0x4cd0c9f4  1556  stp x10, x11, [jssp, #-32]!
0x4cd0c9f8  1560  stp x12, x13, [jssp, #16]
0x4cd0c9fc  1564  stp x6, x7, [jssp, #-32]!
0x4cd0ca00  1568  stp x8, x9, [jssp, #16]
0x4cd0ca04  1572  stp x1, x3, [jssp, #-24]!
0x4cd0ca08  1576  str x5, [jssp, #16]
0x4cd0ca0c  1580  sub csp, jssp, #0xb0 (176)
0x4cd0ca10  1584  stp d26, d27, [jssp, #-32]!
0x4cd0ca14  1588  stp d28, d29, [jssp, #16]
0x4cd0ca18  1592  stp d22, d23, [jssp, #-32]!
0x4cd0ca1c  1596  stp d24, d25, [jssp, #16]
0x4cd0ca20  1600  stp d18, d19, [jssp, #-32]!
0x4cd0ca24  1604  stp d20, d21, [jssp, #16]
0x4cd0ca28  1608  stp d6, d7, [jssp, #-32]!
0x4cd0ca2c  1612  stp d16, d17, [jssp, #16]
0x4cd0ca30  1616  stp d2, d3, [jssp, #-32]!
0x4cd0ca34  1620  stp d4, d5, [jssp, #16]
0x4cd0ca38  1624  stp d0, d1, [jssp, #-16]!
0x4cd0ca3c  1628  mov x0, x1
0x4cd0ca40  1632  mov x1, x3
0x4cd0ca44  1636  ldr x2, pc+268 (addr 0x000000004cd0cb50)    ;; external reference (isolate)
0x4cd0ca48  1640  ldr x16, pc+272 (addr 0x000000004cd0cb58)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0ca4c  1644  and csp, jssp, #0xfffffffffffffff0
0x4cd0ca50  1648  blr x16
0x4cd0ca54  1652  ldp d2, d3, [jssp, #16]
0x4cd0ca58  1656  ldp d0, d1, [jssp], #32
0x4cd0ca5c  1660  ldp d6, d7, [jssp, #16]
0x4cd0ca60  1664  ldp d4, d5, [jssp], #32
0x4cd0ca64  1668  ldp d18, d19, [jssp, #16]
0x4cd0ca68  1672  ldp d16, d17, [jssp], #32
0x4cd0ca6c  1676  ldp d22, d23, [jssp, #16]
0x4cd0ca70  1680  ldp d20, d21, [jssp], #32
0x4cd0ca74  1684  ldp d26, d27, [jssp, #16]
0x4cd0ca78  1688  ldp d24, d25, [jssp], #32
0x4cd0ca7c  1692  ldp d28, d29, [jssp], #16
0x4cd0ca80  1696  ldp x5, x6, [jssp, #16]
0x4cd0ca84  1700  ldp x1, x3, [jssp], #32
0x4cd0ca88  1704  ldp x9, x10, [jssp, #16]
0x4cd0ca8c  1708  ldp x7, x8, [jssp], #32
0x4cd0ca90  1712  ldp x13, x14, [jssp, #16]
0x4cd0ca94  1716  ldp x11, x12, [jssp], #32
0x4cd0ca98  1720  ldr lr, [jssp, #16]
0x4cd0ca9c  1724  ldp x15, x18, [jssp], #24
0x4cd0caa0  1728  ldp x2, x0, [jssp], #16
0x4cd0caa4  1732  ret
0x4cd0caa8  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd0caac  1740  d63f03e0       constant
0x4cd0cab0  1744  166dd8c0       constant
0x4cd0cab4  1748  00000000       constant
0x4cd0cab8  1752  4cd065a0       constant
0x4cd0cabc  1756  00000000       constant
0x4cd0cac0  1760  166dd8c0       constant
0x4cd0cac4  1764  00000000       constant
0x4cd0cac8  1768  4cd065a0       constant
0x4cd0cacc  1772  00000000       constant
0x4cd0cad0  1776  166dd8c0       constant
0x4cd0cad4  1780  00000000       constant
0x4cd0cad8  1784  4cd065a0       constant
0x4cd0cadc  1788  00000000       constant
0x4cd0cae0  1792  166dc2d0       constant
0x4cd0cae4  1796  00000000       constant
0x4cd0cae8  1800  00c2d958       constant
0x4cd0caec  1804  00000000       constant
0x4cd0caf0  1808  166dd8c0       constant
0x4cd0caf4  1812  00000000       constant
0x4cd0caf8  1816  4cd065a0       constant
0x4cd0cafc  1820  00000000       constant
0x4cd0cb00  1824  166dc2d0       constant
0x4cd0cb04  1828  00000000       constant
0x4cd0cb08  1832  00c2d958       constant
0x4cd0cb0c  1836  00000000       constant
0x4cd0cb10  1840  166dd8c0       constant
0x4cd0cb14  1844  00000000       constant
0x4cd0cb18  1848  4cd065a0       constant
0x4cd0cb1c  1852  00000000       constant
0x4cd0cb20  1856  166dd8c0       constant
0x4cd0cb24  1860  00000000       constant
0x4cd0cb28  1864  4cd065a0       constant
0x4cd0cb2c  1868  00000000       constant
0x4cd0cb30  1872  166dc2d0       constant
0x4cd0cb34  1876  00000000       constant
0x4cd0cb38  1880  00c2d958       constant
0x4cd0cb3c  1884  00000000       constant
0x4cd0cb40  1888  166dd8c0       constant
0x4cd0cb44  1892  00000000       constant
0x4cd0cb48  1896  4cd065a0       constant
0x4cd0cb4c  1900  00000000       constant
0x4cd0cb50  1904  166dc2d0       constant
0x4cd0cb54  1908  00000000       constant
0x4cd0cb58  1912  00c2d958       constant
0x4cd0cb5c  1916  00000000       constant


RelocInfo (size = 65)
0x4cd0c3e8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0c40c  code target (STUB)  (0x4cd065a0)
0x4cd0c484  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0c4a8  code target (STUB)  (0x4cd065a0)
0x4cd0c4e8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0c50c  code target (STUB)  (0x4cd065a0)
0x4cd0c57c  external reference (isolate)  (0x166dc2d0)
0x4cd0c580  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0c5dc  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0c600  code target (STUB)  (0x4cd065a0)
0x4cd0c6e0  external reference (isolate)  (0x166dc2d0)
0x4cd0c6e4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0c7a8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0c7cc  code target (STUB)  (0x4cd065a0)
0x4cd0c82c  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0c850  code target (STUB)  (0x4cd065a0)
0x4cd0c8c0  external reference (isolate)  (0x166dc2d0)
0x4cd0c8c4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0c920  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0c944  code target (STUB)  (0x4cd065a0)
0x4cd0ca44  external reference (isolate)  (0x166dc2d0)
0x4cd0ca48  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0caa8  constant pool (size 184)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = CreateAllocationSiteStub
compiler = crankshaft
Instructions (size = 477)
0x4cd0cbc0     0  movz x1, #0xb840
0x4cd0cbc4     4  movk x1, #0x1670, lsl #16
0x4cd0cbc8     8  ldp x4, x0, [x1]
0x4cd0cbcc    12  adds x16, x4, #0x38 (56)
0x4cd0cbd0    16  ccmp x16, x0, #nzCv, lo
0x4cd0cbd4    20  b.hi #+0x104 (addr 0x4cd0ccd8)
0x4cd0cbd8    24  str x16, [x1]
0x4cd0cbdc    28  orr x4, x4, #0x1
0x4cd0cbe0    32  ldr x0, pc+360 (addr 0x000000004cd0cd48)    ;; object: 0x2a805d29 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd0cbe4    36  stur x0, [x4, #-1]
0x4cd0cbe8    40  sub x1, x4, #0x1 (1)
0x4cd0cbec    44  and x0, x0, #0xfffffffffff00000
0x4cd0cbf0    48  ldr x0, [x0, #8]
0x4cd0cbf4    52  tbz w0, #1, #+0x24 (addr 0x4cd0cc18)
0x4cd0cbf8    56  and x0, x4, #0xfffffffffff00000
0x4cd0cbfc    60  ldr x0, [x0, #8]
0x4cd0cc00    64  tbz w0, #2, #+0x18 (addr 0x4cd0cc18)
0x4cd0cc04    68  sub csp, jssp, #0x8 (8)
0x4cd0cc08    72  str lr, [jssp, #-8]!
0x4cd0cc0c    76  ldr x16, pc+324 (addr 0x000000004cd0cd50)    ;; code: STUB, RecordWriteStub, minor: 66564
0x4cd0cc10    80  blr x16
0x4cd0cc14    84  ldr lr, [jssp], #8
0x4cd0cc18    88  movz x0, #0x0
0x4cd0cc1c    92  stur x0, [x4, #7]
0x4cd0cc20    96  movz x0, #0x0
0x4cd0cc24   100  stur x0, [x4, #15]
0x4cd0cc28   104  movz x0, #0x0
0x4cd0cc2c   108  stur x0, [x4, #23]
0x4cd0cc30   112  movz x0, #0x0
0x4cd0cc34   116  stur x0, [x4, #31]
0x4cd0cc38   120  ldr x0, pc+288 (addr 0x000000004cd0cd58)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0cc3c   124  stur x0, [x4, #39]
0x4cd0cc40   128  movz x0, #0xd748
0x4cd0cc44   132  movk x0, #0x166d, lsl #16
0x4cd0cc48   136  ldr x1, [x0]
0x4cd0cc4c   140  stur x1, [x4, #47]
0x4cd0cc50   144  tbz w1, #0, #+0x34 (addr 0x4cd0cc84)
0x4cd0cc54   148  add x5, x4, #0x2f (47)
0x4cd0cc58   152  and x1, x1, #0xfffffffffff00000
0x4cd0cc5c   156  ldr x1, [x1, #8]
0x4cd0cc60   160  tbz w1, #1, #+0x24 (addr 0x4cd0cc84)
0x4cd0cc64   164  and x1, x4, #0xfffffffffff00000
0x4cd0cc68   168  ldr x1, [x1, #8]
0x4cd0cc6c   172  tbz w1, #2, #+0x18 (addr 0x4cd0cc84)
0x4cd0cc70   176  sub csp, jssp, #0x8 (8)
0x4cd0cc74   180  str lr, [jssp, #-8]!
0x4cd0cc78   184  ldr x16, pc+232 (addr 0x000000004cd0cd60)    ;; code: STUB, RecordWriteStub, minor: 70692
0x4cd0cc7c   188  blr x16
0x4cd0cc80   192  ldr lr, [jssp], #8
0x4cd0cc84   196  movz x1, #0xd748
0x4cd0cc88   200  movk x1, #0x166d, lsl #16
0x4cd0cc8c   204  str x4, [x0]
0x4cd0cc90   208  asr x0, x3, #32
0x4cd0cc94   212  mov x1, x2
0x4cd0cc98   216  add x3, x1, #0xf (15)
0x4cd0cc9c   220  str x4, [x3, w0, sxtw #3]
0x4cd0cca0   224  add x3, x3, w0, sxtw #3
0x4cd0cca4   228  and x4, x4, #0xfffffffffff00000
0x4cd0cca8   232  ldr x4, [x4, #8]
0x4cd0ccac   236  tbz w4, #1, #+0x24 (addr 0x4cd0ccd0)
0x4cd0ccb0   240  and x4, x1, #0xfffffffffff00000
0x4cd0ccb4   244  ldr x4, [x4, #8]
0x4cd0ccb8   248  tbz w4, #2, #+0x18 (addr 0x4cd0ccd0)
0x4cd0ccbc   252  sub csp, jssp, #0x8 (8)
0x4cd0ccc0   256  str lr, [jssp, #-8]!
0x4cd0ccc4   260  ldr x16, pc+164 (addr 0x000000004cd0cd68)    ;; code: STUB, RecordWriteStub, minor: 68737
0x4cd0ccc8   264  blr x16
0x4cd0cccc   268  ldr lr, [jssp], #8
0x4cd0ccd0   272  mov x0, x2
0x4cd0ccd4   276  ret
0x4cd0ccd8   280  sub csp, jssp, #0x10 (16)
0x4cd0ccdc   284  stp fp, lr, [jssp, #-16]!
0x4cd0cce0   288  movz fp, #0xa00000000
0x4cd0cce4   292  sub csp, jssp, #0x8 (8)
0x4cd0cce8   296  str fp, [jssp, #-8]!
0x4cd0ccec   300  add fp, jssp, #0x8 (8)
0x4cd0ccf0   304  movz x4, #0x0
0x4cd0ccf4   308  mov x16, lr
0x4cd0ccf8   312  ldr x17, pc+120 (addr 0x000000004cd0cd70)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0ccfc   316  blr x17
0x4cd0cd00   320  movz x0, #0x3800000000
0x4cd0cd04   324  movz x10, #0x200000000
0x4cd0cd08   328  sub csp, jssp, #0x10 (16)
0x4cd0cd0c   332  stp x10, x0, [jssp, #-16]!
0x4cd0cd10   336  movz x0, #0x2
0x4cd0cd14   340  movz x1, #0x5b88
0x4cd0cd18   344  movk x1, #0xe2, lsl #16
0x4cd0cd1c   348  ldr x16, pc+92 (addr 0x000000004cd0cd78)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0cd20   352  blr x16
0x4cd0cd24   356  str x0, [jssp, #32]
0x4cd0cd28   360  ldr x16, pc+88 (addr 0x000000004cd0cd80)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0cd2c   364  blr x16
0x4cd0cd30   368  ldr lr, [jssp, #16]
0x4cd0cd34   372  ldp xzr, fp, [jssp], #24
0x4cd0cd38   376  b #-0x158 (addr 0x4cd0cbe0)
0x4cd0cd3c   380  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0x4cd0cd40   384  d63f03e0       constant
0x4cd0cd44   388  d503201f       constant
0x4cd0cd48   392  2a805d29       constant
0x4cd0cd4c   396  00000000       constant
0x4cd0cd50   400  4cd0b420       constant
0x4cd0cd54   404  00000000       constant
0x4cd0cd58   408  21004201       constant
0x4cd0cd5c   412  00000000       constant
0x4cd0cd60   416  4cd0bc00       constant
0x4cd0cd64   420  00000000       constant
0x4cd0cd68   424  4cd0c3e0       constant
0x4cd0cd6c   428  00000000       constant
0x4cd0cd70   432  4cd06820       constant
0x4cd0cd74   436  00000000       constant
0x4cd0cd78   440  4cd06260       constant
0x4cd0cd7c   444  00000000       constant
0x4cd0cd80   448  4cd068e0       constant
0x4cd0cd84   452  00000000       constant


Safepoints (size = 21)
0x4cd0cd24   356  000 | x2 | x4 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 18)
0x4cd0cbe0  embedded object  (0x2a805d29 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd0cc0c  code target (STUB)  (0x4cd0b420)
0x4cd0cc38  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0cc78  code target (STUB)  (0x4cd0bc00)
0x4cd0ccc4  code target (STUB)  (0x4cd0c3e0)
0x4cd0ccf8  code target (STUB)  (0x4cd06820)
0x4cd0cd1c  code target (STUB)  (0x4cd06260)
0x4cd0cd28  code target (STUB)  (0x4cd068e0)
0x4cd0cd3c  constant pool (size 76)

--- End code ---
kind = STUB
major_key = CreateAllocationSiteStub
name = CreateAllocationSiteStub
compiler = crankshaft
Instructions (size = 477)
0x4cd0cbc0     0  movz x1, #0xb840
0x4cd0cbc4     4  movk x1, #0x1670, lsl #16
0x4cd0cbc8     8  ldp x4, x0, [x1]
0x4cd0cbcc    12  adds x16, x4, #0x38 (56)
0x4cd0cbd0    16  ccmp x16, x0, #nzCv, lo
0x4cd0cbd4    20  b.hi #+0x104 (addr 0x4cd0ccd8)
0x4cd0cbd8    24  str x16, [x1]
0x4cd0cbdc    28  orr x4, x4, #0x1
0x4cd0cbe0    32  ldr x0, pc+360 (addr 0x000000004cd0cd48)    ;; object: 0x2a805d29 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd0cbe4    36  stur x0, [x4, #-1]
0x4cd0cbe8    40  sub x1, x4, #0x1 (1)
0x4cd0cbec    44  and x0, x0, #0xfffffffffff00000
0x4cd0cbf0    48  ldr x0, [x0, #8]
0x4cd0cbf4    52  tbz w0, #1, #+0x24 (addr 0x4cd0cc18)
0x4cd0cbf8    56  and x0, x4, #0xfffffffffff00000
0x4cd0cbfc    60  ldr x0, [x0, #8]
0x4cd0cc00    64  tbz w0, #2, #+0x18 (addr 0x4cd0cc18)
0x4cd0cc04    68  sub csp, jssp, #0x8 (8)
0x4cd0cc08    72  str lr, [jssp, #-8]!
0x4cd0cc0c    76  ldr x16, pc+324 (addr 0x000000004cd0cd50)    ;; code: STUB, RecordWriteStub, minor: 66564
0x4cd0cc10    80  blr x16
0x4cd0cc14    84  ldr lr, [jssp], #8
0x4cd0cc18    88  movz x0, #0x0
0x4cd0cc1c    92  stur x0, [x4, #7]
0x4cd0cc20    96  movz x0, #0x0
0x4cd0cc24   100  stur x0, [x4, #15]
0x4cd0cc28   104  movz x0, #0x0
0x4cd0cc2c   108  stur x0, [x4, #23]
0x4cd0cc30   112  movz x0, #0x0
0x4cd0cc34   116  stur x0, [x4, #31]
0x4cd0cc38   120  ldr x0, pc+288 (addr 0x000000004cd0cd58)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd0cc3c   124  stur x0, [x4, #39]
0x4cd0cc40   128  movz x0, #0xd748
0x4cd0cc44   132  movk x0, #0x166d, lsl #16
0x4cd0cc48   136  ldr x1, [x0]
0x4cd0cc4c   140  stur x1, [x4, #47]
0x4cd0cc50   144  tbz w1, #0, #+0x34 (addr 0x4cd0cc84)
0x4cd0cc54   148  add x5, x4, #0x2f (47)
0x4cd0cc58   152  and x1, x1, #0xfffffffffff00000
0x4cd0cc5c   156  ldr x1, [x1, #8]
0x4cd0cc60   160  tbz w1, #1, #+0x24 (addr 0x4cd0cc84)
0x4cd0cc64   164  and x1, x4, #0xfffffffffff00000
0x4cd0cc68   168  ldr x1, [x1, #8]
0x4cd0cc6c   172  tbz w1, #2, #+0x18 (addr 0x4cd0cc84)
0x4cd0cc70   176  sub csp, jssp, #0x8 (8)
0x4cd0cc74   180  str lr, [jssp, #-8]!
0x4cd0cc78   184  ldr x16, pc+232 (addr 0x000000004cd0cd60)    ;; code: STUB, RecordWriteStub, minor: 70692
0x4cd0cc7c   188  blr x16
0x4cd0cc80   192  ldr lr, [jssp], #8
0x4cd0cc84   196  movz x1, #0xd748
0x4cd0cc88   200  movk x1, #0x166d, lsl #16
0x4cd0cc8c   204  str x4, [x0]
0x4cd0cc90   208  asr x0, x3, #32
0x4cd0cc94   212  mov x1, x2
0x4cd0cc98   216  add x3, x1, #0xf (15)
0x4cd0cc9c   220  str x4, [x3, w0, sxtw #3]
0x4cd0cca0   224  add x3, x3, w0, sxtw #3
0x4cd0cca4   228  and x4, x4, #0xfffffffffff00000
0x4cd0cca8   232  ldr x4, [x4, #8]
0x4cd0ccac   236  tbz w4, #1, #+0x24 (addr 0x4cd0ccd0)
0x4cd0ccb0   240  and x4, x1, #0xfffffffffff00000
0x4cd0ccb4   244  ldr x4, [x4, #8]
0x4cd0ccb8   248  tbz w4, #2, #+0x18 (addr 0x4cd0ccd0)
0x4cd0ccbc   252  sub csp, jssp, #0x8 (8)
0x4cd0ccc0   256  str lr, [jssp, #-8]!
0x4cd0ccc4   260  ldr x16, pc+164 (addr 0x000000004cd0cd68)    ;; code: STUB, RecordWriteStub, minor: 68737
0x4cd0ccc8   264  blr x16
0x4cd0cccc   268  ldr lr, [jssp], #8
0x4cd0ccd0   272  mov x0, x2
0x4cd0ccd4   276  ret
0x4cd0ccd8   280  sub csp, jssp, #0x10 (16)
0x4cd0ccdc   284  stp fp, lr, [jssp, #-16]!
0x4cd0cce0   288  movz fp, #0xa00000000
0x4cd0cce4   292  sub csp, jssp, #0x8 (8)
0x4cd0cce8   296  str fp, [jssp, #-8]!
0x4cd0ccec   300  add fp, jssp, #0x8 (8)
0x4cd0ccf0   304  movz x4, #0x0
0x4cd0ccf4   308  mov x16, lr
0x4cd0ccf8   312  ldr x17, pc+120 (addr 0x000000004cd0cd70)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0ccfc   316  blr x17
0x4cd0cd00   320  movz x0, #0x3800000000
0x4cd0cd04   324  movz x10, #0x200000000
0x4cd0cd08   328  sub csp, jssp, #0x10 (16)
0x4cd0cd0c   332  stp x10, x0, [jssp, #-16]!
0x4cd0cd10   336  movz x0, #0x2
0x4cd0cd14   340  movz x1, #0x5b88
0x4cd0cd18   344  movk x1, #0xe2, lsl #16
0x4cd0cd1c   348  ldr x16, pc+92 (addr 0x000000004cd0cd78)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0cd20   352  blr x16
0x4cd0cd24   356  str x0, [jssp, #32]
0x4cd0cd28   360  ldr x16, pc+88 (addr 0x000000004cd0cd80)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0cd2c   364  blr x16
0x4cd0cd30   368  ldr lr, [jssp, #16]
0x4cd0cd34   372  ldp xzr, fp, [jssp], #24
0x4cd0cd38   376  b #-0x158 (addr 0x4cd0cbe0)
0x4cd0cd3c   380  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0x4cd0cd40   384  d63f03e0       constant
0x4cd0cd44   388  d503201f       constant
0x4cd0cd48   392  2a805d29       constant
0x4cd0cd4c   396  00000000       constant
0x4cd0cd50   400  4cd0b420       constant
0x4cd0cd54   404  00000000       constant
0x4cd0cd58   408  21004201       constant
0x4cd0cd5c   412  00000000       constant
0x4cd0cd60   416  4cd0bc00       constant
0x4cd0cd64   420  00000000       constant
0x4cd0cd68   424  4cd0c3e0       constant
0x4cd0cd6c   428  00000000       constant
0x4cd0cd70   432  4cd06820       constant
0x4cd0cd74   436  00000000       constant
0x4cd0cd78   440  4cd06260       constant
0x4cd0cd7c   444  00000000       constant
0x4cd0cd80   448  4cd068e0       constant
0x4cd0cd84   452  00000000       constant


Safepoints (size = 21)
0x4cd0cd24   356  000 | x2 | x4 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 18)
0x4cd0cbe0  embedded object  (0x2a805d29 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd0cc0c  code target (STUB)  (0x4cd0b420)
0x4cd0cc38  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd0cc78  code target (STUB)  (0x4cd0bc00)
0x4cd0ccc4  code target (STUB)  (0x4cd0c3e0)
0x4cd0ccf8  code target (STUB)  (0x4cd06820)
0x4cd0cd1c  code target (STUB)  (0x4cd06260)
0x4cd0cd28  code target (STUB)  (0x4cd068e0)
0x4cd0cd3c  constant pool (size 76)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0x4cd0ce00     0  adr xzr, #+0x40 (addr 0x4cd0ce40)
0x4cd0ce04     4  adr xzr, #+0x360 (addr 0x4cd0d164)
0x4cd0ce08     8  ldr x16, pc+1736 (addr 0x000000004cd0d4d0)    ;; external reference (store_buffer_top)
0x4cd0ce0c    12  ldr x1, [x16]
0x4cd0ce10    16  str x0, [x1], #8
0x4cd0ce14    20  str x1, [x16]
0x4cd0ce18    24  tst x1, #0x1ffff
0x4cd0ce1c    28  b.eq #+0x8 (addr 0x4cd0ce24)
0x4cd0ce20    32  ret
0x4cd0ce24    36  sub csp, jssp, #0x8 (8)
0x4cd0ce28    40  str lr, [jssp, #-8]!
0x4cd0ce2c    44  ldr x17, pc+1708 (addr 0x000000004cd0d4d8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0ce30    48  blr x17
0x4cd0ce34    52  ldr lr, [jssp], #8
0x4cd0ce38    56  ret
0x4cd0ce3c    60  ret
0x4cd0ce40    64  sub csp, jssp, #0x10 (16)
0x4cd0ce44    68  stp x3, x2, [jssp, #-16]!
0x4cd0ce48    72  ldr x1, [x0]
0x4cd0ce4c    76  and x16, x1, #0xfffffffffff00000
0x4cd0ce50    80  ldr x16, [x16, #8]
0x4cd0ce54    84  tst x16, #0x18
0x4cd0ce58    88  b.eq #+0x1d8 (addr 0x4cd0d030)
0x4cd0ce5c    92  and x16, x5, #0xfffffffffff00000
0x4cd0ce60    96  ldr x16, [x16, #8]
0x4cd0ce64   100  tst x16, #0x18
0x4cd0ce68   104  b.ne #+0x1c8 (addr 0x4cd0d030)
0x4cd0ce6c   108  and x1, x5, #0xfffffffffff00000
0x4cd0ce70   112  ldr x2, [x1, #104]
0x4cd0ce74   116  subs x2, x2, #0x1 (1)
0x4cd0ce78   120  str x2, [x1, #104]
0x4cd0ce7c   124  b.mi #+0xc4 (addr 0x4cd0cf40)
0x4cd0ce80   128  ubfx x16, x5, #8, #12
0x4cd0ce84   132  and x1, x5, #0xfffffffffff00000
0x4cd0ce88   136  add x1, x1, x16, lsl #2
0x4cd0ce8c   140  ubfx x2, x5, #3, #5
0x4cd0ce90   144  ldr x1, [x1, #360]
0x4cd0ce94   148  lsr x1, x1, x2
0x4cd0ce98   152  tbz w1, #0, #+0x8 (addr 0x4cd0cea0)
0x4cd0ce9c   156  tbnz w1, #1, #+0x3c (addr 0x4cd0ced8)
0x4cd0cea0   160  ldp x3, x2, [jssp], #16
0x4cd0cea4   164  ldr x16, pc+1596 (addr 0x000000004cd0d4e0)    ;; external reference (store_buffer_top)
0x4cd0cea8   168  ldr x1, [x16]
0x4cd0ceac   172  str x0, [x1], #8
0x4cd0ceb0   176  str x1, [x16]
0x4cd0ceb4   180  tst x1, #0x1ffff
0x4cd0ceb8   184  b.eq #+0x8 (addr 0x4cd0cec0)
0x4cd0cebc   188  ret
0x4cd0cec0   192  sub csp, jssp, #0x8 (8)
0x4cd0cec4   196  str lr, [jssp, #-8]!
0x4cd0cec8   200  ldr x17, pc+1568 (addr 0x000000004cd0d4e8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0cecc   204  blr x17
0x4cd0ced0   208  ldr lr, [jssp], #8
0x4cd0ced4   212  ret
0x4cd0ced8   216  ldr x1, [x0]
0x4cd0cedc   220  sub csp, jssp, #0x10 (16)
0x4cd0cee0   224  stp x5, x0, [jssp, #-16]!
0x4cd0cee4   228  ubfx x16, x1, #8, #12
0x4cd0cee8   232  and x2, x1, #0xfffffffffff00000
0x4cd0ceec   236  add x2, x2, x16, lsl #2
0x4cd0cef0   240  ubfx x5, x1, #3, #5
0x4cd0cef4   244  ldr x0, [x2, #360]
0x4cd0cef8   248  lsr x0, x0, x5
0x4cd0cefc   252  tbz w0, #0, #+0x40 (addr 0x4cd0cf3c)
0x4cd0cf00   256  ldp x5, x0, [jssp], #16
0x4cd0cf04   260  ldp x3, x2, [jssp], #16
0x4cd0cf08   264  ldr x16, pc+1512 (addr 0x000000004cd0d4f0)    ;; external reference (store_buffer_top)
0x4cd0cf0c   268  ldr x1, [x16]
0x4cd0cf10   272  str x0, [x1], #8
0x4cd0cf14   276  str x1, [x16]
0x4cd0cf18   280  tst x1, #0x1ffff
0x4cd0cf1c   284  b.eq #+0x8 (addr 0x4cd0cf24)
0x4cd0cf20   288  ret
0x4cd0cf24   292  sub csp, jssp, #0x8 (8)
0x4cd0cf28   296  str lr, [jssp, #-8]!
0x4cd0cf2c   300  ldr x17, pc+1484 (addr 0x000000004cd0d4f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0cf30   304  blr x17
0x4cd0cf34   308  ldr lr, [jssp], #8
0x4cd0cf38   312  ret
0x4cd0cf3c   316  ldp x5, x0, [jssp], #16
0x4cd0cf40   320  sub csp, jssp, #0x78 (120)
0x4cd0cf44   324  stp x14, x15, [jssp, #-32]!
0x4cd0cf48   328  stp x18, lr, [jssp, #16]
0x4cd0cf4c   332  stp x10, x11, [jssp, #-32]!
0x4cd0cf50   336  stp x12, x13, [jssp, #16]
0x4cd0cf54   340  stp x6, x7, [jssp, #-32]!
0x4cd0cf58   344  stp x8, x9, [jssp, #16]
0x4cd0cf5c   348  stp x0, x4, [jssp, #-24]!
0x4cd0cf60   352  str x5, [jssp, #16]
0x4cd0cf64   356  sub csp, jssp, #0xb0 (176)
0x4cd0cf68   360  stp d26, d27, [jssp, #-32]!
0x4cd0cf6c   364  stp d28, d29, [jssp, #16]
0x4cd0cf70   368  stp d22, d23, [jssp, #-32]!
0x4cd0cf74   372  stp d24, d25, [jssp, #16]
0x4cd0cf78   376  stp d18, d19, [jssp, #-32]!
0x4cd0cf7c   380  stp d20, d21, [jssp, #16]
0x4cd0cf80   384  stp d6, d7, [jssp, #-32]!
0x4cd0cf84   388  stp d16, d17, [jssp, #16]
0x4cd0cf88   392  stp d2, d3, [jssp, #-32]!
0x4cd0cf8c   396  stp d4, d5, [jssp, #16]
0x4cd0cf90   400  stp d0, d1, [jssp, #-16]!
0x4cd0cf94   404  mov x1, x0
0x4cd0cf98   408  mov x0, x5
0x4cd0cf9c   412  ldr x2, pc+1380 (addr 0x000000004cd0d500)    ;; external reference (isolate)
0x4cd0cfa0   416  ldr x16, pc+1384 (addr 0x000000004cd0d508)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0cfa4   420  and csp, jssp, #0xfffffffffffffff0
0x4cd0cfa8   424  blr x16
0x4cd0cfac   428  ldp d2, d3, [jssp, #16]
0x4cd0cfb0   432  ldp d0, d1, [jssp], #32
0x4cd0cfb4   436  ldp d6, d7, [jssp, #16]
0x4cd0cfb8   440  ldp d4, d5, [jssp], #32
0x4cd0cfbc   444  ldp d18, d19, [jssp, #16]
0x4cd0cfc0   448  ldp d16, d17, [jssp], #32
0x4cd0cfc4   452  ldp d22, d23, [jssp, #16]
0x4cd0cfc8   456  ldp d20, d21, [jssp], #32
0x4cd0cfcc   460  ldp d26, d27, [jssp, #16]
0x4cd0cfd0   464  ldp d24, d25, [jssp], #32
0x4cd0cfd4   468  ldp d28, d29, [jssp], #16
0x4cd0cfd8   472  ldp x5, x6, [jssp, #16]
0x4cd0cfdc   476  ldp x0, x4, [jssp], #32
0x4cd0cfe0   480  ldp x9, x10, [jssp, #16]
0x4cd0cfe4   484  ldp x7, x8, [jssp], #32
0x4cd0cfe8   488  ldp x13, x14, [jssp, #16]
0x4cd0cfec   492  ldp x11, x12, [jssp], #32
0x4cd0cff0   496  ldr lr, [jssp, #16]
0x4cd0cff4   500  ldp x15, x18, [jssp], #24
0x4cd0cff8   504  ldp x3, x2, [jssp], #16
0x4cd0cffc   508  ldr x16, pc+1300 (addr 0x000000004cd0d510)    ;; external reference (store_buffer_top)
0x4cd0d000   512  ldr x1, [x16]
0x4cd0d004   516  str x0, [x1], #8
0x4cd0d008   520  str x1, [x16]
0x4cd0d00c   524  tst x1, #0x1ffff
0x4cd0d010   528  b.eq #+0x8 (addr 0x4cd0d018)
0x4cd0d014   532  ret
0x4cd0d018   536  sub csp, jssp, #0x8 (8)
0x4cd0d01c   540  str lr, [jssp, #-8]!
0x4cd0d020   544  ldr x17, pc+1272 (addr 0x000000004cd0d518)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0d024   548  blr x17
0x4cd0d028   552  ldr lr, [jssp], #8
0x4cd0d02c   556  ret
0x4cd0d030   560  and x1, x5, #0xfffffffffff00000
0x4cd0d034   564  ldr x2, [x1, #104]
0x4cd0d038   568  subs x2, x2, #0x1 (1)
0x4cd0d03c   572  str x2, [x1, #104]
0x4cd0d040   576  b.mi #+0x64 (addr 0x4cd0d0a4)
0x4cd0d044   580  ubfx x16, x5, #8, #12
0x4cd0d048   584  and x1, x5, #0xfffffffffff00000
0x4cd0d04c   588  add x1, x1, x16, lsl #2
0x4cd0d050   592  ubfx x2, x5, #3, #5
0x4cd0d054   596  ldr x1, [x1, #360]
0x4cd0d058   600  lsr x1, x1, x2
0x4cd0d05c   604  tbz w1, #0, #+0x8 (addr 0x4cd0d064)
0x4cd0d060   608  tbnz w1, #1, #+0xc (addr 0x4cd0d06c)
0x4cd0d064   612  ldp x3, x2, [jssp], #16
0x4cd0d068   616  ret
0x4cd0d06c   620  ldr x1, [x0]
0x4cd0d070   624  sub csp, jssp, #0x10 (16)
0x4cd0d074   628  stp x5, x0, [jssp, #-16]!
0x4cd0d078   632  ubfx x16, x1, #8, #12
0x4cd0d07c   636  and x2, x1, #0xfffffffffff00000
0x4cd0d080   640  add x2, x2, x16, lsl #2
0x4cd0d084   644  ubfx x5, x1, #3, #5
0x4cd0d088   648  ldr x0, [x2, #360]
0x4cd0d08c   652  lsr x0, x0, x5
0x4cd0d090   656  tbz w0, #0, #+0x10 (addr 0x4cd0d0a0)
0x4cd0d094   660  ldp x5, x0, [jssp], #16
0x4cd0d098   664  ldp x3, x2, [jssp], #16
0x4cd0d09c   668  ret
0x4cd0d0a0   672  ldp x5, x0, [jssp], #16
0x4cd0d0a4   676  sub csp, jssp, #0x78 (120)
0x4cd0d0a8   680  stp x14, x15, [jssp, #-32]!
0x4cd0d0ac   684  stp x18, lr, [jssp, #16]
0x4cd0d0b0   688  stp x10, x11, [jssp, #-32]!
0x4cd0d0b4   692  stp x12, x13, [jssp, #16]
0x4cd0d0b8   696  stp x6, x7, [jssp, #-32]!
0x4cd0d0bc   700  stp x8, x9, [jssp, #16]
0x4cd0d0c0   704  stp x0, x4, [jssp, #-24]!
0x4cd0d0c4   708  str x5, [jssp, #16]
0x4cd0d0c8   712  sub csp, jssp, #0xb0 (176)
0x4cd0d0cc   716  stp d26, d27, [jssp, #-32]!
0x4cd0d0d0   720  stp d28, d29, [jssp, #16]
0x4cd0d0d4   724  stp d22, d23, [jssp, #-32]!
0x4cd0d0d8   728  stp d24, d25, [jssp, #16]
0x4cd0d0dc   732  stp d18, d19, [jssp, #-32]!
0x4cd0d0e0   736  stp d20, d21, [jssp, #16]
0x4cd0d0e4   740  stp d6, d7, [jssp, #-32]!
0x4cd0d0e8   744  stp d16, d17, [jssp, #16]
0x4cd0d0ec   748  stp d2, d3, [jssp, #-32]!
0x4cd0d0f0   752  stp d4, d5, [jssp, #16]
0x4cd0d0f4   756  stp d0, d1, [jssp, #-16]!
0x4cd0d0f8   760  mov x1, x0
0x4cd0d0fc   764  mov x0, x5
0x4cd0d100   768  ldr x2, pc+1056 (addr 0x000000004cd0d520)    ;; external reference (isolate)
0x4cd0d104   772  ldr x16, pc+1060 (addr 0x000000004cd0d528)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0d108   776  and csp, jssp, #0xfffffffffffffff0
0x4cd0d10c   780  blr x16
0x4cd0d110   784  ldp d2, d3, [jssp, #16]
0x4cd0d114   788  ldp d0, d1, [jssp], #32
0x4cd0d118   792  ldp d6, d7, [jssp, #16]
0x4cd0d11c   796  ldp d4, d5, [jssp], #32
0x4cd0d120   800  ldp d18, d19, [jssp, #16]
0x4cd0d124   804  ldp d16, d17, [jssp], #32
0x4cd0d128   808  ldp d22, d23, [jssp, #16]
0x4cd0d12c   812  ldp d20, d21, [jssp], #32
0x4cd0d130   816  ldp d26, d27, [jssp, #16]
0x4cd0d134   820  ldp d24, d25, [jssp], #32
0x4cd0d138   824  ldp d28, d29, [jssp], #16
0x4cd0d13c   828  ldp x5, x6, [jssp, #16]
0x4cd0d140   832  ldp x0, x4, [jssp], #32
0x4cd0d144   836  ldp x9, x10, [jssp, #16]
0x4cd0d148   840  ldp x7, x8, [jssp], #32
0x4cd0d14c   844  ldp x13, x14, [jssp, #16]
0x4cd0d150   848  ldp x11, x12, [jssp], #32
0x4cd0d154   852  ldr lr, [jssp, #16]
0x4cd0d158   856  ldp x15, x18, [jssp], #24
0x4cd0d15c   860  ldp x3, x2, [jssp], #16
0x4cd0d160   864  ret
0x4cd0d164   868  sub csp, jssp, #0x10 (16)
0x4cd0d168   872  stp x3, x2, [jssp, #-16]!
0x4cd0d16c   876  ldr x1, [x0]
0x4cd0d170   880  and x16, x1, #0xfffffffffff00000
0x4cd0d174   884  ldr x16, [x16, #8]
0x4cd0d178   888  tst x16, #0x18
0x4cd0d17c   892  b.eq #+0x1f8 (addr 0x4cd0d374)
0x4cd0d180   896  and x16, x5, #0xfffffffffff00000
0x4cd0d184   900  ldr x16, [x16, #8]
0x4cd0d188   904  tst x16, #0x18
0x4cd0d18c   908  b.ne #+0x1e8 (addr 0x4cd0d374)
0x4cd0d190   912  and x1, x5, #0xfffffffffff00000
0x4cd0d194   916  ldr x2, [x1, #104]
0x4cd0d198   920  subs x2, x2, #0x1 (1)
0x4cd0d19c   924  str x2, [x1, #104]
0x4cd0d1a0   928  b.mi #+0xe4 (addr 0x4cd0d284)
0x4cd0d1a4   932  ubfx x16, x5, #8, #12
0x4cd0d1a8   936  and x1, x5, #0xfffffffffff00000
0x4cd0d1ac   940  add x1, x1, x16, lsl #2
0x4cd0d1b0   944  ubfx x2, x5, #3, #5
0x4cd0d1b4   948  ldr x1, [x1, #360]
0x4cd0d1b8   952  lsr x1, x1, x2
0x4cd0d1bc   956  tbz w1, #0, #+0x8 (addr 0x4cd0d1c4)
0x4cd0d1c0   960  tbnz w1, #1, #+0x3c (addr 0x4cd0d1fc)
0x4cd0d1c4   964  ldp x3, x2, [jssp], #16
0x4cd0d1c8   968  ldr x16, pc+872 (addr 0x000000004cd0d530)    ;; external reference (store_buffer_top)
0x4cd0d1cc   972  ldr x1, [x16]
0x4cd0d1d0   976  str x0, [x1], #8
0x4cd0d1d4   980  str x1, [x16]
0x4cd0d1d8   984  tst x1, #0x1ffff
0x4cd0d1dc   988  b.eq #+0x8 (addr 0x4cd0d1e4)
0x4cd0d1e0   992  ret
0x4cd0d1e4   996  sub csp, jssp, #0x8 (8)
0x4cd0d1e8  1000  str lr, [jssp, #-8]!
0x4cd0d1ec  1004  ldr x17, pc+844 (addr 0x000000004cd0d538)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0d1f0  1008  blr x17
0x4cd0d1f4  1012  ldr lr, [jssp], #8
0x4cd0d1f8  1016  ret
0x4cd0d1fc  1020  ldr x1, [x0]
0x4cd0d200  1024  and x2, x1, #0xfffffffffff00000
0x4cd0d204  1028  ldr x2, [x2, #8]
0x4cd0d208  1032  tbz w2, #6, #+0x18 (addr 0x4cd0d220)
0x4cd0d20c  1036  and x2, x5, #0xfffffffffff00000
0x4cd0d210  1040  ldr x2, [x2, #8]
0x4cd0d214  1044  movz x16, #0x58
0x4cd0d218  1048  tst x2, x16
0x4cd0d21c  1052  b.eq #+0x68 (addr 0x4cd0d284)
0x4cd0d220  1056  sub csp, jssp, #0x10 (16)
0x4cd0d224  1060  stp x5, x0, [jssp, #-16]!
0x4cd0d228  1064  ubfx x16, x1, #8, #12
0x4cd0d22c  1068  and x2, x1, #0xfffffffffff00000
0x4cd0d230  1072  add x2, x2, x16, lsl #2
0x4cd0d234  1076  ubfx x5, x1, #3, #5
0x4cd0d238  1080  ldr x0, [x2, #360]
0x4cd0d23c  1084  lsr x0, x0, x5
0x4cd0d240  1088  tbz w0, #0, #+0x40 (addr 0x4cd0d280)
0x4cd0d244  1092  ldp x5, x0, [jssp], #16
0x4cd0d248  1096  ldp x3, x2, [jssp], #16
0x4cd0d24c  1100  ldr x16, pc+756 (addr 0x000000004cd0d540)    ;; external reference (store_buffer_top)
0x4cd0d250  1104  ldr x1, [x16]
0x4cd0d254  1108  str x0, [x1], #8
0x4cd0d258  1112  str x1, [x16]
0x4cd0d25c  1116  tst x1, #0x1ffff
0x4cd0d260  1120  b.eq #+0x8 (addr 0x4cd0d268)
0x4cd0d264  1124  ret
0x4cd0d268  1128  sub csp, jssp, #0x8 (8)
0x4cd0d26c  1132  str lr, [jssp, #-8]!
0x4cd0d270  1136  ldr x17, pc+728 (addr 0x000000004cd0d548)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0d274  1140  blr x17
0x4cd0d278  1144  ldr lr, [jssp], #8
0x4cd0d27c  1148  ret
0x4cd0d280  1152  ldp x5, x0, [jssp], #16
0x4cd0d284  1156  sub csp, jssp, #0x78 (120)
0x4cd0d288  1160  stp x14, x15, [jssp, #-32]!
0x4cd0d28c  1164  stp x18, lr, [jssp, #16]
0x4cd0d290  1168  stp x10, x11, [jssp, #-32]!
0x4cd0d294  1172  stp x12, x13, [jssp, #16]
0x4cd0d298  1176  stp x6, x7, [jssp, #-32]!
0x4cd0d29c  1180  stp x8, x9, [jssp, #16]
0x4cd0d2a0  1184  stp x0, x4, [jssp, #-24]!
0x4cd0d2a4  1188  str x5, [jssp, #16]
0x4cd0d2a8  1192  sub csp, jssp, #0xb0 (176)
0x4cd0d2ac  1196  stp d26, d27, [jssp, #-32]!
0x4cd0d2b0  1200  stp d28, d29, [jssp, #16]
0x4cd0d2b4  1204  stp d22, d23, [jssp, #-32]!
0x4cd0d2b8  1208  stp d24, d25, [jssp, #16]
0x4cd0d2bc  1212  stp d18, d19, [jssp, #-32]!
0x4cd0d2c0  1216  stp d20, d21, [jssp, #16]
0x4cd0d2c4  1220  stp d6, d7, [jssp, #-32]!
0x4cd0d2c8  1224  stp d16, d17, [jssp, #16]
0x4cd0d2cc  1228  stp d2, d3, [jssp, #-32]!
0x4cd0d2d0  1232  stp d4, d5, [jssp, #16]
0x4cd0d2d4  1236  stp d0, d1, [jssp, #-16]!
0x4cd0d2d8  1240  mov x1, x0
0x4cd0d2dc  1244  mov x0, x5
0x4cd0d2e0  1248  ldr x2, pc+624 (addr 0x000000004cd0d550)    ;; external reference (isolate)
0x4cd0d2e4  1252  ldr x16, pc+628 (addr 0x000000004cd0d558)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0d2e8  1256  and csp, jssp, #0xfffffffffffffff0
0x4cd0d2ec  1260  blr x16
0x4cd0d2f0  1264  ldp d2, d3, [jssp, #16]
0x4cd0d2f4  1268  ldp d0, d1, [jssp], #32
0x4cd0d2f8  1272  ldp d6, d7, [jssp, #16]
0x4cd0d2fc  1276  ldp d4, d5, [jssp], #32
0x4cd0d300  1280  ldp d18, d19, [jssp, #16]
0x4cd0d304  1284  ldp d16, d17, [jssp], #32
0x4cd0d308  1288  ldp d22, d23, [jssp, #16]
0x4cd0d30c  1292  ldp d20, d21, [jssp], #32
0x4cd0d310  1296  ldp d26, d27, [jssp, #16]
0x4cd0d314  1300  ldp d24, d25, [jssp], #32
0x4cd0d318  1304  ldp d28, d29, [jssp], #16
0x4cd0d31c  1308  ldp x5, x6, [jssp, #16]
0x4cd0d320  1312  ldp x0, x4, [jssp], #32
0x4cd0d324  1316  ldp x9, x10, [jssp, #16]
0x4cd0d328  1320  ldp x7, x8, [jssp], #32
0x4cd0d32c  1324  ldp x13, x14, [jssp, #16]
0x4cd0d330  1328  ldp x11, x12, [jssp], #32
0x4cd0d334  1332  ldr lr, [jssp, #16]
0x4cd0d338  1336  ldp x15, x18, [jssp], #24
0x4cd0d33c  1340  ldp x3, x2, [jssp], #16
0x4cd0d340  1344  ldr x16, pc+544 (addr 0x000000004cd0d560)    ;; external reference (store_buffer_top)
0x4cd0d344  1348  ldr x1, [x16]
0x4cd0d348  1352  str x0, [x1], #8
0x4cd0d34c  1356  str x1, [x16]
0x4cd0d350  1360  tst x1, #0x1ffff
0x4cd0d354  1364  b.eq #+0x8 (addr 0x4cd0d35c)
0x4cd0d358  1368  ret
0x4cd0d35c  1372  sub csp, jssp, #0x8 (8)
0x4cd0d360  1376  str lr, [jssp, #-8]!
0x4cd0d364  1380  ldr x17, pc+516 (addr 0x000000004cd0d568)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0d368  1384  blr x17
0x4cd0d36c  1388  ldr lr, [jssp], #8
0x4cd0d370  1392  ret
0x4cd0d374  1396  and x1, x5, #0xfffffffffff00000
0x4cd0d378  1400  ldr x2, [x1, #104]
0x4cd0d37c  1404  subs x2, x2, #0x1 (1)
0x4cd0d380  1408  str x2, [x1, #104]
0x4cd0d384  1412  b.mi #+0x84 (addr 0x4cd0d408)
0x4cd0d388  1416  ubfx x16, x5, #8, #12
0x4cd0d38c  1420  and x1, x5, #0xfffffffffff00000
0x4cd0d390  1424  add x1, x1, x16, lsl #2
0x4cd0d394  1428  ubfx x2, x5, #3, #5
0x4cd0d398  1432  ldr x1, [x1, #360]
0x4cd0d39c  1436  lsr x1, x1, x2
0x4cd0d3a0  1440  tbz w1, #0, #+0x8 (addr 0x4cd0d3a8)
0x4cd0d3a4  1444  tbnz w1, #1, #+0xc (addr 0x4cd0d3b0)
0x4cd0d3a8  1448  ldp x3, x2, [jssp], #16
0x4cd0d3ac  1452  ret
0x4cd0d3b0  1456  ldr x1, [x0]
0x4cd0d3b4  1460  and x2, x1, #0xfffffffffff00000
0x4cd0d3b8  1464  ldr x2, [x2, #8]
0x4cd0d3bc  1468  tbz w2, #6, #+0x18 (addr 0x4cd0d3d4)
0x4cd0d3c0  1472  and x2, x5, #0xfffffffffff00000
0x4cd0d3c4  1476  ldr x2, [x2, #8]
0x4cd0d3c8  1480  movz x16, #0x58
0x4cd0d3cc  1484  tst x2, x16
0x4cd0d3d0  1488  b.eq #+0x38 (addr 0x4cd0d408)
0x4cd0d3d4  1492  sub csp, jssp, #0x10 (16)
0x4cd0d3d8  1496  stp x5, x0, [jssp, #-16]!
0x4cd0d3dc  1500  ubfx x16, x1, #8, #12
0x4cd0d3e0  1504  and x2, x1, #0xfffffffffff00000
0x4cd0d3e4  1508  add x2, x2, x16, lsl #2
0x4cd0d3e8  1512  ubfx x5, x1, #3, #5
0x4cd0d3ec  1516  ldr x0, [x2, #360]
0x4cd0d3f0  1520  lsr x0, x0, x5
0x4cd0d3f4  1524  tbz w0, #0, #+0x10 (addr 0x4cd0d404)
0x4cd0d3f8  1528  ldp x5, x0, [jssp], #16
0x4cd0d3fc  1532  ldp x3, x2, [jssp], #16
0x4cd0d400  1536  ret
0x4cd0d404  1540  ldp x5, x0, [jssp], #16
0x4cd0d408  1544  sub csp, jssp, #0x78 (120)
0x4cd0d40c  1548  stp x14, x15, [jssp, #-32]!
0x4cd0d410  1552  stp x18, lr, [jssp, #16]
0x4cd0d414  1556  stp x10, x11, [jssp, #-32]!
0x4cd0d418  1560  stp x12, x13, [jssp, #16]
0x4cd0d41c  1564  stp x6, x7, [jssp, #-32]!
0x4cd0d420  1568  stp x8, x9, [jssp, #16]
0x4cd0d424  1572  stp x0, x4, [jssp, #-24]!
0x4cd0d428  1576  str x5, [jssp, #16]
0x4cd0d42c  1580  sub csp, jssp, #0xb0 (176)
0x4cd0d430  1584  stp d26, d27, [jssp, #-32]!
0x4cd0d434  1588  stp d28, d29, [jssp, #16]
0x4cd0d438  1592  stp d22, d23, [jssp, #-32]!
0x4cd0d43c  1596  stp d24, d25, [jssp, #16]
0x4cd0d440  1600  stp d18, d19, [jssp, #-32]!
0x4cd0d444  1604  stp d20, d21, [jssp, #16]
0x4cd0d448  1608  stp d6, d7, [jssp, #-32]!
0x4cd0d44c  1612  stp d16, d17, [jssp, #16]
0x4cd0d450  1616  stp d2, d3, [jssp, #-32]!
0x4cd0d454  1620  stp d4, d5, [jssp, #16]
0x4cd0d458  1624  stp d0, d1, [jssp, #-16]!
0x4cd0d45c  1628  mov x1, x0
0x4cd0d460  1632  mov x0, x5
0x4cd0d464  1636  ldr x2, pc+268 (addr 0x000000004cd0d570)    ;; external reference (isolate)
0x4cd0d468  1640  ldr x16, pc+272 (addr 0x000000004cd0d578)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0d46c  1644  and csp, jssp, #0xfffffffffffffff0
0x4cd0d470  1648  blr x16
0x4cd0d474  1652  ldp d2, d3, [jssp, #16]
0x4cd0d478  1656  ldp d0, d1, [jssp], #32
0x4cd0d47c  1660  ldp d6, d7, [jssp, #16]
0x4cd0d480  1664  ldp d4, d5, [jssp], #32
0x4cd0d484  1668  ldp d18, d19, [jssp, #16]
0x4cd0d488  1672  ldp d16, d17, [jssp], #32
0x4cd0d48c  1676  ldp d22, d23, [jssp, #16]
0x4cd0d490  1680  ldp d20, d21, [jssp], #32
0x4cd0d494  1684  ldp d26, d27, [jssp, #16]
0x4cd0d498  1688  ldp d24, d25, [jssp], #32
0x4cd0d49c  1692  ldp d28, d29, [jssp], #16
0x4cd0d4a0  1696  ldp x5, x6, [jssp, #16]
0x4cd0d4a4  1700  ldp x0, x4, [jssp], #32
0x4cd0d4a8  1704  ldp x9, x10, [jssp, #16]
0x4cd0d4ac  1708  ldp x7, x8, [jssp], #32
0x4cd0d4b0  1712  ldp x13, x14, [jssp, #16]
0x4cd0d4b4  1716  ldp x11, x12, [jssp], #32
0x4cd0d4b8  1720  ldr lr, [jssp, #16]
0x4cd0d4bc  1724  ldp x15, x18, [jssp], #24
0x4cd0d4c0  1728  ldp x3, x2, [jssp], #16
0x4cd0d4c4  1732  ret
0x4cd0d4c8  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd0d4cc  1740  d63f03e0       constant
0x4cd0d4d0  1744  166dd8c0       constant
0x4cd0d4d4  1748  00000000       constant
0x4cd0d4d8  1752  4cd065a0       constant
0x4cd0d4dc  1756  00000000       constant
0x4cd0d4e0  1760  166dd8c0       constant
0x4cd0d4e4  1764  00000000       constant
0x4cd0d4e8  1768  4cd065a0       constant
0x4cd0d4ec  1772  00000000       constant
0x4cd0d4f0  1776  166dd8c0       constant
0x4cd0d4f4  1780  00000000       constant
0x4cd0d4f8  1784  4cd065a0       constant
0x4cd0d4fc  1788  00000000       constant
0x4cd0d500  1792  166dc2d0       constant
0x4cd0d504  1796  00000000       constant
0x4cd0d508  1800  00c2d958       constant
0x4cd0d50c  1804  00000000       constant
0x4cd0d510  1808  166dd8c0       constant
0x4cd0d514  1812  00000000       constant
0x4cd0d518  1816  4cd065a0       constant
0x4cd0d51c  1820  00000000       constant
0x4cd0d520  1824  166dc2d0       constant
0x4cd0d524  1828  00000000       constant
0x4cd0d528  1832  00c2d958       constant
0x4cd0d52c  1836  00000000       constant
0x4cd0d530  1840  166dd8c0       constant
0x4cd0d534  1844  00000000       constant
0x4cd0d538  1848  4cd065a0       constant
0x4cd0d53c  1852  00000000       constant
0x4cd0d540  1856  166dd8c0       constant
0x4cd0d544  1860  00000000       constant
0x4cd0d548  1864  4cd065a0       constant
0x4cd0d54c  1868  00000000       constant
0x4cd0d550  1872  166dc2d0       constant
0x4cd0d554  1876  00000000       constant
0x4cd0d558  1880  00c2d958       constant
0x4cd0d55c  1884  00000000       constant
0x4cd0d560  1888  166dd8c0       constant
0x4cd0d564  1892  00000000       constant
0x4cd0d568  1896  4cd065a0       constant
0x4cd0d56c  1900  00000000       constant
0x4cd0d570  1904  166dc2d0       constant
0x4cd0d574  1908  00000000       constant
0x4cd0d578  1912  00c2d958       constant
0x4cd0d57c  1916  00000000       constant


RelocInfo (size = 65)
0x4cd0ce08  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0ce2c  code target (STUB)  (0x4cd065a0)
0x4cd0cea4  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0cec8  code target (STUB)  (0x4cd065a0)
0x4cd0cf08  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0cf2c  code target (STUB)  (0x4cd065a0)
0x4cd0cf9c  external reference (isolate)  (0x166dc2d0)
0x4cd0cfa0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0cffc  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0d020  code target (STUB)  (0x4cd065a0)
0x4cd0d100  external reference (isolate)  (0x166dc2d0)
0x4cd0d104  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0d1c8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0d1ec  code target (STUB)  (0x4cd065a0)
0x4cd0d24c  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0d270  code target (STUB)  (0x4cd065a0)
0x4cd0d2e0  external reference (isolate)  (0x166dc2d0)
0x4cd0d2e4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0d340  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0d364  code target (STUB)  (0x4cd065a0)
0x4cd0d464  external reference (isolate)  (0x166dc2d0)
0x4cd0d468  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0d4c8  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1904)
0x4cd0d5e0     0  adr xzr, #+0x40 (addr 0x4cd0d620)
0x4cd0d5e4     4  adr xzr, #+0x358 (addr 0x4cd0d93c)
0x4cd0d5e8     8  ldr x16, pc+1720 (addr 0x000000004cd0dca0)    ;; external reference (store_buffer_top)
0x4cd0d5ec    12  ldr x5, [x16]
0x4cd0d5f0    16  str x1, [x5], #8
0x4cd0d5f4    20  str x5, [x16]
0x4cd0d5f8    24  tst x5, #0x1ffff
0x4cd0d5fc    28  b.eq #+0x8 (addr 0x4cd0d604)
0x4cd0d600    32  ret
0x4cd0d604    36  sub csp, jssp, #0x8 (8)
0x4cd0d608    40  str lr, [jssp, #-8]!
0x4cd0d60c    44  ldr x17, pc+1692 (addr 0x000000004cd0dca8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0d610    48  blr x17
0x4cd0d614    52  ldr lr, [jssp], #8
0x4cd0d618    56  ret
0x4cd0d61c    60  ret
0x4cd0d620    64  sub csp, jssp, #0x10 (16)
0x4cd0d624    68  stp x3, x0, [jssp, #-16]!
0x4cd0d628    72  ldr x5, [x1]
0x4cd0d62c    76  and x16, x5, #0xfffffffffff00000
0x4cd0d630    80  ldr x16, [x16, #8]
0x4cd0d634    84  tst x16, #0x18
0x4cd0d638    88  b.eq #+0x1d4 (addr 0x4cd0d80c)
0x4cd0d63c    92  and x16, x2, #0xfffffffffff00000
0x4cd0d640    96  ldr x16, [x16, #8]
0x4cd0d644   100  tst x16, #0x18
0x4cd0d648   104  b.ne #+0x1c4 (addr 0x4cd0d80c)
0x4cd0d64c   108  and x5, x2, #0xfffffffffff00000
0x4cd0d650   112  ldr x0, [x5, #104]
0x4cd0d654   116  subs x0, x0, #0x1 (1)
0x4cd0d658   120  str x0, [x5, #104]
0x4cd0d65c   124  b.mi #+0xc4 (addr 0x4cd0d720)
0x4cd0d660   128  ubfx x16, x2, #8, #12
0x4cd0d664   132  and x5, x2, #0xfffffffffff00000
0x4cd0d668   136  add x5, x5, x16, lsl #2
0x4cd0d66c   140  ubfx x0, x2, #3, #5
0x4cd0d670   144  ldr x5, [x5, #360]
0x4cd0d674   148  lsr x5, x5, x0
0x4cd0d678   152  tbz w5, #0, #+0x8 (addr 0x4cd0d680)
0x4cd0d67c   156  tbnz w5, #1, #+0x3c (addr 0x4cd0d6b8)
0x4cd0d680   160  ldp x3, x0, [jssp], #16
0x4cd0d684   164  ldr x16, pc+1580 (addr 0x000000004cd0dcb0)    ;; external reference (store_buffer_top)
0x4cd0d688   168  ldr x5, [x16]
0x4cd0d68c   172  str x1, [x5], #8
0x4cd0d690   176  str x5, [x16]
0x4cd0d694   180  tst x5, #0x1ffff
0x4cd0d698   184  b.eq #+0x8 (addr 0x4cd0d6a0)
0x4cd0d69c   188  ret
0x4cd0d6a0   192  sub csp, jssp, #0x8 (8)
0x4cd0d6a4   196  str lr, [jssp, #-8]!
0x4cd0d6a8   200  ldr x17, pc+1552 (addr 0x000000004cd0dcb8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0d6ac   204  blr x17
0x4cd0d6b0   208  ldr lr, [jssp], #8
0x4cd0d6b4   212  ret
0x4cd0d6b8   216  ldr x5, [x1]
0x4cd0d6bc   220  sub csp, jssp, #0x10 (16)
0x4cd0d6c0   224  stp x2, x1, [jssp, #-16]!
0x4cd0d6c4   228  ubfx x16, x5, #8, #12
0x4cd0d6c8   232  and x0, x5, #0xfffffffffff00000
0x4cd0d6cc   236  add x0, x0, x16, lsl #2
0x4cd0d6d0   240  ubfx x2, x5, #3, #5
0x4cd0d6d4   244  ldr x1, [x0, #360]
0x4cd0d6d8   248  lsr x1, x1, x2
0x4cd0d6dc   252  tbz w1, #0, #+0x40 (addr 0x4cd0d71c)
0x4cd0d6e0   256  ldp x2, x1, [jssp], #16
0x4cd0d6e4   260  ldp x3, x0, [jssp], #16
0x4cd0d6e8   264  ldr x16, pc+1496 (addr 0x000000004cd0dcc0)    ;; external reference (store_buffer_top)
0x4cd0d6ec   268  ldr x5, [x16]
0x4cd0d6f0   272  str x1, [x5], #8
0x4cd0d6f4   276  str x5, [x16]
0x4cd0d6f8   280  tst x5, #0x1ffff
0x4cd0d6fc   284  b.eq #+0x8 (addr 0x4cd0d704)
0x4cd0d700   288  ret
0x4cd0d704   292  sub csp, jssp, #0x8 (8)
0x4cd0d708   296  str lr, [jssp, #-8]!
0x4cd0d70c   300  ldr x17, pc+1468 (addr 0x000000004cd0dcc8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0d710   304  blr x17
0x4cd0d714   308  ldr lr, [jssp], #8
0x4cd0d718   312  ret
0x4cd0d71c   316  ldp x2, x1, [jssp], #16
0x4cd0d720   320  sub csp, jssp, #0x78 (120)
0x4cd0d724   324  stp x14, x15, [jssp, #-32]!
0x4cd0d728   328  stp x18, lr, [jssp, #16]
0x4cd0d72c   332  stp x10, x11, [jssp, #-32]!
0x4cd0d730   336  stp x12, x13, [jssp, #16]
0x4cd0d734   340  stp x6, x7, [jssp, #-32]!
0x4cd0d738   344  stp x8, x9, [jssp, #16]
0x4cd0d73c   348  stp x1, x2, [jssp, #-24]!
0x4cd0d740   352  str x4, [jssp, #16]
0x4cd0d744   356  sub csp, jssp, #0xb0 (176)
0x4cd0d748   360  stp d26, d27, [jssp, #-32]!
0x4cd0d74c   364  stp d28, d29, [jssp, #16]
0x4cd0d750   368  stp d22, d23, [jssp, #-32]!
0x4cd0d754   372  stp d24, d25, [jssp, #16]
0x4cd0d758   376  stp d18, d19, [jssp, #-32]!
0x4cd0d75c   380  stp d20, d21, [jssp, #16]
0x4cd0d760   384  stp d6, d7, [jssp, #-32]!
0x4cd0d764   388  stp d16, d17, [jssp, #16]
0x4cd0d768   392  stp d2, d3, [jssp, #-32]!
0x4cd0d76c   396  stp d4, d5, [jssp, #16]
0x4cd0d770   400  stp d0, d1, [jssp, #-16]!
0x4cd0d774   404  mov x0, x2
0x4cd0d778   408  ldr x2, pc+1368 (addr 0x000000004cd0dcd0)    ;; external reference (isolate)
0x4cd0d77c   412  ldr x16, pc+1372 (addr 0x000000004cd0dcd8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0d780   416  and csp, jssp, #0xfffffffffffffff0
0x4cd0d784   420  blr x16
0x4cd0d788   424  ldp d2, d3, [jssp, #16]
0x4cd0d78c   428  ldp d0, d1, [jssp], #32
0x4cd0d790   432  ldp d6, d7, [jssp, #16]
0x4cd0d794   436  ldp d4, d5, [jssp], #32
0x4cd0d798   440  ldp d18, d19, [jssp, #16]
0x4cd0d79c   444  ldp d16, d17, [jssp], #32
0x4cd0d7a0   448  ldp d22, d23, [jssp, #16]
0x4cd0d7a4   452  ldp d20, d21, [jssp], #32
0x4cd0d7a8   456  ldp d26, d27, [jssp, #16]
0x4cd0d7ac   460  ldp d24, d25, [jssp], #32
0x4cd0d7b0   464  ldp d28, d29, [jssp], #16
0x4cd0d7b4   468  ldp x4, x6, [jssp, #16]
0x4cd0d7b8   472  ldp x1, x2, [jssp], #32
0x4cd0d7bc   476  ldp x9, x10, [jssp, #16]
0x4cd0d7c0   480  ldp x7, x8, [jssp], #32
0x4cd0d7c4   484  ldp x13, x14, [jssp, #16]
0x4cd0d7c8   488  ldp x11, x12, [jssp], #32
0x4cd0d7cc   492  ldr lr, [jssp, #16]
0x4cd0d7d0   496  ldp x15, x18, [jssp], #24
0x4cd0d7d4   500  ldp x3, x0, [jssp], #16
0x4cd0d7d8   504  ldr x16, pc+1288 (addr 0x000000004cd0dce0)    ;; external reference (store_buffer_top)
0x4cd0d7dc   508  ldr x5, [x16]
0x4cd0d7e0   512  str x1, [x5], #8
0x4cd0d7e4   516  str x5, [x16]
0x4cd0d7e8   520  tst x5, #0x1ffff
0x4cd0d7ec   524  b.eq #+0x8 (addr 0x4cd0d7f4)
0x4cd0d7f0   528  ret
0x4cd0d7f4   532  sub csp, jssp, #0x8 (8)
0x4cd0d7f8   536  str lr, [jssp, #-8]!
0x4cd0d7fc   540  ldr x17, pc+1260 (addr 0x000000004cd0dce8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0d800   544  blr x17
0x4cd0d804   548  ldr lr, [jssp], #8
0x4cd0d808   552  ret
0x4cd0d80c   556  and x5, x2, #0xfffffffffff00000
0x4cd0d810   560  ldr x0, [x5, #104]
0x4cd0d814   564  subs x0, x0, #0x1 (1)
0x4cd0d818   568  str x0, [x5, #104]
0x4cd0d81c   572  b.mi #+0x64 (addr 0x4cd0d880)
0x4cd0d820   576  ubfx x16, x2, #8, #12
0x4cd0d824   580  and x5, x2, #0xfffffffffff00000
0x4cd0d828   584  add x5, x5, x16, lsl #2
0x4cd0d82c   588  ubfx x0, x2, #3, #5
0x4cd0d830   592  ldr x5, [x5, #360]
0x4cd0d834   596  lsr x5, x5, x0
0x4cd0d838   600  tbz w5, #0, #+0x8 (addr 0x4cd0d840)
0x4cd0d83c   604  tbnz w5, #1, #+0xc (addr 0x4cd0d848)
0x4cd0d840   608  ldp x3, x0, [jssp], #16
0x4cd0d844   612  ret
0x4cd0d848   616  ldr x5, [x1]
0x4cd0d84c   620  sub csp, jssp, #0x10 (16)
0x4cd0d850   624  stp x2, x1, [jssp, #-16]!
0x4cd0d854   628  ubfx x16, x5, #8, #12
0x4cd0d858   632  and x0, x5, #0xfffffffffff00000
0x4cd0d85c   636  add x0, x0, x16, lsl #2
0x4cd0d860   640  ubfx x2, x5, #3, #5
0x4cd0d864   644  ldr x1, [x0, #360]
0x4cd0d868   648  lsr x1, x1, x2
0x4cd0d86c   652  tbz w1, #0, #+0x10 (addr 0x4cd0d87c)
0x4cd0d870   656  ldp x2, x1, [jssp], #16
0x4cd0d874   660  ldp x3, x0, [jssp], #16
0x4cd0d878   664  ret
0x4cd0d87c   668  ldp x2, x1, [jssp], #16
0x4cd0d880   672  sub csp, jssp, #0x78 (120)
0x4cd0d884   676  stp x14, x15, [jssp, #-32]!
0x4cd0d888   680  stp x18, lr, [jssp, #16]
0x4cd0d88c   684  stp x10, x11, [jssp, #-32]!
0x4cd0d890   688  stp x12, x13, [jssp, #16]
0x4cd0d894   692  stp x6, x7, [jssp, #-32]!
0x4cd0d898   696  stp x8, x9, [jssp, #16]
0x4cd0d89c   700  stp x1, x2, [jssp, #-24]!
0x4cd0d8a0   704  str x4, [jssp, #16]
0x4cd0d8a4   708  sub csp, jssp, #0xb0 (176)
0x4cd0d8a8   712  stp d26, d27, [jssp, #-32]!
0x4cd0d8ac   716  stp d28, d29, [jssp, #16]
0x4cd0d8b0   720  stp d22, d23, [jssp, #-32]!
0x4cd0d8b4   724  stp d24, d25, [jssp, #16]
0x4cd0d8b8   728  stp d18, d19, [jssp, #-32]!
0x4cd0d8bc   732  stp d20, d21, [jssp, #16]
0x4cd0d8c0   736  stp d6, d7, [jssp, #-32]!
0x4cd0d8c4   740  stp d16, d17, [jssp, #16]
0x4cd0d8c8   744  stp d2, d3, [jssp, #-32]!
0x4cd0d8cc   748  stp d4, d5, [jssp, #16]
0x4cd0d8d0   752  stp d0, d1, [jssp, #-16]!
0x4cd0d8d4   756  mov x0, x2
0x4cd0d8d8   760  ldr x2, pc+1048 (addr 0x000000004cd0dcf0)    ;; external reference (isolate)
0x4cd0d8dc   764  ldr x16, pc+1052 (addr 0x000000004cd0dcf8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0d8e0   768  and csp, jssp, #0xfffffffffffffff0
0x4cd0d8e4   772  blr x16
0x4cd0d8e8   776  ldp d2, d3, [jssp, #16]
0x4cd0d8ec   780  ldp d0, d1, [jssp], #32
0x4cd0d8f0   784  ldp d6, d7, [jssp, #16]
0x4cd0d8f4   788  ldp d4, d5, [jssp], #32
0x4cd0d8f8   792  ldp d18, d19, [jssp, #16]
0x4cd0d8fc   796  ldp d16, d17, [jssp], #32
0x4cd0d900   800  ldp d22, d23, [jssp, #16]
0x4cd0d904   804  ldp d20, d21, [jssp], #32
0x4cd0d908   808  ldp d26, d27, [jssp, #16]
0x4cd0d90c   812  ldp d24, d25, [jssp], #32
0x4cd0d910   816  ldp d28, d29, [jssp], #16
0x4cd0d914   820  ldp x4, x6, [jssp, #16]
0x4cd0d918   824  ldp x1, x2, [jssp], #32
0x4cd0d91c   828  ldp x9, x10, [jssp, #16]
0x4cd0d920   832  ldp x7, x8, [jssp], #32
0x4cd0d924   836  ldp x13, x14, [jssp, #16]
0x4cd0d928   840  ldp x11, x12, [jssp], #32
0x4cd0d92c   844  ldr lr, [jssp, #16]
0x4cd0d930   848  ldp x15, x18, [jssp], #24
0x4cd0d934   852  ldp x3, x0, [jssp], #16
0x4cd0d938   856  ret
0x4cd0d93c   860  sub csp, jssp, #0x10 (16)
0x4cd0d940   864  stp x3, x0, [jssp, #-16]!
0x4cd0d944   868  ldr x5, [x1]
0x4cd0d948   872  and x16, x5, #0xfffffffffff00000
0x4cd0d94c   876  ldr x16, [x16, #8]
0x4cd0d950   880  tst x16, #0x18
0x4cd0d954   884  b.eq #+0x1f4 (addr 0x4cd0db48)
0x4cd0d958   888  and x16, x2, #0xfffffffffff00000
0x4cd0d95c   892  ldr x16, [x16, #8]
0x4cd0d960   896  tst x16, #0x18
0x4cd0d964   900  b.ne #+0x1e4 (addr 0x4cd0db48)
0x4cd0d968   904  and x5, x2, #0xfffffffffff00000
0x4cd0d96c   908  ldr x0, [x5, #104]
0x4cd0d970   912  subs x0, x0, #0x1 (1)
0x4cd0d974   916  str x0, [x5, #104]
0x4cd0d978   920  b.mi #+0xe4 (addr 0x4cd0da5c)
0x4cd0d97c   924  ubfx x16, x2, #8, #12
0x4cd0d980   928  and x5, x2, #0xfffffffffff00000
0x4cd0d984   932  add x5, x5, x16, lsl #2
0x4cd0d988   936  ubfx x0, x2, #3, #5
0x4cd0d98c   940  ldr x5, [x5, #360]
0x4cd0d990   944  lsr x5, x5, x0
0x4cd0d994   948  tbz w5, #0, #+0x8 (addr 0x4cd0d99c)
0x4cd0d998   952  tbnz w5, #1, #+0x3c (addr 0x4cd0d9d4)
0x4cd0d99c   956  ldp x3, x0, [jssp], #16
0x4cd0d9a0   960  ldr x16, pc+864 (addr 0x000000004cd0dd00)    ;; external reference (store_buffer_top)
0x4cd0d9a4   964  ldr x5, [x16]
0x4cd0d9a8   968  str x1, [x5], #8
0x4cd0d9ac   972  str x5, [x16]
0x4cd0d9b0   976  tst x5, #0x1ffff
0x4cd0d9b4   980  b.eq #+0x8 (addr 0x4cd0d9bc)
0x4cd0d9b8   984  ret
0x4cd0d9bc   988  sub csp, jssp, #0x8 (8)
0x4cd0d9c0   992  str lr, [jssp, #-8]!
0x4cd0d9c4   996  ldr x17, pc+836 (addr 0x000000004cd0dd08)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0d9c8  1000  blr x17
0x4cd0d9cc  1004  ldr lr, [jssp], #8
0x4cd0d9d0  1008  ret
0x4cd0d9d4  1012  ldr x5, [x1]
0x4cd0d9d8  1016  and x0, x5, #0xfffffffffff00000
0x4cd0d9dc  1020  ldr x0, [x0, #8]
0x4cd0d9e0  1024  tbz w0, #6, #+0x18 (addr 0x4cd0d9f8)
0x4cd0d9e4  1028  and x0, x2, #0xfffffffffff00000
0x4cd0d9e8  1032  ldr x0, [x0, #8]
0x4cd0d9ec  1036  movz x16, #0x58
0x4cd0d9f0  1040  tst x0, x16
0x4cd0d9f4  1044  b.eq #+0x68 (addr 0x4cd0da5c)
0x4cd0d9f8  1048  sub csp, jssp, #0x10 (16)
0x4cd0d9fc  1052  stp x2, x1, [jssp, #-16]!
0x4cd0da00  1056  ubfx x16, x5, #8, #12
0x4cd0da04  1060  and x0, x5, #0xfffffffffff00000
0x4cd0da08  1064  add x0, x0, x16, lsl #2
0x4cd0da0c  1068  ubfx x2, x5, #3, #5
0x4cd0da10  1072  ldr x1, [x0, #360]
0x4cd0da14  1076  lsr x1, x1, x2
0x4cd0da18  1080  tbz w1, #0, #+0x40 (addr 0x4cd0da58)
0x4cd0da1c  1084  ldp x2, x1, [jssp], #16
0x4cd0da20  1088  ldp x3, x0, [jssp], #16
0x4cd0da24  1092  ldr x16, pc+748 (addr 0x000000004cd0dd10)    ;; external reference (store_buffer_top)
0x4cd0da28  1096  ldr x5, [x16]
0x4cd0da2c  1100  str x1, [x5], #8
0x4cd0da30  1104  str x5, [x16]
0x4cd0da34  1108  tst x5, #0x1ffff
0x4cd0da38  1112  b.eq #+0x8 (addr 0x4cd0da40)
0x4cd0da3c  1116  ret
0x4cd0da40  1120  sub csp, jssp, #0x8 (8)
0x4cd0da44  1124  str lr, [jssp, #-8]!
0x4cd0da48  1128  ldr x17, pc+720 (addr 0x000000004cd0dd18)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0da4c  1132  blr x17
0x4cd0da50  1136  ldr lr, [jssp], #8
0x4cd0da54  1140  ret
0x4cd0da58  1144  ldp x2, x1, [jssp], #16
0x4cd0da5c  1148  sub csp, jssp, #0x78 (120)
0x4cd0da60  1152  stp x14, x15, [jssp, #-32]!
0x4cd0da64  1156  stp x18, lr, [jssp, #16]
0x4cd0da68  1160  stp x10, x11, [jssp, #-32]!
0x4cd0da6c  1164  stp x12, x13, [jssp, #16]
0x4cd0da70  1168  stp x6, x7, [jssp, #-32]!
0x4cd0da74  1172  stp x8, x9, [jssp, #16]
0x4cd0da78  1176  stp x1, x2, [jssp, #-24]!
0x4cd0da7c  1180  str x4, [jssp, #16]
0x4cd0da80  1184  sub csp, jssp, #0xb0 (176)
0x4cd0da84  1188  stp d26, d27, [jssp, #-32]!
0x4cd0da88  1192  stp d28, d29, [jssp, #16]
0x4cd0da8c  1196  stp d22, d23, [jssp, #-32]!
0x4cd0da90  1200  stp d24, d25, [jssp, #16]
0x4cd0da94  1204  stp d18, d19, [jssp, #-32]!
0x4cd0da98  1208  stp d20, d21, [jssp, #16]
0x4cd0da9c  1212  stp d6, d7, [jssp, #-32]!
0x4cd0daa0  1216  stp d16, d17, [jssp, #16]
0x4cd0daa4  1220  stp d2, d3, [jssp, #-32]!
0x4cd0daa8  1224  stp d4, d5, [jssp, #16]
0x4cd0daac  1228  stp d0, d1, [jssp, #-16]!
0x4cd0dab0  1232  mov x0, x2
0x4cd0dab4  1236  ldr x2, pc+620 (addr 0x000000004cd0dd20)    ;; external reference (isolate)
0x4cd0dab8  1240  ldr x16, pc+624 (addr 0x000000004cd0dd28)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0dabc  1244  and csp, jssp, #0xfffffffffffffff0
0x4cd0dac0  1248  blr x16
0x4cd0dac4  1252  ldp d2, d3, [jssp, #16]
0x4cd0dac8  1256  ldp d0, d1, [jssp], #32
0x4cd0dacc  1260  ldp d6, d7, [jssp, #16]
0x4cd0dad0  1264  ldp d4, d5, [jssp], #32
0x4cd0dad4  1268  ldp d18, d19, [jssp, #16]
0x4cd0dad8  1272  ldp d16, d17, [jssp], #32
0x4cd0dadc  1276  ldp d22, d23, [jssp, #16]
0x4cd0dae0  1280  ldp d20, d21, [jssp], #32
0x4cd0dae4  1284  ldp d26, d27, [jssp, #16]
0x4cd0dae8  1288  ldp d24, d25, [jssp], #32
0x4cd0daec  1292  ldp d28, d29, [jssp], #16
0x4cd0daf0  1296  ldp x4, x6, [jssp, #16]
0x4cd0daf4  1300  ldp x1, x2, [jssp], #32
0x4cd0daf8  1304  ldp x9, x10, [jssp, #16]
0x4cd0dafc  1308  ldp x7, x8, [jssp], #32
0x4cd0db00  1312  ldp x13, x14, [jssp, #16]
0x4cd0db04  1316  ldp x11, x12, [jssp], #32
0x4cd0db08  1320  ldr lr, [jssp, #16]
0x4cd0db0c  1324  ldp x15, x18, [jssp], #24
0x4cd0db10  1328  ldp x3, x0, [jssp], #16
0x4cd0db14  1332  ldr x16, pc+540 (addr 0x000000004cd0dd30)    ;; external reference (store_buffer_top)
0x4cd0db18  1336  ldr x5, [x16]
0x4cd0db1c  1340  str x1, [x5], #8
0x4cd0db20  1344  str x5, [x16]
0x4cd0db24  1348  tst x5, #0x1ffff
0x4cd0db28  1352  b.eq #+0x8 (addr 0x4cd0db30)
0x4cd0db2c  1356  ret
0x4cd0db30  1360  sub csp, jssp, #0x8 (8)
0x4cd0db34  1364  str lr, [jssp, #-8]!
0x4cd0db38  1368  ldr x17, pc+512 (addr 0x000000004cd0dd38)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd0db3c  1372  blr x17
0x4cd0db40  1376  ldr lr, [jssp], #8
0x4cd0db44  1380  ret
0x4cd0db48  1384  and x5, x2, #0xfffffffffff00000
0x4cd0db4c  1388  ldr x0, [x5, #104]
0x4cd0db50  1392  subs x0, x0, #0x1 (1)
0x4cd0db54  1396  str x0, [x5, #104]
0x4cd0db58  1400  b.mi #+0x84 (addr 0x4cd0dbdc)
0x4cd0db5c  1404  ubfx x16, x2, #8, #12
0x4cd0db60  1408  and x5, x2, #0xfffffffffff00000
0x4cd0db64  1412  add x5, x5, x16, lsl #2
0x4cd0db68  1416  ubfx x0, x2, #3, #5
0x4cd0db6c  1420  ldr x5, [x5, #360]
0x4cd0db70  1424  lsr x5, x5, x0
0x4cd0db74  1428  tbz w5, #0, #+0x8 (addr 0x4cd0db7c)
0x4cd0db78  1432  tbnz w5, #1, #+0xc (addr 0x4cd0db84)
0x4cd0db7c  1436  ldp x3, x0, [jssp], #16
0x4cd0db80  1440  ret
0x4cd0db84  1444  ldr x5, [x1]
0x4cd0db88  1448  and x0, x5, #0xfffffffffff00000
0x4cd0db8c  1452  ldr x0, [x0, #8]
0x4cd0db90  1456  tbz w0, #6, #+0x18 (addr 0x4cd0dba8)
0x4cd0db94  1460  and x0, x2, #0xfffffffffff00000
0x4cd0db98  1464  ldr x0, [x0, #8]
0x4cd0db9c  1468  movz x16, #0x58
0x4cd0dba0  1472  tst x0, x16
0x4cd0dba4  1476  b.eq #+0x38 (addr 0x4cd0dbdc)
0x4cd0dba8  1480  sub csp, jssp, #0x10 (16)
0x4cd0dbac  1484  stp x2, x1, [jssp, #-16]!
0x4cd0dbb0  1488  ubfx x16, x5, #8, #12
0x4cd0dbb4  1492  and x0, x5, #0xfffffffffff00000
0x4cd0dbb8  1496  add x0, x0, x16, lsl #2
0x4cd0dbbc  1500  ubfx x2, x5, #3, #5
0x4cd0dbc0  1504  ldr x1, [x0, #360]
0x4cd0dbc4  1508  lsr x1, x1, x2
0x4cd0dbc8  1512  tbz w1, #0, #+0x10 (addr 0x4cd0dbd8)
0x4cd0dbcc  1516  ldp x2, x1, [jssp], #16
0x4cd0dbd0  1520  ldp x3, x0, [jssp], #16
0x4cd0dbd4  1524  ret
0x4cd0dbd8  1528  ldp x2, x1, [jssp], #16
0x4cd0dbdc  1532  sub csp, jssp, #0x78 (120)
0x4cd0dbe0  1536  stp x14, x15, [jssp, #-32]!
0x4cd0dbe4  1540  stp x18, lr, [jssp, #16]
0x4cd0dbe8  1544  stp x10, x11, [jssp, #-32]!
0x4cd0dbec  1548  stp x12, x13, [jssp, #16]
0x4cd0dbf0  1552  stp x6, x7, [jssp, #-32]!
0x4cd0dbf4  1556  stp x8, x9, [jssp, #16]
0x4cd0dbf8  1560  stp x1, x2, [jssp, #-24]!
0x4cd0dbfc  1564  str x4, [jssp, #16]
0x4cd0dc00  1568  sub csp, jssp, #0xb0 (176)
0x4cd0dc04  1572  stp d26, d27, [jssp, #-32]!
0x4cd0dc08  1576  stp d28, d29, [jssp, #16]
0x4cd0dc0c  1580  stp d22, d23, [jssp, #-32]!
0x4cd0dc10  1584  stp d24, d25, [jssp, #16]
0x4cd0dc14  1588  stp d18, d19, [jssp, #-32]!
0x4cd0dc18  1592  stp d20, d21, [jssp, #16]
0x4cd0dc1c  1596  stp d6, d7, [jssp, #-32]!
0x4cd0dc20  1600  stp d16, d17, [jssp, #16]
0x4cd0dc24  1604  stp d2, d3, [jssp, #-32]!
0x4cd0dc28  1608  stp d4, d5, [jssp, #16]
0x4cd0dc2c  1612  stp d0, d1, [jssp, #-16]!
0x4cd0dc30  1616  mov x0, x2
0x4cd0dc34  1620  ldr x2, pc+268 (addr 0x000000004cd0dd40)    ;; external reference (isolate)
0x4cd0dc38  1624  ldr x16, pc+272 (addr 0x000000004cd0dd48)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd0dc3c  1628  and csp, jssp, #0xfffffffffffffff0
0x4cd0dc40  1632  blr x16
0x4cd0dc44  1636  ldp d2, d3, [jssp, #16]
0x4cd0dc48  1640  ldp d0, d1, [jssp], #32
0x4cd0dc4c  1644  ldp d6, d7, [jssp, #16]
0x4cd0dc50  1648  ldp d4, d5, [jssp], #32
0x4cd0dc54  1652  ldp d18, d19, [jssp, #16]
0x4cd0dc58  1656  ldp d16, d17, [jssp], #32
0x4cd0dc5c  1660  ldp d22, d23, [jssp, #16]
0x4cd0dc60  1664  ldp d20, d21, [jssp], #32
0x4cd0dc64  1668  ldp d26, d27, [jssp, #16]
0x4cd0dc68  1672  ldp d24, d25, [jssp], #32
0x4cd0dc6c  1676  ldp d28, d29, [jssp], #16
0x4cd0dc70  1680  ldp x4, x6, [jssp, #16]
0x4cd0dc74  1684  ldp x1, x2, [jssp], #32
0x4cd0dc78  1688  ldp x9, x10, [jssp, #16]
0x4cd0dc7c  1692  ldp x7, x8, [jssp], #32
0x4cd0dc80  1696  ldp x13, x14, [jssp, #16]
0x4cd0dc84  1700  ldp x11, x12, [jssp], #32
0x4cd0dc88  1704  ldr lr, [jssp, #16]
0x4cd0dc8c  1708  ldp x15, x18, [jssp], #24
0x4cd0dc90  1712  ldp x3, x0, [jssp], #16
0x4cd0dc94  1716  ret
0x4cd0dc98  1720  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd0dc9c  1724  d63f03e0       constant
0x4cd0dca0  1728  166dd8c0       constant
0x4cd0dca4  1732  00000000       constant
0x4cd0dca8  1736  4cd065a0       constant
0x4cd0dcac  1740  00000000       constant
0x4cd0dcb0  1744  166dd8c0       constant
0x4cd0dcb4  1748  00000000       constant
0x4cd0dcb8  1752  4cd065a0       constant
0x4cd0dcbc  1756  00000000       constant
0x4cd0dcc0  1760  166dd8c0       constant
0x4cd0dcc4  1764  00000000       constant
0x4cd0dcc8  1768  4cd065a0       constant
0x4cd0dccc  1772  00000000       constant
0x4cd0dcd0  1776  166dc2d0       constant
0x4cd0dcd4  1780  00000000       constant
0x4cd0dcd8  1784  00c2d958       constant
0x4cd0dcdc  1788  00000000       constant
0x4cd0dce0  1792  166dd8c0       constant
0x4cd0dce4  1796  00000000       constant
0x4cd0dce8  1800  4cd065a0       constant
0x4cd0dcec  1804  00000000       constant
0x4cd0dcf0  1808  166dc2d0       constant
0x4cd0dcf4  1812  00000000       constant
0x4cd0dcf8  1816  00c2d958       constant
0x4cd0dcfc  1820  00000000       constant
0x4cd0dd00  1824  166dd8c0       constant
0x4cd0dd04  1828  00000000       constant
0x4cd0dd08  1832  4cd065a0       constant
0x4cd0dd0c  1836  00000000       constant
0x4cd0dd10  1840  166dd8c0       constant
0x4cd0dd14  1844  00000000       constant
0x4cd0dd18  1848  4cd065a0       constant
0x4cd0dd1c  1852  00000000       constant
0x4cd0dd20  1856  166dc2d0       constant
0x4cd0dd24  1860  00000000       constant
0x4cd0dd28  1864  00c2d958       constant
0x4cd0dd2c  1868  00000000       constant
0x4cd0dd30  1872  166dd8c0       constant
0x4cd0dd34  1876  00000000       constant
0x4cd0dd38  1880  4cd065a0       constant
0x4cd0dd3c  1884  00000000       constant
0x4cd0dd40  1888  166dc2d0       constant
0x4cd0dd44  1892  00000000       constant
0x4cd0dd48  1896  00c2d958       constant
0x4cd0dd4c  1900  00000000       constant


RelocInfo (size = 65)
0x4cd0d5e8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0d60c  code target (STUB)  (0x4cd065a0)
0x4cd0d684  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0d6a8  code target (STUB)  (0x4cd065a0)
0x4cd0d6e8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0d70c  code target (STUB)  (0x4cd065a0)
0x4cd0d778  external reference (isolate)  (0x166dc2d0)
0x4cd0d77c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0d7d8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0d7fc  code target (STUB)  (0x4cd065a0)
0x4cd0d8d8  external reference (isolate)  (0x166dc2d0)
0x4cd0d8dc  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0d9a0  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0d9c4  code target (STUB)  (0x4cd065a0)
0x4cd0da24  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0da48  code target (STUB)  (0x4cd065a0)
0x4cd0dab4  external reference (isolate)  (0x166dc2d0)
0x4cd0dab8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0db14  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd0db38  code target (STUB)  (0x4cd065a0)
0x4cd0dc34  external reference (isolate)  (0x166dc2d0)
0x4cd0dc38  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd0dc98  constant pool (size 184)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = CreateWeakCellStub
compiler = crankshaft
Instructions (size = 357)
0x4cd0ddc0     0  movz x4, #0xb840
0x4cd0ddc4     4  movk x4, #0x1670, lsl #16
0x4cd0ddc8     8  ldp x5, x0, [x4]
0x4cd0ddcc    12  adds x16, x5, #0x18 (24)
0x4cd0ddd0    16  ccmp x16, x0, #nzCv, lo
0x4cd0ddd4    20  b.hi #+0x98 (addr 0x4cd0de6c)
0x4cd0ddd8    24  str x16, [x4]
0x4cd0dddc    28  orr x5, x5, #0x1
0x4cd0dde0    32  ldr x0, pc+248 (addr 0x000000004cd0ded8)    ;; object: 0x2a8058b1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd0dde4    36  stur x0, [x5, #-1]
0x4cd0dde8    40  stur x1, [x5, #7]
0x4cd0ddec    44  tbz w1, #0, #+0x34 (addr 0x4cd0de20)
0x4cd0ddf0    48  add x0, x5, #0x7 (7)
0x4cd0ddf4    52  and x1, x1, #0xfffffffffff00000
0x4cd0ddf8    56  ldr x1, [x1, #8]
0x4cd0ddfc    60  tbz w1, #1, #+0x24 (addr 0x4cd0de20)
0x4cd0de00    64  and x1, x5, #0xfffffffffff00000
0x4cd0de04    68  ldr x1, [x1, #8]
0x4cd0de08    72  tbz w1, #2, #+0x18 (addr 0x4cd0de20)
0x4cd0de0c    76  sub csp, jssp, #0x8 (8)
0x4cd0de10    80  str lr, [jssp, #-8]!
0x4cd0de14    84  ldr x16, pc+204 (addr 0x000000004cd0dee0)    ;; code: STUB, RecordWriteStub, minor: 65573
0x4cd0de18    88  blr x16
0x4cd0de1c    92  ldr lr, [jssp], #8
0x4cd0de20    96  ldr x0, pc+200 (addr 0x000000004cd0dee8)    ;; object: 0x21004519 <the hole>
0x4cd0de24   100  stur x0, [x5, #15]
0x4cd0de28   104  asr x0, x3, #32
0x4cd0de2c   108  add x1, x2, #0xf (15)
0x4cd0de30   112  str x5, [x1, w0, sxtw #3]
0x4cd0de34   116  add x1, x1, w0, sxtw #3
0x4cd0de38   120  and x5, x5, #0xfffffffffff00000
0x4cd0de3c   124  ldr x5, [x5, #8]
0x4cd0de40   128  tbz w5, #1, #+0x24 (addr 0x4cd0de64)
0x4cd0de44   132  and x5, x2, #0xfffffffffff00000
0x4cd0de48   136  ldr x5, [x5, #8]
0x4cd0de4c   140  tbz w5, #2, #+0x18 (addr 0x4cd0de64)
0x4cd0de50   144  sub csp, jssp, #0x8 (8)
0x4cd0de54   148  str lr, [jssp, #-8]!
0x4cd0de58   152  ldr x16, pc+152 (addr 0x000000004cd0def0)    ;; code: STUB, RecordWriteStub, minor: 66722
0x4cd0de5c   156  blr x16
0x4cd0de60   160  ldr lr, [jssp], #8
0x4cd0de64   164  movz x0, #0x0
0x4cd0de68   168  ret
0x4cd0de6c   172  sub csp, jssp, #0x10 (16)
0x4cd0de70   176  stp fp, lr, [jssp, #-16]!
0x4cd0de74   180  movz fp, #0xa00000000
0x4cd0de78   184  sub csp, jssp, #0x8 (8)
0x4cd0de7c   188  str fp, [jssp, #-8]!
0x4cd0de80   192  add fp, jssp, #0x8 (8)
0x4cd0de84   196  movz x5, #0x0
0x4cd0de88   200  mov x16, lr
0x4cd0de8c   204  ldr x17, pc+108 (addr 0x000000004cd0def8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0de90   208  blr x17
0x4cd0de94   212  movz x0, #0x1800000000
0x4cd0de98   216  movz x10, #0x200000000
0x4cd0de9c   220  sub csp, jssp, #0x10 (16)
0x4cd0dea0   224  stp x10, x0, [jssp, #-16]!
0x4cd0dea4   228  movz x0, #0x2
0x4cd0dea8   232  movz x1, #0x5b88
0x4cd0deac   236  movk x1, #0xe2, lsl #16
0x4cd0deb0   240  ldr x16, pc+80 (addr 0x000000004cd0df00)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0deb4   244  blr x16
0x4cd0deb8   248  str x0, [jssp, #40]
0x4cd0debc   252  ldr x16, pc+76 (addr 0x000000004cd0df08)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0dec0   256  blr x16
0x4cd0dec4   260  ldr lr, [jssp, #16]
0x4cd0dec8   264  ldp xzr, fp, [jssp], #24
0x4cd0decc   268  b #-0xec (addr 0x4cd0dde0)
0x4cd0ded0   272  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd0ded4   276  d63f03e0       constant
0x4cd0ded8   280  2a8058b1       constant
0x4cd0dedc   284  00000000       constant
0x4cd0dee0   288  4cd0ce00       constant
0x4cd0dee4   292  00000000       constant
0x4cd0dee8   296  21004519       constant
0x4cd0deec   300  00000000       constant
0x4cd0def0   304  4cd0d5e0       constant
0x4cd0def4   308  00000000       constant
0x4cd0def8   312  4cd06820       constant
0x4cd0defc   316  00000000       constant
0x4cd0df00   320  4cd06260       constant
0x4cd0df04   324  00000000       constant
0x4cd0df08   328  4cd068e0       constant
0x4cd0df0c   332  00000000       constant


Safepoints (size = 21)
0x4cd0deb8   248  000 | x1 | x2 | x5 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 13)
0x4cd0dde0  embedded object  (0x2a8058b1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd0de14  code target (STUB)  (0x4cd0ce00)
0x4cd0de20  embedded object  (0x21004519 <the hole>)
0x4cd0de58  code target (STUB)  (0x4cd0d5e0)
0x4cd0de8c  code target (STUB)  (0x4cd06820)
0x4cd0deb0  code target (STUB)  (0x4cd06260)
0x4cd0debc  code target (STUB)  (0x4cd068e0)
0x4cd0ded0  constant pool (size 64)

--- End code ---
kind = STUB
major_key = CreateWeakCellStub
name = CreateWeakCellStub
compiler = crankshaft
Instructions (size = 357)
0x4cd0ddc0     0  movz x4, #0xb840
0x4cd0ddc4     4  movk x4, #0x1670, lsl #16
0x4cd0ddc8     8  ldp x5, x0, [x4]
0x4cd0ddcc    12  adds x16, x5, #0x18 (24)
0x4cd0ddd0    16  ccmp x16, x0, #nzCv, lo
0x4cd0ddd4    20  b.hi #+0x98 (addr 0x4cd0de6c)
0x4cd0ddd8    24  str x16, [x4]
0x4cd0dddc    28  orr x5, x5, #0x1
0x4cd0dde0    32  ldr x0, pc+248 (addr 0x000000004cd0ded8)    ;; object: 0x2a8058b1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd0dde4    36  stur x0, [x5, #-1]
0x4cd0dde8    40  stur x1, [x5, #7]
0x4cd0ddec    44  tbz w1, #0, #+0x34 (addr 0x4cd0de20)
0x4cd0ddf0    48  add x0, x5, #0x7 (7)
0x4cd0ddf4    52  and x1, x1, #0xfffffffffff00000
0x4cd0ddf8    56  ldr x1, [x1, #8]
0x4cd0ddfc    60  tbz w1, #1, #+0x24 (addr 0x4cd0de20)
0x4cd0de00    64  and x1, x5, #0xfffffffffff00000
0x4cd0de04    68  ldr x1, [x1, #8]
0x4cd0de08    72  tbz w1, #2, #+0x18 (addr 0x4cd0de20)
0x4cd0de0c    76  sub csp, jssp, #0x8 (8)
0x4cd0de10    80  str lr, [jssp, #-8]!
0x4cd0de14    84  ldr x16, pc+204 (addr 0x000000004cd0dee0)    ;; code: STUB, RecordWriteStub, minor: 65573
0x4cd0de18    88  blr x16
0x4cd0de1c    92  ldr lr, [jssp], #8
0x4cd0de20    96  ldr x0, pc+200 (addr 0x000000004cd0dee8)    ;; object: 0x21004519 <the hole>
0x4cd0de24   100  stur x0, [x5, #15]
0x4cd0de28   104  asr x0, x3, #32
0x4cd0de2c   108  add x1, x2, #0xf (15)
0x4cd0de30   112  str x5, [x1, w0, sxtw #3]
0x4cd0de34   116  add x1, x1, w0, sxtw #3
0x4cd0de38   120  and x5, x5, #0xfffffffffff00000
0x4cd0de3c   124  ldr x5, [x5, #8]
0x4cd0de40   128  tbz w5, #1, #+0x24 (addr 0x4cd0de64)
0x4cd0de44   132  and x5, x2, #0xfffffffffff00000
0x4cd0de48   136  ldr x5, [x5, #8]
0x4cd0de4c   140  tbz w5, #2, #+0x18 (addr 0x4cd0de64)
0x4cd0de50   144  sub csp, jssp, #0x8 (8)
0x4cd0de54   148  str lr, [jssp, #-8]!
0x4cd0de58   152  ldr x16, pc+152 (addr 0x000000004cd0def0)    ;; code: STUB, RecordWriteStub, minor: 66722
0x4cd0de5c   156  blr x16
0x4cd0de60   160  ldr lr, [jssp], #8
0x4cd0de64   164  movz x0, #0x0
0x4cd0de68   168  ret
0x4cd0de6c   172  sub csp, jssp, #0x10 (16)
0x4cd0de70   176  stp fp, lr, [jssp, #-16]!
0x4cd0de74   180  movz fp, #0xa00000000
0x4cd0de78   184  sub csp, jssp, #0x8 (8)
0x4cd0de7c   188  str fp, [jssp, #-8]!
0x4cd0de80   192  add fp, jssp, #0x8 (8)
0x4cd0de84   196  movz x5, #0x0
0x4cd0de88   200  mov x16, lr
0x4cd0de8c   204  ldr x17, pc+108 (addr 0x000000004cd0def8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0de90   208  blr x17
0x4cd0de94   212  movz x0, #0x1800000000
0x4cd0de98   216  movz x10, #0x200000000
0x4cd0de9c   220  sub csp, jssp, #0x10 (16)
0x4cd0dea0   224  stp x10, x0, [jssp, #-16]!
0x4cd0dea4   228  movz x0, #0x2
0x4cd0dea8   232  movz x1, #0x5b88
0x4cd0deac   236  movk x1, #0xe2, lsl #16
0x4cd0deb0   240  ldr x16, pc+80 (addr 0x000000004cd0df00)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0deb4   244  blr x16
0x4cd0deb8   248  str x0, [jssp, #40]
0x4cd0debc   252  ldr x16, pc+76 (addr 0x000000004cd0df08)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0dec0   256  blr x16
0x4cd0dec4   260  ldr lr, [jssp, #16]
0x4cd0dec8   264  ldp xzr, fp, [jssp], #24
0x4cd0decc   268  b #-0xec (addr 0x4cd0dde0)
0x4cd0ded0   272  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd0ded4   276  d63f03e0       constant
0x4cd0ded8   280  2a8058b1       constant
0x4cd0dedc   284  00000000       constant
0x4cd0dee0   288  4cd0ce00       constant
0x4cd0dee4   292  00000000       constant
0x4cd0dee8   296  21004519       constant
0x4cd0deec   300  00000000       constant
0x4cd0def0   304  4cd0d5e0       constant
0x4cd0def4   308  00000000       constant
0x4cd0def8   312  4cd06820       constant
0x4cd0defc   316  00000000       constant
0x4cd0df00   320  4cd06260       constant
0x4cd0df04   324  00000000       constant
0x4cd0df08   328  4cd068e0       constant
0x4cd0df0c   332  00000000       constant


Safepoints (size = 21)
0x4cd0deb8   248  000 | x1 | x2 | x5 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 13)
0x4cd0dde0  embedded object  (0x2a8058b1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd0de14  code target (STUB)  (0x4cd0ce00)
0x4cd0de20  embedded object  (0x21004519 <the hole>)
0x4cd0de58  code target (STUB)  (0x4cd0d5e0)
0x4cd0de8c  code target (STUB)  (0x4cd06820)
0x4cd0deb0  code target (STUB)  (0x4cd06260)
0x4cd0debc  code target (STUB)  (0x4cd068e0)
0x4cd0ded0  constant pool (size 64)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 0
name = BinaryOpICStub(BIT_OR:None*None->None)
compiler = unknown
Instructions (size = 104)
0x4cd0dfa0     0  movz x16, #0xc00000000
0x4cd0dfa4     4  sub csp, jssp, #0x10 (16)
0x4cd0dfa8     8  stp fp, lr, [jssp, #-16]!
0x4cd0dfac    12  sub csp, jssp, #0x10 (16)
0x4cd0dfb0    16  str x16, [jssp, #-8]!
0x4cd0dfb4    20  ldr x17, pc+60 (addr 0x000000004cd0dff0)    ;; object: 0x4cd0df41 <Code: BINARY_OP_IC>
0x4cd0dfb8    24  sub csp, jssp, #0x10 (16)
0x4cd0dfbc    28  str x17, [jssp, #-8]!
0x4cd0dfc0    32  add fp, jssp, #0x10 (16)
0x4cd0dfc4    36  sub csp, jssp, #0x10 (16)
0x4cd0dfc8    40  stp x0, x1, [jssp, #-16]!
0x4cd0dfcc    44  movz x0, #0x2
0x4cd0dfd0    48  ldr x1, pc+40 (addr 0x000000004cd0dff8)    ;; external reference (Runtime::BinaryOpIC_Miss)
0x4cd0dfd4    52  ldr x16, pc+44 (addr 0x000000004cd0e000)    ;; code: STUB, CEntryStub, minor: 4
0x4cd0dfd8    56  blr x16
0x4cd0dfdc    60  mov jssp, fp
0x4cd0dfe0    64  ldp fp, lr, [jssp], #16
0x4cd0dfe4    68  ret
0x4cd0dfe8    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0dfec    76  d63f03e0       constant
0x4cd0dff0    80  4cd0df41       constant
0x4cd0dff4    84  00000000       constant
0x4cd0dff8    88  00c8e1b8       constant
0x4cd0dffc    92  00000000       constant
0x4cd0e000    96  4cd06060       constant
0x4cd0e004   100  00000000       constant


RelocInfo (size = 10)
0x4cd0dfb4  embedded object  (0x4cd0df41 <Code: BINARY_OP_IC>)
0x4cd0dfd0  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0x4cd0dfd4  code target (STUB)  (0x4cd06060)
0x4cd0dfe8  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 1
name = BinaryOpICStub(BIT_XOR:None*None->None)
compiler = unknown
Instructions (size = 104)
0x4cd0e080     0  movz x16, #0xc00000000
0x4cd0e084     4  sub csp, jssp, #0x10 (16)
0x4cd0e088     8  stp fp, lr, [jssp, #-16]!
0x4cd0e08c    12  sub csp, jssp, #0x10 (16)
0x4cd0e090    16  str x16, [jssp, #-8]!
0x4cd0e094    20  ldr x17, pc+60 (addr 0x000000004cd0e0d0)    ;; object: 0x4cd0e021 <Code: BINARY_OP_IC>
0x4cd0e098    24  sub csp, jssp, #0x10 (16)
0x4cd0e09c    28  str x17, [jssp, #-8]!
0x4cd0e0a0    32  add fp, jssp, #0x10 (16)
0x4cd0e0a4    36  sub csp, jssp, #0x10 (16)
0x4cd0e0a8    40  stp x0, x1, [jssp, #-16]!
0x4cd0e0ac    44  movz x0, #0x2
0x4cd0e0b0    48  ldr x1, pc+40 (addr 0x000000004cd0e0d8)    ;; external reference (Runtime::BinaryOpIC_Miss)
0x4cd0e0b4    52  ldr x16, pc+44 (addr 0x000000004cd0e0e0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd0e0b8    56  blr x16
0x4cd0e0bc    60  mov jssp, fp
0x4cd0e0c0    64  ldp fp, lr, [jssp], #16
0x4cd0e0c4    68  ret
0x4cd0e0c8    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0e0cc    76  d63f03e0       constant
0x4cd0e0d0    80  4cd0e021       constant
0x4cd0e0d4    84  00000000       constant
0x4cd0e0d8    88  00c8e1b8       constant
0x4cd0e0dc    92  00000000       constant
0x4cd0e0e0    96  4cd06060       constant
0x4cd0e0e4   100  00000000       constant


RelocInfo (size = 10)
0x4cd0e094  embedded object  (0x4cd0e021 <Code: BINARY_OP_IC>)
0x4cd0e0b0  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0x4cd0e0b4  code target (STUB)  (0x4cd06060)
0x4cd0e0c8  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 2
name = BinaryOpICStub(BIT_AND:None*None->None)
compiler = unknown
Instructions (size = 104)
0x4cd0e160     0  movz x16, #0xc00000000
0x4cd0e164     4  sub csp, jssp, #0x10 (16)
0x4cd0e168     8  stp fp, lr, [jssp, #-16]!
0x4cd0e16c    12  sub csp, jssp, #0x10 (16)
0x4cd0e170    16  str x16, [jssp, #-8]!
0x4cd0e174    20  ldr x17, pc+60 (addr 0x000000004cd0e1b0)    ;; object: 0x4cd0e101 <Code: BINARY_OP_IC>
0x4cd0e178    24  sub csp, jssp, #0x10 (16)
0x4cd0e17c    28  str x17, [jssp, #-8]!
0x4cd0e180    32  add fp, jssp, #0x10 (16)
0x4cd0e184    36  sub csp, jssp, #0x10 (16)
0x4cd0e188    40  stp x0, x1, [jssp, #-16]!
0x4cd0e18c    44  movz x0, #0x2
0x4cd0e190    48  ldr x1, pc+40 (addr 0x000000004cd0e1b8)    ;; external reference (Runtime::BinaryOpIC_Miss)
0x4cd0e194    52  ldr x16, pc+44 (addr 0x000000004cd0e1c0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd0e198    56  blr x16
0x4cd0e19c    60  mov jssp, fp
0x4cd0e1a0    64  ldp fp, lr, [jssp], #16
0x4cd0e1a4    68  ret
0x4cd0e1a8    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0e1ac    76  d63f03e0       constant
0x4cd0e1b0    80  4cd0e101       constant
0x4cd0e1b4    84  00000000       constant
0x4cd0e1b8    88  00c8e1b8       constant
0x4cd0e1bc    92  00000000       constant
0x4cd0e1c0    96  4cd06060       constant
0x4cd0e1c4   100  00000000       constant


RelocInfo (size = 10)
0x4cd0e174  embedded object  (0x4cd0e101 <Code: BINARY_OP_IC>)
0x4cd0e190  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0x4cd0e194  code target (STUB)  (0x4cd06060)
0x4cd0e1a8  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 3
name = BinaryOpICStub(SHL:None*None->None)
compiler = unknown
Instructions (size = 104)
0x4cd0e240     0  movz x16, #0xc00000000
0x4cd0e244     4  sub csp, jssp, #0x10 (16)
0x4cd0e248     8  stp fp, lr, [jssp, #-16]!
0x4cd0e24c    12  sub csp, jssp, #0x10 (16)
0x4cd0e250    16  str x16, [jssp, #-8]!
0x4cd0e254    20  ldr x17, pc+60 (addr 0x000000004cd0e290)    ;; object: 0x4cd0e1e1 <Code: BINARY_OP_IC>
0x4cd0e258    24  sub csp, jssp, #0x10 (16)
0x4cd0e25c    28  str x17, [jssp, #-8]!
0x4cd0e260    32  add fp, jssp, #0x10 (16)
0x4cd0e264    36  sub csp, jssp, #0x10 (16)
0x4cd0e268    40  stp x0, x1, [jssp, #-16]!
0x4cd0e26c    44  movz x0, #0x2
0x4cd0e270    48  ldr x1, pc+40 (addr 0x000000004cd0e298)    ;; external reference (Runtime::BinaryOpIC_Miss)
0x4cd0e274    52  ldr x16, pc+44 (addr 0x000000004cd0e2a0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd0e278    56  blr x16
0x4cd0e27c    60  mov jssp, fp
0x4cd0e280    64  ldp fp, lr, [jssp], #16
0x4cd0e284    68  ret
0x4cd0e288    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0e28c    76  d63f03e0       constant
0x4cd0e290    80  4cd0e1e1       constant
0x4cd0e294    84  00000000       constant
0x4cd0e298    88  00c8e1b8       constant
0x4cd0e29c    92  00000000       constant
0x4cd0e2a0    96  4cd06060       constant
0x4cd0e2a4   100  00000000       constant


RelocInfo (size = 10)
0x4cd0e254  embedded object  (0x4cd0e1e1 <Code: BINARY_OP_IC>)
0x4cd0e270  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0x4cd0e274  code target (STUB)  (0x4cd06060)
0x4cd0e288  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 4
name = BinaryOpICStub(SAR:None*None->None)
compiler = unknown
Instructions (size = 104)
0x4cd0e320     0  movz x16, #0xc00000000
0x4cd0e324     4  sub csp, jssp, #0x10 (16)
0x4cd0e328     8  stp fp, lr, [jssp, #-16]!
0x4cd0e32c    12  sub csp, jssp, #0x10 (16)
0x4cd0e330    16  str x16, [jssp, #-8]!
0x4cd0e334    20  ldr x17, pc+60 (addr 0x000000004cd0e370)    ;; object: 0x4cd0e2c1 <Code: BINARY_OP_IC>
0x4cd0e338    24  sub csp, jssp, #0x10 (16)
0x4cd0e33c    28  str x17, [jssp, #-8]!
0x4cd0e340    32  add fp, jssp, #0x10 (16)
0x4cd0e344    36  sub csp, jssp, #0x10 (16)
0x4cd0e348    40  stp x0, x1, [jssp, #-16]!
0x4cd0e34c    44  movz x0, #0x2
0x4cd0e350    48  ldr x1, pc+40 (addr 0x000000004cd0e378)    ;; external reference (Runtime::BinaryOpIC_Miss)
0x4cd0e354    52  ldr x16, pc+44 (addr 0x000000004cd0e380)    ;; code: STUB, CEntryStub, minor: 4
0x4cd0e358    56  blr x16
0x4cd0e35c    60  mov jssp, fp
0x4cd0e360    64  ldp fp, lr, [jssp], #16
0x4cd0e364    68  ret
0x4cd0e368    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0e36c    76  d63f03e0       constant
0x4cd0e370    80  4cd0e2c1       constant
0x4cd0e374    84  00000000       constant
0x4cd0e378    88  00c8e1b8       constant
0x4cd0e37c    92  00000000       constant
0x4cd0e380    96  4cd06060       constant
0x4cd0e384   100  00000000       constant


RelocInfo (size = 10)
0x4cd0e334  embedded object  (0x4cd0e2c1 <Code: BINARY_OP_IC>)
0x4cd0e350  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0x4cd0e354  code target (STUB)  (0x4cd06060)
0x4cd0e368  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 5
name = BinaryOpICStub(SHR:None*None->None)
compiler = unknown
Instructions (size = 104)
0x4cd0e400     0  movz x16, #0xc00000000
0x4cd0e404     4  sub csp, jssp, #0x10 (16)
0x4cd0e408     8  stp fp, lr, [jssp, #-16]!
0x4cd0e40c    12  sub csp, jssp, #0x10 (16)
0x4cd0e410    16  str x16, [jssp, #-8]!
0x4cd0e414    20  ldr x17, pc+60 (addr 0x000000004cd0e450)    ;; object: 0x4cd0e3a1 <Code: BINARY_OP_IC>
0x4cd0e418    24  sub csp, jssp, #0x10 (16)
0x4cd0e41c    28  str x17, [jssp, #-8]!
0x4cd0e420    32  add fp, jssp, #0x10 (16)
0x4cd0e424    36  sub csp, jssp, #0x10 (16)
0x4cd0e428    40  stp x0, x1, [jssp, #-16]!
0x4cd0e42c    44  movz x0, #0x2
0x4cd0e430    48  ldr x1, pc+40 (addr 0x000000004cd0e458)    ;; external reference (Runtime::BinaryOpIC_Miss)
0x4cd0e434    52  ldr x16, pc+44 (addr 0x000000004cd0e460)    ;; code: STUB, CEntryStub, minor: 4
0x4cd0e438    56  blr x16
0x4cd0e43c    60  mov jssp, fp
0x4cd0e440    64  ldp fp, lr, [jssp], #16
0x4cd0e444    68  ret
0x4cd0e448    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0e44c    76  d63f03e0       constant
0x4cd0e450    80  4cd0e3a1       constant
0x4cd0e454    84  00000000       constant
0x4cd0e458    88  00c8e1b8       constant
0x4cd0e45c    92  00000000       constant
0x4cd0e460    96  4cd06060       constant
0x4cd0e464   100  00000000       constant


RelocInfo (size = 10)
0x4cd0e414  embedded object  (0x4cd0e3a1 <Code: BINARY_OP_IC>)
0x4cd0e430  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0x4cd0e434  code target (STUB)  (0x4cd06060)
0x4cd0e448  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 6
name = BinaryOpICStub(ROR:None*None->None)
compiler = unknown
Instructions (size = 104)
0x4cd0e4e0     0  movz x16, #0xc00000000
0x4cd0e4e4     4  sub csp, jssp, #0x10 (16)
0x4cd0e4e8     8  stp fp, lr, [jssp, #-16]!
0x4cd0e4ec    12  sub csp, jssp, #0x10 (16)
0x4cd0e4f0    16  str x16, [jssp, #-8]!
0x4cd0e4f4    20  ldr x17, pc+60 (addr 0x000000004cd0e530)    ;; object: 0x4cd0e481 <Code: BINARY_OP_IC>
0x4cd0e4f8    24  sub csp, jssp, #0x10 (16)
0x4cd0e4fc    28  str x17, [jssp, #-8]!
0x4cd0e500    32  add fp, jssp, #0x10 (16)
0x4cd0e504    36  sub csp, jssp, #0x10 (16)
0x4cd0e508    40  stp x0, x1, [jssp, #-16]!
0x4cd0e50c    44  movz x0, #0x2
0x4cd0e510    48  ldr x1, pc+40 (addr 0x000000004cd0e538)    ;; external reference (Runtime::BinaryOpIC_Miss)
0x4cd0e514    52  ldr x16, pc+44 (addr 0x000000004cd0e540)    ;; code: STUB, CEntryStub, minor: 4
0x4cd0e518    56  blr x16
0x4cd0e51c    60  mov jssp, fp
0x4cd0e520    64  ldp fp, lr, [jssp], #16
0x4cd0e524    68  ret
0x4cd0e528    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0e52c    76  d63f03e0       constant
0x4cd0e530    80  4cd0e481       constant
0x4cd0e534    84  00000000       constant
0x4cd0e538    88  00c8e1b8       constant
0x4cd0e53c    92  00000000       constant
0x4cd0e540    96  4cd06060       constant
0x4cd0e544   100  00000000       constant


RelocInfo (size = 10)
0x4cd0e4f4  embedded object  (0x4cd0e481 <Code: BINARY_OP_IC>)
0x4cd0e510  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0x4cd0e514  code target (STUB)  (0x4cd06060)
0x4cd0e528  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 7
name = BinaryOpICStub(ADD:None*None->None)
compiler = unknown
Instructions (size = 104)
0x4cd0e5c0     0  movz x16, #0xc00000000
0x4cd0e5c4     4  sub csp, jssp, #0x10 (16)
0x4cd0e5c8     8  stp fp, lr, [jssp, #-16]!
0x4cd0e5cc    12  sub csp, jssp, #0x10 (16)
0x4cd0e5d0    16  str x16, [jssp, #-8]!
0x4cd0e5d4    20  ldr x17, pc+60 (addr 0x000000004cd0e610)    ;; object: 0x4cd0e561 <Code: BINARY_OP_IC>
0x4cd0e5d8    24  sub csp, jssp, #0x10 (16)
0x4cd0e5dc    28  str x17, [jssp, #-8]!
0x4cd0e5e0    32  add fp, jssp, #0x10 (16)
0x4cd0e5e4    36  sub csp, jssp, #0x10 (16)
0x4cd0e5e8    40  stp x0, x1, [jssp, #-16]!
0x4cd0e5ec    44  movz x0, #0x2
0x4cd0e5f0    48  ldr x1, pc+40 (addr 0x000000004cd0e618)    ;; external reference (Runtime::BinaryOpIC_Miss)
0x4cd0e5f4    52  ldr x16, pc+44 (addr 0x000000004cd0e620)    ;; code: STUB, CEntryStub, minor: 4
0x4cd0e5f8    56  blr x16
0x4cd0e5fc    60  mov jssp, fp
0x4cd0e600    64  ldp fp, lr, [jssp], #16
0x4cd0e604    68  ret
0x4cd0e608    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0e60c    76  d63f03e0       constant
0x4cd0e610    80  4cd0e561       constant
0x4cd0e614    84  00000000       constant
0x4cd0e618    88  00c8e1b8       constant
0x4cd0e61c    92  00000000       constant
0x4cd0e620    96  4cd06060       constant
0x4cd0e624   100  00000000       constant


RelocInfo (size = 10)
0x4cd0e5d4  embedded object  (0x4cd0e561 <Code: BINARY_OP_IC>)
0x4cd0e5f0  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0x4cd0e5f4  code target (STUB)  (0x4cd06060)
0x4cd0e608  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 8
name = BinaryOpICStub(SUB:None*None->None)
compiler = unknown
Instructions (size = 104)
0x4cd0e6a0     0  movz x16, #0xc00000000
0x4cd0e6a4     4  sub csp, jssp, #0x10 (16)
0x4cd0e6a8     8  stp fp, lr, [jssp, #-16]!
0x4cd0e6ac    12  sub csp, jssp, #0x10 (16)
0x4cd0e6b0    16  str x16, [jssp, #-8]!
0x4cd0e6b4    20  ldr x17, pc+60 (addr 0x000000004cd0e6f0)    ;; object: 0x4cd0e641 <Code: BINARY_OP_IC>
0x4cd0e6b8    24  sub csp, jssp, #0x10 (16)
0x4cd0e6bc    28  str x17, [jssp, #-8]!
0x4cd0e6c0    32  add fp, jssp, #0x10 (16)
0x4cd0e6c4    36  sub csp, jssp, #0x10 (16)
0x4cd0e6c8    40  stp x0, x1, [jssp, #-16]!
0x4cd0e6cc    44  movz x0, #0x2
0x4cd0e6d0    48  ldr x1, pc+40 (addr 0x000000004cd0e6f8)    ;; external reference (Runtime::BinaryOpIC_Miss)
0x4cd0e6d4    52  ldr x16, pc+44 (addr 0x000000004cd0e700)    ;; code: STUB, CEntryStub, minor: 4
0x4cd0e6d8    56  blr x16
0x4cd0e6dc    60  mov jssp, fp
0x4cd0e6e0    64  ldp fp, lr, [jssp], #16
0x4cd0e6e4    68  ret
0x4cd0e6e8    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0e6ec    76  d63f03e0       constant
0x4cd0e6f0    80  4cd0e641       constant
0x4cd0e6f4    84  00000000       constant
0x4cd0e6f8    88  00c8e1b8       constant
0x4cd0e6fc    92  00000000       constant
0x4cd0e700    96  4cd06060       constant
0x4cd0e704   100  00000000       constant


RelocInfo (size = 10)
0x4cd0e6b4  embedded object  (0x4cd0e641 <Code: BINARY_OP_IC>)
0x4cd0e6d0  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0x4cd0e6d4  code target (STUB)  (0x4cd06060)
0x4cd0e6e8  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 9
name = BinaryOpICStub(MUL:None*None->None)
compiler = unknown
Instructions (size = 104)
0x4cd0e780     0  movz x16, #0xc00000000
0x4cd0e784     4  sub csp, jssp, #0x10 (16)
0x4cd0e788     8  stp fp, lr, [jssp, #-16]!
0x4cd0e78c    12  sub csp, jssp, #0x10 (16)
0x4cd0e790    16  str x16, [jssp, #-8]!
0x4cd0e794    20  ldr x17, pc+60 (addr 0x000000004cd0e7d0)    ;; object: 0x4cd0e721 <Code: BINARY_OP_IC>
0x4cd0e798    24  sub csp, jssp, #0x10 (16)
0x4cd0e79c    28  str x17, [jssp, #-8]!
0x4cd0e7a0    32  add fp, jssp, #0x10 (16)
0x4cd0e7a4    36  sub csp, jssp, #0x10 (16)
0x4cd0e7a8    40  stp x0, x1, [jssp, #-16]!
0x4cd0e7ac    44  movz x0, #0x2
0x4cd0e7b0    48  ldr x1, pc+40 (addr 0x000000004cd0e7d8)    ;; external reference (Runtime::BinaryOpIC_Miss)
0x4cd0e7b4    52  ldr x16, pc+44 (addr 0x000000004cd0e7e0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd0e7b8    56  blr x16
0x4cd0e7bc    60  mov jssp, fp
0x4cd0e7c0    64  ldp fp, lr, [jssp], #16
0x4cd0e7c4    68  ret
0x4cd0e7c8    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0e7cc    76  d63f03e0       constant
0x4cd0e7d0    80  4cd0e721       constant
0x4cd0e7d4    84  00000000       constant
0x4cd0e7d8    88  00c8e1b8       constant
0x4cd0e7dc    92  00000000       constant
0x4cd0e7e0    96  4cd06060       constant
0x4cd0e7e4   100  00000000       constant


RelocInfo (size = 10)
0x4cd0e794  embedded object  (0x4cd0e721 <Code: BINARY_OP_IC>)
0x4cd0e7b0  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0x4cd0e7b4  code target (STUB)  (0x4cd06060)
0x4cd0e7c8  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 10
name = BinaryOpICStub(DIV:None*None->None)
compiler = unknown
Instructions (size = 104)
0x4cd0e860     0  movz x16, #0xc00000000
0x4cd0e864     4  sub csp, jssp, #0x10 (16)
0x4cd0e868     8  stp fp, lr, [jssp, #-16]!
0x4cd0e86c    12  sub csp, jssp, #0x10 (16)
0x4cd0e870    16  str x16, [jssp, #-8]!
0x4cd0e874    20  ldr x17, pc+60 (addr 0x000000004cd0e8b0)    ;; object: 0x4cd0e801 <Code: BINARY_OP_IC>
0x4cd0e878    24  sub csp, jssp, #0x10 (16)
0x4cd0e87c    28  str x17, [jssp, #-8]!
0x4cd0e880    32  add fp, jssp, #0x10 (16)
0x4cd0e884    36  sub csp, jssp, #0x10 (16)
0x4cd0e888    40  stp x0, x1, [jssp, #-16]!
0x4cd0e88c    44  movz x0, #0x2
0x4cd0e890    48  ldr x1, pc+40 (addr 0x000000004cd0e8b8)    ;; external reference (Runtime::BinaryOpIC_Miss)
0x4cd0e894    52  ldr x16, pc+44 (addr 0x000000004cd0e8c0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd0e898    56  blr x16
0x4cd0e89c    60  mov jssp, fp
0x4cd0e8a0    64  ldp fp, lr, [jssp], #16
0x4cd0e8a4    68  ret
0x4cd0e8a8    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0e8ac    76  d63f03e0       constant
0x4cd0e8b0    80  4cd0e801       constant
0x4cd0e8b4    84  00000000       constant
0x4cd0e8b8    88  00c8e1b8       constant
0x4cd0e8bc    92  00000000       constant
0x4cd0e8c0    96  4cd06060       constant
0x4cd0e8c4   100  00000000       constant


RelocInfo (size = 10)
0x4cd0e874  embedded object  (0x4cd0e801 <Code: BINARY_OP_IC>)
0x4cd0e890  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0x4cd0e894  code target (STUB)  (0x4cd06060)
0x4cd0e8a8  constant pool (size 32)


kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = UNINITIALIZED
extra_ic_state = 11
name = BinaryOpICStub(MOD:None*None->None)
compiler = unknown
Instructions (size = 104)
0x4cd0e940     0  movz x16, #0xc00000000
0x4cd0e944     4  sub csp, jssp, #0x10 (16)
0x4cd0e948     8  stp fp, lr, [jssp, #-16]!
0x4cd0e94c    12  sub csp, jssp, #0x10 (16)
0x4cd0e950    16  str x16, [jssp, #-8]!
0x4cd0e954    20  ldr x17, pc+60 (addr 0x000000004cd0e990)    ;; object: 0x4cd0e8e1 <Code: BINARY_OP_IC>
0x4cd0e958    24  sub csp, jssp, #0x10 (16)
0x4cd0e95c    28  str x17, [jssp, #-8]!
0x4cd0e960    32  add fp, jssp, #0x10 (16)
0x4cd0e964    36  sub csp, jssp, #0x10 (16)
0x4cd0e968    40  stp x0, x1, [jssp, #-16]!
0x4cd0e96c    44  movz x0, #0x2
0x4cd0e970    48  ldr x1, pc+40 (addr 0x000000004cd0e998)    ;; external reference (Runtime::BinaryOpIC_Miss)
0x4cd0e974    52  ldr x16, pc+44 (addr 0x000000004cd0e9a0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd0e978    56  blr x16
0x4cd0e97c    60  mov jssp, fp
0x4cd0e980    64  ldp fp, lr, [jssp], #16
0x4cd0e984    68  ret
0x4cd0e988    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0e98c    76  d63f03e0       constant
0x4cd0e990    80  4cd0e8e1       constant
0x4cd0e994    84  00000000       constant
0x4cd0e998    88  00c8e1b8       constant
0x4cd0e99c    92  00000000       constant
0x4cd0e9a0    96  4cd06060       constant
0x4cd0e9a4   100  00000000       constant


RelocInfo (size = 10)
0x4cd0e954  embedded object  (0x4cd0e8e1 <Code: BINARY_OP_IC>)
0x4cd0e970  external reference (Runtime::BinaryOpIC_Miss)  (0xc8e1b8)
0x4cd0e974  code target (STUB)  (0x4cd06060)
0x4cd0e988  constant pool (size 32)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4391
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0x4cd0ea20     0  mov x2, x1
0x4cd0ea24     4  tbnz w2, #0, #+0x1c (addr 0x4cd0ea40)
0x4cd0ea28     8  mov x3, x0
0x4cd0ea2c    12  tbnz w3, #0, #+0x24 (addr 0x4cd0ea50)
0x4cd0ea30    16  adds x2, x3, x2
0x4cd0ea34    20  b.vs #+0x2c (addr 0x4cd0ea60)
0x4cd0ea38    24  mov x0, x2
0x4cd0ea3c    28  ret
0x4cd0ea40    32  movz x16, #0x0
0x4cd0ea44    36  sub csp, jssp, #0x10 (16)
0x4cd0ea48    40  stp fp, lr, [jssp, #-16]!
0x4cd0ea4c    44  bl #+0x24 (addr 0x4cd0ea70)
0x4cd0ea50    48  movz x16, #0x8
0x4cd0ea54    52  sub csp, jssp, #0x10 (16)
0x4cd0ea58    56  stp fp, lr, [jssp, #-16]!
0x4cd0ea5c    60  bl #+0x14 (addr 0x4cd0ea70)
0x4cd0ea60    64  movz x16, #0x10
0x4cd0ea64    68  sub csp, jssp, #0x10 (16)
0x4cd0ea68    72  stp fp, lr, [jssp, #-16]!
0x4cd0ea6c    76  bl #+0x4 (addr 0x4cd0ea70)
0x4cd0ea70    80  movz x17, #0xa00000000
0x4cd0ea74    84  sub csp, jssp, #0x10 (16)
0x4cd0ea78    88  stp x17, cp, [jssp, #-16]!
0x4cd0ea7c    92  add fp, jssp, #0x10 (16)
0x4cd0ea80    96  ldr x17, pc+24 (addr 0x000000004cd0ea98)    ;; lazy deoptimization bailout 0
0x4cd0ea84   100  add x17, x17, x16
0x4cd0ea88   104  br x17
0x4cd0ea8c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0ea90   112  d63f03e0       constant
0x4cd0ea94   116  d503201f       constant
0x4cd0ea98   120  4cb06000       constant
0x4cd0ea9c   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0ea80  runtime entry
0x4cd0ea8c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4391
type = NORMAL
name = BinaryOpICStub(ADD:Int32*Int32->Int32)
compiler = crankshaft
Instructions (size = 136)
0x4cd0ea20     0  mov x2, x1
0x4cd0ea24     4  tbnz w2, #0, #+0x1c (addr 0x4cd0ea40)
0x4cd0ea28     8  mov x3, x0
0x4cd0ea2c    12  tbnz w3, #0, #+0x24 (addr 0x4cd0ea50)
0x4cd0ea30    16  adds x2, x3, x2
0x4cd0ea34    20  b.vs #+0x2c (addr 0x4cd0ea60)
0x4cd0ea38    24  mov x0, x2
0x4cd0ea3c    28  ret
0x4cd0ea40    32  movz x16, #0x0
0x4cd0ea44    36  sub csp, jssp, #0x10 (16)
0x4cd0ea48    40  stp fp, lr, [jssp, #-16]!
0x4cd0ea4c    44  bl #+0x24 (addr 0x4cd0ea70)
0x4cd0ea50    48  movz x16, #0x8
0x4cd0ea54    52  sub csp, jssp, #0x10 (16)
0x4cd0ea58    56  stp fp, lr, [jssp, #-16]!
0x4cd0ea5c    60  bl #+0x14 (addr 0x4cd0ea70)
0x4cd0ea60    64  movz x16, #0x10
0x4cd0ea64    68  sub csp, jssp, #0x10 (16)
0x4cd0ea68    72  stp fp, lr, [jssp, #-16]!
0x4cd0ea6c    76  bl #+0x4 (addr 0x4cd0ea70)
0x4cd0ea70    80  movz x17, #0xa00000000
0x4cd0ea74    84  sub csp, jssp, #0x10 (16)
0x4cd0ea78    88  stp x17, cp, [jssp, #-16]!
0x4cd0ea7c    92  add fp, jssp, #0x10 (16)
0x4cd0ea80    96  ldr x17, pc+24 (addr 0x000000004cd0ea98)    ;; lazy deoptimization bailout 0
0x4cd0ea84   100  add x17, x17, x16
0x4cd0ea88   104  br x17
0x4cd0ea8c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0ea90   112  d63f03e0       constant
0x4cd0ea94   116  d503201f       constant
0x4cd0ea98   120  4cb06000       constant
0x4cd0ea9c   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0ea80  runtime entry
0x4cd0ea8c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4407
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0x4cd0eb20     0  mov x2, x1
0x4cd0eb24     4  tbnz w2, #0, #+0xc4 (addr 0x4cd0ebe8)
0x4cd0eb28     8  mov x3, x0
0x4cd0eb2c    12  tbnz w3, #0, #+0xcc (addr 0x4cd0ebf8)
0x4cd0eb30    16  scvtf d0, x2, #32
0x4cd0eb34    20  scvtf d1, x3, #32
0x4cd0eb38    24  fadd d0, d0, d1
0x4cd0eb3c    28  movz x1, #0xd2c0
0x4cd0eb40    32  movk x1, #0x166d, lsl #16
0x4cd0eb44    36  ldp x2, x0, [x1]
0x4cd0eb48    40  adds x16, x2, #0x10 (16)
0x4cd0eb4c    44  ccmp x16, x0, #nzCv, lo
0x4cd0eb50    48  b.hi #+0x20 (addr 0x4cd0eb70)
0x4cd0eb54    52  str x16, [x1]
0x4cd0eb58    56  ldr x1, [x26, #120]
0x4cd0eb5c    60  str x1, [x2]
0x4cd0eb60    64  orr x2, x2, #0x1
0x4cd0eb64    68  stur d0, [x2, #7]
0x4cd0eb68    72  mov x0, x2
0x4cd0eb6c    76  ret
0x4cd0eb70    80  sub csp, jssp, #0x10 (16)
0x4cd0eb74    84  stp fp, lr, [jssp, #-16]!
0x4cd0eb78    88  movz fp, #0xa00000000
0x4cd0eb7c    92  sub csp, jssp, #0x8 (8)
0x4cd0eb80    96  str fp, [jssp, #-8]!
0x4cd0eb84   100  add fp, jssp, #0x8 (8)
0x4cd0eb88   104  movz x2, #0x0
0x4cd0eb8c   108  mov x16, lr
0x4cd0eb90   112  ldr x17, pc+64 (addr 0x000000004cd0ebd0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0eb94   116  blr x17
0x4cd0eb98   120  ldur cp, [fp, #-8]
0x4cd0eb9c   124  movz x0, #0x0
0x4cd0eba0   128  movz x1, #0x4b48
0x4cd0eba4   132  movk x1, #0xe4, lsl #16
0x4cd0eba8   136  ldr x16, pc+48 (addr 0x000000004cd0ebd8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0ebac   140  blr x16
0x4cd0ebb0   144  str x0, [jssp, #16]
0x4cd0ebb4   148  ldr x16, pc+44 (addr 0x000000004cd0ebe0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0ebb8   152  blr x16
0x4cd0ebbc   156  ldr lr, [jssp, #16]
0x4cd0ebc0   160  ldp xzr, fp, [jssp], #24
0x4cd0ebc4   164  b #-0x60 (addr 0x4cd0eb64)
0x4cd0ebc8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0ebcc   172  d63f03e0       constant
0x4cd0ebd0   176  4cd06820       constant
0x4cd0ebd4   180  00000000       constant
0x4cd0ebd8   184  4cd06260       constant
0x4cd0ebdc   188  00000000       constant
0x4cd0ebe0   192  4cd068e0       constant
0x4cd0ebe4   196  00000000       constant
0x4cd0ebe8   200  movz x16, #0x0
0x4cd0ebec   204  sub csp, jssp, #0x10 (16)
0x4cd0ebf0   208  stp fp, lr, [jssp, #-16]!
0x4cd0ebf4   212  bl #+0x14 (addr 0x4cd0ec08)
0x4cd0ebf8   216  movz x16, #0x8
0x4cd0ebfc   220  sub csp, jssp, #0x10 (16)
0x4cd0ec00   224  stp fp, lr, [jssp, #-16]!
0x4cd0ec04   228  bl #+0x4 (addr 0x4cd0ec08)
0x4cd0ec08   232  movz x17, #0xa00000000
0x4cd0ec0c   236  sub csp, jssp, #0x10 (16)
0x4cd0ec10   240  stp x17, cp, [jssp, #-16]!
0x4cd0ec14   244  add fp, jssp, #0x10 (16)
0x4cd0ec18   248  ldr x17, pc+24 (addr 0x000000004cd0ec30)    ;; lazy deoptimization bailout 0
0x4cd0ec1c   252  add x17, x17, x16
0x4cd0ec20   256  br x17
0x4cd0ec24   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0ec28   264  d63f03e0       constant
0x4cd0ec2c   268  d503201f       constant
0x4cd0ec30   272  4cb06000       constant
0x4cd0ec34   276  00000000       constant


Safepoints (size = 21)
0x4cd0ebb0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd0eb90  code target (STUB)  (0x4cd06820)
0x4cd0eba8  code target (STUB)  (0x4cd06260)
0x4cd0ebb4  code target (STUB)  (0x4cd068e0)
0x4cd0ebc8  constant pool (size 32)
0x4cd0ec18  runtime entry
0x4cd0ec24  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4407
type = NORMAL
name = BinaryOpICStub(ADD:Int32*Int32->Number)
compiler = crankshaft
Instructions (size = 301)
0x4cd0eb20     0  mov x2, x1
0x4cd0eb24     4  tbnz w2, #0, #+0xc4 (addr 0x4cd0ebe8)
0x4cd0eb28     8  mov x3, x0
0x4cd0eb2c    12  tbnz w3, #0, #+0xcc (addr 0x4cd0ebf8)
0x4cd0eb30    16  scvtf d0, x2, #32
0x4cd0eb34    20  scvtf d1, x3, #32
0x4cd0eb38    24  fadd d0, d0, d1
0x4cd0eb3c    28  movz x1, #0xd2c0
0x4cd0eb40    32  movk x1, #0x166d, lsl #16
0x4cd0eb44    36  ldp x2, x0, [x1]
0x4cd0eb48    40  adds x16, x2, #0x10 (16)
0x4cd0eb4c    44  ccmp x16, x0, #nzCv, lo
0x4cd0eb50    48  b.hi #+0x20 (addr 0x4cd0eb70)
0x4cd0eb54    52  str x16, [x1]
0x4cd0eb58    56  ldr x1, [x26, #120]
0x4cd0eb5c    60  str x1, [x2]
0x4cd0eb60    64  orr x2, x2, #0x1
0x4cd0eb64    68  stur d0, [x2, #7]
0x4cd0eb68    72  mov x0, x2
0x4cd0eb6c    76  ret
0x4cd0eb70    80  sub csp, jssp, #0x10 (16)
0x4cd0eb74    84  stp fp, lr, [jssp, #-16]!
0x4cd0eb78    88  movz fp, #0xa00000000
0x4cd0eb7c    92  sub csp, jssp, #0x8 (8)
0x4cd0eb80    96  str fp, [jssp, #-8]!
0x4cd0eb84   100  add fp, jssp, #0x8 (8)
0x4cd0eb88   104  movz x2, #0x0
0x4cd0eb8c   108  mov x16, lr
0x4cd0eb90   112  ldr x17, pc+64 (addr 0x000000004cd0ebd0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0eb94   116  blr x17
0x4cd0eb98   120  ldur cp, [fp, #-8]
0x4cd0eb9c   124  movz x0, #0x0
0x4cd0eba0   128  movz x1, #0x4b48
0x4cd0eba4   132  movk x1, #0xe4, lsl #16
0x4cd0eba8   136  ldr x16, pc+48 (addr 0x000000004cd0ebd8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0ebac   140  blr x16
0x4cd0ebb0   144  str x0, [jssp, #16]
0x4cd0ebb4   148  ldr x16, pc+44 (addr 0x000000004cd0ebe0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0ebb8   152  blr x16
0x4cd0ebbc   156  ldr lr, [jssp, #16]
0x4cd0ebc0   160  ldp xzr, fp, [jssp], #24
0x4cd0ebc4   164  b #-0x60 (addr 0x4cd0eb64)
0x4cd0ebc8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0ebcc   172  d63f03e0       constant
0x4cd0ebd0   176  4cd06820       constant
0x4cd0ebd4   180  00000000       constant
0x4cd0ebd8   184  4cd06260       constant
0x4cd0ebdc   188  00000000       constant
0x4cd0ebe0   192  4cd068e0       constant
0x4cd0ebe4   196  00000000       constant
0x4cd0ebe8   200  movz x16, #0x0
0x4cd0ebec   204  sub csp, jssp, #0x10 (16)
0x4cd0ebf0   208  stp fp, lr, [jssp, #-16]!
0x4cd0ebf4   212  bl #+0x14 (addr 0x4cd0ec08)
0x4cd0ebf8   216  movz x16, #0x8
0x4cd0ebfc   220  sub csp, jssp, #0x10 (16)
0x4cd0ec00   224  stp fp, lr, [jssp, #-16]!
0x4cd0ec04   228  bl #+0x4 (addr 0x4cd0ec08)
0x4cd0ec08   232  movz x17, #0xa00000000
0x4cd0ec0c   236  sub csp, jssp, #0x10 (16)
0x4cd0ec10   240  stp x17, cp, [jssp, #-16]!
0x4cd0ec14   244  add fp, jssp, #0x10 (16)
0x4cd0ec18   248  ldr x17, pc+24 (addr 0x000000004cd0ec30)    ;; lazy deoptimization bailout 0
0x4cd0ec1c   252  add x17, x17, x16
0x4cd0ec20   256  br x17
0x4cd0ec24   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0ec28   264  d63f03e0       constant
0x4cd0ec2c   268  d503201f       constant
0x4cd0ec30   272  4cb06000       constant
0x4cd0ec34   276  00000000       constant


Safepoints (size = 21)
0x4cd0ebb0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd0eb90  code target (STUB)  (0x4cd06820)
0x4cd0eba8  code target (STUB)  (0x4cd06260)
0x4cd0ebb4  code target (STUB)  (0x4cd068e0)
0x4cd0ebc8  constant pool (size 32)
0x4cd0ec18  runtime entry
0x4cd0ec24  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6455
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0x4cd0ecc0     0  mov x2, x1
0x4cd0ecc4     4  tbnz w2, #0, #+0xf4 (addr 0x4cd0edb8)
0x4cd0ecc8     8  tbz w0, #0, #+0x34 (addr 0x4cd0ecfc)
0x4cd0eccc    12  ldur x16, [x0, #-1]
0x4cd0ecd0    16  ldr x17, [x26, #120]
0x4cd0ecd4    20  cmp x16, x17
0x4cd0ecd8    24  b.ne #+0xc (addr 0x4cd0ece4)
0x4cd0ecdc    28  ldur d0, [x0, #7]
0x4cd0ece0    32  b #+0x20 (addr 0x4cd0ed00)
0x4cd0ece4    36  ldr x16, [x26, #40]
0x4cd0ece8    40  cmp x0, x16
0x4cd0ecec    44  b.ne #+0xdc (addr 0x4cd0edc8)
0x4cd0ecf0    48  ldr x3, [x26, #928]
0x4cd0ecf4    52  ldur d0, [x3, #7]
0x4cd0ecf8    56  b #+0x8 (addr 0x4cd0ed00)
0x4cd0ecfc    60  scvtf d0, x0, #32
0x4cd0ed00    64  scvtf d1, x2, #32
0x4cd0ed04    68  fadd d0, d1, d0
0x4cd0ed08    72  movz x1, #0xd2c0
0x4cd0ed0c    76  movk x1, #0x166d, lsl #16
0x4cd0ed10    80  ldp x2, x0, [x1]
0x4cd0ed14    84  adds x16, x2, #0x10 (16)
0x4cd0ed18    88  ccmp x16, x0, #nzCv, lo
0x4cd0ed1c    92  b.hi #+0x20 (addr 0x4cd0ed3c)
0x4cd0ed20    96  str x16, [x1]
0x4cd0ed24   100  ldr x1, [x26, #120]
0x4cd0ed28   104  str x1, [x2]
0x4cd0ed2c   108  orr x2, x2, #0x1
0x4cd0ed30   112  stur d0, [x2, #7]
0x4cd0ed34   116  mov x0, x2
0x4cd0ed38   120  ret
0x4cd0ed3c   124  sub csp, jssp, #0x10 (16)
0x4cd0ed40   128  stp fp, lr, [jssp, #-16]!
0x4cd0ed44   132  movz fp, #0xa00000000
0x4cd0ed48   136  sub csp, jssp, #0x8 (8)
0x4cd0ed4c   140  str fp, [jssp, #-8]!
0x4cd0ed50   144  add fp, jssp, #0x8 (8)
0x4cd0ed54   148  movz x2, #0x0
0x4cd0ed58   152  mov x16, lr
0x4cd0ed5c   156  ldr x17, pc+68 (addr 0x000000004cd0eda0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0ed60   160  blr x17
0x4cd0ed64   164  ldur cp, [fp, #-8]
0x4cd0ed68   168  movz x0, #0x0
0x4cd0ed6c   172  movz x1, #0x4b48
0x4cd0ed70   176  movk x1, #0xe4, lsl #16
0x4cd0ed74   180  ldr x16, pc+52 (addr 0x000000004cd0eda8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0ed78   184  blr x16
0x4cd0ed7c   188  str x0, [jssp, #16]
0x4cd0ed80   192  ldr x16, pc+48 (addr 0x000000004cd0edb0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0ed84   196  blr x16
0x4cd0ed88   200  ldr lr, [jssp, #16]
0x4cd0ed8c   204  ldp xzr, fp, [jssp], #24
0x4cd0ed90   208  b #-0x60 (addr 0x4cd0ed30)
0x4cd0ed94   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd0ed98   216  d63f03e0       constant
0x4cd0ed9c   220  d503201f       constant
0x4cd0eda0   224  4cd06820       constant
0x4cd0eda4   228  00000000       constant
0x4cd0eda8   232  4cd06260       constant
0x4cd0edac   236  00000000       constant
0x4cd0edb0   240  4cd068e0       constant
0x4cd0edb4   244  00000000       constant
0x4cd0edb8   248  movz x16, #0x0
0x4cd0edbc   252  sub csp, jssp, #0x10 (16)
0x4cd0edc0   256  stp fp, lr, [jssp, #-16]!
0x4cd0edc4   260  bl #+0x14 (addr 0x4cd0edd8)
0x4cd0edc8   264  movz x16, #0x8
0x4cd0edcc   268  sub csp, jssp, #0x10 (16)
0x4cd0edd0   272  stp fp, lr, [jssp, #-16]!
0x4cd0edd4   276  bl #+0x4 (addr 0x4cd0edd8)
0x4cd0edd8   280  movz x17, #0xa00000000
0x4cd0eddc   284  sub csp, jssp, #0x10 (16)
0x4cd0ede0   288  stp x17, cp, [jssp, #-16]!
0x4cd0ede4   292  add fp, jssp, #0x10 (16)
0x4cd0ede8   296  ldr x17, pc+24 (addr 0x000000004cd0ee00)    ;; lazy deoptimization bailout 0
0x4cd0edec   300  add x17, x17, x16
0x4cd0edf0   304  br x17
0x4cd0edf4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0edf8   312  d63f03e0       constant
0x4cd0edfc   316  d503201f       constant
0x4cd0ee00   320  4cb06000       constant
0x4cd0ee04   324  00000000       constant


Safepoints (size = 21)
0x4cd0ed7c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd0ed5c  code target (STUB)  (0x4cd06820)
0x4cd0ed74  code target (STUB)  (0x4cd06260)
0x4cd0ed80  code target (STUB)  (0x4cd068e0)
0x4cd0ed94  constant pool (size 36)
0x4cd0ede8  runtime entry
0x4cd0edf4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6455
type = NORMAL
name = BinaryOpICStub(ADD:Int32*Number->Number)
compiler = crankshaft
Instructions (size = 349)
0x4cd0ecc0     0  mov x2, x1
0x4cd0ecc4     4  tbnz w2, #0, #+0xf4 (addr 0x4cd0edb8)
0x4cd0ecc8     8  tbz w0, #0, #+0x34 (addr 0x4cd0ecfc)
0x4cd0eccc    12  ldur x16, [x0, #-1]
0x4cd0ecd0    16  ldr x17, [x26, #120]
0x4cd0ecd4    20  cmp x16, x17
0x4cd0ecd8    24  b.ne #+0xc (addr 0x4cd0ece4)
0x4cd0ecdc    28  ldur d0, [x0, #7]
0x4cd0ece0    32  b #+0x20 (addr 0x4cd0ed00)
0x4cd0ece4    36  ldr x16, [x26, #40]
0x4cd0ece8    40  cmp x0, x16
0x4cd0ecec    44  b.ne #+0xdc (addr 0x4cd0edc8)
0x4cd0ecf0    48  ldr x3, [x26, #928]
0x4cd0ecf4    52  ldur d0, [x3, #7]
0x4cd0ecf8    56  b #+0x8 (addr 0x4cd0ed00)
0x4cd0ecfc    60  scvtf d0, x0, #32
0x4cd0ed00    64  scvtf d1, x2, #32
0x4cd0ed04    68  fadd d0, d1, d0
0x4cd0ed08    72  movz x1, #0xd2c0
0x4cd0ed0c    76  movk x1, #0x166d, lsl #16
0x4cd0ed10    80  ldp x2, x0, [x1]
0x4cd0ed14    84  adds x16, x2, #0x10 (16)
0x4cd0ed18    88  ccmp x16, x0, #nzCv, lo
0x4cd0ed1c    92  b.hi #+0x20 (addr 0x4cd0ed3c)
0x4cd0ed20    96  str x16, [x1]
0x4cd0ed24   100  ldr x1, [x26, #120]
0x4cd0ed28   104  str x1, [x2]
0x4cd0ed2c   108  orr x2, x2, #0x1
0x4cd0ed30   112  stur d0, [x2, #7]
0x4cd0ed34   116  mov x0, x2
0x4cd0ed38   120  ret
0x4cd0ed3c   124  sub csp, jssp, #0x10 (16)
0x4cd0ed40   128  stp fp, lr, [jssp, #-16]!
0x4cd0ed44   132  movz fp, #0xa00000000
0x4cd0ed48   136  sub csp, jssp, #0x8 (8)
0x4cd0ed4c   140  str fp, [jssp, #-8]!
0x4cd0ed50   144  add fp, jssp, #0x8 (8)
0x4cd0ed54   148  movz x2, #0x0
0x4cd0ed58   152  mov x16, lr
0x4cd0ed5c   156  ldr x17, pc+68 (addr 0x000000004cd0eda0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0ed60   160  blr x17
0x4cd0ed64   164  ldur cp, [fp, #-8]
0x4cd0ed68   168  movz x0, #0x0
0x4cd0ed6c   172  movz x1, #0x4b48
0x4cd0ed70   176  movk x1, #0xe4, lsl #16
0x4cd0ed74   180  ldr x16, pc+52 (addr 0x000000004cd0eda8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0ed78   184  blr x16
0x4cd0ed7c   188  str x0, [jssp, #16]
0x4cd0ed80   192  ldr x16, pc+48 (addr 0x000000004cd0edb0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0ed84   196  blr x16
0x4cd0ed88   200  ldr lr, [jssp, #16]
0x4cd0ed8c   204  ldp xzr, fp, [jssp], #24
0x4cd0ed90   208  b #-0x60 (addr 0x4cd0ed30)
0x4cd0ed94   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd0ed98   216  d63f03e0       constant
0x4cd0ed9c   220  d503201f       constant
0x4cd0eda0   224  4cd06820       constant
0x4cd0eda4   228  00000000       constant
0x4cd0eda8   232  4cd06260       constant
0x4cd0edac   236  00000000       constant
0x4cd0edb0   240  4cd068e0       constant
0x4cd0edb4   244  00000000       constant
0x4cd0edb8   248  movz x16, #0x0
0x4cd0edbc   252  sub csp, jssp, #0x10 (16)
0x4cd0edc0   256  stp fp, lr, [jssp, #-16]!
0x4cd0edc4   260  bl #+0x14 (addr 0x4cd0edd8)
0x4cd0edc8   264  movz x16, #0x8
0x4cd0edcc   268  sub csp, jssp, #0x10 (16)
0x4cd0edd0   272  stp fp, lr, [jssp, #-16]!
0x4cd0edd4   276  bl #+0x4 (addr 0x4cd0edd8)
0x4cd0edd8   280  movz x17, #0xa00000000
0x4cd0eddc   284  sub csp, jssp, #0x10 (16)
0x4cd0ede0   288  stp x17, cp, [jssp, #-16]!
0x4cd0ede4   292  add fp, jssp, #0x10 (16)
0x4cd0ede8   296  ldr x17, pc+24 (addr 0x000000004cd0ee00)    ;; lazy deoptimization bailout 0
0x4cd0edec   300  add x17, x17, x16
0x4cd0edf0   304  br x17
0x4cd0edf4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0edf8   312  d63f03e0       constant
0x4cd0edfc   316  d503201f       constant
0x4cd0ee00   320  4cb06000       constant
0x4cd0ee04   324  00000000       constant


Safepoints (size = 21)
0x4cd0ed7c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd0ed5c  code target (STUB)  (0x4cd06820)
0x4cd0ed74  code target (STUB)  (0x4cd06260)
0x4cd0ed80  code target (STUB)  (0x4cd068e0)
0x4cd0ed94  constant pool (size 36)
0x4cd0ede8  runtime entry
0x4cd0edf4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2343
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0x4cd0ee80     0  mov x2, x1
0x4cd0ee84     4  tbnz w2, #0, #+0x1c (addr 0x4cd0eea0)
0x4cd0ee88     8  mov x3, x0
0x4cd0ee8c    12  tbnz w3, #0, #+0x24 (addr 0x4cd0eeb0)
0x4cd0ee90    16  adds x2, x3, x2
0x4cd0ee94    20  b.vs #+0x2c (addr 0x4cd0eec0)
0x4cd0ee98    24  mov x0, x2
0x4cd0ee9c    28  ret
0x4cd0eea0    32  movz x16, #0x0
0x4cd0eea4    36  sub csp, jssp, #0x10 (16)
0x4cd0eea8    40  stp fp, lr, [jssp, #-16]!
0x4cd0eeac    44  bl #+0x24 (addr 0x4cd0eed0)
0x4cd0eeb0    48  movz x16, #0x8
0x4cd0eeb4    52  sub csp, jssp, #0x10 (16)
0x4cd0eeb8    56  stp fp, lr, [jssp, #-16]!
0x4cd0eebc    60  bl #+0x14 (addr 0x4cd0eed0)
0x4cd0eec0    64  movz x16, #0x10
0x4cd0eec4    68  sub csp, jssp, #0x10 (16)
0x4cd0eec8    72  stp fp, lr, [jssp, #-16]!
0x4cd0eecc    76  bl #+0x4 (addr 0x4cd0eed0)
0x4cd0eed0    80  movz x17, #0xa00000000
0x4cd0eed4    84  sub csp, jssp, #0x10 (16)
0x4cd0eed8    88  stp x17, cp, [jssp, #-16]!
0x4cd0eedc    92  add fp, jssp, #0x10 (16)
0x4cd0eee0    96  ldr x17, pc+24 (addr 0x000000004cd0eef8)    ;; lazy deoptimization bailout 0
0x4cd0eee4   100  add x17, x17, x16
0x4cd0eee8   104  br x17
0x4cd0eeec   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0eef0   112  d63f03e0       constant
0x4cd0eef4   116  d503201f       constant
0x4cd0eef8   120  4cb06000       constant
0x4cd0eefc   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0eee0  runtime entry
0x4cd0eeec  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2343
type = NORMAL
name = BinaryOpICStub(ADD:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 136)
0x4cd0ee80     0  mov x2, x1
0x4cd0ee84     4  tbnz w2, #0, #+0x1c (addr 0x4cd0eea0)
0x4cd0ee88     8  mov x3, x0
0x4cd0ee8c    12  tbnz w3, #0, #+0x24 (addr 0x4cd0eeb0)
0x4cd0ee90    16  adds x2, x3, x2
0x4cd0ee94    20  b.vs #+0x2c (addr 0x4cd0eec0)
0x4cd0ee98    24  mov x0, x2
0x4cd0ee9c    28  ret
0x4cd0eea0    32  movz x16, #0x0
0x4cd0eea4    36  sub csp, jssp, #0x10 (16)
0x4cd0eea8    40  stp fp, lr, [jssp, #-16]!
0x4cd0eeac    44  bl #+0x24 (addr 0x4cd0eed0)
0x4cd0eeb0    48  movz x16, #0x8
0x4cd0eeb4    52  sub csp, jssp, #0x10 (16)
0x4cd0eeb8    56  stp fp, lr, [jssp, #-16]!
0x4cd0eebc    60  bl #+0x14 (addr 0x4cd0eed0)
0x4cd0eec0    64  movz x16, #0x10
0x4cd0eec4    68  sub csp, jssp, #0x10 (16)
0x4cd0eec8    72  stp fp, lr, [jssp, #-16]!
0x4cd0eecc    76  bl #+0x4 (addr 0x4cd0eed0)
0x4cd0eed0    80  movz x17, #0xa00000000
0x4cd0eed4    84  sub csp, jssp, #0x10 (16)
0x4cd0eed8    88  stp x17, cp, [jssp, #-16]!
0x4cd0eedc    92  add fp, jssp, #0x10 (16)
0x4cd0eee0    96  ldr x17, pc+24 (addr 0x000000004cd0eef8)    ;; lazy deoptimization bailout 0
0x4cd0eee4   100  add x17, x17, x16
0x4cd0eee8   104  br x17
0x4cd0eeec   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0eef0   112  d63f03e0       constant
0x4cd0eef4   116  d503201f       constant
0x4cd0eef8   120  4cb06000       constant
0x4cd0eefc   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0eee0  runtime entry
0x4cd0eeec  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4535
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0x4cd0ef80     0  mov x2, x0
0x4cd0ef84     4  tbnz w2, #0, #+0xf4 (addr 0x4cd0f078)
0x4cd0ef88     8  tbz w1, #0, #+0x34 (addr 0x4cd0efbc)
0x4cd0ef8c    12  ldur x16, [x1, #-1]
0x4cd0ef90    16  ldr x17, [x26, #120]
0x4cd0ef94    20  cmp x16, x17
0x4cd0ef98    24  b.ne #+0xc (addr 0x4cd0efa4)
0x4cd0ef9c    28  ldur d0, [x1, #7]
0x4cd0efa0    32  b #+0x20 (addr 0x4cd0efc0)
0x4cd0efa4    36  ldr x16, [x26, #40]
0x4cd0efa8    40  cmp x1, x16
0x4cd0efac    44  b.ne #+0xdc (addr 0x4cd0f088)
0x4cd0efb0    48  ldr x3, [x26, #928]
0x4cd0efb4    52  ldur d0, [x3, #7]
0x4cd0efb8    56  b #+0x8 (addr 0x4cd0efc0)
0x4cd0efbc    60  scvtf d0, x1, #32
0x4cd0efc0    64  scvtf d1, x2, #32
0x4cd0efc4    68  fadd d0, d0, d1
0x4cd0efc8    72  movz x1, #0xd2c0
0x4cd0efcc    76  movk x1, #0x166d, lsl #16
0x4cd0efd0    80  ldp x2, x0, [x1]
0x4cd0efd4    84  adds x16, x2, #0x10 (16)
0x4cd0efd8    88  ccmp x16, x0, #nzCv, lo
0x4cd0efdc    92  b.hi #+0x20 (addr 0x4cd0effc)
0x4cd0efe0    96  str x16, [x1]
0x4cd0efe4   100  ldr x1, [x26, #120]
0x4cd0efe8   104  str x1, [x2]
0x4cd0efec   108  orr x2, x2, #0x1
0x4cd0eff0   112  stur d0, [x2, #7]
0x4cd0eff4   116  mov x0, x2
0x4cd0eff8   120  ret
0x4cd0effc   124  sub csp, jssp, #0x10 (16)
0x4cd0f000   128  stp fp, lr, [jssp, #-16]!
0x4cd0f004   132  movz fp, #0xa00000000
0x4cd0f008   136  sub csp, jssp, #0x8 (8)
0x4cd0f00c   140  str fp, [jssp, #-8]!
0x4cd0f010   144  add fp, jssp, #0x8 (8)
0x4cd0f014   148  movz x2, #0x0
0x4cd0f018   152  mov x16, lr
0x4cd0f01c   156  ldr x17, pc+68 (addr 0x000000004cd0f060)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0f020   160  blr x17
0x4cd0f024   164  ldur cp, [fp, #-8]
0x4cd0f028   168  movz x0, #0x0
0x4cd0f02c   172  movz x1, #0x4b48
0x4cd0f030   176  movk x1, #0xe4, lsl #16
0x4cd0f034   180  ldr x16, pc+52 (addr 0x000000004cd0f068)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0f038   184  blr x16
0x4cd0f03c   188  str x0, [jssp, #16]
0x4cd0f040   192  ldr x16, pc+48 (addr 0x000000004cd0f070)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0f044   196  blr x16
0x4cd0f048   200  ldr lr, [jssp, #16]
0x4cd0f04c   204  ldp xzr, fp, [jssp], #24
0x4cd0f050   208  b #-0x60 (addr 0x4cd0eff0)
0x4cd0f054   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd0f058   216  d63f03e0       constant
0x4cd0f05c   220  d503201f       constant
0x4cd0f060   224  4cd06820       constant
0x4cd0f064   228  00000000       constant
0x4cd0f068   232  4cd06260       constant
0x4cd0f06c   236  00000000       constant
0x4cd0f070   240  4cd068e0       constant
0x4cd0f074   244  00000000       constant
0x4cd0f078   248  movz x16, #0x0
0x4cd0f07c   252  sub csp, jssp, #0x10 (16)
0x4cd0f080   256  stp fp, lr, [jssp, #-16]!
0x4cd0f084   260  bl #+0x14 (addr 0x4cd0f098)
0x4cd0f088   264  movz x16, #0x8
0x4cd0f08c   268  sub csp, jssp, #0x10 (16)
0x4cd0f090   272  stp fp, lr, [jssp, #-16]!
0x4cd0f094   276  bl #+0x4 (addr 0x4cd0f098)
0x4cd0f098   280  movz x17, #0xa00000000
0x4cd0f09c   284  sub csp, jssp, #0x10 (16)
0x4cd0f0a0   288  stp x17, cp, [jssp, #-16]!
0x4cd0f0a4   292  add fp, jssp, #0x10 (16)
0x4cd0f0a8   296  ldr x17, pc+24 (addr 0x000000004cd0f0c0)    ;; lazy deoptimization bailout 0
0x4cd0f0ac   300  add x17, x17, x16
0x4cd0f0b0   304  br x17
0x4cd0f0b4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0f0b8   312  d63f03e0       constant
0x4cd0f0bc   316  d503201f       constant
0x4cd0f0c0   320  4cb06000       constant
0x4cd0f0c4   324  00000000       constant


Safepoints (size = 21)
0x4cd0f03c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd0f01c  code target (STUB)  (0x4cd06820)
0x4cd0f034  code target (STUB)  (0x4cd06260)
0x4cd0f040  code target (STUB)  (0x4cd068e0)
0x4cd0f054  constant pool (size 36)
0x4cd0f0a8  runtime entry
0x4cd0f0b4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4535
type = NORMAL
name = BinaryOpICStub(ADD:Number*Int32->Number)
compiler = crankshaft
Instructions (size = 349)
0x4cd0ef80     0  mov x2, x0
0x4cd0ef84     4  tbnz w2, #0, #+0xf4 (addr 0x4cd0f078)
0x4cd0ef88     8  tbz w1, #0, #+0x34 (addr 0x4cd0efbc)
0x4cd0ef8c    12  ldur x16, [x1, #-1]
0x4cd0ef90    16  ldr x17, [x26, #120]
0x4cd0ef94    20  cmp x16, x17
0x4cd0ef98    24  b.ne #+0xc (addr 0x4cd0efa4)
0x4cd0ef9c    28  ldur d0, [x1, #7]
0x4cd0efa0    32  b #+0x20 (addr 0x4cd0efc0)
0x4cd0efa4    36  ldr x16, [x26, #40]
0x4cd0efa8    40  cmp x1, x16
0x4cd0efac    44  b.ne #+0xdc (addr 0x4cd0f088)
0x4cd0efb0    48  ldr x3, [x26, #928]
0x4cd0efb4    52  ldur d0, [x3, #7]
0x4cd0efb8    56  b #+0x8 (addr 0x4cd0efc0)
0x4cd0efbc    60  scvtf d0, x1, #32
0x4cd0efc0    64  scvtf d1, x2, #32
0x4cd0efc4    68  fadd d0, d0, d1
0x4cd0efc8    72  movz x1, #0xd2c0
0x4cd0efcc    76  movk x1, #0x166d, lsl #16
0x4cd0efd0    80  ldp x2, x0, [x1]
0x4cd0efd4    84  adds x16, x2, #0x10 (16)
0x4cd0efd8    88  ccmp x16, x0, #nzCv, lo
0x4cd0efdc    92  b.hi #+0x20 (addr 0x4cd0effc)
0x4cd0efe0    96  str x16, [x1]
0x4cd0efe4   100  ldr x1, [x26, #120]
0x4cd0efe8   104  str x1, [x2]
0x4cd0efec   108  orr x2, x2, #0x1
0x4cd0eff0   112  stur d0, [x2, #7]
0x4cd0eff4   116  mov x0, x2
0x4cd0eff8   120  ret
0x4cd0effc   124  sub csp, jssp, #0x10 (16)
0x4cd0f000   128  stp fp, lr, [jssp, #-16]!
0x4cd0f004   132  movz fp, #0xa00000000
0x4cd0f008   136  sub csp, jssp, #0x8 (8)
0x4cd0f00c   140  str fp, [jssp, #-8]!
0x4cd0f010   144  add fp, jssp, #0x8 (8)
0x4cd0f014   148  movz x2, #0x0
0x4cd0f018   152  mov x16, lr
0x4cd0f01c   156  ldr x17, pc+68 (addr 0x000000004cd0f060)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0f020   160  blr x17
0x4cd0f024   164  ldur cp, [fp, #-8]
0x4cd0f028   168  movz x0, #0x0
0x4cd0f02c   172  movz x1, #0x4b48
0x4cd0f030   176  movk x1, #0xe4, lsl #16
0x4cd0f034   180  ldr x16, pc+52 (addr 0x000000004cd0f068)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0f038   184  blr x16
0x4cd0f03c   188  str x0, [jssp, #16]
0x4cd0f040   192  ldr x16, pc+48 (addr 0x000000004cd0f070)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0f044   196  blr x16
0x4cd0f048   200  ldr lr, [jssp, #16]
0x4cd0f04c   204  ldp xzr, fp, [jssp], #24
0x4cd0f050   208  b #-0x60 (addr 0x4cd0eff0)
0x4cd0f054   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd0f058   216  d63f03e0       constant
0x4cd0f05c   220  d503201f       constant
0x4cd0f060   224  4cd06820       constant
0x4cd0f064   228  00000000       constant
0x4cd0f068   232  4cd06260       constant
0x4cd0f06c   236  00000000       constant
0x4cd0f070   240  4cd068e0       constant
0x4cd0f074   244  00000000       constant
0x4cd0f078   248  movz x16, #0x0
0x4cd0f07c   252  sub csp, jssp, #0x10 (16)
0x4cd0f080   256  stp fp, lr, [jssp, #-16]!
0x4cd0f084   260  bl #+0x14 (addr 0x4cd0f098)
0x4cd0f088   264  movz x16, #0x8
0x4cd0f08c   268  sub csp, jssp, #0x10 (16)
0x4cd0f090   272  stp fp, lr, [jssp, #-16]!
0x4cd0f094   276  bl #+0x4 (addr 0x4cd0f098)
0x4cd0f098   280  movz x17, #0xa00000000
0x4cd0f09c   284  sub csp, jssp, #0x10 (16)
0x4cd0f0a0   288  stp x17, cp, [jssp, #-16]!
0x4cd0f0a4   292  add fp, jssp, #0x10 (16)
0x4cd0f0a8   296  ldr x17, pc+24 (addr 0x000000004cd0f0c0)    ;; lazy deoptimization bailout 0
0x4cd0f0ac   300  add x17, x17, x16
0x4cd0f0b0   304  br x17
0x4cd0f0b4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0f0b8   312  d63f03e0       constant
0x4cd0f0bc   316  d503201f       constant
0x4cd0f0c0   320  4cb06000       constant
0x4cd0f0c4   324  00000000       constant


Safepoints (size = 21)
0x4cd0f03c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd0f01c  code target (STUB)  (0x4cd06820)
0x4cd0f034  code target (STUB)  (0x4cd06260)
0x4cd0f040  code target (STUB)  (0x4cd068e0)
0x4cd0f054  constant pool (size 36)
0x4cd0f0a8  runtime entry
0x4cd0f0b4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6583
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 389)
0x4cd0f140     0  tbz w1, #0, #+0x34 (addr 0x4cd0f174)
0x4cd0f144     4  ldur x16, [x1, #-1]
0x4cd0f148     8  ldr x17, [x26, #120]
0x4cd0f14c    12  cmp x16, x17
0x4cd0f150    16  b.ne #+0xc (addr 0x4cd0f15c)
0x4cd0f154    20  ldur d0, [x1, #7]
0x4cd0f158    24  b #+0x20 (addr 0x4cd0f178)
0x4cd0f15c    28  ldr x16, [x26, #40]
0x4cd0f160    32  cmp x1, x16
0x4cd0f164    36  b.ne #+0xfc (addr 0x4cd0f260)
0x4cd0f168    40  ldr x2, [x26, #928]
0x4cd0f16c    44  ldur d0, [x2, #7]
0x4cd0f170    48  b #+0x8 (addr 0x4cd0f178)
0x4cd0f174    52  scvtf d0, x1, #32
0x4cd0f178    56  tbz w0, #0, #+0x34 (addr 0x4cd0f1ac)
0x4cd0f17c    60  ldur x16, [x0, #-1]
0x4cd0f180    64  ldr x17, [x26, #120]
0x4cd0f184    68  cmp x16, x17
0x4cd0f188    72  b.ne #+0xc (addr 0x4cd0f194)
0x4cd0f18c    76  ldur d1, [x0, #7]
0x4cd0f190    80  b #+0x20 (addr 0x4cd0f1b0)
0x4cd0f194    84  ldr x16, [x26, #40]
0x4cd0f198    88  cmp x0, x16
0x4cd0f19c    92  b.ne #+0xd4 (addr 0x4cd0f270)
0x4cd0f1a0    96  ldr x2, [x26, #928]
0x4cd0f1a4   100  ldur d1, [x2, #7]
0x4cd0f1a8   104  b #+0x8 (addr 0x4cd0f1b0)
0x4cd0f1ac   108  scvtf d1, x0, #32
0x4cd0f1b0   112  fadd d0, d0, d1
0x4cd0f1b4   116  movz x1, #0xd2c0
0x4cd0f1b8   120  movk x1, #0x166d, lsl #16
0x4cd0f1bc   124  ldp x2, x0, [x1]
0x4cd0f1c0   128  adds x16, x2, #0x10 (16)
0x4cd0f1c4   132  ccmp x16, x0, #nzCv, lo
0x4cd0f1c8   136  b.hi #+0x20 (addr 0x4cd0f1e8)
0x4cd0f1cc   140  str x16, [x1]
0x4cd0f1d0   144  ldr x1, [x26, #120]
0x4cd0f1d4   148  str x1, [x2]
0x4cd0f1d8   152  orr x2, x2, #0x1
0x4cd0f1dc   156  stur d0, [x2, #7]
0x4cd0f1e0   160  mov x0, x2
0x4cd0f1e4   164  ret
0x4cd0f1e8   168  sub csp, jssp, #0x10 (16)
0x4cd0f1ec   172  stp fp, lr, [jssp, #-16]!
0x4cd0f1f0   176  movz fp, #0xa00000000
0x4cd0f1f4   180  sub csp, jssp, #0x8 (8)
0x4cd0f1f8   184  str fp, [jssp, #-8]!
0x4cd0f1fc   188  add fp, jssp, #0x8 (8)
0x4cd0f200   192  movz x2, #0x0
0x4cd0f204   196  mov x16, lr
0x4cd0f208   200  ldr x17, pc+64 (addr 0x000000004cd0f248)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0f20c   204  blr x17
0x4cd0f210   208  ldur cp, [fp, #-8]
0x4cd0f214   212  movz x0, #0x0
0x4cd0f218   216  movz x1, #0x4b48
0x4cd0f21c   220  movk x1, #0xe4, lsl #16
0x4cd0f220   224  ldr x16, pc+48 (addr 0x000000004cd0f250)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0f224   228  blr x16
0x4cd0f228   232  str x0, [jssp, #16]
0x4cd0f22c   236  ldr x16, pc+44 (addr 0x000000004cd0f258)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0f230   240  blr x16
0x4cd0f234   244  ldr lr, [jssp, #16]
0x4cd0f238   248  ldp xzr, fp, [jssp], #24
0x4cd0f23c   252  b #-0x60 (addr 0x4cd0f1dc)
0x4cd0f240   256  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0f244   260  d63f03e0       constant
0x4cd0f248   264  4cd06820       constant
0x4cd0f24c   268  00000000       constant
0x4cd0f250   272  4cd06260       constant
0x4cd0f254   276  00000000       constant
0x4cd0f258   280  4cd068e0       constant
0x4cd0f25c   284  00000000       constant
0x4cd0f260   288  movz x16, #0x0
0x4cd0f264   292  sub csp, jssp, #0x10 (16)
0x4cd0f268   296  stp fp, lr, [jssp, #-16]!
0x4cd0f26c   300  bl #+0x14 (addr 0x4cd0f280)
0x4cd0f270   304  movz x16, #0x8
0x4cd0f274   308  sub csp, jssp, #0x10 (16)
0x4cd0f278   312  stp fp, lr, [jssp, #-16]!
0x4cd0f27c   316  bl #+0x4 (addr 0x4cd0f280)
0x4cd0f280   320  movz x17, #0xa00000000
0x4cd0f284   324  sub csp, jssp, #0x10 (16)
0x4cd0f288   328  stp x17, cp, [jssp, #-16]!
0x4cd0f28c   332  add fp, jssp, #0x10 (16)
0x4cd0f290   336  ldr x17, pc+24 (addr 0x000000004cd0f2a8)    ;; lazy deoptimization bailout 0
0x4cd0f294   340  add x17, x17, x16
0x4cd0f298   344  br x17
0x4cd0f29c   348  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0f2a0   352  d63f03e0       constant
0x4cd0f2a4   356  d503201f       constant
0x4cd0f2a8   360  4cb06000       constant
0x4cd0f2ac   364  00000000       constant


Safepoints (size = 21)
0x4cd0f228   232  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd0f208  code target (STUB)  (0x4cd06820)
0x4cd0f220  code target (STUB)  (0x4cd06260)
0x4cd0f22c  code target (STUB)  (0x4cd068e0)
0x4cd0f240  constant pool (size 32)
0x4cd0f290  runtime entry
0x4cd0f29c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6583
type = NORMAL
name = BinaryOpICStub(ADD:Number*Number->Number)
compiler = crankshaft
Instructions (size = 389)
0x4cd0f140     0  tbz w1, #0, #+0x34 (addr 0x4cd0f174)
0x4cd0f144     4  ldur x16, [x1, #-1]
0x4cd0f148     8  ldr x17, [x26, #120]
0x4cd0f14c    12  cmp x16, x17
0x4cd0f150    16  b.ne #+0xc (addr 0x4cd0f15c)
0x4cd0f154    20  ldur d0, [x1, #7]
0x4cd0f158    24  b #+0x20 (addr 0x4cd0f178)
0x4cd0f15c    28  ldr x16, [x26, #40]
0x4cd0f160    32  cmp x1, x16
0x4cd0f164    36  b.ne #+0xfc (addr 0x4cd0f260)
0x4cd0f168    40  ldr x2, [x26, #928]
0x4cd0f16c    44  ldur d0, [x2, #7]
0x4cd0f170    48  b #+0x8 (addr 0x4cd0f178)
0x4cd0f174    52  scvtf d0, x1, #32
0x4cd0f178    56  tbz w0, #0, #+0x34 (addr 0x4cd0f1ac)
0x4cd0f17c    60  ldur x16, [x0, #-1]
0x4cd0f180    64  ldr x17, [x26, #120]
0x4cd0f184    68  cmp x16, x17
0x4cd0f188    72  b.ne #+0xc (addr 0x4cd0f194)
0x4cd0f18c    76  ldur d1, [x0, #7]
0x4cd0f190    80  b #+0x20 (addr 0x4cd0f1b0)
0x4cd0f194    84  ldr x16, [x26, #40]
0x4cd0f198    88  cmp x0, x16
0x4cd0f19c    92  b.ne #+0xd4 (addr 0x4cd0f270)
0x4cd0f1a0    96  ldr x2, [x26, #928]
0x4cd0f1a4   100  ldur d1, [x2, #7]
0x4cd0f1a8   104  b #+0x8 (addr 0x4cd0f1b0)
0x4cd0f1ac   108  scvtf d1, x0, #32
0x4cd0f1b0   112  fadd d0, d0, d1
0x4cd0f1b4   116  movz x1, #0xd2c0
0x4cd0f1b8   120  movk x1, #0x166d, lsl #16
0x4cd0f1bc   124  ldp x2, x0, [x1]
0x4cd0f1c0   128  adds x16, x2, #0x10 (16)
0x4cd0f1c4   132  ccmp x16, x0, #nzCv, lo
0x4cd0f1c8   136  b.hi #+0x20 (addr 0x4cd0f1e8)
0x4cd0f1cc   140  str x16, [x1]
0x4cd0f1d0   144  ldr x1, [x26, #120]
0x4cd0f1d4   148  str x1, [x2]
0x4cd0f1d8   152  orr x2, x2, #0x1
0x4cd0f1dc   156  stur d0, [x2, #7]
0x4cd0f1e0   160  mov x0, x2
0x4cd0f1e4   164  ret
0x4cd0f1e8   168  sub csp, jssp, #0x10 (16)
0x4cd0f1ec   172  stp fp, lr, [jssp, #-16]!
0x4cd0f1f0   176  movz fp, #0xa00000000
0x4cd0f1f4   180  sub csp, jssp, #0x8 (8)
0x4cd0f1f8   184  str fp, [jssp, #-8]!
0x4cd0f1fc   188  add fp, jssp, #0x8 (8)
0x4cd0f200   192  movz x2, #0x0
0x4cd0f204   196  mov x16, lr
0x4cd0f208   200  ldr x17, pc+64 (addr 0x000000004cd0f248)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0f20c   204  blr x17
0x4cd0f210   208  ldur cp, [fp, #-8]
0x4cd0f214   212  movz x0, #0x0
0x4cd0f218   216  movz x1, #0x4b48
0x4cd0f21c   220  movk x1, #0xe4, lsl #16
0x4cd0f220   224  ldr x16, pc+48 (addr 0x000000004cd0f250)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0f224   228  blr x16
0x4cd0f228   232  str x0, [jssp, #16]
0x4cd0f22c   236  ldr x16, pc+44 (addr 0x000000004cd0f258)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0f230   240  blr x16
0x4cd0f234   244  ldr lr, [jssp, #16]
0x4cd0f238   248  ldp xzr, fp, [jssp], #24
0x4cd0f23c   252  b #-0x60 (addr 0x4cd0f1dc)
0x4cd0f240   256  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0f244   260  d63f03e0       constant
0x4cd0f248   264  4cd06820       constant
0x4cd0f24c   268  00000000       constant
0x4cd0f250   272  4cd06260       constant
0x4cd0f254   276  00000000       constant
0x4cd0f258   280  4cd068e0       constant
0x4cd0f25c   284  00000000       constant
0x4cd0f260   288  movz x16, #0x0
0x4cd0f264   292  sub csp, jssp, #0x10 (16)
0x4cd0f268   296  stp fp, lr, [jssp, #-16]!
0x4cd0f26c   300  bl #+0x14 (addr 0x4cd0f280)
0x4cd0f270   304  movz x16, #0x8
0x4cd0f274   308  sub csp, jssp, #0x10 (16)
0x4cd0f278   312  stp fp, lr, [jssp, #-16]!
0x4cd0f27c   316  bl #+0x4 (addr 0x4cd0f280)
0x4cd0f280   320  movz x17, #0xa00000000
0x4cd0f284   324  sub csp, jssp, #0x10 (16)
0x4cd0f288   328  stp x17, cp, [jssp, #-16]!
0x4cd0f28c   332  add fp, jssp, #0x10 (16)
0x4cd0f290   336  ldr x17, pc+24 (addr 0x000000004cd0f2a8)    ;; lazy deoptimization bailout 0
0x4cd0f294   340  add x17, x17, x16
0x4cd0f298   344  br x17
0x4cd0f29c   348  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0f2a0   352  d63f03e0       constant
0x4cd0f2a4   356  d503201f       constant
0x4cd0f2a8   360  4cb06000       constant
0x4cd0f2ac   364  00000000       constant


Safepoints (size = 21)
0x4cd0f228   232  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd0f208  code target (STUB)  (0x4cd06820)
0x4cd0f220  code target (STUB)  (0x4cd06260)
0x4cd0f22c  code target (STUB)  (0x4cd068e0)
0x4cd0f240  constant pool (size 32)
0x4cd0f290  runtime entry
0x4cd0f29c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2487
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0x4cd0f340     0  mov x2, x0
0x4cd0f344     4  tbnz w2, #0, #+0xf4 (addr 0x4cd0f438)
0x4cd0f348     8  tbz w1, #0, #+0x34 (addr 0x4cd0f37c)
0x4cd0f34c    12  ldur x16, [x1, #-1]
0x4cd0f350    16  ldr x17, [x26, #120]
0x4cd0f354    20  cmp x16, x17
0x4cd0f358    24  b.ne #+0xc (addr 0x4cd0f364)
0x4cd0f35c    28  ldur d0, [x1, #7]
0x4cd0f360    32  b #+0x20 (addr 0x4cd0f380)
0x4cd0f364    36  ldr x16, [x26, #40]
0x4cd0f368    40  cmp x1, x16
0x4cd0f36c    44  b.ne #+0xdc (addr 0x4cd0f448)
0x4cd0f370    48  ldr x3, [x26, #928]
0x4cd0f374    52  ldur d0, [x3, #7]
0x4cd0f378    56  b #+0x8 (addr 0x4cd0f380)
0x4cd0f37c    60  scvtf d0, x1, #32
0x4cd0f380    64  scvtf d1, x2, #32
0x4cd0f384    68  fadd d0, d0, d1
0x4cd0f388    72  movz x1, #0xd2c0
0x4cd0f38c    76  movk x1, #0x166d, lsl #16
0x4cd0f390    80  ldp x2, x0, [x1]
0x4cd0f394    84  adds x16, x2, #0x10 (16)
0x4cd0f398    88  ccmp x16, x0, #nzCv, lo
0x4cd0f39c    92  b.hi #+0x20 (addr 0x4cd0f3bc)
0x4cd0f3a0    96  str x16, [x1]
0x4cd0f3a4   100  ldr x1, [x26, #120]
0x4cd0f3a8   104  str x1, [x2]
0x4cd0f3ac   108  orr x2, x2, #0x1
0x4cd0f3b0   112  stur d0, [x2, #7]
0x4cd0f3b4   116  mov x0, x2
0x4cd0f3b8   120  ret
0x4cd0f3bc   124  sub csp, jssp, #0x10 (16)
0x4cd0f3c0   128  stp fp, lr, [jssp, #-16]!
0x4cd0f3c4   132  movz fp, #0xa00000000
0x4cd0f3c8   136  sub csp, jssp, #0x8 (8)
0x4cd0f3cc   140  str fp, [jssp, #-8]!
0x4cd0f3d0   144  add fp, jssp, #0x8 (8)
0x4cd0f3d4   148  movz x2, #0x0
0x4cd0f3d8   152  mov x16, lr
0x4cd0f3dc   156  ldr x17, pc+68 (addr 0x000000004cd0f420)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0f3e0   160  blr x17
0x4cd0f3e4   164  ldur cp, [fp, #-8]
0x4cd0f3e8   168  movz x0, #0x0
0x4cd0f3ec   172  movz x1, #0x4b48
0x4cd0f3f0   176  movk x1, #0xe4, lsl #16
0x4cd0f3f4   180  ldr x16, pc+52 (addr 0x000000004cd0f428)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0f3f8   184  blr x16
0x4cd0f3fc   188  str x0, [jssp, #16]
0x4cd0f400   192  ldr x16, pc+48 (addr 0x000000004cd0f430)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0f404   196  blr x16
0x4cd0f408   200  ldr lr, [jssp, #16]
0x4cd0f40c   204  ldp xzr, fp, [jssp], #24
0x4cd0f410   208  b #-0x60 (addr 0x4cd0f3b0)
0x4cd0f414   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd0f418   216  d63f03e0       constant
0x4cd0f41c   220  d503201f       constant
0x4cd0f420   224  4cd06820       constant
0x4cd0f424   228  00000000       constant
0x4cd0f428   232  4cd06260       constant
0x4cd0f42c   236  00000000       constant
0x4cd0f430   240  4cd068e0       constant
0x4cd0f434   244  00000000       constant
0x4cd0f438   248  movz x16, #0x0
0x4cd0f43c   252  sub csp, jssp, #0x10 (16)
0x4cd0f440   256  stp fp, lr, [jssp, #-16]!
0x4cd0f444   260  bl #+0x14 (addr 0x4cd0f458)
0x4cd0f448   264  movz x16, #0x8
0x4cd0f44c   268  sub csp, jssp, #0x10 (16)
0x4cd0f450   272  stp fp, lr, [jssp, #-16]!
0x4cd0f454   276  bl #+0x4 (addr 0x4cd0f458)
0x4cd0f458   280  movz x17, #0xa00000000
0x4cd0f45c   284  sub csp, jssp, #0x10 (16)
0x4cd0f460   288  stp x17, cp, [jssp, #-16]!
0x4cd0f464   292  add fp, jssp, #0x10 (16)
0x4cd0f468   296  ldr x17, pc+24 (addr 0x000000004cd0f480)    ;; lazy deoptimization bailout 0
0x4cd0f46c   300  add x17, x17, x16
0x4cd0f470   304  br x17
0x4cd0f474   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0f478   312  d63f03e0       constant
0x4cd0f47c   316  d503201f       constant
0x4cd0f480   320  4cb06000       constant
0x4cd0f484   324  00000000       constant


Safepoints (size = 21)
0x4cd0f3fc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd0f3dc  code target (STUB)  (0x4cd06820)
0x4cd0f3f4  code target (STUB)  (0x4cd06260)
0x4cd0f400  code target (STUB)  (0x4cd068e0)
0x4cd0f414  constant pool (size 36)
0x4cd0f468  runtime entry
0x4cd0f474  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2487
type = NORMAL
name = BinaryOpICStub(ADD:Number*Smi->Number)
compiler = crankshaft
Instructions (size = 349)
0x4cd0f340     0  mov x2, x0
0x4cd0f344     4  tbnz w2, #0, #+0xf4 (addr 0x4cd0f438)
0x4cd0f348     8  tbz w1, #0, #+0x34 (addr 0x4cd0f37c)
0x4cd0f34c    12  ldur x16, [x1, #-1]
0x4cd0f350    16  ldr x17, [x26, #120]
0x4cd0f354    20  cmp x16, x17
0x4cd0f358    24  b.ne #+0xc (addr 0x4cd0f364)
0x4cd0f35c    28  ldur d0, [x1, #7]
0x4cd0f360    32  b #+0x20 (addr 0x4cd0f380)
0x4cd0f364    36  ldr x16, [x26, #40]
0x4cd0f368    40  cmp x1, x16
0x4cd0f36c    44  b.ne #+0xdc (addr 0x4cd0f448)
0x4cd0f370    48  ldr x3, [x26, #928]
0x4cd0f374    52  ldur d0, [x3, #7]
0x4cd0f378    56  b #+0x8 (addr 0x4cd0f380)
0x4cd0f37c    60  scvtf d0, x1, #32
0x4cd0f380    64  scvtf d1, x2, #32
0x4cd0f384    68  fadd d0, d0, d1
0x4cd0f388    72  movz x1, #0xd2c0
0x4cd0f38c    76  movk x1, #0x166d, lsl #16
0x4cd0f390    80  ldp x2, x0, [x1]
0x4cd0f394    84  adds x16, x2, #0x10 (16)
0x4cd0f398    88  ccmp x16, x0, #nzCv, lo
0x4cd0f39c    92  b.hi #+0x20 (addr 0x4cd0f3bc)
0x4cd0f3a0    96  str x16, [x1]
0x4cd0f3a4   100  ldr x1, [x26, #120]
0x4cd0f3a8   104  str x1, [x2]
0x4cd0f3ac   108  orr x2, x2, #0x1
0x4cd0f3b0   112  stur d0, [x2, #7]
0x4cd0f3b4   116  mov x0, x2
0x4cd0f3b8   120  ret
0x4cd0f3bc   124  sub csp, jssp, #0x10 (16)
0x4cd0f3c0   128  stp fp, lr, [jssp, #-16]!
0x4cd0f3c4   132  movz fp, #0xa00000000
0x4cd0f3c8   136  sub csp, jssp, #0x8 (8)
0x4cd0f3cc   140  str fp, [jssp, #-8]!
0x4cd0f3d0   144  add fp, jssp, #0x8 (8)
0x4cd0f3d4   148  movz x2, #0x0
0x4cd0f3d8   152  mov x16, lr
0x4cd0f3dc   156  ldr x17, pc+68 (addr 0x000000004cd0f420)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0f3e0   160  blr x17
0x4cd0f3e4   164  ldur cp, [fp, #-8]
0x4cd0f3e8   168  movz x0, #0x0
0x4cd0f3ec   172  movz x1, #0x4b48
0x4cd0f3f0   176  movk x1, #0xe4, lsl #16
0x4cd0f3f4   180  ldr x16, pc+52 (addr 0x000000004cd0f428)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0f3f8   184  blr x16
0x4cd0f3fc   188  str x0, [jssp, #16]
0x4cd0f400   192  ldr x16, pc+48 (addr 0x000000004cd0f430)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0f404   196  blr x16
0x4cd0f408   200  ldr lr, [jssp, #16]
0x4cd0f40c   204  ldp xzr, fp, [jssp], #24
0x4cd0f410   208  b #-0x60 (addr 0x4cd0f3b0)
0x4cd0f414   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd0f418   216  d63f03e0       constant
0x4cd0f41c   220  d503201f       constant
0x4cd0f420   224  4cd06820       constant
0x4cd0f424   228  00000000       constant
0x4cd0f428   232  4cd06260       constant
0x4cd0f42c   236  00000000       constant
0x4cd0f430   240  4cd068e0       constant
0x4cd0f434   244  00000000       constant
0x4cd0f438   248  movz x16, #0x0
0x4cd0f43c   252  sub csp, jssp, #0x10 (16)
0x4cd0f440   256  stp fp, lr, [jssp, #-16]!
0x4cd0f444   260  bl #+0x14 (addr 0x4cd0f458)
0x4cd0f448   264  movz x16, #0x8
0x4cd0f44c   268  sub csp, jssp, #0x10 (16)
0x4cd0f450   272  stp fp, lr, [jssp, #-16]!
0x4cd0f454   276  bl #+0x4 (addr 0x4cd0f458)
0x4cd0f458   280  movz x17, #0xa00000000
0x4cd0f45c   284  sub csp, jssp, #0x10 (16)
0x4cd0f460   288  stp x17, cp, [jssp, #-16]!
0x4cd0f464   292  add fp, jssp, #0x10 (16)
0x4cd0f468   296  ldr x17, pc+24 (addr 0x000000004cd0f480)    ;; lazy deoptimization bailout 0
0x4cd0f46c   300  add x17, x17, x16
0x4cd0f470   304  br x17
0x4cd0f474   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0f478   312  d63f03e0       constant
0x4cd0f47c   316  d503201f       constant
0x4cd0f480   320  4cb06000       constant
0x4cd0f484   324  00000000       constant


Safepoints (size = 21)
0x4cd0f3fc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd0f3dc  code target (STUB)  (0x4cd06820)
0x4cd0f3f4  code target (STUB)  (0x4cd06260)
0x4cd0f400  code target (STUB)  (0x4cd068e0)
0x4cd0f414  constant pool (size 36)
0x4cd0f468  runtime entry
0x4cd0f474  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4263
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0x4cd0f500     0  mov x2, x1
0x4cd0f504     4  tbnz w2, #0, #+0x1c (addr 0x4cd0f520)
0x4cd0f508     8  mov x3, x0
0x4cd0f50c    12  tbnz w3, #0, #+0x24 (addr 0x4cd0f530)
0x4cd0f510    16  adds x2, x3, x2
0x4cd0f514    20  b.vs #+0x2c (addr 0x4cd0f540)
0x4cd0f518    24  mov x0, x2
0x4cd0f51c    28  ret
0x4cd0f520    32  movz x16, #0x0
0x4cd0f524    36  sub csp, jssp, #0x10 (16)
0x4cd0f528    40  stp fp, lr, [jssp, #-16]!
0x4cd0f52c    44  bl #+0x24 (addr 0x4cd0f550)
0x4cd0f530    48  movz x16, #0x8
0x4cd0f534    52  sub csp, jssp, #0x10 (16)
0x4cd0f538    56  stp fp, lr, [jssp, #-16]!
0x4cd0f53c    60  bl #+0x14 (addr 0x4cd0f550)
0x4cd0f540    64  movz x16, #0x10
0x4cd0f544    68  sub csp, jssp, #0x10 (16)
0x4cd0f548    72  stp fp, lr, [jssp, #-16]!
0x4cd0f54c    76  bl #+0x4 (addr 0x4cd0f550)
0x4cd0f550    80  movz x17, #0xa00000000
0x4cd0f554    84  sub csp, jssp, #0x10 (16)
0x4cd0f558    88  stp x17, cp, [jssp, #-16]!
0x4cd0f55c    92  add fp, jssp, #0x10 (16)
0x4cd0f560    96  ldr x17, pc+24 (addr 0x000000004cd0f578)    ;; lazy deoptimization bailout 0
0x4cd0f564   100  add x17, x17, x16
0x4cd0f568   104  br x17
0x4cd0f56c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0f570   112  d63f03e0       constant
0x4cd0f574   116  d503201f       constant
0x4cd0f578   120  4cb06000       constant
0x4cd0f57c   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0f560  runtime entry
0x4cd0f56c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4263
type = NORMAL
name = BinaryOpICStub(ADD:Smi*Int32->Int32)
compiler = crankshaft
Instructions (size = 136)
0x4cd0f500     0  mov x2, x1
0x4cd0f504     4  tbnz w2, #0, #+0x1c (addr 0x4cd0f520)
0x4cd0f508     8  mov x3, x0
0x4cd0f50c    12  tbnz w3, #0, #+0x24 (addr 0x4cd0f530)
0x4cd0f510    16  adds x2, x3, x2
0x4cd0f514    20  b.vs #+0x2c (addr 0x4cd0f540)
0x4cd0f518    24  mov x0, x2
0x4cd0f51c    28  ret
0x4cd0f520    32  movz x16, #0x0
0x4cd0f524    36  sub csp, jssp, #0x10 (16)
0x4cd0f528    40  stp fp, lr, [jssp, #-16]!
0x4cd0f52c    44  bl #+0x24 (addr 0x4cd0f550)
0x4cd0f530    48  movz x16, #0x8
0x4cd0f534    52  sub csp, jssp, #0x10 (16)
0x4cd0f538    56  stp fp, lr, [jssp, #-16]!
0x4cd0f53c    60  bl #+0x14 (addr 0x4cd0f550)
0x4cd0f540    64  movz x16, #0x10
0x4cd0f544    68  sub csp, jssp, #0x10 (16)
0x4cd0f548    72  stp fp, lr, [jssp, #-16]!
0x4cd0f54c    76  bl #+0x4 (addr 0x4cd0f550)
0x4cd0f550    80  movz x17, #0xa00000000
0x4cd0f554    84  sub csp, jssp, #0x10 (16)
0x4cd0f558    88  stp x17, cp, [jssp, #-16]!
0x4cd0f55c    92  add fp, jssp, #0x10 (16)
0x4cd0f560    96  ldr x17, pc+24 (addr 0x000000004cd0f578)    ;; lazy deoptimization bailout 0
0x4cd0f564   100  add x17, x17, x16
0x4cd0f568   104  br x17
0x4cd0f56c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0f570   112  d63f03e0       constant
0x4cd0f574   116  d503201f       constant
0x4cd0f578   120  4cb06000       constant
0x4cd0f57c   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0f560  runtime entry
0x4cd0f56c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4279
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0x4cd0f600     0  mov x2, x1
0x4cd0f604     4  tbnz w2, #0, #+0xc4 (addr 0x4cd0f6c8)
0x4cd0f608     8  mov x3, x0
0x4cd0f60c    12  tbnz w3, #0, #+0xcc (addr 0x4cd0f6d8)
0x4cd0f610    16  scvtf d0, x2, #32
0x4cd0f614    20  scvtf d1, x3, #32
0x4cd0f618    24  fadd d0, d0, d1
0x4cd0f61c    28  movz x1, #0xd2c0
0x4cd0f620    32  movk x1, #0x166d, lsl #16
0x4cd0f624    36  ldp x2, x0, [x1]
0x4cd0f628    40  adds x16, x2, #0x10 (16)
0x4cd0f62c    44  ccmp x16, x0, #nzCv, lo
0x4cd0f630    48  b.hi #+0x20 (addr 0x4cd0f650)
0x4cd0f634    52  str x16, [x1]
0x4cd0f638    56  ldr x1, [x26, #120]
0x4cd0f63c    60  str x1, [x2]
0x4cd0f640    64  orr x2, x2, #0x1
0x4cd0f644    68  stur d0, [x2, #7]
0x4cd0f648    72  mov x0, x2
0x4cd0f64c    76  ret
0x4cd0f650    80  sub csp, jssp, #0x10 (16)
0x4cd0f654    84  stp fp, lr, [jssp, #-16]!
0x4cd0f658    88  movz fp, #0xa00000000
0x4cd0f65c    92  sub csp, jssp, #0x8 (8)
0x4cd0f660    96  str fp, [jssp, #-8]!
0x4cd0f664   100  add fp, jssp, #0x8 (8)
0x4cd0f668   104  movz x2, #0x0
0x4cd0f66c   108  mov x16, lr
0x4cd0f670   112  ldr x17, pc+64 (addr 0x000000004cd0f6b0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0f674   116  blr x17
0x4cd0f678   120  ldur cp, [fp, #-8]
0x4cd0f67c   124  movz x0, #0x0
0x4cd0f680   128  movz x1, #0x4b48
0x4cd0f684   132  movk x1, #0xe4, lsl #16
0x4cd0f688   136  ldr x16, pc+48 (addr 0x000000004cd0f6b8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0f68c   140  blr x16
0x4cd0f690   144  str x0, [jssp, #16]
0x4cd0f694   148  ldr x16, pc+44 (addr 0x000000004cd0f6c0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0f698   152  blr x16
0x4cd0f69c   156  ldr lr, [jssp, #16]
0x4cd0f6a0   160  ldp xzr, fp, [jssp], #24
0x4cd0f6a4   164  b #-0x60 (addr 0x4cd0f644)
0x4cd0f6a8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0f6ac   172  d63f03e0       constant
0x4cd0f6b0   176  4cd06820       constant
0x4cd0f6b4   180  00000000       constant
0x4cd0f6b8   184  4cd06260       constant
0x4cd0f6bc   188  00000000       constant
0x4cd0f6c0   192  4cd068e0       constant
0x4cd0f6c4   196  00000000       constant
0x4cd0f6c8   200  movz x16, #0x0
0x4cd0f6cc   204  sub csp, jssp, #0x10 (16)
0x4cd0f6d0   208  stp fp, lr, [jssp, #-16]!
0x4cd0f6d4   212  bl #+0x14 (addr 0x4cd0f6e8)
0x4cd0f6d8   216  movz x16, #0x8
0x4cd0f6dc   220  sub csp, jssp, #0x10 (16)
0x4cd0f6e0   224  stp fp, lr, [jssp, #-16]!
0x4cd0f6e4   228  bl #+0x4 (addr 0x4cd0f6e8)
0x4cd0f6e8   232  movz x17, #0xa00000000
0x4cd0f6ec   236  sub csp, jssp, #0x10 (16)
0x4cd0f6f0   240  stp x17, cp, [jssp, #-16]!
0x4cd0f6f4   244  add fp, jssp, #0x10 (16)
0x4cd0f6f8   248  ldr x17, pc+24 (addr 0x000000004cd0f710)    ;; lazy deoptimization bailout 0
0x4cd0f6fc   252  add x17, x17, x16
0x4cd0f700   256  br x17
0x4cd0f704   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0f708   264  d63f03e0       constant
0x4cd0f70c   268  d503201f       constant
0x4cd0f710   272  4cb06000       constant
0x4cd0f714   276  00000000       constant


Safepoints (size = 21)
0x4cd0f690   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd0f670  code target (STUB)  (0x4cd06820)
0x4cd0f688  code target (STUB)  (0x4cd06260)
0x4cd0f694  code target (STUB)  (0x4cd068e0)
0x4cd0f6a8  constant pool (size 32)
0x4cd0f6f8  runtime entry
0x4cd0f704  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4279
type = NORMAL
name = BinaryOpICStub(ADD:Smi*Int32->Number)
compiler = crankshaft
Instructions (size = 301)
0x4cd0f600     0  mov x2, x1
0x4cd0f604     4  tbnz w2, #0, #+0xc4 (addr 0x4cd0f6c8)
0x4cd0f608     8  mov x3, x0
0x4cd0f60c    12  tbnz w3, #0, #+0xcc (addr 0x4cd0f6d8)
0x4cd0f610    16  scvtf d0, x2, #32
0x4cd0f614    20  scvtf d1, x3, #32
0x4cd0f618    24  fadd d0, d0, d1
0x4cd0f61c    28  movz x1, #0xd2c0
0x4cd0f620    32  movk x1, #0x166d, lsl #16
0x4cd0f624    36  ldp x2, x0, [x1]
0x4cd0f628    40  adds x16, x2, #0x10 (16)
0x4cd0f62c    44  ccmp x16, x0, #nzCv, lo
0x4cd0f630    48  b.hi #+0x20 (addr 0x4cd0f650)
0x4cd0f634    52  str x16, [x1]
0x4cd0f638    56  ldr x1, [x26, #120]
0x4cd0f63c    60  str x1, [x2]
0x4cd0f640    64  orr x2, x2, #0x1
0x4cd0f644    68  stur d0, [x2, #7]
0x4cd0f648    72  mov x0, x2
0x4cd0f64c    76  ret
0x4cd0f650    80  sub csp, jssp, #0x10 (16)
0x4cd0f654    84  stp fp, lr, [jssp, #-16]!
0x4cd0f658    88  movz fp, #0xa00000000
0x4cd0f65c    92  sub csp, jssp, #0x8 (8)
0x4cd0f660    96  str fp, [jssp, #-8]!
0x4cd0f664   100  add fp, jssp, #0x8 (8)
0x4cd0f668   104  movz x2, #0x0
0x4cd0f66c   108  mov x16, lr
0x4cd0f670   112  ldr x17, pc+64 (addr 0x000000004cd0f6b0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0f674   116  blr x17
0x4cd0f678   120  ldur cp, [fp, #-8]
0x4cd0f67c   124  movz x0, #0x0
0x4cd0f680   128  movz x1, #0x4b48
0x4cd0f684   132  movk x1, #0xe4, lsl #16
0x4cd0f688   136  ldr x16, pc+48 (addr 0x000000004cd0f6b8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0f68c   140  blr x16
0x4cd0f690   144  str x0, [jssp, #16]
0x4cd0f694   148  ldr x16, pc+44 (addr 0x000000004cd0f6c0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0f698   152  blr x16
0x4cd0f69c   156  ldr lr, [jssp, #16]
0x4cd0f6a0   160  ldp xzr, fp, [jssp], #24
0x4cd0f6a4   164  b #-0x60 (addr 0x4cd0f644)
0x4cd0f6a8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd0f6ac   172  d63f03e0       constant
0x4cd0f6b0   176  4cd06820       constant
0x4cd0f6b4   180  00000000       constant
0x4cd0f6b8   184  4cd06260       constant
0x4cd0f6bc   188  00000000       constant
0x4cd0f6c0   192  4cd068e0       constant
0x4cd0f6c4   196  00000000       constant
0x4cd0f6c8   200  movz x16, #0x0
0x4cd0f6cc   204  sub csp, jssp, #0x10 (16)
0x4cd0f6d0   208  stp fp, lr, [jssp, #-16]!
0x4cd0f6d4   212  bl #+0x14 (addr 0x4cd0f6e8)
0x4cd0f6d8   216  movz x16, #0x8
0x4cd0f6dc   220  sub csp, jssp, #0x10 (16)
0x4cd0f6e0   224  stp fp, lr, [jssp, #-16]!
0x4cd0f6e4   228  bl #+0x4 (addr 0x4cd0f6e8)
0x4cd0f6e8   232  movz x17, #0xa00000000
0x4cd0f6ec   236  sub csp, jssp, #0x10 (16)
0x4cd0f6f0   240  stp x17, cp, [jssp, #-16]!
0x4cd0f6f4   244  add fp, jssp, #0x10 (16)
0x4cd0f6f8   248  ldr x17, pc+24 (addr 0x000000004cd0f710)    ;; lazy deoptimization bailout 0
0x4cd0f6fc   252  add x17, x17, x16
0x4cd0f700   256  br x17
0x4cd0f704   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0f708   264  d63f03e0       constant
0x4cd0f70c   268  d503201f       constant
0x4cd0f710   272  4cb06000       constant
0x4cd0f714   276  00000000       constant


Safepoints (size = 21)
0x4cd0f690   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd0f670  code target (STUB)  (0x4cd06820)
0x4cd0f688  code target (STUB)  (0x4cd06260)
0x4cd0f694  code target (STUB)  (0x4cd068e0)
0x4cd0f6a8  constant pool (size 32)
0x4cd0f6f8  runtime entry
0x4cd0f704  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6327
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0x4cd0f7a0     0  mov x2, x1
0x4cd0f7a4     4  tbnz w2, #0, #+0xf4 (addr 0x4cd0f898)
0x4cd0f7a8     8  tbz w0, #0, #+0x34 (addr 0x4cd0f7dc)
0x4cd0f7ac    12  ldur x16, [x0, #-1]
0x4cd0f7b0    16  ldr x17, [x26, #120]
0x4cd0f7b4    20  cmp x16, x17
0x4cd0f7b8    24  b.ne #+0xc (addr 0x4cd0f7c4)
0x4cd0f7bc    28  ldur d0, [x0, #7]
0x4cd0f7c0    32  b #+0x20 (addr 0x4cd0f7e0)
0x4cd0f7c4    36  ldr x16, [x26, #40]
0x4cd0f7c8    40  cmp x0, x16
0x4cd0f7cc    44  b.ne #+0xdc (addr 0x4cd0f8a8)
0x4cd0f7d0    48  ldr x3, [x26, #928]
0x4cd0f7d4    52  ldur d0, [x3, #7]
0x4cd0f7d8    56  b #+0x8 (addr 0x4cd0f7e0)
0x4cd0f7dc    60  scvtf d0, x0, #32
0x4cd0f7e0    64  scvtf d1, x2, #32
0x4cd0f7e4    68  fadd d0, d1, d0
0x4cd0f7e8    72  movz x1, #0xd2c0
0x4cd0f7ec    76  movk x1, #0x166d, lsl #16
0x4cd0f7f0    80  ldp x2, x0, [x1]
0x4cd0f7f4    84  adds x16, x2, #0x10 (16)
0x4cd0f7f8    88  ccmp x16, x0, #nzCv, lo
0x4cd0f7fc    92  b.hi #+0x20 (addr 0x4cd0f81c)
0x4cd0f800    96  str x16, [x1]
0x4cd0f804   100  ldr x1, [x26, #120]
0x4cd0f808   104  str x1, [x2]
0x4cd0f80c   108  orr x2, x2, #0x1
0x4cd0f810   112  stur d0, [x2, #7]
0x4cd0f814   116  mov x0, x2
0x4cd0f818   120  ret
0x4cd0f81c   124  sub csp, jssp, #0x10 (16)
0x4cd0f820   128  stp fp, lr, [jssp, #-16]!
0x4cd0f824   132  movz fp, #0xa00000000
0x4cd0f828   136  sub csp, jssp, #0x8 (8)
0x4cd0f82c   140  str fp, [jssp, #-8]!
0x4cd0f830   144  add fp, jssp, #0x8 (8)
0x4cd0f834   148  movz x2, #0x0
0x4cd0f838   152  mov x16, lr
0x4cd0f83c   156  ldr x17, pc+68 (addr 0x000000004cd0f880)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0f840   160  blr x17
0x4cd0f844   164  ldur cp, [fp, #-8]
0x4cd0f848   168  movz x0, #0x0
0x4cd0f84c   172  movz x1, #0x4b48
0x4cd0f850   176  movk x1, #0xe4, lsl #16
0x4cd0f854   180  ldr x16, pc+52 (addr 0x000000004cd0f888)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0f858   184  blr x16
0x4cd0f85c   188  str x0, [jssp, #16]
0x4cd0f860   192  ldr x16, pc+48 (addr 0x000000004cd0f890)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0f864   196  blr x16
0x4cd0f868   200  ldr lr, [jssp, #16]
0x4cd0f86c   204  ldp xzr, fp, [jssp], #24
0x4cd0f870   208  b #-0x60 (addr 0x4cd0f810)
0x4cd0f874   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd0f878   216  d63f03e0       constant
0x4cd0f87c   220  d503201f       constant
0x4cd0f880   224  4cd06820       constant
0x4cd0f884   228  00000000       constant
0x4cd0f888   232  4cd06260       constant
0x4cd0f88c   236  00000000       constant
0x4cd0f890   240  4cd068e0       constant
0x4cd0f894   244  00000000       constant
0x4cd0f898   248  movz x16, #0x0
0x4cd0f89c   252  sub csp, jssp, #0x10 (16)
0x4cd0f8a0   256  stp fp, lr, [jssp, #-16]!
0x4cd0f8a4   260  bl #+0x14 (addr 0x4cd0f8b8)
0x4cd0f8a8   264  movz x16, #0x8
0x4cd0f8ac   268  sub csp, jssp, #0x10 (16)
0x4cd0f8b0   272  stp fp, lr, [jssp, #-16]!
0x4cd0f8b4   276  bl #+0x4 (addr 0x4cd0f8b8)
0x4cd0f8b8   280  movz x17, #0xa00000000
0x4cd0f8bc   284  sub csp, jssp, #0x10 (16)
0x4cd0f8c0   288  stp x17, cp, [jssp, #-16]!
0x4cd0f8c4   292  add fp, jssp, #0x10 (16)
0x4cd0f8c8   296  ldr x17, pc+24 (addr 0x000000004cd0f8e0)    ;; lazy deoptimization bailout 0
0x4cd0f8cc   300  add x17, x17, x16
0x4cd0f8d0   304  br x17
0x4cd0f8d4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0f8d8   312  d63f03e0       constant
0x4cd0f8dc   316  d503201f       constant
0x4cd0f8e0   320  4cb06000       constant
0x4cd0f8e4   324  00000000       constant


Safepoints (size = 21)
0x4cd0f85c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd0f83c  code target (STUB)  (0x4cd06820)
0x4cd0f854  code target (STUB)  (0x4cd06260)
0x4cd0f860  code target (STUB)  (0x4cd068e0)
0x4cd0f874  constant pool (size 36)
0x4cd0f8c8  runtime entry
0x4cd0f8d4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6327
type = NORMAL
name = BinaryOpICStub(ADD:Smi*Number->Number)
compiler = crankshaft
Instructions (size = 349)
0x4cd0f7a0     0  mov x2, x1
0x4cd0f7a4     4  tbnz w2, #0, #+0xf4 (addr 0x4cd0f898)
0x4cd0f7a8     8  tbz w0, #0, #+0x34 (addr 0x4cd0f7dc)
0x4cd0f7ac    12  ldur x16, [x0, #-1]
0x4cd0f7b0    16  ldr x17, [x26, #120]
0x4cd0f7b4    20  cmp x16, x17
0x4cd0f7b8    24  b.ne #+0xc (addr 0x4cd0f7c4)
0x4cd0f7bc    28  ldur d0, [x0, #7]
0x4cd0f7c0    32  b #+0x20 (addr 0x4cd0f7e0)
0x4cd0f7c4    36  ldr x16, [x26, #40]
0x4cd0f7c8    40  cmp x0, x16
0x4cd0f7cc    44  b.ne #+0xdc (addr 0x4cd0f8a8)
0x4cd0f7d0    48  ldr x3, [x26, #928]
0x4cd0f7d4    52  ldur d0, [x3, #7]
0x4cd0f7d8    56  b #+0x8 (addr 0x4cd0f7e0)
0x4cd0f7dc    60  scvtf d0, x0, #32
0x4cd0f7e0    64  scvtf d1, x2, #32
0x4cd0f7e4    68  fadd d0, d1, d0
0x4cd0f7e8    72  movz x1, #0xd2c0
0x4cd0f7ec    76  movk x1, #0x166d, lsl #16
0x4cd0f7f0    80  ldp x2, x0, [x1]
0x4cd0f7f4    84  adds x16, x2, #0x10 (16)
0x4cd0f7f8    88  ccmp x16, x0, #nzCv, lo
0x4cd0f7fc    92  b.hi #+0x20 (addr 0x4cd0f81c)
0x4cd0f800    96  str x16, [x1]
0x4cd0f804   100  ldr x1, [x26, #120]
0x4cd0f808   104  str x1, [x2]
0x4cd0f80c   108  orr x2, x2, #0x1
0x4cd0f810   112  stur d0, [x2, #7]
0x4cd0f814   116  mov x0, x2
0x4cd0f818   120  ret
0x4cd0f81c   124  sub csp, jssp, #0x10 (16)
0x4cd0f820   128  stp fp, lr, [jssp, #-16]!
0x4cd0f824   132  movz fp, #0xa00000000
0x4cd0f828   136  sub csp, jssp, #0x8 (8)
0x4cd0f82c   140  str fp, [jssp, #-8]!
0x4cd0f830   144  add fp, jssp, #0x8 (8)
0x4cd0f834   148  movz x2, #0x0
0x4cd0f838   152  mov x16, lr
0x4cd0f83c   156  ldr x17, pc+68 (addr 0x000000004cd0f880)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd0f840   160  blr x17
0x4cd0f844   164  ldur cp, [fp, #-8]
0x4cd0f848   168  movz x0, #0x0
0x4cd0f84c   172  movz x1, #0x4b48
0x4cd0f850   176  movk x1, #0xe4, lsl #16
0x4cd0f854   180  ldr x16, pc+52 (addr 0x000000004cd0f888)    ;; code: STUB, CEntryStub, minor: 5
0x4cd0f858   184  blr x16
0x4cd0f85c   188  str x0, [jssp, #16]
0x4cd0f860   192  ldr x16, pc+48 (addr 0x000000004cd0f890)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd0f864   196  blr x16
0x4cd0f868   200  ldr lr, [jssp, #16]
0x4cd0f86c   204  ldp xzr, fp, [jssp], #24
0x4cd0f870   208  b #-0x60 (addr 0x4cd0f810)
0x4cd0f874   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd0f878   216  d63f03e0       constant
0x4cd0f87c   220  d503201f       constant
0x4cd0f880   224  4cd06820       constant
0x4cd0f884   228  00000000       constant
0x4cd0f888   232  4cd06260       constant
0x4cd0f88c   236  00000000       constant
0x4cd0f890   240  4cd068e0       constant
0x4cd0f894   244  00000000       constant
0x4cd0f898   248  movz x16, #0x0
0x4cd0f89c   252  sub csp, jssp, #0x10 (16)
0x4cd0f8a0   256  stp fp, lr, [jssp, #-16]!
0x4cd0f8a4   260  bl #+0x14 (addr 0x4cd0f8b8)
0x4cd0f8a8   264  movz x16, #0x8
0x4cd0f8ac   268  sub csp, jssp, #0x10 (16)
0x4cd0f8b0   272  stp fp, lr, [jssp, #-16]!
0x4cd0f8b4   276  bl #+0x4 (addr 0x4cd0f8b8)
0x4cd0f8b8   280  movz x17, #0xa00000000
0x4cd0f8bc   284  sub csp, jssp, #0x10 (16)
0x4cd0f8c0   288  stp x17, cp, [jssp, #-16]!
0x4cd0f8c4   292  add fp, jssp, #0x10 (16)
0x4cd0f8c8   296  ldr x17, pc+24 (addr 0x000000004cd0f8e0)    ;; lazy deoptimization bailout 0
0x4cd0f8cc   300  add x17, x17, x16
0x4cd0f8d0   304  br x17
0x4cd0f8d4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0f8d8   312  d63f03e0       constant
0x4cd0f8dc   316  d503201f       constant
0x4cd0f8e0   320  4cb06000       constant
0x4cd0f8e4   324  00000000       constant


Safepoints (size = 21)
0x4cd0f85c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd0f83c  code target (STUB)  (0x4cd06820)
0x4cd0f854  code target (STUB)  (0x4cd06260)
0x4cd0f860  code target (STUB)  (0x4cd068e0)
0x4cd0f874  constant pool (size 36)
0x4cd0f8c8  runtime entry
0x4cd0f8d4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2215
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0x4cd0f960     0  mov x2, x1
0x4cd0f964     4  tbnz w2, #0, #+0x1c (addr 0x4cd0f980)
0x4cd0f968     8  mov x3, x0
0x4cd0f96c    12  tbnz w3, #0, #+0x24 (addr 0x4cd0f990)
0x4cd0f970    16  adds x2, x3, x2
0x4cd0f974    20  b.vs #+0x2c (addr 0x4cd0f9a0)
0x4cd0f978    24  mov x0, x2
0x4cd0f97c    28  ret
0x4cd0f980    32  movz x16, #0x0
0x4cd0f984    36  sub csp, jssp, #0x10 (16)
0x4cd0f988    40  stp fp, lr, [jssp, #-16]!
0x4cd0f98c    44  bl #+0x24 (addr 0x4cd0f9b0)
0x4cd0f990    48  movz x16, #0x8
0x4cd0f994    52  sub csp, jssp, #0x10 (16)
0x4cd0f998    56  stp fp, lr, [jssp, #-16]!
0x4cd0f99c    60  bl #+0x14 (addr 0x4cd0f9b0)
0x4cd0f9a0    64  movz x16, #0x10
0x4cd0f9a4    68  sub csp, jssp, #0x10 (16)
0x4cd0f9a8    72  stp fp, lr, [jssp, #-16]!
0x4cd0f9ac    76  bl #+0x4 (addr 0x4cd0f9b0)
0x4cd0f9b0    80  movz x17, #0xa00000000
0x4cd0f9b4    84  sub csp, jssp, #0x10 (16)
0x4cd0f9b8    88  stp x17, cp, [jssp, #-16]!
0x4cd0f9bc    92  add fp, jssp, #0x10 (16)
0x4cd0f9c0    96  ldr x17, pc+24 (addr 0x000000004cd0f9d8)    ;; lazy deoptimization bailout 0
0x4cd0f9c4   100  add x17, x17, x16
0x4cd0f9c8   104  br x17
0x4cd0f9cc   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0f9d0   112  d63f03e0       constant
0x4cd0f9d4   116  d503201f       constant
0x4cd0f9d8   120  4cb06000       constant
0x4cd0f9dc   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0f9c0  runtime entry
0x4cd0f9cc  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2215
type = NORMAL
name = BinaryOpICStub(ADD:Smi*Smi->Int32)
compiler = crankshaft
Instructions (size = 136)
0x4cd0f960     0  mov x2, x1
0x4cd0f964     4  tbnz w2, #0, #+0x1c (addr 0x4cd0f980)
0x4cd0f968     8  mov x3, x0
0x4cd0f96c    12  tbnz w3, #0, #+0x24 (addr 0x4cd0f990)
0x4cd0f970    16  adds x2, x3, x2
0x4cd0f974    20  b.vs #+0x2c (addr 0x4cd0f9a0)
0x4cd0f978    24  mov x0, x2
0x4cd0f97c    28  ret
0x4cd0f980    32  movz x16, #0x0
0x4cd0f984    36  sub csp, jssp, #0x10 (16)
0x4cd0f988    40  stp fp, lr, [jssp, #-16]!
0x4cd0f98c    44  bl #+0x24 (addr 0x4cd0f9b0)
0x4cd0f990    48  movz x16, #0x8
0x4cd0f994    52  sub csp, jssp, #0x10 (16)
0x4cd0f998    56  stp fp, lr, [jssp, #-16]!
0x4cd0f99c    60  bl #+0x14 (addr 0x4cd0f9b0)
0x4cd0f9a0    64  movz x16, #0x10
0x4cd0f9a4    68  sub csp, jssp, #0x10 (16)
0x4cd0f9a8    72  stp fp, lr, [jssp, #-16]!
0x4cd0f9ac    76  bl #+0x4 (addr 0x4cd0f9b0)
0x4cd0f9b0    80  movz x17, #0xa00000000
0x4cd0f9b4    84  sub csp, jssp, #0x10 (16)
0x4cd0f9b8    88  stp x17, cp, [jssp, #-16]!
0x4cd0f9bc    92  add fp, jssp, #0x10 (16)
0x4cd0f9c0    96  ldr x17, pc+24 (addr 0x000000004cd0f9d8)    ;; lazy deoptimization bailout 0
0x4cd0f9c4   100  add x17, x17, x16
0x4cd0f9c8   104  br x17
0x4cd0f9cc   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0f9d0   112  d63f03e0       constant
0x4cd0f9d4   116  d503201f       constant
0x4cd0f9d8   120  4cb06000       constant
0x4cd0f9dc   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0f9c0  runtime entry
0x4cd0f9cc  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2199
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0x4cd0fa60     0  mov x2, x1
0x4cd0fa64     4  tbnz w2, #0, #+0x1c (addr 0x4cd0fa80)
0x4cd0fa68     8  mov x3, x0
0x4cd0fa6c    12  tbnz w3, #0, #+0x24 (addr 0x4cd0fa90)
0x4cd0fa70    16  adds x2, x3, x2
0x4cd0fa74    20  b.vs #+0x2c (addr 0x4cd0faa0)
0x4cd0fa78    24  mov x0, x2
0x4cd0fa7c    28  ret
0x4cd0fa80    32  movz x16, #0x0
0x4cd0fa84    36  sub csp, jssp, #0x10 (16)
0x4cd0fa88    40  stp fp, lr, [jssp, #-16]!
0x4cd0fa8c    44  bl #+0x24 (addr 0x4cd0fab0)
0x4cd0fa90    48  movz x16, #0x8
0x4cd0fa94    52  sub csp, jssp, #0x10 (16)
0x4cd0fa98    56  stp fp, lr, [jssp, #-16]!
0x4cd0fa9c    60  bl #+0x14 (addr 0x4cd0fab0)
0x4cd0faa0    64  movz x16, #0x10
0x4cd0faa4    68  sub csp, jssp, #0x10 (16)
0x4cd0faa8    72  stp fp, lr, [jssp, #-16]!
0x4cd0faac    76  bl #+0x4 (addr 0x4cd0fab0)
0x4cd0fab0    80  movz x17, #0xa00000000
0x4cd0fab4    84  sub csp, jssp, #0x10 (16)
0x4cd0fab8    88  stp x17, cp, [jssp, #-16]!
0x4cd0fabc    92  add fp, jssp, #0x10 (16)
0x4cd0fac0    96  ldr x17, pc+24 (addr 0x000000004cd0fad8)    ;; lazy deoptimization bailout 0
0x4cd0fac4   100  add x17, x17, x16
0x4cd0fac8   104  br x17
0x4cd0facc   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0fad0   112  d63f03e0       constant
0x4cd0fad4   116  d503201f       constant
0x4cd0fad8   120  4cb06000       constant
0x4cd0fadc   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0fac0  runtime entry
0x4cd0facc  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2199
type = NORMAL
name = BinaryOpICStub(ADD:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 136)
0x4cd0fa60     0  mov x2, x1
0x4cd0fa64     4  tbnz w2, #0, #+0x1c (addr 0x4cd0fa80)
0x4cd0fa68     8  mov x3, x0
0x4cd0fa6c    12  tbnz w3, #0, #+0x24 (addr 0x4cd0fa90)
0x4cd0fa70    16  adds x2, x3, x2
0x4cd0fa74    20  b.vs #+0x2c (addr 0x4cd0faa0)
0x4cd0fa78    24  mov x0, x2
0x4cd0fa7c    28  ret
0x4cd0fa80    32  movz x16, #0x0
0x4cd0fa84    36  sub csp, jssp, #0x10 (16)
0x4cd0fa88    40  stp fp, lr, [jssp, #-16]!
0x4cd0fa8c    44  bl #+0x24 (addr 0x4cd0fab0)
0x4cd0fa90    48  movz x16, #0x8
0x4cd0fa94    52  sub csp, jssp, #0x10 (16)
0x4cd0fa98    56  stp fp, lr, [jssp, #-16]!
0x4cd0fa9c    60  bl #+0x14 (addr 0x4cd0fab0)
0x4cd0faa0    64  movz x16, #0x10
0x4cd0faa4    68  sub csp, jssp, #0x10 (16)
0x4cd0faa8    72  stp fp, lr, [jssp, #-16]!
0x4cd0faac    76  bl #+0x4 (addr 0x4cd0fab0)
0x4cd0fab0    80  movz x17, #0xa00000000
0x4cd0fab4    84  sub csp, jssp, #0x10 (16)
0x4cd0fab8    88  stp x17, cp, [jssp, #-16]!
0x4cd0fabc    92  add fp, jssp, #0x10 (16)
0x4cd0fac0    96  ldr x17, pc+24 (addr 0x000000004cd0fad8)    ;; lazy deoptimization bailout 0
0x4cd0fac4   100  add x17, x17, x16
0x4cd0fac8   104  br x17
0x4cd0facc   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0fad0   112  d63f03e0       constant
0x4cd0fad4   116  d503201f       constant
0x4cd0fad8   120  4cb06000       constant
0x4cd0fadc   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0fac0  runtime entry
0x4cd0facc  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4386
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd0fb60     0  mov x2, x1
0x4cd0fb64     4  tbnz w2, #0, #+0x14 (addr 0x4cd0fb78)
0x4cd0fb68     8  mov x3, x0
0x4cd0fb6c    12  tbnz w3, #0, #+0x1c (addr 0x4cd0fb88)
0x4cd0fb70    16  and x0, x3, x2
0x4cd0fb74    20  ret
0x4cd0fb78    24  movz x16, #0x0
0x4cd0fb7c    28  sub csp, jssp, #0x10 (16)
0x4cd0fb80    32  stp fp, lr, [jssp, #-16]!
0x4cd0fb84    36  bl #+0x14 (addr 0x4cd0fb98)
0x4cd0fb88    40  movz x16, #0x8
0x4cd0fb8c    44  sub csp, jssp, #0x10 (16)
0x4cd0fb90    48  stp fp, lr, [jssp, #-16]!
0x4cd0fb94    52  bl #+0x4 (addr 0x4cd0fb98)
0x4cd0fb98    56  movz x17, #0xa00000000
0x4cd0fb9c    60  sub csp, jssp, #0x10 (16)
0x4cd0fba0    64  stp x17, cp, [jssp, #-16]!
0x4cd0fba4    68  add fp, jssp, #0x10 (16)
0x4cd0fba8    72  ldr x17, pc+24 (addr 0x000000004cd0fbc0)    ;; lazy deoptimization bailout 0
0x4cd0fbac    76  add x17, x17, x16
0x4cd0fbb0    80  br x17
0x4cd0fbb4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0fbb8    88  d63f03e0       constant
0x4cd0fbbc    92  d503201f       constant
0x4cd0fbc0    96  4cb06000       constant
0x4cd0fbc4   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0fba8  runtime entry
0x4cd0fbb4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4386
type = NORMAL
name = BinaryOpICStub(BIT_AND:Int32*Int32->Int32)
compiler = crankshaft
Instructions (size = 112)
0x4cd0fb60     0  mov x2, x1
0x4cd0fb64     4  tbnz w2, #0, #+0x14 (addr 0x4cd0fb78)
0x4cd0fb68     8  mov x3, x0
0x4cd0fb6c    12  tbnz w3, #0, #+0x1c (addr 0x4cd0fb88)
0x4cd0fb70    16  and x0, x3, x2
0x4cd0fb74    20  ret
0x4cd0fb78    24  movz x16, #0x0
0x4cd0fb7c    28  sub csp, jssp, #0x10 (16)
0x4cd0fb80    32  stp fp, lr, [jssp, #-16]!
0x4cd0fb84    36  bl #+0x14 (addr 0x4cd0fb98)
0x4cd0fb88    40  movz x16, #0x8
0x4cd0fb8c    44  sub csp, jssp, #0x10 (16)
0x4cd0fb90    48  stp fp, lr, [jssp, #-16]!
0x4cd0fb94    52  bl #+0x4 (addr 0x4cd0fb98)
0x4cd0fb98    56  movz x17, #0xa00000000
0x4cd0fb9c    60  sub csp, jssp, #0x10 (16)
0x4cd0fba0    64  stp x17, cp, [jssp, #-16]!
0x4cd0fba4    68  add fp, jssp, #0x10 (16)
0x4cd0fba8    72  ldr x17, pc+24 (addr 0x000000004cd0fbc0)    ;; lazy deoptimization bailout 0
0x4cd0fbac    76  add x17, x17, x16
0x4cd0fbb0    80  br x17
0x4cd0fbb4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0fbb8    88  d63f03e0       constant
0x4cd0fbbc    92  d503201f       constant
0x4cd0fbc0    96  4cb06000       constant
0x4cd0fbc4   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0fba8  runtime entry
0x4cd0fbb4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4370
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd0fc40     0  mov x2, x1
0x4cd0fc44     4  tbnz w2, #0, #+0x14 (addr 0x4cd0fc58)
0x4cd0fc48     8  mov x3, x0
0x4cd0fc4c    12  tbnz w3, #0, #+0x1c (addr 0x4cd0fc68)
0x4cd0fc50    16  and x0, x3, x2
0x4cd0fc54    20  ret
0x4cd0fc58    24  movz x16, #0x0
0x4cd0fc5c    28  sub csp, jssp, #0x10 (16)
0x4cd0fc60    32  stp fp, lr, [jssp, #-16]!
0x4cd0fc64    36  bl #+0x14 (addr 0x4cd0fc78)
0x4cd0fc68    40  movz x16, #0x8
0x4cd0fc6c    44  sub csp, jssp, #0x10 (16)
0x4cd0fc70    48  stp fp, lr, [jssp, #-16]!
0x4cd0fc74    52  bl #+0x4 (addr 0x4cd0fc78)
0x4cd0fc78    56  movz x17, #0xa00000000
0x4cd0fc7c    60  sub csp, jssp, #0x10 (16)
0x4cd0fc80    64  stp x17, cp, [jssp, #-16]!
0x4cd0fc84    68  add fp, jssp, #0x10 (16)
0x4cd0fc88    72  ldr x17, pc+24 (addr 0x000000004cd0fca0)    ;; lazy deoptimization bailout 0
0x4cd0fc8c    76  add x17, x17, x16
0x4cd0fc90    80  br x17
0x4cd0fc94    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0fc98    88  d63f03e0       constant
0x4cd0fc9c    92  d503201f       constant
0x4cd0fca0    96  4cb06000       constant
0x4cd0fca4   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0fc88  runtime entry
0x4cd0fc94  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4370
type = NORMAL
name = BinaryOpICStub(BIT_AND:Int32*Int32->Smi)
compiler = crankshaft
Instructions (size = 112)
0x4cd0fc40     0  mov x2, x1
0x4cd0fc44     4  tbnz w2, #0, #+0x14 (addr 0x4cd0fc58)
0x4cd0fc48     8  mov x3, x0
0x4cd0fc4c    12  tbnz w3, #0, #+0x1c (addr 0x4cd0fc68)
0x4cd0fc50    16  and x0, x3, x2
0x4cd0fc54    20  ret
0x4cd0fc58    24  movz x16, #0x0
0x4cd0fc5c    28  sub csp, jssp, #0x10 (16)
0x4cd0fc60    32  stp fp, lr, [jssp, #-16]!
0x4cd0fc64    36  bl #+0x14 (addr 0x4cd0fc78)
0x4cd0fc68    40  movz x16, #0x8
0x4cd0fc6c    44  sub csp, jssp, #0x10 (16)
0x4cd0fc70    48  stp fp, lr, [jssp, #-16]!
0x4cd0fc74    52  bl #+0x4 (addr 0x4cd0fc78)
0x4cd0fc78    56  movz x17, #0xa00000000
0x4cd0fc7c    60  sub csp, jssp, #0x10 (16)
0x4cd0fc80    64  stp x17, cp, [jssp, #-16]!
0x4cd0fc84    68  add fp, jssp, #0x10 (16)
0x4cd0fc88    72  ldr x17, pc+24 (addr 0x000000004cd0fca0)    ;; lazy deoptimization bailout 0
0x4cd0fc8c    76  add x17, x17, x16
0x4cd0fc90    80  br x17
0x4cd0fc94    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0fc98    88  d63f03e0       constant
0x4cd0fc9c    92  d503201f       constant
0x4cd0fca0    96  4cb06000       constant
0x4cd0fca4   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0fc88  runtime entry
0x4cd0fc94  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2338
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd0fd20     0  mov x2, x1
0x4cd0fd24     4  tbnz w2, #0, #+0x14 (addr 0x4cd0fd38)
0x4cd0fd28     8  mov x3, x0
0x4cd0fd2c    12  tbnz w3, #0, #+0x1c (addr 0x4cd0fd48)
0x4cd0fd30    16  and x0, x3, x2
0x4cd0fd34    20  ret
0x4cd0fd38    24  movz x16, #0x0
0x4cd0fd3c    28  sub csp, jssp, #0x10 (16)
0x4cd0fd40    32  stp fp, lr, [jssp, #-16]!
0x4cd0fd44    36  bl #+0x14 (addr 0x4cd0fd58)
0x4cd0fd48    40  movz x16, #0x8
0x4cd0fd4c    44  sub csp, jssp, #0x10 (16)
0x4cd0fd50    48  stp fp, lr, [jssp, #-16]!
0x4cd0fd54    52  bl #+0x4 (addr 0x4cd0fd58)
0x4cd0fd58    56  movz x17, #0xa00000000
0x4cd0fd5c    60  sub csp, jssp, #0x10 (16)
0x4cd0fd60    64  stp x17, cp, [jssp, #-16]!
0x4cd0fd64    68  add fp, jssp, #0x10 (16)
0x4cd0fd68    72  ldr x17, pc+24 (addr 0x000000004cd0fd80)    ;; lazy deoptimization bailout 0
0x4cd0fd6c    76  add x17, x17, x16
0x4cd0fd70    80  br x17
0x4cd0fd74    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0fd78    88  d63f03e0       constant
0x4cd0fd7c    92  d503201f       constant
0x4cd0fd80    96  4cb06000       constant
0x4cd0fd84   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0fd68  runtime entry
0x4cd0fd74  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2338
type = NORMAL
name = BinaryOpICStub(BIT_AND:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 112)
0x4cd0fd20     0  mov x2, x1
0x4cd0fd24     4  tbnz w2, #0, #+0x14 (addr 0x4cd0fd38)
0x4cd0fd28     8  mov x3, x0
0x4cd0fd2c    12  tbnz w3, #0, #+0x1c (addr 0x4cd0fd48)
0x4cd0fd30    16  and x0, x3, x2
0x4cd0fd34    20  ret
0x4cd0fd38    24  movz x16, #0x0
0x4cd0fd3c    28  sub csp, jssp, #0x10 (16)
0x4cd0fd40    32  stp fp, lr, [jssp, #-16]!
0x4cd0fd44    36  bl #+0x14 (addr 0x4cd0fd58)
0x4cd0fd48    40  movz x16, #0x8
0x4cd0fd4c    44  sub csp, jssp, #0x10 (16)
0x4cd0fd50    48  stp fp, lr, [jssp, #-16]!
0x4cd0fd54    52  bl #+0x4 (addr 0x4cd0fd58)
0x4cd0fd58    56  movz x17, #0xa00000000
0x4cd0fd5c    60  sub csp, jssp, #0x10 (16)
0x4cd0fd60    64  stp x17, cp, [jssp, #-16]!
0x4cd0fd64    68  add fp, jssp, #0x10 (16)
0x4cd0fd68    72  ldr x17, pc+24 (addr 0x000000004cd0fd80)    ;; lazy deoptimization bailout 0
0x4cd0fd6c    76  add x17, x17, x16
0x4cd0fd70    80  br x17
0x4cd0fd74    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0fd78    88  d63f03e0       constant
0x4cd0fd7c    92  d503201f       constant
0x4cd0fd80    96  4cb06000       constant
0x4cd0fd84   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0fd68  runtime entry
0x4cd0fd74  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2322
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd0fe00     0  mov x2, x1
0x4cd0fe04     4  tbnz w2, #0, #+0x14 (addr 0x4cd0fe18)
0x4cd0fe08     8  mov x3, x0
0x4cd0fe0c    12  tbnz w3, #0, #+0x1c (addr 0x4cd0fe28)
0x4cd0fe10    16  and x0, x3, x2
0x4cd0fe14    20  ret
0x4cd0fe18    24  movz x16, #0x0
0x4cd0fe1c    28  sub csp, jssp, #0x10 (16)
0x4cd0fe20    32  stp fp, lr, [jssp, #-16]!
0x4cd0fe24    36  bl #+0x14 (addr 0x4cd0fe38)
0x4cd0fe28    40  movz x16, #0x8
0x4cd0fe2c    44  sub csp, jssp, #0x10 (16)
0x4cd0fe30    48  stp fp, lr, [jssp, #-16]!
0x4cd0fe34    52  bl #+0x4 (addr 0x4cd0fe38)
0x4cd0fe38    56  movz x17, #0xa00000000
0x4cd0fe3c    60  sub csp, jssp, #0x10 (16)
0x4cd0fe40    64  stp x17, cp, [jssp, #-16]!
0x4cd0fe44    68  add fp, jssp, #0x10 (16)
0x4cd0fe48    72  ldr x17, pc+24 (addr 0x000000004cd0fe60)    ;; lazy deoptimization bailout 0
0x4cd0fe4c    76  add x17, x17, x16
0x4cd0fe50    80  br x17
0x4cd0fe54    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0fe58    88  d63f03e0       constant
0x4cd0fe5c    92  d503201f       constant
0x4cd0fe60    96  4cb06000       constant
0x4cd0fe64   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0fe48  runtime entry
0x4cd0fe54  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2322
type = NORMAL
name = BinaryOpICStub(BIT_AND:Int32*Smi->Smi)
compiler = crankshaft
Instructions (size = 112)
0x4cd0fe00     0  mov x2, x1
0x4cd0fe04     4  tbnz w2, #0, #+0x14 (addr 0x4cd0fe18)
0x4cd0fe08     8  mov x3, x0
0x4cd0fe0c    12  tbnz w3, #0, #+0x1c (addr 0x4cd0fe28)
0x4cd0fe10    16  and x0, x3, x2
0x4cd0fe14    20  ret
0x4cd0fe18    24  movz x16, #0x0
0x4cd0fe1c    28  sub csp, jssp, #0x10 (16)
0x4cd0fe20    32  stp fp, lr, [jssp, #-16]!
0x4cd0fe24    36  bl #+0x14 (addr 0x4cd0fe38)
0x4cd0fe28    40  movz x16, #0x8
0x4cd0fe2c    44  sub csp, jssp, #0x10 (16)
0x4cd0fe30    48  stp fp, lr, [jssp, #-16]!
0x4cd0fe34    52  bl #+0x4 (addr 0x4cd0fe38)
0x4cd0fe38    56  movz x17, #0xa00000000
0x4cd0fe3c    60  sub csp, jssp, #0x10 (16)
0x4cd0fe40    64  stp x17, cp, [jssp, #-16]!
0x4cd0fe44    68  add fp, jssp, #0x10 (16)
0x4cd0fe48    72  ldr x17, pc+24 (addr 0x000000004cd0fe60)    ;; lazy deoptimization bailout 0
0x4cd0fe4c    76  add x17, x17, x16
0x4cd0fe50    80  br x17
0x4cd0fe54    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd0fe58    88  d63f03e0       constant
0x4cd0fe5c    92  d503201f       constant
0x4cd0fe60    96  4cb06000       constant
0x4cd0fe64   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd0fe48  runtime entry
0x4cd0fe54  constant pool (size 20)


kind = STUB
major_key = DoubleToIStub
name = DoubleToIStub
compiler = unknown
Instructions (size = 60)
0x4cd0fee0     0  sub csp, jssp, #0x10 (16)
0x4cd0fee4     4  stp x2, x0, [jssp, #-16]!
0x4cd0fee8     8  ldur x4, [x1, #7]
0x4cd0feec    12  ubfx x0, x4, #52, #11
0x4cd0fef0    16  cmp x0, #0x453 (1107)
0x4cd0fef4    20  csel x4, xzr, x4, ge
0x4cd0fef8    24  b.ge #+0x1c (addr 0x4cd0ff14)
0x4cd0fefc    28  ubfx x2, x4, #0, #52
0x4cd0ff00    32  orr x2, x2, #0x10000000000000
0x4cd0ff04    36  tst x4, #0x8000000000000000
0x4cd0ff08    40  cneg x2, x2, ne
0x4cd0ff0c    44  sub x0, x0, #0x433 (1075)
0x4cd0ff10    48  lsl x4, x2, x0
0x4cd0ff14    52  ldp x2, x0, [jssp], #16
0x4cd0ff18    56  ret


RelocInfo (size = 0)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4514
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0x4cd0ff80     0  mov x2, x0
0x4cd0ff84     4  tbnz w2, #0, #+0xac (addr 0x4cd10030)
0x4cd0ff88     8  tbnz w1, #0, #+0x18 (addr 0x4cd0ffa0)
0x4cd0ff8c    12  asr x4, x1, #32
0x4cd0ff90    16  asr x0, x2, #32
0x4cd0ff94    20  and w0, w0, w4
0x4cd0ff98    24  lsl x0, x0, #32
0x4cd0ff9c    28  ret
0x4cd0ffa0    32  sub csp, jssp, #0x10 (16)
0x4cd0ffa4    36  stp fp, lr, [jssp, #-16]!
0x4cd0ffa8    40  movz fp, #0xa00000000
0x4cd0ffac    44  sub csp, jssp, #0x8 (8)
0x4cd0ffb0    48  str fp, [jssp, #-8]!
0x4cd0ffb4    52  add fp, jssp, #0x8 (8)
0x4cd0ffb8    56  ldur x16, [x1, #-1]
0x4cd0ffbc    60  ldr x17, [x26, #120]
0x4cd0ffc0    64  cmp x16, x17
0x4cd0ffc4    68  b.ne #+0x30 (addr 0x4cd0fff4)
0x4cd0ffc8    72  ldur d30, [x1, #7]
0x4cd0ffcc    76  fcvtzs x4, d30
0x4cd0ffd0    80  cmp x4, #0x1 (1)
0x4cd0ffd4    84  ccmn x4, #1, #nzcV, vc
0x4cd0ffd8    88  b.vc #+0x18 (addr 0x4cd0fff0)
0x4cd0ffdc    92  sub csp, jssp, #0x8 (8)
0x4cd0ffe0    96  str lr, [jssp, #-8]!
0x4cd0ffe4   100  ldr x16, pc+68 (addr 0x000000004cd10028)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd0ffe8   104  blr x16
0x4cd0ffec   108  ldr lr, [jssp], #8
0x4cd0fff0   112  b #+0x24 (addr 0x4cd10014)
0x4cd0fff4   116  ldp x4, x3, [x26, #64]
0x4cd0fff8   120  cmp x1, x4
0x4cd0fffc   124  cset x4, eq
0x4cd10000   128  ccmp x1, x3, #nZcv, ne
0x4cd10004   132  b.eq #+0x10 (addr 0x4cd10014)
0x4cd10008   136  ldr x16, [x26, #40]
0x4cd1000c   140  cmp x1, x16
0x4cd10010   144  b.ne #+0x30 (addr 0x4cd10040)
0x4cd10014   148  ldr lr, [jssp, #16]
0x4cd10018   152  ldp xzr, fp, [jssp], #24
0x4cd1001c   156  b #-0x8c (addr 0x4cd0ff90)
0x4cd10020   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd10024   164  d63f03e0       constant
0x4cd10028   168  4cd0fee0       constant
0x4cd1002c   172  00000000       constant
0x4cd10030   176  movz x16, #0x0
0x4cd10034   180  sub csp, jssp, #0x10 (16)
0x4cd10038   184  stp fp, lr, [jssp, #-16]!
0x4cd1003c   188  bl #+0xc (addr 0x4cd10048)
0x4cd10040   192  movz x16, #0x8
0x4cd10044   196  bl #+0x14 (addr 0x4cd10058)
0x4cd10048   200  movz x17, #0xa00000000
0x4cd1004c   204  sub csp, jssp, #0x10 (16)
0x4cd10050   208  stp x17, cp, [jssp, #-16]!
0x4cd10054   212  add fp, jssp, #0x10 (16)
0x4cd10058   216  ldr x17, pc+24 (addr 0x000000004cd10070)    ;; lazy deoptimization bailout 0
0x4cd1005c   220  add x17, x17, x16
0x4cd10060   224  br x17
0x4cd10064   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10068   232  d63f03e0       constant
0x4cd1006c   236  d503201f       constant
0x4cd10070   240  4cb06000       constant
0x4cd10074   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd0ffe4  code target (STUB)  (0x4cd0fee0)
0x4cd10020  constant pool (size 16)
0x4cd10058  runtime entry
0x4cd10064  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4514
type = NORMAL
name = BinaryOpICStub(BIT_AND:Number*Int32->Int32)
compiler = crankshaft
Instructions (size = 256)
0x4cd0ff80     0  mov x2, x0
0x4cd0ff84     4  tbnz w2, #0, #+0xac (addr 0x4cd10030)
0x4cd0ff88     8  tbnz w1, #0, #+0x18 (addr 0x4cd0ffa0)
0x4cd0ff8c    12  asr x4, x1, #32
0x4cd0ff90    16  asr x0, x2, #32
0x4cd0ff94    20  and w0, w0, w4
0x4cd0ff98    24  lsl x0, x0, #32
0x4cd0ff9c    28  ret
0x4cd0ffa0    32  sub csp, jssp, #0x10 (16)
0x4cd0ffa4    36  stp fp, lr, [jssp, #-16]!
0x4cd0ffa8    40  movz fp, #0xa00000000
0x4cd0ffac    44  sub csp, jssp, #0x8 (8)
0x4cd0ffb0    48  str fp, [jssp, #-8]!
0x4cd0ffb4    52  add fp, jssp, #0x8 (8)
0x4cd0ffb8    56  ldur x16, [x1, #-1]
0x4cd0ffbc    60  ldr x17, [x26, #120]
0x4cd0ffc0    64  cmp x16, x17
0x4cd0ffc4    68  b.ne #+0x30 (addr 0x4cd0fff4)
0x4cd0ffc8    72  ldur d30, [x1, #7]
0x4cd0ffcc    76  fcvtzs x4, d30
0x4cd0ffd0    80  cmp x4, #0x1 (1)
0x4cd0ffd4    84  ccmn x4, #1, #nzcV, vc
0x4cd0ffd8    88  b.vc #+0x18 (addr 0x4cd0fff0)
0x4cd0ffdc    92  sub csp, jssp, #0x8 (8)
0x4cd0ffe0    96  str lr, [jssp, #-8]!
0x4cd0ffe4   100  ldr x16, pc+68 (addr 0x000000004cd10028)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd0ffe8   104  blr x16
0x4cd0ffec   108  ldr lr, [jssp], #8
0x4cd0fff0   112  b #+0x24 (addr 0x4cd10014)
0x4cd0fff4   116  ldp x4, x3, [x26, #64]
0x4cd0fff8   120  cmp x1, x4
0x4cd0fffc   124  cset x4, eq
0x4cd10000   128  ccmp x1, x3, #nZcv, ne
0x4cd10004   132  b.eq #+0x10 (addr 0x4cd10014)
0x4cd10008   136  ldr x16, [x26, #40]
0x4cd1000c   140  cmp x1, x16
0x4cd10010   144  b.ne #+0x30 (addr 0x4cd10040)
0x4cd10014   148  ldr lr, [jssp, #16]
0x4cd10018   152  ldp xzr, fp, [jssp], #24
0x4cd1001c   156  b #-0x8c (addr 0x4cd0ff90)
0x4cd10020   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd10024   164  d63f03e0       constant
0x4cd10028   168  4cd0fee0       constant
0x4cd1002c   172  00000000       constant
0x4cd10030   176  movz x16, #0x0
0x4cd10034   180  sub csp, jssp, #0x10 (16)
0x4cd10038   184  stp fp, lr, [jssp, #-16]!
0x4cd1003c   188  bl #+0xc (addr 0x4cd10048)
0x4cd10040   192  movz x16, #0x8
0x4cd10044   196  bl #+0x14 (addr 0x4cd10058)
0x4cd10048   200  movz x17, #0xa00000000
0x4cd1004c   204  sub csp, jssp, #0x10 (16)
0x4cd10050   208  stp x17, cp, [jssp, #-16]!
0x4cd10054   212  add fp, jssp, #0x10 (16)
0x4cd10058   216  ldr x17, pc+24 (addr 0x000000004cd10070)    ;; lazy deoptimization bailout 0
0x4cd1005c   220  add x17, x17, x16
0x4cd10060   224  br x17
0x4cd10064   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10068   232  d63f03e0       constant
0x4cd1006c   236  d503201f       constant
0x4cd10070   240  4cb06000       constant
0x4cd10074   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd0ffe4  code target (STUB)  (0x4cd0fee0)
0x4cd10020  constant pool (size 16)
0x4cd10058  runtime entry
0x4cd10064  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2450
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0x4cd100e0     0  mov x2, x0
0x4cd100e4     4  tbnz w2, #0, #+0xac (addr 0x4cd10190)
0x4cd100e8     8  tbnz w1, #0, #+0x18 (addr 0x4cd10100)
0x4cd100ec    12  asr x4, x1, #32
0x4cd100f0    16  asr x0, x2, #32
0x4cd100f4    20  and w0, w0, w4
0x4cd100f8    24  lsl x0, x0, #32
0x4cd100fc    28  ret
0x4cd10100    32  sub csp, jssp, #0x10 (16)
0x4cd10104    36  stp fp, lr, [jssp, #-16]!
0x4cd10108    40  movz fp, #0xa00000000
0x4cd1010c    44  sub csp, jssp, #0x8 (8)
0x4cd10110    48  str fp, [jssp, #-8]!
0x4cd10114    52  add fp, jssp, #0x8 (8)
0x4cd10118    56  ldur x16, [x1, #-1]
0x4cd1011c    60  ldr x17, [x26, #120]
0x4cd10120    64  cmp x16, x17
0x4cd10124    68  b.ne #+0x30 (addr 0x4cd10154)
0x4cd10128    72  ldur d30, [x1, #7]
0x4cd1012c    76  fcvtzs x4, d30
0x4cd10130    80  cmp x4, #0x1 (1)
0x4cd10134    84  ccmn x4, #1, #nzcV, vc
0x4cd10138    88  b.vc #+0x18 (addr 0x4cd10150)
0x4cd1013c    92  sub csp, jssp, #0x8 (8)
0x4cd10140    96  str lr, [jssp, #-8]!
0x4cd10144   100  ldr x16, pc+68 (addr 0x000000004cd10188)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd10148   104  blr x16
0x4cd1014c   108  ldr lr, [jssp], #8
0x4cd10150   112  b #+0x24 (addr 0x4cd10174)
0x4cd10154   116  ldp x4, x3, [x26, #64]
0x4cd10158   120  cmp x1, x4
0x4cd1015c   124  cset x4, eq
0x4cd10160   128  ccmp x1, x3, #nZcv, ne
0x4cd10164   132  b.eq #+0x10 (addr 0x4cd10174)
0x4cd10168   136  ldr x16, [x26, #40]
0x4cd1016c   140  cmp x1, x16
0x4cd10170   144  b.ne #+0x30 (addr 0x4cd101a0)
0x4cd10174   148  ldr lr, [jssp, #16]
0x4cd10178   152  ldp xzr, fp, [jssp], #24
0x4cd1017c   156  b #-0x8c (addr 0x4cd100f0)
0x4cd10180   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd10184   164  d63f03e0       constant
0x4cd10188   168  4cd0fee0       constant
0x4cd1018c   172  00000000       constant
0x4cd10190   176  movz x16, #0x0
0x4cd10194   180  sub csp, jssp, #0x10 (16)
0x4cd10198   184  stp fp, lr, [jssp, #-16]!
0x4cd1019c   188  bl #+0xc (addr 0x4cd101a8)
0x4cd101a0   192  movz x16, #0x8
0x4cd101a4   196  bl #+0x14 (addr 0x4cd101b8)
0x4cd101a8   200  movz x17, #0xa00000000
0x4cd101ac   204  sub csp, jssp, #0x10 (16)
0x4cd101b0   208  stp x17, cp, [jssp, #-16]!
0x4cd101b4   212  add fp, jssp, #0x10 (16)
0x4cd101b8   216  ldr x17, pc+24 (addr 0x000000004cd101d0)    ;; lazy deoptimization bailout 0
0x4cd101bc   220  add x17, x17, x16
0x4cd101c0   224  br x17
0x4cd101c4   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd101c8   232  d63f03e0       constant
0x4cd101cc   236  d503201f       constant
0x4cd101d0   240  4cb06000       constant
0x4cd101d4   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd10144  code target (STUB)  (0x4cd0fee0)
0x4cd10180  constant pool (size 16)
0x4cd101b8  runtime entry
0x4cd101c4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2450
type = NORMAL
name = BinaryOpICStub(BIT_AND:Number*Smi->Smi)
compiler = crankshaft
Instructions (size = 256)
0x4cd100e0     0  mov x2, x0
0x4cd100e4     4  tbnz w2, #0, #+0xac (addr 0x4cd10190)
0x4cd100e8     8  tbnz w1, #0, #+0x18 (addr 0x4cd10100)
0x4cd100ec    12  asr x4, x1, #32
0x4cd100f0    16  asr x0, x2, #32
0x4cd100f4    20  and w0, w0, w4
0x4cd100f8    24  lsl x0, x0, #32
0x4cd100fc    28  ret
0x4cd10100    32  sub csp, jssp, #0x10 (16)
0x4cd10104    36  stp fp, lr, [jssp, #-16]!
0x4cd10108    40  movz fp, #0xa00000000
0x4cd1010c    44  sub csp, jssp, #0x8 (8)
0x4cd10110    48  str fp, [jssp, #-8]!
0x4cd10114    52  add fp, jssp, #0x8 (8)
0x4cd10118    56  ldur x16, [x1, #-1]
0x4cd1011c    60  ldr x17, [x26, #120]
0x4cd10120    64  cmp x16, x17
0x4cd10124    68  b.ne #+0x30 (addr 0x4cd10154)
0x4cd10128    72  ldur d30, [x1, #7]
0x4cd1012c    76  fcvtzs x4, d30
0x4cd10130    80  cmp x4, #0x1 (1)
0x4cd10134    84  ccmn x4, #1, #nzcV, vc
0x4cd10138    88  b.vc #+0x18 (addr 0x4cd10150)
0x4cd1013c    92  sub csp, jssp, #0x8 (8)
0x4cd10140    96  str lr, [jssp, #-8]!
0x4cd10144   100  ldr x16, pc+68 (addr 0x000000004cd10188)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd10148   104  blr x16
0x4cd1014c   108  ldr lr, [jssp], #8
0x4cd10150   112  b #+0x24 (addr 0x4cd10174)
0x4cd10154   116  ldp x4, x3, [x26, #64]
0x4cd10158   120  cmp x1, x4
0x4cd1015c   124  cset x4, eq
0x4cd10160   128  ccmp x1, x3, #nZcv, ne
0x4cd10164   132  b.eq #+0x10 (addr 0x4cd10174)
0x4cd10168   136  ldr x16, [x26, #40]
0x4cd1016c   140  cmp x1, x16
0x4cd10170   144  b.ne #+0x30 (addr 0x4cd101a0)
0x4cd10174   148  ldr lr, [jssp, #16]
0x4cd10178   152  ldp xzr, fp, [jssp], #24
0x4cd1017c   156  b #-0x8c (addr 0x4cd100f0)
0x4cd10180   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd10184   164  d63f03e0       constant
0x4cd10188   168  4cd0fee0       constant
0x4cd1018c   172  00000000       constant
0x4cd10190   176  movz x16, #0x0
0x4cd10194   180  sub csp, jssp, #0x10 (16)
0x4cd10198   184  stp fp, lr, [jssp, #-16]!
0x4cd1019c   188  bl #+0xc (addr 0x4cd101a8)
0x4cd101a0   192  movz x16, #0x8
0x4cd101a4   196  bl #+0x14 (addr 0x4cd101b8)
0x4cd101a8   200  movz x17, #0xa00000000
0x4cd101ac   204  sub csp, jssp, #0x10 (16)
0x4cd101b0   208  stp x17, cp, [jssp, #-16]!
0x4cd101b4   212  add fp, jssp, #0x10 (16)
0x4cd101b8   216  ldr x17, pc+24 (addr 0x000000004cd101d0)    ;; lazy deoptimization bailout 0
0x4cd101bc   220  add x17, x17, x16
0x4cd101c0   224  br x17
0x4cd101c4   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd101c8   232  d63f03e0       constant
0x4cd101cc   236  d503201f       constant
0x4cd101d0   240  4cb06000       constant
0x4cd101d4   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd10144  code target (STUB)  (0x4cd0fee0)
0x4cd10180  constant pool (size 16)
0x4cd101b8  runtime entry
0x4cd101c4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4258
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd10240     0  mov x2, x1
0x4cd10244     4  tbnz w2, #0, #+0x14 (addr 0x4cd10258)
0x4cd10248     8  mov x3, x0
0x4cd1024c    12  tbnz w3, #0, #+0x1c (addr 0x4cd10268)
0x4cd10250    16  and x0, x3, x2
0x4cd10254    20  ret
0x4cd10258    24  movz x16, #0x0
0x4cd1025c    28  sub csp, jssp, #0x10 (16)
0x4cd10260    32  stp fp, lr, [jssp, #-16]!
0x4cd10264    36  bl #+0x14 (addr 0x4cd10278)
0x4cd10268    40  movz x16, #0x8
0x4cd1026c    44  sub csp, jssp, #0x10 (16)
0x4cd10270    48  stp fp, lr, [jssp, #-16]!
0x4cd10274    52  bl #+0x4 (addr 0x4cd10278)
0x4cd10278    56  movz x17, #0xa00000000
0x4cd1027c    60  sub csp, jssp, #0x10 (16)
0x4cd10280    64  stp x17, cp, [jssp, #-16]!
0x4cd10284    68  add fp, jssp, #0x10 (16)
0x4cd10288    72  ldr x17, pc+24 (addr 0x000000004cd102a0)    ;; lazy deoptimization bailout 0
0x4cd1028c    76  add x17, x17, x16
0x4cd10290    80  br x17
0x4cd10294    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10298    88  d63f03e0       constant
0x4cd1029c    92  d503201f       constant
0x4cd102a0    96  4cb06000       constant
0x4cd102a4   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd10288  runtime entry
0x4cd10294  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4258
type = NORMAL
name = BinaryOpICStub(BIT_AND:Smi*Int32->Int32)
compiler = crankshaft
Instructions (size = 112)
0x4cd10240     0  mov x2, x1
0x4cd10244     4  tbnz w2, #0, #+0x14 (addr 0x4cd10258)
0x4cd10248     8  mov x3, x0
0x4cd1024c    12  tbnz w3, #0, #+0x1c (addr 0x4cd10268)
0x4cd10250    16  and x0, x3, x2
0x4cd10254    20  ret
0x4cd10258    24  movz x16, #0x0
0x4cd1025c    28  sub csp, jssp, #0x10 (16)
0x4cd10260    32  stp fp, lr, [jssp, #-16]!
0x4cd10264    36  bl #+0x14 (addr 0x4cd10278)
0x4cd10268    40  movz x16, #0x8
0x4cd1026c    44  sub csp, jssp, #0x10 (16)
0x4cd10270    48  stp fp, lr, [jssp, #-16]!
0x4cd10274    52  bl #+0x4 (addr 0x4cd10278)
0x4cd10278    56  movz x17, #0xa00000000
0x4cd1027c    60  sub csp, jssp, #0x10 (16)
0x4cd10280    64  stp x17, cp, [jssp, #-16]!
0x4cd10284    68  add fp, jssp, #0x10 (16)
0x4cd10288    72  ldr x17, pc+24 (addr 0x000000004cd102a0)    ;; lazy deoptimization bailout 0
0x4cd1028c    76  add x17, x17, x16
0x4cd10290    80  br x17
0x4cd10294    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10298    88  d63f03e0       constant
0x4cd1029c    92  d503201f       constant
0x4cd102a0    96  4cb06000       constant
0x4cd102a4   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd10288  runtime entry
0x4cd10294  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4242
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd10320     0  mov x2, x1
0x4cd10324     4  tbnz w2, #0, #+0x14 (addr 0x4cd10338)
0x4cd10328     8  mov x3, x0
0x4cd1032c    12  tbnz w3, #0, #+0x1c (addr 0x4cd10348)
0x4cd10330    16  and x0, x3, x2
0x4cd10334    20  ret
0x4cd10338    24  movz x16, #0x0
0x4cd1033c    28  sub csp, jssp, #0x10 (16)
0x4cd10340    32  stp fp, lr, [jssp, #-16]!
0x4cd10344    36  bl #+0x14 (addr 0x4cd10358)
0x4cd10348    40  movz x16, #0x8
0x4cd1034c    44  sub csp, jssp, #0x10 (16)
0x4cd10350    48  stp fp, lr, [jssp, #-16]!
0x4cd10354    52  bl #+0x4 (addr 0x4cd10358)
0x4cd10358    56  movz x17, #0xa00000000
0x4cd1035c    60  sub csp, jssp, #0x10 (16)
0x4cd10360    64  stp x17, cp, [jssp, #-16]!
0x4cd10364    68  add fp, jssp, #0x10 (16)
0x4cd10368    72  ldr x17, pc+24 (addr 0x000000004cd10380)    ;; lazy deoptimization bailout 0
0x4cd1036c    76  add x17, x17, x16
0x4cd10370    80  br x17
0x4cd10374    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10378    88  d63f03e0       constant
0x4cd1037c    92  d503201f       constant
0x4cd10380    96  4cb06000       constant
0x4cd10384   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd10368  runtime entry
0x4cd10374  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4242
type = NORMAL
name = BinaryOpICStub(BIT_AND:Smi*Int32->Smi)
compiler = crankshaft
Instructions (size = 112)
0x4cd10320     0  mov x2, x1
0x4cd10324     4  tbnz w2, #0, #+0x14 (addr 0x4cd10338)
0x4cd10328     8  mov x3, x0
0x4cd1032c    12  tbnz w3, #0, #+0x1c (addr 0x4cd10348)
0x4cd10330    16  and x0, x3, x2
0x4cd10334    20  ret
0x4cd10338    24  movz x16, #0x0
0x4cd1033c    28  sub csp, jssp, #0x10 (16)
0x4cd10340    32  stp fp, lr, [jssp, #-16]!
0x4cd10344    36  bl #+0x14 (addr 0x4cd10358)
0x4cd10348    40  movz x16, #0x8
0x4cd1034c    44  sub csp, jssp, #0x10 (16)
0x4cd10350    48  stp fp, lr, [jssp, #-16]!
0x4cd10354    52  bl #+0x4 (addr 0x4cd10358)
0x4cd10358    56  movz x17, #0xa00000000
0x4cd1035c    60  sub csp, jssp, #0x10 (16)
0x4cd10360    64  stp x17, cp, [jssp, #-16]!
0x4cd10364    68  add fp, jssp, #0x10 (16)
0x4cd10368    72  ldr x17, pc+24 (addr 0x000000004cd10380)    ;; lazy deoptimization bailout 0
0x4cd1036c    76  add x17, x17, x16
0x4cd10370    80  br x17
0x4cd10374    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10378    88  d63f03e0       constant
0x4cd1037c    92  d503201f       constant
0x4cd10380    96  4cb06000       constant
0x4cd10384   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd10368  runtime entry
0x4cd10374  constant pool (size 20)


kind = STUB
major_key = DoubleToIStub
name = DoubleToIStub
compiler = unknown
Instructions (size = 60)
0x4cd10400     0  sub csp, jssp, #0x10 (16)
0x4cd10404     4  stp x2, x1, [jssp, #-16]!
0x4cd10408     8  ldur x4, [x0, #7]
0x4cd1040c    12  ubfx x1, x4, #52, #11
0x4cd10410    16  cmp x1, #0x453 (1107)
0x4cd10414    20  csel x4, xzr, x4, ge
0x4cd10418    24  b.ge #+0x1c (addr 0x4cd10434)
0x4cd1041c    28  ubfx x2, x4, #0, #52
0x4cd10420    32  orr x2, x2, #0x10000000000000
0x4cd10424    36  tst x4, #0x8000000000000000
0x4cd10428    40  cneg x2, x2, ne
0x4cd1042c    44  sub x1, x1, #0x433 (1075)
0x4cd10430    48  lsl x4, x2, x1
0x4cd10434    52  ldp x2, x1, [jssp], #16
0x4cd10438    56  ret


RelocInfo (size = 0)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6290
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0x4cd104a0     0  mov x2, x1
0x4cd104a4     4  tbnz w2, #0, #+0xac (addr 0x4cd10550)
0x4cd104a8     8  tbnz w0, #0, #+0x18 (addr 0x4cd104c0)
0x4cd104ac    12  asr x4, x0, #32
0x4cd104b0    16  asr x0, x2, #32
0x4cd104b4    20  and w0, w4, w0
0x4cd104b8    24  lsl x0, x0, #32
0x4cd104bc    28  ret
0x4cd104c0    32  sub csp, jssp, #0x10 (16)
0x4cd104c4    36  stp fp, lr, [jssp, #-16]!
0x4cd104c8    40  movz fp, #0xa00000000
0x4cd104cc    44  sub csp, jssp, #0x8 (8)
0x4cd104d0    48  str fp, [jssp, #-8]!
0x4cd104d4    52  add fp, jssp, #0x8 (8)
0x4cd104d8    56  ldur x16, [x0, #-1]
0x4cd104dc    60  ldr x17, [x26, #120]
0x4cd104e0    64  cmp x16, x17
0x4cd104e4    68  b.ne #+0x30 (addr 0x4cd10514)
0x4cd104e8    72  ldur d30, [x0, #7]
0x4cd104ec    76  fcvtzs x4, d30
0x4cd104f0    80  cmp x4, #0x1 (1)
0x4cd104f4    84  ccmn x4, #1, #nzcV, vc
0x4cd104f8    88  b.vc #+0x18 (addr 0x4cd10510)
0x4cd104fc    92  sub csp, jssp, #0x8 (8)
0x4cd10500    96  str lr, [jssp, #-8]!
0x4cd10504   100  ldr x16, pc+68 (addr 0x000000004cd10548)    ;; code: STUB, DoubleToIStub, minor: 127232
0x4cd10508   104  blr x16
0x4cd1050c   108  ldr lr, [jssp], #8
0x4cd10510   112  b #+0x24 (addr 0x4cd10534)
0x4cd10514   116  ldp x4, x3, [x26, #64]
0x4cd10518   120  cmp x0, x4
0x4cd1051c   124  cset x4, eq
0x4cd10520   128  ccmp x0, x3, #nZcv, ne
0x4cd10524   132  b.eq #+0x10 (addr 0x4cd10534)
0x4cd10528   136  ldr x16, [x26, #40]
0x4cd1052c   140  cmp x0, x16
0x4cd10530   144  b.ne #+0x30 (addr 0x4cd10560)
0x4cd10534   148  ldr lr, [jssp, #16]
0x4cd10538   152  ldp xzr, fp, [jssp], #24
0x4cd1053c   156  b #-0x8c (addr 0x4cd104b0)
0x4cd10540   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd10544   164  d63f03e0       constant
0x4cd10548   168  4cd10400       constant
0x4cd1054c   172  00000000       constant
0x4cd10550   176  movz x16, #0x0
0x4cd10554   180  sub csp, jssp, #0x10 (16)
0x4cd10558   184  stp fp, lr, [jssp, #-16]!
0x4cd1055c   188  bl #+0xc (addr 0x4cd10568)
0x4cd10560   192  movz x16, #0x8
0x4cd10564   196  bl #+0x14 (addr 0x4cd10578)
0x4cd10568   200  movz x17, #0xa00000000
0x4cd1056c   204  sub csp, jssp, #0x10 (16)
0x4cd10570   208  stp x17, cp, [jssp, #-16]!
0x4cd10574   212  add fp, jssp, #0x10 (16)
0x4cd10578   216  ldr x17, pc+24 (addr 0x000000004cd10590)    ;; lazy deoptimization bailout 0
0x4cd1057c   220  add x17, x17, x16
0x4cd10580   224  br x17
0x4cd10584   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10588   232  d63f03e0       constant
0x4cd1058c   236  d503201f       constant
0x4cd10590   240  4cb06000       constant
0x4cd10594   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd10504  code target (STUB)  (0x4cd10400)
0x4cd10540  constant pool (size 16)
0x4cd10578  runtime entry
0x4cd10584  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6290
type = NORMAL
name = BinaryOpICStub(BIT_AND:Smi*Number->Smi)
compiler = crankshaft
Instructions (size = 256)
0x4cd104a0     0  mov x2, x1
0x4cd104a4     4  tbnz w2, #0, #+0xac (addr 0x4cd10550)
0x4cd104a8     8  tbnz w0, #0, #+0x18 (addr 0x4cd104c0)
0x4cd104ac    12  asr x4, x0, #32
0x4cd104b0    16  asr x0, x2, #32
0x4cd104b4    20  and w0, w4, w0
0x4cd104b8    24  lsl x0, x0, #32
0x4cd104bc    28  ret
0x4cd104c0    32  sub csp, jssp, #0x10 (16)
0x4cd104c4    36  stp fp, lr, [jssp, #-16]!
0x4cd104c8    40  movz fp, #0xa00000000
0x4cd104cc    44  sub csp, jssp, #0x8 (8)
0x4cd104d0    48  str fp, [jssp, #-8]!
0x4cd104d4    52  add fp, jssp, #0x8 (8)
0x4cd104d8    56  ldur x16, [x0, #-1]
0x4cd104dc    60  ldr x17, [x26, #120]
0x4cd104e0    64  cmp x16, x17
0x4cd104e4    68  b.ne #+0x30 (addr 0x4cd10514)
0x4cd104e8    72  ldur d30, [x0, #7]
0x4cd104ec    76  fcvtzs x4, d30
0x4cd104f0    80  cmp x4, #0x1 (1)
0x4cd104f4    84  ccmn x4, #1, #nzcV, vc
0x4cd104f8    88  b.vc #+0x18 (addr 0x4cd10510)
0x4cd104fc    92  sub csp, jssp, #0x8 (8)
0x4cd10500    96  str lr, [jssp, #-8]!
0x4cd10504   100  ldr x16, pc+68 (addr 0x000000004cd10548)    ;; code: STUB, DoubleToIStub, minor: 127232
0x4cd10508   104  blr x16
0x4cd1050c   108  ldr lr, [jssp], #8
0x4cd10510   112  b #+0x24 (addr 0x4cd10534)
0x4cd10514   116  ldp x4, x3, [x26, #64]
0x4cd10518   120  cmp x0, x4
0x4cd1051c   124  cset x4, eq
0x4cd10520   128  ccmp x0, x3, #nZcv, ne
0x4cd10524   132  b.eq #+0x10 (addr 0x4cd10534)
0x4cd10528   136  ldr x16, [x26, #40]
0x4cd1052c   140  cmp x0, x16
0x4cd10530   144  b.ne #+0x30 (addr 0x4cd10560)
0x4cd10534   148  ldr lr, [jssp, #16]
0x4cd10538   152  ldp xzr, fp, [jssp], #24
0x4cd1053c   156  b #-0x8c (addr 0x4cd104b0)
0x4cd10540   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd10544   164  d63f03e0       constant
0x4cd10548   168  4cd10400       constant
0x4cd1054c   172  00000000       constant
0x4cd10550   176  movz x16, #0x0
0x4cd10554   180  sub csp, jssp, #0x10 (16)
0x4cd10558   184  stp fp, lr, [jssp, #-16]!
0x4cd1055c   188  bl #+0xc (addr 0x4cd10568)
0x4cd10560   192  movz x16, #0x8
0x4cd10564   196  bl #+0x14 (addr 0x4cd10578)
0x4cd10568   200  movz x17, #0xa00000000
0x4cd1056c   204  sub csp, jssp, #0x10 (16)
0x4cd10570   208  stp x17, cp, [jssp, #-16]!
0x4cd10574   212  add fp, jssp, #0x10 (16)
0x4cd10578   216  ldr x17, pc+24 (addr 0x000000004cd10590)    ;; lazy deoptimization bailout 0
0x4cd1057c   220  add x17, x17, x16
0x4cd10580   224  br x17
0x4cd10584   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10588   232  d63f03e0       constant
0x4cd1058c   236  d503201f       constant
0x4cd10590   240  4cb06000       constant
0x4cd10594   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd10504  code target (STUB)  (0x4cd10400)
0x4cd10540  constant pool (size 16)
0x4cd10578  runtime entry
0x4cd10584  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2194
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd10600     0  mov x2, x1
0x4cd10604     4  tbnz w2, #0, #+0x14 (addr 0x4cd10618)
0x4cd10608     8  mov x3, x0
0x4cd1060c    12  tbnz w3, #0, #+0x1c (addr 0x4cd10628)
0x4cd10610    16  and x0, x3, x2
0x4cd10614    20  ret
0x4cd10618    24  movz x16, #0x0
0x4cd1061c    28  sub csp, jssp, #0x10 (16)
0x4cd10620    32  stp fp, lr, [jssp, #-16]!
0x4cd10624    36  bl #+0x14 (addr 0x4cd10638)
0x4cd10628    40  movz x16, #0x8
0x4cd1062c    44  sub csp, jssp, #0x10 (16)
0x4cd10630    48  stp fp, lr, [jssp, #-16]!
0x4cd10634    52  bl #+0x4 (addr 0x4cd10638)
0x4cd10638    56  movz x17, #0xa00000000
0x4cd1063c    60  sub csp, jssp, #0x10 (16)
0x4cd10640    64  stp x17, cp, [jssp, #-16]!
0x4cd10644    68  add fp, jssp, #0x10 (16)
0x4cd10648    72  ldr x17, pc+24 (addr 0x000000004cd10660)    ;; lazy deoptimization bailout 0
0x4cd1064c    76  add x17, x17, x16
0x4cd10650    80  br x17
0x4cd10654    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10658    88  d63f03e0       constant
0x4cd1065c    92  d503201f       constant
0x4cd10660    96  4cb06000       constant
0x4cd10664   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd10648  runtime entry
0x4cd10654  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2194
type = NORMAL
name = BinaryOpICStub(BIT_AND:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 112)
0x4cd10600     0  mov x2, x1
0x4cd10604     4  tbnz w2, #0, #+0x14 (addr 0x4cd10618)
0x4cd10608     8  mov x3, x0
0x4cd1060c    12  tbnz w3, #0, #+0x1c (addr 0x4cd10628)
0x4cd10610    16  and x0, x3, x2
0x4cd10614    20  ret
0x4cd10618    24  movz x16, #0x0
0x4cd1061c    28  sub csp, jssp, #0x10 (16)
0x4cd10620    32  stp fp, lr, [jssp, #-16]!
0x4cd10624    36  bl #+0x14 (addr 0x4cd10638)
0x4cd10628    40  movz x16, #0x8
0x4cd1062c    44  sub csp, jssp, #0x10 (16)
0x4cd10630    48  stp fp, lr, [jssp, #-16]!
0x4cd10634    52  bl #+0x4 (addr 0x4cd10638)
0x4cd10638    56  movz x17, #0xa00000000
0x4cd1063c    60  sub csp, jssp, #0x10 (16)
0x4cd10640    64  stp x17, cp, [jssp, #-16]!
0x4cd10644    68  add fp, jssp, #0x10 (16)
0x4cd10648    72  ldr x17, pc+24 (addr 0x000000004cd10660)    ;; lazy deoptimization bailout 0
0x4cd1064c    76  add x17, x17, x16
0x4cd10650    80  br x17
0x4cd10654    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10658    88  d63f03e0       constant
0x4cd1065c    92  d503201f       constant
0x4cd10660    96  4cb06000       constant
0x4cd10664   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd10648  runtime entry
0x4cd10654  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4384
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd106e0     0  mov x2, x1
0x4cd106e4     4  tbnz w2, #0, #+0x14 (addr 0x4cd106f8)
0x4cd106e8     8  mov x3, x0
0x4cd106ec    12  tbnz w3, #0, #+0x1c (addr 0x4cd10708)
0x4cd106f0    16  orr x0, x3, x2
0x4cd106f4    20  ret
0x4cd106f8    24  movz x16, #0x0
0x4cd106fc    28  sub csp, jssp, #0x10 (16)
0x4cd10700    32  stp fp, lr, [jssp, #-16]!
0x4cd10704    36  bl #+0x14 (addr 0x4cd10718)
0x4cd10708    40  movz x16, #0x8
0x4cd1070c    44  sub csp, jssp, #0x10 (16)
0x4cd10710    48  stp fp, lr, [jssp, #-16]!
0x4cd10714    52  bl #+0x4 (addr 0x4cd10718)
0x4cd10718    56  movz x17, #0xa00000000
0x4cd1071c    60  sub csp, jssp, #0x10 (16)
0x4cd10720    64  stp x17, cp, [jssp, #-16]!
0x4cd10724    68  add fp, jssp, #0x10 (16)
0x4cd10728    72  ldr x17, pc+24 (addr 0x000000004cd10740)    ;; lazy deoptimization bailout 0
0x4cd1072c    76  add x17, x17, x16
0x4cd10730    80  br x17
0x4cd10734    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10738    88  d63f03e0       constant
0x4cd1073c    92  d503201f       constant
0x4cd10740    96  4cb06000       constant
0x4cd10744   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd10728  runtime entry
0x4cd10734  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4384
type = NORMAL
name = BinaryOpICStub(BIT_OR:Int32*Int32->Int32)
compiler = crankshaft
Instructions (size = 112)
0x4cd106e0     0  mov x2, x1
0x4cd106e4     4  tbnz w2, #0, #+0x14 (addr 0x4cd106f8)
0x4cd106e8     8  mov x3, x0
0x4cd106ec    12  tbnz w3, #0, #+0x1c (addr 0x4cd10708)
0x4cd106f0    16  orr x0, x3, x2
0x4cd106f4    20  ret
0x4cd106f8    24  movz x16, #0x0
0x4cd106fc    28  sub csp, jssp, #0x10 (16)
0x4cd10700    32  stp fp, lr, [jssp, #-16]!
0x4cd10704    36  bl #+0x14 (addr 0x4cd10718)
0x4cd10708    40  movz x16, #0x8
0x4cd1070c    44  sub csp, jssp, #0x10 (16)
0x4cd10710    48  stp fp, lr, [jssp, #-16]!
0x4cd10714    52  bl #+0x4 (addr 0x4cd10718)
0x4cd10718    56  movz x17, #0xa00000000
0x4cd1071c    60  sub csp, jssp, #0x10 (16)
0x4cd10720    64  stp x17, cp, [jssp, #-16]!
0x4cd10724    68  add fp, jssp, #0x10 (16)
0x4cd10728    72  ldr x17, pc+24 (addr 0x000000004cd10740)    ;; lazy deoptimization bailout 0
0x4cd1072c    76  add x17, x17, x16
0x4cd10730    80  br x17
0x4cd10734    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10738    88  d63f03e0       constant
0x4cd1073c    92  d503201f       constant
0x4cd10740    96  4cb06000       constant
0x4cd10744   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd10728  runtime entry
0x4cd10734  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4368
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd107c0     0  mov x2, x1
0x4cd107c4     4  tbnz w2, #0, #+0x14 (addr 0x4cd107d8)
0x4cd107c8     8  mov x3, x0
0x4cd107cc    12  tbnz w3, #0, #+0x1c (addr 0x4cd107e8)
0x4cd107d0    16  orr x0, x3, x2
0x4cd107d4    20  ret
0x4cd107d8    24  movz x16, #0x0
0x4cd107dc    28  sub csp, jssp, #0x10 (16)
0x4cd107e0    32  stp fp, lr, [jssp, #-16]!
0x4cd107e4    36  bl #+0x14 (addr 0x4cd107f8)
0x4cd107e8    40  movz x16, #0x8
0x4cd107ec    44  sub csp, jssp, #0x10 (16)
0x4cd107f0    48  stp fp, lr, [jssp, #-16]!
0x4cd107f4    52  bl #+0x4 (addr 0x4cd107f8)
0x4cd107f8    56  movz x17, #0xa00000000
0x4cd107fc    60  sub csp, jssp, #0x10 (16)
0x4cd10800    64  stp x17, cp, [jssp, #-16]!
0x4cd10804    68  add fp, jssp, #0x10 (16)
0x4cd10808    72  ldr x17, pc+24 (addr 0x000000004cd10820)    ;; lazy deoptimization bailout 0
0x4cd1080c    76  add x17, x17, x16
0x4cd10810    80  br x17
0x4cd10814    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10818    88  d63f03e0       constant
0x4cd1081c    92  d503201f       constant
0x4cd10820    96  4cb06000       constant
0x4cd10824   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd10808  runtime entry
0x4cd10814  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4368
type = NORMAL
name = BinaryOpICStub(BIT_OR:Int32*Int32->Smi)
compiler = crankshaft
Instructions (size = 112)
0x4cd107c0     0  mov x2, x1
0x4cd107c4     4  tbnz w2, #0, #+0x14 (addr 0x4cd107d8)
0x4cd107c8     8  mov x3, x0
0x4cd107cc    12  tbnz w3, #0, #+0x1c (addr 0x4cd107e8)
0x4cd107d0    16  orr x0, x3, x2
0x4cd107d4    20  ret
0x4cd107d8    24  movz x16, #0x0
0x4cd107dc    28  sub csp, jssp, #0x10 (16)
0x4cd107e0    32  stp fp, lr, [jssp, #-16]!
0x4cd107e4    36  bl #+0x14 (addr 0x4cd107f8)
0x4cd107e8    40  movz x16, #0x8
0x4cd107ec    44  sub csp, jssp, #0x10 (16)
0x4cd107f0    48  stp fp, lr, [jssp, #-16]!
0x4cd107f4    52  bl #+0x4 (addr 0x4cd107f8)
0x4cd107f8    56  movz x17, #0xa00000000
0x4cd107fc    60  sub csp, jssp, #0x10 (16)
0x4cd10800    64  stp x17, cp, [jssp, #-16]!
0x4cd10804    68  add fp, jssp, #0x10 (16)
0x4cd10808    72  ldr x17, pc+24 (addr 0x000000004cd10820)    ;; lazy deoptimization bailout 0
0x4cd1080c    76  add x17, x17, x16
0x4cd10810    80  br x17
0x4cd10814    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10818    88  d63f03e0       constant
0x4cd1081c    92  d503201f       constant
0x4cd10820    96  4cb06000       constant
0x4cd10824   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd10808  runtime entry
0x4cd10814  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2336
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd108a0     0  mov x2, x1
0x4cd108a4     4  tbnz w2, #0, #+0x14 (addr 0x4cd108b8)
0x4cd108a8     8  mov x3, x0
0x4cd108ac    12  tbnz w3, #0, #+0x1c (addr 0x4cd108c8)
0x4cd108b0    16  orr x0, x3, x2
0x4cd108b4    20  ret
0x4cd108b8    24  movz x16, #0x0
0x4cd108bc    28  sub csp, jssp, #0x10 (16)
0x4cd108c0    32  stp fp, lr, [jssp, #-16]!
0x4cd108c4    36  bl #+0x14 (addr 0x4cd108d8)
0x4cd108c8    40  movz x16, #0x8
0x4cd108cc    44  sub csp, jssp, #0x10 (16)
0x4cd108d0    48  stp fp, lr, [jssp, #-16]!
0x4cd108d4    52  bl #+0x4 (addr 0x4cd108d8)
0x4cd108d8    56  movz x17, #0xa00000000
0x4cd108dc    60  sub csp, jssp, #0x10 (16)
0x4cd108e0    64  stp x17, cp, [jssp, #-16]!
0x4cd108e4    68  add fp, jssp, #0x10 (16)
0x4cd108e8    72  ldr x17, pc+24 (addr 0x000000004cd10900)    ;; lazy deoptimization bailout 0
0x4cd108ec    76  add x17, x17, x16
0x4cd108f0    80  br x17
0x4cd108f4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd108f8    88  d63f03e0       constant
0x4cd108fc    92  d503201f       constant
0x4cd10900    96  4cb06000       constant
0x4cd10904   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd108e8  runtime entry
0x4cd108f4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2336
type = NORMAL
name = BinaryOpICStub(BIT_OR:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 112)
0x4cd108a0     0  mov x2, x1
0x4cd108a4     4  tbnz w2, #0, #+0x14 (addr 0x4cd108b8)
0x4cd108a8     8  mov x3, x0
0x4cd108ac    12  tbnz w3, #0, #+0x1c (addr 0x4cd108c8)
0x4cd108b0    16  orr x0, x3, x2
0x4cd108b4    20  ret
0x4cd108b8    24  movz x16, #0x0
0x4cd108bc    28  sub csp, jssp, #0x10 (16)
0x4cd108c0    32  stp fp, lr, [jssp, #-16]!
0x4cd108c4    36  bl #+0x14 (addr 0x4cd108d8)
0x4cd108c8    40  movz x16, #0x8
0x4cd108cc    44  sub csp, jssp, #0x10 (16)
0x4cd108d0    48  stp fp, lr, [jssp, #-16]!
0x4cd108d4    52  bl #+0x4 (addr 0x4cd108d8)
0x4cd108d8    56  movz x17, #0xa00000000
0x4cd108dc    60  sub csp, jssp, #0x10 (16)
0x4cd108e0    64  stp x17, cp, [jssp, #-16]!
0x4cd108e4    68  add fp, jssp, #0x10 (16)
0x4cd108e8    72  ldr x17, pc+24 (addr 0x000000004cd10900)    ;; lazy deoptimization bailout 0
0x4cd108ec    76  add x17, x17, x16
0x4cd108f0    80  br x17
0x4cd108f4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd108f8    88  d63f03e0       constant
0x4cd108fc    92  d503201f       constant
0x4cd10900    96  4cb06000       constant
0x4cd10904   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd108e8  runtime entry
0x4cd108f4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2320
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd10980     0  mov x2, x1
0x4cd10984     4  tbnz w2, #0, #+0x14 (addr 0x4cd10998)
0x4cd10988     8  mov x3, x0
0x4cd1098c    12  tbnz w3, #0, #+0x1c (addr 0x4cd109a8)
0x4cd10990    16  orr x0, x3, x2
0x4cd10994    20  ret
0x4cd10998    24  movz x16, #0x0
0x4cd1099c    28  sub csp, jssp, #0x10 (16)
0x4cd109a0    32  stp fp, lr, [jssp, #-16]!
0x4cd109a4    36  bl #+0x14 (addr 0x4cd109b8)
0x4cd109a8    40  movz x16, #0x8
0x4cd109ac    44  sub csp, jssp, #0x10 (16)
0x4cd109b0    48  stp fp, lr, [jssp, #-16]!
0x4cd109b4    52  bl #+0x4 (addr 0x4cd109b8)
0x4cd109b8    56  movz x17, #0xa00000000
0x4cd109bc    60  sub csp, jssp, #0x10 (16)
0x4cd109c0    64  stp x17, cp, [jssp, #-16]!
0x4cd109c4    68  add fp, jssp, #0x10 (16)
0x4cd109c8    72  ldr x17, pc+24 (addr 0x000000004cd109e0)    ;; lazy deoptimization bailout 0
0x4cd109cc    76  add x17, x17, x16
0x4cd109d0    80  br x17
0x4cd109d4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd109d8    88  d63f03e0       constant
0x4cd109dc    92  d503201f       constant
0x4cd109e0    96  4cb06000       constant
0x4cd109e4   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd109c8  runtime entry
0x4cd109d4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2320
type = NORMAL
name = BinaryOpICStub(BIT_OR:Int32*Smi->Smi)
compiler = crankshaft
Instructions (size = 112)
0x4cd10980     0  mov x2, x1
0x4cd10984     4  tbnz w2, #0, #+0x14 (addr 0x4cd10998)
0x4cd10988     8  mov x3, x0
0x4cd1098c    12  tbnz w3, #0, #+0x1c (addr 0x4cd109a8)
0x4cd10990    16  orr x0, x3, x2
0x4cd10994    20  ret
0x4cd10998    24  movz x16, #0x0
0x4cd1099c    28  sub csp, jssp, #0x10 (16)
0x4cd109a0    32  stp fp, lr, [jssp, #-16]!
0x4cd109a4    36  bl #+0x14 (addr 0x4cd109b8)
0x4cd109a8    40  movz x16, #0x8
0x4cd109ac    44  sub csp, jssp, #0x10 (16)
0x4cd109b0    48  stp fp, lr, [jssp, #-16]!
0x4cd109b4    52  bl #+0x4 (addr 0x4cd109b8)
0x4cd109b8    56  movz x17, #0xa00000000
0x4cd109bc    60  sub csp, jssp, #0x10 (16)
0x4cd109c0    64  stp x17, cp, [jssp, #-16]!
0x4cd109c4    68  add fp, jssp, #0x10 (16)
0x4cd109c8    72  ldr x17, pc+24 (addr 0x000000004cd109e0)    ;; lazy deoptimization bailout 0
0x4cd109cc    76  add x17, x17, x16
0x4cd109d0    80  br x17
0x4cd109d4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd109d8    88  d63f03e0       constant
0x4cd109dc    92  d503201f       constant
0x4cd109e0    96  4cb06000       constant
0x4cd109e4   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd109c8  runtime entry
0x4cd109d4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2464
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0x4cd10a60     0  mov x2, x0
0x4cd10a64     4  tbnz w2, #0, #+0xac (addr 0x4cd10b10)
0x4cd10a68     8  tbnz w1, #0, #+0x18 (addr 0x4cd10a80)
0x4cd10a6c    12  asr x4, x1, #32
0x4cd10a70    16  asr x0, x2, #32
0x4cd10a74    20  orr w0, w0, w4
0x4cd10a78    24  lsl x0, x0, #32
0x4cd10a7c    28  ret
0x4cd10a80    32  sub csp, jssp, #0x10 (16)
0x4cd10a84    36  stp fp, lr, [jssp, #-16]!
0x4cd10a88    40  movz fp, #0xa00000000
0x4cd10a8c    44  sub csp, jssp, #0x8 (8)
0x4cd10a90    48  str fp, [jssp, #-8]!
0x4cd10a94    52  add fp, jssp, #0x8 (8)
0x4cd10a98    56  ldur x16, [x1, #-1]
0x4cd10a9c    60  ldr x17, [x26, #120]
0x4cd10aa0    64  cmp x16, x17
0x4cd10aa4    68  b.ne #+0x30 (addr 0x4cd10ad4)
0x4cd10aa8    72  ldur d30, [x1, #7]
0x4cd10aac    76  fcvtzs x4, d30
0x4cd10ab0    80  cmp x4, #0x1 (1)
0x4cd10ab4    84  ccmn x4, #1, #nzcV, vc
0x4cd10ab8    88  b.vc #+0x18 (addr 0x4cd10ad0)
0x4cd10abc    92  sub csp, jssp, #0x8 (8)
0x4cd10ac0    96  str lr, [jssp, #-8]!
0x4cd10ac4   100  ldr x16, pc+68 (addr 0x000000004cd10b08)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd10ac8   104  blr x16
0x4cd10acc   108  ldr lr, [jssp], #8
0x4cd10ad0   112  b #+0x24 (addr 0x4cd10af4)
0x4cd10ad4   116  ldp x4, x3, [x26, #64]
0x4cd10ad8   120  cmp x1, x4
0x4cd10adc   124  cset x4, eq
0x4cd10ae0   128  ccmp x1, x3, #nZcv, ne
0x4cd10ae4   132  b.eq #+0x10 (addr 0x4cd10af4)
0x4cd10ae8   136  ldr x16, [x26, #40]
0x4cd10aec   140  cmp x1, x16
0x4cd10af0   144  b.ne #+0x30 (addr 0x4cd10b20)
0x4cd10af4   148  ldr lr, [jssp, #16]
0x4cd10af8   152  ldp xzr, fp, [jssp], #24
0x4cd10afc   156  b #-0x8c (addr 0x4cd10a70)
0x4cd10b00   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd10b04   164  d63f03e0       constant
0x4cd10b08   168  4cd0fee0       constant
0x4cd10b0c   172  00000000       constant
0x4cd10b10   176  movz x16, #0x0
0x4cd10b14   180  sub csp, jssp, #0x10 (16)
0x4cd10b18   184  stp fp, lr, [jssp, #-16]!
0x4cd10b1c   188  bl #+0xc (addr 0x4cd10b28)
0x4cd10b20   192  movz x16, #0x8
0x4cd10b24   196  bl #+0x14 (addr 0x4cd10b38)
0x4cd10b28   200  movz x17, #0xa00000000
0x4cd10b2c   204  sub csp, jssp, #0x10 (16)
0x4cd10b30   208  stp x17, cp, [jssp, #-16]!
0x4cd10b34   212  add fp, jssp, #0x10 (16)
0x4cd10b38   216  ldr x17, pc+24 (addr 0x000000004cd10b50)    ;; lazy deoptimization bailout 0
0x4cd10b3c   220  add x17, x17, x16
0x4cd10b40   224  br x17
0x4cd10b44   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10b48   232  d63f03e0       constant
0x4cd10b4c   236  d503201f       constant
0x4cd10b50   240  4cb06000       constant
0x4cd10b54   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd10ac4  code target (STUB)  (0x4cd0fee0)
0x4cd10b00  constant pool (size 16)
0x4cd10b38  runtime entry
0x4cd10b44  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2464
type = NORMAL
name = BinaryOpICStub(BIT_OR:Number*Smi->Int32)
compiler = crankshaft
Instructions (size = 256)
0x4cd10a60     0  mov x2, x0
0x4cd10a64     4  tbnz w2, #0, #+0xac (addr 0x4cd10b10)
0x4cd10a68     8  tbnz w1, #0, #+0x18 (addr 0x4cd10a80)
0x4cd10a6c    12  asr x4, x1, #32
0x4cd10a70    16  asr x0, x2, #32
0x4cd10a74    20  orr w0, w0, w4
0x4cd10a78    24  lsl x0, x0, #32
0x4cd10a7c    28  ret
0x4cd10a80    32  sub csp, jssp, #0x10 (16)
0x4cd10a84    36  stp fp, lr, [jssp, #-16]!
0x4cd10a88    40  movz fp, #0xa00000000
0x4cd10a8c    44  sub csp, jssp, #0x8 (8)
0x4cd10a90    48  str fp, [jssp, #-8]!
0x4cd10a94    52  add fp, jssp, #0x8 (8)
0x4cd10a98    56  ldur x16, [x1, #-1]
0x4cd10a9c    60  ldr x17, [x26, #120]
0x4cd10aa0    64  cmp x16, x17
0x4cd10aa4    68  b.ne #+0x30 (addr 0x4cd10ad4)
0x4cd10aa8    72  ldur d30, [x1, #7]
0x4cd10aac    76  fcvtzs x4, d30
0x4cd10ab0    80  cmp x4, #0x1 (1)
0x4cd10ab4    84  ccmn x4, #1, #nzcV, vc
0x4cd10ab8    88  b.vc #+0x18 (addr 0x4cd10ad0)
0x4cd10abc    92  sub csp, jssp, #0x8 (8)
0x4cd10ac0    96  str lr, [jssp, #-8]!
0x4cd10ac4   100  ldr x16, pc+68 (addr 0x000000004cd10b08)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd10ac8   104  blr x16
0x4cd10acc   108  ldr lr, [jssp], #8
0x4cd10ad0   112  b #+0x24 (addr 0x4cd10af4)
0x4cd10ad4   116  ldp x4, x3, [x26, #64]
0x4cd10ad8   120  cmp x1, x4
0x4cd10adc   124  cset x4, eq
0x4cd10ae0   128  ccmp x1, x3, #nZcv, ne
0x4cd10ae4   132  b.eq #+0x10 (addr 0x4cd10af4)
0x4cd10ae8   136  ldr x16, [x26, #40]
0x4cd10aec   140  cmp x1, x16
0x4cd10af0   144  b.ne #+0x30 (addr 0x4cd10b20)
0x4cd10af4   148  ldr lr, [jssp, #16]
0x4cd10af8   152  ldp xzr, fp, [jssp], #24
0x4cd10afc   156  b #-0x8c (addr 0x4cd10a70)
0x4cd10b00   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd10b04   164  d63f03e0       constant
0x4cd10b08   168  4cd0fee0       constant
0x4cd10b0c   172  00000000       constant
0x4cd10b10   176  movz x16, #0x0
0x4cd10b14   180  sub csp, jssp, #0x10 (16)
0x4cd10b18   184  stp fp, lr, [jssp, #-16]!
0x4cd10b1c   188  bl #+0xc (addr 0x4cd10b28)
0x4cd10b20   192  movz x16, #0x8
0x4cd10b24   196  bl #+0x14 (addr 0x4cd10b38)
0x4cd10b28   200  movz x17, #0xa00000000
0x4cd10b2c   204  sub csp, jssp, #0x10 (16)
0x4cd10b30   208  stp x17, cp, [jssp, #-16]!
0x4cd10b34   212  add fp, jssp, #0x10 (16)
0x4cd10b38   216  ldr x17, pc+24 (addr 0x000000004cd10b50)    ;; lazy deoptimization bailout 0
0x4cd10b3c   220  add x17, x17, x16
0x4cd10b40   224  br x17
0x4cd10b44   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10b48   232  d63f03e0       constant
0x4cd10b4c   236  d503201f       constant
0x4cd10b50   240  4cb06000       constant
0x4cd10b54   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd10ac4  code target (STUB)  (0x4cd0fee0)
0x4cd10b00  constant pool (size 16)
0x4cd10b38  runtime entry
0x4cd10b44  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2448
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0x4cd10bc0     0  mov x2, x0
0x4cd10bc4     4  tbnz w2, #0, #+0xac (addr 0x4cd10c70)
0x4cd10bc8     8  tbnz w1, #0, #+0x18 (addr 0x4cd10be0)
0x4cd10bcc    12  asr x4, x1, #32
0x4cd10bd0    16  asr x0, x2, #32
0x4cd10bd4    20  orr w0, w0, w4
0x4cd10bd8    24  lsl x0, x0, #32
0x4cd10bdc    28  ret
0x4cd10be0    32  sub csp, jssp, #0x10 (16)
0x4cd10be4    36  stp fp, lr, [jssp, #-16]!
0x4cd10be8    40  movz fp, #0xa00000000
0x4cd10bec    44  sub csp, jssp, #0x8 (8)
0x4cd10bf0    48  str fp, [jssp, #-8]!
0x4cd10bf4    52  add fp, jssp, #0x8 (8)
0x4cd10bf8    56  ldur x16, [x1, #-1]
0x4cd10bfc    60  ldr x17, [x26, #120]
0x4cd10c00    64  cmp x16, x17
0x4cd10c04    68  b.ne #+0x30 (addr 0x4cd10c34)
0x4cd10c08    72  ldur d30, [x1, #7]
0x4cd10c0c    76  fcvtzs x4, d30
0x4cd10c10    80  cmp x4, #0x1 (1)
0x4cd10c14    84  ccmn x4, #1, #nzcV, vc
0x4cd10c18    88  b.vc #+0x18 (addr 0x4cd10c30)
0x4cd10c1c    92  sub csp, jssp, #0x8 (8)
0x4cd10c20    96  str lr, [jssp, #-8]!
0x4cd10c24   100  ldr x16, pc+68 (addr 0x000000004cd10c68)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd10c28   104  blr x16
0x4cd10c2c   108  ldr lr, [jssp], #8
0x4cd10c30   112  b #+0x24 (addr 0x4cd10c54)
0x4cd10c34   116  ldp x4, x3, [x26, #64]
0x4cd10c38   120  cmp x1, x4
0x4cd10c3c   124  cset x4, eq
0x4cd10c40   128  ccmp x1, x3, #nZcv, ne
0x4cd10c44   132  b.eq #+0x10 (addr 0x4cd10c54)
0x4cd10c48   136  ldr x16, [x26, #40]
0x4cd10c4c   140  cmp x1, x16
0x4cd10c50   144  b.ne #+0x30 (addr 0x4cd10c80)
0x4cd10c54   148  ldr lr, [jssp, #16]
0x4cd10c58   152  ldp xzr, fp, [jssp], #24
0x4cd10c5c   156  b #-0x8c (addr 0x4cd10bd0)
0x4cd10c60   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd10c64   164  d63f03e0       constant
0x4cd10c68   168  4cd0fee0       constant
0x4cd10c6c   172  00000000       constant
0x4cd10c70   176  movz x16, #0x0
0x4cd10c74   180  sub csp, jssp, #0x10 (16)
0x4cd10c78   184  stp fp, lr, [jssp, #-16]!
0x4cd10c7c   188  bl #+0xc (addr 0x4cd10c88)
0x4cd10c80   192  movz x16, #0x8
0x4cd10c84   196  bl #+0x14 (addr 0x4cd10c98)
0x4cd10c88   200  movz x17, #0xa00000000
0x4cd10c8c   204  sub csp, jssp, #0x10 (16)
0x4cd10c90   208  stp x17, cp, [jssp, #-16]!
0x4cd10c94   212  add fp, jssp, #0x10 (16)
0x4cd10c98   216  ldr x17, pc+24 (addr 0x000000004cd10cb0)    ;; lazy deoptimization bailout 0
0x4cd10c9c   220  add x17, x17, x16
0x4cd10ca0   224  br x17
0x4cd10ca4   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10ca8   232  d63f03e0       constant
0x4cd10cac   236  d503201f       constant
0x4cd10cb0   240  4cb06000       constant
0x4cd10cb4   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd10c24  code target (STUB)  (0x4cd0fee0)
0x4cd10c60  constant pool (size 16)
0x4cd10c98  runtime entry
0x4cd10ca4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2448
type = NORMAL
name = BinaryOpICStub(BIT_OR:Number*Smi->Smi)
compiler = crankshaft
Instructions (size = 256)
0x4cd10bc0     0  mov x2, x0
0x4cd10bc4     4  tbnz w2, #0, #+0xac (addr 0x4cd10c70)
0x4cd10bc8     8  tbnz w1, #0, #+0x18 (addr 0x4cd10be0)
0x4cd10bcc    12  asr x4, x1, #32
0x4cd10bd0    16  asr x0, x2, #32
0x4cd10bd4    20  orr w0, w0, w4
0x4cd10bd8    24  lsl x0, x0, #32
0x4cd10bdc    28  ret
0x4cd10be0    32  sub csp, jssp, #0x10 (16)
0x4cd10be4    36  stp fp, lr, [jssp, #-16]!
0x4cd10be8    40  movz fp, #0xa00000000
0x4cd10bec    44  sub csp, jssp, #0x8 (8)
0x4cd10bf0    48  str fp, [jssp, #-8]!
0x4cd10bf4    52  add fp, jssp, #0x8 (8)
0x4cd10bf8    56  ldur x16, [x1, #-1]
0x4cd10bfc    60  ldr x17, [x26, #120]
0x4cd10c00    64  cmp x16, x17
0x4cd10c04    68  b.ne #+0x30 (addr 0x4cd10c34)
0x4cd10c08    72  ldur d30, [x1, #7]
0x4cd10c0c    76  fcvtzs x4, d30
0x4cd10c10    80  cmp x4, #0x1 (1)
0x4cd10c14    84  ccmn x4, #1, #nzcV, vc
0x4cd10c18    88  b.vc #+0x18 (addr 0x4cd10c30)
0x4cd10c1c    92  sub csp, jssp, #0x8 (8)
0x4cd10c20    96  str lr, [jssp, #-8]!
0x4cd10c24   100  ldr x16, pc+68 (addr 0x000000004cd10c68)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd10c28   104  blr x16
0x4cd10c2c   108  ldr lr, [jssp], #8
0x4cd10c30   112  b #+0x24 (addr 0x4cd10c54)
0x4cd10c34   116  ldp x4, x3, [x26, #64]
0x4cd10c38   120  cmp x1, x4
0x4cd10c3c   124  cset x4, eq
0x4cd10c40   128  ccmp x1, x3, #nZcv, ne
0x4cd10c44   132  b.eq #+0x10 (addr 0x4cd10c54)
0x4cd10c48   136  ldr x16, [x26, #40]
0x4cd10c4c   140  cmp x1, x16
0x4cd10c50   144  b.ne #+0x30 (addr 0x4cd10c80)
0x4cd10c54   148  ldr lr, [jssp, #16]
0x4cd10c58   152  ldp xzr, fp, [jssp], #24
0x4cd10c5c   156  b #-0x8c (addr 0x4cd10bd0)
0x4cd10c60   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd10c64   164  d63f03e0       constant
0x4cd10c68   168  4cd0fee0       constant
0x4cd10c6c   172  00000000       constant
0x4cd10c70   176  movz x16, #0x0
0x4cd10c74   180  sub csp, jssp, #0x10 (16)
0x4cd10c78   184  stp fp, lr, [jssp, #-16]!
0x4cd10c7c   188  bl #+0xc (addr 0x4cd10c88)
0x4cd10c80   192  movz x16, #0x8
0x4cd10c84   196  bl #+0x14 (addr 0x4cd10c98)
0x4cd10c88   200  movz x17, #0xa00000000
0x4cd10c8c   204  sub csp, jssp, #0x10 (16)
0x4cd10c90   208  stp x17, cp, [jssp, #-16]!
0x4cd10c94   212  add fp, jssp, #0x10 (16)
0x4cd10c98   216  ldr x17, pc+24 (addr 0x000000004cd10cb0)    ;; lazy deoptimization bailout 0
0x4cd10c9c   220  add x17, x17, x16
0x4cd10ca0   224  br x17
0x4cd10ca4   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10ca8   232  d63f03e0       constant
0x4cd10cac   236  d503201f       constant
0x4cd10cb0   240  4cb06000       constant
0x4cd10cb4   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd10c24  code target (STUB)  (0x4cd0fee0)
0x4cd10c60  constant pool (size 16)
0x4cd10c98  runtime entry
0x4cd10ca4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4256
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd10d20     0  mov x2, x1
0x4cd10d24     4  tbnz w2, #0, #+0x14 (addr 0x4cd10d38)
0x4cd10d28     8  mov x3, x0
0x4cd10d2c    12  tbnz w3, #0, #+0x1c (addr 0x4cd10d48)
0x4cd10d30    16  orr x0, x3, x2
0x4cd10d34    20  ret
0x4cd10d38    24  movz x16, #0x0
0x4cd10d3c    28  sub csp, jssp, #0x10 (16)
0x4cd10d40    32  stp fp, lr, [jssp, #-16]!
0x4cd10d44    36  bl #+0x14 (addr 0x4cd10d58)
0x4cd10d48    40  movz x16, #0x8
0x4cd10d4c    44  sub csp, jssp, #0x10 (16)
0x4cd10d50    48  stp fp, lr, [jssp, #-16]!
0x4cd10d54    52  bl #+0x4 (addr 0x4cd10d58)
0x4cd10d58    56  movz x17, #0xa00000000
0x4cd10d5c    60  sub csp, jssp, #0x10 (16)
0x4cd10d60    64  stp x17, cp, [jssp, #-16]!
0x4cd10d64    68  add fp, jssp, #0x10 (16)
0x4cd10d68    72  ldr x17, pc+24 (addr 0x000000004cd10d80)    ;; lazy deoptimization bailout 0
0x4cd10d6c    76  add x17, x17, x16
0x4cd10d70    80  br x17
0x4cd10d74    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10d78    88  d63f03e0       constant
0x4cd10d7c    92  d503201f       constant
0x4cd10d80    96  4cb06000       constant
0x4cd10d84   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd10d68  runtime entry
0x4cd10d74  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4256
type = NORMAL
name = BinaryOpICStub(BIT_OR:Smi*Int32->Int32)
compiler = crankshaft
Instructions (size = 112)
0x4cd10d20     0  mov x2, x1
0x4cd10d24     4  tbnz w2, #0, #+0x14 (addr 0x4cd10d38)
0x4cd10d28     8  mov x3, x0
0x4cd10d2c    12  tbnz w3, #0, #+0x1c (addr 0x4cd10d48)
0x4cd10d30    16  orr x0, x3, x2
0x4cd10d34    20  ret
0x4cd10d38    24  movz x16, #0x0
0x4cd10d3c    28  sub csp, jssp, #0x10 (16)
0x4cd10d40    32  stp fp, lr, [jssp, #-16]!
0x4cd10d44    36  bl #+0x14 (addr 0x4cd10d58)
0x4cd10d48    40  movz x16, #0x8
0x4cd10d4c    44  sub csp, jssp, #0x10 (16)
0x4cd10d50    48  stp fp, lr, [jssp, #-16]!
0x4cd10d54    52  bl #+0x4 (addr 0x4cd10d58)
0x4cd10d58    56  movz x17, #0xa00000000
0x4cd10d5c    60  sub csp, jssp, #0x10 (16)
0x4cd10d60    64  stp x17, cp, [jssp, #-16]!
0x4cd10d64    68  add fp, jssp, #0x10 (16)
0x4cd10d68    72  ldr x17, pc+24 (addr 0x000000004cd10d80)    ;; lazy deoptimization bailout 0
0x4cd10d6c    76  add x17, x17, x16
0x4cd10d70    80  br x17
0x4cd10d74    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10d78    88  d63f03e0       constant
0x4cd10d7c    92  d503201f       constant
0x4cd10d80    96  4cb06000       constant
0x4cd10d84   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd10d68  runtime entry
0x4cd10d74  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4240
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd10e00     0  mov x2, x1
0x4cd10e04     4  tbnz w2, #0, #+0x14 (addr 0x4cd10e18)
0x4cd10e08     8  mov x3, x0
0x4cd10e0c    12  tbnz w3, #0, #+0x1c (addr 0x4cd10e28)
0x4cd10e10    16  orr x0, x3, x2
0x4cd10e14    20  ret
0x4cd10e18    24  movz x16, #0x0
0x4cd10e1c    28  sub csp, jssp, #0x10 (16)
0x4cd10e20    32  stp fp, lr, [jssp, #-16]!
0x4cd10e24    36  bl #+0x14 (addr 0x4cd10e38)
0x4cd10e28    40  movz x16, #0x8
0x4cd10e2c    44  sub csp, jssp, #0x10 (16)
0x4cd10e30    48  stp fp, lr, [jssp, #-16]!
0x4cd10e34    52  bl #+0x4 (addr 0x4cd10e38)
0x4cd10e38    56  movz x17, #0xa00000000
0x4cd10e3c    60  sub csp, jssp, #0x10 (16)
0x4cd10e40    64  stp x17, cp, [jssp, #-16]!
0x4cd10e44    68  add fp, jssp, #0x10 (16)
0x4cd10e48    72  ldr x17, pc+24 (addr 0x000000004cd10e60)    ;; lazy deoptimization bailout 0
0x4cd10e4c    76  add x17, x17, x16
0x4cd10e50    80  br x17
0x4cd10e54    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10e58    88  d63f03e0       constant
0x4cd10e5c    92  d503201f       constant
0x4cd10e60    96  4cb06000       constant
0x4cd10e64   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd10e48  runtime entry
0x4cd10e54  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4240
type = NORMAL
name = BinaryOpICStub(BIT_OR:Smi*Int32->Smi)
compiler = crankshaft
Instructions (size = 112)
0x4cd10e00     0  mov x2, x1
0x4cd10e04     4  tbnz w2, #0, #+0x14 (addr 0x4cd10e18)
0x4cd10e08     8  mov x3, x0
0x4cd10e0c    12  tbnz w3, #0, #+0x1c (addr 0x4cd10e28)
0x4cd10e10    16  orr x0, x3, x2
0x4cd10e14    20  ret
0x4cd10e18    24  movz x16, #0x0
0x4cd10e1c    28  sub csp, jssp, #0x10 (16)
0x4cd10e20    32  stp fp, lr, [jssp, #-16]!
0x4cd10e24    36  bl #+0x14 (addr 0x4cd10e38)
0x4cd10e28    40  movz x16, #0x8
0x4cd10e2c    44  sub csp, jssp, #0x10 (16)
0x4cd10e30    48  stp fp, lr, [jssp, #-16]!
0x4cd10e34    52  bl #+0x4 (addr 0x4cd10e38)
0x4cd10e38    56  movz x17, #0xa00000000
0x4cd10e3c    60  sub csp, jssp, #0x10 (16)
0x4cd10e40    64  stp x17, cp, [jssp, #-16]!
0x4cd10e44    68  add fp, jssp, #0x10 (16)
0x4cd10e48    72  ldr x17, pc+24 (addr 0x000000004cd10e60)    ;; lazy deoptimization bailout 0
0x4cd10e4c    76  add x17, x17, x16
0x4cd10e50    80  br x17
0x4cd10e54    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10e58    88  d63f03e0       constant
0x4cd10e5c    92  d503201f       constant
0x4cd10e60    96  4cb06000       constant
0x4cd10e64   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd10e48  runtime entry
0x4cd10e54  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2192
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd10ee0     0  mov x2, x1
0x4cd10ee4     4  tbnz w2, #0, #+0x14 (addr 0x4cd10ef8)
0x4cd10ee8     8  mov x3, x0
0x4cd10eec    12  tbnz w3, #0, #+0x1c (addr 0x4cd10f08)
0x4cd10ef0    16  orr x0, x3, x2
0x4cd10ef4    20  ret
0x4cd10ef8    24  movz x16, #0x0
0x4cd10efc    28  sub csp, jssp, #0x10 (16)
0x4cd10f00    32  stp fp, lr, [jssp, #-16]!
0x4cd10f04    36  bl #+0x14 (addr 0x4cd10f18)
0x4cd10f08    40  movz x16, #0x8
0x4cd10f0c    44  sub csp, jssp, #0x10 (16)
0x4cd10f10    48  stp fp, lr, [jssp, #-16]!
0x4cd10f14    52  bl #+0x4 (addr 0x4cd10f18)
0x4cd10f18    56  movz x17, #0xa00000000
0x4cd10f1c    60  sub csp, jssp, #0x10 (16)
0x4cd10f20    64  stp x17, cp, [jssp, #-16]!
0x4cd10f24    68  add fp, jssp, #0x10 (16)
0x4cd10f28    72  ldr x17, pc+24 (addr 0x000000004cd10f40)    ;; lazy deoptimization bailout 0
0x4cd10f2c    76  add x17, x17, x16
0x4cd10f30    80  br x17
0x4cd10f34    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10f38    88  d63f03e0       constant
0x4cd10f3c    92  d503201f       constant
0x4cd10f40    96  4cb06000       constant
0x4cd10f44   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd10f28  runtime entry
0x4cd10f34  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2192
type = NORMAL
name = BinaryOpICStub(BIT_OR:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 112)
0x4cd10ee0     0  mov x2, x1
0x4cd10ee4     4  tbnz w2, #0, #+0x14 (addr 0x4cd10ef8)
0x4cd10ee8     8  mov x3, x0
0x4cd10eec    12  tbnz w3, #0, #+0x1c (addr 0x4cd10f08)
0x4cd10ef0    16  orr x0, x3, x2
0x4cd10ef4    20  ret
0x4cd10ef8    24  movz x16, #0x0
0x4cd10efc    28  sub csp, jssp, #0x10 (16)
0x4cd10f00    32  stp fp, lr, [jssp, #-16]!
0x4cd10f04    36  bl #+0x14 (addr 0x4cd10f18)
0x4cd10f08    40  movz x16, #0x8
0x4cd10f0c    44  sub csp, jssp, #0x10 (16)
0x4cd10f10    48  stp fp, lr, [jssp, #-16]!
0x4cd10f14    52  bl #+0x4 (addr 0x4cd10f18)
0x4cd10f18    56  movz x17, #0xa00000000
0x4cd10f1c    60  sub csp, jssp, #0x10 (16)
0x4cd10f20    64  stp x17, cp, [jssp, #-16]!
0x4cd10f24    68  add fp, jssp, #0x10 (16)
0x4cd10f28    72  ldr x17, pc+24 (addr 0x000000004cd10f40)    ;; lazy deoptimization bailout 0
0x4cd10f2c    76  add x17, x17, x16
0x4cd10f30    80  br x17
0x4cd10f34    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd10f38    88  d63f03e0       constant
0x4cd10f3c    92  d503201f       constant
0x4cd10f40    96  4cb06000       constant
0x4cd10f44   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd10f28  runtime entry
0x4cd10f34  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4385
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd10fc0     0  mov x2, x1
0x4cd10fc4     4  tbnz w2, #0, #+0x14 (addr 0x4cd10fd8)
0x4cd10fc8     8  mov x3, x0
0x4cd10fcc    12  tbnz w3, #0, #+0x1c (addr 0x4cd10fe8)
0x4cd10fd0    16  eor x0, x3, x2
0x4cd10fd4    20  ret
0x4cd10fd8    24  movz x16, #0x0
0x4cd10fdc    28  sub csp, jssp, #0x10 (16)
0x4cd10fe0    32  stp fp, lr, [jssp, #-16]!
0x4cd10fe4    36  bl #+0x14 (addr 0x4cd10ff8)
0x4cd10fe8    40  movz x16, #0x8
0x4cd10fec    44  sub csp, jssp, #0x10 (16)
0x4cd10ff0    48  stp fp, lr, [jssp, #-16]!
0x4cd10ff4    52  bl #+0x4 (addr 0x4cd10ff8)
0x4cd10ff8    56  movz x17, #0xa00000000
0x4cd10ffc    60  sub csp, jssp, #0x10 (16)
0x4cd11000    64  stp x17, cp, [jssp, #-16]!
0x4cd11004    68  add fp, jssp, #0x10 (16)
0x4cd11008    72  ldr x17, pc+24 (addr 0x000000004cd11020)    ;; lazy deoptimization bailout 0
0x4cd1100c    76  add x17, x17, x16
0x4cd11010    80  br x17
0x4cd11014    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11018    88  d63f03e0       constant
0x4cd1101c    92  d503201f       constant
0x4cd11020    96  4cb06000       constant
0x4cd11024   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd11008  runtime entry
0x4cd11014  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4385
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Int32*Int32->Int32)
compiler = crankshaft
Instructions (size = 112)
0x4cd10fc0     0  mov x2, x1
0x4cd10fc4     4  tbnz w2, #0, #+0x14 (addr 0x4cd10fd8)
0x4cd10fc8     8  mov x3, x0
0x4cd10fcc    12  tbnz w3, #0, #+0x1c (addr 0x4cd10fe8)
0x4cd10fd0    16  eor x0, x3, x2
0x4cd10fd4    20  ret
0x4cd10fd8    24  movz x16, #0x0
0x4cd10fdc    28  sub csp, jssp, #0x10 (16)
0x4cd10fe0    32  stp fp, lr, [jssp, #-16]!
0x4cd10fe4    36  bl #+0x14 (addr 0x4cd10ff8)
0x4cd10fe8    40  movz x16, #0x8
0x4cd10fec    44  sub csp, jssp, #0x10 (16)
0x4cd10ff0    48  stp fp, lr, [jssp, #-16]!
0x4cd10ff4    52  bl #+0x4 (addr 0x4cd10ff8)
0x4cd10ff8    56  movz x17, #0xa00000000
0x4cd10ffc    60  sub csp, jssp, #0x10 (16)
0x4cd11000    64  stp x17, cp, [jssp, #-16]!
0x4cd11004    68  add fp, jssp, #0x10 (16)
0x4cd11008    72  ldr x17, pc+24 (addr 0x000000004cd11020)    ;; lazy deoptimization bailout 0
0x4cd1100c    76  add x17, x17, x16
0x4cd11010    80  br x17
0x4cd11014    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11018    88  d63f03e0       constant
0x4cd1101c    92  d503201f       constant
0x4cd11020    96  4cb06000       constant
0x4cd11024   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd11008  runtime entry
0x4cd11014  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4369
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd110a0     0  mov x2, x1
0x4cd110a4     4  tbnz w2, #0, #+0x14 (addr 0x4cd110b8)
0x4cd110a8     8  mov x3, x0
0x4cd110ac    12  tbnz w3, #0, #+0x1c (addr 0x4cd110c8)
0x4cd110b0    16  eor x0, x3, x2
0x4cd110b4    20  ret
0x4cd110b8    24  movz x16, #0x0
0x4cd110bc    28  sub csp, jssp, #0x10 (16)
0x4cd110c0    32  stp fp, lr, [jssp, #-16]!
0x4cd110c4    36  bl #+0x14 (addr 0x4cd110d8)
0x4cd110c8    40  movz x16, #0x8
0x4cd110cc    44  sub csp, jssp, #0x10 (16)
0x4cd110d0    48  stp fp, lr, [jssp, #-16]!
0x4cd110d4    52  bl #+0x4 (addr 0x4cd110d8)
0x4cd110d8    56  movz x17, #0xa00000000
0x4cd110dc    60  sub csp, jssp, #0x10 (16)
0x4cd110e0    64  stp x17, cp, [jssp, #-16]!
0x4cd110e4    68  add fp, jssp, #0x10 (16)
0x4cd110e8    72  ldr x17, pc+24 (addr 0x000000004cd11100)    ;; lazy deoptimization bailout 0
0x4cd110ec    76  add x17, x17, x16
0x4cd110f0    80  br x17
0x4cd110f4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd110f8    88  d63f03e0       constant
0x4cd110fc    92  d503201f       constant
0x4cd11100    96  4cb06000       constant
0x4cd11104   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd110e8  runtime entry
0x4cd110f4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4369
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Int32*Int32->Smi)
compiler = crankshaft
Instructions (size = 112)
0x4cd110a0     0  mov x2, x1
0x4cd110a4     4  tbnz w2, #0, #+0x14 (addr 0x4cd110b8)
0x4cd110a8     8  mov x3, x0
0x4cd110ac    12  tbnz w3, #0, #+0x1c (addr 0x4cd110c8)
0x4cd110b0    16  eor x0, x3, x2
0x4cd110b4    20  ret
0x4cd110b8    24  movz x16, #0x0
0x4cd110bc    28  sub csp, jssp, #0x10 (16)
0x4cd110c0    32  stp fp, lr, [jssp, #-16]!
0x4cd110c4    36  bl #+0x14 (addr 0x4cd110d8)
0x4cd110c8    40  movz x16, #0x8
0x4cd110cc    44  sub csp, jssp, #0x10 (16)
0x4cd110d0    48  stp fp, lr, [jssp, #-16]!
0x4cd110d4    52  bl #+0x4 (addr 0x4cd110d8)
0x4cd110d8    56  movz x17, #0xa00000000
0x4cd110dc    60  sub csp, jssp, #0x10 (16)
0x4cd110e0    64  stp x17, cp, [jssp, #-16]!
0x4cd110e4    68  add fp, jssp, #0x10 (16)
0x4cd110e8    72  ldr x17, pc+24 (addr 0x000000004cd11100)    ;; lazy deoptimization bailout 0
0x4cd110ec    76  add x17, x17, x16
0x4cd110f0    80  br x17
0x4cd110f4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd110f8    88  d63f03e0       constant
0x4cd110fc    92  d503201f       constant
0x4cd11100    96  4cb06000       constant
0x4cd11104   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd110e8  runtime entry
0x4cd110f4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6417
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0x4cd11180     0  mov x2, x1
0x4cd11184     4  tbnz w2, #0, #+0xac (addr 0x4cd11230)
0x4cd11188     8  tbnz w0, #0, #+0x18 (addr 0x4cd111a0)
0x4cd1118c    12  asr x4, x0, #32
0x4cd11190    16  asr x0, x2, #32
0x4cd11194    20  eor w0, w4, w0
0x4cd11198    24  lsl x0, x0, #32
0x4cd1119c    28  ret
0x4cd111a0    32  sub csp, jssp, #0x10 (16)
0x4cd111a4    36  stp fp, lr, [jssp, #-16]!
0x4cd111a8    40  movz fp, #0xa00000000
0x4cd111ac    44  sub csp, jssp, #0x8 (8)
0x4cd111b0    48  str fp, [jssp, #-8]!
0x4cd111b4    52  add fp, jssp, #0x8 (8)
0x4cd111b8    56  ldur x16, [x0, #-1]
0x4cd111bc    60  ldr x17, [x26, #120]
0x4cd111c0    64  cmp x16, x17
0x4cd111c4    68  b.ne #+0x30 (addr 0x4cd111f4)
0x4cd111c8    72  ldur d30, [x0, #7]
0x4cd111cc    76  fcvtzs x4, d30
0x4cd111d0    80  cmp x4, #0x1 (1)
0x4cd111d4    84  ccmn x4, #1, #nzcV, vc
0x4cd111d8    88  b.vc #+0x18 (addr 0x4cd111f0)
0x4cd111dc    92  sub csp, jssp, #0x8 (8)
0x4cd111e0    96  str lr, [jssp, #-8]!
0x4cd111e4   100  ldr x16, pc+68 (addr 0x000000004cd11228)    ;; code: STUB, DoubleToIStub, minor: 127232
0x4cd111e8   104  blr x16
0x4cd111ec   108  ldr lr, [jssp], #8
0x4cd111f0   112  b #+0x24 (addr 0x4cd11214)
0x4cd111f4   116  ldp x4, x3, [x26, #64]
0x4cd111f8   120  cmp x0, x4
0x4cd111fc   124  cset x4, eq
0x4cd11200   128  ccmp x0, x3, #nZcv, ne
0x4cd11204   132  b.eq #+0x10 (addr 0x4cd11214)
0x4cd11208   136  ldr x16, [x26, #40]
0x4cd1120c   140  cmp x0, x16
0x4cd11210   144  b.ne #+0x30 (addr 0x4cd11240)
0x4cd11214   148  ldr lr, [jssp, #16]
0x4cd11218   152  ldp xzr, fp, [jssp], #24
0x4cd1121c   156  b #-0x8c (addr 0x4cd11190)
0x4cd11220   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd11224   164  d63f03e0       constant
0x4cd11228   168  4cd10400       constant
0x4cd1122c   172  00000000       constant
0x4cd11230   176  movz x16, #0x0
0x4cd11234   180  sub csp, jssp, #0x10 (16)
0x4cd11238   184  stp fp, lr, [jssp, #-16]!
0x4cd1123c   188  bl #+0xc (addr 0x4cd11248)
0x4cd11240   192  movz x16, #0x8
0x4cd11244   196  bl #+0x14 (addr 0x4cd11258)
0x4cd11248   200  movz x17, #0xa00000000
0x4cd1124c   204  sub csp, jssp, #0x10 (16)
0x4cd11250   208  stp x17, cp, [jssp, #-16]!
0x4cd11254   212  add fp, jssp, #0x10 (16)
0x4cd11258   216  ldr x17, pc+24 (addr 0x000000004cd11270)    ;; lazy deoptimization bailout 0
0x4cd1125c   220  add x17, x17, x16
0x4cd11260   224  br x17
0x4cd11264   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11268   232  d63f03e0       constant
0x4cd1126c   236  d503201f       constant
0x4cd11270   240  4cb06000       constant
0x4cd11274   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd111e4  code target (STUB)  (0x4cd10400)
0x4cd11220  constant pool (size 16)
0x4cd11258  runtime entry
0x4cd11264  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6417
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Int32*Number->Smi)
compiler = crankshaft
Instructions (size = 256)
0x4cd11180     0  mov x2, x1
0x4cd11184     4  tbnz w2, #0, #+0xac (addr 0x4cd11230)
0x4cd11188     8  tbnz w0, #0, #+0x18 (addr 0x4cd111a0)
0x4cd1118c    12  asr x4, x0, #32
0x4cd11190    16  asr x0, x2, #32
0x4cd11194    20  eor w0, w4, w0
0x4cd11198    24  lsl x0, x0, #32
0x4cd1119c    28  ret
0x4cd111a0    32  sub csp, jssp, #0x10 (16)
0x4cd111a4    36  stp fp, lr, [jssp, #-16]!
0x4cd111a8    40  movz fp, #0xa00000000
0x4cd111ac    44  sub csp, jssp, #0x8 (8)
0x4cd111b0    48  str fp, [jssp, #-8]!
0x4cd111b4    52  add fp, jssp, #0x8 (8)
0x4cd111b8    56  ldur x16, [x0, #-1]
0x4cd111bc    60  ldr x17, [x26, #120]
0x4cd111c0    64  cmp x16, x17
0x4cd111c4    68  b.ne #+0x30 (addr 0x4cd111f4)
0x4cd111c8    72  ldur d30, [x0, #7]
0x4cd111cc    76  fcvtzs x4, d30
0x4cd111d0    80  cmp x4, #0x1 (1)
0x4cd111d4    84  ccmn x4, #1, #nzcV, vc
0x4cd111d8    88  b.vc #+0x18 (addr 0x4cd111f0)
0x4cd111dc    92  sub csp, jssp, #0x8 (8)
0x4cd111e0    96  str lr, [jssp, #-8]!
0x4cd111e4   100  ldr x16, pc+68 (addr 0x000000004cd11228)    ;; code: STUB, DoubleToIStub, minor: 127232
0x4cd111e8   104  blr x16
0x4cd111ec   108  ldr lr, [jssp], #8
0x4cd111f0   112  b #+0x24 (addr 0x4cd11214)
0x4cd111f4   116  ldp x4, x3, [x26, #64]
0x4cd111f8   120  cmp x0, x4
0x4cd111fc   124  cset x4, eq
0x4cd11200   128  ccmp x0, x3, #nZcv, ne
0x4cd11204   132  b.eq #+0x10 (addr 0x4cd11214)
0x4cd11208   136  ldr x16, [x26, #40]
0x4cd1120c   140  cmp x0, x16
0x4cd11210   144  b.ne #+0x30 (addr 0x4cd11240)
0x4cd11214   148  ldr lr, [jssp, #16]
0x4cd11218   152  ldp xzr, fp, [jssp], #24
0x4cd1121c   156  b #-0x8c (addr 0x4cd11190)
0x4cd11220   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd11224   164  d63f03e0       constant
0x4cd11228   168  4cd10400       constant
0x4cd1122c   172  00000000       constant
0x4cd11230   176  movz x16, #0x0
0x4cd11234   180  sub csp, jssp, #0x10 (16)
0x4cd11238   184  stp fp, lr, [jssp, #-16]!
0x4cd1123c   188  bl #+0xc (addr 0x4cd11248)
0x4cd11240   192  movz x16, #0x8
0x4cd11244   196  bl #+0x14 (addr 0x4cd11258)
0x4cd11248   200  movz x17, #0xa00000000
0x4cd1124c   204  sub csp, jssp, #0x10 (16)
0x4cd11250   208  stp x17, cp, [jssp, #-16]!
0x4cd11254   212  add fp, jssp, #0x10 (16)
0x4cd11258   216  ldr x17, pc+24 (addr 0x000000004cd11270)    ;; lazy deoptimization bailout 0
0x4cd1125c   220  add x17, x17, x16
0x4cd11260   224  br x17
0x4cd11264   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11268   232  d63f03e0       constant
0x4cd1126c   236  d503201f       constant
0x4cd11270   240  4cb06000       constant
0x4cd11274   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd111e4  code target (STUB)  (0x4cd10400)
0x4cd11220  constant pool (size 16)
0x4cd11258  runtime entry
0x4cd11264  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2337
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd112e0     0  mov x2, x1
0x4cd112e4     4  tbnz w2, #0, #+0x14 (addr 0x4cd112f8)
0x4cd112e8     8  mov x3, x0
0x4cd112ec    12  tbnz w3, #0, #+0x1c (addr 0x4cd11308)
0x4cd112f0    16  eor x0, x3, x2
0x4cd112f4    20  ret
0x4cd112f8    24  movz x16, #0x0
0x4cd112fc    28  sub csp, jssp, #0x10 (16)
0x4cd11300    32  stp fp, lr, [jssp, #-16]!
0x4cd11304    36  bl #+0x14 (addr 0x4cd11318)
0x4cd11308    40  movz x16, #0x8
0x4cd1130c    44  sub csp, jssp, #0x10 (16)
0x4cd11310    48  stp fp, lr, [jssp, #-16]!
0x4cd11314    52  bl #+0x4 (addr 0x4cd11318)
0x4cd11318    56  movz x17, #0xa00000000
0x4cd1131c    60  sub csp, jssp, #0x10 (16)
0x4cd11320    64  stp x17, cp, [jssp, #-16]!
0x4cd11324    68  add fp, jssp, #0x10 (16)
0x4cd11328    72  ldr x17, pc+24 (addr 0x000000004cd11340)    ;; lazy deoptimization bailout 0
0x4cd1132c    76  add x17, x17, x16
0x4cd11330    80  br x17
0x4cd11334    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11338    88  d63f03e0       constant
0x4cd1133c    92  d503201f       constant
0x4cd11340    96  4cb06000       constant
0x4cd11344   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd11328  runtime entry
0x4cd11334  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2337
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 112)
0x4cd112e0     0  mov x2, x1
0x4cd112e4     4  tbnz w2, #0, #+0x14 (addr 0x4cd112f8)
0x4cd112e8     8  mov x3, x0
0x4cd112ec    12  tbnz w3, #0, #+0x1c (addr 0x4cd11308)
0x4cd112f0    16  eor x0, x3, x2
0x4cd112f4    20  ret
0x4cd112f8    24  movz x16, #0x0
0x4cd112fc    28  sub csp, jssp, #0x10 (16)
0x4cd11300    32  stp fp, lr, [jssp, #-16]!
0x4cd11304    36  bl #+0x14 (addr 0x4cd11318)
0x4cd11308    40  movz x16, #0x8
0x4cd1130c    44  sub csp, jssp, #0x10 (16)
0x4cd11310    48  stp fp, lr, [jssp, #-16]!
0x4cd11314    52  bl #+0x4 (addr 0x4cd11318)
0x4cd11318    56  movz x17, #0xa00000000
0x4cd1131c    60  sub csp, jssp, #0x10 (16)
0x4cd11320    64  stp x17, cp, [jssp, #-16]!
0x4cd11324    68  add fp, jssp, #0x10 (16)
0x4cd11328    72  ldr x17, pc+24 (addr 0x000000004cd11340)    ;; lazy deoptimization bailout 0
0x4cd1132c    76  add x17, x17, x16
0x4cd11330    80  br x17
0x4cd11334    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11338    88  d63f03e0       constant
0x4cd1133c    92  d503201f       constant
0x4cd11340    96  4cb06000       constant
0x4cd11344   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd11328  runtime entry
0x4cd11334  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4513
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0x4cd113c0     0  mov x2, x0
0x4cd113c4     4  tbnz w2, #0, #+0xac (addr 0x4cd11470)
0x4cd113c8     8  tbnz w1, #0, #+0x18 (addr 0x4cd113e0)
0x4cd113cc    12  asr x4, x1, #32
0x4cd113d0    16  asr x0, x2, #32
0x4cd113d4    20  eor w0, w0, w4
0x4cd113d8    24  lsl x0, x0, #32
0x4cd113dc    28  ret
0x4cd113e0    32  sub csp, jssp, #0x10 (16)
0x4cd113e4    36  stp fp, lr, [jssp, #-16]!
0x4cd113e8    40  movz fp, #0xa00000000
0x4cd113ec    44  sub csp, jssp, #0x8 (8)
0x4cd113f0    48  str fp, [jssp, #-8]!
0x4cd113f4    52  add fp, jssp, #0x8 (8)
0x4cd113f8    56  ldur x16, [x1, #-1]
0x4cd113fc    60  ldr x17, [x26, #120]
0x4cd11400    64  cmp x16, x17
0x4cd11404    68  b.ne #+0x30 (addr 0x4cd11434)
0x4cd11408    72  ldur d30, [x1, #7]
0x4cd1140c    76  fcvtzs x4, d30
0x4cd11410    80  cmp x4, #0x1 (1)
0x4cd11414    84  ccmn x4, #1, #nzcV, vc
0x4cd11418    88  b.vc #+0x18 (addr 0x4cd11430)
0x4cd1141c    92  sub csp, jssp, #0x8 (8)
0x4cd11420    96  str lr, [jssp, #-8]!
0x4cd11424   100  ldr x16, pc+68 (addr 0x000000004cd11468)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd11428   104  blr x16
0x4cd1142c   108  ldr lr, [jssp], #8
0x4cd11430   112  b #+0x24 (addr 0x4cd11454)
0x4cd11434   116  ldp x4, x3, [x26, #64]
0x4cd11438   120  cmp x1, x4
0x4cd1143c   124  cset x4, eq
0x4cd11440   128  ccmp x1, x3, #nZcv, ne
0x4cd11444   132  b.eq #+0x10 (addr 0x4cd11454)
0x4cd11448   136  ldr x16, [x26, #40]
0x4cd1144c   140  cmp x1, x16
0x4cd11450   144  b.ne #+0x30 (addr 0x4cd11480)
0x4cd11454   148  ldr lr, [jssp, #16]
0x4cd11458   152  ldp xzr, fp, [jssp], #24
0x4cd1145c   156  b #-0x8c (addr 0x4cd113d0)
0x4cd11460   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd11464   164  d63f03e0       constant
0x4cd11468   168  4cd0fee0       constant
0x4cd1146c   172  00000000       constant
0x4cd11470   176  movz x16, #0x0
0x4cd11474   180  sub csp, jssp, #0x10 (16)
0x4cd11478   184  stp fp, lr, [jssp, #-16]!
0x4cd1147c   188  bl #+0xc (addr 0x4cd11488)
0x4cd11480   192  movz x16, #0x8
0x4cd11484   196  bl #+0x14 (addr 0x4cd11498)
0x4cd11488   200  movz x17, #0xa00000000
0x4cd1148c   204  sub csp, jssp, #0x10 (16)
0x4cd11490   208  stp x17, cp, [jssp, #-16]!
0x4cd11494   212  add fp, jssp, #0x10 (16)
0x4cd11498   216  ldr x17, pc+24 (addr 0x000000004cd114b0)    ;; lazy deoptimization bailout 0
0x4cd1149c   220  add x17, x17, x16
0x4cd114a0   224  br x17
0x4cd114a4   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd114a8   232  d63f03e0       constant
0x4cd114ac   236  d503201f       constant
0x4cd114b0   240  4cb06000       constant
0x4cd114b4   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd11424  code target (STUB)  (0x4cd0fee0)
0x4cd11460  constant pool (size 16)
0x4cd11498  runtime entry
0x4cd114a4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4513
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Number*Int32->Int32)
compiler = crankshaft
Instructions (size = 256)
0x4cd113c0     0  mov x2, x0
0x4cd113c4     4  tbnz w2, #0, #+0xac (addr 0x4cd11470)
0x4cd113c8     8  tbnz w1, #0, #+0x18 (addr 0x4cd113e0)
0x4cd113cc    12  asr x4, x1, #32
0x4cd113d0    16  asr x0, x2, #32
0x4cd113d4    20  eor w0, w0, w4
0x4cd113d8    24  lsl x0, x0, #32
0x4cd113dc    28  ret
0x4cd113e0    32  sub csp, jssp, #0x10 (16)
0x4cd113e4    36  stp fp, lr, [jssp, #-16]!
0x4cd113e8    40  movz fp, #0xa00000000
0x4cd113ec    44  sub csp, jssp, #0x8 (8)
0x4cd113f0    48  str fp, [jssp, #-8]!
0x4cd113f4    52  add fp, jssp, #0x8 (8)
0x4cd113f8    56  ldur x16, [x1, #-1]
0x4cd113fc    60  ldr x17, [x26, #120]
0x4cd11400    64  cmp x16, x17
0x4cd11404    68  b.ne #+0x30 (addr 0x4cd11434)
0x4cd11408    72  ldur d30, [x1, #7]
0x4cd1140c    76  fcvtzs x4, d30
0x4cd11410    80  cmp x4, #0x1 (1)
0x4cd11414    84  ccmn x4, #1, #nzcV, vc
0x4cd11418    88  b.vc #+0x18 (addr 0x4cd11430)
0x4cd1141c    92  sub csp, jssp, #0x8 (8)
0x4cd11420    96  str lr, [jssp, #-8]!
0x4cd11424   100  ldr x16, pc+68 (addr 0x000000004cd11468)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd11428   104  blr x16
0x4cd1142c   108  ldr lr, [jssp], #8
0x4cd11430   112  b #+0x24 (addr 0x4cd11454)
0x4cd11434   116  ldp x4, x3, [x26, #64]
0x4cd11438   120  cmp x1, x4
0x4cd1143c   124  cset x4, eq
0x4cd11440   128  ccmp x1, x3, #nZcv, ne
0x4cd11444   132  b.eq #+0x10 (addr 0x4cd11454)
0x4cd11448   136  ldr x16, [x26, #40]
0x4cd1144c   140  cmp x1, x16
0x4cd11450   144  b.ne #+0x30 (addr 0x4cd11480)
0x4cd11454   148  ldr lr, [jssp, #16]
0x4cd11458   152  ldp xzr, fp, [jssp], #24
0x4cd1145c   156  b #-0x8c (addr 0x4cd113d0)
0x4cd11460   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd11464   164  d63f03e0       constant
0x4cd11468   168  4cd0fee0       constant
0x4cd1146c   172  00000000       constant
0x4cd11470   176  movz x16, #0x0
0x4cd11474   180  sub csp, jssp, #0x10 (16)
0x4cd11478   184  stp fp, lr, [jssp, #-16]!
0x4cd1147c   188  bl #+0xc (addr 0x4cd11488)
0x4cd11480   192  movz x16, #0x8
0x4cd11484   196  bl #+0x14 (addr 0x4cd11498)
0x4cd11488   200  movz x17, #0xa00000000
0x4cd1148c   204  sub csp, jssp, #0x10 (16)
0x4cd11490   208  stp x17, cp, [jssp, #-16]!
0x4cd11494   212  add fp, jssp, #0x10 (16)
0x4cd11498   216  ldr x17, pc+24 (addr 0x000000004cd114b0)    ;; lazy deoptimization bailout 0
0x4cd1149c   220  add x17, x17, x16
0x4cd114a0   224  br x17
0x4cd114a4   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd114a8   232  d63f03e0       constant
0x4cd114ac   236  d503201f       constant
0x4cd114b0   240  4cb06000       constant
0x4cd114b4   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd11424  code target (STUB)  (0x4cd0fee0)
0x4cd11460  constant pool (size 16)
0x4cd11498  runtime entry
0x4cd114a4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2465
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0x4cd11520     0  mov x2, x0
0x4cd11524     4  tbnz w2, #0, #+0xac (addr 0x4cd115d0)
0x4cd11528     8  tbnz w1, #0, #+0x18 (addr 0x4cd11540)
0x4cd1152c    12  asr x4, x1, #32
0x4cd11530    16  asr x0, x2, #32
0x4cd11534    20  eor w0, w0, w4
0x4cd11538    24  lsl x0, x0, #32
0x4cd1153c    28  ret
0x4cd11540    32  sub csp, jssp, #0x10 (16)
0x4cd11544    36  stp fp, lr, [jssp, #-16]!
0x4cd11548    40  movz fp, #0xa00000000
0x4cd1154c    44  sub csp, jssp, #0x8 (8)
0x4cd11550    48  str fp, [jssp, #-8]!
0x4cd11554    52  add fp, jssp, #0x8 (8)
0x4cd11558    56  ldur x16, [x1, #-1]
0x4cd1155c    60  ldr x17, [x26, #120]
0x4cd11560    64  cmp x16, x17
0x4cd11564    68  b.ne #+0x30 (addr 0x4cd11594)
0x4cd11568    72  ldur d30, [x1, #7]
0x4cd1156c    76  fcvtzs x4, d30
0x4cd11570    80  cmp x4, #0x1 (1)
0x4cd11574    84  ccmn x4, #1, #nzcV, vc
0x4cd11578    88  b.vc #+0x18 (addr 0x4cd11590)
0x4cd1157c    92  sub csp, jssp, #0x8 (8)
0x4cd11580    96  str lr, [jssp, #-8]!
0x4cd11584   100  ldr x16, pc+68 (addr 0x000000004cd115c8)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd11588   104  blr x16
0x4cd1158c   108  ldr lr, [jssp], #8
0x4cd11590   112  b #+0x24 (addr 0x4cd115b4)
0x4cd11594   116  ldp x4, x3, [x26, #64]
0x4cd11598   120  cmp x1, x4
0x4cd1159c   124  cset x4, eq
0x4cd115a0   128  ccmp x1, x3, #nZcv, ne
0x4cd115a4   132  b.eq #+0x10 (addr 0x4cd115b4)
0x4cd115a8   136  ldr x16, [x26, #40]
0x4cd115ac   140  cmp x1, x16
0x4cd115b0   144  b.ne #+0x30 (addr 0x4cd115e0)
0x4cd115b4   148  ldr lr, [jssp, #16]
0x4cd115b8   152  ldp xzr, fp, [jssp], #24
0x4cd115bc   156  b #-0x8c (addr 0x4cd11530)
0x4cd115c0   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd115c4   164  d63f03e0       constant
0x4cd115c8   168  4cd0fee0       constant
0x4cd115cc   172  00000000       constant
0x4cd115d0   176  movz x16, #0x0
0x4cd115d4   180  sub csp, jssp, #0x10 (16)
0x4cd115d8   184  stp fp, lr, [jssp, #-16]!
0x4cd115dc   188  bl #+0xc (addr 0x4cd115e8)
0x4cd115e0   192  movz x16, #0x8
0x4cd115e4   196  bl #+0x14 (addr 0x4cd115f8)
0x4cd115e8   200  movz x17, #0xa00000000
0x4cd115ec   204  sub csp, jssp, #0x10 (16)
0x4cd115f0   208  stp x17, cp, [jssp, #-16]!
0x4cd115f4   212  add fp, jssp, #0x10 (16)
0x4cd115f8   216  ldr x17, pc+24 (addr 0x000000004cd11610)    ;; lazy deoptimization bailout 0
0x4cd115fc   220  add x17, x17, x16
0x4cd11600   224  br x17
0x4cd11604   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11608   232  d63f03e0       constant
0x4cd1160c   236  d503201f       constant
0x4cd11610   240  4cb06000       constant
0x4cd11614   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd11584  code target (STUB)  (0x4cd0fee0)
0x4cd115c0  constant pool (size 16)
0x4cd115f8  runtime entry
0x4cd11604  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2465
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Number*Smi->Int32)
compiler = crankshaft
Instructions (size = 256)
0x4cd11520     0  mov x2, x0
0x4cd11524     4  tbnz w2, #0, #+0xac (addr 0x4cd115d0)
0x4cd11528     8  tbnz w1, #0, #+0x18 (addr 0x4cd11540)
0x4cd1152c    12  asr x4, x1, #32
0x4cd11530    16  asr x0, x2, #32
0x4cd11534    20  eor w0, w0, w4
0x4cd11538    24  lsl x0, x0, #32
0x4cd1153c    28  ret
0x4cd11540    32  sub csp, jssp, #0x10 (16)
0x4cd11544    36  stp fp, lr, [jssp, #-16]!
0x4cd11548    40  movz fp, #0xa00000000
0x4cd1154c    44  sub csp, jssp, #0x8 (8)
0x4cd11550    48  str fp, [jssp, #-8]!
0x4cd11554    52  add fp, jssp, #0x8 (8)
0x4cd11558    56  ldur x16, [x1, #-1]
0x4cd1155c    60  ldr x17, [x26, #120]
0x4cd11560    64  cmp x16, x17
0x4cd11564    68  b.ne #+0x30 (addr 0x4cd11594)
0x4cd11568    72  ldur d30, [x1, #7]
0x4cd1156c    76  fcvtzs x4, d30
0x4cd11570    80  cmp x4, #0x1 (1)
0x4cd11574    84  ccmn x4, #1, #nzcV, vc
0x4cd11578    88  b.vc #+0x18 (addr 0x4cd11590)
0x4cd1157c    92  sub csp, jssp, #0x8 (8)
0x4cd11580    96  str lr, [jssp, #-8]!
0x4cd11584   100  ldr x16, pc+68 (addr 0x000000004cd115c8)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd11588   104  blr x16
0x4cd1158c   108  ldr lr, [jssp], #8
0x4cd11590   112  b #+0x24 (addr 0x4cd115b4)
0x4cd11594   116  ldp x4, x3, [x26, #64]
0x4cd11598   120  cmp x1, x4
0x4cd1159c   124  cset x4, eq
0x4cd115a0   128  ccmp x1, x3, #nZcv, ne
0x4cd115a4   132  b.eq #+0x10 (addr 0x4cd115b4)
0x4cd115a8   136  ldr x16, [x26, #40]
0x4cd115ac   140  cmp x1, x16
0x4cd115b0   144  b.ne #+0x30 (addr 0x4cd115e0)
0x4cd115b4   148  ldr lr, [jssp, #16]
0x4cd115b8   152  ldp xzr, fp, [jssp], #24
0x4cd115bc   156  b #-0x8c (addr 0x4cd11530)
0x4cd115c0   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd115c4   164  d63f03e0       constant
0x4cd115c8   168  4cd0fee0       constant
0x4cd115cc   172  00000000       constant
0x4cd115d0   176  movz x16, #0x0
0x4cd115d4   180  sub csp, jssp, #0x10 (16)
0x4cd115d8   184  stp fp, lr, [jssp, #-16]!
0x4cd115dc   188  bl #+0xc (addr 0x4cd115e8)
0x4cd115e0   192  movz x16, #0x8
0x4cd115e4   196  bl #+0x14 (addr 0x4cd115f8)
0x4cd115e8   200  movz x17, #0xa00000000
0x4cd115ec   204  sub csp, jssp, #0x10 (16)
0x4cd115f0   208  stp x17, cp, [jssp, #-16]!
0x4cd115f4   212  add fp, jssp, #0x10 (16)
0x4cd115f8   216  ldr x17, pc+24 (addr 0x000000004cd11610)    ;; lazy deoptimization bailout 0
0x4cd115fc   220  add x17, x17, x16
0x4cd11600   224  br x17
0x4cd11604   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11608   232  d63f03e0       constant
0x4cd1160c   236  d503201f       constant
0x4cd11610   240  4cb06000       constant
0x4cd11614   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd11584  code target (STUB)  (0x4cd0fee0)
0x4cd115c0  constant pool (size 16)
0x4cd115f8  runtime entry
0x4cd11604  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2449
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0x4cd11680     0  mov x2, x0
0x4cd11684     4  tbnz w2, #0, #+0xac (addr 0x4cd11730)
0x4cd11688     8  tbnz w1, #0, #+0x18 (addr 0x4cd116a0)
0x4cd1168c    12  asr x4, x1, #32
0x4cd11690    16  asr x0, x2, #32
0x4cd11694    20  eor w0, w0, w4
0x4cd11698    24  lsl x0, x0, #32
0x4cd1169c    28  ret
0x4cd116a0    32  sub csp, jssp, #0x10 (16)
0x4cd116a4    36  stp fp, lr, [jssp, #-16]!
0x4cd116a8    40  movz fp, #0xa00000000
0x4cd116ac    44  sub csp, jssp, #0x8 (8)
0x4cd116b0    48  str fp, [jssp, #-8]!
0x4cd116b4    52  add fp, jssp, #0x8 (8)
0x4cd116b8    56  ldur x16, [x1, #-1]
0x4cd116bc    60  ldr x17, [x26, #120]
0x4cd116c0    64  cmp x16, x17
0x4cd116c4    68  b.ne #+0x30 (addr 0x4cd116f4)
0x4cd116c8    72  ldur d30, [x1, #7]
0x4cd116cc    76  fcvtzs x4, d30
0x4cd116d0    80  cmp x4, #0x1 (1)
0x4cd116d4    84  ccmn x4, #1, #nzcV, vc
0x4cd116d8    88  b.vc #+0x18 (addr 0x4cd116f0)
0x4cd116dc    92  sub csp, jssp, #0x8 (8)
0x4cd116e0    96  str lr, [jssp, #-8]!
0x4cd116e4   100  ldr x16, pc+68 (addr 0x000000004cd11728)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd116e8   104  blr x16
0x4cd116ec   108  ldr lr, [jssp], #8
0x4cd116f0   112  b #+0x24 (addr 0x4cd11714)
0x4cd116f4   116  ldp x4, x3, [x26, #64]
0x4cd116f8   120  cmp x1, x4
0x4cd116fc   124  cset x4, eq
0x4cd11700   128  ccmp x1, x3, #nZcv, ne
0x4cd11704   132  b.eq #+0x10 (addr 0x4cd11714)
0x4cd11708   136  ldr x16, [x26, #40]
0x4cd1170c   140  cmp x1, x16
0x4cd11710   144  b.ne #+0x30 (addr 0x4cd11740)
0x4cd11714   148  ldr lr, [jssp, #16]
0x4cd11718   152  ldp xzr, fp, [jssp], #24
0x4cd1171c   156  b #-0x8c (addr 0x4cd11690)
0x4cd11720   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd11724   164  d63f03e0       constant
0x4cd11728   168  4cd0fee0       constant
0x4cd1172c   172  00000000       constant
0x4cd11730   176  movz x16, #0x0
0x4cd11734   180  sub csp, jssp, #0x10 (16)
0x4cd11738   184  stp fp, lr, [jssp, #-16]!
0x4cd1173c   188  bl #+0xc (addr 0x4cd11748)
0x4cd11740   192  movz x16, #0x8
0x4cd11744   196  bl #+0x14 (addr 0x4cd11758)
0x4cd11748   200  movz x17, #0xa00000000
0x4cd1174c   204  sub csp, jssp, #0x10 (16)
0x4cd11750   208  stp x17, cp, [jssp, #-16]!
0x4cd11754   212  add fp, jssp, #0x10 (16)
0x4cd11758   216  ldr x17, pc+24 (addr 0x000000004cd11770)    ;; lazy deoptimization bailout 0
0x4cd1175c   220  add x17, x17, x16
0x4cd11760   224  br x17
0x4cd11764   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11768   232  d63f03e0       constant
0x4cd1176c   236  d503201f       constant
0x4cd11770   240  4cb06000       constant
0x4cd11774   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd116e4  code target (STUB)  (0x4cd0fee0)
0x4cd11720  constant pool (size 16)
0x4cd11758  runtime entry
0x4cd11764  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2449
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Number*Smi->Smi)
compiler = crankshaft
Instructions (size = 256)
0x4cd11680     0  mov x2, x0
0x4cd11684     4  tbnz w2, #0, #+0xac (addr 0x4cd11730)
0x4cd11688     8  tbnz w1, #0, #+0x18 (addr 0x4cd116a0)
0x4cd1168c    12  asr x4, x1, #32
0x4cd11690    16  asr x0, x2, #32
0x4cd11694    20  eor w0, w0, w4
0x4cd11698    24  lsl x0, x0, #32
0x4cd1169c    28  ret
0x4cd116a0    32  sub csp, jssp, #0x10 (16)
0x4cd116a4    36  stp fp, lr, [jssp, #-16]!
0x4cd116a8    40  movz fp, #0xa00000000
0x4cd116ac    44  sub csp, jssp, #0x8 (8)
0x4cd116b0    48  str fp, [jssp, #-8]!
0x4cd116b4    52  add fp, jssp, #0x8 (8)
0x4cd116b8    56  ldur x16, [x1, #-1]
0x4cd116bc    60  ldr x17, [x26, #120]
0x4cd116c0    64  cmp x16, x17
0x4cd116c4    68  b.ne #+0x30 (addr 0x4cd116f4)
0x4cd116c8    72  ldur d30, [x1, #7]
0x4cd116cc    76  fcvtzs x4, d30
0x4cd116d0    80  cmp x4, #0x1 (1)
0x4cd116d4    84  ccmn x4, #1, #nzcV, vc
0x4cd116d8    88  b.vc #+0x18 (addr 0x4cd116f0)
0x4cd116dc    92  sub csp, jssp, #0x8 (8)
0x4cd116e0    96  str lr, [jssp, #-8]!
0x4cd116e4   100  ldr x16, pc+68 (addr 0x000000004cd11728)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd116e8   104  blr x16
0x4cd116ec   108  ldr lr, [jssp], #8
0x4cd116f0   112  b #+0x24 (addr 0x4cd11714)
0x4cd116f4   116  ldp x4, x3, [x26, #64]
0x4cd116f8   120  cmp x1, x4
0x4cd116fc   124  cset x4, eq
0x4cd11700   128  ccmp x1, x3, #nZcv, ne
0x4cd11704   132  b.eq #+0x10 (addr 0x4cd11714)
0x4cd11708   136  ldr x16, [x26, #40]
0x4cd1170c   140  cmp x1, x16
0x4cd11710   144  b.ne #+0x30 (addr 0x4cd11740)
0x4cd11714   148  ldr lr, [jssp, #16]
0x4cd11718   152  ldp xzr, fp, [jssp], #24
0x4cd1171c   156  b #-0x8c (addr 0x4cd11690)
0x4cd11720   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd11724   164  d63f03e0       constant
0x4cd11728   168  4cd0fee0       constant
0x4cd1172c   172  00000000       constant
0x4cd11730   176  movz x16, #0x0
0x4cd11734   180  sub csp, jssp, #0x10 (16)
0x4cd11738   184  stp fp, lr, [jssp, #-16]!
0x4cd1173c   188  bl #+0xc (addr 0x4cd11748)
0x4cd11740   192  movz x16, #0x8
0x4cd11744   196  bl #+0x14 (addr 0x4cd11758)
0x4cd11748   200  movz x17, #0xa00000000
0x4cd1174c   204  sub csp, jssp, #0x10 (16)
0x4cd11750   208  stp x17, cp, [jssp, #-16]!
0x4cd11754   212  add fp, jssp, #0x10 (16)
0x4cd11758   216  ldr x17, pc+24 (addr 0x000000004cd11770)    ;; lazy deoptimization bailout 0
0x4cd1175c   220  add x17, x17, x16
0x4cd11760   224  br x17
0x4cd11764   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11768   232  d63f03e0       constant
0x4cd1176c   236  d503201f       constant
0x4cd11770   240  4cb06000       constant
0x4cd11774   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd116e4  code target (STUB)  (0x4cd0fee0)
0x4cd11720  constant pool (size 16)
0x4cd11758  runtime entry
0x4cd11764  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4257
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd117e0     0  mov x2, x1
0x4cd117e4     4  tbnz w2, #0, #+0x14 (addr 0x4cd117f8)
0x4cd117e8     8  mov x3, x0
0x4cd117ec    12  tbnz w3, #0, #+0x1c (addr 0x4cd11808)
0x4cd117f0    16  eor x0, x3, x2
0x4cd117f4    20  ret
0x4cd117f8    24  movz x16, #0x0
0x4cd117fc    28  sub csp, jssp, #0x10 (16)
0x4cd11800    32  stp fp, lr, [jssp, #-16]!
0x4cd11804    36  bl #+0x14 (addr 0x4cd11818)
0x4cd11808    40  movz x16, #0x8
0x4cd1180c    44  sub csp, jssp, #0x10 (16)
0x4cd11810    48  stp fp, lr, [jssp, #-16]!
0x4cd11814    52  bl #+0x4 (addr 0x4cd11818)
0x4cd11818    56  movz x17, #0xa00000000
0x4cd1181c    60  sub csp, jssp, #0x10 (16)
0x4cd11820    64  stp x17, cp, [jssp, #-16]!
0x4cd11824    68  add fp, jssp, #0x10 (16)
0x4cd11828    72  ldr x17, pc+24 (addr 0x000000004cd11840)    ;; lazy deoptimization bailout 0
0x4cd1182c    76  add x17, x17, x16
0x4cd11830    80  br x17
0x4cd11834    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11838    88  d63f03e0       constant
0x4cd1183c    92  d503201f       constant
0x4cd11840    96  4cb06000       constant
0x4cd11844   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd11828  runtime entry
0x4cd11834  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4257
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Smi*Int32->Int32)
compiler = crankshaft
Instructions (size = 112)
0x4cd117e0     0  mov x2, x1
0x4cd117e4     4  tbnz w2, #0, #+0x14 (addr 0x4cd117f8)
0x4cd117e8     8  mov x3, x0
0x4cd117ec    12  tbnz w3, #0, #+0x1c (addr 0x4cd11808)
0x4cd117f0    16  eor x0, x3, x2
0x4cd117f4    20  ret
0x4cd117f8    24  movz x16, #0x0
0x4cd117fc    28  sub csp, jssp, #0x10 (16)
0x4cd11800    32  stp fp, lr, [jssp, #-16]!
0x4cd11804    36  bl #+0x14 (addr 0x4cd11818)
0x4cd11808    40  movz x16, #0x8
0x4cd1180c    44  sub csp, jssp, #0x10 (16)
0x4cd11810    48  stp fp, lr, [jssp, #-16]!
0x4cd11814    52  bl #+0x4 (addr 0x4cd11818)
0x4cd11818    56  movz x17, #0xa00000000
0x4cd1181c    60  sub csp, jssp, #0x10 (16)
0x4cd11820    64  stp x17, cp, [jssp, #-16]!
0x4cd11824    68  add fp, jssp, #0x10 (16)
0x4cd11828    72  ldr x17, pc+24 (addr 0x000000004cd11840)    ;; lazy deoptimization bailout 0
0x4cd1182c    76  add x17, x17, x16
0x4cd11830    80  br x17
0x4cd11834    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11838    88  d63f03e0       constant
0x4cd1183c    92  d503201f       constant
0x4cd11840    96  4cb06000       constant
0x4cd11844   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd11828  runtime entry
0x4cd11834  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4241
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd118c0     0  mov x2, x1
0x4cd118c4     4  tbnz w2, #0, #+0x14 (addr 0x4cd118d8)
0x4cd118c8     8  mov x3, x0
0x4cd118cc    12  tbnz w3, #0, #+0x1c (addr 0x4cd118e8)
0x4cd118d0    16  eor x0, x3, x2
0x4cd118d4    20  ret
0x4cd118d8    24  movz x16, #0x0
0x4cd118dc    28  sub csp, jssp, #0x10 (16)
0x4cd118e0    32  stp fp, lr, [jssp, #-16]!
0x4cd118e4    36  bl #+0x14 (addr 0x4cd118f8)
0x4cd118e8    40  movz x16, #0x8
0x4cd118ec    44  sub csp, jssp, #0x10 (16)
0x4cd118f0    48  stp fp, lr, [jssp, #-16]!
0x4cd118f4    52  bl #+0x4 (addr 0x4cd118f8)
0x4cd118f8    56  movz x17, #0xa00000000
0x4cd118fc    60  sub csp, jssp, #0x10 (16)
0x4cd11900    64  stp x17, cp, [jssp, #-16]!
0x4cd11904    68  add fp, jssp, #0x10 (16)
0x4cd11908    72  ldr x17, pc+24 (addr 0x000000004cd11920)    ;; lazy deoptimization bailout 0
0x4cd1190c    76  add x17, x17, x16
0x4cd11910    80  br x17
0x4cd11914    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11918    88  d63f03e0       constant
0x4cd1191c    92  d503201f       constant
0x4cd11920    96  4cb06000       constant
0x4cd11924   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd11908  runtime entry
0x4cd11914  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4241
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Smi*Int32->Smi)
compiler = crankshaft
Instructions (size = 112)
0x4cd118c0     0  mov x2, x1
0x4cd118c4     4  tbnz w2, #0, #+0x14 (addr 0x4cd118d8)
0x4cd118c8     8  mov x3, x0
0x4cd118cc    12  tbnz w3, #0, #+0x1c (addr 0x4cd118e8)
0x4cd118d0    16  eor x0, x3, x2
0x4cd118d4    20  ret
0x4cd118d8    24  movz x16, #0x0
0x4cd118dc    28  sub csp, jssp, #0x10 (16)
0x4cd118e0    32  stp fp, lr, [jssp, #-16]!
0x4cd118e4    36  bl #+0x14 (addr 0x4cd118f8)
0x4cd118e8    40  movz x16, #0x8
0x4cd118ec    44  sub csp, jssp, #0x10 (16)
0x4cd118f0    48  stp fp, lr, [jssp, #-16]!
0x4cd118f4    52  bl #+0x4 (addr 0x4cd118f8)
0x4cd118f8    56  movz x17, #0xa00000000
0x4cd118fc    60  sub csp, jssp, #0x10 (16)
0x4cd11900    64  stp x17, cp, [jssp, #-16]!
0x4cd11904    68  add fp, jssp, #0x10 (16)
0x4cd11908    72  ldr x17, pc+24 (addr 0x000000004cd11920)    ;; lazy deoptimization bailout 0
0x4cd1190c    76  add x17, x17, x16
0x4cd11910    80  br x17
0x4cd11914    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11918    88  d63f03e0       constant
0x4cd1191c    92  d503201f       constant
0x4cd11920    96  4cb06000       constant
0x4cd11924   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd11908  runtime entry
0x4cd11914  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2193
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 112)
0x4cd119a0     0  mov x2, x1
0x4cd119a4     4  tbnz w2, #0, #+0x14 (addr 0x4cd119b8)
0x4cd119a8     8  mov x3, x0
0x4cd119ac    12  tbnz w3, #0, #+0x1c (addr 0x4cd119c8)
0x4cd119b0    16  eor x0, x3, x2
0x4cd119b4    20  ret
0x4cd119b8    24  movz x16, #0x0
0x4cd119bc    28  sub csp, jssp, #0x10 (16)
0x4cd119c0    32  stp fp, lr, [jssp, #-16]!
0x4cd119c4    36  bl #+0x14 (addr 0x4cd119d8)
0x4cd119c8    40  movz x16, #0x8
0x4cd119cc    44  sub csp, jssp, #0x10 (16)
0x4cd119d0    48  stp fp, lr, [jssp, #-16]!
0x4cd119d4    52  bl #+0x4 (addr 0x4cd119d8)
0x4cd119d8    56  movz x17, #0xa00000000
0x4cd119dc    60  sub csp, jssp, #0x10 (16)
0x4cd119e0    64  stp x17, cp, [jssp, #-16]!
0x4cd119e4    68  add fp, jssp, #0x10 (16)
0x4cd119e8    72  ldr x17, pc+24 (addr 0x000000004cd11a00)    ;; lazy deoptimization bailout 0
0x4cd119ec    76  add x17, x17, x16
0x4cd119f0    80  br x17
0x4cd119f4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd119f8    88  d63f03e0       constant
0x4cd119fc    92  d503201f       constant
0x4cd11a00    96  4cb06000       constant
0x4cd11a04   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd119e8  runtime entry
0x4cd119f4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2193
type = NORMAL
name = BinaryOpICStub(BIT_XOR:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 112)
0x4cd119a0     0  mov x2, x1
0x4cd119a4     4  tbnz w2, #0, #+0x14 (addr 0x4cd119b8)
0x4cd119a8     8  mov x3, x0
0x4cd119ac    12  tbnz w3, #0, #+0x1c (addr 0x4cd119c8)
0x4cd119b0    16  eor x0, x3, x2
0x4cd119b4    20  ret
0x4cd119b8    24  movz x16, #0x0
0x4cd119bc    28  sub csp, jssp, #0x10 (16)
0x4cd119c0    32  stp fp, lr, [jssp, #-16]!
0x4cd119c4    36  bl #+0x14 (addr 0x4cd119d8)
0x4cd119c8    40  movz x16, #0x8
0x4cd119cc    44  sub csp, jssp, #0x10 (16)
0x4cd119d0    48  stp fp, lr, [jssp, #-16]!
0x4cd119d4    52  bl #+0x4 (addr 0x4cd119d8)
0x4cd119d8    56  movz x17, #0xa00000000
0x4cd119dc    60  sub csp, jssp, #0x10 (16)
0x4cd119e0    64  stp x17, cp, [jssp, #-16]!
0x4cd119e4    68  add fp, jssp, #0x10 (16)
0x4cd119e8    72  ldr x17, pc+24 (addr 0x000000004cd11a00)    ;; lazy deoptimization bailout 0
0x4cd119ec    76  add x17, x17, x16
0x4cd119f0    80  br x17
0x4cd119f4    84  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd119f8    88  d63f03e0       constant
0x4cd119fc    92  d503201f       constant
0x4cd11a00    96  4cb06000       constant
0x4cd11a04   100  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd119e8  runtime entry
0x4cd119f4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4394
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 176)
0x4cd11a80     0  mov x2, x1
0x4cd11a84     4  tbnz w2, #0, #+0x44 (addr 0x4cd11ac8)
0x4cd11a88     8  mov x3, x0
0x4cd11a8c    12  tbnz w3, #0, #+0x4c (addr 0x4cd11ad8)
0x4cd11a90    16  asr x2, x2, #32
0x4cd11a94    20  asr x3, x3, #32
0x4cd11a98    24  sdiv w5, w2, w3
0x4cd11a9c    28  cbz w3, #+0x4c (addr 0x4cd11ae8)
0x4cd11aa0    32  cmp w3, #0x0 (0)
0x4cd11aa4    36  ccmp w2, #0, #nzcv, mi
0x4cd11aa8    40  b.eq #+0x40 (addr 0x4cd11ae8)
0x4cd11aac    44  cmp w2, #0x1 (1)
0x4cd11ab0    48  ccmn w3, #1, #nzcv, vs
0x4cd11ab4    52  b.eq #+0x34 (addr 0x4cd11ae8)
0x4cd11ab8    56  msub w4, w5, w3, w2
0x4cd11abc    60  cbnz w4, #+0x2c (addr 0x4cd11ae8)
0x4cd11ac0    64  lsl x0, x5, #32
0x4cd11ac4    68  ret
0x4cd11ac8    72  movz x16, #0x0
0x4cd11acc    76  sub csp, jssp, #0x10 (16)
0x4cd11ad0    80  stp fp, lr, [jssp, #-16]!
0x4cd11ad4    84  bl #+0x24 (addr 0x4cd11af8)
0x4cd11ad8    88  movz x16, #0x8
0x4cd11adc    92  sub csp, jssp, #0x10 (16)
0x4cd11ae0    96  stp fp, lr, [jssp, #-16]!
0x4cd11ae4   100  bl #+0x14 (addr 0x4cd11af8)
0x4cd11ae8   104  movz x16, #0x10
0x4cd11aec   108  sub csp, jssp, #0x10 (16)
0x4cd11af0   112  stp fp, lr, [jssp, #-16]!
0x4cd11af4   116  bl #+0x4 (addr 0x4cd11af8)
0x4cd11af8   120  movz x17, #0xa00000000
0x4cd11afc   124  sub csp, jssp, #0x10 (16)
0x4cd11b00   128  stp x17, cp, [jssp, #-16]!
0x4cd11b04   132  add fp, jssp, #0x10 (16)
0x4cd11b08   136  ldr x17, pc+24 (addr 0x000000004cd11b20)    ;; lazy deoptimization bailout 0
0x4cd11b0c   140  add x17, x17, x16
0x4cd11b10   144  br x17
0x4cd11b14   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11b18   152  d63f03e0       constant
0x4cd11b1c   156  d503201f       constant
0x4cd11b20   160  4cb06000       constant
0x4cd11b24   164  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd11b08  runtime entry
0x4cd11b14  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4394
type = NORMAL
name = BinaryOpICStub(DIV:Int32*Int32->Int32)
compiler = crankshaft
Instructions (size = 176)
0x4cd11a80     0  mov x2, x1
0x4cd11a84     4  tbnz w2, #0, #+0x44 (addr 0x4cd11ac8)
0x4cd11a88     8  mov x3, x0
0x4cd11a8c    12  tbnz w3, #0, #+0x4c (addr 0x4cd11ad8)
0x4cd11a90    16  asr x2, x2, #32
0x4cd11a94    20  asr x3, x3, #32
0x4cd11a98    24  sdiv w5, w2, w3
0x4cd11a9c    28  cbz w3, #+0x4c (addr 0x4cd11ae8)
0x4cd11aa0    32  cmp w3, #0x0 (0)
0x4cd11aa4    36  ccmp w2, #0, #nzcv, mi
0x4cd11aa8    40  b.eq #+0x40 (addr 0x4cd11ae8)
0x4cd11aac    44  cmp w2, #0x1 (1)
0x4cd11ab0    48  ccmn w3, #1, #nzcv, vs
0x4cd11ab4    52  b.eq #+0x34 (addr 0x4cd11ae8)
0x4cd11ab8    56  msub w4, w5, w3, w2
0x4cd11abc    60  cbnz w4, #+0x2c (addr 0x4cd11ae8)
0x4cd11ac0    64  lsl x0, x5, #32
0x4cd11ac4    68  ret
0x4cd11ac8    72  movz x16, #0x0
0x4cd11acc    76  sub csp, jssp, #0x10 (16)
0x4cd11ad0    80  stp fp, lr, [jssp, #-16]!
0x4cd11ad4    84  bl #+0x24 (addr 0x4cd11af8)
0x4cd11ad8    88  movz x16, #0x8
0x4cd11adc    92  sub csp, jssp, #0x10 (16)
0x4cd11ae0    96  stp fp, lr, [jssp, #-16]!
0x4cd11ae4   100  bl #+0x14 (addr 0x4cd11af8)
0x4cd11ae8   104  movz x16, #0x10
0x4cd11aec   108  sub csp, jssp, #0x10 (16)
0x4cd11af0   112  stp fp, lr, [jssp, #-16]!
0x4cd11af4   116  bl #+0x4 (addr 0x4cd11af8)
0x4cd11af8   120  movz x17, #0xa00000000
0x4cd11afc   124  sub csp, jssp, #0x10 (16)
0x4cd11b00   128  stp x17, cp, [jssp, #-16]!
0x4cd11b04   132  add fp, jssp, #0x10 (16)
0x4cd11b08   136  ldr x17, pc+24 (addr 0x000000004cd11b20)    ;; lazy deoptimization bailout 0
0x4cd11b0c   140  add x17, x17, x16
0x4cd11b10   144  br x17
0x4cd11b14   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11b18   152  d63f03e0       constant
0x4cd11b1c   156  d503201f       constant
0x4cd11b20   160  4cb06000       constant
0x4cd11b24   164  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd11b08  runtime entry
0x4cd11b14  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4410
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0x4cd11ba0     0  mov x2, x1
0x4cd11ba4     4  tbnz w2, #0, #+0xc4 (addr 0x4cd11c68)
0x4cd11ba8     8  mov x3, x0
0x4cd11bac    12  tbnz w3, #0, #+0xcc (addr 0x4cd11c78)
0x4cd11bb0    16  scvtf d0, x2, #32
0x4cd11bb4    20  scvtf d1, x3, #32
0x4cd11bb8    24  fdiv d0, d0, d1
0x4cd11bbc    28  movz x1, #0xd2c0
0x4cd11bc0    32  movk x1, #0x166d, lsl #16
0x4cd11bc4    36  ldp x2, x0, [x1]
0x4cd11bc8    40  adds x16, x2, #0x10 (16)
0x4cd11bcc    44  ccmp x16, x0, #nzCv, lo
0x4cd11bd0    48  b.hi #+0x20 (addr 0x4cd11bf0)
0x4cd11bd4    52  str x16, [x1]
0x4cd11bd8    56  ldr x1, [x26, #120]
0x4cd11bdc    60  str x1, [x2]
0x4cd11be0    64  orr x2, x2, #0x1
0x4cd11be4    68  stur d0, [x2, #7]
0x4cd11be8    72  mov x0, x2
0x4cd11bec    76  ret
0x4cd11bf0    80  sub csp, jssp, #0x10 (16)
0x4cd11bf4    84  stp fp, lr, [jssp, #-16]!
0x4cd11bf8    88  movz fp, #0xa00000000
0x4cd11bfc    92  sub csp, jssp, #0x8 (8)
0x4cd11c00    96  str fp, [jssp, #-8]!
0x4cd11c04   100  add fp, jssp, #0x8 (8)
0x4cd11c08   104  movz x2, #0x0
0x4cd11c0c   108  mov x16, lr
0x4cd11c10   112  ldr x17, pc+64 (addr 0x000000004cd11c50)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd11c14   116  blr x17
0x4cd11c18   120  ldur cp, [fp, #-8]
0x4cd11c1c   124  movz x0, #0x0
0x4cd11c20   128  movz x1, #0x4b48
0x4cd11c24   132  movk x1, #0xe4, lsl #16
0x4cd11c28   136  ldr x16, pc+48 (addr 0x000000004cd11c58)    ;; code: STUB, CEntryStub, minor: 5
0x4cd11c2c   140  blr x16
0x4cd11c30   144  str x0, [jssp, #16]
0x4cd11c34   148  ldr x16, pc+44 (addr 0x000000004cd11c60)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd11c38   152  blr x16
0x4cd11c3c   156  ldr lr, [jssp, #16]
0x4cd11c40   160  ldp xzr, fp, [jssp], #24
0x4cd11c44   164  b #-0x60 (addr 0x4cd11be4)
0x4cd11c48   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd11c4c   172  d63f03e0       constant
0x4cd11c50   176  4cd06820       constant
0x4cd11c54   180  00000000       constant
0x4cd11c58   184  4cd06260       constant
0x4cd11c5c   188  00000000       constant
0x4cd11c60   192  4cd068e0       constant
0x4cd11c64   196  00000000       constant
0x4cd11c68   200  movz x16, #0x0
0x4cd11c6c   204  sub csp, jssp, #0x10 (16)
0x4cd11c70   208  stp fp, lr, [jssp, #-16]!
0x4cd11c74   212  bl #+0x14 (addr 0x4cd11c88)
0x4cd11c78   216  movz x16, #0x8
0x4cd11c7c   220  sub csp, jssp, #0x10 (16)
0x4cd11c80   224  stp fp, lr, [jssp, #-16]!
0x4cd11c84   228  bl #+0x4 (addr 0x4cd11c88)
0x4cd11c88   232  movz x17, #0xa00000000
0x4cd11c8c   236  sub csp, jssp, #0x10 (16)
0x4cd11c90   240  stp x17, cp, [jssp, #-16]!
0x4cd11c94   244  add fp, jssp, #0x10 (16)
0x4cd11c98   248  ldr x17, pc+24 (addr 0x000000004cd11cb0)    ;; lazy deoptimization bailout 0
0x4cd11c9c   252  add x17, x17, x16
0x4cd11ca0   256  br x17
0x4cd11ca4   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11ca8   264  d63f03e0       constant
0x4cd11cac   268  d503201f       constant
0x4cd11cb0   272  4cb06000       constant
0x4cd11cb4   276  00000000       constant


Safepoints (size = 21)
0x4cd11c30   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd11c10  code target (STUB)  (0x4cd06820)
0x4cd11c28  code target (STUB)  (0x4cd06260)
0x4cd11c34  code target (STUB)  (0x4cd068e0)
0x4cd11c48  constant pool (size 32)
0x4cd11c98  runtime entry
0x4cd11ca4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4410
type = NORMAL
name = BinaryOpICStub(DIV:Int32*Int32->Number)
compiler = crankshaft
Instructions (size = 301)
0x4cd11ba0     0  mov x2, x1
0x4cd11ba4     4  tbnz w2, #0, #+0xc4 (addr 0x4cd11c68)
0x4cd11ba8     8  mov x3, x0
0x4cd11bac    12  tbnz w3, #0, #+0xcc (addr 0x4cd11c78)
0x4cd11bb0    16  scvtf d0, x2, #32
0x4cd11bb4    20  scvtf d1, x3, #32
0x4cd11bb8    24  fdiv d0, d0, d1
0x4cd11bbc    28  movz x1, #0xd2c0
0x4cd11bc0    32  movk x1, #0x166d, lsl #16
0x4cd11bc4    36  ldp x2, x0, [x1]
0x4cd11bc8    40  adds x16, x2, #0x10 (16)
0x4cd11bcc    44  ccmp x16, x0, #nzCv, lo
0x4cd11bd0    48  b.hi #+0x20 (addr 0x4cd11bf0)
0x4cd11bd4    52  str x16, [x1]
0x4cd11bd8    56  ldr x1, [x26, #120]
0x4cd11bdc    60  str x1, [x2]
0x4cd11be0    64  orr x2, x2, #0x1
0x4cd11be4    68  stur d0, [x2, #7]
0x4cd11be8    72  mov x0, x2
0x4cd11bec    76  ret
0x4cd11bf0    80  sub csp, jssp, #0x10 (16)
0x4cd11bf4    84  stp fp, lr, [jssp, #-16]!
0x4cd11bf8    88  movz fp, #0xa00000000
0x4cd11bfc    92  sub csp, jssp, #0x8 (8)
0x4cd11c00    96  str fp, [jssp, #-8]!
0x4cd11c04   100  add fp, jssp, #0x8 (8)
0x4cd11c08   104  movz x2, #0x0
0x4cd11c0c   108  mov x16, lr
0x4cd11c10   112  ldr x17, pc+64 (addr 0x000000004cd11c50)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd11c14   116  blr x17
0x4cd11c18   120  ldur cp, [fp, #-8]
0x4cd11c1c   124  movz x0, #0x0
0x4cd11c20   128  movz x1, #0x4b48
0x4cd11c24   132  movk x1, #0xe4, lsl #16
0x4cd11c28   136  ldr x16, pc+48 (addr 0x000000004cd11c58)    ;; code: STUB, CEntryStub, minor: 5
0x4cd11c2c   140  blr x16
0x4cd11c30   144  str x0, [jssp, #16]
0x4cd11c34   148  ldr x16, pc+44 (addr 0x000000004cd11c60)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd11c38   152  blr x16
0x4cd11c3c   156  ldr lr, [jssp, #16]
0x4cd11c40   160  ldp xzr, fp, [jssp], #24
0x4cd11c44   164  b #-0x60 (addr 0x4cd11be4)
0x4cd11c48   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd11c4c   172  d63f03e0       constant
0x4cd11c50   176  4cd06820       constant
0x4cd11c54   180  00000000       constant
0x4cd11c58   184  4cd06260       constant
0x4cd11c5c   188  00000000       constant
0x4cd11c60   192  4cd068e0       constant
0x4cd11c64   196  00000000       constant
0x4cd11c68   200  movz x16, #0x0
0x4cd11c6c   204  sub csp, jssp, #0x10 (16)
0x4cd11c70   208  stp fp, lr, [jssp, #-16]!
0x4cd11c74   212  bl #+0x14 (addr 0x4cd11c88)
0x4cd11c78   216  movz x16, #0x8
0x4cd11c7c   220  sub csp, jssp, #0x10 (16)
0x4cd11c80   224  stp fp, lr, [jssp, #-16]!
0x4cd11c84   228  bl #+0x4 (addr 0x4cd11c88)
0x4cd11c88   232  movz x17, #0xa00000000
0x4cd11c8c   236  sub csp, jssp, #0x10 (16)
0x4cd11c90   240  stp x17, cp, [jssp, #-16]!
0x4cd11c94   244  add fp, jssp, #0x10 (16)
0x4cd11c98   248  ldr x17, pc+24 (addr 0x000000004cd11cb0)    ;; lazy deoptimization bailout 0
0x4cd11c9c   252  add x17, x17, x16
0x4cd11ca0   256  br x17
0x4cd11ca4   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11ca8   264  d63f03e0       constant
0x4cd11cac   268  d503201f       constant
0x4cd11cb0   272  4cb06000       constant
0x4cd11cb4   276  00000000       constant


Safepoints (size = 21)
0x4cd11c30   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd11c10  code target (STUB)  (0x4cd06820)
0x4cd11c28  code target (STUB)  (0x4cd06260)
0x4cd11c34  code target (STUB)  (0x4cd068e0)
0x4cd11c48  constant pool (size 32)
0x4cd11c98  runtime entry
0x4cd11ca4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6458
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0x4cd11d40     0  mov x2, x1
0x4cd11d44     4  tbnz w2, #0, #+0xf4 (addr 0x4cd11e38)
0x4cd11d48     8  tbz w0, #0, #+0x34 (addr 0x4cd11d7c)
0x4cd11d4c    12  ldur x16, [x0, #-1]
0x4cd11d50    16  ldr x17, [x26, #120]
0x4cd11d54    20  cmp x16, x17
0x4cd11d58    24  b.ne #+0xc (addr 0x4cd11d64)
0x4cd11d5c    28  ldur d0, [x0, #7]
0x4cd11d60    32  b #+0x20 (addr 0x4cd11d80)
0x4cd11d64    36  ldr x16, [x26, #40]
0x4cd11d68    40  cmp x0, x16
0x4cd11d6c    44  b.ne #+0xdc (addr 0x4cd11e48)
0x4cd11d70    48  ldr x3, [x26, #928]
0x4cd11d74    52  ldur d0, [x3, #7]
0x4cd11d78    56  b #+0x8 (addr 0x4cd11d80)
0x4cd11d7c    60  scvtf d0, x0, #32
0x4cd11d80    64  scvtf d1, x2, #32
0x4cd11d84    68  fdiv d0, d1, d0
0x4cd11d88    72  movz x1, #0xd2c0
0x4cd11d8c    76  movk x1, #0x166d, lsl #16
0x4cd11d90    80  ldp x2, x0, [x1]
0x4cd11d94    84  adds x16, x2, #0x10 (16)
0x4cd11d98    88  ccmp x16, x0, #nzCv, lo
0x4cd11d9c    92  b.hi #+0x20 (addr 0x4cd11dbc)
0x4cd11da0    96  str x16, [x1]
0x4cd11da4   100  ldr x1, [x26, #120]
0x4cd11da8   104  str x1, [x2]
0x4cd11dac   108  orr x2, x2, #0x1
0x4cd11db0   112  stur d0, [x2, #7]
0x4cd11db4   116  mov x0, x2
0x4cd11db8   120  ret
0x4cd11dbc   124  sub csp, jssp, #0x10 (16)
0x4cd11dc0   128  stp fp, lr, [jssp, #-16]!
0x4cd11dc4   132  movz fp, #0xa00000000
0x4cd11dc8   136  sub csp, jssp, #0x8 (8)
0x4cd11dcc   140  str fp, [jssp, #-8]!
0x4cd11dd0   144  add fp, jssp, #0x8 (8)
0x4cd11dd4   148  movz x2, #0x0
0x4cd11dd8   152  mov x16, lr
0x4cd11ddc   156  ldr x17, pc+68 (addr 0x000000004cd11e20)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd11de0   160  blr x17
0x4cd11de4   164  ldur cp, [fp, #-8]
0x4cd11de8   168  movz x0, #0x0
0x4cd11dec   172  movz x1, #0x4b48
0x4cd11df0   176  movk x1, #0xe4, lsl #16
0x4cd11df4   180  ldr x16, pc+52 (addr 0x000000004cd11e28)    ;; code: STUB, CEntryStub, minor: 5
0x4cd11df8   184  blr x16
0x4cd11dfc   188  str x0, [jssp, #16]
0x4cd11e00   192  ldr x16, pc+48 (addr 0x000000004cd11e30)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd11e04   196  blr x16
0x4cd11e08   200  ldr lr, [jssp, #16]
0x4cd11e0c   204  ldp xzr, fp, [jssp], #24
0x4cd11e10   208  b #-0x60 (addr 0x4cd11db0)
0x4cd11e14   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd11e18   216  d63f03e0       constant
0x4cd11e1c   220  d503201f       constant
0x4cd11e20   224  4cd06820       constant
0x4cd11e24   228  00000000       constant
0x4cd11e28   232  4cd06260       constant
0x4cd11e2c   236  00000000       constant
0x4cd11e30   240  4cd068e0       constant
0x4cd11e34   244  00000000       constant
0x4cd11e38   248  movz x16, #0x0
0x4cd11e3c   252  sub csp, jssp, #0x10 (16)
0x4cd11e40   256  stp fp, lr, [jssp, #-16]!
0x4cd11e44   260  bl #+0x14 (addr 0x4cd11e58)
0x4cd11e48   264  movz x16, #0x8
0x4cd11e4c   268  sub csp, jssp, #0x10 (16)
0x4cd11e50   272  stp fp, lr, [jssp, #-16]!
0x4cd11e54   276  bl #+0x4 (addr 0x4cd11e58)
0x4cd11e58   280  movz x17, #0xa00000000
0x4cd11e5c   284  sub csp, jssp, #0x10 (16)
0x4cd11e60   288  stp x17, cp, [jssp, #-16]!
0x4cd11e64   292  add fp, jssp, #0x10 (16)
0x4cd11e68   296  ldr x17, pc+24 (addr 0x000000004cd11e80)    ;; lazy deoptimization bailout 0
0x4cd11e6c   300  add x17, x17, x16
0x4cd11e70   304  br x17
0x4cd11e74   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11e78   312  d63f03e0       constant
0x4cd11e7c   316  d503201f       constant
0x4cd11e80   320  4cb06000       constant
0x4cd11e84   324  00000000       constant


Safepoints (size = 21)
0x4cd11dfc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd11ddc  code target (STUB)  (0x4cd06820)
0x4cd11df4  code target (STUB)  (0x4cd06260)
0x4cd11e00  code target (STUB)  (0x4cd068e0)
0x4cd11e14  constant pool (size 36)
0x4cd11e68  runtime entry
0x4cd11e74  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6458
type = NORMAL
name = BinaryOpICStub(DIV:Int32*Number->Number)
compiler = crankshaft
Instructions (size = 349)
0x4cd11d40     0  mov x2, x1
0x4cd11d44     4  tbnz w2, #0, #+0xf4 (addr 0x4cd11e38)
0x4cd11d48     8  tbz w0, #0, #+0x34 (addr 0x4cd11d7c)
0x4cd11d4c    12  ldur x16, [x0, #-1]
0x4cd11d50    16  ldr x17, [x26, #120]
0x4cd11d54    20  cmp x16, x17
0x4cd11d58    24  b.ne #+0xc (addr 0x4cd11d64)
0x4cd11d5c    28  ldur d0, [x0, #7]
0x4cd11d60    32  b #+0x20 (addr 0x4cd11d80)
0x4cd11d64    36  ldr x16, [x26, #40]
0x4cd11d68    40  cmp x0, x16
0x4cd11d6c    44  b.ne #+0xdc (addr 0x4cd11e48)
0x4cd11d70    48  ldr x3, [x26, #928]
0x4cd11d74    52  ldur d0, [x3, #7]
0x4cd11d78    56  b #+0x8 (addr 0x4cd11d80)
0x4cd11d7c    60  scvtf d0, x0, #32
0x4cd11d80    64  scvtf d1, x2, #32
0x4cd11d84    68  fdiv d0, d1, d0
0x4cd11d88    72  movz x1, #0xd2c0
0x4cd11d8c    76  movk x1, #0x166d, lsl #16
0x4cd11d90    80  ldp x2, x0, [x1]
0x4cd11d94    84  adds x16, x2, #0x10 (16)
0x4cd11d98    88  ccmp x16, x0, #nzCv, lo
0x4cd11d9c    92  b.hi #+0x20 (addr 0x4cd11dbc)
0x4cd11da0    96  str x16, [x1]
0x4cd11da4   100  ldr x1, [x26, #120]
0x4cd11da8   104  str x1, [x2]
0x4cd11dac   108  orr x2, x2, #0x1
0x4cd11db0   112  stur d0, [x2, #7]
0x4cd11db4   116  mov x0, x2
0x4cd11db8   120  ret
0x4cd11dbc   124  sub csp, jssp, #0x10 (16)
0x4cd11dc0   128  stp fp, lr, [jssp, #-16]!
0x4cd11dc4   132  movz fp, #0xa00000000
0x4cd11dc8   136  sub csp, jssp, #0x8 (8)
0x4cd11dcc   140  str fp, [jssp, #-8]!
0x4cd11dd0   144  add fp, jssp, #0x8 (8)
0x4cd11dd4   148  movz x2, #0x0
0x4cd11dd8   152  mov x16, lr
0x4cd11ddc   156  ldr x17, pc+68 (addr 0x000000004cd11e20)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd11de0   160  blr x17
0x4cd11de4   164  ldur cp, [fp, #-8]
0x4cd11de8   168  movz x0, #0x0
0x4cd11dec   172  movz x1, #0x4b48
0x4cd11df0   176  movk x1, #0xe4, lsl #16
0x4cd11df4   180  ldr x16, pc+52 (addr 0x000000004cd11e28)    ;; code: STUB, CEntryStub, minor: 5
0x4cd11df8   184  blr x16
0x4cd11dfc   188  str x0, [jssp, #16]
0x4cd11e00   192  ldr x16, pc+48 (addr 0x000000004cd11e30)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd11e04   196  blr x16
0x4cd11e08   200  ldr lr, [jssp, #16]
0x4cd11e0c   204  ldp xzr, fp, [jssp], #24
0x4cd11e10   208  b #-0x60 (addr 0x4cd11db0)
0x4cd11e14   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd11e18   216  d63f03e0       constant
0x4cd11e1c   220  d503201f       constant
0x4cd11e20   224  4cd06820       constant
0x4cd11e24   228  00000000       constant
0x4cd11e28   232  4cd06260       constant
0x4cd11e2c   236  00000000       constant
0x4cd11e30   240  4cd068e0       constant
0x4cd11e34   244  00000000       constant
0x4cd11e38   248  movz x16, #0x0
0x4cd11e3c   252  sub csp, jssp, #0x10 (16)
0x4cd11e40   256  stp fp, lr, [jssp, #-16]!
0x4cd11e44   260  bl #+0x14 (addr 0x4cd11e58)
0x4cd11e48   264  movz x16, #0x8
0x4cd11e4c   268  sub csp, jssp, #0x10 (16)
0x4cd11e50   272  stp fp, lr, [jssp, #-16]!
0x4cd11e54   276  bl #+0x4 (addr 0x4cd11e58)
0x4cd11e58   280  movz x17, #0xa00000000
0x4cd11e5c   284  sub csp, jssp, #0x10 (16)
0x4cd11e60   288  stp x17, cp, [jssp, #-16]!
0x4cd11e64   292  add fp, jssp, #0x10 (16)
0x4cd11e68   296  ldr x17, pc+24 (addr 0x000000004cd11e80)    ;; lazy deoptimization bailout 0
0x4cd11e6c   300  add x17, x17, x16
0x4cd11e70   304  br x17
0x4cd11e74   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11e78   312  d63f03e0       constant
0x4cd11e7c   316  d503201f       constant
0x4cd11e80   320  4cb06000       constant
0x4cd11e84   324  00000000       constant


Safepoints (size = 21)
0x4cd11dfc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd11ddc  code target (STUB)  (0x4cd06820)
0x4cd11df4  code target (STUB)  (0x4cd06260)
0x4cd11e00  code target (STUB)  (0x4cd068e0)
0x4cd11e14  constant pool (size 36)
0x4cd11e68  runtime entry
0x4cd11e74  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2346
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 176)
0x4cd11f00     0  mov x2, x1
0x4cd11f04     4  tbnz w2, #0, #+0x44 (addr 0x4cd11f48)
0x4cd11f08     8  mov x3, x0
0x4cd11f0c    12  tbnz w3, #0, #+0x4c (addr 0x4cd11f58)
0x4cd11f10    16  asr x2, x2, #32
0x4cd11f14    20  asr x3, x3, #32
0x4cd11f18    24  sdiv w5, w2, w3
0x4cd11f1c    28  cbz w3, #+0x4c (addr 0x4cd11f68)
0x4cd11f20    32  cmp w3, #0x0 (0)
0x4cd11f24    36  ccmp w2, #0, #nzcv, mi
0x4cd11f28    40  b.eq #+0x40 (addr 0x4cd11f68)
0x4cd11f2c    44  cmp w2, #0x1 (1)
0x4cd11f30    48  ccmn w3, #1, #nzcv, vs
0x4cd11f34    52  b.eq #+0x34 (addr 0x4cd11f68)
0x4cd11f38    56  msub w4, w5, w3, w2
0x4cd11f3c    60  cbnz w4, #+0x2c (addr 0x4cd11f68)
0x4cd11f40    64  lsl x0, x5, #32
0x4cd11f44    68  ret
0x4cd11f48    72  movz x16, #0x0
0x4cd11f4c    76  sub csp, jssp, #0x10 (16)
0x4cd11f50    80  stp fp, lr, [jssp, #-16]!
0x4cd11f54    84  bl #+0x24 (addr 0x4cd11f78)
0x4cd11f58    88  movz x16, #0x8
0x4cd11f5c    92  sub csp, jssp, #0x10 (16)
0x4cd11f60    96  stp fp, lr, [jssp, #-16]!
0x4cd11f64   100  bl #+0x14 (addr 0x4cd11f78)
0x4cd11f68   104  movz x16, #0x10
0x4cd11f6c   108  sub csp, jssp, #0x10 (16)
0x4cd11f70   112  stp fp, lr, [jssp, #-16]!
0x4cd11f74   116  bl #+0x4 (addr 0x4cd11f78)
0x4cd11f78   120  movz x17, #0xa00000000
0x4cd11f7c   124  sub csp, jssp, #0x10 (16)
0x4cd11f80   128  stp x17, cp, [jssp, #-16]!
0x4cd11f84   132  add fp, jssp, #0x10 (16)
0x4cd11f88   136  ldr x17, pc+24 (addr 0x000000004cd11fa0)    ;; lazy deoptimization bailout 0
0x4cd11f8c   140  add x17, x17, x16
0x4cd11f90   144  br x17
0x4cd11f94   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11f98   152  d63f03e0       constant
0x4cd11f9c   156  d503201f       constant
0x4cd11fa0   160  4cb06000       constant
0x4cd11fa4   164  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd11f88  runtime entry
0x4cd11f94  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2346
type = NORMAL
name = BinaryOpICStub(DIV:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 176)
0x4cd11f00     0  mov x2, x1
0x4cd11f04     4  tbnz w2, #0, #+0x44 (addr 0x4cd11f48)
0x4cd11f08     8  mov x3, x0
0x4cd11f0c    12  tbnz w3, #0, #+0x4c (addr 0x4cd11f58)
0x4cd11f10    16  asr x2, x2, #32
0x4cd11f14    20  asr x3, x3, #32
0x4cd11f18    24  sdiv w5, w2, w3
0x4cd11f1c    28  cbz w3, #+0x4c (addr 0x4cd11f68)
0x4cd11f20    32  cmp w3, #0x0 (0)
0x4cd11f24    36  ccmp w2, #0, #nzcv, mi
0x4cd11f28    40  b.eq #+0x40 (addr 0x4cd11f68)
0x4cd11f2c    44  cmp w2, #0x1 (1)
0x4cd11f30    48  ccmn w3, #1, #nzcv, vs
0x4cd11f34    52  b.eq #+0x34 (addr 0x4cd11f68)
0x4cd11f38    56  msub w4, w5, w3, w2
0x4cd11f3c    60  cbnz w4, #+0x2c (addr 0x4cd11f68)
0x4cd11f40    64  lsl x0, x5, #32
0x4cd11f44    68  ret
0x4cd11f48    72  movz x16, #0x0
0x4cd11f4c    76  sub csp, jssp, #0x10 (16)
0x4cd11f50    80  stp fp, lr, [jssp, #-16]!
0x4cd11f54    84  bl #+0x24 (addr 0x4cd11f78)
0x4cd11f58    88  movz x16, #0x8
0x4cd11f5c    92  sub csp, jssp, #0x10 (16)
0x4cd11f60    96  stp fp, lr, [jssp, #-16]!
0x4cd11f64   100  bl #+0x14 (addr 0x4cd11f78)
0x4cd11f68   104  movz x16, #0x10
0x4cd11f6c   108  sub csp, jssp, #0x10 (16)
0x4cd11f70   112  stp fp, lr, [jssp, #-16]!
0x4cd11f74   116  bl #+0x4 (addr 0x4cd11f78)
0x4cd11f78   120  movz x17, #0xa00000000
0x4cd11f7c   124  sub csp, jssp, #0x10 (16)
0x4cd11f80   128  stp x17, cp, [jssp, #-16]!
0x4cd11f84   132  add fp, jssp, #0x10 (16)
0x4cd11f88   136  ldr x17, pc+24 (addr 0x000000004cd11fa0)    ;; lazy deoptimization bailout 0
0x4cd11f8c   140  add x17, x17, x16
0x4cd11f90   144  br x17
0x4cd11f94   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd11f98   152  d63f03e0       constant
0x4cd11f9c   156  d503201f       constant
0x4cd11fa0   160  4cb06000       constant
0x4cd11fa4   164  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd11f88  runtime entry
0x4cd11f94  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2362
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0x4cd12020     0  mov x2, x1
0x4cd12024     4  tbnz w2, #0, #+0xc4 (addr 0x4cd120e8)
0x4cd12028     8  mov x3, x0
0x4cd1202c    12  tbnz w3, #0, #+0xcc (addr 0x4cd120f8)
0x4cd12030    16  scvtf d0, x2, #32
0x4cd12034    20  scvtf d1, x3, #32
0x4cd12038    24  fdiv d0, d0, d1
0x4cd1203c    28  movz x1, #0xd2c0
0x4cd12040    32  movk x1, #0x166d, lsl #16
0x4cd12044    36  ldp x2, x0, [x1]
0x4cd12048    40  adds x16, x2, #0x10 (16)
0x4cd1204c    44  ccmp x16, x0, #nzCv, lo
0x4cd12050    48  b.hi #+0x20 (addr 0x4cd12070)
0x4cd12054    52  str x16, [x1]
0x4cd12058    56  ldr x1, [x26, #120]
0x4cd1205c    60  str x1, [x2]
0x4cd12060    64  orr x2, x2, #0x1
0x4cd12064    68  stur d0, [x2, #7]
0x4cd12068    72  mov x0, x2
0x4cd1206c    76  ret
0x4cd12070    80  sub csp, jssp, #0x10 (16)
0x4cd12074    84  stp fp, lr, [jssp, #-16]!
0x4cd12078    88  movz fp, #0xa00000000
0x4cd1207c    92  sub csp, jssp, #0x8 (8)
0x4cd12080    96  str fp, [jssp, #-8]!
0x4cd12084   100  add fp, jssp, #0x8 (8)
0x4cd12088   104  movz x2, #0x0
0x4cd1208c   108  mov x16, lr
0x4cd12090   112  ldr x17, pc+64 (addr 0x000000004cd120d0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd12094   116  blr x17
0x4cd12098   120  ldur cp, [fp, #-8]
0x4cd1209c   124  movz x0, #0x0
0x4cd120a0   128  movz x1, #0x4b48
0x4cd120a4   132  movk x1, #0xe4, lsl #16
0x4cd120a8   136  ldr x16, pc+48 (addr 0x000000004cd120d8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd120ac   140  blr x16
0x4cd120b0   144  str x0, [jssp, #16]
0x4cd120b4   148  ldr x16, pc+44 (addr 0x000000004cd120e0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd120b8   152  blr x16
0x4cd120bc   156  ldr lr, [jssp, #16]
0x4cd120c0   160  ldp xzr, fp, [jssp], #24
0x4cd120c4   164  b #-0x60 (addr 0x4cd12064)
0x4cd120c8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd120cc   172  d63f03e0       constant
0x4cd120d0   176  4cd06820       constant
0x4cd120d4   180  00000000       constant
0x4cd120d8   184  4cd06260       constant
0x4cd120dc   188  00000000       constant
0x4cd120e0   192  4cd068e0       constant
0x4cd120e4   196  00000000       constant
0x4cd120e8   200  movz x16, #0x0
0x4cd120ec   204  sub csp, jssp, #0x10 (16)
0x4cd120f0   208  stp fp, lr, [jssp, #-16]!
0x4cd120f4   212  bl #+0x14 (addr 0x4cd12108)
0x4cd120f8   216  movz x16, #0x8
0x4cd120fc   220  sub csp, jssp, #0x10 (16)
0x4cd12100   224  stp fp, lr, [jssp, #-16]!
0x4cd12104   228  bl #+0x4 (addr 0x4cd12108)
0x4cd12108   232  movz x17, #0xa00000000
0x4cd1210c   236  sub csp, jssp, #0x10 (16)
0x4cd12110   240  stp x17, cp, [jssp, #-16]!
0x4cd12114   244  add fp, jssp, #0x10 (16)
0x4cd12118   248  ldr x17, pc+24 (addr 0x000000004cd12130)    ;; lazy deoptimization bailout 0
0x4cd1211c   252  add x17, x17, x16
0x4cd12120   256  br x17
0x4cd12124   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd12128   264  d63f03e0       constant
0x4cd1212c   268  d503201f       constant
0x4cd12130   272  4cb06000       constant
0x4cd12134   276  00000000       constant


Safepoints (size = 21)
0x4cd120b0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd12090  code target (STUB)  (0x4cd06820)
0x4cd120a8  code target (STUB)  (0x4cd06260)
0x4cd120b4  code target (STUB)  (0x4cd068e0)
0x4cd120c8  constant pool (size 32)
0x4cd12118  runtime entry
0x4cd12124  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2362
type = NORMAL
name = BinaryOpICStub(DIV:Int32*Smi->Number)
compiler = crankshaft
Instructions (size = 301)
0x4cd12020     0  mov x2, x1
0x4cd12024     4  tbnz w2, #0, #+0xc4 (addr 0x4cd120e8)
0x4cd12028     8  mov x3, x0
0x4cd1202c    12  tbnz w3, #0, #+0xcc (addr 0x4cd120f8)
0x4cd12030    16  scvtf d0, x2, #32
0x4cd12034    20  scvtf d1, x3, #32
0x4cd12038    24  fdiv d0, d0, d1
0x4cd1203c    28  movz x1, #0xd2c0
0x4cd12040    32  movk x1, #0x166d, lsl #16
0x4cd12044    36  ldp x2, x0, [x1]
0x4cd12048    40  adds x16, x2, #0x10 (16)
0x4cd1204c    44  ccmp x16, x0, #nzCv, lo
0x4cd12050    48  b.hi #+0x20 (addr 0x4cd12070)
0x4cd12054    52  str x16, [x1]
0x4cd12058    56  ldr x1, [x26, #120]
0x4cd1205c    60  str x1, [x2]
0x4cd12060    64  orr x2, x2, #0x1
0x4cd12064    68  stur d0, [x2, #7]
0x4cd12068    72  mov x0, x2
0x4cd1206c    76  ret
0x4cd12070    80  sub csp, jssp, #0x10 (16)
0x4cd12074    84  stp fp, lr, [jssp, #-16]!
0x4cd12078    88  movz fp, #0xa00000000
0x4cd1207c    92  sub csp, jssp, #0x8 (8)
0x4cd12080    96  str fp, [jssp, #-8]!
0x4cd12084   100  add fp, jssp, #0x8 (8)
0x4cd12088   104  movz x2, #0x0
0x4cd1208c   108  mov x16, lr
0x4cd12090   112  ldr x17, pc+64 (addr 0x000000004cd120d0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd12094   116  blr x17
0x4cd12098   120  ldur cp, [fp, #-8]
0x4cd1209c   124  movz x0, #0x0
0x4cd120a0   128  movz x1, #0x4b48
0x4cd120a4   132  movk x1, #0xe4, lsl #16
0x4cd120a8   136  ldr x16, pc+48 (addr 0x000000004cd120d8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd120ac   140  blr x16
0x4cd120b0   144  str x0, [jssp, #16]
0x4cd120b4   148  ldr x16, pc+44 (addr 0x000000004cd120e0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd120b8   152  blr x16
0x4cd120bc   156  ldr lr, [jssp, #16]
0x4cd120c0   160  ldp xzr, fp, [jssp], #24
0x4cd120c4   164  b #-0x60 (addr 0x4cd12064)
0x4cd120c8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd120cc   172  d63f03e0       constant
0x4cd120d0   176  4cd06820       constant
0x4cd120d4   180  00000000       constant
0x4cd120d8   184  4cd06260       constant
0x4cd120dc   188  00000000       constant
0x4cd120e0   192  4cd068e0       constant
0x4cd120e4   196  00000000       constant
0x4cd120e8   200  movz x16, #0x0
0x4cd120ec   204  sub csp, jssp, #0x10 (16)
0x4cd120f0   208  stp fp, lr, [jssp, #-16]!
0x4cd120f4   212  bl #+0x14 (addr 0x4cd12108)
0x4cd120f8   216  movz x16, #0x8
0x4cd120fc   220  sub csp, jssp, #0x10 (16)
0x4cd12100   224  stp fp, lr, [jssp, #-16]!
0x4cd12104   228  bl #+0x4 (addr 0x4cd12108)
0x4cd12108   232  movz x17, #0xa00000000
0x4cd1210c   236  sub csp, jssp, #0x10 (16)
0x4cd12110   240  stp x17, cp, [jssp, #-16]!
0x4cd12114   244  add fp, jssp, #0x10 (16)
0x4cd12118   248  ldr x17, pc+24 (addr 0x000000004cd12130)    ;; lazy deoptimization bailout 0
0x4cd1211c   252  add x17, x17, x16
0x4cd12120   256  br x17
0x4cd12124   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd12128   264  d63f03e0       constant
0x4cd1212c   268  d503201f       constant
0x4cd12130   272  4cb06000       constant
0x4cd12134   276  00000000       constant


Safepoints (size = 21)
0x4cd120b0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd12090  code target (STUB)  (0x4cd06820)
0x4cd120a8  code target (STUB)  (0x4cd06260)
0x4cd120b4  code target (STUB)  (0x4cd068e0)
0x4cd120c8  constant pool (size 32)
0x4cd12118  runtime entry
0x4cd12124  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4538
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0x4cd121c0     0  mov x2, x0
0x4cd121c4     4  tbnz w2, #0, #+0xf4 (addr 0x4cd122b8)
0x4cd121c8     8  tbz w1, #0, #+0x34 (addr 0x4cd121fc)
0x4cd121cc    12  ldur x16, [x1, #-1]
0x4cd121d0    16  ldr x17, [x26, #120]
0x4cd121d4    20  cmp x16, x17
0x4cd121d8    24  b.ne #+0xc (addr 0x4cd121e4)
0x4cd121dc    28  ldur d0, [x1, #7]
0x4cd121e0    32  b #+0x20 (addr 0x4cd12200)
0x4cd121e4    36  ldr x16, [x26, #40]
0x4cd121e8    40  cmp x1, x16
0x4cd121ec    44  b.ne #+0xdc (addr 0x4cd122c8)
0x4cd121f0    48  ldr x3, [x26, #928]
0x4cd121f4    52  ldur d0, [x3, #7]
0x4cd121f8    56  b #+0x8 (addr 0x4cd12200)
0x4cd121fc    60  scvtf d0, x1, #32
0x4cd12200    64  scvtf d1, x2, #32
0x4cd12204    68  fdiv d0, d0, d1
0x4cd12208    72  movz x1, #0xd2c0
0x4cd1220c    76  movk x1, #0x166d, lsl #16
0x4cd12210    80  ldp x2, x0, [x1]
0x4cd12214    84  adds x16, x2, #0x10 (16)
0x4cd12218    88  ccmp x16, x0, #nzCv, lo
0x4cd1221c    92  b.hi #+0x20 (addr 0x4cd1223c)
0x4cd12220    96  str x16, [x1]
0x4cd12224   100  ldr x1, [x26, #120]
0x4cd12228   104  str x1, [x2]
0x4cd1222c   108  orr x2, x2, #0x1
0x4cd12230   112  stur d0, [x2, #7]
0x4cd12234   116  mov x0, x2
0x4cd12238   120  ret
0x4cd1223c   124  sub csp, jssp, #0x10 (16)
0x4cd12240   128  stp fp, lr, [jssp, #-16]!
0x4cd12244   132  movz fp, #0xa00000000
0x4cd12248   136  sub csp, jssp, #0x8 (8)
0x4cd1224c   140  str fp, [jssp, #-8]!
0x4cd12250   144  add fp, jssp, #0x8 (8)
0x4cd12254   148  movz x2, #0x0
0x4cd12258   152  mov x16, lr
0x4cd1225c   156  ldr x17, pc+68 (addr 0x000000004cd122a0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd12260   160  blr x17
0x4cd12264   164  ldur cp, [fp, #-8]
0x4cd12268   168  movz x0, #0x0
0x4cd1226c   172  movz x1, #0x4b48
0x4cd12270   176  movk x1, #0xe4, lsl #16
0x4cd12274   180  ldr x16, pc+52 (addr 0x000000004cd122a8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd12278   184  blr x16
0x4cd1227c   188  str x0, [jssp, #16]
0x4cd12280   192  ldr x16, pc+48 (addr 0x000000004cd122b0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd12284   196  blr x16
0x4cd12288   200  ldr lr, [jssp, #16]
0x4cd1228c   204  ldp xzr, fp, [jssp], #24
0x4cd12290   208  b #-0x60 (addr 0x4cd12230)
0x4cd12294   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd12298   216  d63f03e0       constant
0x4cd1229c   220  d503201f       constant
0x4cd122a0   224  4cd06820       constant
0x4cd122a4   228  00000000       constant
0x4cd122a8   232  4cd06260       constant
0x4cd122ac   236  00000000       constant
0x4cd122b0   240  4cd068e0       constant
0x4cd122b4   244  00000000       constant
0x4cd122b8   248  movz x16, #0x0
0x4cd122bc   252  sub csp, jssp, #0x10 (16)
0x4cd122c0   256  stp fp, lr, [jssp, #-16]!
0x4cd122c4   260  bl #+0x14 (addr 0x4cd122d8)
0x4cd122c8   264  movz x16, #0x8
0x4cd122cc   268  sub csp, jssp, #0x10 (16)
0x4cd122d0   272  stp fp, lr, [jssp, #-16]!
0x4cd122d4   276  bl #+0x4 (addr 0x4cd122d8)
0x4cd122d8   280  movz x17, #0xa00000000
0x4cd122dc   284  sub csp, jssp, #0x10 (16)
0x4cd122e0   288  stp x17, cp, [jssp, #-16]!
0x4cd122e4   292  add fp, jssp, #0x10 (16)
0x4cd122e8   296  ldr x17, pc+24 (addr 0x000000004cd12300)    ;; lazy deoptimization bailout 0
0x4cd122ec   300  add x17, x17, x16
0x4cd122f0   304  br x17
0x4cd122f4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd122f8   312  d63f03e0       constant
0x4cd122fc   316  d503201f       constant
0x4cd12300   320  4cb06000       constant
0x4cd12304   324  00000000       constant


Safepoints (size = 21)
0x4cd1227c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd1225c  code target (STUB)  (0x4cd06820)
0x4cd12274  code target (STUB)  (0x4cd06260)
0x4cd12280  code target (STUB)  (0x4cd068e0)
0x4cd12294  constant pool (size 36)
0x4cd122e8  runtime entry
0x4cd122f4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4538
type = NORMAL
name = BinaryOpICStub(DIV:Number*Int32->Number)
compiler = crankshaft
Instructions (size = 349)
0x4cd121c0     0  mov x2, x0
0x4cd121c4     4  tbnz w2, #0, #+0xf4 (addr 0x4cd122b8)
0x4cd121c8     8  tbz w1, #0, #+0x34 (addr 0x4cd121fc)
0x4cd121cc    12  ldur x16, [x1, #-1]
0x4cd121d0    16  ldr x17, [x26, #120]
0x4cd121d4    20  cmp x16, x17
0x4cd121d8    24  b.ne #+0xc (addr 0x4cd121e4)
0x4cd121dc    28  ldur d0, [x1, #7]
0x4cd121e0    32  b #+0x20 (addr 0x4cd12200)
0x4cd121e4    36  ldr x16, [x26, #40]
0x4cd121e8    40  cmp x1, x16
0x4cd121ec    44  b.ne #+0xdc (addr 0x4cd122c8)
0x4cd121f0    48  ldr x3, [x26, #928]
0x4cd121f4    52  ldur d0, [x3, #7]
0x4cd121f8    56  b #+0x8 (addr 0x4cd12200)
0x4cd121fc    60  scvtf d0, x1, #32
0x4cd12200    64  scvtf d1, x2, #32
0x4cd12204    68  fdiv d0, d0, d1
0x4cd12208    72  movz x1, #0xd2c0
0x4cd1220c    76  movk x1, #0x166d, lsl #16
0x4cd12210    80  ldp x2, x0, [x1]
0x4cd12214    84  adds x16, x2, #0x10 (16)
0x4cd12218    88  ccmp x16, x0, #nzCv, lo
0x4cd1221c    92  b.hi #+0x20 (addr 0x4cd1223c)
0x4cd12220    96  str x16, [x1]
0x4cd12224   100  ldr x1, [x26, #120]
0x4cd12228   104  str x1, [x2]
0x4cd1222c   108  orr x2, x2, #0x1
0x4cd12230   112  stur d0, [x2, #7]
0x4cd12234   116  mov x0, x2
0x4cd12238   120  ret
0x4cd1223c   124  sub csp, jssp, #0x10 (16)
0x4cd12240   128  stp fp, lr, [jssp, #-16]!
0x4cd12244   132  movz fp, #0xa00000000
0x4cd12248   136  sub csp, jssp, #0x8 (8)
0x4cd1224c   140  str fp, [jssp, #-8]!
0x4cd12250   144  add fp, jssp, #0x8 (8)
0x4cd12254   148  movz x2, #0x0
0x4cd12258   152  mov x16, lr
0x4cd1225c   156  ldr x17, pc+68 (addr 0x000000004cd122a0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd12260   160  blr x17
0x4cd12264   164  ldur cp, [fp, #-8]
0x4cd12268   168  movz x0, #0x0
0x4cd1226c   172  movz x1, #0x4b48
0x4cd12270   176  movk x1, #0xe4, lsl #16
0x4cd12274   180  ldr x16, pc+52 (addr 0x000000004cd122a8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd12278   184  blr x16
0x4cd1227c   188  str x0, [jssp, #16]
0x4cd12280   192  ldr x16, pc+48 (addr 0x000000004cd122b0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd12284   196  blr x16
0x4cd12288   200  ldr lr, [jssp, #16]
0x4cd1228c   204  ldp xzr, fp, [jssp], #24
0x4cd12290   208  b #-0x60 (addr 0x4cd12230)
0x4cd12294   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd12298   216  d63f03e0       constant
0x4cd1229c   220  d503201f       constant
0x4cd122a0   224  4cd06820       constant
0x4cd122a4   228  00000000       constant
0x4cd122a8   232  4cd06260       constant
0x4cd122ac   236  00000000       constant
0x4cd122b0   240  4cd068e0       constant
0x4cd122b4   244  00000000       constant
0x4cd122b8   248  movz x16, #0x0
0x4cd122bc   252  sub csp, jssp, #0x10 (16)
0x4cd122c0   256  stp fp, lr, [jssp, #-16]!
0x4cd122c4   260  bl #+0x14 (addr 0x4cd122d8)
0x4cd122c8   264  movz x16, #0x8
0x4cd122cc   268  sub csp, jssp, #0x10 (16)
0x4cd122d0   272  stp fp, lr, [jssp, #-16]!
0x4cd122d4   276  bl #+0x4 (addr 0x4cd122d8)
0x4cd122d8   280  movz x17, #0xa00000000
0x4cd122dc   284  sub csp, jssp, #0x10 (16)
0x4cd122e0   288  stp x17, cp, [jssp, #-16]!
0x4cd122e4   292  add fp, jssp, #0x10 (16)
0x4cd122e8   296  ldr x17, pc+24 (addr 0x000000004cd12300)    ;; lazy deoptimization bailout 0
0x4cd122ec   300  add x17, x17, x16
0x4cd122f0   304  br x17
0x4cd122f4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd122f8   312  d63f03e0       constant
0x4cd122fc   316  d503201f       constant
0x4cd12300   320  4cb06000       constant
0x4cd12304   324  00000000       constant


Safepoints (size = 21)
0x4cd1227c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd1225c  code target (STUB)  (0x4cd06820)
0x4cd12274  code target (STUB)  (0x4cd06260)
0x4cd12280  code target (STUB)  (0x4cd068e0)
0x4cd12294  constant pool (size 36)
0x4cd122e8  runtime entry
0x4cd122f4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6586
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 389)
0x4cd12380     0  tbz w1, #0, #+0x34 (addr 0x4cd123b4)
0x4cd12384     4  ldur x16, [x1, #-1]
0x4cd12388     8  ldr x17, [x26, #120]
0x4cd1238c    12  cmp x16, x17
0x4cd12390    16  b.ne #+0xc (addr 0x4cd1239c)
0x4cd12394    20  ldur d0, [x1, #7]
0x4cd12398    24  b #+0x20 (addr 0x4cd123b8)
0x4cd1239c    28  ldr x16, [x26, #40]
0x4cd123a0    32  cmp x1, x16
0x4cd123a4    36  b.ne #+0xfc (addr 0x4cd124a0)
0x4cd123a8    40  ldr x2, [x26, #928]
0x4cd123ac    44  ldur d0, [x2, #7]
0x4cd123b0    48  b #+0x8 (addr 0x4cd123b8)
0x4cd123b4    52  scvtf d0, x1, #32
0x4cd123b8    56  tbz w0, #0, #+0x34 (addr 0x4cd123ec)
0x4cd123bc    60  ldur x16, [x0, #-1]
0x4cd123c0    64  ldr x17, [x26, #120]
0x4cd123c4    68  cmp x16, x17
0x4cd123c8    72  b.ne #+0xc (addr 0x4cd123d4)
0x4cd123cc    76  ldur d1, [x0, #7]
0x4cd123d0    80  b #+0x20 (addr 0x4cd123f0)
0x4cd123d4    84  ldr x16, [x26, #40]
0x4cd123d8    88  cmp x0, x16
0x4cd123dc    92  b.ne #+0xd4 (addr 0x4cd124b0)
0x4cd123e0    96  ldr x2, [x26, #928]
0x4cd123e4   100  ldur d1, [x2, #7]
0x4cd123e8   104  b #+0x8 (addr 0x4cd123f0)
0x4cd123ec   108  scvtf d1, x0, #32
0x4cd123f0   112  fdiv d0, d0, d1
0x4cd123f4   116  movz x1, #0xd2c0
0x4cd123f8   120  movk x1, #0x166d, lsl #16
0x4cd123fc   124  ldp x2, x0, [x1]
0x4cd12400   128  adds x16, x2, #0x10 (16)
0x4cd12404   132  ccmp x16, x0, #nzCv, lo
0x4cd12408   136  b.hi #+0x20 (addr 0x4cd12428)
0x4cd1240c   140  str x16, [x1]
0x4cd12410   144  ldr x1, [x26, #120]
0x4cd12414   148  str x1, [x2]
0x4cd12418   152  orr x2, x2, #0x1
0x4cd1241c   156  stur d0, [x2, #7]
0x4cd12420   160  mov x0, x2
0x4cd12424   164  ret
0x4cd12428   168  sub csp, jssp, #0x10 (16)
0x4cd1242c   172  stp fp, lr, [jssp, #-16]!
0x4cd12430   176  movz fp, #0xa00000000
0x4cd12434   180  sub csp, jssp, #0x8 (8)
0x4cd12438   184  str fp, [jssp, #-8]!
0x4cd1243c   188  add fp, jssp, #0x8 (8)
0x4cd12440   192  movz x2, #0x0
0x4cd12444   196  mov x16, lr
0x4cd12448   200  ldr x17, pc+64 (addr 0x000000004cd12488)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd1244c   204  blr x17
0x4cd12450   208  ldur cp, [fp, #-8]
0x4cd12454   212  movz x0, #0x0
0x4cd12458   216  movz x1, #0x4b48
0x4cd1245c   220  movk x1, #0xe4, lsl #16
0x4cd12460   224  ldr x16, pc+48 (addr 0x000000004cd12490)    ;; code: STUB, CEntryStub, minor: 5
0x4cd12464   228  blr x16
0x4cd12468   232  str x0, [jssp, #16]
0x4cd1246c   236  ldr x16, pc+44 (addr 0x000000004cd12498)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd12470   240  blr x16
0x4cd12474   244  ldr lr, [jssp, #16]
0x4cd12478   248  ldp xzr, fp, [jssp], #24
0x4cd1247c   252  b #-0x60 (addr 0x4cd1241c)
0x4cd12480   256  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd12484   260  d63f03e0       constant
0x4cd12488   264  4cd06820       constant
0x4cd1248c   268  00000000       constant
0x4cd12490   272  4cd06260       constant
0x4cd12494   276  00000000       constant
0x4cd12498   280  4cd068e0       constant
0x4cd1249c   284  00000000       constant
0x4cd124a0   288  movz x16, #0x0
0x4cd124a4   292  sub csp, jssp, #0x10 (16)
0x4cd124a8   296  stp fp, lr, [jssp, #-16]!
0x4cd124ac   300  bl #+0x14 (addr 0x4cd124c0)
0x4cd124b0   304  movz x16, #0x8
0x4cd124b4   308  sub csp, jssp, #0x10 (16)
0x4cd124b8   312  stp fp, lr, [jssp, #-16]!
0x4cd124bc   316  bl #+0x4 (addr 0x4cd124c0)
0x4cd124c0   320  movz x17, #0xa00000000
0x4cd124c4   324  sub csp, jssp, #0x10 (16)
0x4cd124c8   328  stp x17, cp, [jssp, #-16]!
0x4cd124cc   332  add fp, jssp, #0x10 (16)
0x4cd124d0   336  ldr x17, pc+24 (addr 0x000000004cd124e8)    ;; lazy deoptimization bailout 0
0x4cd124d4   340  add x17, x17, x16
0x4cd124d8   344  br x17
0x4cd124dc   348  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd124e0   352  d63f03e0       constant
0x4cd124e4   356  d503201f       constant
0x4cd124e8   360  4cb06000       constant
0x4cd124ec   364  00000000       constant


Safepoints (size = 21)
0x4cd12468   232  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd12448  code target (STUB)  (0x4cd06820)
0x4cd12460  code target (STUB)  (0x4cd06260)
0x4cd1246c  code target (STUB)  (0x4cd068e0)
0x4cd12480  constant pool (size 32)
0x4cd124d0  runtime entry
0x4cd124dc  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6586
type = NORMAL
name = BinaryOpICStub(DIV:Number*Number->Number)
compiler = crankshaft
Instructions (size = 389)
0x4cd12380     0  tbz w1, #0, #+0x34 (addr 0x4cd123b4)
0x4cd12384     4  ldur x16, [x1, #-1]
0x4cd12388     8  ldr x17, [x26, #120]
0x4cd1238c    12  cmp x16, x17
0x4cd12390    16  b.ne #+0xc (addr 0x4cd1239c)
0x4cd12394    20  ldur d0, [x1, #7]
0x4cd12398    24  b #+0x20 (addr 0x4cd123b8)
0x4cd1239c    28  ldr x16, [x26, #40]
0x4cd123a0    32  cmp x1, x16
0x4cd123a4    36  b.ne #+0xfc (addr 0x4cd124a0)
0x4cd123a8    40  ldr x2, [x26, #928]
0x4cd123ac    44  ldur d0, [x2, #7]
0x4cd123b0    48  b #+0x8 (addr 0x4cd123b8)
0x4cd123b4    52  scvtf d0, x1, #32
0x4cd123b8    56  tbz w0, #0, #+0x34 (addr 0x4cd123ec)
0x4cd123bc    60  ldur x16, [x0, #-1]
0x4cd123c0    64  ldr x17, [x26, #120]
0x4cd123c4    68  cmp x16, x17
0x4cd123c8    72  b.ne #+0xc (addr 0x4cd123d4)
0x4cd123cc    76  ldur d1, [x0, #7]
0x4cd123d0    80  b #+0x20 (addr 0x4cd123f0)
0x4cd123d4    84  ldr x16, [x26, #40]
0x4cd123d8    88  cmp x0, x16
0x4cd123dc    92  b.ne #+0xd4 (addr 0x4cd124b0)
0x4cd123e0    96  ldr x2, [x26, #928]
0x4cd123e4   100  ldur d1, [x2, #7]
0x4cd123e8   104  b #+0x8 (addr 0x4cd123f0)
0x4cd123ec   108  scvtf d1, x0, #32
0x4cd123f0   112  fdiv d0, d0, d1
0x4cd123f4   116  movz x1, #0xd2c0
0x4cd123f8   120  movk x1, #0x166d, lsl #16
0x4cd123fc   124  ldp x2, x0, [x1]
0x4cd12400   128  adds x16, x2, #0x10 (16)
0x4cd12404   132  ccmp x16, x0, #nzCv, lo
0x4cd12408   136  b.hi #+0x20 (addr 0x4cd12428)
0x4cd1240c   140  str x16, [x1]
0x4cd12410   144  ldr x1, [x26, #120]
0x4cd12414   148  str x1, [x2]
0x4cd12418   152  orr x2, x2, #0x1
0x4cd1241c   156  stur d0, [x2, #7]
0x4cd12420   160  mov x0, x2
0x4cd12424   164  ret
0x4cd12428   168  sub csp, jssp, #0x10 (16)
0x4cd1242c   172  stp fp, lr, [jssp, #-16]!
0x4cd12430   176  movz fp, #0xa00000000
0x4cd12434   180  sub csp, jssp, #0x8 (8)
0x4cd12438   184  str fp, [jssp, #-8]!
0x4cd1243c   188  add fp, jssp, #0x8 (8)
0x4cd12440   192  movz x2, #0x0
0x4cd12444   196  mov x16, lr
0x4cd12448   200  ldr x17, pc+64 (addr 0x000000004cd12488)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd1244c   204  blr x17
0x4cd12450   208  ldur cp, [fp, #-8]
0x4cd12454   212  movz x0, #0x0
0x4cd12458   216  movz x1, #0x4b48
0x4cd1245c   220  movk x1, #0xe4, lsl #16
0x4cd12460   224  ldr x16, pc+48 (addr 0x000000004cd12490)    ;; code: STUB, CEntryStub, minor: 5
0x4cd12464   228  blr x16
0x4cd12468   232  str x0, [jssp, #16]
0x4cd1246c   236  ldr x16, pc+44 (addr 0x000000004cd12498)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd12470   240  blr x16
0x4cd12474   244  ldr lr, [jssp, #16]
0x4cd12478   248  ldp xzr, fp, [jssp], #24
0x4cd1247c   252  b #-0x60 (addr 0x4cd1241c)
0x4cd12480   256  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd12484   260  d63f03e0       constant
0x4cd12488   264  4cd06820       constant
0x4cd1248c   268  00000000       constant
0x4cd12490   272  4cd06260       constant
0x4cd12494   276  00000000       constant
0x4cd12498   280  4cd068e0       constant
0x4cd1249c   284  00000000       constant
0x4cd124a0   288  movz x16, #0x0
0x4cd124a4   292  sub csp, jssp, #0x10 (16)
0x4cd124a8   296  stp fp, lr, [jssp, #-16]!
0x4cd124ac   300  bl #+0x14 (addr 0x4cd124c0)
0x4cd124b0   304  movz x16, #0x8
0x4cd124b4   308  sub csp, jssp, #0x10 (16)
0x4cd124b8   312  stp fp, lr, [jssp, #-16]!
0x4cd124bc   316  bl #+0x4 (addr 0x4cd124c0)
0x4cd124c0   320  movz x17, #0xa00000000
0x4cd124c4   324  sub csp, jssp, #0x10 (16)
0x4cd124c8   328  stp x17, cp, [jssp, #-16]!
0x4cd124cc   332  add fp, jssp, #0x10 (16)
0x4cd124d0   336  ldr x17, pc+24 (addr 0x000000004cd124e8)    ;; lazy deoptimization bailout 0
0x4cd124d4   340  add x17, x17, x16
0x4cd124d8   344  br x17
0x4cd124dc   348  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd124e0   352  d63f03e0       constant
0x4cd124e4   356  d503201f       constant
0x4cd124e8   360  4cb06000       constant
0x4cd124ec   364  00000000       constant


Safepoints (size = 21)
0x4cd12468   232  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd12448  code target (STUB)  (0x4cd06820)
0x4cd12460  code target (STUB)  (0x4cd06260)
0x4cd1246c  code target (STUB)  (0x4cd068e0)
0x4cd12480  constant pool (size 32)
0x4cd124d0  runtime entry
0x4cd124dc  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2490
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0x4cd12580     0  mov x2, x0
0x4cd12584     4  tbnz w2, #0, #+0xf4 (addr 0x4cd12678)
0x4cd12588     8  tbz w1, #0, #+0x34 (addr 0x4cd125bc)
0x4cd1258c    12  ldur x16, [x1, #-1]
0x4cd12590    16  ldr x17, [x26, #120]
0x4cd12594    20  cmp x16, x17
0x4cd12598    24  b.ne #+0xc (addr 0x4cd125a4)
0x4cd1259c    28  ldur d0, [x1, #7]
0x4cd125a0    32  b #+0x20 (addr 0x4cd125c0)
0x4cd125a4    36  ldr x16, [x26, #40]
0x4cd125a8    40  cmp x1, x16
0x4cd125ac    44  b.ne #+0xdc (addr 0x4cd12688)
0x4cd125b0    48  ldr x3, [x26, #928]
0x4cd125b4    52  ldur d0, [x3, #7]
0x4cd125b8    56  b #+0x8 (addr 0x4cd125c0)
0x4cd125bc    60  scvtf d0, x1, #32
0x4cd125c0    64  scvtf d1, x2, #32
0x4cd125c4    68  fdiv d0, d0, d1
0x4cd125c8    72  movz x1, #0xd2c0
0x4cd125cc    76  movk x1, #0x166d, lsl #16
0x4cd125d0    80  ldp x2, x0, [x1]
0x4cd125d4    84  adds x16, x2, #0x10 (16)
0x4cd125d8    88  ccmp x16, x0, #nzCv, lo
0x4cd125dc    92  b.hi #+0x20 (addr 0x4cd125fc)
0x4cd125e0    96  str x16, [x1]
0x4cd125e4   100  ldr x1, [x26, #120]
0x4cd125e8   104  str x1, [x2]
0x4cd125ec   108  orr x2, x2, #0x1
0x4cd125f0   112  stur d0, [x2, #7]
0x4cd125f4   116  mov x0, x2
0x4cd125f8   120  ret
0x4cd125fc   124  sub csp, jssp, #0x10 (16)
0x4cd12600   128  stp fp, lr, [jssp, #-16]!
0x4cd12604   132  movz fp, #0xa00000000
0x4cd12608   136  sub csp, jssp, #0x8 (8)
0x4cd1260c   140  str fp, [jssp, #-8]!
0x4cd12610   144  add fp, jssp, #0x8 (8)
0x4cd12614   148  movz x2, #0x0
0x4cd12618   152  mov x16, lr
0x4cd1261c   156  ldr x17, pc+68 (addr 0x000000004cd12660)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd12620   160  blr x17
0x4cd12624   164  ldur cp, [fp, #-8]
0x4cd12628   168  movz x0, #0x0
0x4cd1262c   172  movz x1, #0x4b48
0x4cd12630   176  movk x1, #0xe4, lsl #16
0x4cd12634   180  ldr x16, pc+52 (addr 0x000000004cd12668)    ;; code: STUB, CEntryStub, minor: 5
0x4cd12638   184  blr x16
0x4cd1263c   188  str x0, [jssp, #16]
0x4cd12640   192  ldr x16, pc+48 (addr 0x000000004cd12670)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd12644   196  blr x16
0x4cd12648   200  ldr lr, [jssp, #16]
0x4cd1264c   204  ldp xzr, fp, [jssp], #24
0x4cd12650   208  b #-0x60 (addr 0x4cd125f0)
0x4cd12654   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd12658   216  d63f03e0       constant
0x4cd1265c   220  d503201f       constant
0x4cd12660   224  4cd06820       constant
0x4cd12664   228  00000000       constant
0x4cd12668   232  4cd06260       constant
0x4cd1266c   236  00000000       constant
0x4cd12670   240  4cd068e0       constant
0x4cd12674   244  00000000       constant
0x4cd12678   248  movz x16, #0x0
0x4cd1267c   252  sub csp, jssp, #0x10 (16)
0x4cd12680   256  stp fp, lr, [jssp, #-16]!
0x4cd12684   260  bl #+0x14 (addr 0x4cd12698)
0x4cd12688   264  movz x16, #0x8
0x4cd1268c   268  sub csp, jssp, #0x10 (16)
0x4cd12690   272  stp fp, lr, [jssp, #-16]!
0x4cd12694   276  bl #+0x4 (addr 0x4cd12698)
0x4cd12698   280  movz x17, #0xa00000000
0x4cd1269c   284  sub csp, jssp, #0x10 (16)
0x4cd126a0   288  stp x17, cp, [jssp, #-16]!
0x4cd126a4   292  add fp, jssp, #0x10 (16)
0x4cd126a8   296  ldr x17, pc+24 (addr 0x000000004cd126c0)    ;; lazy deoptimization bailout 0
0x4cd126ac   300  add x17, x17, x16
0x4cd126b0   304  br x17
0x4cd126b4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd126b8   312  d63f03e0       constant
0x4cd126bc   316  d503201f       constant
0x4cd126c0   320  4cb06000       constant
0x4cd126c4   324  00000000       constant


Safepoints (size = 21)
0x4cd1263c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd1261c  code target (STUB)  (0x4cd06820)
0x4cd12634  code target (STUB)  (0x4cd06260)
0x4cd12640  code target (STUB)  (0x4cd068e0)
0x4cd12654  constant pool (size 36)
0x4cd126a8  runtime entry
0x4cd126b4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2490
type = NORMAL
name = BinaryOpICStub(DIV:Number*Smi->Number)
compiler = crankshaft
Instructions (size = 349)
0x4cd12580     0  mov x2, x0
0x4cd12584     4  tbnz w2, #0, #+0xf4 (addr 0x4cd12678)
0x4cd12588     8  tbz w1, #0, #+0x34 (addr 0x4cd125bc)
0x4cd1258c    12  ldur x16, [x1, #-1]
0x4cd12590    16  ldr x17, [x26, #120]
0x4cd12594    20  cmp x16, x17
0x4cd12598    24  b.ne #+0xc (addr 0x4cd125a4)
0x4cd1259c    28  ldur d0, [x1, #7]
0x4cd125a0    32  b #+0x20 (addr 0x4cd125c0)
0x4cd125a4    36  ldr x16, [x26, #40]
0x4cd125a8    40  cmp x1, x16
0x4cd125ac    44  b.ne #+0xdc (addr 0x4cd12688)
0x4cd125b0    48  ldr x3, [x26, #928]
0x4cd125b4    52  ldur d0, [x3, #7]
0x4cd125b8    56  b #+0x8 (addr 0x4cd125c0)
0x4cd125bc    60  scvtf d0, x1, #32
0x4cd125c0    64  scvtf d1, x2, #32
0x4cd125c4    68  fdiv d0, d0, d1
0x4cd125c8    72  movz x1, #0xd2c0
0x4cd125cc    76  movk x1, #0x166d, lsl #16
0x4cd125d0    80  ldp x2, x0, [x1]
0x4cd125d4    84  adds x16, x2, #0x10 (16)
0x4cd125d8    88  ccmp x16, x0, #nzCv, lo
0x4cd125dc    92  b.hi #+0x20 (addr 0x4cd125fc)
0x4cd125e0    96  str x16, [x1]
0x4cd125e4   100  ldr x1, [x26, #120]
0x4cd125e8   104  str x1, [x2]
0x4cd125ec   108  orr x2, x2, #0x1
0x4cd125f0   112  stur d0, [x2, #7]
0x4cd125f4   116  mov x0, x2
0x4cd125f8   120  ret
0x4cd125fc   124  sub csp, jssp, #0x10 (16)
0x4cd12600   128  stp fp, lr, [jssp, #-16]!
0x4cd12604   132  movz fp, #0xa00000000
0x4cd12608   136  sub csp, jssp, #0x8 (8)
0x4cd1260c   140  str fp, [jssp, #-8]!
0x4cd12610   144  add fp, jssp, #0x8 (8)
0x4cd12614   148  movz x2, #0x0
0x4cd12618   152  mov x16, lr
0x4cd1261c   156  ldr x17, pc+68 (addr 0x000000004cd12660)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd12620   160  blr x17
0x4cd12624   164  ldur cp, [fp, #-8]
0x4cd12628   168  movz x0, #0x0
0x4cd1262c   172  movz x1, #0x4b48
0x4cd12630   176  movk x1, #0xe4, lsl #16
0x4cd12634   180  ldr x16, pc+52 (addr 0x000000004cd12668)    ;; code: STUB, CEntryStub, minor: 5
0x4cd12638   184  blr x16
0x4cd1263c   188  str x0, [jssp, #16]
0x4cd12640   192  ldr x16, pc+48 (addr 0x000000004cd12670)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd12644   196  blr x16
0x4cd12648   200  ldr lr, [jssp, #16]
0x4cd1264c   204  ldp xzr, fp, [jssp], #24
0x4cd12650   208  b #-0x60 (addr 0x4cd125f0)
0x4cd12654   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd12658   216  d63f03e0       constant
0x4cd1265c   220  d503201f       constant
0x4cd12660   224  4cd06820       constant
0x4cd12664   228  00000000       constant
0x4cd12668   232  4cd06260       constant
0x4cd1266c   236  00000000       constant
0x4cd12670   240  4cd068e0       constant
0x4cd12674   244  00000000       constant
0x4cd12678   248  movz x16, #0x0
0x4cd1267c   252  sub csp, jssp, #0x10 (16)
0x4cd12680   256  stp fp, lr, [jssp, #-16]!
0x4cd12684   260  bl #+0x14 (addr 0x4cd12698)
0x4cd12688   264  movz x16, #0x8
0x4cd1268c   268  sub csp, jssp, #0x10 (16)
0x4cd12690   272  stp fp, lr, [jssp, #-16]!
0x4cd12694   276  bl #+0x4 (addr 0x4cd12698)
0x4cd12698   280  movz x17, #0xa00000000
0x4cd1269c   284  sub csp, jssp, #0x10 (16)
0x4cd126a0   288  stp x17, cp, [jssp, #-16]!
0x4cd126a4   292  add fp, jssp, #0x10 (16)
0x4cd126a8   296  ldr x17, pc+24 (addr 0x000000004cd126c0)    ;; lazy deoptimization bailout 0
0x4cd126ac   300  add x17, x17, x16
0x4cd126b0   304  br x17
0x4cd126b4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd126b8   312  d63f03e0       constant
0x4cd126bc   316  d503201f       constant
0x4cd126c0   320  4cb06000       constant
0x4cd126c4   324  00000000       constant


Safepoints (size = 21)
0x4cd1263c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd1261c  code target (STUB)  (0x4cd06820)
0x4cd12634  code target (STUB)  (0x4cd06260)
0x4cd12640  code target (STUB)  (0x4cd068e0)
0x4cd12654  constant pool (size 36)
0x4cd126a8  runtime entry
0x4cd126b4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4266
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 176)
0x4cd12740     0  mov x2, x1
0x4cd12744     4  tbnz w2, #0, #+0x44 (addr 0x4cd12788)
0x4cd12748     8  mov x3, x0
0x4cd1274c    12  tbnz w3, #0, #+0x4c (addr 0x4cd12798)
0x4cd12750    16  asr x2, x2, #32
0x4cd12754    20  asr x3, x3, #32
0x4cd12758    24  sdiv w5, w2, w3
0x4cd1275c    28  cbz w3, #+0x4c (addr 0x4cd127a8)
0x4cd12760    32  cmp w3, #0x0 (0)
0x4cd12764    36  ccmp w2, #0, #nzcv, mi
0x4cd12768    40  b.eq #+0x40 (addr 0x4cd127a8)
0x4cd1276c    44  cmp w2, #0x1 (1)
0x4cd12770    48  ccmn w3, #1, #nzcv, vs
0x4cd12774    52  b.eq #+0x34 (addr 0x4cd127a8)
0x4cd12778    56  msub w4, w5, w3, w2
0x4cd1277c    60  cbnz w4, #+0x2c (addr 0x4cd127a8)
0x4cd12780    64  lsl x0, x5, #32
0x4cd12784    68  ret
0x4cd12788    72  movz x16, #0x0
0x4cd1278c    76  sub csp, jssp, #0x10 (16)
0x4cd12790    80  stp fp, lr, [jssp, #-16]!
0x4cd12794    84  bl #+0x24 (addr 0x4cd127b8)
0x4cd12798    88  movz x16, #0x8
0x4cd1279c    92  sub csp, jssp, #0x10 (16)
0x4cd127a0    96  stp fp, lr, [jssp, #-16]!
0x4cd127a4   100  bl #+0x14 (addr 0x4cd127b8)
0x4cd127a8   104  movz x16, #0x10
0x4cd127ac   108  sub csp, jssp, #0x10 (16)
0x4cd127b0   112  stp fp, lr, [jssp, #-16]!
0x4cd127b4   116  bl #+0x4 (addr 0x4cd127b8)
0x4cd127b8   120  movz x17, #0xa00000000
0x4cd127bc   124  sub csp, jssp, #0x10 (16)
0x4cd127c0   128  stp x17, cp, [jssp, #-16]!
0x4cd127c4   132  add fp, jssp, #0x10 (16)
0x4cd127c8   136  ldr x17, pc+24 (addr 0x000000004cd127e0)    ;; lazy deoptimization bailout 0
0x4cd127cc   140  add x17, x17, x16
0x4cd127d0   144  br x17
0x4cd127d4   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd127d8   152  d63f03e0       constant
0x4cd127dc   156  d503201f       constant
0x4cd127e0   160  4cb06000       constant
0x4cd127e4   164  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd127c8  runtime entry
0x4cd127d4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4266
type = NORMAL
name = BinaryOpICStub(DIV:Smi*Int32->Int32)
compiler = crankshaft
Instructions (size = 176)
0x4cd12740     0  mov x2, x1
0x4cd12744     4  tbnz w2, #0, #+0x44 (addr 0x4cd12788)
0x4cd12748     8  mov x3, x0
0x4cd1274c    12  tbnz w3, #0, #+0x4c (addr 0x4cd12798)
0x4cd12750    16  asr x2, x2, #32
0x4cd12754    20  asr x3, x3, #32
0x4cd12758    24  sdiv w5, w2, w3
0x4cd1275c    28  cbz w3, #+0x4c (addr 0x4cd127a8)
0x4cd12760    32  cmp w3, #0x0 (0)
0x4cd12764    36  ccmp w2, #0, #nzcv, mi
0x4cd12768    40  b.eq #+0x40 (addr 0x4cd127a8)
0x4cd1276c    44  cmp w2, #0x1 (1)
0x4cd12770    48  ccmn w3, #1, #nzcv, vs
0x4cd12774    52  b.eq #+0x34 (addr 0x4cd127a8)
0x4cd12778    56  msub w4, w5, w3, w2
0x4cd1277c    60  cbnz w4, #+0x2c (addr 0x4cd127a8)
0x4cd12780    64  lsl x0, x5, #32
0x4cd12784    68  ret
0x4cd12788    72  movz x16, #0x0
0x4cd1278c    76  sub csp, jssp, #0x10 (16)
0x4cd12790    80  stp fp, lr, [jssp, #-16]!
0x4cd12794    84  bl #+0x24 (addr 0x4cd127b8)
0x4cd12798    88  movz x16, #0x8
0x4cd1279c    92  sub csp, jssp, #0x10 (16)
0x4cd127a0    96  stp fp, lr, [jssp, #-16]!
0x4cd127a4   100  bl #+0x14 (addr 0x4cd127b8)
0x4cd127a8   104  movz x16, #0x10
0x4cd127ac   108  sub csp, jssp, #0x10 (16)
0x4cd127b0   112  stp fp, lr, [jssp, #-16]!
0x4cd127b4   116  bl #+0x4 (addr 0x4cd127b8)
0x4cd127b8   120  movz x17, #0xa00000000
0x4cd127bc   124  sub csp, jssp, #0x10 (16)
0x4cd127c0   128  stp x17, cp, [jssp, #-16]!
0x4cd127c4   132  add fp, jssp, #0x10 (16)
0x4cd127c8   136  ldr x17, pc+24 (addr 0x000000004cd127e0)    ;; lazy deoptimization bailout 0
0x4cd127cc   140  add x17, x17, x16
0x4cd127d0   144  br x17
0x4cd127d4   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd127d8   152  d63f03e0       constant
0x4cd127dc   156  d503201f       constant
0x4cd127e0   160  4cb06000       constant
0x4cd127e4   164  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd127c8  runtime entry
0x4cd127d4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4282
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0x4cd12860     0  mov x2, x1
0x4cd12864     4  tbnz w2, #0, #+0xc4 (addr 0x4cd12928)
0x4cd12868     8  mov x3, x0
0x4cd1286c    12  tbnz w3, #0, #+0xcc (addr 0x4cd12938)
0x4cd12870    16  scvtf d0, x2, #32
0x4cd12874    20  scvtf d1, x3, #32
0x4cd12878    24  fdiv d0, d0, d1
0x4cd1287c    28  movz x1, #0xd2c0
0x4cd12880    32  movk x1, #0x166d, lsl #16
0x4cd12884    36  ldp x2, x0, [x1]
0x4cd12888    40  adds x16, x2, #0x10 (16)
0x4cd1288c    44  ccmp x16, x0, #nzCv, lo
0x4cd12890    48  b.hi #+0x20 (addr 0x4cd128b0)
0x4cd12894    52  str x16, [x1]
0x4cd12898    56  ldr x1, [x26, #120]
0x4cd1289c    60  str x1, [x2]
0x4cd128a0    64  orr x2, x2, #0x1
0x4cd128a4    68  stur d0, [x2, #7]
0x4cd128a8    72  mov x0, x2
0x4cd128ac    76  ret
0x4cd128b0    80  sub csp, jssp, #0x10 (16)
0x4cd128b4    84  stp fp, lr, [jssp, #-16]!
0x4cd128b8    88  movz fp, #0xa00000000
0x4cd128bc    92  sub csp, jssp, #0x8 (8)
0x4cd128c0    96  str fp, [jssp, #-8]!
0x4cd128c4   100  add fp, jssp, #0x8 (8)
0x4cd128c8   104  movz x2, #0x0
0x4cd128cc   108  mov x16, lr
0x4cd128d0   112  ldr x17, pc+64 (addr 0x000000004cd12910)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd128d4   116  blr x17
0x4cd128d8   120  ldur cp, [fp, #-8]
0x4cd128dc   124  movz x0, #0x0
0x4cd128e0   128  movz x1, #0x4b48
0x4cd128e4   132  movk x1, #0xe4, lsl #16
0x4cd128e8   136  ldr x16, pc+48 (addr 0x000000004cd12918)    ;; code: STUB, CEntryStub, minor: 5
0x4cd128ec   140  blr x16
0x4cd128f0   144  str x0, [jssp, #16]
0x4cd128f4   148  ldr x16, pc+44 (addr 0x000000004cd12920)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd128f8   152  blr x16
0x4cd128fc   156  ldr lr, [jssp, #16]
0x4cd12900   160  ldp xzr, fp, [jssp], #24
0x4cd12904   164  b #-0x60 (addr 0x4cd128a4)
0x4cd12908   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd1290c   172  d63f03e0       constant
0x4cd12910   176  4cd06820       constant
0x4cd12914   180  00000000       constant
0x4cd12918   184  4cd06260       constant
0x4cd1291c   188  00000000       constant
0x4cd12920   192  4cd068e0       constant
0x4cd12924   196  00000000       constant
0x4cd12928   200  movz x16, #0x0
0x4cd1292c   204  sub csp, jssp, #0x10 (16)
0x4cd12930   208  stp fp, lr, [jssp, #-16]!
0x4cd12934   212  bl #+0x14 (addr 0x4cd12948)
0x4cd12938   216  movz x16, #0x8
0x4cd1293c   220  sub csp, jssp, #0x10 (16)
0x4cd12940   224  stp fp, lr, [jssp, #-16]!
0x4cd12944   228  bl #+0x4 (addr 0x4cd12948)
0x4cd12948   232  movz x17, #0xa00000000
0x4cd1294c   236  sub csp, jssp, #0x10 (16)
0x4cd12950   240  stp x17, cp, [jssp, #-16]!
0x4cd12954   244  add fp, jssp, #0x10 (16)
0x4cd12958   248  ldr x17, pc+24 (addr 0x000000004cd12970)    ;; lazy deoptimization bailout 0
0x4cd1295c   252  add x17, x17, x16
0x4cd12960   256  br x17
0x4cd12964   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd12968   264  d63f03e0       constant
0x4cd1296c   268  d503201f       constant
0x4cd12970   272  4cb06000       constant
0x4cd12974   276  00000000       constant


Safepoints (size = 21)
0x4cd128f0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd128d0  code target (STUB)  (0x4cd06820)
0x4cd128e8  code target (STUB)  (0x4cd06260)
0x4cd128f4  code target (STUB)  (0x4cd068e0)
0x4cd12908  constant pool (size 32)
0x4cd12958  runtime entry
0x4cd12964  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4282
type = NORMAL
name = BinaryOpICStub(DIV:Smi*Int32->Number)
compiler = crankshaft
Instructions (size = 301)
0x4cd12860     0  mov x2, x1
0x4cd12864     4  tbnz w2, #0, #+0xc4 (addr 0x4cd12928)
0x4cd12868     8  mov x3, x0
0x4cd1286c    12  tbnz w3, #0, #+0xcc (addr 0x4cd12938)
0x4cd12870    16  scvtf d0, x2, #32
0x4cd12874    20  scvtf d1, x3, #32
0x4cd12878    24  fdiv d0, d0, d1
0x4cd1287c    28  movz x1, #0xd2c0
0x4cd12880    32  movk x1, #0x166d, lsl #16
0x4cd12884    36  ldp x2, x0, [x1]
0x4cd12888    40  adds x16, x2, #0x10 (16)
0x4cd1288c    44  ccmp x16, x0, #nzCv, lo
0x4cd12890    48  b.hi #+0x20 (addr 0x4cd128b0)
0x4cd12894    52  str x16, [x1]
0x4cd12898    56  ldr x1, [x26, #120]
0x4cd1289c    60  str x1, [x2]
0x4cd128a0    64  orr x2, x2, #0x1
0x4cd128a4    68  stur d0, [x2, #7]
0x4cd128a8    72  mov x0, x2
0x4cd128ac    76  ret
0x4cd128b0    80  sub csp, jssp, #0x10 (16)
0x4cd128b4    84  stp fp, lr, [jssp, #-16]!
0x4cd128b8    88  movz fp, #0xa00000000
0x4cd128bc    92  sub csp, jssp, #0x8 (8)
0x4cd128c0    96  str fp, [jssp, #-8]!
0x4cd128c4   100  add fp, jssp, #0x8 (8)
0x4cd128c8   104  movz x2, #0x0
0x4cd128cc   108  mov x16, lr
0x4cd128d0   112  ldr x17, pc+64 (addr 0x000000004cd12910)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd128d4   116  blr x17
0x4cd128d8   120  ldur cp, [fp, #-8]
0x4cd128dc   124  movz x0, #0x0
0x4cd128e0   128  movz x1, #0x4b48
0x4cd128e4   132  movk x1, #0xe4, lsl #16
0x4cd128e8   136  ldr x16, pc+48 (addr 0x000000004cd12918)    ;; code: STUB, CEntryStub, minor: 5
0x4cd128ec   140  blr x16
0x4cd128f0   144  str x0, [jssp, #16]
0x4cd128f4   148  ldr x16, pc+44 (addr 0x000000004cd12920)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd128f8   152  blr x16
0x4cd128fc   156  ldr lr, [jssp, #16]
0x4cd12900   160  ldp xzr, fp, [jssp], #24
0x4cd12904   164  b #-0x60 (addr 0x4cd128a4)
0x4cd12908   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd1290c   172  d63f03e0       constant
0x4cd12910   176  4cd06820       constant
0x4cd12914   180  00000000       constant
0x4cd12918   184  4cd06260       constant
0x4cd1291c   188  00000000       constant
0x4cd12920   192  4cd068e0       constant
0x4cd12924   196  00000000       constant
0x4cd12928   200  movz x16, #0x0
0x4cd1292c   204  sub csp, jssp, #0x10 (16)
0x4cd12930   208  stp fp, lr, [jssp, #-16]!
0x4cd12934   212  bl #+0x14 (addr 0x4cd12948)
0x4cd12938   216  movz x16, #0x8
0x4cd1293c   220  sub csp, jssp, #0x10 (16)
0x4cd12940   224  stp fp, lr, [jssp, #-16]!
0x4cd12944   228  bl #+0x4 (addr 0x4cd12948)
0x4cd12948   232  movz x17, #0xa00000000
0x4cd1294c   236  sub csp, jssp, #0x10 (16)
0x4cd12950   240  stp x17, cp, [jssp, #-16]!
0x4cd12954   244  add fp, jssp, #0x10 (16)
0x4cd12958   248  ldr x17, pc+24 (addr 0x000000004cd12970)    ;; lazy deoptimization bailout 0
0x4cd1295c   252  add x17, x17, x16
0x4cd12960   256  br x17
0x4cd12964   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd12968   264  d63f03e0       constant
0x4cd1296c   268  d503201f       constant
0x4cd12970   272  4cb06000       constant
0x4cd12974   276  00000000       constant


Safepoints (size = 21)
0x4cd128f0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd128d0  code target (STUB)  (0x4cd06820)
0x4cd128e8  code target (STUB)  (0x4cd06260)
0x4cd128f4  code target (STUB)  (0x4cd068e0)
0x4cd12908  constant pool (size 32)
0x4cd12958  runtime entry
0x4cd12964  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6330
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0x4cd12a00     0  mov x2, x1
0x4cd12a04     4  tbnz w2, #0, #+0xf4 (addr 0x4cd12af8)
0x4cd12a08     8  tbz w0, #0, #+0x34 (addr 0x4cd12a3c)
0x4cd12a0c    12  ldur x16, [x0, #-1]
0x4cd12a10    16  ldr x17, [x26, #120]
0x4cd12a14    20  cmp x16, x17
0x4cd12a18    24  b.ne #+0xc (addr 0x4cd12a24)
0x4cd12a1c    28  ldur d0, [x0, #7]
0x4cd12a20    32  b #+0x20 (addr 0x4cd12a40)
0x4cd12a24    36  ldr x16, [x26, #40]
0x4cd12a28    40  cmp x0, x16
0x4cd12a2c    44  b.ne #+0xdc (addr 0x4cd12b08)
0x4cd12a30    48  ldr x3, [x26, #928]
0x4cd12a34    52  ldur d0, [x3, #7]
0x4cd12a38    56  b #+0x8 (addr 0x4cd12a40)
0x4cd12a3c    60  scvtf d0, x0, #32
0x4cd12a40    64  scvtf d1, x2, #32
0x4cd12a44    68  fdiv d0, d1, d0
0x4cd12a48    72  movz x1, #0xd2c0
0x4cd12a4c    76  movk x1, #0x166d, lsl #16
0x4cd12a50    80  ldp x2, x0, [x1]
0x4cd12a54    84  adds x16, x2, #0x10 (16)
0x4cd12a58    88  ccmp x16, x0, #nzCv, lo
0x4cd12a5c    92  b.hi #+0x20 (addr 0x4cd12a7c)
0x4cd12a60    96  str x16, [x1]
0x4cd12a64   100  ldr x1, [x26, #120]
0x4cd12a68   104  str x1, [x2]
0x4cd12a6c   108  orr x2, x2, #0x1
0x4cd12a70   112  stur d0, [x2, #7]
0x4cd12a74   116  mov x0, x2
0x4cd12a78   120  ret
0x4cd12a7c   124  sub csp, jssp, #0x10 (16)
0x4cd12a80   128  stp fp, lr, [jssp, #-16]!
0x4cd12a84   132  movz fp, #0xa00000000
0x4cd12a88   136  sub csp, jssp, #0x8 (8)
0x4cd12a8c   140  str fp, [jssp, #-8]!
0x4cd12a90   144  add fp, jssp, #0x8 (8)
0x4cd12a94   148  movz x2, #0x0
0x4cd12a98   152  mov x16, lr
0x4cd12a9c   156  ldr x17, pc+68 (addr 0x000000004cd12ae0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd12aa0   160  blr x17
0x4cd12aa4   164  ldur cp, [fp, #-8]
0x4cd12aa8   168  movz x0, #0x0
0x4cd12aac   172  movz x1, #0x4b48
0x4cd12ab0   176  movk x1, #0xe4, lsl #16
0x4cd12ab4   180  ldr x16, pc+52 (addr 0x000000004cd12ae8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd12ab8   184  blr x16
0x4cd12abc   188  str x0, [jssp, #16]
0x4cd12ac0   192  ldr x16, pc+48 (addr 0x000000004cd12af0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd12ac4   196  blr x16
0x4cd12ac8   200  ldr lr, [jssp, #16]
0x4cd12acc   204  ldp xzr, fp, [jssp], #24
0x4cd12ad0   208  b #-0x60 (addr 0x4cd12a70)
0x4cd12ad4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd12ad8   216  d63f03e0       constant
0x4cd12adc   220  d503201f       constant
0x4cd12ae0   224  4cd06820       constant
0x4cd12ae4   228  00000000       constant
0x4cd12ae8   232  4cd06260       constant
0x4cd12aec   236  00000000       constant
0x4cd12af0   240  4cd068e0       constant
0x4cd12af4   244  00000000       constant
0x4cd12af8   248  movz x16, #0x0
0x4cd12afc   252  sub csp, jssp, #0x10 (16)
0x4cd12b00   256  stp fp, lr, [jssp, #-16]!
0x4cd12b04   260  bl #+0x14 (addr 0x4cd12b18)
0x4cd12b08   264  movz x16, #0x8
0x4cd12b0c   268  sub csp, jssp, #0x10 (16)
0x4cd12b10   272  stp fp, lr, [jssp, #-16]!
0x4cd12b14   276  bl #+0x4 (addr 0x4cd12b18)
0x4cd12b18   280  movz x17, #0xa00000000
0x4cd12b1c   284  sub csp, jssp, #0x10 (16)
0x4cd12b20   288  stp x17, cp, [jssp, #-16]!
0x4cd12b24   292  add fp, jssp, #0x10 (16)
0x4cd12b28   296  ldr x17, pc+24 (addr 0x000000004cd12b40)    ;; lazy deoptimization bailout 0
0x4cd12b2c   300  add x17, x17, x16
0x4cd12b30   304  br x17
0x4cd12b34   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd12b38   312  d63f03e0       constant
0x4cd12b3c   316  d503201f       constant
0x4cd12b40   320  4cb06000       constant
0x4cd12b44   324  00000000       constant


Safepoints (size = 21)
0x4cd12abc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd12a9c  code target (STUB)  (0x4cd06820)
0x4cd12ab4  code target (STUB)  (0x4cd06260)
0x4cd12ac0  code target (STUB)  (0x4cd068e0)
0x4cd12ad4  constant pool (size 36)
0x4cd12b28  runtime entry
0x4cd12b34  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6330
type = NORMAL
name = BinaryOpICStub(DIV:Smi*Number->Number)
compiler = crankshaft
Instructions (size = 349)
0x4cd12a00     0  mov x2, x1
0x4cd12a04     4  tbnz w2, #0, #+0xf4 (addr 0x4cd12af8)
0x4cd12a08     8  tbz w0, #0, #+0x34 (addr 0x4cd12a3c)
0x4cd12a0c    12  ldur x16, [x0, #-1]
0x4cd12a10    16  ldr x17, [x26, #120]
0x4cd12a14    20  cmp x16, x17
0x4cd12a18    24  b.ne #+0xc (addr 0x4cd12a24)
0x4cd12a1c    28  ldur d0, [x0, #7]
0x4cd12a20    32  b #+0x20 (addr 0x4cd12a40)
0x4cd12a24    36  ldr x16, [x26, #40]
0x4cd12a28    40  cmp x0, x16
0x4cd12a2c    44  b.ne #+0xdc (addr 0x4cd12b08)
0x4cd12a30    48  ldr x3, [x26, #928]
0x4cd12a34    52  ldur d0, [x3, #7]
0x4cd12a38    56  b #+0x8 (addr 0x4cd12a40)
0x4cd12a3c    60  scvtf d0, x0, #32
0x4cd12a40    64  scvtf d1, x2, #32
0x4cd12a44    68  fdiv d0, d1, d0
0x4cd12a48    72  movz x1, #0xd2c0
0x4cd12a4c    76  movk x1, #0x166d, lsl #16
0x4cd12a50    80  ldp x2, x0, [x1]
0x4cd12a54    84  adds x16, x2, #0x10 (16)
0x4cd12a58    88  ccmp x16, x0, #nzCv, lo
0x4cd12a5c    92  b.hi #+0x20 (addr 0x4cd12a7c)
0x4cd12a60    96  str x16, [x1]
0x4cd12a64   100  ldr x1, [x26, #120]
0x4cd12a68   104  str x1, [x2]
0x4cd12a6c   108  orr x2, x2, #0x1
0x4cd12a70   112  stur d0, [x2, #7]
0x4cd12a74   116  mov x0, x2
0x4cd12a78   120  ret
0x4cd12a7c   124  sub csp, jssp, #0x10 (16)
0x4cd12a80   128  stp fp, lr, [jssp, #-16]!
0x4cd12a84   132  movz fp, #0xa00000000
0x4cd12a88   136  sub csp, jssp, #0x8 (8)
0x4cd12a8c   140  str fp, [jssp, #-8]!
0x4cd12a90   144  add fp, jssp, #0x8 (8)
0x4cd12a94   148  movz x2, #0x0
0x4cd12a98   152  mov x16, lr
0x4cd12a9c   156  ldr x17, pc+68 (addr 0x000000004cd12ae0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd12aa0   160  blr x17
0x4cd12aa4   164  ldur cp, [fp, #-8]
0x4cd12aa8   168  movz x0, #0x0
0x4cd12aac   172  movz x1, #0x4b48
0x4cd12ab0   176  movk x1, #0xe4, lsl #16
0x4cd12ab4   180  ldr x16, pc+52 (addr 0x000000004cd12ae8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd12ab8   184  blr x16
0x4cd12abc   188  str x0, [jssp, #16]
0x4cd12ac0   192  ldr x16, pc+48 (addr 0x000000004cd12af0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd12ac4   196  blr x16
0x4cd12ac8   200  ldr lr, [jssp, #16]
0x4cd12acc   204  ldp xzr, fp, [jssp], #24
0x4cd12ad0   208  b #-0x60 (addr 0x4cd12a70)
0x4cd12ad4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd12ad8   216  d63f03e0       constant
0x4cd12adc   220  d503201f       constant
0x4cd12ae0   224  4cd06820       constant
0x4cd12ae4   228  00000000       constant
0x4cd12ae8   232  4cd06260       constant
0x4cd12aec   236  00000000       constant
0x4cd12af0   240  4cd068e0       constant
0x4cd12af4   244  00000000       constant
0x4cd12af8   248  movz x16, #0x0
0x4cd12afc   252  sub csp, jssp, #0x10 (16)
0x4cd12b00   256  stp fp, lr, [jssp, #-16]!
0x4cd12b04   260  bl #+0x14 (addr 0x4cd12b18)
0x4cd12b08   264  movz x16, #0x8
0x4cd12b0c   268  sub csp, jssp, #0x10 (16)
0x4cd12b10   272  stp fp, lr, [jssp, #-16]!
0x4cd12b14   276  bl #+0x4 (addr 0x4cd12b18)
0x4cd12b18   280  movz x17, #0xa00000000
0x4cd12b1c   284  sub csp, jssp, #0x10 (16)
0x4cd12b20   288  stp x17, cp, [jssp, #-16]!
0x4cd12b24   292  add fp, jssp, #0x10 (16)
0x4cd12b28   296  ldr x17, pc+24 (addr 0x000000004cd12b40)    ;; lazy deoptimization bailout 0
0x4cd12b2c   300  add x17, x17, x16
0x4cd12b30   304  br x17
0x4cd12b34   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd12b38   312  d63f03e0       constant
0x4cd12b3c   316  d503201f       constant
0x4cd12b40   320  4cb06000       constant
0x4cd12b44   324  00000000       constant


Safepoints (size = 21)
0x4cd12abc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd12a9c  code target (STUB)  (0x4cd06820)
0x4cd12ab4  code target (STUB)  (0x4cd06260)
0x4cd12ac0  code target (STUB)  (0x4cd068e0)
0x4cd12ad4  constant pool (size 36)
0x4cd12b28  runtime entry
0x4cd12b34  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2234
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0x4cd12bc0     0  mov x2, x1
0x4cd12bc4     4  tbnz w2, #0, #+0xc4 (addr 0x4cd12c88)
0x4cd12bc8     8  mov x3, x0
0x4cd12bcc    12  tbnz w3, #0, #+0xcc (addr 0x4cd12c98)
0x4cd12bd0    16  scvtf d0, x2, #32
0x4cd12bd4    20  scvtf d1, x3, #32
0x4cd12bd8    24  fdiv d0, d0, d1
0x4cd12bdc    28  movz x1, #0xd2c0
0x4cd12be0    32  movk x1, #0x166d, lsl #16
0x4cd12be4    36  ldp x2, x0, [x1]
0x4cd12be8    40  adds x16, x2, #0x10 (16)
0x4cd12bec    44  ccmp x16, x0, #nzCv, lo
0x4cd12bf0    48  b.hi #+0x20 (addr 0x4cd12c10)
0x4cd12bf4    52  str x16, [x1]
0x4cd12bf8    56  ldr x1, [x26, #120]
0x4cd12bfc    60  str x1, [x2]
0x4cd12c00    64  orr x2, x2, #0x1
0x4cd12c04    68  stur d0, [x2, #7]
0x4cd12c08    72  mov x0, x2
0x4cd12c0c    76  ret
0x4cd12c10    80  sub csp, jssp, #0x10 (16)
0x4cd12c14    84  stp fp, lr, [jssp, #-16]!
0x4cd12c18    88  movz fp, #0xa00000000
0x4cd12c1c    92  sub csp, jssp, #0x8 (8)
0x4cd12c20    96  str fp, [jssp, #-8]!
0x4cd12c24   100  add fp, jssp, #0x8 (8)
0x4cd12c28   104  movz x2, #0x0
0x4cd12c2c   108  mov x16, lr
0x4cd12c30   112  ldr x17, pc+64 (addr 0x000000004cd12c70)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd12c34   116  blr x17
0x4cd12c38   120  ldur cp, [fp, #-8]
0x4cd12c3c   124  movz x0, #0x0
0x4cd12c40   128  movz x1, #0x4b48
0x4cd12c44   132  movk x1, #0xe4, lsl #16
0x4cd12c48   136  ldr x16, pc+48 (addr 0x000000004cd12c78)    ;; code: STUB, CEntryStub, minor: 5
0x4cd12c4c   140  blr x16
0x4cd12c50   144  str x0, [jssp, #16]
0x4cd12c54   148  ldr x16, pc+44 (addr 0x000000004cd12c80)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd12c58   152  blr x16
0x4cd12c5c   156  ldr lr, [jssp, #16]
0x4cd12c60   160  ldp xzr, fp, [jssp], #24
0x4cd12c64   164  b #-0x60 (addr 0x4cd12c04)
0x4cd12c68   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd12c6c   172  d63f03e0       constant
0x4cd12c70   176  4cd06820       constant
0x4cd12c74   180  00000000       constant
0x4cd12c78   184  4cd06260       constant
0x4cd12c7c   188  00000000       constant
0x4cd12c80   192  4cd068e0       constant
0x4cd12c84   196  00000000       constant
0x4cd12c88   200  movz x16, #0x0
0x4cd12c8c   204  sub csp, jssp, #0x10 (16)
0x4cd12c90   208  stp fp, lr, [jssp, #-16]!
0x4cd12c94   212  bl #+0x14 (addr 0x4cd12ca8)
0x4cd12c98   216  movz x16, #0x8
0x4cd12c9c   220  sub csp, jssp, #0x10 (16)
0x4cd12ca0   224  stp fp, lr, [jssp, #-16]!
0x4cd12ca4   228  bl #+0x4 (addr 0x4cd12ca8)
0x4cd12ca8   232  movz x17, #0xa00000000
0x4cd12cac   236  sub csp, jssp, #0x10 (16)
0x4cd12cb0   240  stp x17, cp, [jssp, #-16]!
0x4cd12cb4   244  add fp, jssp, #0x10 (16)
0x4cd12cb8   248  ldr x17, pc+24 (addr 0x000000004cd12cd0)    ;; lazy deoptimization bailout 0
0x4cd12cbc   252  add x17, x17, x16
0x4cd12cc0   256  br x17
0x4cd12cc4   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd12cc8   264  d63f03e0       constant
0x4cd12ccc   268  d503201f       constant
0x4cd12cd0   272  4cb06000       constant
0x4cd12cd4   276  00000000       constant


Safepoints (size = 21)
0x4cd12c50   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd12c30  code target (STUB)  (0x4cd06820)
0x4cd12c48  code target (STUB)  (0x4cd06260)
0x4cd12c54  code target (STUB)  (0x4cd068e0)
0x4cd12c68  constant pool (size 32)
0x4cd12cb8  runtime entry
0x4cd12cc4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2234
type = NORMAL
name = BinaryOpICStub(DIV:Smi*Smi->Number)
compiler = crankshaft
Instructions (size = 301)
0x4cd12bc0     0  mov x2, x1
0x4cd12bc4     4  tbnz w2, #0, #+0xc4 (addr 0x4cd12c88)
0x4cd12bc8     8  mov x3, x0
0x4cd12bcc    12  tbnz w3, #0, #+0xcc (addr 0x4cd12c98)
0x4cd12bd0    16  scvtf d0, x2, #32
0x4cd12bd4    20  scvtf d1, x3, #32
0x4cd12bd8    24  fdiv d0, d0, d1
0x4cd12bdc    28  movz x1, #0xd2c0
0x4cd12be0    32  movk x1, #0x166d, lsl #16
0x4cd12be4    36  ldp x2, x0, [x1]
0x4cd12be8    40  adds x16, x2, #0x10 (16)
0x4cd12bec    44  ccmp x16, x0, #nzCv, lo
0x4cd12bf0    48  b.hi #+0x20 (addr 0x4cd12c10)
0x4cd12bf4    52  str x16, [x1]
0x4cd12bf8    56  ldr x1, [x26, #120]
0x4cd12bfc    60  str x1, [x2]
0x4cd12c00    64  orr x2, x2, #0x1
0x4cd12c04    68  stur d0, [x2, #7]
0x4cd12c08    72  mov x0, x2
0x4cd12c0c    76  ret
0x4cd12c10    80  sub csp, jssp, #0x10 (16)
0x4cd12c14    84  stp fp, lr, [jssp, #-16]!
0x4cd12c18    88  movz fp, #0xa00000000
0x4cd12c1c    92  sub csp, jssp, #0x8 (8)
0x4cd12c20    96  str fp, [jssp, #-8]!
0x4cd12c24   100  add fp, jssp, #0x8 (8)
0x4cd12c28   104  movz x2, #0x0
0x4cd12c2c   108  mov x16, lr
0x4cd12c30   112  ldr x17, pc+64 (addr 0x000000004cd12c70)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd12c34   116  blr x17
0x4cd12c38   120  ldur cp, [fp, #-8]
0x4cd12c3c   124  movz x0, #0x0
0x4cd12c40   128  movz x1, #0x4b48
0x4cd12c44   132  movk x1, #0xe4, lsl #16
0x4cd12c48   136  ldr x16, pc+48 (addr 0x000000004cd12c78)    ;; code: STUB, CEntryStub, minor: 5
0x4cd12c4c   140  blr x16
0x4cd12c50   144  str x0, [jssp, #16]
0x4cd12c54   148  ldr x16, pc+44 (addr 0x000000004cd12c80)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd12c58   152  blr x16
0x4cd12c5c   156  ldr lr, [jssp, #16]
0x4cd12c60   160  ldp xzr, fp, [jssp], #24
0x4cd12c64   164  b #-0x60 (addr 0x4cd12c04)
0x4cd12c68   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd12c6c   172  d63f03e0       constant
0x4cd12c70   176  4cd06820       constant
0x4cd12c74   180  00000000       constant
0x4cd12c78   184  4cd06260       constant
0x4cd12c7c   188  00000000       constant
0x4cd12c80   192  4cd068e0       constant
0x4cd12c84   196  00000000       constant
0x4cd12c88   200  movz x16, #0x0
0x4cd12c8c   204  sub csp, jssp, #0x10 (16)
0x4cd12c90   208  stp fp, lr, [jssp, #-16]!
0x4cd12c94   212  bl #+0x14 (addr 0x4cd12ca8)
0x4cd12c98   216  movz x16, #0x8
0x4cd12c9c   220  sub csp, jssp, #0x10 (16)
0x4cd12ca0   224  stp fp, lr, [jssp, #-16]!
0x4cd12ca4   228  bl #+0x4 (addr 0x4cd12ca8)
0x4cd12ca8   232  movz x17, #0xa00000000
0x4cd12cac   236  sub csp, jssp, #0x10 (16)
0x4cd12cb0   240  stp x17, cp, [jssp, #-16]!
0x4cd12cb4   244  add fp, jssp, #0x10 (16)
0x4cd12cb8   248  ldr x17, pc+24 (addr 0x000000004cd12cd0)    ;; lazy deoptimization bailout 0
0x4cd12cbc   252  add x17, x17, x16
0x4cd12cc0   256  br x17
0x4cd12cc4   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd12cc8   264  d63f03e0       constant
0x4cd12ccc   268  d503201f       constant
0x4cd12cd0   272  4cb06000       constant
0x4cd12cd4   276  00000000       constant


Safepoints (size = 21)
0x4cd12c50   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd12c30  code target (STUB)  (0x4cd06820)
0x4cd12c48  code target (STUB)  (0x4cd06260)
0x4cd12c54  code target (STUB)  (0x4cd068e0)
0x4cd12c68  constant pool (size 32)
0x4cd12cb8  runtime entry
0x4cd12cc4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2202
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 176)
0x4cd12d60     0  mov x2, x1
0x4cd12d64     4  tbnz w2, #0, #+0x44 (addr 0x4cd12da8)
0x4cd12d68     8  mov x3, x0
0x4cd12d6c    12  tbnz w3, #0, #+0x4c (addr 0x4cd12db8)
0x4cd12d70    16  asr x2, x2, #32
0x4cd12d74    20  asr x3, x3, #32
0x4cd12d78    24  sdiv w5, w2, w3
0x4cd12d7c    28  cbz w3, #+0x4c (addr 0x4cd12dc8)
0x4cd12d80    32  cmp w3, #0x0 (0)
0x4cd12d84    36  ccmp w2, #0, #nzcv, mi
0x4cd12d88    40  b.eq #+0x40 (addr 0x4cd12dc8)
0x4cd12d8c    44  cmp w2, #0x1 (1)
0x4cd12d90    48  ccmn w3, #1, #nzcv, vs
0x4cd12d94    52  b.eq #+0x34 (addr 0x4cd12dc8)
0x4cd12d98    56  msub w4, w5, w3, w2
0x4cd12d9c    60  cbnz w4, #+0x2c (addr 0x4cd12dc8)
0x4cd12da0    64  lsl x0, x5, #32
0x4cd12da4    68  ret
0x4cd12da8    72  movz x16, #0x0
0x4cd12dac    76  sub csp, jssp, #0x10 (16)
0x4cd12db0    80  stp fp, lr, [jssp, #-16]!
0x4cd12db4    84  bl #+0x24 (addr 0x4cd12dd8)
0x4cd12db8    88  movz x16, #0x8
0x4cd12dbc    92  sub csp, jssp, #0x10 (16)
0x4cd12dc0    96  stp fp, lr, [jssp, #-16]!
0x4cd12dc4   100  bl #+0x14 (addr 0x4cd12dd8)
0x4cd12dc8   104  movz x16, #0x10
0x4cd12dcc   108  sub csp, jssp, #0x10 (16)
0x4cd12dd0   112  stp fp, lr, [jssp, #-16]!
0x4cd12dd4   116  bl #+0x4 (addr 0x4cd12dd8)
0x4cd12dd8   120  movz x17, #0xa00000000
0x4cd12ddc   124  sub csp, jssp, #0x10 (16)
0x4cd12de0   128  stp x17, cp, [jssp, #-16]!
0x4cd12de4   132  add fp, jssp, #0x10 (16)
0x4cd12de8   136  ldr x17, pc+24 (addr 0x000000004cd12e00)    ;; lazy deoptimization bailout 0
0x4cd12dec   140  add x17, x17, x16
0x4cd12df0   144  br x17
0x4cd12df4   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd12df8   152  d63f03e0       constant
0x4cd12dfc   156  d503201f       constant
0x4cd12e00   160  4cb06000       constant
0x4cd12e04   164  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd12de8  runtime entry
0x4cd12df4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2202
type = NORMAL
name = BinaryOpICStub(DIV:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 176)
0x4cd12d60     0  mov x2, x1
0x4cd12d64     4  tbnz w2, #0, #+0x44 (addr 0x4cd12da8)
0x4cd12d68     8  mov x3, x0
0x4cd12d6c    12  tbnz w3, #0, #+0x4c (addr 0x4cd12db8)
0x4cd12d70    16  asr x2, x2, #32
0x4cd12d74    20  asr x3, x3, #32
0x4cd12d78    24  sdiv w5, w2, w3
0x4cd12d7c    28  cbz w3, #+0x4c (addr 0x4cd12dc8)
0x4cd12d80    32  cmp w3, #0x0 (0)
0x4cd12d84    36  ccmp w2, #0, #nzcv, mi
0x4cd12d88    40  b.eq #+0x40 (addr 0x4cd12dc8)
0x4cd12d8c    44  cmp w2, #0x1 (1)
0x4cd12d90    48  ccmn w3, #1, #nzcv, vs
0x4cd12d94    52  b.eq #+0x34 (addr 0x4cd12dc8)
0x4cd12d98    56  msub w4, w5, w3, w2
0x4cd12d9c    60  cbnz w4, #+0x2c (addr 0x4cd12dc8)
0x4cd12da0    64  lsl x0, x5, #32
0x4cd12da4    68  ret
0x4cd12da8    72  movz x16, #0x0
0x4cd12dac    76  sub csp, jssp, #0x10 (16)
0x4cd12db0    80  stp fp, lr, [jssp, #-16]!
0x4cd12db4    84  bl #+0x24 (addr 0x4cd12dd8)
0x4cd12db8    88  movz x16, #0x8
0x4cd12dbc    92  sub csp, jssp, #0x10 (16)
0x4cd12dc0    96  stp fp, lr, [jssp, #-16]!
0x4cd12dc4   100  bl #+0x14 (addr 0x4cd12dd8)
0x4cd12dc8   104  movz x16, #0x10
0x4cd12dcc   108  sub csp, jssp, #0x10 (16)
0x4cd12dd0   112  stp fp, lr, [jssp, #-16]!
0x4cd12dd4   116  bl #+0x4 (addr 0x4cd12dd8)
0x4cd12dd8   120  movz x17, #0xa00000000
0x4cd12ddc   124  sub csp, jssp, #0x10 (16)
0x4cd12de0   128  stp x17, cp, [jssp, #-16]!
0x4cd12de4   132  add fp, jssp, #0x10 (16)
0x4cd12de8   136  ldr x17, pc+24 (addr 0x000000004cd12e00)    ;; lazy deoptimization bailout 0
0x4cd12dec   140  add x17, x17, x16
0x4cd12df0   144  br x17
0x4cd12df4   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd12df8   152  d63f03e0       constant
0x4cd12dfc   156  d503201f       constant
0x4cd12e00   160  4cb06000       constant
0x4cd12e04   164  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd12de8  runtime entry
0x4cd12df4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2491
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0x4cd12e80     0  movz x16, #0xa00000000
0x4cd12e84     4  sub csp, jssp, #0x10 (16)
0x4cd12e88     8  stp fp, lr, [jssp, #-16]!
0x4cd12e8c    12  mov fp, jssp
0x4cd12e90    16  sub csp, jssp, #0x20 (32)
0x4cd12e94    20  sub jssp, jssp, #0x20 (32)
0x4cd12e98    24  stur x16, [fp, #-8]
0x4cd12e9c    28  str x1, [jssp, #16]
0x4cd12ea0    32  str x0, [jssp, #8]
0x4cd12ea4    36  str cp, [jssp]
0x4cd12ea8    40  mov x3, cp
0x4cd12eac    44  mov x2, x0
0x4cd12eb0    48  tbnz w2, #0, #+0xe8 (addr 0x4cd12f98)
0x4cd12eb4    52  tbz w1, #0, #+0x34 (addr 0x4cd12ee8)
0x4cd12eb8    56  ldur x16, [x1, #-1]
0x4cd12ebc    60  ldr x17, [x26, #120]
0x4cd12ec0    64  cmp x16, x17
0x4cd12ec4    68  b.ne #+0xc (addr 0x4cd12ed0)
0x4cd12ec8    72  ldur d0, [x1, #7]
0x4cd12ecc    76  b #+0x20 (addr 0x4cd12eec)
0x4cd12ed0    80  ldr x16, [x26, #40]
0x4cd12ed4    84  cmp x1, x16
0x4cd12ed8    88  b.ne #+0xc8 (addr 0x4cd12fa0)
0x4cd12edc    92  ldr x4, [x26, #928]
0x4cd12ee0    96  ldur d0, [x4, #7]
0x4cd12ee4   100  b #+0x8 (addr 0x4cd12eec)
0x4cd12ee8   104  scvtf d0, x1, #32
0x4cd12eec   108  scvtf d1, x2, #32
0x4cd12ef0   112  movz x16, #0x4c40
0x4cd12ef4   116  movk x16, #0x9c, lsl #16
0x4cd12ef8   120  and csp, jssp, #0xfffffffffffffff0
0x4cd12efc   124  blr x16
0x4cd12f00   128  movz x1, #0xd2c0
0x4cd12f04   132  movk x1, #0x166d, lsl #16
0x4cd12f08   136  ldp x2, x0, [x1]
0x4cd12f0c   140  adds x16, x2, #0x10 (16)
0x4cd12f10   144  ccmp x16, x0, #nzCv, lo
0x4cd12f14   148  b.hi #+0x2c (addr 0x4cd12f40)
0x4cd12f18   152  str x16, [x1]
0x4cd12f1c   156  ldr x1, [x26, #120]
0x4cd12f20   160  str x1, [x2]
0x4cd12f24   164  orr x2, x2, #0x1
0x4cd12f28   168  stur d0, [x2, #7]
0x4cd12f2c   172  mov x0, x2
0x4cd12f30   176  ldr cp, [jssp]
0x4cd12f34   180  mov jssp, fp
0x4cd12f38   184  ldp fp, lr, [jssp], #16
0x4cd12f3c   188  ret
0x4cd12f40   192  movz x2, #0x0
0x4cd12f44   196  mov x16, lr
0x4cd12f48   200  ldr x17, pc+56 (addr 0x000000004cd12f80)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd12f4c   204  blr x17
0x4cd12f50   208  ldur cp, [fp, #-8]
0x4cd12f54   212  movz x0, #0x0
0x4cd12f58   216  movz x1, #0x4b48
0x4cd12f5c   220  movk x1, #0xe4, lsl #16
0x4cd12f60   224  ldr x16, pc+40 (addr 0x000000004cd12f88)    ;; code: STUB, CEntryStub, minor: 5
0x4cd12f64   228  blr x16
0x4cd12f68   232  str x0, [jssp, #16]
0x4cd12f6c   236  ldr x16, pc+36 (addr 0x000000004cd12f90)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd12f70   240  blr x16
0x4cd12f74   244  b #-0x4c (addr 0x4cd12f28)
0x4cd12f78   248  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd12f7c   252  d63f03e0       constant
0x4cd12f80   256  4cd06820       constant
0x4cd12f84   260  00000000       constant
0x4cd12f88   264  4cd06260       constant
0x4cd12f8c   268  00000000       constant
0x4cd12f90   272  4cd068e0       constant
0x4cd12f94   276  00000000       constant
0x4cd12f98   280  movz x16, #0x0
0x4cd12f9c   284  bl #+0xc (addr 0x4cd12fa8)
0x4cd12fa0   288  movz x16, #0x8
0x4cd12fa4   292  bl #+0x4 (addr 0x4cd12fa8)
0x4cd12fa8   296  ldr x17, pc+24 (addr 0x000000004cd12fc0)    ;; lazy deoptimization bailout 0
0x4cd12fac   300  add x17, x17, x16
0x4cd12fb0   304  br x17
0x4cd12fb4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd12fb8   312  d63f03e0       constant
0x4cd12fbc   316  d503201f       constant
0x4cd12fc0   320  4cb06000       constant
0x4cd12fc4   324  00000000       constant


Safepoints (size = 21)
0x4cd12f68   232  100000 | x2 (sp -> fp)  <none>

RelocInfo (size = 19)
0x4cd12f48  code target (STUB)  (0x4cd06820)
0x4cd12f60  code target (STUB)  (0x4cd06260)
0x4cd12f6c  code target (STUB)  (0x4cd068e0)
0x4cd12f78  constant pool (size 32)
0x4cd12fa8  runtime entry
0x4cd12fb4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2491
type = NORMAL
name = BinaryOpICStub(MOD:Number*Smi->Number)
compiler = crankshaft
Instructions (size = 349)
0x4cd12e80     0  movz x16, #0xa00000000
0x4cd12e84     4  sub csp, jssp, #0x10 (16)
0x4cd12e88     8  stp fp, lr, [jssp, #-16]!
0x4cd12e8c    12  mov fp, jssp
0x4cd12e90    16  sub csp, jssp, #0x20 (32)
0x4cd12e94    20  sub jssp, jssp, #0x20 (32)
0x4cd12e98    24  stur x16, [fp, #-8]
0x4cd12e9c    28  str x1, [jssp, #16]
0x4cd12ea0    32  str x0, [jssp, #8]
0x4cd12ea4    36  str cp, [jssp]
0x4cd12ea8    40  mov x3, cp
0x4cd12eac    44  mov x2, x0
0x4cd12eb0    48  tbnz w2, #0, #+0xe8 (addr 0x4cd12f98)
0x4cd12eb4    52  tbz w1, #0, #+0x34 (addr 0x4cd12ee8)
0x4cd12eb8    56  ldur x16, [x1, #-1]
0x4cd12ebc    60  ldr x17, [x26, #120]
0x4cd12ec0    64  cmp x16, x17
0x4cd12ec4    68  b.ne #+0xc (addr 0x4cd12ed0)
0x4cd12ec8    72  ldur d0, [x1, #7]
0x4cd12ecc    76  b #+0x20 (addr 0x4cd12eec)
0x4cd12ed0    80  ldr x16, [x26, #40]
0x4cd12ed4    84  cmp x1, x16
0x4cd12ed8    88  b.ne #+0xc8 (addr 0x4cd12fa0)
0x4cd12edc    92  ldr x4, [x26, #928]
0x4cd12ee0    96  ldur d0, [x4, #7]
0x4cd12ee4   100  b #+0x8 (addr 0x4cd12eec)
0x4cd12ee8   104  scvtf d0, x1, #32
0x4cd12eec   108  scvtf d1, x2, #32
0x4cd12ef0   112  movz x16, #0x4c40
0x4cd12ef4   116  movk x16, #0x9c, lsl #16
0x4cd12ef8   120  and csp, jssp, #0xfffffffffffffff0
0x4cd12efc   124  blr x16
0x4cd12f00   128  movz x1, #0xd2c0
0x4cd12f04   132  movk x1, #0x166d, lsl #16
0x4cd12f08   136  ldp x2, x0, [x1]
0x4cd12f0c   140  adds x16, x2, #0x10 (16)
0x4cd12f10   144  ccmp x16, x0, #nzCv, lo
0x4cd12f14   148  b.hi #+0x2c (addr 0x4cd12f40)
0x4cd12f18   152  str x16, [x1]
0x4cd12f1c   156  ldr x1, [x26, #120]
0x4cd12f20   160  str x1, [x2]
0x4cd12f24   164  orr x2, x2, #0x1
0x4cd12f28   168  stur d0, [x2, #7]
0x4cd12f2c   172  mov x0, x2
0x4cd12f30   176  ldr cp, [jssp]
0x4cd12f34   180  mov jssp, fp
0x4cd12f38   184  ldp fp, lr, [jssp], #16
0x4cd12f3c   188  ret
0x4cd12f40   192  movz x2, #0x0
0x4cd12f44   196  mov x16, lr
0x4cd12f48   200  ldr x17, pc+56 (addr 0x000000004cd12f80)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd12f4c   204  blr x17
0x4cd12f50   208  ldur cp, [fp, #-8]
0x4cd12f54   212  movz x0, #0x0
0x4cd12f58   216  movz x1, #0x4b48
0x4cd12f5c   220  movk x1, #0xe4, lsl #16
0x4cd12f60   224  ldr x16, pc+40 (addr 0x000000004cd12f88)    ;; code: STUB, CEntryStub, minor: 5
0x4cd12f64   228  blr x16
0x4cd12f68   232  str x0, [jssp, #16]
0x4cd12f6c   236  ldr x16, pc+36 (addr 0x000000004cd12f90)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd12f70   240  blr x16
0x4cd12f74   244  b #-0x4c (addr 0x4cd12f28)
0x4cd12f78   248  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd12f7c   252  d63f03e0       constant
0x4cd12f80   256  4cd06820       constant
0x4cd12f84   260  00000000       constant
0x4cd12f88   264  4cd06260       constant
0x4cd12f8c   268  00000000       constant
0x4cd12f90   272  4cd068e0       constant
0x4cd12f94   276  00000000       constant
0x4cd12f98   280  movz x16, #0x0
0x4cd12f9c   284  bl #+0xc (addr 0x4cd12fa8)
0x4cd12fa0   288  movz x16, #0x8
0x4cd12fa4   292  bl #+0x4 (addr 0x4cd12fa8)
0x4cd12fa8   296  ldr x17, pc+24 (addr 0x000000004cd12fc0)    ;; lazy deoptimization bailout 0
0x4cd12fac   300  add x17, x17, x16
0x4cd12fb0   304  br x17
0x4cd12fb4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd12fb8   312  d63f03e0       constant
0x4cd12fbc   316  d503201f       constant
0x4cd12fc0   320  4cb06000       constant
0x4cd12fc4   324  00000000       constant


Safepoints (size = 21)
0x4cd12f68   232  100000 | x2 (sp -> fp)  <none>

RelocInfo (size = 19)
0x4cd12f48  code target (STUB)  (0x4cd06820)
0x4cd12f60  code target (STUB)  (0x4cd06260)
0x4cd12f6c  code target (STUB)  (0x4cd068e0)
0x4cd12f78  constant pool (size 32)
0x4cd12fa8  runtime entry
0x4cd12fb4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2203
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 152)
0x4cd13040     0  mov x2, x1
0x4cd13044     4  tbnz w2, #0, #+0x30 (addr 0x4cd13074)
0x4cd13048     8  mov x3, x0
0x4cd1304c    12  tbnz w3, #0, #+0x38 (addr 0x4cd13084)
0x4cd13050    16  asr x2, x2, #32
0x4cd13054    20  asr x3, x3, #32
0x4cd13058    24  sdiv w4, w2, w3
0x4cd1305c    28  cbz w3, #+0x38 (addr 0x4cd13094)
0x4cd13060    32  msub w4, w4, w3, w2
0x4cd13064    36  cbnz w4, #+0x8 (addr 0x4cd1306c)
0x4cd13068    40  tbnz w2, #31, #+0x2c (addr 0x4cd13094)
0x4cd1306c    44  lsl x0, x4, #32
0x4cd13070    48  ret
0x4cd13074    52  movz x16, #0x0
0x4cd13078    56  sub csp, jssp, #0x10 (16)
0x4cd1307c    60  stp fp, lr, [jssp, #-16]!
0x4cd13080    64  bl #+0x24 (addr 0x4cd130a4)
0x4cd13084    68  movz x16, #0x8
0x4cd13088    72  sub csp, jssp, #0x10 (16)
0x4cd1308c    76  stp fp, lr, [jssp, #-16]!
0x4cd13090    80  bl #+0x14 (addr 0x4cd130a4)
0x4cd13094    84  movz x16, #0x10
0x4cd13098    88  sub csp, jssp, #0x10 (16)
0x4cd1309c    92  stp fp, lr, [jssp, #-16]!
0x4cd130a0    96  bl #+0x4 (addr 0x4cd130a4)
0x4cd130a4   100  movz x17, #0xa00000000
0x4cd130a8   104  sub csp, jssp, #0x10 (16)
0x4cd130ac   108  stp x17, cp, [jssp, #-16]!
0x4cd130b0   112  add fp, jssp, #0x10 (16)
0x4cd130b4   116  ldr x17, pc+20 (addr 0x000000004cd130c8)    ;; lazy deoptimization bailout 0
0x4cd130b8   120  add x17, x17, x16
0x4cd130bc   124  br x17
0x4cd130c0   128  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd130c4   132  d63f03e0       constant
0x4cd130c8   136  4cb06000       constant
0x4cd130cc   140  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd130b4  runtime entry
0x4cd130c0  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2203
type = NORMAL
name = BinaryOpICStub(MOD:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 152)
0x4cd13040     0  mov x2, x1
0x4cd13044     4  tbnz w2, #0, #+0x30 (addr 0x4cd13074)
0x4cd13048     8  mov x3, x0
0x4cd1304c    12  tbnz w3, #0, #+0x38 (addr 0x4cd13084)
0x4cd13050    16  asr x2, x2, #32
0x4cd13054    20  asr x3, x3, #32
0x4cd13058    24  sdiv w4, w2, w3
0x4cd1305c    28  cbz w3, #+0x38 (addr 0x4cd13094)
0x4cd13060    32  msub w4, w4, w3, w2
0x4cd13064    36  cbnz w4, #+0x8 (addr 0x4cd1306c)
0x4cd13068    40  tbnz w2, #31, #+0x2c (addr 0x4cd13094)
0x4cd1306c    44  lsl x0, x4, #32
0x4cd13070    48  ret
0x4cd13074    52  movz x16, #0x0
0x4cd13078    56  sub csp, jssp, #0x10 (16)
0x4cd1307c    60  stp fp, lr, [jssp, #-16]!
0x4cd13080    64  bl #+0x24 (addr 0x4cd130a4)
0x4cd13084    68  movz x16, #0x8
0x4cd13088    72  sub csp, jssp, #0x10 (16)
0x4cd1308c    76  stp fp, lr, [jssp, #-16]!
0x4cd13090    80  bl #+0x14 (addr 0x4cd130a4)
0x4cd13094    84  movz x16, #0x10
0x4cd13098    88  sub csp, jssp, #0x10 (16)
0x4cd1309c    92  stp fp, lr, [jssp, #-16]!
0x4cd130a0    96  bl #+0x4 (addr 0x4cd130a4)
0x4cd130a4   100  movz x17, #0xa00000000
0x4cd130a8   104  sub csp, jssp, #0x10 (16)
0x4cd130ac   108  stp x17, cp, [jssp, #-16]!
0x4cd130b0   112  add fp, jssp, #0x10 (16)
0x4cd130b4   116  ldr x17, pc+20 (addr 0x000000004cd130c8)    ;; lazy deoptimization bailout 0
0x4cd130b8   120  add x17, x17, x16
0x4cd130bc   124  br x17
0x4cd130c0   128  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd130c4   132  d63f03e0       constant
0x4cd130c8   136  4cb06000       constant
0x4cd130cc   140  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd130b4  runtime entry
0x4cd130c0  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4393
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 160)
0x4cd13140     0  mov x2, x1
0x4cd13144     4  tbnz w2, #0, #+0x34 (addr 0x4cd13178)
0x4cd13148     8  mov x3, x0
0x4cd1314c    12  tbnz w3, #0, #+0x3c (addr 0x4cd13188)
0x4cd13150    16  cmp x3, #0x0 (0)
0x4cd13154    20  ccmp x2, #0, #nZcv, ne
0x4cd13158    24  ccmn x3, x2, #nzcv, eq
0x4cd1315c    28  b.mi #+0x3c (addr 0x4cd13198)
0x4cd13160    32  smulh x2, x3, x2
0x4cd13164    36  cmp x2, w2, sxtw
0x4cd13168    40  lsl x2, x2, #32
0x4cd1316c    44  b.ne #+0x2c (addr 0x4cd13198)
0x4cd13170    48  mov x0, x2
0x4cd13174    52  ret
0x4cd13178    56  movz x16, #0x0
0x4cd1317c    60  sub csp, jssp, #0x10 (16)
0x4cd13180    64  stp fp, lr, [jssp, #-16]!
0x4cd13184    68  bl #+0x24 (addr 0x4cd131a8)
0x4cd13188    72  movz x16, #0x8
0x4cd1318c    76  sub csp, jssp, #0x10 (16)
0x4cd13190    80  stp fp, lr, [jssp, #-16]!
0x4cd13194    84  bl #+0x14 (addr 0x4cd131a8)
0x4cd13198    88  movz x16, #0x10
0x4cd1319c    92  sub csp, jssp, #0x10 (16)
0x4cd131a0    96  stp fp, lr, [jssp, #-16]!
0x4cd131a4   100  bl #+0x4 (addr 0x4cd131a8)
0x4cd131a8   104  movz x17, #0xa00000000
0x4cd131ac   108  sub csp, jssp, #0x10 (16)
0x4cd131b0   112  stp x17, cp, [jssp, #-16]!
0x4cd131b4   116  add fp, jssp, #0x10 (16)
0x4cd131b8   120  ldr x17, pc+24 (addr 0x000000004cd131d0)    ;; lazy deoptimization bailout 0
0x4cd131bc   124  add x17, x17, x16
0x4cd131c0   128  br x17
0x4cd131c4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd131c8   136  d63f03e0       constant
0x4cd131cc   140  d503201f       constant
0x4cd131d0   144  4cb06000       constant
0x4cd131d4   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd131b8  runtime entry
0x4cd131c4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4393
type = NORMAL
name = BinaryOpICStub(MUL:Int32*Int32->Int32)
compiler = crankshaft
Instructions (size = 160)
0x4cd13140     0  mov x2, x1
0x4cd13144     4  tbnz w2, #0, #+0x34 (addr 0x4cd13178)
0x4cd13148     8  mov x3, x0
0x4cd1314c    12  tbnz w3, #0, #+0x3c (addr 0x4cd13188)
0x4cd13150    16  cmp x3, #0x0 (0)
0x4cd13154    20  ccmp x2, #0, #nZcv, ne
0x4cd13158    24  ccmn x3, x2, #nzcv, eq
0x4cd1315c    28  b.mi #+0x3c (addr 0x4cd13198)
0x4cd13160    32  smulh x2, x3, x2
0x4cd13164    36  cmp x2, w2, sxtw
0x4cd13168    40  lsl x2, x2, #32
0x4cd1316c    44  b.ne #+0x2c (addr 0x4cd13198)
0x4cd13170    48  mov x0, x2
0x4cd13174    52  ret
0x4cd13178    56  movz x16, #0x0
0x4cd1317c    60  sub csp, jssp, #0x10 (16)
0x4cd13180    64  stp fp, lr, [jssp, #-16]!
0x4cd13184    68  bl #+0x24 (addr 0x4cd131a8)
0x4cd13188    72  movz x16, #0x8
0x4cd1318c    76  sub csp, jssp, #0x10 (16)
0x4cd13190    80  stp fp, lr, [jssp, #-16]!
0x4cd13194    84  bl #+0x14 (addr 0x4cd131a8)
0x4cd13198    88  movz x16, #0x10
0x4cd1319c    92  sub csp, jssp, #0x10 (16)
0x4cd131a0    96  stp fp, lr, [jssp, #-16]!
0x4cd131a4   100  bl #+0x4 (addr 0x4cd131a8)
0x4cd131a8   104  movz x17, #0xa00000000
0x4cd131ac   108  sub csp, jssp, #0x10 (16)
0x4cd131b0   112  stp x17, cp, [jssp, #-16]!
0x4cd131b4   116  add fp, jssp, #0x10 (16)
0x4cd131b8   120  ldr x17, pc+24 (addr 0x000000004cd131d0)    ;; lazy deoptimization bailout 0
0x4cd131bc   124  add x17, x17, x16
0x4cd131c0   128  br x17
0x4cd131c4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd131c8   136  d63f03e0       constant
0x4cd131cc   140  d503201f       constant
0x4cd131d0   144  4cb06000       constant
0x4cd131d4   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd131b8  runtime entry
0x4cd131c4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4409
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0x4cd13240     0  mov x2, x1
0x4cd13244     4  tbnz w2, #0, #+0xc4 (addr 0x4cd13308)
0x4cd13248     8  mov x3, x0
0x4cd1324c    12  tbnz w3, #0, #+0xcc (addr 0x4cd13318)
0x4cd13250    16  scvtf d0, x2, #32
0x4cd13254    20  scvtf d1, x3, #32
0x4cd13258    24  fmul d0, d0, d1
0x4cd1325c    28  movz x1, #0xd2c0
0x4cd13260    32  movk x1, #0x166d, lsl #16
0x4cd13264    36  ldp x2, x0, [x1]
0x4cd13268    40  adds x16, x2, #0x10 (16)
0x4cd1326c    44  ccmp x16, x0, #nzCv, lo
0x4cd13270    48  b.hi #+0x20 (addr 0x4cd13290)
0x4cd13274    52  str x16, [x1]
0x4cd13278    56  ldr x1, [x26, #120]
0x4cd1327c    60  str x1, [x2]
0x4cd13280    64  orr x2, x2, #0x1
0x4cd13284    68  stur d0, [x2, #7]
0x4cd13288    72  mov x0, x2
0x4cd1328c    76  ret
0x4cd13290    80  sub csp, jssp, #0x10 (16)
0x4cd13294    84  stp fp, lr, [jssp, #-16]!
0x4cd13298    88  movz fp, #0xa00000000
0x4cd1329c    92  sub csp, jssp, #0x8 (8)
0x4cd132a0    96  str fp, [jssp, #-8]!
0x4cd132a4   100  add fp, jssp, #0x8 (8)
0x4cd132a8   104  movz x2, #0x0
0x4cd132ac   108  mov x16, lr
0x4cd132b0   112  ldr x17, pc+64 (addr 0x000000004cd132f0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd132b4   116  blr x17
0x4cd132b8   120  ldur cp, [fp, #-8]
0x4cd132bc   124  movz x0, #0x0
0x4cd132c0   128  movz x1, #0x4b48
0x4cd132c4   132  movk x1, #0xe4, lsl #16
0x4cd132c8   136  ldr x16, pc+48 (addr 0x000000004cd132f8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd132cc   140  blr x16
0x4cd132d0   144  str x0, [jssp, #16]
0x4cd132d4   148  ldr x16, pc+44 (addr 0x000000004cd13300)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd132d8   152  blr x16
0x4cd132dc   156  ldr lr, [jssp, #16]
0x4cd132e0   160  ldp xzr, fp, [jssp], #24
0x4cd132e4   164  b #-0x60 (addr 0x4cd13284)
0x4cd132e8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd132ec   172  d63f03e0       constant
0x4cd132f0   176  4cd06820       constant
0x4cd132f4   180  00000000       constant
0x4cd132f8   184  4cd06260       constant
0x4cd132fc   188  00000000       constant
0x4cd13300   192  4cd068e0       constant
0x4cd13304   196  00000000       constant
0x4cd13308   200  movz x16, #0x0
0x4cd1330c   204  sub csp, jssp, #0x10 (16)
0x4cd13310   208  stp fp, lr, [jssp, #-16]!
0x4cd13314   212  bl #+0x14 (addr 0x4cd13328)
0x4cd13318   216  movz x16, #0x8
0x4cd1331c   220  sub csp, jssp, #0x10 (16)
0x4cd13320   224  stp fp, lr, [jssp, #-16]!
0x4cd13324   228  bl #+0x4 (addr 0x4cd13328)
0x4cd13328   232  movz x17, #0xa00000000
0x4cd1332c   236  sub csp, jssp, #0x10 (16)
0x4cd13330   240  stp x17, cp, [jssp, #-16]!
0x4cd13334   244  add fp, jssp, #0x10 (16)
0x4cd13338   248  ldr x17, pc+24 (addr 0x000000004cd13350)    ;; lazy deoptimization bailout 0
0x4cd1333c   252  add x17, x17, x16
0x4cd13340   256  br x17
0x4cd13344   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd13348   264  d63f03e0       constant
0x4cd1334c   268  d503201f       constant
0x4cd13350   272  4cb06000       constant
0x4cd13354   276  00000000       constant


Safepoints (size = 21)
0x4cd132d0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd132b0  code target (STUB)  (0x4cd06820)
0x4cd132c8  code target (STUB)  (0x4cd06260)
0x4cd132d4  code target (STUB)  (0x4cd068e0)
0x4cd132e8  constant pool (size 32)
0x4cd13338  runtime entry
0x4cd13344  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4409
type = NORMAL
name = BinaryOpICStub(MUL:Int32*Int32->Number)
compiler = crankshaft
Instructions (size = 301)
0x4cd13240     0  mov x2, x1
0x4cd13244     4  tbnz w2, #0, #+0xc4 (addr 0x4cd13308)
0x4cd13248     8  mov x3, x0
0x4cd1324c    12  tbnz w3, #0, #+0xcc (addr 0x4cd13318)
0x4cd13250    16  scvtf d0, x2, #32
0x4cd13254    20  scvtf d1, x3, #32
0x4cd13258    24  fmul d0, d0, d1
0x4cd1325c    28  movz x1, #0xd2c0
0x4cd13260    32  movk x1, #0x166d, lsl #16
0x4cd13264    36  ldp x2, x0, [x1]
0x4cd13268    40  adds x16, x2, #0x10 (16)
0x4cd1326c    44  ccmp x16, x0, #nzCv, lo
0x4cd13270    48  b.hi #+0x20 (addr 0x4cd13290)
0x4cd13274    52  str x16, [x1]
0x4cd13278    56  ldr x1, [x26, #120]
0x4cd1327c    60  str x1, [x2]
0x4cd13280    64  orr x2, x2, #0x1
0x4cd13284    68  stur d0, [x2, #7]
0x4cd13288    72  mov x0, x2
0x4cd1328c    76  ret
0x4cd13290    80  sub csp, jssp, #0x10 (16)
0x4cd13294    84  stp fp, lr, [jssp, #-16]!
0x4cd13298    88  movz fp, #0xa00000000
0x4cd1329c    92  sub csp, jssp, #0x8 (8)
0x4cd132a0    96  str fp, [jssp, #-8]!
0x4cd132a4   100  add fp, jssp, #0x8 (8)
0x4cd132a8   104  movz x2, #0x0
0x4cd132ac   108  mov x16, lr
0x4cd132b0   112  ldr x17, pc+64 (addr 0x000000004cd132f0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd132b4   116  blr x17
0x4cd132b8   120  ldur cp, [fp, #-8]
0x4cd132bc   124  movz x0, #0x0
0x4cd132c0   128  movz x1, #0x4b48
0x4cd132c4   132  movk x1, #0xe4, lsl #16
0x4cd132c8   136  ldr x16, pc+48 (addr 0x000000004cd132f8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd132cc   140  blr x16
0x4cd132d0   144  str x0, [jssp, #16]
0x4cd132d4   148  ldr x16, pc+44 (addr 0x000000004cd13300)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd132d8   152  blr x16
0x4cd132dc   156  ldr lr, [jssp, #16]
0x4cd132e0   160  ldp xzr, fp, [jssp], #24
0x4cd132e4   164  b #-0x60 (addr 0x4cd13284)
0x4cd132e8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd132ec   172  d63f03e0       constant
0x4cd132f0   176  4cd06820       constant
0x4cd132f4   180  00000000       constant
0x4cd132f8   184  4cd06260       constant
0x4cd132fc   188  00000000       constant
0x4cd13300   192  4cd068e0       constant
0x4cd13304   196  00000000       constant
0x4cd13308   200  movz x16, #0x0
0x4cd1330c   204  sub csp, jssp, #0x10 (16)
0x4cd13310   208  stp fp, lr, [jssp, #-16]!
0x4cd13314   212  bl #+0x14 (addr 0x4cd13328)
0x4cd13318   216  movz x16, #0x8
0x4cd1331c   220  sub csp, jssp, #0x10 (16)
0x4cd13320   224  stp fp, lr, [jssp, #-16]!
0x4cd13324   228  bl #+0x4 (addr 0x4cd13328)
0x4cd13328   232  movz x17, #0xa00000000
0x4cd1332c   236  sub csp, jssp, #0x10 (16)
0x4cd13330   240  stp x17, cp, [jssp, #-16]!
0x4cd13334   244  add fp, jssp, #0x10 (16)
0x4cd13338   248  ldr x17, pc+24 (addr 0x000000004cd13350)    ;; lazy deoptimization bailout 0
0x4cd1333c   252  add x17, x17, x16
0x4cd13340   256  br x17
0x4cd13344   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd13348   264  d63f03e0       constant
0x4cd1334c   268  d503201f       constant
0x4cd13350   272  4cb06000       constant
0x4cd13354   276  00000000       constant


Safepoints (size = 21)
0x4cd132d0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd132b0  code target (STUB)  (0x4cd06820)
0x4cd132c8  code target (STUB)  (0x4cd06260)
0x4cd132d4  code target (STUB)  (0x4cd068e0)
0x4cd132e8  constant pool (size 32)
0x4cd13338  runtime entry
0x4cd13344  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6457
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0x4cd133e0     0  mov x2, x1
0x4cd133e4     4  tbnz w2, #0, #+0xf4 (addr 0x4cd134d8)
0x4cd133e8     8  tbz w0, #0, #+0x34 (addr 0x4cd1341c)
0x4cd133ec    12  ldur x16, [x0, #-1]
0x4cd133f0    16  ldr x17, [x26, #120]
0x4cd133f4    20  cmp x16, x17
0x4cd133f8    24  b.ne #+0xc (addr 0x4cd13404)
0x4cd133fc    28  ldur d0, [x0, #7]
0x4cd13400    32  b #+0x20 (addr 0x4cd13420)
0x4cd13404    36  ldr x16, [x26, #40]
0x4cd13408    40  cmp x0, x16
0x4cd1340c    44  b.ne #+0xdc (addr 0x4cd134e8)
0x4cd13410    48  ldr x3, [x26, #928]
0x4cd13414    52  ldur d0, [x3, #7]
0x4cd13418    56  b #+0x8 (addr 0x4cd13420)
0x4cd1341c    60  scvtf d0, x0, #32
0x4cd13420    64  scvtf d1, x2, #32
0x4cd13424    68  fmul d0, d1, d0
0x4cd13428    72  movz x1, #0xd2c0
0x4cd1342c    76  movk x1, #0x166d, lsl #16
0x4cd13430    80  ldp x2, x0, [x1]
0x4cd13434    84  adds x16, x2, #0x10 (16)
0x4cd13438    88  ccmp x16, x0, #nzCv, lo
0x4cd1343c    92  b.hi #+0x20 (addr 0x4cd1345c)
0x4cd13440    96  str x16, [x1]
0x4cd13444   100  ldr x1, [x26, #120]
0x4cd13448   104  str x1, [x2]
0x4cd1344c   108  orr x2, x2, #0x1
0x4cd13450   112  stur d0, [x2, #7]
0x4cd13454   116  mov x0, x2
0x4cd13458   120  ret
0x4cd1345c   124  sub csp, jssp, #0x10 (16)
0x4cd13460   128  stp fp, lr, [jssp, #-16]!
0x4cd13464   132  movz fp, #0xa00000000
0x4cd13468   136  sub csp, jssp, #0x8 (8)
0x4cd1346c   140  str fp, [jssp, #-8]!
0x4cd13470   144  add fp, jssp, #0x8 (8)
0x4cd13474   148  movz x2, #0x0
0x4cd13478   152  mov x16, lr
0x4cd1347c   156  ldr x17, pc+68 (addr 0x000000004cd134c0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd13480   160  blr x17
0x4cd13484   164  ldur cp, [fp, #-8]
0x4cd13488   168  movz x0, #0x0
0x4cd1348c   172  movz x1, #0x4b48
0x4cd13490   176  movk x1, #0xe4, lsl #16
0x4cd13494   180  ldr x16, pc+52 (addr 0x000000004cd134c8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd13498   184  blr x16
0x4cd1349c   188  str x0, [jssp, #16]
0x4cd134a0   192  ldr x16, pc+48 (addr 0x000000004cd134d0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd134a4   196  blr x16
0x4cd134a8   200  ldr lr, [jssp, #16]
0x4cd134ac   204  ldp xzr, fp, [jssp], #24
0x4cd134b0   208  b #-0x60 (addr 0x4cd13450)
0x4cd134b4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd134b8   216  d63f03e0       constant
0x4cd134bc   220  d503201f       constant
0x4cd134c0   224  4cd06820       constant
0x4cd134c4   228  00000000       constant
0x4cd134c8   232  4cd06260       constant
0x4cd134cc   236  00000000       constant
0x4cd134d0   240  4cd068e0       constant
0x4cd134d4   244  00000000       constant
0x4cd134d8   248  movz x16, #0x0
0x4cd134dc   252  sub csp, jssp, #0x10 (16)
0x4cd134e0   256  stp fp, lr, [jssp, #-16]!
0x4cd134e4   260  bl #+0x14 (addr 0x4cd134f8)
0x4cd134e8   264  movz x16, #0x8
0x4cd134ec   268  sub csp, jssp, #0x10 (16)
0x4cd134f0   272  stp fp, lr, [jssp, #-16]!
0x4cd134f4   276  bl #+0x4 (addr 0x4cd134f8)
0x4cd134f8   280  movz x17, #0xa00000000
0x4cd134fc   284  sub csp, jssp, #0x10 (16)
0x4cd13500   288  stp x17, cp, [jssp, #-16]!
0x4cd13504   292  add fp, jssp, #0x10 (16)
0x4cd13508   296  ldr x17, pc+24 (addr 0x000000004cd13520)    ;; lazy deoptimization bailout 0
0x4cd1350c   300  add x17, x17, x16
0x4cd13510   304  br x17
0x4cd13514   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd13518   312  d63f03e0       constant
0x4cd1351c   316  d503201f       constant
0x4cd13520   320  4cb06000       constant
0x4cd13524   324  00000000       constant


Safepoints (size = 21)
0x4cd1349c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd1347c  code target (STUB)  (0x4cd06820)
0x4cd13494  code target (STUB)  (0x4cd06260)
0x4cd134a0  code target (STUB)  (0x4cd068e0)
0x4cd134b4  constant pool (size 36)
0x4cd13508  runtime entry
0x4cd13514  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6457
type = NORMAL
name = BinaryOpICStub(MUL:Int32*Number->Number)
compiler = crankshaft
Instructions (size = 349)
0x4cd133e0     0  mov x2, x1
0x4cd133e4     4  tbnz w2, #0, #+0xf4 (addr 0x4cd134d8)
0x4cd133e8     8  tbz w0, #0, #+0x34 (addr 0x4cd1341c)
0x4cd133ec    12  ldur x16, [x0, #-1]
0x4cd133f0    16  ldr x17, [x26, #120]
0x4cd133f4    20  cmp x16, x17
0x4cd133f8    24  b.ne #+0xc (addr 0x4cd13404)
0x4cd133fc    28  ldur d0, [x0, #7]
0x4cd13400    32  b #+0x20 (addr 0x4cd13420)
0x4cd13404    36  ldr x16, [x26, #40]
0x4cd13408    40  cmp x0, x16
0x4cd1340c    44  b.ne #+0xdc (addr 0x4cd134e8)
0x4cd13410    48  ldr x3, [x26, #928]
0x4cd13414    52  ldur d0, [x3, #7]
0x4cd13418    56  b #+0x8 (addr 0x4cd13420)
0x4cd1341c    60  scvtf d0, x0, #32
0x4cd13420    64  scvtf d1, x2, #32
0x4cd13424    68  fmul d0, d1, d0
0x4cd13428    72  movz x1, #0xd2c0
0x4cd1342c    76  movk x1, #0x166d, lsl #16
0x4cd13430    80  ldp x2, x0, [x1]
0x4cd13434    84  adds x16, x2, #0x10 (16)
0x4cd13438    88  ccmp x16, x0, #nzCv, lo
0x4cd1343c    92  b.hi #+0x20 (addr 0x4cd1345c)
0x4cd13440    96  str x16, [x1]
0x4cd13444   100  ldr x1, [x26, #120]
0x4cd13448   104  str x1, [x2]
0x4cd1344c   108  orr x2, x2, #0x1
0x4cd13450   112  stur d0, [x2, #7]
0x4cd13454   116  mov x0, x2
0x4cd13458   120  ret
0x4cd1345c   124  sub csp, jssp, #0x10 (16)
0x4cd13460   128  stp fp, lr, [jssp, #-16]!
0x4cd13464   132  movz fp, #0xa00000000
0x4cd13468   136  sub csp, jssp, #0x8 (8)
0x4cd1346c   140  str fp, [jssp, #-8]!
0x4cd13470   144  add fp, jssp, #0x8 (8)
0x4cd13474   148  movz x2, #0x0
0x4cd13478   152  mov x16, lr
0x4cd1347c   156  ldr x17, pc+68 (addr 0x000000004cd134c0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd13480   160  blr x17
0x4cd13484   164  ldur cp, [fp, #-8]
0x4cd13488   168  movz x0, #0x0
0x4cd1348c   172  movz x1, #0x4b48
0x4cd13490   176  movk x1, #0xe4, lsl #16
0x4cd13494   180  ldr x16, pc+52 (addr 0x000000004cd134c8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd13498   184  blr x16
0x4cd1349c   188  str x0, [jssp, #16]
0x4cd134a0   192  ldr x16, pc+48 (addr 0x000000004cd134d0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd134a4   196  blr x16
0x4cd134a8   200  ldr lr, [jssp, #16]
0x4cd134ac   204  ldp xzr, fp, [jssp], #24
0x4cd134b0   208  b #-0x60 (addr 0x4cd13450)
0x4cd134b4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd134b8   216  d63f03e0       constant
0x4cd134bc   220  d503201f       constant
0x4cd134c0   224  4cd06820       constant
0x4cd134c4   228  00000000       constant
0x4cd134c8   232  4cd06260       constant
0x4cd134cc   236  00000000       constant
0x4cd134d0   240  4cd068e0       constant
0x4cd134d4   244  00000000       constant
0x4cd134d8   248  movz x16, #0x0
0x4cd134dc   252  sub csp, jssp, #0x10 (16)
0x4cd134e0   256  stp fp, lr, [jssp, #-16]!
0x4cd134e4   260  bl #+0x14 (addr 0x4cd134f8)
0x4cd134e8   264  movz x16, #0x8
0x4cd134ec   268  sub csp, jssp, #0x10 (16)
0x4cd134f0   272  stp fp, lr, [jssp, #-16]!
0x4cd134f4   276  bl #+0x4 (addr 0x4cd134f8)
0x4cd134f8   280  movz x17, #0xa00000000
0x4cd134fc   284  sub csp, jssp, #0x10 (16)
0x4cd13500   288  stp x17, cp, [jssp, #-16]!
0x4cd13504   292  add fp, jssp, #0x10 (16)
0x4cd13508   296  ldr x17, pc+24 (addr 0x000000004cd13520)    ;; lazy deoptimization bailout 0
0x4cd1350c   300  add x17, x17, x16
0x4cd13510   304  br x17
0x4cd13514   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd13518   312  d63f03e0       constant
0x4cd1351c   316  d503201f       constant
0x4cd13520   320  4cb06000       constant
0x4cd13524   324  00000000       constant


Safepoints (size = 21)
0x4cd1349c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd1347c  code target (STUB)  (0x4cd06820)
0x4cd13494  code target (STUB)  (0x4cd06260)
0x4cd134a0  code target (STUB)  (0x4cd068e0)
0x4cd134b4  constant pool (size 36)
0x4cd13508  runtime entry
0x4cd13514  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2345
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 160)
0x4cd135a0     0  mov x2, x1
0x4cd135a4     4  tbnz w2, #0, #+0x34 (addr 0x4cd135d8)
0x4cd135a8     8  mov x3, x0
0x4cd135ac    12  tbnz w3, #0, #+0x3c (addr 0x4cd135e8)
0x4cd135b0    16  cmp x3, #0x0 (0)
0x4cd135b4    20  ccmp x2, #0, #nZcv, ne
0x4cd135b8    24  ccmn x3, x2, #nzcv, eq
0x4cd135bc    28  b.mi #+0x3c (addr 0x4cd135f8)
0x4cd135c0    32  smulh x2, x3, x2
0x4cd135c4    36  cmp x2, w2, sxtw
0x4cd135c8    40  lsl x2, x2, #32
0x4cd135cc    44  b.ne #+0x2c (addr 0x4cd135f8)
0x4cd135d0    48  mov x0, x2
0x4cd135d4    52  ret
0x4cd135d8    56  movz x16, #0x0
0x4cd135dc    60  sub csp, jssp, #0x10 (16)
0x4cd135e0    64  stp fp, lr, [jssp, #-16]!
0x4cd135e4    68  bl #+0x24 (addr 0x4cd13608)
0x4cd135e8    72  movz x16, #0x8
0x4cd135ec    76  sub csp, jssp, #0x10 (16)
0x4cd135f0    80  stp fp, lr, [jssp, #-16]!
0x4cd135f4    84  bl #+0x14 (addr 0x4cd13608)
0x4cd135f8    88  movz x16, #0x10
0x4cd135fc    92  sub csp, jssp, #0x10 (16)
0x4cd13600    96  stp fp, lr, [jssp, #-16]!
0x4cd13604   100  bl #+0x4 (addr 0x4cd13608)
0x4cd13608   104  movz x17, #0xa00000000
0x4cd1360c   108  sub csp, jssp, #0x10 (16)
0x4cd13610   112  stp x17, cp, [jssp, #-16]!
0x4cd13614   116  add fp, jssp, #0x10 (16)
0x4cd13618   120  ldr x17, pc+24 (addr 0x000000004cd13630)    ;; lazy deoptimization bailout 0
0x4cd1361c   124  add x17, x17, x16
0x4cd13620   128  br x17
0x4cd13624   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd13628   136  d63f03e0       constant
0x4cd1362c   140  d503201f       constant
0x4cd13630   144  4cb06000       constant
0x4cd13634   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd13618  runtime entry
0x4cd13624  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2345
type = NORMAL
name = BinaryOpICStub(MUL:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 160)
0x4cd135a0     0  mov x2, x1
0x4cd135a4     4  tbnz w2, #0, #+0x34 (addr 0x4cd135d8)
0x4cd135a8     8  mov x3, x0
0x4cd135ac    12  tbnz w3, #0, #+0x3c (addr 0x4cd135e8)
0x4cd135b0    16  cmp x3, #0x0 (0)
0x4cd135b4    20  ccmp x2, #0, #nZcv, ne
0x4cd135b8    24  ccmn x3, x2, #nzcv, eq
0x4cd135bc    28  b.mi #+0x3c (addr 0x4cd135f8)
0x4cd135c0    32  smulh x2, x3, x2
0x4cd135c4    36  cmp x2, w2, sxtw
0x4cd135c8    40  lsl x2, x2, #32
0x4cd135cc    44  b.ne #+0x2c (addr 0x4cd135f8)
0x4cd135d0    48  mov x0, x2
0x4cd135d4    52  ret
0x4cd135d8    56  movz x16, #0x0
0x4cd135dc    60  sub csp, jssp, #0x10 (16)
0x4cd135e0    64  stp fp, lr, [jssp, #-16]!
0x4cd135e4    68  bl #+0x24 (addr 0x4cd13608)
0x4cd135e8    72  movz x16, #0x8
0x4cd135ec    76  sub csp, jssp, #0x10 (16)
0x4cd135f0    80  stp fp, lr, [jssp, #-16]!
0x4cd135f4    84  bl #+0x14 (addr 0x4cd13608)
0x4cd135f8    88  movz x16, #0x10
0x4cd135fc    92  sub csp, jssp, #0x10 (16)
0x4cd13600    96  stp fp, lr, [jssp, #-16]!
0x4cd13604   100  bl #+0x4 (addr 0x4cd13608)
0x4cd13608   104  movz x17, #0xa00000000
0x4cd1360c   108  sub csp, jssp, #0x10 (16)
0x4cd13610   112  stp x17, cp, [jssp, #-16]!
0x4cd13614   116  add fp, jssp, #0x10 (16)
0x4cd13618   120  ldr x17, pc+24 (addr 0x000000004cd13630)    ;; lazy deoptimization bailout 0
0x4cd1361c   124  add x17, x17, x16
0x4cd13620   128  br x17
0x4cd13624   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd13628   136  d63f03e0       constant
0x4cd1362c   140  d503201f       constant
0x4cd13630   144  4cb06000       constant
0x4cd13634   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd13618  runtime entry
0x4cd13624  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2361
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0x4cd136a0     0  mov x2, x1
0x4cd136a4     4  tbnz w2, #0, #+0xc4 (addr 0x4cd13768)
0x4cd136a8     8  mov x3, x0
0x4cd136ac    12  tbnz w3, #0, #+0xcc (addr 0x4cd13778)
0x4cd136b0    16  scvtf d0, x2, #32
0x4cd136b4    20  scvtf d1, x3, #32
0x4cd136b8    24  fmul d0, d0, d1
0x4cd136bc    28  movz x1, #0xd2c0
0x4cd136c0    32  movk x1, #0x166d, lsl #16
0x4cd136c4    36  ldp x2, x0, [x1]
0x4cd136c8    40  adds x16, x2, #0x10 (16)
0x4cd136cc    44  ccmp x16, x0, #nzCv, lo
0x4cd136d0    48  b.hi #+0x20 (addr 0x4cd136f0)
0x4cd136d4    52  str x16, [x1]
0x4cd136d8    56  ldr x1, [x26, #120]
0x4cd136dc    60  str x1, [x2]
0x4cd136e0    64  orr x2, x2, #0x1
0x4cd136e4    68  stur d0, [x2, #7]
0x4cd136e8    72  mov x0, x2
0x4cd136ec    76  ret
0x4cd136f0    80  sub csp, jssp, #0x10 (16)
0x4cd136f4    84  stp fp, lr, [jssp, #-16]!
0x4cd136f8    88  movz fp, #0xa00000000
0x4cd136fc    92  sub csp, jssp, #0x8 (8)
0x4cd13700    96  str fp, [jssp, #-8]!
0x4cd13704   100  add fp, jssp, #0x8 (8)
0x4cd13708   104  movz x2, #0x0
0x4cd1370c   108  mov x16, lr
0x4cd13710   112  ldr x17, pc+64 (addr 0x000000004cd13750)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd13714   116  blr x17
0x4cd13718   120  ldur cp, [fp, #-8]
0x4cd1371c   124  movz x0, #0x0
0x4cd13720   128  movz x1, #0x4b48
0x4cd13724   132  movk x1, #0xe4, lsl #16
0x4cd13728   136  ldr x16, pc+48 (addr 0x000000004cd13758)    ;; code: STUB, CEntryStub, minor: 5
0x4cd1372c   140  blr x16
0x4cd13730   144  str x0, [jssp, #16]
0x4cd13734   148  ldr x16, pc+44 (addr 0x000000004cd13760)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd13738   152  blr x16
0x4cd1373c   156  ldr lr, [jssp, #16]
0x4cd13740   160  ldp xzr, fp, [jssp], #24
0x4cd13744   164  b #-0x60 (addr 0x4cd136e4)
0x4cd13748   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd1374c   172  d63f03e0       constant
0x4cd13750   176  4cd06820       constant
0x4cd13754   180  00000000       constant
0x4cd13758   184  4cd06260       constant
0x4cd1375c   188  00000000       constant
0x4cd13760   192  4cd068e0       constant
0x4cd13764   196  00000000       constant
0x4cd13768   200  movz x16, #0x0
0x4cd1376c   204  sub csp, jssp, #0x10 (16)
0x4cd13770   208  stp fp, lr, [jssp, #-16]!
0x4cd13774   212  bl #+0x14 (addr 0x4cd13788)
0x4cd13778   216  movz x16, #0x8
0x4cd1377c   220  sub csp, jssp, #0x10 (16)
0x4cd13780   224  stp fp, lr, [jssp, #-16]!
0x4cd13784   228  bl #+0x4 (addr 0x4cd13788)
0x4cd13788   232  movz x17, #0xa00000000
0x4cd1378c   236  sub csp, jssp, #0x10 (16)
0x4cd13790   240  stp x17, cp, [jssp, #-16]!
0x4cd13794   244  add fp, jssp, #0x10 (16)
0x4cd13798   248  ldr x17, pc+24 (addr 0x000000004cd137b0)    ;; lazy deoptimization bailout 0
0x4cd1379c   252  add x17, x17, x16
0x4cd137a0   256  br x17
0x4cd137a4   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd137a8   264  d63f03e0       constant
0x4cd137ac   268  d503201f       constant
0x4cd137b0   272  4cb06000       constant
0x4cd137b4   276  00000000       constant


Safepoints (size = 21)
0x4cd13730   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd13710  code target (STUB)  (0x4cd06820)
0x4cd13728  code target (STUB)  (0x4cd06260)
0x4cd13734  code target (STUB)  (0x4cd068e0)
0x4cd13748  constant pool (size 32)
0x4cd13798  runtime entry
0x4cd137a4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2361
type = NORMAL
name = BinaryOpICStub(MUL:Int32*Smi->Number)
compiler = crankshaft
Instructions (size = 301)
0x4cd136a0     0  mov x2, x1
0x4cd136a4     4  tbnz w2, #0, #+0xc4 (addr 0x4cd13768)
0x4cd136a8     8  mov x3, x0
0x4cd136ac    12  tbnz w3, #0, #+0xcc (addr 0x4cd13778)
0x4cd136b0    16  scvtf d0, x2, #32
0x4cd136b4    20  scvtf d1, x3, #32
0x4cd136b8    24  fmul d0, d0, d1
0x4cd136bc    28  movz x1, #0xd2c0
0x4cd136c0    32  movk x1, #0x166d, lsl #16
0x4cd136c4    36  ldp x2, x0, [x1]
0x4cd136c8    40  adds x16, x2, #0x10 (16)
0x4cd136cc    44  ccmp x16, x0, #nzCv, lo
0x4cd136d0    48  b.hi #+0x20 (addr 0x4cd136f0)
0x4cd136d4    52  str x16, [x1]
0x4cd136d8    56  ldr x1, [x26, #120]
0x4cd136dc    60  str x1, [x2]
0x4cd136e0    64  orr x2, x2, #0x1
0x4cd136e4    68  stur d0, [x2, #7]
0x4cd136e8    72  mov x0, x2
0x4cd136ec    76  ret
0x4cd136f0    80  sub csp, jssp, #0x10 (16)
0x4cd136f4    84  stp fp, lr, [jssp, #-16]!
0x4cd136f8    88  movz fp, #0xa00000000
0x4cd136fc    92  sub csp, jssp, #0x8 (8)
0x4cd13700    96  str fp, [jssp, #-8]!
0x4cd13704   100  add fp, jssp, #0x8 (8)
0x4cd13708   104  movz x2, #0x0
0x4cd1370c   108  mov x16, lr
0x4cd13710   112  ldr x17, pc+64 (addr 0x000000004cd13750)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd13714   116  blr x17
0x4cd13718   120  ldur cp, [fp, #-8]
0x4cd1371c   124  movz x0, #0x0
0x4cd13720   128  movz x1, #0x4b48
0x4cd13724   132  movk x1, #0xe4, lsl #16
0x4cd13728   136  ldr x16, pc+48 (addr 0x000000004cd13758)    ;; code: STUB, CEntryStub, minor: 5
0x4cd1372c   140  blr x16
0x4cd13730   144  str x0, [jssp, #16]
0x4cd13734   148  ldr x16, pc+44 (addr 0x000000004cd13760)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd13738   152  blr x16
0x4cd1373c   156  ldr lr, [jssp, #16]
0x4cd13740   160  ldp xzr, fp, [jssp], #24
0x4cd13744   164  b #-0x60 (addr 0x4cd136e4)
0x4cd13748   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd1374c   172  d63f03e0       constant
0x4cd13750   176  4cd06820       constant
0x4cd13754   180  00000000       constant
0x4cd13758   184  4cd06260       constant
0x4cd1375c   188  00000000       constant
0x4cd13760   192  4cd068e0       constant
0x4cd13764   196  00000000       constant
0x4cd13768   200  movz x16, #0x0
0x4cd1376c   204  sub csp, jssp, #0x10 (16)
0x4cd13770   208  stp fp, lr, [jssp, #-16]!
0x4cd13774   212  bl #+0x14 (addr 0x4cd13788)
0x4cd13778   216  movz x16, #0x8
0x4cd1377c   220  sub csp, jssp, #0x10 (16)
0x4cd13780   224  stp fp, lr, [jssp, #-16]!
0x4cd13784   228  bl #+0x4 (addr 0x4cd13788)
0x4cd13788   232  movz x17, #0xa00000000
0x4cd1378c   236  sub csp, jssp, #0x10 (16)
0x4cd13790   240  stp x17, cp, [jssp, #-16]!
0x4cd13794   244  add fp, jssp, #0x10 (16)
0x4cd13798   248  ldr x17, pc+24 (addr 0x000000004cd137b0)    ;; lazy deoptimization bailout 0
0x4cd1379c   252  add x17, x17, x16
0x4cd137a0   256  br x17
0x4cd137a4   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd137a8   264  d63f03e0       constant
0x4cd137ac   268  d503201f       constant
0x4cd137b0   272  4cb06000       constant
0x4cd137b4   276  00000000       constant


Safepoints (size = 21)
0x4cd13730   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd13710  code target (STUB)  (0x4cd06820)
0x4cd13728  code target (STUB)  (0x4cd06260)
0x4cd13734  code target (STUB)  (0x4cd068e0)
0x4cd13748  constant pool (size 32)
0x4cd13798  runtime entry
0x4cd137a4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4537
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0x4cd13840     0  mov x2, x0
0x4cd13844     4  tbnz w2, #0, #+0xf4 (addr 0x4cd13938)
0x4cd13848     8  tbz w1, #0, #+0x34 (addr 0x4cd1387c)
0x4cd1384c    12  ldur x16, [x1, #-1]
0x4cd13850    16  ldr x17, [x26, #120]
0x4cd13854    20  cmp x16, x17
0x4cd13858    24  b.ne #+0xc (addr 0x4cd13864)
0x4cd1385c    28  ldur d0, [x1, #7]
0x4cd13860    32  b #+0x20 (addr 0x4cd13880)
0x4cd13864    36  ldr x16, [x26, #40]
0x4cd13868    40  cmp x1, x16
0x4cd1386c    44  b.ne #+0xdc (addr 0x4cd13948)
0x4cd13870    48  ldr x3, [x26, #928]
0x4cd13874    52  ldur d0, [x3, #7]
0x4cd13878    56  b #+0x8 (addr 0x4cd13880)
0x4cd1387c    60  scvtf d0, x1, #32
0x4cd13880    64  scvtf d1, x2, #32
0x4cd13884    68  fmul d0, d0, d1
0x4cd13888    72  movz x1, #0xd2c0
0x4cd1388c    76  movk x1, #0x166d, lsl #16
0x4cd13890    80  ldp x2, x0, [x1]
0x4cd13894    84  adds x16, x2, #0x10 (16)
0x4cd13898    88  ccmp x16, x0, #nzCv, lo
0x4cd1389c    92  b.hi #+0x20 (addr 0x4cd138bc)
0x4cd138a0    96  str x16, [x1]
0x4cd138a4   100  ldr x1, [x26, #120]
0x4cd138a8   104  str x1, [x2]
0x4cd138ac   108  orr x2, x2, #0x1
0x4cd138b0   112  stur d0, [x2, #7]
0x4cd138b4   116  mov x0, x2
0x4cd138b8   120  ret
0x4cd138bc   124  sub csp, jssp, #0x10 (16)
0x4cd138c0   128  stp fp, lr, [jssp, #-16]!
0x4cd138c4   132  movz fp, #0xa00000000
0x4cd138c8   136  sub csp, jssp, #0x8 (8)
0x4cd138cc   140  str fp, [jssp, #-8]!
0x4cd138d0   144  add fp, jssp, #0x8 (8)
0x4cd138d4   148  movz x2, #0x0
0x4cd138d8   152  mov x16, lr
0x4cd138dc   156  ldr x17, pc+68 (addr 0x000000004cd13920)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd138e0   160  blr x17
0x4cd138e4   164  ldur cp, [fp, #-8]
0x4cd138e8   168  movz x0, #0x0
0x4cd138ec   172  movz x1, #0x4b48
0x4cd138f0   176  movk x1, #0xe4, lsl #16
0x4cd138f4   180  ldr x16, pc+52 (addr 0x000000004cd13928)    ;; code: STUB, CEntryStub, minor: 5
0x4cd138f8   184  blr x16
0x4cd138fc   188  str x0, [jssp, #16]
0x4cd13900   192  ldr x16, pc+48 (addr 0x000000004cd13930)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd13904   196  blr x16
0x4cd13908   200  ldr lr, [jssp, #16]
0x4cd1390c   204  ldp xzr, fp, [jssp], #24
0x4cd13910   208  b #-0x60 (addr 0x4cd138b0)
0x4cd13914   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd13918   216  d63f03e0       constant
0x4cd1391c   220  d503201f       constant
0x4cd13920   224  4cd06820       constant
0x4cd13924   228  00000000       constant
0x4cd13928   232  4cd06260       constant
0x4cd1392c   236  00000000       constant
0x4cd13930   240  4cd068e0       constant
0x4cd13934   244  00000000       constant
0x4cd13938   248  movz x16, #0x0
0x4cd1393c   252  sub csp, jssp, #0x10 (16)
0x4cd13940   256  stp fp, lr, [jssp, #-16]!
0x4cd13944   260  bl #+0x14 (addr 0x4cd13958)
0x4cd13948   264  movz x16, #0x8
0x4cd1394c   268  sub csp, jssp, #0x10 (16)
0x4cd13950   272  stp fp, lr, [jssp, #-16]!
0x4cd13954   276  bl #+0x4 (addr 0x4cd13958)
0x4cd13958   280  movz x17, #0xa00000000
0x4cd1395c   284  sub csp, jssp, #0x10 (16)
0x4cd13960   288  stp x17, cp, [jssp, #-16]!
0x4cd13964   292  add fp, jssp, #0x10 (16)
0x4cd13968   296  ldr x17, pc+24 (addr 0x000000004cd13980)    ;; lazy deoptimization bailout 0
0x4cd1396c   300  add x17, x17, x16
0x4cd13970   304  br x17
0x4cd13974   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd13978   312  d63f03e0       constant
0x4cd1397c   316  d503201f       constant
0x4cd13980   320  4cb06000       constant
0x4cd13984   324  00000000       constant


Safepoints (size = 21)
0x4cd138fc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd138dc  code target (STUB)  (0x4cd06820)
0x4cd138f4  code target (STUB)  (0x4cd06260)
0x4cd13900  code target (STUB)  (0x4cd068e0)
0x4cd13914  constant pool (size 36)
0x4cd13968  runtime entry
0x4cd13974  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4537
type = NORMAL
name = BinaryOpICStub(MUL:Number*Int32->Number)
compiler = crankshaft
Instructions (size = 349)
0x4cd13840     0  mov x2, x0
0x4cd13844     4  tbnz w2, #0, #+0xf4 (addr 0x4cd13938)
0x4cd13848     8  tbz w1, #0, #+0x34 (addr 0x4cd1387c)
0x4cd1384c    12  ldur x16, [x1, #-1]
0x4cd13850    16  ldr x17, [x26, #120]
0x4cd13854    20  cmp x16, x17
0x4cd13858    24  b.ne #+0xc (addr 0x4cd13864)
0x4cd1385c    28  ldur d0, [x1, #7]
0x4cd13860    32  b #+0x20 (addr 0x4cd13880)
0x4cd13864    36  ldr x16, [x26, #40]
0x4cd13868    40  cmp x1, x16
0x4cd1386c    44  b.ne #+0xdc (addr 0x4cd13948)
0x4cd13870    48  ldr x3, [x26, #928]
0x4cd13874    52  ldur d0, [x3, #7]
0x4cd13878    56  b #+0x8 (addr 0x4cd13880)
0x4cd1387c    60  scvtf d0, x1, #32
0x4cd13880    64  scvtf d1, x2, #32
0x4cd13884    68  fmul d0, d0, d1
0x4cd13888    72  movz x1, #0xd2c0
0x4cd1388c    76  movk x1, #0x166d, lsl #16
0x4cd13890    80  ldp x2, x0, [x1]
0x4cd13894    84  adds x16, x2, #0x10 (16)
0x4cd13898    88  ccmp x16, x0, #nzCv, lo
0x4cd1389c    92  b.hi #+0x20 (addr 0x4cd138bc)
0x4cd138a0    96  str x16, [x1]
0x4cd138a4   100  ldr x1, [x26, #120]
0x4cd138a8   104  str x1, [x2]
0x4cd138ac   108  orr x2, x2, #0x1
0x4cd138b0   112  stur d0, [x2, #7]
0x4cd138b4   116  mov x0, x2
0x4cd138b8   120  ret
0x4cd138bc   124  sub csp, jssp, #0x10 (16)
0x4cd138c0   128  stp fp, lr, [jssp, #-16]!
0x4cd138c4   132  movz fp, #0xa00000000
0x4cd138c8   136  sub csp, jssp, #0x8 (8)
0x4cd138cc   140  str fp, [jssp, #-8]!
0x4cd138d0   144  add fp, jssp, #0x8 (8)
0x4cd138d4   148  movz x2, #0x0
0x4cd138d8   152  mov x16, lr
0x4cd138dc   156  ldr x17, pc+68 (addr 0x000000004cd13920)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd138e0   160  blr x17
0x4cd138e4   164  ldur cp, [fp, #-8]
0x4cd138e8   168  movz x0, #0x0
0x4cd138ec   172  movz x1, #0x4b48
0x4cd138f0   176  movk x1, #0xe4, lsl #16
0x4cd138f4   180  ldr x16, pc+52 (addr 0x000000004cd13928)    ;; code: STUB, CEntryStub, minor: 5
0x4cd138f8   184  blr x16
0x4cd138fc   188  str x0, [jssp, #16]
0x4cd13900   192  ldr x16, pc+48 (addr 0x000000004cd13930)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd13904   196  blr x16
0x4cd13908   200  ldr lr, [jssp, #16]
0x4cd1390c   204  ldp xzr, fp, [jssp], #24
0x4cd13910   208  b #-0x60 (addr 0x4cd138b0)
0x4cd13914   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd13918   216  d63f03e0       constant
0x4cd1391c   220  d503201f       constant
0x4cd13920   224  4cd06820       constant
0x4cd13924   228  00000000       constant
0x4cd13928   232  4cd06260       constant
0x4cd1392c   236  00000000       constant
0x4cd13930   240  4cd068e0       constant
0x4cd13934   244  00000000       constant
0x4cd13938   248  movz x16, #0x0
0x4cd1393c   252  sub csp, jssp, #0x10 (16)
0x4cd13940   256  stp fp, lr, [jssp, #-16]!
0x4cd13944   260  bl #+0x14 (addr 0x4cd13958)
0x4cd13948   264  movz x16, #0x8
0x4cd1394c   268  sub csp, jssp, #0x10 (16)
0x4cd13950   272  stp fp, lr, [jssp, #-16]!
0x4cd13954   276  bl #+0x4 (addr 0x4cd13958)
0x4cd13958   280  movz x17, #0xa00000000
0x4cd1395c   284  sub csp, jssp, #0x10 (16)
0x4cd13960   288  stp x17, cp, [jssp, #-16]!
0x4cd13964   292  add fp, jssp, #0x10 (16)
0x4cd13968   296  ldr x17, pc+24 (addr 0x000000004cd13980)    ;; lazy deoptimization bailout 0
0x4cd1396c   300  add x17, x17, x16
0x4cd13970   304  br x17
0x4cd13974   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd13978   312  d63f03e0       constant
0x4cd1397c   316  d503201f       constant
0x4cd13980   320  4cb06000       constant
0x4cd13984   324  00000000       constant


Safepoints (size = 21)
0x4cd138fc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd138dc  code target (STUB)  (0x4cd06820)
0x4cd138f4  code target (STUB)  (0x4cd06260)
0x4cd13900  code target (STUB)  (0x4cd068e0)
0x4cd13914  constant pool (size 36)
0x4cd13968  runtime entry
0x4cd13974  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6585
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 389)
0x4cd13a00     0  tbz w1, #0, #+0x34 (addr 0x4cd13a34)
0x4cd13a04     4  ldur x16, [x1, #-1]
0x4cd13a08     8  ldr x17, [x26, #120]
0x4cd13a0c    12  cmp x16, x17
0x4cd13a10    16  b.ne #+0xc (addr 0x4cd13a1c)
0x4cd13a14    20  ldur d0, [x1, #7]
0x4cd13a18    24  b #+0x20 (addr 0x4cd13a38)
0x4cd13a1c    28  ldr x16, [x26, #40]
0x4cd13a20    32  cmp x1, x16
0x4cd13a24    36  b.ne #+0xfc (addr 0x4cd13b20)
0x4cd13a28    40  ldr x2, [x26, #928]
0x4cd13a2c    44  ldur d0, [x2, #7]
0x4cd13a30    48  b #+0x8 (addr 0x4cd13a38)
0x4cd13a34    52  scvtf d0, x1, #32
0x4cd13a38    56  tbz w0, #0, #+0x34 (addr 0x4cd13a6c)
0x4cd13a3c    60  ldur x16, [x0, #-1]
0x4cd13a40    64  ldr x17, [x26, #120]
0x4cd13a44    68  cmp x16, x17
0x4cd13a48    72  b.ne #+0xc (addr 0x4cd13a54)
0x4cd13a4c    76  ldur d1, [x0, #7]
0x4cd13a50    80  b #+0x20 (addr 0x4cd13a70)
0x4cd13a54    84  ldr x16, [x26, #40]
0x4cd13a58    88  cmp x0, x16
0x4cd13a5c    92  b.ne #+0xd4 (addr 0x4cd13b30)
0x4cd13a60    96  ldr x2, [x26, #928]
0x4cd13a64   100  ldur d1, [x2, #7]
0x4cd13a68   104  b #+0x8 (addr 0x4cd13a70)
0x4cd13a6c   108  scvtf d1, x0, #32
0x4cd13a70   112  fmul d0, d0, d1
0x4cd13a74   116  movz x1, #0xd2c0
0x4cd13a78   120  movk x1, #0x166d, lsl #16
0x4cd13a7c   124  ldp x2, x0, [x1]
0x4cd13a80   128  adds x16, x2, #0x10 (16)
0x4cd13a84   132  ccmp x16, x0, #nzCv, lo
0x4cd13a88   136  b.hi #+0x20 (addr 0x4cd13aa8)
0x4cd13a8c   140  str x16, [x1]
0x4cd13a90   144  ldr x1, [x26, #120]
0x4cd13a94   148  str x1, [x2]
0x4cd13a98   152  orr x2, x2, #0x1
0x4cd13a9c   156  stur d0, [x2, #7]
0x4cd13aa0   160  mov x0, x2
0x4cd13aa4   164  ret
0x4cd13aa8   168  sub csp, jssp, #0x10 (16)
0x4cd13aac   172  stp fp, lr, [jssp, #-16]!
0x4cd13ab0   176  movz fp, #0xa00000000
0x4cd13ab4   180  sub csp, jssp, #0x8 (8)
0x4cd13ab8   184  str fp, [jssp, #-8]!
0x4cd13abc   188  add fp, jssp, #0x8 (8)
0x4cd13ac0   192  movz x2, #0x0
0x4cd13ac4   196  mov x16, lr
0x4cd13ac8   200  ldr x17, pc+64 (addr 0x000000004cd13b08)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd13acc   204  blr x17
0x4cd13ad0   208  ldur cp, [fp, #-8]
0x4cd13ad4   212  movz x0, #0x0
0x4cd13ad8   216  movz x1, #0x4b48
0x4cd13adc   220  movk x1, #0xe4, lsl #16
0x4cd13ae0   224  ldr x16, pc+48 (addr 0x000000004cd13b10)    ;; code: STUB, CEntryStub, minor: 5
0x4cd13ae4   228  blr x16
0x4cd13ae8   232  str x0, [jssp, #16]
0x4cd13aec   236  ldr x16, pc+44 (addr 0x000000004cd13b18)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd13af0   240  blr x16
0x4cd13af4   244  ldr lr, [jssp, #16]
0x4cd13af8   248  ldp xzr, fp, [jssp], #24
0x4cd13afc   252  b #-0x60 (addr 0x4cd13a9c)
0x4cd13b00   256  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd13b04   260  d63f03e0       constant
0x4cd13b08   264  4cd06820       constant
0x4cd13b0c   268  00000000       constant
0x4cd13b10   272  4cd06260       constant
0x4cd13b14   276  00000000       constant
0x4cd13b18   280  4cd068e0       constant
0x4cd13b1c   284  00000000       constant
0x4cd13b20   288  movz x16, #0x0
0x4cd13b24   292  sub csp, jssp, #0x10 (16)
0x4cd13b28   296  stp fp, lr, [jssp, #-16]!
0x4cd13b2c   300  bl #+0x14 (addr 0x4cd13b40)
0x4cd13b30   304  movz x16, #0x8
0x4cd13b34   308  sub csp, jssp, #0x10 (16)
0x4cd13b38   312  stp fp, lr, [jssp, #-16]!
0x4cd13b3c   316  bl #+0x4 (addr 0x4cd13b40)
0x4cd13b40   320  movz x17, #0xa00000000
0x4cd13b44   324  sub csp, jssp, #0x10 (16)
0x4cd13b48   328  stp x17, cp, [jssp, #-16]!
0x4cd13b4c   332  add fp, jssp, #0x10 (16)
0x4cd13b50   336  ldr x17, pc+24 (addr 0x000000004cd13b68)    ;; lazy deoptimization bailout 0
0x4cd13b54   340  add x17, x17, x16
0x4cd13b58   344  br x17
0x4cd13b5c   348  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd13b60   352  d63f03e0       constant
0x4cd13b64   356  d503201f       constant
0x4cd13b68   360  4cb06000       constant
0x4cd13b6c   364  00000000       constant


Safepoints (size = 21)
0x4cd13ae8   232  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd13ac8  code target (STUB)  (0x4cd06820)
0x4cd13ae0  code target (STUB)  (0x4cd06260)
0x4cd13aec  code target (STUB)  (0x4cd068e0)
0x4cd13b00  constant pool (size 32)
0x4cd13b50  runtime entry
0x4cd13b5c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6585
type = NORMAL
name = BinaryOpICStub(MUL:Number*Number->Number)
compiler = crankshaft
Instructions (size = 389)
0x4cd13a00     0  tbz w1, #0, #+0x34 (addr 0x4cd13a34)
0x4cd13a04     4  ldur x16, [x1, #-1]
0x4cd13a08     8  ldr x17, [x26, #120]
0x4cd13a0c    12  cmp x16, x17
0x4cd13a10    16  b.ne #+0xc (addr 0x4cd13a1c)
0x4cd13a14    20  ldur d0, [x1, #7]
0x4cd13a18    24  b #+0x20 (addr 0x4cd13a38)
0x4cd13a1c    28  ldr x16, [x26, #40]
0x4cd13a20    32  cmp x1, x16
0x4cd13a24    36  b.ne #+0xfc (addr 0x4cd13b20)
0x4cd13a28    40  ldr x2, [x26, #928]
0x4cd13a2c    44  ldur d0, [x2, #7]
0x4cd13a30    48  b #+0x8 (addr 0x4cd13a38)
0x4cd13a34    52  scvtf d0, x1, #32
0x4cd13a38    56  tbz w0, #0, #+0x34 (addr 0x4cd13a6c)
0x4cd13a3c    60  ldur x16, [x0, #-1]
0x4cd13a40    64  ldr x17, [x26, #120]
0x4cd13a44    68  cmp x16, x17
0x4cd13a48    72  b.ne #+0xc (addr 0x4cd13a54)
0x4cd13a4c    76  ldur d1, [x0, #7]
0x4cd13a50    80  b #+0x20 (addr 0x4cd13a70)
0x4cd13a54    84  ldr x16, [x26, #40]
0x4cd13a58    88  cmp x0, x16
0x4cd13a5c    92  b.ne #+0xd4 (addr 0x4cd13b30)
0x4cd13a60    96  ldr x2, [x26, #928]
0x4cd13a64   100  ldur d1, [x2, #7]
0x4cd13a68   104  b #+0x8 (addr 0x4cd13a70)
0x4cd13a6c   108  scvtf d1, x0, #32
0x4cd13a70   112  fmul d0, d0, d1
0x4cd13a74   116  movz x1, #0xd2c0
0x4cd13a78   120  movk x1, #0x166d, lsl #16
0x4cd13a7c   124  ldp x2, x0, [x1]
0x4cd13a80   128  adds x16, x2, #0x10 (16)
0x4cd13a84   132  ccmp x16, x0, #nzCv, lo
0x4cd13a88   136  b.hi #+0x20 (addr 0x4cd13aa8)
0x4cd13a8c   140  str x16, [x1]
0x4cd13a90   144  ldr x1, [x26, #120]
0x4cd13a94   148  str x1, [x2]
0x4cd13a98   152  orr x2, x2, #0x1
0x4cd13a9c   156  stur d0, [x2, #7]
0x4cd13aa0   160  mov x0, x2
0x4cd13aa4   164  ret
0x4cd13aa8   168  sub csp, jssp, #0x10 (16)
0x4cd13aac   172  stp fp, lr, [jssp, #-16]!
0x4cd13ab0   176  movz fp, #0xa00000000
0x4cd13ab4   180  sub csp, jssp, #0x8 (8)
0x4cd13ab8   184  str fp, [jssp, #-8]!
0x4cd13abc   188  add fp, jssp, #0x8 (8)
0x4cd13ac0   192  movz x2, #0x0
0x4cd13ac4   196  mov x16, lr
0x4cd13ac8   200  ldr x17, pc+64 (addr 0x000000004cd13b08)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd13acc   204  blr x17
0x4cd13ad0   208  ldur cp, [fp, #-8]
0x4cd13ad4   212  movz x0, #0x0
0x4cd13ad8   216  movz x1, #0x4b48
0x4cd13adc   220  movk x1, #0xe4, lsl #16
0x4cd13ae0   224  ldr x16, pc+48 (addr 0x000000004cd13b10)    ;; code: STUB, CEntryStub, minor: 5
0x4cd13ae4   228  blr x16
0x4cd13ae8   232  str x0, [jssp, #16]
0x4cd13aec   236  ldr x16, pc+44 (addr 0x000000004cd13b18)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd13af0   240  blr x16
0x4cd13af4   244  ldr lr, [jssp, #16]
0x4cd13af8   248  ldp xzr, fp, [jssp], #24
0x4cd13afc   252  b #-0x60 (addr 0x4cd13a9c)
0x4cd13b00   256  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd13b04   260  d63f03e0       constant
0x4cd13b08   264  4cd06820       constant
0x4cd13b0c   268  00000000       constant
0x4cd13b10   272  4cd06260       constant
0x4cd13b14   276  00000000       constant
0x4cd13b18   280  4cd068e0       constant
0x4cd13b1c   284  00000000       constant
0x4cd13b20   288  movz x16, #0x0
0x4cd13b24   292  sub csp, jssp, #0x10 (16)
0x4cd13b28   296  stp fp, lr, [jssp, #-16]!
0x4cd13b2c   300  bl #+0x14 (addr 0x4cd13b40)
0x4cd13b30   304  movz x16, #0x8
0x4cd13b34   308  sub csp, jssp, #0x10 (16)
0x4cd13b38   312  stp fp, lr, [jssp, #-16]!
0x4cd13b3c   316  bl #+0x4 (addr 0x4cd13b40)
0x4cd13b40   320  movz x17, #0xa00000000
0x4cd13b44   324  sub csp, jssp, #0x10 (16)
0x4cd13b48   328  stp x17, cp, [jssp, #-16]!
0x4cd13b4c   332  add fp, jssp, #0x10 (16)
0x4cd13b50   336  ldr x17, pc+24 (addr 0x000000004cd13b68)    ;; lazy deoptimization bailout 0
0x4cd13b54   340  add x17, x17, x16
0x4cd13b58   344  br x17
0x4cd13b5c   348  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd13b60   352  d63f03e0       constant
0x4cd13b64   356  d503201f       constant
0x4cd13b68   360  4cb06000       constant
0x4cd13b6c   364  00000000       constant


Safepoints (size = 21)
0x4cd13ae8   232  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd13ac8  code target (STUB)  (0x4cd06820)
0x4cd13ae0  code target (STUB)  (0x4cd06260)
0x4cd13aec  code target (STUB)  (0x4cd068e0)
0x4cd13b00  constant pool (size 32)
0x4cd13b50  runtime entry
0x4cd13b5c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2489
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0x4cd13c00     0  mov x2, x0
0x4cd13c04     4  tbnz w2, #0, #+0xf4 (addr 0x4cd13cf8)
0x4cd13c08     8  tbz w1, #0, #+0x34 (addr 0x4cd13c3c)
0x4cd13c0c    12  ldur x16, [x1, #-1]
0x4cd13c10    16  ldr x17, [x26, #120]
0x4cd13c14    20  cmp x16, x17
0x4cd13c18    24  b.ne #+0xc (addr 0x4cd13c24)
0x4cd13c1c    28  ldur d0, [x1, #7]
0x4cd13c20    32  b #+0x20 (addr 0x4cd13c40)
0x4cd13c24    36  ldr x16, [x26, #40]
0x4cd13c28    40  cmp x1, x16
0x4cd13c2c    44  b.ne #+0xdc (addr 0x4cd13d08)
0x4cd13c30    48  ldr x3, [x26, #928]
0x4cd13c34    52  ldur d0, [x3, #7]
0x4cd13c38    56  b #+0x8 (addr 0x4cd13c40)
0x4cd13c3c    60  scvtf d0, x1, #32
0x4cd13c40    64  scvtf d1, x2, #32
0x4cd13c44    68  fmul d0, d0, d1
0x4cd13c48    72  movz x1, #0xd2c0
0x4cd13c4c    76  movk x1, #0x166d, lsl #16
0x4cd13c50    80  ldp x2, x0, [x1]
0x4cd13c54    84  adds x16, x2, #0x10 (16)
0x4cd13c58    88  ccmp x16, x0, #nzCv, lo
0x4cd13c5c    92  b.hi #+0x20 (addr 0x4cd13c7c)
0x4cd13c60    96  str x16, [x1]
0x4cd13c64   100  ldr x1, [x26, #120]
0x4cd13c68   104  str x1, [x2]
0x4cd13c6c   108  orr x2, x2, #0x1
0x4cd13c70   112  stur d0, [x2, #7]
0x4cd13c74   116  mov x0, x2
0x4cd13c78   120  ret
0x4cd13c7c   124  sub csp, jssp, #0x10 (16)
0x4cd13c80   128  stp fp, lr, [jssp, #-16]!
0x4cd13c84   132  movz fp, #0xa00000000
0x4cd13c88   136  sub csp, jssp, #0x8 (8)
0x4cd13c8c   140  str fp, [jssp, #-8]!
0x4cd13c90   144  add fp, jssp, #0x8 (8)
0x4cd13c94   148  movz x2, #0x0
0x4cd13c98   152  mov x16, lr
0x4cd13c9c   156  ldr x17, pc+68 (addr 0x000000004cd13ce0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd13ca0   160  blr x17
0x4cd13ca4   164  ldur cp, [fp, #-8]
0x4cd13ca8   168  movz x0, #0x0
0x4cd13cac   172  movz x1, #0x4b48
0x4cd13cb0   176  movk x1, #0xe4, lsl #16
0x4cd13cb4   180  ldr x16, pc+52 (addr 0x000000004cd13ce8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd13cb8   184  blr x16
0x4cd13cbc   188  str x0, [jssp, #16]
0x4cd13cc0   192  ldr x16, pc+48 (addr 0x000000004cd13cf0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd13cc4   196  blr x16
0x4cd13cc8   200  ldr lr, [jssp, #16]
0x4cd13ccc   204  ldp xzr, fp, [jssp], #24
0x4cd13cd0   208  b #-0x60 (addr 0x4cd13c70)
0x4cd13cd4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd13cd8   216  d63f03e0       constant
0x4cd13cdc   220  d503201f       constant
0x4cd13ce0   224  4cd06820       constant
0x4cd13ce4   228  00000000       constant
0x4cd13ce8   232  4cd06260       constant
0x4cd13cec   236  00000000       constant
0x4cd13cf0   240  4cd068e0       constant
0x4cd13cf4   244  00000000       constant
0x4cd13cf8   248  movz x16, #0x0
0x4cd13cfc   252  sub csp, jssp, #0x10 (16)
0x4cd13d00   256  stp fp, lr, [jssp, #-16]!
0x4cd13d04   260  bl #+0x14 (addr 0x4cd13d18)
0x4cd13d08   264  movz x16, #0x8
0x4cd13d0c   268  sub csp, jssp, #0x10 (16)
0x4cd13d10   272  stp fp, lr, [jssp, #-16]!
0x4cd13d14   276  bl #+0x4 (addr 0x4cd13d18)
0x4cd13d18   280  movz x17, #0xa00000000
0x4cd13d1c   284  sub csp, jssp, #0x10 (16)
0x4cd13d20   288  stp x17, cp, [jssp, #-16]!
0x4cd13d24   292  add fp, jssp, #0x10 (16)
0x4cd13d28   296  ldr x17, pc+24 (addr 0x000000004cd13d40)    ;; lazy deoptimization bailout 0
0x4cd13d2c   300  add x17, x17, x16
0x4cd13d30   304  br x17
0x4cd13d34   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd13d38   312  d63f03e0       constant
0x4cd13d3c   316  d503201f       constant
0x4cd13d40   320  4cb06000       constant
0x4cd13d44   324  00000000       constant


Safepoints (size = 21)
0x4cd13cbc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd13c9c  code target (STUB)  (0x4cd06820)
0x4cd13cb4  code target (STUB)  (0x4cd06260)
0x4cd13cc0  code target (STUB)  (0x4cd068e0)
0x4cd13cd4  constant pool (size 36)
0x4cd13d28  runtime entry
0x4cd13d34  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2489
type = NORMAL
name = BinaryOpICStub(MUL:Number*Smi->Number)
compiler = crankshaft
Instructions (size = 349)
0x4cd13c00     0  mov x2, x0
0x4cd13c04     4  tbnz w2, #0, #+0xf4 (addr 0x4cd13cf8)
0x4cd13c08     8  tbz w1, #0, #+0x34 (addr 0x4cd13c3c)
0x4cd13c0c    12  ldur x16, [x1, #-1]
0x4cd13c10    16  ldr x17, [x26, #120]
0x4cd13c14    20  cmp x16, x17
0x4cd13c18    24  b.ne #+0xc (addr 0x4cd13c24)
0x4cd13c1c    28  ldur d0, [x1, #7]
0x4cd13c20    32  b #+0x20 (addr 0x4cd13c40)
0x4cd13c24    36  ldr x16, [x26, #40]
0x4cd13c28    40  cmp x1, x16
0x4cd13c2c    44  b.ne #+0xdc (addr 0x4cd13d08)
0x4cd13c30    48  ldr x3, [x26, #928]
0x4cd13c34    52  ldur d0, [x3, #7]
0x4cd13c38    56  b #+0x8 (addr 0x4cd13c40)
0x4cd13c3c    60  scvtf d0, x1, #32
0x4cd13c40    64  scvtf d1, x2, #32
0x4cd13c44    68  fmul d0, d0, d1
0x4cd13c48    72  movz x1, #0xd2c0
0x4cd13c4c    76  movk x1, #0x166d, lsl #16
0x4cd13c50    80  ldp x2, x0, [x1]
0x4cd13c54    84  adds x16, x2, #0x10 (16)
0x4cd13c58    88  ccmp x16, x0, #nzCv, lo
0x4cd13c5c    92  b.hi #+0x20 (addr 0x4cd13c7c)
0x4cd13c60    96  str x16, [x1]
0x4cd13c64   100  ldr x1, [x26, #120]
0x4cd13c68   104  str x1, [x2]
0x4cd13c6c   108  orr x2, x2, #0x1
0x4cd13c70   112  stur d0, [x2, #7]
0x4cd13c74   116  mov x0, x2
0x4cd13c78   120  ret
0x4cd13c7c   124  sub csp, jssp, #0x10 (16)
0x4cd13c80   128  stp fp, lr, [jssp, #-16]!
0x4cd13c84   132  movz fp, #0xa00000000
0x4cd13c88   136  sub csp, jssp, #0x8 (8)
0x4cd13c8c   140  str fp, [jssp, #-8]!
0x4cd13c90   144  add fp, jssp, #0x8 (8)
0x4cd13c94   148  movz x2, #0x0
0x4cd13c98   152  mov x16, lr
0x4cd13c9c   156  ldr x17, pc+68 (addr 0x000000004cd13ce0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd13ca0   160  blr x17
0x4cd13ca4   164  ldur cp, [fp, #-8]
0x4cd13ca8   168  movz x0, #0x0
0x4cd13cac   172  movz x1, #0x4b48
0x4cd13cb0   176  movk x1, #0xe4, lsl #16
0x4cd13cb4   180  ldr x16, pc+52 (addr 0x000000004cd13ce8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd13cb8   184  blr x16
0x4cd13cbc   188  str x0, [jssp, #16]
0x4cd13cc0   192  ldr x16, pc+48 (addr 0x000000004cd13cf0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd13cc4   196  blr x16
0x4cd13cc8   200  ldr lr, [jssp, #16]
0x4cd13ccc   204  ldp xzr, fp, [jssp], #24
0x4cd13cd0   208  b #-0x60 (addr 0x4cd13c70)
0x4cd13cd4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd13cd8   216  d63f03e0       constant
0x4cd13cdc   220  d503201f       constant
0x4cd13ce0   224  4cd06820       constant
0x4cd13ce4   228  00000000       constant
0x4cd13ce8   232  4cd06260       constant
0x4cd13cec   236  00000000       constant
0x4cd13cf0   240  4cd068e0       constant
0x4cd13cf4   244  00000000       constant
0x4cd13cf8   248  movz x16, #0x0
0x4cd13cfc   252  sub csp, jssp, #0x10 (16)
0x4cd13d00   256  stp fp, lr, [jssp, #-16]!
0x4cd13d04   260  bl #+0x14 (addr 0x4cd13d18)
0x4cd13d08   264  movz x16, #0x8
0x4cd13d0c   268  sub csp, jssp, #0x10 (16)
0x4cd13d10   272  stp fp, lr, [jssp, #-16]!
0x4cd13d14   276  bl #+0x4 (addr 0x4cd13d18)
0x4cd13d18   280  movz x17, #0xa00000000
0x4cd13d1c   284  sub csp, jssp, #0x10 (16)
0x4cd13d20   288  stp x17, cp, [jssp, #-16]!
0x4cd13d24   292  add fp, jssp, #0x10 (16)
0x4cd13d28   296  ldr x17, pc+24 (addr 0x000000004cd13d40)    ;; lazy deoptimization bailout 0
0x4cd13d2c   300  add x17, x17, x16
0x4cd13d30   304  br x17
0x4cd13d34   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd13d38   312  d63f03e0       constant
0x4cd13d3c   316  d503201f       constant
0x4cd13d40   320  4cb06000       constant
0x4cd13d44   324  00000000       constant


Safepoints (size = 21)
0x4cd13cbc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd13c9c  code target (STUB)  (0x4cd06820)
0x4cd13cb4  code target (STUB)  (0x4cd06260)
0x4cd13cc0  code target (STUB)  (0x4cd068e0)
0x4cd13cd4  constant pool (size 36)
0x4cd13d28  runtime entry
0x4cd13d34  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4265
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 160)
0x4cd13dc0     0  mov x2, x1
0x4cd13dc4     4  tbnz w2, #0, #+0x34 (addr 0x4cd13df8)
0x4cd13dc8     8  mov x3, x0
0x4cd13dcc    12  tbnz w3, #0, #+0x3c (addr 0x4cd13e08)
0x4cd13dd0    16  cmp x3, #0x0 (0)
0x4cd13dd4    20  ccmp x2, #0, #nZcv, ne
0x4cd13dd8    24  ccmn x3, x2, #nzcv, eq
0x4cd13ddc    28  b.mi #+0x3c (addr 0x4cd13e18)
0x4cd13de0    32  smulh x2, x3, x2
0x4cd13de4    36  cmp x2, w2, sxtw
0x4cd13de8    40  lsl x2, x2, #32
0x4cd13dec    44  b.ne #+0x2c (addr 0x4cd13e18)
0x4cd13df0    48  mov x0, x2
0x4cd13df4    52  ret
0x4cd13df8    56  movz x16, #0x0
0x4cd13dfc    60  sub csp, jssp, #0x10 (16)
0x4cd13e00    64  stp fp, lr, [jssp, #-16]!
0x4cd13e04    68  bl #+0x24 (addr 0x4cd13e28)
0x4cd13e08    72  movz x16, #0x8
0x4cd13e0c    76  sub csp, jssp, #0x10 (16)
0x4cd13e10    80  stp fp, lr, [jssp, #-16]!
0x4cd13e14    84  bl #+0x14 (addr 0x4cd13e28)
0x4cd13e18    88  movz x16, #0x10
0x4cd13e1c    92  sub csp, jssp, #0x10 (16)
0x4cd13e20    96  stp fp, lr, [jssp, #-16]!
0x4cd13e24   100  bl #+0x4 (addr 0x4cd13e28)
0x4cd13e28   104  movz x17, #0xa00000000
0x4cd13e2c   108  sub csp, jssp, #0x10 (16)
0x4cd13e30   112  stp x17, cp, [jssp, #-16]!
0x4cd13e34   116  add fp, jssp, #0x10 (16)
0x4cd13e38   120  ldr x17, pc+24 (addr 0x000000004cd13e50)    ;; lazy deoptimization bailout 0
0x4cd13e3c   124  add x17, x17, x16
0x4cd13e40   128  br x17
0x4cd13e44   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd13e48   136  d63f03e0       constant
0x4cd13e4c   140  d503201f       constant
0x4cd13e50   144  4cb06000       constant
0x4cd13e54   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd13e38  runtime entry
0x4cd13e44  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4265
type = NORMAL
name = BinaryOpICStub(MUL:Smi*Int32->Int32)
compiler = crankshaft
Instructions (size = 160)
0x4cd13dc0     0  mov x2, x1
0x4cd13dc4     4  tbnz w2, #0, #+0x34 (addr 0x4cd13df8)
0x4cd13dc8     8  mov x3, x0
0x4cd13dcc    12  tbnz w3, #0, #+0x3c (addr 0x4cd13e08)
0x4cd13dd0    16  cmp x3, #0x0 (0)
0x4cd13dd4    20  ccmp x2, #0, #nZcv, ne
0x4cd13dd8    24  ccmn x3, x2, #nzcv, eq
0x4cd13ddc    28  b.mi #+0x3c (addr 0x4cd13e18)
0x4cd13de0    32  smulh x2, x3, x2
0x4cd13de4    36  cmp x2, w2, sxtw
0x4cd13de8    40  lsl x2, x2, #32
0x4cd13dec    44  b.ne #+0x2c (addr 0x4cd13e18)
0x4cd13df0    48  mov x0, x2
0x4cd13df4    52  ret
0x4cd13df8    56  movz x16, #0x0
0x4cd13dfc    60  sub csp, jssp, #0x10 (16)
0x4cd13e00    64  stp fp, lr, [jssp, #-16]!
0x4cd13e04    68  bl #+0x24 (addr 0x4cd13e28)
0x4cd13e08    72  movz x16, #0x8
0x4cd13e0c    76  sub csp, jssp, #0x10 (16)
0x4cd13e10    80  stp fp, lr, [jssp, #-16]!
0x4cd13e14    84  bl #+0x14 (addr 0x4cd13e28)
0x4cd13e18    88  movz x16, #0x10
0x4cd13e1c    92  sub csp, jssp, #0x10 (16)
0x4cd13e20    96  stp fp, lr, [jssp, #-16]!
0x4cd13e24   100  bl #+0x4 (addr 0x4cd13e28)
0x4cd13e28   104  movz x17, #0xa00000000
0x4cd13e2c   108  sub csp, jssp, #0x10 (16)
0x4cd13e30   112  stp x17, cp, [jssp, #-16]!
0x4cd13e34   116  add fp, jssp, #0x10 (16)
0x4cd13e38   120  ldr x17, pc+24 (addr 0x000000004cd13e50)    ;; lazy deoptimization bailout 0
0x4cd13e3c   124  add x17, x17, x16
0x4cd13e40   128  br x17
0x4cd13e44   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd13e48   136  d63f03e0       constant
0x4cd13e4c   140  d503201f       constant
0x4cd13e50   144  4cb06000       constant
0x4cd13e54   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd13e38  runtime entry
0x4cd13e44  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4281
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0x4cd13ec0     0  mov x2, x1
0x4cd13ec4     4  tbnz w2, #0, #+0xc4 (addr 0x4cd13f88)
0x4cd13ec8     8  mov x3, x0
0x4cd13ecc    12  tbnz w3, #0, #+0xcc (addr 0x4cd13f98)
0x4cd13ed0    16  scvtf d0, x2, #32
0x4cd13ed4    20  scvtf d1, x3, #32
0x4cd13ed8    24  fmul d0, d0, d1
0x4cd13edc    28  movz x1, #0xd2c0
0x4cd13ee0    32  movk x1, #0x166d, lsl #16
0x4cd13ee4    36  ldp x2, x0, [x1]
0x4cd13ee8    40  adds x16, x2, #0x10 (16)
0x4cd13eec    44  ccmp x16, x0, #nzCv, lo
0x4cd13ef0    48  b.hi #+0x20 (addr 0x4cd13f10)
0x4cd13ef4    52  str x16, [x1]
0x4cd13ef8    56  ldr x1, [x26, #120]
0x4cd13efc    60  str x1, [x2]
0x4cd13f00    64  orr x2, x2, #0x1
0x4cd13f04    68  stur d0, [x2, #7]
0x4cd13f08    72  mov x0, x2
0x4cd13f0c    76  ret
0x4cd13f10    80  sub csp, jssp, #0x10 (16)
0x4cd13f14    84  stp fp, lr, [jssp, #-16]!
0x4cd13f18    88  movz fp, #0xa00000000
0x4cd13f1c    92  sub csp, jssp, #0x8 (8)
0x4cd13f20    96  str fp, [jssp, #-8]!
0x4cd13f24   100  add fp, jssp, #0x8 (8)
0x4cd13f28   104  movz x2, #0x0
0x4cd13f2c   108  mov x16, lr
0x4cd13f30   112  ldr x17, pc+64 (addr 0x000000004cd13f70)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd13f34   116  blr x17
0x4cd13f38   120  ldur cp, [fp, #-8]
0x4cd13f3c   124  movz x0, #0x0
0x4cd13f40   128  movz x1, #0x4b48
0x4cd13f44   132  movk x1, #0xe4, lsl #16
0x4cd13f48   136  ldr x16, pc+48 (addr 0x000000004cd13f78)    ;; code: STUB, CEntryStub, minor: 5
0x4cd13f4c   140  blr x16
0x4cd13f50   144  str x0, [jssp, #16]
0x4cd13f54   148  ldr x16, pc+44 (addr 0x000000004cd13f80)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd13f58   152  blr x16
0x4cd13f5c   156  ldr lr, [jssp, #16]
0x4cd13f60   160  ldp xzr, fp, [jssp], #24
0x4cd13f64   164  b #-0x60 (addr 0x4cd13f04)
0x4cd13f68   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd13f6c   172  d63f03e0       constant
0x4cd13f70   176  4cd06820       constant
0x4cd13f74   180  00000000       constant
0x4cd13f78   184  4cd06260       constant
0x4cd13f7c   188  00000000       constant
0x4cd13f80   192  4cd068e0       constant
0x4cd13f84   196  00000000       constant
0x4cd13f88   200  movz x16, #0x0
0x4cd13f8c   204  sub csp, jssp, #0x10 (16)
0x4cd13f90   208  stp fp, lr, [jssp, #-16]!
0x4cd13f94   212  bl #+0x14 (addr 0x4cd13fa8)
0x4cd13f98   216  movz x16, #0x8
0x4cd13f9c   220  sub csp, jssp, #0x10 (16)
0x4cd13fa0   224  stp fp, lr, [jssp, #-16]!
0x4cd13fa4   228  bl #+0x4 (addr 0x4cd13fa8)
0x4cd13fa8   232  movz x17, #0xa00000000
0x4cd13fac   236  sub csp, jssp, #0x10 (16)
0x4cd13fb0   240  stp x17, cp, [jssp, #-16]!
0x4cd13fb4   244  add fp, jssp, #0x10 (16)
0x4cd13fb8   248  ldr x17, pc+24 (addr 0x000000004cd13fd0)    ;; lazy deoptimization bailout 0
0x4cd13fbc   252  add x17, x17, x16
0x4cd13fc0   256  br x17
0x4cd13fc4   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd13fc8   264  d63f03e0       constant
0x4cd13fcc   268  d503201f       constant
0x4cd13fd0   272  4cb06000       constant
0x4cd13fd4   276  00000000       constant


Safepoints (size = 21)
0x4cd13f50   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd13f30  code target (STUB)  (0x4cd06820)
0x4cd13f48  code target (STUB)  (0x4cd06260)
0x4cd13f54  code target (STUB)  (0x4cd068e0)
0x4cd13f68  constant pool (size 32)
0x4cd13fb8  runtime entry
0x4cd13fc4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4281
type = NORMAL
name = BinaryOpICStub(MUL:Smi*Int32->Number)
compiler = crankshaft
Instructions (size = 301)
0x4cd13ec0     0  mov x2, x1
0x4cd13ec4     4  tbnz w2, #0, #+0xc4 (addr 0x4cd13f88)
0x4cd13ec8     8  mov x3, x0
0x4cd13ecc    12  tbnz w3, #0, #+0xcc (addr 0x4cd13f98)
0x4cd13ed0    16  scvtf d0, x2, #32
0x4cd13ed4    20  scvtf d1, x3, #32
0x4cd13ed8    24  fmul d0, d0, d1
0x4cd13edc    28  movz x1, #0xd2c0
0x4cd13ee0    32  movk x1, #0x166d, lsl #16
0x4cd13ee4    36  ldp x2, x0, [x1]
0x4cd13ee8    40  adds x16, x2, #0x10 (16)
0x4cd13eec    44  ccmp x16, x0, #nzCv, lo
0x4cd13ef0    48  b.hi #+0x20 (addr 0x4cd13f10)
0x4cd13ef4    52  str x16, [x1]
0x4cd13ef8    56  ldr x1, [x26, #120]
0x4cd13efc    60  str x1, [x2]
0x4cd13f00    64  orr x2, x2, #0x1
0x4cd13f04    68  stur d0, [x2, #7]
0x4cd13f08    72  mov x0, x2
0x4cd13f0c    76  ret
0x4cd13f10    80  sub csp, jssp, #0x10 (16)
0x4cd13f14    84  stp fp, lr, [jssp, #-16]!
0x4cd13f18    88  movz fp, #0xa00000000
0x4cd13f1c    92  sub csp, jssp, #0x8 (8)
0x4cd13f20    96  str fp, [jssp, #-8]!
0x4cd13f24   100  add fp, jssp, #0x8 (8)
0x4cd13f28   104  movz x2, #0x0
0x4cd13f2c   108  mov x16, lr
0x4cd13f30   112  ldr x17, pc+64 (addr 0x000000004cd13f70)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd13f34   116  blr x17
0x4cd13f38   120  ldur cp, [fp, #-8]
0x4cd13f3c   124  movz x0, #0x0
0x4cd13f40   128  movz x1, #0x4b48
0x4cd13f44   132  movk x1, #0xe4, lsl #16
0x4cd13f48   136  ldr x16, pc+48 (addr 0x000000004cd13f78)    ;; code: STUB, CEntryStub, minor: 5
0x4cd13f4c   140  blr x16
0x4cd13f50   144  str x0, [jssp, #16]
0x4cd13f54   148  ldr x16, pc+44 (addr 0x000000004cd13f80)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd13f58   152  blr x16
0x4cd13f5c   156  ldr lr, [jssp, #16]
0x4cd13f60   160  ldp xzr, fp, [jssp], #24
0x4cd13f64   164  b #-0x60 (addr 0x4cd13f04)
0x4cd13f68   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd13f6c   172  d63f03e0       constant
0x4cd13f70   176  4cd06820       constant
0x4cd13f74   180  00000000       constant
0x4cd13f78   184  4cd06260       constant
0x4cd13f7c   188  00000000       constant
0x4cd13f80   192  4cd068e0       constant
0x4cd13f84   196  00000000       constant
0x4cd13f88   200  movz x16, #0x0
0x4cd13f8c   204  sub csp, jssp, #0x10 (16)
0x4cd13f90   208  stp fp, lr, [jssp, #-16]!
0x4cd13f94   212  bl #+0x14 (addr 0x4cd13fa8)
0x4cd13f98   216  movz x16, #0x8
0x4cd13f9c   220  sub csp, jssp, #0x10 (16)
0x4cd13fa0   224  stp fp, lr, [jssp, #-16]!
0x4cd13fa4   228  bl #+0x4 (addr 0x4cd13fa8)
0x4cd13fa8   232  movz x17, #0xa00000000
0x4cd13fac   236  sub csp, jssp, #0x10 (16)
0x4cd13fb0   240  stp x17, cp, [jssp, #-16]!
0x4cd13fb4   244  add fp, jssp, #0x10 (16)
0x4cd13fb8   248  ldr x17, pc+24 (addr 0x000000004cd13fd0)    ;; lazy deoptimization bailout 0
0x4cd13fbc   252  add x17, x17, x16
0x4cd13fc0   256  br x17
0x4cd13fc4   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd13fc8   264  d63f03e0       constant
0x4cd13fcc   268  d503201f       constant
0x4cd13fd0   272  4cb06000       constant
0x4cd13fd4   276  00000000       constant


Safepoints (size = 21)
0x4cd13f50   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd13f30  code target (STUB)  (0x4cd06820)
0x4cd13f48  code target (STUB)  (0x4cd06260)
0x4cd13f54  code target (STUB)  (0x4cd068e0)
0x4cd13f68  constant pool (size 32)
0x4cd13fb8  runtime entry
0x4cd13fc4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6329
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0x4cd14060     0  mov x2, x1
0x4cd14064     4  tbnz w2, #0, #+0xf4 (addr 0x4cd14158)
0x4cd14068     8  tbz w0, #0, #+0x34 (addr 0x4cd1409c)
0x4cd1406c    12  ldur x16, [x0, #-1]
0x4cd14070    16  ldr x17, [x26, #120]
0x4cd14074    20  cmp x16, x17
0x4cd14078    24  b.ne #+0xc (addr 0x4cd14084)
0x4cd1407c    28  ldur d0, [x0, #7]
0x4cd14080    32  b #+0x20 (addr 0x4cd140a0)
0x4cd14084    36  ldr x16, [x26, #40]
0x4cd14088    40  cmp x0, x16
0x4cd1408c    44  b.ne #+0xdc (addr 0x4cd14168)
0x4cd14090    48  ldr x3, [x26, #928]
0x4cd14094    52  ldur d0, [x3, #7]
0x4cd14098    56  b #+0x8 (addr 0x4cd140a0)
0x4cd1409c    60  scvtf d0, x0, #32
0x4cd140a0    64  scvtf d1, x2, #32
0x4cd140a4    68  fmul d0, d1, d0
0x4cd140a8    72  movz x1, #0xd2c0
0x4cd140ac    76  movk x1, #0x166d, lsl #16
0x4cd140b0    80  ldp x2, x0, [x1]
0x4cd140b4    84  adds x16, x2, #0x10 (16)
0x4cd140b8    88  ccmp x16, x0, #nzCv, lo
0x4cd140bc    92  b.hi #+0x20 (addr 0x4cd140dc)
0x4cd140c0    96  str x16, [x1]
0x4cd140c4   100  ldr x1, [x26, #120]
0x4cd140c8   104  str x1, [x2]
0x4cd140cc   108  orr x2, x2, #0x1
0x4cd140d0   112  stur d0, [x2, #7]
0x4cd140d4   116  mov x0, x2
0x4cd140d8   120  ret
0x4cd140dc   124  sub csp, jssp, #0x10 (16)
0x4cd140e0   128  stp fp, lr, [jssp, #-16]!
0x4cd140e4   132  movz fp, #0xa00000000
0x4cd140e8   136  sub csp, jssp, #0x8 (8)
0x4cd140ec   140  str fp, [jssp, #-8]!
0x4cd140f0   144  add fp, jssp, #0x8 (8)
0x4cd140f4   148  movz x2, #0x0
0x4cd140f8   152  mov x16, lr
0x4cd140fc   156  ldr x17, pc+68 (addr 0x000000004cd14140)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd14100   160  blr x17
0x4cd14104   164  ldur cp, [fp, #-8]
0x4cd14108   168  movz x0, #0x0
0x4cd1410c   172  movz x1, #0x4b48
0x4cd14110   176  movk x1, #0xe4, lsl #16
0x4cd14114   180  ldr x16, pc+52 (addr 0x000000004cd14148)    ;; code: STUB, CEntryStub, minor: 5
0x4cd14118   184  blr x16
0x4cd1411c   188  str x0, [jssp, #16]
0x4cd14120   192  ldr x16, pc+48 (addr 0x000000004cd14150)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd14124   196  blr x16
0x4cd14128   200  ldr lr, [jssp, #16]
0x4cd1412c   204  ldp xzr, fp, [jssp], #24
0x4cd14130   208  b #-0x60 (addr 0x4cd140d0)
0x4cd14134   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd14138   216  d63f03e0       constant
0x4cd1413c   220  d503201f       constant
0x4cd14140   224  4cd06820       constant
0x4cd14144   228  00000000       constant
0x4cd14148   232  4cd06260       constant
0x4cd1414c   236  00000000       constant
0x4cd14150   240  4cd068e0       constant
0x4cd14154   244  00000000       constant
0x4cd14158   248  movz x16, #0x0
0x4cd1415c   252  sub csp, jssp, #0x10 (16)
0x4cd14160   256  stp fp, lr, [jssp, #-16]!
0x4cd14164   260  bl #+0x14 (addr 0x4cd14178)
0x4cd14168   264  movz x16, #0x8
0x4cd1416c   268  sub csp, jssp, #0x10 (16)
0x4cd14170   272  stp fp, lr, [jssp, #-16]!
0x4cd14174   276  bl #+0x4 (addr 0x4cd14178)
0x4cd14178   280  movz x17, #0xa00000000
0x4cd1417c   284  sub csp, jssp, #0x10 (16)
0x4cd14180   288  stp x17, cp, [jssp, #-16]!
0x4cd14184   292  add fp, jssp, #0x10 (16)
0x4cd14188   296  ldr x17, pc+24 (addr 0x000000004cd141a0)    ;; lazy deoptimization bailout 0
0x4cd1418c   300  add x17, x17, x16
0x4cd14190   304  br x17
0x4cd14194   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd14198   312  d63f03e0       constant
0x4cd1419c   316  d503201f       constant
0x4cd141a0   320  4cb06000       constant
0x4cd141a4   324  00000000       constant


Safepoints (size = 21)
0x4cd1411c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd140fc  code target (STUB)  (0x4cd06820)
0x4cd14114  code target (STUB)  (0x4cd06260)
0x4cd14120  code target (STUB)  (0x4cd068e0)
0x4cd14134  constant pool (size 36)
0x4cd14188  runtime entry
0x4cd14194  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6329
type = NORMAL
name = BinaryOpICStub(MUL:Smi*Number->Number)
compiler = crankshaft
Instructions (size = 349)
0x4cd14060     0  mov x2, x1
0x4cd14064     4  tbnz w2, #0, #+0xf4 (addr 0x4cd14158)
0x4cd14068     8  tbz w0, #0, #+0x34 (addr 0x4cd1409c)
0x4cd1406c    12  ldur x16, [x0, #-1]
0x4cd14070    16  ldr x17, [x26, #120]
0x4cd14074    20  cmp x16, x17
0x4cd14078    24  b.ne #+0xc (addr 0x4cd14084)
0x4cd1407c    28  ldur d0, [x0, #7]
0x4cd14080    32  b #+0x20 (addr 0x4cd140a0)
0x4cd14084    36  ldr x16, [x26, #40]
0x4cd14088    40  cmp x0, x16
0x4cd1408c    44  b.ne #+0xdc (addr 0x4cd14168)
0x4cd14090    48  ldr x3, [x26, #928]
0x4cd14094    52  ldur d0, [x3, #7]
0x4cd14098    56  b #+0x8 (addr 0x4cd140a0)
0x4cd1409c    60  scvtf d0, x0, #32
0x4cd140a0    64  scvtf d1, x2, #32
0x4cd140a4    68  fmul d0, d1, d0
0x4cd140a8    72  movz x1, #0xd2c0
0x4cd140ac    76  movk x1, #0x166d, lsl #16
0x4cd140b0    80  ldp x2, x0, [x1]
0x4cd140b4    84  adds x16, x2, #0x10 (16)
0x4cd140b8    88  ccmp x16, x0, #nzCv, lo
0x4cd140bc    92  b.hi #+0x20 (addr 0x4cd140dc)
0x4cd140c0    96  str x16, [x1]
0x4cd140c4   100  ldr x1, [x26, #120]
0x4cd140c8   104  str x1, [x2]
0x4cd140cc   108  orr x2, x2, #0x1
0x4cd140d0   112  stur d0, [x2, #7]
0x4cd140d4   116  mov x0, x2
0x4cd140d8   120  ret
0x4cd140dc   124  sub csp, jssp, #0x10 (16)
0x4cd140e0   128  stp fp, lr, [jssp, #-16]!
0x4cd140e4   132  movz fp, #0xa00000000
0x4cd140e8   136  sub csp, jssp, #0x8 (8)
0x4cd140ec   140  str fp, [jssp, #-8]!
0x4cd140f0   144  add fp, jssp, #0x8 (8)
0x4cd140f4   148  movz x2, #0x0
0x4cd140f8   152  mov x16, lr
0x4cd140fc   156  ldr x17, pc+68 (addr 0x000000004cd14140)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd14100   160  blr x17
0x4cd14104   164  ldur cp, [fp, #-8]
0x4cd14108   168  movz x0, #0x0
0x4cd1410c   172  movz x1, #0x4b48
0x4cd14110   176  movk x1, #0xe4, lsl #16
0x4cd14114   180  ldr x16, pc+52 (addr 0x000000004cd14148)    ;; code: STUB, CEntryStub, minor: 5
0x4cd14118   184  blr x16
0x4cd1411c   188  str x0, [jssp, #16]
0x4cd14120   192  ldr x16, pc+48 (addr 0x000000004cd14150)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd14124   196  blr x16
0x4cd14128   200  ldr lr, [jssp, #16]
0x4cd1412c   204  ldp xzr, fp, [jssp], #24
0x4cd14130   208  b #-0x60 (addr 0x4cd140d0)
0x4cd14134   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd14138   216  d63f03e0       constant
0x4cd1413c   220  d503201f       constant
0x4cd14140   224  4cd06820       constant
0x4cd14144   228  00000000       constant
0x4cd14148   232  4cd06260       constant
0x4cd1414c   236  00000000       constant
0x4cd14150   240  4cd068e0       constant
0x4cd14154   244  00000000       constant
0x4cd14158   248  movz x16, #0x0
0x4cd1415c   252  sub csp, jssp, #0x10 (16)
0x4cd14160   256  stp fp, lr, [jssp, #-16]!
0x4cd14164   260  bl #+0x14 (addr 0x4cd14178)
0x4cd14168   264  movz x16, #0x8
0x4cd1416c   268  sub csp, jssp, #0x10 (16)
0x4cd14170   272  stp fp, lr, [jssp, #-16]!
0x4cd14174   276  bl #+0x4 (addr 0x4cd14178)
0x4cd14178   280  movz x17, #0xa00000000
0x4cd1417c   284  sub csp, jssp, #0x10 (16)
0x4cd14180   288  stp x17, cp, [jssp, #-16]!
0x4cd14184   292  add fp, jssp, #0x10 (16)
0x4cd14188   296  ldr x17, pc+24 (addr 0x000000004cd141a0)    ;; lazy deoptimization bailout 0
0x4cd1418c   300  add x17, x17, x16
0x4cd14190   304  br x17
0x4cd14194   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd14198   312  d63f03e0       constant
0x4cd1419c   316  d503201f       constant
0x4cd141a0   320  4cb06000       constant
0x4cd141a4   324  00000000       constant


Safepoints (size = 21)
0x4cd1411c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd140fc  code target (STUB)  (0x4cd06820)
0x4cd14114  code target (STUB)  (0x4cd06260)
0x4cd14120  code target (STUB)  (0x4cd068e0)
0x4cd14134  constant pool (size 36)
0x4cd14188  runtime entry
0x4cd14194  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2217
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 160)
0x4cd14220     0  mov x2, x1
0x4cd14224     4  tbnz w2, #0, #+0x34 (addr 0x4cd14258)
0x4cd14228     8  mov x3, x0
0x4cd1422c    12  tbnz w3, #0, #+0x3c (addr 0x4cd14268)
0x4cd14230    16  cmp x3, #0x0 (0)
0x4cd14234    20  ccmp x2, #0, #nZcv, ne
0x4cd14238    24  ccmn x3, x2, #nzcv, eq
0x4cd1423c    28  b.mi #+0x3c (addr 0x4cd14278)
0x4cd14240    32  smulh x2, x3, x2
0x4cd14244    36  cmp x2, w2, sxtw
0x4cd14248    40  lsl x2, x2, #32
0x4cd1424c    44  b.ne #+0x2c (addr 0x4cd14278)
0x4cd14250    48  mov x0, x2
0x4cd14254    52  ret
0x4cd14258    56  movz x16, #0x0
0x4cd1425c    60  sub csp, jssp, #0x10 (16)
0x4cd14260    64  stp fp, lr, [jssp, #-16]!
0x4cd14264    68  bl #+0x24 (addr 0x4cd14288)
0x4cd14268    72  movz x16, #0x8
0x4cd1426c    76  sub csp, jssp, #0x10 (16)
0x4cd14270    80  stp fp, lr, [jssp, #-16]!
0x4cd14274    84  bl #+0x14 (addr 0x4cd14288)
0x4cd14278    88  movz x16, #0x10
0x4cd1427c    92  sub csp, jssp, #0x10 (16)
0x4cd14280    96  stp fp, lr, [jssp, #-16]!
0x4cd14284   100  bl #+0x4 (addr 0x4cd14288)
0x4cd14288   104  movz x17, #0xa00000000
0x4cd1428c   108  sub csp, jssp, #0x10 (16)
0x4cd14290   112  stp x17, cp, [jssp, #-16]!
0x4cd14294   116  add fp, jssp, #0x10 (16)
0x4cd14298   120  ldr x17, pc+24 (addr 0x000000004cd142b0)    ;; lazy deoptimization bailout 0
0x4cd1429c   124  add x17, x17, x16
0x4cd142a0   128  br x17
0x4cd142a4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd142a8   136  d63f03e0       constant
0x4cd142ac   140  d503201f       constant
0x4cd142b0   144  4cb06000       constant
0x4cd142b4   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14298  runtime entry
0x4cd142a4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2217
type = NORMAL
name = BinaryOpICStub(MUL:Smi*Smi->Int32)
compiler = crankshaft
Instructions (size = 160)
0x4cd14220     0  mov x2, x1
0x4cd14224     4  tbnz w2, #0, #+0x34 (addr 0x4cd14258)
0x4cd14228     8  mov x3, x0
0x4cd1422c    12  tbnz w3, #0, #+0x3c (addr 0x4cd14268)
0x4cd14230    16  cmp x3, #0x0 (0)
0x4cd14234    20  ccmp x2, #0, #nZcv, ne
0x4cd14238    24  ccmn x3, x2, #nzcv, eq
0x4cd1423c    28  b.mi #+0x3c (addr 0x4cd14278)
0x4cd14240    32  smulh x2, x3, x2
0x4cd14244    36  cmp x2, w2, sxtw
0x4cd14248    40  lsl x2, x2, #32
0x4cd1424c    44  b.ne #+0x2c (addr 0x4cd14278)
0x4cd14250    48  mov x0, x2
0x4cd14254    52  ret
0x4cd14258    56  movz x16, #0x0
0x4cd1425c    60  sub csp, jssp, #0x10 (16)
0x4cd14260    64  stp fp, lr, [jssp, #-16]!
0x4cd14264    68  bl #+0x24 (addr 0x4cd14288)
0x4cd14268    72  movz x16, #0x8
0x4cd1426c    76  sub csp, jssp, #0x10 (16)
0x4cd14270    80  stp fp, lr, [jssp, #-16]!
0x4cd14274    84  bl #+0x14 (addr 0x4cd14288)
0x4cd14278    88  movz x16, #0x10
0x4cd1427c    92  sub csp, jssp, #0x10 (16)
0x4cd14280    96  stp fp, lr, [jssp, #-16]!
0x4cd14284   100  bl #+0x4 (addr 0x4cd14288)
0x4cd14288   104  movz x17, #0xa00000000
0x4cd1428c   108  sub csp, jssp, #0x10 (16)
0x4cd14290   112  stp x17, cp, [jssp, #-16]!
0x4cd14294   116  add fp, jssp, #0x10 (16)
0x4cd14298   120  ldr x17, pc+24 (addr 0x000000004cd142b0)    ;; lazy deoptimization bailout 0
0x4cd1429c   124  add x17, x17, x16
0x4cd142a0   128  br x17
0x4cd142a4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd142a8   136  d63f03e0       constant
0x4cd142ac   140  d503201f       constant
0x4cd142b0   144  4cb06000       constant
0x4cd142b4   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14298  runtime entry
0x4cd142a4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2233
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 301)
0x4cd14320     0  mov x2, x1
0x4cd14324     4  tbnz w2, #0, #+0xc4 (addr 0x4cd143e8)
0x4cd14328     8  mov x3, x0
0x4cd1432c    12  tbnz w3, #0, #+0xcc (addr 0x4cd143f8)
0x4cd14330    16  scvtf d0, x2, #32
0x4cd14334    20  scvtf d1, x3, #32
0x4cd14338    24  fmul d0, d0, d1
0x4cd1433c    28  movz x1, #0xd2c0
0x4cd14340    32  movk x1, #0x166d, lsl #16
0x4cd14344    36  ldp x2, x0, [x1]
0x4cd14348    40  adds x16, x2, #0x10 (16)
0x4cd1434c    44  ccmp x16, x0, #nzCv, lo
0x4cd14350    48  b.hi #+0x20 (addr 0x4cd14370)
0x4cd14354    52  str x16, [x1]
0x4cd14358    56  ldr x1, [x26, #120]
0x4cd1435c    60  str x1, [x2]
0x4cd14360    64  orr x2, x2, #0x1
0x4cd14364    68  stur d0, [x2, #7]
0x4cd14368    72  mov x0, x2
0x4cd1436c    76  ret
0x4cd14370    80  sub csp, jssp, #0x10 (16)
0x4cd14374    84  stp fp, lr, [jssp, #-16]!
0x4cd14378    88  movz fp, #0xa00000000
0x4cd1437c    92  sub csp, jssp, #0x8 (8)
0x4cd14380    96  str fp, [jssp, #-8]!
0x4cd14384   100  add fp, jssp, #0x8 (8)
0x4cd14388   104  movz x2, #0x0
0x4cd1438c   108  mov x16, lr
0x4cd14390   112  ldr x17, pc+64 (addr 0x000000004cd143d0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd14394   116  blr x17
0x4cd14398   120  ldur cp, [fp, #-8]
0x4cd1439c   124  movz x0, #0x0
0x4cd143a0   128  movz x1, #0x4b48
0x4cd143a4   132  movk x1, #0xe4, lsl #16
0x4cd143a8   136  ldr x16, pc+48 (addr 0x000000004cd143d8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd143ac   140  blr x16
0x4cd143b0   144  str x0, [jssp, #16]
0x4cd143b4   148  ldr x16, pc+44 (addr 0x000000004cd143e0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd143b8   152  blr x16
0x4cd143bc   156  ldr lr, [jssp, #16]
0x4cd143c0   160  ldp xzr, fp, [jssp], #24
0x4cd143c4   164  b #-0x60 (addr 0x4cd14364)
0x4cd143c8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd143cc   172  d63f03e0       constant
0x4cd143d0   176  4cd06820       constant
0x4cd143d4   180  00000000       constant
0x4cd143d8   184  4cd06260       constant
0x4cd143dc   188  00000000       constant
0x4cd143e0   192  4cd068e0       constant
0x4cd143e4   196  00000000       constant
0x4cd143e8   200  movz x16, #0x0
0x4cd143ec   204  sub csp, jssp, #0x10 (16)
0x4cd143f0   208  stp fp, lr, [jssp, #-16]!
0x4cd143f4   212  bl #+0x14 (addr 0x4cd14408)
0x4cd143f8   216  movz x16, #0x8
0x4cd143fc   220  sub csp, jssp, #0x10 (16)
0x4cd14400   224  stp fp, lr, [jssp, #-16]!
0x4cd14404   228  bl #+0x4 (addr 0x4cd14408)
0x4cd14408   232  movz x17, #0xa00000000
0x4cd1440c   236  sub csp, jssp, #0x10 (16)
0x4cd14410   240  stp x17, cp, [jssp, #-16]!
0x4cd14414   244  add fp, jssp, #0x10 (16)
0x4cd14418   248  ldr x17, pc+24 (addr 0x000000004cd14430)    ;; lazy deoptimization bailout 0
0x4cd1441c   252  add x17, x17, x16
0x4cd14420   256  br x17
0x4cd14424   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd14428   264  d63f03e0       constant
0x4cd1442c   268  d503201f       constant
0x4cd14430   272  4cb06000       constant
0x4cd14434   276  00000000       constant


Safepoints (size = 21)
0x4cd143b0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd14390  code target (STUB)  (0x4cd06820)
0x4cd143a8  code target (STUB)  (0x4cd06260)
0x4cd143b4  code target (STUB)  (0x4cd068e0)
0x4cd143c8  constant pool (size 32)
0x4cd14418  runtime entry
0x4cd14424  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2233
type = NORMAL
name = BinaryOpICStub(MUL:Smi*Smi->Number)
compiler = crankshaft
Instructions (size = 301)
0x4cd14320     0  mov x2, x1
0x4cd14324     4  tbnz w2, #0, #+0xc4 (addr 0x4cd143e8)
0x4cd14328     8  mov x3, x0
0x4cd1432c    12  tbnz w3, #0, #+0xcc (addr 0x4cd143f8)
0x4cd14330    16  scvtf d0, x2, #32
0x4cd14334    20  scvtf d1, x3, #32
0x4cd14338    24  fmul d0, d0, d1
0x4cd1433c    28  movz x1, #0xd2c0
0x4cd14340    32  movk x1, #0x166d, lsl #16
0x4cd14344    36  ldp x2, x0, [x1]
0x4cd14348    40  adds x16, x2, #0x10 (16)
0x4cd1434c    44  ccmp x16, x0, #nzCv, lo
0x4cd14350    48  b.hi #+0x20 (addr 0x4cd14370)
0x4cd14354    52  str x16, [x1]
0x4cd14358    56  ldr x1, [x26, #120]
0x4cd1435c    60  str x1, [x2]
0x4cd14360    64  orr x2, x2, #0x1
0x4cd14364    68  stur d0, [x2, #7]
0x4cd14368    72  mov x0, x2
0x4cd1436c    76  ret
0x4cd14370    80  sub csp, jssp, #0x10 (16)
0x4cd14374    84  stp fp, lr, [jssp, #-16]!
0x4cd14378    88  movz fp, #0xa00000000
0x4cd1437c    92  sub csp, jssp, #0x8 (8)
0x4cd14380    96  str fp, [jssp, #-8]!
0x4cd14384   100  add fp, jssp, #0x8 (8)
0x4cd14388   104  movz x2, #0x0
0x4cd1438c   108  mov x16, lr
0x4cd14390   112  ldr x17, pc+64 (addr 0x000000004cd143d0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd14394   116  blr x17
0x4cd14398   120  ldur cp, [fp, #-8]
0x4cd1439c   124  movz x0, #0x0
0x4cd143a0   128  movz x1, #0x4b48
0x4cd143a4   132  movk x1, #0xe4, lsl #16
0x4cd143a8   136  ldr x16, pc+48 (addr 0x000000004cd143d8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd143ac   140  blr x16
0x4cd143b0   144  str x0, [jssp, #16]
0x4cd143b4   148  ldr x16, pc+44 (addr 0x000000004cd143e0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd143b8   152  blr x16
0x4cd143bc   156  ldr lr, [jssp, #16]
0x4cd143c0   160  ldp xzr, fp, [jssp], #24
0x4cd143c4   164  b #-0x60 (addr 0x4cd14364)
0x4cd143c8   168  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd143cc   172  d63f03e0       constant
0x4cd143d0   176  4cd06820       constant
0x4cd143d4   180  00000000       constant
0x4cd143d8   184  4cd06260       constant
0x4cd143dc   188  00000000       constant
0x4cd143e0   192  4cd068e0       constant
0x4cd143e4   196  00000000       constant
0x4cd143e8   200  movz x16, #0x0
0x4cd143ec   204  sub csp, jssp, #0x10 (16)
0x4cd143f0   208  stp fp, lr, [jssp, #-16]!
0x4cd143f4   212  bl #+0x14 (addr 0x4cd14408)
0x4cd143f8   216  movz x16, #0x8
0x4cd143fc   220  sub csp, jssp, #0x10 (16)
0x4cd14400   224  stp fp, lr, [jssp, #-16]!
0x4cd14404   228  bl #+0x4 (addr 0x4cd14408)
0x4cd14408   232  movz x17, #0xa00000000
0x4cd1440c   236  sub csp, jssp, #0x10 (16)
0x4cd14410   240  stp x17, cp, [jssp, #-16]!
0x4cd14414   244  add fp, jssp, #0x10 (16)
0x4cd14418   248  ldr x17, pc+24 (addr 0x000000004cd14430)    ;; lazy deoptimization bailout 0
0x4cd1441c   252  add x17, x17, x16
0x4cd14420   256  br x17
0x4cd14424   260  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd14428   264  d63f03e0       constant
0x4cd1442c   268  d503201f       constant
0x4cd14430   272  4cb06000       constant
0x4cd14434   276  00000000       constant


Safepoints (size = 21)
0x4cd143b0   144  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd14390  code target (STUB)  (0x4cd06820)
0x4cd143a8  code target (STUB)  (0x4cd06260)
0x4cd143b4  code target (STUB)  (0x4cd068e0)
0x4cd143c8  constant pool (size 32)
0x4cd14418  runtime entry
0x4cd14424  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2201
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 160)
0x4cd144c0     0  mov x2, x1
0x4cd144c4     4  tbnz w2, #0, #+0x34 (addr 0x4cd144f8)
0x4cd144c8     8  mov x3, x0
0x4cd144cc    12  tbnz w3, #0, #+0x3c (addr 0x4cd14508)
0x4cd144d0    16  cmp x3, #0x0 (0)
0x4cd144d4    20  ccmp x2, #0, #nZcv, ne
0x4cd144d8    24  ccmn x3, x2, #nzcv, eq
0x4cd144dc    28  b.mi #+0x3c (addr 0x4cd14518)
0x4cd144e0    32  smulh x2, x3, x2
0x4cd144e4    36  cmp x2, w2, sxtw
0x4cd144e8    40  lsl x2, x2, #32
0x4cd144ec    44  b.ne #+0x2c (addr 0x4cd14518)
0x4cd144f0    48  mov x0, x2
0x4cd144f4    52  ret
0x4cd144f8    56  movz x16, #0x0
0x4cd144fc    60  sub csp, jssp, #0x10 (16)
0x4cd14500    64  stp fp, lr, [jssp, #-16]!
0x4cd14504    68  bl #+0x24 (addr 0x4cd14528)
0x4cd14508    72  movz x16, #0x8
0x4cd1450c    76  sub csp, jssp, #0x10 (16)
0x4cd14510    80  stp fp, lr, [jssp, #-16]!
0x4cd14514    84  bl #+0x14 (addr 0x4cd14528)
0x4cd14518    88  movz x16, #0x10
0x4cd1451c    92  sub csp, jssp, #0x10 (16)
0x4cd14520    96  stp fp, lr, [jssp, #-16]!
0x4cd14524   100  bl #+0x4 (addr 0x4cd14528)
0x4cd14528   104  movz x17, #0xa00000000
0x4cd1452c   108  sub csp, jssp, #0x10 (16)
0x4cd14530   112  stp x17, cp, [jssp, #-16]!
0x4cd14534   116  add fp, jssp, #0x10 (16)
0x4cd14538   120  ldr x17, pc+24 (addr 0x000000004cd14550)    ;; lazy deoptimization bailout 0
0x4cd1453c   124  add x17, x17, x16
0x4cd14540   128  br x17
0x4cd14544   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd14548   136  d63f03e0       constant
0x4cd1454c   140  d503201f       constant
0x4cd14550   144  4cb06000       constant
0x4cd14554   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14538  runtime entry
0x4cd14544  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2201
type = NORMAL
name = BinaryOpICStub(MUL:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 160)
0x4cd144c0     0  mov x2, x1
0x4cd144c4     4  tbnz w2, #0, #+0x34 (addr 0x4cd144f8)
0x4cd144c8     8  mov x3, x0
0x4cd144cc    12  tbnz w3, #0, #+0x3c (addr 0x4cd14508)
0x4cd144d0    16  cmp x3, #0x0 (0)
0x4cd144d4    20  ccmp x2, #0, #nZcv, ne
0x4cd144d8    24  ccmn x3, x2, #nzcv, eq
0x4cd144dc    28  b.mi #+0x3c (addr 0x4cd14518)
0x4cd144e0    32  smulh x2, x3, x2
0x4cd144e4    36  cmp x2, w2, sxtw
0x4cd144e8    40  lsl x2, x2, #32
0x4cd144ec    44  b.ne #+0x2c (addr 0x4cd14518)
0x4cd144f0    48  mov x0, x2
0x4cd144f4    52  ret
0x4cd144f8    56  movz x16, #0x0
0x4cd144fc    60  sub csp, jssp, #0x10 (16)
0x4cd14500    64  stp fp, lr, [jssp, #-16]!
0x4cd14504    68  bl #+0x24 (addr 0x4cd14528)
0x4cd14508    72  movz x16, #0x8
0x4cd1450c    76  sub csp, jssp, #0x10 (16)
0x4cd14510    80  stp fp, lr, [jssp, #-16]!
0x4cd14514    84  bl #+0x14 (addr 0x4cd14528)
0x4cd14518    88  movz x16, #0x10
0x4cd1451c    92  sub csp, jssp, #0x10 (16)
0x4cd14520    96  stp fp, lr, [jssp, #-16]!
0x4cd14524   100  bl #+0x4 (addr 0x4cd14528)
0x4cd14528   104  movz x17, #0xa00000000
0x4cd1452c   108  sub csp, jssp, #0x10 (16)
0x4cd14530   112  stp x17, cp, [jssp, #-16]!
0x4cd14534   116  add fp, jssp, #0x10 (16)
0x4cd14538   120  ldr x17, pc+24 (addr 0x000000004cd14550)    ;; lazy deoptimization bailout 0
0x4cd1453c   124  add x17, x17, x16
0x4cd14540   128  br x17
0x4cd14544   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd14548   136  d63f03e0       constant
0x4cd1454c   140  d503201f       constant
0x4cd14550   144  4cb06000       constant
0x4cd14554   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14538  runtime entry
0x4cd14544  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2340
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 120)
0x4cd145c0     0  mov x2, x1
0x4cd145c4     4  tbnz w2, #0, #+0x20 (addr 0x4cd145e4)
0x4cd145c8     8  mov x3, x0
0x4cd145cc    12  tbnz w3, #0, #+0x28 (addr 0x4cd145f4)
0x4cd145d0    16  asr x0, x2, #32
0x4cd145d4    20  asr x1, x3, #32
0x4cd145d8    24  asr w0, w0, w1
0x4cd145dc    28  lsl x0, x0, #32
0x4cd145e0    32  ret
0x4cd145e4    36  movz x16, #0x0
0x4cd145e8    40  sub csp, jssp, #0x10 (16)
0x4cd145ec    44  stp fp, lr, [jssp, #-16]!
0x4cd145f0    48  bl #+0x14 (addr 0x4cd14604)
0x4cd145f4    52  movz x16, #0x8
0x4cd145f8    56  sub csp, jssp, #0x10 (16)
0x4cd145fc    60  stp fp, lr, [jssp, #-16]!
0x4cd14600    64  bl #+0x4 (addr 0x4cd14604)
0x4cd14604    68  movz x17, #0xa00000000
0x4cd14608    72  sub csp, jssp, #0x10 (16)
0x4cd1460c    76  stp x17, cp, [jssp, #-16]!
0x4cd14610    80  add fp, jssp, #0x10 (16)
0x4cd14614    84  ldr x17, pc+20 (addr 0x000000004cd14628)    ;; lazy deoptimization bailout 0
0x4cd14618    88  add x17, x17, x16
0x4cd1461c    92  br x17
0x4cd14620    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14624   100  d63f03e0       constant
0x4cd14628   104  4cb06000       constant
0x4cd1462c   108  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14614  runtime entry
0x4cd14620  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2340
type = NORMAL
name = BinaryOpICStub(SAR:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 120)
0x4cd145c0     0  mov x2, x1
0x4cd145c4     4  tbnz w2, #0, #+0x20 (addr 0x4cd145e4)
0x4cd145c8     8  mov x3, x0
0x4cd145cc    12  tbnz w3, #0, #+0x28 (addr 0x4cd145f4)
0x4cd145d0    16  asr x0, x2, #32
0x4cd145d4    20  asr x1, x3, #32
0x4cd145d8    24  asr w0, w0, w1
0x4cd145dc    28  lsl x0, x0, #32
0x4cd145e0    32  ret
0x4cd145e4    36  movz x16, #0x0
0x4cd145e8    40  sub csp, jssp, #0x10 (16)
0x4cd145ec    44  stp fp, lr, [jssp, #-16]!
0x4cd145f0    48  bl #+0x14 (addr 0x4cd14604)
0x4cd145f4    52  movz x16, #0x8
0x4cd145f8    56  sub csp, jssp, #0x10 (16)
0x4cd145fc    60  stp fp, lr, [jssp, #-16]!
0x4cd14600    64  bl #+0x4 (addr 0x4cd14604)
0x4cd14604    68  movz x17, #0xa00000000
0x4cd14608    72  sub csp, jssp, #0x10 (16)
0x4cd1460c    76  stp x17, cp, [jssp, #-16]!
0x4cd14610    80  add fp, jssp, #0x10 (16)
0x4cd14614    84  ldr x17, pc+20 (addr 0x000000004cd14628)    ;; lazy deoptimization bailout 0
0x4cd14618    88  add x17, x17, x16
0x4cd1461c    92  br x17
0x4cd14620    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14624   100  d63f03e0       constant
0x4cd14628   104  4cb06000       constant
0x4cd1462c   108  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14614  runtime entry
0x4cd14620  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2324
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 120)
0x4cd146a0     0  mov x2, x1
0x4cd146a4     4  tbnz w2, #0, #+0x20 (addr 0x4cd146c4)
0x4cd146a8     8  mov x3, x0
0x4cd146ac    12  tbnz w3, #0, #+0x28 (addr 0x4cd146d4)
0x4cd146b0    16  asr x0, x2, #32
0x4cd146b4    20  asr x1, x3, #32
0x4cd146b8    24  asr w0, w0, w1
0x4cd146bc    28  lsl x0, x0, #32
0x4cd146c0    32  ret
0x4cd146c4    36  movz x16, #0x0
0x4cd146c8    40  sub csp, jssp, #0x10 (16)
0x4cd146cc    44  stp fp, lr, [jssp, #-16]!
0x4cd146d0    48  bl #+0x14 (addr 0x4cd146e4)
0x4cd146d4    52  movz x16, #0x8
0x4cd146d8    56  sub csp, jssp, #0x10 (16)
0x4cd146dc    60  stp fp, lr, [jssp, #-16]!
0x4cd146e0    64  bl #+0x4 (addr 0x4cd146e4)
0x4cd146e4    68  movz x17, #0xa00000000
0x4cd146e8    72  sub csp, jssp, #0x10 (16)
0x4cd146ec    76  stp x17, cp, [jssp, #-16]!
0x4cd146f0    80  add fp, jssp, #0x10 (16)
0x4cd146f4    84  ldr x17, pc+20 (addr 0x000000004cd14708)    ;; lazy deoptimization bailout 0
0x4cd146f8    88  add x17, x17, x16
0x4cd146fc    92  br x17
0x4cd14700    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14704   100  d63f03e0       constant
0x4cd14708   104  4cb06000       constant
0x4cd1470c   108  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd146f4  runtime entry
0x4cd14700  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2324
type = NORMAL
name = BinaryOpICStub(SAR:Int32*Smi->Smi)
compiler = crankshaft
Instructions (size = 120)
0x4cd146a0     0  mov x2, x1
0x4cd146a4     4  tbnz w2, #0, #+0x20 (addr 0x4cd146c4)
0x4cd146a8     8  mov x3, x0
0x4cd146ac    12  tbnz w3, #0, #+0x28 (addr 0x4cd146d4)
0x4cd146b0    16  asr x0, x2, #32
0x4cd146b4    20  asr x1, x3, #32
0x4cd146b8    24  asr w0, w0, w1
0x4cd146bc    28  lsl x0, x0, #32
0x4cd146c0    32  ret
0x4cd146c4    36  movz x16, #0x0
0x4cd146c8    40  sub csp, jssp, #0x10 (16)
0x4cd146cc    44  stp fp, lr, [jssp, #-16]!
0x4cd146d0    48  bl #+0x14 (addr 0x4cd146e4)
0x4cd146d4    52  movz x16, #0x8
0x4cd146d8    56  sub csp, jssp, #0x10 (16)
0x4cd146dc    60  stp fp, lr, [jssp, #-16]!
0x4cd146e0    64  bl #+0x4 (addr 0x4cd146e4)
0x4cd146e4    68  movz x17, #0xa00000000
0x4cd146e8    72  sub csp, jssp, #0x10 (16)
0x4cd146ec    76  stp x17, cp, [jssp, #-16]!
0x4cd146f0    80  add fp, jssp, #0x10 (16)
0x4cd146f4    84  ldr x17, pc+20 (addr 0x000000004cd14708)    ;; lazy deoptimization bailout 0
0x4cd146f8    88  add x17, x17, x16
0x4cd146fc    92  br x17
0x4cd14700    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14704   100  d63f03e0       constant
0x4cd14708   104  4cb06000       constant
0x4cd1470c   108  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd146f4  runtime entry
0x4cd14700  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2452
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0x4cd14780     0  mov x2, x0
0x4cd14784     4  tbnz w2, #0, #+0xac (addr 0x4cd14830)
0x4cd14788     8  tbnz w1, #0, #+0x18 (addr 0x4cd147a0)
0x4cd1478c    12  asr x4, x1, #32
0x4cd14790    16  asr x0, x2, #32
0x4cd14794    20  asr w0, w4, w0
0x4cd14798    24  lsl x0, x0, #32
0x4cd1479c    28  ret
0x4cd147a0    32  sub csp, jssp, #0x10 (16)
0x4cd147a4    36  stp fp, lr, [jssp, #-16]!
0x4cd147a8    40  movz fp, #0xa00000000
0x4cd147ac    44  sub csp, jssp, #0x8 (8)
0x4cd147b0    48  str fp, [jssp, #-8]!
0x4cd147b4    52  add fp, jssp, #0x8 (8)
0x4cd147b8    56  ldur x16, [x1, #-1]
0x4cd147bc    60  ldr x17, [x26, #120]
0x4cd147c0    64  cmp x16, x17
0x4cd147c4    68  b.ne #+0x30 (addr 0x4cd147f4)
0x4cd147c8    72  ldur d30, [x1, #7]
0x4cd147cc    76  fcvtzs x4, d30
0x4cd147d0    80  cmp x4, #0x1 (1)
0x4cd147d4    84  ccmn x4, #1, #nzcV, vc
0x4cd147d8    88  b.vc #+0x18 (addr 0x4cd147f0)
0x4cd147dc    92  sub csp, jssp, #0x8 (8)
0x4cd147e0    96  str lr, [jssp, #-8]!
0x4cd147e4   100  ldr x16, pc+68 (addr 0x000000004cd14828)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd147e8   104  blr x16
0x4cd147ec   108  ldr lr, [jssp], #8
0x4cd147f0   112  b #+0x24 (addr 0x4cd14814)
0x4cd147f4   116  ldp x4, x3, [x26, #64]
0x4cd147f8   120  cmp x1, x4
0x4cd147fc   124  cset x4, eq
0x4cd14800   128  ccmp x1, x3, #nZcv, ne
0x4cd14804   132  b.eq #+0x10 (addr 0x4cd14814)
0x4cd14808   136  ldr x16, [x26, #40]
0x4cd1480c   140  cmp x1, x16
0x4cd14810   144  b.ne #+0x30 (addr 0x4cd14840)
0x4cd14814   148  ldr lr, [jssp, #16]
0x4cd14818   152  ldp xzr, fp, [jssp], #24
0x4cd1481c   156  b #-0x8c (addr 0x4cd14790)
0x4cd14820   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14824   164  d63f03e0       constant
0x4cd14828   168  4cd0fee0       constant
0x4cd1482c   172  00000000       constant
0x4cd14830   176  movz x16, #0x0
0x4cd14834   180  sub csp, jssp, #0x10 (16)
0x4cd14838   184  stp fp, lr, [jssp, #-16]!
0x4cd1483c   188  bl #+0xc (addr 0x4cd14848)
0x4cd14840   192  movz x16, #0x8
0x4cd14844   196  bl #+0x14 (addr 0x4cd14858)
0x4cd14848   200  movz x17, #0xa00000000
0x4cd1484c   204  sub csp, jssp, #0x10 (16)
0x4cd14850   208  stp x17, cp, [jssp, #-16]!
0x4cd14854   212  add fp, jssp, #0x10 (16)
0x4cd14858   216  ldr x17, pc+24 (addr 0x000000004cd14870)    ;; lazy deoptimization bailout 0
0x4cd1485c   220  add x17, x17, x16
0x4cd14860   224  br x17
0x4cd14864   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd14868   232  d63f03e0       constant
0x4cd1486c   236  d503201f       constant
0x4cd14870   240  4cb06000       constant
0x4cd14874   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd147e4  code target (STUB)  (0x4cd0fee0)
0x4cd14820  constant pool (size 16)
0x4cd14858  runtime entry
0x4cd14864  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2452
type = NORMAL
name = BinaryOpICStub(SAR:Number*Smi->Smi)
compiler = crankshaft
Instructions (size = 256)
0x4cd14780     0  mov x2, x0
0x4cd14784     4  tbnz w2, #0, #+0xac (addr 0x4cd14830)
0x4cd14788     8  tbnz w1, #0, #+0x18 (addr 0x4cd147a0)
0x4cd1478c    12  asr x4, x1, #32
0x4cd14790    16  asr x0, x2, #32
0x4cd14794    20  asr w0, w4, w0
0x4cd14798    24  lsl x0, x0, #32
0x4cd1479c    28  ret
0x4cd147a0    32  sub csp, jssp, #0x10 (16)
0x4cd147a4    36  stp fp, lr, [jssp, #-16]!
0x4cd147a8    40  movz fp, #0xa00000000
0x4cd147ac    44  sub csp, jssp, #0x8 (8)
0x4cd147b0    48  str fp, [jssp, #-8]!
0x4cd147b4    52  add fp, jssp, #0x8 (8)
0x4cd147b8    56  ldur x16, [x1, #-1]
0x4cd147bc    60  ldr x17, [x26, #120]
0x4cd147c0    64  cmp x16, x17
0x4cd147c4    68  b.ne #+0x30 (addr 0x4cd147f4)
0x4cd147c8    72  ldur d30, [x1, #7]
0x4cd147cc    76  fcvtzs x4, d30
0x4cd147d0    80  cmp x4, #0x1 (1)
0x4cd147d4    84  ccmn x4, #1, #nzcV, vc
0x4cd147d8    88  b.vc #+0x18 (addr 0x4cd147f0)
0x4cd147dc    92  sub csp, jssp, #0x8 (8)
0x4cd147e0    96  str lr, [jssp, #-8]!
0x4cd147e4   100  ldr x16, pc+68 (addr 0x000000004cd14828)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd147e8   104  blr x16
0x4cd147ec   108  ldr lr, [jssp], #8
0x4cd147f0   112  b #+0x24 (addr 0x4cd14814)
0x4cd147f4   116  ldp x4, x3, [x26, #64]
0x4cd147f8   120  cmp x1, x4
0x4cd147fc   124  cset x4, eq
0x4cd14800   128  ccmp x1, x3, #nZcv, ne
0x4cd14804   132  b.eq #+0x10 (addr 0x4cd14814)
0x4cd14808   136  ldr x16, [x26, #40]
0x4cd1480c   140  cmp x1, x16
0x4cd14810   144  b.ne #+0x30 (addr 0x4cd14840)
0x4cd14814   148  ldr lr, [jssp, #16]
0x4cd14818   152  ldp xzr, fp, [jssp], #24
0x4cd1481c   156  b #-0x8c (addr 0x4cd14790)
0x4cd14820   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14824   164  d63f03e0       constant
0x4cd14828   168  4cd0fee0       constant
0x4cd1482c   172  00000000       constant
0x4cd14830   176  movz x16, #0x0
0x4cd14834   180  sub csp, jssp, #0x10 (16)
0x4cd14838   184  stp fp, lr, [jssp, #-16]!
0x4cd1483c   188  bl #+0xc (addr 0x4cd14848)
0x4cd14840   192  movz x16, #0x8
0x4cd14844   196  bl #+0x14 (addr 0x4cd14858)
0x4cd14848   200  movz x17, #0xa00000000
0x4cd1484c   204  sub csp, jssp, #0x10 (16)
0x4cd14850   208  stp x17, cp, [jssp, #-16]!
0x4cd14854   212  add fp, jssp, #0x10 (16)
0x4cd14858   216  ldr x17, pc+24 (addr 0x000000004cd14870)    ;; lazy deoptimization bailout 0
0x4cd1485c   220  add x17, x17, x16
0x4cd14860   224  br x17
0x4cd14864   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd14868   232  d63f03e0       constant
0x4cd1486c   236  d503201f       constant
0x4cd14870   240  4cb06000       constant
0x4cd14874   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd147e4  code target (STUB)  (0x4cd0fee0)
0x4cd14820  constant pool (size 16)
0x4cd14858  runtime entry
0x4cd14864  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2196
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 120)
0x4cd148e0     0  mov x2, x1
0x4cd148e4     4  tbnz w2, #0, #+0x20 (addr 0x4cd14904)
0x4cd148e8     8  mov x3, x0
0x4cd148ec    12  tbnz w3, #0, #+0x28 (addr 0x4cd14914)
0x4cd148f0    16  asr x0, x2, #32
0x4cd148f4    20  asr x1, x3, #32
0x4cd148f8    24  asr w0, w0, w1
0x4cd148fc    28  lsl x0, x0, #32
0x4cd14900    32  ret
0x4cd14904    36  movz x16, #0x0
0x4cd14908    40  sub csp, jssp, #0x10 (16)
0x4cd1490c    44  stp fp, lr, [jssp, #-16]!
0x4cd14910    48  bl #+0x14 (addr 0x4cd14924)
0x4cd14914    52  movz x16, #0x8
0x4cd14918    56  sub csp, jssp, #0x10 (16)
0x4cd1491c    60  stp fp, lr, [jssp, #-16]!
0x4cd14920    64  bl #+0x4 (addr 0x4cd14924)
0x4cd14924    68  movz x17, #0xa00000000
0x4cd14928    72  sub csp, jssp, #0x10 (16)
0x4cd1492c    76  stp x17, cp, [jssp, #-16]!
0x4cd14930    80  add fp, jssp, #0x10 (16)
0x4cd14934    84  ldr x17, pc+20 (addr 0x000000004cd14948)    ;; lazy deoptimization bailout 0
0x4cd14938    88  add x17, x17, x16
0x4cd1493c    92  br x17
0x4cd14940    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14944   100  d63f03e0       constant
0x4cd14948   104  4cb06000       constant
0x4cd1494c   108  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14934  runtime entry
0x4cd14940  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2196
type = NORMAL
name = BinaryOpICStub(SAR:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 120)
0x4cd148e0     0  mov x2, x1
0x4cd148e4     4  tbnz w2, #0, #+0x20 (addr 0x4cd14904)
0x4cd148e8     8  mov x3, x0
0x4cd148ec    12  tbnz w3, #0, #+0x28 (addr 0x4cd14914)
0x4cd148f0    16  asr x0, x2, #32
0x4cd148f4    20  asr x1, x3, #32
0x4cd148f8    24  asr w0, w0, w1
0x4cd148fc    28  lsl x0, x0, #32
0x4cd14900    32  ret
0x4cd14904    36  movz x16, #0x0
0x4cd14908    40  sub csp, jssp, #0x10 (16)
0x4cd1490c    44  stp fp, lr, [jssp, #-16]!
0x4cd14910    48  bl #+0x14 (addr 0x4cd14924)
0x4cd14914    52  movz x16, #0x8
0x4cd14918    56  sub csp, jssp, #0x10 (16)
0x4cd1491c    60  stp fp, lr, [jssp, #-16]!
0x4cd14920    64  bl #+0x4 (addr 0x4cd14924)
0x4cd14924    68  movz x17, #0xa00000000
0x4cd14928    72  sub csp, jssp, #0x10 (16)
0x4cd1492c    76  stp x17, cp, [jssp, #-16]!
0x4cd14930    80  add fp, jssp, #0x10 (16)
0x4cd14934    84  ldr x17, pc+20 (addr 0x000000004cd14948)    ;; lazy deoptimization bailout 0
0x4cd14938    88  add x17, x17, x16
0x4cd1493c    92  br x17
0x4cd14940    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14944   100  d63f03e0       constant
0x4cd14948   104  4cb06000       constant
0x4cd1494c   108  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14934  runtime entry
0x4cd14940  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2339
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 120)
0x4cd149c0     0  mov x2, x1
0x4cd149c4     4  tbnz w2, #0, #+0x20 (addr 0x4cd149e4)
0x4cd149c8     8  mov x3, x0
0x4cd149cc    12  tbnz w3, #0, #+0x28 (addr 0x4cd149f4)
0x4cd149d0    16  asr x0, x2, #32
0x4cd149d4    20  asr x1, x3, #32
0x4cd149d8    24  lsl w0, w0, w1
0x4cd149dc    28  lsl x0, x0, #32
0x4cd149e0    32  ret
0x4cd149e4    36  movz x16, #0x0
0x4cd149e8    40  sub csp, jssp, #0x10 (16)
0x4cd149ec    44  stp fp, lr, [jssp, #-16]!
0x4cd149f0    48  bl #+0x14 (addr 0x4cd14a04)
0x4cd149f4    52  movz x16, #0x8
0x4cd149f8    56  sub csp, jssp, #0x10 (16)
0x4cd149fc    60  stp fp, lr, [jssp, #-16]!
0x4cd14a00    64  bl #+0x4 (addr 0x4cd14a04)
0x4cd14a04    68  movz x17, #0xa00000000
0x4cd14a08    72  sub csp, jssp, #0x10 (16)
0x4cd14a0c    76  stp x17, cp, [jssp, #-16]!
0x4cd14a10    80  add fp, jssp, #0x10 (16)
0x4cd14a14    84  ldr x17, pc+20 (addr 0x000000004cd14a28)    ;; lazy deoptimization bailout 0
0x4cd14a18    88  add x17, x17, x16
0x4cd14a1c    92  br x17
0x4cd14a20    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14a24   100  d63f03e0       constant
0x4cd14a28   104  4cb06000       constant
0x4cd14a2c   108  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14a14  runtime entry
0x4cd14a20  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2339
type = NORMAL
name = BinaryOpICStub(SHL:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 120)
0x4cd149c0     0  mov x2, x1
0x4cd149c4     4  tbnz w2, #0, #+0x20 (addr 0x4cd149e4)
0x4cd149c8     8  mov x3, x0
0x4cd149cc    12  tbnz w3, #0, #+0x28 (addr 0x4cd149f4)
0x4cd149d0    16  asr x0, x2, #32
0x4cd149d4    20  asr x1, x3, #32
0x4cd149d8    24  lsl w0, w0, w1
0x4cd149dc    28  lsl x0, x0, #32
0x4cd149e0    32  ret
0x4cd149e4    36  movz x16, #0x0
0x4cd149e8    40  sub csp, jssp, #0x10 (16)
0x4cd149ec    44  stp fp, lr, [jssp, #-16]!
0x4cd149f0    48  bl #+0x14 (addr 0x4cd14a04)
0x4cd149f4    52  movz x16, #0x8
0x4cd149f8    56  sub csp, jssp, #0x10 (16)
0x4cd149fc    60  stp fp, lr, [jssp, #-16]!
0x4cd14a00    64  bl #+0x4 (addr 0x4cd14a04)
0x4cd14a04    68  movz x17, #0xa00000000
0x4cd14a08    72  sub csp, jssp, #0x10 (16)
0x4cd14a0c    76  stp x17, cp, [jssp, #-16]!
0x4cd14a10    80  add fp, jssp, #0x10 (16)
0x4cd14a14    84  ldr x17, pc+20 (addr 0x000000004cd14a28)    ;; lazy deoptimization bailout 0
0x4cd14a18    88  add x17, x17, x16
0x4cd14a1c    92  br x17
0x4cd14a20    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14a24   100  d63f03e0       constant
0x4cd14a28   104  4cb06000       constant
0x4cd14a2c   108  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14a14  runtime entry
0x4cd14a20  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2323
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 120)
0x4cd14aa0     0  mov x2, x1
0x4cd14aa4     4  tbnz w2, #0, #+0x20 (addr 0x4cd14ac4)
0x4cd14aa8     8  mov x3, x0
0x4cd14aac    12  tbnz w3, #0, #+0x28 (addr 0x4cd14ad4)
0x4cd14ab0    16  asr x0, x2, #32
0x4cd14ab4    20  asr x1, x3, #32
0x4cd14ab8    24  lsl w0, w0, w1
0x4cd14abc    28  lsl x0, x0, #32
0x4cd14ac0    32  ret
0x4cd14ac4    36  movz x16, #0x0
0x4cd14ac8    40  sub csp, jssp, #0x10 (16)
0x4cd14acc    44  stp fp, lr, [jssp, #-16]!
0x4cd14ad0    48  bl #+0x14 (addr 0x4cd14ae4)
0x4cd14ad4    52  movz x16, #0x8
0x4cd14ad8    56  sub csp, jssp, #0x10 (16)
0x4cd14adc    60  stp fp, lr, [jssp, #-16]!
0x4cd14ae0    64  bl #+0x4 (addr 0x4cd14ae4)
0x4cd14ae4    68  movz x17, #0xa00000000
0x4cd14ae8    72  sub csp, jssp, #0x10 (16)
0x4cd14aec    76  stp x17, cp, [jssp, #-16]!
0x4cd14af0    80  add fp, jssp, #0x10 (16)
0x4cd14af4    84  ldr x17, pc+20 (addr 0x000000004cd14b08)    ;; lazy deoptimization bailout 0
0x4cd14af8    88  add x17, x17, x16
0x4cd14afc    92  br x17
0x4cd14b00    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14b04   100  d63f03e0       constant
0x4cd14b08   104  4cb06000       constant
0x4cd14b0c   108  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14af4  runtime entry
0x4cd14b00  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2323
type = NORMAL
name = BinaryOpICStub(SHL:Int32*Smi->Smi)
compiler = crankshaft
Instructions (size = 120)
0x4cd14aa0     0  mov x2, x1
0x4cd14aa4     4  tbnz w2, #0, #+0x20 (addr 0x4cd14ac4)
0x4cd14aa8     8  mov x3, x0
0x4cd14aac    12  tbnz w3, #0, #+0x28 (addr 0x4cd14ad4)
0x4cd14ab0    16  asr x0, x2, #32
0x4cd14ab4    20  asr x1, x3, #32
0x4cd14ab8    24  lsl w0, w0, w1
0x4cd14abc    28  lsl x0, x0, #32
0x4cd14ac0    32  ret
0x4cd14ac4    36  movz x16, #0x0
0x4cd14ac8    40  sub csp, jssp, #0x10 (16)
0x4cd14acc    44  stp fp, lr, [jssp, #-16]!
0x4cd14ad0    48  bl #+0x14 (addr 0x4cd14ae4)
0x4cd14ad4    52  movz x16, #0x8
0x4cd14ad8    56  sub csp, jssp, #0x10 (16)
0x4cd14adc    60  stp fp, lr, [jssp, #-16]!
0x4cd14ae0    64  bl #+0x4 (addr 0x4cd14ae4)
0x4cd14ae4    68  movz x17, #0xa00000000
0x4cd14ae8    72  sub csp, jssp, #0x10 (16)
0x4cd14aec    76  stp x17, cp, [jssp, #-16]!
0x4cd14af0    80  add fp, jssp, #0x10 (16)
0x4cd14af4    84  ldr x17, pc+20 (addr 0x000000004cd14b08)    ;; lazy deoptimization bailout 0
0x4cd14af8    88  add x17, x17, x16
0x4cd14afc    92  br x17
0x4cd14b00    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14b04   100  d63f03e0       constant
0x4cd14b08   104  4cb06000       constant
0x4cd14b0c   108  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14af4  runtime entry
0x4cd14b00  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2451
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 256)
0x4cd14b80     0  mov x2, x0
0x4cd14b84     4  tbnz w2, #0, #+0xac (addr 0x4cd14c30)
0x4cd14b88     8  tbnz w1, #0, #+0x18 (addr 0x4cd14ba0)
0x4cd14b8c    12  asr x4, x1, #32
0x4cd14b90    16  asr x0, x2, #32
0x4cd14b94    20  lsl w0, w4, w0
0x4cd14b98    24  lsl x0, x0, #32
0x4cd14b9c    28  ret
0x4cd14ba0    32  sub csp, jssp, #0x10 (16)
0x4cd14ba4    36  stp fp, lr, [jssp, #-16]!
0x4cd14ba8    40  movz fp, #0xa00000000
0x4cd14bac    44  sub csp, jssp, #0x8 (8)
0x4cd14bb0    48  str fp, [jssp, #-8]!
0x4cd14bb4    52  add fp, jssp, #0x8 (8)
0x4cd14bb8    56  ldur x16, [x1, #-1]
0x4cd14bbc    60  ldr x17, [x26, #120]
0x4cd14bc0    64  cmp x16, x17
0x4cd14bc4    68  b.ne #+0x30 (addr 0x4cd14bf4)
0x4cd14bc8    72  ldur d30, [x1, #7]
0x4cd14bcc    76  fcvtzs x4, d30
0x4cd14bd0    80  cmp x4, #0x1 (1)
0x4cd14bd4    84  ccmn x4, #1, #nzcV, vc
0x4cd14bd8    88  b.vc #+0x18 (addr 0x4cd14bf0)
0x4cd14bdc    92  sub csp, jssp, #0x8 (8)
0x4cd14be0    96  str lr, [jssp, #-8]!
0x4cd14be4   100  ldr x16, pc+68 (addr 0x000000004cd14c28)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd14be8   104  blr x16
0x4cd14bec   108  ldr lr, [jssp], #8
0x4cd14bf0   112  b #+0x24 (addr 0x4cd14c14)
0x4cd14bf4   116  ldp x4, x3, [x26, #64]
0x4cd14bf8   120  cmp x1, x4
0x4cd14bfc   124  cset x4, eq
0x4cd14c00   128  ccmp x1, x3, #nZcv, ne
0x4cd14c04   132  b.eq #+0x10 (addr 0x4cd14c14)
0x4cd14c08   136  ldr x16, [x26, #40]
0x4cd14c0c   140  cmp x1, x16
0x4cd14c10   144  b.ne #+0x30 (addr 0x4cd14c40)
0x4cd14c14   148  ldr lr, [jssp, #16]
0x4cd14c18   152  ldp xzr, fp, [jssp], #24
0x4cd14c1c   156  b #-0x8c (addr 0x4cd14b90)
0x4cd14c20   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14c24   164  d63f03e0       constant
0x4cd14c28   168  4cd0fee0       constant
0x4cd14c2c   172  00000000       constant
0x4cd14c30   176  movz x16, #0x0
0x4cd14c34   180  sub csp, jssp, #0x10 (16)
0x4cd14c38   184  stp fp, lr, [jssp, #-16]!
0x4cd14c3c   188  bl #+0xc (addr 0x4cd14c48)
0x4cd14c40   192  movz x16, #0x8
0x4cd14c44   196  bl #+0x14 (addr 0x4cd14c58)
0x4cd14c48   200  movz x17, #0xa00000000
0x4cd14c4c   204  sub csp, jssp, #0x10 (16)
0x4cd14c50   208  stp x17, cp, [jssp, #-16]!
0x4cd14c54   212  add fp, jssp, #0x10 (16)
0x4cd14c58   216  ldr x17, pc+24 (addr 0x000000004cd14c70)    ;; lazy deoptimization bailout 0
0x4cd14c5c   220  add x17, x17, x16
0x4cd14c60   224  br x17
0x4cd14c64   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd14c68   232  d63f03e0       constant
0x4cd14c6c   236  d503201f       constant
0x4cd14c70   240  4cb06000       constant
0x4cd14c74   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd14be4  code target (STUB)  (0x4cd0fee0)
0x4cd14c20  constant pool (size 16)
0x4cd14c58  runtime entry
0x4cd14c64  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2451
type = NORMAL
name = BinaryOpICStub(SHL:Number*Smi->Smi)
compiler = crankshaft
Instructions (size = 256)
0x4cd14b80     0  mov x2, x0
0x4cd14b84     4  tbnz w2, #0, #+0xac (addr 0x4cd14c30)
0x4cd14b88     8  tbnz w1, #0, #+0x18 (addr 0x4cd14ba0)
0x4cd14b8c    12  asr x4, x1, #32
0x4cd14b90    16  asr x0, x2, #32
0x4cd14b94    20  lsl w0, w4, w0
0x4cd14b98    24  lsl x0, x0, #32
0x4cd14b9c    28  ret
0x4cd14ba0    32  sub csp, jssp, #0x10 (16)
0x4cd14ba4    36  stp fp, lr, [jssp, #-16]!
0x4cd14ba8    40  movz fp, #0xa00000000
0x4cd14bac    44  sub csp, jssp, #0x8 (8)
0x4cd14bb0    48  str fp, [jssp, #-8]!
0x4cd14bb4    52  add fp, jssp, #0x8 (8)
0x4cd14bb8    56  ldur x16, [x1, #-1]
0x4cd14bbc    60  ldr x17, [x26, #120]
0x4cd14bc0    64  cmp x16, x17
0x4cd14bc4    68  b.ne #+0x30 (addr 0x4cd14bf4)
0x4cd14bc8    72  ldur d30, [x1, #7]
0x4cd14bcc    76  fcvtzs x4, d30
0x4cd14bd0    80  cmp x4, #0x1 (1)
0x4cd14bd4    84  ccmn x4, #1, #nzcV, vc
0x4cd14bd8    88  b.vc #+0x18 (addr 0x4cd14bf0)
0x4cd14bdc    92  sub csp, jssp, #0x8 (8)
0x4cd14be0    96  str lr, [jssp, #-8]!
0x4cd14be4   100  ldr x16, pc+68 (addr 0x000000004cd14c28)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd14be8   104  blr x16
0x4cd14bec   108  ldr lr, [jssp], #8
0x4cd14bf0   112  b #+0x24 (addr 0x4cd14c14)
0x4cd14bf4   116  ldp x4, x3, [x26, #64]
0x4cd14bf8   120  cmp x1, x4
0x4cd14bfc   124  cset x4, eq
0x4cd14c00   128  ccmp x1, x3, #nZcv, ne
0x4cd14c04   132  b.eq #+0x10 (addr 0x4cd14c14)
0x4cd14c08   136  ldr x16, [x26, #40]
0x4cd14c0c   140  cmp x1, x16
0x4cd14c10   144  b.ne #+0x30 (addr 0x4cd14c40)
0x4cd14c14   148  ldr lr, [jssp, #16]
0x4cd14c18   152  ldp xzr, fp, [jssp], #24
0x4cd14c1c   156  b #-0x8c (addr 0x4cd14b90)
0x4cd14c20   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14c24   164  d63f03e0       constant
0x4cd14c28   168  4cd0fee0       constant
0x4cd14c2c   172  00000000       constant
0x4cd14c30   176  movz x16, #0x0
0x4cd14c34   180  sub csp, jssp, #0x10 (16)
0x4cd14c38   184  stp fp, lr, [jssp, #-16]!
0x4cd14c3c   188  bl #+0xc (addr 0x4cd14c48)
0x4cd14c40   192  movz x16, #0x8
0x4cd14c44   196  bl #+0x14 (addr 0x4cd14c58)
0x4cd14c48   200  movz x17, #0xa00000000
0x4cd14c4c   204  sub csp, jssp, #0x10 (16)
0x4cd14c50   208  stp x17, cp, [jssp, #-16]!
0x4cd14c54   212  add fp, jssp, #0x10 (16)
0x4cd14c58   216  ldr x17, pc+24 (addr 0x000000004cd14c70)    ;; lazy deoptimization bailout 0
0x4cd14c5c   220  add x17, x17, x16
0x4cd14c60   224  br x17
0x4cd14c64   228  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd14c68   232  d63f03e0       constant
0x4cd14c6c   236  d503201f       constant
0x4cd14c70   240  4cb06000       constant
0x4cd14c74   244  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cd14be4  code target (STUB)  (0x4cd0fee0)
0x4cd14c20  constant pool (size 16)
0x4cd14c58  runtime entry
0x4cd14c64  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2211
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 120)
0x4cd14ce0     0  mov x2, x1
0x4cd14ce4     4  tbnz w2, #0, #+0x20 (addr 0x4cd14d04)
0x4cd14ce8     8  mov x3, x0
0x4cd14cec    12  tbnz w3, #0, #+0x28 (addr 0x4cd14d14)
0x4cd14cf0    16  asr x0, x2, #32
0x4cd14cf4    20  asr x1, x3, #32
0x4cd14cf8    24  lsl w0, w0, w1
0x4cd14cfc    28  lsl x0, x0, #32
0x4cd14d00    32  ret
0x4cd14d04    36  movz x16, #0x0
0x4cd14d08    40  sub csp, jssp, #0x10 (16)
0x4cd14d0c    44  stp fp, lr, [jssp, #-16]!
0x4cd14d10    48  bl #+0x14 (addr 0x4cd14d24)
0x4cd14d14    52  movz x16, #0x8
0x4cd14d18    56  sub csp, jssp, #0x10 (16)
0x4cd14d1c    60  stp fp, lr, [jssp, #-16]!
0x4cd14d20    64  bl #+0x4 (addr 0x4cd14d24)
0x4cd14d24    68  movz x17, #0xa00000000
0x4cd14d28    72  sub csp, jssp, #0x10 (16)
0x4cd14d2c    76  stp x17, cp, [jssp, #-16]!
0x4cd14d30    80  add fp, jssp, #0x10 (16)
0x4cd14d34    84  ldr x17, pc+20 (addr 0x000000004cd14d48)    ;; lazy deoptimization bailout 0
0x4cd14d38    88  add x17, x17, x16
0x4cd14d3c    92  br x17
0x4cd14d40    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14d44   100  d63f03e0       constant
0x4cd14d48   104  4cb06000       constant
0x4cd14d4c   108  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14d34  runtime entry
0x4cd14d40  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2211
type = NORMAL
name = BinaryOpICStub(SHL:Smi*Smi->Int32)
compiler = crankshaft
Instructions (size = 120)
0x4cd14ce0     0  mov x2, x1
0x4cd14ce4     4  tbnz w2, #0, #+0x20 (addr 0x4cd14d04)
0x4cd14ce8     8  mov x3, x0
0x4cd14cec    12  tbnz w3, #0, #+0x28 (addr 0x4cd14d14)
0x4cd14cf0    16  asr x0, x2, #32
0x4cd14cf4    20  asr x1, x3, #32
0x4cd14cf8    24  lsl w0, w0, w1
0x4cd14cfc    28  lsl x0, x0, #32
0x4cd14d00    32  ret
0x4cd14d04    36  movz x16, #0x0
0x4cd14d08    40  sub csp, jssp, #0x10 (16)
0x4cd14d0c    44  stp fp, lr, [jssp, #-16]!
0x4cd14d10    48  bl #+0x14 (addr 0x4cd14d24)
0x4cd14d14    52  movz x16, #0x8
0x4cd14d18    56  sub csp, jssp, #0x10 (16)
0x4cd14d1c    60  stp fp, lr, [jssp, #-16]!
0x4cd14d20    64  bl #+0x4 (addr 0x4cd14d24)
0x4cd14d24    68  movz x17, #0xa00000000
0x4cd14d28    72  sub csp, jssp, #0x10 (16)
0x4cd14d2c    76  stp x17, cp, [jssp, #-16]!
0x4cd14d30    80  add fp, jssp, #0x10 (16)
0x4cd14d34    84  ldr x17, pc+20 (addr 0x000000004cd14d48)    ;; lazy deoptimization bailout 0
0x4cd14d38    88  add x17, x17, x16
0x4cd14d3c    92  br x17
0x4cd14d40    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14d44   100  d63f03e0       constant
0x4cd14d48   104  4cb06000       constant
0x4cd14d4c   108  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14d34  runtime entry
0x4cd14d40  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2195
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 120)
0x4cd14dc0     0  mov x2, x1
0x4cd14dc4     4  tbnz w2, #0, #+0x20 (addr 0x4cd14de4)
0x4cd14dc8     8  mov x3, x0
0x4cd14dcc    12  tbnz w3, #0, #+0x28 (addr 0x4cd14df4)
0x4cd14dd0    16  asr x0, x2, #32
0x4cd14dd4    20  asr x1, x3, #32
0x4cd14dd8    24  lsl w0, w0, w1
0x4cd14ddc    28  lsl x0, x0, #32
0x4cd14de0    32  ret
0x4cd14de4    36  movz x16, #0x0
0x4cd14de8    40  sub csp, jssp, #0x10 (16)
0x4cd14dec    44  stp fp, lr, [jssp, #-16]!
0x4cd14df0    48  bl #+0x14 (addr 0x4cd14e04)
0x4cd14df4    52  movz x16, #0x8
0x4cd14df8    56  sub csp, jssp, #0x10 (16)
0x4cd14dfc    60  stp fp, lr, [jssp, #-16]!
0x4cd14e00    64  bl #+0x4 (addr 0x4cd14e04)
0x4cd14e04    68  movz x17, #0xa00000000
0x4cd14e08    72  sub csp, jssp, #0x10 (16)
0x4cd14e0c    76  stp x17, cp, [jssp, #-16]!
0x4cd14e10    80  add fp, jssp, #0x10 (16)
0x4cd14e14    84  ldr x17, pc+20 (addr 0x000000004cd14e28)    ;; lazy deoptimization bailout 0
0x4cd14e18    88  add x17, x17, x16
0x4cd14e1c    92  br x17
0x4cd14e20    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14e24   100  d63f03e0       constant
0x4cd14e28   104  4cb06000       constant
0x4cd14e2c   108  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14e14  runtime entry
0x4cd14e20  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2195
type = NORMAL
name = BinaryOpICStub(SHL:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 120)
0x4cd14dc0     0  mov x2, x1
0x4cd14dc4     4  tbnz w2, #0, #+0x20 (addr 0x4cd14de4)
0x4cd14dc8     8  mov x3, x0
0x4cd14dcc    12  tbnz w3, #0, #+0x28 (addr 0x4cd14df4)
0x4cd14dd0    16  asr x0, x2, #32
0x4cd14dd4    20  asr x1, x3, #32
0x4cd14dd8    24  lsl w0, w0, w1
0x4cd14ddc    28  lsl x0, x0, #32
0x4cd14de0    32  ret
0x4cd14de4    36  movz x16, #0x0
0x4cd14de8    40  sub csp, jssp, #0x10 (16)
0x4cd14dec    44  stp fp, lr, [jssp, #-16]!
0x4cd14df0    48  bl #+0x14 (addr 0x4cd14e04)
0x4cd14df4    52  movz x16, #0x8
0x4cd14df8    56  sub csp, jssp, #0x10 (16)
0x4cd14dfc    60  stp fp, lr, [jssp, #-16]!
0x4cd14e00    64  bl #+0x4 (addr 0x4cd14e04)
0x4cd14e04    68  movz x17, #0xa00000000
0x4cd14e08    72  sub csp, jssp, #0x10 (16)
0x4cd14e0c    76  stp x17, cp, [jssp, #-16]!
0x4cd14e10    80  add fp, jssp, #0x10 (16)
0x4cd14e14    84  ldr x17, pc+20 (addr 0x000000004cd14e28)    ;; lazy deoptimization bailout 0
0x4cd14e18    88  add x17, x17, x16
0x4cd14e1c    92  br x17
0x4cd14e20    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14e24   100  d63f03e0       constant
0x4cd14e28   104  4cb06000       constant
0x4cd14e2c   108  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14e14  runtime entry
0x4cd14e20  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2325
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 144)
0x4cd14ea0     0  mov x2, x1
0x4cd14ea4     4  tbnz w2, #0, #+0x28 (addr 0x4cd14ecc)
0x4cd14ea8     8  mov x3, x0
0x4cd14eac    12  tbnz w3, #0, #+0x30 (addr 0x4cd14edc)
0x4cd14eb0    16  asr x2, x2, #32
0x4cd14eb4    20  asr x3, x3, #32
0x4cd14eb8    24  lsr w2, w2, w3
0x4cd14ebc    28  tbnz w2, #31, #+0x30 (addr 0x4cd14eec)
0x4cd14ec0    32  lsl x2, x2, #32
0x4cd14ec4    36  mov x0, x2
0x4cd14ec8    40  ret
0x4cd14ecc    44  movz x16, #0x0
0x4cd14ed0    48  sub csp, jssp, #0x10 (16)
0x4cd14ed4    52  stp fp, lr, [jssp, #-16]!
0x4cd14ed8    56  bl #+0x24 (addr 0x4cd14efc)
0x4cd14edc    60  movz x16, #0x8
0x4cd14ee0    64  sub csp, jssp, #0x10 (16)
0x4cd14ee4    68  stp fp, lr, [jssp, #-16]!
0x4cd14ee8    72  bl #+0x14 (addr 0x4cd14efc)
0x4cd14eec    76  movz x16, #0x10
0x4cd14ef0    80  sub csp, jssp, #0x10 (16)
0x4cd14ef4    84  stp fp, lr, [jssp, #-16]!
0x4cd14ef8    88  bl #+0x4 (addr 0x4cd14efc)
0x4cd14efc    92  movz x17, #0xa00000000
0x4cd14f00    96  sub csp, jssp, #0x10 (16)
0x4cd14f04   100  stp x17, cp, [jssp, #-16]!
0x4cd14f08   104  add fp, jssp, #0x10 (16)
0x4cd14f0c   108  ldr x17, pc+20 (addr 0x000000004cd14f20)    ;; lazy deoptimization bailout 0
0x4cd14f10   112  add x17, x17, x16
0x4cd14f14   116  br x17
0x4cd14f18   120  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14f1c   124  d63f03e0       constant
0x4cd14f20   128  4cb06000       constant
0x4cd14f24   132  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14f0c  runtime entry
0x4cd14f18  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2325
type = NORMAL
name = BinaryOpICStub(SHR:Int32*Smi->Smi)
compiler = crankshaft
Instructions (size = 144)
0x4cd14ea0     0  mov x2, x1
0x4cd14ea4     4  tbnz w2, #0, #+0x28 (addr 0x4cd14ecc)
0x4cd14ea8     8  mov x3, x0
0x4cd14eac    12  tbnz w3, #0, #+0x30 (addr 0x4cd14edc)
0x4cd14eb0    16  asr x2, x2, #32
0x4cd14eb4    20  asr x3, x3, #32
0x4cd14eb8    24  lsr w2, w2, w3
0x4cd14ebc    28  tbnz w2, #31, #+0x30 (addr 0x4cd14eec)
0x4cd14ec0    32  lsl x2, x2, #32
0x4cd14ec4    36  mov x0, x2
0x4cd14ec8    40  ret
0x4cd14ecc    44  movz x16, #0x0
0x4cd14ed0    48  sub csp, jssp, #0x10 (16)
0x4cd14ed4    52  stp fp, lr, [jssp, #-16]!
0x4cd14ed8    56  bl #+0x24 (addr 0x4cd14efc)
0x4cd14edc    60  movz x16, #0x8
0x4cd14ee0    64  sub csp, jssp, #0x10 (16)
0x4cd14ee4    68  stp fp, lr, [jssp, #-16]!
0x4cd14ee8    72  bl #+0x14 (addr 0x4cd14efc)
0x4cd14eec    76  movz x16, #0x10
0x4cd14ef0    80  sub csp, jssp, #0x10 (16)
0x4cd14ef4    84  stp fp, lr, [jssp, #-16]!
0x4cd14ef8    88  bl #+0x4 (addr 0x4cd14efc)
0x4cd14efc    92  movz x17, #0xa00000000
0x4cd14f00    96  sub csp, jssp, #0x10 (16)
0x4cd14f04   100  stp x17, cp, [jssp, #-16]!
0x4cd14f08   104  add fp, jssp, #0x10 (16)
0x4cd14f0c   108  ldr x17, pc+20 (addr 0x000000004cd14f20)    ;; lazy deoptimization bailout 0
0x4cd14f10   112  add x17, x17, x16
0x4cd14f14   116  br x17
0x4cd14f18   120  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd14f1c   124  d63f03e0       constant
0x4cd14f20   128  4cb06000       constant
0x4cd14f24   132  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd14f0c  runtime entry
0x4cd14f18  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2469
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 280)
0x4cd14fa0     0  mov x2, x0
0x4cd14fa4     4  tbnz w2, #0, #+0xb4 (addr 0x4cd15058)
0x4cd14fa8     8  tbnz w1, #0, #+0x20 (addr 0x4cd14fc8)
0x4cd14fac    12  asr x4, x1, #32
0x4cd14fb0    16  asr x2, x2, #32
0x4cd14fb4    20  lsr w2, w4, w2
0x4cd14fb8    24  tbnz w2, #31, #+0xb0 (addr 0x4cd15068)
0x4cd14fbc    28  lsl x2, x2, #32
0x4cd14fc0    32  mov x0, x2
0x4cd14fc4    36  ret
0x4cd14fc8    40  sub csp, jssp, #0x10 (16)
0x4cd14fcc    44  stp fp, lr, [jssp, #-16]!
0x4cd14fd0    48  movz fp, #0xa00000000
0x4cd14fd4    52  sub csp, jssp, #0x8 (8)
0x4cd14fd8    56  str fp, [jssp, #-8]!
0x4cd14fdc    60  add fp, jssp, #0x8 (8)
0x4cd14fe0    64  ldur x16, [x1, #-1]
0x4cd14fe4    68  ldr x17, [x26, #120]
0x4cd14fe8    72  cmp x16, x17
0x4cd14fec    76  b.ne #+0x30 (addr 0x4cd1501c)
0x4cd14ff0    80  ldur d30, [x1, #7]
0x4cd14ff4    84  fcvtzs x4, d30
0x4cd14ff8    88  cmp x4, #0x1 (1)
0x4cd14ffc    92  ccmn x4, #1, #nzcV, vc
0x4cd15000    96  b.vc #+0x18 (addr 0x4cd15018)
0x4cd15004   100  sub csp, jssp, #0x8 (8)
0x4cd15008   104  str lr, [jssp, #-8]!
0x4cd1500c   108  ldr x16, pc+68 (addr 0x000000004cd15050)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd15010   112  blr x16
0x4cd15014   116  ldr lr, [jssp], #8
0x4cd15018   120  b #+0x24 (addr 0x4cd1503c)
0x4cd1501c   124  ldp x4, x3, [x26, #64]
0x4cd15020   128  cmp x1, x4
0x4cd15024   132  cset x4, eq
0x4cd15028   136  ccmp x1, x3, #nZcv, ne
0x4cd1502c   140  b.eq #+0x10 (addr 0x4cd1503c)
0x4cd15030   144  ldr x16, [x26, #40]
0x4cd15034   148  cmp x1, x16
0x4cd15038   152  b.ne #+0x40 (addr 0x4cd15078)
0x4cd1503c   156  ldr lr, [jssp, #16]
0x4cd15040   160  ldp xzr, fp, [jssp], #24
0x4cd15044   164  b #-0x94 (addr 0x4cd14fb0)
0x4cd15048   168  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd1504c   172  d63f03e0       constant
0x4cd15050   176  4cd0fee0       constant
0x4cd15054   180  00000000       constant
0x4cd15058   184  movz x16, #0x0
0x4cd1505c   188  sub csp, jssp, #0x10 (16)
0x4cd15060   192  stp fp, lr, [jssp, #-16]!
0x4cd15064   196  bl #+0x1c (addr 0x4cd15080)
0x4cd15068   200  movz x16, #0x8
0x4cd1506c   204  sub csp, jssp, #0x10 (16)
0x4cd15070   208  stp fp, lr, [jssp, #-16]!
0x4cd15074   212  bl #+0xc (addr 0x4cd15080)
0x4cd15078   216  movz x16, #0x10
0x4cd1507c   220  bl #+0x14 (addr 0x4cd15090)
0x4cd15080   224  movz x17, #0xa00000000
0x4cd15084   228  sub csp, jssp, #0x10 (16)
0x4cd15088   232  stp x17, cp, [jssp, #-16]!
0x4cd1508c   236  add fp, jssp, #0x10 (16)
0x4cd15090   240  ldr x17, pc+24 (addr 0x000000004cd150a8)    ;; lazy deoptimization bailout 0
0x4cd15094   244  add x17, x17, x16
0x4cd15098   248  br x17
0x4cd1509c   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd150a0   256  d63f03e0       constant
0x4cd150a4   260  d503201f       constant
0x4cd150a8   264  4cb06000       constant
0x4cd150ac   268  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0x4cd1500c  code target (STUB)  (0x4cd0fee0)
0x4cd15048  constant pool (size 16)
0x4cd15090  runtime entry
0x4cd1509c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2469
type = NORMAL
name = BinaryOpICStub(SHR:Number*Smi->Int32)
compiler = crankshaft
Instructions (size = 280)
0x4cd14fa0     0  mov x2, x0
0x4cd14fa4     4  tbnz w2, #0, #+0xb4 (addr 0x4cd15058)
0x4cd14fa8     8  tbnz w1, #0, #+0x20 (addr 0x4cd14fc8)
0x4cd14fac    12  asr x4, x1, #32
0x4cd14fb0    16  asr x2, x2, #32
0x4cd14fb4    20  lsr w2, w4, w2
0x4cd14fb8    24  tbnz w2, #31, #+0xb0 (addr 0x4cd15068)
0x4cd14fbc    28  lsl x2, x2, #32
0x4cd14fc0    32  mov x0, x2
0x4cd14fc4    36  ret
0x4cd14fc8    40  sub csp, jssp, #0x10 (16)
0x4cd14fcc    44  stp fp, lr, [jssp, #-16]!
0x4cd14fd0    48  movz fp, #0xa00000000
0x4cd14fd4    52  sub csp, jssp, #0x8 (8)
0x4cd14fd8    56  str fp, [jssp, #-8]!
0x4cd14fdc    60  add fp, jssp, #0x8 (8)
0x4cd14fe0    64  ldur x16, [x1, #-1]
0x4cd14fe4    68  ldr x17, [x26, #120]
0x4cd14fe8    72  cmp x16, x17
0x4cd14fec    76  b.ne #+0x30 (addr 0x4cd1501c)
0x4cd14ff0    80  ldur d30, [x1, #7]
0x4cd14ff4    84  fcvtzs x4, d30
0x4cd14ff8    88  cmp x4, #0x1 (1)
0x4cd14ffc    92  ccmn x4, #1, #nzcV, vc
0x4cd15000    96  b.vc #+0x18 (addr 0x4cd15018)
0x4cd15004   100  sub csp, jssp, #0x8 (8)
0x4cd15008   104  str lr, [jssp, #-8]!
0x4cd1500c   108  ldr x16, pc+68 (addr 0x000000004cd15050)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd15010   112  blr x16
0x4cd15014   116  ldr lr, [jssp], #8
0x4cd15018   120  b #+0x24 (addr 0x4cd1503c)
0x4cd1501c   124  ldp x4, x3, [x26, #64]
0x4cd15020   128  cmp x1, x4
0x4cd15024   132  cset x4, eq
0x4cd15028   136  ccmp x1, x3, #nZcv, ne
0x4cd1502c   140  b.eq #+0x10 (addr 0x4cd1503c)
0x4cd15030   144  ldr x16, [x26, #40]
0x4cd15034   148  cmp x1, x16
0x4cd15038   152  b.ne #+0x40 (addr 0x4cd15078)
0x4cd1503c   156  ldr lr, [jssp, #16]
0x4cd15040   160  ldp xzr, fp, [jssp], #24
0x4cd15044   164  b #-0x94 (addr 0x4cd14fb0)
0x4cd15048   168  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd1504c   172  d63f03e0       constant
0x4cd15050   176  4cd0fee0       constant
0x4cd15054   180  00000000       constant
0x4cd15058   184  movz x16, #0x0
0x4cd1505c   188  sub csp, jssp, #0x10 (16)
0x4cd15060   192  stp fp, lr, [jssp, #-16]!
0x4cd15064   196  bl #+0x1c (addr 0x4cd15080)
0x4cd15068   200  movz x16, #0x8
0x4cd1506c   204  sub csp, jssp, #0x10 (16)
0x4cd15070   208  stp fp, lr, [jssp, #-16]!
0x4cd15074   212  bl #+0xc (addr 0x4cd15080)
0x4cd15078   216  movz x16, #0x10
0x4cd1507c   220  bl #+0x14 (addr 0x4cd15090)
0x4cd15080   224  movz x17, #0xa00000000
0x4cd15084   228  sub csp, jssp, #0x10 (16)
0x4cd15088   232  stp x17, cp, [jssp, #-16]!
0x4cd1508c   236  add fp, jssp, #0x10 (16)
0x4cd15090   240  ldr x17, pc+24 (addr 0x000000004cd150a8)    ;; lazy deoptimization bailout 0
0x4cd15094   244  add x17, x17, x16
0x4cd15098   248  br x17
0x4cd1509c   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd150a0   256  d63f03e0       constant
0x4cd150a4   260  d503201f       constant
0x4cd150a8   264  4cb06000       constant
0x4cd150ac   268  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0x4cd1500c  code target (STUB)  (0x4cd0fee0)
0x4cd15048  constant pool (size 16)
0x4cd15090  runtime entry
0x4cd1509c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2453
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 280)
0x4cd15120     0  mov x2, x0
0x4cd15124     4  tbnz w2, #0, #+0xb4 (addr 0x4cd151d8)
0x4cd15128     8  tbnz w1, #0, #+0x20 (addr 0x4cd15148)
0x4cd1512c    12  asr x4, x1, #32
0x4cd15130    16  asr x2, x2, #32
0x4cd15134    20  lsr w2, w4, w2
0x4cd15138    24  tbnz w2, #31, #+0xb0 (addr 0x4cd151e8)
0x4cd1513c    28  lsl x2, x2, #32
0x4cd15140    32  mov x0, x2
0x4cd15144    36  ret
0x4cd15148    40  sub csp, jssp, #0x10 (16)
0x4cd1514c    44  stp fp, lr, [jssp, #-16]!
0x4cd15150    48  movz fp, #0xa00000000
0x4cd15154    52  sub csp, jssp, #0x8 (8)
0x4cd15158    56  str fp, [jssp, #-8]!
0x4cd1515c    60  add fp, jssp, #0x8 (8)
0x4cd15160    64  ldur x16, [x1, #-1]
0x4cd15164    68  ldr x17, [x26, #120]
0x4cd15168    72  cmp x16, x17
0x4cd1516c    76  b.ne #+0x30 (addr 0x4cd1519c)
0x4cd15170    80  ldur d30, [x1, #7]
0x4cd15174    84  fcvtzs x4, d30
0x4cd15178    88  cmp x4, #0x1 (1)
0x4cd1517c    92  ccmn x4, #1, #nzcV, vc
0x4cd15180    96  b.vc #+0x18 (addr 0x4cd15198)
0x4cd15184   100  sub csp, jssp, #0x8 (8)
0x4cd15188   104  str lr, [jssp, #-8]!
0x4cd1518c   108  ldr x16, pc+68 (addr 0x000000004cd151d0)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd15190   112  blr x16
0x4cd15194   116  ldr lr, [jssp], #8
0x4cd15198   120  b #+0x24 (addr 0x4cd151bc)
0x4cd1519c   124  ldp x4, x3, [x26, #64]
0x4cd151a0   128  cmp x1, x4
0x4cd151a4   132  cset x4, eq
0x4cd151a8   136  ccmp x1, x3, #nZcv, ne
0x4cd151ac   140  b.eq #+0x10 (addr 0x4cd151bc)
0x4cd151b0   144  ldr x16, [x26, #40]
0x4cd151b4   148  cmp x1, x16
0x4cd151b8   152  b.ne #+0x40 (addr 0x4cd151f8)
0x4cd151bc   156  ldr lr, [jssp, #16]
0x4cd151c0   160  ldp xzr, fp, [jssp], #24
0x4cd151c4   164  b #-0x94 (addr 0x4cd15130)
0x4cd151c8   168  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd151cc   172  d63f03e0       constant
0x4cd151d0   176  4cd0fee0       constant
0x4cd151d4   180  00000000       constant
0x4cd151d8   184  movz x16, #0x0
0x4cd151dc   188  sub csp, jssp, #0x10 (16)
0x4cd151e0   192  stp fp, lr, [jssp, #-16]!
0x4cd151e4   196  bl #+0x1c (addr 0x4cd15200)
0x4cd151e8   200  movz x16, #0x8
0x4cd151ec   204  sub csp, jssp, #0x10 (16)
0x4cd151f0   208  stp fp, lr, [jssp, #-16]!
0x4cd151f4   212  bl #+0xc (addr 0x4cd15200)
0x4cd151f8   216  movz x16, #0x10
0x4cd151fc   220  bl #+0x14 (addr 0x4cd15210)
0x4cd15200   224  movz x17, #0xa00000000
0x4cd15204   228  sub csp, jssp, #0x10 (16)
0x4cd15208   232  stp x17, cp, [jssp, #-16]!
0x4cd1520c   236  add fp, jssp, #0x10 (16)
0x4cd15210   240  ldr x17, pc+24 (addr 0x000000004cd15228)    ;; lazy deoptimization bailout 0
0x4cd15214   244  add x17, x17, x16
0x4cd15218   248  br x17
0x4cd1521c   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd15220   256  d63f03e0       constant
0x4cd15224   260  d503201f       constant
0x4cd15228   264  4cb06000       constant
0x4cd1522c   268  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0x4cd1518c  code target (STUB)  (0x4cd0fee0)
0x4cd151c8  constant pool (size 16)
0x4cd15210  runtime entry
0x4cd1521c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2453
type = NORMAL
name = BinaryOpICStub(SHR:Number*Smi->Smi)
compiler = crankshaft
Instructions (size = 280)
0x4cd15120     0  mov x2, x0
0x4cd15124     4  tbnz w2, #0, #+0xb4 (addr 0x4cd151d8)
0x4cd15128     8  tbnz w1, #0, #+0x20 (addr 0x4cd15148)
0x4cd1512c    12  asr x4, x1, #32
0x4cd15130    16  asr x2, x2, #32
0x4cd15134    20  lsr w2, w4, w2
0x4cd15138    24  tbnz w2, #31, #+0xb0 (addr 0x4cd151e8)
0x4cd1513c    28  lsl x2, x2, #32
0x4cd15140    32  mov x0, x2
0x4cd15144    36  ret
0x4cd15148    40  sub csp, jssp, #0x10 (16)
0x4cd1514c    44  stp fp, lr, [jssp, #-16]!
0x4cd15150    48  movz fp, #0xa00000000
0x4cd15154    52  sub csp, jssp, #0x8 (8)
0x4cd15158    56  str fp, [jssp, #-8]!
0x4cd1515c    60  add fp, jssp, #0x8 (8)
0x4cd15160    64  ldur x16, [x1, #-1]
0x4cd15164    68  ldr x17, [x26, #120]
0x4cd15168    72  cmp x16, x17
0x4cd1516c    76  b.ne #+0x30 (addr 0x4cd1519c)
0x4cd15170    80  ldur d30, [x1, #7]
0x4cd15174    84  fcvtzs x4, d30
0x4cd15178    88  cmp x4, #0x1 (1)
0x4cd1517c    92  ccmn x4, #1, #nzcV, vc
0x4cd15180    96  b.vc #+0x18 (addr 0x4cd15198)
0x4cd15184   100  sub csp, jssp, #0x8 (8)
0x4cd15188   104  str lr, [jssp, #-8]!
0x4cd1518c   108  ldr x16, pc+68 (addr 0x000000004cd151d0)    ;; code: STUB, DoubleToIStub, minor: 127233
0x4cd15190   112  blr x16
0x4cd15194   116  ldr lr, [jssp], #8
0x4cd15198   120  b #+0x24 (addr 0x4cd151bc)
0x4cd1519c   124  ldp x4, x3, [x26, #64]
0x4cd151a0   128  cmp x1, x4
0x4cd151a4   132  cset x4, eq
0x4cd151a8   136  ccmp x1, x3, #nZcv, ne
0x4cd151ac   140  b.eq #+0x10 (addr 0x4cd151bc)
0x4cd151b0   144  ldr x16, [x26, #40]
0x4cd151b4   148  cmp x1, x16
0x4cd151b8   152  b.ne #+0x40 (addr 0x4cd151f8)
0x4cd151bc   156  ldr lr, [jssp, #16]
0x4cd151c0   160  ldp xzr, fp, [jssp], #24
0x4cd151c4   164  b #-0x94 (addr 0x4cd15130)
0x4cd151c8   168  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd151cc   172  d63f03e0       constant
0x4cd151d0   176  4cd0fee0       constant
0x4cd151d4   180  00000000       constant
0x4cd151d8   184  movz x16, #0x0
0x4cd151dc   188  sub csp, jssp, #0x10 (16)
0x4cd151e0   192  stp fp, lr, [jssp, #-16]!
0x4cd151e4   196  bl #+0x1c (addr 0x4cd15200)
0x4cd151e8   200  movz x16, #0x8
0x4cd151ec   204  sub csp, jssp, #0x10 (16)
0x4cd151f0   208  stp fp, lr, [jssp, #-16]!
0x4cd151f4   212  bl #+0xc (addr 0x4cd15200)
0x4cd151f8   216  movz x16, #0x10
0x4cd151fc   220  bl #+0x14 (addr 0x4cd15210)
0x4cd15200   224  movz x17, #0xa00000000
0x4cd15204   228  sub csp, jssp, #0x10 (16)
0x4cd15208   232  stp x17, cp, [jssp, #-16]!
0x4cd1520c   236  add fp, jssp, #0x10 (16)
0x4cd15210   240  ldr x17, pc+24 (addr 0x000000004cd15228)    ;; lazy deoptimization bailout 0
0x4cd15214   244  add x17, x17, x16
0x4cd15218   248  br x17
0x4cd1521c   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd15220   256  d63f03e0       constant
0x4cd15224   260  d503201f       constant
0x4cd15228   264  4cb06000       constant
0x4cd1522c   268  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0x4cd1518c  code target (STUB)  (0x4cd0fee0)
0x4cd151c8  constant pool (size 16)
0x4cd15210  runtime entry
0x4cd1521c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2197
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 144)
0x4cd152a0     0  mov x2, x1
0x4cd152a4     4  tbnz w2, #0, #+0x28 (addr 0x4cd152cc)
0x4cd152a8     8  mov x3, x0
0x4cd152ac    12  tbnz w3, #0, #+0x30 (addr 0x4cd152dc)
0x4cd152b0    16  asr x2, x2, #32
0x4cd152b4    20  asr x3, x3, #32
0x4cd152b8    24  lsr w2, w2, w3
0x4cd152bc    28  tbnz w2, #31, #+0x30 (addr 0x4cd152ec)
0x4cd152c0    32  lsl x2, x2, #32
0x4cd152c4    36  mov x0, x2
0x4cd152c8    40  ret
0x4cd152cc    44  movz x16, #0x0
0x4cd152d0    48  sub csp, jssp, #0x10 (16)
0x4cd152d4    52  stp fp, lr, [jssp, #-16]!
0x4cd152d8    56  bl #+0x24 (addr 0x4cd152fc)
0x4cd152dc    60  movz x16, #0x8
0x4cd152e0    64  sub csp, jssp, #0x10 (16)
0x4cd152e4    68  stp fp, lr, [jssp, #-16]!
0x4cd152e8    72  bl #+0x14 (addr 0x4cd152fc)
0x4cd152ec    76  movz x16, #0x10
0x4cd152f0    80  sub csp, jssp, #0x10 (16)
0x4cd152f4    84  stp fp, lr, [jssp, #-16]!
0x4cd152f8    88  bl #+0x4 (addr 0x4cd152fc)
0x4cd152fc    92  movz x17, #0xa00000000
0x4cd15300    96  sub csp, jssp, #0x10 (16)
0x4cd15304   100  stp x17, cp, [jssp, #-16]!
0x4cd15308   104  add fp, jssp, #0x10 (16)
0x4cd1530c   108  ldr x17, pc+20 (addr 0x000000004cd15320)    ;; lazy deoptimization bailout 0
0x4cd15310   112  add x17, x17, x16
0x4cd15314   116  br x17
0x4cd15318   120  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd1531c   124  d63f03e0       constant
0x4cd15320   128  4cb06000       constant
0x4cd15324   132  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd1530c  runtime entry
0x4cd15318  constant pool (size 16)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2197
type = NORMAL
name = BinaryOpICStub(SHR:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 144)
0x4cd152a0     0  mov x2, x1
0x4cd152a4     4  tbnz w2, #0, #+0x28 (addr 0x4cd152cc)
0x4cd152a8     8  mov x3, x0
0x4cd152ac    12  tbnz w3, #0, #+0x30 (addr 0x4cd152dc)
0x4cd152b0    16  asr x2, x2, #32
0x4cd152b4    20  asr x3, x3, #32
0x4cd152b8    24  lsr w2, w2, w3
0x4cd152bc    28  tbnz w2, #31, #+0x30 (addr 0x4cd152ec)
0x4cd152c0    32  lsl x2, x2, #32
0x4cd152c4    36  mov x0, x2
0x4cd152c8    40  ret
0x4cd152cc    44  movz x16, #0x0
0x4cd152d0    48  sub csp, jssp, #0x10 (16)
0x4cd152d4    52  stp fp, lr, [jssp, #-16]!
0x4cd152d8    56  bl #+0x24 (addr 0x4cd152fc)
0x4cd152dc    60  movz x16, #0x8
0x4cd152e0    64  sub csp, jssp, #0x10 (16)
0x4cd152e4    68  stp fp, lr, [jssp, #-16]!
0x4cd152e8    72  bl #+0x14 (addr 0x4cd152fc)
0x4cd152ec    76  movz x16, #0x10
0x4cd152f0    80  sub csp, jssp, #0x10 (16)
0x4cd152f4    84  stp fp, lr, [jssp, #-16]!
0x4cd152f8    88  bl #+0x4 (addr 0x4cd152fc)
0x4cd152fc    92  movz x17, #0xa00000000
0x4cd15300    96  sub csp, jssp, #0x10 (16)
0x4cd15304   100  stp x17, cp, [jssp, #-16]!
0x4cd15308   104  add fp, jssp, #0x10 (16)
0x4cd1530c   108  ldr x17, pc+20 (addr 0x000000004cd15320)    ;; lazy deoptimization bailout 0
0x4cd15310   112  add x17, x17, x16
0x4cd15314   116  br x17
0x4cd15318   120  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd1531c   124  d63f03e0       constant
0x4cd15320   128  4cb06000       constant
0x4cd15324   132  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd1530c  runtime entry
0x4cd15318  constant pool (size 16)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4392
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0x4cd153a0     0  mov x2, x1
0x4cd153a4     4  tbnz w2, #0, #+0x1c (addr 0x4cd153c0)
0x4cd153a8     8  mov x3, x0
0x4cd153ac    12  tbnz w3, #0, #+0x24 (addr 0x4cd153d0)
0x4cd153b0    16  subs x2, x2, x3
0x4cd153b4    20  b.vs #+0x2c (addr 0x4cd153e0)
0x4cd153b8    24  mov x0, x2
0x4cd153bc    28  ret
0x4cd153c0    32  movz x16, #0x0
0x4cd153c4    36  sub csp, jssp, #0x10 (16)
0x4cd153c8    40  stp fp, lr, [jssp, #-16]!
0x4cd153cc    44  bl #+0x24 (addr 0x4cd153f0)
0x4cd153d0    48  movz x16, #0x8
0x4cd153d4    52  sub csp, jssp, #0x10 (16)
0x4cd153d8    56  stp fp, lr, [jssp, #-16]!
0x4cd153dc    60  bl #+0x14 (addr 0x4cd153f0)
0x4cd153e0    64  movz x16, #0x10
0x4cd153e4    68  sub csp, jssp, #0x10 (16)
0x4cd153e8    72  stp fp, lr, [jssp, #-16]!
0x4cd153ec    76  bl #+0x4 (addr 0x4cd153f0)
0x4cd153f0    80  movz x17, #0xa00000000
0x4cd153f4    84  sub csp, jssp, #0x10 (16)
0x4cd153f8    88  stp x17, cp, [jssp, #-16]!
0x4cd153fc    92  add fp, jssp, #0x10 (16)
0x4cd15400    96  ldr x17, pc+24 (addr 0x000000004cd15418)    ;; lazy deoptimization bailout 0
0x4cd15404   100  add x17, x17, x16
0x4cd15408   104  br x17
0x4cd1540c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd15410   112  d63f03e0       constant
0x4cd15414   116  d503201f       constant
0x4cd15418   120  4cb06000       constant
0x4cd1541c   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd15400  runtime entry
0x4cd1540c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4392
type = NORMAL
name = BinaryOpICStub(SUB:Int32*Int32->Int32)
compiler = crankshaft
Instructions (size = 136)
0x4cd153a0     0  mov x2, x1
0x4cd153a4     4  tbnz w2, #0, #+0x1c (addr 0x4cd153c0)
0x4cd153a8     8  mov x3, x0
0x4cd153ac    12  tbnz w3, #0, #+0x24 (addr 0x4cd153d0)
0x4cd153b0    16  subs x2, x2, x3
0x4cd153b4    20  b.vs #+0x2c (addr 0x4cd153e0)
0x4cd153b8    24  mov x0, x2
0x4cd153bc    28  ret
0x4cd153c0    32  movz x16, #0x0
0x4cd153c4    36  sub csp, jssp, #0x10 (16)
0x4cd153c8    40  stp fp, lr, [jssp, #-16]!
0x4cd153cc    44  bl #+0x24 (addr 0x4cd153f0)
0x4cd153d0    48  movz x16, #0x8
0x4cd153d4    52  sub csp, jssp, #0x10 (16)
0x4cd153d8    56  stp fp, lr, [jssp, #-16]!
0x4cd153dc    60  bl #+0x14 (addr 0x4cd153f0)
0x4cd153e0    64  movz x16, #0x10
0x4cd153e4    68  sub csp, jssp, #0x10 (16)
0x4cd153e8    72  stp fp, lr, [jssp, #-16]!
0x4cd153ec    76  bl #+0x4 (addr 0x4cd153f0)
0x4cd153f0    80  movz x17, #0xa00000000
0x4cd153f4    84  sub csp, jssp, #0x10 (16)
0x4cd153f8    88  stp x17, cp, [jssp, #-16]!
0x4cd153fc    92  add fp, jssp, #0x10 (16)
0x4cd15400    96  ldr x17, pc+24 (addr 0x000000004cd15418)    ;; lazy deoptimization bailout 0
0x4cd15404   100  add x17, x17, x16
0x4cd15408   104  br x17
0x4cd1540c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd15410   112  d63f03e0       constant
0x4cd15414   116  d503201f       constant
0x4cd15418   120  4cb06000       constant
0x4cd1541c   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd15400  runtime entry
0x4cd1540c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6456
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0x4cd154a0     0  mov x2, x1
0x4cd154a4     4  tbnz w2, #0, #+0xf4 (addr 0x4cd15598)
0x4cd154a8     8  tbz w0, #0, #+0x34 (addr 0x4cd154dc)
0x4cd154ac    12  ldur x16, [x0, #-1]
0x4cd154b0    16  ldr x17, [x26, #120]
0x4cd154b4    20  cmp x16, x17
0x4cd154b8    24  b.ne #+0xc (addr 0x4cd154c4)
0x4cd154bc    28  ldur d0, [x0, #7]
0x4cd154c0    32  b #+0x20 (addr 0x4cd154e0)
0x4cd154c4    36  ldr x16, [x26, #40]
0x4cd154c8    40  cmp x0, x16
0x4cd154cc    44  b.ne #+0xdc (addr 0x4cd155a8)
0x4cd154d0    48  ldr x3, [x26, #928]
0x4cd154d4    52  ldur d0, [x3, #7]
0x4cd154d8    56  b #+0x8 (addr 0x4cd154e0)
0x4cd154dc    60  scvtf d0, x0, #32
0x4cd154e0    64  scvtf d1, x2, #32
0x4cd154e4    68  fsub d0, d1, d0
0x4cd154e8    72  movz x1, #0xd2c0
0x4cd154ec    76  movk x1, #0x166d, lsl #16
0x4cd154f0    80  ldp x2, x0, [x1]
0x4cd154f4    84  adds x16, x2, #0x10 (16)
0x4cd154f8    88  ccmp x16, x0, #nzCv, lo
0x4cd154fc    92  b.hi #+0x20 (addr 0x4cd1551c)
0x4cd15500    96  str x16, [x1]
0x4cd15504   100  ldr x1, [x26, #120]
0x4cd15508   104  str x1, [x2]
0x4cd1550c   108  orr x2, x2, #0x1
0x4cd15510   112  stur d0, [x2, #7]
0x4cd15514   116  mov x0, x2
0x4cd15518   120  ret
0x4cd1551c   124  sub csp, jssp, #0x10 (16)
0x4cd15520   128  stp fp, lr, [jssp, #-16]!
0x4cd15524   132  movz fp, #0xa00000000
0x4cd15528   136  sub csp, jssp, #0x8 (8)
0x4cd1552c   140  str fp, [jssp, #-8]!
0x4cd15530   144  add fp, jssp, #0x8 (8)
0x4cd15534   148  movz x2, #0x0
0x4cd15538   152  mov x16, lr
0x4cd1553c   156  ldr x17, pc+68 (addr 0x000000004cd15580)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd15540   160  blr x17
0x4cd15544   164  ldur cp, [fp, #-8]
0x4cd15548   168  movz x0, #0x0
0x4cd1554c   172  movz x1, #0x4b48
0x4cd15550   176  movk x1, #0xe4, lsl #16
0x4cd15554   180  ldr x16, pc+52 (addr 0x000000004cd15588)    ;; code: STUB, CEntryStub, minor: 5
0x4cd15558   184  blr x16
0x4cd1555c   188  str x0, [jssp, #16]
0x4cd15560   192  ldr x16, pc+48 (addr 0x000000004cd15590)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd15564   196  blr x16
0x4cd15568   200  ldr lr, [jssp, #16]
0x4cd1556c   204  ldp xzr, fp, [jssp], #24
0x4cd15570   208  b #-0x60 (addr 0x4cd15510)
0x4cd15574   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd15578   216  d63f03e0       constant
0x4cd1557c   220  d503201f       constant
0x4cd15580   224  4cd06820       constant
0x4cd15584   228  00000000       constant
0x4cd15588   232  4cd06260       constant
0x4cd1558c   236  00000000       constant
0x4cd15590   240  4cd068e0       constant
0x4cd15594   244  00000000       constant
0x4cd15598   248  movz x16, #0x0
0x4cd1559c   252  sub csp, jssp, #0x10 (16)
0x4cd155a0   256  stp fp, lr, [jssp, #-16]!
0x4cd155a4   260  bl #+0x14 (addr 0x4cd155b8)
0x4cd155a8   264  movz x16, #0x8
0x4cd155ac   268  sub csp, jssp, #0x10 (16)
0x4cd155b0   272  stp fp, lr, [jssp, #-16]!
0x4cd155b4   276  bl #+0x4 (addr 0x4cd155b8)
0x4cd155b8   280  movz x17, #0xa00000000
0x4cd155bc   284  sub csp, jssp, #0x10 (16)
0x4cd155c0   288  stp x17, cp, [jssp, #-16]!
0x4cd155c4   292  add fp, jssp, #0x10 (16)
0x4cd155c8   296  ldr x17, pc+24 (addr 0x000000004cd155e0)    ;; lazy deoptimization bailout 0
0x4cd155cc   300  add x17, x17, x16
0x4cd155d0   304  br x17
0x4cd155d4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd155d8   312  d63f03e0       constant
0x4cd155dc   316  d503201f       constant
0x4cd155e0   320  4cb06000       constant
0x4cd155e4   324  00000000       constant


Safepoints (size = 21)
0x4cd1555c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd1553c  code target (STUB)  (0x4cd06820)
0x4cd15554  code target (STUB)  (0x4cd06260)
0x4cd15560  code target (STUB)  (0x4cd068e0)
0x4cd15574  constant pool (size 36)
0x4cd155c8  runtime entry
0x4cd155d4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6456
type = NORMAL
name = BinaryOpICStub(SUB:Int32*Number->Number)
compiler = crankshaft
Instructions (size = 349)
0x4cd154a0     0  mov x2, x1
0x4cd154a4     4  tbnz w2, #0, #+0xf4 (addr 0x4cd15598)
0x4cd154a8     8  tbz w0, #0, #+0x34 (addr 0x4cd154dc)
0x4cd154ac    12  ldur x16, [x0, #-1]
0x4cd154b0    16  ldr x17, [x26, #120]
0x4cd154b4    20  cmp x16, x17
0x4cd154b8    24  b.ne #+0xc (addr 0x4cd154c4)
0x4cd154bc    28  ldur d0, [x0, #7]
0x4cd154c0    32  b #+0x20 (addr 0x4cd154e0)
0x4cd154c4    36  ldr x16, [x26, #40]
0x4cd154c8    40  cmp x0, x16
0x4cd154cc    44  b.ne #+0xdc (addr 0x4cd155a8)
0x4cd154d0    48  ldr x3, [x26, #928]
0x4cd154d4    52  ldur d0, [x3, #7]
0x4cd154d8    56  b #+0x8 (addr 0x4cd154e0)
0x4cd154dc    60  scvtf d0, x0, #32
0x4cd154e0    64  scvtf d1, x2, #32
0x4cd154e4    68  fsub d0, d1, d0
0x4cd154e8    72  movz x1, #0xd2c0
0x4cd154ec    76  movk x1, #0x166d, lsl #16
0x4cd154f0    80  ldp x2, x0, [x1]
0x4cd154f4    84  adds x16, x2, #0x10 (16)
0x4cd154f8    88  ccmp x16, x0, #nzCv, lo
0x4cd154fc    92  b.hi #+0x20 (addr 0x4cd1551c)
0x4cd15500    96  str x16, [x1]
0x4cd15504   100  ldr x1, [x26, #120]
0x4cd15508   104  str x1, [x2]
0x4cd1550c   108  orr x2, x2, #0x1
0x4cd15510   112  stur d0, [x2, #7]
0x4cd15514   116  mov x0, x2
0x4cd15518   120  ret
0x4cd1551c   124  sub csp, jssp, #0x10 (16)
0x4cd15520   128  stp fp, lr, [jssp, #-16]!
0x4cd15524   132  movz fp, #0xa00000000
0x4cd15528   136  sub csp, jssp, #0x8 (8)
0x4cd1552c   140  str fp, [jssp, #-8]!
0x4cd15530   144  add fp, jssp, #0x8 (8)
0x4cd15534   148  movz x2, #0x0
0x4cd15538   152  mov x16, lr
0x4cd1553c   156  ldr x17, pc+68 (addr 0x000000004cd15580)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd15540   160  blr x17
0x4cd15544   164  ldur cp, [fp, #-8]
0x4cd15548   168  movz x0, #0x0
0x4cd1554c   172  movz x1, #0x4b48
0x4cd15550   176  movk x1, #0xe4, lsl #16
0x4cd15554   180  ldr x16, pc+52 (addr 0x000000004cd15588)    ;; code: STUB, CEntryStub, minor: 5
0x4cd15558   184  blr x16
0x4cd1555c   188  str x0, [jssp, #16]
0x4cd15560   192  ldr x16, pc+48 (addr 0x000000004cd15590)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd15564   196  blr x16
0x4cd15568   200  ldr lr, [jssp, #16]
0x4cd1556c   204  ldp xzr, fp, [jssp], #24
0x4cd15570   208  b #-0x60 (addr 0x4cd15510)
0x4cd15574   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd15578   216  d63f03e0       constant
0x4cd1557c   220  d503201f       constant
0x4cd15580   224  4cd06820       constant
0x4cd15584   228  00000000       constant
0x4cd15588   232  4cd06260       constant
0x4cd1558c   236  00000000       constant
0x4cd15590   240  4cd068e0       constant
0x4cd15594   244  00000000       constant
0x4cd15598   248  movz x16, #0x0
0x4cd1559c   252  sub csp, jssp, #0x10 (16)
0x4cd155a0   256  stp fp, lr, [jssp, #-16]!
0x4cd155a4   260  bl #+0x14 (addr 0x4cd155b8)
0x4cd155a8   264  movz x16, #0x8
0x4cd155ac   268  sub csp, jssp, #0x10 (16)
0x4cd155b0   272  stp fp, lr, [jssp, #-16]!
0x4cd155b4   276  bl #+0x4 (addr 0x4cd155b8)
0x4cd155b8   280  movz x17, #0xa00000000
0x4cd155bc   284  sub csp, jssp, #0x10 (16)
0x4cd155c0   288  stp x17, cp, [jssp, #-16]!
0x4cd155c4   292  add fp, jssp, #0x10 (16)
0x4cd155c8   296  ldr x17, pc+24 (addr 0x000000004cd155e0)    ;; lazy deoptimization bailout 0
0x4cd155cc   300  add x17, x17, x16
0x4cd155d0   304  br x17
0x4cd155d4   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd155d8   312  d63f03e0       constant
0x4cd155dc   316  d503201f       constant
0x4cd155e0   320  4cb06000       constant
0x4cd155e4   324  00000000       constant


Safepoints (size = 21)
0x4cd1555c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd1553c  code target (STUB)  (0x4cd06820)
0x4cd15554  code target (STUB)  (0x4cd06260)
0x4cd15560  code target (STUB)  (0x4cd068e0)
0x4cd15574  constant pool (size 36)
0x4cd155c8  runtime entry
0x4cd155d4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2344
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0x4cd15660     0  mov x2, x1
0x4cd15664     4  tbnz w2, #0, #+0x1c (addr 0x4cd15680)
0x4cd15668     8  mov x3, x0
0x4cd1566c    12  tbnz w3, #0, #+0x24 (addr 0x4cd15690)
0x4cd15670    16  subs x2, x2, x3
0x4cd15674    20  b.vs #+0x2c (addr 0x4cd156a0)
0x4cd15678    24  mov x0, x2
0x4cd1567c    28  ret
0x4cd15680    32  movz x16, #0x0
0x4cd15684    36  sub csp, jssp, #0x10 (16)
0x4cd15688    40  stp fp, lr, [jssp, #-16]!
0x4cd1568c    44  bl #+0x24 (addr 0x4cd156b0)
0x4cd15690    48  movz x16, #0x8
0x4cd15694    52  sub csp, jssp, #0x10 (16)
0x4cd15698    56  stp fp, lr, [jssp, #-16]!
0x4cd1569c    60  bl #+0x14 (addr 0x4cd156b0)
0x4cd156a0    64  movz x16, #0x10
0x4cd156a4    68  sub csp, jssp, #0x10 (16)
0x4cd156a8    72  stp fp, lr, [jssp, #-16]!
0x4cd156ac    76  bl #+0x4 (addr 0x4cd156b0)
0x4cd156b0    80  movz x17, #0xa00000000
0x4cd156b4    84  sub csp, jssp, #0x10 (16)
0x4cd156b8    88  stp x17, cp, [jssp, #-16]!
0x4cd156bc    92  add fp, jssp, #0x10 (16)
0x4cd156c0    96  ldr x17, pc+24 (addr 0x000000004cd156d8)    ;; lazy deoptimization bailout 0
0x4cd156c4   100  add x17, x17, x16
0x4cd156c8   104  br x17
0x4cd156cc   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd156d0   112  d63f03e0       constant
0x4cd156d4   116  d503201f       constant
0x4cd156d8   120  4cb06000       constant
0x4cd156dc   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd156c0  runtime entry
0x4cd156cc  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2344
type = NORMAL
name = BinaryOpICStub(SUB:Int32*Smi->Int32)
compiler = crankshaft
Instructions (size = 136)
0x4cd15660     0  mov x2, x1
0x4cd15664     4  tbnz w2, #0, #+0x1c (addr 0x4cd15680)
0x4cd15668     8  mov x3, x0
0x4cd1566c    12  tbnz w3, #0, #+0x24 (addr 0x4cd15690)
0x4cd15670    16  subs x2, x2, x3
0x4cd15674    20  b.vs #+0x2c (addr 0x4cd156a0)
0x4cd15678    24  mov x0, x2
0x4cd1567c    28  ret
0x4cd15680    32  movz x16, #0x0
0x4cd15684    36  sub csp, jssp, #0x10 (16)
0x4cd15688    40  stp fp, lr, [jssp, #-16]!
0x4cd1568c    44  bl #+0x24 (addr 0x4cd156b0)
0x4cd15690    48  movz x16, #0x8
0x4cd15694    52  sub csp, jssp, #0x10 (16)
0x4cd15698    56  stp fp, lr, [jssp, #-16]!
0x4cd1569c    60  bl #+0x14 (addr 0x4cd156b0)
0x4cd156a0    64  movz x16, #0x10
0x4cd156a4    68  sub csp, jssp, #0x10 (16)
0x4cd156a8    72  stp fp, lr, [jssp, #-16]!
0x4cd156ac    76  bl #+0x4 (addr 0x4cd156b0)
0x4cd156b0    80  movz x17, #0xa00000000
0x4cd156b4    84  sub csp, jssp, #0x10 (16)
0x4cd156b8    88  stp x17, cp, [jssp, #-16]!
0x4cd156bc    92  add fp, jssp, #0x10 (16)
0x4cd156c0    96  ldr x17, pc+24 (addr 0x000000004cd156d8)    ;; lazy deoptimization bailout 0
0x4cd156c4   100  add x17, x17, x16
0x4cd156c8   104  br x17
0x4cd156cc   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd156d0   112  d63f03e0       constant
0x4cd156d4   116  d503201f       constant
0x4cd156d8   120  4cb06000       constant
0x4cd156dc   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd156c0  runtime entry
0x4cd156cc  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4536
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0x4cd15760     0  mov x2, x0
0x4cd15764     4  tbnz w2, #0, #+0xf4 (addr 0x4cd15858)
0x4cd15768     8  tbz w1, #0, #+0x34 (addr 0x4cd1579c)
0x4cd1576c    12  ldur x16, [x1, #-1]
0x4cd15770    16  ldr x17, [x26, #120]
0x4cd15774    20  cmp x16, x17
0x4cd15778    24  b.ne #+0xc (addr 0x4cd15784)
0x4cd1577c    28  ldur d0, [x1, #7]
0x4cd15780    32  b #+0x20 (addr 0x4cd157a0)
0x4cd15784    36  ldr x16, [x26, #40]
0x4cd15788    40  cmp x1, x16
0x4cd1578c    44  b.ne #+0xdc (addr 0x4cd15868)
0x4cd15790    48  ldr x3, [x26, #928]
0x4cd15794    52  ldur d0, [x3, #7]
0x4cd15798    56  b #+0x8 (addr 0x4cd157a0)
0x4cd1579c    60  scvtf d0, x1, #32
0x4cd157a0    64  scvtf d1, x2, #32
0x4cd157a4    68  fsub d0, d0, d1
0x4cd157a8    72  movz x1, #0xd2c0
0x4cd157ac    76  movk x1, #0x166d, lsl #16
0x4cd157b0    80  ldp x2, x0, [x1]
0x4cd157b4    84  adds x16, x2, #0x10 (16)
0x4cd157b8    88  ccmp x16, x0, #nzCv, lo
0x4cd157bc    92  b.hi #+0x20 (addr 0x4cd157dc)
0x4cd157c0    96  str x16, [x1]
0x4cd157c4   100  ldr x1, [x26, #120]
0x4cd157c8   104  str x1, [x2]
0x4cd157cc   108  orr x2, x2, #0x1
0x4cd157d0   112  stur d0, [x2, #7]
0x4cd157d4   116  mov x0, x2
0x4cd157d8   120  ret
0x4cd157dc   124  sub csp, jssp, #0x10 (16)
0x4cd157e0   128  stp fp, lr, [jssp, #-16]!
0x4cd157e4   132  movz fp, #0xa00000000
0x4cd157e8   136  sub csp, jssp, #0x8 (8)
0x4cd157ec   140  str fp, [jssp, #-8]!
0x4cd157f0   144  add fp, jssp, #0x8 (8)
0x4cd157f4   148  movz x2, #0x0
0x4cd157f8   152  mov x16, lr
0x4cd157fc   156  ldr x17, pc+68 (addr 0x000000004cd15840)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd15800   160  blr x17
0x4cd15804   164  ldur cp, [fp, #-8]
0x4cd15808   168  movz x0, #0x0
0x4cd1580c   172  movz x1, #0x4b48
0x4cd15810   176  movk x1, #0xe4, lsl #16
0x4cd15814   180  ldr x16, pc+52 (addr 0x000000004cd15848)    ;; code: STUB, CEntryStub, minor: 5
0x4cd15818   184  blr x16
0x4cd1581c   188  str x0, [jssp, #16]
0x4cd15820   192  ldr x16, pc+48 (addr 0x000000004cd15850)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd15824   196  blr x16
0x4cd15828   200  ldr lr, [jssp, #16]
0x4cd1582c   204  ldp xzr, fp, [jssp], #24
0x4cd15830   208  b #-0x60 (addr 0x4cd157d0)
0x4cd15834   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd15838   216  d63f03e0       constant
0x4cd1583c   220  d503201f       constant
0x4cd15840   224  4cd06820       constant
0x4cd15844   228  00000000       constant
0x4cd15848   232  4cd06260       constant
0x4cd1584c   236  00000000       constant
0x4cd15850   240  4cd068e0       constant
0x4cd15854   244  00000000       constant
0x4cd15858   248  movz x16, #0x0
0x4cd1585c   252  sub csp, jssp, #0x10 (16)
0x4cd15860   256  stp fp, lr, [jssp, #-16]!
0x4cd15864   260  bl #+0x14 (addr 0x4cd15878)
0x4cd15868   264  movz x16, #0x8
0x4cd1586c   268  sub csp, jssp, #0x10 (16)
0x4cd15870   272  stp fp, lr, [jssp, #-16]!
0x4cd15874   276  bl #+0x4 (addr 0x4cd15878)
0x4cd15878   280  movz x17, #0xa00000000
0x4cd1587c   284  sub csp, jssp, #0x10 (16)
0x4cd15880   288  stp x17, cp, [jssp, #-16]!
0x4cd15884   292  add fp, jssp, #0x10 (16)
0x4cd15888   296  ldr x17, pc+24 (addr 0x000000004cd158a0)    ;; lazy deoptimization bailout 0
0x4cd1588c   300  add x17, x17, x16
0x4cd15890   304  br x17
0x4cd15894   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd15898   312  d63f03e0       constant
0x4cd1589c   316  d503201f       constant
0x4cd158a0   320  4cb06000       constant
0x4cd158a4   324  00000000       constant


Safepoints (size = 21)
0x4cd1581c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd157fc  code target (STUB)  (0x4cd06820)
0x4cd15814  code target (STUB)  (0x4cd06260)
0x4cd15820  code target (STUB)  (0x4cd068e0)
0x4cd15834  constant pool (size 36)
0x4cd15888  runtime entry
0x4cd15894  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4536
type = NORMAL
name = BinaryOpICStub(SUB:Number*Int32->Number)
compiler = crankshaft
Instructions (size = 349)
0x4cd15760     0  mov x2, x0
0x4cd15764     4  tbnz w2, #0, #+0xf4 (addr 0x4cd15858)
0x4cd15768     8  tbz w1, #0, #+0x34 (addr 0x4cd1579c)
0x4cd1576c    12  ldur x16, [x1, #-1]
0x4cd15770    16  ldr x17, [x26, #120]
0x4cd15774    20  cmp x16, x17
0x4cd15778    24  b.ne #+0xc (addr 0x4cd15784)
0x4cd1577c    28  ldur d0, [x1, #7]
0x4cd15780    32  b #+0x20 (addr 0x4cd157a0)
0x4cd15784    36  ldr x16, [x26, #40]
0x4cd15788    40  cmp x1, x16
0x4cd1578c    44  b.ne #+0xdc (addr 0x4cd15868)
0x4cd15790    48  ldr x3, [x26, #928]
0x4cd15794    52  ldur d0, [x3, #7]
0x4cd15798    56  b #+0x8 (addr 0x4cd157a0)
0x4cd1579c    60  scvtf d0, x1, #32
0x4cd157a0    64  scvtf d1, x2, #32
0x4cd157a4    68  fsub d0, d0, d1
0x4cd157a8    72  movz x1, #0xd2c0
0x4cd157ac    76  movk x1, #0x166d, lsl #16
0x4cd157b0    80  ldp x2, x0, [x1]
0x4cd157b4    84  adds x16, x2, #0x10 (16)
0x4cd157b8    88  ccmp x16, x0, #nzCv, lo
0x4cd157bc    92  b.hi #+0x20 (addr 0x4cd157dc)
0x4cd157c0    96  str x16, [x1]
0x4cd157c4   100  ldr x1, [x26, #120]
0x4cd157c8   104  str x1, [x2]
0x4cd157cc   108  orr x2, x2, #0x1
0x4cd157d0   112  stur d0, [x2, #7]
0x4cd157d4   116  mov x0, x2
0x4cd157d8   120  ret
0x4cd157dc   124  sub csp, jssp, #0x10 (16)
0x4cd157e0   128  stp fp, lr, [jssp, #-16]!
0x4cd157e4   132  movz fp, #0xa00000000
0x4cd157e8   136  sub csp, jssp, #0x8 (8)
0x4cd157ec   140  str fp, [jssp, #-8]!
0x4cd157f0   144  add fp, jssp, #0x8 (8)
0x4cd157f4   148  movz x2, #0x0
0x4cd157f8   152  mov x16, lr
0x4cd157fc   156  ldr x17, pc+68 (addr 0x000000004cd15840)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd15800   160  blr x17
0x4cd15804   164  ldur cp, [fp, #-8]
0x4cd15808   168  movz x0, #0x0
0x4cd1580c   172  movz x1, #0x4b48
0x4cd15810   176  movk x1, #0xe4, lsl #16
0x4cd15814   180  ldr x16, pc+52 (addr 0x000000004cd15848)    ;; code: STUB, CEntryStub, minor: 5
0x4cd15818   184  blr x16
0x4cd1581c   188  str x0, [jssp, #16]
0x4cd15820   192  ldr x16, pc+48 (addr 0x000000004cd15850)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd15824   196  blr x16
0x4cd15828   200  ldr lr, [jssp, #16]
0x4cd1582c   204  ldp xzr, fp, [jssp], #24
0x4cd15830   208  b #-0x60 (addr 0x4cd157d0)
0x4cd15834   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd15838   216  d63f03e0       constant
0x4cd1583c   220  d503201f       constant
0x4cd15840   224  4cd06820       constant
0x4cd15844   228  00000000       constant
0x4cd15848   232  4cd06260       constant
0x4cd1584c   236  00000000       constant
0x4cd15850   240  4cd068e0       constant
0x4cd15854   244  00000000       constant
0x4cd15858   248  movz x16, #0x0
0x4cd1585c   252  sub csp, jssp, #0x10 (16)
0x4cd15860   256  stp fp, lr, [jssp, #-16]!
0x4cd15864   260  bl #+0x14 (addr 0x4cd15878)
0x4cd15868   264  movz x16, #0x8
0x4cd1586c   268  sub csp, jssp, #0x10 (16)
0x4cd15870   272  stp fp, lr, [jssp, #-16]!
0x4cd15874   276  bl #+0x4 (addr 0x4cd15878)
0x4cd15878   280  movz x17, #0xa00000000
0x4cd1587c   284  sub csp, jssp, #0x10 (16)
0x4cd15880   288  stp x17, cp, [jssp, #-16]!
0x4cd15884   292  add fp, jssp, #0x10 (16)
0x4cd15888   296  ldr x17, pc+24 (addr 0x000000004cd158a0)    ;; lazy deoptimization bailout 0
0x4cd1588c   300  add x17, x17, x16
0x4cd15890   304  br x17
0x4cd15894   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd15898   312  d63f03e0       constant
0x4cd1589c   316  d503201f       constant
0x4cd158a0   320  4cb06000       constant
0x4cd158a4   324  00000000       constant


Safepoints (size = 21)
0x4cd1581c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd157fc  code target (STUB)  (0x4cd06820)
0x4cd15814  code target (STUB)  (0x4cd06260)
0x4cd15820  code target (STUB)  (0x4cd068e0)
0x4cd15834  constant pool (size 36)
0x4cd15888  runtime entry
0x4cd15894  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6584
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 389)
0x4cd15920     0  tbz w1, #0, #+0x34 (addr 0x4cd15954)
0x4cd15924     4  ldur x16, [x1, #-1]
0x4cd15928     8  ldr x17, [x26, #120]
0x4cd1592c    12  cmp x16, x17
0x4cd15930    16  b.ne #+0xc (addr 0x4cd1593c)
0x4cd15934    20  ldur d0, [x1, #7]
0x4cd15938    24  b #+0x20 (addr 0x4cd15958)
0x4cd1593c    28  ldr x16, [x26, #40]
0x4cd15940    32  cmp x1, x16
0x4cd15944    36  b.ne #+0xfc (addr 0x4cd15a40)
0x4cd15948    40  ldr x2, [x26, #928]
0x4cd1594c    44  ldur d0, [x2, #7]
0x4cd15950    48  b #+0x8 (addr 0x4cd15958)
0x4cd15954    52  scvtf d0, x1, #32
0x4cd15958    56  tbz w0, #0, #+0x34 (addr 0x4cd1598c)
0x4cd1595c    60  ldur x16, [x0, #-1]
0x4cd15960    64  ldr x17, [x26, #120]
0x4cd15964    68  cmp x16, x17
0x4cd15968    72  b.ne #+0xc (addr 0x4cd15974)
0x4cd1596c    76  ldur d1, [x0, #7]
0x4cd15970    80  b #+0x20 (addr 0x4cd15990)
0x4cd15974    84  ldr x16, [x26, #40]
0x4cd15978    88  cmp x0, x16
0x4cd1597c    92  b.ne #+0xd4 (addr 0x4cd15a50)
0x4cd15980    96  ldr x2, [x26, #928]
0x4cd15984   100  ldur d1, [x2, #7]
0x4cd15988   104  b #+0x8 (addr 0x4cd15990)
0x4cd1598c   108  scvtf d1, x0, #32
0x4cd15990   112  fsub d0, d0, d1
0x4cd15994   116  movz x1, #0xd2c0
0x4cd15998   120  movk x1, #0x166d, lsl #16
0x4cd1599c   124  ldp x2, x0, [x1]
0x4cd159a0   128  adds x16, x2, #0x10 (16)
0x4cd159a4   132  ccmp x16, x0, #nzCv, lo
0x4cd159a8   136  b.hi #+0x20 (addr 0x4cd159c8)
0x4cd159ac   140  str x16, [x1]
0x4cd159b0   144  ldr x1, [x26, #120]
0x4cd159b4   148  str x1, [x2]
0x4cd159b8   152  orr x2, x2, #0x1
0x4cd159bc   156  stur d0, [x2, #7]
0x4cd159c0   160  mov x0, x2
0x4cd159c4   164  ret
0x4cd159c8   168  sub csp, jssp, #0x10 (16)
0x4cd159cc   172  stp fp, lr, [jssp, #-16]!
0x4cd159d0   176  movz fp, #0xa00000000
0x4cd159d4   180  sub csp, jssp, #0x8 (8)
0x4cd159d8   184  str fp, [jssp, #-8]!
0x4cd159dc   188  add fp, jssp, #0x8 (8)
0x4cd159e0   192  movz x2, #0x0
0x4cd159e4   196  mov x16, lr
0x4cd159e8   200  ldr x17, pc+64 (addr 0x000000004cd15a28)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd159ec   204  blr x17
0x4cd159f0   208  ldur cp, [fp, #-8]
0x4cd159f4   212  movz x0, #0x0
0x4cd159f8   216  movz x1, #0x4b48
0x4cd159fc   220  movk x1, #0xe4, lsl #16
0x4cd15a00   224  ldr x16, pc+48 (addr 0x000000004cd15a30)    ;; code: STUB, CEntryStub, minor: 5
0x4cd15a04   228  blr x16
0x4cd15a08   232  str x0, [jssp, #16]
0x4cd15a0c   236  ldr x16, pc+44 (addr 0x000000004cd15a38)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd15a10   240  blr x16
0x4cd15a14   244  ldr lr, [jssp, #16]
0x4cd15a18   248  ldp xzr, fp, [jssp], #24
0x4cd15a1c   252  b #-0x60 (addr 0x4cd159bc)
0x4cd15a20   256  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd15a24   260  d63f03e0       constant
0x4cd15a28   264  4cd06820       constant
0x4cd15a2c   268  00000000       constant
0x4cd15a30   272  4cd06260       constant
0x4cd15a34   276  00000000       constant
0x4cd15a38   280  4cd068e0       constant
0x4cd15a3c   284  00000000       constant
0x4cd15a40   288  movz x16, #0x0
0x4cd15a44   292  sub csp, jssp, #0x10 (16)
0x4cd15a48   296  stp fp, lr, [jssp, #-16]!
0x4cd15a4c   300  bl #+0x14 (addr 0x4cd15a60)
0x4cd15a50   304  movz x16, #0x8
0x4cd15a54   308  sub csp, jssp, #0x10 (16)
0x4cd15a58   312  stp fp, lr, [jssp, #-16]!
0x4cd15a5c   316  bl #+0x4 (addr 0x4cd15a60)
0x4cd15a60   320  movz x17, #0xa00000000
0x4cd15a64   324  sub csp, jssp, #0x10 (16)
0x4cd15a68   328  stp x17, cp, [jssp, #-16]!
0x4cd15a6c   332  add fp, jssp, #0x10 (16)
0x4cd15a70   336  ldr x17, pc+24 (addr 0x000000004cd15a88)    ;; lazy deoptimization bailout 0
0x4cd15a74   340  add x17, x17, x16
0x4cd15a78   344  br x17
0x4cd15a7c   348  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd15a80   352  d63f03e0       constant
0x4cd15a84   356  d503201f       constant
0x4cd15a88   360  4cb06000       constant
0x4cd15a8c   364  00000000       constant


Safepoints (size = 21)
0x4cd15a08   232  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd159e8  code target (STUB)  (0x4cd06820)
0x4cd15a00  code target (STUB)  (0x4cd06260)
0x4cd15a0c  code target (STUB)  (0x4cd068e0)
0x4cd15a20  constant pool (size 32)
0x4cd15a70  runtime entry
0x4cd15a7c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6584
type = NORMAL
name = BinaryOpICStub(SUB:Number*Number->Number)
compiler = crankshaft
Instructions (size = 389)
0x4cd15920     0  tbz w1, #0, #+0x34 (addr 0x4cd15954)
0x4cd15924     4  ldur x16, [x1, #-1]
0x4cd15928     8  ldr x17, [x26, #120]
0x4cd1592c    12  cmp x16, x17
0x4cd15930    16  b.ne #+0xc (addr 0x4cd1593c)
0x4cd15934    20  ldur d0, [x1, #7]
0x4cd15938    24  b #+0x20 (addr 0x4cd15958)
0x4cd1593c    28  ldr x16, [x26, #40]
0x4cd15940    32  cmp x1, x16
0x4cd15944    36  b.ne #+0xfc (addr 0x4cd15a40)
0x4cd15948    40  ldr x2, [x26, #928]
0x4cd1594c    44  ldur d0, [x2, #7]
0x4cd15950    48  b #+0x8 (addr 0x4cd15958)
0x4cd15954    52  scvtf d0, x1, #32
0x4cd15958    56  tbz w0, #0, #+0x34 (addr 0x4cd1598c)
0x4cd1595c    60  ldur x16, [x0, #-1]
0x4cd15960    64  ldr x17, [x26, #120]
0x4cd15964    68  cmp x16, x17
0x4cd15968    72  b.ne #+0xc (addr 0x4cd15974)
0x4cd1596c    76  ldur d1, [x0, #7]
0x4cd15970    80  b #+0x20 (addr 0x4cd15990)
0x4cd15974    84  ldr x16, [x26, #40]
0x4cd15978    88  cmp x0, x16
0x4cd1597c    92  b.ne #+0xd4 (addr 0x4cd15a50)
0x4cd15980    96  ldr x2, [x26, #928]
0x4cd15984   100  ldur d1, [x2, #7]
0x4cd15988   104  b #+0x8 (addr 0x4cd15990)
0x4cd1598c   108  scvtf d1, x0, #32
0x4cd15990   112  fsub d0, d0, d1
0x4cd15994   116  movz x1, #0xd2c0
0x4cd15998   120  movk x1, #0x166d, lsl #16
0x4cd1599c   124  ldp x2, x0, [x1]
0x4cd159a0   128  adds x16, x2, #0x10 (16)
0x4cd159a4   132  ccmp x16, x0, #nzCv, lo
0x4cd159a8   136  b.hi #+0x20 (addr 0x4cd159c8)
0x4cd159ac   140  str x16, [x1]
0x4cd159b0   144  ldr x1, [x26, #120]
0x4cd159b4   148  str x1, [x2]
0x4cd159b8   152  orr x2, x2, #0x1
0x4cd159bc   156  stur d0, [x2, #7]
0x4cd159c0   160  mov x0, x2
0x4cd159c4   164  ret
0x4cd159c8   168  sub csp, jssp, #0x10 (16)
0x4cd159cc   172  stp fp, lr, [jssp, #-16]!
0x4cd159d0   176  movz fp, #0xa00000000
0x4cd159d4   180  sub csp, jssp, #0x8 (8)
0x4cd159d8   184  str fp, [jssp, #-8]!
0x4cd159dc   188  add fp, jssp, #0x8 (8)
0x4cd159e0   192  movz x2, #0x0
0x4cd159e4   196  mov x16, lr
0x4cd159e8   200  ldr x17, pc+64 (addr 0x000000004cd15a28)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd159ec   204  blr x17
0x4cd159f0   208  ldur cp, [fp, #-8]
0x4cd159f4   212  movz x0, #0x0
0x4cd159f8   216  movz x1, #0x4b48
0x4cd159fc   220  movk x1, #0xe4, lsl #16
0x4cd15a00   224  ldr x16, pc+48 (addr 0x000000004cd15a30)    ;; code: STUB, CEntryStub, minor: 5
0x4cd15a04   228  blr x16
0x4cd15a08   232  str x0, [jssp, #16]
0x4cd15a0c   236  ldr x16, pc+44 (addr 0x000000004cd15a38)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd15a10   240  blr x16
0x4cd15a14   244  ldr lr, [jssp, #16]
0x4cd15a18   248  ldp xzr, fp, [jssp], #24
0x4cd15a1c   252  b #-0x60 (addr 0x4cd159bc)
0x4cd15a20   256  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd15a24   260  d63f03e0       constant
0x4cd15a28   264  4cd06820       constant
0x4cd15a2c   268  00000000       constant
0x4cd15a30   272  4cd06260       constant
0x4cd15a34   276  00000000       constant
0x4cd15a38   280  4cd068e0       constant
0x4cd15a3c   284  00000000       constant
0x4cd15a40   288  movz x16, #0x0
0x4cd15a44   292  sub csp, jssp, #0x10 (16)
0x4cd15a48   296  stp fp, lr, [jssp, #-16]!
0x4cd15a4c   300  bl #+0x14 (addr 0x4cd15a60)
0x4cd15a50   304  movz x16, #0x8
0x4cd15a54   308  sub csp, jssp, #0x10 (16)
0x4cd15a58   312  stp fp, lr, [jssp, #-16]!
0x4cd15a5c   316  bl #+0x4 (addr 0x4cd15a60)
0x4cd15a60   320  movz x17, #0xa00000000
0x4cd15a64   324  sub csp, jssp, #0x10 (16)
0x4cd15a68   328  stp x17, cp, [jssp, #-16]!
0x4cd15a6c   332  add fp, jssp, #0x10 (16)
0x4cd15a70   336  ldr x17, pc+24 (addr 0x000000004cd15a88)    ;; lazy deoptimization bailout 0
0x4cd15a74   340  add x17, x17, x16
0x4cd15a78   344  br x17
0x4cd15a7c   348  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd15a80   352  d63f03e0       constant
0x4cd15a84   356  d503201f       constant
0x4cd15a88   360  4cb06000       constant
0x4cd15a8c   364  00000000       constant


Safepoints (size = 21)
0x4cd15a08   232  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd159e8  code target (STUB)  (0x4cd06820)
0x4cd15a00  code target (STUB)  (0x4cd06260)
0x4cd15a0c  code target (STUB)  (0x4cd068e0)
0x4cd15a20  constant pool (size 32)
0x4cd15a70  runtime entry
0x4cd15a7c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2488
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0x4cd15b20     0  mov x2, x0
0x4cd15b24     4  tbnz w2, #0, #+0xf4 (addr 0x4cd15c18)
0x4cd15b28     8  tbz w1, #0, #+0x34 (addr 0x4cd15b5c)
0x4cd15b2c    12  ldur x16, [x1, #-1]
0x4cd15b30    16  ldr x17, [x26, #120]
0x4cd15b34    20  cmp x16, x17
0x4cd15b38    24  b.ne #+0xc (addr 0x4cd15b44)
0x4cd15b3c    28  ldur d0, [x1, #7]
0x4cd15b40    32  b #+0x20 (addr 0x4cd15b60)
0x4cd15b44    36  ldr x16, [x26, #40]
0x4cd15b48    40  cmp x1, x16
0x4cd15b4c    44  b.ne #+0xdc (addr 0x4cd15c28)
0x4cd15b50    48  ldr x3, [x26, #928]
0x4cd15b54    52  ldur d0, [x3, #7]
0x4cd15b58    56  b #+0x8 (addr 0x4cd15b60)
0x4cd15b5c    60  scvtf d0, x1, #32
0x4cd15b60    64  scvtf d1, x2, #32
0x4cd15b64    68  fsub d0, d0, d1
0x4cd15b68    72  movz x1, #0xd2c0
0x4cd15b6c    76  movk x1, #0x166d, lsl #16
0x4cd15b70    80  ldp x2, x0, [x1]
0x4cd15b74    84  adds x16, x2, #0x10 (16)
0x4cd15b78    88  ccmp x16, x0, #nzCv, lo
0x4cd15b7c    92  b.hi #+0x20 (addr 0x4cd15b9c)
0x4cd15b80    96  str x16, [x1]
0x4cd15b84   100  ldr x1, [x26, #120]
0x4cd15b88   104  str x1, [x2]
0x4cd15b8c   108  orr x2, x2, #0x1
0x4cd15b90   112  stur d0, [x2, #7]
0x4cd15b94   116  mov x0, x2
0x4cd15b98   120  ret
0x4cd15b9c   124  sub csp, jssp, #0x10 (16)
0x4cd15ba0   128  stp fp, lr, [jssp, #-16]!
0x4cd15ba4   132  movz fp, #0xa00000000
0x4cd15ba8   136  sub csp, jssp, #0x8 (8)
0x4cd15bac   140  str fp, [jssp, #-8]!
0x4cd15bb0   144  add fp, jssp, #0x8 (8)
0x4cd15bb4   148  movz x2, #0x0
0x4cd15bb8   152  mov x16, lr
0x4cd15bbc   156  ldr x17, pc+68 (addr 0x000000004cd15c00)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd15bc0   160  blr x17
0x4cd15bc4   164  ldur cp, [fp, #-8]
0x4cd15bc8   168  movz x0, #0x0
0x4cd15bcc   172  movz x1, #0x4b48
0x4cd15bd0   176  movk x1, #0xe4, lsl #16
0x4cd15bd4   180  ldr x16, pc+52 (addr 0x000000004cd15c08)    ;; code: STUB, CEntryStub, minor: 5
0x4cd15bd8   184  blr x16
0x4cd15bdc   188  str x0, [jssp, #16]
0x4cd15be0   192  ldr x16, pc+48 (addr 0x000000004cd15c10)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd15be4   196  blr x16
0x4cd15be8   200  ldr lr, [jssp, #16]
0x4cd15bec   204  ldp xzr, fp, [jssp], #24
0x4cd15bf0   208  b #-0x60 (addr 0x4cd15b90)
0x4cd15bf4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd15bf8   216  d63f03e0       constant
0x4cd15bfc   220  d503201f       constant
0x4cd15c00   224  4cd06820       constant
0x4cd15c04   228  00000000       constant
0x4cd15c08   232  4cd06260       constant
0x4cd15c0c   236  00000000       constant
0x4cd15c10   240  4cd068e0       constant
0x4cd15c14   244  00000000       constant
0x4cd15c18   248  movz x16, #0x0
0x4cd15c1c   252  sub csp, jssp, #0x10 (16)
0x4cd15c20   256  stp fp, lr, [jssp, #-16]!
0x4cd15c24   260  bl #+0x14 (addr 0x4cd15c38)
0x4cd15c28   264  movz x16, #0x8
0x4cd15c2c   268  sub csp, jssp, #0x10 (16)
0x4cd15c30   272  stp fp, lr, [jssp, #-16]!
0x4cd15c34   276  bl #+0x4 (addr 0x4cd15c38)
0x4cd15c38   280  movz x17, #0xa00000000
0x4cd15c3c   284  sub csp, jssp, #0x10 (16)
0x4cd15c40   288  stp x17, cp, [jssp, #-16]!
0x4cd15c44   292  add fp, jssp, #0x10 (16)
0x4cd15c48   296  ldr x17, pc+24 (addr 0x000000004cd15c60)    ;; lazy deoptimization bailout 0
0x4cd15c4c   300  add x17, x17, x16
0x4cd15c50   304  br x17
0x4cd15c54   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd15c58   312  d63f03e0       constant
0x4cd15c5c   316  d503201f       constant
0x4cd15c60   320  4cb06000       constant
0x4cd15c64   324  00000000       constant


Safepoints (size = 21)
0x4cd15bdc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd15bbc  code target (STUB)  (0x4cd06820)
0x4cd15bd4  code target (STUB)  (0x4cd06260)
0x4cd15be0  code target (STUB)  (0x4cd068e0)
0x4cd15bf4  constant pool (size 36)
0x4cd15c48  runtime entry
0x4cd15c54  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2488
type = NORMAL
name = BinaryOpICStub(SUB:Number*Smi->Number)
compiler = crankshaft
Instructions (size = 349)
0x4cd15b20     0  mov x2, x0
0x4cd15b24     4  tbnz w2, #0, #+0xf4 (addr 0x4cd15c18)
0x4cd15b28     8  tbz w1, #0, #+0x34 (addr 0x4cd15b5c)
0x4cd15b2c    12  ldur x16, [x1, #-1]
0x4cd15b30    16  ldr x17, [x26, #120]
0x4cd15b34    20  cmp x16, x17
0x4cd15b38    24  b.ne #+0xc (addr 0x4cd15b44)
0x4cd15b3c    28  ldur d0, [x1, #7]
0x4cd15b40    32  b #+0x20 (addr 0x4cd15b60)
0x4cd15b44    36  ldr x16, [x26, #40]
0x4cd15b48    40  cmp x1, x16
0x4cd15b4c    44  b.ne #+0xdc (addr 0x4cd15c28)
0x4cd15b50    48  ldr x3, [x26, #928]
0x4cd15b54    52  ldur d0, [x3, #7]
0x4cd15b58    56  b #+0x8 (addr 0x4cd15b60)
0x4cd15b5c    60  scvtf d0, x1, #32
0x4cd15b60    64  scvtf d1, x2, #32
0x4cd15b64    68  fsub d0, d0, d1
0x4cd15b68    72  movz x1, #0xd2c0
0x4cd15b6c    76  movk x1, #0x166d, lsl #16
0x4cd15b70    80  ldp x2, x0, [x1]
0x4cd15b74    84  adds x16, x2, #0x10 (16)
0x4cd15b78    88  ccmp x16, x0, #nzCv, lo
0x4cd15b7c    92  b.hi #+0x20 (addr 0x4cd15b9c)
0x4cd15b80    96  str x16, [x1]
0x4cd15b84   100  ldr x1, [x26, #120]
0x4cd15b88   104  str x1, [x2]
0x4cd15b8c   108  orr x2, x2, #0x1
0x4cd15b90   112  stur d0, [x2, #7]
0x4cd15b94   116  mov x0, x2
0x4cd15b98   120  ret
0x4cd15b9c   124  sub csp, jssp, #0x10 (16)
0x4cd15ba0   128  stp fp, lr, [jssp, #-16]!
0x4cd15ba4   132  movz fp, #0xa00000000
0x4cd15ba8   136  sub csp, jssp, #0x8 (8)
0x4cd15bac   140  str fp, [jssp, #-8]!
0x4cd15bb0   144  add fp, jssp, #0x8 (8)
0x4cd15bb4   148  movz x2, #0x0
0x4cd15bb8   152  mov x16, lr
0x4cd15bbc   156  ldr x17, pc+68 (addr 0x000000004cd15c00)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd15bc0   160  blr x17
0x4cd15bc4   164  ldur cp, [fp, #-8]
0x4cd15bc8   168  movz x0, #0x0
0x4cd15bcc   172  movz x1, #0x4b48
0x4cd15bd0   176  movk x1, #0xe4, lsl #16
0x4cd15bd4   180  ldr x16, pc+52 (addr 0x000000004cd15c08)    ;; code: STUB, CEntryStub, minor: 5
0x4cd15bd8   184  blr x16
0x4cd15bdc   188  str x0, [jssp, #16]
0x4cd15be0   192  ldr x16, pc+48 (addr 0x000000004cd15c10)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd15be4   196  blr x16
0x4cd15be8   200  ldr lr, [jssp, #16]
0x4cd15bec   204  ldp xzr, fp, [jssp], #24
0x4cd15bf0   208  b #-0x60 (addr 0x4cd15b90)
0x4cd15bf4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd15bf8   216  d63f03e0       constant
0x4cd15bfc   220  d503201f       constant
0x4cd15c00   224  4cd06820       constant
0x4cd15c04   228  00000000       constant
0x4cd15c08   232  4cd06260       constant
0x4cd15c0c   236  00000000       constant
0x4cd15c10   240  4cd068e0       constant
0x4cd15c14   244  00000000       constant
0x4cd15c18   248  movz x16, #0x0
0x4cd15c1c   252  sub csp, jssp, #0x10 (16)
0x4cd15c20   256  stp fp, lr, [jssp, #-16]!
0x4cd15c24   260  bl #+0x14 (addr 0x4cd15c38)
0x4cd15c28   264  movz x16, #0x8
0x4cd15c2c   268  sub csp, jssp, #0x10 (16)
0x4cd15c30   272  stp fp, lr, [jssp, #-16]!
0x4cd15c34   276  bl #+0x4 (addr 0x4cd15c38)
0x4cd15c38   280  movz x17, #0xa00000000
0x4cd15c3c   284  sub csp, jssp, #0x10 (16)
0x4cd15c40   288  stp x17, cp, [jssp, #-16]!
0x4cd15c44   292  add fp, jssp, #0x10 (16)
0x4cd15c48   296  ldr x17, pc+24 (addr 0x000000004cd15c60)    ;; lazy deoptimization bailout 0
0x4cd15c4c   300  add x17, x17, x16
0x4cd15c50   304  br x17
0x4cd15c54   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd15c58   312  d63f03e0       constant
0x4cd15c5c   316  d503201f       constant
0x4cd15c60   320  4cb06000       constant
0x4cd15c64   324  00000000       constant


Safepoints (size = 21)
0x4cd15bdc   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd15bbc  code target (STUB)  (0x4cd06820)
0x4cd15bd4  code target (STUB)  (0x4cd06260)
0x4cd15be0  code target (STUB)  (0x4cd068e0)
0x4cd15bf4  constant pool (size 36)
0x4cd15c48  runtime entry
0x4cd15c54  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4264
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0x4cd15ce0     0  mov x2, x1
0x4cd15ce4     4  tbnz w2, #0, #+0x1c (addr 0x4cd15d00)
0x4cd15ce8     8  mov x3, x0
0x4cd15cec    12  tbnz w3, #0, #+0x24 (addr 0x4cd15d10)
0x4cd15cf0    16  subs x2, x2, x3
0x4cd15cf4    20  b.vs #+0x2c (addr 0x4cd15d20)
0x4cd15cf8    24  mov x0, x2
0x4cd15cfc    28  ret
0x4cd15d00    32  movz x16, #0x0
0x4cd15d04    36  sub csp, jssp, #0x10 (16)
0x4cd15d08    40  stp fp, lr, [jssp, #-16]!
0x4cd15d0c    44  bl #+0x24 (addr 0x4cd15d30)
0x4cd15d10    48  movz x16, #0x8
0x4cd15d14    52  sub csp, jssp, #0x10 (16)
0x4cd15d18    56  stp fp, lr, [jssp, #-16]!
0x4cd15d1c    60  bl #+0x14 (addr 0x4cd15d30)
0x4cd15d20    64  movz x16, #0x10
0x4cd15d24    68  sub csp, jssp, #0x10 (16)
0x4cd15d28    72  stp fp, lr, [jssp, #-16]!
0x4cd15d2c    76  bl #+0x4 (addr 0x4cd15d30)
0x4cd15d30    80  movz x17, #0xa00000000
0x4cd15d34    84  sub csp, jssp, #0x10 (16)
0x4cd15d38    88  stp x17, cp, [jssp, #-16]!
0x4cd15d3c    92  add fp, jssp, #0x10 (16)
0x4cd15d40    96  ldr x17, pc+24 (addr 0x000000004cd15d58)    ;; lazy deoptimization bailout 0
0x4cd15d44   100  add x17, x17, x16
0x4cd15d48   104  br x17
0x4cd15d4c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd15d50   112  d63f03e0       constant
0x4cd15d54   116  d503201f       constant
0x4cd15d58   120  4cb06000       constant
0x4cd15d5c   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd15d40  runtime entry
0x4cd15d4c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 4264
type = NORMAL
name = BinaryOpICStub(SUB:Smi*Int32->Int32)
compiler = crankshaft
Instructions (size = 136)
0x4cd15ce0     0  mov x2, x1
0x4cd15ce4     4  tbnz w2, #0, #+0x1c (addr 0x4cd15d00)
0x4cd15ce8     8  mov x3, x0
0x4cd15cec    12  tbnz w3, #0, #+0x24 (addr 0x4cd15d10)
0x4cd15cf0    16  subs x2, x2, x3
0x4cd15cf4    20  b.vs #+0x2c (addr 0x4cd15d20)
0x4cd15cf8    24  mov x0, x2
0x4cd15cfc    28  ret
0x4cd15d00    32  movz x16, #0x0
0x4cd15d04    36  sub csp, jssp, #0x10 (16)
0x4cd15d08    40  stp fp, lr, [jssp, #-16]!
0x4cd15d0c    44  bl #+0x24 (addr 0x4cd15d30)
0x4cd15d10    48  movz x16, #0x8
0x4cd15d14    52  sub csp, jssp, #0x10 (16)
0x4cd15d18    56  stp fp, lr, [jssp, #-16]!
0x4cd15d1c    60  bl #+0x14 (addr 0x4cd15d30)
0x4cd15d20    64  movz x16, #0x10
0x4cd15d24    68  sub csp, jssp, #0x10 (16)
0x4cd15d28    72  stp fp, lr, [jssp, #-16]!
0x4cd15d2c    76  bl #+0x4 (addr 0x4cd15d30)
0x4cd15d30    80  movz x17, #0xa00000000
0x4cd15d34    84  sub csp, jssp, #0x10 (16)
0x4cd15d38    88  stp x17, cp, [jssp, #-16]!
0x4cd15d3c    92  add fp, jssp, #0x10 (16)
0x4cd15d40    96  ldr x17, pc+24 (addr 0x000000004cd15d58)    ;; lazy deoptimization bailout 0
0x4cd15d44   100  add x17, x17, x16
0x4cd15d48   104  br x17
0x4cd15d4c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd15d50   112  d63f03e0       constant
0x4cd15d54   116  d503201f       constant
0x4cd15d58   120  4cb06000       constant
0x4cd15d5c   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd15d40  runtime entry
0x4cd15d4c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 6328
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 349)
0x4cd15de0     0  mov x2, x1
0x4cd15de4     4  tbnz w2, #0, #+0xf4 (addr 0x4cd15ed8)
0x4cd15de8     8  tbz w0, #0, #+0x34 (addr 0x4cd15e1c)
0x4cd15dec    12  ldur x16, [x0, #-1]
0x4cd15df0    16  ldr x17, [x26, #120]
0x4cd15df4    20  cmp x16, x17
0x4cd15df8    24  b.ne #+0xc (addr 0x4cd15e04)
0x4cd15dfc    28  ldur d0, [x0, #7]
0x4cd15e00    32  b #+0x20 (addr 0x4cd15e20)
0x4cd15e04    36  ldr x16, [x26, #40]
0x4cd15e08    40  cmp x0, x16
0x4cd15e0c    44  b.ne #+0xdc (addr 0x4cd15ee8)
0x4cd15e10    48  ldr x3, [x26, #928]
0x4cd15e14    52  ldur d0, [x3, #7]
0x4cd15e18    56  b #+0x8 (addr 0x4cd15e20)
0x4cd15e1c    60  scvtf d0, x0, #32
0x4cd15e20    64  scvtf d1, x2, #32
0x4cd15e24    68  fsub d0, d1, d0
0x4cd15e28    72  movz x1, #0xd2c0
0x4cd15e2c    76  movk x1, #0x166d, lsl #16
0x4cd15e30    80  ldp x2, x0, [x1]
0x4cd15e34    84  adds x16, x2, #0x10 (16)
0x4cd15e38    88  ccmp x16, x0, #nzCv, lo
0x4cd15e3c    92  b.hi #+0x20 (addr 0x4cd15e5c)
0x4cd15e40    96  str x16, [x1]
0x4cd15e44   100  ldr x1, [x26, #120]
0x4cd15e48   104  str x1, [x2]
0x4cd15e4c   108  orr x2, x2, #0x1
0x4cd15e50   112  stur d0, [x2, #7]
0x4cd15e54   116  mov x0, x2
0x4cd15e58   120  ret
0x4cd15e5c   124  sub csp, jssp, #0x10 (16)
0x4cd15e60   128  stp fp, lr, [jssp, #-16]!
0x4cd15e64   132  movz fp, #0xa00000000
0x4cd15e68   136  sub csp, jssp, #0x8 (8)
0x4cd15e6c   140  str fp, [jssp, #-8]!
0x4cd15e70   144  add fp, jssp, #0x8 (8)
0x4cd15e74   148  movz x2, #0x0
0x4cd15e78   152  mov x16, lr
0x4cd15e7c   156  ldr x17, pc+68 (addr 0x000000004cd15ec0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd15e80   160  blr x17
0x4cd15e84   164  ldur cp, [fp, #-8]
0x4cd15e88   168  movz x0, #0x0
0x4cd15e8c   172  movz x1, #0x4b48
0x4cd15e90   176  movk x1, #0xe4, lsl #16
0x4cd15e94   180  ldr x16, pc+52 (addr 0x000000004cd15ec8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd15e98   184  blr x16
0x4cd15e9c   188  str x0, [jssp, #16]
0x4cd15ea0   192  ldr x16, pc+48 (addr 0x000000004cd15ed0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd15ea4   196  blr x16
0x4cd15ea8   200  ldr lr, [jssp, #16]
0x4cd15eac   204  ldp xzr, fp, [jssp], #24
0x4cd15eb0   208  b #-0x60 (addr 0x4cd15e50)
0x4cd15eb4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd15eb8   216  d63f03e0       constant
0x4cd15ebc   220  d503201f       constant
0x4cd15ec0   224  4cd06820       constant
0x4cd15ec4   228  00000000       constant
0x4cd15ec8   232  4cd06260       constant
0x4cd15ecc   236  00000000       constant
0x4cd15ed0   240  4cd068e0       constant
0x4cd15ed4   244  00000000       constant
0x4cd15ed8   248  movz x16, #0x0
0x4cd15edc   252  sub csp, jssp, #0x10 (16)
0x4cd15ee0   256  stp fp, lr, [jssp, #-16]!
0x4cd15ee4   260  bl #+0x14 (addr 0x4cd15ef8)
0x4cd15ee8   264  movz x16, #0x8
0x4cd15eec   268  sub csp, jssp, #0x10 (16)
0x4cd15ef0   272  stp fp, lr, [jssp, #-16]!
0x4cd15ef4   276  bl #+0x4 (addr 0x4cd15ef8)
0x4cd15ef8   280  movz x17, #0xa00000000
0x4cd15efc   284  sub csp, jssp, #0x10 (16)
0x4cd15f00   288  stp x17, cp, [jssp, #-16]!
0x4cd15f04   292  add fp, jssp, #0x10 (16)
0x4cd15f08   296  ldr x17, pc+24 (addr 0x000000004cd15f20)    ;; lazy deoptimization bailout 0
0x4cd15f0c   300  add x17, x17, x16
0x4cd15f10   304  br x17
0x4cd15f14   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd15f18   312  d63f03e0       constant
0x4cd15f1c   316  d503201f       constant
0x4cd15f20   320  4cb06000       constant
0x4cd15f24   324  00000000       constant


Safepoints (size = 21)
0x4cd15e9c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd15e7c  code target (STUB)  (0x4cd06820)
0x4cd15e94  code target (STUB)  (0x4cd06260)
0x4cd15ea0  code target (STUB)  (0x4cd068e0)
0x4cd15eb4  constant pool (size 36)
0x4cd15f08  runtime entry
0x4cd15f14  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 6328
type = NORMAL
name = BinaryOpICStub(SUB:Smi*Number->Number)
compiler = crankshaft
Instructions (size = 349)
0x4cd15de0     0  mov x2, x1
0x4cd15de4     4  tbnz w2, #0, #+0xf4 (addr 0x4cd15ed8)
0x4cd15de8     8  tbz w0, #0, #+0x34 (addr 0x4cd15e1c)
0x4cd15dec    12  ldur x16, [x0, #-1]
0x4cd15df0    16  ldr x17, [x26, #120]
0x4cd15df4    20  cmp x16, x17
0x4cd15df8    24  b.ne #+0xc (addr 0x4cd15e04)
0x4cd15dfc    28  ldur d0, [x0, #7]
0x4cd15e00    32  b #+0x20 (addr 0x4cd15e20)
0x4cd15e04    36  ldr x16, [x26, #40]
0x4cd15e08    40  cmp x0, x16
0x4cd15e0c    44  b.ne #+0xdc (addr 0x4cd15ee8)
0x4cd15e10    48  ldr x3, [x26, #928]
0x4cd15e14    52  ldur d0, [x3, #7]
0x4cd15e18    56  b #+0x8 (addr 0x4cd15e20)
0x4cd15e1c    60  scvtf d0, x0, #32
0x4cd15e20    64  scvtf d1, x2, #32
0x4cd15e24    68  fsub d0, d1, d0
0x4cd15e28    72  movz x1, #0xd2c0
0x4cd15e2c    76  movk x1, #0x166d, lsl #16
0x4cd15e30    80  ldp x2, x0, [x1]
0x4cd15e34    84  adds x16, x2, #0x10 (16)
0x4cd15e38    88  ccmp x16, x0, #nzCv, lo
0x4cd15e3c    92  b.hi #+0x20 (addr 0x4cd15e5c)
0x4cd15e40    96  str x16, [x1]
0x4cd15e44   100  ldr x1, [x26, #120]
0x4cd15e48   104  str x1, [x2]
0x4cd15e4c   108  orr x2, x2, #0x1
0x4cd15e50   112  stur d0, [x2, #7]
0x4cd15e54   116  mov x0, x2
0x4cd15e58   120  ret
0x4cd15e5c   124  sub csp, jssp, #0x10 (16)
0x4cd15e60   128  stp fp, lr, [jssp, #-16]!
0x4cd15e64   132  movz fp, #0xa00000000
0x4cd15e68   136  sub csp, jssp, #0x8 (8)
0x4cd15e6c   140  str fp, [jssp, #-8]!
0x4cd15e70   144  add fp, jssp, #0x8 (8)
0x4cd15e74   148  movz x2, #0x0
0x4cd15e78   152  mov x16, lr
0x4cd15e7c   156  ldr x17, pc+68 (addr 0x000000004cd15ec0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd15e80   160  blr x17
0x4cd15e84   164  ldur cp, [fp, #-8]
0x4cd15e88   168  movz x0, #0x0
0x4cd15e8c   172  movz x1, #0x4b48
0x4cd15e90   176  movk x1, #0xe4, lsl #16
0x4cd15e94   180  ldr x16, pc+52 (addr 0x000000004cd15ec8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd15e98   184  blr x16
0x4cd15e9c   188  str x0, [jssp, #16]
0x4cd15ea0   192  ldr x16, pc+48 (addr 0x000000004cd15ed0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd15ea4   196  blr x16
0x4cd15ea8   200  ldr lr, [jssp, #16]
0x4cd15eac   204  ldp xzr, fp, [jssp], #24
0x4cd15eb0   208  b #-0x60 (addr 0x4cd15e50)
0x4cd15eb4   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd15eb8   216  d63f03e0       constant
0x4cd15ebc   220  d503201f       constant
0x4cd15ec0   224  4cd06820       constant
0x4cd15ec4   228  00000000       constant
0x4cd15ec8   232  4cd06260       constant
0x4cd15ecc   236  00000000       constant
0x4cd15ed0   240  4cd068e0       constant
0x4cd15ed4   244  00000000       constant
0x4cd15ed8   248  movz x16, #0x0
0x4cd15edc   252  sub csp, jssp, #0x10 (16)
0x4cd15ee0   256  stp fp, lr, [jssp, #-16]!
0x4cd15ee4   260  bl #+0x14 (addr 0x4cd15ef8)
0x4cd15ee8   264  movz x16, #0x8
0x4cd15eec   268  sub csp, jssp, #0x10 (16)
0x4cd15ef0   272  stp fp, lr, [jssp, #-16]!
0x4cd15ef4   276  bl #+0x4 (addr 0x4cd15ef8)
0x4cd15ef8   280  movz x17, #0xa00000000
0x4cd15efc   284  sub csp, jssp, #0x10 (16)
0x4cd15f00   288  stp x17, cp, [jssp, #-16]!
0x4cd15f04   292  add fp, jssp, #0x10 (16)
0x4cd15f08   296  ldr x17, pc+24 (addr 0x000000004cd15f20)    ;; lazy deoptimization bailout 0
0x4cd15f0c   300  add x17, x17, x16
0x4cd15f10   304  br x17
0x4cd15f14   308  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd15f18   312  d63f03e0       constant
0x4cd15f1c   316  d503201f       constant
0x4cd15f20   320  4cb06000       constant
0x4cd15f24   324  00000000       constant


Safepoints (size = 21)
0x4cd15e9c   188  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cd15e7c  code target (STUB)  (0x4cd06820)
0x4cd15e94  code target (STUB)  (0x4cd06260)
0x4cd15ea0  code target (STUB)  (0x4cd068e0)
0x4cd15eb4  constant pool (size 36)
0x4cd15f08  runtime entry
0x4cd15f14  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 2200
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 136)
0x4cd15fa0     0  mov x2, x1
0x4cd15fa4     4  tbnz w2, #0, #+0x1c (addr 0x4cd15fc0)
0x4cd15fa8     8  mov x3, x0
0x4cd15fac    12  tbnz w3, #0, #+0x24 (addr 0x4cd15fd0)
0x4cd15fb0    16  subs x2, x2, x3
0x4cd15fb4    20  b.vs #+0x2c (addr 0x4cd15fe0)
0x4cd15fb8    24  mov x0, x2
0x4cd15fbc    28  ret
0x4cd15fc0    32  movz x16, #0x0
0x4cd15fc4    36  sub csp, jssp, #0x10 (16)
0x4cd15fc8    40  stp fp, lr, [jssp, #-16]!
0x4cd15fcc    44  bl #+0x24 (addr 0x4cd15ff0)
0x4cd15fd0    48  movz x16, #0x8
0x4cd15fd4    52  sub csp, jssp, #0x10 (16)
0x4cd15fd8    56  stp fp, lr, [jssp, #-16]!
0x4cd15fdc    60  bl #+0x14 (addr 0x4cd15ff0)
0x4cd15fe0    64  movz x16, #0x10
0x4cd15fe4    68  sub csp, jssp, #0x10 (16)
0x4cd15fe8    72  stp fp, lr, [jssp, #-16]!
0x4cd15fec    76  bl #+0x4 (addr 0x4cd15ff0)
0x4cd15ff0    80  movz x17, #0xa00000000
0x4cd15ff4    84  sub csp, jssp, #0x10 (16)
0x4cd15ff8    88  stp x17, cp, [jssp, #-16]!
0x4cd15ffc    92  add fp, jssp, #0x10 (16)
0x4cd16000    96  ldr x17, pc+24 (addr 0x000000004cd16018)    ;; lazy deoptimization bailout 0
0x4cd16004   100  add x17, x17, x16
0x4cd16008   104  br x17
0x4cd1600c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd16010   112  d63f03e0       constant
0x4cd16014   116  d503201f       constant
0x4cd16018   120  4cb06000       constant
0x4cd1601c   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd16000  runtime entry
0x4cd1600c  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 2200
type = NORMAL
name = BinaryOpICStub(SUB:Smi*Smi->Smi)
compiler = crankshaft
Instructions (size = 136)
0x4cd15fa0     0  mov x2, x1
0x4cd15fa4     4  tbnz w2, #0, #+0x1c (addr 0x4cd15fc0)
0x4cd15fa8     8  mov x3, x0
0x4cd15fac    12  tbnz w3, #0, #+0x24 (addr 0x4cd15fd0)
0x4cd15fb0    16  subs x2, x2, x3
0x4cd15fb4    20  b.vs #+0x2c (addr 0x4cd15fe0)
0x4cd15fb8    24  mov x0, x2
0x4cd15fbc    28  ret
0x4cd15fc0    32  movz x16, #0x0
0x4cd15fc4    36  sub csp, jssp, #0x10 (16)
0x4cd15fc8    40  stp fp, lr, [jssp, #-16]!
0x4cd15fcc    44  bl #+0x24 (addr 0x4cd15ff0)
0x4cd15fd0    48  movz x16, #0x8
0x4cd15fd4    52  sub csp, jssp, #0x10 (16)
0x4cd15fd8    56  stp fp, lr, [jssp, #-16]!
0x4cd15fdc    60  bl #+0x14 (addr 0x4cd15ff0)
0x4cd15fe0    64  movz x16, #0x10
0x4cd15fe4    68  sub csp, jssp, #0x10 (16)
0x4cd15fe8    72  stp fp, lr, [jssp, #-16]!
0x4cd15fec    76  bl #+0x4 (addr 0x4cd15ff0)
0x4cd15ff0    80  movz x17, #0xa00000000
0x4cd15ff4    84  sub csp, jssp, #0x10 (16)
0x4cd15ff8    88  stp x17, cp, [jssp, #-16]!
0x4cd15ffc    92  add fp, jssp, #0x10 (16)
0x4cd16000    96  ldr x17, pc+24 (addr 0x000000004cd16018)    ;; lazy deoptimization bailout 0
0x4cd16004   100  add x17, x17, x16
0x4cd16008   104  br x17
0x4cd1600c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd16010   112  d63f03e0       constant
0x4cd16014   116  d503201f       constant
0x4cd16018   120  4cb06000       constant
0x4cd1601c   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd16000  runtime entry
0x4cd1600c  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 3227
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 192)
0x4cd160a0     0  mov x2, x1
0x4cd160a4     4  tbnz w2, #0, #+0x44 (addr 0x4cd160e8)
0x4cd160a8     8  mov x3, x0
0x4cd160ac    12  tbnz w3, #0, #+0x4c (addr 0x4cd160f8)
0x4cd160b0    16  asr x3, x3, #32
0x4cd160b4    20  cmp w3, #0x2 (2)
0x4cd160b8    24  b.eq #+0x8 (addr 0x4cd160c0)
0x4cd160bc    28  b #+0x4c (addr 0x4cd16108)
0x4cd160c0    32  asr x2, x2, #32
0x4cd160c4    36  tbz w2, #31, #+0x18 (addr 0x4cd160dc)
0x4cd160c8    40  neg w2, w2
0x4cd160cc    44  and w2, w2, #0x1
0x4cd160d0    48  negs w2, w2
0x4cd160d4    52  b.eq #+0x44 (addr 0x4cd16118)
0x4cd160d8    56  b #+0x8 (addr 0x4cd160e0)
0x4cd160dc    60  and w2, w2, #0x1
0x4cd160e0    64  lsl x0, x2, #32
0x4cd160e4    68  ret
0x4cd160e8    72  movz x16, #0x0
0x4cd160ec    76  sub csp, jssp, #0x10 (16)
0x4cd160f0    80  stp fp, lr, [jssp, #-16]!
0x4cd160f4    84  bl #+0x34 (addr 0x4cd16128)
0x4cd160f8    88  movz x16, #0x8
0x4cd160fc    92  sub csp, jssp, #0x10 (16)
0x4cd16100    96  stp fp, lr, [jssp, #-16]!
0x4cd16104   100  bl #+0x24 (addr 0x4cd16128)
0x4cd16108   104  movz x16, #0x10
0x4cd1610c   108  sub csp, jssp, #0x10 (16)
0x4cd16110   112  stp fp, lr, [jssp, #-16]!
0x4cd16114   116  bl #+0x14 (addr 0x4cd16128)
0x4cd16118   120  movz x16, #0x18
0x4cd1611c   124  sub csp, jssp, #0x10 (16)
0x4cd16120   128  stp fp, lr, [jssp, #-16]!
0x4cd16124   132  bl #+0x4 (addr 0x4cd16128)
0x4cd16128   136  movz x17, #0xa00000000
0x4cd1612c   140  sub csp, jssp, #0x10 (16)
0x4cd16130   144  stp x17, cp, [jssp, #-16]!
0x4cd16134   148  add fp, jssp, #0x10 (16)
0x4cd16138   152  ldr x17, pc+24 (addr 0x000000004cd16150)    ;; lazy deoptimization bailout 0
0x4cd1613c   156  add x17, x17, x16
0x4cd16140   160  br x17
0x4cd16144   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd16148   168  d63f03e0       constant
0x4cd1614c   172  d503201f       constant
0x4cd16150   176  4cb06000       constant
0x4cd16154   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd16138  runtime entry
0x4cd16144  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 3227
type = NORMAL
name = BinaryOpICStub(MOD:Smi*2->Smi)
compiler = crankshaft
Instructions (size = 192)
0x4cd160a0     0  mov x2, x1
0x4cd160a4     4  tbnz w2, #0, #+0x44 (addr 0x4cd160e8)
0x4cd160a8     8  mov x3, x0
0x4cd160ac    12  tbnz w3, #0, #+0x4c (addr 0x4cd160f8)
0x4cd160b0    16  asr x3, x3, #32
0x4cd160b4    20  cmp w3, #0x2 (2)
0x4cd160b8    24  b.eq #+0x8 (addr 0x4cd160c0)
0x4cd160bc    28  b #+0x4c (addr 0x4cd16108)
0x4cd160c0    32  asr x2, x2, #32
0x4cd160c4    36  tbz w2, #31, #+0x18 (addr 0x4cd160dc)
0x4cd160c8    40  neg w2, w2
0x4cd160cc    44  and w2, w2, #0x1
0x4cd160d0    48  negs w2, w2
0x4cd160d4    52  b.eq #+0x44 (addr 0x4cd16118)
0x4cd160d8    56  b #+0x8 (addr 0x4cd160e0)
0x4cd160dc    60  and w2, w2, #0x1
0x4cd160e0    64  lsl x0, x2, #32
0x4cd160e4    68  ret
0x4cd160e8    72  movz x16, #0x0
0x4cd160ec    76  sub csp, jssp, #0x10 (16)
0x4cd160f0    80  stp fp, lr, [jssp, #-16]!
0x4cd160f4    84  bl #+0x34 (addr 0x4cd16128)
0x4cd160f8    88  movz x16, #0x8
0x4cd160fc    92  sub csp, jssp, #0x10 (16)
0x4cd16100    96  stp fp, lr, [jssp, #-16]!
0x4cd16104   100  bl #+0x24 (addr 0x4cd16128)
0x4cd16108   104  movz x16, #0x10
0x4cd1610c   108  sub csp, jssp, #0x10 (16)
0x4cd16110   112  stp fp, lr, [jssp, #-16]!
0x4cd16114   116  bl #+0x14 (addr 0x4cd16128)
0x4cd16118   120  movz x16, #0x18
0x4cd1611c   124  sub csp, jssp, #0x10 (16)
0x4cd16120   128  stp fp, lr, [jssp, #-16]!
0x4cd16124   132  bl #+0x4 (addr 0x4cd16128)
0x4cd16128   136  movz x17, #0xa00000000
0x4cd1612c   140  sub csp, jssp, #0x10 (16)
0x4cd16130   144  stp x17, cp, [jssp, #-16]!
0x4cd16134   148  add fp, jssp, #0x10 (16)
0x4cd16138   152  ldr x17, pc+24 (addr 0x000000004cd16150)    ;; lazy deoptimization bailout 0
0x4cd1613c   156  add x17, x17, x16
0x4cd16140   160  br x17
0x4cd16144   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd16148   168  d63f03e0       constant
0x4cd1614c   172  d503201f       constant
0x4cd16150   176  4cb06000       constant
0x4cd16154   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd16138  runtime entry
0x4cd16144  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 5275
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 192)
0x4cd161c0     0  mov x2, x1
0x4cd161c4     4  tbnz w2, #0, #+0x44 (addr 0x4cd16208)
0x4cd161c8     8  mov x3, x0
0x4cd161cc    12  tbnz w3, #0, #+0x4c (addr 0x4cd16218)
0x4cd161d0    16  asr x3, x3, #32
0x4cd161d4    20  cmp w3, #0x4 (4)
0x4cd161d8    24  b.eq #+0x8 (addr 0x4cd161e0)
0x4cd161dc    28  b #+0x4c (addr 0x4cd16228)
0x4cd161e0    32  asr x2, x2, #32
0x4cd161e4    36  tbz w2, #31, #+0x18 (addr 0x4cd161fc)
0x4cd161e8    40  neg w2, w2
0x4cd161ec    44  and w2, w2, #0x3
0x4cd161f0    48  negs w2, w2
0x4cd161f4    52  b.eq #+0x44 (addr 0x4cd16238)
0x4cd161f8    56  b #+0x8 (addr 0x4cd16200)
0x4cd161fc    60  and w2, w2, #0x3
0x4cd16200    64  lsl x0, x2, #32
0x4cd16204    68  ret
0x4cd16208    72  movz x16, #0x0
0x4cd1620c    76  sub csp, jssp, #0x10 (16)
0x4cd16210    80  stp fp, lr, [jssp, #-16]!
0x4cd16214    84  bl #+0x34 (addr 0x4cd16248)
0x4cd16218    88  movz x16, #0x8
0x4cd1621c    92  sub csp, jssp, #0x10 (16)
0x4cd16220    96  stp fp, lr, [jssp, #-16]!
0x4cd16224   100  bl #+0x24 (addr 0x4cd16248)
0x4cd16228   104  movz x16, #0x10
0x4cd1622c   108  sub csp, jssp, #0x10 (16)
0x4cd16230   112  stp fp, lr, [jssp, #-16]!
0x4cd16234   116  bl #+0x14 (addr 0x4cd16248)
0x4cd16238   120  movz x16, #0x18
0x4cd1623c   124  sub csp, jssp, #0x10 (16)
0x4cd16240   128  stp fp, lr, [jssp, #-16]!
0x4cd16244   132  bl #+0x4 (addr 0x4cd16248)
0x4cd16248   136  movz x17, #0xa00000000
0x4cd1624c   140  sub csp, jssp, #0x10 (16)
0x4cd16250   144  stp x17, cp, [jssp, #-16]!
0x4cd16254   148  add fp, jssp, #0x10 (16)
0x4cd16258   152  ldr x17, pc+24 (addr 0x000000004cd16270)    ;; lazy deoptimization bailout 0
0x4cd1625c   156  add x17, x17, x16
0x4cd16260   160  br x17
0x4cd16264   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd16268   168  d63f03e0       constant
0x4cd1626c   172  d503201f       constant
0x4cd16270   176  4cb06000       constant
0x4cd16274   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd16258  runtime entry
0x4cd16264  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 5275
type = NORMAL
name = BinaryOpICStub(MOD:Smi*4->Smi)
compiler = crankshaft
Instructions (size = 192)
0x4cd161c0     0  mov x2, x1
0x4cd161c4     4  tbnz w2, #0, #+0x44 (addr 0x4cd16208)
0x4cd161c8     8  mov x3, x0
0x4cd161cc    12  tbnz w3, #0, #+0x4c (addr 0x4cd16218)
0x4cd161d0    16  asr x3, x3, #32
0x4cd161d4    20  cmp w3, #0x4 (4)
0x4cd161d8    24  b.eq #+0x8 (addr 0x4cd161e0)
0x4cd161dc    28  b #+0x4c (addr 0x4cd16228)
0x4cd161e0    32  asr x2, x2, #32
0x4cd161e4    36  tbz w2, #31, #+0x18 (addr 0x4cd161fc)
0x4cd161e8    40  neg w2, w2
0x4cd161ec    44  and w2, w2, #0x3
0x4cd161f0    48  negs w2, w2
0x4cd161f4    52  b.eq #+0x44 (addr 0x4cd16238)
0x4cd161f8    56  b #+0x8 (addr 0x4cd16200)
0x4cd161fc    60  and w2, w2, #0x3
0x4cd16200    64  lsl x0, x2, #32
0x4cd16204    68  ret
0x4cd16208    72  movz x16, #0x0
0x4cd1620c    76  sub csp, jssp, #0x10 (16)
0x4cd16210    80  stp fp, lr, [jssp, #-16]!
0x4cd16214    84  bl #+0x34 (addr 0x4cd16248)
0x4cd16218    88  movz x16, #0x8
0x4cd1621c    92  sub csp, jssp, #0x10 (16)
0x4cd16220    96  stp fp, lr, [jssp, #-16]!
0x4cd16224   100  bl #+0x24 (addr 0x4cd16248)
0x4cd16228   104  movz x16, #0x10
0x4cd1622c   108  sub csp, jssp, #0x10 (16)
0x4cd16230   112  stp fp, lr, [jssp, #-16]!
0x4cd16234   116  bl #+0x14 (addr 0x4cd16248)
0x4cd16238   120  movz x16, #0x18
0x4cd1623c   124  sub csp, jssp, #0x10 (16)
0x4cd16240   128  stp fp, lr, [jssp, #-16]!
0x4cd16244   132  bl #+0x4 (addr 0x4cd16248)
0x4cd16248   136  movz x17, #0xa00000000
0x4cd1624c   140  sub csp, jssp, #0x10 (16)
0x4cd16250   144  stp x17, cp, [jssp, #-16]!
0x4cd16254   148  add fp, jssp, #0x10 (16)
0x4cd16258   152  ldr x17, pc+24 (addr 0x000000004cd16270)    ;; lazy deoptimization bailout 0
0x4cd1625c   156  add x17, x17, x16
0x4cd16260   160  br x17
0x4cd16264   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd16268   168  d63f03e0       constant
0x4cd1626c   172  d503201f       constant
0x4cd16270   176  4cb06000       constant
0x4cd16274   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd16258  runtime entry
0x4cd16264  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 7323
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 192)
0x4cd162e0     0  mov x2, x1
0x4cd162e4     4  tbnz w2, #0, #+0x44 (addr 0x4cd16328)
0x4cd162e8     8  mov x3, x0
0x4cd162ec    12  tbnz w3, #0, #+0x4c (addr 0x4cd16338)
0x4cd162f0    16  asr x3, x3, #32
0x4cd162f4    20  cmp w3, #0x8 (8)
0x4cd162f8    24  b.eq #+0x8 (addr 0x4cd16300)
0x4cd162fc    28  b #+0x4c (addr 0x4cd16348)
0x4cd16300    32  asr x2, x2, #32
0x4cd16304    36  tbz w2, #31, #+0x18 (addr 0x4cd1631c)
0x4cd16308    40  neg w2, w2
0x4cd1630c    44  and w2, w2, #0x7
0x4cd16310    48  negs w2, w2
0x4cd16314    52  b.eq #+0x44 (addr 0x4cd16358)
0x4cd16318    56  b #+0x8 (addr 0x4cd16320)
0x4cd1631c    60  and w2, w2, #0x7
0x4cd16320    64  lsl x0, x2, #32
0x4cd16324    68  ret
0x4cd16328    72  movz x16, #0x0
0x4cd1632c    76  sub csp, jssp, #0x10 (16)
0x4cd16330    80  stp fp, lr, [jssp, #-16]!
0x4cd16334    84  bl #+0x34 (addr 0x4cd16368)
0x4cd16338    88  movz x16, #0x8
0x4cd1633c    92  sub csp, jssp, #0x10 (16)
0x4cd16340    96  stp fp, lr, [jssp, #-16]!
0x4cd16344   100  bl #+0x24 (addr 0x4cd16368)
0x4cd16348   104  movz x16, #0x10
0x4cd1634c   108  sub csp, jssp, #0x10 (16)
0x4cd16350   112  stp fp, lr, [jssp, #-16]!
0x4cd16354   116  bl #+0x14 (addr 0x4cd16368)
0x4cd16358   120  movz x16, #0x18
0x4cd1635c   124  sub csp, jssp, #0x10 (16)
0x4cd16360   128  stp fp, lr, [jssp, #-16]!
0x4cd16364   132  bl #+0x4 (addr 0x4cd16368)
0x4cd16368   136  movz x17, #0xa00000000
0x4cd1636c   140  sub csp, jssp, #0x10 (16)
0x4cd16370   144  stp x17, cp, [jssp, #-16]!
0x4cd16374   148  add fp, jssp, #0x10 (16)
0x4cd16378   152  ldr x17, pc+24 (addr 0x000000004cd16390)    ;; lazy deoptimization bailout 0
0x4cd1637c   156  add x17, x17, x16
0x4cd16380   160  br x17
0x4cd16384   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd16388   168  d63f03e0       constant
0x4cd1638c   172  d503201f       constant
0x4cd16390   176  4cb06000       constant
0x4cd16394   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd16378  runtime entry
0x4cd16384  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 7323
type = NORMAL
name = BinaryOpICStub(MOD:Smi*8->Smi)
compiler = crankshaft
Instructions (size = 192)
0x4cd162e0     0  mov x2, x1
0x4cd162e4     4  tbnz w2, #0, #+0x44 (addr 0x4cd16328)
0x4cd162e8     8  mov x3, x0
0x4cd162ec    12  tbnz w3, #0, #+0x4c (addr 0x4cd16338)
0x4cd162f0    16  asr x3, x3, #32
0x4cd162f4    20  cmp w3, #0x8 (8)
0x4cd162f8    24  b.eq #+0x8 (addr 0x4cd16300)
0x4cd162fc    28  b #+0x4c (addr 0x4cd16348)
0x4cd16300    32  asr x2, x2, #32
0x4cd16304    36  tbz w2, #31, #+0x18 (addr 0x4cd1631c)
0x4cd16308    40  neg w2, w2
0x4cd1630c    44  and w2, w2, #0x7
0x4cd16310    48  negs w2, w2
0x4cd16314    52  b.eq #+0x44 (addr 0x4cd16358)
0x4cd16318    56  b #+0x8 (addr 0x4cd16320)
0x4cd1631c    60  and w2, w2, #0x7
0x4cd16320    64  lsl x0, x2, #32
0x4cd16324    68  ret
0x4cd16328    72  movz x16, #0x0
0x4cd1632c    76  sub csp, jssp, #0x10 (16)
0x4cd16330    80  stp fp, lr, [jssp, #-16]!
0x4cd16334    84  bl #+0x34 (addr 0x4cd16368)
0x4cd16338    88  movz x16, #0x8
0x4cd1633c    92  sub csp, jssp, #0x10 (16)
0x4cd16340    96  stp fp, lr, [jssp, #-16]!
0x4cd16344   100  bl #+0x24 (addr 0x4cd16368)
0x4cd16348   104  movz x16, #0x10
0x4cd1634c   108  sub csp, jssp, #0x10 (16)
0x4cd16350   112  stp fp, lr, [jssp, #-16]!
0x4cd16354   116  bl #+0x14 (addr 0x4cd16368)
0x4cd16358   120  movz x16, #0x18
0x4cd1635c   124  sub csp, jssp, #0x10 (16)
0x4cd16360   128  stp fp, lr, [jssp, #-16]!
0x4cd16364   132  bl #+0x4 (addr 0x4cd16368)
0x4cd16368   136  movz x17, #0xa00000000
0x4cd1636c   140  sub csp, jssp, #0x10 (16)
0x4cd16370   144  stp x17, cp, [jssp, #-16]!
0x4cd16374   148  add fp, jssp, #0x10 (16)
0x4cd16378   152  ldr x17, pc+24 (addr 0x000000004cd16390)    ;; lazy deoptimization bailout 0
0x4cd1637c   156  add x17, x17, x16
0x4cd16380   160  br x17
0x4cd16384   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd16388   168  d63f03e0       constant
0x4cd1638c   172  d503201f       constant
0x4cd16390   176  4cb06000       constant
0x4cd16394   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd16378  runtime entry
0x4cd16384  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 9371
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 192)
0x4cd16400     0  mov x2, x1
0x4cd16404     4  tbnz w2, #0, #+0x44 (addr 0x4cd16448)
0x4cd16408     8  mov x3, x0
0x4cd1640c    12  tbnz w3, #0, #+0x4c (addr 0x4cd16458)
0x4cd16410    16  asr x3, x3, #32
0x4cd16414    20  cmp w3, #0x10 (16)
0x4cd16418    24  b.eq #+0x8 (addr 0x4cd16420)
0x4cd1641c    28  b #+0x4c (addr 0x4cd16468)
0x4cd16420    32  asr x2, x2, #32
0x4cd16424    36  tbz w2, #31, #+0x18 (addr 0x4cd1643c)
0x4cd16428    40  neg w2, w2
0x4cd1642c    44  and w2, w2, #0xf
0x4cd16430    48  negs w2, w2
0x4cd16434    52  b.eq #+0x44 (addr 0x4cd16478)
0x4cd16438    56  b #+0x8 (addr 0x4cd16440)
0x4cd1643c    60  and w2, w2, #0xf
0x4cd16440    64  lsl x0, x2, #32
0x4cd16444    68  ret
0x4cd16448    72  movz x16, #0x0
0x4cd1644c    76  sub csp, jssp, #0x10 (16)
0x4cd16450    80  stp fp, lr, [jssp, #-16]!
0x4cd16454    84  bl #+0x34 (addr 0x4cd16488)
0x4cd16458    88  movz x16, #0x8
0x4cd1645c    92  sub csp, jssp, #0x10 (16)
0x4cd16460    96  stp fp, lr, [jssp, #-16]!
0x4cd16464   100  bl #+0x24 (addr 0x4cd16488)
0x4cd16468   104  movz x16, #0x10
0x4cd1646c   108  sub csp, jssp, #0x10 (16)
0x4cd16470   112  stp fp, lr, [jssp, #-16]!
0x4cd16474   116  bl #+0x14 (addr 0x4cd16488)
0x4cd16478   120  movz x16, #0x18
0x4cd1647c   124  sub csp, jssp, #0x10 (16)
0x4cd16480   128  stp fp, lr, [jssp, #-16]!
0x4cd16484   132  bl #+0x4 (addr 0x4cd16488)
0x4cd16488   136  movz x17, #0xa00000000
0x4cd1648c   140  sub csp, jssp, #0x10 (16)
0x4cd16490   144  stp x17, cp, [jssp, #-16]!
0x4cd16494   148  add fp, jssp, #0x10 (16)
0x4cd16498   152  ldr x17, pc+24 (addr 0x000000004cd164b0)    ;; lazy deoptimization bailout 0
0x4cd1649c   156  add x17, x17, x16
0x4cd164a0   160  br x17
0x4cd164a4   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd164a8   168  d63f03e0       constant
0x4cd164ac   172  d503201f       constant
0x4cd164b0   176  4cb06000       constant
0x4cd164b4   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd16498  runtime entry
0x4cd164a4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 9371
type = NORMAL
name = BinaryOpICStub(MOD:Smi*16->Smi)
compiler = crankshaft
Instructions (size = 192)
0x4cd16400     0  mov x2, x1
0x4cd16404     4  tbnz w2, #0, #+0x44 (addr 0x4cd16448)
0x4cd16408     8  mov x3, x0
0x4cd1640c    12  tbnz w3, #0, #+0x4c (addr 0x4cd16458)
0x4cd16410    16  asr x3, x3, #32
0x4cd16414    20  cmp w3, #0x10 (16)
0x4cd16418    24  b.eq #+0x8 (addr 0x4cd16420)
0x4cd1641c    28  b #+0x4c (addr 0x4cd16468)
0x4cd16420    32  asr x2, x2, #32
0x4cd16424    36  tbz w2, #31, #+0x18 (addr 0x4cd1643c)
0x4cd16428    40  neg w2, w2
0x4cd1642c    44  and w2, w2, #0xf
0x4cd16430    48  negs w2, w2
0x4cd16434    52  b.eq #+0x44 (addr 0x4cd16478)
0x4cd16438    56  b #+0x8 (addr 0x4cd16440)
0x4cd1643c    60  and w2, w2, #0xf
0x4cd16440    64  lsl x0, x2, #32
0x4cd16444    68  ret
0x4cd16448    72  movz x16, #0x0
0x4cd1644c    76  sub csp, jssp, #0x10 (16)
0x4cd16450    80  stp fp, lr, [jssp, #-16]!
0x4cd16454    84  bl #+0x34 (addr 0x4cd16488)
0x4cd16458    88  movz x16, #0x8
0x4cd1645c    92  sub csp, jssp, #0x10 (16)
0x4cd16460    96  stp fp, lr, [jssp, #-16]!
0x4cd16464   100  bl #+0x24 (addr 0x4cd16488)
0x4cd16468   104  movz x16, #0x10
0x4cd1646c   108  sub csp, jssp, #0x10 (16)
0x4cd16470   112  stp fp, lr, [jssp, #-16]!
0x4cd16474   116  bl #+0x14 (addr 0x4cd16488)
0x4cd16478   120  movz x16, #0x18
0x4cd1647c   124  sub csp, jssp, #0x10 (16)
0x4cd16480   128  stp fp, lr, [jssp, #-16]!
0x4cd16484   132  bl #+0x4 (addr 0x4cd16488)
0x4cd16488   136  movz x17, #0xa00000000
0x4cd1648c   140  sub csp, jssp, #0x10 (16)
0x4cd16490   144  stp x17, cp, [jssp, #-16]!
0x4cd16494   148  add fp, jssp, #0x10 (16)
0x4cd16498   152  ldr x17, pc+24 (addr 0x000000004cd164b0)    ;; lazy deoptimization bailout 0
0x4cd1649c   156  add x17, x17, x16
0x4cd164a0   160  br x17
0x4cd164a4   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd164a8   168  d63f03e0       constant
0x4cd164ac   172  d503201f       constant
0x4cd164b0   176  4cb06000       constant
0x4cd164b4   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd16498  runtime entry
0x4cd164a4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 11419
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 192)
0x4cd16520     0  mov x2, x1
0x4cd16524     4  tbnz w2, #0, #+0x44 (addr 0x4cd16568)
0x4cd16528     8  mov x3, x0
0x4cd1652c    12  tbnz w3, #0, #+0x4c (addr 0x4cd16578)
0x4cd16530    16  asr x3, x3, #32
0x4cd16534    20  cmp w3, #0x20 (32)
0x4cd16538    24  b.eq #+0x8 (addr 0x4cd16540)
0x4cd1653c    28  b #+0x4c (addr 0x4cd16588)
0x4cd16540    32  asr x2, x2, #32
0x4cd16544    36  tbz w2, #31, #+0x18 (addr 0x4cd1655c)
0x4cd16548    40  neg w2, w2
0x4cd1654c    44  and w2, w2, #0x1f
0x4cd16550    48  negs w2, w2
0x4cd16554    52  b.eq #+0x44 (addr 0x4cd16598)
0x4cd16558    56  b #+0x8 (addr 0x4cd16560)
0x4cd1655c    60  and w2, w2, #0x1f
0x4cd16560    64  lsl x0, x2, #32
0x4cd16564    68  ret
0x4cd16568    72  movz x16, #0x0
0x4cd1656c    76  sub csp, jssp, #0x10 (16)
0x4cd16570    80  stp fp, lr, [jssp, #-16]!
0x4cd16574    84  bl #+0x34 (addr 0x4cd165a8)
0x4cd16578    88  movz x16, #0x8
0x4cd1657c    92  sub csp, jssp, #0x10 (16)
0x4cd16580    96  stp fp, lr, [jssp, #-16]!
0x4cd16584   100  bl #+0x24 (addr 0x4cd165a8)
0x4cd16588   104  movz x16, #0x10
0x4cd1658c   108  sub csp, jssp, #0x10 (16)
0x4cd16590   112  stp fp, lr, [jssp, #-16]!
0x4cd16594   116  bl #+0x14 (addr 0x4cd165a8)
0x4cd16598   120  movz x16, #0x18
0x4cd1659c   124  sub csp, jssp, #0x10 (16)
0x4cd165a0   128  stp fp, lr, [jssp, #-16]!
0x4cd165a4   132  bl #+0x4 (addr 0x4cd165a8)
0x4cd165a8   136  movz x17, #0xa00000000
0x4cd165ac   140  sub csp, jssp, #0x10 (16)
0x4cd165b0   144  stp x17, cp, [jssp, #-16]!
0x4cd165b4   148  add fp, jssp, #0x10 (16)
0x4cd165b8   152  ldr x17, pc+24 (addr 0x000000004cd165d0)    ;; lazy deoptimization bailout 0
0x4cd165bc   156  add x17, x17, x16
0x4cd165c0   160  br x17
0x4cd165c4   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd165c8   168  d63f03e0       constant
0x4cd165cc   172  d503201f       constant
0x4cd165d0   176  4cb06000       constant
0x4cd165d4   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd165b8  runtime entry
0x4cd165c4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 11419
type = NORMAL
name = BinaryOpICStub(MOD:Smi*32->Smi)
compiler = crankshaft
Instructions (size = 192)
0x4cd16520     0  mov x2, x1
0x4cd16524     4  tbnz w2, #0, #+0x44 (addr 0x4cd16568)
0x4cd16528     8  mov x3, x0
0x4cd1652c    12  tbnz w3, #0, #+0x4c (addr 0x4cd16578)
0x4cd16530    16  asr x3, x3, #32
0x4cd16534    20  cmp w3, #0x20 (32)
0x4cd16538    24  b.eq #+0x8 (addr 0x4cd16540)
0x4cd1653c    28  b #+0x4c (addr 0x4cd16588)
0x4cd16540    32  asr x2, x2, #32
0x4cd16544    36  tbz w2, #31, #+0x18 (addr 0x4cd1655c)
0x4cd16548    40  neg w2, w2
0x4cd1654c    44  and w2, w2, #0x1f
0x4cd16550    48  negs w2, w2
0x4cd16554    52  b.eq #+0x44 (addr 0x4cd16598)
0x4cd16558    56  b #+0x8 (addr 0x4cd16560)
0x4cd1655c    60  and w2, w2, #0x1f
0x4cd16560    64  lsl x0, x2, #32
0x4cd16564    68  ret
0x4cd16568    72  movz x16, #0x0
0x4cd1656c    76  sub csp, jssp, #0x10 (16)
0x4cd16570    80  stp fp, lr, [jssp, #-16]!
0x4cd16574    84  bl #+0x34 (addr 0x4cd165a8)
0x4cd16578    88  movz x16, #0x8
0x4cd1657c    92  sub csp, jssp, #0x10 (16)
0x4cd16580    96  stp fp, lr, [jssp, #-16]!
0x4cd16584   100  bl #+0x24 (addr 0x4cd165a8)
0x4cd16588   104  movz x16, #0x10
0x4cd1658c   108  sub csp, jssp, #0x10 (16)
0x4cd16590   112  stp fp, lr, [jssp, #-16]!
0x4cd16594   116  bl #+0x14 (addr 0x4cd165a8)
0x4cd16598   120  movz x16, #0x18
0x4cd1659c   124  sub csp, jssp, #0x10 (16)
0x4cd165a0   128  stp fp, lr, [jssp, #-16]!
0x4cd165a4   132  bl #+0x4 (addr 0x4cd165a8)
0x4cd165a8   136  movz x17, #0xa00000000
0x4cd165ac   140  sub csp, jssp, #0x10 (16)
0x4cd165b0   144  stp x17, cp, [jssp, #-16]!
0x4cd165b4   148  add fp, jssp, #0x10 (16)
0x4cd165b8   152  ldr x17, pc+24 (addr 0x000000004cd165d0)    ;; lazy deoptimization bailout 0
0x4cd165bc   156  add x17, x17, x16
0x4cd165c0   160  br x17
0x4cd165c4   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd165c8   168  d63f03e0       constant
0x4cd165cc   172  d503201f       constant
0x4cd165d0   176  4cb06000       constant
0x4cd165d4   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd165b8  runtime entry
0x4cd165c4  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 23707
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 192)
0x4cd16640     0  mov x2, x1
0x4cd16644     4  tbnz w2, #0, #+0x44 (addr 0x4cd16688)
0x4cd16648     8  mov x3, x0
0x4cd1664c    12  tbnz w3, #0, #+0x4c (addr 0x4cd16698)
0x4cd16650    16  asr x3, x3, #32
0x4cd16654    20  cmp w3, #0x800 (2048)
0x4cd16658    24  b.eq #+0x8 (addr 0x4cd16660)
0x4cd1665c    28  b #+0x4c (addr 0x4cd166a8)
0x4cd16660    32  asr x2, x2, #32
0x4cd16664    36  tbz w2, #31, #+0x18 (addr 0x4cd1667c)
0x4cd16668    40  neg w2, w2
0x4cd1666c    44  and w2, w2, #0x7ff
0x4cd16670    48  negs w2, w2
0x4cd16674    52  b.eq #+0x44 (addr 0x4cd166b8)
0x4cd16678    56  b #+0x8 (addr 0x4cd16680)
0x4cd1667c    60  and w2, w2, #0x7ff
0x4cd16680    64  lsl x0, x2, #32
0x4cd16684    68  ret
0x4cd16688    72  movz x16, #0x0
0x4cd1668c    76  sub csp, jssp, #0x10 (16)
0x4cd16690    80  stp fp, lr, [jssp, #-16]!
0x4cd16694    84  bl #+0x34 (addr 0x4cd166c8)
0x4cd16698    88  movz x16, #0x8
0x4cd1669c    92  sub csp, jssp, #0x10 (16)
0x4cd166a0    96  stp fp, lr, [jssp, #-16]!
0x4cd166a4   100  bl #+0x24 (addr 0x4cd166c8)
0x4cd166a8   104  movz x16, #0x10
0x4cd166ac   108  sub csp, jssp, #0x10 (16)
0x4cd166b0   112  stp fp, lr, [jssp, #-16]!
0x4cd166b4   116  bl #+0x14 (addr 0x4cd166c8)
0x4cd166b8   120  movz x16, #0x18
0x4cd166bc   124  sub csp, jssp, #0x10 (16)
0x4cd166c0   128  stp fp, lr, [jssp, #-16]!
0x4cd166c4   132  bl #+0x4 (addr 0x4cd166c8)
0x4cd166c8   136  movz x17, #0xa00000000
0x4cd166cc   140  sub csp, jssp, #0x10 (16)
0x4cd166d0   144  stp x17, cp, [jssp, #-16]!
0x4cd166d4   148  add fp, jssp, #0x10 (16)
0x4cd166d8   152  ldr x17, pc+24 (addr 0x000000004cd166f0)    ;; lazy deoptimization bailout 0
0x4cd166dc   156  add x17, x17, x16
0x4cd166e0   160  br x17
0x4cd166e4   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd166e8   168  d63f03e0       constant
0x4cd166ec   172  d503201f       constant
0x4cd166f0   176  4cb06000       constant
0x4cd166f4   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd166d8  runtime entry
0x4cd166e4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 23707
type = NORMAL
name = BinaryOpICStub(MOD:Smi*2048->Smi)
compiler = crankshaft
Instructions (size = 192)
0x4cd16640     0  mov x2, x1
0x4cd16644     4  tbnz w2, #0, #+0x44 (addr 0x4cd16688)
0x4cd16648     8  mov x3, x0
0x4cd1664c    12  tbnz w3, #0, #+0x4c (addr 0x4cd16698)
0x4cd16650    16  asr x3, x3, #32
0x4cd16654    20  cmp w3, #0x800 (2048)
0x4cd16658    24  b.eq #+0x8 (addr 0x4cd16660)
0x4cd1665c    28  b #+0x4c (addr 0x4cd166a8)
0x4cd16660    32  asr x2, x2, #32
0x4cd16664    36  tbz w2, #31, #+0x18 (addr 0x4cd1667c)
0x4cd16668    40  neg w2, w2
0x4cd1666c    44  and w2, w2, #0x7ff
0x4cd16670    48  negs w2, w2
0x4cd16674    52  b.eq #+0x44 (addr 0x4cd166b8)
0x4cd16678    56  b #+0x8 (addr 0x4cd16680)
0x4cd1667c    60  and w2, w2, #0x7ff
0x4cd16680    64  lsl x0, x2, #32
0x4cd16684    68  ret
0x4cd16688    72  movz x16, #0x0
0x4cd1668c    76  sub csp, jssp, #0x10 (16)
0x4cd16690    80  stp fp, lr, [jssp, #-16]!
0x4cd16694    84  bl #+0x34 (addr 0x4cd166c8)
0x4cd16698    88  movz x16, #0x8
0x4cd1669c    92  sub csp, jssp, #0x10 (16)
0x4cd166a0    96  stp fp, lr, [jssp, #-16]!
0x4cd166a4   100  bl #+0x24 (addr 0x4cd166c8)
0x4cd166a8   104  movz x16, #0x10
0x4cd166ac   108  sub csp, jssp, #0x10 (16)
0x4cd166b0   112  stp fp, lr, [jssp, #-16]!
0x4cd166b4   116  bl #+0x14 (addr 0x4cd166c8)
0x4cd166b8   120  movz x16, #0x18
0x4cd166bc   124  sub csp, jssp, #0x10 (16)
0x4cd166c0   128  stp fp, lr, [jssp, #-16]!
0x4cd166c4   132  bl #+0x4 (addr 0x4cd166c8)
0x4cd166c8   136  movz x17, #0xa00000000
0x4cd166cc   140  sub csp, jssp, #0x10 (16)
0x4cd166d0   144  stp x17, cp, [jssp, #-16]!
0x4cd166d4   148  add fp, jssp, #0x10 (16)
0x4cd166d8   152  ldr x17, pc+24 (addr 0x000000004cd166f0)    ;; lazy deoptimization bailout 0
0x4cd166dc   156  add x17, x17, x16
0x4cd166e0   160  br x17
0x4cd166e4   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd166e8   168  d63f03e0       constant
0x4cd166ec   172  d503201f       constant
0x4cd166f0   176  4cb06000       constant
0x4cd166f4   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd166d8  runtime entry
0x4cd166e4  constant pool (size 20)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0x4cd16760     0  adr xzr, #+0x40 (addr 0x4cd167a0)
0x4cd16764     4  adr xzr, #+0x360 (addr 0x4cd16ac4)
0x4cd16768     8  ldr x16, pc+1736 (addr 0x000000004cd16e30)    ;; external reference (store_buffer_top)
0x4cd1676c    12  ldr x1, [x16]
0x4cd16770    16  str x2, [x1], #8
0x4cd16774    20  str x1, [x16]
0x4cd16778    24  tst x1, #0x1ffff
0x4cd1677c    28  b.eq #+0x8 (addr 0x4cd16784)
0x4cd16780    32  ret
0x4cd16784    36  sub csp, jssp, #0x8 (8)
0x4cd16788    40  str lr, [jssp, #-8]!
0x4cd1678c    44  ldr x17, pc+1708 (addr 0x000000004cd16e38)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd16790    48  blr x17
0x4cd16794    52  ldr lr, [jssp], #8
0x4cd16798    56  ret
0x4cd1679c    60  ret
0x4cd167a0    64  sub csp, jssp, #0x10 (16)
0x4cd167a4    68  stp x3, x0, [jssp, #-16]!
0x4cd167a8    72  ldr x1, [x2]
0x4cd167ac    76  and x16, x1, #0xfffffffffff00000
0x4cd167b0    80  ldr x16, [x16, #8]
0x4cd167b4    84  tst x16, #0x18
0x4cd167b8    88  b.eq #+0x1d8 (addr 0x4cd16990)
0x4cd167bc    92  and x16, x5, #0xfffffffffff00000
0x4cd167c0    96  ldr x16, [x16, #8]
0x4cd167c4   100  tst x16, #0x18
0x4cd167c8   104  b.ne #+0x1c8 (addr 0x4cd16990)
0x4cd167cc   108  and x1, x5, #0xfffffffffff00000
0x4cd167d0   112  ldr x0, [x1, #104]
0x4cd167d4   116  subs x0, x0, #0x1 (1)
0x4cd167d8   120  str x0, [x1, #104]
0x4cd167dc   124  b.mi #+0xc4 (addr 0x4cd168a0)
0x4cd167e0   128  ubfx x16, x5, #8, #12
0x4cd167e4   132  and x1, x5, #0xfffffffffff00000
0x4cd167e8   136  add x1, x1, x16, lsl #2
0x4cd167ec   140  ubfx x0, x5, #3, #5
0x4cd167f0   144  ldr x1, [x1, #360]
0x4cd167f4   148  lsr x1, x1, x0
0x4cd167f8   152  tbz w1, #0, #+0x8 (addr 0x4cd16800)
0x4cd167fc   156  tbnz w1, #1, #+0x3c (addr 0x4cd16838)
0x4cd16800   160  ldp x3, x0, [jssp], #16
0x4cd16804   164  ldr x16, pc+1596 (addr 0x000000004cd16e40)    ;; external reference (store_buffer_top)
0x4cd16808   168  ldr x1, [x16]
0x4cd1680c   172  str x2, [x1], #8
0x4cd16810   176  str x1, [x16]
0x4cd16814   180  tst x1, #0x1ffff
0x4cd16818   184  b.eq #+0x8 (addr 0x4cd16820)
0x4cd1681c   188  ret
0x4cd16820   192  sub csp, jssp, #0x8 (8)
0x4cd16824   196  str lr, [jssp, #-8]!
0x4cd16828   200  ldr x17, pc+1568 (addr 0x000000004cd16e48)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd1682c   204  blr x17
0x4cd16830   208  ldr lr, [jssp], #8
0x4cd16834   212  ret
0x4cd16838   216  ldr x1, [x2]
0x4cd1683c   220  sub csp, jssp, #0x10 (16)
0x4cd16840   224  stp x5, x2, [jssp, #-16]!
0x4cd16844   228  ubfx x16, x1, #8, #12
0x4cd16848   232  and x0, x1, #0xfffffffffff00000
0x4cd1684c   236  add x0, x0, x16, lsl #2
0x4cd16850   240  ubfx x5, x1, #3, #5
0x4cd16854   244  ldr x2, [x0, #360]
0x4cd16858   248  lsr x2, x2, x5
0x4cd1685c   252  tbz w2, #0, #+0x40 (addr 0x4cd1689c)
0x4cd16860   256  ldp x5, x2, [jssp], #16
0x4cd16864   260  ldp x3, x0, [jssp], #16
0x4cd16868   264  ldr x16, pc+1512 (addr 0x000000004cd16e50)    ;; external reference (store_buffer_top)
0x4cd1686c   268  ldr x1, [x16]
0x4cd16870   272  str x2, [x1], #8
0x4cd16874   276  str x1, [x16]
0x4cd16878   280  tst x1, #0x1ffff
0x4cd1687c   284  b.eq #+0x8 (addr 0x4cd16884)
0x4cd16880   288  ret
0x4cd16884   292  sub csp, jssp, #0x8 (8)
0x4cd16888   296  str lr, [jssp, #-8]!
0x4cd1688c   300  ldr x17, pc+1484 (addr 0x000000004cd16e58)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd16890   304  blr x17
0x4cd16894   308  ldr lr, [jssp], #8
0x4cd16898   312  ret
0x4cd1689c   316  ldp x5, x2, [jssp], #16
0x4cd168a0   320  sub csp, jssp, #0x78 (120)
0x4cd168a4   324  stp x14, x15, [jssp, #-32]!
0x4cd168a8   328  stp x18, lr, [jssp, #16]
0x4cd168ac   332  stp x10, x11, [jssp, #-32]!
0x4cd168b0   336  stp x12, x13, [jssp, #16]
0x4cd168b4   340  stp x6, x7, [jssp, #-32]!
0x4cd168b8   344  stp x8, x9, [jssp, #16]
0x4cd168bc   348  stp x2, x4, [jssp, #-24]!
0x4cd168c0   352  str x5, [jssp, #16]
0x4cd168c4   356  sub csp, jssp, #0xb0 (176)
0x4cd168c8   360  stp d26, d27, [jssp, #-32]!
0x4cd168cc   364  stp d28, d29, [jssp, #16]
0x4cd168d0   368  stp d22, d23, [jssp, #-32]!
0x4cd168d4   372  stp d24, d25, [jssp, #16]
0x4cd168d8   376  stp d18, d19, [jssp, #-32]!
0x4cd168dc   380  stp d20, d21, [jssp, #16]
0x4cd168e0   384  stp d6, d7, [jssp, #-32]!
0x4cd168e4   388  stp d16, d17, [jssp, #16]
0x4cd168e8   392  stp d2, d3, [jssp, #-32]!
0x4cd168ec   396  stp d4, d5, [jssp, #16]
0x4cd168f0   400  stp d0, d1, [jssp, #-16]!
0x4cd168f4   404  mov x0, x5
0x4cd168f8   408  mov x1, x2
0x4cd168fc   412  ldr x2, pc+1380 (addr 0x000000004cd16e60)    ;; external reference (isolate)
0x4cd16900   416  ldr x16, pc+1384 (addr 0x000000004cd16e68)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd16904   420  and csp, jssp, #0xfffffffffffffff0
0x4cd16908   424  blr x16
0x4cd1690c   428  ldp d2, d3, [jssp, #16]
0x4cd16910   432  ldp d0, d1, [jssp], #32
0x4cd16914   436  ldp d6, d7, [jssp, #16]
0x4cd16918   440  ldp d4, d5, [jssp], #32
0x4cd1691c   444  ldp d18, d19, [jssp, #16]
0x4cd16920   448  ldp d16, d17, [jssp], #32
0x4cd16924   452  ldp d22, d23, [jssp, #16]
0x4cd16928   456  ldp d20, d21, [jssp], #32
0x4cd1692c   460  ldp d26, d27, [jssp, #16]
0x4cd16930   464  ldp d24, d25, [jssp], #32
0x4cd16934   468  ldp d28, d29, [jssp], #16
0x4cd16938   472  ldp x5, x6, [jssp, #16]
0x4cd1693c   476  ldp x2, x4, [jssp], #32
0x4cd16940   480  ldp x9, x10, [jssp, #16]
0x4cd16944   484  ldp x7, x8, [jssp], #32
0x4cd16948   488  ldp x13, x14, [jssp, #16]
0x4cd1694c   492  ldp x11, x12, [jssp], #32
0x4cd16950   496  ldr lr, [jssp, #16]
0x4cd16954   500  ldp x15, x18, [jssp], #24
0x4cd16958   504  ldp x3, x0, [jssp], #16
0x4cd1695c   508  ldr x16, pc+1300 (addr 0x000000004cd16e70)    ;; external reference (store_buffer_top)
0x4cd16960   512  ldr x1, [x16]
0x4cd16964   516  str x2, [x1], #8
0x4cd16968   520  str x1, [x16]
0x4cd1696c   524  tst x1, #0x1ffff
0x4cd16970   528  b.eq #+0x8 (addr 0x4cd16978)
0x4cd16974   532  ret
0x4cd16978   536  sub csp, jssp, #0x8 (8)
0x4cd1697c   540  str lr, [jssp, #-8]!
0x4cd16980   544  ldr x17, pc+1272 (addr 0x000000004cd16e78)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd16984   548  blr x17
0x4cd16988   552  ldr lr, [jssp], #8
0x4cd1698c   556  ret
0x4cd16990   560  and x1, x5, #0xfffffffffff00000
0x4cd16994   564  ldr x0, [x1, #104]
0x4cd16998   568  subs x0, x0, #0x1 (1)
0x4cd1699c   572  str x0, [x1, #104]
0x4cd169a0   576  b.mi #+0x64 (addr 0x4cd16a04)
0x4cd169a4   580  ubfx x16, x5, #8, #12
0x4cd169a8   584  and x1, x5, #0xfffffffffff00000
0x4cd169ac   588  add x1, x1, x16, lsl #2
0x4cd169b0   592  ubfx x0, x5, #3, #5
0x4cd169b4   596  ldr x1, [x1, #360]
0x4cd169b8   600  lsr x1, x1, x0
0x4cd169bc   604  tbz w1, #0, #+0x8 (addr 0x4cd169c4)
0x4cd169c0   608  tbnz w1, #1, #+0xc (addr 0x4cd169cc)
0x4cd169c4   612  ldp x3, x0, [jssp], #16
0x4cd169c8   616  ret
0x4cd169cc   620  ldr x1, [x2]
0x4cd169d0   624  sub csp, jssp, #0x10 (16)
0x4cd169d4   628  stp x5, x2, [jssp, #-16]!
0x4cd169d8   632  ubfx x16, x1, #8, #12
0x4cd169dc   636  and x0, x1, #0xfffffffffff00000
0x4cd169e0   640  add x0, x0, x16, lsl #2
0x4cd169e4   644  ubfx x5, x1, #3, #5
0x4cd169e8   648  ldr x2, [x0, #360]
0x4cd169ec   652  lsr x2, x2, x5
0x4cd169f0   656  tbz w2, #0, #+0x10 (addr 0x4cd16a00)
0x4cd169f4   660  ldp x5, x2, [jssp], #16
0x4cd169f8   664  ldp x3, x0, [jssp], #16
0x4cd169fc   668  ret
0x4cd16a00   672  ldp x5, x2, [jssp], #16
0x4cd16a04   676  sub csp, jssp, #0x78 (120)
0x4cd16a08   680  stp x14, x15, [jssp, #-32]!
0x4cd16a0c   684  stp x18, lr, [jssp, #16]
0x4cd16a10   688  stp x10, x11, [jssp, #-32]!
0x4cd16a14   692  stp x12, x13, [jssp, #16]
0x4cd16a18   696  stp x6, x7, [jssp, #-32]!
0x4cd16a1c   700  stp x8, x9, [jssp, #16]
0x4cd16a20   704  stp x2, x4, [jssp, #-24]!
0x4cd16a24   708  str x5, [jssp, #16]
0x4cd16a28   712  sub csp, jssp, #0xb0 (176)
0x4cd16a2c   716  stp d26, d27, [jssp, #-32]!
0x4cd16a30   720  stp d28, d29, [jssp, #16]
0x4cd16a34   724  stp d22, d23, [jssp, #-32]!
0x4cd16a38   728  stp d24, d25, [jssp, #16]
0x4cd16a3c   732  stp d18, d19, [jssp, #-32]!
0x4cd16a40   736  stp d20, d21, [jssp, #16]
0x4cd16a44   740  stp d6, d7, [jssp, #-32]!
0x4cd16a48   744  stp d16, d17, [jssp, #16]
0x4cd16a4c   748  stp d2, d3, [jssp, #-32]!
0x4cd16a50   752  stp d4, d5, [jssp, #16]
0x4cd16a54   756  stp d0, d1, [jssp, #-16]!
0x4cd16a58   760  mov x0, x5
0x4cd16a5c   764  mov x1, x2
0x4cd16a60   768  ldr x2, pc+1056 (addr 0x000000004cd16e80)    ;; external reference (isolate)
0x4cd16a64   772  ldr x16, pc+1060 (addr 0x000000004cd16e88)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd16a68   776  and csp, jssp, #0xfffffffffffffff0
0x4cd16a6c   780  blr x16
0x4cd16a70   784  ldp d2, d3, [jssp, #16]
0x4cd16a74   788  ldp d0, d1, [jssp], #32
0x4cd16a78   792  ldp d6, d7, [jssp, #16]
0x4cd16a7c   796  ldp d4, d5, [jssp], #32
0x4cd16a80   800  ldp d18, d19, [jssp, #16]
0x4cd16a84   804  ldp d16, d17, [jssp], #32
0x4cd16a88   808  ldp d22, d23, [jssp, #16]
0x4cd16a8c   812  ldp d20, d21, [jssp], #32
0x4cd16a90   816  ldp d26, d27, [jssp, #16]
0x4cd16a94   820  ldp d24, d25, [jssp], #32
0x4cd16a98   824  ldp d28, d29, [jssp], #16
0x4cd16a9c   828  ldp x5, x6, [jssp, #16]
0x4cd16aa0   832  ldp x2, x4, [jssp], #32
0x4cd16aa4   836  ldp x9, x10, [jssp, #16]
0x4cd16aa8   840  ldp x7, x8, [jssp], #32
0x4cd16aac   844  ldp x13, x14, [jssp, #16]
0x4cd16ab0   848  ldp x11, x12, [jssp], #32
0x4cd16ab4   852  ldr lr, [jssp, #16]
0x4cd16ab8   856  ldp x15, x18, [jssp], #24
0x4cd16abc   860  ldp x3, x0, [jssp], #16
0x4cd16ac0   864  ret
0x4cd16ac4   868  sub csp, jssp, #0x10 (16)
0x4cd16ac8   872  stp x3, x0, [jssp, #-16]!
0x4cd16acc   876  ldr x1, [x2]
0x4cd16ad0   880  and x16, x1, #0xfffffffffff00000
0x4cd16ad4   884  ldr x16, [x16, #8]
0x4cd16ad8   888  tst x16, #0x18
0x4cd16adc   892  b.eq #+0x1f8 (addr 0x4cd16cd4)
0x4cd16ae0   896  and x16, x5, #0xfffffffffff00000
0x4cd16ae4   900  ldr x16, [x16, #8]
0x4cd16ae8   904  tst x16, #0x18
0x4cd16aec   908  b.ne #+0x1e8 (addr 0x4cd16cd4)
0x4cd16af0   912  and x1, x5, #0xfffffffffff00000
0x4cd16af4   916  ldr x0, [x1, #104]
0x4cd16af8   920  subs x0, x0, #0x1 (1)
0x4cd16afc   924  str x0, [x1, #104]
0x4cd16b00   928  b.mi #+0xe4 (addr 0x4cd16be4)
0x4cd16b04   932  ubfx x16, x5, #8, #12
0x4cd16b08   936  and x1, x5, #0xfffffffffff00000
0x4cd16b0c   940  add x1, x1, x16, lsl #2
0x4cd16b10   944  ubfx x0, x5, #3, #5
0x4cd16b14   948  ldr x1, [x1, #360]
0x4cd16b18   952  lsr x1, x1, x0
0x4cd16b1c   956  tbz w1, #0, #+0x8 (addr 0x4cd16b24)
0x4cd16b20   960  tbnz w1, #1, #+0x3c (addr 0x4cd16b5c)
0x4cd16b24   964  ldp x3, x0, [jssp], #16
0x4cd16b28   968  ldr x16, pc+872 (addr 0x000000004cd16e90)    ;; external reference (store_buffer_top)
0x4cd16b2c   972  ldr x1, [x16]
0x4cd16b30   976  str x2, [x1], #8
0x4cd16b34   980  str x1, [x16]
0x4cd16b38   984  tst x1, #0x1ffff
0x4cd16b3c   988  b.eq #+0x8 (addr 0x4cd16b44)
0x4cd16b40   992  ret
0x4cd16b44   996  sub csp, jssp, #0x8 (8)
0x4cd16b48  1000  str lr, [jssp, #-8]!
0x4cd16b4c  1004  ldr x17, pc+844 (addr 0x000000004cd16e98)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd16b50  1008  blr x17
0x4cd16b54  1012  ldr lr, [jssp], #8
0x4cd16b58  1016  ret
0x4cd16b5c  1020  ldr x1, [x2]
0x4cd16b60  1024  and x0, x1, #0xfffffffffff00000
0x4cd16b64  1028  ldr x0, [x0, #8]
0x4cd16b68  1032  tbz w0, #6, #+0x18 (addr 0x4cd16b80)
0x4cd16b6c  1036  and x0, x5, #0xfffffffffff00000
0x4cd16b70  1040  ldr x0, [x0, #8]
0x4cd16b74  1044  movz x16, #0x58
0x4cd16b78  1048  tst x0, x16
0x4cd16b7c  1052  b.eq #+0x68 (addr 0x4cd16be4)
0x4cd16b80  1056  sub csp, jssp, #0x10 (16)
0x4cd16b84  1060  stp x5, x2, [jssp, #-16]!
0x4cd16b88  1064  ubfx x16, x1, #8, #12
0x4cd16b8c  1068  and x0, x1, #0xfffffffffff00000
0x4cd16b90  1072  add x0, x0, x16, lsl #2
0x4cd16b94  1076  ubfx x5, x1, #3, #5
0x4cd16b98  1080  ldr x2, [x0, #360]
0x4cd16b9c  1084  lsr x2, x2, x5
0x4cd16ba0  1088  tbz w2, #0, #+0x40 (addr 0x4cd16be0)
0x4cd16ba4  1092  ldp x5, x2, [jssp], #16
0x4cd16ba8  1096  ldp x3, x0, [jssp], #16
0x4cd16bac  1100  ldr x16, pc+756 (addr 0x000000004cd16ea0)    ;; external reference (store_buffer_top)
0x4cd16bb0  1104  ldr x1, [x16]
0x4cd16bb4  1108  str x2, [x1], #8
0x4cd16bb8  1112  str x1, [x16]
0x4cd16bbc  1116  tst x1, #0x1ffff
0x4cd16bc0  1120  b.eq #+0x8 (addr 0x4cd16bc8)
0x4cd16bc4  1124  ret
0x4cd16bc8  1128  sub csp, jssp, #0x8 (8)
0x4cd16bcc  1132  str lr, [jssp, #-8]!
0x4cd16bd0  1136  ldr x17, pc+728 (addr 0x000000004cd16ea8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd16bd4  1140  blr x17
0x4cd16bd8  1144  ldr lr, [jssp], #8
0x4cd16bdc  1148  ret
0x4cd16be0  1152  ldp x5, x2, [jssp], #16
0x4cd16be4  1156  sub csp, jssp, #0x78 (120)
0x4cd16be8  1160  stp x14, x15, [jssp, #-32]!
0x4cd16bec  1164  stp x18, lr, [jssp, #16]
0x4cd16bf0  1168  stp x10, x11, [jssp, #-32]!
0x4cd16bf4  1172  stp x12, x13, [jssp, #16]
0x4cd16bf8  1176  stp x6, x7, [jssp, #-32]!
0x4cd16bfc  1180  stp x8, x9, [jssp, #16]
0x4cd16c00  1184  stp x2, x4, [jssp, #-24]!
0x4cd16c04  1188  str x5, [jssp, #16]
0x4cd16c08  1192  sub csp, jssp, #0xb0 (176)
0x4cd16c0c  1196  stp d26, d27, [jssp, #-32]!
0x4cd16c10  1200  stp d28, d29, [jssp, #16]
0x4cd16c14  1204  stp d22, d23, [jssp, #-32]!
0x4cd16c18  1208  stp d24, d25, [jssp, #16]
0x4cd16c1c  1212  stp d18, d19, [jssp, #-32]!
0x4cd16c20  1216  stp d20, d21, [jssp, #16]
0x4cd16c24  1220  stp d6, d7, [jssp, #-32]!
0x4cd16c28  1224  stp d16, d17, [jssp, #16]
0x4cd16c2c  1228  stp d2, d3, [jssp, #-32]!
0x4cd16c30  1232  stp d4, d5, [jssp, #16]
0x4cd16c34  1236  stp d0, d1, [jssp, #-16]!
0x4cd16c38  1240  mov x0, x5
0x4cd16c3c  1244  mov x1, x2
0x4cd16c40  1248  ldr x2, pc+624 (addr 0x000000004cd16eb0)    ;; external reference (isolate)
0x4cd16c44  1252  ldr x16, pc+628 (addr 0x000000004cd16eb8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd16c48  1256  and csp, jssp, #0xfffffffffffffff0
0x4cd16c4c  1260  blr x16
0x4cd16c50  1264  ldp d2, d3, [jssp, #16]
0x4cd16c54  1268  ldp d0, d1, [jssp], #32
0x4cd16c58  1272  ldp d6, d7, [jssp, #16]
0x4cd16c5c  1276  ldp d4, d5, [jssp], #32
0x4cd16c60  1280  ldp d18, d19, [jssp, #16]
0x4cd16c64  1284  ldp d16, d17, [jssp], #32
0x4cd16c68  1288  ldp d22, d23, [jssp, #16]
0x4cd16c6c  1292  ldp d20, d21, [jssp], #32
0x4cd16c70  1296  ldp d26, d27, [jssp, #16]
0x4cd16c74  1300  ldp d24, d25, [jssp], #32
0x4cd16c78  1304  ldp d28, d29, [jssp], #16
0x4cd16c7c  1308  ldp x5, x6, [jssp, #16]
0x4cd16c80  1312  ldp x2, x4, [jssp], #32
0x4cd16c84  1316  ldp x9, x10, [jssp, #16]
0x4cd16c88  1320  ldp x7, x8, [jssp], #32
0x4cd16c8c  1324  ldp x13, x14, [jssp, #16]
0x4cd16c90  1328  ldp x11, x12, [jssp], #32
0x4cd16c94  1332  ldr lr, [jssp, #16]
0x4cd16c98  1336  ldp x15, x18, [jssp], #24
0x4cd16c9c  1340  ldp x3, x0, [jssp], #16
0x4cd16ca0  1344  ldr x16, pc+544 (addr 0x000000004cd16ec0)    ;; external reference (store_buffer_top)
0x4cd16ca4  1348  ldr x1, [x16]
0x4cd16ca8  1352  str x2, [x1], #8
0x4cd16cac  1356  str x1, [x16]
0x4cd16cb0  1360  tst x1, #0x1ffff
0x4cd16cb4  1364  b.eq #+0x8 (addr 0x4cd16cbc)
0x4cd16cb8  1368  ret
0x4cd16cbc  1372  sub csp, jssp, #0x8 (8)
0x4cd16cc0  1376  str lr, [jssp, #-8]!
0x4cd16cc4  1380  ldr x17, pc+516 (addr 0x000000004cd16ec8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd16cc8  1384  blr x17
0x4cd16ccc  1388  ldr lr, [jssp], #8
0x4cd16cd0  1392  ret
0x4cd16cd4  1396  and x1, x5, #0xfffffffffff00000
0x4cd16cd8  1400  ldr x0, [x1, #104]
0x4cd16cdc  1404  subs x0, x0, #0x1 (1)
0x4cd16ce0  1408  str x0, [x1, #104]
0x4cd16ce4  1412  b.mi #+0x84 (addr 0x4cd16d68)
0x4cd16ce8  1416  ubfx x16, x5, #8, #12
0x4cd16cec  1420  and x1, x5, #0xfffffffffff00000
0x4cd16cf0  1424  add x1, x1, x16, lsl #2
0x4cd16cf4  1428  ubfx x0, x5, #3, #5
0x4cd16cf8  1432  ldr x1, [x1, #360]
0x4cd16cfc  1436  lsr x1, x1, x0
0x4cd16d00  1440  tbz w1, #0, #+0x8 (addr 0x4cd16d08)
0x4cd16d04  1444  tbnz w1, #1, #+0xc (addr 0x4cd16d10)
0x4cd16d08  1448  ldp x3, x0, [jssp], #16
0x4cd16d0c  1452  ret
0x4cd16d10  1456  ldr x1, [x2]
0x4cd16d14  1460  and x0, x1, #0xfffffffffff00000
0x4cd16d18  1464  ldr x0, [x0, #8]
0x4cd16d1c  1468  tbz w0, #6, #+0x18 (addr 0x4cd16d34)
0x4cd16d20  1472  and x0, x5, #0xfffffffffff00000
0x4cd16d24  1476  ldr x0, [x0, #8]
0x4cd16d28  1480  movz x16, #0x58
0x4cd16d2c  1484  tst x0, x16
0x4cd16d30  1488  b.eq #+0x38 (addr 0x4cd16d68)
0x4cd16d34  1492  sub csp, jssp, #0x10 (16)
0x4cd16d38  1496  stp x5, x2, [jssp, #-16]!
0x4cd16d3c  1500  ubfx x16, x1, #8, #12
0x4cd16d40  1504  and x0, x1, #0xfffffffffff00000
0x4cd16d44  1508  add x0, x0, x16, lsl #2
0x4cd16d48  1512  ubfx x5, x1, #3, #5
0x4cd16d4c  1516  ldr x2, [x0, #360]
0x4cd16d50  1520  lsr x2, x2, x5
0x4cd16d54  1524  tbz w2, #0, #+0x10 (addr 0x4cd16d64)
0x4cd16d58  1528  ldp x5, x2, [jssp], #16
0x4cd16d5c  1532  ldp x3, x0, [jssp], #16
0x4cd16d60  1536  ret
0x4cd16d64  1540  ldp x5, x2, [jssp], #16
0x4cd16d68  1544  sub csp, jssp, #0x78 (120)
0x4cd16d6c  1548  stp x14, x15, [jssp, #-32]!
0x4cd16d70  1552  stp x18, lr, [jssp, #16]
0x4cd16d74  1556  stp x10, x11, [jssp, #-32]!
0x4cd16d78  1560  stp x12, x13, [jssp, #16]
0x4cd16d7c  1564  stp x6, x7, [jssp, #-32]!
0x4cd16d80  1568  stp x8, x9, [jssp, #16]
0x4cd16d84  1572  stp x2, x4, [jssp, #-24]!
0x4cd16d88  1576  str x5, [jssp, #16]
0x4cd16d8c  1580  sub csp, jssp, #0xb0 (176)
0x4cd16d90  1584  stp d26, d27, [jssp, #-32]!
0x4cd16d94  1588  stp d28, d29, [jssp, #16]
0x4cd16d98  1592  stp d22, d23, [jssp, #-32]!
0x4cd16d9c  1596  stp d24, d25, [jssp, #16]
0x4cd16da0  1600  stp d18, d19, [jssp, #-32]!
0x4cd16da4  1604  stp d20, d21, [jssp, #16]
0x4cd16da8  1608  stp d6, d7, [jssp, #-32]!
0x4cd16dac  1612  stp d16, d17, [jssp, #16]
0x4cd16db0  1616  stp d2, d3, [jssp, #-32]!
0x4cd16db4  1620  stp d4, d5, [jssp, #16]
0x4cd16db8  1624  stp d0, d1, [jssp, #-16]!
0x4cd16dbc  1628  mov x0, x5
0x4cd16dc0  1632  mov x1, x2
0x4cd16dc4  1636  ldr x2, pc+268 (addr 0x000000004cd16ed0)    ;; external reference (isolate)
0x4cd16dc8  1640  ldr x16, pc+272 (addr 0x000000004cd16ed8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd16dcc  1644  and csp, jssp, #0xfffffffffffffff0
0x4cd16dd0  1648  blr x16
0x4cd16dd4  1652  ldp d2, d3, [jssp, #16]
0x4cd16dd8  1656  ldp d0, d1, [jssp], #32
0x4cd16ddc  1660  ldp d6, d7, [jssp, #16]
0x4cd16de0  1664  ldp d4, d5, [jssp], #32
0x4cd16de4  1668  ldp d18, d19, [jssp, #16]
0x4cd16de8  1672  ldp d16, d17, [jssp], #32
0x4cd16dec  1676  ldp d22, d23, [jssp, #16]
0x4cd16df0  1680  ldp d20, d21, [jssp], #32
0x4cd16df4  1684  ldp d26, d27, [jssp, #16]
0x4cd16df8  1688  ldp d24, d25, [jssp], #32
0x4cd16dfc  1692  ldp d28, d29, [jssp], #16
0x4cd16e00  1696  ldp x5, x6, [jssp, #16]
0x4cd16e04  1700  ldp x2, x4, [jssp], #32
0x4cd16e08  1704  ldp x9, x10, [jssp, #16]
0x4cd16e0c  1708  ldp x7, x8, [jssp], #32
0x4cd16e10  1712  ldp x13, x14, [jssp, #16]
0x4cd16e14  1716  ldp x11, x12, [jssp], #32
0x4cd16e18  1720  ldr lr, [jssp, #16]
0x4cd16e1c  1724  ldp x15, x18, [jssp], #24
0x4cd16e20  1728  ldp x3, x0, [jssp], #16
0x4cd16e24  1732  ret
0x4cd16e28  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd16e2c  1740  d63f03e0       constant
0x4cd16e30  1744  166dd8c0       constant
0x4cd16e34  1748  00000000       constant
0x4cd16e38  1752  4cd065a0       constant
0x4cd16e3c  1756  00000000       constant
0x4cd16e40  1760  166dd8c0       constant
0x4cd16e44  1764  00000000       constant
0x4cd16e48  1768  4cd065a0       constant
0x4cd16e4c  1772  00000000       constant
0x4cd16e50  1776  166dd8c0       constant
0x4cd16e54  1780  00000000       constant
0x4cd16e58  1784  4cd065a0       constant
0x4cd16e5c  1788  00000000       constant
0x4cd16e60  1792  166dc2d0       constant
0x4cd16e64  1796  00000000       constant
0x4cd16e68  1800  00c2d958       constant
0x4cd16e6c  1804  00000000       constant
0x4cd16e70  1808  166dd8c0       constant
0x4cd16e74  1812  00000000       constant
0x4cd16e78  1816  4cd065a0       constant
0x4cd16e7c  1820  00000000       constant
0x4cd16e80  1824  166dc2d0       constant
0x4cd16e84  1828  00000000       constant
0x4cd16e88  1832  00c2d958       constant
0x4cd16e8c  1836  00000000       constant
0x4cd16e90  1840  166dd8c0       constant
0x4cd16e94  1844  00000000       constant
0x4cd16e98  1848  4cd065a0       constant
0x4cd16e9c  1852  00000000       constant
0x4cd16ea0  1856  166dd8c0       constant
0x4cd16ea4  1860  00000000       constant
0x4cd16ea8  1864  4cd065a0       constant
0x4cd16eac  1868  00000000       constant
0x4cd16eb0  1872  166dc2d0       constant
0x4cd16eb4  1876  00000000       constant
0x4cd16eb8  1880  00c2d958       constant
0x4cd16ebc  1884  00000000       constant
0x4cd16ec0  1888  166dd8c0       constant
0x4cd16ec4  1892  00000000       constant
0x4cd16ec8  1896  4cd065a0       constant
0x4cd16ecc  1900  00000000       constant
0x4cd16ed0  1904  166dc2d0       constant
0x4cd16ed4  1908  00000000       constant
0x4cd16ed8  1912  00c2d958       constant
0x4cd16edc  1916  00000000       constant


RelocInfo (size = 65)
0x4cd16768  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd1678c  code target (STUB)  (0x4cd065a0)
0x4cd16804  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd16828  code target (STUB)  (0x4cd065a0)
0x4cd16868  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd1688c  code target (STUB)  (0x4cd065a0)
0x4cd168fc  external reference (isolate)  (0x166dc2d0)
0x4cd16900  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd1695c  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd16980  code target (STUB)  (0x4cd065a0)
0x4cd16a60  external reference (isolate)  (0x166dc2d0)
0x4cd16a64  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd16b28  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd16b4c  code target (STUB)  (0x4cd065a0)
0x4cd16bac  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd16bd0  code target (STUB)  (0x4cd065a0)
0x4cd16c40  external reference (isolate)  (0x166dc2d0)
0x4cd16c44  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd16ca0  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd16cc4  code target (STUB)  (0x4cd065a0)
0x4cd16dc4  external reference (isolate)  (0x166dc2d0)
0x4cd16dc8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd16e28  constant pool (size 184)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 280)
0x4cd16f40     0  ldur x5, [x1, #15]
0x4cd16f44     4  ldur x6, [x5, #-1]
0x4cd16f48     8  ldr x16, pc+152 (addr 0x000000004cd16fe0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd16f4c    12  cmp x6, x16
0x4cd16f50    16  b.ne #+0xa0 (addr 0x4cd16ff0)
0x4cd16f54    20  ldur w6, [x5, #11]
0x4cd16f58    24  tbnz w2, #0, #+0x54 (addr 0x4cd16fac)
0x4cd16f5c    28  asr x8, x2, #32
0x4cd16f60    32  cmp w8, w6
0x4cd16f64    36  b.hs #+0x9c (addr 0x4cd17000)
0x4cd16f68    40  mov x1, x0
0x4cd16f6c    44  add x2, x5, #0xf (15)
0x4cd16f70    48  str x1, [x2, w8, sxtw #3]
0x4cd16f74    52  add x2, x2, w8, sxtw #3
0x4cd16f78    56  tbz w1, #0, #+0x30 (addr 0x4cd16fa8)
0x4cd16f7c    60  and x1, x1, #0xfffffffffff00000
0x4cd16f80    64  ldr x1, [x1, #8]
0x4cd16f84    68  tbz w1, #1, #+0x24 (addr 0x4cd16fa8)
0x4cd16f88    72  and x1, x5, #0xfffffffffff00000
0x4cd16f8c    76  ldr x1, [x1, #8]
0x4cd16f90    80  tbz w1, #2, #+0x18 (addr 0x4cd16fa8)
0x4cd16f94    84  sub csp, jssp, #0x8 (8)
0x4cd16f98    88  str lr, [jssp, #-8]!
0x4cd16f9c    92  ldr x16, pc+76 (addr 0x000000004cd16fe8)    ;; code: STUB, RecordWriteStub, minor: 67621
0x4cd16fa0    96  blr x16
0x4cd16fa4   100  ldr lr, [jssp], #8
0x4cd16fa8   104  ret
0x4cd16fac   108  ldur x16, [x2, #-1]
0x4cd16fb0   112  ldr x17, [x26, #120]
0x4cd16fb4   116  cmp x16, x17
0x4cd16fb8   120  b.ne #+0x58 (addr 0x4cd17010)
0x4cd16fbc   124  ldur d29, [x2, #7]
0x4cd16fc0   128  fcvtzs w8, d29
0x4cd16fc4   132  scvtf d0, w8
0x4cd16fc8   136  fcmp d29, d0
0x4cd16fcc   140  b.ne #+0x44 (addr 0x4cd17010)
0x4cd16fd0   144  b #-0x70 (addr 0x4cd16f60)
0x4cd16fd4   148  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd16fd8   152  d63f03e0       constant
0x4cd16fdc   156  d503201f       constant
0x4cd16fe0   160  2a804259       constant
0x4cd16fe4   164  00000000       constant
0x4cd16fe8   168  4cd16760       constant
0x4cd16fec   172  00000000       constant
0x4cd16ff0   176  movz x16, #0x0
0x4cd16ff4   180  sub csp, jssp, #0x10 (16)
0x4cd16ff8   184  stp fp, lr, [jssp, #-16]!
0x4cd16ffc   188  bl #+0x24 (addr 0x4cd17020)
0x4cd17000   192  movz x16, #0x8
0x4cd17004   196  sub csp, jssp, #0x10 (16)
0x4cd17008   200  stp fp, lr, [jssp, #-16]!
0x4cd1700c   204  bl #+0x14 (addr 0x4cd17020)
0x4cd17010   208  movz x16, #0x10
0x4cd17014   212  sub csp, jssp, #0x10 (16)
0x4cd17018   216  stp fp, lr, [jssp, #-16]!
0x4cd1701c   220  bl #+0x4 (addr 0x4cd17020)
0x4cd17020   224  movz x17, #0xa00000000
0x4cd17024   228  sub csp, jssp, #0x10 (16)
0x4cd17028   232  stp x17, cp, [jssp, #-16]!
0x4cd1702c   236  add fp, jssp, #0x10 (16)
0x4cd17030   240  ldr x17, pc+24 (addr 0x000000004cd17048)    ;; lazy deoptimization bailout 0
0x4cd17034   244  add x17, x17, x16
0x4cd17038   248  br x17
0x4cd1703c   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd17040   256  d63f03e0       constant
0x4cd17044   260  d503201f       constant
0x4cd17048   264  4cb06000       constant
0x4cd1704c   268  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 20)
0x4cd16f48  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd16f9c  code target (STUB)  (0x4cd16760)
0x4cd16fd4  constant pool (size 28)
0x4cd17030  runtime entry
0x4cd1703c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 280)
0x4cd16f40     0  ldur x5, [x1, #15]
0x4cd16f44     4  ldur x6, [x5, #-1]
0x4cd16f48     8  ldr x16, pc+152 (addr 0x000000004cd16fe0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd16f4c    12  cmp x6, x16
0x4cd16f50    16  b.ne #+0xa0 (addr 0x4cd16ff0)
0x4cd16f54    20  ldur w6, [x5, #11]
0x4cd16f58    24  tbnz w2, #0, #+0x54 (addr 0x4cd16fac)
0x4cd16f5c    28  asr x8, x2, #32
0x4cd16f60    32  cmp w8, w6
0x4cd16f64    36  b.hs #+0x9c (addr 0x4cd17000)
0x4cd16f68    40  mov x1, x0
0x4cd16f6c    44  add x2, x5, #0xf (15)
0x4cd16f70    48  str x1, [x2, w8, sxtw #3]
0x4cd16f74    52  add x2, x2, w8, sxtw #3
0x4cd16f78    56  tbz w1, #0, #+0x30 (addr 0x4cd16fa8)
0x4cd16f7c    60  and x1, x1, #0xfffffffffff00000
0x4cd16f80    64  ldr x1, [x1, #8]
0x4cd16f84    68  tbz w1, #1, #+0x24 (addr 0x4cd16fa8)
0x4cd16f88    72  and x1, x5, #0xfffffffffff00000
0x4cd16f8c    76  ldr x1, [x1, #8]
0x4cd16f90    80  tbz w1, #2, #+0x18 (addr 0x4cd16fa8)
0x4cd16f94    84  sub csp, jssp, #0x8 (8)
0x4cd16f98    88  str lr, [jssp, #-8]!
0x4cd16f9c    92  ldr x16, pc+76 (addr 0x000000004cd16fe8)    ;; code: STUB, RecordWriteStub, minor: 67621
0x4cd16fa0    96  blr x16
0x4cd16fa4   100  ldr lr, [jssp], #8
0x4cd16fa8   104  ret
0x4cd16fac   108  ldur x16, [x2, #-1]
0x4cd16fb0   112  ldr x17, [x26, #120]
0x4cd16fb4   116  cmp x16, x17
0x4cd16fb8   120  b.ne #+0x58 (addr 0x4cd17010)
0x4cd16fbc   124  ldur d29, [x2, #7]
0x4cd16fc0   128  fcvtzs w8, d29
0x4cd16fc4   132  scvtf d0, w8
0x4cd16fc8   136  fcmp d29, d0
0x4cd16fcc   140  b.ne #+0x44 (addr 0x4cd17010)
0x4cd16fd0   144  b #-0x70 (addr 0x4cd16f60)
0x4cd16fd4   148  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd16fd8   152  d63f03e0       constant
0x4cd16fdc   156  d503201f       constant
0x4cd16fe0   160  2a804259       constant
0x4cd16fe4   164  00000000       constant
0x4cd16fe8   168  4cd16760       constant
0x4cd16fec   172  00000000       constant
0x4cd16ff0   176  movz x16, #0x0
0x4cd16ff4   180  sub csp, jssp, #0x10 (16)
0x4cd16ff8   184  stp fp, lr, [jssp, #-16]!
0x4cd16ffc   188  bl #+0x24 (addr 0x4cd17020)
0x4cd17000   192  movz x16, #0x8
0x4cd17004   196  sub csp, jssp, #0x10 (16)
0x4cd17008   200  stp fp, lr, [jssp, #-16]!
0x4cd1700c   204  bl #+0x14 (addr 0x4cd17020)
0x4cd17010   208  movz x16, #0x10
0x4cd17014   212  sub csp, jssp, #0x10 (16)
0x4cd17018   216  stp fp, lr, [jssp, #-16]!
0x4cd1701c   220  bl #+0x4 (addr 0x4cd17020)
0x4cd17020   224  movz x17, #0xa00000000
0x4cd17024   228  sub csp, jssp, #0x10 (16)
0x4cd17028   232  stp x17, cp, [jssp, #-16]!
0x4cd1702c   236  add fp, jssp, #0x10 (16)
0x4cd17030   240  ldr x17, pc+24 (addr 0x000000004cd17048)    ;; lazy deoptimization bailout 0
0x4cd17034   244  add x17, x17, x16
0x4cd17038   248  br x17
0x4cd1703c   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd17040   256  d63f03e0       constant
0x4cd17044   260  d503201f       constant
0x4cd17048   264  4cb06000       constant
0x4cd1704c   268  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 20)
0x4cd16f48  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd16f9c  code target (STUB)  (0x4cd16760)
0x4cd16fd4  constant pool (size 28)
0x4cd17030  runtime entry
0x4cd1703c  constant pool (size 20)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0x4cd170c0     0  adr xzr, #+0x40 (addr 0x4cd17100)
0x4cd170c4     4  adr xzr, #+0x360 (addr 0x4cd17424)
0x4cd170c8     8  ldr x16, pc+1736 (addr 0x000000004cd17790)    ;; external reference (store_buffer_top)
0x4cd170cc    12  ldr x2, [x16]
0x4cd170d0    16  str x3, [x2], #8
0x4cd170d4    20  str x2, [x16]
0x4cd170d8    24  tst x2, #0x1ffff
0x4cd170dc    28  b.eq #+0x8 (addr 0x4cd170e4)
0x4cd170e0    32  ret
0x4cd170e4    36  sub csp, jssp, #0x8 (8)
0x4cd170e8    40  str lr, [jssp, #-8]!
0x4cd170ec    44  ldr x17, pc+1708 (addr 0x000000004cd17798)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd170f0    48  blr x17
0x4cd170f4    52  ldr lr, [jssp], #8
0x4cd170f8    56  ret
0x4cd170fc    60  ret
0x4cd17100    64  sub csp, jssp, #0x10 (16)
0x4cd17104    68  stp x4, x0, [jssp, #-16]!
0x4cd17108    72  ldr x2, [x3]
0x4cd1710c    76  and x16, x2, #0xfffffffffff00000
0x4cd17110    80  ldr x16, [x16, #8]
0x4cd17114    84  tst x16, #0x18
0x4cd17118    88  b.eq #+0x1d8 (addr 0x4cd172f0)
0x4cd1711c    92  and x16, x1, #0xfffffffffff00000
0x4cd17120    96  ldr x16, [x16, #8]
0x4cd17124   100  tst x16, #0x18
0x4cd17128   104  b.ne #+0x1c8 (addr 0x4cd172f0)
0x4cd1712c   108  and x2, x1, #0xfffffffffff00000
0x4cd17130   112  ldr x0, [x2, #104]
0x4cd17134   116  subs x0, x0, #0x1 (1)
0x4cd17138   120  str x0, [x2, #104]
0x4cd1713c   124  b.mi #+0xc4 (addr 0x4cd17200)
0x4cd17140   128  ubfx x16, x1, #8, #12
0x4cd17144   132  and x2, x1, #0xfffffffffff00000
0x4cd17148   136  add x2, x2, x16, lsl #2
0x4cd1714c   140  ubfx x0, x1, #3, #5
0x4cd17150   144  ldr x2, [x2, #360]
0x4cd17154   148  lsr x2, x2, x0
0x4cd17158   152  tbz w2, #0, #+0x8 (addr 0x4cd17160)
0x4cd1715c   156  tbnz w2, #1, #+0x3c (addr 0x4cd17198)
0x4cd17160   160  ldp x4, x0, [jssp], #16
0x4cd17164   164  ldr x16, pc+1596 (addr 0x000000004cd177a0)    ;; external reference (store_buffer_top)
0x4cd17168   168  ldr x2, [x16]
0x4cd1716c   172  str x3, [x2], #8
0x4cd17170   176  str x2, [x16]
0x4cd17174   180  tst x2, #0x1ffff
0x4cd17178   184  b.eq #+0x8 (addr 0x4cd17180)
0x4cd1717c   188  ret
0x4cd17180   192  sub csp, jssp, #0x8 (8)
0x4cd17184   196  str lr, [jssp, #-8]!
0x4cd17188   200  ldr x17, pc+1568 (addr 0x000000004cd177a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd1718c   204  blr x17
0x4cd17190   208  ldr lr, [jssp], #8
0x4cd17194   212  ret
0x4cd17198   216  ldr x2, [x3]
0x4cd1719c   220  sub csp, jssp, #0x10 (16)
0x4cd171a0   224  stp x1, x3, [jssp, #-16]!
0x4cd171a4   228  ubfx x16, x2, #8, #12
0x4cd171a8   232  and x0, x2, #0xfffffffffff00000
0x4cd171ac   236  add x0, x0, x16, lsl #2
0x4cd171b0   240  ubfx x1, x2, #3, #5
0x4cd171b4   244  ldr x3, [x0, #360]
0x4cd171b8   248  lsr x3, x3, x1
0x4cd171bc   252  tbz w3, #0, #+0x40 (addr 0x4cd171fc)
0x4cd171c0   256  ldp x1, x3, [jssp], #16
0x4cd171c4   260  ldp x4, x0, [jssp], #16
0x4cd171c8   264  ldr x16, pc+1512 (addr 0x000000004cd177b0)    ;; external reference (store_buffer_top)
0x4cd171cc   268  ldr x2, [x16]
0x4cd171d0   272  str x3, [x2], #8
0x4cd171d4   276  str x2, [x16]
0x4cd171d8   280  tst x2, #0x1ffff
0x4cd171dc   284  b.eq #+0x8 (addr 0x4cd171e4)
0x4cd171e0   288  ret
0x4cd171e4   292  sub csp, jssp, #0x8 (8)
0x4cd171e8   296  str lr, [jssp, #-8]!
0x4cd171ec   300  ldr x17, pc+1484 (addr 0x000000004cd177b8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd171f0   304  blr x17
0x4cd171f4   308  ldr lr, [jssp], #8
0x4cd171f8   312  ret
0x4cd171fc   316  ldp x1, x3, [jssp], #16
0x4cd17200   320  sub csp, jssp, #0x78 (120)
0x4cd17204   324  stp x14, x15, [jssp, #-32]!
0x4cd17208   328  stp x18, lr, [jssp, #16]
0x4cd1720c   332  stp x10, x11, [jssp, #-32]!
0x4cd17210   336  stp x12, x13, [jssp, #16]
0x4cd17214   340  stp x6, x7, [jssp, #-32]!
0x4cd17218   344  stp x8, x9, [jssp, #16]
0x4cd1721c   348  stp x1, x3, [jssp, #-24]!
0x4cd17220   352  str x5, [jssp, #16]
0x4cd17224   356  sub csp, jssp, #0xb0 (176)
0x4cd17228   360  stp d26, d27, [jssp, #-32]!
0x4cd1722c   364  stp d28, d29, [jssp, #16]
0x4cd17230   368  stp d22, d23, [jssp, #-32]!
0x4cd17234   372  stp d24, d25, [jssp, #16]
0x4cd17238   376  stp d18, d19, [jssp, #-32]!
0x4cd1723c   380  stp d20, d21, [jssp, #16]
0x4cd17240   384  stp d6, d7, [jssp, #-32]!
0x4cd17244   388  stp d16, d17, [jssp, #16]
0x4cd17248   392  stp d2, d3, [jssp, #-32]!
0x4cd1724c   396  stp d4, d5, [jssp, #16]
0x4cd17250   400  stp d0, d1, [jssp, #-16]!
0x4cd17254   404  mov x0, x1
0x4cd17258   408  mov x1, x3
0x4cd1725c   412  ldr x2, pc+1380 (addr 0x000000004cd177c0)    ;; external reference (isolate)
0x4cd17260   416  ldr x16, pc+1384 (addr 0x000000004cd177c8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd17264   420  and csp, jssp, #0xfffffffffffffff0
0x4cd17268   424  blr x16
0x4cd1726c   428  ldp d2, d3, [jssp, #16]
0x4cd17270   432  ldp d0, d1, [jssp], #32
0x4cd17274   436  ldp d6, d7, [jssp, #16]
0x4cd17278   440  ldp d4, d5, [jssp], #32
0x4cd1727c   444  ldp d18, d19, [jssp, #16]
0x4cd17280   448  ldp d16, d17, [jssp], #32
0x4cd17284   452  ldp d22, d23, [jssp, #16]
0x4cd17288   456  ldp d20, d21, [jssp], #32
0x4cd1728c   460  ldp d26, d27, [jssp, #16]
0x4cd17290   464  ldp d24, d25, [jssp], #32
0x4cd17294   468  ldp d28, d29, [jssp], #16
0x4cd17298   472  ldp x5, x6, [jssp, #16]
0x4cd1729c   476  ldp x1, x3, [jssp], #32
0x4cd172a0   480  ldp x9, x10, [jssp, #16]
0x4cd172a4   484  ldp x7, x8, [jssp], #32
0x4cd172a8   488  ldp x13, x14, [jssp, #16]
0x4cd172ac   492  ldp x11, x12, [jssp], #32
0x4cd172b0   496  ldr lr, [jssp, #16]
0x4cd172b4   500  ldp x15, x18, [jssp], #24
0x4cd172b8   504  ldp x4, x0, [jssp], #16
0x4cd172bc   508  ldr x16, pc+1300 (addr 0x000000004cd177d0)    ;; external reference (store_buffer_top)
0x4cd172c0   512  ldr x2, [x16]
0x4cd172c4   516  str x3, [x2], #8
0x4cd172c8   520  str x2, [x16]
0x4cd172cc   524  tst x2, #0x1ffff
0x4cd172d0   528  b.eq #+0x8 (addr 0x4cd172d8)
0x4cd172d4   532  ret
0x4cd172d8   536  sub csp, jssp, #0x8 (8)
0x4cd172dc   540  str lr, [jssp, #-8]!
0x4cd172e0   544  ldr x17, pc+1272 (addr 0x000000004cd177d8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd172e4   548  blr x17
0x4cd172e8   552  ldr lr, [jssp], #8
0x4cd172ec   556  ret
0x4cd172f0   560  and x2, x1, #0xfffffffffff00000
0x4cd172f4   564  ldr x0, [x2, #104]
0x4cd172f8   568  subs x0, x0, #0x1 (1)
0x4cd172fc   572  str x0, [x2, #104]
0x4cd17300   576  b.mi #+0x64 (addr 0x4cd17364)
0x4cd17304   580  ubfx x16, x1, #8, #12
0x4cd17308   584  and x2, x1, #0xfffffffffff00000
0x4cd1730c   588  add x2, x2, x16, lsl #2
0x4cd17310   592  ubfx x0, x1, #3, #5
0x4cd17314   596  ldr x2, [x2, #360]
0x4cd17318   600  lsr x2, x2, x0
0x4cd1731c   604  tbz w2, #0, #+0x8 (addr 0x4cd17324)
0x4cd17320   608  tbnz w2, #1, #+0xc (addr 0x4cd1732c)
0x4cd17324   612  ldp x4, x0, [jssp], #16
0x4cd17328   616  ret
0x4cd1732c   620  ldr x2, [x3]
0x4cd17330   624  sub csp, jssp, #0x10 (16)
0x4cd17334   628  stp x1, x3, [jssp, #-16]!
0x4cd17338   632  ubfx x16, x2, #8, #12
0x4cd1733c   636  and x0, x2, #0xfffffffffff00000
0x4cd17340   640  add x0, x0, x16, lsl #2
0x4cd17344   644  ubfx x1, x2, #3, #5
0x4cd17348   648  ldr x3, [x0, #360]
0x4cd1734c   652  lsr x3, x3, x1
0x4cd17350   656  tbz w3, #0, #+0x10 (addr 0x4cd17360)
0x4cd17354   660  ldp x1, x3, [jssp], #16
0x4cd17358   664  ldp x4, x0, [jssp], #16
0x4cd1735c   668  ret
0x4cd17360   672  ldp x1, x3, [jssp], #16
0x4cd17364   676  sub csp, jssp, #0x78 (120)
0x4cd17368   680  stp x14, x15, [jssp, #-32]!
0x4cd1736c   684  stp x18, lr, [jssp, #16]
0x4cd17370   688  stp x10, x11, [jssp, #-32]!
0x4cd17374   692  stp x12, x13, [jssp, #16]
0x4cd17378   696  stp x6, x7, [jssp, #-32]!
0x4cd1737c   700  stp x8, x9, [jssp, #16]
0x4cd17380   704  stp x1, x3, [jssp, #-24]!
0x4cd17384   708  str x5, [jssp, #16]
0x4cd17388   712  sub csp, jssp, #0xb0 (176)
0x4cd1738c   716  stp d26, d27, [jssp, #-32]!
0x4cd17390   720  stp d28, d29, [jssp, #16]
0x4cd17394   724  stp d22, d23, [jssp, #-32]!
0x4cd17398   728  stp d24, d25, [jssp, #16]
0x4cd1739c   732  stp d18, d19, [jssp, #-32]!
0x4cd173a0   736  stp d20, d21, [jssp, #16]
0x4cd173a4   740  stp d6, d7, [jssp, #-32]!
0x4cd173a8   744  stp d16, d17, [jssp, #16]
0x4cd173ac   748  stp d2, d3, [jssp, #-32]!
0x4cd173b0   752  stp d4, d5, [jssp, #16]
0x4cd173b4   756  stp d0, d1, [jssp, #-16]!
0x4cd173b8   760  mov x0, x1
0x4cd173bc   764  mov x1, x3
0x4cd173c0   768  ldr x2, pc+1056 (addr 0x000000004cd177e0)    ;; external reference (isolate)
0x4cd173c4   772  ldr x16, pc+1060 (addr 0x000000004cd177e8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd173c8   776  and csp, jssp, #0xfffffffffffffff0
0x4cd173cc   780  blr x16
0x4cd173d0   784  ldp d2, d3, [jssp, #16]
0x4cd173d4   788  ldp d0, d1, [jssp], #32
0x4cd173d8   792  ldp d6, d7, [jssp, #16]
0x4cd173dc   796  ldp d4, d5, [jssp], #32
0x4cd173e0   800  ldp d18, d19, [jssp, #16]
0x4cd173e4   804  ldp d16, d17, [jssp], #32
0x4cd173e8   808  ldp d22, d23, [jssp, #16]
0x4cd173ec   812  ldp d20, d21, [jssp], #32
0x4cd173f0   816  ldp d26, d27, [jssp, #16]
0x4cd173f4   820  ldp d24, d25, [jssp], #32
0x4cd173f8   824  ldp d28, d29, [jssp], #16
0x4cd173fc   828  ldp x5, x6, [jssp, #16]
0x4cd17400   832  ldp x1, x3, [jssp], #32
0x4cd17404   836  ldp x9, x10, [jssp, #16]
0x4cd17408   840  ldp x7, x8, [jssp], #32
0x4cd1740c   844  ldp x13, x14, [jssp, #16]
0x4cd17410   848  ldp x11, x12, [jssp], #32
0x4cd17414   852  ldr lr, [jssp, #16]
0x4cd17418   856  ldp x15, x18, [jssp], #24
0x4cd1741c   860  ldp x4, x0, [jssp], #16
0x4cd17420   864  ret
0x4cd17424   868  sub csp, jssp, #0x10 (16)
0x4cd17428   872  stp x4, x0, [jssp, #-16]!
0x4cd1742c   876  ldr x2, [x3]
0x4cd17430   880  and x16, x2, #0xfffffffffff00000
0x4cd17434   884  ldr x16, [x16, #8]
0x4cd17438   888  tst x16, #0x18
0x4cd1743c   892  b.eq #+0x1f8 (addr 0x4cd17634)
0x4cd17440   896  and x16, x1, #0xfffffffffff00000
0x4cd17444   900  ldr x16, [x16, #8]
0x4cd17448   904  tst x16, #0x18
0x4cd1744c   908  b.ne #+0x1e8 (addr 0x4cd17634)
0x4cd17450   912  and x2, x1, #0xfffffffffff00000
0x4cd17454   916  ldr x0, [x2, #104]
0x4cd17458   920  subs x0, x0, #0x1 (1)
0x4cd1745c   924  str x0, [x2, #104]
0x4cd17460   928  b.mi #+0xe4 (addr 0x4cd17544)
0x4cd17464   932  ubfx x16, x1, #8, #12
0x4cd17468   936  and x2, x1, #0xfffffffffff00000
0x4cd1746c   940  add x2, x2, x16, lsl #2
0x4cd17470   944  ubfx x0, x1, #3, #5
0x4cd17474   948  ldr x2, [x2, #360]
0x4cd17478   952  lsr x2, x2, x0
0x4cd1747c   956  tbz w2, #0, #+0x8 (addr 0x4cd17484)
0x4cd17480   960  tbnz w2, #1, #+0x3c (addr 0x4cd174bc)
0x4cd17484   964  ldp x4, x0, [jssp], #16
0x4cd17488   968  ldr x16, pc+872 (addr 0x000000004cd177f0)    ;; external reference (store_buffer_top)
0x4cd1748c   972  ldr x2, [x16]
0x4cd17490   976  str x3, [x2], #8
0x4cd17494   980  str x2, [x16]
0x4cd17498   984  tst x2, #0x1ffff
0x4cd1749c   988  b.eq #+0x8 (addr 0x4cd174a4)
0x4cd174a0   992  ret
0x4cd174a4   996  sub csp, jssp, #0x8 (8)
0x4cd174a8  1000  str lr, [jssp, #-8]!
0x4cd174ac  1004  ldr x17, pc+844 (addr 0x000000004cd177f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd174b0  1008  blr x17
0x4cd174b4  1012  ldr lr, [jssp], #8
0x4cd174b8  1016  ret
0x4cd174bc  1020  ldr x2, [x3]
0x4cd174c0  1024  and x0, x2, #0xfffffffffff00000
0x4cd174c4  1028  ldr x0, [x0, #8]
0x4cd174c8  1032  tbz w0, #6, #+0x18 (addr 0x4cd174e0)
0x4cd174cc  1036  and x0, x1, #0xfffffffffff00000
0x4cd174d0  1040  ldr x0, [x0, #8]
0x4cd174d4  1044  movz x16, #0x58
0x4cd174d8  1048  tst x0, x16
0x4cd174dc  1052  b.eq #+0x68 (addr 0x4cd17544)
0x4cd174e0  1056  sub csp, jssp, #0x10 (16)
0x4cd174e4  1060  stp x1, x3, [jssp, #-16]!
0x4cd174e8  1064  ubfx x16, x2, #8, #12
0x4cd174ec  1068  and x0, x2, #0xfffffffffff00000
0x4cd174f0  1072  add x0, x0, x16, lsl #2
0x4cd174f4  1076  ubfx x1, x2, #3, #5
0x4cd174f8  1080  ldr x3, [x0, #360]
0x4cd174fc  1084  lsr x3, x3, x1
0x4cd17500  1088  tbz w3, #0, #+0x40 (addr 0x4cd17540)
0x4cd17504  1092  ldp x1, x3, [jssp], #16
0x4cd17508  1096  ldp x4, x0, [jssp], #16
0x4cd1750c  1100  ldr x16, pc+756 (addr 0x000000004cd17800)    ;; external reference (store_buffer_top)
0x4cd17510  1104  ldr x2, [x16]
0x4cd17514  1108  str x3, [x2], #8
0x4cd17518  1112  str x2, [x16]
0x4cd1751c  1116  tst x2, #0x1ffff
0x4cd17520  1120  b.eq #+0x8 (addr 0x4cd17528)
0x4cd17524  1124  ret
0x4cd17528  1128  sub csp, jssp, #0x8 (8)
0x4cd1752c  1132  str lr, [jssp, #-8]!
0x4cd17530  1136  ldr x17, pc+728 (addr 0x000000004cd17808)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd17534  1140  blr x17
0x4cd17538  1144  ldr lr, [jssp], #8
0x4cd1753c  1148  ret
0x4cd17540  1152  ldp x1, x3, [jssp], #16
0x4cd17544  1156  sub csp, jssp, #0x78 (120)
0x4cd17548  1160  stp x14, x15, [jssp, #-32]!
0x4cd1754c  1164  stp x18, lr, [jssp, #16]
0x4cd17550  1168  stp x10, x11, [jssp, #-32]!
0x4cd17554  1172  stp x12, x13, [jssp, #16]
0x4cd17558  1176  stp x6, x7, [jssp, #-32]!
0x4cd1755c  1180  stp x8, x9, [jssp, #16]
0x4cd17560  1184  stp x1, x3, [jssp, #-24]!
0x4cd17564  1188  str x5, [jssp, #16]
0x4cd17568  1192  sub csp, jssp, #0xb0 (176)
0x4cd1756c  1196  stp d26, d27, [jssp, #-32]!
0x4cd17570  1200  stp d28, d29, [jssp, #16]
0x4cd17574  1204  stp d22, d23, [jssp, #-32]!
0x4cd17578  1208  stp d24, d25, [jssp, #16]
0x4cd1757c  1212  stp d18, d19, [jssp, #-32]!
0x4cd17580  1216  stp d20, d21, [jssp, #16]
0x4cd17584  1220  stp d6, d7, [jssp, #-32]!
0x4cd17588  1224  stp d16, d17, [jssp, #16]
0x4cd1758c  1228  stp d2, d3, [jssp, #-32]!
0x4cd17590  1232  stp d4, d5, [jssp, #16]
0x4cd17594  1236  stp d0, d1, [jssp, #-16]!
0x4cd17598  1240  mov x0, x1
0x4cd1759c  1244  mov x1, x3
0x4cd175a0  1248  ldr x2, pc+624 (addr 0x000000004cd17810)    ;; external reference (isolate)
0x4cd175a4  1252  ldr x16, pc+628 (addr 0x000000004cd17818)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd175a8  1256  and csp, jssp, #0xfffffffffffffff0
0x4cd175ac  1260  blr x16
0x4cd175b0  1264  ldp d2, d3, [jssp, #16]
0x4cd175b4  1268  ldp d0, d1, [jssp], #32
0x4cd175b8  1272  ldp d6, d7, [jssp, #16]
0x4cd175bc  1276  ldp d4, d5, [jssp], #32
0x4cd175c0  1280  ldp d18, d19, [jssp, #16]
0x4cd175c4  1284  ldp d16, d17, [jssp], #32
0x4cd175c8  1288  ldp d22, d23, [jssp, #16]
0x4cd175cc  1292  ldp d20, d21, [jssp], #32
0x4cd175d0  1296  ldp d26, d27, [jssp, #16]
0x4cd175d4  1300  ldp d24, d25, [jssp], #32
0x4cd175d8  1304  ldp d28, d29, [jssp], #16
0x4cd175dc  1308  ldp x5, x6, [jssp, #16]
0x4cd175e0  1312  ldp x1, x3, [jssp], #32
0x4cd175e4  1316  ldp x9, x10, [jssp, #16]
0x4cd175e8  1320  ldp x7, x8, [jssp], #32
0x4cd175ec  1324  ldp x13, x14, [jssp, #16]
0x4cd175f0  1328  ldp x11, x12, [jssp], #32
0x4cd175f4  1332  ldr lr, [jssp, #16]
0x4cd175f8  1336  ldp x15, x18, [jssp], #24
0x4cd175fc  1340  ldp x4, x0, [jssp], #16
0x4cd17600  1344  ldr x16, pc+544 (addr 0x000000004cd17820)    ;; external reference (store_buffer_top)
0x4cd17604  1348  ldr x2, [x16]
0x4cd17608  1352  str x3, [x2], #8
0x4cd1760c  1356  str x2, [x16]
0x4cd17610  1360  tst x2, #0x1ffff
0x4cd17614  1364  b.eq #+0x8 (addr 0x4cd1761c)
0x4cd17618  1368  ret
0x4cd1761c  1372  sub csp, jssp, #0x8 (8)
0x4cd17620  1376  str lr, [jssp, #-8]!
0x4cd17624  1380  ldr x17, pc+516 (addr 0x000000004cd17828)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd17628  1384  blr x17
0x4cd1762c  1388  ldr lr, [jssp], #8
0x4cd17630  1392  ret
0x4cd17634  1396  and x2, x1, #0xfffffffffff00000
0x4cd17638  1400  ldr x0, [x2, #104]
0x4cd1763c  1404  subs x0, x0, #0x1 (1)
0x4cd17640  1408  str x0, [x2, #104]
0x4cd17644  1412  b.mi #+0x84 (addr 0x4cd176c8)
0x4cd17648  1416  ubfx x16, x1, #8, #12
0x4cd1764c  1420  and x2, x1, #0xfffffffffff00000
0x4cd17650  1424  add x2, x2, x16, lsl #2
0x4cd17654  1428  ubfx x0, x1, #3, #5
0x4cd17658  1432  ldr x2, [x2, #360]
0x4cd1765c  1436  lsr x2, x2, x0
0x4cd17660  1440  tbz w2, #0, #+0x8 (addr 0x4cd17668)
0x4cd17664  1444  tbnz w2, #1, #+0xc (addr 0x4cd17670)
0x4cd17668  1448  ldp x4, x0, [jssp], #16
0x4cd1766c  1452  ret
0x4cd17670  1456  ldr x2, [x3]
0x4cd17674  1460  and x0, x2, #0xfffffffffff00000
0x4cd17678  1464  ldr x0, [x0, #8]
0x4cd1767c  1468  tbz w0, #6, #+0x18 (addr 0x4cd17694)
0x4cd17680  1472  and x0, x1, #0xfffffffffff00000
0x4cd17684  1476  ldr x0, [x0, #8]
0x4cd17688  1480  movz x16, #0x58
0x4cd1768c  1484  tst x0, x16
0x4cd17690  1488  b.eq #+0x38 (addr 0x4cd176c8)
0x4cd17694  1492  sub csp, jssp, #0x10 (16)
0x4cd17698  1496  stp x1, x3, [jssp, #-16]!
0x4cd1769c  1500  ubfx x16, x2, #8, #12
0x4cd176a0  1504  and x0, x2, #0xfffffffffff00000
0x4cd176a4  1508  add x0, x0, x16, lsl #2
0x4cd176a8  1512  ubfx x1, x2, #3, #5
0x4cd176ac  1516  ldr x3, [x0, #360]
0x4cd176b0  1520  lsr x3, x3, x1
0x4cd176b4  1524  tbz w3, #0, #+0x10 (addr 0x4cd176c4)
0x4cd176b8  1528  ldp x1, x3, [jssp], #16
0x4cd176bc  1532  ldp x4, x0, [jssp], #16
0x4cd176c0  1536  ret
0x4cd176c4  1540  ldp x1, x3, [jssp], #16
0x4cd176c8  1544  sub csp, jssp, #0x78 (120)
0x4cd176cc  1548  stp x14, x15, [jssp, #-32]!
0x4cd176d0  1552  stp x18, lr, [jssp, #16]
0x4cd176d4  1556  stp x10, x11, [jssp, #-32]!
0x4cd176d8  1560  stp x12, x13, [jssp, #16]
0x4cd176dc  1564  stp x6, x7, [jssp, #-32]!
0x4cd176e0  1568  stp x8, x9, [jssp, #16]
0x4cd176e4  1572  stp x1, x3, [jssp, #-24]!
0x4cd176e8  1576  str x5, [jssp, #16]
0x4cd176ec  1580  sub csp, jssp, #0xb0 (176)
0x4cd176f0  1584  stp d26, d27, [jssp, #-32]!
0x4cd176f4  1588  stp d28, d29, [jssp, #16]
0x4cd176f8  1592  stp d22, d23, [jssp, #-32]!
0x4cd176fc  1596  stp d24, d25, [jssp, #16]
0x4cd17700  1600  stp d18, d19, [jssp, #-32]!
0x4cd17704  1604  stp d20, d21, [jssp, #16]
0x4cd17708  1608  stp d6, d7, [jssp, #-32]!
0x4cd1770c  1612  stp d16, d17, [jssp, #16]
0x4cd17710  1616  stp d2, d3, [jssp, #-32]!
0x4cd17714  1620  stp d4, d5, [jssp, #16]
0x4cd17718  1624  stp d0, d1, [jssp, #-16]!
0x4cd1771c  1628  mov x0, x1
0x4cd17720  1632  mov x1, x3
0x4cd17724  1636  ldr x2, pc+268 (addr 0x000000004cd17830)    ;; external reference (isolate)
0x4cd17728  1640  ldr x16, pc+272 (addr 0x000000004cd17838)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd1772c  1644  and csp, jssp, #0xfffffffffffffff0
0x4cd17730  1648  blr x16
0x4cd17734  1652  ldp d2, d3, [jssp, #16]
0x4cd17738  1656  ldp d0, d1, [jssp], #32
0x4cd1773c  1660  ldp d6, d7, [jssp, #16]
0x4cd17740  1664  ldp d4, d5, [jssp], #32
0x4cd17744  1668  ldp d18, d19, [jssp, #16]
0x4cd17748  1672  ldp d16, d17, [jssp], #32
0x4cd1774c  1676  ldp d22, d23, [jssp, #16]
0x4cd17750  1680  ldp d20, d21, [jssp], #32
0x4cd17754  1684  ldp d26, d27, [jssp, #16]
0x4cd17758  1688  ldp d24, d25, [jssp], #32
0x4cd1775c  1692  ldp d28, d29, [jssp], #16
0x4cd17760  1696  ldp x5, x6, [jssp, #16]
0x4cd17764  1700  ldp x1, x3, [jssp], #32
0x4cd17768  1704  ldp x9, x10, [jssp, #16]
0x4cd1776c  1708  ldp x7, x8, [jssp], #32
0x4cd17770  1712  ldp x13, x14, [jssp, #16]
0x4cd17774  1716  ldp x11, x12, [jssp], #32
0x4cd17778  1720  ldr lr, [jssp, #16]
0x4cd1777c  1724  ldp x15, x18, [jssp], #24
0x4cd17780  1728  ldp x4, x0, [jssp], #16
0x4cd17784  1732  ret
0x4cd17788  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd1778c  1740  d63f03e0       constant
0x4cd17790  1744  166dd8c0       constant
0x4cd17794  1748  00000000       constant
0x4cd17798  1752  4cd065a0       constant
0x4cd1779c  1756  00000000       constant
0x4cd177a0  1760  166dd8c0       constant
0x4cd177a4  1764  00000000       constant
0x4cd177a8  1768  4cd065a0       constant
0x4cd177ac  1772  00000000       constant
0x4cd177b0  1776  166dd8c0       constant
0x4cd177b4  1780  00000000       constant
0x4cd177b8  1784  4cd065a0       constant
0x4cd177bc  1788  00000000       constant
0x4cd177c0  1792  166dc2d0       constant
0x4cd177c4  1796  00000000       constant
0x4cd177c8  1800  00c2d958       constant
0x4cd177cc  1804  00000000       constant
0x4cd177d0  1808  166dd8c0       constant
0x4cd177d4  1812  00000000       constant
0x4cd177d8  1816  4cd065a0       constant
0x4cd177dc  1820  00000000       constant
0x4cd177e0  1824  166dc2d0       constant
0x4cd177e4  1828  00000000       constant
0x4cd177e8  1832  00c2d958       constant
0x4cd177ec  1836  00000000       constant
0x4cd177f0  1840  166dd8c0       constant
0x4cd177f4  1844  00000000       constant
0x4cd177f8  1848  4cd065a0       constant
0x4cd177fc  1852  00000000       constant
0x4cd17800  1856  166dd8c0       constant
0x4cd17804  1860  00000000       constant
0x4cd17808  1864  4cd065a0       constant
0x4cd1780c  1868  00000000       constant
0x4cd17810  1872  166dc2d0       constant
0x4cd17814  1876  00000000       constant
0x4cd17818  1880  00c2d958       constant
0x4cd1781c  1884  00000000       constant
0x4cd17820  1888  166dd8c0       constant
0x4cd17824  1892  00000000       constant
0x4cd17828  1896  4cd065a0       constant
0x4cd1782c  1900  00000000       constant
0x4cd17830  1904  166dc2d0       constant
0x4cd17834  1908  00000000       constant
0x4cd17838  1912  00c2d958       constant
0x4cd1783c  1916  00000000       constant


RelocInfo (size = 65)
0x4cd170c8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd170ec  code target (STUB)  (0x4cd065a0)
0x4cd17164  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd17188  code target (STUB)  (0x4cd065a0)
0x4cd171c8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd171ec  code target (STUB)  (0x4cd065a0)
0x4cd1725c  external reference (isolate)  (0x166dc2d0)
0x4cd17260  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd172bc  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd172e0  code target (STUB)  (0x4cd065a0)
0x4cd173c0  external reference (isolate)  (0x166dc2d0)
0x4cd173c4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd17488  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd174ac  code target (STUB)  (0x4cd065a0)
0x4cd1750c  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd17530  code target (STUB)  (0x4cd065a0)
0x4cd175a0  external reference (isolate)  (0x166dc2d0)
0x4cd175a4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd17600  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd17624  code target (STUB)  (0x4cd065a0)
0x4cd17724  external reference (isolate)  (0x166dc2d0)
0x4cd17728  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd17788  constant pool (size 184)


kind = STUB
major_key = DoubleToIStub
name = DoubleToIStub
compiler = unknown
Instructions (size = 60)
0x4cd178a0     0  sub csp, jssp, #0x10 (16)
0x4cd178a4     4  stp x1, x0, [jssp, #-16]!
0x4cd178a8     8  ldur x9, [x2, #7]
0x4cd178ac    12  ubfx x0, x9, #52, #11
0x4cd178b0    16  cmp x0, #0x453 (1107)
0x4cd178b4    20  csel x9, xzr, x9, ge
0x4cd178b8    24  b.ge #+0x1c (addr 0x4cd178d4)
0x4cd178bc    28  ubfx x1, x9, #0, #52
0x4cd178c0    32  orr x1, x1, #0x10000000000000
0x4cd178c4    36  tst x9, #0x8000000000000000
0x4cd178c8    40  cneg x1, x1, ne
0x4cd178cc    44  sub x0, x0, #0x433 (1075)
0x4cd178d0    48  lsl x9, x1, x0
0x4cd178d4    52  ldp x1, x0, [jssp], #16
0x4cd178d8    56  ret


RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 893)
0x4cd17940     0  ldur x5, [x1, #15]
0x4cd17944     4  ldur x6, [x5, #-1]
0x4cd17948     8  ldr x16, pc+648 (addr 0x000000004cd17bd0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd1794c    12  cmp x6, x16
0x4cd17950    16  b.ne #+0x2c8 (addr 0x4cd17c18)
0x4cd17954    20  ldur w6, [x5, #11]
0x4cd17958    24  tbnz w2, #0, #+0x140 (addr 0x4cd17a98)
0x4cd1795c    28  asr x8, x2, #32
0x4cd17960    32  cmp w6, w8
0x4cd17964    36  b.le #+0x10 (addr 0x4cd17974)
0x4cd17968    40  cmp w8, w6
0x4cd1796c    44  b.hs #+0x2bc (addr 0x4cd17c28)
0x4cd17970    48  b #+0xe4 (addr 0x4cd17a54)
0x4cd17974    52  cmp w6, w8
0x4cd17978    56  b.gt #+0xdc (addr 0x4cd17a54)
0x4cd1797c    60  adds w7, w6, #0x400 (1024)
0x4cd17980    64  b.vs #+0x2b8 (addr 0x4cd17c38)
0x4cd17984    68  cmp w8, w7
0x4cd17988    72  b.hs #+0x2c0 (addr 0x4cd17c48)
0x4cd1798c    76  tbnz w2, #0, #+0x154 (addr 0x4cd17ae0)
0x4cd17990    80  asr x9, x2, #32
0x4cd17994    84  add w7, w8, w9, lsr #1
0x4cd17998    88  add w7, w7, #0x10 (16)
0x4cd1799c    92  movz w16, #0x95ff
0x4cd179a0    96  cmp w7, w16, lsl #1
0x4cd179a4   100  b.hs #+0x2b4 (addr 0x4cd17c58)
0x4cd179a8   104  lsl x2, x7, #32
0x4cd179ac   108  lsl w3, w7, #3
0x4cd179b0   112  add w3, w3, #0x10 (16)
0x4cd179b4   116  sxtw x3, w3
0x4cd179b8   120  movz x4, #0xd2c0
0x4cd179bc   124  movk x4, #0x166d, lsl #16
0x4cd179c0   128  ldp x9, x16, [x4]
0x4cd179c4   132  adds x7, x9, x3
0x4cd179c8   136  ccmp x7, x16, #nzCv, lo
0x4cd179cc   140  b.hi #+0x194 (addr 0x4cd17b60)
0x4cd179d0   144  str x7, [x4]
0x4cd179d4   148  orr x9, x9, #0x1
0x4cd179d8   152  ldr x3, pc+512 (addr 0x000000004cd17bd8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd179dc   156  stur x3, [x9, #-1]
0x4cd179e0   160  stur x2, [x9, #7]
0x4cd179e4   164  ldur w2, [x9, #11]
0x4cd179e8   168  cmp w6, w2
0x4cd179ec   172  b.ge #+0x18 (addr 0x4cd17a04)
0x4cd179f0   176  sub w2, w2, #0x1 (1)
0x4cd179f4   180  ldr x3, pc+492 (addr 0x000000004cd17be0)    ;; object: 0x21004519 <the hole>
0x4cd179f8   184  add x4, x9, #0xf (15)
0x4cd179fc   188  str x3, [x4, w2, sxtw #3]
0x4cd17a00   192  b #-0x18 (addr 0x4cd179e8)
0x4cd17a04   196  cmp w6, #0x0 (0)
0x4cd17a08   200  b.le #+0x1c (addr 0x4cd17a24)
0x4cd17a0c   204  sub w6, w6, #0x1 (1)
0x4cd17a10   208  add x2, x5, #0xf (15)
0x4cd17a14   212  ldr x3, [x2, w6, sxtw #3]
0x4cd17a18   216  add x2, x9, #0xf (15)
0x4cd17a1c   220  str x3, [x2, w6, sxtw #3]
0x4cd17a20   224  b #-0x1c (addr 0x4cd17a04)
0x4cd17a24   228  mov x2, x9
0x4cd17a28   232  stur x2, [x1, #15]
0x4cd17a2c   236  add x3, x1, #0xf (15)
0x4cd17a30   240  and x2, x1, #0xfffffffffff00000
0x4cd17a34   244  ldr x2, [x2, #8]
0x4cd17a38   248  tbz w2, #2, #+0x18 (addr 0x4cd17a50)
0x4cd17a3c   252  sub csp, jssp, #0x8 (8)
0x4cd17a40   256  str lr, [jssp, #-8]!
0x4cd17a44   260  ldr x16, pc+420 (addr 0x000000004cd17be8)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd17a48   264  blr x16
0x4cd17a4c   268  ldr lr, [jssp], #8
0x4cd17a50   272  mov x5, x9
0x4cd17a54   276  mov x1, x0
0x4cd17a58   280  add x2, x5, #0xf (15)
0x4cd17a5c   284  str x1, [x2, w8, sxtw #3]
0x4cd17a60   288  add x2, x2, w8, sxtw #3
0x4cd17a64   292  tbz w1, #0, #+0x30 (addr 0x4cd17a94)
0x4cd17a68   296  and x1, x1, #0xfffffffffff00000
0x4cd17a6c   300  ldr x1, [x1, #8]
0x4cd17a70   304  tbz w1, #1, #+0x24 (addr 0x4cd17a94)
0x4cd17a74   308  and x1, x5, #0xfffffffffff00000
0x4cd17a78   312  ldr x1, [x1, #8]
0x4cd17a7c   316  tbz w1, #2, #+0x18 (addr 0x4cd17a94)
0x4cd17a80   320  sub csp, jssp, #0x8 (8)
0x4cd17a84   324  str lr, [jssp, #-8]!
0x4cd17a88   328  ldr x16, pc+360 (addr 0x000000004cd17bf0)    ;; code: STUB, RecordWriteStub, minor: 67621
0x4cd17a8c   332  blr x16
0x4cd17a90   336  ldr lr, [jssp], #8
0x4cd17a94   340  ret
0x4cd17a98   344  sub csp, jssp, #0x10 (16)
0x4cd17a9c   348  stp fp, lr, [jssp, #-16]!
0x4cd17aa0   352  movz fp, #0xa00000000
0x4cd17aa4   356  sub csp, jssp, #0x8 (8)
0x4cd17aa8   360  str fp, [jssp, #-8]!
0x4cd17aac   364  add fp, jssp, #0x8 (8)
0x4cd17ab0   368  ldur x16, [x2, #-1]
0x4cd17ab4   372  ldr x17, [x26, #120]
0x4cd17ab8   376  cmp x16, x17
0x4cd17abc   380  b.ne #+0x1ac (addr 0x4cd17c68)
0x4cd17ac0   384  ldur d29, [x2, #7]
0x4cd17ac4   388  fcvtzs w8, d29
0x4cd17ac8   392  scvtf d0, w8
0x4cd17acc   396  fcmp d29, d0
0x4cd17ad0   400  b.ne #+0x198 (addr 0x4cd17c68)
0x4cd17ad4   404  ldr lr, [jssp, #16]
0x4cd17ad8   408  ldp xzr, fp, [jssp], #24
0x4cd17adc   412  b #-0x17c (addr 0x4cd17960)
0x4cd17ae0   416  sub csp, jssp, #0x10 (16)
0x4cd17ae4   420  stp fp, lr, [jssp, #-16]!
0x4cd17ae8   424  movz fp, #0xa00000000
0x4cd17aec   428  sub csp, jssp, #0x8 (8)
0x4cd17af0   432  str fp, [jssp, #-8]!
0x4cd17af4   436  add fp, jssp, #0x8 (8)
0x4cd17af8   440  ldur x16, [x2, #-1]
0x4cd17afc   444  ldr x17, [x26, #120]
0x4cd17b00   448  cmp x16, x17
0x4cd17b04   452  b.ne #+0x30 (addr 0x4cd17b34)
0x4cd17b08   456  ldur d30, [x2, #7]
0x4cd17b0c   460  fcvtzs x9, d30
0x4cd17b10   464  cmp x9, #0x1 (1)
0x4cd17b14   468  ccmn x9, #1, #nzcV, vc
0x4cd17b18   472  b.vc #+0x18 (addr 0x4cd17b30)
0x4cd17b1c   476  sub csp, jssp, #0x8 (8)
0x4cd17b20   480  str lr, [jssp, #-8]!
0x4cd17b24   484  ldr x16, pc+212 (addr 0x000000004cd17bf8)    ;; code: STUB, DoubleToIStub, minor: 127554
0x4cd17b28   488  blr x16
0x4cd17b2c   492  ldr lr, [jssp], #8
0x4cd17b30   496  b #+0x24 (addr 0x4cd17b54)
0x4cd17b34   500  ldp x9, x7, [x26, #64]
0x4cd17b38   504  cmp x2, x9
0x4cd17b3c   508  cset x9, eq
0x4cd17b40   512  ccmp x2, x7, #nZcv, ne
0x4cd17b44   516  b.eq #+0x10 (addr 0x4cd17b54)
0x4cd17b48   520  ldr x16, [x26, #40]
0x4cd17b4c   524  cmp x2, x16
0x4cd17b50   528  b.ne #+0x120 (addr 0x4cd17c70)
0x4cd17b54   532  ldr lr, [jssp, #16]
0x4cd17b58   536  ldp xzr, fp, [jssp], #24
0x4cd17b5c   540  b #-0x1c8 (addr 0x4cd17994)
0x4cd17b60   544  sub csp, jssp, #0x10 (16)
0x4cd17b64   548  stp fp, lr, [jssp, #-16]!
0x4cd17b68   552  movz fp, #0xa00000000
0x4cd17b6c   556  sub csp, jssp, #0x8 (8)
0x4cd17b70   560  str fp, [jssp, #-8]!
0x4cd17b74   564  add fp, jssp, #0x8 (8)
0x4cd17b78   568  movz x9, #0x0
0x4cd17b7c   572  mov x16, lr
0x4cd17b80   576  ldr x17, pc+128 (addr 0x000000004cd17c00)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd17b84   580  blr x17
0x4cd17b88   584  lsl x0, x3, #32
0x4cd17b8c   588  movz x10, #0x0
0x4cd17b90   592  sub csp, jssp, #0x10 (16)
0x4cd17b94   596  stp x10, x0, [jssp, #-16]!
0x4cd17b98   600  movz x0, #0x2
0x4cd17b9c   604  movz x1, #0x5b88
0x4cd17ba0   608  movk x1, #0xe2, lsl #16
0x4cd17ba4   612  ldr x16, pc+100 (addr 0x000000004cd17c08)    ;; code: STUB, CEntryStub, minor: 5
0x4cd17ba8   616  blr x16
0x4cd17bac   620  str x0, [jssp, #72]
0x4cd17bb0   624  ldr x16, pc+96 (addr 0x000000004cd17c10)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd17bb4   628  blr x16
0x4cd17bb8   632  ldr lr, [jssp, #16]
0x4cd17bbc   636  ldp xzr, fp, [jssp], #24
0x4cd17bc0   640  b #-0x1e8 (addr 0x4cd179d8)
0x4cd17bc4   644  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0x4cd17bc8   648  d63f03e0       constant
0x4cd17bcc   652  d503201f       constant
0x4cd17bd0   656  2a804259       constant
0x4cd17bd4   660  00000000       constant
0x4cd17bd8   664  2a804259       constant
0x4cd17bdc   668  00000000       constant
0x4cd17be0   672  21004519       constant
0x4cd17be4   676  00000000       constant
0x4cd17be8   680  4cd170c0       constant
0x4cd17bec   684  00000000       constant
0x4cd17bf0   688  4cd16760       constant
0x4cd17bf4   692  00000000       constant
0x4cd17bf8   696  4cd178a0       constant
0x4cd17bfc   700  00000000       constant
0x4cd17c00   704  4cd06820       constant
0x4cd17c04   708  00000000       constant
0x4cd17c08   712  4cd06260       constant
0x4cd17c0c   716  00000000       constant
0x4cd17c10   720  4cd068e0       constant
0x4cd17c14   724  00000000       constant
0x4cd17c18   728  movz x16, #0x0
0x4cd17c1c   732  sub csp, jssp, #0x10 (16)
0x4cd17c20   736  stp fp, lr, [jssp, #-16]!
0x4cd17c24   740  bl #+0x54 (addr 0x4cd17c78)
0x4cd17c28   744  movz x16, #0x8
0x4cd17c2c   748  sub csp, jssp, #0x10 (16)
0x4cd17c30   752  stp fp, lr, [jssp, #-16]!
0x4cd17c34   756  bl #+0x44 (addr 0x4cd17c78)
0x4cd17c38   760  movz x16, #0x10
0x4cd17c3c   764  sub csp, jssp, #0x10 (16)
0x4cd17c40   768  stp fp, lr, [jssp, #-16]!
0x4cd17c44   772  bl #+0x34 (addr 0x4cd17c78)
0x4cd17c48   776  movz x16, #0x18
0x4cd17c4c   780  sub csp, jssp, #0x10 (16)
0x4cd17c50   784  stp fp, lr, [jssp, #-16]!
0x4cd17c54   788  bl #+0x24 (addr 0x4cd17c78)
0x4cd17c58   792  movz x16, #0x20
0x4cd17c5c   796  sub csp, jssp, #0x10 (16)
0x4cd17c60   800  stp fp, lr, [jssp, #-16]!
0x4cd17c64   804  bl #+0x14 (addr 0x4cd17c78)
0x4cd17c68   808  movz x16, #0x28
0x4cd17c6c   812  bl #+0x1c (addr 0x4cd17c88)
0x4cd17c70   816  movz x16, #0x30
0x4cd17c74   820  bl #+0x14 (addr 0x4cd17c88)
0x4cd17c78   824  movz x17, #0xa00000000
0x4cd17c7c   828  sub csp, jssp, #0x10 (16)
0x4cd17c80   832  stp x17, cp, [jssp, #-16]!
0x4cd17c84   836  add fp, jssp, #0x10 (16)
0x4cd17c88   840  ldr x17, pc+24 (addr 0x000000004cd17ca0)    ;; lazy deoptimization bailout 0
0x4cd17c8c   844  add x17, x17, x16
0x4cd17c90   848  br x17
0x4cd17c94   852  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd17c98   856  d63f03e0       constant
0x4cd17c9c   860  d503201f       constant
0x4cd17ca0   864  4cb06000       constant
0x4cd17ca4   868  00000000       constant


Safepoints (size = 21)
0x4cd17bac   620  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 35)
0x4cd17948  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd179d8  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd179f4  embedded object  (0x21004519 <the hole>)
0x4cd17a44  code target (STUB)  (0x4cd170c0)
0x4cd17a88  code target (STUB)  (0x4cd16760)
0x4cd17b24  code target (STUB)  (0x4cd178a0)
0x4cd17b80  code target (STUB)  (0x4cd06820)
0x4cd17ba4  code target (STUB)  (0x4cd06260)
0x4cd17bb0  code target (STUB)  (0x4cd068e0)
0x4cd17bc4  constant pool (size 84)
0x4cd17c88  runtime entry
0x4cd17c94  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 893)
0x4cd17940     0  ldur x5, [x1, #15]
0x4cd17944     4  ldur x6, [x5, #-1]
0x4cd17948     8  ldr x16, pc+648 (addr 0x000000004cd17bd0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd1794c    12  cmp x6, x16
0x4cd17950    16  b.ne #+0x2c8 (addr 0x4cd17c18)
0x4cd17954    20  ldur w6, [x5, #11]
0x4cd17958    24  tbnz w2, #0, #+0x140 (addr 0x4cd17a98)
0x4cd1795c    28  asr x8, x2, #32
0x4cd17960    32  cmp w6, w8
0x4cd17964    36  b.le #+0x10 (addr 0x4cd17974)
0x4cd17968    40  cmp w8, w6
0x4cd1796c    44  b.hs #+0x2bc (addr 0x4cd17c28)
0x4cd17970    48  b #+0xe4 (addr 0x4cd17a54)
0x4cd17974    52  cmp w6, w8
0x4cd17978    56  b.gt #+0xdc (addr 0x4cd17a54)
0x4cd1797c    60  adds w7, w6, #0x400 (1024)
0x4cd17980    64  b.vs #+0x2b8 (addr 0x4cd17c38)
0x4cd17984    68  cmp w8, w7
0x4cd17988    72  b.hs #+0x2c0 (addr 0x4cd17c48)
0x4cd1798c    76  tbnz w2, #0, #+0x154 (addr 0x4cd17ae0)
0x4cd17990    80  asr x9, x2, #32
0x4cd17994    84  add w7, w8, w9, lsr #1
0x4cd17998    88  add w7, w7, #0x10 (16)
0x4cd1799c    92  movz w16, #0x95ff
0x4cd179a0    96  cmp w7, w16, lsl #1
0x4cd179a4   100  b.hs #+0x2b4 (addr 0x4cd17c58)
0x4cd179a8   104  lsl x2, x7, #32
0x4cd179ac   108  lsl w3, w7, #3
0x4cd179b0   112  add w3, w3, #0x10 (16)
0x4cd179b4   116  sxtw x3, w3
0x4cd179b8   120  movz x4, #0xd2c0
0x4cd179bc   124  movk x4, #0x166d, lsl #16
0x4cd179c0   128  ldp x9, x16, [x4]
0x4cd179c4   132  adds x7, x9, x3
0x4cd179c8   136  ccmp x7, x16, #nzCv, lo
0x4cd179cc   140  b.hi #+0x194 (addr 0x4cd17b60)
0x4cd179d0   144  str x7, [x4]
0x4cd179d4   148  orr x9, x9, #0x1
0x4cd179d8   152  ldr x3, pc+512 (addr 0x000000004cd17bd8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd179dc   156  stur x3, [x9, #-1]
0x4cd179e0   160  stur x2, [x9, #7]
0x4cd179e4   164  ldur w2, [x9, #11]
0x4cd179e8   168  cmp w6, w2
0x4cd179ec   172  b.ge #+0x18 (addr 0x4cd17a04)
0x4cd179f0   176  sub w2, w2, #0x1 (1)
0x4cd179f4   180  ldr x3, pc+492 (addr 0x000000004cd17be0)    ;; object: 0x21004519 <the hole>
0x4cd179f8   184  add x4, x9, #0xf (15)
0x4cd179fc   188  str x3, [x4, w2, sxtw #3]
0x4cd17a00   192  b #-0x18 (addr 0x4cd179e8)
0x4cd17a04   196  cmp w6, #0x0 (0)
0x4cd17a08   200  b.le #+0x1c (addr 0x4cd17a24)
0x4cd17a0c   204  sub w6, w6, #0x1 (1)
0x4cd17a10   208  add x2, x5, #0xf (15)
0x4cd17a14   212  ldr x3, [x2, w6, sxtw #3]
0x4cd17a18   216  add x2, x9, #0xf (15)
0x4cd17a1c   220  str x3, [x2, w6, sxtw #3]
0x4cd17a20   224  b #-0x1c (addr 0x4cd17a04)
0x4cd17a24   228  mov x2, x9
0x4cd17a28   232  stur x2, [x1, #15]
0x4cd17a2c   236  add x3, x1, #0xf (15)
0x4cd17a30   240  and x2, x1, #0xfffffffffff00000
0x4cd17a34   244  ldr x2, [x2, #8]
0x4cd17a38   248  tbz w2, #2, #+0x18 (addr 0x4cd17a50)
0x4cd17a3c   252  sub csp, jssp, #0x8 (8)
0x4cd17a40   256  str lr, [jssp, #-8]!
0x4cd17a44   260  ldr x16, pc+420 (addr 0x000000004cd17be8)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd17a48   264  blr x16
0x4cd17a4c   268  ldr lr, [jssp], #8
0x4cd17a50   272  mov x5, x9
0x4cd17a54   276  mov x1, x0
0x4cd17a58   280  add x2, x5, #0xf (15)
0x4cd17a5c   284  str x1, [x2, w8, sxtw #3]
0x4cd17a60   288  add x2, x2, w8, sxtw #3
0x4cd17a64   292  tbz w1, #0, #+0x30 (addr 0x4cd17a94)
0x4cd17a68   296  and x1, x1, #0xfffffffffff00000
0x4cd17a6c   300  ldr x1, [x1, #8]
0x4cd17a70   304  tbz w1, #1, #+0x24 (addr 0x4cd17a94)
0x4cd17a74   308  and x1, x5, #0xfffffffffff00000
0x4cd17a78   312  ldr x1, [x1, #8]
0x4cd17a7c   316  tbz w1, #2, #+0x18 (addr 0x4cd17a94)
0x4cd17a80   320  sub csp, jssp, #0x8 (8)
0x4cd17a84   324  str lr, [jssp, #-8]!
0x4cd17a88   328  ldr x16, pc+360 (addr 0x000000004cd17bf0)    ;; code: STUB, RecordWriteStub, minor: 67621
0x4cd17a8c   332  blr x16
0x4cd17a90   336  ldr lr, [jssp], #8
0x4cd17a94   340  ret
0x4cd17a98   344  sub csp, jssp, #0x10 (16)
0x4cd17a9c   348  stp fp, lr, [jssp, #-16]!
0x4cd17aa0   352  movz fp, #0xa00000000
0x4cd17aa4   356  sub csp, jssp, #0x8 (8)
0x4cd17aa8   360  str fp, [jssp, #-8]!
0x4cd17aac   364  add fp, jssp, #0x8 (8)
0x4cd17ab0   368  ldur x16, [x2, #-1]
0x4cd17ab4   372  ldr x17, [x26, #120]
0x4cd17ab8   376  cmp x16, x17
0x4cd17abc   380  b.ne #+0x1ac (addr 0x4cd17c68)
0x4cd17ac0   384  ldur d29, [x2, #7]
0x4cd17ac4   388  fcvtzs w8, d29
0x4cd17ac8   392  scvtf d0, w8
0x4cd17acc   396  fcmp d29, d0
0x4cd17ad0   400  b.ne #+0x198 (addr 0x4cd17c68)
0x4cd17ad4   404  ldr lr, [jssp, #16]
0x4cd17ad8   408  ldp xzr, fp, [jssp], #24
0x4cd17adc   412  b #-0x17c (addr 0x4cd17960)
0x4cd17ae0   416  sub csp, jssp, #0x10 (16)
0x4cd17ae4   420  stp fp, lr, [jssp, #-16]!
0x4cd17ae8   424  movz fp, #0xa00000000
0x4cd17aec   428  sub csp, jssp, #0x8 (8)
0x4cd17af0   432  str fp, [jssp, #-8]!
0x4cd17af4   436  add fp, jssp, #0x8 (8)
0x4cd17af8   440  ldur x16, [x2, #-1]
0x4cd17afc   444  ldr x17, [x26, #120]
0x4cd17b00   448  cmp x16, x17
0x4cd17b04   452  b.ne #+0x30 (addr 0x4cd17b34)
0x4cd17b08   456  ldur d30, [x2, #7]
0x4cd17b0c   460  fcvtzs x9, d30
0x4cd17b10   464  cmp x9, #0x1 (1)
0x4cd17b14   468  ccmn x9, #1, #nzcV, vc
0x4cd17b18   472  b.vc #+0x18 (addr 0x4cd17b30)
0x4cd17b1c   476  sub csp, jssp, #0x8 (8)
0x4cd17b20   480  str lr, [jssp, #-8]!
0x4cd17b24   484  ldr x16, pc+212 (addr 0x000000004cd17bf8)    ;; code: STUB, DoubleToIStub, minor: 127554
0x4cd17b28   488  blr x16
0x4cd17b2c   492  ldr lr, [jssp], #8
0x4cd17b30   496  b #+0x24 (addr 0x4cd17b54)
0x4cd17b34   500  ldp x9, x7, [x26, #64]
0x4cd17b38   504  cmp x2, x9
0x4cd17b3c   508  cset x9, eq
0x4cd17b40   512  ccmp x2, x7, #nZcv, ne
0x4cd17b44   516  b.eq #+0x10 (addr 0x4cd17b54)
0x4cd17b48   520  ldr x16, [x26, #40]
0x4cd17b4c   524  cmp x2, x16
0x4cd17b50   528  b.ne #+0x120 (addr 0x4cd17c70)
0x4cd17b54   532  ldr lr, [jssp, #16]
0x4cd17b58   536  ldp xzr, fp, [jssp], #24
0x4cd17b5c   540  b #-0x1c8 (addr 0x4cd17994)
0x4cd17b60   544  sub csp, jssp, #0x10 (16)
0x4cd17b64   548  stp fp, lr, [jssp, #-16]!
0x4cd17b68   552  movz fp, #0xa00000000
0x4cd17b6c   556  sub csp, jssp, #0x8 (8)
0x4cd17b70   560  str fp, [jssp, #-8]!
0x4cd17b74   564  add fp, jssp, #0x8 (8)
0x4cd17b78   568  movz x9, #0x0
0x4cd17b7c   572  mov x16, lr
0x4cd17b80   576  ldr x17, pc+128 (addr 0x000000004cd17c00)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd17b84   580  blr x17
0x4cd17b88   584  lsl x0, x3, #32
0x4cd17b8c   588  movz x10, #0x0
0x4cd17b90   592  sub csp, jssp, #0x10 (16)
0x4cd17b94   596  stp x10, x0, [jssp, #-16]!
0x4cd17b98   600  movz x0, #0x2
0x4cd17b9c   604  movz x1, #0x5b88
0x4cd17ba0   608  movk x1, #0xe2, lsl #16
0x4cd17ba4   612  ldr x16, pc+100 (addr 0x000000004cd17c08)    ;; code: STUB, CEntryStub, minor: 5
0x4cd17ba8   616  blr x16
0x4cd17bac   620  str x0, [jssp, #72]
0x4cd17bb0   624  ldr x16, pc+96 (addr 0x000000004cd17c10)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd17bb4   628  blr x16
0x4cd17bb8   632  ldr lr, [jssp, #16]
0x4cd17bbc   636  ldp xzr, fp, [jssp], #24
0x4cd17bc0   640  b #-0x1e8 (addr 0x4cd179d8)
0x4cd17bc4   644  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0x4cd17bc8   648  d63f03e0       constant
0x4cd17bcc   652  d503201f       constant
0x4cd17bd0   656  2a804259       constant
0x4cd17bd4   660  00000000       constant
0x4cd17bd8   664  2a804259       constant
0x4cd17bdc   668  00000000       constant
0x4cd17be0   672  21004519       constant
0x4cd17be4   676  00000000       constant
0x4cd17be8   680  4cd170c0       constant
0x4cd17bec   684  00000000       constant
0x4cd17bf0   688  4cd16760       constant
0x4cd17bf4   692  00000000       constant
0x4cd17bf8   696  4cd178a0       constant
0x4cd17bfc   700  00000000       constant
0x4cd17c00   704  4cd06820       constant
0x4cd17c04   708  00000000       constant
0x4cd17c08   712  4cd06260       constant
0x4cd17c0c   716  00000000       constant
0x4cd17c10   720  4cd068e0       constant
0x4cd17c14   724  00000000       constant
0x4cd17c18   728  movz x16, #0x0
0x4cd17c1c   732  sub csp, jssp, #0x10 (16)
0x4cd17c20   736  stp fp, lr, [jssp, #-16]!
0x4cd17c24   740  bl #+0x54 (addr 0x4cd17c78)
0x4cd17c28   744  movz x16, #0x8
0x4cd17c2c   748  sub csp, jssp, #0x10 (16)
0x4cd17c30   752  stp fp, lr, [jssp, #-16]!
0x4cd17c34   756  bl #+0x44 (addr 0x4cd17c78)
0x4cd17c38   760  movz x16, #0x10
0x4cd17c3c   764  sub csp, jssp, #0x10 (16)
0x4cd17c40   768  stp fp, lr, [jssp, #-16]!
0x4cd17c44   772  bl #+0x34 (addr 0x4cd17c78)
0x4cd17c48   776  movz x16, #0x18
0x4cd17c4c   780  sub csp, jssp, #0x10 (16)
0x4cd17c50   784  stp fp, lr, [jssp, #-16]!
0x4cd17c54   788  bl #+0x24 (addr 0x4cd17c78)
0x4cd17c58   792  movz x16, #0x20
0x4cd17c5c   796  sub csp, jssp, #0x10 (16)
0x4cd17c60   800  stp fp, lr, [jssp, #-16]!
0x4cd17c64   804  bl #+0x14 (addr 0x4cd17c78)
0x4cd17c68   808  movz x16, #0x28
0x4cd17c6c   812  bl #+0x1c (addr 0x4cd17c88)
0x4cd17c70   816  movz x16, #0x30
0x4cd17c74   820  bl #+0x14 (addr 0x4cd17c88)
0x4cd17c78   824  movz x17, #0xa00000000
0x4cd17c7c   828  sub csp, jssp, #0x10 (16)
0x4cd17c80   832  stp x17, cp, [jssp, #-16]!
0x4cd17c84   836  add fp, jssp, #0x10 (16)
0x4cd17c88   840  ldr x17, pc+24 (addr 0x000000004cd17ca0)    ;; lazy deoptimization bailout 0
0x4cd17c8c   844  add x17, x17, x16
0x4cd17c90   848  br x17
0x4cd17c94   852  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd17c98   856  d63f03e0       constant
0x4cd17c9c   860  d503201f       constant
0x4cd17ca0   864  4cb06000       constant
0x4cd17ca4   868  00000000       constant


Safepoints (size = 21)
0x4cd17bac   620  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 35)
0x4cd17948  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd179d8  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd179f4  embedded object  (0x21004519 <the hole>)
0x4cd17a44  code target (STUB)  (0x4cd170c0)
0x4cd17a88  code target (STUB)  (0x4cd16760)
0x4cd17b24  code target (STUB)  (0x4cd178a0)
0x4cd17b80  code target (STUB)  (0x4cd06820)
0x4cd17ba4  code target (STUB)  (0x4cd06260)
0x4cd17bb0  code target (STUB)  (0x4cd068e0)
0x4cd17bc4  constant pool (size 84)
0x4cd17c88  runtime entry
0x4cd17c94  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 240)
0x4cd17d20     0  ldur x5, [x1, #15]
0x4cd17d24     4  ldur x6, [x5, #-1]
0x4cd17d28     8  ldr x16, pc+104 (addr 0x000000004cd17d90)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd17d2c    12  cmp x6, x16
0x4cd17d30    16  b.ne #+0x68 (addr 0x4cd17d98)
0x4cd17d34    20  ldur w6, [x1, #27]
0x4cd17d38    24  mov x7, x0
0x4cd17d3c    28  tbnz w7, #0, #+0x6c (addr 0x4cd17da8)
0x4cd17d40    32  tbnz w2, #0, #+0x20 (addr 0x4cd17d60)
0x4cd17d44    36  asr x9, x2, #32
0x4cd17d48    40  cmp w9, w6
0x4cd17d4c    44  b.hs #+0x6c (addr 0x4cd17db8)
0x4cd17d50    48  asr x1, x7, #32
0x4cd17d54    52  add x2, x5, w9, sxtw #3
0x4cd17d58    56  stur w1, [x2, #19]
0x4cd17d5c    60  ret
0x4cd17d60    64  ldur x16, [x2, #-1]
0x4cd17d64    68  ldr x17, [x26, #120]
0x4cd17d68    72  cmp x16, x17
0x4cd17d6c    76  b.ne #+0x5c (addr 0x4cd17dc8)
0x4cd17d70    80  ldur d29, [x2, #7]
0x4cd17d74    84  fcvtzs w9, d29
0x4cd17d78    88  scvtf d0, w9
0x4cd17d7c    92  fcmp d29, d0
0x4cd17d80    96  b.ne #+0x48 (addr 0x4cd17dc8)
0x4cd17d84   100  b #-0x3c (addr 0x4cd17d48)
0x4cd17d88   104  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd17d8c   108  d63f03e0       constant
0x4cd17d90   112  2a804259       constant
0x4cd17d94   116  00000000       constant
0x4cd17d98   120  movz x16, #0x0
0x4cd17d9c   124  sub csp, jssp, #0x10 (16)
0x4cd17da0   128  stp fp, lr, [jssp, #-16]!
0x4cd17da4   132  bl #+0x34 (addr 0x4cd17dd8)
0x4cd17da8   136  movz x16, #0x8
0x4cd17dac   140  sub csp, jssp, #0x10 (16)
0x4cd17db0   144  stp fp, lr, [jssp, #-16]!
0x4cd17db4   148  bl #+0x24 (addr 0x4cd17dd8)
0x4cd17db8   152  movz x16, #0x10
0x4cd17dbc   156  sub csp, jssp, #0x10 (16)
0x4cd17dc0   160  stp fp, lr, [jssp, #-16]!
0x4cd17dc4   164  bl #+0x14 (addr 0x4cd17dd8)
0x4cd17dc8   168  movz x16, #0x18
0x4cd17dcc   172  sub csp, jssp, #0x10 (16)
0x4cd17dd0   176  stp fp, lr, [jssp, #-16]!
0x4cd17dd4   180  bl #+0x4 (addr 0x4cd17dd8)
0x4cd17dd8   184  movz x17, #0xa00000000
0x4cd17ddc   188  sub csp, jssp, #0x10 (16)
0x4cd17de0   192  stp x17, cp, [jssp, #-16]!
0x4cd17de4   196  add fp, jssp, #0x10 (16)
0x4cd17de8   200  ldr x17, pc+24 (addr 0x000000004cd17e00)    ;; lazy deoptimization bailout 0
0x4cd17dec   204  add x17, x17, x16
0x4cd17df0   208  br x17
0x4cd17df4   212  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd17df8   216  d63f03e0       constant
0x4cd17dfc   220  d503201f       constant
0x4cd17e00   224  4cb06000       constant
0x4cd17e04   228  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0x4cd17d28  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd17d88  constant pool (size 16)
0x4cd17de8  runtime entry
0x4cd17df4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 240)
0x4cd17d20     0  ldur x5, [x1, #15]
0x4cd17d24     4  ldur x6, [x5, #-1]
0x4cd17d28     8  ldr x16, pc+104 (addr 0x000000004cd17d90)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd17d2c    12  cmp x6, x16
0x4cd17d30    16  b.ne #+0x68 (addr 0x4cd17d98)
0x4cd17d34    20  ldur w6, [x1, #27]
0x4cd17d38    24  mov x7, x0
0x4cd17d3c    28  tbnz w7, #0, #+0x6c (addr 0x4cd17da8)
0x4cd17d40    32  tbnz w2, #0, #+0x20 (addr 0x4cd17d60)
0x4cd17d44    36  asr x9, x2, #32
0x4cd17d48    40  cmp w9, w6
0x4cd17d4c    44  b.hs #+0x6c (addr 0x4cd17db8)
0x4cd17d50    48  asr x1, x7, #32
0x4cd17d54    52  add x2, x5, w9, sxtw #3
0x4cd17d58    56  stur w1, [x2, #19]
0x4cd17d5c    60  ret
0x4cd17d60    64  ldur x16, [x2, #-1]
0x4cd17d64    68  ldr x17, [x26, #120]
0x4cd17d68    72  cmp x16, x17
0x4cd17d6c    76  b.ne #+0x5c (addr 0x4cd17dc8)
0x4cd17d70    80  ldur d29, [x2, #7]
0x4cd17d74    84  fcvtzs w9, d29
0x4cd17d78    88  scvtf d0, w9
0x4cd17d7c    92  fcmp d29, d0
0x4cd17d80    96  b.ne #+0x48 (addr 0x4cd17dc8)
0x4cd17d84   100  b #-0x3c (addr 0x4cd17d48)
0x4cd17d88   104  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd17d8c   108  d63f03e0       constant
0x4cd17d90   112  2a804259       constant
0x4cd17d94   116  00000000       constant
0x4cd17d98   120  movz x16, #0x0
0x4cd17d9c   124  sub csp, jssp, #0x10 (16)
0x4cd17da0   128  stp fp, lr, [jssp, #-16]!
0x4cd17da4   132  bl #+0x34 (addr 0x4cd17dd8)
0x4cd17da8   136  movz x16, #0x8
0x4cd17dac   140  sub csp, jssp, #0x10 (16)
0x4cd17db0   144  stp fp, lr, [jssp, #-16]!
0x4cd17db4   148  bl #+0x24 (addr 0x4cd17dd8)
0x4cd17db8   152  movz x16, #0x10
0x4cd17dbc   156  sub csp, jssp, #0x10 (16)
0x4cd17dc0   160  stp fp, lr, [jssp, #-16]!
0x4cd17dc4   164  bl #+0x14 (addr 0x4cd17dd8)
0x4cd17dc8   168  movz x16, #0x18
0x4cd17dcc   172  sub csp, jssp, #0x10 (16)
0x4cd17dd0   176  stp fp, lr, [jssp, #-16]!
0x4cd17dd4   180  bl #+0x4 (addr 0x4cd17dd8)
0x4cd17dd8   184  movz x17, #0xa00000000
0x4cd17ddc   188  sub csp, jssp, #0x10 (16)
0x4cd17de0   192  stp x17, cp, [jssp, #-16]!
0x4cd17de4   196  add fp, jssp, #0x10 (16)
0x4cd17de8   200  ldr x17, pc+24 (addr 0x000000004cd17e00)    ;; lazy deoptimization bailout 0
0x4cd17dec   204  add x17, x17, x16
0x4cd17df0   208  br x17
0x4cd17df4   212  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd17df8   216  d63f03e0       constant
0x4cd17dfc   220  d503201f       constant
0x4cd17e00   224  4cb06000       constant
0x4cd17e04   228  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0x4cd17d28  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd17d88  constant pool (size 16)
0x4cd17de8  runtime entry
0x4cd17df4  constant pool (size 20)


kind = STUB
major_key = DoubleToIStub
name = DoubleToIStub
compiler = unknown
Instructions (size = 60)
0x4cd17e80     0  sub csp, jssp, #0x10 (16)
0x4cd17e84     4  stp x1, x0, [jssp, #-16]!
0x4cd17e88     8  ldur x10, [x2, #7]
0x4cd17e8c    12  ubfx x0, x10, #52, #11
0x4cd17e90    16  cmp x0, #0x453 (1107)
0x4cd17e94    20  csel x10, xzr, x10, ge
0x4cd17e98    24  b.ge #+0x1c (addr 0x4cd17eb4)
0x4cd17e9c    28  ubfx x1, x10, #0, #52
0x4cd17ea0    32  orr x1, x1, #0x10000000000000
0x4cd17ea4    36  tst x10, #0x8000000000000000
0x4cd17ea8    40  cneg x1, x1, ne
0x4cd17eac    44  sub x0, x0, #0x433 (1075)
0x4cd17eb0    48  lsl x10, x1, x0
0x4cd17eb4    52  ldp x1, x0, [jssp], #16
0x4cd17eb8    56  ret


RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 885)
0x4cd17f20     0  ldur x5, [x1, #15]
0x4cd17f24     4  ldur x6, [x5, #-1]
0x4cd17f28     8  ldr x16, pc+632 (addr 0x000000004cd181a0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd17f2c    12  cmp x6, x16
0x4cd17f30    16  b.ne #+0x2b0 (addr 0x4cd181e0)
0x4cd17f34    20  ldur w6, [x1, #27]
0x4cd17f38    24  mov x7, x0
0x4cd17f3c    28  tbnz w7, #0, #+0x2b4 (addr 0x4cd181f0)
0x4cd17f40    32  asr x7, x7, #32
0x4cd17f44    36  tbnz w2, #0, #+0x128 (addr 0x4cd1806c)
0x4cd17f48    40  asr x9, x2, #32
0x4cd17f4c    44  cmp w6, w9
0x4cd17f50    48  b.eq #+0x10 (addr 0x4cd17f60)
0x4cd17f54    52  cmp w9, w6
0x4cd17f58    56  b.hs #+0x2a8 (addr 0x4cd18200)
0x4cd17f5c    60  b #+0x104 (addr 0x4cd18060)
0x4cd17f60    64  ldur w8, [x5, #11]
0x4cd17f64    68  cmp w8, w9
0x4cd17f68    72  b.gt #+0xe0 (addr 0x4cd18048)
0x4cd17f6c    76  adds w8, w8, #0x400 (1024)
0x4cd17f70    80  b.vs #+0x2a0 (addr 0x4cd18210)
0x4cd17f74    84  cmp w9, w8
0x4cd17f78    88  b.hs #+0x2a8 (addr 0x4cd18220)
0x4cd17f7c    92  tbnz w2, #0, #+0x138 (addr 0x4cd180b4)
0x4cd17f80    96  asr x10, x2, #32
0x4cd17f84   100  add w8, w9, w10, lsr #1
0x4cd17f88   104  add w8, w8, #0x10 (16)
0x4cd17f8c   108  movz w16, #0x95ff
0x4cd17f90   112  cmp w8, w16, lsl #1
0x4cd17f94   116  b.hs #+0x29c (addr 0x4cd18230)
0x4cd17f98   120  lsl x2, x8, #32
0x4cd17f9c   124  lsl w3, w8, #3
0x4cd17fa0   128  add w3, w3, #0x10 (16)
0x4cd17fa4   132  sxtw x3, w3
0x4cd17fa8   136  movz x4, #0xd2c0
0x4cd17fac   140  movk x4, #0x166d, lsl #16
0x4cd17fb0   144  ldp x10, x16, [x4]
0x4cd17fb4   148  adds x8, x10, x3
0x4cd17fb8   152  ccmp x8, x16, #nzCv, lo
0x4cd17fbc   156  b.hi #+0x178 (addr 0x4cd18134)
0x4cd17fc0   160  str x8, [x4]
0x4cd17fc4   164  orr x10, x10, #0x1
0x4cd17fc8   168  ldr x3, pc+480 (addr 0x000000004cd181a8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd17fcc   172  stur x3, [x10, #-1]
0x4cd17fd0   176  stur x2, [x10, #7]
0x4cd17fd4   180  ldur w2, [x10, #11]
0x4cd17fd8   184  cmp w6, w2
0x4cd17fdc   188  b.ge #+0x18 (addr 0x4cd17ff4)
0x4cd17fe0   192  sub w2, w2, #0x1 (1)
0x4cd17fe4   196  ldr x3, pc+460 (addr 0x000000004cd181b0)    ;; object: 0x21004519 <the hole>
0x4cd17fe8   200  add x4, x10, #0xf (15)
0x4cd17fec   204  str x3, [x4, w2, sxtw #3]
0x4cd17ff0   208  b #-0x18 (addr 0x4cd17fd8)
0x4cd17ff4   212  cmp w6, #0x0 (0)
0x4cd17ff8   216  b.le #+0x20 (addr 0x4cd18018)
0x4cd17ffc   220  sub w6, w6, #0x1 (1)
0x4cd18000   224  add x2, x5, w6, sxtw #3
0x4cd18004   228  ldur w3, [x2, #19]
0x4cd18008   232  lsl x2, x3, #32
0x4cd1800c   236  add x3, x10, #0xf (15)
0x4cd18010   240  str x2, [x3, w6, sxtw #3]
0x4cd18014   244  b #-0x20 (addr 0x4cd17ff4)
0x4cd18018   248  mov x2, x10
0x4cd1801c   252  stur x2, [x1, #15]
0x4cd18020   256  add x3, x1, #0xf (15)
0x4cd18024   260  and x2, x1, #0xfffffffffff00000
0x4cd18028   264  ldr x2, [x2, #8]
0x4cd1802c   268  tbz w2, #2, #+0x18 (addr 0x4cd18044)
0x4cd18030   272  sub csp, jssp, #0x8 (8)
0x4cd18034   276  str lr, [jssp, #-8]!
0x4cd18038   280  ldr x16, pc+384 (addr 0x000000004cd181b8)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd1803c   284  blr x16
0x4cd18040   288  ldr lr, [jssp], #8
0x4cd18044   292  mov x5, x10
0x4cd18048   296  add w2, w9, #0x1 (1)
0x4cd1804c   300  lsl x2, x2, #32
0x4cd18050   304  stur x2, [x1, #23]
0x4cd18054   308  movz x1, #0x0
0x4cd18058   312  add x2, x5, #0xf (15)
0x4cd1805c   316  str x1, [x2, w9, sxtw #3]
0x4cd18060   320  add x1, x5, w9, sxtw #3
0x4cd18064   324  stur w7, [x1, #19]
0x4cd18068   328  ret
0x4cd1806c   332  sub csp, jssp, #0x10 (16)
0x4cd18070   336  stp fp, lr, [jssp, #-16]!
0x4cd18074   340  movz fp, #0xa00000000
0x4cd18078   344  sub csp, jssp, #0x8 (8)
0x4cd1807c   348  str fp, [jssp, #-8]!
0x4cd18080   352  add fp, jssp, #0x8 (8)
0x4cd18084   356  ldur x16, [x2, #-1]
0x4cd18088   360  ldr x17, [x26, #120]
0x4cd1808c   364  cmp x16, x17
0x4cd18090   368  b.ne #+0x1b0 (addr 0x4cd18240)
0x4cd18094   372  ldur d29, [x2, #7]
0x4cd18098   376  fcvtzs w9, d29
0x4cd1809c   380  scvtf d0, w9
0x4cd180a0   384  fcmp d29, d0
0x4cd180a4   388  b.ne #+0x19c (addr 0x4cd18240)
0x4cd180a8   392  ldr lr, [jssp, #16]
0x4cd180ac   396  ldp xzr, fp, [jssp], #24
0x4cd180b0   400  b #-0x164 (addr 0x4cd17f4c)
0x4cd180b4   404  sub csp, jssp, #0x10 (16)
0x4cd180b8   408  stp fp, lr, [jssp, #-16]!
0x4cd180bc   412  movz fp, #0xa00000000
0x4cd180c0   416  sub csp, jssp, #0x8 (8)
0x4cd180c4   420  str fp, [jssp, #-8]!
0x4cd180c8   424  add fp, jssp, #0x8 (8)
0x4cd180cc   428  ldur x16, [x2, #-1]
0x4cd180d0   432  ldr x17, [x26, #120]
0x4cd180d4   436  cmp x16, x17
0x4cd180d8   440  b.ne #+0x30 (addr 0x4cd18108)
0x4cd180dc   444  ldur d30, [x2, #7]
0x4cd180e0   448  fcvtzs x10, d30
0x4cd180e4   452  cmp x10, #0x1 (1)
0x4cd180e8   456  ccmn x10, #1, #nzcV, vc
0x4cd180ec   460  b.vc #+0x18 (addr 0x4cd18104)
0x4cd180f0   464  sub csp, jssp, #0x8 (8)
0x4cd180f4   468  str lr, [jssp, #-8]!
0x4cd180f8   472  ldr x16, pc+200 (addr 0x000000004cd181c0)    ;; code: STUB, DoubleToIStub, minor: 127618
0x4cd180fc   476  blr x16
0x4cd18100   480  ldr lr, [jssp], #8
0x4cd18104   484  b #+0x24 (addr 0x4cd18128)
0x4cd18108   488  ldp x10, x8, [x26, #64]
0x4cd1810c   492  cmp x2, x10
0x4cd18110   496  cset x10, eq
0x4cd18114   500  ccmp x2, x8, #nZcv, ne
0x4cd18118   504  b.eq #+0x10 (addr 0x4cd18128)
0x4cd1811c   508  ldr x16, [x26, #40]
0x4cd18120   512  cmp x2, x16
0x4cd18124   516  b.ne #+0x124 (addr 0x4cd18248)
0x4cd18128   520  ldr lr, [jssp, #16]
0x4cd1812c   524  ldp xzr, fp, [jssp], #24
0x4cd18130   528  b #-0x1ac (addr 0x4cd17f84)
0x4cd18134   532  sub csp, jssp, #0x10 (16)
0x4cd18138   536  stp fp, lr, [jssp, #-16]!
0x4cd1813c   540  movz fp, #0xa00000000
0x4cd18140   544  sub csp, jssp, #0x8 (8)
0x4cd18144   548  str fp, [jssp, #-8]!
0x4cd18148   552  add fp, jssp, #0x8 (8)
0x4cd1814c   556  movz x10, #0x0
0x4cd18150   560  mov x16, lr
0x4cd18154   564  ldr x17, pc+116 (addr 0x000000004cd181c8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd18158   568  blr x17
0x4cd1815c   572  lsl x0, x3, #32
0x4cd18160   576  movz x10, #0x0
0x4cd18164   580  sub csp, jssp, #0x10 (16)
0x4cd18168   584  stp x10, x0, [jssp, #-16]!
0x4cd1816c   588  movz x0, #0x2
0x4cd18170   592  movz x1, #0x5b88
0x4cd18174   596  movk x1, #0xe2, lsl #16
0x4cd18178   600  ldr x16, pc+88 (addr 0x000000004cd181d0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd1817c   604  blr x16
0x4cd18180   608  str x0, [jssp, #80]
0x4cd18184   612  ldr x16, pc+84 (addr 0x000000004cd181d8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd18188   616  blr x16
0x4cd1818c   620  ldr lr, [jssp, #16]
0x4cd18190   624  ldp xzr, fp, [jssp], #24
0x4cd18194   628  b #-0x1cc (addr 0x4cd17fc8)
0x4cd18198   632  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4cd1819c   636  d63f03e0       constant
0x4cd181a0   640  2a804259       constant
0x4cd181a4   644  00000000       constant
0x4cd181a8   648  2a804259       constant
0x4cd181ac   652  00000000       constant
0x4cd181b0   656  21004519       constant
0x4cd181b4   660  00000000       constant
0x4cd181b8   664  4cd170c0       constant
0x4cd181bc   668  00000000       constant
0x4cd181c0   672  4cd17e80       constant
0x4cd181c4   676  00000000       constant
0x4cd181c8   680  4cd06820       constant
0x4cd181cc   684  00000000       constant
0x4cd181d0   688  4cd06260       constant
0x4cd181d4   692  00000000       constant
0x4cd181d8   696  4cd068e0       constant
0x4cd181dc   700  00000000       constant
0x4cd181e0   704  movz x16, #0x0
0x4cd181e4   708  sub csp, jssp, #0x10 (16)
0x4cd181e8   712  stp fp, lr, [jssp, #-16]!
0x4cd181ec   716  bl #+0x64 (addr 0x4cd18250)
0x4cd181f0   720  movz x16, #0x8
0x4cd181f4   724  sub csp, jssp, #0x10 (16)
0x4cd181f8   728  stp fp, lr, [jssp, #-16]!
0x4cd181fc   732  bl #+0x54 (addr 0x4cd18250)
0x4cd18200   736  movz x16, #0x10
0x4cd18204   740  sub csp, jssp, #0x10 (16)
0x4cd18208   744  stp fp, lr, [jssp, #-16]!
0x4cd1820c   748  bl #+0x44 (addr 0x4cd18250)
0x4cd18210   752  movz x16, #0x18
0x4cd18214   756  sub csp, jssp, #0x10 (16)
0x4cd18218   760  stp fp, lr, [jssp, #-16]!
0x4cd1821c   764  bl #+0x34 (addr 0x4cd18250)
0x4cd18220   768  movz x16, #0x20
0x4cd18224   772  sub csp, jssp, #0x10 (16)
0x4cd18228   776  stp fp, lr, [jssp, #-16]!
0x4cd1822c   780  bl #+0x24 (addr 0x4cd18250)
0x4cd18230   784  movz x16, #0x28
0x4cd18234   788  sub csp, jssp, #0x10 (16)
0x4cd18238   792  stp fp, lr, [jssp, #-16]!
0x4cd1823c   796  bl #+0x14 (addr 0x4cd18250)
0x4cd18240   800  movz x16, #0x30
0x4cd18244   804  bl #+0x1c (addr 0x4cd18260)
0x4cd18248   808  movz x16, #0x38
0x4cd1824c   812  bl #+0x14 (addr 0x4cd18260)
0x4cd18250   816  movz x17, #0xa00000000
0x4cd18254   820  sub csp, jssp, #0x10 (16)
0x4cd18258   824  stp x17, cp, [jssp, #-16]!
0x4cd1825c   828  add fp, jssp, #0x10 (16)
0x4cd18260   832  ldr x17, pc+24 (addr 0x000000004cd18278)    ;; lazy deoptimization bailout 0
0x4cd18264   836  add x17, x17, x16
0x4cd18268   840  br x17
0x4cd1826c   844  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd18270   848  d63f03e0       constant
0x4cd18274   852  d503201f       constant
0x4cd18278   856  4cb06000       constant
0x4cd1827c   860  00000000       constant


Safepoints (size = 21)
0x4cd18180   608  000 | x0 | x1 | x5 | x10 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 32)
0x4cd17f28  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd17fc8  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd17fe4  embedded object  (0x21004519 <the hole>)
0x4cd18038  code target (STUB)  (0x4cd170c0)
0x4cd180f8  code target (STUB)  (0x4cd17e80)
0x4cd18154  code target (STUB)  (0x4cd06820)
0x4cd18178  code target (STUB)  (0x4cd06260)
0x4cd18184  code target (STUB)  (0x4cd068e0)
0x4cd18198  constant pool (size 72)
0x4cd18260  runtime entry
0x4cd1826c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 885)
0x4cd17f20     0  ldur x5, [x1, #15]
0x4cd17f24     4  ldur x6, [x5, #-1]
0x4cd17f28     8  ldr x16, pc+632 (addr 0x000000004cd181a0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd17f2c    12  cmp x6, x16
0x4cd17f30    16  b.ne #+0x2b0 (addr 0x4cd181e0)
0x4cd17f34    20  ldur w6, [x1, #27]
0x4cd17f38    24  mov x7, x0
0x4cd17f3c    28  tbnz w7, #0, #+0x2b4 (addr 0x4cd181f0)
0x4cd17f40    32  asr x7, x7, #32
0x4cd17f44    36  tbnz w2, #0, #+0x128 (addr 0x4cd1806c)
0x4cd17f48    40  asr x9, x2, #32
0x4cd17f4c    44  cmp w6, w9
0x4cd17f50    48  b.eq #+0x10 (addr 0x4cd17f60)
0x4cd17f54    52  cmp w9, w6
0x4cd17f58    56  b.hs #+0x2a8 (addr 0x4cd18200)
0x4cd17f5c    60  b #+0x104 (addr 0x4cd18060)
0x4cd17f60    64  ldur w8, [x5, #11]
0x4cd17f64    68  cmp w8, w9
0x4cd17f68    72  b.gt #+0xe0 (addr 0x4cd18048)
0x4cd17f6c    76  adds w8, w8, #0x400 (1024)
0x4cd17f70    80  b.vs #+0x2a0 (addr 0x4cd18210)
0x4cd17f74    84  cmp w9, w8
0x4cd17f78    88  b.hs #+0x2a8 (addr 0x4cd18220)
0x4cd17f7c    92  tbnz w2, #0, #+0x138 (addr 0x4cd180b4)
0x4cd17f80    96  asr x10, x2, #32
0x4cd17f84   100  add w8, w9, w10, lsr #1
0x4cd17f88   104  add w8, w8, #0x10 (16)
0x4cd17f8c   108  movz w16, #0x95ff
0x4cd17f90   112  cmp w8, w16, lsl #1
0x4cd17f94   116  b.hs #+0x29c (addr 0x4cd18230)
0x4cd17f98   120  lsl x2, x8, #32
0x4cd17f9c   124  lsl w3, w8, #3
0x4cd17fa0   128  add w3, w3, #0x10 (16)
0x4cd17fa4   132  sxtw x3, w3
0x4cd17fa8   136  movz x4, #0xd2c0
0x4cd17fac   140  movk x4, #0x166d, lsl #16
0x4cd17fb0   144  ldp x10, x16, [x4]
0x4cd17fb4   148  adds x8, x10, x3
0x4cd17fb8   152  ccmp x8, x16, #nzCv, lo
0x4cd17fbc   156  b.hi #+0x178 (addr 0x4cd18134)
0x4cd17fc0   160  str x8, [x4]
0x4cd17fc4   164  orr x10, x10, #0x1
0x4cd17fc8   168  ldr x3, pc+480 (addr 0x000000004cd181a8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd17fcc   172  stur x3, [x10, #-1]
0x4cd17fd0   176  stur x2, [x10, #7]
0x4cd17fd4   180  ldur w2, [x10, #11]
0x4cd17fd8   184  cmp w6, w2
0x4cd17fdc   188  b.ge #+0x18 (addr 0x4cd17ff4)
0x4cd17fe0   192  sub w2, w2, #0x1 (1)
0x4cd17fe4   196  ldr x3, pc+460 (addr 0x000000004cd181b0)    ;; object: 0x21004519 <the hole>
0x4cd17fe8   200  add x4, x10, #0xf (15)
0x4cd17fec   204  str x3, [x4, w2, sxtw #3]
0x4cd17ff0   208  b #-0x18 (addr 0x4cd17fd8)
0x4cd17ff4   212  cmp w6, #0x0 (0)
0x4cd17ff8   216  b.le #+0x20 (addr 0x4cd18018)
0x4cd17ffc   220  sub w6, w6, #0x1 (1)
0x4cd18000   224  add x2, x5, w6, sxtw #3
0x4cd18004   228  ldur w3, [x2, #19]
0x4cd18008   232  lsl x2, x3, #32
0x4cd1800c   236  add x3, x10, #0xf (15)
0x4cd18010   240  str x2, [x3, w6, sxtw #3]
0x4cd18014   244  b #-0x20 (addr 0x4cd17ff4)
0x4cd18018   248  mov x2, x10
0x4cd1801c   252  stur x2, [x1, #15]
0x4cd18020   256  add x3, x1, #0xf (15)
0x4cd18024   260  and x2, x1, #0xfffffffffff00000
0x4cd18028   264  ldr x2, [x2, #8]
0x4cd1802c   268  tbz w2, #2, #+0x18 (addr 0x4cd18044)
0x4cd18030   272  sub csp, jssp, #0x8 (8)
0x4cd18034   276  str lr, [jssp, #-8]!
0x4cd18038   280  ldr x16, pc+384 (addr 0x000000004cd181b8)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd1803c   284  blr x16
0x4cd18040   288  ldr lr, [jssp], #8
0x4cd18044   292  mov x5, x10
0x4cd18048   296  add w2, w9, #0x1 (1)
0x4cd1804c   300  lsl x2, x2, #32
0x4cd18050   304  stur x2, [x1, #23]
0x4cd18054   308  movz x1, #0x0
0x4cd18058   312  add x2, x5, #0xf (15)
0x4cd1805c   316  str x1, [x2, w9, sxtw #3]
0x4cd18060   320  add x1, x5, w9, sxtw #3
0x4cd18064   324  stur w7, [x1, #19]
0x4cd18068   328  ret
0x4cd1806c   332  sub csp, jssp, #0x10 (16)
0x4cd18070   336  stp fp, lr, [jssp, #-16]!
0x4cd18074   340  movz fp, #0xa00000000
0x4cd18078   344  sub csp, jssp, #0x8 (8)
0x4cd1807c   348  str fp, [jssp, #-8]!
0x4cd18080   352  add fp, jssp, #0x8 (8)
0x4cd18084   356  ldur x16, [x2, #-1]
0x4cd18088   360  ldr x17, [x26, #120]
0x4cd1808c   364  cmp x16, x17
0x4cd18090   368  b.ne #+0x1b0 (addr 0x4cd18240)
0x4cd18094   372  ldur d29, [x2, #7]
0x4cd18098   376  fcvtzs w9, d29
0x4cd1809c   380  scvtf d0, w9
0x4cd180a0   384  fcmp d29, d0
0x4cd180a4   388  b.ne #+0x19c (addr 0x4cd18240)
0x4cd180a8   392  ldr lr, [jssp, #16]
0x4cd180ac   396  ldp xzr, fp, [jssp], #24
0x4cd180b0   400  b #-0x164 (addr 0x4cd17f4c)
0x4cd180b4   404  sub csp, jssp, #0x10 (16)
0x4cd180b8   408  stp fp, lr, [jssp, #-16]!
0x4cd180bc   412  movz fp, #0xa00000000
0x4cd180c0   416  sub csp, jssp, #0x8 (8)
0x4cd180c4   420  str fp, [jssp, #-8]!
0x4cd180c8   424  add fp, jssp, #0x8 (8)
0x4cd180cc   428  ldur x16, [x2, #-1]
0x4cd180d0   432  ldr x17, [x26, #120]
0x4cd180d4   436  cmp x16, x17
0x4cd180d8   440  b.ne #+0x30 (addr 0x4cd18108)
0x4cd180dc   444  ldur d30, [x2, #7]
0x4cd180e0   448  fcvtzs x10, d30
0x4cd180e4   452  cmp x10, #0x1 (1)
0x4cd180e8   456  ccmn x10, #1, #nzcV, vc
0x4cd180ec   460  b.vc #+0x18 (addr 0x4cd18104)
0x4cd180f0   464  sub csp, jssp, #0x8 (8)
0x4cd180f4   468  str lr, [jssp, #-8]!
0x4cd180f8   472  ldr x16, pc+200 (addr 0x000000004cd181c0)    ;; code: STUB, DoubleToIStub, minor: 127618
0x4cd180fc   476  blr x16
0x4cd18100   480  ldr lr, [jssp], #8
0x4cd18104   484  b #+0x24 (addr 0x4cd18128)
0x4cd18108   488  ldp x10, x8, [x26, #64]
0x4cd1810c   492  cmp x2, x10
0x4cd18110   496  cset x10, eq
0x4cd18114   500  ccmp x2, x8, #nZcv, ne
0x4cd18118   504  b.eq #+0x10 (addr 0x4cd18128)
0x4cd1811c   508  ldr x16, [x26, #40]
0x4cd18120   512  cmp x2, x16
0x4cd18124   516  b.ne #+0x124 (addr 0x4cd18248)
0x4cd18128   520  ldr lr, [jssp, #16]
0x4cd1812c   524  ldp xzr, fp, [jssp], #24
0x4cd18130   528  b #-0x1ac (addr 0x4cd17f84)
0x4cd18134   532  sub csp, jssp, #0x10 (16)
0x4cd18138   536  stp fp, lr, [jssp, #-16]!
0x4cd1813c   540  movz fp, #0xa00000000
0x4cd18140   544  sub csp, jssp, #0x8 (8)
0x4cd18144   548  str fp, [jssp, #-8]!
0x4cd18148   552  add fp, jssp, #0x8 (8)
0x4cd1814c   556  movz x10, #0x0
0x4cd18150   560  mov x16, lr
0x4cd18154   564  ldr x17, pc+116 (addr 0x000000004cd181c8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd18158   568  blr x17
0x4cd1815c   572  lsl x0, x3, #32
0x4cd18160   576  movz x10, #0x0
0x4cd18164   580  sub csp, jssp, #0x10 (16)
0x4cd18168   584  stp x10, x0, [jssp, #-16]!
0x4cd1816c   588  movz x0, #0x2
0x4cd18170   592  movz x1, #0x5b88
0x4cd18174   596  movk x1, #0xe2, lsl #16
0x4cd18178   600  ldr x16, pc+88 (addr 0x000000004cd181d0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd1817c   604  blr x16
0x4cd18180   608  str x0, [jssp, #80]
0x4cd18184   612  ldr x16, pc+84 (addr 0x000000004cd181d8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd18188   616  blr x16
0x4cd1818c   620  ldr lr, [jssp, #16]
0x4cd18190   624  ldp xzr, fp, [jssp], #24
0x4cd18194   628  b #-0x1cc (addr 0x4cd17fc8)
0x4cd18198   632  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4cd1819c   636  d63f03e0       constant
0x4cd181a0   640  2a804259       constant
0x4cd181a4   644  00000000       constant
0x4cd181a8   648  2a804259       constant
0x4cd181ac   652  00000000       constant
0x4cd181b0   656  21004519       constant
0x4cd181b4   660  00000000       constant
0x4cd181b8   664  4cd170c0       constant
0x4cd181bc   668  00000000       constant
0x4cd181c0   672  4cd17e80       constant
0x4cd181c4   676  00000000       constant
0x4cd181c8   680  4cd06820       constant
0x4cd181cc   684  00000000       constant
0x4cd181d0   688  4cd06260       constant
0x4cd181d4   692  00000000       constant
0x4cd181d8   696  4cd068e0       constant
0x4cd181dc   700  00000000       constant
0x4cd181e0   704  movz x16, #0x0
0x4cd181e4   708  sub csp, jssp, #0x10 (16)
0x4cd181e8   712  stp fp, lr, [jssp, #-16]!
0x4cd181ec   716  bl #+0x64 (addr 0x4cd18250)
0x4cd181f0   720  movz x16, #0x8
0x4cd181f4   724  sub csp, jssp, #0x10 (16)
0x4cd181f8   728  stp fp, lr, [jssp, #-16]!
0x4cd181fc   732  bl #+0x54 (addr 0x4cd18250)
0x4cd18200   736  movz x16, #0x10
0x4cd18204   740  sub csp, jssp, #0x10 (16)
0x4cd18208   744  stp fp, lr, [jssp, #-16]!
0x4cd1820c   748  bl #+0x44 (addr 0x4cd18250)
0x4cd18210   752  movz x16, #0x18
0x4cd18214   756  sub csp, jssp, #0x10 (16)
0x4cd18218   760  stp fp, lr, [jssp, #-16]!
0x4cd1821c   764  bl #+0x34 (addr 0x4cd18250)
0x4cd18220   768  movz x16, #0x20
0x4cd18224   772  sub csp, jssp, #0x10 (16)
0x4cd18228   776  stp fp, lr, [jssp, #-16]!
0x4cd1822c   780  bl #+0x24 (addr 0x4cd18250)
0x4cd18230   784  movz x16, #0x28
0x4cd18234   788  sub csp, jssp, #0x10 (16)
0x4cd18238   792  stp fp, lr, [jssp, #-16]!
0x4cd1823c   796  bl #+0x14 (addr 0x4cd18250)
0x4cd18240   800  movz x16, #0x30
0x4cd18244   804  bl #+0x1c (addr 0x4cd18260)
0x4cd18248   808  movz x16, #0x38
0x4cd1824c   812  bl #+0x14 (addr 0x4cd18260)
0x4cd18250   816  movz x17, #0xa00000000
0x4cd18254   820  sub csp, jssp, #0x10 (16)
0x4cd18258   824  stp x17, cp, [jssp, #-16]!
0x4cd1825c   828  add fp, jssp, #0x10 (16)
0x4cd18260   832  ldr x17, pc+24 (addr 0x000000004cd18278)    ;; lazy deoptimization bailout 0
0x4cd18264   836  add x17, x17, x16
0x4cd18268   840  br x17
0x4cd1826c   844  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd18270   848  d63f03e0       constant
0x4cd18274   852  d503201f       constant
0x4cd18278   856  4cb06000       constant
0x4cd1827c   860  00000000       constant


Safepoints (size = 21)
0x4cd18180   608  000 | x0 | x1 | x5 | x10 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 32)
0x4cd17f28  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd17fc8  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd17fe4  embedded object  (0x21004519 <the hole>)
0x4cd18038  code target (STUB)  (0x4cd170c0)
0x4cd180f8  code target (STUB)  (0x4cd17e80)
0x4cd18154  code target (STUB)  (0x4cd06820)
0x4cd18178  code target (STUB)  (0x4cd06260)
0x4cd18184  code target (STUB)  (0x4cd068e0)
0x4cd18198  constant pool (size 72)
0x4cd18260  runtime entry
0x4cd1826c  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 240)
0x4cd18300     0  ldur x5, [x1, #15]
0x4cd18304     4  ldur x6, [x5, #-1]
0x4cd18308     8  ldr x16, pc+104 (addr 0x000000004cd18370)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd1830c    12  cmp x6, x16
0x4cd18310    16  b.ne #+0x68 (addr 0x4cd18378)
0x4cd18314    20  ldur w6, [x1, #27]
0x4cd18318    24  mov x7, x0
0x4cd1831c    28  tbnz w7, #0, #+0x6c (addr 0x4cd18388)
0x4cd18320    32  tbnz w2, #0, #+0x1c (addr 0x4cd1833c)
0x4cd18324    36  asr x9, x2, #32
0x4cd18328    40  cmp w9, w6
0x4cd1832c    44  b.hs #+0x6c (addr 0x4cd18398)
0x4cd18330    48  add x1, x5, #0xf (15)
0x4cd18334    52  str x7, [x1, w9, sxtw #3]
0x4cd18338    56  ret
0x4cd1833c    60  ldur x16, [x2, #-1]
0x4cd18340    64  ldr x17, [x26, #120]
0x4cd18344    68  cmp x16, x17
0x4cd18348    72  b.ne #+0x60 (addr 0x4cd183a8)
0x4cd1834c    76  ldur d29, [x2, #7]
0x4cd18350    80  fcvtzs w9, d29
0x4cd18354    84  scvtf d0, w9
0x4cd18358    88  fcmp d29, d0
0x4cd1835c    92  b.ne #+0x4c (addr 0x4cd183a8)
0x4cd18360    96  b #-0x38 (addr 0x4cd18328)
0x4cd18364   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd18368   104  d63f03e0       constant
0x4cd1836c   108  d503201f       constant
0x4cd18370   112  2a804259       constant
0x4cd18374   116  00000000       constant
0x4cd18378   120  movz x16, #0x0
0x4cd1837c   124  sub csp, jssp, #0x10 (16)
0x4cd18380   128  stp fp, lr, [jssp, #-16]!
0x4cd18384   132  bl #+0x34 (addr 0x4cd183b8)
0x4cd18388   136  movz x16, #0x8
0x4cd1838c   140  sub csp, jssp, #0x10 (16)
0x4cd18390   144  stp fp, lr, [jssp, #-16]!
0x4cd18394   148  bl #+0x24 (addr 0x4cd183b8)
0x4cd18398   152  movz x16, #0x10
0x4cd1839c   156  sub csp, jssp, #0x10 (16)
0x4cd183a0   160  stp fp, lr, [jssp, #-16]!
0x4cd183a4   164  bl #+0x14 (addr 0x4cd183b8)
0x4cd183a8   168  movz x16, #0x18
0x4cd183ac   172  sub csp, jssp, #0x10 (16)
0x4cd183b0   176  stp fp, lr, [jssp, #-16]!
0x4cd183b4   180  bl #+0x4 (addr 0x4cd183b8)
0x4cd183b8   184  movz x17, #0xa00000000
0x4cd183bc   188  sub csp, jssp, #0x10 (16)
0x4cd183c0   192  stp x17, cp, [jssp, #-16]!
0x4cd183c4   196  add fp, jssp, #0x10 (16)
0x4cd183c8   200  ldr x17, pc+24 (addr 0x000000004cd183e0)    ;; lazy deoptimization bailout 0
0x4cd183cc   204  add x17, x17, x16
0x4cd183d0   208  br x17
0x4cd183d4   212  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd183d8   216  d63f03e0       constant
0x4cd183dc   220  d503201f       constant
0x4cd183e0   224  4cb06000       constant
0x4cd183e4   228  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0x4cd18308  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd18364  constant pool (size 20)
0x4cd183c8  runtime entry
0x4cd183d4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 240)
0x4cd18300     0  ldur x5, [x1, #15]
0x4cd18304     4  ldur x6, [x5, #-1]
0x4cd18308     8  ldr x16, pc+104 (addr 0x000000004cd18370)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd1830c    12  cmp x6, x16
0x4cd18310    16  b.ne #+0x68 (addr 0x4cd18378)
0x4cd18314    20  ldur w6, [x1, #27]
0x4cd18318    24  mov x7, x0
0x4cd1831c    28  tbnz w7, #0, #+0x6c (addr 0x4cd18388)
0x4cd18320    32  tbnz w2, #0, #+0x1c (addr 0x4cd1833c)
0x4cd18324    36  asr x9, x2, #32
0x4cd18328    40  cmp w9, w6
0x4cd1832c    44  b.hs #+0x6c (addr 0x4cd18398)
0x4cd18330    48  add x1, x5, #0xf (15)
0x4cd18334    52  str x7, [x1, w9, sxtw #3]
0x4cd18338    56  ret
0x4cd1833c    60  ldur x16, [x2, #-1]
0x4cd18340    64  ldr x17, [x26, #120]
0x4cd18344    68  cmp x16, x17
0x4cd18348    72  b.ne #+0x60 (addr 0x4cd183a8)
0x4cd1834c    76  ldur d29, [x2, #7]
0x4cd18350    80  fcvtzs w9, d29
0x4cd18354    84  scvtf d0, w9
0x4cd18358    88  fcmp d29, d0
0x4cd1835c    92  b.ne #+0x4c (addr 0x4cd183a8)
0x4cd18360    96  b #-0x38 (addr 0x4cd18328)
0x4cd18364   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd18368   104  d63f03e0       constant
0x4cd1836c   108  d503201f       constant
0x4cd18370   112  2a804259       constant
0x4cd18374   116  00000000       constant
0x4cd18378   120  movz x16, #0x0
0x4cd1837c   124  sub csp, jssp, #0x10 (16)
0x4cd18380   128  stp fp, lr, [jssp, #-16]!
0x4cd18384   132  bl #+0x34 (addr 0x4cd183b8)
0x4cd18388   136  movz x16, #0x8
0x4cd1838c   140  sub csp, jssp, #0x10 (16)
0x4cd18390   144  stp fp, lr, [jssp, #-16]!
0x4cd18394   148  bl #+0x24 (addr 0x4cd183b8)
0x4cd18398   152  movz x16, #0x10
0x4cd1839c   156  sub csp, jssp, #0x10 (16)
0x4cd183a0   160  stp fp, lr, [jssp, #-16]!
0x4cd183a4   164  bl #+0x14 (addr 0x4cd183b8)
0x4cd183a8   168  movz x16, #0x18
0x4cd183ac   172  sub csp, jssp, #0x10 (16)
0x4cd183b0   176  stp fp, lr, [jssp, #-16]!
0x4cd183b4   180  bl #+0x4 (addr 0x4cd183b8)
0x4cd183b8   184  movz x17, #0xa00000000
0x4cd183bc   188  sub csp, jssp, #0x10 (16)
0x4cd183c0   192  stp x17, cp, [jssp, #-16]!
0x4cd183c4   196  add fp, jssp, #0x10 (16)
0x4cd183c8   200  ldr x17, pc+24 (addr 0x000000004cd183e0)    ;; lazy deoptimization bailout 0
0x4cd183cc   204  add x17, x17, x16
0x4cd183d0   208  br x17
0x4cd183d4   212  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd183d8   216  d63f03e0       constant
0x4cd183dc   220  d503201f       constant
0x4cd183e0   224  4cb06000       constant
0x4cd183e4   228  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0x4cd18308  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd18364  constant pool (size 20)
0x4cd183c8  runtime entry
0x4cd183d4  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 869)
0x4cd18460     0  ldur x5, [x1, #15]
0x4cd18464     4  ldur x6, [x5, #-1]
0x4cd18468     8  ldr x16, pc+616 (addr 0x000000004cd186d0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd1846c    12  cmp x6, x16
0x4cd18470    16  b.ne #+0x2a0 (addr 0x4cd18710)
0x4cd18474    20  ldur w6, [x1, #27]
0x4cd18478    24  mov x7, x0
0x4cd1847c    28  tbnz w7, #0, #+0x2a4 (addr 0x4cd18720)
0x4cd18480    32  tbnz w2, #0, #+0x118 (addr 0x4cd18598)
0x4cd18484    36  asr x9, x2, #32
0x4cd18488    40  cmp w6, w9
0x4cd1848c    44  b.le #+0x10 (addr 0x4cd1849c)
0x4cd18490    48  cmp w9, w6
0x4cd18494    52  b.hs #+0x29c (addr 0x4cd18730)
0x4cd18498    56  b #+0xf4 (addr 0x4cd1858c)
0x4cd1849c    60  ldur w8, [x5, #11]
0x4cd184a0    64  cmp w8, w9
0x4cd184a4    68  b.gt #+0xdc (addr 0x4cd18580)
0x4cd184a8    72  adds w8, w8, #0x400 (1024)
0x4cd184ac    76  b.vs #+0x294 (addr 0x4cd18740)
0x4cd184b0    80  cmp w9, w8
0x4cd184b4    84  b.hs #+0x29c (addr 0x4cd18750)
0x4cd184b8    88  tbnz w2, #0, #+0x128 (addr 0x4cd185e0)
0x4cd184bc    92  asr x10, x2, #32
0x4cd184c0    96  add w8, w9, w10, lsr #1
0x4cd184c4   100  add w8, w8, #0x10 (16)
0x4cd184c8   104  movz w16, #0x95ff
0x4cd184cc   108  cmp w8, w16, lsl #1
0x4cd184d0   112  b.hs #+0x290 (addr 0x4cd18760)
0x4cd184d4   116  lsl x2, x8, #32
0x4cd184d8   120  lsl w3, w8, #3
0x4cd184dc   124  add w3, w3, #0x10 (16)
0x4cd184e0   128  sxtw x3, w3
0x4cd184e4   132  movz x4, #0xd2c0
0x4cd184e8   136  movk x4, #0x166d, lsl #16
0x4cd184ec   140  ldp x10, x16, [x4]
0x4cd184f0   144  adds x8, x10, x3
0x4cd184f4   148  ccmp x8, x16, #nzCv, lo
0x4cd184f8   152  b.hi #+0x168 (addr 0x4cd18660)
0x4cd184fc   156  str x8, [x4]
0x4cd18500   160  orr x10, x10, #0x1
0x4cd18504   164  ldr x3, pc+468 (addr 0x000000004cd186d8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd18508   168  stur x3, [x10, #-1]
0x4cd1850c   172  stur x2, [x10, #7]
0x4cd18510   176  ldur w2, [x10, #11]
0x4cd18514   180  cmp w6, w2
0x4cd18518   184  b.ge #+0x18 (addr 0x4cd18530)
0x4cd1851c   188  sub w2, w2, #0x1 (1)
0x4cd18520   192  ldr x3, pc+448 (addr 0x000000004cd186e0)    ;; object: 0x21004519 <the hole>
0x4cd18524   196  add x4, x10, #0xf (15)
0x4cd18528   200  str x3, [x4, w2, sxtw #3]
0x4cd1852c   204  b #-0x18 (addr 0x4cd18514)
0x4cd18530   208  cmp w6, #0x0 (0)
0x4cd18534   212  b.le #+0x1c (addr 0x4cd18550)
0x4cd18538   216  sub w6, w6, #0x1 (1)
0x4cd1853c   220  add x2, x5, #0xf (15)
0x4cd18540   224  ldr x3, [x2, w6, sxtw #3]
0x4cd18544   228  add x2, x10, #0xf (15)
0x4cd18548   232  str x3, [x2, w6, sxtw #3]
0x4cd1854c   236  b #-0x1c (addr 0x4cd18530)
0x4cd18550   240  mov x2, x10
0x4cd18554   244  stur x2, [x1, #15]
0x4cd18558   248  add x3, x1, #0xf (15)
0x4cd1855c   252  and x2, x1, #0xfffffffffff00000
0x4cd18560   256  ldr x2, [x2, #8]
0x4cd18564   260  tbz w2, #2, #+0x18 (addr 0x4cd1857c)
0x4cd18568   264  sub csp, jssp, #0x8 (8)
0x4cd1856c   268  str lr, [jssp, #-8]!
0x4cd18570   272  ldr x16, pc+376 (addr 0x000000004cd186e8)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd18574   276  blr x16
0x4cd18578   280  ldr lr, [jssp], #8
0x4cd1857c   284  mov x5, x10
0x4cd18580   288  add w2, w9, #0x1 (1)
0x4cd18584   292  lsl x2, x2, #32
0x4cd18588   296  stur x2, [x1, #23]
0x4cd1858c   300  add x1, x5, #0xf (15)
0x4cd18590   304  str x7, [x1, w9, sxtw #3]
0x4cd18594   308  ret
0x4cd18598   312  sub csp, jssp, #0x10 (16)
0x4cd1859c   316  stp fp, lr, [jssp, #-16]!
0x4cd185a0   320  movz fp, #0xa00000000
0x4cd185a4   324  sub csp, jssp, #0x8 (8)
0x4cd185a8   328  str fp, [jssp, #-8]!
0x4cd185ac   332  add fp, jssp, #0x8 (8)
0x4cd185b0   336  ldur x16, [x2, #-1]
0x4cd185b4   340  ldr x17, [x26, #120]
0x4cd185b8   344  cmp x16, x17
0x4cd185bc   348  b.ne #+0x1b4 (addr 0x4cd18770)
0x4cd185c0   352  ldur d29, [x2, #7]
0x4cd185c4   356  fcvtzs w9, d29
0x4cd185c8   360  scvtf d0, w9
0x4cd185cc   364  fcmp d29, d0
0x4cd185d0   368  b.ne #+0x1a0 (addr 0x4cd18770)
0x4cd185d4   372  ldr lr, [jssp, #16]
0x4cd185d8   376  ldp xzr, fp, [jssp], #24
0x4cd185dc   380  b #-0x154 (addr 0x4cd18488)
0x4cd185e0   384  sub csp, jssp, #0x10 (16)
0x4cd185e4   388  stp fp, lr, [jssp, #-16]!
0x4cd185e8   392  movz fp, #0xa00000000
0x4cd185ec   396  sub csp, jssp, #0x8 (8)
0x4cd185f0   400  str fp, [jssp, #-8]!
0x4cd185f4   404  add fp, jssp, #0x8 (8)
0x4cd185f8   408  ldur x16, [x2, #-1]
0x4cd185fc   412  ldr x17, [x26, #120]
0x4cd18600   416  cmp x16, x17
0x4cd18604   420  b.ne #+0x30 (addr 0x4cd18634)
0x4cd18608   424  ldur d30, [x2, #7]
0x4cd1860c   428  fcvtzs x10, d30
0x4cd18610   432  cmp x10, #0x1 (1)
0x4cd18614   436  ccmn x10, #1, #nzcV, vc
0x4cd18618   440  b.vc #+0x18 (addr 0x4cd18630)
0x4cd1861c   444  sub csp, jssp, #0x8 (8)
0x4cd18620   448  str lr, [jssp, #-8]!
0x4cd18624   452  ldr x16, pc+204 (addr 0x000000004cd186f0)    ;; code: STUB, DoubleToIStub, minor: 127618
0x4cd18628   456  blr x16
0x4cd1862c   460  ldr lr, [jssp], #8
0x4cd18630   464  b #+0x24 (addr 0x4cd18654)
0x4cd18634   468  ldp x10, x8, [x26, #64]
0x4cd18638   472  cmp x2, x10
0x4cd1863c   476  cset x10, eq
0x4cd18640   480  ccmp x2, x8, #nZcv, ne
0x4cd18644   484  b.eq #+0x10 (addr 0x4cd18654)
0x4cd18648   488  ldr x16, [x26, #40]
0x4cd1864c   492  cmp x2, x16
0x4cd18650   496  b.ne #+0x128 (addr 0x4cd18778)
0x4cd18654   500  ldr lr, [jssp, #16]
0x4cd18658   504  ldp xzr, fp, [jssp], #24
0x4cd1865c   508  b #-0x19c (addr 0x4cd184c0)
0x4cd18660   512  sub csp, jssp, #0x10 (16)
0x4cd18664   516  stp fp, lr, [jssp, #-16]!
0x4cd18668   520  movz fp, #0xa00000000
0x4cd1866c   524  sub csp, jssp, #0x8 (8)
0x4cd18670   528  str fp, [jssp, #-8]!
0x4cd18674   532  add fp, jssp, #0x8 (8)
0x4cd18678   536  movz x10, #0x0
0x4cd1867c   540  mov x16, lr
0x4cd18680   544  ldr x17, pc+120 (addr 0x000000004cd186f8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd18684   548  blr x17
0x4cd18688   552  lsl x0, x3, #32
0x4cd1868c   556  movz x10, #0x0
0x4cd18690   560  sub csp, jssp, #0x10 (16)
0x4cd18694   564  stp x10, x0, [jssp, #-16]!
0x4cd18698   568  movz x0, #0x2
0x4cd1869c   572  movz x1, #0x5b88
0x4cd186a0   576  movk x1, #0xe2, lsl #16
0x4cd186a4   580  ldr x16, pc+92 (addr 0x000000004cd18700)    ;; code: STUB, CEntryStub, minor: 5
0x4cd186a8   584  blr x16
0x4cd186ac   588  str x0, [jssp, #80]
0x4cd186b0   592  ldr x16, pc+88 (addr 0x000000004cd18708)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd186b4   596  blr x16
0x4cd186b8   600  ldr lr, [jssp, #16]
0x4cd186bc   604  ldp xzr, fp, [jssp], #24
0x4cd186c0   608  b #-0x1bc (addr 0x4cd18504)
0x4cd186c4   612  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0x4cd186c8   616  d63f03e0       constant
0x4cd186cc   620  d503201f       constant
0x4cd186d0   624  2a804259       constant
0x4cd186d4   628  00000000       constant
0x4cd186d8   632  2a804259       constant
0x4cd186dc   636  00000000       constant
0x4cd186e0   640  21004519       constant
0x4cd186e4   644  00000000       constant
0x4cd186e8   648  4cd170c0       constant
0x4cd186ec   652  00000000       constant
0x4cd186f0   656  4cd17e80       constant
0x4cd186f4   660  00000000       constant
0x4cd186f8   664  4cd06820       constant
0x4cd186fc   668  00000000       constant
0x4cd18700   672  4cd06260       constant
0x4cd18704   676  00000000       constant
0x4cd18708   680  4cd068e0       constant
0x4cd1870c   684  00000000       constant
0x4cd18710   688  movz x16, #0x0
0x4cd18714   692  sub csp, jssp, #0x10 (16)
0x4cd18718   696  stp fp, lr, [jssp, #-16]!
0x4cd1871c   700  bl #+0x64 (addr 0x4cd18780)
0x4cd18720   704  movz x16, #0x8
0x4cd18724   708  sub csp, jssp, #0x10 (16)
0x4cd18728   712  stp fp, lr, [jssp, #-16]!
0x4cd1872c   716  bl #+0x54 (addr 0x4cd18780)
0x4cd18730   720  movz x16, #0x10
0x4cd18734   724  sub csp, jssp, #0x10 (16)
0x4cd18738   728  stp fp, lr, [jssp, #-16]!
0x4cd1873c   732  bl #+0x44 (addr 0x4cd18780)
0x4cd18740   736  movz x16, #0x18
0x4cd18744   740  sub csp, jssp, #0x10 (16)
0x4cd18748   744  stp fp, lr, [jssp, #-16]!
0x4cd1874c   748  bl #+0x34 (addr 0x4cd18780)
0x4cd18750   752  movz x16, #0x20
0x4cd18754   756  sub csp, jssp, #0x10 (16)
0x4cd18758   760  stp fp, lr, [jssp, #-16]!
0x4cd1875c   764  bl #+0x24 (addr 0x4cd18780)
0x4cd18760   768  movz x16, #0x28
0x4cd18764   772  sub csp, jssp, #0x10 (16)
0x4cd18768   776  stp fp, lr, [jssp, #-16]!
0x4cd1876c   780  bl #+0x14 (addr 0x4cd18780)
0x4cd18770   784  movz x16, #0x30
0x4cd18774   788  bl #+0x1c (addr 0x4cd18790)
0x4cd18778   792  movz x16, #0x38
0x4cd1877c   796  bl #+0x14 (addr 0x4cd18790)
0x4cd18780   800  movz x17, #0xa00000000
0x4cd18784   804  sub csp, jssp, #0x10 (16)
0x4cd18788   808  stp x17, cp, [jssp, #-16]!
0x4cd1878c   812  add fp, jssp, #0x10 (16)
0x4cd18790   816  ldr x17, pc+24 (addr 0x000000004cd187a8)    ;; lazy deoptimization bailout 0
0x4cd18794   820  add x17, x17, x16
0x4cd18798   824  br x17
0x4cd1879c   828  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd187a0   832  d63f03e0       constant
0x4cd187a4   836  d503201f       constant
0x4cd187a8   840  4cb06000       constant
0x4cd187ac   844  00000000       constant


Safepoints (size = 21)
0x4cd186ac   588  000 | x0 | x1 | x5 | x10 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 32)
0x4cd18468  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd18504  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd18520  embedded object  (0x21004519 <the hole>)
0x4cd18570  code target (STUB)  (0x4cd170c0)
0x4cd18624  code target (STUB)  (0x4cd17e80)
0x4cd18680  code target (STUB)  (0x4cd06820)
0x4cd186a4  code target (STUB)  (0x4cd06260)
0x4cd186b0  code target (STUB)  (0x4cd068e0)
0x4cd186c4  constant pool (size 76)
0x4cd18790  runtime entry
0x4cd1879c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 869)
0x4cd18460     0  ldur x5, [x1, #15]
0x4cd18464     4  ldur x6, [x5, #-1]
0x4cd18468     8  ldr x16, pc+616 (addr 0x000000004cd186d0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd1846c    12  cmp x6, x16
0x4cd18470    16  b.ne #+0x2a0 (addr 0x4cd18710)
0x4cd18474    20  ldur w6, [x1, #27]
0x4cd18478    24  mov x7, x0
0x4cd1847c    28  tbnz w7, #0, #+0x2a4 (addr 0x4cd18720)
0x4cd18480    32  tbnz w2, #0, #+0x118 (addr 0x4cd18598)
0x4cd18484    36  asr x9, x2, #32
0x4cd18488    40  cmp w6, w9
0x4cd1848c    44  b.le #+0x10 (addr 0x4cd1849c)
0x4cd18490    48  cmp w9, w6
0x4cd18494    52  b.hs #+0x29c (addr 0x4cd18730)
0x4cd18498    56  b #+0xf4 (addr 0x4cd1858c)
0x4cd1849c    60  ldur w8, [x5, #11]
0x4cd184a0    64  cmp w8, w9
0x4cd184a4    68  b.gt #+0xdc (addr 0x4cd18580)
0x4cd184a8    72  adds w8, w8, #0x400 (1024)
0x4cd184ac    76  b.vs #+0x294 (addr 0x4cd18740)
0x4cd184b0    80  cmp w9, w8
0x4cd184b4    84  b.hs #+0x29c (addr 0x4cd18750)
0x4cd184b8    88  tbnz w2, #0, #+0x128 (addr 0x4cd185e0)
0x4cd184bc    92  asr x10, x2, #32
0x4cd184c0    96  add w8, w9, w10, lsr #1
0x4cd184c4   100  add w8, w8, #0x10 (16)
0x4cd184c8   104  movz w16, #0x95ff
0x4cd184cc   108  cmp w8, w16, lsl #1
0x4cd184d0   112  b.hs #+0x290 (addr 0x4cd18760)
0x4cd184d4   116  lsl x2, x8, #32
0x4cd184d8   120  lsl w3, w8, #3
0x4cd184dc   124  add w3, w3, #0x10 (16)
0x4cd184e0   128  sxtw x3, w3
0x4cd184e4   132  movz x4, #0xd2c0
0x4cd184e8   136  movk x4, #0x166d, lsl #16
0x4cd184ec   140  ldp x10, x16, [x4]
0x4cd184f0   144  adds x8, x10, x3
0x4cd184f4   148  ccmp x8, x16, #nzCv, lo
0x4cd184f8   152  b.hi #+0x168 (addr 0x4cd18660)
0x4cd184fc   156  str x8, [x4]
0x4cd18500   160  orr x10, x10, #0x1
0x4cd18504   164  ldr x3, pc+468 (addr 0x000000004cd186d8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd18508   168  stur x3, [x10, #-1]
0x4cd1850c   172  stur x2, [x10, #7]
0x4cd18510   176  ldur w2, [x10, #11]
0x4cd18514   180  cmp w6, w2
0x4cd18518   184  b.ge #+0x18 (addr 0x4cd18530)
0x4cd1851c   188  sub w2, w2, #0x1 (1)
0x4cd18520   192  ldr x3, pc+448 (addr 0x000000004cd186e0)    ;; object: 0x21004519 <the hole>
0x4cd18524   196  add x4, x10, #0xf (15)
0x4cd18528   200  str x3, [x4, w2, sxtw #3]
0x4cd1852c   204  b #-0x18 (addr 0x4cd18514)
0x4cd18530   208  cmp w6, #0x0 (0)
0x4cd18534   212  b.le #+0x1c (addr 0x4cd18550)
0x4cd18538   216  sub w6, w6, #0x1 (1)
0x4cd1853c   220  add x2, x5, #0xf (15)
0x4cd18540   224  ldr x3, [x2, w6, sxtw #3]
0x4cd18544   228  add x2, x10, #0xf (15)
0x4cd18548   232  str x3, [x2, w6, sxtw #3]
0x4cd1854c   236  b #-0x1c (addr 0x4cd18530)
0x4cd18550   240  mov x2, x10
0x4cd18554   244  stur x2, [x1, #15]
0x4cd18558   248  add x3, x1, #0xf (15)
0x4cd1855c   252  and x2, x1, #0xfffffffffff00000
0x4cd18560   256  ldr x2, [x2, #8]
0x4cd18564   260  tbz w2, #2, #+0x18 (addr 0x4cd1857c)
0x4cd18568   264  sub csp, jssp, #0x8 (8)
0x4cd1856c   268  str lr, [jssp, #-8]!
0x4cd18570   272  ldr x16, pc+376 (addr 0x000000004cd186e8)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd18574   276  blr x16
0x4cd18578   280  ldr lr, [jssp], #8
0x4cd1857c   284  mov x5, x10
0x4cd18580   288  add w2, w9, #0x1 (1)
0x4cd18584   292  lsl x2, x2, #32
0x4cd18588   296  stur x2, [x1, #23]
0x4cd1858c   300  add x1, x5, #0xf (15)
0x4cd18590   304  str x7, [x1, w9, sxtw #3]
0x4cd18594   308  ret
0x4cd18598   312  sub csp, jssp, #0x10 (16)
0x4cd1859c   316  stp fp, lr, [jssp, #-16]!
0x4cd185a0   320  movz fp, #0xa00000000
0x4cd185a4   324  sub csp, jssp, #0x8 (8)
0x4cd185a8   328  str fp, [jssp, #-8]!
0x4cd185ac   332  add fp, jssp, #0x8 (8)
0x4cd185b0   336  ldur x16, [x2, #-1]
0x4cd185b4   340  ldr x17, [x26, #120]
0x4cd185b8   344  cmp x16, x17
0x4cd185bc   348  b.ne #+0x1b4 (addr 0x4cd18770)
0x4cd185c0   352  ldur d29, [x2, #7]
0x4cd185c4   356  fcvtzs w9, d29
0x4cd185c8   360  scvtf d0, w9
0x4cd185cc   364  fcmp d29, d0
0x4cd185d0   368  b.ne #+0x1a0 (addr 0x4cd18770)
0x4cd185d4   372  ldr lr, [jssp, #16]
0x4cd185d8   376  ldp xzr, fp, [jssp], #24
0x4cd185dc   380  b #-0x154 (addr 0x4cd18488)
0x4cd185e0   384  sub csp, jssp, #0x10 (16)
0x4cd185e4   388  stp fp, lr, [jssp, #-16]!
0x4cd185e8   392  movz fp, #0xa00000000
0x4cd185ec   396  sub csp, jssp, #0x8 (8)
0x4cd185f0   400  str fp, [jssp, #-8]!
0x4cd185f4   404  add fp, jssp, #0x8 (8)
0x4cd185f8   408  ldur x16, [x2, #-1]
0x4cd185fc   412  ldr x17, [x26, #120]
0x4cd18600   416  cmp x16, x17
0x4cd18604   420  b.ne #+0x30 (addr 0x4cd18634)
0x4cd18608   424  ldur d30, [x2, #7]
0x4cd1860c   428  fcvtzs x10, d30
0x4cd18610   432  cmp x10, #0x1 (1)
0x4cd18614   436  ccmn x10, #1, #nzcV, vc
0x4cd18618   440  b.vc #+0x18 (addr 0x4cd18630)
0x4cd1861c   444  sub csp, jssp, #0x8 (8)
0x4cd18620   448  str lr, [jssp, #-8]!
0x4cd18624   452  ldr x16, pc+204 (addr 0x000000004cd186f0)    ;; code: STUB, DoubleToIStub, minor: 127618
0x4cd18628   456  blr x16
0x4cd1862c   460  ldr lr, [jssp], #8
0x4cd18630   464  b #+0x24 (addr 0x4cd18654)
0x4cd18634   468  ldp x10, x8, [x26, #64]
0x4cd18638   472  cmp x2, x10
0x4cd1863c   476  cset x10, eq
0x4cd18640   480  ccmp x2, x8, #nZcv, ne
0x4cd18644   484  b.eq #+0x10 (addr 0x4cd18654)
0x4cd18648   488  ldr x16, [x26, #40]
0x4cd1864c   492  cmp x2, x16
0x4cd18650   496  b.ne #+0x128 (addr 0x4cd18778)
0x4cd18654   500  ldr lr, [jssp, #16]
0x4cd18658   504  ldp xzr, fp, [jssp], #24
0x4cd1865c   508  b #-0x19c (addr 0x4cd184c0)
0x4cd18660   512  sub csp, jssp, #0x10 (16)
0x4cd18664   516  stp fp, lr, [jssp, #-16]!
0x4cd18668   520  movz fp, #0xa00000000
0x4cd1866c   524  sub csp, jssp, #0x8 (8)
0x4cd18670   528  str fp, [jssp, #-8]!
0x4cd18674   532  add fp, jssp, #0x8 (8)
0x4cd18678   536  movz x10, #0x0
0x4cd1867c   540  mov x16, lr
0x4cd18680   544  ldr x17, pc+120 (addr 0x000000004cd186f8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd18684   548  blr x17
0x4cd18688   552  lsl x0, x3, #32
0x4cd1868c   556  movz x10, #0x0
0x4cd18690   560  sub csp, jssp, #0x10 (16)
0x4cd18694   564  stp x10, x0, [jssp, #-16]!
0x4cd18698   568  movz x0, #0x2
0x4cd1869c   572  movz x1, #0x5b88
0x4cd186a0   576  movk x1, #0xe2, lsl #16
0x4cd186a4   580  ldr x16, pc+92 (addr 0x000000004cd18700)    ;; code: STUB, CEntryStub, minor: 5
0x4cd186a8   584  blr x16
0x4cd186ac   588  str x0, [jssp, #80]
0x4cd186b0   592  ldr x16, pc+88 (addr 0x000000004cd18708)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd186b4   596  blr x16
0x4cd186b8   600  ldr lr, [jssp, #16]
0x4cd186bc   604  ldp xzr, fp, [jssp], #24
0x4cd186c0   608  b #-0x1bc (addr 0x4cd18504)
0x4cd186c4   612  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0x4cd186c8   616  d63f03e0       constant
0x4cd186cc   620  d503201f       constant
0x4cd186d0   624  2a804259       constant
0x4cd186d4   628  00000000       constant
0x4cd186d8   632  2a804259       constant
0x4cd186dc   636  00000000       constant
0x4cd186e0   640  21004519       constant
0x4cd186e4   644  00000000       constant
0x4cd186e8   648  4cd170c0       constant
0x4cd186ec   652  00000000       constant
0x4cd186f0   656  4cd17e80       constant
0x4cd186f4   660  00000000       constant
0x4cd186f8   664  4cd06820       constant
0x4cd186fc   668  00000000       constant
0x4cd18700   672  4cd06260       constant
0x4cd18704   676  00000000       constant
0x4cd18708   680  4cd068e0       constant
0x4cd1870c   684  00000000       constant
0x4cd18710   688  movz x16, #0x0
0x4cd18714   692  sub csp, jssp, #0x10 (16)
0x4cd18718   696  stp fp, lr, [jssp, #-16]!
0x4cd1871c   700  bl #+0x64 (addr 0x4cd18780)
0x4cd18720   704  movz x16, #0x8
0x4cd18724   708  sub csp, jssp, #0x10 (16)
0x4cd18728   712  stp fp, lr, [jssp, #-16]!
0x4cd1872c   716  bl #+0x54 (addr 0x4cd18780)
0x4cd18730   720  movz x16, #0x10
0x4cd18734   724  sub csp, jssp, #0x10 (16)
0x4cd18738   728  stp fp, lr, [jssp, #-16]!
0x4cd1873c   732  bl #+0x44 (addr 0x4cd18780)
0x4cd18740   736  movz x16, #0x18
0x4cd18744   740  sub csp, jssp, #0x10 (16)
0x4cd18748   744  stp fp, lr, [jssp, #-16]!
0x4cd1874c   748  bl #+0x34 (addr 0x4cd18780)
0x4cd18750   752  movz x16, #0x20
0x4cd18754   756  sub csp, jssp, #0x10 (16)
0x4cd18758   760  stp fp, lr, [jssp, #-16]!
0x4cd1875c   764  bl #+0x24 (addr 0x4cd18780)
0x4cd18760   768  movz x16, #0x28
0x4cd18764   772  sub csp, jssp, #0x10 (16)
0x4cd18768   776  stp fp, lr, [jssp, #-16]!
0x4cd1876c   780  bl #+0x14 (addr 0x4cd18780)
0x4cd18770   784  movz x16, #0x30
0x4cd18774   788  bl #+0x1c (addr 0x4cd18790)
0x4cd18778   792  movz x16, #0x38
0x4cd1877c   796  bl #+0x14 (addr 0x4cd18790)
0x4cd18780   800  movz x17, #0xa00000000
0x4cd18784   804  sub csp, jssp, #0x10 (16)
0x4cd18788   808  stp x17, cp, [jssp, #-16]!
0x4cd1878c   812  add fp, jssp, #0x10 (16)
0x4cd18790   816  ldr x17, pc+24 (addr 0x000000004cd187a8)    ;; lazy deoptimization bailout 0
0x4cd18794   820  add x17, x17, x16
0x4cd18798   824  br x17
0x4cd1879c   828  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd187a0   832  d63f03e0       constant
0x4cd187a4   836  d503201f       constant
0x4cd187a8   840  4cb06000       constant
0x4cd187ac   844  00000000       constant


Safepoints (size = 21)
0x4cd186ac   588  000 | x0 | x1 | x5 | x10 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 32)
0x4cd18468  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd18504  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd18520  embedded object  (0x21004519 <the hole>)
0x4cd18570  code target (STUB)  (0x4cd170c0)
0x4cd18624  code target (STUB)  (0x4cd17e80)
0x4cd18680  code target (STUB)  (0x4cd06820)
0x4cd186a4  code target (STUB)  (0x4cd06260)
0x4cd186b0  code target (STUB)  (0x4cd068e0)
0x4cd186c4  constant pool (size 76)
0x4cd18790  runtime entry
0x4cd1879c  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 280)
0x4cd18840     0  ldur x5, [x1, #15]
0x4cd18844     4  ldur x6, [x5, #-1]
0x4cd18848     8  ldr x16, pc+152 (addr 0x000000004cd188e0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd1884c    12  cmp x6, x16
0x4cd18850    16  b.ne #+0xa0 (addr 0x4cd188f0)
0x4cd18854    20  ldur w6, [x1, #27]
0x4cd18858    24  tbnz w2, #0, #+0x54 (addr 0x4cd188ac)
0x4cd1885c    28  asr x8, x2, #32
0x4cd18860    32  cmp w8, w6
0x4cd18864    36  b.hs #+0x9c (addr 0x4cd18900)
0x4cd18868    40  mov x1, x0
0x4cd1886c    44  add x2, x5, #0xf (15)
0x4cd18870    48  str x1, [x2, w8, sxtw #3]
0x4cd18874    52  add x2, x2, w8, sxtw #3
0x4cd18878    56  tbz w1, #0, #+0x30 (addr 0x4cd188a8)
0x4cd1887c    60  and x1, x1, #0xfffffffffff00000
0x4cd18880    64  ldr x1, [x1, #8]
0x4cd18884    68  tbz w1, #1, #+0x24 (addr 0x4cd188a8)
0x4cd18888    72  and x1, x5, #0xfffffffffff00000
0x4cd1888c    76  ldr x1, [x1, #8]
0x4cd18890    80  tbz w1, #2, #+0x18 (addr 0x4cd188a8)
0x4cd18894    84  sub csp, jssp, #0x8 (8)
0x4cd18898    88  str lr, [jssp, #-8]!
0x4cd1889c    92  ldr x16, pc+76 (addr 0x000000004cd188e8)    ;; code: STUB, RecordWriteStub, minor: 67621
0x4cd188a0    96  blr x16
0x4cd188a4   100  ldr lr, [jssp], #8
0x4cd188a8   104  ret
0x4cd188ac   108  ldur x16, [x2, #-1]
0x4cd188b0   112  ldr x17, [x26, #120]
0x4cd188b4   116  cmp x16, x17
0x4cd188b8   120  b.ne #+0x58 (addr 0x4cd18910)
0x4cd188bc   124  ldur d29, [x2, #7]
0x4cd188c0   128  fcvtzs w8, d29
0x4cd188c4   132  scvtf d0, w8
0x4cd188c8   136  fcmp d29, d0
0x4cd188cc   140  b.ne #+0x44 (addr 0x4cd18910)
0x4cd188d0   144  b #-0x70 (addr 0x4cd18860)
0x4cd188d4   148  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd188d8   152  d63f03e0       constant
0x4cd188dc   156  d503201f       constant
0x4cd188e0   160  2a804259       constant
0x4cd188e4   164  00000000       constant
0x4cd188e8   168  4cd16760       constant
0x4cd188ec   172  00000000       constant
0x4cd188f0   176  movz x16, #0x0
0x4cd188f4   180  sub csp, jssp, #0x10 (16)
0x4cd188f8   184  stp fp, lr, [jssp, #-16]!
0x4cd188fc   188  bl #+0x24 (addr 0x4cd18920)
0x4cd18900   192  movz x16, #0x8
0x4cd18904   196  sub csp, jssp, #0x10 (16)
0x4cd18908   200  stp fp, lr, [jssp, #-16]!
0x4cd1890c   204  bl #+0x14 (addr 0x4cd18920)
0x4cd18910   208  movz x16, #0x10
0x4cd18914   212  sub csp, jssp, #0x10 (16)
0x4cd18918   216  stp fp, lr, [jssp, #-16]!
0x4cd1891c   220  bl #+0x4 (addr 0x4cd18920)
0x4cd18920   224  movz x17, #0xa00000000
0x4cd18924   228  sub csp, jssp, #0x10 (16)
0x4cd18928   232  stp x17, cp, [jssp, #-16]!
0x4cd1892c   236  add fp, jssp, #0x10 (16)
0x4cd18930   240  ldr x17, pc+24 (addr 0x000000004cd18948)    ;; lazy deoptimization bailout 0
0x4cd18934   244  add x17, x17, x16
0x4cd18938   248  br x17
0x4cd1893c   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd18940   256  d63f03e0       constant
0x4cd18944   260  d503201f       constant
0x4cd18948   264  4cb06000       constant
0x4cd1894c   268  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 20)
0x4cd18848  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd1889c  code target (STUB)  (0x4cd16760)
0x4cd188d4  constant pool (size 28)
0x4cd18930  runtime entry
0x4cd1893c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 280)
0x4cd18840     0  ldur x5, [x1, #15]
0x4cd18844     4  ldur x6, [x5, #-1]
0x4cd18848     8  ldr x16, pc+152 (addr 0x000000004cd188e0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd1884c    12  cmp x6, x16
0x4cd18850    16  b.ne #+0xa0 (addr 0x4cd188f0)
0x4cd18854    20  ldur w6, [x1, #27]
0x4cd18858    24  tbnz w2, #0, #+0x54 (addr 0x4cd188ac)
0x4cd1885c    28  asr x8, x2, #32
0x4cd18860    32  cmp w8, w6
0x4cd18864    36  b.hs #+0x9c (addr 0x4cd18900)
0x4cd18868    40  mov x1, x0
0x4cd1886c    44  add x2, x5, #0xf (15)
0x4cd18870    48  str x1, [x2, w8, sxtw #3]
0x4cd18874    52  add x2, x2, w8, sxtw #3
0x4cd18878    56  tbz w1, #0, #+0x30 (addr 0x4cd188a8)
0x4cd1887c    60  and x1, x1, #0xfffffffffff00000
0x4cd18880    64  ldr x1, [x1, #8]
0x4cd18884    68  tbz w1, #1, #+0x24 (addr 0x4cd188a8)
0x4cd18888    72  and x1, x5, #0xfffffffffff00000
0x4cd1888c    76  ldr x1, [x1, #8]
0x4cd18890    80  tbz w1, #2, #+0x18 (addr 0x4cd188a8)
0x4cd18894    84  sub csp, jssp, #0x8 (8)
0x4cd18898    88  str lr, [jssp, #-8]!
0x4cd1889c    92  ldr x16, pc+76 (addr 0x000000004cd188e8)    ;; code: STUB, RecordWriteStub, minor: 67621
0x4cd188a0    96  blr x16
0x4cd188a4   100  ldr lr, [jssp], #8
0x4cd188a8   104  ret
0x4cd188ac   108  ldur x16, [x2, #-1]
0x4cd188b0   112  ldr x17, [x26, #120]
0x4cd188b4   116  cmp x16, x17
0x4cd188b8   120  b.ne #+0x58 (addr 0x4cd18910)
0x4cd188bc   124  ldur d29, [x2, #7]
0x4cd188c0   128  fcvtzs w8, d29
0x4cd188c4   132  scvtf d0, w8
0x4cd188c8   136  fcmp d29, d0
0x4cd188cc   140  b.ne #+0x44 (addr 0x4cd18910)
0x4cd188d0   144  b #-0x70 (addr 0x4cd18860)
0x4cd188d4   148  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd188d8   152  d63f03e0       constant
0x4cd188dc   156  d503201f       constant
0x4cd188e0   160  2a804259       constant
0x4cd188e4   164  00000000       constant
0x4cd188e8   168  4cd16760       constant
0x4cd188ec   172  00000000       constant
0x4cd188f0   176  movz x16, #0x0
0x4cd188f4   180  sub csp, jssp, #0x10 (16)
0x4cd188f8   184  stp fp, lr, [jssp, #-16]!
0x4cd188fc   188  bl #+0x24 (addr 0x4cd18920)
0x4cd18900   192  movz x16, #0x8
0x4cd18904   196  sub csp, jssp, #0x10 (16)
0x4cd18908   200  stp fp, lr, [jssp, #-16]!
0x4cd1890c   204  bl #+0x14 (addr 0x4cd18920)
0x4cd18910   208  movz x16, #0x10
0x4cd18914   212  sub csp, jssp, #0x10 (16)
0x4cd18918   216  stp fp, lr, [jssp, #-16]!
0x4cd1891c   220  bl #+0x4 (addr 0x4cd18920)
0x4cd18920   224  movz x17, #0xa00000000
0x4cd18924   228  sub csp, jssp, #0x10 (16)
0x4cd18928   232  stp x17, cp, [jssp, #-16]!
0x4cd1892c   236  add fp, jssp, #0x10 (16)
0x4cd18930   240  ldr x17, pc+24 (addr 0x000000004cd18948)    ;; lazy deoptimization bailout 0
0x4cd18934   244  add x17, x17, x16
0x4cd18938   248  br x17
0x4cd1893c   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd18940   256  d63f03e0       constant
0x4cd18944   260  d503201f       constant
0x4cd18948   264  4cb06000       constant
0x4cd1894c   268  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 20)
0x4cd18848  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd1889c  code target (STUB)  (0x4cd16760)
0x4cd188d4  constant pool (size 28)
0x4cd18930  runtime entry
0x4cd1893c  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 909)
0x4cd189c0     0  ldur x5, [x1, #15]
0x4cd189c4     4  ldur x6, [x5, #-1]
0x4cd189c8     8  ldr x16, pc+664 (addr 0x000000004cd18c60)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd189cc    12  cmp x6, x16
0x4cd189d0    16  b.ne #+0x2d8 (addr 0x4cd18ca8)
0x4cd189d4    20  ldur w6, [x1, #27]
0x4cd189d8    24  tbnz w2, #0, #+0x150 (addr 0x4cd18b28)
0x4cd189dc    28  asr x8, x2, #32
0x4cd189e0    32  cmp w6, w8
0x4cd189e4    36  b.eq #+0x10 (addr 0x4cd189f4)
0x4cd189e8    40  cmp w8, w6
0x4cd189ec    44  b.hs #+0x2cc (addr 0x4cd18cb8)
0x4cd189f0    48  b #+0xf4 (addr 0x4cd18ae4)
0x4cd189f4    52  ldur w7, [x5, #11]
0x4cd189f8    56  cmp w7, w8
0x4cd189fc    60  b.gt #+0xdc (addr 0x4cd18ad8)
0x4cd18a00    64  adds w7, w7, #0x400 (1024)
0x4cd18a04    68  b.vs #+0x2c4 (addr 0x4cd18cc8)
0x4cd18a08    72  cmp w8, w7
0x4cd18a0c    76  b.hs #+0x2cc (addr 0x4cd18cd8)
0x4cd18a10    80  tbnz w2, #0, #+0x160 (addr 0x4cd18b70)
0x4cd18a14    84  asr x9, x2, #32
0x4cd18a18    88  add w7, w8, w9, lsr #1
0x4cd18a1c    92  add w7, w7, #0x10 (16)
0x4cd18a20    96  movz w16, #0x95ff
0x4cd18a24   100  cmp w7, w16, lsl #1
0x4cd18a28   104  b.hs #+0x2c0 (addr 0x4cd18ce8)
0x4cd18a2c   108  lsl x2, x7, #32
0x4cd18a30   112  lsl w3, w7, #3
0x4cd18a34   116  add w3, w3, #0x10 (16)
0x4cd18a38   120  sxtw x3, w3
0x4cd18a3c   124  movz x4, #0xd2c0
0x4cd18a40   128  movk x4, #0x166d, lsl #16
0x4cd18a44   132  ldp x9, x16, [x4]
0x4cd18a48   136  adds x7, x9, x3
0x4cd18a4c   140  ccmp x7, x16, #nzCv, lo
0x4cd18a50   144  b.hi #+0x1a0 (addr 0x4cd18bf0)
0x4cd18a54   148  str x7, [x4]
0x4cd18a58   152  orr x9, x9, #0x1
0x4cd18a5c   156  ldr x3, pc+524 (addr 0x000000004cd18c68)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd18a60   160  stur x3, [x9, #-1]
0x4cd18a64   164  stur x2, [x9, #7]
0x4cd18a68   168  ldur w2, [x9, #11]
0x4cd18a6c   172  cmp w6, w2
0x4cd18a70   176  b.ge #+0x18 (addr 0x4cd18a88)
0x4cd18a74   180  sub w2, w2, #0x1 (1)
0x4cd18a78   184  ldr x3, pc+504 (addr 0x000000004cd18c70)    ;; object: 0x21004519 <the hole>
0x4cd18a7c   188  add x4, x9, #0xf (15)
0x4cd18a80   192  str x3, [x4, w2, sxtw #3]
0x4cd18a84   196  b #-0x18 (addr 0x4cd18a6c)
0x4cd18a88   200  cmp w6, #0x0 (0)
0x4cd18a8c   204  b.le #+0x1c (addr 0x4cd18aa8)
0x4cd18a90   208  sub w6, w6, #0x1 (1)
0x4cd18a94   212  add x2, x5, #0xf (15)
0x4cd18a98   216  ldr x3, [x2, w6, sxtw #3]
0x4cd18a9c   220  add x2, x9, #0xf (15)
0x4cd18aa0   224  str x3, [x2, w6, sxtw #3]
0x4cd18aa4   228  b #-0x1c (addr 0x4cd18a88)
0x4cd18aa8   232  mov x2, x9
0x4cd18aac   236  stur x2, [x1, #15]
0x4cd18ab0   240  add x3, x1, #0xf (15)
0x4cd18ab4   244  and x2, x1, #0xfffffffffff00000
0x4cd18ab8   248  ldr x2, [x2, #8]
0x4cd18abc   252  tbz w2, #2, #+0x18 (addr 0x4cd18ad4)
0x4cd18ac0   256  sub csp, jssp, #0x8 (8)
0x4cd18ac4   260  str lr, [jssp, #-8]!
0x4cd18ac8   264  ldr x16, pc+432 (addr 0x000000004cd18c78)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd18acc   268  blr x16
0x4cd18ad0   272  ldr lr, [jssp], #8
0x4cd18ad4   276  mov x5, x9
0x4cd18ad8   280  add w2, w8, #0x1 (1)
0x4cd18adc   284  lsl x2, x2, #32
0x4cd18ae0   288  stur x2, [x1, #23]
0x4cd18ae4   292  mov x1, x0
0x4cd18ae8   296  add x2, x5, #0xf (15)
0x4cd18aec   300  str x1, [x2, w8, sxtw #3]
0x4cd18af0   304  add x2, x2, w8, sxtw #3
0x4cd18af4   308  tbz w1, #0, #+0x30 (addr 0x4cd18b24)
0x4cd18af8   312  and x1, x1, #0xfffffffffff00000
0x4cd18afc   316  ldr x1, [x1, #8]
0x4cd18b00   320  tbz w1, #1, #+0x24 (addr 0x4cd18b24)
0x4cd18b04   324  and x1, x5, #0xfffffffffff00000
0x4cd18b08   328  ldr x1, [x1, #8]
0x4cd18b0c   332  tbz w1, #2, #+0x18 (addr 0x4cd18b24)
0x4cd18b10   336  sub csp, jssp, #0x8 (8)
0x4cd18b14   340  str lr, [jssp, #-8]!
0x4cd18b18   344  ldr x16, pc+360 (addr 0x000000004cd18c80)    ;; code: STUB, RecordWriteStub, minor: 67621
0x4cd18b1c   348  blr x16
0x4cd18b20   352  ldr lr, [jssp], #8
0x4cd18b24   356  ret
0x4cd18b28   360  sub csp, jssp, #0x10 (16)
0x4cd18b2c   364  stp fp, lr, [jssp, #-16]!
0x4cd18b30   368  movz fp, #0xa00000000
0x4cd18b34   372  sub csp, jssp, #0x8 (8)
0x4cd18b38   376  str fp, [jssp, #-8]!
0x4cd18b3c   380  add fp, jssp, #0x8 (8)
0x4cd18b40   384  ldur x16, [x2, #-1]
0x4cd18b44   388  ldr x17, [x26, #120]
0x4cd18b48   392  cmp x16, x17
0x4cd18b4c   396  b.ne #+0x1ac (addr 0x4cd18cf8)
0x4cd18b50   400  ldur d29, [x2, #7]
0x4cd18b54   404  fcvtzs w8, d29
0x4cd18b58   408  scvtf d0, w8
0x4cd18b5c   412  fcmp d29, d0
0x4cd18b60   416  b.ne #+0x198 (addr 0x4cd18cf8)
0x4cd18b64   420  ldr lr, [jssp, #16]
0x4cd18b68   424  ldp xzr, fp, [jssp], #24
0x4cd18b6c   428  b #-0x18c (addr 0x4cd189e0)
0x4cd18b70   432  sub csp, jssp, #0x10 (16)
0x4cd18b74   436  stp fp, lr, [jssp, #-16]!
0x4cd18b78   440  movz fp, #0xa00000000
0x4cd18b7c   444  sub csp, jssp, #0x8 (8)
0x4cd18b80   448  str fp, [jssp, #-8]!
0x4cd18b84   452  add fp, jssp, #0x8 (8)
0x4cd18b88   456  ldur x16, [x2, #-1]
0x4cd18b8c   460  ldr x17, [x26, #120]
0x4cd18b90   464  cmp x16, x17
0x4cd18b94   468  b.ne #+0x30 (addr 0x4cd18bc4)
0x4cd18b98   472  ldur d30, [x2, #7]
0x4cd18b9c   476  fcvtzs x9, d30
0x4cd18ba0   480  cmp x9, #0x1 (1)
0x4cd18ba4   484  ccmn x9, #1, #nzcV, vc
0x4cd18ba8   488  b.vc #+0x18 (addr 0x4cd18bc0)
0x4cd18bac   492  sub csp, jssp, #0x8 (8)
0x4cd18bb0   496  str lr, [jssp, #-8]!
0x4cd18bb4   500  ldr x16, pc+212 (addr 0x000000004cd18c88)    ;; code: STUB, DoubleToIStub, minor: 127554
0x4cd18bb8   504  blr x16
0x4cd18bbc   508  ldr lr, [jssp], #8
0x4cd18bc0   512  b #+0x24 (addr 0x4cd18be4)
0x4cd18bc4   516  ldp x9, x7, [x26, #64]
0x4cd18bc8   520  cmp x2, x9
0x4cd18bcc   524  cset x9, eq
0x4cd18bd0   528  ccmp x2, x7, #nZcv, ne
0x4cd18bd4   532  b.eq #+0x10 (addr 0x4cd18be4)
0x4cd18bd8   536  ldr x16, [x26, #40]
0x4cd18bdc   540  cmp x2, x16
0x4cd18be0   544  b.ne #+0x120 (addr 0x4cd18d00)
0x4cd18be4   548  ldr lr, [jssp, #16]
0x4cd18be8   552  ldp xzr, fp, [jssp], #24
0x4cd18bec   556  b #-0x1d4 (addr 0x4cd18a18)
0x4cd18bf0   560  sub csp, jssp, #0x10 (16)
0x4cd18bf4   564  stp fp, lr, [jssp, #-16]!
0x4cd18bf8   568  movz fp, #0xa00000000
0x4cd18bfc   572  sub csp, jssp, #0x8 (8)
0x4cd18c00   576  str fp, [jssp, #-8]!
0x4cd18c04   580  add fp, jssp, #0x8 (8)
0x4cd18c08   584  movz x9, #0x0
0x4cd18c0c   588  mov x16, lr
0x4cd18c10   592  ldr x17, pc+128 (addr 0x000000004cd18c90)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd18c14   596  blr x17
0x4cd18c18   600  lsl x0, x3, #32
0x4cd18c1c   604  movz x10, #0x0
0x4cd18c20   608  sub csp, jssp, #0x10 (16)
0x4cd18c24   612  stp x10, x0, [jssp, #-16]!
0x4cd18c28   616  movz x0, #0x2
0x4cd18c2c   620  movz x1, #0x5b88
0x4cd18c30   624  movk x1, #0xe2, lsl #16
0x4cd18c34   628  ldr x16, pc+100 (addr 0x000000004cd18c98)    ;; code: STUB, CEntryStub, minor: 5
0x4cd18c38   632  blr x16
0x4cd18c3c   636  str x0, [jssp, #72]
0x4cd18c40   640  ldr x16, pc+96 (addr 0x000000004cd18ca0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd18c44   644  blr x16
0x4cd18c48   648  ldr lr, [jssp, #16]
0x4cd18c4c   652  ldp xzr, fp, [jssp], #24
0x4cd18c50   656  b #-0x1f4 (addr 0x4cd18a5c)
0x4cd18c54   660  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0x4cd18c58   664  d63f03e0       constant
0x4cd18c5c   668  d503201f       constant
0x4cd18c60   672  2a804259       constant
0x4cd18c64   676  00000000       constant
0x4cd18c68   680  2a804259       constant
0x4cd18c6c   684  00000000       constant
0x4cd18c70   688  21004519       constant
0x4cd18c74   692  00000000       constant
0x4cd18c78   696  4cd170c0       constant
0x4cd18c7c   700  00000000       constant
0x4cd18c80   704  4cd16760       constant
0x4cd18c84   708  00000000       constant
0x4cd18c88   712  4cd178a0       constant
0x4cd18c8c   716  00000000       constant
0x4cd18c90   720  4cd06820       constant
0x4cd18c94   724  00000000       constant
0x4cd18c98   728  4cd06260       constant
0x4cd18c9c   732  00000000       constant
0x4cd18ca0   736  4cd068e0       constant
0x4cd18ca4   740  00000000       constant
0x4cd18ca8   744  movz x16, #0x0
0x4cd18cac   748  sub csp, jssp, #0x10 (16)
0x4cd18cb0   752  stp fp, lr, [jssp, #-16]!
0x4cd18cb4   756  bl #+0x54 (addr 0x4cd18d08)
0x4cd18cb8   760  movz x16, #0x8
0x4cd18cbc   764  sub csp, jssp, #0x10 (16)
0x4cd18cc0   768  stp fp, lr, [jssp, #-16]!
0x4cd18cc4   772  bl #+0x44 (addr 0x4cd18d08)
0x4cd18cc8   776  movz x16, #0x10
0x4cd18ccc   780  sub csp, jssp, #0x10 (16)
0x4cd18cd0   784  stp fp, lr, [jssp, #-16]!
0x4cd18cd4   788  bl #+0x34 (addr 0x4cd18d08)
0x4cd18cd8   792  movz x16, #0x18
0x4cd18cdc   796  sub csp, jssp, #0x10 (16)
0x4cd18ce0   800  stp fp, lr, [jssp, #-16]!
0x4cd18ce4   804  bl #+0x24 (addr 0x4cd18d08)
0x4cd18ce8   808  movz x16, #0x20
0x4cd18cec   812  sub csp, jssp, #0x10 (16)
0x4cd18cf0   816  stp fp, lr, [jssp, #-16]!
0x4cd18cf4   820  bl #+0x14 (addr 0x4cd18d08)
0x4cd18cf8   824  movz x16, #0x28
0x4cd18cfc   828  bl #+0x1c (addr 0x4cd18d18)
0x4cd18d00   832  movz x16, #0x30
0x4cd18d04   836  bl #+0x14 (addr 0x4cd18d18)
0x4cd18d08   840  movz x17, #0xa00000000
0x4cd18d0c   844  sub csp, jssp, #0x10 (16)
0x4cd18d10   848  stp x17, cp, [jssp, #-16]!
0x4cd18d14   852  add fp, jssp, #0x10 (16)
0x4cd18d18   856  ldr x17, pc+24 (addr 0x000000004cd18d30)    ;; lazy deoptimization bailout 0
0x4cd18d1c   860  add x17, x17, x16
0x4cd18d20   864  br x17
0x4cd18d24   868  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd18d28   872  d63f03e0       constant
0x4cd18d2c   876  d503201f       constant
0x4cd18d30   880  4cb06000       constant
0x4cd18d34   884  00000000       constant


Safepoints (size = 21)
0x4cd18c3c   636  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 35)
0x4cd189c8  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd18a5c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd18a78  embedded object  (0x21004519 <the hole>)
0x4cd18ac8  code target (STUB)  (0x4cd170c0)
0x4cd18b18  code target (STUB)  (0x4cd16760)
0x4cd18bb4  code target (STUB)  (0x4cd178a0)
0x4cd18c10  code target (STUB)  (0x4cd06820)
0x4cd18c34  code target (STUB)  (0x4cd06260)
0x4cd18c40  code target (STUB)  (0x4cd068e0)
0x4cd18c54  constant pool (size 84)
0x4cd18d18  runtime entry
0x4cd18d24  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 909)
0x4cd189c0     0  ldur x5, [x1, #15]
0x4cd189c4     4  ldur x6, [x5, #-1]
0x4cd189c8     8  ldr x16, pc+664 (addr 0x000000004cd18c60)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd189cc    12  cmp x6, x16
0x4cd189d0    16  b.ne #+0x2d8 (addr 0x4cd18ca8)
0x4cd189d4    20  ldur w6, [x1, #27]
0x4cd189d8    24  tbnz w2, #0, #+0x150 (addr 0x4cd18b28)
0x4cd189dc    28  asr x8, x2, #32
0x4cd189e0    32  cmp w6, w8
0x4cd189e4    36  b.eq #+0x10 (addr 0x4cd189f4)
0x4cd189e8    40  cmp w8, w6
0x4cd189ec    44  b.hs #+0x2cc (addr 0x4cd18cb8)
0x4cd189f0    48  b #+0xf4 (addr 0x4cd18ae4)
0x4cd189f4    52  ldur w7, [x5, #11]
0x4cd189f8    56  cmp w7, w8
0x4cd189fc    60  b.gt #+0xdc (addr 0x4cd18ad8)
0x4cd18a00    64  adds w7, w7, #0x400 (1024)
0x4cd18a04    68  b.vs #+0x2c4 (addr 0x4cd18cc8)
0x4cd18a08    72  cmp w8, w7
0x4cd18a0c    76  b.hs #+0x2cc (addr 0x4cd18cd8)
0x4cd18a10    80  tbnz w2, #0, #+0x160 (addr 0x4cd18b70)
0x4cd18a14    84  asr x9, x2, #32
0x4cd18a18    88  add w7, w8, w9, lsr #1
0x4cd18a1c    92  add w7, w7, #0x10 (16)
0x4cd18a20    96  movz w16, #0x95ff
0x4cd18a24   100  cmp w7, w16, lsl #1
0x4cd18a28   104  b.hs #+0x2c0 (addr 0x4cd18ce8)
0x4cd18a2c   108  lsl x2, x7, #32
0x4cd18a30   112  lsl w3, w7, #3
0x4cd18a34   116  add w3, w3, #0x10 (16)
0x4cd18a38   120  sxtw x3, w3
0x4cd18a3c   124  movz x4, #0xd2c0
0x4cd18a40   128  movk x4, #0x166d, lsl #16
0x4cd18a44   132  ldp x9, x16, [x4]
0x4cd18a48   136  adds x7, x9, x3
0x4cd18a4c   140  ccmp x7, x16, #nzCv, lo
0x4cd18a50   144  b.hi #+0x1a0 (addr 0x4cd18bf0)
0x4cd18a54   148  str x7, [x4]
0x4cd18a58   152  orr x9, x9, #0x1
0x4cd18a5c   156  ldr x3, pc+524 (addr 0x000000004cd18c68)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd18a60   160  stur x3, [x9, #-1]
0x4cd18a64   164  stur x2, [x9, #7]
0x4cd18a68   168  ldur w2, [x9, #11]
0x4cd18a6c   172  cmp w6, w2
0x4cd18a70   176  b.ge #+0x18 (addr 0x4cd18a88)
0x4cd18a74   180  sub w2, w2, #0x1 (1)
0x4cd18a78   184  ldr x3, pc+504 (addr 0x000000004cd18c70)    ;; object: 0x21004519 <the hole>
0x4cd18a7c   188  add x4, x9, #0xf (15)
0x4cd18a80   192  str x3, [x4, w2, sxtw #3]
0x4cd18a84   196  b #-0x18 (addr 0x4cd18a6c)
0x4cd18a88   200  cmp w6, #0x0 (0)
0x4cd18a8c   204  b.le #+0x1c (addr 0x4cd18aa8)
0x4cd18a90   208  sub w6, w6, #0x1 (1)
0x4cd18a94   212  add x2, x5, #0xf (15)
0x4cd18a98   216  ldr x3, [x2, w6, sxtw #3]
0x4cd18a9c   220  add x2, x9, #0xf (15)
0x4cd18aa0   224  str x3, [x2, w6, sxtw #3]
0x4cd18aa4   228  b #-0x1c (addr 0x4cd18a88)
0x4cd18aa8   232  mov x2, x9
0x4cd18aac   236  stur x2, [x1, #15]
0x4cd18ab0   240  add x3, x1, #0xf (15)
0x4cd18ab4   244  and x2, x1, #0xfffffffffff00000
0x4cd18ab8   248  ldr x2, [x2, #8]
0x4cd18abc   252  tbz w2, #2, #+0x18 (addr 0x4cd18ad4)
0x4cd18ac0   256  sub csp, jssp, #0x8 (8)
0x4cd18ac4   260  str lr, [jssp, #-8]!
0x4cd18ac8   264  ldr x16, pc+432 (addr 0x000000004cd18c78)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd18acc   268  blr x16
0x4cd18ad0   272  ldr lr, [jssp], #8
0x4cd18ad4   276  mov x5, x9
0x4cd18ad8   280  add w2, w8, #0x1 (1)
0x4cd18adc   284  lsl x2, x2, #32
0x4cd18ae0   288  stur x2, [x1, #23]
0x4cd18ae4   292  mov x1, x0
0x4cd18ae8   296  add x2, x5, #0xf (15)
0x4cd18aec   300  str x1, [x2, w8, sxtw #3]
0x4cd18af0   304  add x2, x2, w8, sxtw #3
0x4cd18af4   308  tbz w1, #0, #+0x30 (addr 0x4cd18b24)
0x4cd18af8   312  and x1, x1, #0xfffffffffff00000
0x4cd18afc   316  ldr x1, [x1, #8]
0x4cd18b00   320  tbz w1, #1, #+0x24 (addr 0x4cd18b24)
0x4cd18b04   324  and x1, x5, #0xfffffffffff00000
0x4cd18b08   328  ldr x1, [x1, #8]
0x4cd18b0c   332  tbz w1, #2, #+0x18 (addr 0x4cd18b24)
0x4cd18b10   336  sub csp, jssp, #0x8 (8)
0x4cd18b14   340  str lr, [jssp, #-8]!
0x4cd18b18   344  ldr x16, pc+360 (addr 0x000000004cd18c80)    ;; code: STUB, RecordWriteStub, minor: 67621
0x4cd18b1c   348  blr x16
0x4cd18b20   352  ldr lr, [jssp], #8
0x4cd18b24   356  ret
0x4cd18b28   360  sub csp, jssp, #0x10 (16)
0x4cd18b2c   364  stp fp, lr, [jssp, #-16]!
0x4cd18b30   368  movz fp, #0xa00000000
0x4cd18b34   372  sub csp, jssp, #0x8 (8)
0x4cd18b38   376  str fp, [jssp, #-8]!
0x4cd18b3c   380  add fp, jssp, #0x8 (8)
0x4cd18b40   384  ldur x16, [x2, #-1]
0x4cd18b44   388  ldr x17, [x26, #120]
0x4cd18b48   392  cmp x16, x17
0x4cd18b4c   396  b.ne #+0x1ac (addr 0x4cd18cf8)
0x4cd18b50   400  ldur d29, [x2, #7]
0x4cd18b54   404  fcvtzs w8, d29
0x4cd18b58   408  scvtf d0, w8
0x4cd18b5c   412  fcmp d29, d0
0x4cd18b60   416  b.ne #+0x198 (addr 0x4cd18cf8)
0x4cd18b64   420  ldr lr, [jssp, #16]
0x4cd18b68   424  ldp xzr, fp, [jssp], #24
0x4cd18b6c   428  b #-0x18c (addr 0x4cd189e0)
0x4cd18b70   432  sub csp, jssp, #0x10 (16)
0x4cd18b74   436  stp fp, lr, [jssp, #-16]!
0x4cd18b78   440  movz fp, #0xa00000000
0x4cd18b7c   444  sub csp, jssp, #0x8 (8)
0x4cd18b80   448  str fp, [jssp, #-8]!
0x4cd18b84   452  add fp, jssp, #0x8 (8)
0x4cd18b88   456  ldur x16, [x2, #-1]
0x4cd18b8c   460  ldr x17, [x26, #120]
0x4cd18b90   464  cmp x16, x17
0x4cd18b94   468  b.ne #+0x30 (addr 0x4cd18bc4)
0x4cd18b98   472  ldur d30, [x2, #7]
0x4cd18b9c   476  fcvtzs x9, d30
0x4cd18ba0   480  cmp x9, #0x1 (1)
0x4cd18ba4   484  ccmn x9, #1, #nzcV, vc
0x4cd18ba8   488  b.vc #+0x18 (addr 0x4cd18bc0)
0x4cd18bac   492  sub csp, jssp, #0x8 (8)
0x4cd18bb0   496  str lr, [jssp, #-8]!
0x4cd18bb4   500  ldr x16, pc+212 (addr 0x000000004cd18c88)    ;; code: STUB, DoubleToIStub, minor: 127554
0x4cd18bb8   504  blr x16
0x4cd18bbc   508  ldr lr, [jssp], #8
0x4cd18bc0   512  b #+0x24 (addr 0x4cd18be4)
0x4cd18bc4   516  ldp x9, x7, [x26, #64]
0x4cd18bc8   520  cmp x2, x9
0x4cd18bcc   524  cset x9, eq
0x4cd18bd0   528  ccmp x2, x7, #nZcv, ne
0x4cd18bd4   532  b.eq #+0x10 (addr 0x4cd18be4)
0x4cd18bd8   536  ldr x16, [x26, #40]
0x4cd18bdc   540  cmp x2, x16
0x4cd18be0   544  b.ne #+0x120 (addr 0x4cd18d00)
0x4cd18be4   548  ldr lr, [jssp, #16]
0x4cd18be8   552  ldp xzr, fp, [jssp], #24
0x4cd18bec   556  b #-0x1d4 (addr 0x4cd18a18)
0x4cd18bf0   560  sub csp, jssp, #0x10 (16)
0x4cd18bf4   564  stp fp, lr, [jssp, #-16]!
0x4cd18bf8   568  movz fp, #0xa00000000
0x4cd18bfc   572  sub csp, jssp, #0x8 (8)
0x4cd18c00   576  str fp, [jssp, #-8]!
0x4cd18c04   580  add fp, jssp, #0x8 (8)
0x4cd18c08   584  movz x9, #0x0
0x4cd18c0c   588  mov x16, lr
0x4cd18c10   592  ldr x17, pc+128 (addr 0x000000004cd18c90)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd18c14   596  blr x17
0x4cd18c18   600  lsl x0, x3, #32
0x4cd18c1c   604  movz x10, #0x0
0x4cd18c20   608  sub csp, jssp, #0x10 (16)
0x4cd18c24   612  stp x10, x0, [jssp, #-16]!
0x4cd18c28   616  movz x0, #0x2
0x4cd18c2c   620  movz x1, #0x5b88
0x4cd18c30   624  movk x1, #0xe2, lsl #16
0x4cd18c34   628  ldr x16, pc+100 (addr 0x000000004cd18c98)    ;; code: STUB, CEntryStub, minor: 5
0x4cd18c38   632  blr x16
0x4cd18c3c   636  str x0, [jssp, #72]
0x4cd18c40   640  ldr x16, pc+96 (addr 0x000000004cd18ca0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd18c44   644  blr x16
0x4cd18c48   648  ldr lr, [jssp, #16]
0x4cd18c4c   652  ldp xzr, fp, [jssp], #24
0x4cd18c50   656  b #-0x1f4 (addr 0x4cd18a5c)
0x4cd18c54   660  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0x4cd18c58   664  d63f03e0       constant
0x4cd18c5c   668  d503201f       constant
0x4cd18c60   672  2a804259       constant
0x4cd18c64   676  00000000       constant
0x4cd18c68   680  2a804259       constant
0x4cd18c6c   684  00000000       constant
0x4cd18c70   688  21004519       constant
0x4cd18c74   692  00000000       constant
0x4cd18c78   696  4cd170c0       constant
0x4cd18c7c   700  00000000       constant
0x4cd18c80   704  4cd16760       constant
0x4cd18c84   708  00000000       constant
0x4cd18c88   712  4cd178a0       constant
0x4cd18c8c   716  00000000       constant
0x4cd18c90   720  4cd06820       constant
0x4cd18c94   724  00000000       constant
0x4cd18c98   728  4cd06260       constant
0x4cd18c9c   732  00000000       constant
0x4cd18ca0   736  4cd068e0       constant
0x4cd18ca4   740  00000000       constant
0x4cd18ca8   744  movz x16, #0x0
0x4cd18cac   748  sub csp, jssp, #0x10 (16)
0x4cd18cb0   752  stp fp, lr, [jssp, #-16]!
0x4cd18cb4   756  bl #+0x54 (addr 0x4cd18d08)
0x4cd18cb8   760  movz x16, #0x8
0x4cd18cbc   764  sub csp, jssp, #0x10 (16)
0x4cd18cc0   768  stp fp, lr, [jssp, #-16]!
0x4cd18cc4   772  bl #+0x44 (addr 0x4cd18d08)
0x4cd18cc8   776  movz x16, #0x10
0x4cd18ccc   780  sub csp, jssp, #0x10 (16)
0x4cd18cd0   784  stp fp, lr, [jssp, #-16]!
0x4cd18cd4   788  bl #+0x34 (addr 0x4cd18d08)
0x4cd18cd8   792  movz x16, #0x18
0x4cd18cdc   796  sub csp, jssp, #0x10 (16)
0x4cd18ce0   800  stp fp, lr, [jssp, #-16]!
0x4cd18ce4   804  bl #+0x24 (addr 0x4cd18d08)
0x4cd18ce8   808  movz x16, #0x20
0x4cd18cec   812  sub csp, jssp, #0x10 (16)
0x4cd18cf0   816  stp fp, lr, [jssp, #-16]!
0x4cd18cf4   820  bl #+0x14 (addr 0x4cd18d08)
0x4cd18cf8   824  movz x16, #0x28
0x4cd18cfc   828  bl #+0x1c (addr 0x4cd18d18)
0x4cd18d00   832  movz x16, #0x30
0x4cd18d04   836  bl #+0x14 (addr 0x4cd18d18)
0x4cd18d08   840  movz x17, #0xa00000000
0x4cd18d0c   844  sub csp, jssp, #0x10 (16)
0x4cd18d10   848  stp x17, cp, [jssp, #-16]!
0x4cd18d14   852  add fp, jssp, #0x10 (16)
0x4cd18d18   856  ldr x17, pc+24 (addr 0x000000004cd18d30)    ;; lazy deoptimization bailout 0
0x4cd18d1c   860  add x17, x17, x16
0x4cd18d20   864  br x17
0x4cd18d24   868  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd18d28   872  d63f03e0       constant
0x4cd18d2c   876  d503201f       constant
0x4cd18d30   880  4cb06000       constant
0x4cd18d34   884  00000000       constant


Safepoints (size = 21)
0x4cd18c3c   636  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 35)
0x4cd189c8  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd18a5c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd18a78  embedded object  (0x21004519 <the hole>)
0x4cd18ac8  code target (STUB)  (0x4cd170c0)
0x4cd18b18  code target (STUB)  (0x4cd16760)
0x4cd18bb4  code target (STUB)  (0x4cd178a0)
0x4cd18c10  code target (STUB)  (0x4cd06820)
0x4cd18c34  code target (STUB)  (0x4cd06260)
0x4cd18c40  code target (STUB)  (0x4cd068e0)
0x4cd18c54  constant pool (size 84)
0x4cd18d18  runtime entry
0x4cd18d24  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 280)
0x4cd18dc0     0  ldur x5, [x1, #15]
0x4cd18dc4     4  ldur x6, [x5, #-1]
0x4cd18dc8     8  ldr x16, pc+152 (addr 0x000000004cd18e60)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd18dcc    12  cmp x6, x16
0x4cd18dd0    16  b.ne #+0xa0 (addr 0x4cd18e70)
0x4cd18dd4    20  ldur w6, [x1, #27]
0x4cd18dd8    24  tbnz w2, #0, #+0x54 (addr 0x4cd18e2c)
0x4cd18ddc    28  asr x8, x2, #32
0x4cd18de0    32  cmp w8, w6
0x4cd18de4    36  b.hs #+0x9c (addr 0x4cd18e80)
0x4cd18de8    40  mov x1, x0
0x4cd18dec    44  add x2, x5, #0xf (15)
0x4cd18df0    48  str x1, [x2, w8, sxtw #3]
0x4cd18df4    52  add x2, x2, w8, sxtw #3
0x4cd18df8    56  tbz w1, #0, #+0x30 (addr 0x4cd18e28)
0x4cd18dfc    60  and x1, x1, #0xfffffffffff00000
0x4cd18e00    64  ldr x1, [x1, #8]
0x4cd18e04    68  tbz w1, #1, #+0x24 (addr 0x4cd18e28)
0x4cd18e08    72  and x1, x5, #0xfffffffffff00000
0x4cd18e0c    76  ldr x1, [x1, #8]
0x4cd18e10    80  tbz w1, #2, #+0x18 (addr 0x4cd18e28)
0x4cd18e14    84  sub csp, jssp, #0x8 (8)
0x4cd18e18    88  str lr, [jssp, #-8]!
0x4cd18e1c    92  ldr x16, pc+76 (addr 0x000000004cd18e68)    ;; code: STUB, RecordWriteStub, minor: 67621
0x4cd18e20    96  blr x16
0x4cd18e24   100  ldr lr, [jssp], #8
0x4cd18e28   104  ret
0x4cd18e2c   108  ldur x16, [x2, #-1]
0x4cd18e30   112  ldr x17, [x26, #120]
0x4cd18e34   116  cmp x16, x17
0x4cd18e38   120  b.ne #+0x58 (addr 0x4cd18e90)
0x4cd18e3c   124  ldur d29, [x2, #7]
0x4cd18e40   128  fcvtzs w8, d29
0x4cd18e44   132  scvtf d0, w8
0x4cd18e48   136  fcmp d29, d0
0x4cd18e4c   140  b.ne #+0x44 (addr 0x4cd18e90)
0x4cd18e50   144  b #-0x70 (addr 0x4cd18de0)
0x4cd18e54   148  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd18e58   152  d63f03e0       constant
0x4cd18e5c   156  d503201f       constant
0x4cd18e60   160  2a804259       constant
0x4cd18e64   164  00000000       constant
0x4cd18e68   168  4cd16760       constant
0x4cd18e6c   172  00000000       constant
0x4cd18e70   176  movz x16, #0x0
0x4cd18e74   180  sub csp, jssp, #0x10 (16)
0x4cd18e78   184  stp fp, lr, [jssp, #-16]!
0x4cd18e7c   188  bl #+0x24 (addr 0x4cd18ea0)
0x4cd18e80   192  movz x16, #0x8
0x4cd18e84   196  sub csp, jssp, #0x10 (16)
0x4cd18e88   200  stp fp, lr, [jssp, #-16]!
0x4cd18e8c   204  bl #+0x14 (addr 0x4cd18ea0)
0x4cd18e90   208  movz x16, #0x10
0x4cd18e94   212  sub csp, jssp, #0x10 (16)
0x4cd18e98   216  stp fp, lr, [jssp, #-16]!
0x4cd18e9c   220  bl #+0x4 (addr 0x4cd18ea0)
0x4cd18ea0   224  movz x17, #0xa00000000
0x4cd18ea4   228  sub csp, jssp, #0x10 (16)
0x4cd18ea8   232  stp x17, cp, [jssp, #-16]!
0x4cd18eac   236  add fp, jssp, #0x10 (16)
0x4cd18eb0   240  ldr x17, pc+24 (addr 0x000000004cd18ec8)    ;; lazy deoptimization bailout 0
0x4cd18eb4   244  add x17, x17, x16
0x4cd18eb8   248  br x17
0x4cd18ebc   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd18ec0   256  d63f03e0       constant
0x4cd18ec4   260  d503201f       constant
0x4cd18ec8   264  4cb06000       constant
0x4cd18ecc   268  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 20)
0x4cd18dc8  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd18e1c  code target (STUB)  (0x4cd16760)
0x4cd18e54  constant pool (size 28)
0x4cd18eb0  runtime entry
0x4cd18ebc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 280)
0x4cd18dc0     0  ldur x5, [x1, #15]
0x4cd18dc4     4  ldur x6, [x5, #-1]
0x4cd18dc8     8  ldr x16, pc+152 (addr 0x000000004cd18e60)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd18dcc    12  cmp x6, x16
0x4cd18dd0    16  b.ne #+0xa0 (addr 0x4cd18e70)
0x4cd18dd4    20  ldur w6, [x1, #27]
0x4cd18dd8    24  tbnz w2, #0, #+0x54 (addr 0x4cd18e2c)
0x4cd18ddc    28  asr x8, x2, #32
0x4cd18de0    32  cmp w8, w6
0x4cd18de4    36  b.hs #+0x9c (addr 0x4cd18e80)
0x4cd18de8    40  mov x1, x0
0x4cd18dec    44  add x2, x5, #0xf (15)
0x4cd18df0    48  str x1, [x2, w8, sxtw #3]
0x4cd18df4    52  add x2, x2, w8, sxtw #3
0x4cd18df8    56  tbz w1, #0, #+0x30 (addr 0x4cd18e28)
0x4cd18dfc    60  and x1, x1, #0xfffffffffff00000
0x4cd18e00    64  ldr x1, [x1, #8]
0x4cd18e04    68  tbz w1, #1, #+0x24 (addr 0x4cd18e28)
0x4cd18e08    72  and x1, x5, #0xfffffffffff00000
0x4cd18e0c    76  ldr x1, [x1, #8]
0x4cd18e10    80  tbz w1, #2, #+0x18 (addr 0x4cd18e28)
0x4cd18e14    84  sub csp, jssp, #0x8 (8)
0x4cd18e18    88  str lr, [jssp, #-8]!
0x4cd18e1c    92  ldr x16, pc+76 (addr 0x000000004cd18e68)    ;; code: STUB, RecordWriteStub, minor: 67621
0x4cd18e20    96  blr x16
0x4cd18e24   100  ldr lr, [jssp], #8
0x4cd18e28   104  ret
0x4cd18e2c   108  ldur x16, [x2, #-1]
0x4cd18e30   112  ldr x17, [x26, #120]
0x4cd18e34   116  cmp x16, x17
0x4cd18e38   120  b.ne #+0x58 (addr 0x4cd18e90)
0x4cd18e3c   124  ldur d29, [x2, #7]
0x4cd18e40   128  fcvtzs w8, d29
0x4cd18e44   132  scvtf d0, w8
0x4cd18e48   136  fcmp d29, d0
0x4cd18e4c   140  b.ne #+0x44 (addr 0x4cd18e90)
0x4cd18e50   144  b #-0x70 (addr 0x4cd18de0)
0x4cd18e54   148  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd18e58   152  d63f03e0       constant
0x4cd18e5c   156  d503201f       constant
0x4cd18e60   160  2a804259       constant
0x4cd18e64   164  00000000       constant
0x4cd18e68   168  4cd16760       constant
0x4cd18e6c   172  00000000       constant
0x4cd18e70   176  movz x16, #0x0
0x4cd18e74   180  sub csp, jssp, #0x10 (16)
0x4cd18e78   184  stp fp, lr, [jssp, #-16]!
0x4cd18e7c   188  bl #+0x24 (addr 0x4cd18ea0)
0x4cd18e80   192  movz x16, #0x8
0x4cd18e84   196  sub csp, jssp, #0x10 (16)
0x4cd18e88   200  stp fp, lr, [jssp, #-16]!
0x4cd18e8c   204  bl #+0x14 (addr 0x4cd18ea0)
0x4cd18e90   208  movz x16, #0x10
0x4cd18e94   212  sub csp, jssp, #0x10 (16)
0x4cd18e98   216  stp fp, lr, [jssp, #-16]!
0x4cd18e9c   220  bl #+0x4 (addr 0x4cd18ea0)
0x4cd18ea0   224  movz x17, #0xa00000000
0x4cd18ea4   228  sub csp, jssp, #0x10 (16)
0x4cd18ea8   232  stp x17, cp, [jssp, #-16]!
0x4cd18eac   236  add fp, jssp, #0x10 (16)
0x4cd18eb0   240  ldr x17, pc+24 (addr 0x000000004cd18ec8)    ;; lazy deoptimization bailout 0
0x4cd18eb4   244  add x17, x17, x16
0x4cd18eb8   248  br x17
0x4cd18ebc   252  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd18ec0   256  d63f03e0       constant
0x4cd18ec4   260  d503201f       constant
0x4cd18ec8   264  4cb06000       constant
0x4cd18ecc   268  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 20)
0x4cd18dc8  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd18e1c  code target (STUB)  (0x4cd16760)
0x4cd18e54  constant pool (size 28)
0x4cd18eb0  runtime entry
0x4cd18ebc  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 909)
0x4cd18f40     0  ldur x5, [x1, #15]
0x4cd18f44     4  ldur x6, [x5, #-1]
0x4cd18f48     8  ldr x16, pc+664 (addr 0x000000004cd191e0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd18f4c    12  cmp x6, x16
0x4cd18f50    16  b.ne #+0x2d8 (addr 0x4cd19228)
0x4cd18f54    20  ldur w6, [x1, #27]
0x4cd18f58    24  tbnz w2, #0, #+0x150 (addr 0x4cd190a8)
0x4cd18f5c    28  asr x8, x2, #32
0x4cd18f60    32  cmp w6, w8
0x4cd18f64    36  b.le #+0x10 (addr 0x4cd18f74)
0x4cd18f68    40  cmp w8, w6
0x4cd18f6c    44  b.hs #+0x2cc (addr 0x4cd19238)
0x4cd18f70    48  b #+0xf4 (addr 0x4cd19064)
0x4cd18f74    52  ldur w7, [x5, #11]
0x4cd18f78    56  cmp w7, w8
0x4cd18f7c    60  b.gt #+0xdc (addr 0x4cd19058)
0x4cd18f80    64  adds w7, w7, #0x400 (1024)
0x4cd18f84    68  b.vs #+0x2c4 (addr 0x4cd19248)
0x4cd18f88    72  cmp w8, w7
0x4cd18f8c    76  b.hs #+0x2cc (addr 0x4cd19258)
0x4cd18f90    80  tbnz w2, #0, #+0x160 (addr 0x4cd190f0)
0x4cd18f94    84  asr x9, x2, #32
0x4cd18f98    88  add w7, w8, w9, lsr #1
0x4cd18f9c    92  add w7, w7, #0x10 (16)
0x4cd18fa0    96  movz w16, #0x95ff
0x4cd18fa4   100  cmp w7, w16, lsl #1
0x4cd18fa8   104  b.hs #+0x2c0 (addr 0x4cd19268)
0x4cd18fac   108  lsl x2, x7, #32
0x4cd18fb0   112  lsl w3, w7, #3
0x4cd18fb4   116  add w3, w3, #0x10 (16)
0x4cd18fb8   120  sxtw x3, w3
0x4cd18fbc   124  movz x4, #0xd2c0
0x4cd18fc0   128  movk x4, #0x166d, lsl #16
0x4cd18fc4   132  ldp x9, x16, [x4]
0x4cd18fc8   136  adds x7, x9, x3
0x4cd18fcc   140  ccmp x7, x16, #nzCv, lo
0x4cd18fd0   144  b.hi #+0x1a0 (addr 0x4cd19170)
0x4cd18fd4   148  str x7, [x4]
0x4cd18fd8   152  orr x9, x9, #0x1
0x4cd18fdc   156  ldr x3, pc+524 (addr 0x000000004cd191e8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd18fe0   160  stur x3, [x9, #-1]
0x4cd18fe4   164  stur x2, [x9, #7]
0x4cd18fe8   168  ldur w2, [x9, #11]
0x4cd18fec   172  cmp w6, w2
0x4cd18ff0   176  b.ge #+0x18 (addr 0x4cd19008)
0x4cd18ff4   180  sub w2, w2, #0x1 (1)
0x4cd18ff8   184  ldr x3, pc+504 (addr 0x000000004cd191f0)    ;; object: 0x21004519 <the hole>
0x4cd18ffc   188  add x4, x9, #0xf (15)
0x4cd19000   192  str x3, [x4, w2, sxtw #3]
0x4cd19004   196  b #-0x18 (addr 0x4cd18fec)
0x4cd19008   200  cmp w6, #0x0 (0)
0x4cd1900c   204  b.le #+0x1c (addr 0x4cd19028)
0x4cd19010   208  sub w6, w6, #0x1 (1)
0x4cd19014   212  add x2, x5, #0xf (15)
0x4cd19018   216  ldr x3, [x2, w6, sxtw #3]
0x4cd1901c   220  add x2, x9, #0xf (15)
0x4cd19020   224  str x3, [x2, w6, sxtw #3]
0x4cd19024   228  b #-0x1c (addr 0x4cd19008)
0x4cd19028   232  mov x2, x9
0x4cd1902c   236  stur x2, [x1, #15]
0x4cd19030   240  add x3, x1, #0xf (15)
0x4cd19034   244  and x2, x1, #0xfffffffffff00000
0x4cd19038   248  ldr x2, [x2, #8]
0x4cd1903c   252  tbz w2, #2, #+0x18 (addr 0x4cd19054)
0x4cd19040   256  sub csp, jssp, #0x8 (8)
0x4cd19044   260  str lr, [jssp, #-8]!
0x4cd19048   264  ldr x16, pc+432 (addr 0x000000004cd191f8)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd1904c   268  blr x16
0x4cd19050   272  ldr lr, [jssp], #8
0x4cd19054   276  mov x5, x9
0x4cd19058   280  add w2, w8, #0x1 (1)
0x4cd1905c   284  lsl x2, x2, #32
0x4cd19060   288  stur x2, [x1, #23]
0x4cd19064   292  mov x1, x0
0x4cd19068   296  add x2, x5, #0xf (15)
0x4cd1906c   300  str x1, [x2, w8, sxtw #3]
0x4cd19070   304  add x2, x2, w8, sxtw #3
0x4cd19074   308  tbz w1, #0, #+0x30 (addr 0x4cd190a4)
0x4cd19078   312  and x1, x1, #0xfffffffffff00000
0x4cd1907c   316  ldr x1, [x1, #8]
0x4cd19080   320  tbz w1, #1, #+0x24 (addr 0x4cd190a4)
0x4cd19084   324  and x1, x5, #0xfffffffffff00000
0x4cd19088   328  ldr x1, [x1, #8]
0x4cd1908c   332  tbz w1, #2, #+0x18 (addr 0x4cd190a4)
0x4cd19090   336  sub csp, jssp, #0x8 (8)
0x4cd19094   340  str lr, [jssp, #-8]!
0x4cd19098   344  ldr x16, pc+360 (addr 0x000000004cd19200)    ;; code: STUB, RecordWriteStub, minor: 67621
0x4cd1909c   348  blr x16
0x4cd190a0   352  ldr lr, [jssp], #8
0x4cd190a4   356  ret
0x4cd190a8   360  sub csp, jssp, #0x10 (16)
0x4cd190ac   364  stp fp, lr, [jssp, #-16]!
0x4cd190b0   368  movz fp, #0xa00000000
0x4cd190b4   372  sub csp, jssp, #0x8 (8)
0x4cd190b8   376  str fp, [jssp, #-8]!
0x4cd190bc   380  add fp, jssp, #0x8 (8)
0x4cd190c0   384  ldur x16, [x2, #-1]
0x4cd190c4   388  ldr x17, [x26, #120]
0x4cd190c8   392  cmp x16, x17
0x4cd190cc   396  b.ne #+0x1ac (addr 0x4cd19278)
0x4cd190d0   400  ldur d29, [x2, #7]
0x4cd190d4   404  fcvtzs w8, d29
0x4cd190d8   408  scvtf d0, w8
0x4cd190dc   412  fcmp d29, d0
0x4cd190e0   416  b.ne #+0x198 (addr 0x4cd19278)
0x4cd190e4   420  ldr lr, [jssp, #16]
0x4cd190e8   424  ldp xzr, fp, [jssp], #24
0x4cd190ec   428  b #-0x18c (addr 0x4cd18f60)
0x4cd190f0   432  sub csp, jssp, #0x10 (16)
0x4cd190f4   436  stp fp, lr, [jssp, #-16]!
0x4cd190f8   440  movz fp, #0xa00000000
0x4cd190fc   444  sub csp, jssp, #0x8 (8)
0x4cd19100   448  str fp, [jssp, #-8]!
0x4cd19104   452  add fp, jssp, #0x8 (8)
0x4cd19108   456  ldur x16, [x2, #-1]
0x4cd1910c   460  ldr x17, [x26, #120]
0x4cd19110   464  cmp x16, x17
0x4cd19114   468  b.ne #+0x30 (addr 0x4cd19144)
0x4cd19118   472  ldur d30, [x2, #7]
0x4cd1911c   476  fcvtzs x9, d30
0x4cd19120   480  cmp x9, #0x1 (1)
0x4cd19124   484  ccmn x9, #1, #nzcV, vc
0x4cd19128   488  b.vc #+0x18 (addr 0x4cd19140)
0x4cd1912c   492  sub csp, jssp, #0x8 (8)
0x4cd19130   496  str lr, [jssp, #-8]!
0x4cd19134   500  ldr x16, pc+212 (addr 0x000000004cd19208)    ;; code: STUB, DoubleToIStub, minor: 127554
0x4cd19138   504  blr x16
0x4cd1913c   508  ldr lr, [jssp], #8
0x4cd19140   512  b #+0x24 (addr 0x4cd19164)
0x4cd19144   516  ldp x9, x7, [x26, #64]
0x4cd19148   520  cmp x2, x9
0x4cd1914c   524  cset x9, eq
0x4cd19150   528  ccmp x2, x7, #nZcv, ne
0x4cd19154   532  b.eq #+0x10 (addr 0x4cd19164)
0x4cd19158   536  ldr x16, [x26, #40]
0x4cd1915c   540  cmp x2, x16
0x4cd19160   544  b.ne #+0x120 (addr 0x4cd19280)
0x4cd19164   548  ldr lr, [jssp, #16]
0x4cd19168   552  ldp xzr, fp, [jssp], #24
0x4cd1916c   556  b #-0x1d4 (addr 0x4cd18f98)
0x4cd19170   560  sub csp, jssp, #0x10 (16)
0x4cd19174   564  stp fp, lr, [jssp, #-16]!
0x4cd19178   568  movz fp, #0xa00000000
0x4cd1917c   572  sub csp, jssp, #0x8 (8)
0x4cd19180   576  str fp, [jssp, #-8]!
0x4cd19184   580  add fp, jssp, #0x8 (8)
0x4cd19188   584  movz x9, #0x0
0x4cd1918c   588  mov x16, lr
0x4cd19190   592  ldr x17, pc+128 (addr 0x000000004cd19210)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd19194   596  blr x17
0x4cd19198   600  lsl x0, x3, #32
0x4cd1919c   604  movz x10, #0x0
0x4cd191a0   608  sub csp, jssp, #0x10 (16)
0x4cd191a4   612  stp x10, x0, [jssp, #-16]!
0x4cd191a8   616  movz x0, #0x2
0x4cd191ac   620  movz x1, #0x5b88
0x4cd191b0   624  movk x1, #0xe2, lsl #16
0x4cd191b4   628  ldr x16, pc+100 (addr 0x000000004cd19218)    ;; code: STUB, CEntryStub, minor: 5
0x4cd191b8   632  blr x16
0x4cd191bc   636  str x0, [jssp, #72]
0x4cd191c0   640  ldr x16, pc+96 (addr 0x000000004cd19220)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd191c4   644  blr x16
0x4cd191c8   648  ldr lr, [jssp, #16]
0x4cd191cc   652  ldp xzr, fp, [jssp], #24
0x4cd191d0   656  b #-0x1f4 (addr 0x4cd18fdc)
0x4cd191d4   660  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0x4cd191d8   664  d63f03e0       constant
0x4cd191dc   668  d503201f       constant
0x4cd191e0   672  2a804259       constant
0x4cd191e4   676  00000000       constant
0x4cd191e8   680  2a804259       constant
0x4cd191ec   684  00000000       constant
0x4cd191f0   688  21004519       constant
0x4cd191f4   692  00000000       constant
0x4cd191f8   696  4cd170c0       constant
0x4cd191fc   700  00000000       constant
0x4cd19200   704  4cd16760       constant
0x4cd19204   708  00000000       constant
0x4cd19208   712  4cd178a0       constant
0x4cd1920c   716  00000000       constant
0x4cd19210   720  4cd06820       constant
0x4cd19214   724  00000000       constant
0x4cd19218   728  4cd06260       constant
0x4cd1921c   732  00000000       constant
0x4cd19220   736  4cd068e0       constant
0x4cd19224   740  00000000       constant
0x4cd19228   744  movz x16, #0x0
0x4cd1922c   748  sub csp, jssp, #0x10 (16)
0x4cd19230   752  stp fp, lr, [jssp, #-16]!
0x4cd19234   756  bl #+0x54 (addr 0x4cd19288)
0x4cd19238   760  movz x16, #0x8
0x4cd1923c   764  sub csp, jssp, #0x10 (16)
0x4cd19240   768  stp fp, lr, [jssp, #-16]!
0x4cd19244   772  bl #+0x44 (addr 0x4cd19288)
0x4cd19248   776  movz x16, #0x10
0x4cd1924c   780  sub csp, jssp, #0x10 (16)
0x4cd19250   784  stp fp, lr, [jssp, #-16]!
0x4cd19254   788  bl #+0x34 (addr 0x4cd19288)
0x4cd19258   792  movz x16, #0x18
0x4cd1925c   796  sub csp, jssp, #0x10 (16)
0x4cd19260   800  stp fp, lr, [jssp, #-16]!
0x4cd19264   804  bl #+0x24 (addr 0x4cd19288)
0x4cd19268   808  movz x16, #0x20
0x4cd1926c   812  sub csp, jssp, #0x10 (16)
0x4cd19270   816  stp fp, lr, [jssp, #-16]!
0x4cd19274   820  bl #+0x14 (addr 0x4cd19288)
0x4cd19278   824  movz x16, #0x28
0x4cd1927c   828  bl #+0x1c (addr 0x4cd19298)
0x4cd19280   832  movz x16, #0x30
0x4cd19284   836  bl #+0x14 (addr 0x4cd19298)
0x4cd19288   840  movz x17, #0xa00000000
0x4cd1928c   844  sub csp, jssp, #0x10 (16)
0x4cd19290   848  stp x17, cp, [jssp, #-16]!
0x4cd19294   852  add fp, jssp, #0x10 (16)
0x4cd19298   856  ldr x17, pc+24 (addr 0x000000004cd192b0)    ;; lazy deoptimization bailout 0
0x4cd1929c   860  add x17, x17, x16
0x4cd192a0   864  br x17
0x4cd192a4   868  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd192a8   872  d63f03e0       constant
0x4cd192ac   876  d503201f       constant
0x4cd192b0   880  4cb06000       constant
0x4cd192b4   884  00000000       constant


Safepoints (size = 21)
0x4cd191bc   636  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 35)
0x4cd18f48  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd18fdc  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd18ff8  embedded object  (0x21004519 <the hole>)
0x4cd19048  code target (STUB)  (0x4cd170c0)
0x4cd19098  code target (STUB)  (0x4cd16760)
0x4cd19134  code target (STUB)  (0x4cd178a0)
0x4cd19190  code target (STUB)  (0x4cd06820)
0x4cd191b4  code target (STUB)  (0x4cd06260)
0x4cd191c0  code target (STUB)  (0x4cd068e0)
0x4cd191d4  constant pool (size 84)
0x4cd19298  runtime entry
0x4cd192a4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 909)
0x4cd18f40     0  ldur x5, [x1, #15]
0x4cd18f44     4  ldur x6, [x5, #-1]
0x4cd18f48     8  ldr x16, pc+664 (addr 0x000000004cd191e0)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd18f4c    12  cmp x6, x16
0x4cd18f50    16  b.ne #+0x2d8 (addr 0x4cd19228)
0x4cd18f54    20  ldur w6, [x1, #27]
0x4cd18f58    24  tbnz w2, #0, #+0x150 (addr 0x4cd190a8)
0x4cd18f5c    28  asr x8, x2, #32
0x4cd18f60    32  cmp w6, w8
0x4cd18f64    36  b.le #+0x10 (addr 0x4cd18f74)
0x4cd18f68    40  cmp w8, w6
0x4cd18f6c    44  b.hs #+0x2cc (addr 0x4cd19238)
0x4cd18f70    48  b #+0xf4 (addr 0x4cd19064)
0x4cd18f74    52  ldur w7, [x5, #11]
0x4cd18f78    56  cmp w7, w8
0x4cd18f7c    60  b.gt #+0xdc (addr 0x4cd19058)
0x4cd18f80    64  adds w7, w7, #0x400 (1024)
0x4cd18f84    68  b.vs #+0x2c4 (addr 0x4cd19248)
0x4cd18f88    72  cmp w8, w7
0x4cd18f8c    76  b.hs #+0x2cc (addr 0x4cd19258)
0x4cd18f90    80  tbnz w2, #0, #+0x160 (addr 0x4cd190f0)
0x4cd18f94    84  asr x9, x2, #32
0x4cd18f98    88  add w7, w8, w9, lsr #1
0x4cd18f9c    92  add w7, w7, #0x10 (16)
0x4cd18fa0    96  movz w16, #0x95ff
0x4cd18fa4   100  cmp w7, w16, lsl #1
0x4cd18fa8   104  b.hs #+0x2c0 (addr 0x4cd19268)
0x4cd18fac   108  lsl x2, x7, #32
0x4cd18fb0   112  lsl w3, w7, #3
0x4cd18fb4   116  add w3, w3, #0x10 (16)
0x4cd18fb8   120  sxtw x3, w3
0x4cd18fbc   124  movz x4, #0xd2c0
0x4cd18fc0   128  movk x4, #0x166d, lsl #16
0x4cd18fc4   132  ldp x9, x16, [x4]
0x4cd18fc8   136  adds x7, x9, x3
0x4cd18fcc   140  ccmp x7, x16, #nzCv, lo
0x4cd18fd0   144  b.hi #+0x1a0 (addr 0x4cd19170)
0x4cd18fd4   148  str x7, [x4]
0x4cd18fd8   152  orr x9, x9, #0x1
0x4cd18fdc   156  ldr x3, pc+524 (addr 0x000000004cd191e8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd18fe0   160  stur x3, [x9, #-1]
0x4cd18fe4   164  stur x2, [x9, #7]
0x4cd18fe8   168  ldur w2, [x9, #11]
0x4cd18fec   172  cmp w6, w2
0x4cd18ff0   176  b.ge #+0x18 (addr 0x4cd19008)
0x4cd18ff4   180  sub w2, w2, #0x1 (1)
0x4cd18ff8   184  ldr x3, pc+504 (addr 0x000000004cd191f0)    ;; object: 0x21004519 <the hole>
0x4cd18ffc   188  add x4, x9, #0xf (15)
0x4cd19000   192  str x3, [x4, w2, sxtw #3]
0x4cd19004   196  b #-0x18 (addr 0x4cd18fec)
0x4cd19008   200  cmp w6, #0x0 (0)
0x4cd1900c   204  b.le #+0x1c (addr 0x4cd19028)
0x4cd19010   208  sub w6, w6, #0x1 (1)
0x4cd19014   212  add x2, x5, #0xf (15)
0x4cd19018   216  ldr x3, [x2, w6, sxtw #3]
0x4cd1901c   220  add x2, x9, #0xf (15)
0x4cd19020   224  str x3, [x2, w6, sxtw #3]
0x4cd19024   228  b #-0x1c (addr 0x4cd19008)
0x4cd19028   232  mov x2, x9
0x4cd1902c   236  stur x2, [x1, #15]
0x4cd19030   240  add x3, x1, #0xf (15)
0x4cd19034   244  and x2, x1, #0xfffffffffff00000
0x4cd19038   248  ldr x2, [x2, #8]
0x4cd1903c   252  tbz w2, #2, #+0x18 (addr 0x4cd19054)
0x4cd19040   256  sub csp, jssp, #0x8 (8)
0x4cd19044   260  str lr, [jssp, #-8]!
0x4cd19048   264  ldr x16, pc+432 (addr 0x000000004cd191f8)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd1904c   268  blr x16
0x4cd19050   272  ldr lr, [jssp], #8
0x4cd19054   276  mov x5, x9
0x4cd19058   280  add w2, w8, #0x1 (1)
0x4cd1905c   284  lsl x2, x2, #32
0x4cd19060   288  stur x2, [x1, #23]
0x4cd19064   292  mov x1, x0
0x4cd19068   296  add x2, x5, #0xf (15)
0x4cd1906c   300  str x1, [x2, w8, sxtw #3]
0x4cd19070   304  add x2, x2, w8, sxtw #3
0x4cd19074   308  tbz w1, #0, #+0x30 (addr 0x4cd190a4)
0x4cd19078   312  and x1, x1, #0xfffffffffff00000
0x4cd1907c   316  ldr x1, [x1, #8]
0x4cd19080   320  tbz w1, #1, #+0x24 (addr 0x4cd190a4)
0x4cd19084   324  and x1, x5, #0xfffffffffff00000
0x4cd19088   328  ldr x1, [x1, #8]
0x4cd1908c   332  tbz w1, #2, #+0x18 (addr 0x4cd190a4)
0x4cd19090   336  sub csp, jssp, #0x8 (8)
0x4cd19094   340  str lr, [jssp, #-8]!
0x4cd19098   344  ldr x16, pc+360 (addr 0x000000004cd19200)    ;; code: STUB, RecordWriteStub, minor: 67621
0x4cd1909c   348  blr x16
0x4cd190a0   352  ldr lr, [jssp], #8
0x4cd190a4   356  ret
0x4cd190a8   360  sub csp, jssp, #0x10 (16)
0x4cd190ac   364  stp fp, lr, [jssp, #-16]!
0x4cd190b0   368  movz fp, #0xa00000000
0x4cd190b4   372  sub csp, jssp, #0x8 (8)
0x4cd190b8   376  str fp, [jssp, #-8]!
0x4cd190bc   380  add fp, jssp, #0x8 (8)
0x4cd190c0   384  ldur x16, [x2, #-1]
0x4cd190c4   388  ldr x17, [x26, #120]
0x4cd190c8   392  cmp x16, x17
0x4cd190cc   396  b.ne #+0x1ac (addr 0x4cd19278)
0x4cd190d0   400  ldur d29, [x2, #7]
0x4cd190d4   404  fcvtzs w8, d29
0x4cd190d8   408  scvtf d0, w8
0x4cd190dc   412  fcmp d29, d0
0x4cd190e0   416  b.ne #+0x198 (addr 0x4cd19278)
0x4cd190e4   420  ldr lr, [jssp, #16]
0x4cd190e8   424  ldp xzr, fp, [jssp], #24
0x4cd190ec   428  b #-0x18c (addr 0x4cd18f60)
0x4cd190f0   432  sub csp, jssp, #0x10 (16)
0x4cd190f4   436  stp fp, lr, [jssp, #-16]!
0x4cd190f8   440  movz fp, #0xa00000000
0x4cd190fc   444  sub csp, jssp, #0x8 (8)
0x4cd19100   448  str fp, [jssp, #-8]!
0x4cd19104   452  add fp, jssp, #0x8 (8)
0x4cd19108   456  ldur x16, [x2, #-1]
0x4cd1910c   460  ldr x17, [x26, #120]
0x4cd19110   464  cmp x16, x17
0x4cd19114   468  b.ne #+0x30 (addr 0x4cd19144)
0x4cd19118   472  ldur d30, [x2, #7]
0x4cd1911c   476  fcvtzs x9, d30
0x4cd19120   480  cmp x9, #0x1 (1)
0x4cd19124   484  ccmn x9, #1, #nzcV, vc
0x4cd19128   488  b.vc #+0x18 (addr 0x4cd19140)
0x4cd1912c   492  sub csp, jssp, #0x8 (8)
0x4cd19130   496  str lr, [jssp, #-8]!
0x4cd19134   500  ldr x16, pc+212 (addr 0x000000004cd19208)    ;; code: STUB, DoubleToIStub, minor: 127554
0x4cd19138   504  blr x16
0x4cd1913c   508  ldr lr, [jssp], #8
0x4cd19140   512  b #+0x24 (addr 0x4cd19164)
0x4cd19144   516  ldp x9, x7, [x26, #64]
0x4cd19148   520  cmp x2, x9
0x4cd1914c   524  cset x9, eq
0x4cd19150   528  ccmp x2, x7, #nZcv, ne
0x4cd19154   532  b.eq #+0x10 (addr 0x4cd19164)
0x4cd19158   536  ldr x16, [x26, #40]
0x4cd1915c   540  cmp x2, x16
0x4cd19160   544  b.ne #+0x120 (addr 0x4cd19280)
0x4cd19164   548  ldr lr, [jssp, #16]
0x4cd19168   552  ldp xzr, fp, [jssp], #24
0x4cd1916c   556  b #-0x1d4 (addr 0x4cd18f98)
0x4cd19170   560  sub csp, jssp, #0x10 (16)
0x4cd19174   564  stp fp, lr, [jssp, #-16]!
0x4cd19178   568  movz fp, #0xa00000000
0x4cd1917c   572  sub csp, jssp, #0x8 (8)
0x4cd19180   576  str fp, [jssp, #-8]!
0x4cd19184   580  add fp, jssp, #0x8 (8)
0x4cd19188   584  movz x9, #0x0
0x4cd1918c   588  mov x16, lr
0x4cd19190   592  ldr x17, pc+128 (addr 0x000000004cd19210)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd19194   596  blr x17
0x4cd19198   600  lsl x0, x3, #32
0x4cd1919c   604  movz x10, #0x0
0x4cd191a0   608  sub csp, jssp, #0x10 (16)
0x4cd191a4   612  stp x10, x0, [jssp, #-16]!
0x4cd191a8   616  movz x0, #0x2
0x4cd191ac   620  movz x1, #0x5b88
0x4cd191b0   624  movk x1, #0xe2, lsl #16
0x4cd191b4   628  ldr x16, pc+100 (addr 0x000000004cd19218)    ;; code: STUB, CEntryStub, minor: 5
0x4cd191b8   632  blr x16
0x4cd191bc   636  str x0, [jssp, #72]
0x4cd191c0   640  ldr x16, pc+96 (addr 0x000000004cd19220)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd191c4   644  blr x16
0x4cd191c8   648  ldr lr, [jssp, #16]
0x4cd191cc   652  ldp xzr, fp, [jssp], #24
0x4cd191d0   656  b #-0x1f4 (addr 0x4cd18fdc)
0x4cd191d4   660  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0x4cd191d8   664  d63f03e0       constant
0x4cd191dc   668  d503201f       constant
0x4cd191e0   672  2a804259       constant
0x4cd191e4   676  00000000       constant
0x4cd191e8   680  2a804259       constant
0x4cd191ec   684  00000000       constant
0x4cd191f0   688  21004519       constant
0x4cd191f4   692  00000000       constant
0x4cd191f8   696  4cd170c0       constant
0x4cd191fc   700  00000000       constant
0x4cd19200   704  4cd16760       constant
0x4cd19204   708  00000000       constant
0x4cd19208   712  4cd178a0       constant
0x4cd1920c   716  00000000       constant
0x4cd19210   720  4cd06820       constant
0x4cd19214   724  00000000       constant
0x4cd19218   728  4cd06260       constant
0x4cd1921c   732  00000000       constant
0x4cd19220   736  4cd068e0       constant
0x4cd19224   740  00000000       constant
0x4cd19228   744  movz x16, #0x0
0x4cd1922c   748  sub csp, jssp, #0x10 (16)
0x4cd19230   752  stp fp, lr, [jssp, #-16]!
0x4cd19234   756  bl #+0x54 (addr 0x4cd19288)
0x4cd19238   760  movz x16, #0x8
0x4cd1923c   764  sub csp, jssp, #0x10 (16)
0x4cd19240   768  stp fp, lr, [jssp, #-16]!
0x4cd19244   772  bl #+0x44 (addr 0x4cd19288)
0x4cd19248   776  movz x16, #0x10
0x4cd1924c   780  sub csp, jssp, #0x10 (16)
0x4cd19250   784  stp fp, lr, [jssp, #-16]!
0x4cd19254   788  bl #+0x34 (addr 0x4cd19288)
0x4cd19258   792  movz x16, #0x18
0x4cd1925c   796  sub csp, jssp, #0x10 (16)
0x4cd19260   800  stp fp, lr, [jssp, #-16]!
0x4cd19264   804  bl #+0x24 (addr 0x4cd19288)
0x4cd19268   808  movz x16, #0x20
0x4cd1926c   812  sub csp, jssp, #0x10 (16)
0x4cd19270   816  stp fp, lr, [jssp, #-16]!
0x4cd19274   820  bl #+0x14 (addr 0x4cd19288)
0x4cd19278   824  movz x16, #0x28
0x4cd1927c   828  bl #+0x1c (addr 0x4cd19298)
0x4cd19280   832  movz x16, #0x30
0x4cd19284   836  bl #+0x14 (addr 0x4cd19298)
0x4cd19288   840  movz x17, #0xa00000000
0x4cd1928c   844  sub csp, jssp, #0x10 (16)
0x4cd19290   848  stp x17, cp, [jssp, #-16]!
0x4cd19294   852  add fp, jssp, #0x10 (16)
0x4cd19298   856  ldr x17, pc+24 (addr 0x000000004cd192b0)    ;; lazy deoptimization bailout 0
0x4cd1929c   860  add x17, x17, x16
0x4cd192a0   864  br x17
0x4cd192a4   868  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd192a8   872  d63f03e0       constant
0x4cd192ac   876  d503201f       constant
0x4cd192b0   880  4cb06000       constant
0x4cd192b4   884  00000000       constant


Safepoints (size = 21)
0x4cd191bc   636  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 35)
0x4cd18f48  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd18fdc  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd18ff8  embedded object  (0x21004519 <the hole>)
0x4cd19048  code target (STUB)  (0x4cd170c0)
0x4cd19098  code target (STUB)  (0x4cd16760)
0x4cd19134  code target (STUB)  (0x4cd178a0)
0x4cd19190  code target (STUB)  (0x4cd06820)
0x4cd191b4  code target (STUB)  (0x4cd06260)
0x4cd191c0  code target (STUB)  (0x4cd068e0)
0x4cd191d4  constant pool (size 84)
0x4cd19298  runtime entry
0x4cd192a4  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 216)
0x4cd19340     0  ldur x5, [x1, #15]
0x4cd19344     4  ldur w6, [x1, #27]
0x4cd19348     8  tbnz w2, #0, #+0x40 (addr 0x4cd19388)
0x4cd1934c    12  asr x8, x2, #32
0x4cd19350    16  cmp w8, w6
0x4cd19354    20  b.hs #+0x5c (addr 0x4cd193b0)
0x4cd19358    24  tbz w0, #0, #+0x1c (addr 0x4cd19374)
0x4cd1935c    28  ldur x16, [x0, #-1]
0x4cd19360    32  ldr x17, [x26, #120]
0x4cd19364    36  cmp x16, x17
0x4cd19368    40  b.ne #+0x58 (addr 0x4cd193c0)
0x4cd1936c    44  ldur d0, [x0, #7]
0x4cd19370    48  b #+0x8 (addr 0x4cd19378)
0x4cd19374    52  scvtf d0, x0, #32
0x4cd19378    56  add x1, x5, #0xf (15)
0x4cd1937c    60  fsub d29, d0, d15
0x4cd19380    64  str d29, [x1, w8, sxtw #3]
0x4cd19384    68  ret
0x4cd19388    72  ldur x16, [x2, #-1]
0x4cd1938c    76  ldr x17, [x26, #120]
0x4cd19390    80  cmp x16, x17
0x4cd19394    84  b.ne #+0x3c (addr 0x4cd193d0)
0x4cd19398    88  ldur d29, [x2, #7]
0x4cd1939c    92  fcvtzs w8, d29
0x4cd193a0    96  scvtf d0, w8
0x4cd193a4   100  fcmp d29, d0
0x4cd193a8   104  b.ne #+0x28 (addr 0x4cd193d0)
0x4cd193ac   108  b #-0x5c (addr 0x4cd19350)
0x4cd193b0   112  movz x16, #0x0
0x4cd193b4   116  sub csp, jssp, #0x10 (16)
0x4cd193b8   120  stp fp, lr, [jssp, #-16]!
0x4cd193bc   124  bl #+0x24 (addr 0x4cd193e0)
0x4cd193c0   128  movz x16, #0x8
0x4cd193c4   132  sub csp, jssp, #0x10 (16)
0x4cd193c8   136  stp fp, lr, [jssp, #-16]!
0x4cd193cc   140  bl #+0x14 (addr 0x4cd193e0)
0x4cd193d0   144  movz x16, #0x10
0x4cd193d4   148  sub csp, jssp, #0x10 (16)
0x4cd193d8   152  stp fp, lr, [jssp, #-16]!
0x4cd193dc   156  bl #+0x4 (addr 0x4cd193e0)
0x4cd193e0   160  movz x17, #0xa00000000
0x4cd193e4   164  sub csp, jssp, #0x10 (16)
0x4cd193e8   168  stp x17, cp, [jssp, #-16]!
0x4cd193ec   172  add fp, jssp, #0x10 (16)
0x4cd193f0   176  ldr x17, pc+24 (addr 0x000000004cd19408)    ;; lazy deoptimization bailout 0
0x4cd193f4   180  add x17, x17, x16
0x4cd193f8   184  br x17
0x4cd193fc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd19400   192  d63f03e0       constant
0x4cd19404   196  d503201f       constant
0x4cd19408   200  4cb06000       constant
0x4cd1940c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd193f0  runtime entry
0x4cd193fc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 216)
0x4cd19340     0  ldur x5, [x1, #15]
0x4cd19344     4  ldur w6, [x1, #27]
0x4cd19348     8  tbnz w2, #0, #+0x40 (addr 0x4cd19388)
0x4cd1934c    12  asr x8, x2, #32
0x4cd19350    16  cmp w8, w6
0x4cd19354    20  b.hs #+0x5c (addr 0x4cd193b0)
0x4cd19358    24  tbz w0, #0, #+0x1c (addr 0x4cd19374)
0x4cd1935c    28  ldur x16, [x0, #-1]
0x4cd19360    32  ldr x17, [x26, #120]
0x4cd19364    36  cmp x16, x17
0x4cd19368    40  b.ne #+0x58 (addr 0x4cd193c0)
0x4cd1936c    44  ldur d0, [x0, #7]
0x4cd19370    48  b #+0x8 (addr 0x4cd19378)
0x4cd19374    52  scvtf d0, x0, #32
0x4cd19378    56  add x1, x5, #0xf (15)
0x4cd1937c    60  fsub d29, d0, d15
0x4cd19380    64  str d29, [x1, w8, sxtw #3]
0x4cd19384    68  ret
0x4cd19388    72  ldur x16, [x2, #-1]
0x4cd1938c    76  ldr x17, [x26, #120]
0x4cd19390    80  cmp x16, x17
0x4cd19394    84  b.ne #+0x3c (addr 0x4cd193d0)
0x4cd19398    88  ldur d29, [x2, #7]
0x4cd1939c    92  fcvtzs w8, d29
0x4cd193a0    96  scvtf d0, w8
0x4cd193a4   100  fcmp d29, d0
0x4cd193a8   104  b.ne #+0x28 (addr 0x4cd193d0)
0x4cd193ac   108  b #-0x5c (addr 0x4cd19350)
0x4cd193b0   112  movz x16, #0x0
0x4cd193b4   116  sub csp, jssp, #0x10 (16)
0x4cd193b8   120  stp fp, lr, [jssp, #-16]!
0x4cd193bc   124  bl #+0x24 (addr 0x4cd193e0)
0x4cd193c0   128  movz x16, #0x8
0x4cd193c4   132  sub csp, jssp, #0x10 (16)
0x4cd193c8   136  stp fp, lr, [jssp, #-16]!
0x4cd193cc   140  bl #+0x14 (addr 0x4cd193e0)
0x4cd193d0   144  movz x16, #0x10
0x4cd193d4   148  sub csp, jssp, #0x10 (16)
0x4cd193d8   152  stp fp, lr, [jssp, #-16]!
0x4cd193dc   156  bl #+0x4 (addr 0x4cd193e0)
0x4cd193e0   160  movz x17, #0xa00000000
0x4cd193e4   164  sub csp, jssp, #0x10 (16)
0x4cd193e8   168  stp x17, cp, [jssp, #-16]!
0x4cd193ec   172  add fp, jssp, #0x10 (16)
0x4cd193f0   176  ldr x17, pc+24 (addr 0x000000004cd19408)    ;; lazy deoptimization bailout 0
0x4cd193f4   180  add x17, x17, x16
0x4cd193f8   184  br x17
0x4cd193fc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd19400   192  d63f03e0       constant
0x4cd19404   196  d503201f       constant
0x4cd19408   200  4cb06000       constant
0x4cd1940c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd193f0  runtime entry
0x4cd193fc  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 853)
0x4cd19480     0  ldur x5, [x1, #15]
0x4cd19484     4  ldur w6, [x1, #27]
0x4cd19488     8  tbz w0, #0, #+0x1c (addr 0x4cd194a4)
0x4cd1948c    12  ldur x16, [x0, #-1]
0x4cd19490    16  ldr x17, [x26, #120]
0x4cd19494    20  cmp x16, x17
0x4cd19498    24  b.ne #+0x298 (addr 0x4cd19730)
0x4cd1949c    28  ldur d0, [x0, #7]
0x4cd194a0    32  b #+0x8 (addr 0x4cd194a8)
0x4cd194a4    36  scvtf d0, x0, #32
0x4cd194a8    40  tbnz w2, #0, #+0x11c (addr 0x4cd195c4)
0x4cd194ac    44  asr x8, x2, #32
0x4cd194b0    48  cmp w6, w8
0x4cd194b4    52  b.eq #+0x10 (addr 0x4cd194c4)
0x4cd194b8    56  cmp w8, w6
0x4cd194bc    60  b.hs #+0x284 (addr 0x4cd19740)
0x4cd194c0    64  b #+0xf4 (addr 0x4cd195b4)
0x4cd194c4    68  ldur w7, [x5, #11]
0x4cd194c8    72  cmp w7, w8
0x4cd194cc    76  b.gt #+0xdc (addr 0x4cd195a8)
0x4cd194d0    80  adds w7, w7, #0x400 (1024)
0x4cd194d4    84  b.vs #+0x27c (addr 0x4cd19750)
0x4cd194d8    88  cmp w8, w7
0x4cd194dc    92  b.hs #+0x284 (addr 0x4cd19760)
0x4cd194e0    96  tbnz w2, #0, #+0x12c (addr 0x4cd1960c)
0x4cd194e4   100  asr x9, x2, #32
0x4cd194e8   104  add w7, w8, w9, lsr #1
0x4cd194ec   108  add w7, w7, #0x10 (16)
0x4cd194f0   112  movz w16, #0x95ff
0x4cd194f4   116  cmp w7, w16, lsl #1
0x4cd194f8   120  b.hs #+0x278 (addr 0x4cd19770)
0x4cd194fc   124  lsl x2, x7, #32
0x4cd19500   128  lsl w3, w7, #3
0x4cd19504   132  add w3, w3, #0x10 (16)
0x4cd19508   136  sxtw x3, w3
0x4cd1950c   140  movz x4, #0xd2c0
0x4cd19510   144  movk x4, #0x166d, lsl #16
0x4cd19514   148  ldp x9, x16, [x4]
0x4cd19518   152  adds x7, x9, x3
0x4cd1951c   156  ccmp x7, x16, #nzCv, lo
0x4cd19520   160  b.hi #+0x16c (addr 0x4cd1968c)
0x4cd19524   164  str x7, [x4]
0x4cd19528   168  orr x9, x9, #0x1
0x4cd1952c   172  ldr x3, pc+468 (addr 0x000000004cd19700)    ;; object: 0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19530   176  stur x3, [x9, #-1]
0x4cd19534   180  stur x2, [x9, #7]
0x4cd19538   184  ldr d1, pc+448 (addr 0x000000004cd196f8)
0x4cd1953c   188  ldur w2, [x9, #11]
0x4cd19540   192  cmp w6, w2
0x4cd19544   196  b.ge #+0x14 (addr 0x4cd19558)
0x4cd19548   200  sub w2, w2, #0x1 (1)
0x4cd1954c   204  add x3, x9, #0xf (15)
0x4cd19550   208  str d1, [x3, w2, sxtw #3]
0x4cd19554   212  b #-0x14 (addr 0x4cd19540)
0x4cd19558   216  cmp w6, #0x0 (0)
0x4cd1955c   220  b.le #+0x1c (addr 0x4cd19578)
0x4cd19560   224  sub w6, w6, #0x1 (1)
0x4cd19564   228  add x2, x5, #0xf (15)
0x4cd19568   232  ldr d1, [x2, w6, sxtw #3]
0x4cd1956c   236  add x2, x9, #0xf (15)
0x4cd19570   240  str d1, [x2, w6, sxtw #3]
0x4cd19574   244  b #-0x1c (addr 0x4cd19558)
0x4cd19578   248  mov x2, x9
0x4cd1957c   252  stur x2, [x1, #15]
0x4cd19580   256  add x3, x1, #0xf (15)
0x4cd19584   260  and x2, x1, #0xfffffffffff00000
0x4cd19588   264  ldr x2, [x2, #8]
0x4cd1958c   268  tbz w2, #2, #+0x18 (addr 0x4cd195a4)
0x4cd19590   272  sub csp, jssp, #0x8 (8)
0x4cd19594   276  str lr, [jssp, #-8]!
0x4cd19598   280  ldr x16, pc+368 (addr 0x000000004cd19708)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd1959c   284  blr x16
0x4cd195a0   288  ldr lr, [jssp], #8
0x4cd195a4   292  mov x5, x9
0x4cd195a8   296  add w2, w8, #0x1 (1)
0x4cd195ac   300  lsl x2, x2, #32
0x4cd195b0   304  stur x2, [x1, #23]
0x4cd195b4   308  add x1, x5, #0xf (15)
0x4cd195b8   312  fsub d29, d0, d15
0x4cd195bc   316  str d29, [x1, w8, sxtw #3]
0x4cd195c0   320  ret
0x4cd195c4   324  sub csp, jssp, #0x10 (16)
0x4cd195c8   328  stp fp, lr, [jssp, #-16]!
0x4cd195cc   332  movz fp, #0xa00000000
0x4cd195d0   336  sub csp, jssp, #0x8 (8)
0x4cd195d4   340  str fp, [jssp, #-8]!
0x4cd195d8   344  add fp, jssp, #0x8 (8)
0x4cd195dc   348  ldur x16, [x2, #-1]
0x4cd195e0   352  ldr x17, [x26, #120]
0x4cd195e4   356  cmp x16, x17
0x4cd195e8   360  b.ne #+0x198 (addr 0x4cd19780)
0x4cd195ec   364  ldur d29, [x2, #7]
0x4cd195f0   368  fcvtzs w8, d29
0x4cd195f4   372  scvtf d1, w8
0x4cd195f8   376  fcmp d29, d1
0x4cd195fc   380  b.ne #+0x184 (addr 0x4cd19780)
0x4cd19600   384  ldr lr, [jssp, #16]
0x4cd19604   388  ldp xzr, fp, [jssp], #24
0x4cd19608   392  b #-0x158 (addr 0x4cd194b0)
0x4cd1960c   396  sub csp, jssp, #0x10 (16)
0x4cd19610   400  stp fp, lr, [jssp, #-16]!
0x4cd19614   404  movz fp, #0xa00000000
0x4cd19618   408  sub csp, jssp, #0x8 (8)
0x4cd1961c   412  str fp, [jssp, #-8]!
0x4cd19620   416  add fp, jssp, #0x8 (8)
0x4cd19624   420  ldur x16, [x2, #-1]
0x4cd19628   424  ldr x17, [x26, #120]
0x4cd1962c   428  cmp x16, x17
0x4cd19630   432  b.ne #+0x30 (addr 0x4cd19660)
0x4cd19634   436  ldur d30, [x2, #7]
0x4cd19638   440  fcvtzs x9, d30
0x4cd1963c   444  cmp x9, #0x1 (1)
0x4cd19640   448  ccmn x9, #1, #nzcV, vc
0x4cd19644   452  b.vc #+0x18 (addr 0x4cd1965c)
0x4cd19648   456  sub csp, jssp, #0x8 (8)
0x4cd1964c   460  str lr, [jssp, #-8]!
0x4cd19650   464  ldr x16, pc+192 (addr 0x000000004cd19710)    ;; code: STUB, DoubleToIStub, minor: 127554
0x4cd19654   468  blr x16
0x4cd19658   472  ldr lr, [jssp], #8
0x4cd1965c   476  b #+0x24 (addr 0x4cd19680)
0x4cd19660   480  ldp x9, x7, [x26, #64]
0x4cd19664   484  cmp x2, x9
0x4cd19668   488  cset x9, eq
0x4cd1966c   492  ccmp x2, x7, #nZcv, ne
0x4cd19670   496  b.eq #+0x10 (addr 0x4cd19680)
0x4cd19674   500  ldr x16, [x26, #40]
0x4cd19678   504  cmp x2, x16
0x4cd1967c   508  b.ne #+0x10c (addr 0x4cd19788)
0x4cd19680   512  ldr lr, [jssp, #16]
0x4cd19684   516  ldp xzr, fp, [jssp], #24
0x4cd19688   520  b #-0x1a0 (addr 0x4cd194e8)
0x4cd1968c   524  sub csp, jssp, #0x10 (16)
0x4cd19690   528  stp fp, lr, [jssp, #-16]!
0x4cd19694   532  movz fp, #0xa00000000
0x4cd19698   536  sub csp, jssp, #0x8 (8)
0x4cd1969c   540  str fp, [jssp, #-8]!
0x4cd196a0   544  add fp, jssp, #0x8 (8)
0x4cd196a4   548  movz x9, #0x0
0x4cd196a8   552  mov x16, lr
0x4cd196ac   556  ldr x17, pc+108 (addr 0x000000004cd19718)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd196b0   560  blr x17
0x4cd196b4   564  lsl x0, x3, #32
0x4cd196b8   568  movz x10, #0x100000000
0x4cd196bc   572  sub csp, jssp, #0x10 (16)
0x4cd196c0   576  stp x10, x0, [jssp, #-16]!
0x4cd196c4   580  movz x0, #0x2
0x4cd196c8   584  movz x1, #0x5b88
0x4cd196cc   588  movk x1, #0xe2, lsl #16
0x4cd196d0   592  ldr x16, pc+80 (addr 0x000000004cd19720)    ;; code: STUB, CEntryStub, minor: 5
0x4cd196d4   596  blr x16
0x4cd196d8   600  str x0, [jssp, #72]
0x4cd196dc   604  ldr x16, pc+76 (addr 0x000000004cd19728)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd196e0   608  blr x16
0x4cd196e4   612  ldr lr, [jssp, #16]
0x4cd196e8   616  ldp xzr, fp, [jssp], #24
0x4cd196ec   620  b #-0x1c0 (addr 0x4cd1952c)
0x4cd196f0   624  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd196f4   628  d63f03e0       constant
0x4cd196f8   632  fff7ffff       constant
0x4cd196fc   636  fff7ffff       constant
0x4cd19700   640  2a8052d9       constant
0x4cd19704   644  00000000       constant
0x4cd19708   648  4cd170c0       constant
0x4cd1970c   652  00000000       constant
0x4cd19710   656  4cd178a0       constant
0x4cd19714   660  00000000       constant
0x4cd19718   664  4cd06820       constant
0x4cd1971c   668  00000000       constant
0x4cd19720   672  4cd06260       constant
0x4cd19724   676  00000000       constant
0x4cd19728   680  4cd068e0       constant
0x4cd1972c   684  00000000       constant
0x4cd19730   688  movz x16, #0x0
0x4cd19734   692  sub csp, jssp, #0x10 (16)
0x4cd19738   696  stp fp, lr, [jssp, #-16]!
0x4cd1973c   700  bl #+0x54 (addr 0x4cd19790)
0x4cd19740   704  movz x16, #0x8
0x4cd19744   708  sub csp, jssp, #0x10 (16)
0x4cd19748   712  stp fp, lr, [jssp, #-16]!
0x4cd1974c   716  bl #+0x44 (addr 0x4cd19790)
0x4cd19750   720  movz x16, #0x10
0x4cd19754   724  sub csp, jssp, #0x10 (16)
0x4cd19758   728  stp fp, lr, [jssp, #-16]!
0x4cd1975c   732  bl #+0x34 (addr 0x4cd19790)
0x4cd19760   736  movz x16, #0x18
0x4cd19764   740  sub csp, jssp, #0x10 (16)
0x4cd19768   744  stp fp, lr, [jssp, #-16]!
0x4cd1976c   748  bl #+0x24 (addr 0x4cd19790)
0x4cd19770   752  movz x16, #0x20
0x4cd19774   756  sub csp, jssp, #0x10 (16)
0x4cd19778   760  stp fp, lr, [jssp, #-16]!
0x4cd1977c   764  bl #+0x14 (addr 0x4cd19790)
0x4cd19780   768  movz x16, #0x28
0x4cd19784   772  bl #+0x1c (addr 0x4cd197a0)
0x4cd19788   776  movz x16, #0x30
0x4cd1978c   780  bl #+0x14 (addr 0x4cd197a0)
0x4cd19790   784  movz x17, #0xa00000000
0x4cd19794   788  sub csp, jssp, #0x10 (16)
0x4cd19798   792  stp x17, cp, [jssp, #-16]!
0x4cd1979c   796  add fp, jssp, #0x10 (16)
0x4cd197a0   800  ldr x17, pc+24 (addr 0x000000004cd197b8)    ;; lazy deoptimization bailout 0
0x4cd197a4   804  add x17, x17, x16
0x4cd197a8   808  br x17
0x4cd197ac   812  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd197b0   816  d63f03e0       constant
0x4cd197b4   820  d503201f       constant
0x4cd197b8   824  4cb06000       constant
0x4cd197bc   828  00000000       constant


Safepoints (size = 21)
0x4cd196d8   600  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0x4cd1952c  embedded object  (0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19598  code target (STUB)  (0x4cd170c0)
0x4cd19650  code target (STUB)  (0x4cd178a0)
0x4cd196ac  code target (STUB)  (0x4cd06820)
0x4cd196d0  code target (STUB)  (0x4cd06260)
0x4cd196dc  code target (STUB)  (0x4cd068e0)
0x4cd196f0  constant pool (size 64)
0x4cd197a0  runtime entry
0x4cd197ac  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 853)
0x4cd19480     0  ldur x5, [x1, #15]
0x4cd19484     4  ldur w6, [x1, #27]
0x4cd19488     8  tbz w0, #0, #+0x1c (addr 0x4cd194a4)
0x4cd1948c    12  ldur x16, [x0, #-1]
0x4cd19490    16  ldr x17, [x26, #120]
0x4cd19494    20  cmp x16, x17
0x4cd19498    24  b.ne #+0x298 (addr 0x4cd19730)
0x4cd1949c    28  ldur d0, [x0, #7]
0x4cd194a0    32  b #+0x8 (addr 0x4cd194a8)
0x4cd194a4    36  scvtf d0, x0, #32
0x4cd194a8    40  tbnz w2, #0, #+0x11c (addr 0x4cd195c4)
0x4cd194ac    44  asr x8, x2, #32
0x4cd194b0    48  cmp w6, w8
0x4cd194b4    52  b.eq #+0x10 (addr 0x4cd194c4)
0x4cd194b8    56  cmp w8, w6
0x4cd194bc    60  b.hs #+0x284 (addr 0x4cd19740)
0x4cd194c0    64  b #+0xf4 (addr 0x4cd195b4)
0x4cd194c4    68  ldur w7, [x5, #11]
0x4cd194c8    72  cmp w7, w8
0x4cd194cc    76  b.gt #+0xdc (addr 0x4cd195a8)
0x4cd194d0    80  adds w7, w7, #0x400 (1024)
0x4cd194d4    84  b.vs #+0x27c (addr 0x4cd19750)
0x4cd194d8    88  cmp w8, w7
0x4cd194dc    92  b.hs #+0x284 (addr 0x4cd19760)
0x4cd194e0    96  tbnz w2, #0, #+0x12c (addr 0x4cd1960c)
0x4cd194e4   100  asr x9, x2, #32
0x4cd194e8   104  add w7, w8, w9, lsr #1
0x4cd194ec   108  add w7, w7, #0x10 (16)
0x4cd194f0   112  movz w16, #0x95ff
0x4cd194f4   116  cmp w7, w16, lsl #1
0x4cd194f8   120  b.hs #+0x278 (addr 0x4cd19770)
0x4cd194fc   124  lsl x2, x7, #32
0x4cd19500   128  lsl w3, w7, #3
0x4cd19504   132  add w3, w3, #0x10 (16)
0x4cd19508   136  sxtw x3, w3
0x4cd1950c   140  movz x4, #0xd2c0
0x4cd19510   144  movk x4, #0x166d, lsl #16
0x4cd19514   148  ldp x9, x16, [x4]
0x4cd19518   152  adds x7, x9, x3
0x4cd1951c   156  ccmp x7, x16, #nzCv, lo
0x4cd19520   160  b.hi #+0x16c (addr 0x4cd1968c)
0x4cd19524   164  str x7, [x4]
0x4cd19528   168  orr x9, x9, #0x1
0x4cd1952c   172  ldr x3, pc+468 (addr 0x000000004cd19700)    ;; object: 0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19530   176  stur x3, [x9, #-1]
0x4cd19534   180  stur x2, [x9, #7]
0x4cd19538   184  ldr d1, pc+448 (addr 0x000000004cd196f8)
0x4cd1953c   188  ldur w2, [x9, #11]
0x4cd19540   192  cmp w6, w2
0x4cd19544   196  b.ge #+0x14 (addr 0x4cd19558)
0x4cd19548   200  sub w2, w2, #0x1 (1)
0x4cd1954c   204  add x3, x9, #0xf (15)
0x4cd19550   208  str d1, [x3, w2, sxtw #3]
0x4cd19554   212  b #-0x14 (addr 0x4cd19540)
0x4cd19558   216  cmp w6, #0x0 (0)
0x4cd1955c   220  b.le #+0x1c (addr 0x4cd19578)
0x4cd19560   224  sub w6, w6, #0x1 (1)
0x4cd19564   228  add x2, x5, #0xf (15)
0x4cd19568   232  ldr d1, [x2, w6, sxtw #3]
0x4cd1956c   236  add x2, x9, #0xf (15)
0x4cd19570   240  str d1, [x2, w6, sxtw #3]
0x4cd19574   244  b #-0x1c (addr 0x4cd19558)
0x4cd19578   248  mov x2, x9
0x4cd1957c   252  stur x2, [x1, #15]
0x4cd19580   256  add x3, x1, #0xf (15)
0x4cd19584   260  and x2, x1, #0xfffffffffff00000
0x4cd19588   264  ldr x2, [x2, #8]
0x4cd1958c   268  tbz w2, #2, #+0x18 (addr 0x4cd195a4)
0x4cd19590   272  sub csp, jssp, #0x8 (8)
0x4cd19594   276  str lr, [jssp, #-8]!
0x4cd19598   280  ldr x16, pc+368 (addr 0x000000004cd19708)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd1959c   284  blr x16
0x4cd195a0   288  ldr lr, [jssp], #8
0x4cd195a4   292  mov x5, x9
0x4cd195a8   296  add w2, w8, #0x1 (1)
0x4cd195ac   300  lsl x2, x2, #32
0x4cd195b0   304  stur x2, [x1, #23]
0x4cd195b4   308  add x1, x5, #0xf (15)
0x4cd195b8   312  fsub d29, d0, d15
0x4cd195bc   316  str d29, [x1, w8, sxtw #3]
0x4cd195c0   320  ret
0x4cd195c4   324  sub csp, jssp, #0x10 (16)
0x4cd195c8   328  stp fp, lr, [jssp, #-16]!
0x4cd195cc   332  movz fp, #0xa00000000
0x4cd195d0   336  sub csp, jssp, #0x8 (8)
0x4cd195d4   340  str fp, [jssp, #-8]!
0x4cd195d8   344  add fp, jssp, #0x8 (8)
0x4cd195dc   348  ldur x16, [x2, #-1]
0x4cd195e0   352  ldr x17, [x26, #120]
0x4cd195e4   356  cmp x16, x17
0x4cd195e8   360  b.ne #+0x198 (addr 0x4cd19780)
0x4cd195ec   364  ldur d29, [x2, #7]
0x4cd195f0   368  fcvtzs w8, d29
0x4cd195f4   372  scvtf d1, w8
0x4cd195f8   376  fcmp d29, d1
0x4cd195fc   380  b.ne #+0x184 (addr 0x4cd19780)
0x4cd19600   384  ldr lr, [jssp, #16]
0x4cd19604   388  ldp xzr, fp, [jssp], #24
0x4cd19608   392  b #-0x158 (addr 0x4cd194b0)
0x4cd1960c   396  sub csp, jssp, #0x10 (16)
0x4cd19610   400  stp fp, lr, [jssp, #-16]!
0x4cd19614   404  movz fp, #0xa00000000
0x4cd19618   408  sub csp, jssp, #0x8 (8)
0x4cd1961c   412  str fp, [jssp, #-8]!
0x4cd19620   416  add fp, jssp, #0x8 (8)
0x4cd19624   420  ldur x16, [x2, #-1]
0x4cd19628   424  ldr x17, [x26, #120]
0x4cd1962c   428  cmp x16, x17
0x4cd19630   432  b.ne #+0x30 (addr 0x4cd19660)
0x4cd19634   436  ldur d30, [x2, #7]
0x4cd19638   440  fcvtzs x9, d30
0x4cd1963c   444  cmp x9, #0x1 (1)
0x4cd19640   448  ccmn x9, #1, #nzcV, vc
0x4cd19644   452  b.vc #+0x18 (addr 0x4cd1965c)
0x4cd19648   456  sub csp, jssp, #0x8 (8)
0x4cd1964c   460  str lr, [jssp, #-8]!
0x4cd19650   464  ldr x16, pc+192 (addr 0x000000004cd19710)    ;; code: STUB, DoubleToIStub, minor: 127554
0x4cd19654   468  blr x16
0x4cd19658   472  ldr lr, [jssp], #8
0x4cd1965c   476  b #+0x24 (addr 0x4cd19680)
0x4cd19660   480  ldp x9, x7, [x26, #64]
0x4cd19664   484  cmp x2, x9
0x4cd19668   488  cset x9, eq
0x4cd1966c   492  ccmp x2, x7, #nZcv, ne
0x4cd19670   496  b.eq #+0x10 (addr 0x4cd19680)
0x4cd19674   500  ldr x16, [x26, #40]
0x4cd19678   504  cmp x2, x16
0x4cd1967c   508  b.ne #+0x10c (addr 0x4cd19788)
0x4cd19680   512  ldr lr, [jssp, #16]
0x4cd19684   516  ldp xzr, fp, [jssp], #24
0x4cd19688   520  b #-0x1a0 (addr 0x4cd194e8)
0x4cd1968c   524  sub csp, jssp, #0x10 (16)
0x4cd19690   528  stp fp, lr, [jssp, #-16]!
0x4cd19694   532  movz fp, #0xa00000000
0x4cd19698   536  sub csp, jssp, #0x8 (8)
0x4cd1969c   540  str fp, [jssp, #-8]!
0x4cd196a0   544  add fp, jssp, #0x8 (8)
0x4cd196a4   548  movz x9, #0x0
0x4cd196a8   552  mov x16, lr
0x4cd196ac   556  ldr x17, pc+108 (addr 0x000000004cd19718)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd196b0   560  blr x17
0x4cd196b4   564  lsl x0, x3, #32
0x4cd196b8   568  movz x10, #0x100000000
0x4cd196bc   572  sub csp, jssp, #0x10 (16)
0x4cd196c0   576  stp x10, x0, [jssp, #-16]!
0x4cd196c4   580  movz x0, #0x2
0x4cd196c8   584  movz x1, #0x5b88
0x4cd196cc   588  movk x1, #0xe2, lsl #16
0x4cd196d0   592  ldr x16, pc+80 (addr 0x000000004cd19720)    ;; code: STUB, CEntryStub, minor: 5
0x4cd196d4   596  blr x16
0x4cd196d8   600  str x0, [jssp, #72]
0x4cd196dc   604  ldr x16, pc+76 (addr 0x000000004cd19728)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd196e0   608  blr x16
0x4cd196e4   612  ldr lr, [jssp, #16]
0x4cd196e8   616  ldp xzr, fp, [jssp], #24
0x4cd196ec   620  b #-0x1c0 (addr 0x4cd1952c)
0x4cd196f0   624  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd196f4   628  d63f03e0       constant
0x4cd196f8   632  fff7ffff       constant
0x4cd196fc   636  fff7ffff       constant
0x4cd19700   640  2a8052d9       constant
0x4cd19704   644  00000000       constant
0x4cd19708   648  4cd170c0       constant
0x4cd1970c   652  00000000       constant
0x4cd19710   656  4cd178a0       constant
0x4cd19714   660  00000000       constant
0x4cd19718   664  4cd06820       constant
0x4cd1971c   668  00000000       constant
0x4cd19720   672  4cd06260       constant
0x4cd19724   676  00000000       constant
0x4cd19728   680  4cd068e0       constant
0x4cd1972c   684  00000000       constant
0x4cd19730   688  movz x16, #0x0
0x4cd19734   692  sub csp, jssp, #0x10 (16)
0x4cd19738   696  stp fp, lr, [jssp, #-16]!
0x4cd1973c   700  bl #+0x54 (addr 0x4cd19790)
0x4cd19740   704  movz x16, #0x8
0x4cd19744   708  sub csp, jssp, #0x10 (16)
0x4cd19748   712  stp fp, lr, [jssp, #-16]!
0x4cd1974c   716  bl #+0x44 (addr 0x4cd19790)
0x4cd19750   720  movz x16, #0x10
0x4cd19754   724  sub csp, jssp, #0x10 (16)
0x4cd19758   728  stp fp, lr, [jssp, #-16]!
0x4cd1975c   732  bl #+0x34 (addr 0x4cd19790)
0x4cd19760   736  movz x16, #0x18
0x4cd19764   740  sub csp, jssp, #0x10 (16)
0x4cd19768   744  stp fp, lr, [jssp, #-16]!
0x4cd1976c   748  bl #+0x24 (addr 0x4cd19790)
0x4cd19770   752  movz x16, #0x20
0x4cd19774   756  sub csp, jssp, #0x10 (16)
0x4cd19778   760  stp fp, lr, [jssp, #-16]!
0x4cd1977c   764  bl #+0x14 (addr 0x4cd19790)
0x4cd19780   768  movz x16, #0x28
0x4cd19784   772  bl #+0x1c (addr 0x4cd197a0)
0x4cd19788   776  movz x16, #0x30
0x4cd1978c   780  bl #+0x14 (addr 0x4cd197a0)
0x4cd19790   784  movz x17, #0xa00000000
0x4cd19794   788  sub csp, jssp, #0x10 (16)
0x4cd19798   792  stp x17, cp, [jssp, #-16]!
0x4cd1979c   796  add fp, jssp, #0x10 (16)
0x4cd197a0   800  ldr x17, pc+24 (addr 0x000000004cd197b8)    ;; lazy deoptimization bailout 0
0x4cd197a4   804  add x17, x17, x16
0x4cd197a8   808  br x17
0x4cd197ac   812  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd197b0   816  d63f03e0       constant
0x4cd197b4   820  d503201f       constant
0x4cd197b8   824  4cb06000       constant
0x4cd197bc   828  00000000       constant


Safepoints (size = 21)
0x4cd196d8   600  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0x4cd1952c  embedded object  (0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19598  code target (STUB)  (0x4cd170c0)
0x4cd19650  code target (STUB)  (0x4cd178a0)
0x4cd196ac  code target (STUB)  (0x4cd06820)
0x4cd196d0  code target (STUB)  (0x4cd06260)
0x4cd196dc  code target (STUB)  (0x4cd068e0)
0x4cd196f0  constant pool (size 64)
0x4cd197a0  runtime entry
0x4cd197ac  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 216)
0x4cd19840     0  ldur x5, [x1, #15]
0x4cd19844     4  ldur w6, [x1, #27]
0x4cd19848     8  tbnz w2, #0, #+0x40 (addr 0x4cd19888)
0x4cd1984c    12  asr x8, x2, #32
0x4cd19850    16  cmp w8, w6
0x4cd19854    20  b.hs #+0x5c (addr 0x4cd198b0)
0x4cd19858    24  tbz w0, #0, #+0x1c (addr 0x4cd19874)
0x4cd1985c    28  ldur x16, [x0, #-1]
0x4cd19860    32  ldr x17, [x26, #120]
0x4cd19864    36  cmp x16, x17
0x4cd19868    40  b.ne #+0x58 (addr 0x4cd198c0)
0x4cd1986c    44  ldur d0, [x0, #7]
0x4cd19870    48  b #+0x8 (addr 0x4cd19878)
0x4cd19874    52  scvtf d0, x0, #32
0x4cd19878    56  add x1, x5, #0xf (15)
0x4cd1987c    60  fsub d29, d0, d15
0x4cd19880    64  str d29, [x1, w8, sxtw #3]
0x4cd19884    68  ret
0x4cd19888    72  ldur x16, [x2, #-1]
0x4cd1988c    76  ldr x17, [x26, #120]
0x4cd19890    80  cmp x16, x17
0x4cd19894    84  b.ne #+0x3c (addr 0x4cd198d0)
0x4cd19898    88  ldur d29, [x2, #7]
0x4cd1989c    92  fcvtzs w8, d29
0x4cd198a0    96  scvtf d0, w8
0x4cd198a4   100  fcmp d29, d0
0x4cd198a8   104  b.ne #+0x28 (addr 0x4cd198d0)
0x4cd198ac   108  b #-0x5c (addr 0x4cd19850)
0x4cd198b0   112  movz x16, #0x0
0x4cd198b4   116  sub csp, jssp, #0x10 (16)
0x4cd198b8   120  stp fp, lr, [jssp, #-16]!
0x4cd198bc   124  bl #+0x24 (addr 0x4cd198e0)
0x4cd198c0   128  movz x16, #0x8
0x4cd198c4   132  sub csp, jssp, #0x10 (16)
0x4cd198c8   136  stp fp, lr, [jssp, #-16]!
0x4cd198cc   140  bl #+0x14 (addr 0x4cd198e0)
0x4cd198d0   144  movz x16, #0x10
0x4cd198d4   148  sub csp, jssp, #0x10 (16)
0x4cd198d8   152  stp fp, lr, [jssp, #-16]!
0x4cd198dc   156  bl #+0x4 (addr 0x4cd198e0)
0x4cd198e0   160  movz x17, #0xa00000000
0x4cd198e4   164  sub csp, jssp, #0x10 (16)
0x4cd198e8   168  stp x17, cp, [jssp, #-16]!
0x4cd198ec   172  add fp, jssp, #0x10 (16)
0x4cd198f0   176  ldr x17, pc+24 (addr 0x000000004cd19908)    ;; lazy deoptimization bailout 0
0x4cd198f4   180  add x17, x17, x16
0x4cd198f8   184  br x17
0x4cd198fc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd19900   192  d63f03e0       constant
0x4cd19904   196  d503201f       constant
0x4cd19908   200  4cb06000       constant
0x4cd1990c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd198f0  runtime entry
0x4cd198fc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 216)
0x4cd19840     0  ldur x5, [x1, #15]
0x4cd19844     4  ldur w6, [x1, #27]
0x4cd19848     8  tbnz w2, #0, #+0x40 (addr 0x4cd19888)
0x4cd1984c    12  asr x8, x2, #32
0x4cd19850    16  cmp w8, w6
0x4cd19854    20  b.hs #+0x5c (addr 0x4cd198b0)
0x4cd19858    24  tbz w0, #0, #+0x1c (addr 0x4cd19874)
0x4cd1985c    28  ldur x16, [x0, #-1]
0x4cd19860    32  ldr x17, [x26, #120]
0x4cd19864    36  cmp x16, x17
0x4cd19868    40  b.ne #+0x58 (addr 0x4cd198c0)
0x4cd1986c    44  ldur d0, [x0, #7]
0x4cd19870    48  b #+0x8 (addr 0x4cd19878)
0x4cd19874    52  scvtf d0, x0, #32
0x4cd19878    56  add x1, x5, #0xf (15)
0x4cd1987c    60  fsub d29, d0, d15
0x4cd19880    64  str d29, [x1, w8, sxtw #3]
0x4cd19884    68  ret
0x4cd19888    72  ldur x16, [x2, #-1]
0x4cd1988c    76  ldr x17, [x26, #120]
0x4cd19890    80  cmp x16, x17
0x4cd19894    84  b.ne #+0x3c (addr 0x4cd198d0)
0x4cd19898    88  ldur d29, [x2, #7]
0x4cd1989c    92  fcvtzs w8, d29
0x4cd198a0    96  scvtf d0, w8
0x4cd198a4   100  fcmp d29, d0
0x4cd198a8   104  b.ne #+0x28 (addr 0x4cd198d0)
0x4cd198ac   108  b #-0x5c (addr 0x4cd19850)
0x4cd198b0   112  movz x16, #0x0
0x4cd198b4   116  sub csp, jssp, #0x10 (16)
0x4cd198b8   120  stp fp, lr, [jssp, #-16]!
0x4cd198bc   124  bl #+0x24 (addr 0x4cd198e0)
0x4cd198c0   128  movz x16, #0x8
0x4cd198c4   132  sub csp, jssp, #0x10 (16)
0x4cd198c8   136  stp fp, lr, [jssp, #-16]!
0x4cd198cc   140  bl #+0x14 (addr 0x4cd198e0)
0x4cd198d0   144  movz x16, #0x10
0x4cd198d4   148  sub csp, jssp, #0x10 (16)
0x4cd198d8   152  stp fp, lr, [jssp, #-16]!
0x4cd198dc   156  bl #+0x4 (addr 0x4cd198e0)
0x4cd198e0   160  movz x17, #0xa00000000
0x4cd198e4   164  sub csp, jssp, #0x10 (16)
0x4cd198e8   168  stp x17, cp, [jssp, #-16]!
0x4cd198ec   172  add fp, jssp, #0x10 (16)
0x4cd198f0   176  ldr x17, pc+24 (addr 0x000000004cd19908)    ;; lazy deoptimization bailout 0
0x4cd198f4   180  add x17, x17, x16
0x4cd198f8   184  br x17
0x4cd198fc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd19900   192  d63f03e0       constant
0x4cd19904   196  d503201f       constant
0x4cd19908   200  4cb06000       constant
0x4cd1990c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd198f0  runtime entry
0x4cd198fc  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 853)
0x4cd19980     0  ldur x5, [x1, #15]
0x4cd19984     4  ldur w6, [x1, #27]
0x4cd19988     8  tbz w0, #0, #+0x1c (addr 0x4cd199a4)
0x4cd1998c    12  ldur x16, [x0, #-1]
0x4cd19990    16  ldr x17, [x26, #120]
0x4cd19994    20  cmp x16, x17
0x4cd19998    24  b.ne #+0x298 (addr 0x4cd19c30)
0x4cd1999c    28  ldur d0, [x0, #7]
0x4cd199a0    32  b #+0x8 (addr 0x4cd199a8)
0x4cd199a4    36  scvtf d0, x0, #32
0x4cd199a8    40  tbnz w2, #0, #+0x11c (addr 0x4cd19ac4)
0x4cd199ac    44  asr x8, x2, #32
0x4cd199b0    48  cmp w6, w8
0x4cd199b4    52  b.le #+0x10 (addr 0x4cd199c4)
0x4cd199b8    56  cmp w8, w6
0x4cd199bc    60  b.hs #+0x284 (addr 0x4cd19c40)
0x4cd199c0    64  b #+0xf4 (addr 0x4cd19ab4)
0x4cd199c4    68  ldur w7, [x5, #11]
0x4cd199c8    72  cmp w7, w8
0x4cd199cc    76  b.gt #+0xdc (addr 0x4cd19aa8)
0x4cd199d0    80  adds w7, w7, #0x400 (1024)
0x4cd199d4    84  b.vs #+0x27c (addr 0x4cd19c50)
0x4cd199d8    88  cmp w8, w7
0x4cd199dc    92  b.hs #+0x284 (addr 0x4cd19c60)
0x4cd199e0    96  tbnz w2, #0, #+0x12c (addr 0x4cd19b0c)
0x4cd199e4   100  asr x9, x2, #32
0x4cd199e8   104  add w7, w8, w9, lsr #1
0x4cd199ec   108  add w7, w7, #0x10 (16)
0x4cd199f0   112  movz w16, #0x95ff
0x4cd199f4   116  cmp w7, w16, lsl #1
0x4cd199f8   120  b.hs #+0x278 (addr 0x4cd19c70)
0x4cd199fc   124  lsl x2, x7, #32
0x4cd19a00   128  lsl w3, w7, #3
0x4cd19a04   132  add w3, w3, #0x10 (16)
0x4cd19a08   136  sxtw x3, w3
0x4cd19a0c   140  movz x4, #0xd2c0
0x4cd19a10   144  movk x4, #0x166d, lsl #16
0x4cd19a14   148  ldp x9, x16, [x4]
0x4cd19a18   152  adds x7, x9, x3
0x4cd19a1c   156  ccmp x7, x16, #nzCv, lo
0x4cd19a20   160  b.hi #+0x16c (addr 0x4cd19b8c)
0x4cd19a24   164  str x7, [x4]
0x4cd19a28   168  orr x9, x9, #0x1
0x4cd19a2c   172  ldr x3, pc+468 (addr 0x000000004cd19c00)    ;; object: 0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19a30   176  stur x3, [x9, #-1]
0x4cd19a34   180  stur x2, [x9, #7]
0x4cd19a38   184  ldr d1, pc+448 (addr 0x000000004cd19bf8)
0x4cd19a3c   188  ldur w2, [x9, #11]
0x4cd19a40   192  cmp w6, w2
0x4cd19a44   196  b.ge #+0x14 (addr 0x4cd19a58)
0x4cd19a48   200  sub w2, w2, #0x1 (1)
0x4cd19a4c   204  add x3, x9, #0xf (15)
0x4cd19a50   208  str d1, [x3, w2, sxtw #3]
0x4cd19a54   212  b #-0x14 (addr 0x4cd19a40)
0x4cd19a58   216  cmp w6, #0x0 (0)
0x4cd19a5c   220  b.le #+0x1c (addr 0x4cd19a78)
0x4cd19a60   224  sub w6, w6, #0x1 (1)
0x4cd19a64   228  add x2, x5, #0xf (15)
0x4cd19a68   232  ldr d1, [x2, w6, sxtw #3]
0x4cd19a6c   236  add x2, x9, #0xf (15)
0x4cd19a70   240  str d1, [x2, w6, sxtw #3]
0x4cd19a74   244  b #-0x1c (addr 0x4cd19a58)
0x4cd19a78   248  mov x2, x9
0x4cd19a7c   252  stur x2, [x1, #15]
0x4cd19a80   256  add x3, x1, #0xf (15)
0x4cd19a84   260  and x2, x1, #0xfffffffffff00000
0x4cd19a88   264  ldr x2, [x2, #8]
0x4cd19a8c   268  tbz w2, #2, #+0x18 (addr 0x4cd19aa4)
0x4cd19a90   272  sub csp, jssp, #0x8 (8)
0x4cd19a94   276  str lr, [jssp, #-8]!
0x4cd19a98   280  ldr x16, pc+368 (addr 0x000000004cd19c08)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd19a9c   284  blr x16
0x4cd19aa0   288  ldr lr, [jssp], #8
0x4cd19aa4   292  mov x5, x9
0x4cd19aa8   296  add w2, w8, #0x1 (1)
0x4cd19aac   300  lsl x2, x2, #32
0x4cd19ab0   304  stur x2, [x1, #23]
0x4cd19ab4   308  add x1, x5, #0xf (15)
0x4cd19ab8   312  fsub d29, d0, d15
0x4cd19abc   316  str d29, [x1, w8, sxtw #3]
0x4cd19ac0   320  ret
0x4cd19ac4   324  sub csp, jssp, #0x10 (16)
0x4cd19ac8   328  stp fp, lr, [jssp, #-16]!
0x4cd19acc   332  movz fp, #0xa00000000
0x4cd19ad0   336  sub csp, jssp, #0x8 (8)
0x4cd19ad4   340  str fp, [jssp, #-8]!
0x4cd19ad8   344  add fp, jssp, #0x8 (8)
0x4cd19adc   348  ldur x16, [x2, #-1]
0x4cd19ae0   352  ldr x17, [x26, #120]
0x4cd19ae4   356  cmp x16, x17
0x4cd19ae8   360  b.ne #+0x198 (addr 0x4cd19c80)
0x4cd19aec   364  ldur d29, [x2, #7]
0x4cd19af0   368  fcvtzs w8, d29
0x4cd19af4   372  scvtf d1, w8
0x4cd19af8   376  fcmp d29, d1
0x4cd19afc   380  b.ne #+0x184 (addr 0x4cd19c80)
0x4cd19b00   384  ldr lr, [jssp, #16]
0x4cd19b04   388  ldp xzr, fp, [jssp], #24
0x4cd19b08   392  b #-0x158 (addr 0x4cd199b0)
0x4cd19b0c   396  sub csp, jssp, #0x10 (16)
0x4cd19b10   400  stp fp, lr, [jssp, #-16]!
0x4cd19b14   404  movz fp, #0xa00000000
0x4cd19b18   408  sub csp, jssp, #0x8 (8)
0x4cd19b1c   412  str fp, [jssp, #-8]!
0x4cd19b20   416  add fp, jssp, #0x8 (8)
0x4cd19b24   420  ldur x16, [x2, #-1]
0x4cd19b28   424  ldr x17, [x26, #120]
0x4cd19b2c   428  cmp x16, x17
0x4cd19b30   432  b.ne #+0x30 (addr 0x4cd19b60)
0x4cd19b34   436  ldur d30, [x2, #7]
0x4cd19b38   440  fcvtzs x9, d30
0x4cd19b3c   444  cmp x9, #0x1 (1)
0x4cd19b40   448  ccmn x9, #1, #nzcV, vc
0x4cd19b44   452  b.vc #+0x18 (addr 0x4cd19b5c)
0x4cd19b48   456  sub csp, jssp, #0x8 (8)
0x4cd19b4c   460  str lr, [jssp, #-8]!
0x4cd19b50   464  ldr x16, pc+192 (addr 0x000000004cd19c10)    ;; code: STUB, DoubleToIStub, minor: 127554
0x4cd19b54   468  blr x16
0x4cd19b58   472  ldr lr, [jssp], #8
0x4cd19b5c   476  b #+0x24 (addr 0x4cd19b80)
0x4cd19b60   480  ldp x9, x7, [x26, #64]
0x4cd19b64   484  cmp x2, x9
0x4cd19b68   488  cset x9, eq
0x4cd19b6c   492  ccmp x2, x7, #nZcv, ne
0x4cd19b70   496  b.eq #+0x10 (addr 0x4cd19b80)
0x4cd19b74   500  ldr x16, [x26, #40]
0x4cd19b78   504  cmp x2, x16
0x4cd19b7c   508  b.ne #+0x10c (addr 0x4cd19c88)
0x4cd19b80   512  ldr lr, [jssp, #16]
0x4cd19b84   516  ldp xzr, fp, [jssp], #24
0x4cd19b88   520  b #-0x1a0 (addr 0x4cd199e8)
0x4cd19b8c   524  sub csp, jssp, #0x10 (16)
0x4cd19b90   528  stp fp, lr, [jssp, #-16]!
0x4cd19b94   532  movz fp, #0xa00000000
0x4cd19b98   536  sub csp, jssp, #0x8 (8)
0x4cd19b9c   540  str fp, [jssp, #-8]!
0x4cd19ba0   544  add fp, jssp, #0x8 (8)
0x4cd19ba4   548  movz x9, #0x0
0x4cd19ba8   552  mov x16, lr
0x4cd19bac   556  ldr x17, pc+108 (addr 0x000000004cd19c18)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd19bb0   560  blr x17
0x4cd19bb4   564  lsl x0, x3, #32
0x4cd19bb8   568  movz x10, #0x100000000
0x4cd19bbc   572  sub csp, jssp, #0x10 (16)
0x4cd19bc0   576  stp x10, x0, [jssp, #-16]!
0x4cd19bc4   580  movz x0, #0x2
0x4cd19bc8   584  movz x1, #0x5b88
0x4cd19bcc   588  movk x1, #0xe2, lsl #16
0x4cd19bd0   592  ldr x16, pc+80 (addr 0x000000004cd19c20)    ;; code: STUB, CEntryStub, minor: 5
0x4cd19bd4   596  blr x16
0x4cd19bd8   600  str x0, [jssp, #72]
0x4cd19bdc   604  ldr x16, pc+76 (addr 0x000000004cd19c28)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd19be0   608  blr x16
0x4cd19be4   612  ldr lr, [jssp, #16]
0x4cd19be8   616  ldp xzr, fp, [jssp], #24
0x4cd19bec   620  b #-0x1c0 (addr 0x4cd19a2c)
0x4cd19bf0   624  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd19bf4   628  d63f03e0       constant
0x4cd19bf8   632  fff7ffff       constant
0x4cd19bfc   636  fff7ffff       constant
0x4cd19c00   640  2a8052d9       constant
0x4cd19c04   644  00000000       constant
0x4cd19c08   648  4cd170c0       constant
0x4cd19c0c   652  00000000       constant
0x4cd19c10   656  4cd178a0       constant
0x4cd19c14   660  00000000       constant
0x4cd19c18   664  4cd06820       constant
0x4cd19c1c   668  00000000       constant
0x4cd19c20   672  4cd06260       constant
0x4cd19c24   676  00000000       constant
0x4cd19c28   680  4cd068e0       constant
0x4cd19c2c   684  00000000       constant
0x4cd19c30   688  movz x16, #0x0
0x4cd19c34   692  sub csp, jssp, #0x10 (16)
0x4cd19c38   696  stp fp, lr, [jssp, #-16]!
0x4cd19c3c   700  bl #+0x54 (addr 0x4cd19c90)
0x4cd19c40   704  movz x16, #0x8
0x4cd19c44   708  sub csp, jssp, #0x10 (16)
0x4cd19c48   712  stp fp, lr, [jssp, #-16]!
0x4cd19c4c   716  bl #+0x44 (addr 0x4cd19c90)
0x4cd19c50   720  movz x16, #0x10
0x4cd19c54   724  sub csp, jssp, #0x10 (16)
0x4cd19c58   728  stp fp, lr, [jssp, #-16]!
0x4cd19c5c   732  bl #+0x34 (addr 0x4cd19c90)
0x4cd19c60   736  movz x16, #0x18
0x4cd19c64   740  sub csp, jssp, #0x10 (16)
0x4cd19c68   744  stp fp, lr, [jssp, #-16]!
0x4cd19c6c   748  bl #+0x24 (addr 0x4cd19c90)
0x4cd19c70   752  movz x16, #0x20
0x4cd19c74   756  sub csp, jssp, #0x10 (16)
0x4cd19c78   760  stp fp, lr, [jssp, #-16]!
0x4cd19c7c   764  bl #+0x14 (addr 0x4cd19c90)
0x4cd19c80   768  movz x16, #0x28
0x4cd19c84   772  bl #+0x1c (addr 0x4cd19ca0)
0x4cd19c88   776  movz x16, #0x30
0x4cd19c8c   780  bl #+0x14 (addr 0x4cd19ca0)
0x4cd19c90   784  movz x17, #0xa00000000
0x4cd19c94   788  sub csp, jssp, #0x10 (16)
0x4cd19c98   792  stp x17, cp, [jssp, #-16]!
0x4cd19c9c   796  add fp, jssp, #0x10 (16)
0x4cd19ca0   800  ldr x17, pc+24 (addr 0x000000004cd19cb8)    ;; lazy deoptimization bailout 0
0x4cd19ca4   804  add x17, x17, x16
0x4cd19ca8   808  br x17
0x4cd19cac   812  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd19cb0   816  d63f03e0       constant
0x4cd19cb4   820  d503201f       constant
0x4cd19cb8   824  4cb06000       constant
0x4cd19cbc   828  00000000       constant


Safepoints (size = 21)
0x4cd19bd8   600  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0x4cd19a2c  embedded object  (0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19a98  code target (STUB)  (0x4cd170c0)
0x4cd19b50  code target (STUB)  (0x4cd178a0)
0x4cd19bac  code target (STUB)  (0x4cd06820)
0x4cd19bd0  code target (STUB)  (0x4cd06260)
0x4cd19bdc  code target (STUB)  (0x4cd068e0)
0x4cd19bf0  constant pool (size 64)
0x4cd19ca0  runtime entry
0x4cd19cac  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 853)
0x4cd19980     0  ldur x5, [x1, #15]
0x4cd19984     4  ldur w6, [x1, #27]
0x4cd19988     8  tbz w0, #0, #+0x1c (addr 0x4cd199a4)
0x4cd1998c    12  ldur x16, [x0, #-1]
0x4cd19990    16  ldr x17, [x26, #120]
0x4cd19994    20  cmp x16, x17
0x4cd19998    24  b.ne #+0x298 (addr 0x4cd19c30)
0x4cd1999c    28  ldur d0, [x0, #7]
0x4cd199a0    32  b #+0x8 (addr 0x4cd199a8)
0x4cd199a4    36  scvtf d0, x0, #32
0x4cd199a8    40  tbnz w2, #0, #+0x11c (addr 0x4cd19ac4)
0x4cd199ac    44  asr x8, x2, #32
0x4cd199b0    48  cmp w6, w8
0x4cd199b4    52  b.le #+0x10 (addr 0x4cd199c4)
0x4cd199b8    56  cmp w8, w6
0x4cd199bc    60  b.hs #+0x284 (addr 0x4cd19c40)
0x4cd199c0    64  b #+0xf4 (addr 0x4cd19ab4)
0x4cd199c4    68  ldur w7, [x5, #11]
0x4cd199c8    72  cmp w7, w8
0x4cd199cc    76  b.gt #+0xdc (addr 0x4cd19aa8)
0x4cd199d0    80  adds w7, w7, #0x400 (1024)
0x4cd199d4    84  b.vs #+0x27c (addr 0x4cd19c50)
0x4cd199d8    88  cmp w8, w7
0x4cd199dc    92  b.hs #+0x284 (addr 0x4cd19c60)
0x4cd199e0    96  tbnz w2, #0, #+0x12c (addr 0x4cd19b0c)
0x4cd199e4   100  asr x9, x2, #32
0x4cd199e8   104  add w7, w8, w9, lsr #1
0x4cd199ec   108  add w7, w7, #0x10 (16)
0x4cd199f0   112  movz w16, #0x95ff
0x4cd199f4   116  cmp w7, w16, lsl #1
0x4cd199f8   120  b.hs #+0x278 (addr 0x4cd19c70)
0x4cd199fc   124  lsl x2, x7, #32
0x4cd19a00   128  lsl w3, w7, #3
0x4cd19a04   132  add w3, w3, #0x10 (16)
0x4cd19a08   136  sxtw x3, w3
0x4cd19a0c   140  movz x4, #0xd2c0
0x4cd19a10   144  movk x4, #0x166d, lsl #16
0x4cd19a14   148  ldp x9, x16, [x4]
0x4cd19a18   152  adds x7, x9, x3
0x4cd19a1c   156  ccmp x7, x16, #nzCv, lo
0x4cd19a20   160  b.hi #+0x16c (addr 0x4cd19b8c)
0x4cd19a24   164  str x7, [x4]
0x4cd19a28   168  orr x9, x9, #0x1
0x4cd19a2c   172  ldr x3, pc+468 (addr 0x000000004cd19c00)    ;; object: 0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19a30   176  stur x3, [x9, #-1]
0x4cd19a34   180  stur x2, [x9, #7]
0x4cd19a38   184  ldr d1, pc+448 (addr 0x000000004cd19bf8)
0x4cd19a3c   188  ldur w2, [x9, #11]
0x4cd19a40   192  cmp w6, w2
0x4cd19a44   196  b.ge #+0x14 (addr 0x4cd19a58)
0x4cd19a48   200  sub w2, w2, #0x1 (1)
0x4cd19a4c   204  add x3, x9, #0xf (15)
0x4cd19a50   208  str d1, [x3, w2, sxtw #3]
0x4cd19a54   212  b #-0x14 (addr 0x4cd19a40)
0x4cd19a58   216  cmp w6, #0x0 (0)
0x4cd19a5c   220  b.le #+0x1c (addr 0x4cd19a78)
0x4cd19a60   224  sub w6, w6, #0x1 (1)
0x4cd19a64   228  add x2, x5, #0xf (15)
0x4cd19a68   232  ldr d1, [x2, w6, sxtw #3]
0x4cd19a6c   236  add x2, x9, #0xf (15)
0x4cd19a70   240  str d1, [x2, w6, sxtw #3]
0x4cd19a74   244  b #-0x1c (addr 0x4cd19a58)
0x4cd19a78   248  mov x2, x9
0x4cd19a7c   252  stur x2, [x1, #15]
0x4cd19a80   256  add x3, x1, #0xf (15)
0x4cd19a84   260  and x2, x1, #0xfffffffffff00000
0x4cd19a88   264  ldr x2, [x2, #8]
0x4cd19a8c   268  tbz w2, #2, #+0x18 (addr 0x4cd19aa4)
0x4cd19a90   272  sub csp, jssp, #0x8 (8)
0x4cd19a94   276  str lr, [jssp, #-8]!
0x4cd19a98   280  ldr x16, pc+368 (addr 0x000000004cd19c08)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd19a9c   284  blr x16
0x4cd19aa0   288  ldr lr, [jssp], #8
0x4cd19aa4   292  mov x5, x9
0x4cd19aa8   296  add w2, w8, #0x1 (1)
0x4cd19aac   300  lsl x2, x2, #32
0x4cd19ab0   304  stur x2, [x1, #23]
0x4cd19ab4   308  add x1, x5, #0xf (15)
0x4cd19ab8   312  fsub d29, d0, d15
0x4cd19abc   316  str d29, [x1, w8, sxtw #3]
0x4cd19ac0   320  ret
0x4cd19ac4   324  sub csp, jssp, #0x10 (16)
0x4cd19ac8   328  stp fp, lr, [jssp, #-16]!
0x4cd19acc   332  movz fp, #0xa00000000
0x4cd19ad0   336  sub csp, jssp, #0x8 (8)
0x4cd19ad4   340  str fp, [jssp, #-8]!
0x4cd19ad8   344  add fp, jssp, #0x8 (8)
0x4cd19adc   348  ldur x16, [x2, #-1]
0x4cd19ae0   352  ldr x17, [x26, #120]
0x4cd19ae4   356  cmp x16, x17
0x4cd19ae8   360  b.ne #+0x198 (addr 0x4cd19c80)
0x4cd19aec   364  ldur d29, [x2, #7]
0x4cd19af0   368  fcvtzs w8, d29
0x4cd19af4   372  scvtf d1, w8
0x4cd19af8   376  fcmp d29, d1
0x4cd19afc   380  b.ne #+0x184 (addr 0x4cd19c80)
0x4cd19b00   384  ldr lr, [jssp, #16]
0x4cd19b04   388  ldp xzr, fp, [jssp], #24
0x4cd19b08   392  b #-0x158 (addr 0x4cd199b0)
0x4cd19b0c   396  sub csp, jssp, #0x10 (16)
0x4cd19b10   400  stp fp, lr, [jssp, #-16]!
0x4cd19b14   404  movz fp, #0xa00000000
0x4cd19b18   408  sub csp, jssp, #0x8 (8)
0x4cd19b1c   412  str fp, [jssp, #-8]!
0x4cd19b20   416  add fp, jssp, #0x8 (8)
0x4cd19b24   420  ldur x16, [x2, #-1]
0x4cd19b28   424  ldr x17, [x26, #120]
0x4cd19b2c   428  cmp x16, x17
0x4cd19b30   432  b.ne #+0x30 (addr 0x4cd19b60)
0x4cd19b34   436  ldur d30, [x2, #7]
0x4cd19b38   440  fcvtzs x9, d30
0x4cd19b3c   444  cmp x9, #0x1 (1)
0x4cd19b40   448  ccmn x9, #1, #nzcV, vc
0x4cd19b44   452  b.vc #+0x18 (addr 0x4cd19b5c)
0x4cd19b48   456  sub csp, jssp, #0x8 (8)
0x4cd19b4c   460  str lr, [jssp, #-8]!
0x4cd19b50   464  ldr x16, pc+192 (addr 0x000000004cd19c10)    ;; code: STUB, DoubleToIStub, minor: 127554
0x4cd19b54   468  blr x16
0x4cd19b58   472  ldr lr, [jssp], #8
0x4cd19b5c   476  b #+0x24 (addr 0x4cd19b80)
0x4cd19b60   480  ldp x9, x7, [x26, #64]
0x4cd19b64   484  cmp x2, x9
0x4cd19b68   488  cset x9, eq
0x4cd19b6c   492  ccmp x2, x7, #nZcv, ne
0x4cd19b70   496  b.eq #+0x10 (addr 0x4cd19b80)
0x4cd19b74   500  ldr x16, [x26, #40]
0x4cd19b78   504  cmp x2, x16
0x4cd19b7c   508  b.ne #+0x10c (addr 0x4cd19c88)
0x4cd19b80   512  ldr lr, [jssp, #16]
0x4cd19b84   516  ldp xzr, fp, [jssp], #24
0x4cd19b88   520  b #-0x1a0 (addr 0x4cd199e8)
0x4cd19b8c   524  sub csp, jssp, #0x10 (16)
0x4cd19b90   528  stp fp, lr, [jssp, #-16]!
0x4cd19b94   532  movz fp, #0xa00000000
0x4cd19b98   536  sub csp, jssp, #0x8 (8)
0x4cd19b9c   540  str fp, [jssp, #-8]!
0x4cd19ba0   544  add fp, jssp, #0x8 (8)
0x4cd19ba4   548  movz x9, #0x0
0x4cd19ba8   552  mov x16, lr
0x4cd19bac   556  ldr x17, pc+108 (addr 0x000000004cd19c18)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd19bb0   560  blr x17
0x4cd19bb4   564  lsl x0, x3, #32
0x4cd19bb8   568  movz x10, #0x100000000
0x4cd19bbc   572  sub csp, jssp, #0x10 (16)
0x4cd19bc0   576  stp x10, x0, [jssp, #-16]!
0x4cd19bc4   580  movz x0, #0x2
0x4cd19bc8   584  movz x1, #0x5b88
0x4cd19bcc   588  movk x1, #0xe2, lsl #16
0x4cd19bd0   592  ldr x16, pc+80 (addr 0x000000004cd19c20)    ;; code: STUB, CEntryStub, minor: 5
0x4cd19bd4   596  blr x16
0x4cd19bd8   600  str x0, [jssp, #72]
0x4cd19bdc   604  ldr x16, pc+76 (addr 0x000000004cd19c28)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd19be0   608  blr x16
0x4cd19be4   612  ldr lr, [jssp, #16]
0x4cd19be8   616  ldp xzr, fp, [jssp], #24
0x4cd19bec   620  b #-0x1c0 (addr 0x4cd19a2c)
0x4cd19bf0   624  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd19bf4   628  d63f03e0       constant
0x4cd19bf8   632  fff7ffff       constant
0x4cd19bfc   636  fff7ffff       constant
0x4cd19c00   640  2a8052d9       constant
0x4cd19c04   644  00000000       constant
0x4cd19c08   648  4cd170c0       constant
0x4cd19c0c   652  00000000       constant
0x4cd19c10   656  4cd178a0       constant
0x4cd19c14   660  00000000       constant
0x4cd19c18   664  4cd06820       constant
0x4cd19c1c   668  00000000       constant
0x4cd19c20   672  4cd06260       constant
0x4cd19c24   676  00000000       constant
0x4cd19c28   680  4cd068e0       constant
0x4cd19c2c   684  00000000       constant
0x4cd19c30   688  movz x16, #0x0
0x4cd19c34   692  sub csp, jssp, #0x10 (16)
0x4cd19c38   696  stp fp, lr, [jssp, #-16]!
0x4cd19c3c   700  bl #+0x54 (addr 0x4cd19c90)
0x4cd19c40   704  movz x16, #0x8
0x4cd19c44   708  sub csp, jssp, #0x10 (16)
0x4cd19c48   712  stp fp, lr, [jssp, #-16]!
0x4cd19c4c   716  bl #+0x44 (addr 0x4cd19c90)
0x4cd19c50   720  movz x16, #0x10
0x4cd19c54   724  sub csp, jssp, #0x10 (16)
0x4cd19c58   728  stp fp, lr, [jssp, #-16]!
0x4cd19c5c   732  bl #+0x34 (addr 0x4cd19c90)
0x4cd19c60   736  movz x16, #0x18
0x4cd19c64   740  sub csp, jssp, #0x10 (16)
0x4cd19c68   744  stp fp, lr, [jssp, #-16]!
0x4cd19c6c   748  bl #+0x24 (addr 0x4cd19c90)
0x4cd19c70   752  movz x16, #0x20
0x4cd19c74   756  sub csp, jssp, #0x10 (16)
0x4cd19c78   760  stp fp, lr, [jssp, #-16]!
0x4cd19c7c   764  bl #+0x14 (addr 0x4cd19c90)
0x4cd19c80   768  movz x16, #0x28
0x4cd19c84   772  bl #+0x1c (addr 0x4cd19ca0)
0x4cd19c88   776  movz x16, #0x30
0x4cd19c8c   780  bl #+0x14 (addr 0x4cd19ca0)
0x4cd19c90   784  movz x17, #0xa00000000
0x4cd19c94   788  sub csp, jssp, #0x10 (16)
0x4cd19c98   792  stp x17, cp, [jssp, #-16]!
0x4cd19c9c   796  add fp, jssp, #0x10 (16)
0x4cd19ca0   800  ldr x17, pc+24 (addr 0x000000004cd19cb8)    ;; lazy deoptimization bailout 0
0x4cd19ca4   804  add x17, x17, x16
0x4cd19ca8   808  br x17
0x4cd19cac   812  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd19cb0   816  d63f03e0       constant
0x4cd19cb4   820  d503201f       constant
0x4cd19cb8   824  4cb06000       constant
0x4cd19cbc   828  00000000       constant


Safepoints (size = 21)
0x4cd19bd8   600  000 | x0 | x1 | x5 | x9 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0x4cd19a2c  embedded object  (0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19a98  code target (STUB)  (0x4cd170c0)
0x4cd19b50  code target (STUB)  (0x4cd178a0)
0x4cd19bac  code target (STUB)  (0x4cd06820)
0x4cd19bd0  code target (STUB)  (0x4cd06260)
0x4cd19bdc  code target (STUB)  (0x4cd068e0)
0x4cd19bf0  constant pool (size 64)
0x4cd19ca0  runtime entry
0x4cd19cac  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = TypeofStub
compiler = crankshaft
Instructions (size = 584)
0x4cd19d40     0  tbz w3, #0, #+0x14c (addr 0x4cd19e8c)
0x4cd19d44     4  ldur x0, [x3, #-1]
0x4cd19d48     8  ldr x16, pc+344 (addr 0x000000004cd19ea0)    ;; object: 0x2a804411 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19d4c    12  cmp x0, x16
0x4cd19d50    16  b.eq #+0x134 (addr 0x4cd19e84)
0x4cd19d54    20  ldur x0, [x3, #-1]
0x4cd19d58    24  ldrb w1, [x0, #11]
0x4cd19d5c    28  cmp w1, #0x80 (128)
0x4cd19d60    32  b.lt #+0x11c (addr 0x4cd19e7c)
0x4cd19d64    36  cmp w1, #0x83 (131)
0x4cd19d68    40  b.eq #+0x10c (addr 0x4cd19e74)
0x4cd19d6c    44  cmp w1, #0x80 (128)
0x4cd19d70    48  b.eq #+0xfc (addr 0x4cd19e6c)
0x4cd19d74    52  ldrb w1, [x0, #12]
0x4cd19d78    56  movz w16, #0x12
0x4cd19d7c    60  and w1, w1, w16
0x4cd19d80    64  cmp w1, #0x2 (2)
0x4cd19d84    68  b.eq #+0xe0 (addr 0x4cd19e64)
0x4cd19d88    72  ldr x2, pc+288 (addr 0x000000004cd19ea8)    ;; object: 0x2a804519 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19d8c    76  cmp x0, x2
0x4cd19d90    80  b.eq #+0xcc (addr 0x4cd19e5c)
0x4cd19d94    84  ldr x2, pc+284 (addr 0x000000004cd19eb0)    ;; object: 0x2a804571 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19d98    88  cmp x0, x2
0x4cd19d9c    92  b.eq #+0xb8 (addr 0x4cd19e54)
0x4cd19da0    96  ldr x2, pc+280 (addr 0x000000004cd19eb8)    ;; object: 0x2a8045c9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19da4   100  cmp x0, x2
0x4cd19da8   104  b.eq #+0xa4 (addr 0x4cd19e4c)
0x4cd19dac   108  ldr x2, pc+276 (addr 0x000000004cd19ec0)    ;; object: 0x2a804621 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19db0   112  cmp x0, x2
0x4cd19db4   116  b.eq #+0x90 (addr 0x4cd19e44)
0x4cd19db8   120  ldr x2, pc+272 (addr 0x000000004cd19ec8)    ;; object: 0x2a804679 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19dbc   124  cmp x0, x2
0x4cd19dc0   128  b.eq #+0x7c (addr 0x4cd19e3c)
0x4cd19dc4   132  ldr x2, pc+268 (addr 0x000000004cd19ed0)    ;; object: 0x2a8046d1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19dc8   136  cmp x0, x2
0x4cd19dcc   140  b.eq #+0x68 (addr 0x4cd19e34)
0x4cd19dd0   144  ldr x2, pc+264 (addr 0x000000004cd19ed8)    ;; object: 0x2a804729 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19dd4   148  cmp x0, x2
0x4cd19dd8   152  b.eq #+0x54 (addr 0x4cd19e2c)
0x4cd19ddc   156  ldr x2, pc+260 (addr 0x000000004cd19ee0)    ;; object: 0x2a804781 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19de0   160  cmp x0, x2
0x4cd19de4   164  b.eq #+0x40 (addr 0x4cd19e24)
0x4cd19de8   168  ldr x2, pc+256 (addr 0x000000004cd19ee8)    ;; object: 0x2a8047d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19dec   172  cmp x0, x2
0x4cd19df0   176  b.eq #+0x2c (addr 0x4cd19e1c)
0x4cd19df4   180  ldr x2, pc+252 (addr 0x000000004cd19ef0)    ;; object: 0x2a804831 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19df8   184  cmp x0, x2
0x4cd19dfc   188  b.eq #+0x18 (addr 0x4cd19e14)
0x4cd19e00   192  cbnz w1, #+0xc (addr 0x4cd19e0c)
0x4cd19e04   196  ldr x0, pc+244 (addr 0x000000004cd19ef8)    ;; object: 0x21004499 <String[6]: object>
0x4cd19e08   200  b #+0x88 (addr 0x4cd19e90)
0x4cd19e0c   204  ldr x0, pc+244 (addr 0x000000004cd19f00)    ;; object: 0x21004451 <String[9]: undefined>
0x4cd19e10   208  b #+0x80 (addr 0x4cd19e90)
0x4cd19e14   212  ldr x0, pc+244 (addr 0x000000004cd19f08)    ;; object: 0x21004921 <String[8]: bool8x16>
0x4cd19e18   216  b #+0x78 (addr 0x4cd19e90)
0x4cd19e1c   220  ldr x0, pc+244 (addr 0x000000004cd19f10)    ;; object: 0x21005699 <String[8]: uint8x16>
0x4cd19e20   224  b #+0x70 (addr 0x4cd19e90)
0x4cd19e24   228  ldr x0, pc+244 (addr 0x000000004cd19f18)    ;; object: 0x21005031 <String[7]: int8x16>
0x4cd19e28   232  b #+0x68 (addr 0x4cd19e90)
0x4cd19e2c   236  ldr x0, pc+244 (addr 0x000000004cd19f20)    ;; object: 0x210048a1 <String[8]: bool16x8>
0x4cd19e30   240  b #+0x60 (addr 0x4cd19e90)
0x4cd19e34   244  ldr x0, pc+244 (addr 0x000000004cd19f28)    ;; object: 0x21005619 <String[8]: uint16x8>
0x4cd19e38   248  b #+0x58 (addr 0x4cd19e90)
0x4cd19e3c   252  ldr x0, pc+244 (addr 0x000000004cd19f30)    ;; object: 0x21004fb1 <String[7]: int16x8>
0x4cd19e40   256  b #+0x50 (addr 0x4cd19e90)
0x4cd19e44   260  ldr x0, pc+244 (addr 0x000000004cd19f38)    ;; object: 0x210048e1 <String[8]: bool32x4>
0x4cd19e48   264  b #+0x48 (addr 0x4cd19e90)
0x4cd19e4c   268  ldr x0, pc+244 (addr 0x000000004cd19f40)    ;; object: 0x21005659 <String[8]: uint32x4>
0x4cd19e50   272  b #+0x40 (addr 0x4cd19e90)
0x4cd19e54   276  ldr x0, pc+244 (addr 0x000000004cd19f48)    ;; object: 0x21004ff1 <String[7]: int32x4>
0x4cd19e58   280  b #+0x38 (addr 0x4cd19e90)
0x4cd19e5c   284  ldr x0, pc+244 (addr 0x000000004cd19f50)    ;; object: 0x21004d19 <String[9]: float32x4>
0x4cd19e60   288  b #+0x30 (addr 0x4cd19e90)
0x4cd19e64   292  ldr x0, pc+244 (addr 0x000000004cd19f58)    ;; object: 0x21004da9 <String[8]: function>
0x4cd19e68   296  b #+0x28 (addr 0x4cd19e90)
0x4cd19e6c   300  ldr x0, pc+244 (addr 0x000000004cd19f60)    ;; object: 0x21005559 <String[6]: symbol>
0x4cd19e70   304  b #+0x20 (addr 0x4cd19e90)
0x4cd19e74   308  ldur x0, [x3, #39]
0x4cd19e78   312  b #+0x18 (addr 0x4cd19e90)
0x4cd19e7c   316  ldr x0, pc+236 (addr 0x000000004cd19f68)    ;; object: 0x21005519 <String[6]: string>
0x4cd19e80   320  b #+0x10 (addr 0x4cd19e90)
0x4cd19e84   324  ldr x0, pc+236 (addr 0x000000004cd19f70)    ;; object: 0x21005251 <String[6]: number>
0x4cd19e88   328  b #+0x8 (addr 0x4cd19e90)
0x4cd19e8c   332  ldr x0, pc+236 (addr 0x000000004cd19f78)    ;; object: 0x21005251 <String[6]: number>
0x4cd19e90   336  ret
0x4cd19e94   340  5800075f       constant pool begin (num_const = 58)    ;; constant pool
0x4cd19e98   344  d63f03e0       constant
0x4cd19e9c   348  d503201f       constant
0x4cd19ea0   352  2a804411       constant
0x4cd19ea4   356  00000000       constant
0x4cd19ea8   360  2a804519       constant
0x4cd19eac   364  00000000       constant
0x4cd19eb0   368  2a804571       constant
0x4cd19eb4   372  00000000       constant
0x4cd19eb8   376  2a8045c9       constant
0x4cd19ebc   380  00000000       constant
0x4cd19ec0   384  2a804621       constant
0x4cd19ec4   388  00000000       constant
0x4cd19ec8   392  2a804679       constant
0x4cd19ecc   396  00000000       constant
0x4cd19ed0   400  2a8046d1       constant
0x4cd19ed4   404  00000000       constant
0x4cd19ed8   408  2a804729       constant
0x4cd19edc   412  00000000       constant
0x4cd19ee0   416  2a804781       constant
0x4cd19ee4   420  00000000       constant
0x4cd19ee8   424  2a8047d9       constant
0x4cd19eec   428  00000000       constant
0x4cd19ef0   432  2a804831       constant
0x4cd19ef4   436  00000000       constant
0x4cd19ef8   440  21004499       constant
0x4cd19efc   444  00000000       constant
0x4cd19f00   448  21004451       constant
0x4cd19f04   452  00000000       constant
0x4cd19f08   456  21004921       constant
0x4cd19f0c   460  00000000       constant
0x4cd19f10   464  21005699       constant
0x4cd19f14   468  00000000       constant
0x4cd19f18   472  21005031       constant
0x4cd19f1c   476  00000000       constant
0x4cd19f20   480  210048a1       constant
0x4cd19f24   484  00000000       constant
0x4cd19f28   488  21005619       constant
0x4cd19f2c   492  00000000       constant
0x4cd19f30   496  21004fb1       constant
0x4cd19f34   500  00000000       constant
0x4cd19f38   504  210048e1       constant
0x4cd19f3c   508  00000000       constant
0x4cd19f40   512  21005659       constant
0x4cd19f44   516  00000000       constant
0x4cd19f48   520  21004ff1       constant
0x4cd19f4c   524  00000000       constant
0x4cd19f50   528  21004d19       constant
0x4cd19f54   532  00000000       constant
0x4cd19f58   536  21004da9       constant
0x4cd19f5c   540  00000000       constant
0x4cd19f60   544  21005559       constant
0x4cd19f64   548  00000000       constant
0x4cd19f68   552  21005519       constant
0x4cd19f6c   556  00000000       constant
0x4cd19f70   560  21005251       constant
0x4cd19f74   564  00000000       constant
0x4cd19f78   568  21005251       constant
0x4cd19f7c   572  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 36)
0x4cd19d48  embedded object  (0x2a804411 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19d88  embedded object  (0x2a804519 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19d94  embedded object  (0x2a804571 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19da0  embedded object  (0x2a8045c9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19dac  embedded object  (0x2a804621 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19db8  embedded object  (0x2a804679 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19dc4  embedded object  (0x2a8046d1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19dd0  embedded object  (0x2a804729 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19ddc  embedded object  (0x2a804781 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19de8  embedded object  (0x2a8047d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19df4  embedded object  (0x2a804831 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19e04  embedded object  (0x21004499 <String[6]: object>)
0x4cd19e0c  embedded object  (0x21004451 <String[9]: undefined>)
0x4cd19e14  embedded object  (0x21004921 <String[8]: bool8x16>)
0x4cd19e1c  embedded object  (0x21005699 <String[8]: uint8x16>)
0x4cd19e24  embedded object  (0x21005031 <String[7]: int8x16>)
0x4cd19e2c  embedded object  (0x210048a1 <String[8]: bool16x8>)
0x4cd19e34  embedded object  (0x21005619 <String[8]: uint16x8>)
0x4cd19e3c  embedded object  (0x21004fb1 <String[7]: int16x8>)
0x4cd19e44  embedded object  (0x210048e1 <String[8]: bool32x4>)
0x4cd19e4c  embedded object  (0x21005659 <String[8]: uint32x4>)
0x4cd19e54  embedded object  (0x21004ff1 <String[7]: int32x4>)
0x4cd19e5c  embedded object  (0x21004d19 <String[9]: float32x4>)
0x4cd19e64  embedded object  (0x21004da9 <String[8]: function>)
0x4cd19e6c  embedded object  (0x21005559 <String[6]: symbol>)
0x4cd19e7c  embedded object  (0x21005519 <String[6]: string>)
0x4cd19e84  embedded object  (0x21005251 <String[6]: number>)
0x4cd19e8c  embedded object  (0x21005251 <String[6]: number>)
0x4cd19e94  constant pool (size 236)

--- End code ---
kind = STUB
major_key = TypeofStub
name = TypeofStub
compiler = crankshaft
Instructions (size = 584)
0x4cd19d40     0  tbz w3, #0, #+0x14c (addr 0x4cd19e8c)
0x4cd19d44     4  ldur x0, [x3, #-1]
0x4cd19d48     8  ldr x16, pc+344 (addr 0x000000004cd19ea0)    ;; object: 0x2a804411 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19d4c    12  cmp x0, x16
0x4cd19d50    16  b.eq #+0x134 (addr 0x4cd19e84)
0x4cd19d54    20  ldur x0, [x3, #-1]
0x4cd19d58    24  ldrb w1, [x0, #11]
0x4cd19d5c    28  cmp w1, #0x80 (128)
0x4cd19d60    32  b.lt #+0x11c (addr 0x4cd19e7c)
0x4cd19d64    36  cmp w1, #0x83 (131)
0x4cd19d68    40  b.eq #+0x10c (addr 0x4cd19e74)
0x4cd19d6c    44  cmp w1, #0x80 (128)
0x4cd19d70    48  b.eq #+0xfc (addr 0x4cd19e6c)
0x4cd19d74    52  ldrb w1, [x0, #12]
0x4cd19d78    56  movz w16, #0x12
0x4cd19d7c    60  and w1, w1, w16
0x4cd19d80    64  cmp w1, #0x2 (2)
0x4cd19d84    68  b.eq #+0xe0 (addr 0x4cd19e64)
0x4cd19d88    72  ldr x2, pc+288 (addr 0x000000004cd19ea8)    ;; object: 0x2a804519 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19d8c    76  cmp x0, x2
0x4cd19d90    80  b.eq #+0xcc (addr 0x4cd19e5c)
0x4cd19d94    84  ldr x2, pc+284 (addr 0x000000004cd19eb0)    ;; object: 0x2a804571 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19d98    88  cmp x0, x2
0x4cd19d9c    92  b.eq #+0xb8 (addr 0x4cd19e54)
0x4cd19da0    96  ldr x2, pc+280 (addr 0x000000004cd19eb8)    ;; object: 0x2a8045c9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19da4   100  cmp x0, x2
0x4cd19da8   104  b.eq #+0xa4 (addr 0x4cd19e4c)
0x4cd19dac   108  ldr x2, pc+276 (addr 0x000000004cd19ec0)    ;; object: 0x2a804621 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19db0   112  cmp x0, x2
0x4cd19db4   116  b.eq #+0x90 (addr 0x4cd19e44)
0x4cd19db8   120  ldr x2, pc+272 (addr 0x000000004cd19ec8)    ;; object: 0x2a804679 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19dbc   124  cmp x0, x2
0x4cd19dc0   128  b.eq #+0x7c (addr 0x4cd19e3c)
0x4cd19dc4   132  ldr x2, pc+268 (addr 0x000000004cd19ed0)    ;; object: 0x2a8046d1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19dc8   136  cmp x0, x2
0x4cd19dcc   140  b.eq #+0x68 (addr 0x4cd19e34)
0x4cd19dd0   144  ldr x2, pc+264 (addr 0x000000004cd19ed8)    ;; object: 0x2a804729 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19dd4   148  cmp x0, x2
0x4cd19dd8   152  b.eq #+0x54 (addr 0x4cd19e2c)
0x4cd19ddc   156  ldr x2, pc+260 (addr 0x000000004cd19ee0)    ;; object: 0x2a804781 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19de0   160  cmp x0, x2
0x4cd19de4   164  b.eq #+0x40 (addr 0x4cd19e24)
0x4cd19de8   168  ldr x2, pc+256 (addr 0x000000004cd19ee8)    ;; object: 0x2a8047d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19dec   172  cmp x0, x2
0x4cd19df0   176  b.eq #+0x2c (addr 0x4cd19e1c)
0x4cd19df4   180  ldr x2, pc+252 (addr 0x000000004cd19ef0)    ;; object: 0x2a804831 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd19df8   184  cmp x0, x2
0x4cd19dfc   188  b.eq #+0x18 (addr 0x4cd19e14)
0x4cd19e00   192  cbnz w1, #+0xc (addr 0x4cd19e0c)
0x4cd19e04   196  ldr x0, pc+244 (addr 0x000000004cd19ef8)    ;; object: 0x21004499 <String[6]: object>
0x4cd19e08   200  b #+0x88 (addr 0x4cd19e90)
0x4cd19e0c   204  ldr x0, pc+244 (addr 0x000000004cd19f00)    ;; object: 0x21004451 <String[9]: undefined>
0x4cd19e10   208  b #+0x80 (addr 0x4cd19e90)
0x4cd19e14   212  ldr x0, pc+244 (addr 0x000000004cd19f08)    ;; object: 0x21004921 <String[8]: bool8x16>
0x4cd19e18   216  b #+0x78 (addr 0x4cd19e90)
0x4cd19e1c   220  ldr x0, pc+244 (addr 0x000000004cd19f10)    ;; object: 0x21005699 <String[8]: uint8x16>
0x4cd19e20   224  b #+0x70 (addr 0x4cd19e90)
0x4cd19e24   228  ldr x0, pc+244 (addr 0x000000004cd19f18)    ;; object: 0x21005031 <String[7]: int8x16>
0x4cd19e28   232  b #+0x68 (addr 0x4cd19e90)
0x4cd19e2c   236  ldr x0, pc+244 (addr 0x000000004cd19f20)    ;; object: 0x210048a1 <String[8]: bool16x8>
0x4cd19e30   240  b #+0x60 (addr 0x4cd19e90)
0x4cd19e34   244  ldr x0, pc+244 (addr 0x000000004cd19f28)    ;; object: 0x21005619 <String[8]: uint16x8>
0x4cd19e38   248  b #+0x58 (addr 0x4cd19e90)
0x4cd19e3c   252  ldr x0, pc+244 (addr 0x000000004cd19f30)    ;; object: 0x21004fb1 <String[7]: int16x8>
0x4cd19e40   256  b #+0x50 (addr 0x4cd19e90)
0x4cd19e44   260  ldr x0, pc+244 (addr 0x000000004cd19f38)    ;; object: 0x210048e1 <String[8]: bool32x4>
0x4cd19e48   264  b #+0x48 (addr 0x4cd19e90)
0x4cd19e4c   268  ldr x0, pc+244 (addr 0x000000004cd19f40)    ;; object: 0x21005659 <String[8]: uint32x4>
0x4cd19e50   272  b #+0x40 (addr 0x4cd19e90)
0x4cd19e54   276  ldr x0, pc+244 (addr 0x000000004cd19f48)    ;; object: 0x21004ff1 <String[7]: int32x4>
0x4cd19e58   280  b #+0x38 (addr 0x4cd19e90)
0x4cd19e5c   284  ldr x0, pc+244 (addr 0x000000004cd19f50)    ;; object: 0x21004d19 <String[9]: float32x4>
0x4cd19e60   288  b #+0x30 (addr 0x4cd19e90)
0x4cd19e64   292  ldr x0, pc+244 (addr 0x000000004cd19f58)    ;; object: 0x21004da9 <String[8]: function>
0x4cd19e68   296  b #+0x28 (addr 0x4cd19e90)
0x4cd19e6c   300  ldr x0, pc+244 (addr 0x000000004cd19f60)    ;; object: 0x21005559 <String[6]: symbol>
0x4cd19e70   304  b #+0x20 (addr 0x4cd19e90)
0x4cd19e74   308  ldur x0, [x3, #39]
0x4cd19e78   312  b #+0x18 (addr 0x4cd19e90)
0x4cd19e7c   316  ldr x0, pc+236 (addr 0x000000004cd19f68)    ;; object: 0x21005519 <String[6]: string>
0x4cd19e80   320  b #+0x10 (addr 0x4cd19e90)
0x4cd19e84   324  ldr x0, pc+236 (addr 0x000000004cd19f70)    ;; object: 0x21005251 <String[6]: number>
0x4cd19e88   328  b #+0x8 (addr 0x4cd19e90)
0x4cd19e8c   332  ldr x0, pc+236 (addr 0x000000004cd19f78)    ;; object: 0x21005251 <String[6]: number>
0x4cd19e90   336  ret
0x4cd19e94   340  5800075f       constant pool begin (num_const = 58)    ;; constant pool
0x4cd19e98   344  d63f03e0       constant
0x4cd19e9c   348  d503201f       constant
0x4cd19ea0   352  2a804411       constant
0x4cd19ea4   356  00000000       constant
0x4cd19ea8   360  2a804519       constant
0x4cd19eac   364  00000000       constant
0x4cd19eb0   368  2a804571       constant
0x4cd19eb4   372  00000000       constant
0x4cd19eb8   376  2a8045c9       constant
0x4cd19ebc   380  00000000       constant
0x4cd19ec0   384  2a804621       constant
0x4cd19ec4   388  00000000       constant
0x4cd19ec8   392  2a804679       constant
0x4cd19ecc   396  00000000       constant
0x4cd19ed0   400  2a8046d1       constant
0x4cd19ed4   404  00000000       constant
0x4cd19ed8   408  2a804729       constant
0x4cd19edc   412  00000000       constant
0x4cd19ee0   416  2a804781       constant
0x4cd19ee4   420  00000000       constant
0x4cd19ee8   424  2a8047d9       constant
0x4cd19eec   428  00000000       constant
0x4cd19ef0   432  2a804831       constant
0x4cd19ef4   436  00000000       constant
0x4cd19ef8   440  21004499       constant
0x4cd19efc   444  00000000       constant
0x4cd19f00   448  21004451       constant
0x4cd19f04   452  00000000       constant
0x4cd19f08   456  21004921       constant
0x4cd19f0c   460  00000000       constant
0x4cd19f10   464  21005699       constant
0x4cd19f14   468  00000000       constant
0x4cd19f18   472  21005031       constant
0x4cd19f1c   476  00000000       constant
0x4cd19f20   480  210048a1       constant
0x4cd19f24   484  00000000       constant
0x4cd19f28   488  21005619       constant
0x4cd19f2c   492  00000000       constant
0x4cd19f30   496  21004fb1       constant
0x4cd19f34   500  00000000       constant
0x4cd19f38   504  210048e1       constant
0x4cd19f3c   508  00000000       constant
0x4cd19f40   512  21005659       constant
0x4cd19f44   516  00000000       constant
0x4cd19f48   520  21004ff1       constant
0x4cd19f4c   524  00000000       constant
0x4cd19f50   528  21004d19       constant
0x4cd19f54   532  00000000       constant
0x4cd19f58   536  21004da9       constant
0x4cd19f5c   540  00000000       constant
0x4cd19f60   544  21005559       constant
0x4cd19f64   548  00000000       constant
0x4cd19f68   552  21005519       constant
0x4cd19f6c   556  00000000       constant
0x4cd19f70   560  21005251       constant
0x4cd19f74   564  00000000       constant
0x4cd19f78   568  21005251       constant
0x4cd19f7c   572  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 36)
0x4cd19d48  embedded object  (0x2a804411 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19d88  embedded object  (0x2a804519 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19d94  embedded object  (0x2a804571 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19da0  embedded object  (0x2a8045c9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19dac  embedded object  (0x2a804621 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19db8  embedded object  (0x2a804679 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19dc4  embedded object  (0x2a8046d1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19dd0  embedded object  (0x2a804729 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19ddc  embedded object  (0x2a804781 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19de8  embedded object  (0x2a8047d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19df4  embedded object  (0x2a804831 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd19e04  embedded object  (0x21004499 <String[6]: object>)
0x4cd19e0c  embedded object  (0x21004451 <String[9]: undefined>)
0x4cd19e14  embedded object  (0x21004921 <String[8]: bool8x16>)
0x4cd19e1c  embedded object  (0x21005699 <String[8]: uint8x16>)
0x4cd19e24  embedded object  (0x21005031 <String[7]: int8x16>)
0x4cd19e2c  embedded object  (0x210048a1 <String[8]: bool16x8>)
0x4cd19e34  embedded object  (0x21005619 <String[8]: uint16x8>)
0x4cd19e3c  embedded object  (0x21004fb1 <String[7]: int16x8>)
0x4cd19e44  embedded object  (0x210048e1 <String[8]: bool32x4>)
0x4cd19e4c  embedded object  (0x21005659 <String[8]: uint32x4>)
0x4cd19e54  embedded object  (0x21004ff1 <String[7]: int32x4>)
0x4cd19e5c  embedded object  (0x21004d19 <String[9]: float32x4>)
0x4cd19e64  embedded object  (0x21004da9 <String[8]: function>)
0x4cd19e6c  embedded object  (0x21005559 <String[6]: symbol>)
0x4cd19e7c  embedded object  (0x21005519 <String[6]: string>)
0x4cd19e84  embedded object  (0x21005251 <String[6]: number>)
0x4cd19e8c  embedded object  (0x21005251 <String[6]: number>)
0x4cd19e94  constant pool (size 236)


kind = STUB
major_key = JSEntryStub
name = JSEntryStub
compiler = unknown
Instructions (size = 400)
0x4cd1a000     0  movn xzr, #0x1
0x4cd1a004     4  stp d14, d15, [csp, #-16]!
0x4cd1a008     8  stp d12, d13, [csp, #-16]!
0x4cd1a00c    12  stp d10, d11, [csp, #-16]!
0x4cd1a010    16  stp d8, d9, [csp, #-16]!
0x4cd1a014    20  stp fp, lr, [csp, #-16]!
0x4cd1a018    24  stp cp, jssp, [csp, #-16]!
0x4cd1a01c    28  stp x25, x26, [csp, #-16]!
0x4cd1a020    32  stp x23, x24, [csp, #-16]!
0x4cd1a024    36  stp x21, x22, [csp, #-16]!
0x4cd1a028    40  stp x19, x20, [csp, #-16]!
0x4cd1a02c    44  mov jssp, csp
0x4cd1a030    48  mrs x16, fpcr
0x4cd1a034    52  tbnz w16, #25, #+0xc (addr 0x4cd1a040)
0x4cd1a038    56  orr x16, x16, #0x2000000
0x4cd1a03c    60  msr fpcr, x16
0x4cd1a040    64  fmov d15, xzr
0x4cd1a044    68  movn x13, #0x0
0x4cd1a048    72  movz x12, #0x100000000
0x4cd1a04c    76  ldr x11, pc+244 (addr 0x000000004cd1a140)    ;; external reference (Isolate::c_entry_fp_address)
0x4cd1a050    80  ldr x10, [x11]
0x4cd1a054    84  sub csp, jssp, #0x20 (32)
0x4cd1a058    88  stp x10, xzr, [jssp, #-32]!
0x4cd1a05c    92  stp x12, x13, [jssp, #16]
0x4cd1a060    96  add fp, jssp, #0x18 (24)
0x4cd1a064   100  ldr x10, pc+228 (addr 0x000000004cd1a148)    ;; external reference (Isolate::js_entry_sp_address)
0x4cd1a068   104  ldr x11, [x10]
0x4cd1a06c   108  cbnz x11, #+0x18 (addr 0x4cd1a084)
0x4cd1a070   112  str fp, [x10]
0x4cd1a074   116  movz x12, #0x100000000
0x4cd1a078   120  sub csp, jssp, #0x8 (8)
0x4cd1a07c   124  str x12, [jssp, #-8]!
0x4cd1a080   128  b #+0xc (addr 0x4cd1a08c)
0x4cd1a084   132  sub csp, jssp, #0x8 (8)
0x4cd1a088   136  str xzr, [jssp, #-8]!
0x4cd1a08c   140  b #+0x14 (addr 0x4cd1a0a0)
0x4cd1a090   144  ldr x10, pc+192 (addr 0x000000004cd1a150)    ;; external reference (Isolate::pending_exception_address)
0x4cd1a094   148  str x0, [x10]
0x4cd1a098   152  ldr x0, [x26, #344]
0x4cd1a09c   156  b #+0x40 (addr 0x4cd1a0dc)
0x4cd1a0a0   160  ldr x11, pc+184 (addr 0x000000004cd1a158)    ;; external reference (Isolate::handler_address)
0x4cd1a0a4   164  ldr x10, [x11]
0x4cd1a0a8   168  sub csp, jssp, #0x8 (8)
0x4cd1a0ac   172  str x10, [jssp, #-8]!
0x4cd1a0b0   176  str jssp, [x11]
0x4cd1a0b4   180  ldr x10, pc+172 (addr 0x000000004cd1a160)    ;; object: 0x21004519 <the hole>
0x4cd1a0b8   184  ldr x11, pc+176 (addr 0x000000004cd1a168)    ;; external reference (Isolate::pending_exception_address)
0x4cd1a0bc   188  str x10, [x11]
0x4cd1a0c0   192  ldr x10, pc+176 (addr 0x000000004cd1a170)    ;; external reference (Builtins::JSEntryTrampoline)
0x4cd1a0c4   196  ldr x11, [x10]
0x4cd1a0c8   200  add x12, x11, #0x5f (95)
0x4cd1a0cc   204  blr x12
0x4cd1a0d0   208  ldr x10, [jssp], #8
0x4cd1a0d4   212  ldr x11, pc+164 (addr 0x000000004cd1a178)    ;; external reference (Isolate::handler_address)
0x4cd1a0d8   216  str x10, [x11]
0x4cd1a0dc   220  ldr x10, [jssp], #8
0x4cd1a0e0   224  movz x16, #0x100000000
0x4cd1a0e4   228  cmp x10, x16
0x4cd1a0e8   232  b.ne #+0xc (addr 0x4cd1a0f4)
0x4cd1a0ec   236  ldr x11, pc+148 (addr 0x000000004cd1a180)    ;; external reference (Isolate::js_entry_sp_address)
0x4cd1a0f0   240  str xzr, [x11]
0x4cd1a0f4   244  ldr x10, [jssp], #8
0x4cd1a0f8   248  ldr x11, pc+144 (addr 0x000000004cd1a188)    ;; external reference (Isolate::c_entry_fp_address)
0x4cd1a0fc   252  str x10, [x11]
0x4cd1a100   256  add jssp, jssp, #0x18 (24)
0x4cd1a104   260  mov csp, jssp
0x4cd1a108   264  ldp x19, x20, [csp], #16
0x4cd1a10c   268  ldp x21, x22, [csp], #16
0x4cd1a110   272  ldp x23, x24, [csp], #16
0x4cd1a114   276  ldp x25, x26, [csp], #16
0x4cd1a118   280  ldp cp, jssp, [csp], #16
0x4cd1a11c   284  ldp fp, lr, [csp], #16
0x4cd1a120   288  ldp d8, d9, [csp], #16
0x4cd1a124   292  ldp d10, d11, [csp], #16
0x4cd1a128   296  ldp d12, d13, [csp], #16
0x4cd1a12c   300  ldp d14, d15, [csp], #16
0x4cd1a130   304  ret
0x4cd1a134   308  580002df       constant pool begin (num_const = 22)    ;; constant pool
0x4cd1a138   312  d63f03e0       constant
0x4cd1a13c   316  d503201f       constant
0x4cd1a140   320  166dddf8       constant
0x4cd1a144   324  00000000       constant
0x4cd1a148   328  166dde18       constant
0x4cd1a14c   332  00000000       constant
0x4cd1a150   336  166ddda0       constant
0x4cd1a154   340  00000000       constant
0x4cd1a158   344  166dde00       constant
0x4cd1a15c   348  00000000       constant
0x4cd1a160   352  21004519       constant
0x4cd1a164   356  00000000       constant
0x4cd1a168   360  166ddda0       constant
0x4cd1a16c   364  00000000       constant
0x4cd1a170   368  166deb08       constant
0x4cd1a174   372  00000000       constant
0x4cd1a178   376  166dde00       constant
0x4cd1a17c   380  00000000       constant
0x4cd1a180   384  166dde18       constant
0x4cd1a184   388  00000000       constant
0x4cd1a188   392  166dddf8       constant
0x4cd1a18c   396  00000000       constant


Handler Table (size = 24)

RelocInfo (size = 27)
0x4cd1a04c  external reference (Isolate::c_entry_fp_address)  (0x166dddf8)
0x4cd1a064  external reference (Isolate::js_entry_sp_address)  (0x166dde18)
0x4cd1a090  external reference (Isolate::pending_exception_address)  (0x166ddda0)
0x4cd1a0a0  external reference (Isolate::handler_address)  (0x166dde00)
0x4cd1a0b4  embedded object  (0x21004519 <the hole>)
0x4cd1a0b8  external reference (Isolate::pending_exception_address)  (0x166ddda0)
0x4cd1a0c0  external reference (Builtins::JSEntryTrampoline)  (0x166deb08)
0x4cd1a0d4  external reference (Isolate::handler_address)  (0x166dde00)
0x4cd1a0ec  external reference (Isolate::js_entry_sp_address)  (0x166dde18)
0x4cd1a0f8  external reference (Isolate::c_entry_fp_address)  (0x166dddf8)
0x4cd1a134  constant pool (size 92)


kind = STUB
major_key = JSEntryStub
name = JSConstructEntryStub
compiler = unknown
Instructions (size = 400)
0x4cd1a200     0  movn xzr, #0x1
0x4cd1a204     4  stp d14, d15, [csp, #-16]!
0x4cd1a208     8  stp d12, d13, [csp, #-16]!
0x4cd1a20c    12  stp d10, d11, [csp, #-16]!
0x4cd1a210    16  stp d8, d9, [csp, #-16]!
0x4cd1a214    20  stp fp, lr, [csp, #-16]!
0x4cd1a218    24  stp cp, jssp, [csp, #-16]!
0x4cd1a21c    28  stp x25, x26, [csp, #-16]!
0x4cd1a220    32  stp x23, x24, [csp, #-16]!
0x4cd1a224    36  stp x21, x22, [csp, #-16]!
0x4cd1a228    40  stp x19, x20, [csp, #-16]!
0x4cd1a22c    44  mov jssp, csp
0x4cd1a230    48  mrs x16, fpcr
0x4cd1a234    52  tbnz w16, #25, #+0xc (addr 0x4cd1a240)
0x4cd1a238    56  orr x16, x16, #0x2000000
0x4cd1a23c    60  msr fpcr, x16
0x4cd1a240    64  fmov d15, xzr
0x4cd1a244    68  movn x13, #0x0
0x4cd1a248    72  movz x12, #0x200000000
0x4cd1a24c    76  ldr x11, pc+244 (addr 0x000000004cd1a340)    ;; external reference (Isolate::c_entry_fp_address)
0x4cd1a250    80  ldr x10, [x11]
0x4cd1a254    84  sub csp, jssp, #0x20 (32)
0x4cd1a258    88  stp x10, xzr, [jssp, #-32]!
0x4cd1a25c    92  stp x12, x13, [jssp, #16]
0x4cd1a260    96  add fp, jssp, #0x18 (24)
0x4cd1a264   100  ldr x10, pc+228 (addr 0x000000004cd1a348)    ;; external reference (Isolate::js_entry_sp_address)
0x4cd1a268   104  ldr x11, [x10]
0x4cd1a26c   108  cbnz x11, #+0x18 (addr 0x4cd1a284)
0x4cd1a270   112  str fp, [x10]
0x4cd1a274   116  movz x12, #0x100000000
0x4cd1a278   120  sub csp, jssp, #0x8 (8)
0x4cd1a27c   124  str x12, [jssp, #-8]!
0x4cd1a280   128  b #+0xc (addr 0x4cd1a28c)
0x4cd1a284   132  sub csp, jssp, #0x8 (8)
0x4cd1a288   136  str xzr, [jssp, #-8]!
0x4cd1a28c   140  b #+0x14 (addr 0x4cd1a2a0)
0x4cd1a290   144  ldr x10, pc+192 (addr 0x000000004cd1a350)    ;; external reference (Isolate::pending_exception_address)
0x4cd1a294   148  str x0, [x10]
0x4cd1a298   152  ldr x0, [x26, #344]
0x4cd1a29c   156  b #+0x40 (addr 0x4cd1a2dc)
0x4cd1a2a0   160  ldr x11, pc+184 (addr 0x000000004cd1a358)    ;; external reference (Isolate::handler_address)
0x4cd1a2a4   164  ldr x10, [x11]
0x4cd1a2a8   168  sub csp, jssp, #0x8 (8)
0x4cd1a2ac   172  str x10, [jssp, #-8]!
0x4cd1a2b0   176  str jssp, [x11]
0x4cd1a2b4   180  ldr x10, pc+172 (addr 0x000000004cd1a360)    ;; object: 0x21004519 <the hole>
0x4cd1a2b8   184  ldr x11, pc+176 (addr 0x000000004cd1a368)    ;; external reference (Isolate::pending_exception_address)
0x4cd1a2bc   188  str x10, [x11]
0x4cd1a2c0   192  ldr x10, pc+176 (addr 0x000000004cd1a370)    ;; external reference (Builtins::JSConstructEntryTrampoline)
0x4cd1a2c4   196  ldr x11, [x10]
0x4cd1a2c8   200  add x12, x11, #0x5f (95)
0x4cd1a2cc   204  blr x12
0x4cd1a2d0   208  ldr x10, [jssp], #8
0x4cd1a2d4   212  ldr x11, pc+164 (addr 0x000000004cd1a378)    ;; external reference (Isolate::handler_address)
0x4cd1a2d8   216  str x10, [x11]
0x4cd1a2dc   220  ldr x10, [jssp], #8
0x4cd1a2e0   224  movz x16, #0x100000000
0x4cd1a2e4   228  cmp x10, x16
0x4cd1a2e8   232  b.ne #+0xc (addr 0x4cd1a2f4)
0x4cd1a2ec   236  ldr x11, pc+148 (addr 0x000000004cd1a380)    ;; external reference (Isolate::js_entry_sp_address)
0x4cd1a2f0   240  str xzr, [x11]
0x4cd1a2f4   244  ldr x10, [jssp], #8
0x4cd1a2f8   248  ldr x11, pc+144 (addr 0x000000004cd1a388)    ;; external reference (Isolate::c_entry_fp_address)
0x4cd1a2fc   252  str x10, [x11]
0x4cd1a300   256  add jssp, jssp, #0x18 (24)
0x4cd1a304   260  mov csp, jssp
0x4cd1a308   264  ldp x19, x20, [csp], #16
0x4cd1a30c   268  ldp x21, x22, [csp], #16
0x4cd1a310   272  ldp x23, x24, [csp], #16
0x4cd1a314   276  ldp x25, x26, [csp], #16
0x4cd1a318   280  ldp cp, jssp, [csp], #16
0x4cd1a31c   284  ldp fp, lr, [csp], #16
0x4cd1a320   288  ldp d8, d9, [csp], #16
0x4cd1a324   292  ldp d10, d11, [csp], #16
0x4cd1a328   296  ldp d12, d13, [csp], #16
0x4cd1a32c   300  ldp d14, d15, [csp], #16
0x4cd1a330   304  ret
0x4cd1a334   308  580002df       constant pool begin (num_const = 22)    ;; constant pool
0x4cd1a338   312  d63f03e0       constant
0x4cd1a33c   316  d503201f       constant
0x4cd1a340   320  166dddf8       constant
0x4cd1a344   324  00000000       constant
0x4cd1a348   328  166dde18       constant
0x4cd1a34c   332  00000000       constant
0x4cd1a350   336  166ddda0       constant
0x4cd1a354   340  00000000       constant
0x4cd1a358   344  166dde00       constant
0x4cd1a35c   348  00000000       constant
0x4cd1a360   352  21004519       constant
0x4cd1a364   356  00000000       constant
0x4cd1a368   360  166ddda0       constant
0x4cd1a36c   364  00000000       constant
0x4cd1a370   368  166deb10       constant
0x4cd1a374   372  00000000       constant
0x4cd1a378   376  166dde00       constant
0x4cd1a37c   380  00000000       constant
0x4cd1a380   384  166dde18       constant
0x4cd1a384   388  00000000       constant
0x4cd1a388   392  166dddf8       constant
0x4cd1a38c   396  00000000       constant


Handler Table (size = 24)

RelocInfo (size = 27)
0x4cd1a24c  external reference (Isolate::c_entry_fp_address)  (0x166dddf8)
0x4cd1a264  external reference (Isolate::js_entry_sp_address)  (0x166dde18)
0x4cd1a290  external reference (Isolate::pending_exception_address)  (0x166ddda0)
0x4cd1a2a0  external reference (Isolate::handler_address)  (0x166dde00)
0x4cd1a2b4  embedded object  (0x21004519 <the hole>)
0x4cd1a2b8  external reference (Isolate::pending_exception_address)  (0x166ddda0)
0x4cd1a2c0  external reference (Builtins::JSConstructEntryTrampoline)  (0x166deb10)
0x4cd1a2d4  external reference (Isolate::handler_address)  (0x166dde00)
0x4cd1a2ec  external reference (Isolate::js_entry_sp_address)  (0x166dde18)
0x4cd1a2f8  external reference (Isolate::c_entry_fp_address)  (0x166dddf8)
0x4cd1a334  constant pool (size 92)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ToObjectStub
compiler = crankshaft
Instructions (size = 333)
0x4cd1e440     0  tbz w0, #0, #+0x20 (addr 0x4cd1e460)
0x4cd1e444     4  ldur x1, [x0, #-1]
0x4cd1e448     8  ldrb w2, [x1, #11]
0x4cd1e44c    12  cmp w2, #0xb1 (177)
0x4cd1e450    16  b.ge #+0x5c (addr 0x4cd1e4ac)
0x4cd1e454    20  ldrb w1, [x1, #8]
0x4cd1e458    24  cbnz w1, #+0xc (addr 0x4cd1e464)
0x4cd1e45c    28  b #+0xdc (addr 0x4cd1e538)
0x4cd1e460    32  movz x1, #0x3f
0x4cd1e464    36  ldur x2, [cp, #39]
0x4cd1e468    40  add x3, x2, #0xf (15)
0x4cd1e46c    44  ldr x4, [x3, w1, sxtw #3]
0x4cd1e470    48  ldur x1, [x4, #23]
0x4cd1e474    52  movz x3, #0xd2c0
0x4cd1e478    56  movk x3, #0x166d, lsl #16
0x4cd1e47c    60  ldp x4, x2, [x3]
0x4cd1e480    64  adds x16, x4, #0x20 (32)
0x4cd1e484    68  ccmp x16, x2, #nzCv, lo
0x4cd1e488    72  b.hi #+0x28 (addr 0x4cd1e4b0)
0x4cd1e48c    76  str x16, [x3]
0x4cd1e490    80  orr x4, x4, #0x1
0x4cd1e494    84  stur x1, [x4, #-1]
0x4cd1e498    88  ldr x1, [x26, #304]
0x4cd1e49c    92  stur x1, [x4, #7]
0x4cd1e4a0    96  stur x1, [x4, #15]
0x4cd1e4a4   100  stur x0, [x4, #23]
0x4cd1e4a8   104  mov x0, x4
0x4cd1e4ac   108  ret
0x4cd1e4b0   112  sub csp, jssp, #0x10 (16)
0x4cd1e4b4   116  stp fp, lr, [jssp, #-16]!
0x4cd1e4b8   120  movz fp, #0xa00000000
0x4cd1e4bc   124  sub csp, jssp, #0x8 (8)
0x4cd1e4c0   128  str fp, [jssp, #-8]!
0x4cd1e4c4   132  add fp, jssp, #0x8 (8)
0x4cd1e4c8   136  movz x4, #0x0
0x4cd1e4cc   140  mov x16, lr
0x4cd1e4d0   144  ldr x17, pc+80 (addr 0x000000004cd1e520)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd1e4d4   148  blr x17
0x4cd1e4d8   152  movz x0, #0x2000000000
0x4cd1e4dc   156  movz x10, #0x0
0x4cd1e4e0   160  sub csp, jssp, #0x10 (16)
0x4cd1e4e4   164  stp x10, x0, [jssp, #-16]!
0x4cd1e4e8   168  movz x0, #0x2
0x4cd1e4ec   172  movz x1, #0x5b88
0x4cd1e4f0   176  movk x1, #0xe2, lsl #16
0x4cd1e4f4   180  ldr x16, pc+52 (addr 0x000000004cd1e528)    ;; code: STUB, CEntryStub, minor: 5
0x4cd1e4f8   184  blr x16
0x4cd1e4fc   188  str x0, [jssp, #32]
0x4cd1e500   192  ldr x16, pc+48 (addr 0x000000004cd1e530)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd1e504   196  blr x16
0x4cd1e508   200  ldr lr, [jssp, #16]
0x4cd1e50c   204  ldp xzr, fp, [jssp], #24
0x4cd1e510   208  b #-0x7c (addr 0x4cd1e494)
0x4cd1e514   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd1e518   216  d63f03e0       constant
0x4cd1e51c   220  d503201f       constant
0x4cd1e520   224  4cd06820       constant
0x4cd1e524   228  00000000       constant
0x4cd1e528   232  4cd06260       constant
0x4cd1e52c   236  00000000       constant
0x4cd1e530   240  4cd068e0       constant
0x4cd1e534   244  00000000       constant
0x4cd1e538   248  movz x16, #0x0
0x4cd1e53c   252  sub csp, jssp, #0x10 (16)
0x4cd1e540   256  stp fp, lr, [jssp, #-16]!
0x4cd1e544   260  bl #+0x4 (addr 0x4cd1e548)
0x4cd1e548   264  movz x17, #0xa00000000
0x4cd1e54c   268  sub csp, jssp, #0x10 (16)
0x4cd1e550   272  stp x17, cp, [jssp, #-16]!
0x4cd1e554   276  add fp, jssp, #0x10 (16)
0x4cd1e558   280  ldr x17, pc+24 (addr 0x000000004cd1e570)    ;; lazy deoptimization bailout 0
0x4cd1e55c   284  add x17, x17, x16
0x4cd1e560   288  br x17
0x4cd1e564   292  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd1e568   296  d63f03e0       constant
0x4cd1e56c   300  d503201f       constant
0x4cd1e570   304  4cb06000       constant
0x4cd1e574   308  00000000       constant


Safepoints (size = 21)
0x4cd1e4fc   188  000 | x0 | x1 | x4 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 21)
0x4cd1e4d0  code target (STUB)  (0x4cd06820)
0x4cd1e4f4  code target (STUB)  (0x4cd06260)
0x4cd1e500  code target (STUB)  (0x4cd068e0)
0x4cd1e514  constant pool (size 36)
0x4cd1e558  runtime entry
0x4cd1e564  constant pool (size 20)

--- End code ---
kind = STUB
major_key = ToObjectStub
name = ToObjectStub
compiler = crankshaft
Instructions (size = 333)
0x4cd1e440     0  tbz w0, #0, #+0x20 (addr 0x4cd1e460)
0x4cd1e444     4  ldur x1, [x0, #-1]
0x4cd1e448     8  ldrb w2, [x1, #11]
0x4cd1e44c    12  cmp w2, #0xb1 (177)
0x4cd1e450    16  b.ge #+0x5c (addr 0x4cd1e4ac)
0x4cd1e454    20  ldrb w1, [x1, #8]
0x4cd1e458    24  cbnz w1, #+0xc (addr 0x4cd1e464)
0x4cd1e45c    28  b #+0xdc (addr 0x4cd1e538)
0x4cd1e460    32  movz x1, #0x3f
0x4cd1e464    36  ldur x2, [cp, #39]
0x4cd1e468    40  add x3, x2, #0xf (15)
0x4cd1e46c    44  ldr x4, [x3, w1, sxtw #3]
0x4cd1e470    48  ldur x1, [x4, #23]
0x4cd1e474    52  movz x3, #0xd2c0
0x4cd1e478    56  movk x3, #0x166d, lsl #16
0x4cd1e47c    60  ldp x4, x2, [x3]
0x4cd1e480    64  adds x16, x4, #0x20 (32)
0x4cd1e484    68  ccmp x16, x2, #nzCv, lo
0x4cd1e488    72  b.hi #+0x28 (addr 0x4cd1e4b0)
0x4cd1e48c    76  str x16, [x3]
0x4cd1e490    80  orr x4, x4, #0x1
0x4cd1e494    84  stur x1, [x4, #-1]
0x4cd1e498    88  ldr x1, [x26, #304]
0x4cd1e49c    92  stur x1, [x4, #7]
0x4cd1e4a0    96  stur x1, [x4, #15]
0x4cd1e4a4   100  stur x0, [x4, #23]
0x4cd1e4a8   104  mov x0, x4
0x4cd1e4ac   108  ret
0x4cd1e4b0   112  sub csp, jssp, #0x10 (16)
0x4cd1e4b4   116  stp fp, lr, [jssp, #-16]!
0x4cd1e4b8   120  movz fp, #0xa00000000
0x4cd1e4bc   124  sub csp, jssp, #0x8 (8)
0x4cd1e4c0   128  str fp, [jssp, #-8]!
0x4cd1e4c4   132  add fp, jssp, #0x8 (8)
0x4cd1e4c8   136  movz x4, #0x0
0x4cd1e4cc   140  mov x16, lr
0x4cd1e4d0   144  ldr x17, pc+80 (addr 0x000000004cd1e520)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd1e4d4   148  blr x17
0x4cd1e4d8   152  movz x0, #0x2000000000
0x4cd1e4dc   156  movz x10, #0x0
0x4cd1e4e0   160  sub csp, jssp, #0x10 (16)
0x4cd1e4e4   164  stp x10, x0, [jssp, #-16]!
0x4cd1e4e8   168  movz x0, #0x2
0x4cd1e4ec   172  movz x1, #0x5b88
0x4cd1e4f0   176  movk x1, #0xe2, lsl #16
0x4cd1e4f4   180  ldr x16, pc+52 (addr 0x000000004cd1e528)    ;; code: STUB, CEntryStub, minor: 5
0x4cd1e4f8   184  blr x16
0x4cd1e4fc   188  str x0, [jssp, #32]
0x4cd1e500   192  ldr x16, pc+48 (addr 0x000000004cd1e530)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd1e504   196  blr x16
0x4cd1e508   200  ldr lr, [jssp, #16]
0x4cd1e50c   204  ldp xzr, fp, [jssp], #24
0x4cd1e510   208  b #-0x7c (addr 0x4cd1e494)
0x4cd1e514   212  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd1e518   216  d63f03e0       constant
0x4cd1e51c   220  d503201f       constant
0x4cd1e520   224  4cd06820       constant
0x4cd1e524   228  00000000       constant
0x4cd1e528   232  4cd06260       constant
0x4cd1e52c   236  00000000       constant
0x4cd1e530   240  4cd068e0       constant
0x4cd1e534   244  00000000       constant
0x4cd1e538   248  movz x16, #0x0
0x4cd1e53c   252  sub csp, jssp, #0x10 (16)
0x4cd1e540   256  stp fp, lr, [jssp, #-16]!
0x4cd1e544   260  bl #+0x4 (addr 0x4cd1e548)
0x4cd1e548   264  movz x17, #0xa00000000
0x4cd1e54c   268  sub csp, jssp, #0x10 (16)
0x4cd1e550   272  stp x17, cp, [jssp, #-16]!
0x4cd1e554   276  add fp, jssp, #0x10 (16)
0x4cd1e558   280  ldr x17, pc+24 (addr 0x000000004cd1e570)    ;; lazy deoptimization bailout 0
0x4cd1e55c   284  add x17, x17, x16
0x4cd1e560   288  br x17
0x4cd1e564   292  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd1e568   296  d63f03e0       constant
0x4cd1e56c   300  d503201f       constant
0x4cd1e570   304  4cb06000       constant
0x4cd1e574   308  00000000       constant


Safepoints (size = 21)
0x4cd1e4fc   188  000 | x0 | x1 | x4 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 21)
0x4cd1e4d0  code target (STUB)  (0x4cd06820)
0x4cd1e4f4  code target (STUB)  (0x4cd06260)
0x4cd1e500  code target (STUB)  (0x4cd068e0)
0x4cd1e514  constant pool (size 36)
0x4cd1e558  runtime entry
0x4cd1e564  constant pool (size 20)


kind = STUB
major_key = FastNewObjectStub
name = FastNewObjectStub
compiler = unknown
Instructions (size = 544)
0x4cd20680     0  ldur x2, [x3, #-1]
0x4cd20684     4  ldrb w2, [x2, #11]
0x4cd20688     8  cmp x2, #0xc9 (201)
0x4cd2068c    12  b.ne #+0x1a8 (addr 0x4cd20834)
0x4cd20690    16  ldur x2, [x3, #23]
0x4cd20694    20  tbz w2, #0, #+0x1a0 (addr 0x4cd20834)
0x4cd20698    24  ldur x0, [x2, #-1]
0x4cd2069c    28  ldrb w0, [x0, #11]
0x4cd206a0    32  cmp x0, #0x84 (132)
0x4cd206a4    36  b.ne #+0x190 (addr 0x4cd20834)
0x4cd206a8    40  ldur x0, [x2, #31]
0x4cd206ac    44  cmp x0, x1
0x4cd206b0    48  b.ne #+0x184 (addr 0x4cd20834)
0x4cd206b4    52  ldrb w4, [x2, #7]
0x4cd206b8    56  ldr x6, pc+416 (addr 0x000000004cd20858)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x4cd206bc    60  ldp x0, x16, [x6]
0x4cd206c0    64  adds x5, x0, x4, lsl #3
0x4cd206c4    68  ccmp x5, x16, #nzCv, lo
0x4cd206c8    72  b.hi #+0x110 (addr 0x4cd207d8)
0x4cd206cc    76  str x5, [x6]
0x4cd206d0    80  mov x1, x0
0x4cd206d4    84  str x2, [x1], #8
0x4cd206d8    88  ldr x3, [x26, #304]
0x4cd206dc    92  stp x3, x3, [x1], #16
0x4cd206e0    96  ldr x6, [x26, #40]
0x4cd206e4   100  ldur w3, [x2, #15]
0x4cd206e8   104  tst w3, #0xe0000000
0x4cd206ec   108  b.ne #+0x30 (addr 0x4cd2071c)
0x4cd206f0   112  subs x16, x5, x1
0x4cd206f4   116  b.le #+0x20 (addr 0x4cd20714)
0x4cd206f8   120  str x6, [x1]
0x4cd206fc   124  and x16, x16, #0x8
0x4cd20700   128  add x1, x1, x16
0x4cd20704   132  b #+0x8 (addr 0x4cd2070c)
0x4cd20708   136  stp x6, x6, [x1], #16
0x4cd2070c   140  cmp x1, x5
0x4cd20710   144  b.lo #-0x8 (addr 0x4cd20708)
0x4cd20714   148  add x0, x0, #0x1 (1)
0x4cd20718   152  ret
0x4cd2071c   156  movz w16, #0x20000000
0x4cd20720   160  sub w3, w3, w16
0x4cd20724   164  stur w3, [x2, #15]
0x4cd20728   168  ldrb w4, [x2, #14]
0x4cd2072c   172  sub x4, x5, x4, lsl #3
0x4cd20730   176  subs x16, x4, x1
0x4cd20734   180  b.le #+0x20 (addr 0x4cd20754)
0x4cd20738   184  str x6, [x1]
0x4cd2073c   188  and x16, x16, #0x8
0x4cd20740   192  add x1, x1, x16
0x4cd20744   196  b #+0x8 (addr 0x4cd2074c)
0x4cd20748   200  stp x6, x6, [x1], #16
0x4cd2074c   204  cmp x1, x4
0x4cd20750   208  b.lo #-0x8 (addr 0x4cd20748)
0x4cd20754   212  ldr x6, [x26, #16]
0x4cd20758   216  subs x16, x5, x1
0x4cd2075c   220  b.le #+0x20 (addr 0x4cd2077c)
0x4cd20760   224  str x6, [x1]
0x4cd20764   228  and x16, x16, #0x8
0x4cd20768   232  add x1, x1, x16
0x4cd2076c   236  b #+0x8 (addr 0x4cd20774)
0x4cd20770   240  stp x6, x6, [x1], #16
0x4cd20774   244  cmp x1, x5
0x4cd20778   248  b.lo #-0x8 (addr 0x4cd20770)
0x4cd2077c   252  add x0, x0, #0x1 (1)
0x4cd20780   256  tst w3, #0xe0000000
0x4cd20784   260  b.eq #+0x8 (addr 0x4cd2078c)
0x4cd20788   264  ret
0x4cd2078c   268  movz x16, #0xc00000000
0x4cd20790   272  sub csp, jssp, #0x10 (16)
0x4cd20794   276  stp fp, lr, [jssp, #-16]!
0x4cd20798   280  sub csp, jssp, #0x10 (16)
0x4cd2079c   284  str x16, [jssp, #-8]!
0x4cd207a0   288  ldr x17, pc+192 (addr 0x000000004cd20860)    ;; object: 0x4cd20621 <Code: STUB>
0x4cd207a4   292  sub csp, jssp, #0x10 (16)
0x4cd207a8   296  str x17, [jssp, #-8]!
0x4cd207ac   300  add fp, jssp, #0x10 (16)
0x4cd207b0   304  sub csp, jssp, #0x10 (16)
0x4cd207b4   308  stp x2, x0, [jssp, #-16]!
0x4cd207b8   312  movz x0, #0x1
0x4cd207bc   316  ldr x1, pc+172 (addr 0x000000004cd20868)    ;; external reference (Runtime::FinalizeInstanceSize)
0x4cd207c0   320  ldr x16, pc+176 (addr 0x000000004cd20870)    ;; code: STUB, CEntryStub, minor: 4
0x4cd207c4   324  blr x16
0x4cd207c8   328  ldr x0, [jssp], #8
0x4cd207cc   332  mov jssp, fp
0x4cd207d0   336  ldp fp, lr, [jssp], #16
0x4cd207d4   340  ret
0x4cd207d8   344  movz x16, #0xc00000000
0x4cd207dc   348  sub csp, jssp, #0x10 (16)
0x4cd207e0   352  stp fp, lr, [jssp, #-16]!
0x4cd207e4   356  sub csp, jssp, #0x10 (16)
0x4cd207e8   360  str x16, [jssp, #-8]!
0x4cd207ec   364  ldr x17, pc+140 (addr 0x000000004cd20878)    ;; object: 0x4cd20621 <Code: STUB>
0x4cd207f0   368  sub csp, jssp, #0x10 (16)
0x4cd207f4   372  str x17, [jssp, #-8]!
0x4cd207f8   376  add fp, jssp, #0x10 (16)
0x4cd207fc   380  lsl x4, x4, #35
0x4cd20800   384  sub csp, jssp, #0x10 (16)
0x4cd20804   388  stp x4, x2, [jssp, #-16]!
0x4cd20808   392  movz x0, #0x1
0x4cd2080c   396  ldr x1, pc+116 (addr 0x000000004cd20880)    ;; external reference (Runtime::AllocateInNewSpace)
0x4cd20810   400  ldr x16, pc+120 (addr 0x000000004cd20888)    ;; code: STUB, CEntryStub, minor: 4
0x4cd20814   404  blr x16
0x4cd20818   408  ldr x2, [jssp], #8
0x4cd2081c   412  mov jssp, fp
0x4cd20820   416  ldp fp, lr, [jssp], #16
0x4cd20824   420  sub x0, x0, #0x1 (1)
0x4cd20828   424  ldrb w5, [x2, #7]
0x4cd2082c   428  add x5, x0, x5, lsl #3
0x4cd20830   432  b #-0x160 (addr 0x4cd206d0)
0x4cd20834   436  sub csp, jssp, #0x10 (16)
0x4cd20838   440  stp x3, x1, [jssp, #-16]!
0x4cd2083c   444  movz x0, #0x2
0x4cd20840   448  ldr x1, pc+80 (addr 0x000000004cd20890)    ;; external reference (Runtime::NewObject)
0x4cd20844   452  ldr x16, pc+84 (addr 0x000000004cd20898)    ;; code: STUB, CEntryStub, minor: 4
0x4cd20848   456  br x16
0x4cd2084c   460  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0x4cd20850   464  d63f03e0       constant
0x4cd20854   468  d503201f       constant
0x4cd20858   472  166dd2c0       constant
0x4cd2085c   476  00000000       constant
0x4cd20860   480  4cd20621       constant
0x4cd20864   484  00000000       constant
0x4cd20868   488  00e450e0       constant
0x4cd2086c   492  00000000       constant
0x4cd20870   496  4cd06060       constant
0x4cd20874   500  00000000       constant
0x4cd20878   504  4cd20621       constant
0x4cd2087c   508  00000000       constant
0x4cd20880   512  00e25898       constant
0x4cd20884   516  00000000       constant
0x4cd20888   520  4cd06060       constant
0x4cd2088c   524  00000000       constant
0x4cd20890   528  00e44dc0       constant
0x4cd20894   532  00000000       constant
0x4cd20898   536  4cd06060       constant
0x4cd2089c   540  00000000       constant


RelocInfo (size = 21)
0x4cd206b8  external reference (Heap::NewSpaceAllocationTopAddress())  (0x166dd2c0)
0x4cd207a0  embedded object  (0x4cd20621 <Code: STUB>)
0x4cd207bc  external reference (Runtime::FinalizeInstanceSize)  (0xe450e0)
0x4cd207c0  code target (STUB)  (0x4cd06060)
0x4cd207ec  embedded object  (0x4cd20621 <Code: STUB>)
0x4cd2080c  external reference (Runtime::AllocateInNewSpace)  (0xe25898)
0x4cd20810  code target (STUB)  (0x4cd06060)
0x4cd20840  external reference (Runtime::NewObject)  (0xe44dc0)
0x4cd20844  code target (STUB)  (0x4cd06060)
0x4cd2084c  constant pool (size 84)


kind = STUB
major_key = NameDictionaryLookupStub
name = NameDictionaryLookupStub
compiler = unknown
Instructions (size = 616)
0x4cd22620     0  ldursw x3, [x0, #35]
0x4cd22624     4  sub x3, x3, #0x1 (1)
0x4cd22628     8  ldur x4, [x1, #7]
0x4cd2262c    12  ldr x5, [x26, #40]
0x4cd22630    16  add x2, x4, #0x28 (40)
0x4cd22634    20  and x2, x3, x2, lsr #2
0x4cd22638    24  add x2, x2, x2, lsl #1
0x4cd2263c    28  add x2, x0, x2, lsl #3
0x4cd22640    32  ldur x6, [x2, #55]
0x4cd22644    36  cmp x6, x5
0x4cd22648    40  b.eq #+0x238 (addr 0x4cd22880)
0x4cd2264c    44  cmp x6, x1
0x4cd22650    48  b.eq #+0x228 (addr 0x4cd22878)
0x4cd22654    52  add x2, x4, #0x3c (60)
0x4cd22658    56  and x2, x3, x2, lsr #2
0x4cd2265c    60  add x2, x2, x2, lsl #1
0x4cd22660    64  add x2, x0, x2, lsl #3
0x4cd22664    68  ldur x6, [x2, #55]
0x4cd22668    72  cmp x6, x5
0x4cd2266c    76  b.eq #+0x214 (addr 0x4cd22880)
0x4cd22670    80  cmp x6, x1
0x4cd22674    84  b.eq #+0x204 (addr 0x4cd22878)
0x4cd22678    88  add x2, x4, #0x54 (84)
0x4cd2267c    92  and x2, x3, x2, lsr #2
0x4cd22680    96  add x2, x2, x2, lsl #1
0x4cd22684   100  add x2, x0, x2, lsl #3
0x4cd22688   104  ldur x6, [x2, #55]
0x4cd2268c   108  cmp x6, x5
0x4cd22690   112  b.eq #+0x1f0 (addr 0x4cd22880)
0x4cd22694   116  cmp x6, x1
0x4cd22698   120  b.eq #+0x1e0 (addr 0x4cd22878)
0x4cd2269c   124  add x2, x4, #0x70 (112)
0x4cd226a0   128  and x2, x3, x2, lsr #2
0x4cd226a4   132  add x2, x2, x2, lsl #1
0x4cd226a8   136  add x2, x0, x2, lsl #3
0x4cd226ac   140  ldur x6, [x2, #55]
0x4cd226b0   144  cmp x6, x5
0x4cd226b4   148  b.eq #+0x1cc (addr 0x4cd22880)
0x4cd226b8   152  cmp x6, x1
0x4cd226bc   156  b.eq #+0x1bc (addr 0x4cd22878)
0x4cd226c0   160  add x2, x4, #0x90 (144)
0x4cd226c4   164  and x2, x3, x2, lsr #2
0x4cd226c8   168  add x2, x2, x2, lsl #1
0x4cd226cc   172  add x2, x0, x2, lsl #3
0x4cd226d0   176  ldur x6, [x2, #55]
0x4cd226d4   180  cmp x6, x5
0x4cd226d8   184  b.eq #+0x1a8 (addr 0x4cd22880)
0x4cd226dc   188  cmp x6, x1
0x4cd226e0   192  b.eq #+0x198 (addr 0x4cd22878)
0x4cd226e4   196  add x2, x4, #0xb4 (180)
0x4cd226e8   200  and x2, x3, x2, lsr #2
0x4cd226ec   204  add x2, x2, x2, lsl #1
0x4cd226f0   208  add x2, x0, x2, lsl #3
0x4cd226f4   212  ldur x6, [x2, #55]
0x4cd226f8   216  cmp x6, x5
0x4cd226fc   220  b.eq #+0x184 (addr 0x4cd22880)
0x4cd22700   224  cmp x6, x1
0x4cd22704   228  b.eq #+0x174 (addr 0x4cd22878)
0x4cd22708   232  add x2, x4, #0xdc (220)
0x4cd2270c   236  and x2, x3, x2, lsr #2
0x4cd22710   240  add x2, x2, x2, lsl #1
0x4cd22714   244  add x2, x0, x2, lsl #3
0x4cd22718   248  ldur x6, [x2, #55]
0x4cd2271c   252  cmp x6, x5
0x4cd22720   256  b.eq #+0x160 (addr 0x4cd22880)
0x4cd22724   260  cmp x6, x1
0x4cd22728   264  b.eq #+0x150 (addr 0x4cd22878)
0x4cd2272c   268  add x2, x4, #0x108 (264)
0x4cd22730   272  and x2, x3, x2, lsr #2
0x4cd22734   276  add x2, x2, x2, lsl #1
0x4cd22738   280  add x2, x0, x2, lsl #3
0x4cd2273c   284  ldur x6, [x2, #55]
0x4cd22740   288  cmp x6, x5
0x4cd22744   292  b.eq #+0x13c (addr 0x4cd22880)
0x4cd22748   296  cmp x6, x1
0x4cd2274c   300  b.eq #+0x12c (addr 0x4cd22878)
0x4cd22750   304  add x2, x4, #0x138 (312)
0x4cd22754   308  and x2, x3, x2, lsr #2
0x4cd22758   312  add x2, x2, x2, lsl #1
0x4cd2275c   316  add x2, x0, x2, lsl #3
0x4cd22760   320  ldur x6, [x2, #55]
0x4cd22764   324  cmp x6, x5
0x4cd22768   328  b.eq #+0x118 (addr 0x4cd22880)
0x4cd2276c   332  cmp x6, x1
0x4cd22770   336  b.eq #+0x108 (addr 0x4cd22878)
0x4cd22774   340  add x2, x4, #0x16c (364)
0x4cd22778   344  and x2, x3, x2, lsr #2
0x4cd2277c   348  add x2, x2, x2, lsl #1
0x4cd22780   352  add x2, x0, x2, lsl #3
0x4cd22784   356  ldur x6, [x2, #55]
0x4cd22788   360  cmp x6, x5
0x4cd2278c   364  b.eq #+0xf4 (addr 0x4cd22880)
0x4cd22790   368  cmp x6, x1
0x4cd22794   372  b.eq #+0xe4 (addr 0x4cd22878)
0x4cd22798   376  add x2, x4, #0x1a4 (420)
0x4cd2279c   380  and x2, x3, x2, lsr #2
0x4cd227a0   384  add x2, x2, x2, lsl #1
0x4cd227a4   388  add x2, x0, x2, lsl #3
0x4cd227a8   392  ldur x6, [x2, #55]
0x4cd227ac   396  cmp x6, x5
0x4cd227b0   400  b.eq #+0xd0 (addr 0x4cd22880)
0x4cd227b4   404  cmp x6, x1
0x4cd227b8   408  b.eq #+0xc0 (addr 0x4cd22878)
0x4cd227bc   412  add x2, x4, #0x1e0 (480)
0x4cd227c0   416  and x2, x3, x2, lsr #2
0x4cd227c4   420  add x2, x2, x2, lsl #1
0x4cd227c8   424  add x2, x0, x2, lsl #3
0x4cd227cc   428  ldur x6, [x2, #55]
0x4cd227d0   432  cmp x6, x5
0x4cd227d4   436  b.eq #+0xac (addr 0x4cd22880)
0x4cd227d8   440  cmp x6, x1
0x4cd227dc   444  b.eq #+0x9c (addr 0x4cd22878)
0x4cd227e0   448  add x2, x4, #0x220 (544)
0x4cd227e4   452  and x2, x3, x2, lsr #2
0x4cd227e8   456  add x2, x2, x2, lsl #1
0x4cd227ec   460  add x2, x0, x2, lsl #3
0x4cd227f0   464  ldur x6, [x2, #55]
0x4cd227f4   468  cmp x6, x5
0x4cd227f8   472  b.eq #+0x88 (addr 0x4cd22880)
0x4cd227fc   476  cmp x6, x1
0x4cd22800   480  b.eq #+0x78 (addr 0x4cd22878)
0x4cd22804   484  add x2, x4, #0x264 (612)
0x4cd22808   488  and x2, x3, x2, lsr #2
0x4cd2280c   492  add x2, x2, x2, lsl #1
0x4cd22810   496  add x2, x0, x2, lsl #3
0x4cd22814   500  ldur x6, [x2, #55]
0x4cd22818   504  cmp x6, x5
0x4cd2281c   508  b.eq #+0x64 (addr 0x4cd22880)
0x4cd22820   512  cmp x6, x1
0x4cd22824   516  b.eq #+0x54 (addr 0x4cd22878)
0x4cd22828   520  add x2, x4, #0x2ac (684)
0x4cd2282c   524  and x2, x3, x2, lsr #2
0x4cd22830   528  add x2, x2, x2, lsl #1
0x4cd22834   532  add x2, x0, x2, lsl #3
0x4cd22838   536  ldur x6, [x2, #55]
0x4cd2283c   540  cmp x6, x5
0x4cd22840   544  b.eq #+0x40 (addr 0x4cd22880)
0x4cd22844   548  cmp x6, x1
0x4cd22848   552  b.eq #+0x30 (addr 0x4cd22878)
0x4cd2284c   556  add x2, x4, #0x2f8 (760)
0x4cd22850   560  and x2, x3, x2, lsr #2
0x4cd22854   564  add x2, x2, x2, lsl #1
0x4cd22858   568  add x2, x0, x2, lsl #3
0x4cd2285c   572  ldur x6, [x2, #55]
0x4cd22860   576  cmp x6, x5
0x4cd22864   580  b.eq #+0x1c (addr 0x4cd22880)
0x4cd22868   584  cmp x6, x1
0x4cd2286c   588  b.eq #+0xc (addr 0x4cd22878)
0x4cd22870   592  movz x0, #0x0
0x4cd22874   596  ret
0x4cd22878   600  movz x0, #0x1
0x4cd2287c   604  ret
0x4cd22880   608  movz x0, #0x0
0x4cd22884   612  ret


RelocInfo (size = 0)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0x4cd22f80     0  adr xzr, #+0x40 (addr 0x4cd22fc0)
0x4cd22f84     4  adr xzr, #+0x2a8 (addr 0x4cd2322c)
0x4cd22f88     8  ldr x16, pc+1368 (addr 0x000000004cd234e0)    ;; external reference (store_buffer_top)
0x4cd22f8c    12  ldr x10, [x16]
0x4cd22f90    16  str x11, [x10], #8
0x4cd22f94    20  str x10, [x16]
0x4cd22f98    24  tst x10, #0x1ffff
0x4cd22f9c    28  b.eq #+0x8 (addr 0x4cd22fa4)
0x4cd22fa0    32  ret
0x4cd22fa4    36  sub csp, jssp, #0x8 (8)
0x4cd22fa8    40  str lr, [jssp, #-8]!
0x4cd22fac    44  ldr x17, pc+1340 (addr 0x000000004cd234e8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd22fb0    48  blr x17
0x4cd22fb4    52  ldr lr, [jssp], #8
0x4cd22fb8    56  ret
0x4cd22fbc    60  ret
0x4cd22fc0    64  sub csp, jssp, #0x10 (16)
0x4cd22fc4    68  stp x1, x0, [jssp, #-16]!
0x4cd22fc8    72  ldr x10, [x11]
0x4cd22fcc    76  and x16, x10, #0xfffffffffff00000
0x4cd22fd0    80  ldr x16, [x16, #8]
0x4cd22fd4    84  tst x16, #0x18
0x4cd22fd8    88  b.eq #+0x17c (addr 0x4cd23154)
0x4cd22fdc    92  and x16, x4, #0xfffffffffff00000
0x4cd22fe0    96  ldr x16, [x16, #8]
0x4cd22fe4   100  tst x16, #0x18
0x4cd22fe8   104  b.ne #+0x16c (addr 0x4cd23154)
0x4cd22fec   108  and x10, x4, #0xfffffffffff00000
0x4cd22ff0   112  ldr x0, [x10, #104]
0x4cd22ff4   116  subs x0, x0, #0x1 (1)
0x4cd22ff8   120  str x0, [x10, #104]
0x4cd22ffc   124  b.mi #+0xc4 (addr 0x4cd230c0)
0x4cd23000   128  ubfx x16, x4, #8, #12
0x4cd23004   132  and x10, x4, #0xfffffffffff00000
0x4cd23008   136  add x10, x10, x16, lsl #2
0x4cd2300c   140  ubfx x0, x4, #3, #5
0x4cd23010   144  ldr x10, [x10, #360]
0x4cd23014   148  lsr x10, x10, x0
0x4cd23018   152  tbz w10, #0, #+0x8 (addr 0x4cd23020)
0x4cd2301c   156  tbnz w10, #1, #+0x3c (addr 0x4cd23058)
0x4cd23020   160  ldp x1, x0, [jssp], #16
0x4cd23024   164  ldr x16, pc+1228 (addr 0x000000004cd234f0)    ;; external reference (store_buffer_top)
0x4cd23028   168  ldr x10, [x16]
0x4cd2302c   172  str x11, [x10], #8
0x4cd23030   176  str x10, [x16]
0x4cd23034   180  tst x10, #0x1ffff
0x4cd23038   184  b.eq #+0x8 (addr 0x4cd23040)
0x4cd2303c   188  ret
0x4cd23040   192  sub csp, jssp, #0x8 (8)
0x4cd23044   196  str lr, [jssp, #-8]!
0x4cd23048   200  ldr x17, pc+1200 (addr 0x000000004cd234f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2304c   204  blr x17
0x4cd23050   208  ldr lr, [jssp], #8
0x4cd23054   212  ret
0x4cd23058   216  ldr x10, [x11]
0x4cd2305c   220  sub csp, jssp, #0x10 (16)
0x4cd23060   224  stp x4, x11, [jssp, #-16]!
0x4cd23064   228  ubfx x16, x10, #8, #12
0x4cd23068   232  and x0, x10, #0xfffffffffff00000
0x4cd2306c   236  add x0, x0, x16, lsl #2
0x4cd23070   240  ubfx x4, x10, #3, #5
0x4cd23074   244  ldr x11, [x0, #360]
0x4cd23078   248  lsr x11, x11, x4
0x4cd2307c   252  tbz w11, #0, #+0x40 (addr 0x4cd230bc)
0x4cd23080   256  ldp x4, x11, [jssp], #16
0x4cd23084   260  ldp x1, x0, [jssp], #16
0x4cd23088   264  ldr x16, pc+1144 (addr 0x000000004cd23500)    ;; external reference (store_buffer_top)
0x4cd2308c   268  ldr x10, [x16]
0x4cd23090   272  str x11, [x10], #8
0x4cd23094   276  str x10, [x16]
0x4cd23098   280  tst x10, #0x1ffff
0x4cd2309c   284  b.eq #+0x8 (addr 0x4cd230a4)
0x4cd230a0   288  ret
0x4cd230a4   292  sub csp, jssp, #0x8 (8)
0x4cd230a8   296  str lr, [jssp, #-8]!
0x4cd230ac   300  ldr x17, pc+1116 (addr 0x000000004cd23508)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd230b0   304  blr x17
0x4cd230b4   308  ldr lr, [jssp], #8
0x4cd230b8   312  ret
0x4cd230bc   316  ldp x4, x11, [jssp], #16
0x4cd230c0   320  sub csp, jssp, #0x78 (120)
0x4cd230c4   324  stp x14, x15, [jssp, #-32]!
0x4cd230c8   328  stp x18, lr, [jssp, #16]
0x4cd230cc   332  stp x9, x11, [jssp, #-32]!
0x4cd230d0   336  stp x12, x13, [jssp, #16]
0x4cd230d4   340  stp x5, x6, [jssp, #-32]!
0x4cd230d8   344  stp x7, x8, [jssp, #16]
0x4cd230dc   348  stp x2, x3, [jssp, #-24]!
0x4cd230e0   352  str x4, [jssp, #16]
0x4cd230e4   356  mov x0, x4
0x4cd230e8   360  mov x1, x11
0x4cd230ec   364  ldr x2, pc+1060 (addr 0x000000004cd23510)    ;; external reference (isolate)
0x4cd230f0   368  ldr x16, pc+1064 (addr 0x000000004cd23518)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd230f4   372  and csp, jssp, #0xfffffffffffffff0
0x4cd230f8   376  blr x16
0x4cd230fc   380  ldp x4, x5, [jssp, #16]
0x4cd23100   384  ldp x2, x3, [jssp], #32
0x4cd23104   388  ldp x8, x9, [jssp, #16]
0x4cd23108   392  ldp x6, x7, [jssp], #32
0x4cd2310c   396  ldp x13, x14, [jssp, #16]
0x4cd23110   400  ldp x11, x12, [jssp], #32
0x4cd23114   404  ldr lr, [jssp, #16]
0x4cd23118   408  ldp x15, x18, [jssp], #24
0x4cd2311c   412  ldp x1, x0, [jssp], #16
0x4cd23120   416  ldr x16, pc+1024 (addr 0x000000004cd23520)    ;; external reference (store_buffer_top)
0x4cd23124   420  ldr x10, [x16]
0x4cd23128   424  str x11, [x10], #8
0x4cd2312c   428  str x10, [x16]
0x4cd23130   432  tst x10, #0x1ffff
0x4cd23134   436  b.eq #+0x8 (addr 0x4cd2313c)
0x4cd23138   440  ret
0x4cd2313c   444  sub csp, jssp, #0x8 (8)
0x4cd23140   448  str lr, [jssp, #-8]!
0x4cd23144   452  ldr x17, pc+996 (addr 0x000000004cd23528)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd23148   456  blr x17
0x4cd2314c   460  ldr lr, [jssp], #8
0x4cd23150   464  ret
0x4cd23154   468  and x10, x4, #0xfffffffffff00000
0x4cd23158   472  ldr x0, [x10, #104]
0x4cd2315c   476  subs x0, x0, #0x1 (1)
0x4cd23160   480  str x0, [x10, #104]
0x4cd23164   484  b.mi #+0x64 (addr 0x4cd231c8)
0x4cd23168   488  ubfx x16, x4, #8, #12
0x4cd2316c   492  and x10, x4, #0xfffffffffff00000
0x4cd23170   496  add x10, x10, x16, lsl #2
0x4cd23174   500  ubfx x0, x4, #3, #5
0x4cd23178   504  ldr x10, [x10, #360]
0x4cd2317c   508  lsr x10, x10, x0
0x4cd23180   512  tbz w10, #0, #+0x8 (addr 0x4cd23188)
0x4cd23184   516  tbnz w10, #1, #+0xc (addr 0x4cd23190)
0x4cd23188   520  ldp x1, x0, [jssp], #16
0x4cd2318c   524  ret
0x4cd23190   528  ldr x10, [x11]
0x4cd23194   532  sub csp, jssp, #0x10 (16)
0x4cd23198   536  stp x4, x11, [jssp, #-16]!
0x4cd2319c   540  ubfx x16, x10, #8, #12
0x4cd231a0   544  and x0, x10, #0xfffffffffff00000
0x4cd231a4   548  add x0, x0, x16, lsl #2
0x4cd231a8   552  ubfx x4, x10, #3, #5
0x4cd231ac   556  ldr x11, [x0, #360]
0x4cd231b0   560  lsr x11, x11, x4
0x4cd231b4   564  tbz w11, #0, #+0x10 (addr 0x4cd231c4)
0x4cd231b8   568  ldp x4, x11, [jssp], #16
0x4cd231bc   572  ldp x1, x0, [jssp], #16
0x4cd231c0   576  ret
0x4cd231c4   580  ldp x4, x11, [jssp], #16
0x4cd231c8   584  sub csp, jssp, #0x78 (120)
0x4cd231cc   588  stp x14, x15, [jssp, #-32]!
0x4cd231d0   592  stp x18, lr, [jssp, #16]
0x4cd231d4   596  stp x9, x11, [jssp, #-32]!
0x4cd231d8   600  stp x12, x13, [jssp, #16]
0x4cd231dc   604  stp x5, x6, [jssp, #-32]!
0x4cd231e0   608  stp x7, x8, [jssp, #16]
0x4cd231e4   612  stp x2, x3, [jssp, #-24]!
0x4cd231e8   616  str x4, [jssp, #16]
0x4cd231ec   620  mov x0, x4
0x4cd231f0   624  mov x1, x11
0x4cd231f4   628  ldr x2, pc+828 (addr 0x000000004cd23530)    ;; external reference (isolate)
0x4cd231f8   632  ldr x16, pc+832 (addr 0x000000004cd23538)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd231fc   636  and csp, jssp, #0xfffffffffffffff0
0x4cd23200   640  blr x16
0x4cd23204   644  ldp x4, x5, [jssp, #16]
0x4cd23208   648  ldp x2, x3, [jssp], #32
0x4cd2320c   652  ldp x8, x9, [jssp, #16]
0x4cd23210   656  ldp x6, x7, [jssp], #32
0x4cd23214   660  ldp x13, x14, [jssp, #16]
0x4cd23218   664  ldp x11, x12, [jssp], #32
0x4cd2321c   668  ldr lr, [jssp, #16]
0x4cd23220   672  ldp x15, x18, [jssp], #24
0x4cd23224   676  ldp x1, x0, [jssp], #16
0x4cd23228   680  ret
0x4cd2322c   684  sub csp, jssp, #0x10 (16)
0x4cd23230   688  stp x1, x0, [jssp, #-16]!
0x4cd23234   692  ldr x10, [x11]
0x4cd23238   696  and x16, x10, #0xfffffffffff00000
0x4cd2323c   700  ldr x16, [x16, #8]
0x4cd23240   704  tst x16, #0x18
0x4cd23244   708  b.eq #+0x19c (addr 0x4cd233e0)
0x4cd23248   712  and x16, x4, #0xfffffffffff00000
0x4cd2324c   716  ldr x16, [x16, #8]
0x4cd23250   720  tst x16, #0x18
0x4cd23254   724  b.ne #+0x18c (addr 0x4cd233e0)
0x4cd23258   728  and x10, x4, #0xfffffffffff00000
0x4cd2325c   732  ldr x0, [x10, #104]
0x4cd23260   736  subs x0, x0, #0x1 (1)
0x4cd23264   740  str x0, [x10, #104]
0x4cd23268   744  b.mi #+0xe4 (addr 0x4cd2334c)
0x4cd2326c   748  ubfx x16, x4, #8, #12
0x4cd23270   752  and x10, x4, #0xfffffffffff00000
0x4cd23274   756  add x10, x10, x16, lsl #2
0x4cd23278   760  ubfx x0, x4, #3, #5
0x4cd2327c   764  ldr x10, [x10, #360]
0x4cd23280   768  lsr x10, x10, x0
0x4cd23284   772  tbz w10, #0, #+0x8 (addr 0x4cd2328c)
0x4cd23288   776  tbnz w10, #1, #+0x3c (addr 0x4cd232c4)
0x4cd2328c   780  ldp x1, x0, [jssp], #16
0x4cd23290   784  ldr x16, pc+688 (addr 0x000000004cd23540)    ;; external reference (store_buffer_top)
0x4cd23294   788  ldr x10, [x16]
0x4cd23298   792  str x11, [x10], #8
0x4cd2329c   796  str x10, [x16]
0x4cd232a0   800  tst x10, #0x1ffff
0x4cd232a4   804  b.eq #+0x8 (addr 0x4cd232ac)
0x4cd232a8   808  ret
0x4cd232ac   812  sub csp, jssp, #0x8 (8)
0x4cd232b0   816  str lr, [jssp, #-8]!
0x4cd232b4   820  ldr x17, pc+660 (addr 0x000000004cd23548)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd232b8   824  blr x17
0x4cd232bc   828  ldr lr, [jssp], #8
0x4cd232c0   832  ret
0x4cd232c4   836  ldr x10, [x11]
0x4cd232c8   840  and x0, x10, #0xfffffffffff00000
0x4cd232cc   844  ldr x0, [x0, #8]
0x4cd232d0   848  tbz w0, #6, #+0x18 (addr 0x4cd232e8)
0x4cd232d4   852  and x0, x4, #0xfffffffffff00000
0x4cd232d8   856  ldr x0, [x0, #8]
0x4cd232dc   860  movz x16, #0x58
0x4cd232e0   864  tst x0, x16
0x4cd232e4   868  b.eq #+0x68 (addr 0x4cd2334c)
0x4cd232e8   872  sub csp, jssp, #0x10 (16)
0x4cd232ec   876  stp x4, x11, [jssp, #-16]!
0x4cd232f0   880  ubfx x16, x10, #8, #12
0x4cd232f4   884  and x0, x10, #0xfffffffffff00000
0x4cd232f8   888  add x0, x0, x16, lsl #2
0x4cd232fc   892  ubfx x4, x10, #3, #5
0x4cd23300   896  ldr x11, [x0, #360]
0x4cd23304   900  lsr x11, x11, x4
0x4cd23308   904  tbz w11, #0, #+0x40 (addr 0x4cd23348)
0x4cd2330c   908  ldp x4, x11, [jssp], #16
0x4cd23310   912  ldp x1, x0, [jssp], #16
0x4cd23314   916  ldr x16, pc+572 (addr 0x000000004cd23550)    ;; external reference (store_buffer_top)
0x4cd23318   920  ldr x10, [x16]
0x4cd2331c   924  str x11, [x10], #8
0x4cd23320   928  str x10, [x16]
0x4cd23324   932  tst x10, #0x1ffff
0x4cd23328   936  b.eq #+0x8 (addr 0x4cd23330)
0x4cd2332c   940  ret
0x4cd23330   944  sub csp, jssp, #0x8 (8)
0x4cd23334   948  str lr, [jssp, #-8]!
0x4cd23338   952  ldr x17, pc+544 (addr 0x000000004cd23558)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2333c   956  blr x17
0x4cd23340   960  ldr lr, [jssp], #8
0x4cd23344   964  ret
0x4cd23348   968  ldp x4, x11, [jssp], #16
0x4cd2334c   972  sub csp, jssp, #0x78 (120)
0x4cd23350   976  stp x14, x15, [jssp, #-32]!
0x4cd23354   980  stp x18, lr, [jssp, #16]
0x4cd23358   984  stp x9, x11, [jssp, #-32]!
0x4cd2335c   988  stp x12, x13, [jssp, #16]
0x4cd23360   992  stp x5, x6, [jssp, #-32]!
0x4cd23364   996  stp x7, x8, [jssp, #16]
0x4cd23368  1000  stp x2, x3, [jssp, #-24]!
0x4cd2336c  1004  str x4, [jssp, #16]
0x4cd23370  1008  mov x0, x4
0x4cd23374  1012  mov x1, x11
0x4cd23378  1016  ldr x2, pc+488 (addr 0x000000004cd23560)    ;; external reference (isolate)
0x4cd2337c  1020  ldr x16, pc+492 (addr 0x000000004cd23568)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd23380  1024  and csp, jssp, #0xfffffffffffffff0
0x4cd23384  1028  blr x16
0x4cd23388  1032  ldp x4, x5, [jssp, #16]
0x4cd2338c  1036  ldp x2, x3, [jssp], #32
0x4cd23390  1040  ldp x8, x9, [jssp, #16]
0x4cd23394  1044  ldp x6, x7, [jssp], #32
0x4cd23398  1048  ldp x13, x14, [jssp, #16]
0x4cd2339c  1052  ldp x11, x12, [jssp], #32
0x4cd233a0  1056  ldr lr, [jssp, #16]
0x4cd233a4  1060  ldp x15, x18, [jssp], #24
0x4cd233a8  1064  ldp x1, x0, [jssp], #16
0x4cd233ac  1068  ldr x16, pc+452 (addr 0x000000004cd23570)    ;; external reference (store_buffer_top)
0x4cd233b0  1072  ldr x10, [x16]
0x4cd233b4  1076  str x11, [x10], #8
0x4cd233b8  1080  str x10, [x16]
0x4cd233bc  1084  tst x10, #0x1ffff
0x4cd233c0  1088  b.eq #+0x8 (addr 0x4cd233c8)
0x4cd233c4  1092  ret
0x4cd233c8  1096  sub csp, jssp, #0x8 (8)
0x4cd233cc  1100  str lr, [jssp, #-8]!
0x4cd233d0  1104  ldr x17, pc+424 (addr 0x000000004cd23578)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd233d4  1108  blr x17
0x4cd233d8  1112  ldr lr, [jssp], #8
0x4cd233dc  1116  ret
0x4cd233e0  1120  and x10, x4, #0xfffffffffff00000
0x4cd233e4  1124  ldr x0, [x10, #104]
0x4cd233e8  1128  subs x0, x0, #0x1 (1)
0x4cd233ec  1132  str x0, [x10, #104]
0x4cd233f0  1136  b.mi #+0x84 (addr 0x4cd23474)
0x4cd233f4  1140  ubfx x16, x4, #8, #12
0x4cd233f8  1144  and x10, x4, #0xfffffffffff00000
0x4cd233fc  1148  add x10, x10, x16, lsl #2
0x4cd23400  1152  ubfx x0, x4, #3, #5
0x4cd23404  1156  ldr x10, [x10, #360]
0x4cd23408  1160  lsr x10, x10, x0
0x4cd2340c  1164  tbz w10, #0, #+0x8 (addr 0x4cd23414)
0x4cd23410  1168  tbnz w10, #1, #+0xc (addr 0x4cd2341c)
0x4cd23414  1172  ldp x1, x0, [jssp], #16
0x4cd23418  1176  ret
0x4cd2341c  1180  ldr x10, [x11]
0x4cd23420  1184  and x0, x10, #0xfffffffffff00000
0x4cd23424  1188  ldr x0, [x0, #8]
0x4cd23428  1192  tbz w0, #6, #+0x18 (addr 0x4cd23440)
0x4cd2342c  1196  and x0, x4, #0xfffffffffff00000
0x4cd23430  1200  ldr x0, [x0, #8]
0x4cd23434  1204  movz x16, #0x58
0x4cd23438  1208  tst x0, x16
0x4cd2343c  1212  b.eq #+0x38 (addr 0x4cd23474)
0x4cd23440  1216  sub csp, jssp, #0x10 (16)
0x4cd23444  1220  stp x4, x11, [jssp, #-16]!
0x4cd23448  1224  ubfx x16, x10, #8, #12
0x4cd2344c  1228  and x0, x10, #0xfffffffffff00000
0x4cd23450  1232  add x0, x0, x16, lsl #2
0x4cd23454  1236  ubfx x4, x10, #3, #5
0x4cd23458  1240  ldr x11, [x0, #360]
0x4cd2345c  1244  lsr x11, x11, x4
0x4cd23460  1248  tbz w11, #0, #+0x10 (addr 0x4cd23470)
0x4cd23464  1252  ldp x4, x11, [jssp], #16
0x4cd23468  1256  ldp x1, x0, [jssp], #16
0x4cd2346c  1260  ret
0x4cd23470  1264  ldp x4, x11, [jssp], #16
0x4cd23474  1268  sub csp, jssp, #0x78 (120)
0x4cd23478  1272  stp x14, x15, [jssp, #-32]!
0x4cd2347c  1276  stp x18, lr, [jssp, #16]
0x4cd23480  1280  stp x9, x11, [jssp, #-32]!
0x4cd23484  1284  stp x12, x13, [jssp, #16]
0x4cd23488  1288  stp x5, x6, [jssp, #-32]!
0x4cd2348c  1292  stp x7, x8, [jssp, #16]
0x4cd23490  1296  stp x2, x3, [jssp, #-24]!
0x4cd23494  1300  str x4, [jssp, #16]
0x4cd23498  1304  mov x0, x4
0x4cd2349c  1308  mov x1, x11
0x4cd234a0  1312  ldr x2, pc+224 (addr 0x000000004cd23580)    ;; external reference (isolate)
0x4cd234a4  1316  ldr x16, pc+228 (addr 0x000000004cd23588)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd234a8  1320  and csp, jssp, #0xfffffffffffffff0
0x4cd234ac  1324  blr x16
0x4cd234b0  1328  ldp x4, x5, [jssp, #16]
0x4cd234b4  1332  ldp x2, x3, [jssp], #32
0x4cd234b8  1336  ldp x8, x9, [jssp, #16]
0x4cd234bc  1340  ldp x6, x7, [jssp], #32
0x4cd234c0  1344  ldp x13, x14, [jssp, #16]
0x4cd234c4  1348  ldp x11, x12, [jssp], #32
0x4cd234c8  1352  ldr lr, [jssp, #16]
0x4cd234cc  1356  ldp x15, x18, [jssp], #24
0x4cd234d0  1360  ldp x1, x0, [jssp], #16
0x4cd234d4  1364  ret
0x4cd234d8  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd234dc  1372  d63f03e0       constant
0x4cd234e0  1376  166dd8c0       constant
0x4cd234e4  1380  00000000       constant
0x4cd234e8  1384  4cd064c0       constant
0x4cd234ec  1388  00000000       constant
0x4cd234f0  1392  166dd8c0       constant
0x4cd234f4  1396  00000000       constant
0x4cd234f8  1400  4cd064c0       constant
0x4cd234fc  1404  00000000       constant
0x4cd23500  1408  166dd8c0       constant
0x4cd23504  1412  00000000       constant
0x4cd23508  1416  4cd064c0       constant
0x4cd2350c  1420  00000000       constant
0x4cd23510  1424  166dc2d0       constant
0x4cd23514  1428  00000000       constant
0x4cd23518  1432  00c2d958       constant
0x4cd2351c  1436  00000000       constant
0x4cd23520  1440  166dd8c0       constant
0x4cd23524  1444  00000000       constant
0x4cd23528  1448  4cd064c0       constant
0x4cd2352c  1452  00000000       constant
0x4cd23530  1456  166dc2d0       constant
0x4cd23534  1460  00000000       constant
0x4cd23538  1464  00c2d958       constant
0x4cd2353c  1468  00000000       constant
0x4cd23540  1472  166dd8c0       constant
0x4cd23544  1476  00000000       constant
0x4cd23548  1480  4cd064c0       constant
0x4cd2354c  1484  00000000       constant
0x4cd23550  1488  166dd8c0       constant
0x4cd23554  1492  00000000       constant
0x4cd23558  1496  4cd064c0       constant
0x4cd2355c  1500  00000000       constant
0x4cd23560  1504  166dc2d0       constant
0x4cd23564  1508  00000000       constant
0x4cd23568  1512  00c2d958       constant
0x4cd2356c  1516  00000000       constant
0x4cd23570  1520  166dd8c0       constant
0x4cd23574  1524  00000000       constant
0x4cd23578  1528  4cd064c0       constant
0x4cd2357c  1532  00000000       constant
0x4cd23580  1536  166dc2d0       constant
0x4cd23584  1540  00000000       constant
0x4cd23588  1544  00c2d958       constant
0x4cd2358c  1548  00000000       constant


RelocInfo (size = 59)
0x4cd22f88  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd22fac  code target (STUB)  (0x4cd064c0)
0x4cd23024  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd23048  code target (STUB)  (0x4cd064c0)
0x4cd23088  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd230ac  code target (STUB)  (0x4cd064c0)
0x4cd230ec  external reference (isolate)  (0x166dc2d0)
0x4cd230f0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd23120  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd23144  code target (STUB)  (0x4cd064c0)
0x4cd231f4  external reference (isolate)  (0x166dc2d0)
0x4cd231f8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd23290  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd232b4  code target (STUB)  (0x4cd064c0)
0x4cd23314  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd23338  code target (STUB)  (0x4cd064c0)
0x4cd23378  external reference (isolate)  (0x166dc2d0)
0x4cd2337c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd233ac  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd233d0  code target (STUB)  (0x4cd064c0)
0x4cd234a0  external reference (isolate)  (0x166dc2d0)
0x4cd234a4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd234d8  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 536)
0x4cd23600     0  adr xzr, #+0xc (addr 0x4cd2360c)
0x4cd23604     4  adr xzr, #+0xe8 (addr 0x4cd236ec)
0x4cd23608     8  ret
0x4cd2360c    12  sub csp, jssp, #0x10 (16)
0x4cd23610    16  stp x2, x0, [jssp, #-16]!
0x4cd23614    20  and x3, x1, #0xfffffffffff00000
0x4cd23618    24  ldr x0, [x3, #104]
0x4cd2361c    28  subs x0, x0, #0x1 (1)
0x4cd23620    32  str x0, [x3, #104]
0x4cd23624    36  b.mi #+0x64 (addr 0x4cd23688)
0x4cd23628    40  ubfx x16, x1, #8, #12
0x4cd2362c    44  and x3, x1, #0xfffffffffff00000
0x4cd23630    48  add x3, x3, x16, lsl #2
0x4cd23634    52  ubfx x0, x1, #3, #5
0x4cd23638    56  ldr x3, [x3, #360]
0x4cd2363c    60  lsr x3, x3, x0
0x4cd23640    64  tbz w3, #0, #+0x8 (addr 0x4cd23648)
0x4cd23644    68  tbnz w3, #1, #+0xc (addr 0x4cd23650)
0x4cd23648    72  ldp x2, x0, [jssp], #16
0x4cd2364c    76  ret
0x4cd23650    80  ldr x3, [x6]
0x4cd23654    84  sub csp, jssp, #0x10 (16)
0x4cd23658    88  stp x1, x6, [jssp, #-16]!
0x4cd2365c    92  ubfx x16, x3, #8, #12
0x4cd23660    96  and x0, x3, #0xfffffffffff00000
0x4cd23664   100  add x0, x0, x16, lsl #2
0x4cd23668   104  ubfx x1, x3, #3, #5
0x4cd2366c   108  ldr x6, [x0, #360]
0x4cd23670   112  lsr x6, x6, x1
0x4cd23674   116  tbz w6, #0, #+0x10 (addr 0x4cd23684)
0x4cd23678   120  ldp x1, x6, [jssp], #16
0x4cd2367c   124  ldp x2, x0, [jssp], #16
0x4cd23680   128  ret
0x4cd23684   132  ldp x1, x6, [jssp], #16
0x4cd23688   136  sub csp, jssp, #0x78 (120)
0x4cd2368c   140  stp x14, x15, [jssp, #-32]!
0x4cd23690   144  stp x18, lr, [jssp, #16]
0x4cd23694   148  stp x10, x11, [jssp, #-32]!
0x4cd23698   152  stp x12, x13, [jssp, #16]
0x4cd2369c   156  stp x6, x7, [jssp, #-32]!
0x4cd236a0   160  stp x8, x9, [jssp, #16]
0x4cd236a4   164  stp x1, x4, [jssp, #-24]!
0x4cd236a8   168  str x5, [jssp, #16]
0x4cd236ac   172  mov x0, x1
0x4cd236b0   176  mov x1, x6
0x4cd236b4   180  ldr x2, pc+324 (addr 0x000000004cd237f8)    ;; external reference (isolate)
0x4cd236b8   184  ldr x16, pc+328 (addr 0x000000004cd23800)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd236bc   188  and csp, jssp, #0xfffffffffffffff0
0x4cd236c0   192  blr x16
0x4cd236c4   196  ldp x5, x6, [jssp, #16]
0x4cd236c8   200  ldp x1, x4, [jssp], #32
0x4cd236cc   204  ldp x9, x10, [jssp, #16]
0x4cd236d0   208  ldp x7, x8, [jssp], #32
0x4cd236d4   212  ldp x13, x14, [jssp, #16]
0x4cd236d8   216  ldp x11, x12, [jssp], #32
0x4cd236dc   220  ldr lr, [jssp, #16]
0x4cd236e0   224  ldp x15, x18, [jssp], #24
0x4cd236e4   228  ldp x2, x0, [jssp], #16
0x4cd236e8   232  ret
0x4cd236ec   236  sub csp, jssp, #0x10 (16)
0x4cd236f0   240  stp x2, x0, [jssp, #-16]!
0x4cd236f4   244  and x3, x1, #0xfffffffffff00000
0x4cd236f8   248  ldr x0, [x3, #104]
0x4cd236fc   252  subs x0, x0, #0x1 (1)
0x4cd23700   256  str x0, [x3, #104]
0x4cd23704   260  b.mi #+0x84 (addr 0x4cd23788)
0x4cd23708   264  ubfx x16, x1, #8, #12
0x4cd2370c   268  and x3, x1, #0xfffffffffff00000
0x4cd23710   272  add x3, x3, x16, lsl #2
0x4cd23714   276  ubfx x0, x1, #3, #5
0x4cd23718   280  ldr x3, [x3, #360]
0x4cd2371c   284  lsr x3, x3, x0
0x4cd23720   288  tbz w3, #0, #+0x8 (addr 0x4cd23728)
0x4cd23724   292  tbnz w3, #1, #+0xc (addr 0x4cd23730)
0x4cd23728   296  ldp x2, x0, [jssp], #16
0x4cd2372c   300  ret
0x4cd23730   304  ldr x3, [x6]
0x4cd23734   308  and x0, x3, #0xfffffffffff00000
0x4cd23738   312  ldr x0, [x0, #8]
0x4cd2373c   316  tbz w0, #6, #+0x18 (addr 0x4cd23754)
0x4cd23740   320  and x0, x1, #0xfffffffffff00000
0x4cd23744   324  ldr x0, [x0, #8]
0x4cd23748   328  movz x16, #0x58
0x4cd2374c   332  tst x0, x16
0x4cd23750   336  b.eq #+0x38 (addr 0x4cd23788)
0x4cd23754   340  sub csp, jssp, #0x10 (16)
0x4cd23758   344  stp x1, x6, [jssp, #-16]!
0x4cd2375c   348  ubfx x16, x3, #8, #12
0x4cd23760   352  and x0, x3, #0xfffffffffff00000
0x4cd23764   356  add x0, x0, x16, lsl #2
0x4cd23768   360  ubfx x1, x3, #3, #5
0x4cd2376c   364  ldr x6, [x0, #360]
0x4cd23770   368  lsr x6, x6, x1
0x4cd23774   372  tbz w6, #0, #+0x10 (addr 0x4cd23784)
0x4cd23778   376  ldp x1, x6, [jssp], #16
0x4cd2377c   380  ldp x2, x0, [jssp], #16
0x4cd23780   384  ret
0x4cd23784   388  ldp x1, x6, [jssp], #16
0x4cd23788   392  sub csp, jssp, #0x78 (120)
0x4cd2378c   396  stp x14, x15, [jssp, #-32]!
0x4cd23790   400  stp x18, lr, [jssp, #16]
0x4cd23794   404  stp x10, x11, [jssp, #-32]!
0x4cd23798   408  stp x12, x13, [jssp, #16]
0x4cd2379c   412  stp x6, x7, [jssp, #-32]!
0x4cd237a0   416  stp x8, x9, [jssp, #16]
0x4cd237a4   420  stp x1, x4, [jssp, #-24]!
0x4cd237a8   424  str x5, [jssp, #16]
0x4cd237ac   428  mov x0, x1
0x4cd237b0   432  mov x1, x6
0x4cd237b4   436  ldr x2, pc+84 (addr 0x000000004cd23808)    ;; external reference (isolate)
0x4cd237b8   440  ldr x16, pc+88 (addr 0x000000004cd23810)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd237bc   444  and csp, jssp, #0xfffffffffffffff0
0x4cd237c0   448  blr x16
0x4cd237c4   452  ldp x5, x6, [jssp, #16]
0x4cd237c8   456  ldp x1, x4, [jssp], #32
0x4cd237cc   460  ldp x9, x10, [jssp, #16]
0x4cd237d0   464  ldp x7, x8, [jssp], #32
0x4cd237d4   468  ldp x13, x14, [jssp, #16]
0x4cd237d8   472  ldp x11, x12, [jssp], #32
0x4cd237dc   476  ldr lr, [jssp, #16]
0x4cd237e0   480  ldp x15, x18, [jssp], #24
0x4cd237e4   484  ldp x2, x0, [jssp], #16
0x4cd237e8   488  ret
0x4cd237ec   492  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0x4cd237f0   496  d63f03e0       constant
0x4cd237f4   500  d503201f       constant
0x4cd237f8   504  166dc2d0       constant
0x4cd237fc   508  00000000       constant
0x4cd23800   512  00c2d958       constant
0x4cd23804   516  00000000       constant
0x4cd23808   520  166dc2d0       constant
0x4cd2380c   524  00000000       constant
0x4cd23810   528  00c2d958       constant
0x4cd23814   532  00000000       constant


RelocInfo (size = 18)
0x4cd236b4  external reference (isolate)  (0x166dc2d0)
0x4cd236b8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd237b4  external reference (isolate)  (0x166dc2d0)
0x4cd237b8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd237ec  constant pool (size 44)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0x4cd23880     0  adr xzr, #+0x40 (addr 0x4cd238c0)
0x4cd23884     4  adr xzr, #+0x2a8 (addr 0x4cd23b2c)
0x4cd23888     8  ldr x16, pc+1368 (addr 0x000000004cd23de0)    ;; external reference (store_buffer_top)
0x4cd2388c    12  ldr x10, [x16]
0x4cd23890    16  str x6, [x10], #8
0x4cd23894    20  str x10, [x16]
0x4cd23898    24  tst x10, #0x1ffff
0x4cd2389c    28  b.eq #+0x8 (addr 0x4cd238a4)
0x4cd238a0    32  ret
0x4cd238a4    36  sub csp, jssp, #0x8 (8)
0x4cd238a8    40  str lr, [jssp, #-8]!
0x4cd238ac    44  ldr x17, pc+1340 (addr 0x000000004cd23de8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd238b0    48  blr x17
0x4cd238b4    52  ldr lr, [jssp], #8
0x4cd238b8    56  ret
0x4cd238bc    60  ret
0x4cd238c0    64  sub csp, jssp, #0x10 (16)
0x4cd238c4    68  stp x2, x0, [jssp, #-16]!
0x4cd238c8    72  ldr x10, [x6]
0x4cd238cc    76  and x16, x10, #0xfffffffffff00000
0x4cd238d0    80  ldr x16, [x16, #8]
0x4cd238d4    84  tst x16, #0x18
0x4cd238d8    88  b.eq #+0x17c (addr 0x4cd23a54)
0x4cd238dc    92  and x16, x1, #0xfffffffffff00000
0x4cd238e0    96  ldr x16, [x16, #8]
0x4cd238e4   100  tst x16, #0x18
0x4cd238e8   104  b.ne #+0x16c (addr 0x4cd23a54)
0x4cd238ec   108  and x10, x1, #0xfffffffffff00000
0x4cd238f0   112  ldr x0, [x10, #104]
0x4cd238f4   116  subs x0, x0, #0x1 (1)
0x4cd238f8   120  str x0, [x10, #104]
0x4cd238fc   124  b.mi #+0xc4 (addr 0x4cd239c0)
0x4cd23900   128  ubfx x16, x1, #8, #12
0x4cd23904   132  and x10, x1, #0xfffffffffff00000
0x4cd23908   136  add x10, x10, x16, lsl #2
0x4cd2390c   140  ubfx x0, x1, #3, #5
0x4cd23910   144  ldr x10, [x10, #360]
0x4cd23914   148  lsr x10, x10, x0
0x4cd23918   152  tbz w10, #0, #+0x8 (addr 0x4cd23920)
0x4cd2391c   156  tbnz w10, #1, #+0x3c (addr 0x4cd23958)
0x4cd23920   160  ldp x2, x0, [jssp], #16
0x4cd23924   164  ldr x16, pc+1228 (addr 0x000000004cd23df0)    ;; external reference (store_buffer_top)
0x4cd23928   168  ldr x10, [x16]
0x4cd2392c   172  str x6, [x10], #8
0x4cd23930   176  str x10, [x16]
0x4cd23934   180  tst x10, #0x1ffff
0x4cd23938   184  b.eq #+0x8 (addr 0x4cd23940)
0x4cd2393c   188  ret
0x4cd23940   192  sub csp, jssp, #0x8 (8)
0x4cd23944   196  str lr, [jssp, #-8]!
0x4cd23948   200  ldr x17, pc+1200 (addr 0x000000004cd23df8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2394c   204  blr x17
0x4cd23950   208  ldr lr, [jssp], #8
0x4cd23954   212  ret
0x4cd23958   216  ldr x10, [x6]
0x4cd2395c   220  sub csp, jssp, #0x10 (16)
0x4cd23960   224  stp x1, x6, [jssp, #-16]!
0x4cd23964   228  ubfx x16, x10, #8, #12
0x4cd23968   232  and x0, x10, #0xfffffffffff00000
0x4cd2396c   236  add x0, x0, x16, lsl #2
0x4cd23970   240  ubfx x1, x10, #3, #5
0x4cd23974   244  ldr x6, [x0, #360]
0x4cd23978   248  lsr x6, x6, x1
0x4cd2397c   252  tbz w6, #0, #+0x40 (addr 0x4cd239bc)
0x4cd23980   256  ldp x1, x6, [jssp], #16
0x4cd23984   260  ldp x2, x0, [jssp], #16
0x4cd23988   264  ldr x16, pc+1144 (addr 0x000000004cd23e00)    ;; external reference (store_buffer_top)
0x4cd2398c   268  ldr x10, [x16]
0x4cd23990   272  str x6, [x10], #8
0x4cd23994   276  str x10, [x16]
0x4cd23998   280  tst x10, #0x1ffff
0x4cd2399c   284  b.eq #+0x8 (addr 0x4cd239a4)
0x4cd239a0   288  ret
0x4cd239a4   292  sub csp, jssp, #0x8 (8)
0x4cd239a8   296  str lr, [jssp, #-8]!
0x4cd239ac   300  ldr x17, pc+1116 (addr 0x000000004cd23e08)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd239b0   304  blr x17
0x4cd239b4   308  ldr lr, [jssp], #8
0x4cd239b8   312  ret
0x4cd239bc   316  ldp x1, x6, [jssp], #16
0x4cd239c0   320  sub csp, jssp, #0x78 (120)
0x4cd239c4   324  stp x14, x15, [jssp, #-32]!
0x4cd239c8   328  stp x18, lr, [jssp, #16]
0x4cd239cc   332  stp x9, x11, [jssp, #-32]!
0x4cd239d0   336  stp x12, x13, [jssp, #16]
0x4cd239d4   340  stp x5, x6, [jssp, #-32]!
0x4cd239d8   344  stp x7, x8, [jssp, #16]
0x4cd239dc   348  stp x1, x3, [jssp, #-24]!
0x4cd239e0   352  str x4, [jssp, #16]
0x4cd239e4   356  mov x0, x1
0x4cd239e8   360  mov x1, x6
0x4cd239ec   364  ldr x2, pc+1060 (addr 0x000000004cd23e10)    ;; external reference (isolate)
0x4cd239f0   368  ldr x16, pc+1064 (addr 0x000000004cd23e18)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd239f4   372  and csp, jssp, #0xfffffffffffffff0
0x4cd239f8   376  blr x16
0x4cd239fc   380  ldp x4, x5, [jssp, #16]
0x4cd23a00   384  ldp x1, x3, [jssp], #32
0x4cd23a04   388  ldp x8, x9, [jssp, #16]
0x4cd23a08   392  ldp x6, x7, [jssp], #32
0x4cd23a0c   396  ldp x13, x14, [jssp, #16]
0x4cd23a10   400  ldp x11, x12, [jssp], #32
0x4cd23a14   404  ldr lr, [jssp, #16]
0x4cd23a18   408  ldp x15, x18, [jssp], #24
0x4cd23a1c   412  ldp x2, x0, [jssp], #16
0x4cd23a20   416  ldr x16, pc+1024 (addr 0x000000004cd23e20)    ;; external reference (store_buffer_top)
0x4cd23a24   420  ldr x10, [x16]
0x4cd23a28   424  str x6, [x10], #8
0x4cd23a2c   428  str x10, [x16]
0x4cd23a30   432  tst x10, #0x1ffff
0x4cd23a34   436  b.eq #+0x8 (addr 0x4cd23a3c)
0x4cd23a38   440  ret
0x4cd23a3c   444  sub csp, jssp, #0x8 (8)
0x4cd23a40   448  str lr, [jssp, #-8]!
0x4cd23a44   452  ldr x17, pc+996 (addr 0x000000004cd23e28)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd23a48   456  blr x17
0x4cd23a4c   460  ldr lr, [jssp], #8
0x4cd23a50   464  ret
0x4cd23a54   468  and x10, x1, #0xfffffffffff00000
0x4cd23a58   472  ldr x0, [x10, #104]
0x4cd23a5c   476  subs x0, x0, #0x1 (1)
0x4cd23a60   480  str x0, [x10, #104]
0x4cd23a64   484  b.mi #+0x64 (addr 0x4cd23ac8)
0x4cd23a68   488  ubfx x16, x1, #8, #12
0x4cd23a6c   492  and x10, x1, #0xfffffffffff00000
0x4cd23a70   496  add x10, x10, x16, lsl #2
0x4cd23a74   500  ubfx x0, x1, #3, #5
0x4cd23a78   504  ldr x10, [x10, #360]
0x4cd23a7c   508  lsr x10, x10, x0
0x4cd23a80   512  tbz w10, #0, #+0x8 (addr 0x4cd23a88)
0x4cd23a84   516  tbnz w10, #1, #+0xc (addr 0x4cd23a90)
0x4cd23a88   520  ldp x2, x0, [jssp], #16
0x4cd23a8c   524  ret
0x4cd23a90   528  ldr x10, [x6]
0x4cd23a94   532  sub csp, jssp, #0x10 (16)
0x4cd23a98   536  stp x1, x6, [jssp, #-16]!
0x4cd23a9c   540  ubfx x16, x10, #8, #12
0x4cd23aa0   544  and x0, x10, #0xfffffffffff00000
0x4cd23aa4   548  add x0, x0, x16, lsl #2
0x4cd23aa8   552  ubfx x1, x10, #3, #5
0x4cd23aac   556  ldr x6, [x0, #360]
0x4cd23ab0   560  lsr x6, x6, x1
0x4cd23ab4   564  tbz w6, #0, #+0x10 (addr 0x4cd23ac4)
0x4cd23ab8   568  ldp x1, x6, [jssp], #16
0x4cd23abc   572  ldp x2, x0, [jssp], #16
0x4cd23ac0   576  ret
0x4cd23ac4   580  ldp x1, x6, [jssp], #16
0x4cd23ac8   584  sub csp, jssp, #0x78 (120)
0x4cd23acc   588  stp x14, x15, [jssp, #-32]!
0x4cd23ad0   592  stp x18, lr, [jssp, #16]
0x4cd23ad4   596  stp x9, x11, [jssp, #-32]!
0x4cd23ad8   600  stp x12, x13, [jssp, #16]
0x4cd23adc   604  stp x5, x6, [jssp, #-32]!
0x4cd23ae0   608  stp x7, x8, [jssp, #16]
0x4cd23ae4   612  stp x1, x3, [jssp, #-24]!
0x4cd23ae8   616  str x4, [jssp, #16]
0x4cd23aec   620  mov x0, x1
0x4cd23af0   624  mov x1, x6
0x4cd23af4   628  ldr x2, pc+828 (addr 0x000000004cd23e30)    ;; external reference (isolate)
0x4cd23af8   632  ldr x16, pc+832 (addr 0x000000004cd23e38)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd23afc   636  and csp, jssp, #0xfffffffffffffff0
0x4cd23b00   640  blr x16
0x4cd23b04   644  ldp x4, x5, [jssp, #16]
0x4cd23b08   648  ldp x1, x3, [jssp], #32
0x4cd23b0c   652  ldp x8, x9, [jssp, #16]
0x4cd23b10   656  ldp x6, x7, [jssp], #32
0x4cd23b14   660  ldp x13, x14, [jssp, #16]
0x4cd23b18   664  ldp x11, x12, [jssp], #32
0x4cd23b1c   668  ldr lr, [jssp, #16]
0x4cd23b20   672  ldp x15, x18, [jssp], #24
0x4cd23b24   676  ldp x2, x0, [jssp], #16
0x4cd23b28   680  ret
0x4cd23b2c   684  sub csp, jssp, #0x10 (16)
0x4cd23b30   688  stp x2, x0, [jssp, #-16]!
0x4cd23b34   692  ldr x10, [x6]
0x4cd23b38   696  and x16, x10, #0xfffffffffff00000
0x4cd23b3c   700  ldr x16, [x16, #8]
0x4cd23b40   704  tst x16, #0x18
0x4cd23b44   708  b.eq #+0x19c (addr 0x4cd23ce0)
0x4cd23b48   712  and x16, x1, #0xfffffffffff00000
0x4cd23b4c   716  ldr x16, [x16, #8]
0x4cd23b50   720  tst x16, #0x18
0x4cd23b54   724  b.ne #+0x18c (addr 0x4cd23ce0)
0x4cd23b58   728  and x10, x1, #0xfffffffffff00000
0x4cd23b5c   732  ldr x0, [x10, #104]
0x4cd23b60   736  subs x0, x0, #0x1 (1)
0x4cd23b64   740  str x0, [x10, #104]
0x4cd23b68   744  b.mi #+0xe4 (addr 0x4cd23c4c)
0x4cd23b6c   748  ubfx x16, x1, #8, #12
0x4cd23b70   752  and x10, x1, #0xfffffffffff00000
0x4cd23b74   756  add x10, x10, x16, lsl #2
0x4cd23b78   760  ubfx x0, x1, #3, #5
0x4cd23b7c   764  ldr x10, [x10, #360]
0x4cd23b80   768  lsr x10, x10, x0
0x4cd23b84   772  tbz w10, #0, #+0x8 (addr 0x4cd23b8c)
0x4cd23b88   776  tbnz w10, #1, #+0x3c (addr 0x4cd23bc4)
0x4cd23b8c   780  ldp x2, x0, [jssp], #16
0x4cd23b90   784  ldr x16, pc+688 (addr 0x000000004cd23e40)    ;; external reference (store_buffer_top)
0x4cd23b94   788  ldr x10, [x16]
0x4cd23b98   792  str x6, [x10], #8
0x4cd23b9c   796  str x10, [x16]
0x4cd23ba0   800  tst x10, #0x1ffff
0x4cd23ba4   804  b.eq #+0x8 (addr 0x4cd23bac)
0x4cd23ba8   808  ret
0x4cd23bac   812  sub csp, jssp, #0x8 (8)
0x4cd23bb0   816  str lr, [jssp, #-8]!
0x4cd23bb4   820  ldr x17, pc+660 (addr 0x000000004cd23e48)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd23bb8   824  blr x17
0x4cd23bbc   828  ldr lr, [jssp], #8
0x4cd23bc0   832  ret
0x4cd23bc4   836  ldr x10, [x6]
0x4cd23bc8   840  and x0, x10, #0xfffffffffff00000
0x4cd23bcc   844  ldr x0, [x0, #8]
0x4cd23bd0   848  tbz w0, #6, #+0x18 (addr 0x4cd23be8)
0x4cd23bd4   852  and x0, x1, #0xfffffffffff00000
0x4cd23bd8   856  ldr x0, [x0, #8]
0x4cd23bdc   860  movz x16, #0x58
0x4cd23be0   864  tst x0, x16
0x4cd23be4   868  b.eq #+0x68 (addr 0x4cd23c4c)
0x4cd23be8   872  sub csp, jssp, #0x10 (16)
0x4cd23bec   876  stp x1, x6, [jssp, #-16]!
0x4cd23bf0   880  ubfx x16, x10, #8, #12
0x4cd23bf4   884  and x0, x10, #0xfffffffffff00000
0x4cd23bf8   888  add x0, x0, x16, lsl #2
0x4cd23bfc   892  ubfx x1, x10, #3, #5
0x4cd23c00   896  ldr x6, [x0, #360]
0x4cd23c04   900  lsr x6, x6, x1
0x4cd23c08   904  tbz w6, #0, #+0x40 (addr 0x4cd23c48)
0x4cd23c0c   908  ldp x1, x6, [jssp], #16
0x4cd23c10   912  ldp x2, x0, [jssp], #16
0x4cd23c14   916  ldr x16, pc+572 (addr 0x000000004cd23e50)    ;; external reference (store_buffer_top)
0x4cd23c18   920  ldr x10, [x16]
0x4cd23c1c   924  str x6, [x10], #8
0x4cd23c20   928  str x10, [x16]
0x4cd23c24   932  tst x10, #0x1ffff
0x4cd23c28   936  b.eq #+0x8 (addr 0x4cd23c30)
0x4cd23c2c   940  ret
0x4cd23c30   944  sub csp, jssp, #0x8 (8)
0x4cd23c34   948  str lr, [jssp, #-8]!
0x4cd23c38   952  ldr x17, pc+544 (addr 0x000000004cd23e58)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd23c3c   956  blr x17
0x4cd23c40   960  ldr lr, [jssp], #8
0x4cd23c44   964  ret
0x4cd23c48   968  ldp x1, x6, [jssp], #16
0x4cd23c4c   972  sub csp, jssp, #0x78 (120)
0x4cd23c50   976  stp x14, x15, [jssp, #-32]!
0x4cd23c54   980  stp x18, lr, [jssp, #16]
0x4cd23c58   984  stp x9, x11, [jssp, #-32]!
0x4cd23c5c   988  stp x12, x13, [jssp, #16]
0x4cd23c60   992  stp x5, x6, [jssp, #-32]!
0x4cd23c64   996  stp x7, x8, [jssp, #16]
0x4cd23c68  1000  stp x1, x3, [jssp, #-24]!
0x4cd23c6c  1004  str x4, [jssp, #16]
0x4cd23c70  1008  mov x0, x1
0x4cd23c74  1012  mov x1, x6
0x4cd23c78  1016  ldr x2, pc+488 (addr 0x000000004cd23e60)    ;; external reference (isolate)
0x4cd23c7c  1020  ldr x16, pc+492 (addr 0x000000004cd23e68)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd23c80  1024  and csp, jssp, #0xfffffffffffffff0
0x4cd23c84  1028  blr x16
0x4cd23c88  1032  ldp x4, x5, [jssp, #16]
0x4cd23c8c  1036  ldp x1, x3, [jssp], #32
0x4cd23c90  1040  ldp x8, x9, [jssp, #16]
0x4cd23c94  1044  ldp x6, x7, [jssp], #32
0x4cd23c98  1048  ldp x13, x14, [jssp, #16]
0x4cd23c9c  1052  ldp x11, x12, [jssp], #32
0x4cd23ca0  1056  ldr lr, [jssp, #16]
0x4cd23ca4  1060  ldp x15, x18, [jssp], #24
0x4cd23ca8  1064  ldp x2, x0, [jssp], #16
0x4cd23cac  1068  ldr x16, pc+452 (addr 0x000000004cd23e70)    ;; external reference (store_buffer_top)
0x4cd23cb0  1072  ldr x10, [x16]
0x4cd23cb4  1076  str x6, [x10], #8
0x4cd23cb8  1080  str x10, [x16]
0x4cd23cbc  1084  tst x10, #0x1ffff
0x4cd23cc0  1088  b.eq #+0x8 (addr 0x4cd23cc8)
0x4cd23cc4  1092  ret
0x4cd23cc8  1096  sub csp, jssp, #0x8 (8)
0x4cd23ccc  1100  str lr, [jssp, #-8]!
0x4cd23cd0  1104  ldr x17, pc+424 (addr 0x000000004cd23e78)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd23cd4  1108  blr x17
0x4cd23cd8  1112  ldr lr, [jssp], #8
0x4cd23cdc  1116  ret
0x4cd23ce0  1120  and x10, x1, #0xfffffffffff00000
0x4cd23ce4  1124  ldr x0, [x10, #104]
0x4cd23ce8  1128  subs x0, x0, #0x1 (1)
0x4cd23cec  1132  str x0, [x10, #104]
0x4cd23cf0  1136  b.mi #+0x84 (addr 0x4cd23d74)
0x4cd23cf4  1140  ubfx x16, x1, #8, #12
0x4cd23cf8  1144  and x10, x1, #0xfffffffffff00000
0x4cd23cfc  1148  add x10, x10, x16, lsl #2
0x4cd23d00  1152  ubfx x0, x1, #3, #5
0x4cd23d04  1156  ldr x10, [x10, #360]
0x4cd23d08  1160  lsr x10, x10, x0
0x4cd23d0c  1164  tbz w10, #0, #+0x8 (addr 0x4cd23d14)
0x4cd23d10  1168  tbnz w10, #1, #+0xc (addr 0x4cd23d1c)
0x4cd23d14  1172  ldp x2, x0, [jssp], #16
0x4cd23d18  1176  ret
0x4cd23d1c  1180  ldr x10, [x6]
0x4cd23d20  1184  and x0, x10, #0xfffffffffff00000
0x4cd23d24  1188  ldr x0, [x0, #8]
0x4cd23d28  1192  tbz w0, #6, #+0x18 (addr 0x4cd23d40)
0x4cd23d2c  1196  and x0, x1, #0xfffffffffff00000
0x4cd23d30  1200  ldr x0, [x0, #8]
0x4cd23d34  1204  movz x16, #0x58
0x4cd23d38  1208  tst x0, x16
0x4cd23d3c  1212  b.eq #+0x38 (addr 0x4cd23d74)
0x4cd23d40  1216  sub csp, jssp, #0x10 (16)
0x4cd23d44  1220  stp x1, x6, [jssp, #-16]!
0x4cd23d48  1224  ubfx x16, x10, #8, #12
0x4cd23d4c  1228  and x0, x10, #0xfffffffffff00000
0x4cd23d50  1232  add x0, x0, x16, lsl #2
0x4cd23d54  1236  ubfx x1, x10, #3, #5
0x4cd23d58  1240  ldr x6, [x0, #360]
0x4cd23d5c  1244  lsr x6, x6, x1
0x4cd23d60  1248  tbz w6, #0, #+0x10 (addr 0x4cd23d70)
0x4cd23d64  1252  ldp x1, x6, [jssp], #16
0x4cd23d68  1256  ldp x2, x0, [jssp], #16
0x4cd23d6c  1260  ret
0x4cd23d70  1264  ldp x1, x6, [jssp], #16
0x4cd23d74  1268  sub csp, jssp, #0x78 (120)
0x4cd23d78  1272  stp x14, x15, [jssp, #-32]!
0x4cd23d7c  1276  stp x18, lr, [jssp, #16]
0x4cd23d80  1280  stp x9, x11, [jssp, #-32]!
0x4cd23d84  1284  stp x12, x13, [jssp, #16]
0x4cd23d88  1288  stp x5, x6, [jssp, #-32]!
0x4cd23d8c  1292  stp x7, x8, [jssp, #16]
0x4cd23d90  1296  stp x1, x3, [jssp, #-24]!
0x4cd23d94  1300  str x4, [jssp, #16]
0x4cd23d98  1304  mov x0, x1
0x4cd23d9c  1308  mov x1, x6
0x4cd23da0  1312  ldr x2, pc+224 (addr 0x000000004cd23e80)    ;; external reference (isolate)
0x4cd23da4  1316  ldr x16, pc+228 (addr 0x000000004cd23e88)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd23da8  1320  and csp, jssp, #0xfffffffffffffff0
0x4cd23dac  1324  blr x16
0x4cd23db0  1328  ldp x4, x5, [jssp, #16]
0x4cd23db4  1332  ldp x1, x3, [jssp], #32
0x4cd23db8  1336  ldp x8, x9, [jssp, #16]
0x4cd23dbc  1340  ldp x6, x7, [jssp], #32
0x4cd23dc0  1344  ldp x13, x14, [jssp, #16]
0x4cd23dc4  1348  ldp x11, x12, [jssp], #32
0x4cd23dc8  1352  ldr lr, [jssp, #16]
0x4cd23dcc  1356  ldp x15, x18, [jssp], #24
0x4cd23dd0  1360  ldp x2, x0, [jssp], #16
0x4cd23dd4  1364  ret
0x4cd23dd8  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd23ddc  1372  d63f03e0       constant
0x4cd23de0  1376  166dd8c0       constant
0x4cd23de4  1380  00000000       constant
0x4cd23de8  1384  4cd064c0       constant
0x4cd23dec  1388  00000000       constant
0x4cd23df0  1392  166dd8c0       constant
0x4cd23df4  1396  00000000       constant
0x4cd23df8  1400  4cd064c0       constant
0x4cd23dfc  1404  00000000       constant
0x4cd23e00  1408  166dd8c0       constant
0x4cd23e04  1412  00000000       constant
0x4cd23e08  1416  4cd064c0       constant
0x4cd23e0c  1420  00000000       constant
0x4cd23e10  1424  166dc2d0       constant
0x4cd23e14  1428  00000000       constant
0x4cd23e18  1432  00c2d958       constant
0x4cd23e1c  1436  00000000       constant
0x4cd23e20  1440  166dd8c0       constant
0x4cd23e24  1444  00000000       constant
0x4cd23e28  1448  4cd064c0       constant
0x4cd23e2c  1452  00000000       constant
0x4cd23e30  1456  166dc2d0       constant
0x4cd23e34  1460  00000000       constant
0x4cd23e38  1464  00c2d958       constant
0x4cd23e3c  1468  00000000       constant
0x4cd23e40  1472  166dd8c0       constant
0x4cd23e44  1476  00000000       constant
0x4cd23e48  1480  4cd064c0       constant
0x4cd23e4c  1484  00000000       constant
0x4cd23e50  1488  166dd8c0       constant
0x4cd23e54  1492  00000000       constant
0x4cd23e58  1496  4cd064c0       constant
0x4cd23e5c  1500  00000000       constant
0x4cd23e60  1504  166dc2d0       constant
0x4cd23e64  1508  00000000       constant
0x4cd23e68  1512  00c2d958       constant
0x4cd23e6c  1516  00000000       constant
0x4cd23e70  1520  166dd8c0       constant
0x4cd23e74  1524  00000000       constant
0x4cd23e78  1528  4cd064c0       constant
0x4cd23e7c  1532  00000000       constant
0x4cd23e80  1536  166dc2d0       constant
0x4cd23e84  1540  00000000       constant
0x4cd23e88  1544  00c2d958       constant
0x4cd23e8c  1548  00000000       constant


RelocInfo (size = 59)
0x4cd23888  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd238ac  code target (STUB)  (0x4cd064c0)
0x4cd23924  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd23948  code target (STUB)  (0x4cd064c0)
0x4cd23988  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd239ac  code target (STUB)  (0x4cd064c0)
0x4cd239ec  external reference (isolate)  (0x166dc2d0)
0x4cd239f0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd23a20  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd23a44  code target (STUB)  (0x4cd064c0)
0x4cd23af4  external reference (isolate)  (0x166dc2d0)
0x4cd23af8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd23b90  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd23bb4  code target (STUB)  (0x4cd064c0)
0x4cd23c14  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd23c38  code target (STUB)  (0x4cd064c0)
0x4cd23c78  external reference (isolate)  (0x166dc2d0)
0x4cd23c7c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd23cac  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd23cd0  code target (STUB)  (0x4cd064c0)
0x4cd23da0  external reference (isolate)  (0x166dc2d0)
0x4cd23da4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd23dd8  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0x4cd23f00     0  adr xzr, #+0x40 (addr 0x4cd23f40)
0x4cd23f04     4  adr xzr, #+0x2a8 (addr 0x4cd241ac)
0x4cd23f08     8  ldr x16, pc+1368 (addr 0x000000004cd24460)    ;; external reference (store_buffer_top)
0x4cd23f0c    12  ldr x3, [x16]
0x4cd23f10    16  str x10, [x3], #8
0x4cd23f14    20  str x3, [x16]
0x4cd23f18    24  tst x3, #0x1ffff
0x4cd23f1c    28  b.eq #+0x8 (addr 0x4cd23f24)
0x4cd23f20    32  ret
0x4cd23f24    36  sub csp, jssp, #0x8 (8)
0x4cd23f28    40  str lr, [jssp, #-8]!
0x4cd23f2c    44  ldr x17, pc+1340 (addr 0x000000004cd24468)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd23f30    48  blr x17
0x4cd23f34    52  ldr lr, [jssp], #8
0x4cd23f38    56  ret
0x4cd23f3c    60  ret
0x4cd23f40    64  sub csp, jssp, #0x10 (16)
0x4cd23f44    68  stp x2, x0, [jssp, #-16]!
0x4cd23f48    72  ldr x3, [x10]
0x4cd23f4c    76  and x16, x3, #0xfffffffffff00000
0x4cd23f50    80  ldr x16, [x16, #8]
0x4cd23f54    84  tst x16, #0x18
0x4cd23f58    88  b.eq #+0x17c (addr 0x4cd240d4)
0x4cd23f5c    92  and x16, x1, #0xfffffffffff00000
0x4cd23f60    96  ldr x16, [x16, #8]
0x4cd23f64   100  tst x16, #0x18
0x4cd23f68   104  b.ne #+0x16c (addr 0x4cd240d4)
0x4cd23f6c   108  and x3, x1, #0xfffffffffff00000
0x4cd23f70   112  ldr x0, [x3, #104]
0x4cd23f74   116  subs x0, x0, #0x1 (1)
0x4cd23f78   120  str x0, [x3, #104]
0x4cd23f7c   124  b.mi #+0xc4 (addr 0x4cd24040)
0x4cd23f80   128  ubfx x16, x1, #8, #12
0x4cd23f84   132  and x3, x1, #0xfffffffffff00000
0x4cd23f88   136  add x3, x3, x16, lsl #2
0x4cd23f8c   140  ubfx x0, x1, #3, #5
0x4cd23f90   144  ldr x3, [x3, #360]
0x4cd23f94   148  lsr x3, x3, x0
0x4cd23f98   152  tbz w3, #0, #+0x8 (addr 0x4cd23fa0)
0x4cd23f9c   156  tbnz w3, #1, #+0x3c (addr 0x4cd23fd8)
0x4cd23fa0   160  ldp x2, x0, [jssp], #16
0x4cd23fa4   164  ldr x16, pc+1228 (addr 0x000000004cd24470)    ;; external reference (store_buffer_top)
0x4cd23fa8   168  ldr x3, [x16]
0x4cd23fac   172  str x10, [x3], #8
0x4cd23fb0   176  str x3, [x16]
0x4cd23fb4   180  tst x3, #0x1ffff
0x4cd23fb8   184  b.eq #+0x8 (addr 0x4cd23fc0)
0x4cd23fbc   188  ret
0x4cd23fc0   192  sub csp, jssp, #0x8 (8)
0x4cd23fc4   196  str lr, [jssp, #-8]!
0x4cd23fc8   200  ldr x17, pc+1200 (addr 0x000000004cd24478)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd23fcc   204  blr x17
0x4cd23fd0   208  ldr lr, [jssp], #8
0x4cd23fd4   212  ret
0x4cd23fd8   216  ldr x3, [x10]
0x4cd23fdc   220  sub csp, jssp, #0x10 (16)
0x4cd23fe0   224  stp x1, x10, [jssp, #-16]!
0x4cd23fe4   228  ubfx x16, x3, #8, #12
0x4cd23fe8   232  and x0, x3, #0xfffffffffff00000
0x4cd23fec   236  add x0, x0, x16, lsl #2
0x4cd23ff0   240  ubfx x1, x3, #3, #5
0x4cd23ff4   244  ldr x10, [x0, #360]
0x4cd23ff8   248  lsr x10, x10, x1
0x4cd23ffc   252  tbz w10, #0, #+0x40 (addr 0x4cd2403c)
0x4cd24000   256  ldp x1, x10, [jssp], #16
0x4cd24004   260  ldp x2, x0, [jssp], #16
0x4cd24008   264  ldr x16, pc+1144 (addr 0x000000004cd24480)    ;; external reference (store_buffer_top)
0x4cd2400c   268  ldr x3, [x16]
0x4cd24010   272  str x10, [x3], #8
0x4cd24014   276  str x3, [x16]
0x4cd24018   280  tst x3, #0x1ffff
0x4cd2401c   284  b.eq #+0x8 (addr 0x4cd24024)
0x4cd24020   288  ret
0x4cd24024   292  sub csp, jssp, #0x8 (8)
0x4cd24028   296  str lr, [jssp, #-8]!
0x4cd2402c   300  ldr x17, pc+1116 (addr 0x000000004cd24488)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd24030   304  blr x17
0x4cd24034   308  ldr lr, [jssp], #8
0x4cd24038   312  ret
0x4cd2403c   316  ldp x1, x10, [jssp], #16
0x4cd24040   320  sub csp, jssp, #0x78 (120)
0x4cd24044   324  stp x14, x15, [jssp, #-32]!
0x4cd24048   328  stp x18, lr, [jssp, #16]
0x4cd2404c   332  stp x10, x11, [jssp, #-32]!
0x4cd24050   336  stp x12, x13, [jssp, #16]
0x4cd24054   340  stp x6, x7, [jssp, #-32]!
0x4cd24058   344  stp x8, x9, [jssp, #16]
0x4cd2405c   348  stp x1, x4, [jssp, #-24]!
0x4cd24060   352  str x5, [jssp, #16]
0x4cd24064   356  mov x0, x1
0x4cd24068   360  mov x1, x10
0x4cd2406c   364  ldr x2, pc+1060 (addr 0x000000004cd24490)    ;; external reference (isolate)
0x4cd24070   368  ldr x16, pc+1064 (addr 0x000000004cd24498)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd24074   372  and csp, jssp, #0xfffffffffffffff0
0x4cd24078   376  blr x16
0x4cd2407c   380  ldp x5, x6, [jssp, #16]
0x4cd24080   384  ldp x1, x4, [jssp], #32
0x4cd24084   388  ldp x9, x10, [jssp, #16]
0x4cd24088   392  ldp x7, x8, [jssp], #32
0x4cd2408c   396  ldp x13, x14, [jssp, #16]
0x4cd24090   400  ldp x11, x12, [jssp], #32
0x4cd24094   404  ldr lr, [jssp, #16]
0x4cd24098   408  ldp x15, x18, [jssp], #24
0x4cd2409c   412  ldp x2, x0, [jssp], #16
0x4cd240a0   416  ldr x16, pc+1024 (addr 0x000000004cd244a0)    ;; external reference (store_buffer_top)
0x4cd240a4   420  ldr x3, [x16]
0x4cd240a8   424  str x10, [x3], #8
0x4cd240ac   428  str x3, [x16]
0x4cd240b0   432  tst x3, #0x1ffff
0x4cd240b4   436  b.eq #+0x8 (addr 0x4cd240bc)
0x4cd240b8   440  ret
0x4cd240bc   444  sub csp, jssp, #0x8 (8)
0x4cd240c0   448  str lr, [jssp, #-8]!
0x4cd240c4   452  ldr x17, pc+996 (addr 0x000000004cd244a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd240c8   456  blr x17
0x4cd240cc   460  ldr lr, [jssp], #8
0x4cd240d0   464  ret
0x4cd240d4   468  and x3, x1, #0xfffffffffff00000
0x4cd240d8   472  ldr x0, [x3, #104]
0x4cd240dc   476  subs x0, x0, #0x1 (1)
0x4cd240e0   480  str x0, [x3, #104]
0x4cd240e4   484  b.mi #+0x64 (addr 0x4cd24148)
0x4cd240e8   488  ubfx x16, x1, #8, #12
0x4cd240ec   492  and x3, x1, #0xfffffffffff00000
0x4cd240f0   496  add x3, x3, x16, lsl #2
0x4cd240f4   500  ubfx x0, x1, #3, #5
0x4cd240f8   504  ldr x3, [x3, #360]
0x4cd240fc   508  lsr x3, x3, x0
0x4cd24100   512  tbz w3, #0, #+0x8 (addr 0x4cd24108)
0x4cd24104   516  tbnz w3, #1, #+0xc (addr 0x4cd24110)
0x4cd24108   520  ldp x2, x0, [jssp], #16
0x4cd2410c   524  ret
0x4cd24110   528  ldr x3, [x10]
0x4cd24114   532  sub csp, jssp, #0x10 (16)
0x4cd24118   536  stp x1, x10, [jssp, #-16]!
0x4cd2411c   540  ubfx x16, x3, #8, #12
0x4cd24120   544  and x0, x3, #0xfffffffffff00000
0x4cd24124   548  add x0, x0, x16, lsl #2
0x4cd24128   552  ubfx x1, x3, #3, #5
0x4cd2412c   556  ldr x10, [x0, #360]
0x4cd24130   560  lsr x10, x10, x1
0x4cd24134   564  tbz w10, #0, #+0x10 (addr 0x4cd24144)
0x4cd24138   568  ldp x1, x10, [jssp], #16
0x4cd2413c   572  ldp x2, x0, [jssp], #16
0x4cd24140   576  ret
0x4cd24144   580  ldp x1, x10, [jssp], #16
0x4cd24148   584  sub csp, jssp, #0x78 (120)
0x4cd2414c   588  stp x14, x15, [jssp, #-32]!
0x4cd24150   592  stp x18, lr, [jssp, #16]
0x4cd24154   596  stp x10, x11, [jssp, #-32]!
0x4cd24158   600  stp x12, x13, [jssp, #16]
0x4cd2415c   604  stp x6, x7, [jssp, #-32]!
0x4cd24160   608  stp x8, x9, [jssp, #16]
0x4cd24164   612  stp x1, x4, [jssp, #-24]!
0x4cd24168   616  str x5, [jssp, #16]
0x4cd2416c   620  mov x0, x1
0x4cd24170   624  mov x1, x10
0x4cd24174   628  ldr x2, pc+828 (addr 0x000000004cd244b0)    ;; external reference (isolate)
0x4cd24178   632  ldr x16, pc+832 (addr 0x000000004cd244b8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2417c   636  and csp, jssp, #0xfffffffffffffff0
0x4cd24180   640  blr x16
0x4cd24184   644  ldp x5, x6, [jssp, #16]
0x4cd24188   648  ldp x1, x4, [jssp], #32
0x4cd2418c   652  ldp x9, x10, [jssp, #16]
0x4cd24190   656  ldp x7, x8, [jssp], #32
0x4cd24194   660  ldp x13, x14, [jssp, #16]
0x4cd24198   664  ldp x11, x12, [jssp], #32
0x4cd2419c   668  ldr lr, [jssp, #16]
0x4cd241a0   672  ldp x15, x18, [jssp], #24
0x4cd241a4   676  ldp x2, x0, [jssp], #16
0x4cd241a8   680  ret
0x4cd241ac   684  sub csp, jssp, #0x10 (16)
0x4cd241b0   688  stp x2, x0, [jssp, #-16]!
0x4cd241b4   692  ldr x3, [x10]
0x4cd241b8   696  and x16, x3, #0xfffffffffff00000
0x4cd241bc   700  ldr x16, [x16, #8]
0x4cd241c0   704  tst x16, #0x18
0x4cd241c4   708  b.eq #+0x19c (addr 0x4cd24360)
0x4cd241c8   712  and x16, x1, #0xfffffffffff00000
0x4cd241cc   716  ldr x16, [x16, #8]
0x4cd241d0   720  tst x16, #0x18
0x4cd241d4   724  b.ne #+0x18c (addr 0x4cd24360)
0x4cd241d8   728  and x3, x1, #0xfffffffffff00000
0x4cd241dc   732  ldr x0, [x3, #104]
0x4cd241e0   736  subs x0, x0, #0x1 (1)
0x4cd241e4   740  str x0, [x3, #104]
0x4cd241e8   744  b.mi #+0xe4 (addr 0x4cd242cc)
0x4cd241ec   748  ubfx x16, x1, #8, #12
0x4cd241f0   752  and x3, x1, #0xfffffffffff00000
0x4cd241f4   756  add x3, x3, x16, lsl #2
0x4cd241f8   760  ubfx x0, x1, #3, #5
0x4cd241fc   764  ldr x3, [x3, #360]
0x4cd24200   768  lsr x3, x3, x0
0x4cd24204   772  tbz w3, #0, #+0x8 (addr 0x4cd2420c)
0x4cd24208   776  tbnz w3, #1, #+0x3c (addr 0x4cd24244)
0x4cd2420c   780  ldp x2, x0, [jssp], #16
0x4cd24210   784  ldr x16, pc+688 (addr 0x000000004cd244c0)    ;; external reference (store_buffer_top)
0x4cd24214   788  ldr x3, [x16]
0x4cd24218   792  str x10, [x3], #8
0x4cd2421c   796  str x3, [x16]
0x4cd24220   800  tst x3, #0x1ffff
0x4cd24224   804  b.eq #+0x8 (addr 0x4cd2422c)
0x4cd24228   808  ret
0x4cd2422c   812  sub csp, jssp, #0x8 (8)
0x4cd24230   816  str lr, [jssp, #-8]!
0x4cd24234   820  ldr x17, pc+660 (addr 0x000000004cd244c8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd24238   824  blr x17
0x4cd2423c   828  ldr lr, [jssp], #8
0x4cd24240   832  ret
0x4cd24244   836  ldr x3, [x10]
0x4cd24248   840  and x0, x3, #0xfffffffffff00000
0x4cd2424c   844  ldr x0, [x0, #8]
0x4cd24250   848  tbz w0, #6, #+0x18 (addr 0x4cd24268)
0x4cd24254   852  and x0, x1, #0xfffffffffff00000
0x4cd24258   856  ldr x0, [x0, #8]
0x4cd2425c   860  movz x16, #0x58
0x4cd24260   864  tst x0, x16
0x4cd24264   868  b.eq #+0x68 (addr 0x4cd242cc)
0x4cd24268   872  sub csp, jssp, #0x10 (16)
0x4cd2426c   876  stp x1, x10, [jssp, #-16]!
0x4cd24270   880  ubfx x16, x3, #8, #12
0x4cd24274   884  and x0, x3, #0xfffffffffff00000
0x4cd24278   888  add x0, x0, x16, lsl #2
0x4cd2427c   892  ubfx x1, x3, #3, #5
0x4cd24280   896  ldr x10, [x0, #360]
0x4cd24284   900  lsr x10, x10, x1
0x4cd24288   904  tbz w10, #0, #+0x40 (addr 0x4cd242c8)
0x4cd2428c   908  ldp x1, x10, [jssp], #16
0x4cd24290   912  ldp x2, x0, [jssp], #16
0x4cd24294   916  ldr x16, pc+572 (addr 0x000000004cd244d0)    ;; external reference (store_buffer_top)
0x4cd24298   920  ldr x3, [x16]
0x4cd2429c   924  str x10, [x3], #8
0x4cd242a0   928  str x3, [x16]
0x4cd242a4   932  tst x3, #0x1ffff
0x4cd242a8   936  b.eq #+0x8 (addr 0x4cd242b0)
0x4cd242ac   940  ret
0x4cd242b0   944  sub csp, jssp, #0x8 (8)
0x4cd242b4   948  str lr, [jssp, #-8]!
0x4cd242b8   952  ldr x17, pc+544 (addr 0x000000004cd244d8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd242bc   956  blr x17
0x4cd242c0   960  ldr lr, [jssp], #8
0x4cd242c4   964  ret
0x4cd242c8   968  ldp x1, x10, [jssp], #16
0x4cd242cc   972  sub csp, jssp, #0x78 (120)
0x4cd242d0   976  stp x14, x15, [jssp, #-32]!
0x4cd242d4   980  stp x18, lr, [jssp, #16]
0x4cd242d8   984  stp x10, x11, [jssp, #-32]!
0x4cd242dc   988  stp x12, x13, [jssp, #16]
0x4cd242e0   992  stp x6, x7, [jssp, #-32]!
0x4cd242e4   996  stp x8, x9, [jssp, #16]
0x4cd242e8  1000  stp x1, x4, [jssp, #-24]!
0x4cd242ec  1004  str x5, [jssp, #16]
0x4cd242f0  1008  mov x0, x1
0x4cd242f4  1012  mov x1, x10
0x4cd242f8  1016  ldr x2, pc+488 (addr 0x000000004cd244e0)    ;; external reference (isolate)
0x4cd242fc  1020  ldr x16, pc+492 (addr 0x000000004cd244e8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd24300  1024  and csp, jssp, #0xfffffffffffffff0
0x4cd24304  1028  blr x16
0x4cd24308  1032  ldp x5, x6, [jssp, #16]
0x4cd2430c  1036  ldp x1, x4, [jssp], #32
0x4cd24310  1040  ldp x9, x10, [jssp, #16]
0x4cd24314  1044  ldp x7, x8, [jssp], #32
0x4cd24318  1048  ldp x13, x14, [jssp, #16]
0x4cd2431c  1052  ldp x11, x12, [jssp], #32
0x4cd24320  1056  ldr lr, [jssp, #16]
0x4cd24324  1060  ldp x15, x18, [jssp], #24
0x4cd24328  1064  ldp x2, x0, [jssp], #16
0x4cd2432c  1068  ldr x16, pc+452 (addr 0x000000004cd244f0)    ;; external reference (store_buffer_top)
0x4cd24330  1072  ldr x3, [x16]
0x4cd24334  1076  str x10, [x3], #8
0x4cd24338  1080  str x3, [x16]
0x4cd2433c  1084  tst x3, #0x1ffff
0x4cd24340  1088  b.eq #+0x8 (addr 0x4cd24348)
0x4cd24344  1092  ret
0x4cd24348  1096  sub csp, jssp, #0x8 (8)
0x4cd2434c  1100  str lr, [jssp, #-8]!
0x4cd24350  1104  ldr x17, pc+424 (addr 0x000000004cd244f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd24354  1108  blr x17
0x4cd24358  1112  ldr lr, [jssp], #8
0x4cd2435c  1116  ret
0x4cd24360  1120  and x3, x1, #0xfffffffffff00000
0x4cd24364  1124  ldr x0, [x3, #104]
0x4cd24368  1128  subs x0, x0, #0x1 (1)
0x4cd2436c  1132  str x0, [x3, #104]
0x4cd24370  1136  b.mi #+0x84 (addr 0x4cd243f4)
0x4cd24374  1140  ubfx x16, x1, #8, #12
0x4cd24378  1144  and x3, x1, #0xfffffffffff00000
0x4cd2437c  1148  add x3, x3, x16, lsl #2
0x4cd24380  1152  ubfx x0, x1, #3, #5
0x4cd24384  1156  ldr x3, [x3, #360]
0x4cd24388  1160  lsr x3, x3, x0
0x4cd2438c  1164  tbz w3, #0, #+0x8 (addr 0x4cd24394)
0x4cd24390  1168  tbnz w3, #1, #+0xc (addr 0x4cd2439c)
0x4cd24394  1172  ldp x2, x0, [jssp], #16
0x4cd24398  1176  ret
0x4cd2439c  1180  ldr x3, [x10]
0x4cd243a0  1184  and x0, x3, #0xfffffffffff00000
0x4cd243a4  1188  ldr x0, [x0, #8]
0x4cd243a8  1192  tbz w0, #6, #+0x18 (addr 0x4cd243c0)
0x4cd243ac  1196  and x0, x1, #0xfffffffffff00000
0x4cd243b0  1200  ldr x0, [x0, #8]
0x4cd243b4  1204  movz x16, #0x58
0x4cd243b8  1208  tst x0, x16
0x4cd243bc  1212  b.eq #+0x38 (addr 0x4cd243f4)
0x4cd243c0  1216  sub csp, jssp, #0x10 (16)
0x4cd243c4  1220  stp x1, x10, [jssp, #-16]!
0x4cd243c8  1224  ubfx x16, x3, #8, #12
0x4cd243cc  1228  and x0, x3, #0xfffffffffff00000
0x4cd243d0  1232  add x0, x0, x16, lsl #2
0x4cd243d4  1236  ubfx x1, x3, #3, #5
0x4cd243d8  1240  ldr x10, [x0, #360]
0x4cd243dc  1244  lsr x10, x10, x1
0x4cd243e0  1248  tbz w10, #0, #+0x10 (addr 0x4cd243f0)
0x4cd243e4  1252  ldp x1, x10, [jssp], #16
0x4cd243e8  1256  ldp x2, x0, [jssp], #16
0x4cd243ec  1260  ret
0x4cd243f0  1264  ldp x1, x10, [jssp], #16
0x4cd243f4  1268  sub csp, jssp, #0x78 (120)
0x4cd243f8  1272  stp x14, x15, [jssp, #-32]!
0x4cd243fc  1276  stp x18, lr, [jssp, #16]
0x4cd24400  1280  stp x10, x11, [jssp, #-32]!
0x4cd24404  1284  stp x12, x13, [jssp, #16]
0x4cd24408  1288  stp x6, x7, [jssp, #-32]!
0x4cd2440c  1292  stp x8, x9, [jssp, #16]
0x4cd24410  1296  stp x1, x4, [jssp, #-24]!
0x4cd24414  1300  str x5, [jssp, #16]
0x4cd24418  1304  mov x0, x1
0x4cd2441c  1308  mov x1, x10
0x4cd24420  1312  ldr x2, pc+224 (addr 0x000000004cd24500)    ;; external reference (isolate)
0x4cd24424  1316  ldr x16, pc+228 (addr 0x000000004cd24508)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd24428  1320  and csp, jssp, #0xfffffffffffffff0
0x4cd2442c  1324  blr x16
0x4cd24430  1328  ldp x5, x6, [jssp, #16]
0x4cd24434  1332  ldp x1, x4, [jssp], #32
0x4cd24438  1336  ldp x9, x10, [jssp, #16]
0x4cd2443c  1340  ldp x7, x8, [jssp], #32
0x4cd24440  1344  ldp x13, x14, [jssp, #16]
0x4cd24444  1348  ldp x11, x12, [jssp], #32
0x4cd24448  1352  ldr lr, [jssp, #16]
0x4cd2444c  1356  ldp x15, x18, [jssp], #24
0x4cd24450  1360  ldp x2, x0, [jssp], #16
0x4cd24454  1364  ret
0x4cd24458  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd2445c  1372  d63f03e0       constant
0x4cd24460  1376  166dd8c0       constant
0x4cd24464  1380  00000000       constant
0x4cd24468  1384  4cd064c0       constant
0x4cd2446c  1388  00000000       constant
0x4cd24470  1392  166dd8c0       constant
0x4cd24474  1396  00000000       constant
0x4cd24478  1400  4cd064c0       constant
0x4cd2447c  1404  00000000       constant
0x4cd24480  1408  166dd8c0       constant
0x4cd24484  1412  00000000       constant
0x4cd24488  1416  4cd064c0       constant
0x4cd2448c  1420  00000000       constant
0x4cd24490  1424  166dc2d0       constant
0x4cd24494  1428  00000000       constant
0x4cd24498  1432  00c2d958       constant
0x4cd2449c  1436  00000000       constant
0x4cd244a0  1440  166dd8c0       constant
0x4cd244a4  1444  00000000       constant
0x4cd244a8  1448  4cd064c0       constant
0x4cd244ac  1452  00000000       constant
0x4cd244b0  1456  166dc2d0       constant
0x4cd244b4  1460  00000000       constant
0x4cd244b8  1464  00c2d958       constant
0x4cd244bc  1468  00000000       constant
0x4cd244c0  1472  166dd8c0       constant
0x4cd244c4  1476  00000000       constant
0x4cd244c8  1480  4cd064c0       constant
0x4cd244cc  1484  00000000       constant
0x4cd244d0  1488  166dd8c0       constant
0x4cd244d4  1492  00000000       constant
0x4cd244d8  1496  4cd064c0       constant
0x4cd244dc  1500  00000000       constant
0x4cd244e0  1504  166dc2d0       constant
0x4cd244e4  1508  00000000       constant
0x4cd244e8  1512  00c2d958       constant
0x4cd244ec  1516  00000000       constant
0x4cd244f0  1520  166dd8c0       constant
0x4cd244f4  1524  00000000       constant
0x4cd244f8  1528  4cd064c0       constant
0x4cd244fc  1532  00000000       constant
0x4cd24500  1536  166dc2d0       constant
0x4cd24504  1540  00000000       constant
0x4cd24508  1544  00c2d958       constant
0x4cd2450c  1548  00000000       constant


RelocInfo (size = 59)
0x4cd23f08  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd23f2c  code target (STUB)  (0x4cd064c0)
0x4cd23fa4  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd23fc8  code target (STUB)  (0x4cd064c0)
0x4cd24008  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2402c  code target (STUB)  (0x4cd064c0)
0x4cd2406c  external reference (isolate)  (0x166dc2d0)
0x4cd24070  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd240a0  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd240c4  code target (STUB)  (0x4cd064c0)
0x4cd24174  external reference (isolate)  (0x166dc2d0)
0x4cd24178  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd24210  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd24234  code target (STUB)  (0x4cd064c0)
0x4cd24294  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd242b8  code target (STUB)  (0x4cd064c0)
0x4cd242f8  external reference (isolate)  (0x166dc2d0)
0x4cd242fc  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2432c  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd24350  code target (STUB)  (0x4cd064c0)
0x4cd24420  external reference (isolate)  (0x166dc2d0)
0x4cd24424  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd24458  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0x4cd24580     0  adr xzr, #+0x40 (addr 0x4cd245c0)
0x4cd24584     4  adr xzr, #+0x2a8 (addr 0x4cd2482c)
0x4cd24588     8  ldr x16, pc+1368 (addr 0x000000004cd24ae0)    ;; external reference (store_buffer_top)
0x4cd2458c    12  ldr x5, [x16]
0x4cd24590    16  str x13, [x5], #8
0x4cd24594    20  str x5, [x16]
0x4cd24598    24  tst x5, #0x1ffff
0x4cd2459c    28  b.eq #+0x8 (addr 0x4cd245a4)
0x4cd245a0    32  ret
0x4cd245a4    36  sub csp, jssp, #0x8 (8)
0x4cd245a8    40  str lr, [jssp, #-8]!
0x4cd245ac    44  ldr x17, pc+1340 (addr 0x000000004cd24ae8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd245b0    48  blr x17
0x4cd245b4    52  ldr lr, [jssp], #8
0x4cd245b8    56  ret
0x4cd245bc    60  ret
0x4cd245c0    64  sub csp, jssp, #0x10 (16)
0x4cd245c4    68  stp x1, x0, [jssp, #-16]!
0x4cd245c8    72  ldr x5, [x13]
0x4cd245cc    76  and x16, x5, #0xfffffffffff00000
0x4cd245d0    80  ldr x16, [x16, #8]
0x4cd245d4    84  tst x16, #0x18
0x4cd245d8    88  b.eq #+0x17c (addr 0x4cd24754)
0x4cd245dc    92  and x16, x7, #0xfffffffffff00000
0x4cd245e0    96  ldr x16, [x16, #8]
0x4cd245e4   100  tst x16, #0x18
0x4cd245e8   104  b.ne #+0x16c (addr 0x4cd24754)
0x4cd245ec   108  and x5, x7, #0xfffffffffff00000
0x4cd245f0   112  ldr x0, [x5, #104]
0x4cd245f4   116  subs x0, x0, #0x1 (1)
0x4cd245f8   120  str x0, [x5, #104]
0x4cd245fc   124  b.mi #+0xc4 (addr 0x4cd246c0)
0x4cd24600   128  ubfx x16, x7, #8, #12
0x4cd24604   132  and x5, x7, #0xfffffffffff00000
0x4cd24608   136  add x5, x5, x16, lsl #2
0x4cd2460c   140  ubfx x0, x7, #3, #5
0x4cd24610   144  ldr x5, [x5, #360]
0x4cd24614   148  lsr x5, x5, x0
0x4cd24618   152  tbz w5, #0, #+0x8 (addr 0x4cd24620)
0x4cd2461c   156  tbnz w5, #1, #+0x3c (addr 0x4cd24658)
0x4cd24620   160  ldp x1, x0, [jssp], #16
0x4cd24624   164  ldr x16, pc+1228 (addr 0x000000004cd24af0)    ;; external reference (store_buffer_top)
0x4cd24628   168  ldr x5, [x16]
0x4cd2462c   172  str x13, [x5], #8
0x4cd24630   176  str x5, [x16]
0x4cd24634   180  tst x5, #0x1ffff
0x4cd24638   184  b.eq #+0x8 (addr 0x4cd24640)
0x4cd2463c   188  ret
0x4cd24640   192  sub csp, jssp, #0x8 (8)
0x4cd24644   196  str lr, [jssp, #-8]!
0x4cd24648   200  ldr x17, pc+1200 (addr 0x000000004cd24af8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2464c   204  blr x17
0x4cd24650   208  ldr lr, [jssp], #8
0x4cd24654   212  ret
0x4cd24658   216  ldr x5, [x13]
0x4cd2465c   220  sub csp, jssp, #0x10 (16)
0x4cd24660   224  stp x7, x13, [jssp, #-16]!
0x4cd24664   228  ubfx x16, x5, #8, #12
0x4cd24668   232  and x0, x5, #0xfffffffffff00000
0x4cd2466c   236  add x0, x0, x16, lsl #2
0x4cd24670   240  ubfx x7, x5, #3, #5
0x4cd24674   244  ldr x13, [x0, #360]
0x4cd24678   248  lsr x13, x13, x7
0x4cd2467c   252  tbz w13, #0, #+0x40 (addr 0x4cd246bc)
0x4cd24680   256  ldp x7, x13, [jssp], #16
0x4cd24684   260  ldp x1, x0, [jssp], #16
0x4cd24688   264  ldr x16, pc+1144 (addr 0x000000004cd24b00)    ;; external reference (store_buffer_top)
0x4cd2468c   268  ldr x5, [x16]
0x4cd24690   272  str x13, [x5], #8
0x4cd24694   276  str x5, [x16]
0x4cd24698   280  tst x5, #0x1ffff
0x4cd2469c   284  b.eq #+0x8 (addr 0x4cd246a4)
0x4cd246a0   288  ret
0x4cd246a4   292  sub csp, jssp, #0x8 (8)
0x4cd246a8   296  str lr, [jssp, #-8]!
0x4cd246ac   300  ldr x17, pc+1116 (addr 0x000000004cd24b08)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd246b0   304  blr x17
0x4cd246b4   308  ldr lr, [jssp], #8
0x4cd246b8   312  ret
0x4cd246bc   316  ldp x7, x13, [jssp], #16
0x4cd246c0   320  sub csp, jssp, #0x78 (120)
0x4cd246c4   324  stp x14, x15, [jssp, #-32]!
0x4cd246c8   328  stp x18, lr, [jssp, #16]
0x4cd246cc   332  stp x10, x11, [jssp, #-32]!
0x4cd246d0   336  stp x12, x13, [jssp, #16]
0x4cd246d4   340  stp x6, x7, [jssp, #-32]!
0x4cd246d8   344  stp x8, x9, [jssp, #16]
0x4cd246dc   348  stp x2, x3, [jssp, #-24]!
0x4cd246e0   352  str x4, [jssp, #16]
0x4cd246e4   356  mov x0, x7
0x4cd246e8   360  mov x1, x13
0x4cd246ec   364  ldr x2, pc+1060 (addr 0x000000004cd24b10)    ;; external reference (isolate)
0x4cd246f0   368  ldr x16, pc+1064 (addr 0x000000004cd24b18)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd246f4   372  and csp, jssp, #0xfffffffffffffff0
0x4cd246f8   376  blr x16
0x4cd246fc   380  ldp x4, x6, [jssp, #16]
0x4cd24700   384  ldp x2, x3, [jssp], #32
0x4cd24704   388  ldp x9, x10, [jssp, #16]
0x4cd24708   392  ldp x7, x8, [jssp], #32
0x4cd2470c   396  ldp x13, x14, [jssp, #16]
0x4cd24710   400  ldp x11, x12, [jssp], #32
0x4cd24714   404  ldr lr, [jssp, #16]
0x4cd24718   408  ldp x15, x18, [jssp], #24
0x4cd2471c   412  ldp x1, x0, [jssp], #16
0x4cd24720   416  ldr x16, pc+1024 (addr 0x000000004cd24b20)    ;; external reference (store_buffer_top)
0x4cd24724   420  ldr x5, [x16]
0x4cd24728   424  str x13, [x5], #8
0x4cd2472c   428  str x5, [x16]
0x4cd24730   432  tst x5, #0x1ffff
0x4cd24734   436  b.eq #+0x8 (addr 0x4cd2473c)
0x4cd24738   440  ret
0x4cd2473c   444  sub csp, jssp, #0x8 (8)
0x4cd24740   448  str lr, [jssp, #-8]!
0x4cd24744   452  ldr x17, pc+996 (addr 0x000000004cd24b28)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd24748   456  blr x17
0x4cd2474c   460  ldr lr, [jssp], #8
0x4cd24750   464  ret
0x4cd24754   468  and x5, x7, #0xfffffffffff00000
0x4cd24758   472  ldr x0, [x5, #104]
0x4cd2475c   476  subs x0, x0, #0x1 (1)
0x4cd24760   480  str x0, [x5, #104]
0x4cd24764   484  b.mi #+0x64 (addr 0x4cd247c8)
0x4cd24768   488  ubfx x16, x7, #8, #12
0x4cd2476c   492  and x5, x7, #0xfffffffffff00000
0x4cd24770   496  add x5, x5, x16, lsl #2
0x4cd24774   500  ubfx x0, x7, #3, #5
0x4cd24778   504  ldr x5, [x5, #360]
0x4cd2477c   508  lsr x5, x5, x0
0x4cd24780   512  tbz w5, #0, #+0x8 (addr 0x4cd24788)
0x4cd24784   516  tbnz w5, #1, #+0xc (addr 0x4cd24790)
0x4cd24788   520  ldp x1, x0, [jssp], #16
0x4cd2478c   524  ret
0x4cd24790   528  ldr x5, [x13]
0x4cd24794   532  sub csp, jssp, #0x10 (16)
0x4cd24798   536  stp x7, x13, [jssp, #-16]!
0x4cd2479c   540  ubfx x16, x5, #8, #12
0x4cd247a0   544  and x0, x5, #0xfffffffffff00000
0x4cd247a4   548  add x0, x0, x16, lsl #2
0x4cd247a8   552  ubfx x7, x5, #3, #5
0x4cd247ac   556  ldr x13, [x0, #360]
0x4cd247b0   560  lsr x13, x13, x7
0x4cd247b4   564  tbz w13, #0, #+0x10 (addr 0x4cd247c4)
0x4cd247b8   568  ldp x7, x13, [jssp], #16
0x4cd247bc   572  ldp x1, x0, [jssp], #16
0x4cd247c0   576  ret
0x4cd247c4   580  ldp x7, x13, [jssp], #16
0x4cd247c8   584  sub csp, jssp, #0x78 (120)
0x4cd247cc   588  stp x14, x15, [jssp, #-32]!
0x4cd247d0   592  stp x18, lr, [jssp, #16]
0x4cd247d4   596  stp x10, x11, [jssp, #-32]!
0x4cd247d8   600  stp x12, x13, [jssp, #16]
0x4cd247dc   604  stp x6, x7, [jssp, #-32]!
0x4cd247e0   608  stp x8, x9, [jssp, #16]
0x4cd247e4   612  stp x2, x3, [jssp, #-24]!
0x4cd247e8   616  str x4, [jssp, #16]
0x4cd247ec   620  mov x0, x7
0x4cd247f0   624  mov x1, x13
0x4cd247f4   628  ldr x2, pc+828 (addr 0x000000004cd24b30)    ;; external reference (isolate)
0x4cd247f8   632  ldr x16, pc+832 (addr 0x000000004cd24b38)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd247fc   636  and csp, jssp, #0xfffffffffffffff0
0x4cd24800   640  blr x16
0x4cd24804   644  ldp x4, x6, [jssp, #16]
0x4cd24808   648  ldp x2, x3, [jssp], #32
0x4cd2480c   652  ldp x9, x10, [jssp, #16]
0x4cd24810   656  ldp x7, x8, [jssp], #32
0x4cd24814   660  ldp x13, x14, [jssp, #16]
0x4cd24818   664  ldp x11, x12, [jssp], #32
0x4cd2481c   668  ldr lr, [jssp, #16]
0x4cd24820   672  ldp x15, x18, [jssp], #24
0x4cd24824   676  ldp x1, x0, [jssp], #16
0x4cd24828   680  ret
0x4cd2482c   684  sub csp, jssp, #0x10 (16)
0x4cd24830   688  stp x1, x0, [jssp, #-16]!
0x4cd24834   692  ldr x5, [x13]
0x4cd24838   696  and x16, x5, #0xfffffffffff00000
0x4cd2483c   700  ldr x16, [x16, #8]
0x4cd24840   704  tst x16, #0x18
0x4cd24844   708  b.eq #+0x19c (addr 0x4cd249e0)
0x4cd24848   712  and x16, x7, #0xfffffffffff00000
0x4cd2484c   716  ldr x16, [x16, #8]
0x4cd24850   720  tst x16, #0x18
0x4cd24854   724  b.ne #+0x18c (addr 0x4cd249e0)
0x4cd24858   728  and x5, x7, #0xfffffffffff00000
0x4cd2485c   732  ldr x0, [x5, #104]
0x4cd24860   736  subs x0, x0, #0x1 (1)
0x4cd24864   740  str x0, [x5, #104]
0x4cd24868   744  b.mi #+0xe4 (addr 0x4cd2494c)
0x4cd2486c   748  ubfx x16, x7, #8, #12
0x4cd24870   752  and x5, x7, #0xfffffffffff00000
0x4cd24874   756  add x5, x5, x16, lsl #2
0x4cd24878   760  ubfx x0, x7, #3, #5
0x4cd2487c   764  ldr x5, [x5, #360]
0x4cd24880   768  lsr x5, x5, x0
0x4cd24884   772  tbz w5, #0, #+0x8 (addr 0x4cd2488c)
0x4cd24888   776  tbnz w5, #1, #+0x3c (addr 0x4cd248c4)
0x4cd2488c   780  ldp x1, x0, [jssp], #16
0x4cd24890   784  ldr x16, pc+688 (addr 0x000000004cd24b40)    ;; external reference (store_buffer_top)
0x4cd24894   788  ldr x5, [x16]
0x4cd24898   792  str x13, [x5], #8
0x4cd2489c   796  str x5, [x16]
0x4cd248a0   800  tst x5, #0x1ffff
0x4cd248a4   804  b.eq #+0x8 (addr 0x4cd248ac)
0x4cd248a8   808  ret
0x4cd248ac   812  sub csp, jssp, #0x8 (8)
0x4cd248b0   816  str lr, [jssp, #-8]!
0x4cd248b4   820  ldr x17, pc+660 (addr 0x000000004cd24b48)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd248b8   824  blr x17
0x4cd248bc   828  ldr lr, [jssp], #8
0x4cd248c0   832  ret
0x4cd248c4   836  ldr x5, [x13]
0x4cd248c8   840  and x0, x5, #0xfffffffffff00000
0x4cd248cc   844  ldr x0, [x0, #8]
0x4cd248d0   848  tbz w0, #6, #+0x18 (addr 0x4cd248e8)
0x4cd248d4   852  and x0, x7, #0xfffffffffff00000
0x4cd248d8   856  ldr x0, [x0, #8]
0x4cd248dc   860  movz x16, #0x58
0x4cd248e0   864  tst x0, x16
0x4cd248e4   868  b.eq #+0x68 (addr 0x4cd2494c)
0x4cd248e8   872  sub csp, jssp, #0x10 (16)
0x4cd248ec   876  stp x7, x13, [jssp, #-16]!
0x4cd248f0   880  ubfx x16, x5, #8, #12
0x4cd248f4   884  and x0, x5, #0xfffffffffff00000
0x4cd248f8   888  add x0, x0, x16, lsl #2
0x4cd248fc   892  ubfx x7, x5, #3, #5
0x4cd24900   896  ldr x13, [x0, #360]
0x4cd24904   900  lsr x13, x13, x7
0x4cd24908   904  tbz w13, #0, #+0x40 (addr 0x4cd24948)
0x4cd2490c   908  ldp x7, x13, [jssp], #16
0x4cd24910   912  ldp x1, x0, [jssp], #16
0x4cd24914   916  ldr x16, pc+572 (addr 0x000000004cd24b50)    ;; external reference (store_buffer_top)
0x4cd24918   920  ldr x5, [x16]
0x4cd2491c   924  str x13, [x5], #8
0x4cd24920   928  str x5, [x16]
0x4cd24924   932  tst x5, #0x1ffff
0x4cd24928   936  b.eq #+0x8 (addr 0x4cd24930)
0x4cd2492c   940  ret
0x4cd24930   944  sub csp, jssp, #0x8 (8)
0x4cd24934   948  str lr, [jssp, #-8]!
0x4cd24938   952  ldr x17, pc+544 (addr 0x000000004cd24b58)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2493c   956  blr x17
0x4cd24940   960  ldr lr, [jssp], #8
0x4cd24944   964  ret
0x4cd24948   968  ldp x7, x13, [jssp], #16
0x4cd2494c   972  sub csp, jssp, #0x78 (120)
0x4cd24950   976  stp x14, x15, [jssp, #-32]!
0x4cd24954   980  stp x18, lr, [jssp, #16]
0x4cd24958   984  stp x10, x11, [jssp, #-32]!
0x4cd2495c   988  stp x12, x13, [jssp, #16]
0x4cd24960   992  stp x6, x7, [jssp, #-32]!
0x4cd24964   996  stp x8, x9, [jssp, #16]
0x4cd24968  1000  stp x2, x3, [jssp, #-24]!
0x4cd2496c  1004  str x4, [jssp, #16]
0x4cd24970  1008  mov x0, x7
0x4cd24974  1012  mov x1, x13
0x4cd24978  1016  ldr x2, pc+488 (addr 0x000000004cd24b60)    ;; external reference (isolate)
0x4cd2497c  1020  ldr x16, pc+492 (addr 0x000000004cd24b68)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd24980  1024  and csp, jssp, #0xfffffffffffffff0
0x4cd24984  1028  blr x16
0x4cd24988  1032  ldp x4, x6, [jssp, #16]
0x4cd2498c  1036  ldp x2, x3, [jssp], #32
0x4cd24990  1040  ldp x9, x10, [jssp, #16]
0x4cd24994  1044  ldp x7, x8, [jssp], #32
0x4cd24998  1048  ldp x13, x14, [jssp, #16]
0x4cd2499c  1052  ldp x11, x12, [jssp], #32
0x4cd249a0  1056  ldr lr, [jssp, #16]
0x4cd249a4  1060  ldp x15, x18, [jssp], #24
0x4cd249a8  1064  ldp x1, x0, [jssp], #16
0x4cd249ac  1068  ldr x16, pc+452 (addr 0x000000004cd24b70)    ;; external reference (store_buffer_top)
0x4cd249b0  1072  ldr x5, [x16]
0x4cd249b4  1076  str x13, [x5], #8
0x4cd249b8  1080  str x5, [x16]
0x4cd249bc  1084  tst x5, #0x1ffff
0x4cd249c0  1088  b.eq #+0x8 (addr 0x4cd249c8)
0x4cd249c4  1092  ret
0x4cd249c8  1096  sub csp, jssp, #0x8 (8)
0x4cd249cc  1100  str lr, [jssp, #-8]!
0x4cd249d0  1104  ldr x17, pc+424 (addr 0x000000004cd24b78)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd249d4  1108  blr x17
0x4cd249d8  1112  ldr lr, [jssp], #8
0x4cd249dc  1116  ret
0x4cd249e0  1120  and x5, x7, #0xfffffffffff00000
0x4cd249e4  1124  ldr x0, [x5, #104]
0x4cd249e8  1128  subs x0, x0, #0x1 (1)
0x4cd249ec  1132  str x0, [x5, #104]
0x4cd249f0  1136  b.mi #+0x84 (addr 0x4cd24a74)
0x4cd249f4  1140  ubfx x16, x7, #8, #12
0x4cd249f8  1144  and x5, x7, #0xfffffffffff00000
0x4cd249fc  1148  add x5, x5, x16, lsl #2
0x4cd24a00  1152  ubfx x0, x7, #3, #5
0x4cd24a04  1156  ldr x5, [x5, #360]
0x4cd24a08  1160  lsr x5, x5, x0
0x4cd24a0c  1164  tbz w5, #0, #+0x8 (addr 0x4cd24a14)
0x4cd24a10  1168  tbnz w5, #1, #+0xc (addr 0x4cd24a1c)
0x4cd24a14  1172  ldp x1, x0, [jssp], #16
0x4cd24a18  1176  ret
0x4cd24a1c  1180  ldr x5, [x13]
0x4cd24a20  1184  and x0, x5, #0xfffffffffff00000
0x4cd24a24  1188  ldr x0, [x0, #8]
0x4cd24a28  1192  tbz w0, #6, #+0x18 (addr 0x4cd24a40)
0x4cd24a2c  1196  and x0, x7, #0xfffffffffff00000
0x4cd24a30  1200  ldr x0, [x0, #8]
0x4cd24a34  1204  movz x16, #0x58
0x4cd24a38  1208  tst x0, x16
0x4cd24a3c  1212  b.eq #+0x38 (addr 0x4cd24a74)
0x4cd24a40  1216  sub csp, jssp, #0x10 (16)
0x4cd24a44  1220  stp x7, x13, [jssp, #-16]!
0x4cd24a48  1224  ubfx x16, x5, #8, #12
0x4cd24a4c  1228  and x0, x5, #0xfffffffffff00000
0x4cd24a50  1232  add x0, x0, x16, lsl #2
0x4cd24a54  1236  ubfx x7, x5, #3, #5
0x4cd24a58  1240  ldr x13, [x0, #360]
0x4cd24a5c  1244  lsr x13, x13, x7
0x4cd24a60  1248  tbz w13, #0, #+0x10 (addr 0x4cd24a70)
0x4cd24a64  1252  ldp x7, x13, [jssp], #16
0x4cd24a68  1256  ldp x1, x0, [jssp], #16
0x4cd24a6c  1260  ret
0x4cd24a70  1264  ldp x7, x13, [jssp], #16
0x4cd24a74  1268  sub csp, jssp, #0x78 (120)
0x4cd24a78  1272  stp x14, x15, [jssp, #-32]!
0x4cd24a7c  1276  stp x18, lr, [jssp, #16]
0x4cd24a80  1280  stp x10, x11, [jssp, #-32]!
0x4cd24a84  1284  stp x12, x13, [jssp, #16]
0x4cd24a88  1288  stp x6, x7, [jssp, #-32]!
0x4cd24a8c  1292  stp x8, x9, [jssp, #16]
0x4cd24a90  1296  stp x2, x3, [jssp, #-24]!
0x4cd24a94  1300  str x4, [jssp, #16]
0x4cd24a98  1304  mov x0, x7
0x4cd24a9c  1308  mov x1, x13
0x4cd24aa0  1312  ldr x2, pc+224 (addr 0x000000004cd24b80)    ;; external reference (isolate)
0x4cd24aa4  1316  ldr x16, pc+228 (addr 0x000000004cd24b88)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd24aa8  1320  and csp, jssp, #0xfffffffffffffff0
0x4cd24aac  1324  blr x16
0x4cd24ab0  1328  ldp x4, x6, [jssp, #16]
0x4cd24ab4  1332  ldp x2, x3, [jssp], #32
0x4cd24ab8  1336  ldp x9, x10, [jssp, #16]
0x4cd24abc  1340  ldp x7, x8, [jssp], #32
0x4cd24ac0  1344  ldp x13, x14, [jssp, #16]
0x4cd24ac4  1348  ldp x11, x12, [jssp], #32
0x4cd24ac8  1352  ldr lr, [jssp, #16]
0x4cd24acc  1356  ldp x15, x18, [jssp], #24
0x4cd24ad0  1360  ldp x1, x0, [jssp], #16
0x4cd24ad4  1364  ret
0x4cd24ad8  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd24adc  1372  d63f03e0       constant
0x4cd24ae0  1376  166dd8c0       constant
0x4cd24ae4  1380  00000000       constant
0x4cd24ae8  1384  4cd064c0       constant
0x4cd24aec  1388  00000000       constant
0x4cd24af0  1392  166dd8c0       constant
0x4cd24af4  1396  00000000       constant
0x4cd24af8  1400  4cd064c0       constant
0x4cd24afc  1404  00000000       constant
0x4cd24b00  1408  166dd8c0       constant
0x4cd24b04  1412  00000000       constant
0x4cd24b08  1416  4cd064c0       constant
0x4cd24b0c  1420  00000000       constant
0x4cd24b10  1424  166dc2d0       constant
0x4cd24b14  1428  00000000       constant
0x4cd24b18  1432  00c2d958       constant
0x4cd24b1c  1436  00000000       constant
0x4cd24b20  1440  166dd8c0       constant
0x4cd24b24  1444  00000000       constant
0x4cd24b28  1448  4cd064c0       constant
0x4cd24b2c  1452  00000000       constant
0x4cd24b30  1456  166dc2d0       constant
0x4cd24b34  1460  00000000       constant
0x4cd24b38  1464  00c2d958       constant
0x4cd24b3c  1468  00000000       constant
0x4cd24b40  1472  166dd8c0       constant
0x4cd24b44  1476  00000000       constant
0x4cd24b48  1480  4cd064c0       constant
0x4cd24b4c  1484  00000000       constant
0x4cd24b50  1488  166dd8c0       constant
0x4cd24b54  1492  00000000       constant
0x4cd24b58  1496  4cd064c0       constant
0x4cd24b5c  1500  00000000       constant
0x4cd24b60  1504  166dc2d0       constant
0x4cd24b64  1508  00000000       constant
0x4cd24b68  1512  00c2d958       constant
0x4cd24b6c  1516  00000000       constant
0x4cd24b70  1520  166dd8c0       constant
0x4cd24b74  1524  00000000       constant
0x4cd24b78  1528  4cd064c0       constant
0x4cd24b7c  1532  00000000       constant
0x4cd24b80  1536  166dc2d0       constant
0x4cd24b84  1540  00000000       constant
0x4cd24b88  1544  00c2d958       constant
0x4cd24b8c  1548  00000000       constant


RelocInfo (size = 59)
0x4cd24588  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd245ac  code target (STUB)  (0x4cd064c0)
0x4cd24624  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd24648  code target (STUB)  (0x4cd064c0)
0x4cd24688  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd246ac  code target (STUB)  (0x4cd064c0)
0x4cd246ec  external reference (isolate)  (0x166dc2d0)
0x4cd246f0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd24720  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd24744  code target (STUB)  (0x4cd064c0)
0x4cd247f4  external reference (isolate)  (0x166dc2d0)
0x4cd247f8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd24890  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd248b4  code target (STUB)  (0x4cd064c0)
0x4cd24914  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd24938  code target (STUB)  (0x4cd064c0)
0x4cd24978  external reference (isolate)  (0x166dc2d0)
0x4cd2497c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd249ac  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd249d0  code target (STUB)  (0x4cd064c0)
0x4cd24aa0  external reference (isolate)  (0x166dc2d0)
0x4cd24aa4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd24ad8  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0x4cd24c00     0  adr xzr, #+0x40 (addr 0x4cd24c40)
0x4cd24c04     4  adr xzr, #+0x2a8 (addr 0x4cd24eac)
0x4cd24c08     8  ldr x16, pc+1368 (addr 0x000000004cd25160)    ;; external reference (store_buffer_top)
0x4cd24c0c    12  ldr x7, [x16]
0x4cd24c10    16  str x13, [x7], #8
0x4cd24c14    20  str x7, [x16]
0x4cd24c18    24  tst x7, #0x1ffff
0x4cd24c1c    28  b.eq #+0x8 (addr 0x4cd24c24)
0x4cd24c20    32  ret
0x4cd24c24    36  sub csp, jssp, #0x8 (8)
0x4cd24c28    40  str lr, [jssp, #-8]!
0x4cd24c2c    44  ldr x17, pc+1340 (addr 0x000000004cd25168)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd24c30    48  blr x17
0x4cd24c34    52  ldr lr, [jssp], #8
0x4cd24c38    56  ret
0x4cd24c3c    60  ret
0x4cd24c40    64  sub csp, jssp, #0x10 (16)
0x4cd24c44    68  stp x2, x0, [jssp, #-16]!
0x4cd24c48    72  ldr x7, [x13]
0x4cd24c4c    76  and x16, x7, #0xfffffffffff00000
0x4cd24c50    80  ldr x16, [x16, #8]
0x4cd24c54    84  tst x16, #0x18
0x4cd24c58    88  b.eq #+0x17c (addr 0x4cd24dd4)
0x4cd24c5c    92  and x16, x1, #0xfffffffffff00000
0x4cd24c60    96  ldr x16, [x16, #8]
0x4cd24c64   100  tst x16, #0x18
0x4cd24c68   104  b.ne #+0x16c (addr 0x4cd24dd4)
0x4cd24c6c   108  and x7, x1, #0xfffffffffff00000
0x4cd24c70   112  ldr x0, [x7, #104]
0x4cd24c74   116  subs x0, x0, #0x1 (1)
0x4cd24c78   120  str x0, [x7, #104]
0x4cd24c7c   124  b.mi #+0xc4 (addr 0x4cd24d40)
0x4cd24c80   128  ubfx x16, x1, #8, #12
0x4cd24c84   132  and x7, x1, #0xfffffffffff00000
0x4cd24c88   136  add x7, x7, x16, lsl #2
0x4cd24c8c   140  ubfx x0, x1, #3, #5
0x4cd24c90   144  ldr x7, [x7, #360]
0x4cd24c94   148  lsr x7, x7, x0
0x4cd24c98   152  tbz w7, #0, #+0x8 (addr 0x4cd24ca0)
0x4cd24c9c   156  tbnz w7, #1, #+0x3c (addr 0x4cd24cd8)
0x4cd24ca0   160  ldp x2, x0, [jssp], #16
0x4cd24ca4   164  ldr x16, pc+1228 (addr 0x000000004cd25170)    ;; external reference (store_buffer_top)
0x4cd24ca8   168  ldr x7, [x16]
0x4cd24cac   172  str x13, [x7], #8
0x4cd24cb0   176  str x7, [x16]
0x4cd24cb4   180  tst x7, #0x1ffff
0x4cd24cb8   184  b.eq #+0x8 (addr 0x4cd24cc0)
0x4cd24cbc   188  ret
0x4cd24cc0   192  sub csp, jssp, #0x8 (8)
0x4cd24cc4   196  str lr, [jssp, #-8]!
0x4cd24cc8   200  ldr x17, pc+1200 (addr 0x000000004cd25178)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd24ccc   204  blr x17
0x4cd24cd0   208  ldr lr, [jssp], #8
0x4cd24cd4   212  ret
0x4cd24cd8   216  ldr x7, [x13]
0x4cd24cdc   220  sub csp, jssp, #0x10 (16)
0x4cd24ce0   224  stp x1, x13, [jssp, #-16]!
0x4cd24ce4   228  ubfx x16, x7, #8, #12
0x4cd24ce8   232  and x0, x7, #0xfffffffffff00000
0x4cd24cec   236  add x0, x0, x16, lsl #2
0x4cd24cf0   240  ubfx x1, x7, #3, #5
0x4cd24cf4   244  ldr x13, [x0, #360]
0x4cd24cf8   248  lsr x13, x13, x1
0x4cd24cfc   252  tbz w13, #0, #+0x40 (addr 0x4cd24d3c)
0x4cd24d00   256  ldp x1, x13, [jssp], #16
0x4cd24d04   260  ldp x2, x0, [jssp], #16
0x4cd24d08   264  ldr x16, pc+1144 (addr 0x000000004cd25180)    ;; external reference (store_buffer_top)
0x4cd24d0c   268  ldr x7, [x16]
0x4cd24d10   272  str x13, [x7], #8
0x4cd24d14   276  str x7, [x16]
0x4cd24d18   280  tst x7, #0x1ffff
0x4cd24d1c   284  b.eq #+0x8 (addr 0x4cd24d24)
0x4cd24d20   288  ret
0x4cd24d24   292  sub csp, jssp, #0x8 (8)
0x4cd24d28   296  str lr, [jssp, #-8]!
0x4cd24d2c   300  ldr x17, pc+1116 (addr 0x000000004cd25188)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd24d30   304  blr x17
0x4cd24d34   308  ldr lr, [jssp], #8
0x4cd24d38   312  ret
0x4cd24d3c   316  ldp x1, x13, [jssp], #16
0x4cd24d40   320  sub csp, jssp, #0x78 (120)
0x4cd24d44   324  stp x14, x15, [jssp, #-32]!
0x4cd24d48   328  stp x18, lr, [jssp, #16]
0x4cd24d4c   332  stp x10, x11, [jssp, #-32]!
0x4cd24d50   336  stp x12, x13, [jssp, #16]
0x4cd24d54   340  stp x5, x6, [jssp, #-32]!
0x4cd24d58   344  stp x8, x9, [jssp, #16]
0x4cd24d5c   348  stp x1, x3, [jssp, #-24]!
0x4cd24d60   352  str x4, [jssp, #16]
0x4cd24d64   356  mov x0, x1
0x4cd24d68   360  mov x1, x13
0x4cd24d6c   364  ldr x2, pc+1060 (addr 0x000000004cd25190)    ;; external reference (isolate)
0x4cd24d70   368  ldr x16, pc+1064 (addr 0x000000004cd25198)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd24d74   372  and csp, jssp, #0xfffffffffffffff0
0x4cd24d78   376  blr x16
0x4cd24d7c   380  ldp x4, x5, [jssp, #16]
0x4cd24d80   384  ldp x1, x3, [jssp], #32
0x4cd24d84   388  ldp x9, x10, [jssp, #16]
0x4cd24d88   392  ldp x6, x8, [jssp], #32
0x4cd24d8c   396  ldp x13, x14, [jssp, #16]
0x4cd24d90   400  ldp x11, x12, [jssp], #32
0x4cd24d94   404  ldr lr, [jssp, #16]
0x4cd24d98   408  ldp x15, x18, [jssp], #24
0x4cd24d9c   412  ldp x2, x0, [jssp], #16
0x4cd24da0   416  ldr x16, pc+1024 (addr 0x000000004cd251a0)    ;; external reference (store_buffer_top)
0x4cd24da4   420  ldr x7, [x16]
0x4cd24da8   424  str x13, [x7], #8
0x4cd24dac   428  str x7, [x16]
0x4cd24db0   432  tst x7, #0x1ffff
0x4cd24db4   436  b.eq #+0x8 (addr 0x4cd24dbc)
0x4cd24db8   440  ret
0x4cd24dbc   444  sub csp, jssp, #0x8 (8)
0x4cd24dc0   448  str lr, [jssp, #-8]!
0x4cd24dc4   452  ldr x17, pc+996 (addr 0x000000004cd251a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd24dc8   456  blr x17
0x4cd24dcc   460  ldr lr, [jssp], #8
0x4cd24dd0   464  ret
0x4cd24dd4   468  and x7, x1, #0xfffffffffff00000
0x4cd24dd8   472  ldr x0, [x7, #104]
0x4cd24ddc   476  subs x0, x0, #0x1 (1)
0x4cd24de0   480  str x0, [x7, #104]
0x4cd24de4   484  b.mi #+0x64 (addr 0x4cd24e48)
0x4cd24de8   488  ubfx x16, x1, #8, #12
0x4cd24dec   492  and x7, x1, #0xfffffffffff00000
0x4cd24df0   496  add x7, x7, x16, lsl #2
0x4cd24df4   500  ubfx x0, x1, #3, #5
0x4cd24df8   504  ldr x7, [x7, #360]
0x4cd24dfc   508  lsr x7, x7, x0
0x4cd24e00   512  tbz w7, #0, #+0x8 (addr 0x4cd24e08)
0x4cd24e04   516  tbnz w7, #1, #+0xc (addr 0x4cd24e10)
0x4cd24e08   520  ldp x2, x0, [jssp], #16
0x4cd24e0c   524  ret
0x4cd24e10   528  ldr x7, [x13]
0x4cd24e14   532  sub csp, jssp, #0x10 (16)
0x4cd24e18   536  stp x1, x13, [jssp, #-16]!
0x4cd24e1c   540  ubfx x16, x7, #8, #12
0x4cd24e20   544  and x0, x7, #0xfffffffffff00000
0x4cd24e24   548  add x0, x0, x16, lsl #2
0x4cd24e28   552  ubfx x1, x7, #3, #5
0x4cd24e2c   556  ldr x13, [x0, #360]
0x4cd24e30   560  lsr x13, x13, x1
0x4cd24e34   564  tbz w13, #0, #+0x10 (addr 0x4cd24e44)
0x4cd24e38   568  ldp x1, x13, [jssp], #16
0x4cd24e3c   572  ldp x2, x0, [jssp], #16
0x4cd24e40   576  ret
0x4cd24e44   580  ldp x1, x13, [jssp], #16
0x4cd24e48   584  sub csp, jssp, #0x78 (120)
0x4cd24e4c   588  stp x14, x15, [jssp, #-32]!
0x4cd24e50   592  stp x18, lr, [jssp, #16]
0x4cd24e54   596  stp x10, x11, [jssp, #-32]!
0x4cd24e58   600  stp x12, x13, [jssp, #16]
0x4cd24e5c   604  stp x5, x6, [jssp, #-32]!
0x4cd24e60   608  stp x8, x9, [jssp, #16]
0x4cd24e64   612  stp x1, x3, [jssp, #-24]!
0x4cd24e68   616  str x4, [jssp, #16]
0x4cd24e6c   620  mov x0, x1
0x4cd24e70   624  mov x1, x13
0x4cd24e74   628  ldr x2, pc+828 (addr 0x000000004cd251b0)    ;; external reference (isolate)
0x4cd24e78   632  ldr x16, pc+832 (addr 0x000000004cd251b8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd24e7c   636  and csp, jssp, #0xfffffffffffffff0
0x4cd24e80   640  blr x16
0x4cd24e84   644  ldp x4, x5, [jssp, #16]
0x4cd24e88   648  ldp x1, x3, [jssp], #32
0x4cd24e8c   652  ldp x9, x10, [jssp, #16]
0x4cd24e90   656  ldp x6, x8, [jssp], #32
0x4cd24e94   660  ldp x13, x14, [jssp, #16]
0x4cd24e98   664  ldp x11, x12, [jssp], #32
0x4cd24e9c   668  ldr lr, [jssp, #16]
0x4cd24ea0   672  ldp x15, x18, [jssp], #24
0x4cd24ea4   676  ldp x2, x0, [jssp], #16
0x4cd24ea8   680  ret
0x4cd24eac   684  sub csp, jssp, #0x10 (16)
0x4cd24eb0   688  stp x2, x0, [jssp, #-16]!
0x4cd24eb4   692  ldr x7, [x13]
0x4cd24eb8   696  and x16, x7, #0xfffffffffff00000
0x4cd24ebc   700  ldr x16, [x16, #8]
0x4cd24ec0   704  tst x16, #0x18
0x4cd24ec4   708  b.eq #+0x19c (addr 0x4cd25060)
0x4cd24ec8   712  and x16, x1, #0xfffffffffff00000
0x4cd24ecc   716  ldr x16, [x16, #8]
0x4cd24ed0   720  tst x16, #0x18
0x4cd24ed4   724  b.ne #+0x18c (addr 0x4cd25060)
0x4cd24ed8   728  and x7, x1, #0xfffffffffff00000
0x4cd24edc   732  ldr x0, [x7, #104]
0x4cd24ee0   736  subs x0, x0, #0x1 (1)
0x4cd24ee4   740  str x0, [x7, #104]
0x4cd24ee8   744  b.mi #+0xe4 (addr 0x4cd24fcc)
0x4cd24eec   748  ubfx x16, x1, #8, #12
0x4cd24ef0   752  and x7, x1, #0xfffffffffff00000
0x4cd24ef4   756  add x7, x7, x16, lsl #2
0x4cd24ef8   760  ubfx x0, x1, #3, #5
0x4cd24efc   764  ldr x7, [x7, #360]
0x4cd24f00   768  lsr x7, x7, x0
0x4cd24f04   772  tbz w7, #0, #+0x8 (addr 0x4cd24f0c)
0x4cd24f08   776  tbnz w7, #1, #+0x3c (addr 0x4cd24f44)
0x4cd24f0c   780  ldp x2, x0, [jssp], #16
0x4cd24f10   784  ldr x16, pc+688 (addr 0x000000004cd251c0)    ;; external reference (store_buffer_top)
0x4cd24f14   788  ldr x7, [x16]
0x4cd24f18   792  str x13, [x7], #8
0x4cd24f1c   796  str x7, [x16]
0x4cd24f20   800  tst x7, #0x1ffff
0x4cd24f24   804  b.eq #+0x8 (addr 0x4cd24f2c)
0x4cd24f28   808  ret
0x4cd24f2c   812  sub csp, jssp, #0x8 (8)
0x4cd24f30   816  str lr, [jssp, #-8]!
0x4cd24f34   820  ldr x17, pc+660 (addr 0x000000004cd251c8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd24f38   824  blr x17
0x4cd24f3c   828  ldr lr, [jssp], #8
0x4cd24f40   832  ret
0x4cd24f44   836  ldr x7, [x13]
0x4cd24f48   840  and x0, x7, #0xfffffffffff00000
0x4cd24f4c   844  ldr x0, [x0, #8]
0x4cd24f50   848  tbz w0, #6, #+0x18 (addr 0x4cd24f68)
0x4cd24f54   852  and x0, x1, #0xfffffffffff00000
0x4cd24f58   856  ldr x0, [x0, #8]
0x4cd24f5c   860  movz x16, #0x58
0x4cd24f60   864  tst x0, x16
0x4cd24f64   868  b.eq #+0x68 (addr 0x4cd24fcc)
0x4cd24f68   872  sub csp, jssp, #0x10 (16)
0x4cd24f6c   876  stp x1, x13, [jssp, #-16]!
0x4cd24f70   880  ubfx x16, x7, #8, #12
0x4cd24f74   884  and x0, x7, #0xfffffffffff00000
0x4cd24f78   888  add x0, x0, x16, lsl #2
0x4cd24f7c   892  ubfx x1, x7, #3, #5
0x4cd24f80   896  ldr x13, [x0, #360]
0x4cd24f84   900  lsr x13, x13, x1
0x4cd24f88   904  tbz w13, #0, #+0x40 (addr 0x4cd24fc8)
0x4cd24f8c   908  ldp x1, x13, [jssp], #16
0x4cd24f90   912  ldp x2, x0, [jssp], #16
0x4cd24f94   916  ldr x16, pc+572 (addr 0x000000004cd251d0)    ;; external reference (store_buffer_top)
0x4cd24f98   920  ldr x7, [x16]
0x4cd24f9c   924  str x13, [x7], #8
0x4cd24fa0   928  str x7, [x16]
0x4cd24fa4   932  tst x7, #0x1ffff
0x4cd24fa8   936  b.eq #+0x8 (addr 0x4cd24fb0)
0x4cd24fac   940  ret
0x4cd24fb0   944  sub csp, jssp, #0x8 (8)
0x4cd24fb4   948  str lr, [jssp, #-8]!
0x4cd24fb8   952  ldr x17, pc+544 (addr 0x000000004cd251d8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd24fbc   956  blr x17
0x4cd24fc0   960  ldr lr, [jssp], #8
0x4cd24fc4   964  ret
0x4cd24fc8   968  ldp x1, x13, [jssp], #16
0x4cd24fcc   972  sub csp, jssp, #0x78 (120)
0x4cd24fd0   976  stp x14, x15, [jssp, #-32]!
0x4cd24fd4   980  stp x18, lr, [jssp, #16]
0x4cd24fd8   984  stp x10, x11, [jssp, #-32]!
0x4cd24fdc   988  stp x12, x13, [jssp, #16]
0x4cd24fe0   992  stp x5, x6, [jssp, #-32]!
0x4cd24fe4   996  stp x8, x9, [jssp, #16]
0x4cd24fe8  1000  stp x1, x3, [jssp, #-24]!
0x4cd24fec  1004  str x4, [jssp, #16]
0x4cd24ff0  1008  mov x0, x1
0x4cd24ff4  1012  mov x1, x13
0x4cd24ff8  1016  ldr x2, pc+488 (addr 0x000000004cd251e0)    ;; external reference (isolate)
0x4cd24ffc  1020  ldr x16, pc+492 (addr 0x000000004cd251e8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd25000  1024  and csp, jssp, #0xfffffffffffffff0
0x4cd25004  1028  blr x16
0x4cd25008  1032  ldp x4, x5, [jssp, #16]
0x4cd2500c  1036  ldp x1, x3, [jssp], #32
0x4cd25010  1040  ldp x9, x10, [jssp, #16]
0x4cd25014  1044  ldp x6, x8, [jssp], #32
0x4cd25018  1048  ldp x13, x14, [jssp, #16]
0x4cd2501c  1052  ldp x11, x12, [jssp], #32
0x4cd25020  1056  ldr lr, [jssp, #16]
0x4cd25024  1060  ldp x15, x18, [jssp], #24
0x4cd25028  1064  ldp x2, x0, [jssp], #16
0x4cd2502c  1068  ldr x16, pc+452 (addr 0x000000004cd251f0)    ;; external reference (store_buffer_top)
0x4cd25030  1072  ldr x7, [x16]
0x4cd25034  1076  str x13, [x7], #8
0x4cd25038  1080  str x7, [x16]
0x4cd2503c  1084  tst x7, #0x1ffff
0x4cd25040  1088  b.eq #+0x8 (addr 0x4cd25048)
0x4cd25044  1092  ret
0x4cd25048  1096  sub csp, jssp, #0x8 (8)
0x4cd2504c  1100  str lr, [jssp, #-8]!
0x4cd25050  1104  ldr x17, pc+424 (addr 0x000000004cd251f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd25054  1108  blr x17
0x4cd25058  1112  ldr lr, [jssp], #8
0x4cd2505c  1116  ret
0x4cd25060  1120  and x7, x1, #0xfffffffffff00000
0x4cd25064  1124  ldr x0, [x7, #104]
0x4cd25068  1128  subs x0, x0, #0x1 (1)
0x4cd2506c  1132  str x0, [x7, #104]
0x4cd25070  1136  b.mi #+0x84 (addr 0x4cd250f4)
0x4cd25074  1140  ubfx x16, x1, #8, #12
0x4cd25078  1144  and x7, x1, #0xfffffffffff00000
0x4cd2507c  1148  add x7, x7, x16, lsl #2
0x4cd25080  1152  ubfx x0, x1, #3, #5
0x4cd25084  1156  ldr x7, [x7, #360]
0x4cd25088  1160  lsr x7, x7, x0
0x4cd2508c  1164  tbz w7, #0, #+0x8 (addr 0x4cd25094)
0x4cd25090  1168  tbnz w7, #1, #+0xc (addr 0x4cd2509c)
0x4cd25094  1172  ldp x2, x0, [jssp], #16
0x4cd25098  1176  ret
0x4cd2509c  1180  ldr x7, [x13]
0x4cd250a0  1184  and x0, x7, #0xfffffffffff00000
0x4cd250a4  1188  ldr x0, [x0, #8]
0x4cd250a8  1192  tbz w0, #6, #+0x18 (addr 0x4cd250c0)
0x4cd250ac  1196  and x0, x1, #0xfffffffffff00000
0x4cd250b0  1200  ldr x0, [x0, #8]
0x4cd250b4  1204  movz x16, #0x58
0x4cd250b8  1208  tst x0, x16
0x4cd250bc  1212  b.eq #+0x38 (addr 0x4cd250f4)
0x4cd250c0  1216  sub csp, jssp, #0x10 (16)
0x4cd250c4  1220  stp x1, x13, [jssp, #-16]!
0x4cd250c8  1224  ubfx x16, x7, #8, #12
0x4cd250cc  1228  and x0, x7, #0xfffffffffff00000
0x4cd250d0  1232  add x0, x0, x16, lsl #2
0x4cd250d4  1236  ubfx x1, x7, #3, #5
0x4cd250d8  1240  ldr x13, [x0, #360]
0x4cd250dc  1244  lsr x13, x13, x1
0x4cd250e0  1248  tbz w13, #0, #+0x10 (addr 0x4cd250f0)
0x4cd250e4  1252  ldp x1, x13, [jssp], #16
0x4cd250e8  1256  ldp x2, x0, [jssp], #16
0x4cd250ec  1260  ret
0x4cd250f0  1264  ldp x1, x13, [jssp], #16
0x4cd250f4  1268  sub csp, jssp, #0x78 (120)
0x4cd250f8  1272  stp x14, x15, [jssp, #-32]!
0x4cd250fc  1276  stp x18, lr, [jssp, #16]
0x4cd25100  1280  stp x10, x11, [jssp, #-32]!
0x4cd25104  1284  stp x12, x13, [jssp, #16]
0x4cd25108  1288  stp x5, x6, [jssp, #-32]!
0x4cd2510c  1292  stp x8, x9, [jssp, #16]
0x4cd25110  1296  stp x1, x3, [jssp, #-24]!
0x4cd25114  1300  str x4, [jssp, #16]
0x4cd25118  1304  mov x0, x1
0x4cd2511c  1308  mov x1, x13
0x4cd25120  1312  ldr x2, pc+224 (addr 0x000000004cd25200)    ;; external reference (isolate)
0x4cd25124  1316  ldr x16, pc+228 (addr 0x000000004cd25208)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd25128  1320  and csp, jssp, #0xfffffffffffffff0
0x4cd2512c  1324  blr x16
0x4cd25130  1328  ldp x4, x5, [jssp, #16]
0x4cd25134  1332  ldp x1, x3, [jssp], #32
0x4cd25138  1336  ldp x9, x10, [jssp, #16]
0x4cd2513c  1340  ldp x6, x8, [jssp], #32
0x4cd25140  1344  ldp x13, x14, [jssp, #16]
0x4cd25144  1348  ldp x11, x12, [jssp], #32
0x4cd25148  1352  ldr lr, [jssp, #16]
0x4cd2514c  1356  ldp x15, x18, [jssp], #24
0x4cd25150  1360  ldp x2, x0, [jssp], #16
0x4cd25154  1364  ret
0x4cd25158  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd2515c  1372  d63f03e0       constant
0x4cd25160  1376  166dd8c0       constant
0x4cd25164  1380  00000000       constant
0x4cd25168  1384  4cd064c0       constant
0x4cd2516c  1388  00000000       constant
0x4cd25170  1392  166dd8c0       constant
0x4cd25174  1396  00000000       constant
0x4cd25178  1400  4cd064c0       constant
0x4cd2517c  1404  00000000       constant
0x4cd25180  1408  166dd8c0       constant
0x4cd25184  1412  00000000       constant
0x4cd25188  1416  4cd064c0       constant
0x4cd2518c  1420  00000000       constant
0x4cd25190  1424  166dc2d0       constant
0x4cd25194  1428  00000000       constant
0x4cd25198  1432  00c2d958       constant
0x4cd2519c  1436  00000000       constant
0x4cd251a0  1440  166dd8c0       constant
0x4cd251a4  1444  00000000       constant
0x4cd251a8  1448  4cd064c0       constant
0x4cd251ac  1452  00000000       constant
0x4cd251b0  1456  166dc2d0       constant
0x4cd251b4  1460  00000000       constant
0x4cd251b8  1464  00c2d958       constant
0x4cd251bc  1468  00000000       constant
0x4cd251c0  1472  166dd8c0       constant
0x4cd251c4  1476  00000000       constant
0x4cd251c8  1480  4cd064c0       constant
0x4cd251cc  1484  00000000       constant
0x4cd251d0  1488  166dd8c0       constant
0x4cd251d4  1492  00000000       constant
0x4cd251d8  1496  4cd064c0       constant
0x4cd251dc  1500  00000000       constant
0x4cd251e0  1504  166dc2d0       constant
0x4cd251e4  1508  00000000       constant
0x4cd251e8  1512  00c2d958       constant
0x4cd251ec  1516  00000000       constant
0x4cd251f0  1520  166dd8c0       constant
0x4cd251f4  1524  00000000       constant
0x4cd251f8  1528  4cd064c0       constant
0x4cd251fc  1532  00000000       constant
0x4cd25200  1536  166dc2d0       constant
0x4cd25204  1540  00000000       constant
0x4cd25208  1544  00c2d958       constant
0x4cd2520c  1548  00000000       constant


RelocInfo (size = 59)
0x4cd24c08  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd24c2c  code target (STUB)  (0x4cd064c0)
0x4cd24ca4  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd24cc8  code target (STUB)  (0x4cd064c0)
0x4cd24d08  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd24d2c  code target (STUB)  (0x4cd064c0)
0x4cd24d6c  external reference (isolate)  (0x166dc2d0)
0x4cd24d70  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd24da0  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd24dc4  code target (STUB)  (0x4cd064c0)
0x4cd24e74  external reference (isolate)  (0x166dc2d0)
0x4cd24e78  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd24f10  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd24f34  code target (STUB)  (0x4cd064c0)
0x4cd24f94  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd24fb8  code target (STUB)  (0x4cd064c0)
0x4cd24ff8  external reference (isolate)  (0x166dc2d0)
0x4cd24ffc  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2502c  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd25050  code target (STUB)  (0x4cd064c0)
0x4cd25120  external reference (isolate)  (0x166dc2d0)
0x4cd25124  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd25158  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 536)
0x4cd25280     0  adr xzr, #+0xc (addr 0x4cd2528c)
0x4cd25284     4  adr xzr, #+0xe8 (addr 0x4cd2536c)
0x4cd25288     8  ret
0x4cd2528c    12  sub csp, jssp, #0x10 (16)
0x4cd25290    16  stp x2, x0, [jssp, #-16]!
0x4cd25294    20  and x3, x1, #0xfffffffffff00000
0x4cd25298    24  ldr x0, [x3, #104]
0x4cd2529c    28  subs x0, x0, #0x1 (1)
0x4cd252a0    32  str x0, [x3, #104]
0x4cd252a4    36  b.mi #+0x64 (addr 0x4cd25308)
0x4cd252a8    40  ubfx x16, x1, #8, #12
0x4cd252ac    44  and x3, x1, #0xfffffffffff00000
0x4cd252b0    48  add x3, x3, x16, lsl #2
0x4cd252b4    52  ubfx x0, x1, #3, #5
0x4cd252b8    56  ldr x3, [x3, #360]
0x4cd252bc    60  lsr x3, x3, x0
0x4cd252c0    64  tbz w3, #0, #+0x8 (addr 0x4cd252c8)
0x4cd252c4    68  tbnz w3, #1, #+0xc (addr 0x4cd252d0)
0x4cd252c8    72  ldp x2, x0, [jssp], #16
0x4cd252cc    76  ret
0x4cd252d0    80  ldr x3, [x13]
0x4cd252d4    84  sub csp, jssp, #0x10 (16)
0x4cd252d8    88  stp x1, x13, [jssp, #-16]!
0x4cd252dc    92  ubfx x16, x3, #8, #12
0x4cd252e0    96  and x0, x3, #0xfffffffffff00000
0x4cd252e4   100  add x0, x0, x16, lsl #2
0x4cd252e8   104  ubfx x1, x3, #3, #5
0x4cd252ec   108  ldr x13, [x0, #360]
0x4cd252f0   112  lsr x13, x13, x1
0x4cd252f4   116  tbz w13, #0, #+0x10 (addr 0x4cd25304)
0x4cd252f8   120  ldp x1, x13, [jssp], #16
0x4cd252fc   124  ldp x2, x0, [jssp], #16
0x4cd25300   128  ret
0x4cd25304   132  ldp x1, x13, [jssp], #16
0x4cd25308   136  sub csp, jssp, #0x78 (120)
0x4cd2530c   140  stp x14, x15, [jssp, #-32]!
0x4cd25310   144  stp x18, lr, [jssp, #16]
0x4cd25314   148  stp x10, x11, [jssp, #-32]!
0x4cd25318   152  stp x12, x13, [jssp, #16]
0x4cd2531c   156  stp x6, x7, [jssp, #-32]!
0x4cd25320   160  stp x8, x9, [jssp, #16]
0x4cd25324   164  stp x1, x4, [jssp, #-24]!
0x4cd25328   168  str x5, [jssp, #16]
0x4cd2532c   172  mov x0, x1
0x4cd25330   176  mov x1, x13
0x4cd25334   180  ldr x2, pc+324 (addr 0x000000004cd25478)    ;; external reference (isolate)
0x4cd25338   184  ldr x16, pc+328 (addr 0x000000004cd25480)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2533c   188  and csp, jssp, #0xfffffffffffffff0
0x4cd25340   192  blr x16
0x4cd25344   196  ldp x5, x6, [jssp, #16]
0x4cd25348   200  ldp x1, x4, [jssp], #32
0x4cd2534c   204  ldp x9, x10, [jssp, #16]
0x4cd25350   208  ldp x7, x8, [jssp], #32
0x4cd25354   212  ldp x13, x14, [jssp, #16]
0x4cd25358   216  ldp x11, x12, [jssp], #32
0x4cd2535c   220  ldr lr, [jssp, #16]
0x4cd25360   224  ldp x15, x18, [jssp], #24
0x4cd25364   228  ldp x2, x0, [jssp], #16
0x4cd25368   232  ret
0x4cd2536c   236  sub csp, jssp, #0x10 (16)
0x4cd25370   240  stp x2, x0, [jssp, #-16]!
0x4cd25374   244  and x3, x1, #0xfffffffffff00000
0x4cd25378   248  ldr x0, [x3, #104]
0x4cd2537c   252  subs x0, x0, #0x1 (1)
0x4cd25380   256  str x0, [x3, #104]
0x4cd25384   260  b.mi #+0x84 (addr 0x4cd25408)
0x4cd25388   264  ubfx x16, x1, #8, #12
0x4cd2538c   268  and x3, x1, #0xfffffffffff00000
0x4cd25390   272  add x3, x3, x16, lsl #2
0x4cd25394   276  ubfx x0, x1, #3, #5
0x4cd25398   280  ldr x3, [x3, #360]
0x4cd2539c   284  lsr x3, x3, x0
0x4cd253a0   288  tbz w3, #0, #+0x8 (addr 0x4cd253a8)
0x4cd253a4   292  tbnz w3, #1, #+0xc (addr 0x4cd253b0)
0x4cd253a8   296  ldp x2, x0, [jssp], #16
0x4cd253ac   300  ret
0x4cd253b0   304  ldr x3, [x13]
0x4cd253b4   308  and x0, x3, #0xfffffffffff00000
0x4cd253b8   312  ldr x0, [x0, #8]
0x4cd253bc   316  tbz w0, #6, #+0x18 (addr 0x4cd253d4)
0x4cd253c0   320  and x0, x1, #0xfffffffffff00000
0x4cd253c4   324  ldr x0, [x0, #8]
0x4cd253c8   328  movz x16, #0x58
0x4cd253cc   332  tst x0, x16
0x4cd253d0   336  b.eq #+0x38 (addr 0x4cd25408)
0x4cd253d4   340  sub csp, jssp, #0x10 (16)
0x4cd253d8   344  stp x1, x13, [jssp, #-16]!
0x4cd253dc   348  ubfx x16, x3, #8, #12
0x4cd253e0   352  and x0, x3, #0xfffffffffff00000
0x4cd253e4   356  add x0, x0, x16, lsl #2
0x4cd253e8   360  ubfx x1, x3, #3, #5
0x4cd253ec   364  ldr x13, [x0, #360]
0x4cd253f0   368  lsr x13, x13, x1
0x4cd253f4   372  tbz w13, #0, #+0x10 (addr 0x4cd25404)
0x4cd253f8   376  ldp x1, x13, [jssp], #16
0x4cd253fc   380  ldp x2, x0, [jssp], #16
0x4cd25400   384  ret
0x4cd25404   388  ldp x1, x13, [jssp], #16
0x4cd25408   392  sub csp, jssp, #0x78 (120)
0x4cd2540c   396  stp x14, x15, [jssp, #-32]!
0x4cd25410   400  stp x18, lr, [jssp, #16]
0x4cd25414   404  stp x10, x11, [jssp, #-32]!
0x4cd25418   408  stp x12, x13, [jssp, #16]
0x4cd2541c   412  stp x6, x7, [jssp, #-32]!
0x4cd25420   416  stp x8, x9, [jssp, #16]
0x4cd25424   420  stp x1, x4, [jssp, #-24]!
0x4cd25428   424  str x5, [jssp, #16]
0x4cd2542c   428  mov x0, x1
0x4cd25430   432  mov x1, x13
0x4cd25434   436  ldr x2, pc+84 (addr 0x000000004cd25488)    ;; external reference (isolate)
0x4cd25438   440  ldr x16, pc+88 (addr 0x000000004cd25490)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2543c   444  and csp, jssp, #0xfffffffffffffff0
0x4cd25440   448  blr x16
0x4cd25444   452  ldp x5, x6, [jssp, #16]
0x4cd25448   456  ldp x1, x4, [jssp], #32
0x4cd2544c   460  ldp x9, x10, [jssp, #16]
0x4cd25450   464  ldp x7, x8, [jssp], #32
0x4cd25454   468  ldp x13, x14, [jssp, #16]
0x4cd25458   472  ldp x11, x12, [jssp], #32
0x4cd2545c   476  ldr lr, [jssp, #16]
0x4cd25460   480  ldp x15, x18, [jssp], #24
0x4cd25464   484  ldp x2, x0, [jssp], #16
0x4cd25468   488  ret
0x4cd2546c   492  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0x4cd25470   496  d63f03e0       constant
0x4cd25474   500  d503201f       constant
0x4cd25478   504  166dc2d0       constant
0x4cd2547c   508  00000000       constant
0x4cd25480   512  00c2d958       constant
0x4cd25484   516  00000000       constant
0x4cd25488   520  166dc2d0       constant
0x4cd2548c   524  00000000       constant
0x4cd25490   528  00c2d958       constant
0x4cd25494   532  00000000       constant


RelocInfo (size = 18)
0x4cd25334  external reference (isolate)  (0x166dc2d0)
0x4cd25338  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd25434  external reference (isolate)  (0x166dc2d0)
0x4cd25438  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2546c  constant pool (size 44)


kind = STUB
major_key = InstanceOfStub
name = InstanceOfStub
compiler = unknown
Instructions (size = 296)
0x4cd283a0     0  tbz w1, #0, #+0x28 (addr 0x4cd283c8)
0x4cd283a4     4  ldur x2, [x1, #-1]
0x4cd283a8     8  ldr x16, [x26, #376]
0x4cd283ac    12  cmp x0, x16
0x4cd283b0    16  b.ne #+0x34 (addr 0x4cd283e4)
0x4cd283b4    20  ldr x16, [x26, #384]
0x4cd283b8    24  cmp x2, x16
0x4cd283bc    28  b.ne #+0x28 (addr 0x4cd283e4)
0x4cd283c0    32  ldr x0, [x26, #392]
0x4cd283c4    36  ret
0x4cd283c8    40  tbz w0, #0, #+0xbc (addr 0x4cd28484)
0x4cd283cc    44  ldur x3, [x0, #-1]
0x4cd283d0    48  ldrb w5, [x3, #11]
0x4cd283d4    52  cmp x5, #0xc9 (201)
0x4cd283d8    56  b.ne #+0xac (addr 0x4cd28484)
0x4cd283dc    60  ldr x0, [x26, #72]
0x4cd283e0    64  ret
0x4cd283e4    68  tbz w0, #0, #+0xa0 (addr 0x4cd28484)
0x4cd283e8    72  ldur x3, [x0, #-1]
0x4cd283ec    76  ldrb w5, [x3, #11]
0x4cd283f0    80  cmp x5, #0xc9 (201)
0x4cd283f4    84  b.ne #+0x90 (addr 0x4cd28484)
0x4cd283f8    88  ldrb w5, [x3, #12]
0x4cd283fc    92  tbz w5, #7, #+0x88 (addr 0x4cd28484)
0x4cd28400    96  tbnz w5, #0, #+0x84 (addr 0x4cd28484)
0x4cd28404   100  ldur x4, [x0, #23]
0x4cd28408   104  ldur x5, [x4, #-1]
0x4cd2840c   108  ldrb w5, [x5, #11]
0x4cd28410   112  cmp x5, #0x84 (132)
0x4cd28414   116  b.ne #+0x8 (addr 0x4cd2841c)
0x4cd28418   120  ldur x4, [x4, #23]
0x4cd2841c   124  str x0, [x26, #376]
0x4cd28420   128  str x2, [x26, #384]
0x4cd28424   132  ldr x0, [x26, #64]
0x4cd28428   136  ldr x5, [x26, #56]
0x4cd2842c   140  ldrb w3, [x2, #12]
0x4cd28430   144  tbnz w3, #6, #+0x34 (addr 0x4cd28464)
0x4cd28434   148  ldrb w3, [x2, #11]
0x4cd28438   152  cmp x3, #0xb1 (177)
0x4cd2843c   156  b.eq #+0x28 (addr 0x4cd28464)
0x4cd28440   160  ldur x1, [x2, #23]
0x4cd28444   164  cmp x1, x4
0x4cd28448   168  b.eq #+0x14 (addr 0x4cd2845c)
0x4cd2844c   172  cmp x1, x5
0x4cd28450   176  ldur x2, [x1, #-1]
0x4cd28454   180  b.ne #-0x28 (addr 0x4cd2842c)
0x4cd28458   184  ldr x0, [x26, #72]
0x4cd2845c   188  str x0, [x26, #392]
0x4cd28460   192  ret
0x4cd28464   196  sub csp, jssp, #0x10 (16)
0x4cd28468   200  stp x4, x1, [jssp, #-16]!
0x4cd2846c   204  movz x5, #0x0
0x4cd28470   208  str x5, [x26, #376]
0x4cd28474   212  movz x0, #0x2
0x4cd28478   216  ldr x1, pc+48 (addr 0x000000004cd284a8)    ;; external reference (Runtime::HasInPrototypeChain)
0x4cd2847c   220  ldr x16, pc+52 (addr 0x000000004cd284b0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd28480   224  br x16
0x4cd28484   228  sub csp, jssp, #0x10 (16)
0x4cd28488   232  stp x0, x1, [jssp, #-16]!
0x4cd2848c   236  movz x0, #0x2
0x4cd28490   240  ldr x1, pc+40 (addr 0x000000004cd284b8)    ;; external reference (Runtime::OrdinaryHasInstance)
0x4cd28494   244  ldr x16, pc+44 (addr 0x000000004cd284c0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd28498   248  br x16
0x4cd2849c   252  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0x4cd284a0   256  d63f03e0       constant
0x4cd284a4   260  d503201f       constant
0x4cd284a8   264  00e4ad20       constant
0x4cd284ac   268  00000000       constant
0x4cd284b0   272  4cd06060       constant
0x4cd284b4   276  00000000       constant
0x4cd284b8   280  00e4a740       constant
0x4cd284bc   284  00000000       constant
0x4cd284c0   288  4cd06060       constant
0x4cd284c4   292  00000000       constant


RelocInfo (size = 14)
0x4cd28478  external reference (Runtime::HasInPrototypeChain)  (0xe4ad20)
0x4cd2847c  code target (STUB)  (0x4cd06060)
0x4cd28490  external reference (Runtime::OrdinaryHasInstance)  (0xe4a740)
0x4cd28494  code target (STUB)  (0x4cd06060)
0x4cd2849c  constant pool (size 44)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = InternalArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 429)
0x4cd289c0     0  movz w0, #0x6000
0x4cd289c4     4  movk w0, #0x9, lsl #16
0x4cd289c8     8  cmp w0, #0x30 (48)
0x4cd289cc    12  b.ls #+0x14c (addr 0x4cd28b18)
0x4cd289d0    16  movz x2, #0xd2c0
0x4cd289d4    20  movk x2, #0x166d, lsl #16
0x4cd289d8    24  ldp x3, x0, [x2]
0x4cd289dc    28  adds x16, x3, #0x50 (80)
0x4cd289e0    32  ccmp x16, x0, #nzCv, lo
0x4cd289e4    36  b.hi #+0x78 (addr 0x4cd28a5c)
0x4cd289e8    40  str x16, [x2]
0x4cd289ec    44  orr x3, x3, #0x1
0x4cd289f0    48  movz w0, #0x0
0x4cd289f4    52  stur x0, [x3, #31]
0x4cd289f8    56  ldur x0, [x1, #23]
0x4cd289fc    60  stur x0, [x3, #-1]
0x4cd28a00    64  ldr x0, pc+200 (addr 0x000000004cd28ac8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd28a04    68  stur x0, [x3, #7]
0x4cd28a08    72  ldr x0, pc+200 (addr 0x000000004cd28ad0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd28a0c    76  stur x0, [x3, #15]
0x4cd28a10    80  movz x0, #0x0
0x4cd28a14    84  stur x0, [x3, #23]
0x4cd28a18    88  add x0, x3, #0x20 (32)
0x4cd28a1c    92  ldr x1, pc+188 (addr 0x000000004cd28ad8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd28a20    96  stur x1, [x0, #-1]
0x4cd28a24   100  movz x1, #0x400000000
0x4cd28a28   104  stur x1, [x0, #7]
0x4cd28a2c   108  stur x0, [x3, #15]
0x4cd28a30   112  ldr x1, pc+176 (addr 0x000000004cd28ae0)    ;; object: 0x21004519 <the hole>
0x4cd28a34   116  stur x1, [x0, #15]
0x4cd28a38   120  ldr x1, pc+176 (addr 0x000000004cd28ae8)    ;; object: 0x21004519 <the hole>
0x4cd28a3c   124  stur x1, [x0, #23]
0x4cd28a40   128  ldr x1, pc+176 (addr 0x000000004cd28af0)    ;; object: 0x21004519 <the hole>
0x4cd28a44   132  stur x1, [x0, #31]
0x4cd28a48   136  ldr x1, pc+176 (addr 0x000000004cd28af8)    ;; object: 0x21004519 <the hole>
0x4cd28a4c   140  stur x1, [x0, #39]
0x4cd28a50   144  mov x0, x3
0x4cd28a54   148  add jssp, jssp, #0x8 (8)
0x4cd28a58   152  ret
0x4cd28a5c   156  sub csp, jssp, #0x10 (16)
0x4cd28a60   160  stp fp, lr, [jssp, #-16]!
0x4cd28a64   164  movz fp, #0xa00000000
0x4cd28a68   168  sub csp, jssp, #0x8 (8)
0x4cd28a6c   172  str fp, [jssp, #-8]!
0x4cd28a70   176  add fp, jssp, #0x8 (8)
0x4cd28a74   180  movz x3, #0x0
0x4cd28a78   184  mov x16, lr
0x4cd28a7c   188  ldr x17, pc+132 (addr 0x000000004cd28b00)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd28a80   192  blr x17
0x4cd28a84   196  movz x0, #0x5000000000
0x4cd28a88   200  movz x10, #0x0
0x4cd28a8c   204  sub csp, jssp, #0x10 (16)
0x4cd28a90   208  stp x10, x0, [jssp, #-16]!
0x4cd28a94   212  movz x0, #0x2
0x4cd28a98   216  movz x1, #0x5b88
0x4cd28a9c   220  movk x1, #0xe2, lsl #16
0x4cd28aa0   224  ldr x16, pc+104 (addr 0x000000004cd28b08)    ;; code: STUB, CEntryStub, minor: 5
0x4cd28aa4   228  blr x16
0x4cd28aa8   232  str x0, [jssp, #24]
0x4cd28aac   236  ldr x16, pc+100 (addr 0x000000004cd28b10)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd28ab0   240  blr x16
0x4cd28ab4   244  ldr lr, [jssp, #16]
0x4cd28ab8   248  ldp xzr, fp, [jssp], #24
0x4cd28abc   252  b #-0xcc (addr 0x4cd289f0)
0x4cd28ac0   256  580002bf       constant pool begin (num_const = 21)    ;; constant pool
0x4cd28ac4   260  d63f03e0       constant
0x4cd28ac8   264  21004201       constant
0x4cd28acc   268  00000000       constant
0x4cd28ad0   272  21004201       constant
0x4cd28ad4   276  00000000       constant
0x4cd28ad8   280  2a804259       constant
0x4cd28adc   284  00000000       constant
0x4cd28ae0   288  21004519       constant
0x4cd28ae4   292  00000000       constant
0x4cd28ae8   296  21004519       constant
0x4cd28aec   300  00000000       constant
0x4cd28af0   304  21004519       constant
0x4cd28af4   308  00000000       constant
0x4cd28af8   312  21004519       constant
0x4cd28afc   316  00000000       constant
0x4cd28b00   320  4cd06820       constant
0x4cd28b04   324  00000000       constant
0x4cd28b08   328  4cd06260       constant
0x4cd28b0c   332  00000000       constant
0x4cd28b10   336  4cd068e0       constant
0x4cd28b14   340  00000000       constant
0x4cd28b18   344  movz x16, #0x0
0x4cd28b1c   348  sub csp, jssp, #0x10 (16)
0x4cd28b20   352  stp fp, lr, [jssp, #-16]!
0x4cd28b24   356  bl #+0x4 (addr 0x4cd28b28)
0x4cd28b28   360  movz x17, #0xa00000000
0x4cd28b2c   364  sub csp, jssp, #0x10 (16)
0x4cd28b30   368  stp x17, cp, [jssp, #-16]!
0x4cd28b34   372  add fp, jssp, #0x10 (16)
0x4cd28b38   376  ldr x17, pc+24 (addr 0x000000004cd28b50)    ;; lazy deoptimization bailout 0
0x4cd28b3c   380  add x17, x17, x16
0x4cd28b40   384  br x17
0x4cd28b44   388  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd28b48   392  d63f03e0       constant
0x4cd28b4c   396  d503201f       constant
0x4cd28b50   400  4cb06000       constant
0x4cd28b54   404  00000000       constant


Safepoints (size = 21)
0x4cd28aa8   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0x4cd28a00  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd28a08  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd28a1c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd28a30  embedded object  (0x21004519 <the hole>)
0x4cd28a38  embedded object  (0x21004519 <the hole>)
0x4cd28a40  embedded object  (0x21004519 <the hole>)
0x4cd28a48  embedded object  (0x21004519 <the hole>)
0x4cd28a7c  code target (STUB)  (0x4cd06820)
0x4cd28aa0  code target (STUB)  (0x4cd06260)
0x4cd28aac  code target (STUB)  (0x4cd068e0)
0x4cd28ac0  constant pool (size 88)
0x4cd28b38  runtime entry
0x4cd28b44  constant pool (size 20)

--- End code ---
kind = STUB
major_key = InternalArrayNoArgumentConstructorStub
name = InternalArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 429)
0x4cd289c0     0  movz w0, #0x6000
0x4cd289c4     4  movk w0, #0x9, lsl #16
0x4cd289c8     8  cmp w0, #0x30 (48)
0x4cd289cc    12  b.ls #+0x14c (addr 0x4cd28b18)
0x4cd289d0    16  movz x2, #0xd2c0
0x4cd289d4    20  movk x2, #0x166d, lsl #16
0x4cd289d8    24  ldp x3, x0, [x2]
0x4cd289dc    28  adds x16, x3, #0x50 (80)
0x4cd289e0    32  ccmp x16, x0, #nzCv, lo
0x4cd289e4    36  b.hi #+0x78 (addr 0x4cd28a5c)
0x4cd289e8    40  str x16, [x2]
0x4cd289ec    44  orr x3, x3, #0x1
0x4cd289f0    48  movz w0, #0x0
0x4cd289f4    52  stur x0, [x3, #31]
0x4cd289f8    56  ldur x0, [x1, #23]
0x4cd289fc    60  stur x0, [x3, #-1]
0x4cd28a00    64  ldr x0, pc+200 (addr 0x000000004cd28ac8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd28a04    68  stur x0, [x3, #7]
0x4cd28a08    72  ldr x0, pc+200 (addr 0x000000004cd28ad0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd28a0c    76  stur x0, [x3, #15]
0x4cd28a10    80  movz x0, #0x0
0x4cd28a14    84  stur x0, [x3, #23]
0x4cd28a18    88  add x0, x3, #0x20 (32)
0x4cd28a1c    92  ldr x1, pc+188 (addr 0x000000004cd28ad8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd28a20    96  stur x1, [x0, #-1]
0x4cd28a24   100  movz x1, #0x400000000
0x4cd28a28   104  stur x1, [x0, #7]
0x4cd28a2c   108  stur x0, [x3, #15]
0x4cd28a30   112  ldr x1, pc+176 (addr 0x000000004cd28ae0)    ;; object: 0x21004519 <the hole>
0x4cd28a34   116  stur x1, [x0, #15]
0x4cd28a38   120  ldr x1, pc+176 (addr 0x000000004cd28ae8)    ;; object: 0x21004519 <the hole>
0x4cd28a3c   124  stur x1, [x0, #23]
0x4cd28a40   128  ldr x1, pc+176 (addr 0x000000004cd28af0)    ;; object: 0x21004519 <the hole>
0x4cd28a44   132  stur x1, [x0, #31]
0x4cd28a48   136  ldr x1, pc+176 (addr 0x000000004cd28af8)    ;; object: 0x21004519 <the hole>
0x4cd28a4c   140  stur x1, [x0, #39]
0x4cd28a50   144  mov x0, x3
0x4cd28a54   148  add jssp, jssp, #0x8 (8)
0x4cd28a58   152  ret
0x4cd28a5c   156  sub csp, jssp, #0x10 (16)
0x4cd28a60   160  stp fp, lr, [jssp, #-16]!
0x4cd28a64   164  movz fp, #0xa00000000
0x4cd28a68   168  sub csp, jssp, #0x8 (8)
0x4cd28a6c   172  str fp, [jssp, #-8]!
0x4cd28a70   176  add fp, jssp, #0x8 (8)
0x4cd28a74   180  movz x3, #0x0
0x4cd28a78   184  mov x16, lr
0x4cd28a7c   188  ldr x17, pc+132 (addr 0x000000004cd28b00)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd28a80   192  blr x17
0x4cd28a84   196  movz x0, #0x5000000000
0x4cd28a88   200  movz x10, #0x0
0x4cd28a8c   204  sub csp, jssp, #0x10 (16)
0x4cd28a90   208  stp x10, x0, [jssp, #-16]!
0x4cd28a94   212  movz x0, #0x2
0x4cd28a98   216  movz x1, #0x5b88
0x4cd28a9c   220  movk x1, #0xe2, lsl #16
0x4cd28aa0   224  ldr x16, pc+104 (addr 0x000000004cd28b08)    ;; code: STUB, CEntryStub, minor: 5
0x4cd28aa4   228  blr x16
0x4cd28aa8   232  str x0, [jssp, #24]
0x4cd28aac   236  ldr x16, pc+100 (addr 0x000000004cd28b10)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd28ab0   240  blr x16
0x4cd28ab4   244  ldr lr, [jssp, #16]
0x4cd28ab8   248  ldp xzr, fp, [jssp], #24
0x4cd28abc   252  b #-0xcc (addr 0x4cd289f0)
0x4cd28ac0   256  580002bf       constant pool begin (num_const = 21)    ;; constant pool
0x4cd28ac4   260  d63f03e0       constant
0x4cd28ac8   264  21004201       constant
0x4cd28acc   268  00000000       constant
0x4cd28ad0   272  21004201       constant
0x4cd28ad4   276  00000000       constant
0x4cd28ad8   280  2a804259       constant
0x4cd28adc   284  00000000       constant
0x4cd28ae0   288  21004519       constant
0x4cd28ae4   292  00000000       constant
0x4cd28ae8   296  21004519       constant
0x4cd28aec   300  00000000       constant
0x4cd28af0   304  21004519       constant
0x4cd28af4   308  00000000       constant
0x4cd28af8   312  21004519       constant
0x4cd28afc   316  00000000       constant
0x4cd28b00   320  4cd06820       constant
0x4cd28b04   324  00000000       constant
0x4cd28b08   328  4cd06260       constant
0x4cd28b0c   332  00000000       constant
0x4cd28b10   336  4cd068e0       constant
0x4cd28b14   340  00000000       constant
0x4cd28b18   344  movz x16, #0x0
0x4cd28b1c   348  sub csp, jssp, #0x10 (16)
0x4cd28b20   352  stp fp, lr, [jssp, #-16]!
0x4cd28b24   356  bl #+0x4 (addr 0x4cd28b28)
0x4cd28b28   360  movz x17, #0xa00000000
0x4cd28b2c   364  sub csp, jssp, #0x10 (16)
0x4cd28b30   368  stp x17, cp, [jssp, #-16]!
0x4cd28b34   372  add fp, jssp, #0x10 (16)
0x4cd28b38   376  ldr x17, pc+24 (addr 0x000000004cd28b50)    ;; lazy deoptimization bailout 0
0x4cd28b3c   380  add x17, x17, x16
0x4cd28b40   384  br x17
0x4cd28b44   388  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd28b48   392  d63f03e0       constant
0x4cd28b4c   396  d503201f       constant
0x4cd28b50   400  4cb06000       constant
0x4cd28b54   404  00000000       constant


Safepoints (size = 21)
0x4cd28aa8   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0x4cd28a00  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd28a08  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd28a1c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd28a30  embedded object  (0x21004519 <the hole>)
0x4cd28a38  embedded object  (0x21004519 <the hole>)
0x4cd28a40  embedded object  (0x21004519 <the hole>)
0x4cd28a48  embedded object  (0x21004519 <the hole>)
0x4cd28a7c  code target (STUB)  (0x4cd06820)
0x4cd28aa0  code target (STUB)  (0x4cd06260)
0x4cd28aac  code target (STUB)  (0x4cd068e0)
0x4cd28ac0  constant pool (size 88)
0x4cd28b38  runtime entry
0x4cd28b44  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = InternalArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 509)
0x4cd28be0     0  movz x16, #0xa00000000
0x4cd28be4     4  sub csp, jssp, #0x10 (16)
0x4cd28be8     8  stp fp, lr, [jssp, #-16]!
0x4cd28bec    12  mov fp, jssp
0x4cd28bf0    16  sub csp, jssp, #0x8 (8)
0x4cd28bf4    20  sub jssp, jssp, #0x8 (8)
0x4cd28bf8    24  stur x16, [fp, #-8]
0x4cd28bfc    28  ldr x2, [fp]
0x4cd28c00    32  ldur x3, [x2, #-8]
0x4cd28c04    36  movz x16, #0xe00000000
0x4cd28c08    40  cmp x3, x16
0x4cd28c0c    44  csel x3, fp, x2, ne
0x4cd28c10    48  ldr x2, [x3, #16]
0x4cd28c14    52  tbnz w2, #0, #+0xd0 (addr 0x4cd28ce4)
0x4cd28c18    56  asr x4, x2, #32
0x4cd28c1c    60  movz w16, #0x257f
0x4cd28c20    64  cmp w4, w16, lsl #3
0x4cd28c24    68  b.hs #+0x16c (addr 0x4cd28d90)
0x4cd28c28    72  cbz w4, #+0xc (addr 0x4cd28c34)
0x4cd28c2c    76  mov x2, x4
0x4cd28c30    80  b #+0xc (addr 0x4cd28c3c)
0x4cd28c34    84  movz x2, #0x4
0x4cd28c38    88  movz x4, #0x0
0x4cd28c3c    92  lsl x3, x2, #32
0x4cd28c40    96  lsl x4, x4, #32
0x4cd28c44   100  lsl w5, w2, #3
0x4cd28c48   104  add w5, w5, #0x10 (16)
0x4cd28c4c   108  cmp w5, #0x96000 (614400)
0x4cd28c50   112  b.hs #+0x148 (addr 0x4cd28d98)
0x4cd28c54   116  add w0, w5, #0x20 (32)
0x4cd28c58   120  sxtw x0, w0
0x4cd28c5c   124  movz x5, #0xd2c0
0x4cd28c60   128  movk x5, #0x166d, lsl #16
0x4cd28c64   132  ldp x7, x16, [x5]
0x4cd28c68   136  adds x6, x7, x0
0x4cd28c6c   140  ccmp x6, x16, #nzCv, lo
0x4cd28c70   144  b.hi #+0x9c (addr 0x4cd28d0c)
0x4cd28c74   148  str x6, [x5]
0x4cd28c78   152  orr x7, x7, #0x1
0x4cd28c7c   156  movz w0, #0x0
0x4cd28c80   160  stur x0, [x7, #31]
0x4cd28c84   164  ldur x0, [x1, #23]
0x4cd28c88   168  stur x0, [x7, #-1]
0x4cd28c8c   172  ldr x0, pc+204 (addr 0x000000004cd28d58)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd28c90   176  stur x0, [x7, #7]
0x4cd28c94   180  ldr x0, pc+204 (addr 0x000000004cd28d60)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd28c98   184  stur x0, [x7, #15]
0x4cd28c9c   188  stur x4, [x7, #23]
0x4cd28ca0   192  add x0, x7, #0x20 (32)
0x4cd28ca4   196  ldr x1, pc+196 (addr 0x000000004cd28d68)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd28ca8   200  stur x1, [x0, #-1]
0x4cd28cac   204  stur x3, [x0, #7]
0x4cd28cb0   208  stur x0, [x7, #15]
0x4cd28cb4   212  cmp w2, #0x0 (0)
0x4cd28cb8   216  b.le #+0x18 (addr 0x4cd28cd0)
0x4cd28cbc   220  sub w2, w2, #0x1 (1)
0x4cd28cc0   224  ldr x1, pc+176 (addr 0x000000004cd28d70)    ;; object: 0x21004519 <the hole>
0x4cd28cc4   228  add x3, x0, #0xf (15)
0x4cd28cc8   232  str x1, [x3, w2, sxtw #3]
0x4cd28ccc   236  b #-0x18 (addr 0x4cd28cb4)
0x4cd28cd0   240  mov x0, x7
0x4cd28cd4   244  mov jssp, fp
0x4cd28cd8   248  ldp fp, lr, [jssp], #16
0x4cd28cdc   252  add jssp, jssp, #0x10 (16)
0x4cd28ce0   256  ret
0x4cd28ce4   260  ldur x16, [x2, #-1]
0x4cd28ce8   264  ldr x17, [x26, #120]
0x4cd28cec   268  cmp x16, x17
0x4cd28cf0   272  b.ne #+0xb0 (addr 0x4cd28da0)
0x4cd28cf4   276  ldur d29, [x2, #7]
0x4cd28cf8   280  fcvtzs w4, d29
0x4cd28cfc   284  scvtf d0, w4
0x4cd28d00   288  fcmp d29, d0
0x4cd28d04   292  b.ne #+0x9c (addr 0x4cd28da0)
0x4cd28d08   296  b #-0xec (addr 0x4cd28c1c)
0x4cd28d0c   300  movz x7, #0x0
0x4cd28d10   304  mov x16, lr
0x4cd28d14   308  ldr x17, pc+100 (addr 0x000000004cd28d78)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd28d18   312  blr x17
0x4cd28d1c   316  lsl x0, x0, #32
0x4cd28d20   320  movz x10, #0x0
0x4cd28d24   324  sub csp, jssp, #0x10 (16)
0x4cd28d28   328  stp x10, x0, [jssp, #-16]!
0x4cd28d2c   332  movz x0, #0x2
0x4cd28d30   336  movz x1, #0x5b88
0x4cd28d34   340  movk x1, #0xe2, lsl #16
0x4cd28d38   344  ldr x16, pc+72 (addr 0x000000004cd28d80)    ;; code: STUB, CEntryStub, minor: 5
0x4cd28d3c   348  blr x16
0x4cd28d40   352  str x0, [jssp, #56]
0x4cd28d44   356  ldr x16, pc+68 (addr 0x000000004cd28d88)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd28d48   360  blr x16
0x4cd28d4c   364  b #-0xd0 (addr 0x4cd28c7c)
0x4cd28d50   368  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd28d54   372  d63f03e0       constant
0x4cd28d58   376  21004201       constant
0x4cd28d5c   380  00000000       constant
0x4cd28d60   384  21004201       constant
0x4cd28d64   388  00000000       constant
0x4cd28d68   392  2a804259       constant
0x4cd28d6c   396  00000000       constant
0x4cd28d70   400  21004519       constant
0x4cd28d74   404  00000000       constant
0x4cd28d78   408  4cd06820       constant
0x4cd28d7c   412  00000000       constant
0x4cd28d80   416  4cd06260       constant
0x4cd28d84   420  00000000       constant
0x4cd28d88   424  4cd068e0       constant
0x4cd28d8c   428  00000000       constant
0x4cd28d90   432  movz x16, #0x0
0x4cd28d94   436  bl #+0x14 (addr 0x4cd28da8)
0x4cd28d98   440  movz x16, #0x8
0x4cd28d9c   444  bl #+0xc (addr 0x4cd28da8)
0x4cd28da0   448  movz x16, #0x10
0x4cd28da4   452  bl #+0x4 (addr 0x4cd28da8)
0x4cd28da8   456  ldr x17, pc+24 (addr 0x000000004cd28dc0)    ;; lazy deoptimization bailout 0
0x4cd28dac   460  add x17, x17, x16
0x4cd28db0   464  br x17
0x4cd28db4   468  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd28db8   472  d63f03e0       constant
0x4cd28dbc   476  d503201f       constant
0x4cd28dc0   480  4cb06000       constant
0x4cd28dc4   484  00000000       constant


Safepoints (size = 21)
0x4cd28d40   352  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd28c8c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd28c94  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd28ca4  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd28cc0  embedded object  (0x21004519 <the hole>)
0x4cd28d14  code target (STUB)  (0x4cd06820)
0x4cd28d38  code target (STUB)  (0x4cd06260)
0x4cd28d44  code target (STUB)  (0x4cd068e0)
0x4cd28d50  constant pool (size 64)
0x4cd28da8  runtime entry
0x4cd28db4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = InternalArraySingleArgumentConstructorStub
name = InternalArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 509)
0x4cd28be0     0  movz x16, #0xa00000000
0x4cd28be4     4  sub csp, jssp, #0x10 (16)
0x4cd28be8     8  stp fp, lr, [jssp, #-16]!
0x4cd28bec    12  mov fp, jssp
0x4cd28bf0    16  sub csp, jssp, #0x8 (8)
0x4cd28bf4    20  sub jssp, jssp, #0x8 (8)
0x4cd28bf8    24  stur x16, [fp, #-8]
0x4cd28bfc    28  ldr x2, [fp]
0x4cd28c00    32  ldur x3, [x2, #-8]
0x4cd28c04    36  movz x16, #0xe00000000
0x4cd28c08    40  cmp x3, x16
0x4cd28c0c    44  csel x3, fp, x2, ne
0x4cd28c10    48  ldr x2, [x3, #16]
0x4cd28c14    52  tbnz w2, #0, #+0xd0 (addr 0x4cd28ce4)
0x4cd28c18    56  asr x4, x2, #32
0x4cd28c1c    60  movz w16, #0x257f
0x4cd28c20    64  cmp w4, w16, lsl #3
0x4cd28c24    68  b.hs #+0x16c (addr 0x4cd28d90)
0x4cd28c28    72  cbz w4, #+0xc (addr 0x4cd28c34)
0x4cd28c2c    76  mov x2, x4
0x4cd28c30    80  b #+0xc (addr 0x4cd28c3c)
0x4cd28c34    84  movz x2, #0x4
0x4cd28c38    88  movz x4, #0x0
0x4cd28c3c    92  lsl x3, x2, #32
0x4cd28c40    96  lsl x4, x4, #32
0x4cd28c44   100  lsl w5, w2, #3
0x4cd28c48   104  add w5, w5, #0x10 (16)
0x4cd28c4c   108  cmp w5, #0x96000 (614400)
0x4cd28c50   112  b.hs #+0x148 (addr 0x4cd28d98)
0x4cd28c54   116  add w0, w5, #0x20 (32)
0x4cd28c58   120  sxtw x0, w0
0x4cd28c5c   124  movz x5, #0xd2c0
0x4cd28c60   128  movk x5, #0x166d, lsl #16
0x4cd28c64   132  ldp x7, x16, [x5]
0x4cd28c68   136  adds x6, x7, x0
0x4cd28c6c   140  ccmp x6, x16, #nzCv, lo
0x4cd28c70   144  b.hi #+0x9c (addr 0x4cd28d0c)
0x4cd28c74   148  str x6, [x5]
0x4cd28c78   152  orr x7, x7, #0x1
0x4cd28c7c   156  movz w0, #0x0
0x4cd28c80   160  stur x0, [x7, #31]
0x4cd28c84   164  ldur x0, [x1, #23]
0x4cd28c88   168  stur x0, [x7, #-1]
0x4cd28c8c   172  ldr x0, pc+204 (addr 0x000000004cd28d58)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd28c90   176  stur x0, [x7, #7]
0x4cd28c94   180  ldr x0, pc+204 (addr 0x000000004cd28d60)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd28c98   184  stur x0, [x7, #15]
0x4cd28c9c   188  stur x4, [x7, #23]
0x4cd28ca0   192  add x0, x7, #0x20 (32)
0x4cd28ca4   196  ldr x1, pc+196 (addr 0x000000004cd28d68)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd28ca8   200  stur x1, [x0, #-1]
0x4cd28cac   204  stur x3, [x0, #7]
0x4cd28cb0   208  stur x0, [x7, #15]
0x4cd28cb4   212  cmp w2, #0x0 (0)
0x4cd28cb8   216  b.le #+0x18 (addr 0x4cd28cd0)
0x4cd28cbc   220  sub w2, w2, #0x1 (1)
0x4cd28cc0   224  ldr x1, pc+176 (addr 0x000000004cd28d70)    ;; object: 0x21004519 <the hole>
0x4cd28cc4   228  add x3, x0, #0xf (15)
0x4cd28cc8   232  str x1, [x3, w2, sxtw #3]
0x4cd28ccc   236  b #-0x18 (addr 0x4cd28cb4)
0x4cd28cd0   240  mov x0, x7
0x4cd28cd4   244  mov jssp, fp
0x4cd28cd8   248  ldp fp, lr, [jssp], #16
0x4cd28cdc   252  add jssp, jssp, #0x10 (16)
0x4cd28ce0   256  ret
0x4cd28ce4   260  ldur x16, [x2, #-1]
0x4cd28ce8   264  ldr x17, [x26, #120]
0x4cd28cec   268  cmp x16, x17
0x4cd28cf0   272  b.ne #+0xb0 (addr 0x4cd28da0)
0x4cd28cf4   276  ldur d29, [x2, #7]
0x4cd28cf8   280  fcvtzs w4, d29
0x4cd28cfc   284  scvtf d0, w4
0x4cd28d00   288  fcmp d29, d0
0x4cd28d04   292  b.ne #+0x9c (addr 0x4cd28da0)
0x4cd28d08   296  b #-0xec (addr 0x4cd28c1c)
0x4cd28d0c   300  movz x7, #0x0
0x4cd28d10   304  mov x16, lr
0x4cd28d14   308  ldr x17, pc+100 (addr 0x000000004cd28d78)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd28d18   312  blr x17
0x4cd28d1c   316  lsl x0, x0, #32
0x4cd28d20   320  movz x10, #0x0
0x4cd28d24   324  sub csp, jssp, #0x10 (16)
0x4cd28d28   328  stp x10, x0, [jssp, #-16]!
0x4cd28d2c   332  movz x0, #0x2
0x4cd28d30   336  movz x1, #0x5b88
0x4cd28d34   340  movk x1, #0xe2, lsl #16
0x4cd28d38   344  ldr x16, pc+72 (addr 0x000000004cd28d80)    ;; code: STUB, CEntryStub, minor: 5
0x4cd28d3c   348  blr x16
0x4cd28d40   352  str x0, [jssp, #56]
0x4cd28d44   356  ldr x16, pc+68 (addr 0x000000004cd28d88)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd28d48   360  blr x16
0x4cd28d4c   364  b #-0xd0 (addr 0x4cd28c7c)
0x4cd28d50   368  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd28d54   372  d63f03e0       constant
0x4cd28d58   376  21004201       constant
0x4cd28d5c   380  00000000       constant
0x4cd28d60   384  21004201       constant
0x4cd28d64   388  00000000       constant
0x4cd28d68   392  2a804259       constant
0x4cd28d6c   396  00000000       constant
0x4cd28d70   400  21004519       constant
0x4cd28d74   404  00000000       constant
0x4cd28d78   408  4cd06820       constant
0x4cd28d7c   412  00000000       constant
0x4cd28d80   416  4cd06260       constant
0x4cd28d84   420  00000000       constant
0x4cd28d88   424  4cd068e0       constant
0x4cd28d8c   428  00000000       constant
0x4cd28d90   432  movz x16, #0x0
0x4cd28d94   436  bl #+0x14 (addr 0x4cd28da8)
0x4cd28d98   440  movz x16, #0x8
0x4cd28d9c   444  bl #+0xc (addr 0x4cd28da8)
0x4cd28da0   448  movz x16, #0x10
0x4cd28da4   452  bl #+0x4 (addr 0x4cd28da8)
0x4cd28da8   456  ldr x17, pc+24 (addr 0x000000004cd28dc0)    ;; lazy deoptimization bailout 0
0x4cd28dac   460  add x17, x17, x16
0x4cd28db0   464  br x17
0x4cd28db4   468  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd28db8   472  d63f03e0       constant
0x4cd28dbc   476  d503201f       constant
0x4cd28dc0   480  4cb06000       constant
0x4cd28dc4   484  00000000       constant


Safepoints (size = 21)
0x4cd28d40   352  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd28c8c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd28c94  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd28ca4  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd28cc0  embedded object  (0x21004519 <the hole>)
0x4cd28d14  code target (STUB)  (0x4cd06820)
0x4cd28d38  code target (STUB)  (0x4cd06260)
0x4cd28d44  code target (STUB)  (0x4cd068e0)
0x4cd28d50  constant pool (size 64)
0x4cd28da8  runtime entry
0x4cd28db4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = InternalArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 437)
0x4cd28e40     0  movz x16, #0xa00000000
0x4cd28e44     4  sub csp, jssp, #0x10 (16)
0x4cd28e48     8  stp fp, lr, [jssp, #-16]!
0x4cd28e4c    12  mov fp, jssp
0x4cd28e50    16  sub csp, jssp, #0x8 (8)
0x4cd28e54    20  sub jssp, jssp, #0x8 (8)
0x4cd28e58    24  stur x16, [fp, #-8]
0x4cd28e5c    28  movz w16, #0x257f
0x4cd28e60    32  cmp w0, w16, lsl #3
0x4cd28e64    36  b.hs #+0x14c (addr 0x4cd28fb0)
0x4cd28e68    40  lsl x2, x0, #32
0x4cd28e6c    44  lsl w3, w0, #3
0x4cd28e70    48  add w3, w3, #0x10 (16)
0x4cd28e74    52  cmp w3, #0x96000 (614400)
0x4cd28e78    56  b.hs #+0x140 (addr 0x4cd28fb8)
0x4cd28e7c    60  add w3, w3, #0x20 (32)
0x4cd28e80    64  sxtw x3, w3
0x4cd28e84    68  movz x4, #0xd2c0
0x4cd28e88    72  movk x4, #0x166d, lsl #16
0x4cd28e8c    76  ldp x6, x16, [x4]
0x4cd28e90    80  adds x5, x6, x3
0x4cd28e94    84  ccmp x5, x16, #nzCv, lo
0x4cd28e98    88  b.hi #+0x9c (addr 0x4cd28f34)
0x4cd28e9c    92  str x5, [x4]
0x4cd28ea0    96  orr x6, x6, #0x1
0x4cd28ea4   100  movz w3, #0x0
0x4cd28ea8   104  stur x3, [x6, #31]
0x4cd28eac   108  ldur x1, [x1, #23]
0x4cd28eb0   112  stur x1, [x6, #-1]
0x4cd28eb4   116  ldr x1, pc+204 (addr 0x000000004cd28f80)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd28eb8   120  stur x1, [x6, #7]
0x4cd28ebc   124  ldr x1, pc+204 (addr 0x000000004cd28f88)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd28ec0   128  stur x1, [x6, #15]
0x4cd28ec4   132  stur x2, [x6, #23]
0x4cd28ec8   136  add x1, x6, #0x20 (32)
0x4cd28ecc   140  ldr x3, pc+196 (addr 0x000000004cd28f90)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd28ed0   144  stur x3, [x1, #-1]
0x4cd28ed4   148  stur x2, [x1, #7]
0x4cd28ed8   152  stur x1, [x6, #15]
0x4cd28edc   156  ldr x2, [fp]
0x4cd28ee0   160  ldur x3, [x2, #-8]
0x4cd28ee4   164  movz x16, #0xe00000000
0x4cd28ee8   168  cmp x3, x16
0x4cd28eec   172  csel x3, fp, x2, ne
0x4cd28ef0   176  movz x2, #0x0
0x4cd28ef4   180  cmp w0, w2
0x4cd28ef8   184  b.le #+0x20 (addr 0x4cd28f18)
0x4cd28efc   188  sub w4, w0, w2
0x4cd28f00   192  add w4, w4, #0x1 (1)
0x4cd28f04   196  ldr x4, [x3, w4, uxtw #3]
0x4cd28f08   200  add x5, x1, #0xf (15)
0x4cd28f0c   204  str x4, [x5, w2, sxtw #3]
0x4cd28f10   208  add w2, w2, #0x1 (1)
0x4cd28f14   212  b #-0x20 (addr 0x4cd28ef4)
0x4cd28f18   216  add w0, w0, #0x1 (1)
0x4cd28f1c   220  lsl x1, x0, #32
0x4cd28f20   224  mov x0, x6
0x4cd28f24   228  mov jssp, fp
0x4cd28f28   232  ldp fp, lr, [jssp], #16
0x4cd28f2c   236  add jssp, jssp, x1, lsr #29
0x4cd28f30   240  ret
0x4cd28f34   244  movz x6, #0x0
0x4cd28f38   248  mov x16, lr
0x4cd28f3c   252  ldr x17, pc+92 (addr 0x000000004cd28f98)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd28f40   256  blr x17
0x4cd28f44   260  lsl x0, x3, #32
0x4cd28f48   264  movz x10, #0x0
0x4cd28f4c   268  sub csp, jssp, #0x10 (16)
0x4cd28f50   272  stp x10, x0, [jssp, #-16]!
0x4cd28f54   276  movz x0, #0x2
0x4cd28f58   280  movz x1, #0x5b88
0x4cd28f5c   284  movk x1, #0xe2, lsl #16
0x4cd28f60   288  ldr x16, pc+64 (addr 0x000000004cd28fa0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd28f64   292  blr x16
0x4cd28f68   296  str x0, [jssp, #48]
0x4cd28f6c   300  ldr x16, pc+60 (addr 0x000000004cd28fa8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd28f70   304  blr x16
0x4cd28f74   308  b #-0xd0 (addr 0x4cd28ea4)
0x4cd28f78   312  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd28f7c   316  d63f03e0       constant
0x4cd28f80   320  21004201       constant
0x4cd28f84   324  00000000       constant
0x4cd28f88   328  21004201       constant
0x4cd28f8c   332  00000000       constant
0x4cd28f90   336  2a804259       constant
0x4cd28f94   340  00000000       constant
0x4cd28f98   344  4cd06820       constant
0x4cd28f9c   348  00000000       constant
0x4cd28fa0   352  4cd06260       constant
0x4cd28fa4   356  00000000       constant
0x4cd28fa8   360  4cd068e0       constant
0x4cd28fac   364  00000000       constant
0x4cd28fb0   368  movz x16, #0x0
0x4cd28fb4   372  bl #+0xc (addr 0x4cd28fc0)
0x4cd28fb8   376  movz x16, #0x8
0x4cd28fbc   380  bl #+0x4 (addr 0x4cd28fc0)
0x4cd28fc0   384  ldr x17, pc+24 (addr 0x000000004cd28fd8)    ;; lazy deoptimization bailout 0
0x4cd28fc4   388  add x17, x17, x16
0x4cd28fc8   392  br x17
0x4cd28fcc   396  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd28fd0   400  d63f03e0       constant
0x4cd28fd4   404  d503201f       constant
0x4cd28fd8   408  4cb06000       constant
0x4cd28fdc   412  00000000       constant


Safepoints (size = 21)
0x4cd28f68   296  000 | x1 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd28eb4  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd28ebc  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd28ecc  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd28f3c  code target (STUB)  (0x4cd06820)
0x4cd28f60  code target (STUB)  (0x4cd06260)
0x4cd28f6c  code target (STUB)  (0x4cd068e0)
0x4cd28f78  constant pool (size 56)
0x4cd28fc0  runtime entry
0x4cd28fcc  constant pool (size 20)

--- End code ---
kind = STUB
major_key = InternalArrayNArgumentsConstructorStub
name = InternalArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 437)
0x4cd28e40     0  movz x16, #0xa00000000
0x4cd28e44     4  sub csp, jssp, #0x10 (16)
0x4cd28e48     8  stp fp, lr, [jssp, #-16]!
0x4cd28e4c    12  mov fp, jssp
0x4cd28e50    16  sub csp, jssp, #0x8 (8)
0x4cd28e54    20  sub jssp, jssp, #0x8 (8)
0x4cd28e58    24  stur x16, [fp, #-8]
0x4cd28e5c    28  movz w16, #0x257f
0x4cd28e60    32  cmp w0, w16, lsl #3
0x4cd28e64    36  b.hs #+0x14c (addr 0x4cd28fb0)
0x4cd28e68    40  lsl x2, x0, #32
0x4cd28e6c    44  lsl w3, w0, #3
0x4cd28e70    48  add w3, w3, #0x10 (16)
0x4cd28e74    52  cmp w3, #0x96000 (614400)
0x4cd28e78    56  b.hs #+0x140 (addr 0x4cd28fb8)
0x4cd28e7c    60  add w3, w3, #0x20 (32)
0x4cd28e80    64  sxtw x3, w3
0x4cd28e84    68  movz x4, #0xd2c0
0x4cd28e88    72  movk x4, #0x166d, lsl #16
0x4cd28e8c    76  ldp x6, x16, [x4]
0x4cd28e90    80  adds x5, x6, x3
0x4cd28e94    84  ccmp x5, x16, #nzCv, lo
0x4cd28e98    88  b.hi #+0x9c (addr 0x4cd28f34)
0x4cd28e9c    92  str x5, [x4]
0x4cd28ea0    96  orr x6, x6, #0x1
0x4cd28ea4   100  movz w3, #0x0
0x4cd28ea8   104  stur x3, [x6, #31]
0x4cd28eac   108  ldur x1, [x1, #23]
0x4cd28eb0   112  stur x1, [x6, #-1]
0x4cd28eb4   116  ldr x1, pc+204 (addr 0x000000004cd28f80)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd28eb8   120  stur x1, [x6, #7]
0x4cd28ebc   124  ldr x1, pc+204 (addr 0x000000004cd28f88)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd28ec0   128  stur x1, [x6, #15]
0x4cd28ec4   132  stur x2, [x6, #23]
0x4cd28ec8   136  add x1, x6, #0x20 (32)
0x4cd28ecc   140  ldr x3, pc+196 (addr 0x000000004cd28f90)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd28ed0   144  stur x3, [x1, #-1]
0x4cd28ed4   148  stur x2, [x1, #7]
0x4cd28ed8   152  stur x1, [x6, #15]
0x4cd28edc   156  ldr x2, [fp]
0x4cd28ee0   160  ldur x3, [x2, #-8]
0x4cd28ee4   164  movz x16, #0xe00000000
0x4cd28ee8   168  cmp x3, x16
0x4cd28eec   172  csel x3, fp, x2, ne
0x4cd28ef0   176  movz x2, #0x0
0x4cd28ef4   180  cmp w0, w2
0x4cd28ef8   184  b.le #+0x20 (addr 0x4cd28f18)
0x4cd28efc   188  sub w4, w0, w2
0x4cd28f00   192  add w4, w4, #0x1 (1)
0x4cd28f04   196  ldr x4, [x3, w4, uxtw #3]
0x4cd28f08   200  add x5, x1, #0xf (15)
0x4cd28f0c   204  str x4, [x5, w2, sxtw #3]
0x4cd28f10   208  add w2, w2, #0x1 (1)
0x4cd28f14   212  b #-0x20 (addr 0x4cd28ef4)
0x4cd28f18   216  add w0, w0, #0x1 (1)
0x4cd28f1c   220  lsl x1, x0, #32
0x4cd28f20   224  mov x0, x6
0x4cd28f24   228  mov jssp, fp
0x4cd28f28   232  ldp fp, lr, [jssp], #16
0x4cd28f2c   236  add jssp, jssp, x1, lsr #29
0x4cd28f30   240  ret
0x4cd28f34   244  movz x6, #0x0
0x4cd28f38   248  mov x16, lr
0x4cd28f3c   252  ldr x17, pc+92 (addr 0x000000004cd28f98)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd28f40   256  blr x17
0x4cd28f44   260  lsl x0, x3, #32
0x4cd28f48   264  movz x10, #0x0
0x4cd28f4c   268  sub csp, jssp, #0x10 (16)
0x4cd28f50   272  stp x10, x0, [jssp, #-16]!
0x4cd28f54   276  movz x0, #0x2
0x4cd28f58   280  movz x1, #0x5b88
0x4cd28f5c   284  movk x1, #0xe2, lsl #16
0x4cd28f60   288  ldr x16, pc+64 (addr 0x000000004cd28fa0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd28f64   292  blr x16
0x4cd28f68   296  str x0, [jssp, #48]
0x4cd28f6c   300  ldr x16, pc+60 (addr 0x000000004cd28fa8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd28f70   304  blr x16
0x4cd28f74   308  b #-0xd0 (addr 0x4cd28ea4)
0x4cd28f78   312  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd28f7c   316  d63f03e0       constant
0x4cd28f80   320  21004201       constant
0x4cd28f84   324  00000000       constant
0x4cd28f88   328  21004201       constant
0x4cd28f8c   332  00000000       constant
0x4cd28f90   336  2a804259       constant
0x4cd28f94   340  00000000       constant
0x4cd28f98   344  4cd06820       constant
0x4cd28f9c   348  00000000       constant
0x4cd28fa0   352  4cd06260       constant
0x4cd28fa4   356  00000000       constant
0x4cd28fa8   360  4cd068e0       constant
0x4cd28fac   364  00000000       constant
0x4cd28fb0   368  movz x16, #0x0
0x4cd28fb4   372  bl #+0xc (addr 0x4cd28fc0)
0x4cd28fb8   376  movz x16, #0x8
0x4cd28fbc   380  bl #+0x4 (addr 0x4cd28fc0)
0x4cd28fc0   384  ldr x17, pc+24 (addr 0x000000004cd28fd8)    ;; lazy deoptimization bailout 0
0x4cd28fc4   388  add x17, x17, x16
0x4cd28fc8   392  br x17
0x4cd28fcc   396  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd28fd0   400  d63f03e0       constant
0x4cd28fd4   404  d503201f       constant
0x4cd28fd8   408  4cb06000       constant
0x4cd28fdc   412  00000000       constant


Safepoints (size = 21)
0x4cd28f68   296  000 | x1 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd28eb4  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd28ebc  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd28ecc  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd28f3c  code target (STUB)  (0x4cd06820)
0x4cd28f60  code target (STUB)  (0x4cd06260)
0x4cd28f6c  code target (STUB)  (0x4cd068e0)
0x4cd28f78  constant pool (size 56)
0x4cd28fc0  runtime entry
0x4cd28fcc  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = InternalArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 429)
0x4cd29060     0  movz w0, #0x6000
0x4cd29064     4  movk w0, #0x9, lsl #16
0x4cd29068     8  cmp w0, #0x30 (48)
0x4cd2906c    12  b.ls #+0x14c (addr 0x4cd291b8)
0x4cd29070    16  movz x2, #0xd2c0
0x4cd29074    20  movk x2, #0x166d, lsl #16
0x4cd29078    24  ldp x3, x0, [x2]
0x4cd2907c    28  adds x16, x3, #0x50 (80)
0x4cd29080    32  ccmp x16, x0, #nzCv, lo
0x4cd29084    36  b.hi #+0x78 (addr 0x4cd290fc)
0x4cd29088    40  str x16, [x2]
0x4cd2908c    44  orr x3, x3, #0x1
0x4cd29090    48  movz w0, #0x0
0x4cd29094    52  stur x0, [x3, #31]
0x4cd29098    56  ldur x0, [x1, #23]
0x4cd2909c    60  stur x0, [x3, #-1]
0x4cd290a0    64  ldr x0, pc+200 (addr 0x000000004cd29168)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd290a4    68  stur x0, [x3, #7]
0x4cd290a8    72  ldr x0, pc+200 (addr 0x000000004cd29170)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd290ac    76  stur x0, [x3, #15]
0x4cd290b0    80  movz x0, #0x0
0x4cd290b4    84  stur x0, [x3, #23]
0x4cd290b8    88  add x0, x3, #0x20 (32)
0x4cd290bc    92  ldr x1, pc+188 (addr 0x000000004cd29178)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd290c0    96  stur x1, [x0, #-1]
0x4cd290c4   100  movz x1, #0x400000000
0x4cd290c8   104  stur x1, [x0, #7]
0x4cd290cc   108  stur x0, [x3, #15]
0x4cd290d0   112  ldr x1, pc+176 (addr 0x000000004cd29180)    ;; object: 0x21004519 <the hole>
0x4cd290d4   116  stur x1, [x0, #15]
0x4cd290d8   120  ldr x1, pc+176 (addr 0x000000004cd29188)    ;; object: 0x21004519 <the hole>
0x4cd290dc   124  stur x1, [x0, #23]
0x4cd290e0   128  ldr x1, pc+176 (addr 0x000000004cd29190)    ;; object: 0x21004519 <the hole>
0x4cd290e4   132  stur x1, [x0, #31]
0x4cd290e8   136  ldr x1, pc+176 (addr 0x000000004cd29198)    ;; object: 0x21004519 <the hole>
0x4cd290ec   140  stur x1, [x0, #39]
0x4cd290f0   144  mov x0, x3
0x4cd290f4   148  add jssp, jssp, #0x8 (8)
0x4cd290f8   152  ret
0x4cd290fc   156  sub csp, jssp, #0x10 (16)
0x4cd29100   160  stp fp, lr, [jssp, #-16]!
0x4cd29104   164  movz fp, #0xa00000000
0x4cd29108   168  sub csp, jssp, #0x8 (8)
0x4cd2910c   172  str fp, [jssp, #-8]!
0x4cd29110   176  add fp, jssp, #0x8 (8)
0x4cd29114   180  movz x3, #0x0
0x4cd29118   184  mov x16, lr
0x4cd2911c   188  ldr x17, pc+132 (addr 0x000000004cd291a0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd29120   192  blr x17
0x4cd29124   196  movz x0, #0x5000000000
0x4cd29128   200  movz x10, #0x0
0x4cd2912c   204  sub csp, jssp, #0x10 (16)
0x4cd29130   208  stp x10, x0, [jssp, #-16]!
0x4cd29134   212  movz x0, #0x2
0x4cd29138   216  movz x1, #0x5b88
0x4cd2913c   220  movk x1, #0xe2, lsl #16
0x4cd29140   224  ldr x16, pc+104 (addr 0x000000004cd291a8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd29144   228  blr x16
0x4cd29148   232  str x0, [jssp, #24]
0x4cd2914c   236  ldr x16, pc+100 (addr 0x000000004cd291b0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd29150   240  blr x16
0x4cd29154   244  ldr lr, [jssp, #16]
0x4cd29158   248  ldp xzr, fp, [jssp], #24
0x4cd2915c   252  b #-0xcc (addr 0x4cd29090)
0x4cd29160   256  580002bf       constant pool begin (num_const = 21)    ;; constant pool
0x4cd29164   260  d63f03e0       constant
0x4cd29168   264  21004201       constant
0x4cd2916c   268  00000000       constant
0x4cd29170   272  21004201       constant
0x4cd29174   276  00000000       constant
0x4cd29178   280  2a804259       constant
0x4cd2917c   284  00000000       constant
0x4cd29180   288  21004519       constant
0x4cd29184   292  00000000       constant
0x4cd29188   296  21004519       constant
0x4cd2918c   300  00000000       constant
0x4cd29190   304  21004519       constant
0x4cd29194   308  00000000       constant
0x4cd29198   312  21004519       constant
0x4cd2919c   316  00000000       constant
0x4cd291a0   320  4cd06820       constant
0x4cd291a4   324  00000000       constant
0x4cd291a8   328  4cd06260       constant
0x4cd291ac   332  00000000       constant
0x4cd291b0   336  4cd068e0       constant
0x4cd291b4   340  00000000       constant
0x4cd291b8   344  movz x16, #0x0
0x4cd291bc   348  sub csp, jssp, #0x10 (16)
0x4cd291c0   352  stp fp, lr, [jssp, #-16]!
0x4cd291c4   356  bl #+0x4 (addr 0x4cd291c8)
0x4cd291c8   360  movz x17, #0xa00000000
0x4cd291cc   364  sub csp, jssp, #0x10 (16)
0x4cd291d0   368  stp x17, cp, [jssp, #-16]!
0x4cd291d4   372  add fp, jssp, #0x10 (16)
0x4cd291d8   376  ldr x17, pc+24 (addr 0x000000004cd291f0)    ;; lazy deoptimization bailout 0
0x4cd291dc   380  add x17, x17, x16
0x4cd291e0   384  br x17
0x4cd291e4   388  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd291e8   392  d63f03e0       constant
0x4cd291ec   396  d503201f       constant
0x4cd291f0   400  4cb06000       constant
0x4cd291f4   404  00000000       constant


Safepoints (size = 21)
0x4cd29148   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0x4cd290a0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd290a8  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd290bc  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd290d0  embedded object  (0x21004519 <the hole>)
0x4cd290d8  embedded object  (0x21004519 <the hole>)
0x4cd290e0  embedded object  (0x21004519 <the hole>)
0x4cd290e8  embedded object  (0x21004519 <the hole>)
0x4cd2911c  code target (STUB)  (0x4cd06820)
0x4cd29140  code target (STUB)  (0x4cd06260)
0x4cd2914c  code target (STUB)  (0x4cd068e0)
0x4cd29160  constant pool (size 88)
0x4cd291d8  runtime entry
0x4cd291e4  constant pool (size 20)

--- End code ---
kind = STUB
major_key = InternalArrayNoArgumentConstructorStub
name = InternalArrayNoArgumentConstructorStub
compiler = crankshaft
Instructions (size = 429)
0x4cd29060     0  movz w0, #0x6000
0x4cd29064     4  movk w0, #0x9, lsl #16
0x4cd29068     8  cmp w0, #0x30 (48)
0x4cd2906c    12  b.ls #+0x14c (addr 0x4cd291b8)
0x4cd29070    16  movz x2, #0xd2c0
0x4cd29074    20  movk x2, #0x166d, lsl #16
0x4cd29078    24  ldp x3, x0, [x2]
0x4cd2907c    28  adds x16, x3, #0x50 (80)
0x4cd29080    32  ccmp x16, x0, #nzCv, lo
0x4cd29084    36  b.hi #+0x78 (addr 0x4cd290fc)
0x4cd29088    40  str x16, [x2]
0x4cd2908c    44  orr x3, x3, #0x1
0x4cd29090    48  movz w0, #0x0
0x4cd29094    52  stur x0, [x3, #31]
0x4cd29098    56  ldur x0, [x1, #23]
0x4cd2909c    60  stur x0, [x3, #-1]
0x4cd290a0    64  ldr x0, pc+200 (addr 0x000000004cd29168)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd290a4    68  stur x0, [x3, #7]
0x4cd290a8    72  ldr x0, pc+200 (addr 0x000000004cd29170)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd290ac    76  stur x0, [x3, #15]
0x4cd290b0    80  movz x0, #0x0
0x4cd290b4    84  stur x0, [x3, #23]
0x4cd290b8    88  add x0, x3, #0x20 (32)
0x4cd290bc    92  ldr x1, pc+188 (addr 0x000000004cd29178)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd290c0    96  stur x1, [x0, #-1]
0x4cd290c4   100  movz x1, #0x400000000
0x4cd290c8   104  stur x1, [x0, #7]
0x4cd290cc   108  stur x0, [x3, #15]
0x4cd290d0   112  ldr x1, pc+176 (addr 0x000000004cd29180)    ;; object: 0x21004519 <the hole>
0x4cd290d4   116  stur x1, [x0, #15]
0x4cd290d8   120  ldr x1, pc+176 (addr 0x000000004cd29188)    ;; object: 0x21004519 <the hole>
0x4cd290dc   124  stur x1, [x0, #23]
0x4cd290e0   128  ldr x1, pc+176 (addr 0x000000004cd29190)    ;; object: 0x21004519 <the hole>
0x4cd290e4   132  stur x1, [x0, #31]
0x4cd290e8   136  ldr x1, pc+176 (addr 0x000000004cd29198)    ;; object: 0x21004519 <the hole>
0x4cd290ec   140  stur x1, [x0, #39]
0x4cd290f0   144  mov x0, x3
0x4cd290f4   148  add jssp, jssp, #0x8 (8)
0x4cd290f8   152  ret
0x4cd290fc   156  sub csp, jssp, #0x10 (16)
0x4cd29100   160  stp fp, lr, [jssp, #-16]!
0x4cd29104   164  movz fp, #0xa00000000
0x4cd29108   168  sub csp, jssp, #0x8 (8)
0x4cd2910c   172  str fp, [jssp, #-8]!
0x4cd29110   176  add fp, jssp, #0x8 (8)
0x4cd29114   180  movz x3, #0x0
0x4cd29118   184  mov x16, lr
0x4cd2911c   188  ldr x17, pc+132 (addr 0x000000004cd291a0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd29120   192  blr x17
0x4cd29124   196  movz x0, #0x5000000000
0x4cd29128   200  movz x10, #0x0
0x4cd2912c   204  sub csp, jssp, #0x10 (16)
0x4cd29130   208  stp x10, x0, [jssp, #-16]!
0x4cd29134   212  movz x0, #0x2
0x4cd29138   216  movz x1, #0x5b88
0x4cd2913c   220  movk x1, #0xe2, lsl #16
0x4cd29140   224  ldr x16, pc+104 (addr 0x000000004cd291a8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd29144   228  blr x16
0x4cd29148   232  str x0, [jssp, #24]
0x4cd2914c   236  ldr x16, pc+100 (addr 0x000000004cd291b0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd29150   240  blr x16
0x4cd29154   244  ldr lr, [jssp, #16]
0x4cd29158   248  ldp xzr, fp, [jssp], #24
0x4cd2915c   252  b #-0xcc (addr 0x4cd29090)
0x4cd29160   256  580002bf       constant pool begin (num_const = 21)    ;; constant pool
0x4cd29164   260  d63f03e0       constant
0x4cd29168   264  21004201       constant
0x4cd2916c   268  00000000       constant
0x4cd29170   272  21004201       constant
0x4cd29174   276  00000000       constant
0x4cd29178   280  2a804259       constant
0x4cd2917c   284  00000000       constant
0x4cd29180   288  21004519       constant
0x4cd29184   292  00000000       constant
0x4cd29188   296  21004519       constant
0x4cd2918c   300  00000000       constant
0x4cd29190   304  21004519       constant
0x4cd29194   308  00000000       constant
0x4cd29198   312  21004519       constant
0x4cd2919c   316  00000000       constant
0x4cd291a0   320  4cd06820       constant
0x4cd291a4   324  00000000       constant
0x4cd291a8   328  4cd06260       constant
0x4cd291ac   332  00000000       constant
0x4cd291b0   336  4cd068e0       constant
0x4cd291b4   340  00000000       constant
0x4cd291b8   344  movz x16, #0x0
0x4cd291bc   348  sub csp, jssp, #0x10 (16)
0x4cd291c0   352  stp fp, lr, [jssp, #-16]!
0x4cd291c4   356  bl #+0x4 (addr 0x4cd291c8)
0x4cd291c8   360  movz x17, #0xa00000000
0x4cd291cc   364  sub csp, jssp, #0x10 (16)
0x4cd291d0   368  stp x17, cp, [jssp, #-16]!
0x4cd291d4   372  add fp, jssp, #0x10 (16)
0x4cd291d8   376  ldr x17, pc+24 (addr 0x000000004cd291f0)    ;; lazy deoptimization bailout 0
0x4cd291dc   380  add x17, x17, x16
0x4cd291e0   384  br x17
0x4cd291e4   388  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd291e8   392  d63f03e0       constant
0x4cd291ec   396  d503201f       constant
0x4cd291f0   400  4cb06000       constant
0x4cd291f4   404  00000000       constant


Safepoints (size = 21)
0x4cd29148   232  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 28)
0x4cd290a0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd290a8  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd290bc  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd290d0  embedded object  (0x21004519 <the hole>)
0x4cd290d8  embedded object  (0x21004519 <the hole>)
0x4cd290e0  embedded object  (0x21004519 <the hole>)
0x4cd290e8  embedded object  (0x21004519 <the hole>)
0x4cd2911c  code target (STUB)  (0x4cd06820)
0x4cd29140  code target (STUB)  (0x4cd06260)
0x4cd2914c  code target (STUB)  (0x4cd068e0)
0x4cd29160  constant pool (size 88)
0x4cd291d8  runtime entry
0x4cd291e4  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = InternalArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 509)
0x4cd29280     0  movz x16, #0xa00000000
0x4cd29284     4  sub csp, jssp, #0x10 (16)
0x4cd29288     8  stp fp, lr, [jssp, #-16]!
0x4cd2928c    12  mov fp, jssp
0x4cd29290    16  sub csp, jssp, #0x8 (8)
0x4cd29294    20  sub jssp, jssp, #0x8 (8)
0x4cd29298    24  stur x16, [fp, #-8]
0x4cd2929c    28  ldr x2, [fp]
0x4cd292a0    32  ldur x3, [x2, #-8]
0x4cd292a4    36  movz x16, #0xe00000000
0x4cd292a8    40  cmp x3, x16
0x4cd292ac    44  csel x3, fp, x2, ne
0x4cd292b0    48  ldr x2, [x3, #16]
0x4cd292b4    52  tbnz w2, #0, #+0xd0 (addr 0x4cd29384)
0x4cd292b8    56  asr x4, x2, #32
0x4cd292bc    60  movz w16, #0x257f
0x4cd292c0    64  cmp w4, w16, lsl #3
0x4cd292c4    68  b.hs #+0x16c (addr 0x4cd29430)
0x4cd292c8    72  cbz w4, #+0xc (addr 0x4cd292d4)
0x4cd292cc    76  mov x2, x4
0x4cd292d0    80  b #+0xc (addr 0x4cd292dc)
0x4cd292d4    84  movz x2, #0x4
0x4cd292d8    88  movz x4, #0x0
0x4cd292dc    92  lsl x3, x2, #32
0x4cd292e0    96  lsl x4, x4, #32
0x4cd292e4   100  lsl w5, w2, #3
0x4cd292e8   104  add w5, w5, #0x10 (16)
0x4cd292ec   108  cmp w5, #0x96000 (614400)
0x4cd292f0   112  b.hs #+0x148 (addr 0x4cd29438)
0x4cd292f4   116  add w0, w5, #0x20 (32)
0x4cd292f8   120  sxtw x0, w0
0x4cd292fc   124  movz x5, #0xd2c0
0x4cd29300   128  movk x5, #0x166d, lsl #16
0x4cd29304   132  ldp x7, x16, [x5]
0x4cd29308   136  adds x6, x7, x0
0x4cd2930c   140  ccmp x6, x16, #nzCv, lo
0x4cd29310   144  b.hi #+0x9c (addr 0x4cd293ac)
0x4cd29314   148  str x6, [x5]
0x4cd29318   152  orr x7, x7, #0x1
0x4cd2931c   156  movz w0, #0x0
0x4cd29320   160  stur x0, [x7, #31]
0x4cd29324   164  ldur x0, [x1, #23]
0x4cd29328   168  stur x0, [x7, #-1]
0x4cd2932c   172  ldr x0, pc+204 (addr 0x000000004cd293f8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd29330   176  stur x0, [x7, #7]
0x4cd29334   180  ldr x0, pc+204 (addr 0x000000004cd29400)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd29338   184  stur x0, [x7, #15]
0x4cd2933c   188  stur x4, [x7, #23]
0x4cd29340   192  add x0, x7, #0x20 (32)
0x4cd29344   196  ldr x1, pc+196 (addr 0x000000004cd29408)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd29348   200  stur x1, [x0, #-1]
0x4cd2934c   204  stur x3, [x0, #7]
0x4cd29350   208  stur x0, [x7, #15]
0x4cd29354   212  cmp w2, #0x0 (0)
0x4cd29358   216  b.le #+0x18 (addr 0x4cd29370)
0x4cd2935c   220  sub w2, w2, #0x1 (1)
0x4cd29360   224  ldr x1, pc+176 (addr 0x000000004cd29410)    ;; object: 0x21004519 <the hole>
0x4cd29364   228  add x3, x0, #0xf (15)
0x4cd29368   232  str x1, [x3, w2, sxtw #3]
0x4cd2936c   236  b #-0x18 (addr 0x4cd29354)
0x4cd29370   240  mov x0, x7
0x4cd29374   244  mov jssp, fp
0x4cd29378   248  ldp fp, lr, [jssp], #16
0x4cd2937c   252  add jssp, jssp, #0x10 (16)
0x4cd29380   256  ret
0x4cd29384   260  ldur x16, [x2, #-1]
0x4cd29388   264  ldr x17, [x26, #120]
0x4cd2938c   268  cmp x16, x17
0x4cd29390   272  b.ne #+0xb0 (addr 0x4cd29440)
0x4cd29394   276  ldur d29, [x2, #7]
0x4cd29398   280  fcvtzs w4, d29
0x4cd2939c   284  scvtf d0, w4
0x4cd293a0   288  fcmp d29, d0
0x4cd293a4   292  b.ne #+0x9c (addr 0x4cd29440)
0x4cd293a8   296  b #-0xec (addr 0x4cd292bc)
0x4cd293ac   300  movz x7, #0x0
0x4cd293b0   304  mov x16, lr
0x4cd293b4   308  ldr x17, pc+100 (addr 0x000000004cd29418)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd293b8   312  blr x17
0x4cd293bc   316  lsl x0, x0, #32
0x4cd293c0   320  movz x10, #0x0
0x4cd293c4   324  sub csp, jssp, #0x10 (16)
0x4cd293c8   328  stp x10, x0, [jssp, #-16]!
0x4cd293cc   332  movz x0, #0x2
0x4cd293d0   336  movz x1, #0x5b88
0x4cd293d4   340  movk x1, #0xe2, lsl #16
0x4cd293d8   344  ldr x16, pc+72 (addr 0x000000004cd29420)    ;; code: STUB, CEntryStub, minor: 5
0x4cd293dc   348  blr x16
0x4cd293e0   352  str x0, [jssp, #56]
0x4cd293e4   356  ldr x16, pc+68 (addr 0x000000004cd29428)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd293e8   360  blr x16
0x4cd293ec   364  b #-0xd0 (addr 0x4cd2931c)
0x4cd293f0   368  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd293f4   372  d63f03e0       constant
0x4cd293f8   376  21004201       constant
0x4cd293fc   380  00000000       constant
0x4cd29400   384  21004201       constant
0x4cd29404   388  00000000       constant
0x4cd29408   392  2a804259       constant
0x4cd2940c   396  00000000       constant
0x4cd29410   400  21004519       constant
0x4cd29414   404  00000000       constant
0x4cd29418   408  4cd06820       constant
0x4cd2941c   412  00000000       constant
0x4cd29420   416  4cd06260       constant
0x4cd29424   420  00000000       constant
0x4cd29428   424  4cd068e0       constant
0x4cd2942c   428  00000000       constant
0x4cd29430   432  movz x16, #0x0
0x4cd29434   436  bl #+0x14 (addr 0x4cd29448)
0x4cd29438   440  movz x16, #0x8
0x4cd2943c   444  bl #+0xc (addr 0x4cd29448)
0x4cd29440   448  movz x16, #0x10
0x4cd29444   452  bl #+0x4 (addr 0x4cd29448)
0x4cd29448   456  ldr x17, pc+24 (addr 0x000000004cd29460)    ;; lazy deoptimization bailout 0
0x4cd2944c   460  add x17, x17, x16
0x4cd29450   464  br x17
0x4cd29454   468  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd29458   472  d63f03e0       constant
0x4cd2945c   476  d503201f       constant
0x4cd29460   480  4cb06000       constant
0x4cd29464   484  00000000       constant


Safepoints (size = 21)
0x4cd293e0   352  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd2932c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd29334  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd29344  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd29360  embedded object  (0x21004519 <the hole>)
0x4cd293b4  code target (STUB)  (0x4cd06820)
0x4cd293d8  code target (STUB)  (0x4cd06260)
0x4cd293e4  code target (STUB)  (0x4cd068e0)
0x4cd293f0  constant pool (size 64)
0x4cd29448  runtime entry
0x4cd29454  constant pool (size 20)

--- End code ---
kind = STUB
major_key = InternalArraySingleArgumentConstructorStub
name = InternalArraySingleArgumentConstructorStub
compiler = crankshaft
Instructions (size = 509)
0x4cd29280     0  movz x16, #0xa00000000
0x4cd29284     4  sub csp, jssp, #0x10 (16)
0x4cd29288     8  stp fp, lr, [jssp, #-16]!
0x4cd2928c    12  mov fp, jssp
0x4cd29290    16  sub csp, jssp, #0x8 (8)
0x4cd29294    20  sub jssp, jssp, #0x8 (8)
0x4cd29298    24  stur x16, [fp, #-8]
0x4cd2929c    28  ldr x2, [fp]
0x4cd292a0    32  ldur x3, [x2, #-8]
0x4cd292a4    36  movz x16, #0xe00000000
0x4cd292a8    40  cmp x3, x16
0x4cd292ac    44  csel x3, fp, x2, ne
0x4cd292b0    48  ldr x2, [x3, #16]
0x4cd292b4    52  tbnz w2, #0, #+0xd0 (addr 0x4cd29384)
0x4cd292b8    56  asr x4, x2, #32
0x4cd292bc    60  movz w16, #0x257f
0x4cd292c0    64  cmp w4, w16, lsl #3
0x4cd292c4    68  b.hs #+0x16c (addr 0x4cd29430)
0x4cd292c8    72  cbz w4, #+0xc (addr 0x4cd292d4)
0x4cd292cc    76  mov x2, x4
0x4cd292d0    80  b #+0xc (addr 0x4cd292dc)
0x4cd292d4    84  movz x2, #0x4
0x4cd292d8    88  movz x4, #0x0
0x4cd292dc    92  lsl x3, x2, #32
0x4cd292e0    96  lsl x4, x4, #32
0x4cd292e4   100  lsl w5, w2, #3
0x4cd292e8   104  add w5, w5, #0x10 (16)
0x4cd292ec   108  cmp w5, #0x96000 (614400)
0x4cd292f0   112  b.hs #+0x148 (addr 0x4cd29438)
0x4cd292f4   116  add w0, w5, #0x20 (32)
0x4cd292f8   120  sxtw x0, w0
0x4cd292fc   124  movz x5, #0xd2c0
0x4cd29300   128  movk x5, #0x166d, lsl #16
0x4cd29304   132  ldp x7, x16, [x5]
0x4cd29308   136  adds x6, x7, x0
0x4cd2930c   140  ccmp x6, x16, #nzCv, lo
0x4cd29310   144  b.hi #+0x9c (addr 0x4cd293ac)
0x4cd29314   148  str x6, [x5]
0x4cd29318   152  orr x7, x7, #0x1
0x4cd2931c   156  movz w0, #0x0
0x4cd29320   160  stur x0, [x7, #31]
0x4cd29324   164  ldur x0, [x1, #23]
0x4cd29328   168  stur x0, [x7, #-1]
0x4cd2932c   172  ldr x0, pc+204 (addr 0x000000004cd293f8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd29330   176  stur x0, [x7, #7]
0x4cd29334   180  ldr x0, pc+204 (addr 0x000000004cd29400)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd29338   184  stur x0, [x7, #15]
0x4cd2933c   188  stur x4, [x7, #23]
0x4cd29340   192  add x0, x7, #0x20 (32)
0x4cd29344   196  ldr x1, pc+196 (addr 0x000000004cd29408)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd29348   200  stur x1, [x0, #-1]
0x4cd2934c   204  stur x3, [x0, #7]
0x4cd29350   208  stur x0, [x7, #15]
0x4cd29354   212  cmp w2, #0x0 (0)
0x4cd29358   216  b.le #+0x18 (addr 0x4cd29370)
0x4cd2935c   220  sub w2, w2, #0x1 (1)
0x4cd29360   224  ldr x1, pc+176 (addr 0x000000004cd29410)    ;; object: 0x21004519 <the hole>
0x4cd29364   228  add x3, x0, #0xf (15)
0x4cd29368   232  str x1, [x3, w2, sxtw #3]
0x4cd2936c   236  b #-0x18 (addr 0x4cd29354)
0x4cd29370   240  mov x0, x7
0x4cd29374   244  mov jssp, fp
0x4cd29378   248  ldp fp, lr, [jssp], #16
0x4cd2937c   252  add jssp, jssp, #0x10 (16)
0x4cd29380   256  ret
0x4cd29384   260  ldur x16, [x2, #-1]
0x4cd29388   264  ldr x17, [x26, #120]
0x4cd2938c   268  cmp x16, x17
0x4cd29390   272  b.ne #+0xb0 (addr 0x4cd29440)
0x4cd29394   276  ldur d29, [x2, #7]
0x4cd29398   280  fcvtzs w4, d29
0x4cd2939c   284  scvtf d0, w4
0x4cd293a0   288  fcmp d29, d0
0x4cd293a4   292  b.ne #+0x9c (addr 0x4cd29440)
0x4cd293a8   296  b #-0xec (addr 0x4cd292bc)
0x4cd293ac   300  movz x7, #0x0
0x4cd293b0   304  mov x16, lr
0x4cd293b4   308  ldr x17, pc+100 (addr 0x000000004cd29418)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd293b8   312  blr x17
0x4cd293bc   316  lsl x0, x0, #32
0x4cd293c0   320  movz x10, #0x0
0x4cd293c4   324  sub csp, jssp, #0x10 (16)
0x4cd293c8   328  stp x10, x0, [jssp, #-16]!
0x4cd293cc   332  movz x0, #0x2
0x4cd293d0   336  movz x1, #0x5b88
0x4cd293d4   340  movk x1, #0xe2, lsl #16
0x4cd293d8   344  ldr x16, pc+72 (addr 0x000000004cd29420)    ;; code: STUB, CEntryStub, minor: 5
0x4cd293dc   348  blr x16
0x4cd293e0   352  str x0, [jssp, #56]
0x4cd293e4   356  ldr x16, pc+68 (addr 0x000000004cd29428)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd293e8   360  blr x16
0x4cd293ec   364  b #-0xd0 (addr 0x4cd2931c)
0x4cd293f0   368  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd293f4   372  d63f03e0       constant
0x4cd293f8   376  21004201       constant
0x4cd293fc   380  00000000       constant
0x4cd29400   384  21004201       constant
0x4cd29404   388  00000000       constant
0x4cd29408   392  2a804259       constant
0x4cd2940c   396  00000000       constant
0x4cd29410   400  21004519       constant
0x4cd29414   404  00000000       constant
0x4cd29418   408  4cd06820       constant
0x4cd2941c   412  00000000       constant
0x4cd29420   416  4cd06260       constant
0x4cd29424   420  00000000       constant
0x4cd29428   424  4cd068e0       constant
0x4cd2942c   428  00000000       constant
0x4cd29430   432  movz x16, #0x0
0x4cd29434   436  bl #+0x14 (addr 0x4cd29448)
0x4cd29438   440  movz x16, #0x8
0x4cd2943c   444  bl #+0xc (addr 0x4cd29448)
0x4cd29440   448  movz x16, #0x10
0x4cd29444   452  bl #+0x4 (addr 0x4cd29448)
0x4cd29448   456  ldr x17, pc+24 (addr 0x000000004cd29460)    ;; lazy deoptimization bailout 0
0x4cd2944c   460  add x17, x17, x16
0x4cd29450   464  br x17
0x4cd29454   468  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd29458   472  d63f03e0       constant
0x4cd2945c   476  d503201f       constant
0x4cd29460   480  4cb06000       constant
0x4cd29464   484  00000000       constant


Safepoints (size = 21)
0x4cd293e0   352  000 | x1 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd2932c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd29334  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd29344  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd29360  embedded object  (0x21004519 <the hole>)
0x4cd293b4  code target (STUB)  (0x4cd06820)
0x4cd293d8  code target (STUB)  (0x4cd06260)
0x4cd293e4  code target (STUB)  (0x4cd068e0)
0x4cd293f0  constant pool (size 64)
0x4cd29448  runtime entry
0x4cd29454  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = InternalArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 437)
0x4cd294e0     0  movz x16, #0xa00000000
0x4cd294e4     4  sub csp, jssp, #0x10 (16)
0x4cd294e8     8  stp fp, lr, [jssp, #-16]!
0x4cd294ec    12  mov fp, jssp
0x4cd294f0    16  sub csp, jssp, #0x8 (8)
0x4cd294f4    20  sub jssp, jssp, #0x8 (8)
0x4cd294f8    24  stur x16, [fp, #-8]
0x4cd294fc    28  movz w16, #0x257f
0x4cd29500    32  cmp w0, w16, lsl #3
0x4cd29504    36  b.hs #+0x14c (addr 0x4cd29650)
0x4cd29508    40  lsl x2, x0, #32
0x4cd2950c    44  lsl w3, w0, #3
0x4cd29510    48  add w3, w3, #0x10 (16)
0x4cd29514    52  cmp w3, #0x96000 (614400)
0x4cd29518    56  b.hs #+0x140 (addr 0x4cd29658)
0x4cd2951c    60  add w3, w3, #0x20 (32)
0x4cd29520    64  sxtw x3, w3
0x4cd29524    68  movz x4, #0xd2c0
0x4cd29528    72  movk x4, #0x166d, lsl #16
0x4cd2952c    76  ldp x6, x16, [x4]
0x4cd29530    80  adds x5, x6, x3
0x4cd29534    84  ccmp x5, x16, #nzCv, lo
0x4cd29538    88  b.hi #+0x9c (addr 0x4cd295d4)
0x4cd2953c    92  str x5, [x4]
0x4cd29540    96  orr x6, x6, #0x1
0x4cd29544   100  movz w3, #0x0
0x4cd29548   104  stur x3, [x6, #31]
0x4cd2954c   108  ldur x1, [x1, #23]
0x4cd29550   112  stur x1, [x6, #-1]
0x4cd29554   116  ldr x1, pc+204 (addr 0x000000004cd29620)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd29558   120  stur x1, [x6, #7]
0x4cd2955c   124  ldr x1, pc+204 (addr 0x000000004cd29628)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd29560   128  stur x1, [x6, #15]
0x4cd29564   132  stur x2, [x6, #23]
0x4cd29568   136  add x1, x6, #0x20 (32)
0x4cd2956c   140  ldr x3, pc+196 (addr 0x000000004cd29630)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd29570   144  stur x3, [x1, #-1]
0x4cd29574   148  stur x2, [x1, #7]
0x4cd29578   152  stur x1, [x6, #15]
0x4cd2957c   156  ldr x2, [fp]
0x4cd29580   160  ldur x3, [x2, #-8]
0x4cd29584   164  movz x16, #0xe00000000
0x4cd29588   168  cmp x3, x16
0x4cd2958c   172  csel x3, fp, x2, ne
0x4cd29590   176  movz x2, #0x0
0x4cd29594   180  cmp w0, w2
0x4cd29598   184  b.le #+0x20 (addr 0x4cd295b8)
0x4cd2959c   188  sub w4, w0, w2
0x4cd295a0   192  add w4, w4, #0x1 (1)
0x4cd295a4   196  ldr x4, [x3, w4, uxtw #3]
0x4cd295a8   200  add x5, x1, #0xf (15)
0x4cd295ac   204  str x4, [x5, w2, sxtw #3]
0x4cd295b0   208  add w2, w2, #0x1 (1)
0x4cd295b4   212  b #-0x20 (addr 0x4cd29594)
0x4cd295b8   216  add w0, w0, #0x1 (1)
0x4cd295bc   220  lsl x1, x0, #32
0x4cd295c0   224  mov x0, x6
0x4cd295c4   228  mov jssp, fp
0x4cd295c8   232  ldp fp, lr, [jssp], #16
0x4cd295cc   236  add jssp, jssp, x1, lsr #29
0x4cd295d0   240  ret
0x4cd295d4   244  movz x6, #0x0
0x4cd295d8   248  mov x16, lr
0x4cd295dc   252  ldr x17, pc+92 (addr 0x000000004cd29638)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd295e0   256  blr x17
0x4cd295e4   260  lsl x0, x3, #32
0x4cd295e8   264  movz x10, #0x0
0x4cd295ec   268  sub csp, jssp, #0x10 (16)
0x4cd295f0   272  stp x10, x0, [jssp, #-16]!
0x4cd295f4   276  movz x0, #0x2
0x4cd295f8   280  movz x1, #0x5b88
0x4cd295fc   284  movk x1, #0xe2, lsl #16
0x4cd29600   288  ldr x16, pc+64 (addr 0x000000004cd29640)    ;; code: STUB, CEntryStub, minor: 5
0x4cd29604   292  blr x16
0x4cd29608   296  str x0, [jssp, #48]
0x4cd2960c   300  ldr x16, pc+60 (addr 0x000000004cd29648)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd29610   304  blr x16
0x4cd29614   308  b #-0xd0 (addr 0x4cd29544)
0x4cd29618   312  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd2961c   316  d63f03e0       constant
0x4cd29620   320  21004201       constant
0x4cd29624   324  00000000       constant
0x4cd29628   328  21004201       constant
0x4cd2962c   332  00000000       constant
0x4cd29630   336  2a804259       constant
0x4cd29634   340  00000000       constant
0x4cd29638   344  4cd06820       constant
0x4cd2963c   348  00000000       constant
0x4cd29640   352  4cd06260       constant
0x4cd29644   356  00000000       constant
0x4cd29648   360  4cd068e0       constant
0x4cd2964c   364  00000000       constant
0x4cd29650   368  movz x16, #0x0
0x4cd29654   372  bl #+0xc (addr 0x4cd29660)
0x4cd29658   376  movz x16, #0x8
0x4cd2965c   380  bl #+0x4 (addr 0x4cd29660)
0x4cd29660   384  ldr x17, pc+24 (addr 0x000000004cd29678)    ;; lazy deoptimization bailout 0
0x4cd29664   388  add x17, x17, x16
0x4cd29668   392  br x17
0x4cd2966c   396  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd29670   400  d63f03e0       constant
0x4cd29674   404  d503201f       constant
0x4cd29678   408  4cb06000       constant
0x4cd2967c   412  00000000       constant


Safepoints (size = 21)
0x4cd29608   296  000 | x1 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd29554  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd2955c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd2956c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd295dc  code target (STUB)  (0x4cd06820)
0x4cd29600  code target (STUB)  (0x4cd06260)
0x4cd2960c  code target (STUB)  (0x4cd068e0)
0x4cd29618  constant pool (size 56)
0x4cd29660  runtime entry
0x4cd2966c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = InternalArrayNArgumentsConstructorStub
name = InternalArrayNArgumentsConstructorStub
compiler = crankshaft
Instructions (size = 437)
0x4cd294e0     0  movz x16, #0xa00000000
0x4cd294e4     4  sub csp, jssp, #0x10 (16)
0x4cd294e8     8  stp fp, lr, [jssp, #-16]!
0x4cd294ec    12  mov fp, jssp
0x4cd294f0    16  sub csp, jssp, #0x8 (8)
0x4cd294f4    20  sub jssp, jssp, #0x8 (8)
0x4cd294f8    24  stur x16, [fp, #-8]
0x4cd294fc    28  movz w16, #0x257f
0x4cd29500    32  cmp w0, w16, lsl #3
0x4cd29504    36  b.hs #+0x14c (addr 0x4cd29650)
0x4cd29508    40  lsl x2, x0, #32
0x4cd2950c    44  lsl w3, w0, #3
0x4cd29510    48  add w3, w3, #0x10 (16)
0x4cd29514    52  cmp w3, #0x96000 (614400)
0x4cd29518    56  b.hs #+0x140 (addr 0x4cd29658)
0x4cd2951c    60  add w3, w3, #0x20 (32)
0x4cd29520    64  sxtw x3, w3
0x4cd29524    68  movz x4, #0xd2c0
0x4cd29528    72  movk x4, #0x166d, lsl #16
0x4cd2952c    76  ldp x6, x16, [x4]
0x4cd29530    80  adds x5, x6, x3
0x4cd29534    84  ccmp x5, x16, #nzCv, lo
0x4cd29538    88  b.hi #+0x9c (addr 0x4cd295d4)
0x4cd2953c    92  str x5, [x4]
0x4cd29540    96  orr x6, x6, #0x1
0x4cd29544   100  movz w3, #0x0
0x4cd29548   104  stur x3, [x6, #31]
0x4cd2954c   108  ldur x1, [x1, #23]
0x4cd29550   112  stur x1, [x6, #-1]
0x4cd29554   116  ldr x1, pc+204 (addr 0x000000004cd29620)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd29558   120  stur x1, [x6, #7]
0x4cd2955c   124  ldr x1, pc+204 (addr 0x000000004cd29628)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd29560   128  stur x1, [x6, #15]
0x4cd29564   132  stur x2, [x6, #23]
0x4cd29568   136  add x1, x6, #0x20 (32)
0x4cd2956c   140  ldr x3, pc+196 (addr 0x000000004cd29630)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd29570   144  stur x3, [x1, #-1]
0x4cd29574   148  stur x2, [x1, #7]
0x4cd29578   152  stur x1, [x6, #15]
0x4cd2957c   156  ldr x2, [fp]
0x4cd29580   160  ldur x3, [x2, #-8]
0x4cd29584   164  movz x16, #0xe00000000
0x4cd29588   168  cmp x3, x16
0x4cd2958c   172  csel x3, fp, x2, ne
0x4cd29590   176  movz x2, #0x0
0x4cd29594   180  cmp w0, w2
0x4cd29598   184  b.le #+0x20 (addr 0x4cd295b8)
0x4cd2959c   188  sub w4, w0, w2
0x4cd295a0   192  add w4, w4, #0x1 (1)
0x4cd295a4   196  ldr x4, [x3, w4, uxtw #3]
0x4cd295a8   200  add x5, x1, #0xf (15)
0x4cd295ac   204  str x4, [x5, w2, sxtw #3]
0x4cd295b0   208  add w2, w2, #0x1 (1)
0x4cd295b4   212  b #-0x20 (addr 0x4cd29594)
0x4cd295b8   216  add w0, w0, #0x1 (1)
0x4cd295bc   220  lsl x1, x0, #32
0x4cd295c0   224  mov x0, x6
0x4cd295c4   228  mov jssp, fp
0x4cd295c8   232  ldp fp, lr, [jssp], #16
0x4cd295cc   236  add jssp, jssp, x1, lsr #29
0x4cd295d0   240  ret
0x4cd295d4   244  movz x6, #0x0
0x4cd295d8   248  mov x16, lr
0x4cd295dc   252  ldr x17, pc+92 (addr 0x000000004cd29638)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd295e0   256  blr x17
0x4cd295e4   260  lsl x0, x3, #32
0x4cd295e8   264  movz x10, #0x0
0x4cd295ec   268  sub csp, jssp, #0x10 (16)
0x4cd295f0   272  stp x10, x0, [jssp, #-16]!
0x4cd295f4   276  movz x0, #0x2
0x4cd295f8   280  movz x1, #0x5b88
0x4cd295fc   284  movk x1, #0xe2, lsl #16
0x4cd29600   288  ldr x16, pc+64 (addr 0x000000004cd29640)    ;; code: STUB, CEntryStub, minor: 5
0x4cd29604   292  blr x16
0x4cd29608   296  str x0, [jssp, #48]
0x4cd2960c   300  ldr x16, pc+60 (addr 0x000000004cd29648)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd29610   304  blr x16
0x4cd29614   308  b #-0xd0 (addr 0x4cd29544)
0x4cd29618   312  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd2961c   316  d63f03e0       constant
0x4cd29620   320  21004201       constant
0x4cd29624   324  00000000       constant
0x4cd29628   328  21004201       constant
0x4cd2962c   332  00000000       constant
0x4cd29630   336  2a804259       constant
0x4cd29634   340  00000000       constant
0x4cd29638   344  4cd06820       constant
0x4cd2963c   348  00000000       constant
0x4cd29640   352  4cd06260       constant
0x4cd29644   356  00000000       constant
0x4cd29648   360  4cd068e0       constant
0x4cd2964c   364  00000000       constant
0x4cd29650   368  movz x16, #0x0
0x4cd29654   372  bl #+0xc (addr 0x4cd29660)
0x4cd29658   376  movz x16, #0x8
0x4cd2965c   380  bl #+0x4 (addr 0x4cd29660)
0x4cd29660   384  ldr x17, pc+24 (addr 0x000000004cd29678)    ;; lazy deoptimization bailout 0
0x4cd29664   388  add x17, x17, x16
0x4cd29668   392  br x17
0x4cd2966c   396  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd29670   400  d63f03e0       constant
0x4cd29674   404  d503201f       constant
0x4cd29678   408  4cb06000       constant
0x4cd2967c   412  00000000       constant


Safepoints (size = 21)
0x4cd29608   296  000 | x1 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd29554  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd2955c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd2956c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd295dc  code target (STUB)  (0x4cd06820)
0x4cd29600  code target (STUB)  (0x4cd06260)
0x4cd2960c  code target (STUB)  (0x4cd068e0)
0x4cd29618  constant pool (size 56)
0x4cd29660  runtime entry
0x4cd2966c  constant pool (size 20)


kind = STUB
major_key = InternalArrayConstructorStub
name = InternalArrayConstructorStub
compiler = unknown
Instructions (size = 176)
0x4cd29700     0  ldur x10, [x1, #23]
0x4cd29704     4  ldrb w3, [x10, #13]
0x4cd29708     8  ubfx w3, w3, #3, #5
0x4cd2970c    12  cmp w3, #0x2 (2)
0x4cd29710    16  b.eq #+0x28 (addr 0x4cd29738)
0x4cd29714    20  cbz x0, #+0x14 (addr 0x4cd29728)
0x4cd29718    24  cmp x0, #0x1 (1)
0x4cd2971c    28  b.ne #+0x14 (addr 0x4cd29730)
0x4cd29720    32  ldr x16, pc+88 (addr 0x000000004cd29778)    ;; code: STUB, InternalArraySingleArgumentConstructorStub, minor: 3
0x4cd29724    36  br x16
0x4cd29728    40  ldr x16, pc+88 (addr 0x000000004cd29780)    ;; code: STUB, InternalArrayNoArgumentConstructorStub, minor: 3
0x4cd2972c    44  br x16
0x4cd29730    48  ldr x16, pc+88 (addr 0x000000004cd29788)    ;; code: STUB, InternalArrayNArgumentsConstructorStub, minor: 3
0x4cd29734    52  br x16
0x4cd29738    56  cbz x0, #+0x24 (addr 0x4cd2975c)
0x4cd2973c    60  cmp x0, #0x1 (1)
0x4cd29740    64  b.ne #+0x24 (addr 0x4cd29764)
0x4cd29744    68  ldr x10, [jssp]
0x4cd29748    72  cbz x10, #+0xc (addr 0x4cd29754)
0x4cd2974c    76  ldr x16, pc+68 (addr 0x000000004cd29790)    ;; code: STUB, InternalArraySingleArgumentConstructorStub, minor: 3
0x4cd29750    80  br x16
0x4cd29754    84  ldr x16, pc+68 (addr 0x000000004cd29798)    ;; code: STUB, InternalArraySingleArgumentConstructorStub, minor: 2
0x4cd29758    88  br x16
0x4cd2975c    92  ldr x16, pc+68 (addr 0x000000004cd297a0)    ;; code: STUB, InternalArrayNoArgumentConstructorStub, minor: 2
0x4cd29760    96  br x16
0x4cd29764   100  ldr x16, pc+68 (addr 0x000000004cd297a8)    ;; code: STUB, InternalArrayNArgumentsConstructorStub, minor: 2
0x4cd29768   104  br x16
0x4cd2976c   108  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd29770   112  d63f03e0       constant
0x4cd29774   116  d503201f       constant
0x4cd29778   120  4cd29280       constant
0x4cd2977c   124  00000000       constant
0x4cd29780   128  4cd29060       constant
0x4cd29784   132  00000000       constant
0x4cd29788   136  4cd294e0       constant
0x4cd2978c   140  00000000       constant
0x4cd29790   144  4cd29280       constant
0x4cd29794   148  00000000       constant
0x4cd29798   152  4cd28be0       constant
0x4cd2979c   156  00000000       constant
0x4cd297a0   160  4cd289c0       constant
0x4cd297a4   164  00000000       constant
0x4cd297a8   168  4cd28e40       constant
0x4cd297ac   172  00000000       constant


RelocInfo (size = 13)
0x4cd29720  code target (STUB)  (0x4cd29280)
0x4cd29728  code target (STUB)  (0x4cd29060)
0x4cd29730  code target (STUB)  (0x4cd294e0)
0x4cd2974c  code target (STUB)  (0x4cd29280)
0x4cd29754  code target (STUB)  (0x4cd28be0)
0x4cd2975c  code target (STUB)  (0x4cd289c0)
0x4cd29764  code target (STUB)  (0x4cd28e40)
0x4cd2976c  constant pool (size 68)


kind = STUB
major_key = ArrayConstructorStub
name = ArrayConstructorStub_Any
compiler = unknown
Instructions (size = 768)
0x4cd298c0     0  ldur cp, [x1, #39]
0x4cd298c4     4  cmp x3, x1
0x4cd298c8     8  b.ne #+0x1e0 (addr 0x4cd29aa8)
0x4cd298cc    12  ldr x16, [x26, #40]
0x4cd298d0    16  cmp x2, x16
0x4cd298d4    20  b.eq #+0x1a0 (addr 0x4cd29a74)
0x4cd298d8    24  ldursw x3, [x2, #11]
0x4cd298dc    28  and x3, x3, #0x7fff
0x4cd298e0    32  cbz x0, #+0xa4 (addr 0x4cd29984)
0x4cd298e4    36  cmp x0, #0x1 (1)
0x4cd298e8    40  b.ne #+0x114 (addr 0x4cd299fc)
0x4cd298ec    44  tbnz w3, #0, #+0x20 (addr 0x4cd2990c)
0x4cd298f0    48  ldr x10, [jssp]
0x4cd298f4    52  cbz x10, #+0x18 (addr 0x4cd2990c)
0x4cd298f8    56  orr x3, x3, #0x1
0x4cd298fc    60  ldur x11, [x2, #7]
0x4cd29900    64  movz x16, #0x100000000
0x4cd29904    68  add x11, x11, x16
0x4cd29908    72  stur x11, [x2, #7]
0x4cd2990c    76  cbnz x3, #+0xc (addr 0x4cd29918)
0x4cd29910    80  ldr x16, pc+448 (addr 0x000000004cd29ad0)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 0
0x4cd29914    84  br x16
0x4cd29918    88  cmp x3, #0x1 (1)
0x4cd2991c    92  b.ne #+0xc (addr 0x4cd29928)
0x4cd29920    96  ldr x16, pc+440 (addr 0x000000004cd29ad8)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 1
0x4cd29924   100  br x16
0x4cd29928   104  cmp x3, #0x4 (4)
0x4cd2992c   108  b.ne #+0xc (addr 0x4cd29938)
0x4cd29930   112  ldr x16, pc+432 (addr 0x000000004cd29ae0)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 4
0x4cd29934   116  br x16
0x4cd29938   120  cmp x3, #0x5 (5)
0x4cd2993c   124  b.ne #+0xc (addr 0x4cd29948)
0x4cd29940   128  ldr x16, pc+424 (addr 0x000000004cd29ae8)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 5
0x4cd29944   132  br x16
0x4cd29948   136  cmp x3, #0x2 (2)
0x4cd2994c   140  b.ne #+0xc (addr 0x4cd29958)
0x4cd29950   144  ldr x16, pc+416 (addr 0x000000004cd29af0)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 2
0x4cd29954   148  br x16
0x4cd29958   152  cmp x3, #0x3 (3)
0x4cd2995c   156  b.ne #+0xc (addr 0x4cd29968)
0x4cd29960   160  ldr x16, pc+408 (addr 0x000000004cd29af8)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 3
0x4cd29964   164  br x16
0x4cd29968   168  movz x0, #0x9f00000000
0x4cd2996c   172  sub csp, jssp, #0x8 (8)
0x4cd29970   176  str x0, [jssp, #-8]!
0x4cd29974   180  movz x0, #0x1
0x4cd29978   184  ldr x1, pc+392 (addr 0x000000004cd29b00)    ;; external reference (Runtime::Abort)
0x4cd2997c   188  ldr x16, pc+396 (addr 0x000000004cd29b08)    ;; code: STUB, CEntryStub, minor: 4
0x4cd29980   192  blr x16
0x4cd29984   196  cbnz x3, #+0xc (addr 0x4cd29990)
0x4cd29988   200  ldr x16, pc+392 (addr 0x000000004cd29b10)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 0
0x4cd2998c   204  br x16
0x4cd29990   208  cmp x3, #0x1 (1)
0x4cd29994   212  b.ne #+0xc (addr 0x4cd299a0)
0x4cd29998   216  ldr x16, pc+384 (addr 0x000000004cd29b18)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 1
0x4cd2999c   220  br x16
0x4cd299a0   224  cmp x3, #0x4 (4)
0x4cd299a4   228  b.ne #+0xc (addr 0x4cd299b0)
0x4cd299a8   232  ldr x16, pc+376 (addr 0x000000004cd29b20)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 4
0x4cd299ac   236  br x16
0x4cd299b0   240  cmp x3, #0x5 (5)
0x4cd299b4   244  b.ne #+0xc (addr 0x4cd299c0)
0x4cd299b8   248  ldr x16, pc+368 (addr 0x000000004cd29b28)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 5
0x4cd299bc   252  br x16
0x4cd299c0   256  cmp x3, #0x2 (2)
0x4cd299c4   260  b.ne #+0xc (addr 0x4cd299d0)
0x4cd299c8   264  ldr x16, pc+360 (addr 0x000000004cd29b30)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 2
0x4cd299cc   268  br x16
0x4cd299d0   272  cmp x3, #0x3 (3)
0x4cd299d4   276  b.ne #+0xc (addr 0x4cd299e0)
0x4cd299d8   280  ldr x16, pc+352 (addr 0x000000004cd29b38)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 3
0x4cd299dc   284  br x16
0x4cd299e0   288  movz x0, #0x9f00000000
0x4cd299e4   292  sub csp, jssp, #0x8 (8)
0x4cd299e8   296  str x0, [jssp, #-8]!
0x4cd299ec   300  movz x0, #0x1
0x4cd299f0   304  ldr x1, pc+336 (addr 0x000000004cd29b40)    ;; external reference (Runtime::Abort)
0x4cd299f4   308  ldr x16, pc+340 (addr 0x000000004cd29b48)    ;; code: STUB, CEntryStub, minor: 4
0x4cd299f8   312  blr x16
0x4cd299fc   316  cbnz x3, #+0xc (addr 0x4cd29a08)
0x4cd29a00   320  ldr x16, pc+336 (addr 0x000000004cd29b50)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 0
0x4cd29a04   324  br x16
0x4cd29a08   328  cmp x3, #0x1 (1)
0x4cd29a0c   332  b.ne #+0xc (addr 0x4cd29a18)
0x4cd29a10   336  ldr x16, pc+328 (addr 0x000000004cd29b58)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 1
0x4cd29a14   340  br x16
0x4cd29a18   344  cmp x3, #0x4 (4)
0x4cd29a1c   348  b.ne #+0xc (addr 0x4cd29a28)
0x4cd29a20   352  ldr x16, pc+320 (addr 0x000000004cd29b60)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 4
0x4cd29a24   356  br x16
0x4cd29a28   360  cmp x3, #0x5 (5)
0x4cd29a2c   364  b.ne #+0xc (addr 0x4cd29a38)
0x4cd29a30   368  ldr x16, pc+312 (addr 0x000000004cd29b68)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 5
0x4cd29a34   372  br x16
0x4cd29a38   376  cmp x3, #0x2 (2)
0x4cd29a3c   380  b.ne #+0xc (addr 0x4cd29a48)
0x4cd29a40   384  ldr x16, pc+304 (addr 0x000000004cd29b70)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 2
0x4cd29a44   388  br x16
0x4cd29a48   392  cmp x3, #0x3 (3)
0x4cd29a4c   396  b.ne #+0xc (addr 0x4cd29a58)
0x4cd29a50   400  ldr x16, pc+296 (addr 0x000000004cd29b78)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 3
0x4cd29a54   404  br x16
0x4cd29a58   408  movz x0, #0x9f00000000
0x4cd29a5c   412  sub csp, jssp, #0x8 (8)
0x4cd29a60   416  str x0, [jssp, #-8]!
0x4cd29a64   420  movz x0, #0x1
0x4cd29a68   424  ldr x1, pc+280 (addr 0x000000004cd29b80)    ;; external reference (Runtime::Abort)
0x4cd29a6c   428  ldr x16, pc+284 (addr 0x000000004cd29b88)    ;; code: STUB, CEntryStub, minor: 4
0x4cd29a70   432  blr x16
0x4cd29a74   436  cbz x0, #+0x24 (addr 0x4cd29a98)
0x4cd29a78   440  cmp x0, #0x1 (1)
0x4cd29a7c   444  b.ne #+0x24 (addr 0x4cd29aa0)
0x4cd29a80   448  ldr x10, [jssp]
0x4cd29a84   452  cbz x10, #+0xc (addr 0x4cd29a90)
0x4cd29a88   456  ldr x16, pc+264 (addr 0x000000004cd29b90)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 257
0x4cd29a8c   460  br x16
0x4cd29a90   464  ldr x16, pc+264 (addr 0x000000004cd29b98)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 256
0x4cd29a94   468  br x16
0x4cd29a98   472  ldr x16, pc+264 (addr 0x000000004cd29ba0)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 256
0x4cd29a9c   476  br x16
0x4cd29aa0   480  ldr x16, pc+264 (addr 0x000000004cd29ba8)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 256
0x4cd29aa4   484  br x16
0x4cd29aa8   488  str x1, [jssp, x0, lsl #3]
0x4cd29aac   492  add x0, x0, #0x3 (3)
0x4cd29ab0   496  sub csp, jssp, #0x10 (16)
0x4cd29ab4   500  stp x2, x3, [jssp, #-16]!
0x4cd29ab8   504  ldr x1, pc+248 (addr 0x000000004cd29bb0)    ;; external reference (Runtime::NewArray)
0x4cd29abc   508  ldr x16, pc+252 (addr 0x000000004cd29bb8)    ;; code: STUB, CEntryStub, minor: 4
0x4cd29ac0   512  br x16
0x4cd29ac4   516  580007df       constant pool begin (num_const = 62)    ;; constant pool
0x4cd29ac8   520  d63f03e0       constant
0x4cd29acc   524  d503201f       constant
0x4cd29ad0   528  4cd082a0       constant
0x4cd29ad4   532  00000000       constant
0x4cd29ad8   536  4cd08840       constant
0x4cd29adc   540  00000000       constant
0x4cd29ae0   544  4cd08e00       constant
0x4cd29ae4   548  00000000       constant
0x4cd29ae8   552  4cd09080       constant
0x4cd29aec   556  00000000       constant
0x4cd29af0   560  4cd09300       constant
0x4cd29af4   564  00000000       constant
0x4cd29af8   568  4cd09580       constant
0x4cd29afc   572  00000000       constant
0x4cd29b00   576  00eda820       constant
0x4cd29b04   580  00000000       constant
0x4cd29b08   584  4cd06060       constant
0x4cd29b0c   588  00000000       constant
0x4cd29b10   592  4cd069a0       constant
0x4cd29b14   596  00000000       constant
0x4cd29b18   600  4cd06e00       constant
0x4cd29b1c   604  00000000       constant
0x4cd29b20   608  4cd07280       constant
0x4cd29b24   612  00000000       constant
0x4cd29b28   616  4cd07480       constant
0x4cd29b2c   620  00000000       constant
0x4cd29b30   624  4cd07680       constant
0x4cd29b34   628  00000000       constant
0x4cd29b38   632  4cd078a0       constant
0x4cd29b3c   636  00000000       constant
0x4cd29b40   640  00eda820       constant
0x4cd29b44   644  00000000       constant
0x4cd29b48   648  4cd06060       constant
0x4cd29b4c   652  00000000       constant
0x4cd29b50   656  4cd09fe0       constant
0x4cd29b54   660  00000000       constant
0x4cd29b58   664  4cd0a560       constant
0x4cd29b5c   668  00000000       constant
0x4cd29b60   672  4cd0aae0       constant
0x4cd29b64   676  00000000       constant
0x4cd29b68   680  4cd0ad40       constant
0x4cd29b6c   684  00000000       constant
0x4cd29b70   688  4cd0afa0       constant
0x4cd29b74   692  00000000       constant
0x4cd29b78   696  4cd0b1e0       constant
0x4cd29b7c   700  00000000       constant
0x4cd29b80   704  00eda820       constant
0x4cd29b84   708  00000000       constant
0x4cd29b88   712  4cd06060       constant
0x4cd29b8c   716  00000000       constant
0x4cd29b90   720  4cd08b80       constant
0x4cd29b94   724  00000000       constant
0x4cd29b98   728  4cd085e0       constant
0x4cd29b9c   732  00000000       constant
0x4cd29ba0   736  4cd06be0       constant
0x4cd29ba4   740  00000000       constant
0x4cd29ba8   744  4cd0a300       constant
0x4cd29bac   748  00000000       constant
0x4cd29bb0   752  00de2850       constant
0x4cd29bb4   756  00000000       constant
0x4cd29bb8   760  4cd06060       constant
0x4cd29bbc   764  00000000       constant


RelocInfo (size = 42)
0x4cd29910  code target (STUB)  (0x4cd082a0)
0x4cd29920  code target (STUB)  (0x4cd08840)
0x4cd29930  code target (STUB)  (0x4cd08e00)
0x4cd29940  code target (STUB)  (0x4cd09080)
0x4cd29950  code target (STUB)  (0x4cd09300)
0x4cd29960  code target (STUB)  (0x4cd09580)
0x4cd29978  external reference (Runtime::Abort)  (0xeda820)
0x4cd2997c  code target (STUB)  (0x4cd06060)
0x4cd29988  code target (STUB)  (0x4cd069a0)
0x4cd29998  code target (STUB)  (0x4cd06e00)
0x4cd299a8  code target (STUB)  (0x4cd07280)
0x4cd299b8  code target (STUB)  (0x4cd07480)
0x4cd299c8  code target (STUB)  (0x4cd07680)
0x4cd299d8  code target (STUB)  (0x4cd078a0)
0x4cd299f0  external reference (Runtime::Abort)  (0xeda820)
0x4cd299f4  code target (STUB)  (0x4cd06060)
0x4cd29a00  code target (STUB)  (0x4cd09fe0)
0x4cd29a10  code target (STUB)  (0x4cd0a560)
0x4cd29a20  code target (STUB)  (0x4cd0aae0)
0x4cd29a30  code target (STUB)  (0x4cd0ad40)
0x4cd29a40  code target (STUB)  (0x4cd0afa0)
0x4cd29a50  code target (STUB)  (0x4cd0b1e0)
0x4cd29a68  external reference (Runtime::Abort)  (0xeda820)
0x4cd29a6c  code target (STUB)  (0x4cd06060)
0x4cd29a88  code target (STUB)  (0x4cd08b80)
0x4cd29a90  code target (STUB)  (0x4cd085e0)
0x4cd29a98  code target (STUB)  (0x4cd06be0)
0x4cd29aa0  code target (STUB)  (0x4cd0a300)
0x4cd29ab8  external reference (Runtime::NewArray)  (0xde2850)
0x4cd29abc  code target (STUB)  (0x4cd06060)
0x4cd29ac4  constant pool (size 252)


kind = STUB
major_key = StringToNumberStub
name = StringToNumberStub
compiler = unknown
Instructions (size = 80)
0x4cd29cc0     0  ldur x2, [x0, #7]
0x4cd29cc4     4  movz x16, #0x2
0x4cd29cc8     8  movk x16, #0xe000, lsl #16
0x4cd29ccc    12  tst x2, x16
0x4cd29cd0    16  b.ne #+0x10 (addr 0x4cd29ce0)
0x4cd29cd4    20  ubfx x0, x2, #2, #24
0x4cd29cd8    24  lsl x0, x0, #32
0x4cd29cdc    28  ret
0x4cd29ce0    32  sub csp, jssp, #0x8 (8)
0x4cd29ce4    36  str x0, [jssp, #-8]!
0x4cd29ce8    40  movz x0, #0x1
0x4cd29cec    44  ldr x1, pc+20 (addr 0x000000004cd29d00)    ;; external reference (Runtime::StringToNumber)
0x4cd29cf0    48  ldr x16, pc+24 (addr 0x000000004cd29d08)    ;; code: STUB, CEntryStub, minor: 4
0x4cd29cf4    52  br x16
0x4cd29cf8    56  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd29cfc    60  d63f03e0       constant
0x4cd29d00    64  00e3bf28       constant
0x4cd29d04    68  00000000       constant
0x4cd29d08    72  4cd06060       constant
0x4cd29d0c    76  00000000       constant


RelocInfo (size = 9)
0x4cd29cec  external reference (Runtime::StringToNumber)  (0xe3bf28)
0x4cd29cf0  code target (STUB)  (0x4cd06060)
0x4cd29cf8  constant pool (size 24)


kind = STUB
major_key = NonNumberToNumberStub
name = NonNumberToNumberStub
compiler = unknown
Instructions (size = 96)
0x4cd29d80     0  ldur x1, [x0, #-1]
0x4cd29d84     4  ldrb w1, [x1, #11]
0x4cd29d88     8  cmp x1, #0x80 (128)
0x4cd29d8c    12  b.hs #+0xc (addr 0x4cd29d98)
0x4cd29d90    16  ldr x16, pc+56 (addr 0x000000004cd29dc8)    ;; code: STUB, StringToNumberStub, minor: 0
0x4cd29d94    20  br x16
0x4cd29d98    24  cmp x1, #0x83 (131)
0x4cd29d9c    28  b.ne #+0xc (addr 0x4cd29da8)
0x4cd29da0    32  ldur x0, [x0, #15]
0x4cd29da4    36  ret
0x4cd29da8    40  sub csp, jssp, #0x8 (8)
0x4cd29dac    44  str x0, [jssp, #-8]!
0x4cd29db0    48  movz x0, #0x1
0x4cd29db4    52  ldr x1, pc+28 (addr 0x000000004cd29dd0)    ;; external reference (Runtime::ToNumber)
0x4cd29db8    56  ldr x16, pc+32 (addr 0x000000004cd29dd8)    ;; code: STUB, CEntryStub, minor: 4
0x4cd29dbc    60  br x16
0x4cd29dc0    64  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd29dc4    68  d63f03e0       constant
0x4cd29dc8    72  4cd29cc0       constant
0x4cd29dcc    76  00000000       constant
0x4cd29dd0    80  00e48d48       constant
0x4cd29dd4    84  00000000       constant
0x4cd29dd8    88  4cd06060       constant
0x4cd29ddc    92  00000000       constant


RelocInfo (size = 10)
0x4cd29d90  code target (STUB)  (0x4cd29cc0)
0x4cd29db4  external reference (Runtime::ToNumber)  (0xe48d48)
0x4cd29db8  code target (STUB)  (0x4cd06060)
0x4cd29dc0  constant pool (size 32)


kind = STUB
major_key = ToNumberStub
name = ToNumberStub
compiler = unknown
Instructions (size = 56)
0x4cd29e40     0  tbnz w0, #0, #+0x8 (addr 0x4cd29e48)
0x4cd29e44     4  ret
0x4cd29e48     8  ldur x1, [x0, #-1]
0x4cd29e4c    12  ldrb w1, [x1, #11]
0x4cd29e50    16  cmp x1, #0x81 (129)
0x4cd29e54    20  b.ne #+0x8 (addr 0x4cd29e5c)
0x4cd29e58    24  ret
0x4cd29e5c    28  ldr x16, pc+20 (addr 0x000000004cd29e70)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0x4cd29e60    32  br x16
0x4cd29e64    36  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd29e68    40  d63f03e0       constant
0x4cd29e6c    44  d503201f       constant
0x4cd29e70    48  4cd29d80       constant
0x4cd29e74    52  00000000       constant


RelocInfo (size = 7)
0x4cd29e5c  code target (STUB)  (0x4cd29d80)
0x4cd29e64  constant pool (size 20)


kind = STUB
major_key = DoubleToIStub
name = DoubleToIStub
compiler = unknown
Instructions (size = 60)
0x4cd2a3e0     0  sub csp, jssp, #0x10 (16)
0x4cd2a3e4     4  stp x2, x1, [jssp, #-16]!
0x4cd2a3e8     8  ldur x5, [x0, #7]
0x4cd2a3ec    12  ubfx x1, x5, #52, #11
0x4cd2a3f0    16  cmp x1, #0x453 (1107)
0x4cd2a3f4    20  csel x5, xzr, x5, ge
0x4cd2a3f8    24  b.ge #+0x1c (addr 0x4cd2a414)
0x4cd2a3fc    28  ubfx x2, x5, #0, #52
0x4cd2a400    32  orr x2, x2, #0x10000000000000
0x4cd2a404    36  tst x5, #0x8000000000000000
0x4cd2a408    40  cneg x2, x2, ne
0x4cd2a40c    44  sub x1, x1, #0x433 (1075)
0x4cd2a410    48  lsl x5, x2, x1
0x4cd2a414    52  ldp x2, x1, [jssp], #16
0x4cd2a418    56  ret


RelocInfo (size = 0)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = NumberToStringStub
compiler = crankshaft
Instructions (size = 477)
0x4cd2a480     0  movz x16, #0xa00000000
0x4cd2a484     4  sub csp, jssp, #0x10 (16)
0x4cd2a488     8  stp fp, lr, [jssp, #-16]!
0x4cd2a48c    12  mov fp, jssp
0x4cd2a490    16  sub csp, jssp, #0x28 (40)
0x4cd2a494    20  sub jssp, jssp, #0x28 (40)
0x4cd2a498    24  stur x16, [fp, #-8]
0x4cd2a49c    28  str d0, [jssp]
0x4cd2a4a0    32  str d1, [jssp, #8]
0x4cd2a4a4    36  stur x0, [fp, #-16]
0x4cd2a4a8    40  stur cp, [fp, #-24]
0x4cd2a4ac    44  mov x1, cp
0x4cd2a4b0    48  ldr x2, [x26, #368]
0x4cd2a4b4    52  ldur w3, [x2, #11]
0x4cd2a4b8    56  asr w3, w3, #1
0x4cd2a4bc    60  sub w3, w3, #0x1 (1)
0x4cd2a4c0    64  tbz w0, #0, #+0x60 (addr 0x4cd2a520)
0x4cd2a4c4    68  ldur x4, [x0, #-1]
0x4cd2a4c8    72  ldr x16, pc+296 (addr 0x000000004cd2a5f0)    ;; object: 0x2a804411 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd2a4cc    76  cmp x4, x16
0x4cd2a4d0    80  b.eq #+0x8 (addr 0x4cd2a4d8)
0x4cd2a4d4    84  b #+0x13c (addr 0x4cd2a610)
0x4cd2a4d8    88  ldur w4, [x0, #7]
0x4cd2a4dc    92  ldur w5, [x0, #11]
0x4cd2a4e0    96  eor w4, w5, w4
0x4cd2a4e4   100  and w3, w4, w3
0x4cd2a4e8   104  lsl w3, w3, #1
0x4cd2a4ec   108  add x4, x2, #0xf (15)
0x4cd2a4f0   112  ldr x5, [x4, w3, sxtw #3]
0x4cd2a4f4   116  tbz w5, #0, #+0x4c (addr 0x4cd2a540)
0x4cd2a4f8   120  ldur x4, [x5, #-1]
0x4cd2a4fc   124  ldr x16, pc+252 (addr 0x000000004cd2a5f8)    ;; object: 0x2a804411 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd2a500   128  cmp x4, x16
0x4cd2a504   132  b.ne #+0x3c (addr 0x4cd2a540)
0x4cd2a508   136  ldur d0, [x5, #7]
0x4cd2a50c   140  ldur d1, [x0, #7]
0x4cd2a510   144  fcmp d0, d1
0x4cd2a514   148  b.vs #+0x2c (addr 0x4cd2a540)
0x4cd2a518   152  b.eq #+0x4c (addr 0x4cd2a564)
0x4cd2a51c   156  b #+0x24 (addr 0x4cd2a540)
0x4cd2a520   160  tbnz w0, #0, #+0x68 (addr 0x4cd2a588)
0x4cd2a524   164  asr x5, x0, #32
0x4cd2a528   168  and w3, w5, w3
0x4cd2a52c   172  lsl w3, w3, #1
0x4cd2a530   176  add x4, x2, #0xf (15)
0x4cd2a534   180  ldr x5, [x4, w3, sxtw #3]
0x4cd2a538   184  cmp x0, x5
0x4cd2a53c   188  b.eq #+0x28 (addr 0x4cd2a564)
0x4cd2a540   192  sub csp, jssp, #0x8 (8)
0x4cd2a544   196  str x0, [jssp, #-8]!
0x4cd2a548   200  mov cp, x1
0x4cd2a54c   204  movz x0, #0x1
0x4cd2a550   208  movz x1, #0xce00
0x4cd2a554   212  movk x1, #0xe3, lsl #16
0x4cd2a558   216  ldr x16, pc+168 (addr 0x000000004cd2a600)    ;; code: STUB, CEntryStub, minor: 4
0x4cd2a55c   220  blr x16
0x4cd2a560   224  b #+0x10 (addr 0x4cd2a570)
0x4cd2a564   228  add x0, x2, #0x17 (23)
0x4cd2a568   232  ldr x1, [x0, w3, sxtw #3]
0x4cd2a56c   236  mov x0, x1
0x4cd2a570   240  ldur cp, [fp, #-24]
0x4cd2a574   244  ldr d0, [jssp]
0x4cd2a578   248  ldr d1, [jssp, #8]
0x4cd2a57c   252  mov jssp, fp
0x4cd2a580   256  ldp fp, lr, [jssp], #16
0x4cd2a584   260  ret
0x4cd2a588   264  ldur x16, [x0, #-1]
0x4cd2a58c   268  ldr x17, [x26, #120]
0x4cd2a590   272  cmp x16, x17
0x4cd2a594   276  b.ne #+0x30 (addr 0x4cd2a5c4)
0x4cd2a598   280  ldur d30, [x0, #7]
0x4cd2a59c   284  fcvtzs x5, d30
0x4cd2a5a0   288  cmp x5, #0x1 (1)
0x4cd2a5a4   292  ccmn x5, #1, #nzcV, vc
0x4cd2a5a8   296  b.vc #+0x18 (addr 0x4cd2a5c0)
0x4cd2a5ac   300  sub csp, jssp, #0x8 (8)
0x4cd2a5b0   304  str lr, [jssp, #-8]!
0x4cd2a5b4   308  ldr x16, pc+84 (addr 0x000000004cd2a608)    ;; code: STUB, DoubleToIStub, minor: 127296
0x4cd2a5b8   312  blr x16
0x4cd2a5bc   316  ldr lr, [jssp], #8
0x4cd2a5c0   320  b #+0x24 (addr 0x4cd2a5e4)
0x4cd2a5c4   324  ldp x5, x4, [x26, #64]
0x4cd2a5c8   328  cmp x0, x5
0x4cd2a5cc   332  cset x5, eq
0x4cd2a5d0   336  ccmp x0, x4, #nZcv, ne
0x4cd2a5d4   340  b.eq #+0x10 (addr 0x4cd2a5e4)
0x4cd2a5d8   344  ldr x16, [x26, #40]
0x4cd2a5dc   348  cmp x0, x16
0x4cd2a5e0   352  b.ne #+0x38 (addr 0x4cd2a618)
0x4cd2a5e4   356  b #-0xbc (addr 0x4cd2a528)
0x4cd2a5e8   360  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cd2a5ec   364  d63f03e0       constant
0x4cd2a5f0   368  2a804411       constant
0x4cd2a5f4   372  00000000       constant
0x4cd2a5f8   376  2a804411       constant
0x4cd2a5fc   380  00000000       constant
0x4cd2a600   384  4cd06060       constant
0x4cd2a604   388  00000000       constant
0x4cd2a608   392  4cd2a3e0       constant
0x4cd2a60c   396  00000000       constant
0x4cd2a610   400  movz x16, #0x0
0x4cd2a614   404  bl #+0xc (addr 0x4cd2a620)
0x4cd2a618   408  movz x16, #0x10
0x4cd2a61c   412  bl #+0x4 (addr 0x4cd2a620)
0x4cd2a620   416  ldr d0, [jssp]
0x4cd2a624   420  ldr d1, [jssp, #8]
0x4cd2a628   424  ldr x17, pc+24 (addr 0x000000004cd2a640)    ;; lazy deoptimization bailout 0
0x4cd2a62c   428  add x17, x17, x16
0x4cd2a630   432  br x17
0x4cd2a634   436  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd2a638   440  d63f03e0       constant
0x4cd2a63c   444  d503201f       constant
0x4cd2a640   448  4cb06000       constant
0x4cd2a644   452  00000000       constant


Safepoints (size = 21)
0x4cd2a560   224  0011000 (sp -> fp)       1

RelocInfo (size = 26)
0x4cd2a4c8  embedded object  (0x2a804411 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd2a4fc  embedded object  (0x2a804411 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd2a558  code target (STUB)  (0x4cd06060)
0x4cd2a5b4  code target (STUB)  (0x4cd2a3e0)
0x4cd2a5e8  constant pool (size 40)
0x4cd2a628  runtime entry
0x4cd2a634  constant pool (size 20)

--- End code ---
kind = STUB
major_key = NumberToStringStub
name = NumberToStringStub
compiler = crankshaft
Instructions (size = 477)
0x4cd2a480     0  movz x16, #0xa00000000
0x4cd2a484     4  sub csp, jssp, #0x10 (16)
0x4cd2a488     8  stp fp, lr, [jssp, #-16]!
0x4cd2a48c    12  mov fp, jssp
0x4cd2a490    16  sub csp, jssp, #0x28 (40)
0x4cd2a494    20  sub jssp, jssp, #0x28 (40)
0x4cd2a498    24  stur x16, [fp, #-8]
0x4cd2a49c    28  str d0, [jssp]
0x4cd2a4a0    32  str d1, [jssp, #8]
0x4cd2a4a4    36  stur x0, [fp, #-16]
0x4cd2a4a8    40  stur cp, [fp, #-24]
0x4cd2a4ac    44  mov x1, cp
0x4cd2a4b0    48  ldr x2, [x26, #368]
0x4cd2a4b4    52  ldur w3, [x2, #11]
0x4cd2a4b8    56  asr w3, w3, #1
0x4cd2a4bc    60  sub w3, w3, #0x1 (1)
0x4cd2a4c0    64  tbz w0, #0, #+0x60 (addr 0x4cd2a520)
0x4cd2a4c4    68  ldur x4, [x0, #-1]
0x4cd2a4c8    72  ldr x16, pc+296 (addr 0x000000004cd2a5f0)    ;; object: 0x2a804411 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd2a4cc    76  cmp x4, x16
0x4cd2a4d0    80  b.eq #+0x8 (addr 0x4cd2a4d8)
0x4cd2a4d4    84  b #+0x13c (addr 0x4cd2a610)
0x4cd2a4d8    88  ldur w4, [x0, #7]
0x4cd2a4dc    92  ldur w5, [x0, #11]
0x4cd2a4e0    96  eor w4, w5, w4
0x4cd2a4e4   100  and w3, w4, w3
0x4cd2a4e8   104  lsl w3, w3, #1
0x4cd2a4ec   108  add x4, x2, #0xf (15)
0x4cd2a4f0   112  ldr x5, [x4, w3, sxtw #3]
0x4cd2a4f4   116  tbz w5, #0, #+0x4c (addr 0x4cd2a540)
0x4cd2a4f8   120  ldur x4, [x5, #-1]
0x4cd2a4fc   124  ldr x16, pc+252 (addr 0x000000004cd2a5f8)    ;; object: 0x2a804411 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd2a500   128  cmp x4, x16
0x4cd2a504   132  b.ne #+0x3c (addr 0x4cd2a540)
0x4cd2a508   136  ldur d0, [x5, #7]
0x4cd2a50c   140  ldur d1, [x0, #7]
0x4cd2a510   144  fcmp d0, d1
0x4cd2a514   148  b.vs #+0x2c (addr 0x4cd2a540)
0x4cd2a518   152  b.eq #+0x4c (addr 0x4cd2a564)
0x4cd2a51c   156  b #+0x24 (addr 0x4cd2a540)
0x4cd2a520   160  tbnz w0, #0, #+0x68 (addr 0x4cd2a588)
0x4cd2a524   164  asr x5, x0, #32
0x4cd2a528   168  and w3, w5, w3
0x4cd2a52c   172  lsl w3, w3, #1
0x4cd2a530   176  add x4, x2, #0xf (15)
0x4cd2a534   180  ldr x5, [x4, w3, sxtw #3]
0x4cd2a538   184  cmp x0, x5
0x4cd2a53c   188  b.eq #+0x28 (addr 0x4cd2a564)
0x4cd2a540   192  sub csp, jssp, #0x8 (8)
0x4cd2a544   196  str x0, [jssp, #-8]!
0x4cd2a548   200  mov cp, x1
0x4cd2a54c   204  movz x0, #0x1
0x4cd2a550   208  movz x1, #0xce00
0x4cd2a554   212  movk x1, #0xe3, lsl #16
0x4cd2a558   216  ldr x16, pc+168 (addr 0x000000004cd2a600)    ;; code: STUB, CEntryStub, minor: 4
0x4cd2a55c   220  blr x16
0x4cd2a560   224  b #+0x10 (addr 0x4cd2a570)
0x4cd2a564   228  add x0, x2, #0x17 (23)
0x4cd2a568   232  ldr x1, [x0, w3, sxtw #3]
0x4cd2a56c   236  mov x0, x1
0x4cd2a570   240  ldur cp, [fp, #-24]
0x4cd2a574   244  ldr d0, [jssp]
0x4cd2a578   248  ldr d1, [jssp, #8]
0x4cd2a57c   252  mov jssp, fp
0x4cd2a580   256  ldp fp, lr, [jssp], #16
0x4cd2a584   260  ret
0x4cd2a588   264  ldur x16, [x0, #-1]
0x4cd2a58c   268  ldr x17, [x26, #120]
0x4cd2a590   272  cmp x16, x17
0x4cd2a594   276  b.ne #+0x30 (addr 0x4cd2a5c4)
0x4cd2a598   280  ldur d30, [x0, #7]
0x4cd2a59c   284  fcvtzs x5, d30
0x4cd2a5a0   288  cmp x5, #0x1 (1)
0x4cd2a5a4   292  ccmn x5, #1, #nzcV, vc
0x4cd2a5a8   296  b.vc #+0x18 (addr 0x4cd2a5c0)
0x4cd2a5ac   300  sub csp, jssp, #0x8 (8)
0x4cd2a5b0   304  str lr, [jssp, #-8]!
0x4cd2a5b4   308  ldr x16, pc+84 (addr 0x000000004cd2a608)    ;; code: STUB, DoubleToIStub, minor: 127296
0x4cd2a5b8   312  blr x16
0x4cd2a5bc   316  ldr lr, [jssp], #8
0x4cd2a5c0   320  b #+0x24 (addr 0x4cd2a5e4)
0x4cd2a5c4   324  ldp x5, x4, [x26, #64]
0x4cd2a5c8   328  cmp x0, x5
0x4cd2a5cc   332  cset x5, eq
0x4cd2a5d0   336  ccmp x0, x4, #nZcv, ne
0x4cd2a5d4   340  b.eq #+0x10 (addr 0x4cd2a5e4)
0x4cd2a5d8   344  ldr x16, [x26, #40]
0x4cd2a5dc   348  cmp x0, x16
0x4cd2a5e0   352  b.ne #+0x38 (addr 0x4cd2a618)
0x4cd2a5e4   356  b #-0xbc (addr 0x4cd2a528)
0x4cd2a5e8   360  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cd2a5ec   364  d63f03e0       constant
0x4cd2a5f0   368  2a804411       constant
0x4cd2a5f4   372  00000000       constant
0x4cd2a5f8   376  2a804411       constant
0x4cd2a5fc   380  00000000       constant
0x4cd2a600   384  4cd06060       constant
0x4cd2a604   388  00000000       constant
0x4cd2a608   392  4cd2a3e0       constant
0x4cd2a60c   396  00000000       constant
0x4cd2a610   400  movz x16, #0x0
0x4cd2a614   404  bl #+0xc (addr 0x4cd2a620)
0x4cd2a618   408  movz x16, #0x10
0x4cd2a61c   412  bl #+0x4 (addr 0x4cd2a620)
0x4cd2a620   416  ldr d0, [jssp]
0x4cd2a624   420  ldr d1, [jssp, #8]
0x4cd2a628   424  ldr x17, pc+24 (addr 0x000000004cd2a640)    ;; lazy deoptimization bailout 0
0x4cd2a62c   428  add x17, x17, x16
0x4cd2a630   432  br x17
0x4cd2a634   436  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd2a638   440  d63f03e0       constant
0x4cd2a63c   444  d503201f       constant
0x4cd2a640   448  4cb06000       constant
0x4cd2a644   452  00000000       constant


Safepoints (size = 21)
0x4cd2a560   224  0011000 (sp -> fp)       1

RelocInfo (size = 26)
0x4cd2a4c8  embedded object  (0x2a804411 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd2a4fc  embedded object  (0x2a804411 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd2a558  code target (STUB)  (0x4cd06060)
0x4cd2a5b4  code target (STUB)  (0x4cd2a3e0)
0x4cd2a5e8  constant pool (size 40)
0x4cd2a628  runtime entry
0x4cd2a634  constant pool (size 20)


kind = STUB
major_key = ToStringStub
name = ToStringStub
compiler = unknown
Instructions (size = 112)
0x4cd2a6c0     0  tbz w0, #0, #+0x20 (addr 0x4cd2a6e0)
0x4cd2a6c4     4  ldur x1, [x0, #-1]
0x4cd2a6c8     8  ldrb w1, [x1, #11]
0x4cd2a6cc    12  cmp x1, #0x80 (128)
0x4cd2a6d0    16  b.hs #+0x8 (addr 0x4cd2a6d8)
0x4cd2a6d4    20  ret
0x4cd2a6d8    24  cmp x1, #0x81 (129)
0x4cd2a6dc    28  b.ne #+0xc (addr 0x4cd2a6e8)
0x4cd2a6e0    32  ldr x16, pc+56 (addr 0x000000004cd2a718)    ;; code: STUB, NumberToStringStub, minor: 0
0x4cd2a6e4    36  br x16
0x4cd2a6e8    40  cmp x1, #0x83 (131)
0x4cd2a6ec    44  b.ne #+0xc (addr 0x4cd2a6f8)
0x4cd2a6f0    48  ldur x0, [x0, #7]
0x4cd2a6f4    52  ret
0x4cd2a6f8    56  sub csp, jssp, #0x8 (8)
0x4cd2a6fc    60  str x0, [jssp, #-8]!
0x4cd2a700    64  movz x0, #0x1
0x4cd2a704    68  ldr x1, pc+28 (addr 0x000000004cd2a720)    ;; external reference (Runtime::ToString)
0x4cd2a708    72  ldr x16, pc+32 (addr 0x000000004cd2a728)    ;; code: STUB, CEntryStub, minor: 4
0x4cd2a70c    76  br x16
0x4cd2a710    80  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd2a714    84  d63f03e0       constant
0x4cd2a718    88  4cd2a480       constant
0x4cd2a71c    92  00000000       constant
0x4cd2a720    96  00e49508       constant
0x4cd2a724   100  00000000       constant
0x4cd2a728   104  4cd06060       constant
0x4cd2a72c   108  00000000       constant


RelocInfo (size = 10)
0x4cd2a6e0  code target (STUB)  (0x4cd2a480)
0x4cd2a704  external reference (Runtime::ToString)  (0xe49508)
0x4cd2a708  code target (STUB)  (0x4cd06060)
0x4cd2a710  constant pool (size 32)


--- Code ---
kind = BUILTIN
name = MathCeil
compiler = turbofan
Instructions (size = 338)
0x4cd2b4a0     0  sub jssp, jssp, #0x20 (32)
0x4cd2b4a4     4  sub csp, csp, #0x20 (32)
0x4cd2b4a8     8  stp x1, cp, [jssp]
0x4cd2b4ac    12  stp fp, lr, [jssp, #16]
0x4cd2b4b0    16  add fp, jssp, #0x10 (16)
0x4cd2b4b4    20  sub csp, jssp, #0x10 (16)
0x4cd2b4b8    24  sub jssp, jssp, #0x10 (16)
0x4cd2b4bc    28  ldr x0, [jssp, #48]
0x4cd2b4c0    32  and x1, x0, #0x1
0x4cd2b4c4    36  cmp x1, #0x0 (0)
0x4cd2b4c8    40  b.eq #+0x98 (addr 0x4cd2b560)
0x4cd2b4cc    44  ldur x1, [x0, #-1]
0x4cd2b4d0    48  ldr x2, [x26, #120]
0x4cd2b4d4    52  cmp x1, x2
0x4cd2b4d8    56  b.ne #+0x8c (addr 0x4cd2b564)
0x4cd2b4dc    60  ldur d0, [x0, #7]
0x4cd2b4e0    64  frintp d0, d0
0x4cd2b4e4    68  fcvtzs w0, d0
0x4cd2b4e8    72  scvtf d1, w0
0x4cd2b4ec    76  fcmp d0, d1
0x4cd2b4f0    80  b.ne #+0x24 (addr 0x4cd2b514)
0x4cd2b4f4    84  fcmp d0, #0.0
0x4cd2b4f8    88  b.ne #+0x14 (addr 0x4cd2b50c)
0x4cd2b4fc    92  fmov x1, d0
0x4cd2b500    96  lsr x1, x1, #32
0x4cd2b504   100  cmp w1, #0x0 (0)
0x4cd2b508   104  b.lt #+0xc (addr 0x4cd2b514)
0x4cd2b50c   108  lsl x0, x0, #32
0x4cd2b510   112  b #+0x40 (addr 0x4cd2b550)
0x4cd2b514   116  movz x0, #0xd2c0
0x4cd2b518   120  movk x0, #0x166d, lsl #16
0x4cd2b51c   124  ldr x1, [x0]
0x4cd2b520   128  movz x2, #0xd2c8
0x4cd2b524   132  movk x2, #0x166d, lsl #16
0x4cd2b528   136  ldr x2, [x2]
0x4cd2b52c   140  sub x2, x2, x1
0x4cd2b530   144  cmp x2, #0x10 (16)
0x4cd2b534   148  b.lt #+0x40 (addr 0x4cd2b574)
0x4cd2b538   152  add x2, x1, #0x10 (16)
0x4cd2b53c   156  str x2, [x0]
0x4cd2b540   160  add x0, x1, #0x1 (1)
0x4cd2b544   164  ldr x1, [x26, #120]
0x4cd2b548   168  stur x1, [x0, #-1]
0x4cd2b54c   172  stur d0, [x0, #7]
0x4cd2b550   176  mov jssp, fp
0x4cd2b554   180  ldp fp, lr, [jssp], #16
0x4cd2b558   184  add jssp, jssp, #0x10 (16)
0x4cd2b55c   188  ret
0x4cd2b560   192  b #-0x10 (addr 0x4cd2b550)
0x4cd2b564   196  ldr cp, [jssp, #24]
0x4cd2b568   200  ldr x16, pc+88 (addr 0x000000004cd2b5c0)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0x4cd2b56c   204  blr x16
0x4cd2b570   208  b #-0xb0 (addr 0x4cd2b4c0)
0x4cd2b574   212  movz x0, #0x0
0x4cd2b578   216  lsl x0, x0, #32
0x4cd2b57c   220  movz x1, #0x10
0x4cd2b580   224  lsl x1, x1, #32
0x4cd2b584   228  sub csp, jssp, #0x10 (16)
0x4cd2b588   232  sub jssp, jssp, #0x10 (16)
0x4cd2b58c   236  str x1, [jssp, #8]
0x4cd2b590   240  str x0, [jssp]
0x4cd2b594   244  str d0, [jssp, #24]
0x4cd2b598   248  movz x1, #0x5b88
0x4cd2b59c   252  movk x1, #0xe2, lsl #16
0x4cd2b5a0   256  movz x0, #0x2
0x4cd2b5a4   260  movz cp, #0x0
0x4cd2b5a8   264  ldr x16, pc+32 (addr 0x000000004cd2b5c8)    ;; code: STUB, CEntryStub, minor: 4
0x4cd2b5ac   268  blr x16
0x4cd2b5b0   272  ldr d0, [jssp, #8]
0x4cd2b5b4   276  b #-0x70 (addr 0x4cd2b544)
0x4cd2b5b8   280  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd2b5bc   284  d63f03e0       constant
0x4cd2b5c0   288  4cd29d80       constant
0x4cd2b5c4   292  00000000       constant
0x4cd2b5c8   296  4cd06060       constant
0x4cd2b5cc   300  00000000       constant


Safepoints (size = 34)
0x4cd2b570   208  000000 (sp -> fp)  <none>
0x4cd2b5b0   272  000000 (sp -> fp)  <none>

RelocInfo (size = 12)
0x4cd2b568  code target (STUB)  (0x4cd29d80)
0x4cd2b5a8  code target (STUB)  (0x4cd06060)
0x4cd2b5b8  constant pool (size 24)

--- End code ---
kind = STUB
major_key = DoubleToIStub
name = DoubleToIStub
compiler = unknown
Instructions (size = 60)
0x4cd2b660     0  sub csp, jssp, #0x10 (16)
0x4cd2b664     4  stp x2, x1, [jssp, #-16]!
0x4cd2b668     8  ldr x0, [jssp, #16]
0x4cd2b66c    12  ubfx x1, x0, #52, #11
0x4cd2b670    16  cmp x1, #0x453 (1107)
0x4cd2b674    20  csel x0, xzr, x0, ge
0x4cd2b678    24  b.ge #+0x1c (addr 0x4cd2b694)
0x4cd2b67c    28  ubfx x2, x0, #0, #52
0x4cd2b680    32  orr x2, x2, #0x10000000000000
0x4cd2b684    36  tst x0, #0x8000000000000000
0x4cd2b688    40  cneg x2, x2, ne
0x4cd2b68c    44  sub x1, x1, #0x433 (1075)
0x4cd2b690    48  lsl x0, x2, x1
0x4cd2b694    52  ldp x2, x1, [jssp], #16
0x4cd2b698    56  ret


RelocInfo (size = 0)


--- Code ---
kind = BUILTIN
name = MathClz32
compiler = turbofan
Instructions (size = 205)
0x4cd2b700     0  sub jssp, jssp, #0x20 (32)
0x4cd2b704     4  sub csp, csp, #0x20 (32)
0x4cd2b708     8  stp x1, cp, [jssp]
0x4cd2b70c    12  stp fp, lr, [jssp, #16]
0x4cd2b710    16  add fp, jssp, #0x10 (16)
0x4cd2b714    20  ldr x0, [jssp, #32]
0x4cd2b718    24  nop
0x4cd2b71c    28  nop
0x4cd2b720    32  and x1, x0, #0x1
0x4cd2b724    36  cmp x1, #0x0 (0)
0x4cd2b728    40  b.eq #+0x44 (addr 0x4cd2b76c)
0x4cd2b72c    44  ldur x1, [x0, #-1]
0x4cd2b730    48  ldr x2, [x26, #120]
0x4cd2b734    52  cmp x1, x2
0x4cd2b738    56  b.ne #+0x50 (addr 0x4cd2b788)
0x4cd2b73c    60  ldur d0, [x0, #7]
0x4cd2b740    64  fcvtzs x0, d0
0x4cd2b744    68  cmp x0, #0x1 (1)
0x4cd2b748    72  ccmn x0, #1, #nzcV, vc
0x4cd2b74c    76  b.vc #+0x1c (addr 0x4cd2b768)
0x4cd2b750    80  sub csp, jssp, #0x10 (16)
0x4cd2b754    84  str d0, [jssp, #-16]!
0x4cd2b758    88  str lr, [jssp, #8]
0x4cd2b75c    92  ldr x16, pc+76 (addr 0x000000004cd2b7a8)    ;; code: STUB, DoubleToIStub, minor: 69660
0x4cd2b760    96  blr x16
0x4cd2b764   100  ldp xzr, lr, [jssp], #16
0x4cd2b768   104  b #+0x8 (addr 0x4cd2b770)
0x4cd2b76c   108  lsr x0, x0, #32
0x4cd2b770   112  clz w0, w0
0x4cd2b774   116  lsl x0, x0, #32
0x4cd2b778   120  mov jssp, fp
0x4cd2b77c   124  ldp fp, lr, [jssp], #16
0x4cd2b780   128  add jssp, jssp, #0x10 (16)
0x4cd2b784   132  ret
0x4cd2b788   136  mov x1, cp
0x4cd2b78c   140  str cp, [jssp, #8]
0x4cd2b790   144  ldr x16, pc+32 (addr 0x000000004cd2b7b0)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0x4cd2b794   148  blr x16
0x4cd2b798   152  ldr cp, [jssp, #8]
0x4cd2b79c   156  b #-0x7c (addr 0x4cd2b720)
0x4cd2b7a0   160  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd2b7a4   164  d63f03e0       constant
0x4cd2b7a8   168  4cd2b660       constant
0x4cd2b7ac   172  00000000       constant
0x4cd2b7b0   176  4cd29d80       constant
0x4cd2b7b4   180  00000000       constant


Safepoints (size = 21)
0x4cd2b798   152  0000 (sp -> fp)  <none>

RelocInfo (size = 10)
0x4cd2b75c  code target (STUB)  (0x4cd2b660)
0x4cd2b790  code target (STUB)  (0x4cd29d80)
0x4cd2b7a0  constant pool (size 24)

--- End code ---
--- Code ---
kind = BUILTIN
name = MathFloor
compiler = turbofan
Instructions (size = 338)
0x4cd2b840     0  sub jssp, jssp, #0x20 (32)
0x4cd2b844     4  sub csp, csp, #0x20 (32)
0x4cd2b848     8  stp x1, cp, [jssp]
0x4cd2b84c    12  stp fp, lr, [jssp, #16]
0x4cd2b850    16  add fp, jssp, #0x10 (16)
0x4cd2b854    20  sub csp, jssp, #0x10 (16)
0x4cd2b858    24  sub jssp, jssp, #0x10 (16)
0x4cd2b85c    28  ldr x0, [jssp, #48]
0x4cd2b860    32  and x1, x0, #0x1
0x4cd2b864    36  cmp x1, #0x0 (0)
0x4cd2b868    40  b.eq #+0x98 (addr 0x4cd2b900)
0x4cd2b86c    44  ldur x1, [x0, #-1]
0x4cd2b870    48  ldr x2, [x26, #120]
0x4cd2b874    52  cmp x1, x2
0x4cd2b878    56  b.ne #+0x8c (addr 0x4cd2b904)
0x4cd2b87c    60  ldur d0, [x0, #7]
0x4cd2b880    64  frintm d0, d0
0x4cd2b884    68  fcvtzs w0, d0
0x4cd2b888    72  scvtf d1, w0
0x4cd2b88c    76  fcmp d0, d1
0x4cd2b890    80  b.ne #+0x24 (addr 0x4cd2b8b4)
0x4cd2b894    84  fcmp d0, #0.0
0x4cd2b898    88  b.ne #+0x14 (addr 0x4cd2b8ac)
0x4cd2b89c    92  fmov x1, d0
0x4cd2b8a0    96  lsr x1, x1, #32
0x4cd2b8a4   100  cmp w1, #0x0 (0)
0x4cd2b8a8   104  b.lt #+0xc (addr 0x4cd2b8b4)
0x4cd2b8ac   108  lsl x0, x0, #32
0x4cd2b8b0   112  b #+0x40 (addr 0x4cd2b8f0)
0x4cd2b8b4   116  movz x0, #0xd2c0
0x4cd2b8b8   120  movk x0, #0x166d, lsl #16
0x4cd2b8bc   124  ldr x1, [x0]
0x4cd2b8c0   128  movz x2, #0xd2c8
0x4cd2b8c4   132  movk x2, #0x166d, lsl #16
0x4cd2b8c8   136  ldr x2, [x2]
0x4cd2b8cc   140  sub x2, x2, x1
0x4cd2b8d0   144  cmp x2, #0x10 (16)
0x4cd2b8d4   148  b.lt #+0x40 (addr 0x4cd2b914)
0x4cd2b8d8   152  add x2, x1, #0x10 (16)
0x4cd2b8dc   156  str x2, [x0]
0x4cd2b8e0   160  add x0, x1, #0x1 (1)
0x4cd2b8e4   164  ldr x1, [x26, #120]
0x4cd2b8e8   168  stur x1, [x0, #-1]
0x4cd2b8ec   172  stur d0, [x0, #7]
0x4cd2b8f0   176  mov jssp, fp
0x4cd2b8f4   180  ldp fp, lr, [jssp], #16
0x4cd2b8f8   184  add jssp, jssp, #0x10 (16)
0x4cd2b8fc   188  ret
0x4cd2b900   192  b #-0x10 (addr 0x4cd2b8f0)
0x4cd2b904   196  ldr cp, [jssp, #24]
0x4cd2b908   200  ldr x16, pc+88 (addr 0x000000004cd2b960)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0x4cd2b90c   204  blr x16
0x4cd2b910   208  b #-0xb0 (addr 0x4cd2b860)
0x4cd2b914   212  movz x0, #0x0
0x4cd2b918   216  lsl x0, x0, #32
0x4cd2b91c   220  movz x1, #0x10
0x4cd2b920   224  lsl x1, x1, #32
0x4cd2b924   228  sub csp, jssp, #0x10 (16)
0x4cd2b928   232  sub jssp, jssp, #0x10 (16)
0x4cd2b92c   236  str x1, [jssp, #8]
0x4cd2b930   240  str x0, [jssp]
0x4cd2b934   244  str d0, [jssp, #24]
0x4cd2b938   248  movz x1, #0x5b88
0x4cd2b93c   252  movk x1, #0xe2, lsl #16
0x4cd2b940   256  movz x0, #0x2
0x4cd2b944   260  movz cp, #0x0
0x4cd2b948   264  ldr x16, pc+32 (addr 0x000000004cd2b968)    ;; code: STUB, CEntryStub, minor: 4
0x4cd2b94c   268  blr x16
0x4cd2b950   272  ldr d0, [jssp, #8]
0x4cd2b954   276  b #-0x70 (addr 0x4cd2b8e4)
0x4cd2b958   280  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd2b95c   284  d63f03e0       constant
0x4cd2b960   288  4cd29d80       constant
0x4cd2b964   292  00000000       constant
0x4cd2b968   296  4cd06060       constant
0x4cd2b96c   300  00000000       constant


Safepoints (size = 34)
0x4cd2b910   208  000000 (sp -> fp)  <none>
0x4cd2b950   272  000000 (sp -> fp)  <none>

RelocInfo (size = 12)
0x4cd2b908  code target (STUB)  (0x4cd29d80)
0x4cd2b948  code target (STUB)  (0x4cd06060)
0x4cd2b958  constant pool (size 24)

--- End code ---
--- Code ---
kind = BUILTIN
name = MathRound
compiler = turbofan
Instructions (size = 370)
0x4cd2ba00     0  sub jssp, jssp, #0x20 (32)
0x4cd2ba04     4  sub csp, csp, #0x20 (32)
0x4cd2ba08     8  stp x1, cp, [jssp]
0x4cd2ba0c    12  stp fp, lr, [jssp, #16]
0x4cd2ba10    16  add fp, jssp, #0x10 (16)
0x4cd2ba14    20  sub csp, jssp, #0x10 (16)
0x4cd2ba18    24  sub jssp, jssp, #0x10 (16)
0x4cd2ba1c    28  ldr x0, [jssp, #48]
0x4cd2ba20    32  and x1, x0, #0x1
0x4cd2ba24    36  cmp x1, #0x0 (0)
0x4cd2ba28    40  b.eq #+0xb4 (addr 0x4cd2badc)
0x4cd2ba2c    44  ldur x1, [x0, #-1]
0x4cd2ba30    48  ldr x2, [x26, #120]
0x4cd2ba34    52  cmp x1, x2
0x4cd2ba38    56  b.ne #+0xa8 (addr 0x4cd2bae0)
0x4cd2ba3c    60  ldur d0, [x0, #7]
0x4cd2ba40    64  frintp d1, d0
0x4cd2ba44    68  fmov d2, #0x60 (0.5000)
0x4cd2ba48    72  fsub d2, d1, d2
0x4cd2ba4c    76  fcmp d2, d0
0x4cd2ba50    80  b.ls #+0x10 (addr 0x4cd2ba60)
0x4cd2ba54    84  fmov d0, #0x70 (1.0000)
0x4cd2ba58    88  fsub d0, d1, d0
0x4cd2ba5c    92  fmov d1, d0
0x4cd2ba60    96  fcvtzs w0, d1
0x4cd2ba64   100  scvtf d0, w0
0x4cd2ba68   104  fcmp d1, d0
0x4cd2ba6c   108  b.ne #+0x24 (addr 0x4cd2ba90)
0x4cd2ba70   112  fcmp d1, #0.0
0x4cd2ba74   116  b.ne #+0x14 (addr 0x4cd2ba88)
0x4cd2ba78   120  fmov x1, d1
0x4cd2ba7c   124  lsr x1, x1, #32
0x4cd2ba80   128  cmp w1, #0x0 (0)
0x4cd2ba84   132  b.lt #+0xc (addr 0x4cd2ba90)
0x4cd2ba88   136  lsl x0, x0, #32
0x4cd2ba8c   140  b #+0x40 (addr 0x4cd2bacc)
0x4cd2ba90   144  movz x0, #0xd2c0
0x4cd2ba94   148  movk x0, #0x166d, lsl #16
0x4cd2ba98   152  ldr x1, [x0]
0x4cd2ba9c   156  movz x2, #0xd2c8
0x4cd2baa0   160  movk x2, #0x166d, lsl #16
0x4cd2baa4   164  ldr x2, [x2]
0x4cd2baa8   168  sub x2, x2, x1
0x4cd2baac   172  cmp x2, #0x10 (16)
0x4cd2bab0   176  b.lt #+0x40 (addr 0x4cd2baf0)
0x4cd2bab4   180  add x2, x1, #0x10 (16)
0x4cd2bab8   184  str x2, [x0]
0x4cd2babc   188  add x0, x1, #0x1 (1)
0x4cd2bac0   192  ldr x1, [x26, #120]
0x4cd2bac4   196  stur x1, [x0, #-1]
0x4cd2bac8   200  stur d1, [x0, #7]
0x4cd2bacc   204  mov jssp, fp
0x4cd2bad0   208  ldp fp, lr, [jssp], #16
0x4cd2bad4   212  add jssp, jssp, #0x10 (16)
0x4cd2bad8   216  ret
0x4cd2badc   220  b #-0x10 (addr 0x4cd2bacc)
0x4cd2bae0   224  ldr cp, [jssp, #24]
0x4cd2bae4   228  ldr x16, pc+92 (addr 0x000000004cd2bb40)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0x4cd2bae8   232  blr x16
0x4cd2baec   236  b #-0xcc (addr 0x4cd2ba20)
0x4cd2baf0   240  movz x0, #0x0
0x4cd2baf4   244  lsl x0, x0, #32
0x4cd2baf8   248  movz x1, #0x10
0x4cd2bafc   252  lsl x1, x1, #32
0x4cd2bb00   256  sub csp, jssp, #0x10 (16)
0x4cd2bb04   260  sub jssp, jssp, #0x10 (16)
0x4cd2bb08   264  str x1, [jssp, #8]
0x4cd2bb0c   268  str x0, [jssp]
0x4cd2bb10   272  fmov d0, d1
0x4cd2bb14   276  str d1, [jssp, #24]
0x4cd2bb18   280  movz x1, #0x5b88
0x4cd2bb1c   284  movk x1, #0xe2, lsl #16
0x4cd2bb20   288  movz x0, #0x2
0x4cd2bb24   292  movz cp, #0x0
0x4cd2bb28   296  ldr x16, pc+32 (addr 0x000000004cd2bb48)    ;; code: STUB, CEntryStub, minor: 4
0x4cd2bb2c   300  blr x16
0x4cd2bb30   304  ldr d1, [jssp, #8]
0x4cd2bb34   308  b #-0x74 (addr 0x4cd2bac0)
0x4cd2bb38   312  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd2bb3c   316  d63f03e0       constant
0x4cd2bb40   320  4cd29d80       constant
0x4cd2bb44   324  00000000       constant
0x4cd2bb48   328  4cd06060       constant
0x4cd2bb4c   332  00000000       constant


Safepoints (size = 34)
0x4cd2baec   236  000000 (sp -> fp)  <none>
0x4cd2bb30   304  000000 (sp -> fp)  <none>

RelocInfo (size = 12)
0x4cd2bae4  code target (STUB)  (0x4cd29d80)
0x4cd2bb28  code target (STUB)  (0x4cd06060)
0x4cd2bb38  constant pool (size 24)

--- End code ---
--- Code ---
kind = BUILTIN
name = MathSqrt
compiler = turbofan
Instructions (size = 346)
0x4cd2bbe0     0  sub jssp, jssp, #0x20 (32)
0x4cd2bbe4     4  sub csp, csp, #0x20 (32)
0x4cd2bbe8     8  stp x1, cp, [jssp]
0x4cd2bbec    12  stp fp, lr, [jssp, #16]
0x4cd2bbf0    16  add fp, jssp, #0x10 (16)
0x4cd2bbf4    20  sub csp, jssp, #0x10 (16)
0x4cd2bbf8    24  sub jssp, jssp, #0x10 (16)
0x4cd2bbfc    28  ldr x0, [jssp, #48]
0x4cd2bc00    32  and x1, x0, #0x1
0x4cd2bc04    36  cmp x1, #0x0 (0)
0x4cd2bc08    40  b.eq #+0x1c (addr 0x4cd2bc24)
0x4cd2bc0c    44  ldur x1, [x0, #-1]
0x4cd2bc10    48  ldr x2, [x26, #120]
0x4cd2bc14    52  cmp x1, x2
0x4cd2bc18    56  b.ne #+0x94 (addr 0x4cd2bcac)
0x4cd2bc1c    60  ldur d0, [x0, #7]
0x4cd2bc20    64  b #+0xc (addr 0x4cd2bc2c)
0x4cd2bc24    68  asr x0, x0, #32
0x4cd2bc28    72  scvtf d0, w0
0x4cd2bc2c    76  fsqrt d0, d0
0x4cd2bc30    80  fcvtzs w0, d0
0x4cd2bc34    84  scvtf d1, w0
0x4cd2bc38    88  fcmp d0, d1
0x4cd2bc3c    92  b.ne #+0x24 (addr 0x4cd2bc60)
0x4cd2bc40    96  fcmp d0, #0.0
0x4cd2bc44   100  b.ne #+0x14 (addr 0x4cd2bc58)
0x4cd2bc48   104  fmov x1, d0
0x4cd2bc4c   108  lsr x1, x1, #32
0x4cd2bc50   112  cmp w1, #0x0 (0)
0x4cd2bc54   116  b.lt #+0xc (addr 0x4cd2bc60)
0x4cd2bc58   120  lsl x0, x0, #32
0x4cd2bc5c   124  b #+0x40 (addr 0x4cd2bc9c)
0x4cd2bc60   128  movz x0, #0xd2c0
0x4cd2bc64   132  movk x0, #0x166d, lsl #16
0x4cd2bc68   136  ldr x1, [x0]
0x4cd2bc6c   140  movz x2, #0xd2c8
0x4cd2bc70   144  movk x2, #0x166d, lsl #16
0x4cd2bc74   148  ldr x2, [x2]
0x4cd2bc78   152  sub x2, x2, x1
0x4cd2bc7c   156  cmp x2, #0x10 (16)
0x4cd2bc80   160  b.lt #+0x3c (addr 0x4cd2bcbc)
0x4cd2bc84   164  add x2, x1, #0x10 (16)
0x4cd2bc88   168  str x2, [x0]
0x4cd2bc8c   172  add x0, x1, #0x1 (1)
0x4cd2bc90   176  ldr x1, [x26, #120]
0x4cd2bc94   180  stur x1, [x0, #-1]
0x4cd2bc98   184  stur d0, [x0, #7]
0x4cd2bc9c   188  mov jssp, fp
0x4cd2bca0   192  ldp fp, lr, [jssp], #16
0x4cd2bca4   196  add jssp, jssp, #0x10 (16)
0x4cd2bca8   200  ret
0x4cd2bcac   204  ldr cp, [jssp, #24]
0x4cd2bcb0   208  ldr x16, pc+88 (addr 0x000000004cd2bd08)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0x4cd2bcb4   212  blr x16
0x4cd2bcb8   216  b #-0xb8 (addr 0x4cd2bc00)
0x4cd2bcbc   220  movz x0, #0x0
0x4cd2bcc0   224  lsl x0, x0, #32
0x4cd2bcc4   228  movz x1, #0x10
0x4cd2bcc8   232  lsl x1, x1, #32
0x4cd2bccc   236  sub csp, jssp, #0x10 (16)
0x4cd2bcd0   240  sub jssp, jssp, #0x10 (16)
0x4cd2bcd4   244  str x1, [jssp, #8]
0x4cd2bcd8   248  str x0, [jssp]
0x4cd2bcdc   252  str d0, [jssp, #24]
0x4cd2bce0   256  movz x1, #0x5b88
0x4cd2bce4   260  movk x1, #0xe2, lsl #16
0x4cd2bce8   264  movz x0, #0x2
0x4cd2bcec   268  movz cp, #0x0
0x4cd2bcf0   272  ldr x16, pc+32 (addr 0x000000004cd2bd10)    ;; code: STUB, CEntryStub, minor: 4
0x4cd2bcf4   276  blr x16
0x4cd2bcf8   280  ldr d0, [jssp, #8]
0x4cd2bcfc   284  b #-0x6c (addr 0x4cd2bc90)
0x4cd2bd00   288  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd2bd04   292  d63f03e0       constant
0x4cd2bd08   296  4cd29d80       constant
0x4cd2bd0c   300  00000000       constant
0x4cd2bd10   304  4cd06060       constant
0x4cd2bd14   308  00000000       constant


Safepoints (size = 34)
0x4cd2bcb8   216  000000 (sp -> fp)  <none>
0x4cd2bcf8   280  000000 (sp -> fp)  <none>

RelocInfo (size = 12)
0x4cd2bcb0  code target (STUB)  (0x4cd29d80)
0x4cd2bcf0  code target (STUB)  (0x4cd06060)
0x4cd2bd00  constant pool (size 24)

--- End code ---
--- Code ---
kind = BUILTIN
name = MathTrunc
compiler = turbofan
Instructions (size = 338)
0x4cd2bda0     0  sub jssp, jssp, #0x20 (32)
0x4cd2bda4     4  sub csp, csp, #0x20 (32)
0x4cd2bda8     8  stp x1, cp, [jssp]
0x4cd2bdac    12  stp fp, lr, [jssp, #16]
0x4cd2bdb0    16  add fp, jssp, #0x10 (16)
0x4cd2bdb4    20  sub csp, jssp, #0x10 (16)
0x4cd2bdb8    24  sub jssp, jssp, #0x10 (16)
0x4cd2bdbc    28  ldr x0, [jssp, #48]
0x4cd2bdc0    32  and x1, x0, #0x1
0x4cd2bdc4    36  cmp x1, #0x0 (0)
0x4cd2bdc8    40  b.eq #+0x98 (addr 0x4cd2be60)
0x4cd2bdcc    44  ldur x1, [x0, #-1]
0x4cd2bdd0    48  ldr x2, [x26, #120]
0x4cd2bdd4    52  cmp x1, x2
0x4cd2bdd8    56  b.ne #+0x8c (addr 0x4cd2be64)
0x4cd2bddc    60  ldur d0, [x0, #7]
0x4cd2bde0    64  frintz d0, d0
0x4cd2bde4    68  fcvtzs w0, d0
0x4cd2bde8    72  scvtf d1, w0
0x4cd2bdec    76  fcmp d0, d1
0x4cd2bdf0    80  b.ne #+0x24 (addr 0x4cd2be14)
0x4cd2bdf4    84  fcmp d0, #0.0
0x4cd2bdf8    88  b.ne #+0x14 (addr 0x4cd2be0c)
0x4cd2bdfc    92  fmov x1, d0
0x4cd2be00    96  lsr x1, x1, #32
0x4cd2be04   100  cmp w1, #0x0 (0)
0x4cd2be08   104  b.lt #+0xc (addr 0x4cd2be14)
0x4cd2be0c   108  lsl x0, x0, #32
0x4cd2be10   112  b #+0x40 (addr 0x4cd2be50)
0x4cd2be14   116  movz x0, #0xd2c0
0x4cd2be18   120  movk x0, #0x166d, lsl #16
0x4cd2be1c   124  ldr x1, [x0]
0x4cd2be20   128  movz x2, #0xd2c8
0x4cd2be24   132  movk x2, #0x166d, lsl #16
0x4cd2be28   136  ldr x2, [x2]
0x4cd2be2c   140  sub x2, x2, x1
0x4cd2be30   144  cmp x2, #0x10 (16)
0x4cd2be34   148  b.lt #+0x40 (addr 0x4cd2be74)
0x4cd2be38   152  add x2, x1, #0x10 (16)
0x4cd2be3c   156  str x2, [x0]
0x4cd2be40   160  add x0, x1, #0x1 (1)
0x4cd2be44   164  ldr x1, [x26, #120]
0x4cd2be48   168  stur x1, [x0, #-1]
0x4cd2be4c   172  stur d0, [x0, #7]
0x4cd2be50   176  mov jssp, fp
0x4cd2be54   180  ldp fp, lr, [jssp], #16
0x4cd2be58   184  add jssp, jssp, #0x10 (16)
0x4cd2be5c   188  ret
0x4cd2be60   192  b #-0x10 (addr 0x4cd2be50)
0x4cd2be64   196  ldr cp, [jssp, #24]
0x4cd2be68   200  ldr x16, pc+88 (addr 0x000000004cd2bec0)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0x4cd2be6c   204  blr x16
0x4cd2be70   208  b #-0xb0 (addr 0x4cd2bdc0)
0x4cd2be74   212  movz x0, #0x0
0x4cd2be78   216  lsl x0, x0, #32
0x4cd2be7c   220  movz x1, #0x10
0x4cd2be80   224  lsl x1, x1, #32
0x4cd2be84   228  sub csp, jssp, #0x10 (16)
0x4cd2be88   232  sub jssp, jssp, #0x10 (16)
0x4cd2be8c   236  str x1, [jssp, #8]
0x4cd2be90   240  str x0, [jssp]
0x4cd2be94   244  str d0, [jssp, #24]
0x4cd2be98   248  movz x1, #0x5b88
0x4cd2be9c   252  movk x1, #0xe2, lsl #16
0x4cd2bea0   256  movz x0, #0x2
0x4cd2bea4   260  movz cp, #0x0
0x4cd2bea8   264  ldr x16, pc+32 (addr 0x000000004cd2bec8)    ;; code: STUB, CEntryStub, minor: 4
0x4cd2beac   268  blr x16
0x4cd2beb0   272  ldr d0, [jssp, #8]
0x4cd2beb4   276  b #-0x70 (addr 0x4cd2be44)
0x4cd2beb8   280  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd2bebc   284  d63f03e0       constant
0x4cd2bec0   288  4cd29d80       constant
0x4cd2bec4   292  00000000       constant
0x4cd2bec8   296  4cd06060       constant
0x4cd2becc   300  00000000       constant


Safepoints (size = 34)
0x4cd2be70   208  000000 (sp -> fp)  <none>
0x4cd2beb0   272  000000 (sp -> fp)  <none>

RelocInfo (size = 12)
0x4cd2be68  code target (STUB)  (0x4cd29d80)
0x4cd2bea8  code target (STUB)  (0x4cd06060)
0x4cd2beb8  constant pool (size 24)

--- End code ---
--- Code ---
kind = BUILTIN
name = ObjectHasOwnProperty
compiler = turbofan
Instructions (size = 421)
0x4cd2bf60     0  sub jssp, jssp, #0x20 (32)
0x4cd2bf64     4  sub csp, csp, #0x20 (32)
0x4cd2bf68     8  stp x1, cp, [jssp]
0x4cd2bf6c    12  stp fp, lr, [jssp, #16]
0x4cd2bf70    16  add fp, jssp, #0x10 (16)
0x4cd2bf74    20  ldr x0, [jssp, #40]
0x4cd2bf78    24  and x1, x0, #0x1
0x4cd2bf7c    28  cmp x1, #0x0 (0)
0x4cd2bf80    32  b.eq #+0x154 (addr 0x4cd2c0d4)
0x4cd2bf84    36  ldur x1, [x0, #-1]
0x4cd2bf88    40  ldrb w2, [x1, #11]
0x4cd2bf8c    44  ldr x3, [jssp, #32]
0x4cd2bf90    48  and x4, x3, #0x1
0x4cd2bf94    52  cmp x4, #0x0 (0)
0x4cd2bf98    56  b.eq #+0x94 (addr 0x4cd2c02c)
0x4cd2bf9c    60  ldur x4, [x3, #-1]
0x4cd2bfa0    64  ldrb w4, [x4, #11]
0x4cd2bfa4    68  cmp w4, #0x80 (128)
0x4cd2bfa8    72  b.eq #+0x1c (addr 0x4cd2bfc4)
0x4cd2bfac    76  tst x4, #0xc0
0x4cd2bfb0    80  b.ne #+0xf8 (addr 0x4cd2c0a8)
0x4cd2bfb4    84  ldur w4, [x3, #7]
0x4cd2bfb8    88  tbnz w4, #1, #+0xc (addr 0x4cd2bfc4)
0x4cd2bfbc    92  ubfx w4, w4, #2, #24
0x4cd2bfc0    96  b #+0x7c (addr 0x4cd2c03c)
0x4cd2bfc4   100  cmp w2, #0xb3 (179)
0x4cd2bfc8   104  cset x4, le
0x4cd2bfcc   108  cmp w2, #0xb6 (182)
0x4cd2bfd0   112  cset x2, eq
0x4cd2bfd4   116  orr w2, w4, w2
0x4cd2bfd8   120  cbnz w2, #+0xd0 (addr 0x4cd2c0a8)
0x4cd2bfdc   124  ldur w2, [x1, #15]
0x4cd2bfe0   128  ubfx w4, w2, #20, #1
0x4cd2bfe4   132  cbnz w4, #+0xc4 (addr 0x4cd2c0a8)
0x4cd2bfe8   136  ubfx w2, w2, #10, #10
0x4cd2bfec   140  cmp w2, #0x100 (256)
0x4cd2bff0   144  b.gt #+0xb8 (addr 0x4cd2c0a8)
0x4cd2bff4   148  ldur x0, [x1, #47]
0x4cd2bff8   152  movz x1, #0x0
0x4cd2bffc   156  nop
0x4cd2c000   160  cmp w1, w2
0x4cd2c004   164  b.eq #+0xd0 (addr 0x4cd2c0d4)
0x4cd2c008   168  add w4, w1, w1, lsl #1
0x4cd2c00c   172  add w4, w4, #0x2 (2)
0x4cd2c010   176  lsl x4, x4, #3
0x4cd2c014   180  add x4, x4, #0xf (15)
0x4cd2c018   184  ldr x4, [x0, x4]
0x4cd2c01c   188  cmp x4, x3
0x4cd2c020   192  b.eq #+0x70 (addr 0x4cd2c090)
0x4cd2c024   196  add w1, w1, #0x1 (1)
0x4cd2c028   200  b #-0x28 (addr 0x4cd2c000)
0x4cd2c02c   204  and x4, x3, #0x8000000000000001
0x4cd2c030   208  cmp x4, #0x0 (0)
0x4cd2c034   212  b.ne #+0x74 (addr 0x4cd2c0a8)
0x4cd2c038   216  asr x4, x3, #32
0x4cd2c03c   220  cmp w2, #0xb4 (180)
0x4cd2c040   224  cset x5, le
0x4cd2c044   228  cmp w2, #0xb6 (182)
0x4cd2c048   232  cset x2, eq
0x4cd2c04c   236  orr w2, w5, w2
0x4cd2c050   240  cbnz w2, #+0x58 (addr 0x4cd2c0a8)
0x4cd2c054   244  ldrb w1, [x1, #13]
0x4cd2c058   248  ubfx w1, w1, #3, #5
0x4cd2c05c   252  cmp w1, #0x3 (3)
0x4cd2c060   256  b.gt #+0x48 (addr 0x4cd2c0a8)
0x4cd2c064   260  ldur x0, [x0, #15]
0x4cd2c068   264  ldur x1, [x0, #7]
0x4cd2c06c   268  lsr x1, x1, #32
0x4cd2c070   272  cmp w4, w1
0x4cd2c074   276  b.ge #+0x60 (addr 0x4cd2c0d4)
0x4cd2c078   280  lsl x1, x4, #3
0x4cd2c07c   284  add x1, x1, #0xf (15)
0x4cd2c080   288  ldr x0, [x0, x1]
0x4cd2c084   292  ldr x1, [x26, #88]
0x4cd2c088   296  cmp x0, x1
0x4cd2c08c   300  b.eq #+0x48 (addr 0x4cd2c0d4)
0x4cd2c090   304  ldr x0, [x26, #64]
0x4cd2c094   308  mov jssp, fp
0x4cd2c098   312  ldp fp, lr, [jssp], #16
0x4cd2c09c   316  add jssp, jssp, #0x10 (16)
0x4cd2c0a0   320  ret
0x4cd2c0a4   324  b #+0x30 (addr 0x4cd2c0d4)
0x4cd2c0a8   328  sub csp, jssp, #0x10 (16)
0x4cd2c0ac   332  sub jssp, jssp, #0x10 (16)
0x4cd2c0b0   336  str x0, [jssp, #8]
0x4cd2c0b4   340  str x3, [jssp]
0x4cd2c0b8   344  movz x1, #0xf6c8
0x4cd2c0bc   348  movk x1, #0xe3, lsl #16
0x4cd2c0c0   352  movz x0, #0x2
0x4cd2c0c4   356  ldr cp, [jssp, #24]
0x4cd2c0c8   360  ldr x16, pc+32 (addr 0x000000004cd2c0e8)    ;; code: STUB, CEntryStub, minor: 4
0x4cd2c0cc   364  blr x16
0x4cd2c0d0   368  b #-0x3c (addr 0x4cd2c094)
0x4cd2c0d4   372  ldr x0, [x26, #72]
0x4cd2c0d8   376  b #-0x44 (addr 0x4cd2c094)
0x4cd2c0dc   380  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd2c0e0   384  d63f03e0       constant
0x4cd2c0e4   388  d503201f       constant
0x4cd2c0e8   392  4cd06060       constant
0x4cd2c0ec   396  00000000       constant


Safepoints (size = 21)
0x4cd2c0d0   368  0000 (sp -> fp)  <none>

RelocInfo (size = 9)
0x4cd2c0c8  code target (STUB)  (0x4cd06060)
0x4cd2c0dc  constant pool (size 20)

--- End code ---
kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0x4cd2c580     0  adr xzr, #+0x40 (addr 0x4cd2c5c0)
0x4cd2c584     4  adr xzr, #+0x2a8 (addr 0x4cd2c82c)
0x4cd2c588     8  ldr x16, pc+1368 (addr 0x000000004cd2cae0)    ;; external reference (store_buffer_top)
0x4cd2c58c    12  ldr x6, [x16]
0x4cd2c590    16  str x7, [x6], #8
0x4cd2c594    20  str x6, [x16]
0x4cd2c598    24  tst x6, #0x1ffff
0x4cd2c59c    28  b.eq #+0x8 (addr 0x4cd2c5a4)
0x4cd2c5a0    32  ret
0x4cd2c5a4    36  sub csp, jssp, #0x8 (8)
0x4cd2c5a8    40  str lr, [jssp, #-8]!
0x4cd2c5ac    44  ldr x17, pc+1340 (addr 0x000000004cd2cae8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2c5b0    48  blr x17
0x4cd2c5b4    52  ldr lr, [jssp], #8
0x4cd2c5b8    56  ret
0x4cd2c5bc    60  ret
0x4cd2c5c0    64  sub csp, jssp, #0x10 (16)
0x4cd2c5c4    68  stp x1, x0, [jssp, #-16]!
0x4cd2c5c8    72  ldr x6, [x7]
0x4cd2c5cc    76  and x16, x6, #0xfffffffffff00000
0x4cd2c5d0    80  ldr x16, [x16, #8]
0x4cd2c5d4    84  tst x16, #0x18
0x4cd2c5d8    88  b.eq #+0x17c (addr 0x4cd2c754)
0x4cd2c5dc    92  and x16, x5, #0xfffffffffff00000
0x4cd2c5e0    96  ldr x16, [x16, #8]
0x4cd2c5e4   100  tst x16, #0x18
0x4cd2c5e8   104  b.ne #+0x16c (addr 0x4cd2c754)
0x4cd2c5ec   108  and x6, x5, #0xfffffffffff00000
0x4cd2c5f0   112  ldr x0, [x6, #104]
0x4cd2c5f4   116  subs x0, x0, #0x1 (1)
0x4cd2c5f8   120  str x0, [x6, #104]
0x4cd2c5fc   124  b.mi #+0xc4 (addr 0x4cd2c6c0)
0x4cd2c600   128  ubfx x16, x5, #8, #12
0x4cd2c604   132  and x6, x5, #0xfffffffffff00000
0x4cd2c608   136  add x6, x6, x16, lsl #2
0x4cd2c60c   140  ubfx x0, x5, #3, #5
0x4cd2c610   144  ldr x6, [x6, #360]
0x4cd2c614   148  lsr x6, x6, x0
0x4cd2c618   152  tbz w6, #0, #+0x8 (addr 0x4cd2c620)
0x4cd2c61c   156  tbnz w6, #1, #+0x3c (addr 0x4cd2c658)
0x4cd2c620   160  ldp x1, x0, [jssp], #16
0x4cd2c624   164  ldr x16, pc+1228 (addr 0x000000004cd2caf0)    ;; external reference (store_buffer_top)
0x4cd2c628   168  ldr x6, [x16]
0x4cd2c62c   172  str x7, [x6], #8
0x4cd2c630   176  str x6, [x16]
0x4cd2c634   180  tst x6, #0x1ffff
0x4cd2c638   184  b.eq #+0x8 (addr 0x4cd2c640)
0x4cd2c63c   188  ret
0x4cd2c640   192  sub csp, jssp, #0x8 (8)
0x4cd2c644   196  str lr, [jssp, #-8]!
0x4cd2c648   200  ldr x17, pc+1200 (addr 0x000000004cd2caf8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2c64c   204  blr x17
0x4cd2c650   208  ldr lr, [jssp], #8
0x4cd2c654   212  ret
0x4cd2c658   216  ldr x6, [x7]
0x4cd2c65c   220  sub csp, jssp, #0x10 (16)
0x4cd2c660   224  stp x5, x7, [jssp, #-16]!
0x4cd2c664   228  ubfx x16, x6, #8, #12
0x4cd2c668   232  and x0, x6, #0xfffffffffff00000
0x4cd2c66c   236  add x0, x0, x16, lsl #2
0x4cd2c670   240  ubfx x5, x6, #3, #5
0x4cd2c674   244  ldr x7, [x0, #360]
0x4cd2c678   248  lsr x7, x7, x5
0x4cd2c67c   252  tbz w7, #0, #+0x40 (addr 0x4cd2c6bc)
0x4cd2c680   256  ldp x5, x7, [jssp], #16
0x4cd2c684   260  ldp x1, x0, [jssp], #16
0x4cd2c688   264  ldr x16, pc+1144 (addr 0x000000004cd2cb00)    ;; external reference (store_buffer_top)
0x4cd2c68c   268  ldr x6, [x16]
0x4cd2c690   272  str x7, [x6], #8
0x4cd2c694   276  str x6, [x16]
0x4cd2c698   280  tst x6, #0x1ffff
0x4cd2c69c   284  b.eq #+0x8 (addr 0x4cd2c6a4)
0x4cd2c6a0   288  ret
0x4cd2c6a4   292  sub csp, jssp, #0x8 (8)
0x4cd2c6a8   296  str lr, [jssp, #-8]!
0x4cd2c6ac   300  ldr x17, pc+1116 (addr 0x000000004cd2cb08)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2c6b0   304  blr x17
0x4cd2c6b4   308  ldr lr, [jssp], #8
0x4cd2c6b8   312  ret
0x4cd2c6bc   316  ldp x5, x7, [jssp], #16
0x4cd2c6c0   320  sub csp, jssp, #0x78 (120)
0x4cd2c6c4   324  stp x14, x15, [jssp, #-32]!
0x4cd2c6c8   328  stp x18, lr, [jssp, #16]
0x4cd2c6cc   332  stp x10, x11, [jssp, #-32]!
0x4cd2c6d0   336  stp x12, x13, [jssp, #16]
0x4cd2c6d4   340  stp x5, x7, [jssp, #-32]!
0x4cd2c6d8   344  stp x8, x9, [jssp, #16]
0x4cd2c6dc   348  stp x2, x3, [jssp, #-24]!
0x4cd2c6e0   352  str x4, [jssp, #16]
0x4cd2c6e4   356  mov x0, x5
0x4cd2c6e8   360  mov x1, x7
0x4cd2c6ec   364  ldr x2, pc+1060 (addr 0x000000004cd2cb10)    ;; external reference (isolate)
0x4cd2c6f0   368  ldr x16, pc+1064 (addr 0x000000004cd2cb18)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2c6f4   372  and csp, jssp, #0xfffffffffffffff0
0x4cd2c6f8   376  blr x16
0x4cd2c6fc   380  ldp x4, x5, [jssp, #16]
0x4cd2c700   384  ldp x2, x3, [jssp], #32
0x4cd2c704   388  ldp x9, x10, [jssp, #16]
0x4cd2c708   392  ldp x7, x8, [jssp], #32
0x4cd2c70c   396  ldp x13, x14, [jssp, #16]
0x4cd2c710   400  ldp x11, x12, [jssp], #32
0x4cd2c714   404  ldr lr, [jssp, #16]
0x4cd2c718   408  ldp x15, x18, [jssp], #24
0x4cd2c71c   412  ldp x1, x0, [jssp], #16
0x4cd2c720   416  ldr x16, pc+1024 (addr 0x000000004cd2cb20)    ;; external reference (store_buffer_top)
0x4cd2c724   420  ldr x6, [x16]
0x4cd2c728   424  str x7, [x6], #8
0x4cd2c72c   428  str x6, [x16]
0x4cd2c730   432  tst x6, #0x1ffff
0x4cd2c734   436  b.eq #+0x8 (addr 0x4cd2c73c)
0x4cd2c738   440  ret
0x4cd2c73c   444  sub csp, jssp, #0x8 (8)
0x4cd2c740   448  str lr, [jssp, #-8]!
0x4cd2c744   452  ldr x17, pc+996 (addr 0x000000004cd2cb28)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2c748   456  blr x17
0x4cd2c74c   460  ldr lr, [jssp], #8
0x4cd2c750   464  ret
0x4cd2c754   468  and x6, x5, #0xfffffffffff00000
0x4cd2c758   472  ldr x0, [x6, #104]
0x4cd2c75c   476  subs x0, x0, #0x1 (1)
0x4cd2c760   480  str x0, [x6, #104]
0x4cd2c764   484  b.mi #+0x64 (addr 0x4cd2c7c8)
0x4cd2c768   488  ubfx x16, x5, #8, #12
0x4cd2c76c   492  and x6, x5, #0xfffffffffff00000
0x4cd2c770   496  add x6, x6, x16, lsl #2
0x4cd2c774   500  ubfx x0, x5, #3, #5
0x4cd2c778   504  ldr x6, [x6, #360]
0x4cd2c77c   508  lsr x6, x6, x0
0x4cd2c780   512  tbz w6, #0, #+0x8 (addr 0x4cd2c788)
0x4cd2c784   516  tbnz w6, #1, #+0xc (addr 0x4cd2c790)
0x4cd2c788   520  ldp x1, x0, [jssp], #16
0x4cd2c78c   524  ret
0x4cd2c790   528  ldr x6, [x7]
0x4cd2c794   532  sub csp, jssp, #0x10 (16)
0x4cd2c798   536  stp x5, x7, [jssp, #-16]!
0x4cd2c79c   540  ubfx x16, x6, #8, #12
0x4cd2c7a0   544  and x0, x6, #0xfffffffffff00000
0x4cd2c7a4   548  add x0, x0, x16, lsl #2
0x4cd2c7a8   552  ubfx x5, x6, #3, #5
0x4cd2c7ac   556  ldr x7, [x0, #360]
0x4cd2c7b0   560  lsr x7, x7, x5
0x4cd2c7b4   564  tbz w7, #0, #+0x10 (addr 0x4cd2c7c4)
0x4cd2c7b8   568  ldp x5, x7, [jssp], #16
0x4cd2c7bc   572  ldp x1, x0, [jssp], #16
0x4cd2c7c0   576  ret
0x4cd2c7c4   580  ldp x5, x7, [jssp], #16
0x4cd2c7c8   584  sub csp, jssp, #0x78 (120)
0x4cd2c7cc   588  stp x14, x15, [jssp, #-32]!
0x4cd2c7d0   592  stp x18, lr, [jssp, #16]
0x4cd2c7d4   596  stp x10, x11, [jssp, #-32]!
0x4cd2c7d8   600  stp x12, x13, [jssp, #16]
0x4cd2c7dc   604  stp x5, x7, [jssp, #-32]!
0x4cd2c7e0   608  stp x8, x9, [jssp, #16]
0x4cd2c7e4   612  stp x2, x3, [jssp, #-24]!
0x4cd2c7e8   616  str x4, [jssp, #16]
0x4cd2c7ec   620  mov x0, x5
0x4cd2c7f0   624  mov x1, x7
0x4cd2c7f4   628  ldr x2, pc+828 (addr 0x000000004cd2cb30)    ;; external reference (isolate)
0x4cd2c7f8   632  ldr x16, pc+832 (addr 0x000000004cd2cb38)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2c7fc   636  and csp, jssp, #0xfffffffffffffff0
0x4cd2c800   640  blr x16
0x4cd2c804   644  ldp x4, x5, [jssp, #16]
0x4cd2c808   648  ldp x2, x3, [jssp], #32
0x4cd2c80c   652  ldp x9, x10, [jssp, #16]
0x4cd2c810   656  ldp x7, x8, [jssp], #32
0x4cd2c814   660  ldp x13, x14, [jssp, #16]
0x4cd2c818   664  ldp x11, x12, [jssp], #32
0x4cd2c81c   668  ldr lr, [jssp, #16]
0x4cd2c820   672  ldp x15, x18, [jssp], #24
0x4cd2c824   676  ldp x1, x0, [jssp], #16
0x4cd2c828   680  ret
0x4cd2c82c   684  sub csp, jssp, #0x10 (16)
0x4cd2c830   688  stp x1, x0, [jssp, #-16]!
0x4cd2c834   692  ldr x6, [x7]
0x4cd2c838   696  and x16, x6, #0xfffffffffff00000
0x4cd2c83c   700  ldr x16, [x16, #8]
0x4cd2c840   704  tst x16, #0x18
0x4cd2c844   708  b.eq #+0x19c (addr 0x4cd2c9e0)
0x4cd2c848   712  and x16, x5, #0xfffffffffff00000
0x4cd2c84c   716  ldr x16, [x16, #8]
0x4cd2c850   720  tst x16, #0x18
0x4cd2c854   724  b.ne #+0x18c (addr 0x4cd2c9e0)
0x4cd2c858   728  and x6, x5, #0xfffffffffff00000
0x4cd2c85c   732  ldr x0, [x6, #104]
0x4cd2c860   736  subs x0, x0, #0x1 (1)
0x4cd2c864   740  str x0, [x6, #104]
0x4cd2c868   744  b.mi #+0xe4 (addr 0x4cd2c94c)
0x4cd2c86c   748  ubfx x16, x5, #8, #12
0x4cd2c870   752  and x6, x5, #0xfffffffffff00000
0x4cd2c874   756  add x6, x6, x16, lsl #2
0x4cd2c878   760  ubfx x0, x5, #3, #5
0x4cd2c87c   764  ldr x6, [x6, #360]
0x4cd2c880   768  lsr x6, x6, x0
0x4cd2c884   772  tbz w6, #0, #+0x8 (addr 0x4cd2c88c)
0x4cd2c888   776  tbnz w6, #1, #+0x3c (addr 0x4cd2c8c4)
0x4cd2c88c   780  ldp x1, x0, [jssp], #16
0x4cd2c890   784  ldr x16, pc+688 (addr 0x000000004cd2cb40)    ;; external reference (store_buffer_top)
0x4cd2c894   788  ldr x6, [x16]
0x4cd2c898   792  str x7, [x6], #8
0x4cd2c89c   796  str x6, [x16]
0x4cd2c8a0   800  tst x6, #0x1ffff
0x4cd2c8a4   804  b.eq #+0x8 (addr 0x4cd2c8ac)
0x4cd2c8a8   808  ret
0x4cd2c8ac   812  sub csp, jssp, #0x8 (8)
0x4cd2c8b0   816  str lr, [jssp, #-8]!
0x4cd2c8b4   820  ldr x17, pc+660 (addr 0x000000004cd2cb48)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2c8b8   824  blr x17
0x4cd2c8bc   828  ldr lr, [jssp], #8
0x4cd2c8c0   832  ret
0x4cd2c8c4   836  ldr x6, [x7]
0x4cd2c8c8   840  and x0, x6, #0xfffffffffff00000
0x4cd2c8cc   844  ldr x0, [x0, #8]
0x4cd2c8d0   848  tbz w0, #6, #+0x18 (addr 0x4cd2c8e8)
0x4cd2c8d4   852  and x0, x5, #0xfffffffffff00000
0x4cd2c8d8   856  ldr x0, [x0, #8]
0x4cd2c8dc   860  movz x16, #0x58
0x4cd2c8e0   864  tst x0, x16
0x4cd2c8e4   868  b.eq #+0x68 (addr 0x4cd2c94c)
0x4cd2c8e8   872  sub csp, jssp, #0x10 (16)
0x4cd2c8ec   876  stp x5, x7, [jssp, #-16]!
0x4cd2c8f0   880  ubfx x16, x6, #8, #12
0x4cd2c8f4   884  and x0, x6, #0xfffffffffff00000
0x4cd2c8f8   888  add x0, x0, x16, lsl #2
0x4cd2c8fc   892  ubfx x5, x6, #3, #5
0x4cd2c900   896  ldr x7, [x0, #360]
0x4cd2c904   900  lsr x7, x7, x5
0x4cd2c908   904  tbz w7, #0, #+0x40 (addr 0x4cd2c948)
0x4cd2c90c   908  ldp x5, x7, [jssp], #16
0x4cd2c910   912  ldp x1, x0, [jssp], #16
0x4cd2c914   916  ldr x16, pc+572 (addr 0x000000004cd2cb50)    ;; external reference (store_buffer_top)
0x4cd2c918   920  ldr x6, [x16]
0x4cd2c91c   924  str x7, [x6], #8
0x4cd2c920   928  str x6, [x16]
0x4cd2c924   932  tst x6, #0x1ffff
0x4cd2c928   936  b.eq #+0x8 (addr 0x4cd2c930)
0x4cd2c92c   940  ret
0x4cd2c930   944  sub csp, jssp, #0x8 (8)
0x4cd2c934   948  str lr, [jssp, #-8]!
0x4cd2c938   952  ldr x17, pc+544 (addr 0x000000004cd2cb58)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2c93c   956  blr x17
0x4cd2c940   960  ldr lr, [jssp], #8
0x4cd2c944   964  ret
0x4cd2c948   968  ldp x5, x7, [jssp], #16
0x4cd2c94c   972  sub csp, jssp, #0x78 (120)
0x4cd2c950   976  stp x14, x15, [jssp, #-32]!
0x4cd2c954   980  stp x18, lr, [jssp, #16]
0x4cd2c958   984  stp x10, x11, [jssp, #-32]!
0x4cd2c95c   988  stp x12, x13, [jssp, #16]
0x4cd2c960   992  stp x5, x7, [jssp, #-32]!
0x4cd2c964   996  stp x8, x9, [jssp, #16]
0x4cd2c968  1000  stp x2, x3, [jssp, #-24]!
0x4cd2c96c  1004  str x4, [jssp, #16]
0x4cd2c970  1008  mov x0, x5
0x4cd2c974  1012  mov x1, x7
0x4cd2c978  1016  ldr x2, pc+488 (addr 0x000000004cd2cb60)    ;; external reference (isolate)
0x4cd2c97c  1020  ldr x16, pc+492 (addr 0x000000004cd2cb68)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2c980  1024  and csp, jssp, #0xfffffffffffffff0
0x4cd2c984  1028  blr x16
0x4cd2c988  1032  ldp x4, x5, [jssp, #16]
0x4cd2c98c  1036  ldp x2, x3, [jssp], #32
0x4cd2c990  1040  ldp x9, x10, [jssp, #16]
0x4cd2c994  1044  ldp x7, x8, [jssp], #32
0x4cd2c998  1048  ldp x13, x14, [jssp, #16]
0x4cd2c99c  1052  ldp x11, x12, [jssp], #32
0x4cd2c9a0  1056  ldr lr, [jssp, #16]
0x4cd2c9a4  1060  ldp x15, x18, [jssp], #24
0x4cd2c9a8  1064  ldp x1, x0, [jssp], #16
0x4cd2c9ac  1068  ldr x16, pc+452 (addr 0x000000004cd2cb70)    ;; external reference (store_buffer_top)
0x4cd2c9b0  1072  ldr x6, [x16]
0x4cd2c9b4  1076  str x7, [x6], #8
0x4cd2c9b8  1080  str x6, [x16]
0x4cd2c9bc  1084  tst x6, #0x1ffff
0x4cd2c9c0  1088  b.eq #+0x8 (addr 0x4cd2c9c8)
0x4cd2c9c4  1092  ret
0x4cd2c9c8  1096  sub csp, jssp, #0x8 (8)
0x4cd2c9cc  1100  str lr, [jssp, #-8]!
0x4cd2c9d0  1104  ldr x17, pc+424 (addr 0x000000004cd2cb78)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2c9d4  1108  blr x17
0x4cd2c9d8  1112  ldr lr, [jssp], #8
0x4cd2c9dc  1116  ret
0x4cd2c9e0  1120  and x6, x5, #0xfffffffffff00000
0x4cd2c9e4  1124  ldr x0, [x6, #104]
0x4cd2c9e8  1128  subs x0, x0, #0x1 (1)
0x4cd2c9ec  1132  str x0, [x6, #104]
0x4cd2c9f0  1136  b.mi #+0x84 (addr 0x4cd2ca74)
0x4cd2c9f4  1140  ubfx x16, x5, #8, #12
0x4cd2c9f8  1144  and x6, x5, #0xfffffffffff00000
0x4cd2c9fc  1148  add x6, x6, x16, lsl #2
0x4cd2ca00  1152  ubfx x0, x5, #3, #5
0x4cd2ca04  1156  ldr x6, [x6, #360]
0x4cd2ca08  1160  lsr x6, x6, x0
0x4cd2ca0c  1164  tbz w6, #0, #+0x8 (addr 0x4cd2ca14)
0x4cd2ca10  1168  tbnz w6, #1, #+0xc (addr 0x4cd2ca1c)
0x4cd2ca14  1172  ldp x1, x0, [jssp], #16
0x4cd2ca18  1176  ret
0x4cd2ca1c  1180  ldr x6, [x7]
0x4cd2ca20  1184  and x0, x6, #0xfffffffffff00000
0x4cd2ca24  1188  ldr x0, [x0, #8]
0x4cd2ca28  1192  tbz w0, #6, #+0x18 (addr 0x4cd2ca40)
0x4cd2ca2c  1196  and x0, x5, #0xfffffffffff00000
0x4cd2ca30  1200  ldr x0, [x0, #8]
0x4cd2ca34  1204  movz x16, #0x58
0x4cd2ca38  1208  tst x0, x16
0x4cd2ca3c  1212  b.eq #+0x38 (addr 0x4cd2ca74)
0x4cd2ca40  1216  sub csp, jssp, #0x10 (16)
0x4cd2ca44  1220  stp x5, x7, [jssp, #-16]!
0x4cd2ca48  1224  ubfx x16, x6, #8, #12
0x4cd2ca4c  1228  and x0, x6, #0xfffffffffff00000
0x4cd2ca50  1232  add x0, x0, x16, lsl #2
0x4cd2ca54  1236  ubfx x5, x6, #3, #5
0x4cd2ca58  1240  ldr x7, [x0, #360]
0x4cd2ca5c  1244  lsr x7, x7, x5
0x4cd2ca60  1248  tbz w7, #0, #+0x10 (addr 0x4cd2ca70)
0x4cd2ca64  1252  ldp x5, x7, [jssp], #16
0x4cd2ca68  1256  ldp x1, x0, [jssp], #16
0x4cd2ca6c  1260  ret
0x4cd2ca70  1264  ldp x5, x7, [jssp], #16
0x4cd2ca74  1268  sub csp, jssp, #0x78 (120)
0x4cd2ca78  1272  stp x14, x15, [jssp, #-32]!
0x4cd2ca7c  1276  stp x18, lr, [jssp, #16]
0x4cd2ca80  1280  stp x10, x11, [jssp, #-32]!
0x4cd2ca84  1284  stp x12, x13, [jssp, #16]
0x4cd2ca88  1288  stp x5, x7, [jssp, #-32]!
0x4cd2ca8c  1292  stp x8, x9, [jssp, #16]
0x4cd2ca90  1296  stp x2, x3, [jssp, #-24]!
0x4cd2ca94  1300  str x4, [jssp, #16]
0x4cd2ca98  1304  mov x0, x5
0x4cd2ca9c  1308  mov x1, x7
0x4cd2caa0  1312  ldr x2, pc+224 (addr 0x000000004cd2cb80)    ;; external reference (isolate)
0x4cd2caa4  1316  ldr x16, pc+228 (addr 0x000000004cd2cb88)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2caa8  1320  and csp, jssp, #0xfffffffffffffff0
0x4cd2caac  1324  blr x16
0x4cd2cab0  1328  ldp x4, x5, [jssp, #16]
0x4cd2cab4  1332  ldp x2, x3, [jssp], #32
0x4cd2cab8  1336  ldp x9, x10, [jssp, #16]
0x4cd2cabc  1340  ldp x7, x8, [jssp], #32
0x4cd2cac0  1344  ldp x13, x14, [jssp, #16]
0x4cd2cac4  1348  ldp x11, x12, [jssp], #32
0x4cd2cac8  1352  ldr lr, [jssp, #16]
0x4cd2cacc  1356  ldp x15, x18, [jssp], #24
0x4cd2cad0  1360  ldp x1, x0, [jssp], #16
0x4cd2cad4  1364  ret
0x4cd2cad8  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd2cadc  1372  d63f03e0       constant
0x4cd2cae0  1376  166dd8c0       constant
0x4cd2cae4  1380  00000000       constant
0x4cd2cae8  1384  4cd064c0       constant
0x4cd2caec  1388  00000000       constant
0x4cd2caf0  1392  166dd8c0       constant
0x4cd2caf4  1396  00000000       constant
0x4cd2caf8  1400  4cd064c0       constant
0x4cd2cafc  1404  00000000       constant
0x4cd2cb00  1408  166dd8c0       constant
0x4cd2cb04  1412  00000000       constant
0x4cd2cb08  1416  4cd064c0       constant
0x4cd2cb0c  1420  00000000       constant
0x4cd2cb10  1424  166dc2d0       constant
0x4cd2cb14  1428  00000000       constant
0x4cd2cb18  1432  00c2d958       constant
0x4cd2cb1c  1436  00000000       constant
0x4cd2cb20  1440  166dd8c0       constant
0x4cd2cb24  1444  00000000       constant
0x4cd2cb28  1448  4cd064c0       constant
0x4cd2cb2c  1452  00000000       constant
0x4cd2cb30  1456  166dc2d0       constant
0x4cd2cb34  1460  00000000       constant
0x4cd2cb38  1464  00c2d958       constant
0x4cd2cb3c  1468  00000000       constant
0x4cd2cb40  1472  166dd8c0       constant
0x4cd2cb44  1476  00000000       constant
0x4cd2cb48  1480  4cd064c0       constant
0x4cd2cb4c  1484  00000000       constant
0x4cd2cb50  1488  166dd8c0       constant
0x4cd2cb54  1492  00000000       constant
0x4cd2cb58  1496  4cd064c0       constant
0x4cd2cb5c  1500  00000000       constant
0x4cd2cb60  1504  166dc2d0       constant
0x4cd2cb64  1508  00000000       constant
0x4cd2cb68  1512  00c2d958       constant
0x4cd2cb6c  1516  00000000       constant
0x4cd2cb70  1520  166dd8c0       constant
0x4cd2cb74  1524  00000000       constant
0x4cd2cb78  1528  4cd064c0       constant
0x4cd2cb7c  1532  00000000       constant
0x4cd2cb80  1536  166dc2d0       constant
0x4cd2cb84  1540  00000000       constant
0x4cd2cb88  1544  00c2d958       constant
0x4cd2cb8c  1548  00000000       constant


RelocInfo (size = 59)
0x4cd2c588  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2c5ac  code target (STUB)  (0x4cd064c0)
0x4cd2c624  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2c648  code target (STUB)  (0x4cd064c0)
0x4cd2c688  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2c6ac  code target (STUB)  (0x4cd064c0)
0x4cd2c6ec  external reference (isolate)  (0x166dc2d0)
0x4cd2c6f0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2c720  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2c744  code target (STUB)  (0x4cd064c0)
0x4cd2c7f4  external reference (isolate)  (0x166dc2d0)
0x4cd2c7f8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2c890  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2c8b4  code target (STUB)  (0x4cd064c0)
0x4cd2c914  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2c938  code target (STUB)  (0x4cd064c0)
0x4cd2c978  external reference (isolate)  (0x166dc2d0)
0x4cd2c97c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2c9ac  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2c9d0  code target (STUB)  (0x4cd064c0)
0x4cd2caa0  external reference (isolate)  (0x166dc2d0)
0x4cd2caa4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2cad8  constant pool (size 184)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 333)
0x4cd2d100     0  movz x2, #0xd2c0
0x4cd2d104     4  movk x2, #0x166d, lsl #16
0x4cd2d108     8  ldp x3, x0, [x2]
0x4cd2d10c    12  adds x16, x3, #0x58 (88)
0x4cd2d110    16  ccmp x16, x0, #nzCv, lo
0x4cd2d114    20  b.hi #+0x64 (addr 0x4cd2d178)
0x4cd2d118    24  str x16, [x2]
0x4cd2d11c    28  orr x3, x3, #0x1
0x4cd2d120    32  ldr x0, pc+200 (addr 0x000000004cd2d1e8)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd2d124    36  stur x0, [x3, #-1]
0x4cd2d128    40  movz x0, #0x900000000
0x4cd2d12c    44  stur x0, [x3, #7]
0x4cd2d130    48  stur x1, [x3, #15]
0x4cd2d134    52  stur cp, [x3, #23]
0x4cd2d138    56  ldr x0, pc+184 (addr 0x000000004cd2d1f0)    ;; object: 0x21004519 <the hole>
0x4cd2d13c    60  stur x0, [x3, #31]
0x4cd2d140    64  ldur x0, [cp, #39]
0x4cd2d144    68  stur x0, [x3, #39]
0x4cd2d148    72  ldr x0, pc+176 (addr 0x000000004cd2d1f8)    ;; object: 0x21004241 <undefined>
0x4cd2d14c    76  stur x0, [x3, #47]
0x4cd2d150    80  ldr x0, pc+176 (addr 0x000000004cd2d200)    ;; object: 0x21004241 <undefined>
0x4cd2d154    84  stur x0, [x3, #55]
0x4cd2d158    88  ldr x0, pc+176 (addr 0x000000004cd2d208)    ;; object: 0x21004241 <undefined>
0x4cd2d15c    92  stur x0, [x3, #63]
0x4cd2d160    96  ldr x0, pc+176 (addr 0x000000004cd2d210)    ;; object: 0x21004241 <undefined>
0x4cd2d164   100  stur x0, [x3, #71]
0x4cd2d168   104  ldr x0, pc+176 (addr 0x000000004cd2d218)    ;; object: 0x21004241 <undefined>
0x4cd2d16c   108  stur x0, [x3, #79]
0x4cd2d170   112  mov x0, x3
0x4cd2d174   116  ret
0x4cd2d178   120  sub csp, jssp, #0x10 (16)
0x4cd2d17c   124  stp fp, lr, [jssp, #-16]!
0x4cd2d180   128  movz fp, #0xa00000000
0x4cd2d184   132  sub csp, jssp, #0x8 (8)
0x4cd2d188   136  str fp, [jssp, #-8]!
0x4cd2d18c   140  add fp, jssp, #0x8 (8)
0x4cd2d190   144  movz x3, #0x0
0x4cd2d194   148  mov x16, lr
0x4cd2d198   152  ldr x17, pc+136 (addr 0x000000004cd2d220)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd2d19c   156  blr x17
0x4cd2d1a0   160  movz x0, #0x5800000000
0x4cd2d1a4   164  movz x10, #0x0
0x4cd2d1a8   168  sub csp, jssp, #0x10 (16)
0x4cd2d1ac   172  stp x10, x0, [jssp, #-16]!
0x4cd2d1b0   176  movz x0, #0x2
0x4cd2d1b4   180  movz x1, #0x5b88
0x4cd2d1b8   184  movk x1, #0xe2, lsl #16
0x4cd2d1bc   188  ldr x16, pc+108 (addr 0x000000004cd2d228)    ;; code: STUB, CEntryStub, minor: 5
0x4cd2d1c0   192  blr x16
0x4cd2d1c4   196  str x0, [jssp, #24]
0x4cd2d1c8   200  ldr x16, pc+104 (addr 0x000000004cd2d230)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd2d1cc   204  blr x16
0x4cd2d1d0   208  ldr lr, [jssp, #16]
0x4cd2d1d4   212  ldp xzr, fp, [jssp], #24
0x4cd2d1d8   216  b #-0xb8 (addr 0x4cd2d120)
0x4cd2d1dc   220  580002df       constant pool begin (num_const = 22)    ;; constant pool
0x4cd2d1e0   224  d63f03e0       constant
0x4cd2d1e4   228  d503201f       constant
0x4cd2d1e8   232  2a806149       constant
0x4cd2d1ec   236  00000000       constant
0x4cd2d1f0   240  21004519       constant
0x4cd2d1f4   244  00000000       constant
0x4cd2d1f8   248  21004241       constant
0x4cd2d1fc   252  00000000       constant
0x4cd2d200   256  21004241       constant
0x4cd2d204   260  00000000       constant
0x4cd2d208   264  21004241       constant
0x4cd2d20c   268  00000000       constant
0x4cd2d210   272  21004241       constant
0x4cd2d214   276  00000000       constant
0x4cd2d218   280  21004241       constant
0x4cd2d21c   284  00000000       constant
0x4cd2d220   288  4cd06820       constant
0x4cd2d224   292  00000000       constant
0x4cd2d228   296  4cd06260       constant
0x4cd2d22c   300  00000000       constant
0x4cd2d230   304  4cd068e0       constant
0x4cd2d234   308  00000000       constant


Safepoints (size = 21)
0x4cd2d1c4   196  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 16)
0x4cd2d120  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd2d138  embedded object  (0x21004519 <the hole>)
0x4cd2d148  embedded object  (0x21004241 <undefined>)
0x4cd2d150  embedded object  (0x21004241 <undefined>)
0x4cd2d158  embedded object  (0x21004241 <undefined>)
0x4cd2d160  embedded object  (0x21004241 <undefined>)
0x4cd2d168  embedded object  (0x21004241 <undefined>)
0x4cd2d198  code target (STUB)  (0x4cd06820)
0x4cd2d1bc  code target (STUB)  (0x4cd06260)
0x4cd2d1c8  code target (STUB)  (0x4cd068e0)
0x4cd2d1dc  constant pool (size 92)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1904)
0x4cd2d2c0     0  adr xzr, #+0x40 (addr 0x4cd2d300)
0x4cd2d2c4     4  adr xzr, #+0x358 (addr 0x4cd2d61c)
0x4cd2d2c8     8  ldr x16, pc+1720 (addr 0x000000004cd2d980)    ;; external reference (store_buffer_top)
0x4cd2d2cc    12  ldr x4, [x16]
0x4cd2d2d0    16  str x6, [x4], #8
0x4cd2d2d4    20  str x4, [x16]
0x4cd2d2d8    24  tst x4, #0x1ffff
0x4cd2d2dc    28  b.eq #+0x8 (addr 0x4cd2d2e4)
0x4cd2d2e0    32  ret
0x4cd2d2e4    36  sub csp, jssp, #0x8 (8)
0x4cd2d2e8    40  str lr, [jssp, #-8]!
0x4cd2d2ec    44  ldr x17, pc+1692 (addr 0x000000004cd2d988)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd2d2f0    48  blr x17
0x4cd2d2f4    52  ldr lr, [jssp], #8
0x4cd2d2f8    56  ret
0x4cd2d2fc    60  ret
0x4cd2d300    64  sub csp, jssp, #0x10 (16)
0x4cd2d304    68  stp x2, x1, [jssp, #-16]!
0x4cd2d308    72  ldr x4, [x6]
0x4cd2d30c    76  and x16, x4, #0xfffffffffff00000
0x4cd2d310    80  ldr x16, [x16, #8]
0x4cd2d314    84  tst x16, #0x18
0x4cd2d318    88  b.eq #+0x1d4 (addr 0x4cd2d4ec)
0x4cd2d31c    92  and x16, x0, #0xfffffffffff00000
0x4cd2d320    96  ldr x16, [x16, #8]
0x4cd2d324   100  tst x16, #0x18
0x4cd2d328   104  b.ne #+0x1c4 (addr 0x4cd2d4ec)
0x4cd2d32c   108  and x4, x0, #0xfffffffffff00000
0x4cd2d330   112  ldr x1, [x4, #104]
0x4cd2d334   116  subs x1, x1, #0x1 (1)
0x4cd2d338   120  str x1, [x4, #104]
0x4cd2d33c   124  b.mi #+0xc4 (addr 0x4cd2d400)
0x4cd2d340   128  ubfx x16, x0, #8, #12
0x4cd2d344   132  and x4, x0, #0xfffffffffff00000
0x4cd2d348   136  add x4, x4, x16, lsl #2
0x4cd2d34c   140  ubfx x1, x0, #3, #5
0x4cd2d350   144  ldr x4, [x4, #360]
0x4cd2d354   148  lsr x4, x4, x1
0x4cd2d358   152  tbz w4, #0, #+0x8 (addr 0x4cd2d360)
0x4cd2d35c   156  tbnz w4, #1, #+0x3c (addr 0x4cd2d398)
0x4cd2d360   160  ldp x2, x1, [jssp], #16
0x4cd2d364   164  ldr x16, pc+1580 (addr 0x000000004cd2d990)    ;; external reference (store_buffer_top)
0x4cd2d368   168  ldr x4, [x16]
0x4cd2d36c   172  str x6, [x4], #8
0x4cd2d370   176  str x4, [x16]
0x4cd2d374   180  tst x4, #0x1ffff
0x4cd2d378   184  b.eq #+0x8 (addr 0x4cd2d380)
0x4cd2d37c   188  ret
0x4cd2d380   192  sub csp, jssp, #0x8 (8)
0x4cd2d384   196  str lr, [jssp, #-8]!
0x4cd2d388   200  ldr x17, pc+1552 (addr 0x000000004cd2d998)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd2d38c   204  blr x17
0x4cd2d390   208  ldr lr, [jssp], #8
0x4cd2d394   212  ret
0x4cd2d398   216  ldr x4, [x6]
0x4cd2d39c   220  sub csp, jssp, #0x10 (16)
0x4cd2d3a0   224  stp x0, x6, [jssp, #-16]!
0x4cd2d3a4   228  ubfx x16, x4, #8, #12
0x4cd2d3a8   232  and x1, x4, #0xfffffffffff00000
0x4cd2d3ac   236  add x1, x1, x16, lsl #2
0x4cd2d3b0   240  ubfx x0, x4, #3, #5
0x4cd2d3b4   244  ldr x6, [x1, #360]
0x4cd2d3b8   248  lsr x6, x6, x0
0x4cd2d3bc   252  tbz w6, #0, #+0x40 (addr 0x4cd2d3fc)
0x4cd2d3c0   256  ldp x0, x6, [jssp], #16
0x4cd2d3c4   260  ldp x2, x1, [jssp], #16
0x4cd2d3c8   264  ldr x16, pc+1496 (addr 0x000000004cd2d9a0)    ;; external reference (store_buffer_top)
0x4cd2d3cc   268  ldr x4, [x16]
0x4cd2d3d0   272  str x6, [x4], #8
0x4cd2d3d4   276  str x4, [x16]
0x4cd2d3d8   280  tst x4, #0x1ffff
0x4cd2d3dc   284  b.eq #+0x8 (addr 0x4cd2d3e4)
0x4cd2d3e0   288  ret
0x4cd2d3e4   292  sub csp, jssp, #0x8 (8)
0x4cd2d3e8   296  str lr, [jssp, #-8]!
0x4cd2d3ec   300  ldr x17, pc+1468 (addr 0x000000004cd2d9a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd2d3f0   304  blr x17
0x4cd2d3f4   308  ldr lr, [jssp], #8
0x4cd2d3f8   312  ret
0x4cd2d3fc   316  ldp x0, x6, [jssp], #16
0x4cd2d400   320  sub csp, jssp, #0x78 (120)
0x4cd2d404   324  stp x14, x15, [jssp, #-32]!
0x4cd2d408   328  stp x18, lr, [jssp, #16]
0x4cd2d40c   332  stp x10, x11, [jssp, #-32]!
0x4cd2d410   336  stp x12, x13, [jssp, #16]
0x4cd2d414   340  stp x6, x7, [jssp, #-32]!
0x4cd2d418   344  stp x8, x9, [jssp, #16]
0x4cd2d41c   348  stp x0, x3, [jssp, #-24]!
0x4cd2d420   352  str x5, [jssp, #16]
0x4cd2d424   356  sub csp, jssp, #0xb0 (176)
0x4cd2d428   360  stp d26, d27, [jssp, #-32]!
0x4cd2d42c   364  stp d28, d29, [jssp, #16]
0x4cd2d430   368  stp d22, d23, [jssp, #-32]!
0x4cd2d434   372  stp d24, d25, [jssp, #16]
0x4cd2d438   376  stp d18, d19, [jssp, #-32]!
0x4cd2d43c   380  stp d20, d21, [jssp, #16]
0x4cd2d440   384  stp d6, d7, [jssp, #-32]!
0x4cd2d444   388  stp d16, d17, [jssp, #16]
0x4cd2d448   392  stp d2, d3, [jssp, #-32]!
0x4cd2d44c   396  stp d4, d5, [jssp, #16]
0x4cd2d450   400  stp d0, d1, [jssp, #-16]!
0x4cd2d454   404  mov x1, x6
0x4cd2d458   408  ldr x2, pc+1368 (addr 0x000000004cd2d9b0)    ;; external reference (isolate)
0x4cd2d45c   412  ldr x16, pc+1372 (addr 0x000000004cd2d9b8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2d460   416  and csp, jssp, #0xfffffffffffffff0
0x4cd2d464   420  blr x16
0x4cd2d468   424  ldp d2, d3, [jssp, #16]
0x4cd2d46c   428  ldp d0, d1, [jssp], #32
0x4cd2d470   432  ldp d6, d7, [jssp, #16]
0x4cd2d474   436  ldp d4, d5, [jssp], #32
0x4cd2d478   440  ldp d18, d19, [jssp, #16]
0x4cd2d47c   444  ldp d16, d17, [jssp], #32
0x4cd2d480   448  ldp d22, d23, [jssp, #16]
0x4cd2d484   452  ldp d20, d21, [jssp], #32
0x4cd2d488   456  ldp d26, d27, [jssp, #16]
0x4cd2d48c   460  ldp d24, d25, [jssp], #32
0x4cd2d490   464  ldp d28, d29, [jssp], #16
0x4cd2d494   468  ldp x5, x6, [jssp, #16]
0x4cd2d498   472  ldp x0, x3, [jssp], #32
0x4cd2d49c   476  ldp x9, x10, [jssp, #16]
0x4cd2d4a0   480  ldp x7, x8, [jssp], #32
0x4cd2d4a4   484  ldp x13, x14, [jssp, #16]
0x4cd2d4a8   488  ldp x11, x12, [jssp], #32
0x4cd2d4ac   492  ldr lr, [jssp, #16]
0x4cd2d4b0   496  ldp x15, x18, [jssp], #24
0x4cd2d4b4   500  ldp x2, x1, [jssp], #16
0x4cd2d4b8   504  ldr x16, pc+1288 (addr 0x000000004cd2d9c0)    ;; external reference (store_buffer_top)
0x4cd2d4bc   508  ldr x4, [x16]
0x4cd2d4c0   512  str x6, [x4], #8
0x4cd2d4c4   516  str x4, [x16]
0x4cd2d4c8   520  tst x4, #0x1ffff
0x4cd2d4cc   524  b.eq #+0x8 (addr 0x4cd2d4d4)
0x4cd2d4d0   528  ret
0x4cd2d4d4   532  sub csp, jssp, #0x8 (8)
0x4cd2d4d8   536  str lr, [jssp, #-8]!
0x4cd2d4dc   540  ldr x17, pc+1260 (addr 0x000000004cd2d9c8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd2d4e0   544  blr x17
0x4cd2d4e4   548  ldr lr, [jssp], #8
0x4cd2d4e8   552  ret
0x4cd2d4ec   556  and x4, x0, #0xfffffffffff00000
0x4cd2d4f0   560  ldr x1, [x4, #104]
0x4cd2d4f4   564  subs x1, x1, #0x1 (1)
0x4cd2d4f8   568  str x1, [x4, #104]
0x4cd2d4fc   572  b.mi #+0x64 (addr 0x4cd2d560)
0x4cd2d500   576  ubfx x16, x0, #8, #12
0x4cd2d504   580  and x4, x0, #0xfffffffffff00000
0x4cd2d508   584  add x4, x4, x16, lsl #2
0x4cd2d50c   588  ubfx x1, x0, #3, #5
0x4cd2d510   592  ldr x4, [x4, #360]
0x4cd2d514   596  lsr x4, x4, x1
0x4cd2d518   600  tbz w4, #0, #+0x8 (addr 0x4cd2d520)
0x4cd2d51c   604  tbnz w4, #1, #+0xc (addr 0x4cd2d528)
0x4cd2d520   608  ldp x2, x1, [jssp], #16
0x4cd2d524   612  ret
0x4cd2d528   616  ldr x4, [x6]
0x4cd2d52c   620  sub csp, jssp, #0x10 (16)
0x4cd2d530   624  stp x0, x6, [jssp, #-16]!
0x4cd2d534   628  ubfx x16, x4, #8, #12
0x4cd2d538   632  and x1, x4, #0xfffffffffff00000
0x4cd2d53c   636  add x1, x1, x16, lsl #2
0x4cd2d540   640  ubfx x0, x4, #3, #5
0x4cd2d544   644  ldr x6, [x1, #360]
0x4cd2d548   648  lsr x6, x6, x0
0x4cd2d54c   652  tbz w6, #0, #+0x10 (addr 0x4cd2d55c)
0x4cd2d550   656  ldp x0, x6, [jssp], #16
0x4cd2d554   660  ldp x2, x1, [jssp], #16
0x4cd2d558   664  ret
0x4cd2d55c   668  ldp x0, x6, [jssp], #16
0x4cd2d560   672  sub csp, jssp, #0x78 (120)
0x4cd2d564   676  stp x14, x15, [jssp, #-32]!
0x4cd2d568   680  stp x18, lr, [jssp, #16]
0x4cd2d56c   684  stp x10, x11, [jssp, #-32]!
0x4cd2d570   688  stp x12, x13, [jssp, #16]
0x4cd2d574   692  stp x6, x7, [jssp, #-32]!
0x4cd2d578   696  stp x8, x9, [jssp, #16]
0x4cd2d57c   700  stp x0, x3, [jssp, #-24]!
0x4cd2d580   704  str x5, [jssp, #16]
0x4cd2d584   708  sub csp, jssp, #0xb0 (176)
0x4cd2d588   712  stp d26, d27, [jssp, #-32]!
0x4cd2d58c   716  stp d28, d29, [jssp, #16]
0x4cd2d590   720  stp d22, d23, [jssp, #-32]!
0x4cd2d594   724  stp d24, d25, [jssp, #16]
0x4cd2d598   728  stp d18, d19, [jssp, #-32]!
0x4cd2d59c   732  stp d20, d21, [jssp, #16]
0x4cd2d5a0   736  stp d6, d7, [jssp, #-32]!
0x4cd2d5a4   740  stp d16, d17, [jssp, #16]
0x4cd2d5a8   744  stp d2, d3, [jssp, #-32]!
0x4cd2d5ac   748  stp d4, d5, [jssp, #16]
0x4cd2d5b0   752  stp d0, d1, [jssp, #-16]!
0x4cd2d5b4   756  mov x1, x6
0x4cd2d5b8   760  ldr x2, pc+1048 (addr 0x000000004cd2d9d0)    ;; external reference (isolate)
0x4cd2d5bc   764  ldr x16, pc+1052 (addr 0x000000004cd2d9d8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2d5c0   768  and csp, jssp, #0xfffffffffffffff0
0x4cd2d5c4   772  blr x16
0x4cd2d5c8   776  ldp d2, d3, [jssp, #16]
0x4cd2d5cc   780  ldp d0, d1, [jssp], #32
0x4cd2d5d0   784  ldp d6, d7, [jssp, #16]
0x4cd2d5d4   788  ldp d4, d5, [jssp], #32
0x4cd2d5d8   792  ldp d18, d19, [jssp, #16]
0x4cd2d5dc   796  ldp d16, d17, [jssp], #32
0x4cd2d5e0   800  ldp d22, d23, [jssp, #16]
0x4cd2d5e4   804  ldp d20, d21, [jssp], #32
0x4cd2d5e8   808  ldp d26, d27, [jssp, #16]
0x4cd2d5ec   812  ldp d24, d25, [jssp], #32
0x4cd2d5f0   816  ldp d28, d29, [jssp], #16
0x4cd2d5f4   820  ldp x5, x6, [jssp, #16]
0x4cd2d5f8   824  ldp x0, x3, [jssp], #32
0x4cd2d5fc   828  ldp x9, x10, [jssp, #16]
0x4cd2d600   832  ldp x7, x8, [jssp], #32
0x4cd2d604   836  ldp x13, x14, [jssp, #16]
0x4cd2d608   840  ldp x11, x12, [jssp], #32
0x4cd2d60c   844  ldr lr, [jssp, #16]
0x4cd2d610   848  ldp x15, x18, [jssp], #24
0x4cd2d614   852  ldp x2, x1, [jssp], #16
0x4cd2d618   856  ret
0x4cd2d61c   860  sub csp, jssp, #0x10 (16)
0x4cd2d620   864  stp x2, x1, [jssp, #-16]!
0x4cd2d624   868  ldr x4, [x6]
0x4cd2d628   872  and x16, x4, #0xfffffffffff00000
0x4cd2d62c   876  ldr x16, [x16, #8]
0x4cd2d630   880  tst x16, #0x18
0x4cd2d634   884  b.eq #+0x1f4 (addr 0x4cd2d828)
0x4cd2d638   888  and x16, x0, #0xfffffffffff00000
0x4cd2d63c   892  ldr x16, [x16, #8]
0x4cd2d640   896  tst x16, #0x18
0x4cd2d644   900  b.ne #+0x1e4 (addr 0x4cd2d828)
0x4cd2d648   904  and x4, x0, #0xfffffffffff00000
0x4cd2d64c   908  ldr x1, [x4, #104]
0x4cd2d650   912  subs x1, x1, #0x1 (1)
0x4cd2d654   916  str x1, [x4, #104]
0x4cd2d658   920  b.mi #+0xe4 (addr 0x4cd2d73c)
0x4cd2d65c   924  ubfx x16, x0, #8, #12
0x4cd2d660   928  and x4, x0, #0xfffffffffff00000
0x4cd2d664   932  add x4, x4, x16, lsl #2
0x4cd2d668   936  ubfx x1, x0, #3, #5
0x4cd2d66c   940  ldr x4, [x4, #360]
0x4cd2d670   944  lsr x4, x4, x1
0x4cd2d674   948  tbz w4, #0, #+0x8 (addr 0x4cd2d67c)
0x4cd2d678   952  tbnz w4, #1, #+0x3c (addr 0x4cd2d6b4)
0x4cd2d67c   956  ldp x2, x1, [jssp], #16
0x4cd2d680   960  ldr x16, pc+864 (addr 0x000000004cd2d9e0)    ;; external reference (store_buffer_top)
0x4cd2d684   964  ldr x4, [x16]
0x4cd2d688   968  str x6, [x4], #8
0x4cd2d68c   972  str x4, [x16]
0x4cd2d690   976  tst x4, #0x1ffff
0x4cd2d694   980  b.eq #+0x8 (addr 0x4cd2d69c)
0x4cd2d698   984  ret
0x4cd2d69c   988  sub csp, jssp, #0x8 (8)
0x4cd2d6a0   992  str lr, [jssp, #-8]!
0x4cd2d6a4   996  ldr x17, pc+836 (addr 0x000000004cd2d9e8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd2d6a8  1000  blr x17
0x4cd2d6ac  1004  ldr lr, [jssp], #8
0x4cd2d6b0  1008  ret
0x4cd2d6b4  1012  ldr x4, [x6]
0x4cd2d6b8  1016  and x1, x4, #0xfffffffffff00000
0x4cd2d6bc  1020  ldr x1, [x1, #8]
0x4cd2d6c0  1024  tbz w1, #6, #+0x18 (addr 0x4cd2d6d8)
0x4cd2d6c4  1028  and x1, x0, #0xfffffffffff00000
0x4cd2d6c8  1032  ldr x1, [x1, #8]
0x4cd2d6cc  1036  movz x16, #0x58
0x4cd2d6d0  1040  tst x1, x16
0x4cd2d6d4  1044  b.eq #+0x68 (addr 0x4cd2d73c)
0x4cd2d6d8  1048  sub csp, jssp, #0x10 (16)
0x4cd2d6dc  1052  stp x0, x6, [jssp, #-16]!
0x4cd2d6e0  1056  ubfx x16, x4, #8, #12
0x4cd2d6e4  1060  and x1, x4, #0xfffffffffff00000
0x4cd2d6e8  1064  add x1, x1, x16, lsl #2
0x4cd2d6ec  1068  ubfx x0, x4, #3, #5
0x4cd2d6f0  1072  ldr x6, [x1, #360]
0x4cd2d6f4  1076  lsr x6, x6, x0
0x4cd2d6f8  1080  tbz w6, #0, #+0x40 (addr 0x4cd2d738)
0x4cd2d6fc  1084  ldp x0, x6, [jssp], #16
0x4cd2d700  1088  ldp x2, x1, [jssp], #16
0x4cd2d704  1092  ldr x16, pc+748 (addr 0x000000004cd2d9f0)    ;; external reference (store_buffer_top)
0x4cd2d708  1096  ldr x4, [x16]
0x4cd2d70c  1100  str x6, [x4], #8
0x4cd2d710  1104  str x4, [x16]
0x4cd2d714  1108  tst x4, #0x1ffff
0x4cd2d718  1112  b.eq #+0x8 (addr 0x4cd2d720)
0x4cd2d71c  1116  ret
0x4cd2d720  1120  sub csp, jssp, #0x8 (8)
0x4cd2d724  1124  str lr, [jssp, #-8]!
0x4cd2d728  1128  ldr x17, pc+720 (addr 0x000000004cd2d9f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd2d72c  1132  blr x17
0x4cd2d730  1136  ldr lr, [jssp], #8
0x4cd2d734  1140  ret
0x4cd2d738  1144  ldp x0, x6, [jssp], #16
0x4cd2d73c  1148  sub csp, jssp, #0x78 (120)
0x4cd2d740  1152  stp x14, x15, [jssp, #-32]!
0x4cd2d744  1156  stp x18, lr, [jssp, #16]
0x4cd2d748  1160  stp x10, x11, [jssp, #-32]!
0x4cd2d74c  1164  stp x12, x13, [jssp, #16]
0x4cd2d750  1168  stp x6, x7, [jssp, #-32]!
0x4cd2d754  1172  stp x8, x9, [jssp, #16]
0x4cd2d758  1176  stp x0, x3, [jssp, #-24]!
0x4cd2d75c  1180  str x5, [jssp, #16]
0x4cd2d760  1184  sub csp, jssp, #0xb0 (176)
0x4cd2d764  1188  stp d26, d27, [jssp, #-32]!
0x4cd2d768  1192  stp d28, d29, [jssp, #16]
0x4cd2d76c  1196  stp d22, d23, [jssp, #-32]!
0x4cd2d770  1200  stp d24, d25, [jssp, #16]
0x4cd2d774  1204  stp d18, d19, [jssp, #-32]!
0x4cd2d778  1208  stp d20, d21, [jssp, #16]
0x4cd2d77c  1212  stp d6, d7, [jssp, #-32]!
0x4cd2d780  1216  stp d16, d17, [jssp, #16]
0x4cd2d784  1220  stp d2, d3, [jssp, #-32]!
0x4cd2d788  1224  stp d4, d5, [jssp, #16]
0x4cd2d78c  1228  stp d0, d1, [jssp, #-16]!
0x4cd2d790  1232  mov x1, x6
0x4cd2d794  1236  ldr x2, pc+620 (addr 0x000000004cd2da00)    ;; external reference (isolate)
0x4cd2d798  1240  ldr x16, pc+624 (addr 0x000000004cd2da08)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2d79c  1244  and csp, jssp, #0xfffffffffffffff0
0x4cd2d7a0  1248  blr x16
0x4cd2d7a4  1252  ldp d2, d3, [jssp, #16]
0x4cd2d7a8  1256  ldp d0, d1, [jssp], #32
0x4cd2d7ac  1260  ldp d6, d7, [jssp, #16]
0x4cd2d7b0  1264  ldp d4, d5, [jssp], #32
0x4cd2d7b4  1268  ldp d18, d19, [jssp, #16]
0x4cd2d7b8  1272  ldp d16, d17, [jssp], #32
0x4cd2d7bc  1276  ldp d22, d23, [jssp, #16]
0x4cd2d7c0  1280  ldp d20, d21, [jssp], #32
0x4cd2d7c4  1284  ldp d26, d27, [jssp, #16]
0x4cd2d7c8  1288  ldp d24, d25, [jssp], #32
0x4cd2d7cc  1292  ldp d28, d29, [jssp], #16
0x4cd2d7d0  1296  ldp x5, x6, [jssp, #16]
0x4cd2d7d4  1300  ldp x0, x3, [jssp], #32
0x4cd2d7d8  1304  ldp x9, x10, [jssp, #16]
0x4cd2d7dc  1308  ldp x7, x8, [jssp], #32
0x4cd2d7e0  1312  ldp x13, x14, [jssp, #16]
0x4cd2d7e4  1316  ldp x11, x12, [jssp], #32
0x4cd2d7e8  1320  ldr lr, [jssp, #16]
0x4cd2d7ec  1324  ldp x15, x18, [jssp], #24
0x4cd2d7f0  1328  ldp x2, x1, [jssp], #16
0x4cd2d7f4  1332  ldr x16, pc+540 (addr 0x000000004cd2da10)    ;; external reference (store_buffer_top)
0x4cd2d7f8  1336  ldr x4, [x16]
0x4cd2d7fc  1340  str x6, [x4], #8
0x4cd2d800  1344  str x4, [x16]
0x4cd2d804  1348  tst x4, #0x1ffff
0x4cd2d808  1352  b.eq #+0x8 (addr 0x4cd2d810)
0x4cd2d80c  1356  ret
0x4cd2d810  1360  sub csp, jssp, #0x8 (8)
0x4cd2d814  1364  str lr, [jssp, #-8]!
0x4cd2d818  1368  ldr x17, pc+512 (addr 0x000000004cd2da18)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd2d81c  1372  blr x17
0x4cd2d820  1376  ldr lr, [jssp], #8
0x4cd2d824  1380  ret
0x4cd2d828  1384  and x4, x0, #0xfffffffffff00000
0x4cd2d82c  1388  ldr x1, [x4, #104]
0x4cd2d830  1392  subs x1, x1, #0x1 (1)
0x4cd2d834  1396  str x1, [x4, #104]
0x4cd2d838  1400  b.mi #+0x84 (addr 0x4cd2d8bc)
0x4cd2d83c  1404  ubfx x16, x0, #8, #12
0x4cd2d840  1408  and x4, x0, #0xfffffffffff00000
0x4cd2d844  1412  add x4, x4, x16, lsl #2
0x4cd2d848  1416  ubfx x1, x0, #3, #5
0x4cd2d84c  1420  ldr x4, [x4, #360]
0x4cd2d850  1424  lsr x4, x4, x1
0x4cd2d854  1428  tbz w4, #0, #+0x8 (addr 0x4cd2d85c)
0x4cd2d858  1432  tbnz w4, #1, #+0xc (addr 0x4cd2d864)
0x4cd2d85c  1436  ldp x2, x1, [jssp], #16
0x4cd2d860  1440  ret
0x4cd2d864  1444  ldr x4, [x6]
0x4cd2d868  1448  and x1, x4, #0xfffffffffff00000
0x4cd2d86c  1452  ldr x1, [x1, #8]
0x4cd2d870  1456  tbz w1, #6, #+0x18 (addr 0x4cd2d888)
0x4cd2d874  1460  and x1, x0, #0xfffffffffff00000
0x4cd2d878  1464  ldr x1, [x1, #8]
0x4cd2d87c  1468  movz x16, #0x58
0x4cd2d880  1472  tst x1, x16
0x4cd2d884  1476  b.eq #+0x38 (addr 0x4cd2d8bc)
0x4cd2d888  1480  sub csp, jssp, #0x10 (16)
0x4cd2d88c  1484  stp x0, x6, [jssp, #-16]!
0x4cd2d890  1488  ubfx x16, x4, #8, #12
0x4cd2d894  1492  and x1, x4, #0xfffffffffff00000
0x4cd2d898  1496  add x1, x1, x16, lsl #2
0x4cd2d89c  1500  ubfx x0, x4, #3, #5
0x4cd2d8a0  1504  ldr x6, [x1, #360]
0x4cd2d8a4  1508  lsr x6, x6, x0
0x4cd2d8a8  1512  tbz w6, #0, #+0x10 (addr 0x4cd2d8b8)
0x4cd2d8ac  1516  ldp x0, x6, [jssp], #16
0x4cd2d8b0  1520  ldp x2, x1, [jssp], #16
0x4cd2d8b4  1524  ret
0x4cd2d8b8  1528  ldp x0, x6, [jssp], #16
0x4cd2d8bc  1532  sub csp, jssp, #0x78 (120)
0x4cd2d8c0  1536  stp x14, x15, [jssp, #-32]!
0x4cd2d8c4  1540  stp x18, lr, [jssp, #16]
0x4cd2d8c8  1544  stp x10, x11, [jssp, #-32]!
0x4cd2d8cc  1548  stp x12, x13, [jssp, #16]
0x4cd2d8d0  1552  stp x6, x7, [jssp, #-32]!
0x4cd2d8d4  1556  stp x8, x9, [jssp, #16]
0x4cd2d8d8  1560  stp x0, x3, [jssp, #-24]!
0x4cd2d8dc  1564  str x5, [jssp, #16]
0x4cd2d8e0  1568  sub csp, jssp, #0xb0 (176)
0x4cd2d8e4  1572  stp d26, d27, [jssp, #-32]!
0x4cd2d8e8  1576  stp d28, d29, [jssp, #16]
0x4cd2d8ec  1580  stp d22, d23, [jssp, #-32]!
0x4cd2d8f0  1584  stp d24, d25, [jssp, #16]
0x4cd2d8f4  1588  stp d18, d19, [jssp, #-32]!
0x4cd2d8f8  1592  stp d20, d21, [jssp, #16]
0x4cd2d8fc  1596  stp d6, d7, [jssp, #-32]!
0x4cd2d900  1600  stp d16, d17, [jssp, #16]
0x4cd2d904  1604  stp d2, d3, [jssp, #-32]!
0x4cd2d908  1608  stp d4, d5, [jssp, #16]
0x4cd2d90c  1612  stp d0, d1, [jssp, #-16]!
0x4cd2d910  1616  mov x1, x6
0x4cd2d914  1620  ldr x2, pc+268 (addr 0x000000004cd2da20)    ;; external reference (isolate)
0x4cd2d918  1624  ldr x16, pc+272 (addr 0x000000004cd2da28)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2d91c  1628  and csp, jssp, #0xfffffffffffffff0
0x4cd2d920  1632  blr x16
0x4cd2d924  1636  ldp d2, d3, [jssp, #16]
0x4cd2d928  1640  ldp d0, d1, [jssp], #32
0x4cd2d92c  1644  ldp d6, d7, [jssp, #16]
0x4cd2d930  1648  ldp d4, d5, [jssp], #32
0x4cd2d934  1652  ldp d18, d19, [jssp, #16]
0x4cd2d938  1656  ldp d16, d17, [jssp], #32
0x4cd2d93c  1660  ldp d22, d23, [jssp, #16]
0x4cd2d940  1664  ldp d20, d21, [jssp], #32
0x4cd2d944  1668  ldp d26, d27, [jssp, #16]
0x4cd2d948  1672  ldp d24, d25, [jssp], #32
0x4cd2d94c  1676  ldp d28, d29, [jssp], #16
0x4cd2d950  1680  ldp x5, x6, [jssp, #16]
0x4cd2d954  1684  ldp x0, x3, [jssp], #32
0x4cd2d958  1688  ldp x9, x10, [jssp, #16]
0x4cd2d95c  1692  ldp x7, x8, [jssp], #32
0x4cd2d960  1696  ldp x13, x14, [jssp, #16]
0x4cd2d964  1700  ldp x11, x12, [jssp], #32
0x4cd2d968  1704  ldr lr, [jssp, #16]
0x4cd2d96c  1708  ldp x15, x18, [jssp], #24
0x4cd2d970  1712  ldp x2, x1, [jssp], #16
0x4cd2d974  1716  ret
0x4cd2d978  1720  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd2d97c  1724  d63f03e0       constant
0x4cd2d980  1728  166dd8c0       constant
0x4cd2d984  1732  00000000       constant
0x4cd2d988  1736  4cd065a0       constant
0x4cd2d98c  1740  00000000       constant
0x4cd2d990  1744  166dd8c0       constant
0x4cd2d994  1748  00000000       constant
0x4cd2d998  1752  4cd065a0       constant
0x4cd2d99c  1756  00000000       constant
0x4cd2d9a0  1760  166dd8c0       constant
0x4cd2d9a4  1764  00000000       constant
0x4cd2d9a8  1768  4cd065a0       constant
0x4cd2d9ac  1772  00000000       constant
0x4cd2d9b0  1776  166dc2d0       constant
0x4cd2d9b4  1780  00000000       constant
0x4cd2d9b8  1784  00c2d958       constant
0x4cd2d9bc  1788  00000000       constant
0x4cd2d9c0  1792  166dd8c0       constant
0x4cd2d9c4  1796  00000000       constant
0x4cd2d9c8  1800  4cd065a0       constant
0x4cd2d9cc  1804  00000000       constant
0x4cd2d9d0  1808  166dc2d0       constant
0x4cd2d9d4  1812  00000000       constant
0x4cd2d9d8  1816  00c2d958       constant
0x4cd2d9dc  1820  00000000       constant
0x4cd2d9e0  1824  166dd8c0       constant
0x4cd2d9e4  1828  00000000       constant
0x4cd2d9e8  1832  4cd065a0       constant
0x4cd2d9ec  1836  00000000       constant
0x4cd2d9f0  1840  166dd8c0       constant
0x4cd2d9f4  1844  00000000       constant
0x4cd2d9f8  1848  4cd065a0       constant
0x4cd2d9fc  1852  00000000       constant
0x4cd2da00  1856  166dc2d0       constant
0x4cd2da04  1860  00000000       constant
0x4cd2da08  1864  00c2d958       constant
0x4cd2da0c  1868  00000000       constant
0x4cd2da10  1872  166dd8c0       constant
0x4cd2da14  1876  00000000       constant
0x4cd2da18  1880  4cd065a0       constant
0x4cd2da1c  1884  00000000       constant
0x4cd2da20  1888  166dc2d0       constant
0x4cd2da24  1892  00000000       constant
0x4cd2da28  1896  00c2d958       constant
0x4cd2da2c  1900  00000000       constant


RelocInfo (size = 65)
0x4cd2d2c8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2d2ec  code target (STUB)  (0x4cd065a0)
0x4cd2d364  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2d388  code target (STUB)  (0x4cd065a0)
0x4cd2d3c8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2d3ec  code target (STUB)  (0x4cd065a0)
0x4cd2d458  external reference (isolate)  (0x166dc2d0)
0x4cd2d45c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2d4b8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2d4dc  code target (STUB)  (0x4cd065a0)
0x4cd2d5b8  external reference (isolate)  (0x166dc2d0)
0x4cd2d5bc  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2d680  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2d6a4  code target (STUB)  (0x4cd065a0)
0x4cd2d704  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2d728  code target (STUB)  (0x4cd065a0)
0x4cd2d794  external reference (isolate)  (0x166dc2d0)
0x4cd2d798  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2d7f4  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2d818  code target (STUB)  (0x4cd065a0)
0x4cd2d914  external reference (isolate)  (0x166dc2d0)
0x4cd2d918  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2d978  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1904)
0x4cd2daa0     0  adr xzr, #+0x40 (addr 0x4cd2dae0)
0x4cd2daa4     4  adr xzr, #+0x358 (addr 0x4cd2ddfc)
0x4cd2daa8     8  ldr x16, pc+1720 (addr 0x000000004cd2e160)    ;; external reference (store_buffer_top)
0x4cd2daac    12  ldr x1, [x16]
0x4cd2dab0    16  str x2, [x1], #8
0x4cd2dab4    20  str x1, [x16]
0x4cd2dab8    24  tst x1, #0x1ffff
0x4cd2dabc    28  b.eq #+0x8 (addr 0x4cd2dac4)
0x4cd2dac0    32  ret
0x4cd2dac4    36  sub csp, jssp, #0x8 (8)
0x4cd2dac8    40  str lr, [jssp, #-8]!
0x4cd2dacc    44  ldr x17, pc+1692 (addr 0x000000004cd2e168)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd2dad0    48  blr x17
0x4cd2dad4    52  ldr lr, [jssp], #8
0x4cd2dad8    56  ret
0x4cd2dadc    60  ret
0x4cd2dae0    64  sub csp, jssp, #0x10 (16)
0x4cd2dae4    68  stp x4, x3, [jssp, #-16]!
0x4cd2dae8    72  ldr x1, [x2]
0x4cd2daec    76  and x16, x1, #0xfffffffffff00000
0x4cd2daf0    80  ldr x16, [x16, #8]
0x4cd2daf4    84  tst x16, #0x18
0x4cd2daf8    88  b.eq #+0x1d4 (addr 0x4cd2dccc)
0x4cd2dafc    92  and x16, x0, #0xfffffffffff00000
0x4cd2db00    96  ldr x16, [x16, #8]
0x4cd2db04   100  tst x16, #0x18
0x4cd2db08   104  b.ne #+0x1c4 (addr 0x4cd2dccc)
0x4cd2db0c   108  and x1, x0, #0xfffffffffff00000
0x4cd2db10   112  ldr x3, [x1, #104]
0x4cd2db14   116  subs x3, x3, #0x1 (1)
0x4cd2db18   120  str x3, [x1, #104]
0x4cd2db1c   124  b.mi #+0xc4 (addr 0x4cd2dbe0)
0x4cd2db20   128  ubfx x16, x0, #8, #12
0x4cd2db24   132  and x1, x0, #0xfffffffffff00000
0x4cd2db28   136  add x1, x1, x16, lsl #2
0x4cd2db2c   140  ubfx x3, x0, #3, #5
0x4cd2db30   144  ldr x1, [x1, #360]
0x4cd2db34   148  lsr x1, x1, x3
0x4cd2db38   152  tbz w1, #0, #+0x8 (addr 0x4cd2db40)
0x4cd2db3c   156  tbnz w1, #1, #+0x3c (addr 0x4cd2db78)
0x4cd2db40   160  ldp x4, x3, [jssp], #16
0x4cd2db44   164  ldr x16, pc+1580 (addr 0x000000004cd2e170)    ;; external reference (store_buffer_top)
0x4cd2db48   168  ldr x1, [x16]
0x4cd2db4c   172  str x2, [x1], #8
0x4cd2db50   176  str x1, [x16]
0x4cd2db54   180  tst x1, #0x1ffff
0x4cd2db58   184  b.eq #+0x8 (addr 0x4cd2db60)
0x4cd2db5c   188  ret
0x4cd2db60   192  sub csp, jssp, #0x8 (8)
0x4cd2db64   196  str lr, [jssp, #-8]!
0x4cd2db68   200  ldr x17, pc+1552 (addr 0x000000004cd2e178)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd2db6c   204  blr x17
0x4cd2db70   208  ldr lr, [jssp], #8
0x4cd2db74   212  ret
0x4cd2db78   216  ldr x1, [x2]
0x4cd2db7c   220  sub csp, jssp, #0x10 (16)
0x4cd2db80   224  stp x0, x2, [jssp, #-16]!
0x4cd2db84   228  ubfx x16, x1, #8, #12
0x4cd2db88   232  and x3, x1, #0xfffffffffff00000
0x4cd2db8c   236  add x3, x3, x16, lsl #2
0x4cd2db90   240  ubfx x0, x1, #3, #5
0x4cd2db94   244  ldr x2, [x3, #360]
0x4cd2db98   248  lsr x2, x2, x0
0x4cd2db9c   252  tbz w2, #0, #+0x40 (addr 0x4cd2dbdc)
0x4cd2dba0   256  ldp x0, x2, [jssp], #16
0x4cd2dba4   260  ldp x4, x3, [jssp], #16
0x4cd2dba8   264  ldr x16, pc+1496 (addr 0x000000004cd2e180)    ;; external reference (store_buffer_top)
0x4cd2dbac   268  ldr x1, [x16]
0x4cd2dbb0   272  str x2, [x1], #8
0x4cd2dbb4   276  str x1, [x16]
0x4cd2dbb8   280  tst x1, #0x1ffff
0x4cd2dbbc   284  b.eq #+0x8 (addr 0x4cd2dbc4)
0x4cd2dbc0   288  ret
0x4cd2dbc4   292  sub csp, jssp, #0x8 (8)
0x4cd2dbc8   296  str lr, [jssp, #-8]!
0x4cd2dbcc   300  ldr x17, pc+1468 (addr 0x000000004cd2e188)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd2dbd0   304  blr x17
0x4cd2dbd4   308  ldr lr, [jssp], #8
0x4cd2dbd8   312  ret
0x4cd2dbdc   316  ldp x0, x2, [jssp], #16
0x4cd2dbe0   320  sub csp, jssp, #0x78 (120)
0x4cd2dbe4   324  stp x14, x15, [jssp, #-32]!
0x4cd2dbe8   328  stp x18, lr, [jssp, #16]
0x4cd2dbec   332  stp x10, x11, [jssp, #-32]!
0x4cd2dbf0   336  stp x12, x13, [jssp, #16]
0x4cd2dbf4   340  stp x6, x7, [jssp, #-32]!
0x4cd2dbf8   344  stp x8, x9, [jssp, #16]
0x4cd2dbfc   348  stp x0, x2, [jssp, #-24]!
0x4cd2dc00   352  str x5, [jssp, #16]
0x4cd2dc04   356  sub csp, jssp, #0xb0 (176)
0x4cd2dc08   360  stp d26, d27, [jssp, #-32]!
0x4cd2dc0c   364  stp d28, d29, [jssp, #16]
0x4cd2dc10   368  stp d22, d23, [jssp, #-32]!
0x4cd2dc14   372  stp d24, d25, [jssp, #16]
0x4cd2dc18   376  stp d18, d19, [jssp, #-32]!
0x4cd2dc1c   380  stp d20, d21, [jssp, #16]
0x4cd2dc20   384  stp d6, d7, [jssp, #-32]!
0x4cd2dc24   388  stp d16, d17, [jssp, #16]
0x4cd2dc28   392  stp d2, d3, [jssp, #-32]!
0x4cd2dc2c   396  stp d4, d5, [jssp, #16]
0x4cd2dc30   400  stp d0, d1, [jssp, #-16]!
0x4cd2dc34   404  mov x1, x2
0x4cd2dc38   408  ldr x2, pc+1368 (addr 0x000000004cd2e190)    ;; external reference (isolate)
0x4cd2dc3c   412  ldr x16, pc+1372 (addr 0x000000004cd2e198)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2dc40   416  and csp, jssp, #0xfffffffffffffff0
0x4cd2dc44   420  blr x16
0x4cd2dc48   424  ldp d2, d3, [jssp, #16]
0x4cd2dc4c   428  ldp d0, d1, [jssp], #32
0x4cd2dc50   432  ldp d6, d7, [jssp, #16]
0x4cd2dc54   436  ldp d4, d5, [jssp], #32
0x4cd2dc58   440  ldp d18, d19, [jssp, #16]
0x4cd2dc5c   444  ldp d16, d17, [jssp], #32
0x4cd2dc60   448  ldp d22, d23, [jssp, #16]
0x4cd2dc64   452  ldp d20, d21, [jssp], #32
0x4cd2dc68   456  ldp d26, d27, [jssp, #16]
0x4cd2dc6c   460  ldp d24, d25, [jssp], #32
0x4cd2dc70   464  ldp d28, d29, [jssp], #16
0x4cd2dc74   468  ldp x5, x6, [jssp, #16]
0x4cd2dc78   472  ldp x0, x2, [jssp], #32
0x4cd2dc7c   476  ldp x9, x10, [jssp, #16]
0x4cd2dc80   480  ldp x7, x8, [jssp], #32
0x4cd2dc84   484  ldp x13, x14, [jssp, #16]
0x4cd2dc88   488  ldp x11, x12, [jssp], #32
0x4cd2dc8c   492  ldr lr, [jssp, #16]
0x4cd2dc90   496  ldp x15, x18, [jssp], #24
0x4cd2dc94   500  ldp x4, x3, [jssp], #16
0x4cd2dc98   504  ldr x16, pc+1288 (addr 0x000000004cd2e1a0)    ;; external reference (store_buffer_top)
0x4cd2dc9c   508  ldr x1, [x16]
0x4cd2dca0   512  str x2, [x1], #8
0x4cd2dca4   516  str x1, [x16]
0x4cd2dca8   520  tst x1, #0x1ffff
0x4cd2dcac   524  b.eq #+0x8 (addr 0x4cd2dcb4)
0x4cd2dcb0   528  ret
0x4cd2dcb4   532  sub csp, jssp, #0x8 (8)
0x4cd2dcb8   536  str lr, [jssp, #-8]!
0x4cd2dcbc   540  ldr x17, pc+1260 (addr 0x000000004cd2e1a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd2dcc0   544  blr x17
0x4cd2dcc4   548  ldr lr, [jssp], #8
0x4cd2dcc8   552  ret
0x4cd2dccc   556  and x1, x0, #0xfffffffffff00000
0x4cd2dcd0   560  ldr x3, [x1, #104]
0x4cd2dcd4   564  subs x3, x3, #0x1 (1)
0x4cd2dcd8   568  str x3, [x1, #104]
0x4cd2dcdc   572  b.mi #+0x64 (addr 0x4cd2dd40)
0x4cd2dce0   576  ubfx x16, x0, #8, #12
0x4cd2dce4   580  and x1, x0, #0xfffffffffff00000
0x4cd2dce8   584  add x1, x1, x16, lsl #2
0x4cd2dcec   588  ubfx x3, x0, #3, #5
0x4cd2dcf0   592  ldr x1, [x1, #360]
0x4cd2dcf4   596  lsr x1, x1, x3
0x4cd2dcf8   600  tbz w1, #0, #+0x8 (addr 0x4cd2dd00)
0x4cd2dcfc   604  tbnz w1, #1, #+0xc (addr 0x4cd2dd08)
0x4cd2dd00   608  ldp x4, x3, [jssp], #16
0x4cd2dd04   612  ret
0x4cd2dd08   616  ldr x1, [x2]
0x4cd2dd0c   620  sub csp, jssp, #0x10 (16)
0x4cd2dd10   624  stp x0, x2, [jssp, #-16]!
0x4cd2dd14   628  ubfx x16, x1, #8, #12
0x4cd2dd18   632  and x3, x1, #0xfffffffffff00000
0x4cd2dd1c   636  add x3, x3, x16, lsl #2
0x4cd2dd20   640  ubfx x0, x1, #3, #5
0x4cd2dd24   644  ldr x2, [x3, #360]
0x4cd2dd28   648  lsr x2, x2, x0
0x4cd2dd2c   652  tbz w2, #0, #+0x10 (addr 0x4cd2dd3c)
0x4cd2dd30   656  ldp x0, x2, [jssp], #16
0x4cd2dd34   660  ldp x4, x3, [jssp], #16
0x4cd2dd38   664  ret
0x4cd2dd3c   668  ldp x0, x2, [jssp], #16
0x4cd2dd40   672  sub csp, jssp, #0x78 (120)
0x4cd2dd44   676  stp x14, x15, [jssp, #-32]!
0x4cd2dd48   680  stp x18, lr, [jssp, #16]
0x4cd2dd4c   684  stp x10, x11, [jssp, #-32]!
0x4cd2dd50   688  stp x12, x13, [jssp, #16]
0x4cd2dd54   692  stp x6, x7, [jssp, #-32]!
0x4cd2dd58   696  stp x8, x9, [jssp, #16]
0x4cd2dd5c   700  stp x0, x2, [jssp, #-24]!
0x4cd2dd60   704  str x5, [jssp, #16]
0x4cd2dd64   708  sub csp, jssp, #0xb0 (176)
0x4cd2dd68   712  stp d26, d27, [jssp, #-32]!
0x4cd2dd6c   716  stp d28, d29, [jssp, #16]
0x4cd2dd70   720  stp d22, d23, [jssp, #-32]!
0x4cd2dd74   724  stp d24, d25, [jssp, #16]
0x4cd2dd78   728  stp d18, d19, [jssp, #-32]!
0x4cd2dd7c   732  stp d20, d21, [jssp, #16]
0x4cd2dd80   736  stp d6, d7, [jssp, #-32]!
0x4cd2dd84   740  stp d16, d17, [jssp, #16]
0x4cd2dd88   744  stp d2, d3, [jssp, #-32]!
0x4cd2dd8c   748  stp d4, d5, [jssp, #16]
0x4cd2dd90   752  stp d0, d1, [jssp, #-16]!
0x4cd2dd94   756  mov x1, x2
0x4cd2dd98   760  ldr x2, pc+1048 (addr 0x000000004cd2e1b0)    ;; external reference (isolate)
0x4cd2dd9c   764  ldr x16, pc+1052 (addr 0x000000004cd2e1b8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2dda0   768  and csp, jssp, #0xfffffffffffffff0
0x4cd2dda4   772  blr x16
0x4cd2dda8   776  ldp d2, d3, [jssp, #16]
0x4cd2ddac   780  ldp d0, d1, [jssp], #32
0x4cd2ddb0   784  ldp d6, d7, [jssp, #16]
0x4cd2ddb4   788  ldp d4, d5, [jssp], #32
0x4cd2ddb8   792  ldp d18, d19, [jssp, #16]
0x4cd2ddbc   796  ldp d16, d17, [jssp], #32
0x4cd2ddc0   800  ldp d22, d23, [jssp, #16]
0x4cd2ddc4   804  ldp d20, d21, [jssp], #32
0x4cd2ddc8   808  ldp d26, d27, [jssp, #16]
0x4cd2ddcc   812  ldp d24, d25, [jssp], #32
0x4cd2ddd0   816  ldp d28, d29, [jssp], #16
0x4cd2ddd4   820  ldp x5, x6, [jssp, #16]
0x4cd2ddd8   824  ldp x0, x2, [jssp], #32
0x4cd2dddc   828  ldp x9, x10, [jssp, #16]
0x4cd2dde0   832  ldp x7, x8, [jssp], #32
0x4cd2dde4   836  ldp x13, x14, [jssp, #16]
0x4cd2dde8   840  ldp x11, x12, [jssp], #32
0x4cd2ddec   844  ldr lr, [jssp, #16]
0x4cd2ddf0   848  ldp x15, x18, [jssp], #24
0x4cd2ddf4   852  ldp x4, x3, [jssp], #16
0x4cd2ddf8   856  ret
0x4cd2ddfc   860  sub csp, jssp, #0x10 (16)
0x4cd2de00   864  stp x4, x3, [jssp, #-16]!
0x4cd2de04   868  ldr x1, [x2]
0x4cd2de08   872  and x16, x1, #0xfffffffffff00000
0x4cd2de0c   876  ldr x16, [x16, #8]
0x4cd2de10   880  tst x16, #0x18
0x4cd2de14   884  b.eq #+0x1f4 (addr 0x4cd2e008)
0x4cd2de18   888  and x16, x0, #0xfffffffffff00000
0x4cd2de1c   892  ldr x16, [x16, #8]
0x4cd2de20   896  tst x16, #0x18
0x4cd2de24   900  b.ne #+0x1e4 (addr 0x4cd2e008)
0x4cd2de28   904  and x1, x0, #0xfffffffffff00000
0x4cd2de2c   908  ldr x3, [x1, #104]
0x4cd2de30   912  subs x3, x3, #0x1 (1)
0x4cd2de34   916  str x3, [x1, #104]
0x4cd2de38   920  b.mi #+0xe4 (addr 0x4cd2df1c)
0x4cd2de3c   924  ubfx x16, x0, #8, #12
0x4cd2de40   928  and x1, x0, #0xfffffffffff00000
0x4cd2de44   932  add x1, x1, x16, lsl #2
0x4cd2de48   936  ubfx x3, x0, #3, #5
0x4cd2de4c   940  ldr x1, [x1, #360]
0x4cd2de50   944  lsr x1, x1, x3
0x4cd2de54   948  tbz w1, #0, #+0x8 (addr 0x4cd2de5c)
0x4cd2de58   952  tbnz w1, #1, #+0x3c (addr 0x4cd2de94)
0x4cd2de5c   956  ldp x4, x3, [jssp], #16
0x4cd2de60   960  ldr x16, pc+864 (addr 0x000000004cd2e1c0)    ;; external reference (store_buffer_top)
0x4cd2de64   964  ldr x1, [x16]
0x4cd2de68   968  str x2, [x1], #8
0x4cd2de6c   972  str x1, [x16]
0x4cd2de70   976  tst x1, #0x1ffff
0x4cd2de74   980  b.eq #+0x8 (addr 0x4cd2de7c)
0x4cd2de78   984  ret
0x4cd2de7c   988  sub csp, jssp, #0x8 (8)
0x4cd2de80   992  str lr, [jssp, #-8]!
0x4cd2de84   996  ldr x17, pc+836 (addr 0x000000004cd2e1c8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd2de88  1000  blr x17
0x4cd2de8c  1004  ldr lr, [jssp], #8
0x4cd2de90  1008  ret
0x4cd2de94  1012  ldr x1, [x2]
0x4cd2de98  1016  and x3, x1, #0xfffffffffff00000
0x4cd2de9c  1020  ldr x3, [x3, #8]
0x4cd2dea0  1024  tbz w3, #6, #+0x18 (addr 0x4cd2deb8)
0x4cd2dea4  1028  and x3, x0, #0xfffffffffff00000
0x4cd2dea8  1032  ldr x3, [x3, #8]
0x4cd2deac  1036  movz x16, #0x58
0x4cd2deb0  1040  tst x3, x16
0x4cd2deb4  1044  b.eq #+0x68 (addr 0x4cd2df1c)
0x4cd2deb8  1048  sub csp, jssp, #0x10 (16)
0x4cd2debc  1052  stp x0, x2, [jssp, #-16]!
0x4cd2dec0  1056  ubfx x16, x1, #8, #12
0x4cd2dec4  1060  and x3, x1, #0xfffffffffff00000
0x4cd2dec8  1064  add x3, x3, x16, lsl #2
0x4cd2decc  1068  ubfx x0, x1, #3, #5
0x4cd2ded0  1072  ldr x2, [x3, #360]
0x4cd2ded4  1076  lsr x2, x2, x0
0x4cd2ded8  1080  tbz w2, #0, #+0x40 (addr 0x4cd2df18)
0x4cd2dedc  1084  ldp x0, x2, [jssp], #16
0x4cd2dee0  1088  ldp x4, x3, [jssp], #16
0x4cd2dee4  1092  ldr x16, pc+748 (addr 0x000000004cd2e1d0)    ;; external reference (store_buffer_top)
0x4cd2dee8  1096  ldr x1, [x16]
0x4cd2deec  1100  str x2, [x1], #8
0x4cd2def0  1104  str x1, [x16]
0x4cd2def4  1108  tst x1, #0x1ffff
0x4cd2def8  1112  b.eq #+0x8 (addr 0x4cd2df00)
0x4cd2defc  1116  ret
0x4cd2df00  1120  sub csp, jssp, #0x8 (8)
0x4cd2df04  1124  str lr, [jssp, #-8]!
0x4cd2df08  1128  ldr x17, pc+720 (addr 0x000000004cd2e1d8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd2df0c  1132  blr x17
0x4cd2df10  1136  ldr lr, [jssp], #8
0x4cd2df14  1140  ret
0x4cd2df18  1144  ldp x0, x2, [jssp], #16
0x4cd2df1c  1148  sub csp, jssp, #0x78 (120)
0x4cd2df20  1152  stp x14, x15, [jssp, #-32]!
0x4cd2df24  1156  stp x18, lr, [jssp, #16]
0x4cd2df28  1160  stp x10, x11, [jssp, #-32]!
0x4cd2df2c  1164  stp x12, x13, [jssp, #16]
0x4cd2df30  1168  stp x6, x7, [jssp, #-32]!
0x4cd2df34  1172  stp x8, x9, [jssp, #16]
0x4cd2df38  1176  stp x0, x2, [jssp, #-24]!
0x4cd2df3c  1180  str x5, [jssp, #16]
0x4cd2df40  1184  sub csp, jssp, #0xb0 (176)
0x4cd2df44  1188  stp d26, d27, [jssp, #-32]!
0x4cd2df48  1192  stp d28, d29, [jssp, #16]
0x4cd2df4c  1196  stp d22, d23, [jssp, #-32]!
0x4cd2df50  1200  stp d24, d25, [jssp, #16]
0x4cd2df54  1204  stp d18, d19, [jssp, #-32]!
0x4cd2df58  1208  stp d20, d21, [jssp, #16]
0x4cd2df5c  1212  stp d6, d7, [jssp, #-32]!
0x4cd2df60  1216  stp d16, d17, [jssp, #16]
0x4cd2df64  1220  stp d2, d3, [jssp, #-32]!
0x4cd2df68  1224  stp d4, d5, [jssp, #16]
0x4cd2df6c  1228  stp d0, d1, [jssp, #-16]!
0x4cd2df70  1232  mov x1, x2
0x4cd2df74  1236  ldr x2, pc+620 (addr 0x000000004cd2e1e0)    ;; external reference (isolate)
0x4cd2df78  1240  ldr x16, pc+624 (addr 0x000000004cd2e1e8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2df7c  1244  and csp, jssp, #0xfffffffffffffff0
0x4cd2df80  1248  blr x16
0x4cd2df84  1252  ldp d2, d3, [jssp, #16]
0x4cd2df88  1256  ldp d0, d1, [jssp], #32
0x4cd2df8c  1260  ldp d6, d7, [jssp, #16]
0x4cd2df90  1264  ldp d4, d5, [jssp], #32
0x4cd2df94  1268  ldp d18, d19, [jssp, #16]
0x4cd2df98  1272  ldp d16, d17, [jssp], #32
0x4cd2df9c  1276  ldp d22, d23, [jssp, #16]
0x4cd2dfa0  1280  ldp d20, d21, [jssp], #32
0x4cd2dfa4  1284  ldp d26, d27, [jssp, #16]
0x4cd2dfa8  1288  ldp d24, d25, [jssp], #32
0x4cd2dfac  1292  ldp d28, d29, [jssp], #16
0x4cd2dfb0  1296  ldp x5, x6, [jssp, #16]
0x4cd2dfb4  1300  ldp x0, x2, [jssp], #32
0x4cd2dfb8  1304  ldp x9, x10, [jssp, #16]
0x4cd2dfbc  1308  ldp x7, x8, [jssp], #32
0x4cd2dfc0  1312  ldp x13, x14, [jssp, #16]
0x4cd2dfc4  1316  ldp x11, x12, [jssp], #32
0x4cd2dfc8  1320  ldr lr, [jssp, #16]
0x4cd2dfcc  1324  ldp x15, x18, [jssp], #24
0x4cd2dfd0  1328  ldp x4, x3, [jssp], #16
0x4cd2dfd4  1332  ldr x16, pc+540 (addr 0x000000004cd2e1f0)    ;; external reference (store_buffer_top)
0x4cd2dfd8  1336  ldr x1, [x16]
0x4cd2dfdc  1340  str x2, [x1], #8
0x4cd2dfe0  1344  str x1, [x16]
0x4cd2dfe4  1348  tst x1, #0x1ffff
0x4cd2dfe8  1352  b.eq #+0x8 (addr 0x4cd2dff0)
0x4cd2dfec  1356  ret
0x4cd2dff0  1360  sub csp, jssp, #0x8 (8)
0x4cd2dff4  1364  str lr, [jssp, #-8]!
0x4cd2dff8  1368  ldr x17, pc+512 (addr 0x000000004cd2e1f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd2dffc  1372  blr x17
0x4cd2e000  1376  ldr lr, [jssp], #8
0x4cd2e004  1380  ret
0x4cd2e008  1384  and x1, x0, #0xfffffffffff00000
0x4cd2e00c  1388  ldr x3, [x1, #104]
0x4cd2e010  1392  subs x3, x3, #0x1 (1)
0x4cd2e014  1396  str x3, [x1, #104]
0x4cd2e018  1400  b.mi #+0x84 (addr 0x4cd2e09c)
0x4cd2e01c  1404  ubfx x16, x0, #8, #12
0x4cd2e020  1408  and x1, x0, #0xfffffffffff00000
0x4cd2e024  1412  add x1, x1, x16, lsl #2
0x4cd2e028  1416  ubfx x3, x0, #3, #5
0x4cd2e02c  1420  ldr x1, [x1, #360]
0x4cd2e030  1424  lsr x1, x1, x3
0x4cd2e034  1428  tbz w1, #0, #+0x8 (addr 0x4cd2e03c)
0x4cd2e038  1432  tbnz w1, #1, #+0xc (addr 0x4cd2e044)
0x4cd2e03c  1436  ldp x4, x3, [jssp], #16
0x4cd2e040  1440  ret
0x4cd2e044  1444  ldr x1, [x2]
0x4cd2e048  1448  and x3, x1, #0xfffffffffff00000
0x4cd2e04c  1452  ldr x3, [x3, #8]
0x4cd2e050  1456  tbz w3, #6, #+0x18 (addr 0x4cd2e068)
0x4cd2e054  1460  and x3, x0, #0xfffffffffff00000
0x4cd2e058  1464  ldr x3, [x3, #8]
0x4cd2e05c  1468  movz x16, #0x58
0x4cd2e060  1472  tst x3, x16
0x4cd2e064  1476  b.eq #+0x38 (addr 0x4cd2e09c)
0x4cd2e068  1480  sub csp, jssp, #0x10 (16)
0x4cd2e06c  1484  stp x0, x2, [jssp, #-16]!
0x4cd2e070  1488  ubfx x16, x1, #8, #12
0x4cd2e074  1492  and x3, x1, #0xfffffffffff00000
0x4cd2e078  1496  add x3, x3, x16, lsl #2
0x4cd2e07c  1500  ubfx x0, x1, #3, #5
0x4cd2e080  1504  ldr x2, [x3, #360]
0x4cd2e084  1508  lsr x2, x2, x0
0x4cd2e088  1512  tbz w2, #0, #+0x10 (addr 0x4cd2e098)
0x4cd2e08c  1516  ldp x0, x2, [jssp], #16
0x4cd2e090  1520  ldp x4, x3, [jssp], #16
0x4cd2e094  1524  ret
0x4cd2e098  1528  ldp x0, x2, [jssp], #16
0x4cd2e09c  1532  sub csp, jssp, #0x78 (120)
0x4cd2e0a0  1536  stp x14, x15, [jssp, #-32]!
0x4cd2e0a4  1540  stp x18, lr, [jssp, #16]
0x4cd2e0a8  1544  stp x10, x11, [jssp, #-32]!
0x4cd2e0ac  1548  stp x12, x13, [jssp, #16]
0x4cd2e0b0  1552  stp x6, x7, [jssp, #-32]!
0x4cd2e0b4  1556  stp x8, x9, [jssp, #16]
0x4cd2e0b8  1560  stp x0, x2, [jssp, #-24]!
0x4cd2e0bc  1564  str x5, [jssp, #16]
0x4cd2e0c0  1568  sub csp, jssp, #0xb0 (176)
0x4cd2e0c4  1572  stp d26, d27, [jssp, #-32]!
0x4cd2e0c8  1576  stp d28, d29, [jssp, #16]
0x4cd2e0cc  1580  stp d22, d23, [jssp, #-32]!
0x4cd2e0d0  1584  stp d24, d25, [jssp, #16]
0x4cd2e0d4  1588  stp d18, d19, [jssp, #-32]!
0x4cd2e0d8  1592  stp d20, d21, [jssp, #16]
0x4cd2e0dc  1596  stp d6, d7, [jssp, #-32]!
0x4cd2e0e0  1600  stp d16, d17, [jssp, #16]
0x4cd2e0e4  1604  stp d2, d3, [jssp, #-32]!
0x4cd2e0e8  1608  stp d4, d5, [jssp, #16]
0x4cd2e0ec  1612  stp d0, d1, [jssp, #-16]!
0x4cd2e0f0  1616  mov x1, x2
0x4cd2e0f4  1620  ldr x2, pc+268 (addr 0x000000004cd2e200)    ;; external reference (isolate)
0x4cd2e0f8  1624  ldr x16, pc+272 (addr 0x000000004cd2e208)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2e0fc  1628  and csp, jssp, #0xfffffffffffffff0
0x4cd2e100  1632  blr x16
0x4cd2e104  1636  ldp d2, d3, [jssp, #16]
0x4cd2e108  1640  ldp d0, d1, [jssp], #32
0x4cd2e10c  1644  ldp d6, d7, [jssp, #16]
0x4cd2e110  1648  ldp d4, d5, [jssp], #32
0x4cd2e114  1652  ldp d18, d19, [jssp, #16]
0x4cd2e118  1656  ldp d16, d17, [jssp], #32
0x4cd2e11c  1660  ldp d22, d23, [jssp, #16]
0x4cd2e120  1664  ldp d20, d21, [jssp], #32
0x4cd2e124  1668  ldp d26, d27, [jssp, #16]
0x4cd2e128  1672  ldp d24, d25, [jssp], #32
0x4cd2e12c  1676  ldp d28, d29, [jssp], #16
0x4cd2e130  1680  ldp x5, x6, [jssp, #16]
0x4cd2e134  1684  ldp x0, x2, [jssp], #32
0x4cd2e138  1688  ldp x9, x10, [jssp, #16]
0x4cd2e13c  1692  ldp x7, x8, [jssp], #32
0x4cd2e140  1696  ldp x13, x14, [jssp, #16]
0x4cd2e144  1700  ldp x11, x12, [jssp], #32
0x4cd2e148  1704  ldr lr, [jssp, #16]
0x4cd2e14c  1708  ldp x15, x18, [jssp], #24
0x4cd2e150  1712  ldp x4, x3, [jssp], #16
0x4cd2e154  1716  ret
0x4cd2e158  1720  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd2e15c  1724  d63f03e0       constant
0x4cd2e160  1728  166dd8c0       constant
0x4cd2e164  1732  00000000       constant
0x4cd2e168  1736  4cd065a0       constant
0x4cd2e16c  1740  00000000       constant
0x4cd2e170  1744  166dd8c0       constant
0x4cd2e174  1748  00000000       constant
0x4cd2e178  1752  4cd065a0       constant
0x4cd2e17c  1756  00000000       constant
0x4cd2e180  1760  166dd8c0       constant
0x4cd2e184  1764  00000000       constant
0x4cd2e188  1768  4cd065a0       constant
0x4cd2e18c  1772  00000000       constant
0x4cd2e190  1776  166dc2d0       constant
0x4cd2e194  1780  00000000       constant
0x4cd2e198  1784  00c2d958       constant
0x4cd2e19c  1788  00000000       constant
0x4cd2e1a0  1792  166dd8c0       constant
0x4cd2e1a4  1796  00000000       constant
0x4cd2e1a8  1800  4cd065a0       constant
0x4cd2e1ac  1804  00000000       constant
0x4cd2e1b0  1808  166dc2d0       constant
0x4cd2e1b4  1812  00000000       constant
0x4cd2e1b8  1816  00c2d958       constant
0x4cd2e1bc  1820  00000000       constant
0x4cd2e1c0  1824  166dd8c0       constant
0x4cd2e1c4  1828  00000000       constant
0x4cd2e1c8  1832  4cd065a0       constant
0x4cd2e1cc  1836  00000000       constant
0x4cd2e1d0  1840  166dd8c0       constant
0x4cd2e1d4  1844  00000000       constant
0x4cd2e1d8  1848  4cd065a0       constant
0x4cd2e1dc  1852  00000000       constant
0x4cd2e1e0  1856  166dc2d0       constant
0x4cd2e1e4  1860  00000000       constant
0x4cd2e1e8  1864  00c2d958       constant
0x4cd2e1ec  1868  00000000       constant
0x4cd2e1f0  1872  166dd8c0       constant
0x4cd2e1f4  1876  00000000       constant
0x4cd2e1f8  1880  4cd065a0       constant
0x4cd2e1fc  1884  00000000       constant
0x4cd2e200  1888  166dc2d0       constant
0x4cd2e204  1892  00000000       constant
0x4cd2e208  1896  00c2d958       constant
0x4cd2e20c  1900  00000000       constant


RelocInfo (size = 65)
0x4cd2daa8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2dacc  code target (STUB)  (0x4cd065a0)
0x4cd2db44  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2db68  code target (STUB)  (0x4cd065a0)
0x4cd2dba8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2dbcc  code target (STUB)  (0x4cd065a0)
0x4cd2dc38  external reference (isolate)  (0x166dc2d0)
0x4cd2dc3c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2dc98  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2dcbc  code target (STUB)  (0x4cd065a0)
0x4cd2dd98  external reference (isolate)  (0x166dc2d0)
0x4cd2dd9c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2de60  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2de84  code target (STUB)  (0x4cd065a0)
0x4cd2dee4  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2df08  code target (STUB)  (0x4cd065a0)
0x4cd2df74  external reference (isolate)  (0x166dc2d0)
0x4cd2df78  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2dfd4  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2dff8  code target (STUB)  (0x4cd065a0)
0x4cd2e0f4  external reference (isolate)  (0x166dc2d0)
0x4cd2e0f8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2e158  constant pool (size 184)


kind = STUB
major_key = FastNewClosureStub
name = FastNewClosureStub
compiler = crankshaft
Instructions (size = 773)
0x4cd2e280     0  movz x1, #0xd2c0
0x4cd2e284     4  movk x1, #0x166d, lsl #16
0x4cd2e288     8  ldp x3, x0, [x1]
0x4cd2e28c    12  adds x16, x3, #0x48 (72)
0x4cd2e290    16  ccmp x16, x0, #nzCv, lo
0x4cd2e294    20  b.hi #+0x1bc (addr 0x4cd2e450)
0x4cd2e298    24  str x16, [x1]
0x4cd2e29c    28  orr x3, x3, #0x1
0x4cd2e2a0    32  ldur x0, [cp, #39]
0x4cd2e2a4    36  movz x16, #0x2cf
0x4cd2e2a8    40  ldr x1, [x0, x16]
0x4cd2e2ac    44  stur x1, [x3, #-1]
0x4cd2e2b0    48  ldr x1, pc+528 (addr 0x000000004cd2e4c0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd2e2b4    52  stur x1, [x3, #7]
0x4cd2e2b8    56  ldr x1, pc+528 (addr 0x000000004cd2e4c8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd2e2bc    60  stur x1, [x3, #15]
0x4cd2e2c0    64  ldr x1, pc+528 (addr 0x000000004cd2e4d0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd2e2c4    68  stur x1, [x3, #47]
0x4cd2e2c8    72  ldr x1, pc+528 (addr 0x000000004cd2e4d8)    ;; object: 0x21004519 <the hole>
0x4cd2e2cc    76  stur x1, [x3, #23]
0x4cd2e2d0    80  stur x2, [x3, #31]
0x4cd2e2d4    84  stur cp, [x3, #39]
0x4cd2e2d8    88  ldur x1, [x2, #23]
0x4cd2e2dc    92  movz x4, #0x0
0x4cd2e2e0    96  cmp x1, x4
0x4cd2e2e4   100  b.eq #+0x150 (addr 0x4cd2e434)
0x4cd2e2e8   104  ldur w4, [x1, #11]
0x4cd2e2ec   108  subs w4, w4, #0x4 (4)
0x4cd2e2f0   112  b.vs #+0x230 (addr 0x4cd2e520)
0x4cd2e2f4   116  mov x5, x4
0x4cd2e2f8   120  cmp w5, #0x1 (1)
0x4cd2e2fc   124  b.lt #+0xb4 (addr 0x4cd2e3b0)
0x4cd2e300   128  add x4, x1, #0xf (15)
0x4cd2e304   132  ldr x6, [x4, w5, sxtw #3]
0x4cd2e308   136  ldur x4, [x6, #7]
0x4cd2e30c   140  add x6, x1, #0x27 (39)
0x4cd2e310   144  ldr x7, [x6, w5, sxtw #3]
0x4cd2e314   148  add x6, x1, #0x17 (23)
0x4cd2e318   152  ldr x8, [x6, w5, sxtw #3]
0x4cd2e31c   156  ldur x6, [x8, #7]
0x4cd2e320   160  cmp x0, x4
0x4cd2e324   164  b.ne #+0x1c (addr 0x4cd2e340)
0x4cd2e328   168  mov x4, #0xffffffff00000000
0x4cd2e32c   172  cmp x7, x4
0x4cd2e330   176  b.ne #+0x10 (addr 0x4cd2e340)
0x4cd2e334   180  movz x4, #0x0
0x4cd2e338   184  cmp x6, x4
0x4cd2e33c   188  b.ne #+0xc (addr 0x4cd2e348)
0x4cd2e340   192  sub w5, w5, #0x4 (4)
0x4cd2e344   196  b #-0x4c (addr 0x4cd2e2f8)
0x4cd2e348   200  add x4, x1, #0x1f (31)
0x4cd2e34c   204  ldr x7, [x4, w5, sxtw #3]
0x4cd2e350   208  ldur x7, [x7, #7]
0x4cd2e354   212  movz x4, #0x0
0x4cd2e358   216  cmp x7, x4
0x4cd2e35c   220  b.eq #+0x50 (addr 0x4cd2e3ac)
0x4cd2e360   224  add x4, x6, #0x5f (95)
0x4cd2e364   228  stur x4, [x3, #55]
0x4cd2e368   232  stur x7, [x3, #47]
0x4cd2e36c   236  movz x16, #0x557
0x4cd2e370   240  ldr x4, [x0, x16]
0x4cd2e374   244  stur x4, [x3, #63]
0x4cd2e378   248  mov x4, x3
0x4cd2e37c   252  movz x16, #0x557
0x4cd2e380   256  str x4, [x0, x16]
0x4cd2e384   260  add x6, x0, #0x557 (1367)
0x4cd2e388   264  and x4, x0, #0xfffffffffff00000
0x4cd2e38c   268  ldr x4, [x4, #8]
0x4cd2e390   272  tbz w4, #2, #+0x18 (addr 0x4cd2e3a8)
0x4cd2e394   276  sub csp, jssp, #0x8 (8)
0x4cd2e398   280  str lr, [jssp, #-8]!
0x4cd2e39c   284  ldr x16, pc+324 (addr 0x000000004cd2e4e0)    ;; code: STUB, RecordWriteStub, minor: 71808
0x4cd2e3a0   288  blr x16
0x4cd2e3a4   292  ldr lr, [jssp], #8
0x4cd2e3a8   296  b #+0x8 (addr 0x4cd2e3b0)
0x4cd2e3ac   300  b #+0x184 (addr 0x4cd2e530)
0x4cd2e3b0   304  cmp w5, #0x1 (1)
0x4cd2e3b4   308  b.ge #+0x94 (addr 0x4cd2e448)
0x4cd2e3b8   312  ldur x1, [x1, #15]
0x4cd2e3bc   316  ldur x1, [x1, #7]
0x4cd2e3c0   320  movz x4, #0x0
0x4cd2e3c4   324  cmp x1, x4
0x4cd2e3c8   328  b.eq #+0x54 (addr 0x4cd2e41c)
0x4cd2e3cc   332  add x1, x1, #0x5f (95)
0x4cd2e3d0   336  stur x1, [x3, #55]
0x4cd2e3d4   340  ldr x1, pc+276 (addr 0x000000004cd2e4e8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd2e3d8   344  stur x1, [x3, #47]
0x4cd2e3dc   348  movz x16, #0x557
0x4cd2e3e0   352  ldr x1, [x0, x16]
0x4cd2e3e4   356  stur x1, [x3, #63]
0x4cd2e3e8   360  mov x1, x3
0x4cd2e3ec   364  movz x16, #0x557
0x4cd2e3f0   368  str x1, [x0, x16]
0x4cd2e3f4   372  add x2, x0, #0x557 (1367)
0x4cd2e3f8   376  and x1, x0, #0xfffffffffff00000
0x4cd2e3fc   380  ldr x1, [x1, #8]
0x4cd2e400   384  tbz w1, #2, #+0x18 (addr 0x4cd2e418)
0x4cd2e404   388  sub csp, jssp, #0x8 (8)
0x4cd2e408   392  str lr, [jssp, #-8]!
0x4cd2e40c   396  ldr x16, pc+228 (addr 0x000000004cd2e4f0)    ;; code: STUB, RecordWriteStub, minor: 67616
0x4cd2e410   400  blr x16
0x4cd2e414   404  ldr lr, [jssp], #8
0x4cd2e418   408  b #+0x30 (addr 0x4cd2e448)
0x4cd2e41c   412  ldr x0, pc+220 (addr 0x000000004cd2e4f8)    ;; object: 0x21004241 <undefined>
0x4cd2e420   416  stur x0, [x3, #63]
0x4cd2e424   420  ldur x0, [x2, #15]
0x4cd2e428   424  add x0, x0, #0x5f (95)
0x4cd2e42c   428  stur x0, [x3, #55]
0x4cd2e430   432  b #+0x18 (addr 0x4cd2e448)
0x4cd2e434   436  ldr x0, pc+204 (addr 0x000000004cd2e500)    ;; object: 0x21004241 <undefined>
0x4cd2e438   440  stur x0, [x3, #63]
0x4cd2e43c   444  ldur x0, [x2, #15]
0x4cd2e440   448  add x0, x0, #0x5f (95)
0x4cd2e444   452  stur x0, [x3, #55]
0x4cd2e448   456  mov x0, x3
0x4cd2e44c   460  ret
0x4cd2e450   464  sub csp, jssp, #0x10 (16)
0x4cd2e454   468  stp fp, lr, [jssp, #-16]!
0x4cd2e458   472  movz fp, #0xa00000000
0x4cd2e45c   476  sub csp, jssp, #0x8 (8)
0x4cd2e460   480  str fp, [jssp, #-8]!
0x4cd2e464   484  add fp, jssp, #0x8 (8)
0x4cd2e468   488  movz x3, #0x0
0x4cd2e46c   492  mov x16, lr
0x4cd2e470   496  ldr x17, pc+152 (addr 0x000000004cd2e508)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd2e474   500  blr x17
0x4cd2e478   504  movz x0, #0x4800000000
0x4cd2e47c   508  movz x10, #0x0
0x4cd2e480   512  sub csp, jssp, #0x10 (16)
0x4cd2e484   516  stp x10, x0, [jssp, #-16]!
0x4cd2e488   520  movz x0, #0x2
0x4cd2e48c   524  movz x1, #0x5b88
0x4cd2e490   528  movk x1, #0xe2, lsl #16
0x4cd2e494   532  ldr x16, pc+124 (addr 0x000000004cd2e510)    ;; code: STUB, CEntryStub, minor: 5
0x4cd2e498   536  blr x16
0x4cd2e49c   540  str x0, [jssp, #24]
0x4cd2e4a0   544  ldr x16, pc+120 (addr 0x000000004cd2e518)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd2e4a4   548  blr x16
0x4cd2e4a8   552  ldr lr, [jssp, #16]
0x4cd2e4ac   556  ldp xzr, fp, [jssp], #24
0x4cd2e4b0   560  b #-0x210 (addr 0x4cd2e2a0)
0x4cd2e4b4   564  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0x4cd2e4b8   568  d63f03e0       constant
0x4cd2e4bc   572  d503201f       constant
0x4cd2e4c0   576  21004201       constant
0x4cd2e4c4   580  00000000       constant
0x4cd2e4c8   584  21004201       constant
0x4cd2e4cc   588  00000000       constant
0x4cd2e4d0   592  21004201       constant
0x4cd2e4d4   596  00000000       constant
0x4cd2e4d8   600  21004519       constant
0x4cd2e4dc   604  00000000       constant
0x4cd2e4e0   608  4cd2d2c0       constant
0x4cd2e4e4   612  00000000       constant
0x4cd2e4e8   616  21004201       constant
0x4cd2e4ec   620  00000000       constant
0x4cd2e4f0   624  4cd2daa0       constant
0x4cd2e4f4   628  00000000       constant
0x4cd2e4f8   632  21004241       constant
0x4cd2e4fc   636  00000000       constant
0x4cd2e500   640  21004241       constant
0x4cd2e504   644  00000000       constant
0x4cd2e508   648  4cd06820       constant
0x4cd2e50c   652  00000000       constant
0x4cd2e510   656  4cd06260       constant
0x4cd2e514   660  00000000       constant
0x4cd2e518   664  4cd068e0       constant
0x4cd2e51c   668  00000000       constant
0x4cd2e520   672  movz x16, #0x0
0x4cd2e524   676  sub csp, jssp, #0x10 (16)
0x4cd2e528   680  stp fp, lr, [jssp, #-16]!
0x4cd2e52c   684  bl #+0x14 (addr 0x4cd2e540)
0x4cd2e530   688  movz x16, #0x8
0x4cd2e534   692  sub csp, jssp, #0x10 (16)
0x4cd2e538   696  stp fp, lr, [jssp, #-16]!
0x4cd2e53c   700  bl #+0x4 (addr 0x4cd2e540)
0x4cd2e540   704  movz x17, #0xa00000000
0x4cd2e544   708  sub csp, jssp, #0x10 (16)
0x4cd2e548   712  stp x17, cp, [jssp, #-16]!
0x4cd2e54c   716  add fp, jssp, #0x10 (16)
0x4cd2e550   720  ldr x17, pc+24 (addr 0x000000004cd2e568)    ;; lazy deoptimization bailout 0
0x4cd2e554   724  add x17, x17, x16
0x4cd2e558   728  br x17
0x4cd2e55c   732  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd2e560   736  d63f03e0       constant
0x4cd2e564   740  d503201f       constant
0x4cd2e568   744  4cb06000       constant
0x4cd2e56c   748  00000000       constant


Safepoints (size = 21)
0x4cd2e49c   540  000 | x2 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0x4cd2e2b0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd2e2b8  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd2e2c0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd2e2c8  embedded object  (0x21004519 <the hole>)
0x4cd2e39c  code target (STUB)  (0x4cd2d2c0)
0x4cd2e3d4  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd2e40c  code target (STUB)  (0x4cd2daa0)
0x4cd2e41c  embedded object  (0x21004241 <undefined>)
0x4cd2e434  embedded object  (0x21004241 <undefined>)
0x4cd2e470  code target (STUB)  (0x4cd06820)
0x4cd2e494  code target (STUB)  (0x4cd06260)
0x4cd2e4a0  code target (STUB)  (0x4cd068e0)
0x4cd2e4b4  constant pool (size 108)
0x4cd2e550  runtime entry
0x4cd2e55c  constant pool (size 20)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0x4cd2e600     0  adr xzr, #+0x40 (addr 0x4cd2e640)
0x4cd2e604     4  adr xzr, #+0x2a8 (addr 0x4cd2e8ac)
0x4cd2e608     8  ldr x16, pc+1368 (addr 0x000000004cd2eb60)    ;; external reference (store_buffer_top)
0x4cd2e60c    12  ldr x0, [x16]
0x4cd2e610    16  str x2, [x0], #8
0x4cd2e614    20  str x0, [x16]
0x4cd2e618    24  tst x0, #0x1ffff
0x4cd2e61c    28  b.eq #+0x8 (addr 0x4cd2e624)
0x4cd2e620    32  ret
0x4cd2e624    36  sub csp, jssp, #0x8 (8)
0x4cd2e628    40  str lr, [jssp, #-8]!
0x4cd2e62c    44  ldr x17, pc+1340 (addr 0x000000004cd2eb68)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2e630    48  blr x17
0x4cd2e634    52  ldr lr, [jssp], #8
0x4cd2e638    56  ret
0x4cd2e63c    60  ret
0x4cd2e640    64  sub csp, jssp, #0x10 (16)
0x4cd2e644    68  stp x3, x1, [jssp, #-16]!
0x4cd2e648    72  ldr x0, [x2]
0x4cd2e64c    76  and x16, x0, #0xfffffffffff00000
0x4cd2e650    80  ldr x16, [x16, #8]
0x4cd2e654    84  tst x16, #0x18
0x4cd2e658    88  b.eq #+0x17c (addr 0x4cd2e7d4)
0x4cd2e65c    92  and x16, cp, #0xfffffffffff00000
0x4cd2e660    96  ldr x16, [x16, #8]
0x4cd2e664   100  tst x16, #0x18
0x4cd2e668   104  b.ne #+0x16c (addr 0x4cd2e7d4)
0x4cd2e66c   108  and x0, cp, #0xfffffffffff00000
0x4cd2e670   112  ldr x1, [x0, #104]
0x4cd2e674   116  subs x1, x1, #0x1 (1)
0x4cd2e678   120  str x1, [x0, #104]
0x4cd2e67c   124  b.mi #+0xc4 (addr 0x4cd2e740)
0x4cd2e680   128  ubfx x16, cp, #8, #12
0x4cd2e684   132  and x0, cp, #0xfffffffffff00000
0x4cd2e688   136  add x0, x0, x16, lsl #2
0x4cd2e68c   140  ubfx x1, cp, #3, #5
0x4cd2e690   144  ldr x0, [x0, #360]
0x4cd2e694   148  lsr x0, x0, x1
0x4cd2e698   152  tbz w0, #0, #+0x8 (addr 0x4cd2e6a0)
0x4cd2e69c   156  tbnz w0, #1, #+0x3c (addr 0x4cd2e6d8)
0x4cd2e6a0   160  ldp x3, x1, [jssp], #16
0x4cd2e6a4   164  ldr x16, pc+1228 (addr 0x000000004cd2eb70)    ;; external reference (store_buffer_top)
0x4cd2e6a8   168  ldr x0, [x16]
0x4cd2e6ac   172  str x2, [x0], #8
0x4cd2e6b0   176  str x0, [x16]
0x4cd2e6b4   180  tst x0, #0x1ffff
0x4cd2e6b8   184  b.eq #+0x8 (addr 0x4cd2e6c0)
0x4cd2e6bc   188  ret
0x4cd2e6c0   192  sub csp, jssp, #0x8 (8)
0x4cd2e6c4   196  str lr, [jssp, #-8]!
0x4cd2e6c8   200  ldr x17, pc+1200 (addr 0x000000004cd2eb78)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2e6cc   204  blr x17
0x4cd2e6d0   208  ldr lr, [jssp], #8
0x4cd2e6d4   212  ret
0x4cd2e6d8   216  ldr x0, [x2]
0x4cd2e6dc   220  sub csp, jssp, #0x10 (16)
0x4cd2e6e0   224  stp cp, x2, [jssp, #-16]!
0x4cd2e6e4   228  ubfx x16, x0, #8, #12
0x4cd2e6e8   232  and x1, x0, #0xfffffffffff00000
0x4cd2e6ec   236  add x1, x1, x16, lsl #2
0x4cd2e6f0   240  ubfx cp, x0, #3, #5
0x4cd2e6f4   244  ldr x2, [x1, #360]
0x4cd2e6f8   248  lsr x2, x2, cp
0x4cd2e6fc   252  tbz w2, #0, #+0x40 (addr 0x4cd2e73c)
0x4cd2e700   256  ldp cp, x2, [jssp], #16
0x4cd2e704   260  ldp x3, x1, [jssp], #16
0x4cd2e708   264  ldr x16, pc+1144 (addr 0x000000004cd2eb80)    ;; external reference (store_buffer_top)
0x4cd2e70c   268  ldr x0, [x16]
0x4cd2e710   272  str x2, [x0], #8
0x4cd2e714   276  str x0, [x16]
0x4cd2e718   280  tst x0, #0x1ffff
0x4cd2e71c   284  b.eq #+0x8 (addr 0x4cd2e724)
0x4cd2e720   288  ret
0x4cd2e724   292  sub csp, jssp, #0x8 (8)
0x4cd2e728   296  str lr, [jssp, #-8]!
0x4cd2e72c   300  ldr x17, pc+1116 (addr 0x000000004cd2eb88)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2e730   304  blr x17
0x4cd2e734   308  ldr lr, [jssp], #8
0x4cd2e738   312  ret
0x4cd2e73c   316  ldp cp, x2, [jssp], #16
0x4cd2e740   320  sub csp, jssp, #0x78 (120)
0x4cd2e744   324  stp x14, x15, [jssp, #-32]!
0x4cd2e748   328  stp x18, lr, [jssp, #16]
0x4cd2e74c   332  stp x10, x11, [jssp, #-32]!
0x4cd2e750   336  stp x12, x13, [jssp, #16]
0x4cd2e754   340  stp x6, x7, [jssp, #-32]!
0x4cd2e758   344  stp x8, x9, [jssp, #16]
0x4cd2e75c   348  stp x2, x4, [jssp, #-24]!
0x4cd2e760   352  str x5, [jssp, #16]
0x4cd2e764   356  mov x0, cp
0x4cd2e768   360  mov x1, x2
0x4cd2e76c   364  ldr x2, pc+1060 (addr 0x000000004cd2eb90)    ;; external reference (isolate)
0x4cd2e770   368  ldr x16, pc+1064 (addr 0x000000004cd2eb98)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2e774   372  and csp, jssp, #0xfffffffffffffff0
0x4cd2e778   376  blr x16
0x4cd2e77c   380  ldp x5, x6, [jssp, #16]
0x4cd2e780   384  ldp x2, x4, [jssp], #32
0x4cd2e784   388  ldp x9, x10, [jssp, #16]
0x4cd2e788   392  ldp x7, x8, [jssp], #32
0x4cd2e78c   396  ldp x13, x14, [jssp, #16]
0x4cd2e790   400  ldp x11, x12, [jssp], #32
0x4cd2e794   404  ldr lr, [jssp, #16]
0x4cd2e798   408  ldp x15, x18, [jssp], #24
0x4cd2e79c   412  ldp x3, x1, [jssp], #16
0x4cd2e7a0   416  ldr x16, pc+1024 (addr 0x000000004cd2eba0)    ;; external reference (store_buffer_top)
0x4cd2e7a4   420  ldr x0, [x16]
0x4cd2e7a8   424  str x2, [x0], #8
0x4cd2e7ac   428  str x0, [x16]
0x4cd2e7b0   432  tst x0, #0x1ffff
0x4cd2e7b4   436  b.eq #+0x8 (addr 0x4cd2e7bc)
0x4cd2e7b8   440  ret
0x4cd2e7bc   444  sub csp, jssp, #0x8 (8)
0x4cd2e7c0   448  str lr, [jssp, #-8]!
0x4cd2e7c4   452  ldr x17, pc+996 (addr 0x000000004cd2eba8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2e7c8   456  blr x17
0x4cd2e7cc   460  ldr lr, [jssp], #8
0x4cd2e7d0   464  ret
0x4cd2e7d4   468  and x0, cp, #0xfffffffffff00000
0x4cd2e7d8   472  ldr x1, [x0, #104]
0x4cd2e7dc   476  subs x1, x1, #0x1 (1)
0x4cd2e7e0   480  str x1, [x0, #104]
0x4cd2e7e4   484  b.mi #+0x64 (addr 0x4cd2e848)
0x4cd2e7e8   488  ubfx x16, cp, #8, #12
0x4cd2e7ec   492  and x0, cp, #0xfffffffffff00000
0x4cd2e7f0   496  add x0, x0, x16, lsl #2
0x4cd2e7f4   500  ubfx x1, cp, #3, #5
0x4cd2e7f8   504  ldr x0, [x0, #360]
0x4cd2e7fc   508  lsr x0, x0, x1
0x4cd2e800   512  tbz w0, #0, #+0x8 (addr 0x4cd2e808)
0x4cd2e804   516  tbnz w0, #1, #+0xc (addr 0x4cd2e810)
0x4cd2e808   520  ldp x3, x1, [jssp], #16
0x4cd2e80c   524  ret
0x4cd2e810   528  ldr x0, [x2]
0x4cd2e814   532  sub csp, jssp, #0x10 (16)
0x4cd2e818   536  stp cp, x2, [jssp, #-16]!
0x4cd2e81c   540  ubfx x16, x0, #8, #12
0x4cd2e820   544  and x1, x0, #0xfffffffffff00000
0x4cd2e824   548  add x1, x1, x16, lsl #2
0x4cd2e828   552  ubfx cp, x0, #3, #5
0x4cd2e82c   556  ldr x2, [x1, #360]
0x4cd2e830   560  lsr x2, x2, cp
0x4cd2e834   564  tbz w2, #0, #+0x10 (addr 0x4cd2e844)
0x4cd2e838   568  ldp cp, x2, [jssp], #16
0x4cd2e83c   572  ldp x3, x1, [jssp], #16
0x4cd2e840   576  ret
0x4cd2e844   580  ldp cp, x2, [jssp], #16
0x4cd2e848   584  sub csp, jssp, #0x78 (120)
0x4cd2e84c   588  stp x14, x15, [jssp, #-32]!
0x4cd2e850   592  stp x18, lr, [jssp, #16]
0x4cd2e854   596  stp x10, x11, [jssp, #-32]!
0x4cd2e858   600  stp x12, x13, [jssp, #16]
0x4cd2e85c   604  stp x6, x7, [jssp, #-32]!
0x4cd2e860   608  stp x8, x9, [jssp, #16]
0x4cd2e864   612  stp x2, x4, [jssp, #-24]!
0x4cd2e868   616  str x5, [jssp, #16]
0x4cd2e86c   620  mov x0, cp
0x4cd2e870   624  mov x1, x2
0x4cd2e874   628  ldr x2, pc+828 (addr 0x000000004cd2ebb0)    ;; external reference (isolate)
0x4cd2e878   632  ldr x16, pc+832 (addr 0x000000004cd2ebb8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2e87c   636  and csp, jssp, #0xfffffffffffffff0
0x4cd2e880   640  blr x16
0x4cd2e884   644  ldp x5, x6, [jssp, #16]
0x4cd2e888   648  ldp x2, x4, [jssp], #32
0x4cd2e88c   652  ldp x9, x10, [jssp, #16]
0x4cd2e890   656  ldp x7, x8, [jssp], #32
0x4cd2e894   660  ldp x13, x14, [jssp, #16]
0x4cd2e898   664  ldp x11, x12, [jssp], #32
0x4cd2e89c   668  ldr lr, [jssp, #16]
0x4cd2e8a0   672  ldp x15, x18, [jssp], #24
0x4cd2e8a4   676  ldp x3, x1, [jssp], #16
0x4cd2e8a8   680  ret
0x4cd2e8ac   684  sub csp, jssp, #0x10 (16)
0x4cd2e8b0   688  stp x3, x1, [jssp, #-16]!
0x4cd2e8b4   692  ldr x0, [x2]
0x4cd2e8b8   696  and x16, x0, #0xfffffffffff00000
0x4cd2e8bc   700  ldr x16, [x16, #8]
0x4cd2e8c0   704  tst x16, #0x18
0x4cd2e8c4   708  b.eq #+0x19c (addr 0x4cd2ea60)
0x4cd2e8c8   712  and x16, cp, #0xfffffffffff00000
0x4cd2e8cc   716  ldr x16, [x16, #8]
0x4cd2e8d0   720  tst x16, #0x18
0x4cd2e8d4   724  b.ne #+0x18c (addr 0x4cd2ea60)
0x4cd2e8d8   728  and x0, cp, #0xfffffffffff00000
0x4cd2e8dc   732  ldr x1, [x0, #104]
0x4cd2e8e0   736  subs x1, x1, #0x1 (1)
0x4cd2e8e4   740  str x1, [x0, #104]
0x4cd2e8e8   744  b.mi #+0xe4 (addr 0x4cd2e9cc)
0x4cd2e8ec   748  ubfx x16, cp, #8, #12
0x4cd2e8f0   752  and x0, cp, #0xfffffffffff00000
0x4cd2e8f4   756  add x0, x0, x16, lsl #2
0x4cd2e8f8   760  ubfx x1, cp, #3, #5
0x4cd2e8fc   764  ldr x0, [x0, #360]
0x4cd2e900   768  lsr x0, x0, x1
0x4cd2e904   772  tbz w0, #0, #+0x8 (addr 0x4cd2e90c)
0x4cd2e908   776  tbnz w0, #1, #+0x3c (addr 0x4cd2e944)
0x4cd2e90c   780  ldp x3, x1, [jssp], #16
0x4cd2e910   784  ldr x16, pc+688 (addr 0x000000004cd2ebc0)    ;; external reference (store_buffer_top)
0x4cd2e914   788  ldr x0, [x16]
0x4cd2e918   792  str x2, [x0], #8
0x4cd2e91c   796  str x0, [x16]
0x4cd2e920   800  tst x0, #0x1ffff
0x4cd2e924   804  b.eq #+0x8 (addr 0x4cd2e92c)
0x4cd2e928   808  ret
0x4cd2e92c   812  sub csp, jssp, #0x8 (8)
0x4cd2e930   816  str lr, [jssp, #-8]!
0x4cd2e934   820  ldr x17, pc+660 (addr 0x000000004cd2ebc8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2e938   824  blr x17
0x4cd2e93c   828  ldr lr, [jssp], #8
0x4cd2e940   832  ret
0x4cd2e944   836  ldr x0, [x2]
0x4cd2e948   840  and x1, x0, #0xfffffffffff00000
0x4cd2e94c   844  ldr x1, [x1, #8]
0x4cd2e950   848  tbz w1, #6, #+0x18 (addr 0x4cd2e968)
0x4cd2e954   852  and x1, cp, #0xfffffffffff00000
0x4cd2e958   856  ldr x1, [x1, #8]
0x4cd2e95c   860  movz x16, #0x58
0x4cd2e960   864  tst x1, x16
0x4cd2e964   868  b.eq #+0x68 (addr 0x4cd2e9cc)
0x4cd2e968   872  sub csp, jssp, #0x10 (16)
0x4cd2e96c   876  stp cp, x2, [jssp, #-16]!
0x4cd2e970   880  ubfx x16, x0, #8, #12
0x4cd2e974   884  and x1, x0, #0xfffffffffff00000
0x4cd2e978   888  add x1, x1, x16, lsl #2
0x4cd2e97c   892  ubfx cp, x0, #3, #5
0x4cd2e980   896  ldr x2, [x1, #360]
0x4cd2e984   900  lsr x2, x2, cp
0x4cd2e988   904  tbz w2, #0, #+0x40 (addr 0x4cd2e9c8)
0x4cd2e98c   908  ldp cp, x2, [jssp], #16
0x4cd2e990   912  ldp x3, x1, [jssp], #16
0x4cd2e994   916  ldr x16, pc+572 (addr 0x000000004cd2ebd0)    ;; external reference (store_buffer_top)
0x4cd2e998   920  ldr x0, [x16]
0x4cd2e99c   924  str x2, [x0], #8
0x4cd2e9a0   928  str x0, [x16]
0x4cd2e9a4   932  tst x0, #0x1ffff
0x4cd2e9a8   936  b.eq #+0x8 (addr 0x4cd2e9b0)
0x4cd2e9ac   940  ret
0x4cd2e9b0   944  sub csp, jssp, #0x8 (8)
0x4cd2e9b4   948  str lr, [jssp, #-8]!
0x4cd2e9b8   952  ldr x17, pc+544 (addr 0x000000004cd2ebd8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2e9bc   956  blr x17
0x4cd2e9c0   960  ldr lr, [jssp], #8
0x4cd2e9c4   964  ret
0x4cd2e9c8   968  ldp cp, x2, [jssp], #16
0x4cd2e9cc   972  sub csp, jssp, #0x78 (120)
0x4cd2e9d0   976  stp x14, x15, [jssp, #-32]!
0x4cd2e9d4   980  stp x18, lr, [jssp, #16]
0x4cd2e9d8   984  stp x10, x11, [jssp, #-32]!
0x4cd2e9dc   988  stp x12, x13, [jssp, #16]
0x4cd2e9e0   992  stp x6, x7, [jssp, #-32]!
0x4cd2e9e4   996  stp x8, x9, [jssp, #16]
0x4cd2e9e8  1000  stp x2, x4, [jssp, #-24]!
0x4cd2e9ec  1004  str x5, [jssp, #16]
0x4cd2e9f0  1008  mov x0, cp
0x4cd2e9f4  1012  mov x1, x2
0x4cd2e9f8  1016  ldr x2, pc+488 (addr 0x000000004cd2ebe0)    ;; external reference (isolate)
0x4cd2e9fc  1020  ldr x16, pc+492 (addr 0x000000004cd2ebe8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2ea00  1024  and csp, jssp, #0xfffffffffffffff0
0x4cd2ea04  1028  blr x16
0x4cd2ea08  1032  ldp x5, x6, [jssp, #16]
0x4cd2ea0c  1036  ldp x2, x4, [jssp], #32
0x4cd2ea10  1040  ldp x9, x10, [jssp, #16]
0x4cd2ea14  1044  ldp x7, x8, [jssp], #32
0x4cd2ea18  1048  ldp x13, x14, [jssp, #16]
0x4cd2ea1c  1052  ldp x11, x12, [jssp], #32
0x4cd2ea20  1056  ldr lr, [jssp, #16]
0x4cd2ea24  1060  ldp x15, x18, [jssp], #24
0x4cd2ea28  1064  ldp x3, x1, [jssp], #16
0x4cd2ea2c  1068  ldr x16, pc+452 (addr 0x000000004cd2ebf0)    ;; external reference (store_buffer_top)
0x4cd2ea30  1072  ldr x0, [x16]
0x4cd2ea34  1076  str x2, [x0], #8
0x4cd2ea38  1080  str x0, [x16]
0x4cd2ea3c  1084  tst x0, #0x1ffff
0x4cd2ea40  1088  b.eq #+0x8 (addr 0x4cd2ea48)
0x4cd2ea44  1092  ret
0x4cd2ea48  1096  sub csp, jssp, #0x8 (8)
0x4cd2ea4c  1100  str lr, [jssp, #-8]!
0x4cd2ea50  1104  ldr x17, pc+424 (addr 0x000000004cd2ebf8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2ea54  1108  blr x17
0x4cd2ea58  1112  ldr lr, [jssp], #8
0x4cd2ea5c  1116  ret
0x4cd2ea60  1120  and x0, cp, #0xfffffffffff00000
0x4cd2ea64  1124  ldr x1, [x0, #104]
0x4cd2ea68  1128  subs x1, x1, #0x1 (1)
0x4cd2ea6c  1132  str x1, [x0, #104]
0x4cd2ea70  1136  b.mi #+0x84 (addr 0x4cd2eaf4)
0x4cd2ea74  1140  ubfx x16, cp, #8, #12
0x4cd2ea78  1144  and x0, cp, #0xfffffffffff00000
0x4cd2ea7c  1148  add x0, x0, x16, lsl #2
0x4cd2ea80  1152  ubfx x1, cp, #3, #5
0x4cd2ea84  1156  ldr x0, [x0, #360]
0x4cd2ea88  1160  lsr x0, x0, x1
0x4cd2ea8c  1164  tbz w0, #0, #+0x8 (addr 0x4cd2ea94)
0x4cd2ea90  1168  tbnz w0, #1, #+0xc (addr 0x4cd2ea9c)
0x4cd2ea94  1172  ldp x3, x1, [jssp], #16
0x4cd2ea98  1176  ret
0x4cd2ea9c  1180  ldr x0, [x2]
0x4cd2eaa0  1184  and x1, x0, #0xfffffffffff00000
0x4cd2eaa4  1188  ldr x1, [x1, #8]
0x4cd2eaa8  1192  tbz w1, #6, #+0x18 (addr 0x4cd2eac0)
0x4cd2eaac  1196  and x1, cp, #0xfffffffffff00000
0x4cd2eab0  1200  ldr x1, [x1, #8]
0x4cd2eab4  1204  movz x16, #0x58
0x4cd2eab8  1208  tst x1, x16
0x4cd2eabc  1212  b.eq #+0x38 (addr 0x4cd2eaf4)
0x4cd2eac0  1216  sub csp, jssp, #0x10 (16)
0x4cd2eac4  1220  stp cp, x2, [jssp, #-16]!
0x4cd2eac8  1224  ubfx x16, x0, #8, #12
0x4cd2eacc  1228  and x1, x0, #0xfffffffffff00000
0x4cd2ead0  1232  add x1, x1, x16, lsl #2
0x4cd2ead4  1236  ubfx cp, x0, #3, #5
0x4cd2ead8  1240  ldr x2, [x1, #360]
0x4cd2eadc  1244  lsr x2, x2, cp
0x4cd2eae0  1248  tbz w2, #0, #+0x10 (addr 0x4cd2eaf0)
0x4cd2eae4  1252  ldp cp, x2, [jssp], #16
0x4cd2eae8  1256  ldp x3, x1, [jssp], #16
0x4cd2eaec  1260  ret
0x4cd2eaf0  1264  ldp cp, x2, [jssp], #16
0x4cd2eaf4  1268  sub csp, jssp, #0x78 (120)
0x4cd2eaf8  1272  stp x14, x15, [jssp, #-32]!
0x4cd2eafc  1276  stp x18, lr, [jssp, #16]
0x4cd2eb00  1280  stp x10, x11, [jssp, #-32]!
0x4cd2eb04  1284  stp x12, x13, [jssp, #16]
0x4cd2eb08  1288  stp x6, x7, [jssp, #-32]!
0x4cd2eb0c  1292  stp x8, x9, [jssp, #16]
0x4cd2eb10  1296  stp x2, x4, [jssp, #-24]!
0x4cd2eb14  1300  str x5, [jssp, #16]
0x4cd2eb18  1304  mov x0, cp
0x4cd2eb1c  1308  mov x1, x2
0x4cd2eb20  1312  ldr x2, pc+224 (addr 0x000000004cd2ec00)    ;; external reference (isolate)
0x4cd2eb24  1316  ldr x16, pc+228 (addr 0x000000004cd2ec08)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2eb28  1320  and csp, jssp, #0xfffffffffffffff0
0x4cd2eb2c  1324  blr x16
0x4cd2eb30  1328  ldp x5, x6, [jssp, #16]
0x4cd2eb34  1332  ldp x2, x4, [jssp], #32
0x4cd2eb38  1336  ldp x9, x10, [jssp, #16]
0x4cd2eb3c  1340  ldp x7, x8, [jssp], #32
0x4cd2eb40  1344  ldp x13, x14, [jssp, #16]
0x4cd2eb44  1348  ldp x11, x12, [jssp], #32
0x4cd2eb48  1352  ldr lr, [jssp, #16]
0x4cd2eb4c  1356  ldp x15, x18, [jssp], #24
0x4cd2eb50  1360  ldp x3, x1, [jssp], #16
0x4cd2eb54  1364  ret
0x4cd2eb58  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd2eb5c  1372  d63f03e0       constant
0x4cd2eb60  1376  166dd8c0       constant
0x4cd2eb64  1380  00000000       constant
0x4cd2eb68  1384  4cd064c0       constant
0x4cd2eb6c  1388  00000000       constant
0x4cd2eb70  1392  166dd8c0       constant
0x4cd2eb74  1396  00000000       constant
0x4cd2eb78  1400  4cd064c0       constant
0x4cd2eb7c  1404  00000000       constant
0x4cd2eb80  1408  166dd8c0       constant
0x4cd2eb84  1412  00000000       constant
0x4cd2eb88  1416  4cd064c0       constant
0x4cd2eb8c  1420  00000000       constant
0x4cd2eb90  1424  166dc2d0       constant
0x4cd2eb94  1428  00000000       constant
0x4cd2eb98  1432  00c2d958       constant
0x4cd2eb9c  1436  00000000       constant
0x4cd2eba0  1440  166dd8c0       constant
0x4cd2eba4  1444  00000000       constant
0x4cd2eba8  1448  4cd064c0       constant
0x4cd2ebac  1452  00000000       constant
0x4cd2ebb0  1456  166dc2d0       constant
0x4cd2ebb4  1460  00000000       constant
0x4cd2ebb8  1464  00c2d958       constant
0x4cd2ebbc  1468  00000000       constant
0x4cd2ebc0  1472  166dd8c0       constant
0x4cd2ebc4  1476  00000000       constant
0x4cd2ebc8  1480  4cd064c0       constant
0x4cd2ebcc  1484  00000000       constant
0x4cd2ebd0  1488  166dd8c0       constant
0x4cd2ebd4  1492  00000000       constant
0x4cd2ebd8  1496  4cd064c0       constant
0x4cd2ebdc  1500  00000000       constant
0x4cd2ebe0  1504  166dc2d0       constant
0x4cd2ebe4  1508  00000000       constant
0x4cd2ebe8  1512  00c2d958       constant
0x4cd2ebec  1516  00000000       constant
0x4cd2ebf0  1520  166dd8c0       constant
0x4cd2ebf4  1524  00000000       constant
0x4cd2ebf8  1528  4cd064c0       constant
0x4cd2ebfc  1532  00000000       constant
0x4cd2ec00  1536  166dc2d0       constant
0x4cd2ec04  1540  00000000       constant
0x4cd2ec08  1544  00c2d958       constant
0x4cd2ec0c  1548  00000000       constant


RelocInfo (size = 59)
0x4cd2e608  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2e62c  code target (STUB)  (0x4cd064c0)
0x4cd2e6a4  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2e6c8  code target (STUB)  (0x4cd064c0)
0x4cd2e708  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2e72c  code target (STUB)  (0x4cd064c0)
0x4cd2e76c  external reference (isolate)  (0x166dc2d0)
0x4cd2e770  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2e7a0  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2e7c4  code target (STUB)  (0x4cd064c0)
0x4cd2e874  external reference (isolate)  (0x166dc2d0)
0x4cd2e878  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2e910  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2e934  code target (STUB)  (0x4cd064c0)
0x4cd2e994  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2e9b8  code target (STUB)  (0x4cd064c0)
0x4cd2e9f8  external reference (isolate)  (0x166dc2d0)
0x4cd2e9fc  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2ea2c  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2ea50  code target (STUB)  (0x4cd064c0)
0x4cd2eb20  external reference (isolate)  (0x166dc2d0)
0x4cd2eb24  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2eb58  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0x4cd2ec80     0  adr xzr, #+0x40 (addr 0x4cd2ecc0)
0x4cd2ec84     4  adr xzr, #+0x2a8 (addr 0x4cd2ef2c)
0x4cd2ec88     8  ldr x16, pc+1368 (addr 0x000000004cd2f1e0)    ;; external reference (store_buffer_top)
0x4cd2ec8c    12  ldr x10, [x16]
0x4cd2ec90    16  str x11, [x10], #8
0x4cd2ec94    20  str x10, [x16]
0x4cd2ec98    24  tst x10, #0x1ffff
0x4cd2ec9c    28  b.eq #+0x8 (addr 0x4cd2eca4)
0x4cd2eca0    32  ret
0x4cd2eca4    36  sub csp, jssp, #0x8 (8)
0x4cd2eca8    40  str lr, [jssp, #-8]!
0x4cd2ecac    44  ldr x17, pc+1340 (addr 0x000000004cd2f1e8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2ecb0    48  blr x17
0x4cd2ecb4    52  ldr lr, [jssp], #8
0x4cd2ecb8    56  ret
0x4cd2ecbc    60  ret
0x4cd2ecc0    64  sub csp, jssp, #0x10 (16)
0x4cd2ecc4    68  stp x2, x0, [jssp, #-16]!
0x4cd2ecc8    72  ldr x10, [x11]
0x4cd2eccc    76  and x16, x10, #0xfffffffffff00000
0x4cd2ecd0    80  ldr x16, [x16, #8]
0x4cd2ecd4    84  tst x16, #0x18
0x4cd2ecd8    88  b.eq #+0x17c (addr 0x4cd2ee54)
0x4cd2ecdc    92  and x16, x1, #0xfffffffffff00000
0x4cd2ece0    96  ldr x16, [x16, #8]
0x4cd2ece4   100  tst x16, #0x18
0x4cd2ece8   104  b.ne #+0x16c (addr 0x4cd2ee54)
0x4cd2ecec   108  and x10, x1, #0xfffffffffff00000
0x4cd2ecf0   112  ldr x0, [x10, #104]
0x4cd2ecf4   116  subs x0, x0, #0x1 (1)
0x4cd2ecf8   120  str x0, [x10, #104]
0x4cd2ecfc   124  b.mi #+0xc4 (addr 0x4cd2edc0)
0x4cd2ed00   128  ubfx x16, x1, #8, #12
0x4cd2ed04   132  and x10, x1, #0xfffffffffff00000
0x4cd2ed08   136  add x10, x10, x16, lsl #2
0x4cd2ed0c   140  ubfx x0, x1, #3, #5
0x4cd2ed10   144  ldr x10, [x10, #360]
0x4cd2ed14   148  lsr x10, x10, x0
0x4cd2ed18   152  tbz w10, #0, #+0x8 (addr 0x4cd2ed20)
0x4cd2ed1c   156  tbnz w10, #1, #+0x3c (addr 0x4cd2ed58)
0x4cd2ed20   160  ldp x2, x0, [jssp], #16
0x4cd2ed24   164  ldr x16, pc+1228 (addr 0x000000004cd2f1f0)    ;; external reference (store_buffer_top)
0x4cd2ed28   168  ldr x10, [x16]
0x4cd2ed2c   172  str x11, [x10], #8
0x4cd2ed30   176  str x10, [x16]
0x4cd2ed34   180  tst x10, #0x1ffff
0x4cd2ed38   184  b.eq #+0x8 (addr 0x4cd2ed40)
0x4cd2ed3c   188  ret
0x4cd2ed40   192  sub csp, jssp, #0x8 (8)
0x4cd2ed44   196  str lr, [jssp, #-8]!
0x4cd2ed48   200  ldr x17, pc+1200 (addr 0x000000004cd2f1f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2ed4c   204  blr x17
0x4cd2ed50   208  ldr lr, [jssp], #8
0x4cd2ed54   212  ret
0x4cd2ed58   216  ldr x10, [x11]
0x4cd2ed5c   220  sub csp, jssp, #0x10 (16)
0x4cd2ed60   224  stp x1, x11, [jssp, #-16]!
0x4cd2ed64   228  ubfx x16, x10, #8, #12
0x4cd2ed68   232  and x0, x10, #0xfffffffffff00000
0x4cd2ed6c   236  add x0, x0, x16, lsl #2
0x4cd2ed70   240  ubfx x1, x10, #3, #5
0x4cd2ed74   244  ldr x11, [x0, #360]
0x4cd2ed78   248  lsr x11, x11, x1
0x4cd2ed7c   252  tbz w11, #0, #+0x40 (addr 0x4cd2edbc)
0x4cd2ed80   256  ldp x1, x11, [jssp], #16
0x4cd2ed84   260  ldp x2, x0, [jssp], #16
0x4cd2ed88   264  ldr x16, pc+1144 (addr 0x000000004cd2f200)    ;; external reference (store_buffer_top)
0x4cd2ed8c   268  ldr x10, [x16]
0x4cd2ed90   272  str x11, [x10], #8
0x4cd2ed94   276  str x10, [x16]
0x4cd2ed98   280  tst x10, #0x1ffff
0x4cd2ed9c   284  b.eq #+0x8 (addr 0x4cd2eda4)
0x4cd2eda0   288  ret
0x4cd2eda4   292  sub csp, jssp, #0x8 (8)
0x4cd2eda8   296  str lr, [jssp, #-8]!
0x4cd2edac   300  ldr x17, pc+1116 (addr 0x000000004cd2f208)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2edb0   304  blr x17
0x4cd2edb4   308  ldr lr, [jssp], #8
0x4cd2edb8   312  ret
0x4cd2edbc   316  ldp x1, x11, [jssp], #16
0x4cd2edc0   320  sub csp, jssp, #0x78 (120)
0x4cd2edc4   324  stp x14, x15, [jssp, #-32]!
0x4cd2edc8   328  stp x18, lr, [jssp, #16]
0x4cd2edcc   332  stp x9, x11, [jssp, #-32]!
0x4cd2edd0   336  stp x12, x13, [jssp, #16]
0x4cd2edd4   340  stp x5, x6, [jssp, #-32]!
0x4cd2edd8   344  stp x7, x8, [jssp, #16]
0x4cd2eddc   348  stp x1, x3, [jssp, #-24]!
0x4cd2ede0   352  str x4, [jssp, #16]
0x4cd2ede4   356  mov x0, x1
0x4cd2ede8   360  mov x1, x11
0x4cd2edec   364  ldr x2, pc+1060 (addr 0x000000004cd2f210)    ;; external reference (isolate)
0x4cd2edf0   368  ldr x16, pc+1064 (addr 0x000000004cd2f218)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2edf4   372  and csp, jssp, #0xfffffffffffffff0
0x4cd2edf8   376  blr x16
0x4cd2edfc   380  ldp x4, x5, [jssp, #16]
0x4cd2ee00   384  ldp x1, x3, [jssp], #32
0x4cd2ee04   388  ldp x8, x9, [jssp, #16]
0x4cd2ee08   392  ldp x6, x7, [jssp], #32
0x4cd2ee0c   396  ldp x13, x14, [jssp, #16]
0x4cd2ee10   400  ldp x11, x12, [jssp], #32
0x4cd2ee14   404  ldr lr, [jssp, #16]
0x4cd2ee18   408  ldp x15, x18, [jssp], #24
0x4cd2ee1c   412  ldp x2, x0, [jssp], #16
0x4cd2ee20   416  ldr x16, pc+1024 (addr 0x000000004cd2f220)    ;; external reference (store_buffer_top)
0x4cd2ee24   420  ldr x10, [x16]
0x4cd2ee28   424  str x11, [x10], #8
0x4cd2ee2c   428  str x10, [x16]
0x4cd2ee30   432  tst x10, #0x1ffff
0x4cd2ee34   436  b.eq #+0x8 (addr 0x4cd2ee3c)
0x4cd2ee38   440  ret
0x4cd2ee3c   444  sub csp, jssp, #0x8 (8)
0x4cd2ee40   448  str lr, [jssp, #-8]!
0x4cd2ee44   452  ldr x17, pc+996 (addr 0x000000004cd2f228)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2ee48   456  blr x17
0x4cd2ee4c   460  ldr lr, [jssp], #8
0x4cd2ee50   464  ret
0x4cd2ee54   468  and x10, x1, #0xfffffffffff00000
0x4cd2ee58   472  ldr x0, [x10, #104]
0x4cd2ee5c   476  subs x0, x0, #0x1 (1)
0x4cd2ee60   480  str x0, [x10, #104]
0x4cd2ee64   484  b.mi #+0x64 (addr 0x4cd2eec8)
0x4cd2ee68   488  ubfx x16, x1, #8, #12
0x4cd2ee6c   492  and x10, x1, #0xfffffffffff00000
0x4cd2ee70   496  add x10, x10, x16, lsl #2
0x4cd2ee74   500  ubfx x0, x1, #3, #5
0x4cd2ee78   504  ldr x10, [x10, #360]
0x4cd2ee7c   508  lsr x10, x10, x0
0x4cd2ee80   512  tbz w10, #0, #+0x8 (addr 0x4cd2ee88)
0x4cd2ee84   516  tbnz w10, #1, #+0xc (addr 0x4cd2ee90)
0x4cd2ee88   520  ldp x2, x0, [jssp], #16
0x4cd2ee8c   524  ret
0x4cd2ee90   528  ldr x10, [x11]
0x4cd2ee94   532  sub csp, jssp, #0x10 (16)
0x4cd2ee98   536  stp x1, x11, [jssp, #-16]!
0x4cd2ee9c   540  ubfx x16, x10, #8, #12
0x4cd2eea0   544  and x0, x10, #0xfffffffffff00000
0x4cd2eea4   548  add x0, x0, x16, lsl #2
0x4cd2eea8   552  ubfx x1, x10, #3, #5
0x4cd2eeac   556  ldr x11, [x0, #360]
0x4cd2eeb0   560  lsr x11, x11, x1
0x4cd2eeb4   564  tbz w11, #0, #+0x10 (addr 0x4cd2eec4)
0x4cd2eeb8   568  ldp x1, x11, [jssp], #16
0x4cd2eebc   572  ldp x2, x0, [jssp], #16
0x4cd2eec0   576  ret
0x4cd2eec4   580  ldp x1, x11, [jssp], #16
0x4cd2eec8   584  sub csp, jssp, #0x78 (120)
0x4cd2eecc   588  stp x14, x15, [jssp, #-32]!
0x4cd2eed0   592  stp x18, lr, [jssp, #16]
0x4cd2eed4   596  stp x9, x11, [jssp, #-32]!
0x4cd2eed8   600  stp x12, x13, [jssp, #16]
0x4cd2eedc   604  stp x5, x6, [jssp, #-32]!
0x4cd2eee0   608  stp x7, x8, [jssp, #16]
0x4cd2eee4   612  stp x1, x3, [jssp, #-24]!
0x4cd2eee8   616  str x4, [jssp, #16]
0x4cd2eeec   620  mov x0, x1
0x4cd2eef0   624  mov x1, x11
0x4cd2eef4   628  ldr x2, pc+828 (addr 0x000000004cd2f230)    ;; external reference (isolate)
0x4cd2eef8   632  ldr x16, pc+832 (addr 0x000000004cd2f238)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2eefc   636  and csp, jssp, #0xfffffffffffffff0
0x4cd2ef00   640  blr x16
0x4cd2ef04   644  ldp x4, x5, [jssp, #16]
0x4cd2ef08   648  ldp x1, x3, [jssp], #32
0x4cd2ef0c   652  ldp x8, x9, [jssp, #16]
0x4cd2ef10   656  ldp x6, x7, [jssp], #32
0x4cd2ef14   660  ldp x13, x14, [jssp, #16]
0x4cd2ef18   664  ldp x11, x12, [jssp], #32
0x4cd2ef1c   668  ldr lr, [jssp, #16]
0x4cd2ef20   672  ldp x15, x18, [jssp], #24
0x4cd2ef24   676  ldp x2, x0, [jssp], #16
0x4cd2ef28   680  ret
0x4cd2ef2c   684  sub csp, jssp, #0x10 (16)
0x4cd2ef30   688  stp x2, x0, [jssp, #-16]!
0x4cd2ef34   692  ldr x10, [x11]
0x4cd2ef38   696  and x16, x10, #0xfffffffffff00000
0x4cd2ef3c   700  ldr x16, [x16, #8]
0x4cd2ef40   704  tst x16, #0x18
0x4cd2ef44   708  b.eq #+0x19c (addr 0x4cd2f0e0)
0x4cd2ef48   712  and x16, x1, #0xfffffffffff00000
0x4cd2ef4c   716  ldr x16, [x16, #8]
0x4cd2ef50   720  tst x16, #0x18
0x4cd2ef54   724  b.ne #+0x18c (addr 0x4cd2f0e0)
0x4cd2ef58   728  and x10, x1, #0xfffffffffff00000
0x4cd2ef5c   732  ldr x0, [x10, #104]
0x4cd2ef60   736  subs x0, x0, #0x1 (1)
0x4cd2ef64   740  str x0, [x10, #104]
0x4cd2ef68   744  b.mi #+0xe4 (addr 0x4cd2f04c)
0x4cd2ef6c   748  ubfx x16, x1, #8, #12
0x4cd2ef70   752  and x10, x1, #0xfffffffffff00000
0x4cd2ef74   756  add x10, x10, x16, lsl #2
0x4cd2ef78   760  ubfx x0, x1, #3, #5
0x4cd2ef7c   764  ldr x10, [x10, #360]
0x4cd2ef80   768  lsr x10, x10, x0
0x4cd2ef84   772  tbz w10, #0, #+0x8 (addr 0x4cd2ef8c)
0x4cd2ef88   776  tbnz w10, #1, #+0x3c (addr 0x4cd2efc4)
0x4cd2ef8c   780  ldp x2, x0, [jssp], #16
0x4cd2ef90   784  ldr x16, pc+688 (addr 0x000000004cd2f240)    ;; external reference (store_buffer_top)
0x4cd2ef94   788  ldr x10, [x16]
0x4cd2ef98   792  str x11, [x10], #8
0x4cd2ef9c   796  str x10, [x16]
0x4cd2efa0   800  tst x10, #0x1ffff
0x4cd2efa4   804  b.eq #+0x8 (addr 0x4cd2efac)
0x4cd2efa8   808  ret
0x4cd2efac   812  sub csp, jssp, #0x8 (8)
0x4cd2efb0   816  str lr, [jssp, #-8]!
0x4cd2efb4   820  ldr x17, pc+660 (addr 0x000000004cd2f248)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2efb8   824  blr x17
0x4cd2efbc   828  ldr lr, [jssp], #8
0x4cd2efc0   832  ret
0x4cd2efc4   836  ldr x10, [x11]
0x4cd2efc8   840  and x0, x10, #0xfffffffffff00000
0x4cd2efcc   844  ldr x0, [x0, #8]
0x4cd2efd0   848  tbz w0, #6, #+0x18 (addr 0x4cd2efe8)
0x4cd2efd4   852  and x0, x1, #0xfffffffffff00000
0x4cd2efd8   856  ldr x0, [x0, #8]
0x4cd2efdc   860  movz x16, #0x58
0x4cd2efe0   864  tst x0, x16
0x4cd2efe4   868  b.eq #+0x68 (addr 0x4cd2f04c)
0x4cd2efe8   872  sub csp, jssp, #0x10 (16)
0x4cd2efec   876  stp x1, x11, [jssp, #-16]!
0x4cd2eff0   880  ubfx x16, x10, #8, #12
0x4cd2eff4   884  and x0, x10, #0xfffffffffff00000
0x4cd2eff8   888  add x0, x0, x16, lsl #2
0x4cd2effc   892  ubfx x1, x10, #3, #5
0x4cd2f000   896  ldr x11, [x0, #360]
0x4cd2f004   900  lsr x11, x11, x1
0x4cd2f008   904  tbz w11, #0, #+0x40 (addr 0x4cd2f048)
0x4cd2f00c   908  ldp x1, x11, [jssp], #16
0x4cd2f010   912  ldp x2, x0, [jssp], #16
0x4cd2f014   916  ldr x16, pc+572 (addr 0x000000004cd2f250)    ;; external reference (store_buffer_top)
0x4cd2f018   920  ldr x10, [x16]
0x4cd2f01c   924  str x11, [x10], #8
0x4cd2f020   928  str x10, [x16]
0x4cd2f024   932  tst x10, #0x1ffff
0x4cd2f028   936  b.eq #+0x8 (addr 0x4cd2f030)
0x4cd2f02c   940  ret
0x4cd2f030   944  sub csp, jssp, #0x8 (8)
0x4cd2f034   948  str lr, [jssp, #-8]!
0x4cd2f038   952  ldr x17, pc+544 (addr 0x000000004cd2f258)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2f03c   956  blr x17
0x4cd2f040   960  ldr lr, [jssp], #8
0x4cd2f044   964  ret
0x4cd2f048   968  ldp x1, x11, [jssp], #16
0x4cd2f04c   972  sub csp, jssp, #0x78 (120)
0x4cd2f050   976  stp x14, x15, [jssp, #-32]!
0x4cd2f054   980  stp x18, lr, [jssp, #16]
0x4cd2f058   984  stp x9, x11, [jssp, #-32]!
0x4cd2f05c   988  stp x12, x13, [jssp, #16]
0x4cd2f060   992  stp x5, x6, [jssp, #-32]!
0x4cd2f064   996  stp x7, x8, [jssp, #16]
0x4cd2f068  1000  stp x1, x3, [jssp, #-24]!
0x4cd2f06c  1004  str x4, [jssp, #16]
0x4cd2f070  1008  mov x0, x1
0x4cd2f074  1012  mov x1, x11
0x4cd2f078  1016  ldr x2, pc+488 (addr 0x000000004cd2f260)    ;; external reference (isolate)
0x4cd2f07c  1020  ldr x16, pc+492 (addr 0x000000004cd2f268)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2f080  1024  and csp, jssp, #0xfffffffffffffff0
0x4cd2f084  1028  blr x16
0x4cd2f088  1032  ldp x4, x5, [jssp, #16]
0x4cd2f08c  1036  ldp x1, x3, [jssp], #32
0x4cd2f090  1040  ldp x8, x9, [jssp, #16]
0x4cd2f094  1044  ldp x6, x7, [jssp], #32
0x4cd2f098  1048  ldp x13, x14, [jssp, #16]
0x4cd2f09c  1052  ldp x11, x12, [jssp], #32
0x4cd2f0a0  1056  ldr lr, [jssp, #16]
0x4cd2f0a4  1060  ldp x15, x18, [jssp], #24
0x4cd2f0a8  1064  ldp x2, x0, [jssp], #16
0x4cd2f0ac  1068  ldr x16, pc+452 (addr 0x000000004cd2f270)    ;; external reference (store_buffer_top)
0x4cd2f0b0  1072  ldr x10, [x16]
0x4cd2f0b4  1076  str x11, [x10], #8
0x4cd2f0b8  1080  str x10, [x16]
0x4cd2f0bc  1084  tst x10, #0x1ffff
0x4cd2f0c0  1088  b.eq #+0x8 (addr 0x4cd2f0c8)
0x4cd2f0c4  1092  ret
0x4cd2f0c8  1096  sub csp, jssp, #0x8 (8)
0x4cd2f0cc  1100  str lr, [jssp, #-8]!
0x4cd2f0d0  1104  ldr x17, pc+424 (addr 0x000000004cd2f278)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd2f0d4  1108  blr x17
0x4cd2f0d8  1112  ldr lr, [jssp], #8
0x4cd2f0dc  1116  ret
0x4cd2f0e0  1120  and x10, x1, #0xfffffffffff00000
0x4cd2f0e4  1124  ldr x0, [x10, #104]
0x4cd2f0e8  1128  subs x0, x0, #0x1 (1)
0x4cd2f0ec  1132  str x0, [x10, #104]
0x4cd2f0f0  1136  b.mi #+0x84 (addr 0x4cd2f174)
0x4cd2f0f4  1140  ubfx x16, x1, #8, #12
0x4cd2f0f8  1144  and x10, x1, #0xfffffffffff00000
0x4cd2f0fc  1148  add x10, x10, x16, lsl #2
0x4cd2f100  1152  ubfx x0, x1, #3, #5
0x4cd2f104  1156  ldr x10, [x10, #360]
0x4cd2f108  1160  lsr x10, x10, x0
0x4cd2f10c  1164  tbz w10, #0, #+0x8 (addr 0x4cd2f114)
0x4cd2f110  1168  tbnz w10, #1, #+0xc (addr 0x4cd2f11c)
0x4cd2f114  1172  ldp x2, x0, [jssp], #16
0x4cd2f118  1176  ret
0x4cd2f11c  1180  ldr x10, [x11]
0x4cd2f120  1184  and x0, x10, #0xfffffffffff00000
0x4cd2f124  1188  ldr x0, [x0, #8]
0x4cd2f128  1192  tbz w0, #6, #+0x18 (addr 0x4cd2f140)
0x4cd2f12c  1196  and x0, x1, #0xfffffffffff00000
0x4cd2f130  1200  ldr x0, [x0, #8]
0x4cd2f134  1204  movz x16, #0x58
0x4cd2f138  1208  tst x0, x16
0x4cd2f13c  1212  b.eq #+0x38 (addr 0x4cd2f174)
0x4cd2f140  1216  sub csp, jssp, #0x10 (16)
0x4cd2f144  1220  stp x1, x11, [jssp, #-16]!
0x4cd2f148  1224  ubfx x16, x10, #8, #12
0x4cd2f14c  1228  and x0, x10, #0xfffffffffff00000
0x4cd2f150  1232  add x0, x0, x16, lsl #2
0x4cd2f154  1236  ubfx x1, x10, #3, #5
0x4cd2f158  1240  ldr x11, [x0, #360]
0x4cd2f15c  1244  lsr x11, x11, x1
0x4cd2f160  1248  tbz w11, #0, #+0x10 (addr 0x4cd2f170)
0x4cd2f164  1252  ldp x1, x11, [jssp], #16
0x4cd2f168  1256  ldp x2, x0, [jssp], #16
0x4cd2f16c  1260  ret
0x4cd2f170  1264  ldp x1, x11, [jssp], #16
0x4cd2f174  1268  sub csp, jssp, #0x78 (120)
0x4cd2f178  1272  stp x14, x15, [jssp, #-32]!
0x4cd2f17c  1276  stp x18, lr, [jssp, #16]
0x4cd2f180  1280  stp x9, x11, [jssp, #-32]!
0x4cd2f184  1284  stp x12, x13, [jssp, #16]
0x4cd2f188  1288  stp x5, x6, [jssp, #-32]!
0x4cd2f18c  1292  stp x7, x8, [jssp, #16]
0x4cd2f190  1296  stp x1, x3, [jssp, #-24]!
0x4cd2f194  1300  str x4, [jssp, #16]
0x4cd2f198  1304  mov x0, x1
0x4cd2f19c  1308  mov x1, x11
0x4cd2f1a0  1312  ldr x2, pc+224 (addr 0x000000004cd2f280)    ;; external reference (isolate)
0x4cd2f1a4  1316  ldr x16, pc+228 (addr 0x000000004cd2f288)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd2f1a8  1320  and csp, jssp, #0xfffffffffffffff0
0x4cd2f1ac  1324  blr x16
0x4cd2f1b0  1328  ldp x4, x5, [jssp, #16]
0x4cd2f1b4  1332  ldp x1, x3, [jssp], #32
0x4cd2f1b8  1336  ldp x8, x9, [jssp, #16]
0x4cd2f1bc  1340  ldp x6, x7, [jssp], #32
0x4cd2f1c0  1344  ldp x13, x14, [jssp, #16]
0x4cd2f1c4  1348  ldp x11, x12, [jssp], #32
0x4cd2f1c8  1352  ldr lr, [jssp, #16]
0x4cd2f1cc  1356  ldp x15, x18, [jssp], #24
0x4cd2f1d0  1360  ldp x2, x0, [jssp], #16
0x4cd2f1d4  1364  ret
0x4cd2f1d8  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd2f1dc  1372  d63f03e0       constant
0x4cd2f1e0  1376  166dd8c0       constant
0x4cd2f1e4  1380  00000000       constant
0x4cd2f1e8  1384  4cd064c0       constant
0x4cd2f1ec  1388  00000000       constant
0x4cd2f1f0  1392  166dd8c0       constant
0x4cd2f1f4  1396  00000000       constant
0x4cd2f1f8  1400  4cd064c0       constant
0x4cd2f1fc  1404  00000000       constant
0x4cd2f200  1408  166dd8c0       constant
0x4cd2f204  1412  00000000       constant
0x4cd2f208  1416  4cd064c0       constant
0x4cd2f20c  1420  00000000       constant
0x4cd2f210  1424  166dc2d0       constant
0x4cd2f214  1428  00000000       constant
0x4cd2f218  1432  00c2d958       constant
0x4cd2f21c  1436  00000000       constant
0x4cd2f220  1440  166dd8c0       constant
0x4cd2f224  1444  00000000       constant
0x4cd2f228  1448  4cd064c0       constant
0x4cd2f22c  1452  00000000       constant
0x4cd2f230  1456  166dc2d0       constant
0x4cd2f234  1460  00000000       constant
0x4cd2f238  1464  00c2d958       constant
0x4cd2f23c  1468  00000000       constant
0x4cd2f240  1472  166dd8c0       constant
0x4cd2f244  1476  00000000       constant
0x4cd2f248  1480  4cd064c0       constant
0x4cd2f24c  1484  00000000       constant
0x4cd2f250  1488  166dd8c0       constant
0x4cd2f254  1492  00000000       constant
0x4cd2f258  1496  4cd064c0       constant
0x4cd2f25c  1500  00000000       constant
0x4cd2f260  1504  166dc2d0       constant
0x4cd2f264  1508  00000000       constant
0x4cd2f268  1512  00c2d958       constant
0x4cd2f26c  1516  00000000       constant
0x4cd2f270  1520  166dd8c0       constant
0x4cd2f274  1524  00000000       constant
0x4cd2f278  1528  4cd064c0       constant
0x4cd2f27c  1532  00000000       constant
0x4cd2f280  1536  166dc2d0       constant
0x4cd2f284  1540  00000000       constant
0x4cd2f288  1544  00c2d958       constant
0x4cd2f28c  1548  00000000       constant


RelocInfo (size = 59)
0x4cd2ec88  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2ecac  code target (STUB)  (0x4cd064c0)
0x4cd2ed24  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2ed48  code target (STUB)  (0x4cd064c0)
0x4cd2ed88  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2edac  code target (STUB)  (0x4cd064c0)
0x4cd2edec  external reference (isolate)  (0x166dc2d0)
0x4cd2edf0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2ee20  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2ee44  code target (STUB)  (0x4cd064c0)
0x4cd2eef4  external reference (isolate)  (0x166dc2d0)
0x4cd2eef8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2ef90  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2efb4  code target (STUB)  (0x4cd064c0)
0x4cd2f014  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2f038  code target (STUB)  (0x4cd064c0)
0x4cd2f078  external reference (isolate)  (0x166dc2d0)
0x4cd2f07c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2f0ac  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd2f0d0  code target (STUB)  (0x4cd064c0)
0x4cd2f1a0  external reference (isolate)  (0x166dc2d0)
0x4cd2f1a4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd2f1d8  constant pool (size 184)


kind = STUB
major_key = FastCloneShallowObjectStub
name = FastCloneShallowObjectStub
compiler = crankshaft
Instructions (size = 493)
0x4cd2f300     0  ldur x4, [x3, #47]
0x4cd2f304     4  tbnz w2, #0, #+0xb0 (addr 0x4cd2f3b4)
0x4cd2f308     8  asr x6, x2, #32
0x4cd2f30c    12  add x5, x4, #0x17 (23)
0x4cd2f310    16  ldr x7, [x5, w6, sxtw #3]
0x4cd2f314    20  ldr x4, pc+340 (addr 0x000000004cd2f468)    ;; object: 0x21004241 <undefined>
0x4cd2f318    24  cmp x7, x4
0x4cd2f31c    28  b.eq #+0x94 (addr 0x4cd2f3b0)
0x4cd2f320    32  ldur x4, [x7, #7]
0x4cd2f324    36  ldur x5, [x4, #-1]
0x4cd2f328    40  ldrb w6, [x5, #7]
0x4cd2f32c    44  cmp w6, #0x7 (7)
0x4cd2f330    48  b.ne #+0x80 (addr 0x4cd2f3b0)
0x4cd2f334    52  movz x1, #0xd2c0
0x4cd2f338    56  movk x1, #0x166d, lsl #16
0x4cd2f33c    60  ldp x2, x0, [x1]
0x4cd2f340    64  adds x16, x2, #0x48 (72)
0x4cd2f344    68  ccmp x16, x0, #nzCv, lo
0x4cd2f348    72  b.hi #+0xb4 (addr 0x4cd2f3fc)
0x4cd2f34c    76  str x16, [x1]
0x4cd2f350    80  orr x2, x2, #0x1
0x4cd2f354    84  stur x5, [x2, #-1]
0x4cd2f358    88  ldur x0, [x4, #7]
0x4cd2f35c    92  stur x0, [x2, #7]
0x4cd2f360    96  ldur x0, [x4, #15]
0x4cd2f364   100  stur x0, [x2, #15]
0x4cd2f368   104  ldur x0, [x4, #23]
0x4cd2f36c   108  stur x0, [x2, #23]
0x4cd2f370   112  ldur x0, [x4, #31]
0x4cd2f374   116  stur x0, [x2, #31]
0x4cd2f378   120  ldur x0, [x4, #39]
0x4cd2f37c   124  stur x0, [x2, #39]
0x4cd2f380   128  ldur x0, [x4, #47]
0x4cd2f384   132  stur x0, [x2, #47]
0x4cd2f388   136  add x0, x2, #0x38 (56)
0x4cd2f38c   140  ldr x1, pc+228 (addr 0x000000004cd2f470)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd2f390   144  stur x1, [x0, #-1]
0x4cd2f394   148  stur x7, [x0, #7]
0x4cd2f398   152  ldur w0, [x7, #35]
0x4cd2f39c   156  add w0, w0, #0x1 (1)
0x4cd2f3a0   160  lsl x0, x0, #32
0x4cd2f3a4   164  stur x0, [x7, #31]
0x4cd2f3a8   168  mov x0, x2
0x4cd2f3ac   172  ret
0x4cd2f3b0   176  b #+0xe0 (addr 0x4cd2f490)
0x4cd2f3b4   180  sub csp, jssp, #0x10 (16)
0x4cd2f3b8   184  stp fp, lr, [jssp, #-16]!
0x4cd2f3bc   188  movz fp, #0xa00000000
0x4cd2f3c0   192  sub csp, jssp, #0x8 (8)
0x4cd2f3c4   196  str fp, [jssp, #-8]!
0x4cd2f3c8   200  add fp, jssp, #0x8 (8)
0x4cd2f3cc   204  ldur x16, [x2, #-1]
0x4cd2f3d0   208  ldr x17, [x26, #120]
0x4cd2f3d4   212  cmp x16, x17
0x4cd2f3d8   216  b.ne #+0xc8 (addr 0x4cd2f4a0)
0x4cd2f3dc   220  ldur d29, [x2, #7]
0x4cd2f3e0   224  fcvtzs w6, d29
0x4cd2f3e4   228  scvtf d0, w6
0x4cd2f3e8   232  fcmp d29, d0
0x4cd2f3ec   236  b.ne #+0xb4 (addr 0x4cd2f4a0)
0x4cd2f3f0   240  ldr lr, [jssp, #16]
0x4cd2f3f4   244  ldp xzr, fp, [jssp], #24
0x4cd2f3f8   248  b #-0xec (addr 0x4cd2f30c)
0x4cd2f3fc   252  sub csp, jssp, #0x10 (16)
0x4cd2f400   256  stp fp, lr, [jssp, #-16]!
0x4cd2f404   260  movz fp, #0xa00000000
0x4cd2f408   264  sub csp, jssp, #0x8 (8)
0x4cd2f40c   268  str fp, [jssp, #-8]!
0x4cd2f410   272  add fp, jssp, #0x8 (8)
0x4cd2f414   276  movz x2, #0x0
0x4cd2f418   280  mov x16, lr
0x4cd2f41c   284  ldr x17, pc+92 (addr 0x000000004cd2f478)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd2f420   288  blr x17
0x4cd2f424   292  movz x0, #0x4800000000
0x4cd2f428   296  movz x10, #0x0
0x4cd2f42c   300  sub csp, jssp, #0x10 (16)
0x4cd2f430   304  stp x10, x0, [jssp, #-16]!
0x4cd2f434   308  movz x0, #0x2
0x4cd2f438   312  movz x1, #0x5b88
0x4cd2f43c   316  movk x1, #0xe2, lsl #16
0x4cd2f440   320  ldr x16, pc+64 (addr 0x000000004cd2f480)    ;; code: STUB, CEntryStub, minor: 5
0x4cd2f444   324  blr x16
0x4cd2f448   328  str x0, [jssp, #16]
0x4cd2f44c   332  ldr x16, pc+60 (addr 0x000000004cd2f488)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd2f450   336  blr x16
0x4cd2f454   340  ldr lr, [jssp, #16]
0x4cd2f458   344  ldp xzr, fp, [jssp], #24
0x4cd2f45c   348  b #-0x108 (addr 0x4cd2f354)
0x4cd2f460   352  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0x4cd2f464   356  d63f03e0       constant
0x4cd2f468   360  21004241       constant
0x4cd2f46c   364  00000000       constant
0x4cd2f470   368  2a805d81       constant
0x4cd2f474   372  00000000       constant
0x4cd2f478   376  4cd06820       constant
0x4cd2f47c   380  00000000       constant
0x4cd2f480   384  4cd06260       constant
0x4cd2f484   388  00000000       constant
0x4cd2f488   392  4cd068e0       constant
0x4cd2f48c   396  00000000       constant
0x4cd2f490   400  movz x16, #0x0
0x4cd2f494   404  sub csp, jssp, #0x10 (16)
0x4cd2f498   408  stp fp, lr, [jssp, #-16]!
0x4cd2f49c   412  bl #+0xc (addr 0x4cd2f4a8)
0x4cd2f4a0   416  movz x16, #0x8
0x4cd2f4a4   420  bl #+0x14 (addr 0x4cd2f4b8)
0x4cd2f4a8   424  movz x17, #0xa00000000
0x4cd2f4ac   428  sub csp, jssp, #0x10 (16)
0x4cd2f4b0   432  stp x17, cp, [jssp, #-16]!
0x4cd2f4b4   436  add fp, jssp, #0x10 (16)
0x4cd2f4b8   440  ldr x17, pc+24 (addr 0x000000004cd2f4d0)    ;; lazy deoptimization bailout 0
0x4cd2f4bc   444  add x17, x17, x16
0x4cd2f4c0   448  br x17
0x4cd2f4c4   452  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd2f4c8   456  d63f03e0       constant
0x4cd2f4cc   460  d503201f       constant
0x4cd2f4d0   464  4cb06000       constant
0x4cd2f4d4   468  00000000       constant


Safepoints (size = 21)
0x4cd2f448   328  000 | x2 | x4 | x5 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 25)
0x4cd2f314  embedded object  (0x21004241 <undefined>)
0x4cd2f38c  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd2f41c  code target (STUB)  (0x4cd06820)
0x4cd2f440  code target (STUB)  (0x4cd06260)
0x4cd2f44c  code target (STUB)  (0x4cd068e0)
0x4cd2f460  constant pool (size 48)
0x4cd2f4b8  runtime entry
0x4cd2f4c4  constant pool (size 20)


kind = STORE_IC
major_key = VectorStoreICTrampolineStub
ic_state = GENERIC
extra_ic_state = STRICT
name = VectorStoreICTrampolineStub
compiler = unknown
Instructions (size = 440)
0x4cd2f560     0  ldur x3, [fp, #-16]
0x4cd2f564     4  ldur x3, [x3, #31]
0x4cd2f568     8  ldur x3, [x3, #87]
0x4cd2f56c    12  add x5, x3, x4, asr #29
0x4cd2f570    16  ldur x5, [x5, #15]
0x4cd2f574    20  tbz w1, #0, #+0x174 (addr 0x4cd2f6e8)
0x4cd2f578    24  ldur x6, [x1, #-1]
0x4cd2f57c    28  ldur x7, [x5, #7]
0x4cd2f580    32  cmp x7, x6
0x4cd2f584    36  b.ne #+0x14 (addr 0x4cd2f598)
0x4cd2f588    40  add x5, x3, x4, asr #29
0x4cd2f58c    44  ldur x5, [x5, #23]
0x4cd2f590    48  add x5, x5, #0x5f (95)
0x4cd2f594    52  br x5
0x4cd2f598    56  ldur x7, [x5, #-1]
0x4cd2f59c    60  ldr x16, [x26, #224]
0x4cd2f5a0    64  cmp x7, x16
0x4cd2f5a4    68  b.ne #+0x5c (addr 0x4cd2f600)
0x4cd2f5a8    72  ldur x7, [x5, #15]
0x4cd2f5ac    76  ldur x7, [x7, #7]
0x4cd2f5b0    80  cmp x6, x7
0x4cd2f5b4    84  b.ne #+0x10 (addr 0x4cd2f5c4)
0x4cd2f5b8    88  ldur x5, [x5, #23]
0x4cd2f5bc    92  add x5, x5, #0x5f (95)
0x4cd2f5c0    96  br x5
0x4cd2f5c4   100  ldur x8, [x5, #7]
0x4cd2f5c8   104  add x8, x5, x8, asr #29
0x4cd2f5cc   108  add x8, x8, #0xf (15)
0x4cd2f5d0   112  add x5, x5, #0x1f (31)
0x4cd2f5d4   116  ldr x7, [x5]
0x4cd2f5d8   120  ldur x7, [x7, #7]
0x4cd2f5dc   124  cmp x6, x7
0x4cd2f5e0   128  b.ne #+0x10 (addr 0x4cd2f5f0)
0x4cd2f5e4   132  ldr x5, [x5, #8]
0x4cd2f5e8   136  add x5, x5, #0x5f (95)
0x4cd2f5ec   140  br x5
0x4cd2f5f0   144  add x5, x5, #0x10 (16)
0x4cd2f5f4   148  cmp x5, x8
0x4cd2f5f8   152  b.lt #-0x24 (addr 0x4cd2f5d4)
0x4cd2f5fc   156  b #+0xcc (addr 0x4cd2f6c8)
0x4cd2f600   160  ldr x16, [x26, #2400]
0x4cd2f604   164  cmp x5, x16
0x4cd2f608   168  b.ne #+0xc0 (addr 0x4cd2f6c8)
0x4cd2f60c   172  tbz w1, #0, #+0xbc (addr 0x4cd2f6c8)
0x4cd2f610   176  ldur x5, [x2, #7]
0x4cd2f614   180  ldur x6, [x1, #-1]
0x4cd2f618   184  add x5, x5, x6
0x4cd2f61c   188  movz x16, #0x6902
0x4cd2f620   192  eor x5, x5, x16
0x4cd2f624   196  ubfx x5, x5, #2, #11
0x4cd2f628   200  add x8, x5, x5, lsl #1
0x4cd2f62c   204  ldr x6, pc+204 (addr 0x000000004cd2f6f8)    ;; external reference (StubCache::primary_->key)
0x4cd2f630   208  add x6, x6, x8, lsl #3
0x4cd2f634   212  ldr x7, [x6]
0x4cd2f638   216  cmp x2, x7
0x4cd2f63c   220  b.ne #+0x34 (addr 0x4cd2f670)
0x4cd2f640   224  ldr x7, [x6, #16]
0x4cd2f644   228  ldur x8, [x1, #-1]
0x4cd2f648   232  cmp x7, x8
0x4cd2f64c   236  b.ne #+0x24 (addr 0x4cd2f670)
0x4cd2f650   240  ldr x6, [x6, #8]
0x4cd2f654   244  ldur w7, [x6, #63]
0x4cd2f658   248  and w7, w7, #0xffffffc7
0x4cd2f65c   252  movz w16, #0x6902
0x4cd2f660   256  cmp w7, w16
0x4cd2f664   260  b.ne #+0xc (addr 0x4cd2f670)
0x4cd2f668   264  add x6, x6, #0x5f (95)
0x4cd2f66c   268  br x6
0x4cd2f670   272  sub x5, x5, x2, lsr #2
0x4cd2f674   276  movz x16, #0x1a40
0x4cd2f678   280  add x5, x5, x16
0x4cd2f67c   284  and x5, x5, #0x1ff
0x4cd2f680   288  add x8, x5, x5, lsl #1
0x4cd2f684   292  ldr x6, pc+124 (addr 0x000000004cd2f700)    ;; external reference (StubCache::secondary_->key)
0x4cd2f688   296  add x6, x6, x8, lsl #3
0x4cd2f68c   300  ldr x7, [x6]
0x4cd2f690   304  cmp x2, x7
0x4cd2f694   308  b.ne #+0x34 (addr 0x4cd2f6c8)
0x4cd2f698   312  ldr x7, [x6, #16]
0x4cd2f69c   316  ldur x8, [x1, #-1]
0x4cd2f6a0   320  cmp x7, x8
0x4cd2f6a4   324  b.ne #+0x24 (addr 0x4cd2f6c8)
0x4cd2f6a8   328  ldr x6, [x6, #8]
0x4cd2f6ac   332  ldur w7, [x6, #63]
0x4cd2f6b0   336  and w7, w7, #0xffffffc7
0x4cd2f6b4   340  movz w16, #0x6902
0x4cd2f6b8   344  cmp w7, w16
0x4cd2f6bc   348  b.ne #+0xc (addr 0x4cd2f6c8)
0x4cd2f6c0   352  add x6, x6, #0x5f (95)
0x4cd2f6c4   356  br x6
0x4cd2f6c8   360  sub csp, jssp, #0x28 (40)
0x4cd2f6cc   364  stp x4, x0, [jssp, #-32]!
0x4cd2f6d0   368  stp x2, x1, [jssp, #16]
0x4cd2f6d4   372  str x3, [jssp, #-8]!
0x4cd2f6d8   376  movz x0, #0x5
0x4cd2f6dc   380  ldr x1, pc+44 (addr 0x000000004cd2f708)    ;; external reference (Runtime::StoreIC_Miss)
0x4cd2f6e0   384  ldr x16, pc+48 (addr 0x000000004cd2f710)    ;; code: STUB, CEntryStub, minor: 4
0x4cd2f6e4   388  br x16
0x4cd2f6e8   392  ldr x6, [x26, #120]
0x4cd2f6ec   396  b #-0x170 (addr 0x4cd2f57c)
0x4cd2f6f0   400  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cd2f6f4   404  d63f03e0       constant
0x4cd2f6f8   408  166f7950       constant
0x4cd2f6fc   412  00000000       constant
0x4cd2f700   416  16703950       constant
0x4cd2f704   420  00000000       constant
0x4cd2f708   424  00c87f60       constant
0x4cd2f70c   428  00000000       constant
0x4cd2f710   432  4cd06060       constant
0x4cd2f714   436  00000000       constant


RelocInfo (size = 19)
0x4cd2f62c  external reference (StubCache::primary_->key)  (0x166f7950)
0x4cd2f684  external reference (StubCache::secondary_->key)  (0x16703950)
0x4cd2f6dc  external reference (Runtime::StoreIC_Miss)  (0xc87f60)
0x4cd2f6e0  code target (STUB)  (0x4cd06060)
0x4cd2f6f0  constant pool (size 40)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 397)
0x4cd30360     0  movz x2, #0xd2c0
0x4cd30364     4  movk x2, #0x166d, lsl #16
0x4cd30368     8  ldp x3, x0, [x2]
0x4cd3036c    12  adds x16, x3, #0x78 (120)
0x4cd30370    16  ccmp x16, x0, #nzCv, lo
0x4cd30374    20  b.hi #+0x84 (addr 0x4cd303f8)
0x4cd30378    24  str x16, [x2]
0x4cd3037c    28  orr x3, x3, #0x1
0x4cd30380    32  ldr x0, pc+232 (addr 0x000000004cd30468)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd30384    36  stur x0, [x3, #-1]
0x4cd30388    40  movz x0, #0xd00000000
0x4cd3038c    44  stur x0, [x3, #7]
0x4cd30390    48  stur x1, [x3, #15]
0x4cd30394    52  stur cp, [x3, #23]
0x4cd30398    56  ldr x0, pc+216 (addr 0x000000004cd30470)    ;; object: 0x21004519 <the hole>
0x4cd3039c    60  stur x0, [x3, #31]
0x4cd303a0    64  ldur x0, [cp, #39]
0x4cd303a4    68  stur x0, [x3, #39]
0x4cd303a8    72  ldr x0, pc+208 (addr 0x000000004cd30478)    ;; object: 0x21004241 <undefined>
0x4cd303ac    76  stur x0, [x3, #47]
0x4cd303b0    80  ldr x0, pc+208 (addr 0x000000004cd30480)    ;; object: 0x21004241 <undefined>
0x4cd303b4    84  stur x0, [x3, #55]
0x4cd303b8    88  ldr x0, pc+208 (addr 0x000000004cd30488)    ;; object: 0x21004241 <undefined>
0x4cd303bc    92  stur x0, [x3, #63]
0x4cd303c0    96  ldr x0, pc+208 (addr 0x000000004cd30490)    ;; object: 0x21004241 <undefined>
0x4cd303c4   100  stur x0, [x3, #71]
0x4cd303c8   104  ldr x0, pc+208 (addr 0x000000004cd30498)    ;; object: 0x21004241 <undefined>
0x4cd303cc   108  stur x0, [x3, #79]
0x4cd303d0   112  ldr x0, pc+208 (addr 0x000000004cd304a0)    ;; object: 0x21004241 <undefined>
0x4cd303d4   116  stur x0, [x3, #87]
0x4cd303d8   120  ldr x0, pc+208 (addr 0x000000004cd304a8)    ;; object: 0x21004241 <undefined>
0x4cd303dc   124  stur x0, [x3, #95]
0x4cd303e0   128  ldr x0, pc+208 (addr 0x000000004cd304b0)    ;; object: 0x21004241 <undefined>
0x4cd303e4   132  stur x0, [x3, #103]
0x4cd303e8   136  ldr x0, pc+208 (addr 0x000000004cd304b8)    ;; object: 0x21004241 <undefined>
0x4cd303ec   140  stur x0, [x3, #111]
0x4cd303f0   144  mov x0, x3
0x4cd303f4   148  ret
0x4cd303f8   152  sub csp, jssp, #0x10 (16)
0x4cd303fc   156  stp fp, lr, [jssp, #-16]!
0x4cd30400   160  movz fp, #0xa00000000
0x4cd30404   164  sub csp, jssp, #0x8 (8)
0x4cd30408   168  str fp, [jssp, #-8]!
0x4cd3040c   172  add fp, jssp, #0x8 (8)
0x4cd30410   176  movz x3, #0x0
0x4cd30414   180  mov x16, lr
0x4cd30418   184  ldr x17, pc+168 (addr 0x000000004cd304c0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd3041c   188  blr x17
0x4cd30420   192  movz x0, #0x7800000000
0x4cd30424   196  movz x10, #0x0
0x4cd30428   200  sub csp, jssp, #0x10 (16)
0x4cd3042c   204  stp x10, x0, [jssp, #-16]!
0x4cd30430   208  movz x0, #0x2
0x4cd30434   212  movz x1, #0x5b88
0x4cd30438   216  movk x1, #0xe2, lsl #16
0x4cd3043c   220  ldr x16, pc+140 (addr 0x000000004cd304c8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd30440   224  blr x16
0x4cd30444   228  str x0, [jssp, #24]
0x4cd30448   232  ldr x16, pc+136 (addr 0x000000004cd304d0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd3044c   236  blr x16
0x4cd30450   240  ldr lr, [jssp, #16]
0x4cd30454   244  ldp xzr, fp, [jssp], #24
0x4cd30458   248  b #-0xd8 (addr 0x4cd30380)
0x4cd3045c   252  580003df       constant pool begin (num_const = 30)    ;; constant pool
0x4cd30460   256  d63f03e0       constant
0x4cd30464   260  d503201f       constant
0x4cd30468   264  2a806149       constant
0x4cd3046c   268  00000000       constant
0x4cd30470   272  21004519       constant
0x4cd30474   276  00000000       constant
0x4cd30478   280  21004241       constant
0x4cd3047c   284  00000000       constant
0x4cd30480   288  21004241       constant
0x4cd30484   292  00000000       constant
0x4cd30488   296  21004241       constant
0x4cd3048c   300  00000000       constant
0x4cd30490   304  21004241       constant
0x4cd30494   308  00000000       constant
0x4cd30498   312  21004241       constant
0x4cd3049c   316  00000000       constant
0x4cd304a0   320  21004241       constant
0x4cd304a4   324  00000000       constant
0x4cd304a8   328  21004241       constant
0x4cd304ac   332  00000000       constant
0x4cd304b0   336  21004241       constant
0x4cd304b4   340  00000000       constant
0x4cd304b8   344  21004241       constant
0x4cd304bc   348  00000000       constant
0x4cd304c0   352  4cd06820       constant
0x4cd304c4   356  00000000       constant
0x4cd304c8   360  4cd06260       constant
0x4cd304cc   364  00000000       constant
0x4cd304d0   368  4cd068e0       constant
0x4cd304d4   372  00000000       constant


Safepoints (size = 21)
0x4cd30444   228  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 20)
0x4cd30380  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd30398  embedded object  (0x21004519 <the hole>)
0x4cd303a8  embedded object  (0x21004241 <undefined>)
0x4cd303b0  embedded object  (0x21004241 <undefined>)
0x4cd303b8  embedded object  (0x21004241 <undefined>)
0x4cd303c0  embedded object  (0x21004241 <undefined>)
0x4cd303c8  embedded object  (0x21004241 <undefined>)
0x4cd303d0  embedded object  (0x21004241 <undefined>)
0x4cd303d8  embedded object  (0x21004241 <undefined>)
0x4cd303e0  embedded object  (0x21004241 <undefined>)
0x4cd303e8  embedded object  (0x21004241 <undefined>)
0x4cd30418  code target (STUB)  (0x4cd06820)
0x4cd3043c  code target (STUB)  (0x4cd06260)
0x4cd30448  code target (STUB)  (0x4cd068e0)
0x4cd3045c  constant pool (size 124)


kind = STUB
major_key = FastNewClosureStub
name = FastNewClosureStub
compiler = crankshaft
Instructions (size = 773)
0x4cd30560     0  movz x1, #0xd2c0
0x4cd30564     4  movk x1, #0x166d, lsl #16
0x4cd30568     8  ldp x3, x0, [x1]
0x4cd3056c    12  adds x16, x3, #0x48 (72)
0x4cd30570    16  ccmp x16, x0, #nzCv, lo
0x4cd30574    20  b.hi #+0x1bc (addr 0x4cd30730)
0x4cd30578    24  str x16, [x1]
0x4cd3057c    28  orr x3, x3, #0x1
0x4cd30580    32  ldur x0, [cp, #39]
0x4cd30584    36  movz x16, #0x297
0x4cd30588    40  ldr x1, [x0, x16]
0x4cd3058c    44  stur x1, [x3, #-1]
0x4cd30590    48  ldr x1, pc+528 (addr 0x000000004cd307a0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd30594    52  stur x1, [x3, #7]
0x4cd30598    56  ldr x1, pc+528 (addr 0x000000004cd307a8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd3059c    60  stur x1, [x3, #15]
0x4cd305a0    64  ldr x1, pc+528 (addr 0x000000004cd307b0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd305a4    68  stur x1, [x3, #47]
0x4cd305a8    72  ldr x1, pc+528 (addr 0x000000004cd307b8)    ;; object: 0x21004519 <the hole>
0x4cd305ac    76  stur x1, [x3, #23]
0x4cd305b0    80  stur x2, [x3, #31]
0x4cd305b4    84  stur cp, [x3, #39]
0x4cd305b8    88  ldur x1, [x2, #23]
0x4cd305bc    92  movz x4, #0x0
0x4cd305c0    96  cmp x1, x4
0x4cd305c4   100  b.eq #+0x150 (addr 0x4cd30714)
0x4cd305c8   104  ldur w4, [x1, #11]
0x4cd305cc   108  subs w4, w4, #0x4 (4)
0x4cd305d0   112  b.vs #+0x230 (addr 0x4cd30800)
0x4cd305d4   116  mov x5, x4
0x4cd305d8   120  cmp w5, #0x1 (1)
0x4cd305dc   124  b.lt #+0xb4 (addr 0x4cd30690)
0x4cd305e0   128  add x4, x1, #0xf (15)
0x4cd305e4   132  ldr x6, [x4, w5, sxtw #3]
0x4cd305e8   136  ldur x4, [x6, #7]
0x4cd305ec   140  add x6, x1, #0x27 (39)
0x4cd305f0   144  ldr x7, [x6, w5, sxtw #3]
0x4cd305f4   148  add x6, x1, #0x17 (23)
0x4cd305f8   152  ldr x8, [x6, w5, sxtw #3]
0x4cd305fc   156  ldur x6, [x8, #7]
0x4cd30600   160  cmp x0, x4
0x4cd30604   164  b.ne #+0x1c (addr 0x4cd30620)
0x4cd30608   168  mov x4, #0xffffffff00000000
0x4cd3060c   172  cmp x7, x4
0x4cd30610   176  b.ne #+0x10 (addr 0x4cd30620)
0x4cd30614   180  movz x4, #0x0
0x4cd30618   184  cmp x6, x4
0x4cd3061c   188  b.ne #+0xc (addr 0x4cd30628)
0x4cd30620   192  sub w5, w5, #0x4 (4)
0x4cd30624   196  b #-0x4c (addr 0x4cd305d8)
0x4cd30628   200  add x4, x1, #0x1f (31)
0x4cd3062c   204  ldr x7, [x4, w5, sxtw #3]
0x4cd30630   208  ldur x7, [x7, #7]
0x4cd30634   212  movz x4, #0x0
0x4cd30638   216  cmp x7, x4
0x4cd3063c   220  b.eq #+0x50 (addr 0x4cd3068c)
0x4cd30640   224  add x4, x6, #0x5f (95)
0x4cd30644   228  stur x4, [x3, #55]
0x4cd30648   232  stur x7, [x3, #47]
0x4cd3064c   236  movz x16, #0x557
0x4cd30650   240  ldr x4, [x0, x16]
0x4cd30654   244  stur x4, [x3, #63]
0x4cd30658   248  mov x4, x3
0x4cd3065c   252  movz x16, #0x557
0x4cd30660   256  str x4, [x0, x16]
0x4cd30664   260  add x6, x0, #0x557 (1367)
0x4cd30668   264  and x4, x0, #0xfffffffffff00000
0x4cd3066c   268  ldr x4, [x4, #8]
0x4cd30670   272  tbz w4, #2, #+0x18 (addr 0x4cd30688)
0x4cd30674   276  sub csp, jssp, #0x8 (8)
0x4cd30678   280  str lr, [jssp, #-8]!
0x4cd3067c   284  ldr x16, pc+324 (addr 0x000000004cd307c0)    ;; code: STUB, RecordWriteStub, minor: 71808
0x4cd30680   288  blr x16
0x4cd30684   292  ldr lr, [jssp], #8
0x4cd30688   296  b #+0x8 (addr 0x4cd30690)
0x4cd3068c   300  b #+0x184 (addr 0x4cd30810)
0x4cd30690   304  cmp w5, #0x1 (1)
0x4cd30694   308  b.ge #+0x94 (addr 0x4cd30728)
0x4cd30698   312  ldur x1, [x1, #15]
0x4cd3069c   316  ldur x1, [x1, #7]
0x4cd306a0   320  movz x4, #0x0
0x4cd306a4   324  cmp x1, x4
0x4cd306a8   328  b.eq #+0x54 (addr 0x4cd306fc)
0x4cd306ac   332  add x1, x1, #0x5f (95)
0x4cd306b0   336  stur x1, [x3, #55]
0x4cd306b4   340  ldr x1, pc+276 (addr 0x000000004cd307c8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd306b8   344  stur x1, [x3, #47]
0x4cd306bc   348  movz x16, #0x557
0x4cd306c0   352  ldr x1, [x0, x16]
0x4cd306c4   356  stur x1, [x3, #63]
0x4cd306c8   360  mov x1, x3
0x4cd306cc   364  movz x16, #0x557
0x4cd306d0   368  str x1, [x0, x16]
0x4cd306d4   372  add x2, x0, #0x557 (1367)
0x4cd306d8   376  and x1, x0, #0xfffffffffff00000
0x4cd306dc   380  ldr x1, [x1, #8]
0x4cd306e0   384  tbz w1, #2, #+0x18 (addr 0x4cd306f8)
0x4cd306e4   388  sub csp, jssp, #0x8 (8)
0x4cd306e8   392  str lr, [jssp, #-8]!
0x4cd306ec   396  ldr x16, pc+228 (addr 0x000000004cd307d0)    ;; code: STUB, RecordWriteStub, minor: 67616
0x4cd306f0   400  blr x16
0x4cd306f4   404  ldr lr, [jssp], #8
0x4cd306f8   408  b #+0x30 (addr 0x4cd30728)
0x4cd306fc   412  ldr x0, pc+220 (addr 0x000000004cd307d8)    ;; object: 0x21004241 <undefined>
0x4cd30700   416  stur x0, [x3, #63]
0x4cd30704   420  ldur x0, [x2, #15]
0x4cd30708   424  add x0, x0, #0x5f (95)
0x4cd3070c   428  stur x0, [x3, #55]
0x4cd30710   432  b #+0x18 (addr 0x4cd30728)
0x4cd30714   436  ldr x0, pc+204 (addr 0x000000004cd307e0)    ;; object: 0x21004241 <undefined>
0x4cd30718   440  stur x0, [x3, #63]
0x4cd3071c   444  ldur x0, [x2, #15]
0x4cd30720   448  add x0, x0, #0x5f (95)
0x4cd30724   452  stur x0, [x3, #55]
0x4cd30728   456  mov x0, x3
0x4cd3072c   460  ret
0x4cd30730   464  sub csp, jssp, #0x10 (16)
0x4cd30734   468  stp fp, lr, [jssp, #-16]!
0x4cd30738   472  movz fp, #0xa00000000
0x4cd3073c   476  sub csp, jssp, #0x8 (8)
0x4cd30740   480  str fp, [jssp, #-8]!
0x4cd30744   484  add fp, jssp, #0x8 (8)
0x4cd30748   488  movz x3, #0x0
0x4cd3074c   492  mov x16, lr
0x4cd30750   496  ldr x17, pc+152 (addr 0x000000004cd307e8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd30754   500  blr x17
0x4cd30758   504  movz x0, #0x4800000000
0x4cd3075c   508  movz x10, #0x0
0x4cd30760   512  sub csp, jssp, #0x10 (16)
0x4cd30764   516  stp x10, x0, [jssp, #-16]!
0x4cd30768   520  movz x0, #0x2
0x4cd3076c   524  movz x1, #0x5b88
0x4cd30770   528  movk x1, #0xe2, lsl #16
0x4cd30774   532  ldr x16, pc+124 (addr 0x000000004cd307f0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd30778   536  blr x16
0x4cd3077c   540  str x0, [jssp, #24]
0x4cd30780   544  ldr x16, pc+120 (addr 0x000000004cd307f8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd30784   548  blr x16
0x4cd30788   552  ldr lr, [jssp, #16]
0x4cd3078c   556  ldp xzr, fp, [jssp], #24
0x4cd30790   560  b #-0x210 (addr 0x4cd30580)
0x4cd30794   564  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0x4cd30798   568  d63f03e0       constant
0x4cd3079c   572  d503201f       constant
0x4cd307a0   576  21004201       constant
0x4cd307a4   580  00000000       constant
0x4cd307a8   584  21004201       constant
0x4cd307ac   588  00000000       constant
0x4cd307b0   592  21004201       constant
0x4cd307b4   596  00000000       constant
0x4cd307b8   600  21004519       constant
0x4cd307bc   604  00000000       constant
0x4cd307c0   608  4cd2d2c0       constant
0x4cd307c4   612  00000000       constant
0x4cd307c8   616  21004201       constant
0x4cd307cc   620  00000000       constant
0x4cd307d0   624  4cd2daa0       constant
0x4cd307d4   628  00000000       constant
0x4cd307d8   632  21004241       constant
0x4cd307dc   636  00000000       constant
0x4cd307e0   640  21004241       constant
0x4cd307e4   644  00000000       constant
0x4cd307e8   648  4cd06820       constant
0x4cd307ec   652  00000000       constant
0x4cd307f0   656  4cd06260       constant
0x4cd307f4   660  00000000       constant
0x4cd307f8   664  4cd068e0       constant
0x4cd307fc   668  00000000       constant
0x4cd30800   672  movz x16, #0x0
0x4cd30804   676  sub csp, jssp, #0x10 (16)
0x4cd30808   680  stp fp, lr, [jssp, #-16]!
0x4cd3080c   684  bl #+0x14 (addr 0x4cd30820)
0x4cd30810   688  movz x16, #0x8
0x4cd30814   692  sub csp, jssp, #0x10 (16)
0x4cd30818   696  stp fp, lr, [jssp, #-16]!
0x4cd3081c   700  bl #+0x4 (addr 0x4cd30820)
0x4cd30820   704  movz x17, #0xa00000000
0x4cd30824   708  sub csp, jssp, #0x10 (16)
0x4cd30828   712  stp x17, cp, [jssp, #-16]!
0x4cd3082c   716  add fp, jssp, #0x10 (16)
0x4cd30830   720  ldr x17, pc+24 (addr 0x000000004cd30848)    ;; lazy deoptimization bailout 0
0x4cd30834   724  add x17, x17, x16
0x4cd30838   728  br x17
0x4cd3083c   732  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd30840   736  d63f03e0       constant
0x4cd30844   740  d503201f       constant
0x4cd30848   744  4cb06000       constant
0x4cd3084c   748  00000000       constant


Safepoints (size = 21)
0x4cd3077c   540  000 | x2 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0x4cd30590  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd30598  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd305a0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd305a8  embedded object  (0x21004519 <the hole>)
0x4cd3067c  code target (STUB)  (0x4cd2d2c0)
0x4cd306b4  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd306ec  code target (STUB)  (0x4cd2daa0)
0x4cd306fc  embedded object  (0x21004241 <undefined>)
0x4cd30714  embedded object  (0x21004241 <undefined>)
0x4cd30750  code target (STUB)  (0x4cd06820)
0x4cd30774  code target (STUB)  (0x4cd06260)
0x4cd30780  code target (STUB)  (0x4cd068e0)
0x4cd30794  constant pool (size 108)
0x4cd30830  runtime entry
0x4cd3083c  constant pool (size 20)


kind = LOAD_IC
major_key = LoadICTrampolineStub
ic_state = GENERIC
extra_ic_state = 1
name = LoadICTrampolineStub
compiler = unknown
Instructions (size = 440)
0x4cd308e0     0  ldur x3, [fp, #-16]
0x4cd308e4     4  ldur x3, [x3, #31]
0x4cd308e8     8  ldur x3, [x3, #87]
0x4cd308ec    12  add x4, x3, x0, asr #29
0x4cd308f0    16  ldur x4, [x4, #15]
0x4cd308f4    20  tbz w1, #0, #+0x170 (addr 0x4cd30a64)
0x4cd308f8    24  ldur x5, [x1, #-1]
0x4cd308fc    28  ldur x6, [x4, #7]
0x4cd30900    32  cmp x6, x5
0x4cd30904    36  b.ne #+0x14 (addr 0x4cd30918)
0x4cd30908    40  add x4, x3, x0, asr #29
0x4cd3090c    44  ldur x4, [x4, #23]
0x4cd30910    48  add x4, x4, #0x5f (95)
0x4cd30914    52  br x4
0x4cd30918    56  ldur x6, [x4, #-1]
0x4cd3091c    60  ldr x16, [x26, #224]
0x4cd30920    64  cmp x6, x16
0x4cd30924    68  b.ne #+0x5c (addr 0x4cd30980)
0x4cd30928    72  ldur x6, [x4, #15]
0x4cd3092c    76  ldur x6, [x6, #7]
0x4cd30930    80  cmp x5, x6
0x4cd30934    84  b.ne #+0x10 (addr 0x4cd30944)
0x4cd30938    88  ldur x4, [x4, #23]
0x4cd3093c    92  add x4, x4, #0x5f (95)
0x4cd30940    96  br x4
0x4cd30944   100  ldur x7, [x4, #7]
0x4cd30948   104  add x7, x4, x7, asr #29
0x4cd3094c   108  add x7, x7, #0xf (15)
0x4cd30950   112  add x4, x4, #0x1f (31)
0x4cd30954   116  ldr x6, [x4]
0x4cd30958   120  ldur x6, [x6, #7]
0x4cd3095c   124  cmp x5, x6
0x4cd30960   128  b.ne #+0x10 (addr 0x4cd30970)
0x4cd30964   132  ldr x4, [x4, #8]
0x4cd30968   136  add x4, x4, #0x5f (95)
0x4cd3096c   140  br x4
0x4cd30970   144  add x4, x4, #0x10 (16)
0x4cd30974   148  cmp x4, x7
0x4cd30978   152  b.lt #-0x24 (addr 0x4cd30954)
0x4cd3097c   156  b #+0xcc (addr 0x4cd30a48)
0x4cd30980   160  ldr x16, [x26, #2400]
0x4cd30984   164  cmp x4, x16
0x4cd30988   168  b.ne #+0xc0 (addr 0x4cd30a48)
0x4cd3098c   172  tbz w1, #0, #+0xbc (addr 0x4cd30a48)
0x4cd30990   176  ldur x4, [x2, #7]
0x4cd30994   180  ldur x5, [x1, #-1]
0x4cd30998   184  add x4, x4, x5
0x4cd3099c   188  movz x16, #0x5102
0x4cd309a0   192  eor x4, x4, x16
0x4cd309a4   196  ubfx x4, x4, #2, #11
0x4cd309a8   200  add x7, x4, x4, lsl #1
0x4cd309ac   204  ldr x5, pc+204 (addr 0x000000004cd30a78)    ;; external reference (StubCache::primary_->key)
0x4cd309b0   208  add x5, x5, x7, lsl #3
0x4cd309b4   212  ldr x6, [x5]
0x4cd309b8   216  cmp x2, x6
0x4cd309bc   220  b.ne #+0x34 (addr 0x4cd309f0)
0x4cd309c0   224  ldr x6, [x5, #16]
0x4cd309c4   228  ldur x7, [x1, #-1]
0x4cd309c8   232  cmp x6, x7
0x4cd309cc   236  b.ne #+0x24 (addr 0x4cd309f0)
0x4cd309d0   240  ldr x5, [x5, #8]
0x4cd309d4   244  ldur w6, [x5, #63]
0x4cd309d8   248  and w6, w6, #0xffffffc7
0x4cd309dc   252  movz w16, #0x5102
0x4cd309e0   256  cmp w6, w16
0x4cd309e4   260  b.ne #+0xc (addr 0x4cd309f0)
0x4cd309e8   264  add x5, x5, #0x5f (95)
0x4cd309ec   268  br x5
0x4cd309f0   272  sub x4, x4, x2, lsr #2
0x4cd309f4   276  movz x16, #0x1440
0x4cd309f8   280  add x4, x4, x16
0x4cd309fc   284  and x4, x4, #0x1ff
0x4cd30a00   288  add x7, x4, x4, lsl #1
0x4cd30a04   292  ldr x5, pc+124 (addr 0x000000004cd30a80)    ;; external reference (StubCache::secondary_->key)
0x4cd30a08   296  add x5, x5, x7, lsl #3
0x4cd30a0c   300  ldr x6, [x5]
0x4cd30a10   304  cmp x2, x6
0x4cd30a14   308  b.ne #+0x34 (addr 0x4cd30a48)
0x4cd30a18   312  ldr x6, [x5, #16]
0x4cd30a1c   316  ldur x7, [x1, #-1]
0x4cd30a20   320  cmp x6, x7
0x4cd30a24   324  b.ne #+0x24 (addr 0x4cd30a48)
0x4cd30a28   328  ldr x5, [x5, #8]
0x4cd30a2c   332  ldur w6, [x5, #63]
0x4cd30a30   336  and w6, w6, #0xffffffc7
0x4cd30a34   340  movz w16, #0x5102
0x4cd30a38   344  cmp w6, w16
0x4cd30a3c   348  b.ne #+0xc (addr 0x4cd30a48)
0x4cd30a40   352  add x5, x5, #0x5f (95)
0x4cd30a44   356  br x5
0x4cd30a48   360  sub csp, jssp, #0x20 (32)
0x4cd30a4c   364  stp x3, x0, [jssp, #-32]!
0x4cd30a50   368  stp x2, x1, [jssp, #16]
0x4cd30a54   372  movz x0, #0x4
0x4cd30a58   376  ldr x1, pc+48 (addr 0x000000004cd30a88)    ;; external reference (Runtime::LoadIC_Miss)
0x4cd30a5c   380  ldr x16, pc+52 (addr 0x000000004cd30a90)    ;; code: STUB, CEntryStub, minor: 4
0x4cd30a60   384  br x16
0x4cd30a64   388  ldr x5, [x26, #120]
0x4cd30a68   392  b #-0x16c (addr 0x4cd308fc)
0x4cd30a6c   396  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0x4cd30a70   400  d63f03e0       constant
0x4cd30a74   404  d503201f       constant
0x4cd30a78   408  166f7950       constant
0x4cd30a7c   412  00000000       constant
0x4cd30a80   416  16703950       constant
0x4cd30a84   420  00000000       constant
0x4cd30a88   424  00c86e20       constant
0x4cd30a8c   428  00000000       constant
0x4cd30a90   432  4cd06060       constant
0x4cd30a94   436  00000000       constant


RelocInfo (size = 19)
0x4cd309ac  external reference (StubCache::primary_->key)  (0x166f7950)
0x4cd30a04  external reference (StubCache::secondary_->key)  (0x16703950)
0x4cd30a58  external reference (Runtime::LoadIC_Miss)  (0xc86e20)
0x4cd30a5c  code target (STUB)  (0x4cd06060)
0x4cd30a6c  constant pool (size 44)


kind = STUB
major_key = ArrayConstructorStub
name = ArrayConstructorStub_One
compiler = unknown
Instructions (size = 344)
0x4cd30b00     0  ldur cp, [x1, #39]
0x4cd30b04     4  cmp x3, x1
0x4cd30b08     8  b.ne #+0xc8 (addr 0x4cd30bd0)
0x4cd30b0c    12  ldr x16, [x26, #40]
0x4cd30b10    16  cmp x2, x16
0x4cd30b14    20  b.eq #+0xa4 (addr 0x4cd30bb8)
0x4cd30b18    24  ldursw x3, [x2, #11]
0x4cd30b1c    28  and x3, x3, #0x7fff
0x4cd30b20    32  tbnz w3, #0, #+0x20 (addr 0x4cd30b40)
0x4cd30b24    36  ldr x10, [jssp]
0x4cd30b28    40  cbz x10, #+0x18 (addr 0x4cd30b40)
0x4cd30b2c    44  orr x3, x3, #0x1
0x4cd30b30    48  ldur x11, [x2, #7]
0x4cd30b34    52  movz x16, #0x100000000
0x4cd30b38    56  add x11, x11, x16
0x4cd30b3c    60  stur x11, [x2, #7]
0x4cd30b40    64  cbnz x3, #+0xc (addr 0x4cd30b4c)
0x4cd30b44    68  ldr x16, pc+180 (addr 0x000000004cd30bf8)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 0
0x4cd30b48    72  br x16
0x4cd30b4c    76  cmp x3, #0x1 (1)
0x4cd30b50    80  b.ne #+0xc (addr 0x4cd30b5c)
0x4cd30b54    84  ldr x16, pc+172 (addr 0x000000004cd30c00)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 1
0x4cd30b58    88  br x16
0x4cd30b5c    92  cmp x3, #0x4 (4)
0x4cd30b60    96  b.ne #+0xc (addr 0x4cd30b6c)
0x4cd30b64   100  ldr x16, pc+164 (addr 0x000000004cd30c08)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 4
0x4cd30b68   104  br x16
0x4cd30b6c   108  cmp x3, #0x5 (5)
0x4cd30b70   112  b.ne #+0xc (addr 0x4cd30b7c)
0x4cd30b74   116  ldr x16, pc+156 (addr 0x000000004cd30c10)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 5
0x4cd30b78   120  br x16
0x4cd30b7c   124  cmp x3, #0x2 (2)
0x4cd30b80   128  b.ne #+0xc (addr 0x4cd30b8c)
0x4cd30b84   132  ldr x16, pc+148 (addr 0x000000004cd30c18)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 2
0x4cd30b88   136  br x16
0x4cd30b8c   140  cmp x3, #0x3 (3)
0x4cd30b90   144  b.ne #+0xc (addr 0x4cd30b9c)
0x4cd30b94   148  ldr x16, pc+140 (addr 0x000000004cd30c20)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 3
0x4cd30b98   152  br x16
0x4cd30b9c   156  movz x0, #0x9f00000000
0x4cd30ba0   160  sub csp, jssp, #0x8 (8)
0x4cd30ba4   164  str x0, [jssp, #-8]!
0x4cd30ba8   168  movz x0, #0x1
0x4cd30bac   172  ldr x1, pc+124 (addr 0x000000004cd30c28)    ;; external reference (Runtime::Abort)
0x4cd30bb0   176  ldr x16, pc+128 (addr 0x000000004cd30c30)    ;; code: STUB, CEntryStub, minor: 4
0x4cd30bb4   180  blr x16
0x4cd30bb8   184  ldr x10, [jssp]
0x4cd30bbc   188  cbz x10, #+0xc (addr 0x4cd30bc8)
0x4cd30bc0   192  ldr x16, pc+120 (addr 0x000000004cd30c38)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 257
0x4cd30bc4   196  br x16
0x4cd30bc8   200  ldr x16, pc+120 (addr 0x000000004cd30c40)    ;; code: STUB, ArraySingleArgumentConstructorStub, minor: 256
0x4cd30bcc   204  br x16
0x4cd30bd0   208  str x1, [jssp, #8]
0x4cd30bd4   212  movz x0, #0x4
0x4cd30bd8   216  sub csp, jssp, #0x10 (16)
0x4cd30bdc   220  stp x2, x3, [jssp, #-16]!
0x4cd30be0   224  ldr x1, pc+104 (addr 0x000000004cd30c48)    ;; external reference (Runtime::NewArray)
0x4cd30be4   228  ldr x16, pc+108 (addr 0x000000004cd30c50)    ;; code: STUB, CEntryStub, minor: 4
0x4cd30be8   232  br x16
0x4cd30bec   236  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0x4cd30bf0   240  d63f03e0       constant
0x4cd30bf4   244  d503201f       constant
0x4cd30bf8   248  4cd082a0       constant
0x4cd30bfc   252  00000000       constant
0x4cd30c00   256  4cd08840       constant
0x4cd30c04   260  00000000       constant
0x4cd30c08   264  4cd08e00       constant
0x4cd30c0c   268  00000000       constant
0x4cd30c10   272  4cd09080       constant
0x4cd30c14   276  00000000       constant
0x4cd30c18   280  4cd09300       constant
0x4cd30c1c   284  00000000       constant
0x4cd30c20   288  4cd09580       constant
0x4cd30c24   292  00000000       constant
0x4cd30c28   296  00eda820       constant
0x4cd30c2c   300  00000000       constant
0x4cd30c30   304  4cd06060       constant
0x4cd30c34   308  00000000       constant
0x4cd30c38   312  4cd08b80       constant
0x4cd30c3c   316  00000000       constant
0x4cd30c40   320  4cd085e0       constant
0x4cd30c44   324  00000000       constant
0x4cd30c48   328  00de2850       constant
0x4cd30c4c   332  00000000       constant
0x4cd30c50   336  4cd06060       constant
0x4cd30c54   340  00000000       constant


RelocInfo (size = 22)
0x4cd30b44  code target (STUB)  (0x4cd082a0)
0x4cd30b54  code target (STUB)  (0x4cd08840)
0x4cd30b64  code target (STUB)  (0x4cd08e00)
0x4cd30b74  code target (STUB)  (0x4cd09080)
0x4cd30b84  code target (STUB)  (0x4cd09300)
0x4cd30b94  code target (STUB)  (0x4cd09580)
0x4cd30bac  external reference (Runtime::Abort)  (0xeda820)
0x4cd30bb0  code target (STUB)  (0x4cd06060)
0x4cd30bc0  code target (STUB)  (0x4cd08b80)
0x4cd30bc8  code target (STUB)  (0x4cd085e0)
0x4cd30be0  external reference (Runtime::NewArray)  (0xde2850)
0x4cd30be4  code target (STUB)  (0x4cd06060)
0x4cd30bec  constant pool (size 108)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 327681
name = CallICStub(args(1), NOT_NULL_OR_UNDEFINED, 
compiler = unknown
Instructions (size = 488)
0x4cd30cc0     0  add x4, x2, x3, asr #29
0x4cd30cc4     4  ldur x4, [x4, #15]
0x4cd30cc8     8  ldur x5, [x4, #7]
0x4cd30ccc    12  cmp x5, x1
0x4cd30cd0    16  b.ne #+0x2c (addr 0x4cd30cfc)
0x4cd30cd4    20  tbz w1, #0, #+0x28 (addr 0x4cd30cfc)
0x4cd30cd8    24  add x2, x2, x3, asr #29
0x4cd30cdc    28  add x2, x2, #0x18 (24)
0x4cd30ce0    32  ldur x3, [x2, #-1]
0x4cd30ce4    36  movz x16, #0x200000000
0x4cd30ce8    40  add x3, x3, x16
0x4cd30cec    44  stur x3, [x2, #-1]
0x4cd30cf0    48  movz x0, #0x1
0x4cd30cf4    52  ldr x16, pc+372 (addr 0x000000004cd30e68)    ;; code: BUILTIN
0x4cd30cf8    56  br x16
0x4cd30cfc    60  ldr x16, [x26, #2400]
0x4cd30d00    64  cmp x4, x16
0x4cd30d04    68  b.eq #+0x78 (addr 0x4cd30d7c)
0x4cd30d08    72  ldur x5, [x4, #-1]
0x4cd30d0c    76  ldr x16, [x26, #2736]
0x4cd30d10    80  cmp x5, x16
0x4cd30d14    84  b.ne #+0x40 (addr 0x4cd30d54)
0x4cd30d18    88  ldur x5, [cp, #39]
0x4cd30d1c    92  ldur x5, [x5, #95]
0x4cd30d20    96  cmp x1, x5
0x4cd30d24   100  b.ne #+0xec (addr 0x4cd30e10)
0x4cd30d28   104  movz x0, #0x1
0x4cd30d2c   108  add x2, x2, x3, asr #29
0x4cd30d30   112  add x2, x2, #0x18 (24)
0x4cd30d34   116  ldur x3, [x2, #-1]
0x4cd30d38   120  movz x16, #0x200000000
0x4cd30d3c   124  add x3, x3, x16
0x4cd30d40   128  stur x3, [x2, #-1]
0x4cd30d44   132  mov x2, x4
0x4cd30d48   136  mov x3, x1
0x4cd30d4c   140  ldr x16, pc+292 (addr 0x000000004cd30e70)    ;; code: STUB, ArrayConstructorStub, minor: 2
0x4cd30d50   144  br x16
0x4cd30d54   148  ldr x16, [x26, #2568]
0x4cd30d58   152  cmp x4, x16
0x4cd30d5c   156  b.eq #+0xb4 (addr 0x4cd30e10)
0x4cd30d60   160  ldur x5, [x4, #-1]
0x4cd30d64   164  ldrb w5, [x5, #11]
0x4cd30d68   168  cmp x5, #0xc9 (201)
0x4cd30d6c   172  b.ne #+0xa4 (addr 0x4cd30e10)
0x4cd30d70   176  add x4, x2, x3, asr #29
0x4cd30d74   180  ldr x5, [x26, #2400]
0x4cd30d78   184  stur x5, [x4, #15]
0x4cd30d7c   188  movz x0, #0x1
0x4cd30d80   192  ldr x16, pc+248 (addr 0x000000004cd30e78)    ;; code: BUILTIN
0x4cd30d84   196  br x16
0x4cd30d88   200  tbz w1, #0, #+0x88 (addr 0x4cd30e10)
0x4cd30d8c   204  ldur x5, [x1, #-1]
0x4cd30d90   208  ldrb w5, [x5, #11]
0x4cd30d94   212  cmp x5, #0xc9 (201)
0x4cd30d98   216  b.ne #+0x78 (addr 0x4cd30e10)
0x4cd30d9c   220  ldur x5, [cp, #39]
0x4cd30da0   224  ldur x5, [x5, #95]
0x4cd30da4   228  cmp x1, x5
0x4cd30da8   232  b.eq #+0x68 (addr 0x4cd30e10)
0x4cd30dac   236  ldur x4, [x1, #39]
0x4cd30db0   240  ldur x4, [x4, #39]
0x4cd30db4   244  ldur x5, [cp, #39]
0x4cd30db8   248  cmp x4, x5
0x4cd30dbc   252  b.ne #+0x54 (addr 0x4cd30e10)
0x4cd30dc0   256  movz x5, #0x200000000
0x4cd30dc4   260  adds x4, x2, x3, asr #29
0x4cd30dc8   264  stur x5, [x4, #23]
0x4cd30dcc   268  movz x16, #0xc00000000
0x4cd30dd0   272  sub csp, jssp, #0x10 (16)
0x4cd30dd4   276  stp fp, lr, [jssp, #-16]!
0x4cd30dd8   280  sub csp, jssp, #0x10 (16)
0x4cd30ddc   284  str x16, [jssp, #-8]!
0x4cd30de0   288  ldr x17, pc+160 (addr 0x000000004cd30e80)    ;; object: 0x4cd30c61 <Code: CALL_IC>
0x4cd30de4   292  sub csp, jssp, #0x10 (16)
0x4cd30de8   296  str x17, [jssp, #-8]!
0x4cd30dec   300  add fp, jssp, #0x10 (16)
0x4cd30df0   304  sub csp, jssp, #0x8 (8)
0x4cd30df4   308  str x1, [jssp, #-8]!
0x4cd30df8   312  ldr x16, pc+144 (addr 0x000000004cd30e88)    ;; code: STUB, CreateWeakCellStub, minor: 0
0x4cd30dfc   316  blr x16
0x4cd30e00   320  ldr x1, [jssp], #8
0x4cd30e04   324  mov jssp, fp
0x4cd30e08   328  ldp fp, lr, [jssp], #16
0x4cd30e0c   332  b #-0x11c (addr 0x4cd30cf0)
0x4cd30e10   336  movz x16, #0xc00000000
0x4cd30e14   340  sub csp, jssp, #0x10 (16)
0x4cd30e18   344  stp fp, lr, [jssp, #-16]!
0x4cd30e1c   348  sub csp, jssp, #0x10 (16)
0x4cd30e20   352  str x16, [jssp, #-8]!
0x4cd30e24   356  ldr x17, pc+108 (addr 0x000000004cd30e90)    ;; object: 0x4cd30c61 <Code: CALL_IC>
0x4cd30e28   360  sub csp, jssp, #0x10 (16)
0x4cd30e2c   364  str x17, [jssp, #-8]!
0x4cd30e30   368  add fp, jssp, #0x10 (16)
0x4cd30e34   372  sub csp, jssp, #0x18 (24)
0x4cd30e38   376  stp x3, x2, [jssp, #-24]!
0x4cd30e3c   380  str x1, [jssp, #16]
0x4cd30e40   384  movz x0, #0x3
0x4cd30e44   388  ldr x1, pc+84 (addr 0x000000004cd30e98)    ;; external reference (Runtime::CallIC_Miss)
0x4cd30e48   392  ldr x16, pc+88 (addr 0x000000004cd30ea0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd30e4c   396  blr x16
0x4cd30e50   400  mov x1, x0
0x4cd30e54   404  mov jssp, fp
0x4cd30e58   408  ldp fp, lr, [jssp], #16
0x4cd30e5c   412  b #-0xe0 (addr 0x4cd30d7c)
0x4cd30e60   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4cd30e64   420  d63f03e0       constant
0x4cd30e68   424  4cd1e600       constant
0x4cd30e6c   428  00000000       constant
0x4cd30e70   432  4cd30b00       constant
0x4cd30e74   436  00000000       constant
0x4cd30e78   440  4cd1f6c0       constant
0x4cd30e7c   444  00000000       constant
0x4cd30e80   448  4cd30c61       constant
0x4cd30e84   452  00000000       constant
0x4cd30e88   456  4cd0ddc0       constant
0x4cd30e8c   460  00000000       constant
0x4cd30e90   464  4cd30c61       constant
0x4cd30e94   468  00000000       constant
0x4cd30e98   472  00c86928       constant
0x4cd30e9c   476  00000000       constant
0x4cd30ea0   480  4cd06060       constant
0x4cd30ea4   484  00000000       constant


RelocInfo (size = 19)
0x4cd30cf4  code target (BUILTIN)  (0x4cd1e600)
0x4cd30d4c  code target (STUB)  (0x4cd30b00)
0x4cd30d80  code target (BUILTIN)  (0x4cd1f6c0)
0x4cd30de0  embedded object  (0x4cd30c61 <Code: CALL_IC>)
0x4cd30df8  code target (STUB)  (0x4cd0ddc0)
0x4cd30e24  embedded object  (0x4cd30c61 <Code: CALL_IC>)
0x4cd30e44  external reference (Runtime::CallIC_Miss)  (0xc86928)
0x4cd30e48  code target (STUB)  (0x4cd06060)
0x4cd30e60  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 327681
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0x4cd30f20     0  ldur x2, [fp, #-16]
0x4cd30f24     4  ldur x2, [x2, #31]
0x4cd30f28     8  ldur x2, [x2, #87]
0x4cd30f2c    12  ldr x16, pc+20 (addr 0x000000004cd30f40)    ;; code: CALL_IC, GENERIC
0x4cd30f30    16  br x16
0x4cd30f34    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd30f38    24  d63f03e0       constant
0x4cd30f3c    28  d503201f       constant
0x4cd30f40    32  4cd30cc0       constant
0x4cd30f44    36  00000000       constant


RelocInfo (size = 7)
0x4cd30f2c  code target (CALL_IC)  (0x4cd30cc0)
0x4cd30f34  constant pool (size 20)


kind = STUB
major_key = CallConstructStub
name = CallConstructStub
compiler = unknown
Instructions (size = 424)
0x4cd30fc0     0  tbz w1, #0, #+0x16c (addr 0x4cd3112c)
0x4cd30fc4     4  ldur x10, [x1, #-1]
0x4cd30fc8     8  ldrb w10, [x10, #11]
0x4cd30fcc    12  cmp x10, #0xc9 (201)
0x4cd30fd0    16  b.ne #+0x15c (addr 0x4cd3112c)
0x4cd30fd4    20  add x5, x2, x3, asr #29
0x4cd30fd8    24  ldur x5, [x5, #15]
0x4cd30fdc    28  ldur x12, [x5, #7]
0x4cd30fe0    32  cmp x1, x12
0x4cd30fe4    36  b.eq #+0x118 (addr 0x4cd310fc)
0x4cd30fe8    40  ldr x16, [x26, #2400]
0x4cd30fec    44  cmp x5, x16
0x4cd30ff0    48  b.eq #+0x10c (addr 0x4cd310fc)
0x4cd30ff4    52  ldur x11, [x5, #-1]
0x4cd30ff8    56  ldr x16, [x26, #264]
0x4cd30ffc    60  cmp x11, x16
0x4cd31000    64  b.ne #+0xc (addr 0x4cd3100c)
0x4cd31004    68  tbz w12, #0, #+0x44 (addr 0x4cd31048)
0x4cd31008    72  b #+0x30 (addr 0x4cd31038)
0x4cd3100c    76  ldr x16, [x26, #2736]
0x4cd31010    80  cmp x11, x16
0x4cd31014    84  b.ne #+0x18 (addr 0x4cd3102c)
0x4cd31018    88  ldur x5, [cp, #39]
0x4cd3101c    92  ldur x5, [x5, #95]
0x4cd31020    96  cmp x1, x5
0x4cd31024   100  b.ne #+0x14 (addr 0x4cd31038)
0x4cd31028   104  b #+0xd4 (addr 0x4cd310fc)
0x4cd3102c   108  ldr x16, [x26, #2568]
0x4cd31030   112  cmp x5, x16
0x4cd31034   116  b.eq #+0x14 (addr 0x4cd31048)
0x4cd31038   120  add x5, x2, x3, asr #29
0x4cd3103c   124  ldr x11, [x26, #2400]
0x4cd31040   128  stur x11, [x5, #15]
0x4cd31044   132  b #+0xb8 (addr 0x4cd310fc)
0x4cd31048   136  ldur x5, [cp, #39]
0x4cd3104c   140  ldur x5, [x5, #95]
0x4cd31050   144  cmp x1, x5
0x4cd31054   148  b.ne #+0x58 (addr 0x4cd310ac)
0x4cd31058   152  movz x16, #0xc00000000
0x4cd3105c   156  sub csp, jssp, #0x10 (16)
0x4cd31060   160  stp fp, lr, [jssp, #-16]!
0x4cd31064   164  sub csp, jssp, #0x10 (16)
0x4cd31068   168  str x16, [jssp, #-8]!
0x4cd3106c   172  ldr x17, pc+212 (addr 0x000000004cd31140)    ;; object: 0x4cd30f61 <Code: STUB>
0x4cd31070   176  sub csp, jssp, #0x10 (16)
0x4cd31074   180  str x17, [jssp, #-8]!
0x4cd31078   184  add fp, jssp, #0x10 (16)
0x4cd3107c   188  lsl x0, x0, #32
0x4cd31080   192  sub csp, jssp, #0x20 (32)
0x4cd31084   196  stp x3, x2, [jssp, #-32]!
0x4cd31088   200  stp x1, x0, [jssp, #16]
0x4cd3108c   204  ldr x16, pc+188 (addr 0x000000004cd31148)    ;; code: STUB, CreateAllocationSiteStub, minor: 0
0x4cd31090   208  blr x16
0x4cd31094   212  ldp x1, x0, [jssp, #16]
0x4cd31098   216  ldp x3, x2, [jssp], #32
0x4cd3109c   220  asr x0, x0, #32
0x4cd310a0   224  mov jssp, fp
0x4cd310a4   228  ldp fp, lr, [jssp], #16
0x4cd310a8   232  b #+0x54 (addr 0x4cd310fc)
0x4cd310ac   236  movz x16, #0xc00000000
0x4cd310b0   240  sub csp, jssp, #0x10 (16)
0x4cd310b4   244  stp fp, lr, [jssp, #-16]!
0x4cd310b8   248  sub csp, jssp, #0x10 (16)
0x4cd310bc   252  str x16, [jssp, #-8]!
0x4cd310c0   256  ldr x17, pc+144 (addr 0x000000004cd31150)    ;; object: 0x4cd30f61 <Code: STUB>
0x4cd310c4   260  sub csp, jssp, #0x10 (16)
0x4cd310c8   264  str x17, [jssp, #-8]!
0x4cd310cc   268  add fp, jssp, #0x10 (16)
0x4cd310d0   272  lsl x0, x0, #32
0x4cd310d4   276  sub csp, jssp, #0x20 (32)
0x4cd310d8   280  stp x3, x2, [jssp, #-32]!
0x4cd310dc   284  stp x1, x0, [jssp, #16]
0x4cd310e0   288  ldr x16, pc+120 (addr 0x000000004cd31158)    ;; code: STUB, CreateWeakCellStub, minor: 0
0x4cd310e4   292  blr x16
0x4cd310e8   296  ldp x1, x0, [jssp, #16]
0x4cd310ec   300  ldp x3, x2, [jssp], #32
0x4cd310f0   304  asr x0, x0, #32
0x4cd310f4   308  mov jssp, fp
0x4cd310f8   312  ldp fp, lr, [jssp], #16
0x4cd310fc   316  add x5, x2, x3, asr #29
0x4cd31100   320  ldur x2, [x5, #15]
0x4cd31104   324  ldur x5, [x2, #-1]
0x4cd31108   328  ldr x16, [x26, #2736]
0x4cd3110c   332  cmp x5, x16
0x4cd31110   336  b.eq #+0x8 (addr 0x4cd31118)
0x4cd31114   340  ldr x2, [x26, #40]
0x4cd31118   344  mov x3, x1
0x4cd3111c   348  ldur x4, [x1, #31]
0x4cd31120   352  ldur x4, [x4, #39]
0x4cd31124   356  add x4, x4, #0x5f (95)
0x4cd31128   360  br x4
0x4cd3112c   364  mov x3, x1
0x4cd31130   368  ldr x16, pc+48 (addr 0x000000004cd31160)    ;; code: BUILTIN
0x4cd31134   372  br x16
0x4cd31138   376  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0x4cd3113c   380  d63f03e0       constant
0x4cd31140   384  4cd30f61       constant
0x4cd31144   388  00000000       constant
0x4cd31148   392  4cd0cbc0       constant
0x4cd3114c   396  00000000       constant
0x4cd31150   400  4cd30f61       constant
0x4cd31154   404  00000000       constant
0x4cd31158   408  4cd0ddc0       constant
0x4cd3115c   412  00000000       constant
0x4cd31160   416  4cd20180       constant
0x4cd31164   420  00000000       constant


RelocInfo (size = 15)
0x4cd3106c  embedded object  (0x4cd30f61 <Code: STUB>)
0x4cd3108c  code target (STUB)  (0x4cd0cbc0)
0x4cd310c0  embedded object  (0x4cd30f61 <Code: STUB>)
0x4cd310e0  code target (STUB)  (0x4cd0ddc0)
0x4cd31130  code target (BUILTIN)  (0x4cd20180)
0x4cd31138  constant pool (size 48)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 393217
name = CallICStub(args(1), ANY, 
compiler = unknown
Instructions (size = 488)
0x4cd31c60     0  add x4, x2, x3, asr #29
0x4cd31c64     4  ldur x4, [x4, #15]
0x4cd31c68     8  ldur x5, [x4, #7]
0x4cd31c6c    12  cmp x5, x1
0x4cd31c70    16  b.ne #+0x2c (addr 0x4cd31c9c)
0x4cd31c74    20  tbz w1, #0, #+0x28 (addr 0x4cd31c9c)
0x4cd31c78    24  add x2, x2, x3, asr #29
0x4cd31c7c    28  add x2, x2, #0x18 (24)
0x4cd31c80    32  ldur x3, [x2, #-1]
0x4cd31c84    36  movz x16, #0x200000000
0x4cd31c88    40  add x3, x3, x16
0x4cd31c8c    44  stur x3, [x2, #-1]
0x4cd31c90    48  movz x0, #0x1
0x4cd31c94    52  ldr x16, pc+372 (addr 0x000000004cd31e08)    ;; code: BUILTIN
0x4cd31c98    56  br x16
0x4cd31c9c    60  ldr x16, [x26, #2400]
0x4cd31ca0    64  cmp x4, x16
0x4cd31ca4    68  b.eq #+0x78 (addr 0x4cd31d1c)
0x4cd31ca8    72  ldur x5, [x4, #-1]
0x4cd31cac    76  ldr x16, [x26, #2736]
0x4cd31cb0    80  cmp x5, x16
0x4cd31cb4    84  b.ne #+0x40 (addr 0x4cd31cf4)
0x4cd31cb8    88  ldur x5, [cp, #39]
0x4cd31cbc    92  ldur x5, [x5, #95]
0x4cd31cc0    96  cmp x1, x5
0x4cd31cc4   100  b.ne #+0xec (addr 0x4cd31db0)
0x4cd31cc8   104  movz x0, #0x1
0x4cd31ccc   108  add x2, x2, x3, asr #29
0x4cd31cd0   112  add x2, x2, #0x18 (24)
0x4cd31cd4   116  ldur x3, [x2, #-1]
0x4cd31cd8   120  movz x16, #0x200000000
0x4cd31cdc   124  add x3, x3, x16
0x4cd31ce0   128  stur x3, [x2, #-1]
0x4cd31ce4   132  mov x2, x4
0x4cd31ce8   136  mov x3, x1
0x4cd31cec   140  ldr x16, pc+292 (addr 0x000000004cd31e10)    ;; code: STUB, ArrayConstructorStub, minor: 2
0x4cd31cf0   144  br x16
0x4cd31cf4   148  ldr x16, [x26, #2568]
0x4cd31cf8   152  cmp x4, x16
0x4cd31cfc   156  b.eq #+0xb4 (addr 0x4cd31db0)
0x4cd31d00   160  ldur x5, [x4, #-1]
0x4cd31d04   164  ldrb w5, [x5, #11]
0x4cd31d08   168  cmp x5, #0xc9 (201)
0x4cd31d0c   172  b.ne #+0xa4 (addr 0x4cd31db0)
0x4cd31d10   176  add x4, x2, x3, asr #29
0x4cd31d14   180  ldr x5, [x26, #2400]
0x4cd31d18   184  stur x5, [x4, #15]
0x4cd31d1c   188  movz x0, #0x1
0x4cd31d20   192  ldr x16, pc+248 (addr 0x000000004cd31e18)    ;; code: BUILTIN
0x4cd31d24   196  br x16
0x4cd31d28   200  tbz w1, #0, #+0x88 (addr 0x4cd31db0)
0x4cd31d2c   204  ldur x5, [x1, #-1]
0x4cd31d30   208  ldrb w5, [x5, #11]
0x4cd31d34   212  cmp x5, #0xc9 (201)
0x4cd31d38   216  b.ne #+0x78 (addr 0x4cd31db0)
0x4cd31d3c   220  ldur x5, [cp, #39]
0x4cd31d40   224  ldur x5, [x5, #95]
0x4cd31d44   228  cmp x1, x5
0x4cd31d48   232  b.eq #+0x68 (addr 0x4cd31db0)
0x4cd31d4c   236  ldur x4, [x1, #39]
0x4cd31d50   240  ldur x4, [x4, #39]
0x4cd31d54   244  ldur x5, [cp, #39]
0x4cd31d58   248  cmp x4, x5
0x4cd31d5c   252  b.ne #+0x54 (addr 0x4cd31db0)
0x4cd31d60   256  movz x5, #0x200000000
0x4cd31d64   260  adds x4, x2, x3, asr #29
0x4cd31d68   264  stur x5, [x4, #23]
0x4cd31d6c   268  movz x16, #0xc00000000
0x4cd31d70   272  sub csp, jssp, #0x10 (16)
0x4cd31d74   276  stp fp, lr, [jssp, #-16]!
0x4cd31d78   280  sub csp, jssp, #0x10 (16)
0x4cd31d7c   284  str x16, [jssp, #-8]!
0x4cd31d80   288  ldr x17, pc+160 (addr 0x000000004cd31e20)    ;; object: 0x4cd31c01 <Code: CALL_IC>
0x4cd31d84   292  sub csp, jssp, #0x10 (16)
0x4cd31d88   296  str x17, [jssp, #-8]!
0x4cd31d8c   300  add fp, jssp, #0x10 (16)
0x4cd31d90   304  sub csp, jssp, #0x8 (8)
0x4cd31d94   308  str x1, [jssp, #-8]!
0x4cd31d98   312  ldr x16, pc+144 (addr 0x000000004cd31e28)    ;; code: STUB, CreateWeakCellStub, minor: 0
0x4cd31d9c   316  blr x16
0x4cd31da0   320  ldr x1, [jssp], #8
0x4cd31da4   324  mov jssp, fp
0x4cd31da8   328  ldp fp, lr, [jssp], #16
0x4cd31dac   332  b #-0x11c (addr 0x4cd31c90)
0x4cd31db0   336  movz x16, #0xc00000000
0x4cd31db4   340  sub csp, jssp, #0x10 (16)
0x4cd31db8   344  stp fp, lr, [jssp, #-16]!
0x4cd31dbc   348  sub csp, jssp, #0x10 (16)
0x4cd31dc0   352  str x16, [jssp, #-8]!
0x4cd31dc4   356  ldr x17, pc+108 (addr 0x000000004cd31e30)    ;; object: 0x4cd31c01 <Code: CALL_IC>
0x4cd31dc8   360  sub csp, jssp, #0x10 (16)
0x4cd31dcc   364  str x17, [jssp, #-8]!
0x4cd31dd0   368  add fp, jssp, #0x10 (16)
0x4cd31dd4   372  sub csp, jssp, #0x18 (24)
0x4cd31dd8   376  stp x3, x2, [jssp, #-24]!
0x4cd31ddc   380  str x1, [jssp, #16]
0x4cd31de0   384  movz x0, #0x3
0x4cd31de4   388  ldr x1, pc+84 (addr 0x000000004cd31e38)    ;; external reference (Runtime::CallIC_Miss)
0x4cd31de8   392  ldr x16, pc+88 (addr 0x000000004cd31e40)    ;; code: STUB, CEntryStub, minor: 4
0x4cd31dec   396  blr x16
0x4cd31df0   400  mov x1, x0
0x4cd31df4   404  mov jssp, fp
0x4cd31df8   408  ldp fp, lr, [jssp], #16
0x4cd31dfc   412  b #-0xe0 (addr 0x4cd31d1c)
0x4cd31e00   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4cd31e04   420  d63f03e0       constant
0x4cd31e08   424  4cd1e820       constant
0x4cd31e0c   428  00000000       constant
0x4cd31e10   432  4cd30b00       constant
0x4cd31e14   436  00000000       constant
0x4cd31e18   440  4cd1f820       constant
0x4cd31e1c   444  00000000       constant
0x4cd31e20   448  4cd31c01       constant
0x4cd31e24   452  00000000       constant
0x4cd31e28   456  4cd0ddc0       constant
0x4cd31e2c   460  00000000       constant
0x4cd31e30   464  4cd31c01       constant
0x4cd31e34   468  00000000       constant
0x4cd31e38   472  00c86928       constant
0x4cd31e3c   476  00000000       constant
0x4cd31e40   480  4cd06060       constant
0x4cd31e44   484  00000000       constant


RelocInfo (size = 19)
0x4cd31c94  code target (BUILTIN)  (0x4cd1e820)
0x4cd31cec  code target (STUB)  (0x4cd30b00)
0x4cd31d20  code target (BUILTIN)  (0x4cd1f820)
0x4cd31d80  embedded object  (0x4cd31c01 <Code: CALL_IC>)
0x4cd31d98  code target (STUB)  (0x4cd0ddc0)
0x4cd31dc4  embedded object  (0x4cd31c01 <Code: CALL_IC>)
0x4cd31de4  external reference (Runtime::CallIC_Miss)  (0xc86928)
0x4cd31de8  code target (STUB)  (0x4cd06060)
0x4cd31e00  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 393217
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0x4cd31ec0     0  ldur x2, [fp, #-16]
0x4cd31ec4     4  ldur x2, [x2, #31]
0x4cd31ec8     8  ldur x2, [x2, #87]
0x4cd31ecc    12  ldr x16, pc+20 (addr 0x000000004cd31ee0)    ;; code: CALL_IC, GENERIC
0x4cd31ed0    16  br x16
0x4cd31ed4    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd31ed8    24  d63f03e0       constant
0x4cd31edc    28  d503201f       constant
0x4cd31ee0    32  4cd31c60       constant
0x4cd31ee4    36  00000000       constant


RelocInfo (size = 7)
0x4cd31ecc  code target (CALL_IC)  (0x4cd31c60)
0x4cd31ed4  constant pool (size 20)


kind = STORE_IC
major_key = VectorStoreICTrampolineStub
ic_state = GENERIC
extra_ic_state = 0
name = VectorStoreICTrampolineStub
compiler = unknown
Instructions (size = 440)
0x4cd320c0     0  ldur x3, [fp, #-16]
0x4cd320c4     4  ldur x3, [x3, #31]
0x4cd320c8     8  ldur x3, [x3, #87]
0x4cd320cc    12  add x5, x3, x4, asr #29
0x4cd320d0    16  ldur x5, [x5, #15]
0x4cd320d4    20  tbz w1, #0, #+0x174 (addr 0x4cd32248)
0x4cd320d8    24  ldur x6, [x1, #-1]
0x4cd320dc    28  ldur x7, [x5, #7]
0x4cd320e0    32  cmp x7, x6
0x4cd320e4    36  b.ne #+0x14 (addr 0x4cd320f8)
0x4cd320e8    40  add x5, x3, x4, asr #29
0x4cd320ec    44  ldur x5, [x5, #23]
0x4cd320f0    48  add x5, x5, #0x5f (95)
0x4cd320f4    52  br x5
0x4cd320f8    56  ldur x7, [x5, #-1]
0x4cd320fc    60  ldr x16, [x26, #224]
0x4cd32100    64  cmp x7, x16
0x4cd32104    68  b.ne #+0x5c (addr 0x4cd32160)
0x4cd32108    72  ldur x7, [x5, #15]
0x4cd3210c    76  ldur x7, [x7, #7]
0x4cd32110    80  cmp x6, x7
0x4cd32114    84  b.ne #+0x10 (addr 0x4cd32124)
0x4cd32118    88  ldur x5, [x5, #23]
0x4cd3211c    92  add x5, x5, #0x5f (95)
0x4cd32120    96  br x5
0x4cd32124   100  ldur x8, [x5, #7]
0x4cd32128   104  add x8, x5, x8, asr #29
0x4cd3212c   108  add x8, x8, #0xf (15)
0x4cd32130   112  add x5, x5, #0x1f (31)
0x4cd32134   116  ldr x7, [x5]
0x4cd32138   120  ldur x7, [x7, #7]
0x4cd3213c   124  cmp x6, x7
0x4cd32140   128  b.ne #+0x10 (addr 0x4cd32150)
0x4cd32144   132  ldr x5, [x5, #8]
0x4cd32148   136  add x5, x5, #0x5f (95)
0x4cd3214c   140  br x5
0x4cd32150   144  add x5, x5, #0x10 (16)
0x4cd32154   148  cmp x5, x8
0x4cd32158   152  b.lt #-0x24 (addr 0x4cd32134)
0x4cd3215c   156  b #+0xcc (addr 0x4cd32228)
0x4cd32160   160  ldr x16, [x26, #2400]
0x4cd32164   164  cmp x5, x16
0x4cd32168   168  b.ne #+0xc0 (addr 0x4cd32228)
0x4cd3216c   172  tbz w1, #0, #+0xbc (addr 0x4cd32228)
0x4cd32170   176  ldur x5, [x2, #7]
0x4cd32174   180  ldur x6, [x1, #-1]
0x4cd32178   184  add x5, x5, x6
0x4cd3217c   188  movz x16, #0x6902
0x4cd32180   192  eor x5, x5, x16
0x4cd32184   196  ubfx x5, x5, #2, #11
0x4cd32188   200  add x8, x5, x5, lsl #1
0x4cd3218c   204  ldr x6, pc+204 (addr 0x000000004cd32258)    ;; external reference (StubCache::primary_->key)
0x4cd32190   208  add x6, x6, x8, lsl #3
0x4cd32194   212  ldr x7, [x6]
0x4cd32198   216  cmp x2, x7
0x4cd3219c   220  b.ne #+0x34 (addr 0x4cd321d0)
0x4cd321a0   224  ldr x7, [x6, #16]
0x4cd321a4   228  ldur x8, [x1, #-1]
0x4cd321a8   232  cmp x7, x8
0x4cd321ac   236  b.ne #+0x24 (addr 0x4cd321d0)
0x4cd321b0   240  ldr x6, [x6, #8]
0x4cd321b4   244  ldur w7, [x6, #63]
0x4cd321b8   248  and w7, w7, #0xffffffc7
0x4cd321bc   252  movz w16, #0x6902
0x4cd321c0   256  cmp w7, w16
0x4cd321c4   260  b.ne #+0xc (addr 0x4cd321d0)
0x4cd321c8   264  add x6, x6, #0x5f (95)
0x4cd321cc   268  br x6
0x4cd321d0   272  sub x5, x5, x2, lsr #2
0x4cd321d4   276  movz x16, #0x1a40
0x4cd321d8   280  add x5, x5, x16
0x4cd321dc   284  and x5, x5, #0x1ff
0x4cd321e0   288  add x8, x5, x5, lsl #1
0x4cd321e4   292  ldr x6, pc+124 (addr 0x000000004cd32260)    ;; external reference (StubCache::secondary_->key)
0x4cd321e8   296  add x6, x6, x8, lsl #3
0x4cd321ec   300  ldr x7, [x6]
0x4cd321f0   304  cmp x2, x7
0x4cd321f4   308  b.ne #+0x34 (addr 0x4cd32228)
0x4cd321f8   312  ldr x7, [x6, #16]
0x4cd321fc   316  ldur x8, [x1, #-1]
0x4cd32200   320  cmp x7, x8
0x4cd32204   324  b.ne #+0x24 (addr 0x4cd32228)
0x4cd32208   328  ldr x6, [x6, #8]
0x4cd3220c   332  ldur w7, [x6, #63]
0x4cd32210   336  and w7, w7, #0xffffffc7
0x4cd32214   340  movz w16, #0x6902
0x4cd32218   344  cmp w7, w16
0x4cd3221c   348  b.ne #+0xc (addr 0x4cd32228)
0x4cd32220   352  add x6, x6, #0x5f (95)
0x4cd32224   356  br x6
0x4cd32228   360  sub csp, jssp, #0x28 (40)
0x4cd3222c   364  stp x4, x0, [jssp, #-32]!
0x4cd32230   368  stp x2, x1, [jssp, #16]
0x4cd32234   372  str x3, [jssp, #-8]!
0x4cd32238   376  movz x0, #0x5
0x4cd3223c   380  ldr x1, pc+44 (addr 0x000000004cd32268)    ;; external reference (Runtime::StoreIC_Miss)
0x4cd32240   384  ldr x16, pc+48 (addr 0x000000004cd32270)    ;; code: STUB, CEntryStub, minor: 4
0x4cd32244   388  br x16
0x4cd32248   392  ldr x6, [x26, #120]
0x4cd3224c   396  b #-0x170 (addr 0x4cd320dc)
0x4cd32250   400  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cd32254   404  d63f03e0       constant
0x4cd32258   408  166f7950       constant
0x4cd3225c   412  00000000       constant
0x4cd32260   416  16703950       constant
0x4cd32264   420  00000000       constant
0x4cd32268   424  00c87f60       constant
0x4cd3226c   428  00000000       constant
0x4cd32270   432  4cd06060       constant
0x4cd32274   436  00000000       constant


RelocInfo (size = 19)
0x4cd3218c  external reference (StubCache::primary_->key)  (0x166f7950)
0x4cd321e4  external reference (StubCache::secondary_->key)  (0x16703950)
0x4cd3223c  external reference (Runtime::StoreIC_Miss)  (0xc87f60)
0x4cd32240  code target (STUB)  (0x4cd06060)
0x4cd32250  constant pool (size 40)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 981)
0x4cd32520     0  movz x2, #0xd2c0
0x4cd32524     4  movk x2, #0x166d, lsl #16
0x4cd32528     8  ldp x3, x0, [x2]
0x4cd3252c    12  adds x16, x3, #0x180 (384)
0x4cd32530    16  ccmp x16, x0, #nzCv, lo
0x4cd32534    20  b.hi #+0x1c8 (addr 0x4cd326fc)
0x4cd32538    24  str x16, [x2]
0x4cd3253c    28  orr x3, x3, #0x1
0x4cd32540    32  ldr x0, pc+552 (addr 0x000000004cd32768)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd32544    36  stur x0, [x3, #-1]
0x4cd32548    40  movz x0, #0x2e00000000
0x4cd3254c    44  stur x0, [x3, #7]
0x4cd32550    48  stur x1, [x3, #15]
0x4cd32554    52  stur cp, [x3, #23]
0x4cd32558    56  ldr x0, pc+536 (addr 0x000000004cd32770)    ;; object: 0x21004519 <the hole>
0x4cd3255c    60  stur x0, [x3, #31]
0x4cd32560    64  ldur x0, [cp, #39]
0x4cd32564    68  stur x0, [x3, #39]
0x4cd32568    72  ldr x0, pc+528 (addr 0x000000004cd32778)    ;; object: 0x21004241 <undefined>
0x4cd3256c    76  stur x0, [x3, #47]
0x4cd32570    80  ldr x0, pc+528 (addr 0x000000004cd32780)    ;; object: 0x21004241 <undefined>
0x4cd32574    84  stur x0, [x3, #55]
0x4cd32578    88  ldr x0, pc+528 (addr 0x000000004cd32788)    ;; object: 0x21004241 <undefined>
0x4cd3257c    92  stur x0, [x3, #63]
0x4cd32580    96  ldr x0, pc+528 (addr 0x000000004cd32790)    ;; object: 0x21004241 <undefined>
0x4cd32584   100  stur x0, [x3, #71]
0x4cd32588   104  ldr x0, pc+528 (addr 0x000000004cd32798)    ;; object: 0x21004241 <undefined>
0x4cd3258c   108  stur x0, [x3, #79]
0x4cd32590   112  ldr x0, pc+528 (addr 0x000000004cd327a0)    ;; object: 0x21004241 <undefined>
0x4cd32594   116  stur x0, [x3, #87]
0x4cd32598   120  ldr x0, pc+528 (addr 0x000000004cd327a8)    ;; object: 0x21004241 <undefined>
0x4cd3259c   124  stur x0, [x3, #95]
0x4cd325a0   128  ldr x0, pc+528 (addr 0x000000004cd327b0)    ;; object: 0x21004241 <undefined>
0x4cd325a4   132  stur x0, [x3, #103]
0x4cd325a8   136  ldr x0, pc+528 (addr 0x000000004cd327b8)    ;; object: 0x21004241 <undefined>
0x4cd325ac   140  stur x0, [x3, #111]
0x4cd325b0   144  ldr x0, pc+528 (addr 0x000000004cd327c0)    ;; object: 0x21004241 <undefined>
0x4cd325b4   148  stur x0, [x3, #119]
0x4cd325b8   152  ldr x0, pc+528 (addr 0x000000004cd327c8)    ;; object: 0x21004241 <undefined>
0x4cd325bc   156  stur x0, [x3, #127]
0x4cd325c0   160  ldr x0, pc+528 (addr 0x000000004cd327d0)    ;; object: 0x21004241 <undefined>
0x4cd325c4   164  stur x0, [x3, #135]
0x4cd325c8   168  ldr x0, pc+528 (addr 0x000000004cd327d8)    ;; object: 0x21004241 <undefined>
0x4cd325cc   172  stur x0, [x3, #143]
0x4cd325d0   176  ldr x0, pc+528 (addr 0x000000004cd327e0)    ;; object: 0x21004241 <undefined>
0x4cd325d4   180  stur x0, [x3, #151]
0x4cd325d8   184  ldr x0, pc+528 (addr 0x000000004cd327e8)    ;; object: 0x21004241 <undefined>
0x4cd325dc   188  stur x0, [x3, #159]
0x4cd325e0   192  ldr x0, pc+528 (addr 0x000000004cd327f0)    ;; object: 0x21004241 <undefined>
0x4cd325e4   196  stur x0, [x3, #167]
0x4cd325e8   200  ldr x0, pc+528 (addr 0x000000004cd327f8)    ;; object: 0x21004241 <undefined>
0x4cd325ec   204  stur x0, [x3, #175]
0x4cd325f0   208  ldr x0, pc+528 (addr 0x000000004cd32800)    ;; object: 0x21004241 <undefined>
0x4cd325f4   212  stur x0, [x3, #183]
0x4cd325f8   216  ldr x0, pc+528 (addr 0x000000004cd32808)    ;; object: 0x21004241 <undefined>
0x4cd325fc   220  stur x0, [x3, #191]
0x4cd32600   224  ldr x0, pc+528 (addr 0x000000004cd32810)    ;; object: 0x21004241 <undefined>
0x4cd32604   228  stur x0, [x3, #199]
0x4cd32608   232  ldr x0, pc+528 (addr 0x000000004cd32818)    ;; object: 0x21004241 <undefined>
0x4cd3260c   236  stur x0, [x3, #207]
0x4cd32610   240  ldr x0, pc+528 (addr 0x000000004cd32820)    ;; object: 0x21004241 <undefined>
0x4cd32614   244  stur x0, [x3, #215]
0x4cd32618   248  ldr x0, pc+528 (addr 0x000000004cd32828)    ;; object: 0x21004241 <undefined>
0x4cd3261c   252  stur x0, [x3, #223]
0x4cd32620   256  ldr x0, pc+528 (addr 0x000000004cd32830)    ;; object: 0x21004241 <undefined>
0x4cd32624   260  stur x0, [x3, #231]
0x4cd32628   264  ldr x0, pc+528 (addr 0x000000004cd32838)    ;; object: 0x21004241 <undefined>
0x4cd3262c   268  stur x0, [x3, #239]
0x4cd32630   272  ldr x0, pc+528 (addr 0x000000004cd32840)    ;; object: 0x21004241 <undefined>
0x4cd32634   276  stur x0, [x3, #247]
0x4cd32638   280  ldr x0, pc+528 (addr 0x000000004cd32848)    ;; object: 0x21004241 <undefined>
0x4cd3263c   284  stur x0, [x3, #255]
0x4cd32640   288  ldr x0, pc+528 (addr 0x000000004cd32850)    ;; object: 0x21004241 <undefined>
0x4cd32644   292  movz x16, #0x107
0x4cd32648   296  str x0, [x3, x16]
0x4cd3264c   300  ldr x0, pc+524 (addr 0x000000004cd32858)    ;; object: 0x21004241 <undefined>
0x4cd32650   304  movz x16, #0x10f
0x4cd32654   308  str x0, [x3, x16]
0x4cd32658   312  ldr x0, pc+520 (addr 0x000000004cd32860)    ;; object: 0x21004241 <undefined>
0x4cd3265c   316  movz x16, #0x117
0x4cd32660   320  str x0, [x3, x16]
0x4cd32664   324  ldr x0, pc+516 (addr 0x000000004cd32868)    ;; object: 0x21004241 <undefined>
0x4cd32668   328  movz x16, #0x11f
0x4cd3266c   332  str x0, [x3, x16]
0x4cd32670   336  ldr x0, pc+512 (addr 0x000000004cd32870)    ;; object: 0x21004241 <undefined>
0x4cd32674   340  movz x16, #0x127
0x4cd32678   344  str x0, [x3, x16]
0x4cd3267c   348  ldr x0, pc+508 (addr 0x000000004cd32878)    ;; object: 0x21004241 <undefined>
0x4cd32680   352  movz x16, #0x12f
0x4cd32684   356  str x0, [x3, x16]
0x4cd32688   360  ldr x0, pc+504 (addr 0x000000004cd32880)    ;; object: 0x21004241 <undefined>
0x4cd3268c   364  movz x16, #0x137
0x4cd32690   368  str x0, [x3, x16]
0x4cd32694   372  ldr x0, pc+500 (addr 0x000000004cd32888)    ;; object: 0x21004241 <undefined>
0x4cd32698   376  movz x16, #0x13f
0x4cd3269c   380  str x0, [x3, x16]
0x4cd326a0   384  ldr x0, pc+496 (addr 0x000000004cd32890)    ;; object: 0x21004241 <undefined>
0x4cd326a4   388  movz x16, #0x147
0x4cd326a8   392  str x0, [x3, x16]
0x4cd326ac   396  ldr x0, pc+492 (addr 0x000000004cd32898)    ;; object: 0x21004241 <undefined>
0x4cd326b0   400  movz x16, #0x14f
0x4cd326b4   404  str x0, [x3, x16]
0x4cd326b8   408  ldr x0, pc+488 (addr 0x000000004cd328a0)    ;; object: 0x21004241 <undefined>
0x4cd326bc   412  movz x16, #0x157
0x4cd326c0   416  str x0, [x3, x16]
0x4cd326c4   420  ldr x0, pc+484 (addr 0x000000004cd328a8)    ;; object: 0x21004241 <undefined>
0x4cd326c8   424  movz x16, #0x15f
0x4cd326cc   428  str x0, [x3, x16]
0x4cd326d0   432  ldr x0, pc+480 (addr 0x000000004cd328b0)    ;; object: 0x21004241 <undefined>
0x4cd326d4   436  movz x16, #0x167
0x4cd326d8   440  str x0, [x3, x16]
0x4cd326dc   444  ldr x0, pc+476 (addr 0x000000004cd328b8)    ;; object: 0x21004241 <undefined>
0x4cd326e0   448  movz x16, #0x16f
0x4cd326e4   452  str x0, [x3, x16]
0x4cd326e8   456  ldr x0, pc+472 (addr 0x000000004cd328c0)    ;; object: 0x21004241 <undefined>
0x4cd326ec   460  movz x16, #0x177
0x4cd326f0   464  str x0, [x3, x16]
0x4cd326f4   468  mov x0, x3
0x4cd326f8   472  ret
0x4cd326fc   476  sub csp, jssp, #0x10 (16)
0x4cd32700   480  stp fp, lr, [jssp, #-16]!
0x4cd32704   484  movz fp, #0xa00000000
0x4cd32708   488  sub csp, jssp, #0x8 (8)
0x4cd3270c   492  str fp, [jssp, #-8]!
0x4cd32710   496  add fp, jssp, #0x8 (8)
0x4cd32714   500  movz x3, #0x0
0x4cd32718   504  mov x16, lr
0x4cd3271c   508  ldr x17, pc+428 (addr 0x000000004cd328c8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd32720   512  blr x17
0x4cd32724   516  movz x0, #0x18000000000
0x4cd32728   520  movz x10, #0x0
0x4cd3272c   524  sub csp, jssp, #0x10 (16)
0x4cd32730   528  stp x10, x0, [jssp, #-16]!
0x4cd32734   532  movz x0, #0x2
0x4cd32738   536  movz x1, #0x5b88
0x4cd3273c   540  movk x1, #0xe2, lsl #16
0x4cd32740   544  ldr x16, pc+400 (addr 0x000000004cd328d0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd32744   548  blr x16
0x4cd32748   552  str x0, [jssp, #24]
0x4cd3274c   556  ldr x16, pc+396 (addr 0x000000004cd328d8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd32750   560  blr x16
0x4cd32754   564  ldr lr, [jssp, #16]
0x4cd32758   568  ldp xzr, fp, [jssp], #24
0x4cd3275c   572  b #-0x21c (addr 0x4cd32540)
0x4cd32760   576  58000bff       constant pool begin (num_const = 95)    ;; constant pool
0x4cd32764   580  d63f03e0       constant
0x4cd32768   584  2a806149       constant
0x4cd3276c   588  00000000       constant
0x4cd32770   592  21004519       constant
0x4cd32774   596  00000000       constant
0x4cd32778   600  21004241       constant
0x4cd3277c   604  00000000       constant
0x4cd32780   608  21004241       constant
0x4cd32784   612  00000000       constant
0x4cd32788   616  21004241       constant
0x4cd3278c   620  00000000       constant
0x4cd32790   624  21004241       constant
0x4cd32794   628  00000000       constant
0x4cd32798   632  21004241       constant
0x4cd3279c   636  00000000       constant
0x4cd327a0   640  21004241       constant
0x4cd327a4   644  00000000       constant
0x4cd327a8   648  21004241       constant
0x4cd327ac   652  00000000       constant
0x4cd327b0   656  21004241       constant
0x4cd327b4   660  00000000       constant
0x4cd327b8   664  21004241       constant
0x4cd327bc   668  00000000       constant
0x4cd327c0   672  21004241       constant
0x4cd327c4   676  00000000       constant
0x4cd327c8   680  21004241       constant
0x4cd327cc   684  00000000       constant
0x4cd327d0   688  21004241       constant
0x4cd327d4   692  00000000       constant
0x4cd327d8   696  21004241       constant
0x4cd327dc   700  00000000       constant
0x4cd327e0   704  21004241       constant
0x4cd327e4   708  00000000       constant
0x4cd327e8   712  21004241       constant
0x4cd327ec   716  00000000       constant
0x4cd327f0   720  21004241       constant
0x4cd327f4   724  00000000       constant
0x4cd327f8   728  21004241       constant
0x4cd327fc   732  00000000       constant
0x4cd32800   736  21004241       constant
0x4cd32804   740  00000000       constant
0x4cd32808   744  21004241       constant
0x4cd3280c   748  00000000       constant
0x4cd32810   752  21004241       constant
0x4cd32814   756  00000000       constant
0x4cd32818   760  21004241       constant
0x4cd3281c   764  00000000       constant
0x4cd32820   768  21004241       constant
0x4cd32824   772  00000000       constant
0x4cd32828   776  21004241       constant
0x4cd3282c   780  00000000       constant
0x4cd32830   784  21004241       constant
0x4cd32834   788  00000000       constant
0x4cd32838   792  21004241       constant
0x4cd3283c   796  00000000       constant
0x4cd32840   800  21004241       constant
0x4cd32844   804  00000000       constant
0x4cd32848   808  21004241       constant
0x4cd3284c   812  00000000       constant
0x4cd32850   816  21004241       constant
0x4cd32854   820  00000000       constant
0x4cd32858   824  21004241       constant
0x4cd3285c   828  00000000       constant
0x4cd32860   832  21004241       constant
0x4cd32864   836  00000000       constant
0x4cd32868   840  21004241       constant
0x4cd3286c   844  00000000       constant
0x4cd32870   848  21004241       constant
0x4cd32874   852  00000000       constant
0x4cd32878   856  21004241       constant
0x4cd3287c   860  00000000       constant
0x4cd32880   864  21004241       constant
0x4cd32884   868  00000000       constant
0x4cd32888   872  21004241       constant
0x4cd3288c   876  00000000       constant
0x4cd32890   880  21004241       constant
0x4cd32894   884  00000000       constant
0x4cd32898   888  21004241       constant
0x4cd3289c   892  00000000       constant
0x4cd328a0   896  21004241       constant
0x4cd328a4   900  00000000       constant
0x4cd328a8   904  21004241       constant
0x4cd328ac   908  00000000       constant
0x4cd328b0   912  21004241       constant
0x4cd328b4   916  00000000       constant
0x4cd328b8   920  21004241       constant
0x4cd328bc   924  00000000       constant
0x4cd328c0   928  21004241       constant
0x4cd328c4   932  00000000       constant
0x4cd328c8   936  4cd06820       constant
0x4cd328cc   940  00000000       constant
0x4cd328d0   944  4cd06260       constant
0x4cd328d4   948  00000000       constant
0x4cd328d8   952  4cd068e0       constant
0x4cd328dc   956  00000000       constant


Safepoints (size = 21)
0x4cd32748   552  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 53)
0x4cd32540  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd32558  embedded object  (0x21004519 <the hole>)
0x4cd32568  embedded object  (0x21004241 <undefined>)
0x4cd32570  embedded object  (0x21004241 <undefined>)
0x4cd32578  embedded object  (0x21004241 <undefined>)
0x4cd32580  embedded object  (0x21004241 <undefined>)
0x4cd32588  embedded object  (0x21004241 <undefined>)
0x4cd32590  embedded object  (0x21004241 <undefined>)
0x4cd32598  embedded object  (0x21004241 <undefined>)
0x4cd325a0  embedded object  (0x21004241 <undefined>)
0x4cd325a8  embedded object  (0x21004241 <undefined>)
0x4cd325b0  embedded object  (0x21004241 <undefined>)
0x4cd325b8  embedded object  (0x21004241 <undefined>)
0x4cd325c0  embedded object  (0x21004241 <undefined>)
0x4cd325c8  embedded object  (0x21004241 <undefined>)
0x4cd325d0  embedded object  (0x21004241 <undefined>)
0x4cd325d8  embedded object  (0x21004241 <undefined>)
0x4cd325e0  embedded object  (0x21004241 <undefined>)
0x4cd325e8  embedded object  (0x21004241 <undefined>)
0x4cd325f0  embedded object  (0x21004241 <undefined>)
0x4cd325f8  embedded object  (0x21004241 <undefined>)
0x4cd32600  embedded object  (0x21004241 <undefined>)
0x4cd32608  embedded object  (0x21004241 <undefined>)
0x4cd32610  embedded object  (0x21004241 <undefined>)
0x4cd32618  embedded object  (0x21004241 <undefined>)
0x4cd32620  embedded object  (0x21004241 <undefined>)
0x4cd32628  embedded object  (0x21004241 <undefined>)
0x4cd32630  embedded object  (0x21004241 <undefined>)
0x4cd32638  embedded object  (0x21004241 <undefined>)
0x4cd32640  embedded object  (0x21004241 <undefined>)
0x4cd3264c  embedded object  (0x21004241 <undefined>)
0x4cd32658  embedded object  (0x21004241 <undefined>)
0x4cd32664  embedded object  (0x21004241 <undefined>)
0x4cd32670  embedded object  (0x21004241 <undefined>)
0x4cd3267c  embedded object  (0x21004241 <undefined>)
0x4cd32688  embedded object  (0x21004241 <undefined>)
0x4cd32694  embedded object  (0x21004241 <undefined>)
0x4cd326a0  embedded object  (0x21004241 <undefined>)
0x4cd326ac  embedded object  (0x21004241 <undefined>)
0x4cd326b8  embedded object  (0x21004241 <undefined>)
0x4cd326c4  embedded object  (0x21004241 <undefined>)
0x4cd326d0  embedded object  (0x21004241 <undefined>)
0x4cd326dc  embedded object  (0x21004241 <undefined>)
0x4cd326e8  embedded object  (0x21004241 <undefined>)
0x4cd3271c  code target (STUB)  (0x4cd06820)
0x4cd32740  code target (STUB)  (0x4cd06260)
0x4cd3274c  code target (STUB)  (0x4cd068e0)
0x4cd32760  constant pool (size 384)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0x4cd32960     0  adr xzr, #+0x40 (addr 0x4cd329a0)
0x4cd32964     4  adr xzr, #+0x360 (addr 0x4cd32cc4)
0x4cd32968     8  ldr x16, pc+1736 (addr 0x000000004cd33030)    ;; external reference (store_buffer_top)
0x4cd3296c    12  ldr x1, [x16]
0x4cd32970    16  str x2, [x1], #8
0x4cd32974    20  str x1, [x16]
0x4cd32978    24  tst x1, #0x1ffff
0x4cd3297c    28  b.eq #+0x8 (addr 0x4cd32984)
0x4cd32980    32  ret
0x4cd32984    36  sub csp, jssp, #0x8 (8)
0x4cd32988    40  str lr, [jssp, #-8]!
0x4cd3298c    44  ldr x17, pc+1708 (addr 0x000000004cd33038)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd32990    48  blr x17
0x4cd32994    52  ldr lr, [jssp], #8
0x4cd32998    56  ret
0x4cd3299c    60  ret
0x4cd329a0    64  sub csp, jssp, #0x10 (16)
0x4cd329a4    68  stp x3, x0, [jssp, #-16]!
0x4cd329a8    72  ldr x1, [x2]
0x4cd329ac    76  and x16, x1, #0xfffffffffff00000
0x4cd329b0    80  ldr x16, [x16, #8]
0x4cd329b4    84  tst x16, #0x18
0x4cd329b8    88  b.eq #+0x1d8 (addr 0x4cd32b90)
0x4cd329bc    92  and x16, x4, #0xfffffffffff00000
0x4cd329c0    96  ldr x16, [x16, #8]
0x4cd329c4   100  tst x16, #0x18
0x4cd329c8   104  b.ne #+0x1c8 (addr 0x4cd32b90)
0x4cd329cc   108  and x1, x4, #0xfffffffffff00000
0x4cd329d0   112  ldr x0, [x1, #104]
0x4cd329d4   116  subs x0, x0, #0x1 (1)
0x4cd329d8   120  str x0, [x1, #104]
0x4cd329dc   124  b.mi #+0xc4 (addr 0x4cd32aa0)
0x4cd329e0   128  ubfx x16, x4, #8, #12
0x4cd329e4   132  and x1, x4, #0xfffffffffff00000
0x4cd329e8   136  add x1, x1, x16, lsl #2
0x4cd329ec   140  ubfx x0, x4, #3, #5
0x4cd329f0   144  ldr x1, [x1, #360]
0x4cd329f4   148  lsr x1, x1, x0
0x4cd329f8   152  tbz w1, #0, #+0x8 (addr 0x4cd32a00)
0x4cd329fc   156  tbnz w1, #1, #+0x3c (addr 0x4cd32a38)
0x4cd32a00   160  ldp x3, x0, [jssp], #16
0x4cd32a04   164  ldr x16, pc+1596 (addr 0x000000004cd33040)    ;; external reference (store_buffer_top)
0x4cd32a08   168  ldr x1, [x16]
0x4cd32a0c   172  str x2, [x1], #8
0x4cd32a10   176  str x1, [x16]
0x4cd32a14   180  tst x1, #0x1ffff
0x4cd32a18   184  b.eq #+0x8 (addr 0x4cd32a20)
0x4cd32a1c   188  ret
0x4cd32a20   192  sub csp, jssp, #0x8 (8)
0x4cd32a24   196  str lr, [jssp, #-8]!
0x4cd32a28   200  ldr x17, pc+1568 (addr 0x000000004cd33048)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd32a2c   204  blr x17
0x4cd32a30   208  ldr lr, [jssp], #8
0x4cd32a34   212  ret
0x4cd32a38   216  ldr x1, [x2]
0x4cd32a3c   220  sub csp, jssp, #0x10 (16)
0x4cd32a40   224  stp x4, x2, [jssp, #-16]!
0x4cd32a44   228  ubfx x16, x1, #8, #12
0x4cd32a48   232  and x0, x1, #0xfffffffffff00000
0x4cd32a4c   236  add x0, x0, x16, lsl #2
0x4cd32a50   240  ubfx x4, x1, #3, #5
0x4cd32a54   244  ldr x2, [x0, #360]
0x4cd32a58   248  lsr x2, x2, x4
0x4cd32a5c   252  tbz w2, #0, #+0x40 (addr 0x4cd32a9c)
0x4cd32a60   256  ldp x4, x2, [jssp], #16
0x4cd32a64   260  ldp x3, x0, [jssp], #16
0x4cd32a68   264  ldr x16, pc+1512 (addr 0x000000004cd33050)    ;; external reference (store_buffer_top)
0x4cd32a6c   268  ldr x1, [x16]
0x4cd32a70   272  str x2, [x1], #8
0x4cd32a74   276  str x1, [x16]
0x4cd32a78   280  tst x1, #0x1ffff
0x4cd32a7c   284  b.eq #+0x8 (addr 0x4cd32a84)
0x4cd32a80   288  ret
0x4cd32a84   292  sub csp, jssp, #0x8 (8)
0x4cd32a88   296  str lr, [jssp, #-8]!
0x4cd32a8c   300  ldr x17, pc+1484 (addr 0x000000004cd33058)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd32a90   304  blr x17
0x4cd32a94   308  ldr lr, [jssp], #8
0x4cd32a98   312  ret
0x4cd32a9c   316  ldp x4, x2, [jssp], #16
0x4cd32aa0   320  sub csp, jssp, #0x78 (120)
0x4cd32aa4   324  stp x14, x15, [jssp, #-32]!
0x4cd32aa8   328  stp x18, lr, [jssp, #16]
0x4cd32aac   332  stp x10, x11, [jssp, #-32]!
0x4cd32ab0   336  stp x12, x13, [jssp, #16]
0x4cd32ab4   340  stp x6, x7, [jssp, #-32]!
0x4cd32ab8   344  stp x8, x9, [jssp, #16]
0x4cd32abc   348  stp x2, x4, [jssp, #-24]!
0x4cd32ac0   352  str x5, [jssp, #16]
0x4cd32ac4   356  sub csp, jssp, #0xb0 (176)
0x4cd32ac8   360  stp d26, d27, [jssp, #-32]!
0x4cd32acc   364  stp d28, d29, [jssp, #16]
0x4cd32ad0   368  stp d22, d23, [jssp, #-32]!
0x4cd32ad4   372  stp d24, d25, [jssp, #16]
0x4cd32ad8   376  stp d18, d19, [jssp, #-32]!
0x4cd32adc   380  stp d20, d21, [jssp, #16]
0x4cd32ae0   384  stp d6, d7, [jssp, #-32]!
0x4cd32ae4   388  stp d16, d17, [jssp, #16]
0x4cd32ae8   392  stp d2, d3, [jssp, #-32]!
0x4cd32aec   396  stp d4, d5, [jssp, #16]
0x4cd32af0   400  stp d0, d1, [jssp, #-16]!
0x4cd32af4   404  mov x0, x4
0x4cd32af8   408  mov x1, x2
0x4cd32afc   412  ldr x2, pc+1380 (addr 0x000000004cd33060)    ;; external reference (isolate)
0x4cd32b00   416  ldr x16, pc+1384 (addr 0x000000004cd33068)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd32b04   420  and csp, jssp, #0xfffffffffffffff0
0x4cd32b08   424  blr x16
0x4cd32b0c   428  ldp d2, d3, [jssp, #16]
0x4cd32b10   432  ldp d0, d1, [jssp], #32
0x4cd32b14   436  ldp d6, d7, [jssp, #16]
0x4cd32b18   440  ldp d4, d5, [jssp], #32
0x4cd32b1c   444  ldp d18, d19, [jssp, #16]
0x4cd32b20   448  ldp d16, d17, [jssp], #32
0x4cd32b24   452  ldp d22, d23, [jssp, #16]
0x4cd32b28   456  ldp d20, d21, [jssp], #32
0x4cd32b2c   460  ldp d26, d27, [jssp, #16]
0x4cd32b30   464  ldp d24, d25, [jssp], #32
0x4cd32b34   468  ldp d28, d29, [jssp], #16
0x4cd32b38   472  ldp x5, x6, [jssp, #16]
0x4cd32b3c   476  ldp x2, x4, [jssp], #32
0x4cd32b40   480  ldp x9, x10, [jssp, #16]
0x4cd32b44   484  ldp x7, x8, [jssp], #32
0x4cd32b48   488  ldp x13, x14, [jssp, #16]
0x4cd32b4c   492  ldp x11, x12, [jssp], #32
0x4cd32b50   496  ldr lr, [jssp, #16]
0x4cd32b54   500  ldp x15, x18, [jssp], #24
0x4cd32b58   504  ldp x3, x0, [jssp], #16
0x4cd32b5c   508  ldr x16, pc+1300 (addr 0x000000004cd33070)    ;; external reference (store_buffer_top)
0x4cd32b60   512  ldr x1, [x16]
0x4cd32b64   516  str x2, [x1], #8
0x4cd32b68   520  str x1, [x16]
0x4cd32b6c   524  tst x1, #0x1ffff
0x4cd32b70   528  b.eq #+0x8 (addr 0x4cd32b78)
0x4cd32b74   532  ret
0x4cd32b78   536  sub csp, jssp, #0x8 (8)
0x4cd32b7c   540  str lr, [jssp, #-8]!
0x4cd32b80   544  ldr x17, pc+1272 (addr 0x000000004cd33078)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd32b84   548  blr x17
0x4cd32b88   552  ldr lr, [jssp], #8
0x4cd32b8c   556  ret
0x4cd32b90   560  and x1, x4, #0xfffffffffff00000
0x4cd32b94   564  ldr x0, [x1, #104]
0x4cd32b98   568  subs x0, x0, #0x1 (1)
0x4cd32b9c   572  str x0, [x1, #104]
0x4cd32ba0   576  b.mi #+0x64 (addr 0x4cd32c04)
0x4cd32ba4   580  ubfx x16, x4, #8, #12
0x4cd32ba8   584  and x1, x4, #0xfffffffffff00000
0x4cd32bac   588  add x1, x1, x16, lsl #2
0x4cd32bb0   592  ubfx x0, x4, #3, #5
0x4cd32bb4   596  ldr x1, [x1, #360]
0x4cd32bb8   600  lsr x1, x1, x0
0x4cd32bbc   604  tbz w1, #0, #+0x8 (addr 0x4cd32bc4)
0x4cd32bc0   608  tbnz w1, #1, #+0xc (addr 0x4cd32bcc)
0x4cd32bc4   612  ldp x3, x0, [jssp], #16
0x4cd32bc8   616  ret
0x4cd32bcc   620  ldr x1, [x2]
0x4cd32bd0   624  sub csp, jssp, #0x10 (16)
0x4cd32bd4   628  stp x4, x2, [jssp, #-16]!
0x4cd32bd8   632  ubfx x16, x1, #8, #12
0x4cd32bdc   636  and x0, x1, #0xfffffffffff00000
0x4cd32be0   640  add x0, x0, x16, lsl #2
0x4cd32be4   644  ubfx x4, x1, #3, #5
0x4cd32be8   648  ldr x2, [x0, #360]
0x4cd32bec   652  lsr x2, x2, x4
0x4cd32bf0   656  tbz w2, #0, #+0x10 (addr 0x4cd32c00)
0x4cd32bf4   660  ldp x4, x2, [jssp], #16
0x4cd32bf8   664  ldp x3, x0, [jssp], #16
0x4cd32bfc   668  ret
0x4cd32c00   672  ldp x4, x2, [jssp], #16
0x4cd32c04   676  sub csp, jssp, #0x78 (120)
0x4cd32c08   680  stp x14, x15, [jssp, #-32]!
0x4cd32c0c   684  stp x18, lr, [jssp, #16]
0x4cd32c10   688  stp x10, x11, [jssp, #-32]!
0x4cd32c14   692  stp x12, x13, [jssp, #16]
0x4cd32c18   696  stp x6, x7, [jssp, #-32]!
0x4cd32c1c   700  stp x8, x9, [jssp, #16]
0x4cd32c20   704  stp x2, x4, [jssp, #-24]!
0x4cd32c24   708  str x5, [jssp, #16]
0x4cd32c28   712  sub csp, jssp, #0xb0 (176)
0x4cd32c2c   716  stp d26, d27, [jssp, #-32]!
0x4cd32c30   720  stp d28, d29, [jssp, #16]
0x4cd32c34   724  stp d22, d23, [jssp, #-32]!
0x4cd32c38   728  stp d24, d25, [jssp, #16]
0x4cd32c3c   732  stp d18, d19, [jssp, #-32]!
0x4cd32c40   736  stp d20, d21, [jssp, #16]
0x4cd32c44   740  stp d6, d7, [jssp, #-32]!
0x4cd32c48   744  stp d16, d17, [jssp, #16]
0x4cd32c4c   748  stp d2, d3, [jssp, #-32]!
0x4cd32c50   752  stp d4, d5, [jssp, #16]
0x4cd32c54   756  stp d0, d1, [jssp, #-16]!
0x4cd32c58   760  mov x0, x4
0x4cd32c5c   764  mov x1, x2
0x4cd32c60   768  ldr x2, pc+1056 (addr 0x000000004cd33080)    ;; external reference (isolate)
0x4cd32c64   772  ldr x16, pc+1060 (addr 0x000000004cd33088)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd32c68   776  and csp, jssp, #0xfffffffffffffff0
0x4cd32c6c   780  blr x16
0x4cd32c70   784  ldp d2, d3, [jssp, #16]
0x4cd32c74   788  ldp d0, d1, [jssp], #32
0x4cd32c78   792  ldp d6, d7, [jssp, #16]
0x4cd32c7c   796  ldp d4, d5, [jssp], #32
0x4cd32c80   800  ldp d18, d19, [jssp, #16]
0x4cd32c84   804  ldp d16, d17, [jssp], #32
0x4cd32c88   808  ldp d22, d23, [jssp, #16]
0x4cd32c8c   812  ldp d20, d21, [jssp], #32
0x4cd32c90   816  ldp d26, d27, [jssp, #16]
0x4cd32c94   820  ldp d24, d25, [jssp], #32
0x4cd32c98   824  ldp d28, d29, [jssp], #16
0x4cd32c9c   828  ldp x5, x6, [jssp, #16]
0x4cd32ca0   832  ldp x2, x4, [jssp], #32
0x4cd32ca4   836  ldp x9, x10, [jssp, #16]
0x4cd32ca8   840  ldp x7, x8, [jssp], #32
0x4cd32cac   844  ldp x13, x14, [jssp, #16]
0x4cd32cb0   848  ldp x11, x12, [jssp], #32
0x4cd32cb4   852  ldr lr, [jssp, #16]
0x4cd32cb8   856  ldp x15, x18, [jssp], #24
0x4cd32cbc   860  ldp x3, x0, [jssp], #16
0x4cd32cc0   864  ret
0x4cd32cc4   868  sub csp, jssp, #0x10 (16)
0x4cd32cc8   872  stp x3, x0, [jssp, #-16]!
0x4cd32ccc   876  ldr x1, [x2]
0x4cd32cd0   880  and x16, x1, #0xfffffffffff00000
0x4cd32cd4   884  ldr x16, [x16, #8]
0x4cd32cd8   888  tst x16, #0x18
0x4cd32cdc   892  b.eq #+0x1f8 (addr 0x4cd32ed4)
0x4cd32ce0   896  and x16, x4, #0xfffffffffff00000
0x4cd32ce4   900  ldr x16, [x16, #8]
0x4cd32ce8   904  tst x16, #0x18
0x4cd32cec   908  b.ne #+0x1e8 (addr 0x4cd32ed4)
0x4cd32cf0   912  and x1, x4, #0xfffffffffff00000
0x4cd32cf4   916  ldr x0, [x1, #104]
0x4cd32cf8   920  subs x0, x0, #0x1 (1)
0x4cd32cfc   924  str x0, [x1, #104]
0x4cd32d00   928  b.mi #+0xe4 (addr 0x4cd32de4)
0x4cd32d04   932  ubfx x16, x4, #8, #12
0x4cd32d08   936  and x1, x4, #0xfffffffffff00000
0x4cd32d0c   940  add x1, x1, x16, lsl #2
0x4cd32d10   944  ubfx x0, x4, #3, #5
0x4cd32d14   948  ldr x1, [x1, #360]
0x4cd32d18   952  lsr x1, x1, x0
0x4cd32d1c   956  tbz w1, #0, #+0x8 (addr 0x4cd32d24)
0x4cd32d20   960  tbnz w1, #1, #+0x3c (addr 0x4cd32d5c)
0x4cd32d24   964  ldp x3, x0, [jssp], #16
0x4cd32d28   968  ldr x16, pc+872 (addr 0x000000004cd33090)    ;; external reference (store_buffer_top)
0x4cd32d2c   972  ldr x1, [x16]
0x4cd32d30   976  str x2, [x1], #8
0x4cd32d34   980  str x1, [x16]
0x4cd32d38   984  tst x1, #0x1ffff
0x4cd32d3c   988  b.eq #+0x8 (addr 0x4cd32d44)
0x4cd32d40   992  ret
0x4cd32d44   996  sub csp, jssp, #0x8 (8)
0x4cd32d48  1000  str lr, [jssp, #-8]!
0x4cd32d4c  1004  ldr x17, pc+844 (addr 0x000000004cd33098)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd32d50  1008  blr x17
0x4cd32d54  1012  ldr lr, [jssp], #8
0x4cd32d58  1016  ret
0x4cd32d5c  1020  ldr x1, [x2]
0x4cd32d60  1024  and x0, x1, #0xfffffffffff00000
0x4cd32d64  1028  ldr x0, [x0, #8]
0x4cd32d68  1032  tbz w0, #6, #+0x18 (addr 0x4cd32d80)
0x4cd32d6c  1036  and x0, x4, #0xfffffffffff00000
0x4cd32d70  1040  ldr x0, [x0, #8]
0x4cd32d74  1044  movz x16, #0x58
0x4cd32d78  1048  tst x0, x16
0x4cd32d7c  1052  b.eq #+0x68 (addr 0x4cd32de4)
0x4cd32d80  1056  sub csp, jssp, #0x10 (16)
0x4cd32d84  1060  stp x4, x2, [jssp, #-16]!
0x4cd32d88  1064  ubfx x16, x1, #8, #12
0x4cd32d8c  1068  and x0, x1, #0xfffffffffff00000
0x4cd32d90  1072  add x0, x0, x16, lsl #2
0x4cd32d94  1076  ubfx x4, x1, #3, #5
0x4cd32d98  1080  ldr x2, [x0, #360]
0x4cd32d9c  1084  lsr x2, x2, x4
0x4cd32da0  1088  tbz w2, #0, #+0x40 (addr 0x4cd32de0)
0x4cd32da4  1092  ldp x4, x2, [jssp], #16
0x4cd32da8  1096  ldp x3, x0, [jssp], #16
0x4cd32dac  1100  ldr x16, pc+756 (addr 0x000000004cd330a0)    ;; external reference (store_buffer_top)
0x4cd32db0  1104  ldr x1, [x16]
0x4cd32db4  1108  str x2, [x1], #8
0x4cd32db8  1112  str x1, [x16]
0x4cd32dbc  1116  tst x1, #0x1ffff
0x4cd32dc0  1120  b.eq #+0x8 (addr 0x4cd32dc8)
0x4cd32dc4  1124  ret
0x4cd32dc8  1128  sub csp, jssp, #0x8 (8)
0x4cd32dcc  1132  str lr, [jssp, #-8]!
0x4cd32dd0  1136  ldr x17, pc+728 (addr 0x000000004cd330a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd32dd4  1140  blr x17
0x4cd32dd8  1144  ldr lr, [jssp], #8
0x4cd32ddc  1148  ret
0x4cd32de0  1152  ldp x4, x2, [jssp], #16
0x4cd32de4  1156  sub csp, jssp, #0x78 (120)
0x4cd32de8  1160  stp x14, x15, [jssp, #-32]!
0x4cd32dec  1164  stp x18, lr, [jssp, #16]
0x4cd32df0  1168  stp x10, x11, [jssp, #-32]!
0x4cd32df4  1172  stp x12, x13, [jssp, #16]
0x4cd32df8  1176  stp x6, x7, [jssp, #-32]!
0x4cd32dfc  1180  stp x8, x9, [jssp, #16]
0x4cd32e00  1184  stp x2, x4, [jssp, #-24]!
0x4cd32e04  1188  str x5, [jssp, #16]
0x4cd32e08  1192  sub csp, jssp, #0xb0 (176)
0x4cd32e0c  1196  stp d26, d27, [jssp, #-32]!
0x4cd32e10  1200  stp d28, d29, [jssp, #16]
0x4cd32e14  1204  stp d22, d23, [jssp, #-32]!
0x4cd32e18  1208  stp d24, d25, [jssp, #16]
0x4cd32e1c  1212  stp d18, d19, [jssp, #-32]!
0x4cd32e20  1216  stp d20, d21, [jssp, #16]
0x4cd32e24  1220  stp d6, d7, [jssp, #-32]!
0x4cd32e28  1224  stp d16, d17, [jssp, #16]
0x4cd32e2c  1228  stp d2, d3, [jssp, #-32]!
0x4cd32e30  1232  stp d4, d5, [jssp, #16]
0x4cd32e34  1236  stp d0, d1, [jssp, #-16]!
0x4cd32e38  1240  mov x0, x4
0x4cd32e3c  1244  mov x1, x2
0x4cd32e40  1248  ldr x2, pc+624 (addr 0x000000004cd330b0)    ;; external reference (isolate)
0x4cd32e44  1252  ldr x16, pc+628 (addr 0x000000004cd330b8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd32e48  1256  and csp, jssp, #0xfffffffffffffff0
0x4cd32e4c  1260  blr x16
0x4cd32e50  1264  ldp d2, d3, [jssp, #16]
0x4cd32e54  1268  ldp d0, d1, [jssp], #32
0x4cd32e58  1272  ldp d6, d7, [jssp, #16]
0x4cd32e5c  1276  ldp d4, d5, [jssp], #32
0x4cd32e60  1280  ldp d18, d19, [jssp, #16]
0x4cd32e64  1284  ldp d16, d17, [jssp], #32
0x4cd32e68  1288  ldp d22, d23, [jssp, #16]
0x4cd32e6c  1292  ldp d20, d21, [jssp], #32
0x4cd32e70  1296  ldp d26, d27, [jssp, #16]
0x4cd32e74  1300  ldp d24, d25, [jssp], #32
0x4cd32e78  1304  ldp d28, d29, [jssp], #16
0x4cd32e7c  1308  ldp x5, x6, [jssp, #16]
0x4cd32e80  1312  ldp x2, x4, [jssp], #32
0x4cd32e84  1316  ldp x9, x10, [jssp, #16]
0x4cd32e88  1320  ldp x7, x8, [jssp], #32
0x4cd32e8c  1324  ldp x13, x14, [jssp, #16]
0x4cd32e90  1328  ldp x11, x12, [jssp], #32
0x4cd32e94  1332  ldr lr, [jssp, #16]
0x4cd32e98  1336  ldp x15, x18, [jssp], #24
0x4cd32e9c  1340  ldp x3, x0, [jssp], #16
0x4cd32ea0  1344  ldr x16, pc+544 (addr 0x000000004cd330c0)    ;; external reference (store_buffer_top)
0x4cd32ea4  1348  ldr x1, [x16]
0x4cd32ea8  1352  str x2, [x1], #8
0x4cd32eac  1356  str x1, [x16]
0x4cd32eb0  1360  tst x1, #0x1ffff
0x4cd32eb4  1364  b.eq #+0x8 (addr 0x4cd32ebc)
0x4cd32eb8  1368  ret
0x4cd32ebc  1372  sub csp, jssp, #0x8 (8)
0x4cd32ec0  1376  str lr, [jssp, #-8]!
0x4cd32ec4  1380  ldr x17, pc+516 (addr 0x000000004cd330c8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd32ec8  1384  blr x17
0x4cd32ecc  1388  ldr lr, [jssp], #8
0x4cd32ed0  1392  ret
0x4cd32ed4  1396  and x1, x4, #0xfffffffffff00000
0x4cd32ed8  1400  ldr x0, [x1, #104]
0x4cd32edc  1404  subs x0, x0, #0x1 (1)
0x4cd32ee0  1408  str x0, [x1, #104]
0x4cd32ee4  1412  b.mi #+0x84 (addr 0x4cd32f68)
0x4cd32ee8  1416  ubfx x16, x4, #8, #12
0x4cd32eec  1420  and x1, x4, #0xfffffffffff00000
0x4cd32ef0  1424  add x1, x1, x16, lsl #2
0x4cd32ef4  1428  ubfx x0, x4, #3, #5
0x4cd32ef8  1432  ldr x1, [x1, #360]
0x4cd32efc  1436  lsr x1, x1, x0
0x4cd32f00  1440  tbz w1, #0, #+0x8 (addr 0x4cd32f08)
0x4cd32f04  1444  tbnz w1, #1, #+0xc (addr 0x4cd32f10)
0x4cd32f08  1448  ldp x3, x0, [jssp], #16
0x4cd32f0c  1452  ret
0x4cd32f10  1456  ldr x1, [x2]
0x4cd32f14  1460  and x0, x1, #0xfffffffffff00000
0x4cd32f18  1464  ldr x0, [x0, #8]
0x4cd32f1c  1468  tbz w0, #6, #+0x18 (addr 0x4cd32f34)
0x4cd32f20  1472  and x0, x4, #0xfffffffffff00000
0x4cd32f24  1476  ldr x0, [x0, #8]
0x4cd32f28  1480  movz x16, #0x58
0x4cd32f2c  1484  tst x0, x16
0x4cd32f30  1488  b.eq #+0x38 (addr 0x4cd32f68)
0x4cd32f34  1492  sub csp, jssp, #0x10 (16)
0x4cd32f38  1496  stp x4, x2, [jssp, #-16]!
0x4cd32f3c  1500  ubfx x16, x1, #8, #12
0x4cd32f40  1504  and x0, x1, #0xfffffffffff00000
0x4cd32f44  1508  add x0, x0, x16, lsl #2
0x4cd32f48  1512  ubfx x4, x1, #3, #5
0x4cd32f4c  1516  ldr x2, [x0, #360]
0x4cd32f50  1520  lsr x2, x2, x4
0x4cd32f54  1524  tbz w2, #0, #+0x10 (addr 0x4cd32f64)
0x4cd32f58  1528  ldp x4, x2, [jssp], #16
0x4cd32f5c  1532  ldp x3, x0, [jssp], #16
0x4cd32f60  1536  ret
0x4cd32f64  1540  ldp x4, x2, [jssp], #16
0x4cd32f68  1544  sub csp, jssp, #0x78 (120)
0x4cd32f6c  1548  stp x14, x15, [jssp, #-32]!
0x4cd32f70  1552  stp x18, lr, [jssp, #16]
0x4cd32f74  1556  stp x10, x11, [jssp, #-32]!
0x4cd32f78  1560  stp x12, x13, [jssp, #16]
0x4cd32f7c  1564  stp x6, x7, [jssp, #-32]!
0x4cd32f80  1568  stp x8, x9, [jssp, #16]
0x4cd32f84  1572  stp x2, x4, [jssp, #-24]!
0x4cd32f88  1576  str x5, [jssp, #16]
0x4cd32f8c  1580  sub csp, jssp, #0xb0 (176)
0x4cd32f90  1584  stp d26, d27, [jssp, #-32]!
0x4cd32f94  1588  stp d28, d29, [jssp, #16]
0x4cd32f98  1592  stp d22, d23, [jssp, #-32]!
0x4cd32f9c  1596  stp d24, d25, [jssp, #16]
0x4cd32fa0  1600  stp d18, d19, [jssp, #-32]!
0x4cd32fa4  1604  stp d20, d21, [jssp, #16]
0x4cd32fa8  1608  stp d6, d7, [jssp, #-32]!
0x4cd32fac  1612  stp d16, d17, [jssp, #16]
0x4cd32fb0  1616  stp d2, d3, [jssp, #-32]!
0x4cd32fb4  1620  stp d4, d5, [jssp, #16]
0x4cd32fb8  1624  stp d0, d1, [jssp, #-16]!
0x4cd32fbc  1628  mov x0, x4
0x4cd32fc0  1632  mov x1, x2
0x4cd32fc4  1636  ldr x2, pc+268 (addr 0x000000004cd330d0)    ;; external reference (isolate)
0x4cd32fc8  1640  ldr x16, pc+272 (addr 0x000000004cd330d8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd32fcc  1644  and csp, jssp, #0xfffffffffffffff0
0x4cd32fd0  1648  blr x16
0x4cd32fd4  1652  ldp d2, d3, [jssp, #16]
0x4cd32fd8  1656  ldp d0, d1, [jssp], #32
0x4cd32fdc  1660  ldp d6, d7, [jssp, #16]
0x4cd32fe0  1664  ldp d4, d5, [jssp], #32
0x4cd32fe4  1668  ldp d18, d19, [jssp, #16]
0x4cd32fe8  1672  ldp d16, d17, [jssp], #32
0x4cd32fec  1676  ldp d22, d23, [jssp, #16]
0x4cd32ff0  1680  ldp d20, d21, [jssp], #32
0x4cd32ff4  1684  ldp d26, d27, [jssp, #16]
0x4cd32ff8  1688  ldp d24, d25, [jssp], #32
0x4cd32ffc  1692  ldp d28, d29, [jssp], #16
0x4cd33000  1696  ldp x5, x6, [jssp, #16]
0x4cd33004  1700  ldp x2, x4, [jssp], #32
0x4cd33008  1704  ldp x9, x10, [jssp, #16]
0x4cd3300c  1708  ldp x7, x8, [jssp], #32
0x4cd33010  1712  ldp x13, x14, [jssp, #16]
0x4cd33014  1716  ldp x11, x12, [jssp], #32
0x4cd33018  1720  ldr lr, [jssp, #16]
0x4cd3301c  1724  ldp x15, x18, [jssp], #24
0x4cd33020  1728  ldp x3, x0, [jssp], #16
0x4cd33024  1732  ret
0x4cd33028  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd3302c  1740  d63f03e0       constant
0x4cd33030  1744  166dd8c0       constant
0x4cd33034  1748  00000000       constant
0x4cd33038  1752  4cd065a0       constant
0x4cd3303c  1756  00000000       constant
0x4cd33040  1760  166dd8c0       constant
0x4cd33044  1764  00000000       constant
0x4cd33048  1768  4cd065a0       constant
0x4cd3304c  1772  00000000       constant
0x4cd33050  1776  166dd8c0       constant
0x4cd33054  1780  00000000       constant
0x4cd33058  1784  4cd065a0       constant
0x4cd3305c  1788  00000000       constant
0x4cd33060  1792  166dc2d0       constant
0x4cd33064  1796  00000000       constant
0x4cd33068  1800  00c2d958       constant
0x4cd3306c  1804  00000000       constant
0x4cd33070  1808  166dd8c0       constant
0x4cd33074  1812  00000000       constant
0x4cd33078  1816  4cd065a0       constant
0x4cd3307c  1820  00000000       constant
0x4cd33080  1824  166dc2d0       constant
0x4cd33084  1828  00000000       constant
0x4cd33088  1832  00c2d958       constant
0x4cd3308c  1836  00000000       constant
0x4cd33090  1840  166dd8c0       constant
0x4cd33094  1844  00000000       constant
0x4cd33098  1848  4cd065a0       constant
0x4cd3309c  1852  00000000       constant
0x4cd330a0  1856  166dd8c0       constant
0x4cd330a4  1860  00000000       constant
0x4cd330a8  1864  4cd065a0       constant
0x4cd330ac  1868  00000000       constant
0x4cd330b0  1872  166dc2d0       constant
0x4cd330b4  1876  00000000       constant
0x4cd330b8  1880  00c2d958       constant
0x4cd330bc  1884  00000000       constant
0x4cd330c0  1888  166dd8c0       constant
0x4cd330c4  1892  00000000       constant
0x4cd330c8  1896  4cd065a0       constant
0x4cd330cc  1900  00000000       constant
0x4cd330d0  1904  166dc2d0       constant
0x4cd330d4  1908  00000000       constant
0x4cd330d8  1912  00c2d958       constant
0x4cd330dc  1916  00000000       constant


RelocInfo (size = 65)
0x4cd32968  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd3298c  code target (STUB)  (0x4cd065a0)
0x4cd32a04  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd32a28  code target (STUB)  (0x4cd065a0)
0x4cd32a68  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd32a8c  code target (STUB)  (0x4cd065a0)
0x4cd32afc  external reference (isolate)  (0x166dc2d0)
0x4cd32b00  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd32b5c  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd32b80  code target (STUB)  (0x4cd065a0)
0x4cd32c60  external reference (isolate)  (0x166dc2d0)
0x4cd32c64  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd32d28  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd32d4c  code target (STUB)  (0x4cd065a0)
0x4cd32dac  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd32dd0  code target (STUB)  (0x4cd065a0)
0x4cd32e40  external reference (isolate)  (0x166dc2d0)
0x4cd32e44  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd32ea0  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd32ec4  code target (STUB)  (0x4cd065a0)
0x4cd32fc4  external reference (isolate)  (0x166dc2d0)
0x4cd32fc8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd33028  constant pool (size 184)


kind = STUB
major_key = FastCloneShallowArrayStub
name = FastCloneShallowArrayStub
compiler = crankshaft
Instructions (size = 1902)
0x4cd33140     0  ldur x0, [x3, #47]
0x4cd33144     4  asr x4, x2, #32
0x4cd33148     8  add x5, x0, #0x17 (23)
0x4cd3314c    12  ldr x6, [x5, w4, sxtw #3]
0x4cd33150    16  ldr x0, pc+1456 (addr 0x000000004cd33700)    ;; object: 0x21004241 <undefined>
0x4cd33154    20  cmp x6, x0
0x4cd33158    24  b.eq #+0x33c (addr 0x4cd33494)
0x4cd3315c    28  ldur x0, [x6, #7]
0x4cd33160    32  ldur x1, [x0, #15]
0x4cd33164    36  ldur w2, [x1, #11]
0x4cd33168    40  cbz w2, #+0x2c0 (addr 0x4cd33428)
0x4cd3316c    44  ldur x3, [x1, #-1]
0x4cd33170    48  ldr x16, pc+1432 (addr 0x000000004cd33708)    ;; object: 0x2a804361 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd33174    52  cmp x3, x16
0x4cd33178    56  b.eq #+0x24c (addr 0x4cd333c4)
0x4cd3317c    60  ldur x1, [x1, #-1]
0x4cd33180    64  ldr x16, pc+1424 (addr 0x000000004cd33710)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd33184    68  cmp x1, x16
0x4cd33188    72  b.eq #+0x120 (addr 0x4cd332a8)
0x4cd3318c    76  lsl w1, w2, #3
0x4cd33190    80  add w1, w1, #0x10 (16)
0x4cd33194    84  movz x3, #0xd2c0
0x4cd33198    88  movk x3, #0x166d, lsl #16
0x4cd3319c    92  ldp x4, x2, [x3]
0x4cd331a0    96  adds x16, x4, #0x30 (48)
0x4cd331a4   100  ccmp x16, x2, #nzCv, lo
0x4cd331a8   104  b.hi #+0x2f0 (addr 0x4cd33498)
0x4cd331ac   108  str x16, [x3]
0x4cd331b0   112  orr x4, x4, #0x1
0x4cd331b4   116  ldur x2, [x0, #-1]
0x4cd331b8   120  stur x2, [x4, #-1]
0x4cd331bc   124  ldr x2, pc+1372 (addr 0x000000004cd33718)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd331c0   128  stur x2, [x4, #7]
0x4cd331c4   132  ldr x2, pc+1372 (addr 0x000000004cd33720)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd331c8   136  stur x2, [x4, #15]
0x4cd331cc   140  movz x2, #0x0
0x4cd331d0   144  stur x2, [x4, #23]
0x4cd331d4   148  add x2, x4, #0x20 (32)
0x4cd331d8   152  ldr x3, pc+1360 (addr 0x000000004cd33728)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd331dc   156  stur x3, [x2, #-1]
0x4cd331e0   160  stur x6, [x2, #7]
0x4cd331e4   164  ldur w2, [x6, #35]
0x4cd331e8   168  add w2, w2, #0x1 (1)
0x4cd331ec   172  lsl x2, x2, #32
0x4cd331f0   176  stur x2, [x6, #31]
0x4cd331f4   180  sxtw x1, w1
0x4cd331f8   184  movz x2, #0xd2c0
0x4cd331fc   188  movk x2, #0x166d, lsl #16
0x4cd33200   192  ldp x5, x16, [x2]
0x4cd33204   196  adds x3, x5, x1
0x4cd33208   200  ccmp x3, x16, #nzCv, lo
0x4cd3320c   204  b.hi #+0x2f0 (addr 0x4cd334fc)
0x4cd33210   208  str x3, [x2]
0x4cd33214   212  orr x5, x5, #0x1
0x4cd33218   216  mov x1, x5
0x4cd3321c   220  stur x1, [x4, #15]
0x4cd33220   224  add x2, x4, #0xf (15)
0x4cd33224   228  and x1, x4, #0xfffffffffff00000
0x4cd33228   232  ldr x1, [x1, #8]
0x4cd3322c   236  tbz w1, #2, #+0x18 (addr 0x4cd33244)
0x4cd33230   240  sub csp, jssp, #0x8 (8)
0x4cd33234   244  str lr, [jssp, #-8]!
0x4cd33238   248  ldr x16, pc+1272 (addr 0x000000004cd33730)    ;; code: STUB, RecordWriteStub, minor: 67620
0x4cd3323c   252  blr x16
0x4cd33240   256  ldr lr, [jssp], #8
0x4cd33244   260  ldur x1, [x0, #15]
0x4cd33248   264  ldur x2, [x1, #-1]
0x4cd3324c   268  stur x2, [x5, #-1]
0x4cd33250   272  ldur w2, [x1, #11]
0x4cd33254   276  lsl x2, x2, #32
0x4cd33258   280  stur x2, [x5, #7]
0x4cd3325c   284  ldur w0, [x0, #27]
0x4cd33260   288  lsl x2, x0, #32
0x4cd33264   292  stur x2, [x4, #23]
0x4cd33268   296  ldr d0, pc+1168 (addr 0x000000004cd336f8)
0x4cd3326c   300  ldur w2, [x5, #11]
0x4cd33270   304  cmp w0, w2
0x4cd33274   308  b.ge #+0x14 (addr 0x4cd33288)
0x4cd33278   312  sub w2, w2, #0x1 (1)
0x4cd3327c   316  add x3, x5, #0xf (15)
0x4cd33280   320  str d0, [x3, w2, sxtw #3]
0x4cd33284   324  b #-0x14 (addr 0x4cd33270)
0x4cd33288   328  cmp w0, #0x0 (0)
0x4cd3328c   332  b.le #+0x200 (addr 0x4cd3348c)
0x4cd33290   336  sub w0, w0, #0x1 (1)
0x4cd33294   340  add x2, x1, #0xf (15)
0x4cd33298   344  ldr d0, [x2, w0, sxtw #3]
0x4cd3329c   348  add x2, x5, #0xf (15)
0x4cd332a0   352  str d0, [x2, w0, sxtw #3]
0x4cd332a4   356  b #-0x1c (addr 0x4cd33288)
0x4cd332a8   360  lsl w1, w2, #3
0x4cd332ac   364  add w1, w1, #0x10 (16)
0x4cd332b0   368  movz x3, #0xd2c0
0x4cd332b4   372  movk x3, #0x166d, lsl #16
0x4cd332b8   376  ldp x4, x2, [x3]
0x4cd332bc   380  adds x16, x4, #0x30 (48)
0x4cd332c0   384  ccmp x16, x2, #nzCv, lo
0x4cd332c4   388  b.hi #+0x29c (addr 0x4cd33560)
0x4cd332c8   392  str x16, [x3]
0x4cd332cc   396  orr x4, x4, #0x1
0x4cd332d0   400  ldur x2, [x0, #-1]
0x4cd332d4   404  stur x2, [x4, #-1]
0x4cd332d8   408  ldr x2, pc+1120 (addr 0x000000004cd33738)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd332dc   412  stur x2, [x4, #7]
0x4cd332e0   416  ldr x2, pc+1120 (addr 0x000000004cd33740)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd332e4   420  stur x2, [x4, #15]
0x4cd332e8   424  movz x2, #0x0
0x4cd332ec   428  stur x2, [x4, #23]
0x4cd332f0   432  add x2, x4, #0x20 (32)
0x4cd332f4   436  ldr x3, pc+1108 (addr 0x000000004cd33748)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd332f8   440  stur x3, [x2, #-1]
0x4cd332fc   444  stur x6, [x2, #7]
0x4cd33300   448  ldur w2, [x6, #35]
0x4cd33304   452  add w2, w2, #0x1 (1)
0x4cd33308   456  lsl x2, x2, #32
0x4cd3330c   460  stur x2, [x6, #31]
0x4cd33310   464  sxtw x1, w1
0x4cd33314   468  movz x2, #0xd2c0
0x4cd33318   472  movk x2, #0x166d, lsl #16
0x4cd3331c   476  ldp x5, x16, [x2]
0x4cd33320   480  adds x3, x5, x1
0x4cd33324   484  ccmp x3, x16, #nzCv, lo
0x4cd33328   488  b.hi #+0x29c (addr 0x4cd335c4)
0x4cd3332c   492  str x3, [x2]
0x4cd33330   496  orr x5, x5, #0x1
0x4cd33334   500  mov x1, x5
0x4cd33338   504  stur x1, [x4, #15]
0x4cd3333c   508  add x2, x4, #0xf (15)
0x4cd33340   512  and x1, x4, #0xfffffffffff00000
0x4cd33344   516  ldr x1, [x1, #8]
0x4cd33348   520  tbz w1, #2, #+0x18 (addr 0x4cd33360)
0x4cd3334c   524  sub csp, jssp, #0x8 (8)
0x4cd33350   528  str lr, [jssp, #-8]!
0x4cd33354   532  ldr x16, pc+1020 (addr 0x000000004cd33750)    ;; code: STUB, RecordWriteStub, minor: 67620
0x4cd33358   536  blr x16
0x4cd3335c   540  ldr lr, [jssp], #8
0x4cd33360   544  ldur x1, [x0, #15]
0x4cd33364   548  ldur x2, [x1, #-1]
0x4cd33368   552  stur x2, [x5, #-1]
0x4cd3336c   556  ldur w2, [x1, #11]
0x4cd33370   560  lsl x2, x2, #32
0x4cd33374   564  stur x2, [x5, #7]
0x4cd33378   568  ldur w0, [x0, #27]
0x4cd3337c   572  lsl x2, x0, #32
0x4cd33380   576  stur x2, [x4, #23]
0x4cd33384   580  ldur w2, [x5, #11]
0x4cd33388   584  cmp w0, w2
0x4cd3338c   588  b.ge #+0x18 (addr 0x4cd333a4)
0x4cd33390   592  sub w2, w2, #0x1 (1)
0x4cd33394   596  ldr x3, pc+964 (addr 0x000000004cd33758)    ;; object: 0x21004519 <the hole>
0x4cd33398   600  add x6, x5, #0xf (15)
0x4cd3339c   604  str x3, [x6, w2, sxtw #3]
0x4cd333a0   608  b #-0x18 (addr 0x4cd33388)
0x4cd333a4   612  cmp w0, #0x0 (0)
0x4cd333a8   616  b.le #+0xe4 (addr 0x4cd3348c)
0x4cd333ac   620  sub w0, w0, #0x1 (1)
0x4cd333b0   624  add x2, x1, #0xf (15)
0x4cd333b4   628  ldr x3, [x2, w0, sxtw #3]
0x4cd333b8   632  add x2, x5, #0xf (15)
0x4cd333bc   636  str x3, [x2, w0, sxtw #3]
0x4cd333c0   640  b #-0x1c (addr 0x4cd333a4)
0x4cd333c4   644  movz x3, #0xd2c0
0x4cd333c8   648  movk x3, #0x166d, lsl #16
0x4cd333cc   652  ldp x4, x2, [x3]
0x4cd333d0   656  adds x16, x4, #0x30 (48)
0x4cd333d4   660  ccmp x16, x2, #nzCv, lo
0x4cd333d8   664  b.hi #+0x250 (addr 0x4cd33628)
0x4cd333dc   668  str x16, [x3]
0x4cd333e0   672  orr x4, x4, #0x1
0x4cd333e4   676  ldur x2, [x0, #-1]
0x4cd333e8   680  ldur w0, [x0, #27]
0x4cd333ec   684  stur x2, [x4, #-1]
0x4cd333f0   688  ldr x2, pc+880 (addr 0x000000004cd33760)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd333f4   692  stur x2, [x4, #7]
0x4cd333f8   696  stur x1, [x4, #15]
0x4cd333fc   700  lsl x0, x0, #32
0x4cd33400   704  stur x0, [x4, #23]
0x4cd33404   708  add x0, x4, #0x20 (32)
0x4cd33408   712  ldr x1, pc+864 (addr 0x000000004cd33768)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd3340c   716  stur x1, [x0, #-1]
0x4cd33410   720  stur x6, [x0, #7]
0x4cd33414   724  ldur w0, [x6, #35]
0x4cd33418   728  add w0, w0, #0x1 (1)
0x4cd3341c   732  lsl x0, x0, #32
0x4cd33420   736  stur x0, [x6, #31]
0x4cd33424   740  b #+0x68 (addr 0x4cd3348c)
0x4cd33428   744  movz x2, #0xd2c0
0x4cd3342c   748  movk x2, #0x166d, lsl #16
0x4cd33430   752  ldp x3, x1, [x2]
0x4cd33434   756  adds x16, x3, #0x30 (48)
0x4cd33438   760  ccmp x16, x1, #nzCv, lo
0x4cd3343c   764  b.hi #+0x250 (addr 0x4cd3368c)
0x4cd33440   768  str x16, [x2]
0x4cd33444   772  orr x3, x3, #0x1
0x4cd33448   776  ldur x0, [x0, #-1]
0x4cd3344c   780  stur x0, [x3, #-1]
0x4cd33450   784  ldr x0, pc+800 (addr 0x000000004cd33770)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd33454   788  stur x0, [x3, #7]
0x4cd33458   792  ldr x0, pc+800 (addr 0x000000004cd33778)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd3345c   796  stur x0, [x3, #15]
0x4cd33460   800  movz x0, #0x0
0x4cd33464   804  stur x0, [x3, #23]
0x4cd33468   808  add x0, x3, #0x20 (32)
0x4cd3346c   812  ldr x1, pc+788 (addr 0x000000004cd33780)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd33470   816  stur x1, [x0, #-1]
0x4cd33474   820  stur x6, [x0, #7]
0x4cd33478   824  ldur w0, [x6, #35]
0x4cd3347c   828  add w0, w0, #0x1 (1)
0x4cd33480   832  lsl x0, x0, #32
0x4cd33484   836  stur x0, [x6, #31]
0x4cd33488   840  mov x4, x3
0x4cd3348c   844  mov x0, x4
0x4cd33490   848  ret
0x4cd33494   852  b #+0x384 (addr 0x4cd33818)
0x4cd33498   856  sub csp, jssp, #0x10 (16)
0x4cd3349c   860  stp fp, lr, [jssp, #-16]!
0x4cd334a0   864  movz fp, #0xa00000000
0x4cd334a4   868  sub csp, jssp, #0x8 (8)
0x4cd334a8   872  str fp, [jssp, #-8]!
0x4cd334ac   876  add fp, jssp, #0x8 (8)
0x4cd334b0   880  movz x4, #0x0
0x4cd334b4   884  mov x16, lr
0x4cd334b8   888  ldr x17, pc+720 (addr 0x000000004cd33788)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd334bc   892  blr x17
0x4cd334c0   896  movz x0, #0x3000000000
0x4cd334c4   900  movz x10, #0x0
0x4cd334c8   904  sub csp, jssp, #0x10 (16)
0x4cd334cc   908  stp x10, x0, [jssp, #-16]!
0x4cd334d0   912  movz x0, #0x2
0x4cd334d4   916  movz x1, #0x5b88
0x4cd334d8   920  movk x1, #0xe2, lsl #16
0x4cd334dc   924  ldr x16, pc+692 (addr 0x000000004cd33790)    ;; code: STUB, CEntryStub, minor: 5
0x4cd334e0   928  blr x16
0x4cd334e4   932  str x0, [jssp, #32]
0x4cd334e8   936  ldr x16, pc+688 (addr 0x000000004cd33798)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd334ec   940  blr x16
0x4cd334f0   944  ldr lr, [jssp, #16]
0x4cd334f4   948  ldp xzr, fp, [jssp], #24
0x4cd334f8   952  b #-0x344 (addr 0x4cd331b4)
0x4cd334fc   956  sub csp, jssp, #0x10 (16)
0x4cd33500   960  stp fp, lr, [jssp, #-16]!
0x4cd33504   964  movz fp, #0xa00000000
0x4cd33508   968  sub csp, jssp, #0x8 (8)
0x4cd3350c   972  str fp, [jssp, #-8]!
0x4cd33510   976  add fp, jssp, #0x8 (8)
0x4cd33514   980  movz x5, #0x0
0x4cd33518   984  mov x16, lr
0x4cd3351c   988  ldr x17, pc+644 (addr 0x000000004cd337a0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd33520   992  blr x17
0x4cd33524   996  lsl x0, x1, #32
0x4cd33528  1000  movz x10, #0x100000000
0x4cd3352c  1004  sub csp, jssp, #0x10 (16)
0x4cd33530  1008  stp x10, x0, [jssp, #-16]!
0x4cd33534  1012  movz x0, #0x2
0x4cd33538  1016  movz x1, #0x5b88
0x4cd3353c  1020  movk x1, #0xe2, lsl #16
0x4cd33540  1024  ldr x16, pc+616 (addr 0x000000004cd337a8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd33544  1028  blr x16
0x4cd33548  1032  str x0, [jssp, #40]
0x4cd3354c  1036  ldr x16, pc+612 (addr 0x000000004cd337b0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd33550  1040  blr x16
0x4cd33554  1044  ldr lr, [jssp, #16]
0x4cd33558  1048  ldp xzr, fp, [jssp], #24
0x4cd3355c  1052  b #-0x344 (addr 0x4cd33218)
0x4cd33560  1056  sub csp, jssp, #0x10 (16)
0x4cd33564  1060  stp fp, lr, [jssp, #-16]!
0x4cd33568  1064  movz fp, #0xa00000000
0x4cd3356c  1068  sub csp, jssp, #0x8 (8)
0x4cd33570  1072  str fp, [jssp, #-8]!
0x4cd33574  1076  add fp, jssp, #0x8 (8)
0x4cd33578  1080  movz x4, #0x0
0x4cd3357c  1084  mov x16, lr
0x4cd33580  1088  ldr x17, pc+568 (addr 0x000000004cd337b8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd33584  1092  blr x17
0x4cd33588  1096  movz x0, #0x3000000000
0x4cd3358c  1100  movz x10, #0x0
0x4cd33590  1104  sub csp, jssp, #0x10 (16)
0x4cd33594  1108  stp x10, x0, [jssp, #-16]!
0x4cd33598  1112  movz x0, #0x2
0x4cd3359c  1116  movz x1, #0x5b88
0x4cd335a0  1120  movk x1, #0xe2, lsl #16
0x4cd335a4  1124  ldr x16, pc+540 (addr 0x000000004cd337c0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd335a8  1128  blr x16
0x4cd335ac  1132  str x0, [jssp, #32]
0x4cd335b0  1136  ldr x16, pc+536 (addr 0x000000004cd337c8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd335b4  1140  blr x16
0x4cd335b8  1144  ldr lr, [jssp, #16]
0x4cd335bc  1148  ldp xzr, fp, [jssp], #24
0x4cd335c0  1152  b #-0x2f0 (addr 0x4cd332d0)
0x4cd335c4  1156  sub csp, jssp, #0x10 (16)
0x4cd335c8  1160  stp fp, lr, [jssp, #-16]!
0x4cd335cc  1164  movz fp, #0xa00000000
0x4cd335d0  1168  sub csp, jssp, #0x8 (8)
0x4cd335d4  1172  str fp, [jssp, #-8]!
0x4cd335d8  1176  add fp, jssp, #0x8 (8)
0x4cd335dc  1180  movz x5, #0x0
0x4cd335e0  1184  mov x16, lr
0x4cd335e4  1188  ldr x17, pc+492 (addr 0x000000004cd337d0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd335e8  1192  blr x17
0x4cd335ec  1196  lsl x0, x1, #32
0x4cd335f0  1200  movz x10, #0x0
0x4cd335f4  1204  sub csp, jssp, #0x10 (16)
0x4cd335f8  1208  stp x10, x0, [jssp, #-16]!
0x4cd335fc  1212  movz x0, #0x2
0x4cd33600  1216  movz x1, #0x5b88
0x4cd33604  1220  movk x1, #0xe2, lsl #16
0x4cd33608  1224  ldr x16, pc+464 (addr 0x000000004cd337d8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd3360c  1228  blr x16
0x4cd33610  1232  str x0, [jssp, #40]
0x4cd33614  1236  ldr x16, pc+460 (addr 0x000000004cd337e0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd33618  1240  blr x16
0x4cd3361c  1244  ldr lr, [jssp, #16]
0x4cd33620  1248  ldp xzr, fp, [jssp], #24
0x4cd33624  1252  b #-0x2f0 (addr 0x4cd33334)
0x4cd33628  1256  sub csp, jssp, #0x10 (16)
0x4cd3362c  1260  stp fp, lr, [jssp, #-16]!
0x4cd33630  1264  movz fp, #0xa00000000
0x4cd33634  1268  sub csp, jssp, #0x8 (8)
0x4cd33638  1272  str fp, [jssp, #-8]!
0x4cd3363c  1276  add fp, jssp, #0x8 (8)
0x4cd33640  1280  movz x4, #0x0
0x4cd33644  1284  mov x16, lr
0x4cd33648  1288  ldr x17, pc+416 (addr 0x000000004cd337e8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd3364c  1292  blr x17
0x4cd33650  1296  movz x0, #0x3000000000
0x4cd33654  1300  movz x10, #0x0
0x4cd33658  1304  sub csp, jssp, #0x10 (16)
0x4cd3365c  1308  stp x10, x0, [jssp, #-16]!
0x4cd33660  1312  movz x0, #0x2
0x4cd33664  1316  movz x1, #0x5b88
0x4cd33668  1320  movk x1, #0xe2, lsl #16
0x4cd3366c  1324  ldr x16, pc+388 (addr 0x000000004cd337f0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd33670  1328  blr x16
0x4cd33674  1332  str x0, [jssp, #32]
0x4cd33678  1336  ldr x16, pc+384 (addr 0x000000004cd337f8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd3367c  1340  blr x16
0x4cd33680  1344  ldr lr, [jssp, #16]
0x4cd33684  1348  ldp xzr, fp, [jssp], #24
0x4cd33688  1352  b #-0x2a4 (addr 0x4cd333e4)
0x4cd3368c  1356  sub csp, jssp, #0x10 (16)
0x4cd33690  1360  stp fp, lr, [jssp, #-16]!
0x4cd33694  1364  movz fp, #0xa00000000
0x4cd33698  1368  sub csp, jssp, #0x8 (8)
0x4cd3369c  1372  str fp, [jssp, #-8]!
0x4cd336a0  1376  add fp, jssp, #0x8 (8)
0x4cd336a4  1380  movz x3, #0x0
0x4cd336a8  1384  mov x16, lr
0x4cd336ac  1388  ldr x17, pc+340 (addr 0x000000004cd33800)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd336b0  1392  blr x17
0x4cd336b4  1396  movz x0, #0x3000000000
0x4cd336b8  1400  movz x10, #0x0
0x4cd336bc  1404  sub csp, jssp, #0x10 (16)
0x4cd336c0  1408  stp x10, x0, [jssp, #-16]!
0x4cd336c4  1412  movz x0, #0x2
0x4cd336c8  1416  movz x1, #0x5b88
0x4cd336cc  1420  movk x1, #0xe2, lsl #16
0x4cd336d0  1424  ldr x16, pc+312 (addr 0x000000004cd33808)    ;; code: STUB, CEntryStub, minor: 5
0x4cd336d4  1428  blr x16
0x4cd336d8  1432  str x0, [jssp, #24]
0x4cd336dc  1436  ldr x16, pc+308 (addr 0x000000004cd33810)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd336e0  1440  blr x16
0x4cd336e4  1444  ldr lr, [jssp, #16]
0x4cd336e8  1448  ldp xzr, fp, [jssp], #24
0x4cd336ec  1452  b #-0x2a4 (addr 0x4cd33448)
0x4cd336f0  1456  5800093f       constant pool begin (num_const = 73)    ;; constant pool
0x4cd336f4  1460  d63f03e0       constant
0x4cd336f8  1464  fff7ffff       constant
0x4cd336fc  1468  fff7ffff       constant
0x4cd33700  1472  21004241       constant
0x4cd33704  1476  00000000       constant
0x4cd33708  1480  2a804361       constant
0x4cd3370c  1484  00000000       constant
0x4cd33710  1488  2a804259       constant
0x4cd33714  1492  00000000       constant
0x4cd33718  1496  21004201       constant
0x4cd3371c  1500  00000000       constant
0x4cd33720  1504  21004201       constant
0x4cd33724  1508  00000000       constant
0x4cd33728  1512  2a805d81       constant
0x4cd3372c  1516  00000000       constant
0x4cd33730  1520  4cd32960       constant
0x4cd33734  1524  00000000       constant
0x4cd33738  1528  21004201       constant
0x4cd3373c  1532  00000000       constant
0x4cd33740  1536  21004201       constant
0x4cd33744  1540  00000000       constant
0x4cd33748  1544  2a805d81       constant
0x4cd3374c  1548  00000000       constant
0x4cd33750  1552  4cd32960       constant
0x4cd33754  1556  00000000       constant
0x4cd33758  1560  21004519       constant
0x4cd3375c  1564  00000000       constant
0x4cd33760  1568  21004201       constant
0x4cd33764  1572  00000000       constant
0x4cd33768  1576  2a805d81       constant
0x4cd3376c  1580  00000000       constant
0x4cd33770  1584  21004201       constant
0x4cd33774  1588  00000000       constant
0x4cd33778  1592  21004201       constant
0x4cd3377c  1596  00000000       constant
0x4cd33780  1600  2a805d81       constant
0x4cd33784  1604  00000000       constant
0x4cd33788  1608  4cd06820       constant
0x4cd3378c  1612  00000000       constant
0x4cd33790  1616  4cd06260       constant
0x4cd33794  1620  00000000       constant
0x4cd33798  1624  4cd068e0       constant
0x4cd3379c  1628  00000000       constant
0x4cd337a0  1632  4cd06820       constant
0x4cd337a4  1636  00000000       constant
0x4cd337a8  1640  4cd06260       constant
0x4cd337ac  1644  00000000       constant
0x4cd337b0  1648  4cd068e0       constant
0x4cd337b4  1652  00000000       constant
0x4cd337b8  1656  4cd06820       constant
0x4cd337bc  1660  00000000       constant
0x4cd337c0  1664  4cd06260       constant
0x4cd337c4  1668  00000000       constant
0x4cd337c8  1672  4cd068e0       constant
0x4cd337cc  1676  00000000       constant
0x4cd337d0  1680  4cd06820       constant
0x4cd337d4  1684  00000000       constant
0x4cd337d8  1688  4cd06260       constant
0x4cd337dc  1692  00000000       constant
0x4cd337e0  1696  4cd068e0       constant
0x4cd337e4  1700  00000000       constant
0x4cd337e8  1704  4cd06820       constant
0x4cd337ec  1708  00000000       constant
0x4cd337f0  1712  4cd06260       constant
0x4cd337f4  1716  00000000       constant
0x4cd337f8  1720  4cd068e0       constant
0x4cd337fc  1724  00000000       constant
0x4cd33800  1728  4cd06820       constant
0x4cd33804  1732  00000000       constant
0x4cd33808  1736  4cd06260       constant
0x4cd3380c  1740  00000000       constant
0x4cd33810  1744  4cd068e0       constant
0x4cd33814  1748  00000000       constant
0x4cd33818  1752  movz x16, #0x0
0x4cd3381c  1756  sub csp, jssp, #0x10 (16)
0x4cd33820  1760  stp fp, lr, [jssp, #-16]!
0x4cd33824  1764  bl #+0x4 (addr 0x4cd33828)
0x4cd33828  1768  movz x17, #0xa00000000
0x4cd3382c  1772  sub csp, jssp, #0x10 (16)
0x4cd33830  1776  stp x17, cp, [jssp, #-16]!
0x4cd33834  1780  add fp, jssp, #0x10 (16)
0x4cd33838  1784  ldr x17, pc+24 (addr 0x000000004cd33850)    ;; lazy deoptimization bailout 0
0x4cd3383c  1788  add x17, x17, x16
0x4cd33840  1792  br x17
0x4cd33844  1796  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd33848  1800  d63f03e0       constant
0x4cd3384c  1804  d503201f       constant
0x4cd33850  1808  4cb06000       constant
0x4cd33854  1812  00000000       constant


Safepoints (size = 86)
0x4cd334e4   932  000 | x0 | x4 | x6 | x27 (sp -> fp)  <none> argc: 2
0x4cd33548  1032  000 | x0 | x4 | x5 | x27 (sp -> fp)  <none> argc: 2
0x4cd335ac  1132  000 | x0 | x4 | x6 | x27 (sp -> fp)  <none> argc: 2
0x4cd33610  1232  000 | x0 | x4 | x5 | x27 (sp -> fp)  <none> argc: 2
0x4cd33674  1332  000 | x0 | x1 | x4 | x6 | x27 (sp -> fp)  <none> argc: 2
0x4cd336d8  1432  000 | x0 | x3 | x6 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 65)
0x4cd33150  embedded object  (0x21004241 <undefined>)
0x4cd33170  embedded object  (0x2a804361 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd33180  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd331bc  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd331c4  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd331d8  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd33238  code target (STUB)  (0x4cd32960)
0x4cd332d8  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd332e0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd332f4  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd33354  code target (STUB)  (0x4cd32960)
0x4cd33394  embedded object  (0x21004519 <the hole>)
0x4cd333f0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd33408  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd33450  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd33458  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd3346c  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd334b8  code target (STUB)  (0x4cd06820)
0x4cd334dc  code target (STUB)  (0x4cd06260)
0x4cd334e8  code target (STUB)  (0x4cd068e0)
0x4cd3351c  code target (STUB)  (0x4cd06820)
0x4cd33540  code target (STUB)  (0x4cd06260)
0x4cd3354c  code target (STUB)  (0x4cd068e0)
0x4cd33580  code target (STUB)  (0x4cd06820)
0x4cd335a4  code target (STUB)  (0x4cd06260)
0x4cd335b0  code target (STUB)  (0x4cd068e0)
0x4cd335e4  code target (STUB)  (0x4cd06820)
0x4cd33608  code target (STUB)  (0x4cd06260)
0x4cd33614  code target (STUB)  (0x4cd068e0)
0x4cd33648  code target (STUB)  (0x4cd06820)
0x4cd3366c  code target (STUB)  (0x4cd06260)
0x4cd33678  code target (STUB)  (0x4cd068e0)
0x4cd336ac  code target (STUB)  (0x4cd06820)
0x4cd336d0  code target (STUB)  (0x4cd06260)
0x4cd336dc  code target (STUB)  (0x4cd068e0)
0x4cd336f0  constant pool (size 296)
0x4cd33838  runtime entry
0x4cd33844  constant pool (size 20)


kind = KEYED_STORE_IC
major_key = VectorKeyedStoreICTrampolineStub
ic_state = GENERIC
extra_ic_state = 0
name = VectorKeyedStoreICTrampolineStub
compiler = unknown
Instructions (size = 384)
0x4cd33920     0  ldur x3, [fp, #-16]
0x4cd33924     4  ldur x3, [x3, #31]
0x4cd33928     8  ldur x3, [x3, #87]
0x4cd3392c    12  add x5, x3, x4, asr #29
0x4cd33930    16  ldur x5, [x5, #15]
0x4cd33934    20  tbz w1, #0, #+0x140 (addr 0x4cd33a74)
0x4cd33938    24  ldur x6, [x1, #-1]
0x4cd3393c    28  ldur x7, [x5, #7]
0x4cd33940    32  cmp x7, x6
0x4cd33944    36  b.ne #+0x14 (addr 0x4cd33958)
0x4cd33948    40  add x5, x3, x4, asr #29
0x4cd3394c    44  ldur x5, [x5, #23]
0x4cd33950    48  add x5, x5, #0x5f (95)
0x4cd33954    52  br x5
0x4cd33958    56  ldur x7, [x5, #-1]
0x4cd3395c    60  ldr x16, [x26, #224]
0x4cd33960    64  cmp x7, x16
0x4cd33964    68  b.ne #+0x68 (addr 0x4cd339cc)
0x4cd33968    72  ldur x8, [x5, #7]
0x4cd3396c    76  add x8, x5, x8, asr #29
0x4cd33970    80  add x8, x8, #0xf (15)
0x4cd33974    84  add x5, x5, #0xf (15)
0x4cd33978    88  ldr x7, [x5]
0x4cd3397c    92  ldur x7, [x7, #7]
0x4cd33980    96  cmp x6, x7
0x4cd33984   100  b.ne #+0x38 (addr 0x4cd339bc)
0x4cd33988   104  ldr x8, [x5, #8]
0x4cd3398c   108  ldr x16, [x26, #40]
0x4cd33990   112  cmp x8, x16
0x4cd33994   116  b.ne #+0x10 (addr 0x4cd339a4)
0x4cd33998   120  ldr x5, [x5, #16]
0x4cd3399c   124  add x5, x5, #0x5f (95)
0x4cd339a0   128  br x5
0x4cd339a4   132  ldur x8, [x8, #7]
0x4cd339a8   136  tbz w8, #0, #+0xac (addr 0x4cd33a54)
0x4cd339ac   140  ldr x6, [x5, #16]
0x4cd339b0   144  mov x5, x8
0x4cd339b4   148  add x6, x6, #0x5f (95)
0x4cd339b8   152  br x6
0x4cd339bc   156  add x5, x5, #0x18 (24)
0x4cd339c0   160  cmp x5, x8
0x4cd339c4   164  b.lt #-0x4c (addr 0x4cd33978)
0x4cd339c8   168  b #+0x8c (addr 0x4cd33a54)
0x4cd339cc   172  ldr x16, [x26, #2400]
0x4cd339d0   176  cmp x5, x16
0x4cd339d4   180  b.ne #+0xc (addr 0x4cd339e0)
0x4cd339d8   184  ldr x16, pc+176 (addr 0x000000004cd33a88)    ;; code: KEYED_STORE_IC, MEGAMORPHIC
0x4cd339dc   188  br x16
0x4cd339e0   192  cmp x2, x5
0x4cd339e4   196  b.ne #+0x70 (addr 0x4cd33a54)
0x4cd339e8   200  add x5, x3, x4, asr #29
0x4cd339ec   204  ldur x5, [x5, #23]
0x4cd339f0   208  ldur x7, [x5, #15]
0x4cd339f4   212  ldur x7, [x7, #7]
0x4cd339f8   216  cmp x6, x7
0x4cd339fc   220  b.ne #+0x10 (addr 0x4cd33a0c)
0x4cd33a00   224  ldur x5, [x5, #23]
0x4cd33a04   228  add x5, x5, #0x5f (95)
0x4cd33a08   232  br x5
0x4cd33a0c   236  ldur x8, [x5, #7]
0x4cd33a10   240  movz x16, #0x200000000
0x4cd33a14   244  cmp x8, x16
0x4cd33a18   248  b.eq #+0x3c (addr 0x4cd33a54)
0x4cd33a1c   252  add x8, x5, x8, asr #29
0x4cd33a20   256  add x8, x8, #0xf (15)
0x4cd33a24   260  add x5, x5, #0x1f (31)
0x4cd33a28   264  ldr x7, [x5]
0x4cd33a2c   268  ldur x7, [x7, #7]
0x4cd33a30   272  cmp x6, x7
0x4cd33a34   276  b.ne #+0x10 (addr 0x4cd33a44)
0x4cd33a38   280  ldr x5, [x5, #8]
0x4cd33a3c   284  add x5, x5, #0x5f (95)
0x4cd33a40   288  br x5
0x4cd33a44   292  add x5, x5, #0x10 (16)
0x4cd33a48   296  cmp x5, x8
0x4cd33a4c   300  b.lt #-0x24 (addr 0x4cd33a28)
0x4cd33a50   304  b #+0x4 (addr 0x4cd33a54)
0x4cd33a54   308  sub csp, jssp, #0x28 (40)
0x4cd33a58   312  stp x4, x0, [jssp, #-32]!
0x4cd33a5c   316  stp x2, x1, [jssp, #16]
0x4cd33a60   320  str x3, [jssp, #-8]!
0x4cd33a64   324  movz x0, #0x5
0x4cd33a68   328  ldr x1, pc+40 (addr 0x000000004cd33a90)    ;; external reference (Runtime::KeyedStoreIC_Miss)
0x4cd33a6c   332  ldr x16, pc+44 (addr 0x000000004cd33a98)    ;; code: STUB, CEntryStub, minor: 4
0x4cd33a70   336  br x16
0x4cd33a74   340  ldr x6, [x26, #120]
0x4cd33a78   344  b #-0x13c (addr 0x4cd3393c)
0x4cd33a7c   348  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd33a80   352  d63f03e0       constant
0x4cd33a84   356  d503201f       constant
0x4cd33a88   360  4cd25500       constant
0x4cd33a8c   364  00000000       constant
0x4cd33a90   368  00c88e08       constant
0x4cd33a94   372  00000000       constant
0x4cd33a98   376  4cd06060       constant
0x4cd33a9c   380  00000000       constant


RelocInfo (size = 14)
0x4cd339d8  code target (KEYED_STORE_IC)  (0x4cd25500)
0x4cd33a68  external reference (Runtime::KeyedStoreIC_Miss)  (0xc88e08)
0x4cd33a6c  code target (STUB)  (0x4cd06060)
0x4cd33a7c  constant pool (size 36)


kind = STUB
major_key = ArrayConstructorStub
name = ArrayConstructorStub_More_Than_One
compiler = unknown
Instructions (size = 288)
0x4cd33b00     0  ldur cp, [x1, #39]
0x4cd33b04     4  cmp x3, x1
0x4cd33b08     8  b.ne #+0x98 (addr 0x4cd33ba0)
0x4cd33b0c    12  ldr x16, [x26, #40]
0x4cd33b10    16  cmp x2, x16
0x4cd33b14    20  b.eq #+0x84 (addr 0x4cd33b98)
0x4cd33b18    24  ldursw x3, [x2, #11]
0x4cd33b1c    28  and x3, x3, #0x7fff
0x4cd33b20    32  cbnz x3, #+0xc (addr 0x4cd33b2c)
0x4cd33b24    36  ldr x16, pc+164 (addr 0x000000004cd33bc8)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 0
0x4cd33b28    40  br x16
0x4cd33b2c    44  cmp x3, #0x1 (1)
0x4cd33b30    48  b.ne #+0xc (addr 0x4cd33b3c)
0x4cd33b34    52  ldr x16, pc+156 (addr 0x000000004cd33bd0)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 1
0x4cd33b38    56  br x16
0x4cd33b3c    60  cmp x3, #0x4 (4)
0x4cd33b40    64  b.ne #+0xc (addr 0x4cd33b4c)
0x4cd33b44    68  ldr x16, pc+148 (addr 0x000000004cd33bd8)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 4
0x4cd33b48    72  br x16
0x4cd33b4c    76  cmp x3, #0x5 (5)
0x4cd33b50    80  b.ne #+0xc (addr 0x4cd33b5c)
0x4cd33b54    84  ldr x16, pc+140 (addr 0x000000004cd33be0)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 5
0x4cd33b58    88  br x16
0x4cd33b5c    92  cmp x3, #0x2 (2)
0x4cd33b60    96  b.ne #+0xc (addr 0x4cd33b6c)
0x4cd33b64   100  ldr x16, pc+132 (addr 0x000000004cd33be8)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 2
0x4cd33b68   104  br x16
0x4cd33b6c   108  cmp x3, #0x3 (3)
0x4cd33b70   112  b.ne #+0xc (addr 0x4cd33b7c)
0x4cd33b74   116  ldr x16, pc+124 (addr 0x000000004cd33bf0)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 3
0x4cd33b78   120  br x16
0x4cd33b7c   124  movz x0, #0x9f00000000
0x4cd33b80   128  sub csp, jssp, #0x8 (8)
0x4cd33b84   132  str x0, [jssp, #-8]!
0x4cd33b88   136  movz x0, #0x1
0x4cd33b8c   140  ldr x1, pc+108 (addr 0x000000004cd33bf8)    ;; external reference (Runtime::Abort)
0x4cd33b90   144  ldr x16, pc+112 (addr 0x000000004cd33c00)    ;; code: STUB, CEntryStub, minor: 4
0x4cd33b94   148  blr x16
0x4cd33b98   152  ldr x16, pc+112 (addr 0x000000004cd33c08)    ;; code: STUB, ArrayNArgumentsConstructorStub, minor: 256
0x4cd33b9c   156  br x16
0x4cd33ba0   160  str x1, [jssp, x0, lsl #3]
0x4cd33ba4   164  add x0, x0, #0x3 (3)
0x4cd33ba8   168  sub csp, jssp, #0x10 (16)
0x4cd33bac   172  stp x2, x3, [jssp, #-16]!
0x4cd33bb0   176  ldr x1, pc+96 (addr 0x000000004cd33c10)    ;; external reference (Runtime::NewArray)
0x4cd33bb4   180  ldr x16, pc+100 (addr 0x000000004cd33c18)    ;; code: STUB, CEntryStub, minor: 4
0x4cd33bb8   184  br x16
0x4cd33bbc   188  5800031f       constant pool begin (num_const = 24)    ;; constant pool
0x4cd33bc0   192  d63f03e0       constant
0x4cd33bc4   196  d503201f       constant
0x4cd33bc8   200  4cd09fe0       constant
0x4cd33bcc   204  00000000       constant
0x4cd33bd0   208  4cd0a560       constant
0x4cd33bd4   212  00000000       constant
0x4cd33bd8   216  4cd0aae0       constant
0x4cd33bdc   220  00000000       constant
0x4cd33be0   224  4cd0ad40       constant
0x4cd33be4   228  00000000       constant
0x4cd33be8   232  4cd0afa0       constant
0x4cd33bec   236  00000000       constant
0x4cd33bf0   240  4cd0b1e0       constant
0x4cd33bf4   244  00000000       constant
0x4cd33bf8   248  00eda820       constant
0x4cd33bfc   252  00000000       constant
0x4cd33c00   256  4cd06060       constant
0x4cd33c04   260  00000000       constant
0x4cd33c08   264  4cd0a300       constant
0x4cd33c0c   268  00000000       constant
0x4cd33c10   272  00de2850       constant
0x4cd33c14   276  00000000       constant
0x4cd33c18   280  4cd06060       constant
0x4cd33c1c   284  00000000       constant


RelocInfo (size = 19)
0x4cd33b24  code target (STUB)  (0x4cd09fe0)
0x4cd33b34  code target (STUB)  (0x4cd0a560)
0x4cd33b44  code target (STUB)  (0x4cd0aae0)
0x4cd33b54  code target (STUB)  (0x4cd0ad40)
0x4cd33b64  code target (STUB)  (0x4cd0afa0)
0x4cd33b74  code target (STUB)  (0x4cd0b1e0)
0x4cd33b8c  external reference (Runtime::Abort)  (0xeda820)
0x4cd33b90  code target (STUB)  (0x4cd06060)
0x4cd33b98  code target (STUB)  (0x4cd0a300)
0x4cd33bb0  external reference (Runtime::NewArray)  (0xde2850)
0x4cd33bb4  code target (STUB)  (0x4cd06060)
0x4cd33bbc  constant pool (size 100)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 327682
name = CallICStub(args(2), NOT_NULL_OR_UNDEFINED, 
compiler = unknown
Instructions (size = 488)
0x4cd33c80     0  add x4, x2, x3, asr #29
0x4cd33c84     4  ldur x4, [x4, #15]
0x4cd33c88     8  ldur x5, [x4, #7]
0x4cd33c8c    12  cmp x5, x1
0x4cd33c90    16  b.ne #+0x2c (addr 0x4cd33cbc)
0x4cd33c94    20  tbz w1, #0, #+0x28 (addr 0x4cd33cbc)
0x4cd33c98    24  add x2, x2, x3, asr #29
0x4cd33c9c    28  add x2, x2, #0x18 (24)
0x4cd33ca0    32  ldur x3, [x2, #-1]
0x4cd33ca4    36  movz x16, #0x200000000
0x4cd33ca8    40  add x3, x3, x16
0x4cd33cac    44  stur x3, [x2, #-1]
0x4cd33cb0    48  movz x0, #0x2
0x4cd33cb4    52  ldr x16, pc+372 (addr 0x000000004cd33e28)    ;; code: BUILTIN
0x4cd33cb8    56  br x16
0x4cd33cbc    60  ldr x16, [x26, #2400]
0x4cd33cc0    64  cmp x4, x16
0x4cd33cc4    68  b.eq #+0x78 (addr 0x4cd33d3c)
0x4cd33cc8    72  ldur x5, [x4, #-1]
0x4cd33ccc    76  ldr x16, [x26, #2736]
0x4cd33cd0    80  cmp x5, x16
0x4cd33cd4    84  b.ne #+0x40 (addr 0x4cd33d14)
0x4cd33cd8    88  ldur x5, [cp, #39]
0x4cd33cdc    92  ldur x5, [x5, #95]
0x4cd33ce0    96  cmp x1, x5
0x4cd33ce4   100  b.ne #+0xec (addr 0x4cd33dd0)
0x4cd33ce8   104  movz x0, #0x2
0x4cd33cec   108  add x2, x2, x3, asr #29
0x4cd33cf0   112  add x2, x2, #0x18 (24)
0x4cd33cf4   116  ldur x3, [x2, #-1]
0x4cd33cf8   120  movz x16, #0x200000000
0x4cd33cfc   124  add x3, x3, x16
0x4cd33d00   128  stur x3, [x2, #-1]
0x4cd33d04   132  mov x2, x4
0x4cd33d08   136  mov x3, x1
0x4cd33d0c   140  ldr x16, pc+292 (addr 0x000000004cd33e30)    ;; code: STUB, ArrayConstructorStub, minor: 3
0x4cd33d10   144  br x16
0x4cd33d14   148  ldr x16, [x26, #2568]
0x4cd33d18   152  cmp x4, x16
0x4cd33d1c   156  b.eq #+0xb4 (addr 0x4cd33dd0)
0x4cd33d20   160  ldur x5, [x4, #-1]
0x4cd33d24   164  ldrb w5, [x5, #11]
0x4cd33d28   168  cmp x5, #0xc9 (201)
0x4cd33d2c   172  b.ne #+0xa4 (addr 0x4cd33dd0)
0x4cd33d30   176  add x4, x2, x3, asr #29
0x4cd33d34   180  ldr x5, [x26, #2400]
0x4cd33d38   184  stur x5, [x4, #15]
0x4cd33d3c   188  movz x0, #0x2
0x4cd33d40   192  ldr x16, pc+248 (addr 0x000000004cd33e38)    ;; code: BUILTIN
0x4cd33d44   196  br x16
0x4cd33d48   200  tbz w1, #0, #+0x88 (addr 0x4cd33dd0)
0x4cd33d4c   204  ldur x5, [x1, #-1]
0x4cd33d50   208  ldrb w5, [x5, #11]
0x4cd33d54   212  cmp x5, #0xc9 (201)
0x4cd33d58   216  b.ne #+0x78 (addr 0x4cd33dd0)
0x4cd33d5c   220  ldur x5, [cp, #39]
0x4cd33d60   224  ldur x5, [x5, #95]
0x4cd33d64   228  cmp x1, x5
0x4cd33d68   232  b.eq #+0x68 (addr 0x4cd33dd0)
0x4cd33d6c   236  ldur x4, [x1, #39]
0x4cd33d70   240  ldur x4, [x4, #39]
0x4cd33d74   244  ldur x5, [cp, #39]
0x4cd33d78   248  cmp x4, x5
0x4cd33d7c   252  b.ne #+0x54 (addr 0x4cd33dd0)
0x4cd33d80   256  movz x5, #0x200000000
0x4cd33d84   260  adds x4, x2, x3, asr #29
0x4cd33d88   264  stur x5, [x4, #23]
0x4cd33d8c   268  movz x16, #0xc00000000
0x4cd33d90   272  sub csp, jssp, #0x10 (16)
0x4cd33d94   276  stp fp, lr, [jssp, #-16]!
0x4cd33d98   280  sub csp, jssp, #0x10 (16)
0x4cd33d9c   284  str x16, [jssp, #-8]!
0x4cd33da0   288  ldr x17, pc+160 (addr 0x000000004cd33e40)    ;; object: 0x4cd33c21 <Code: CALL_IC>
0x4cd33da4   292  sub csp, jssp, #0x10 (16)
0x4cd33da8   296  str x17, [jssp, #-8]!
0x4cd33dac   300  add fp, jssp, #0x10 (16)
0x4cd33db0   304  sub csp, jssp, #0x8 (8)
0x4cd33db4   308  str x1, [jssp, #-8]!
0x4cd33db8   312  ldr x16, pc+144 (addr 0x000000004cd33e48)    ;; code: STUB, CreateWeakCellStub, minor: 0
0x4cd33dbc   316  blr x16
0x4cd33dc0   320  ldr x1, [jssp], #8
0x4cd33dc4   324  mov jssp, fp
0x4cd33dc8   328  ldp fp, lr, [jssp], #16
0x4cd33dcc   332  b #-0x11c (addr 0x4cd33cb0)
0x4cd33dd0   336  movz x16, #0xc00000000
0x4cd33dd4   340  sub csp, jssp, #0x10 (16)
0x4cd33dd8   344  stp fp, lr, [jssp, #-16]!
0x4cd33ddc   348  sub csp, jssp, #0x10 (16)
0x4cd33de0   352  str x16, [jssp, #-8]!
0x4cd33de4   356  ldr x17, pc+108 (addr 0x000000004cd33e50)    ;; object: 0x4cd33c21 <Code: CALL_IC>
0x4cd33de8   360  sub csp, jssp, #0x10 (16)
0x4cd33dec   364  str x17, [jssp, #-8]!
0x4cd33df0   368  add fp, jssp, #0x10 (16)
0x4cd33df4   372  sub csp, jssp, #0x18 (24)
0x4cd33df8   376  stp x3, x2, [jssp, #-24]!
0x4cd33dfc   380  str x1, [jssp, #16]
0x4cd33e00   384  movz x0, #0x3
0x4cd33e04   388  ldr x1, pc+84 (addr 0x000000004cd33e58)    ;; external reference (Runtime::CallIC_Miss)
0x4cd33e08   392  ldr x16, pc+88 (addr 0x000000004cd33e60)    ;; code: STUB, CEntryStub, minor: 4
0x4cd33e0c   396  blr x16
0x4cd33e10   400  mov x1, x0
0x4cd33e14   404  mov jssp, fp
0x4cd33e18   408  ldp fp, lr, [jssp], #16
0x4cd33e1c   412  b #-0xe0 (addr 0x4cd33d3c)
0x4cd33e20   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4cd33e24   420  d63f03e0       constant
0x4cd33e28   424  4cd1e600       constant
0x4cd33e2c   428  00000000       constant
0x4cd33e30   432  4cd33b00       constant
0x4cd33e34   436  00000000       constant
0x4cd33e38   440  4cd1f6c0       constant
0x4cd33e3c   444  00000000       constant
0x4cd33e40   448  4cd33c21       constant
0x4cd33e44   452  00000000       constant
0x4cd33e48   456  4cd0ddc0       constant
0x4cd33e4c   460  00000000       constant
0x4cd33e50   464  4cd33c21       constant
0x4cd33e54   468  00000000       constant
0x4cd33e58   472  00c86928       constant
0x4cd33e5c   476  00000000       constant
0x4cd33e60   480  4cd06060       constant
0x4cd33e64   484  00000000       constant


RelocInfo (size = 19)
0x4cd33cb4  code target (BUILTIN)  (0x4cd1e600)
0x4cd33d0c  code target (STUB)  (0x4cd33b00)
0x4cd33d40  code target (BUILTIN)  (0x4cd1f6c0)
0x4cd33da0  embedded object  (0x4cd33c21 <Code: CALL_IC>)
0x4cd33db8  code target (STUB)  (0x4cd0ddc0)
0x4cd33de4  embedded object  (0x4cd33c21 <Code: CALL_IC>)
0x4cd33e04  external reference (Runtime::CallIC_Miss)  (0xc86928)
0x4cd33e08  code target (STUB)  (0x4cd06060)
0x4cd33e20  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 327682
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0x4cd33ee0     0  ldur x2, [fp, #-16]
0x4cd33ee4     4  ldur x2, [x2, #31]
0x4cd33ee8     8  ldur x2, [x2, #87]
0x4cd33eec    12  ldr x16, pc+20 (addr 0x000000004cd33f00)    ;; code: CALL_IC, GENERIC
0x4cd33ef0    16  br x16
0x4cd33ef4    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd33ef8    24  d63f03e0       constant
0x4cd33efc    28  d503201f       constant
0x4cd33f00    32  4cd33c80       constant
0x4cd33f04    36  00000000       constant


RelocInfo (size = 7)
0x4cd33eec  code target (CALL_IC)  (0x4cd33c80)
0x4cd33ef4  constant pool (size 20)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 327683
name = CallICStub(args(3), NOT_NULL_OR_UNDEFINED, 
compiler = unknown
Instructions (size = 488)
0x4cd33f80     0  add x4, x2, x3, asr #29
0x4cd33f84     4  ldur x4, [x4, #15]
0x4cd33f88     8  ldur x5, [x4, #7]
0x4cd33f8c    12  cmp x5, x1
0x4cd33f90    16  b.ne #+0x2c (addr 0x4cd33fbc)
0x4cd33f94    20  tbz w1, #0, #+0x28 (addr 0x4cd33fbc)
0x4cd33f98    24  add x2, x2, x3, asr #29
0x4cd33f9c    28  add x2, x2, #0x18 (24)
0x4cd33fa0    32  ldur x3, [x2, #-1]
0x4cd33fa4    36  movz x16, #0x200000000
0x4cd33fa8    40  add x3, x3, x16
0x4cd33fac    44  stur x3, [x2, #-1]
0x4cd33fb0    48  movz x0, #0x3
0x4cd33fb4    52  ldr x16, pc+372 (addr 0x000000004cd34128)    ;; code: BUILTIN
0x4cd33fb8    56  br x16
0x4cd33fbc    60  ldr x16, [x26, #2400]
0x4cd33fc0    64  cmp x4, x16
0x4cd33fc4    68  b.eq #+0x78 (addr 0x4cd3403c)
0x4cd33fc8    72  ldur x5, [x4, #-1]
0x4cd33fcc    76  ldr x16, [x26, #2736]
0x4cd33fd0    80  cmp x5, x16
0x4cd33fd4    84  b.ne #+0x40 (addr 0x4cd34014)
0x4cd33fd8    88  ldur x5, [cp, #39]
0x4cd33fdc    92  ldur x5, [x5, #95]
0x4cd33fe0    96  cmp x1, x5
0x4cd33fe4   100  b.ne #+0xec (addr 0x4cd340d0)
0x4cd33fe8   104  movz x0, #0x3
0x4cd33fec   108  add x2, x2, x3, asr #29
0x4cd33ff0   112  add x2, x2, #0x18 (24)
0x4cd33ff4   116  ldur x3, [x2, #-1]
0x4cd33ff8   120  movz x16, #0x200000000
0x4cd33ffc   124  add x3, x3, x16
0x4cd34000   128  stur x3, [x2, #-1]
0x4cd34004   132  mov x2, x4
0x4cd34008   136  mov x3, x1
0x4cd3400c   140  ldr x16, pc+292 (addr 0x000000004cd34130)    ;; code: STUB, ArrayConstructorStub, minor: 3
0x4cd34010   144  br x16
0x4cd34014   148  ldr x16, [x26, #2568]
0x4cd34018   152  cmp x4, x16
0x4cd3401c   156  b.eq #+0xb4 (addr 0x4cd340d0)
0x4cd34020   160  ldur x5, [x4, #-1]
0x4cd34024   164  ldrb w5, [x5, #11]
0x4cd34028   168  cmp x5, #0xc9 (201)
0x4cd3402c   172  b.ne #+0xa4 (addr 0x4cd340d0)
0x4cd34030   176  add x4, x2, x3, asr #29
0x4cd34034   180  ldr x5, [x26, #2400]
0x4cd34038   184  stur x5, [x4, #15]
0x4cd3403c   188  movz x0, #0x3
0x4cd34040   192  ldr x16, pc+248 (addr 0x000000004cd34138)    ;; code: BUILTIN
0x4cd34044   196  br x16
0x4cd34048   200  tbz w1, #0, #+0x88 (addr 0x4cd340d0)
0x4cd3404c   204  ldur x5, [x1, #-1]
0x4cd34050   208  ldrb w5, [x5, #11]
0x4cd34054   212  cmp x5, #0xc9 (201)
0x4cd34058   216  b.ne #+0x78 (addr 0x4cd340d0)
0x4cd3405c   220  ldur x5, [cp, #39]
0x4cd34060   224  ldur x5, [x5, #95]
0x4cd34064   228  cmp x1, x5
0x4cd34068   232  b.eq #+0x68 (addr 0x4cd340d0)
0x4cd3406c   236  ldur x4, [x1, #39]
0x4cd34070   240  ldur x4, [x4, #39]
0x4cd34074   244  ldur x5, [cp, #39]
0x4cd34078   248  cmp x4, x5
0x4cd3407c   252  b.ne #+0x54 (addr 0x4cd340d0)
0x4cd34080   256  movz x5, #0x200000000
0x4cd34084   260  adds x4, x2, x3, asr #29
0x4cd34088   264  stur x5, [x4, #23]
0x4cd3408c   268  movz x16, #0xc00000000
0x4cd34090   272  sub csp, jssp, #0x10 (16)
0x4cd34094   276  stp fp, lr, [jssp, #-16]!
0x4cd34098   280  sub csp, jssp, #0x10 (16)
0x4cd3409c   284  str x16, [jssp, #-8]!
0x4cd340a0   288  ldr x17, pc+160 (addr 0x000000004cd34140)    ;; object: 0x4cd33f21 <Code: CALL_IC>
0x4cd340a4   292  sub csp, jssp, #0x10 (16)
0x4cd340a8   296  str x17, [jssp, #-8]!
0x4cd340ac   300  add fp, jssp, #0x10 (16)
0x4cd340b0   304  sub csp, jssp, #0x8 (8)
0x4cd340b4   308  str x1, [jssp, #-8]!
0x4cd340b8   312  ldr x16, pc+144 (addr 0x000000004cd34148)    ;; code: STUB, CreateWeakCellStub, minor: 0
0x4cd340bc   316  blr x16
0x4cd340c0   320  ldr x1, [jssp], #8
0x4cd340c4   324  mov jssp, fp
0x4cd340c8   328  ldp fp, lr, [jssp], #16
0x4cd340cc   332  b #-0x11c (addr 0x4cd33fb0)
0x4cd340d0   336  movz x16, #0xc00000000
0x4cd340d4   340  sub csp, jssp, #0x10 (16)
0x4cd340d8   344  stp fp, lr, [jssp, #-16]!
0x4cd340dc   348  sub csp, jssp, #0x10 (16)
0x4cd340e0   352  str x16, [jssp, #-8]!
0x4cd340e4   356  ldr x17, pc+108 (addr 0x000000004cd34150)    ;; object: 0x4cd33f21 <Code: CALL_IC>
0x4cd340e8   360  sub csp, jssp, #0x10 (16)
0x4cd340ec   364  str x17, [jssp, #-8]!
0x4cd340f0   368  add fp, jssp, #0x10 (16)
0x4cd340f4   372  sub csp, jssp, #0x18 (24)
0x4cd340f8   376  stp x3, x2, [jssp, #-24]!
0x4cd340fc   380  str x1, [jssp, #16]
0x4cd34100   384  movz x0, #0x3
0x4cd34104   388  ldr x1, pc+84 (addr 0x000000004cd34158)    ;; external reference (Runtime::CallIC_Miss)
0x4cd34108   392  ldr x16, pc+88 (addr 0x000000004cd34160)    ;; code: STUB, CEntryStub, minor: 4
0x4cd3410c   396  blr x16
0x4cd34110   400  mov x1, x0
0x4cd34114   404  mov jssp, fp
0x4cd34118   408  ldp fp, lr, [jssp], #16
0x4cd3411c   412  b #-0xe0 (addr 0x4cd3403c)
0x4cd34120   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4cd34124   420  d63f03e0       constant
0x4cd34128   424  4cd1e600       constant
0x4cd3412c   428  00000000       constant
0x4cd34130   432  4cd33b00       constant
0x4cd34134   436  00000000       constant
0x4cd34138   440  4cd1f6c0       constant
0x4cd3413c   444  00000000       constant
0x4cd34140   448  4cd33f21       constant
0x4cd34144   452  00000000       constant
0x4cd34148   456  4cd0ddc0       constant
0x4cd3414c   460  00000000       constant
0x4cd34150   464  4cd33f21       constant
0x4cd34154   468  00000000       constant
0x4cd34158   472  00c86928       constant
0x4cd3415c   476  00000000       constant
0x4cd34160   480  4cd06060       constant
0x4cd34164   484  00000000       constant


RelocInfo (size = 19)
0x4cd33fb4  code target (BUILTIN)  (0x4cd1e600)
0x4cd3400c  code target (STUB)  (0x4cd33b00)
0x4cd34040  code target (BUILTIN)  (0x4cd1f6c0)
0x4cd340a0  embedded object  (0x4cd33f21 <Code: CALL_IC>)
0x4cd340b8  code target (STUB)  (0x4cd0ddc0)
0x4cd340e4  embedded object  (0x4cd33f21 <Code: CALL_IC>)
0x4cd34104  external reference (Runtime::CallIC_Miss)  (0xc86928)
0x4cd34108  code target (STUB)  (0x4cd06060)
0x4cd34120  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 327683
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0x4cd341e0     0  ldur x2, [fp, #-16]
0x4cd341e4     4  ldur x2, [x2, #31]
0x4cd341e8     8  ldur x2, [x2, #87]
0x4cd341ec    12  ldr x16, pc+20 (addr 0x000000004cd34200)    ;; code: CALL_IC, GENERIC
0x4cd341f0    16  br x16
0x4cd341f4    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd341f8    24  d63f03e0       constant
0x4cd341fc    28  d503201f       constant
0x4cd34200    32  4cd33f80       constant
0x4cd34204    36  00000000       constant


RelocInfo (size = 7)
0x4cd341ec  code target (CALL_IC)  (0x4cd33f80)
0x4cd341f4  constant pool (size 20)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 327684
name = CallICStub(args(4), NOT_NULL_OR_UNDEFINED, 
compiler = unknown
Instructions (size = 488)
0x4cd34280     0  add x4, x2, x3, asr #29
0x4cd34284     4  ldur x4, [x4, #15]
0x4cd34288     8  ldur x5, [x4, #7]
0x4cd3428c    12  cmp x5, x1
0x4cd34290    16  b.ne #+0x2c (addr 0x4cd342bc)
0x4cd34294    20  tbz w1, #0, #+0x28 (addr 0x4cd342bc)
0x4cd34298    24  add x2, x2, x3, asr #29
0x4cd3429c    28  add x2, x2, #0x18 (24)
0x4cd342a0    32  ldur x3, [x2, #-1]
0x4cd342a4    36  movz x16, #0x200000000
0x4cd342a8    40  add x3, x3, x16
0x4cd342ac    44  stur x3, [x2, #-1]
0x4cd342b0    48  movz x0, #0x4
0x4cd342b4    52  ldr x16, pc+372 (addr 0x000000004cd34428)    ;; code: BUILTIN
0x4cd342b8    56  br x16
0x4cd342bc    60  ldr x16, [x26, #2400]
0x4cd342c0    64  cmp x4, x16
0x4cd342c4    68  b.eq #+0x78 (addr 0x4cd3433c)
0x4cd342c8    72  ldur x5, [x4, #-1]
0x4cd342cc    76  ldr x16, [x26, #2736]
0x4cd342d0    80  cmp x5, x16
0x4cd342d4    84  b.ne #+0x40 (addr 0x4cd34314)
0x4cd342d8    88  ldur x5, [cp, #39]
0x4cd342dc    92  ldur x5, [x5, #95]
0x4cd342e0    96  cmp x1, x5
0x4cd342e4   100  b.ne #+0xec (addr 0x4cd343d0)
0x4cd342e8   104  movz x0, #0x4
0x4cd342ec   108  add x2, x2, x3, asr #29
0x4cd342f0   112  add x2, x2, #0x18 (24)
0x4cd342f4   116  ldur x3, [x2, #-1]
0x4cd342f8   120  movz x16, #0x200000000
0x4cd342fc   124  add x3, x3, x16
0x4cd34300   128  stur x3, [x2, #-1]
0x4cd34304   132  mov x2, x4
0x4cd34308   136  mov x3, x1
0x4cd3430c   140  ldr x16, pc+292 (addr 0x000000004cd34430)    ;; code: STUB, ArrayConstructorStub, minor: 3
0x4cd34310   144  br x16
0x4cd34314   148  ldr x16, [x26, #2568]
0x4cd34318   152  cmp x4, x16
0x4cd3431c   156  b.eq #+0xb4 (addr 0x4cd343d0)
0x4cd34320   160  ldur x5, [x4, #-1]
0x4cd34324   164  ldrb w5, [x5, #11]
0x4cd34328   168  cmp x5, #0xc9 (201)
0x4cd3432c   172  b.ne #+0xa4 (addr 0x4cd343d0)
0x4cd34330   176  add x4, x2, x3, asr #29
0x4cd34334   180  ldr x5, [x26, #2400]
0x4cd34338   184  stur x5, [x4, #15]
0x4cd3433c   188  movz x0, #0x4
0x4cd34340   192  ldr x16, pc+248 (addr 0x000000004cd34438)    ;; code: BUILTIN
0x4cd34344   196  br x16
0x4cd34348   200  tbz w1, #0, #+0x88 (addr 0x4cd343d0)
0x4cd3434c   204  ldur x5, [x1, #-1]
0x4cd34350   208  ldrb w5, [x5, #11]
0x4cd34354   212  cmp x5, #0xc9 (201)
0x4cd34358   216  b.ne #+0x78 (addr 0x4cd343d0)
0x4cd3435c   220  ldur x5, [cp, #39]
0x4cd34360   224  ldur x5, [x5, #95]
0x4cd34364   228  cmp x1, x5
0x4cd34368   232  b.eq #+0x68 (addr 0x4cd343d0)
0x4cd3436c   236  ldur x4, [x1, #39]
0x4cd34370   240  ldur x4, [x4, #39]
0x4cd34374   244  ldur x5, [cp, #39]
0x4cd34378   248  cmp x4, x5
0x4cd3437c   252  b.ne #+0x54 (addr 0x4cd343d0)
0x4cd34380   256  movz x5, #0x200000000
0x4cd34384   260  adds x4, x2, x3, asr #29
0x4cd34388   264  stur x5, [x4, #23]
0x4cd3438c   268  movz x16, #0xc00000000
0x4cd34390   272  sub csp, jssp, #0x10 (16)
0x4cd34394   276  stp fp, lr, [jssp, #-16]!
0x4cd34398   280  sub csp, jssp, #0x10 (16)
0x4cd3439c   284  str x16, [jssp, #-8]!
0x4cd343a0   288  ldr x17, pc+160 (addr 0x000000004cd34440)    ;; object: 0x4cd34221 <Code: CALL_IC>
0x4cd343a4   292  sub csp, jssp, #0x10 (16)
0x4cd343a8   296  str x17, [jssp, #-8]!
0x4cd343ac   300  add fp, jssp, #0x10 (16)
0x4cd343b0   304  sub csp, jssp, #0x8 (8)
0x4cd343b4   308  str x1, [jssp, #-8]!
0x4cd343b8   312  ldr x16, pc+144 (addr 0x000000004cd34448)    ;; code: STUB, CreateWeakCellStub, minor: 0
0x4cd343bc   316  blr x16
0x4cd343c0   320  ldr x1, [jssp], #8
0x4cd343c4   324  mov jssp, fp
0x4cd343c8   328  ldp fp, lr, [jssp], #16
0x4cd343cc   332  b #-0x11c (addr 0x4cd342b0)
0x4cd343d0   336  movz x16, #0xc00000000
0x4cd343d4   340  sub csp, jssp, #0x10 (16)
0x4cd343d8   344  stp fp, lr, [jssp, #-16]!
0x4cd343dc   348  sub csp, jssp, #0x10 (16)
0x4cd343e0   352  str x16, [jssp, #-8]!
0x4cd343e4   356  ldr x17, pc+108 (addr 0x000000004cd34450)    ;; object: 0x4cd34221 <Code: CALL_IC>
0x4cd343e8   360  sub csp, jssp, #0x10 (16)
0x4cd343ec   364  str x17, [jssp, #-8]!
0x4cd343f0   368  add fp, jssp, #0x10 (16)
0x4cd343f4   372  sub csp, jssp, #0x18 (24)
0x4cd343f8   376  stp x3, x2, [jssp, #-24]!
0x4cd343fc   380  str x1, [jssp, #16]
0x4cd34400   384  movz x0, #0x3
0x4cd34404   388  ldr x1, pc+84 (addr 0x000000004cd34458)    ;; external reference (Runtime::CallIC_Miss)
0x4cd34408   392  ldr x16, pc+88 (addr 0x000000004cd34460)    ;; code: STUB, CEntryStub, minor: 4
0x4cd3440c   396  blr x16
0x4cd34410   400  mov x1, x0
0x4cd34414   404  mov jssp, fp
0x4cd34418   408  ldp fp, lr, [jssp], #16
0x4cd3441c   412  b #-0xe0 (addr 0x4cd3433c)
0x4cd34420   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4cd34424   420  d63f03e0       constant
0x4cd34428   424  4cd1e600       constant
0x4cd3442c   428  00000000       constant
0x4cd34430   432  4cd33b00       constant
0x4cd34434   436  00000000       constant
0x4cd34438   440  4cd1f6c0       constant
0x4cd3443c   444  00000000       constant
0x4cd34440   448  4cd34221       constant
0x4cd34444   452  00000000       constant
0x4cd34448   456  4cd0ddc0       constant
0x4cd3444c   460  00000000       constant
0x4cd34450   464  4cd34221       constant
0x4cd34454   468  00000000       constant
0x4cd34458   472  00c86928       constant
0x4cd3445c   476  00000000       constant
0x4cd34460   480  4cd06060       constant
0x4cd34464   484  00000000       constant


RelocInfo (size = 19)
0x4cd342b4  code target (BUILTIN)  (0x4cd1e600)
0x4cd3430c  code target (STUB)  (0x4cd33b00)
0x4cd34340  code target (BUILTIN)  (0x4cd1f6c0)
0x4cd343a0  embedded object  (0x4cd34221 <Code: CALL_IC>)
0x4cd343b8  code target (STUB)  (0x4cd0ddc0)
0x4cd343e4  embedded object  (0x4cd34221 <Code: CALL_IC>)
0x4cd34404  external reference (Runtime::CallIC_Miss)  (0xc86928)
0x4cd34408  code target (STUB)  (0x4cd06060)
0x4cd34420  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 327684
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0x4cd344e0     0  ldur x2, [fp, #-16]
0x4cd344e4     4  ldur x2, [x2, #31]
0x4cd344e8     8  ldur x2, [x2, #87]
0x4cd344ec    12  ldr x16, pc+20 (addr 0x000000004cd34500)    ;; code: CALL_IC, GENERIC
0x4cd344f0    16  br x16
0x4cd344f4    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd344f8    24  d63f03e0       constant
0x4cd344fc    28  d503201f       constant
0x4cd34500    32  4cd34280       constant
0x4cd34504    36  00000000       constant


RelocInfo (size = 7)
0x4cd344ec  code target (CALL_IC)  (0x4cd34280)
0x4cd344f4  constant pool (size 20)


kind = STUB
major_key = MathPowStub
name = MathPowStub
compiler = unknown
Instructions (size = 344)
0x4cd34580     0  ldp x11, x10, [jssp], #16
0x4cd34584     4  tbz w10, #0, #+0x1c (addr 0x4cd345a0)
0x4cd34588     8  ldur x16, [x10, #-1]
0x4cd3458c    12  ldr x17, [x26, #120]
0x4cd34590    16  cmp x16, x17
0x4cd34594    20  b.ne #+0xd8 (addr 0x4cd3466c)
0x4cd34598    24  ldur d0, [x10, #7]
0x4cd3459c    28  b #+0x8 (addr 0x4cd345a4)
0x4cd345a0    32  scvtf d0, x10, #32
0x4cd345a4    36  tbz w11, #0, #+0x80 (addr 0x4cd34624)
0x4cd345a8    40  ldur x16, [x11, #-1]
0x4cd345ac    44  ldr x17, [x26, #120]
0x4cd345b0    48  cmp x16, x17
0x4cd345b4    52  b.ne #+0xb8 (addr 0x4cd3466c)
0x4cd345b8    56  ldur d1, [x11, #7]
0x4cd345bc    60  fcvtzs x12, d1
0x4cd345c0    64  scvtf d7, x12
0x4cd345c4    68  fcmp d1, d7
0x4cd345c8    72  b.eq #+0x60 (addr 0x4cd34628)
0x4cd345cc    76  fmov d4, #0xe0 (-0.5000)
0x4cd345d0    80  fmov d3, #0x60 (0.5000)
0x4cd345d4    84  fcmp d4, d1
0x4cd345d8    88  fccmp d3, d1, #NZcv, ne
0x4cd345dc    92  b.ne #+0x90 (addr 0x4cd3466c)
0x4cd345e0    96  fadd d0, d0, d15
0x4cd345e4   100  fsub d7, d0, d0
0x4cd345e8   104  fcmp d7, #0.0
0x4cd345ec   108  fabs d6, d0
0x4cd345f0   112  fcsel d0, d6, d0, vs
0x4cd345f4   116  fsqrt d0, d0
0x4cd345f8   120  fcmp d1, #0.0
0x4cd345fc   124  b.ge #+0x88 (addr 0x4cd34684)
0x4cd34600   128  fmov d7, #0x70 (1.0000)
0x4cd34604   132  fdiv d0, d7, d0
0x4cd34608   136  b #+0x7c (addr 0x4cd34684)
0x4cd3460c   140  mov x19, lr
0x4cd34610   144  ldr x16, pc+168 (addr 0x000000004cd346b8)    ;; external reference (power_double_double_function)
0x4cd34614   148  and csp, jssp, #0xfffffffffffffff0
0x4cd34618   152  blr x16
0x4cd3461c   156  mov lr, x19
0x4cd34620   160  b #+0x64 (addr 0x4cd34684)
0x4cd34624   164  asr x12, x11, #32
0x4cd34628   168  cmp x12, #0x0 (0)
0x4cd3462c   172  cneg x13, x12, mi
0x4cd34630   176  fmov d6, d0
0x4cd34634   180  fmov d2, d0
0x4cd34638   184  fmov d0, #0x70 (1.0000)
0x4cd3463c   188  b #+0x10 (addr 0x4cd3464c)
0x4cd34640   192  fmul d6, d6, d6
0x4cd34644   196  lsr x13, x13, #1
0x4cd34648   200  cbz x13, #+0x10 (addr 0x4cd34658)
0x4cd3464c   204  tbz w13, #0, #-0xc (addr 0x4cd34640)
0x4cd34650   208  fmul d0, d0, d6
0x4cd34654   212  b #-0x14 (addr 0x4cd34640)
0x4cd34658   216  tbz x12, #63, #+0x2c (addr 0x4cd34684)
0x4cd3465c   220  fmov d7, #0x70 (1.0000)
0x4cd34660   224  fdiv d0, d7, d0
0x4cd34664   228  fcmp d0, #0.0
0x4cd34668   232  b.ne #+0x1c (addr 0x4cd34684)
0x4cd3466c   236  sub csp, jssp, #0x10 (16)
0x4cd34670   240  stp x11, x10, [jssp, #-16]!
0x4cd34674   244  movz x0, #0x2
0x4cd34678   248  ldr x1, pc+72 (addr 0x000000004cd346c0)    ;; external reference (Runtime::MathPowRT)
0x4cd3467c   252  ldr x16, pc+76 (addr 0x000000004cd346c8)    ;; code: STUB, CEntryStub, minor: 4
0x4cd34680   256  br x16
0x4cd34684   260  ldr x15, pc+76 (addr 0x000000004cd346d0)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x4cd34688   264  ldp x0, x14, [x15]
0x4cd3468c   268  adds x16, x0, #0x10 (16)
0x4cd34690   272  ccmp x16, x14, #nzCv, lo
0x4cd34694   276  b.hi #-0x28 (addr 0x4cd3466c)
0x4cd34698   280  str x16, [x15]
0x4cd3469c   284  ldr d30, [x26, #120]
0x4cd346a0   288  stp d30, d0, [x0]
0x4cd346a4   292  orr x0, x0, #0x1
0x4cd346a8   296  ret
0x4cd346ac   300  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0x4cd346b0   304  d63f03e0       constant
0x4cd346b4   308  d503201f       constant
0x4cd346b8   312  009362e0       constant
0x4cd346bc   316  00000000       constant
0x4cd346c0   320  00e39ee8       constant
0x4cd346c4   324  00000000       constant
0x4cd346c8   328  4cd06060       constant
0x4cd346cc   332  00000000       constant
0x4cd346d0   336  166dd2c0       constant
0x4cd346d4   340  00000000       constant


RelocInfo (size = 17)
0x4cd34610  external reference (power_double_double_function)  (0x9362e0)
0x4cd34678  external reference (Runtime::MathPowRT)  (0xe39ee8)
0x4cd3467c  code target (STUB)  (0x4cd06060)
0x4cd34684  external reference (Heap::NewSpaceAllocationTopAddress())  (0x166dd2c0)
0x4cd346ac  constant pool (size 44)


kind = KEYED_LOAD_IC
major_key = KeyedLoadICTrampolineStub
ic_state = GENERIC
extra_ic_state = 0
name = KeyedLoadICTrampolineStub
compiler = unknown
Instructions (size = 368)
0x4cd36c80     0  ldur x3, [fp, #-16]
0x4cd36c84     4  ldur x3, [x3, #31]
0x4cd36c88     8  ldur x3, [x3, #87]
0x4cd36c8c    12  add x4, x3, x0, asr #29
0x4cd36c90    16  ldur x4, [x4, #15]
0x4cd36c94    20  tbz w1, #0, #+0x130 (addr 0x4cd36dc4)
0x4cd36c98    24  ldur x5, [x1, #-1]
0x4cd36c9c    28  ldur x6, [x4, #7]
0x4cd36ca0    32  cmp x6, x5
0x4cd36ca4    36  b.ne #+0x14 (addr 0x4cd36cb8)
0x4cd36ca8    40  add x4, x3, x0, asr #29
0x4cd36cac    44  ldur x4, [x4, #23]
0x4cd36cb0    48  add x4, x4, #0x5f (95)
0x4cd36cb4    52  br x4
0x4cd36cb8    56  ldur x6, [x4, #-1]
0x4cd36cbc    60  ldr x16, [x26, #224]
0x4cd36cc0    64  cmp x6, x16
0x4cd36cc4    68  b.ne #+0x5c (addr 0x4cd36d20)
0x4cd36cc8    72  ldur x6, [x4, #15]
0x4cd36ccc    76  ldur x6, [x6, #7]
0x4cd36cd0    80  cmp x5, x6
0x4cd36cd4    84  b.ne #+0x10 (addr 0x4cd36ce4)
0x4cd36cd8    88  ldur x4, [x4, #23]
0x4cd36cdc    92  add x4, x4, #0x5f (95)
0x4cd36ce0    96  br x4
0x4cd36ce4   100  ldur x7, [x4, #7]
0x4cd36ce8   104  add x7, x4, x7, asr #29
0x4cd36cec   108  add x7, x7, #0xf (15)
0x4cd36cf0   112  add x4, x4, #0x1f (31)
0x4cd36cf4   116  ldr x6, [x4]
0x4cd36cf8   120  ldur x6, [x6, #7]
0x4cd36cfc   124  cmp x5, x6
0x4cd36d00   128  b.ne #+0x10 (addr 0x4cd36d10)
0x4cd36d04   132  ldr x4, [x4, #8]
0x4cd36d08   136  add x4, x4, #0x5f (95)
0x4cd36d0c   140  br x4
0x4cd36d10   144  add x4, x4, #0x10 (16)
0x4cd36d14   148  cmp x4, x7
0x4cd36d18   152  b.lt #-0x24 (addr 0x4cd36cf4)
0x4cd36d1c   156  b #+0x8c (addr 0x4cd36da8)
0x4cd36d20   160  ldr x16, [x26, #2400]
0x4cd36d24   164  cmp x4, x16
0x4cd36d28   168  b.ne #+0xc (addr 0x4cd36d34)
0x4cd36d2c   172  ldr x16, pc+172 (addr 0x000000004cd36dd8)    ;; code: KEYED_LOAD_IC, MEGAMORPHIC
0x4cd36d30   176  br x16
0x4cd36d34   180  cmp x2, x4
0x4cd36d38   184  b.ne #+0x70 (addr 0x4cd36da8)
0x4cd36d3c   188  add x4, x3, x0, asr #29
0x4cd36d40   192  ldur x4, [x4, #23]
0x4cd36d44   196  ldur x6, [x4, #15]
0x4cd36d48   200  ldur x6, [x6, #7]
0x4cd36d4c   204  cmp x5, x6
0x4cd36d50   208  b.ne #+0x10 (addr 0x4cd36d60)
0x4cd36d54   212  ldur x4, [x4, #23]
0x4cd36d58   216  add x4, x4, #0x5f (95)
0x4cd36d5c   220  br x4
0x4cd36d60   224  ldur x7, [x4, #7]
0x4cd36d64   228  movz x16, #0x200000000
0x4cd36d68   232  cmp x7, x16
0x4cd36d6c   236  b.eq #+0x3c (addr 0x4cd36da8)
0x4cd36d70   240  add x7, x4, x7, asr #29
0x4cd36d74   244  add x7, x7, #0xf (15)
0x4cd36d78   248  add x4, x4, #0x1f (31)
0x4cd36d7c   252  ldr x6, [x4]
0x4cd36d80   256  ldur x6, [x6, #7]
0x4cd36d84   260  cmp x5, x6
0x4cd36d88   264  b.ne #+0x10 (addr 0x4cd36d98)
0x4cd36d8c   268  ldr x4, [x4, #8]
0x4cd36d90   272  add x4, x4, #0x5f (95)
0x4cd36d94   276  br x4
0x4cd36d98   280  add x4, x4, #0x10 (16)
0x4cd36d9c   284  cmp x4, x7
0x4cd36da0   288  b.lt #-0x24 (addr 0x4cd36d7c)
0x4cd36da4   292  b #+0x4 (addr 0x4cd36da8)
0x4cd36da8   296  sub csp, jssp, #0x20 (32)
0x4cd36dac   300  stp x3, x0, [jssp, #-32]!
0x4cd36db0   304  stp x2, x1, [jssp, #16]
0x4cd36db4   308  movz x0, #0x4
0x4cd36db8   312  ldr x1, pc+40 (addr 0x000000004cd36de0)    ;; external reference (Runtime::KeyedLoadIC_Miss)
0x4cd36dbc   316  ldr x16, pc+44 (addr 0x000000004cd36de8)    ;; code: STUB, CEntryStub, minor: 4
0x4cd36dc0   320  br x16
0x4cd36dc4   324  ldr x5, [x26, #120]
0x4cd36dc8   328  b #-0x12c (addr 0x4cd36c9c)
0x4cd36dcc   332  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd36dd0   336  d63f03e0       constant
0x4cd36dd4   340  d503201f       constant
0x4cd36dd8   344  4cd22900       constant
0x4cd36ddc   348  00000000       constant
0x4cd36de0   352  00c874c0       constant
0x4cd36de4   356  00000000       constant
0x4cd36de8   360  4cd06060       constant
0x4cd36dec   364  00000000       constant


RelocInfo (size = 14)
0x4cd36d2c  code target (KEYED_LOAD_IC)  (0x4cd22900)
0x4cd36db8  external reference (Runtime::KeyedLoadIC_Miss)  (0xc874c0)
0x4cd36dbc  code target (STUB)  (0x4cd06060)
0x4cd36dcc  constant pool (size 36)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd36fc0     0  ldur x0, [x1, #-1]
0x4cd36fc4     4  ldur x0, [x0, #47]
0x4cd36fc8     8  movz x16, #0x587
0x4cd36fcc    12  ldr x0, [x0, x16]
0x4cd36fd0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd37040     0  ldur x0, [x1, #7]
0x4cd37044     4  movz x16, #0x1cf
0x4cd37048     8  ldr x0, [x0, x16]
0x4cd3704c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0x4cd370c0     0  adr xzr, #+0x40 (addr 0x4cd37100)
0x4cd370c4     4  adr xzr, #+0x360 (addr 0x4cd37424)
0x4cd370c8     8  ldr x16, pc+1736 (addr 0x000000004cd37790)    ;; external reference (store_buffer_top)
0x4cd370cc    12  ldr x13, [x16]
0x4cd370d0    16  str x6, [x13], #8
0x4cd370d4    20  str x13, [x16]
0x4cd370d8    24  tst x13, #0x1ffff
0x4cd370dc    28  b.eq #+0x8 (addr 0x4cd370e4)
0x4cd370e0    32  ret
0x4cd370e4    36  sub csp, jssp, #0x8 (8)
0x4cd370e8    40  str lr, [jssp, #-8]!
0x4cd370ec    44  ldr x17, pc+1708 (addr 0x000000004cd37798)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd370f0    48  blr x17
0x4cd370f4    52  ldr lr, [jssp], #8
0x4cd370f8    56  ret
0x4cd370fc    60  ret
0x4cd37100    64  sub csp, jssp, #0x10 (16)
0x4cd37104    68  stp x2, x0, [jssp, #-16]!
0x4cd37108    72  ldr x13, [x6]
0x4cd3710c    76  and x16, x13, #0xfffffffffff00000
0x4cd37110    80  ldr x16, [x16, #8]
0x4cd37114    84  tst x16, #0x18
0x4cd37118    88  b.eq #+0x1d8 (addr 0x4cd372f0)
0x4cd3711c    92  and x16, x1, #0xfffffffffff00000
0x4cd37120    96  ldr x16, [x16, #8]
0x4cd37124   100  tst x16, #0x18
0x4cd37128   104  b.ne #+0x1c8 (addr 0x4cd372f0)
0x4cd3712c   108  and x13, x1, #0xfffffffffff00000
0x4cd37130   112  ldr x0, [x13, #104]
0x4cd37134   116  subs x0, x0, #0x1 (1)
0x4cd37138   120  str x0, [x13, #104]
0x4cd3713c   124  b.mi #+0xc4 (addr 0x4cd37200)
0x4cd37140   128  ubfx x16, x1, #8, #12
0x4cd37144   132  and x13, x1, #0xfffffffffff00000
0x4cd37148   136  add x13, x13, x16, lsl #2
0x4cd3714c   140  ubfx x0, x1, #3, #5
0x4cd37150   144  ldr x13, [x13, #360]
0x4cd37154   148  lsr x13, x13, x0
0x4cd37158   152  tbz w13, #0, #+0x8 (addr 0x4cd37160)
0x4cd3715c   156  tbnz w13, #1, #+0x3c (addr 0x4cd37198)
0x4cd37160   160  ldp x2, x0, [jssp], #16
0x4cd37164   164  ldr x16, pc+1596 (addr 0x000000004cd377a0)    ;; external reference (store_buffer_top)
0x4cd37168   168  ldr x13, [x16]
0x4cd3716c   172  str x6, [x13], #8
0x4cd37170   176  str x13, [x16]
0x4cd37174   180  tst x13, #0x1ffff
0x4cd37178   184  b.eq #+0x8 (addr 0x4cd37180)
0x4cd3717c   188  ret
0x4cd37180   192  sub csp, jssp, #0x8 (8)
0x4cd37184   196  str lr, [jssp, #-8]!
0x4cd37188   200  ldr x17, pc+1568 (addr 0x000000004cd377a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd3718c   204  blr x17
0x4cd37190   208  ldr lr, [jssp], #8
0x4cd37194   212  ret
0x4cd37198   216  ldr x13, [x6]
0x4cd3719c   220  sub csp, jssp, #0x10 (16)
0x4cd371a0   224  stp x1, x6, [jssp, #-16]!
0x4cd371a4   228  ubfx x16, x13, #8, #12
0x4cd371a8   232  and x0, x13, #0xfffffffffff00000
0x4cd371ac   236  add x0, x0, x16, lsl #2
0x4cd371b0   240  ubfx x1, x13, #3, #5
0x4cd371b4   244  ldr x6, [x0, #360]
0x4cd371b8   248  lsr x6, x6, x1
0x4cd371bc   252  tbz w6, #0, #+0x40 (addr 0x4cd371fc)
0x4cd371c0   256  ldp x1, x6, [jssp], #16
0x4cd371c4   260  ldp x2, x0, [jssp], #16
0x4cd371c8   264  ldr x16, pc+1512 (addr 0x000000004cd377b0)    ;; external reference (store_buffer_top)
0x4cd371cc   268  ldr x13, [x16]
0x4cd371d0   272  str x6, [x13], #8
0x4cd371d4   276  str x13, [x16]
0x4cd371d8   280  tst x13, #0x1ffff
0x4cd371dc   284  b.eq #+0x8 (addr 0x4cd371e4)
0x4cd371e0   288  ret
0x4cd371e4   292  sub csp, jssp, #0x8 (8)
0x4cd371e8   296  str lr, [jssp, #-8]!
0x4cd371ec   300  ldr x17, pc+1484 (addr 0x000000004cd377b8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd371f0   304  blr x17
0x4cd371f4   308  ldr lr, [jssp], #8
0x4cd371f8   312  ret
0x4cd371fc   316  ldp x1, x6, [jssp], #16
0x4cd37200   320  sub csp, jssp, #0x78 (120)
0x4cd37204   324  stp x14, x15, [jssp, #-32]!
0x4cd37208   328  stp x18, lr, [jssp, #16]
0x4cd3720c   332  stp x9, x10, [jssp, #-32]!
0x4cd37210   336  stp x11, x12, [jssp, #16]
0x4cd37214   340  stp x5, x6, [jssp, #-32]!
0x4cd37218   344  stp x7, x8, [jssp, #16]
0x4cd3721c   348  stp x1, x3, [jssp, #-24]!
0x4cd37220   352  str x4, [jssp, #16]
0x4cd37224   356  sub csp, jssp, #0xb0 (176)
0x4cd37228   360  stp d26, d27, [jssp, #-32]!
0x4cd3722c   364  stp d28, d29, [jssp, #16]
0x4cd37230   368  stp d22, d23, [jssp, #-32]!
0x4cd37234   372  stp d24, d25, [jssp, #16]
0x4cd37238   376  stp d18, d19, [jssp, #-32]!
0x4cd3723c   380  stp d20, d21, [jssp, #16]
0x4cd37240   384  stp d6, d7, [jssp, #-32]!
0x4cd37244   388  stp d16, d17, [jssp, #16]
0x4cd37248   392  stp d2, d3, [jssp, #-32]!
0x4cd3724c   396  stp d4, d5, [jssp, #16]
0x4cd37250   400  stp d0, d1, [jssp, #-16]!
0x4cd37254   404  mov x0, x1
0x4cd37258   408  mov x1, x6
0x4cd3725c   412  ldr x2, pc+1380 (addr 0x000000004cd377c0)    ;; external reference (isolate)
0x4cd37260   416  ldr x16, pc+1384 (addr 0x000000004cd377c8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd37264   420  and csp, jssp, #0xfffffffffffffff0
0x4cd37268   424  blr x16
0x4cd3726c   428  ldp d2, d3, [jssp, #16]
0x4cd37270   432  ldp d0, d1, [jssp], #32
0x4cd37274   436  ldp d6, d7, [jssp, #16]
0x4cd37278   440  ldp d4, d5, [jssp], #32
0x4cd3727c   444  ldp d18, d19, [jssp, #16]
0x4cd37280   448  ldp d16, d17, [jssp], #32
0x4cd37284   452  ldp d22, d23, [jssp, #16]
0x4cd37288   456  ldp d20, d21, [jssp], #32
0x4cd3728c   460  ldp d26, d27, [jssp, #16]
0x4cd37290   464  ldp d24, d25, [jssp], #32
0x4cd37294   468  ldp d28, d29, [jssp], #16
0x4cd37298   472  ldp x4, x5, [jssp, #16]
0x4cd3729c   476  ldp x1, x3, [jssp], #32
0x4cd372a0   480  ldp x8, x9, [jssp, #16]
0x4cd372a4   484  ldp x6, x7, [jssp], #32
0x4cd372a8   488  ldp x12, x14, [jssp, #16]
0x4cd372ac   492  ldp x10, x11, [jssp], #32
0x4cd372b0   496  ldr lr, [jssp, #16]
0x4cd372b4   500  ldp x15, x18, [jssp], #24
0x4cd372b8   504  ldp x2, x0, [jssp], #16
0x4cd372bc   508  ldr x16, pc+1300 (addr 0x000000004cd377d0)    ;; external reference (store_buffer_top)
0x4cd372c0   512  ldr x13, [x16]
0x4cd372c4   516  str x6, [x13], #8
0x4cd372c8   520  str x13, [x16]
0x4cd372cc   524  tst x13, #0x1ffff
0x4cd372d0   528  b.eq #+0x8 (addr 0x4cd372d8)
0x4cd372d4   532  ret
0x4cd372d8   536  sub csp, jssp, #0x8 (8)
0x4cd372dc   540  str lr, [jssp, #-8]!
0x4cd372e0   544  ldr x17, pc+1272 (addr 0x000000004cd377d8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd372e4   548  blr x17
0x4cd372e8   552  ldr lr, [jssp], #8
0x4cd372ec   556  ret
0x4cd372f0   560  and x13, x1, #0xfffffffffff00000
0x4cd372f4   564  ldr x0, [x13, #104]
0x4cd372f8   568  subs x0, x0, #0x1 (1)
0x4cd372fc   572  str x0, [x13, #104]
0x4cd37300   576  b.mi #+0x64 (addr 0x4cd37364)
0x4cd37304   580  ubfx x16, x1, #8, #12
0x4cd37308   584  and x13, x1, #0xfffffffffff00000
0x4cd3730c   588  add x13, x13, x16, lsl #2
0x4cd37310   592  ubfx x0, x1, #3, #5
0x4cd37314   596  ldr x13, [x13, #360]
0x4cd37318   600  lsr x13, x13, x0
0x4cd3731c   604  tbz w13, #0, #+0x8 (addr 0x4cd37324)
0x4cd37320   608  tbnz w13, #1, #+0xc (addr 0x4cd3732c)
0x4cd37324   612  ldp x2, x0, [jssp], #16
0x4cd37328   616  ret
0x4cd3732c   620  ldr x13, [x6]
0x4cd37330   624  sub csp, jssp, #0x10 (16)
0x4cd37334   628  stp x1, x6, [jssp, #-16]!
0x4cd37338   632  ubfx x16, x13, #8, #12
0x4cd3733c   636  and x0, x13, #0xfffffffffff00000
0x4cd37340   640  add x0, x0, x16, lsl #2
0x4cd37344   644  ubfx x1, x13, #3, #5
0x4cd37348   648  ldr x6, [x0, #360]
0x4cd3734c   652  lsr x6, x6, x1
0x4cd37350   656  tbz w6, #0, #+0x10 (addr 0x4cd37360)
0x4cd37354   660  ldp x1, x6, [jssp], #16
0x4cd37358   664  ldp x2, x0, [jssp], #16
0x4cd3735c   668  ret
0x4cd37360   672  ldp x1, x6, [jssp], #16
0x4cd37364   676  sub csp, jssp, #0x78 (120)
0x4cd37368   680  stp x14, x15, [jssp, #-32]!
0x4cd3736c   684  stp x18, lr, [jssp, #16]
0x4cd37370   688  stp x9, x10, [jssp, #-32]!
0x4cd37374   692  stp x11, x12, [jssp, #16]
0x4cd37378   696  stp x5, x6, [jssp, #-32]!
0x4cd3737c   700  stp x7, x8, [jssp, #16]
0x4cd37380   704  stp x1, x3, [jssp, #-24]!
0x4cd37384   708  str x4, [jssp, #16]
0x4cd37388   712  sub csp, jssp, #0xb0 (176)
0x4cd3738c   716  stp d26, d27, [jssp, #-32]!
0x4cd37390   720  stp d28, d29, [jssp, #16]
0x4cd37394   724  stp d22, d23, [jssp, #-32]!
0x4cd37398   728  stp d24, d25, [jssp, #16]
0x4cd3739c   732  stp d18, d19, [jssp, #-32]!
0x4cd373a0   736  stp d20, d21, [jssp, #16]
0x4cd373a4   740  stp d6, d7, [jssp, #-32]!
0x4cd373a8   744  stp d16, d17, [jssp, #16]
0x4cd373ac   748  stp d2, d3, [jssp, #-32]!
0x4cd373b0   752  stp d4, d5, [jssp, #16]
0x4cd373b4   756  stp d0, d1, [jssp, #-16]!
0x4cd373b8   760  mov x0, x1
0x4cd373bc   764  mov x1, x6
0x4cd373c0   768  ldr x2, pc+1056 (addr 0x000000004cd377e0)    ;; external reference (isolate)
0x4cd373c4   772  ldr x16, pc+1060 (addr 0x000000004cd377e8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd373c8   776  and csp, jssp, #0xfffffffffffffff0
0x4cd373cc   780  blr x16
0x4cd373d0   784  ldp d2, d3, [jssp, #16]
0x4cd373d4   788  ldp d0, d1, [jssp], #32
0x4cd373d8   792  ldp d6, d7, [jssp, #16]
0x4cd373dc   796  ldp d4, d5, [jssp], #32
0x4cd373e0   800  ldp d18, d19, [jssp, #16]
0x4cd373e4   804  ldp d16, d17, [jssp], #32
0x4cd373e8   808  ldp d22, d23, [jssp, #16]
0x4cd373ec   812  ldp d20, d21, [jssp], #32
0x4cd373f0   816  ldp d26, d27, [jssp, #16]
0x4cd373f4   820  ldp d24, d25, [jssp], #32
0x4cd373f8   824  ldp d28, d29, [jssp], #16
0x4cd373fc   828  ldp x4, x5, [jssp, #16]
0x4cd37400   832  ldp x1, x3, [jssp], #32
0x4cd37404   836  ldp x8, x9, [jssp, #16]
0x4cd37408   840  ldp x6, x7, [jssp], #32
0x4cd3740c   844  ldp x12, x14, [jssp, #16]
0x4cd37410   848  ldp x10, x11, [jssp], #32
0x4cd37414   852  ldr lr, [jssp, #16]
0x4cd37418   856  ldp x15, x18, [jssp], #24
0x4cd3741c   860  ldp x2, x0, [jssp], #16
0x4cd37420   864  ret
0x4cd37424   868  sub csp, jssp, #0x10 (16)
0x4cd37428   872  stp x2, x0, [jssp, #-16]!
0x4cd3742c   876  ldr x13, [x6]
0x4cd37430   880  and x16, x13, #0xfffffffffff00000
0x4cd37434   884  ldr x16, [x16, #8]
0x4cd37438   888  tst x16, #0x18
0x4cd3743c   892  b.eq #+0x1f8 (addr 0x4cd37634)
0x4cd37440   896  and x16, x1, #0xfffffffffff00000
0x4cd37444   900  ldr x16, [x16, #8]
0x4cd37448   904  tst x16, #0x18
0x4cd3744c   908  b.ne #+0x1e8 (addr 0x4cd37634)
0x4cd37450   912  and x13, x1, #0xfffffffffff00000
0x4cd37454   916  ldr x0, [x13, #104]
0x4cd37458   920  subs x0, x0, #0x1 (1)
0x4cd3745c   924  str x0, [x13, #104]
0x4cd37460   928  b.mi #+0xe4 (addr 0x4cd37544)
0x4cd37464   932  ubfx x16, x1, #8, #12
0x4cd37468   936  and x13, x1, #0xfffffffffff00000
0x4cd3746c   940  add x13, x13, x16, lsl #2
0x4cd37470   944  ubfx x0, x1, #3, #5
0x4cd37474   948  ldr x13, [x13, #360]
0x4cd37478   952  lsr x13, x13, x0
0x4cd3747c   956  tbz w13, #0, #+0x8 (addr 0x4cd37484)
0x4cd37480   960  tbnz w13, #1, #+0x3c (addr 0x4cd374bc)
0x4cd37484   964  ldp x2, x0, [jssp], #16
0x4cd37488   968  ldr x16, pc+872 (addr 0x000000004cd377f0)    ;; external reference (store_buffer_top)
0x4cd3748c   972  ldr x13, [x16]
0x4cd37490   976  str x6, [x13], #8
0x4cd37494   980  str x13, [x16]
0x4cd37498   984  tst x13, #0x1ffff
0x4cd3749c   988  b.eq #+0x8 (addr 0x4cd374a4)
0x4cd374a0   992  ret
0x4cd374a4   996  sub csp, jssp, #0x8 (8)
0x4cd374a8  1000  str lr, [jssp, #-8]!
0x4cd374ac  1004  ldr x17, pc+844 (addr 0x000000004cd377f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd374b0  1008  blr x17
0x4cd374b4  1012  ldr lr, [jssp], #8
0x4cd374b8  1016  ret
0x4cd374bc  1020  ldr x13, [x6]
0x4cd374c0  1024  and x0, x13, #0xfffffffffff00000
0x4cd374c4  1028  ldr x0, [x0, #8]
0x4cd374c8  1032  tbz w0, #6, #+0x18 (addr 0x4cd374e0)
0x4cd374cc  1036  and x0, x1, #0xfffffffffff00000
0x4cd374d0  1040  ldr x0, [x0, #8]
0x4cd374d4  1044  movz x16, #0x58
0x4cd374d8  1048  tst x0, x16
0x4cd374dc  1052  b.eq #+0x68 (addr 0x4cd37544)
0x4cd374e0  1056  sub csp, jssp, #0x10 (16)
0x4cd374e4  1060  stp x1, x6, [jssp, #-16]!
0x4cd374e8  1064  ubfx x16, x13, #8, #12
0x4cd374ec  1068  and x0, x13, #0xfffffffffff00000
0x4cd374f0  1072  add x0, x0, x16, lsl #2
0x4cd374f4  1076  ubfx x1, x13, #3, #5
0x4cd374f8  1080  ldr x6, [x0, #360]
0x4cd374fc  1084  lsr x6, x6, x1
0x4cd37500  1088  tbz w6, #0, #+0x40 (addr 0x4cd37540)
0x4cd37504  1092  ldp x1, x6, [jssp], #16
0x4cd37508  1096  ldp x2, x0, [jssp], #16
0x4cd3750c  1100  ldr x16, pc+756 (addr 0x000000004cd37800)    ;; external reference (store_buffer_top)
0x4cd37510  1104  ldr x13, [x16]
0x4cd37514  1108  str x6, [x13], #8
0x4cd37518  1112  str x13, [x16]
0x4cd3751c  1116  tst x13, #0x1ffff
0x4cd37520  1120  b.eq #+0x8 (addr 0x4cd37528)
0x4cd37524  1124  ret
0x4cd37528  1128  sub csp, jssp, #0x8 (8)
0x4cd3752c  1132  str lr, [jssp, #-8]!
0x4cd37530  1136  ldr x17, pc+728 (addr 0x000000004cd37808)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd37534  1140  blr x17
0x4cd37538  1144  ldr lr, [jssp], #8
0x4cd3753c  1148  ret
0x4cd37540  1152  ldp x1, x6, [jssp], #16
0x4cd37544  1156  sub csp, jssp, #0x78 (120)
0x4cd37548  1160  stp x14, x15, [jssp, #-32]!
0x4cd3754c  1164  stp x18, lr, [jssp, #16]
0x4cd37550  1168  stp x9, x10, [jssp, #-32]!
0x4cd37554  1172  stp x11, x12, [jssp, #16]
0x4cd37558  1176  stp x5, x6, [jssp, #-32]!
0x4cd3755c  1180  stp x7, x8, [jssp, #16]
0x4cd37560  1184  stp x1, x3, [jssp, #-24]!
0x4cd37564  1188  str x4, [jssp, #16]
0x4cd37568  1192  sub csp, jssp, #0xb0 (176)
0x4cd3756c  1196  stp d26, d27, [jssp, #-32]!
0x4cd37570  1200  stp d28, d29, [jssp, #16]
0x4cd37574  1204  stp d22, d23, [jssp, #-32]!
0x4cd37578  1208  stp d24, d25, [jssp, #16]
0x4cd3757c  1212  stp d18, d19, [jssp, #-32]!
0x4cd37580  1216  stp d20, d21, [jssp, #16]
0x4cd37584  1220  stp d6, d7, [jssp, #-32]!
0x4cd37588  1224  stp d16, d17, [jssp, #16]
0x4cd3758c  1228  stp d2, d3, [jssp, #-32]!
0x4cd37590  1232  stp d4, d5, [jssp, #16]
0x4cd37594  1236  stp d0, d1, [jssp, #-16]!
0x4cd37598  1240  mov x0, x1
0x4cd3759c  1244  mov x1, x6
0x4cd375a0  1248  ldr x2, pc+624 (addr 0x000000004cd37810)    ;; external reference (isolate)
0x4cd375a4  1252  ldr x16, pc+628 (addr 0x000000004cd37818)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd375a8  1256  and csp, jssp, #0xfffffffffffffff0
0x4cd375ac  1260  blr x16
0x4cd375b0  1264  ldp d2, d3, [jssp, #16]
0x4cd375b4  1268  ldp d0, d1, [jssp], #32
0x4cd375b8  1272  ldp d6, d7, [jssp, #16]
0x4cd375bc  1276  ldp d4, d5, [jssp], #32
0x4cd375c0  1280  ldp d18, d19, [jssp, #16]
0x4cd375c4  1284  ldp d16, d17, [jssp], #32
0x4cd375c8  1288  ldp d22, d23, [jssp, #16]
0x4cd375cc  1292  ldp d20, d21, [jssp], #32
0x4cd375d0  1296  ldp d26, d27, [jssp, #16]
0x4cd375d4  1300  ldp d24, d25, [jssp], #32
0x4cd375d8  1304  ldp d28, d29, [jssp], #16
0x4cd375dc  1308  ldp x4, x5, [jssp, #16]
0x4cd375e0  1312  ldp x1, x3, [jssp], #32
0x4cd375e4  1316  ldp x8, x9, [jssp, #16]
0x4cd375e8  1320  ldp x6, x7, [jssp], #32
0x4cd375ec  1324  ldp x12, x14, [jssp, #16]
0x4cd375f0  1328  ldp x10, x11, [jssp], #32
0x4cd375f4  1332  ldr lr, [jssp, #16]
0x4cd375f8  1336  ldp x15, x18, [jssp], #24
0x4cd375fc  1340  ldp x2, x0, [jssp], #16
0x4cd37600  1344  ldr x16, pc+544 (addr 0x000000004cd37820)    ;; external reference (store_buffer_top)
0x4cd37604  1348  ldr x13, [x16]
0x4cd37608  1352  str x6, [x13], #8
0x4cd3760c  1356  str x13, [x16]
0x4cd37610  1360  tst x13, #0x1ffff
0x4cd37614  1364  b.eq #+0x8 (addr 0x4cd3761c)
0x4cd37618  1368  ret
0x4cd3761c  1372  sub csp, jssp, #0x8 (8)
0x4cd37620  1376  str lr, [jssp, #-8]!
0x4cd37624  1380  ldr x17, pc+516 (addr 0x000000004cd37828)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd37628  1384  blr x17
0x4cd3762c  1388  ldr lr, [jssp], #8
0x4cd37630  1392  ret
0x4cd37634  1396  and x13, x1, #0xfffffffffff00000
0x4cd37638  1400  ldr x0, [x13, #104]
0x4cd3763c  1404  subs x0, x0, #0x1 (1)
0x4cd37640  1408  str x0, [x13, #104]
0x4cd37644  1412  b.mi #+0x84 (addr 0x4cd376c8)
0x4cd37648  1416  ubfx x16, x1, #8, #12
0x4cd3764c  1420  and x13, x1, #0xfffffffffff00000
0x4cd37650  1424  add x13, x13, x16, lsl #2
0x4cd37654  1428  ubfx x0, x1, #3, #5
0x4cd37658  1432  ldr x13, [x13, #360]
0x4cd3765c  1436  lsr x13, x13, x0
0x4cd37660  1440  tbz w13, #0, #+0x8 (addr 0x4cd37668)
0x4cd37664  1444  tbnz w13, #1, #+0xc (addr 0x4cd37670)
0x4cd37668  1448  ldp x2, x0, [jssp], #16
0x4cd3766c  1452  ret
0x4cd37670  1456  ldr x13, [x6]
0x4cd37674  1460  and x0, x13, #0xfffffffffff00000
0x4cd37678  1464  ldr x0, [x0, #8]
0x4cd3767c  1468  tbz w0, #6, #+0x18 (addr 0x4cd37694)
0x4cd37680  1472  and x0, x1, #0xfffffffffff00000
0x4cd37684  1476  ldr x0, [x0, #8]
0x4cd37688  1480  movz x16, #0x58
0x4cd3768c  1484  tst x0, x16
0x4cd37690  1488  b.eq #+0x38 (addr 0x4cd376c8)
0x4cd37694  1492  sub csp, jssp, #0x10 (16)
0x4cd37698  1496  stp x1, x6, [jssp, #-16]!
0x4cd3769c  1500  ubfx x16, x13, #8, #12
0x4cd376a0  1504  and x0, x13, #0xfffffffffff00000
0x4cd376a4  1508  add x0, x0, x16, lsl #2
0x4cd376a8  1512  ubfx x1, x13, #3, #5
0x4cd376ac  1516  ldr x6, [x0, #360]
0x4cd376b0  1520  lsr x6, x6, x1
0x4cd376b4  1524  tbz w6, #0, #+0x10 (addr 0x4cd376c4)
0x4cd376b8  1528  ldp x1, x6, [jssp], #16
0x4cd376bc  1532  ldp x2, x0, [jssp], #16
0x4cd376c0  1536  ret
0x4cd376c4  1540  ldp x1, x6, [jssp], #16
0x4cd376c8  1544  sub csp, jssp, #0x78 (120)
0x4cd376cc  1548  stp x14, x15, [jssp, #-32]!
0x4cd376d0  1552  stp x18, lr, [jssp, #16]
0x4cd376d4  1556  stp x9, x10, [jssp, #-32]!
0x4cd376d8  1560  stp x11, x12, [jssp, #16]
0x4cd376dc  1564  stp x5, x6, [jssp, #-32]!
0x4cd376e0  1568  stp x7, x8, [jssp, #16]
0x4cd376e4  1572  stp x1, x3, [jssp, #-24]!
0x4cd376e8  1576  str x4, [jssp, #16]
0x4cd376ec  1580  sub csp, jssp, #0xb0 (176)
0x4cd376f0  1584  stp d26, d27, [jssp, #-32]!
0x4cd376f4  1588  stp d28, d29, [jssp, #16]
0x4cd376f8  1592  stp d22, d23, [jssp, #-32]!
0x4cd376fc  1596  stp d24, d25, [jssp, #16]
0x4cd37700  1600  stp d18, d19, [jssp, #-32]!
0x4cd37704  1604  stp d20, d21, [jssp, #16]
0x4cd37708  1608  stp d6, d7, [jssp, #-32]!
0x4cd3770c  1612  stp d16, d17, [jssp, #16]
0x4cd37710  1616  stp d2, d3, [jssp, #-32]!
0x4cd37714  1620  stp d4, d5, [jssp, #16]
0x4cd37718  1624  stp d0, d1, [jssp, #-16]!
0x4cd3771c  1628  mov x0, x1
0x4cd37720  1632  mov x1, x6
0x4cd37724  1636  ldr x2, pc+268 (addr 0x000000004cd37830)    ;; external reference (isolate)
0x4cd37728  1640  ldr x16, pc+272 (addr 0x000000004cd37838)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd3772c  1644  and csp, jssp, #0xfffffffffffffff0
0x4cd37730  1648  blr x16
0x4cd37734  1652  ldp d2, d3, [jssp, #16]
0x4cd37738  1656  ldp d0, d1, [jssp], #32
0x4cd3773c  1660  ldp d6, d7, [jssp, #16]
0x4cd37740  1664  ldp d4, d5, [jssp], #32
0x4cd37744  1668  ldp d18, d19, [jssp, #16]
0x4cd37748  1672  ldp d16, d17, [jssp], #32
0x4cd3774c  1676  ldp d22, d23, [jssp, #16]
0x4cd37750  1680  ldp d20, d21, [jssp], #32
0x4cd37754  1684  ldp d26, d27, [jssp, #16]
0x4cd37758  1688  ldp d24, d25, [jssp], #32
0x4cd3775c  1692  ldp d28, d29, [jssp], #16
0x4cd37760  1696  ldp x4, x5, [jssp, #16]
0x4cd37764  1700  ldp x1, x3, [jssp], #32
0x4cd37768  1704  ldp x8, x9, [jssp, #16]
0x4cd3776c  1708  ldp x6, x7, [jssp], #32
0x4cd37770  1712  ldp x12, x14, [jssp, #16]
0x4cd37774  1716  ldp x10, x11, [jssp], #32
0x4cd37778  1720  ldr lr, [jssp, #16]
0x4cd3777c  1724  ldp x15, x18, [jssp], #24
0x4cd37780  1728  ldp x2, x0, [jssp], #16
0x4cd37784  1732  ret
0x4cd37788  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd3778c  1740  d63f03e0       constant
0x4cd37790  1744  166dd8c0       constant
0x4cd37794  1748  00000000       constant
0x4cd37798  1752  4cd065a0       constant
0x4cd3779c  1756  00000000       constant
0x4cd377a0  1760  166dd8c0       constant
0x4cd377a4  1764  00000000       constant
0x4cd377a8  1768  4cd065a0       constant
0x4cd377ac  1772  00000000       constant
0x4cd377b0  1776  166dd8c0       constant
0x4cd377b4  1780  00000000       constant
0x4cd377b8  1784  4cd065a0       constant
0x4cd377bc  1788  00000000       constant
0x4cd377c0  1792  166dc2d0       constant
0x4cd377c4  1796  00000000       constant
0x4cd377c8  1800  00c2d958       constant
0x4cd377cc  1804  00000000       constant
0x4cd377d0  1808  166dd8c0       constant
0x4cd377d4  1812  00000000       constant
0x4cd377d8  1816  4cd065a0       constant
0x4cd377dc  1820  00000000       constant
0x4cd377e0  1824  166dc2d0       constant
0x4cd377e4  1828  00000000       constant
0x4cd377e8  1832  00c2d958       constant
0x4cd377ec  1836  00000000       constant
0x4cd377f0  1840  166dd8c0       constant
0x4cd377f4  1844  00000000       constant
0x4cd377f8  1848  4cd065a0       constant
0x4cd377fc  1852  00000000       constant
0x4cd37800  1856  166dd8c0       constant
0x4cd37804  1860  00000000       constant
0x4cd37808  1864  4cd065a0       constant
0x4cd3780c  1868  00000000       constant
0x4cd37810  1872  166dc2d0       constant
0x4cd37814  1876  00000000       constant
0x4cd37818  1880  00c2d958       constant
0x4cd3781c  1884  00000000       constant
0x4cd37820  1888  166dd8c0       constant
0x4cd37824  1892  00000000       constant
0x4cd37828  1896  4cd065a0       constant
0x4cd3782c  1900  00000000       constant
0x4cd37830  1904  166dc2d0       constant
0x4cd37834  1908  00000000       constant
0x4cd37838  1912  00c2d958       constant
0x4cd3783c  1916  00000000       constant


RelocInfo (size = 65)
0x4cd370c8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd370ec  code target (STUB)  (0x4cd065a0)
0x4cd37164  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd37188  code target (STUB)  (0x4cd065a0)
0x4cd371c8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd371ec  code target (STUB)  (0x4cd065a0)
0x4cd3725c  external reference (isolate)  (0x166dc2d0)
0x4cd37260  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd372bc  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd372e0  code target (STUB)  (0x4cd065a0)
0x4cd373c0  external reference (isolate)  (0x166dc2d0)
0x4cd373c4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd37488  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd374ac  code target (STUB)  (0x4cd065a0)
0x4cd3750c  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd37530  code target (STUB)  (0x4cd065a0)
0x4cd375a0  external reference (isolate)  (0x166dc2d0)
0x4cd375a4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd37600  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd37624  code target (STUB)  (0x4cd065a0)
0x4cd37724  external reference (isolate)  (0x166dc2d0)
0x4cd37728  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd37788  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0x4cd378a0     0  adr xzr, #+0x40 (addr 0x4cd378e0)
0x4cd378a4     4  adr xzr, #+0x360 (addr 0x4cd37c04)
0x4cd378a8     8  ldr x16, pc+1736 (addr 0x000000004cd37f70)    ;; external reference (store_buffer_top)
0x4cd378ac    12  ldr x2, [x16]
0x4cd378b0    16  str x3, [x2], #8
0x4cd378b4    20  str x2, [x16]
0x4cd378b8    24  tst x2, #0x1ffff
0x4cd378bc    28  b.eq #+0x8 (addr 0x4cd378c4)
0x4cd378c0    32  ret
0x4cd378c4    36  sub csp, jssp, #0x8 (8)
0x4cd378c8    40  str lr, [jssp, #-8]!
0x4cd378cc    44  ldr x17, pc+1708 (addr 0x000000004cd37f78)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd378d0    48  blr x17
0x4cd378d4    52  ldr lr, [jssp], #8
0x4cd378d8    56  ret
0x4cd378dc    60  ret
0x4cd378e0    64  sub csp, jssp, #0x10 (16)
0x4cd378e4    68  stp x1, x0, [jssp, #-16]!
0x4cd378e8    72  ldr x2, [x3]
0x4cd378ec    76  and x16, x2, #0xfffffffffff00000
0x4cd378f0    80  ldr x16, [x16, #8]
0x4cd378f4    84  tst x16, #0x18
0x4cd378f8    88  b.eq #+0x1d8 (addr 0x4cd37ad0)
0x4cd378fc    92  and x16, x4, #0xfffffffffff00000
0x4cd37900    96  ldr x16, [x16, #8]
0x4cd37904   100  tst x16, #0x18
0x4cd37908   104  b.ne #+0x1c8 (addr 0x4cd37ad0)
0x4cd3790c   108  and x2, x4, #0xfffffffffff00000
0x4cd37910   112  ldr x0, [x2, #104]
0x4cd37914   116  subs x0, x0, #0x1 (1)
0x4cd37918   120  str x0, [x2, #104]
0x4cd3791c   124  b.mi #+0xc4 (addr 0x4cd379e0)
0x4cd37920   128  ubfx x16, x4, #8, #12
0x4cd37924   132  and x2, x4, #0xfffffffffff00000
0x4cd37928   136  add x2, x2, x16, lsl #2
0x4cd3792c   140  ubfx x0, x4, #3, #5
0x4cd37930   144  ldr x2, [x2, #360]
0x4cd37934   148  lsr x2, x2, x0
0x4cd37938   152  tbz w2, #0, #+0x8 (addr 0x4cd37940)
0x4cd3793c   156  tbnz w2, #1, #+0x3c (addr 0x4cd37978)
0x4cd37940   160  ldp x1, x0, [jssp], #16
0x4cd37944   164  ldr x16, pc+1596 (addr 0x000000004cd37f80)    ;; external reference (store_buffer_top)
0x4cd37948   168  ldr x2, [x16]
0x4cd3794c   172  str x3, [x2], #8
0x4cd37950   176  str x2, [x16]
0x4cd37954   180  tst x2, #0x1ffff
0x4cd37958   184  b.eq #+0x8 (addr 0x4cd37960)
0x4cd3795c   188  ret
0x4cd37960   192  sub csp, jssp, #0x8 (8)
0x4cd37964   196  str lr, [jssp, #-8]!
0x4cd37968   200  ldr x17, pc+1568 (addr 0x000000004cd37f88)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd3796c   204  blr x17
0x4cd37970   208  ldr lr, [jssp], #8
0x4cd37974   212  ret
0x4cd37978   216  ldr x2, [x3]
0x4cd3797c   220  sub csp, jssp, #0x10 (16)
0x4cd37980   224  stp x4, x3, [jssp, #-16]!
0x4cd37984   228  ubfx x16, x2, #8, #12
0x4cd37988   232  and x0, x2, #0xfffffffffff00000
0x4cd3798c   236  add x0, x0, x16, lsl #2
0x4cd37990   240  ubfx x4, x2, #3, #5
0x4cd37994   244  ldr x3, [x0, #360]
0x4cd37998   248  lsr x3, x3, x4
0x4cd3799c   252  tbz w3, #0, #+0x40 (addr 0x4cd379dc)
0x4cd379a0   256  ldp x4, x3, [jssp], #16
0x4cd379a4   260  ldp x1, x0, [jssp], #16
0x4cd379a8   264  ldr x16, pc+1512 (addr 0x000000004cd37f90)    ;; external reference (store_buffer_top)
0x4cd379ac   268  ldr x2, [x16]
0x4cd379b0   272  str x3, [x2], #8
0x4cd379b4   276  str x2, [x16]
0x4cd379b8   280  tst x2, #0x1ffff
0x4cd379bc   284  b.eq #+0x8 (addr 0x4cd379c4)
0x4cd379c0   288  ret
0x4cd379c4   292  sub csp, jssp, #0x8 (8)
0x4cd379c8   296  str lr, [jssp, #-8]!
0x4cd379cc   300  ldr x17, pc+1484 (addr 0x000000004cd37f98)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd379d0   304  blr x17
0x4cd379d4   308  ldr lr, [jssp], #8
0x4cd379d8   312  ret
0x4cd379dc   316  ldp x4, x3, [jssp], #16
0x4cd379e0   320  sub csp, jssp, #0x78 (120)
0x4cd379e4   324  stp x14, x15, [jssp, #-32]!
0x4cd379e8   328  stp x18, lr, [jssp, #16]
0x4cd379ec   332  stp x10, x11, [jssp, #-32]!
0x4cd379f0   336  stp x12, x13, [jssp, #16]
0x4cd379f4   340  stp x6, x7, [jssp, #-32]!
0x4cd379f8   344  stp x8, x9, [jssp, #16]
0x4cd379fc   348  stp x3, x4, [jssp, #-24]!
0x4cd37a00   352  str x5, [jssp, #16]
0x4cd37a04   356  sub csp, jssp, #0xb0 (176)
0x4cd37a08   360  stp d26, d27, [jssp, #-32]!
0x4cd37a0c   364  stp d28, d29, [jssp, #16]
0x4cd37a10   368  stp d22, d23, [jssp, #-32]!
0x4cd37a14   372  stp d24, d25, [jssp, #16]
0x4cd37a18   376  stp d18, d19, [jssp, #-32]!
0x4cd37a1c   380  stp d20, d21, [jssp, #16]
0x4cd37a20   384  stp d6, d7, [jssp, #-32]!
0x4cd37a24   388  stp d16, d17, [jssp, #16]
0x4cd37a28   392  stp d2, d3, [jssp, #-32]!
0x4cd37a2c   396  stp d4, d5, [jssp, #16]
0x4cd37a30   400  stp d0, d1, [jssp, #-16]!
0x4cd37a34   404  mov x0, x4
0x4cd37a38   408  mov x1, x3
0x4cd37a3c   412  ldr x2, pc+1380 (addr 0x000000004cd37fa0)    ;; external reference (isolate)
0x4cd37a40   416  ldr x16, pc+1384 (addr 0x000000004cd37fa8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd37a44   420  and csp, jssp, #0xfffffffffffffff0
0x4cd37a48   424  blr x16
0x4cd37a4c   428  ldp d2, d3, [jssp, #16]
0x4cd37a50   432  ldp d0, d1, [jssp], #32
0x4cd37a54   436  ldp d6, d7, [jssp, #16]
0x4cd37a58   440  ldp d4, d5, [jssp], #32
0x4cd37a5c   444  ldp d18, d19, [jssp, #16]
0x4cd37a60   448  ldp d16, d17, [jssp], #32
0x4cd37a64   452  ldp d22, d23, [jssp, #16]
0x4cd37a68   456  ldp d20, d21, [jssp], #32
0x4cd37a6c   460  ldp d26, d27, [jssp, #16]
0x4cd37a70   464  ldp d24, d25, [jssp], #32
0x4cd37a74   468  ldp d28, d29, [jssp], #16
0x4cd37a78   472  ldp x5, x6, [jssp, #16]
0x4cd37a7c   476  ldp x3, x4, [jssp], #32
0x4cd37a80   480  ldp x9, x10, [jssp, #16]
0x4cd37a84   484  ldp x7, x8, [jssp], #32
0x4cd37a88   488  ldp x13, x14, [jssp, #16]
0x4cd37a8c   492  ldp x11, x12, [jssp], #32
0x4cd37a90   496  ldr lr, [jssp, #16]
0x4cd37a94   500  ldp x15, x18, [jssp], #24
0x4cd37a98   504  ldp x1, x0, [jssp], #16
0x4cd37a9c   508  ldr x16, pc+1300 (addr 0x000000004cd37fb0)    ;; external reference (store_buffer_top)
0x4cd37aa0   512  ldr x2, [x16]
0x4cd37aa4   516  str x3, [x2], #8
0x4cd37aa8   520  str x2, [x16]
0x4cd37aac   524  tst x2, #0x1ffff
0x4cd37ab0   528  b.eq #+0x8 (addr 0x4cd37ab8)
0x4cd37ab4   532  ret
0x4cd37ab8   536  sub csp, jssp, #0x8 (8)
0x4cd37abc   540  str lr, [jssp, #-8]!
0x4cd37ac0   544  ldr x17, pc+1272 (addr 0x000000004cd37fb8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd37ac4   548  blr x17
0x4cd37ac8   552  ldr lr, [jssp], #8
0x4cd37acc   556  ret
0x4cd37ad0   560  and x2, x4, #0xfffffffffff00000
0x4cd37ad4   564  ldr x0, [x2, #104]
0x4cd37ad8   568  subs x0, x0, #0x1 (1)
0x4cd37adc   572  str x0, [x2, #104]
0x4cd37ae0   576  b.mi #+0x64 (addr 0x4cd37b44)
0x4cd37ae4   580  ubfx x16, x4, #8, #12
0x4cd37ae8   584  and x2, x4, #0xfffffffffff00000
0x4cd37aec   588  add x2, x2, x16, lsl #2
0x4cd37af0   592  ubfx x0, x4, #3, #5
0x4cd37af4   596  ldr x2, [x2, #360]
0x4cd37af8   600  lsr x2, x2, x0
0x4cd37afc   604  tbz w2, #0, #+0x8 (addr 0x4cd37b04)
0x4cd37b00   608  tbnz w2, #1, #+0xc (addr 0x4cd37b0c)
0x4cd37b04   612  ldp x1, x0, [jssp], #16
0x4cd37b08   616  ret
0x4cd37b0c   620  ldr x2, [x3]
0x4cd37b10   624  sub csp, jssp, #0x10 (16)
0x4cd37b14   628  stp x4, x3, [jssp, #-16]!
0x4cd37b18   632  ubfx x16, x2, #8, #12
0x4cd37b1c   636  and x0, x2, #0xfffffffffff00000
0x4cd37b20   640  add x0, x0, x16, lsl #2
0x4cd37b24   644  ubfx x4, x2, #3, #5
0x4cd37b28   648  ldr x3, [x0, #360]
0x4cd37b2c   652  lsr x3, x3, x4
0x4cd37b30   656  tbz w3, #0, #+0x10 (addr 0x4cd37b40)
0x4cd37b34   660  ldp x4, x3, [jssp], #16
0x4cd37b38   664  ldp x1, x0, [jssp], #16
0x4cd37b3c   668  ret
0x4cd37b40   672  ldp x4, x3, [jssp], #16
0x4cd37b44   676  sub csp, jssp, #0x78 (120)
0x4cd37b48   680  stp x14, x15, [jssp, #-32]!
0x4cd37b4c   684  stp x18, lr, [jssp, #16]
0x4cd37b50   688  stp x10, x11, [jssp, #-32]!
0x4cd37b54   692  stp x12, x13, [jssp, #16]
0x4cd37b58   696  stp x6, x7, [jssp, #-32]!
0x4cd37b5c   700  stp x8, x9, [jssp, #16]
0x4cd37b60   704  stp x3, x4, [jssp, #-24]!
0x4cd37b64   708  str x5, [jssp, #16]
0x4cd37b68   712  sub csp, jssp, #0xb0 (176)
0x4cd37b6c   716  stp d26, d27, [jssp, #-32]!
0x4cd37b70   720  stp d28, d29, [jssp, #16]
0x4cd37b74   724  stp d22, d23, [jssp, #-32]!
0x4cd37b78   728  stp d24, d25, [jssp, #16]
0x4cd37b7c   732  stp d18, d19, [jssp, #-32]!
0x4cd37b80   736  stp d20, d21, [jssp, #16]
0x4cd37b84   740  stp d6, d7, [jssp, #-32]!
0x4cd37b88   744  stp d16, d17, [jssp, #16]
0x4cd37b8c   748  stp d2, d3, [jssp, #-32]!
0x4cd37b90   752  stp d4, d5, [jssp, #16]
0x4cd37b94   756  stp d0, d1, [jssp, #-16]!
0x4cd37b98   760  mov x0, x4
0x4cd37b9c   764  mov x1, x3
0x4cd37ba0   768  ldr x2, pc+1056 (addr 0x000000004cd37fc0)    ;; external reference (isolate)
0x4cd37ba4   772  ldr x16, pc+1060 (addr 0x000000004cd37fc8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd37ba8   776  and csp, jssp, #0xfffffffffffffff0
0x4cd37bac   780  blr x16
0x4cd37bb0   784  ldp d2, d3, [jssp, #16]
0x4cd37bb4   788  ldp d0, d1, [jssp], #32
0x4cd37bb8   792  ldp d6, d7, [jssp, #16]
0x4cd37bbc   796  ldp d4, d5, [jssp], #32
0x4cd37bc0   800  ldp d18, d19, [jssp, #16]
0x4cd37bc4   804  ldp d16, d17, [jssp], #32
0x4cd37bc8   808  ldp d22, d23, [jssp, #16]
0x4cd37bcc   812  ldp d20, d21, [jssp], #32
0x4cd37bd0   816  ldp d26, d27, [jssp, #16]
0x4cd37bd4   820  ldp d24, d25, [jssp], #32
0x4cd37bd8   824  ldp d28, d29, [jssp], #16
0x4cd37bdc   828  ldp x5, x6, [jssp, #16]
0x4cd37be0   832  ldp x3, x4, [jssp], #32
0x4cd37be4   836  ldp x9, x10, [jssp, #16]
0x4cd37be8   840  ldp x7, x8, [jssp], #32
0x4cd37bec   844  ldp x13, x14, [jssp, #16]
0x4cd37bf0   848  ldp x11, x12, [jssp], #32
0x4cd37bf4   852  ldr lr, [jssp, #16]
0x4cd37bf8   856  ldp x15, x18, [jssp], #24
0x4cd37bfc   860  ldp x1, x0, [jssp], #16
0x4cd37c00   864  ret
0x4cd37c04   868  sub csp, jssp, #0x10 (16)
0x4cd37c08   872  stp x1, x0, [jssp, #-16]!
0x4cd37c0c   876  ldr x2, [x3]
0x4cd37c10   880  and x16, x2, #0xfffffffffff00000
0x4cd37c14   884  ldr x16, [x16, #8]
0x4cd37c18   888  tst x16, #0x18
0x4cd37c1c   892  b.eq #+0x1f8 (addr 0x4cd37e14)
0x4cd37c20   896  and x16, x4, #0xfffffffffff00000
0x4cd37c24   900  ldr x16, [x16, #8]
0x4cd37c28   904  tst x16, #0x18
0x4cd37c2c   908  b.ne #+0x1e8 (addr 0x4cd37e14)
0x4cd37c30   912  and x2, x4, #0xfffffffffff00000
0x4cd37c34   916  ldr x0, [x2, #104]
0x4cd37c38   920  subs x0, x0, #0x1 (1)
0x4cd37c3c   924  str x0, [x2, #104]
0x4cd37c40   928  b.mi #+0xe4 (addr 0x4cd37d24)
0x4cd37c44   932  ubfx x16, x4, #8, #12
0x4cd37c48   936  and x2, x4, #0xfffffffffff00000
0x4cd37c4c   940  add x2, x2, x16, lsl #2
0x4cd37c50   944  ubfx x0, x4, #3, #5
0x4cd37c54   948  ldr x2, [x2, #360]
0x4cd37c58   952  lsr x2, x2, x0
0x4cd37c5c   956  tbz w2, #0, #+0x8 (addr 0x4cd37c64)
0x4cd37c60   960  tbnz w2, #1, #+0x3c (addr 0x4cd37c9c)
0x4cd37c64   964  ldp x1, x0, [jssp], #16
0x4cd37c68   968  ldr x16, pc+872 (addr 0x000000004cd37fd0)    ;; external reference (store_buffer_top)
0x4cd37c6c   972  ldr x2, [x16]
0x4cd37c70   976  str x3, [x2], #8
0x4cd37c74   980  str x2, [x16]
0x4cd37c78   984  tst x2, #0x1ffff
0x4cd37c7c   988  b.eq #+0x8 (addr 0x4cd37c84)
0x4cd37c80   992  ret
0x4cd37c84   996  sub csp, jssp, #0x8 (8)
0x4cd37c88  1000  str lr, [jssp, #-8]!
0x4cd37c8c  1004  ldr x17, pc+844 (addr 0x000000004cd37fd8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd37c90  1008  blr x17
0x4cd37c94  1012  ldr lr, [jssp], #8
0x4cd37c98  1016  ret
0x4cd37c9c  1020  ldr x2, [x3]
0x4cd37ca0  1024  and x0, x2, #0xfffffffffff00000
0x4cd37ca4  1028  ldr x0, [x0, #8]
0x4cd37ca8  1032  tbz w0, #6, #+0x18 (addr 0x4cd37cc0)
0x4cd37cac  1036  and x0, x4, #0xfffffffffff00000
0x4cd37cb0  1040  ldr x0, [x0, #8]
0x4cd37cb4  1044  movz x16, #0x58
0x4cd37cb8  1048  tst x0, x16
0x4cd37cbc  1052  b.eq #+0x68 (addr 0x4cd37d24)
0x4cd37cc0  1056  sub csp, jssp, #0x10 (16)
0x4cd37cc4  1060  stp x4, x3, [jssp, #-16]!
0x4cd37cc8  1064  ubfx x16, x2, #8, #12
0x4cd37ccc  1068  and x0, x2, #0xfffffffffff00000
0x4cd37cd0  1072  add x0, x0, x16, lsl #2
0x4cd37cd4  1076  ubfx x4, x2, #3, #5
0x4cd37cd8  1080  ldr x3, [x0, #360]
0x4cd37cdc  1084  lsr x3, x3, x4
0x4cd37ce0  1088  tbz w3, #0, #+0x40 (addr 0x4cd37d20)
0x4cd37ce4  1092  ldp x4, x3, [jssp], #16
0x4cd37ce8  1096  ldp x1, x0, [jssp], #16
0x4cd37cec  1100  ldr x16, pc+756 (addr 0x000000004cd37fe0)    ;; external reference (store_buffer_top)
0x4cd37cf0  1104  ldr x2, [x16]
0x4cd37cf4  1108  str x3, [x2], #8
0x4cd37cf8  1112  str x2, [x16]
0x4cd37cfc  1116  tst x2, #0x1ffff
0x4cd37d00  1120  b.eq #+0x8 (addr 0x4cd37d08)
0x4cd37d04  1124  ret
0x4cd37d08  1128  sub csp, jssp, #0x8 (8)
0x4cd37d0c  1132  str lr, [jssp, #-8]!
0x4cd37d10  1136  ldr x17, pc+728 (addr 0x000000004cd37fe8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd37d14  1140  blr x17
0x4cd37d18  1144  ldr lr, [jssp], #8
0x4cd37d1c  1148  ret
0x4cd37d20  1152  ldp x4, x3, [jssp], #16
0x4cd37d24  1156  sub csp, jssp, #0x78 (120)
0x4cd37d28  1160  stp x14, x15, [jssp, #-32]!
0x4cd37d2c  1164  stp x18, lr, [jssp, #16]
0x4cd37d30  1168  stp x10, x11, [jssp, #-32]!
0x4cd37d34  1172  stp x12, x13, [jssp, #16]
0x4cd37d38  1176  stp x6, x7, [jssp, #-32]!
0x4cd37d3c  1180  stp x8, x9, [jssp, #16]
0x4cd37d40  1184  stp x3, x4, [jssp, #-24]!
0x4cd37d44  1188  str x5, [jssp, #16]
0x4cd37d48  1192  sub csp, jssp, #0xb0 (176)
0x4cd37d4c  1196  stp d26, d27, [jssp, #-32]!
0x4cd37d50  1200  stp d28, d29, [jssp, #16]
0x4cd37d54  1204  stp d22, d23, [jssp, #-32]!
0x4cd37d58  1208  stp d24, d25, [jssp, #16]
0x4cd37d5c  1212  stp d18, d19, [jssp, #-32]!
0x4cd37d60  1216  stp d20, d21, [jssp, #16]
0x4cd37d64  1220  stp d6, d7, [jssp, #-32]!
0x4cd37d68  1224  stp d16, d17, [jssp, #16]
0x4cd37d6c  1228  stp d2, d3, [jssp, #-32]!
0x4cd37d70  1232  stp d4, d5, [jssp, #16]
0x4cd37d74  1236  stp d0, d1, [jssp, #-16]!
0x4cd37d78  1240  mov x0, x4
0x4cd37d7c  1244  mov x1, x3
0x4cd37d80  1248  ldr x2, pc+624 (addr 0x000000004cd37ff0)    ;; external reference (isolate)
0x4cd37d84  1252  ldr x16, pc+628 (addr 0x000000004cd37ff8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd37d88  1256  and csp, jssp, #0xfffffffffffffff0
0x4cd37d8c  1260  blr x16
0x4cd37d90  1264  ldp d2, d3, [jssp, #16]
0x4cd37d94  1268  ldp d0, d1, [jssp], #32
0x4cd37d98  1272  ldp d6, d7, [jssp, #16]
0x4cd37d9c  1276  ldp d4, d5, [jssp], #32
0x4cd37da0  1280  ldp d18, d19, [jssp, #16]
0x4cd37da4  1284  ldp d16, d17, [jssp], #32
0x4cd37da8  1288  ldp d22, d23, [jssp, #16]
0x4cd37dac  1292  ldp d20, d21, [jssp], #32
0x4cd37db0  1296  ldp d26, d27, [jssp, #16]
0x4cd37db4  1300  ldp d24, d25, [jssp], #32
0x4cd37db8  1304  ldp d28, d29, [jssp], #16
0x4cd37dbc  1308  ldp x5, x6, [jssp, #16]
0x4cd37dc0  1312  ldp x3, x4, [jssp], #32
0x4cd37dc4  1316  ldp x9, x10, [jssp, #16]
0x4cd37dc8  1320  ldp x7, x8, [jssp], #32
0x4cd37dcc  1324  ldp x13, x14, [jssp, #16]
0x4cd37dd0  1328  ldp x11, x12, [jssp], #32
0x4cd37dd4  1332  ldr lr, [jssp, #16]
0x4cd37dd8  1336  ldp x15, x18, [jssp], #24
0x4cd37ddc  1340  ldp x1, x0, [jssp], #16
0x4cd37de0  1344  ldr x16, pc+544 (addr 0x000000004cd38000)    ;; external reference (store_buffer_top)
0x4cd37de4  1348  ldr x2, [x16]
0x4cd37de8  1352  str x3, [x2], #8
0x4cd37dec  1356  str x2, [x16]
0x4cd37df0  1360  tst x2, #0x1ffff
0x4cd37df4  1364  b.eq #+0x8 (addr 0x4cd37dfc)
0x4cd37df8  1368  ret
0x4cd37dfc  1372  sub csp, jssp, #0x8 (8)
0x4cd37e00  1376  str lr, [jssp, #-8]!
0x4cd37e04  1380  ldr x17, pc+516 (addr 0x000000004cd38008)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd37e08  1384  blr x17
0x4cd37e0c  1388  ldr lr, [jssp], #8
0x4cd37e10  1392  ret
0x4cd37e14  1396  and x2, x4, #0xfffffffffff00000
0x4cd37e18  1400  ldr x0, [x2, #104]
0x4cd37e1c  1404  subs x0, x0, #0x1 (1)
0x4cd37e20  1408  str x0, [x2, #104]
0x4cd37e24  1412  b.mi #+0x84 (addr 0x4cd37ea8)
0x4cd37e28  1416  ubfx x16, x4, #8, #12
0x4cd37e2c  1420  and x2, x4, #0xfffffffffff00000
0x4cd37e30  1424  add x2, x2, x16, lsl #2
0x4cd37e34  1428  ubfx x0, x4, #3, #5
0x4cd37e38  1432  ldr x2, [x2, #360]
0x4cd37e3c  1436  lsr x2, x2, x0
0x4cd37e40  1440  tbz w2, #0, #+0x8 (addr 0x4cd37e48)
0x4cd37e44  1444  tbnz w2, #1, #+0xc (addr 0x4cd37e50)
0x4cd37e48  1448  ldp x1, x0, [jssp], #16
0x4cd37e4c  1452  ret
0x4cd37e50  1456  ldr x2, [x3]
0x4cd37e54  1460  and x0, x2, #0xfffffffffff00000
0x4cd37e58  1464  ldr x0, [x0, #8]
0x4cd37e5c  1468  tbz w0, #6, #+0x18 (addr 0x4cd37e74)
0x4cd37e60  1472  and x0, x4, #0xfffffffffff00000
0x4cd37e64  1476  ldr x0, [x0, #8]
0x4cd37e68  1480  movz x16, #0x58
0x4cd37e6c  1484  tst x0, x16
0x4cd37e70  1488  b.eq #+0x38 (addr 0x4cd37ea8)
0x4cd37e74  1492  sub csp, jssp, #0x10 (16)
0x4cd37e78  1496  stp x4, x3, [jssp, #-16]!
0x4cd37e7c  1500  ubfx x16, x2, #8, #12
0x4cd37e80  1504  and x0, x2, #0xfffffffffff00000
0x4cd37e84  1508  add x0, x0, x16, lsl #2
0x4cd37e88  1512  ubfx x4, x2, #3, #5
0x4cd37e8c  1516  ldr x3, [x0, #360]
0x4cd37e90  1520  lsr x3, x3, x4
0x4cd37e94  1524  tbz w3, #0, #+0x10 (addr 0x4cd37ea4)
0x4cd37e98  1528  ldp x4, x3, [jssp], #16
0x4cd37e9c  1532  ldp x1, x0, [jssp], #16
0x4cd37ea0  1536  ret
0x4cd37ea4  1540  ldp x4, x3, [jssp], #16
0x4cd37ea8  1544  sub csp, jssp, #0x78 (120)
0x4cd37eac  1548  stp x14, x15, [jssp, #-32]!
0x4cd37eb0  1552  stp x18, lr, [jssp, #16]
0x4cd37eb4  1556  stp x10, x11, [jssp, #-32]!
0x4cd37eb8  1560  stp x12, x13, [jssp, #16]
0x4cd37ebc  1564  stp x6, x7, [jssp, #-32]!
0x4cd37ec0  1568  stp x8, x9, [jssp, #16]
0x4cd37ec4  1572  stp x3, x4, [jssp, #-24]!
0x4cd37ec8  1576  str x5, [jssp, #16]
0x4cd37ecc  1580  sub csp, jssp, #0xb0 (176)
0x4cd37ed0  1584  stp d26, d27, [jssp, #-32]!
0x4cd37ed4  1588  stp d28, d29, [jssp, #16]
0x4cd37ed8  1592  stp d22, d23, [jssp, #-32]!
0x4cd37edc  1596  stp d24, d25, [jssp, #16]
0x4cd37ee0  1600  stp d18, d19, [jssp, #-32]!
0x4cd37ee4  1604  stp d20, d21, [jssp, #16]
0x4cd37ee8  1608  stp d6, d7, [jssp, #-32]!
0x4cd37eec  1612  stp d16, d17, [jssp, #16]
0x4cd37ef0  1616  stp d2, d3, [jssp, #-32]!
0x4cd37ef4  1620  stp d4, d5, [jssp, #16]
0x4cd37ef8  1624  stp d0, d1, [jssp, #-16]!
0x4cd37efc  1628  mov x0, x4
0x4cd37f00  1632  mov x1, x3
0x4cd37f04  1636  ldr x2, pc+268 (addr 0x000000004cd38010)    ;; external reference (isolate)
0x4cd37f08  1640  ldr x16, pc+272 (addr 0x000000004cd38018)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd37f0c  1644  and csp, jssp, #0xfffffffffffffff0
0x4cd37f10  1648  blr x16
0x4cd37f14  1652  ldp d2, d3, [jssp, #16]
0x4cd37f18  1656  ldp d0, d1, [jssp], #32
0x4cd37f1c  1660  ldp d6, d7, [jssp, #16]
0x4cd37f20  1664  ldp d4, d5, [jssp], #32
0x4cd37f24  1668  ldp d18, d19, [jssp, #16]
0x4cd37f28  1672  ldp d16, d17, [jssp], #32
0x4cd37f2c  1676  ldp d22, d23, [jssp, #16]
0x4cd37f30  1680  ldp d20, d21, [jssp], #32
0x4cd37f34  1684  ldp d26, d27, [jssp, #16]
0x4cd37f38  1688  ldp d24, d25, [jssp], #32
0x4cd37f3c  1692  ldp d28, d29, [jssp], #16
0x4cd37f40  1696  ldp x5, x6, [jssp, #16]
0x4cd37f44  1700  ldp x3, x4, [jssp], #32
0x4cd37f48  1704  ldp x9, x10, [jssp, #16]
0x4cd37f4c  1708  ldp x7, x8, [jssp], #32
0x4cd37f50  1712  ldp x13, x14, [jssp, #16]
0x4cd37f54  1716  ldp x11, x12, [jssp], #32
0x4cd37f58  1720  ldr lr, [jssp, #16]
0x4cd37f5c  1724  ldp x15, x18, [jssp], #24
0x4cd37f60  1728  ldp x1, x0, [jssp], #16
0x4cd37f64  1732  ret
0x4cd37f68  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd37f6c  1740  d63f03e0       constant
0x4cd37f70  1744  166dd8c0       constant
0x4cd37f74  1748  00000000       constant
0x4cd37f78  1752  4cd065a0       constant
0x4cd37f7c  1756  00000000       constant
0x4cd37f80  1760  166dd8c0       constant
0x4cd37f84  1764  00000000       constant
0x4cd37f88  1768  4cd065a0       constant
0x4cd37f8c  1772  00000000       constant
0x4cd37f90  1776  166dd8c0       constant
0x4cd37f94  1780  00000000       constant
0x4cd37f98  1784  4cd065a0       constant
0x4cd37f9c  1788  00000000       constant
0x4cd37fa0  1792  166dc2d0       constant
0x4cd37fa4  1796  00000000       constant
0x4cd37fa8  1800  00c2d958       constant
0x4cd37fac  1804  00000000       constant
0x4cd37fb0  1808  166dd8c0       constant
0x4cd37fb4  1812  00000000       constant
0x4cd37fb8  1816  4cd065a0       constant
0x4cd37fbc  1820  00000000       constant
0x4cd37fc0  1824  166dc2d0       constant
0x4cd37fc4  1828  00000000       constant
0x4cd37fc8  1832  00c2d958       constant
0x4cd37fcc  1836  00000000       constant
0x4cd37fd0  1840  166dd8c0       constant
0x4cd37fd4  1844  00000000       constant
0x4cd37fd8  1848  4cd065a0       constant
0x4cd37fdc  1852  00000000       constant
0x4cd37fe0  1856  166dd8c0       constant
0x4cd37fe4  1860  00000000       constant
0x4cd37fe8  1864  4cd065a0       constant
0x4cd37fec  1868  00000000       constant
0x4cd37ff0  1872  166dc2d0       constant
0x4cd37ff4  1876  00000000       constant
0x4cd37ff8  1880  00c2d958       constant
0x4cd37ffc  1884  00000000       constant
0x4cd38000  1888  166dd8c0       constant
0x4cd38004  1892  00000000       constant
0x4cd38008  1896  4cd065a0       constant
0x4cd3800c  1900  00000000       constant
0x4cd38010  1904  166dc2d0       constant
0x4cd38014  1908  00000000       constant
0x4cd38018  1912  00c2d958       constant
0x4cd3801c  1916  00000000       constant


RelocInfo (size = 65)
0x4cd378a8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd378cc  code target (STUB)  (0x4cd065a0)
0x4cd37944  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd37968  code target (STUB)  (0x4cd065a0)
0x4cd379a8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd379cc  code target (STUB)  (0x4cd065a0)
0x4cd37a3c  external reference (isolate)  (0x166dc2d0)
0x4cd37a40  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd37a9c  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd37ac0  code target (STUB)  (0x4cd065a0)
0x4cd37ba0  external reference (isolate)  (0x166dc2d0)
0x4cd37ba4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd37c68  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd37c8c  code target (STUB)  (0x4cd065a0)
0x4cd37cec  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd37d10  code target (STUB)  (0x4cd065a0)
0x4cd37d80  external reference (isolate)  (0x166dc2d0)
0x4cd37d84  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd37de0  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd37e04  code target (STUB)  (0x4cd065a0)
0x4cd37f04  external reference (isolate)  (0x166dc2d0)
0x4cd37f08  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd37f68  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0x4cd38080     0  adr xzr, #+0x40 (addr 0x4cd380c0)
0x4cd38084     4  adr xzr, #+0x360 (addr 0x4cd383e4)
0x4cd38088     8  ldr x16, pc+1736 (addr 0x000000004cd38750)    ;; external reference (store_buffer_top)
0x4cd3808c    12  ldr x5, [x16]
0x4cd38090    16  str x2, [x5], #8
0x4cd38094    20  str x5, [x16]
0x4cd38098    24  tst x5, #0x1ffff
0x4cd3809c    28  b.eq #+0x8 (addr 0x4cd380a4)
0x4cd380a0    32  ret
0x4cd380a4    36  sub csp, jssp, #0x8 (8)
0x4cd380a8    40  str lr, [jssp, #-8]!
0x4cd380ac    44  ldr x17, pc+1708 (addr 0x000000004cd38758)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd380b0    48  blr x17
0x4cd380b4    52  ldr lr, [jssp], #8
0x4cd380b8    56  ret
0x4cd380bc    60  ret
0x4cd380c0    64  sub csp, jssp, #0x10 (16)
0x4cd380c4    68  stp x3, x0, [jssp, #-16]!
0x4cd380c8    72  ldr x5, [x2]
0x4cd380cc    76  and x16, x5, #0xfffffffffff00000
0x4cd380d0    80  ldr x16, [x16, #8]
0x4cd380d4    84  tst x16, #0x18
0x4cd380d8    88  b.eq #+0x1d8 (addr 0x4cd382b0)
0x4cd380dc    92  and x16, x1, #0xfffffffffff00000
0x4cd380e0    96  ldr x16, [x16, #8]
0x4cd380e4   100  tst x16, #0x18
0x4cd380e8   104  b.ne #+0x1c8 (addr 0x4cd382b0)
0x4cd380ec   108  and x5, x1, #0xfffffffffff00000
0x4cd380f0   112  ldr x0, [x5, #104]
0x4cd380f4   116  subs x0, x0, #0x1 (1)
0x4cd380f8   120  str x0, [x5, #104]
0x4cd380fc   124  b.mi #+0xc4 (addr 0x4cd381c0)
0x4cd38100   128  ubfx x16, x1, #8, #12
0x4cd38104   132  and x5, x1, #0xfffffffffff00000
0x4cd38108   136  add x5, x5, x16, lsl #2
0x4cd3810c   140  ubfx x0, x1, #3, #5
0x4cd38110   144  ldr x5, [x5, #360]
0x4cd38114   148  lsr x5, x5, x0
0x4cd38118   152  tbz w5, #0, #+0x8 (addr 0x4cd38120)
0x4cd3811c   156  tbnz w5, #1, #+0x3c (addr 0x4cd38158)
0x4cd38120   160  ldp x3, x0, [jssp], #16
0x4cd38124   164  ldr x16, pc+1596 (addr 0x000000004cd38760)    ;; external reference (store_buffer_top)
0x4cd38128   168  ldr x5, [x16]
0x4cd3812c   172  str x2, [x5], #8
0x4cd38130   176  str x5, [x16]
0x4cd38134   180  tst x5, #0x1ffff
0x4cd38138   184  b.eq #+0x8 (addr 0x4cd38140)
0x4cd3813c   188  ret
0x4cd38140   192  sub csp, jssp, #0x8 (8)
0x4cd38144   196  str lr, [jssp, #-8]!
0x4cd38148   200  ldr x17, pc+1568 (addr 0x000000004cd38768)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd3814c   204  blr x17
0x4cd38150   208  ldr lr, [jssp], #8
0x4cd38154   212  ret
0x4cd38158   216  ldr x5, [x2]
0x4cd3815c   220  sub csp, jssp, #0x10 (16)
0x4cd38160   224  stp x1, x2, [jssp, #-16]!
0x4cd38164   228  ubfx x16, x5, #8, #12
0x4cd38168   232  and x0, x5, #0xfffffffffff00000
0x4cd3816c   236  add x0, x0, x16, lsl #2
0x4cd38170   240  ubfx x1, x5, #3, #5
0x4cd38174   244  ldr x2, [x0, #360]
0x4cd38178   248  lsr x2, x2, x1
0x4cd3817c   252  tbz w2, #0, #+0x40 (addr 0x4cd381bc)
0x4cd38180   256  ldp x1, x2, [jssp], #16
0x4cd38184   260  ldp x3, x0, [jssp], #16
0x4cd38188   264  ldr x16, pc+1512 (addr 0x000000004cd38770)    ;; external reference (store_buffer_top)
0x4cd3818c   268  ldr x5, [x16]
0x4cd38190   272  str x2, [x5], #8
0x4cd38194   276  str x5, [x16]
0x4cd38198   280  tst x5, #0x1ffff
0x4cd3819c   284  b.eq #+0x8 (addr 0x4cd381a4)
0x4cd381a0   288  ret
0x4cd381a4   292  sub csp, jssp, #0x8 (8)
0x4cd381a8   296  str lr, [jssp, #-8]!
0x4cd381ac   300  ldr x17, pc+1484 (addr 0x000000004cd38778)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd381b0   304  blr x17
0x4cd381b4   308  ldr lr, [jssp], #8
0x4cd381b8   312  ret
0x4cd381bc   316  ldp x1, x2, [jssp], #16
0x4cd381c0   320  sub csp, jssp, #0x78 (120)
0x4cd381c4   324  stp x14, x15, [jssp, #-32]!
0x4cd381c8   328  stp x18, lr, [jssp, #16]
0x4cd381cc   332  stp x10, x11, [jssp, #-32]!
0x4cd381d0   336  stp x12, x13, [jssp, #16]
0x4cd381d4   340  stp x6, x7, [jssp, #-32]!
0x4cd381d8   344  stp x8, x9, [jssp, #16]
0x4cd381dc   348  stp x1, x2, [jssp, #-24]!
0x4cd381e0   352  str x4, [jssp, #16]
0x4cd381e4   356  sub csp, jssp, #0xb0 (176)
0x4cd381e8   360  stp d26, d27, [jssp, #-32]!
0x4cd381ec   364  stp d28, d29, [jssp, #16]
0x4cd381f0   368  stp d22, d23, [jssp, #-32]!
0x4cd381f4   372  stp d24, d25, [jssp, #16]
0x4cd381f8   376  stp d18, d19, [jssp, #-32]!
0x4cd381fc   380  stp d20, d21, [jssp, #16]
0x4cd38200   384  stp d6, d7, [jssp, #-32]!
0x4cd38204   388  stp d16, d17, [jssp, #16]
0x4cd38208   392  stp d2, d3, [jssp, #-32]!
0x4cd3820c   396  stp d4, d5, [jssp, #16]
0x4cd38210   400  stp d0, d1, [jssp, #-16]!
0x4cd38214   404  mov x0, x1
0x4cd38218   408  mov x1, x2
0x4cd3821c   412  ldr x2, pc+1380 (addr 0x000000004cd38780)    ;; external reference (isolate)
0x4cd38220   416  ldr x16, pc+1384 (addr 0x000000004cd38788)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd38224   420  and csp, jssp, #0xfffffffffffffff0
0x4cd38228   424  blr x16
0x4cd3822c   428  ldp d2, d3, [jssp, #16]
0x4cd38230   432  ldp d0, d1, [jssp], #32
0x4cd38234   436  ldp d6, d7, [jssp, #16]
0x4cd38238   440  ldp d4, d5, [jssp], #32
0x4cd3823c   444  ldp d18, d19, [jssp, #16]
0x4cd38240   448  ldp d16, d17, [jssp], #32
0x4cd38244   452  ldp d22, d23, [jssp, #16]
0x4cd38248   456  ldp d20, d21, [jssp], #32
0x4cd3824c   460  ldp d26, d27, [jssp, #16]
0x4cd38250   464  ldp d24, d25, [jssp], #32
0x4cd38254   468  ldp d28, d29, [jssp], #16
0x4cd38258   472  ldp x4, x6, [jssp, #16]
0x4cd3825c   476  ldp x1, x2, [jssp], #32
0x4cd38260   480  ldp x9, x10, [jssp, #16]
0x4cd38264   484  ldp x7, x8, [jssp], #32
0x4cd38268   488  ldp x13, x14, [jssp, #16]
0x4cd3826c   492  ldp x11, x12, [jssp], #32
0x4cd38270   496  ldr lr, [jssp, #16]
0x4cd38274   500  ldp x15, x18, [jssp], #24
0x4cd38278   504  ldp x3, x0, [jssp], #16
0x4cd3827c   508  ldr x16, pc+1300 (addr 0x000000004cd38790)    ;; external reference (store_buffer_top)
0x4cd38280   512  ldr x5, [x16]
0x4cd38284   516  str x2, [x5], #8
0x4cd38288   520  str x5, [x16]
0x4cd3828c   524  tst x5, #0x1ffff
0x4cd38290   528  b.eq #+0x8 (addr 0x4cd38298)
0x4cd38294   532  ret
0x4cd38298   536  sub csp, jssp, #0x8 (8)
0x4cd3829c   540  str lr, [jssp, #-8]!
0x4cd382a0   544  ldr x17, pc+1272 (addr 0x000000004cd38798)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd382a4   548  blr x17
0x4cd382a8   552  ldr lr, [jssp], #8
0x4cd382ac   556  ret
0x4cd382b0   560  and x5, x1, #0xfffffffffff00000
0x4cd382b4   564  ldr x0, [x5, #104]
0x4cd382b8   568  subs x0, x0, #0x1 (1)
0x4cd382bc   572  str x0, [x5, #104]
0x4cd382c0   576  b.mi #+0x64 (addr 0x4cd38324)
0x4cd382c4   580  ubfx x16, x1, #8, #12
0x4cd382c8   584  and x5, x1, #0xfffffffffff00000
0x4cd382cc   588  add x5, x5, x16, lsl #2
0x4cd382d0   592  ubfx x0, x1, #3, #5
0x4cd382d4   596  ldr x5, [x5, #360]
0x4cd382d8   600  lsr x5, x5, x0
0x4cd382dc   604  tbz w5, #0, #+0x8 (addr 0x4cd382e4)
0x4cd382e0   608  tbnz w5, #1, #+0xc (addr 0x4cd382ec)
0x4cd382e4   612  ldp x3, x0, [jssp], #16
0x4cd382e8   616  ret
0x4cd382ec   620  ldr x5, [x2]
0x4cd382f0   624  sub csp, jssp, #0x10 (16)
0x4cd382f4   628  stp x1, x2, [jssp, #-16]!
0x4cd382f8   632  ubfx x16, x5, #8, #12
0x4cd382fc   636  and x0, x5, #0xfffffffffff00000
0x4cd38300   640  add x0, x0, x16, lsl #2
0x4cd38304   644  ubfx x1, x5, #3, #5
0x4cd38308   648  ldr x2, [x0, #360]
0x4cd3830c   652  lsr x2, x2, x1
0x4cd38310   656  tbz w2, #0, #+0x10 (addr 0x4cd38320)
0x4cd38314   660  ldp x1, x2, [jssp], #16
0x4cd38318   664  ldp x3, x0, [jssp], #16
0x4cd3831c   668  ret
0x4cd38320   672  ldp x1, x2, [jssp], #16
0x4cd38324   676  sub csp, jssp, #0x78 (120)
0x4cd38328   680  stp x14, x15, [jssp, #-32]!
0x4cd3832c   684  stp x18, lr, [jssp, #16]
0x4cd38330   688  stp x10, x11, [jssp, #-32]!
0x4cd38334   692  stp x12, x13, [jssp, #16]
0x4cd38338   696  stp x6, x7, [jssp, #-32]!
0x4cd3833c   700  stp x8, x9, [jssp, #16]
0x4cd38340   704  stp x1, x2, [jssp, #-24]!
0x4cd38344   708  str x4, [jssp, #16]
0x4cd38348   712  sub csp, jssp, #0xb0 (176)
0x4cd3834c   716  stp d26, d27, [jssp, #-32]!
0x4cd38350   720  stp d28, d29, [jssp, #16]
0x4cd38354   724  stp d22, d23, [jssp, #-32]!
0x4cd38358   728  stp d24, d25, [jssp, #16]
0x4cd3835c   732  stp d18, d19, [jssp, #-32]!
0x4cd38360   736  stp d20, d21, [jssp, #16]
0x4cd38364   740  stp d6, d7, [jssp, #-32]!
0x4cd38368   744  stp d16, d17, [jssp, #16]
0x4cd3836c   748  stp d2, d3, [jssp, #-32]!
0x4cd38370   752  stp d4, d5, [jssp, #16]
0x4cd38374   756  stp d0, d1, [jssp, #-16]!
0x4cd38378   760  mov x0, x1
0x4cd3837c   764  mov x1, x2
0x4cd38380   768  ldr x2, pc+1056 (addr 0x000000004cd387a0)    ;; external reference (isolate)
0x4cd38384   772  ldr x16, pc+1060 (addr 0x000000004cd387a8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd38388   776  and csp, jssp, #0xfffffffffffffff0
0x4cd3838c   780  blr x16
0x4cd38390   784  ldp d2, d3, [jssp, #16]
0x4cd38394   788  ldp d0, d1, [jssp], #32
0x4cd38398   792  ldp d6, d7, [jssp, #16]
0x4cd3839c   796  ldp d4, d5, [jssp], #32
0x4cd383a0   800  ldp d18, d19, [jssp, #16]
0x4cd383a4   804  ldp d16, d17, [jssp], #32
0x4cd383a8   808  ldp d22, d23, [jssp, #16]
0x4cd383ac   812  ldp d20, d21, [jssp], #32
0x4cd383b0   816  ldp d26, d27, [jssp, #16]
0x4cd383b4   820  ldp d24, d25, [jssp], #32
0x4cd383b8   824  ldp d28, d29, [jssp], #16
0x4cd383bc   828  ldp x4, x6, [jssp, #16]
0x4cd383c0   832  ldp x1, x2, [jssp], #32
0x4cd383c4   836  ldp x9, x10, [jssp, #16]
0x4cd383c8   840  ldp x7, x8, [jssp], #32
0x4cd383cc   844  ldp x13, x14, [jssp, #16]
0x4cd383d0   848  ldp x11, x12, [jssp], #32
0x4cd383d4   852  ldr lr, [jssp, #16]
0x4cd383d8   856  ldp x15, x18, [jssp], #24
0x4cd383dc   860  ldp x3, x0, [jssp], #16
0x4cd383e0   864  ret
0x4cd383e4   868  sub csp, jssp, #0x10 (16)
0x4cd383e8   872  stp x3, x0, [jssp, #-16]!
0x4cd383ec   876  ldr x5, [x2]
0x4cd383f0   880  and x16, x5, #0xfffffffffff00000
0x4cd383f4   884  ldr x16, [x16, #8]
0x4cd383f8   888  tst x16, #0x18
0x4cd383fc   892  b.eq #+0x1f8 (addr 0x4cd385f4)
0x4cd38400   896  and x16, x1, #0xfffffffffff00000
0x4cd38404   900  ldr x16, [x16, #8]
0x4cd38408   904  tst x16, #0x18
0x4cd3840c   908  b.ne #+0x1e8 (addr 0x4cd385f4)
0x4cd38410   912  and x5, x1, #0xfffffffffff00000
0x4cd38414   916  ldr x0, [x5, #104]
0x4cd38418   920  subs x0, x0, #0x1 (1)
0x4cd3841c   924  str x0, [x5, #104]
0x4cd38420   928  b.mi #+0xe4 (addr 0x4cd38504)
0x4cd38424   932  ubfx x16, x1, #8, #12
0x4cd38428   936  and x5, x1, #0xfffffffffff00000
0x4cd3842c   940  add x5, x5, x16, lsl #2
0x4cd38430   944  ubfx x0, x1, #3, #5
0x4cd38434   948  ldr x5, [x5, #360]
0x4cd38438   952  lsr x5, x5, x0
0x4cd3843c   956  tbz w5, #0, #+0x8 (addr 0x4cd38444)
0x4cd38440   960  tbnz w5, #1, #+0x3c (addr 0x4cd3847c)
0x4cd38444   964  ldp x3, x0, [jssp], #16
0x4cd38448   968  ldr x16, pc+872 (addr 0x000000004cd387b0)    ;; external reference (store_buffer_top)
0x4cd3844c   972  ldr x5, [x16]
0x4cd38450   976  str x2, [x5], #8
0x4cd38454   980  str x5, [x16]
0x4cd38458   984  tst x5, #0x1ffff
0x4cd3845c   988  b.eq #+0x8 (addr 0x4cd38464)
0x4cd38460   992  ret
0x4cd38464   996  sub csp, jssp, #0x8 (8)
0x4cd38468  1000  str lr, [jssp, #-8]!
0x4cd3846c  1004  ldr x17, pc+844 (addr 0x000000004cd387b8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd38470  1008  blr x17
0x4cd38474  1012  ldr lr, [jssp], #8
0x4cd38478  1016  ret
0x4cd3847c  1020  ldr x5, [x2]
0x4cd38480  1024  and x0, x5, #0xfffffffffff00000
0x4cd38484  1028  ldr x0, [x0, #8]
0x4cd38488  1032  tbz w0, #6, #+0x18 (addr 0x4cd384a0)
0x4cd3848c  1036  and x0, x1, #0xfffffffffff00000
0x4cd38490  1040  ldr x0, [x0, #8]
0x4cd38494  1044  movz x16, #0x58
0x4cd38498  1048  tst x0, x16
0x4cd3849c  1052  b.eq #+0x68 (addr 0x4cd38504)
0x4cd384a0  1056  sub csp, jssp, #0x10 (16)
0x4cd384a4  1060  stp x1, x2, [jssp, #-16]!
0x4cd384a8  1064  ubfx x16, x5, #8, #12
0x4cd384ac  1068  and x0, x5, #0xfffffffffff00000
0x4cd384b0  1072  add x0, x0, x16, lsl #2
0x4cd384b4  1076  ubfx x1, x5, #3, #5
0x4cd384b8  1080  ldr x2, [x0, #360]
0x4cd384bc  1084  lsr x2, x2, x1
0x4cd384c0  1088  tbz w2, #0, #+0x40 (addr 0x4cd38500)
0x4cd384c4  1092  ldp x1, x2, [jssp], #16
0x4cd384c8  1096  ldp x3, x0, [jssp], #16
0x4cd384cc  1100  ldr x16, pc+756 (addr 0x000000004cd387c0)    ;; external reference (store_buffer_top)
0x4cd384d0  1104  ldr x5, [x16]
0x4cd384d4  1108  str x2, [x5], #8
0x4cd384d8  1112  str x5, [x16]
0x4cd384dc  1116  tst x5, #0x1ffff
0x4cd384e0  1120  b.eq #+0x8 (addr 0x4cd384e8)
0x4cd384e4  1124  ret
0x4cd384e8  1128  sub csp, jssp, #0x8 (8)
0x4cd384ec  1132  str lr, [jssp, #-8]!
0x4cd384f0  1136  ldr x17, pc+728 (addr 0x000000004cd387c8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd384f4  1140  blr x17
0x4cd384f8  1144  ldr lr, [jssp], #8
0x4cd384fc  1148  ret
0x4cd38500  1152  ldp x1, x2, [jssp], #16
0x4cd38504  1156  sub csp, jssp, #0x78 (120)
0x4cd38508  1160  stp x14, x15, [jssp, #-32]!
0x4cd3850c  1164  stp x18, lr, [jssp, #16]
0x4cd38510  1168  stp x10, x11, [jssp, #-32]!
0x4cd38514  1172  stp x12, x13, [jssp, #16]
0x4cd38518  1176  stp x6, x7, [jssp, #-32]!
0x4cd3851c  1180  stp x8, x9, [jssp, #16]
0x4cd38520  1184  stp x1, x2, [jssp, #-24]!
0x4cd38524  1188  str x4, [jssp, #16]
0x4cd38528  1192  sub csp, jssp, #0xb0 (176)
0x4cd3852c  1196  stp d26, d27, [jssp, #-32]!
0x4cd38530  1200  stp d28, d29, [jssp, #16]
0x4cd38534  1204  stp d22, d23, [jssp, #-32]!
0x4cd38538  1208  stp d24, d25, [jssp, #16]
0x4cd3853c  1212  stp d18, d19, [jssp, #-32]!
0x4cd38540  1216  stp d20, d21, [jssp, #16]
0x4cd38544  1220  stp d6, d7, [jssp, #-32]!
0x4cd38548  1224  stp d16, d17, [jssp, #16]
0x4cd3854c  1228  stp d2, d3, [jssp, #-32]!
0x4cd38550  1232  stp d4, d5, [jssp, #16]
0x4cd38554  1236  stp d0, d1, [jssp, #-16]!
0x4cd38558  1240  mov x0, x1
0x4cd3855c  1244  mov x1, x2
0x4cd38560  1248  ldr x2, pc+624 (addr 0x000000004cd387d0)    ;; external reference (isolate)
0x4cd38564  1252  ldr x16, pc+628 (addr 0x000000004cd387d8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd38568  1256  and csp, jssp, #0xfffffffffffffff0
0x4cd3856c  1260  blr x16
0x4cd38570  1264  ldp d2, d3, [jssp, #16]
0x4cd38574  1268  ldp d0, d1, [jssp], #32
0x4cd38578  1272  ldp d6, d7, [jssp, #16]
0x4cd3857c  1276  ldp d4, d5, [jssp], #32
0x4cd38580  1280  ldp d18, d19, [jssp, #16]
0x4cd38584  1284  ldp d16, d17, [jssp], #32
0x4cd38588  1288  ldp d22, d23, [jssp, #16]
0x4cd3858c  1292  ldp d20, d21, [jssp], #32
0x4cd38590  1296  ldp d26, d27, [jssp, #16]
0x4cd38594  1300  ldp d24, d25, [jssp], #32
0x4cd38598  1304  ldp d28, d29, [jssp], #16
0x4cd3859c  1308  ldp x4, x6, [jssp, #16]
0x4cd385a0  1312  ldp x1, x2, [jssp], #32
0x4cd385a4  1316  ldp x9, x10, [jssp, #16]
0x4cd385a8  1320  ldp x7, x8, [jssp], #32
0x4cd385ac  1324  ldp x13, x14, [jssp, #16]
0x4cd385b0  1328  ldp x11, x12, [jssp], #32
0x4cd385b4  1332  ldr lr, [jssp, #16]
0x4cd385b8  1336  ldp x15, x18, [jssp], #24
0x4cd385bc  1340  ldp x3, x0, [jssp], #16
0x4cd385c0  1344  ldr x16, pc+544 (addr 0x000000004cd387e0)    ;; external reference (store_buffer_top)
0x4cd385c4  1348  ldr x5, [x16]
0x4cd385c8  1352  str x2, [x5], #8
0x4cd385cc  1356  str x5, [x16]
0x4cd385d0  1360  tst x5, #0x1ffff
0x4cd385d4  1364  b.eq #+0x8 (addr 0x4cd385dc)
0x4cd385d8  1368  ret
0x4cd385dc  1372  sub csp, jssp, #0x8 (8)
0x4cd385e0  1376  str lr, [jssp, #-8]!
0x4cd385e4  1380  ldr x17, pc+516 (addr 0x000000004cd387e8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd385e8  1384  blr x17
0x4cd385ec  1388  ldr lr, [jssp], #8
0x4cd385f0  1392  ret
0x4cd385f4  1396  and x5, x1, #0xfffffffffff00000
0x4cd385f8  1400  ldr x0, [x5, #104]
0x4cd385fc  1404  subs x0, x0, #0x1 (1)
0x4cd38600  1408  str x0, [x5, #104]
0x4cd38604  1412  b.mi #+0x84 (addr 0x4cd38688)
0x4cd38608  1416  ubfx x16, x1, #8, #12
0x4cd3860c  1420  and x5, x1, #0xfffffffffff00000
0x4cd38610  1424  add x5, x5, x16, lsl #2
0x4cd38614  1428  ubfx x0, x1, #3, #5
0x4cd38618  1432  ldr x5, [x5, #360]
0x4cd3861c  1436  lsr x5, x5, x0
0x4cd38620  1440  tbz w5, #0, #+0x8 (addr 0x4cd38628)
0x4cd38624  1444  tbnz w5, #1, #+0xc (addr 0x4cd38630)
0x4cd38628  1448  ldp x3, x0, [jssp], #16
0x4cd3862c  1452  ret
0x4cd38630  1456  ldr x5, [x2]
0x4cd38634  1460  and x0, x5, #0xfffffffffff00000
0x4cd38638  1464  ldr x0, [x0, #8]
0x4cd3863c  1468  tbz w0, #6, #+0x18 (addr 0x4cd38654)
0x4cd38640  1472  and x0, x1, #0xfffffffffff00000
0x4cd38644  1476  ldr x0, [x0, #8]
0x4cd38648  1480  movz x16, #0x58
0x4cd3864c  1484  tst x0, x16
0x4cd38650  1488  b.eq #+0x38 (addr 0x4cd38688)
0x4cd38654  1492  sub csp, jssp, #0x10 (16)
0x4cd38658  1496  stp x1, x2, [jssp, #-16]!
0x4cd3865c  1500  ubfx x16, x5, #8, #12
0x4cd38660  1504  and x0, x5, #0xfffffffffff00000
0x4cd38664  1508  add x0, x0, x16, lsl #2
0x4cd38668  1512  ubfx x1, x5, #3, #5
0x4cd3866c  1516  ldr x2, [x0, #360]
0x4cd38670  1520  lsr x2, x2, x1
0x4cd38674  1524  tbz w2, #0, #+0x10 (addr 0x4cd38684)
0x4cd38678  1528  ldp x1, x2, [jssp], #16
0x4cd3867c  1532  ldp x3, x0, [jssp], #16
0x4cd38680  1536  ret
0x4cd38684  1540  ldp x1, x2, [jssp], #16
0x4cd38688  1544  sub csp, jssp, #0x78 (120)
0x4cd3868c  1548  stp x14, x15, [jssp, #-32]!
0x4cd38690  1552  stp x18, lr, [jssp, #16]
0x4cd38694  1556  stp x10, x11, [jssp, #-32]!
0x4cd38698  1560  stp x12, x13, [jssp, #16]
0x4cd3869c  1564  stp x6, x7, [jssp, #-32]!
0x4cd386a0  1568  stp x8, x9, [jssp, #16]
0x4cd386a4  1572  stp x1, x2, [jssp, #-24]!
0x4cd386a8  1576  str x4, [jssp, #16]
0x4cd386ac  1580  sub csp, jssp, #0xb0 (176)
0x4cd386b0  1584  stp d26, d27, [jssp, #-32]!
0x4cd386b4  1588  stp d28, d29, [jssp, #16]
0x4cd386b8  1592  stp d22, d23, [jssp, #-32]!
0x4cd386bc  1596  stp d24, d25, [jssp, #16]
0x4cd386c0  1600  stp d18, d19, [jssp, #-32]!
0x4cd386c4  1604  stp d20, d21, [jssp, #16]
0x4cd386c8  1608  stp d6, d7, [jssp, #-32]!
0x4cd386cc  1612  stp d16, d17, [jssp, #16]
0x4cd386d0  1616  stp d2, d3, [jssp, #-32]!
0x4cd386d4  1620  stp d4, d5, [jssp, #16]
0x4cd386d8  1624  stp d0, d1, [jssp, #-16]!
0x4cd386dc  1628  mov x0, x1
0x4cd386e0  1632  mov x1, x2
0x4cd386e4  1636  ldr x2, pc+268 (addr 0x000000004cd387f0)    ;; external reference (isolate)
0x4cd386e8  1640  ldr x16, pc+272 (addr 0x000000004cd387f8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd386ec  1644  and csp, jssp, #0xfffffffffffffff0
0x4cd386f0  1648  blr x16
0x4cd386f4  1652  ldp d2, d3, [jssp, #16]
0x4cd386f8  1656  ldp d0, d1, [jssp], #32
0x4cd386fc  1660  ldp d6, d7, [jssp, #16]
0x4cd38700  1664  ldp d4, d5, [jssp], #32
0x4cd38704  1668  ldp d18, d19, [jssp, #16]
0x4cd38708  1672  ldp d16, d17, [jssp], #32
0x4cd3870c  1676  ldp d22, d23, [jssp, #16]
0x4cd38710  1680  ldp d20, d21, [jssp], #32
0x4cd38714  1684  ldp d26, d27, [jssp, #16]
0x4cd38718  1688  ldp d24, d25, [jssp], #32
0x4cd3871c  1692  ldp d28, d29, [jssp], #16
0x4cd38720  1696  ldp x4, x6, [jssp, #16]
0x4cd38724  1700  ldp x1, x2, [jssp], #32
0x4cd38728  1704  ldp x9, x10, [jssp, #16]
0x4cd3872c  1708  ldp x7, x8, [jssp], #32
0x4cd38730  1712  ldp x13, x14, [jssp, #16]
0x4cd38734  1716  ldp x11, x12, [jssp], #32
0x4cd38738  1720  ldr lr, [jssp, #16]
0x4cd3873c  1724  ldp x15, x18, [jssp], #24
0x4cd38740  1728  ldp x3, x0, [jssp], #16
0x4cd38744  1732  ret
0x4cd38748  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd3874c  1740  d63f03e0       constant
0x4cd38750  1744  166dd8c0       constant
0x4cd38754  1748  00000000       constant
0x4cd38758  1752  4cd065a0       constant
0x4cd3875c  1756  00000000       constant
0x4cd38760  1760  166dd8c0       constant
0x4cd38764  1764  00000000       constant
0x4cd38768  1768  4cd065a0       constant
0x4cd3876c  1772  00000000       constant
0x4cd38770  1776  166dd8c0       constant
0x4cd38774  1780  00000000       constant
0x4cd38778  1784  4cd065a0       constant
0x4cd3877c  1788  00000000       constant
0x4cd38780  1792  166dc2d0       constant
0x4cd38784  1796  00000000       constant
0x4cd38788  1800  00c2d958       constant
0x4cd3878c  1804  00000000       constant
0x4cd38790  1808  166dd8c0       constant
0x4cd38794  1812  00000000       constant
0x4cd38798  1816  4cd065a0       constant
0x4cd3879c  1820  00000000       constant
0x4cd387a0  1824  166dc2d0       constant
0x4cd387a4  1828  00000000       constant
0x4cd387a8  1832  00c2d958       constant
0x4cd387ac  1836  00000000       constant
0x4cd387b0  1840  166dd8c0       constant
0x4cd387b4  1844  00000000       constant
0x4cd387b8  1848  4cd065a0       constant
0x4cd387bc  1852  00000000       constant
0x4cd387c0  1856  166dd8c0       constant
0x4cd387c4  1860  00000000       constant
0x4cd387c8  1864  4cd065a0       constant
0x4cd387cc  1868  00000000       constant
0x4cd387d0  1872  166dc2d0       constant
0x4cd387d4  1876  00000000       constant
0x4cd387d8  1880  00c2d958       constant
0x4cd387dc  1884  00000000       constant
0x4cd387e0  1888  166dd8c0       constant
0x4cd387e4  1892  00000000       constant
0x4cd387e8  1896  4cd065a0       constant
0x4cd387ec  1900  00000000       constant
0x4cd387f0  1904  166dc2d0       constant
0x4cd387f4  1908  00000000       constant
0x4cd387f8  1912  00c2d958       constant
0x4cd387fc  1916  00000000       constant


RelocInfo (size = 65)
0x4cd38088  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd380ac  code target (STUB)  (0x4cd065a0)
0x4cd38124  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd38148  code target (STUB)  (0x4cd065a0)
0x4cd38188  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd381ac  code target (STUB)  (0x4cd065a0)
0x4cd3821c  external reference (isolate)  (0x166dc2d0)
0x4cd38220  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd3827c  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd382a0  code target (STUB)  (0x4cd065a0)
0x4cd38380  external reference (isolate)  (0x166dc2d0)
0x4cd38384  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd38448  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd3846c  code target (STUB)  (0x4cd065a0)
0x4cd384cc  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd384f0  code target (STUB)  (0x4cd065a0)
0x4cd38560  external reference (isolate)  (0x166dc2d0)
0x4cd38564  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd385c0  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd385e4  code target (STUB)  (0x4cd065a0)
0x4cd386e4  external reference (isolate)  (0x166dc2d0)
0x4cd386e8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd38748  constant pool (size 184)


kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0x4cd38860     0  ldur x6, [x1, #7]
0x4cd38864     4  ldur w7, [x6, #11]
0x4cd38868     8  adds w8, w7, #0x3 (3)
0x4cd3886c    12  b.vs #+0x1dc (addr 0x4cd38a48)
0x4cd38870    16  movz w16, #0x95ff
0x4cd38874    20  cmp w8, w16, lsl #1
0x4cd38878    24  b.hs #+0x1e0 (addr 0x4cd38a58)
0x4cd3887c    28  lsl x9, x8, #32
0x4cd38880    32  lsl w10, w8, #3
0x4cd38884    36  add w10, w10, #0x10 (16)
0x4cd38888    40  sxtw x10, w10
0x4cd3888c    44  movz x11, #0xd2c0
0x4cd38890    48  movk x11, #0x166d, lsl #16
0x4cd38894    52  ldp x13, x16, [x11]
0x4cd38898    56  adds x12, x13, x10
0x4cd3889c    60  ccmp x12, x16, #nzCv, lo
0x4cd388a0    64  b.hi #+0xf8 (addr 0x4cd38998)
0x4cd388a4    68  str x12, [x11]
0x4cd388a8    72  orr x13, x13, #0x1
0x4cd388ac    76  ldr x10, pc+348 (addr 0x000000004cd38a08)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd388b0    80  stur x10, [x13, #-1]
0x4cd388b4    84  stur x9, [x13, #7]
0x4cd388b8    88  cmp w7, w8
0x4cd388bc    92  b.ge #+0x18 (addr 0x4cd388d4)
0x4cd388c0    96  sub w8, w8, #0x1 (1)
0x4cd388c4   100  ldr x9, pc+332 (addr 0x000000004cd38a10)    ;; object: 0x21004241 <undefined>
0x4cd388c8   104  add x10, x13, #0xf (15)
0x4cd388cc   108  str x9, [x10, w8, sxtw #3]
0x4cd388d0   112  b #-0x18 (addr 0x4cd388b8)
0x4cd388d4   116  cmp w7, #0x0 (0)
0x4cd388d8   120  b.le #+0x1c (addr 0x4cd388f4)
0x4cd388dc   124  sub w7, w7, #0x1 (1)
0x4cd388e0   128  add x8, x6, #0xf (15)
0x4cd388e4   132  ldr x9, [x8, w7, sxtw #3]
0x4cd388e8   136  add x8, x13, #0xf (15)
0x4cd388ec   140  str x9, [x8, w7, sxtw #3]
0x4cd388f0   144  b #-0x1c (addr 0x4cd388d4)
0x4cd388f4   148  stur x13, [x1, #7]
0x4cd388f8   152  add x6, x1, #0x7 (7)
0x4cd388fc   156  and x13, x1, #0xfffffffffff00000
0x4cd38900   160  ldr x13, [x13, #8]
0x4cd38904   164  tbz w13, #2, #+0x18 (addr 0x4cd3891c)
0x4cd38908   168  sub csp, jssp, #0x8 (8)
0x4cd3890c   172  str lr, [jssp, #-8]!
0x4cd38910   176  ldr x16, pc+264 (addr 0x000000004cd38a18)    ;; code: STUB, RecordWriteStub, minor: 72097
0x4cd38914   180  blr x16
0x4cd38918   184  ldr lr, [jssp], #8
0x4cd3891c   188  tbz w0, #0, #+0x14c (addr 0x4cd38a68)
0x4cd38920   192  mov x2, x0
0x4cd38924   196  ldur x4, [x1, #7]
0x4cd38928   200  stur x2, [x4, #15]
0x4cd3892c   204  add x3, x4, #0xf (15)
0x4cd38930   208  and x2, x2, #0xfffffffffff00000
0x4cd38934   212  ldr x2, [x2, #8]
0x4cd38938   216  tbz w2, #1, #+0x24 (addr 0x4cd3895c)
0x4cd3893c   220  and x2, x4, #0xfffffffffff00000
0x4cd38940   224  ldr x2, [x2, #8]
0x4cd38944   228  tbz w2, #2, #+0x18 (addr 0x4cd3895c)
0x4cd38948   232  sub csp, jssp, #0x8 (8)
0x4cd3894c   236  str lr, [jssp, #-8]!
0x4cd38950   240  ldr x16, pc+208 (addr 0x000000004cd38a20)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cd38954   244  blr x16
0x4cd38958   248  ldr lr, [jssp], #8
0x4cd3895c   252  stur x5, [x1, #-1]
0x4cd38960   256  tbz w5, #0, #+0x34 (addr 0x4cd38994)
0x4cd38964   260  sub x2, x1, #0x1 (1)
0x4cd38968   264  and x5, x5, #0xfffffffffff00000
0x4cd3896c   268  ldr x5, [x5, #8]
0x4cd38970   272  tbz w5, #1, #+0x24 (addr 0x4cd38994)
0x4cd38974   276  and x5, x1, #0xfffffffffff00000
0x4cd38978   280  ldr x5, [x5, #8]
0x4cd3897c   284  tbz w5, #2, #+0x18 (addr 0x4cd38994)
0x4cd38980   288  sub csp, jssp, #0x8 (8)
0x4cd38984   292  str lr, [jssp, #-8]!
0x4cd38988   296  ldr x16, pc+160 (addr 0x000000004cd38a28)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd3898c   300  blr x16
0x4cd38990   304  ldr lr, [jssp], #8
0x4cd38994   308  ret
0x4cd38998   312  sub csp, jssp, #0x10 (16)
0x4cd3899c   316  stp fp, lr, [jssp, #-16]!
0x4cd389a0   320  movz fp, #0xa00000000
0x4cd389a4   324  sub csp, jssp, #0x8 (8)
0x4cd389a8   328  str fp, [jssp, #-8]!
0x4cd389ac   332  add fp, jssp, #0x8 (8)
0x4cd389b0   336  movz x13, #0x0
0x4cd389b4   340  mov x16, lr
0x4cd389b8   344  ldr x17, pc+120 (addr 0x000000004cd38a30)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd389bc   348  blr x17
0x4cd389c0   352  lsl x0, x10, #32
0x4cd389c4   356  movz x10, #0x0
0x4cd389c8   360  sub csp, jssp, #0x10 (16)
0x4cd389cc   364  stp x10, x0, [jssp, #-16]!
0x4cd389d0   368  movz x0, #0x2
0x4cd389d4   372  movz x1, #0x5b88
0x4cd389d8   376  movk x1, #0xe2, lsl #16
0x4cd389dc   380  ldr x16, pc+92 (addr 0x000000004cd38a38)    ;; code: STUB, CEntryStub, minor: 5
0x4cd389e0   384  blr x16
0x4cd389e4   388  str x0, [jssp, #104]
0x4cd389e8   392  ldr x16, pc+88 (addr 0x000000004cd38a40)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd389ec   396  blr x16
0x4cd389f0   400  ldr lr, [jssp, #16]
0x4cd389f4   404  ldp xzr, fp, [jssp], #24
0x4cd389f8   408  b #-0x14c (addr 0x4cd388ac)
0x4cd389fc   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0x4cd38a00   416  d63f03e0       constant
0x4cd38a04   420  d503201f       constant
0x4cd38a08   424  2a804259       constant
0x4cd38a0c   428  00000000       constant
0x4cd38a10   432  21004241       constant
0x4cd38a14   436  00000000       constant
0x4cd38a18   440  4cd370c0       constant
0x4cd38a1c   444  00000000       constant
0x4cd38a20   448  4cd378a0       constant
0x4cd38a24   452  00000000       constant
0x4cd38a28   456  4cd38080       constant
0x4cd38a2c   460  00000000       constant
0x4cd38a30   464  4cd06820       constant
0x4cd38a34   468  00000000       constant
0x4cd38a38   472  4cd06260       constant
0x4cd38a3c   476  00000000       constant
0x4cd38a40   480  4cd068e0       constant
0x4cd38a44   484  00000000       constant
0x4cd38a48   488  movz x16, #0x0
0x4cd38a4c   492  sub csp, jssp, #0x10 (16)
0x4cd38a50   496  stp fp, lr, [jssp, #-16]!
0x4cd38a54   500  bl #+0x24 (addr 0x4cd38a78)
0x4cd38a58   504  movz x16, #0x8
0x4cd38a5c   508  sub csp, jssp, #0x10 (16)
0x4cd38a60   512  stp fp, lr, [jssp, #-16]!
0x4cd38a64   516  bl #+0x14 (addr 0x4cd38a78)
0x4cd38a68   520  movz x16, #0x10
0x4cd38a6c   524  sub csp, jssp, #0x10 (16)
0x4cd38a70   528  stp fp, lr, [jssp, #-16]!
0x4cd38a74   532  bl #+0x4 (addr 0x4cd38a78)
0x4cd38a78   536  movz x17, #0xa00000000
0x4cd38a7c   540  sub csp, jssp, #0x10 (16)
0x4cd38a80   544  stp x17, cp, [jssp, #-16]!
0x4cd38a84   548  add fp, jssp, #0x10 (16)
0x4cd38a88   552  ldr x17, pc+24 (addr 0x000000004cd38aa0)    ;; lazy deoptimization bailout 0
0x4cd38a8c   556  add x17, x17, x16
0x4cd38a90   560  br x17
0x4cd38a94   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd38a98   568  d63f03e0       constant
0x4cd38a9c   572  d503201f       constant
0x4cd38aa0   576  4cb06000       constant
0x4cd38aa4   580  00000000       constant


Safepoints (size = 21)
0x4cd389e4   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0x4cd388ac  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd388c4  embedded object  (0x21004241 <undefined>)
0x4cd38910  code target (STUB)  (0x4cd370c0)
0x4cd38950  code target (STUB)  (0x4cd378a0)
0x4cd38988  code target (STUB)  (0x4cd38080)
0x4cd389b8  code target (STUB)  (0x4cd06820)
0x4cd389dc  code target (STUB)  (0x4cd06260)
0x4cd389e8  code target (STUB)  (0x4cd068e0)
0x4cd389fc  constant pool (size 76)
0x4cd38a88  runtime entry
0x4cd38a94  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = next
compiler = unknown
Instructions (size = 152)
0x4cd38b20     0  sub csp, jssp, #0x8 (8)
0x4cd38b24     4  str x3, [jssp, #-8]!
0x4cd38b28     8  sub csp, jssp, #0x8 (8)
0x4cd38b2c    12  str x4, [jssp, #-8]!
0x4cd38b30    16  ldr x3, pc+88 (addr 0x000000004cd38b88)    ;; object: 0x21057a89 Cell for 0
0x4cd38b34    20  ldur x3, [x3, #7]
0x4cd38b38    24  cmp x3, #0x0 (0)
0x4cd38b3c    28  b.ne #+0x30 (addr 0x4cd38b6c)
0x4cd38b40    32  tbz w0, #0, #+0x2c (addr 0x4cd38b6c)
0x4cd38b44    36  ldr x5, pc+76 (addr 0x000000004cd38b90)    ;; object: 0x21057a99 WeakCell for 0x2a80b581 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd38b48    40  ldur x5, [x5, #7]
0x4cd38b4c    44  tbz w5, #0, #+0x20 (addr 0x4cd38b6c)
0x4cd38b50    48  ldursw x4, [x5, #15]
0x4cd38b54    52  tbnz w4, #23, #+0x18 (addr 0x4cd38b6c)
0x4cd38b58    56  ldr x4, [jssp], #8
0x4cd38b5c    60  ldr x3, [jssp], #8
0x4cd38b60    64  ldr x2, pc+56 (addr 0x000000004cd38b98)    ;; object: 0x21005209 <String[4]: next>
0x4cd38b64    68  ldr x16, pc+60 (addr 0x000000004cd38ba0)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0x4cd38b68    72  br x16
0x4cd38b6c    76  ldr x2, pc+60 (addr 0x000000004cd38ba8)    ;; object: 0x21005209 <String[4]: next>
0x4cd38b70    80  ldr x4, [jssp], #8
0x4cd38b74    84  ldr x3, [jssp], #8
0x4cd38b78    88  ldr x16, pc+56 (addr 0x000000004cd38bb0)    ;; code: BUILTIN
0x4cd38b7c    92  br x16
0x4cd38b80    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd38b84   100  d63f03e0       constant
0x4cd38b88   104  21057a89       constant
0x4cd38b8c   108  00000000       constant
0x4cd38b90   112  21057a99       constant
0x4cd38b94   116  00000000       constant
0x4cd38b98   120  21005209       constant
0x4cd38b9c   124  00000000       constant
0x4cd38ba0   128  4cd38860       constant
0x4cd38ba4   132  00000000       constant
0x4cd38ba8   136  21005209       constant
0x4cd38bac   140  00000000       constant
0x4cd38bb0   144  4cd22420       constant
0x4cd38bb4   148  00000000       constant


RelocInfo (size = 12)
0x4cd38b30  embedded object  (0x21057a89 Cell for 0)
0x4cd38b44  embedded object  (0x21057a99 WeakCell for 0x2a80b581 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd38b60  embedded object  (0x21005209 <String[4]: next>)
0x4cd38b64  code target (HANDLER)  (0x4cd38860)
0x4cd38b6c  embedded object  (0x21005209 <String[4]: next>)
0x4cd38b78  code target (BUILTIN)  (0x4cd22420)
0x4cd38b80  constant pool (size 56)

kind = COMPARE_IC
major_key = CompareICStub
ic_state = UNINITIALIZED
extra_ic_state = 0
compare_state = UNINITIALIZED*UNINITIALIZED -> UNINITIALIZED
compare_operation = LT
name = CompareICStub
compiler = unknown
Instructions (size = 136)
0x4cd38c20     0  movz x16, #0xc00000000
0x4cd38c24     4  sub csp, jssp, #0x10 (16)
0x4cd38c28     8  stp fp, lr, [jssp, #-16]!
0x4cd38c2c    12  sub csp, jssp, #0x10 (16)
0x4cd38c30    16  str x16, [jssp, #-8]!
0x4cd38c34    20  ldr x17, pc+92 (addr 0x000000004cd38c90)    ;; object: 0x4cd38bc1 <Code: COMPARE_IC>
0x4cd38c38    24  sub csp, jssp, #0x10 (16)
0x4cd38c3c    28  str x17, [jssp, #-8]!
0x4cd38c40    32  add fp, jssp, #0x10 (16)
0x4cd38c44    36  sub csp, jssp, #0x18 (24)
0x4cd38c48    40  stp lr, x0, [jssp, #-24]!
0x4cd38c4c    44  str x1, [jssp, #16]
0x4cd38c50    48  movz x10, #0x3100000000
0x4cd38c54    52  sub csp, jssp, #0x18 (24)
0x4cd38c58    56  stp x10, x0, [jssp, #-24]!
0x4cd38c5c    60  str x1, [jssp, #16]
0x4cd38c60    64  movz x0, #0x3
0x4cd38c64    68  ldr x1, pc+52 (addr 0x000000004cd38c98)    ;; external reference (Runtime::CompareIC_Miss)
0x4cd38c68    72  ldr x16, pc+56 (addr 0x000000004cd38ca0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd38c6c    76  blr x16
0x4cd38c70    80  add x11, x0, #0x5f (95)
0x4cd38c74    84  ldr x1, [jssp, #16]
0x4cd38c78    88  ldp lr, x0, [jssp], #24
0x4cd38c7c    92  mov jssp, fp
0x4cd38c80    96  ldp fp, lr, [jssp], #16
0x4cd38c84   100  br x11
0x4cd38c88   104  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd38c8c   108  d63f03e0       constant
0x4cd38c90   112  4cd38bc1       constant
0x4cd38c94   116  00000000       constant
0x4cd38c98   120  00c8a980       constant
0x4cd38c9c   124  00000000       constant
0x4cd38ca0   128  4cd06060       constant
0x4cd38ca4   132  00000000       constant


RelocInfo (size = 10)
0x4cd38c34  embedded object  (0x4cd38bc1 <Code: COMPARE_IC>)
0x4cd38c64  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cd38c68  code target (STUB)  (0x4cd06060)
0x4cd38c88  constant pool (size 32)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = SMI*SMI -> SMI
compare_operation = LT
name = CompareICStub
compiler = unknown
Instructions (size = 160)
0x4cd39120     0  orr x16, x0, x1
0x4cd39124     4  tbnz w16, #0, #+0x10 (addr 0x4cd39134)
0x4cd39128     8  asr x1, x1, #32
0x4cd3912c    12  sub x0, x1, x0, asr #32
0x4cd39130    16  ret
0x4cd39134    20  movz x16, #0xc00000000
0x4cd39138    24  sub csp, jssp, #0x10 (16)
0x4cd3913c    28  stp fp, lr, [jssp, #-16]!
0x4cd39140    32  sub csp, jssp, #0x10 (16)
0x4cd39144    36  str x16, [jssp, #-8]!
0x4cd39148    40  ldr x17, pc+96 (addr 0x000000004cd391a8)    ;; object: 0x4cd390c1 <Code: COMPARE_IC>
0x4cd3914c    44  sub csp, jssp, #0x10 (16)
0x4cd39150    48  str x17, [jssp, #-8]!
0x4cd39154    52  add fp, jssp, #0x10 (16)
0x4cd39158    56  sub csp, jssp, #0x18 (24)
0x4cd3915c    60  stp lr, x0, [jssp, #-24]!
0x4cd39160    64  str x1, [jssp, #16]
0x4cd39164    68  movz x10, #0x3100000000
0x4cd39168    72  sub csp, jssp, #0x18 (24)
0x4cd3916c    76  stp x10, x0, [jssp, #-24]!
0x4cd39170    80  str x1, [jssp, #16]
0x4cd39174    84  movz x0, #0x3
0x4cd39178    88  ldr x1, pc+56 (addr 0x000000004cd391b0)    ;; external reference (Runtime::CompareIC_Miss)
0x4cd3917c    92  ldr x16, pc+60 (addr 0x000000004cd391b8)    ;; code: STUB, CEntryStub, minor: 4
0x4cd39180    96  blr x16
0x4cd39184   100  add x11, x0, #0x5f (95)
0x4cd39188   104  ldr x1, [jssp, #16]
0x4cd3918c   108  ldp lr, x0, [jssp], #24
0x4cd39190   112  mov jssp, fp
0x4cd39194   116  ldp fp, lr, [jssp], #16
0x4cd39198   120  br x11
0x4cd3919c   124  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd391a0   128  d63f03e0       constant
0x4cd391a4   132  d503201f       constant
0x4cd391a8   136  4cd390c1       constant
0x4cd391ac   140  00000000       constant
0x4cd391b0   144  00c8a980       constant
0x4cd391b4   148  00000000       constant
0x4cd391b8   152  4cd06060       constant
0x4cd391bc   156  00000000       constant


RelocInfo (size = 10)
0x4cd39148  embedded object  (0x4cd390c1 <Code: COMPARE_IC>)
0x4cd39178  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cd3917c  code target (STUB)  (0x4cd06060)
0x4cd3919c  constant pool (size 36)


kind = HANDLER
major_key = LoadFastElementStub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 168)
0x4cd39220     0  ldur x4, [x1, #15]
0x4cd39224     4  ldur w5, [x1, #27]
0x4cd39228     8  tbnz w2, #0, #+0x20 (addr 0x4cd39248)
0x4cd3922c    12  asr x7, x2, #32
0x4cd39230    16  cmp w7, w5
0x4cd39234    20  b.hs #+0x3c (addr 0x4cd39270)
0x4cd39238    24  add x0, x4, #0xf (15)
0x4cd3923c    28  ldr x1, [x0, w7, sxtw #3]
0x4cd39240    32  mov x0, x1
0x4cd39244    36  ret
0x4cd39248    40  ldur x16, [x2, #-1]
0x4cd3924c    44  ldr x17, [x26, #120]
0x4cd39250    48  cmp x16, x17
0x4cd39254    52  b.ne #+0x2c (addr 0x4cd39280)
0x4cd39258    56  ldur d29, [x2, #7]
0x4cd3925c    60  fcvtzs w7, d29
0x4cd39260    64  scvtf d0, w7
0x4cd39264    68  fcmp d29, d0
0x4cd39268    72  b.ne #+0x18 (addr 0x4cd39280)
0x4cd3926c    76  b #-0x3c (addr 0x4cd39230)
0x4cd39270    80  movz x16, #0x0
0x4cd39274    84  sub csp, jssp, #0x10 (16)
0x4cd39278    88  stp fp, lr, [jssp, #-16]!
0x4cd3927c    92  bl #+0x14 (addr 0x4cd39290)
0x4cd39280    96  movz x16, #0x8
0x4cd39284   100  sub csp, jssp, #0x10 (16)
0x4cd39288   104  stp fp, lr, [jssp, #-16]!
0x4cd3928c   108  bl #+0x4 (addr 0x4cd39290)
0x4cd39290   112  movz x17, #0xa00000000
0x4cd39294   116  sub csp, jssp, #0x10 (16)
0x4cd39298   120  stp x17, cp, [jssp, #-16]!
0x4cd3929c   124  add fp, jssp, #0x10 (16)
0x4cd392a0   128  ldr x17, pc+24 (addr 0x000000004cd392b8)    ;; lazy deoptimization bailout 0
0x4cd392a4   132  add x17, x17, x16
0x4cd392a8   136  br x17
0x4cd392ac   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd392b0   144  d63f03e0       constant
0x4cd392b4   148  d503201f       constant
0x4cd392b8   152  4cb06000       constant
0x4cd392bc   156  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd392a0  runtime entry
0x4cd392ac  constant pool (size 20)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0x4cd39340     0  ldur x0, [x1, #23]
0x4cd39344     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 393218
name = CallICStub(args(2), ANY, 
compiler = unknown
Instructions (size = 488)
0x4cd393c0     0  add x4, x2, x3, asr #29
0x4cd393c4     4  ldur x4, [x4, #15]
0x4cd393c8     8  ldur x5, [x4, #7]
0x4cd393cc    12  cmp x5, x1
0x4cd393d0    16  b.ne #+0x2c (addr 0x4cd393fc)
0x4cd393d4    20  tbz w1, #0, #+0x28 (addr 0x4cd393fc)
0x4cd393d8    24  add x2, x2, x3, asr #29
0x4cd393dc    28  add x2, x2, #0x18 (24)
0x4cd393e0    32  ldur x3, [x2, #-1]
0x4cd393e4    36  movz x16, #0x200000000
0x4cd393e8    40  add x3, x3, x16
0x4cd393ec    44  stur x3, [x2, #-1]
0x4cd393f0    48  movz x0, #0x2
0x4cd393f4    52  ldr x16, pc+372 (addr 0x000000004cd39568)    ;; code: BUILTIN
0x4cd393f8    56  br x16
0x4cd393fc    60  ldr x16, [x26, #2400]
0x4cd39400    64  cmp x4, x16
0x4cd39404    68  b.eq #+0x78 (addr 0x4cd3947c)
0x4cd39408    72  ldur x5, [x4, #-1]
0x4cd3940c    76  ldr x16, [x26, #2736]
0x4cd39410    80  cmp x5, x16
0x4cd39414    84  b.ne #+0x40 (addr 0x4cd39454)
0x4cd39418    88  ldur x5, [cp, #39]
0x4cd3941c    92  ldur x5, [x5, #95]
0x4cd39420    96  cmp x1, x5
0x4cd39424   100  b.ne #+0xec (addr 0x4cd39510)
0x4cd39428   104  movz x0, #0x2
0x4cd3942c   108  add x2, x2, x3, asr #29
0x4cd39430   112  add x2, x2, #0x18 (24)
0x4cd39434   116  ldur x3, [x2, #-1]
0x4cd39438   120  movz x16, #0x200000000
0x4cd3943c   124  add x3, x3, x16
0x4cd39440   128  stur x3, [x2, #-1]
0x4cd39444   132  mov x2, x4
0x4cd39448   136  mov x3, x1
0x4cd3944c   140  ldr x16, pc+292 (addr 0x000000004cd39570)    ;; code: STUB, ArrayConstructorStub, minor: 3
0x4cd39450   144  br x16
0x4cd39454   148  ldr x16, [x26, #2568]
0x4cd39458   152  cmp x4, x16
0x4cd3945c   156  b.eq #+0xb4 (addr 0x4cd39510)
0x4cd39460   160  ldur x5, [x4, #-1]
0x4cd39464   164  ldrb w5, [x5, #11]
0x4cd39468   168  cmp x5, #0xc9 (201)
0x4cd3946c   172  b.ne #+0xa4 (addr 0x4cd39510)
0x4cd39470   176  add x4, x2, x3, asr #29
0x4cd39474   180  ldr x5, [x26, #2400]
0x4cd39478   184  stur x5, [x4, #15]
0x4cd3947c   188  movz x0, #0x2
0x4cd39480   192  ldr x16, pc+248 (addr 0x000000004cd39578)    ;; code: BUILTIN
0x4cd39484   196  br x16
0x4cd39488   200  tbz w1, #0, #+0x88 (addr 0x4cd39510)
0x4cd3948c   204  ldur x5, [x1, #-1]
0x4cd39490   208  ldrb w5, [x5, #11]
0x4cd39494   212  cmp x5, #0xc9 (201)
0x4cd39498   216  b.ne #+0x78 (addr 0x4cd39510)
0x4cd3949c   220  ldur x5, [cp, #39]
0x4cd394a0   224  ldur x5, [x5, #95]
0x4cd394a4   228  cmp x1, x5
0x4cd394a8   232  b.eq #+0x68 (addr 0x4cd39510)
0x4cd394ac   236  ldur x4, [x1, #39]
0x4cd394b0   240  ldur x4, [x4, #39]
0x4cd394b4   244  ldur x5, [cp, #39]
0x4cd394b8   248  cmp x4, x5
0x4cd394bc   252  b.ne #+0x54 (addr 0x4cd39510)
0x4cd394c0   256  movz x5, #0x200000000
0x4cd394c4   260  adds x4, x2, x3, asr #29
0x4cd394c8   264  stur x5, [x4, #23]
0x4cd394cc   268  movz x16, #0xc00000000
0x4cd394d0   272  sub csp, jssp, #0x10 (16)
0x4cd394d4   276  stp fp, lr, [jssp, #-16]!
0x4cd394d8   280  sub csp, jssp, #0x10 (16)
0x4cd394dc   284  str x16, [jssp, #-8]!
0x4cd394e0   288  ldr x17, pc+160 (addr 0x000000004cd39580)    ;; object: 0x4cd39361 <Code: CALL_IC>
0x4cd394e4   292  sub csp, jssp, #0x10 (16)
0x4cd394e8   296  str x17, [jssp, #-8]!
0x4cd394ec   300  add fp, jssp, #0x10 (16)
0x4cd394f0   304  sub csp, jssp, #0x8 (8)
0x4cd394f4   308  str x1, [jssp, #-8]!
0x4cd394f8   312  ldr x16, pc+144 (addr 0x000000004cd39588)    ;; code: STUB, CreateWeakCellStub, minor: 0
0x4cd394fc   316  blr x16
0x4cd39500   320  ldr x1, [jssp], #8
0x4cd39504   324  mov jssp, fp
0x4cd39508   328  ldp fp, lr, [jssp], #16
0x4cd3950c   332  b #-0x11c (addr 0x4cd393f0)
0x4cd39510   336  movz x16, #0xc00000000
0x4cd39514   340  sub csp, jssp, #0x10 (16)
0x4cd39518   344  stp fp, lr, [jssp, #-16]!
0x4cd3951c   348  sub csp, jssp, #0x10 (16)
0x4cd39520   352  str x16, [jssp, #-8]!
0x4cd39524   356  ldr x17, pc+108 (addr 0x000000004cd39590)    ;; object: 0x4cd39361 <Code: CALL_IC>
0x4cd39528   360  sub csp, jssp, #0x10 (16)
0x4cd3952c   364  str x17, [jssp, #-8]!
0x4cd39530   368  add fp, jssp, #0x10 (16)
0x4cd39534   372  sub csp, jssp, #0x18 (24)
0x4cd39538   376  stp x3, x2, [jssp, #-24]!
0x4cd3953c   380  str x1, [jssp, #16]
0x4cd39540   384  movz x0, #0x3
0x4cd39544   388  ldr x1, pc+84 (addr 0x000000004cd39598)    ;; external reference (Runtime::CallIC_Miss)
0x4cd39548   392  ldr x16, pc+88 (addr 0x000000004cd395a0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd3954c   396  blr x16
0x4cd39550   400  mov x1, x0
0x4cd39554   404  mov jssp, fp
0x4cd39558   408  ldp fp, lr, [jssp], #16
0x4cd3955c   412  b #-0xe0 (addr 0x4cd3947c)
0x4cd39560   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4cd39564   420  d63f03e0       constant
0x4cd39568   424  4cd1e820       constant
0x4cd3956c   428  00000000       constant
0x4cd39570   432  4cd33b00       constant
0x4cd39574   436  00000000       constant
0x4cd39578   440  4cd1f820       constant
0x4cd3957c   444  00000000       constant
0x4cd39580   448  4cd39361       constant
0x4cd39584   452  00000000       constant
0x4cd39588   456  4cd0ddc0       constant
0x4cd3958c   460  00000000       constant
0x4cd39590   464  4cd39361       constant
0x4cd39594   468  00000000       constant
0x4cd39598   472  00c86928       constant
0x4cd3959c   476  00000000       constant
0x4cd395a0   480  4cd06060       constant
0x4cd395a4   484  00000000       constant


RelocInfo (size = 19)
0x4cd393f4  code target (BUILTIN)  (0x4cd1e820)
0x4cd3944c  code target (STUB)  (0x4cd33b00)
0x4cd39480  code target (BUILTIN)  (0x4cd1f820)
0x4cd394e0  embedded object  (0x4cd39361 <Code: CALL_IC>)
0x4cd394f8  code target (STUB)  (0x4cd0ddc0)
0x4cd39524  embedded object  (0x4cd39361 <Code: CALL_IC>)
0x4cd39544  external reference (Runtime::CallIC_Miss)  (0xc86928)
0x4cd39548  code target (STUB)  (0x4cd06060)
0x4cd39560  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 393218
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0x4cd39620     0  ldur x2, [fp, #-16]
0x4cd39624     4  ldur x2, [x2, #31]
0x4cd39628     8  ldur x2, [x2, #87]
0x4cd3962c    12  ldr x16, pc+20 (addr 0x000000004cd39640)    ;; code: CALL_IC, GENERIC
0x4cd39630    16  br x16
0x4cd39634    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd39638    24  d63f03e0       constant
0x4cd3963c    28  d503201f       constant
0x4cd39640    32  4cd393c0       constant
0x4cd39644    36  00000000       constant


RelocInfo (size = 7)
0x4cd3962c  code target (CALL_IC)  (0x4cd393c0)
0x4cd39634  constant pool (size 20)


kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = UNINITIALIZED
extra_ic_state = 0
name = ToBooleanICStub(None)
compiler = unknown
Instructions (size = 104)
0x4cd39e00     0  movz x16, #0xc00000000
0x4cd39e04     4  sub csp, jssp, #0x10 (16)
0x4cd39e08     8  stp fp, lr, [jssp, #-16]!
0x4cd39e0c    12  sub csp, jssp, #0x10 (16)
0x4cd39e10    16  str x16, [jssp, #-8]!
0x4cd39e14    20  ldr x17, pc+60 (addr 0x000000004cd39e50)    ;; object: 0x4cd39da1 <Code: TO_BOOLEAN_IC>
0x4cd39e18    24  sub csp, jssp, #0x10 (16)
0x4cd39e1c    28  str x17, [jssp, #-8]!
0x4cd39e20    32  add fp, jssp, #0x10 (16)
0x4cd39e24    36  sub csp, jssp, #0x8 (8)
0x4cd39e28    40  str x0, [jssp, #-8]!
0x4cd39e2c    44  movz x0, #0x1
0x4cd39e30    48  ldr x1, pc+40 (addr 0x000000004cd39e58)    ;; external reference (Runtime::ToBooleanIC_Miss)
0x4cd39e34    52  ldr x16, pc+44 (addr 0x000000004cd39e60)    ;; code: STUB, CEntryStub, minor: 4
0x4cd39e38    56  blr x16
0x4cd39e3c    60  mov jssp, fp
0x4cd39e40    64  ldp fp, lr, [jssp], #16
0x4cd39e44    68  ret
0x4cd39e48    72  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd39e4c    76  d63f03e0       constant
0x4cd39e50    80  4cd39da1       constant
0x4cd39e54    84  00000000       constant
0x4cd39e58    88  00c8b000       constant
0x4cd39e5c    92  00000000       constant
0x4cd39e60    96  4cd06060       constant
0x4cd39e64   100  00000000       constant


RelocInfo (size = 10)
0x4cd39e14  embedded object  (0x4cd39da1 <Code: TO_BOOLEAN_IC>)
0x4cd39e30  external reference (Runtime::ToBooleanIC_Miss)  (0xc8b000)
0x4cd39e34  code target (STUB)  (0x4cd06060)
0x4cd39e48  constant pool (size 32)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = UNINITIALIZED
extra_ic_state = 0
compare_state = UNINITIALIZED*UNINITIALIZED -> UNINITIALIZED
compare_operation = GTE
name = CompareICStub
compiler = unknown
Instructions (size = 136)
0x4cd39ee0     0  movz x16, #0xc00000000
0x4cd39ee4     4  sub csp, jssp, #0x10 (16)
0x4cd39ee8     8  stp fp, lr, [jssp, #-16]!
0x4cd39eec    12  sub csp, jssp, #0x10 (16)
0x4cd39ef0    16  str x16, [jssp, #-8]!
0x4cd39ef4    20  ldr x17, pc+92 (addr 0x000000004cd39f50)    ;; object: 0x4cd39e81 <Code: COMPARE_IC>
0x4cd39ef8    24  sub csp, jssp, #0x10 (16)
0x4cd39efc    28  str x17, [jssp, #-8]!
0x4cd39f00    32  add fp, jssp, #0x10 (16)
0x4cd39f04    36  sub csp, jssp, #0x18 (24)
0x4cd39f08    40  stp lr, x0, [jssp, #-24]!
0x4cd39f0c    44  str x1, [jssp, #16]
0x4cd39f10    48  movz x10, #0x3400000000
0x4cd39f14    52  sub csp, jssp, #0x18 (24)
0x4cd39f18    56  stp x10, x0, [jssp, #-24]!
0x4cd39f1c    60  str x1, [jssp, #16]
0x4cd39f20    64  movz x0, #0x3
0x4cd39f24    68  ldr x1, pc+52 (addr 0x000000004cd39f58)    ;; external reference (Runtime::CompareIC_Miss)
0x4cd39f28    72  ldr x16, pc+56 (addr 0x000000004cd39f60)    ;; code: STUB, CEntryStub, minor: 4
0x4cd39f2c    76  blr x16
0x4cd39f30    80  add x11, x0, #0x5f (95)
0x4cd39f34    84  ldr x1, [jssp, #16]
0x4cd39f38    88  ldp lr, x0, [jssp], #24
0x4cd39f3c    92  mov jssp, fp
0x4cd39f40    96  ldp fp, lr, [jssp], #16
0x4cd39f44   100  br x11
0x4cd39f48   104  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd39f4c   108  d63f03e0       constant
0x4cd39f50   112  4cd39e81       constant
0x4cd39f54   116  00000000       constant
0x4cd39f58   120  00c8a980       constant
0x4cd39f5c   124  00000000       constant
0x4cd39f60   128  4cd06060       constant
0x4cd39f64   132  00000000       constant


RelocInfo (size = 10)
0x4cd39ef4  embedded object  (0x4cd39e81 <Code: COMPARE_IC>)
0x4cd39f24  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cd39f28  code target (STUB)  (0x4cd06060)
0x4cd39f48  constant pool (size 32)


kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 16
type = NORMAL
name = ToBooleanICStub(SpecObject)
compiler = crankshaft
Instructions (size = 144)
0x4cd3a6e0     0  tbz w0, #0, #+0x48 (addr 0x4cd3a728)
0x4cd3a6e4     4  ldur x2, [x0, #-1]
0x4cd3a6e8     8  ldrb w1, [x2, #12]
0x4cd3a6ec    12  tbnz w1, #4, #+0x14 (addr 0x4cd3a700)
0x4cd3a6f0    16  ldrb w1, [x2, #11]
0x4cd3a6f4    20  cmp x1, #0xb1 (177)
0x4cd3a6f8    24  b.ge #+0x10 (addr 0x4cd3a708)
0x4cd3a6fc    28  b #+0x2c (addr 0x4cd3a728)
0x4cd3a700    32  ldr x0, pc+24 (addr 0x000000004cd3a718)    ;; object: 0x210042b1 <false>
0x4cd3a704    36  ret
0x4cd3a708    40  ldr x0, pc+24 (addr 0x000000004cd3a720)    ;; object: 0x21004281 <true>
0x4cd3a70c    44  ret
0x4cd3a710    48  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd3a714    52  d63f03e0       constant
0x4cd3a718    56  210042b1       constant
0x4cd3a71c    60  00000000       constant
0x4cd3a720    64  21004281       constant
0x4cd3a724    68  00000000       constant
0x4cd3a728    72  movz x16, #0x0
0x4cd3a72c    76  sub csp, jssp, #0x10 (16)
0x4cd3a730    80  stp fp, lr, [jssp, #-16]!
0x4cd3a734    84  bl #+0x4 (addr 0x4cd3a738)
0x4cd3a738    88  movz x17, #0xa00000000
0x4cd3a73c    92  sub csp, jssp, #0x10 (16)
0x4cd3a740    96  stp x17, cp, [jssp, #-16]!
0x4cd3a744   100  add fp, jssp, #0x10 (16)
0x4cd3a748   104  ldr x17, pc+24 (addr 0x000000004cd3a760)    ;; lazy deoptimization bailout 0
0x4cd3a74c   108  add x17, x17, x16
0x4cd3a750   112  br x17
0x4cd3a754   116  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd3a758   120  d63f03e0       constant
0x4cd3a75c   124  d503201f       constant
0x4cd3a760   128  4cb06000       constant
0x4cd3a764   132  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd3a700  embedded object  (0x210042b1 <false>)
0x4cd3a708  embedded object  (0x21004281 <true>)
0x4cd3a710  constant pool (size 24)
0x4cd3a748  runtime entry
0x4cd3a754  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = SMI*SMI -> SMI
compare_operation = GTE
name = CompareICStub
compiler = unknown
Instructions (size = 160)
0x4cd3a7e0     0  orr x16, x0, x1
0x4cd3a7e4     4  tbnz w16, #0, #+0x10 (addr 0x4cd3a7f4)
0x4cd3a7e8     8  asr x1, x1, #32
0x4cd3a7ec    12  sub x0, x1, x0, asr #32
0x4cd3a7f0    16  ret
0x4cd3a7f4    20  movz x16, #0xc00000000
0x4cd3a7f8    24  sub csp, jssp, #0x10 (16)
0x4cd3a7fc    28  stp fp, lr, [jssp, #-16]!
0x4cd3a800    32  sub csp, jssp, #0x10 (16)
0x4cd3a804    36  str x16, [jssp, #-8]!
0x4cd3a808    40  ldr x17, pc+96 (addr 0x000000004cd3a868)    ;; object: 0x4cd3a781 <Code: COMPARE_IC>
0x4cd3a80c    44  sub csp, jssp, #0x10 (16)
0x4cd3a810    48  str x17, [jssp, #-8]!
0x4cd3a814    52  add fp, jssp, #0x10 (16)
0x4cd3a818    56  sub csp, jssp, #0x18 (24)
0x4cd3a81c    60  stp lr, x0, [jssp, #-24]!
0x4cd3a820    64  str x1, [jssp, #16]
0x4cd3a824    68  movz x10, #0x3400000000
0x4cd3a828    72  sub csp, jssp, #0x18 (24)
0x4cd3a82c    76  stp x10, x0, [jssp, #-24]!
0x4cd3a830    80  str x1, [jssp, #16]
0x4cd3a834    84  movz x0, #0x3
0x4cd3a838    88  ldr x1, pc+56 (addr 0x000000004cd3a870)    ;; external reference (Runtime::CompareIC_Miss)
0x4cd3a83c    92  ldr x16, pc+60 (addr 0x000000004cd3a878)    ;; code: STUB, CEntryStub, minor: 4
0x4cd3a840    96  blr x16
0x4cd3a844   100  add x11, x0, #0x5f (95)
0x4cd3a848   104  ldr x1, [jssp, #16]
0x4cd3a84c   108  ldp lr, x0, [jssp], #24
0x4cd3a850   112  mov jssp, fp
0x4cd3a854   116  ldp fp, lr, [jssp], #16
0x4cd3a858   120  br x11
0x4cd3a85c   124  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd3a860   128  d63f03e0       constant
0x4cd3a864   132  d503201f       constant
0x4cd3a868   136  4cd3a781       constant
0x4cd3a86c   140  00000000       constant
0x4cd3a870   144  00c8a980       constant
0x4cd3a874   148  00000000       constant
0x4cd3a878   152  4cd06060       constant
0x4cd3a87c   156  00000000       constant


RelocInfo (size = 10)
0x4cd3a808  embedded object  (0x4cd3a781 <Code: COMPARE_IC>)
0x4cd3a838  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cd3a83c  code target (STUB)  (0x4cd06060)
0x4cd3a85c  constant pool (size 36)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = UNINITIALIZED
extra_ic_state = 0
compare_state = UNINITIALIZED*UNINITIALIZED -> UNINITIALIZED
compare_operation = EQ
name = CompareICStub
compiler = unknown
Instructions (size = 136)
0x4cd3a8e0     0  movz x16, #0xc00000000
0x4cd3a8e4     4  sub csp, jssp, #0x10 (16)
0x4cd3a8e8     8  stp fp, lr, [jssp, #-16]!
0x4cd3a8ec    12  sub csp, jssp, #0x10 (16)
0x4cd3a8f0    16  str x16, [jssp, #-8]!
0x4cd3a8f4    20  ldr x17, pc+92 (addr 0x000000004cd3a950)    ;; object: 0x4cd3a881 <Code: COMPARE_IC>
0x4cd3a8f8    24  sub csp, jssp, #0x10 (16)
0x4cd3a8fc    28  str x17, [jssp, #-8]!
0x4cd3a900    32  add fp, jssp, #0x10 (16)
0x4cd3a904    36  sub csp, jssp, #0x18 (24)
0x4cd3a908    40  stp lr, x0, [jssp, #-24]!
0x4cd3a90c    44  str x1, [jssp, #16]
0x4cd3a910    48  movz x10, #0x2d00000000
0x4cd3a914    52  sub csp, jssp, #0x18 (24)
0x4cd3a918    56  stp x10, x0, [jssp, #-24]!
0x4cd3a91c    60  str x1, [jssp, #16]
0x4cd3a920    64  movz x0, #0x3
0x4cd3a924    68  ldr x1, pc+52 (addr 0x000000004cd3a958)    ;; external reference (Runtime::CompareIC_Miss)
0x4cd3a928    72  ldr x16, pc+56 (addr 0x000000004cd3a960)    ;; code: STUB, CEntryStub, minor: 4
0x4cd3a92c    76  blr x16
0x4cd3a930    80  add x11, x0, #0x5f (95)
0x4cd3a934    84  ldr x1, [jssp, #16]
0x4cd3a938    88  ldp lr, x0, [jssp], #24
0x4cd3a93c    92  mov jssp, fp
0x4cd3a940    96  ldp fp, lr, [jssp], #16
0x4cd3a944   100  br x11
0x4cd3a948   104  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd3a94c   108  d63f03e0       constant
0x4cd3a950   112  4cd3a881       constant
0x4cd3a954   116  00000000       constant
0x4cd3a958   120  00c8a980       constant
0x4cd3a95c   124  00000000       constant
0x4cd3a960   128  4cd06060       constant
0x4cd3a964   132  00000000       constant


RelocInfo (size = 10)
0x4cd3a8f4  embedded object  (0x4cd3a881 <Code: COMPARE_IC>)
0x4cd3a924  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cd3a928  code target (STUB)  (0x4cd06060)
0x4cd3a948  constant pool (size 32)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 393219
name = CallICStub(args(3), ANY, 
compiler = unknown
Instructions (size = 488)
0x4cd3ac00     0  add x4, x2, x3, asr #29
0x4cd3ac04     4  ldur x4, [x4, #15]
0x4cd3ac08     8  ldur x5, [x4, #7]
0x4cd3ac0c    12  cmp x5, x1
0x4cd3ac10    16  b.ne #+0x2c (addr 0x4cd3ac3c)
0x4cd3ac14    20  tbz w1, #0, #+0x28 (addr 0x4cd3ac3c)
0x4cd3ac18    24  add x2, x2, x3, asr #29
0x4cd3ac1c    28  add x2, x2, #0x18 (24)
0x4cd3ac20    32  ldur x3, [x2, #-1]
0x4cd3ac24    36  movz x16, #0x200000000
0x4cd3ac28    40  add x3, x3, x16
0x4cd3ac2c    44  stur x3, [x2, #-1]
0x4cd3ac30    48  movz x0, #0x3
0x4cd3ac34    52  ldr x16, pc+372 (addr 0x000000004cd3ada8)    ;; code: BUILTIN
0x4cd3ac38    56  br x16
0x4cd3ac3c    60  ldr x16, [x26, #2400]
0x4cd3ac40    64  cmp x4, x16
0x4cd3ac44    68  b.eq #+0x78 (addr 0x4cd3acbc)
0x4cd3ac48    72  ldur x5, [x4, #-1]
0x4cd3ac4c    76  ldr x16, [x26, #2736]
0x4cd3ac50    80  cmp x5, x16
0x4cd3ac54    84  b.ne #+0x40 (addr 0x4cd3ac94)
0x4cd3ac58    88  ldur x5, [cp, #39]
0x4cd3ac5c    92  ldur x5, [x5, #95]
0x4cd3ac60    96  cmp x1, x5
0x4cd3ac64   100  b.ne #+0xec (addr 0x4cd3ad50)
0x4cd3ac68   104  movz x0, #0x3
0x4cd3ac6c   108  add x2, x2, x3, asr #29
0x4cd3ac70   112  add x2, x2, #0x18 (24)
0x4cd3ac74   116  ldur x3, [x2, #-1]
0x4cd3ac78   120  movz x16, #0x200000000
0x4cd3ac7c   124  add x3, x3, x16
0x4cd3ac80   128  stur x3, [x2, #-1]
0x4cd3ac84   132  mov x2, x4
0x4cd3ac88   136  mov x3, x1
0x4cd3ac8c   140  ldr x16, pc+292 (addr 0x000000004cd3adb0)    ;; code: STUB, ArrayConstructorStub, minor: 3
0x4cd3ac90   144  br x16
0x4cd3ac94   148  ldr x16, [x26, #2568]
0x4cd3ac98   152  cmp x4, x16
0x4cd3ac9c   156  b.eq #+0xb4 (addr 0x4cd3ad50)
0x4cd3aca0   160  ldur x5, [x4, #-1]
0x4cd3aca4   164  ldrb w5, [x5, #11]
0x4cd3aca8   168  cmp x5, #0xc9 (201)
0x4cd3acac   172  b.ne #+0xa4 (addr 0x4cd3ad50)
0x4cd3acb0   176  add x4, x2, x3, asr #29
0x4cd3acb4   180  ldr x5, [x26, #2400]
0x4cd3acb8   184  stur x5, [x4, #15]
0x4cd3acbc   188  movz x0, #0x3
0x4cd3acc0   192  ldr x16, pc+248 (addr 0x000000004cd3adb8)    ;; code: BUILTIN
0x4cd3acc4   196  br x16
0x4cd3acc8   200  tbz w1, #0, #+0x88 (addr 0x4cd3ad50)
0x4cd3accc   204  ldur x5, [x1, #-1]
0x4cd3acd0   208  ldrb w5, [x5, #11]
0x4cd3acd4   212  cmp x5, #0xc9 (201)
0x4cd3acd8   216  b.ne #+0x78 (addr 0x4cd3ad50)
0x4cd3acdc   220  ldur x5, [cp, #39]
0x4cd3ace0   224  ldur x5, [x5, #95]
0x4cd3ace4   228  cmp x1, x5
0x4cd3ace8   232  b.eq #+0x68 (addr 0x4cd3ad50)
0x4cd3acec   236  ldur x4, [x1, #39]
0x4cd3acf0   240  ldur x4, [x4, #39]
0x4cd3acf4   244  ldur x5, [cp, #39]
0x4cd3acf8   248  cmp x4, x5
0x4cd3acfc   252  b.ne #+0x54 (addr 0x4cd3ad50)
0x4cd3ad00   256  movz x5, #0x200000000
0x4cd3ad04   260  adds x4, x2, x3, asr #29
0x4cd3ad08   264  stur x5, [x4, #23]
0x4cd3ad0c   268  movz x16, #0xc00000000
0x4cd3ad10   272  sub csp, jssp, #0x10 (16)
0x4cd3ad14   276  stp fp, lr, [jssp, #-16]!
0x4cd3ad18   280  sub csp, jssp, #0x10 (16)
0x4cd3ad1c   284  str x16, [jssp, #-8]!
0x4cd3ad20   288  ldr x17, pc+160 (addr 0x000000004cd3adc0)    ;; object: 0x4cd3aba1 <Code: CALL_IC>
0x4cd3ad24   292  sub csp, jssp, #0x10 (16)
0x4cd3ad28   296  str x17, [jssp, #-8]!
0x4cd3ad2c   300  add fp, jssp, #0x10 (16)
0x4cd3ad30   304  sub csp, jssp, #0x8 (8)
0x4cd3ad34   308  str x1, [jssp, #-8]!
0x4cd3ad38   312  ldr x16, pc+144 (addr 0x000000004cd3adc8)    ;; code: STUB, CreateWeakCellStub, minor: 0
0x4cd3ad3c   316  blr x16
0x4cd3ad40   320  ldr x1, [jssp], #8
0x4cd3ad44   324  mov jssp, fp
0x4cd3ad48   328  ldp fp, lr, [jssp], #16
0x4cd3ad4c   332  b #-0x11c (addr 0x4cd3ac30)
0x4cd3ad50   336  movz x16, #0xc00000000
0x4cd3ad54   340  sub csp, jssp, #0x10 (16)
0x4cd3ad58   344  stp fp, lr, [jssp, #-16]!
0x4cd3ad5c   348  sub csp, jssp, #0x10 (16)
0x4cd3ad60   352  str x16, [jssp, #-8]!
0x4cd3ad64   356  ldr x17, pc+108 (addr 0x000000004cd3add0)    ;; object: 0x4cd3aba1 <Code: CALL_IC>
0x4cd3ad68   360  sub csp, jssp, #0x10 (16)
0x4cd3ad6c   364  str x17, [jssp, #-8]!
0x4cd3ad70   368  add fp, jssp, #0x10 (16)
0x4cd3ad74   372  sub csp, jssp, #0x18 (24)
0x4cd3ad78   376  stp x3, x2, [jssp, #-24]!
0x4cd3ad7c   380  str x1, [jssp, #16]
0x4cd3ad80   384  movz x0, #0x3
0x4cd3ad84   388  ldr x1, pc+84 (addr 0x000000004cd3add8)    ;; external reference (Runtime::CallIC_Miss)
0x4cd3ad88   392  ldr x16, pc+88 (addr 0x000000004cd3ade0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd3ad8c   396  blr x16
0x4cd3ad90   400  mov x1, x0
0x4cd3ad94   404  mov jssp, fp
0x4cd3ad98   408  ldp fp, lr, [jssp], #16
0x4cd3ad9c   412  b #-0xe0 (addr 0x4cd3acbc)
0x4cd3ada0   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4cd3ada4   420  d63f03e0       constant
0x4cd3ada8   424  4cd1e820       constant
0x4cd3adac   428  00000000       constant
0x4cd3adb0   432  4cd33b00       constant
0x4cd3adb4   436  00000000       constant
0x4cd3adb8   440  4cd1f820       constant
0x4cd3adbc   444  00000000       constant
0x4cd3adc0   448  4cd3aba1       constant
0x4cd3adc4   452  00000000       constant
0x4cd3adc8   456  4cd0ddc0       constant
0x4cd3adcc   460  00000000       constant
0x4cd3add0   464  4cd3aba1       constant
0x4cd3add4   468  00000000       constant
0x4cd3add8   472  00c86928       constant
0x4cd3addc   476  00000000       constant
0x4cd3ade0   480  4cd06060       constant
0x4cd3ade4   484  00000000       constant


RelocInfo (size = 19)
0x4cd3ac34  code target (BUILTIN)  (0x4cd1e820)
0x4cd3ac8c  code target (STUB)  (0x4cd33b00)
0x4cd3acc0  code target (BUILTIN)  (0x4cd1f820)
0x4cd3ad20  embedded object  (0x4cd3aba1 <Code: CALL_IC>)
0x4cd3ad38  code target (STUB)  (0x4cd0ddc0)
0x4cd3ad64  embedded object  (0x4cd3aba1 <Code: CALL_IC>)
0x4cd3ad84  external reference (Runtime::CallIC_Miss)  (0xc86928)
0x4cd3ad88  code target (STUB)  (0x4cd06060)
0x4cd3ada0  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 393219
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0x4cd3ae60     0  ldur x2, [fp, #-16]
0x4cd3ae64     4  ldur x2, [x2, #31]
0x4cd3ae68     8  ldur x2, [x2, #87]
0x4cd3ae6c    12  ldr x16, pc+20 (addr 0x000000004cd3ae80)    ;; code: CALL_IC, GENERIC
0x4cd3ae70    16  br x16
0x4cd3ae74    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd3ae78    24  d63f03e0       constant
0x4cd3ae7c    28  d503201f       constant
0x4cd3ae80    32  4cd3ac00       constant
0x4cd3ae84    36  00000000       constant


RelocInfo (size = 7)
0x4cd3ae6c  code target (CALL_IC)  (0x4cd3ac00)
0x4cd3ae74  constant pool (size 20)


kind = STUB
major_key = BinaryOpWithAllocationSiteStub
name = BinaryOpWithAllocationSiteStub(ADD_CreateAllocationMementos:String*String->String)
compiler = crankshaft
Instructions (size = 1164)
0x4cd3b220     0  movz x16, #0xa00000000
0x4cd3b224     4  sub csp, jssp, #0x10 (16)
0x4cd3b228     8  stp fp, lr, [jssp, #-16]!
0x4cd3b22c    12  mov fp, jssp
0x4cd3b230    16  sub csp, jssp, #0x28 (40)
0x4cd3b234    20  sub jssp, jssp, #0x28 (40)
0x4cd3b238    24  stur x16, [fp, #-8]
0x4cd3b23c    28  str x2, [jssp, #24]
0x4cd3b240    32  str x1, [jssp, #16]
0x4cd3b244    36  str x0, [jssp, #8]
0x4cd3b248    40  str cp, [jssp]
0x4cd3b24c    44  mov x3, cp
0x4cd3b250    48  tbz w1, #0, #+0x3d8 (addr 0x4cd3b628)
0x4cd3b254    52  ldur x4, [x1, #-1]
0x4cd3b258    56  ldrb w4, [x4, #11]
0x4cd3b25c    60  tbnz w4, #7, #+0x3d4 (addr 0x4cd3b630)
0x4cd3b260    64  tbz w0, #0, #+0x3d8 (addr 0x4cd3b638)
0x4cd3b264    68  ldur x4, [x0, #-1]
0x4cd3b268    72  ldrb w4, [x4, #11]
0x4cd3b26c    76  tbnz w4, #7, #+0x3d4 (addr 0x4cd3b640)
0x4cd3b270    80  ldur w4, [x1, #19]
0x4cd3b274    84  ldur w5, [x0, #19]
0x4cd3b278    88  cbz w4, #+0x288 (addr 0x4cd3b500)
0x4cd3b27c    92  cbz w5, #+0x27c (addr 0x4cd3b4f8)
0x4cd3b280    96  add w6, w4, w5
0x4cd3b284   100  movn w16, #0xe0
0x4cd3b288   104  cmp w6, w16, lsr #4
0x4cd3b28c   108  b.hs #+0x3bc (addr 0x4cd3b648)
0x4cd3b290   112  cmp w6, #0xd (13)
0x4cd3b294   116  b.ge #+0x1c0 (addr 0x4cd3b454)
0x4cd3b298   120  ldur x7, [x1, #-1]
0x4cd3b29c   124  ldrb w7, [x7, #11]
0x4cd3b2a0   128  ldur x8, [x0, #-1]
0x4cd3b2a4   132  ldrb w8, [x8, #11]
0x4cd3b2a8   136  orr w9, w7, w8
0x4cd3b2ac   140  eor w7, w7, w8
0x4cd3b2b0   144  and w7, w7, #0x4
0x4cd3b2b4   148  cbnz w7, #+0xc (addr 0x4cd3b2c0)
0x4cd3b2b8   152  and w7, w9, #0x3
0x4cd3b2bc   156  cbz w7, #+0x28 (addr 0x4cd3b2e4)
0x4cd3b2c0   160  sub csp, jssp, #0x10 (16)
0x4cd3b2c4   164  stp x0, x1, [jssp, #-16]!
0x4cd3b2c8   168  mov cp, x3
0x4cd3b2cc   172  movz x0, #0x2
0x4cd3b2d0   176  movz x1, #0xa6c0
0x4cd3b2d4   180  movk x1, #0xec, lsl #16
0x4cd3b2d8   184  ldr x16, pc+728 (addr 0x000000004cd3b5b0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd3b2dc   188  blr x16
0x4cd3b2e0   192  b #+0x228 (addr 0x4cd3b508)
0x4cd3b2e4   196  and w0, w9, #0x4
0x4cd3b2e8   200  cbnz w0, #+0x14 (addr 0x4cd3b2fc)
0x4cd3b2ec   204  lsl w0, w6, #1
0x4cd3b2f0   208  mov x1, x0
0x4cd3b2f4   212  ldr x0, pc+708 (addr 0x000000004cd3b5b8)    ;; object: 0x2a804ba1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd3b2f8   216  b #+0xc (addr 0x4cd3b304)
0x4cd3b2fc   220  mov x1, x6
0x4cd3b300   224  ldr x0, pc+704 (addr 0x000000004cd3b5c0)    ;; object: 0x2a804bf9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd3b304   228  add w1, w1, #0x1f (31)
0x4cd3b308   232  and w1, w1, #0xfffffff8
0x4cd3b30c   236  cmp w1, #0x96000 (614400)
0x4cd3b310   240  b.lt #+0x2c (addr 0x4cd3b33c)
0x4cd3b314   244  sub csp, jssp, #0x10 (16)
0x4cd3b318   248  ldp x1, x0, [jssp, #8]
0x4cd3b31c   252  stp x1, x0, [jssp, #-16]!
0x4cd3b320   256  ldr cp, [jssp, #16]
0x4cd3b324   260  movz x0, #0x2
0x4cd3b328   264  movz x1, #0xa6c0
0x4cd3b32c   268  movk x1, #0xec, lsl #16
0x4cd3b330   272  ldr x16, pc+664 (addr 0x000000004cd3b5c8)    ;; code: STUB, CEntryStub, minor: 4
0x4cd3b334   276  blr x16
0x4cd3b338   280  b #+0x1d0 (addr 0x4cd3b508)
0x4cd3b33c   284  add w2, w1, #0x10 (16)
0x4cd3b340   288  sxtw x2, w2
0x4cd3b344   292  movz x3, #0xd2c0
0x4cd3b348   296  movk x3, #0x166d, lsl #16
0x4cd3b34c   300  ldp x8, x16, [x3]
0x4cd3b350   304  adds x7, x8, x2
0x4cd3b354   308  ccmp x7, x16, #nzCv, lo
0x4cd3b358   312  b.hi #+0x1c0 (addr 0x4cd3b518)
0x4cd3b35c   316  str x7, [x3]
0x4cd3b360   320  orr x8, x8, #0x1
0x4cd3b364   324  add x1, x8, w1, sxtw
0x4cd3b368   328  ldr x2, pc+616 (addr 0x000000004cd3b5d0)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd3b36c   332  stur x2, [x1, #-1]
0x4cd3b370   336  ldr x2, [jssp, #24]
0x4cd3b374   340  stur x2, [x1, #7]
0x4cd3b378   344  ldur w1, [x2, #35]
0x4cd3b37c   348  add w1, w1, #0x1 (1)
0x4cd3b380   352  lsl x1, x1, #32
0x4cd3b384   356  stur x1, [x2, #31]
0x4cd3b388   360  stur x0, [x8, #-1]
0x4cd3b38c   364  movz w1, #0x3
0x4cd3b390   368  stur w1, [x8, #7]
0x4cd3b394   372  lsl x1, x6, #32
0x4cd3b398   376  stur x1, [x8, #15]
0x4cd3b39c   380  ldr x1, pc+572 (addr 0x000000004cd3b5d8)    ;; object: 0x2a804ba1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd3b3a0   384  cmp x0, x1
0x4cd3b3a4   388  b.eq #+0x58 (addr 0x4cd3b3fc)
0x4cd3b3a8   392  ldr x1, [jssp, #16]
0x4cd3b3ac   396  movz x0, #0x0
0x4cd3b3b0   400  cmp w4, w0
0x4cd3b3b4   404  b.le #+0x1c (addr 0x4cd3b3d0)
0x4cd3b3b8   408  add x2, x1, #0x17 (23)
0x4cd3b3bc   412  ldrb w3, [x2, w0, sxtw]
0x4cd3b3c0   416  add x2, x8, #0x17 (23)
0x4cd3b3c4   420  strb w3, [x2, w0, sxtw]
0x4cd3b3c8   424  add w0, w0, #0x1 (1)
0x4cd3b3cc   428  b #-0x1c (addr 0x4cd3b3b0)
0x4cd3b3d0   432  ldr x3, [jssp, #8]
0x4cd3b3d4   436  movz x0, #0x0
0x4cd3b3d8   440  cmp w5, w0
0x4cd3b3dc   444  b.le #+0x70 (addr 0x4cd3b44c)
0x4cd3b3e0   448  add x1, x3, #0x17 (23)
0x4cd3b3e4   452  ldrb w2, [x1, w0, sxtw]
0x4cd3b3e8   456  add w1, w4, w0
0x4cd3b3ec   460  add x6, x8, #0x17 (23)
0x4cd3b3f0   464  strb w2, [x6, w1, sxtw]
0x4cd3b3f4   468  add w0, w0, #0x1 (1)
0x4cd3b3f8   472  b #-0x20 (addr 0x4cd3b3d8)
0x4cd3b3fc   476  ldp x3, x1, [jssp, #8]
0x4cd3b400   480  movz x0, #0x0
0x4cd3b404   484  cmp w4, w0
0x4cd3b408   488  b.le #+0x1c (addr 0x4cd3b424)
0x4cd3b40c   492  add x2, x1, #0x17 (23)
0x4cd3b410   496  ldrh w6, [x2, w0, sxtw #1]
0x4cd3b414   500  add x2, x8, #0x17 (23)
0x4cd3b418   504  strh w6, [x2, w0, sxtw #1]
0x4cd3b41c   508  add w0, w0, #0x1 (1)
0x4cd3b420   512  b #-0x1c (addr 0x4cd3b404)
0x4cd3b424   516  movz x0, #0x0
0x4cd3b428   520  cmp w5, w0
0x4cd3b42c   524  b.le #+0x20 (addr 0x4cd3b44c)
0x4cd3b430   528  add x1, x3, #0x17 (23)
0x4cd3b434   532  ldrh w2, [x1, w0, sxtw #1]
0x4cd3b438   536  add w1, w4, w0
0x4cd3b43c   540  add x6, x8, #0x17 (23)
0x4cd3b440   544  strh w2, [x6, w1, sxtw #1]
0x4cd3b444   548  add w0, w0, #0x1 (1)
0x4cd3b448   552  b #-0x20 (addr 0x4cd3b428)
0x4cd3b44c   556  mov x0, x8
0x4cd3b450   560  b #+0xb8 (addr 0x4cd3b508)
0x4cd3b454   564  mov x3, x0
0x4cd3b458   568  ldur x0, [x1, #-1]
0x4cd3b45c   572  ldrb w0, [x0, #11]
0x4cd3b460   576  ldur x4, [x3, #-1]
0x4cd3b464   580  ldrb w4, [x4, #11]
0x4cd3b468   584  movz x7, #0xd2c0
0x4cd3b46c   588  movk x7, #0x166d, lsl #16
0x4cd3b470   592  ldp x8, x5, [x7]
0x4cd3b474   596  adds x16, x8, #0x38 (56)
0x4cd3b478   600  ccmp x16, x5, #nzCv, lo
0x4cd3b47c   604  b.hi #+0xe4 (addr 0x4cd3b560)
0x4cd3b480   608  str x16, [x7]
0x4cd3b484   612  orr x8, x8, #0x1
0x4cd3b488   616  add x5, x8, #0x28 (40)
0x4cd3b48c   620  ldr x7, pc+340 (addr 0x000000004cd3b5e0)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd3b490   624  stur x7, [x5, #-1]
0x4cd3b494   628  stur x2, [x5, #7]
0x4cd3b498   632  ldur w5, [x2, #35]
0x4cd3b49c   636  add w5, w5, #0x1 (1)
0x4cd3b4a0   640  lsl x5, x5, #32
0x4cd3b4a4   644  stur x5, [x2, #31]
0x4cd3b4a8   648  and w2, w0, w4
0x4cd3b4ac   652  eor w0, w0, w4
0x4cd3b4b0   656  and w2, w2, #0xc
0x4cd3b4b4   660  cbnz w2, #+0x1c (addr 0x4cd3b4d0)
0x4cd3b4b8   664  and w0, w0, #0xc
0x4cd3b4bc   668  cmp w0, #0xc (12)
0x4cd3b4c0   672  b.eq #+0x10 (addr 0x4cd3b4d0)
0x4cd3b4c4   676  ldr x0, pc+292 (addr 0x000000004cd3b5e8)    ;; object: 0x2a804c51 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd3b4c8   680  stur x0, [x8, #-1]
0x4cd3b4cc   684  b #+0xc (addr 0x4cd3b4d8)
0x4cd3b4d0   688  ldr x0, pc+288 (addr 0x000000004cd3b5f0)    ;; object: 0x2a804ca9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd3b4d4   692  stur x0, [x8, #-1]
0x4cd3b4d8   696  movz w0, #0x3
0x4cd3b4dc   700  stur w0, [x8, #7]
0x4cd3b4e0   704  lsl x0, x6, #32
0x4cd3b4e4   708  stur x0, [x8, #15]
0x4cd3b4e8   712  stur x1, [x8, #23]
0x4cd3b4ec   716  stur x3, [x8, #31]
0x4cd3b4f0   720  mov x0, x8
0x4cd3b4f4   724  b #+0x14 (addr 0x4cd3b508)
0x4cd3b4f8   728  mov x0, x1
0x4cd3b4fc   732  b #+0xc (addr 0x4cd3b508)
0x4cd3b500   736  mov x3, x0
0x4cd3b504   740  mov x0, x3
0x4cd3b508   744  ldr cp, [jssp]
0x4cd3b50c   748  mov jssp, fp
0x4cd3b510   752  ldp fp, lr, [jssp], #16
0x4cd3b514   756  ret
0x4cd3b518   760  movz x8, #0x0
0x4cd3b51c   764  mov x16, lr
0x4cd3b520   768  ldr x17, pc+216 (addr 0x000000004cd3b5f8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd3b524   772  blr x17
0x4cd3b528   776  lsl x0, x2, #32
0x4cd3b52c   780  movz x10, #0x0
0x4cd3b530   784  sub csp, jssp, #0x10 (16)
0x4cd3b534   788  stp x10, x0, [jssp, #-16]!
0x4cd3b538   792  ldur cp, [fp, #-40]
0x4cd3b53c   796  movz x0, #0x2
0x4cd3b540   800  movz x1, #0x5b88
0x4cd3b544   804  movk x1, #0xe2, lsl #16
0x4cd3b548   808  ldr x16, pc+184 (addr 0x000000004cd3b600)    ;; code: STUB, CEntryStub, minor: 5
0x4cd3b54c   812  blr x16
0x4cd3b550   816  str x0, [jssp, #64]
0x4cd3b554   820  ldr x16, pc+180 (addr 0x000000004cd3b608)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd3b558   824  blr x16
0x4cd3b55c   828  b #-0x1f8 (addr 0x4cd3b364)
0x4cd3b560   832  movz x8, #0x0
0x4cd3b564   836  mov x16, lr
0x4cd3b568   840  ldr x17, pc+168 (addr 0x000000004cd3b610)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd3b56c   844  blr x17
0x4cd3b570   848  movz x0, #0x3800000000
0x4cd3b574   852  movz x10, #0x0
0x4cd3b578   856  sub csp, jssp, #0x10 (16)
0x4cd3b57c   860  stp x10, x0, [jssp, #-16]!
0x4cd3b580   864  ldur cp, [fp, #-40]
0x4cd3b584   868  movz x0, #0x2
0x4cd3b588   872  movz x1, #0x5b88
0x4cd3b58c   876  movk x1, #0xe2, lsl #16
0x4cd3b590   880  ldr x16, pc+136 (addr 0x000000004cd3b618)    ;; code: STUB, CEntryStub, minor: 5
0x4cd3b594   884  blr x16
0x4cd3b598   888  str x0, [jssp, #64]
0x4cd3b59c   892  ldr x16, pc+132 (addr 0x000000004cd3b620)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd3b5a0   896  blr x16
0x4cd3b5a4   900  b #-0x11c (addr 0x4cd3b488)
0x4cd3b5a8   904  580003ff       constant pool begin (num_const = 31)    ;; constant pool
0x4cd3b5ac   908  d63f03e0       constant
0x4cd3b5b0   912  4cd06060       constant
0x4cd3b5b4   916  00000000       constant
0x4cd3b5b8   920  2a804ba1       constant
0x4cd3b5bc   924  00000000       constant
0x4cd3b5c0   928  2a804bf9       constant
0x4cd3b5c4   932  00000000       constant
0x4cd3b5c8   936  4cd06060       constant
0x4cd3b5cc   940  00000000       constant
0x4cd3b5d0   944  2a805d81       constant
0x4cd3b5d4   948  00000000       constant
0x4cd3b5d8   952  2a804ba1       constant
0x4cd3b5dc   956  00000000       constant
0x4cd3b5e0   960  2a805d81       constant
0x4cd3b5e4   964  00000000       constant
0x4cd3b5e8   968  2a804c51       constant
0x4cd3b5ec   972  00000000       constant
0x4cd3b5f0   976  2a804ca9       constant
0x4cd3b5f4   980  00000000       constant
0x4cd3b5f8   984  4cd06820       constant
0x4cd3b5fc   988  00000000       constant
0x4cd3b600   992  4cd06260       constant
0x4cd3b604   996  00000000       constant
0x4cd3b608  1000  4cd068e0       constant
0x4cd3b60c  1004  00000000       constant
0x4cd3b610  1008  4cd06820       constant
0x4cd3b614  1012  00000000       constant
0x4cd3b618  1016  4cd06260       constant
0x4cd3b61c  1020  00000000       constant
0x4cd3b620  1024  4cd068e0       constant
0x4cd3b624  1028  00000000       constant
0x4cd3b628  1032  movz x16, #0x0
0x4cd3b62c  1036  bl #+0x24 (addr 0x4cd3b650)
0x4cd3b630  1040  movz x16, #0x8
0x4cd3b634  1044  bl #+0x1c (addr 0x4cd3b650)
0x4cd3b638  1048  movz x16, #0x10
0x4cd3b63c  1052  bl #+0x14 (addr 0x4cd3b650)
0x4cd3b640  1056  movz x16, #0x18
0x4cd3b644  1060  bl #+0xc (addr 0x4cd3b650)
0x4cd3b648  1064  movz x16, #0x20
0x4cd3b64c  1068  bl #+0x4 (addr 0x4cd3b650)
0x4cd3b650  1072  ldr x17, pc+24 (addr 0x000000004cd3b668)    ;; lazy deoptimization bailout 0
0x4cd3b654  1076  add x17, x17, x16
0x4cd3b658  1080  br x17
0x4cd3b65c  1084  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd3b660  1088  d63f03e0       constant
0x4cd3b664  1092  d503201f       constant
0x4cd3b668  1096  4cb06000       constant
0x4cd3b66c  1100  00000000       constant


Safepoints (size = 60)
0x4cd3b2e0   192  1111000 (sp -> fp)       5
0x4cd3b338   280  1111000 (sp -> fp)       6
0x4cd3b550   816  1111000 | x0 | x8 (sp -> fp)  <none> argc: 2
0x4cd3b598   888  1111000 | x1 | x2 | x3 | x8 (sp -> fp)  <none> argc: 2

RelocInfo (size = 37)
0x4cd3b2d8  code target (STUB)  (0x4cd06060)
0x4cd3b2f4  embedded object  (0x2a804ba1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd3b300  embedded object  (0x2a804bf9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd3b330  code target (STUB)  (0x4cd06060)
0x4cd3b368  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd3b39c  embedded object  (0x2a804ba1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd3b48c  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd3b4c4  embedded object  (0x2a804c51 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd3b4d0  embedded object  (0x2a804ca9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd3b520  code target (STUB)  (0x4cd06820)
0x4cd3b548  code target (STUB)  (0x4cd06260)
0x4cd3b554  code target (STUB)  (0x4cd068e0)
0x4cd3b568  code target (STUB)  (0x4cd06820)
0x4cd3b590  code target (STUB)  (0x4cd06260)
0x4cd3b59c  code target (STUB)  (0x4cd068e0)
0x4cd3b5a8  constant pool (size 128)
0x4cd3b650  runtime entry
0x4cd3b65c  constant pool (size 20)


kind = BINARY_OP_IC
major_key = BinaryOpICWithAllocationSiteStub
ic_state = MONOMORPHIC
extra_ic_state = 8775
type = NORMAL
name = BinaryOpICWithAllocationSiteStub(ADD_CreateAllocationMementos:String*String->String)
compiler = unknown
Instructions (size = 40)
0x4cd3b720     0  ldr x2, pc+24 (addr 0x000000004cd3b738)    ;; object: 0x21004241 <undefined>
0x4cd3b724     4  ldr x16, pc+28 (addr 0x000000004cd3b740)    ;; code: STUB, BinaryOpWithAllocationSiteStub, minor: 8775
0x4cd3b728     8  br x16
0x4cd3b72c    12  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd3b730    16  d63f03e0       constant
0x4cd3b734    20  d503201f       constant
0x4cd3b738    24  21004241       constant
0x4cd3b73c    28  00000000       constant
0x4cd3b740    32  4cd3b220       constant
0x4cd3b744    36  00000000       constant


RelocInfo (size = 8)
0x4cd3b720  embedded object  (0x21004241 <undefined>)
0x4cd3b724  code target (STUB)  (0x4cd3b220)
0x4cd3b72c  constant pool (size 28)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 285)
0x4cd3bc80     0  movz x2, #0xd2c0
0x4cd3bc84     4  movk x2, #0x166d, lsl #16
0x4cd3bc88     8  ldp x3, x0, [x2]
0x4cd3bc8c    12  adds x16, x3, #0x40 (64)
0x4cd3bc90    16  ccmp x16, x0, #nzCv, lo
0x4cd3bc94    20  b.hi #+0x4c (addr 0x4cd3bce0)
0x4cd3bc98    24  str x16, [x2]
0x4cd3bc9c    28  orr x3, x3, #0x1
0x4cd3bca0    32  ldr x0, pc+176 (addr 0x000000004cd3bd50)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd3bca4    36  stur x0, [x3, #-1]
0x4cd3bca8    40  movz x0, #0x600000000
0x4cd3bcac    44  stur x0, [x3, #7]
0x4cd3bcb0    48  stur x1, [x3, #15]
0x4cd3bcb4    52  stur cp, [x3, #23]
0x4cd3bcb8    56  ldr x0, pc+160 (addr 0x000000004cd3bd58)    ;; object: 0x21004519 <the hole>
0x4cd3bcbc    60  stur x0, [x3, #31]
0x4cd3bcc0    64  ldur x0, [cp, #39]
0x4cd3bcc4    68  stur x0, [x3, #39]
0x4cd3bcc8    72  ldr x0, pc+152 (addr 0x000000004cd3bd60)    ;; object: 0x21004241 <undefined>
0x4cd3bccc    76  stur x0, [x3, #47]
0x4cd3bcd0    80  ldr x0, pc+152 (addr 0x000000004cd3bd68)    ;; object: 0x21004241 <undefined>
0x4cd3bcd4    84  stur x0, [x3, #55]
0x4cd3bcd8    88  mov x0, x3
0x4cd3bcdc    92  ret
0x4cd3bce0    96  sub csp, jssp, #0x10 (16)
0x4cd3bce4   100  stp fp, lr, [jssp, #-16]!
0x4cd3bce8   104  movz fp, #0xa00000000
0x4cd3bcec   108  sub csp, jssp, #0x8 (8)
0x4cd3bcf0   112  str fp, [jssp, #-8]!
0x4cd3bcf4   116  add fp, jssp, #0x8 (8)
0x4cd3bcf8   120  movz x3, #0x0
0x4cd3bcfc   124  mov x16, lr
0x4cd3bd00   128  ldr x17, pc+112 (addr 0x000000004cd3bd70)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd3bd04   132  blr x17
0x4cd3bd08   136  movz x0, #0x4000000000
0x4cd3bd0c   140  movz x10, #0x0
0x4cd3bd10   144  sub csp, jssp, #0x10 (16)
0x4cd3bd14   148  stp x10, x0, [jssp, #-16]!
0x4cd3bd18   152  movz x0, #0x2
0x4cd3bd1c   156  movz x1, #0x5b88
0x4cd3bd20   160  movk x1, #0xe2, lsl #16
0x4cd3bd24   164  ldr x16, pc+84 (addr 0x000000004cd3bd78)    ;; code: STUB, CEntryStub, minor: 5
0x4cd3bd28   168  blr x16
0x4cd3bd2c   172  str x0, [jssp, #24]
0x4cd3bd30   176  ldr x16, pc+80 (addr 0x000000004cd3bd80)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd3bd34   180  blr x16
0x4cd3bd38   184  ldr lr, [jssp, #16]
0x4cd3bd3c   188  ldp xzr, fp, [jssp], #24
0x4cd3bd40   192  b #-0xa0 (addr 0x4cd3bca0)
0x4cd3bd44   196  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd3bd48   200  d63f03e0       constant
0x4cd3bd4c   204  d503201f       constant
0x4cd3bd50   208  2a806149       constant
0x4cd3bd54   212  00000000       constant
0x4cd3bd58   216  21004519       constant
0x4cd3bd5c   220  00000000       constant
0x4cd3bd60   224  21004241       constant
0x4cd3bd64   228  00000000       constant
0x4cd3bd68   232  21004241       constant
0x4cd3bd6c   236  00000000       constant
0x4cd3bd70   240  4cd06820       constant
0x4cd3bd74   244  00000000       constant
0x4cd3bd78   248  4cd06260       constant
0x4cd3bd7c   252  00000000       constant
0x4cd3bd80   256  4cd068e0       constant
0x4cd3bd84   260  00000000       constant


Safepoints (size = 21)
0x4cd3bd2c   172  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 13)
0x4cd3bca0  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd3bcb8  embedded object  (0x21004519 <the hole>)
0x4cd3bcc8  embedded object  (0x21004241 <undefined>)
0x4cd3bcd0  embedded object  (0x21004241 <undefined>)
0x4cd3bd00  code target (STUB)  (0x4cd06820)
0x4cd3bd24  code target (STUB)  (0x4cd06260)
0x4cd3bd30  code target (STUB)  (0x4cd068e0)
0x4cd3bd44  constant pool (size 68)


kind = KEYED_STORE_IC
major_key = VectorKeyedStoreICTrampolineStub
ic_state = GENERIC
extra_ic_state = STRICT
name = VectorKeyedStoreICTrampolineStub
compiler = unknown
Instructions (size = 384)
0x4cd3be00     0  ldur x3, [fp, #-16]
0x4cd3be04     4  ldur x3, [x3, #31]
0x4cd3be08     8  ldur x3, [x3, #87]
0x4cd3be0c    12  add x5, x3, x4, asr #29
0x4cd3be10    16  ldur x5, [x5, #15]
0x4cd3be14    20  tbz w1, #0, #+0x140 (addr 0x4cd3bf54)
0x4cd3be18    24  ldur x6, [x1, #-1]
0x4cd3be1c    28  ldur x7, [x5, #7]
0x4cd3be20    32  cmp x7, x6
0x4cd3be24    36  b.ne #+0x14 (addr 0x4cd3be38)
0x4cd3be28    40  add x5, x3, x4, asr #29
0x4cd3be2c    44  ldur x5, [x5, #23]
0x4cd3be30    48  add x5, x5, #0x5f (95)
0x4cd3be34    52  br x5
0x4cd3be38    56  ldur x7, [x5, #-1]
0x4cd3be3c    60  ldr x16, [x26, #224]
0x4cd3be40    64  cmp x7, x16
0x4cd3be44    68  b.ne #+0x68 (addr 0x4cd3beac)
0x4cd3be48    72  ldur x8, [x5, #7]
0x4cd3be4c    76  add x8, x5, x8, asr #29
0x4cd3be50    80  add x8, x8, #0xf (15)
0x4cd3be54    84  add x5, x5, #0xf (15)
0x4cd3be58    88  ldr x7, [x5]
0x4cd3be5c    92  ldur x7, [x7, #7]
0x4cd3be60    96  cmp x6, x7
0x4cd3be64   100  b.ne #+0x38 (addr 0x4cd3be9c)
0x4cd3be68   104  ldr x8, [x5, #8]
0x4cd3be6c   108  ldr x16, [x26, #40]
0x4cd3be70   112  cmp x8, x16
0x4cd3be74   116  b.ne #+0x10 (addr 0x4cd3be84)
0x4cd3be78   120  ldr x5, [x5, #16]
0x4cd3be7c   124  add x5, x5, #0x5f (95)
0x4cd3be80   128  br x5
0x4cd3be84   132  ldur x8, [x8, #7]
0x4cd3be88   136  tbz w8, #0, #+0xac (addr 0x4cd3bf34)
0x4cd3be8c   140  ldr x6, [x5, #16]
0x4cd3be90   144  mov x5, x8
0x4cd3be94   148  add x6, x6, #0x5f (95)
0x4cd3be98   152  br x6
0x4cd3be9c   156  add x5, x5, #0x18 (24)
0x4cd3bea0   160  cmp x5, x8
0x4cd3bea4   164  b.lt #-0x4c (addr 0x4cd3be58)
0x4cd3bea8   168  b #+0x8c (addr 0x4cd3bf34)
0x4cd3beac   172  ldr x16, [x26, #2400]
0x4cd3beb0   176  cmp x5, x16
0x4cd3beb4   180  b.ne #+0xc (addr 0x4cd3bec0)
0x4cd3beb8   184  ldr x16, pc+176 (addr 0x000000004cd3bf68)    ;; code: KEYED_STORE_IC, MEGAMORPHIC
0x4cd3bebc   188  br x16
0x4cd3bec0   192  cmp x2, x5
0x4cd3bec4   196  b.ne #+0x70 (addr 0x4cd3bf34)
0x4cd3bec8   200  add x5, x3, x4, asr #29
0x4cd3becc   204  ldur x5, [x5, #23]
0x4cd3bed0   208  ldur x7, [x5, #15]
0x4cd3bed4   212  ldur x7, [x7, #7]
0x4cd3bed8   216  cmp x6, x7
0x4cd3bedc   220  b.ne #+0x10 (addr 0x4cd3beec)
0x4cd3bee0   224  ldur x5, [x5, #23]
0x4cd3bee4   228  add x5, x5, #0x5f (95)
0x4cd3bee8   232  br x5
0x4cd3beec   236  ldur x8, [x5, #7]
0x4cd3bef0   240  movz x16, #0x200000000
0x4cd3bef4   244  cmp x8, x16
0x4cd3bef8   248  b.eq #+0x3c (addr 0x4cd3bf34)
0x4cd3befc   252  add x8, x5, x8, asr #29
0x4cd3bf00   256  add x8, x8, #0xf (15)
0x4cd3bf04   260  add x5, x5, #0x1f (31)
0x4cd3bf08   264  ldr x7, [x5]
0x4cd3bf0c   268  ldur x7, [x7, #7]
0x4cd3bf10   272  cmp x6, x7
0x4cd3bf14   276  b.ne #+0x10 (addr 0x4cd3bf24)
0x4cd3bf18   280  ldr x5, [x5, #8]
0x4cd3bf1c   284  add x5, x5, #0x5f (95)
0x4cd3bf20   288  br x5
0x4cd3bf24   292  add x5, x5, #0x10 (16)
0x4cd3bf28   296  cmp x5, x8
0x4cd3bf2c   300  b.lt #-0x24 (addr 0x4cd3bf08)
0x4cd3bf30   304  b #+0x4 (addr 0x4cd3bf34)
0x4cd3bf34   308  sub csp, jssp, #0x28 (40)
0x4cd3bf38   312  stp x4, x0, [jssp, #-32]!
0x4cd3bf3c   316  stp x2, x1, [jssp, #16]
0x4cd3bf40   320  str x3, [jssp, #-8]!
0x4cd3bf44   324  movz x0, #0x5
0x4cd3bf48   328  ldr x1, pc+40 (addr 0x000000004cd3bf70)    ;; external reference (Runtime::KeyedStoreIC_Miss)
0x4cd3bf4c   332  ldr x16, pc+44 (addr 0x000000004cd3bf78)    ;; code: STUB, CEntryStub, minor: 4
0x4cd3bf50   336  br x16
0x4cd3bf54   340  ldr x6, [x26, #120]
0x4cd3bf58   344  b #-0x13c (addr 0x4cd3be1c)
0x4cd3bf5c   348  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd3bf60   352  d63f03e0       constant
0x4cd3bf64   356  d503201f       constant
0x4cd3bf68   360  4cd263a0       constant
0x4cd3bf6c   364  00000000       constant
0x4cd3bf70   368  00c88e08       constant
0x4cd3bf74   372  00000000       constant
0x4cd3bf78   376  4cd06060       constant
0x4cd3bf7c   380  00000000       constant


RelocInfo (size = 14)
0x4cd3beb8  code target (KEYED_STORE_IC)  (0x4cd263a0)
0x4cd3bf48  external reference (Runtime::KeyedStoreIC_Miss)  (0xc88e08)
0x4cd3bf4c  code target (STUB)  (0x4cd06060)
0x4cd3bf5c  constant pool (size 36)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd3cc20     0  ldur x0, [x1, #7]
0x4cd3cc24     4  movz x16, #0x1bf
0x4cd3cc28     8  ldr x0, [x0, x16]
0x4cd3cc2c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd3cca0     0  ldur x0, [x1, #7]
0x4cd3cca4     4  movz x16, #0x1c7
0x4cd3cca8     8  ldr x0, [x0, x16]
0x4cd3ccac    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd3cd20     0  ldur x0, [x1, #7]
0x4cd3cd24     4  movz x16, #0x17f
0x4cd3cd28     8  ldr x0, [x0, x16]
0x4cd3cd2c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd3cda0     0  ldur x0, [x1, #7]
0x4cd3cda4     4  movz x16, #0x1af
0x4cd3cda8     8  ldr x0, [x0, x16]
0x4cd3cdac    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd3ce20     0  ldur x0, [x1, #7]
0x4cd3ce24     4  movz x16, #0x1b7
0x4cd3ce28     8  ldr x0, [x0, x16]
0x4cd3ce2c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 88)
0x4cd3cea0     0  stur x5, [x1, #-1]
0x4cd3cea4     4  tbz w5, #0, #+0x34 (addr 0x4cd3ced8)
0x4cd3cea8     8  sub x2, x1, #0x1 (1)
0x4cd3ceac    12  and x5, x5, #0xfffffffffff00000
0x4cd3ceb0    16  ldr x5, [x5, #8]
0x4cd3ceb4    20  tbz w5, #1, #+0x24 (addr 0x4cd3ced8)
0x4cd3ceb8    24  and x5, x1, #0xfffffffffff00000
0x4cd3cebc    28  ldr x5, [x5, #8]
0x4cd3cec0    32  tbz w5, #2, #+0x18 (addr 0x4cd3ced8)
0x4cd3cec4    36  sub csp, jssp, #0x8 (8)
0x4cd3cec8    40  str lr, [jssp, #-8]!
0x4cd3cecc    44  ldr x16, pc+28 (addr 0x000000004cd3cee8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd3ced0    48  blr x16
0x4cd3ced4    52  ldr lr, [jssp], #8
0x4cd3ced8    56  ret
0x4cd3cedc    60  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd3cee0    64  d63f03e0       constant
0x4cd3cee4    68  d503201f       constant
0x4cd3cee8    72  4cd38080       constant
0x4cd3ceec    76  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 7)
0x4cd3cecc  code target (STUB)  (0x4cd38080)
0x4cd3cedc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = next
compiler = unknown
Instructions (size = 168)
0x4cd3cf60     0  sub csp, jssp, #0x8 (8)
0x4cd3cf64     4  str x3, [jssp, #-8]!
0x4cd3cf68     8  sub csp, jssp, #0x8 (8)
0x4cd3cf6c    12  str x4, [jssp, #-8]!
0x4cd3cf70    16  ldr x3, pc+104 (addr 0x000000004cd3cfd8)    ;; object: 0x2105b0f1 Cell for 0
0x4cd3cf74    20  ldur x3, [x3, #7]
0x4cd3cf78    24  cmp x3, #0x0 (0)
0x4cd3cf7c    28  b.ne #+0x3c (addr 0x4cd3cfb8)
0x4cd3cf80    32  ldr x5, pc+96 (addr 0x000000004cd3cfe0)    ;; object: 0x2105b101 WeakCell for 0x2a80c6b1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd3cf84    36  ldur x5, [x5, #7]
0x4cd3cf88    40  tbz w5, #0, #+0x30 (addr 0x4cd3cfb8)
0x4cd3cf8c    44  ldursw x4, [x5, #15]
0x4cd3cf90    48  tbnz w4, #23, #+0x28 (addr 0x4cd3cfb8)
0x4cd3cf94    52  ldur x4, [x5, #47]
0x4cd3cf98    56  ldur x4, [x4, #119]
0x4cd3cf9c    60  cmp x0, x4
0x4cd3cfa0    64  b.ne #+0x18 (addr 0x4cd3cfb8)
0x4cd3cfa4    68  ldr x4, [jssp], #8
0x4cd3cfa8    72  ldr x3, [jssp], #8
0x4cd3cfac    76  ldr x2, pc+60 (addr 0x000000004cd3cfe8)    ;; object: 0x21005209 <String[4]: next>
0x4cd3cfb0    80  ldr x16, pc+64 (addr 0x000000004cd3cff0)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0x4cd3cfb4    84  br x16
0x4cd3cfb8    88  ldr x2, pc+64 (addr 0x000000004cd3cff8)    ;; object: 0x21005209 <String[4]: next>
0x4cd3cfbc    92  ldr x4, [jssp], #8
0x4cd3cfc0    96  ldr x3, [jssp], #8
0x4cd3cfc4   100  ldr x16, pc+60 (addr 0x000000004cd3d000)    ;; code: BUILTIN
0x4cd3cfc8   104  br x16
0x4cd3cfcc   108  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cd3cfd0   112  d63f03e0       constant
0x4cd3cfd4   116  d503201f       constant
0x4cd3cfd8   120  2105b0f1       constant
0x4cd3cfdc   124  00000000       constant
0x4cd3cfe0   128  2105b101       constant
0x4cd3cfe4   132  00000000       constant
0x4cd3cfe8   136  21005209       constant
0x4cd3cfec   140  00000000       constant
0x4cd3cff0   144  4cd3cea0       constant
0x4cd3cff4   148  00000000       constant
0x4cd3cff8   152  21005209       constant
0x4cd3cffc   156  00000000       constant
0x4cd3d000   160  4cd22420       constant
0x4cd3d004   164  00000000       constant


RelocInfo (size = 12)
0x4cd3cf70  embedded object  (0x2105b0f1 Cell for 0)
0x4cd3cf80  embedded object  (0x2105b101 WeakCell for 0x2a80c6b1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd3cfac  embedded object  (0x21005209 <String[4]: next>)
0x4cd3cfb0  code target (HANDLER)  (0x4cd3cea0)
0x4cd3cfb8  embedded object  (0x21005209 <String[4]: next>)
0x4cd3cfc4  code target (BUILTIN)  (0x4cd22420)
0x4cd3cfcc  constant pool (size 60)

kind = STUB
major_key = FastCloneShallowObjectStub
name = FastCloneShallowObjectStub
compiler = crankshaft
Instructions (size = 509)
0x4cd3d320     0  ldur x4, [x3, #47]
0x4cd3d324     4  tbnz w2, #0, #+0xc0 (addr 0x4cd3d3e4)
0x4cd3d328     8  asr x6, x2, #32
0x4cd3d32c    12  add x5, x4, #0x17 (23)
0x4cd3d330    16  ldr x7, [x5, w6, sxtw #3]
0x4cd3d334    20  ldr x4, pc+356 (addr 0x000000004cd3d498)    ;; object: 0x21004241 <undefined>
0x4cd3d338    24  cmp x7, x4
0x4cd3d33c    28  b.eq #+0xa4 (addr 0x4cd3d3e0)
0x4cd3d340    32  ldur x4, [x7, #7]
0x4cd3d344    36  ldur x5, [x4, #-1]
0x4cd3d348    40  ldrb w6, [x5, #7]
0x4cd3d34c    44  cmp w6, #0x9 (9)
0x4cd3d350    48  b.ne #+0x90 (addr 0x4cd3d3e0)
0x4cd3d354    52  movz x1, #0xd2c0
0x4cd3d358    56  movk x1, #0x166d, lsl #16
0x4cd3d35c    60  ldp x2, x0, [x1]
0x4cd3d360    64  adds x16, x2, #0x58 (88)
0x4cd3d364    68  ccmp x16, x0, #nzCv, lo
0x4cd3d368    72  b.hi #+0xc4 (addr 0x4cd3d42c)
0x4cd3d36c    76  str x16, [x1]
0x4cd3d370    80  orr x2, x2, #0x1
0x4cd3d374    84  stur x5, [x2, #-1]
0x4cd3d378    88  ldur x0, [x4, #7]
0x4cd3d37c    92  stur x0, [x2, #7]
0x4cd3d380    96  ldur x0, [x4, #15]
0x4cd3d384   100  stur x0, [x2, #15]
0x4cd3d388   104  ldur x0, [x4, #23]
0x4cd3d38c   108  stur x0, [x2, #23]
0x4cd3d390   112  ldur x0, [x4, #31]
0x4cd3d394   116  stur x0, [x2, #31]
0x4cd3d398   120  ldur x0, [x4, #39]
0x4cd3d39c   124  stur x0, [x2, #39]
0x4cd3d3a0   128  ldur x0, [x4, #47]
0x4cd3d3a4   132  stur x0, [x2, #47]
0x4cd3d3a8   136  ldur x0, [x4, #55]
0x4cd3d3ac   140  stur x0, [x2, #55]
0x4cd3d3b0   144  ldur x0, [x4, #63]
0x4cd3d3b4   148  stur x0, [x2, #63]
0x4cd3d3b8   152  add x0, x2, #0x48 (72)
0x4cd3d3bc   156  ldr x1, pc+228 (addr 0x000000004cd3d4a0)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd3d3c0   160  stur x1, [x0, #-1]
0x4cd3d3c4   164  stur x7, [x0, #7]
0x4cd3d3c8   168  ldur w0, [x7, #35]
0x4cd3d3cc   172  add w0, w0, #0x1 (1)
0x4cd3d3d0   176  lsl x0, x0, #32
0x4cd3d3d4   180  stur x0, [x7, #31]
0x4cd3d3d8   184  mov x0, x2
0x4cd3d3dc   188  ret
0x4cd3d3e0   192  b #+0xe0 (addr 0x4cd3d4c0)
0x4cd3d3e4   196  sub csp, jssp, #0x10 (16)
0x4cd3d3e8   200  stp fp, lr, [jssp, #-16]!
0x4cd3d3ec   204  movz fp, #0xa00000000
0x4cd3d3f0   208  sub csp, jssp, #0x8 (8)
0x4cd3d3f4   212  str fp, [jssp, #-8]!
0x4cd3d3f8   216  add fp, jssp, #0x8 (8)
0x4cd3d3fc   220  ldur x16, [x2, #-1]
0x4cd3d400   224  ldr x17, [x26, #120]
0x4cd3d404   228  cmp x16, x17
0x4cd3d408   232  b.ne #+0xc8 (addr 0x4cd3d4d0)
0x4cd3d40c   236  ldur d29, [x2, #7]
0x4cd3d410   240  fcvtzs w6, d29
0x4cd3d414   244  scvtf d0, w6
0x4cd3d418   248  fcmp d29, d0
0x4cd3d41c   252  b.ne #+0xb4 (addr 0x4cd3d4d0)
0x4cd3d420   256  ldr lr, [jssp, #16]
0x4cd3d424   260  ldp xzr, fp, [jssp], #24
0x4cd3d428   264  b #-0xfc (addr 0x4cd3d32c)
0x4cd3d42c   268  sub csp, jssp, #0x10 (16)
0x4cd3d430   272  stp fp, lr, [jssp, #-16]!
0x4cd3d434   276  movz fp, #0xa00000000
0x4cd3d438   280  sub csp, jssp, #0x8 (8)
0x4cd3d43c   284  str fp, [jssp, #-8]!
0x4cd3d440   288  add fp, jssp, #0x8 (8)
0x4cd3d444   292  movz x2, #0x0
0x4cd3d448   296  mov x16, lr
0x4cd3d44c   300  ldr x17, pc+92 (addr 0x000000004cd3d4a8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd3d450   304  blr x17
0x4cd3d454   308  movz x0, #0x5800000000
0x4cd3d458   312  movz x10, #0x0
0x4cd3d45c   316  sub csp, jssp, #0x10 (16)
0x4cd3d460   320  stp x10, x0, [jssp, #-16]!
0x4cd3d464   324  movz x0, #0x2
0x4cd3d468   328  movz x1, #0x5b88
0x4cd3d46c   332  movk x1, #0xe2, lsl #16
0x4cd3d470   336  ldr x16, pc+64 (addr 0x000000004cd3d4b0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd3d474   340  blr x16
0x4cd3d478   344  str x0, [jssp, #16]
0x4cd3d47c   348  ldr x16, pc+60 (addr 0x000000004cd3d4b8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd3d480   352  blr x16
0x4cd3d484   356  ldr lr, [jssp, #16]
0x4cd3d488   360  ldp xzr, fp, [jssp], #24
0x4cd3d48c   364  b #-0x118 (addr 0x4cd3d374)
0x4cd3d490   368  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0x4cd3d494   372  d63f03e0       constant
0x4cd3d498   376  21004241       constant
0x4cd3d49c   380  00000000       constant
0x4cd3d4a0   384  2a805d81       constant
0x4cd3d4a4   388  00000000       constant
0x4cd3d4a8   392  4cd06820       constant
0x4cd3d4ac   396  00000000       constant
0x4cd3d4b0   400  4cd06260       constant
0x4cd3d4b4   404  00000000       constant
0x4cd3d4b8   408  4cd068e0       constant
0x4cd3d4bc   412  00000000       constant
0x4cd3d4c0   416  movz x16, #0x0
0x4cd3d4c4   420  sub csp, jssp, #0x10 (16)
0x4cd3d4c8   424  stp fp, lr, [jssp, #-16]!
0x4cd3d4cc   428  bl #+0xc (addr 0x4cd3d4d8)
0x4cd3d4d0   432  movz x16, #0x8
0x4cd3d4d4   436  bl #+0x14 (addr 0x4cd3d4e8)
0x4cd3d4d8   440  movz x17, #0xa00000000
0x4cd3d4dc   444  sub csp, jssp, #0x10 (16)
0x4cd3d4e0   448  stp x17, cp, [jssp, #-16]!
0x4cd3d4e4   452  add fp, jssp, #0x10 (16)
0x4cd3d4e8   456  ldr x17, pc+24 (addr 0x000000004cd3d500)    ;; lazy deoptimization bailout 0
0x4cd3d4ec   460  add x17, x17, x16
0x4cd3d4f0   464  br x17
0x4cd3d4f4   468  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd3d4f8   472  d63f03e0       constant
0x4cd3d4fc   476  d503201f       constant
0x4cd3d500   480  4cb06000       constant
0x4cd3d504   484  00000000       constant


Safepoints (size = 21)
0x4cd3d478   344  000 | x2 | x4 | x5 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 25)
0x4cd3d334  embedded object  (0x21004241 <undefined>)
0x4cd3d3bc  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd3d44c  code target (STUB)  (0x4cd06820)
0x4cd3d470  code target (STUB)  (0x4cd06260)
0x4cd3d47c  code target (STUB)  (0x4cd068e0)
0x4cd3d490  constant pool (size 48)
0x4cd3d4e8  runtime entry
0x4cd3d4f4  constant pool (size 20)


kind = STUB
major_key = ArrayConstructorStub
name = ArrayConstructorStub_None
compiler = unknown
Instructions (size = 288)
0x4cd3d580     0  ldur cp, [x1, #39]
0x4cd3d584     4  cmp x3, x1
0x4cd3d588     8  b.ne #+0x98 (addr 0x4cd3d620)
0x4cd3d58c    12  ldr x16, [x26, #40]
0x4cd3d590    16  cmp x2, x16
0x4cd3d594    20  b.eq #+0x84 (addr 0x4cd3d618)
0x4cd3d598    24  ldursw x3, [x2, #11]
0x4cd3d59c    28  and x3, x3, #0x7fff
0x4cd3d5a0    32  cbnz x3, #+0xc (addr 0x4cd3d5ac)
0x4cd3d5a4    36  ldr x16, pc+164 (addr 0x000000004cd3d648)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 0
0x4cd3d5a8    40  br x16
0x4cd3d5ac    44  cmp x3, #0x1 (1)
0x4cd3d5b0    48  b.ne #+0xc (addr 0x4cd3d5bc)
0x4cd3d5b4    52  ldr x16, pc+156 (addr 0x000000004cd3d650)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 1
0x4cd3d5b8    56  br x16
0x4cd3d5bc    60  cmp x3, #0x4 (4)
0x4cd3d5c0    64  b.ne #+0xc (addr 0x4cd3d5cc)
0x4cd3d5c4    68  ldr x16, pc+148 (addr 0x000000004cd3d658)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 4
0x4cd3d5c8    72  br x16
0x4cd3d5cc    76  cmp x3, #0x5 (5)
0x4cd3d5d0    80  b.ne #+0xc (addr 0x4cd3d5dc)
0x4cd3d5d4    84  ldr x16, pc+140 (addr 0x000000004cd3d660)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 5
0x4cd3d5d8    88  br x16
0x4cd3d5dc    92  cmp x3, #0x2 (2)
0x4cd3d5e0    96  b.ne #+0xc (addr 0x4cd3d5ec)
0x4cd3d5e4   100  ldr x16, pc+132 (addr 0x000000004cd3d668)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 2
0x4cd3d5e8   104  br x16
0x4cd3d5ec   108  cmp x3, #0x3 (3)
0x4cd3d5f0   112  b.ne #+0xc (addr 0x4cd3d5fc)
0x4cd3d5f4   116  ldr x16, pc+124 (addr 0x000000004cd3d670)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 3
0x4cd3d5f8   120  br x16
0x4cd3d5fc   124  movz x0, #0x9f00000000
0x4cd3d600   128  sub csp, jssp, #0x8 (8)
0x4cd3d604   132  str x0, [jssp, #-8]!
0x4cd3d608   136  movz x0, #0x1
0x4cd3d60c   140  ldr x1, pc+108 (addr 0x000000004cd3d678)    ;; external reference (Runtime::Abort)
0x4cd3d610   144  ldr x16, pc+112 (addr 0x000000004cd3d680)    ;; code: STUB, CEntryStub, minor: 4
0x4cd3d614   148  blr x16
0x4cd3d618   152  ldr x16, pc+112 (addr 0x000000004cd3d688)    ;; code: STUB, ArrayNoArgumentConstructorStub, minor: 256
0x4cd3d61c   156  br x16
0x4cd3d620   160  str x1, [jssp]
0x4cd3d624   164  movz x0, #0x3
0x4cd3d628   168  sub csp, jssp, #0x10 (16)
0x4cd3d62c   172  stp x2, x3, [jssp, #-16]!
0x4cd3d630   176  ldr x1, pc+96 (addr 0x000000004cd3d690)    ;; external reference (Runtime::NewArray)
0x4cd3d634   180  ldr x16, pc+100 (addr 0x000000004cd3d698)    ;; code: STUB, CEntryStub, minor: 4
0x4cd3d638   184  br x16
0x4cd3d63c   188  5800031f       constant pool begin (num_const = 24)    ;; constant pool
0x4cd3d640   192  d63f03e0       constant
0x4cd3d644   196  d503201f       constant
0x4cd3d648   200  4cd069a0       constant
0x4cd3d64c   204  00000000       constant
0x4cd3d650   208  4cd06e00       constant
0x4cd3d654   212  00000000       constant
0x4cd3d658   216  4cd07280       constant
0x4cd3d65c   220  00000000       constant
0x4cd3d660   224  4cd07480       constant
0x4cd3d664   228  00000000       constant
0x4cd3d668   232  4cd07680       constant
0x4cd3d66c   236  00000000       constant
0x4cd3d670   240  4cd078a0       constant
0x4cd3d674   244  00000000       constant
0x4cd3d678   248  00eda820       constant
0x4cd3d67c   252  00000000       constant
0x4cd3d680   256  4cd06060       constant
0x4cd3d684   260  00000000       constant
0x4cd3d688   264  4cd06be0       constant
0x4cd3d68c   268  00000000       constant
0x4cd3d690   272  00de2850       constant
0x4cd3d694   276  00000000       constant
0x4cd3d698   280  4cd06060       constant
0x4cd3d69c   284  00000000       constant


RelocInfo (size = 19)
0x4cd3d5a4  code target (STUB)  (0x4cd069a0)
0x4cd3d5b4  code target (STUB)  (0x4cd06e00)
0x4cd3d5c4  code target (STUB)  (0x4cd07280)
0x4cd3d5d4  code target (STUB)  (0x4cd07480)
0x4cd3d5e4  code target (STUB)  (0x4cd07680)
0x4cd3d5f4  code target (STUB)  (0x4cd078a0)
0x4cd3d60c  external reference (Runtime::Abort)  (0xeda820)
0x4cd3d610  code target (STUB)  (0x4cd06060)
0x4cd3d618  code target (STUB)  (0x4cd06be0)
0x4cd3d630  external reference (Runtime::NewArray)  (0xde2850)
0x4cd3d634  code target (STUB)  (0x4cd06060)
0x4cd3d63c  constant pool (size 100)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 393216
name = CallICStub(args(0), ANY, 
compiler = unknown
Instructions (size = 488)
0x4cd3d700     0  add x4, x2, x3, asr #29
0x4cd3d704     4  ldur x4, [x4, #15]
0x4cd3d708     8  ldur x5, [x4, #7]
0x4cd3d70c    12  cmp x5, x1
0x4cd3d710    16  b.ne #+0x2c (addr 0x4cd3d73c)
0x4cd3d714    20  tbz w1, #0, #+0x28 (addr 0x4cd3d73c)
0x4cd3d718    24  add x2, x2, x3, asr #29
0x4cd3d71c    28  add x2, x2, #0x18 (24)
0x4cd3d720    32  ldur x3, [x2, #-1]
0x4cd3d724    36  movz x16, #0x200000000
0x4cd3d728    40  add x3, x3, x16
0x4cd3d72c    44  stur x3, [x2, #-1]
0x4cd3d730    48  movz x0, #0x0
0x4cd3d734    52  ldr x16, pc+372 (addr 0x000000004cd3d8a8)    ;; code: BUILTIN
0x4cd3d738    56  br x16
0x4cd3d73c    60  ldr x16, [x26, #2400]
0x4cd3d740    64  cmp x4, x16
0x4cd3d744    68  b.eq #+0x78 (addr 0x4cd3d7bc)
0x4cd3d748    72  ldur x5, [x4, #-1]
0x4cd3d74c    76  ldr x16, [x26, #2736]
0x4cd3d750    80  cmp x5, x16
0x4cd3d754    84  b.ne #+0x40 (addr 0x4cd3d794)
0x4cd3d758    88  ldur x5, [cp, #39]
0x4cd3d75c    92  ldur x5, [x5, #95]
0x4cd3d760    96  cmp x1, x5
0x4cd3d764   100  b.ne #+0xec (addr 0x4cd3d850)
0x4cd3d768   104  movz x0, #0x0
0x4cd3d76c   108  add x2, x2, x3, asr #29
0x4cd3d770   112  add x2, x2, #0x18 (24)
0x4cd3d774   116  ldur x3, [x2, #-1]
0x4cd3d778   120  movz x16, #0x200000000
0x4cd3d77c   124  add x3, x3, x16
0x4cd3d780   128  stur x3, [x2, #-1]
0x4cd3d784   132  mov x2, x4
0x4cd3d788   136  mov x3, x1
0x4cd3d78c   140  ldr x16, pc+292 (addr 0x000000004cd3d8b0)    ;; code: STUB, ArrayConstructorStub, minor: 1
0x4cd3d790   144  br x16
0x4cd3d794   148  ldr x16, [x26, #2568]
0x4cd3d798   152  cmp x4, x16
0x4cd3d79c   156  b.eq #+0xb4 (addr 0x4cd3d850)
0x4cd3d7a0   160  ldur x5, [x4, #-1]
0x4cd3d7a4   164  ldrb w5, [x5, #11]
0x4cd3d7a8   168  cmp x5, #0xc9 (201)
0x4cd3d7ac   172  b.ne #+0xa4 (addr 0x4cd3d850)
0x4cd3d7b0   176  add x4, x2, x3, asr #29
0x4cd3d7b4   180  ldr x5, [x26, #2400]
0x4cd3d7b8   184  stur x5, [x4, #15]
0x4cd3d7bc   188  movz x0, #0x0
0x4cd3d7c0   192  ldr x16, pc+248 (addr 0x000000004cd3d8b8)    ;; code: BUILTIN
0x4cd3d7c4   196  br x16
0x4cd3d7c8   200  tbz w1, #0, #+0x88 (addr 0x4cd3d850)
0x4cd3d7cc   204  ldur x5, [x1, #-1]
0x4cd3d7d0   208  ldrb w5, [x5, #11]
0x4cd3d7d4   212  cmp x5, #0xc9 (201)
0x4cd3d7d8   216  b.ne #+0x78 (addr 0x4cd3d850)
0x4cd3d7dc   220  ldur x5, [cp, #39]
0x4cd3d7e0   224  ldur x5, [x5, #95]
0x4cd3d7e4   228  cmp x1, x5
0x4cd3d7e8   232  b.eq #+0x68 (addr 0x4cd3d850)
0x4cd3d7ec   236  ldur x4, [x1, #39]
0x4cd3d7f0   240  ldur x4, [x4, #39]
0x4cd3d7f4   244  ldur x5, [cp, #39]
0x4cd3d7f8   248  cmp x4, x5
0x4cd3d7fc   252  b.ne #+0x54 (addr 0x4cd3d850)
0x4cd3d800   256  movz x5, #0x200000000
0x4cd3d804   260  adds x4, x2, x3, asr #29
0x4cd3d808   264  stur x5, [x4, #23]
0x4cd3d80c   268  movz x16, #0xc00000000
0x4cd3d810   272  sub csp, jssp, #0x10 (16)
0x4cd3d814   276  stp fp, lr, [jssp, #-16]!
0x4cd3d818   280  sub csp, jssp, #0x10 (16)
0x4cd3d81c   284  str x16, [jssp, #-8]!
0x4cd3d820   288  ldr x17, pc+160 (addr 0x000000004cd3d8c0)    ;; object: 0x4cd3d6a1 <Code: CALL_IC>
0x4cd3d824   292  sub csp, jssp, #0x10 (16)
0x4cd3d828   296  str x17, [jssp, #-8]!
0x4cd3d82c   300  add fp, jssp, #0x10 (16)
0x4cd3d830   304  sub csp, jssp, #0x8 (8)
0x4cd3d834   308  str x1, [jssp, #-8]!
0x4cd3d838   312  ldr x16, pc+144 (addr 0x000000004cd3d8c8)    ;; code: STUB, CreateWeakCellStub, minor: 0
0x4cd3d83c   316  blr x16
0x4cd3d840   320  ldr x1, [jssp], #8
0x4cd3d844   324  mov jssp, fp
0x4cd3d848   328  ldp fp, lr, [jssp], #16
0x4cd3d84c   332  b #-0x11c (addr 0x4cd3d730)
0x4cd3d850   336  movz x16, #0xc00000000
0x4cd3d854   340  sub csp, jssp, #0x10 (16)
0x4cd3d858   344  stp fp, lr, [jssp, #-16]!
0x4cd3d85c   348  sub csp, jssp, #0x10 (16)
0x4cd3d860   352  str x16, [jssp, #-8]!
0x4cd3d864   356  ldr x17, pc+108 (addr 0x000000004cd3d8d0)    ;; object: 0x4cd3d6a1 <Code: CALL_IC>
0x4cd3d868   360  sub csp, jssp, #0x10 (16)
0x4cd3d86c   364  str x17, [jssp, #-8]!
0x4cd3d870   368  add fp, jssp, #0x10 (16)
0x4cd3d874   372  sub csp, jssp, #0x18 (24)
0x4cd3d878   376  stp x3, x2, [jssp, #-24]!
0x4cd3d87c   380  str x1, [jssp, #16]
0x4cd3d880   384  movz x0, #0x3
0x4cd3d884   388  ldr x1, pc+84 (addr 0x000000004cd3d8d8)    ;; external reference (Runtime::CallIC_Miss)
0x4cd3d888   392  ldr x16, pc+88 (addr 0x000000004cd3d8e0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd3d88c   396  blr x16
0x4cd3d890   400  mov x1, x0
0x4cd3d894   404  mov jssp, fp
0x4cd3d898   408  ldp fp, lr, [jssp], #16
0x4cd3d89c   412  b #-0xe0 (addr 0x4cd3d7bc)
0x4cd3d8a0   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4cd3d8a4   420  d63f03e0       constant
0x4cd3d8a8   424  4cd1e820       constant
0x4cd3d8ac   428  00000000       constant
0x4cd3d8b0   432  4cd3d580       constant
0x4cd3d8b4   436  00000000       constant
0x4cd3d8b8   440  4cd1f820       constant
0x4cd3d8bc   444  00000000       constant
0x4cd3d8c0   448  4cd3d6a1       constant
0x4cd3d8c4   452  00000000       constant
0x4cd3d8c8   456  4cd0ddc0       constant
0x4cd3d8cc   460  00000000       constant
0x4cd3d8d0   464  4cd3d6a1       constant
0x4cd3d8d4   468  00000000       constant
0x4cd3d8d8   472  00c86928       constant
0x4cd3d8dc   476  00000000       constant
0x4cd3d8e0   480  4cd06060       constant
0x4cd3d8e4   484  00000000       constant


RelocInfo (size = 19)
0x4cd3d734  code target (BUILTIN)  (0x4cd1e820)
0x4cd3d78c  code target (STUB)  (0x4cd3d580)
0x4cd3d7c0  code target (BUILTIN)  (0x4cd1f820)
0x4cd3d820  embedded object  (0x4cd3d6a1 <Code: CALL_IC>)
0x4cd3d838  code target (STUB)  (0x4cd0ddc0)
0x4cd3d864  embedded object  (0x4cd3d6a1 <Code: CALL_IC>)
0x4cd3d884  external reference (Runtime::CallIC_Miss)  (0xc86928)
0x4cd3d888  code target (STUB)  (0x4cd06060)
0x4cd3d8a0  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 393216
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0x4cd3d960     0  ldur x2, [fp, #-16]
0x4cd3d964     4  ldur x2, [x2, #31]
0x4cd3d968     8  ldur x2, [x2, #87]
0x4cd3d96c    12  ldr x16, pc+20 (addr 0x000000004cd3d980)    ;; code: CALL_IC, GENERIC
0x4cd3d970    16  br x16
0x4cd3d974    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd3d978    24  d63f03e0       constant
0x4cd3d97c    28  d503201f       constant
0x4cd3d980    32  4cd3d700       constant
0x4cd3d984    36  00000000       constant


RelocInfo (size = 7)
0x4cd3d96c  code target (CALL_IC)  (0x4cd3d700)
0x4cd3d974  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = next
compiler = unknown
Instructions (size = 152)
0x4cd411c0     0  sub csp, jssp, #0x8 (8)
0x4cd411c4     4  str x3, [jssp, #-8]!
0x4cd411c8     8  sub csp, jssp, #0x8 (8)
0x4cd411cc    12  str x4, [jssp, #-8]!
0x4cd411d0    16  ldr x3, pc+88 (addr 0x000000004cd41228)    ;; object: 0x2105b0f1 Cell for 0
0x4cd411d4    20  ldur x3, [x3, #7]
0x4cd411d8    24  cmp x3, #0x0 (0)
0x4cd411dc    28  b.ne #+0x30 (addr 0x4cd4120c)
0x4cd411e0    32  tbz w0, #0, #+0x2c (addr 0x4cd4120c)
0x4cd411e4    36  ldr x5, pc+76 (addr 0x000000004cd41230)    ;; object: 0x21062a21 WeakCell for 0x2a80c9c9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd411e8    40  ldur x5, [x5, #7]
0x4cd411ec    44  tbz w5, #0, #+0x20 (addr 0x4cd4120c)
0x4cd411f0    48  ldursw x4, [x5, #15]
0x4cd411f4    52  tbnz w4, #23, #+0x18 (addr 0x4cd4120c)
0x4cd411f8    56  ldr x4, [jssp], #8
0x4cd411fc    60  ldr x3, [jssp], #8
0x4cd41200    64  ldr x2, pc+56 (addr 0x000000004cd41238)    ;; object: 0x21005209 <String[4]: next>
0x4cd41204    68  ldr x16, pc+60 (addr 0x000000004cd41240)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0x4cd41208    72  br x16
0x4cd4120c    76  ldr x2, pc+60 (addr 0x000000004cd41248)    ;; object: 0x21005209 <String[4]: next>
0x4cd41210    80  ldr x4, [jssp], #8
0x4cd41214    84  ldr x3, [jssp], #8
0x4cd41218    88  ldr x16, pc+56 (addr 0x000000004cd41250)    ;; code: BUILTIN
0x4cd4121c    92  br x16
0x4cd41220    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd41224   100  d63f03e0       constant
0x4cd41228   104  2105b0f1       constant
0x4cd4122c   108  00000000       constant
0x4cd41230   112  21062a21       constant
0x4cd41234   116  00000000       constant
0x4cd41238   120  21005209       constant
0x4cd4123c   124  00000000       constant
0x4cd41240   128  4cd38860       constant
0x4cd41244   132  00000000       constant
0x4cd41248   136  21005209       constant
0x4cd4124c   140  00000000       constant
0x4cd41250   144  4cd22420       constant
0x4cd41254   148  00000000       constant


RelocInfo (size = 12)
0x4cd411d0  embedded object  (0x2105b0f1 Cell for 0)
0x4cd411e4  embedded object  (0x21062a21 WeakCell for 0x2a80c9c9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd41200  embedded object  (0x21005209 <String[4]: next>)
0x4cd41204  code target (HANDLER)  (0x4cd38860)
0x4cd4120c  embedded object  (0x21005209 <String[4]: next>)
0x4cd41218  code target (BUILTIN)  (0x4cd22420)
0x4cd41220  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = next
compiler = unknown
Instructions (size = 152)
0x4cd412c0     0  sub csp, jssp, #0x8 (8)
0x4cd412c4     4  str x3, [jssp, #-8]!
0x4cd412c8     8  sub csp, jssp, #0x8 (8)
0x4cd412cc    12  str x4, [jssp, #-8]!
0x4cd412d0    16  ldr x3, pc+88 (addr 0x000000004cd41328)    ;; object: 0x2105b0f1 Cell for 0
0x4cd412d4    20  ldur x3, [x3, #7]
0x4cd412d8    24  cmp x3, #0x0 (0)
0x4cd412dc    28  b.ne #+0x30 (addr 0x4cd4130c)
0x4cd412e0    32  tbz w0, #0, #+0x2c (addr 0x4cd4130c)
0x4cd412e4    36  ldr x5, pc+76 (addr 0x000000004cd41330)    ;; object: 0x21062a21 WeakCell for 0x2a80c9c9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd412e8    40  ldur x5, [x5, #7]
0x4cd412ec    44  tbz w5, #0, #+0x20 (addr 0x4cd4130c)
0x4cd412f0    48  ldursw x4, [x5, #15]
0x4cd412f4    52  tbnz w4, #23, #+0x18 (addr 0x4cd4130c)
0x4cd412f8    56  ldr x4, [jssp], #8
0x4cd412fc    60  ldr x3, [jssp], #8
0x4cd41300    64  ldr x2, pc+56 (addr 0x000000004cd41338)    ;; object: 0x21005209 <String[4]: next>
0x4cd41304    68  ldr x16, pc+60 (addr 0x000000004cd41340)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0x4cd41308    72  br x16
0x4cd4130c    76  ldr x2, pc+60 (addr 0x000000004cd41348)    ;; object: 0x21005209 <String[4]: next>
0x4cd41310    80  ldr x4, [jssp], #8
0x4cd41314    84  ldr x3, [jssp], #8
0x4cd41318    88  ldr x16, pc+56 (addr 0x000000004cd41350)    ;; code: BUILTIN
0x4cd4131c    92  br x16
0x4cd41320    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd41324   100  d63f03e0       constant
0x4cd41328   104  2105b0f1       constant
0x4cd4132c   108  00000000       constant
0x4cd41330   112  21062a21       constant
0x4cd41334   116  00000000       constant
0x4cd41338   120  21005209       constant
0x4cd4133c   124  00000000       constant
0x4cd41340   128  4cd38860       constant
0x4cd41344   132  00000000       constant
0x4cd41348   136  21005209       constant
0x4cd4134c   140  00000000       constant
0x4cd41350   144  4cd22420       constant
0x4cd41354   148  00000000       constant


RelocInfo (size = 12)
0x4cd412d0  embedded object  (0x2105b0f1 Cell for 0)
0x4cd412e4  embedded object  (0x21062a21 WeakCell for 0x2a80c9c9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd41300  embedded object  (0x21005209 <String[4]: next>)
0x4cd41304  code target (HANDLER)  (0x4cd38860)
0x4cd4130c  embedded object  (0x21005209 <String[4]: next>)
0x4cd41318  code target (BUILTIN)  (0x4cd22420)
0x4cd41320  constant pool (size 56)

kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0x4cd41580     0  adr xzr, #+0x40 (addr 0x4cd415c0)
0x4cd41584     4  adr xzr, #+0x360 (addr 0x4cd418e4)
0x4cd41588     8  ldr x16, pc+1736 (addr 0x000000004cd41c50)    ;; external reference (store_buffer_top)
0x4cd4158c    12  ldr x6, [x16]
0x4cd41590    16  str x7, [x6], #8
0x4cd41594    20  str x6, [x16]
0x4cd41598    24  tst x6, #0x1ffff
0x4cd4159c    28  b.eq #+0x8 (addr 0x4cd415a4)
0x4cd415a0    32  ret
0x4cd415a4    36  sub csp, jssp, #0x8 (8)
0x4cd415a8    40  str lr, [jssp, #-8]!
0x4cd415ac    44  ldr x17, pc+1708 (addr 0x000000004cd41c58)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd415b0    48  blr x17
0x4cd415b4    52  ldr lr, [jssp], #8
0x4cd415b8    56  ret
0x4cd415bc    60  ret
0x4cd415c0    64  sub csp, jssp, #0x10 (16)
0x4cd415c4    68  stp x2, x0, [jssp, #-16]!
0x4cd415c8    72  ldr x6, [x7]
0x4cd415cc    76  and x16, x6, #0xfffffffffff00000
0x4cd415d0    80  ldr x16, [x16, #8]
0x4cd415d4    84  tst x16, #0x18
0x4cd415d8    88  b.eq #+0x1d8 (addr 0x4cd417b0)
0x4cd415dc    92  and x16, x1, #0xfffffffffff00000
0x4cd415e0    96  ldr x16, [x16, #8]
0x4cd415e4   100  tst x16, #0x18
0x4cd415e8   104  b.ne #+0x1c8 (addr 0x4cd417b0)
0x4cd415ec   108  and x6, x1, #0xfffffffffff00000
0x4cd415f0   112  ldr x0, [x6, #104]
0x4cd415f4   116  subs x0, x0, #0x1 (1)
0x4cd415f8   120  str x0, [x6, #104]
0x4cd415fc   124  b.mi #+0xc4 (addr 0x4cd416c0)
0x4cd41600   128  ubfx x16, x1, #8, #12
0x4cd41604   132  and x6, x1, #0xfffffffffff00000
0x4cd41608   136  add x6, x6, x16, lsl #2
0x4cd4160c   140  ubfx x0, x1, #3, #5
0x4cd41610   144  ldr x6, [x6, #360]
0x4cd41614   148  lsr x6, x6, x0
0x4cd41618   152  tbz w6, #0, #+0x8 (addr 0x4cd41620)
0x4cd4161c   156  tbnz w6, #1, #+0x3c (addr 0x4cd41658)
0x4cd41620   160  ldp x2, x0, [jssp], #16
0x4cd41624   164  ldr x16, pc+1596 (addr 0x000000004cd41c60)    ;; external reference (store_buffer_top)
0x4cd41628   168  ldr x6, [x16]
0x4cd4162c   172  str x7, [x6], #8
0x4cd41630   176  str x6, [x16]
0x4cd41634   180  tst x6, #0x1ffff
0x4cd41638   184  b.eq #+0x8 (addr 0x4cd41640)
0x4cd4163c   188  ret
0x4cd41640   192  sub csp, jssp, #0x8 (8)
0x4cd41644   196  str lr, [jssp, #-8]!
0x4cd41648   200  ldr x17, pc+1568 (addr 0x000000004cd41c68)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd4164c   204  blr x17
0x4cd41650   208  ldr lr, [jssp], #8
0x4cd41654   212  ret
0x4cd41658   216  ldr x6, [x7]
0x4cd4165c   220  sub csp, jssp, #0x10 (16)
0x4cd41660   224  stp x1, x7, [jssp, #-16]!
0x4cd41664   228  ubfx x16, x6, #8, #12
0x4cd41668   232  and x0, x6, #0xfffffffffff00000
0x4cd4166c   236  add x0, x0, x16, lsl #2
0x4cd41670   240  ubfx x1, x6, #3, #5
0x4cd41674   244  ldr x7, [x0, #360]
0x4cd41678   248  lsr x7, x7, x1
0x4cd4167c   252  tbz w7, #0, #+0x40 (addr 0x4cd416bc)
0x4cd41680   256  ldp x1, x7, [jssp], #16
0x4cd41684   260  ldp x2, x0, [jssp], #16
0x4cd41688   264  ldr x16, pc+1512 (addr 0x000000004cd41c70)    ;; external reference (store_buffer_top)
0x4cd4168c   268  ldr x6, [x16]
0x4cd41690   272  str x7, [x6], #8
0x4cd41694   276  str x6, [x16]
0x4cd41698   280  tst x6, #0x1ffff
0x4cd4169c   284  b.eq #+0x8 (addr 0x4cd416a4)
0x4cd416a0   288  ret
0x4cd416a4   292  sub csp, jssp, #0x8 (8)
0x4cd416a8   296  str lr, [jssp, #-8]!
0x4cd416ac   300  ldr x17, pc+1484 (addr 0x000000004cd41c78)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd416b0   304  blr x17
0x4cd416b4   308  ldr lr, [jssp], #8
0x4cd416b8   312  ret
0x4cd416bc   316  ldp x1, x7, [jssp], #16
0x4cd416c0   320  sub csp, jssp, #0x78 (120)
0x4cd416c4   324  stp x14, x15, [jssp, #-32]!
0x4cd416c8   328  stp x18, lr, [jssp, #16]
0x4cd416cc   332  stp x10, x11, [jssp, #-32]!
0x4cd416d0   336  stp x12, x13, [jssp, #16]
0x4cd416d4   340  stp x5, x7, [jssp, #-32]!
0x4cd416d8   344  stp x8, x9, [jssp, #16]
0x4cd416dc   348  stp x1, x3, [jssp, #-24]!
0x4cd416e0   352  str x4, [jssp, #16]
0x4cd416e4   356  sub csp, jssp, #0xb0 (176)
0x4cd416e8   360  stp d26, d27, [jssp, #-32]!
0x4cd416ec   364  stp d28, d29, [jssp, #16]
0x4cd416f0   368  stp d22, d23, [jssp, #-32]!
0x4cd416f4   372  stp d24, d25, [jssp, #16]
0x4cd416f8   376  stp d18, d19, [jssp, #-32]!
0x4cd416fc   380  stp d20, d21, [jssp, #16]
0x4cd41700   384  stp d6, d7, [jssp, #-32]!
0x4cd41704   388  stp d16, d17, [jssp, #16]
0x4cd41708   392  stp d2, d3, [jssp, #-32]!
0x4cd4170c   396  stp d4, d5, [jssp, #16]
0x4cd41710   400  stp d0, d1, [jssp, #-16]!
0x4cd41714   404  mov x0, x1
0x4cd41718   408  mov x1, x7
0x4cd4171c   412  ldr x2, pc+1380 (addr 0x000000004cd41c80)    ;; external reference (isolate)
0x4cd41720   416  ldr x16, pc+1384 (addr 0x000000004cd41c88)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd41724   420  and csp, jssp, #0xfffffffffffffff0
0x4cd41728   424  blr x16
0x4cd4172c   428  ldp d2, d3, [jssp, #16]
0x4cd41730   432  ldp d0, d1, [jssp], #32
0x4cd41734   436  ldp d6, d7, [jssp, #16]
0x4cd41738   440  ldp d4, d5, [jssp], #32
0x4cd4173c   444  ldp d18, d19, [jssp, #16]
0x4cd41740   448  ldp d16, d17, [jssp], #32
0x4cd41744   452  ldp d22, d23, [jssp, #16]
0x4cd41748   456  ldp d20, d21, [jssp], #32
0x4cd4174c   460  ldp d26, d27, [jssp, #16]
0x4cd41750   464  ldp d24, d25, [jssp], #32
0x4cd41754   468  ldp d28, d29, [jssp], #16
0x4cd41758   472  ldp x4, x5, [jssp, #16]
0x4cd4175c   476  ldp x1, x3, [jssp], #32
0x4cd41760   480  ldp x9, x10, [jssp, #16]
0x4cd41764   484  ldp x7, x8, [jssp], #32
0x4cd41768   488  ldp x13, x14, [jssp, #16]
0x4cd4176c   492  ldp x11, x12, [jssp], #32
0x4cd41770   496  ldr lr, [jssp, #16]
0x4cd41774   500  ldp x15, x18, [jssp], #24
0x4cd41778   504  ldp x2, x0, [jssp], #16
0x4cd4177c   508  ldr x16, pc+1300 (addr 0x000000004cd41c90)    ;; external reference (store_buffer_top)
0x4cd41780   512  ldr x6, [x16]
0x4cd41784   516  str x7, [x6], #8
0x4cd41788   520  str x6, [x16]
0x4cd4178c   524  tst x6, #0x1ffff
0x4cd41790   528  b.eq #+0x8 (addr 0x4cd41798)
0x4cd41794   532  ret
0x4cd41798   536  sub csp, jssp, #0x8 (8)
0x4cd4179c   540  str lr, [jssp, #-8]!
0x4cd417a0   544  ldr x17, pc+1272 (addr 0x000000004cd41c98)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd417a4   548  blr x17
0x4cd417a8   552  ldr lr, [jssp], #8
0x4cd417ac   556  ret
0x4cd417b0   560  and x6, x1, #0xfffffffffff00000
0x4cd417b4   564  ldr x0, [x6, #104]
0x4cd417b8   568  subs x0, x0, #0x1 (1)
0x4cd417bc   572  str x0, [x6, #104]
0x4cd417c0   576  b.mi #+0x64 (addr 0x4cd41824)
0x4cd417c4   580  ubfx x16, x1, #8, #12
0x4cd417c8   584  and x6, x1, #0xfffffffffff00000
0x4cd417cc   588  add x6, x6, x16, lsl #2
0x4cd417d0   592  ubfx x0, x1, #3, #5
0x4cd417d4   596  ldr x6, [x6, #360]
0x4cd417d8   600  lsr x6, x6, x0
0x4cd417dc   604  tbz w6, #0, #+0x8 (addr 0x4cd417e4)
0x4cd417e0   608  tbnz w6, #1, #+0xc (addr 0x4cd417ec)
0x4cd417e4   612  ldp x2, x0, [jssp], #16
0x4cd417e8   616  ret
0x4cd417ec   620  ldr x6, [x7]
0x4cd417f0   624  sub csp, jssp, #0x10 (16)
0x4cd417f4   628  stp x1, x7, [jssp, #-16]!
0x4cd417f8   632  ubfx x16, x6, #8, #12
0x4cd417fc   636  and x0, x6, #0xfffffffffff00000
0x4cd41800   640  add x0, x0, x16, lsl #2
0x4cd41804   644  ubfx x1, x6, #3, #5
0x4cd41808   648  ldr x7, [x0, #360]
0x4cd4180c   652  lsr x7, x7, x1
0x4cd41810   656  tbz w7, #0, #+0x10 (addr 0x4cd41820)
0x4cd41814   660  ldp x1, x7, [jssp], #16
0x4cd41818   664  ldp x2, x0, [jssp], #16
0x4cd4181c   668  ret
0x4cd41820   672  ldp x1, x7, [jssp], #16
0x4cd41824   676  sub csp, jssp, #0x78 (120)
0x4cd41828   680  stp x14, x15, [jssp, #-32]!
0x4cd4182c   684  stp x18, lr, [jssp, #16]
0x4cd41830   688  stp x10, x11, [jssp, #-32]!
0x4cd41834   692  stp x12, x13, [jssp, #16]
0x4cd41838   696  stp x5, x7, [jssp, #-32]!
0x4cd4183c   700  stp x8, x9, [jssp, #16]
0x4cd41840   704  stp x1, x3, [jssp, #-24]!
0x4cd41844   708  str x4, [jssp, #16]
0x4cd41848   712  sub csp, jssp, #0xb0 (176)
0x4cd4184c   716  stp d26, d27, [jssp, #-32]!
0x4cd41850   720  stp d28, d29, [jssp, #16]
0x4cd41854   724  stp d22, d23, [jssp, #-32]!
0x4cd41858   728  stp d24, d25, [jssp, #16]
0x4cd4185c   732  stp d18, d19, [jssp, #-32]!
0x4cd41860   736  stp d20, d21, [jssp, #16]
0x4cd41864   740  stp d6, d7, [jssp, #-32]!
0x4cd41868   744  stp d16, d17, [jssp, #16]
0x4cd4186c   748  stp d2, d3, [jssp, #-32]!
0x4cd41870   752  stp d4, d5, [jssp, #16]
0x4cd41874   756  stp d0, d1, [jssp, #-16]!
0x4cd41878   760  mov x0, x1
0x4cd4187c   764  mov x1, x7
0x4cd41880   768  ldr x2, pc+1056 (addr 0x000000004cd41ca0)    ;; external reference (isolate)
0x4cd41884   772  ldr x16, pc+1060 (addr 0x000000004cd41ca8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd41888   776  and csp, jssp, #0xfffffffffffffff0
0x4cd4188c   780  blr x16
0x4cd41890   784  ldp d2, d3, [jssp, #16]
0x4cd41894   788  ldp d0, d1, [jssp], #32
0x4cd41898   792  ldp d6, d7, [jssp, #16]
0x4cd4189c   796  ldp d4, d5, [jssp], #32
0x4cd418a0   800  ldp d18, d19, [jssp, #16]
0x4cd418a4   804  ldp d16, d17, [jssp], #32
0x4cd418a8   808  ldp d22, d23, [jssp, #16]
0x4cd418ac   812  ldp d20, d21, [jssp], #32
0x4cd418b0   816  ldp d26, d27, [jssp, #16]
0x4cd418b4   820  ldp d24, d25, [jssp], #32
0x4cd418b8   824  ldp d28, d29, [jssp], #16
0x4cd418bc   828  ldp x4, x5, [jssp, #16]
0x4cd418c0   832  ldp x1, x3, [jssp], #32
0x4cd418c4   836  ldp x9, x10, [jssp, #16]
0x4cd418c8   840  ldp x7, x8, [jssp], #32
0x4cd418cc   844  ldp x13, x14, [jssp, #16]
0x4cd418d0   848  ldp x11, x12, [jssp], #32
0x4cd418d4   852  ldr lr, [jssp, #16]
0x4cd418d8   856  ldp x15, x18, [jssp], #24
0x4cd418dc   860  ldp x2, x0, [jssp], #16
0x4cd418e0   864  ret
0x4cd418e4   868  sub csp, jssp, #0x10 (16)
0x4cd418e8   872  stp x2, x0, [jssp, #-16]!
0x4cd418ec   876  ldr x6, [x7]
0x4cd418f0   880  and x16, x6, #0xfffffffffff00000
0x4cd418f4   884  ldr x16, [x16, #8]
0x4cd418f8   888  tst x16, #0x18
0x4cd418fc   892  b.eq #+0x1f8 (addr 0x4cd41af4)
0x4cd41900   896  and x16, x1, #0xfffffffffff00000
0x4cd41904   900  ldr x16, [x16, #8]
0x4cd41908   904  tst x16, #0x18
0x4cd4190c   908  b.ne #+0x1e8 (addr 0x4cd41af4)
0x4cd41910   912  and x6, x1, #0xfffffffffff00000
0x4cd41914   916  ldr x0, [x6, #104]
0x4cd41918   920  subs x0, x0, #0x1 (1)
0x4cd4191c   924  str x0, [x6, #104]
0x4cd41920   928  b.mi #+0xe4 (addr 0x4cd41a04)
0x4cd41924   932  ubfx x16, x1, #8, #12
0x4cd41928   936  and x6, x1, #0xfffffffffff00000
0x4cd4192c   940  add x6, x6, x16, lsl #2
0x4cd41930   944  ubfx x0, x1, #3, #5
0x4cd41934   948  ldr x6, [x6, #360]
0x4cd41938   952  lsr x6, x6, x0
0x4cd4193c   956  tbz w6, #0, #+0x8 (addr 0x4cd41944)
0x4cd41940   960  tbnz w6, #1, #+0x3c (addr 0x4cd4197c)
0x4cd41944   964  ldp x2, x0, [jssp], #16
0x4cd41948   968  ldr x16, pc+872 (addr 0x000000004cd41cb0)    ;; external reference (store_buffer_top)
0x4cd4194c   972  ldr x6, [x16]
0x4cd41950   976  str x7, [x6], #8
0x4cd41954   980  str x6, [x16]
0x4cd41958   984  tst x6, #0x1ffff
0x4cd4195c   988  b.eq #+0x8 (addr 0x4cd41964)
0x4cd41960   992  ret
0x4cd41964   996  sub csp, jssp, #0x8 (8)
0x4cd41968  1000  str lr, [jssp, #-8]!
0x4cd4196c  1004  ldr x17, pc+844 (addr 0x000000004cd41cb8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd41970  1008  blr x17
0x4cd41974  1012  ldr lr, [jssp], #8
0x4cd41978  1016  ret
0x4cd4197c  1020  ldr x6, [x7]
0x4cd41980  1024  and x0, x6, #0xfffffffffff00000
0x4cd41984  1028  ldr x0, [x0, #8]
0x4cd41988  1032  tbz w0, #6, #+0x18 (addr 0x4cd419a0)
0x4cd4198c  1036  and x0, x1, #0xfffffffffff00000
0x4cd41990  1040  ldr x0, [x0, #8]
0x4cd41994  1044  movz x16, #0x58
0x4cd41998  1048  tst x0, x16
0x4cd4199c  1052  b.eq #+0x68 (addr 0x4cd41a04)
0x4cd419a0  1056  sub csp, jssp, #0x10 (16)
0x4cd419a4  1060  stp x1, x7, [jssp, #-16]!
0x4cd419a8  1064  ubfx x16, x6, #8, #12
0x4cd419ac  1068  and x0, x6, #0xfffffffffff00000
0x4cd419b0  1072  add x0, x0, x16, lsl #2
0x4cd419b4  1076  ubfx x1, x6, #3, #5
0x4cd419b8  1080  ldr x7, [x0, #360]
0x4cd419bc  1084  lsr x7, x7, x1
0x4cd419c0  1088  tbz w7, #0, #+0x40 (addr 0x4cd41a00)
0x4cd419c4  1092  ldp x1, x7, [jssp], #16
0x4cd419c8  1096  ldp x2, x0, [jssp], #16
0x4cd419cc  1100  ldr x16, pc+756 (addr 0x000000004cd41cc0)    ;; external reference (store_buffer_top)
0x4cd419d0  1104  ldr x6, [x16]
0x4cd419d4  1108  str x7, [x6], #8
0x4cd419d8  1112  str x6, [x16]
0x4cd419dc  1116  tst x6, #0x1ffff
0x4cd419e0  1120  b.eq #+0x8 (addr 0x4cd419e8)
0x4cd419e4  1124  ret
0x4cd419e8  1128  sub csp, jssp, #0x8 (8)
0x4cd419ec  1132  str lr, [jssp, #-8]!
0x4cd419f0  1136  ldr x17, pc+728 (addr 0x000000004cd41cc8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd419f4  1140  blr x17
0x4cd419f8  1144  ldr lr, [jssp], #8
0x4cd419fc  1148  ret
0x4cd41a00  1152  ldp x1, x7, [jssp], #16
0x4cd41a04  1156  sub csp, jssp, #0x78 (120)
0x4cd41a08  1160  stp x14, x15, [jssp, #-32]!
0x4cd41a0c  1164  stp x18, lr, [jssp, #16]
0x4cd41a10  1168  stp x10, x11, [jssp, #-32]!
0x4cd41a14  1172  stp x12, x13, [jssp, #16]
0x4cd41a18  1176  stp x5, x7, [jssp, #-32]!
0x4cd41a1c  1180  stp x8, x9, [jssp, #16]
0x4cd41a20  1184  stp x1, x3, [jssp, #-24]!
0x4cd41a24  1188  str x4, [jssp, #16]
0x4cd41a28  1192  sub csp, jssp, #0xb0 (176)
0x4cd41a2c  1196  stp d26, d27, [jssp, #-32]!
0x4cd41a30  1200  stp d28, d29, [jssp, #16]
0x4cd41a34  1204  stp d22, d23, [jssp, #-32]!
0x4cd41a38  1208  stp d24, d25, [jssp, #16]
0x4cd41a3c  1212  stp d18, d19, [jssp, #-32]!
0x4cd41a40  1216  stp d20, d21, [jssp, #16]
0x4cd41a44  1220  stp d6, d7, [jssp, #-32]!
0x4cd41a48  1224  stp d16, d17, [jssp, #16]
0x4cd41a4c  1228  stp d2, d3, [jssp, #-32]!
0x4cd41a50  1232  stp d4, d5, [jssp, #16]
0x4cd41a54  1236  stp d0, d1, [jssp, #-16]!
0x4cd41a58  1240  mov x0, x1
0x4cd41a5c  1244  mov x1, x7
0x4cd41a60  1248  ldr x2, pc+624 (addr 0x000000004cd41cd0)    ;; external reference (isolate)
0x4cd41a64  1252  ldr x16, pc+628 (addr 0x000000004cd41cd8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd41a68  1256  and csp, jssp, #0xfffffffffffffff0
0x4cd41a6c  1260  blr x16
0x4cd41a70  1264  ldp d2, d3, [jssp, #16]
0x4cd41a74  1268  ldp d0, d1, [jssp], #32
0x4cd41a78  1272  ldp d6, d7, [jssp, #16]
0x4cd41a7c  1276  ldp d4, d5, [jssp], #32
0x4cd41a80  1280  ldp d18, d19, [jssp, #16]
0x4cd41a84  1284  ldp d16, d17, [jssp], #32
0x4cd41a88  1288  ldp d22, d23, [jssp, #16]
0x4cd41a8c  1292  ldp d20, d21, [jssp], #32
0x4cd41a90  1296  ldp d26, d27, [jssp, #16]
0x4cd41a94  1300  ldp d24, d25, [jssp], #32
0x4cd41a98  1304  ldp d28, d29, [jssp], #16
0x4cd41a9c  1308  ldp x4, x5, [jssp, #16]
0x4cd41aa0  1312  ldp x1, x3, [jssp], #32
0x4cd41aa4  1316  ldp x9, x10, [jssp, #16]
0x4cd41aa8  1320  ldp x7, x8, [jssp], #32
0x4cd41aac  1324  ldp x13, x14, [jssp, #16]
0x4cd41ab0  1328  ldp x11, x12, [jssp], #32
0x4cd41ab4  1332  ldr lr, [jssp, #16]
0x4cd41ab8  1336  ldp x15, x18, [jssp], #24
0x4cd41abc  1340  ldp x2, x0, [jssp], #16
0x4cd41ac0  1344  ldr x16, pc+544 (addr 0x000000004cd41ce0)    ;; external reference (store_buffer_top)
0x4cd41ac4  1348  ldr x6, [x16]
0x4cd41ac8  1352  str x7, [x6], #8
0x4cd41acc  1356  str x6, [x16]
0x4cd41ad0  1360  tst x6, #0x1ffff
0x4cd41ad4  1364  b.eq #+0x8 (addr 0x4cd41adc)
0x4cd41ad8  1368  ret
0x4cd41adc  1372  sub csp, jssp, #0x8 (8)
0x4cd41ae0  1376  str lr, [jssp, #-8]!
0x4cd41ae4  1380  ldr x17, pc+516 (addr 0x000000004cd41ce8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd41ae8  1384  blr x17
0x4cd41aec  1388  ldr lr, [jssp], #8
0x4cd41af0  1392  ret
0x4cd41af4  1396  and x6, x1, #0xfffffffffff00000
0x4cd41af8  1400  ldr x0, [x6, #104]
0x4cd41afc  1404  subs x0, x0, #0x1 (1)
0x4cd41b00  1408  str x0, [x6, #104]
0x4cd41b04  1412  b.mi #+0x84 (addr 0x4cd41b88)
0x4cd41b08  1416  ubfx x16, x1, #8, #12
0x4cd41b0c  1420  and x6, x1, #0xfffffffffff00000
0x4cd41b10  1424  add x6, x6, x16, lsl #2
0x4cd41b14  1428  ubfx x0, x1, #3, #5
0x4cd41b18  1432  ldr x6, [x6, #360]
0x4cd41b1c  1436  lsr x6, x6, x0
0x4cd41b20  1440  tbz w6, #0, #+0x8 (addr 0x4cd41b28)
0x4cd41b24  1444  tbnz w6, #1, #+0xc (addr 0x4cd41b30)
0x4cd41b28  1448  ldp x2, x0, [jssp], #16
0x4cd41b2c  1452  ret
0x4cd41b30  1456  ldr x6, [x7]
0x4cd41b34  1460  and x0, x6, #0xfffffffffff00000
0x4cd41b38  1464  ldr x0, [x0, #8]
0x4cd41b3c  1468  tbz w0, #6, #+0x18 (addr 0x4cd41b54)
0x4cd41b40  1472  and x0, x1, #0xfffffffffff00000
0x4cd41b44  1476  ldr x0, [x0, #8]
0x4cd41b48  1480  movz x16, #0x58
0x4cd41b4c  1484  tst x0, x16
0x4cd41b50  1488  b.eq #+0x38 (addr 0x4cd41b88)
0x4cd41b54  1492  sub csp, jssp, #0x10 (16)
0x4cd41b58  1496  stp x1, x7, [jssp, #-16]!
0x4cd41b5c  1500  ubfx x16, x6, #8, #12
0x4cd41b60  1504  and x0, x6, #0xfffffffffff00000
0x4cd41b64  1508  add x0, x0, x16, lsl #2
0x4cd41b68  1512  ubfx x1, x6, #3, #5
0x4cd41b6c  1516  ldr x7, [x0, #360]
0x4cd41b70  1520  lsr x7, x7, x1
0x4cd41b74  1524  tbz w7, #0, #+0x10 (addr 0x4cd41b84)
0x4cd41b78  1528  ldp x1, x7, [jssp], #16
0x4cd41b7c  1532  ldp x2, x0, [jssp], #16
0x4cd41b80  1536  ret
0x4cd41b84  1540  ldp x1, x7, [jssp], #16
0x4cd41b88  1544  sub csp, jssp, #0x78 (120)
0x4cd41b8c  1548  stp x14, x15, [jssp, #-32]!
0x4cd41b90  1552  stp x18, lr, [jssp, #16]
0x4cd41b94  1556  stp x10, x11, [jssp, #-32]!
0x4cd41b98  1560  stp x12, x13, [jssp, #16]
0x4cd41b9c  1564  stp x5, x7, [jssp, #-32]!
0x4cd41ba0  1568  stp x8, x9, [jssp, #16]
0x4cd41ba4  1572  stp x1, x3, [jssp, #-24]!
0x4cd41ba8  1576  str x4, [jssp, #16]
0x4cd41bac  1580  sub csp, jssp, #0xb0 (176)
0x4cd41bb0  1584  stp d26, d27, [jssp, #-32]!
0x4cd41bb4  1588  stp d28, d29, [jssp, #16]
0x4cd41bb8  1592  stp d22, d23, [jssp, #-32]!
0x4cd41bbc  1596  stp d24, d25, [jssp, #16]
0x4cd41bc0  1600  stp d18, d19, [jssp, #-32]!
0x4cd41bc4  1604  stp d20, d21, [jssp, #16]
0x4cd41bc8  1608  stp d6, d7, [jssp, #-32]!
0x4cd41bcc  1612  stp d16, d17, [jssp, #16]
0x4cd41bd0  1616  stp d2, d3, [jssp, #-32]!
0x4cd41bd4  1620  stp d4, d5, [jssp, #16]
0x4cd41bd8  1624  stp d0, d1, [jssp, #-16]!
0x4cd41bdc  1628  mov x0, x1
0x4cd41be0  1632  mov x1, x7
0x4cd41be4  1636  ldr x2, pc+268 (addr 0x000000004cd41cf0)    ;; external reference (isolate)
0x4cd41be8  1640  ldr x16, pc+272 (addr 0x000000004cd41cf8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd41bec  1644  and csp, jssp, #0xfffffffffffffff0
0x4cd41bf0  1648  blr x16
0x4cd41bf4  1652  ldp d2, d3, [jssp, #16]
0x4cd41bf8  1656  ldp d0, d1, [jssp], #32
0x4cd41bfc  1660  ldp d6, d7, [jssp, #16]
0x4cd41c00  1664  ldp d4, d5, [jssp], #32
0x4cd41c04  1668  ldp d18, d19, [jssp, #16]
0x4cd41c08  1672  ldp d16, d17, [jssp], #32
0x4cd41c0c  1676  ldp d22, d23, [jssp, #16]
0x4cd41c10  1680  ldp d20, d21, [jssp], #32
0x4cd41c14  1684  ldp d26, d27, [jssp, #16]
0x4cd41c18  1688  ldp d24, d25, [jssp], #32
0x4cd41c1c  1692  ldp d28, d29, [jssp], #16
0x4cd41c20  1696  ldp x4, x5, [jssp, #16]
0x4cd41c24  1700  ldp x1, x3, [jssp], #32
0x4cd41c28  1704  ldp x9, x10, [jssp, #16]
0x4cd41c2c  1708  ldp x7, x8, [jssp], #32
0x4cd41c30  1712  ldp x13, x14, [jssp, #16]
0x4cd41c34  1716  ldp x11, x12, [jssp], #32
0x4cd41c38  1720  ldr lr, [jssp, #16]
0x4cd41c3c  1724  ldp x15, x18, [jssp], #24
0x4cd41c40  1728  ldp x2, x0, [jssp], #16
0x4cd41c44  1732  ret
0x4cd41c48  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd41c4c  1740  d63f03e0       constant
0x4cd41c50  1744  166dd8c0       constant
0x4cd41c54  1748  00000000       constant
0x4cd41c58  1752  4cd065a0       constant
0x4cd41c5c  1756  00000000       constant
0x4cd41c60  1760  166dd8c0       constant
0x4cd41c64  1764  00000000       constant
0x4cd41c68  1768  4cd065a0       constant
0x4cd41c6c  1772  00000000       constant
0x4cd41c70  1776  166dd8c0       constant
0x4cd41c74  1780  00000000       constant
0x4cd41c78  1784  4cd065a0       constant
0x4cd41c7c  1788  00000000       constant
0x4cd41c80  1792  166dc2d0       constant
0x4cd41c84  1796  00000000       constant
0x4cd41c88  1800  00c2d958       constant
0x4cd41c8c  1804  00000000       constant
0x4cd41c90  1808  166dd8c0       constant
0x4cd41c94  1812  00000000       constant
0x4cd41c98  1816  4cd065a0       constant
0x4cd41c9c  1820  00000000       constant
0x4cd41ca0  1824  166dc2d0       constant
0x4cd41ca4  1828  00000000       constant
0x4cd41ca8  1832  00c2d958       constant
0x4cd41cac  1836  00000000       constant
0x4cd41cb0  1840  166dd8c0       constant
0x4cd41cb4  1844  00000000       constant
0x4cd41cb8  1848  4cd065a0       constant
0x4cd41cbc  1852  00000000       constant
0x4cd41cc0  1856  166dd8c0       constant
0x4cd41cc4  1860  00000000       constant
0x4cd41cc8  1864  4cd065a0       constant
0x4cd41ccc  1868  00000000       constant
0x4cd41cd0  1872  166dc2d0       constant
0x4cd41cd4  1876  00000000       constant
0x4cd41cd8  1880  00c2d958       constant
0x4cd41cdc  1884  00000000       constant
0x4cd41ce0  1888  166dd8c0       constant
0x4cd41ce4  1892  00000000       constant
0x4cd41ce8  1896  4cd065a0       constant
0x4cd41cec  1900  00000000       constant
0x4cd41cf0  1904  166dc2d0       constant
0x4cd41cf4  1908  00000000       constant
0x4cd41cf8  1912  00c2d958       constant
0x4cd41cfc  1916  00000000       constant


RelocInfo (size = 65)
0x4cd41588  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd415ac  code target (STUB)  (0x4cd065a0)
0x4cd41624  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd41648  code target (STUB)  (0x4cd065a0)
0x4cd41688  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd416ac  code target (STUB)  (0x4cd065a0)
0x4cd4171c  external reference (isolate)  (0x166dc2d0)
0x4cd41720  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd4177c  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd417a0  code target (STUB)  (0x4cd065a0)
0x4cd41880  external reference (isolate)  (0x166dc2d0)
0x4cd41884  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd41948  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd4196c  code target (STUB)  (0x4cd065a0)
0x4cd419cc  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd419f0  code target (STUB)  (0x4cd065a0)
0x4cd41a60  external reference (isolate)  (0x166dc2d0)
0x4cd41a64  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd41ac0  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd41ae4  code target (STUB)  (0x4cd065a0)
0x4cd41be4  external reference (isolate)  (0x166dc2d0)
0x4cd41be8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd41c48  constant pool (size 184)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0x4cd41d60     0  adr xzr, #+0x40 (addr 0x4cd41da0)
0x4cd41d64     4  adr xzr, #+0x360 (addr 0x4cd420c4)
0x4cd41d68     8  ldr x16, pc+1736 (addr 0x000000004cd42430)    ;; external reference (store_buffer_top)
0x4cd41d6c    12  ldr x5, [x16]
0x4cd41d70    16  str x9, [x5], #8
0x4cd41d74    20  str x5, [x16]
0x4cd41d78    24  tst x5, #0x1ffff
0x4cd41d7c    28  b.eq #+0x8 (addr 0x4cd41d84)
0x4cd41d80    32  ret
0x4cd41d84    36  sub csp, jssp, #0x8 (8)
0x4cd41d88    40  str lr, [jssp, #-8]!
0x4cd41d8c    44  ldr x17, pc+1708 (addr 0x000000004cd42438)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd41d90    48  blr x17
0x4cd41d94    52  ldr lr, [jssp], #8
0x4cd41d98    56  ret
0x4cd41d9c    60  ret
0x4cd41da0    64  sub csp, jssp, #0x10 (16)
0x4cd41da4    68  stp x1, x0, [jssp, #-16]!
0x4cd41da8    72  ldr x5, [x9]
0x4cd41dac    76  and x16, x5, #0xfffffffffff00000
0x4cd41db0    80  ldr x16, [x16, #8]
0x4cd41db4    84  tst x16, #0x18
0x4cd41db8    88  b.eq #+0x1d8 (addr 0x4cd41f90)
0x4cd41dbc    92  and x16, x8, #0xfffffffffff00000
0x4cd41dc0    96  ldr x16, [x16, #8]
0x4cd41dc4   100  tst x16, #0x18
0x4cd41dc8   104  b.ne #+0x1c8 (addr 0x4cd41f90)
0x4cd41dcc   108  and x5, x8, #0xfffffffffff00000
0x4cd41dd0   112  ldr x0, [x5, #104]
0x4cd41dd4   116  subs x0, x0, #0x1 (1)
0x4cd41dd8   120  str x0, [x5, #104]
0x4cd41ddc   124  b.mi #+0xc4 (addr 0x4cd41ea0)
0x4cd41de0   128  ubfx x16, x8, #8, #12
0x4cd41de4   132  and x5, x8, #0xfffffffffff00000
0x4cd41de8   136  add x5, x5, x16, lsl #2
0x4cd41dec   140  ubfx x0, x8, #3, #5
0x4cd41df0   144  ldr x5, [x5, #360]
0x4cd41df4   148  lsr x5, x5, x0
0x4cd41df8   152  tbz w5, #0, #+0x8 (addr 0x4cd41e00)
0x4cd41dfc   156  tbnz w5, #1, #+0x3c (addr 0x4cd41e38)
0x4cd41e00   160  ldp x1, x0, [jssp], #16
0x4cd41e04   164  ldr x16, pc+1596 (addr 0x000000004cd42440)    ;; external reference (store_buffer_top)
0x4cd41e08   168  ldr x5, [x16]
0x4cd41e0c   172  str x9, [x5], #8
0x4cd41e10   176  str x5, [x16]
0x4cd41e14   180  tst x5, #0x1ffff
0x4cd41e18   184  b.eq #+0x8 (addr 0x4cd41e20)
0x4cd41e1c   188  ret
0x4cd41e20   192  sub csp, jssp, #0x8 (8)
0x4cd41e24   196  str lr, [jssp, #-8]!
0x4cd41e28   200  ldr x17, pc+1568 (addr 0x000000004cd42448)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd41e2c   204  blr x17
0x4cd41e30   208  ldr lr, [jssp], #8
0x4cd41e34   212  ret
0x4cd41e38   216  ldr x5, [x9]
0x4cd41e3c   220  sub csp, jssp, #0x10 (16)
0x4cd41e40   224  stp x8, x9, [jssp, #-16]!
0x4cd41e44   228  ubfx x16, x5, #8, #12
0x4cd41e48   232  and x0, x5, #0xfffffffffff00000
0x4cd41e4c   236  add x0, x0, x16, lsl #2
0x4cd41e50   240  ubfx x8, x5, #3, #5
0x4cd41e54   244  ldr x9, [x0, #360]
0x4cd41e58   248  lsr x9, x9, x8
0x4cd41e5c   252  tbz w9, #0, #+0x40 (addr 0x4cd41e9c)
0x4cd41e60   256  ldp x8, x9, [jssp], #16
0x4cd41e64   260  ldp x1, x0, [jssp], #16
0x4cd41e68   264  ldr x16, pc+1512 (addr 0x000000004cd42450)    ;; external reference (store_buffer_top)
0x4cd41e6c   268  ldr x5, [x16]
0x4cd41e70   272  str x9, [x5], #8
0x4cd41e74   276  str x5, [x16]
0x4cd41e78   280  tst x5, #0x1ffff
0x4cd41e7c   284  b.eq #+0x8 (addr 0x4cd41e84)
0x4cd41e80   288  ret
0x4cd41e84   292  sub csp, jssp, #0x8 (8)
0x4cd41e88   296  str lr, [jssp, #-8]!
0x4cd41e8c   300  ldr x17, pc+1484 (addr 0x000000004cd42458)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd41e90   304  blr x17
0x4cd41e94   308  ldr lr, [jssp], #8
0x4cd41e98   312  ret
0x4cd41e9c   316  ldp x8, x9, [jssp], #16
0x4cd41ea0   320  sub csp, jssp, #0x78 (120)
0x4cd41ea4   324  stp x14, x15, [jssp, #-32]!
0x4cd41ea8   328  stp x18, lr, [jssp, #16]
0x4cd41eac   332  stp x10, x11, [jssp, #-32]!
0x4cd41eb0   336  stp x12, x13, [jssp, #16]
0x4cd41eb4   340  stp x6, x7, [jssp, #-32]!
0x4cd41eb8   344  stp x8, x9, [jssp, #16]
0x4cd41ebc   348  stp x2, x3, [jssp, #-24]!
0x4cd41ec0   352  str x4, [jssp, #16]
0x4cd41ec4   356  sub csp, jssp, #0xb0 (176)
0x4cd41ec8   360  stp d26, d27, [jssp, #-32]!
0x4cd41ecc   364  stp d28, d29, [jssp, #16]
0x4cd41ed0   368  stp d22, d23, [jssp, #-32]!
0x4cd41ed4   372  stp d24, d25, [jssp, #16]
0x4cd41ed8   376  stp d18, d19, [jssp, #-32]!
0x4cd41edc   380  stp d20, d21, [jssp, #16]
0x4cd41ee0   384  stp d6, d7, [jssp, #-32]!
0x4cd41ee4   388  stp d16, d17, [jssp, #16]
0x4cd41ee8   392  stp d2, d3, [jssp, #-32]!
0x4cd41eec   396  stp d4, d5, [jssp, #16]
0x4cd41ef0   400  stp d0, d1, [jssp, #-16]!
0x4cd41ef4   404  mov x0, x8
0x4cd41ef8   408  mov x1, x9
0x4cd41efc   412  ldr x2, pc+1380 (addr 0x000000004cd42460)    ;; external reference (isolate)
0x4cd41f00   416  ldr x16, pc+1384 (addr 0x000000004cd42468)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd41f04   420  and csp, jssp, #0xfffffffffffffff0
0x4cd41f08   424  blr x16
0x4cd41f0c   428  ldp d2, d3, [jssp, #16]
0x4cd41f10   432  ldp d0, d1, [jssp], #32
0x4cd41f14   436  ldp d6, d7, [jssp, #16]
0x4cd41f18   440  ldp d4, d5, [jssp], #32
0x4cd41f1c   444  ldp d18, d19, [jssp, #16]
0x4cd41f20   448  ldp d16, d17, [jssp], #32
0x4cd41f24   452  ldp d22, d23, [jssp, #16]
0x4cd41f28   456  ldp d20, d21, [jssp], #32
0x4cd41f2c   460  ldp d26, d27, [jssp, #16]
0x4cd41f30   464  ldp d24, d25, [jssp], #32
0x4cd41f34   468  ldp d28, d29, [jssp], #16
0x4cd41f38   472  ldp x4, x6, [jssp, #16]
0x4cd41f3c   476  ldp x2, x3, [jssp], #32
0x4cd41f40   480  ldp x9, x10, [jssp, #16]
0x4cd41f44   484  ldp x7, x8, [jssp], #32
0x4cd41f48   488  ldp x13, x14, [jssp, #16]
0x4cd41f4c   492  ldp x11, x12, [jssp], #32
0x4cd41f50   496  ldr lr, [jssp, #16]
0x4cd41f54   500  ldp x15, x18, [jssp], #24
0x4cd41f58   504  ldp x1, x0, [jssp], #16
0x4cd41f5c   508  ldr x16, pc+1300 (addr 0x000000004cd42470)    ;; external reference (store_buffer_top)
0x4cd41f60   512  ldr x5, [x16]
0x4cd41f64   516  str x9, [x5], #8
0x4cd41f68   520  str x5, [x16]
0x4cd41f6c   524  tst x5, #0x1ffff
0x4cd41f70   528  b.eq #+0x8 (addr 0x4cd41f78)
0x4cd41f74   532  ret
0x4cd41f78   536  sub csp, jssp, #0x8 (8)
0x4cd41f7c   540  str lr, [jssp, #-8]!
0x4cd41f80   544  ldr x17, pc+1272 (addr 0x000000004cd42478)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd41f84   548  blr x17
0x4cd41f88   552  ldr lr, [jssp], #8
0x4cd41f8c   556  ret
0x4cd41f90   560  and x5, x8, #0xfffffffffff00000
0x4cd41f94   564  ldr x0, [x5, #104]
0x4cd41f98   568  subs x0, x0, #0x1 (1)
0x4cd41f9c   572  str x0, [x5, #104]
0x4cd41fa0   576  b.mi #+0x64 (addr 0x4cd42004)
0x4cd41fa4   580  ubfx x16, x8, #8, #12
0x4cd41fa8   584  and x5, x8, #0xfffffffffff00000
0x4cd41fac   588  add x5, x5, x16, lsl #2
0x4cd41fb0   592  ubfx x0, x8, #3, #5
0x4cd41fb4   596  ldr x5, [x5, #360]
0x4cd41fb8   600  lsr x5, x5, x0
0x4cd41fbc   604  tbz w5, #0, #+0x8 (addr 0x4cd41fc4)
0x4cd41fc0   608  tbnz w5, #1, #+0xc (addr 0x4cd41fcc)
0x4cd41fc4   612  ldp x1, x0, [jssp], #16
0x4cd41fc8   616  ret
0x4cd41fcc   620  ldr x5, [x9]
0x4cd41fd0   624  sub csp, jssp, #0x10 (16)
0x4cd41fd4   628  stp x8, x9, [jssp, #-16]!
0x4cd41fd8   632  ubfx x16, x5, #8, #12
0x4cd41fdc   636  and x0, x5, #0xfffffffffff00000
0x4cd41fe0   640  add x0, x0, x16, lsl #2
0x4cd41fe4   644  ubfx x8, x5, #3, #5
0x4cd41fe8   648  ldr x9, [x0, #360]
0x4cd41fec   652  lsr x9, x9, x8
0x4cd41ff0   656  tbz w9, #0, #+0x10 (addr 0x4cd42000)
0x4cd41ff4   660  ldp x8, x9, [jssp], #16
0x4cd41ff8   664  ldp x1, x0, [jssp], #16
0x4cd41ffc   668  ret
0x4cd42000   672  ldp x8, x9, [jssp], #16
0x4cd42004   676  sub csp, jssp, #0x78 (120)
0x4cd42008   680  stp x14, x15, [jssp, #-32]!
0x4cd4200c   684  stp x18, lr, [jssp, #16]
0x4cd42010   688  stp x10, x11, [jssp, #-32]!
0x4cd42014   692  stp x12, x13, [jssp, #16]
0x4cd42018   696  stp x6, x7, [jssp, #-32]!
0x4cd4201c   700  stp x8, x9, [jssp, #16]
0x4cd42020   704  stp x2, x3, [jssp, #-24]!
0x4cd42024   708  str x4, [jssp, #16]
0x4cd42028   712  sub csp, jssp, #0xb0 (176)
0x4cd4202c   716  stp d26, d27, [jssp, #-32]!
0x4cd42030   720  stp d28, d29, [jssp, #16]
0x4cd42034   724  stp d22, d23, [jssp, #-32]!
0x4cd42038   728  stp d24, d25, [jssp, #16]
0x4cd4203c   732  stp d18, d19, [jssp, #-32]!
0x4cd42040   736  stp d20, d21, [jssp, #16]
0x4cd42044   740  stp d6, d7, [jssp, #-32]!
0x4cd42048   744  stp d16, d17, [jssp, #16]
0x4cd4204c   748  stp d2, d3, [jssp, #-32]!
0x4cd42050   752  stp d4, d5, [jssp, #16]
0x4cd42054   756  stp d0, d1, [jssp, #-16]!
0x4cd42058   760  mov x0, x8
0x4cd4205c   764  mov x1, x9
0x4cd42060   768  ldr x2, pc+1056 (addr 0x000000004cd42480)    ;; external reference (isolate)
0x4cd42064   772  ldr x16, pc+1060 (addr 0x000000004cd42488)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd42068   776  and csp, jssp, #0xfffffffffffffff0
0x4cd4206c   780  blr x16
0x4cd42070   784  ldp d2, d3, [jssp, #16]
0x4cd42074   788  ldp d0, d1, [jssp], #32
0x4cd42078   792  ldp d6, d7, [jssp, #16]
0x4cd4207c   796  ldp d4, d5, [jssp], #32
0x4cd42080   800  ldp d18, d19, [jssp, #16]
0x4cd42084   804  ldp d16, d17, [jssp], #32
0x4cd42088   808  ldp d22, d23, [jssp, #16]
0x4cd4208c   812  ldp d20, d21, [jssp], #32
0x4cd42090   816  ldp d26, d27, [jssp, #16]
0x4cd42094   820  ldp d24, d25, [jssp], #32
0x4cd42098   824  ldp d28, d29, [jssp], #16
0x4cd4209c   828  ldp x4, x6, [jssp, #16]
0x4cd420a0   832  ldp x2, x3, [jssp], #32
0x4cd420a4   836  ldp x9, x10, [jssp, #16]
0x4cd420a8   840  ldp x7, x8, [jssp], #32
0x4cd420ac   844  ldp x13, x14, [jssp, #16]
0x4cd420b0   848  ldp x11, x12, [jssp], #32
0x4cd420b4   852  ldr lr, [jssp, #16]
0x4cd420b8   856  ldp x15, x18, [jssp], #24
0x4cd420bc   860  ldp x1, x0, [jssp], #16
0x4cd420c0   864  ret
0x4cd420c4   868  sub csp, jssp, #0x10 (16)
0x4cd420c8   872  stp x1, x0, [jssp, #-16]!
0x4cd420cc   876  ldr x5, [x9]
0x4cd420d0   880  and x16, x5, #0xfffffffffff00000
0x4cd420d4   884  ldr x16, [x16, #8]
0x4cd420d8   888  tst x16, #0x18
0x4cd420dc   892  b.eq #+0x1f8 (addr 0x4cd422d4)
0x4cd420e0   896  and x16, x8, #0xfffffffffff00000
0x4cd420e4   900  ldr x16, [x16, #8]
0x4cd420e8   904  tst x16, #0x18
0x4cd420ec   908  b.ne #+0x1e8 (addr 0x4cd422d4)
0x4cd420f0   912  and x5, x8, #0xfffffffffff00000
0x4cd420f4   916  ldr x0, [x5, #104]
0x4cd420f8   920  subs x0, x0, #0x1 (1)
0x4cd420fc   924  str x0, [x5, #104]
0x4cd42100   928  b.mi #+0xe4 (addr 0x4cd421e4)
0x4cd42104   932  ubfx x16, x8, #8, #12
0x4cd42108   936  and x5, x8, #0xfffffffffff00000
0x4cd4210c   940  add x5, x5, x16, lsl #2
0x4cd42110   944  ubfx x0, x8, #3, #5
0x4cd42114   948  ldr x5, [x5, #360]
0x4cd42118   952  lsr x5, x5, x0
0x4cd4211c   956  tbz w5, #0, #+0x8 (addr 0x4cd42124)
0x4cd42120   960  tbnz w5, #1, #+0x3c (addr 0x4cd4215c)
0x4cd42124   964  ldp x1, x0, [jssp], #16
0x4cd42128   968  ldr x16, pc+872 (addr 0x000000004cd42490)    ;; external reference (store_buffer_top)
0x4cd4212c   972  ldr x5, [x16]
0x4cd42130   976  str x9, [x5], #8
0x4cd42134   980  str x5, [x16]
0x4cd42138   984  tst x5, #0x1ffff
0x4cd4213c   988  b.eq #+0x8 (addr 0x4cd42144)
0x4cd42140   992  ret
0x4cd42144   996  sub csp, jssp, #0x8 (8)
0x4cd42148  1000  str lr, [jssp, #-8]!
0x4cd4214c  1004  ldr x17, pc+844 (addr 0x000000004cd42498)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd42150  1008  blr x17
0x4cd42154  1012  ldr lr, [jssp], #8
0x4cd42158  1016  ret
0x4cd4215c  1020  ldr x5, [x9]
0x4cd42160  1024  and x0, x5, #0xfffffffffff00000
0x4cd42164  1028  ldr x0, [x0, #8]
0x4cd42168  1032  tbz w0, #6, #+0x18 (addr 0x4cd42180)
0x4cd4216c  1036  and x0, x8, #0xfffffffffff00000
0x4cd42170  1040  ldr x0, [x0, #8]
0x4cd42174  1044  movz x16, #0x58
0x4cd42178  1048  tst x0, x16
0x4cd4217c  1052  b.eq #+0x68 (addr 0x4cd421e4)
0x4cd42180  1056  sub csp, jssp, #0x10 (16)
0x4cd42184  1060  stp x8, x9, [jssp, #-16]!
0x4cd42188  1064  ubfx x16, x5, #8, #12
0x4cd4218c  1068  and x0, x5, #0xfffffffffff00000
0x4cd42190  1072  add x0, x0, x16, lsl #2
0x4cd42194  1076  ubfx x8, x5, #3, #5
0x4cd42198  1080  ldr x9, [x0, #360]
0x4cd4219c  1084  lsr x9, x9, x8
0x4cd421a0  1088  tbz w9, #0, #+0x40 (addr 0x4cd421e0)
0x4cd421a4  1092  ldp x8, x9, [jssp], #16
0x4cd421a8  1096  ldp x1, x0, [jssp], #16
0x4cd421ac  1100  ldr x16, pc+756 (addr 0x000000004cd424a0)    ;; external reference (store_buffer_top)
0x4cd421b0  1104  ldr x5, [x16]
0x4cd421b4  1108  str x9, [x5], #8
0x4cd421b8  1112  str x5, [x16]
0x4cd421bc  1116  tst x5, #0x1ffff
0x4cd421c0  1120  b.eq #+0x8 (addr 0x4cd421c8)
0x4cd421c4  1124  ret
0x4cd421c8  1128  sub csp, jssp, #0x8 (8)
0x4cd421cc  1132  str lr, [jssp, #-8]!
0x4cd421d0  1136  ldr x17, pc+728 (addr 0x000000004cd424a8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd421d4  1140  blr x17
0x4cd421d8  1144  ldr lr, [jssp], #8
0x4cd421dc  1148  ret
0x4cd421e0  1152  ldp x8, x9, [jssp], #16
0x4cd421e4  1156  sub csp, jssp, #0x78 (120)
0x4cd421e8  1160  stp x14, x15, [jssp, #-32]!
0x4cd421ec  1164  stp x18, lr, [jssp, #16]
0x4cd421f0  1168  stp x10, x11, [jssp, #-32]!
0x4cd421f4  1172  stp x12, x13, [jssp, #16]
0x4cd421f8  1176  stp x6, x7, [jssp, #-32]!
0x4cd421fc  1180  stp x8, x9, [jssp, #16]
0x4cd42200  1184  stp x2, x3, [jssp, #-24]!
0x4cd42204  1188  str x4, [jssp, #16]
0x4cd42208  1192  sub csp, jssp, #0xb0 (176)
0x4cd4220c  1196  stp d26, d27, [jssp, #-32]!
0x4cd42210  1200  stp d28, d29, [jssp, #16]
0x4cd42214  1204  stp d22, d23, [jssp, #-32]!
0x4cd42218  1208  stp d24, d25, [jssp, #16]
0x4cd4221c  1212  stp d18, d19, [jssp, #-32]!
0x4cd42220  1216  stp d20, d21, [jssp, #16]
0x4cd42224  1220  stp d6, d7, [jssp, #-32]!
0x4cd42228  1224  stp d16, d17, [jssp, #16]
0x4cd4222c  1228  stp d2, d3, [jssp, #-32]!
0x4cd42230  1232  stp d4, d5, [jssp, #16]
0x4cd42234  1236  stp d0, d1, [jssp, #-16]!
0x4cd42238  1240  mov x0, x8
0x4cd4223c  1244  mov x1, x9
0x4cd42240  1248  ldr x2, pc+624 (addr 0x000000004cd424b0)    ;; external reference (isolate)
0x4cd42244  1252  ldr x16, pc+628 (addr 0x000000004cd424b8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd42248  1256  and csp, jssp, #0xfffffffffffffff0
0x4cd4224c  1260  blr x16
0x4cd42250  1264  ldp d2, d3, [jssp, #16]
0x4cd42254  1268  ldp d0, d1, [jssp], #32
0x4cd42258  1272  ldp d6, d7, [jssp, #16]
0x4cd4225c  1276  ldp d4, d5, [jssp], #32
0x4cd42260  1280  ldp d18, d19, [jssp, #16]
0x4cd42264  1284  ldp d16, d17, [jssp], #32
0x4cd42268  1288  ldp d22, d23, [jssp, #16]
0x4cd4226c  1292  ldp d20, d21, [jssp], #32
0x4cd42270  1296  ldp d26, d27, [jssp, #16]
0x4cd42274  1300  ldp d24, d25, [jssp], #32
0x4cd42278  1304  ldp d28, d29, [jssp], #16
0x4cd4227c  1308  ldp x4, x6, [jssp, #16]
0x4cd42280  1312  ldp x2, x3, [jssp], #32
0x4cd42284  1316  ldp x9, x10, [jssp, #16]
0x4cd42288  1320  ldp x7, x8, [jssp], #32
0x4cd4228c  1324  ldp x13, x14, [jssp, #16]
0x4cd42290  1328  ldp x11, x12, [jssp], #32
0x4cd42294  1332  ldr lr, [jssp, #16]
0x4cd42298  1336  ldp x15, x18, [jssp], #24
0x4cd4229c  1340  ldp x1, x0, [jssp], #16
0x4cd422a0  1344  ldr x16, pc+544 (addr 0x000000004cd424c0)    ;; external reference (store_buffer_top)
0x4cd422a4  1348  ldr x5, [x16]
0x4cd422a8  1352  str x9, [x5], #8
0x4cd422ac  1356  str x5, [x16]
0x4cd422b0  1360  tst x5, #0x1ffff
0x4cd422b4  1364  b.eq #+0x8 (addr 0x4cd422bc)
0x4cd422b8  1368  ret
0x4cd422bc  1372  sub csp, jssp, #0x8 (8)
0x4cd422c0  1376  str lr, [jssp, #-8]!
0x4cd422c4  1380  ldr x17, pc+516 (addr 0x000000004cd424c8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd422c8  1384  blr x17
0x4cd422cc  1388  ldr lr, [jssp], #8
0x4cd422d0  1392  ret
0x4cd422d4  1396  and x5, x8, #0xfffffffffff00000
0x4cd422d8  1400  ldr x0, [x5, #104]
0x4cd422dc  1404  subs x0, x0, #0x1 (1)
0x4cd422e0  1408  str x0, [x5, #104]
0x4cd422e4  1412  b.mi #+0x84 (addr 0x4cd42368)
0x4cd422e8  1416  ubfx x16, x8, #8, #12
0x4cd422ec  1420  and x5, x8, #0xfffffffffff00000
0x4cd422f0  1424  add x5, x5, x16, lsl #2
0x4cd422f4  1428  ubfx x0, x8, #3, #5
0x4cd422f8  1432  ldr x5, [x5, #360]
0x4cd422fc  1436  lsr x5, x5, x0
0x4cd42300  1440  tbz w5, #0, #+0x8 (addr 0x4cd42308)
0x4cd42304  1444  tbnz w5, #1, #+0xc (addr 0x4cd42310)
0x4cd42308  1448  ldp x1, x0, [jssp], #16
0x4cd4230c  1452  ret
0x4cd42310  1456  ldr x5, [x9]
0x4cd42314  1460  and x0, x5, #0xfffffffffff00000
0x4cd42318  1464  ldr x0, [x0, #8]
0x4cd4231c  1468  tbz w0, #6, #+0x18 (addr 0x4cd42334)
0x4cd42320  1472  and x0, x8, #0xfffffffffff00000
0x4cd42324  1476  ldr x0, [x0, #8]
0x4cd42328  1480  movz x16, #0x58
0x4cd4232c  1484  tst x0, x16
0x4cd42330  1488  b.eq #+0x38 (addr 0x4cd42368)
0x4cd42334  1492  sub csp, jssp, #0x10 (16)
0x4cd42338  1496  stp x8, x9, [jssp, #-16]!
0x4cd4233c  1500  ubfx x16, x5, #8, #12
0x4cd42340  1504  and x0, x5, #0xfffffffffff00000
0x4cd42344  1508  add x0, x0, x16, lsl #2
0x4cd42348  1512  ubfx x8, x5, #3, #5
0x4cd4234c  1516  ldr x9, [x0, #360]
0x4cd42350  1520  lsr x9, x9, x8
0x4cd42354  1524  tbz w9, #0, #+0x10 (addr 0x4cd42364)
0x4cd42358  1528  ldp x8, x9, [jssp], #16
0x4cd4235c  1532  ldp x1, x0, [jssp], #16
0x4cd42360  1536  ret
0x4cd42364  1540  ldp x8, x9, [jssp], #16
0x4cd42368  1544  sub csp, jssp, #0x78 (120)
0x4cd4236c  1548  stp x14, x15, [jssp, #-32]!
0x4cd42370  1552  stp x18, lr, [jssp, #16]
0x4cd42374  1556  stp x10, x11, [jssp, #-32]!
0x4cd42378  1560  stp x12, x13, [jssp, #16]
0x4cd4237c  1564  stp x6, x7, [jssp, #-32]!
0x4cd42380  1568  stp x8, x9, [jssp, #16]
0x4cd42384  1572  stp x2, x3, [jssp, #-24]!
0x4cd42388  1576  str x4, [jssp, #16]
0x4cd4238c  1580  sub csp, jssp, #0xb0 (176)
0x4cd42390  1584  stp d26, d27, [jssp, #-32]!
0x4cd42394  1588  stp d28, d29, [jssp, #16]
0x4cd42398  1592  stp d22, d23, [jssp, #-32]!
0x4cd4239c  1596  stp d24, d25, [jssp, #16]
0x4cd423a0  1600  stp d18, d19, [jssp, #-32]!
0x4cd423a4  1604  stp d20, d21, [jssp, #16]
0x4cd423a8  1608  stp d6, d7, [jssp, #-32]!
0x4cd423ac  1612  stp d16, d17, [jssp, #16]
0x4cd423b0  1616  stp d2, d3, [jssp, #-32]!
0x4cd423b4  1620  stp d4, d5, [jssp, #16]
0x4cd423b8  1624  stp d0, d1, [jssp, #-16]!
0x4cd423bc  1628  mov x0, x8
0x4cd423c0  1632  mov x1, x9
0x4cd423c4  1636  ldr x2, pc+268 (addr 0x000000004cd424d0)    ;; external reference (isolate)
0x4cd423c8  1640  ldr x16, pc+272 (addr 0x000000004cd424d8)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd423cc  1644  and csp, jssp, #0xfffffffffffffff0
0x4cd423d0  1648  blr x16
0x4cd423d4  1652  ldp d2, d3, [jssp, #16]
0x4cd423d8  1656  ldp d0, d1, [jssp], #32
0x4cd423dc  1660  ldp d6, d7, [jssp, #16]
0x4cd423e0  1664  ldp d4, d5, [jssp], #32
0x4cd423e4  1668  ldp d18, d19, [jssp, #16]
0x4cd423e8  1672  ldp d16, d17, [jssp], #32
0x4cd423ec  1676  ldp d22, d23, [jssp, #16]
0x4cd423f0  1680  ldp d20, d21, [jssp], #32
0x4cd423f4  1684  ldp d26, d27, [jssp, #16]
0x4cd423f8  1688  ldp d24, d25, [jssp], #32
0x4cd423fc  1692  ldp d28, d29, [jssp], #16
0x4cd42400  1696  ldp x4, x6, [jssp, #16]
0x4cd42404  1700  ldp x2, x3, [jssp], #32
0x4cd42408  1704  ldp x9, x10, [jssp, #16]
0x4cd4240c  1708  ldp x7, x8, [jssp], #32
0x4cd42410  1712  ldp x13, x14, [jssp, #16]
0x4cd42414  1716  ldp x11, x12, [jssp], #32
0x4cd42418  1720  ldr lr, [jssp, #16]
0x4cd4241c  1724  ldp x15, x18, [jssp], #24
0x4cd42420  1728  ldp x1, x0, [jssp], #16
0x4cd42424  1732  ret
0x4cd42428  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd4242c  1740  d63f03e0       constant
0x4cd42430  1744  166dd8c0       constant
0x4cd42434  1748  00000000       constant
0x4cd42438  1752  4cd065a0       constant
0x4cd4243c  1756  00000000       constant
0x4cd42440  1760  166dd8c0       constant
0x4cd42444  1764  00000000       constant
0x4cd42448  1768  4cd065a0       constant
0x4cd4244c  1772  00000000       constant
0x4cd42450  1776  166dd8c0       constant
0x4cd42454  1780  00000000       constant
0x4cd42458  1784  4cd065a0       constant
0x4cd4245c  1788  00000000       constant
0x4cd42460  1792  166dc2d0       constant
0x4cd42464  1796  00000000       constant
0x4cd42468  1800  00c2d958       constant
0x4cd4246c  1804  00000000       constant
0x4cd42470  1808  166dd8c0       constant
0x4cd42474  1812  00000000       constant
0x4cd42478  1816  4cd065a0       constant
0x4cd4247c  1820  00000000       constant
0x4cd42480  1824  166dc2d0       constant
0x4cd42484  1828  00000000       constant
0x4cd42488  1832  00c2d958       constant
0x4cd4248c  1836  00000000       constant
0x4cd42490  1840  166dd8c0       constant
0x4cd42494  1844  00000000       constant
0x4cd42498  1848  4cd065a0       constant
0x4cd4249c  1852  00000000       constant
0x4cd424a0  1856  166dd8c0       constant
0x4cd424a4  1860  00000000       constant
0x4cd424a8  1864  4cd065a0       constant
0x4cd424ac  1868  00000000       constant
0x4cd424b0  1872  166dc2d0       constant
0x4cd424b4  1876  00000000       constant
0x4cd424b8  1880  00c2d958       constant
0x4cd424bc  1884  00000000       constant
0x4cd424c0  1888  166dd8c0       constant
0x4cd424c4  1892  00000000       constant
0x4cd424c8  1896  4cd065a0       constant
0x4cd424cc  1900  00000000       constant
0x4cd424d0  1904  166dc2d0       constant
0x4cd424d4  1908  00000000       constant
0x4cd424d8  1912  00c2d958       constant
0x4cd424dc  1916  00000000       constant


RelocInfo (size = 65)
0x4cd41d68  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd41d8c  code target (STUB)  (0x4cd065a0)
0x4cd41e04  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd41e28  code target (STUB)  (0x4cd065a0)
0x4cd41e68  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd41e8c  code target (STUB)  (0x4cd065a0)
0x4cd41efc  external reference (isolate)  (0x166dc2d0)
0x4cd41f00  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd41f5c  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd41f80  code target (STUB)  (0x4cd065a0)
0x4cd42060  external reference (isolate)  (0x166dc2d0)
0x4cd42064  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd42128  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd4214c  code target (STUB)  (0x4cd065a0)
0x4cd421ac  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd421d0  code target (STUB)  (0x4cd065a0)
0x4cd42240  external reference (isolate)  (0x166dc2d0)
0x4cd42244  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd422a0  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd422c4  code target (STUB)  (0x4cd065a0)
0x4cd423c4  external reference (isolate)  (0x166dc2d0)
0x4cd423c8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd42428  constant pool (size 184)


kind = STUB
major_key = FastArrayPushStub
name = FastArrayPushStub
compiler = crankshaft
Instructions (size = 2199)
0x4cd42540     0  movz x16, #0xa00000000
0x4cd42544     4  sub csp, jssp, #0x10 (16)
0x4cd42548     8  stp fp, lr, [jssp, #-16]!
0x4cd4254c    12  mov fp, jssp
0x4cd42550    16  sub csp, jssp, #0x8 (8)
0x4cd42554    20  sub jssp, jssp, #0x8 (8)
0x4cd42558    24  stur x16, [fp, #-8]
0x4cd4255c    28  mov x2, fp
0x4cd42560    32  add w1, w0, #0x2 (2)
0x4cd42564    36  ldr x1, [x2, w1, uxtw #3]
0x4cd42568    40  tbz w1, #0, #+0x758 (addr 0x4cd42cc0)
0x4cd4256c    44  ldur x3, [x1, #-1]
0x4cd42570    48  ldur x4, [x1, #-1]
0x4cd42574    52  ldrb w4, [x4, #11]
0x4cd42578    56  cmp x4, #0xbc (188)
0x4cd4257c    60  b.ne #+0x74c (addr 0x4cd42cc8)
0x4cd42580    64  ldrb w4, [x3, #13]
0x4cd42584    68  movz w16, #0x5
0x4cd42588    72  and w5, w4, w16
0x4cd4258c    76  cmp w5, #0x1 (1)
0x4cd42590    80  b.ne #+0x568 (addr 0x4cd42af8)
0x4cd42594    84  ldrb w5, [x3, #12]
0x4cd42598    88  and w5, w5, #0x20
0x4cd4259c    92  cmp w5, #0x20 (32)
0x4cd425a0    96  b.eq #+0x550 (addr 0x4cd42af0)
0x4cd425a4   100  ldur w5, [x3, #15]
0x4cd425a8   104  and w5, w5, #0x100000
0x4cd425ac   108  cmp w5, #0x100000 (1048576)
0x4cd425b0   112  b.eq #+0x538 (addr 0x4cd42ae8)
0x4cd425b4   116  ldur x5, [x3, #47]
0x4cd425b8   120  ldur w6, [x5, #43]
0x4cd425bc   124  and w5, w6, #0x4
0x4cd425c0   128  cmp w5, #0x4 (4)
0x4cd425c4   132  b.eq #+0x51c (addr 0x4cd42ae0)
0x4cd425c8   136  ldr x5, [x26, #56]
0x4cd425cc   140  ldr x6, [x26, #304]
0x4cd425d0   144  ldur x3, [x3, #23]
0x4cd425d4   148  cmp x3, x5
0x4cd425d8   152  b.eq #+0x40 (addr 0x4cd42618)
0x4cd425dc   156  ldur x7, [x3, #-1]
0x4cd425e0   160  ldrb w8, [x7, #11]
0x4cd425e4   164  cmp w8, #0xb4 (180)
0x4cd425e8   168  b.le #+0x20 (addr 0x4cd42608)
0x4cd425ec   172  cmp w8, #0xb6 (182)
0x4cd425f0   176  b.eq #+0x18 (addr 0x4cd42608)
0x4cd425f4   180  ldur x3, [x3, #15]
0x4cd425f8   184  cmp x3, x6
0x4cd425fc   188  b.ne #+0x14 (addr 0x4cd42610)
0x4cd42600   192  mov x3, x7
0x4cd42604   196  b #-0x34 (addr 0x4cd425d0)
0x4cd42608   200  ldr x16, pc+1488 (addr 0x000000004cd42bd8)    ;; lazy deoptimization bailout 2
0x4cd4260c   204  blr x16
0x4cd42610   208  ldr x16, pc+1488 (addr 0x000000004cd42be0)    ;; lazy deoptimization bailout 3
0x4cd42614   212  blr x16
0x4cd42618   216  and w3, w4, #0xf8
0x4cd4261c   220  lsr w3, w3, #3
0x4cd42620   224  cmp w3, #0x1 (1)
0x4cd42624   228  b.le #+0x330 (addr 0x4cd42954)
0x4cd42628   232  cmp w3, #0x3 (3)
0x4cd4262c   236  b.le #+0x1b8 (addr 0x4cd427e4)
0x4cd42630   240  cmp w3, #0x5 (5)
0x4cd42634   244  b.le #+0xc (addr 0x4cd42640)
0x4cd42638   248  ldr x16, pc+1456 (addr 0x000000004cd42be8)    ;; lazy deoptimization bailout 4
0x4cd4263c   252  blr x16
0x4cd42640   256  movz x3, #0x0
0x4cd42644   260  cmp w0, w3
0x4cd42648   264  b.le #+0x34 (addr 0x4cd4267c)
0x4cd4264c   268  sub w4, w0, w3
0x4cd42650   272  add w4, w4, #0x1 (1)
0x4cd42654   276  ldr x4, [x2, w4, uxtw #3]
0x4cd42658   280  tbz w4, #0, #+0x14 (addr 0x4cd4266c)
0x4cd4265c   284  ldur x4, [x4, #-1]
0x4cd42660   288  ldr x16, pc+1480 (addr 0x000000004cd42c28)    ;; object: 0x2a804411 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd42664   292  cmp x4, x16
0x4cd42668   296  b.ne #+0xc (addr 0x4cd42674)
0x4cd4266c   300  add w3, w3, #0x1 (1)
0x4cd42670   304  b #-0x2c (addr 0x4cd42644)
0x4cd42674   308  ldr x16, pc+1404 (addr 0x000000004cd42bf0)    ;; lazy deoptimization bailout 5
0x4cd42678   312  blr x16
0x4cd4267c   316  ldur w3, [x1, #27]
0x4cd42680   320  adds w4, w3, w0
0x4cd42684   324  b.vs #+0x64c (addr 0x4cd42cd0)
0x4cd42688   328  subs w5, w4, #0x1 (1)
0x4cd4268c   332  b.vs #+0x64c (addr 0x4cd42cd8)
0x4cd42690   336  ldur x6, [x1, #15]
0x4cd42694   340  cmp w3, w5
0x4cd42698   344  b.le #+0x10 (addr 0x4cd426a8)
0x4cd4269c   348  cmp w5, w3
0x4cd426a0   352  b.hs #+0x640 (addr 0x4cd42ce0)
0x4cd426a4   356  b #+0xe4 (addr 0x4cd42788)
0x4cd426a8   360  ldur w7, [x6, #11]
0x4cd426ac   364  cmp w7, w5
0x4cd426b0   368  b.gt #+0xcc (addr 0x4cd4277c)
0x4cd426b4   372  adds w7, w7, #0x400 (1024)
0x4cd426b8   376  b.vs #+0x630 (addr 0x4cd42ce8)
0x4cd426bc   380  cmp w5, w7
0x4cd426c0   384  b.hs #+0x630 (addr 0x4cd42cf0)
0x4cd426c4   388  add w7, w5, w5, lsr #1
0x4cd426c8   392  add w7, w7, #0x10 (16)
0x4cd426cc   396  movz w16, #0x95ff
0x4cd426d0   400  cmp w7, w16, lsl #1
0x4cd426d4   404  b.hs #+0x624 (addr 0x4cd42cf8)
0x4cd426d8   408  lsl x8, x7, #32
0x4cd426dc   412  lsl w9, w7, #3
0x4cd426e0   416  add w7, w9, #0x10 (16)
0x4cd426e4   420  sxtw x7, w7
0x4cd426e8   424  movz x9, #0xd2c0
0x4cd426ec   428  movk x9, #0x166d, lsl #16
0x4cd426f0   432  ldp x11, x16, [x9]
0x4cd426f4   436  adds x10, x11, x7
0x4cd426f8   440  ccmp x10, x16, #nzCv, lo
0x4cd426fc   444  b.hi #+0x404 (addr 0x4cd42b00)
0x4cd42700   448  str x10, [x9]
0x4cd42704   452  orr x11, x11, #0x1
0x4cd42708   456  ldr x7, pc+1320 (addr 0x000000004cd42c30)    ;; object: 0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd4270c   460  stur x7, [x11, #-1]
0x4cd42710   464  stur x8, [x11, #7]
0x4cd42714   468  ldr d0, pc+1292 (addr 0x000000004cd42c20)
0x4cd42718   472  ldur w7, [x11, #11]
0x4cd4271c   476  cmp w3, w7
0x4cd42720   480  b.ge #+0x14 (addr 0x4cd42734)
0x4cd42724   484  sub w7, w7, #0x1 (1)
0x4cd42728   488  add x8, x11, #0xf (15)
0x4cd4272c   492  str d0, [x8, w7, sxtw #3]
0x4cd42730   496  b #-0x14 (addr 0x4cd4271c)
0x4cd42734   500  mov x7, x3
0x4cd42738   504  cmp w7, #0x0 (0)
0x4cd4273c   508  b.le #+0x1c (addr 0x4cd42758)
0x4cd42740   512  sub w7, w7, #0x1 (1)
0x4cd42744   516  add x8, x6, #0xf (15)
0x4cd42748   520  ldr d0, [x8, w7, sxtw #3]
0x4cd4274c   524  add x8, x11, #0xf (15)
0x4cd42750   528  str d0, [x8, w7, sxtw #3]
0x4cd42754   532  b #-0x1c (addr 0x4cd42738)
0x4cd42758   536  mov x6, x11
0x4cd4275c   540  stur x6, [x1, #15]
0x4cd42760   544  add x7, x1, #0xf (15)
0x4cd42764   548  and x6, x1, #0xfffffffffff00000
0x4cd42768   552  ldr x6, [x6, #8]
0x4cd4276c   556  tbz w6, #2, #+0xc (addr 0x4cd42778)
0x4cd42770   560  ldr x16, pc+1224 (addr 0x000000004cd42c38)    ;; code: STUB, RecordWriteStub, minor: 72897
0x4cd42774   564  blr x16
0x4cd42778   568  mov x6, x11
0x4cd4277c   572  add w5, w5, #0x1 (1)
0x4cd42780   576  lsl x5, x5, #32
0x4cd42784   580  stur x5, [x1, #23]
0x4cd42788   584  movz x1, #0x0
0x4cd4278c   588  cmp w0, w1
0x4cd42790   592  b.le #+0x4c (addr 0x4cd427dc)
0x4cd42794   596  sub w5, w0, w1
0x4cd42798   600  add w5, w5, #0x1 (1)
0x4cd4279c   604  ldr x5, [x2, w5, uxtw #3]
0x4cd427a0   608  adds w7, w1, w3
0x4cd427a4   612  b.vs #+0x55c (addr 0x4cd42d00)
0x4cd427a8   616  tbz w5, #0, #+0x1c (addr 0x4cd427c4)
0x4cd427ac   620  ldur x16, [x5, #-1]
0x4cd427b0   624  ldr x17, [x26, #120]
0x4cd427b4   628  cmp x16, x17
0x4cd427b8   632  b.ne #+0x550 (addr 0x4cd42d08)
0x4cd427bc   636  ldur d0, [x5, #7]
0x4cd427c0   640  b #+0x8 (addr 0x4cd427c8)
0x4cd427c4   644  scvtf d0, x5, #32
0x4cd427c8   648  add x5, x6, #0xf (15)
0x4cd427cc   652  fsub d29, d0, d15
0x4cd427d0   656  str d29, [x5, w7, sxtw #3]
0x4cd427d4   660  add w1, w1, #0x1 (1)
0x4cd427d8   664  b #-0x4c (addr 0x4cd4278c)
0x4cd427dc   668  lsl x1, x4, #32
0x4cd427e0   672  b #+0x2e4 (addr 0x4cd42ac4)
0x4cd427e4   676  ldur w3, [x1, #27]
0x4cd427e8   680  adds w4, w3, w0
0x4cd427ec   684  b.vs #+0x524 (addr 0x4cd42d10)
0x4cd427f0   688  subs w5, w4, #0x1 (1)
0x4cd427f4   692  b.vs #+0x524 (addr 0x4cd42d18)
0x4cd427f8   696  ldur x6, [x1, #15]
0x4cd427fc   700  cmp w3, w5
0x4cd42800   704  b.le #+0x10 (addr 0x4cd42810)
0x4cd42804   708  cmp w5, w3
0x4cd42808   712  b.hs #+0x518 (addr 0x4cd42d20)
0x4cd4280c   716  b #+0xe4 (addr 0x4cd428f0)
0x4cd42810   720  ldur w7, [x6, #11]
0x4cd42814   724  cmp w7, w5
0x4cd42818   728  b.gt #+0xcc (addr 0x4cd428e4)
0x4cd4281c   732  adds w7, w7, #0x400 (1024)
0x4cd42820   736  b.vs #+0x508 (addr 0x4cd42d28)
0x4cd42824   740  cmp w5, w7
0x4cd42828   744  b.hs #+0x508 (addr 0x4cd42d30)
0x4cd4282c   748  add w7, w5, w5, lsr #1
0x4cd42830   752  add w7, w7, #0x10 (16)
0x4cd42834   756  movz w16, #0x95ff
0x4cd42838   760  cmp w7, w16, lsl #1
0x4cd4283c   764  b.hs #+0x4fc (addr 0x4cd42d38)
0x4cd42840   768  lsl x8, x7, #32
0x4cd42844   772  lsl w9, w7, #3
0x4cd42848   776  add w7, w9, #0x10 (16)
0x4cd4284c   780  sxtw x7, w7
0x4cd42850   784  movz x9, #0xd2c0
0x4cd42854   788  movk x9, #0x166d, lsl #16
0x4cd42858   792  ldp x11, x16, [x9]
0x4cd4285c   796  adds x10, x11, x7
0x4cd42860   800  ccmp x10, x16, #nzCv, lo
0x4cd42864   804  b.hi #+0x2e0 (addr 0x4cd42b44)
0x4cd42868   808  str x10, [x9]
0x4cd4286c   812  orr x11, x11, #0x1
0x4cd42870   816  ldr x7, pc+976 (addr 0x000000004cd42c40)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd42874   820  stur x7, [x11, #-1]
0x4cd42878   824  stur x8, [x11, #7]
0x4cd4287c   828  ldur w7, [x11, #11]
0x4cd42880   832  cmp w3, w7
0x4cd42884   836  b.ge #+0x18 (addr 0x4cd4289c)
0x4cd42888   840  sub w7, w7, #0x1 (1)
0x4cd4288c   844  ldr x8, pc+956 (addr 0x000000004cd42c48)    ;; object: 0x21004519 <the hole>
0x4cd42890   848  add x9, x11, #0xf (15)
0x4cd42894   852  str x8, [x9, w7, sxtw #3]
0x4cd42898   856  b #-0x18 (addr 0x4cd42880)
0x4cd4289c   860  mov x7, x3
0x4cd428a0   864  cmp w7, #0x0 (0)
0x4cd428a4   868  b.le #+0x1c (addr 0x4cd428c0)
0x4cd428a8   872  sub w7, w7, #0x1 (1)
0x4cd428ac   876  add x8, x6, #0xf (15)
0x4cd428b0   880  ldr x9, [x8, w7, sxtw #3]
0x4cd428b4   884  add x8, x11, #0xf (15)
0x4cd428b8   888  str x9, [x8, w7, sxtw #3]
0x4cd428bc   892  b #-0x1c (addr 0x4cd428a0)
0x4cd428c0   896  mov x6, x11
0x4cd428c4   900  stur x6, [x1, #15]
0x4cd428c8   904  add x7, x1, #0xf (15)
0x4cd428cc   908  and x6, x1, #0xfffffffffff00000
0x4cd428d0   912  ldr x6, [x6, #8]
0x4cd428d4   916  tbz w6, #2, #+0xc (addr 0x4cd428e0)
0x4cd428d8   920  ldr x16, pc+888 (addr 0x000000004cd42c50)    ;; code: STUB, RecordWriteStub, minor: 72897
0x4cd428dc   924  blr x16
0x4cd428e0   928  mov x6, x11
0x4cd428e4   932  add w5, w5, #0x1 (1)
0x4cd428e8   936  lsl x5, x5, #32
0x4cd428ec   940  stur x5, [x1, #23]
0x4cd428f0   944  movz x1, #0x0
0x4cd428f4   948  cmp w0, w1
0x4cd428f8   952  b.le #+0x54 (addr 0x4cd4294c)
0x4cd428fc   956  sub w5, w0, w1
0x4cd42900   960  add w5, w5, #0x1 (1)
0x4cd42904   964  ldr x5, [x2, w5, uxtw #3]
0x4cd42908   968  adds w7, w1, w3
0x4cd4290c   972  b.vs #+0x434 (addr 0x4cd42d40)
0x4cd42910   976  mov x8, x6
0x4cd42914   980  add x9, x8, #0xf (15)
0x4cd42918   984  str x5, [x9, w7, sxtw #3]
0x4cd4291c   988  add x9, x9, w7, sxtw #3
0x4cd42920   992  tbz w5, #0, #+0x24 (addr 0x4cd42944)
0x4cd42924   996  and x5, x5, #0xfffffffffff00000
0x4cd42928  1000  ldr x5, [x5, #8]
0x4cd4292c  1004  tbz w5, #1, #+0x18 (addr 0x4cd42944)
0x4cd42930  1008  and x5, x8, #0xfffffffffff00000
0x4cd42934  1012  ldr x5, [x5, #8]
0x4cd42938  1016  tbz w5, #2, #+0xc (addr 0x4cd42944)
0x4cd4293c  1020  ldr x16, pc+796 (addr 0x000000004cd42c58)    ;; code: STUB, RecordWriteStub, minor: 74920
0x4cd42940  1024  blr x16
0x4cd42944  1028  add w1, w1, #0x1 (1)
0x4cd42948  1032  b #-0x54 (addr 0x4cd428f4)
0x4cd4294c  1036  lsl x1, x4, #32
0x4cd42950  1040  b #+0x174 (addr 0x4cd42ac4)
0x4cd42954  1044  movz x3, #0x0
0x4cd42958  1048  cmp w0, w3
0x4cd4295c  1052  b.le #+0x24 (addr 0x4cd42980)
0x4cd42960  1056  sub w4, w0, w3
0x4cd42964  1060  add w4, w4, #0x1 (1)
0x4cd42968  1064  ldr x4, [x2, w4, uxtw #3]
0x4cd4296c  1068  tbnz w4, #0, #+0xc (addr 0x4cd42978)
0x4cd42970  1072  add w3, w3, #0x1 (1)
0x4cd42974  1076  b #-0x1c (addr 0x4cd42958)
0x4cd42978  1080  ldr x16, pc+640 (addr 0x000000004cd42bf8)    ;; lazy deoptimization bailout 21
0x4cd4297c  1084  blr x16
0x4cd42980  1088  ldur w3, [x1, #27]
0x4cd42984  1092  adds w4, w3, w0
0x4cd42988  1096  b.vs #+0x3c0 (addr 0x4cd42d48)
0x4cd4298c  1100  subs w5, w4, #0x1 (1)
0x4cd42990  1104  b.vs #+0x3c0 (addr 0x4cd42d50)
0x4cd42994  1108  ldur x6, [x1, #15]
0x4cd42998  1112  cmp w3, w5
0x4cd4299c  1116  b.le #+0x10 (addr 0x4cd429ac)
0x4cd429a0  1120  cmp w5, w3
0x4cd429a4  1124  b.hs #+0x3b4 (addr 0x4cd42d58)
0x4cd429a8  1128  b #+0xe4 (addr 0x4cd42a8c)
0x4cd429ac  1132  ldur w7, [x6, #11]
0x4cd429b0  1136  cmp w7, w5
0x4cd429b4  1140  b.gt #+0xcc (addr 0x4cd42a80)
0x4cd429b8  1144  adds w7, w7, #0x400 (1024)
0x4cd429bc  1148  b.vs #+0x3a4 (addr 0x4cd42d60)
0x4cd429c0  1152  cmp w5, w7
0x4cd429c4  1156  b.hs #+0x3a4 (addr 0x4cd42d68)
0x4cd429c8  1160  add w7, w5, w5, lsr #1
0x4cd429cc  1164  add w7, w7, #0x10 (16)
0x4cd429d0  1168  movz w16, #0x95ff
0x4cd429d4  1172  cmp w7, w16, lsl #1
0x4cd429d8  1176  b.hs #+0x398 (addr 0x4cd42d70)
0x4cd429dc  1180  lsl x8, x7, #32
0x4cd429e0  1184  lsl w9, w7, #3
0x4cd429e4  1188  add w7, w9, #0x10 (16)
0x4cd429e8  1192  sxtw x7, w7
0x4cd429ec  1196  movz x9, #0xd2c0
0x4cd429f0  1200  movk x9, #0x166d, lsl #16
0x4cd429f4  1204  ldp x11, x16, [x9]
0x4cd429f8  1208  adds x10, x11, x7
0x4cd429fc  1212  ccmp x10, x16, #nzCv, lo
0x4cd42a00  1216  b.hi #+0x188 (addr 0x4cd42b88)
0x4cd42a04  1220  str x10, [x9]
0x4cd42a08  1224  orr x11, x11, #0x1
0x4cd42a0c  1228  ldr x7, pc+596 (addr 0x000000004cd42c60)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd42a10  1232  stur x7, [x11, #-1]
0x4cd42a14  1236  stur x8, [x11, #7]
0x4cd42a18  1240  ldur w7, [x11, #11]
0x4cd42a1c  1244  cmp w3, w7
0x4cd42a20  1248  b.ge #+0x18 (addr 0x4cd42a38)
0x4cd42a24  1252  sub w7, w7, #0x1 (1)
0x4cd42a28  1256  ldr x8, pc+576 (addr 0x000000004cd42c68)    ;; object: 0x21004519 <the hole>
0x4cd42a2c  1260  add x9, x11, #0xf (15)
0x4cd42a30  1264  str x8, [x9, w7, sxtw #3]
0x4cd42a34  1268  b #-0x18 (addr 0x4cd42a1c)
0x4cd42a38  1272  mov x7, x3
0x4cd42a3c  1276  cmp w7, #0x0 (0)
0x4cd42a40  1280  b.le #+0x1c (addr 0x4cd42a5c)
0x4cd42a44  1284  sub w7, w7, #0x1 (1)
0x4cd42a48  1288  add x8, x6, #0xf (15)
0x4cd42a4c  1292  ldr x9, [x8, w7, sxtw #3]
0x4cd42a50  1296  add x8, x11, #0xf (15)
0x4cd42a54  1300  str x9, [x8, w7, sxtw #3]
0x4cd42a58  1304  b #-0x1c (addr 0x4cd42a3c)
0x4cd42a5c  1308  mov x6, x11
0x4cd42a60  1312  stur x6, [x1, #15]
0x4cd42a64  1316  add x7, x1, #0xf (15)
0x4cd42a68  1320  and x6, x1, #0xfffffffffff00000
0x4cd42a6c  1324  ldr x6, [x6, #8]
0x4cd42a70  1328  tbz w6, #2, #+0xc (addr 0x4cd42a7c)
0x4cd42a74  1332  ldr x16, pc+508 (addr 0x000000004cd42c70)    ;; code: STUB, RecordWriteStub, minor: 72897
0x4cd42a78  1336  blr x16
0x4cd42a7c  1340  mov x6, x11
0x4cd42a80  1344  add w5, w5, #0x1 (1)
0x4cd42a84  1348  lsl x5, x5, #32
0x4cd42a88  1352  stur x5, [x1, #23]
0x4cd42a8c  1356  movz x1, #0x0
0x4cd42a90  1360  cmp w0, w1
0x4cd42a94  1364  b.le #+0x2c (addr 0x4cd42ac0)
0x4cd42a98  1368  sub w5, w0, w1
0x4cd42a9c  1372  add w5, w5, #0x1 (1)
0x4cd42aa0  1376  ldr x5, [x2, w5, uxtw #3]
0x4cd42aa4  1380  adds w7, w1, w3
0x4cd42aa8  1384  b.vs #+0x2d0 (addr 0x4cd42d78)
0x4cd42aac  1388  tbnz w5, #0, #+0x2d4 (addr 0x4cd42d80)
0x4cd42ab0  1392  add x8, x6, #0xf (15)
0x4cd42ab4  1396  str x5, [x8, w7, sxtw #3]
0x4cd42ab8  1400  add w1, w1, #0x1 (1)
0x4cd42abc  1404  b #-0x2c (addr 0x4cd42a90)
0x4cd42ac0  1408  lsl x1, x4, #32
0x4cd42ac4  1412  add w0, w0, #0x1 (1)
0x4cd42ac8  1416  lsl x2, x0, #32
0x4cd42acc  1420  mov x0, x1
0x4cd42ad0  1424  mov jssp, fp
0x4cd42ad4  1428  ldp fp, lr, [jssp], #16
0x4cd42ad8  1432  add jssp, jssp, x2, lsr #29
0x4cd42adc  1436  ret
0x4cd42ae0  1440  ldr x16, pc+288 (addr 0x000000004cd42c00)    ;; lazy deoptimization bailout 30
0x4cd42ae4  1444  blr x16
0x4cd42ae8  1448  ldr x16, pc+288 (addr 0x000000004cd42c08)    ;; lazy deoptimization bailout 31
0x4cd42aec  1452  blr x16
0x4cd42af0  1456  ldr x16, pc+288 (addr 0x000000004cd42c10)    ;; lazy deoptimization bailout 32
0x4cd42af4  1460  blr x16
0x4cd42af8  1464  ldr x16, pc+288 (addr 0x000000004cd42c18)    ;; lazy deoptimization bailout 33
0x4cd42afc  1468  blr x16
0x4cd42b00  1472  movz x11, #0x0
0x4cd42b04  1476  mov x16, lr
0x4cd42b08  1480  ldr x17, pc+368 (addr 0x000000004cd42c78)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd42b0c  1484  blr x17
0x4cd42b10  1488  lsl x0, x7, #32
0x4cd42b14  1492  movz x10, #0x100000000
0x4cd42b18  1496  sub csp, jssp, #0x10 (16)
0x4cd42b1c  1500  stp x10, x0, [jssp, #-16]!
0x4cd42b20  1504  movz x0, #0x2
0x4cd42b24  1508  movz x1, #0x5b88
0x4cd42b28  1512  movk x1, #0xe2, lsl #16
0x4cd42b2c  1516  ldr x16, pc+340 (addr 0x000000004cd42c80)    ;; code: STUB, CEntryStub, minor: 5
0x4cd42b30  1520  blr x16
0x4cd42b34  1524  str x0, [jssp, #88]
0x4cd42b38  1528  ldr x16, pc+336 (addr 0x000000004cd42c88)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd42b3c  1532  blr x16
0x4cd42b40  1536  b #-0x438 (addr 0x4cd42708)
0x4cd42b44  1540  movz x11, #0x0
0x4cd42b48  1544  mov x16, lr
0x4cd42b4c  1548  ldr x17, pc+324 (addr 0x000000004cd42c90)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd42b50  1552  blr x17
0x4cd42b54  1556  lsl x0, x7, #32
0x4cd42b58  1560  movz x10, #0x0
0x4cd42b5c  1564  sub csp, jssp, #0x10 (16)
0x4cd42b60  1568  stp x10, x0, [jssp, #-16]!
0x4cd42b64  1572  movz x0, #0x2
0x4cd42b68  1576  movz x1, #0x5b88
0x4cd42b6c  1580  movk x1, #0xe2, lsl #16
0x4cd42b70  1584  ldr x16, pc+296 (addr 0x000000004cd42c98)    ;; code: STUB, CEntryStub, minor: 5
0x4cd42b74  1588  blr x16
0x4cd42b78  1592  str x0, [jssp, #88]
0x4cd42b7c  1596  ldr x16, pc+292 (addr 0x000000004cd42ca0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd42b80  1600  blr x16
0x4cd42b84  1604  b #-0x314 (addr 0x4cd42870)
0x4cd42b88  1608  movz x11, #0x0
0x4cd42b8c  1612  mov x16, lr
0x4cd42b90  1616  ldr x17, pc+280 (addr 0x000000004cd42ca8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd42b94  1620  blr x17
0x4cd42b98  1624  lsl x0, x7, #32
0x4cd42b9c  1628  movz x10, #0x0
0x4cd42ba0  1632  sub csp, jssp, #0x10 (16)
0x4cd42ba4  1636  stp x10, x0, [jssp, #-16]!
0x4cd42ba8  1640  movz x0, #0x2
0x4cd42bac  1644  movz x1, #0x5b88
0x4cd42bb0  1648  movk x1, #0xe2, lsl #16
0x4cd42bb4  1652  ldr x16, pc+252 (addr 0x000000004cd42cb0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd42bb8  1656  blr x16
0x4cd42bbc  1660  str x0, [jssp, #88]
0x4cd42bc0  1664  ldr x16, pc+248 (addr 0x000000004cd42cb8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd42bc4  1668  blr x16
0x4cd42bc8  1672  b #-0x1bc (addr 0x4cd42a0c)
0x4cd42bcc  1676  5800079f       constant pool begin (num_const = 60)    ;; constant pool
0x4cd42bd0  1680  d63f03e0       constant
0x4cd42bd4  1684  d503201f       constant
0x4cd42bd8  1688  4cb06010       constant
0x4cd42bdc  1692  00000000       constant
0x4cd42be0  1696  4cb06018       constant
0x4cd42be4  1700  00000000       constant
0x4cd42be8  1704  4cb06020       constant
0x4cd42bec  1708  00000000       constant
0x4cd42bf0  1712  4cb06028       constant
0x4cd42bf4  1716  00000000       constant
0x4cd42bf8  1720  4cb060a8       constant
0x4cd42bfc  1724  00000000       constant
0x4cd42c00  1728  4cb060f0       constant
0x4cd42c04  1732  00000000       constant
0x4cd42c08  1736  4cb060f8       constant
0x4cd42c0c  1740  00000000       constant
0x4cd42c10  1744  4cb06100       constant
0x4cd42c14  1748  00000000       constant
0x4cd42c18  1752  4cb06108       constant
0x4cd42c1c  1756  00000000       constant
0x4cd42c20  1760  fff7ffff       constant
0x4cd42c24  1764  fff7ffff       constant
0x4cd42c28  1768  2a804411       constant
0x4cd42c2c  1772  00000000       constant
0x4cd42c30  1776  2a8052d9       constant
0x4cd42c34  1780  00000000       constant
0x4cd42c38  1784  4cd41580       constant
0x4cd42c3c  1788  00000000       constant
0x4cd42c40  1792  2a804259       constant
0x4cd42c44  1796  00000000       constant
0x4cd42c48  1800  21004519       constant
0x4cd42c4c  1804  00000000       constant
0x4cd42c50  1808  4cd41580       constant
0x4cd42c54  1812  00000000       constant
0x4cd42c58  1816  4cd41d60       constant
0x4cd42c5c  1820  00000000       constant
0x4cd42c60  1824  2a804259       constant
0x4cd42c64  1828  00000000       constant
0x4cd42c68  1832  21004519       constant
0x4cd42c6c  1836  00000000       constant
0x4cd42c70  1840  4cd41580       constant
0x4cd42c74  1844  00000000       constant
0x4cd42c78  1848  4cd06820       constant
0x4cd42c7c  1852  00000000       constant
0x4cd42c80  1856  4cd06260       constant
0x4cd42c84  1860  00000000       constant
0x4cd42c88  1864  4cd068e0       constant
0x4cd42c8c  1868  00000000       constant
0x4cd42c90  1872  4cd06820       constant
0x4cd42c94  1876  00000000       constant
0x4cd42c98  1880  4cd06260       constant
0x4cd42c9c  1884  00000000       constant
0x4cd42ca0  1888  4cd068e0       constant
0x4cd42ca4  1892  00000000       constant
0x4cd42ca8  1896  4cd06820       constant
0x4cd42cac  1900  00000000       constant
0x4cd42cb0  1904  4cd06260       constant
0x4cd42cb4  1908  00000000       constant
0x4cd42cb8  1912  4cd068e0       constant
0x4cd42cbc  1916  00000000       constant
0x4cd42cc0  1920  movz x16, #0x0
0x4cd42cc4  1924  bl #+0xc4 (addr 0x4cd42d88)
0x4cd42cc8  1928  movz x16, #0x8
0x4cd42ccc  1932  bl #+0xbc (addr 0x4cd42d88)
0x4cd42cd0  1936  movz x16, #0x30
0x4cd42cd4  1940  bl #+0xb4 (addr 0x4cd42d88)
0x4cd42cd8  1944  movz x16, #0x38
0x4cd42cdc  1948  bl #+0xac (addr 0x4cd42d88)
0x4cd42ce0  1952  movz x16, #0x40
0x4cd42ce4  1956  bl #+0xa4 (addr 0x4cd42d88)
0x4cd42ce8  1960  movz x16, #0x48
0x4cd42cec  1964  bl #+0x9c (addr 0x4cd42d88)
0x4cd42cf0  1968  movz x16, #0x50
0x4cd42cf4  1972  bl #+0x94 (addr 0x4cd42d88)
0x4cd42cf8  1976  movz x16, #0x58
0x4cd42cfc  1980  bl #+0x8c (addr 0x4cd42d88)
0x4cd42d00  1984  movz x16, #0x60
0x4cd42d04  1988  bl #+0x84 (addr 0x4cd42d88)
0x4cd42d08  1992  movz x16, #0x68
0x4cd42d0c  1996  bl #+0x7c (addr 0x4cd42d88)
0x4cd42d10  2000  movz x16, #0x70
0x4cd42d14  2004  bl #+0x74 (addr 0x4cd42d88)
0x4cd42d18  2008  movz x16, #0x78
0x4cd42d1c  2012  bl #+0x6c (addr 0x4cd42d88)
0x4cd42d20  2016  movz x16, #0x80
0x4cd42d24  2020  bl #+0x64 (addr 0x4cd42d88)
0x4cd42d28  2024  movz x16, #0x88
0x4cd42d2c  2028  bl #+0x5c (addr 0x4cd42d88)
0x4cd42d30  2032  movz x16, #0x90
0x4cd42d34  2036  bl #+0x54 (addr 0x4cd42d88)
0x4cd42d38  2040  movz x16, #0x98
0x4cd42d3c  2044  bl #+0x4c (addr 0x4cd42d88)
0x4cd42d40  2048  movz x16, #0xa0
0x4cd42d44  2052  bl #+0x44 (addr 0x4cd42d88)
0x4cd42d48  2056  movz x16, #0xb0
0x4cd42d4c  2060  bl #+0x3c (addr 0x4cd42d88)
0x4cd42d50  2064  movz x16, #0xb8
0x4cd42d54  2068  bl #+0x34 (addr 0x4cd42d88)
0x4cd42d58  2072  movz x16, #0xc0
0x4cd42d5c  2076  bl #+0x2c (addr 0x4cd42d88)
0x4cd42d60  2080  movz x16, #0xc8
0x4cd42d64  2084  bl #+0x24 (addr 0x4cd42d88)
0x4cd42d68  2088  movz x16, #0xd0
0x4cd42d6c  2092  bl #+0x1c (addr 0x4cd42d88)
0x4cd42d70  2096  movz x16, #0xd8
0x4cd42d74  2100  bl #+0x14 (addr 0x4cd42d88)
0x4cd42d78  2104  movz x16, #0xe0
0x4cd42d7c  2108  bl #+0xc (addr 0x4cd42d88)
0x4cd42d80  2112  movz x16, #0xe8
0x4cd42d84  2116  bl #+0x4 (addr 0x4cd42d88)
0x4cd42d88  2120  ldr x17, pc+24 (addr 0x000000004cd42da0)    ;; lazy deoptimization bailout 0
0x4cd42d8c  2124  add x17, x17, x16
0x4cd42d90  2128  br x17
0x4cd42d94  2132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd42d98  2136  d63f03e0       constant
0x4cd42d9c  2140  d503201f       constant
0x4cd42da0  2144  4cb06000       constant
0x4cd42da4  2148  00000000       constant


Safepoints (size = 47)
0x4cd42b34  1524  000 | x1 | x2 | x6 | x11 | x27 (sp -> fp)  <none> argc: 2
0x4cd42b78  1592  000 | x1 | x2 | x6 | x11 | x27 (sp -> fp)  <none> argc: 2
0x4cd42bbc  1660  000 | x1 | x2 | x6 | x11 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 71)
0x4cd42608  runtime entry
0x4cd42610  runtime entry
0x4cd42638  runtime entry
0x4cd42660  embedded object  (0x2a804411 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd42674  runtime entry
0x4cd42708  embedded object  (0x2a8052d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd42770  code target (STUB)  (0x4cd41580)
0x4cd42870  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd4288c  embedded object  (0x21004519 <the hole>)
0x4cd428d8  code target (STUB)  (0x4cd41580)
0x4cd4293c  code target (STUB)  (0x4cd41d60)
0x4cd42978  runtime entry
0x4cd42a0c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd42a28  embedded object  (0x21004519 <the hole>)
0x4cd42a74  code target (STUB)  (0x4cd41580)
0x4cd42ae0  runtime entry
0x4cd42ae8  runtime entry
0x4cd42af0  runtime entry
0x4cd42af8  runtime entry
0x4cd42b08  code target (STUB)  (0x4cd06820)
0x4cd42b2c  code target (STUB)  (0x4cd06260)
0x4cd42b38  code target (STUB)  (0x4cd068e0)
0x4cd42b4c  code target (STUB)  (0x4cd06820)
0x4cd42b70  code target (STUB)  (0x4cd06260)
0x4cd42b7c  code target (STUB)  (0x4cd068e0)
0x4cd42b90  code target (STUB)  (0x4cd06820)
0x4cd42bb4  code target (STUB)  (0x4cd06260)
0x4cd42bc0  code target (STUB)  (0x4cd068e0)
0x4cd42bcc  constant pool (size 244)
0x4cd42d88  runtime entry
0x4cd42d94  constant pool (size 20)


kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 2
type = NORMAL
name = ToBooleanICStub(Bool)
compiler = crankshaft
Instructions (size = 144)
0x4cd430a0     0  ldr x16, [x26, #64]
0x4cd430a4     4  cmp x0, x16
0x4cd430a8     8  b.eq #+0x1c (addr 0x4cd430c4)
0x4cd430ac    12  ldr x16, [x26, #72]
0x4cd430b0    16  cmp x0, x16
0x4cd430b4    20  b.eq #+0x8 (addr 0x4cd430bc)
0x4cd430b8    24  b #+0x30 (addr 0x4cd430e8)
0x4cd430bc    28  ldr x0, pc+28 (addr 0x000000004cd430d8)    ;; object: 0x210042b1 <false>
0x4cd430c0    32  ret
0x4cd430c4    36  ldr x0, pc+28 (addr 0x000000004cd430e0)    ;; object: 0x21004281 <true>
0x4cd430c8    40  ret
0x4cd430cc    44  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd430d0    48  d63f03e0       constant
0x4cd430d4    52  d503201f       constant
0x4cd430d8    56  210042b1       constant
0x4cd430dc    60  00000000       constant
0x4cd430e0    64  21004281       constant
0x4cd430e4    68  00000000       constant
0x4cd430e8    72  movz x16, #0x0
0x4cd430ec    76  sub csp, jssp, #0x10 (16)
0x4cd430f0    80  stp fp, lr, [jssp, #-16]!
0x4cd430f4    84  bl #+0x4 (addr 0x4cd430f8)
0x4cd430f8    88  movz x17, #0xa00000000
0x4cd430fc    92  sub csp, jssp, #0x10 (16)
0x4cd43100    96  stp x17, cp, [jssp, #-16]!
0x4cd43104   100  add fp, jssp, #0x10 (16)
0x4cd43108   104  ldr x17, pc+24 (addr 0x000000004cd43120)    ;; lazy deoptimization bailout 0
0x4cd4310c   108  add x17, x17, x16
0x4cd43110   112  br x17
0x4cd43114   116  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd43118   120  d63f03e0       constant
0x4cd4311c   124  d503201f       constant
0x4cd43120   128  4cb06000       constant
0x4cd43124   132  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd430bc  embedded object  (0x210042b1 <false>)
0x4cd430c4  embedded object  (0x21004281 <true>)
0x4cd430cc  constant pool (size 28)
0x4cd43108  runtime entry
0x4cd43114  constant pool (size 20)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0x4cd431a0     0  ldur x0, [x1, #-1]
0x4cd431a4     4  ldur x0, [x0, #47]
0x4cd431a8     8  ldur x0, [x0, #47]
0x4cd431ac    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = hasOwnProperty
compiler = unknown
Instructions (size = 120)
0x4cd43220     0  sub csp, jssp, #0x8 (8)
0x4cd43224     4  str x3, [jssp, #-8]!
0x4cd43228     8  sub csp, jssp, #0x8 (8)
0x4cd4322c    12  str x0, [jssp, #-8]!
0x4cd43230    16  ldr x0, pc+72 (addr 0x000000004cd43278)    ;; object: 0x21063e59 Cell for 0
0x4cd43234    20  ldur x0, [x0, #7]
0x4cd43238    24  cmp x0, #0x0 (0)
0x4cd4323c    28  b.ne #+0x14 (addr 0x4cd43250)
0x4cd43240    32  ldr x3, pc+64 (addr 0x000000004cd43280)    ;; object: 0x21063e69 WeakCell for 0x2103ff39 <an Object with map 0x2a80c081>
0x4cd43244    36  ldur x3, [x3, #7]
0x4cd43248    40  tbz w3, #0, #+0x8 (addr 0x4cd43250)
0x4cd4324c    44  b #+0x14 (addr 0x4cd43260)
0x4cd43250    48  ldr x0, [jssp], #8
0x4cd43254    52  ldr x3, [jssp], #8
0x4cd43258    56  ldr x16, pc+48 (addr 0x000000004cd43288)    ;; code: BUILTIN
0x4cd4325c    60  br x16
0x4cd43260    64  add jssp, jssp, #0x10 (16)
0x4cd43264    68  mov x1, x3
0x4cd43268    72  ldr x16, pc+40 (addr 0x000000004cd43290)    ;; code: HANDLER, LoadConstantStub, minor: 0
0x4cd4326c    76  br x16
0x4cd43270    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cd43274    84  d63f03e0       constant
0x4cd43278    88  21063e59       constant
0x4cd4327c    92  00000000       constant
0x4cd43280    96  21063e69       constant
0x4cd43284   100  00000000       constant
0x4cd43288   104  4cd222e0       constant
0x4cd4328c   108  00000000       constant
0x4cd43290   112  4cd431a0       constant
0x4cd43294   116  00000000       constant


RelocInfo (size = 10)
0x4cd43230  embedded object  (0x21063e59 Cell for 0)
0x4cd43240  embedded object  (0x21063e69 WeakCell for 0x2103ff39 <an Object with map 0x2a80c081>)
0x4cd43258  code target (BUILTIN)  (0x4cd222e0)
0x4cd43268  code target (HANDLER)  (0x4cd431a0)
0x4cd43270  constant pool (size 40)

kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0x4cd43300     0  ldur x0, [x1, #-1]
0x4cd43304     4  ldur x0, [x0, #47]
0x4cd43308     8  ldur x0, [x0, #71]
0x4cd4330c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0x4cd43380     0  ldur x0, [x1, #-1]
0x4cd43384     4  ldur x0, [x0, #47]
0x4cd43388     8  ldur x0, [x0, #95]
0x4cd4338c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0x4cd43400     0  ldur x0, [x1, #-1]
0x4cd43404     4  ldur x0, [x0, #47]
0x4cd43408     8  ldur x0, [x0, #119]
0x4cd4340c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0x4cd43480     0  ldur x0, [x1, #-1]
0x4cd43484     4  ldur x0, [x0, #47]
0x4cd43488     8  ldur x0, [x0, #143]
0x4cd4348c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0x4cd43500     0  ldur x0, [x1, #-1]
0x4cd43504     4  ldur x0, [x0, #47]
0x4cd43508     8  ldur x0, [x0, #167]
0x4cd4350c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = FunctionPrototypeStub
name = FunctionPrototypeStub
compiler = unknown
Instructions (size = 72)
0x4cd43580     0  ldur x10, [x1, #23]
0x4cd43584     4  ldr x16, [x26, #88]
0x4cd43588     8  cmp x10, x16
0x4cd4358c    12  b.eq #+0x20 (addr 0x4cd435ac)
0x4cd43590    16  ldur x11, [x10, #-1]
0x4cd43594    20  ldrb w11, [x11, #11]
0x4cd43598    24  cmp x11, #0x84 (132)
0x4cd4359c    28  b.ne #+0x8 (addr 0x4cd435a4)
0x4cd435a0    32  ldur x10, [x10, #23]
0x4cd435a4    36  mov x0, x10
0x4cd435a8    40  ret
0x4cd435ac    44  ldr x16, pc+20 (addr 0x000000004cd435c0)    ;; code: BUILTIN
0x4cd435b0    48  br x16
0x4cd435b4    52  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd435b8    56  d63f03e0       constant
0x4cd435bc    60  d503201f       constant
0x4cd435c0    64  4cd222e0       constant
0x4cd435c4    68  00000000       constant


RelocInfo (size = 7)
0x4cd435ac  code target (BUILTIN)  (0x4cd222e0)
0x4cd435b4  constant pool (size 20)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 653)
0x4cd43d60     0  movz x2, #0xd2c0
0x4cd43d64     4  movk x2, #0x166d, lsl #16
0x4cd43d68     8  ldp x3, x0, [x2]
0x4cd43d6c    12  adds x16, x3, #0xf8 (248)
0x4cd43d70    16  ccmp x16, x0, #nzCv, lo
0x4cd43d74    20  b.hi #+0x104 (addr 0x4cd43e78)
0x4cd43d78    24  str x16, [x2]
0x4cd43d7c    28  orr x3, x3, #0x1
0x4cd43d80    32  ldr x0, pc+360 (addr 0x000000004cd43ee8)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd43d84    36  stur x0, [x3, #-1]
0x4cd43d88    40  movz x0, #0x1d00000000
0x4cd43d8c    44  stur x0, [x3, #7]
0x4cd43d90    48  stur x1, [x3, #15]
0x4cd43d94    52  stur cp, [x3, #23]
0x4cd43d98    56  ldr x0, pc+344 (addr 0x000000004cd43ef0)    ;; object: 0x21004519 <the hole>
0x4cd43d9c    60  stur x0, [x3, #31]
0x4cd43da0    64  ldur x0, [cp, #39]
0x4cd43da4    68  stur x0, [x3, #39]
0x4cd43da8    72  ldr x0, pc+336 (addr 0x000000004cd43ef8)    ;; object: 0x21004241 <undefined>
0x4cd43dac    76  stur x0, [x3, #47]
0x4cd43db0    80  ldr x0, pc+336 (addr 0x000000004cd43f00)    ;; object: 0x21004241 <undefined>
0x4cd43db4    84  stur x0, [x3, #55]
0x4cd43db8    88  ldr x0, pc+336 (addr 0x000000004cd43f08)    ;; object: 0x21004241 <undefined>
0x4cd43dbc    92  stur x0, [x3, #63]
0x4cd43dc0    96  ldr x0, pc+336 (addr 0x000000004cd43f10)    ;; object: 0x21004241 <undefined>
0x4cd43dc4   100  stur x0, [x3, #71]
0x4cd43dc8   104  ldr x0, pc+336 (addr 0x000000004cd43f18)    ;; object: 0x21004241 <undefined>
0x4cd43dcc   108  stur x0, [x3, #79]
0x4cd43dd0   112  ldr x0, pc+336 (addr 0x000000004cd43f20)    ;; object: 0x21004241 <undefined>
0x4cd43dd4   116  stur x0, [x3, #87]
0x4cd43dd8   120  ldr x0, pc+336 (addr 0x000000004cd43f28)    ;; object: 0x21004241 <undefined>
0x4cd43ddc   124  stur x0, [x3, #95]
0x4cd43de0   128  ldr x0, pc+336 (addr 0x000000004cd43f30)    ;; object: 0x21004241 <undefined>
0x4cd43de4   132  stur x0, [x3, #103]
0x4cd43de8   136  ldr x0, pc+336 (addr 0x000000004cd43f38)    ;; object: 0x21004241 <undefined>
0x4cd43dec   140  stur x0, [x3, #111]
0x4cd43df0   144  ldr x0, pc+336 (addr 0x000000004cd43f40)    ;; object: 0x21004241 <undefined>
0x4cd43df4   148  stur x0, [x3, #119]
0x4cd43df8   152  ldr x0, pc+336 (addr 0x000000004cd43f48)    ;; object: 0x21004241 <undefined>
0x4cd43dfc   156  stur x0, [x3, #127]
0x4cd43e00   160  ldr x0, pc+336 (addr 0x000000004cd43f50)    ;; object: 0x21004241 <undefined>
0x4cd43e04   164  stur x0, [x3, #135]
0x4cd43e08   168  ldr x0, pc+336 (addr 0x000000004cd43f58)    ;; object: 0x21004241 <undefined>
0x4cd43e0c   172  stur x0, [x3, #143]
0x4cd43e10   176  ldr x0, pc+336 (addr 0x000000004cd43f60)    ;; object: 0x21004241 <undefined>
0x4cd43e14   180  stur x0, [x3, #151]
0x4cd43e18   184  ldr x0, pc+336 (addr 0x000000004cd43f68)    ;; object: 0x21004241 <undefined>
0x4cd43e1c   188  stur x0, [x3, #159]
0x4cd43e20   192  ldr x0, pc+336 (addr 0x000000004cd43f70)    ;; object: 0x21004241 <undefined>
0x4cd43e24   196  stur x0, [x3, #167]
0x4cd43e28   200  ldr x0, pc+336 (addr 0x000000004cd43f78)    ;; object: 0x21004241 <undefined>
0x4cd43e2c   204  stur x0, [x3, #175]
0x4cd43e30   208  ldr x0, pc+336 (addr 0x000000004cd43f80)    ;; object: 0x21004241 <undefined>
0x4cd43e34   212  stur x0, [x3, #183]
0x4cd43e38   216  ldr x0, pc+336 (addr 0x000000004cd43f88)    ;; object: 0x21004241 <undefined>
0x4cd43e3c   220  stur x0, [x3, #191]
0x4cd43e40   224  ldr x0, pc+336 (addr 0x000000004cd43f90)    ;; object: 0x21004241 <undefined>
0x4cd43e44   228  stur x0, [x3, #199]
0x4cd43e48   232  ldr x0, pc+336 (addr 0x000000004cd43f98)    ;; object: 0x21004241 <undefined>
0x4cd43e4c   236  stur x0, [x3, #207]
0x4cd43e50   240  ldr x0, pc+336 (addr 0x000000004cd43fa0)    ;; object: 0x21004241 <undefined>
0x4cd43e54   244  stur x0, [x3, #215]
0x4cd43e58   248  ldr x0, pc+336 (addr 0x000000004cd43fa8)    ;; object: 0x21004241 <undefined>
0x4cd43e5c   252  stur x0, [x3, #223]
0x4cd43e60   256  ldr x0, pc+336 (addr 0x000000004cd43fb0)    ;; object: 0x21004241 <undefined>
0x4cd43e64   260  stur x0, [x3, #231]
0x4cd43e68   264  ldr x0, pc+336 (addr 0x000000004cd43fb8)    ;; object: 0x21004241 <undefined>
0x4cd43e6c   268  stur x0, [x3, #239]
0x4cd43e70   272  mov x0, x3
0x4cd43e74   276  ret
0x4cd43e78   280  sub csp, jssp, #0x10 (16)
0x4cd43e7c   284  stp fp, lr, [jssp, #-16]!
0x4cd43e80   288  movz fp, #0xa00000000
0x4cd43e84   292  sub csp, jssp, #0x8 (8)
0x4cd43e88   296  str fp, [jssp, #-8]!
0x4cd43e8c   300  add fp, jssp, #0x8 (8)
0x4cd43e90   304  movz x3, #0x0
0x4cd43e94   308  mov x16, lr
0x4cd43e98   312  ldr x17, pc+296 (addr 0x000000004cd43fc0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd43e9c   316  blr x17
0x4cd43ea0   320  movz x0, #0xf800000000
0x4cd43ea4   324  movz x10, #0x0
0x4cd43ea8   328  sub csp, jssp, #0x10 (16)
0x4cd43eac   332  stp x10, x0, [jssp, #-16]!
0x4cd43eb0   336  movz x0, #0x2
0x4cd43eb4   340  movz x1, #0x5b88
0x4cd43eb8   344  movk x1, #0xe2, lsl #16
0x4cd43ebc   348  ldr x16, pc+268 (addr 0x000000004cd43fc8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd43ec0   352  blr x16
0x4cd43ec4   356  str x0, [jssp, #24]
0x4cd43ec8   360  ldr x16, pc+264 (addr 0x000000004cd43fd0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd43ecc   364  blr x16
0x4cd43ed0   368  ldr lr, [jssp, #16]
0x4cd43ed4   372  ldp xzr, fp, [jssp], #24
0x4cd43ed8   376  b #-0x158 (addr 0x4cd43d80)
0x4cd43edc   380  580007df       constant pool begin (num_const = 62)    ;; constant pool
0x4cd43ee0   384  d63f03e0       constant
0x4cd43ee4   388  d503201f       constant
0x4cd43ee8   392  2a806149       constant
0x4cd43eec   396  00000000       constant
0x4cd43ef0   400  21004519       constant
0x4cd43ef4   404  00000000       constant
0x4cd43ef8   408  21004241       constant
0x4cd43efc   412  00000000       constant
0x4cd43f00   416  21004241       constant
0x4cd43f04   420  00000000       constant
0x4cd43f08   424  21004241       constant
0x4cd43f0c   428  00000000       constant
0x4cd43f10   432  21004241       constant
0x4cd43f14   436  00000000       constant
0x4cd43f18   440  21004241       constant
0x4cd43f1c   444  00000000       constant
0x4cd43f20   448  21004241       constant
0x4cd43f24   452  00000000       constant
0x4cd43f28   456  21004241       constant
0x4cd43f2c   460  00000000       constant
0x4cd43f30   464  21004241       constant
0x4cd43f34   468  00000000       constant
0x4cd43f38   472  21004241       constant
0x4cd43f3c   476  00000000       constant
0x4cd43f40   480  21004241       constant
0x4cd43f44   484  00000000       constant
0x4cd43f48   488  21004241       constant
0x4cd43f4c   492  00000000       constant
0x4cd43f50   496  21004241       constant
0x4cd43f54   500  00000000       constant
0x4cd43f58   504  21004241       constant
0x4cd43f5c   508  00000000       constant
0x4cd43f60   512  21004241       constant
0x4cd43f64   516  00000000       constant
0x4cd43f68   520  21004241       constant
0x4cd43f6c   524  00000000       constant
0x4cd43f70   528  21004241       constant
0x4cd43f74   532  00000000       constant
0x4cd43f78   536  21004241       constant
0x4cd43f7c   540  00000000       constant
0x4cd43f80   544  21004241       constant
0x4cd43f84   548  00000000       constant
0x4cd43f88   552  21004241       constant
0x4cd43f8c   556  00000000       constant
0x4cd43f90   560  21004241       constant
0x4cd43f94   564  00000000       constant
0x4cd43f98   568  21004241       constant
0x4cd43f9c   572  00000000       constant
0x4cd43fa0   576  21004241       constant
0x4cd43fa4   580  00000000       constant
0x4cd43fa8   584  21004241       constant
0x4cd43fac   588  00000000       constant
0x4cd43fb0   592  21004241       constant
0x4cd43fb4   596  00000000       constant
0x4cd43fb8   600  21004241       constant
0x4cd43fbc   604  00000000       constant
0x4cd43fc0   608  4cd06820       constant
0x4cd43fc4   612  00000000       constant
0x4cd43fc8   616  4cd06260       constant
0x4cd43fcc   620  00000000       constant
0x4cd43fd0   624  4cd068e0       constant
0x4cd43fd4   628  00000000       constant


Safepoints (size = 21)
0x4cd43ec4   356  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 36)
0x4cd43d80  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd43d98  embedded object  (0x21004519 <the hole>)
0x4cd43da8  embedded object  (0x21004241 <undefined>)
0x4cd43db0  embedded object  (0x21004241 <undefined>)
0x4cd43db8  embedded object  (0x21004241 <undefined>)
0x4cd43dc0  embedded object  (0x21004241 <undefined>)
0x4cd43dc8  embedded object  (0x21004241 <undefined>)
0x4cd43dd0  embedded object  (0x21004241 <undefined>)
0x4cd43dd8  embedded object  (0x21004241 <undefined>)
0x4cd43de0  embedded object  (0x21004241 <undefined>)
0x4cd43de8  embedded object  (0x21004241 <undefined>)
0x4cd43df0  embedded object  (0x21004241 <undefined>)
0x4cd43df8  embedded object  (0x21004241 <undefined>)
0x4cd43e00  embedded object  (0x21004241 <undefined>)
0x4cd43e08  embedded object  (0x21004241 <undefined>)
0x4cd43e10  embedded object  (0x21004241 <undefined>)
0x4cd43e18  embedded object  (0x21004241 <undefined>)
0x4cd43e20  embedded object  (0x21004241 <undefined>)
0x4cd43e28  embedded object  (0x21004241 <undefined>)
0x4cd43e30  embedded object  (0x21004241 <undefined>)
0x4cd43e38  embedded object  (0x21004241 <undefined>)
0x4cd43e40  embedded object  (0x21004241 <undefined>)
0x4cd43e48  embedded object  (0x21004241 <undefined>)
0x4cd43e50  embedded object  (0x21004241 <undefined>)
0x4cd43e58  embedded object  (0x21004241 <undefined>)
0x4cd43e60  embedded object  (0x21004241 <undefined>)
0x4cd43e68  embedded object  (0x21004241 <undefined>)
0x4cd43e98  code target (STUB)  (0x4cd06820)
0x4cd43ebc  code target (STUB)  (0x4cd06260)
0x4cd43ec8  code target (STUB)  (0x4cd068e0)
0x4cd43edc  constant pool (size 252)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd45980     0  ldur x0, [x1, #7]
0x4cd45984     4  movz x16, #0x187
0x4cd45988     8  ldr x0, [x0, x16]
0x4cd4598c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd45a00     0  ldur x0, [x1, #7]
0x4cd45a04     4  movz x16, #0x18f
0x4cd45a08     8  ldr x0, [x0, x16]
0x4cd45a0c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd45a80     0  ldur x0, [x1, #7]
0x4cd45a84     4  movz x16, #0x197
0x4cd45a88     8  ldr x0, [x0, x16]
0x4cd45a8c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd45b00     0  ldur x0, [x1, #7]
0x4cd45b04     4  movz x16, #0x1a7
0x4cd45b08     8  ldr x0, [x0, x16]
0x4cd45b0c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = next
compiler = unknown
Instructions (size = 152)
0x4cd45b80     0  sub csp, jssp, #0x8 (8)
0x4cd45b84     4  str x3, [jssp, #-8]!
0x4cd45b88     8  sub csp, jssp, #0x8 (8)
0x4cd45b8c    12  str x4, [jssp, #-8]!
0x4cd45b90    16  ldr x3, pc+88 (addr 0x000000004cd45be8)    ;; object: 0x2105b0f1 Cell for 0
0x4cd45b94    20  ldur x3, [x3, #7]
0x4cd45b98    24  cmp x3, #0x0 (0)
0x4cd45b9c    28  b.ne #+0x30 (addr 0x4cd45bcc)
0x4cd45ba0    32  tbz w0, #0, #+0x2c (addr 0x4cd45bcc)
0x4cd45ba4    36  ldr x5, pc+76 (addr 0x000000004cd45bf0)    ;; object: 0x21057a99 WeakCell for 0x2a80b581 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd45ba8    40  ldur x5, [x5, #7]
0x4cd45bac    44  tbz w5, #0, #+0x20 (addr 0x4cd45bcc)
0x4cd45bb0    48  ldursw x4, [x5, #15]
0x4cd45bb4    52  tbnz w4, #23, #+0x18 (addr 0x4cd45bcc)
0x4cd45bb8    56  ldr x4, [jssp], #8
0x4cd45bbc    60  ldr x3, [jssp], #8
0x4cd45bc0    64  ldr x2, pc+56 (addr 0x000000004cd45bf8)    ;; object: 0x21005209 <String[4]: next>
0x4cd45bc4    68  ldr x16, pc+60 (addr 0x000000004cd45c00)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0x4cd45bc8    72  br x16
0x4cd45bcc    76  ldr x2, pc+60 (addr 0x000000004cd45c08)    ;; object: 0x21005209 <String[4]: next>
0x4cd45bd0    80  ldr x4, [jssp], #8
0x4cd45bd4    84  ldr x3, [jssp], #8
0x4cd45bd8    88  ldr x16, pc+56 (addr 0x000000004cd45c10)    ;; code: BUILTIN
0x4cd45bdc    92  br x16
0x4cd45be0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd45be4   100  d63f03e0       constant
0x4cd45be8   104  2105b0f1       constant
0x4cd45bec   108  00000000       constant
0x4cd45bf0   112  21057a99       constant
0x4cd45bf4   116  00000000       constant
0x4cd45bf8   120  21005209       constant
0x4cd45bfc   124  00000000       constant
0x4cd45c00   128  4cd38860       constant
0x4cd45c04   132  00000000       constant
0x4cd45c08   136  21005209       constant
0x4cd45c0c   140  00000000       constant
0x4cd45c10   144  4cd22420       constant
0x4cd45c14   148  00000000       constant


RelocInfo (size = 12)
0x4cd45b90  embedded object  (0x2105b0f1 Cell for 0)
0x4cd45ba4  embedded object  (0x21057a99 WeakCell for 0x2a80b581 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd45bc0  embedded object  (0x21005209 <String[4]: next>)
0x4cd45bc4  code target (HANDLER)  (0x4cd38860)
0x4cd45bcc  embedded object  (0x21005209 <String[4]: next>)
0x4cd45bd8  code target (BUILTIN)  (0x4cd22420)
0x4cd45be0  constant pool (size 56)

kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 461)
0x4cd45fc0     0  movz x2, #0xd2c0
0x4cd45fc4     4  movk x2, #0x166d, lsl #16
0x4cd45fc8     8  ldp x3, x0, [x2]
0x4cd45fcc    12  adds x16, x3, #0x98 (152)
0x4cd45fd0    16  ccmp x16, x0, #nzCv, lo
0x4cd45fd4    20  b.hi #+0xa4 (addr 0x4cd46078)
0x4cd45fd8    24  str x16, [x2]
0x4cd45fdc    28  orr x3, x3, #0x1
0x4cd45fe0    32  ldr x0, pc+264 (addr 0x000000004cd460e8)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd45fe4    36  stur x0, [x3, #-1]
0x4cd45fe8    40  movz x0, #0x1100000000
0x4cd45fec    44  stur x0, [x3, #7]
0x4cd45ff0    48  stur x1, [x3, #15]
0x4cd45ff4    52  stur cp, [x3, #23]
0x4cd45ff8    56  ldr x0, pc+248 (addr 0x000000004cd460f0)    ;; object: 0x21004519 <the hole>
0x4cd45ffc    60  stur x0, [x3, #31]
0x4cd46000    64  ldur x0, [cp, #39]
0x4cd46004    68  stur x0, [x3, #39]
0x4cd46008    72  ldr x0, pc+240 (addr 0x000000004cd460f8)    ;; object: 0x21004241 <undefined>
0x4cd4600c    76  stur x0, [x3, #47]
0x4cd46010    80  ldr x0, pc+240 (addr 0x000000004cd46100)    ;; object: 0x21004241 <undefined>
0x4cd46014    84  stur x0, [x3, #55]
0x4cd46018    88  ldr x0, pc+240 (addr 0x000000004cd46108)    ;; object: 0x21004241 <undefined>
0x4cd4601c    92  stur x0, [x3, #63]
0x4cd46020    96  ldr x0, pc+240 (addr 0x000000004cd46110)    ;; object: 0x21004241 <undefined>
0x4cd46024   100  stur x0, [x3, #71]
0x4cd46028   104  ldr x0, pc+240 (addr 0x000000004cd46118)    ;; object: 0x21004241 <undefined>
0x4cd4602c   108  stur x0, [x3, #79]
0x4cd46030   112  ldr x0, pc+240 (addr 0x000000004cd46120)    ;; object: 0x21004241 <undefined>
0x4cd46034   116  stur x0, [x3, #87]
0x4cd46038   120  ldr x0, pc+240 (addr 0x000000004cd46128)    ;; object: 0x21004241 <undefined>
0x4cd4603c   124  stur x0, [x3, #95]
0x4cd46040   128  ldr x0, pc+240 (addr 0x000000004cd46130)    ;; object: 0x21004241 <undefined>
0x4cd46044   132  stur x0, [x3, #103]
0x4cd46048   136  ldr x0, pc+240 (addr 0x000000004cd46138)    ;; object: 0x21004241 <undefined>
0x4cd4604c   140  stur x0, [x3, #111]
0x4cd46050   144  ldr x0, pc+240 (addr 0x000000004cd46140)    ;; object: 0x21004241 <undefined>
0x4cd46054   148  stur x0, [x3, #119]
0x4cd46058   152  ldr x0, pc+240 (addr 0x000000004cd46148)    ;; object: 0x21004241 <undefined>
0x4cd4605c   156  stur x0, [x3, #127]
0x4cd46060   160  ldr x0, pc+240 (addr 0x000000004cd46150)    ;; object: 0x21004241 <undefined>
0x4cd46064   164  stur x0, [x3, #135]
0x4cd46068   168  ldr x0, pc+240 (addr 0x000000004cd46158)    ;; object: 0x21004241 <undefined>
0x4cd4606c   172  stur x0, [x3, #143]
0x4cd46070   176  mov x0, x3
0x4cd46074   180  ret
0x4cd46078   184  sub csp, jssp, #0x10 (16)
0x4cd4607c   188  stp fp, lr, [jssp, #-16]!
0x4cd46080   192  movz fp, #0xa00000000
0x4cd46084   196  sub csp, jssp, #0x8 (8)
0x4cd46088   200  str fp, [jssp, #-8]!
0x4cd4608c   204  add fp, jssp, #0x8 (8)
0x4cd46090   208  movz x3, #0x0
0x4cd46094   212  mov x16, lr
0x4cd46098   216  ldr x17, pc+200 (addr 0x000000004cd46160)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd4609c   220  blr x17
0x4cd460a0   224  movz x0, #0x9800000000
0x4cd460a4   228  movz x10, #0x0
0x4cd460a8   232  sub csp, jssp, #0x10 (16)
0x4cd460ac   236  stp x10, x0, [jssp, #-16]!
0x4cd460b0   240  movz x0, #0x2
0x4cd460b4   244  movz x1, #0x5b88
0x4cd460b8   248  movk x1, #0xe2, lsl #16
0x4cd460bc   252  ldr x16, pc+172 (addr 0x000000004cd46168)    ;; code: STUB, CEntryStub, minor: 5
0x4cd460c0   256  blr x16
0x4cd460c4   260  str x0, [jssp, #24]
0x4cd460c8   264  ldr x16, pc+168 (addr 0x000000004cd46170)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd460cc   268  blr x16
0x4cd460d0   272  ldr lr, [jssp, #16]
0x4cd460d4   276  ldp xzr, fp, [jssp], #24
0x4cd460d8   280  b #-0xf8 (addr 0x4cd45fe0)
0x4cd460dc   284  580004df       constant pool begin (num_const = 38)    ;; constant pool
0x4cd460e0   288  d63f03e0       constant
0x4cd460e4   292  d503201f       constant
0x4cd460e8   296  2a806149       constant
0x4cd460ec   300  00000000       constant
0x4cd460f0   304  21004519       constant
0x4cd460f4   308  00000000       constant
0x4cd460f8   312  21004241       constant
0x4cd460fc   316  00000000       constant
0x4cd46100   320  21004241       constant
0x4cd46104   324  00000000       constant
0x4cd46108   328  21004241       constant
0x4cd4610c   332  00000000       constant
0x4cd46110   336  21004241       constant
0x4cd46114   340  00000000       constant
0x4cd46118   344  21004241       constant
0x4cd4611c   348  00000000       constant
0x4cd46120   352  21004241       constant
0x4cd46124   356  00000000       constant
0x4cd46128   360  21004241       constant
0x4cd4612c   364  00000000       constant
0x4cd46130   368  21004241       constant
0x4cd46134   372  00000000       constant
0x4cd46138   376  21004241       constant
0x4cd4613c   380  00000000       constant
0x4cd46140   384  21004241       constant
0x4cd46144   388  00000000       constant
0x4cd46148   392  21004241       constant
0x4cd4614c   396  00000000       constant
0x4cd46150   400  21004241       constant
0x4cd46154   404  00000000       constant
0x4cd46158   408  21004241       constant
0x4cd4615c   412  00000000       constant
0x4cd46160   416  4cd06820       constant
0x4cd46164   420  00000000       constant
0x4cd46168   424  4cd06260       constant
0x4cd4616c   428  00000000       constant
0x4cd46170   432  4cd068e0       constant
0x4cd46174   436  00000000       constant


Safepoints (size = 21)
0x4cd460c4   260  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 24)
0x4cd45fe0  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd45ff8  embedded object  (0x21004519 <the hole>)
0x4cd46008  embedded object  (0x21004241 <undefined>)
0x4cd46010  embedded object  (0x21004241 <undefined>)
0x4cd46018  embedded object  (0x21004241 <undefined>)
0x4cd46020  embedded object  (0x21004241 <undefined>)
0x4cd46028  embedded object  (0x21004241 <undefined>)
0x4cd46030  embedded object  (0x21004241 <undefined>)
0x4cd46038  embedded object  (0x21004241 <undefined>)
0x4cd46040  embedded object  (0x21004241 <undefined>)
0x4cd46048  embedded object  (0x21004241 <undefined>)
0x4cd46050  embedded object  (0x21004241 <undefined>)
0x4cd46058  embedded object  (0x21004241 <undefined>)
0x4cd46060  embedded object  (0x21004241 <undefined>)
0x4cd46068  embedded object  (0x21004241 <undefined>)
0x4cd46098  code target (STUB)  (0x4cd06820)
0x4cd460bc  code target (STUB)  (0x4cd06260)
0x4cd460c8  code target (STUB)  (0x4cd068e0)
0x4cd460dc  constant pool (size 156)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 381)
0x4cd46b40     0  movz x2, #0xd2c0
0x4cd46b44     4  movk x2, #0x166d, lsl #16
0x4cd46b48     8  ldp x3, x0, [x2]
0x4cd46b4c    12  adds x16, x3, #0x70 (112)
0x4cd46b50    16  ccmp x16, x0, #nzCv, lo
0x4cd46b54    20  b.hi #+0x7c (addr 0x4cd46bd0)
0x4cd46b58    24  str x16, [x2]
0x4cd46b5c    28  orr x3, x3, #0x1
0x4cd46b60    32  ldr x0, pc+224 (addr 0x000000004cd46c40)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd46b64    36  stur x0, [x3, #-1]
0x4cd46b68    40  movz x0, #0xc00000000
0x4cd46b6c    44  stur x0, [x3, #7]
0x4cd46b70    48  stur x1, [x3, #15]
0x4cd46b74    52  stur cp, [x3, #23]
0x4cd46b78    56  ldr x0, pc+208 (addr 0x000000004cd46c48)    ;; object: 0x21004519 <the hole>
0x4cd46b7c    60  stur x0, [x3, #31]
0x4cd46b80    64  ldur x0, [cp, #39]
0x4cd46b84    68  stur x0, [x3, #39]
0x4cd46b88    72  ldr x0, pc+200 (addr 0x000000004cd46c50)    ;; object: 0x21004241 <undefined>
0x4cd46b8c    76  stur x0, [x3, #47]
0x4cd46b90    80  ldr x0, pc+200 (addr 0x000000004cd46c58)    ;; object: 0x21004241 <undefined>
0x4cd46b94    84  stur x0, [x3, #55]
0x4cd46b98    88  ldr x0, pc+200 (addr 0x000000004cd46c60)    ;; object: 0x21004241 <undefined>
0x4cd46b9c    92  stur x0, [x3, #63]
0x4cd46ba0    96  ldr x0, pc+200 (addr 0x000000004cd46c68)    ;; object: 0x21004241 <undefined>
0x4cd46ba4   100  stur x0, [x3, #71]
0x4cd46ba8   104  ldr x0, pc+200 (addr 0x000000004cd46c70)    ;; object: 0x21004241 <undefined>
0x4cd46bac   108  stur x0, [x3, #79]
0x4cd46bb0   112  ldr x0, pc+200 (addr 0x000000004cd46c78)    ;; object: 0x21004241 <undefined>
0x4cd46bb4   116  stur x0, [x3, #87]
0x4cd46bb8   120  ldr x0, pc+200 (addr 0x000000004cd46c80)    ;; object: 0x21004241 <undefined>
0x4cd46bbc   124  stur x0, [x3, #95]
0x4cd46bc0   128  ldr x0, pc+200 (addr 0x000000004cd46c88)    ;; object: 0x21004241 <undefined>
0x4cd46bc4   132  stur x0, [x3, #103]
0x4cd46bc8   136  mov x0, x3
0x4cd46bcc   140  ret
0x4cd46bd0   144  sub csp, jssp, #0x10 (16)
0x4cd46bd4   148  stp fp, lr, [jssp, #-16]!
0x4cd46bd8   152  movz fp, #0xa00000000
0x4cd46bdc   156  sub csp, jssp, #0x8 (8)
0x4cd46be0   160  str fp, [jssp, #-8]!
0x4cd46be4   164  add fp, jssp, #0x8 (8)
0x4cd46be8   168  movz x3, #0x0
0x4cd46bec   172  mov x16, lr
0x4cd46bf0   176  ldr x17, pc+160 (addr 0x000000004cd46c90)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd46bf4   180  blr x17
0x4cd46bf8   184  movz x0, #0x7000000000
0x4cd46bfc   188  movz x10, #0x0
0x4cd46c00   192  sub csp, jssp, #0x10 (16)
0x4cd46c04   196  stp x10, x0, [jssp, #-16]!
0x4cd46c08   200  movz x0, #0x2
0x4cd46c0c   204  movz x1, #0x5b88
0x4cd46c10   208  movk x1, #0xe2, lsl #16
0x4cd46c14   212  ldr x16, pc+132 (addr 0x000000004cd46c98)    ;; code: STUB, CEntryStub, minor: 5
0x4cd46c18   216  blr x16
0x4cd46c1c   220  str x0, [jssp, #24]
0x4cd46c20   224  ldr x16, pc+128 (addr 0x000000004cd46ca0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd46c24   228  blr x16
0x4cd46c28   232  ldr lr, [jssp, #16]
0x4cd46c2c   236  ldp xzr, fp, [jssp], #24
0x4cd46c30   240  b #-0xd0 (addr 0x4cd46b60)
0x4cd46c34   244  5800039f       constant pool begin (num_const = 28)    ;; constant pool
0x4cd46c38   248  d63f03e0       constant
0x4cd46c3c   252  d503201f       constant
0x4cd46c40   256  2a806149       constant
0x4cd46c44   260  00000000       constant
0x4cd46c48   264  21004519       constant
0x4cd46c4c   268  00000000       constant
0x4cd46c50   272  21004241       constant
0x4cd46c54   276  00000000       constant
0x4cd46c58   280  21004241       constant
0x4cd46c5c   284  00000000       constant
0x4cd46c60   288  21004241       constant
0x4cd46c64   292  00000000       constant
0x4cd46c68   296  21004241       constant
0x4cd46c6c   300  00000000       constant
0x4cd46c70   304  21004241       constant
0x4cd46c74   308  00000000       constant
0x4cd46c78   312  21004241       constant
0x4cd46c7c   316  00000000       constant
0x4cd46c80   320  21004241       constant
0x4cd46c84   324  00000000       constant
0x4cd46c88   328  21004241       constant
0x4cd46c8c   332  00000000       constant
0x4cd46c90   336  4cd06820       constant
0x4cd46c94   340  00000000       constant
0x4cd46c98   344  4cd06260       constant
0x4cd46c9c   348  00000000       constant
0x4cd46ca0   352  4cd068e0       constant
0x4cd46ca4   356  00000000       constant


Safepoints (size = 21)
0x4cd46c1c   220  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 19)
0x4cd46b60  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd46b78  embedded object  (0x21004519 <the hole>)
0x4cd46b88  embedded object  (0x21004241 <undefined>)
0x4cd46b90  embedded object  (0x21004241 <undefined>)
0x4cd46b98  embedded object  (0x21004241 <undefined>)
0x4cd46ba0  embedded object  (0x21004241 <undefined>)
0x4cd46ba8  embedded object  (0x21004241 <undefined>)
0x4cd46bb0  embedded object  (0x21004241 <undefined>)
0x4cd46bb8  embedded object  (0x21004241 <undefined>)
0x4cd46bc0  embedded object  (0x21004241 <undefined>)
0x4cd46bf0  code target (STUB)  (0x4cd06820)
0x4cd46c14  code target (STUB)  (0x4cd06260)
0x4cd46c20  code target (STUB)  (0x4cd068e0)
0x4cd46c34  constant pool (size 116)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 327685
name = CallICStub(args(5), NOT_NULL_OR_UNDEFINED, 
compiler = unknown
Instructions (size = 488)
0x4cd48400     0  add x4, x2, x3, asr #29
0x4cd48404     4  ldur x4, [x4, #15]
0x4cd48408     8  ldur x5, [x4, #7]
0x4cd4840c    12  cmp x5, x1
0x4cd48410    16  b.ne #+0x2c (addr 0x4cd4843c)
0x4cd48414    20  tbz w1, #0, #+0x28 (addr 0x4cd4843c)
0x4cd48418    24  add x2, x2, x3, asr #29
0x4cd4841c    28  add x2, x2, #0x18 (24)
0x4cd48420    32  ldur x3, [x2, #-1]
0x4cd48424    36  movz x16, #0x200000000
0x4cd48428    40  add x3, x3, x16
0x4cd4842c    44  stur x3, [x2, #-1]
0x4cd48430    48  movz x0, #0x5
0x4cd48434    52  ldr x16, pc+372 (addr 0x000000004cd485a8)    ;; code: BUILTIN
0x4cd48438    56  br x16
0x4cd4843c    60  ldr x16, [x26, #2400]
0x4cd48440    64  cmp x4, x16
0x4cd48444    68  b.eq #+0x78 (addr 0x4cd484bc)
0x4cd48448    72  ldur x5, [x4, #-1]
0x4cd4844c    76  ldr x16, [x26, #2736]
0x4cd48450    80  cmp x5, x16
0x4cd48454    84  b.ne #+0x40 (addr 0x4cd48494)
0x4cd48458    88  ldur x5, [cp, #39]
0x4cd4845c    92  ldur x5, [x5, #95]
0x4cd48460    96  cmp x1, x5
0x4cd48464   100  b.ne #+0xec (addr 0x4cd48550)
0x4cd48468   104  movz x0, #0x5
0x4cd4846c   108  add x2, x2, x3, asr #29
0x4cd48470   112  add x2, x2, #0x18 (24)
0x4cd48474   116  ldur x3, [x2, #-1]
0x4cd48478   120  movz x16, #0x200000000
0x4cd4847c   124  add x3, x3, x16
0x4cd48480   128  stur x3, [x2, #-1]
0x4cd48484   132  mov x2, x4
0x4cd48488   136  mov x3, x1
0x4cd4848c   140  ldr x16, pc+292 (addr 0x000000004cd485b0)    ;; code: STUB, ArrayConstructorStub, minor: 3
0x4cd48490   144  br x16
0x4cd48494   148  ldr x16, [x26, #2568]
0x4cd48498   152  cmp x4, x16
0x4cd4849c   156  b.eq #+0xb4 (addr 0x4cd48550)
0x4cd484a0   160  ldur x5, [x4, #-1]
0x4cd484a4   164  ldrb w5, [x5, #11]
0x4cd484a8   168  cmp x5, #0xc9 (201)
0x4cd484ac   172  b.ne #+0xa4 (addr 0x4cd48550)
0x4cd484b0   176  add x4, x2, x3, asr #29
0x4cd484b4   180  ldr x5, [x26, #2400]
0x4cd484b8   184  stur x5, [x4, #15]
0x4cd484bc   188  movz x0, #0x5
0x4cd484c0   192  ldr x16, pc+248 (addr 0x000000004cd485b8)    ;; code: BUILTIN
0x4cd484c4   196  br x16
0x4cd484c8   200  tbz w1, #0, #+0x88 (addr 0x4cd48550)
0x4cd484cc   204  ldur x5, [x1, #-1]
0x4cd484d0   208  ldrb w5, [x5, #11]
0x4cd484d4   212  cmp x5, #0xc9 (201)
0x4cd484d8   216  b.ne #+0x78 (addr 0x4cd48550)
0x4cd484dc   220  ldur x5, [cp, #39]
0x4cd484e0   224  ldur x5, [x5, #95]
0x4cd484e4   228  cmp x1, x5
0x4cd484e8   232  b.eq #+0x68 (addr 0x4cd48550)
0x4cd484ec   236  ldur x4, [x1, #39]
0x4cd484f0   240  ldur x4, [x4, #39]
0x4cd484f4   244  ldur x5, [cp, #39]
0x4cd484f8   248  cmp x4, x5
0x4cd484fc   252  b.ne #+0x54 (addr 0x4cd48550)
0x4cd48500   256  movz x5, #0x200000000
0x4cd48504   260  adds x4, x2, x3, asr #29
0x4cd48508   264  stur x5, [x4, #23]
0x4cd4850c   268  movz x16, #0xc00000000
0x4cd48510   272  sub csp, jssp, #0x10 (16)
0x4cd48514   276  stp fp, lr, [jssp, #-16]!
0x4cd48518   280  sub csp, jssp, #0x10 (16)
0x4cd4851c   284  str x16, [jssp, #-8]!
0x4cd48520   288  ldr x17, pc+160 (addr 0x000000004cd485c0)    ;; object: 0x4cd483a1 <Code: CALL_IC>
0x4cd48524   292  sub csp, jssp, #0x10 (16)
0x4cd48528   296  str x17, [jssp, #-8]!
0x4cd4852c   300  add fp, jssp, #0x10 (16)
0x4cd48530   304  sub csp, jssp, #0x8 (8)
0x4cd48534   308  str x1, [jssp, #-8]!
0x4cd48538   312  ldr x16, pc+144 (addr 0x000000004cd485c8)    ;; code: STUB, CreateWeakCellStub, minor: 0
0x4cd4853c   316  blr x16
0x4cd48540   320  ldr x1, [jssp], #8
0x4cd48544   324  mov jssp, fp
0x4cd48548   328  ldp fp, lr, [jssp], #16
0x4cd4854c   332  b #-0x11c (addr 0x4cd48430)
0x4cd48550   336  movz x16, #0xc00000000
0x4cd48554   340  sub csp, jssp, #0x10 (16)
0x4cd48558   344  stp fp, lr, [jssp, #-16]!
0x4cd4855c   348  sub csp, jssp, #0x10 (16)
0x4cd48560   352  str x16, [jssp, #-8]!
0x4cd48564   356  ldr x17, pc+108 (addr 0x000000004cd485d0)    ;; object: 0x4cd483a1 <Code: CALL_IC>
0x4cd48568   360  sub csp, jssp, #0x10 (16)
0x4cd4856c   364  str x17, [jssp, #-8]!
0x4cd48570   368  add fp, jssp, #0x10 (16)
0x4cd48574   372  sub csp, jssp, #0x18 (24)
0x4cd48578   376  stp x3, x2, [jssp, #-24]!
0x4cd4857c   380  str x1, [jssp, #16]
0x4cd48580   384  movz x0, #0x3
0x4cd48584   388  ldr x1, pc+84 (addr 0x000000004cd485d8)    ;; external reference (Runtime::CallIC_Miss)
0x4cd48588   392  ldr x16, pc+88 (addr 0x000000004cd485e0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd4858c   396  blr x16
0x4cd48590   400  mov x1, x0
0x4cd48594   404  mov jssp, fp
0x4cd48598   408  ldp fp, lr, [jssp], #16
0x4cd4859c   412  b #-0xe0 (addr 0x4cd484bc)
0x4cd485a0   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4cd485a4   420  d63f03e0       constant
0x4cd485a8   424  4cd1e600       constant
0x4cd485ac   428  00000000       constant
0x4cd485b0   432  4cd33b00       constant
0x4cd485b4   436  00000000       constant
0x4cd485b8   440  4cd1f6c0       constant
0x4cd485bc   444  00000000       constant
0x4cd485c0   448  4cd483a1       constant
0x4cd485c4   452  00000000       constant
0x4cd485c8   456  4cd0ddc0       constant
0x4cd485cc   460  00000000       constant
0x4cd485d0   464  4cd483a1       constant
0x4cd485d4   468  00000000       constant
0x4cd485d8   472  00c86928       constant
0x4cd485dc   476  00000000       constant
0x4cd485e0   480  4cd06060       constant
0x4cd485e4   484  00000000       constant


RelocInfo (size = 19)
0x4cd48434  code target (BUILTIN)  (0x4cd1e600)
0x4cd4848c  code target (STUB)  (0x4cd33b00)
0x4cd484c0  code target (BUILTIN)  (0x4cd1f6c0)
0x4cd48520  embedded object  (0x4cd483a1 <Code: CALL_IC>)
0x4cd48538  code target (STUB)  (0x4cd0ddc0)
0x4cd48564  embedded object  (0x4cd483a1 <Code: CALL_IC>)
0x4cd48584  external reference (Runtime::CallIC_Miss)  (0xc86928)
0x4cd48588  code target (STUB)  (0x4cd06060)
0x4cd485a0  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 327685
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0x4cd48660     0  ldur x2, [fp, #-16]
0x4cd48664     4  ldur x2, [x2, #31]
0x4cd48668     8  ldur x2, [x2, #87]
0x4cd4866c    12  ldr x16, pc+20 (addr 0x000000004cd48680)    ;; code: CALL_IC, GENERIC
0x4cd48670    16  br x16
0x4cd48674    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd48678    24  d63f03e0       constant
0x4cd4867c    28  d503201f       constant
0x4cd48680    32  4cd48400       constant
0x4cd48684    36  00000000       constant


RelocInfo (size = 7)
0x4cd4866c  code target (CALL_IC)  (0x4cd48400)
0x4cd48674  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = RECEIVER*RECEIVER -> KNOWN_RECEIVER
compare_operation = EQ
name = CompareICStub
compiler = unknown
Instructions (size = 192)
0x4cd4ad80     0  and x16, x0, x1
0x4cd4ad84     4  tbz w16, #0, #+0x2c (addr 0x4cd4adb0)
0x4cd4ad88     8  ldr x12, pc+152 (addr 0x000000004cd4ae20)    ;; object: 0x210747c1 WeakCell for 0x2a80c131 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd4ad8c    12  ldur x12, [x12, #7]
0x4cd4ad90    16  ldur x10, [x0, #-1]
0x4cd4ad94    20  ldur x11, [x1, #-1]
0x4cd4ad98    24  cmp x10, x12
0x4cd4ad9c    28  b.ne #+0x14 (addr 0x4cd4adb0)
0x4cd4ada0    32  cmp x11, x12
0x4cd4ada4    36  b.ne #+0xc (addr 0x4cd4adb0)
0x4cd4ada8    40  sub x0, x0, x1
0x4cd4adac    44  ret
0x4cd4adb0    48  movz x16, #0xc00000000
0x4cd4adb4    52  sub csp, jssp, #0x10 (16)
0x4cd4adb8    56  stp fp, lr, [jssp, #-16]!
0x4cd4adbc    60  sub csp, jssp, #0x10 (16)
0x4cd4adc0    64  str x16, [jssp, #-8]!
0x4cd4adc4    68  ldr x17, pc+100 (addr 0x000000004cd4ae28)    ;; object: 0x4cd4ad21 <Code: COMPARE_IC>
0x4cd4adc8    72  sub csp, jssp, #0x10 (16)
0x4cd4adcc    76  str x17, [jssp, #-8]!
0x4cd4add0    80  add fp, jssp, #0x10 (16)
0x4cd4add4    84  sub csp, jssp, #0x18 (24)
0x4cd4add8    88  stp lr, x0, [jssp, #-24]!
0x4cd4addc    92  str x1, [jssp, #16]
0x4cd4ade0    96  movz x10, #0x2d00000000
0x4cd4ade4   100  sub csp, jssp, #0x18 (24)
0x4cd4ade8   104  stp x10, x0, [jssp, #-24]!
0x4cd4adec   108  str x1, [jssp, #16]
0x4cd4adf0   112  movz x0, #0x3
0x4cd4adf4   116  ldr x1, pc+60 (addr 0x000000004cd4ae30)    ;; external reference (Runtime::CompareIC_Miss)
0x4cd4adf8   120  ldr x16, pc+64 (addr 0x000000004cd4ae38)    ;; code: STUB, CEntryStub, minor: 4
0x4cd4adfc   124  blr x16
0x4cd4ae00   128  add x11, x0, #0x5f (95)
0x4cd4ae04   132  ldr x1, [jssp, #16]
0x4cd4ae08   136  ldp lr, x0, [jssp], #24
0x4cd4ae0c   140  mov jssp, fp
0x4cd4ae10   144  ldp fp, lr, [jssp], #16
0x4cd4ae14   148  br x11
0x4cd4ae18   152  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cd4ae1c   156  d63f03e0       constant
0x4cd4ae20   160  210747c1       constant
0x4cd4ae24   164  00000000       constant
0x4cd4ae28   168  4cd4ad21       constant
0x4cd4ae2c   172  00000000       constant
0x4cd4ae30   176  00c8a980       constant
0x4cd4ae34   180  00000000       constant
0x4cd4ae38   184  4cd06060       constant
0x4cd4ae3c   188  00000000       constant


RelocInfo (size = 11)
0x4cd4ad88  embedded object  (0x210747c1 WeakCell for 0x2a80c131 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd4adc4  embedded object  (0x4cd4ad21 <Code: COMPARE_IC>)
0x4cd4adf4  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cd4adf8  code target (STUB)  (0x4cd06060)
0x4cd4ae18  constant pool (size 40)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = UNINITIALIZED
extra_ic_state = 0
compare_state = UNINITIALIZED*UNINITIALIZED -> UNINITIALIZED
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 136)
0x4cd4aea0     0  movz x16, #0xc00000000
0x4cd4aea4     4  sub csp, jssp, #0x10 (16)
0x4cd4aea8     8  stp fp, lr, [jssp, #-16]!
0x4cd4aeac    12  sub csp, jssp, #0x10 (16)
0x4cd4aeb0    16  str x16, [jssp, #-8]!
0x4cd4aeb4    20  ldr x17, pc+92 (addr 0x000000004cd4af10)    ;; object: 0x4cd4ae41 <Code: COMPARE_IC>
0x4cd4aeb8    24  sub csp, jssp, #0x10 (16)
0x4cd4aebc    28  str x17, [jssp, #-8]!
0x4cd4aec0    32  add fp, jssp, #0x10 (16)
0x4cd4aec4    36  sub csp, jssp, #0x18 (24)
0x4cd4aec8    40  stp lr, x0, [jssp, #-24]!
0x4cd4aecc    44  str x1, [jssp, #16]
0x4cd4aed0    48  movz x10, #0x2f00000000
0x4cd4aed4    52  sub csp, jssp, #0x18 (24)
0x4cd4aed8    56  stp x10, x0, [jssp, #-24]!
0x4cd4aedc    60  str x1, [jssp, #16]
0x4cd4aee0    64  movz x0, #0x3
0x4cd4aee4    68  ldr x1, pc+52 (addr 0x000000004cd4af18)    ;; external reference (Runtime::CompareIC_Miss)
0x4cd4aee8    72  ldr x16, pc+56 (addr 0x000000004cd4af20)    ;; code: STUB, CEntryStub, minor: 4
0x4cd4aeec    76  blr x16
0x4cd4aef0    80  add x11, x0, #0x5f (95)
0x4cd4aef4    84  ldr x1, [jssp, #16]
0x4cd4aef8    88  ldp lr, x0, [jssp], #24
0x4cd4aefc    92  mov jssp, fp
0x4cd4af00    96  ldp fp, lr, [jssp], #16
0x4cd4af04   100  br x11
0x4cd4af08   104  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd4af0c   108  d63f03e0       constant
0x4cd4af10   112  4cd4ae41       constant
0x4cd4af14   116  00000000       constant
0x4cd4af18   120  00c8a980       constant
0x4cd4af1c   124  00000000       constant
0x4cd4af20   128  4cd06060       constant
0x4cd4af24   132  00000000       constant


RelocInfo (size = 10)
0x4cd4aeb4  embedded object  (0x4cd4ae41 <Code: COMPARE_IC>)
0x4cd4aee4  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cd4aee8  code target (STUB)  (0x4cd06060)
0x4cd4af08  constant pool (size 32)


kind = STUB
major_key = DoubleToIStub
name = DoubleToIStub
compiler = unknown
Instructions (size = 60)
0x4cd4b6c0     0  sub csp, jssp, #0x10 (16)
0x4cd4b6c4     4  stp x2, x1, [jssp, #-16]!
0x4cd4b6c8     8  ldur x7, [x0, #7]
0x4cd4b6cc    12  ubfx x1, x7, #52, #11
0x4cd4b6d0    16  cmp x1, #0x453 (1107)
0x4cd4b6d4    20  csel x7, xzr, x7, ge
0x4cd4b6d8    24  b.ge #+0x1c (addr 0x4cd4b6f4)
0x4cd4b6dc    28  ubfx x2, x7, #0, #52
0x4cd4b6e0    32  orr x2, x2, #0x10000000000000
0x4cd4b6e4    36  tst x7, #0x8000000000000000
0x4cd4b6e8    40  cneg x2, x2, ne
0x4cd4b6ec    44  sub x1, x1, #0x433 (1075)
0x4cd4b6f0    48  lsl x7, x2, x1
0x4cd4b6f4    52  ldp x2, x1, [jssp], #16
0x4cd4b6f8    56  ret


RelocInfo (size = 0)


kind = STUB
major_key = BinaryOpWithAllocationSiteStub
name = BinaryOpWithAllocationSiteStub(ADD_CreateAllocationMementos:String*Smi->String)
compiler = crankshaft
Instructions (size = 1377)
0x4cd4b760     0  movz x16, #0xa00000000
0x4cd4b764     4  sub csp, jssp, #0x10 (16)
0x4cd4b768     8  stp fp, lr, [jssp, #-16]!
0x4cd4b76c    12  mov fp, jssp
0x4cd4b770    16  sub csp, jssp, #0x28 (40)
0x4cd4b774    20  sub jssp, jssp, #0x28 (40)
0x4cd4b778    24  stur x16, [fp, #-8]
0x4cd4b77c    28  str x2, [jssp, #24]
0x4cd4b780    32  str x1, [jssp, #16]
0x4cd4b784    36  str x0, [jssp, #8]
0x4cd4b788    40  str cp, [jssp]
0x4cd4b78c    44  mov x3, cp
0x4cd4b790    48  tbz w1, #0, #+0x4a8 (addr 0x4cd4bc38)
0x4cd4b794    52  ldur x4, [x1, #-1]
0x4cd4b798    56  ldrb w4, [x4, #11]
0x4cd4b79c    60  tbnz w4, #7, #+0x4a4 (addr 0x4cd4bc40)
0x4cd4b7a0    64  ldr x4, [x26, #368]
0x4cd4b7a4    68  ldur w5, [x4, #11]
0x4cd4b7a8    72  asr w5, w5, #1
0x4cd4b7ac    76  sub w5, w5, #0x1 (1)
0x4cd4b7b0    80  tbz w0, #0, #+0xc (addr 0x4cd4b7bc)
0x4cd4b7b4    84  ldr x16, pc+1012 (addr 0x000000004cd4bba8)    ;; lazy deoptimization bailout 2
0x4cd4b7b8    88  blr x16
0x4cd4b7bc    92  tbnz w0, #0, #+0x2f4 (addr 0x4cd4bab0)
0x4cd4b7c0    96  asr x7, x0, #32
0x4cd4b7c4   100  and w5, w5, w7
0x4cd4b7c8   104  lsl w5, w5, #1
0x4cd4b7cc   108  add x6, x4, #0xf (15)
0x4cd4b7d0   112  ldr x7, [x6, w5, sxtw #3]
0x4cd4b7d4   116  cmp x0, x7
0x4cd4b7d8   120  b.eq #+0x28 (addr 0x4cd4b800)
0x4cd4b7dc   124  sub csp, jssp, #0x8 (8)
0x4cd4b7e0   128  str x0, [jssp, #-8]!
0x4cd4b7e4   132  mov cp, x3
0x4cd4b7e8   136  movz x0, #0x1
0x4cd4b7ec   140  movz x1, #0xce00
0x4cd4b7f0   144  movk x1, #0xe3, lsl #16
0x4cd4b7f4   148  ldr x16, pc+956 (addr 0x000000004cd4bbb0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd4b7f8   152  blr x16
0x4cd4b7fc   156  b #+0x10 (addr 0x4cd4b80c)
0x4cd4b800   160  add x0, x4, #0x17 (23)
0x4cd4b804   164  ldr x1, [x0, w5, sxtw #3]
0x4cd4b808   168  mov x0, x1
0x4cd4b80c   172  ldr x1, [jssp, #16]
0x4cd4b810   176  ldur w2, [x1, #19]
0x4cd4b814   180  ldur w3, [x0, #19]
0x4cd4b818   184  cbz w2, #+0x288 (addr 0x4cd4baa0)
0x4cd4b81c   188  cbz w3, #+0x27c (addr 0x4cd4ba98)
0x4cd4b820   192  add w4, w2, w3
0x4cd4b824   196  movn w16, #0xe0
0x4cd4b828   200  cmp w4, w16, lsr #4
0x4cd4b82c   204  b.hs #+0x41c (addr 0x4cd4bc48)
0x4cd4b830   208  cmp w4, #0xd (13)
0x4cd4b834   212  b.ge #+0x1bc (addr 0x4cd4b9f0)
0x4cd4b838   216  ldur x5, [x1, #-1]
0x4cd4b83c   220  ldrb w5, [x5, #11]
0x4cd4b840   224  ldur x6, [x0, #-1]
0x4cd4b844   228  ldrb w6, [x6, #11]
0x4cd4b848   232  orr w7, w5, w6
0x4cd4b84c   236  eor w5, w5, w6
0x4cd4b850   240  and w5, w5, #0x4
0x4cd4b854   244  cbnz w5, #+0xc (addr 0x4cd4b860)
0x4cd4b858   248  and w5, w7, #0x3
0x4cd4b85c   252  cbz w5, #+0x28 (addr 0x4cd4b884)
0x4cd4b860   256  sub csp, jssp, #0x10 (16)
0x4cd4b864   260  stp x0, x1, [jssp, #-16]!
0x4cd4b868   264  ldr cp, [jssp, #16]
0x4cd4b86c   268  movz x0, #0x2
0x4cd4b870   272  movz x1, #0xa6c0
0x4cd4b874   276  movk x1, #0xec, lsl #16
0x4cd4b878   280  ldr x16, pc+832 (addr 0x000000004cd4bbb8)    ;; code: STUB, CEntryStub, minor: 4
0x4cd4b87c   284  blr x16
0x4cd4b880   288  b #+0x220 (addr 0x4cd4baa0)
0x4cd4b884   292  and w1, w7, #0x4
0x4cd4b888   296  cbnz w1, #+0x14 (addr 0x4cd4b89c)
0x4cd4b88c   300  lsl w1, w4, #1
0x4cd4b890   304  mov x5, x1
0x4cd4b894   308  ldr x1, pc+812 (addr 0x000000004cd4bbc0)    ;; object: 0x2a804ba1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd4b898   312  b #+0xc (addr 0x4cd4b8a4)
0x4cd4b89c   316  mov x5, x4
0x4cd4b8a0   320  ldr x1, pc+808 (addr 0x000000004cd4bbc8)    ;; object: 0x2a804bf9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd4b8a4   324  add w5, w5, #0x1f (31)
0x4cd4b8a8   328  and w5, w5, #0xfffffff8
0x4cd4b8ac   332  cmp w5, #0x96000 (614400)
0x4cd4b8b0   336  b.lt #+0x2c (addr 0x4cd4b8dc)
0x4cd4b8b4   340  sub csp, jssp, #0x10 (16)
0x4cd4b8b8   344  ldr x1, [jssp, #16]
0x4cd4b8bc   348  stp x0, x1, [jssp, #-16]!
0x4cd4b8c0   352  ldr cp, [jssp, #16]
0x4cd4b8c4   356  movz x0, #0x2
0x4cd4b8c8   360  movz x1, #0xa6c0
0x4cd4b8cc   364  movk x1, #0xec, lsl #16
0x4cd4b8d0   368  ldr x16, pc+768 (addr 0x000000004cd4bbd0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd4b8d4   372  blr x16
0x4cd4b8d8   376  b #+0x1c8 (addr 0x4cd4baa0)
0x4cd4b8dc   380  add w6, w5, #0x10 (16)
0x4cd4b8e0   384  sxtw x6, w6
0x4cd4b8e4   388  movz x7, #0xd2c0
0x4cd4b8e8   392  movk x7, #0x166d, lsl #16
0x4cd4b8ec   396  ldp x9, x16, [x7]
0x4cd4b8f0   400  adds x8, x9, x6
0x4cd4b8f4   404  ccmp x8, x16, #nzCv, lo
0x4cd4b8f8   408  b.hi #+0x218 (addr 0x4cd4bb10)
0x4cd4b8fc   412  str x8, [x7]
0x4cd4b900   416  orr x9, x9, #0x1
0x4cd4b904   420  add x5, x9, w5, sxtw
0x4cd4b908   424  ldr x6, pc+720 (addr 0x000000004cd4bbd8)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd4b90c   428  stur x6, [x5, #-1]
0x4cd4b910   432  ldr x6, [jssp, #24]
0x4cd4b914   436  stur x6, [x5, #7]
0x4cd4b918   440  ldur w5, [x6, #35]
0x4cd4b91c   444  add w5, w5, #0x1 (1)
0x4cd4b920   448  lsl x5, x5, #32
0x4cd4b924   452  stur x5, [x6, #31]
0x4cd4b928   456  stur x1, [x9, #-1]
0x4cd4b92c   460  movz w5, #0x3
0x4cd4b930   464  stur w5, [x9, #7]
0x4cd4b934   468  lsl x4, x4, #32
0x4cd4b938   472  stur x4, [x9, #15]
0x4cd4b93c   476  ldr x4, pc+676 (addr 0x000000004cd4bbe0)    ;; object: 0x2a804ba1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd4b940   480  cmp x1, x4
0x4cd4b944   484  b.eq #+0x54 (addr 0x4cd4b998)
0x4cd4b948   488  ldr x5, [jssp, #16]
0x4cd4b94c   492  movz x1, #0x0
0x4cd4b950   496  cmp w2, w1
0x4cd4b954   500  b.le #+0x1c (addr 0x4cd4b970)
0x4cd4b958   504  add x4, x5, #0x17 (23)
0x4cd4b95c   508  ldrb w6, [x4, w1, sxtw]
0x4cd4b960   512  add x4, x9, #0x17 (23)
0x4cd4b964   516  strb w6, [x4, w1, sxtw]
0x4cd4b968   520  add w1, w1, #0x1 (1)
0x4cd4b96c   524  b #-0x1c (addr 0x4cd4b950)
0x4cd4b970   528  movz x1, #0x0
0x4cd4b974   532  cmp w3, w1
0x4cd4b978   536  b.le #+0x70 (addr 0x4cd4b9e8)
0x4cd4b97c   540  add x4, x0, #0x17 (23)
0x4cd4b980   544  ldrb w5, [x4, w1, sxtw]
0x4cd4b984   548  add w4, w2, w1
0x4cd4b988   552  add x6, x9, #0x17 (23)
0x4cd4b98c   556  strb w5, [x6, w4, sxtw]
0x4cd4b990   560  add w1, w1, #0x1 (1)
0x4cd4b994   564  b #-0x20 (addr 0x4cd4b974)
0x4cd4b998   568  ldr x5, [jssp, #16]
0x4cd4b99c   572  movz x1, #0x0
0x4cd4b9a0   576  cmp w2, w1
0x4cd4b9a4   580  b.le #+0x1c (addr 0x4cd4b9c0)
0x4cd4b9a8   584  add x4, x5, #0x17 (23)
0x4cd4b9ac   588  ldrh w6, [x4, w1, sxtw #1]
0x4cd4b9b0   592  add x4, x9, #0x17 (23)
0x4cd4b9b4   596  strh w6, [x4, w1, sxtw #1]
0x4cd4b9b8   600  add w1, w1, #0x1 (1)
0x4cd4b9bc   604  b #-0x1c (addr 0x4cd4b9a0)
0x4cd4b9c0   608  movz x1, #0x0
0x4cd4b9c4   612  cmp w3, w1
0x4cd4b9c8   616  b.le #+0x20 (addr 0x4cd4b9e8)
0x4cd4b9cc   620  add x4, x0, #0x17 (23)
0x4cd4b9d0   624  ldrh w5, [x4, w1, sxtw #1]
0x4cd4b9d4   628  add w4, w2, w1
0x4cd4b9d8   632  add x6, x9, #0x17 (23)
0x4cd4b9dc   636  strh w5, [x6, w4, sxtw #1]
0x4cd4b9e0   640  add w1, w1, #0x1 (1)
0x4cd4b9e4   644  b #-0x20 (addr 0x4cd4b9c4)
0x4cd4b9e8   648  mov x0, x9
0x4cd4b9ec   652  b #+0xb4 (addr 0x4cd4baa0)
0x4cd4b9f0   656  ldr x6, [jssp, #24]
0x4cd4b9f4   660  mov x5, x1
0x4cd4b9f8   664  ldur x1, [x5, #-1]
0x4cd4b9fc   668  ldrb w1, [x1, #11]
0x4cd4ba00   672  ldur x2, [x0, #-1]
0x4cd4ba04   676  ldrb w2, [x2, #11]
0x4cd4ba08   680  movz x7, #0xd2c0
0x4cd4ba0c   684  movk x7, #0x166d, lsl #16
0x4cd4ba10   688  ldp x8, x3, [x7]
0x4cd4ba14   692  adds x16, x8, #0x38 (56)
0x4cd4ba18   696  ccmp x16, x3, #nzCv, lo
0x4cd4ba1c   700  b.hi #+0x13c (addr 0x4cd4bb58)
0x4cd4ba20   704  str x16, [x7]
0x4cd4ba24   708  orr x8, x8, #0x1
0x4cd4ba28   712  add x3, x8, #0x28 (40)
0x4cd4ba2c   716  ldr x7, pc+444 (addr 0x000000004cd4bbe8)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd4ba30   720  stur x7, [x3, #-1]
0x4cd4ba34   724  stur x6, [x3, #7]
0x4cd4ba38   728  ldur w3, [x6, #35]
0x4cd4ba3c   732  add w3, w3, #0x1 (1)
0x4cd4ba40   736  lsl x3, x3, #32
0x4cd4ba44   740  stur x3, [x6, #31]
0x4cd4ba48   744  and w3, w1, w2
0x4cd4ba4c   748  eor w1, w1, w2
0x4cd4ba50   752  and w2, w3, #0xc
0x4cd4ba54   756  cbnz w2, #+0x1c (addr 0x4cd4ba70)
0x4cd4ba58   760  and w1, w1, #0xc
0x4cd4ba5c   764  cmp w1, #0xc (12)
0x4cd4ba60   768  b.eq #+0x10 (addr 0x4cd4ba70)
0x4cd4ba64   772  ldr x1, pc+396 (addr 0x000000004cd4bbf0)    ;; object: 0x2a804c51 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd4ba68   776  stur x1, [x8, #-1]
0x4cd4ba6c   780  b #+0xc (addr 0x4cd4ba78)
0x4cd4ba70   784  ldr x1, pc+392 (addr 0x000000004cd4bbf8)    ;; object: 0x2a804ca9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd4ba74   788  stur x1, [x8, #-1]
0x4cd4ba78   792  movz w1, #0x3
0x4cd4ba7c   796  stur w1, [x8, #7]
0x4cd4ba80   800  lsl x1, x4, #32
0x4cd4ba84   804  stur x1, [x8, #15]
0x4cd4ba88   808  stur x5, [x8, #23]
0x4cd4ba8c   812  stur x0, [x8, #31]
0x4cd4ba90   816  mov x0, x8
0x4cd4ba94   820  b #+0xc (addr 0x4cd4baa0)
0x4cd4ba98   824  mov x5, x1
0x4cd4ba9c   828  mov x0, x5
0x4cd4baa0   832  ldr cp, [jssp]
0x4cd4baa4   836  mov jssp, fp
0x4cd4baa8   840  ldp fp, lr, [jssp], #16
0x4cd4baac   844  ret
0x4cd4bab0   848  ldur x16, [x0, #-1]
0x4cd4bab4   852  ldr x17, [x26, #120]
0x4cd4bab8   856  cmp x16, x17
0x4cd4babc   860  b.ne #+0x30 (addr 0x4cd4baec)
0x4cd4bac0   864  ldur d30, [x0, #7]
0x4cd4bac4   868  fcvtzs x7, d30
0x4cd4bac8   872  cmp x7, #0x1 (1)
0x4cd4bacc   876  ccmn x7, #1, #nzcV, vc
0x4cd4bad0   880  b.vc #+0x18 (addr 0x4cd4bae8)
0x4cd4bad4   884  sub csp, jssp, #0x8 (8)
0x4cd4bad8   888  str lr, [jssp, #-8]!
0x4cd4badc   892  ldr x16, pc+292 (addr 0x000000004cd4bc00)    ;; code: STUB, DoubleToIStub, minor: 127424
0x4cd4bae0   896  blr x16
0x4cd4bae4   900  ldr lr, [jssp], #8
0x4cd4bae8   904  b #+0x24 (addr 0x4cd4bb0c)
0x4cd4baec   908  ldp x7, x6, [x26, #64]
0x4cd4baf0   912  cmp x0, x7
0x4cd4baf4   916  cset x7, eq
0x4cd4baf8   920  ccmp x0, x6, #nZcv, ne
0x4cd4bafc   924  b.eq #+0x10 (addr 0x4cd4bb0c)
0x4cd4bb00   928  ldr x16, [x26, #40]
0x4cd4bb04   932  cmp x0, x16
0x4cd4bb08   936  b.ne #+0x148 (addr 0x4cd4bc50)
0x4cd4bb0c   940  b #-0x348 (addr 0x4cd4b7c4)
0x4cd4bb10   944  movz x9, #0x0
0x4cd4bb14   948  mov x16, lr
0x4cd4bb18   952  ldr x17, pc+240 (addr 0x000000004cd4bc08)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd4bb1c   956  blr x17
0x4cd4bb20   960  lsl x0, x6, #32
0x4cd4bb24   964  movz x10, #0x0
0x4cd4bb28   968  sub csp, jssp, #0x10 (16)
0x4cd4bb2c   972  stp x10, x0, [jssp, #-16]!
0x4cd4bb30   976  ldur cp, [fp, #-40]
0x4cd4bb34   980  movz x0, #0x2
0x4cd4bb38   984  movz x1, #0x5b88
0x4cd4bb3c   988  movk x1, #0xe2, lsl #16
0x4cd4bb40   992  ldr x16, pc+208 (addr 0x000000004cd4bc10)    ;; code: STUB, CEntryStub, minor: 5
0x4cd4bb44   996  blr x16
0x4cd4bb48  1000  str x0, [jssp, #72]
0x4cd4bb4c  1004  ldr x16, pc+204 (addr 0x000000004cd4bc18)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd4bb50  1008  blr x16
0x4cd4bb54  1012  b #-0x250 (addr 0x4cd4b904)
0x4cd4bb58  1016  movz x8, #0x0
0x4cd4bb5c  1020  mov x16, lr
0x4cd4bb60  1024  ldr x17, pc+192 (addr 0x000000004cd4bc20)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd4bb64  1028  blr x17
0x4cd4bb68  1032  movz x0, #0x3800000000
0x4cd4bb6c  1036  movz x10, #0x0
0x4cd4bb70  1040  sub csp, jssp, #0x10 (16)
0x4cd4bb74  1044  stp x10, x0, [jssp, #-16]!
0x4cd4bb78  1048  ldur cp, [fp, #-40]
0x4cd4bb7c  1052  movz x0, #0x2
0x4cd4bb80  1056  movz x1, #0x5b88
0x4cd4bb84  1060  movk x1, #0xe2, lsl #16
0x4cd4bb88  1064  ldr x16, pc+160 (addr 0x000000004cd4bc28)    ;; code: STUB, CEntryStub, minor: 5
0x4cd4bb8c  1068  blr x16
0x4cd4bb90  1072  str x0, [jssp, #64]
0x4cd4bb94  1076  ldr x16, pc+156 (addr 0x000000004cd4bc30)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd4bb98  1080  blr x16
0x4cd4bb9c  1084  b #-0x174 (addr 0x4cd4ba28)
0x4cd4bba0  1088  580004bf       constant pool begin (num_const = 37)    ;; constant pool
0x4cd4bba4  1092  d63f03e0       constant
0x4cd4bba8  1096  4cb06010       constant
0x4cd4bbac  1100  00000000       constant
0x4cd4bbb0  1104  4cd06060       constant
0x4cd4bbb4  1108  00000000       constant
0x4cd4bbb8  1112  4cd06060       constant
0x4cd4bbbc  1116  00000000       constant
0x4cd4bbc0  1120  2a804ba1       constant
0x4cd4bbc4  1124  00000000       constant
0x4cd4bbc8  1128  2a804bf9       constant
0x4cd4bbcc  1132  00000000       constant
0x4cd4bbd0  1136  4cd06060       constant
0x4cd4bbd4  1140  00000000       constant
0x4cd4bbd8  1144  2a805d81       constant
0x4cd4bbdc  1148  00000000       constant
0x4cd4bbe0  1152  2a804ba1       constant
0x4cd4bbe4  1156  00000000       constant
0x4cd4bbe8  1160  2a805d81       constant
0x4cd4bbec  1164  00000000       constant
0x4cd4bbf0  1168  2a804c51       constant
0x4cd4bbf4  1172  00000000       constant
0x4cd4bbf8  1176  2a804ca9       constant
0x4cd4bbfc  1180  00000000       constant
0x4cd4bc00  1184  4cd4b6c0       constant
0x4cd4bc04  1188  00000000       constant
0x4cd4bc08  1192  4cd06820       constant
0x4cd4bc0c  1196  00000000       constant
0x4cd4bc10  1200  4cd06260       constant
0x4cd4bc14  1204  00000000       constant
0x4cd4bc18  1208  4cd068e0       constant
0x4cd4bc1c  1212  00000000       constant
0x4cd4bc20  1216  4cd06820       constant
0x4cd4bc24  1220  00000000       constant
0x4cd4bc28  1224  4cd06260       constant
0x4cd4bc2c  1228  00000000       constant
0x4cd4bc30  1232  4cd068e0       constant
0x4cd4bc34  1236  00000000       constant
0x4cd4bc38  1240  movz x16, #0x0
0x4cd4bc3c  1244  bl #+0x1c (addr 0x4cd4bc58)
0x4cd4bc40  1248  movz x16, #0x8
0x4cd4bc44  1252  bl #+0x14 (addr 0x4cd4bc58)
0x4cd4bc48  1256  movz x16, #0x20
0x4cd4bc4c  1260  bl #+0xc (addr 0x4cd4bc58)
0x4cd4bc50  1264  movz x16, #0x38
0x4cd4bc54  1268  bl #+0x4 (addr 0x4cd4bc58)
0x4cd4bc58  1272  ldr x17, pc+24 (addr 0x000000004cd4bc70)    ;; lazy deoptimization bailout 0
0x4cd4bc5c  1276  add x17, x17, x16
0x4cd4bc60  1280  br x17
0x4cd4bc64  1284  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd4bc68  1288  d63f03e0       constant
0x4cd4bc6c  1292  d503201f       constant
0x4cd4bc70  1296  4cb06000       constant
0x4cd4bc74  1300  00000000       constant


Safepoints (size = 73)
0x4cd4b7fc   156  1111000 (sp -> fp)       3
0x4cd4b880   288  1111000 (sp -> fp)       5
0x4cd4b8d8   376  1111000 (sp -> fp)       6
0x4cd4bb48  1000  1011000 | x0 | x1 | x9 (sp -> fp)  <none> argc: 2
0x4cd4bb90  1072  1011000 | x0 | x5 | x6 | x8 (sp -> fp)  <none> argc: 2

RelocInfo (size = 45)
0x4cd4b7b4  runtime entry
0x4cd4b7f4  code target (STUB)  (0x4cd06060)
0x4cd4b878  code target (STUB)  (0x4cd06060)
0x4cd4b894  embedded object  (0x2a804ba1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd4b8a0  embedded object  (0x2a804bf9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd4b8d0  code target (STUB)  (0x4cd06060)
0x4cd4b908  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd4b93c  embedded object  (0x2a804ba1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd4ba2c  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd4ba64  embedded object  (0x2a804c51 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd4ba70  embedded object  (0x2a804ca9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd4badc  code target (STUB)  (0x4cd4b6c0)
0x4cd4bb18  code target (STUB)  (0x4cd06820)
0x4cd4bb40  code target (STUB)  (0x4cd06260)
0x4cd4bb4c  code target (STUB)  (0x4cd068e0)
0x4cd4bb60  code target (STUB)  (0x4cd06820)
0x4cd4bb88  code target (STUB)  (0x4cd06260)
0x4cd4bb94  code target (STUB)  (0x4cd068e0)
0x4cd4bba0  constant pool (size 152)
0x4cd4bc58  runtime entry
0x4cd4bc64  constant pool (size 20)


kind = BINARY_OP_IC
major_key = BinaryOpICWithAllocationSiteStub
ic_state = MONOMORPHIC
extra_ic_state = 2631
type = NORMAL
name = BinaryOpICWithAllocationSiteStub(ADD_CreateAllocationMementos:String*Smi->String)
compiler = unknown
Instructions (size = 40)
0x4cd4bd40     0  ldr x2, pc+24 (addr 0x000000004cd4bd58)    ;; object: 0x21004241 <undefined>
0x4cd4bd44     4  ldr x16, pc+28 (addr 0x000000004cd4bd60)    ;; code: STUB, BinaryOpWithAllocationSiteStub, minor: 2631
0x4cd4bd48     8  br x16
0x4cd4bd4c    12  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd4bd50    16  d63f03e0       constant
0x4cd4bd54    20  d503201f       constant
0x4cd4bd58    24  21004241       constant
0x4cd4bd5c    28  00000000       constant
0x4cd4bd60    32  4cd4b760       constant
0x4cd4bd64    36  00000000       constant


RelocInfo (size = 8)
0x4cd4bd40  embedded object  (0x21004241 <undefined>)
0x4cd4bd44  code target (STUB)  (0x4cd4b760)
0x4cd4bd4c  constant pool (size 28)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 269)
0x4cd4be80     0  movz x2, #0xd2c0
0x4cd4be84     4  movk x2, #0x166d, lsl #16
0x4cd4be88     8  ldp x3, x0, [x2]
0x4cd4be8c    12  adds x16, x3, #0x38 (56)
0x4cd4be90    16  ccmp x16, x0, #nzCv, lo
0x4cd4be94    20  b.hi #+0x44 (addr 0x4cd4bed8)
0x4cd4be98    24  str x16, [x2]
0x4cd4be9c    28  orr x3, x3, #0x1
0x4cd4bea0    32  ldr x0, pc+168 (addr 0x000000004cd4bf48)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd4bea4    36  stur x0, [x3, #-1]
0x4cd4bea8    40  movz x0, #0x500000000
0x4cd4beac    44  stur x0, [x3, #7]
0x4cd4beb0    48  stur x1, [x3, #15]
0x4cd4beb4    52  stur cp, [x3, #23]
0x4cd4beb8    56  ldr x0, pc+152 (addr 0x000000004cd4bf50)    ;; object: 0x21004519 <the hole>
0x4cd4bebc    60  stur x0, [x3, #31]
0x4cd4bec0    64  ldur x0, [cp, #39]
0x4cd4bec4    68  stur x0, [x3, #39]
0x4cd4bec8    72  ldr x0, pc+144 (addr 0x000000004cd4bf58)    ;; object: 0x21004241 <undefined>
0x4cd4becc    76  stur x0, [x3, #47]
0x4cd4bed0    80  mov x0, x3
0x4cd4bed4    84  ret
0x4cd4bed8    88  sub csp, jssp, #0x10 (16)
0x4cd4bedc    92  stp fp, lr, [jssp, #-16]!
0x4cd4bee0    96  movz fp, #0xa00000000
0x4cd4bee4   100  sub csp, jssp, #0x8 (8)
0x4cd4bee8   104  str fp, [jssp, #-8]!
0x4cd4beec   108  add fp, jssp, #0x8 (8)
0x4cd4bef0   112  movz x3, #0x0
0x4cd4bef4   116  mov x16, lr
0x4cd4bef8   120  ldr x17, pc+104 (addr 0x000000004cd4bf60)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd4befc   124  blr x17
0x4cd4bf00   128  movz x0, #0x3800000000
0x4cd4bf04   132  movz x10, #0x0
0x4cd4bf08   136  sub csp, jssp, #0x10 (16)
0x4cd4bf0c   140  stp x10, x0, [jssp, #-16]!
0x4cd4bf10   144  movz x0, #0x2
0x4cd4bf14   148  movz x1, #0x5b88
0x4cd4bf18   152  movk x1, #0xe2, lsl #16
0x4cd4bf1c   156  ldr x16, pc+76 (addr 0x000000004cd4bf68)    ;; code: STUB, CEntryStub, minor: 5
0x4cd4bf20   160  blr x16
0x4cd4bf24   164  str x0, [jssp, #24]
0x4cd4bf28   168  ldr x16, pc+72 (addr 0x000000004cd4bf70)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd4bf2c   172  blr x16
0x4cd4bf30   176  ldr lr, [jssp, #16]
0x4cd4bf34   180  ldp xzr, fp, [jssp], #24
0x4cd4bf38   184  b #-0x98 (addr 0x4cd4bea0)
0x4cd4bf3c   188  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cd4bf40   192  d63f03e0       constant
0x4cd4bf44   196  d503201f       constant
0x4cd4bf48   200  2a806149       constant
0x4cd4bf4c   204  00000000       constant
0x4cd4bf50   208  21004519       constant
0x4cd4bf54   212  00000000       constant
0x4cd4bf58   216  21004241       constant
0x4cd4bf5c   220  00000000       constant
0x4cd4bf60   224  4cd06820       constant
0x4cd4bf64   228  00000000       constant
0x4cd4bf68   232  4cd06260       constant
0x4cd4bf6c   236  00000000       constant
0x4cd4bf70   240  4cd068e0       constant
0x4cd4bf74   244  00000000       constant


Safepoints (size = 21)
0x4cd4bf24   164  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 12)
0x4cd4bea0  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd4beb8  embedded object  (0x21004519 <the hole>)
0x4cd4bec8  embedded object  (0x21004241 <undefined>)
0x4cd4bef8  code target (STUB)  (0x4cd06820)
0x4cd4bf1c  code target (STUB)  (0x4cd06260)
0x4cd4bf28  code target (STUB)  (0x4cd068e0)
0x4cd4bf3c  constant pool (size 60)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0x4cd4c160     0  ldur x0, [x1, #-1]
0x4cd4c164     4  ldur x0, [x0, #47]
0x4cd4c168     8  ldur x0, [x0, #239]
0x4cd4c16c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd52500     0  ldur x0, [x1, #-1]
0x4cd52504     4  ldur x0, [x0, #47]
0x4cd52508     8  movz x16, #0x7f7
0x4cd5250c    12  ldr x0, [x0, x16]
0x4cd52510    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 393220
name = CallICStub(args(4), ANY, 
compiler = unknown
Instructions (size = 488)
0x4cd52580     0  add x4, x2, x3, asr #29
0x4cd52584     4  ldur x4, [x4, #15]
0x4cd52588     8  ldur x5, [x4, #7]
0x4cd5258c    12  cmp x5, x1
0x4cd52590    16  b.ne #+0x2c (addr 0x4cd525bc)
0x4cd52594    20  tbz w1, #0, #+0x28 (addr 0x4cd525bc)
0x4cd52598    24  add x2, x2, x3, asr #29
0x4cd5259c    28  add x2, x2, #0x18 (24)
0x4cd525a0    32  ldur x3, [x2, #-1]
0x4cd525a4    36  movz x16, #0x200000000
0x4cd525a8    40  add x3, x3, x16
0x4cd525ac    44  stur x3, [x2, #-1]
0x4cd525b0    48  movz x0, #0x4
0x4cd525b4    52  ldr x16, pc+372 (addr 0x000000004cd52728)    ;; code: BUILTIN
0x4cd525b8    56  br x16
0x4cd525bc    60  ldr x16, [x26, #2400]
0x4cd525c0    64  cmp x4, x16
0x4cd525c4    68  b.eq #+0x78 (addr 0x4cd5263c)
0x4cd525c8    72  ldur x5, [x4, #-1]
0x4cd525cc    76  ldr x16, [x26, #2736]
0x4cd525d0    80  cmp x5, x16
0x4cd525d4    84  b.ne #+0x40 (addr 0x4cd52614)
0x4cd525d8    88  ldur x5, [cp, #39]
0x4cd525dc    92  ldur x5, [x5, #95]
0x4cd525e0    96  cmp x1, x5
0x4cd525e4   100  b.ne #+0xec (addr 0x4cd526d0)
0x4cd525e8   104  movz x0, #0x4
0x4cd525ec   108  add x2, x2, x3, asr #29
0x4cd525f0   112  add x2, x2, #0x18 (24)
0x4cd525f4   116  ldur x3, [x2, #-1]
0x4cd525f8   120  movz x16, #0x200000000
0x4cd525fc   124  add x3, x3, x16
0x4cd52600   128  stur x3, [x2, #-1]
0x4cd52604   132  mov x2, x4
0x4cd52608   136  mov x3, x1
0x4cd5260c   140  ldr x16, pc+292 (addr 0x000000004cd52730)    ;; code: STUB, ArrayConstructorStub, minor: 3
0x4cd52610   144  br x16
0x4cd52614   148  ldr x16, [x26, #2568]
0x4cd52618   152  cmp x4, x16
0x4cd5261c   156  b.eq #+0xb4 (addr 0x4cd526d0)
0x4cd52620   160  ldur x5, [x4, #-1]
0x4cd52624   164  ldrb w5, [x5, #11]
0x4cd52628   168  cmp x5, #0xc9 (201)
0x4cd5262c   172  b.ne #+0xa4 (addr 0x4cd526d0)
0x4cd52630   176  add x4, x2, x3, asr #29
0x4cd52634   180  ldr x5, [x26, #2400]
0x4cd52638   184  stur x5, [x4, #15]
0x4cd5263c   188  movz x0, #0x4
0x4cd52640   192  ldr x16, pc+248 (addr 0x000000004cd52738)    ;; code: BUILTIN
0x4cd52644   196  br x16
0x4cd52648   200  tbz w1, #0, #+0x88 (addr 0x4cd526d0)
0x4cd5264c   204  ldur x5, [x1, #-1]
0x4cd52650   208  ldrb w5, [x5, #11]
0x4cd52654   212  cmp x5, #0xc9 (201)
0x4cd52658   216  b.ne #+0x78 (addr 0x4cd526d0)
0x4cd5265c   220  ldur x5, [cp, #39]
0x4cd52660   224  ldur x5, [x5, #95]
0x4cd52664   228  cmp x1, x5
0x4cd52668   232  b.eq #+0x68 (addr 0x4cd526d0)
0x4cd5266c   236  ldur x4, [x1, #39]
0x4cd52670   240  ldur x4, [x4, #39]
0x4cd52674   244  ldur x5, [cp, #39]
0x4cd52678   248  cmp x4, x5
0x4cd5267c   252  b.ne #+0x54 (addr 0x4cd526d0)
0x4cd52680   256  movz x5, #0x200000000
0x4cd52684   260  adds x4, x2, x3, asr #29
0x4cd52688   264  stur x5, [x4, #23]
0x4cd5268c   268  movz x16, #0xc00000000
0x4cd52690   272  sub csp, jssp, #0x10 (16)
0x4cd52694   276  stp fp, lr, [jssp, #-16]!
0x4cd52698   280  sub csp, jssp, #0x10 (16)
0x4cd5269c   284  str x16, [jssp, #-8]!
0x4cd526a0   288  ldr x17, pc+160 (addr 0x000000004cd52740)    ;; object: 0x4cd52521 <Code: CALL_IC>
0x4cd526a4   292  sub csp, jssp, #0x10 (16)
0x4cd526a8   296  str x17, [jssp, #-8]!
0x4cd526ac   300  add fp, jssp, #0x10 (16)
0x4cd526b0   304  sub csp, jssp, #0x8 (8)
0x4cd526b4   308  str x1, [jssp, #-8]!
0x4cd526b8   312  ldr x16, pc+144 (addr 0x000000004cd52748)    ;; code: STUB, CreateWeakCellStub, minor: 0
0x4cd526bc   316  blr x16
0x4cd526c0   320  ldr x1, [jssp], #8
0x4cd526c4   324  mov jssp, fp
0x4cd526c8   328  ldp fp, lr, [jssp], #16
0x4cd526cc   332  b #-0x11c (addr 0x4cd525b0)
0x4cd526d0   336  movz x16, #0xc00000000
0x4cd526d4   340  sub csp, jssp, #0x10 (16)
0x4cd526d8   344  stp fp, lr, [jssp, #-16]!
0x4cd526dc   348  sub csp, jssp, #0x10 (16)
0x4cd526e0   352  str x16, [jssp, #-8]!
0x4cd526e4   356  ldr x17, pc+108 (addr 0x000000004cd52750)    ;; object: 0x4cd52521 <Code: CALL_IC>
0x4cd526e8   360  sub csp, jssp, #0x10 (16)
0x4cd526ec   364  str x17, [jssp, #-8]!
0x4cd526f0   368  add fp, jssp, #0x10 (16)
0x4cd526f4   372  sub csp, jssp, #0x18 (24)
0x4cd526f8   376  stp x3, x2, [jssp, #-24]!
0x4cd526fc   380  str x1, [jssp, #16]
0x4cd52700   384  movz x0, #0x3
0x4cd52704   388  ldr x1, pc+84 (addr 0x000000004cd52758)    ;; external reference (Runtime::CallIC_Miss)
0x4cd52708   392  ldr x16, pc+88 (addr 0x000000004cd52760)    ;; code: STUB, CEntryStub, minor: 4
0x4cd5270c   396  blr x16
0x4cd52710   400  mov x1, x0
0x4cd52714   404  mov jssp, fp
0x4cd52718   408  ldp fp, lr, [jssp], #16
0x4cd5271c   412  b #-0xe0 (addr 0x4cd5263c)
0x4cd52720   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4cd52724   420  d63f03e0       constant
0x4cd52728   424  4cd1e820       constant
0x4cd5272c   428  00000000       constant
0x4cd52730   432  4cd33b00       constant
0x4cd52734   436  00000000       constant
0x4cd52738   440  4cd1f820       constant
0x4cd5273c   444  00000000       constant
0x4cd52740   448  4cd52521       constant
0x4cd52744   452  00000000       constant
0x4cd52748   456  4cd0ddc0       constant
0x4cd5274c   460  00000000       constant
0x4cd52750   464  4cd52521       constant
0x4cd52754   468  00000000       constant
0x4cd52758   472  00c86928       constant
0x4cd5275c   476  00000000       constant
0x4cd52760   480  4cd06060       constant
0x4cd52764   484  00000000       constant


RelocInfo (size = 19)
0x4cd525b4  code target (BUILTIN)  (0x4cd1e820)
0x4cd5260c  code target (STUB)  (0x4cd33b00)
0x4cd52640  code target (BUILTIN)  (0x4cd1f820)
0x4cd526a0  embedded object  (0x4cd52521 <Code: CALL_IC>)
0x4cd526b8  code target (STUB)  (0x4cd0ddc0)
0x4cd526e4  embedded object  (0x4cd52521 <Code: CALL_IC>)
0x4cd52704  external reference (Runtime::CallIC_Miss)  (0xc86928)
0x4cd52708  code target (STUB)  (0x4cd06060)
0x4cd52720  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 393220
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0x4cd527e0     0  ldur x2, [fp, #-16]
0x4cd527e4     4  ldur x2, [x2, #31]
0x4cd527e8     8  ldur x2, [x2, #87]
0x4cd527ec    12  ldr x16, pc+20 (addr 0x000000004cd52800)    ;; code: CALL_IC, GENERIC
0x4cd527f0    16  br x16
0x4cd527f4    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd527f8    24  d63f03e0       constant
0x4cd527fc    28  d503201f       constant
0x4cd52800    32  4cd52580       constant
0x4cd52804    36  00000000       constant


RelocInfo (size = 7)
0x4cd527ec  code target (CALL_IC)  (0x4cd52580)
0x4cd527f4  constant pool (size 20)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd569e0     0  ldur x0, [x1, #7]
0x4cd569e4     4  movz x16, #0x1d7
0x4cd569e8     8  ldr x0, [x0, x16]
0x4cd569ec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd57320     0  ldur x0, [x1, #7]
0x4cd57324     4  movz x16, #0x1df
0x4cd57328     8  ldr x0, [x0, x16]
0x4cd5732c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd573a0     0  ldur x0, [x1, #-1]
0x4cd573a4     4  ldur x0, [x0, #47]
0x4cd573a8     8  movz x16, #0x5cf
0x4cd573ac    12  ldr x0, [x0, x16]
0x4cd573b0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 1165)
0x4cd57420     0  movz x2, #0xd2c0
0x4cd57424     4  movk x2, #0x166d, lsl #16
0x4cd57428     8  ldp x3, x0, [x2]
0x4cd5742c    12  adds x16, x3, #0x1c8 (456)
0x4cd57430    16  ccmp x16, x0, #nzCv, lo
0x4cd57434    20  b.hi #+0x234 (addr 0x4cd57668)
0x4cd57438    24  str x16, [x2]
0x4cd5743c    28  orr x3, x3, #0x1
0x4cd57440    32  ldr x0, pc+664 (addr 0x000000004cd576d8)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd57444    36  stur x0, [x3, #-1]
0x4cd57448    40  movz x0, #0x3700000000
0x4cd5744c    44  stur x0, [x3, #7]
0x4cd57450    48  stur x1, [x3, #15]
0x4cd57454    52  stur cp, [x3, #23]
0x4cd57458    56  ldr x0, pc+648 (addr 0x000000004cd576e0)    ;; object: 0x21004519 <the hole>
0x4cd5745c    60  stur x0, [x3, #31]
0x4cd57460    64  ldur x0, [cp, #39]
0x4cd57464    68  stur x0, [x3, #39]
0x4cd57468    72  ldr x0, pc+640 (addr 0x000000004cd576e8)    ;; object: 0x21004241 <undefined>
0x4cd5746c    76  stur x0, [x3, #47]
0x4cd57470    80  ldr x0, pc+640 (addr 0x000000004cd576f0)    ;; object: 0x21004241 <undefined>
0x4cd57474    84  stur x0, [x3, #55]
0x4cd57478    88  ldr x0, pc+640 (addr 0x000000004cd576f8)    ;; object: 0x21004241 <undefined>
0x4cd5747c    92  stur x0, [x3, #63]
0x4cd57480    96  ldr x0, pc+640 (addr 0x000000004cd57700)    ;; object: 0x21004241 <undefined>
0x4cd57484   100  stur x0, [x3, #71]
0x4cd57488   104  ldr x0, pc+640 (addr 0x000000004cd57708)    ;; object: 0x21004241 <undefined>
0x4cd5748c   108  stur x0, [x3, #79]
0x4cd57490   112  ldr x0, pc+640 (addr 0x000000004cd57710)    ;; object: 0x21004241 <undefined>
0x4cd57494   116  stur x0, [x3, #87]
0x4cd57498   120  ldr x0, pc+640 (addr 0x000000004cd57718)    ;; object: 0x21004241 <undefined>
0x4cd5749c   124  stur x0, [x3, #95]
0x4cd574a0   128  ldr x0, pc+640 (addr 0x000000004cd57720)    ;; object: 0x21004241 <undefined>
0x4cd574a4   132  stur x0, [x3, #103]
0x4cd574a8   136  ldr x0, pc+640 (addr 0x000000004cd57728)    ;; object: 0x21004241 <undefined>
0x4cd574ac   140  stur x0, [x3, #111]
0x4cd574b0   144  ldr x0, pc+640 (addr 0x000000004cd57730)    ;; object: 0x21004241 <undefined>
0x4cd574b4   148  stur x0, [x3, #119]
0x4cd574b8   152  ldr x0, pc+640 (addr 0x000000004cd57738)    ;; object: 0x21004241 <undefined>
0x4cd574bc   156  stur x0, [x3, #127]
0x4cd574c0   160  ldr x0, pc+640 (addr 0x000000004cd57740)    ;; object: 0x21004241 <undefined>
0x4cd574c4   164  stur x0, [x3, #135]
0x4cd574c8   168  ldr x0, pc+640 (addr 0x000000004cd57748)    ;; object: 0x21004241 <undefined>
0x4cd574cc   172  stur x0, [x3, #143]
0x4cd574d0   176  ldr x0, pc+640 (addr 0x000000004cd57750)    ;; object: 0x21004241 <undefined>
0x4cd574d4   180  stur x0, [x3, #151]
0x4cd574d8   184  ldr x0, pc+640 (addr 0x000000004cd57758)    ;; object: 0x21004241 <undefined>
0x4cd574dc   188  stur x0, [x3, #159]
0x4cd574e0   192  ldr x0, pc+640 (addr 0x000000004cd57760)    ;; object: 0x21004241 <undefined>
0x4cd574e4   196  stur x0, [x3, #167]
0x4cd574e8   200  ldr x0, pc+640 (addr 0x000000004cd57768)    ;; object: 0x21004241 <undefined>
0x4cd574ec   204  stur x0, [x3, #175]
0x4cd574f0   208  ldr x0, pc+640 (addr 0x000000004cd57770)    ;; object: 0x21004241 <undefined>
0x4cd574f4   212  stur x0, [x3, #183]
0x4cd574f8   216  ldr x0, pc+640 (addr 0x000000004cd57778)    ;; object: 0x21004241 <undefined>
0x4cd574fc   220  stur x0, [x3, #191]
0x4cd57500   224  ldr x0, pc+640 (addr 0x000000004cd57780)    ;; object: 0x21004241 <undefined>
0x4cd57504   228  stur x0, [x3, #199]
0x4cd57508   232  ldr x0, pc+640 (addr 0x000000004cd57788)    ;; object: 0x21004241 <undefined>
0x4cd5750c   236  stur x0, [x3, #207]
0x4cd57510   240  ldr x0, pc+640 (addr 0x000000004cd57790)    ;; object: 0x21004241 <undefined>
0x4cd57514   244  stur x0, [x3, #215]
0x4cd57518   248  ldr x0, pc+640 (addr 0x000000004cd57798)    ;; object: 0x21004241 <undefined>
0x4cd5751c   252  stur x0, [x3, #223]
0x4cd57520   256  ldr x0, pc+640 (addr 0x000000004cd577a0)    ;; object: 0x21004241 <undefined>
0x4cd57524   260  stur x0, [x3, #231]
0x4cd57528   264  ldr x0, pc+640 (addr 0x000000004cd577a8)    ;; object: 0x21004241 <undefined>
0x4cd5752c   268  stur x0, [x3, #239]
0x4cd57530   272  ldr x0, pc+640 (addr 0x000000004cd577b0)    ;; object: 0x21004241 <undefined>
0x4cd57534   276  stur x0, [x3, #247]
0x4cd57538   280  ldr x0, pc+640 (addr 0x000000004cd577b8)    ;; object: 0x21004241 <undefined>
0x4cd5753c   284  stur x0, [x3, #255]
0x4cd57540   288  ldr x0, pc+640 (addr 0x000000004cd577c0)    ;; object: 0x21004241 <undefined>
0x4cd57544   292  movz x16, #0x107
0x4cd57548   296  str x0, [x3, x16]
0x4cd5754c   300  ldr x0, pc+636 (addr 0x000000004cd577c8)    ;; object: 0x21004241 <undefined>
0x4cd57550   304  movz x16, #0x10f
0x4cd57554   308  str x0, [x3, x16]
0x4cd57558   312  ldr x0, pc+632 (addr 0x000000004cd577d0)    ;; object: 0x21004241 <undefined>
0x4cd5755c   316  movz x16, #0x117
0x4cd57560   320  str x0, [x3, x16]
0x4cd57564   324  ldr x0, pc+628 (addr 0x000000004cd577d8)    ;; object: 0x21004241 <undefined>
0x4cd57568   328  movz x16, #0x11f
0x4cd5756c   332  str x0, [x3, x16]
0x4cd57570   336  ldr x0, pc+624 (addr 0x000000004cd577e0)    ;; object: 0x21004241 <undefined>
0x4cd57574   340  movz x16, #0x127
0x4cd57578   344  str x0, [x3, x16]
0x4cd5757c   348  ldr x0, pc+620 (addr 0x000000004cd577e8)    ;; object: 0x21004241 <undefined>
0x4cd57580   352  movz x16, #0x12f
0x4cd57584   356  str x0, [x3, x16]
0x4cd57588   360  ldr x0, pc+616 (addr 0x000000004cd577f0)    ;; object: 0x21004241 <undefined>
0x4cd5758c   364  movz x16, #0x137
0x4cd57590   368  str x0, [x3, x16]
0x4cd57594   372  ldr x0, pc+612 (addr 0x000000004cd577f8)    ;; object: 0x21004241 <undefined>
0x4cd57598   376  movz x16, #0x13f
0x4cd5759c   380  str x0, [x3, x16]
0x4cd575a0   384  ldr x0, pc+608 (addr 0x000000004cd57800)    ;; object: 0x21004241 <undefined>
0x4cd575a4   388  movz x16, #0x147
0x4cd575a8   392  str x0, [x3, x16]
0x4cd575ac   396  ldr x0, pc+604 (addr 0x000000004cd57808)    ;; object: 0x21004241 <undefined>
0x4cd575b0   400  movz x16, #0x14f
0x4cd575b4   404  str x0, [x3, x16]
0x4cd575b8   408  ldr x0, pc+600 (addr 0x000000004cd57810)    ;; object: 0x21004241 <undefined>
0x4cd575bc   412  movz x16, #0x157
0x4cd575c0   416  str x0, [x3, x16]
0x4cd575c4   420  ldr x0, pc+596 (addr 0x000000004cd57818)    ;; object: 0x21004241 <undefined>
0x4cd575c8   424  movz x16, #0x15f
0x4cd575cc   428  str x0, [x3, x16]
0x4cd575d0   432  ldr x0, pc+592 (addr 0x000000004cd57820)    ;; object: 0x21004241 <undefined>
0x4cd575d4   436  movz x16, #0x167
0x4cd575d8   440  str x0, [x3, x16]
0x4cd575dc   444  ldr x0, pc+588 (addr 0x000000004cd57828)    ;; object: 0x21004241 <undefined>
0x4cd575e0   448  movz x16, #0x16f
0x4cd575e4   452  str x0, [x3, x16]
0x4cd575e8   456  ldr x0, pc+584 (addr 0x000000004cd57830)    ;; object: 0x21004241 <undefined>
0x4cd575ec   460  movz x16, #0x177
0x4cd575f0   464  str x0, [x3, x16]
0x4cd575f4   468  ldr x0, pc+580 (addr 0x000000004cd57838)    ;; object: 0x21004241 <undefined>
0x4cd575f8   472  movz x16, #0x17f
0x4cd575fc   476  str x0, [x3, x16]
0x4cd57600   480  ldr x0, pc+576 (addr 0x000000004cd57840)    ;; object: 0x21004241 <undefined>
0x4cd57604   484  movz x16, #0x187
0x4cd57608   488  str x0, [x3, x16]
0x4cd5760c   492  ldr x0, pc+572 (addr 0x000000004cd57848)    ;; object: 0x21004241 <undefined>
0x4cd57610   496  movz x16, #0x18f
0x4cd57614   500  str x0, [x3, x16]
0x4cd57618   504  ldr x0, pc+568 (addr 0x000000004cd57850)    ;; object: 0x21004241 <undefined>
0x4cd5761c   508  movz x16, #0x197
0x4cd57620   512  str x0, [x3, x16]
0x4cd57624   516  ldr x0, pc+564 (addr 0x000000004cd57858)    ;; object: 0x21004241 <undefined>
0x4cd57628   520  movz x16, #0x19f
0x4cd5762c   524  str x0, [x3, x16]
0x4cd57630   528  ldr x0, pc+560 (addr 0x000000004cd57860)    ;; object: 0x21004241 <undefined>
0x4cd57634   532  movz x16, #0x1a7
0x4cd57638   536  str x0, [x3, x16]
0x4cd5763c   540  ldr x0, pc+556 (addr 0x000000004cd57868)    ;; object: 0x21004241 <undefined>
0x4cd57640   544  movz x16, #0x1af
0x4cd57644   548  str x0, [x3, x16]
0x4cd57648   552  ldr x0, pc+552 (addr 0x000000004cd57870)    ;; object: 0x21004241 <undefined>
0x4cd5764c   556  movz x16, #0x1b7
0x4cd57650   560  str x0, [x3, x16]
0x4cd57654   564  ldr x0, pc+548 (addr 0x000000004cd57878)    ;; object: 0x21004241 <undefined>
0x4cd57658   568  movz x16, #0x1bf
0x4cd5765c   572  str x0, [x3, x16]
0x4cd57660   576  mov x0, x3
0x4cd57664   580  ret
0x4cd57668   584  sub csp, jssp, #0x10 (16)
0x4cd5766c   588  stp fp, lr, [jssp, #-16]!
0x4cd57670   592  movz fp, #0xa00000000
0x4cd57674   596  sub csp, jssp, #0x8 (8)
0x4cd57678   600  str fp, [jssp, #-8]!
0x4cd5767c   604  add fp, jssp, #0x8 (8)
0x4cd57680   608  movz x3, #0x0
0x4cd57684   612  mov x16, lr
0x4cd57688   616  ldr x17, pc+504 (addr 0x000000004cd57880)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd5768c   620  blr x17
0x4cd57690   624  movz x0, #0x1c800000000
0x4cd57694   628  movz x10, #0x0
0x4cd57698   632  sub csp, jssp, #0x10 (16)
0x4cd5769c   636  stp x10, x0, [jssp, #-16]!
0x4cd576a0   640  movz x0, #0x2
0x4cd576a4   644  movz x1, #0x5b88
0x4cd576a8   648  movk x1, #0xe2, lsl #16
0x4cd576ac   652  ldr x16, pc+476 (addr 0x000000004cd57888)    ;; code: STUB, CEntryStub, minor: 5
0x4cd576b0   656  blr x16
0x4cd576b4   660  str x0, [jssp, #24]
0x4cd576b8   664  ldr x16, pc+472 (addr 0x000000004cd57890)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd576bc   668  blr x16
0x4cd576c0   672  ldr lr, [jssp, #16]
0x4cd576c4   676  ldp xzr, fp, [jssp], #24
0x4cd576c8   680  b #-0x288 (addr 0x4cd57440)
0x4cd576cc   684  58000e5f       constant pool begin (num_const = 114)    ;; constant pool
0x4cd576d0   688  d63f03e0       constant
0x4cd576d4   692  d503201f       constant
0x4cd576d8   696  2a806149       constant
0x4cd576dc   700  00000000       constant
0x4cd576e0   704  21004519       constant
0x4cd576e4   708  00000000       constant
0x4cd576e8   712  21004241       constant
0x4cd576ec   716  00000000       constant
0x4cd576f0   720  21004241       constant
0x4cd576f4   724  00000000       constant
0x4cd576f8   728  21004241       constant
0x4cd576fc   732  00000000       constant
0x4cd57700   736  21004241       constant
0x4cd57704   740  00000000       constant
0x4cd57708   744  21004241       constant
0x4cd5770c   748  00000000       constant
0x4cd57710   752  21004241       constant
0x4cd57714   756  00000000       constant
0x4cd57718   760  21004241       constant
0x4cd5771c   764  00000000       constant
0x4cd57720   768  21004241       constant
0x4cd57724   772  00000000       constant
0x4cd57728   776  21004241       constant
0x4cd5772c   780  00000000       constant
0x4cd57730   784  21004241       constant
0x4cd57734   788  00000000       constant
0x4cd57738   792  21004241       constant
0x4cd5773c   796  00000000       constant
0x4cd57740   800  21004241       constant
0x4cd57744   804  00000000       constant
0x4cd57748   808  21004241       constant
0x4cd5774c   812  00000000       constant
0x4cd57750   816  21004241       constant
0x4cd57754   820  00000000       constant
0x4cd57758   824  21004241       constant
0x4cd5775c   828  00000000       constant
0x4cd57760   832  21004241       constant
0x4cd57764   836  00000000       constant
0x4cd57768   840  21004241       constant
0x4cd5776c   844  00000000       constant
0x4cd57770   848  21004241       constant
0x4cd57774   852  00000000       constant
0x4cd57778   856  21004241       constant
0x4cd5777c   860  00000000       constant
0x4cd57780   864  21004241       constant
0x4cd57784   868  00000000       constant
0x4cd57788   872  21004241       constant
0x4cd5778c   876  00000000       constant
0x4cd57790   880  21004241       constant
0x4cd57794   884  00000000       constant
0x4cd57798   888  21004241       constant
0x4cd5779c   892  00000000       constant
0x4cd577a0   896  21004241       constant
0x4cd577a4   900  00000000       constant
0x4cd577a8   904  21004241       constant
0x4cd577ac   908  00000000       constant
0x4cd577b0   912  21004241       constant
0x4cd577b4   916  00000000       constant
0x4cd577b8   920  21004241       constant
0x4cd577bc   924  00000000       constant
0x4cd577c0   928  21004241       constant
0x4cd577c4   932  00000000       constant
0x4cd577c8   936  21004241       constant
0x4cd577cc   940  00000000       constant
0x4cd577d0   944  21004241       constant
0x4cd577d4   948  00000000       constant
0x4cd577d8   952  21004241       constant
0x4cd577dc   956  00000000       constant
0x4cd577e0   960  21004241       constant
0x4cd577e4   964  00000000       constant
0x4cd577e8   968  21004241       constant
0x4cd577ec   972  00000000       constant
0x4cd577f0   976  21004241       constant
0x4cd577f4   980  00000000       constant
0x4cd577f8   984  21004241       constant
0x4cd577fc   988  00000000       constant
0x4cd57800   992  21004241       constant
0x4cd57804   996  00000000       constant
0x4cd57808  1000  21004241       constant
0x4cd5780c  1004  00000000       constant
0x4cd57810  1008  21004241       constant
0x4cd57814  1012  00000000       constant
0x4cd57818  1016  21004241       constant
0x4cd5781c  1020  00000000       constant
0x4cd57820  1024  21004241       constant
0x4cd57824  1028  00000000       constant
0x4cd57828  1032  21004241       constant
0x4cd5782c  1036  00000000       constant
0x4cd57830  1040  21004241       constant
0x4cd57834  1044  00000000       constant
0x4cd57838  1048  21004241       constant
0x4cd5783c  1052  00000000       constant
0x4cd57840  1056  21004241       constant
0x4cd57844  1060  00000000       constant
0x4cd57848  1064  21004241       constant
0x4cd5784c  1068  00000000       constant
0x4cd57850  1072  21004241       constant
0x4cd57854  1076  00000000       constant
0x4cd57858  1080  21004241       constant
0x4cd5785c  1084  00000000       constant
0x4cd57860  1088  21004241       constant
0x4cd57864  1092  00000000       constant
0x4cd57868  1096  21004241       constant
0x4cd5786c  1100  00000000       constant
0x4cd57870  1104  21004241       constant
0x4cd57874  1108  00000000       constant
0x4cd57878  1112  21004241       constant
0x4cd5787c  1116  00000000       constant
0x4cd57880  1120  4cd06820       constant
0x4cd57884  1124  00000000       constant
0x4cd57888  1128  4cd06260       constant
0x4cd5788c  1132  00000000       constant
0x4cd57890  1136  4cd068e0       constant
0x4cd57894  1140  00000000       constant


Safepoints (size = 21)
0x4cd576b4   660  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 62)
0x4cd57440  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd57458  embedded object  (0x21004519 <the hole>)
0x4cd57468  embedded object  (0x21004241 <undefined>)
0x4cd57470  embedded object  (0x21004241 <undefined>)
0x4cd57478  embedded object  (0x21004241 <undefined>)
0x4cd57480  embedded object  (0x21004241 <undefined>)
0x4cd57488  embedded object  (0x21004241 <undefined>)
0x4cd57490  embedded object  (0x21004241 <undefined>)
0x4cd57498  embedded object  (0x21004241 <undefined>)
0x4cd574a0  embedded object  (0x21004241 <undefined>)
0x4cd574a8  embedded object  (0x21004241 <undefined>)
0x4cd574b0  embedded object  (0x21004241 <undefined>)
0x4cd574b8  embedded object  (0x21004241 <undefined>)
0x4cd574c0  embedded object  (0x21004241 <undefined>)
0x4cd574c8  embedded object  (0x21004241 <undefined>)
0x4cd574d0  embedded object  (0x21004241 <undefined>)
0x4cd574d8  embedded object  (0x21004241 <undefined>)
0x4cd574e0  embedded object  (0x21004241 <undefined>)
0x4cd574e8  embedded object  (0x21004241 <undefined>)
0x4cd574f0  embedded object  (0x21004241 <undefined>)
0x4cd574f8  embedded object  (0x21004241 <undefined>)
0x4cd57500  embedded object  (0x21004241 <undefined>)
0x4cd57508  embedded object  (0x21004241 <undefined>)
0x4cd57510  embedded object  (0x21004241 <undefined>)
0x4cd57518  embedded object  (0x21004241 <undefined>)
0x4cd57520  embedded object  (0x21004241 <undefined>)
0x4cd57528  embedded object  (0x21004241 <undefined>)
0x4cd57530  embedded object  (0x21004241 <undefined>)
0x4cd57538  embedded object  (0x21004241 <undefined>)
0x4cd57540  embedded object  (0x21004241 <undefined>)
0x4cd5754c  embedded object  (0x21004241 <undefined>)
0x4cd57558  embedded object  (0x21004241 <undefined>)
0x4cd57564  embedded object  (0x21004241 <undefined>)
0x4cd57570  embedded object  (0x21004241 <undefined>)
0x4cd5757c  embedded object  (0x21004241 <undefined>)
0x4cd57588  embedded object  (0x21004241 <undefined>)
0x4cd57594  embedded object  (0x21004241 <undefined>)
0x4cd575a0  embedded object  (0x21004241 <undefined>)
0x4cd575ac  embedded object  (0x21004241 <undefined>)
0x4cd575b8  embedded object  (0x21004241 <undefined>)
0x4cd575c4  embedded object  (0x21004241 <undefined>)
0x4cd575d0  embedded object  (0x21004241 <undefined>)
0x4cd575dc  embedded object  (0x21004241 <undefined>)
0x4cd575e8  embedded object  (0x21004241 <undefined>)
0x4cd575f4  embedded object  (0x21004241 <undefined>)
0x4cd57600  embedded object  (0x21004241 <undefined>)
0x4cd5760c  embedded object  (0x21004241 <undefined>)
0x4cd57618  embedded object  (0x21004241 <undefined>)
0x4cd57624  embedded object  (0x21004241 <undefined>)
0x4cd57630  embedded object  (0x21004241 <undefined>)
0x4cd5763c  embedded object  (0x21004241 <undefined>)
0x4cd57648  embedded object  (0x21004241 <undefined>)
0x4cd57654  embedded object  (0x21004241 <undefined>)
0x4cd57688  code target (STUB)  (0x4cd06820)
0x4cd576ac  code target (STUB)  (0x4cd06260)
0x4cd576b8  code target (STUB)  (0x4cd068e0)
0x4cd576cc  constant pool (size 460)


kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 168)
0x4cd59c60     0  mov x6, x0
0x4cd59c64     4  tbnz w6, #0, #+0x5c (addr 0x4cd59cc0)
0x4cd59c68     8  ldur x3, [x1, #7]
0x4cd59c6c    12  stur x6, [x3, #23]
0x4cd59c70    16  stur x5, [x1, #-1]
0x4cd59c74    20  tbz w5, #0, #+0x34 (addr 0x4cd59ca8)
0x4cd59c78    24  sub x2, x1, #0x1 (1)
0x4cd59c7c    28  and x5, x5, #0xfffffffffff00000
0x4cd59c80    32  ldr x5, [x5, #8]
0x4cd59c84    36  tbz w5, #1, #+0x24 (addr 0x4cd59ca8)
0x4cd59c88    40  and x5, x1, #0xfffffffffff00000
0x4cd59c8c    44  ldr x5, [x5, #8]
0x4cd59c90    48  tbz w5, #2, #+0x18 (addr 0x4cd59ca8)
0x4cd59c94    52  sub csp, jssp, #0x8 (8)
0x4cd59c98    56  str lr, [jssp, #-8]!
0x4cd59c9c    60  ldr x16, pc+28 (addr 0x000000004cd59cb8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd59ca0    64  blr x16
0x4cd59ca4    68  ldr lr, [jssp], #8
0x4cd59ca8    72  ret
0x4cd59cac    76  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd59cb0    80  d63f03e0       constant
0x4cd59cb4    84  d503201f       constant
0x4cd59cb8    88  4cd38080       constant
0x4cd59cbc    92  00000000       constant
0x4cd59cc0    96  movz x16, #0x0
0x4cd59cc4   100  sub csp, jssp, #0x10 (16)
0x4cd59cc8   104  stp fp, lr, [jssp, #-16]!
0x4cd59ccc   108  bl #+0x4 (addr 0x4cd59cd0)
0x4cd59cd0   112  movz x17, #0xa00000000
0x4cd59cd4   116  sub csp, jssp, #0x10 (16)
0x4cd59cd8   120  stp x17, cp, [jssp, #-16]!
0x4cd59cdc   124  add fp, jssp, #0x10 (16)
0x4cd59ce0   128  ldr x17, pc+24 (addr 0x000000004cd59cf8)    ;; lazy deoptimization bailout 0
0x4cd59ce4   132  add x17, x17, x16
0x4cd59ce8   136  br x17
0x4cd59cec   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd59cf0   144  d63f03e0       constant
0x4cd59cf4   148  d503201f       constant
0x4cd59cf8   152  4cb06000       constant
0x4cd59cfc   156  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cd59c9c  code target (STUB)  (0x4cd38080)
0x4cd59cac  constant pool (size 20)
0x4cd59ce0  runtime entry
0x4cd59cec  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = update
compiler = unknown
Instructions (size = 128)
0x4cd59d80     0  sub csp, jssp, #0x8 (8)
0x4cd59d84     4  str x3, [jssp, #-8]!
0x4cd59d88     8  sub csp, jssp, #0x8 (8)
0x4cd59d8c    12  str x4, [jssp, #-8]!
0x4cd59d90    16  ldr x5, pc+72 (addr 0x000000004cd59dd8)    ;; object: 0x21088701 WeakCell for 0x2a810d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd59d94    20  ldur x5, [x5, #7]
0x4cd59d98    24  tbz w5, #0, #+0x20 (addr 0x4cd59db8)
0x4cd59d9c    28  ldursw x4, [x5, #15]
0x4cd59da0    32  tbnz w4, #23, #+0x18 (addr 0x4cd59db8)
0x4cd59da4    36  ldr x4, [jssp], #8
0x4cd59da8    40  ldr x3, [jssp], #8
0x4cd59dac    44  ldr x2, pc+52 (addr 0x000000004cd59de0)    ;; object: 0x21083a31 <String[6]: update>
0x4cd59db0    48  ldr x16, pc+56 (addr 0x000000004cd59de8)    ;; code: HANDLER, StoreTransitionStub, minor: 172035
0x4cd59db4    52  br x16
0x4cd59db8    56  ldr x2, pc+56 (addr 0x000000004cd59df0)    ;; object: 0x21083a31 <String[6]: update>
0x4cd59dbc    60  ldr x4, [jssp], #8
0x4cd59dc0    64  ldr x3, [jssp], #8
0x4cd59dc4    68  ldr x16, pc+52 (addr 0x000000004cd59df8)    ;; code: BUILTIN
0x4cd59dc8    72  br x16
0x4cd59dcc    76  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0x4cd59dd0    80  d63f03e0       constant
0x4cd59dd4    84  d503201f       constant
0x4cd59dd8    88  21088701       constant
0x4cd59ddc    92  00000000       constant
0x4cd59de0    96  21083a31       constant
0x4cd59de4   100  00000000       constant
0x4cd59de8   104  4cd59c60       constant
0x4cd59dec   108  00000000       constant
0x4cd59df0   112  21083a31       constant
0x4cd59df4   116  00000000       constant
0x4cd59df8   120  4cd22420       constant
0x4cd59dfc   124  00000000       constant


RelocInfo (size = 11)
0x4cd59d90  embedded object  (0x21088701 WeakCell for 0x2a810d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd59dac  embedded object  (0x21083a31 <String[6]: update>)
0x4cd59db0  code target (HANDLER)  (0x4cd59c60)
0x4cd59db8  embedded object  (0x21083a31 <String[6]: update>)
0x4cd59dc4  code target (BUILTIN)  (0x4cd22420)
0x4cd59dcc  constant pool (size 52)

kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 168)
0x4cd59e60     0  mov x6, x0
0x4cd59e64     4  tbnz w6, #0, #+0x5c (addr 0x4cd59ec0)
0x4cd59e68     8  ldur x3, [x1, #7]
0x4cd59e6c    12  stur x6, [x3, #31]
0x4cd59e70    16  stur x5, [x1, #-1]
0x4cd59e74    20  tbz w5, #0, #+0x34 (addr 0x4cd59ea8)
0x4cd59e78    24  sub x2, x1, #0x1 (1)
0x4cd59e7c    28  and x5, x5, #0xfffffffffff00000
0x4cd59e80    32  ldr x5, [x5, #8]
0x4cd59e84    36  tbz w5, #1, #+0x24 (addr 0x4cd59ea8)
0x4cd59e88    40  and x5, x1, #0xfffffffffff00000
0x4cd59e8c    44  ldr x5, [x5, #8]
0x4cd59e90    48  tbz w5, #2, #+0x18 (addr 0x4cd59ea8)
0x4cd59e94    52  sub csp, jssp, #0x8 (8)
0x4cd59e98    56  str lr, [jssp, #-8]!
0x4cd59e9c    60  ldr x16, pc+28 (addr 0x000000004cd59eb8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd59ea0    64  blr x16
0x4cd59ea4    68  ldr lr, [jssp], #8
0x4cd59ea8    72  ret
0x4cd59eac    76  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd59eb0    80  d63f03e0       constant
0x4cd59eb4    84  d503201f       constant
0x4cd59eb8    88  4cd38080       constant
0x4cd59ebc    92  00000000       constant
0x4cd59ec0    96  movz x16, #0x0
0x4cd59ec4   100  sub csp, jssp, #0x10 (16)
0x4cd59ec8   104  stp fp, lr, [jssp, #-16]!
0x4cd59ecc   108  bl #+0x4 (addr 0x4cd59ed0)
0x4cd59ed0   112  movz x17, #0xa00000000
0x4cd59ed4   116  sub csp, jssp, #0x10 (16)
0x4cd59ed8   120  stp x17, cp, [jssp, #-16]!
0x4cd59edc   124  add fp, jssp, #0x10 (16)
0x4cd59ee0   128  ldr x17, pc+24 (addr 0x000000004cd59ef8)    ;; lazy deoptimization bailout 0
0x4cd59ee4   132  add x17, x17, x16
0x4cd59ee8   136  br x17
0x4cd59eec   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd59ef0   144  d63f03e0       constant
0x4cd59ef4   148  d503201f       constant
0x4cd59ef8   152  4cb06000       constant
0x4cd59efc   156  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cd59e9c  code target (STUB)  (0x4cd38080)
0x4cd59eac  constant pool (size 20)
0x4cd59ee0  runtime entry
0x4cd59eec  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = delete
compiler = unknown
Instructions (size = 128)
0x4cd59f80     0  sub csp, jssp, #0x8 (8)
0x4cd59f84     4  str x3, [jssp, #-8]!
0x4cd59f88     8  sub csp, jssp, #0x8 (8)
0x4cd59f8c    12  str x4, [jssp, #-8]!
0x4cd59f90    16  ldr x5, pc+72 (addr 0x000000004cd59fd8)    ;; object: 0x21088809 WeakCell for 0x2a810dd9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd59f94    20  ldur x5, [x5, #7]
0x4cd59f98    24  tbz w5, #0, #+0x20 (addr 0x4cd59fb8)
0x4cd59f9c    28  ldursw x4, [x5, #15]
0x4cd59fa0    32  tbnz w4, #23, #+0x18 (addr 0x4cd59fb8)
0x4cd59fa4    36  ldr x4, [jssp], #8
0x4cd59fa8    40  ldr x3, [jssp], #8
0x4cd59fac    44  ldr x2, pc+52 (addr 0x000000004cd59fe0)    ;; object: 0x21083a51 <String[6]: delete>
0x4cd59fb0    48  ldr x16, pc+56 (addr 0x000000004cd59fe8)    ;; code: HANDLER, StoreTransitionStub, minor: 172036
0x4cd59fb4    52  br x16
0x4cd59fb8    56  ldr x2, pc+56 (addr 0x000000004cd59ff0)    ;; object: 0x21083a51 <String[6]: delete>
0x4cd59fbc    60  ldr x4, [jssp], #8
0x4cd59fc0    64  ldr x3, [jssp], #8
0x4cd59fc4    68  ldr x16, pc+52 (addr 0x000000004cd59ff8)    ;; code: BUILTIN
0x4cd59fc8    72  br x16
0x4cd59fcc    76  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0x4cd59fd0    80  d63f03e0       constant
0x4cd59fd4    84  d503201f       constant
0x4cd59fd8    88  21088809       constant
0x4cd59fdc    92  00000000       constant
0x4cd59fe0    96  21083a51       constant
0x4cd59fe4   100  00000000       constant
0x4cd59fe8   104  4cd59e60       constant
0x4cd59fec   108  00000000       constant
0x4cd59ff0   112  21083a51       constant
0x4cd59ff4   116  00000000       constant
0x4cd59ff8   120  4cd22420       constant
0x4cd59ffc   124  00000000       constant


RelocInfo (size = 11)
0x4cd59f90  embedded object  (0x21088809 WeakCell for 0x2a810dd9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd59fac  embedded object  (0x21083a51 <String[6]: delete>)
0x4cd59fb0  code target (HANDLER)  (0x4cd59e60)
0x4cd59fb8  embedded object  (0x21083a51 <String[6]: delete>)
0x4cd59fc4  code target (BUILTIN)  (0x4cd22420)
0x4cd59fcc  constant pool (size 52)

kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 549)
0x4cd5a060     0  ldur x6, [x1, #7]
0x4cd5a064     4  ldur w7, [x6, #11]
0x4cd5a068     8  adds w8, w7, #0x3 (3)
0x4cd5a06c    12  b.vs #+0x1a4 (addr 0x4cd5a210)
0x4cd5a070    16  movz w16, #0x95ff
0x4cd5a074    20  cmp w8, w16, lsl #1
0x4cd5a078    24  b.hs #+0x1a8 (addr 0x4cd5a220)
0x4cd5a07c    28  lsl x9, x8, #32
0x4cd5a080    32  lsl w10, w8, #3
0x4cd5a084    36  add w10, w10, #0x10 (16)
0x4cd5a088    40  sxtw x10, w10
0x4cd5a08c    44  movz x11, #0xd2c0
0x4cd5a090    48  movk x11, #0x166d, lsl #16
0x4cd5a094    52  ldp x13, x16, [x11]
0x4cd5a098    56  adds x12, x13, x10
0x4cd5a09c    60  ccmp x12, x16, #nzCv, lo
0x4cd5a0a0    64  b.hi #+0xc8 (addr 0x4cd5a168)
0x4cd5a0a4    68  str x12, [x11]
0x4cd5a0a8    72  orr x13, x13, #0x1
0x4cd5a0ac    76  ldr x10, pc+300 (addr 0x000000004cd5a1d8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd5a0b0    80  stur x10, [x13, #-1]
0x4cd5a0b4    84  stur x9, [x13, #7]
0x4cd5a0b8    88  cmp w7, w8
0x4cd5a0bc    92  b.ge #+0x18 (addr 0x4cd5a0d4)
0x4cd5a0c0    96  sub w8, w8, #0x1 (1)
0x4cd5a0c4   100  ldr x9, pc+284 (addr 0x000000004cd5a1e0)    ;; object: 0x21004241 <undefined>
0x4cd5a0c8   104  add x10, x13, #0xf (15)
0x4cd5a0cc   108  str x9, [x10, w8, sxtw #3]
0x4cd5a0d0   112  b #-0x18 (addr 0x4cd5a0b8)
0x4cd5a0d4   116  cmp w7, #0x0 (0)
0x4cd5a0d8   120  b.le #+0x1c (addr 0x4cd5a0f4)
0x4cd5a0dc   124  sub w7, w7, #0x1 (1)
0x4cd5a0e0   128  add x8, x6, #0xf (15)
0x4cd5a0e4   132  ldr x9, [x8, w7, sxtw #3]
0x4cd5a0e8   136  add x8, x13, #0xf (15)
0x4cd5a0ec   140  str x9, [x8, w7, sxtw #3]
0x4cd5a0f0   144  b #-0x1c (addr 0x4cd5a0d4)
0x4cd5a0f4   148  stur x13, [x1, #7]
0x4cd5a0f8   152  add x6, x1, #0x7 (7)
0x4cd5a0fc   156  and x13, x1, #0xfffffffffff00000
0x4cd5a100   160  ldr x13, [x13, #8]
0x4cd5a104   164  tbz w13, #2, #+0x18 (addr 0x4cd5a11c)
0x4cd5a108   168  sub csp, jssp, #0x8 (8)
0x4cd5a10c   172  str lr, [jssp, #-8]!
0x4cd5a110   176  ldr x16, pc+216 (addr 0x000000004cd5a1e8)    ;; code: STUB, RecordWriteStub, minor: 72097
0x4cd5a114   180  blr x16
0x4cd5a118   184  ldr lr, [jssp], #8
0x4cd5a11c   188  mov x6, x0
0x4cd5a120   192  tbnz w6, #0, #+0x110 (addr 0x4cd5a230)
0x4cd5a124   196  ldur x3, [x1, #7]
0x4cd5a128   200  stur x6, [x3, #39]
0x4cd5a12c   204  stur x5, [x1, #-1]
0x4cd5a130   208  tbz w5, #0, #+0x34 (addr 0x4cd5a164)
0x4cd5a134   212  sub x2, x1, #0x1 (1)
0x4cd5a138   216  and x5, x5, #0xfffffffffff00000
0x4cd5a13c   220  ldr x5, [x5, #8]
0x4cd5a140   224  tbz w5, #1, #+0x24 (addr 0x4cd5a164)
0x4cd5a144   228  and x5, x1, #0xfffffffffff00000
0x4cd5a148   232  ldr x5, [x5, #8]
0x4cd5a14c   236  tbz w5, #2, #+0x18 (addr 0x4cd5a164)
0x4cd5a150   240  sub csp, jssp, #0x8 (8)
0x4cd5a154   244  str lr, [jssp, #-8]!
0x4cd5a158   248  ldr x16, pc+152 (addr 0x000000004cd5a1f0)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd5a15c   252  blr x16
0x4cd5a160   256  ldr lr, [jssp], #8
0x4cd5a164   260  ret
0x4cd5a168   264  sub csp, jssp, #0x10 (16)
0x4cd5a16c   268  stp fp, lr, [jssp, #-16]!
0x4cd5a170   272  movz fp, #0xa00000000
0x4cd5a174   276  sub csp, jssp, #0x8 (8)
0x4cd5a178   280  str fp, [jssp, #-8]!
0x4cd5a17c   284  add fp, jssp, #0x8 (8)
0x4cd5a180   288  movz x13, #0x0
0x4cd5a184   292  mov x16, lr
0x4cd5a188   296  ldr x17, pc+112 (addr 0x000000004cd5a1f8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd5a18c   300  blr x17
0x4cd5a190   304  lsl x0, x10, #32
0x4cd5a194   308  movz x10, #0x0
0x4cd5a198   312  sub csp, jssp, #0x10 (16)
0x4cd5a19c   316  stp x10, x0, [jssp, #-16]!
0x4cd5a1a0   320  movz x0, #0x2
0x4cd5a1a4   324  movz x1, #0x5b88
0x4cd5a1a8   328  movk x1, #0xe2, lsl #16
0x4cd5a1ac   332  ldr x16, pc+84 (addr 0x000000004cd5a200)    ;; code: STUB, CEntryStub, minor: 5
0x4cd5a1b0   336  blr x16
0x4cd5a1b4   340  str x0, [jssp, #104]
0x4cd5a1b8   344  ldr x16, pc+80 (addr 0x000000004cd5a208)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd5a1bc   348  blr x16
0x4cd5a1c0   352  ldr lr, [jssp, #16]
0x4cd5a1c4   356  ldp xzr, fp, [jssp], #24
0x4cd5a1c8   360  b #-0x11c (addr 0x4cd5a0ac)
0x4cd5a1cc   364  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd5a1d0   368  d63f03e0       constant
0x4cd5a1d4   372  d503201f       constant
0x4cd5a1d8   376  2a804259       constant
0x4cd5a1dc   380  00000000       constant
0x4cd5a1e0   384  21004241       constant
0x4cd5a1e4   388  00000000       constant
0x4cd5a1e8   392  4cd370c0       constant
0x4cd5a1ec   396  00000000       constant
0x4cd5a1f0   400  4cd38080       constant
0x4cd5a1f4   404  00000000       constant
0x4cd5a1f8   408  4cd06820       constant
0x4cd5a1fc   412  00000000       constant
0x4cd5a200   416  4cd06260       constant
0x4cd5a204   420  00000000       constant
0x4cd5a208   424  4cd068e0       constant
0x4cd5a20c   428  00000000       constant
0x4cd5a210   432  movz x16, #0x0
0x4cd5a214   436  sub csp, jssp, #0x10 (16)
0x4cd5a218   440  stp fp, lr, [jssp, #-16]!
0x4cd5a21c   444  bl #+0x24 (addr 0x4cd5a240)
0x4cd5a220   448  movz x16, #0x8
0x4cd5a224   452  sub csp, jssp, #0x10 (16)
0x4cd5a228   456  stp fp, lr, [jssp, #-16]!
0x4cd5a22c   460  bl #+0x14 (addr 0x4cd5a240)
0x4cd5a230   464  movz x16, #0x10
0x4cd5a234   468  sub csp, jssp, #0x10 (16)
0x4cd5a238   472  stp fp, lr, [jssp, #-16]!
0x4cd5a23c   476  bl #+0x4 (addr 0x4cd5a240)
0x4cd5a240   480  movz x17, #0xa00000000
0x4cd5a244   484  sub csp, jssp, #0x10 (16)
0x4cd5a248   488  stp x17, cp, [jssp, #-16]!
0x4cd5a24c   492  add fp, jssp, #0x10 (16)
0x4cd5a250   496  ldr x17, pc+24 (addr 0x000000004cd5a268)    ;; lazy deoptimization bailout 0
0x4cd5a254   500  add x17, x17, x16
0x4cd5a258   504  br x17
0x4cd5a25c   508  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd5a260   512  d63f03e0       constant
0x4cd5a264   516  d503201f       constant
0x4cd5a268   520  4cb06000       constant
0x4cd5a26c   524  00000000       constant


Safepoints (size = 21)
0x4cd5a1b4   340  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 29)
0x4cd5a0ac  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd5a0c4  embedded object  (0x21004241 <undefined>)
0x4cd5a110  code target (STUB)  (0x4cd370c0)
0x4cd5a158  code target (STUB)  (0x4cd38080)
0x4cd5a188  code target (STUB)  (0x4cd06820)
0x4cd5a1ac  code target (STUB)  (0x4cd06260)
0x4cd5a1b8  code target (STUB)  (0x4cd068e0)
0x4cd5a1cc  constant pool (size 68)
0x4cd5a250  runtime entry
0x4cd5a25c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = setPrototype
compiler = unknown
Instructions (size = 128)
0x4cd5a300     0  sub csp, jssp, #0x8 (8)
0x4cd5a304     4  str x3, [jssp, #-8]!
0x4cd5a308     8  sub csp, jssp, #0x8 (8)
0x4cd5a30c    12  str x4, [jssp, #-8]!
0x4cd5a310    16  ldr x5, pc+72 (addr 0x000000004cd5a358)    ;; object: 0x21088911 WeakCell for 0x2a810e31 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd5a314    20  ldur x5, [x5, #7]
0x4cd5a318    24  tbz w5, #0, #+0x20 (addr 0x4cd5a338)
0x4cd5a31c    28  ldursw x4, [x5, #15]
0x4cd5a320    32  tbnz w4, #23, #+0x18 (addr 0x4cd5a338)
0x4cd5a324    36  ldr x4, [jssp], #8
0x4cd5a328    40  ldr x3, [jssp], #8
0x4cd5a32c    44  ldr x2, pc+52 (addr 0x000000004cd5a360)    ;; object: 0x21083a71 <String[12]: setPrototype>
0x4cd5a330    48  ldr x16, pc+56 (addr 0x000000004cd5a368)    ;; code: HANDLER, StoreTransitionStub, minor: 303109
0x4cd5a334    52  br x16
0x4cd5a338    56  ldr x2, pc+56 (addr 0x000000004cd5a370)    ;; object: 0x21083a71 <String[12]: setPrototype>
0x4cd5a33c    60  ldr x4, [jssp], #8
0x4cd5a340    64  ldr x3, [jssp], #8
0x4cd5a344    68  ldr x16, pc+52 (addr 0x000000004cd5a378)    ;; code: BUILTIN
0x4cd5a348    72  br x16
0x4cd5a34c    76  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0x4cd5a350    80  d63f03e0       constant
0x4cd5a354    84  d503201f       constant
0x4cd5a358    88  21088911       constant
0x4cd5a35c    92  00000000       constant
0x4cd5a360    96  21083a71       constant
0x4cd5a364   100  00000000       constant
0x4cd5a368   104  4cd5a060       constant
0x4cd5a36c   108  00000000       constant
0x4cd5a370   112  21083a71       constant
0x4cd5a374   116  00000000       constant
0x4cd5a378   120  4cd22420       constant
0x4cd5a37c   124  00000000       constant


RelocInfo (size = 11)
0x4cd5a310  embedded object  (0x21088911 WeakCell for 0x2a810e31 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd5a32c  embedded object  (0x21083a71 <String[12]: setPrototype>)
0x4cd5a330  code target (HANDLER)  (0x4cd5a060)
0x4cd5a338  embedded object  (0x21083a71 <String[12]: setPrototype>)
0x4cd5a344  code target (BUILTIN)  (0x4cd22420)
0x4cd5a34c  constant pool (size 52)

kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 168)
0x4cd5a3e0     0  mov x6, x0
0x4cd5a3e4     4  tbnz w6, #0, #+0x5c (addr 0x4cd5a440)
0x4cd5a3e8     8  ldur x3, [x1, #7]
0x4cd5a3ec    12  stur x6, [x3, #47]
0x4cd5a3f0    16  stur x5, [x1, #-1]
0x4cd5a3f4    20  tbz w5, #0, #+0x34 (addr 0x4cd5a428)
0x4cd5a3f8    24  sub x2, x1, #0x1 (1)
0x4cd5a3fc    28  and x5, x5, #0xfffffffffff00000
0x4cd5a400    32  ldr x5, [x5, #8]
0x4cd5a404    36  tbz w5, #1, #+0x24 (addr 0x4cd5a428)
0x4cd5a408    40  and x5, x1, #0xfffffffffff00000
0x4cd5a40c    44  ldr x5, [x5, #8]
0x4cd5a410    48  tbz w5, #2, #+0x18 (addr 0x4cd5a428)
0x4cd5a414    52  sub csp, jssp, #0x8 (8)
0x4cd5a418    56  str lr, [jssp, #-8]!
0x4cd5a41c    60  ldr x16, pc+28 (addr 0x000000004cd5a438)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd5a420    64  blr x16
0x4cd5a424    68  ldr lr, [jssp], #8
0x4cd5a428    72  ret
0x4cd5a42c    76  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd5a430    80  d63f03e0       constant
0x4cd5a434    84  d503201f       constant
0x4cd5a438    88  4cd38080       constant
0x4cd5a43c    92  00000000       constant
0x4cd5a440    96  movz x16, #0x0
0x4cd5a444   100  sub csp, jssp, #0x10 (16)
0x4cd5a448   104  stp fp, lr, [jssp, #-16]!
0x4cd5a44c   108  bl #+0x4 (addr 0x4cd5a450)
0x4cd5a450   112  movz x17, #0xa00000000
0x4cd5a454   116  sub csp, jssp, #0x10 (16)
0x4cd5a458   120  stp x17, cp, [jssp, #-16]!
0x4cd5a45c   124  add fp, jssp, #0x10 (16)
0x4cd5a460   128  ldr x17, pc+24 (addr 0x000000004cd5a478)    ;; lazy deoptimization bailout 0
0x4cd5a464   132  add x17, x17, x16
0x4cd5a468   136  br x17
0x4cd5a46c   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd5a470   144  d63f03e0       constant
0x4cd5a474   148  d503201f       constant
0x4cd5a478   152  4cb06000       constant
0x4cd5a47c   156  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cd5a41c  code target (STUB)  (0x4cd38080)
0x4cd5a42c  constant pool (size 20)
0x4cd5a460  runtime entry
0x4cd5a46c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = reconfigure
compiler = unknown
Instructions (size = 128)
0x4cd5a500     0  sub csp, jssp, #0x8 (8)
0x4cd5a504     4  str x3, [jssp, #-8]!
0x4cd5a508     8  sub csp, jssp, #0x8 (8)
0x4cd5a50c    12  str x4, [jssp, #-8]!
0x4cd5a510    16  ldr x5, pc+72 (addr 0x000000004cd5a558)    ;; object: 0x21088a91 WeakCell for 0x2a810e89 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd5a514    20  ldur x5, [x5, #7]
0x4cd5a518    24  tbz w5, #0, #+0x20 (addr 0x4cd5a538)
0x4cd5a51c    28  ldursw x4, [x5, #15]
0x4cd5a520    32  tbnz w4, #23, #+0x18 (addr 0x4cd5a538)
0x4cd5a524    36  ldr x4, [jssp], #8
0x4cd5a528    40  ldr x3, [jssp], #8
0x4cd5a52c    44  ldr x2, pc+52 (addr 0x000000004cd5a560)    ;; object: 0x21083a99 <String[11]: reconfigure>
0x4cd5a530    48  ldr x16, pc+56 (addr 0x000000004cd5a568)    ;; code: HANDLER, StoreTransitionStub, minor: 172038
0x4cd5a534    52  br x16
0x4cd5a538    56  ldr x2, pc+56 (addr 0x000000004cd5a570)    ;; object: 0x21083a99 <String[11]: reconfigure>
0x4cd5a53c    60  ldr x4, [jssp], #8
0x4cd5a540    64  ldr x3, [jssp], #8
0x4cd5a544    68  ldr x16, pc+52 (addr 0x000000004cd5a578)    ;; code: BUILTIN
0x4cd5a548    72  br x16
0x4cd5a54c    76  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0x4cd5a550    80  d63f03e0       constant
0x4cd5a554    84  d503201f       constant
0x4cd5a558    88  21088a91       constant
0x4cd5a55c    92  00000000       constant
0x4cd5a560    96  21083a99       constant
0x4cd5a564   100  00000000       constant
0x4cd5a568   104  4cd5a3e0       constant
0x4cd5a56c   108  00000000       constant
0x4cd5a570   112  21083a99       constant
0x4cd5a574   116  00000000       constant
0x4cd5a578   120  4cd22420       constant
0x4cd5a57c   124  00000000       constant


RelocInfo (size = 11)
0x4cd5a510  embedded object  (0x21088a91 WeakCell for 0x2a810e89 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd5a52c  embedded object  (0x21083a99 <String[11]: reconfigure>)
0x4cd5a530  code target (HANDLER)  (0x4cd5a3e0)
0x4cd5a538  embedded object  (0x21083a99 <String[11]: reconfigure>)
0x4cd5a544  code target (BUILTIN)  (0x4cd22420)
0x4cd5a54c  constant pool (size 52)

kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 168)
0x4cd5a5e0     0  mov x6, x0
0x4cd5a5e4     4  tbnz w6, #0, #+0x5c (addr 0x4cd5a640)
0x4cd5a5e8     8  ldur x3, [x1, #7]
0x4cd5a5ec    12  stur x6, [x3, #55]
0x4cd5a5f0    16  stur x5, [x1, #-1]
0x4cd5a5f4    20  tbz w5, #0, #+0x34 (addr 0x4cd5a628)
0x4cd5a5f8    24  sub x2, x1, #0x1 (1)
0x4cd5a5fc    28  and x5, x5, #0xfffffffffff00000
0x4cd5a600    32  ldr x5, [x5, #8]
0x4cd5a604    36  tbz w5, #1, #+0x24 (addr 0x4cd5a628)
0x4cd5a608    40  and x5, x1, #0xfffffffffff00000
0x4cd5a60c    44  ldr x5, [x5, #8]
0x4cd5a610    48  tbz w5, #2, #+0x18 (addr 0x4cd5a628)
0x4cd5a614    52  sub csp, jssp, #0x8 (8)
0x4cd5a618    56  str lr, [jssp, #-8]!
0x4cd5a61c    60  ldr x16, pc+28 (addr 0x000000004cd5a638)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd5a620    64  blr x16
0x4cd5a624    68  ldr lr, [jssp], #8
0x4cd5a628    72  ret
0x4cd5a62c    76  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd5a630    80  d63f03e0       constant
0x4cd5a634    84  d503201f       constant
0x4cd5a638    88  4cd38080       constant
0x4cd5a63c    92  00000000       constant
0x4cd5a640    96  movz x16, #0x0
0x4cd5a644   100  sub csp, jssp, #0x10 (16)
0x4cd5a648   104  stp fp, lr, [jssp, #-16]!
0x4cd5a64c   108  bl #+0x4 (addr 0x4cd5a650)
0x4cd5a650   112  movz x17, #0xa00000000
0x4cd5a654   116  sub csp, jssp, #0x10 (16)
0x4cd5a658   120  stp x17, cp, [jssp, #-16]!
0x4cd5a65c   124  add fp, jssp, #0x10 (16)
0x4cd5a660   128  ldr x17, pc+24 (addr 0x000000004cd5a678)    ;; lazy deoptimization bailout 0
0x4cd5a664   132  add x17, x17, x16
0x4cd5a668   136  br x17
0x4cd5a66c   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd5a670   144  d63f03e0       constant
0x4cd5a674   148  d503201f       constant
0x4cd5a678   152  4cb06000       constant
0x4cd5a67c   156  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cd5a61c  code target (STUB)  (0x4cd38080)
0x4cd5a62c  constant pool (size 20)
0x4cd5a660  runtime entry
0x4cd5a66c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = preventExtensions
compiler = unknown
Instructions (size = 128)
0x4cd5a700     0  sub csp, jssp, #0x8 (8)
0x4cd5a704     4  str x3, [jssp, #-8]!
0x4cd5a708     8  sub csp, jssp, #0x8 (8)
0x4cd5a70c    12  str x4, [jssp, #-8]!
0x4cd5a710    16  ldr x5, pc+72 (addr 0x000000004cd5a758)    ;; object: 0x21088b99 WeakCell for 0x2a810ee1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd5a714    20  ldur x5, [x5, #7]
0x4cd5a718    24  tbz w5, #0, #+0x20 (addr 0x4cd5a738)
0x4cd5a71c    28  ldursw x4, [x5, #15]
0x4cd5a720    32  tbnz w4, #23, #+0x18 (addr 0x4cd5a738)
0x4cd5a724    36  ldr x4, [jssp], #8
0x4cd5a728    40  ldr x3, [jssp], #8
0x4cd5a72c    44  ldr x2, pc+52 (addr 0x000000004cd5a760)    ;; object: 0x210052d1 <String[17]: preventExtensions>
0x4cd5a730    48  ldr x16, pc+56 (addr 0x000000004cd5a768)    ;; code: HANDLER, StoreTransitionStub, minor: 172039
0x4cd5a734    52  br x16
0x4cd5a738    56  ldr x2, pc+56 (addr 0x000000004cd5a770)    ;; object: 0x210052d1 <String[17]: preventExtensions>
0x4cd5a73c    60  ldr x4, [jssp], #8
0x4cd5a740    64  ldr x3, [jssp], #8
0x4cd5a744    68  ldr x16, pc+52 (addr 0x000000004cd5a778)    ;; code: BUILTIN
0x4cd5a748    72  br x16
0x4cd5a74c    76  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0x4cd5a750    80  d63f03e0       constant
0x4cd5a754    84  d503201f       constant
0x4cd5a758    88  21088b99       constant
0x4cd5a75c    92  00000000       constant
0x4cd5a760    96  210052d1       constant
0x4cd5a764   100  00000000       constant
0x4cd5a768   104  4cd5a5e0       constant
0x4cd5a76c   108  00000000       constant
0x4cd5a770   112  210052d1       constant
0x4cd5a774   116  00000000       constant
0x4cd5a778   120  4cd22420       constant
0x4cd5a77c   124  00000000       constant


RelocInfo (size = 11)
0x4cd5a710  embedded object  (0x21088b99 WeakCell for 0x2a810ee1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd5a72c  embedded object  (0x210052d1 <String[17]: preventExtensions>)
0x4cd5a730  code target (HANDLER)  (0x4cd5a5e0)
0x4cd5a738  embedded object  (0x210052d1 <String[17]: preventExtensions>)
0x4cd5a744  code target (BUILTIN)  (0x4cd22420)
0x4cd5a74c  constant pool (size 52)

kind = STUB
major_key = ToLengthStub
name = ToLengthStub
compiler = turbofan
Instructions (size = 442)
0x4cd5a7e0     0  and x1, x0, #0x8000000000000001
0x4cd5a7e4     4  cmp x1, #0x0 (0)
0x4cd5a7e8     8  b.eq #+0xb0 (addr 0x4cd5a898)
0x4cd5a7ec    12  and x1, x0, #0x1
0x4cd5a7f0    16  cmp x1, #0x0 (0)
0x4cd5a7f4    20  b.eq #+0x154 (addr 0x4cd5a948)
0x4cd5a7f8    24  ldur x1, [x0, #-1]
0x4cd5a7fc    28  ldr x2, [x26, #120]
0x4cd5a800    32  cmp x1, x2
0x4cd5a804    36  b.ne #+0x98 (addr 0x4cd5a89c)
0x4cd5a808    40  ldur d0, [x0, #7]
0x4cd5a80c    44  fcmp d0, #0.0
0x4cd5a810    48  b.le #+0x138 (addr 0x4cd5a948)
0x4cd5a814    52  ldr d1, pc+324 (addr 0x000000004cd5a958)
0x4cd5a818    56  fcmp d1, d0
0x4cd5a81c    60  b.ls #+0x124 (addr 0x4cd5a940)
0x4cd5a820    64  frintm d0, d0
0x4cd5a824    68  fcvtzs w0, d0
0x4cd5a828    72  scvtf d1, w0
0x4cd5a82c    76  fcmp d0, d1
0x4cd5a830    80  b.ne #+0x24 (addr 0x4cd5a854)
0x4cd5a834    84  fcmp d0, #0.0
0x4cd5a838    88  b.ne #+0x14 (addr 0x4cd5a84c)
0x4cd5a83c    92  fmov x1, d0
0x4cd5a840    96  lsr x1, x1, #32
0x4cd5a844   100  cmp w1, #0x0 (0)
0x4cd5a848   104  b.lt #+0xc (addr 0x4cd5a854)
0x4cd5a84c   108  lsl x0, x0, #32
0x4cd5a850   112  b #+0x40 (addr 0x4cd5a890)
0x4cd5a854   116  movz x0, #0xd2c0
0x4cd5a858   120  movk x0, #0x166d, lsl #16
0x4cd5a85c   124  ldr x1, [x0]
0x4cd5a860   128  movz x2, #0xd2c8
0x4cd5a864   132  movk x2, #0x166d, lsl #16
0x4cd5a868   136  ldr x2, [x2]
0x4cd5a86c   140  sub x2, x2, x1
0x4cd5a870   144  cmp x2, #0x10 (16)
0x4cd5a874   148  b.lt #+0x64 (addr 0x4cd5a8d8)
0x4cd5a878   152  add x2, x1, #0x10 (16)
0x4cd5a87c   156  str x2, [x0]
0x4cd5a880   160  add x0, x1, #0x1 (1)
0x4cd5a884   164  ldr x1, [x26, #120]
0x4cd5a888   168  stur x1, [x0, #-1]
0x4cd5a88c   172  stur d0, [x0, #7]
0x4cd5a890   176  ret
0x4cd5a894   180  b #+0xb4 (addr 0x4cd5a948)
0x4cd5a898   184  ret
0x4cd5a89c   188  movz x16, #0xa00000000
0x4cd5a8a0   192  sub csp, jssp, #0x10 (16)
0x4cd5a8a4   196  stp fp, lr, [jssp, #-16]!
0x4cd5a8a8   200  mov fp, jssp
0x4cd5a8ac   204  sub csp, jssp, #0x20 (32)
0x4cd5a8b0   208  sub jssp, jssp, #0x20 (32)
0x4cd5a8b4   212  stur x16, [fp, #-8]
0x4cd5a8b8   216  mov x1, cp
0x4cd5a8bc   220  str cp, [jssp, #8]
0x4cd5a8c0   224  ldr x16, pc+160 (addr 0x000000004cd5a960)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0x4cd5a8c4   228  blr x16
0x4cd5a8c8   232  ldr cp, [jssp, #8]
0x4cd5a8cc   236  mov jssp, fp
0x4cd5a8d0   240  ldp fp, lr, [jssp], #16
0x4cd5a8d4   244  b #-0xf4 (addr 0x4cd5a7e0)
0x4cd5a8d8   248  movz x16, #0xa00000000
0x4cd5a8dc   252  sub csp, jssp, #0x10 (16)
0x4cd5a8e0   256  stp fp, lr, [jssp, #-16]!
0x4cd5a8e4   260  mov fp, jssp
0x4cd5a8e8   264  sub csp, jssp, #0x20 (32)
0x4cd5a8ec   268  sub jssp, jssp, #0x20 (32)
0x4cd5a8f0   272  stur x16, [fp, #-8]
0x4cd5a8f4   276  movz x0, #0x0
0x4cd5a8f8   280  lsl x0, x0, #32
0x4cd5a8fc   284  movz x1, #0x10
0x4cd5a900   288  lsl x1, x1, #32
0x4cd5a904   292  sub csp, jssp, #0x10 (16)
0x4cd5a908   296  sub jssp, jssp, #0x10 (16)
0x4cd5a90c   300  str x1, [jssp, #8]
0x4cd5a910   304  str x0, [jssp]
0x4cd5a914   308  str d0, [jssp, #32]
0x4cd5a918   312  movz x1, #0x5b88
0x4cd5a91c   316  movk x1, #0xe2, lsl #16
0x4cd5a920   320  movz x0, #0x2
0x4cd5a924   324  movz cp, #0x0
0x4cd5a928   328  ldr x16, pc+64 (addr 0x000000004cd5a968)    ;; code: STUB, CEntryStub, minor: 4
0x4cd5a92c   332  blr x16
0x4cd5a930   336  ldr d0, [jssp, #16]
0x4cd5a934   340  mov jssp, fp
0x4cd5a938   344  ldp fp, lr, [jssp], #16
0x4cd5a93c   348  b #-0xb8 (addr 0x4cd5a884)
0x4cd5a940   352  ldr x0, pc+48 (addr 0x000000004cd5a970)    ;; object: 0x21088e41 <Number: 9.0072e+15>
0x4cd5a944   356  ret
0x4cd5a948   360  movz x0, #0x0
0x4cd5a94c   364  ret
0x4cd5a950   368  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cd5a954   372  d63f03e0       constant
0x4cd5a958   376  ffffffff       constant
0x4cd5a95c   380  433fffff       constant
0x4cd5a960   384  4cd29d80       constant
0x4cd5a964   388  00000000       constant
0x4cd5a968   392  4cd06060       constant
0x4cd5a96c   396  00000000       constant
0x4cd5a970   400  21088e41       constant
0x4cd5a974   404  00000000       constant


Safepoints (size = 34)
0x4cd5a8c8   232  010000 (sp -> fp)  <none>
0x4cd5a930   336  000000 (sp -> fp)  <none>

RelocInfo (size = 13)
0x4cd5a8c0  code target (STUB)  (0x4cd29d80)
0x4cd5a928  code target (STUB)  (0x4cd06060)
0x4cd5a940  embedded object  (0x21088e41 <Number: 9.0072e+15>)
0x4cd5a950  constant pool (size 40)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = SMI*SMI -> SMI
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 152)
0x4cd5b5e0     0  orr x16, x0, x1
0x4cd5b5e4     4  tbnz w16, #0, #+0xc (addr 0x4cd5b5f0)
0x4cd5b5e8     8  sub x0, x0, x1
0x4cd5b5ec    12  ret
0x4cd5b5f0    16  movz x16, #0xc00000000
0x4cd5b5f4    20  sub csp, jssp, #0x10 (16)
0x4cd5b5f8    24  stp fp, lr, [jssp, #-16]!
0x4cd5b5fc    28  sub csp, jssp, #0x10 (16)
0x4cd5b600    32  str x16, [jssp, #-8]!
0x4cd5b604    36  ldr x17, pc+92 (addr 0x000000004cd5b660)    ;; object: 0x4cd5b581 <Code: COMPARE_IC>
0x4cd5b608    40  sub csp, jssp, #0x10 (16)
0x4cd5b60c    44  str x17, [jssp, #-8]!
0x4cd5b610    48  add fp, jssp, #0x10 (16)
0x4cd5b614    52  sub csp, jssp, #0x18 (24)
0x4cd5b618    56  stp lr, x0, [jssp, #-24]!
0x4cd5b61c    60  str x1, [jssp, #16]
0x4cd5b620    64  movz x10, #0x2f00000000
0x4cd5b624    68  sub csp, jssp, #0x18 (24)
0x4cd5b628    72  stp x10, x0, [jssp, #-24]!
0x4cd5b62c    76  str x1, [jssp, #16]
0x4cd5b630    80  movz x0, #0x3
0x4cd5b634    84  ldr x1, pc+52 (addr 0x000000004cd5b668)    ;; external reference (Runtime::CompareIC_Miss)
0x4cd5b638    88  ldr x16, pc+56 (addr 0x000000004cd5b670)    ;; code: STUB, CEntryStub, minor: 4
0x4cd5b63c    92  blr x16
0x4cd5b640    96  add x11, x0, #0x5f (95)
0x4cd5b644   100  ldr x1, [jssp, #16]
0x4cd5b648   104  ldp lr, x0, [jssp], #24
0x4cd5b64c   108  mov jssp, fp
0x4cd5b650   112  ldp fp, lr, [jssp], #16
0x4cd5b654   116  br x11
0x4cd5b658   120  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd5b65c   124  d63f03e0       constant
0x4cd5b660   128  4cd5b581       constant
0x4cd5b664   132  00000000       constant
0x4cd5b668   136  00c8a980       constant
0x4cd5b66c   140  00000000       constant
0x4cd5b670   144  4cd06060       constant
0x4cd5b674   148  00000000       constant


RelocInfo (size = 10)
0x4cd5b604  embedded object  (0x4cd5b581 <Code: COMPARE_IC>)
0x4cd5b634  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cd5b638  code target (STUB)  (0x4cd06060)
0x4cd5b658  constant pool (size 32)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 445)
0x4cd5b920     0  movz x2, #0xd2c0
0x4cd5b924     4  movk x2, #0x166d, lsl #16
0x4cd5b928     8  ldp x3, x0, [x2]
0x4cd5b92c    12  adds x16, x3, #0x90 (144)
0x4cd5b930    16  ccmp x16, x0, #nzCv, lo
0x4cd5b934    20  b.hi #+0x9c (addr 0x4cd5b9d0)
0x4cd5b938    24  str x16, [x2]
0x4cd5b93c    28  orr x3, x3, #0x1
0x4cd5b940    32  ldr x0, pc+256 (addr 0x000000004cd5ba40)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd5b944    36  stur x0, [x3, #-1]
0x4cd5b948    40  movz x0, #0x1000000000
0x4cd5b94c    44  stur x0, [x3, #7]
0x4cd5b950    48  stur x1, [x3, #15]
0x4cd5b954    52  stur cp, [x3, #23]
0x4cd5b958    56  ldr x0, pc+240 (addr 0x000000004cd5ba48)    ;; object: 0x21004519 <the hole>
0x4cd5b95c    60  stur x0, [x3, #31]
0x4cd5b960    64  ldur x0, [cp, #39]
0x4cd5b964    68  stur x0, [x3, #39]
0x4cd5b968    72  ldr x0, pc+232 (addr 0x000000004cd5ba50)    ;; object: 0x21004241 <undefined>
0x4cd5b96c    76  stur x0, [x3, #47]
0x4cd5b970    80  ldr x0, pc+232 (addr 0x000000004cd5ba58)    ;; object: 0x21004241 <undefined>
0x4cd5b974    84  stur x0, [x3, #55]
0x4cd5b978    88  ldr x0, pc+232 (addr 0x000000004cd5ba60)    ;; object: 0x21004241 <undefined>
0x4cd5b97c    92  stur x0, [x3, #63]
0x4cd5b980    96  ldr x0, pc+232 (addr 0x000000004cd5ba68)    ;; object: 0x21004241 <undefined>
0x4cd5b984   100  stur x0, [x3, #71]
0x4cd5b988   104  ldr x0, pc+232 (addr 0x000000004cd5ba70)    ;; object: 0x21004241 <undefined>
0x4cd5b98c   108  stur x0, [x3, #79]
0x4cd5b990   112  ldr x0, pc+232 (addr 0x000000004cd5ba78)    ;; object: 0x21004241 <undefined>
0x4cd5b994   116  stur x0, [x3, #87]
0x4cd5b998   120  ldr x0, pc+232 (addr 0x000000004cd5ba80)    ;; object: 0x21004241 <undefined>
0x4cd5b99c   124  stur x0, [x3, #95]
0x4cd5b9a0   128  ldr x0, pc+232 (addr 0x000000004cd5ba88)    ;; object: 0x21004241 <undefined>
0x4cd5b9a4   132  stur x0, [x3, #103]
0x4cd5b9a8   136  ldr x0, pc+232 (addr 0x000000004cd5ba90)    ;; object: 0x21004241 <undefined>
0x4cd5b9ac   140  stur x0, [x3, #111]
0x4cd5b9b0   144  ldr x0, pc+232 (addr 0x000000004cd5ba98)    ;; object: 0x21004241 <undefined>
0x4cd5b9b4   148  stur x0, [x3, #119]
0x4cd5b9b8   152  ldr x0, pc+232 (addr 0x000000004cd5baa0)    ;; object: 0x21004241 <undefined>
0x4cd5b9bc   156  stur x0, [x3, #127]
0x4cd5b9c0   160  ldr x0, pc+232 (addr 0x000000004cd5baa8)    ;; object: 0x21004241 <undefined>
0x4cd5b9c4   164  stur x0, [x3, #135]
0x4cd5b9c8   168  mov x0, x3
0x4cd5b9cc   172  ret
0x4cd5b9d0   176  sub csp, jssp, #0x10 (16)
0x4cd5b9d4   180  stp fp, lr, [jssp, #-16]!
0x4cd5b9d8   184  movz fp, #0xa00000000
0x4cd5b9dc   188  sub csp, jssp, #0x8 (8)
0x4cd5b9e0   192  str fp, [jssp, #-8]!
0x4cd5b9e4   196  add fp, jssp, #0x8 (8)
0x4cd5b9e8   200  movz x3, #0x0
0x4cd5b9ec   204  mov x16, lr
0x4cd5b9f0   208  ldr x17, pc+192 (addr 0x000000004cd5bab0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd5b9f4   212  blr x17
0x4cd5b9f8   216  movz x0, #0x9000000000
0x4cd5b9fc   220  movz x10, #0x0
0x4cd5ba00   224  sub csp, jssp, #0x10 (16)
0x4cd5ba04   228  stp x10, x0, [jssp, #-16]!
0x4cd5ba08   232  movz x0, #0x2
0x4cd5ba0c   236  movz x1, #0x5b88
0x4cd5ba10   240  movk x1, #0xe2, lsl #16
0x4cd5ba14   244  ldr x16, pc+164 (addr 0x000000004cd5bab8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd5ba18   248  blr x16
0x4cd5ba1c   252  str x0, [jssp, #24]
0x4cd5ba20   256  ldr x16, pc+160 (addr 0x000000004cd5bac0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd5ba24   260  blr x16
0x4cd5ba28   264  ldr lr, [jssp, #16]
0x4cd5ba2c   268  ldp xzr, fp, [jssp], #24
0x4cd5ba30   272  b #-0xf0 (addr 0x4cd5b940)
0x4cd5ba34   276  5800049f       constant pool begin (num_const = 36)    ;; constant pool
0x4cd5ba38   280  d63f03e0       constant
0x4cd5ba3c   284  d503201f       constant
0x4cd5ba40   288  2a806149       constant
0x4cd5ba44   292  00000000       constant
0x4cd5ba48   296  21004519       constant
0x4cd5ba4c   300  00000000       constant
0x4cd5ba50   304  21004241       constant
0x4cd5ba54   308  00000000       constant
0x4cd5ba58   312  21004241       constant
0x4cd5ba5c   316  00000000       constant
0x4cd5ba60   320  21004241       constant
0x4cd5ba64   324  00000000       constant
0x4cd5ba68   328  21004241       constant
0x4cd5ba6c   332  00000000       constant
0x4cd5ba70   336  21004241       constant
0x4cd5ba74   340  00000000       constant
0x4cd5ba78   344  21004241       constant
0x4cd5ba7c   348  00000000       constant
0x4cd5ba80   352  21004241       constant
0x4cd5ba84   356  00000000       constant
0x4cd5ba88   360  21004241       constant
0x4cd5ba8c   364  00000000       constant
0x4cd5ba90   368  21004241       constant
0x4cd5ba94   372  00000000       constant
0x4cd5ba98   376  21004241       constant
0x4cd5ba9c   380  00000000       constant
0x4cd5baa0   384  21004241       constant
0x4cd5baa4   388  00000000       constant
0x4cd5baa8   392  21004241       constant
0x4cd5baac   396  00000000       constant
0x4cd5bab0   400  4cd06820       constant
0x4cd5bab4   404  00000000       constant
0x4cd5bab8   408  4cd06260       constant
0x4cd5babc   412  00000000       constant
0x4cd5bac0   416  4cd068e0       constant
0x4cd5bac4   420  00000000       constant


Safepoints (size = 21)
0x4cd5ba1c   252  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 23)
0x4cd5b940  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd5b958  embedded object  (0x21004519 <the hole>)
0x4cd5b968  embedded object  (0x21004241 <undefined>)
0x4cd5b970  embedded object  (0x21004241 <undefined>)
0x4cd5b978  embedded object  (0x21004241 <undefined>)
0x4cd5b980  embedded object  (0x21004241 <undefined>)
0x4cd5b988  embedded object  (0x21004241 <undefined>)
0x4cd5b990  embedded object  (0x21004241 <undefined>)
0x4cd5b998  embedded object  (0x21004241 <undefined>)
0x4cd5b9a0  embedded object  (0x21004241 <undefined>)
0x4cd5b9a8  embedded object  (0x21004241 <undefined>)
0x4cd5b9b0  embedded object  (0x21004241 <undefined>)
0x4cd5b9b8  embedded object  (0x21004241 <undefined>)
0x4cd5b9c0  embedded object  (0x21004241 <undefined>)
0x4cd5b9f0  code target (STUB)  (0x4cd06820)
0x4cd5ba14  code target (STUB)  (0x4cd06260)
0x4cd5ba20  code target (STUB)  (0x4cd068e0)
0x4cd5ba34  constant pool (size 148)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cd5cee0     0  ldur x0, [x1, #7]
0x4cd5cee4     4  ldur x0, [x0, #143]
0x4cd5cee8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 327680
name = CallICStub(args(0), NOT_NULL_OR_UNDEFINED, 
compiler = unknown
Instructions (size = 488)
0x4cd5cf60     0  add x4, x2, x3, asr #29
0x4cd5cf64     4  ldur x4, [x4, #15]
0x4cd5cf68     8  ldur x5, [x4, #7]
0x4cd5cf6c    12  cmp x5, x1
0x4cd5cf70    16  b.ne #+0x2c (addr 0x4cd5cf9c)
0x4cd5cf74    20  tbz w1, #0, #+0x28 (addr 0x4cd5cf9c)
0x4cd5cf78    24  add x2, x2, x3, asr #29
0x4cd5cf7c    28  add x2, x2, #0x18 (24)
0x4cd5cf80    32  ldur x3, [x2, #-1]
0x4cd5cf84    36  movz x16, #0x200000000
0x4cd5cf88    40  add x3, x3, x16
0x4cd5cf8c    44  stur x3, [x2, #-1]
0x4cd5cf90    48  movz x0, #0x0
0x4cd5cf94    52  ldr x16, pc+372 (addr 0x000000004cd5d108)    ;; code: BUILTIN
0x4cd5cf98    56  br x16
0x4cd5cf9c    60  ldr x16, [x26, #2400]
0x4cd5cfa0    64  cmp x4, x16
0x4cd5cfa4    68  b.eq #+0x78 (addr 0x4cd5d01c)
0x4cd5cfa8    72  ldur x5, [x4, #-1]
0x4cd5cfac    76  ldr x16, [x26, #2736]
0x4cd5cfb0    80  cmp x5, x16
0x4cd5cfb4    84  b.ne #+0x40 (addr 0x4cd5cff4)
0x4cd5cfb8    88  ldur x5, [cp, #39]
0x4cd5cfbc    92  ldur x5, [x5, #95]
0x4cd5cfc0    96  cmp x1, x5
0x4cd5cfc4   100  b.ne #+0xec (addr 0x4cd5d0b0)
0x4cd5cfc8   104  movz x0, #0x0
0x4cd5cfcc   108  add x2, x2, x3, asr #29
0x4cd5cfd0   112  add x2, x2, #0x18 (24)
0x4cd5cfd4   116  ldur x3, [x2, #-1]
0x4cd5cfd8   120  movz x16, #0x200000000
0x4cd5cfdc   124  add x3, x3, x16
0x4cd5cfe0   128  stur x3, [x2, #-1]
0x4cd5cfe4   132  mov x2, x4
0x4cd5cfe8   136  mov x3, x1
0x4cd5cfec   140  ldr x16, pc+292 (addr 0x000000004cd5d110)    ;; code: STUB, ArrayConstructorStub, minor: 1
0x4cd5cff0   144  br x16
0x4cd5cff4   148  ldr x16, [x26, #2568]
0x4cd5cff8   152  cmp x4, x16
0x4cd5cffc   156  b.eq #+0xb4 (addr 0x4cd5d0b0)
0x4cd5d000   160  ldur x5, [x4, #-1]
0x4cd5d004   164  ldrb w5, [x5, #11]
0x4cd5d008   168  cmp x5, #0xc9 (201)
0x4cd5d00c   172  b.ne #+0xa4 (addr 0x4cd5d0b0)
0x4cd5d010   176  add x4, x2, x3, asr #29
0x4cd5d014   180  ldr x5, [x26, #2400]
0x4cd5d018   184  stur x5, [x4, #15]
0x4cd5d01c   188  movz x0, #0x0
0x4cd5d020   192  ldr x16, pc+248 (addr 0x000000004cd5d118)    ;; code: BUILTIN
0x4cd5d024   196  br x16
0x4cd5d028   200  tbz w1, #0, #+0x88 (addr 0x4cd5d0b0)
0x4cd5d02c   204  ldur x5, [x1, #-1]
0x4cd5d030   208  ldrb w5, [x5, #11]
0x4cd5d034   212  cmp x5, #0xc9 (201)
0x4cd5d038   216  b.ne #+0x78 (addr 0x4cd5d0b0)
0x4cd5d03c   220  ldur x5, [cp, #39]
0x4cd5d040   224  ldur x5, [x5, #95]
0x4cd5d044   228  cmp x1, x5
0x4cd5d048   232  b.eq #+0x68 (addr 0x4cd5d0b0)
0x4cd5d04c   236  ldur x4, [x1, #39]
0x4cd5d050   240  ldur x4, [x4, #39]
0x4cd5d054   244  ldur x5, [cp, #39]
0x4cd5d058   248  cmp x4, x5
0x4cd5d05c   252  b.ne #+0x54 (addr 0x4cd5d0b0)
0x4cd5d060   256  movz x5, #0x200000000
0x4cd5d064   260  adds x4, x2, x3, asr #29
0x4cd5d068   264  stur x5, [x4, #23]
0x4cd5d06c   268  movz x16, #0xc00000000
0x4cd5d070   272  sub csp, jssp, #0x10 (16)
0x4cd5d074   276  stp fp, lr, [jssp, #-16]!
0x4cd5d078   280  sub csp, jssp, #0x10 (16)
0x4cd5d07c   284  str x16, [jssp, #-8]!
0x4cd5d080   288  ldr x17, pc+160 (addr 0x000000004cd5d120)    ;; object: 0x4cd5cf01 <Code: CALL_IC>
0x4cd5d084   292  sub csp, jssp, #0x10 (16)
0x4cd5d088   296  str x17, [jssp, #-8]!
0x4cd5d08c   300  add fp, jssp, #0x10 (16)
0x4cd5d090   304  sub csp, jssp, #0x8 (8)
0x4cd5d094   308  str x1, [jssp, #-8]!
0x4cd5d098   312  ldr x16, pc+144 (addr 0x000000004cd5d128)    ;; code: STUB, CreateWeakCellStub, minor: 0
0x4cd5d09c   316  blr x16
0x4cd5d0a0   320  ldr x1, [jssp], #8
0x4cd5d0a4   324  mov jssp, fp
0x4cd5d0a8   328  ldp fp, lr, [jssp], #16
0x4cd5d0ac   332  b #-0x11c (addr 0x4cd5cf90)
0x4cd5d0b0   336  movz x16, #0xc00000000
0x4cd5d0b4   340  sub csp, jssp, #0x10 (16)
0x4cd5d0b8   344  stp fp, lr, [jssp, #-16]!
0x4cd5d0bc   348  sub csp, jssp, #0x10 (16)
0x4cd5d0c0   352  str x16, [jssp, #-8]!
0x4cd5d0c4   356  ldr x17, pc+108 (addr 0x000000004cd5d130)    ;; object: 0x4cd5cf01 <Code: CALL_IC>
0x4cd5d0c8   360  sub csp, jssp, #0x10 (16)
0x4cd5d0cc   364  str x17, [jssp, #-8]!
0x4cd5d0d0   368  add fp, jssp, #0x10 (16)
0x4cd5d0d4   372  sub csp, jssp, #0x18 (24)
0x4cd5d0d8   376  stp x3, x2, [jssp, #-24]!
0x4cd5d0dc   380  str x1, [jssp, #16]
0x4cd5d0e0   384  movz x0, #0x3
0x4cd5d0e4   388  ldr x1, pc+84 (addr 0x000000004cd5d138)    ;; external reference (Runtime::CallIC_Miss)
0x4cd5d0e8   392  ldr x16, pc+88 (addr 0x000000004cd5d140)    ;; code: STUB, CEntryStub, minor: 4
0x4cd5d0ec   396  blr x16
0x4cd5d0f0   400  mov x1, x0
0x4cd5d0f4   404  mov jssp, fp
0x4cd5d0f8   408  ldp fp, lr, [jssp], #16
0x4cd5d0fc   412  b #-0xe0 (addr 0x4cd5d01c)
0x4cd5d100   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4cd5d104   420  d63f03e0       constant
0x4cd5d108   424  4cd1e600       constant
0x4cd5d10c   428  00000000       constant
0x4cd5d110   432  4cd3d580       constant
0x4cd5d114   436  00000000       constant
0x4cd5d118   440  4cd1f6c0       constant
0x4cd5d11c   444  00000000       constant
0x4cd5d120   448  4cd5cf01       constant
0x4cd5d124   452  00000000       constant
0x4cd5d128   456  4cd0ddc0       constant
0x4cd5d12c   460  00000000       constant
0x4cd5d130   464  4cd5cf01       constant
0x4cd5d134   468  00000000       constant
0x4cd5d138   472  00c86928       constant
0x4cd5d13c   476  00000000       constant
0x4cd5d140   480  4cd06060       constant
0x4cd5d144   484  00000000       constant


RelocInfo (size = 19)
0x4cd5cf94  code target (BUILTIN)  (0x4cd1e600)
0x4cd5cfec  code target (STUB)  (0x4cd3d580)
0x4cd5d020  code target (BUILTIN)  (0x4cd1f6c0)
0x4cd5d080  embedded object  (0x4cd5cf01 <Code: CALL_IC>)
0x4cd5d098  code target (STUB)  (0x4cd0ddc0)
0x4cd5d0c4  embedded object  (0x4cd5cf01 <Code: CALL_IC>)
0x4cd5d0e4  external reference (Runtime::CallIC_Miss)  (0xc86928)
0x4cd5d0e8  code target (STUB)  (0x4cd06060)
0x4cd5d100  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 327680
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0x4cd5d1c0     0  ldur x2, [fp, #-16]
0x4cd5d1c4     4  ldur x2, [x2, #31]
0x4cd5d1c8     8  ldur x2, [x2, #87]
0x4cd5d1cc    12  ldr x16, pc+20 (addr 0x000000004cd5d1e0)    ;; code: CALL_IC, GENERIC
0x4cd5d1d0    16  br x16
0x4cd5d1d4    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd5d1d8    24  d63f03e0       constant
0x4cd5d1dc    28  d503201f       constant
0x4cd5d1e0    32  4cd5cf60       constant
0x4cd5d1e4    36  00000000       constant


RelocInfo (size = 7)
0x4cd5d1cc  code target (CALL_IC)  (0x4cd5cf60)
0x4cd5d1d4  constant pool (size 20)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 301)
0x4cd5e860     0  movz x2, #0xd2c0
0x4cd5e864     4  movk x2, #0x166d, lsl #16
0x4cd5e868     8  ldp x3, x0, [x2]
0x4cd5e86c    12  adds x16, x3, #0x48 (72)
0x4cd5e870    16  ccmp x16, x0, #nzCv, lo
0x4cd5e874    20  b.hi #+0x54 (addr 0x4cd5e8c8)
0x4cd5e878    24  str x16, [x2]
0x4cd5e87c    28  orr x3, x3, #0x1
0x4cd5e880    32  ldr x0, pc+184 (addr 0x000000004cd5e938)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd5e884    36  stur x0, [x3, #-1]
0x4cd5e888    40  movz x0, #0x700000000
0x4cd5e88c    44  stur x0, [x3, #7]
0x4cd5e890    48  stur x1, [x3, #15]
0x4cd5e894    52  stur cp, [x3, #23]
0x4cd5e898    56  ldr x0, pc+168 (addr 0x000000004cd5e940)    ;; object: 0x21004519 <the hole>
0x4cd5e89c    60  stur x0, [x3, #31]
0x4cd5e8a0    64  ldur x0, [cp, #39]
0x4cd5e8a4    68  stur x0, [x3, #39]
0x4cd5e8a8    72  ldr x0, pc+160 (addr 0x000000004cd5e948)    ;; object: 0x21004241 <undefined>
0x4cd5e8ac    76  stur x0, [x3, #47]
0x4cd5e8b0    80  ldr x0, pc+160 (addr 0x000000004cd5e950)    ;; object: 0x21004241 <undefined>
0x4cd5e8b4    84  stur x0, [x3, #55]
0x4cd5e8b8    88  ldr x0, pc+160 (addr 0x000000004cd5e958)    ;; object: 0x21004241 <undefined>
0x4cd5e8bc    92  stur x0, [x3, #63]
0x4cd5e8c0    96  mov x0, x3
0x4cd5e8c4   100  ret
0x4cd5e8c8   104  sub csp, jssp, #0x10 (16)
0x4cd5e8cc   108  stp fp, lr, [jssp, #-16]!
0x4cd5e8d0   112  movz fp, #0xa00000000
0x4cd5e8d4   116  sub csp, jssp, #0x8 (8)
0x4cd5e8d8   120  str fp, [jssp, #-8]!
0x4cd5e8dc   124  add fp, jssp, #0x8 (8)
0x4cd5e8e0   128  movz x3, #0x0
0x4cd5e8e4   132  mov x16, lr
0x4cd5e8e8   136  ldr x17, pc+120 (addr 0x000000004cd5e960)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd5e8ec   140  blr x17
0x4cd5e8f0   144  movz x0, #0x4800000000
0x4cd5e8f4   148  movz x10, #0x0
0x4cd5e8f8   152  sub csp, jssp, #0x10 (16)
0x4cd5e8fc   156  stp x10, x0, [jssp, #-16]!
0x4cd5e900   160  movz x0, #0x2
0x4cd5e904   164  movz x1, #0x5b88
0x4cd5e908   168  movk x1, #0xe2, lsl #16
0x4cd5e90c   172  ldr x16, pc+92 (addr 0x000000004cd5e968)    ;; code: STUB, CEntryStub, minor: 5
0x4cd5e910   176  blr x16
0x4cd5e914   180  str x0, [jssp, #24]
0x4cd5e918   184  ldr x16, pc+88 (addr 0x000000004cd5e970)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd5e91c   188  blr x16
0x4cd5e920   192  ldr lr, [jssp, #16]
0x4cd5e924   196  ldp xzr, fp, [jssp], #24
0x4cd5e928   200  b #-0xa8 (addr 0x4cd5e880)
0x4cd5e92c   204  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0x4cd5e930   208  d63f03e0       constant
0x4cd5e934   212  d503201f       constant
0x4cd5e938   216  2a806149       constant
0x4cd5e93c   220  00000000       constant
0x4cd5e940   224  21004519       constant
0x4cd5e944   228  00000000       constant
0x4cd5e948   232  21004241       constant
0x4cd5e94c   236  00000000       constant
0x4cd5e950   240  21004241       constant
0x4cd5e954   244  00000000       constant
0x4cd5e958   248  21004241       constant
0x4cd5e95c   252  00000000       constant
0x4cd5e960   256  4cd06820       constant
0x4cd5e964   260  00000000       constant
0x4cd5e968   264  4cd06260       constant
0x4cd5e96c   268  00000000       constant
0x4cd5e970   272  4cd068e0       constant
0x4cd5e974   276  00000000       constant


Safepoints (size = 21)
0x4cd5e914   180  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 14)
0x4cd5e880  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd5e898  embedded object  (0x21004519 <the hole>)
0x4cd5e8a8  embedded object  (0x21004241 <undefined>)
0x4cd5e8b0  embedded object  (0x21004241 <undefined>)
0x4cd5e8b8  embedded object  (0x21004241 <undefined>)
0x4cd5e8e8  code target (STUB)  (0x4cd06820)
0x4cd5e90c  code target (STUB)  (0x4cd06260)
0x4cd5e918  code target (STUB)  (0x4cd068e0)
0x4cd5e92c  constant pool (size 76)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 365)
0x4cd609e0     0  movz x2, #0xd2c0
0x4cd609e4     4  movk x2, #0x166d, lsl #16
0x4cd609e8     8  ldp x3, x0, [x2]
0x4cd609ec    12  adds x16, x3, #0x68 (104)
0x4cd609f0    16  ccmp x16, x0, #nzCv, lo
0x4cd609f4    20  b.hi #+0x74 (addr 0x4cd60a68)
0x4cd609f8    24  str x16, [x2]
0x4cd609fc    28  orr x3, x3, #0x1
0x4cd60a00    32  ldr x0, pc+216 (addr 0x000000004cd60ad8)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd60a04    36  stur x0, [x3, #-1]
0x4cd60a08    40  movz x0, #0xb00000000
0x4cd60a0c    44  stur x0, [x3, #7]
0x4cd60a10    48  stur x1, [x3, #15]
0x4cd60a14    52  stur cp, [x3, #23]
0x4cd60a18    56  ldr x0, pc+200 (addr 0x000000004cd60ae0)    ;; object: 0x21004519 <the hole>
0x4cd60a1c    60  stur x0, [x3, #31]
0x4cd60a20    64  ldur x0, [cp, #39]
0x4cd60a24    68  stur x0, [x3, #39]
0x4cd60a28    72  ldr x0, pc+192 (addr 0x000000004cd60ae8)    ;; object: 0x21004241 <undefined>
0x4cd60a2c    76  stur x0, [x3, #47]
0x4cd60a30    80  ldr x0, pc+192 (addr 0x000000004cd60af0)    ;; object: 0x21004241 <undefined>
0x4cd60a34    84  stur x0, [x3, #55]
0x4cd60a38    88  ldr x0, pc+192 (addr 0x000000004cd60af8)    ;; object: 0x21004241 <undefined>
0x4cd60a3c    92  stur x0, [x3, #63]
0x4cd60a40    96  ldr x0, pc+192 (addr 0x000000004cd60b00)    ;; object: 0x21004241 <undefined>
0x4cd60a44   100  stur x0, [x3, #71]
0x4cd60a48   104  ldr x0, pc+192 (addr 0x000000004cd60b08)    ;; object: 0x21004241 <undefined>
0x4cd60a4c   108  stur x0, [x3, #79]
0x4cd60a50   112  ldr x0, pc+192 (addr 0x000000004cd60b10)    ;; object: 0x21004241 <undefined>
0x4cd60a54   116  stur x0, [x3, #87]
0x4cd60a58   120  ldr x0, pc+192 (addr 0x000000004cd60b18)    ;; object: 0x21004241 <undefined>
0x4cd60a5c   124  stur x0, [x3, #95]
0x4cd60a60   128  mov x0, x3
0x4cd60a64   132  ret
0x4cd60a68   136  sub csp, jssp, #0x10 (16)
0x4cd60a6c   140  stp fp, lr, [jssp, #-16]!
0x4cd60a70   144  movz fp, #0xa00000000
0x4cd60a74   148  sub csp, jssp, #0x8 (8)
0x4cd60a78   152  str fp, [jssp, #-8]!
0x4cd60a7c   156  add fp, jssp, #0x8 (8)
0x4cd60a80   160  movz x3, #0x0
0x4cd60a84   164  mov x16, lr
0x4cd60a88   168  ldr x17, pc+152 (addr 0x000000004cd60b20)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd60a8c   172  blr x17
0x4cd60a90   176  movz x0, #0x6800000000
0x4cd60a94   180  movz x10, #0x0
0x4cd60a98   184  sub csp, jssp, #0x10 (16)
0x4cd60a9c   188  stp x10, x0, [jssp, #-16]!
0x4cd60aa0   192  movz x0, #0x2
0x4cd60aa4   196  movz x1, #0x5b88
0x4cd60aa8   200  movk x1, #0xe2, lsl #16
0x4cd60aac   204  ldr x16, pc+124 (addr 0x000000004cd60b28)    ;; code: STUB, CEntryStub, minor: 5
0x4cd60ab0   208  blr x16
0x4cd60ab4   212  str x0, [jssp, #24]
0x4cd60ab8   216  ldr x16, pc+120 (addr 0x000000004cd60b30)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd60abc   220  blr x16
0x4cd60ac0   224  ldr lr, [jssp, #16]
0x4cd60ac4   228  ldp xzr, fp, [jssp], #24
0x4cd60ac8   232  b #-0xc8 (addr 0x4cd60a00)
0x4cd60acc   236  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0x4cd60ad0   240  d63f03e0       constant
0x4cd60ad4   244  d503201f       constant
0x4cd60ad8   248  2a806149       constant
0x4cd60adc   252  00000000       constant
0x4cd60ae0   256  21004519       constant
0x4cd60ae4   260  00000000       constant
0x4cd60ae8   264  21004241       constant
0x4cd60aec   268  00000000       constant
0x4cd60af0   272  21004241       constant
0x4cd60af4   276  00000000       constant
0x4cd60af8   280  21004241       constant
0x4cd60afc   284  00000000       constant
0x4cd60b00   288  21004241       constant
0x4cd60b04   292  00000000       constant
0x4cd60b08   296  21004241       constant
0x4cd60b0c   300  00000000       constant
0x4cd60b10   304  21004241       constant
0x4cd60b14   308  00000000       constant
0x4cd60b18   312  21004241       constant
0x4cd60b1c   316  00000000       constant
0x4cd60b20   320  4cd06820       constant
0x4cd60b24   324  00000000       constant
0x4cd60b28   328  4cd06260       constant
0x4cd60b2c   332  00000000       constant
0x4cd60b30   336  4cd068e0       constant
0x4cd60b34   340  00000000       constant


Safepoints (size = 21)
0x4cd60ab4   212  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 18)
0x4cd60a00  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd60a18  embedded object  (0x21004519 <the hole>)
0x4cd60a28  embedded object  (0x21004241 <undefined>)
0x4cd60a30  embedded object  (0x21004241 <undefined>)
0x4cd60a38  embedded object  (0x21004241 <undefined>)
0x4cd60a40  embedded object  (0x21004241 <undefined>)
0x4cd60a48  embedded object  (0x21004241 <undefined>)
0x4cd60a50  embedded object  (0x21004241 <undefined>)
0x4cd60a58  embedded object  (0x21004241 <undefined>)
0x4cd60a88  code target (STUB)  (0x4cd06820)
0x4cd60aac  code target (STUB)  (0x4cd06260)
0x4cd60ab8  code target (STUB)  (0x4cd068e0)
0x4cd60acc  constant pool (size 108)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd61b20     0  ldur x0, [x1, #-1]
0x4cd61b24     4  ldur x0, [x0, #47]
0x4cd61b28     8  movz x16, #0x5ff
0x4cd61b2c    12  ldr x0, [x0, x16]
0x4cd61b30    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd61ba0     0  ldur x0, [x1, #-1]
0x4cd61ba4     4  ldur x0, [x0, #47]
0x4cd61ba8     8  movz x16, #0x5e7
0x4cd61bac    12  ldr x0, [x0, x16]
0x4cd61bb0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 821)
0x4cd620e0     0  movz x2, #0xd2c0
0x4cd620e4     4  movk x2, #0x166d, lsl #16
0x4cd620e8     8  ldp x3, x0, [x2]
0x4cd620ec    12  adds x16, x3, #0x140 (320)
0x4cd620f0    16  ccmp x16, x0, #nzCv, lo
0x4cd620f4    20  b.hi #+0x168 (addr 0x4cd6225c)
0x4cd620f8    24  str x16, [x2]
0x4cd620fc    28  orr x3, x3, #0x1
0x4cd62100    32  ldr x0, pc+456 (addr 0x000000004cd622c8)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd62104    36  stur x0, [x3, #-1]
0x4cd62108    40  movz x0, #0x2600000000
0x4cd6210c    44  stur x0, [x3, #7]
0x4cd62110    48  stur x1, [x3, #15]
0x4cd62114    52  stur cp, [x3, #23]
0x4cd62118    56  ldr x0, pc+440 (addr 0x000000004cd622d0)    ;; object: 0x21004519 <the hole>
0x4cd6211c    60  stur x0, [x3, #31]
0x4cd62120    64  ldur x0, [cp, #39]
0x4cd62124    68  stur x0, [x3, #39]
0x4cd62128    72  ldr x0, pc+432 (addr 0x000000004cd622d8)    ;; object: 0x21004241 <undefined>
0x4cd6212c    76  stur x0, [x3, #47]
0x4cd62130    80  ldr x0, pc+432 (addr 0x000000004cd622e0)    ;; object: 0x21004241 <undefined>
0x4cd62134    84  stur x0, [x3, #55]
0x4cd62138    88  ldr x0, pc+432 (addr 0x000000004cd622e8)    ;; object: 0x21004241 <undefined>
0x4cd6213c    92  stur x0, [x3, #63]
0x4cd62140    96  ldr x0, pc+432 (addr 0x000000004cd622f0)    ;; object: 0x21004241 <undefined>
0x4cd62144   100  stur x0, [x3, #71]
0x4cd62148   104  ldr x0, pc+432 (addr 0x000000004cd622f8)    ;; object: 0x21004241 <undefined>
0x4cd6214c   108  stur x0, [x3, #79]
0x4cd62150   112  ldr x0, pc+432 (addr 0x000000004cd62300)    ;; object: 0x21004241 <undefined>
0x4cd62154   116  stur x0, [x3, #87]
0x4cd62158   120  ldr x0, pc+432 (addr 0x000000004cd62308)    ;; object: 0x21004241 <undefined>
0x4cd6215c   124  stur x0, [x3, #95]
0x4cd62160   128  ldr x0, pc+432 (addr 0x000000004cd62310)    ;; object: 0x21004241 <undefined>
0x4cd62164   132  stur x0, [x3, #103]
0x4cd62168   136  ldr x0, pc+432 (addr 0x000000004cd62318)    ;; object: 0x21004241 <undefined>
0x4cd6216c   140  stur x0, [x3, #111]
0x4cd62170   144  ldr x0, pc+432 (addr 0x000000004cd62320)    ;; object: 0x21004241 <undefined>
0x4cd62174   148  stur x0, [x3, #119]
0x4cd62178   152  ldr x0, pc+432 (addr 0x000000004cd62328)    ;; object: 0x21004241 <undefined>
0x4cd6217c   156  stur x0, [x3, #127]
0x4cd62180   160  ldr x0, pc+432 (addr 0x000000004cd62330)    ;; object: 0x21004241 <undefined>
0x4cd62184   164  stur x0, [x3, #135]
0x4cd62188   168  ldr x0, pc+432 (addr 0x000000004cd62338)    ;; object: 0x21004241 <undefined>
0x4cd6218c   172  stur x0, [x3, #143]
0x4cd62190   176  ldr x0, pc+432 (addr 0x000000004cd62340)    ;; object: 0x21004241 <undefined>
0x4cd62194   180  stur x0, [x3, #151]
0x4cd62198   184  ldr x0, pc+432 (addr 0x000000004cd62348)    ;; object: 0x21004241 <undefined>
0x4cd6219c   188  stur x0, [x3, #159]
0x4cd621a0   192  ldr x0, pc+432 (addr 0x000000004cd62350)    ;; object: 0x21004241 <undefined>
0x4cd621a4   196  stur x0, [x3, #167]
0x4cd621a8   200  ldr x0, pc+432 (addr 0x000000004cd62358)    ;; object: 0x21004241 <undefined>
0x4cd621ac   204  stur x0, [x3, #175]
0x4cd621b0   208  ldr x0, pc+432 (addr 0x000000004cd62360)    ;; object: 0x21004241 <undefined>
0x4cd621b4   212  stur x0, [x3, #183]
0x4cd621b8   216  ldr x0, pc+432 (addr 0x000000004cd62368)    ;; object: 0x21004241 <undefined>
0x4cd621bc   220  stur x0, [x3, #191]
0x4cd621c0   224  ldr x0, pc+432 (addr 0x000000004cd62370)    ;; object: 0x21004241 <undefined>
0x4cd621c4   228  stur x0, [x3, #199]
0x4cd621c8   232  ldr x0, pc+432 (addr 0x000000004cd62378)    ;; object: 0x21004241 <undefined>
0x4cd621cc   236  stur x0, [x3, #207]
0x4cd621d0   240  ldr x0, pc+432 (addr 0x000000004cd62380)    ;; object: 0x21004241 <undefined>
0x4cd621d4   244  stur x0, [x3, #215]
0x4cd621d8   248  ldr x0, pc+432 (addr 0x000000004cd62388)    ;; object: 0x21004241 <undefined>
0x4cd621dc   252  stur x0, [x3, #223]
0x4cd621e0   256  ldr x0, pc+432 (addr 0x000000004cd62390)    ;; object: 0x21004241 <undefined>
0x4cd621e4   260  stur x0, [x3, #231]
0x4cd621e8   264  ldr x0, pc+432 (addr 0x000000004cd62398)    ;; object: 0x21004241 <undefined>
0x4cd621ec   268  stur x0, [x3, #239]
0x4cd621f0   272  ldr x0, pc+432 (addr 0x000000004cd623a0)    ;; object: 0x21004241 <undefined>
0x4cd621f4   276  stur x0, [x3, #247]
0x4cd621f8   280  ldr x0, pc+432 (addr 0x000000004cd623a8)    ;; object: 0x21004241 <undefined>
0x4cd621fc   284  stur x0, [x3, #255]
0x4cd62200   288  ldr x0, pc+432 (addr 0x000000004cd623b0)    ;; object: 0x21004241 <undefined>
0x4cd62204   292  movz x16, #0x107
0x4cd62208   296  str x0, [x3, x16]
0x4cd6220c   300  ldr x0, pc+428 (addr 0x000000004cd623b8)    ;; object: 0x21004241 <undefined>
0x4cd62210   304  movz x16, #0x10f
0x4cd62214   308  str x0, [x3, x16]
0x4cd62218   312  ldr x0, pc+424 (addr 0x000000004cd623c0)    ;; object: 0x21004241 <undefined>
0x4cd6221c   316  movz x16, #0x117
0x4cd62220   320  str x0, [x3, x16]
0x4cd62224   324  ldr x0, pc+420 (addr 0x000000004cd623c8)    ;; object: 0x21004241 <undefined>
0x4cd62228   328  movz x16, #0x11f
0x4cd6222c   332  str x0, [x3, x16]
0x4cd62230   336  ldr x0, pc+416 (addr 0x000000004cd623d0)    ;; object: 0x21004241 <undefined>
0x4cd62234   340  movz x16, #0x127
0x4cd62238   344  str x0, [x3, x16]
0x4cd6223c   348  ldr x0, pc+412 (addr 0x000000004cd623d8)    ;; object: 0x21004241 <undefined>
0x4cd62240   352  movz x16, #0x12f
0x4cd62244   356  str x0, [x3, x16]
0x4cd62248   360  ldr x0, pc+408 (addr 0x000000004cd623e0)    ;; object: 0x21004241 <undefined>
0x4cd6224c   364  movz x16, #0x137
0x4cd62250   368  str x0, [x3, x16]
0x4cd62254   372  mov x0, x3
0x4cd62258   376  ret
0x4cd6225c   380  sub csp, jssp, #0x10 (16)
0x4cd62260   384  stp fp, lr, [jssp, #-16]!
0x4cd62264   388  movz fp, #0xa00000000
0x4cd62268   392  sub csp, jssp, #0x8 (8)
0x4cd6226c   396  str fp, [jssp, #-8]!
0x4cd62270   400  add fp, jssp, #0x8 (8)
0x4cd62274   404  movz x3, #0x0
0x4cd62278   408  mov x16, lr
0x4cd6227c   412  ldr x17, pc+364 (addr 0x000000004cd623e8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd62280   416  blr x17
0x4cd62284   420  movz x0, #0x14000000000
0x4cd62288   424  movz x10, #0x0
0x4cd6228c   428  sub csp, jssp, #0x10 (16)
0x4cd62290   432  stp x10, x0, [jssp, #-16]!
0x4cd62294   436  movz x0, #0x2
0x4cd62298   440  movz x1, #0x5b88
0x4cd6229c   444  movk x1, #0xe2, lsl #16
0x4cd622a0   448  ldr x16, pc+336 (addr 0x000000004cd623f0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd622a4   452  blr x16
0x4cd622a8   456  str x0, [jssp, #24]
0x4cd622ac   460  ldr x16, pc+332 (addr 0x000000004cd623f8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd622b0   464  blr x16
0x4cd622b4   468  ldr lr, [jssp, #16]
0x4cd622b8   472  ldp xzr, fp, [jssp], #24
0x4cd622bc   476  b #-0x1bc (addr 0x4cd62100)
0x4cd622c0   480  580009ff       constant pool begin (num_const = 79)    ;; constant pool
0x4cd622c4   484  d63f03e0       constant
0x4cd622c8   488  2a806149       constant
0x4cd622cc   492  00000000       constant
0x4cd622d0   496  21004519       constant
0x4cd622d4   500  00000000       constant
0x4cd622d8   504  21004241       constant
0x4cd622dc   508  00000000       constant
0x4cd622e0   512  21004241       constant
0x4cd622e4   516  00000000       constant
0x4cd622e8   520  21004241       constant
0x4cd622ec   524  00000000       constant
0x4cd622f0   528  21004241       constant
0x4cd622f4   532  00000000       constant
0x4cd622f8   536  21004241       constant
0x4cd622fc   540  00000000       constant
0x4cd62300   544  21004241       constant
0x4cd62304   548  00000000       constant
0x4cd62308   552  21004241       constant
0x4cd6230c   556  00000000       constant
0x4cd62310   560  21004241       constant
0x4cd62314   564  00000000       constant
0x4cd62318   568  21004241       constant
0x4cd6231c   572  00000000       constant
0x4cd62320   576  21004241       constant
0x4cd62324   580  00000000       constant
0x4cd62328   584  21004241       constant
0x4cd6232c   588  00000000       constant
0x4cd62330   592  21004241       constant
0x4cd62334   596  00000000       constant
0x4cd62338   600  21004241       constant
0x4cd6233c   604  00000000       constant
0x4cd62340   608  21004241       constant
0x4cd62344   612  00000000       constant
0x4cd62348   616  21004241       constant
0x4cd6234c   620  00000000       constant
0x4cd62350   624  21004241       constant
0x4cd62354   628  00000000       constant
0x4cd62358   632  21004241       constant
0x4cd6235c   636  00000000       constant
0x4cd62360   640  21004241       constant
0x4cd62364   644  00000000       constant
0x4cd62368   648  21004241       constant
0x4cd6236c   652  00000000       constant
0x4cd62370   656  21004241       constant
0x4cd62374   660  00000000       constant
0x4cd62378   664  21004241       constant
0x4cd6237c   668  00000000       constant
0x4cd62380   672  21004241       constant
0x4cd62384   676  00000000       constant
0x4cd62388   680  21004241       constant
0x4cd6238c   684  00000000       constant
0x4cd62390   688  21004241       constant
0x4cd62394   692  00000000       constant
0x4cd62398   696  21004241       constant
0x4cd6239c   700  00000000       constant
0x4cd623a0   704  21004241       constant
0x4cd623a4   708  00000000       constant
0x4cd623a8   712  21004241       constant
0x4cd623ac   716  00000000       constant
0x4cd623b0   720  21004241       constant
0x4cd623b4   724  00000000       constant
0x4cd623b8   728  21004241       constant
0x4cd623bc   732  00000000       constant
0x4cd623c0   736  21004241       constant
0x4cd623c4   740  00000000       constant
0x4cd623c8   744  21004241       constant
0x4cd623cc   748  00000000       constant
0x4cd623d0   752  21004241       constant
0x4cd623d4   756  00000000       constant
0x4cd623d8   760  21004241       constant
0x4cd623dc   764  00000000       constant
0x4cd623e0   768  21004241       constant
0x4cd623e4   772  00000000       constant
0x4cd623e8   776  4cd06820       constant
0x4cd623ec   780  00000000       constant
0x4cd623f0   784  4cd06260       constant
0x4cd623f4   788  00000000       constant
0x4cd623f8   792  4cd068e0       constant
0x4cd623fc   796  00000000       constant


Safepoints (size = 21)
0x4cd622a8   456  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 45)
0x4cd62100  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd62118  embedded object  (0x21004519 <the hole>)
0x4cd62128  embedded object  (0x21004241 <undefined>)
0x4cd62130  embedded object  (0x21004241 <undefined>)
0x4cd62138  embedded object  (0x21004241 <undefined>)
0x4cd62140  embedded object  (0x21004241 <undefined>)
0x4cd62148  embedded object  (0x21004241 <undefined>)
0x4cd62150  embedded object  (0x21004241 <undefined>)
0x4cd62158  embedded object  (0x21004241 <undefined>)
0x4cd62160  embedded object  (0x21004241 <undefined>)
0x4cd62168  embedded object  (0x21004241 <undefined>)
0x4cd62170  embedded object  (0x21004241 <undefined>)
0x4cd62178  embedded object  (0x21004241 <undefined>)
0x4cd62180  embedded object  (0x21004241 <undefined>)
0x4cd62188  embedded object  (0x21004241 <undefined>)
0x4cd62190  embedded object  (0x21004241 <undefined>)
0x4cd62198  embedded object  (0x21004241 <undefined>)
0x4cd621a0  embedded object  (0x21004241 <undefined>)
0x4cd621a8  embedded object  (0x21004241 <undefined>)
0x4cd621b0  embedded object  (0x21004241 <undefined>)
0x4cd621b8  embedded object  (0x21004241 <undefined>)
0x4cd621c0  embedded object  (0x21004241 <undefined>)
0x4cd621c8  embedded object  (0x21004241 <undefined>)
0x4cd621d0  embedded object  (0x21004241 <undefined>)
0x4cd621d8  embedded object  (0x21004241 <undefined>)
0x4cd621e0  embedded object  (0x21004241 <undefined>)
0x4cd621e8  embedded object  (0x21004241 <undefined>)
0x4cd621f0  embedded object  (0x21004241 <undefined>)
0x4cd621f8  embedded object  (0x21004241 <undefined>)
0x4cd62200  embedded object  (0x21004241 <undefined>)
0x4cd6220c  embedded object  (0x21004241 <undefined>)
0x4cd62218  embedded object  (0x21004241 <undefined>)
0x4cd62224  embedded object  (0x21004241 <undefined>)
0x4cd62230  embedded object  (0x21004241 <undefined>)
0x4cd6223c  embedded object  (0x21004241 <undefined>)
0x4cd62248  embedded object  (0x21004241 <undefined>)
0x4cd6227c  code target (STUB)  (0x4cd06820)
0x4cd622a0  code target (STUB)  (0x4cd06260)
0x4cd622ac  code target (STUB)  (0x4cd068e0)
0x4cd622c0  constant pool (size 320)


kind = STUB
major_key = FastNewClosureStub
name = FastNewClosureStub
compiler = crankshaft
Instructions (size = 773)
0x4cd62480     0  movz x1, #0xd2c0
0x4cd62484     4  movk x1, #0x166d, lsl #16
0x4cd62488     8  ldp x3, x0, [x1]
0x4cd6248c    12  adds x16, x3, #0x48 (72)
0x4cd62490    16  ccmp x16, x0, #nzCv, lo
0x4cd62494    20  b.hi #+0x1bc (addr 0x4cd62650)
0x4cd62498    24  str x16, [x1]
0x4cd6249c    28  orr x3, x3, #0x1
0x4cd624a0    32  ldur x0, [cp, #39]
0x4cd624a4    36  movz x16, #0x2d7
0x4cd624a8    40  ldr x1, [x0, x16]
0x4cd624ac    44  stur x1, [x3, #-1]
0x4cd624b0    48  ldr x1, pc+528 (addr 0x000000004cd626c0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd624b4    52  stur x1, [x3, #7]
0x4cd624b8    56  ldr x1, pc+528 (addr 0x000000004cd626c8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd624bc    60  stur x1, [x3, #15]
0x4cd624c0    64  ldr x1, pc+528 (addr 0x000000004cd626d0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd624c4    68  stur x1, [x3, #47]
0x4cd624c8    72  ldr x1, pc+528 (addr 0x000000004cd626d8)    ;; object: 0x21004519 <the hole>
0x4cd624cc    76  stur x1, [x3, #23]
0x4cd624d0    80  stur x2, [x3, #31]
0x4cd624d4    84  stur cp, [x3, #39]
0x4cd624d8    88  ldur x1, [x2, #23]
0x4cd624dc    92  movz x4, #0x0
0x4cd624e0    96  cmp x1, x4
0x4cd624e4   100  b.eq #+0x150 (addr 0x4cd62634)
0x4cd624e8   104  ldur w4, [x1, #11]
0x4cd624ec   108  subs w4, w4, #0x4 (4)
0x4cd624f0   112  b.vs #+0x230 (addr 0x4cd62720)
0x4cd624f4   116  mov x5, x4
0x4cd624f8   120  cmp w5, #0x1 (1)
0x4cd624fc   124  b.lt #+0xb4 (addr 0x4cd625b0)
0x4cd62500   128  add x4, x1, #0xf (15)
0x4cd62504   132  ldr x6, [x4, w5, sxtw #3]
0x4cd62508   136  ldur x4, [x6, #7]
0x4cd6250c   140  add x6, x1, #0x27 (39)
0x4cd62510   144  ldr x7, [x6, w5, sxtw #3]
0x4cd62514   148  add x6, x1, #0x17 (23)
0x4cd62518   152  ldr x8, [x6, w5, sxtw #3]
0x4cd6251c   156  ldur x6, [x8, #7]
0x4cd62520   160  cmp x0, x4
0x4cd62524   164  b.ne #+0x1c (addr 0x4cd62540)
0x4cd62528   168  mov x4, #0xffffffff00000000
0x4cd6252c   172  cmp x7, x4
0x4cd62530   176  b.ne #+0x10 (addr 0x4cd62540)
0x4cd62534   180  movz x4, #0x0
0x4cd62538   184  cmp x6, x4
0x4cd6253c   188  b.ne #+0xc (addr 0x4cd62548)
0x4cd62540   192  sub w5, w5, #0x4 (4)
0x4cd62544   196  b #-0x4c (addr 0x4cd624f8)
0x4cd62548   200  add x4, x1, #0x1f (31)
0x4cd6254c   204  ldr x7, [x4, w5, sxtw #3]
0x4cd62550   208  ldur x7, [x7, #7]
0x4cd62554   212  movz x4, #0x0
0x4cd62558   216  cmp x7, x4
0x4cd6255c   220  b.eq #+0x50 (addr 0x4cd625ac)
0x4cd62560   224  add x4, x6, #0x5f (95)
0x4cd62564   228  stur x4, [x3, #55]
0x4cd62568   232  stur x7, [x3, #47]
0x4cd6256c   236  movz x16, #0x557
0x4cd62570   240  ldr x4, [x0, x16]
0x4cd62574   244  stur x4, [x3, #63]
0x4cd62578   248  mov x4, x3
0x4cd6257c   252  movz x16, #0x557
0x4cd62580   256  str x4, [x0, x16]
0x4cd62584   260  add x6, x0, #0x557 (1367)
0x4cd62588   264  and x4, x0, #0xfffffffffff00000
0x4cd6258c   268  ldr x4, [x4, #8]
0x4cd62590   272  tbz w4, #2, #+0x18 (addr 0x4cd625a8)
0x4cd62594   276  sub csp, jssp, #0x8 (8)
0x4cd62598   280  str lr, [jssp, #-8]!
0x4cd6259c   284  ldr x16, pc+324 (addr 0x000000004cd626e0)    ;; code: STUB, RecordWriteStub, minor: 71808
0x4cd625a0   288  blr x16
0x4cd625a4   292  ldr lr, [jssp], #8
0x4cd625a8   296  b #+0x8 (addr 0x4cd625b0)
0x4cd625ac   300  b #+0x184 (addr 0x4cd62730)
0x4cd625b0   304  cmp w5, #0x1 (1)
0x4cd625b4   308  b.ge #+0x94 (addr 0x4cd62648)
0x4cd625b8   312  ldur x1, [x1, #15]
0x4cd625bc   316  ldur x1, [x1, #7]
0x4cd625c0   320  movz x4, #0x0
0x4cd625c4   324  cmp x1, x4
0x4cd625c8   328  b.eq #+0x54 (addr 0x4cd6261c)
0x4cd625cc   332  add x1, x1, #0x5f (95)
0x4cd625d0   336  stur x1, [x3, #55]
0x4cd625d4   340  ldr x1, pc+276 (addr 0x000000004cd626e8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd625d8   344  stur x1, [x3, #47]
0x4cd625dc   348  movz x16, #0x557
0x4cd625e0   352  ldr x1, [x0, x16]
0x4cd625e4   356  stur x1, [x3, #63]
0x4cd625e8   360  mov x1, x3
0x4cd625ec   364  movz x16, #0x557
0x4cd625f0   368  str x1, [x0, x16]
0x4cd625f4   372  add x2, x0, #0x557 (1367)
0x4cd625f8   376  and x1, x0, #0xfffffffffff00000
0x4cd625fc   380  ldr x1, [x1, #8]
0x4cd62600   384  tbz w1, #2, #+0x18 (addr 0x4cd62618)
0x4cd62604   388  sub csp, jssp, #0x8 (8)
0x4cd62608   392  str lr, [jssp, #-8]!
0x4cd6260c   396  ldr x16, pc+228 (addr 0x000000004cd626f0)    ;; code: STUB, RecordWriteStub, minor: 67616
0x4cd62610   400  blr x16
0x4cd62614   404  ldr lr, [jssp], #8
0x4cd62618   408  b #+0x30 (addr 0x4cd62648)
0x4cd6261c   412  ldr x0, pc+220 (addr 0x000000004cd626f8)    ;; object: 0x21004241 <undefined>
0x4cd62620   416  stur x0, [x3, #63]
0x4cd62624   420  ldur x0, [x2, #15]
0x4cd62628   424  add x0, x0, #0x5f (95)
0x4cd6262c   428  stur x0, [x3, #55]
0x4cd62630   432  b #+0x18 (addr 0x4cd62648)
0x4cd62634   436  ldr x0, pc+204 (addr 0x000000004cd62700)    ;; object: 0x21004241 <undefined>
0x4cd62638   440  stur x0, [x3, #63]
0x4cd6263c   444  ldur x0, [x2, #15]
0x4cd62640   448  add x0, x0, #0x5f (95)
0x4cd62644   452  stur x0, [x3, #55]
0x4cd62648   456  mov x0, x3
0x4cd6264c   460  ret
0x4cd62650   464  sub csp, jssp, #0x10 (16)
0x4cd62654   468  stp fp, lr, [jssp, #-16]!
0x4cd62658   472  movz fp, #0xa00000000
0x4cd6265c   476  sub csp, jssp, #0x8 (8)
0x4cd62660   480  str fp, [jssp, #-8]!
0x4cd62664   484  add fp, jssp, #0x8 (8)
0x4cd62668   488  movz x3, #0x0
0x4cd6266c   492  mov x16, lr
0x4cd62670   496  ldr x17, pc+152 (addr 0x000000004cd62708)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd62674   500  blr x17
0x4cd62678   504  movz x0, #0x4800000000
0x4cd6267c   508  movz x10, #0x0
0x4cd62680   512  sub csp, jssp, #0x10 (16)
0x4cd62684   516  stp x10, x0, [jssp, #-16]!
0x4cd62688   520  movz x0, #0x2
0x4cd6268c   524  movz x1, #0x5b88
0x4cd62690   528  movk x1, #0xe2, lsl #16
0x4cd62694   532  ldr x16, pc+124 (addr 0x000000004cd62710)    ;; code: STUB, CEntryStub, minor: 5
0x4cd62698   536  blr x16
0x4cd6269c   540  str x0, [jssp, #24]
0x4cd626a0   544  ldr x16, pc+120 (addr 0x000000004cd62718)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd626a4   548  blr x16
0x4cd626a8   552  ldr lr, [jssp, #16]
0x4cd626ac   556  ldp xzr, fp, [jssp], #24
0x4cd626b0   560  b #-0x210 (addr 0x4cd624a0)
0x4cd626b4   564  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0x4cd626b8   568  d63f03e0       constant
0x4cd626bc   572  d503201f       constant
0x4cd626c0   576  21004201       constant
0x4cd626c4   580  00000000       constant
0x4cd626c8   584  21004201       constant
0x4cd626cc   588  00000000       constant
0x4cd626d0   592  21004201       constant
0x4cd626d4   596  00000000       constant
0x4cd626d8   600  21004519       constant
0x4cd626dc   604  00000000       constant
0x4cd626e0   608  4cd2d2c0       constant
0x4cd626e4   612  00000000       constant
0x4cd626e8   616  21004201       constant
0x4cd626ec   620  00000000       constant
0x4cd626f0   624  4cd2daa0       constant
0x4cd626f4   628  00000000       constant
0x4cd626f8   632  21004241       constant
0x4cd626fc   636  00000000       constant
0x4cd62700   640  21004241       constant
0x4cd62704   644  00000000       constant
0x4cd62708   648  4cd06820       constant
0x4cd6270c   652  00000000       constant
0x4cd62710   656  4cd06260       constant
0x4cd62714   660  00000000       constant
0x4cd62718   664  4cd068e0       constant
0x4cd6271c   668  00000000       constant
0x4cd62720   672  movz x16, #0x0
0x4cd62724   676  sub csp, jssp, #0x10 (16)
0x4cd62728   680  stp fp, lr, [jssp, #-16]!
0x4cd6272c   684  bl #+0x14 (addr 0x4cd62740)
0x4cd62730   688  movz x16, #0x8
0x4cd62734   692  sub csp, jssp, #0x10 (16)
0x4cd62738   696  stp fp, lr, [jssp, #-16]!
0x4cd6273c   700  bl #+0x4 (addr 0x4cd62740)
0x4cd62740   704  movz x17, #0xa00000000
0x4cd62744   708  sub csp, jssp, #0x10 (16)
0x4cd62748   712  stp x17, cp, [jssp, #-16]!
0x4cd6274c   716  add fp, jssp, #0x10 (16)
0x4cd62750   720  ldr x17, pc+24 (addr 0x000000004cd62768)    ;; lazy deoptimization bailout 0
0x4cd62754   724  add x17, x17, x16
0x4cd62758   728  br x17
0x4cd6275c   732  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd62760   736  d63f03e0       constant
0x4cd62764   740  d503201f       constant
0x4cd62768   744  4cb06000       constant
0x4cd6276c   748  00000000       constant


Safepoints (size = 21)
0x4cd6269c   540  000 | x2 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0x4cd624b0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd624b8  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd624c0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd624c8  embedded object  (0x21004519 <the hole>)
0x4cd6259c  code target (STUB)  (0x4cd2d2c0)
0x4cd625d4  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd6260c  code target (STUB)  (0x4cd2daa0)
0x4cd6261c  embedded object  (0x21004241 <undefined>)
0x4cd62634  embedded object  (0x21004241 <undefined>)
0x4cd62670  code target (STUB)  (0x4cd06820)
0x4cd62694  code target (STUB)  (0x4cd06260)
0x4cd626a0  code target (STUB)  (0x4cd068e0)
0x4cd626b4  constant pool (size 108)
0x4cd62750  runtime entry
0x4cd6275c  constant pool (size 20)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd64020     0  ldur x0, [x1, #7]
0x4cd64024     4  movz x16, #0x10f
0x4cd64028     8  ldr x0, [x0, x16]
0x4cd6402c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd640a0     0  ldur x0, [x1, #7]
0x4cd640a4     4  movz x16, #0x11f
0x4cd640a8     8  ldr x0, [x0, x16]
0x4cd640ac    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd64120     0  ldur x0, [x1, #7]
0x4cd64124     4  movz x16, #0x12f
0x4cd64128     8  ldr x0, [x0, x16]
0x4cd6412c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd641a0     0  ldur x0, [x1, #7]
0x4cd641a4     4  movz x16, #0x127
0x4cd641a8     8  ldr x0, [x0, x16]
0x4cd641ac    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd64220     0  ldur x0, [x1, #7]
0x4cd64224     4  movz x16, #0x137
0x4cd64228     8  ldr x0, [x0, x16]
0x4cd6422c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd642a0     0  ldur x0, [x1, #7]
0x4cd642a4     4  movz x16, #0x13f
0x4cd642a8     8  ldr x0, [x0, x16]
0x4cd642ac    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd64320     0  ldur x0, [x1, #7]
0x4cd64324     4  movz x16, #0x147
0x4cd64328     8  ldr x0, [x0, x16]
0x4cd6432c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 1301)
0x4cd646a0     0  movz x2, #0xd2c0
0x4cd646a4     4  movk x2, #0x166d, lsl #16
0x4cd646a8     8  ldp x3, x0, [x2]
0x4cd646ac    12  adds x16, x3, #0x200 (512)
0x4cd646b0    16  ccmp x16, x0, #nzCv, lo
0x4cd646b4    20  b.hi #+0x288 (addr 0x4cd6493c)
0x4cd646b8    24  str x16, [x2]
0x4cd646bc    28  orr x3, x3, #0x1
0x4cd646c0    32  ldr x0, pc+744 (addr 0x000000004cd649a8)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd646c4    36  stur x0, [x3, #-1]
0x4cd646c8    40  movz x0, #0x3e00000000
0x4cd646cc    44  stur x0, [x3, #7]
0x4cd646d0    48  stur x1, [x3, #15]
0x4cd646d4    52  stur cp, [x3, #23]
0x4cd646d8    56  ldr x0, pc+728 (addr 0x000000004cd649b0)    ;; object: 0x21004519 <the hole>
0x4cd646dc    60  stur x0, [x3, #31]
0x4cd646e0    64  ldur x0, [cp, #39]
0x4cd646e4    68  stur x0, [x3, #39]
0x4cd646e8    72  ldr x0, pc+720 (addr 0x000000004cd649b8)    ;; object: 0x21004241 <undefined>
0x4cd646ec    76  stur x0, [x3, #47]
0x4cd646f0    80  ldr x0, pc+720 (addr 0x000000004cd649c0)    ;; object: 0x21004241 <undefined>
0x4cd646f4    84  stur x0, [x3, #55]
0x4cd646f8    88  ldr x0, pc+720 (addr 0x000000004cd649c8)    ;; object: 0x21004241 <undefined>
0x4cd646fc    92  stur x0, [x3, #63]
0x4cd64700    96  ldr x0, pc+720 (addr 0x000000004cd649d0)    ;; object: 0x21004241 <undefined>
0x4cd64704   100  stur x0, [x3, #71]
0x4cd64708   104  ldr x0, pc+720 (addr 0x000000004cd649d8)    ;; object: 0x21004241 <undefined>
0x4cd6470c   108  stur x0, [x3, #79]
0x4cd64710   112  ldr x0, pc+720 (addr 0x000000004cd649e0)    ;; object: 0x21004241 <undefined>
0x4cd64714   116  stur x0, [x3, #87]
0x4cd64718   120  ldr x0, pc+720 (addr 0x000000004cd649e8)    ;; object: 0x21004241 <undefined>
0x4cd6471c   124  stur x0, [x3, #95]
0x4cd64720   128  ldr x0, pc+720 (addr 0x000000004cd649f0)    ;; object: 0x21004241 <undefined>
0x4cd64724   132  stur x0, [x3, #103]
0x4cd64728   136  ldr x0, pc+720 (addr 0x000000004cd649f8)    ;; object: 0x21004241 <undefined>
0x4cd6472c   140  stur x0, [x3, #111]
0x4cd64730   144  ldr x0, pc+720 (addr 0x000000004cd64a00)    ;; object: 0x21004241 <undefined>
0x4cd64734   148  stur x0, [x3, #119]
0x4cd64738   152  ldr x0, pc+720 (addr 0x000000004cd64a08)    ;; object: 0x21004241 <undefined>
0x4cd6473c   156  stur x0, [x3, #127]
0x4cd64740   160  ldr x0, pc+720 (addr 0x000000004cd64a10)    ;; object: 0x21004241 <undefined>
0x4cd64744   164  stur x0, [x3, #135]
0x4cd64748   168  ldr x0, pc+720 (addr 0x000000004cd64a18)    ;; object: 0x21004241 <undefined>
0x4cd6474c   172  stur x0, [x3, #143]
0x4cd64750   176  ldr x0, pc+720 (addr 0x000000004cd64a20)    ;; object: 0x21004241 <undefined>
0x4cd64754   180  stur x0, [x3, #151]
0x4cd64758   184  ldr x0, pc+720 (addr 0x000000004cd64a28)    ;; object: 0x21004241 <undefined>
0x4cd6475c   188  stur x0, [x3, #159]
0x4cd64760   192  ldr x0, pc+720 (addr 0x000000004cd64a30)    ;; object: 0x21004241 <undefined>
0x4cd64764   196  stur x0, [x3, #167]
0x4cd64768   200  ldr x0, pc+720 (addr 0x000000004cd64a38)    ;; object: 0x21004241 <undefined>
0x4cd6476c   204  stur x0, [x3, #175]
0x4cd64770   208  ldr x0, pc+720 (addr 0x000000004cd64a40)    ;; object: 0x21004241 <undefined>
0x4cd64774   212  stur x0, [x3, #183]
0x4cd64778   216  ldr x0, pc+720 (addr 0x000000004cd64a48)    ;; object: 0x21004241 <undefined>
0x4cd6477c   220  stur x0, [x3, #191]
0x4cd64780   224  ldr x0, pc+720 (addr 0x000000004cd64a50)    ;; object: 0x21004241 <undefined>
0x4cd64784   228  stur x0, [x3, #199]
0x4cd64788   232  ldr x0, pc+720 (addr 0x000000004cd64a58)    ;; object: 0x21004241 <undefined>
0x4cd6478c   236  stur x0, [x3, #207]
0x4cd64790   240  ldr x0, pc+720 (addr 0x000000004cd64a60)    ;; object: 0x21004241 <undefined>
0x4cd64794   244  stur x0, [x3, #215]
0x4cd64798   248  ldr x0, pc+720 (addr 0x000000004cd64a68)    ;; object: 0x21004241 <undefined>
0x4cd6479c   252  stur x0, [x3, #223]
0x4cd647a0   256  ldr x0, pc+720 (addr 0x000000004cd64a70)    ;; object: 0x21004241 <undefined>
0x4cd647a4   260  stur x0, [x3, #231]
0x4cd647a8   264  ldr x0, pc+720 (addr 0x000000004cd64a78)    ;; object: 0x21004241 <undefined>
0x4cd647ac   268  stur x0, [x3, #239]
0x4cd647b0   272  ldr x0, pc+720 (addr 0x000000004cd64a80)    ;; object: 0x21004241 <undefined>
0x4cd647b4   276  stur x0, [x3, #247]
0x4cd647b8   280  ldr x0, pc+720 (addr 0x000000004cd64a88)    ;; object: 0x21004241 <undefined>
0x4cd647bc   284  stur x0, [x3, #255]
0x4cd647c0   288  ldr x0, pc+720 (addr 0x000000004cd64a90)    ;; object: 0x21004241 <undefined>
0x4cd647c4   292  movz x16, #0x107
0x4cd647c8   296  str x0, [x3, x16]
0x4cd647cc   300  ldr x0, pc+716 (addr 0x000000004cd64a98)    ;; object: 0x21004241 <undefined>
0x4cd647d0   304  movz x16, #0x10f
0x4cd647d4   308  str x0, [x3, x16]
0x4cd647d8   312  ldr x0, pc+712 (addr 0x000000004cd64aa0)    ;; object: 0x21004241 <undefined>
0x4cd647dc   316  movz x16, #0x117
0x4cd647e0   320  str x0, [x3, x16]
0x4cd647e4   324  ldr x0, pc+708 (addr 0x000000004cd64aa8)    ;; object: 0x21004241 <undefined>
0x4cd647e8   328  movz x16, #0x11f
0x4cd647ec   332  str x0, [x3, x16]
0x4cd647f0   336  ldr x0, pc+704 (addr 0x000000004cd64ab0)    ;; object: 0x21004241 <undefined>
0x4cd647f4   340  movz x16, #0x127
0x4cd647f8   344  str x0, [x3, x16]
0x4cd647fc   348  ldr x0, pc+700 (addr 0x000000004cd64ab8)    ;; object: 0x21004241 <undefined>
0x4cd64800   352  movz x16, #0x12f
0x4cd64804   356  str x0, [x3, x16]
0x4cd64808   360  ldr x0, pc+696 (addr 0x000000004cd64ac0)    ;; object: 0x21004241 <undefined>
0x4cd6480c   364  movz x16, #0x137
0x4cd64810   368  str x0, [x3, x16]
0x4cd64814   372  ldr x0, pc+692 (addr 0x000000004cd64ac8)    ;; object: 0x21004241 <undefined>
0x4cd64818   376  movz x16, #0x13f
0x4cd6481c   380  str x0, [x3, x16]
0x4cd64820   384  ldr x0, pc+688 (addr 0x000000004cd64ad0)    ;; object: 0x21004241 <undefined>
0x4cd64824   388  movz x16, #0x147
0x4cd64828   392  str x0, [x3, x16]
0x4cd6482c   396  ldr x0, pc+684 (addr 0x000000004cd64ad8)    ;; object: 0x21004241 <undefined>
0x4cd64830   400  movz x16, #0x14f
0x4cd64834   404  str x0, [x3, x16]
0x4cd64838   408  ldr x0, pc+680 (addr 0x000000004cd64ae0)    ;; object: 0x21004241 <undefined>
0x4cd6483c   412  movz x16, #0x157
0x4cd64840   416  str x0, [x3, x16]
0x4cd64844   420  ldr x0, pc+676 (addr 0x000000004cd64ae8)    ;; object: 0x21004241 <undefined>
0x4cd64848   424  movz x16, #0x15f
0x4cd6484c   428  str x0, [x3, x16]
0x4cd64850   432  ldr x0, pc+672 (addr 0x000000004cd64af0)    ;; object: 0x21004241 <undefined>
0x4cd64854   436  movz x16, #0x167
0x4cd64858   440  str x0, [x3, x16]
0x4cd6485c   444  ldr x0, pc+668 (addr 0x000000004cd64af8)    ;; object: 0x21004241 <undefined>
0x4cd64860   448  movz x16, #0x16f
0x4cd64864   452  str x0, [x3, x16]
0x4cd64868   456  ldr x0, pc+664 (addr 0x000000004cd64b00)    ;; object: 0x21004241 <undefined>
0x4cd6486c   460  movz x16, #0x177
0x4cd64870   464  str x0, [x3, x16]
0x4cd64874   468  ldr x0, pc+660 (addr 0x000000004cd64b08)    ;; object: 0x21004241 <undefined>
0x4cd64878   472  movz x16, #0x17f
0x4cd6487c   476  str x0, [x3, x16]
0x4cd64880   480  ldr x0, pc+656 (addr 0x000000004cd64b10)    ;; object: 0x21004241 <undefined>
0x4cd64884   484  movz x16, #0x187
0x4cd64888   488  str x0, [x3, x16]
0x4cd6488c   492  ldr x0, pc+652 (addr 0x000000004cd64b18)    ;; object: 0x21004241 <undefined>
0x4cd64890   496  movz x16, #0x18f
0x4cd64894   500  str x0, [x3, x16]
0x4cd64898   504  ldr x0, pc+648 (addr 0x000000004cd64b20)    ;; object: 0x21004241 <undefined>
0x4cd6489c   508  movz x16, #0x197
0x4cd648a0   512  str x0, [x3, x16]
0x4cd648a4   516  ldr x0, pc+644 (addr 0x000000004cd64b28)    ;; object: 0x21004241 <undefined>
0x4cd648a8   520  movz x16, #0x19f
0x4cd648ac   524  str x0, [x3, x16]
0x4cd648b0   528  ldr x0, pc+640 (addr 0x000000004cd64b30)    ;; object: 0x21004241 <undefined>
0x4cd648b4   532  movz x16, #0x1a7
0x4cd648b8   536  str x0, [x3, x16]
0x4cd648bc   540  ldr x0, pc+636 (addr 0x000000004cd64b38)    ;; object: 0x21004241 <undefined>
0x4cd648c0   544  movz x16, #0x1af
0x4cd648c4   548  str x0, [x3, x16]
0x4cd648c8   552  ldr x0, pc+632 (addr 0x000000004cd64b40)    ;; object: 0x21004241 <undefined>
0x4cd648cc   556  movz x16, #0x1b7
0x4cd648d0   560  str x0, [x3, x16]
0x4cd648d4   564  ldr x0, pc+628 (addr 0x000000004cd64b48)    ;; object: 0x21004241 <undefined>
0x4cd648d8   568  movz x16, #0x1bf
0x4cd648dc   572  str x0, [x3, x16]
0x4cd648e0   576  ldr x0, pc+624 (addr 0x000000004cd64b50)    ;; object: 0x21004241 <undefined>
0x4cd648e4   580  movz x16, #0x1c7
0x4cd648e8   584  str x0, [x3, x16]
0x4cd648ec   588  ldr x0, pc+620 (addr 0x000000004cd64b58)    ;; object: 0x21004241 <undefined>
0x4cd648f0   592  movz x16, #0x1cf
0x4cd648f4   596  str x0, [x3, x16]
0x4cd648f8   600  ldr x0, pc+616 (addr 0x000000004cd64b60)    ;; object: 0x21004241 <undefined>
0x4cd648fc   604  movz x16, #0x1d7
0x4cd64900   608  str x0, [x3, x16]
0x4cd64904   612  ldr x0, pc+612 (addr 0x000000004cd64b68)    ;; object: 0x21004241 <undefined>
0x4cd64908   616  movz x16, #0x1df
0x4cd6490c   620  str x0, [x3, x16]
0x4cd64910   624  ldr x0, pc+608 (addr 0x000000004cd64b70)    ;; object: 0x21004241 <undefined>
0x4cd64914   628  movz x16, #0x1e7
0x4cd64918   632  str x0, [x3, x16]
0x4cd6491c   636  ldr x0, pc+604 (addr 0x000000004cd64b78)    ;; object: 0x21004241 <undefined>
0x4cd64920   640  movz x16, #0x1ef
0x4cd64924   644  str x0, [x3, x16]
0x4cd64928   648  ldr x0, pc+600 (addr 0x000000004cd64b80)    ;; object: 0x21004241 <undefined>
0x4cd6492c   652  movz x16, #0x1f7
0x4cd64930   656  str x0, [x3, x16]
0x4cd64934   660  mov x0, x3
0x4cd64938   664  ret
0x4cd6493c   668  sub csp, jssp, #0x10 (16)
0x4cd64940   672  stp fp, lr, [jssp, #-16]!
0x4cd64944   676  movz fp, #0xa00000000
0x4cd64948   680  sub csp, jssp, #0x8 (8)
0x4cd6494c   684  str fp, [jssp, #-8]!
0x4cd64950   688  add fp, jssp, #0x8 (8)
0x4cd64954   692  movz x3, #0x0
0x4cd64958   696  mov x16, lr
0x4cd6495c   700  ldr x17, pc+556 (addr 0x000000004cd64b88)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd64960   704  blr x17
0x4cd64964   708  movz x0, #0x20000000000
0x4cd64968   712  movz x10, #0x0
0x4cd6496c   716  sub csp, jssp, #0x10 (16)
0x4cd64970   720  stp x10, x0, [jssp, #-16]!
0x4cd64974   724  movz x0, #0x2
0x4cd64978   728  movz x1, #0x5b88
0x4cd6497c   732  movk x1, #0xe2, lsl #16
0x4cd64980   736  ldr x16, pc+528 (addr 0x000000004cd64b90)    ;; code: STUB, CEntryStub, minor: 5
0x4cd64984   740  blr x16
0x4cd64988   744  str x0, [jssp, #24]
0x4cd6498c   748  ldr x16, pc+524 (addr 0x000000004cd64b98)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd64990   752  blr x16
0x4cd64994   756  ldr lr, [jssp, #16]
0x4cd64998   760  ldp xzr, fp, [jssp], #24
0x4cd6499c   764  b #-0x2dc (addr 0x4cd646c0)
0x4cd649a0   768  58000fff       constant pool begin (num_const = 127)    ;; constant pool
0x4cd649a4   772  d63f03e0       constant
0x4cd649a8   776  2a806149       constant
0x4cd649ac   780  00000000       constant
0x4cd649b0   784  21004519       constant
0x4cd649b4   788  00000000       constant
0x4cd649b8   792  21004241       constant
0x4cd649bc   796  00000000       constant
0x4cd649c0   800  21004241       constant
0x4cd649c4   804  00000000       constant
0x4cd649c8   808  21004241       constant
0x4cd649cc   812  00000000       constant
0x4cd649d0   816  21004241       constant
0x4cd649d4   820  00000000       constant
0x4cd649d8   824  21004241       constant
0x4cd649dc   828  00000000       constant
0x4cd649e0   832  21004241       constant
0x4cd649e4   836  00000000       constant
0x4cd649e8   840  21004241       constant
0x4cd649ec   844  00000000       constant
0x4cd649f0   848  21004241       constant
0x4cd649f4   852  00000000       constant
0x4cd649f8   856  21004241       constant
0x4cd649fc   860  00000000       constant
0x4cd64a00   864  21004241       constant
0x4cd64a04   868  00000000       constant
0x4cd64a08   872  21004241       constant
0x4cd64a0c   876  00000000       constant
0x4cd64a10   880  21004241       constant
0x4cd64a14   884  00000000       constant
0x4cd64a18   888  21004241       constant
0x4cd64a1c   892  00000000       constant
0x4cd64a20   896  21004241       constant
0x4cd64a24   900  00000000       constant
0x4cd64a28   904  21004241       constant
0x4cd64a2c   908  00000000       constant
0x4cd64a30   912  21004241       constant
0x4cd64a34   916  00000000       constant
0x4cd64a38   920  21004241       constant
0x4cd64a3c   924  00000000       constant
0x4cd64a40   928  21004241       constant
0x4cd64a44   932  00000000       constant
0x4cd64a48   936  21004241       constant
0x4cd64a4c   940  00000000       constant
0x4cd64a50   944  21004241       constant
0x4cd64a54   948  00000000       constant
0x4cd64a58   952  21004241       constant
0x4cd64a5c   956  00000000       constant
0x4cd64a60   960  21004241       constant
0x4cd64a64   964  00000000       constant
0x4cd64a68   968  21004241       constant
0x4cd64a6c   972  00000000       constant
0x4cd64a70   976  21004241       constant
0x4cd64a74   980  00000000       constant
0x4cd64a78   984  21004241       constant
0x4cd64a7c   988  00000000       constant
0x4cd64a80   992  21004241       constant
0x4cd64a84   996  00000000       constant
0x4cd64a88  1000  21004241       constant
0x4cd64a8c  1004  00000000       constant
0x4cd64a90  1008  21004241       constant
0x4cd64a94  1012  00000000       constant
0x4cd64a98  1016  21004241       constant
0x4cd64a9c  1020  00000000       constant
0x4cd64aa0  1024  21004241       constant
0x4cd64aa4  1028  00000000       constant
0x4cd64aa8  1032  21004241       constant
0x4cd64aac  1036  00000000       constant
0x4cd64ab0  1040  21004241       constant
0x4cd64ab4  1044  00000000       constant
0x4cd64ab8  1048  21004241       constant
0x4cd64abc  1052  00000000       constant
0x4cd64ac0  1056  21004241       constant
0x4cd64ac4  1060  00000000       constant
0x4cd64ac8  1064  21004241       constant
0x4cd64acc  1068  00000000       constant
0x4cd64ad0  1072  21004241       constant
0x4cd64ad4  1076  00000000       constant
0x4cd64ad8  1080  21004241       constant
0x4cd64adc  1084  00000000       constant
0x4cd64ae0  1088  21004241       constant
0x4cd64ae4  1092  00000000       constant
0x4cd64ae8  1096  21004241       constant
0x4cd64aec  1100  00000000       constant
0x4cd64af0  1104  21004241       constant
0x4cd64af4  1108  00000000       constant
0x4cd64af8  1112  21004241       constant
0x4cd64afc  1116  00000000       constant
0x4cd64b00  1120  21004241       constant
0x4cd64b04  1124  00000000       constant
0x4cd64b08  1128  21004241       constant
0x4cd64b0c  1132  00000000       constant
0x4cd64b10  1136  21004241       constant
0x4cd64b14  1140  00000000       constant
0x4cd64b18  1144  21004241       constant
0x4cd64b1c  1148  00000000       constant
0x4cd64b20  1152  21004241       constant
0x4cd64b24  1156  00000000       constant
0x4cd64b28  1160  21004241       constant
0x4cd64b2c  1164  00000000       constant
0x4cd64b30  1168  21004241       constant
0x4cd64b34  1172  00000000       constant
0x4cd64b38  1176  21004241       constant
0x4cd64b3c  1180  00000000       constant
0x4cd64b40  1184  21004241       constant
0x4cd64b44  1188  00000000       constant
0x4cd64b48  1192  21004241       constant
0x4cd64b4c  1196  00000000       constant
0x4cd64b50  1200  21004241       constant
0x4cd64b54  1204  00000000       constant
0x4cd64b58  1208  21004241       constant
0x4cd64b5c  1212  00000000       constant
0x4cd64b60  1216  21004241       constant
0x4cd64b64  1220  00000000       constant
0x4cd64b68  1224  21004241       constant
0x4cd64b6c  1228  00000000       constant
0x4cd64b70  1232  21004241       constant
0x4cd64b74  1236  00000000       constant
0x4cd64b78  1240  21004241       constant
0x4cd64b7c  1244  00000000       constant
0x4cd64b80  1248  21004241       constant
0x4cd64b84  1252  00000000       constant
0x4cd64b88  1256  4cd06820       constant
0x4cd64b8c  1260  00000000       constant
0x4cd64b90  1264  4cd06260       constant
0x4cd64b94  1268  00000000       constant
0x4cd64b98  1272  4cd068e0       constant
0x4cd64b9c  1276  00000000       constant


Safepoints (size = 21)
0x4cd64988   744  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 69)
0x4cd646c0  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd646d8  embedded object  (0x21004519 <the hole>)
0x4cd646e8  embedded object  (0x21004241 <undefined>)
0x4cd646f0  embedded object  (0x21004241 <undefined>)
0x4cd646f8  embedded object  (0x21004241 <undefined>)
0x4cd64700  embedded object  (0x21004241 <undefined>)
0x4cd64708  embedded object  (0x21004241 <undefined>)
0x4cd64710  embedded object  (0x21004241 <undefined>)
0x4cd64718  embedded object  (0x21004241 <undefined>)
0x4cd64720  embedded object  (0x21004241 <undefined>)
0x4cd64728  embedded object  (0x21004241 <undefined>)
0x4cd64730  embedded object  (0x21004241 <undefined>)
0x4cd64738  embedded object  (0x21004241 <undefined>)
0x4cd64740  embedded object  (0x21004241 <undefined>)
0x4cd64748  embedded object  (0x21004241 <undefined>)
0x4cd64750  embedded object  (0x21004241 <undefined>)
0x4cd64758  embedded object  (0x21004241 <undefined>)
0x4cd64760  embedded object  (0x21004241 <undefined>)
0x4cd64768  embedded object  (0x21004241 <undefined>)
0x4cd64770  embedded object  (0x21004241 <undefined>)
0x4cd64778  embedded object  (0x21004241 <undefined>)
0x4cd64780  embedded object  (0x21004241 <undefined>)
0x4cd64788  embedded object  (0x21004241 <undefined>)
0x4cd64790  embedded object  (0x21004241 <undefined>)
0x4cd64798  embedded object  (0x21004241 <undefined>)
0x4cd647a0  embedded object  (0x21004241 <undefined>)
0x4cd647a8  embedded object  (0x21004241 <undefined>)
0x4cd647b0  embedded object  (0x21004241 <undefined>)
0x4cd647b8  embedded object  (0x21004241 <undefined>)
0x4cd647c0  embedded object  (0x21004241 <undefined>)
0x4cd647cc  embedded object  (0x21004241 <undefined>)
0x4cd647d8  embedded object  (0x21004241 <undefined>)
0x4cd647e4  embedded object  (0x21004241 <undefined>)
0x4cd647f0  embedded object  (0x21004241 <undefined>)
0x4cd647fc  embedded object  (0x21004241 <undefined>)
0x4cd64808  embedded object  (0x21004241 <undefined>)
0x4cd64814  embedded object  (0x21004241 <undefined>)
0x4cd64820  embedded object  (0x21004241 <undefined>)
0x4cd6482c  embedded object  (0x21004241 <undefined>)
0x4cd64838  embedded object  (0x21004241 <undefined>)
0x4cd64844  embedded object  (0x21004241 <undefined>)
0x4cd64850  embedded object  (0x21004241 <undefined>)
0x4cd6485c  embedded object  (0x21004241 <undefined>)
0x4cd64868  embedded object  (0x21004241 <undefined>)
0x4cd64874  embedded object  (0x21004241 <undefined>)
0x4cd64880  embedded object  (0x21004241 <undefined>)
0x4cd6488c  embedded object  (0x21004241 <undefined>)
0x4cd64898  embedded object  (0x21004241 <undefined>)
0x4cd648a4  embedded object  (0x21004241 <undefined>)
0x4cd648b0  embedded object  (0x21004241 <undefined>)
0x4cd648bc  embedded object  (0x21004241 <undefined>)
0x4cd648c8  embedded object  (0x21004241 <undefined>)
0x4cd648d4  embedded object  (0x21004241 <undefined>)
0x4cd648e0  embedded object  (0x21004241 <undefined>)
0x4cd648ec  embedded object  (0x21004241 <undefined>)
0x4cd648f8  embedded object  (0x21004241 <undefined>)
0x4cd64904  embedded object  (0x21004241 <undefined>)
0x4cd64910  embedded object  (0x21004241 <undefined>)
0x4cd6491c  embedded object  (0x21004241 <undefined>)
0x4cd64928  embedded object  (0x21004241 <undefined>)
0x4cd6495c  code target (STUB)  (0x4cd06820)
0x4cd64980  code target (STUB)  (0x4cd06260)
0x4cd6498c  code target (STUB)  (0x4cd068e0)
0x4cd649a0  constant pool (size 512)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cd67340     0  ldur x0, [x1, #7]
0x4cd67344     4  ldur x0, [x0, #55]
0x4cd67348     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cd673c0     0  ldur x0, [x1, #7]
0x4cd673c4     4  ldur x0, [x0, #39]
0x4cd673c8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cd67440     0  ldur x0, [x1, #7]
0x4cd67444     4  ldur x0, [x0, #47]
0x4cd67448     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cd674c0     0  ldur x0, [x1, #7]
0x4cd674c4     4  ldur x0, [x0, #63]
0x4cd674c8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cd67540     0  ldur x0, [x1, #7]
0x4cd67544     4  ldur x0, [x0, #127]
0x4cd67548     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cd675c0     0  ldur x0, [x1, #7]
0x4cd675c4     4  ldur x0, [x0, #167]
0x4cd675c8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd67640     0  ldur x0, [x1, #-1]
0x4cd67644     4  ldur x0, [x0, #47]
0x4cd67648     8  movz x16, #0x617
0x4cd6764c    12  ldr x0, [x0, x16]
0x4cd67650    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd676c0     0  ldur x0, [x1, #7]
0x4cd676c4     4  movz x16, #0x157
0x4cd676c8     8  ldr x0, [x0, x16]
0x4cd676cc    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = INTERNALIZED_STRING*INTERNALIZED_STRING -> INTERNALIZED_STRING
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 184)
0x4cd67de0     0  and x16, x1, x0
0x4cd67de4     4  tbz w16, #0, #+0x2c (addr 0x4cd67e10)
0x4cd67de8     8  ldur x11, [x1, #-1]
0x4cd67dec    12  ldur x10, [x0, #-1]
0x4cd67df0    16  ldrb w11, [x11, #11]
0x4cd67df4    20  ldrb w10, [x10, #11]
0x4cd67df8    24  orr x12, x11, x10
0x4cd67dfc    28  tst x12, #0xc0
0x4cd67e00    32  b.ne #+0x10 (addr 0x4cd67e10)
0x4cd67e04    36  cmp x1, x0
0x4cd67e08    40  cset x0, ne
0x4cd67e0c    44  ret
0x4cd67e10    48  movz x16, #0xc00000000
0x4cd67e14    52  sub csp, jssp, #0x10 (16)
0x4cd67e18    56  stp fp, lr, [jssp, #-16]!
0x4cd67e1c    60  sub csp, jssp, #0x10 (16)
0x4cd67e20    64  str x16, [jssp, #-8]!
0x4cd67e24    68  ldr x17, pc+92 (addr 0x000000004cd67e80)    ;; object: 0x4cd67d81 <Code: COMPARE_IC>
0x4cd67e28    72  sub csp, jssp, #0x10 (16)
0x4cd67e2c    76  str x17, [jssp, #-8]!
0x4cd67e30    80  add fp, jssp, #0x10 (16)
0x4cd67e34    84  sub csp, jssp, #0x18 (24)
0x4cd67e38    88  stp lr, x0, [jssp, #-24]!
0x4cd67e3c    92  str x1, [jssp, #16]
0x4cd67e40    96  movz x10, #0x2f00000000
0x4cd67e44   100  sub csp, jssp, #0x18 (24)
0x4cd67e48   104  stp x10, x0, [jssp, #-24]!
0x4cd67e4c   108  str x1, [jssp, #16]
0x4cd67e50   112  movz x0, #0x3
0x4cd67e54   116  ldr x1, pc+52 (addr 0x000000004cd67e88)    ;; external reference (Runtime::CompareIC_Miss)
0x4cd67e58   120  ldr x16, pc+56 (addr 0x000000004cd67e90)    ;; code: STUB, CEntryStub, minor: 4
0x4cd67e5c   124  blr x16
0x4cd67e60   128  add x11, x0, #0x5f (95)
0x4cd67e64   132  ldr x1, [jssp, #16]
0x4cd67e68   136  ldp lr, x0, [jssp], #24
0x4cd67e6c   140  mov jssp, fp
0x4cd67e70   144  ldp fp, lr, [jssp], #16
0x4cd67e74   148  br x11
0x4cd67e78   152  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd67e7c   156  d63f03e0       constant
0x4cd67e80   160  4cd67d81       constant
0x4cd67e84   164  00000000       constant
0x4cd67e88   168  00c8a980       constant
0x4cd67e8c   172  00000000       constant
0x4cd67e90   176  4cd06060       constant
0x4cd67e94   180  00000000       constant


RelocInfo (size = 12)
0x4cd67e24  embedded object  (0x4cd67d81 <Code: COMPARE_IC>)
0x4cd67e54  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cd67e58  code target (STUB)  (0x4cd06060)
0x4cd67e78  constant pool (size 32)


kind = STUB
major_key = DirectCEntryStub
name = DirectCEntryStub
compiler = unknown
Instructions (size = 16)
0x4cd68200     0  str lr, [csp]
0x4cd68204     4  blr x10
0x4cd68208     8  ldr lr, [csp]
0x4cd6820c    12  ret


RelocInfo (size = 0)


kind = STUB
major_key = CallApiGetterStub
name = CallApiGetterStub
compiler = unknown
Instructions (size = 440)
0x4cd68280     0  mov x0, jssp
0x4cd68284     4  add x1, x0, #0x8 (8)
0x4cd68288     8  sub csp, jssp, #0x10 (16)
0x4cd6828c    12  stp fp, lr, [jssp, #-16]!
0x4cd68290    16  mov fp, jssp
0x4cd68294    20  movz x10, #0x300000000
0x4cd68298    24  sub csp, jssp, #0x8 (8)
0x4cd6829c    28  str x10, [jssp, #-8]!
0x4cd682a0    32  sub csp, jssp, #0x8 (8)
0x4cd682a4    36  str xzr, [jssp, #-8]!
0x4cd682a8    40  ldr x10, pc+288 (addr 0x000000004cd683c8)    ;; object: 0x4cd68221 <Code: STUB>
0x4cd682ac    44  sub csp, jssp, #0x8 (8)
0x4cd682b0    48  str x10, [jssp, #-8]!
0x4cd682b4    52  ldr x10, pc+284 (addr 0x000000004cd683d0)    ;; external reference (Isolate::c_entry_fp_address)
0x4cd682b8    56  str fp, [x10]
0x4cd682bc    60  ldr x10, pc+284 (addr 0x000000004cd683d8)    ;; external reference (Isolate::context_address)
0x4cd682c0    64  str cp, [x10]
0x4cd682c4    68  sub csp, jssp, #0x30 (48)
0x4cd682c8    72  sub jssp, jssp, #0x30 (48)
0x4cd682cc    76  and csp, jssp, #0xfffffffffffffff0
0x4cd682d0    80  add x10, csp, #0x8 (8)
0x4cd682d4    84  stur x10, [fp, #-16]
0x4cd682d8    88  str x1, [csp, #8]
0x4cd682dc    92  add x1, csp, #0x8 (8)
0x4cd682e0    96  ldr x10, pc+256 (addr 0x000000004cd683e0)    ;; external reference (CpuProfiler::is_profiling)
0x4cd682e4   100  ldrb w10, [x10]
0x4cd682e8   104  cbz w10, #+0xc (addr 0x4cd682f4)
0x4cd682ec   108  ldr x3, pc+252 (addr 0x000000004cd683e8)    ;; external reference (InvokeAccessorGetterCallback)
0x4cd682f0   112  b #+0x8 (addr 0x4cd682f8)
0x4cd682f4   116  mov x3, x2
0x4cd682f8   120  str x19, [csp, #16]
0x4cd682fc   124  str x20, [csp, #24]
0x4cd68300   128  str x21, [csp, #32]
0x4cd68304   132  str x22, [csp, #40]
0x4cd68308   136  ldr x22, pc+232 (addr 0x000000004cd683f0)    ;; external reference (HandleScope::next)
0x4cd6830c   140  ldr x19, [x22]
0x4cd68310   144  ldr x20, [x22, #8]
0x4cd68314   148  ldr w21, [x22, #16]
0x4cd68318   152  add w21, w21, #0x1 (1)
0x4cd6831c   156  str w21, [x22, #16]
0x4cd68320   160  ldr lr, pc+216 (addr 0x000000004cd683f8)    ;; code: STUB, DirectCEntryStub, minor: 0
0x4cd68324   164  mov x10, x3
0x4cd68328   168  blr lr
0x4cd6832c   172  ldr x0, [fp, #56]
0x4cd68330   176  str x19, [x22]
0x4cd68334   180  sub w21, w21, #0x1 (1)
0x4cd68338   184  str w21, [x22, #16]
0x4cd6833c   188  ldr x1, [x22, #8]
0x4cd68340   192  cmp x20, x1
0x4cd68344   196  b.ne #+0x58 (addr 0x4cd6839c)
0x4cd68348   200  ldr x19, [csp, #16]
0x4cd6834c   204  ldr x20, [csp, #24]
0x4cd68350   208  ldr x21, [csp, #32]
0x4cd68354   212  ldr x22, [csp, #40]
0x4cd68358   216  ldr x1, pc+168 (addr 0x000000004cd68400)    ;; external reference (Isolate::context_address)
0x4cd6835c   220  ldr cp, [x1]
0x4cd68360   224  ldr x1, pc+168 (addr 0x000000004cd68408)    ;; external reference (Isolate::c_entry_fp_address)
0x4cd68364   228  str xzr, [x1]
0x4cd68368   232  mov jssp, fp
0x4cd6836c   236  ldp fp, lr, [jssp], #16
0x4cd68370   240  ldr x5, pc+160 (addr 0x000000004cd68410)    ;; external reference (Isolate::scheduled_exception)
0x4cd68374   244  ldr x5, [x5]
0x4cd68378   248  ldr x16, [x26, #88]
0x4cd6837c   252  cmp x5, x16
0x4cd68380   256  b.ne #+0xc (addr 0x4cd6838c)
0x4cd68384   260  add jssp, jssp, #0x40 (64)
0x4cd68388   264  ret
0x4cd6838c   268  movz x0, #0x0
0x4cd68390   272  ldr x1, pc+136 (addr 0x000000004cd68418)    ;; external reference (Runtime::PromoteScheduledException)
0x4cd68394   276  ldr x16, pc+140 (addr 0x000000004cd68420)    ;; code: STUB, CEntryStub, minor: 4
0x4cd68398   280  br x16
0x4cd6839c   284  str x20, [x22, #8]
0x4cd683a0   288  mov x19, x0
0x4cd683a4   292  ldr x0, pc+132 (addr 0x000000004cd68428)    ;; external reference (isolate)
0x4cd683a8   296  ldr x16, pc+136 (addr 0x000000004cd68430)    ;; external reference (HandleScope::DeleteExtensions)
0x4cd683ac   300  and csp, jssp, #0xfffffffffffffff0
0x4cd683b0   304  blr x16
0x4cd683b4   308  mov x0, x19
0x4cd683b8   312  b #-0x70 (addr 0x4cd68348)
0x4cd683bc   316  580003df       constant pool begin (num_const = 30)    ;; constant pool
0x4cd683c0   320  d63f03e0       constant
0x4cd683c4   324  d503201f       constant
0x4cd683c8   328  4cd68221       constant
0x4cd683cc   332  00000000       constant
0x4cd683d0   336  166dddf8       constant
0x4cd683d4   340  00000000       constant
0x4cd683d8   344  166ddd90       constant
0x4cd683dc   348  00000000       constant
0x4cd683e0   352  167075e1       constant
0x4cd683e4   356  00000000       constant
0x4cd683e8   360  009274e0       constant
0x4cd683ec   364  00000000       constant
0x4cd683f0   368  166dde70       constant
0x4cd683f4   372  00000000       constant
0x4cd683f8   376  4cd68200       constant
0x4cd683fc   380  00000000       constant
0x4cd68400   384  166ddd90       constant
0x4cd68404   388  00000000       constant
0x4cd68408   392  166dddf8       constant
0x4cd6840c   396  00000000       constant
0x4cd68410   400  166ddde0       constant
0x4cd68414   404  00000000       constant
0x4cd68418   408  00e234b8       constant
0x4cd6841c   412  00000000       constant
0x4cd68420   416  4cd06060       constant
0x4cd68424   420  00000000       constant
0x4cd68428   424  166dc2d0       constant
0x4cd6842c   428  00000000       constant
0x4cd68430   432  00c05c20       constant
0x4cd68434   436  00000000       constant


RelocInfo (size = 31)
0x4cd682a8  embedded object  (0x4cd68221 <Code: STUB>)
0x4cd682b4  external reference (Isolate::c_entry_fp_address)  (0x166dddf8)
0x4cd682bc  external reference (Isolate::context_address)  (0x166ddd90)
0x4cd682e0  external reference (CpuProfiler::is_profiling)  (0x167075e1)
0x4cd682ec  external reference (InvokeAccessorGetterCallback)  (0x9274e0)
0x4cd68308  external reference (HandleScope::next)  (0x166dde70)
0x4cd68320  code target (STUB)  (0x4cd68200)
0x4cd68358  external reference (Isolate::context_address)  (0x166ddd90)
0x4cd68360  external reference (Isolate::c_entry_fp_address)  (0x166dddf8)
0x4cd68370  external reference (Isolate::scheduled_exception)  (0x166ddde0)
0x4cd68390  external reference (Runtime::PromoteScheduledException)  (0xe234b8)
0x4cd68394  code target (STUB)  (0x4cd06060)
0x4cd683a4  external reference (isolate)  (0x166dc2d0)
0x4cd683a8  external reference (HandleScope::DeleteExtensions)  (0xc05c20)
0x4cd683bc  constant pool (size 124)


kind = HANDLER
major_key = <NoCache>Stub
name = name
compiler = unknown
Instructions (size = 184)
0x4cd684a0     0  sub csp, jssp, #0x8 (8)
0x4cd684a4     4  str x3, [jssp, #-8]!
0x4cd684a8     8  sub csp, jssp, #0x8 (8)
0x4cd684ac    12  str x0, [jssp, #-8]!
0x4cd684b0    16  ldr x0, pc+120 (addr 0x000000004cd68528)    ;; object: 0x2105b0f1 Cell for 0
0x4cd684b4    20  ldur x0, [x0, #7]
0x4cd684b8    24  cmp x0, #0x0 (0)
0x4cd684bc    28  b.ne #+0x8 (addr 0x4cd684c4)
0x4cd684c0    32  b #+0x14 (addr 0x4cd684d4)
0x4cd684c4    36  ldr x0, [jssp], #8
0x4cd684c8    40  ldr x3, [jssp], #8
0x4cd684cc    44  ldr x16, pc+100 (addr 0x000000004cd68530)    ;; code: BUILTIN
0x4cd684d0    48  br x16
0x4cd684d4    52  add jssp, jssp, #0x10 (16)
0x4cd684d8    56  sub csp, jssp, #0x8 (8)
0x4cd684dc    60  str x1, [jssp, #-8]!
0x4cd684e0    64  ldr x4, pc+88 (addr 0x000000004cd68538)    ;; object: 0x21004241 <undefined>
0x4cd684e4    68  ldr x5, [x26, #40]
0x4cd684e8    72  ldr x0, pc+88 (addr 0x000000004cd68540)    ;; external reference (isolate)
0x4cd684ec    76  sub csp, jssp, #0x28 (40)
0x4cd684f0    80  stp x0, x5, [jssp, #-32]!
0x4cd684f4    84  stp x5, x4, [jssp, #16]
0x4cd684f8    88  str x1, [jssp, #-8]!
0x4cd684fc    92  movz x16, #0x0
0x4cd68500    96  sub csp, jssp, #0x8 (8)
0x4cd68504   100  str x16, [jssp, #-8]!
0x4cd68508   104  sub csp, jssp, #0x8 (8)
0x4cd6850c   108  str x2, [jssp, #-8]!
0x4cd68510   112  ldr x2, pc+56 (addr 0x000000004cd68548)    ;; external reference (Accessors::FunctionNameGetter)
0x4cd68514   116  ldr x16, pc+60 (addr 0x000000004cd68550)    ;; code: STUB, CallApiGetterStub, minor: 0
0x4cd68518   120  br x16
0x4cd6851c   124  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cd68520   128  d63f03e0       constant
0x4cd68524   132  d503201f       constant
0x4cd68528   136  2105b0f1       constant
0x4cd6852c   140  00000000       constant
0x4cd68530   144  4cd222e0       constant
0x4cd68534   148  00000000       constant
0x4cd68538   152  21004241       constant
0x4cd6853c   156  00000000       constant
0x4cd68540   160  166dc2d0       constant
0x4cd68544   164  00000000       constant
0x4cd68548   168  008fefd8       constant
0x4cd6854c   172  00000000       constant
0x4cd68550   176  4cd68280       constant
0x4cd68554   180  00000000       constant


RelocInfo (size = 14)
0x4cd684b0  embedded object  (0x2105b0f1 Cell for 0)
0x4cd684cc  code target (BUILTIN)  (0x4cd222e0)
0x4cd684e0  embedded object  (0x21004241 <undefined>)
0x4cd684e8  external reference (isolate)  (0x166dc2d0)
0x4cd68510  external reference (Accessors::FunctionNameGetter)  (0x8fefd8)
0x4cd68514  code target (STUB)  (0x4cd68280)
0x4cd6851c  constant pool (size 60)

kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 393221
name = CallICStub(args(5), ANY, 
compiler = unknown
Instructions (size = 488)
0x4cd685c0     0  add x4, x2, x3, asr #29
0x4cd685c4     4  ldur x4, [x4, #15]
0x4cd685c8     8  ldur x5, [x4, #7]
0x4cd685cc    12  cmp x5, x1
0x4cd685d0    16  b.ne #+0x2c (addr 0x4cd685fc)
0x4cd685d4    20  tbz w1, #0, #+0x28 (addr 0x4cd685fc)
0x4cd685d8    24  add x2, x2, x3, asr #29
0x4cd685dc    28  add x2, x2, #0x18 (24)
0x4cd685e0    32  ldur x3, [x2, #-1]
0x4cd685e4    36  movz x16, #0x200000000
0x4cd685e8    40  add x3, x3, x16
0x4cd685ec    44  stur x3, [x2, #-1]
0x4cd685f0    48  movz x0, #0x5
0x4cd685f4    52  ldr x16, pc+372 (addr 0x000000004cd68768)    ;; code: BUILTIN
0x4cd685f8    56  br x16
0x4cd685fc    60  ldr x16, [x26, #2400]
0x4cd68600    64  cmp x4, x16
0x4cd68604    68  b.eq #+0x78 (addr 0x4cd6867c)
0x4cd68608    72  ldur x5, [x4, #-1]
0x4cd6860c    76  ldr x16, [x26, #2736]
0x4cd68610    80  cmp x5, x16
0x4cd68614    84  b.ne #+0x40 (addr 0x4cd68654)
0x4cd68618    88  ldur x5, [cp, #39]
0x4cd6861c    92  ldur x5, [x5, #95]
0x4cd68620    96  cmp x1, x5
0x4cd68624   100  b.ne #+0xec (addr 0x4cd68710)
0x4cd68628   104  movz x0, #0x5
0x4cd6862c   108  add x2, x2, x3, asr #29
0x4cd68630   112  add x2, x2, #0x18 (24)
0x4cd68634   116  ldur x3, [x2, #-1]
0x4cd68638   120  movz x16, #0x200000000
0x4cd6863c   124  add x3, x3, x16
0x4cd68640   128  stur x3, [x2, #-1]
0x4cd68644   132  mov x2, x4
0x4cd68648   136  mov x3, x1
0x4cd6864c   140  ldr x16, pc+292 (addr 0x000000004cd68770)    ;; code: STUB, ArrayConstructorStub, minor: 3
0x4cd68650   144  br x16
0x4cd68654   148  ldr x16, [x26, #2568]
0x4cd68658   152  cmp x4, x16
0x4cd6865c   156  b.eq #+0xb4 (addr 0x4cd68710)
0x4cd68660   160  ldur x5, [x4, #-1]
0x4cd68664   164  ldrb w5, [x5, #11]
0x4cd68668   168  cmp x5, #0xc9 (201)
0x4cd6866c   172  b.ne #+0xa4 (addr 0x4cd68710)
0x4cd68670   176  add x4, x2, x3, asr #29
0x4cd68674   180  ldr x5, [x26, #2400]
0x4cd68678   184  stur x5, [x4, #15]
0x4cd6867c   188  movz x0, #0x5
0x4cd68680   192  ldr x16, pc+248 (addr 0x000000004cd68778)    ;; code: BUILTIN
0x4cd68684   196  br x16
0x4cd68688   200  tbz w1, #0, #+0x88 (addr 0x4cd68710)
0x4cd6868c   204  ldur x5, [x1, #-1]
0x4cd68690   208  ldrb w5, [x5, #11]
0x4cd68694   212  cmp x5, #0xc9 (201)
0x4cd68698   216  b.ne #+0x78 (addr 0x4cd68710)
0x4cd6869c   220  ldur x5, [cp, #39]
0x4cd686a0   224  ldur x5, [x5, #95]
0x4cd686a4   228  cmp x1, x5
0x4cd686a8   232  b.eq #+0x68 (addr 0x4cd68710)
0x4cd686ac   236  ldur x4, [x1, #39]
0x4cd686b0   240  ldur x4, [x4, #39]
0x4cd686b4   244  ldur x5, [cp, #39]
0x4cd686b8   248  cmp x4, x5
0x4cd686bc   252  b.ne #+0x54 (addr 0x4cd68710)
0x4cd686c0   256  movz x5, #0x200000000
0x4cd686c4   260  adds x4, x2, x3, asr #29
0x4cd686c8   264  stur x5, [x4, #23]
0x4cd686cc   268  movz x16, #0xc00000000
0x4cd686d0   272  sub csp, jssp, #0x10 (16)
0x4cd686d4   276  stp fp, lr, [jssp, #-16]!
0x4cd686d8   280  sub csp, jssp, #0x10 (16)
0x4cd686dc   284  str x16, [jssp, #-8]!
0x4cd686e0   288  ldr x17, pc+160 (addr 0x000000004cd68780)    ;; object: 0x4cd68561 <Code: CALL_IC>
0x4cd686e4   292  sub csp, jssp, #0x10 (16)
0x4cd686e8   296  str x17, [jssp, #-8]!
0x4cd686ec   300  add fp, jssp, #0x10 (16)
0x4cd686f0   304  sub csp, jssp, #0x8 (8)
0x4cd686f4   308  str x1, [jssp, #-8]!
0x4cd686f8   312  ldr x16, pc+144 (addr 0x000000004cd68788)    ;; code: STUB, CreateWeakCellStub, minor: 0
0x4cd686fc   316  blr x16
0x4cd68700   320  ldr x1, [jssp], #8
0x4cd68704   324  mov jssp, fp
0x4cd68708   328  ldp fp, lr, [jssp], #16
0x4cd6870c   332  b #-0x11c (addr 0x4cd685f0)
0x4cd68710   336  movz x16, #0xc00000000
0x4cd68714   340  sub csp, jssp, #0x10 (16)
0x4cd68718   344  stp fp, lr, [jssp, #-16]!
0x4cd6871c   348  sub csp, jssp, #0x10 (16)
0x4cd68720   352  str x16, [jssp, #-8]!
0x4cd68724   356  ldr x17, pc+108 (addr 0x000000004cd68790)    ;; object: 0x4cd68561 <Code: CALL_IC>
0x4cd68728   360  sub csp, jssp, #0x10 (16)
0x4cd6872c   364  str x17, [jssp, #-8]!
0x4cd68730   368  add fp, jssp, #0x10 (16)
0x4cd68734   372  sub csp, jssp, #0x18 (24)
0x4cd68738   376  stp x3, x2, [jssp, #-24]!
0x4cd6873c   380  str x1, [jssp, #16]
0x4cd68740   384  movz x0, #0x3
0x4cd68744   388  ldr x1, pc+84 (addr 0x000000004cd68798)    ;; external reference (Runtime::CallIC_Miss)
0x4cd68748   392  ldr x16, pc+88 (addr 0x000000004cd687a0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd6874c   396  blr x16
0x4cd68750   400  mov x1, x0
0x4cd68754   404  mov jssp, fp
0x4cd68758   408  ldp fp, lr, [jssp], #16
0x4cd6875c   412  b #-0xe0 (addr 0x4cd6867c)
0x4cd68760   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4cd68764   420  d63f03e0       constant
0x4cd68768   424  4cd1e820       constant
0x4cd6876c   428  00000000       constant
0x4cd68770   432  4cd33b00       constant
0x4cd68774   436  00000000       constant
0x4cd68778   440  4cd1f820       constant
0x4cd6877c   444  00000000       constant
0x4cd68780   448  4cd68561       constant
0x4cd68784   452  00000000       constant
0x4cd68788   456  4cd0ddc0       constant
0x4cd6878c   460  00000000       constant
0x4cd68790   464  4cd68561       constant
0x4cd68794   468  00000000       constant
0x4cd68798   472  00c86928       constant
0x4cd6879c   476  00000000       constant
0x4cd687a0   480  4cd06060       constant
0x4cd687a4   484  00000000       constant


RelocInfo (size = 19)
0x4cd685f4  code target (BUILTIN)  (0x4cd1e820)
0x4cd6864c  code target (STUB)  (0x4cd33b00)
0x4cd68680  code target (BUILTIN)  (0x4cd1f820)
0x4cd686e0  embedded object  (0x4cd68561 <Code: CALL_IC>)
0x4cd686f8  code target (STUB)  (0x4cd0ddc0)
0x4cd68724  embedded object  (0x4cd68561 <Code: CALL_IC>)
0x4cd68744  external reference (Runtime::CallIC_Miss)  (0xc86928)
0x4cd68748  code target (STUB)  (0x4cd06060)
0x4cd68760  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 393221
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0x4cd68820     0  ldur x2, [fp, #-16]
0x4cd68824     4  ldur x2, [x2, #31]
0x4cd68828     8  ldur x2, [x2, #87]
0x4cd6882c    12  ldr x16, pc+20 (addr 0x000000004cd68840)    ;; code: CALL_IC, GENERIC
0x4cd68830    16  br x16
0x4cd68834    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd68838    24  d63f03e0       constant
0x4cd6883c    28  d503201f       constant
0x4cd68840    32  4cd685c0       constant
0x4cd68844    36  00000000       constant


RelocInfo (size = 7)
0x4cd6882c  code target (CALL_IC)  (0x4cd685c0)
0x4cd68834  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = UNINITIALIZED
extra_ic_state = 0
compare_state = UNINITIALIZED*UNINITIALIZED -> UNINITIALIZED
compare_operation = GT
name = CompareICStub
compiler = unknown
Instructions (size = 136)
0x4cd68f60     0  movz x16, #0xc00000000
0x4cd68f64     4  sub csp, jssp, #0x10 (16)
0x4cd68f68     8  stp fp, lr, [jssp, #-16]!
0x4cd68f6c    12  sub csp, jssp, #0x10 (16)
0x4cd68f70    16  str x16, [jssp, #-8]!
0x4cd68f74    20  ldr x17, pc+92 (addr 0x000000004cd68fd0)    ;; object: 0x4cd68f01 <Code: COMPARE_IC>
0x4cd68f78    24  sub csp, jssp, #0x10 (16)
0x4cd68f7c    28  str x17, [jssp, #-8]!
0x4cd68f80    32  add fp, jssp, #0x10 (16)
0x4cd68f84    36  sub csp, jssp, #0x18 (24)
0x4cd68f88    40  stp lr, x0, [jssp, #-24]!
0x4cd68f8c    44  str x1, [jssp, #16]
0x4cd68f90    48  movz x10, #0x3200000000
0x4cd68f94    52  sub csp, jssp, #0x18 (24)
0x4cd68f98    56  stp x10, x0, [jssp, #-24]!
0x4cd68f9c    60  str x1, [jssp, #16]
0x4cd68fa0    64  movz x0, #0x3
0x4cd68fa4    68  ldr x1, pc+52 (addr 0x000000004cd68fd8)    ;; external reference (Runtime::CompareIC_Miss)
0x4cd68fa8    72  ldr x16, pc+56 (addr 0x000000004cd68fe0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd68fac    76  blr x16
0x4cd68fb0    80  add x11, x0, #0x5f (95)
0x4cd68fb4    84  ldr x1, [jssp, #16]
0x4cd68fb8    88  ldp lr, x0, [jssp], #24
0x4cd68fbc    92  mov jssp, fp
0x4cd68fc0    96  ldp fp, lr, [jssp], #16
0x4cd68fc4   100  br x11
0x4cd68fc8   104  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd68fcc   108  d63f03e0       constant
0x4cd68fd0   112  4cd68f01       constant
0x4cd68fd4   116  00000000       constant
0x4cd68fd8   120  00c8a980       constant
0x4cd68fdc   124  00000000       constant
0x4cd68fe0   128  4cd06060       constant
0x4cd68fe4   132  00000000       constant


RelocInfo (size = 10)
0x4cd68f74  embedded object  (0x4cd68f01 <Code: COMPARE_IC>)
0x4cd68fa4  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cd68fa8  code target (STUB)  (0x4cd06060)
0x4cd68fc8  constant pool (size 32)


kind = STUB
major_key = SubStringStub
name = SubStringStub
compiler = unknown
Instructions (size = 824)
0x4cd69060     0  ldr x0, [jssp]
0x4cd69064     4  ldr x15, [jssp, #8]
0x4cd69068     8  orr x16, x15, x0
0x4cd6906c    12  tbnz w16, #0, #+0x228 (addr 0x4cd69294)
0x4cd69070    16  asr x15, x15, #32
0x4cd69074    20  asr x0, x0, #32
0x4cd69078    24  subs x1, x0, x15
0x4cd6907c    28  b.mi #+0x218 (addr 0x4cd69294)
0x4cd69080    32  tbnz w15, #31, #+0x214 (addr 0x4cd69294)
0x4cd69084    36  ldr x10, [jssp, #16]
0x4cd69088    40  tbz w10, #0, #+0x20c (addr 0x4cd69294)
0x4cd6908c    44  ldur x12, [x10, #-1]
0x4cd69090    48  ldrb w12, [x12, #11]
0x4cd69094    52  tbnz w12, #7, #+0x200 (addr 0x4cd69294)
0x4cd69098    56  cmp x1, #0x1 (1)
0x4cd6909c    60  b.eq #+0x208 (addr 0x4cd692a4)
0x4cd690a0    64  ldursw x11, [x10, #19]
0x4cd690a4    68  cmp x1, x11
0x4cd690a8    72  csel x0, x10, x0, eq
0x4cd690ac    76  b.eq #+0x1e0 (addr 0x4cd6928c)
0x4cd690b0    80  b.hi #+0x1e4 (addr 0x4cd69294)
0x4cd690b4    84  tst x12, #0x1
0x4cd690b8    88  b.eq #+0x38 (addr 0x4cd690f0)
0x4cd690bc    92  tst x12, #0x2
0x4cd690c0    96  b.ne #+0x1c (addr 0x4cd690dc)
0x4cd690c4   100  ldur x3, [x10, #31]
0x4cd690c8   104  ldr x16, [x26, #80]
0x4cd690cc   108  cmp x3, x16
0x4cd690d0   112  b.ne #+0x1c4 (addr 0x4cd69294)
0x4cd690d4   116  ldur x10, [x10, #23]
0x4cd690d8   120  b #+0x10 (addr 0x4cd690e8)
0x4cd690dc   124  ldursw x3, [x10, #35]
0x4cd690e0   128  add x15, x15, x3
0x4cd690e4   132  ldur x10, [x10, #23]
0x4cd690e8   136  ldur x3, [x10, #-1]
0x4cd690ec   140  ldrb w12, [x3, #11]
0x4cd690f0   144  cmp x1, #0xd (13)
0x4cd690f4   148  b.lt #+0x84 (addr 0x4cd69178)
0x4cd690f8   152  tbz w12, #2, #+0x3c (addr 0x4cd69134)
0x4cd690fc   156  ldr x3, pc+620 (addr 0x000000004cd69368)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x4cd69100   160  ldp x0, x4, [x3]
0x4cd69104   164  adds x16, x0, #0x28 (40)
0x4cd69108   168  ccmp x16, x4, #nzCv, lo
0x4cd6910c   172  b.hi #+0x188 (addr 0x4cd69294)
0x4cd69110   176  str x16, [x3]
0x4cd69114   180  orr x0, x0, #0x1
0x4cd69118   184  ldr x4, [x26, #488]
0x4cd6911c   188  lsl x3, x1, #32
0x4cd69120   192  stur x4, [x0, #-1]
0x4cd69124   196  movz x4, #0x3
0x4cd69128   200  stur x3, [x0, #15]
0x4cd6912c   204  stur x4, [x0, #7]
0x4cd69130   208  b #+0x38 (addr 0x4cd69168)
0x4cd69134   212  ldr x3, pc+572 (addr 0x000000004cd69370)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x4cd69138   216  ldp x0, x4, [x3]
0x4cd6913c   220  adds x16, x0, #0x28 (40)
0x4cd69140   224  ccmp x16, x4, #nzCv, lo
0x4cd69144   228  b.hi #+0x150 (addr 0x4cd69294)
0x4cd69148   232  str x16, [x3]
0x4cd6914c   236  orr x0, x0, #0x1
0x4cd69150   240  ldr x4, [x26, #480]
0x4cd69154   244  lsl x3, x1, #32
0x4cd69158   248  stur x4, [x0, #-1]
0x4cd6915c   252  movz x4, #0x3
0x4cd69160   256  stur x3, [x0, #15]
0x4cd69164   260  stur x4, [x0, #7]
0x4cd69168   264  lsl x15, x15, #32
0x4cd6916c   268  stur x15, [x0, #31]
0x4cd69170   272  stur x10, [x0, #23]
0x4cd69174   276  b #+0x118 (addr 0x4cd6928c)
0x4cd69178   280  tst x12, #0x2
0x4cd6917c   284  b.eq #+0x14 (addr 0x4cd69190)
0x4cd69180   288  tst x12, #0x10
0x4cd69184   292  b.ne #+0x110 (addr 0x4cd69294)
0x4cd69188   296  ldur x13, [x10, #31]
0x4cd6918c   300  b #+0x8 (addr 0x4cd69194)
0x4cd69190   304  add x13, x10, #0x17 (23)
0x4cd69194   308  tbz w12, #2, #+0x7c (addr 0x4cd69210)
0x4cd69198   312  add x3, x1, #0x1f (31)
0x4cd6919c   316  and x3, x3, #0xfffffffffffffff8
0x4cd691a0   320  ldr x5, pc+472 (addr 0x000000004cd69378)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x4cd691a4   324  ldp x0, x16, [x5]
0x4cd691a8   328  adds x4, x0, x3
0x4cd691ac   332  ccmp x4, x16, #nzCv, lo
0x4cd691b0   336  b.hi #+0xe4 (addr 0x4cd69294)
0x4cd691b4   340  str x4, [x5]
0x4cd691b8   344  orr x0, x0, #0x1
0x4cd691bc   348  ldr x4, [x26, #280]
0x4cd691c0   352  lsl x3, x1, #32
0x4cd691c4   356  stur x4, [x0, #-1]
0x4cd691c8   360  movz x4, #0x3
0x4cd691cc   364  stur x3, [x0, #15]
0x4cd691d0   368  stur x4, [x0, #7]
0x4cd691d4   372  add x13, x13, x15
0x4cd691d8   376  add x14, x0, #0x17 (23)
0x4cd691dc   380  and x3, x1, #0xfffffffffffffff0
0x4cd691e0   384  cbz x3, #+0x18 (addr 0x4cd691f8)
0x4cd691e4   388  sub x3, x3, #0x10 (16)
0x4cd691e8   392  ldp x16, x17, [x13], #16
0x4cd691ec   396  stp x16, x17, [x14], #16
0x4cd691f0   400  cbnz x3, #-0xc (addr 0x4cd691e4)
0x4cd691f4   404  and x1, x1, #0xf
0x4cd691f8   408  cbz x1, #+0x14 (addr 0x4cd6920c)
0x4cd691fc   412  sub x1, x1, #0x1 (1)
0x4cd69200   416  ldrb w16, [x13], #1
0x4cd69204   420  strb w16, [x14], #1
0x4cd69208   424  cbnz x1, #-0xc (addr 0x4cd691fc)
0x4cd6920c   428  b #+0x80 (addr 0x4cd6928c)
0x4cd69210   432  add x3, x1, x1
0x4cd69214   436  add x3, x3, #0x1f (31)
0x4cd69218   440  and x3, x3, #0xfffffffffffffff8
0x4cd6921c   444  ldr x5, pc+356 (addr 0x000000004cd69380)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x4cd69220   448  ldp x0, x16, [x5]
0x4cd69224   452  adds x4, x0, x3
0x4cd69228   456  ccmp x4, x16, #nzCv, lo
0x4cd6922c   460  b.hi #+0x68 (addr 0x4cd69294)
0x4cd69230   464  str x4, [x5]
0x4cd69234   468  orr x0, x0, #0x1
0x4cd69238   472  ldr x4, [x26, #456]
0x4cd6923c   476  lsl x3, x1, #32
0x4cd69240   480  stur x4, [x0, #-1]
0x4cd69244   484  movz x4, #0x3
0x4cd69248   488  stur x3, [x0, #15]
0x4cd6924c   492  stur x4, [x0, #7]
0x4cd69250   496  add x13, x13, x15, lsl #1
0x4cd69254   500  add x14, x0, #0x17 (23)
0x4cd69258   504  add x1, x1, x1
0x4cd6925c   508  and x3, x1, #0xfffffffffffffff0
0x4cd69260   512  cbz x3, #+0x18 (addr 0x4cd69278)
0x4cd69264   516  sub x3, x3, #0x10 (16)
0x4cd69268   520  ldp x16, x17, [x13], #16
0x4cd6926c   524  stp x16, x17, [x14], #16
0x4cd69270   528  cbnz x3, #-0xc (addr 0x4cd69264)
0x4cd69274   532  and x1, x1, #0xf
0x4cd69278   536  cbz x1, #+0x14 (addr 0x4cd6928c)
0x4cd6927c   540  sub x1, x1, #0x1 (1)
0x4cd69280   544  ldrb w16, [x13], #1
0x4cd69284   548  strb w16, [x14], #1
0x4cd69288   552  cbnz x1, #-0xc (addr 0x4cd6927c)
0x4cd6928c   556  add jssp, jssp, #0x18 (24)
0x4cd69290   560  ret
0x4cd69294   564  movz x0, #0x3
0x4cd69298   568  ldr x1, pc+240 (addr 0x000000004cd69388)    ;; external reference (Runtime::SubString)
0x4cd6929c   572  ldr x16, pc+244 (addr 0x000000004cd69390)    ;; code: STUB, CEntryStub, minor: 4
0x4cd692a0   576  br x16
0x4cd692a4   580  lsl x15, x15, #32
0x4cd692a8   584  tbnz w15, #0, #+0xb0 (addr 0x4cd69358)
0x4cd692ac   588  ldursw x1, [x10, #19]
0x4cd692b0   592  cmp x1, x15, asr #32
0x4cd692b4   596  b.ls #-0x20 (addr 0x4cd69294)
0x4cd692b8   600  asr x15, x15, #32
0x4cd692bc   604  ldur x1, [x10, #-1]
0x4cd692c0   608  ldrb w1, [x1, #11]
0x4cd692c4   612  tbz w1, #0, #+0x34 (addr 0x4cd692f8)
0x4cd692c8   616  tbz w1, #1, #+0x14 (addr 0x4cd692dc)
0x4cd692cc   620  ldur w1, [x10, #35]
0x4cd692d0   624  ldur x10, [x10, #23]
0x4cd692d4   628  add w15, w15, w1
0x4cd692d8   632  b #+0x18 (addr 0x4cd692f0)
0x4cd692dc   636  ldur x1, [x10, #31]
0x4cd692e0   640  ldr x16, [x26, #80]
0x4cd692e4   644  cmp x1, x16
0x4cd692e8   648  b.ne #+0x70 (addr 0x4cd69358)
0x4cd692ec   652  ldur x10, [x10, #23]
0x4cd692f0   656  ldur x1, [x10, #-1]
0x4cd692f4   660  ldrb w1, [x1, #11]
0x4cd692f8   664  tst x1, #0x3
0x4cd692fc   668  b.ne #+0xc (addr 0x4cd69308)
0x4cd69300   672  add x10, x10, #0x17 (23)
0x4cd69304   676  b #+0x10 (addr 0x4cd69314)
0x4cd69308   680  tst x1, #0x10
0x4cd6930c   684  b.ne #+0x4c (addr 0x4cd69358)
0x4cd69310   688  ldur x10, [x10, #31]
0x4cd69314   692  tbnz w1, #2, #+0xc (addr 0x4cd69320)
0x4cd69318   696  ldrh w1, [x10, w15, sxtw #1]
0x4cd6931c   700  b #+0x8 (addr 0x4cd69324)
0x4cd69320   704  ldrb w1, [x10, w15, sxtw]
0x4cd69324   708  lsl x1, x1, #32
0x4cd69328   712  tbnz w1, #0, #+0x34 (addr 0x4cd6935c)
0x4cd6932c   716  movz x16, #0xff00000000
0x4cd69330   720  cmp x1, x16
0x4cd69334   724  b.hi #+0x28 (addr 0x4cd6935c)
0x4cd69338   728  ldr x0, [x26, #400]
0x4cd6933c   732  add x0, x0, x1, asr #29
0x4cd69340   736  ldur x0, [x0, #15]
0x4cd69344   740  ldr x16, [x26, #40]
0x4cd69348   744  cmp x0, x16
0x4cd6934c   748  b.eq #+0x10 (addr 0x4cd6935c)
0x4cd69350   752  add jssp, jssp, #0x18 (24)
0x4cd69354   756  ret
0x4cd69358   760  b #-0xc4 (addr 0x4cd69294)
0x4cd6935c   764  b #-0xc8 (addr 0x4cd69294)
0x4cd69360   768  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd69364   772  d63f03e0       constant
0x4cd69368   776  166dd2c0       constant
0x4cd6936c   780  00000000       constant
0x4cd69370   784  166dd2c0       constant
0x4cd69374   788  00000000       constant
0x4cd69378   792  166dd2c0       constant
0x4cd6937c   796  00000000       constant
0x4cd69380   800  166dd2c0       constant
0x4cd69384   804  00000000       constant
0x4cd69388   808  00eca0d8       constant
0x4cd6938c   812  00000000       constant
0x4cd69390   816  4cd06060       constant
0x4cd69394   820  00000000       constant


RelocInfo (size = 27)
0x4cd690fc  external reference (Heap::NewSpaceAllocationTopAddress())  (0x166dd2c0)
0x4cd69134  external reference (Heap::NewSpaceAllocationTopAddress())  (0x166dd2c0)
0x4cd691a0  external reference (Heap::NewSpaceAllocationTopAddress())  (0x166dd2c0)
0x4cd6921c  external reference (Heap::NewSpaceAllocationTopAddress())  (0x166dd2c0)
0x4cd69298  external reference (Runtime::SubString)  (0xeca0d8)
0x4cd6929c  code target (STUB)  (0x4cd06060)
0x4cd69360  constant pool (size 56)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 493)
0x4cd6a5e0     0  movz x2, #0xd2c0
0x4cd6a5e4     4  movk x2, #0x166d, lsl #16
0x4cd6a5e8     8  ldp x3, x0, [x2]
0x4cd6a5ec    12  adds x16, x3, #0xa8 (168)
0x4cd6a5f0    16  ccmp x16, x0, #nzCv, lo
0x4cd6a5f4    20  b.hi #+0xb4 (addr 0x4cd6a6a8)
0x4cd6a5f8    24  str x16, [x2]
0x4cd6a5fc    28  orr x3, x3, #0x1
0x4cd6a600    32  ldr x0, pc+280 (addr 0x000000004cd6a718)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd6a604    36  stur x0, [x3, #-1]
0x4cd6a608    40  movz x0, #0x1300000000
0x4cd6a60c    44  stur x0, [x3, #7]
0x4cd6a610    48  stur x1, [x3, #15]
0x4cd6a614    52  stur cp, [x3, #23]
0x4cd6a618    56  ldr x0, pc+264 (addr 0x000000004cd6a720)    ;; object: 0x21004519 <the hole>
0x4cd6a61c    60  stur x0, [x3, #31]
0x4cd6a620    64  ldur x0, [cp, #39]
0x4cd6a624    68  stur x0, [x3, #39]
0x4cd6a628    72  ldr x0, pc+256 (addr 0x000000004cd6a728)    ;; object: 0x21004241 <undefined>
0x4cd6a62c    76  stur x0, [x3, #47]
0x4cd6a630    80  ldr x0, pc+256 (addr 0x000000004cd6a730)    ;; object: 0x21004241 <undefined>
0x4cd6a634    84  stur x0, [x3, #55]
0x4cd6a638    88  ldr x0, pc+256 (addr 0x000000004cd6a738)    ;; object: 0x21004241 <undefined>
0x4cd6a63c    92  stur x0, [x3, #63]
0x4cd6a640    96  ldr x0, pc+256 (addr 0x000000004cd6a740)    ;; object: 0x21004241 <undefined>
0x4cd6a644   100  stur x0, [x3, #71]
0x4cd6a648   104  ldr x0, pc+256 (addr 0x000000004cd6a748)    ;; object: 0x21004241 <undefined>
0x4cd6a64c   108  stur x0, [x3, #79]
0x4cd6a650   112  ldr x0, pc+256 (addr 0x000000004cd6a750)    ;; object: 0x21004241 <undefined>
0x4cd6a654   116  stur x0, [x3, #87]
0x4cd6a658   120  ldr x0, pc+256 (addr 0x000000004cd6a758)    ;; object: 0x21004241 <undefined>
0x4cd6a65c   124  stur x0, [x3, #95]
0x4cd6a660   128  ldr x0, pc+256 (addr 0x000000004cd6a760)    ;; object: 0x21004241 <undefined>
0x4cd6a664   132  stur x0, [x3, #103]
0x4cd6a668   136  ldr x0, pc+256 (addr 0x000000004cd6a768)    ;; object: 0x21004241 <undefined>
0x4cd6a66c   140  stur x0, [x3, #111]
0x4cd6a670   144  ldr x0, pc+256 (addr 0x000000004cd6a770)    ;; object: 0x21004241 <undefined>
0x4cd6a674   148  stur x0, [x3, #119]
0x4cd6a678   152  ldr x0, pc+256 (addr 0x000000004cd6a778)    ;; object: 0x21004241 <undefined>
0x4cd6a67c   156  stur x0, [x3, #127]
0x4cd6a680   160  ldr x0, pc+256 (addr 0x000000004cd6a780)    ;; object: 0x21004241 <undefined>
0x4cd6a684   164  stur x0, [x3, #135]
0x4cd6a688   168  ldr x0, pc+256 (addr 0x000000004cd6a788)    ;; object: 0x21004241 <undefined>
0x4cd6a68c   172  stur x0, [x3, #143]
0x4cd6a690   176  ldr x0, pc+256 (addr 0x000000004cd6a790)    ;; object: 0x21004241 <undefined>
0x4cd6a694   180  stur x0, [x3, #151]
0x4cd6a698   184  ldr x0, pc+256 (addr 0x000000004cd6a798)    ;; object: 0x21004241 <undefined>
0x4cd6a69c   188  stur x0, [x3, #159]
0x4cd6a6a0   192  mov x0, x3
0x4cd6a6a4   196  ret
0x4cd6a6a8   200  sub csp, jssp, #0x10 (16)
0x4cd6a6ac   204  stp fp, lr, [jssp, #-16]!
0x4cd6a6b0   208  movz fp, #0xa00000000
0x4cd6a6b4   212  sub csp, jssp, #0x8 (8)
0x4cd6a6b8   216  str fp, [jssp, #-8]!
0x4cd6a6bc   220  add fp, jssp, #0x8 (8)
0x4cd6a6c0   224  movz x3, #0x0
0x4cd6a6c4   228  mov x16, lr
0x4cd6a6c8   232  ldr x17, pc+216 (addr 0x000000004cd6a7a0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd6a6cc   236  blr x17
0x4cd6a6d0   240  movz x0, #0xa800000000
0x4cd6a6d4   244  movz x10, #0x0
0x4cd6a6d8   248  sub csp, jssp, #0x10 (16)
0x4cd6a6dc   252  stp x10, x0, [jssp, #-16]!
0x4cd6a6e0   256  movz x0, #0x2
0x4cd6a6e4   260  movz x1, #0x5b88
0x4cd6a6e8   264  movk x1, #0xe2, lsl #16
0x4cd6a6ec   268  ldr x16, pc+188 (addr 0x000000004cd6a7a8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd6a6f0   272  blr x16
0x4cd6a6f4   276  str x0, [jssp, #24]
0x4cd6a6f8   280  ldr x16, pc+184 (addr 0x000000004cd6a7b0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd6a6fc   284  blr x16
0x4cd6a700   288  ldr lr, [jssp, #16]
0x4cd6a704   292  ldp xzr, fp, [jssp], #24
0x4cd6a708   296  b #-0x108 (addr 0x4cd6a600)
0x4cd6a70c   300  5800055f       constant pool begin (num_const = 42)    ;; constant pool
0x4cd6a710   304  d63f03e0       constant
0x4cd6a714   308  d503201f       constant
0x4cd6a718   312  2a806149       constant
0x4cd6a71c   316  00000000       constant
0x4cd6a720   320  21004519       constant
0x4cd6a724   324  00000000       constant
0x4cd6a728   328  21004241       constant
0x4cd6a72c   332  00000000       constant
0x4cd6a730   336  21004241       constant
0x4cd6a734   340  00000000       constant
0x4cd6a738   344  21004241       constant
0x4cd6a73c   348  00000000       constant
0x4cd6a740   352  21004241       constant
0x4cd6a744   356  00000000       constant
0x4cd6a748   360  21004241       constant
0x4cd6a74c   364  00000000       constant
0x4cd6a750   368  21004241       constant
0x4cd6a754   372  00000000       constant
0x4cd6a758   376  21004241       constant
0x4cd6a75c   380  00000000       constant
0x4cd6a760   384  21004241       constant
0x4cd6a764   388  00000000       constant
0x4cd6a768   392  21004241       constant
0x4cd6a76c   396  00000000       constant
0x4cd6a770   400  21004241       constant
0x4cd6a774   404  00000000       constant
0x4cd6a778   408  21004241       constant
0x4cd6a77c   412  00000000       constant
0x4cd6a780   416  21004241       constant
0x4cd6a784   420  00000000       constant
0x4cd6a788   424  21004241       constant
0x4cd6a78c   428  00000000       constant
0x4cd6a790   432  21004241       constant
0x4cd6a794   436  00000000       constant
0x4cd6a798   440  21004241       constant
0x4cd6a79c   444  00000000       constant
0x4cd6a7a0   448  4cd06820       constant
0x4cd6a7a4   452  00000000       constant
0x4cd6a7a8   456  4cd06260       constant
0x4cd6a7ac   460  00000000       constant
0x4cd6a7b0   464  4cd068e0       constant
0x4cd6a7b4   468  00000000       constant


Safepoints (size = 21)
0x4cd6a6f4   276  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 26)
0x4cd6a600  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd6a618  embedded object  (0x21004519 <the hole>)
0x4cd6a628  embedded object  (0x21004241 <undefined>)
0x4cd6a630  embedded object  (0x21004241 <undefined>)
0x4cd6a638  embedded object  (0x21004241 <undefined>)
0x4cd6a640  embedded object  (0x21004241 <undefined>)
0x4cd6a648  embedded object  (0x21004241 <undefined>)
0x4cd6a650  embedded object  (0x21004241 <undefined>)
0x4cd6a658  embedded object  (0x21004241 <undefined>)
0x4cd6a660  embedded object  (0x21004241 <undefined>)
0x4cd6a668  embedded object  (0x21004241 <undefined>)
0x4cd6a670  embedded object  (0x21004241 <undefined>)
0x4cd6a678  embedded object  (0x21004241 <undefined>)
0x4cd6a680  embedded object  (0x21004241 <undefined>)
0x4cd6a688  embedded object  (0x21004241 <undefined>)
0x4cd6a690  embedded object  (0x21004241 <undefined>)
0x4cd6a698  embedded object  (0x21004241 <undefined>)
0x4cd6a6c8  code target (STUB)  (0x4cd06820)
0x4cd6a6ec  code target (STUB)  (0x4cd06260)
0x4cd6a6f8  code target (STUB)  (0x4cd068e0)
0x4cd6a70c  constant pool (size 172)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cd6c260     0  ldur x0, [x1, #7]
0x4cd6c264     4  ldur x0, [x0, #15]
0x4cd6c268     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cd6c2e0     0  ldur x0, [x1, #7]
0x4cd6c2e4     4  ldur x0, [x0, #23]
0x4cd6c2e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cd6c360     0  ldur x0, [x1, #7]
0x4cd6c364     4  ldur x0, [x0, #31]
0x4cd6c368     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd6d0c0     0  ldur x0, [x1, #7]
0x4cd6d0c4     4  movz x16, #0x167
0x4cd6d0c8     8  ldr x0, [x0, x16]
0x4cd6d0cc    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd6d140     0  ldur x0, [x1, #7]
0x4cd6d144     4  movz x16, #0x16f
0x4cd6d148     8  ldr x0, [x0, x16]
0x4cd6d14c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = STUB
major_key = FastNewClosureStub
name = FastNewClosureStub
compiler = crankshaft
Instructions (size = 773)
0x4cd6e060     0  movz x1, #0xd2c0
0x4cd6e064     4  movk x1, #0x166d, lsl #16
0x4cd6e068     8  ldp x3, x0, [x1]
0x4cd6e06c    12  adds x16, x3, #0x48 (72)
0x4cd6e070    16  ccmp x16, x0, #nzCv, lo
0x4cd6e074    20  b.hi #+0x1bc (addr 0x4cd6e230)
0x4cd6e078    24  str x16, [x1]
0x4cd6e07c    28  orr x3, x3, #0x1
0x4cd6e080    32  ldur x0, [cp, #39]
0x4cd6e084    36  movz x16, #0x2d7
0x4cd6e088    40  ldr x1, [x0, x16]
0x4cd6e08c    44  stur x1, [x3, #-1]
0x4cd6e090    48  ldr x1, pc+528 (addr 0x000000004cd6e2a0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd6e094    52  stur x1, [x3, #7]
0x4cd6e098    56  ldr x1, pc+528 (addr 0x000000004cd6e2a8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd6e09c    60  stur x1, [x3, #15]
0x4cd6e0a0    64  ldr x1, pc+528 (addr 0x000000004cd6e2b0)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd6e0a4    68  stur x1, [x3, #47]
0x4cd6e0a8    72  ldr x1, pc+528 (addr 0x000000004cd6e2b8)    ;; object: 0x21004519 <the hole>
0x4cd6e0ac    76  stur x1, [x3, #23]
0x4cd6e0b0    80  stur x2, [x3, #31]
0x4cd6e0b4    84  stur cp, [x3, #39]
0x4cd6e0b8    88  ldur x1, [x2, #23]
0x4cd6e0bc    92  movz x4, #0x0
0x4cd6e0c0    96  cmp x1, x4
0x4cd6e0c4   100  b.eq #+0x150 (addr 0x4cd6e214)
0x4cd6e0c8   104  ldur w4, [x1, #11]
0x4cd6e0cc   108  subs w4, w4, #0x4 (4)
0x4cd6e0d0   112  b.vs #+0x230 (addr 0x4cd6e300)
0x4cd6e0d4   116  mov x5, x4
0x4cd6e0d8   120  cmp w5, #0x1 (1)
0x4cd6e0dc   124  b.lt #+0xb4 (addr 0x4cd6e190)
0x4cd6e0e0   128  add x4, x1, #0xf (15)
0x4cd6e0e4   132  ldr x6, [x4, w5, sxtw #3]
0x4cd6e0e8   136  ldur x4, [x6, #7]
0x4cd6e0ec   140  add x6, x1, #0x27 (39)
0x4cd6e0f0   144  ldr x7, [x6, w5, sxtw #3]
0x4cd6e0f4   148  add x6, x1, #0x17 (23)
0x4cd6e0f8   152  ldr x8, [x6, w5, sxtw #3]
0x4cd6e0fc   156  ldur x6, [x8, #7]
0x4cd6e100   160  cmp x0, x4
0x4cd6e104   164  b.ne #+0x1c (addr 0x4cd6e120)
0x4cd6e108   168  mov x4, #0xffffffff00000000
0x4cd6e10c   172  cmp x7, x4
0x4cd6e110   176  b.ne #+0x10 (addr 0x4cd6e120)
0x4cd6e114   180  movz x4, #0x0
0x4cd6e118   184  cmp x6, x4
0x4cd6e11c   188  b.ne #+0xc (addr 0x4cd6e128)
0x4cd6e120   192  sub w5, w5, #0x4 (4)
0x4cd6e124   196  b #-0x4c (addr 0x4cd6e0d8)
0x4cd6e128   200  add x4, x1, #0x1f (31)
0x4cd6e12c   204  ldr x7, [x4, w5, sxtw #3]
0x4cd6e130   208  ldur x7, [x7, #7]
0x4cd6e134   212  movz x4, #0x0
0x4cd6e138   216  cmp x7, x4
0x4cd6e13c   220  b.eq #+0x50 (addr 0x4cd6e18c)
0x4cd6e140   224  add x4, x6, #0x5f (95)
0x4cd6e144   228  stur x4, [x3, #55]
0x4cd6e148   232  stur x7, [x3, #47]
0x4cd6e14c   236  movz x16, #0x557
0x4cd6e150   240  ldr x4, [x0, x16]
0x4cd6e154   244  stur x4, [x3, #63]
0x4cd6e158   248  mov x4, x3
0x4cd6e15c   252  movz x16, #0x557
0x4cd6e160   256  str x4, [x0, x16]
0x4cd6e164   260  add x6, x0, #0x557 (1367)
0x4cd6e168   264  and x4, x0, #0xfffffffffff00000
0x4cd6e16c   268  ldr x4, [x4, #8]
0x4cd6e170   272  tbz w4, #2, #+0x18 (addr 0x4cd6e188)
0x4cd6e174   276  sub csp, jssp, #0x8 (8)
0x4cd6e178   280  str lr, [jssp, #-8]!
0x4cd6e17c   284  ldr x16, pc+324 (addr 0x000000004cd6e2c0)    ;; code: STUB, RecordWriteStub, minor: 71808
0x4cd6e180   288  blr x16
0x4cd6e184   292  ldr lr, [jssp], #8
0x4cd6e188   296  b #+0x8 (addr 0x4cd6e190)
0x4cd6e18c   300  b #+0x184 (addr 0x4cd6e310)
0x4cd6e190   304  cmp w5, #0x1 (1)
0x4cd6e194   308  b.ge #+0x94 (addr 0x4cd6e228)
0x4cd6e198   312  ldur x1, [x1, #15]
0x4cd6e19c   316  ldur x1, [x1, #7]
0x4cd6e1a0   320  movz x4, #0x0
0x4cd6e1a4   324  cmp x1, x4
0x4cd6e1a8   328  b.eq #+0x54 (addr 0x4cd6e1fc)
0x4cd6e1ac   332  add x1, x1, #0x5f (95)
0x4cd6e1b0   336  stur x1, [x3, #55]
0x4cd6e1b4   340  ldr x1, pc+276 (addr 0x000000004cd6e2c8)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd6e1b8   344  stur x1, [x3, #47]
0x4cd6e1bc   348  movz x16, #0x557
0x4cd6e1c0   352  ldr x1, [x0, x16]
0x4cd6e1c4   356  stur x1, [x3, #63]
0x4cd6e1c8   360  mov x1, x3
0x4cd6e1cc   364  movz x16, #0x557
0x4cd6e1d0   368  str x1, [x0, x16]
0x4cd6e1d4   372  add x2, x0, #0x557 (1367)
0x4cd6e1d8   376  and x1, x0, #0xfffffffffff00000
0x4cd6e1dc   380  ldr x1, [x1, #8]
0x4cd6e1e0   384  tbz w1, #2, #+0x18 (addr 0x4cd6e1f8)
0x4cd6e1e4   388  sub csp, jssp, #0x8 (8)
0x4cd6e1e8   392  str lr, [jssp, #-8]!
0x4cd6e1ec   396  ldr x16, pc+228 (addr 0x000000004cd6e2d0)    ;; code: STUB, RecordWriteStub, minor: 67616
0x4cd6e1f0   400  blr x16
0x4cd6e1f4   404  ldr lr, [jssp], #8
0x4cd6e1f8   408  b #+0x30 (addr 0x4cd6e228)
0x4cd6e1fc   412  ldr x0, pc+220 (addr 0x000000004cd6e2d8)    ;; object: 0x21004241 <undefined>
0x4cd6e200   416  stur x0, [x3, #63]
0x4cd6e204   420  ldur x0, [x2, #15]
0x4cd6e208   424  add x0, x0, #0x5f (95)
0x4cd6e20c   428  stur x0, [x3, #55]
0x4cd6e210   432  b #+0x18 (addr 0x4cd6e228)
0x4cd6e214   436  ldr x0, pc+204 (addr 0x000000004cd6e2e0)    ;; object: 0x21004241 <undefined>
0x4cd6e218   440  stur x0, [x3, #63]
0x4cd6e21c   444  ldur x0, [x2, #15]
0x4cd6e220   448  add x0, x0, #0x5f (95)
0x4cd6e224   452  stur x0, [x3, #55]
0x4cd6e228   456  mov x0, x3
0x4cd6e22c   460  ret
0x4cd6e230   464  sub csp, jssp, #0x10 (16)
0x4cd6e234   468  stp fp, lr, [jssp, #-16]!
0x4cd6e238   472  movz fp, #0xa00000000
0x4cd6e23c   476  sub csp, jssp, #0x8 (8)
0x4cd6e240   480  str fp, [jssp, #-8]!
0x4cd6e244   484  add fp, jssp, #0x8 (8)
0x4cd6e248   488  movz x3, #0x0
0x4cd6e24c   492  mov x16, lr
0x4cd6e250   496  ldr x17, pc+152 (addr 0x000000004cd6e2e8)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd6e254   500  blr x17
0x4cd6e258   504  movz x0, #0x4800000000
0x4cd6e25c   508  movz x10, #0x0
0x4cd6e260   512  sub csp, jssp, #0x10 (16)
0x4cd6e264   516  stp x10, x0, [jssp, #-16]!
0x4cd6e268   520  movz x0, #0x2
0x4cd6e26c   524  movz x1, #0x5b88
0x4cd6e270   528  movk x1, #0xe2, lsl #16
0x4cd6e274   532  ldr x16, pc+124 (addr 0x000000004cd6e2f0)    ;; code: STUB, CEntryStub, minor: 5
0x4cd6e278   536  blr x16
0x4cd6e27c   540  str x0, [jssp, #24]
0x4cd6e280   544  ldr x16, pc+120 (addr 0x000000004cd6e2f8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd6e284   548  blr x16
0x4cd6e288   552  ldr lr, [jssp, #16]
0x4cd6e28c   556  ldp xzr, fp, [jssp], #24
0x4cd6e290   560  b #-0x210 (addr 0x4cd6e080)
0x4cd6e294   564  5800035f       constant pool begin (num_const = 26)    ;; constant pool
0x4cd6e298   568  d63f03e0       constant
0x4cd6e29c   572  d503201f       constant
0x4cd6e2a0   576  21004201       constant
0x4cd6e2a4   580  00000000       constant
0x4cd6e2a8   584  21004201       constant
0x4cd6e2ac   588  00000000       constant
0x4cd6e2b0   592  21004201       constant
0x4cd6e2b4   596  00000000       constant
0x4cd6e2b8   600  21004519       constant
0x4cd6e2bc   604  00000000       constant
0x4cd6e2c0   608  4cd2d2c0       constant
0x4cd6e2c4   612  00000000       constant
0x4cd6e2c8   616  21004201       constant
0x4cd6e2cc   620  00000000       constant
0x4cd6e2d0   624  4cd2daa0       constant
0x4cd6e2d4   628  00000000       constant
0x4cd6e2d8   632  21004241       constant
0x4cd6e2dc   636  00000000       constant
0x4cd6e2e0   640  21004241       constant
0x4cd6e2e4   644  00000000       constant
0x4cd6e2e8   648  4cd06820       constant
0x4cd6e2ec   652  00000000       constant
0x4cd6e2f0   656  4cd06260       constant
0x4cd6e2f4   660  00000000       constant
0x4cd6e2f8   664  4cd068e0       constant
0x4cd6e2fc   668  00000000       constant
0x4cd6e300   672  movz x16, #0x0
0x4cd6e304   676  sub csp, jssp, #0x10 (16)
0x4cd6e308   680  stp fp, lr, [jssp, #-16]!
0x4cd6e30c   684  bl #+0x14 (addr 0x4cd6e320)
0x4cd6e310   688  movz x16, #0x8
0x4cd6e314   692  sub csp, jssp, #0x10 (16)
0x4cd6e318   696  stp fp, lr, [jssp, #-16]!
0x4cd6e31c   700  bl #+0x4 (addr 0x4cd6e320)
0x4cd6e320   704  movz x17, #0xa00000000
0x4cd6e324   708  sub csp, jssp, #0x10 (16)
0x4cd6e328   712  stp x17, cp, [jssp, #-16]!
0x4cd6e32c   716  add fp, jssp, #0x10 (16)
0x4cd6e330   720  ldr x17, pc+24 (addr 0x000000004cd6e348)    ;; lazy deoptimization bailout 0
0x4cd6e334   724  add x17, x17, x16
0x4cd6e338   728  br x17
0x4cd6e33c   732  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd6e340   736  d63f03e0       constant
0x4cd6e344   740  d503201f       constant
0x4cd6e348   744  4cb06000       constant
0x4cd6e34c   748  00000000       constant


Safepoints (size = 21)
0x4cd6e27c   540  000 | x2 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0x4cd6e090  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd6e098  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd6e0a0  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd6e0a8  embedded object  (0x21004519 <the hole>)
0x4cd6e17c  code target (STUB)  (0x4cd2d2c0)
0x4cd6e1b4  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd6e1ec  code target (STUB)  (0x4cd2daa0)
0x4cd6e1fc  embedded object  (0x21004241 <undefined>)
0x4cd6e214  embedded object  (0x21004241 <undefined>)
0x4cd6e250  code target (STUB)  (0x4cd06820)
0x4cd6e274  code target (STUB)  (0x4cd06260)
0x4cd6e280  code target (STUB)  (0x4cd068e0)
0x4cd6e294  constant pool (size 108)
0x4cd6e330  runtime entry
0x4cd6e33c  constant pool (size 20)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd71c60     0  ldur x0, [x1, #-1]
0x4cd71c64     4  ldur x0, [x0, #47]
0x4cd71c68     8  movz x16, #0x737
0x4cd71c6c    12  ldr x0, [x0, x16]
0x4cd71c70    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd71ce0     0  ldur x0, [x1, #-1]
0x4cd71ce4     4  ldur x0, [x0, #47]
0x4cd71ce8     8  movz x16, #0x74f
0x4cd71cec    12  ldr x0, [x0, x16]
0x4cd71cf0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd71d60     0  ldur x0, [x1, #-1]
0x4cd71d64     4  ldur x0, [x0, #47]
0x4cd71d68     8  movz x16, #0x767
0x4cd71d6c    12  ldr x0, [x0, x16]
0x4cd71d70    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cd71de0     0  ldur x0, [x1, #7]
0x4cd71de4     4  ldur x0, [x0, #191]
0x4cd71de8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cd71e60     0  ldur x0, [x1, #7]
0x4cd71e64     4  ldur x0, [x0, #199]
0x4cd71e68     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 317)
0x4cd722e0     0  movz x2, #0xd2c0
0x4cd722e4     4  movk x2, #0x166d, lsl #16
0x4cd722e8     8  ldp x3, x0, [x2]
0x4cd722ec    12  adds x16, x3, #0x50 (80)
0x4cd722f0    16  ccmp x16, x0, #nzCv, lo
0x4cd722f4    20  b.hi #+0x5c (addr 0x4cd72350)
0x4cd722f8    24  str x16, [x2]
0x4cd722fc    28  orr x3, x3, #0x1
0x4cd72300    32  ldr x0, pc+192 (addr 0x000000004cd723c0)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd72304    36  stur x0, [x3, #-1]
0x4cd72308    40  movz x0, #0x800000000
0x4cd7230c    44  stur x0, [x3, #7]
0x4cd72310    48  stur x1, [x3, #15]
0x4cd72314    52  stur cp, [x3, #23]
0x4cd72318    56  ldr x0, pc+176 (addr 0x000000004cd723c8)    ;; object: 0x21004519 <the hole>
0x4cd7231c    60  stur x0, [x3, #31]
0x4cd72320    64  ldur x0, [cp, #39]
0x4cd72324    68  stur x0, [x3, #39]
0x4cd72328    72  ldr x0, pc+168 (addr 0x000000004cd723d0)    ;; object: 0x21004241 <undefined>
0x4cd7232c    76  stur x0, [x3, #47]
0x4cd72330    80  ldr x0, pc+168 (addr 0x000000004cd723d8)    ;; object: 0x21004241 <undefined>
0x4cd72334    84  stur x0, [x3, #55]
0x4cd72338    88  ldr x0, pc+168 (addr 0x000000004cd723e0)    ;; object: 0x21004241 <undefined>
0x4cd7233c    92  stur x0, [x3, #63]
0x4cd72340    96  ldr x0, pc+168 (addr 0x000000004cd723e8)    ;; object: 0x21004241 <undefined>
0x4cd72344   100  stur x0, [x3, #71]
0x4cd72348   104  mov x0, x3
0x4cd7234c   108  ret
0x4cd72350   112  sub csp, jssp, #0x10 (16)
0x4cd72354   116  stp fp, lr, [jssp, #-16]!
0x4cd72358   120  movz fp, #0xa00000000
0x4cd7235c   124  sub csp, jssp, #0x8 (8)
0x4cd72360   128  str fp, [jssp, #-8]!
0x4cd72364   132  add fp, jssp, #0x8 (8)
0x4cd72368   136  movz x3, #0x0
0x4cd7236c   140  mov x16, lr
0x4cd72370   144  ldr x17, pc+128 (addr 0x000000004cd723f0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd72374   148  blr x17
0x4cd72378   152  movz x0, #0x5000000000
0x4cd7237c   156  movz x10, #0x0
0x4cd72380   160  sub csp, jssp, #0x10 (16)
0x4cd72384   164  stp x10, x0, [jssp, #-16]!
0x4cd72388   168  movz x0, #0x2
0x4cd7238c   172  movz x1, #0x5b88
0x4cd72390   176  movk x1, #0xe2, lsl #16
0x4cd72394   180  ldr x16, pc+100 (addr 0x000000004cd723f8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd72398   184  blr x16
0x4cd7239c   188  str x0, [jssp, #24]
0x4cd723a0   192  ldr x16, pc+96 (addr 0x000000004cd72400)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd723a4   196  blr x16
0x4cd723a8   200  ldr lr, [jssp, #16]
0x4cd723ac   204  ldp xzr, fp, [jssp], #24
0x4cd723b0   208  b #-0xb0 (addr 0x4cd72300)
0x4cd723b4   212  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0x4cd723b8   216  d63f03e0       constant
0x4cd723bc   220  d503201f       constant
0x4cd723c0   224  2a806149       constant
0x4cd723c4   228  00000000       constant
0x4cd723c8   232  21004519       constant
0x4cd723cc   236  00000000       constant
0x4cd723d0   240  21004241       constant
0x4cd723d4   244  00000000       constant
0x4cd723d8   248  21004241       constant
0x4cd723dc   252  00000000       constant
0x4cd723e0   256  21004241       constant
0x4cd723e4   260  00000000       constant
0x4cd723e8   264  21004241       constant
0x4cd723ec   268  00000000       constant
0x4cd723f0   272  4cd06820       constant
0x4cd723f4   276  00000000       constant
0x4cd723f8   280  4cd06260       constant
0x4cd723fc   284  00000000       constant
0x4cd72400   288  4cd068e0       constant
0x4cd72404   292  00000000       constant


Safepoints (size = 21)
0x4cd7239c   188  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 15)
0x4cd72300  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd72318  embedded object  (0x21004519 <the hole>)
0x4cd72328  embedded object  (0x21004241 <undefined>)
0x4cd72330  embedded object  (0x21004241 <undefined>)
0x4cd72338  embedded object  (0x21004241 <undefined>)
0x4cd72340  embedded object  (0x21004241 <undefined>)
0x4cd72370  code target (STUB)  (0x4cd06820)
0x4cd72394  code target (STUB)  (0x4cd06260)
0x4cd723a0  code target (STUB)  (0x4cd068e0)
0x4cd723b4  constant pool (size 84)


kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 1
type = NORMAL
name = ToBooleanICStub(Undefined)
compiler = crankshaft
Instructions (size = 128)
0x4cd729c0     0  ldr x16, [x26, #40]
0x4cd729c4     4  cmp x0, x16
0x4cd729c8     8  b.eq #+0x8 (addr 0x4cd729d0)
0x4cd729cc    12  b #+0x2c (addr 0x4cd729f8)
0x4cd729d0    16  ldr x0, pc+24 (addr 0x000000004cd729e8)    ;; object: 0x210042b1 <false>
0x4cd729d4    20  ret
0x4cd729d8    24  ldr x0, pc+24 (addr 0x000000004cd729f0)    ;; object: 0x21004281 <true>
0x4cd729dc    28  ret
0x4cd729e0    32  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd729e4    36  d63f03e0       constant
0x4cd729e8    40  210042b1       constant
0x4cd729ec    44  00000000       constant
0x4cd729f0    48  21004281       constant
0x4cd729f4    52  00000000       constant
0x4cd729f8    56  movz x16, #0x0
0x4cd729fc    60  sub csp, jssp, #0x10 (16)
0x4cd72a00    64  stp fp, lr, [jssp, #-16]!
0x4cd72a04    68  bl #+0x4 (addr 0x4cd72a08)
0x4cd72a08    72  movz x17, #0xa00000000
0x4cd72a0c    76  sub csp, jssp, #0x10 (16)
0x4cd72a10    80  stp x17, cp, [jssp, #-16]!
0x4cd72a14    84  add fp, jssp, #0x10 (16)
0x4cd72a18    88  ldr x17, pc+24 (addr 0x000000004cd72a30)    ;; lazy deoptimization bailout 0
0x4cd72a1c    92  add x17, x17, x16
0x4cd72a20    96  br x17
0x4cd72a24   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd72a28   104  d63f03e0       constant
0x4cd72a2c   108  d503201f       constant
0x4cd72a30   112  4cb06000       constant
0x4cd72a34   116  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd729d0  embedded object  (0x210042b1 <false>)
0x4cd729d8  embedded object  (0x21004281 <true>)
0x4cd729e0  constant pool (size 24)
0x4cd72a18  runtime entry
0x4cd72a24  constant pool (size 20)


kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0x4cd72aa0     0  mov x2, x0
0x4cd72aa4     4  stur x2, [x1, #23]
0x4cd72aa8     8  tbz w2, #0, #+0x34 (addr 0x4cd72adc)
0x4cd72aac    12  add x3, x1, #0x17 (23)
0x4cd72ab0    16  and x2, x2, #0xfffffffffff00000
0x4cd72ab4    20  ldr x2, [x2, #8]
0x4cd72ab8    24  tbz w2, #1, #+0x24 (addr 0x4cd72adc)
0x4cd72abc    28  and x2, x1, #0xfffffffffff00000
0x4cd72ac0    32  ldr x2, [x2, #8]
0x4cd72ac4    36  tbz w2, #2, #+0x18 (addr 0x4cd72adc)
0x4cd72ac8    40  sub csp, jssp, #0x8 (8)
0x4cd72acc    44  str lr, [jssp, #-8]!
0x4cd72ad0    48  ldr x16, pc+24 (addr 0x000000004cd72ae8)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd72ad4    52  blr x16
0x4cd72ad8    56  ldr lr, [jssp], #8
0x4cd72adc    60  ret
0x4cd72ae0    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd72ae4    68  d63f03e0       constant
0x4cd72ae8    72  4cd170c0       constant
0x4cd72aec    76  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 7)
0x4cd72ad0  code target (STUB)  (0x4cd170c0)
0x4cd72ae0  constant pool (size 16)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = SMI*SMI -> SMI
compare_operation = EQ
name = CompareICStub
compiler = unknown
Instructions (size = 152)
0x4cd78bc0     0  orr x16, x0, x1
0x4cd78bc4     4  tbnz w16, #0, #+0xc (addr 0x4cd78bd0)
0x4cd78bc8     8  sub x0, x0, x1
0x4cd78bcc    12  ret
0x4cd78bd0    16  movz x16, #0xc00000000
0x4cd78bd4    20  sub csp, jssp, #0x10 (16)
0x4cd78bd8    24  stp fp, lr, [jssp, #-16]!
0x4cd78bdc    28  sub csp, jssp, #0x10 (16)
0x4cd78be0    32  str x16, [jssp, #-8]!
0x4cd78be4    36  ldr x17, pc+92 (addr 0x000000004cd78c40)    ;; object: 0x4cd78b61 <Code: COMPARE_IC>
0x4cd78be8    40  sub csp, jssp, #0x10 (16)
0x4cd78bec    44  str x17, [jssp, #-8]!
0x4cd78bf0    48  add fp, jssp, #0x10 (16)
0x4cd78bf4    52  sub csp, jssp, #0x18 (24)
0x4cd78bf8    56  stp lr, x0, [jssp, #-24]!
0x4cd78bfc    60  str x1, [jssp, #16]
0x4cd78c00    64  movz x10, #0x2d00000000
0x4cd78c04    68  sub csp, jssp, #0x18 (24)
0x4cd78c08    72  stp x10, x0, [jssp, #-24]!
0x4cd78c0c    76  str x1, [jssp, #16]
0x4cd78c10    80  movz x0, #0x3
0x4cd78c14    84  ldr x1, pc+52 (addr 0x000000004cd78c48)    ;; external reference (Runtime::CompareIC_Miss)
0x4cd78c18    88  ldr x16, pc+56 (addr 0x000000004cd78c50)    ;; code: STUB, CEntryStub, minor: 4
0x4cd78c1c    92  blr x16
0x4cd78c20    96  add x11, x0, #0x5f (95)
0x4cd78c24   100  ldr x1, [jssp, #16]
0x4cd78c28   104  ldp lr, x0, [jssp], #24
0x4cd78c2c   108  mov jssp, fp
0x4cd78c30   112  ldp fp, lr, [jssp], #16
0x4cd78c34   116  br x11
0x4cd78c38   120  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd78c3c   124  d63f03e0       constant
0x4cd78c40   128  4cd78b61       constant
0x4cd78c44   132  00000000       constant
0x4cd78c48   136  00c8a980       constant
0x4cd78c4c   140  00000000       constant
0x4cd78c50   144  4cd06060       constant
0x4cd78c54   148  00000000       constant


RelocInfo (size = 10)
0x4cd78be4  embedded object  (0x4cd78b61 <Code: COMPARE_IC>)
0x4cd78c14  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cd78c18  code target (STUB)  (0x4cd06060)
0x4cd78c38  constant pool (size 32)


kind = HANDLER
major_key = <NoCache>Stub
name = next
compiler = unknown
Instructions (size = 120)
0x4cd78cc0     0  sub csp, jssp, #0x8 (8)
0x4cd78cc4     4  str x3, [jssp, #-8]!
0x4cd78cc8     8  sub csp, jssp, #0x8 (8)
0x4cd78ccc    12  str x0, [jssp, #-8]!
0x4cd78cd0    16  ldr x0, pc+72 (addr 0x000000004cd78d18)    ;; object: 0x210ad1b1 Cell for 0
0x4cd78cd4    20  ldur x0, [x0, #7]
0x4cd78cd8    24  cmp x0, #0x0 (0)
0x4cd78cdc    28  b.ne #+0x14 (addr 0x4cd78cf0)
0x4cd78ce0    32  ldr x3, pc+64 (addr 0x000000004cd78d20)    ;; object: 0x210ad1c1 WeakCell for 0x2337bb31 <an Object with map 0x2a813f01>
0x4cd78ce4    36  ldur x3, [x3, #7]
0x4cd78ce8    40  tbz w3, #0, #+0x8 (addr 0x4cd78cf0)
0x4cd78cec    44  b #+0x14 (addr 0x4cd78d00)
0x4cd78cf0    48  ldr x0, [jssp], #8
0x4cd78cf4    52  ldr x3, [jssp], #8
0x4cd78cf8    56  ldr x16, pc+48 (addr 0x000000004cd78d28)    ;; code: BUILTIN
0x4cd78cfc    60  br x16
0x4cd78d00    64  add jssp, jssp, #0x10 (16)
0x4cd78d04    68  mov x1, x3
0x4cd78d08    72  ldr x16, pc+40 (addr 0x000000004cd78d30)    ;; code: HANDLER, LoadConstantStub, minor: 0
0x4cd78d0c    76  br x16
0x4cd78d10    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cd78d14    84  d63f03e0       constant
0x4cd78d18    88  210ad1b1       constant
0x4cd78d1c    92  00000000       constant
0x4cd78d20    96  210ad1c1       constant
0x4cd78d24   100  00000000       constant
0x4cd78d28   104  4cd222e0       constant
0x4cd78d2c   108  00000000       constant
0x4cd78d30   112  4cd431a0       constant
0x4cd78d34   116  00000000       constant


RelocInfo (size = 10)
0x4cd78cd0  embedded object  (0x210ad1b1 Cell for 0)
0x4cd78ce0  embedded object  (0x210ad1c1 WeakCell for 0x2337bb31 <an Object with map 0x2a813f01>)
0x4cd78cf8  code target (BUILTIN)  (0x4cd222e0)
0x4cd78d08  code target (HANDLER)  (0x4cd431a0)
0x4cd78d10  constant pool (size 40)

kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0x4cd78da0     0  ldur x0, [x1, #31]
0x4cd78da4     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0x4cd78e20     0  ldur x0, [x1, #39]
0x4cd78e24     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0x4cd78ea0     0  mov x5, x0
0x4cd78ea4     4  tbnz w5, #0, #+0xc (addr 0x4cd78eb0)
0x4cd78ea8     8  stur x5, [x1, #31]
0x4cd78eac    12  ret
0x4cd78eb0    16  movz x16, #0x0
0x4cd78eb4    20  sub csp, jssp, #0x10 (16)
0x4cd78eb8    24  stp fp, lr, [jssp, #-16]!
0x4cd78ebc    28  bl #+0x4 (addr 0x4cd78ec0)
0x4cd78ec0    32  movz x17, #0xa00000000
0x4cd78ec4    36  sub csp, jssp, #0x10 (16)
0x4cd78ec8    40  stp x17, cp, [jssp, #-16]!
0x4cd78ecc    44  add fp, jssp, #0x10 (16)
0x4cd78ed0    48  ldr x17, pc+24 (addr 0x000000004cd78ee8)    ;; lazy deoptimization bailout 0
0x4cd78ed4    52  add x17, x17, x16
0x4cd78ed8    56  br x17
0x4cd78edc    60  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd78ee0    64  d63f03e0       constant
0x4cd78ee4    68  d503201f       constant
0x4cd78ee8    72  4cb06000       constant
0x4cd78eec    76  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 8)
0x4cd78ed0  runtime entry
0x4cd78edc  constant pool (size 20)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd78f60     0  ldur x0, [x1, #-1]
0x4cd78f64     4  ldur x0, [x0, #47]
0x4cd78f68     8  movz x16, #0xdc7
0x4cd78f6c    12  ldr x0, [x0, x16]
0x4cd78f70    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd78fe0     0  ldur x0, [x1, #-1]
0x4cd78fe4     4  ldur x0, [x0, #47]
0x4cd78fe8     8  movz x16, #0x6a7
0x4cd78fec    12  ldr x0, [x0, x16]
0x4cd78ff0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd79060     0  ldur x0, [x1, #-1]
0x4cd79064     4  ldur x0, [x0, #47]
0x4cd79068     8  movz x16, #0x6bf
0x4cd7906c    12  ldr x0, [x0, x16]
0x4cd79070    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd790e0     0  ldur x0, [x1, #-1]
0x4cd790e4     4  ldur x0, [x0, #47]
0x4cd790e8     8  movz x16, #0x6ef
0x4cd790ec    12  ldr x0, [x0, x16]
0x4cd790f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd79160     0  ldur x0, [x1, #-1]
0x4cd79164     4  ldur x0, [x0, #47]
0x4cd79168     8  movz x16, #0xddf
0x4cd7916c    12  ldr x0, [x0, x16]
0x4cd79170    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd791e0     0  ldur x0, [x1, #-1]
0x4cd791e4     4  ldur x0, [x0, #47]
0x4cd791e8     8  movz x16, #0xdf7
0x4cd791ec    12  ldr x0, [x0, x16]
0x4cd791f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd79260     0  ldur x0, [x1, #-1]
0x4cd79264     4  ldur x0, [x0, #47]
0x4cd79268     8  movz x16, #0xe27
0x4cd7926c    12  ldr x0, [x0, x16]
0x4cd79270    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd792e0     0  ldur x0, [x1, #-1]
0x4cd792e4     4  ldur x0, [x0, #47]
0x4cd792e8     8  movz x16, #0xd1f
0x4cd792ec    12  ldr x0, [x0, x16]
0x4cd792f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd79360     0  ldur x0, [x1, #-1]
0x4cd79364     4  ldur x0, [x0, #47]
0x4cd79368     8  movz x16, #0xd37
0x4cd7936c    12  ldr x0, [x0, x16]
0x4cd79370    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd793e0     0  ldur x0, [x1, #-1]
0x4cd793e4     4  ldur x0, [x0, #47]
0x4cd793e8     8  movz x16, #0x647
0x4cd793ec    12  ldr x0, [x0, x16]
0x4cd793f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd79460     0  ldur x0, [x1, #-1]
0x4cd79464     4  ldur x0, [x0, #47]
0x4cd79468     8  movz x16, #0x65f
0x4cd7946c    12  ldr x0, [x0, x16]
0x4cd79470    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd794e0     0  ldur x0, [x1, #-1]
0x4cd794e4     4  ldur x0, [x0, #47]
0x4cd794e8     8  movz x16, #0x71f
0x4cd794ec    12  ldr x0, [x0, x16]
0x4cd794f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd79560     0  ldur x0, [x1, #7]
0x4cd79564     4  movz x16, #0x1ef
0x4cd79568     8  ldr x0, [x0, x16]
0x4cd7956c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd795e0     0  ldur x0, [x1, #7]
0x4cd795e4     4  movz x16, #0x1f7
0x4cd795e8     8  ldr x0, [x0, x16]
0x4cd795ec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd79660     0  ldur x0, [x1, #-1]
0x4cd79664     4  ldur x0, [x0, #47]
0x4cd79668     8  movz x16, #0xd7f
0x4cd7966c    12  ldr x0, [x0, x16]
0x4cd79670    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd796e0     0  ldur x0, [x1, #-1]
0x4cd796e4     4  ldur x0, [x0, #47]
0x4cd796e8     8  movz x16, #0xd97
0x4cd796ec    12  ldr x0, [x0, x16]
0x4cd796f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd79760     0  ldur x0, [x1, #-1]
0x4cd79764     4  ldur x0, [x0, #47]
0x4cd79768     8  movz x16, #0xdaf
0x4cd7976c    12  ldr x0, [x0, x16]
0x4cd79770    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd797e0     0  ldur x0, [x1, #-1]
0x4cd797e4     4  ldur x0, [x0, #47]
0x4cd797e8     8  movz x16, #0xbcf
0x4cd797ec    12  ldr x0, [x0, x16]
0x4cd797f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd79860     0  ldur x0, [x1, #-1]
0x4cd79864     4  ldur x0, [x0, #47]
0x4cd79868     8  movz x16, #0xbe7
0x4cd7986c    12  ldr x0, [x0, x16]
0x4cd79870    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd798e0     0  ldur x0, [x1, #-1]
0x4cd798e4     4  ldur x0, [x0, #47]
0x4cd798e8     8  movz x16, #0xbff
0x4cd798ec    12  ldr x0, [x0, x16]
0x4cd798f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd79960     0  ldur x0, [x1, #-1]
0x4cd79964     4  ldur x0, [x0, #47]
0x4cd79968     8  movz x16, #0xc17
0x4cd7996c    12  ldr x0, [x0, x16]
0x4cd79970    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd799e0     0  ldur x0, [x1, #-1]
0x4cd799e4     4  ldur x0, [x0, #47]
0x4cd799e8     8  movz x16, #0xc2f
0x4cd799ec    12  ldr x0, [x0, x16]
0x4cd799f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd79a60     0  ldur x0, [x1, #-1]
0x4cd79a64     4  ldur x0, [x0, #47]
0x4cd79a68     8  movz x16, #0xc47
0x4cd79a6c    12  ldr x0, [x0, x16]
0x4cd79a70    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd79ae0     0  ldur x0, [x1, #-1]
0x4cd79ae4     4  ldur x0, [x0, #47]
0x4cd79ae8     8  movz x16, #0xd4f
0x4cd79aec    12  ldr x0, [x0, x16]
0x4cd79af0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd79b60     0  ldur x0, [x1, #-1]
0x4cd79b64     4  ldur x0, [x0, #47]
0x4cd79b68     8  movz x16, #0xd67
0x4cd79b6c    12  ldr x0, [x0, x16]
0x4cd79b70    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd79be0     0  ldur x0, [x1, #-1]
0x4cd79be4     4  ldur x0, [x0, #47]
0x4cd79be8     8  movz x16, #0x77f
0x4cd79bec    12  ldr x0, [x0, x16]
0x4cd79bf0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd79c60     0  ldur x0, [x1, #-1]
0x4cd79c64     4  ldur x0, [x0, #47]
0x4cd79c68     8  movz x16, #0x677
0x4cd79c6c    12  ldr x0, [x0, x16]
0x4cd79c70    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cd79ce0     0  ldur x0, [x1, #7]
0x4cd79ce4     4  movz x16, #0x19f
0x4cd79ce8     8  ldr x0, [x0, x16]
0x4cd79cec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd7b1c0     0  ldur x0, [x1, #-1]
0x4cd7b1c4     4  ldur x0, [x0, #47]
0x4cd7b1c8     8  movz x16, #0x20f
0x4cd7b1cc    12  ldr x0, [x0, x16]
0x4cd7b1d0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd7b240     0  ldur x0, [x1, #-1]
0x4cd7b244     4  ldur x0, [x0, #47]
0x4cd7b248     8  movz x16, #0x227
0x4cd7b24c    12  ldr x0, [x0, x16]
0x4cd7b250    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd7b2c0     0  ldur x0, [x1, #-1]
0x4cd7b2c4     4  ldur x0, [x0, #47]
0x4cd7b2c8     8  movz x16, #0x23f
0x4cd7b2cc    12  ldr x0, [x0, x16]
0x4cd7b2d0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd7b340     0  ldur x0, [x1, #-1]
0x4cd7b344     4  ldur x0, [x0, #47]
0x4cd7b348     8  movz x16, #0x257
0x4cd7b34c    12  ldr x0, [x0, x16]
0x4cd7b350    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd7b3c0     0  ldur x0, [x1, #-1]
0x4cd7b3c4     4  ldur x0, [x0, #47]
0x4cd7b3c8     8  movz x16, #0x26f
0x4cd7b3cc    12  ldr x0, [x0, x16]
0x4cd7b3d0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd7b440     0  ldur x0, [x1, #-1]
0x4cd7b444     4  ldur x0, [x0, #47]
0x4cd7b448     8  movz x16, #0x287
0x4cd7b44c    12  ldr x0, [x0, x16]
0x4cd7b450    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cd7b4c0     0  ldur x0, [x1, #7]
0x4cd7b4c4     4  ldur x0, [x0, #135]
0x4cd7b4c8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cd7b540     0  ldur x0, [x1, #7]
0x4cd7b544     4  ldur x0, [x0, #151]
0x4cd7b548     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 3
type = NORMAL
name = ToBooleanICStub(Undefined,Bool)
compiler = crankshaft
Instructions (size = 152)
0x4cd7b5c0     0  ldr x16, [x26, #40]
0x4cd7b5c4     4  cmp x0, x16
0x4cd7b5c8     8  b.eq #+0x20 (addr 0x4cd7b5e8)
0x4cd7b5cc    12  ldr x16, [x26, #64]
0x4cd7b5d0    16  cmp x0, x16
0x4cd7b5d4    20  b.eq #+0x1c (addr 0x4cd7b5f0)
0x4cd7b5d8    24  ldr x16, [x26, #72]
0x4cd7b5dc    28  cmp x0, x16
0x4cd7b5e0    32  b.eq #+0x8 (addr 0x4cd7b5e8)
0x4cd7b5e4    36  b #+0x2c (addr 0x4cd7b610)
0x4cd7b5e8    40  ldr x0, pc+24 (addr 0x000000004cd7b600)    ;; object: 0x210042b1 <false>
0x4cd7b5ec    44  ret
0x4cd7b5f0    48  ldr x0, pc+24 (addr 0x000000004cd7b608)    ;; object: 0x21004281 <true>
0x4cd7b5f4    52  ret
0x4cd7b5f8    56  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd7b5fc    60  d63f03e0       constant
0x4cd7b600    64  210042b1       constant
0x4cd7b604    68  00000000       constant
0x4cd7b608    72  21004281       constant
0x4cd7b60c    76  00000000       constant
0x4cd7b610    80  movz x16, #0x0
0x4cd7b614    84  sub csp, jssp, #0x10 (16)
0x4cd7b618    88  stp fp, lr, [jssp, #-16]!
0x4cd7b61c    92  bl #+0x4 (addr 0x4cd7b620)
0x4cd7b620    96  movz x17, #0xa00000000
0x4cd7b624   100  sub csp, jssp, #0x10 (16)
0x4cd7b628   104  stp x17, cp, [jssp, #-16]!
0x4cd7b62c   108  add fp, jssp, #0x10 (16)
0x4cd7b630   112  ldr x17, pc+24 (addr 0x000000004cd7b648)    ;; lazy deoptimization bailout 0
0x4cd7b634   116  add x17, x17, x16
0x4cd7b638   120  br x17
0x4cd7b63c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd7b640   128  d63f03e0       constant
0x4cd7b644   132  d503201f       constant
0x4cd7b648   136  4cb06000       constant
0x4cd7b64c   140  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd7b5e8  embedded object  (0x210042b1 <false>)
0x4cd7b5f0  embedded object  (0x21004281 <true>)
0x4cd7b5f8  constant pool (size 24)
0x4cd7b630  runtime entry
0x4cd7b63c  constant pool (size 20)


kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cd7c000     0  ldur x0, [x1, #7]
0x4cd7c004     4  ldur x0, [x0, #119]
0x4cd7c008     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = next
compiler = unknown
Instructions (size = 152)
0x4cd7c540     0  sub csp, jssp, #0x8 (8)
0x4cd7c544     4  str x3, [jssp, #-8]!
0x4cd7c548     8  sub csp, jssp, #0x8 (8)
0x4cd7c54c    12  str x4, [jssp, #-8]!
0x4cd7c550    16  ldr x3, pc+88 (addr 0x000000004cd7c5a8)    ;; object: 0x2105b0f1 Cell for 0
0x4cd7c554    20  ldur x3, [x3, #7]
0x4cd7c558    24  cmp x3, #0x0 (0)
0x4cd7c55c    28  b.ne #+0x30 (addr 0x4cd7c58c)
0x4cd7c560    32  tbz w0, #0, #+0x2c (addr 0x4cd7c58c)
0x4cd7c564    36  ldr x5, pc+76 (addr 0x000000004cd7c5b0)    ;; object: 0x210b0739 WeakCell for 0x2a816479 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd7c568    40  ldur x5, [x5, #7]
0x4cd7c56c    44  tbz w5, #0, #+0x20 (addr 0x4cd7c58c)
0x4cd7c570    48  ldursw x4, [x5, #15]
0x4cd7c574    52  tbnz w4, #23, #+0x18 (addr 0x4cd7c58c)
0x4cd7c578    56  ldr x4, [jssp], #8
0x4cd7c57c    60  ldr x3, [jssp], #8
0x4cd7c580    64  ldr x2, pc+56 (addr 0x000000004cd7c5b8)    ;; object: 0x21005209 <String[4]: next>
0x4cd7c584    68  ldr x16, pc+60 (addr 0x000000004cd7c5c0)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0x4cd7c588    72  br x16
0x4cd7c58c    76  ldr x2, pc+60 (addr 0x000000004cd7c5c8)    ;; object: 0x21005209 <String[4]: next>
0x4cd7c590    80  ldr x4, [jssp], #8
0x4cd7c594    84  ldr x3, [jssp], #8
0x4cd7c598    88  ldr x16, pc+56 (addr 0x000000004cd7c5d0)    ;; code: BUILTIN
0x4cd7c59c    92  br x16
0x4cd7c5a0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd7c5a4   100  d63f03e0       constant
0x4cd7c5a8   104  2105b0f1       constant
0x4cd7c5ac   108  00000000       constant
0x4cd7c5b0   112  210b0739       constant
0x4cd7c5b4   116  00000000       constant
0x4cd7c5b8   120  21005209       constant
0x4cd7c5bc   124  00000000       constant
0x4cd7c5c0   128  4cd38860       constant
0x4cd7c5c4   132  00000000       constant
0x4cd7c5c8   136  21005209       constant
0x4cd7c5cc   140  00000000       constant
0x4cd7c5d0   144  4cd22420       constant
0x4cd7c5d4   148  00000000       constant


RelocInfo (size = 12)
0x4cd7c550  embedded object  (0x2105b0f1 Cell for 0)
0x4cd7c564  embedded object  (0x210b0739 WeakCell for 0x2a816479 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd7c580  embedded object  (0x21005209 <String[4]: next>)
0x4cd7c584  code target (HANDLER)  (0x4cd38860)
0x4cd7c58c  embedded object  (0x21005209 <String[4]: next>)
0x4cd7c598  code target (BUILTIN)  (0x4cd22420)
0x4cd7c5a0  constant pool (size 56)

kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd7cc40     0  ldur x0, [x1, #-1]
0x4cd7cc44     4  ldur x0, [x0, #47]
0x4cd7cc48     8  movz x16, #0x1c7
0x4cd7cc4c    12  ldr x0, [x0, x16]
0x4cd7cc50    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd7ccc0     0  ldur x0, [x1, #-1]
0x4cd7ccc4     4  ldur x0, [x0, #47]
0x4cd7ccc8     8  movz x16, #0x1df
0x4cd7cccc    12  ldr x0, [x0, x16]
0x4cd7ccd0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd7cd40     0  ldur x0, [x1, #-1]
0x4cd7cd44     4  ldur x0, [x0, #47]
0x4cd7cd48     8  movz x16, #0x1f7
0x4cd7cd4c    12  ldr x0, [x0, x16]
0x4cd7cd50    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*INTERNALIZED_STRING -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 624)
0x4cd7d920     0  orr x16, x1, x0
0x4cd7d924     4  tbnz w16, #0, #+0x10 (addr 0x4cd7d934)
0x4cd7d928     8  asr x1, x1, #32
0x4cd7d92c    12  sub x0, x1, x0, asr #32
0x4cd7d930    16  ret
0x4cd7d934    20  cmp x0, x1
0x4cd7d938    24  b.ne #+0x30 (addr 0x4cd7d968)
0x4cd7d93c    28  ldur x16, [x0, #-1]
0x4cd7d940    32  ldr x17, [x26, #120]
0x4cd7d944    36  cmp x16, x17
0x4cd7d948    40  b.eq #+0xc (addr 0x4cd7d954)
0x4cd7d94c    44  movz x0, #0x0
0x4cd7d950    48  ret
0x4cd7d954    52  ldur d0, [x0, #7]
0x4cd7d958    56  fcmp d0, d0
0x4cd7d95c    60  b.vc #-0x10 (addr 0x4cd7d94c)
0x4cd7d960    64  movn x0, #0x0
0x4cd7d964    68  ret
0x4cd7d968    72  and x16, x1, x0
0x4cd7d96c    76  tbnz w16, #0, #+0x64 (addr 0x4cd7d9d0)
0x4cd7d970    80  tbz w0, #0, #+0x24 (addr 0x4cd7d994)
0x4cd7d974    84  ldur x16, [x0, #-1]
0x4cd7d978    88  ldr x17, [x26, #120]
0x4cd7d97c    92  cmp x16, x17
0x4cd7d980    96  b.eq #+0x8 (addr 0x4cd7d988)
0x4cd7d984   100  ret
0x4cd7d988   104  ldur d0, [x0, #7]
0x4cd7d98c   108  scvtf d1, x1, #32
0x4cd7d990   112  b #+0x24 (addr 0x4cd7d9b4)
0x4cd7d994   116  ldur x16, [x1, #-1]
0x4cd7d998   120  ldr x17, [x26, #120]
0x4cd7d99c   124  cmp x16, x17
0x4cd7d9a0   128  b.eq #+0xc (addr 0x4cd7d9ac)
0x4cd7d9a4   132  movz x0, #0x1
0x4cd7d9a8   136  ret
0x4cd7d9ac   140  ldur d1, [x1, #7]
0x4cd7d9b0   144  scvtf d0, x0, #32
0x4cd7d9b4   148  fcmp d1, d0
0x4cd7d9b8   152  b.vs #+0x10 (addr 0x4cd7d9c8)
0x4cd7d9bc   156  cset x0, gt
0x4cd7d9c0   160  csinv x0, x0, xzr, ge
0x4cd7d9c4   164  ret
0x4cd7d9c8   168  movn x0, #0x0
0x4cd7d9cc   172  ret
0x4cd7d9d0   176  ldur x10, [x0, #-1]
0x4cd7d9d4   180  ldur x12, [x1, #-1]
0x4cd7d9d8   184  ldrb w11, [x10, #11]
0x4cd7d9dc   188  ldrb w13, [x12, #11]
0x4cd7d9e0   192  cmp x11, #0xb1 (177)
0x4cd7d9e4   196  b.lt #+0x8 (addr 0x4cd7d9ec)
0x4cd7d9e8   200  ret
0x4cd7d9ec   204  cmp x11, #0x83 (131)
0x4cd7d9f0   208  movz x16, #0x83
0x4cd7d9f4   212  ccmp x13, x16, #nZcv, ne
0x4cd7d9f8   216  movz x16, #0xb1
0x4cd7d9fc   220  ccmp x13, x16, #NzcV, ne
0x4cd7da00   224  b.ge #-0x18 (addr 0x4cd7d9e8)
0x4cd7da04   228  orr x14, x13, x11
0x4cd7da08   232  tst x14, #0xc0
0x4cd7da0c   236  b.eq #-0x24 (addr 0x4cd7d9e8)
0x4cd7da10   240  cmp x11, #0x81 (129)
0x4cd7da14   244  b.ne #+0x18 (addr 0x4cd7da2c)
0x4cd7da18   248  cmp x12, x10
0x4cd7da1c   252  b.ne #+0x10 (addr 0x4cd7da2c)
0x4cd7da20   256  ldur d1, [x1, #7]
0x4cd7da24   260  ldur d0, [x0, #7]
0x4cd7da28   264  b #-0x74 (addr 0x4cd7d9b4)
0x4cd7da2c   268  movz x16, #0x87
0x4cd7da30   272  and x14, x13, x16
0x4cd7da34   276  movz x16, #0x87
0x4cd7da38   280  and x15, x11, x16
0x4cd7da3c   284  cmp x14, #0x4 (4)
0x4cd7da40   288  ccmp x15, #4, #nzcv, eq
0x4cd7da44   292  b.ne #+0x5c (addr 0x4cd7daa0)
0x4cd7da48   296  ldur x10, [x1, #15]
0x4cd7da4c   300  ldur x11, [x0, #15]
0x4cd7da50   304  cmp x10, x11
0x4cd7da54   308  b.eq #+0xc (addr 0x4cd7da60)
0x4cd7da58   312  movz x0, #0x100000000
0x4cd7da5c   316  ret
0x4cd7da60   320  cbnz x10, #+0xc (addr 0x4cd7da6c)
0x4cd7da64   324  movz x0, #0x0
0x4cd7da68   328  ret
0x4cd7da6c   332  asr x10, x10, #32
0x4cd7da70   336  add x11, x10, #0x17 (23)
0x4cd7da74   340  add x1, x1, x11
0x4cd7da78   344  add x0, x0, x11
0x4cd7da7c   348  neg x10, x10
0x4cd7da80   352  ldrb w11, [x1, x10]
0x4cd7da84   356  ldrb w12, [x0, x10]
0x4cd7da88   360  cmp x11, x12
0x4cd7da8c   364  b.ne #-0x34 (addr 0x4cd7da58)
0x4cd7da90   368  add x10, x10, #0x1 (1)
0x4cd7da94   372  cbnz x10, #-0x14 (addr 0x4cd7da80)
0x4cd7da98   376  movz x0, #0x0
0x4cd7da9c   380  ret
0x4cd7daa0   384  movz x16, #0xc00000000
0x4cd7daa4   388  sub csp, jssp, #0x10 (16)
0x4cd7daa8   392  stp fp, lr, [jssp, #-16]!
0x4cd7daac   396  sub csp, jssp, #0x10 (16)
0x4cd7dab0   400  str x16, [jssp, #-8]!
0x4cd7dab4   404  ldr x17, pc+172 (addr 0x000000004cd7db60)    ;; object: 0x4cd7d8c1 <Code: COMPARE_IC>
0x4cd7dab8   408  sub csp, jssp, #0x10 (16)
0x4cd7dabc   412  str x17, [jssp, #-8]!
0x4cd7dac0   416  add fp, jssp, #0x10 (16)
0x4cd7dac4   420  sub csp, jssp, #0x10 (16)
0x4cd7dac8   424  stp x0, x1, [jssp, #-16]!
0x4cd7dacc   428  movz x0, #0x2
0x4cd7dad0   432  ldr x1, pc+152 (addr 0x000000004cd7db68)    ;; external reference (Runtime::StrictEqual)
0x4cd7dad4   436  ldr x16, pc+156 (addr 0x000000004cd7db70)    ;; code: STUB, CEntryStub, minor: 4
0x4cd7dad8   440  blr x16
0x4cd7dadc   444  mov jssp, fp
0x4cd7dae0   448  ldp fp, lr, [jssp], #16
0x4cd7dae4   452  ldr x1, [x26, #64]
0x4cd7dae8   456  sub x0, x0, x1
0x4cd7daec   460  ret
0x4cd7daf0   464  movz x16, #0xc00000000
0x4cd7daf4   468  sub csp, jssp, #0x10 (16)
0x4cd7daf8   472  stp fp, lr, [jssp, #-16]!
0x4cd7dafc   476  sub csp, jssp, #0x10 (16)
0x4cd7db00   480  str x16, [jssp, #-8]!
0x4cd7db04   484  ldr x17, pc+116 (addr 0x000000004cd7db78)    ;; object: 0x4cd7d8c1 <Code: COMPARE_IC>
0x4cd7db08   488  sub csp, jssp, #0x10 (16)
0x4cd7db0c   492  str x17, [jssp, #-8]!
0x4cd7db10   496  add fp, jssp, #0x10 (16)
0x4cd7db14   500  sub csp, jssp, #0x18 (24)
0x4cd7db18   504  stp lr, x0, [jssp, #-24]!
0x4cd7db1c   508  str x1, [jssp, #16]
0x4cd7db20   512  movz x10, #0x2f00000000
0x4cd7db24   516  sub csp, jssp, #0x18 (24)
0x4cd7db28   520  stp x10, x0, [jssp, #-24]!
0x4cd7db2c   524  str x1, [jssp, #16]
0x4cd7db30   528  movz x0, #0x3
0x4cd7db34   532  ldr x1, pc+76 (addr 0x000000004cd7db80)    ;; external reference (Runtime::CompareIC_Miss)
0x4cd7db38   536  ldr x16, pc+80 (addr 0x000000004cd7db88)    ;; code: STUB, CEntryStub, minor: 4
0x4cd7db3c   540  blr x16
0x4cd7db40   544  add x11, x0, #0x5f (95)
0x4cd7db44   548  ldr x1, [jssp, #16]
0x4cd7db48   552  ldp lr, x0, [jssp], #24
0x4cd7db4c   556  mov jssp, fp
0x4cd7db50   560  ldp fp, lr, [jssp], #16
0x4cd7db54   564  br x11
0x4cd7db58   568  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd7db5c   572  d63f03e0       constant
0x4cd7db60   576  4cd7d8c1       constant
0x4cd7db64   580  00000000       constant
0x4cd7db68   584  00e50928       constant
0x4cd7db6c   588  00000000       constant
0x4cd7db70   592  4cd06060       constant
0x4cd7db74   596  00000000       constant
0x4cd7db78   600  4cd7d8c1       constant
0x4cd7db7c   604  00000000       constant
0x4cd7db80   608  00c8a980       constant
0x4cd7db84   612  00000000       constant
0x4cd7db88   616  4cd06060       constant
0x4cd7db8c   620  00000000       constant


RelocInfo (size = 16)
0x4cd7dab4  embedded object  (0x4cd7d8c1 <Code: COMPARE_IC>)
0x4cd7dad0  external reference (Runtime::StrictEqual)  (0xe50928)
0x4cd7dad4  code target (STUB)  (0x4cd06060)
0x4cd7db04  embedded object  (0x4cd7d8c1 <Code: COMPARE_IC>)
0x4cd7db34  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cd7db38  code target (STUB)  (0x4cd06060)
0x4cd7db58  constant pool (size 56)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = SMI*SMI -> SMI
compare_operation = GT
name = CompareICStub
compiler = unknown
Instructions (size = 160)
0x4cd7e240     0  orr x16, x0, x1
0x4cd7e244     4  tbnz w16, #0, #+0x10 (addr 0x4cd7e254)
0x4cd7e248     8  asr x1, x1, #32
0x4cd7e24c    12  sub x0, x1, x0, asr #32
0x4cd7e250    16  ret
0x4cd7e254    20  movz x16, #0xc00000000
0x4cd7e258    24  sub csp, jssp, #0x10 (16)
0x4cd7e25c    28  stp fp, lr, [jssp, #-16]!
0x4cd7e260    32  sub csp, jssp, #0x10 (16)
0x4cd7e264    36  str x16, [jssp, #-8]!
0x4cd7e268    40  ldr x17, pc+96 (addr 0x000000004cd7e2c8)    ;; object: 0x4cd7e1e1 <Code: COMPARE_IC>
0x4cd7e26c    44  sub csp, jssp, #0x10 (16)
0x4cd7e270    48  str x17, [jssp, #-8]!
0x4cd7e274    52  add fp, jssp, #0x10 (16)
0x4cd7e278    56  sub csp, jssp, #0x18 (24)
0x4cd7e27c    60  stp lr, x0, [jssp, #-24]!
0x4cd7e280    64  str x1, [jssp, #16]
0x4cd7e284    68  movz x10, #0x3200000000
0x4cd7e288    72  sub csp, jssp, #0x18 (24)
0x4cd7e28c    76  stp x10, x0, [jssp, #-24]!
0x4cd7e290    80  str x1, [jssp, #16]
0x4cd7e294    84  movz x0, #0x3
0x4cd7e298    88  ldr x1, pc+56 (addr 0x000000004cd7e2d0)    ;; external reference (Runtime::CompareIC_Miss)
0x4cd7e29c    92  ldr x16, pc+60 (addr 0x000000004cd7e2d8)    ;; code: STUB, CEntryStub, minor: 4
0x4cd7e2a0    96  blr x16
0x4cd7e2a4   100  add x11, x0, #0x5f (95)
0x4cd7e2a8   104  ldr x1, [jssp, #16]
0x4cd7e2ac   108  ldp lr, x0, [jssp], #24
0x4cd7e2b0   112  mov jssp, fp
0x4cd7e2b4   116  ldp fp, lr, [jssp], #16
0x4cd7e2b8   120  br x11
0x4cd7e2bc   124  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd7e2c0   128  d63f03e0       constant
0x4cd7e2c4   132  d503201f       constant
0x4cd7e2c8   136  4cd7e1e1       constant
0x4cd7e2cc   140  00000000       constant
0x4cd7e2d0   144  00c8a980       constant
0x4cd7e2d4   148  00000000       constant
0x4cd7e2d8   152  4cd06060       constant
0x4cd7e2dc   156  00000000       constant


RelocInfo (size = 10)
0x4cd7e268  embedded object  (0x4cd7e1e1 <Code: COMPARE_IC>)
0x4cd7e298  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cd7e29c  code target (STUB)  (0x4cd06060)
0x4cd7e2bc  constant pool (size 36)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 216)
0x4cd7f9e0     0  ldur x4, [x1, #15]
0x4cd7f9e4     4  ldur w5, [x1, #27]
0x4cd7f9e8     8  tbnz w2, #0, #+0x44 (addr 0x4cd7fa2c)
0x4cd7f9ec    12  asr x7, x2, #32
0x4cd7f9f0    16  cmp w7, w5
0x4cd7f9f4    20  b.hs #+0x60 (addr 0x4cd7fa54)
0x4cd7f9f8    24  add x5, x4, #0xf (15)
0x4cd7f9fc    28  ldr x6, [x5, w7, sxtw #3]
0x4cd7fa00    32  ldr x16, [x26, #88]
0x4cd7fa04    36  cmp x6, x16
0x4cd7fa08    40  b.ne #+0x1c (addr 0x4cd7fa24)
0x4cd7fa0c    44  ldr x6, [x26, #1160]
0x4cd7fa10    48  ldur x6, [x6, #7]
0x4cd7fa14    52  movz x16, #0x100000000
0x4cd7fa18    56  cmp x6, x16
0x4cd7fa1c    60  b.ne #+0x48 (addr 0x4cd7fa64)
0x4cd7fa20    64  ldr x6, [x26, #40]
0x4cd7fa24    68  mov x0, x6
0x4cd7fa28    72  ret
0x4cd7fa2c    76  ldur x16, [x2, #-1]
0x4cd7fa30    80  ldr x17, [x26, #120]
0x4cd7fa34    84  cmp x16, x17
0x4cd7fa38    88  b.ne #+0x3c (addr 0x4cd7fa74)
0x4cd7fa3c    92  ldur d29, [x2, #7]
0x4cd7fa40    96  fcvtzs w7, d29
0x4cd7fa44   100  scvtf d0, w7
0x4cd7fa48   104  fcmp d29, d0
0x4cd7fa4c   108  b.ne #+0x28 (addr 0x4cd7fa74)
0x4cd7fa50   112  b #-0x60 (addr 0x4cd7f9f0)
0x4cd7fa54   116  movz x16, #0x0
0x4cd7fa58   120  sub csp, jssp, #0x10 (16)
0x4cd7fa5c   124  stp fp, lr, [jssp, #-16]!
0x4cd7fa60   128  bl #+0x24 (addr 0x4cd7fa84)
0x4cd7fa64   132  movz x16, #0x8
0x4cd7fa68   136  sub csp, jssp, #0x10 (16)
0x4cd7fa6c   140  stp fp, lr, [jssp, #-16]!
0x4cd7fa70   144  bl #+0x14 (addr 0x4cd7fa84)
0x4cd7fa74   148  movz x16, #0x10
0x4cd7fa78   152  sub csp, jssp, #0x10 (16)
0x4cd7fa7c   156  stp fp, lr, [jssp, #-16]!
0x4cd7fa80   160  bl #+0x4 (addr 0x4cd7fa84)
0x4cd7fa84   164  movz x17, #0xa00000000
0x4cd7fa88   168  sub csp, jssp, #0x10 (16)
0x4cd7fa8c   172  stp x17, cp, [jssp, #-16]!
0x4cd7fa90   176  add fp, jssp, #0x10 (16)
0x4cd7fa94   180  ldr x17, pc+20 (addr 0x000000004cd7faa8)    ;; lazy deoptimization bailout 0
0x4cd7fa98   184  add x17, x17, x16
0x4cd7fa9c   188  br x17
0x4cd7faa0   192  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd7faa4   196  d63f03e0       constant
0x4cd7faa8   200  4cb06000       constant
0x4cd7faac   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd7fa94  runtime entry
0x4cd7faa0  constant pool (size 16)

--- End code ---
kind = HANDLER
major_key = LoadFastElementStub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 216)
0x4cd7f9e0     0  ldur x4, [x1, #15]
0x4cd7f9e4     4  ldur w5, [x1, #27]
0x4cd7f9e8     8  tbnz w2, #0, #+0x44 (addr 0x4cd7fa2c)
0x4cd7f9ec    12  asr x7, x2, #32
0x4cd7f9f0    16  cmp w7, w5
0x4cd7f9f4    20  b.hs #+0x60 (addr 0x4cd7fa54)
0x4cd7f9f8    24  add x5, x4, #0xf (15)
0x4cd7f9fc    28  ldr x6, [x5, w7, sxtw #3]
0x4cd7fa00    32  ldr x16, [x26, #88]
0x4cd7fa04    36  cmp x6, x16
0x4cd7fa08    40  b.ne #+0x1c (addr 0x4cd7fa24)
0x4cd7fa0c    44  ldr x6, [x26, #1160]
0x4cd7fa10    48  ldur x6, [x6, #7]
0x4cd7fa14    52  movz x16, #0x100000000
0x4cd7fa18    56  cmp x6, x16
0x4cd7fa1c    60  b.ne #+0x48 (addr 0x4cd7fa64)
0x4cd7fa20    64  ldr x6, [x26, #40]
0x4cd7fa24    68  mov x0, x6
0x4cd7fa28    72  ret
0x4cd7fa2c    76  ldur x16, [x2, #-1]
0x4cd7fa30    80  ldr x17, [x26, #120]
0x4cd7fa34    84  cmp x16, x17
0x4cd7fa38    88  b.ne #+0x3c (addr 0x4cd7fa74)
0x4cd7fa3c    92  ldur d29, [x2, #7]
0x4cd7fa40    96  fcvtzs w7, d29
0x4cd7fa44   100  scvtf d0, w7
0x4cd7fa48   104  fcmp d29, d0
0x4cd7fa4c   108  b.ne #+0x28 (addr 0x4cd7fa74)
0x4cd7fa50   112  b #-0x60 (addr 0x4cd7f9f0)
0x4cd7fa54   116  movz x16, #0x0
0x4cd7fa58   120  sub csp, jssp, #0x10 (16)
0x4cd7fa5c   124  stp fp, lr, [jssp, #-16]!
0x4cd7fa60   128  bl #+0x24 (addr 0x4cd7fa84)
0x4cd7fa64   132  movz x16, #0x8
0x4cd7fa68   136  sub csp, jssp, #0x10 (16)
0x4cd7fa6c   140  stp fp, lr, [jssp, #-16]!
0x4cd7fa70   144  bl #+0x14 (addr 0x4cd7fa84)
0x4cd7fa74   148  movz x16, #0x10
0x4cd7fa78   152  sub csp, jssp, #0x10 (16)
0x4cd7fa7c   156  stp fp, lr, [jssp, #-16]!
0x4cd7fa80   160  bl #+0x4 (addr 0x4cd7fa84)
0x4cd7fa84   164  movz x17, #0xa00000000
0x4cd7fa88   168  sub csp, jssp, #0x10 (16)
0x4cd7fa8c   172  stp x17, cp, [jssp, #-16]!
0x4cd7fa90   176  add fp, jssp, #0x10 (16)
0x4cd7fa94   180  ldr x17, pc+20 (addr 0x000000004cd7faa8)    ;; lazy deoptimization bailout 0
0x4cd7fa98   184  add x17, x17, x16
0x4cd7fa9c   188  br x17
0x4cd7faa0   192  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd7faa4   196  d63f03e0       constant
0x4cd7faa8   200  4cb06000       constant
0x4cd7faac   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cd7fa94  runtime entry
0x4cd7faa0  constant pool (size 16)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastCloneRegExpStub
compiler = crankshaft
Instructions (size = 357)
0x4cd7fb20     0  ldur x4, [x3, #47]
0x4cd7fb24     4  asr x5, x2, #32
0x4cd7fb28     8  add x6, x4, #0x17 (23)
0x4cd7fb2c    12  ldr x7, [x6, w5, sxtw #3]
0x4cd7fb30    16  ldr x4, pc+224 (addr 0x000000004cd7fc10)    ;; object: 0x21004241 <undefined>
0x4cd7fb34    20  cmp x7, x4
0x4cd7fb38    24  b.eq #+0x64 (addr 0x4cd7fb9c)
0x4cd7fb3c    28  movz x1, #0xd2c0
0x4cd7fb40    32  movk x1, #0x166d, lsl #16
0x4cd7fb44    36  ldp x2, x0, [x1]
0x4cd7fb48    40  adds x16, x2, #0x38 (56)
0x4cd7fb4c    44  ccmp x16, x0, #nzCv, lo
0x4cd7fb50    48  b.hi #+0x50 (addr 0x4cd7fba0)
0x4cd7fb54    52  str x16, [x1]
0x4cd7fb58    56  orr x2, x2, #0x1
0x4cd7fb5c    60  ldur x0, [x7, #-1]
0x4cd7fb60    64  stur x0, [x2, #-1]
0x4cd7fb64    68  ldur x0, [x7, #7]
0x4cd7fb68    72  stur x0, [x2, #7]
0x4cd7fb6c    76  ldur x0, [x7, #15]
0x4cd7fb70    80  stur x0, [x2, #15]
0x4cd7fb74    84  ldur x0, [x7, #23]
0x4cd7fb78    88  stur x0, [x2, #23]
0x4cd7fb7c    92  ldur x0, [x7, #31]
0x4cd7fb80    96  stur x0, [x2, #31]
0x4cd7fb84   100  ldur x0, [x7, #39]
0x4cd7fb88   104  stur x0, [x2, #39]
0x4cd7fb8c   108  ldur x0, [x7, #47]
0x4cd7fb90   112  stur x0, [x2, #47]
0x4cd7fb94   116  mov x0, x2
0x4cd7fb98   120  ret
0x4cd7fb9c   124  b #+0x94 (addr 0x4cd7fc30)
0x4cd7fba0   128  sub csp, jssp, #0x10 (16)
0x4cd7fba4   132  stp fp, lr, [jssp, #-16]!
0x4cd7fba8   136  movz fp, #0xa00000000
0x4cd7fbac   140  sub csp, jssp, #0x8 (8)
0x4cd7fbb0   144  str fp, [jssp, #-8]!
0x4cd7fbb4   148  add fp, jssp, #0x8 (8)
0x4cd7fbb8   152  movz x2, #0x0
0x4cd7fbbc   156  mov x16, lr
0x4cd7fbc0   160  ldr x17, pc+88 (addr 0x000000004cd7fc18)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd7fbc4   164  blr x17
0x4cd7fbc8   168  movz x0, #0x3800000000
0x4cd7fbcc   172  movz x10, #0x0
0x4cd7fbd0   176  sub csp, jssp, #0x10 (16)
0x4cd7fbd4   180  stp x10, x0, [jssp, #-16]!
0x4cd7fbd8   184  movz x0, #0x2
0x4cd7fbdc   188  movz x1, #0x5b88
0x4cd7fbe0   192  movk x1, #0xe2, lsl #16
0x4cd7fbe4   196  ldr x16, pc+60 (addr 0x000000004cd7fc20)    ;; code: STUB, CEntryStub, minor: 5
0x4cd7fbe8   200  blr x16
0x4cd7fbec   204  str x0, [jssp, #16]
0x4cd7fbf0   208  ldr x16, pc+56 (addr 0x000000004cd7fc28)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd7fbf4   212  blr x16
0x4cd7fbf8   216  ldr lr, [jssp, #16]
0x4cd7fbfc   220  ldp xzr, fp, [jssp], #24
0x4cd7fc00   224  b #-0xa4 (addr 0x4cd7fb5c)
0x4cd7fc04   228  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0x4cd7fc08   232  d63f03e0       constant
0x4cd7fc0c   236  d503201f       constant
0x4cd7fc10   240  21004241       constant
0x4cd7fc14   244  00000000       constant
0x4cd7fc18   248  4cd06820       constant
0x4cd7fc1c   252  00000000       constant
0x4cd7fc20   256  4cd06260       constant
0x4cd7fc24   260  00000000       constant
0x4cd7fc28   264  4cd068e0       constant
0x4cd7fc2c   268  00000000       constant
0x4cd7fc30   272  movz x16, #0x0
0x4cd7fc34   276  sub csp, jssp, #0x10 (16)
0x4cd7fc38   280  stp fp, lr, [jssp, #-16]!
0x4cd7fc3c   284  bl #+0x4 (addr 0x4cd7fc40)
0x4cd7fc40   288  movz x17, #0xa00000000
0x4cd7fc44   292  sub csp, jssp, #0x10 (16)
0x4cd7fc48   296  stp x17, cp, [jssp, #-16]!
0x4cd7fc4c   300  add fp, jssp, #0x10 (16)
0x4cd7fc50   304  ldr x17, pc+24 (addr 0x000000004cd7fc68)    ;; lazy deoptimization bailout 0
0x4cd7fc54   308  add x17, x17, x16
0x4cd7fc58   312  br x17
0x4cd7fc5c   316  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd7fc60   320  d63f03e0       constant
0x4cd7fc64   324  d503201f       constant
0x4cd7fc68   328  4cb06000       constant
0x4cd7fc6c   332  00000000       constant


Safepoints (size = 21)
0x4cd7fbec   204  000 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 22)
0x4cd7fb30  embedded object  (0x21004241 <undefined>)
0x4cd7fbc0  code target (STUB)  (0x4cd06820)
0x4cd7fbe4  code target (STUB)  (0x4cd06260)
0x4cd7fbf0  code target (STUB)  (0x4cd068e0)
0x4cd7fc04  constant pool (size 44)
0x4cd7fc50  runtime entry
0x4cd7fc5c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = FastCloneRegExpStub
name = FastCloneRegExpStub
compiler = crankshaft
Instructions (size = 357)
0x4cd7fb20     0  ldur x4, [x3, #47]
0x4cd7fb24     4  asr x5, x2, #32
0x4cd7fb28     8  add x6, x4, #0x17 (23)
0x4cd7fb2c    12  ldr x7, [x6, w5, sxtw #3]
0x4cd7fb30    16  ldr x4, pc+224 (addr 0x000000004cd7fc10)    ;; object: 0x21004241 <undefined>
0x4cd7fb34    20  cmp x7, x4
0x4cd7fb38    24  b.eq #+0x64 (addr 0x4cd7fb9c)
0x4cd7fb3c    28  movz x1, #0xd2c0
0x4cd7fb40    32  movk x1, #0x166d, lsl #16
0x4cd7fb44    36  ldp x2, x0, [x1]
0x4cd7fb48    40  adds x16, x2, #0x38 (56)
0x4cd7fb4c    44  ccmp x16, x0, #nzCv, lo
0x4cd7fb50    48  b.hi #+0x50 (addr 0x4cd7fba0)
0x4cd7fb54    52  str x16, [x1]
0x4cd7fb58    56  orr x2, x2, #0x1
0x4cd7fb5c    60  ldur x0, [x7, #-1]
0x4cd7fb60    64  stur x0, [x2, #-1]
0x4cd7fb64    68  ldur x0, [x7, #7]
0x4cd7fb68    72  stur x0, [x2, #7]
0x4cd7fb6c    76  ldur x0, [x7, #15]
0x4cd7fb70    80  stur x0, [x2, #15]
0x4cd7fb74    84  ldur x0, [x7, #23]
0x4cd7fb78    88  stur x0, [x2, #23]
0x4cd7fb7c    92  ldur x0, [x7, #31]
0x4cd7fb80    96  stur x0, [x2, #31]
0x4cd7fb84   100  ldur x0, [x7, #39]
0x4cd7fb88   104  stur x0, [x2, #39]
0x4cd7fb8c   108  ldur x0, [x7, #47]
0x4cd7fb90   112  stur x0, [x2, #47]
0x4cd7fb94   116  mov x0, x2
0x4cd7fb98   120  ret
0x4cd7fb9c   124  b #+0x94 (addr 0x4cd7fc30)
0x4cd7fba0   128  sub csp, jssp, #0x10 (16)
0x4cd7fba4   132  stp fp, lr, [jssp, #-16]!
0x4cd7fba8   136  movz fp, #0xa00000000
0x4cd7fbac   140  sub csp, jssp, #0x8 (8)
0x4cd7fbb0   144  str fp, [jssp, #-8]!
0x4cd7fbb4   148  add fp, jssp, #0x8 (8)
0x4cd7fbb8   152  movz x2, #0x0
0x4cd7fbbc   156  mov x16, lr
0x4cd7fbc0   160  ldr x17, pc+88 (addr 0x000000004cd7fc18)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd7fbc4   164  blr x17
0x4cd7fbc8   168  movz x0, #0x3800000000
0x4cd7fbcc   172  movz x10, #0x0
0x4cd7fbd0   176  sub csp, jssp, #0x10 (16)
0x4cd7fbd4   180  stp x10, x0, [jssp, #-16]!
0x4cd7fbd8   184  movz x0, #0x2
0x4cd7fbdc   188  movz x1, #0x5b88
0x4cd7fbe0   192  movk x1, #0xe2, lsl #16
0x4cd7fbe4   196  ldr x16, pc+60 (addr 0x000000004cd7fc20)    ;; code: STUB, CEntryStub, minor: 5
0x4cd7fbe8   200  blr x16
0x4cd7fbec   204  str x0, [jssp, #16]
0x4cd7fbf0   208  ldr x16, pc+56 (addr 0x000000004cd7fc28)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd7fbf4   212  blr x16
0x4cd7fbf8   216  ldr lr, [jssp, #16]
0x4cd7fbfc   220  ldp xzr, fp, [jssp], #24
0x4cd7fc00   224  b #-0xa4 (addr 0x4cd7fb5c)
0x4cd7fc04   228  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0x4cd7fc08   232  d63f03e0       constant
0x4cd7fc0c   236  d503201f       constant
0x4cd7fc10   240  21004241       constant
0x4cd7fc14   244  00000000       constant
0x4cd7fc18   248  4cd06820       constant
0x4cd7fc1c   252  00000000       constant
0x4cd7fc20   256  4cd06260       constant
0x4cd7fc24   260  00000000       constant
0x4cd7fc28   264  4cd068e0       constant
0x4cd7fc2c   268  00000000       constant
0x4cd7fc30   272  movz x16, #0x0
0x4cd7fc34   276  sub csp, jssp, #0x10 (16)
0x4cd7fc38   280  stp fp, lr, [jssp, #-16]!
0x4cd7fc3c   284  bl #+0x4 (addr 0x4cd7fc40)
0x4cd7fc40   288  movz x17, #0xa00000000
0x4cd7fc44   292  sub csp, jssp, #0x10 (16)
0x4cd7fc48   296  stp x17, cp, [jssp, #-16]!
0x4cd7fc4c   300  add fp, jssp, #0x10 (16)
0x4cd7fc50   304  ldr x17, pc+24 (addr 0x000000004cd7fc68)    ;; lazy deoptimization bailout 0
0x4cd7fc54   308  add x17, x17, x16
0x4cd7fc58   312  br x17
0x4cd7fc5c   316  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd7fc60   320  d63f03e0       constant
0x4cd7fc64   324  d503201f       constant
0x4cd7fc68   328  4cb06000       constant
0x4cd7fc6c   332  00000000       constant


Safepoints (size = 21)
0x4cd7fbec   204  000 | x2 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 22)
0x4cd7fb30  embedded object  (0x21004241 <undefined>)
0x4cd7fbc0  code target (STUB)  (0x4cd06820)
0x4cd7fbe4  code target (STUB)  (0x4cd06260)
0x4cd7fbf0  code target (STUB)  (0x4cd068e0)
0x4cd7fc04  constant pool (size 44)
0x4cd7fc50  runtime entry
0x4cd7fc5c  constant pool (size 20)


--- Code ---
kind = TO_BOOLEAN_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 8
type = NORMAL
name = ToBooleanICStub
compiler = crankshaft
Instructions (size = 128)
0x4cd80ba0     0  cbz x0, #+0xc (addr 0x4cd80bac)
0x4cd80ba4     4  tbz w0, #0, #+0x10 (addr 0x4cd80bb4)
0x4cd80ba8     8  b #+0x30 (addr 0x4cd80bd8)
0x4cd80bac    12  ldr x0, pc+28 (addr 0x000000004cd80bc8)    ;; object: 0x210042b1 <false>
0x4cd80bb0    16  ret
0x4cd80bb4    20  ldr x0, pc+28 (addr 0x000000004cd80bd0)    ;; object: 0x21004281 <true>
0x4cd80bb8    24  ret
0x4cd80bbc    28  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd80bc0    32  d63f03e0       constant
0x4cd80bc4    36  d503201f       constant
0x4cd80bc8    40  210042b1       constant
0x4cd80bcc    44  00000000       constant
0x4cd80bd0    48  21004281       constant
0x4cd80bd4    52  00000000       constant
0x4cd80bd8    56  movz x16, #0x0
0x4cd80bdc    60  sub csp, jssp, #0x10 (16)
0x4cd80be0    64  stp fp, lr, [jssp, #-16]!
0x4cd80be4    68  bl #+0x4 (addr 0x4cd80be8)
0x4cd80be8    72  movz x17, #0xa00000000
0x4cd80bec    76  sub csp, jssp, #0x10 (16)
0x4cd80bf0    80  stp x17, cp, [jssp, #-16]!
0x4cd80bf4    84  add fp, jssp, #0x10 (16)
0x4cd80bf8    88  ldr x17, pc+24 (addr 0x000000004cd80c10)    ;; lazy deoptimization bailout 0
0x4cd80bfc    92  add x17, x17, x16
0x4cd80c00    96  br x17
0x4cd80c04   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd80c08   104  d63f03e0       constant
0x4cd80c0c   108  d503201f       constant
0x4cd80c10   112  4cb06000       constant
0x4cd80c14   116  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd80bac  embedded object  (0x210042b1 <false>)
0x4cd80bb4  embedded object  (0x21004281 <true>)
0x4cd80bbc  constant pool (size 28)
0x4cd80bf8  runtime entry
0x4cd80c04  constant pool (size 20)

--- End code ---
kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 8
type = NORMAL
name = ToBooleanICStub(Smi)
compiler = crankshaft
Instructions (size = 128)
0x4cd80ba0     0  cbz x0, #+0xc (addr 0x4cd80bac)
0x4cd80ba4     4  tbz w0, #0, #+0x10 (addr 0x4cd80bb4)
0x4cd80ba8     8  b #+0x30 (addr 0x4cd80bd8)
0x4cd80bac    12  ldr x0, pc+28 (addr 0x000000004cd80bc8)    ;; object: 0x210042b1 <false>
0x4cd80bb0    16  ret
0x4cd80bb4    20  ldr x0, pc+28 (addr 0x000000004cd80bd0)    ;; object: 0x21004281 <true>
0x4cd80bb8    24  ret
0x4cd80bbc    28  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd80bc0    32  d63f03e0       constant
0x4cd80bc4    36  d503201f       constant
0x4cd80bc8    40  210042b1       constant
0x4cd80bcc    44  00000000       constant
0x4cd80bd0    48  21004281       constant
0x4cd80bd4    52  00000000       constant
0x4cd80bd8    56  movz x16, #0x0
0x4cd80bdc    60  sub csp, jssp, #0x10 (16)
0x4cd80be0    64  stp fp, lr, [jssp, #-16]!
0x4cd80be4    68  bl #+0x4 (addr 0x4cd80be8)
0x4cd80be8    72  movz x17, #0xa00000000
0x4cd80bec    76  sub csp, jssp, #0x10 (16)
0x4cd80bf0    80  stp x17, cp, [jssp, #-16]!
0x4cd80bf4    84  add fp, jssp, #0x10 (16)
0x4cd80bf8    88  ldr x17, pc+24 (addr 0x000000004cd80c10)    ;; lazy deoptimization bailout 0
0x4cd80bfc    92  add x17, x17, x16
0x4cd80c00    96  br x17
0x4cd80c04   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd80c08   104  d63f03e0       constant
0x4cd80c0c   108  d503201f       constant
0x4cd80c10   112  4cb06000       constant
0x4cd80c14   116  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd80bac  embedded object  (0x210042b1 <false>)
0x4cd80bb4  embedded object  (0x21004281 <true>)
0x4cd80bbc  constant pool (size 28)
0x4cd80bf8  runtime entry
0x4cd80c04  constant pool (size 20)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1552)
0x4cd80f80     0  adr xzr, #+0x40 (addr 0x4cd80fc0)
0x4cd80f84     4  adr xzr, #+0x2a8 (addr 0x4cd8122c)
0x4cd80f88     8  ldr x16, pc+1368 (addr 0x000000004cd814e0)    ;; external reference (store_buffer_top)
0x4cd80f8c    12  ldr x10, [x16]
0x4cd80f90    16  str x11, [x10], #8
0x4cd80f94    20  str x10, [x16]
0x4cd80f98    24  tst x10, #0x1ffff
0x4cd80f9c    28  b.eq #+0x8 (addr 0x4cd80fa4)
0x4cd80fa0    32  ret
0x4cd80fa4    36  sub csp, jssp, #0x8 (8)
0x4cd80fa8    40  str lr, [jssp, #-8]!
0x4cd80fac    44  ldr x17, pc+1340 (addr 0x000000004cd814e8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd80fb0    48  blr x17
0x4cd80fb4    52  ldr lr, [jssp], #8
0x4cd80fb8    56  ret
0x4cd80fbc    60  ret
0x4cd80fc0    64  sub csp, jssp, #0x10 (16)
0x4cd80fc4    68  stp x1, x0, [jssp, #-16]!
0x4cd80fc8    72  ldr x10, [x11]
0x4cd80fcc    76  and x16, x10, #0xfffffffffff00000
0x4cd80fd0    80  ldr x16, [x16, #8]
0x4cd80fd4    84  tst x16, #0x18
0x4cd80fd8    88  b.eq #+0x17c (addr 0x4cd81154)
0x4cd80fdc    92  and x16, x21, #0xfffffffffff00000
0x4cd80fe0    96  ldr x16, [x16, #8]
0x4cd80fe4   100  tst x16, #0x18
0x4cd80fe8   104  b.ne #+0x16c (addr 0x4cd81154)
0x4cd80fec   108  and x10, x21, #0xfffffffffff00000
0x4cd80ff0   112  ldr x0, [x10, #104]
0x4cd80ff4   116  subs x0, x0, #0x1 (1)
0x4cd80ff8   120  str x0, [x10, #104]
0x4cd80ffc   124  b.mi #+0xc4 (addr 0x4cd810c0)
0x4cd81000   128  ubfx x16, x21, #8, #12
0x4cd81004   132  and x10, x21, #0xfffffffffff00000
0x4cd81008   136  add x10, x10, x16, lsl #2
0x4cd8100c   140  ubfx x0, x21, #3, #5
0x4cd81010   144  ldr x10, [x10, #360]
0x4cd81014   148  lsr x10, x10, x0
0x4cd81018   152  tbz w10, #0, #+0x8 (addr 0x4cd81020)
0x4cd8101c   156  tbnz w10, #1, #+0x3c (addr 0x4cd81058)
0x4cd81020   160  ldp x1, x0, [jssp], #16
0x4cd81024   164  ldr x16, pc+1228 (addr 0x000000004cd814f0)    ;; external reference (store_buffer_top)
0x4cd81028   168  ldr x10, [x16]
0x4cd8102c   172  str x11, [x10], #8
0x4cd81030   176  str x10, [x16]
0x4cd81034   180  tst x10, #0x1ffff
0x4cd81038   184  b.eq #+0x8 (addr 0x4cd81040)
0x4cd8103c   188  ret
0x4cd81040   192  sub csp, jssp, #0x8 (8)
0x4cd81044   196  str lr, [jssp, #-8]!
0x4cd81048   200  ldr x17, pc+1200 (addr 0x000000004cd814f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd8104c   204  blr x17
0x4cd81050   208  ldr lr, [jssp], #8
0x4cd81054   212  ret
0x4cd81058   216  ldr x10, [x11]
0x4cd8105c   220  sub csp, jssp, #0x10 (16)
0x4cd81060   224  stp x21, x11, [jssp, #-16]!
0x4cd81064   228  ubfx x16, x10, #8, #12
0x4cd81068   232  and x0, x10, #0xfffffffffff00000
0x4cd8106c   236  add x0, x0, x16, lsl #2
0x4cd81070   240  ubfx x21, x10, #3, #5
0x4cd81074   244  ldr x11, [x0, #360]
0x4cd81078   248  lsr x11, x11, x21
0x4cd8107c   252  tbz w11, #0, #+0x40 (addr 0x4cd810bc)
0x4cd81080   256  ldp x21, x11, [jssp], #16
0x4cd81084   260  ldp x1, x0, [jssp], #16
0x4cd81088   264  ldr x16, pc+1144 (addr 0x000000004cd81500)    ;; external reference (store_buffer_top)
0x4cd8108c   268  ldr x10, [x16]
0x4cd81090   272  str x11, [x10], #8
0x4cd81094   276  str x10, [x16]
0x4cd81098   280  tst x10, #0x1ffff
0x4cd8109c   284  b.eq #+0x8 (addr 0x4cd810a4)
0x4cd810a0   288  ret
0x4cd810a4   292  sub csp, jssp, #0x8 (8)
0x4cd810a8   296  str lr, [jssp, #-8]!
0x4cd810ac   300  ldr x17, pc+1116 (addr 0x000000004cd81508)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd810b0   304  blr x17
0x4cd810b4   308  ldr lr, [jssp], #8
0x4cd810b8   312  ret
0x4cd810bc   316  ldp x21, x11, [jssp], #16
0x4cd810c0   320  sub csp, jssp, #0x78 (120)
0x4cd810c4   324  stp x14, x15, [jssp, #-32]!
0x4cd810c8   328  stp x18, lr, [jssp, #16]
0x4cd810cc   332  stp x9, x11, [jssp, #-32]!
0x4cd810d0   336  stp x12, x13, [jssp, #16]
0x4cd810d4   340  stp x5, x6, [jssp, #-32]!
0x4cd810d8   344  stp x7, x8, [jssp, #16]
0x4cd810dc   348  stp x2, x3, [jssp, #-24]!
0x4cd810e0   352  str x4, [jssp, #16]
0x4cd810e4   356  mov x0, x21
0x4cd810e8   360  mov x1, x11
0x4cd810ec   364  ldr x2, pc+1060 (addr 0x000000004cd81510)    ;; external reference (isolate)
0x4cd810f0   368  ldr x16, pc+1064 (addr 0x000000004cd81518)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd810f4   372  and csp, jssp, #0xfffffffffffffff0
0x4cd810f8   376  blr x16
0x4cd810fc   380  ldp x4, x5, [jssp, #16]
0x4cd81100   384  ldp x2, x3, [jssp], #32
0x4cd81104   388  ldp x8, x9, [jssp, #16]
0x4cd81108   392  ldp x6, x7, [jssp], #32
0x4cd8110c   396  ldp x13, x14, [jssp, #16]
0x4cd81110   400  ldp x11, x12, [jssp], #32
0x4cd81114   404  ldr lr, [jssp, #16]
0x4cd81118   408  ldp x15, x18, [jssp], #24
0x4cd8111c   412  ldp x1, x0, [jssp], #16
0x4cd81120   416  ldr x16, pc+1024 (addr 0x000000004cd81520)    ;; external reference (store_buffer_top)
0x4cd81124   420  ldr x10, [x16]
0x4cd81128   424  str x11, [x10], #8
0x4cd8112c   428  str x10, [x16]
0x4cd81130   432  tst x10, #0x1ffff
0x4cd81134   436  b.eq #+0x8 (addr 0x4cd8113c)
0x4cd81138   440  ret
0x4cd8113c   444  sub csp, jssp, #0x8 (8)
0x4cd81140   448  str lr, [jssp, #-8]!
0x4cd81144   452  ldr x17, pc+996 (addr 0x000000004cd81528)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd81148   456  blr x17
0x4cd8114c   460  ldr lr, [jssp], #8
0x4cd81150   464  ret
0x4cd81154   468  and x10, x21, #0xfffffffffff00000
0x4cd81158   472  ldr x0, [x10, #104]
0x4cd8115c   476  subs x0, x0, #0x1 (1)
0x4cd81160   480  str x0, [x10, #104]
0x4cd81164   484  b.mi #+0x64 (addr 0x4cd811c8)
0x4cd81168   488  ubfx x16, x21, #8, #12
0x4cd8116c   492  and x10, x21, #0xfffffffffff00000
0x4cd81170   496  add x10, x10, x16, lsl #2
0x4cd81174   500  ubfx x0, x21, #3, #5
0x4cd81178   504  ldr x10, [x10, #360]
0x4cd8117c   508  lsr x10, x10, x0
0x4cd81180   512  tbz w10, #0, #+0x8 (addr 0x4cd81188)
0x4cd81184   516  tbnz w10, #1, #+0xc (addr 0x4cd81190)
0x4cd81188   520  ldp x1, x0, [jssp], #16
0x4cd8118c   524  ret
0x4cd81190   528  ldr x10, [x11]
0x4cd81194   532  sub csp, jssp, #0x10 (16)
0x4cd81198   536  stp x21, x11, [jssp, #-16]!
0x4cd8119c   540  ubfx x16, x10, #8, #12
0x4cd811a0   544  and x0, x10, #0xfffffffffff00000
0x4cd811a4   548  add x0, x0, x16, lsl #2
0x4cd811a8   552  ubfx x21, x10, #3, #5
0x4cd811ac   556  ldr x11, [x0, #360]
0x4cd811b0   560  lsr x11, x11, x21
0x4cd811b4   564  tbz w11, #0, #+0x10 (addr 0x4cd811c4)
0x4cd811b8   568  ldp x21, x11, [jssp], #16
0x4cd811bc   572  ldp x1, x0, [jssp], #16
0x4cd811c0   576  ret
0x4cd811c4   580  ldp x21, x11, [jssp], #16
0x4cd811c8   584  sub csp, jssp, #0x78 (120)
0x4cd811cc   588  stp x14, x15, [jssp, #-32]!
0x4cd811d0   592  stp x18, lr, [jssp, #16]
0x4cd811d4   596  stp x9, x11, [jssp, #-32]!
0x4cd811d8   600  stp x12, x13, [jssp, #16]
0x4cd811dc   604  stp x5, x6, [jssp, #-32]!
0x4cd811e0   608  stp x7, x8, [jssp, #16]
0x4cd811e4   612  stp x2, x3, [jssp, #-24]!
0x4cd811e8   616  str x4, [jssp, #16]
0x4cd811ec   620  mov x0, x21
0x4cd811f0   624  mov x1, x11
0x4cd811f4   628  ldr x2, pc+828 (addr 0x000000004cd81530)    ;; external reference (isolate)
0x4cd811f8   632  ldr x16, pc+832 (addr 0x000000004cd81538)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd811fc   636  and csp, jssp, #0xfffffffffffffff0
0x4cd81200   640  blr x16
0x4cd81204   644  ldp x4, x5, [jssp, #16]
0x4cd81208   648  ldp x2, x3, [jssp], #32
0x4cd8120c   652  ldp x8, x9, [jssp, #16]
0x4cd81210   656  ldp x6, x7, [jssp], #32
0x4cd81214   660  ldp x13, x14, [jssp, #16]
0x4cd81218   664  ldp x11, x12, [jssp], #32
0x4cd8121c   668  ldr lr, [jssp, #16]
0x4cd81220   672  ldp x15, x18, [jssp], #24
0x4cd81224   676  ldp x1, x0, [jssp], #16
0x4cd81228   680  ret
0x4cd8122c   684  sub csp, jssp, #0x10 (16)
0x4cd81230   688  stp x1, x0, [jssp, #-16]!
0x4cd81234   692  ldr x10, [x11]
0x4cd81238   696  and x16, x10, #0xfffffffffff00000
0x4cd8123c   700  ldr x16, [x16, #8]
0x4cd81240   704  tst x16, #0x18
0x4cd81244   708  b.eq #+0x19c (addr 0x4cd813e0)
0x4cd81248   712  and x16, x21, #0xfffffffffff00000
0x4cd8124c   716  ldr x16, [x16, #8]
0x4cd81250   720  tst x16, #0x18
0x4cd81254   724  b.ne #+0x18c (addr 0x4cd813e0)
0x4cd81258   728  and x10, x21, #0xfffffffffff00000
0x4cd8125c   732  ldr x0, [x10, #104]
0x4cd81260   736  subs x0, x0, #0x1 (1)
0x4cd81264   740  str x0, [x10, #104]
0x4cd81268   744  b.mi #+0xe4 (addr 0x4cd8134c)
0x4cd8126c   748  ubfx x16, x21, #8, #12
0x4cd81270   752  and x10, x21, #0xfffffffffff00000
0x4cd81274   756  add x10, x10, x16, lsl #2
0x4cd81278   760  ubfx x0, x21, #3, #5
0x4cd8127c   764  ldr x10, [x10, #360]
0x4cd81280   768  lsr x10, x10, x0
0x4cd81284   772  tbz w10, #0, #+0x8 (addr 0x4cd8128c)
0x4cd81288   776  tbnz w10, #1, #+0x3c (addr 0x4cd812c4)
0x4cd8128c   780  ldp x1, x0, [jssp], #16
0x4cd81290   784  ldr x16, pc+688 (addr 0x000000004cd81540)    ;; external reference (store_buffer_top)
0x4cd81294   788  ldr x10, [x16]
0x4cd81298   792  str x11, [x10], #8
0x4cd8129c   796  str x10, [x16]
0x4cd812a0   800  tst x10, #0x1ffff
0x4cd812a4   804  b.eq #+0x8 (addr 0x4cd812ac)
0x4cd812a8   808  ret
0x4cd812ac   812  sub csp, jssp, #0x8 (8)
0x4cd812b0   816  str lr, [jssp, #-8]!
0x4cd812b4   820  ldr x17, pc+660 (addr 0x000000004cd81548)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd812b8   824  blr x17
0x4cd812bc   828  ldr lr, [jssp], #8
0x4cd812c0   832  ret
0x4cd812c4   836  ldr x10, [x11]
0x4cd812c8   840  and x0, x10, #0xfffffffffff00000
0x4cd812cc   844  ldr x0, [x0, #8]
0x4cd812d0   848  tbz w0, #6, #+0x18 (addr 0x4cd812e8)
0x4cd812d4   852  and x0, x21, #0xfffffffffff00000
0x4cd812d8   856  ldr x0, [x0, #8]
0x4cd812dc   860  movz x16, #0x58
0x4cd812e0   864  tst x0, x16
0x4cd812e4   868  b.eq #+0x68 (addr 0x4cd8134c)
0x4cd812e8   872  sub csp, jssp, #0x10 (16)
0x4cd812ec   876  stp x21, x11, [jssp, #-16]!
0x4cd812f0   880  ubfx x16, x10, #8, #12
0x4cd812f4   884  and x0, x10, #0xfffffffffff00000
0x4cd812f8   888  add x0, x0, x16, lsl #2
0x4cd812fc   892  ubfx x21, x10, #3, #5
0x4cd81300   896  ldr x11, [x0, #360]
0x4cd81304   900  lsr x11, x11, x21
0x4cd81308   904  tbz w11, #0, #+0x40 (addr 0x4cd81348)
0x4cd8130c   908  ldp x21, x11, [jssp], #16
0x4cd81310   912  ldp x1, x0, [jssp], #16
0x4cd81314   916  ldr x16, pc+572 (addr 0x000000004cd81550)    ;; external reference (store_buffer_top)
0x4cd81318   920  ldr x10, [x16]
0x4cd8131c   924  str x11, [x10], #8
0x4cd81320   928  str x10, [x16]
0x4cd81324   932  tst x10, #0x1ffff
0x4cd81328   936  b.eq #+0x8 (addr 0x4cd81330)
0x4cd8132c   940  ret
0x4cd81330   944  sub csp, jssp, #0x8 (8)
0x4cd81334   948  str lr, [jssp, #-8]!
0x4cd81338   952  ldr x17, pc+544 (addr 0x000000004cd81558)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd8133c   956  blr x17
0x4cd81340   960  ldr lr, [jssp], #8
0x4cd81344   964  ret
0x4cd81348   968  ldp x21, x11, [jssp], #16
0x4cd8134c   972  sub csp, jssp, #0x78 (120)
0x4cd81350   976  stp x14, x15, [jssp, #-32]!
0x4cd81354   980  stp x18, lr, [jssp, #16]
0x4cd81358   984  stp x9, x11, [jssp, #-32]!
0x4cd8135c   988  stp x12, x13, [jssp, #16]
0x4cd81360   992  stp x5, x6, [jssp, #-32]!
0x4cd81364   996  stp x7, x8, [jssp, #16]
0x4cd81368  1000  stp x2, x3, [jssp, #-24]!
0x4cd8136c  1004  str x4, [jssp, #16]
0x4cd81370  1008  mov x0, x21
0x4cd81374  1012  mov x1, x11
0x4cd81378  1016  ldr x2, pc+488 (addr 0x000000004cd81560)    ;; external reference (isolate)
0x4cd8137c  1020  ldr x16, pc+492 (addr 0x000000004cd81568)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd81380  1024  and csp, jssp, #0xfffffffffffffff0
0x4cd81384  1028  blr x16
0x4cd81388  1032  ldp x4, x5, [jssp, #16]
0x4cd8138c  1036  ldp x2, x3, [jssp], #32
0x4cd81390  1040  ldp x8, x9, [jssp, #16]
0x4cd81394  1044  ldp x6, x7, [jssp], #32
0x4cd81398  1048  ldp x13, x14, [jssp, #16]
0x4cd8139c  1052  ldp x11, x12, [jssp], #32
0x4cd813a0  1056  ldr lr, [jssp, #16]
0x4cd813a4  1060  ldp x15, x18, [jssp], #24
0x4cd813a8  1064  ldp x1, x0, [jssp], #16
0x4cd813ac  1068  ldr x16, pc+452 (addr 0x000000004cd81570)    ;; external reference (store_buffer_top)
0x4cd813b0  1072  ldr x10, [x16]
0x4cd813b4  1076  str x11, [x10], #8
0x4cd813b8  1080  str x10, [x16]
0x4cd813bc  1084  tst x10, #0x1ffff
0x4cd813c0  1088  b.eq #+0x8 (addr 0x4cd813c8)
0x4cd813c4  1092  ret
0x4cd813c8  1096  sub csp, jssp, #0x8 (8)
0x4cd813cc  1100  str lr, [jssp, #-8]!
0x4cd813d0  1104  ldr x17, pc+424 (addr 0x000000004cd81578)    ;; code: STUB, StoreBufferOverflowStub, minor: 0
0x4cd813d4  1108  blr x17
0x4cd813d8  1112  ldr lr, [jssp], #8
0x4cd813dc  1116  ret
0x4cd813e0  1120  and x10, x21, #0xfffffffffff00000
0x4cd813e4  1124  ldr x0, [x10, #104]
0x4cd813e8  1128  subs x0, x0, #0x1 (1)
0x4cd813ec  1132  str x0, [x10, #104]
0x4cd813f0  1136  b.mi #+0x84 (addr 0x4cd81474)
0x4cd813f4  1140  ubfx x16, x21, #8, #12
0x4cd813f8  1144  and x10, x21, #0xfffffffffff00000
0x4cd813fc  1148  add x10, x10, x16, lsl #2
0x4cd81400  1152  ubfx x0, x21, #3, #5
0x4cd81404  1156  ldr x10, [x10, #360]
0x4cd81408  1160  lsr x10, x10, x0
0x4cd8140c  1164  tbz w10, #0, #+0x8 (addr 0x4cd81414)
0x4cd81410  1168  tbnz w10, #1, #+0xc (addr 0x4cd8141c)
0x4cd81414  1172  ldp x1, x0, [jssp], #16
0x4cd81418  1176  ret
0x4cd8141c  1180  ldr x10, [x11]
0x4cd81420  1184  and x0, x10, #0xfffffffffff00000
0x4cd81424  1188  ldr x0, [x0, #8]
0x4cd81428  1192  tbz w0, #6, #+0x18 (addr 0x4cd81440)
0x4cd8142c  1196  and x0, x21, #0xfffffffffff00000
0x4cd81430  1200  ldr x0, [x0, #8]
0x4cd81434  1204  movz x16, #0x58
0x4cd81438  1208  tst x0, x16
0x4cd8143c  1212  b.eq #+0x38 (addr 0x4cd81474)
0x4cd81440  1216  sub csp, jssp, #0x10 (16)
0x4cd81444  1220  stp x21, x11, [jssp, #-16]!
0x4cd81448  1224  ubfx x16, x10, #8, #12
0x4cd8144c  1228  and x0, x10, #0xfffffffffff00000
0x4cd81450  1232  add x0, x0, x16, lsl #2
0x4cd81454  1236  ubfx x21, x10, #3, #5
0x4cd81458  1240  ldr x11, [x0, #360]
0x4cd8145c  1244  lsr x11, x11, x21
0x4cd81460  1248  tbz w11, #0, #+0x10 (addr 0x4cd81470)
0x4cd81464  1252  ldp x21, x11, [jssp], #16
0x4cd81468  1256  ldp x1, x0, [jssp], #16
0x4cd8146c  1260  ret
0x4cd81470  1264  ldp x21, x11, [jssp], #16
0x4cd81474  1268  sub csp, jssp, #0x78 (120)
0x4cd81478  1272  stp x14, x15, [jssp, #-32]!
0x4cd8147c  1276  stp x18, lr, [jssp, #16]
0x4cd81480  1280  stp x9, x11, [jssp, #-32]!
0x4cd81484  1284  stp x12, x13, [jssp, #16]
0x4cd81488  1288  stp x5, x6, [jssp, #-32]!
0x4cd8148c  1292  stp x7, x8, [jssp, #16]
0x4cd81490  1296  stp x2, x3, [jssp, #-24]!
0x4cd81494  1300  str x4, [jssp, #16]
0x4cd81498  1304  mov x0, x21
0x4cd8149c  1308  mov x1, x11
0x4cd814a0  1312  ldr x2, pc+224 (addr 0x000000004cd81580)    ;; external reference (isolate)
0x4cd814a4  1316  ldr x16, pc+228 (addr 0x000000004cd81588)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd814a8  1320  and csp, jssp, #0xfffffffffffffff0
0x4cd814ac  1324  blr x16
0x4cd814b0  1328  ldp x4, x5, [jssp, #16]
0x4cd814b4  1332  ldp x2, x3, [jssp], #32
0x4cd814b8  1336  ldp x8, x9, [jssp, #16]
0x4cd814bc  1340  ldp x6, x7, [jssp], #32
0x4cd814c0  1344  ldp x13, x14, [jssp, #16]
0x4cd814c4  1348  ldp x11, x12, [jssp], #32
0x4cd814c8  1352  ldr lr, [jssp, #16]
0x4cd814cc  1356  ldp x15, x18, [jssp], #24
0x4cd814d0  1360  ldp x1, x0, [jssp], #16
0x4cd814d4  1364  ret
0x4cd814d8  1368  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd814dc  1372  d63f03e0       constant
0x4cd814e0  1376  166dd8c0       constant
0x4cd814e4  1380  00000000       constant
0x4cd814e8  1384  4cd064c0       constant
0x4cd814ec  1388  00000000       constant
0x4cd814f0  1392  166dd8c0       constant
0x4cd814f4  1396  00000000       constant
0x4cd814f8  1400  4cd064c0       constant
0x4cd814fc  1404  00000000       constant
0x4cd81500  1408  166dd8c0       constant
0x4cd81504  1412  00000000       constant
0x4cd81508  1416  4cd064c0       constant
0x4cd8150c  1420  00000000       constant
0x4cd81510  1424  166dc2d0       constant
0x4cd81514  1428  00000000       constant
0x4cd81518  1432  00c2d958       constant
0x4cd8151c  1436  00000000       constant
0x4cd81520  1440  166dd8c0       constant
0x4cd81524  1444  00000000       constant
0x4cd81528  1448  4cd064c0       constant
0x4cd8152c  1452  00000000       constant
0x4cd81530  1456  166dc2d0       constant
0x4cd81534  1460  00000000       constant
0x4cd81538  1464  00c2d958       constant
0x4cd8153c  1468  00000000       constant
0x4cd81540  1472  166dd8c0       constant
0x4cd81544  1476  00000000       constant
0x4cd81548  1480  4cd064c0       constant
0x4cd8154c  1484  00000000       constant
0x4cd81550  1488  166dd8c0       constant
0x4cd81554  1492  00000000       constant
0x4cd81558  1496  4cd064c0       constant
0x4cd8155c  1500  00000000       constant
0x4cd81560  1504  166dc2d0       constant
0x4cd81564  1508  00000000       constant
0x4cd81568  1512  00c2d958       constant
0x4cd8156c  1516  00000000       constant
0x4cd81570  1520  166dd8c0       constant
0x4cd81574  1524  00000000       constant
0x4cd81578  1528  4cd064c0       constant
0x4cd8157c  1532  00000000       constant
0x4cd81580  1536  166dc2d0       constant
0x4cd81584  1540  00000000       constant
0x4cd81588  1544  00c2d958       constant
0x4cd8158c  1548  00000000       constant


RelocInfo (size = 59)
0x4cd80f88  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd80fac  code target (STUB)  (0x4cd064c0)
0x4cd81024  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd81048  code target (STUB)  (0x4cd064c0)
0x4cd81088  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd810ac  code target (STUB)  (0x4cd064c0)
0x4cd810ec  external reference (isolate)  (0x166dc2d0)
0x4cd810f0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd81120  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd81144  code target (STUB)  (0x4cd064c0)
0x4cd811f4  external reference (isolate)  (0x166dc2d0)
0x4cd811f8  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd81290  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd812b4  code target (STUB)  (0x4cd064c0)
0x4cd81314  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd81338  code target (STUB)  (0x4cd064c0)
0x4cd81378  external reference (isolate)  (0x166dc2d0)
0x4cd8137c  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd813ac  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd813d0  code target (STUB)  (0x4cd064c0)
0x4cd814a0  external reference (isolate)  (0x166dc2d0)
0x4cd814a4  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd814d8  constant pool (size 184)


kind = STUB
major_key = RegExpExecStub
name = RegExpExecStub
compiler = unknown
Instructions (size = 944)
0x4cd81600     0  ldr x10, pc+776 (addr 0x000000004cd81908)    ;; external reference (RegExpStack::memory_size())
0x4cd81604     4  ldr x10, [x10]
0x4cd81608     8  cbz x10, #+0x2c0 (addr 0x4cd818c8)
0x4cd8160c    12  ldr x3, [jssp, #24]
0x4cd81610    16  tbz w3, #0, #+0x2b8 (addr 0x4cd818c8)
0x4cd81614    20  ldur x10, [x3, #-1]
0x4cd81618    24  ldrb w10, [x10, #11]
0x4cd8161c    28  cmp x10, #0xc7 (199)
0x4cd81620    32  b.ne #+0x2a8 (addr 0x4cd818c8)
0x4cd81624    36  ldur x20, [x3, #23]
0x4cd81628    40  ldur x10, [x20, #15]
0x4cd8162c    44  movz x16, #0x200000000
0x4cd81630    48  cmp x10, x16
0x4cd81634    52  b.ne #+0x294 (addr 0x4cd818c8)
0x4cd81638    56  ldursw x10, [x20, #83]
0x4cd8163c    60  add x10, x10, x10
0x4cd81640    64  cmp x10, #0x7e (126)
0x4cd81644    68  b.hi #+0x284 (addr 0x4cd818c8)
0x4cd81648    72  movz w5, #0x0
0x4cd8164c    76  ldr x19, [jssp, #16]
0x4cd81650    80  tbz w19, #0, #+0x278 (addr 0x4cd818c8)
0x4cd81654    84  ldur x2, [x19, #15]
0x4cd81658    88  ldur x10, [x19, #-1]
0x4cd8165c    92  ldrb w0, [x10, #11]
0x4cd81660    96  movz w16, #0x93
0x4cd81664   100  and w6, w0, w16
0x4cd81668   104  cbz w6, #+0x24 (addr 0x4cd8168c)
0x4cd8166c   108  cmp w6, #0x2 (2)
0x4cd81670   112  b.ge #+0x268 (addr 0x4cd818d8)
0x4cd81674   116  ldur x10, [x19, #31]
0x4cd81678   120  ldr x16, [x26, #80]
0x4cd8167c   124  cmp x10, x16
0x4cd81680   128  b.ne #+0x248 (addr 0x4cd818c8)
0x4cd81684   132  ldur x19, [x19, #23]
0x4cd81688   136  b #-0x30 (addr 0x4cd81658)
0x4cd8168c   140  ldr x10, [jssp, #8]
0x4cd81690   144  tbnz w10, #0, #+0x238 (addr 0x4cd818c8)
0x4cd81694   148  cmp x2, x10
0x4cd81698   152  b.ls #+0x230 (addr 0x4cd818c8)
0x4cd8169c   156  asr x1, x10, #32
0x4cd816a0   160  movz x10, #0x8
0x4cd816a4   164  ands w4, w0, #0x4
0x4cd816a8   168  csel x10, xzr, x10, ne
0x4cd816ac   172  add x10, x20, x10
0x4cd816b0   176  ldur x22, [x10, #39]
0x4cd816b4   180  tbz w22, #0, #+0x214 (addr 0x4cd818c8)
0x4cd816b8   184  sub csp, jssp, #0x10 (16)
0x4cd816bc   188  stp fp, lr, [jssp, #-16]!
0x4cd816c0   192  mov fp, jssp
0x4cd816c4   196  movz x10, #0x300000000
0x4cd816c8   200  sub csp, jssp, #0x8 (8)
0x4cd816cc   204  str x10, [jssp, #-8]!
0x4cd816d0   208  sub csp, jssp, #0x8 (8)
0x4cd816d4   212  str xzr, [jssp, #-8]!
0x4cd816d8   216  ldr x10, pc+568 (addr 0x000000004cd81910)    ;; object: 0x4cd815a1 <Code: STUB>
0x4cd816dc   220  sub csp, jssp, #0x8 (8)
0x4cd816e0   224  str x10, [jssp, #-8]!
0x4cd816e4   228  ldr x10, pc+564 (addr 0x000000004cd81918)    ;; external reference (Isolate::c_entry_fp_address)
0x4cd816e8   232  str fp, [x10]
0x4cd816ec   236  ldr x10, pc+564 (addr 0x000000004cd81920)    ;; external reference (Isolate::context_address)
0x4cd816f0   240  str cp, [x10]
0x4cd816f4   244  sub csp, jssp, #0x10 (16)
0x4cd816f8   248  sub jssp, jssp, #0x10 (16)
0x4cd816fc   252  and csp, jssp, #0xfffffffffffffff0
0x4cd81700   256  add x10, csp, #0x8 (8)
0x4cd81704   260  stur x10, [fp, #-16]
0x4cd81708   264  ldr x10, pc+544 (addr 0x000000004cd81928)    ;; external reference (isolate)
0x4cd8170c   268  str x10, [csp, #8]
0x4cd81710   272  add x13, x19, #0x17 (23)
0x4cd81714   276  ldr x19, [fp, #32]
0x4cd81718   280  ldur w11, [x19, #19]
0x4cd8171c   284  ubfx w4, w4, #2, #1
0x4cd81720   288  eor w4, w4, #0x1
0x4cd81724   292  lsl w12, w1, w4
0x4cd81728   296  lsl w11, w11, w4
0x4cd8172c   300  lsl w5, w5, w4
0x4cd81730   304  mov x0, x19
0x4cd81734   308  add w10, w12, w5
0x4cd81738   312  add x2, x13, w10, uxtw
0x4cd8173c   316  sub w10, w11, w12
0x4cd81740   320  add x3, x2, w10, uxtw
0x4cd81744   324  ldr x4, pc+492 (addr 0x000000004cd81930)    ;; external reference (OffsetsVector::static_offsets_vector)
0x4cd81748   328  movz x5, #0x0
0x4cd8174c   332  ldr x10, pc+492 (addr 0x000000004cd81938)    ;; external reference (RegExpStack::memory_address())
0x4cd81750   336  ldr x10, [x10]
0x4cd81754   340  ldr x11, pc+492 (addr 0x000000004cd81940)    ;; external reference (RegExpStack::memory_size())
0x4cd81758   344  ldr x11, [x11]
0x4cd8175c   348  add x6, x10, x11
0x4cd81760   352  movz x7, #0x1
0x4cd81764   356  add x22, x22, #0x5f (95)
0x4cd81768   360  ldr lr, pc+480 (addr 0x000000004cd81948)    ;; code: STUB, DirectCEntryStub, minor: 0
0x4cd8176c   364  mov x10, x22
0x4cd81770   368  blr lr
0x4cd81774   372  ldr x10, pc+476 (addr 0x000000004cd81950)    ;; external reference (Isolate::context_address)
0x4cd81778   376  ldr cp, [x10]
0x4cd8177c   380  ldr x10, pc+476 (addr 0x000000004cd81958)    ;; external reference (Isolate::c_entry_fp_address)
0x4cd81780   384  str xzr, [x10]
0x4cd81784   388  mov jssp, fp
0x4cd81788   392  ldp fp, lr, [jssp], #16
0x4cd8178c   396  cbz w0, #+0x130 (addr 0x4cd818bc)
0x4cd81790   400  cmn w0, #0x1 (1)
0x4cd81794   404  b.eq #+0x104 (addr 0x4cd81898)
0x4cd81798   408  cmn w0, #0x2 (2)
0x4cd8179c   412  b.eq #+0x12c (addr 0x4cd818c8)
0x4cd817a0   416  ldursw x10, [x20, #83]
0x4cd817a4   420  add x10, x10, x10
0x4cd817a8   424  add x12, x10, #0x2 (2)
0x4cd817ac   428  ldr x10, [jssp]
0x4cd817b0   432  tbz w10, #0, #+0x118 (addr 0x4cd818c8)
0x4cd817b4   436  ldur x11, [x10, #-1]
0x4cd817b8   440  ldrb w11, [x11, #11]
0x4cd817bc   444  cmp x11, #0xbc (188)
0x4cd817c0   448  b.ne #+0x108 (addr 0x4cd818c8)
0x4cd817c4   452  ldur x21, [x10, #15]
0x4cd817c8   456  ldur x10, [x21, #-1]
0x4cd817cc   460  ldr x16, [x26, #224]
0x4cd817d0   464  cmp x10, x16
0x4cd817d4   468  b.ne #+0xf4 (addr 0x4cd818c8)
0x4cd817d8   472  ldursw x10, [x21, #11]
0x4cd817dc   476  add x11, x12, #0x3 (3)
0x4cd817e0   480  cmp x11, x10
0x4cd817e4   484  b.gt #+0xe4 (addr 0x4cd818c8)
0x4cd817e8   488  lsl x10, x12, #32
0x4cd817ec   492  stur x10, [x21, #15]
0x4cd817f0   496  stur x19, [x21, #23]
0x4cd817f4   500  mov x10, x19
0x4cd817f8   504  tbz w10, #0, #+0x34 (addr 0x4cd8182c)
0x4cd817fc   508  add x11, x21, #0x17 (23)
0x4cd81800   512  and x10, x10, #0xfffffffffff00000
0x4cd81804   516  ldr x10, [x10, #8]
0x4cd81808   520  tbz w10, #1, #+0x24 (addr 0x4cd8182c)
0x4cd8180c   524  and x10, x21, #0xfffffffffff00000
0x4cd81810   528  ldr x10, [x10, #8]
0x4cd81814   532  tbz w10, #2, #+0x18 (addr 0x4cd8182c)
0x4cd81818   536  sub csp, jssp, #0x8 (8)
0x4cd8181c   540  str lr, [jssp, #-8]!
0x4cd81820   544  ldr x16, pc+320 (addr 0x000000004cd81960)    ;; code: STUB, RecordWriteStub, minor: 11605
0x4cd81824   548  blr x16
0x4cd81828   552  ldr lr, [jssp], #8
0x4cd8182c   556  stur x19, [x21, #31]
0x4cd81830   560  mov x10, x19
0x4cd81834   564  tbz w10, #0, #+0x34 (addr 0x4cd81868)
0x4cd81838   568  add x11, x21, #0x1f (31)
0x4cd8183c   572  and x10, x10, #0xfffffffffff00000
0x4cd81840   576  ldr x10, [x10, #8]
0x4cd81844   580  tbz w10, #1, #+0x24 (addr 0x4cd81868)
0x4cd81848   584  and x10, x21, #0xfffffffffff00000
0x4cd8184c   588  ldr x10, [x10, #8]
0x4cd81850   592  tbz w10, #2, #+0x18 (addr 0x4cd81868)
0x4cd81854   596  sub csp, jssp, #0x8 (8)
0x4cd81858   600  str lr, [jssp, #-8]!
0x4cd8185c   604  ldr x16, pc+268 (addr 0x000000004cd81968)    ;; code: STUB, RecordWriteStub, minor: 11605
0x4cd81860   608  blr x16
0x4cd81864   612  ldr lr, [jssp], #8
0x4cd81868   616  ldr x14, pc+264 (addr 0x000000004cd81970)    ;; external reference (OffsetsVector::static_offsets_vector)
0x4cd8186c   620  add x13, x21, #0x27 (39)
0x4cd81870   624  subs x12, x12, #0x2 (2)
0x4cd81874   628  b.mi #+0x18 (addr 0x4cd8188c)
0x4cd81878   632  ldr x15, [x14], #8
0x4cd8187c   636  lsl x10, x15, #32
0x4cd81880   640  and x11, x15, #0xffffffff00000000
0x4cd81884   644  stp x10, x11, [x13], #16
0x4cd81888   648  b #-0x18 (addr 0x4cd81870)
0x4cd8188c   652  ldr x0, [jssp]
0x4cd81890   656  add jssp, jssp, #0x20 (32)
0x4cd81894   660  ret
0x4cd81898   664  ldr x10, pc+224 (addr 0x000000004cd81978)    ;; object: 0x21004519 <the hole>
0x4cd8189c   668  ldr x11, pc+228 (addr 0x000000004cd81980)    ;; external reference (Isolate::pending_exception_address)
0x4cd818a0   672  ldr x0, [x11]
0x4cd818a4   676  cmp x10, x0
0x4cd818a8   680  b.eq #+0x20 (addr 0x4cd818c8)
0x4cd818ac   684  movz x0, #0x4
0x4cd818b0   688  ldr x1, pc+216 (addr 0x000000004cd81988)    ;; external reference (Runtime::RegExpExecReThrow)
0x4cd818b4   692  ldr x16, pc+220 (addr 0x000000004cd81990)    ;; code: STUB, CEntryStub, minor: 4
0x4cd818b8   696  br x16
0x4cd818bc   700  ldr x0, pc+220 (addr 0x000000004cd81998)    ;; object: 0x21004211 <null>
0x4cd818c0   704  add jssp, jssp, #0x20 (32)
0x4cd818c4   708  ret
0x4cd818c8   712  movz x0, #0x4
0x4cd818cc   716  ldr x1, pc+212 (addr 0x000000004cd819a0)    ;; external reference (Runtime::RegExpExec)
0x4cd818d0   720  ldr x16, pc+216 (addr 0x000000004cd819a8)    ;; code: STUB, CEntryStub, minor: 4
0x4cd818d4   724  br x16
0x4cd818d8   728  b.ne #+0x10 (addr 0x4cd818e8)
0x4cd818dc   732  ldur x19, [x19, #31]
0x4cd818e0   736  sub x19, x19, #0x17 (23)
0x4cd818e4   740  b #-0x258 (addr 0x4cd8168c)
0x4cd818e8   744  movz w16, #0x90
0x4cd818ec   748  tst w6, w16
0x4cd818f0   752  b.ne #-0x28 (addr 0x4cd818c8)
0x4cd818f4   756  ldur w5, [x19, #35]
0x4cd818f8   760  ldur x19, [x19, #23]
0x4cd818fc   764  b #-0x2a4 (addr 0x4cd81658)
0x4cd81900   768  5800057f       constant pool begin (num_const = 43)    ;; constant pool
0x4cd81904   772  d63f03e0       constant
0x4cd81908   776  16706988       constant
0x4cd8190c   780  00000000       constant
0x4cd81910   784  4cd815a1       constant
0x4cd81914   788  00000000       constant
0x4cd81918   792  166dddf8       constant
0x4cd8191c   796  00000000       constant
0x4cd81920   800  166ddd90       constant
0x4cd81924   804  00000000       constant
0x4cd81928   808  166dc2d0       constant
0x4cd8192c   812  00000000       constant
0x4cd81930   816  166e0e28       constant
0x4cd81934   820  00000000       constant
0x4cd81938   824  16706980       constant
0x4cd8193c   828  00000000       constant
0x4cd81940   832  16706988       constant
0x4cd81944   836  00000000       constant
0x4cd81948   840  4cd68200       constant
0x4cd8194c   844  00000000       constant
0x4cd81950   848  166ddd90       constant
0x4cd81954   852  00000000       constant
0x4cd81958   856  166dddf8       constant
0x4cd8195c   860  00000000       constant
0x4cd81960   864  4cd80f80       constant
0x4cd81964   868  00000000       constant
0x4cd81968   872  4cd80f80       constant
0x4cd8196c   876  00000000       constant
0x4cd81970   880  166e0e28       constant
0x4cd81974   884  00000000       constant
0x4cd81978   888  21004519       constant
0x4cd8197c   892  00000000       constant
0x4cd81980   896  166ddda0       constant
0x4cd81984   900  00000000       constant
0x4cd81988   904  00e59010       constant
0x4cd8198c   908  00000000       constant
0x4cd81990   912  4cd06060       constant
0x4cd81994   916  00000000       constant
0x4cd81998   920  21004211       constant
0x4cd8199c   924  00000000       constant
0x4cd819a0   928  00e57200       constant
0x4cd819a4   932  00000000       constant
0x4cd819a8   936  4cd06060       constant
0x4cd819ac   940  00000000       constant


RelocInfo (size = 44)
0x4cd81600  external reference (RegExpStack::memory_size())  (0x16706988)
0x4cd816d8  embedded object  (0x4cd815a1 <Code: STUB>)
0x4cd816e4  external reference (Isolate::c_entry_fp_address)  (0x166dddf8)
0x4cd816ec  external reference (Isolate::context_address)  (0x166ddd90)
0x4cd81708  external reference (isolate)  (0x166dc2d0)
0x4cd81744  external reference (OffsetsVector::static_offsets_vector)  (0x166e0e28)
0x4cd8174c  external reference (RegExpStack::memory_address())  (0x16706980)
0x4cd81754  external reference (RegExpStack::memory_size())  (0x16706988)
0x4cd81768  code target (STUB)  (0x4cd68200)
0x4cd81774  external reference (Isolate::context_address)  (0x166ddd90)
0x4cd8177c  external reference (Isolate::c_entry_fp_address)  (0x166dddf8)
0x4cd81820  code target (STUB)  (0x4cd80f80)
0x4cd8185c  code target (STUB)  (0x4cd80f80)
0x4cd81868  external reference (OffsetsVector::static_offsets_vector)  (0x166e0e28)
0x4cd81898  embedded object  (0x21004519 <the hole>)
0x4cd8189c  external reference (Isolate::pending_exception_address)  (0x166ddda0)
0x4cd818b0  external reference (Runtime::RegExpExecReThrow)  (0xe59010)
0x4cd818b4  code target (STUB)  (0x4cd06060)
0x4cd818bc  embedded object  (0x21004211 <null>)
0x4cd818cc  external reference (Runtime::RegExpExec)  (0xe57200)
0x4cd818d0  code target (STUB)  (0x4cd06060)
0x4cd81900  constant pool (size 176)


kind = STUB
major_key = RecordWriteStub
name = RecordWriteStub
compiler = unknown
Instructions (size = 1920)
0x4cd81a20     0  adr xzr, #+0x40 (addr 0x4cd81a60)
0x4cd81a24     4  adr xzr, #+0x360 (addr 0x4cd81d84)
0x4cd81a28     8  ldr x16, pc+1736 (addr 0x000000004cd820f0)    ;; external reference (store_buffer_top)
0x4cd81a2c    12  ldr x3, [x16]
0x4cd81a30    16  str x4, [x3], #8
0x4cd81a34    20  str x3, [x16]
0x4cd81a38    24  tst x3, #0x1ffff
0x4cd81a3c    28  b.eq #+0x8 (addr 0x4cd81a44)
0x4cd81a40    32  ret
0x4cd81a44    36  sub csp, jssp, #0x8 (8)
0x4cd81a48    40  str lr, [jssp, #-8]!
0x4cd81a4c    44  ldr x17, pc+1708 (addr 0x000000004cd820f8)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd81a50    48  blr x17
0x4cd81a54    52  ldr lr, [jssp], #8
0x4cd81a58    56  ret
0x4cd81a5c    60  ret
0x4cd81a60    64  sub csp, jssp, #0x10 (16)
0x4cd81a64    68  stp x1, x0, [jssp, #-16]!
0x4cd81a68    72  ldr x3, [x4]
0x4cd81a6c    76  and x16, x3, #0xfffffffffff00000
0x4cd81a70    80  ldr x16, [x16, #8]
0x4cd81a74    84  tst x16, #0x18
0x4cd81a78    88  b.eq #+0x1d8 (addr 0x4cd81c50)
0x4cd81a7c    92  and x16, x6, #0xfffffffffff00000
0x4cd81a80    96  ldr x16, [x16, #8]
0x4cd81a84   100  tst x16, #0x18
0x4cd81a88   104  b.ne #+0x1c8 (addr 0x4cd81c50)
0x4cd81a8c   108  and x3, x6, #0xfffffffffff00000
0x4cd81a90   112  ldr x0, [x3, #104]
0x4cd81a94   116  subs x0, x0, #0x1 (1)
0x4cd81a98   120  str x0, [x3, #104]
0x4cd81a9c   124  b.mi #+0xc4 (addr 0x4cd81b60)
0x4cd81aa0   128  ubfx x16, x6, #8, #12
0x4cd81aa4   132  and x3, x6, #0xfffffffffff00000
0x4cd81aa8   136  add x3, x3, x16, lsl #2
0x4cd81aac   140  ubfx x0, x6, #3, #5
0x4cd81ab0   144  ldr x3, [x3, #360]
0x4cd81ab4   148  lsr x3, x3, x0
0x4cd81ab8   152  tbz w3, #0, #+0x8 (addr 0x4cd81ac0)
0x4cd81abc   156  tbnz w3, #1, #+0x3c (addr 0x4cd81af8)
0x4cd81ac0   160  ldp x1, x0, [jssp], #16
0x4cd81ac4   164  ldr x16, pc+1596 (addr 0x000000004cd82100)    ;; external reference (store_buffer_top)
0x4cd81ac8   168  ldr x3, [x16]
0x4cd81acc   172  str x4, [x3], #8
0x4cd81ad0   176  str x3, [x16]
0x4cd81ad4   180  tst x3, #0x1ffff
0x4cd81ad8   184  b.eq #+0x8 (addr 0x4cd81ae0)
0x4cd81adc   188  ret
0x4cd81ae0   192  sub csp, jssp, #0x8 (8)
0x4cd81ae4   196  str lr, [jssp, #-8]!
0x4cd81ae8   200  ldr x17, pc+1568 (addr 0x000000004cd82108)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd81aec   204  blr x17
0x4cd81af0   208  ldr lr, [jssp], #8
0x4cd81af4   212  ret
0x4cd81af8   216  ldr x3, [x4]
0x4cd81afc   220  sub csp, jssp, #0x10 (16)
0x4cd81b00   224  stp x6, x4, [jssp, #-16]!
0x4cd81b04   228  ubfx x16, x3, #8, #12
0x4cd81b08   232  and x0, x3, #0xfffffffffff00000
0x4cd81b0c   236  add x0, x0, x16, lsl #2
0x4cd81b10   240  ubfx x6, x3, #3, #5
0x4cd81b14   244  ldr x4, [x0, #360]
0x4cd81b18   248  lsr x4, x4, x6
0x4cd81b1c   252  tbz w4, #0, #+0x40 (addr 0x4cd81b5c)
0x4cd81b20   256  ldp x6, x4, [jssp], #16
0x4cd81b24   260  ldp x1, x0, [jssp], #16
0x4cd81b28   264  ldr x16, pc+1512 (addr 0x000000004cd82110)    ;; external reference (store_buffer_top)
0x4cd81b2c   268  ldr x3, [x16]
0x4cd81b30   272  str x4, [x3], #8
0x4cd81b34   276  str x3, [x16]
0x4cd81b38   280  tst x3, #0x1ffff
0x4cd81b3c   284  b.eq #+0x8 (addr 0x4cd81b44)
0x4cd81b40   288  ret
0x4cd81b44   292  sub csp, jssp, #0x8 (8)
0x4cd81b48   296  str lr, [jssp, #-8]!
0x4cd81b4c   300  ldr x17, pc+1484 (addr 0x000000004cd82118)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd81b50   304  blr x17
0x4cd81b54   308  ldr lr, [jssp], #8
0x4cd81b58   312  ret
0x4cd81b5c   316  ldp x6, x4, [jssp], #16
0x4cd81b60   320  sub csp, jssp, #0x78 (120)
0x4cd81b64   324  stp x14, x15, [jssp, #-32]!
0x4cd81b68   328  stp x18, lr, [jssp, #16]
0x4cd81b6c   332  stp x10, x11, [jssp, #-32]!
0x4cd81b70   336  stp x12, x13, [jssp, #16]
0x4cd81b74   340  stp x6, x7, [jssp, #-32]!
0x4cd81b78   344  stp x8, x9, [jssp, #16]
0x4cd81b7c   348  stp x2, x4, [jssp, #-24]!
0x4cd81b80   352  str x5, [jssp, #16]
0x4cd81b84   356  sub csp, jssp, #0xb0 (176)
0x4cd81b88   360  stp d26, d27, [jssp, #-32]!
0x4cd81b8c   364  stp d28, d29, [jssp, #16]
0x4cd81b90   368  stp d22, d23, [jssp, #-32]!
0x4cd81b94   372  stp d24, d25, [jssp, #16]
0x4cd81b98   376  stp d18, d19, [jssp, #-32]!
0x4cd81b9c   380  stp d20, d21, [jssp, #16]
0x4cd81ba0   384  stp d6, d7, [jssp, #-32]!
0x4cd81ba4   388  stp d16, d17, [jssp, #16]
0x4cd81ba8   392  stp d2, d3, [jssp, #-32]!
0x4cd81bac   396  stp d4, d5, [jssp, #16]
0x4cd81bb0   400  stp d0, d1, [jssp, #-16]!
0x4cd81bb4   404  mov x0, x6
0x4cd81bb8   408  mov x1, x4
0x4cd81bbc   412  ldr x2, pc+1380 (addr 0x000000004cd82120)    ;; external reference (isolate)
0x4cd81bc0   416  ldr x16, pc+1384 (addr 0x000000004cd82128)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd81bc4   420  and csp, jssp, #0xfffffffffffffff0
0x4cd81bc8   424  blr x16
0x4cd81bcc   428  ldp d2, d3, [jssp, #16]
0x4cd81bd0   432  ldp d0, d1, [jssp], #32
0x4cd81bd4   436  ldp d6, d7, [jssp, #16]
0x4cd81bd8   440  ldp d4, d5, [jssp], #32
0x4cd81bdc   444  ldp d18, d19, [jssp, #16]
0x4cd81be0   448  ldp d16, d17, [jssp], #32
0x4cd81be4   452  ldp d22, d23, [jssp, #16]
0x4cd81be8   456  ldp d20, d21, [jssp], #32
0x4cd81bec   460  ldp d26, d27, [jssp, #16]
0x4cd81bf0   464  ldp d24, d25, [jssp], #32
0x4cd81bf4   468  ldp d28, d29, [jssp], #16
0x4cd81bf8   472  ldp x5, x6, [jssp, #16]
0x4cd81bfc   476  ldp x2, x4, [jssp], #32
0x4cd81c00   480  ldp x9, x10, [jssp, #16]
0x4cd81c04   484  ldp x7, x8, [jssp], #32
0x4cd81c08   488  ldp x13, x14, [jssp, #16]
0x4cd81c0c   492  ldp x11, x12, [jssp], #32
0x4cd81c10   496  ldr lr, [jssp, #16]
0x4cd81c14   500  ldp x15, x18, [jssp], #24
0x4cd81c18   504  ldp x1, x0, [jssp], #16
0x4cd81c1c   508  ldr x16, pc+1300 (addr 0x000000004cd82130)    ;; external reference (store_buffer_top)
0x4cd81c20   512  ldr x3, [x16]
0x4cd81c24   516  str x4, [x3], #8
0x4cd81c28   520  str x3, [x16]
0x4cd81c2c   524  tst x3, #0x1ffff
0x4cd81c30   528  b.eq #+0x8 (addr 0x4cd81c38)
0x4cd81c34   532  ret
0x4cd81c38   536  sub csp, jssp, #0x8 (8)
0x4cd81c3c   540  str lr, [jssp, #-8]!
0x4cd81c40   544  ldr x17, pc+1272 (addr 0x000000004cd82138)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd81c44   548  blr x17
0x4cd81c48   552  ldr lr, [jssp], #8
0x4cd81c4c   556  ret
0x4cd81c50   560  and x3, x6, #0xfffffffffff00000
0x4cd81c54   564  ldr x0, [x3, #104]
0x4cd81c58   568  subs x0, x0, #0x1 (1)
0x4cd81c5c   572  str x0, [x3, #104]
0x4cd81c60   576  b.mi #+0x64 (addr 0x4cd81cc4)
0x4cd81c64   580  ubfx x16, x6, #8, #12
0x4cd81c68   584  and x3, x6, #0xfffffffffff00000
0x4cd81c6c   588  add x3, x3, x16, lsl #2
0x4cd81c70   592  ubfx x0, x6, #3, #5
0x4cd81c74   596  ldr x3, [x3, #360]
0x4cd81c78   600  lsr x3, x3, x0
0x4cd81c7c   604  tbz w3, #0, #+0x8 (addr 0x4cd81c84)
0x4cd81c80   608  tbnz w3, #1, #+0xc (addr 0x4cd81c8c)
0x4cd81c84   612  ldp x1, x0, [jssp], #16
0x4cd81c88   616  ret
0x4cd81c8c   620  ldr x3, [x4]
0x4cd81c90   624  sub csp, jssp, #0x10 (16)
0x4cd81c94   628  stp x6, x4, [jssp, #-16]!
0x4cd81c98   632  ubfx x16, x3, #8, #12
0x4cd81c9c   636  and x0, x3, #0xfffffffffff00000
0x4cd81ca0   640  add x0, x0, x16, lsl #2
0x4cd81ca4   644  ubfx x6, x3, #3, #5
0x4cd81ca8   648  ldr x4, [x0, #360]
0x4cd81cac   652  lsr x4, x4, x6
0x4cd81cb0   656  tbz w4, #0, #+0x10 (addr 0x4cd81cc0)
0x4cd81cb4   660  ldp x6, x4, [jssp], #16
0x4cd81cb8   664  ldp x1, x0, [jssp], #16
0x4cd81cbc   668  ret
0x4cd81cc0   672  ldp x6, x4, [jssp], #16
0x4cd81cc4   676  sub csp, jssp, #0x78 (120)
0x4cd81cc8   680  stp x14, x15, [jssp, #-32]!
0x4cd81ccc   684  stp x18, lr, [jssp, #16]
0x4cd81cd0   688  stp x10, x11, [jssp, #-32]!
0x4cd81cd4   692  stp x12, x13, [jssp, #16]
0x4cd81cd8   696  stp x6, x7, [jssp, #-32]!
0x4cd81cdc   700  stp x8, x9, [jssp, #16]
0x4cd81ce0   704  stp x2, x4, [jssp, #-24]!
0x4cd81ce4   708  str x5, [jssp, #16]
0x4cd81ce8   712  sub csp, jssp, #0xb0 (176)
0x4cd81cec   716  stp d26, d27, [jssp, #-32]!
0x4cd81cf0   720  stp d28, d29, [jssp, #16]
0x4cd81cf4   724  stp d22, d23, [jssp, #-32]!
0x4cd81cf8   728  stp d24, d25, [jssp, #16]
0x4cd81cfc   732  stp d18, d19, [jssp, #-32]!
0x4cd81d00   736  stp d20, d21, [jssp, #16]
0x4cd81d04   740  stp d6, d7, [jssp, #-32]!
0x4cd81d08   744  stp d16, d17, [jssp, #16]
0x4cd81d0c   748  stp d2, d3, [jssp, #-32]!
0x4cd81d10   752  stp d4, d5, [jssp, #16]
0x4cd81d14   756  stp d0, d1, [jssp, #-16]!
0x4cd81d18   760  mov x0, x6
0x4cd81d1c   764  mov x1, x4
0x4cd81d20   768  ldr x2, pc+1056 (addr 0x000000004cd82140)    ;; external reference (isolate)
0x4cd81d24   772  ldr x16, pc+1060 (addr 0x000000004cd82148)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd81d28   776  and csp, jssp, #0xfffffffffffffff0
0x4cd81d2c   780  blr x16
0x4cd81d30   784  ldp d2, d3, [jssp, #16]
0x4cd81d34   788  ldp d0, d1, [jssp], #32
0x4cd81d38   792  ldp d6, d7, [jssp, #16]
0x4cd81d3c   796  ldp d4, d5, [jssp], #32
0x4cd81d40   800  ldp d18, d19, [jssp, #16]
0x4cd81d44   804  ldp d16, d17, [jssp], #32
0x4cd81d48   808  ldp d22, d23, [jssp, #16]
0x4cd81d4c   812  ldp d20, d21, [jssp], #32
0x4cd81d50   816  ldp d26, d27, [jssp, #16]
0x4cd81d54   820  ldp d24, d25, [jssp], #32
0x4cd81d58   824  ldp d28, d29, [jssp], #16
0x4cd81d5c   828  ldp x5, x6, [jssp, #16]
0x4cd81d60   832  ldp x2, x4, [jssp], #32
0x4cd81d64   836  ldp x9, x10, [jssp, #16]
0x4cd81d68   840  ldp x7, x8, [jssp], #32
0x4cd81d6c   844  ldp x13, x14, [jssp, #16]
0x4cd81d70   848  ldp x11, x12, [jssp], #32
0x4cd81d74   852  ldr lr, [jssp, #16]
0x4cd81d78   856  ldp x15, x18, [jssp], #24
0x4cd81d7c   860  ldp x1, x0, [jssp], #16
0x4cd81d80   864  ret
0x4cd81d84   868  sub csp, jssp, #0x10 (16)
0x4cd81d88   872  stp x1, x0, [jssp, #-16]!
0x4cd81d8c   876  ldr x3, [x4]
0x4cd81d90   880  and x16, x3, #0xfffffffffff00000
0x4cd81d94   884  ldr x16, [x16, #8]
0x4cd81d98   888  tst x16, #0x18
0x4cd81d9c   892  b.eq #+0x1f8 (addr 0x4cd81f94)
0x4cd81da0   896  and x16, x6, #0xfffffffffff00000
0x4cd81da4   900  ldr x16, [x16, #8]
0x4cd81da8   904  tst x16, #0x18
0x4cd81dac   908  b.ne #+0x1e8 (addr 0x4cd81f94)
0x4cd81db0   912  and x3, x6, #0xfffffffffff00000
0x4cd81db4   916  ldr x0, [x3, #104]
0x4cd81db8   920  subs x0, x0, #0x1 (1)
0x4cd81dbc   924  str x0, [x3, #104]
0x4cd81dc0   928  b.mi #+0xe4 (addr 0x4cd81ea4)
0x4cd81dc4   932  ubfx x16, x6, #8, #12
0x4cd81dc8   936  and x3, x6, #0xfffffffffff00000
0x4cd81dcc   940  add x3, x3, x16, lsl #2
0x4cd81dd0   944  ubfx x0, x6, #3, #5
0x4cd81dd4   948  ldr x3, [x3, #360]
0x4cd81dd8   952  lsr x3, x3, x0
0x4cd81ddc   956  tbz w3, #0, #+0x8 (addr 0x4cd81de4)
0x4cd81de0   960  tbnz w3, #1, #+0x3c (addr 0x4cd81e1c)
0x4cd81de4   964  ldp x1, x0, [jssp], #16
0x4cd81de8   968  ldr x16, pc+872 (addr 0x000000004cd82150)    ;; external reference (store_buffer_top)
0x4cd81dec   972  ldr x3, [x16]
0x4cd81df0   976  str x4, [x3], #8
0x4cd81df4   980  str x3, [x16]
0x4cd81df8   984  tst x3, #0x1ffff
0x4cd81dfc   988  b.eq #+0x8 (addr 0x4cd81e04)
0x4cd81e00   992  ret
0x4cd81e04   996  sub csp, jssp, #0x8 (8)
0x4cd81e08  1000  str lr, [jssp, #-8]!
0x4cd81e0c  1004  ldr x17, pc+844 (addr 0x000000004cd82158)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd81e10  1008  blr x17
0x4cd81e14  1012  ldr lr, [jssp], #8
0x4cd81e18  1016  ret
0x4cd81e1c  1020  ldr x3, [x4]
0x4cd81e20  1024  and x0, x3, #0xfffffffffff00000
0x4cd81e24  1028  ldr x0, [x0, #8]
0x4cd81e28  1032  tbz w0, #6, #+0x18 (addr 0x4cd81e40)
0x4cd81e2c  1036  and x0, x6, #0xfffffffffff00000
0x4cd81e30  1040  ldr x0, [x0, #8]
0x4cd81e34  1044  movz x16, #0x58
0x4cd81e38  1048  tst x0, x16
0x4cd81e3c  1052  b.eq #+0x68 (addr 0x4cd81ea4)
0x4cd81e40  1056  sub csp, jssp, #0x10 (16)
0x4cd81e44  1060  stp x6, x4, [jssp, #-16]!
0x4cd81e48  1064  ubfx x16, x3, #8, #12
0x4cd81e4c  1068  and x0, x3, #0xfffffffffff00000
0x4cd81e50  1072  add x0, x0, x16, lsl #2
0x4cd81e54  1076  ubfx x6, x3, #3, #5
0x4cd81e58  1080  ldr x4, [x0, #360]
0x4cd81e5c  1084  lsr x4, x4, x6
0x4cd81e60  1088  tbz w4, #0, #+0x40 (addr 0x4cd81ea0)
0x4cd81e64  1092  ldp x6, x4, [jssp], #16
0x4cd81e68  1096  ldp x1, x0, [jssp], #16
0x4cd81e6c  1100  ldr x16, pc+756 (addr 0x000000004cd82160)    ;; external reference (store_buffer_top)
0x4cd81e70  1104  ldr x3, [x16]
0x4cd81e74  1108  str x4, [x3], #8
0x4cd81e78  1112  str x3, [x16]
0x4cd81e7c  1116  tst x3, #0x1ffff
0x4cd81e80  1120  b.eq #+0x8 (addr 0x4cd81e88)
0x4cd81e84  1124  ret
0x4cd81e88  1128  sub csp, jssp, #0x8 (8)
0x4cd81e8c  1132  str lr, [jssp, #-8]!
0x4cd81e90  1136  ldr x17, pc+728 (addr 0x000000004cd82168)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd81e94  1140  blr x17
0x4cd81e98  1144  ldr lr, [jssp], #8
0x4cd81e9c  1148  ret
0x4cd81ea0  1152  ldp x6, x4, [jssp], #16
0x4cd81ea4  1156  sub csp, jssp, #0x78 (120)
0x4cd81ea8  1160  stp x14, x15, [jssp, #-32]!
0x4cd81eac  1164  stp x18, lr, [jssp, #16]
0x4cd81eb0  1168  stp x10, x11, [jssp, #-32]!
0x4cd81eb4  1172  stp x12, x13, [jssp, #16]
0x4cd81eb8  1176  stp x6, x7, [jssp, #-32]!
0x4cd81ebc  1180  stp x8, x9, [jssp, #16]
0x4cd81ec0  1184  stp x2, x4, [jssp, #-24]!
0x4cd81ec4  1188  str x5, [jssp, #16]
0x4cd81ec8  1192  sub csp, jssp, #0xb0 (176)
0x4cd81ecc  1196  stp d26, d27, [jssp, #-32]!
0x4cd81ed0  1200  stp d28, d29, [jssp, #16]
0x4cd81ed4  1204  stp d22, d23, [jssp, #-32]!
0x4cd81ed8  1208  stp d24, d25, [jssp, #16]
0x4cd81edc  1212  stp d18, d19, [jssp, #-32]!
0x4cd81ee0  1216  stp d20, d21, [jssp, #16]
0x4cd81ee4  1220  stp d6, d7, [jssp, #-32]!
0x4cd81ee8  1224  stp d16, d17, [jssp, #16]
0x4cd81eec  1228  stp d2, d3, [jssp, #-32]!
0x4cd81ef0  1232  stp d4, d5, [jssp, #16]
0x4cd81ef4  1236  stp d0, d1, [jssp, #-16]!
0x4cd81ef8  1240  mov x0, x6
0x4cd81efc  1244  mov x1, x4
0x4cd81f00  1248  ldr x2, pc+624 (addr 0x000000004cd82170)    ;; external reference (isolate)
0x4cd81f04  1252  ldr x16, pc+628 (addr 0x000000004cd82178)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd81f08  1256  and csp, jssp, #0xfffffffffffffff0
0x4cd81f0c  1260  blr x16
0x4cd81f10  1264  ldp d2, d3, [jssp, #16]
0x4cd81f14  1268  ldp d0, d1, [jssp], #32
0x4cd81f18  1272  ldp d6, d7, [jssp, #16]
0x4cd81f1c  1276  ldp d4, d5, [jssp], #32
0x4cd81f20  1280  ldp d18, d19, [jssp, #16]
0x4cd81f24  1284  ldp d16, d17, [jssp], #32
0x4cd81f28  1288  ldp d22, d23, [jssp, #16]
0x4cd81f2c  1292  ldp d20, d21, [jssp], #32
0x4cd81f30  1296  ldp d26, d27, [jssp, #16]
0x4cd81f34  1300  ldp d24, d25, [jssp], #32
0x4cd81f38  1304  ldp d28, d29, [jssp], #16
0x4cd81f3c  1308  ldp x5, x6, [jssp, #16]
0x4cd81f40  1312  ldp x2, x4, [jssp], #32
0x4cd81f44  1316  ldp x9, x10, [jssp, #16]
0x4cd81f48  1320  ldp x7, x8, [jssp], #32
0x4cd81f4c  1324  ldp x13, x14, [jssp, #16]
0x4cd81f50  1328  ldp x11, x12, [jssp], #32
0x4cd81f54  1332  ldr lr, [jssp, #16]
0x4cd81f58  1336  ldp x15, x18, [jssp], #24
0x4cd81f5c  1340  ldp x1, x0, [jssp], #16
0x4cd81f60  1344  ldr x16, pc+544 (addr 0x000000004cd82180)    ;; external reference (store_buffer_top)
0x4cd81f64  1348  ldr x3, [x16]
0x4cd81f68  1352  str x4, [x3], #8
0x4cd81f6c  1356  str x3, [x16]
0x4cd81f70  1360  tst x3, #0x1ffff
0x4cd81f74  1364  b.eq #+0x8 (addr 0x4cd81f7c)
0x4cd81f78  1368  ret
0x4cd81f7c  1372  sub csp, jssp, #0x8 (8)
0x4cd81f80  1376  str lr, [jssp, #-8]!
0x4cd81f84  1380  ldr x17, pc+516 (addr 0x000000004cd82188)    ;; code: STUB, StoreBufferOverflowStub, minor: 1
0x4cd81f88  1384  blr x17
0x4cd81f8c  1388  ldr lr, [jssp], #8
0x4cd81f90  1392  ret
0x4cd81f94  1396  and x3, x6, #0xfffffffffff00000
0x4cd81f98  1400  ldr x0, [x3, #104]
0x4cd81f9c  1404  subs x0, x0, #0x1 (1)
0x4cd81fa0  1408  str x0, [x3, #104]
0x4cd81fa4  1412  b.mi #+0x84 (addr 0x4cd82028)
0x4cd81fa8  1416  ubfx x16, x6, #8, #12
0x4cd81fac  1420  and x3, x6, #0xfffffffffff00000
0x4cd81fb0  1424  add x3, x3, x16, lsl #2
0x4cd81fb4  1428  ubfx x0, x6, #3, #5
0x4cd81fb8  1432  ldr x3, [x3, #360]
0x4cd81fbc  1436  lsr x3, x3, x0
0x4cd81fc0  1440  tbz w3, #0, #+0x8 (addr 0x4cd81fc8)
0x4cd81fc4  1444  tbnz w3, #1, #+0xc (addr 0x4cd81fd0)
0x4cd81fc8  1448  ldp x1, x0, [jssp], #16
0x4cd81fcc  1452  ret
0x4cd81fd0  1456  ldr x3, [x4]
0x4cd81fd4  1460  and x0, x3, #0xfffffffffff00000
0x4cd81fd8  1464  ldr x0, [x0, #8]
0x4cd81fdc  1468  tbz w0, #6, #+0x18 (addr 0x4cd81ff4)
0x4cd81fe0  1472  and x0, x6, #0xfffffffffff00000
0x4cd81fe4  1476  ldr x0, [x0, #8]
0x4cd81fe8  1480  movz x16, #0x58
0x4cd81fec  1484  tst x0, x16
0x4cd81ff0  1488  b.eq #+0x38 (addr 0x4cd82028)
0x4cd81ff4  1492  sub csp, jssp, #0x10 (16)
0x4cd81ff8  1496  stp x6, x4, [jssp, #-16]!
0x4cd81ffc  1500  ubfx x16, x3, #8, #12
0x4cd82000  1504  and x0, x3, #0xfffffffffff00000
0x4cd82004  1508  add x0, x0, x16, lsl #2
0x4cd82008  1512  ubfx x6, x3, #3, #5
0x4cd8200c  1516  ldr x4, [x0, #360]
0x4cd82010  1520  lsr x4, x4, x6
0x4cd82014  1524  tbz w4, #0, #+0x10 (addr 0x4cd82024)
0x4cd82018  1528  ldp x6, x4, [jssp], #16
0x4cd8201c  1532  ldp x1, x0, [jssp], #16
0x4cd82020  1536  ret
0x4cd82024  1540  ldp x6, x4, [jssp], #16
0x4cd82028  1544  sub csp, jssp, #0x78 (120)
0x4cd8202c  1548  stp x14, x15, [jssp, #-32]!
0x4cd82030  1552  stp x18, lr, [jssp, #16]
0x4cd82034  1556  stp x10, x11, [jssp, #-32]!
0x4cd82038  1560  stp x12, x13, [jssp, #16]
0x4cd8203c  1564  stp x6, x7, [jssp, #-32]!
0x4cd82040  1568  stp x8, x9, [jssp, #16]
0x4cd82044  1572  stp x2, x4, [jssp, #-24]!
0x4cd82048  1576  str x5, [jssp, #16]
0x4cd8204c  1580  sub csp, jssp, #0xb0 (176)
0x4cd82050  1584  stp d26, d27, [jssp, #-32]!
0x4cd82054  1588  stp d28, d29, [jssp, #16]
0x4cd82058  1592  stp d22, d23, [jssp, #-32]!
0x4cd8205c  1596  stp d24, d25, [jssp, #16]
0x4cd82060  1600  stp d18, d19, [jssp, #-32]!
0x4cd82064  1604  stp d20, d21, [jssp, #16]
0x4cd82068  1608  stp d6, d7, [jssp, #-32]!
0x4cd8206c  1612  stp d16, d17, [jssp, #16]
0x4cd82070  1616  stp d2, d3, [jssp, #-32]!
0x4cd82074  1620  stp d4, d5, [jssp, #16]
0x4cd82078  1624  stp d0, d1, [jssp, #-16]!
0x4cd8207c  1628  mov x0, x6
0x4cd82080  1632  mov x1, x4
0x4cd82084  1636  ldr x2, pc+268 (addr 0x000000004cd82190)    ;; external reference (isolate)
0x4cd82088  1640  ldr x16, pc+272 (addr 0x000000004cd82198)    ;; external reference (IncrementalMarking::RecordWrite)
0x4cd8208c  1644  and csp, jssp, #0xfffffffffffffff0
0x4cd82090  1648  blr x16
0x4cd82094  1652  ldp d2, d3, [jssp, #16]
0x4cd82098  1656  ldp d0, d1, [jssp], #32
0x4cd8209c  1660  ldp d6, d7, [jssp, #16]
0x4cd820a0  1664  ldp d4, d5, [jssp], #32
0x4cd820a4  1668  ldp d18, d19, [jssp, #16]
0x4cd820a8  1672  ldp d16, d17, [jssp], #32
0x4cd820ac  1676  ldp d22, d23, [jssp, #16]
0x4cd820b0  1680  ldp d20, d21, [jssp], #32
0x4cd820b4  1684  ldp d26, d27, [jssp, #16]
0x4cd820b8  1688  ldp d24, d25, [jssp], #32
0x4cd820bc  1692  ldp d28, d29, [jssp], #16
0x4cd820c0  1696  ldp x5, x6, [jssp, #16]
0x4cd820c4  1700  ldp x2, x4, [jssp], #32
0x4cd820c8  1704  ldp x9, x10, [jssp, #16]
0x4cd820cc  1708  ldp x7, x8, [jssp], #32
0x4cd820d0  1712  ldp x13, x14, [jssp, #16]
0x4cd820d4  1716  ldp x11, x12, [jssp], #32
0x4cd820d8  1720  ldr lr, [jssp, #16]
0x4cd820dc  1724  ldp x15, x18, [jssp], #24
0x4cd820e0  1728  ldp x1, x0, [jssp], #16
0x4cd820e4  1732  ret
0x4cd820e8  1736  580005bf       constant pool begin (num_const = 45)    ;; constant pool
0x4cd820ec  1740  d63f03e0       constant
0x4cd820f0  1744  166dd8c0       constant
0x4cd820f4  1748  00000000       constant
0x4cd820f8  1752  4cd065a0       constant
0x4cd820fc  1756  00000000       constant
0x4cd82100  1760  166dd8c0       constant
0x4cd82104  1764  00000000       constant
0x4cd82108  1768  4cd065a0       constant
0x4cd8210c  1772  00000000       constant
0x4cd82110  1776  166dd8c0       constant
0x4cd82114  1780  00000000       constant
0x4cd82118  1784  4cd065a0       constant
0x4cd8211c  1788  00000000       constant
0x4cd82120  1792  166dc2d0       constant
0x4cd82124  1796  00000000       constant
0x4cd82128  1800  00c2d958       constant
0x4cd8212c  1804  00000000       constant
0x4cd82130  1808  166dd8c0       constant
0x4cd82134  1812  00000000       constant
0x4cd82138  1816  4cd065a0       constant
0x4cd8213c  1820  00000000       constant
0x4cd82140  1824  166dc2d0       constant
0x4cd82144  1828  00000000       constant
0x4cd82148  1832  00c2d958       constant
0x4cd8214c  1836  00000000       constant
0x4cd82150  1840  166dd8c0       constant
0x4cd82154  1844  00000000       constant
0x4cd82158  1848  4cd065a0       constant
0x4cd8215c  1852  00000000       constant
0x4cd82160  1856  166dd8c0       constant
0x4cd82164  1860  00000000       constant
0x4cd82168  1864  4cd065a0       constant
0x4cd8216c  1868  00000000       constant
0x4cd82170  1872  166dc2d0       constant
0x4cd82174  1876  00000000       constant
0x4cd82178  1880  00c2d958       constant
0x4cd8217c  1884  00000000       constant
0x4cd82180  1888  166dd8c0       constant
0x4cd82184  1892  00000000       constant
0x4cd82188  1896  4cd065a0       constant
0x4cd8218c  1900  00000000       constant
0x4cd82190  1904  166dc2d0       constant
0x4cd82194  1908  00000000       constant
0x4cd82198  1912  00c2d958       constant
0x4cd8219c  1916  00000000       constant


RelocInfo (size = 65)
0x4cd81a28  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd81a4c  code target (STUB)  (0x4cd065a0)
0x4cd81ac4  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd81ae8  code target (STUB)  (0x4cd065a0)
0x4cd81b28  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd81b4c  code target (STUB)  (0x4cd065a0)
0x4cd81bbc  external reference (isolate)  (0x166dc2d0)
0x4cd81bc0  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd81c1c  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd81c40  code target (STUB)  (0x4cd065a0)
0x4cd81d20  external reference (isolate)  (0x166dc2d0)
0x4cd81d24  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd81de8  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd81e0c  code target (STUB)  (0x4cd065a0)
0x4cd81e6c  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd81e90  code target (STUB)  (0x4cd065a0)
0x4cd81f00  external reference (isolate)  (0x166dc2d0)
0x4cd81f04  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd81f60  external reference (store_buffer_top)  (0x166dd8c0)
0x4cd81f84  code target (STUB)  (0x4cd065a0)
0x4cd82084  external reference (isolate)  (0x166dc2d0)
0x4cd82088  external reference (IncrementalMarking::RecordWrite)  (0xc2d958)
0x4cd820e8  constant pool (size 184)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = RegExpConstructResultStub
compiler = crankshaft
Instructions (size = 826)
0x4cd82200     0  tbnz w2, #0, #+0x100 (addr 0x4cd82300)
0x4cd82204     4  asr x4, x2, #32
0x4cd82208     8  movz w16, #0x257f
0x4cd8220c    12  cmp w4, w16, lsl #3
0x4cd82210    16  b.hs #+0x2a8 (addr 0x4cd824b8)
0x4cd82214    20  lsl w3, w4, #3
0x4cd82218    24  add w3, w3, #0x10 (16)
0x4cd8221c    28  movz x5, #0xd2c0
0x4cd82220    32  movk x5, #0x166d, lsl #16
0x4cd82224    36  ldp x6, x4, [x5]
0x4cd82228    40  adds x16, x6, #0x30 (48)
0x4cd8222c    44  ccmp x16, x4, #nzCv, lo
0x4cd82230    48  b.hi #+0x118 (addr 0x4cd82348)
0x4cd82234    52  str x16, [x5]
0x4cd82238    56  orr x6, x6, #0x1
0x4cd8223c    60  ldur x4, [cp, #39]
0x4cd82240    64  movz x16, #0x257
0x4cd82244    68  ldr x4, [x4, x16]
0x4cd82248    72  stur x4, [x6, #-1]
0x4cd8224c    76  ldr x4, pc+532 (addr 0x000000004cd82460)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd82250    80  stur x4, [x6, #7]
0x4cd82254    84  ldr x4, pc+532 (addr 0x000000004cd82468)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd82258    88  stur x4, [x6, #15]
0x4cd8225c    92  stur x2, [x6, #23]
0x4cd82260    96  stur x1, [x6, #31]
0x4cd82264   100  stur x0, [x6, #39]
0x4cd82268   104  sxtw x3, w3
0x4cd8226c   108  movz x4, #0xd2c0
0x4cd82270   112  movk x4, #0x166d, lsl #16
0x4cd82274   116  ldp x7, x16, [x4]
0x4cd82278   120  adds x5, x7, x3
0x4cd8227c   124  ccmp x5, x16, #nzCv, lo
0x4cd82280   128  b.hi #+0x12c (addr 0x4cd823ac)
0x4cd82284   132  str x5, [x4]
0x4cd82288   136  orr x7, x7, #0x1
0x4cd8228c   140  ldr x3, pc+484 (addr 0x000000004cd82470)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd82290   144  stur x3, [x7, #-1]
0x4cd82294   148  mov x3, x2
0x4cd82298   152  tbnz w3, #0, #+0x230 (addr 0x4cd824c8)
0x4cd8229c   156  stur x3, [x7, #7]
0x4cd822a0   160  mov x3, x7
0x4cd822a4   164  stur x3, [x6, #15]
0x4cd822a8   168  add x4, x6, #0xf (15)
0x4cd822ac   172  and x3, x6, #0xfffffffffff00000
0x4cd822b0   176  ldr x3, [x3, #8]
0x4cd822b4   180  tbz w3, #2, #+0x18 (addr 0x4cd822cc)
0x4cd822b8   184  sub csp, jssp, #0x8 (8)
0x4cd822bc   188  str lr, [jssp, #-8]!
0x4cd822c0   192  ldr x16, pc+440 (addr 0x000000004cd82478)    ;; code: STUB, RecordWriteStub, minor: 69734
0x4cd822c4   196  blr x16
0x4cd822c8   200  ldr lr, [jssp], #8
0x4cd822cc   204  mov x3, x2
0x4cd822d0   208  tbnz w3, #0, #+0x140 (addr 0x4cd82410)
0x4cd822d4   212  asr x5, x3, #32
0x4cd822d8   216  cmp w5, #0x0 (0)
0x4cd822dc   220  b.le #+0x1c (addr 0x4cd822f8)
0x4cd822e0   224  sub w3, w5, #0x1 (1)
0x4cd822e4   228  ldr x4, pc+412 (addr 0x000000004cd82480)    ;; object: 0x21004241 <undefined>
0x4cd822e8   232  add x5, x7, #0xf (15)
0x4cd822ec   236  str x4, [x5, w3, sxtw #3]
0x4cd822f0   240  lsl x3, x3, #32
0x4cd822f4   244  b #-0x24 (addr 0x4cd822d0)
0x4cd822f8   248  mov x0, x6
0x4cd822fc   252  ret
0x4cd82300   256  sub csp, jssp, #0x10 (16)
0x4cd82304   260  stp fp, lr, [jssp, #-16]!
0x4cd82308   264  movz fp, #0xa00000000
0x4cd8230c   268  sub csp, jssp, #0x8 (8)
0x4cd82310   272  str fp, [jssp, #-8]!
0x4cd82314   276  add fp, jssp, #0x8 (8)
0x4cd82318   280  ldur x16, [x2, #-1]
0x4cd8231c   284  ldr x17, [x26, #120]
0x4cd82320   288  cmp x16, x17
0x4cd82324   292  b.ne #+0x1b4 (addr 0x4cd824d8)
0x4cd82328   296  ldur d29, [x2, #7]
0x4cd8232c   300  fcvtzs w4, d29
0x4cd82330   304  scvtf d0, w4
0x4cd82334   308  fcmp d29, d0
0x4cd82338   312  b.ne #+0x1a0 (addr 0x4cd824d8)
0x4cd8233c   316  ldr lr, [jssp, #16]
0x4cd82340   320  ldp xzr, fp, [jssp], #24
0x4cd82344   324  b #-0x13c (addr 0x4cd82208)
0x4cd82348   328  sub csp, jssp, #0x10 (16)
0x4cd8234c   332  stp fp, lr, [jssp, #-16]!
0x4cd82350   336  movz fp, #0xa00000000
0x4cd82354   340  sub csp, jssp, #0x8 (8)
0x4cd82358   344  str fp, [jssp, #-8]!
0x4cd8235c   348  add fp, jssp, #0x8 (8)
0x4cd82360   352  movz x6, #0x0
0x4cd82364   356  mov x16, lr
0x4cd82368   360  ldr x17, pc+288 (addr 0x000000004cd82488)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd8236c   364  blr x17
0x4cd82370   368  movz x0, #0x3000000000
0x4cd82374   372  movz x10, #0x0
0x4cd82378   376  sub csp, jssp, #0x10 (16)
0x4cd8237c   380  stp x10, x0, [jssp, #-16]!
0x4cd82380   384  movz x0, #0x2
0x4cd82384   388  movz x1, #0x5b88
0x4cd82388   392  movk x1, #0xe2, lsl #16
0x4cd8238c   396  ldr x16, pc+260 (addr 0x000000004cd82490)    ;; code: STUB, CEntryStub, minor: 5
0x4cd82390   400  blr x16
0x4cd82394   404  str x0, [jssp, #48]
0x4cd82398   408  ldr x16, pc+256 (addr 0x000000004cd82498)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd8239c   412  blr x16
0x4cd823a0   416  ldr lr, [jssp, #16]
0x4cd823a4   420  ldp xzr, fp, [jssp], #24
0x4cd823a8   424  b #-0x16c (addr 0x4cd8223c)
0x4cd823ac   428  sub csp, jssp, #0x10 (16)
0x4cd823b0   432  stp fp, lr, [jssp, #-16]!
0x4cd823b4   436  movz fp, #0xa00000000
0x4cd823b8   440  sub csp, jssp, #0x8 (8)
0x4cd823bc   444  str fp, [jssp, #-8]!
0x4cd823c0   448  add fp, jssp, #0x8 (8)
0x4cd823c4   452  movz x7, #0x0
0x4cd823c8   456  mov x16, lr
0x4cd823cc   460  ldr x17, pc+212 (addr 0x000000004cd824a0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd823d0   464  blr x17
0x4cd823d4   468  lsl x0, x3, #32
0x4cd823d8   472  movz x10, #0x0
0x4cd823dc   476  sub csp, jssp, #0x10 (16)
0x4cd823e0   480  stp x10, x0, [jssp, #-16]!
0x4cd823e4   484  movz x0, #0x2
0x4cd823e8   488  movz x1, #0x5b88
0x4cd823ec   492  movk x1, #0xe2, lsl #16
0x4cd823f0   496  ldr x16, pc+184 (addr 0x000000004cd824a8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd823f4   500  blr x16
0x4cd823f8   504  str x0, [jssp, #56]
0x4cd823fc   508  ldr x16, pc+180 (addr 0x000000004cd824b0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd82400   512  blr x16
0x4cd82404   516  ldr lr, [jssp, #16]
0x4cd82408   520  ldp xzr, fp, [jssp], #24
0x4cd8240c   524  b #-0x180 (addr 0x4cd8228c)
0x4cd82410   528  sub csp, jssp, #0x10 (16)
0x4cd82414   532  stp fp, lr, [jssp, #-16]!
0x4cd82418   536  movz fp, #0xa00000000
0x4cd8241c   540  sub csp, jssp, #0x8 (8)
0x4cd82420   544  str fp, [jssp, #-8]!
0x4cd82424   548  add fp, jssp, #0x8 (8)
0x4cd82428   552  ldur x16, [x3, #-1]
0x4cd8242c   556  ldr x17, [x26, #120]
0x4cd82430   560  cmp x16, x17
0x4cd82434   564  b.ne #+0xac (addr 0x4cd824e0)
0x4cd82438   568  ldur d29, [x3, #7]
0x4cd8243c   572  fcvtzs w5, d29
0x4cd82440   576  scvtf d0, w5
0x4cd82444   580  fcmp d29, d0
0x4cd82448   584  b.ne #+0x98 (addr 0x4cd824e0)
0x4cd8244c   588  ldr lr, [jssp, #16]
0x4cd82450   592  ldp xzr, fp, [jssp], #24
0x4cd82454   596  b #-0x17c (addr 0x4cd822d8)
0x4cd82458   600  580002ff       constant pool begin (num_const = 23)    ;; constant pool
0x4cd8245c   604  d63f03e0       constant
0x4cd82460   608  21004201       constant
0x4cd82464   612  00000000       constant
0x4cd82468   616  21004201       constant
0x4cd8246c   620  00000000       constant
0x4cd82470   624  2a804259       constant
0x4cd82474   628  00000000       constant
0x4cd82478   632  4cd81a20       constant
0x4cd8247c   636  00000000       constant
0x4cd82480   640  21004241       constant
0x4cd82484   644  00000000       constant
0x4cd82488   648  4cd06820       constant
0x4cd8248c   652  00000000       constant
0x4cd82490   656  4cd06260       constant
0x4cd82494   660  00000000       constant
0x4cd82498   664  4cd068e0       constant
0x4cd8249c   668  00000000       constant
0x4cd824a0   672  4cd06820       constant
0x4cd824a4   676  00000000       constant
0x4cd824a8   680  4cd06260       constant
0x4cd824ac   684  00000000       constant
0x4cd824b0   688  4cd068e0       constant
0x4cd824b4   692  00000000       constant
0x4cd824b8   696  movz x16, #0x0
0x4cd824bc   700  sub csp, jssp, #0x10 (16)
0x4cd824c0   704  stp fp, lr, [jssp, #-16]!
0x4cd824c4   708  bl #+0x24 (addr 0x4cd824e8)
0x4cd824c8   712  movz x16, #0x8
0x4cd824cc   716  sub csp, jssp, #0x10 (16)
0x4cd824d0   720  stp fp, lr, [jssp, #-16]!
0x4cd824d4   724  bl #+0x14 (addr 0x4cd824e8)
0x4cd824d8   728  movz x16, #0x10
0x4cd824dc   732  bl #+0x1c (addr 0x4cd824f8)
0x4cd824e0   736  movz x16, #0x18
0x4cd824e4   740  bl #+0x14 (addr 0x4cd824f8)
0x4cd824e8   744  movz x17, #0xa00000000
0x4cd824ec   748  sub csp, jssp, #0x10 (16)
0x4cd824f0   752  stp x17, cp, [jssp, #-16]!
0x4cd824f4   756  add fp, jssp, #0x10 (16)
0x4cd824f8   760  ldr x17, pc+24 (addr 0x000000004cd82510)    ;; lazy deoptimization bailout 0
0x4cd824fc   764  add x17, x17, x16
0x4cd82500   768  br x17
0x4cd82504   772  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd82508   776  d63f03e0       constant
0x4cd8250c   780  d503201f       constant
0x4cd82510   784  4cb06000       constant
0x4cd82514   788  00000000       constant


Safepoints (size = 34)
0x4cd82394   404  000 | x0 | x1 | x2 | x6 | x27 (sp -> fp)  <none> argc: 2
0x4cd823f8   504  000 | x0 | x1 | x2 | x6 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 33)
0x4cd8224c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd82254  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd8228c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd822c0  code target (STUB)  (0x4cd81a20)
0x4cd822e4  embedded object  (0x21004241 <undefined>)
0x4cd82368  code target (STUB)  (0x4cd06820)
0x4cd8238c  code target (STUB)  (0x4cd06260)
0x4cd82398  code target (STUB)  (0x4cd068e0)
0x4cd823cc  code target (STUB)  (0x4cd06820)
0x4cd823f0  code target (STUB)  (0x4cd06260)
0x4cd823fc  code target (STUB)  (0x4cd068e0)
0x4cd82458  constant pool (size 96)
0x4cd824f8  runtime entry
0x4cd82504  constant pool (size 20)

--- End code ---
kind = STUB
major_key = RegExpConstructResultStub
name = RegExpConstructResultStub
compiler = crankshaft
Instructions (size = 826)
0x4cd82200     0  tbnz w2, #0, #+0x100 (addr 0x4cd82300)
0x4cd82204     4  asr x4, x2, #32
0x4cd82208     8  movz w16, #0x257f
0x4cd8220c    12  cmp w4, w16, lsl #3
0x4cd82210    16  b.hs #+0x2a8 (addr 0x4cd824b8)
0x4cd82214    20  lsl w3, w4, #3
0x4cd82218    24  add w3, w3, #0x10 (16)
0x4cd8221c    28  movz x5, #0xd2c0
0x4cd82220    32  movk x5, #0x166d, lsl #16
0x4cd82224    36  ldp x6, x4, [x5]
0x4cd82228    40  adds x16, x6, #0x30 (48)
0x4cd8222c    44  ccmp x16, x4, #nzCv, lo
0x4cd82230    48  b.hi #+0x118 (addr 0x4cd82348)
0x4cd82234    52  str x16, [x5]
0x4cd82238    56  orr x6, x6, #0x1
0x4cd8223c    60  ldur x4, [cp, #39]
0x4cd82240    64  movz x16, #0x257
0x4cd82244    68  ldr x4, [x4, x16]
0x4cd82248    72  stur x4, [x6, #-1]
0x4cd8224c    76  ldr x4, pc+532 (addr 0x000000004cd82460)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd82250    80  stur x4, [x6, #7]
0x4cd82254    84  ldr x4, pc+532 (addr 0x000000004cd82468)    ;; object: 0x21004201 <FixedArray[0]>
0x4cd82258    88  stur x4, [x6, #15]
0x4cd8225c    92  stur x2, [x6, #23]
0x4cd82260    96  stur x1, [x6, #31]
0x4cd82264   100  stur x0, [x6, #39]
0x4cd82268   104  sxtw x3, w3
0x4cd8226c   108  movz x4, #0xd2c0
0x4cd82270   112  movk x4, #0x166d, lsl #16
0x4cd82274   116  ldp x7, x16, [x4]
0x4cd82278   120  adds x5, x7, x3
0x4cd8227c   124  ccmp x5, x16, #nzCv, lo
0x4cd82280   128  b.hi #+0x12c (addr 0x4cd823ac)
0x4cd82284   132  str x5, [x4]
0x4cd82288   136  orr x7, x7, #0x1
0x4cd8228c   140  ldr x3, pc+484 (addr 0x000000004cd82470)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd82290   144  stur x3, [x7, #-1]
0x4cd82294   148  mov x3, x2
0x4cd82298   152  tbnz w3, #0, #+0x230 (addr 0x4cd824c8)
0x4cd8229c   156  stur x3, [x7, #7]
0x4cd822a0   160  mov x3, x7
0x4cd822a4   164  stur x3, [x6, #15]
0x4cd822a8   168  add x4, x6, #0xf (15)
0x4cd822ac   172  and x3, x6, #0xfffffffffff00000
0x4cd822b0   176  ldr x3, [x3, #8]
0x4cd822b4   180  tbz w3, #2, #+0x18 (addr 0x4cd822cc)
0x4cd822b8   184  sub csp, jssp, #0x8 (8)
0x4cd822bc   188  str lr, [jssp, #-8]!
0x4cd822c0   192  ldr x16, pc+440 (addr 0x000000004cd82478)    ;; code: STUB, RecordWriteStub, minor: 69734
0x4cd822c4   196  blr x16
0x4cd822c8   200  ldr lr, [jssp], #8
0x4cd822cc   204  mov x3, x2
0x4cd822d0   208  tbnz w3, #0, #+0x140 (addr 0x4cd82410)
0x4cd822d4   212  asr x5, x3, #32
0x4cd822d8   216  cmp w5, #0x0 (0)
0x4cd822dc   220  b.le #+0x1c (addr 0x4cd822f8)
0x4cd822e0   224  sub w3, w5, #0x1 (1)
0x4cd822e4   228  ldr x4, pc+412 (addr 0x000000004cd82480)    ;; object: 0x21004241 <undefined>
0x4cd822e8   232  add x5, x7, #0xf (15)
0x4cd822ec   236  str x4, [x5, w3, sxtw #3]
0x4cd822f0   240  lsl x3, x3, #32
0x4cd822f4   244  b #-0x24 (addr 0x4cd822d0)
0x4cd822f8   248  mov x0, x6
0x4cd822fc   252  ret
0x4cd82300   256  sub csp, jssp, #0x10 (16)
0x4cd82304   260  stp fp, lr, [jssp, #-16]!
0x4cd82308   264  movz fp, #0xa00000000
0x4cd8230c   268  sub csp, jssp, #0x8 (8)
0x4cd82310   272  str fp, [jssp, #-8]!
0x4cd82314   276  add fp, jssp, #0x8 (8)
0x4cd82318   280  ldur x16, [x2, #-1]
0x4cd8231c   284  ldr x17, [x26, #120]
0x4cd82320   288  cmp x16, x17
0x4cd82324   292  b.ne #+0x1b4 (addr 0x4cd824d8)
0x4cd82328   296  ldur d29, [x2, #7]
0x4cd8232c   300  fcvtzs w4, d29
0x4cd82330   304  scvtf d0, w4
0x4cd82334   308  fcmp d29, d0
0x4cd82338   312  b.ne #+0x1a0 (addr 0x4cd824d8)
0x4cd8233c   316  ldr lr, [jssp, #16]
0x4cd82340   320  ldp xzr, fp, [jssp], #24
0x4cd82344   324  b #-0x13c (addr 0x4cd82208)
0x4cd82348   328  sub csp, jssp, #0x10 (16)
0x4cd8234c   332  stp fp, lr, [jssp, #-16]!
0x4cd82350   336  movz fp, #0xa00000000
0x4cd82354   340  sub csp, jssp, #0x8 (8)
0x4cd82358   344  str fp, [jssp, #-8]!
0x4cd8235c   348  add fp, jssp, #0x8 (8)
0x4cd82360   352  movz x6, #0x0
0x4cd82364   356  mov x16, lr
0x4cd82368   360  ldr x17, pc+288 (addr 0x000000004cd82488)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd8236c   364  blr x17
0x4cd82370   368  movz x0, #0x3000000000
0x4cd82374   372  movz x10, #0x0
0x4cd82378   376  sub csp, jssp, #0x10 (16)
0x4cd8237c   380  stp x10, x0, [jssp, #-16]!
0x4cd82380   384  movz x0, #0x2
0x4cd82384   388  movz x1, #0x5b88
0x4cd82388   392  movk x1, #0xe2, lsl #16
0x4cd8238c   396  ldr x16, pc+260 (addr 0x000000004cd82490)    ;; code: STUB, CEntryStub, minor: 5
0x4cd82390   400  blr x16
0x4cd82394   404  str x0, [jssp, #48]
0x4cd82398   408  ldr x16, pc+256 (addr 0x000000004cd82498)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd8239c   412  blr x16
0x4cd823a0   416  ldr lr, [jssp, #16]
0x4cd823a4   420  ldp xzr, fp, [jssp], #24
0x4cd823a8   424  b #-0x16c (addr 0x4cd8223c)
0x4cd823ac   428  sub csp, jssp, #0x10 (16)
0x4cd823b0   432  stp fp, lr, [jssp, #-16]!
0x4cd823b4   436  movz fp, #0xa00000000
0x4cd823b8   440  sub csp, jssp, #0x8 (8)
0x4cd823bc   444  str fp, [jssp, #-8]!
0x4cd823c0   448  add fp, jssp, #0x8 (8)
0x4cd823c4   452  movz x7, #0x0
0x4cd823c8   456  mov x16, lr
0x4cd823cc   460  ldr x17, pc+212 (addr 0x000000004cd824a0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd823d0   464  blr x17
0x4cd823d4   468  lsl x0, x3, #32
0x4cd823d8   472  movz x10, #0x0
0x4cd823dc   476  sub csp, jssp, #0x10 (16)
0x4cd823e0   480  stp x10, x0, [jssp, #-16]!
0x4cd823e4   484  movz x0, #0x2
0x4cd823e8   488  movz x1, #0x5b88
0x4cd823ec   492  movk x1, #0xe2, lsl #16
0x4cd823f0   496  ldr x16, pc+184 (addr 0x000000004cd824a8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd823f4   500  blr x16
0x4cd823f8   504  str x0, [jssp, #56]
0x4cd823fc   508  ldr x16, pc+180 (addr 0x000000004cd824b0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd82400   512  blr x16
0x4cd82404   516  ldr lr, [jssp, #16]
0x4cd82408   520  ldp xzr, fp, [jssp], #24
0x4cd8240c   524  b #-0x180 (addr 0x4cd8228c)
0x4cd82410   528  sub csp, jssp, #0x10 (16)
0x4cd82414   532  stp fp, lr, [jssp, #-16]!
0x4cd82418   536  movz fp, #0xa00000000
0x4cd8241c   540  sub csp, jssp, #0x8 (8)
0x4cd82420   544  str fp, [jssp, #-8]!
0x4cd82424   548  add fp, jssp, #0x8 (8)
0x4cd82428   552  ldur x16, [x3, #-1]
0x4cd8242c   556  ldr x17, [x26, #120]
0x4cd82430   560  cmp x16, x17
0x4cd82434   564  b.ne #+0xac (addr 0x4cd824e0)
0x4cd82438   568  ldur d29, [x3, #7]
0x4cd8243c   572  fcvtzs w5, d29
0x4cd82440   576  scvtf d0, w5
0x4cd82444   580  fcmp d29, d0
0x4cd82448   584  b.ne #+0x98 (addr 0x4cd824e0)
0x4cd8244c   588  ldr lr, [jssp, #16]
0x4cd82450   592  ldp xzr, fp, [jssp], #24
0x4cd82454   596  b #-0x17c (addr 0x4cd822d8)
0x4cd82458   600  580002ff       constant pool begin (num_const = 23)    ;; constant pool
0x4cd8245c   604  d63f03e0       constant
0x4cd82460   608  21004201       constant
0x4cd82464   612  00000000       constant
0x4cd82468   616  21004201       constant
0x4cd8246c   620  00000000       constant
0x4cd82470   624  2a804259       constant
0x4cd82474   628  00000000       constant
0x4cd82478   632  4cd81a20       constant
0x4cd8247c   636  00000000       constant
0x4cd82480   640  21004241       constant
0x4cd82484   644  00000000       constant
0x4cd82488   648  4cd06820       constant
0x4cd8248c   652  00000000       constant
0x4cd82490   656  4cd06260       constant
0x4cd82494   660  00000000       constant
0x4cd82498   664  4cd068e0       constant
0x4cd8249c   668  00000000       constant
0x4cd824a0   672  4cd06820       constant
0x4cd824a4   676  00000000       constant
0x4cd824a8   680  4cd06260       constant
0x4cd824ac   684  00000000       constant
0x4cd824b0   688  4cd068e0       constant
0x4cd824b4   692  00000000       constant
0x4cd824b8   696  movz x16, #0x0
0x4cd824bc   700  sub csp, jssp, #0x10 (16)
0x4cd824c0   704  stp fp, lr, [jssp, #-16]!
0x4cd824c4   708  bl #+0x24 (addr 0x4cd824e8)
0x4cd824c8   712  movz x16, #0x8
0x4cd824cc   716  sub csp, jssp, #0x10 (16)
0x4cd824d0   720  stp fp, lr, [jssp, #-16]!
0x4cd824d4   724  bl #+0x14 (addr 0x4cd824e8)
0x4cd824d8   728  movz x16, #0x10
0x4cd824dc   732  bl #+0x1c (addr 0x4cd824f8)
0x4cd824e0   736  movz x16, #0x18
0x4cd824e4   740  bl #+0x14 (addr 0x4cd824f8)
0x4cd824e8   744  movz x17, #0xa00000000
0x4cd824ec   748  sub csp, jssp, #0x10 (16)
0x4cd824f0   752  stp x17, cp, [jssp, #-16]!
0x4cd824f4   756  add fp, jssp, #0x10 (16)
0x4cd824f8   760  ldr x17, pc+24 (addr 0x000000004cd82510)    ;; lazy deoptimization bailout 0
0x4cd824fc   764  add x17, x17, x16
0x4cd82500   768  br x17
0x4cd82504   772  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd82508   776  d63f03e0       constant
0x4cd8250c   780  d503201f       constant
0x4cd82510   784  4cb06000       constant
0x4cd82514   788  00000000       constant


Safepoints (size = 34)
0x4cd82394   404  000 | x0 | x1 | x2 | x6 | x27 (sp -> fp)  <none> argc: 2
0x4cd823f8   504  000 | x0 | x1 | x2 | x6 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 33)
0x4cd8224c  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd82254  embedded object  (0x21004201 <FixedArray[0]>)
0x4cd8228c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd822c0  code target (STUB)  (0x4cd81a20)
0x4cd822e4  embedded object  (0x21004241 <undefined>)
0x4cd82368  code target (STUB)  (0x4cd06820)
0x4cd8238c  code target (STUB)  (0x4cd06260)
0x4cd82398  code target (STUB)  (0x4cd068e0)
0x4cd823cc  code target (STUB)  (0x4cd06820)
0x4cd823f0  code target (STUB)  (0x4cd06260)
0x4cd823fc  code target (STUB)  (0x4cd068e0)
0x4cd82458  constant pool (size 96)
0x4cd824f8  runtime entry
0x4cd82504  constant pool (size 20)


--- Code ---
kind = TO_BOOLEAN_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 4
type = NORMAL
name = ToBooleanICStub
compiler = crankshaft
Instructions (size = 128)
0x4cd834a0     0  ldr x16, [x26, #56]
0x4cd834a4     4  cmp x0, x16
0x4cd834a8     8  b.eq #+0x8 (addr 0x4cd834b0)
0x4cd834ac    12  b #+0x2c (addr 0x4cd834d8)
0x4cd834b0    16  ldr x0, pc+24 (addr 0x000000004cd834c8)    ;; object: 0x210042b1 <false>
0x4cd834b4    20  ret
0x4cd834b8    24  ldr x0, pc+24 (addr 0x000000004cd834d0)    ;; object: 0x21004281 <true>
0x4cd834bc    28  ret
0x4cd834c0    32  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd834c4    36  d63f03e0       constant
0x4cd834c8    40  210042b1       constant
0x4cd834cc    44  00000000       constant
0x4cd834d0    48  21004281       constant
0x4cd834d4    52  00000000       constant
0x4cd834d8    56  movz x16, #0x0
0x4cd834dc    60  sub csp, jssp, #0x10 (16)
0x4cd834e0    64  stp fp, lr, [jssp, #-16]!
0x4cd834e4    68  bl #+0x4 (addr 0x4cd834e8)
0x4cd834e8    72  movz x17, #0xa00000000
0x4cd834ec    76  sub csp, jssp, #0x10 (16)
0x4cd834f0    80  stp x17, cp, [jssp, #-16]!
0x4cd834f4    84  add fp, jssp, #0x10 (16)
0x4cd834f8    88  ldr x17, pc+24 (addr 0x000000004cd83510)    ;; lazy deoptimization bailout 0
0x4cd834fc    92  add x17, x17, x16
0x4cd83500    96  br x17
0x4cd83504   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd83508   104  d63f03e0       constant
0x4cd8350c   108  d503201f       constant
0x4cd83510   112  4cb06000       constant
0x4cd83514   116  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd834b0  embedded object  (0x210042b1 <false>)
0x4cd834b8  embedded object  (0x21004281 <true>)
0x4cd834c0  constant pool (size 24)
0x4cd834f8  runtime entry
0x4cd83504  constant pool (size 20)

--- End code ---
kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 4
type = NORMAL
name = ToBooleanICStub(Null)
compiler = crankshaft
Instructions (size = 128)
0x4cd834a0     0  ldr x16, [x26, #56]
0x4cd834a4     4  cmp x0, x16
0x4cd834a8     8  b.eq #+0x8 (addr 0x4cd834b0)
0x4cd834ac    12  b #+0x2c (addr 0x4cd834d8)
0x4cd834b0    16  ldr x0, pc+24 (addr 0x000000004cd834c8)    ;; object: 0x210042b1 <false>
0x4cd834b4    20  ret
0x4cd834b8    24  ldr x0, pc+24 (addr 0x000000004cd834d0)    ;; object: 0x21004281 <true>
0x4cd834bc    28  ret
0x4cd834c0    32  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd834c4    36  d63f03e0       constant
0x4cd834c8    40  210042b1       constant
0x4cd834cc    44  00000000       constant
0x4cd834d0    48  21004281       constant
0x4cd834d4    52  00000000       constant
0x4cd834d8    56  movz x16, #0x0
0x4cd834dc    60  sub csp, jssp, #0x10 (16)
0x4cd834e0    64  stp fp, lr, [jssp, #-16]!
0x4cd834e4    68  bl #+0x4 (addr 0x4cd834e8)
0x4cd834e8    72  movz x17, #0xa00000000
0x4cd834ec    76  sub csp, jssp, #0x10 (16)
0x4cd834f0    80  stp x17, cp, [jssp, #-16]!
0x4cd834f4    84  add fp, jssp, #0x10 (16)
0x4cd834f8    88  ldr x17, pc+24 (addr 0x000000004cd83510)    ;; lazy deoptimization bailout 0
0x4cd834fc    92  add x17, x17, x16
0x4cd83500    96  br x17
0x4cd83504   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd83508   104  d63f03e0       constant
0x4cd8350c   108  d503201f       constant
0x4cd83510   112  4cb06000       constant
0x4cd83514   116  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd834b0  embedded object  (0x210042b1 <false>)
0x4cd834b8  embedded object  (0x21004281 <true>)
0x4cd834c0  constant pool (size 24)
0x4cd834f8  runtime entry
0x4cd83504  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 509)
0x4cd87c00     0  movz x2, #0xd2c0
0x4cd87c04     4  movk x2, #0x166d, lsl #16
0x4cd87c08     8  ldp x3, x0, [x2]
0x4cd87c0c    12  adds x16, x3, #0xb0 (176)
0x4cd87c10    16  ccmp x16, x0, #nzCv, lo
0x4cd87c14    20  b.hi #+0xbc (addr 0x4cd87cd0)
0x4cd87c18    24  str x16, [x2]
0x4cd87c1c    28  orr x3, x3, #0x1
0x4cd87c20    32  ldr x0, pc+288 (addr 0x000000004cd87d40)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd87c24    36  stur x0, [x3, #-1]
0x4cd87c28    40  movz x0, #0x1400000000
0x4cd87c2c    44  stur x0, [x3, #7]
0x4cd87c30    48  stur x1, [x3, #15]
0x4cd87c34    52  stur cp, [x3, #23]
0x4cd87c38    56  ldr x0, pc+272 (addr 0x000000004cd87d48)    ;; object: 0x21004519 <the hole>
0x4cd87c3c    60  stur x0, [x3, #31]
0x4cd87c40    64  ldur x0, [cp, #39]
0x4cd87c44    68  stur x0, [x3, #39]
0x4cd87c48    72  ldr x0, pc+264 (addr 0x000000004cd87d50)    ;; object: 0x21004241 <undefined>
0x4cd87c4c    76  stur x0, [x3, #47]
0x4cd87c50    80  ldr x0, pc+264 (addr 0x000000004cd87d58)    ;; object: 0x21004241 <undefined>
0x4cd87c54    84  stur x0, [x3, #55]
0x4cd87c58    88  ldr x0, pc+264 (addr 0x000000004cd87d60)    ;; object: 0x21004241 <undefined>
0x4cd87c5c    92  stur x0, [x3, #63]
0x4cd87c60    96  ldr x0, pc+264 (addr 0x000000004cd87d68)    ;; object: 0x21004241 <undefined>
0x4cd87c64   100  stur x0, [x3, #71]
0x4cd87c68   104  ldr x0, pc+264 (addr 0x000000004cd87d70)    ;; object: 0x21004241 <undefined>
0x4cd87c6c   108  stur x0, [x3, #79]
0x4cd87c70   112  ldr x0, pc+264 (addr 0x000000004cd87d78)    ;; object: 0x21004241 <undefined>
0x4cd87c74   116  stur x0, [x3, #87]
0x4cd87c78   120  ldr x0, pc+264 (addr 0x000000004cd87d80)    ;; object: 0x21004241 <undefined>
0x4cd87c7c   124  stur x0, [x3, #95]
0x4cd87c80   128  ldr x0, pc+264 (addr 0x000000004cd87d88)    ;; object: 0x21004241 <undefined>
0x4cd87c84   132  stur x0, [x3, #103]
0x4cd87c88   136  ldr x0, pc+264 (addr 0x000000004cd87d90)    ;; object: 0x21004241 <undefined>
0x4cd87c8c   140  stur x0, [x3, #111]
0x4cd87c90   144  ldr x0, pc+264 (addr 0x000000004cd87d98)    ;; object: 0x21004241 <undefined>
0x4cd87c94   148  stur x0, [x3, #119]
0x4cd87c98   152  ldr x0, pc+264 (addr 0x000000004cd87da0)    ;; object: 0x21004241 <undefined>
0x4cd87c9c   156  stur x0, [x3, #127]
0x4cd87ca0   160  ldr x0, pc+264 (addr 0x000000004cd87da8)    ;; object: 0x21004241 <undefined>
0x4cd87ca4   164  stur x0, [x3, #135]
0x4cd87ca8   168  ldr x0, pc+264 (addr 0x000000004cd87db0)    ;; object: 0x21004241 <undefined>
0x4cd87cac   172  stur x0, [x3, #143]
0x4cd87cb0   176  ldr x0, pc+264 (addr 0x000000004cd87db8)    ;; object: 0x21004241 <undefined>
0x4cd87cb4   180  stur x0, [x3, #151]
0x4cd87cb8   184  ldr x0, pc+264 (addr 0x000000004cd87dc0)    ;; object: 0x21004241 <undefined>
0x4cd87cbc   188  stur x0, [x3, #159]
0x4cd87cc0   192  ldr x0, pc+264 (addr 0x000000004cd87dc8)    ;; object: 0x21004241 <undefined>
0x4cd87cc4   196  stur x0, [x3, #167]
0x4cd87cc8   200  mov x0, x3
0x4cd87ccc   204  ret
0x4cd87cd0   208  sub csp, jssp, #0x10 (16)
0x4cd87cd4   212  stp fp, lr, [jssp, #-16]!
0x4cd87cd8   216  movz fp, #0xa00000000
0x4cd87cdc   220  sub csp, jssp, #0x8 (8)
0x4cd87ce0   224  str fp, [jssp, #-8]!
0x4cd87ce4   228  add fp, jssp, #0x8 (8)
0x4cd87ce8   232  movz x3, #0x0
0x4cd87cec   236  mov x16, lr
0x4cd87cf0   240  ldr x17, pc+224 (addr 0x000000004cd87dd0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd87cf4   244  blr x17
0x4cd87cf8   248  movz x0, #0xb000000000
0x4cd87cfc   252  movz x10, #0x0
0x4cd87d00   256  sub csp, jssp, #0x10 (16)
0x4cd87d04   260  stp x10, x0, [jssp, #-16]!
0x4cd87d08   264  movz x0, #0x2
0x4cd87d0c   268  movz x1, #0x5b88
0x4cd87d10   272  movk x1, #0xe2, lsl #16
0x4cd87d14   276  ldr x16, pc+196 (addr 0x000000004cd87dd8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd87d18   280  blr x16
0x4cd87d1c   284  str x0, [jssp, #24]
0x4cd87d20   288  ldr x16, pc+192 (addr 0x000000004cd87de0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd87d24   292  blr x16
0x4cd87d28   296  ldr lr, [jssp, #16]
0x4cd87d2c   300  ldp xzr, fp, [jssp], #24
0x4cd87d30   304  b #-0x110 (addr 0x4cd87c20)
0x4cd87d34   308  5800059f       constant pool begin (num_const = 44)    ;; constant pool
0x4cd87d38   312  d63f03e0       constant
0x4cd87d3c   316  d503201f       constant
0x4cd87d40   320  2a806149       constant
0x4cd87d44   324  00000000       constant
0x4cd87d48   328  21004519       constant
0x4cd87d4c   332  00000000       constant
0x4cd87d50   336  21004241       constant
0x4cd87d54   340  00000000       constant
0x4cd87d58   344  21004241       constant
0x4cd87d5c   348  00000000       constant
0x4cd87d60   352  21004241       constant
0x4cd87d64   356  00000000       constant
0x4cd87d68   360  21004241       constant
0x4cd87d6c   364  00000000       constant
0x4cd87d70   368  21004241       constant
0x4cd87d74   372  00000000       constant
0x4cd87d78   376  21004241       constant
0x4cd87d7c   380  00000000       constant
0x4cd87d80   384  21004241       constant
0x4cd87d84   388  00000000       constant
0x4cd87d88   392  21004241       constant
0x4cd87d8c   396  00000000       constant
0x4cd87d90   400  21004241       constant
0x4cd87d94   404  00000000       constant
0x4cd87d98   408  21004241       constant
0x4cd87d9c   412  00000000       constant
0x4cd87da0   416  21004241       constant
0x4cd87da4   420  00000000       constant
0x4cd87da8   424  21004241       constant
0x4cd87dac   428  00000000       constant
0x4cd87db0   432  21004241       constant
0x4cd87db4   436  00000000       constant
0x4cd87db8   440  21004241       constant
0x4cd87dbc   444  00000000       constant
0x4cd87dc0   448  21004241       constant
0x4cd87dc4   452  00000000       constant
0x4cd87dc8   456  21004241       constant
0x4cd87dcc   460  00000000       constant
0x4cd87dd0   464  4cd06820       constant
0x4cd87dd4   468  00000000       constant
0x4cd87dd8   472  4cd06260       constant
0x4cd87ddc   476  00000000       constant
0x4cd87de0   480  4cd068e0       constant
0x4cd87de4   484  00000000       constant


Safepoints (size = 21)
0x4cd87d1c   284  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd87c20  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd87c38  embedded object  (0x21004519 <the hole>)
0x4cd87c48  embedded object  (0x21004241 <undefined>)
0x4cd87c50  embedded object  (0x21004241 <undefined>)
0x4cd87c58  embedded object  (0x21004241 <undefined>)
0x4cd87c60  embedded object  (0x21004241 <undefined>)
0x4cd87c68  embedded object  (0x21004241 <undefined>)
0x4cd87c70  embedded object  (0x21004241 <undefined>)
0x4cd87c78  embedded object  (0x21004241 <undefined>)
0x4cd87c80  embedded object  (0x21004241 <undefined>)
0x4cd87c88  embedded object  (0x21004241 <undefined>)
0x4cd87c90  embedded object  (0x21004241 <undefined>)
0x4cd87c98  embedded object  (0x21004241 <undefined>)
0x4cd87ca0  embedded object  (0x21004241 <undefined>)
0x4cd87ca8  embedded object  (0x21004241 <undefined>)
0x4cd87cb0  embedded object  (0x21004241 <undefined>)
0x4cd87cb8  embedded object  (0x21004241 <undefined>)
0x4cd87cc0  embedded object  (0x21004241 <undefined>)
0x4cd87cf0  code target (STUB)  (0x4cd06820)
0x4cd87d14  code target (STUB)  (0x4cd06260)
0x4cd87d20  code target (STUB)  (0x4cd068e0)
0x4cd87d34  constant pool (size 180)

--- End code ---
kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 509)
0x4cd87c00     0  movz x2, #0xd2c0
0x4cd87c04     4  movk x2, #0x166d, lsl #16
0x4cd87c08     8  ldp x3, x0, [x2]
0x4cd87c0c    12  adds x16, x3, #0xb0 (176)
0x4cd87c10    16  ccmp x16, x0, #nzCv, lo
0x4cd87c14    20  b.hi #+0xbc (addr 0x4cd87cd0)
0x4cd87c18    24  str x16, [x2]
0x4cd87c1c    28  orr x3, x3, #0x1
0x4cd87c20    32  ldr x0, pc+288 (addr 0x000000004cd87d40)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd87c24    36  stur x0, [x3, #-1]
0x4cd87c28    40  movz x0, #0x1400000000
0x4cd87c2c    44  stur x0, [x3, #7]
0x4cd87c30    48  stur x1, [x3, #15]
0x4cd87c34    52  stur cp, [x3, #23]
0x4cd87c38    56  ldr x0, pc+272 (addr 0x000000004cd87d48)    ;; object: 0x21004519 <the hole>
0x4cd87c3c    60  stur x0, [x3, #31]
0x4cd87c40    64  ldur x0, [cp, #39]
0x4cd87c44    68  stur x0, [x3, #39]
0x4cd87c48    72  ldr x0, pc+264 (addr 0x000000004cd87d50)    ;; object: 0x21004241 <undefined>
0x4cd87c4c    76  stur x0, [x3, #47]
0x4cd87c50    80  ldr x0, pc+264 (addr 0x000000004cd87d58)    ;; object: 0x21004241 <undefined>
0x4cd87c54    84  stur x0, [x3, #55]
0x4cd87c58    88  ldr x0, pc+264 (addr 0x000000004cd87d60)    ;; object: 0x21004241 <undefined>
0x4cd87c5c    92  stur x0, [x3, #63]
0x4cd87c60    96  ldr x0, pc+264 (addr 0x000000004cd87d68)    ;; object: 0x21004241 <undefined>
0x4cd87c64   100  stur x0, [x3, #71]
0x4cd87c68   104  ldr x0, pc+264 (addr 0x000000004cd87d70)    ;; object: 0x21004241 <undefined>
0x4cd87c6c   108  stur x0, [x3, #79]
0x4cd87c70   112  ldr x0, pc+264 (addr 0x000000004cd87d78)    ;; object: 0x21004241 <undefined>
0x4cd87c74   116  stur x0, [x3, #87]
0x4cd87c78   120  ldr x0, pc+264 (addr 0x000000004cd87d80)    ;; object: 0x21004241 <undefined>
0x4cd87c7c   124  stur x0, [x3, #95]
0x4cd87c80   128  ldr x0, pc+264 (addr 0x000000004cd87d88)    ;; object: 0x21004241 <undefined>
0x4cd87c84   132  stur x0, [x3, #103]
0x4cd87c88   136  ldr x0, pc+264 (addr 0x000000004cd87d90)    ;; object: 0x21004241 <undefined>
0x4cd87c8c   140  stur x0, [x3, #111]
0x4cd87c90   144  ldr x0, pc+264 (addr 0x000000004cd87d98)    ;; object: 0x21004241 <undefined>
0x4cd87c94   148  stur x0, [x3, #119]
0x4cd87c98   152  ldr x0, pc+264 (addr 0x000000004cd87da0)    ;; object: 0x21004241 <undefined>
0x4cd87c9c   156  stur x0, [x3, #127]
0x4cd87ca0   160  ldr x0, pc+264 (addr 0x000000004cd87da8)    ;; object: 0x21004241 <undefined>
0x4cd87ca4   164  stur x0, [x3, #135]
0x4cd87ca8   168  ldr x0, pc+264 (addr 0x000000004cd87db0)    ;; object: 0x21004241 <undefined>
0x4cd87cac   172  stur x0, [x3, #143]
0x4cd87cb0   176  ldr x0, pc+264 (addr 0x000000004cd87db8)    ;; object: 0x21004241 <undefined>
0x4cd87cb4   180  stur x0, [x3, #151]
0x4cd87cb8   184  ldr x0, pc+264 (addr 0x000000004cd87dc0)    ;; object: 0x21004241 <undefined>
0x4cd87cbc   188  stur x0, [x3, #159]
0x4cd87cc0   192  ldr x0, pc+264 (addr 0x000000004cd87dc8)    ;; object: 0x21004241 <undefined>
0x4cd87cc4   196  stur x0, [x3, #167]
0x4cd87cc8   200  mov x0, x3
0x4cd87ccc   204  ret
0x4cd87cd0   208  sub csp, jssp, #0x10 (16)
0x4cd87cd4   212  stp fp, lr, [jssp, #-16]!
0x4cd87cd8   216  movz fp, #0xa00000000
0x4cd87cdc   220  sub csp, jssp, #0x8 (8)
0x4cd87ce0   224  str fp, [jssp, #-8]!
0x4cd87ce4   228  add fp, jssp, #0x8 (8)
0x4cd87ce8   232  movz x3, #0x0
0x4cd87cec   236  mov x16, lr
0x4cd87cf0   240  ldr x17, pc+224 (addr 0x000000004cd87dd0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd87cf4   244  blr x17
0x4cd87cf8   248  movz x0, #0xb000000000
0x4cd87cfc   252  movz x10, #0x0
0x4cd87d00   256  sub csp, jssp, #0x10 (16)
0x4cd87d04   260  stp x10, x0, [jssp, #-16]!
0x4cd87d08   264  movz x0, #0x2
0x4cd87d0c   268  movz x1, #0x5b88
0x4cd87d10   272  movk x1, #0xe2, lsl #16
0x4cd87d14   276  ldr x16, pc+196 (addr 0x000000004cd87dd8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd87d18   280  blr x16
0x4cd87d1c   284  str x0, [jssp, #24]
0x4cd87d20   288  ldr x16, pc+192 (addr 0x000000004cd87de0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd87d24   292  blr x16
0x4cd87d28   296  ldr lr, [jssp, #16]
0x4cd87d2c   300  ldp xzr, fp, [jssp], #24
0x4cd87d30   304  b #-0x110 (addr 0x4cd87c20)
0x4cd87d34   308  5800059f       constant pool begin (num_const = 44)    ;; constant pool
0x4cd87d38   312  d63f03e0       constant
0x4cd87d3c   316  d503201f       constant
0x4cd87d40   320  2a806149       constant
0x4cd87d44   324  00000000       constant
0x4cd87d48   328  21004519       constant
0x4cd87d4c   332  00000000       constant
0x4cd87d50   336  21004241       constant
0x4cd87d54   340  00000000       constant
0x4cd87d58   344  21004241       constant
0x4cd87d5c   348  00000000       constant
0x4cd87d60   352  21004241       constant
0x4cd87d64   356  00000000       constant
0x4cd87d68   360  21004241       constant
0x4cd87d6c   364  00000000       constant
0x4cd87d70   368  21004241       constant
0x4cd87d74   372  00000000       constant
0x4cd87d78   376  21004241       constant
0x4cd87d7c   380  00000000       constant
0x4cd87d80   384  21004241       constant
0x4cd87d84   388  00000000       constant
0x4cd87d88   392  21004241       constant
0x4cd87d8c   396  00000000       constant
0x4cd87d90   400  21004241       constant
0x4cd87d94   404  00000000       constant
0x4cd87d98   408  21004241       constant
0x4cd87d9c   412  00000000       constant
0x4cd87da0   416  21004241       constant
0x4cd87da4   420  00000000       constant
0x4cd87da8   424  21004241       constant
0x4cd87dac   428  00000000       constant
0x4cd87db0   432  21004241       constant
0x4cd87db4   436  00000000       constant
0x4cd87db8   440  21004241       constant
0x4cd87dbc   444  00000000       constant
0x4cd87dc0   448  21004241       constant
0x4cd87dc4   452  00000000       constant
0x4cd87dc8   456  21004241       constant
0x4cd87dcc   460  00000000       constant
0x4cd87dd0   464  4cd06820       constant
0x4cd87dd4   468  00000000       constant
0x4cd87dd8   472  4cd06260       constant
0x4cd87ddc   476  00000000       constant
0x4cd87de0   480  4cd068e0       constant
0x4cd87de4   484  00000000       constant


Safepoints (size = 21)
0x4cd87d1c   284  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 27)
0x4cd87c20  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd87c38  embedded object  (0x21004519 <the hole>)
0x4cd87c48  embedded object  (0x21004241 <undefined>)
0x4cd87c50  embedded object  (0x21004241 <undefined>)
0x4cd87c58  embedded object  (0x21004241 <undefined>)
0x4cd87c60  embedded object  (0x21004241 <undefined>)
0x4cd87c68  embedded object  (0x21004241 <undefined>)
0x4cd87c70  embedded object  (0x21004241 <undefined>)
0x4cd87c78  embedded object  (0x21004241 <undefined>)
0x4cd87c80  embedded object  (0x21004241 <undefined>)
0x4cd87c88  embedded object  (0x21004241 <undefined>)
0x4cd87c90  embedded object  (0x21004241 <undefined>)
0x4cd87c98  embedded object  (0x21004241 <undefined>)
0x4cd87ca0  embedded object  (0x21004241 <undefined>)
0x4cd87ca8  embedded object  (0x21004241 <undefined>)
0x4cd87cb0  embedded object  (0x21004241 <undefined>)
0x4cd87cb8  embedded object  (0x21004241 <undefined>)
0x4cd87cc0  embedded object  (0x21004241 <undefined>)
0x4cd87cf0  code target (STUB)  (0x4cd06820)
0x4cd87d14  code target (STUB)  (0x4cd06260)
0x4cd87d20  code target (STUB)  (0x4cd068e0)
0x4cd87d34  constant pool (size 180)


kind = HANDLER
major_key = <NoCache>Stub
name = undefined
compiler = unknown
Instructions (size = 112)
0x4cd89140     0  sub csp, jssp, #0x8 (8)
0x4cd89144     4  str x3, [jssp, #-8]!
0x4cd89148     8  sub csp, jssp, #0x8 (8)
0x4cd8914c    12  str x0, [jssp, #-8]!
0x4cd89150    16  ldr x0, pc+72 (addr 0x000000004cd89198)    ;; object: 0x210c5d51 Cell for 0
0x4cd89154    20  ldur x0, [x0, #7]
0x4cd89158    24  cmp x0, #0x0 (0)
0x4cd8915c    28  b.ne #+0x20 (addr 0x4cd8917c)
0x4cd89160    32  ldr x0, pc+64 (addr 0x000000004cd891a0)    ;; object: 0x210c5d61 WeakCell for 0x21058101 PropertyCell for 0x21004241 <undefined>
0x4cd89164    36  ldur x0, [x0, #7]
0x4cd89168    40  tbz w0, #0, #+0x14 (addr 0x4cd8917c)
0x4cd8916c    44  ldur x0, [x0, #15]
0x4cd89170    48  add jssp, jssp, #0x10 (16)
0x4cd89174    52  ret
0x4cd89178    56  b #+0x14 (addr 0x4cd8918c)
0x4cd8917c    60  ldr x0, [jssp], #8
0x4cd89180    64  ldr x3, [jssp], #8
0x4cd89184    68  ldr x16, pc+36 (addr 0x000000004cd891a8)    ;; code: BUILTIN
0x4cd89188    72  br x16
0x4cd8918c    76  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd89190    80  d63f03e0       constant
0x4cd89194    84  d503201f       constant
0x4cd89198    88  210c5d51       constant
0x4cd8919c    92  00000000       constant
0x4cd891a0    96  210c5d61       constant
0x4cd891a4   100  00000000       constant
0x4cd891a8   104  4cd222e0       constant
0x4cd891ac   108  00000000       constant


RelocInfo (size = 9)
0x4cd89150  embedded object  (0x210c5d51 Cell for 0)
0x4cd89160  embedded object  (0x210c5d61 WeakCell for 0x21058101 PropertyCell for 0x21004241 <undefined>)
0x4cd89184  code target (BUILTIN)  (0x4cd222e0)
0x4cd8918c  constant pool (size 36)

kind = HANDLER
major_key = <NoCache>Stub
name = Object
compiler = unknown
Instructions (size = 120)
0x4cd89220     0  sub csp, jssp, #0x8 (8)
0x4cd89224     4  str x3, [jssp, #-8]!
0x4cd89228     8  sub csp, jssp, #0x8 (8)
0x4cd8922c    12  str x0, [jssp, #-8]!
0x4cd89230    16  ldr x0, pc+80 (addr 0x000000004cd89280)    ;; object: 0x210c5d51 Cell for 0
0x4cd89234    20  ldur x0, [x0, #7]
0x4cd89238    24  cmp x0, #0x0 (0)
0x4cd8923c    28  b.ne #+0x2c (addr 0x4cd89268)
0x4cd89240    32  ldr x0, pc+72 (addr 0x000000004cd89288)    ;; object: 0x210c5dc9 WeakCell for 0x21040909 PropertyCell for 0x2103fef1 <JS Function Object (SharedFunctionInfo 0x2103fe49)>
0x4cd89244    36  ldur x0, [x0, #7]
0x4cd89248    40  tbz w0, #0, #+0x20 (addr 0x4cd89268)
0x4cd8924c    44  ldur x0, [x0, #15]
0x4cd89250    48  ldr x16, [x26, #88]
0x4cd89254    52  cmp x0, x16
0x4cd89258    56  b.eq #+0x10 (addr 0x4cd89268)
0x4cd8925c    60  add jssp, jssp, #0x10 (16)
0x4cd89260    64  ret
0x4cd89264    68  b #+0x14 (addr 0x4cd89278)
0x4cd89268    72  ldr x0, [jssp], #8
0x4cd8926c    76  ldr x3, [jssp], #8
0x4cd89270    80  ldr x16, pc+32 (addr 0x000000004cd89290)    ;; code: BUILTIN
0x4cd89274    84  br x16
0x4cd89278    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd8927c    92  d63f03e0       constant
0x4cd89280    96  210c5d51       constant
0x4cd89284   100  00000000       constant
0x4cd89288   104  210c5dc9       constant
0x4cd8928c   108  00000000       constant
0x4cd89290   112  4cd222e0       constant
0x4cd89294   116  00000000       constant


RelocInfo (size = 9)
0x4cd89230  embedded object  (0x210c5d51 Cell for 0)
0x4cd89240  embedded object  (0x210c5dc9 WeakCell for 0x21040909 PropertyCell for 0x2103fef1 <JS Function Object (SharedFunctionInfo 0x2103fe49)>)
0x4cd89270  code target (BUILTIN)  (0x4cd222e0)
0x4cd89278  constant pool (size 32)

kind = STUB
major_key = ToNameStub
name = ToNameStub
compiler = unknown
Instructions (size = 112)
0x4cd89300     0  tbz w0, #0, #+0x20 (addr 0x4cd89320)
0x4cd89304     4  ldur x1, [x0, #-1]
0x4cd89308     8  ldrb w1, [x1, #11]
0x4cd8930c    12  cmp x1, #0x80 (128)
0x4cd89310    16  b.hi #+0x8 (addr 0x4cd89318)
0x4cd89314    20  ret
0x4cd89318    24  cmp x1, #0x81 (129)
0x4cd8931c    28  b.ne #+0xc (addr 0x4cd89328)
0x4cd89320    32  ldr x16, pc+56 (addr 0x000000004cd89358)    ;; code: STUB, NumberToStringStub, minor: 0
0x4cd89324    36  br x16
0x4cd89328    40  cmp x1, #0x83 (131)
0x4cd8932c    44  b.ne #+0xc (addr 0x4cd89338)
0x4cd89330    48  ldur x0, [x0, #7]
0x4cd89334    52  ret
0x4cd89338    56  sub csp, jssp, #0x8 (8)
0x4cd8933c    60  str x0, [jssp, #-8]!
0x4cd89340    64  movz x0, #0x1
0x4cd89344    68  ldr x1, pc+28 (addr 0x000000004cd89360)    ;; external reference (Runtime::ToName)
0x4cd89348    72  ldr x16, pc+32 (addr 0x000000004cd89368)    ;; code: STUB, CEntryStub, minor: 4
0x4cd8934c    76  br x16
0x4cd89350    80  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd89354    84  d63f03e0       constant
0x4cd89358    88  4cd2a480       constant
0x4cd8935c    92  00000000       constant
0x4cd89360    96  00e497a0       constant
0x4cd89364   100  00000000       constant
0x4cd89368   104  4cd06060       constant
0x4cd8936c   108  00000000       constant


RelocInfo (size = 10)
0x4cd89320  code target (STUB)  (0x4cd2a480)
0x4cd89344  external reference (Runtime::ToName)  (0xe497a0)
0x4cd89348  code target (STUB)  (0x4cd06060)
0x4cd89350  constant pool (size 32)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = RECEIVER*GENERIC -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 624)
0x4cd8a5a0     0  orr x16, x1, x0
0x4cd8a5a4     4  tbnz w16, #0, #+0x10 (addr 0x4cd8a5b4)
0x4cd8a5a8     8  asr x1, x1, #32
0x4cd8a5ac    12  sub x0, x1, x0, asr #32
0x4cd8a5b0    16  ret
0x4cd8a5b4    20  cmp x0, x1
0x4cd8a5b8    24  b.ne #+0x30 (addr 0x4cd8a5e8)
0x4cd8a5bc    28  ldur x16, [x0, #-1]
0x4cd8a5c0    32  ldr x17, [x26, #120]
0x4cd8a5c4    36  cmp x16, x17
0x4cd8a5c8    40  b.eq #+0xc (addr 0x4cd8a5d4)
0x4cd8a5cc    44  movz x0, #0x0
0x4cd8a5d0    48  ret
0x4cd8a5d4    52  ldur d0, [x0, #7]
0x4cd8a5d8    56  fcmp d0, d0
0x4cd8a5dc    60  b.vc #-0x10 (addr 0x4cd8a5cc)
0x4cd8a5e0    64  movn x0, #0x0
0x4cd8a5e4    68  ret
0x4cd8a5e8    72  and x16, x1, x0
0x4cd8a5ec    76  tbnz w16, #0, #+0x64 (addr 0x4cd8a650)
0x4cd8a5f0    80  tbz w0, #0, #+0x24 (addr 0x4cd8a614)
0x4cd8a5f4    84  ldur x16, [x0, #-1]
0x4cd8a5f8    88  ldr x17, [x26, #120]
0x4cd8a5fc    92  cmp x16, x17
0x4cd8a600    96  b.eq #+0x8 (addr 0x4cd8a608)
0x4cd8a604   100  ret
0x4cd8a608   104  ldur d0, [x0, #7]
0x4cd8a60c   108  scvtf d1, x1, #32
0x4cd8a610   112  b #+0x24 (addr 0x4cd8a634)
0x4cd8a614   116  ldur x16, [x1, #-1]
0x4cd8a618   120  ldr x17, [x26, #120]
0x4cd8a61c   124  cmp x16, x17
0x4cd8a620   128  b.eq #+0xc (addr 0x4cd8a62c)
0x4cd8a624   132  movz x0, #0x1
0x4cd8a628   136  ret
0x4cd8a62c   140  ldur d1, [x1, #7]
0x4cd8a630   144  scvtf d0, x0, #32
0x4cd8a634   148  fcmp d1, d0
0x4cd8a638   152  b.vs #+0x10 (addr 0x4cd8a648)
0x4cd8a63c   156  cset x0, gt
0x4cd8a640   160  csinv x0, x0, xzr, ge
0x4cd8a644   164  ret
0x4cd8a648   168  movn x0, #0x0
0x4cd8a64c   172  ret
0x4cd8a650   176  ldur x10, [x0, #-1]
0x4cd8a654   180  ldur x12, [x1, #-1]
0x4cd8a658   184  ldrb w11, [x10, #11]
0x4cd8a65c   188  ldrb w13, [x12, #11]
0x4cd8a660   192  cmp x11, #0xb1 (177)
0x4cd8a664   196  b.lt #+0x8 (addr 0x4cd8a66c)
0x4cd8a668   200  ret
0x4cd8a66c   204  cmp x11, #0x83 (131)
0x4cd8a670   208  movz x16, #0x83
0x4cd8a674   212  ccmp x13, x16, #nZcv, ne
0x4cd8a678   216  movz x16, #0xb1
0x4cd8a67c   220  ccmp x13, x16, #NzcV, ne
0x4cd8a680   224  b.ge #-0x18 (addr 0x4cd8a668)
0x4cd8a684   228  orr x14, x13, x11
0x4cd8a688   232  tst x14, #0xc0
0x4cd8a68c   236  b.eq #-0x24 (addr 0x4cd8a668)
0x4cd8a690   240  cmp x11, #0x81 (129)
0x4cd8a694   244  b.ne #+0x18 (addr 0x4cd8a6ac)
0x4cd8a698   248  cmp x12, x10
0x4cd8a69c   252  b.ne #+0x10 (addr 0x4cd8a6ac)
0x4cd8a6a0   256  ldur d1, [x1, #7]
0x4cd8a6a4   260  ldur d0, [x0, #7]
0x4cd8a6a8   264  b #-0x74 (addr 0x4cd8a634)
0x4cd8a6ac   268  movz x16, #0x87
0x4cd8a6b0   272  and x14, x13, x16
0x4cd8a6b4   276  movz x16, #0x87
0x4cd8a6b8   280  and x15, x11, x16
0x4cd8a6bc   284  cmp x14, #0x4 (4)
0x4cd8a6c0   288  ccmp x15, #4, #nzcv, eq
0x4cd8a6c4   292  b.ne #+0x5c (addr 0x4cd8a720)
0x4cd8a6c8   296  ldur x10, [x1, #15]
0x4cd8a6cc   300  ldur x11, [x0, #15]
0x4cd8a6d0   304  cmp x10, x11
0x4cd8a6d4   308  b.eq #+0xc (addr 0x4cd8a6e0)
0x4cd8a6d8   312  movz x0, #0x100000000
0x4cd8a6dc   316  ret
0x4cd8a6e0   320  cbnz x10, #+0xc (addr 0x4cd8a6ec)
0x4cd8a6e4   324  movz x0, #0x0
0x4cd8a6e8   328  ret
0x4cd8a6ec   332  asr x10, x10, #32
0x4cd8a6f0   336  add x11, x10, #0x17 (23)
0x4cd8a6f4   340  add x1, x1, x11
0x4cd8a6f8   344  add x0, x0, x11
0x4cd8a6fc   348  neg x10, x10
0x4cd8a700   352  ldrb w11, [x1, x10]
0x4cd8a704   356  ldrb w12, [x0, x10]
0x4cd8a708   360  cmp x11, x12
0x4cd8a70c   364  b.ne #-0x34 (addr 0x4cd8a6d8)
0x4cd8a710   368  add x10, x10, #0x1 (1)
0x4cd8a714   372  cbnz x10, #-0x14 (addr 0x4cd8a700)
0x4cd8a718   376  movz x0, #0x0
0x4cd8a71c   380  ret
0x4cd8a720   384  movz x16, #0xc00000000
0x4cd8a724   388  sub csp, jssp, #0x10 (16)
0x4cd8a728   392  stp fp, lr, [jssp, #-16]!
0x4cd8a72c   396  sub csp, jssp, #0x10 (16)
0x4cd8a730   400  str x16, [jssp, #-8]!
0x4cd8a734   404  ldr x17, pc+172 (addr 0x000000004cd8a7e0)    ;; object: 0x4cd8a541 <Code: COMPARE_IC>
0x4cd8a738   408  sub csp, jssp, #0x10 (16)
0x4cd8a73c   412  str x17, [jssp, #-8]!
0x4cd8a740   416  add fp, jssp, #0x10 (16)
0x4cd8a744   420  sub csp, jssp, #0x10 (16)
0x4cd8a748   424  stp x0, x1, [jssp, #-16]!
0x4cd8a74c   428  movz x0, #0x2
0x4cd8a750   432  ldr x1, pc+152 (addr 0x000000004cd8a7e8)    ;; external reference (Runtime::StrictEqual)
0x4cd8a754   436  ldr x16, pc+156 (addr 0x000000004cd8a7f0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd8a758   440  blr x16
0x4cd8a75c   444  mov jssp, fp
0x4cd8a760   448  ldp fp, lr, [jssp], #16
0x4cd8a764   452  ldr x1, [x26, #64]
0x4cd8a768   456  sub x0, x0, x1
0x4cd8a76c   460  ret
0x4cd8a770   464  movz x16, #0xc00000000
0x4cd8a774   468  sub csp, jssp, #0x10 (16)
0x4cd8a778   472  stp fp, lr, [jssp, #-16]!
0x4cd8a77c   476  sub csp, jssp, #0x10 (16)
0x4cd8a780   480  str x16, [jssp, #-8]!
0x4cd8a784   484  ldr x17, pc+116 (addr 0x000000004cd8a7f8)    ;; object: 0x4cd8a541 <Code: COMPARE_IC>
0x4cd8a788   488  sub csp, jssp, #0x10 (16)
0x4cd8a78c   492  str x17, [jssp, #-8]!
0x4cd8a790   496  add fp, jssp, #0x10 (16)
0x4cd8a794   500  sub csp, jssp, #0x18 (24)
0x4cd8a798   504  stp lr, x0, [jssp, #-24]!
0x4cd8a79c   508  str x1, [jssp, #16]
0x4cd8a7a0   512  movz x10, #0x2f00000000
0x4cd8a7a4   516  sub csp, jssp, #0x18 (24)
0x4cd8a7a8   520  stp x10, x0, [jssp, #-24]!
0x4cd8a7ac   524  str x1, [jssp, #16]
0x4cd8a7b0   528  movz x0, #0x3
0x4cd8a7b4   532  ldr x1, pc+76 (addr 0x000000004cd8a800)    ;; external reference (Runtime::CompareIC_Miss)
0x4cd8a7b8   536  ldr x16, pc+80 (addr 0x000000004cd8a808)    ;; code: STUB, CEntryStub, minor: 4
0x4cd8a7bc   540  blr x16
0x4cd8a7c0   544  add x11, x0, #0x5f (95)
0x4cd8a7c4   548  ldr x1, [jssp, #16]
0x4cd8a7c8   552  ldp lr, x0, [jssp], #24
0x4cd8a7cc   556  mov jssp, fp
0x4cd8a7d0   560  ldp fp, lr, [jssp], #16
0x4cd8a7d4   564  br x11
0x4cd8a7d8   568  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd8a7dc   572  d63f03e0       constant
0x4cd8a7e0   576  4cd8a541       constant
0x4cd8a7e4   580  00000000       constant
0x4cd8a7e8   584  00e50928       constant
0x4cd8a7ec   588  00000000       constant
0x4cd8a7f0   592  4cd06060       constant
0x4cd8a7f4   596  00000000       constant
0x4cd8a7f8   600  4cd8a541       constant
0x4cd8a7fc   604  00000000       constant
0x4cd8a800   608  00c8a980       constant
0x4cd8a804   612  00000000       constant
0x4cd8a808   616  4cd06060       constant
0x4cd8a80c   620  00000000       constant


RelocInfo (size = 16)
0x4cd8a734  embedded object  (0x4cd8a541 <Code: COMPARE_IC>)
0x4cd8a750  external reference (Runtime::StrictEqual)  (0xe50928)
0x4cd8a754  code target (STUB)  (0x4cd06060)
0x4cd8a784  embedded object  (0x4cd8a541 <Code: COMPARE_IC>)
0x4cd8a7b4  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cd8a7b8  code target (STUB)  (0x4cd06060)
0x4cd8a7d8  constant pool (size 56)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0x4cd8b020     0  ldur x0, [x1, #-1]
0x4cd8b024     4  ldur x0, [x0, #47]
0x4cd8b028     8  ldur x0, [x0, #191]
0x4cd8b02c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0x4cd8b020     0  ldur x0, [x1, #-1]
0x4cd8b024     4  ldur x0, [x0, #47]
0x4cd8b028     8  ldur x0, [x0, #191]
0x4cd8b02c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0x4cd8b0a0     0  ldur x0, [x1, #-1]
0x4cd8b0a4     4  ldur x0, [x0, #47]
0x4cd8b0a8     8  ldur x0, [x0, #215]
0x4cd8b0ac    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 24)
0x4cd8b0a0     0  ldur x0, [x1, #-1]
0x4cd8b0a4     4  ldur x0, [x0, #47]
0x4cd8b0a8     8  ldur x0, [x0, #215]
0x4cd8b0ac    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = STUB
major_key = NameDictionaryLookupStub
name = NameDictionaryLookupStub
compiler = unknown
Instructions (size = 968)
0x4cd8b120     0  ldursw x3, [x0, #35]
0x4cd8b124     4  sub x3, x3, #0x1 (1)
0x4cd8b128     8  ldur x4, [x1, #7]
0x4cd8b12c    12  ldr x5, [x26, #40]
0x4cd8b130    16  add x2, x4, #0x28 (40)
0x4cd8b134    20  and x2, x3, x2, lsr #2
0x4cd8b138    24  add x2, x2, x2, lsl #1
0x4cd8b13c    28  add x2, x0, x2, lsl #3
0x4cd8b140    32  ldur x6, [x2, #55]
0x4cd8b144    36  cmp x6, x5
0x4cd8b148    40  b.eq #+0x398 (addr 0x4cd8b4e0)
0x4cd8b14c    44  cmp x6, x1
0x4cd8b150    48  b.eq #+0x388 (addr 0x4cd8b4d8)
0x4cd8b154    52  ldur x6, [x6, #-1]
0x4cd8b158    56  ldrb w6, [x6, #11]
0x4cd8b15c    60  tst x6, #0xc0
0x4cd8b160    64  movz x16, #0x80
0x4cd8b164    68  ccmp x6, x16, #nZcv, ne
0x4cd8b168    72  b.ne #+0x370 (addr 0x4cd8b4d8)
0x4cd8b16c    76  add x2, x4, #0x3c (60)
0x4cd8b170    80  and x2, x3, x2, lsr #2
0x4cd8b174    84  add x2, x2, x2, lsl #1
0x4cd8b178    88  add x2, x0, x2, lsl #3
0x4cd8b17c    92  ldur x6, [x2, #55]
0x4cd8b180    96  cmp x6, x5
0x4cd8b184   100  b.eq #+0x35c (addr 0x4cd8b4e0)
0x4cd8b188   104  cmp x6, x1
0x4cd8b18c   108  b.eq #+0x34c (addr 0x4cd8b4d8)
0x4cd8b190   112  ldur x6, [x6, #-1]
0x4cd8b194   116  ldrb w6, [x6, #11]
0x4cd8b198   120  tst x6, #0xc0
0x4cd8b19c   124  movz x16, #0x80
0x4cd8b1a0   128  ccmp x6, x16, #nZcv, ne
0x4cd8b1a4   132  b.ne #+0x334 (addr 0x4cd8b4d8)
0x4cd8b1a8   136  add x2, x4, #0x54 (84)
0x4cd8b1ac   140  and x2, x3, x2, lsr #2
0x4cd8b1b0   144  add x2, x2, x2, lsl #1
0x4cd8b1b4   148  add x2, x0, x2, lsl #3
0x4cd8b1b8   152  ldur x6, [x2, #55]
0x4cd8b1bc   156  cmp x6, x5
0x4cd8b1c0   160  b.eq #+0x320 (addr 0x4cd8b4e0)
0x4cd8b1c4   164  cmp x6, x1
0x4cd8b1c8   168  b.eq #+0x310 (addr 0x4cd8b4d8)
0x4cd8b1cc   172  ldur x6, [x6, #-1]
0x4cd8b1d0   176  ldrb w6, [x6, #11]
0x4cd8b1d4   180  tst x6, #0xc0
0x4cd8b1d8   184  movz x16, #0x80
0x4cd8b1dc   188  ccmp x6, x16, #nZcv, ne
0x4cd8b1e0   192  b.ne #+0x2f8 (addr 0x4cd8b4d8)
0x4cd8b1e4   196  add x2, x4, #0x70 (112)
0x4cd8b1e8   200  and x2, x3, x2, lsr #2
0x4cd8b1ec   204  add x2, x2, x2, lsl #1
0x4cd8b1f0   208  add x2, x0, x2, lsl #3
0x4cd8b1f4   212  ldur x6, [x2, #55]
0x4cd8b1f8   216  cmp x6, x5
0x4cd8b1fc   220  b.eq #+0x2e4 (addr 0x4cd8b4e0)
0x4cd8b200   224  cmp x6, x1
0x4cd8b204   228  b.eq #+0x2d4 (addr 0x4cd8b4d8)
0x4cd8b208   232  ldur x6, [x6, #-1]
0x4cd8b20c   236  ldrb w6, [x6, #11]
0x4cd8b210   240  tst x6, #0xc0
0x4cd8b214   244  movz x16, #0x80
0x4cd8b218   248  ccmp x6, x16, #nZcv, ne
0x4cd8b21c   252  b.ne #+0x2bc (addr 0x4cd8b4d8)
0x4cd8b220   256  add x2, x4, #0x90 (144)
0x4cd8b224   260  and x2, x3, x2, lsr #2
0x4cd8b228   264  add x2, x2, x2, lsl #1
0x4cd8b22c   268  add x2, x0, x2, lsl #3
0x4cd8b230   272  ldur x6, [x2, #55]
0x4cd8b234   276  cmp x6, x5
0x4cd8b238   280  b.eq #+0x2a8 (addr 0x4cd8b4e0)
0x4cd8b23c   284  cmp x6, x1
0x4cd8b240   288  b.eq #+0x298 (addr 0x4cd8b4d8)
0x4cd8b244   292  ldur x6, [x6, #-1]
0x4cd8b248   296  ldrb w6, [x6, #11]
0x4cd8b24c   300  tst x6, #0xc0
0x4cd8b250   304  movz x16, #0x80
0x4cd8b254   308  ccmp x6, x16, #nZcv, ne
0x4cd8b258   312  b.ne #+0x280 (addr 0x4cd8b4d8)
0x4cd8b25c   316  add x2, x4, #0xb4 (180)
0x4cd8b260   320  and x2, x3, x2, lsr #2
0x4cd8b264   324  add x2, x2, x2, lsl #1
0x4cd8b268   328  add x2, x0, x2, lsl #3
0x4cd8b26c   332  ldur x6, [x2, #55]
0x4cd8b270   336  cmp x6, x5
0x4cd8b274   340  b.eq #+0x26c (addr 0x4cd8b4e0)
0x4cd8b278   344  cmp x6, x1
0x4cd8b27c   348  b.eq #+0x25c (addr 0x4cd8b4d8)
0x4cd8b280   352  ldur x6, [x6, #-1]
0x4cd8b284   356  ldrb w6, [x6, #11]
0x4cd8b288   360  tst x6, #0xc0
0x4cd8b28c   364  movz x16, #0x80
0x4cd8b290   368  ccmp x6, x16, #nZcv, ne
0x4cd8b294   372  b.ne #+0x244 (addr 0x4cd8b4d8)
0x4cd8b298   376  add x2, x4, #0xdc (220)
0x4cd8b29c   380  and x2, x3, x2, lsr #2
0x4cd8b2a0   384  add x2, x2, x2, lsl #1
0x4cd8b2a4   388  add x2, x0, x2, lsl #3
0x4cd8b2a8   392  ldur x6, [x2, #55]
0x4cd8b2ac   396  cmp x6, x5
0x4cd8b2b0   400  b.eq #+0x230 (addr 0x4cd8b4e0)
0x4cd8b2b4   404  cmp x6, x1
0x4cd8b2b8   408  b.eq #+0x220 (addr 0x4cd8b4d8)
0x4cd8b2bc   412  ldur x6, [x6, #-1]
0x4cd8b2c0   416  ldrb w6, [x6, #11]
0x4cd8b2c4   420  tst x6, #0xc0
0x4cd8b2c8   424  movz x16, #0x80
0x4cd8b2cc   428  ccmp x6, x16, #nZcv, ne
0x4cd8b2d0   432  b.ne #+0x208 (addr 0x4cd8b4d8)
0x4cd8b2d4   436  add x2, x4, #0x108 (264)
0x4cd8b2d8   440  and x2, x3, x2, lsr #2
0x4cd8b2dc   444  add x2, x2, x2, lsl #1
0x4cd8b2e0   448  add x2, x0, x2, lsl #3
0x4cd8b2e4   452  ldur x6, [x2, #55]
0x4cd8b2e8   456  cmp x6, x5
0x4cd8b2ec   460  b.eq #+0x1f4 (addr 0x4cd8b4e0)
0x4cd8b2f0   464  cmp x6, x1
0x4cd8b2f4   468  b.eq #+0x1e4 (addr 0x4cd8b4d8)
0x4cd8b2f8   472  ldur x6, [x6, #-1]
0x4cd8b2fc   476  ldrb w6, [x6, #11]
0x4cd8b300   480  tst x6, #0xc0
0x4cd8b304   484  movz x16, #0x80
0x4cd8b308   488  ccmp x6, x16, #nZcv, ne
0x4cd8b30c   492  b.ne #+0x1cc (addr 0x4cd8b4d8)
0x4cd8b310   496  add x2, x4, #0x138 (312)
0x4cd8b314   500  and x2, x3, x2, lsr #2
0x4cd8b318   504  add x2, x2, x2, lsl #1
0x4cd8b31c   508  add x2, x0, x2, lsl #3
0x4cd8b320   512  ldur x6, [x2, #55]
0x4cd8b324   516  cmp x6, x5
0x4cd8b328   520  b.eq #+0x1b8 (addr 0x4cd8b4e0)
0x4cd8b32c   524  cmp x6, x1
0x4cd8b330   528  b.eq #+0x1a8 (addr 0x4cd8b4d8)
0x4cd8b334   532  ldur x6, [x6, #-1]
0x4cd8b338   536  ldrb w6, [x6, #11]
0x4cd8b33c   540  tst x6, #0xc0
0x4cd8b340   544  movz x16, #0x80
0x4cd8b344   548  ccmp x6, x16, #nZcv, ne
0x4cd8b348   552  b.ne #+0x190 (addr 0x4cd8b4d8)
0x4cd8b34c   556  add x2, x4, #0x16c (364)
0x4cd8b350   560  and x2, x3, x2, lsr #2
0x4cd8b354   564  add x2, x2, x2, lsl #1
0x4cd8b358   568  add x2, x0, x2, lsl #3
0x4cd8b35c   572  ldur x6, [x2, #55]
0x4cd8b360   576  cmp x6, x5
0x4cd8b364   580  b.eq #+0x17c (addr 0x4cd8b4e0)
0x4cd8b368   584  cmp x6, x1
0x4cd8b36c   588  b.eq #+0x16c (addr 0x4cd8b4d8)
0x4cd8b370   592  ldur x6, [x6, #-1]
0x4cd8b374   596  ldrb w6, [x6, #11]
0x4cd8b378   600  tst x6, #0xc0
0x4cd8b37c   604  movz x16, #0x80
0x4cd8b380   608  ccmp x6, x16, #nZcv, ne
0x4cd8b384   612  b.ne #+0x154 (addr 0x4cd8b4d8)
0x4cd8b388   616  add x2, x4, #0x1a4 (420)
0x4cd8b38c   620  and x2, x3, x2, lsr #2
0x4cd8b390   624  add x2, x2, x2, lsl #1
0x4cd8b394   628  add x2, x0, x2, lsl #3
0x4cd8b398   632  ldur x6, [x2, #55]
0x4cd8b39c   636  cmp x6, x5
0x4cd8b3a0   640  b.eq #+0x140 (addr 0x4cd8b4e0)
0x4cd8b3a4   644  cmp x6, x1
0x4cd8b3a8   648  b.eq #+0x130 (addr 0x4cd8b4d8)
0x4cd8b3ac   652  ldur x6, [x6, #-1]
0x4cd8b3b0   656  ldrb w6, [x6, #11]
0x4cd8b3b4   660  tst x6, #0xc0
0x4cd8b3b8   664  movz x16, #0x80
0x4cd8b3bc   668  ccmp x6, x16, #nZcv, ne
0x4cd8b3c0   672  b.ne #+0x118 (addr 0x4cd8b4d8)
0x4cd8b3c4   676  add x2, x4, #0x1e0 (480)
0x4cd8b3c8   680  and x2, x3, x2, lsr #2
0x4cd8b3cc   684  add x2, x2, x2, lsl #1
0x4cd8b3d0   688  add x2, x0, x2, lsl #3
0x4cd8b3d4   692  ldur x6, [x2, #55]
0x4cd8b3d8   696  cmp x6, x5
0x4cd8b3dc   700  b.eq #+0x104 (addr 0x4cd8b4e0)
0x4cd8b3e0   704  cmp x6, x1
0x4cd8b3e4   708  b.eq #+0xf4 (addr 0x4cd8b4d8)
0x4cd8b3e8   712  ldur x6, [x6, #-1]
0x4cd8b3ec   716  ldrb w6, [x6, #11]
0x4cd8b3f0   720  tst x6, #0xc0
0x4cd8b3f4   724  movz x16, #0x80
0x4cd8b3f8   728  ccmp x6, x16, #nZcv, ne
0x4cd8b3fc   732  b.ne #+0xdc (addr 0x4cd8b4d8)
0x4cd8b400   736  add x2, x4, #0x220 (544)
0x4cd8b404   740  and x2, x3, x2, lsr #2
0x4cd8b408   744  add x2, x2, x2, lsl #1
0x4cd8b40c   748  add x2, x0, x2, lsl #3
0x4cd8b410   752  ldur x6, [x2, #55]
0x4cd8b414   756  cmp x6, x5
0x4cd8b418   760  b.eq #+0xc8 (addr 0x4cd8b4e0)
0x4cd8b41c   764  cmp x6, x1
0x4cd8b420   768  b.eq #+0xb8 (addr 0x4cd8b4d8)
0x4cd8b424   772  ldur x6, [x6, #-1]
0x4cd8b428   776  ldrb w6, [x6, #11]
0x4cd8b42c   780  tst x6, #0xc0
0x4cd8b430   784  movz x16, #0x80
0x4cd8b434   788  ccmp x6, x16, #nZcv, ne
0x4cd8b438   792  b.ne #+0xa0 (addr 0x4cd8b4d8)
0x4cd8b43c   796  add x2, x4, #0x264 (612)
0x4cd8b440   800  and x2, x3, x2, lsr #2
0x4cd8b444   804  add x2, x2, x2, lsl #1
0x4cd8b448   808  add x2, x0, x2, lsl #3
0x4cd8b44c   812  ldur x6, [x2, #55]
0x4cd8b450   816  cmp x6, x5
0x4cd8b454   820  b.eq #+0x8c (addr 0x4cd8b4e0)
0x4cd8b458   824  cmp x6, x1
0x4cd8b45c   828  b.eq #+0x7c (addr 0x4cd8b4d8)
0x4cd8b460   832  ldur x6, [x6, #-1]
0x4cd8b464   836  ldrb w6, [x6, #11]
0x4cd8b468   840  tst x6, #0xc0
0x4cd8b46c   844  movz x16, #0x80
0x4cd8b470   848  ccmp x6, x16, #nZcv, ne
0x4cd8b474   852  b.ne #+0x64 (addr 0x4cd8b4d8)
0x4cd8b478   856  add x2, x4, #0x2ac (684)
0x4cd8b47c   860  and x2, x3, x2, lsr #2
0x4cd8b480   864  add x2, x2, x2, lsl #1
0x4cd8b484   868  add x2, x0, x2, lsl #3
0x4cd8b488   872  ldur x6, [x2, #55]
0x4cd8b48c   876  cmp x6, x5
0x4cd8b490   880  b.eq #+0x50 (addr 0x4cd8b4e0)
0x4cd8b494   884  cmp x6, x1
0x4cd8b498   888  b.eq #+0x40 (addr 0x4cd8b4d8)
0x4cd8b49c   892  ldur x6, [x6, #-1]
0x4cd8b4a0   896  ldrb w6, [x6, #11]
0x4cd8b4a4   900  tst x6, #0xc0
0x4cd8b4a8   904  movz x16, #0x80
0x4cd8b4ac   908  ccmp x6, x16, #nZcv, ne
0x4cd8b4b0   912  b.ne #+0x28 (addr 0x4cd8b4d8)
0x4cd8b4b4   916  add x2, x4, #0x2f8 (760)
0x4cd8b4b8   920  and x2, x3, x2, lsr #2
0x4cd8b4bc   924  add x2, x2, x2, lsl #1
0x4cd8b4c0   928  add x2, x0, x2, lsl #3
0x4cd8b4c4   932  ldur x6, [x2, #55]
0x4cd8b4c8   936  cmp x6, x5
0x4cd8b4cc   940  b.eq #+0x14 (addr 0x4cd8b4e0)
0x4cd8b4d0   944  cmp x6, x1
0x4cd8b4d4   948  b.eq #+0x4 (addr 0x4cd8b4d8)
0x4cd8b4d8   952  movz x0, #0x1
0x4cd8b4dc   956  ret
0x4cd8b4e0   960  movz x0, #0x0
0x4cd8b4e4   964  ret


RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = hasOwnProperty
compiler = unknown
Instructions (size = 656)
0x4cd8b560     0  sub csp, jssp, #0x8 (8)
0x4cd8b564     4  str x3, [jssp, #-8]!
0x4cd8b568     8  sub csp, jssp, #0x8 (8)
0x4cd8b56c    12  str x0, [jssp, #-8]!
0x4cd8b570    16  ldr x0, pc+560 (addr 0x000000004cd8b7a0)    ;; object: 0x21063e59 Cell for 0
0x4cd8b574    20  ldur x0, [x0, #7]
0x4cd8b578    24  cmp x0, #0x0 (0)
0x4cd8b57c    28  b.ne #+0x1f8 (addr 0x4cd8b774)
0x4cd8b580    32  ldur x4, [x1, #-1]
0x4cd8b584    36  ldrb w0, [x4, #12]
0x4cd8b588    40  movz x16, #0x44
0x4cd8b58c    44  tst x0, x16
0x4cd8b590    48  b.ne #+0x1e4 (addr 0x4cd8b774)
0x4cd8b594    52  ldrb w0, [x4, #11]
0x4cd8b598    56  cmp x0, #0xb1 (177)
0x4cd8b59c    60  b.lt #+0x1d8 (addr 0x4cd8b774)
0x4cd8b5a0    64  ldur x0, [x1, #7]
0x4cd8b5a4    68  ldur x4, [x0, #-1]
0x4cd8b5a8    72  ldr x16, [x26, #432]
0x4cd8b5ac    76  cmp x4, x16
0x4cd8b5b0    80  b.ne #+0x1c4 (addr 0x4cd8b774)
0x4cd8b5b4    84  ldursw x4, [x0, #35]
0x4cd8b5b8    88  sub x4, x4, #0x1 (1)
0x4cd8b5bc    92  movz x16, #0x26d2
0x4cd8b5c0    96  movk x16, #0x3e22, lsl #16
0x4cd8b5c4   100  and x4, x4, x16
0x4cd8b5c8   104  add x4, x4, x4, lsl #1
0x4cd8b5cc   108  add x4, x0, x4, lsl #3
0x4cd8b5d0   112  ldur x4, [x4, #55]
0x4cd8b5d4   116  ldr x16, [x26, #40]
0x4cd8b5d8   120  cmp x4, x16
0x4cd8b5dc   124  b.eq #+0x188 (addr 0x4cd8b764)
0x4cd8b5e0   128  ldr x16, pc+456 (addr 0x000000004cd8b7a8)    ;; object: 0x210417b1 <String[14]: hasOwnProperty>
0x4cd8b5e4   132  cmp x4, x16
0x4cd8b5e8   136  b.eq #+0x18c (addr 0x4cd8b774)
0x4cd8b5ec   140  ldr x16, [x26, #88]
0x4cd8b5f0   144  cmp x4, x16
0x4cd8b5f4   148  b.eq #+0x1c (addr 0x4cd8b610)
0x4cd8b5f8   152  ldur x4, [x4, #-1]
0x4cd8b5fc   156  ldrb w4, [x4, #11]
0x4cd8b600   160  tst x4, #0xc0
0x4cd8b604   164  movz x16, #0x80
0x4cd8b608   168  ccmp x4, x16, #nZcv, ne
0x4cd8b60c   172  b.ne #+0x168 (addr 0x4cd8b774)
0x4cd8b610   176  ldursw x4, [x0, #35]
0x4cd8b614   180  sub x4, x4, #0x1 (1)
0x4cd8b618   184  movz x16, #0x26d3
0x4cd8b61c   188  movk x16, #0x3e22, lsl #16
0x4cd8b620   192  and x4, x4, x16
0x4cd8b624   196  add x4, x4, x4, lsl #1
0x4cd8b628   200  add x4, x0, x4, lsl #3
0x4cd8b62c   204  ldur x4, [x4, #55]
0x4cd8b630   208  ldr x16, [x26, #40]
0x4cd8b634   212  cmp x4, x16
0x4cd8b638   216  b.eq #+0x12c (addr 0x4cd8b764)
0x4cd8b63c   220  ldr x16, pc+372 (addr 0x000000004cd8b7b0)    ;; object: 0x210417b1 <String[14]: hasOwnProperty>
0x4cd8b640   224  cmp x4, x16
0x4cd8b644   228  b.eq #+0x130 (addr 0x4cd8b774)
0x4cd8b648   232  ldr x16, [x26, #88]
0x4cd8b64c   236  cmp x4, x16
0x4cd8b650   240  b.eq #+0x1c (addr 0x4cd8b66c)
0x4cd8b654   244  ldur x4, [x4, #-1]
0x4cd8b658   248  ldrb w4, [x4, #11]
0x4cd8b65c   252  tst x4, #0xc0
0x4cd8b660   256  movz x16, #0x80
0x4cd8b664   260  ccmp x4, x16, #nZcv, ne
0x4cd8b668   264  b.ne #+0x10c (addr 0x4cd8b774)
0x4cd8b66c   268  ldursw x4, [x0, #35]
0x4cd8b670   272  sub x4, x4, #0x1 (1)
0x4cd8b674   276  movz x16, #0x26d5
0x4cd8b678   280  movk x16, #0x3e22, lsl #16
0x4cd8b67c   284  and x4, x4, x16
0x4cd8b680   288  add x4, x4, x4, lsl #1
0x4cd8b684   292  add x4, x0, x4, lsl #3
0x4cd8b688   296  ldur x4, [x4, #55]
0x4cd8b68c   300  ldr x16, [x26, #40]
0x4cd8b690   304  cmp x4, x16
0x4cd8b694   308  b.eq #+0xd0 (addr 0x4cd8b764)
0x4cd8b698   312  ldr x16, pc+288 (addr 0x000000004cd8b7b8)    ;; object: 0x210417b1 <String[14]: hasOwnProperty>
0x4cd8b69c   316  cmp x4, x16
0x4cd8b6a0   320  b.eq #+0xd4 (addr 0x4cd8b774)
0x4cd8b6a4   324  ldr x16, [x26, #88]
0x4cd8b6a8   328  cmp x4, x16
0x4cd8b6ac   332  b.eq #+0x1c (addr 0x4cd8b6c8)
0x4cd8b6b0   336  ldur x4, [x4, #-1]
0x4cd8b6b4   340  ldrb w4, [x4, #11]
0x4cd8b6b8   344  tst x4, #0xc0
0x4cd8b6bc   348  movz x16, #0x80
0x4cd8b6c0   352  ccmp x4, x16, #nZcv, ne
0x4cd8b6c4   356  b.ne #+0xb0 (addr 0x4cd8b774)
0x4cd8b6c8   360  ldursw x4, [x0, #35]
0x4cd8b6cc   364  sub x4, x4, #0x1 (1)
0x4cd8b6d0   368  movz x16, #0x26d8
0x4cd8b6d4   372  movk x16, #0x3e22, lsl #16
0x4cd8b6d8   376  and x4, x4, x16
0x4cd8b6dc   380  add x4, x4, x4, lsl #1
0x4cd8b6e0   384  add x4, x0, x4, lsl #3
0x4cd8b6e4   388  ldur x4, [x4, #55]
0x4cd8b6e8   392  ldr x16, [x26, #40]
0x4cd8b6ec   396  cmp x4, x16
0x4cd8b6f0   400  b.eq #+0x74 (addr 0x4cd8b764)
0x4cd8b6f4   404  ldr x16, pc+204 (addr 0x000000004cd8b7c0)    ;; object: 0x210417b1 <String[14]: hasOwnProperty>
0x4cd8b6f8   408  cmp x4, x16
0x4cd8b6fc   412  b.eq #+0x78 (addr 0x4cd8b774)
0x4cd8b700   416  ldr x16, [x26, #88]
0x4cd8b704   420  cmp x4, x16
0x4cd8b708   424  b.eq #+0x1c (addr 0x4cd8b724)
0x4cd8b70c   428  ldur x4, [x4, #-1]
0x4cd8b710   432  ldrb w4, [x4, #11]
0x4cd8b714   436  tst x4, #0xc0
0x4cd8b718   440  movz x16, #0x80
0x4cd8b71c   444  ccmp x4, x16, #nZcv, ne
0x4cd8b720   448  b.ne #+0x54 (addr 0x4cd8b774)
0x4cd8b724   452  sub csp, jssp, #0x38 (56)
0x4cd8b728   456  stp x3, x5, [jssp, #-32]!
0x4cd8b72c   460  stp x6, lr, [jssp, #16]
0x4cd8b730   464  stp x0, x1, [jssp, #-24]!
0x4cd8b734   468  str x2, [jssp, #16]
0x4cd8b738   472  ldur x0, [x1, #7]
0x4cd8b73c   476  ldr x1, pc+140 (addr 0x000000004cd8b7c8)    ;; object: 0x210417b1 <String[14]: hasOwnProperty>
0x4cd8b740   480  ldr x16, pc+144 (addr 0x000000004cd8b7d0)    ;; code: STUB, NameDictionaryLookupStub, minor: 1
0x4cd8b744   484  blr x16
0x4cd8b748   488  mov x4, x0
0x4cd8b74c   492  ldp x2, x3, [jssp, #16]
0x4cd8b750   496  ldp x0, x1, [jssp], #32
0x4cd8b754   500  ldr lr, [jssp, #16]
0x4cd8b758   504  ldp x5, x6, [jssp], #24
0x4cd8b75c   508  cbz x4, #+0x8 (addr 0x4cd8b764)
0x4cd8b760   512  b #+0x14 (addr 0x4cd8b774)
0x4cd8b764   516  ldr x3, pc+116 (addr 0x000000004cd8b7d8)    ;; object: 0x210c7a51 WeakCell for 0x2103ff39 <an Object with map 0x2a80c081>
0x4cd8b768   520  ldur x3, [x3, #7]
0x4cd8b76c   524  tbz w3, #0, #+0x8 (addr 0x4cd8b774)
0x4cd8b770   528  b #+0x14 (addr 0x4cd8b784)
0x4cd8b774   532  ldr x0, [jssp], #8
0x4cd8b778   536  ldr x3, [jssp], #8
0x4cd8b77c   540  ldr x16, pc+100 (addr 0x000000004cd8b7e0)    ;; code: BUILTIN
0x4cd8b780   544  br x16
0x4cd8b784   548  add jssp, jssp, #0x10 (16)
0x4cd8b788   552  mov x1, x3
0x4cd8b78c   556  ldr x16, pc+92 (addr 0x000000004cd8b7e8)    ;; code: HANDLER, LoadConstantStub, minor: 0
0x4cd8b790   560  br x16
0x4cd8b794   564  580002df       constant pool begin (num_const = 22)    ;; constant pool
0x4cd8b798   568  d63f03e0       constant
0x4cd8b79c   572  d503201f       constant
0x4cd8b7a0   576  21063e59       constant
0x4cd8b7a4   580  00000000       constant
0x4cd8b7a8   584  210417b1       constant
0x4cd8b7ac   588  00000000       constant
0x4cd8b7b0   592  210417b1       constant
0x4cd8b7b4   596  00000000       constant
0x4cd8b7b8   600  210417b1       constant
0x4cd8b7bc   604  00000000       constant
0x4cd8b7c0   608  210417b1       constant
0x4cd8b7c4   612  00000000       constant
0x4cd8b7c8   616  210417b1       constant
0x4cd8b7cc   620  00000000       constant
0x4cd8b7d0   624  4cd8b120       constant
0x4cd8b7d4   628  00000000       constant
0x4cd8b7d8   632  210c7a51       constant
0x4cd8b7dc   636  00000000       constant
0x4cd8b7e0   640  4cd222e0       constant
0x4cd8b7e4   644  00000000       constant
0x4cd8b7e8   648  4cd431a0       constant
0x4cd8b7ec   652  00000000       constant


RelocInfo (size = 26)
0x4cd8b570  embedded object  (0x21063e59 Cell for 0)
0x4cd8b5e0  embedded object  (0x210417b1 <String[14]: hasOwnProperty>)
0x4cd8b63c  embedded object  (0x210417b1 <String[14]: hasOwnProperty>)
0x4cd8b698  embedded object  (0x210417b1 <String[14]: hasOwnProperty>)
0x4cd8b6f4  embedded object  (0x210417b1 <String[14]: hasOwnProperty>)
0x4cd8b73c  embedded object  (0x210417b1 <String[14]: hasOwnProperty>)
0x4cd8b740  code target (STUB)  (0x4cd8b120)
0x4cd8b764  embedded object  (0x210c7a51 WeakCell for 0x2103ff39 <an Object with map 0x2a80c081>)
0x4cd8b77c  code target (BUILTIN)  (0x4cd222e0)
0x4cd8b78c  code target (HANDLER)  (0x4cd431a0)
0x4cd8b794  constant pool (size 92)

kind = HANDLER
major_key = <NoCache>Stub
name = push
compiler = unknown
Instructions (size = 120)
0x4cd8b860     0  sub csp, jssp, #0x8 (8)
0x4cd8b864     4  str x3, [jssp, #-8]!
0x4cd8b868     8  sub csp, jssp, #0x8 (8)
0x4cd8b86c    12  str x0, [jssp, #-8]!
0x4cd8b870    16  ldr x0, pc+72 (addr 0x000000004cd8b8b8)    ;; object: 0x210c7b09 Cell for 0
0x4cd8b874    20  ldur x0, [x0, #7]
0x4cd8b878    24  cmp x0, #0x0 (0)
0x4cd8b87c    28  b.ne #+0x14 (addr 0x4cd8b890)
0x4cd8b880    32  ldr x3, pc+64 (addr 0x000000004cd8b8c0)    ;; object: 0x210c7b19 WeakCell for 0x23326419 <JS Array[0]>
0x4cd8b884    36  ldur x3, [x3, #7]
0x4cd8b888    40  tbz w3, #0, #+0x8 (addr 0x4cd8b890)
0x4cd8b88c    44  b #+0x14 (addr 0x4cd8b8a0)
0x4cd8b890    48  ldr x0, [jssp], #8
0x4cd8b894    52  ldr x3, [jssp], #8
0x4cd8b898    56  ldr x16, pc+48 (addr 0x000000004cd8b8c8)    ;; code: BUILTIN
0x4cd8b89c    60  br x16
0x4cd8b8a0    64  add jssp, jssp, #0x10 (16)
0x4cd8b8a4    68  mov x1, x3
0x4cd8b8a8    72  ldr x16, pc+40 (addr 0x000000004cd8b8d0)    ;; code: HANDLER, LoadConstantStub, minor: 7
0x4cd8b8ac    76  br x16
0x4cd8b8b0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cd8b8b4    84  d63f03e0       constant
0x4cd8b8b8    88  210c7b09       constant
0x4cd8b8bc    92  00000000       constant
0x4cd8b8c0    96  210c7b19       constant
0x4cd8b8c4   100  00000000       constant
0x4cd8b8c8   104  4cd222e0       constant
0x4cd8b8cc   108  00000000       constant
0x4cd8b8d0   112  4cd8b0a0       constant
0x4cd8b8d4   116  00000000       constant


RelocInfo (size = 10)
0x4cd8b870  embedded object  (0x210c7b09 Cell for 0)
0x4cd8b880  embedded object  (0x210c7b19 WeakCell for 0x23326419 <JS Array[0]>)
0x4cd8b898  code target (BUILTIN)  (0x4cd222e0)
0x4cd8b8a8  code target (HANDLER)  (0x4cd8b0a0)
0x4cd8b8b0  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cd8b940     0  tbz w0, #0, #+0x90 (addr 0x4cd8b9d0)
0x4cd8b944     4  mov x2, x0
0x4cd8b948     8  stur x2, [x1, #23]
0x4cd8b94c    12  add x3, x1, #0x17 (23)
0x4cd8b950    16  and x2, x2, #0xfffffffffff00000
0x4cd8b954    20  ldr x2, [x2, #8]
0x4cd8b958    24  tbz w2, #1, #+0x24 (addr 0x4cd8b97c)
0x4cd8b95c    28  and x2, x1, #0xfffffffffff00000
0x4cd8b960    32  ldr x2, [x2, #8]
0x4cd8b964    36  tbz w2, #2, #+0x18 (addr 0x4cd8b97c)
0x4cd8b968    40  sub csp, jssp, #0x8 (8)
0x4cd8b96c    44  str lr, [jssp, #-8]!
0x4cd8b970    48  ldr x16, pc+80 (addr 0x000000004cd8b9c0)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd8b974    52  blr x16
0x4cd8b978    56  ldr lr, [jssp], #8
0x4cd8b97c    60  stur x5, [x1, #-1]
0x4cd8b980    64  tbz w5, #0, #+0x34 (addr 0x4cd8b9b4)
0x4cd8b984    68  sub x2, x1, #0x1 (1)
0x4cd8b988    72  and x5, x5, #0xfffffffffff00000
0x4cd8b98c    76  ldr x5, [x5, #8]
0x4cd8b990    80  tbz w5, #1, #+0x24 (addr 0x4cd8b9b4)
0x4cd8b994    84  and x5, x1, #0xfffffffffff00000
0x4cd8b998    88  ldr x5, [x5, #8]
0x4cd8b99c    92  tbz w5, #2, #+0x18 (addr 0x4cd8b9b4)
0x4cd8b9a0    96  sub csp, jssp, #0x8 (8)
0x4cd8b9a4   100  str lr, [jssp, #-8]!
0x4cd8b9a8   104  ldr x16, pc+32 (addr 0x000000004cd8b9c8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd8b9ac   108  blr x16
0x4cd8b9b0   112  ldr lr, [jssp], #8
0x4cd8b9b4   116  ret
0x4cd8b9b8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd8b9bc   124  d63f03e0       constant
0x4cd8b9c0   128  4cd170c0       constant
0x4cd8b9c4   132  00000000       constant
0x4cd8b9c8   136  4cd38080       constant
0x4cd8b9cc   140  00000000       constant
0x4cd8b9d0   144  movz x16, #0x0
0x4cd8b9d4   148  sub csp, jssp, #0x10 (16)
0x4cd8b9d8   152  stp fp, lr, [jssp, #-16]!
0x4cd8b9dc   156  bl #+0x4 (addr 0x4cd8b9e0)
0x4cd8b9e0   160  movz x17, #0xa00000000
0x4cd8b9e4   164  sub csp, jssp, #0x10 (16)
0x4cd8b9e8   168  stp x17, cp, [jssp, #-16]!
0x4cd8b9ec   172  add fp, jssp, #0x10 (16)
0x4cd8b9f0   176  ldr x17, pc+24 (addr 0x000000004cd8ba08)    ;; lazy deoptimization bailout 0
0x4cd8b9f4   180  add x17, x17, x16
0x4cd8b9f8   184  br x17
0x4cd8b9fc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd8ba00   192  d63f03e0       constant
0x4cd8ba04   196  d503201f       constant
0x4cd8ba08   200  4cb06000       constant
0x4cd8ba0c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd8b970  code target (STUB)  (0x4cd170c0)
0x4cd8b9a8  code target (STUB)  (0x4cd38080)
0x4cd8b9b8  constant pool (size 24)
0x4cd8b9f0  runtime entry
0x4cd8b9fc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cd8b940     0  tbz w0, #0, #+0x90 (addr 0x4cd8b9d0)
0x4cd8b944     4  mov x2, x0
0x4cd8b948     8  stur x2, [x1, #23]
0x4cd8b94c    12  add x3, x1, #0x17 (23)
0x4cd8b950    16  and x2, x2, #0xfffffffffff00000
0x4cd8b954    20  ldr x2, [x2, #8]
0x4cd8b958    24  tbz w2, #1, #+0x24 (addr 0x4cd8b97c)
0x4cd8b95c    28  and x2, x1, #0xfffffffffff00000
0x4cd8b960    32  ldr x2, [x2, #8]
0x4cd8b964    36  tbz w2, #2, #+0x18 (addr 0x4cd8b97c)
0x4cd8b968    40  sub csp, jssp, #0x8 (8)
0x4cd8b96c    44  str lr, [jssp, #-8]!
0x4cd8b970    48  ldr x16, pc+80 (addr 0x000000004cd8b9c0)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd8b974    52  blr x16
0x4cd8b978    56  ldr lr, [jssp], #8
0x4cd8b97c    60  stur x5, [x1, #-1]
0x4cd8b980    64  tbz w5, #0, #+0x34 (addr 0x4cd8b9b4)
0x4cd8b984    68  sub x2, x1, #0x1 (1)
0x4cd8b988    72  and x5, x5, #0xfffffffffff00000
0x4cd8b98c    76  ldr x5, [x5, #8]
0x4cd8b990    80  tbz w5, #1, #+0x24 (addr 0x4cd8b9b4)
0x4cd8b994    84  and x5, x1, #0xfffffffffff00000
0x4cd8b998    88  ldr x5, [x5, #8]
0x4cd8b99c    92  tbz w5, #2, #+0x18 (addr 0x4cd8b9b4)
0x4cd8b9a0    96  sub csp, jssp, #0x8 (8)
0x4cd8b9a4   100  str lr, [jssp, #-8]!
0x4cd8b9a8   104  ldr x16, pc+32 (addr 0x000000004cd8b9c8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd8b9ac   108  blr x16
0x4cd8b9b0   112  ldr lr, [jssp], #8
0x4cd8b9b4   116  ret
0x4cd8b9b8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd8b9bc   124  d63f03e0       constant
0x4cd8b9c0   128  4cd170c0       constant
0x4cd8b9c4   132  00000000       constant
0x4cd8b9c8   136  4cd38080       constant
0x4cd8b9cc   140  00000000       constant
0x4cd8b9d0   144  movz x16, #0x0
0x4cd8b9d4   148  sub csp, jssp, #0x10 (16)
0x4cd8b9d8   152  stp fp, lr, [jssp, #-16]!
0x4cd8b9dc   156  bl #+0x4 (addr 0x4cd8b9e0)
0x4cd8b9e0   160  movz x17, #0xa00000000
0x4cd8b9e4   164  sub csp, jssp, #0x10 (16)
0x4cd8b9e8   168  stp x17, cp, [jssp, #-16]!
0x4cd8b9ec   172  add fp, jssp, #0x10 (16)
0x4cd8b9f0   176  ldr x17, pc+24 (addr 0x000000004cd8ba08)    ;; lazy deoptimization bailout 0
0x4cd8b9f4   180  add x17, x17, x16
0x4cd8b9f8   184  br x17
0x4cd8b9fc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd8ba00   192  d63f03e0       constant
0x4cd8ba04   196  d503201f       constant
0x4cd8ba08   200  4cb06000       constant
0x4cd8ba0c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd8b970  code target (STUB)  (0x4cd170c0)
0x4cd8b9a8  code target (STUB)  (0x4cd38080)
0x4cd8b9b8  constant pool (size 24)
0x4cd8b9f0  runtime entry
0x4cd8b9fc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = filename
compiler = unknown
Instructions (size = 152)
0x4cd8ba80     0  sub csp, jssp, #0x8 (8)
0x4cd8ba84     4  str x3, [jssp, #-8]!
0x4cd8ba88     8  sub csp, jssp, #0x8 (8)
0x4cd8ba8c    12  str x4, [jssp, #-8]!
0x4cd8ba90    16  ldr x3, pc+88 (addr 0x000000004cd8bae8)    ;; object: 0x210c7ba9 Cell for 0
0x4cd8ba94    20  ldur x3, [x3, #7]
0x4cd8ba98    24  cmp x3, #0x0 (0)
0x4cd8ba9c    28  b.ne #+0x30 (addr 0x4cd8bacc)
0x4cd8baa0    32  tbz w0, #0, #+0x2c (addr 0x4cd8bacc)
0x4cd8baa4    36  ldr x5, pc+76 (addr 0x000000004cd8baf0)    ;; object: 0x210c2219 WeakCell for 0x2a81b2d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd8baa8    40  ldur x5, [x5, #7]
0x4cd8baac    44  tbz w5, #0, #+0x20 (addr 0x4cd8bacc)
0x4cd8bab0    48  ldursw x4, [x5, #15]
0x4cd8bab4    52  tbnz w4, #23, #+0x18 (addr 0x4cd8bacc)
0x4cd8bab8    56  ldr x4, [jssp], #8
0x4cd8babc    60  ldr x3, [jssp], #8
0x4cd8bac0    64  ldr x2, pc+56 (addr 0x000000004cd8baf8)    ;; object: 0x210b9cf1 <String[8]: filename>
0x4cd8bac4    68  ldr x16, pc+60 (addr 0x000000004cd8bb00)    ;; code: HANDLER, StoreTransitionStub, minor: 198659
0x4cd8bac8    72  br x16
0x4cd8bacc    76  ldr x2, pc+60 (addr 0x000000004cd8bb08)    ;; object: 0x210b9cf1 <String[8]: filename>
0x4cd8bad0    80  ldr x4, [jssp], #8
0x4cd8bad4    84  ldr x3, [jssp], #8
0x4cd8bad8    88  ldr x16, pc+56 (addr 0x000000004cd8bb10)    ;; code: BUILTIN
0x4cd8badc    92  br x16
0x4cd8bae0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd8bae4   100  d63f03e0       constant
0x4cd8bae8   104  210c7ba9       constant
0x4cd8baec   108  00000000       constant
0x4cd8baf0   112  210c2219       constant
0x4cd8baf4   116  00000000       constant
0x4cd8baf8   120  210b9cf1       constant
0x4cd8bafc   124  00000000       constant
0x4cd8bb00   128  4cd8b940       constant
0x4cd8bb04   132  00000000       constant
0x4cd8bb08   136  210b9cf1       constant
0x4cd8bb0c   140  00000000       constant
0x4cd8bb10   144  4cd22420       constant
0x4cd8bb14   148  00000000       constant


RelocInfo (size = 12)
0x4cd8ba90  embedded object  (0x210c7ba9 Cell for 0)
0x4cd8baa4  embedded object  (0x210c2219 WeakCell for 0x2a81b2d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd8bac0  embedded object  (0x210b9cf1 <String[8]: filename>)
0x4cd8bac4  code target (HANDLER)  (0x4cd8b940)
0x4cd8bacc  embedded object  (0x210b9cf1 <String[8]: filename>)
0x4cd8bad8  code target (BUILTIN)  (0x4cd22420)
0x4cd8bae0  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cd8bb80     0  tbz w0, #0, #+0x90 (addr 0x4cd8bc10)
0x4cd8bb84     4  mov x2, x0
0x4cd8bb88     8  stur x2, [x1, #31]
0x4cd8bb8c    12  add x3, x1, #0x1f (31)
0x4cd8bb90    16  and x2, x2, #0xfffffffffff00000
0x4cd8bb94    20  ldr x2, [x2, #8]
0x4cd8bb98    24  tbz w2, #1, #+0x24 (addr 0x4cd8bbbc)
0x4cd8bb9c    28  and x2, x1, #0xfffffffffff00000
0x4cd8bba0    32  ldr x2, [x2, #8]
0x4cd8bba4    36  tbz w2, #2, #+0x18 (addr 0x4cd8bbbc)
0x4cd8bba8    40  sub csp, jssp, #0x8 (8)
0x4cd8bbac    44  str lr, [jssp, #-8]!
0x4cd8bbb0    48  ldr x16, pc+80 (addr 0x000000004cd8bc00)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd8bbb4    52  blr x16
0x4cd8bbb8    56  ldr lr, [jssp], #8
0x4cd8bbbc    60  stur x5, [x1, #-1]
0x4cd8bbc0    64  tbz w5, #0, #+0x34 (addr 0x4cd8bbf4)
0x4cd8bbc4    68  sub x2, x1, #0x1 (1)
0x4cd8bbc8    72  and x5, x5, #0xfffffffffff00000
0x4cd8bbcc    76  ldr x5, [x5, #8]
0x4cd8bbd0    80  tbz w5, #1, #+0x24 (addr 0x4cd8bbf4)
0x4cd8bbd4    84  and x5, x1, #0xfffffffffff00000
0x4cd8bbd8    88  ldr x5, [x5, #8]
0x4cd8bbdc    92  tbz w5, #2, #+0x18 (addr 0x4cd8bbf4)
0x4cd8bbe0    96  sub csp, jssp, #0x8 (8)
0x4cd8bbe4   100  str lr, [jssp, #-8]!
0x4cd8bbe8   104  ldr x16, pc+32 (addr 0x000000004cd8bc08)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd8bbec   108  blr x16
0x4cd8bbf0   112  ldr lr, [jssp], #8
0x4cd8bbf4   116  ret
0x4cd8bbf8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd8bbfc   124  d63f03e0       constant
0x4cd8bc00   128  4cd170c0       constant
0x4cd8bc04   132  00000000       constant
0x4cd8bc08   136  4cd38080       constant
0x4cd8bc0c   140  00000000       constant
0x4cd8bc10   144  movz x16, #0x0
0x4cd8bc14   148  sub csp, jssp, #0x10 (16)
0x4cd8bc18   152  stp fp, lr, [jssp, #-16]!
0x4cd8bc1c   156  bl #+0x4 (addr 0x4cd8bc20)
0x4cd8bc20   160  movz x17, #0xa00000000
0x4cd8bc24   164  sub csp, jssp, #0x10 (16)
0x4cd8bc28   168  stp x17, cp, [jssp, #-16]!
0x4cd8bc2c   172  add fp, jssp, #0x10 (16)
0x4cd8bc30   176  ldr x17, pc+24 (addr 0x000000004cd8bc48)    ;; lazy deoptimization bailout 0
0x4cd8bc34   180  add x17, x17, x16
0x4cd8bc38   184  br x17
0x4cd8bc3c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd8bc40   192  d63f03e0       constant
0x4cd8bc44   196  d503201f       constant
0x4cd8bc48   200  4cb06000       constant
0x4cd8bc4c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd8bbb0  code target (STUB)  (0x4cd170c0)
0x4cd8bbe8  code target (STUB)  (0x4cd38080)
0x4cd8bbf8  constant pool (size 24)
0x4cd8bc30  runtime entry
0x4cd8bc3c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cd8bb80     0  tbz w0, #0, #+0x90 (addr 0x4cd8bc10)
0x4cd8bb84     4  mov x2, x0
0x4cd8bb88     8  stur x2, [x1, #31]
0x4cd8bb8c    12  add x3, x1, #0x1f (31)
0x4cd8bb90    16  and x2, x2, #0xfffffffffff00000
0x4cd8bb94    20  ldr x2, [x2, #8]
0x4cd8bb98    24  tbz w2, #1, #+0x24 (addr 0x4cd8bbbc)
0x4cd8bb9c    28  and x2, x1, #0xfffffffffff00000
0x4cd8bba0    32  ldr x2, [x2, #8]
0x4cd8bba4    36  tbz w2, #2, #+0x18 (addr 0x4cd8bbbc)
0x4cd8bba8    40  sub csp, jssp, #0x8 (8)
0x4cd8bbac    44  str lr, [jssp, #-8]!
0x4cd8bbb0    48  ldr x16, pc+80 (addr 0x000000004cd8bc00)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd8bbb4    52  blr x16
0x4cd8bbb8    56  ldr lr, [jssp], #8
0x4cd8bbbc    60  stur x5, [x1, #-1]
0x4cd8bbc0    64  tbz w5, #0, #+0x34 (addr 0x4cd8bbf4)
0x4cd8bbc4    68  sub x2, x1, #0x1 (1)
0x4cd8bbc8    72  and x5, x5, #0xfffffffffff00000
0x4cd8bbcc    76  ldr x5, [x5, #8]
0x4cd8bbd0    80  tbz w5, #1, #+0x24 (addr 0x4cd8bbf4)
0x4cd8bbd4    84  and x5, x1, #0xfffffffffff00000
0x4cd8bbd8    88  ldr x5, [x5, #8]
0x4cd8bbdc    92  tbz w5, #2, #+0x18 (addr 0x4cd8bbf4)
0x4cd8bbe0    96  sub csp, jssp, #0x8 (8)
0x4cd8bbe4   100  str lr, [jssp, #-8]!
0x4cd8bbe8   104  ldr x16, pc+32 (addr 0x000000004cd8bc08)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd8bbec   108  blr x16
0x4cd8bbf0   112  ldr lr, [jssp], #8
0x4cd8bbf4   116  ret
0x4cd8bbf8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd8bbfc   124  d63f03e0       constant
0x4cd8bc00   128  4cd170c0       constant
0x4cd8bc04   132  00000000       constant
0x4cd8bc08   136  4cd38080       constant
0x4cd8bc0c   140  00000000       constant
0x4cd8bc10   144  movz x16, #0x0
0x4cd8bc14   148  sub csp, jssp, #0x10 (16)
0x4cd8bc18   152  stp fp, lr, [jssp, #-16]!
0x4cd8bc1c   156  bl #+0x4 (addr 0x4cd8bc20)
0x4cd8bc20   160  movz x17, #0xa00000000
0x4cd8bc24   164  sub csp, jssp, #0x10 (16)
0x4cd8bc28   168  stp x17, cp, [jssp, #-16]!
0x4cd8bc2c   172  add fp, jssp, #0x10 (16)
0x4cd8bc30   176  ldr x17, pc+24 (addr 0x000000004cd8bc48)    ;; lazy deoptimization bailout 0
0x4cd8bc34   180  add x17, x17, x16
0x4cd8bc38   184  br x17
0x4cd8bc3c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd8bc40   192  d63f03e0       constant
0x4cd8bc44   196  d503201f       constant
0x4cd8bc48   200  4cb06000       constant
0x4cd8bc4c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd8bbb0  code target (STUB)  (0x4cd170c0)
0x4cd8bbe8  code target (STUB)  (0x4cd38080)
0x4cd8bbf8  constant pool (size 24)
0x4cd8bc30  runtime entry
0x4cd8bc3c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = id
compiler = unknown
Instructions (size = 152)
0x4cd8bcc0     0  sub csp, jssp, #0x8 (8)
0x4cd8bcc4     4  str x3, [jssp, #-8]!
0x4cd8bcc8     8  sub csp, jssp, #0x8 (8)
0x4cd8bccc    12  str x4, [jssp, #-8]!
0x4cd8bcd0    16  ldr x3, pc+88 (addr 0x000000004cd8bd28)    ;; object: 0x210c7ba9 Cell for 0
0x4cd8bcd4    20  ldur x3, [x3, #7]
0x4cd8bcd8    24  cmp x3, #0x0 (0)
0x4cd8bcdc    28  b.ne #+0x30 (addr 0x4cd8bd0c)
0x4cd8bce0    32  tbz w0, #0, #+0x2c (addr 0x4cd8bd0c)
0x4cd8bce4    36  ldr x5, pc+76 (addr 0x000000004cd8bd30)    ;; object: 0x210c2231 WeakCell for 0x2a81b331 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd8bce8    40  ldur x5, [x5, #7]
0x4cd8bcec    44  tbz w5, #0, #+0x20 (addr 0x4cd8bd0c)
0x4cd8bcf0    48  ldursw x4, [x5, #15]
0x4cd8bcf4    52  tbnz w4, #23, #+0x18 (addr 0x4cd8bd0c)
0x4cd8bcf8    56  ldr x4, [jssp], #8
0x4cd8bcfc    60  ldr x3, [jssp], #8
0x4cd8bd00    64  ldr x2, pc+56 (addr 0x000000004cd8bd38)    ;; object: 0x2104e919 <String[2]: id>
0x4cd8bd04    68  ldr x16, pc+60 (addr 0x000000004cd8bd40)    ;; code: HANDLER, StoreTransitionStub, minor: 198660
0x4cd8bd08    72  br x16
0x4cd8bd0c    76  ldr x2, pc+60 (addr 0x000000004cd8bd48)    ;; object: 0x2104e919 <String[2]: id>
0x4cd8bd10    80  ldr x4, [jssp], #8
0x4cd8bd14    84  ldr x3, [jssp], #8
0x4cd8bd18    88  ldr x16, pc+56 (addr 0x000000004cd8bd50)    ;; code: BUILTIN
0x4cd8bd1c    92  br x16
0x4cd8bd20    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd8bd24   100  d63f03e0       constant
0x4cd8bd28   104  210c7ba9       constant
0x4cd8bd2c   108  00000000       constant
0x4cd8bd30   112  210c2231       constant
0x4cd8bd34   116  00000000       constant
0x4cd8bd38   120  2104e919       constant
0x4cd8bd3c   124  00000000       constant
0x4cd8bd40   128  4cd8bb80       constant
0x4cd8bd44   132  00000000       constant
0x4cd8bd48   136  2104e919       constant
0x4cd8bd4c   140  00000000       constant
0x4cd8bd50   144  4cd22420       constant
0x4cd8bd54   148  00000000       constant


RelocInfo (size = 12)
0x4cd8bcd0  embedded object  (0x210c7ba9 Cell for 0)
0x4cd8bce4  embedded object  (0x210c2231 WeakCell for 0x2a81b331 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd8bd00  embedded object  (0x2104e919 <String[2]: id>)
0x4cd8bd04  code target (HANDLER)  (0x4cd8bb80)
0x4cd8bd0c  embedded object  (0x2104e919 <String[2]: id>)
0x4cd8bd18  code target (BUILTIN)  (0x4cd22420)
0x4cd8bd20  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cd8bdc0     0  tbz w0, #0, #+0x90 (addr 0x4cd8be50)
0x4cd8bdc4     4  mov x2, x0
0x4cd8bdc8     8  stur x2, [x1, #39]
0x4cd8bdcc    12  add x3, x1, #0x27 (39)
0x4cd8bdd0    16  and x2, x2, #0xfffffffffff00000
0x4cd8bdd4    20  ldr x2, [x2, #8]
0x4cd8bdd8    24  tbz w2, #1, #+0x24 (addr 0x4cd8bdfc)
0x4cd8bddc    28  and x2, x1, #0xfffffffffff00000
0x4cd8bde0    32  ldr x2, [x2, #8]
0x4cd8bde4    36  tbz w2, #2, #+0x18 (addr 0x4cd8bdfc)
0x4cd8bde8    40  sub csp, jssp, #0x8 (8)
0x4cd8bdec    44  str lr, [jssp, #-8]!
0x4cd8bdf0    48  ldr x16, pc+80 (addr 0x000000004cd8be40)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd8bdf4    52  blr x16
0x4cd8bdf8    56  ldr lr, [jssp], #8
0x4cd8bdfc    60  stur x5, [x1, #-1]
0x4cd8be00    64  tbz w5, #0, #+0x34 (addr 0x4cd8be34)
0x4cd8be04    68  sub x2, x1, #0x1 (1)
0x4cd8be08    72  and x5, x5, #0xfffffffffff00000
0x4cd8be0c    76  ldr x5, [x5, #8]
0x4cd8be10    80  tbz w5, #1, #+0x24 (addr 0x4cd8be34)
0x4cd8be14    84  and x5, x1, #0xfffffffffff00000
0x4cd8be18    88  ldr x5, [x5, #8]
0x4cd8be1c    92  tbz w5, #2, #+0x18 (addr 0x4cd8be34)
0x4cd8be20    96  sub csp, jssp, #0x8 (8)
0x4cd8be24   100  str lr, [jssp, #-8]!
0x4cd8be28   104  ldr x16, pc+32 (addr 0x000000004cd8be48)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd8be2c   108  blr x16
0x4cd8be30   112  ldr lr, [jssp], #8
0x4cd8be34   116  ret
0x4cd8be38   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd8be3c   124  d63f03e0       constant
0x4cd8be40   128  4cd170c0       constant
0x4cd8be44   132  00000000       constant
0x4cd8be48   136  4cd38080       constant
0x4cd8be4c   140  00000000       constant
0x4cd8be50   144  movz x16, #0x0
0x4cd8be54   148  sub csp, jssp, #0x10 (16)
0x4cd8be58   152  stp fp, lr, [jssp, #-16]!
0x4cd8be5c   156  bl #+0x4 (addr 0x4cd8be60)
0x4cd8be60   160  movz x17, #0xa00000000
0x4cd8be64   164  sub csp, jssp, #0x10 (16)
0x4cd8be68   168  stp x17, cp, [jssp, #-16]!
0x4cd8be6c   172  add fp, jssp, #0x10 (16)
0x4cd8be70   176  ldr x17, pc+24 (addr 0x000000004cd8be88)    ;; lazy deoptimization bailout 0
0x4cd8be74   180  add x17, x17, x16
0x4cd8be78   184  br x17
0x4cd8be7c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd8be80   192  d63f03e0       constant
0x4cd8be84   196  d503201f       constant
0x4cd8be88   200  4cb06000       constant
0x4cd8be8c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd8bdf0  code target (STUB)  (0x4cd170c0)
0x4cd8be28  code target (STUB)  (0x4cd38080)
0x4cd8be38  constant pool (size 24)
0x4cd8be70  runtime entry
0x4cd8be7c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cd8bdc0     0  tbz w0, #0, #+0x90 (addr 0x4cd8be50)
0x4cd8bdc4     4  mov x2, x0
0x4cd8bdc8     8  stur x2, [x1, #39]
0x4cd8bdcc    12  add x3, x1, #0x27 (39)
0x4cd8bdd0    16  and x2, x2, #0xfffffffffff00000
0x4cd8bdd4    20  ldr x2, [x2, #8]
0x4cd8bdd8    24  tbz w2, #1, #+0x24 (addr 0x4cd8bdfc)
0x4cd8bddc    28  and x2, x1, #0xfffffffffff00000
0x4cd8bde0    32  ldr x2, [x2, #8]
0x4cd8bde4    36  tbz w2, #2, #+0x18 (addr 0x4cd8bdfc)
0x4cd8bde8    40  sub csp, jssp, #0x8 (8)
0x4cd8bdec    44  str lr, [jssp, #-8]!
0x4cd8bdf0    48  ldr x16, pc+80 (addr 0x000000004cd8be40)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd8bdf4    52  blr x16
0x4cd8bdf8    56  ldr lr, [jssp], #8
0x4cd8bdfc    60  stur x5, [x1, #-1]
0x4cd8be00    64  tbz w5, #0, #+0x34 (addr 0x4cd8be34)
0x4cd8be04    68  sub x2, x1, #0x1 (1)
0x4cd8be08    72  and x5, x5, #0xfffffffffff00000
0x4cd8be0c    76  ldr x5, [x5, #8]
0x4cd8be10    80  tbz w5, #1, #+0x24 (addr 0x4cd8be34)
0x4cd8be14    84  and x5, x1, #0xfffffffffff00000
0x4cd8be18    88  ldr x5, [x5, #8]
0x4cd8be1c    92  tbz w5, #2, #+0x18 (addr 0x4cd8be34)
0x4cd8be20    96  sub csp, jssp, #0x8 (8)
0x4cd8be24   100  str lr, [jssp, #-8]!
0x4cd8be28   104  ldr x16, pc+32 (addr 0x000000004cd8be48)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd8be2c   108  blr x16
0x4cd8be30   112  ldr lr, [jssp], #8
0x4cd8be34   116  ret
0x4cd8be38   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd8be3c   124  d63f03e0       constant
0x4cd8be40   128  4cd170c0       constant
0x4cd8be44   132  00000000       constant
0x4cd8be48   136  4cd38080       constant
0x4cd8be4c   140  00000000       constant
0x4cd8be50   144  movz x16, #0x0
0x4cd8be54   148  sub csp, jssp, #0x10 (16)
0x4cd8be58   152  stp fp, lr, [jssp, #-16]!
0x4cd8be5c   156  bl #+0x4 (addr 0x4cd8be60)
0x4cd8be60   160  movz x17, #0xa00000000
0x4cd8be64   164  sub csp, jssp, #0x10 (16)
0x4cd8be68   168  stp x17, cp, [jssp, #-16]!
0x4cd8be6c   172  add fp, jssp, #0x10 (16)
0x4cd8be70   176  ldr x17, pc+24 (addr 0x000000004cd8be88)    ;; lazy deoptimization bailout 0
0x4cd8be74   180  add x17, x17, x16
0x4cd8be78   184  br x17
0x4cd8be7c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd8be80   192  d63f03e0       constant
0x4cd8be84   196  d503201f       constant
0x4cd8be88   200  4cb06000       constant
0x4cd8be8c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd8bdf0  code target (STUB)  (0x4cd170c0)
0x4cd8be28  code target (STUB)  (0x4cd38080)
0x4cd8be38  constant pool (size 24)
0x4cd8be70  runtime entry
0x4cd8be7c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = exports
compiler = unknown
Instructions (size = 152)
0x4cd8bf00     0  sub csp, jssp, #0x8 (8)
0x4cd8bf04     4  str x3, [jssp, #-8]!
0x4cd8bf08     8  sub csp, jssp, #0x8 (8)
0x4cd8bf0c    12  str x4, [jssp, #-8]!
0x4cd8bf10    16  ldr x3, pc+88 (addr 0x000000004cd8bf68)    ;; object: 0x210c7ba9 Cell for 0
0x4cd8bf14    20  ldur x3, [x3, #7]
0x4cd8bf18    24  cmp x3, #0x0 (0)
0x4cd8bf1c    28  b.ne #+0x30 (addr 0x4cd8bf4c)
0x4cd8bf20    32  tbz w0, #0, #+0x2c (addr 0x4cd8bf4c)
0x4cd8bf24    36  ldr x5, pc+76 (addr 0x000000004cd8bf70)    ;; object: 0x210c2281 WeakCell for 0x2a81b389 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd8bf28    40  ldur x5, [x5, #7]
0x4cd8bf2c    44  tbz w5, #0, #+0x20 (addr 0x4cd8bf4c)
0x4cd8bf30    48  ldursw x4, [x5, #15]
0x4cd8bf34    52  tbnz w4, #23, #+0x18 (addr 0x4cd8bf4c)
0x4cd8bf38    56  ldr x4, [jssp], #8
0x4cd8bf3c    60  ldr x3, [jssp], #8
0x4cd8bf40    64  ldr x2, pc+56 (addr 0x000000004cd8bf78)    ;; object: 0x210b2651 <String[7]: exports>
0x4cd8bf44    68  ldr x16, pc+60 (addr 0x000000004cd8bf80)    ;; code: HANDLER, StoreTransitionStub, minor: 198661
0x4cd8bf48    72  br x16
0x4cd8bf4c    76  ldr x2, pc+60 (addr 0x000000004cd8bf88)    ;; object: 0x210b2651 <String[7]: exports>
0x4cd8bf50    80  ldr x4, [jssp], #8
0x4cd8bf54    84  ldr x3, [jssp], #8
0x4cd8bf58    88  ldr x16, pc+56 (addr 0x000000004cd8bf90)    ;; code: BUILTIN
0x4cd8bf5c    92  br x16
0x4cd8bf60    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd8bf64   100  d63f03e0       constant
0x4cd8bf68   104  210c7ba9       constant
0x4cd8bf6c   108  00000000       constant
0x4cd8bf70   112  210c2281       constant
0x4cd8bf74   116  00000000       constant
0x4cd8bf78   120  210b2651       constant
0x4cd8bf7c   124  00000000       constant
0x4cd8bf80   128  4cd8bdc0       constant
0x4cd8bf84   132  00000000       constant
0x4cd8bf88   136  210b2651       constant
0x4cd8bf8c   140  00000000       constant
0x4cd8bf90   144  4cd22420       constant
0x4cd8bf94   148  00000000       constant


RelocInfo (size = 12)
0x4cd8bf10  embedded object  (0x210c7ba9 Cell for 0)
0x4cd8bf24  embedded object  (0x210c2281 WeakCell for 0x2a81b389 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd8bf40  embedded object  (0x210b2651 <String[7]: exports>)
0x4cd8bf44  code target (HANDLER)  (0x4cd8bdc0)
0x4cd8bf4c  embedded object  (0x210b2651 <String[7]: exports>)
0x4cd8bf58  code target (BUILTIN)  (0x4cd22420)
0x4cd8bf60  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cd8c000     0  tbz w0, #0, #+0x90 (addr 0x4cd8c090)
0x4cd8c004     4  mov x2, x0
0x4cd8c008     8  stur x2, [x1, #47]
0x4cd8c00c    12  add x3, x1, #0x2f (47)
0x4cd8c010    16  and x2, x2, #0xfffffffffff00000
0x4cd8c014    20  ldr x2, [x2, #8]
0x4cd8c018    24  tbz w2, #1, #+0x24 (addr 0x4cd8c03c)
0x4cd8c01c    28  and x2, x1, #0xfffffffffff00000
0x4cd8c020    32  ldr x2, [x2, #8]
0x4cd8c024    36  tbz w2, #2, #+0x18 (addr 0x4cd8c03c)
0x4cd8c028    40  sub csp, jssp, #0x8 (8)
0x4cd8c02c    44  str lr, [jssp, #-8]!
0x4cd8c030    48  ldr x16, pc+80 (addr 0x000000004cd8c080)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd8c034    52  blr x16
0x4cd8c038    56  ldr lr, [jssp], #8
0x4cd8c03c    60  stur x5, [x1, #-1]
0x4cd8c040    64  tbz w5, #0, #+0x34 (addr 0x4cd8c074)
0x4cd8c044    68  sub x2, x1, #0x1 (1)
0x4cd8c048    72  and x5, x5, #0xfffffffffff00000
0x4cd8c04c    76  ldr x5, [x5, #8]
0x4cd8c050    80  tbz w5, #1, #+0x24 (addr 0x4cd8c074)
0x4cd8c054    84  and x5, x1, #0xfffffffffff00000
0x4cd8c058    88  ldr x5, [x5, #8]
0x4cd8c05c    92  tbz w5, #2, #+0x18 (addr 0x4cd8c074)
0x4cd8c060    96  sub csp, jssp, #0x8 (8)
0x4cd8c064   100  str lr, [jssp, #-8]!
0x4cd8c068   104  ldr x16, pc+32 (addr 0x000000004cd8c088)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd8c06c   108  blr x16
0x4cd8c070   112  ldr lr, [jssp], #8
0x4cd8c074   116  ret
0x4cd8c078   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd8c07c   124  d63f03e0       constant
0x4cd8c080   128  4cd170c0       constant
0x4cd8c084   132  00000000       constant
0x4cd8c088   136  4cd38080       constant
0x4cd8c08c   140  00000000       constant
0x4cd8c090   144  movz x16, #0x0
0x4cd8c094   148  sub csp, jssp, #0x10 (16)
0x4cd8c098   152  stp fp, lr, [jssp, #-16]!
0x4cd8c09c   156  bl #+0x4 (addr 0x4cd8c0a0)
0x4cd8c0a0   160  movz x17, #0xa00000000
0x4cd8c0a4   164  sub csp, jssp, #0x10 (16)
0x4cd8c0a8   168  stp x17, cp, [jssp, #-16]!
0x4cd8c0ac   172  add fp, jssp, #0x10 (16)
0x4cd8c0b0   176  ldr x17, pc+24 (addr 0x000000004cd8c0c8)    ;; lazy deoptimization bailout 0
0x4cd8c0b4   180  add x17, x17, x16
0x4cd8c0b8   184  br x17
0x4cd8c0bc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd8c0c0   192  d63f03e0       constant
0x4cd8c0c4   196  d503201f       constant
0x4cd8c0c8   200  4cb06000       constant
0x4cd8c0cc   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd8c030  code target (STUB)  (0x4cd170c0)
0x4cd8c068  code target (STUB)  (0x4cd38080)
0x4cd8c078  constant pool (size 24)
0x4cd8c0b0  runtime entry
0x4cd8c0bc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cd8c000     0  tbz w0, #0, #+0x90 (addr 0x4cd8c090)
0x4cd8c004     4  mov x2, x0
0x4cd8c008     8  stur x2, [x1, #47]
0x4cd8c00c    12  add x3, x1, #0x2f (47)
0x4cd8c010    16  and x2, x2, #0xfffffffffff00000
0x4cd8c014    20  ldr x2, [x2, #8]
0x4cd8c018    24  tbz w2, #1, #+0x24 (addr 0x4cd8c03c)
0x4cd8c01c    28  and x2, x1, #0xfffffffffff00000
0x4cd8c020    32  ldr x2, [x2, #8]
0x4cd8c024    36  tbz w2, #2, #+0x18 (addr 0x4cd8c03c)
0x4cd8c028    40  sub csp, jssp, #0x8 (8)
0x4cd8c02c    44  str lr, [jssp, #-8]!
0x4cd8c030    48  ldr x16, pc+80 (addr 0x000000004cd8c080)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd8c034    52  blr x16
0x4cd8c038    56  ldr lr, [jssp], #8
0x4cd8c03c    60  stur x5, [x1, #-1]
0x4cd8c040    64  tbz w5, #0, #+0x34 (addr 0x4cd8c074)
0x4cd8c044    68  sub x2, x1, #0x1 (1)
0x4cd8c048    72  and x5, x5, #0xfffffffffff00000
0x4cd8c04c    76  ldr x5, [x5, #8]
0x4cd8c050    80  tbz w5, #1, #+0x24 (addr 0x4cd8c074)
0x4cd8c054    84  and x5, x1, #0xfffffffffff00000
0x4cd8c058    88  ldr x5, [x5, #8]
0x4cd8c05c    92  tbz w5, #2, #+0x18 (addr 0x4cd8c074)
0x4cd8c060    96  sub csp, jssp, #0x8 (8)
0x4cd8c064   100  str lr, [jssp, #-8]!
0x4cd8c068   104  ldr x16, pc+32 (addr 0x000000004cd8c088)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd8c06c   108  blr x16
0x4cd8c070   112  ldr lr, [jssp], #8
0x4cd8c074   116  ret
0x4cd8c078   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd8c07c   124  d63f03e0       constant
0x4cd8c080   128  4cd170c0       constant
0x4cd8c084   132  00000000       constant
0x4cd8c088   136  4cd38080       constant
0x4cd8c08c   140  00000000       constant
0x4cd8c090   144  movz x16, #0x0
0x4cd8c094   148  sub csp, jssp, #0x10 (16)
0x4cd8c098   152  stp fp, lr, [jssp, #-16]!
0x4cd8c09c   156  bl #+0x4 (addr 0x4cd8c0a0)
0x4cd8c0a0   160  movz x17, #0xa00000000
0x4cd8c0a4   164  sub csp, jssp, #0x10 (16)
0x4cd8c0a8   168  stp x17, cp, [jssp, #-16]!
0x4cd8c0ac   172  add fp, jssp, #0x10 (16)
0x4cd8c0b0   176  ldr x17, pc+24 (addr 0x000000004cd8c0c8)    ;; lazy deoptimization bailout 0
0x4cd8c0b4   180  add x17, x17, x16
0x4cd8c0b8   184  br x17
0x4cd8c0bc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd8c0c0   192  d63f03e0       constant
0x4cd8c0c4   196  d503201f       constant
0x4cd8c0c8   200  4cb06000       constant
0x4cd8c0cc   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd8c030  code target (STUB)  (0x4cd170c0)
0x4cd8c068  code target (STUB)  (0x4cd38080)
0x4cd8c078  constant pool (size 24)
0x4cd8c0b0  runtime entry
0x4cd8c0bc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = loaded
compiler = unknown
Instructions (size = 152)
0x4cd8c140     0  sub csp, jssp, #0x8 (8)
0x4cd8c144     4  str x3, [jssp, #-8]!
0x4cd8c148     8  sub csp, jssp, #0x8 (8)
0x4cd8c14c    12  str x4, [jssp, #-8]!
0x4cd8c150    16  ldr x3, pc+88 (addr 0x000000004cd8c1a8)    ;; object: 0x210c7ba9 Cell for 0
0x4cd8c154    20  ldur x3, [x3, #7]
0x4cd8c158    24  cmp x3, #0x0 (0)
0x4cd8c15c    28  b.ne #+0x30 (addr 0x4cd8c18c)
0x4cd8c160    32  tbz w0, #0, #+0x2c (addr 0x4cd8c18c)
0x4cd8c164    36  ldr x5, pc+76 (addr 0x000000004cd8c1b0)    ;; object: 0x210c2299 WeakCell for 0x2a81b3e1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd8c168    40  ldur x5, [x5, #7]
0x4cd8c16c    44  tbz w5, #0, #+0x20 (addr 0x4cd8c18c)
0x4cd8c170    48  ldursw x4, [x5, #15]
0x4cd8c174    52  tbnz w4, #23, #+0x18 (addr 0x4cd8c18c)
0x4cd8c178    56  ldr x4, [jssp], #8
0x4cd8c17c    60  ldr x3, [jssp], #8
0x4cd8c180    64  ldr x2, pc+56 (addr 0x000000004cd8c1b8)    ;; object: 0x210ba9e1 <String[6]: loaded>
0x4cd8c184    68  ldr x16, pc+60 (addr 0x000000004cd8c1c0)    ;; code: HANDLER, StoreTransitionStub, minor: 198662
0x4cd8c188    72  br x16
0x4cd8c18c    76  ldr x2, pc+60 (addr 0x000000004cd8c1c8)    ;; object: 0x210ba9e1 <String[6]: loaded>
0x4cd8c190    80  ldr x4, [jssp], #8
0x4cd8c194    84  ldr x3, [jssp], #8
0x4cd8c198    88  ldr x16, pc+56 (addr 0x000000004cd8c1d0)    ;; code: BUILTIN
0x4cd8c19c    92  br x16
0x4cd8c1a0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd8c1a4   100  d63f03e0       constant
0x4cd8c1a8   104  210c7ba9       constant
0x4cd8c1ac   108  00000000       constant
0x4cd8c1b0   112  210c2299       constant
0x4cd8c1b4   116  00000000       constant
0x4cd8c1b8   120  210ba9e1       constant
0x4cd8c1bc   124  00000000       constant
0x4cd8c1c0   128  4cd8c000       constant
0x4cd8c1c4   132  00000000       constant
0x4cd8c1c8   136  210ba9e1       constant
0x4cd8c1cc   140  00000000       constant
0x4cd8c1d0   144  4cd22420       constant
0x4cd8c1d4   148  00000000       constant


RelocInfo (size = 12)
0x4cd8c150  embedded object  (0x210c7ba9 Cell for 0)
0x4cd8c164  embedded object  (0x210c2299 WeakCell for 0x2a81b3e1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd8c180  embedded object  (0x210ba9e1 <String[6]: loaded>)
0x4cd8c184  code target (HANDLER)  (0x4cd8c000)
0x4cd8c18c  embedded object  (0x210ba9e1 <String[6]: loaded>)
0x4cd8c198  code target (BUILTIN)  (0x4cd22420)
0x4cd8c1a0  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cd8c240     0  tbz w0, #0, #+0x90 (addr 0x4cd8c2d0)
0x4cd8c244     4  mov x2, x0
0x4cd8c248     8  stur x2, [x1, #55]
0x4cd8c24c    12  add x3, x1, #0x37 (55)
0x4cd8c250    16  and x2, x2, #0xfffffffffff00000
0x4cd8c254    20  ldr x2, [x2, #8]
0x4cd8c258    24  tbz w2, #1, #+0x24 (addr 0x4cd8c27c)
0x4cd8c25c    28  and x2, x1, #0xfffffffffff00000
0x4cd8c260    32  ldr x2, [x2, #8]
0x4cd8c264    36  tbz w2, #2, #+0x18 (addr 0x4cd8c27c)
0x4cd8c268    40  sub csp, jssp, #0x8 (8)
0x4cd8c26c    44  str lr, [jssp, #-8]!
0x4cd8c270    48  ldr x16, pc+80 (addr 0x000000004cd8c2c0)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd8c274    52  blr x16
0x4cd8c278    56  ldr lr, [jssp], #8
0x4cd8c27c    60  stur x5, [x1, #-1]
0x4cd8c280    64  tbz w5, #0, #+0x34 (addr 0x4cd8c2b4)
0x4cd8c284    68  sub x2, x1, #0x1 (1)
0x4cd8c288    72  and x5, x5, #0xfffffffffff00000
0x4cd8c28c    76  ldr x5, [x5, #8]
0x4cd8c290    80  tbz w5, #1, #+0x24 (addr 0x4cd8c2b4)
0x4cd8c294    84  and x5, x1, #0xfffffffffff00000
0x4cd8c298    88  ldr x5, [x5, #8]
0x4cd8c29c    92  tbz w5, #2, #+0x18 (addr 0x4cd8c2b4)
0x4cd8c2a0    96  sub csp, jssp, #0x8 (8)
0x4cd8c2a4   100  str lr, [jssp, #-8]!
0x4cd8c2a8   104  ldr x16, pc+32 (addr 0x000000004cd8c2c8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd8c2ac   108  blr x16
0x4cd8c2b0   112  ldr lr, [jssp], #8
0x4cd8c2b4   116  ret
0x4cd8c2b8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd8c2bc   124  d63f03e0       constant
0x4cd8c2c0   128  4cd170c0       constant
0x4cd8c2c4   132  00000000       constant
0x4cd8c2c8   136  4cd38080       constant
0x4cd8c2cc   140  00000000       constant
0x4cd8c2d0   144  movz x16, #0x0
0x4cd8c2d4   148  sub csp, jssp, #0x10 (16)
0x4cd8c2d8   152  stp fp, lr, [jssp, #-16]!
0x4cd8c2dc   156  bl #+0x4 (addr 0x4cd8c2e0)
0x4cd8c2e0   160  movz x17, #0xa00000000
0x4cd8c2e4   164  sub csp, jssp, #0x10 (16)
0x4cd8c2e8   168  stp x17, cp, [jssp, #-16]!
0x4cd8c2ec   172  add fp, jssp, #0x10 (16)
0x4cd8c2f0   176  ldr x17, pc+24 (addr 0x000000004cd8c308)    ;; lazy deoptimization bailout 0
0x4cd8c2f4   180  add x17, x17, x16
0x4cd8c2f8   184  br x17
0x4cd8c2fc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd8c300   192  d63f03e0       constant
0x4cd8c304   196  d503201f       constant
0x4cd8c308   200  4cb06000       constant
0x4cd8c30c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd8c270  code target (STUB)  (0x4cd170c0)
0x4cd8c2a8  code target (STUB)  (0x4cd38080)
0x4cd8c2b8  constant pool (size 24)
0x4cd8c2f0  runtime entry
0x4cd8c2fc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cd8c240     0  tbz w0, #0, #+0x90 (addr 0x4cd8c2d0)
0x4cd8c244     4  mov x2, x0
0x4cd8c248     8  stur x2, [x1, #55]
0x4cd8c24c    12  add x3, x1, #0x37 (55)
0x4cd8c250    16  and x2, x2, #0xfffffffffff00000
0x4cd8c254    20  ldr x2, [x2, #8]
0x4cd8c258    24  tbz w2, #1, #+0x24 (addr 0x4cd8c27c)
0x4cd8c25c    28  and x2, x1, #0xfffffffffff00000
0x4cd8c260    32  ldr x2, [x2, #8]
0x4cd8c264    36  tbz w2, #2, #+0x18 (addr 0x4cd8c27c)
0x4cd8c268    40  sub csp, jssp, #0x8 (8)
0x4cd8c26c    44  str lr, [jssp, #-8]!
0x4cd8c270    48  ldr x16, pc+80 (addr 0x000000004cd8c2c0)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd8c274    52  blr x16
0x4cd8c278    56  ldr lr, [jssp], #8
0x4cd8c27c    60  stur x5, [x1, #-1]
0x4cd8c280    64  tbz w5, #0, #+0x34 (addr 0x4cd8c2b4)
0x4cd8c284    68  sub x2, x1, #0x1 (1)
0x4cd8c288    72  and x5, x5, #0xfffffffffff00000
0x4cd8c28c    76  ldr x5, [x5, #8]
0x4cd8c290    80  tbz w5, #1, #+0x24 (addr 0x4cd8c2b4)
0x4cd8c294    84  and x5, x1, #0xfffffffffff00000
0x4cd8c298    88  ldr x5, [x5, #8]
0x4cd8c29c    92  tbz w5, #2, #+0x18 (addr 0x4cd8c2b4)
0x4cd8c2a0    96  sub csp, jssp, #0x8 (8)
0x4cd8c2a4   100  str lr, [jssp, #-8]!
0x4cd8c2a8   104  ldr x16, pc+32 (addr 0x000000004cd8c2c8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd8c2ac   108  blr x16
0x4cd8c2b0   112  ldr lr, [jssp], #8
0x4cd8c2b4   116  ret
0x4cd8c2b8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cd8c2bc   124  d63f03e0       constant
0x4cd8c2c0   128  4cd170c0       constant
0x4cd8c2c4   132  00000000       constant
0x4cd8c2c8   136  4cd38080       constant
0x4cd8c2cc   140  00000000       constant
0x4cd8c2d0   144  movz x16, #0x0
0x4cd8c2d4   148  sub csp, jssp, #0x10 (16)
0x4cd8c2d8   152  stp fp, lr, [jssp, #-16]!
0x4cd8c2dc   156  bl #+0x4 (addr 0x4cd8c2e0)
0x4cd8c2e0   160  movz x17, #0xa00000000
0x4cd8c2e4   164  sub csp, jssp, #0x10 (16)
0x4cd8c2e8   168  stp x17, cp, [jssp, #-16]!
0x4cd8c2ec   172  add fp, jssp, #0x10 (16)
0x4cd8c2f0   176  ldr x17, pc+24 (addr 0x000000004cd8c308)    ;; lazy deoptimization bailout 0
0x4cd8c2f4   180  add x17, x17, x16
0x4cd8c2f8   184  br x17
0x4cd8c2fc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd8c300   192  d63f03e0       constant
0x4cd8c304   196  d503201f       constant
0x4cd8c308   200  4cb06000       constant
0x4cd8c30c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd8c270  code target (STUB)  (0x4cd170c0)
0x4cd8c2a8  code target (STUB)  (0x4cd38080)
0x4cd8c2b8  constant pool (size 24)
0x4cd8c2f0  runtime entry
0x4cd8c2fc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = loading
compiler = unknown
Instructions (size = 152)
0x4cd8c380     0  sub csp, jssp, #0x8 (8)
0x4cd8c384     4  str x3, [jssp, #-8]!
0x4cd8c388     8  sub csp, jssp, #0x8 (8)
0x4cd8c38c    12  str x4, [jssp, #-8]!
0x4cd8c390    16  ldr x3, pc+88 (addr 0x000000004cd8c3e8)    ;; object: 0x210c7ba9 Cell for 0
0x4cd8c394    20  ldur x3, [x3, #7]
0x4cd8c398    24  cmp x3, #0x0 (0)
0x4cd8c39c    28  b.ne #+0x30 (addr 0x4cd8c3cc)
0x4cd8c3a0    32  tbz w0, #0, #+0x2c (addr 0x4cd8c3cc)
0x4cd8c3a4    36  ldr x5, pc+76 (addr 0x000000004cd8c3f0)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd8c3a8    40  ldur x5, [x5, #7]
0x4cd8c3ac    44  tbz w5, #0, #+0x20 (addr 0x4cd8c3cc)
0x4cd8c3b0    48  ldursw x4, [x5, #15]
0x4cd8c3b4    52  tbnz w4, #23, #+0x18 (addr 0x4cd8c3cc)
0x4cd8c3b8    56  ldr x4, [jssp], #8
0x4cd8c3bc    60  ldr x3, [jssp], #8
0x4cd8c3c0    64  ldr x2, pc+56 (addr 0x000000004cd8c3f8)    ;; object: 0x210baa01 <String[7]: loading>
0x4cd8c3c4    68  ldr x16, pc+60 (addr 0x000000004cd8c400)    ;; code: HANDLER, StoreTransitionStub, minor: 198663
0x4cd8c3c8    72  br x16
0x4cd8c3cc    76  ldr x2, pc+60 (addr 0x000000004cd8c408)    ;; object: 0x210baa01 <String[7]: loading>
0x4cd8c3d0    80  ldr x4, [jssp], #8
0x4cd8c3d4    84  ldr x3, [jssp], #8
0x4cd8c3d8    88  ldr x16, pc+56 (addr 0x000000004cd8c410)    ;; code: BUILTIN
0x4cd8c3dc    92  br x16
0x4cd8c3e0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd8c3e4   100  d63f03e0       constant
0x4cd8c3e8   104  210c7ba9       constant
0x4cd8c3ec   108  00000000       constant
0x4cd8c3f0   112  210c22b1       constant
0x4cd8c3f4   116  00000000       constant
0x4cd8c3f8   120  210baa01       constant
0x4cd8c3fc   124  00000000       constant
0x4cd8c400   128  4cd8c240       constant
0x4cd8c404   132  00000000       constant
0x4cd8c408   136  210baa01       constant
0x4cd8c40c   140  00000000       constant
0x4cd8c410   144  4cd22420       constant
0x4cd8c414   148  00000000       constant


RelocInfo (size = 12)
0x4cd8c390  embedded object  (0x210c7ba9 Cell for 0)
0x4cd8c3a4  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd8c3c0  embedded object  (0x210baa01 <String[7]: loading>)
0x4cd8c3c4  code target (HANDLER)  (0x4cd8c240)
0x4cd8c3cc  embedded object  (0x210baa01 <String[7]: loading>)
0x4cd8c3d8  code target (BUILTIN)  (0x4cd22420)
0x4cd8c3e0  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = cache
compiler = unknown
Instructions (size = 120)
0x4cd8c480     0  sub csp, jssp, #0x8 (8)
0x4cd8c484     4  str x3, [jssp, #-8]!
0x4cd8c488     8  sub csp, jssp, #0x8 (8)
0x4cd8c48c    12  str x0, [jssp, #-8]!
0x4cd8c490    16  ldr x0, pc+72 (addr 0x000000004cd8c4d8)    ;; object: 0x210c7ba9 Cell for 0
0x4cd8c494    20  ldur x0, [x0, #7]
0x4cd8c498    24  cmp x0, #0x0 (0)
0x4cd8c49c    28  b.ne #+0x14 (addr 0x4cd8c4b0)
0x4cd8c4a0    32  ldr x3, pc+64 (addr 0x000000004cd8c4e0)    ;; object: 0x210c8009 WeakCell for 0x233a3531 <an Object with map 0x2a81b229>
0x4cd8c4a4    36  ldur x3, [x3, #7]
0x4cd8c4a8    40  tbz w3, #0, #+0x8 (addr 0x4cd8c4b0)
0x4cd8c4ac    44  b #+0x14 (addr 0x4cd8c4c0)
0x4cd8c4b0    48  ldr x0, [jssp], #8
0x4cd8c4b4    52  ldr x3, [jssp], #8
0x4cd8c4b8    56  ldr x16, pc+48 (addr 0x000000004cd8c4e8)    ;; code: BUILTIN
0x4cd8c4bc    60  br x16
0x4cd8c4c0    64  add jssp, jssp, #0x10 (16)
0x4cd8c4c4    68  mov x1, x3
0x4cd8c4c8    72  ldr x16, pc+40 (addr 0x000000004cd8c4f0)    ;; code: HANDLER, LoadConstantStub, minor: 2
0x4cd8c4cc    76  br x16
0x4cd8c4d0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cd8c4d4    84  d63f03e0       constant
0x4cd8c4d8    88  210c7ba9       constant
0x4cd8c4dc    92  00000000       constant
0x4cd8c4e0    96  210c8009       constant
0x4cd8c4e4   100  00000000       constant
0x4cd8c4e8   104  4cd222e0       constant
0x4cd8c4ec   108  00000000       constant
0x4cd8c4f0   112  4cd43380       constant
0x4cd8c4f4   116  00000000       constant


RelocInfo (size = 10)
0x4cd8c490  embedded object  (0x210c7ba9 Cell for 0)
0x4cd8c4a0  embedded object  (0x210c8009 WeakCell for 0x233a3531 <an Object with map 0x2a81b229>)
0x4cd8c4b8  code target (BUILTIN)  (0x4cd222e0)
0x4cd8c4c8  code target (HANDLER)  (0x4cd43380)
0x4cd8c4d0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = util
compiler = unknown
Instructions (size = 184)
0x4cd8c560     0  sub csp, jssp, #0x8 (8)
0x4cd8c564     4  str x3, [jssp, #-8]!
0x4cd8c568     8  sub csp, jssp, #0x8 (8)
0x4cd8c56c    12  str x4, [jssp, #-8]!
0x4cd8c570    16  ldr x3, pc+112 (addr 0x000000004cd8c5e0)    ;; object: 0x21063e59 Cell for 0
0x4cd8c574    20  ldur x3, [x3, #7]
0x4cd8c578    24  cmp x3, #0x0 (0)
0x4cd8c57c    28  b.ne #+0x44 (addr 0x4cd8c5c0)
0x4cd8c580    32  tbz w0, #0, #+0x40 (addr 0x4cd8c5c0)
0x4cd8c584    36  ldur x3, [x0, #-1]
0x4cd8c588    40  ldr x4, pc+96 (addr 0x000000004cd8c5e8)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd8c58c    44  ldur x4, [x4, #7]
0x4cd8c590    48  cmp x3, x4
0x4cd8c594    52  b.ne #+0x2c (addr 0x4cd8c5c0)
0x4cd8c598    56  ldr x5, pc+88 (addr 0x000000004cd8c5f0)    ;; object: 0x210c8071 WeakCell for 0x2a81c1f9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd8c59c    60  ldur x5, [x5, #7]
0x4cd8c5a0    64  tbz w5, #0, #+0x20 (addr 0x4cd8c5c0)
0x4cd8c5a4    68  ldursw x4, [x5, #15]
0x4cd8c5a8    72  tbnz w4, #23, #+0x18 (addr 0x4cd8c5c0)
0x4cd8c5ac    76  ldr x4, [jssp], #8
0x4cd8c5b0    80  ldr x3, [jssp], #8
0x4cd8c5b4    84  ldr x2, pc+68 (addr 0x000000004cd8c5f8)    ;; object: 0x210ba081 <String[4]: util>
0x4cd8c5b8    88  ldr x16, pc+72 (addr 0x000000004cd8c600)    ;; code: HANDLER, StoreTransitionStub, minor: 198660
0x4cd8c5bc    92  br x16
0x4cd8c5c0    96  ldr x2, pc+72 (addr 0x000000004cd8c608)    ;; object: 0x210ba081 <String[4]: util>
0x4cd8c5c4   100  ldr x4, [jssp], #8
0x4cd8c5c8   104  ldr x3, [jssp], #8
0x4cd8c5cc   108  ldr x16, pc+68 (addr 0x000000004cd8c610)    ;; code: BUILTIN
0x4cd8c5d0   112  br x16
0x4cd8c5d4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd8c5d8   120  d63f03e0       constant
0x4cd8c5dc   124  d503201f       constant
0x4cd8c5e0   128  21063e59       constant
0x4cd8c5e4   132  00000000       constant
0x4cd8c5e8   136  210c22b1       constant
0x4cd8c5ec   140  00000000       constant
0x4cd8c5f0   144  210c8071       constant
0x4cd8c5f4   148  00000000       constant
0x4cd8c5f8   152  210ba081       constant
0x4cd8c5fc   156  00000000       constant
0x4cd8c600   160  4cd8bb80       constant
0x4cd8c604   164  00000000       constant
0x4cd8c608   168  210ba081       constant
0x4cd8c60c   172  00000000       constant
0x4cd8c610   176  4cd22420       constant
0x4cd8c614   180  00000000       constant


RelocInfo (size = 13)
0x4cd8c570  embedded object  (0x21063e59 Cell for 0)
0x4cd8c588  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd8c598  embedded object  (0x210c8071 WeakCell for 0x2a81c1f9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd8c5b4  embedded object  (0x210ba081 <String[4]: util>)
0x4cd8c5b8  code target (HANDLER)  (0x4cd8bb80)
0x4cd8c5c0  embedded object  (0x210ba081 <String[4]: util>)
0x4cd8c5cc  code target (BUILTIN)  (0x4cd22420)
0x4cd8c5d4  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = compile
compiler = unknown
Instructions (size = 120)
0x4cd8c680     0  sub csp, jssp, #0x8 (8)
0x4cd8c684     4  str x3, [jssp, #-8]!
0x4cd8c688     8  sub csp, jssp, #0x8 (8)
0x4cd8c68c    12  str x0, [jssp, #-8]!
0x4cd8c690    16  ldr x0, pc+72 (addr 0x000000004cd8c6d8)    ;; object: 0x210c7ba9 Cell for 0
0x4cd8c694    20  ldur x0, [x0, #7]
0x4cd8c698    24  cmp x0, #0x0 (0)
0x4cd8c69c    28  b.ne #+0x14 (addr 0x4cd8c6b0)
0x4cd8c6a0    32  ldr x3, pc+64 (addr 0x000000004cd8c6e0)    ;; object: 0x210c80a9 WeakCell for 0x233a3531 <an Object with map 0x2a81b229>
0x4cd8c6a4    36  ldur x3, [x3, #7]
0x4cd8c6a8    40  tbz w3, #0, #+0x8 (addr 0x4cd8c6b0)
0x4cd8c6ac    44  b #+0x14 (addr 0x4cd8c6c0)
0x4cd8c6b0    48  ldr x0, [jssp], #8
0x4cd8c6b4    52  ldr x3, [jssp], #8
0x4cd8c6b8    56  ldr x16, pc+48 (addr 0x000000004cd8c6e8)    ;; code: BUILTIN
0x4cd8c6bc    60  br x16
0x4cd8c6c0    64  add jssp, jssp, #0x10 (16)
0x4cd8c6c4    68  mov x1, x3
0x4cd8c6c8    72  ldr x16, pc+40 (addr 0x000000004cd8c6f0)    ;; code: HANDLER, LoadConstantStub, minor: 1
0x4cd8c6cc    76  br x16
0x4cd8c6d0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cd8c6d4    84  d63f03e0       constant
0x4cd8c6d8    88  210c7ba9       constant
0x4cd8c6dc    92  00000000       constant
0x4cd8c6e0    96  210c80a9       constant
0x4cd8c6e4   100  00000000       constant
0x4cd8c6e8   104  4cd222e0       constant
0x4cd8c6ec   108  00000000       constant
0x4cd8c6f0   112  4cd43300       constant
0x4cd8c6f4   116  00000000       constant


RelocInfo (size = 10)
0x4cd8c690  embedded object  (0x210c7ba9 Cell for 0)
0x4cd8c6a0  embedded object  (0x210c80a9 WeakCell for 0x233a3531 <an Object with map 0x2a81b229>)
0x4cd8c6b8  code target (BUILTIN)  (0x4cd222e0)
0x4cd8c6c8  code target (HANDLER)  (0x4cd43300)
0x4cd8c6d0  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd8c760     0  ldur x0, [x1, #-1]
0x4cd8c764     4  ldur x0, [x0, #47]
0x4cd8c768     8  movz x16, #0x11f
0x4cd8c76c    12  ldr x0, [x0, x16]
0x4cd8c770    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd8c760     0  ldur x0, [x1, #-1]
0x4cd8c764     4  ldur x0, [x0, #47]
0x4cd8c768     8  movz x16, #0x11f
0x4cd8c76c    12  ldr x0, [x0, x16]
0x4cd8c770    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd8c7e0     0  ldur x0, [x1, #-1]
0x4cd8c7e4     4  ldur x0, [x0, #47]
0x4cd8c7e8     8  movz x16, #0x137
0x4cd8c7ec    12  ldr x0, [x0, x16]
0x4cd8c7f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cd8c7e0     0  ldur x0, [x1, #-1]
0x4cd8c7e4     4  ldur x0, [x0, #47]
0x4cd8c7e8     8  movz x16, #0x137
0x4cd8c7ec    12  ldr x0, [x0, x16]
0x4cd8c7f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0x4cd8c860     0  tbz w0, #0, #+0x50 (addr 0x4cd8c8b0)
0x4cd8c864     4  mov x2, x0
0x4cd8c868     8  stur x2, [x1, #55]
0x4cd8c86c    12  add x3, x1, #0x37 (55)
0x4cd8c870    16  and x2, x2, #0xfffffffffff00000
0x4cd8c874    20  ldr x2, [x2, #8]
0x4cd8c878    24  tbz w2, #1, #+0x24 (addr 0x4cd8c89c)
0x4cd8c87c    28  and x2, x1, #0xfffffffffff00000
0x4cd8c880    32  ldr x2, [x2, #8]
0x4cd8c884    36  tbz w2, #2, #+0x18 (addr 0x4cd8c89c)
0x4cd8c888    40  sub csp, jssp, #0x8 (8)
0x4cd8c88c    44  str lr, [jssp, #-8]!
0x4cd8c890    48  ldr x16, pc+24 (addr 0x000000004cd8c8a8)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd8c894    52  blr x16
0x4cd8c898    56  ldr lr, [jssp], #8
0x4cd8c89c    60  ret
0x4cd8c8a0    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd8c8a4    68  d63f03e0       constant
0x4cd8c8a8    72  4cd170c0       constant
0x4cd8c8ac    76  00000000       constant
0x4cd8c8b0    80  movz x16, #0x0
0x4cd8c8b4    84  sub csp, jssp, #0x10 (16)
0x4cd8c8b8    88  stp fp, lr, [jssp, #-16]!
0x4cd8c8bc    92  bl #+0x4 (addr 0x4cd8c8c0)
0x4cd8c8c0    96  movz x17, #0xa00000000
0x4cd8c8c4   100  sub csp, jssp, #0x10 (16)
0x4cd8c8c8   104  stp x17, cp, [jssp, #-16]!
0x4cd8c8cc   108  add fp, jssp, #0x10 (16)
0x4cd8c8d0   112  ldr x17, pc+24 (addr 0x000000004cd8c8e8)    ;; lazy deoptimization bailout 0
0x4cd8c8d4   116  add x17, x17, x16
0x4cd8c8d8   120  br x17
0x4cd8c8dc   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd8c8e0   128  d63f03e0       constant
0x4cd8c8e4   132  d503201f       constant
0x4cd8c8e8   136  4cb06000       constant
0x4cd8c8ec   140  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cd8c890  code target (STUB)  (0x4cd170c0)
0x4cd8c8a0  constant pool (size 16)
0x4cd8c8d0  runtime entry
0x4cd8c8dc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0x4cd8c860     0  tbz w0, #0, #+0x50 (addr 0x4cd8c8b0)
0x4cd8c864     4  mov x2, x0
0x4cd8c868     8  stur x2, [x1, #55]
0x4cd8c86c    12  add x3, x1, #0x37 (55)
0x4cd8c870    16  and x2, x2, #0xfffffffffff00000
0x4cd8c874    20  ldr x2, [x2, #8]
0x4cd8c878    24  tbz w2, #1, #+0x24 (addr 0x4cd8c89c)
0x4cd8c87c    28  and x2, x1, #0xfffffffffff00000
0x4cd8c880    32  ldr x2, [x2, #8]
0x4cd8c884    36  tbz w2, #2, #+0x18 (addr 0x4cd8c89c)
0x4cd8c888    40  sub csp, jssp, #0x8 (8)
0x4cd8c88c    44  str lr, [jssp, #-8]!
0x4cd8c890    48  ldr x16, pc+24 (addr 0x000000004cd8c8a8)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd8c894    52  blr x16
0x4cd8c898    56  ldr lr, [jssp], #8
0x4cd8c89c    60  ret
0x4cd8c8a0    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd8c8a4    68  d63f03e0       constant
0x4cd8c8a8    72  4cd170c0       constant
0x4cd8c8ac    76  00000000       constant
0x4cd8c8b0    80  movz x16, #0x0
0x4cd8c8b4    84  sub csp, jssp, #0x10 (16)
0x4cd8c8b8    88  stp fp, lr, [jssp, #-16]!
0x4cd8c8bc    92  bl #+0x4 (addr 0x4cd8c8c0)
0x4cd8c8c0    96  movz x17, #0xa00000000
0x4cd8c8c4   100  sub csp, jssp, #0x10 (16)
0x4cd8c8c8   104  stp x17, cp, [jssp, #-16]!
0x4cd8c8cc   108  add fp, jssp, #0x10 (16)
0x4cd8c8d0   112  ldr x17, pc+24 (addr 0x000000004cd8c8e8)    ;; lazy deoptimization bailout 0
0x4cd8c8d4   116  add x17, x17, x16
0x4cd8c8d8   120  br x17
0x4cd8c8dc   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd8c8e0   128  d63f03e0       constant
0x4cd8c8e4   132  d503201f       constant
0x4cd8c8e8   136  4cb06000       constant
0x4cd8c8ec   140  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cd8c890  code target (STUB)  (0x4cd170c0)
0x4cd8c8a0  constant pool (size 16)
0x4cd8c8d0  runtime entry
0x4cd8c8dc  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0x4cd8c960     0  tbz w0, #0, #+0x50 (addr 0x4cd8c9b0)
0x4cd8c964     4  mov x2, x0
0x4cd8c968     8  stur x2, [x1, #23]
0x4cd8c96c    12  add x3, x1, #0x17 (23)
0x4cd8c970    16  and x2, x2, #0xfffffffffff00000
0x4cd8c974    20  ldr x2, [x2, #8]
0x4cd8c978    24  tbz w2, #1, #+0x24 (addr 0x4cd8c99c)
0x4cd8c97c    28  and x2, x1, #0xfffffffffff00000
0x4cd8c980    32  ldr x2, [x2, #8]
0x4cd8c984    36  tbz w2, #2, #+0x18 (addr 0x4cd8c99c)
0x4cd8c988    40  sub csp, jssp, #0x8 (8)
0x4cd8c98c    44  str lr, [jssp, #-8]!
0x4cd8c990    48  ldr x16, pc+24 (addr 0x000000004cd8c9a8)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd8c994    52  blr x16
0x4cd8c998    56  ldr lr, [jssp], #8
0x4cd8c99c    60  ret
0x4cd8c9a0    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd8c9a4    68  d63f03e0       constant
0x4cd8c9a8    72  4cd170c0       constant
0x4cd8c9ac    76  00000000       constant
0x4cd8c9b0    80  movz x16, #0x0
0x4cd8c9b4    84  sub csp, jssp, #0x10 (16)
0x4cd8c9b8    88  stp fp, lr, [jssp, #-16]!
0x4cd8c9bc    92  bl #+0x4 (addr 0x4cd8c9c0)
0x4cd8c9c0    96  movz x17, #0xa00000000
0x4cd8c9c4   100  sub csp, jssp, #0x10 (16)
0x4cd8c9c8   104  stp x17, cp, [jssp, #-16]!
0x4cd8c9cc   108  add fp, jssp, #0x10 (16)
0x4cd8c9d0   112  ldr x17, pc+24 (addr 0x000000004cd8c9e8)    ;; lazy deoptimization bailout 0
0x4cd8c9d4   116  add x17, x17, x16
0x4cd8c9d8   120  br x17
0x4cd8c9dc   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd8c9e0   128  d63f03e0       constant
0x4cd8c9e4   132  d503201f       constant
0x4cd8c9e8   136  4cb06000       constant
0x4cd8c9ec   140  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cd8c990  code target (STUB)  (0x4cd170c0)
0x4cd8c9a0  constant pool (size 16)
0x4cd8c9d0  runtime entry
0x4cd8c9dc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0x4cd8c960     0  tbz w0, #0, #+0x50 (addr 0x4cd8c9b0)
0x4cd8c964     4  mov x2, x0
0x4cd8c968     8  stur x2, [x1, #23]
0x4cd8c96c    12  add x3, x1, #0x17 (23)
0x4cd8c970    16  and x2, x2, #0xfffffffffff00000
0x4cd8c974    20  ldr x2, [x2, #8]
0x4cd8c978    24  tbz w2, #1, #+0x24 (addr 0x4cd8c99c)
0x4cd8c97c    28  and x2, x1, #0xfffffffffff00000
0x4cd8c980    32  ldr x2, [x2, #8]
0x4cd8c984    36  tbz w2, #2, #+0x18 (addr 0x4cd8c99c)
0x4cd8c988    40  sub csp, jssp, #0x8 (8)
0x4cd8c98c    44  str lr, [jssp, #-8]!
0x4cd8c990    48  ldr x16, pc+24 (addr 0x000000004cd8c9a8)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd8c994    52  blr x16
0x4cd8c998    56  ldr lr, [jssp], #8
0x4cd8c99c    60  ret
0x4cd8c9a0    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd8c9a4    68  d63f03e0       constant
0x4cd8c9a8    72  4cd170c0       constant
0x4cd8c9ac    76  00000000       constant
0x4cd8c9b0    80  movz x16, #0x0
0x4cd8c9b4    84  sub csp, jssp, #0x10 (16)
0x4cd8c9b8    88  stp fp, lr, [jssp, #-16]!
0x4cd8c9bc    92  bl #+0x4 (addr 0x4cd8c9c0)
0x4cd8c9c0    96  movz x17, #0xa00000000
0x4cd8c9c4   100  sub csp, jssp, #0x10 (16)
0x4cd8c9c8   104  stp x17, cp, [jssp, #-16]!
0x4cd8c9cc   108  add fp, jssp, #0x10 (16)
0x4cd8c9d0   112  ldr x17, pc+24 (addr 0x000000004cd8c9e8)    ;; lazy deoptimization bailout 0
0x4cd8c9d4   116  add x17, x17, x16
0x4cd8c9d8   120  br x17
0x4cd8c9dc   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd8c9e0   128  d63f03e0       constant
0x4cd8c9e4   132  d503201f       constant
0x4cd8c9e8   136  4cb06000       constant
0x4cd8c9ec   140  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cd8c990  code target (STUB)  (0x4cd170c0)
0x4cd8c9a0  constant pool (size 16)
0x4cd8c9d0  runtime entry
0x4cd8c9dc  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 941)
0x4cd8ca60     0  movz x2, #0xd2c0
0x4cd8ca64     4  movk x2, #0x166d, lsl #16
0x4cd8ca68     8  ldp x3, x0, [x2]
0x4cd8ca6c    12  adds x16, x3, #0x170 (368)
0x4cd8ca70    16  ccmp x16, x0, #nzCv, lo
0x4cd8ca74    20  b.hi #+0x1b0 (addr 0x4cd8cc24)
0x4cd8ca78    24  str x16, [x2]
0x4cd8ca7c    28  orr x3, x3, #0x1
0x4cd8ca80    32  ldr x0, pc+528 (addr 0x000000004cd8cc90)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd8ca84    36  stur x0, [x3, #-1]
0x4cd8ca88    40  movz x0, #0x2c00000000
0x4cd8ca8c    44  stur x0, [x3, #7]
0x4cd8ca90    48  stur x1, [x3, #15]
0x4cd8ca94    52  stur cp, [x3, #23]
0x4cd8ca98    56  ldr x0, pc+512 (addr 0x000000004cd8cc98)    ;; object: 0x21004519 <the hole>
0x4cd8ca9c    60  stur x0, [x3, #31]
0x4cd8caa0    64  ldur x0, [cp, #39]
0x4cd8caa4    68  stur x0, [x3, #39]
0x4cd8caa8    72  ldr x0, pc+504 (addr 0x000000004cd8cca0)    ;; object: 0x21004241 <undefined>
0x4cd8caac    76  stur x0, [x3, #47]
0x4cd8cab0    80  ldr x0, pc+504 (addr 0x000000004cd8cca8)    ;; object: 0x21004241 <undefined>
0x4cd8cab4    84  stur x0, [x3, #55]
0x4cd8cab8    88  ldr x0, pc+504 (addr 0x000000004cd8ccb0)    ;; object: 0x21004241 <undefined>
0x4cd8cabc    92  stur x0, [x3, #63]
0x4cd8cac0    96  ldr x0, pc+504 (addr 0x000000004cd8ccb8)    ;; object: 0x21004241 <undefined>
0x4cd8cac4   100  stur x0, [x3, #71]
0x4cd8cac8   104  ldr x0, pc+504 (addr 0x000000004cd8ccc0)    ;; object: 0x21004241 <undefined>
0x4cd8cacc   108  stur x0, [x3, #79]
0x4cd8cad0   112  ldr x0, pc+504 (addr 0x000000004cd8ccc8)    ;; object: 0x21004241 <undefined>
0x4cd8cad4   116  stur x0, [x3, #87]
0x4cd8cad8   120  ldr x0, pc+504 (addr 0x000000004cd8ccd0)    ;; object: 0x21004241 <undefined>
0x4cd8cadc   124  stur x0, [x3, #95]
0x4cd8cae0   128  ldr x0, pc+504 (addr 0x000000004cd8ccd8)    ;; object: 0x21004241 <undefined>
0x4cd8cae4   132  stur x0, [x3, #103]
0x4cd8cae8   136  ldr x0, pc+504 (addr 0x000000004cd8cce0)    ;; object: 0x21004241 <undefined>
0x4cd8caec   140  stur x0, [x3, #111]
0x4cd8caf0   144  ldr x0, pc+504 (addr 0x000000004cd8cce8)    ;; object: 0x21004241 <undefined>
0x4cd8caf4   148  stur x0, [x3, #119]
0x4cd8caf8   152  ldr x0, pc+504 (addr 0x000000004cd8ccf0)    ;; object: 0x21004241 <undefined>
0x4cd8cafc   156  stur x0, [x3, #127]
0x4cd8cb00   160  ldr x0, pc+504 (addr 0x000000004cd8ccf8)    ;; object: 0x21004241 <undefined>
0x4cd8cb04   164  stur x0, [x3, #135]
0x4cd8cb08   168  ldr x0, pc+504 (addr 0x000000004cd8cd00)    ;; object: 0x21004241 <undefined>
0x4cd8cb0c   172  stur x0, [x3, #143]
0x4cd8cb10   176  ldr x0, pc+504 (addr 0x000000004cd8cd08)    ;; object: 0x21004241 <undefined>
0x4cd8cb14   180  stur x0, [x3, #151]
0x4cd8cb18   184  ldr x0, pc+504 (addr 0x000000004cd8cd10)    ;; object: 0x21004241 <undefined>
0x4cd8cb1c   188  stur x0, [x3, #159]
0x4cd8cb20   192  ldr x0, pc+504 (addr 0x000000004cd8cd18)    ;; object: 0x21004241 <undefined>
0x4cd8cb24   196  stur x0, [x3, #167]
0x4cd8cb28   200  ldr x0, pc+504 (addr 0x000000004cd8cd20)    ;; object: 0x21004241 <undefined>
0x4cd8cb2c   204  stur x0, [x3, #175]
0x4cd8cb30   208  ldr x0, pc+504 (addr 0x000000004cd8cd28)    ;; object: 0x21004241 <undefined>
0x4cd8cb34   212  stur x0, [x3, #183]
0x4cd8cb38   216  ldr x0, pc+504 (addr 0x000000004cd8cd30)    ;; object: 0x21004241 <undefined>
0x4cd8cb3c   220  stur x0, [x3, #191]
0x4cd8cb40   224  ldr x0, pc+504 (addr 0x000000004cd8cd38)    ;; object: 0x21004241 <undefined>
0x4cd8cb44   228  stur x0, [x3, #199]
0x4cd8cb48   232  ldr x0, pc+504 (addr 0x000000004cd8cd40)    ;; object: 0x21004241 <undefined>
0x4cd8cb4c   236  stur x0, [x3, #207]
0x4cd8cb50   240  ldr x0, pc+504 (addr 0x000000004cd8cd48)    ;; object: 0x21004241 <undefined>
0x4cd8cb54   244  stur x0, [x3, #215]
0x4cd8cb58   248  ldr x0, pc+504 (addr 0x000000004cd8cd50)    ;; object: 0x21004241 <undefined>
0x4cd8cb5c   252  stur x0, [x3, #223]
0x4cd8cb60   256  ldr x0, pc+504 (addr 0x000000004cd8cd58)    ;; object: 0x21004241 <undefined>
0x4cd8cb64   260  stur x0, [x3, #231]
0x4cd8cb68   264  ldr x0, pc+504 (addr 0x000000004cd8cd60)    ;; object: 0x21004241 <undefined>
0x4cd8cb6c   268  stur x0, [x3, #239]
0x4cd8cb70   272  ldr x0, pc+504 (addr 0x000000004cd8cd68)    ;; object: 0x21004241 <undefined>
0x4cd8cb74   276  stur x0, [x3, #247]
0x4cd8cb78   280  ldr x0, pc+504 (addr 0x000000004cd8cd70)    ;; object: 0x21004241 <undefined>
0x4cd8cb7c   284  stur x0, [x3, #255]
0x4cd8cb80   288  ldr x0, pc+504 (addr 0x000000004cd8cd78)    ;; object: 0x21004241 <undefined>
0x4cd8cb84   292  movz x16, #0x107
0x4cd8cb88   296  str x0, [x3, x16]
0x4cd8cb8c   300  ldr x0, pc+500 (addr 0x000000004cd8cd80)    ;; object: 0x21004241 <undefined>
0x4cd8cb90   304  movz x16, #0x10f
0x4cd8cb94   308  str x0, [x3, x16]
0x4cd8cb98   312  ldr x0, pc+496 (addr 0x000000004cd8cd88)    ;; object: 0x21004241 <undefined>
0x4cd8cb9c   316  movz x16, #0x117
0x4cd8cba0   320  str x0, [x3, x16]
0x4cd8cba4   324  ldr x0, pc+492 (addr 0x000000004cd8cd90)    ;; object: 0x21004241 <undefined>
0x4cd8cba8   328  movz x16, #0x11f
0x4cd8cbac   332  str x0, [x3, x16]
0x4cd8cbb0   336  ldr x0, pc+488 (addr 0x000000004cd8cd98)    ;; object: 0x21004241 <undefined>
0x4cd8cbb4   340  movz x16, #0x127
0x4cd8cbb8   344  str x0, [x3, x16]
0x4cd8cbbc   348  ldr x0, pc+484 (addr 0x000000004cd8cda0)    ;; object: 0x21004241 <undefined>
0x4cd8cbc0   352  movz x16, #0x12f
0x4cd8cbc4   356  str x0, [x3, x16]
0x4cd8cbc8   360  ldr x0, pc+480 (addr 0x000000004cd8cda8)    ;; object: 0x21004241 <undefined>
0x4cd8cbcc   364  movz x16, #0x137
0x4cd8cbd0   368  str x0, [x3, x16]
0x4cd8cbd4   372  ldr x0, pc+476 (addr 0x000000004cd8cdb0)    ;; object: 0x21004241 <undefined>
0x4cd8cbd8   376  movz x16, #0x13f
0x4cd8cbdc   380  str x0, [x3, x16]
0x4cd8cbe0   384  ldr x0, pc+472 (addr 0x000000004cd8cdb8)    ;; object: 0x21004241 <undefined>
0x4cd8cbe4   388  movz x16, #0x147
0x4cd8cbe8   392  str x0, [x3, x16]
0x4cd8cbec   396  ldr x0, pc+468 (addr 0x000000004cd8cdc0)    ;; object: 0x21004241 <undefined>
0x4cd8cbf0   400  movz x16, #0x14f
0x4cd8cbf4   404  str x0, [x3, x16]
0x4cd8cbf8   408  ldr x0, pc+464 (addr 0x000000004cd8cdc8)    ;; object: 0x21004241 <undefined>
0x4cd8cbfc   412  movz x16, #0x157
0x4cd8cc00   416  str x0, [x3, x16]
0x4cd8cc04   420  ldr x0, pc+460 (addr 0x000000004cd8cdd0)    ;; object: 0x21004241 <undefined>
0x4cd8cc08   424  movz x16, #0x15f
0x4cd8cc0c   428  str x0, [x3, x16]
0x4cd8cc10   432  ldr x0, pc+456 (addr 0x000000004cd8cdd8)    ;; object: 0x21004241 <undefined>
0x4cd8cc14   436  movz x16, #0x167
0x4cd8cc18   440  str x0, [x3, x16]
0x4cd8cc1c   444  mov x0, x3
0x4cd8cc20   448  ret
0x4cd8cc24   452  sub csp, jssp, #0x10 (16)
0x4cd8cc28   456  stp fp, lr, [jssp, #-16]!
0x4cd8cc2c   460  movz fp, #0xa00000000
0x4cd8cc30   464  sub csp, jssp, #0x8 (8)
0x4cd8cc34   468  str fp, [jssp, #-8]!
0x4cd8cc38   472  add fp, jssp, #0x8 (8)
0x4cd8cc3c   476  movz x3, #0x0
0x4cd8cc40   480  mov x16, lr
0x4cd8cc44   484  ldr x17, pc+412 (addr 0x000000004cd8cde0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd8cc48   488  blr x17
0x4cd8cc4c   492  movz x0, #0x17000000000
0x4cd8cc50   496  movz x10, #0x0
0x4cd8cc54   500  sub csp, jssp, #0x10 (16)
0x4cd8cc58   504  stp x10, x0, [jssp, #-16]!
0x4cd8cc5c   508  movz x0, #0x2
0x4cd8cc60   512  movz x1, #0x5b88
0x4cd8cc64   516  movk x1, #0xe2, lsl #16
0x4cd8cc68   520  ldr x16, pc+384 (addr 0x000000004cd8cde8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd8cc6c   524  blr x16
0x4cd8cc70   528  str x0, [jssp, #24]
0x4cd8cc74   532  ldr x16, pc+380 (addr 0x000000004cd8cdf0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd8cc78   536  blr x16
0x4cd8cc7c   540  ldr lr, [jssp, #16]
0x4cd8cc80   544  ldp xzr, fp, [jssp], #24
0x4cd8cc84   548  b #-0x204 (addr 0x4cd8ca80)
0x4cd8cc88   552  58000b7f       constant pool begin (num_const = 91)    ;; constant pool
0x4cd8cc8c   556  d63f03e0       constant
0x4cd8cc90   560  2a806149       constant
0x4cd8cc94   564  00000000       constant
0x4cd8cc98   568  21004519       constant
0x4cd8cc9c   572  00000000       constant
0x4cd8cca0   576  21004241       constant
0x4cd8cca4   580  00000000       constant
0x4cd8cca8   584  21004241       constant
0x4cd8ccac   588  00000000       constant
0x4cd8ccb0   592  21004241       constant
0x4cd8ccb4   596  00000000       constant
0x4cd8ccb8   600  21004241       constant
0x4cd8ccbc   604  00000000       constant
0x4cd8ccc0   608  21004241       constant
0x4cd8ccc4   612  00000000       constant
0x4cd8ccc8   616  21004241       constant
0x4cd8cccc   620  00000000       constant
0x4cd8ccd0   624  21004241       constant
0x4cd8ccd4   628  00000000       constant
0x4cd8ccd8   632  21004241       constant
0x4cd8ccdc   636  00000000       constant
0x4cd8cce0   640  21004241       constant
0x4cd8cce4   644  00000000       constant
0x4cd8cce8   648  21004241       constant
0x4cd8ccec   652  00000000       constant
0x4cd8ccf0   656  21004241       constant
0x4cd8ccf4   660  00000000       constant
0x4cd8ccf8   664  21004241       constant
0x4cd8ccfc   668  00000000       constant
0x4cd8cd00   672  21004241       constant
0x4cd8cd04   676  00000000       constant
0x4cd8cd08   680  21004241       constant
0x4cd8cd0c   684  00000000       constant
0x4cd8cd10   688  21004241       constant
0x4cd8cd14   692  00000000       constant
0x4cd8cd18   696  21004241       constant
0x4cd8cd1c   700  00000000       constant
0x4cd8cd20   704  21004241       constant
0x4cd8cd24   708  00000000       constant
0x4cd8cd28   712  21004241       constant
0x4cd8cd2c   716  00000000       constant
0x4cd8cd30   720  21004241       constant
0x4cd8cd34   724  00000000       constant
0x4cd8cd38   728  21004241       constant
0x4cd8cd3c   732  00000000       constant
0x4cd8cd40   736  21004241       constant
0x4cd8cd44   740  00000000       constant
0x4cd8cd48   744  21004241       constant
0x4cd8cd4c   748  00000000       constant
0x4cd8cd50   752  21004241       constant
0x4cd8cd54   756  00000000       constant
0x4cd8cd58   760  21004241       constant
0x4cd8cd5c   764  00000000       constant
0x4cd8cd60   768  21004241       constant
0x4cd8cd64   772  00000000       constant
0x4cd8cd68   776  21004241       constant
0x4cd8cd6c   780  00000000       constant
0x4cd8cd70   784  21004241       constant
0x4cd8cd74   788  00000000       constant
0x4cd8cd78   792  21004241       constant
0x4cd8cd7c   796  00000000       constant
0x4cd8cd80   800  21004241       constant
0x4cd8cd84   804  00000000       constant
0x4cd8cd88   808  21004241       constant
0x4cd8cd8c   812  00000000       constant
0x4cd8cd90   816  21004241       constant
0x4cd8cd94   820  00000000       constant
0x4cd8cd98   824  21004241       constant
0x4cd8cd9c   828  00000000       constant
0x4cd8cda0   832  21004241       constant
0x4cd8cda4   836  00000000       constant
0x4cd8cda8   840  21004241       constant
0x4cd8cdac   844  00000000       constant
0x4cd8cdb0   848  21004241       constant
0x4cd8cdb4   852  00000000       constant
0x4cd8cdb8   856  21004241       constant
0x4cd8cdbc   860  00000000       constant
0x4cd8cdc0   864  21004241       constant
0x4cd8cdc4   868  00000000       constant
0x4cd8cdc8   872  21004241       constant
0x4cd8cdcc   876  00000000       constant
0x4cd8cdd0   880  21004241       constant
0x4cd8cdd4   884  00000000       constant
0x4cd8cdd8   888  21004241       constant
0x4cd8cddc   892  00000000       constant
0x4cd8cde0   896  4cd06820       constant
0x4cd8cde4   900  00000000       constant
0x4cd8cde8   904  4cd06260       constant
0x4cd8cdec   908  00000000       constant
0x4cd8cdf0   912  4cd068e0       constant
0x4cd8cdf4   916  00000000       constant


Safepoints (size = 21)
0x4cd8cc70   528  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 51)
0x4cd8ca80  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd8ca98  embedded object  (0x21004519 <the hole>)
0x4cd8caa8  embedded object  (0x21004241 <undefined>)
0x4cd8cab0  embedded object  (0x21004241 <undefined>)
0x4cd8cab8  embedded object  (0x21004241 <undefined>)
0x4cd8cac0  embedded object  (0x21004241 <undefined>)
0x4cd8cac8  embedded object  (0x21004241 <undefined>)
0x4cd8cad0  embedded object  (0x21004241 <undefined>)
0x4cd8cad8  embedded object  (0x21004241 <undefined>)
0x4cd8cae0  embedded object  (0x21004241 <undefined>)
0x4cd8cae8  embedded object  (0x21004241 <undefined>)
0x4cd8caf0  embedded object  (0x21004241 <undefined>)
0x4cd8caf8  embedded object  (0x21004241 <undefined>)
0x4cd8cb00  embedded object  (0x21004241 <undefined>)
0x4cd8cb08  embedded object  (0x21004241 <undefined>)
0x4cd8cb10  embedded object  (0x21004241 <undefined>)
0x4cd8cb18  embedded object  (0x21004241 <undefined>)
0x4cd8cb20  embedded object  (0x21004241 <undefined>)
0x4cd8cb28  embedded object  (0x21004241 <undefined>)
0x4cd8cb30  embedded object  (0x21004241 <undefined>)
0x4cd8cb38  embedded object  (0x21004241 <undefined>)
0x4cd8cb40  embedded object  (0x21004241 <undefined>)
0x4cd8cb48  embedded object  (0x21004241 <undefined>)
0x4cd8cb50  embedded object  (0x21004241 <undefined>)
0x4cd8cb58  embedded object  (0x21004241 <undefined>)
0x4cd8cb60  embedded object  (0x21004241 <undefined>)
0x4cd8cb68  embedded object  (0x21004241 <undefined>)
0x4cd8cb70  embedded object  (0x21004241 <undefined>)
0x4cd8cb78  embedded object  (0x21004241 <undefined>)
0x4cd8cb80  embedded object  (0x21004241 <undefined>)
0x4cd8cb8c  embedded object  (0x21004241 <undefined>)
0x4cd8cb98  embedded object  (0x21004241 <undefined>)
0x4cd8cba4  embedded object  (0x21004241 <undefined>)
0x4cd8cbb0  embedded object  (0x21004241 <undefined>)
0x4cd8cbbc  embedded object  (0x21004241 <undefined>)
0x4cd8cbc8  embedded object  (0x21004241 <undefined>)
0x4cd8cbd4  embedded object  (0x21004241 <undefined>)
0x4cd8cbe0  embedded object  (0x21004241 <undefined>)
0x4cd8cbec  embedded object  (0x21004241 <undefined>)
0x4cd8cbf8  embedded object  (0x21004241 <undefined>)
0x4cd8cc04  embedded object  (0x21004241 <undefined>)
0x4cd8cc10  embedded object  (0x21004241 <undefined>)
0x4cd8cc44  code target (STUB)  (0x4cd06820)
0x4cd8cc68  code target (STUB)  (0x4cd06260)
0x4cd8cc74  code target (STUB)  (0x4cd068e0)
0x4cd8cc88  constant pool (size 368)

--- End code ---
kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 941)
0x4cd8ca60     0  movz x2, #0xd2c0
0x4cd8ca64     4  movk x2, #0x166d, lsl #16
0x4cd8ca68     8  ldp x3, x0, [x2]
0x4cd8ca6c    12  adds x16, x3, #0x170 (368)
0x4cd8ca70    16  ccmp x16, x0, #nzCv, lo
0x4cd8ca74    20  b.hi #+0x1b0 (addr 0x4cd8cc24)
0x4cd8ca78    24  str x16, [x2]
0x4cd8ca7c    28  orr x3, x3, #0x1
0x4cd8ca80    32  ldr x0, pc+528 (addr 0x000000004cd8cc90)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd8ca84    36  stur x0, [x3, #-1]
0x4cd8ca88    40  movz x0, #0x2c00000000
0x4cd8ca8c    44  stur x0, [x3, #7]
0x4cd8ca90    48  stur x1, [x3, #15]
0x4cd8ca94    52  stur cp, [x3, #23]
0x4cd8ca98    56  ldr x0, pc+512 (addr 0x000000004cd8cc98)    ;; object: 0x21004519 <the hole>
0x4cd8ca9c    60  stur x0, [x3, #31]
0x4cd8caa0    64  ldur x0, [cp, #39]
0x4cd8caa4    68  stur x0, [x3, #39]
0x4cd8caa8    72  ldr x0, pc+504 (addr 0x000000004cd8cca0)    ;; object: 0x21004241 <undefined>
0x4cd8caac    76  stur x0, [x3, #47]
0x4cd8cab0    80  ldr x0, pc+504 (addr 0x000000004cd8cca8)    ;; object: 0x21004241 <undefined>
0x4cd8cab4    84  stur x0, [x3, #55]
0x4cd8cab8    88  ldr x0, pc+504 (addr 0x000000004cd8ccb0)    ;; object: 0x21004241 <undefined>
0x4cd8cabc    92  stur x0, [x3, #63]
0x4cd8cac0    96  ldr x0, pc+504 (addr 0x000000004cd8ccb8)    ;; object: 0x21004241 <undefined>
0x4cd8cac4   100  stur x0, [x3, #71]
0x4cd8cac8   104  ldr x0, pc+504 (addr 0x000000004cd8ccc0)    ;; object: 0x21004241 <undefined>
0x4cd8cacc   108  stur x0, [x3, #79]
0x4cd8cad0   112  ldr x0, pc+504 (addr 0x000000004cd8ccc8)    ;; object: 0x21004241 <undefined>
0x4cd8cad4   116  stur x0, [x3, #87]
0x4cd8cad8   120  ldr x0, pc+504 (addr 0x000000004cd8ccd0)    ;; object: 0x21004241 <undefined>
0x4cd8cadc   124  stur x0, [x3, #95]
0x4cd8cae0   128  ldr x0, pc+504 (addr 0x000000004cd8ccd8)    ;; object: 0x21004241 <undefined>
0x4cd8cae4   132  stur x0, [x3, #103]
0x4cd8cae8   136  ldr x0, pc+504 (addr 0x000000004cd8cce0)    ;; object: 0x21004241 <undefined>
0x4cd8caec   140  stur x0, [x3, #111]
0x4cd8caf0   144  ldr x0, pc+504 (addr 0x000000004cd8cce8)    ;; object: 0x21004241 <undefined>
0x4cd8caf4   148  stur x0, [x3, #119]
0x4cd8caf8   152  ldr x0, pc+504 (addr 0x000000004cd8ccf0)    ;; object: 0x21004241 <undefined>
0x4cd8cafc   156  stur x0, [x3, #127]
0x4cd8cb00   160  ldr x0, pc+504 (addr 0x000000004cd8ccf8)    ;; object: 0x21004241 <undefined>
0x4cd8cb04   164  stur x0, [x3, #135]
0x4cd8cb08   168  ldr x0, pc+504 (addr 0x000000004cd8cd00)    ;; object: 0x21004241 <undefined>
0x4cd8cb0c   172  stur x0, [x3, #143]
0x4cd8cb10   176  ldr x0, pc+504 (addr 0x000000004cd8cd08)    ;; object: 0x21004241 <undefined>
0x4cd8cb14   180  stur x0, [x3, #151]
0x4cd8cb18   184  ldr x0, pc+504 (addr 0x000000004cd8cd10)    ;; object: 0x21004241 <undefined>
0x4cd8cb1c   188  stur x0, [x3, #159]
0x4cd8cb20   192  ldr x0, pc+504 (addr 0x000000004cd8cd18)    ;; object: 0x21004241 <undefined>
0x4cd8cb24   196  stur x0, [x3, #167]
0x4cd8cb28   200  ldr x0, pc+504 (addr 0x000000004cd8cd20)    ;; object: 0x21004241 <undefined>
0x4cd8cb2c   204  stur x0, [x3, #175]
0x4cd8cb30   208  ldr x0, pc+504 (addr 0x000000004cd8cd28)    ;; object: 0x21004241 <undefined>
0x4cd8cb34   212  stur x0, [x3, #183]
0x4cd8cb38   216  ldr x0, pc+504 (addr 0x000000004cd8cd30)    ;; object: 0x21004241 <undefined>
0x4cd8cb3c   220  stur x0, [x3, #191]
0x4cd8cb40   224  ldr x0, pc+504 (addr 0x000000004cd8cd38)    ;; object: 0x21004241 <undefined>
0x4cd8cb44   228  stur x0, [x3, #199]
0x4cd8cb48   232  ldr x0, pc+504 (addr 0x000000004cd8cd40)    ;; object: 0x21004241 <undefined>
0x4cd8cb4c   236  stur x0, [x3, #207]
0x4cd8cb50   240  ldr x0, pc+504 (addr 0x000000004cd8cd48)    ;; object: 0x21004241 <undefined>
0x4cd8cb54   244  stur x0, [x3, #215]
0x4cd8cb58   248  ldr x0, pc+504 (addr 0x000000004cd8cd50)    ;; object: 0x21004241 <undefined>
0x4cd8cb5c   252  stur x0, [x3, #223]
0x4cd8cb60   256  ldr x0, pc+504 (addr 0x000000004cd8cd58)    ;; object: 0x21004241 <undefined>
0x4cd8cb64   260  stur x0, [x3, #231]
0x4cd8cb68   264  ldr x0, pc+504 (addr 0x000000004cd8cd60)    ;; object: 0x21004241 <undefined>
0x4cd8cb6c   268  stur x0, [x3, #239]
0x4cd8cb70   272  ldr x0, pc+504 (addr 0x000000004cd8cd68)    ;; object: 0x21004241 <undefined>
0x4cd8cb74   276  stur x0, [x3, #247]
0x4cd8cb78   280  ldr x0, pc+504 (addr 0x000000004cd8cd70)    ;; object: 0x21004241 <undefined>
0x4cd8cb7c   284  stur x0, [x3, #255]
0x4cd8cb80   288  ldr x0, pc+504 (addr 0x000000004cd8cd78)    ;; object: 0x21004241 <undefined>
0x4cd8cb84   292  movz x16, #0x107
0x4cd8cb88   296  str x0, [x3, x16]
0x4cd8cb8c   300  ldr x0, pc+500 (addr 0x000000004cd8cd80)    ;; object: 0x21004241 <undefined>
0x4cd8cb90   304  movz x16, #0x10f
0x4cd8cb94   308  str x0, [x3, x16]
0x4cd8cb98   312  ldr x0, pc+496 (addr 0x000000004cd8cd88)    ;; object: 0x21004241 <undefined>
0x4cd8cb9c   316  movz x16, #0x117
0x4cd8cba0   320  str x0, [x3, x16]
0x4cd8cba4   324  ldr x0, pc+492 (addr 0x000000004cd8cd90)    ;; object: 0x21004241 <undefined>
0x4cd8cba8   328  movz x16, #0x11f
0x4cd8cbac   332  str x0, [x3, x16]
0x4cd8cbb0   336  ldr x0, pc+488 (addr 0x000000004cd8cd98)    ;; object: 0x21004241 <undefined>
0x4cd8cbb4   340  movz x16, #0x127
0x4cd8cbb8   344  str x0, [x3, x16]
0x4cd8cbbc   348  ldr x0, pc+484 (addr 0x000000004cd8cda0)    ;; object: 0x21004241 <undefined>
0x4cd8cbc0   352  movz x16, #0x12f
0x4cd8cbc4   356  str x0, [x3, x16]
0x4cd8cbc8   360  ldr x0, pc+480 (addr 0x000000004cd8cda8)    ;; object: 0x21004241 <undefined>
0x4cd8cbcc   364  movz x16, #0x137
0x4cd8cbd0   368  str x0, [x3, x16]
0x4cd8cbd4   372  ldr x0, pc+476 (addr 0x000000004cd8cdb0)    ;; object: 0x21004241 <undefined>
0x4cd8cbd8   376  movz x16, #0x13f
0x4cd8cbdc   380  str x0, [x3, x16]
0x4cd8cbe0   384  ldr x0, pc+472 (addr 0x000000004cd8cdb8)    ;; object: 0x21004241 <undefined>
0x4cd8cbe4   388  movz x16, #0x147
0x4cd8cbe8   392  str x0, [x3, x16]
0x4cd8cbec   396  ldr x0, pc+468 (addr 0x000000004cd8cdc0)    ;; object: 0x21004241 <undefined>
0x4cd8cbf0   400  movz x16, #0x14f
0x4cd8cbf4   404  str x0, [x3, x16]
0x4cd8cbf8   408  ldr x0, pc+464 (addr 0x000000004cd8cdc8)    ;; object: 0x21004241 <undefined>
0x4cd8cbfc   412  movz x16, #0x157
0x4cd8cc00   416  str x0, [x3, x16]
0x4cd8cc04   420  ldr x0, pc+460 (addr 0x000000004cd8cdd0)    ;; object: 0x21004241 <undefined>
0x4cd8cc08   424  movz x16, #0x15f
0x4cd8cc0c   428  str x0, [x3, x16]
0x4cd8cc10   432  ldr x0, pc+456 (addr 0x000000004cd8cdd8)    ;; object: 0x21004241 <undefined>
0x4cd8cc14   436  movz x16, #0x167
0x4cd8cc18   440  str x0, [x3, x16]
0x4cd8cc1c   444  mov x0, x3
0x4cd8cc20   448  ret
0x4cd8cc24   452  sub csp, jssp, #0x10 (16)
0x4cd8cc28   456  stp fp, lr, [jssp, #-16]!
0x4cd8cc2c   460  movz fp, #0xa00000000
0x4cd8cc30   464  sub csp, jssp, #0x8 (8)
0x4cd8cc34   468  str fp, [jssp, #-8]!
0x4cd8cc38   472  add fp, jssp, #0x8 (8)
0x4cd8cc3c   476  movz x3, #0x0
0x4cd8cc40   480  mov x16, lr
0x4cd8cc44   484  ldr x17, pc+412 (addr 0x000000004cd8cde0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd8cc48   488  blr x17
0x4cd8cc4c   492  movz x0, #0x17000000000
0x4cd8cc50   496  movz x10, #0x0
0x4cd8cc54   500  sub csp, jssp, #0x10 (16)
0x4cd8cc58   504  stp x10, x0, [jssp, #-16]!
0x4cd8cc5c   508  movz x0, #0x2
0x4cd8cc60   512  movz x1, #0x5b88
0x4cd8cc64   516  movk x1, #0xe2, lsl #16
0x4cd8cc68   520  ldr x16, pc+384 (addr 0x000000004cd8cde8)    ;; code: STUB, CEntryStub, minor: 5
0x4cd8cc6c   524  blr x16
0x4cd8cc70   528  str x0, [jssp, #24]
0x4cd8cc74   532  ldr x16, pc+380 (addr 0x000000004cd8cdf0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd8cc78   536  blr x16
0x4cd8cc7c   540  ldr lr, [jssp, #16]
0x4cd8cc80   544  ldp xzr, fp, [jssp], #24
0x4cd8cc84   548  b #-0x204 (addr 0x4cd8ca80)
0x4cd8cc88   552  58000b7f       constant pool begin (num_const = 91)    ;; constant pool
0x4cd8cc8c   556  d63f03e0       constant
0x4cd8cc90   560  2a806149       constant
0x4cd8cc94   564  00000000       constant
0x4cd8cc98   568  21004519       constant
0x4cd8cc9c   572  00000000       constant
0x4cd8cca0   576  21004241       constant
0x4cd8cca4   580  00000000       constant
0x4cd8cca8   584  21004241       constant
0x4cd8ccac   588  00000000       constant
0x4cd8ccb0   592  21004241       constant
0x4cd8ccb4   596  00000000       constant
0x4cd8ccb8   600  21004241       constant
0x4cd8ccbc   604  00000000       constant
0x4cd8ccc0   608  21004241       constant
0x4cd8ccc4   612  00000000       constant
0x4cd8ccc8   616  21004241       constant
0x4cd8cccc   620  00000000       constant
0x4cd8ccd0   624  21004241       constant
0x4cd8ccd4   628  00000000       constant
0x4cd8ccd8   632  21004241       constant
0x4cd8ccdc   636  00000000       constant
0x4cd8cce0   640  21004241       constant
0x4cd8cce4   644  00000000       constant
0x4cd8cce8   648  21004241       constant
0x4cd8ccec   652  00000000       constant
0x4cd8ccf0   656  21004241       constant
0x4cd8ccf4   660  00000000       constant
0x4cd8ccf8   664  21004241       constant
0x4cd8ccfc   668  00000000       constant
0x4cd8cd00   672  21004241       constant
0x4cd8cd04   676  00000000       constant
0x4cd8cd08   680  21004241       constant
0x4cd8cd0c   684  00000000       constant
0x4cd8cd10   688  21004241       constant
0x4cd8cd14   692  00000000       constant
0x4cd8cd18   696  21004241       constant
0x4cd8cd1c   700  00000000       constant
0x4cd8cd20   704  21004241       constant
0x4cd8cd24   708  00000000       constant
0x4cd8cd28   712  21004241       constant
0x4cd8cd2c   716  00000000       constant
0x4cd8cd30   720  21004241       constant
0x4cd8cd34   724  00000000       constant
0x4cd8cd38   728  21004241       constant
0x4cd8cd3c   732  00000000       constant
0x4cd8cd40   736  21004241       constant
0x4cd8cd44   740  00000000       constant
0x4cd8cd48   744  21004241       constant
0x4cd8cd4c   748  00000000       constant
0x4cd8cd50   752  21004241       constant
0x4cd8cd54   756  00000000       constant
0x4cd8cd58   760  21004241       constant
0x4cd8cd5c   764  00000000       constant
0x4cd8cd60   768  21004241       constant
0x4cd8cd64   772  00000000       constant
0x4cd8cd68   776  21004241       constant
0x4cd8cd6c   780  00000000       constant
0x4cd8cd70   784  21004241       constant
0x4cd8cd74   788  00000000       constant
0x4cd8cd78   792  21004241       constant
0x4cd8cd7c   796  00000000       constant
0x4cd8cd80   800  21004241       constant
0x4cd8cd84   804  00000000       constant
0x4cd8cd88   808  21004241       constant
0x4cd8cd8c   812  00000000       constant
0x4cd8cd90   816  21004241       constant
0x4cd8cd94   820  00000000       constant
0x4cd8cd98   824  21004241       constant
0x4cd8cd9c   828  00000000       constant
0x4cd8cda0   832  21004241       constant
0x4cd8cda4   836  00000000       constant
0x4cd8cda8   840  21004241       constant
0x4cd8cdac   844  00000000       constant
0x4cd8cdb0   848  21004241       constant
0x4cd8cdb4   852  00000000       constant
0x4cd8cdb8   856  21004241       constant
0x4cd8cdbc   860  00000000       constant
0x4cd8cdc0   864  21004241       constant
0x4cd8cdc4   868  00000000       constant
0x4cd8cdc8   872  21004241       constant
0x4cd8cdcc   876  00000000       constant
0x4cd8cdd0   880  21004241       constant
0x4cd8cdd4   884  00000000       constant
0x4cd8cdd8   888  21004241       constant
0x4cd8cddc   892  00000000       constant
0x4cd8cde0   896  4cd06820       constant
0x4cd8cde4   900  00000000       constant
0x4cd8cde8   904  4cd06260       constant
0x4cd8cdec   908  00000000       constant
0x4cd8cdf0   912  4cd068e0       constant
0x4cd8cdf4   916  00000000       constant


Safepoints (size = 21)
0x4cd8cc70   528  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 51)
0x4cd8ca80  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd8ca98  embedded object  (0x21004519 <the hole>)
0x4cd8caa8  embedded object  (0x21004241 <undefined>)
0x4cd8cab0  embedded object  (0x21004241 <undefined>)
0x4cd8cab8  embedded object  (0x21004241 <undefined>)
0x4cd8cac0  embedded object  (0x21004241 <undefined>)
0x4cd8cac8  embedded object  (0x21004241 <undefined>)
0x4cd8cad0  embedded object  (0x21004241 <undefined>)
0x4cd8cad8  embedded object  (0x21004241 <undefined>)
0x4cd8cae0  embedded object  (0x21004241 <undefined>)
0x4cd8cae8  embedded object  (0x21004241 <undefined>)
0x4cd8caf0  embedded object  (0x21004241 <undefined>)
0x4cd8caf8  embedded object  (0x21004241 <undefined>)
0x4cd8cb00  embedded object  (0x21004241 <undefined>)
0x4cd8cb08  embedded object  (0x21004241 <undefined>)
0x4cd8cb10  embedded object  (0x21004241 <undefined>)
0x4cd8cb18  embedded object  (0x21004241 <undefined>)
0x4cd8cb20  embedded object  (0x21004241 <undefined>)
0x4cd8cb28  embedded object  (0x21004241 <undefined>)
0x4cd8cb30  embedded object  (0x21004241 <undefined>)
0x4cd8cb38  embedded object  (0x21004241 <undefined>)
0x4cd8cb40  embedded object  (0x21004241 <undefined>)
0x4cd8cb48  embedded object  (0x21004241 <undefined>)
0x4cd8cb50  embedded object  (0x21004241 <undefined>)
0x4cd8cb58  embedded object  (0x21004241 <undefined>)
0x4cd8cb60  embedded object  (0x21004241 <undefined>)
0x4cd8cb68  embedded object  (0x21004241 <undefined>)
0x4cd8cb70  embedded object  (0x21004241 <undefined>)
0x4cd8cb78  embedded object  (0x21004241 <undefined>)
0x4cd8cb80  embedded object  (0x21004241 <undefined>)
0x4cd8cb8c  embedded object  (0x21004241 <undefined>)
0x4cd8cb98  embedded object  (0x21004241 <undefined>)
0x4cd8cba4  embedded object  (0x21004241 <undefined>)
0x4cd8cbb0  embedded object  (0x21004241 <undefined>)
0x4cd8cbbc  embedded object  (0x21004241 <undefined>)
0x4cd8cbc8  embedded object  (0x21004241 <undefined>)
0x4cd8cbd4  embedded object  (0x21004241 <undefined>)
0x4cd8cbe0  embedded object  (0x21004241 <undefined>)
0x4cd8cbec  embedded object  (0x21004241 <undefined>)
0x4cd8cbf8  embedded object  (0x21004241 <undefined>)
0x4cd8cc04  embedded object  (0x21004241 <undefined>)
0x4cd8cc10  embedded object  (0x21004241 <undefined>)
0x4cd8cc44  code target (STUB)  (0x4cd06820)
0x4cd8cc68  code target (STUB)  (0x4cd06260)
0x4cd8cc74  code target (STUB)  (0x4cd068e0)
0x4cd8cc88  constant pool (size 368)


kind = HANDLER
major_key = <NoCache>Stub
name = runInThisContext
compiler = unknown
Instructions (size = 120)
0x4cd8f420     0  sub csp, jssp, #0x8 (8)
0x4cd8f424     4  str x3, [jssp, #-8]!
0x4cd8f428     8  sub csp, jssp, #0x8 (8)
0x4cd8f42c    12  str x0, [jssp, #-8]!
0x4cd8f430    16  ldr x0, pc+72 (addr 0x000000004cd8f478)    ;; object: 0x210cde09 Cell for 0
0x4cd8f434    20  ldur x0, [x0, #7]
0x4cd8f438    24  cmp x0, #0x0 (0)
0x4cd8f43c    28  b.ne #+0x14 (addr 0x4cd8f450)
0x4cd8f440    32  ldr x3, pc+64 (addr 0x000000004cd8f480)    ;; object: 0x210cde19 WeakCell for 0x2339cef9 <an Object with map 0x2a81a571>
0x4cd8f444    36  ldur x3, [x3, #7]
0x4cd8f448    40  tbz w3, #0, #+0x8 (addr 0x4cd8f450)
0x4cd8f44c    44  b #+0x14 (addr 0x4cd8f460)
0x4cd8f450    48  ldr x0, [jssp], #8
0x4cd8f454    52  ldr x3, [jssp], #8
0x4cd8f458    56  ldr x16, pc+48 (addr 0x000000004cd8f488)    ;; code: BUILTIN
0x4cd8f45c    60  br x16
0x4cd8f460    64  add jssp, jssp, #0x10 (16)
0x4cd8f464    68  mov x1, x3
0x4cd8f468    72  ldr x16, pc+40 (addr 0x000000004cd8f490)    ;; code: HANDLER, LoadConstantStub, minor: 1
0x4cd8f46c    76  br x16
0x4cd8f470    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cd8f474    84  d63f03e0       constant
0x4cd8f478    88  210cde09       constant
0x4cd8f47c    92  00000000       constant
0x4cd8f480    96  210cde19       constant
0x4cd8f484   100  00000000       constant
0x4cd8f488   104  4cd222e0       constant
0x4cd8f48c   108  00000000       constant
0x4cd8f490   112  4cd43300       constant
0x4cd8f494   116  00000000       constant


RelocInfo (size = 10)
0x4cd8f430  embedded object  (0x210cde09 Cell for 0)
0x4cd8f440  embedded object  (0x210cde19 WeakCell for 0x2339cef9 <an Object with map 0x2a81a571>)
0x4cd8f458  code target (BUILTIN)  (0x4cd222e0)
0x4cd8f468  code target (HANDLER)  (0x4cd43300)
0x4cd8f470  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = buffer
compiler = unknown
Instructions (size = 184)
0x4cd8f500     0  sub csp, jssp, #0x8 (8)
0x4cd8f504     4  str x3, [jssp, #-8]!
0x4cd8f508     8  sub csp, jssp, #0x8 (8)
0x4cd8f50c    12  str x4, [jssp, #-8]!
0x4cd8f510    16  ldr x3, pc+112 (addr 0x000000004cd8f580)    ;; object: 0x21063e59 Cell for 0
0x4cd8f514    20  ldur x3, [x3, #7]
0x4cd8f518    24  cmp x3, #0x0 (0)
0x4cd8f51c    28  b.ne #+0x44 (addr 0x4cd8f560)
0x4cd8f520    32  tbz w0, #0, #+0x40 (addr 0x4cd8f560)
0x4cd8f524    36  ldur x3, [x0, #-1]
0x4cd8f528    40  ldr x4, pc+96 (addr 0x000000004cd8f588)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd8f52c    44  ldur x4, [x4, #7]
0x4cd8f530    48  cmp x3, x4
0x4cd8f534    52  b.ne #+0x2c (addr 0x4cd8f560)
0x4cd8f538    56  ldr x5, pc+88 (addr 0x000000004cd8f590)    ;; object: 0x210cf261 WeakCell for 0x2a81ca91 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd8f53c    60  ldur x5, [x5, #7]
0x4cd8f540    64  tbz w5, #0, #+0x20 (addr 0x4cd8f560)
0x4cd8f544    68  ldursw x4, [x5, #15]
0x4cd8f548    72  tbnz w4, #23, #+0x18 (addr 0x4cd8f560)
0x4cd8f54c    76  ldr x4, [jssp], #8
0x4cd8f550    80  ldr x3, [jssp], #8
0x4cd8f554    84  ldr x2, pc+68 (addr 0x000000004cd8f598)    ;; object: 0x210780a9 <String[6]: buffer>
0x4cd8f558    88  ldr x16, pc+72 (addr 0x000000004cd8f5a0)    ;; code: HANDLER, StoreTransitionStub, minor: 198661
0x4cd8f55c    92  br x16
0x4cd8f560    96  ldr x2, pc+72 (addr 0x000000004cd8f5a8)    ;; object: 0x210780a9 <String[6]: buffer>
0x4cd8f564   100  ldr x4, [jssp], #8
0x4cd8f568   104  ldr x3, [jssp], #8
0x4cd8f56c   108  ldr x16, pc+68 (addr 0x000000004cd8f5b0)    ;; code: BUILTIN
0x4cd8f570   112  br x16
0x4cd8f574   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd8f578   120  d63f03e0       constant
0x4cd8f57c   124  d503201f       constant
0x4cd8f580   128  21063e59       constant
0x4cd8f584   132  00000000       constant
0x4cd8f588   136  210c22b1       constant
0x4cd8f58c   140  00000000       constant
0x4cd8f590   144  210cf261       constant
0x4cd8f594   148  00000000       constant
0x4cd8f598   152  210780a9       constant
0x4cd8f59c   156  00000000       constant
0x4cd8f5a0   160  4cd8bdc0       constant
0x4cd8f5a4   164  00000000       constant
0x4cd8f5a8   168  210780a9       constant
0x4cd8f5ac   172  00000000       constant
0x4cd8f5b0   176  4cd22420       constant
0x4cd8f5b4   180  00000000       constant


RelocInfo (size = 13)
0x4cd8f510  embedded object  (0x21063e59 Cell for 0)
0x4cd8f528  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd8f538  embedded object  (0x210cf261 WeakCell for 0x2a81ca91 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd8f554  embedded object  (0x210780a9 <String[6]: buffer>)
0x4cd8f558  code target (HANDLER)  (0x4cd8bdc0)
0x4cd8f560  embedded object  (0x210780a9 <String[6]: buffer>)
0x4cd8f56c  code target (BUILTIN)  (0x4cd22420)
0x4cd8f574  constant pool (size 68)

--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 861)
0x4cd8f620     0  movz x2, #0xd2c0
0x4cd8f624     4  movk x2, #0x166d, lsl #16
0x4cd8f628     8  ldp x3, x0, [x2]
0x4cd8f62c    12  adds x16, x3, #0x150 (336)
0x4cd8f630    16  ccmp x16, x0, #nzCv, lo
0x4cd8f634    20  b.hi #+0x180 (addr 0x4cd8f7b4)
0x4cd8f638    24  str x16, [x2]
0x4cd8f63c    28  orr x3, x3, #0x1
0x4cd8f640    32  ldr x0, pc+480 (addr 0x000000004cd8f820)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd8f644    36  stur x0, [x3, #-1]
0x4cd8f648    40  movz x0, #0x2800000000
0x4cd8f64c    44  stur x0, [x3, #7]
0x4cd8f650    48  stur x1, [x3, #15]
0x4cd8f654    52  stur cp, [x3, #23]
0x4cd8f658    56  ldr x0, pc+464 (addr 0x000000004cd8f828)    ;; object: 0x21004519 <the hole>
0x4cd8f65c    60  stur x0, [x3, #31]
0x4cd8f660    64  ldur x0, [cp, #39]
0x4cd8f664    68  stur x0, [x3, #39]
0x4cd8f668    72  ldr x0, pc+456 (addr 0x000000004cd8f830)    ;; object: 0x21004241 <undefined>
0x4cd8f66c    76  stur x0, [x3, #47]
0x4cd8f670    80  ldr x0, pc+456 (addr 0x000000004cd8f838)    ;; object: 0x21004241 <undefined>
0x4cd8f674    84  stur x0, [x3, #55]
0x4cd8f678    88  ldr x0, pc+456 (addr 0x000000004cd8f840)    ;; object: 0x21004241 <undefined>
0x4cd8f67c    92  stur x0, [x3, #63]
0x4cd8f680    96  ldr x0, pc+456 (addr 0x000000004cd8f848)    ;; object: 0x21004241 <undefined>
0x4cd8f684   100  stur x0, [x3, #71]
0x4cd8f688   104  ldr x0, pc+456 (addr 0x000000004cd8f850)    ;; object: 0x21004241 <undefined>
0x4cd8f68c   108  stur x0, [x3, #79]
0x4cd8f690   112  ldr x0, pc+456 (addr 0x000000004cd8f858)    ;; object: 0x21004241 <undefined>
0x4cd8f694   116  stur x0, [x3, #87]
0x4cd8f698   120  ldr x0, pc+456 (addr 0x000000004cd8f860)    ;; object: 0x21004241 <undefined>
0x4cd8f69c   124  stur x0, [x3, #95]
0x4cd8f6a0   128  ldr x0, pc+456 (addr 0x000000004cd8f868)    ;; object: 0x21004241 <undefined>
0x4cd8f6a4   132  stur x0, [x3, #103]
0x4cd8f6a8   136  ldr x0, pc+456 (addr 0x000000004cd8f870)    ;; object: 0x21004241 <undefined>
0x4cd8f6ac   140  stur x0, [x3, #111]
0x4cd8f6b0   144  ldr x0, pc+456 (addr 0x000000004cd8f878)    ;; object: 0x21004241 <undefined>
0x4cd8f6b4   148  stur x0, [x3, #119]
0x4cd8f6b8   152  ldr x0, pc+456 (addr 0x000000004cd8f880)    ;; object: 0x21004241 <undefined>
0x4cd8f6bc   156  stur x0, [x3, #127]
0x4cd8f6c0   160  ldr x0, pc+456 (addr 0x000000004cd8f888)    ;; object: 0x21004241 <undefined>
0x4cd8f6c4   164  stur x0, [x3, #135]
0x4cd8f6c8   168  ldr x0, pc+456 (addr 0x000000004cd8f890)    ;; object: 0x21004241 <undefined>
0x4cd8f6cc   172  stur x0, [x3, #143]
0x4cd8f6d0   176  ldr x0, pc+456 (addr 0x000000004cd8f898)    ;; object: 0x21004241 <undefined>
0x4cd8f6d4   180  stur x0, [x3, #151]
0x4cd8f6d8   184  ldr x0, pc+456 (addr 0x000000004cd8f8a0)    ;; object: 0x21004241 <undefined>
0x4cd8f6dc   188  stur x0, [x3, #159]
0x4cd8f6e0   192  ldr x0, pc+456 (addr 0x000000004cd8f8a8)    ;; object: 0x21004241 <undefined>
0x4cd8f6e4   196  stur x0, [x3, #167]
0x4cd8f6e8   200  ldr x0, pc+456 (addr 0x000000004cd8f8b0)    ;; object: 0x21004241 <undefined>
0x4cd8f6ec   204  stur x0, [x3, #175]
0x4cd8f6f0   208  ldr x0, pc+456 (addr 0x000000004cd8f8b8)    ;; object: 0x21004241 <undefined>
0x4cd8f6f4   212  stur x0, [x3, #183]
0x4cd8f6f8   216  ldr x0, pc+456 (addr 0x000000004cd8f8c0)    ;; object: 0x21004241 <undefined>
0x4cd8f6fc   220  stur x0, [x3, #191]
0x4cd8f700   224  ldr x0, pc+456 (addr 0x000000004cd8f8c8)    ;; object: 0x21004241 <undefined>
0x4cd8f704   228  stur x0, [x3, #199]
0x4cd8f708   232  ldr x0, pc+456 (addr 0x000000004cd8f8d0)    ;; object: 0x21004241 <undefined>
0x4cd8f70c   236  stur x0, [x3, #207]
0x4cd8f710   240  ldr x0, pc+456 (addr 0x000000004cd8f8d8)    ;; object: 0x21004241 <undefined>
0x4cd8f714   244  stur x0, [x3, #215]
0x4cd8f718   248  ldr x0, pc+456 (addr 0x000000004cd8f8e0)    ;; object: 0x21004241 <undefined>
0x4cd8f71c   252  stur x0, [x3, #223]
0x4cd8f720   256  ldr x0, pc+456 (addr 0x000000004cd8f8e8)    ;; object: 0x21004241 <undefined>
0x4cd8f724   260  stur x0, [x3, #231]
0x4cd8f728   264  ldr x0, pc+456 (addr 0x000000004cd8f8f0)    ;; object: 0x21004241 <undefined>
0x4cd8f72c   268  stur x0, [x3, #239]
0x4cd8f730   272  ldr x0, pc+456 (addr 0x000000004cd8f8f8)    ;; object: 0x21004241 <undefined>
0x4cd8f734   276  stur x0, [x3, #247]
0x4cd8f738   280  ldr x0, pc+456 (addr 0x000000004cd8f900)    ;; object: 0x21004241 <undefined>
0x4cd8f73c   284  stur x0, [x3, #255]
0x4cd8f740   288  ldr x0, pc+456 (addr 0x000000004cd8f908)    ;; object: 0x21004241 <undefined>
0x4cd8f744   292  movz x16, #0x107
0x4cd8f748   296  str x0, [x3, x16]
0x4cd8f74c   300  ldr x0, pc+452 (addr 0x000000004cd8f910)    ;; object: 0x21004241 <undefined>
0x4cd8f750   304  movz x16, #0x10f
0x4cd8f754   308  str x0, [x3, x16]
0x4cd8f758   312  ldr x0, pc+448 (addr 0x000000004cd8f918)    ;; object: 0x21004241 <undefined>
0x4cd8f75c   316  movz x16, #0x117
0x4cd8f760   320  str x0, [x3, x16]
0x4cd8f764   324  ldr x0, pc+444 (addr 0x000000004cd8f920)    ;; object: 0x21004241 <undefined>
0x4cd8f768   328  movz x16, #0x11f
0x4cd8f76c   332  str x0, [x3, x16]
0x4cd8f770   336  ldr x0, pc+440 (addr 0x000000004cd8f928)    ;; object: 0x21004241 <undefined>
0x4cd8f774   340  movz x16, #0x127
0x4cd8f778   344  str x0, [x3, x16]
0x4cd8f77c   348  ldr x0, pc+436 (addr 0x000000004cd8f930)    ;; object: 0x21004241 <undefined>
0x4cd8f780   352  movz x16, #0x12f
0x4cd8f784   356  str x0, [x3, x16]
0x4cd8f788   360  ldr x0, pc+432 (addr 0x000000004cd8f938)    ;; object: 0x21004241 <undefined>
0x4cd8f78c   364  movz x16, #0x137
0x4cd8f790   368  str x0, [x3, x16]
0x4cd8f794   372  ldr x0, pc+428 (addr 0x000000004cd8f940)    ;; object: 0x21004241 <undefined>
0x4cd8f798   376  movz x16, #0x13f
0x4cd8f79c   380  str x0, [x3, x16]
0x4cd8f7a0   384  ldr x0, pc+424 (addr 0x000000004cd8f948)    ;; object: 0x21004241 <undefined>
0x4cd8f7a4   388  movz x16, #0x147
0x4cd8f7a8   392  str x0, [x3, x16]
0x4cd8f7ac   396  mov x0, x3
0x4cd8f7b0   400  ret
0x4cd8f7b4   404  sub csp, jssp, #0x10 (16)
0x4cd8f7b8   408  stp fp, lr, [jssp, #-16]!
0x4cd8f7bc   412  movz fp, #0xa00000000
0x4cd8f7c0   416  sub csp, jssp, #0x8 (8)
0x4cd8f7c4   420  str fp, [jssp, #-8]!
0x4cd8f7c8   424  add fp, jssp, #0x8 (8)
0x4cd8f7cc   428  movz x3, #0x0
0x4cd8f7d0   432  mov x16, lr
0x4cd8f7d4   436  ldr x17, pc+380 (addr 0x000000004cd8f950)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd8f7d8   440  blr x17
0x4cd8f7dc   444  movz x0, #0x15000000000
0x4cd8f7e0   448  movz x10, #0x0
0x4cd8f7e4   452  sub csp, jssp, #0x10 (16)
0x4cd8f7e8   456  stp x10, x0, [jssp, #-16]!
0x4cd8f7ec   460  movz x0, #0x2
0x4cd8f7f0   464  movz x1, #0x5b88
0x4cd8f7f4   468  movk x1, #0xe2, lsl #16
0x4cd8f7f8   472  ldr x16, pc+352 (addr 0x000000004cd8f958)    ;; code: STUB, CEntryStub, minor: 5
0x4cd8f7fc   476  blr x16
0x4cd8f800   480  str x0, [jssp, #24]
0x4cd8f804   484  ldr x16, pc+348 (addr 0x000000004cd8f960)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd8f808   488  blr x16
0x4cd8f80c   492  ldr lr, [jssp, #16]
0x4cd8f810   496  ldp xzr, fp, [jssp], #24
0x4cd8f814   500  b #-0x1d4 (addr 0x4cd8f640)
0x4cd8f818   504  58000a7f       constant pool begin (num_const = 83)    ;; constant pool
0x4cd8f81c   508  d63f03e0       constant
0x4cd8f820   512  2a806149       constant
0x4cd8f824   516  00000000       constant
0x4cd8f828   520  21004519       constant
0x4cd8f82c   524  00000000       constant
0x4cd8f830   528  21004241       constant
0x4cd8f834   532  00000000       constant
0x4cd8f838   536  21004241       constant
0x4cd8f83c   540  00000000       constant
0x4cd8f840   544  21004241       constant
0x4cd8f844   548  00000000       constant
0x4cd8f848   552  21004241       constant
0x4cd8f84c   556  00000000       constant
0x4cd8f850   560  21004241       constant
0x4cd8f854   564  00000000       constant
0x4cd8f858   568  21004241       constant
0x4cd8f85c   572  00000000       constant
0x4cd8f860   576  21004241       constant
0x4cd8f864   580  00000000       constant
0x4cd8f868   584  21004241       constant
0x4cd8f86c   588  00000000       constant
0x4cd8f870   592  21004241       constant
0x4cd8f874   596  00000000       constant
0x4cd8f878   600  21004241       constant
0x4cd8f87c   604  00000000       constant
0x4cd8f880   608  21004241       constant
0x4cd8f884   612  00000000       constant
0x4cd8f888   616  21004241       constant
0x4cd8f88c   620  00000000       constant
0x4cd8f890   624  21004241       constant
0x4cd8f894   628  00000000       constant
0x4cd8f898   632  21004241       constant
0x4cd8f89c   636  00000000       constant
0x4cd8f8a0   640  21004241       constant
0x4cd8f8a4   644  00000000       constant
0x4cd8f8a8   648  21004241       constant
0x4cd8f8ac   652  00000000       constant
0x4cd8f8b0   656  21004241       constant
0x4cd8f8b4   660  00000000       constant
0x4cd8f8b8   664  21004241       constant
0x4cd8f8bc   668  00000000       constant
0x4cd8f8c0   672  21004241       constant
0x4cd8f8c4   676  00000000       constant
0x4cd8f8c8   680  21004241       constant
0x4cd8f8cc   684  00000000       constant
0x4cd8f8d0   688  21004241       constant
0x4cd8f8d4   692  00000000       constant
0x4cd8f8d8   696  21004241       constant
0x4cd8f8dc   700  00000000       constant
0x4cd8f8e0   704  21004241       constant
0x4cd8f8e4   708  00000000       constant
0x4cd8f8e8   712  21004241       constant
0x4cd8f8ec   716  00000000       constant
0x4cd8f8f0   720  21004241       constant
0x4cd8f8f4   724  00000000       constant
0x4cd8f8f8   728  21004241       constant
0x4cd8f8fc   732  00000000       constant
0x4cd8f900   736  21004241       constant
0x4cd8f904   740  00000000       constant
0x4cd8f908   744  21004241       constant
0x4cd8f90c   748  00000000       constant
0x4cd8f910   752  21004241       constant
0x4cd8f914   756  00000000       constant
0x4cd8f918   760  21004241       constant
0x4cd8f91c   764  00000000       constant
0x4cd8f920   768  21004241       constant
0x4cd8f924   772  00000000       constant
0x4cd8f928   776  21004241       constant
0x4cd8f92c   780  00000000       constant
0x4cd8f930   784  21004241       constant
0x4cd8f934   788  00000000       constant
0x4cd8f938   792  21004241       constant
0x4cd8f93c   796  00000000       constant
0x4cd8f940   800  21004241       constant
0x4cd8f944   804  00000000       constant
0x4cd8f948   808  21004241       constant
0x4cd8f94c   812  00000000       constant
0x4cd8f950   816  4cd06820       constant
0x4cd8f954   820  00000000       constant
0x4cd8f958   824  4cd06260       constant
0x4cd8f95c   828  00000000       constant
0x4cd8f960   832  4cd068e0       constant
0x4cd8f964   836  00000000       constant


Safepoints (size = 21)
0x4cd8f800   480  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 47)
0x4cd8f640  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd8f658  embedded object  (0x21004519 <the hole>)
0x4cd8f668  embedded object  (0x21004241 <undefined>)
0x4cd8f670  embedded object  (0x21004241 <undefined>)
0x4cd8f678  embedded object  (0x21004241 <undefined>)
0x4cd8f680  embedded object  (0x21004241 <undefined>)
0x4cd8f688  embedded object  (0x21004241 <undefined>)
0x4cd8f690  embedded object  (0x21004241 <undefined>)
0x4cd8f698  embedded object  (0x21004241 <undefined>)
0x4cd8f6a0  embedded object  (0x21004241 <undefined>)
0x4cd8f6a8  embedded object  (0x21004241 <undefined>)
0x4cd8f6b0  embedded object  (0x21004241 <undefined>)
0x4cd8f6b8  embedded object  (0x21004241 <undefined>)
0x4cd8f6c0  embedded object  (0x21004241 <undefined>)
0x4cd8f6c8  embedded object  (0x21004241 <undefined>)
0x4cd8f6d0  embedded object  (0x21004241 <undefined>)
0x4cd8f6d8  embedded object  (0x21004241 <undefined>)
0x4cd8f6e0  embedded object  (0x21004241 <undefined>)
0x4cd8f6e8  embedded object  (0x21004241 <undefined>)
0x4cd8f6f0  embedded object  (0x21004241 <undefined>)
0x4cd8f6f8  embedded object  (0x21004241 <undefined>)
0x4cd8f700  embedded object  (0x21004241 <undefined>)
0x4cd8f708  embedded object  (0x21004241 <undefined>)
0x4cd8f710  embedded object  (0x21004241 <undefined>)
0x4cd8f718  embedded object  (0x21004241 <undefined>)
0x4cd8f720  embedded object  (0x21004241 <undefined>)
0x4cd8f728  embedded object  (0x21004241 <undefined>)
0x4cd8f730  embedded object  (0x21004241 <undefined>)
0x4cd8f738  embedded object  (0x21004241 <undefined>)
0x4cd8f740  embedded object  (0x21004241 <undefined>)
0x4cd8f74c  embedded object  (0x21004241 <undefined>)
0x4cd8f758  embedded object  (0x21004241 <undefined>)
0x4cd8f764  embedded object  (0x21004241 <undefined>)
0x4cd8f770  embedded object  (0x21004241 <undefined>)
0x4cd8f77c  embedded object  (0x21004241 <undefined>)
0x4cd8f788  embedded object  (0x21004241 <undefined>)
0x4cd8f794  embedded object  (0x21004241 <undefined>)
0x4cd8f7a0  embedded object  (0x21004241 <undefined>)
0x4cd8f7d4  code target (STUB)  (0x4cd06820)
0x4cd8f7f8  code target (STUB)  (0x4cd06260)
0x4cd8f804  code target (STUB)  (0x4cd068e0)
0x4cd8f818  constant pool (size 336)

--- End code ---
kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 861)
0x4cd8f620     0  movz x2, #0xd2c0
0x4cd8f624     4  movk x2, #0x166d, lsl #16
0x4cd8f628     8  ldp x3, x0, [x2]
0x4cd8f62c    12  adds x16, x3, #0x150 (336)
0x4cd8f630    16  ccmp x16, x0, #nzCv, lo
0x4cd8f634    20  b.hi #+0x180 (addr 0x4cd8f7b4)
0x4cd8f638    24  str x16, [x2]
0x4cd8f63c    28  orr x3, x3, #0x1
0x4cd8f640    32  ldr x0, pc+480 (addr 0x000000004cd8f820)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd8f644    36  stur x0, [x3, #-1]
0x4cd8f648    40  movz x0, #0x2800000000
0x4cd8f64c    44  stur x0, [x3, #7]
0x4cd8f650    48  stur x1, [x3, #15]
0x4cd8f654    52  stur cp, [x3, #23]
0x4cd8f658    56  ldr x0, pc+464 (addr 0x000000004cd8f828)    ;; object: 0x21004519 <the hole>
0x4cd8f65c    60  stur x0, [x3, #31]
0x4cd8f660    64  ldur x0, [cp, #39]
0x4cd8f664    68  stur x0, [x3, #39]
0x4cd8f668    72  ldr x0, pc+456 (addr 0x000000004cd8f830)    ;; object: 0x21004241 <undefined>
0x4cd8f66c    76  stur x0, [x3, #47]
0x4cd8f670    80  ldr x0, pc+456 (addr 0x000000004cd8f838)    ;; object: 0x21004241 <undefined>
0x4cd8f674    84  stur x0, [x3, #55]
0x4cd8f678    88  ldr x0, pc+456 (addr 0x000000004cd8f840)    ;; object: 0x21004241 <undefined>
0x4cd8f67c    92  stur x0, [x3, #63]
0x4cd8f680    96  ldr x0, pc+456 (addr 0x000000004cd8f848)    ;; object: 0x21004241 <undefined>
0x4cd8f684   100  stur x0, [x3, #71]
0x4cd8f688   104  ldr x0, pc+456 (addr 0x000000004cd8f850)    ;; object: 0x21004241 <undefined>
0x4cd8f68c   108  stur x0, [x3, #79]
0x4cd8f690   112  ldr x0, pc+456 (addr 0x000000004cd8f858)    ;; object: 0x21004241 <undefined>
0x4cd8f694   116  stur x0, [x3, #87]
0x4cd8f698   120  ldr x0, pc+456 (addr 0x000000004cd8f860)    ;; object: 0x21004241 <undefined>
0x4cd8f69c   124  stur x0, [x3, #95]
0x4cd8f6a0   128  ldr x0, pc+456 (addr 0x000000004cd8f868)    ;; object: 0x21004241 <undefined>
0x4cd8f6a4   132  stur x0, [x3, #103]
0x4cd8f6a8   136  ldr x0, pc+456 (addr 0x000000004cd8f870)    ;; object: 0x21004241 <undefined>
0x4cd8f6ac   140  stur x0, [x3, #111]
0x4cd8f6b0   144  ldr x0, pc+456 (addr 0x000000004cd8f878)    ;; object: 0x21004241 <undefined>
0x4cd8f6b4   148  stur x0, [x3, #119]
0x4cd8f6b8   152  ldr x0, pc+456 (addr 0x000000004cd8f880)    ;; object: 0x21004241 <undefined>
0x4cd8f6bc   156  stur x0, [x3, #127]
0x4cd8f6c0   160  ldr x0, pc+456 (addr 0x000000004cd8f888)    ;; object: 0x21004241 <undefined>
0x4cd8f6c4   164  stur x0, [x3, #135]
0x4cd8f6c8   168  ldr x0, pc+456 (addr 0x000000004cd8f890)    ;; object: 0x21004241 <undefined>
0x4cd8f6cc   172  stur x0, [x3, #143]
0x4cd8f6d0   176  ldr x0, pc+456 (addr 0x000000004cd8f898)    ;; object: 0x21004241 <undefined>
0x4cd8f6d4   180  stur x0, [x3, #151]
0x4cd8f6d8   184  ldr x0, pc+456 (addr 0x000000004cd8f8a0)    ;; object: 0x21004241 <undefined>
0x4cd8f6dc   188  stur x0, [x3, #159]
0x4cd8f6e0   192  ldr x0, pc+456 (addr 0x000000004cd8f8a8)    ;; object: 0x21004241 <undefined>
0x4cd8f6e4   196  stur x0, [x3, #167]
0x4cd8f6e8   200  ldr x0, pc+456 (addr 0x000000004cd8f8b0)    ;; object: 0x21004241 <undefined>
0x4cd8f6ec   204  stur x0, [x3, #175]
0x4cd8f6f0   208  ldr x0, pc+456 (addr 0x000000004cd8f8b8)    ;; object: 0x21004241 <undefined>
0x4cd8f6f4   212  stur x0, [x3, #183]
0x4cd8f6f8   216  ldr x0, pc+456 (addr 0x000000004cd8f8c0)    ;; object: 0x21004241 <undefined>
0x4cd8f6fc   220  stur x0, [x3, #191]
0x4cd8f700   224  ldr x0, pc+456 (addr 0x000000004cd8f8c8)    ;; object: 0x21004241 <undefined>
0x4cd8f704   228  stur x0, [x3, #199]
0x4cd8f708   232  ldr x0, pc+456 (addr 0x000000004cd8f8d0)    ;; object: 0x21004241 <undefined>
0x4cd8f70c   236  stur x0, [x3, #207]
0x4cd8f710   240  ldr x0, pc+456 (addr 0x000000004cd8f8d8)    ;; object: 0x21004241 <undefined>
0x4cd8f714   244  stur x0, [x3, #215]
0x4cd8f718   248  ldr x0, pc+456 (addr 0x000000004cd8f8e0)    ;; object: 0x21004241 <undefined>
0x4cd8f71c   252  stur x0, [x3, #223]
0x4cd8f720   256  ldr x0, pc+456 (addr 0x000000004cd8f8e8)    ;; object: 0x21004241 <undefined>
0x4cd8f724   260  stur x0, [x3, #231]
0x4cd8f728   264  ldr x0, pc+456 (addr 0x000000004cd8f8f0)    ;; object: 0x21004241 <undefined>
0x4cd8f72c   268  stur x0, [x3, #239]
0x4cd8f730   272  ldr x0, pc+456 (addr 0x000000004cd8f8f8)    ;; object: 0x21004241 <undefined>
0x4cd8f734   276  stur x0, [x3, #247]
0x4cd8f738   280  ldr x0, pc+456 (addr 0x000000004cd8f900)    ;; object: 0x21004241 <undefined>
0x4cd8f73c   284  stur x0, [x3, #255]
0x4cd8f740   288  ldr x0, pc+456 (addr 0x000000004cd8f908)    ;; object: 0x21004241 <undefined>
0x4cd8f744   292  movz x16, #0x107
0x4cd8f748   296  str x0, [x3, x16]
0x4cd8f74c   300  ldr x0, pc+452 (addr 0x000000004cd8f910)    ;; object: 0x21004241 <undefined>
0x4cd8f750   304  movz x16, #0x10f
0x4cd8f754   308  str x0, [x3, x16]
0x4cd8f758   312  ldr x0, pc+448 (addr 0x000000004cd8f918)    ;; object: 0x21004241 <undefined>
0x4cd8f75c   316  movz x16, #0x117
0x4cd8f760   320  str x0, [x3, x16]
0x4cd8f764   324  ldr x0, pc+444 (addr 0x000000004cd8f920)    ;; object: 0x21004241 <undefined>
0x4cd8f768   328  movz x16, #0x11f
0x4cd8f76c   332  str x0, [x3, x16]
0x4cd8f770   336  ldr x0, pc+440 (addr 0x000000004cd8f928)    ;; object: 0x21004241 <undefined>
0x4cd8f774   340  movz x16, #0x127
0x4cd8f778   344  str x0, [x3, x16]
0x4cd8f77c   348  ldr x0, pc+436 (addr 0x000000004cd8f930)    ;; object: 0x21004241 <undefined>
0x4cd8f780   352  movz x16, #0x12f
0x4cd8f784   356  str x0, [x3, x16]
0x4cd8f788   360  ldr x0, pc+432 (addr 0x000000004cd8f938)    ;; object: 0x21004241 <undefined>
0x4cd8f78c   364  movz x16, #0x137
0x4cd8f790   368  str x0, [x3, x16]
0x4cd8f794   372  ldr x0, pc+428 (addr 0x000000004cd8f940)    ;; object: 0x21004241 <undefined>
0x4cd8f798   376  movz x16, #0x13f
0x4cd8f79c   380  str x0, [x3, x16]
0x4cd8f7a0   384  ldr x0, pc+424 (addr 0x000000004cd8f948)    ;; object: 0x21004241 <undefined>
0x4cd8f7a4   388  movz x16, #0x147
0x4cd8f7a8   392  str x0, [x3, x16]
0x4cd8f7ac   396  mov x0, x3
0x4cd8f7b0   400  ret
0x4cd8f7b4   404  sub csp, jssp, #0x10 (16)
0x4cd8f7b8   408  stp fp, lr, [jssp, #-16]!
0x4cd8f7bc   412  movz fp, #0xa00000000
0x4cd8f7c0   416  sub csp, jssp, #0x8 (8)
0x4cd8f7c4   420  str fp, [jssp, #-8]!
0x4cd8f7c8   424  add fp, jssp, #0x8 (8)
0x4cd8f7cc   428  movz x3, #0x0
0x4cd8f7d0   432  mov x16, lr
0x4cd8f7d4   436  ldr x17, pc+380 (addr 0x000000004cd8f950)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd8f7d8   440  blr x17
0x4cd8f7dc   444  movz x0, #0x15000000000
0x4cd8f7e0   448  movz x10, #0x0
0x4cd8f7e4   452  sub csp, jssp, #0x10 (16)
0x4cd8f7e8   456  stp x10, x0, [jssp, #-16]!
0x4cd8f7ec   460  movz x0, #0x2
0x4cd8f7f0   464  movz x1, #0x5b88
0x4cd8f7f4   468  movk x1, #0xe2, lsl #16
0x4cd8f7f8   472  ldr x16, pc+352 (addr 0x000000004cd8f958)    ;; code: STUB, CEntryStub, minor: 5
0x4cd8f7fc   476  blr x16
0x4cd8f800   480  str x0, [jssp, #24]
0x4cd8f804   484  ldr x16, pc+348 (addr 0x000000004cd8f960)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd8f808   488  blr x16
0x4cd8f80c   492  ldr lr, [jssp, #16]
0x4cd8f810   496  ldp xzr, fp, [jssp], #24
0x4cd8f814   500  b #-0x1d4 (addr 0x4cd8f640)
0x4cd8f818   504  58000a7f       constant pool begin (num_const = 83)    ;; constant pool
0x4cd8f81c   508  d63f03e0       constant
0x4cd8f820   512  2a806149       constant
0x4cd8f824   516  00000000       constant
0x4cd8f828   520  21004519       constant
0x4cd8f82c   524  00000000       constant
0x4cd8f830   528  21004241       constant
0x4cd8f834   532  00000000       constant
0x4cd8f838   536  21004241       constant
0x4cd8f83c   540  00000000       constant
0x4cd8f840   544  21004241       constant
0x4cd8f844   548  00000000       constant
0x4cd8f848   552  21004241       constant
0x4cd8f84c   556  00000000       constant
0x4cd8f850   560  21004241       constant
0x4cd8f854   564  00000000       constant
0x4cd8f858   568  21004241       constant
0x4cd8f85c   572  00000000       constant
0x4cd8f860   576  21004241       constant
0x4cd8f864   580  00000000       constant
0x4cd8f868   584  21004241       constant
0x4cd8f86c   588  00000000       constant
0x4cd8f870   592  21004241       constant
0x4cd8f874   596  00000000       constant
0x4cd8f878   600  21004241       constant
0x4cd8f87c   604  00000000       constant
0x4cd8f880   608  21004241       constant
0x4cd8f884   612  00000000       constant
0x4cd8f888   616  21004241       constant
0x4cd8f88c   620  00000000       constant
0x4cd8f890   624  21004241       constant
0x4cd8f894   628  00000000       constant
0x4cd8f898   632  21004241       constant
0x4cd8f89c   636  00000000       constant
0x4cd8f8a0   640  21004241       constant
0x4cd8f8a4   644  00000000       constant
0x4cd8f8a8   648  21004241       constant
0x4cd8f8ac   652  00000000       constant
0x4cd8f8b0   656  21004241       constant
0x4cd8f8b4   660  00000000       constant
0x4cd8f8b8   664  21004241       constant
0x4cd8f8bc   668  00000000       constant
0x4cd8f8c0   672  21004241       constant
0x4cd8f8c4   676  00000000       constant
0x4cd8f8c8   680  21004241       constant
0x4cd8f8cc   684  00000000       constant
0x4cd8f8d0   688  21004241       constant
0x4cd8f8d4   692  00000000       constant
0x4cd8f8d8   696  21004241       constant
0x4cd8f8dc   700  00000000       constant
0x4cd8f8e0   704  21004241       constant
0x4cd8f8e4   708  00000000       constant
0x4cd8f8e8   712  21004241       constant
0x4cd8f8ec   716  00000000       constant
0x4cd8f8f0   720  21004241       constant
0x4cd8f8f4   724  00000000       constant
0x4cd8f8f8   728  21004241       constant
0x4cd8f8fc   732  00000000       constant
0x4cd8f900   736  21004241       constant
0x4cd8f904   740  00000000       constant
0x4cd8f908   744  21004241       constant
0x4cd8f90c   748  00000000       constant
0x4cd8f910   752  21004241       constant
0x4cd8f914   756  00000000       constant
0x4cd8f918   760  21004241       constant
0x4cd8f91c   764  00000000       constant
0x4cd8f920   768  21004241       constant
0x4cd8f924   772  00000000       constant
0x4cd8f928   776  21004241       constant
0x4cd8f92c   780  00000000       constant
0x4cd8f930   784  21004241       constant
0x4cd8f934   788  00000000       constant
0x4cd8f938   792  21004241       constant
0x4cd8f93c   796  00000000       constant
0x4cd8f940   800  21004241       constant
0x4cd8f944   804  00000000       constant
0x4cd8f948   808  21004241       constant
0x4cd8f94c   812  00000000       constant
0x4cd8f950   816  4cd06820       constant
0x4cd8f954   820  00000000       constant
0x4cd8f958   824  4cd06260       constant
0x4cd8f95c   828  00000000       constant
0x4cd8f960   832  4cd068e0       constant
0x4cd8f964   836  00000000       constant


Safepoints (size = 21)
0x4cd8f800   480  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 47)
0x4cd8f640  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd8f658  embedded object  (0x21004519 <the hole>)
0x4cd8f668  embedded object  (0x21004241 <undefined>)
0x4cd8f670  embedded object  (0x21004241 <undefined>)
0x4cd8f678  embedded object  (0x21004241 <undefined>)
0x4cd8f680  embedded object  (0x21004241 <undefined>)
0x4cd8f688  embedded object  (0x21004241 <undefined>)
0x4cd8f690  embedded object  (0x21004241 <undefined>)
0x4cd8f698  embedded object  (0x21004241 <undefined>)
0x4cd8f6a0  embedded object  (0x21004241 <undefined>)
0x4cd8f6a8  embedded object  (0x21004241 <undefined>)
0x4cd8f6b0  embedded object  (0x21004241 <undefined>)
0x4cd8f6b8  embedded object  (0x21004241 <undefined>)
0x4cd8f6c0  embedded object  (0x21004241 <undefined>)
0x4cd8f6c8  embedded object  (0x21004241 <undefined>)
0x4cd8f6d0  embedded object  (0x21004241 <undefined>)
0x4cd8f6d8  embedded object  (0x21004241 <undefined>)
0x4cd8f6e0  embedded object  (0x21004241 <undefined>)
0x4cd8f6e8  embedded object  (0x21004241 <undefined>)
0x4cd8f6f0  embedded object  (0x21004241 <undefined>)
0x4cd8f6f8  embedded object  (0x21004241 <undefined>)
0x4cd8f700  embedded object  (0x21004241 <undefined>)
0x4cd8f708  embedded object  (0x21004241 <undefined>)
0x4cd8f710  embedded object  (0x21004241 <undefined>)
0x4cd8f718  embedded object  (0x21004241 <undefined>)
0x4cd8f720  embedded object  (0x21004241 <undefined>)
0x4cd8f728  embedded object  (0x21004241 <undefined>)
0x4cd8f730  embedded object  (0x21004241 <undefined>)
0x4cd8f738  embedded object  (0x21004241 <undefined>)
0x4cd8f740  embedded object  (0x21004241 <undefined>)
0x4cd8f74c  embedded object  (0x21004241 <undefined>)
0x4cd8f758  embedded object  (0x21004241 <undefined>)
0x4cd8f764  embedded object  (0x21004241 <undefined>)
0x4cd8f770  embedded object  (0x21004241 <undefined>)
0x4cd8f77c  embedded object  (0x21004241 <undefined>)
0x4cd8f788  embedded object  (0x21004241 <undefined>)
0x4cd8f794  embedded object  (0x21004241 <undefined>)
0x4cd8f7a0  embedded object  (0x21004241 <undefined>)
0x4cd8f7d4  code target (STUB)  (0x4cd06820)
0x4cd8f7f8  code target (STUB)  (0x4cd06260)
0x4cd8f804  code target (STUB)  (0x4cd068e0)
0x4cd8f818  constant pool (size 336)


kind = HANDLER
major_key = <NoCache>Stub
name = process
compiler = unknown
Instructions (size = 120)
0x4cd93300     0  sub csp, jssp, #0x8 (8)
0x4cd93304     4  str x3, [jssp, #-8]!
0x4cd93308     8  sub csp, jssp, #0x8 (8)
0x4cd9330c    12  str x0, [jssp, #-8]!
0x4cd93310    16  ldr x0, pc+80 (addr 0x000000004cd93360)    ;; object: 0x210c5d51 Cell for 0
0x4cd93314    20  ldur x0, [x0, #7]
0x4cd93318    24  cmp x0, #0x0 (0)
0x4cd9331c    28  b.ne #+0x2c (addr 0x4cd93348)
0x4cd93320    32  ldr x0, pc+72 (addr 0x000000004cd93368)    ;; object: 0x210d89f9 WeakCell for 0x210c79b9 PropertyCell for 0x23392ce9 <a process with map 0x2a81c0f1>
0x4cd93324    36  ldur x0, [x0, #7]
0x4cd93328    40  tbz w0, #0, #+0x20 (addr 0x4cd93348)
0x4cd9332c    44  ldur x0, [x0, #15]
0x4cd93330    48  ldr x16, [x26, #88]
0x4cd93334    52  cmp x0, x16
0x4cd93338    56  b.eq #+0x10 (addr 0x4cd93348)
0x4cd9333c    60  add jssp, jssp, #0x10 (16)
0x4cd93340    64  ret
0x4cd93344    68  b #+0x14 (addr 0x4cd93358)
0x4cd93348    72  ldr x0, [jssp], #8
0x4cd9334c    76  ldr x3, [jssp], #8
0x4cd93350    80  ldr x16, pc+32 (addr 0x000000004cd93370)    ;; code: BUILTIN
0x4cd93354    84  br x16
0x4cd93358    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd9335c    92  d63f03e0       constant
0x4cd93360    96  210c5d51       constant
0x4cd93364   100  00000000       constant
0x4cd93368   104  210d89f9       constant
0x4cd9336c   108  00000000       constant
0x4cd93370   112  4cd222e0       constant
0x4cd93374   116  00000000       constant


RelocInfo (size = 9)
0x4cd93310  embedded object  (0x210c5d51 Cell for 0)
0x4cd93320  embedded object  (0x210d89f9 WeakCell for 0x210c79b9 PropertyCell for 0x23392ce9 <a process with map 0x2a81c0f1>)
0x4cd93350  code target (BUILTIN)  (0x4cd222e0)
0x4cd93358  constant pool (size 32)

kind = HANDLER
major_key = <NoCache>Stub
name = internal/util
compiler = unknown
Instructions (size = 184)
0x4cd933e0     0  sub csp, jssp, #0x8 (8)
0x4cd933e4     4  str x3, [jssp, #-8]!
0x4cd933e8     8  sub csp, jssp, #0x8 (8)
0x4cd933ec    12  str x4, [jssp, #-8]!
0x4cd933f0    16  ldr x3, pc+112 (addr 0x000000004cd93460)    ;; object: 0x21063e59 Cell for 0
0x4cd933f4    20  ldur x3, [x3, #7]
0x4cd933f8    24  cmp x3, #0x0 (0)
0x4cd933fc    28  b.ne #+0x44 (addr 0x4cd93440)
0x4cd93400    32  tbz w0, #0, #+0x40 (addr 0x4cd93440)
0x4cd93404    36  ldur x3, [x0, #-1]
0x4cd93408    40  ldr x4, pc+96 (addr 0x000000004cd93468)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd9340c    44  ldur x4, [x4, #7]
0x4cd93410    48  cmp x3, x4
0x4cd93414    52  b.ne #+0x2c (addr 0x4cd93440)
0x4cd93418    56  ldr x5, pc+88 (addr 0x000000004cd93470)    ;; object: 0x210dacf1 WeakCell for 0x2a81f2c9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd9341c    60  ldur x5, [x5, #7]
0x4cd93420    64  tbz w5, #0, #+0x20 (addr 0x4cd93440)
0x4cd93424    68  ldursw x4, [x5, #15]
0x4cd93428    72  tbnz w4, #23, #+0x18 (addr 0x4cd93440)
0x4cd9342c    76  ldr x4, [jssp], #8
0x4cd93430    80  ldr x3, [jssp], #8
0x4cd93434    84  ldr x2, pc+68 (addr 0x000000004cd93478)    ;; object: 0x210b9451 <String[13]: internal/util>
0x4cd93438    88  ldr x16, pc+72 (addr 0x000000004cd93480)    ;; code: HANDLER, StoreTransitionStub, minor: 198662
0x4cd9343c    92  br x16
0x4cd93440    96  ldr x2, pc+72 (addr 0x000000004cd93488)    ;; object: 0x210b9451 <String[13]: internal/util>
0x4cd93444   100  ldr x4, [jssp], #8
0x4cd93448   104  ldr x3, [jssp], #8
0x4cd9344c   108  ldr x16, pc+68 (addr 0x000000004cd93490)    ;; code: BUILTIN
0x4cd93450   112  br x16
0x4cd93454   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd93458   120  d63f03e0       constant
0x4cd9345c   124  d503201f       constant
0x4cd93460   128  21063e59       constant
0x4cd93464   132  00000000       constant
0x4cd93468   136  210c22b1       constant
0x4cd9346c   140  00000000       constant
0x4cd93470   144  210dacf1       constant
0x4cd93474   148  00000000       constant
0x4cd93478   152  210b9451       constant
0x4cd9347c   156  00000000       constant
0x4cd93480   160  4cd8c000       constant
0x4cd93484   164  00000000       constant
0x4cd93488   168  210b9451       constant
0x4cd9348c   172  00000000       constant
0x4cd93490   176  4cd22420       constant
0x4cd93494   180  00000000       constant


RelocInfo (size = 13)
0x4cd933f0  embedded object  (0x21063e59 Cell for 0)
0x4cd93408  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd93418  embedded object  (0x210dacf1 WeakCell for 0x2a81f2c9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd93434  embedded object  (0x210b9451 <String[13]: internal/util>)
0x4cd93438  code target (HANDLER)  (0x4cd8c000)
0x4cd93440  embedded object  (0x210b9451 <String[13]: internal/util>)
0x4cd9344c  code target (BUILTIN)  (0x4cd22420)
0x4cd93454  constant pool (size 68)

kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 262145
name = CallICStub(args(1), NULL_OR_UNDEFINED, 
compiler = unknown
Instructions (size = 488)
0x4cd93500     0  add x4, x2, x3, asr #29
0x4cd93504     4  ldur x4, [x4, #15]
0x4cd93508     8  ldur x5, [x4, #7]
0x4cd9350c    12  cmp x5, x1
0x4cd93510    16  b.ne #+0x2c (addr 0x4cd9353c)
0x4cd93514    20  tbz w1, #0, #+0x28 (addr 0x4cd9353c)
0x4cd93518    24  add x2, x2, x3, asr #29
0x4cd9351c    28  add x2, x2, #0x18 (24)
0x4cd93520    32  ldur x3, [x2, #-1]
0x4cd93524    36  movz x16, #0x200000000
0x4cd93528    40  add x3, x3, x16
0x4cd9352c    44  stur x3, [x2, #-1]
0x4cd93530    48  movz x0, #0x1
0x4cd93534    52  ldr x16, pc+372 (addr 0x000000004cd936a8)    ;; code: BUILTIN
0x4cd93538    56  br x16
0x4cd9353c    60  ldr x16, [x26, #2400]
0x4cd93540    64  cmp x4, x16
0x4cd93544    68  b.eq #+0x78 (addr 0x4cd935bc)
0x4cd93548    72  ldur x5, [x4, #-1]
0x4cd9354c    76  ldr x16, [x26, #2736]
0x4cd93550    80  cmp x5, x16
0x4cd93554    84  b.ne #+0x40 (addr 0x4cd93594)
0x4cd93558    88  ldur x5, [cp, #39]
0x4cd9355c    92  ldur x5, [x5, #95]
0x4cd93560    96  cmp x1, x5
0x4cd93564   100  b.ne #+0xec (addr 0x4cd93650)
0x4cd93568   104  movz x0, #0x1
0x4cd9356c   108  add x2, x2, x3, asr #29
0x4cd93570   112  add x2, x2, #0x18 (24)
0x4cd93574   116  ldur x3, [x2, #-1]
0x4cd93578   120  movz x16, #0x200000000
0x4cd9357c   124  add x3, x3, x16
0x4cd93580   128  stur x3, [x2, #-1]
0x4cd93584   132  mov x2, x4
0x4cd93588   136  mov x3, x1
0x4cd9358c   140  ldr x16, pc+292 (addr 0x000000004cd936b0)    ;; code: STUB, ArrayConstructorStub, minor: 2
0x4cd93590   144  br x16
0x4cd93594   148  ldr x16, [x26, #2568]
0x4cd93598   152  cmp x4, x16
0x4cd9359c   156  b.eq #+0xb4 (addr 0x4cd93650)
0x4cd935a0   160  ldur x5, [x4, #-1]
0x4cd935a4   164  ldrb w5, [x5, #11]
0x4cd935a8   168  cmp x5, #0xc9 (201)
0x4cd935ac   172  b.ne #+0xa4 (addr 0x4cd93650)
0x4cd935b0   176  add x4, x2, x3, asr #29
0x4cd935b4   180  ldr x5, [x26, #2400]
0x4cd935b8   184  stur x5, [x4, #15]
0x4cd935bc   188  movz x0, #0x1
0x4cd935c0   192  ldr x16, pc+248 (addr 0x000000004cd936b8)    ;; code: BUILTIN
0x4cd935c4   196  br x16
0x4cd935c8   200  tbz w1, #0, #+0x88 (addr 0x4cd93650)
0x4cd935cc   204  ldur x5, [x1, #-1]
0x4cd935d0   208  ldrb w5, [x5, #11]
0x4cd935d4   212  cmp x5, #0xc9 (201)
0x4cd935d8   216  b.ne #+0x78 (addr 0x4cd93650)
0x4cd935dc   220  ldur x5, [cp, #39]
0x4cd935e0   224  ldur x5, [x5, #95]
0x4cd935e4   228  cmp x1, x5
0x4cd935e8   232  b.eq #+0x68 (addr 0x4cd93650)
0x4cd935ec   236  ldur x4, [x1, #39]
0x4cd935f0   240  ldur x4, [x4, #39]
0x4cd935f4   244  ldur x5, [cp, #39]
0x4cd935f8   248  cmp x4, x5
0x4cd935fc   252  b.ne #+0x54 (addr 0x4cd93650)
0x4cd93600   256  movz x5, #0x200000000
0x4cd93604   260  adds x4, x2, x3, asr #29
0x4cd93608   264  stur x5, [x4, #23]
0x4cd9360c   268  movz x16, #0xc00000000
0x4cd93610   272  sub csp, jssp, #0x10 (16)
0x4cd93614   276  stp fp, lr, [jssp, #-16]!
0x4cd93618   280  sub csp, jssp, #0x10 (16)
0x4cd9361c   284  str x16, [jssp, #-8]!
0x4cd93620   288  ldr x17, pc+160 (addr 0x000000004cd936c0)    ;; object: 0x4cd934a1 <Code: CALL_IC>
0x4cd93624   292  sub csp, jssp, #0x10 (16)
0x4cd93628   296  str x17, [jssp, #-8]!
0x4cd9362c   300  add fp, jssp, #0x10 (16)
0x4cd93630   304  sub csp, jssp, #0x8 (8)
0x4cd93634   308  str x1, [jssp, #-8]!
0x4cd93638   312  ldr x16, pc+144 (addr 0x000000004cd936c8)    ;; code: STUB, CreateWeakCellStub, minor: 0
0x4cd9363c   316  blr x16
0x4cd93640   320  ldr x1, [jssp], #8
0x4cd93644   324  mov jssp, fp
0x4cd93648   328  ldp fp, lr, [jssp], #16
0x4cd9364c   332  b #-0x11c (addr 0x4cd93530)
0x4cd93650   336  movz x16, #0xc00000000
0x4cd93654   340  sub csp, jssp, #0x10 (16)
0x4cd93658   344  stp fp, lr, [jssp, #-16]!
0x4cd9365c   348  sub csp, jssp, #0x10 (16)
0x4cd93660   352  str x16, [jssp, #-8]!
0x4cd93664   356  ldr x17, pc+108 (addr 0x000000004cd936d0)    ;; object: 0x4cd934a1 <Code: CALL_IC>
0x4cd93668   360  sub csp, jssp, #0x10 (16)
0x4cd9366c   364  str x17, [jssp, #-8]!
0x4cd93670   368  add fp, jssp, #0x10 (16)
0x4cd93674   372  sub csp, jssp, #0x18 (24)
0x4cd93678   376  stp x3, x2, [jssp, #-24]!
0x4cd9367c   380  str x1, [jssp, #16]
0x4cd93680   384  movz x0, #0x3
0x4cd93684   388  ldr x1, pc+84 (addr 0x000000004cd936d8)    ;; external reference (Runtime::CallIC_Miss)
0x4cd93688   392  ldr x16, pc+88 (addr 0x000000004cd936e0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd9368c   396  blr x16
0x4cd93690   400  mov x1, x0
0x4cd93694   404  mov jssp, fp
0x4cd93698   408  ldp fp, lr, [jssp], #16
0x4cd9369c   412  b #-0xe0 (addr 0x4cd935bc)
0x4cd936a0   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4cd936a4   420  d63f03e0       constant
0x4cd936a8   424  4cd1e280       constant
0x4cd936ac   428  00000000       constant
0x4cd936b0   432  4cd30b00       constant
0x4cd936b4   436  00000000       constant
0x4cd936b8   440  4cd1f560       constant
0x4cd936bc   444  00000000       constant
0x4cd936c0   448  4cd934a1       constant
0x4cd936c4   452  00000000       constant
0x4cd936c8   456  4cd0ddc0       constant
0x4cd936cc   460  00000000       constant
0x4cd936d0   464  4cd934a1       constant
0x4cd936d4   468  00000000       constant
0x4cd936d8   472  00c86928       constant
0x4cd936dc   476  00000000       constant
0x4cd936e0   480  4cd06060       constant
0x4cd936e4   484  00000000       constant


RelocInfo (size = 19)
0x4cd93534  code target (BUILTIN)  (0x4cd1e280)
0x4cd9358c  code target (STUB)  (0x4cd30b00)
0x4cd935c0  code target (BUILTIN)  (0x4cd1f560)
0x4cd93620  embedded object  (0x4cd934a1 <Code: CALL_IC>)
0x4cd93638  code target (STUB)  (0x4cd0ddc0)
0x4cd93664  embedded object  (0x4cd934a1 <Code: CALL_IC>)
0x4cd93684  external reference (Runtime::CallIC_Miss)  (0xc86928)
0x4cd93688  code target (STUB)  (0x4cd06060)
0x4cd936a0  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 262145
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0x4cd93760     0  ldur x2, [fp, #-16]
0x4cd93764     4  ldur x2, [x2, #31]
0x4cd93768     8  ldur x2, [x2, #87]
0x4cd9376c    12  ldr x16, pc+20 (addr 0x000000004cd93780)    ;; code: CALL_IC, GENERIC
0x4cd93770    16  br x16
0x4cd93774    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd93778    24  d63f03e0       constant
0x4cd9377c    28  d503201f       constant
0x4cd93780    32  4cd93500       constant
0x4cd93784    36  00000000       constant


RelocInfo (size = 7)
0x4cd9376c  code target (CALL_IC)  (0x4cd93500)
0x4cd93774  constant pool (size 20)


--- Code ---
kind = TO_BOOLEAN_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 32
type = NORMAL
name = ToBooleanICStub
compiler = crankshaft
Instructions (size = 152)
0x4cd94840     0  tbz w0, #0, #+0x50 (addr 0x4cd94890)
0x4cd94844     4  ldur x2, [x0, #-1]
0x4cd94848     8  ldrb w1, [x2, #11]
0x4cd9484c    12  cmp x1, #0x80 (128)
0x4cd94850    16  b.ge #+0x10 (addr 0x4cd94860)
0x4cd94854    20  ldur x1, [x0, #15]
0x4cd94858    24  cbz x1, #+0xc (addr 0x4cd94864)
0x4cd9485c    28  b #+0x10 (addr 0x4cd9486c)
0x4cd94860    32  b #+0x30 (addr 0x4cd94890)
0x4cd94864    36  ldr x0, pc+28 (addr 0x000000004cd94880)    ;; object: 0x210042b1 <false>
0x4cd94868    40  ret
0x4cd9486c    44  ldr x0, pc+28 (addr 0x000000004cd94888)    ;; object: 0x21004281 <true>
0x4cd94870    48  ret
0x4cd94874    52  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd94878    56  d63f03e0       constant
0x4cd9487c    60  d503201f       constant
0x4cd94880    64  210042b1       constant
0x4cd94884    68  00000000       constant
0x4cd94888    72  21004281       constant
0x4cd9488c    76  00000000       constant
0x4cd94890    80  movz x16, #0x0
0x4cd94894    84  sub csp, jssp, #0x10 (16)
0x4cd94898    88  stp fp, lr, [jssp, #-16]!
0x4cd9489c    92  bl #+0x4 (addr 0x4cd948a0)
0x4cd948a0    96  movz x17, #0xa00000000
0x4cd948a4   100  sub csp, jssp, #0x10 (16)
0x4cd948a8   104  stp x17, cp, [jssp, #-16]!
0x4cd948ac   108  add fp, jssp, #0x10 (16)
0x4cd948b0   112  ldr x17, pc+24 (addr 0x000000004cd948c8)    ;; lazy deoptimization bailout 0
0x4cd948b4   116  add x17, x17, x16
0x4cd948b8   120  br x17
0x4cd948bc   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd948c0   128  d63f03e0       constant
0x4cd948c4   132  d503201f       constant
0x4cd948c8   136  4cb06000       constant
0x4cd948cc   140  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd94864  embedded object  (0x210042b1 <false>)
0x4cd9486c  embedded object  (0x21004281 <true>)
0x4cd94874  constant pool (size 28)
0x4cd948b0  runtime entry
0x4cd948bc  constant pool (size 20)

--- End code ---
kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 32
type = NORMAL
name = ToBooleanICStub(String)
compiler = crankshaft
Instructions (size = 152)
0x4cd94840     0  tbz w0, #0, #+0x50 (addr 0x4cd94890)
0x4cd94844     4  ldur x2, [x0, #-1]
0x4cd94848     8  ldrb w1, [x2, #11]
0x4cd9484c    12  cmp x1, #0x80 (128)
0x4cd94850    16  b.ge #+0x10 (addr 0x4cd94860)
0x4cd94854    20  ldur x1, [x0, #15]
0x4cd94858    24  cbz x1, #+0xc (addr 0x4cd94864)
0x4cd9485c    28  b #+0x10 (addr 0x4cd9486c)
0x4cd94860    32  b #+0x30 (addr 0x4cd94890)
0x4cd94864    36  ldr x0, pc+28 (addr 0x000000004cd94880)    ;; object: 0x210042b1 <false>
0x4cd94868    40  ret
0x4cd9486c    44  ldr x0, pc+28 (addr 0x000000004cd94888)    ;; object: 0x21004281 <true>
0x4cd94870    48  ret
0x4cd94874    52  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd94878    56  d63f03e0       constant
0x4cd9487c    60  d503201f       constant
0x4cd94880    64  210042b1       constant
0x4cd94884    68  00000000       constant
0x4cd94888    72  21004281       constant
0x4cd9488c    76  00000000       constant
0x4cd94890    80  movz x16, #0x0
0x4cd94894    84  sub csp, jssp, #0x10 (16)
0x4cd94898    88  stp fp, lr, [jssp, #-16]!
0x4cd9489c    92  bl #+0x4 (addr 0x4cd948a0)
0x4cd948a0    96  movz x17, #0xa00000000
0x4cd948a4   100  sub csp, jssp, #0x10 (16)
0x4cd948a8   104  stp x17, cp, [jssp, #-16]!
0x4cd948ac   108  add fp, jssp, #0x10 (16)
0x4cd948b0   112  ldr x17, pc+24 (addr 0x000000004cd948c8)    ;; lazy deoptimization bailout 0
0x4cd948b4   116  add x17, x17, x16
0x4cd948b8   120  br x17
0x4cd948bc   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd948c0   128  d63f03e0       constant
0x4cd948c4   132  d503201f       constant
0x4cd948c8   136  4cb06000       constant
0x4cd948cc   140  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd94864  embedded object  (0x210042b1 <false>)
0x4cd9486c  embedded object  (0x21004281 <true>)
0x4cd94874  constant pool (size 28)
0x4cd948b0  runtime entry
0x4cd948bc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = Symbol
compiler = unknown
Instructions (size = 120)
0x4cd94940     0  sub csp, jssp, #0x8 (8)
0x4cd94944     4  str x3, [jssp, #-8]!
0x4cd94948     8  sub csp, jssp, #0x8 (8)
0x4cd9494c    12  str x0, [jssp, #-8]!
0x4cd94950    16  ldr x0, pc+80 (addr 0x000000004cd949a0)    ;; object: 0x210c5d51 Cell for 0
0x4cd94954    20  ldur x0, [x0, #7]
0x4cd94958    24  cmp x0, #0x0 (0)
0x4cd9495c    28  b.ne #+0x2c (addr 0x4cd94988)
0x4cd94960    32  ldr x0, pc+72 (addr 0x000000004cd949a8)    ;; object: 0x210dd079 WeakCell for 0x21042b39 PropertyCell for 0x21042ad1 <JS Function Symbol (SharedFunctionInfo 0x21042a29)>
0x4cd94964    36  ldur x0, [x0, #7]
0x4cd94968    40  tbz w0, #0, #+0x20 (addr 0x4cd94988)
0x4cd9496c    44  ldur x0, [x0, #15]
0x4cd94970    48  ldr x16, [x26, #88]
0x4cd94974    52  cmp x0, x16
0x4cd94978    56  b.eq #+0x10 (addr 0x4cd94988)
0x4cd9497c    60  add jssp, jssp, #0x10 (16)
0x4cd94980    64  ret
0x4cd94984    68  b #+0x14 (addr 0x4cd94998)
0x4cd94988    72  ldr x0, [jssp], #8
0x4cd9498c    76  ldr x3, [jssp], #8
0x4cd94990    80  ldr x16, pc+32 (addr 0x000000004cd949b0)    ;; code: BUILTIN
0x4cd94994    84  br x16
0x4cd94998    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd9499c    92  d63f03e0       constant
0x4cd949a0    96  210c5d51       constant
0x4cd949a4   100  00000000       constant
0x4cd949a8   104  210dd079       constant
0x4cd949ac   108  00000000       constant
0x4cd949b0   112  4cd222e0       constant
0x4cd949b4   116  00000000       constant


RelocInfo (size = 9)
0x4cd94950  embedded object  (0x210c5d51 Cell for 0)
0x4cd94960  embedded object  (0x210dd079 WeakCell for 0x21042b39 PropertyCell for 0x21042ad1 <JS Function Symbol (SharedFunctionInfo 0x21042a29)>)
0x4cd94990  code target (BUILTIN)  (0x4cd222e0)
0x4cd94998  constant pool (size 32)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0x4cd94a20     0  tbz w0, #0, #+0x50 (addr 0x4cd94a70)
0x4cd94a24     4  mov x2, x0
0x4cd94a28     8  stur x2, [x1, #47]
0x4cd94a2c    12  add x3, x1, #0x2f (47)
0x4cd94a30    16  and x2, x2, #0xfffffffffff00000
0x4cd94a34    20  ldr x2, [x2, #8]
0x4cd94a38    24  tbz w2, #1, #+0x24 (addr 0x4cd94a5c)
0x4cd94a3c    28  and x2, x1, #0xfffffffffff00000
0x4cd94a40    32  ldr x2, [x2, #8]
0x4cd94a44    36  tbz w2, #2, #+0x18 (addr 0x4cd94a5c)
0x4cd94a48    40  sub csp, jssp, #0x8 (8)
0x4cd94a4c    44  str lr, [jssp, #-8]!
0x4cd94a50    48  ldr x16, pc+24 (addr 0x000000004cd94a68)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd94a54    52  blr x16
0x4cd94a58    56  ldr lr, [jssp], #8
0x4cd94a5c    60  ret
0x4cd94a60    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd94a64    68  d63f03e0       constant
0x4cd94a68    72  4cd170c0       constant
0x4cd94a6c    76  00000000       constant
0x4cd94a70    80  movz x16, #0x0
0x4cd94a74    84  sub csp, jssp, #0x10 (16)
0x4cd94a78    88  stp fp, lr, [jssp, #-16]!
0x4cd94a7c    92  bl #+0x4 (addr 0x4cd94a80)
0x4cd94a80    96  movz x17, #0xa00000000
0x4cd94a84   100  sub csp, jssp, #0x10 (16)
0x4cd94a88   104  stp x17, cp, [jssp, #-16]!
0x4cd94a8c   108  add fp, jssp, #0x10 (16)
0x4cd94a90   112  ldr x17, pc+24 (addr 0x000000004cd94aa8)    ;; lazy deoptimization bailout 0
0x4cd94a94   116  add x17, x17, x16
0x4cd94a98   120  br x17
0x4cd94a9c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd94aa0   128  d63f03e0       constant
0x4cd94aa4   132  d503201f       constant
0x4cd94aa8   136  4cb06000       constant
0x4cd94aac   140  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cd94a50  code target (STUB)  (0x4cd170c0)
0x4cd94a60  constant pool (size 16)
0x4cd94a90  runtime entry
0x4cd94a9c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0x4cd94a20     0  tbz w0, #0, #+0x50 (addr 0x4cd94a70)
0x4cd94a24     4  mov x2, x0
0x4cd94a28     8  stur x2, [x1, #47]
0x4cd94a2c    12  add x3, x1, #0x2f (47)
0x4cd94a30    16  and x2, x2, #0xfffffffffff00000
0x4cd94a34    20  ldr x2, [x2, #8]
0x4cd94a38    24  tbz w2, #1, #+0x24 (addr 0x4cd94a5c)
0x4cd94a3c    28  and x2, x1, #0xfffffffffff00000
0x4cd94a40    32  ldr x2, [x2, #8]
0x4cd94a44    36  tbz w2, #2, #+0x18 (addr 0x4cd94a5c)
0x4cd94a48    40  sub csp, jssp, #0x8 (8)
0x4cd94a4c    44  str lr, [jssp, #-8]!
0x4cd94a50    48  ldr x16, pc+24 (addr 0x000000004cd94a68)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd94a54    52  blr x16
0x4cd94a58    56  ldr lr, [jssp], #8
0x4cd94a5c    60  ret
0x4cd94a60    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd94a64    68  d63f03e0       constant
0x4cd94a68    72  4cd170c0       constant
0x4cd94a6c    76  00000000       constant
0x4cd94a70    80  movz x16, #0x0
0x4cd94a74    84  sub csp, jssp, #0x10 (16)
0x4cd94a78    88  stp fp, lr, [jssp, #-16]!
0x4cd94a7c    92  bl #+0x4 (addr 0x4cd94a80)
0x4cd94a80    96  movz x17, #0xa00000000
0x4cd94a84   100  sub csp, jssp, #0x10 (16)
0x4cd94a88   104  stp x17, cp, [jssp, #-16]!
0x4cd94a8c   108  add fp, jssp, #0x10 (16)
0x4cd94a90   112  ldr x17, pc+24 (addr 0x000000004cd94aa8)    ;; lazy deoptimization bailout 0
0x4cd94a94   116  add x17, x17, x16
0x4cd94a98   120  br x17
0x4cd94a9c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd94aa0   128  d63f03e0       constant
0x4cd94aa4   132  d503201f       constant
0x4cd94aa8   136  4cb06000       constant
0x4cd94aac   140  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cd94a50  code target (STUB)  (0x4cd170c0)
0x4cd94a60  constant pool (size 16)
0x4cd94a90  runtime entry
0x4cd94a9c  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 344)
0x4cd951e0     0  ldur x5, [x1, #15]
0x4cd951e4     4  ldur w6, [x5, #11]
0x4cd951e8     8  ldur x16, [x1, #23]
0x4cd951ec    12  ldur x16, [x16, #39]
0x4cd951f0    16  tst x16, #0x8
0x4cd951f4    20  b.ne #+0xcc (addr 0x4cd952c0)
0x4cd951f8    24  ldur x7, [x5, #23]
0x4cd951fc    28  ldur x5, [x5, #15]
0x4cd95200    32  add x5, x7, x5
0x4cd95204    36  tbnz w2, #0, #+0x20 (addr 0x4cd95224)
0x4cd95208    40  asr x8, x2, #32
0x4cd9520c    44  cmp w8, w6
0x4cd95210    48  b.hs #+0xc0 (addr 0x4cd952d0)
0x4cd95214    52  tbnz w0, #0, #+0x38 (addr 0x4cd9524c)
0x4cd95218    56  asr x7, x0, #32
0x4cd9521c    60  str w7, [x5, w8, sxtw #2]
0x4cd95220    64  ret
0x4cd95224    68  ldur x16, [x2, #-1]
0x4cd95228    72  ldr x17, [x26, #120]
0x4cd9522c    76  cmp x16, x17
0x4cd95230    80  b.ne #+0xb0 (addr 0x4cd952e0)
0x4cd95234    84  ldur d29, [x2, #7]
0x4cd95238    88  fcvtzs w8, d29
0x4cd9523c    92  scvtf d0, w8
0x4cd95240    96  fcmp d29, d0
0x4cd95244   100  b.ne #+0x9c (addr 0x4cd952e0)
0x4cd95248   104  b #-0x3c (addr 0x4cd9520c)
0x4cd9524c   108  ldur x16, [x0, #-1]
0x4cd95250   112  ldr x17, [x26, #120]
0x4cd95254   116  cmp x16, x17
0x4cd95258   120  b.ne #+0x30 (addr 0x4cd95288)
0x4cd9525c   124  ldur d30, [x0, #7]
0x4cd95260   128  fcvtzs x7, d30
0x4cd95264   132  cmp x7, #0x1 (1)
0x4cd95268   136  ccmn x7, #1, #nzcV, vc
0x4cd9526c   140  b.vc #+0x18 (addr 0x4cd95284)
0x4cd95270   144  sub csp, jssp, #0x8 (8)
0x4cd95274   148  str lr, [jssp, #-8]!
0x4cd95278   152  ldr x16, pc+64 (addr 0x000000004cd952b8)    ;; code: STUB, DoubleToIStub, minor: 127424
0x4cd9527c   156  blr x16
0x4cd95280   160  ldr lr, [jssp], #8
0x4cd95284   164  b #+0x24 (addr 0x4cd952a8)
0x4cd95288   168  ldp x7, x6, [x26, #64]
0x4cd9528c   172  cmp x0, x7
0x4cd95290   176  cset x7, eq
0x4cd95294   180  ccmp x0, x6, #nZcv, ne
0x4cd95298   184  b.eq #+0x10 (addr 0x4cd952a8)
0x4cd9529c   188  ldr x16, [x26, #40]
0x4cd952a0   192  cmp x0, x16
0x4cd952a4   196  b.ne #+0x4c (addr 0x4cd952f0)
0x4cd952a8   200  b #-0x8c (addr 0x4cd9521c)
0x4cd952ac   204  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd952b0   208  d63f03e0       constant
0x4cd952b4   212  d503201f       constant
0x4cd952b8   216  4cd4b6c0       constant
0x4cd952bc   220  00000000       constant
0x4cd952c0   224  movz x16, #0x0
0x4cd952c4   228  sub csp, jssp, #0x10 (16)
0x4cd952c8   232  stp fp, lr, [jssp, #-16]!
0x4cd952cc   236  bl #+0x34 (addr 0x4cd95300)
0x4cd952d0   240  movz x16, #0x8
0x4cd952d4   244  sub csp, jssp, #0x10 (16)
0x4cd952d8   248  stp fp, lr, [jssp, #-16]!
0x4cd952dc   252  bl #+0x24 (addr 0x4cd95300)
0x4cd952e0   256  movz x16, #0x10
0x4cd952e4   260  sub csp, jssp, #0x10 (16)
0x4cd952e8   264  stp fp, lr, [jssp, #-16]!
0x4cd952ec   268  bl #+0x14 (addr 0x4cd95300)
0x4cd952f0   272  movz x16, #0x18
0x4cd952f4   276  sub csp, jssp, #0x10 (16)
0x4cd952f8   280  stp fp, lr, [jssp, #-16]!
0x4cd952fc   284  bl #+0x4 (addr 0x4cd95300)
0x4cd95300   288  movz x17, #0xa00000000
0x4cd95304   292  sub csp, jssp, #0x10 (16)
0x4cd95308   296  stp x17, cp, [jssp, #-16]!
0x4cd9530c   300  add fp, jssp, #0x10 (16)
0x4cd95310   304  ldr x17, pc+24 (addr 0x000000004cd95328)    ;; lazy deoptimization bailout 0
0x4cd95314   308  add x17, x17, x16
0x4cd95318   312  br x17
0x4cd9531c   316  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd95320   320  d63f03e0       constant
0x4cd95324   324  d503201f       constant
0x4cd95328   328  4cb06000       constant
0x4cd9532c   332  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0x4cd95278  code target (STUB)  (0x4cd4b6c0)
0x4cd952ac  constant pool (size 20)
0x4cd95310  runtime entry
0x4cd9531c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFastElementStub
name = StoreFastElementStub
compiler = crankshaft
Instructions (size = 344)
0x4cd951e0     0  ldur x5, [x1, #15]
0x4cd951e4     4  ldur w6, [x5, #11]
0x4cd951e8     8  ldur x16, [x1, #23]
0x4cd951ec    12  ldur x16, [x16, #39]
0x4cd951f0    16  tst x16, #0x8
0x4cd951f4    20  b.ne #+0xcc (addr 0x4cd952c0)
0x4cd951f8    24  ldur x7, [x5, #23]
0x4cd951fc    28  ldur x5, [x5, #15]
0x4cd95200    32  add x5, x7, x5
0x4cd95204    36  tbnz w2, #0, #+0x20 (addr 0x4cd95224)
0x4cd95208    40  asr x8, x2, #32
0x4cd9520c    44  cmp w8, w6
0x4cd95210    48  b.hs #+0xc0 (addr 0x4cd952d0)
0x4cd95214    52  tbnz w0, #0, #+0x38 (addr 0x4cd9524c)
0x4cd95218    56  asr x7, x0, #32
0x4cd9521c    60  str w7, [x5, w8, sxtw #2]
0x4cd95220    64  ret
0x4cd95224    68  ldur x16, [x2, #-1]
0x4cd95228    72  ldr x17, [x26, #120]
0x4cd9522c    76  cmp x16, x17
0x4cd95230    80  b.ne #+0xb0 (addr 0x4cd952e0)
0x4cd95234    84  ldur d29, [x2, #7]
0x4cd95238    88  fcvtzs w8, d29
0x4cd9523c    92  scvtf d0, w8
0x4cd95240    96  fcmp d29, d0
0x4cd95244   100  b.ne #+0x9c (addr 0x4cd952e0)
0x4cd95248   104  b #-0x3c (addr 0x4cd9520c)
0x4cd9524c   108  ldur x16, [x0, #-1]
0x4cd95250   112  ldr x17, [x26, #120]
0x4cd95254   116  cmp x16, x17
0x4cd95258   120  b.ne #+0x30 (addr 0x4cd95288)
0x4cd9525c   124  ldur d30, [x0, #7]
0x4cd95260   128  fcvtzs x7, d30
0x4cd95264   132  cmp x7, #0x1 (1)
0x4cd95268   136  ccmn x7, #1, #nzcV, vc
0x4cd9526c   140  b.vc #+0x18 (addr 0x4cd95284)
0x4cd95270   144  sub csp, jssp, #0x8 (8)
0x4cd95274   148  str lr, [jssp, #-8]!
0x4cd95278   152  ldr x16, pc+64 (addr 0x000000004cd952b8)    ;; code: STUB, DoubleToIStub, minor: 127424
0x4cd9527c   156  blr x16
0x4cd95280   160  ldr lr, [jssp], #8
0x4cd95284   164  b #+0x24 (addr 0x4cd952a8)
0x4cd95288   168  ldp x7, x6, [x26, #64]
0x4cd9528c   172  cmp x0, x7
0x4cd95290   176  cset x7, eq
0x4cd95294   180  ccmp x0, x6, #nZcv, ne
0x4cd95298   184  b.eq #+0x10 (addr 0x4cd952a8)
0x4cd9529c   188  ldr x16, [x26, #40]
0x4cd952a0   192  cmp x0, x16
0x4cd952a4   196  b.ne #+0x4c (addr 0x4cd952f0)
0x4cd952a8   200  b #-0x8c (addr 0x4cd9521c)
0x4cd952ac   204  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd952b0   208  d63f03e0       constant
0x4cd952b4   212  d503201f       constant
0x4cd952b8   216  4cd4b6c0       constant
0x4cd952bc   220  00000000       constant
0x4cd952c0   224  movz x16, #0x0
0x4cd952c4   228  sub csp, jssp, #0x10 (16)
0x4cd952c8   232  stp fp, lr, [jssp, #-16]!
0x4cd952cc   236  bl #+0x34 (addr 0x4cd95300)
0x4cd952d0   240  movz x16, #0x8
0x4cd952d4   244  sub csp, jssp, #0x10 (16)
0x4cd952d8   248  stp fp, lr, [jssp, #-16]!
0x4cd952dc   252  bl #+0x24 (addr 0x4cd95300)
0x4cd952e0   256  movz x16, #0x10
0x4cd952e4   260  sub csp, jssp, #0x10 (16)
0x4cd952e8   264  stp fp, lr, [jssp, #-16]!
0x4cd952ec   268  bl #+0x14 (addr 0x4cd95300)
0x4cd952f0   272  movz x16, #0x18
0x4cd952f4   276  sub csp, jssp, #0x10 (16)
0x4cd952f8   280  stp fp, lr, [jssp, #-16]!
0x4cd952fc   284  bl #+0x4 (addr 0x4cd95300)
0x4cd95300   288  movz x17, #0xa00000000
0x4cd95304   292  sub csp, jssp, #0x10 (16)
0x4cd95308   296  stp x17, cp, [jssp, #-16]!
0x4cd9530c   300  add fp, jssp, #0x10 (16)
0x4cd95310   304  ldr x17, pc+24 (addr 0x000000004cd95328)    ;; lazy deoptimization bailout 0
0x4cd95314   308  add x17, x17, x16
0x4cd95318   312  br x17
0x4cd9531c   316  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd95320   320  d63f03e0       constant
0x4cd95324   324  d503201f       constant
0x4cd95328   328  4cb06000       constant
0x4cd9532c   332  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 19)
0x4cd95278  code target (STUB)  (0x4cd4b6c0)
0x4cd952ac  constant pool (size 20)
0x4cd95310  runtime entry
0x4cd9531c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = Uint8Array
compiler = unknown
Instructions (size = 120)
0x4cd959e0     0  sub csp, jssp, #0x8 (8)
0x4cd959e4     4  str x3, [jssp, #-8]!
0x4cd959e8     8  sub csp, jssp, #0x8 (8)
0x4cd959ec    12  str x0, [jssp, #-8]!
0x4cd959f0    16  ldr x0, pc+80 (addr 0x000000004cd95a40)    ;; object: 0x210c5d51 Cell for 0
0x4cd959f4    20  ldur x0, [x0, #7]
0x4cd959f8    24  cmp x0, #0x0 (0)
0x4cd959fc    28  b.ne #+0x2c (addr 0x4cd95a28)
0x4cd95a00    32  ldr x0, pc+72 (addr 0x000000004cd95a48)    ;; object: 0x210df5c9 WeakCell for 0x21048251 PropertyCell for 0x210481e9 <JS Function Uint8Array (SharedFunctionInfo 0x21048141)>
0x4cd95a04    36  ldur x0, [x0, #7]
0x4cd95a08    40  tbz w0, #0, #+0x20 (addr 0x4cd95a28)
0x4cd95a0c    44  ldur x0, [x0, #15]
0x4cd95a10    48  ldr x16, [x26, #88]
0x4cd95a14    52  cmp x0, x16
0x4cd95a18    56  b.eq #+0x10 (addr 0x4cd95a28)
0x4cd95a1c    60  add jssp, jssp, #0x10 (16)
0x4cd95a20    64  ret
0x4cd95a24    68  b #+0x14 (addr 0x4cd95a38)
0x4cd95a28    72  ldr x0, [jssp], #8
0x4cd95a2c    76  ldr x3, [jssp], #8
0x4cd95a30    80  ldr x16, pc+32 (addr 0x000000004cd95a50)    ;; code: BUILTIN
0x4cd95a34    84  br x16
0x4cd95a38    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd95a3c    92  d63f03e0       constant
0x4cd95a40    96  210c5d51       constant
0x4cd95a44   100  00000000       constant
0x4cd95a48   104  210df5c9       constant
0x4cd95a4c   108  00000000       constant
0x4cd95a50   112  4cd222e0       constant
0x4cd95a54   116  00000000       constant


RelocInfo (size = 9)
0x4cd959f0  embedded object  (0x210c5d51 Cell for 0)
0x4cd95a00  embedded object  (0x210df5c9 WeakCell for 0x21048251 PropertyCell for 0x210481e9 <JS Function Uint8Array (SharedFunctionInfo 0x21048141)>)
0x4cd95a30  code target (BUILTIN)  (0x4cd222e0)
0x4cd95a38  constant pool (size 32)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0x4cd95ac0     0  ldur x0, [x1, #47]
0x4cd95ac4     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0x4cd95ac0     0  ldur x0, [x1, #47]
0x4cd95ac4     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = TO_BOOLEAN_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 17
type = NORMAL
name = ToBooleanICStub
compiler = crankshaft
Instructions (size = 160)
0x4cd95b40     0  ldr x16, [x26, #40]
0x4cd95b44     4  cmp x0, x16
0x4cd95b48     8  b.eq #+0x24 (addr 0x4cd95b6c)
0x4cd95b4c    12  tbz w0, #0, #+0x4c (addr 0x4cd95b98)
0x4cd95b50    16  ldur x2, [x0, #-1]
0x4cd95b54    20  ldrb w1, [x2, #12]
0x4cd95b58    24  tbnz w1, #4, #+0x14 (addr 0x4cd95b6c)
0x4cd95b5c    28  ldrb w1, [x2, #11]
0x4cd95b60    32  cmp x1, #0xb1 (177)
0x4cd95b64    36  b.ge #+0x10 (addr 0x4cd95b74)
0x4cd95b68    40  b #+0x30 (addr 0x4cd95b98)
0x4cd95b6c    44  ldr x0, pc+28 (addr 0x000000004cd95b88)    ;; object: 0x210042b1 <false>
0x4cd95b70    48  ret
0x4cd95b74    52  ldr x0, pc+28 (addr 0x000000004cd95b90)    ;; object: 0x21004281 <true>
0x4cd95b78    56  ret
0x4cd95b7c    60  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd95b80    64  d63f03e0       constant
0x4cd95b84    68  d503201f       constant
0x4cd95b88    72  210042b1       constant
0x4cd95b8c    76  00000000       constant
0x4cd95b90    80  21004281       constant
0x4cd95b94    84  00000000       constant
0x4cd95b98    88  movz x16, #0x0
0x4cd95b9c    92  sub csp, jssp, #0x10 (16)
0x4cd95ba0    96  stp fp, lr, [jssp, #-16]!
0x4cd95ba4   100  bl #+0x4 (addr 0x4cd95ba8)
0x4cd95ba8   104  movz x17, #0xa00000000
0x4cd95bac   108  sub csp, jssp, #0x10 (16)
0x4cd95bb0   112  stp x17, cp, [jssp, #-16]!
0x4cd95bb4   116  add fp, jssp, #0x10 (16)
0x4cd95bb8   120  ldr x17, pc+24 (addr 0x000000004cd95bd0)    ;; lazy deoptimization bailout 0
0x4cd95bbc   124  add x17, x17, x16
0x4cd95bc0   128  br x17
0x4cd95bc4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd95bc8   136  d63f03e0       constant
0x4cd95bcc   140  d503201f       constant
0x4cd95bd0   144  4cb06000       constant
0x4cd95bd4   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd95b6c  embedded object  (0x210042b1 <false>)
0x4cd95b74  embedded object  (0x21004281 <true>)
0x4cd95b7c  constant pool (size 28)
0x4cd95bb8  runtime entry
0x4cd95bc4  constant pool (size 20)

--- End code ---
kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 17
type = NORMAL
name = ToBooleanICStub(Undefined,SpecObject)
compiler = crankshaft
Instructions (size = 160)
0x4cd95b40     0  ldr x16, [x26, #40]
0x4cd95b44     4  cmp x0, x16
0x4cd95b48     8  b.eq #+0x24 (addr 0x4cd95b6c)
0x4cd95b4c    12  tbz w0, #0, #+0x4c (addr 0x4cd95b98)
0x4cd95b50    16  ldur x2, [x0, #-1]
0x4cd95b54    20  ldrb w1, [x2, #12]
0x4cd95b58    24  tbnz w1, #4, #+0x14 (addr 0x4cd95b6c)
0x4cd95b5c    28  ldrb w1, [x2, #11]
0x4cd95b60    32  cmp x1, #0xb1 (177)
0x4cd95b64    36  b.ge #+0x10 (addr 0x4cd95b74)
0x4cd95b68    40  b #+0x30 (addr 0x4cd95b98)
0x4cd95b6c    44  ldr x0, pc+28 (addr 0x000000004cd95b88)    ;; object: 0x210042b1 <false>
0x4cd95b70    48  ret
0x4cd95b74    52  ldr x0, pc+28 (addr 0x000000004cd95b90)    ;; object: 0x21004281 <true>
0x4cd95b78    56  ret
0x4cd95b7c    60  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd95b80    64  d63f03e0       constant
0x4cd95b84    68  d503201f       constant
0x4cd95b88    72  210042b1       constant
0x4cd95b8c    76  00000000       constant
0x4cd95b90    80  21004281       constant
0x4cd95b94    84  00000000       constant
0x4cd95b98    88  movz x16, #0x0
0x4cd95b9c    92  sub csp, jssp, #0x10 (16)
0x4cd95ba0    96  stp fp, lr, [jssp, #-16]!
0x4cd95ba4   100  bl #+0x4 (addr 0x4cd95ba8)
0x4cd95ba8   104  movz x17, #0xa00000000
0x4cd95bac   108  sub csp, jssp, #0x10 (16)
0x4cd95bb0   112  stp x17, cp, [jssp, #-16]!
0x4cd95bb4   116  add fp, jssp, #0x10 (16)
0x4cd95bb8   120  ldr x17, pc+24 (addr 0x000000004cd95bd0)    ;; lazy deoptimization bailout 0
0x4cd95bbc   124  add x17, x17, x16
0x4cd95bc0   128  br x17
0x4cd95bc4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd95bc8   136  d63f03e0       constant
0x4cd95bcc   140  d503201f       constant
0x4cd95bd0   144  4cb06000       constant
0x4cd95bd4   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd95b6c  embedded object  (0x210042b1 <false>)
0x4cd95b74  embedded object  (0x21004281 <true>)
0x4cd95b7c  constant pool (size 28)
0x4cd95bb8  runtime entry
0x4cd95bc4  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*BOOLEAN -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 624)
0x4cd96240     0  orr x16, x1, x0
0x4cd96244     4  tbnz w16, #0, #+0x10 (addr 0x4cd96254)
0x4cd96248     8  asr x1, x1, #32
0x4cd9624c    12  sub x0, x1, x0, asr #32
0x4cd96250    16  ret
0x4cd96254    20  cmp x0, x1
0x4cd96258    24  b.ne #+0x30 (addr 0x4cd96288)
0x4cd9625c    28  ldur x16, [x0, #-1]
0x4cd96260    32  ldr x17, [x26, #120]
0x4cd96264    36  cmp x16, x17
0x4cd96268    40  b.eq #+0xc (addr 0x4cd96274)
0x4cd9626c    44  movz x0, #0x0
0x4cd96270    48  ret
0x4cd96274    52  ldur d0, [x0, #7]
0x4cd96278    56  fcmp d0, d0
0x4cd9627c    60  b.vc #-0x10 (addr 0x4cd9626c)
0x4cd96280    64  movn x0, #0x0
0x4cd96284    68  ret
0x4cd96288    72  and x16, x1, x0
0x4cd9628c    76  tbnz w16, #0, #+0x64 (addr 0x4cd962f0)
0x4cd96290    80  tbz w0, #0, #+0x24 (addr 0x4cd962b4)
0x4cd96294    84  ldur x16, [x0, #-1]
0x4cd96298    88  ldr x17, [x26, #120]
0x4cd9629c    92  cmp x16, x17
0x4cd962a0    96  b.eq #+0x8 (addr 0x4cd962a8)
0x4cd962a4   100  ret
0x4cd962a8   104  ldur d0, [x0, #7]
0x4cd962ac   108  scvtf d1, x1, #32
0x4cd962b0   112  b #+0x24 (addr 0x4cd962d4)
0x4cd962b4   116  ldur x16, [x1, #-1]
0x4cd962b8   120  ldr x17, [x26, #120]
0x4cd962bc   124  cmp x16, x17
0x4cd962c0   128  b.eq #+0xc (addr 0x4cd962cc)
0x4cd962c4   132  movz x0, #0x1
0x4cd962c8   136  ret
0x4cd962cc   140  ldur d1, [x1, #7]
0x4cd962d0   144  scvtf d0, x0, #32
0x4cd962d4   148  fcmp d1, d0
0x4cd962d8   152  b.vs #+0x10 (addr 0x4cd962e8)
0x4cd962dc   156  cset x0, gt
0x4cd962e0   160  csinv x0, x0, xzr, ge
0x4cd962e4   164  ret
0x4cd962e8   168  movn x0, #0x0
0x4cd962ec   172  ret
0x4cd962f0   176  ldur x10, [x0, #-1]
0x4cd962f4   180  ldur x12, [x1, #-1]
0x4cd962f8   184  ldrb w11, [x10, #11]
0x4cd962fc   188  ldrb w13, [x12, #11]
0x4cd96300   192  cmp x11, #0xb1 (177)
0x4cd96304   196  b.lt #+0x8 (addr 0x4cd9630c)
0x4cd96308   200  ret
0x4cd9630c   204  cmp x11, #0x83 (131)
0x4cd96310   208  movz x16, #0x83
0x4cd96314   212  ccmp x13, x16, #nZcv, ne
0x4cd96318   216  movz x16, #0xb1
0x4cd9631c   220  ccmp x13, x16, #NzcV, ne
0x4cd96320   224  b.ge #-0x18 (addr 0x4cd96308)
0x4cd96324   228  orr x14, x13, x11
0x4cd96328   232  tst x14, #0xc0
0x4cd9632c   236  b.eq #-0x24 (addr 0x4cd96308)
0x4cd96330   240  cmp x11, #0x81 (129)
0x4cd96334   244  b.ne #+0x18 (addr 0x4cd9634c)
0x4cd96338   248  cmp x12, x10
0x4cd9633c   252  b.ne #+0x10 (addr 0x4cd9634c)
0x4cd96340   256  ldur d1, [x1, #7]
0x4cd96344   260  ldur d0, [x0, #7]
0x4cd96348   264  b #-0x74 (addr 0x4cd962d4)
0x4cd9634c   268  movz x16, #0x87
0x4cd96350   272  and x14, x13, x16
0x4cd96354   276  movz x16, #0x87
0x4cd96358   280  and x15, x11, x16
0x4cd9635c   284  cmp x14, #0x4 (4)
0x4cd96360   288  ccmp x15, #4, #nzcv, eq
0x4cd96364   292  b.ne #+0x5c (addr 0x4cd963c0)
0x4cd96368   296  ldur x10, [x1, #15]
0x4cd9636c   300  ldur x11, [x0, #15]
0x4cd96370   304  cmp x10, x11
0x4cd96374   308  b.eq #+0xc (addr 0x4cd96380)
0x4cd96378   312  movz x0, #0x100000000
0x4cd9637c   316  ret
0x4cd96380   320  cbnz x10, #+0xc (addr 0x4cd9638c)
0x4cd96384   324  movz x0, #0x0
0x4cd96388   328  ret
0x4cd9638c   332  asr x10, x10, #32
0x4cd96390   336  add x11, x10, #0x17 (23)
0x4cd96394   340  add x1, x1, x11
0x4cd96398   344  add x0, x0, x11
0x4cd9639c   348  neg x10, x10
0x4cd963a0   352  ldrb w11, [x1, x10]
0x4cd963a4   356  ldrb w12, [x0, x10]
0x4cd963a8   360  cmp x11, x12
0x4cd963ac   364  b.ne #-0x34 (addr 0x4cd96378)
0x4cd963b0   368  add x10, x10, #0x1 (1)
0x4cd963b4   372  cbnz x10, #-0x14 (addr 0x4cd963a0)
0x4cd963b8   376  movz x0, #0x0
0x4cd963bc   380  ret
0x4cd963c0   384  movz x16, #0xc00000000
0x4cd963c4   388  sub csp, jssp, #0x10 (16)
0x4cd963c8   392  stp fp, lr, [jssp, #-16]!
0x4cd963cc   396  sub csp, jssp, #0x10 (16)
0x4cd963d0   400  str x16, [jssp, #-8]!
0x4cd963d4   404  ldr x17, pc+172 (addr 0x000000004cd96480)    ;; object: 0x4cd961e1 <Code: COMPARE_IC>
0x4cd963d8   408  sub csp, jssp, #0x10 (16)
0x4cd963dc   412  str x17, [jssp, #-8]!
0x4cd963e0   416  add fp, jssp, #0x10 (16)
0x4cd963e4   420  sub csp, jssp, #0x10 (16)
0x4cd963e8   424  stp x0, x1, [jssp, #-16]!
0x4cd963ec   428  movz x0, #0x2
0x4cd963f0   432  ldr x1, pc+152 (addr 0x000000004cd96488)    ;; external reference (Runtime::StrictEqual)
0x4cd963f4   436  ldr x16, pc+156 (addr 0x000000004cd96490)    ;; code: STUB, CEntryStub, minor: 4
0x4cd963f8   440  blr x16
0x4cd963fc   444  mov jssp, fp
0x4cd96400   448  ldp fp, lr, [jssp], #16
0x4cd96404   452  ldr x1, [x26, #64]
0x4cd96408   456  sub x0, x0, x1
0x4cd9640c   460  ret
0x4cd96410   464  movz x16, #0xc00000000
0x4cd96414   468  sub csp, jssp, #0x10 (16)
0x4cd96418   472  stp fp, lr, [jssp, #-16]!
0x4cd9641c   476  sub csp, jssp, #0x10 (16)
0x4cd96420   480  str x16, [jssp, #-8]!
0x4cd96424   484  ldr x17, pc+116 (addr 0x000000004cd96498)    ;; object: 0x4cd961e1 <Code: COMPARE_IC>
0x4cd96428   488  sub csp, jssp, #0x10 (16)
0x4cd9642c   492  str x17, [jssp, #-8]!
0x4cd96430   496  add fp, jssp, #0x10 (16)
0x4cd96434   500  sub csp, jssp, #0x18 (24)
0x4cd96438   504  stp lr, x0, [jssp, #-24]!
0x4cd9643c   508  str x1, [jssp, #16]
0x4cd96440   512  movz x10, #0x2f00000000
0x4cd96444   516  sub csp, jssp, #0x18 (24)
0x4cd96448   520  stp x10, x0, [jssp, #-24]!
0x4cd9644c   524  str x1, [jssp, #16]
0x4cd96450   528  movz x0, #0x3
0x4cd96454   532  ldr x1, pc+76 (addr 0x000000004cd964a0)    ;; external reference (Runtime::CompareIC_Miss)
0x4cd96458   536  ldr x16, pc+80 (addr 0x000000004cd964a8)    ;; code: STUB, CEntryStub, minor: 4
0x4cd9645c   540  blr x16
0x4cd96460   544  add x11, x0, #0x5f (95)
0x4cd96464   548  ldr x1, [jssp, #16]
0x4cd96468   552  ldp lr, x0, [jssp], #24
0x4cd9646c   556  mov jssp, fp
0x4cd96470   560  ldp fp, lr, [jssp], #16
0x4cd96474   564  br x11
0x4cd96478   568  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd9647c   572  d63f03e0       constant
0x4cd96480   576  4cd961e1       constant
0x4cd96484   580  00000000       constant
0x4cd96488   584  00e50928       constant
0x4cd9648c   588  00000000       constant
0x4cd96490   592  4cd06060       constant
0x4cd96494   596  00000000       constant
0x4cd96498   600  4cd961e1       constant
0x4cd9649c   604  00000000       constant
0x4cd964a0   608  00c8a980       constant
0x4cd964a4   612  00000000       constant
0x4cd964a8   616  4cd06060       constant
0x4cd964ac   620  00000000       constant


RelocInfo (size = 16)
0x4cd963d4  embedded object  (0x4cd961e1 <Code: COMPARE_IC>)
0x4cd963f0  external reference (Runtime::StrictEqual)  (0xe50928)
0x4cd963f4  code target (STUB)  (0x4cd06060)
0x4cd96424  embedded object  (0x4cd961e1 <Code: COMPARE_IC>)
0x4cd96454  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cd96458  code target (STUB)  (0x4cd06060)
0x4cd96478  constant pool (size 56)


kind = HANDLER
major_key = <NoCache>Stub
name = global
compiler = unknown
Instructions (size = 120)
0x4cd96520     0  sub csp, jssp, #0x8 (8)
0x4cd96524     4  str x3, [jssp, #-8]!
0x4cd96528     8  sub csp, jssp, #0x8 (8)
0x4cd9652c    12  str x0, [jssp, #-8]!
0x4cd96530    16  ldr x0, pc+80 (addr 0x000000004cd96580)    ;; object: 0x210c5d51 Cell for 0
0x4cd96534    20  ldur x0, [x0, #7]
0x4cd96538    24  cmp x0, #0x0 (0)
0x4cd9653c    28  b.ne #+0x2c (addr 0x4cd96568)
0x4cd96540    32  ldr x0, pc+72 (addr 0x000000004cd96588)    ;; object: 0x210e35c9 WeakCell for 0x210bca39 PropertyCell for 0x233153b9 <JS Global Object>
0x4cd96544    36  ldur x0, [x0, #7]
0x4cd96548    40  tbz w0, #0, #+0x20 (addr 0x4cd96568)
0x4cd9654c    44  ldur x0, [x0, #15]
0x4cd96550    48  ldr x16, [x26, #88]
0x4cd96554    52  cmp x0, x16
0x4cd96558    56  b.eq #+0x10 (addr 0x4cd96568)
0x4cd9655c    60  add jssp, jssp, #0x10 (16)
0x4cd96560    64  ret
0x4cd96564    68  b #+0x14 (addr 0x4cd96578)
0x4cd96568    72  ldr x0, [jssp], #8
0x4cd9656c    76  ldr x3, [jssp], #8
0x4cd96570    80  ldr x16, pc+32 (addr 0x000000004cd96590)    ;; code: BUILTIN
0x4cd96574    84  br x16
0x4cd96578    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cd9657c    92  d63f03e0       constant
0x4cd96580    96  210c5d51       constant
0x4cd96584   100  00000000       constant
0x4cd96588   104  210e35c9       constant
0x4cd9658c   108  00000000       constant
0x4cd96590   112  4cd222e0       constant
0x4cd96594   116  00000000       constant


RelocInfo (size = 9)
0x4cd96530  embedded object  (0x210c5d51 Cell for 0)
0x4cd96540  embedded object  (0x210e35c9 WeakCell for 0x210bca39 PropertyCell for 0x233153b9 <JS Global Object>)
0x4cd96570  code target (BUILTIN)  (0x4cd222e0)
0x4cd96578  constant pool (size 32)

kind = HANDLER
major_key = <NoCache>Stub
name = process
compiler = unknown
Instructions (size = 184)
0x4cd96600     0  sub csp, jssp, #0x8 (8)
0x4cd96604     4  str x3, [jssp, #-8]!
0x4cd96608     8  sub csp, jssp, #0x8 (8)
0x4cd9660c    12  str x0, [jssp, #-8]!
0x4cd96610    16  ldr x0, pc+144 (addr 0x000000004cd966a0)    ;; object: 0x210e3629 Cell for 0
0x4cd96614    20  ldur x0, [x0, #7]
0x4cd96618    24  cmp x0, #0x0 (0)
0x4cd9661c    28  b.ne #+0x68 (addr 0x4cd96684)
0x4cd96620    32  mov x16, fp
0x4cd96624    36  ldur x4, [x16, #-8]
0x4cd96628    40  tbnz w4, #0, #+0xc (addr 0x4cd96634)
0x4cd9662c    44  ldr x16, [x16]
0x4cd96630    48  b #-0xc (addr 0x4cd96624)
0x4cd96634    52  ldur x4, [x4, #39]
0x4cd96638    56  ldur x16, [x1, #23]
0x4cd9663c    60  cmp x4, x16
0x4cd96640    64  b.eq #+0x1c (addr 0x4cd9665c)
0x4cd96644    68  movz x17, #0x26f
0x4cd96648    72  ldr x4, [x4, x17]
0x4cd9664c    76  movz x17, #0x26f
0x4cd96650    80  ldr x16, [x16, x17]
0x4cd96654    84  cmp x4, x16
0x4cd96658    88  b.ne #+0x2c (addr 0x4cd96684)
0x4cd9665c    92  ldr x0, pc+76 (addr 0x000000004cd966a8)    ;; object: 0x210e3639 WeakCell for 0x210c79b9 PropertyCell for 0x23392ce9 <a process with map 0x2a81c0f1>
0x4cd96660    96  ldur x0, [x0, #7]
0x4cd96664   100  tbz w0, #0, #+0x20 (addr 0x4cd96684)
0x4cd96668   104  ldur x0, [x0, #15]
0x4cd9666c   108  ldr x16, [x26, #88]
0x4cd96670   112  cmp x0, x16
0x4cd96674   116  b.eq #+0x10 (addr 0x4cd96684)
0x4cd96678   120  add jssp, jssp, #0x10 (16)
0x4cd9667c   124  ret
0x4cd96680   128  b #+0x14 (addr 0x4cd96694)
0x4cd96684   132  ldr x0, [jssp], #8
0x4cd96688   136  ldr x3, [jssp], #8
0x4cd9668c   140  ldr x16, pc+36 (addr 0x000000004cd966b0)    ;; code: BUILTIN
0x4cd96690   144  br x16
0x4cd96694   148  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cd96698   152  d63f03e0       constant
0x4cd9669c   156  d503201f       constant
0x4cd966a0   160  210e3629       constant
0x4cd966a4   164  00000000       constant
0x4cd966a8   168  210e3639       constant
0x4cd966ac   172  00000000       constant
0x4cd966b0   176  4cd222e0       constant
0x4cd966b4   180  00000000       constant


RelocInfo (size = 11)
0x4cd96610  embedded object  (0x210e3629 Cell for 0)
0x4cd9665c  embedded object  (0x210e3639 WeakCell for 0x210c79b9 PropertyCell for 0x23392ce9 <a process with map 0x2a81c0f1>)
0x4cd9668c  code target (BUILTIN)  (0x4cd222e0)
0x4cd96694  constant pool (size 36)

kind = HANDLER
major_key = <NoCache>Stub
name = noDeprecation
compiler = unknown
Instructions (size = 632)
0x4cd96720     0  sub csp, jssp, #0x8 (8)
0x4cd96724     4  str x3, [jssp, #-8]!
0x4cd96728     8  sub csp, jssp, #0x8 (8)
0x4cd9672c    12  str x0, [jssp, #-8]!
0x4cd96730    16  ldr x0, pc+544 (addr 0x000000004cd96950)    ;; object: 0x210e3709 Cell for 0
0x4cd96734    20  ldur x0, [x0, #7]
0x4cd96738    24  cmp x0, #0x0 (0)
0x4cd9673c    28  b.ne #+0x1f8 (addr 0x4cd96934)
0x4cd96740    32  ldur x4, [x1, #-1]
0x4cd96744    36  ldrb w0, [x4, #12]
0x4cd96748    40  movz x16, #0x44
0x4cd9674c    44  tst x0, x16
0x4cd96750    48  b.ne #+0x1e4 (addr 0x4cd96934)
0x4cd96754    52  ldrb w0, [x4, #11]
0x4cd96758    56  cmp x0, #0xb1 (177)
0x4cd9675c    60  b.lt #+0x1d8 (addr 0x4cd96934)
0x4cd96760    64  ldur x0, [x1, #7]
0x4cd96764    68  ldur x4, [x0, #-1]
0x4cd96768    72  ldr x16, [x26, #432]
0x4cd9676c    76  cmp x4, x16
0x4cd96770    80  b.ne #+0x1c4 (addr 0x4cd96934)
0x4cd96774    84  ldursw x4, [x0, #35]
0x4cd96778    88  sub x4, x4, #0x1 (1)
0x4cd9677c    92  movz x16, #0xeabc
0x4cd96780    96  movk x16, #0x24ab, lsl #16
0x4cd96784   100  and x4, x4, x16
0x4cd96788   104  add x4, x4, x4, lsl #1
0x4cd9678c   108  add x4, x0, x4, lsl #3
0x4cd96790   112  ldur x4, [x4, #55]
0x4cd96794   116  ldr x16, [x26, #40]
0x4cd96798   120  cmp x4, x16
0x4cd9679c   124  b.eq #+0x188 (addr 0x4cd96924)
0x4cd967a0   128  ldr x16, pc+440 (addr 0x000000004cd96958)    ;; object: 0x210dae31 <String[13]: noDeprecation>
0x4cd967a4   132  cmp x4, x16
0x4cd967a8   136  b.eq #+0x18c (addr 0x4cd96934)
0x4cd967ac   140  ldr x16, [x26, #88]
0x4cd967b0   144  cmp x4, x16
0x4cd967b4   148  b.eq #+0x1c (addr 0x4cd967d0)
0x4cd967b8   152  ldur x4, [x4, #-1]
0x4cd967bc   156  ldrb w4, [x4, #11]
0x4cd967c0   160  tst x4, #0xc0
0x4cd967c4   164  movz x16, #0x80
0x4cd967c8   168  ccmp x4, x16, #nZcv, ne
0x4cd967cc   172  b.ne #+0x168 (addr 0x4cd96934)
0x4cd967d0   176  ldursw x4, [x0, #35]
0x4cd967d4   180  sub x4, x4, #0x1 (1)
0x4cd967d8   184  movz x16, #0xeabd
0x4cd967dc   188  movk x16, #0x24ab, lsl #16
0x4cd967e0   192  and x4, x4, x16
0x4cd967e4   196  add x4, x4, x4, lsl #1
0x4cd967e8   200  add x4, x0, x4, lsl #3
0x4cd967ec   204  ldur x4, [x4, #55]
0x4cd967f0   208  ldr x16, [x26, #40]
0x4cd967f4   212  cmp x4, x16
0x4cd967f8   216  b.eq #+0x12c (addr 0x4cd96924)
0x4cd967fc   220  ldr x16, pc+356 (addr 0x000000004cd96960)    ;; object: 0x210dae31 <String[13]: noDeprecation>
0x4cd96800   224  cmp x4, x16
0x4cd96804   228  b.eq #+0x130 (addr 0x4cd96934)
0x4cd96808   232  ldr x16, [x26, #88]
0x4cd9680c   236  cmp x4, x16
0x4cd96810   240  b.eq #+0x1c (addr 0x4cd9682c)
0x4cd96814   244  ldur x4, [x4, #-1]
0x4cd96818   248  ldrb w4, [x4, #11]
0x4cd9681c   252  tst x4, #0xc0
0x4cd96820   256  movz x16, #0x80
0x4cd96824   260  ccmp x4, x16, #nZcv, ne
0x4cd96828   264  b.ne #+0x10c (addr 0x4cd96934)
0x4cd9682c   268  ldursw x4, [x0, #35]
0x4cd96830   272  sub x4, x4, #0x1 (1)
0x4cd96834   276  movz x16, #0xeabf
0x4cd96838   280  movk x16, #0x24ab, lsl #16
0x4cd9683c   284  and x4, x4, x16
0x4cd96840   288  add x4, x4, x4, lsl #1
0x4cd96844   292  add x4, x0, x4, lsl #3
0x4cd96848   296  ldur x4, [x4, #55]
0x4cd9684c   300  ldr x16, [x26, #40]
0x4cd96850   304  cmp x4, x16
0x4cd96854   308  b.eq #+0xd0 (addr 0x4cd96924)
0x4cd96858   312  ldr x16, pc+272 (addr 0x000000004cd96968)    ;; object: 0x210dae31 <String[13]: noDeprecation>
0x4cd9685c   316  cmp x4, x16
0x4cd96860   320  b.eq #+0xd4 (addr 0x4cd96934)
0x4cd96864   324  ldr x16, [x26, #88]
0x4cd96868   328  cmp x4, x16
0x4cd9686c   332  b.eq #+0x1c (addr 0x4cd96888)
0x4cd96870   336  ldur x4, [x4, #-1]
0x4cd96874   340  ldrb w4, [x4, #11]
0x4cd96878   344  tst x4, #0xc0
0x4cd9687c   348  movz x16, #0x80
0x4cd96880   352  ccmp x4, x16, #nZcv, ne
0x4cd96884   356  b.ne #+0xb0 (addr 0x4cd96934)
0x4cd96888   360  ldursw x4, [x0, #35]
0x4cd9688c   364  sub x4, x4, #0x1 (1)
0x4cd96890   368  movz x16, #0xeac2
0x4cd96894   372  movk x16, #0x24ab, lsl #16
0x4cd96898   376  and x4, x4, x16
0x4cd9689c   380  add x4, x4, x4, lsl #1
0x4cd968a0   384  add x4, x0, x4, lsl #3
0x4cd968a4   388  ldur x4, [x4, #55]
0x4cd968a8   392  ldr x16, [x26, #40]
0x4cd968ac   396  cmp x4, x16
0x4cd968b0   400  b.eq #+0x74 (addr 0x4cd96924)
0x4cd968b4   404  ldr x16, pc+188 (addr 0x000000004cd96970)    ;; object: 0x210dae31 <String[13]: noDeprecation>
0x4cd968b8   408  cmp x4, x16
0x4cd968bc   412  b.eq #+0x78 (addr 0x4cd96934)
0x4cd968c0   416  ldr x16, [x26, #88]
0x4cd968c4   420  cmp x4, x16
0x4cd968c8   424  b.eq #+0x1c (addr 0x4cd968e4)
0x4cd968cc   428  ldur x4, [x4, #-1]
0x4cd968d0   432  ldrb w4, [x4, #11]
0x4cd968d4   436  tst x4, #0xc0
0x4cd968d8   440  movz x16, #0x80
0x4cd968dc   444  ccmp x4, x16, #nZcv, ne
0x4cd968e0   448  b.ne #+0x54 (addr 0x4cd96934)
0x4cd968e4   452  sub csp, jssp, #0x38 (56)
0x4cd968e8   456  stp x3, x5, [jssp, #-32]!
0x4cd968ec   460  stp x6, lr, [jssp, #16]
0x4cd968f0   464  stp x0, x1, [jssp, #-24]!
0x4cd968f4   468  str x2, [jssp, #16]
0x4cd968f8   472  ldur x0, [x1, #7]
0x4cd968fc   476  ldr x1, pc+124 (addr 0x000000004cd96978)    ;; object: 0x210dae31 <String[13]: noDeprecation>
0x4cd96900   480  ldr x16, pc+128 (addr 0x000000004cd96980)    ;; code: STUB, NameDictionaryLookupStub, minor: 1
0x4cd96904   484  blr x16
0x4cd96908   488  mov x4, x0
0x4cd9690c   492  ldp x2, x3, [jssp, #16]
0x4cd96910   496  ldp x0, x1, [jssp], #32
0x4cd96914   500  ldr lr, [jssp, #16]
0x4cd96918   504  ldp x5, x6, [jssp], #24
0x4cd9691c   508  cbz x4, #+0x8 (addr 0x4cd96924)
0x4cd96920   512  b #+0x14 (addr 0x4cd96934)
0x4cd96924   516  add jssp, jssp, #0x10 (16)
0x4cd96928   520  ldr x0, pc+96 (addr 0x000000004cd96988)    ;; object: 0x21004241 <undefined>
0x4cd9692c   524  ret
0x4cd96930   528  b #+0x14 (addr 0x4cd96944)
0x4cd96934   532  ldr x0, [jssp], #8
0x4cd96938   536  ldr x3, [jssp], #8
0x4cd9693c   540  ldr x16, pc+84 (addr 0x000000004cd96990)    ;; code: BUILTIN
0x4cd96940   544  br x16
0x4cd96944   548  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0x4cd96948   552  d63f03e0       constant
0x4cd9694c   556  d503201f       constant
0x4cd96950   560  210e3709       constant
0x4cd96954   564  00000000       constant
0x4cd96958   568  210dae31       constant
0x4cd9695c   572  00000000       constant
0x4cd96960   576  210dae31       constant
0x4cd96964   580  00000000       constant
0x4cd96968   584  210dae31       constant
0x4cd9696c   588  00000000       constant
0x4cd96970   592  210dae31       constant
0x4cd96974   596  00000000       constant
0x4cd96978   600  210dae31       constant
0x4cd9697c   604  00000000       constant
0x4cd96980   608  4cd8b120       constant
0x4cd96984   612  00000000       constant
0x4cd96988   616  21004241       constant
0x4cd9698c   620  00000000       constant
0x4cd96990   624  4cd222e0       constant
0x4cd96994   628  00000000       constant


RelocInfo (size = 25)
0x4cd96730  embedded object  (0x210e3709 Cell for 0)
0x4cd967a0  embedded object  (0x210dae31 <String[13]: noDeprecation>)
0x4cd967fc  embedded object  (0x210dae31 <String[13]: noDeprecation>)
0x4cd96858  embedded object  (0x210dae31 <String[13]: noDeprecation>)
0x4cd968b4  embedded object  (0x210dae31 <String[13]: noDeprecation>)
0x4cd968fc  embedded object  (0x210dae31 <String[13]: noDeprecation>)
0x4cd96900  code target (STUB)  (0x4cd8b120)
0x4cd96928  embedded object  (0x21004241 <undefined>)
0x4cd9693c  code target (BUILTIN)  (0x4cd222e0)
0x4cd96944  constant pool (size 84)

kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0x4cd96a00     0  sub csp, jssp, #0x8 (8)
0x4cd96a04     4  str x3, [jssp, #-8]!
0x4cd96a08     8  sub csp, jssp, #0x8 (8)
0x4cd96a0c    12  str x4, [jssp, #-8]!
0x4cd96a10    16  ldr x3, pc+104 (addr 0x000000004cd96a78)    ;; object: 0x210e3839 Cell for 0
0x4cd96a14    20  ldur x3, [x3, #7]
0x4cd96a18    24  cmp x3, #0x0 (0)
0x4cd96a1c    28  b.ne #+0x8 (addr 0x4cd96a24)
0x4cd96a20    32  b #+0x18 (addr 0x4cd96a38)
0x4cd96a24    36  ldr x2, pc+92 (addr 0x000000004cd96a80)    ;; object: 0x21005371 <String[9]: prototype>
0x4cd96a28    40  ldr x4, [jssp], #8
0x4cd96a2c    44  ldr x3, [jssp], #8
0x4cd96a30    48  ldr x16, pc+88 (addr 0x000000004cd96a88)    ;; code: BUILTIN
0x4cd96a34    52  br x16
0x4cd96a38    56  add jssp, jssp, #0x10 (16)
0x4cd96a3c    60  ldr x3, pc+84 (addr 0x000000004cd96a90)    ;; object: 0x210404a9 <AccessorInfo>
0x4cd96a40    64  ldr x4, pc+88 (addr 0x000000004cd96a98)    ;; object: 0x21005371 <String[9]: prototype>
0x4cd96a44    68  sub csp, jssp, #0x28 (40)
0x4cd96a48    72  stp x4, x3, [jssp, #-32]!
0x4cd96a4c    76  stp x1, x1, [jssp, #16]
0x4cd96a50    80  str x0, [jssp, #-8]!
0x4cd96a54    84  movz x16, #0x100000000
0x4cd96a58    88  sub csp, jssp, #0x8 (8)
0x4cd96a5c    92  str x16, [jssp, #-8]!
0x4cd96a60    96  movz x0, #0x6
0x4cd96a64   100  ldr x1, pc+60 (addr 0x000000004cd96aa0)    ;; external reference (Runtime::StoreCallbackProperty)
0x4cd96a68   104  ldr x16, pc+64 (addr 0x000000004cd96aa8)    ;; code: STUB, CEntryStub, minor: 4
0x4cd96a6c   108  br x16
0x4cd96a70   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd96a74   116  d63f03e0       constant
0x4cd96a78   120  210e3839       constant
0x4cd96a7c   124  00000000       constant
0x4cd96a80   128  21005371       constant
0x4cd96a84   132  00000000       constant
0x4cd96a88   136  4cd22420       constant
0x4cd96a8c   140  00000000       constant
0x4cd96a90   144  210404a9       constant
0x4cd96a94   148  00000000       constant
0x4cd96a98   152  21005371       constant
0x4cd96a9c   156  00000000       constant
0x4cd96aa0   160  00c8b560       constant
0x4cd96aa4   164  00000000       constant
0x4cd96aa8   168  4cd06060       constant
0x4cd96aac   172  00000000       constant


RelocInfo (size = 14)
0x4cd96a10  embedded object  (0x210e3839 Cell for 0)
0x4cd96a24  embedded object  (0x21005371 <String[9]: prototype>)
0x4cd96a30  code target (BUILTIN)  (0x4cd22420)
0x4cd96a3c  embedded object  (0x210404a9 <AccessorInfo>)
0x4cd96a40  embedded object  (0x21005371 <String[9]: prototype>)
0x4cd96a64  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0x4cd96a68  code target (STUB)  (0x4cd06060)
0x4cd96a70  constant pool (size 64)

kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0x4cd96b20     0  sub csp, jssp, #0x8 (8)
0x4cd96b24     4  str x3, [jssp, #-8]!
0x4cd96b28     8  sub csp, jssp, #0x8 (8)
0x4cd96b2c    12  str x4, [jssp, #-8]!
0x4cd96b30    16  ldr x3, pc+104 (addr 0x000000004cd96b98)    ;; object: 0x210e3941 Cell for 0
0x4cd96b34    20  ldur x3, [x3, #7]
0x4cd96b38    24  cmp x3, #0x0 (0)
0x4cd96b3c    28  b.ne #+0x8 (addr 0x4cd96b44)
0x4cd96b40    32  b #+0x18 (addr 0x4cd96b58)
0x4cd96b44    36  ldr x2, pc+92 (addr 0x000000004cd96ba0)    ;; object: 0x21005371 <String[9]: prototype>
0x4cd96b48    40  ldr x4, [jssp], #8
0x4cd96b4c    44  ldr x3, [jssp], #8
0x4cd96b50    48  ldr x16, pc+88 (addr 0x000000004cd96ba8)    ;; code: BUILTIN
0x4cd96b54    52  br x16
0x4cd96b58    56  add jssp, jssp, #0x10 (16)
0x4cd96b5c    60  ldr x3, pc+84 (addr 0x000000004cd96bb0)    ;; object: 0x210404a9 <AccessorInfo>
0x4cd96b60    64  ldr x4, pc+88 (addr 0x000000004cd96bb8)    ;; object: 0x21005371 <String[9]: prototype>
0x4cd96b64    68  sub csp, jssp, #0x28 (40)
0x4cd96b68    72  stp x4, x3, [jssp, #-32]!
0x4cd96b6c    76  stp x1, x1, [jssp, #16]
0x4cd96b70    80  str x0, [jssp, #-8]!
0x4cd96b74    84  movz x16, #0x100000000
0x4cd96b78    88  sub csp, jssp, #0x8 (8)
0x4cd96b7c    92  str x16, [jssp, #-8]!
0x4cd96b80    96  movz x0, #0x6
0x4cd96b84   100  ldr x1, pc+60 (addr 0x000000004cd96bc0)    ;; external reference (Runtime::StoreCallbackProperty)
0x4cd96b88   104  ldr x16, pc+64 (addr 0x000000004cd96bc8)    ;; code: STUB, CEntryStub, minor: 4
0x4cd96b8c   108  br x16
0x4cd96b90   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd96b94   116  d63f03e0       constant
0x4cd96b98   120  210e3941       constant
0x4cd96b9c   124  00000000       constant
0x4cd96ba0   128  21005371       constant
0x4cd96ba4   132  00000000       constant
0x4cd96ba8   136  4cd22420       constant
0x4cd96bac   140  00000000       constant
0x4cd96bb0   144  210404a9       constant
0x4cd96bb4   148  00000000       constant
0x4cd96bb8   152  21005371       constant
0x4cd96bbc   156  00000000       constant
0x4cd96bc0   160  00c8b560       constant
0x4cd96bc4   164  00000000       constant
0x4cd96bc8   168  4cd06060       constant
0x4cd96bcc   172  00000000       constant


RelocInfo (size = 14)
0x4cd96b30  embedded object  (0x210e3941 Cell for 0)
0x4cd96b44  embedded object  (0x21005371 <String[9]: prototype>)
0x4cd96b50  code target (BUILTIN)  (0x4cd22420)
0x4cd96b5c  embedded object  (0x210404a9 <AccessorInfo>)
0x4cd96b60  embedded object  (0x21005371 <String[9]: prototype>)
0x4cd96b84  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0x4cd96b88  code target (STUB)  (0x4cd06060)
0x4cd96b90  constant pool (size 64)

kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0x4cd96c40     0  sub csp, jssp, #0x8 (8)
0x4cd96c44     4  str x3, [jssp, #-8]!
0x4cd96c48     8  sub csp, jssp, #0x8 (8)
0x4cd96c4c    12  str x4, [jssp, #-8]!
0x4cd96c50    16  ldr x3, pc+104 (addr 0x000000004cd96cb8)    ;; object: 0x210e3a49 Cell for 0
0x4cd96c54    20  ldur x3, [x3, #7]
0x4cd96c58    24  cmp x3, #0x0 (0)
0x4cd96c5c    28  b.ne #+0x8 (addr 0x4cd96c64)
0x4cd96c60    32  b #+0x18 (addr 0x4cd96c78)
0x4cd96c64    36  ldr x2, pc+92 (addr 0x000000004cd96cc0)    ;; object: 0x21005371 <String[9]: prototype>
0x4cd96c68    40  ldr x4, [jssp], #8
0x4cd96c6c    44  ldr x3, [jssp], #8
0x4cd96c70    48  ldr x16, pc+88 (addr 0x000000004cd96cc8)    ;; code: BUILTIN
0x4cd96c74    52  br x16
0x4cd96c78    56  add jssp, jssp, #0x10 (16)
0x4cd96c7c    60  ldr x3, pc+84 (addr 0x000000004cd96cd0)    ;; object: 0x210404a9 <AccessorInfo>
0x4cd96c80    64  ldr x4, pc+88 (addr 0x000000004cd96cd8)    ;; object: 0x21005371 <String[9]: prototype>
0x4cd96c84    68  sub csp, jssp, #0x28 (40)
0x4cd96c88    72  stp x4, x3, [jssp, #-32]!
0x4cd96c8c    76  stp x1, x1, [jssp, #16]
0x4cd96c90    80  str x0, [jssp, #-8]!
0x4cd96c94    84  movz x16, #0x100000000
0x4cd96c98    88  sub csp, jssp, #0x8 (8)
0x4cd96c9c    92  str x16, [jssp, #-8]!
0x4cd96ca0    96  movz x0, #0x6
0x4cd96ca4   100  ldr x1, pc+60 (addr 0x000000004cd96ce0)    ;; external reference (Runtime::StoreCallbackProperty)
0x4cd96ca8   104  ldr x16, pc+64 (addr 0x000000004cd96ce8)    ;; code: STUB, CEntryStub, minor: 4
0x4cd96cac   108  br x16
0x4cd96cb0   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd96cb4   116  d63f03e0       constant
0x4cd96cb8   120  210e3a49       constant
0x4cd96cbc   124  00000000       constant
0x4cd96cc0   128  21005371       constant
0x4cd96cc4   132  00000000       constant
0x4cd96cc8   136  4cd22420       constant
0x4cd96ccc   140  00000000       constant
0x4cd96cd0   144  210404a9       constant
0x4cd96cd4   148  00000000       constant
0x4cd96cd8   152  21005371       constant
0x4cd96cdc   156  00000000       constant
0x4cd96ce0   160  00c8b560       constant
0x4cd96ce4   164  00000000       constant
0x4cd96ce8   168  4cd06060       constant
0x4cd96cec   172  00000000       constant


RelocInfo (size = 14)
0x4cd96c50  embedded object  (0x210e3a49 Cell for 0)
0x4cd96c64  embedded object  (0x21005371 <String[9]: prototype>)
0x4cd96c70  code target (BUILTIN)  (0x4cd22420)
0x4cd96c7c  embedded object  (0x210404a9 <AccessorInfo>)
0x4cd96c80  embedded object  (0x21005371 <String[9]: prototype>)
0x4cd96ca4  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0x4cd96ca8  code target (STUB)  (0x4cd06060)
0x4cd96cb0  constant pool (size 64)

kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0x4cd973e0     0  sub csp, jssp, #0x8 (8)
0x4cd973e4     4  str x3, [jssp, #-8]!
0x4cd973e8     8  sub csp, jssp, #0x8 (8)
0x4cd973ec    12  str x4, [jssp, #-8]!
0x4cd973f0    16  ldr x3, pc+104 (addr 0x000000004cd97458)    ;; object: 0x210e41d1 Cell for 0
0x4cd973f4    20  ldur x3, [x3, #7]
0x4cd973f8    24  cmp x3, #0x0 (0)
0x4cd973fc    28  b.ne #+0x8 (addr 0x4cd97404)
0x4cd97400    32  b #+0x18 (addr 0x4cd97418)
0x4cd97404    36  ldr x2, pc+92 (addr 0x000000004cd97460)    ;; object: 0x21005371 <String[9]: prototype>
0x4cd97408    40  ldr x4, [jssp], #8
0x4cd9740c    44  ldr x3, [jssp], #8
0x4cd97410    48  ldr x16, pc+88 (addr 0x000000004cd97468)    ;; code: BUILTIN
0x4cd97414    52  br x16
0x4cd97418    56  add jssp, jssp, #0x10 (16)
0x4cd9741c    60  ldr x3, pc+84 (addr 0x000000004cd97470)    ;; object: 0x210404a9 <AccessorInfo>
0x4cd97420    64  ldr x4, pc+88 (addr 0x000000004cd97478)    ;; object: 0x21005371 <String[9]: prototype>
0x4cd97424    68  sub csp, jssp, #0x28 (40)
0x4cd97428    72  stp x4, x3, [jssp, #-32]!
0x4cd9742c    76  stp x1, x1, [jssp, #16]
0x4cd97430    80  str x0, [jssp, #-8]!
0x4cd97434    84  movz x16, #0x100000000
0x4cd97438    88  sub csp, jssp, #0x8 (8)
0x4cd9743c    92  str x16, [jssp, #-8]!
0x4cd97440    96  movz x0, #0x6
0x4cd97444   100  ldr x1, pc+60 (addr 0x000000004cd97480)    ;; external reference (Runtime::StoreCallbackProperty)
0x4cd97448   104  ldr x16, pc+64 (addr 0x000000004cd97488)    ;; code: STUB, CEntryStub, minor: 4
0x4cd9744c   108  br x16
0x4cd97450   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd97454   116  d63f03e0       constant
0x4cd97458   120  210e41d1       constant
0x4cd9745c   124  00000000       constant
0x4cd97460   128  21005371       constant
0x4cd97464   132  00000000       constant
0x4cd97468   136  4cd22420       constant
0x4cd9746c   140  00000000       constant
0x4cd97470   144  210404a9       constant
0x4cd97474   148  00000000       constant
0x4cd97478   152  21005371       constant
0x4cd9747c   156  00000000       constant
0x4cd97480   160  00c8b560       constant
0x4cd97484   164  00000000       constant
0x4cd97488   168  4cd06060       constant
0x4cd9748c   172  00000000       constant


RelocInfo (size = 14)
0x4cd973f0  embedded object  (0x210e41d1 Cell for 0)
0x4cd97404  embedded object  (0x21005371 <String[9]: prototype>)
0x4cd97410  code target (BUILTIN)  (0x4cd22420)
0x4cd9741c  embedded object  (0x210404a9 <AccessorInfo>)
0x4cd97420  embedded object  (0x21005371 <String[9]: prototype>)
0x4cd97444  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0x4cd97448  code target (STUB)  (0x4cd06060)
0x4cd97450  constant pool (size 64)

kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0x4cd97640     0  sub csp, jssp, #0x8 (8)
0x4cd97644     4  str x3, [jssp, #-8]!
0x4cd97648     8  sub csp, jssp, #0x8 (8)
0x4cd9764c    12  str x4, [jssp, #-8]!
0x4cd97650    16  ldr x3, pc+104 (addr 0x000000004cd976b8)    ;; object: 0x210e4409 Cell for 0
0x4cd97654    20  ldur x3, [x3, #7]
0x4cd97658    24  cmp x3, #0x0 (0)
0x4cd9765c    28  b.ne #+0x8 (addr 0x4cd97664)
0x4cd97660    32  b #+0x18 (addr 0x4cd97678)
0x4cd97664    36  ldr x2, pc+92 (addr 0x000000004cd976c0)    ;; object: 0x21005371 <String[9]: prototype>
0x4cd97668    40  ldr x4, [jssp], #8
0x4cd9766c    44  ldr x3, [jssp], #8
0x4cd97670    48  ldr x16, pc+88 (addr 0x000000004cd976c8)    ;; code: BUILTIN
0x4cd97674    52  br x16
0x4cd97678    56  add jssp, jssp, #0x10 (16)
0x4cd9767c    60  ldr x3, pc+84 (addr 0x000000004cd976d0)    ;; object: 0x210404a9 <AccessorInfo>
0x4cd97680    64  ldr x4, pc+88 (addr 0x000000004cd976d8)    ;; object: 0x21005371 <String[9]: prototype>
0x4cd97684    68  sub csp, jssp, #0x28 (40)
0x4cd97688    72  stp x4, x3, [jssp, #-32]!
0x4cd9768c    76  stp x1, x1, [jssp, #16]
0x4cd97690    80  str x0, [jssp, #-8]!
0x4cd97694    84  movz x16, #0x100000000
0x4cd97698    88  sub csp, jssp, #0x8 (8)
0x4cd9769c    92  str x16, [jssp, #-8]!
0x4cd976a0    96  movz x0, #0x6
0x4cd976a4   100  ldr x1, pc+60 (addr 0x000000004cd976e0)    ;; external reference (Runtime::StoreCallbackProperty)
0x4cd976a8   104  ldr x16, pc+64 (addr 0x000000004cd976e8)    ;; code: STUB, CEntryStub, minor: 4
0x4cd976ac   108  br x16
0x4cd976b0   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd976b4   116  d63f03e0       constant
0x4cd976b8   120  210e4409       constant
0x4cd976bc   124  00000000       constant
0x4cd976c0   128  21005371       constant
0x4cd976c4   132  00000000       constant
0x4cd976c8   136  4cd22420       constant
0x4cd976cc   140  00000000       constant
0x4cd976d0   144  210404a9       constant
0x4cd976d4   148  00000000       constant
0x4cd976d8   152  21005371       constant
0x4cd976dc   156  00000000       constant
0x4cd976e0   160  00c8b560       constant
0x4cd976e4   164  00000000       constant
0x4cd976e8   168  4cd06060       constant
0x4cd976ec   172  00000000       constant


RelocInfo (size = 14)
0x4cd97650  embedded object  (0x210e4409 Cell for 0)
0x4cd97664  embedded object  (0x21005371 <String[9]: prototype>)
0x4cd97670  code target (BUILTIN)  (0x4cd22420)
0x4cd9767c  embedded object  (0x210404a9 <AccessorInfo>)
0x4cd97680  embedded object  (0x21005371 <String[9]: prototype>)
0x4cd976a4  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0x4cd976a8  code target (STUB)  (0x4cd06060)
0x4cd976b0  constant pool (size 64)

kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0x4cd97760     0  sub csp, jssp, #0x8 (8)
0x4cd97764     4  str x3, [jssp, #-8]!
0x4cd97768     8  sub csp, jssp, #0x8 (8)
0x4cd9776c    12  str x4, [jssp, #-8]!
0x4cd97770    16  ldr x3, pc+104 (addr 0x000000004cd977d8)    ;; object: 0x210e4631 Cell for 0
0x4cd97774    20  ldur x3, [x3, #7]
0x4cd97778    24  cmp x3, #0x0 (0)
0x4cd9777c    28  b.ne #+0x8 (addr 0x4cd97784)
0x4cd97780    32  b #+0x18 (addr 0x4cd97798)
0x4cd97784    36  ldr x2, pc+92 (addr 0x000000004cd977e0)    ;; object: 0x21005371 <String[9]: prototype>
0x4cd97788    40  ldr x4, [jssp], #8
0x4cd9778c    44  ldr x3, [jssp], #8
0x4cd97790    48  ldr x16, pc+88 (addr 0x000000004cd977e8)    ;; code: BUILTIN
0x4cd97794    52  br x16
0x4cd97798    56  add jssp, jssp, #0x10 (16)
0x4cd9779c    60  ldr x3, pc+84 (addr 0x000000004cd977f0)    ;; object: 0x210404a9 <AccessorInfo>
0x4cd977a0    64  ldr x4, pc+88 (addr 0x000000004cd977f8)    ;; object: 0x21005371 <String[9]: prototype>
0x4cd977a4    68  sub csp, jssp, #0x28 (40)
0x4cd977a8    72  stp x4, x3, [jssp, #-32]!
0x4cd977ac    76  stp x1, x1, [jssp, #16]
0x4cd977b0    80  str x0, [jssp, #-8]!
0x4cd977b4    84  movz x16, #0x100000000
0x4cd977b8    88  sub csp, jssp, #0x8 (8)
0x4cd977bc    92  str x16, [jssp, #-8]!
0x4cd977c0    96  movz x0, #0x6
0x4cd977c4   100  ldr x1, pc+60 (addr 0x000000004cd97800)    ;; external reference (Runtime::StoreCallbackProperty)
0x4cd977c8   104  ldr x16, pc+64 (addr 0x000000004cd97808)    ;; code: STUB, CEntryStub, minor: 4
0x4cd977cc   108  br x16
0x4cd977d0   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd977d4   116  d63f03e0       constant
0x4cd977d8   120  210e4631       constant
0x4cd977dc   124  00000000       constant
0x4cd977e0   128  21005371       constant
0x4cd977e4   132  00000000       constant
0x4cd977e8   136  4cd22420       constant
0x4cd977ec   140  00000000       constant
0x4cd977f0   144  210404a9       constant
0x4cd977f4   148  00000000       constant
0x4cd977f8   152  21005371       constant
0x4cd977fc   156  00000000       constant
0x4cd97800   160  00c8b560       constant
0x4cd97804   164  00000000       constant
0x4cd97808   168  4cd06060       constant
0x4cd9780c   172  00000000       constant


RelocInfo (size = 14)
0x4cd97770  embedded object  (0x210e4631 Cell for 0)
0x4cd97784  embedded object  (0x21005371 <String[9]: prototype>)
0x4cd97790  code target (BUILTIN)  (0x4cd22420)
0x4cd9779c  embedded object  (0x210404a9 <AccessorInfo>)
0x4cd977a0  embedded object  (0x21005371 <String[9]: prototype>)
0x4cd977c4  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0x4cd977c8  code target (STUB)  (0x4cd06060)
0x4cd977d0  constant pool (size 64)

kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0x4cd97880     0  sub csp, jssp, #0x8 (8)
0x4cd97884     4  str x3, [jssp, #-8]!
0x4cd97888     8  sub csp, jssp, #0x8 (8)
0x4cd9788c    12  str x4, [jssp, #-8]!
0x4cd97890    16  ldr x3, pc+104 (addr 0x000000004cd978f8)    ;; object: 0x210e4709 Cell for 0
0x4cd97894    20  ldur x3, [x3, #7]
0x4cd97898    24  cmp x3, #0x0 (0)
0x4cd9789c    28  b.ne #+0x8 (addr 0x4cd978a4)
0x4cd978a0    32  b #+0x18 (addr 0x4cd978b8)
0x4cd978a4    36  ldr x2, pc+92 (addr 0x000000004cd97900)    ;; object: 0x21005371 <String[9]: prototype>
0x4cd978a8    40  ldr x4, [jssp], #8
0x4cd978ac    44  ldr x3, [jssp], #8
0x4cd978b0    48  ldr x16, pc+88 (addr 0x000000004cd97908)    ;; code: BUILTIN
0x4cd978b4    52  br x16
0x4cd978b8    56  add jssp, jssp, #0x10 (16)
0x4cd978bc    60  ldr x3, pc+84 (addr 0x000000004cd97910)    ;; object: 0x210404a9 <AccessorInfo>
0x4cd978c0    64  ldr x4, pc+88 (addr 0x000000004cd97918)    ;; object: 0x21005371 <String[9]: prototype>
0x4cd978c4    68  sub csp, jssp, #0x28 (40)
0x4cd978c8    72  stp x4, x3, [jssp, #-32]!
0x4cd978cc    76  stp x1, x1, [jssp, #16]
0x4cd978d0    80  str x0, [jssp, #-8]!
0x4cd978d4    84  movz x16, #0x100000000
0x4cd978d8    88  sub csp, jssp, #0x8 (8)
0x4cd978dc    92  str x16, [jssp, #-8]!
0x4cd978e0    96  movz x0, #0x6
0x4cd978e4   100  ldr x1, pc+60 (addr 0x000000004cd97920)    ;; external reference (Runtime::StoreCallbackProperty)
0x4cd978e8   104  ldr x16, pc+64 (addr 0x000000004cd97928)    ;; code: STUB, CEntryStub, minor: 4
0x4cd978ec   108  br x16
0x4cd978f0   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cd978f4   116  d63f03e0       constant
0x4cd978f8   120  210e4709       constant
0x4cd978fc   124  00000000       constant
0x4cd97900   128  21005371       constant
0x4cd97904   132  00000000       constant
0x4cd97908   136  4cd22420       constant
0x4cd9790c   140  00000000       constant
0x4cd97910   144  210404a9       constant
0x4cd97914   148  00000000       constant
0x4cd97918   152  21005371       constant
0x4cd9791c   156  00000000       constant
0x4cd97920   160  00c8b560       constant
0x4cd97924   164  00000000       constant
0x4cd97928   168  4cd06060       constant
0x4cd9792c   172  00000000       constant


RelocInfo (size = 14)
0x4cd97890  embedded object  (0x210e4709 Cell for 0)
0x4cd978a4  embedded object  (0x21005371 <String[9]: prototype>)
0x4cd978b0  code target (BUILTIN)  (0x4cd22420)
0x4cd978bc  embedded object  (0x210404a9 <AccessorInfo>)
0x4cd978c0  embedded object  (0x21005371 <String[9]: prototype>)
0x4cd978e4  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0x4cd978e8  code target (STUB)  (0x4cd06060)
0x4cd978f0  constant pool (size 64)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0x4cd979a0     0  tbz w0, #0, #+0x50 (addr 0x4cd979f0)
0x4cd979a4     4  mov x2, x0
0x4cd979a8     8  stur x2, [x1, #31]
0x4cd979ac    12  add x3, x1, #0x1f (31)
0x4cd979b0    16  and x2, x2, #0xfffffffffff00000
0x4cd979b4    20  ldr x2, [x2, #8]
0x4cd979b8    24  tbz w2, #1, #+0x24 (addr 0x4cd979dc)
0x4cd979bc    28  and x2, x1, #0xfffffffffff00000
0x4cd979c0    32  ldr x2, [x2, #8]
0x4cd979c4    36  tbz w2, #2, #+0x18 (addr 0x4cd979dc)
0x4cd979c8    40  sub csp, jssp, #0x8 (8)
0x4cd979cc    44  str lr, [jssp, #-8]!
0x4cd979d0    48  ldr x16, pc+24 (addr 0x000000004cd979e8)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd979d4    52  blr x16
0x4cd979d8    56  ldr lr, [jssp], #8
0x4cd979dc    60  ret
0x4cd979e0    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd979e4    68  d63f03e0       constant
0x4cd979e8    72  4cd170c0       constant
0x4cd979ec    76  00000000       constant
0x4cd979f0    80  movz x16, #0x0
0x4cd979f4    84  sub csp, jssp, #0x10 (16)
0x4cd979f8    88  stp fp, lr, [jssp, #-16]!
0x4cd979fc    92  bl #+0x4 (addr 0x4cd97a00)
0x4cd97a00    96  movz x17, #0xa00000000
0x4cd97a04   100  sub csp, jssp, #0x10 (16)
0x4cd97a08   104  stp x17, cp, [jssp, #-16]!
0x4cd97a0c   108  add fp, jssp, #0x10 (16)
0x4cd97a10   112  ldr x17, pc+24 (addr 0x000000004cd97a28)    ;; lazy deoptimization bailout 0
0x4cd97a14   116  add x17, x17, x16
0x4cd97a18   120  br x17
0x4cd97a1c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd97a20   128  d63f03e0       constant
0x4cd97a24   132  d503201f       constant
0x4cd97a28   136  4cb06000       constant
0x4cd97a2c   140  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cd979d0  code target (STUB)  (0x4cd170c0)
0x4cd979e0  constant pool (size 16)
0x4cd97a10  runtime entry
0x4cd97a1c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0x4cd979a0     0  tbz w0, #0, #+0x50 (addr 0x4cd979f0)
0x4cd979a4     4  mov x2, x0
0x4cd979a8     8  stur x2, [x1, #31]
0x4cd979ac    12  add x3, x1, #0x1f (31)
0x4cd979b0    16  and x2, x2, #0xfffffffffff00000
0x4cd979b4    20  ldr x2, [x2, #8]
0x4cd979b8    24  tbz w2, #1, #+0x24 (addr 0x4cd979dc)
0x4cd979bc    28  and x2, x1, #0xfffffffffff00000
0x4cd979c0    32  ldr x2, [x2, #8]
0x4cd979c4    36  tbz w2, #2, #+0x18 (addr 0x4cd979dc)
0x4cd979c8    40  sub csp, jssp, #0x8 (8)
0x4cd979cc    44  str lr, [jssp, #-8]!
0x4cd979d0    48  ldr x16, pc+24 (addr 0x000000004cd979e8)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd979d4    52  blr x16
0x4cd979d8    56  ldr lr, [jssp], #8
0x4cd979dc    60  ret
0x4cd979e0    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd979e4    68  d63f03e0       constant
0x4cd979e8    72  4cd170c0       constant
0x4cd979ec    76  00000000       constant
0x4cd979f0    80  movz x16, #0x0
0x4cd979f4    84  sub csp, jssp, #0x10 (16)
0x4cd979f8    88  stp fp, lr, [jssp, #-16]!
0x4cd979fc    92  bl #+0x4 (addr 0x4cd97a00)
0x4cd97a00    96  movz x17, #0xa00000000
0x4cd97a04   100  sub csp, jssp, #0x10 (16)
0x4cd97a08   104  stp x17, cp, [jssp, #-16]!
0x4cd97a0c   108  add fp, jssp, #0x10 (16)
0x4cd97a10   112  ldr x17, pc+24 (addr 0x000000004cd97a28)    ;; lazy deoptimization bailout 0
0x4cd97a14   116  add x17, x17, x16
0x4cd97a18   120  br x17
0x4cd97a1c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd97a20   128  d63f03e0       constant
0x4cd97a24   132  d503201f       constant
0x4cd97a28   136  4cb06000       constant
0x4cd97a2c   140  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cd979d0  code target (STUB)  (0x4cd170c0)
0x4cd979e0  constant pool (size 16)
0x4cd97a10  runtime entry
0x4cd97a1c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = timers
compiler = unknown
Instructions (size = 184)
0x4cd97f40     0  sub csp, jssp, #0x8 (8)
0x4cd97f44     4  str x3, [jssp, #-8]!
0x4cd97f48     8  sub csp, jssp, #0x8 (8)
0x4cd97f4c    12  str x4, [jssp, #-8]!
0x4cd97f50    16  ldr x3, pc+112 (addr 0x000000004cd97fc0)    ;; object: 0x21063e59 Cell for 0
0x4cd97f54    20  ldur x3, [x3, #7]
0x4cd97f58    24  cmp x3, #0x0 (0)
0x4cd97f5c    28  b.ne #+0x44 (addr 0x4cd97fa0)
0x4cd97f60    32  tbz w0, #0, #+0x40 (addr 0x4cd97fa0)
0x4cd97f64    36  ldur x3, [x0, #-1]
0x4cd97f68    40  ldr x4, pc+96 (addr 0x000000004cd97fc8)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd97f6c    44  ldur x4, [x4, #7]
0x4cd97f70    48  cmp x3, x4
0x4cd97f74    52  b.ne #+0x2c (addr 0x4cd97fa0)
0x4cd97f78    56  ldr x5, pc+88 (addr 0x000000004cd97fd0)    ;; object: 0x210e4b41 WeakCell for 0x2a824441 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd97f7c    60  ldur x5, [x5, #7]
0x4cd97f80    64  tbz w5, #0, #+0x20 (addr 0x4cd97fa0)
0x4cd97f84    68  ldursw x4, [x5, #15]
0x4cd97f88    72  tbnz w4, #23, #+0x18 (addr 0x4cd97fa0)
0x4cd97f8c    76  ldr x4, [jssp], #8
0x4cd97f90    80  ldr x3, [jssp], #8
0x4cd97f94    84  ldr x2, pc+68 (addr 0x000000004cd97fd8)    ;; object: 0x210ba181 <String[6]: timers>
0x4cd97f98    88  ldr x16, pc+72 (addr 0x000000004cd97fe0)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0x4cd97f9c    92  br x16
0x4cd97fa0    96  ldr x2, pc+72 (addr 0x000000004cd97fe8)    ;; object: 0x210ba181 <String[6]: timers>
0x4cd97fa4   100  ldr x4, [jssp], #8
0x4cd97fa8   104  ldr x3, [jssp], #8
0x4cd97fac   108  ldr x16, pc+68 (addr 0x000000004cd97ff0)    ;; code: BUILTIN
0x4cd97fb0   112  br x16
0x4cd97fb4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd97fb8   120  d63f03e0       constant
0x4cd97fbc   124  d503201f       constant
0x4cd97fc0   128  21063e59       constant
0x4cd97fc4   132  00000000       constant
0x4cd97fc8   136  210c22b1       constant
0x4cd97fcc   140  00000000       constant
0x4cd97fd0   144  210e4b41       constant
0x4cd97fd4   148  00000000       constant
0x4cd97fd8   152  210ba181       constant
0x4cd97fdc   156  00000000       constant
0x4cd97fe0   160  4cd38860       constant
0x4cd97fe4   164  00000000       constant
0x4cd97fe8   168  210ba181       constant
0x4cd97fec   172  00000000       constant
0x4cd97ff0   176  4cd22420       constant
0x4cd97ff4   180  00000000       constant


RelocInfo (size = 13)
0x4cd97f50  embedded object  (0x21063e59 Cell for 0)
0x4cd97f68  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd97f78  embedded object  (0x210e4b41 WeakCell for 0x2a824441 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd97f94  embedded object  (0x210ba181 <String[6]: timers>)
0x4cd97f98  code target (HANDLER)  (0x4cd38860)
0x4cd97fa0  embedded object  (0x210ba181 <String[6]: timers>)
0x4cd97fac  code target (BUILTIN)  (0x4cd22420)
0x4cd97fb4  constant pool (size 68)

--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 741)
0x4cd98060     0  movz x2, #0xd2c0
0x4cd98064     4  movk x2, #0x166d, lsl #16
0x4cd98068     8  ldp x3, x0, [x2]
0x4cd9806c    12  adds x16, x3, #0x120 (288)
0x4cd98070    16  ccmp x16, x0, #nzCv, lo
0x4cd98074    20  b.hi #+0x138 (addr 0x4cd981ac)
0x4cd98078    24  str x16, [x2]
0x4cd9807c    28  orr x3, x3, #0x1
0x4cd98080    32  ldr x0, pc+408 (addr 0x000000004cd98218)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd98084    36  stur x0, [x3, #-1]
0x4cd98088    40  movz x0, #0x2200000000
0x4cd9808c    44  stur x0, [x3, #7]
0x4cd98090    48  stur x1, [x3, #15]
0x4cd98094    52  stur cp, [x3, #23]
0x4cd98098    56  ldr x0, pc+392 (addr 0x000000004cd98220)    ;; object: 0x21004519 <the hole>
0x4cd9809c    60  stur x0, [x3, #31]
0x4cd980a0    64  ldur x0, [cp, #39]
0x4cd980a4    68  stur x0, [x3, #39]
0x4cd980a8    72  ldr x0, pc+384 (addr 0x000000004cd98228)    ;; object: 0x21004241 <undefined>
0x4cd980ac    76  stur x0, [x3, #47]
0x4cd980b0    80  ldr x0, pc+384 (addr 0x000000004cd98230)    ;; object: 0x21004241 <undefined>
0x4cd980b4    84  stur x0, [x3, #55]
0x4cd980b8    88  ldr x0, pc+384 (addr 0x000000004cd98238)    ;; object: 0x21004241 <undefined>
0x4cd980bc    92  stur x0, [x3, #63]
0x4cd980c0    96  ldr x0, pc+384 (addr 0x000000004cd98240)    ;; object: 0x21004241 <undefined>
0x4cd980c4   100  stur x0, [x3, #71]
0x4cd980c8   104  ldr x0, pc+384 (addr 0x000000004cd98248)    ;; object: 0x21004241 <undefined>
0x4cd980cc   108  stur x0, [x3, #79]
0x4cd980d0   112  ldr x0, pc+384 (addr 0x000000004cd98250)    ;; object: 0x21004241 <undefined>
0x4cd980d4   116  stur x0, [x3, #87]
0x4cd980d8   120  ldr x0, pc+384 (addr 0x000000004cd98258)    ;; object: 0x21004241 <undefined>
0x4cd980dc   124  stur x0, [x3, #95]
0x4cd980e0   128  ldr x0, pc+384 (addr 0x000000004cd98260)    ;; object: 0x21004241 <undefined>
0x4cd980e4   132  stur x0, [x3, #103]
0x4cd980e8   136  ldr x0, pc+384 (addr 0x000000004cd98268)    ;; object: 0x21004241 <undefined>
0x4cd980ec   140  stur x0, [x3, #111]
0x4cd980f0   144  ldr x0, pc+384 (addr 0x000000004cd98270)    ;; object: 0x21004241 <undefined>
0x4cd980f4   148  stur x0, [x3, #119]
0x4cd980f8   152  ldr x0, pc+384 (addr 0x000000004cd98278)    ;; object: 0x21004241 <undefined>
0x4cd980fc   156  stur x0, [x3, #127]
0x4cd98100   160  ldr x0, pc+384 (addr 0x000000004cd98280)    ;; object: 0x21004241 <undefined>
0x4cd98104   164  stur x0, [x3, #135]
0x4cd98108   168  ldr x0, pc+384 (addr 0x000000004cd98288)    ;; object: 0x21004241 <undefined>
0x4cd9810c   172  stur x0, [x3, #143]
0x4cd98110   176  ldr x0, pc+384 (addr 0x000000004cd98290)    ;; object: 0x21004241 <undefined>
0x4cd98114   180  stur x0, [x3, #151]
0x4cd98118   184  ldr x0, pc+384 (addr 0x000000004cd98298)    ;; object: 0x21004241 <undefined>
0x4cd9811c   188  stur x0, [x3, #159]
0x4cd98120   192  ldr x0, pc+384 (addr 0x000000004cd982a0)    ;; object: 0x21004241 <undefined>
0x4cd98124   196  stur x0, [x3, #167]
0x4cd98128   200  ldr x0, pc+384 (addr 0x000000004cd982a8)    ;; object: 0x21004241 <undefined>
0x4cd9812c   204  stur x0, [x3, #175]
0x4cd98130   208  ldr x0, pc+384 (addr 0x000000004cd982b0)    ;; object: 0x21004241 <undefined>
0x4cd98134   212  stur x0, [x3, #183]
0x4cd98138   216  ldr x0, pc+384 (addr 0x000000004cd982b8)    ;; object: 0x21004241 <undefined>
0x4cd9813c   220  stur x0, [x3, #191]
0x4cd98140   224  ldr x0, pc+384 (addr 0x000000004cd982c0)    ;; object: 0x21004241 <undefined>
0x4cd98144   228  stur x0, [x3, #199]
0x4cd98148   232  ldr x0, pc+384 (addr 0x000000004cd982c8)    ;; object: 0x21004241 <undefined>
0x4cd9814c   236  stur x0, [x3, #207]
0x4cd98150   240  ldr x0, pc+384 (addr 0x000000004cd982d0)    ;; object: 0x21004241 <undefined>
0x4cd98154   244  stur x0, [x3, #215]
0x4cd98158   248  ldr x0, pc+384 (addr 0x000000004cd982d8)    ;; object: 0x21004241 <undefined>
0x4cd9815c   252  stur x0, [x3, #223]
0x4cd98160   256  ldr x0, pc+384 (addr 0x000000004cd982e0)    ;; object: 0x21004241 <undefined>
0x4cd98164   260  stur x0, [x3, #231]
0x4cd98168   264  ldr x0, pc+384 (addr 0x000000004cd982e8)    ;; object: 0x21004241 <undefined>
0x4cd9816c   268  stur x0, [x3, #239]
0x4cd98170   272  ldr x0, pc+384 (addr 0x000000004cd982f0)    ;; object: 0x21004241 <undefined>
0x4cd98174   276  stur x0, [x3, #247]
0x4cd98178   280  ldr x0, pc+384 (addr 0x000000004cd982f8)    ;; object: 0x21004241 <undefined>
0x4cd9817c   284  stur x0, [x3, #255]
0x4cd98180   288  ldr x0, pc+384 (addr 0x000000004cd98300)    ;; object: 0x21004241 <undefined>
0x4cd98184   292  movz x16, #0x107
0x4cd98188   296  str x0, [x3, x16]
0x4cd9818c   300  ldr x0, pc+380 (addr 0x000000004cd98308)    ;; object: 0x21004241 <undefined>
0x4cd98190   304  movz x16, #0x10f
0x4cd98194   308  str x0, [x3, x16]
0x4cd98198   312  ldr x0, pc+376 (addr 0x000000004cd98310)    ;; object: 0x21004241 <undefined>
0x4cd9819c   316  movz x16, #0x117
0x4cd981a0   320  str x0, [x3, x16]
0x4cd981a4   324  mov x0, x3
0x4cd981a8   328  ret
0x4cd981ac   332  sub csp, jssp, #0x10 (16)
0x4cd981b0   336  stp fp, lr, [jssp, #-16]!
0x4cd981b4   340  movz fp, #0xa00000000
0x4cd981b8   344  sub csp, jssp, #0x8 (8)
0x4cd981bc   348  str fp, [jssp, #-8]!
0x4cd981c0   352  add fp, jssp, #0x8 (8)
0x4cd981c4   356  movz x3, #0x0
0x4cd981c8   360  mov x16, lr
0x4cd981cc   364  ldr x17, pc+332 (addr 0x000000004cd98318)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd981d0   368  blr x17
0x4cd981d4   372  movz x0, #0x12000000000
0x4cd981d8   376  movz x10, #0x0
0x4cd981dc   380  sub csp, jssp, #0x10 (16)
0x4cd981e0   384  stp x10, x0, [jssp, #-16]!
0x4cd981e4   388  movz x0, #0x2
0x4cd981e8   392  movz x1, #0x5b88
0x4cd981ec   396  movk x1, #0xe2, lsl #16
0x4cd981f0   400  ldr x16, pc+304 (addr 0x000000004cd98320)    ;; code: STUB, CEntryStub, minor: 5
0x4cd981f4   404  blr x16
0x4cd981f8   408  str x0, [jssp, #24]
0x4cd981fc   412  ldr x16, pc+300 (addr 0x000000004cd98328)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd98200   416  blr x16
0x4cd98204   420  ldr lr, [jssp, #16]
0x4cd98208   424  ldp xzr, fp, [jssp], #24
0x4cd9820c   428  b #-0x18c (addr 0x4cd98080)
0x4cd98210   432  580008ff       constant pool begin (num_const = 71)    ;; constant pool
0x4cd98214   436  d63f03e0       constant
0x4cd98218   440  2a806149       constant
0x4cd9821c   444  00000000       constant
0x4cd98220   448  21004519       constant
0x4cd98224   452  00000000       constant
0x4cd98228   456  21004241       constant
0x4cd9822c   460  00000000       constant
0x4cd98230   464  21004241       constant
0x4cd98234   468  00000000       constant
0x4cd98238   472  21004241       constant
0x4cd9823c   476  00000000       constant
0x4cd98240   480  21004241       constant
0x4cd98244   484  00000000       constant
0x4cd98248   488  21004241       constant
0x4cd9824c   492  00000000       constant
0x4cd98250   496  21004241       constant
0x4cd98254   500  00000000       constant
0x4cd98258   504  21004241       constant
0x4cd9825c   508  00000000       constant
0x4cd98260   512  21004241       constant
0x4cd98264   516  00000000       constant
0x4cd98268   520  21004241       constant
0x4cd9826c   524  00000000       constant
0x4cd98270   528  21004241       constant
0x4cd98274   532  00000000       constant
0x4cd98278   536  21004241       constant
0x4cd9827c   540  00000000       constant
0x4cd98280   544  21004241       constant
0x4cd98284   548  00000000       constant
0x4cd98288   552  21004241       constant
0x4cd9828c   556  00000000       constant
0x4cd98290   560  21004241       constant
0x4cd98294   564  00000000       constant
0x4cd98298   568  21004241       constant
0x4cd9829c   572  00000000       constant
0x4cd982a0   576  21004241       constant
0x4cd982a4   580  00000000       constant
0x4cd982a8   584  21004241       constant
0x4cd982ac   588  00000000       constant
0x4cd982b0   592  21004241       constant
0x4cd982b4   596  00000000       constant
0x4cd982b8   600  21004241       constant
0x4cd982bc   604  00000000       constant
0x4cd982c0   608  21004241       constant
0x4cd982c4   612  00000000       constant
0x4cd982c8   616  21004241       constant
0x4cd982cc   620  00000000       constant
0x4cd982d0   624  21004241       constant
0x4cd982d4   628  00000000       constant
0x4cd982d8   632  21004241       constant
0x4cd982dc   636  00000000       constant
0x4cd982e0   640  21004241       constant
0x4cd982e4   644  00000000       constant
0x4cd982e8   648  21004241       constant
0x4cd982ec   652  00000000       constant
0x4cd982f0   656  21004241       constant
0x4cd982f4   660  00000000       constant
0x4cd982f8   664  21004241       constant
0x4cd982fc   668  00000000       constant
0x4cd98300   672  21004241       constant
0x4cd98304   676  00000000       constant
0x4cd98308   680  21004241       constant
0x4cd9830c   684  00000000       constant
0x4cd98310   688  21004241       constant
0x4cd98314   692  00000000       constant
0x4cd98318   696  4cd06820       constant
0x4cd9831c   700  00000000       constant
0x4cd98320   704  4cd06260       constant
0x4cd98324   708  00000000       constant
0x4cd98328   712  4cd068e0       constant
0x4cd9832c   716  00000000       constant


Safepoints (size = 21)
0x4cd981f8   408  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 41)
0x4cd98080  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd98098  embedded object  (0x21004519 <the hole>)
0x4cd980a8  embedded object  (0x21004241 <undefined>)
0x4cd980b0  embedded object  (0x21004241 <undefined>)
0x4cd980b8  embedded object  (0x21004241 <undefined>)
0x4cd980c0  embedded object  (0x21004241 <undefined>)
0x4cd980c8  embedded object  (0x21004241 <undefined>)
0x4cd980d0  embedded object  (0x21004241 <undefined>)
0x4cd980d8  embedded object  (0x21004241 <undefined>)
0x4cd980e0  embedded object  (0x21004241 <undefined>)
0x4cd980e8  embedded object  (0x21004241 <undefined>)
0x4cd980f0  embedded object  (0x21004241 <undefined>)
0x4cd980f8  embedded object  (0x21004241 <undefined>)
0x4cd98100  embedded object  (0x21004241 <undefined>)
0x4cd98108  embedded object  (0x21004241 <undefined>)
0x4cd98110  embedded object  (0x21004241 <undefined>)
0x4cd98118  embedded object  (0x21004241 <undefined>)
0x4cd98120  embedded object  (0x21004241 <undefined>)
0x4cd98128  embedded object  (0x21004241 <undefined>)
0x4cd98130  embedded object  (0x21004241 <undefined>)
0x4cd98138  embedded object  (0x21004241 <undefined>)
0x4cd98140  embedded object  (0x21004241 <undefined>)
0x4cd98148  embedded object  (0x21004241 <undefined>)
0x4cd98150  embedded object  (0x21004241 <undefined>)
0x4cd98158  embedded object  (0x21004241 <undefined>)
0x4cd98160  embedded object  (0x21004241 <undefined>)
0x4cd98168  embedded object  (0x21004241 <undefined>)
0x4cd98170  embedded object  (0x21004241 <undefined>)
0x4cd98178  embedded object  (0x21004241 <undefined>)
0x4cd98180  embedded object  (0x21004241 <undefined>)
0x4cd9818c  embedded object  (0x21004241 <undefined>)
0x4cd98198  embedded object  (0x21004241 <undefined>)
0x4cd981cc  code target (STUB)  (0x4cd06820)
0x4cd981f0  code target (STUB)  (0x4cd06260)
0x4cd981fc  code target (STUB)  (0x4cd068e0)
0x4cd98210  constant pool (size 288)

--- End code ---
kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 741)
0x4cd98060     0  movz x2, #0xd2c0
0x4cd98064     4  movk x2, #0x166d, lsl #16
0x4cd98068     8  ldp x3, x0, [x2]
0x4cd9806c    12  adds x16, x3, #0x120 (288)
0x4cd98070    16  ccmp x16, x0, #nzCv, lo
0x4cd98074    20  b.hi #+0x138 (addr 0x4cd981ac)
0x4cd98078    24  str x16, [x2]
0x4cd9807c    28  orr x3, x3, #0x1
0x4cd98080    32  ldr x0, pc+408 (addr 0x000000004cd98218)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd98084    36  stur x0, [x3, #-1]
0x4cd98088    40  movz x0, #0x2200000000
0x4cd9808c    44  stur x0, [x3, #7]
0x4cd98090    48  stur x1, [x3, #15]
0x4cd98094    52  stur cp, [x3, #23]
0x4cd98098    56  ldr x0, pc+392 (addr 0x000000004cd98220)    ;; object: 0x21004519 <the hole>
0x4cd9809c    60  stur x0, [x3, #31]
0x4cd980a0    64  ldur x0, [cp, #39]
0x4cd980a4    68  stur x0, [x3, #39]
0x4cd980a8    72  ldr x0, pc+384 (addr 0x000000004cd98228)    ;; object: 0x21004241 <undefined>
0x4cd980ac    76  stur x0, [x3, #47]
0x4cd980b0    80  ldr x0, pc+384 (addr 0x000000004cd98230)    ;; object: 0x21004241 <undefined>
0x4cd980b4    84  stur x0, [x3, #55]
0x4cd980b8    88  ldr x0, pc+384 (addr 0x000000004cd98238)    ;; object: 0x21004241 <undefined>
0x4cd980bc    92  stur x0, [x3, #63]
0x4cd980c0    96  ldr x0, pc+384 (addr 0x000000004cd98240)    ;; object: 0x21004241 <undefined>
0x4cd980c4   100  stur x0, [x3, #71]
0x4cd980c8   104  ldr x0, pc+384 (addr 0x000000004cd98248)    ;; object: 0x21004241 <undefined>
0x4cd980cc   108  stur x0, [x3, #79]
0x4cd980d0   112  ldr x0, pc+384 (addr 0x000000004cd98250)    ;; object: 0x21004241 <undefined>
0x4cd980d4   116  stur x0, [x3, #87]
0x4cd980d8   120  ldr x0, pc+384 (addr 0x000000004cd98258)    ;; object: 0x21004241 <undefined>
0x4cd980dc   124  stur x0, [x3, #95]
0x4cd980e0   128  ldr x0, pc+384 (addr 0x000000004cd98260)    ;; object: 0x21004241 <undefined>
0x4cd980e4   132  stur x0, [x3, #103]
0x4cd980e8   136  ldr x0, pc+384 (addr 0x000000004cd98268)    ;; object: 0x21004241 <undefined>
0x4cd980ec   140  stur x0, [x3, #111]
0x4cd980f0   144  ldr x0, pc+384 (addr 0x000000004cd98270)    ;; object: 0x21004241 <undefined>
0x4cd980f4   148  stur x0, [x3, #119]
0x4cd980f8   152  ldr x0, pc+384 (addr 0x000000004cd98278)    ;; object: 0x21004241 <undefined>
0x4cd980fc   156  stur x0, [x3, #127]
0x4cd98100   160  ldr x0, pc+384 (addr 0x000000004cd98280)    ;; object: 0x21004241 <undefined>
0x4cd98104   164  stur x0, [x3, #135]
0x4cd98108   168  ldr x0, pc+384 (addr 0x000000004cd98288)    ;; object: 0x21004241 <undefined>
0x4cd9810c   172  stur x0, [x3, #143]
0x4cd98110   176  ldr x0, pc+384 (addr 0x000000004cd98290)    ;; object: 0x21004241 <undefined>
0x4cd98114   180  stur x0, [x3, #151]
0x4cd98118   184  ldr x0, pc+384 (addr 0x000000004cd98298)    ;; object: 0x21004241 <undefined>
0x4cd9811c   188  stur x0, [x3, #159]
0x4cd98120   192  ldr x0, pc+384 (addr 0x000000004cd982a0)    ;; object: 0x21004241 <undefined>
0x4cd98124   196  stur x0, [x3, #167]
0x4cd98128   200  ldr x0, pc+384 (addr 0x000000004cd982a8)    ;; object: 0x21004241 <undefined>
0x4cd9812c   204  stur x0, [x3, #175]
0x4cd98130   208  ldr x0, pc+384 (addr 0x000000004cd982b0)    ;; object: 0x21004241 <undefined>
0x4cd98134   212  stur x0, [x3, #183]
0x4cd98138   216  ldr x0, pc+384 (addr 0x000000004cd982b8)    ;; object: 0x21004241 <undefined>
0x4cd9813c   220  stur x0, [x3, #191]
0x4cd98140   224  ldr x0, pc+384 (addr 0x000000004cd982c0)    ;; object: 0x21004241 <undefined>
0x4cd98144   228  stur x0, [x3, #199]
0x4cd98148   232  ldr x0, pc+384 (addr 0x000000004cd982c8)    ;; object: 0x21004241 <undefined>
0x4cd9814c   236  stur x0, [x3, #207]
0x4cd98150   240  ldr x0, pc+384 (addr 0x000000004cd982d0)    ;; object: 0x21004241 <undefined>
0x4cd98154   244  stur x0, [x3, #215]
0x4cd98158   248  ldr x0, pc+384 (addr 0x000000004cd982d8)    ;; object: 0x21004241 <undefined>
0x4cd9815c   252  stur x0, [x3, #223]
0x4cd98160   256  ldr x0, pc+384 (addr 0x000000004cd982e0)    ;; object: 0x21004241 <undefined>
0x4cd98164   260  stur x0, [x3, #231]
0x4cd98168   264  ldr x0, pc+384 (addr 0x000000004cd982e8)    ;; object: 0x21004241 <undefined>
0x4cd9816c   268  stur x0, [x3, #239]
0x4cd98170   272  ldr x0, pc+384 (addr 0x000000004cd982f0)    ;; object: 0x21004241 <undefined>
0x4cd98174   276  stur x0, [x3, #247]
0x4cd98178   280  ldr x0, pc+384 (addr 0x000000004cd982f8)    ;; object: 0x21004241 <undefined>
0x4cd9817c   284  stur x0, [x3, #255]
0x4cd98180   288  ldr x0, pc+384 (addr 0x000000004cd98300)    ;; object: 0x21004241 <undefined>
0x4cd98184   292  movz x16, #0x107
0x4cd98188   296  str x0, [x3, x16]
0x4cd9818c   300  ldr x0, pc+380 (addr 0x000000004cd98308)    ;; object: 0x21004241 <undefined>
0x4cd98190   304  movz x16, #0x10f
0x4cd98194   308  str x0, [x3, x16]
0x4cd98198   312  ldr x0, pc+376 (addr 0x000000004cd98310)    ;; object: 0x21004241 <undefined>
0x4cd9819c   316  movz x16, #0x117
0x4cd981a0   320  str x0, [x3, x16]
0x4cd981a4   324  mov x0, x3
0x4cd981a8   328  ret
0x4cd981ac   332  sub csp, jssp, #0x10 (16)
0x4cd981b0   336  stp fp, lr, [jssp, #-16]!
0x4cd981b4   340  movz fp, #0xa00000000
0x4cd981b8   344  sub csp, jssp, #0x8 (8)
0x4cd981bc   348  str fp, [jssp, #-8]!
0x4cd981c0   352  add fp, jssp, #0x8 (8)
0x4cd981c4   356  movz x3, #0x0
0x4cd981c8   360  mov x16, lr
0x4cd981cc   364  ldr x17, pc+332 (addr 0x000000004cd98318)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd981d0   368  blr x17
0x4cd981d4   372  movz x0, #0x12000000000
0x4cd981d8   376  movz x10, #0x0
0x4cd981dc   380  sub csp, jssp, #0x10 (16)
0x4cd981e0   384  stp x10, x0, [jssp, #-16]!
0x4cd981e4   388  movz x0, #0x2
0x4cd981e8   392  movz x1, #0x5b88
0x4cd981ec   396  movk x1, #0xe2, lsl #16
0x4cd981f0   400  ldr x16, pc+304 (addr 0x000000004cd98320)    ;; code: STUB, CEntryStub, minor: 5
0x4cd981f4   404  blr x16
0x4cd981f8   408  str x0, [jssp, #24]
0x4cd981fc   412  ldr x16, pc+300 (addr 0x000000004cd98328)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd98200   416  blr x16
0x4cd98204   420  ldr lr, [jssp, #16]
0x4cd98208   424  ldp xzr, fp, [jssp], #24
0x4cd9820c   428  b #-0x18c (addr 0x4cd98080)
0x4cd98210   432  580008ff       constant pool begin (num_const = 71)    ;; constant pool
0x4cd98214   436  d63f03e0       constant
0x4cd98218   440  2a806149       constant
0x4cd9821c   444  00000000       constant
0x4cd98220   448  21004519       constant
0x4cd98224   452  00000000       constant
0x4cd98228   456  21004241       constant
0x4cd9822c   460  00000000       constant
0x4cd98230   464  21004241       constant
0x4cd98234   468  00000000       constant
0x4cd98238   472  21004241       constant
0x4cd9823c   476  00000000       constant
0x4cd98240   480  21004241       constant
0x4cd98244   484  00000000       constant
0x4cd98248   488  21004241       constant
0x4cd9824c   492  00000000       constant
0x4cd98250   496  21004241       constant
0x4cd98254   500  00000000       constant
0x4cd98258   504  21004241       constant
0x4cd9825c   508  00000000       constant
0x4cd98260   512  21004241       constant
0x4cd98264   516  00000000       constant
0x4cd98268   520  21004241       constant
0x4cd9826c   524  00000000       constant
0x4cd98270   528  21004241       constant
0x4cd98274   532  00000000       constant
0x4cd98278   536  21004241       constant
0x4cd9827c   540  00000000       constant
0x4cd98280   544  21004241       constant
0x4cd98284   548  00000000       constant
0x4cd98288   552  21004241       constant
0x4cd9828c   556  00000000       constant
0x4cd98290   560  21004241       constant
0x4cd98294   564  00000000       constant
0x4cd98298   568  21004241       constant
0x4cd9829c   572  00000000       constant
0x4cd982a0   576  21004241       constant
0x4cd982a4   580  00000000       constant
0x4cd982a8   584  21004241       constant
0x4cd982ac   588  00000000       constant
0x4cd982b0   592  21004241       constant
0x4cd982b4   596  00000000       constant
0x4cd982b8   600  21004241       constant
0x4cd982bc   604  00000000       constant
0x4cd982c0   608  21004241       constant
0x4cd982c4   612  00000000       constant
0x4cd982c8   616  21004241       constant
0x4cd982cc   620  00000000       constant
0x4cd982d0   624  21004241       constant
0x4cd982d4   628  00000000       constant
0x4cd982d8   632  21004241       constant
0x4cd982dc   636  00000000       constant
0x4cd982e0   640  21004241       constant
0x4cd982e4   644  00000000       constant
0x4cd982e8   648  21004241       constant
0x4cd982ec   652  00000000       constant
0x4cd982f0   656  21004241       constant
0x4cd982f4   660  00000000       constant
0x4cd982f8   664  21004241       constant
0x4cd982fc   668  00000000       constant
0x4cd98300   672  21004241       constant
0x4cd98304   676  00000000       constant
0x4cd98308   680  21004241       constant
0x4cd9830c   684  00000000       constant
0x4cd98310   688  21004241       constant
0x4cd98314   692  00000000       constant
0x4cd98318   696  4cd06820       constant
0x4cd9831c   700  00000000       constant
0x4cd98320   704  4cd06260       constant
0x4cd98324   708  00000000       constant
0x4cd98328   712  4cd068e0       constant
0x4cd9832c   716  00000000       constant


Safepoints (size = 21)
0x4cd981f8   408  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 41)
0x4cd98080  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd98098  embedded object  (0x21004519 <the hole>)
0x4cd980a8  embedded object  (0x21004241 <undefined>)
0x4cd980b0  embedded object  (0x21004241 <undefined>)
0x4cd980b8  embedded object  (0x21004241 <undefined>)
0x4cd980c0  embedded object  (0x21004241 <undefined>)
0x4cd980c8  embedded object  (0x21004241 <undefined>)
0x4cd980d0  embedded object  (0x21004241 <undefined>)
0x4cd980d8  embedded object  (0x21004241 <undefined>)
0x4cd980e0  embedded object  (0x21004241 <undefined>)
0x4cd980e8  embedded object  (0x21004241 <undefined>)
0x4cd980f0  embedded object  (0x21004241 <undefined>)
0x4cd980f8  embedded object  (0x21004241 <undefined>)
0x4cd98100  embedded object  (0x21004241 <undefined>)
0x4cd98108  embedded object  (0x21004241 <undefined>)
0x4cd98110  embedded object  (0x21004241 <undefined>)
0x4cd98118  embedded object  (0x21004241 <undefined>)
0x4cd98120  embedded object  (0x21004241 <undefined>)
0x4cd98128  embedded object  (0x21004241 <undefined>)
0x4cd98130  embedded object  (0x21004241 <undefined>)
0x4cd98138  embedded object  (0x21004241 <undefined>)
0x4cd98140  embedded object  (0x21004241 <undefined>)
0x4cd98148  embedded object  (0x21004241 <undefined>)
0x4cd98150  embedded object  (0x21004241 <undefined>)
0x4cd98158  embedded object  (0x21004241 <undefined>)
0x4cd98160  embedded object  (0x21004241 <undefined>)
0x4cd98168  embedded object  (0x21004241 <undefined>)
0x4cd98170  embedded object  (0x21004241 <undefined>)
0x4cd98178  embedded object  (0x21004241 <undefined>)
0x4cd98180  embedded object  (0x21004241 <undefined>)
0x4cd9818c  embedded object  (0x21004241 <undefined>)
0x4cd98198  embedded object  (0x21004241 <undefined>)
0x4cd981cc  code target (STUB)  (0x4cd06820)
0x4cd981f0  code target (STUB)  (0x4cd06260)
0x4cd981fc  code target (STUB)  (0x4cd068e0)
0x4cd98210  constant pool (size 288)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cd99940     0  tbz w0, #0, #+0x98 (addr 0x4cd999d8)
0x4cd99944     4  mov x2, x0
0x4cd99948     8  ldur x4, [x1, #7]
0x4cd9994c    12  stur x2, [x4, #23]
0x4cd99950    16  add x3, x4, #0x17 (23)
0x4cd99954    20  and x2, x2, #0xfffffffffff00000
0x4cd99958    24  ldr x2, [x2, #8]
0x4cd9995c    28  tbz w2, #1, #+0x24 (addr 0x4cd99980)
0x4cd99960    32  and x2, x4, #0xfffffffffff00000
0x4cd99964    36  ldr x2, [x2, #8]
0x4cd99968    40  tbz w2, #2, #+0x18 (addr 0x4cd99980)
0x4cd9996c    44  sub csp, jssp, #0x8 (8)
0x4cd99970    48  str lr, [jssp, #-8]!
0x4cd99974    52  ldr x16, pc+84 (addr 0x000000004cd999c8)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cd99978    56  blr x16
0x4cd9997c    60  ldr lr, [jssp], #8
0x4cd99980    64  stur x5, [x1, #-1]
0x4cd99984    68  tbz w5, #0, #+0x34 (addr 0x4cd999b8)
0x4cd99988    72  sub x2, x1, #0x1 (1)
0x4cd9998c    76  and x5, x5, #0xfffffffffff00000
0x4cd99990    80  ldr x5, [x5, #8]
0x4cd99994    84  tbz w5, #1, #+0x24 (addr 0x4cd999b8)
0x4cd99998    88  and x5, x1, #0xfffffffffff00000
0x4cd9999c    92  ldr x5, [x5, #8]
0x4cd999a0    96  tbz w5, #2, #+0x18 (addr 0x4cd999b8)
0x4cd999a4   100  sub csp, jssp, #0x8 (8)
0x4cd999a8   104  str lr, [jssp, #-8]!
0x4cd999ac   108  ldr x16, pc+36 (addr 0x000000004cd999d0)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd999b0   112  blr x16
0x4cd999b4   116  ldr lr, [jssp], #8
0x4cd999b8   120  ret
0x4cd999bc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd999c0   128  d63f03e0       constant
0x4cd999c4   132  d503201f       constant
0x4cd999c8   136  4cd378a0       constant
0x4cd999cc   140  00000000       constant
0x4cd999d0   144  4cd38080       constant
0x4cd999d4   148  00000000       constant
0x4cd999d8   152  movz x16, #0x0
0x4cd999dc   156  sub csp, jssp, #0x10 (16)
0x4cd999e0   160  stp fp, lr, [jssp, #-16]!
0x4cd999e4   164  bl #+0x4 (addr 0x4cd999e8)
0x4cd999e8   168  movz x17, #0xa00000000
0x4cd999ec   172  sub csp, jssp, #0x10 (16)
0x4cd999f0   176  stp x17, cp, [jssp, #-16]!
0x4cd999f4   180  add fp, jssp, #0x10 (16)
0x4cd999f8   184  ldr x17, pc+24 (addr 0x000000004cd99a10)    ;; lazy deoptimization bailout 0
0x4cd999fc   188  add x17, x17, x16
0x4cd99a00   192  br x17
0x4cd99a04   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd99a08   200  d63f03e0       constant
0x4cd99a0c   204  d503201f       constant
0x4cd99a10   208  4cb06000       constant
0x4cd99a14   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd99974  code target (STUB)  (0x4cd378a0)
0x4cd999ac  code target (STUB)  (0x4cd38080)
0x4cd999bc  constant pool (size 28)
0x4cd999f8  runtime entry
0x4cd99a04  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cd99940     0  tbz w0, #0, #+0x98 (addr 0x4cd999d8)
0x4cd99944     4  mov x2, x0
0x4cd99948     8  ldur x4, [x1, #7]
0x4cd9994c    12  stur x2, [x4, #23]
0x4cd99950    16  add x3, x4, #0x17 (23)
0x4cd99954    20  and x2, x2, #0xfffffffffff00000
0x4cd99958    24  ldr x2, [x2, #8]
0x4cd9995c    28  tbz w2, #1, #+0x24 (addr 0x4cd99980)
0x4cd99960    32  and x2, x4, #0xfffffffffff00000
0x4cd99964    36  ldr x2, [x2, #8]
0x4cd99968    40  tbz w2, #2, #+0x18 (addr 0x4cd99980)
0x4cd9996c    44  sub csp, jssp, #0x8 (8)
0x4cd99970    48  str lr, [jssp, #-8]!
0x4cd99974    52  ldr x16, pc+84 (addr 0x000000004cd999c8)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cd99978    56  blr x16
0x4cd9997c    60  ldr lr, [jssp], #8
0x4cd99980    64  stur x5, [x1, #-1]
0x4cd99984    68  tbz w5, #0, #+0x34 (addr 0x4cd999b8)
0x4cd99988    72  sub x2, x1, #0x1 (1)
0x4cd9998c    76  and x5, x5, #0xfffffffffff00000
0x4cd99990    80  ldr x5, [x5, #8]
0x4cd99994    84  tbz w5, #1, #+0x24 (addr 0x4cd999b8)
0x4cd99998    88  and x5, x1, #0xfffffffffff00000
0x4cd9999c    92  ldr x5, [x5, #8]
0x4cd999a0    96  tbz w5, #2, #+0x18 (addr 0x4cd999b8)
0x4cd999a4   100  sub csp, jssp, #0x8 (8)
0x4cd999a8   104  str lr, [jssp, #-8]!
0x4cd999ac   108  ldr x16, pc+36 (addr 0x000000004cd999d0)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd999b0   112  blr x16
0x4cd999b4   116  ldr lr, [jssp], #8
0x4cd999b8   120  ret
0x4cd999bc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd999c0   128  d63f03e0       constant
0x4cd999c4   132  d503201f       constant
0x4cd999c8   136  4cd378a0       constant
0x4cd999cc   140  00000000       constant
0x4cd999d0   144  4cd38080       constant
0x4cd999d4   148  00000000       constant
0x4cd999d8   152  movz x16, #0x0
0x4cd999dc   156  sub csp, jssp, #0x10 (16)
0x4cd999e0   160  stp fp, lr, [jssp, #-16]!
0x4cd999e4   164  bl #+0x4 (addr 0x4cd999e8)
0x4cd999e8   168  movz x17, #0xa00000000
0x4cd999ec   172  sub csp, jssp, #0x10 (16)
0x4cd999f0   176  stp x17, cp, [jssp, #-16]!
0x4cd999f4   180  add fp, jssp, #0x10 (16)
0x4cd999f8   184  ldr x17, pc+24 (addr 0x000000004cd99a10)    ;; lazy deoptimization bailout 0
0x4cd999fc   188  add x17, x17, x16
0x4cd99a00   192  br x17
0x4cd99a04   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd99a08   200  d63f03e0       constant
0x4cd99a0c   204  d503201f       constant
0x4cd99a10   208  4cb06000       constant
0x4cd99a14   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd99974  code target (STUB)  (0x4cd378a0)
0x4cd999ac  code target (STUB)  (0x4cd38080)
0x4cd999bc  constant pool (size 28)
0x4cd999f8  runtime entry
0x4cd99a04  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = internal/linkedlist
compiler = unknown
Instructions (size = 184)
0x4cd99a80     0  sub csp, jssp, #0x8 (8)
0x4cd99a84     4  str x3, [jssp, #-8]!
0x4cd99a88     8  sub csp, jssp, #0x8 (8)
0x4cd99a8c    12  str x4, [jssp, #-8]!
0x4cd99a90    16  ldr x3, pc+112 (addr 0x000000004cd99b00)    ;; object: 0x21063e59 Cell for 0
0x4cd99a94    20  ldur x3, [x3, #7]
0x4cd99a98    24  cmp x3, #0x0 (0)
0x4cd99a9c    28  b.ne #+0x44 (addr 0x4cd99ae0)
0x4cd99aa0    32  tbz w0, #0, #+0x40 (addr 0x4cd99ae0)
0x4cd99aa4    36  ldur x3, [x0, #-1]
0x4cd99aa8    40  ldr x4, pc+96 (addr 0x000000004cd99b08)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd99aac    44  ldur x4, [x4, #7]
0x4cd99ab0    48  cmp x3, x4
0x4cd99ab4    52  b.ne #+0x2c (addr 0x4cd99ae0)
0x4cd99ab8    56  ldr x5, pc+88 (addr 0x000000004cd99b10)    ;; object: 0x210e8e49 WeakCell for 0x2a824de1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd99abc    60  ldur x5, [x5, #7]
0x4cd99ac0    64  tbz w5, #0, #+0x20 (addr 0x4cd99ae0)
0x4cd99ac4    68  ldursw x4, [x5, #15]
0x4cd99ac8    72  tbnz w4, #23, #+0x18 (addr 0x4cd99ae0)
0x4cd99acc    76  ldr x4, [jssp], #8
0x4cd99ad0    80  ldr x3, [jssp], #8
0x4cd99ad4    84  ldr x2, pc+68 (addr 0x000000004cd99b18)    ;; object: 0x210be2f9 <String[19]: internal/linkedlist>
0x4cd99ad8    88  ldr x16, pc+72 (addr 0x000000004cd99b20)    ;; code: HANDLER, StoreTransitionStub, minor: 196611
0x4cd99adc    92  br x16
0x4cd99ae0    96  ldr x2, pc+72 (addr 0x000000004cd99b28)    ;; object: 0x210be2f9 <String[19]: internal/linkedlist>
0x4cd99ae4   100  ldr x4, [jssp], #8
0x4cd99ae8   104  ldr x3, [jssp], #8
0x4cd99aec   108  ldr x16, pc+68 (addr 0x000000004cd99b30)    ;; code: BUILTIN
0x4cd99af0   112  br x16
0x4cd99af4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd99af8   120  d63f03e0       constant
0x4cd99afc   124  d503201f       constant
0x4cd99b00   128  21063e59       constant
0x4cd99b04   132  00000000       constant
0x4cd99b08   136  210c22b1       constant
0x4cd99b0c   140  00000000       constant
0x4cd99b10   144  210e8e49       constant
0x4cd99b14   148  00000000       constant
0x4cd99b18   152  210be2f9       constant
0x4cd99b1c   156  00000000       constant
0x4cd99b20   160  4cd99940       constant
0x4cd99b24   164  00000000       constant
0x4cd99b28   168  210be2f9       constant
0x4cd99b2c   172  00000000       constant
0x4cd99b30   176  4cd22420       constant
0x4cd99b34   180  00000000       constant


RelocInfo (size = 13)
0x4cd99a90  embedded object  (0x21063e59 Cell for 0)
0x4cd99aa8  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd99ab8  embedded object  (0x210e8e49 WeakCell for 0x2a824de1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd99ad4  embedded object  (0x210be2f9 <String[19]: internal/linkedlist>)
0x4cd99ad8  code target (HANDLER)  (0x4cd99940)
0x4cd99ae0  embedded object  (0x210be2f9 <String[19]: internal/linkedlist>)
0x4cd99aec  code target (BUILTIN)  (0x4cd22420)
0x4cd99af4  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cd9a100     0  tbz w0, #0, #+0x98 (addr 0x4cd9a198)
0x4cd9a104     4  mov x2, x0
0x4cd9a108     8  ldur x4, [x1, #7]
0x4cd9a10c    12  stur x2, [x4, #31]
0x4cd9a110    16  add x3, x4, #0x1f (31)
0x4cd9a114    20  and x2, x2, #0xfffffffffff00000
0x4cd9a118    24  ldr x2, [x2, #8]
0x4cd9a11c    28  tbz w2, #1, #+0x24 (addr 0x4cd9a140)
0x4cd9a120    32  and x2, x4, #0xfffffffffff00000
0x4cd9a124    36  ldr x2, [x2, #8]
0x4cd9a128    40  tbz w2, #2, #+0x18 (addr 0x4cd9a140)
0x4cd9a12c    44  sub csp, jssp, #0x8 (8)
0x4cd9a130    48  str lr, [jssp, #-8]!
0x4cd9a134    52  ldr x16, pc+84 (addr 0x000000004cd9a188)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cd9a138    56  blr x16
0x4cd9a13c    60  ldr lr, [jssp], #8
0x4cd9a140    64  stur x5, [x1, #-1]
0x4cd9a144    68  tbz w5, #0, #+0x34 (addr 0x4cd9a178)
0x4cd9a148    72  sub x2, x1, #0x1 (1)
0x4cd9a14c    76  and x5, x5, #0xfffffffffff00000
0x4cd9a150    80  ldr x5, [x5, #8]
0x4cd9a154    84  tbz w5, #1, #+0x24 (addr 0x4cd9a178)
0x4cd9a158    88  and x5, x1, #0xfffffffffff00000
0x4cd9a15c    92  ldr x5, [x5, #8]
0x4cd9a160    96  tbz w5, #2, #+0x18 (addr 0x4cd9a178)
0x4cd9a164   100  sub csp, jssp, #0x8 (8)
0x4cd9a168   104  str lr, [jssp, #-8]!
0x4cd9a16c   108  ldr x16, pc+36 (addr 0x000000004cd9a190)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd9a170   112  blr x16
0x4cd9a174   116  ldr lr, [jssp], #8
0x4cd9a178   120  ret
0x4cd9a17c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd9a180   128  d63f03e0       constant
0x4cd9a184   132  d503201f       constant
0x4cd9a188   136  4cd378a0       constant
0x4cd9a18c   140  00000000       constant
0x4cd9a190   144  4cd38080       constant
0x4cd9a194   148  00000000       constant
0x4cd9a198   152  movz x16, #0x0
0x4cd9a19c   156  sub csp, jssp, #0x10 (16)
0x4cd9a1a0   160  stp fp, lr, [jssp, #-16]!
0x4cd9a1a4   164  bl #+0x4 (addr 0x4cd9a1a8)
0x4cd9a1a8   168  movz x17, #0xa00000000
0x4cd9a1ac   172  sub csp, jssp, #0x10 (16)
0x4cd9a1b0   176  stp x17, cp, [jssp, #-16]!
0x4cd9a1b4   180  add fp, jssp, #0x10 (16)
0x4cd9a1b8   184  ldr x17, pc+24 (addr 0x000000004cd9a1d0)    ;; lazy deoptimization bailout 0
0x4cd9a1bc   188  add x17, x17, x16
0x4cd9a1c0   192  br x17
0x4cd9a1c4   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd9a1c8   200  d63f03e0       constant
0x4cd9a1cc   204  d503201f       constant
0x4cd9a1d0   208  4cb06000       constant
0x4cd9a1d4   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd9a134  code target (STUB)  (0x4cd378a0)
0x4cd9a16c  code target (STUB)  (0x4cd38080)
0x4cd9a17c  constant pool (size 28)
0x4cd9a1b8  runtime entry
0x4cd9a1c4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cd9a100     0  tbz w0, #0, #+0x98 (addr 0x4cd9a198)
0x4cd9a104     4  mov x2, x0
0x4cd9a108     8  ldur x4, [x1, #7]
0x4cd9a10c    12  stur x2, [x4, #31]
0x4cd9a110    16  add x3, x4, #0x1f (31)
0x4cd9a114    20  and x2, x2, #0xfffffffffff00000
0x4cd9a118    24  ldr x2, [x2, #8]
0x4cd9a11c    28  tbz w2, #1, #+0x24 (addr 0x4cd9a140)
0x4cd9a120    32  and x2, x4, #0xfffffffffff00000
0x4cd9a124    36  ldr x2, [x2, #8]
0x4cd9a128    40  tbz w2, #2, #+0x18 (addr 0x4cd9a140)
0x4cd9a12c    44  sub csp, jssp, #0x8 (8)
0x4cd9a130    48  str lr, [jssp, #-8]!
0x4cd9a134    52  ldr x16, pc+84 (addr 0x000000004cd9a188)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cd9a138    56  blr x16
0x4cd9a13c    60  ldr lr, [jssp], #8
0x4cd9a140    64  stur x5, [x1, #-1]
0x4cd9a144    68  tbz w5, #0, #+0x34 (addr 0x4cd9a178)
0x4cd9a148    72  sub x2, x1, #0x1 (1)
0x4cd9a14c    76  and x5, x5, #0xfffffffffff00000
0x4cd9a150    80  ldr x5, [x5, #8]
0x4cd9a154    84  tbz w5, #1, #+0x24 (addr 0x4cd9a178)
0x4cd9a158    88  and x5, x1, #0xfffffffffff00000
0x4cd9a15c    92  ldr x5, [x5, #8]
0x4cd9a160    96  tbz w5, #2, #+0x18 (addr 0x4cd9a178)
0x4cd9a164   100  sub csp, jssp, #0x8 (8)
0x4cd9a168   104  str lr, [jssp, #-8]!
0x4cd9a16c   108  ldr x16, pc+36 (addr 0x000000004cd9a190)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd9a170   112  blr x16
0x4cd9a174   116  ldr lr, [jssp], #8
0x4cd9a178   120  ret
0x4cd9a17c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cd9a180   128  d63f03e0       constant
0x4cd9a184   132  d503201f       constant
0x4cd9a188   136  4cd378a0       constant
0x4cd9a18c   140  00000000       constant
0x4cd9a190   144  4cd38080       constant
0x4cd9a194   148  00000000       constant
0x4cd9a198   152  movz x16, #0x0
0x4cd9a19c   156  sub csp, jssp, #0x10 (16)
0x4cd9a1a0   160  stp fp, lr, [jssp, #-16]!
0x4cd9a1a4   164  bl #+0x4 (addr 0x4cd9a1a8)
0x4cd9a1a8   168  movz x17, #0xa00000000
0x4cd9a1ac   172  sub csp, jssp, #0x10 (16)
0x4cd9a1b0   176  stp x17, cp, [jssp, #-16]!
0x4cd9a1b4   180  add fp, jssp, #0x10 (16)
0x4cd9a1b8   184  ldr x17, pc+24 (addr 0x000000004cd9a1d0)    ;; lazy deoptimization bailout 0
0x4cd9a1bc   188  add x17, x17, x16
0x4cd9a1c0   192  br x17
0x4cd9a1c4   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd9a1c8   200  d63f03e0       constant
0x4cd9a1cc   204  d503201f       constant
0x4cd9a1d0   208  4cb06000       constant
0x4cd9a1d4   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cd9a134  code target (STUB)  (0x4cd378a0)
0x4cd9a16c  code target (STUB)  (0x4cd38080)
0x4cd9a17c  constant pool (size 28)
0x4cd9a1b8  runtime entry
0x4cd9a1c4  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = assert
compiler = unknown
Instructions (size = 184)
0x4cd9a240     0  sub csp, jssp, #0x8 (8)
0x4cd9a244     4  str x3, [jssp, #-8]!
0x4cd9a248     8  sub csp, jssp, #0x8 (8)
0x4cd9a24c    12  str x4, [jssp, #-8]!
0x4cd9a250    16  ldr x3, pc+112 (addr 0x000000004cd9a2c0)    ;; object: 0x21063e59 Cell for 0
0x4cd9a254    20  ldur x3, [x3, #7]
0x4cd9a258    24  cmp x3, #0x0 (0)
0x4cd9a25c    28  b.ne #+0x44 (addr 0x4cd9a2a0)
0x4cd9a260    32  tbz w0, #0, #+0x40 (addr 0x4cd9a2a0)
0x4cd9a264    36  ldur x3, [x0, #-1]
0x4cd9a268    40  ldr x4, pc+96 (addr 0x000000004cd9a2c8)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd9a26c    44  ldur x4, [x4, #7]
0x4cd9a270    48  cmp x3, x4
0x4cd9a274    52  b.ne #+0x2c (addr 0x4cd9a2a0)
0x4cd9a278    56  ldr x5, pc+88 (addr 0x000000004cd9a2d0)    ;; object: 0x210e9b51 WeakCell for 0x2a8250a1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd9a27c    60  ldur x5, [x5, #7]
0x4cd9a280    64  tbz w5, #0, #+0x20 (addr 0x4cd9a2a0)
0x4cd9a284    68  ldursw x4, [x5, #15]
0x4cd9a288    72  tbnz w4, #23, #+0x18 (addr 0x4cd9a2a0)
0x4cd9a28c    76  ldr x4, [jssp], #8
0x4cd9a290    80  ldr x3, [jssp], #8
0x4cd9a294    84  ldr x2, pc+68 (addr 0x000000004cd9a2d8)    ;; object: 0x210bdc41 <String[6]: assert>
0x4cd9a298    88  ldr x16, pc+72 (addr 0x000000004cd9a2e0)    ;; code: HANDLER, StoreTransitionStub, minor: 196612
0x4cd9a29c    92  br x16
0x4cd9a2a0    96  ldr x2, pc+72 (addr 0x000000004cd9a2e8)    ;; object: 0x210bdc41 <String[6]: assert>
0x4cd9a2a4   100  ldr x4, [jssp], #8
0x4cd9a2a8   104  ldr x3, [jssp], #8
0x4cd9a2ac   108  ldr x16, pc+68 (addr 0x000000004cd9a2f0)    ;; code: BUILTIN
0x4cd9a2b0   112  br x16
0x4cd9a2b4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd9a2b8   120  d63f03e0       constant
0x4cd9a2bc   124  d503201f       constant
0x4cd9a2c0   128  21063e59       constant
0x4cd9a2c4   132  00000000       constant
0x4cd9a2c8   136  210c22b1       constant
0x4cd9a2cc   140  00000000       constant
0x4cd9a2d0   144  210e9b51       constant
0x4cd9a2d4   148  00000000       constant
0x4cd9a2d8   152  210bdc41       constant
0x4cd9a2dc   156  00000000       constant
0x4cd9a2e0   160  4cd9a100       constant
0x4cd9a2e4   164  00000000       constant
0x4cd9a2e8   168  210bdc41       constant
0x4cd9a2ec   172  00000000       constant
0x4cd9a2f0   176  4cd22420       constant
0x4cd9a2f4   180  00000000       constant


RelocInfo (size = 13)
0x4cd9a250  embedded object  (0x21063e59 Cell for 0)
0x4cd9a268  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd9a278  embedded object  (0x210e9b51 WeakCell for 0x2a8250a1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd9a294  embedded object  (0x210bdc41 <String[6]: assert>)
0x4cd9a298  code target (HANDLER)  (0x4cd9a100)
0x4cd9a2a0  embedded object  (0x210bdc41 <String[6]: assert>)
0x4cd9a2ac  code target (BUILTIN)  (0x4cd22420)
0x4cd9a2b4  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = exec
compiler = unknown
Instructions (size = 120)
0x4cd9c7a0     0  sub csp, jssp, #0x8 (8)
0x4cd9c7a4     4  str x3, [jssp, #-8]!
0x4cd9c7a8     8  sub csp, jssp, #0x8 (8)
0x4cd9c7ac    12  str x0, [jssp, #-8]!
0x4cd9c7b0    16  ldr x0, pc+72 (addr 0x000000004cd9c7f8)    ;; object: 0x210ed491 Cell for 0
0x4cd9c7b4    20  ldur x0, [x0, #7]
0x4cd9c7b8    24  cmp x0, #0x0 (0)
0x4cd9c7bc    28  b.ne #+0x14 (addr 0x4cd9c7d0)
0x4cd9c7c0    32  ldr x3, pc+64 (addr 0x000000004cd9c800)    ;; object: 0x210ed4a1 WeakCell for 0x2335ea99 <an Object with map 0x2a8164d1>
0x4cd9c7c4    36  ldur x3, [x3, #7]
0x4cd9c7c8    40  tbz w3, #0, #+0x8 (addr 0x4cd9c7d0)
0x4cd9c7cc    44  b #+0x14 (addr 0x4cd9c7e0)
0x4cd9c7d0    48  ldr x0, [jssp], #8
0x4cd9c7d4    52  ldr x3, [jssp], #8
0x4cd9c7d8    56  ldr x16, pc+48 (addr 0x000000004cd9c808)    ;; code: BUILTIN
0x4cd9c7dc    60  br x16
0x4cd9c7e0    64  add jssp, jssp, #0x10 (16)
0x4cd9c7e4    68  mov x1, x3
0x4cd9c7e8    72  ldr x16, pc+40 (addr 0x000000004cd9c810)    ;; code: HANDLER, LoadFieldStub, minor: 2
0x4cd9c7ec    76  br x16
0x4cd9c7f0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cd9c7f4    84  d63f03e0       constant
0x4cd9c7f8    88  210ed491       constant
0x4cd9c7fc    92  00000000       constant
0x4cd9c800    96  210ed4a1       constant
0x4cd9c804   100  00000000       constant
0x4cd9c808   104  4cd222e0       constant
0x4cd9c80c   108  00000000       constant
0x4cd9c810   112  4cd6c260       constant
0x4cd9c814   116  00000000       constant


RelocInfo (size = 10)
0x4cd9c7b0  embedded object  (0x210ed491 Cell for 0)
0x4cd9c7c0  embedded object  (0x210ed4a1 WeakCell for 0x2335ea99 <an Object with map 0x2a8164d1>)
0x4cd9c7d8  code target (BUILTIN)  (0x4cd222e0)
0x4cd9c7e8  code target (HANDLER)  (0x4cd6c260)
0x4cd9c7f0  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0x4cd9cd40     0  mov x2, x0
0x4cd9cd44     4  stur x2, [x1, #47]
0x4cd9cd48     8  tbz w2, #0, #+0x34 (addr 0x4cd9cd7c)
0x4cd9cd4c    12  add x3, x1, #0x2f (47)
0x4cd9cd50    16  and x2, x2, #0xfffffffffff00000
0x4cd9cd54    20  ldr x2, [x2, #8]
0x4cd9cd58    24  tbz w2, #1, #+0x24 (addr 0x4cd9cd7c)
0x4cd9cd5c    28  and x2, x1, #0xfffffffffff00000
0x4cd9cd60    32  ldr x2, [x2, #8]
0x4cd9cd64    36  tbz w2, #2, #+0x18 (addr 0x4cd9cd7c)
0x4cd9cd68    40  sub csp, jssp, #0x8 (8)
0x4cd9cd6c    44  str lr, [jssp, #-8]!
0x4cd9cd70    48  ldr x16, pc+24 (addr 0x000000004cd9cd88)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd9cd74    52  blr x16
0x4cd9cd78    56  ldr lr, [jssp], #8
0x4cd9cd7c    60  ret
0x4cd9cd80    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd9cd84    68  d63f03e0       constant
0x4cd9cd88    72  4cd170c0       constant
0x4cd9cd8c    76  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 7)
0x4cd9cd70  code target (STUB)  (0x4cd170c0)
0x4cd9cd80  constant pool (size 16)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0x4cd9cd40     0  mov x2, x0
0x4cd9cd44     4  stur x2, [x1, #47]
0x4cd9cd48     8  tbz w2, #0, #+0x34 (addr 0x4cd9cd7c)
0x4cd9cd4c    12  add x3, x1, #0x2f (47)
0x4cd9cd50    16  and x2, x2, #0xfffffffffff00000
0x4cd9cd54    20  ldr x2, [x2, #8]
0x4cd9cd58    24  tbz w2, #1, #+0x24 (addr 0x4cd9cd7c)
0x4cd9cd5c    28  and x2, x1, #0xfffffffffff00000
0x4cd9cd60    32  ldr x2, [x2, #8]
0x4cd9cd64    36  tbz w2, #2, #+0x18 (addr 0x4cd9cd7c)
0x4cd9cd68    40  sub csp, jssp, #0x8 (8)
0x4cd9cd6c    44  str lr, [jssp, #-8]!
0x4cd9cd70    48  ldr x16, pc+24 (addr 0x000000004cd9cd88)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cd9cd74    52  blr x16
0x4cd9cd78    56  ldr lr, [jssp], #8
0x4cd9cd7c    60  ret
0x4cd9cd80    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cd9cd84    68  d63f03e0       constant
0x4cd9cd88    72  4cd170c0       constant
0x4cd9cd8c    76  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 7)
0x4cd9cd70  code target (STUB)  (0x4cd170c0)
0x4cd9cd80  constant pool (size 16)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0x4cd9d3c0     0  ldur x6, [x1, #7]
0x4cd9d3c4     4  ldur w7, [x6, #11]
0x4cd9d3c8     8  adds w8, w7, #0x3 (3)
0x4cd9d3cc    12  b.vs #+0x1dc (addr 0x4cd9d5a8)
0x4cd9d3d0    16  movz w16, #0x95ff
0x4cd9d3d4    20  cmp w8, w16, lsl #1
0x4cd9d3d8    24  b.hs #+0x1e0 (addr 0x4cd9d5b8)
0x4cd9d3dc    28  lsl x9, x8, #32
0x4cd9d3e0    32  lsl w10, w8, #3
0x4cd9d3e4    36  add w10, w10, #0x10 (16)
0x4cd9d3e8    40  sxtw x10, w10
0x4cd9d3ec    44  movz x11, #0xd2c0
0x4cd9d3f0    48  movk x11, #0x166d, lsl #16
0x4cd9d3f4    52  ldp x13, x16, [x11]
0x4cd9d3f8    56  adds x12, x13, x10
0x4cd9d3fc    60  ccmp x12, x16, #nzCv, lo
0x4cd9d400    64  b.hi #+0xf8 (addr 0x4cd9d4f8)
0x4cd9d404    68  str x12, [x11]
0x4cd9d408    72  orr x13, x13, #0x1
0x4cd9d40c    76  ldr x10, pc+348 (addr 0x000000004cd9d568)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd9d410    80  stur x10, [x13, #-1]
0x4cd9d414    84  stur x9, [x13, #7]
0x4cd9d418    88  cmp w7, w8
0x4cd9d41c    92  b.ge #+0x18 (addr 0x4cd9d434)
0x4cd9d420    96  sub w8, w8, #0x1 (1)
0x4cd9d424   100  ldr x9, pc+332 (addr 0x000000004cd9d570)    ;; object: 0x21004241 <undefined>
0x4cd9d428   104  add x10, x13, #0xf (15)
0x4cd9d42c   108  str x9, [x10, w8, sxtw #3]
0x4cd9d430   112  b #-0x18 (addr 0x4cd9d418)
0x4cd9d434   116  cmp w7, #0x0 (0)
0x4cd9d438   120  b.le #+0x1c (addr 0x4cd9d454)
0x4cd9d43c   124  sub w7, w7, #0x1 (1)
0x4cd9d440   128  add x8, x6, #0xf (15)
0x4cd9d444   132  ldr x9, [x8, w7, sxtw #3]
0x4cd9d448   136  add x8, x13, #0xf (15)
0x4cd9d44c   140  str x9, [x8, w7, sxtw #3]
0x4cd9d450   144  b #-0x1c (addr 0x4cd9d434)
0x4cd9d454   148  stur x13, [x1, #7]
0x4cd9d458   152  add x6, x1, #0x7 (7)
0x4cd9d45c   156  and x13, x1, #0xfffffffffff00000
0x4cd9d460   160  ldr x13, [x13, #8]
0x4cd9d464   164  tbz w13, #2, #+0x18 (addr 0x4cd9d47c)
0x4cd9d468   168  sub csp, jssp, #0x8 (8)
0x4cd9d46c   172  str lr, [jssp, #-8]!
0x4cd9d470   176  ldr x16, pc+264 (addr 0x000000004cd9d578)    ;; code: STUB, RecordWriteStub, minor: 72097
0x4cd9d474   180  blr x16
0x4cd9d478   184  ldr lr, [jssp], #8
0x4cd9d47c   188  tbz w0, #0, #+0x14c (addr 0x4cd9d5c8)
0x4cd9d480   192  mov x2, x0
0x4cd9d484   196  ldur x4, [x1, #7]
0x4cd9d488   200  stur x2, [x4, #39]
0x4cd9d48c   204  add x3, x4, #0x27 (39)
0x4cd9d490   208  and x2, x2, #0xfffffffffff00000
0x4cd9d494   212  ldr x2, [x2, #8]
0x4cd9d498   216  tbz w2, #1, #+0x24 (addr 0x4cd9d4bc)
0x4cd9d49c   220  and x2, x4, #0xfffffffffff00000
0x4cd9d4a0   224  ldr x2, [x2, #8]
0x4cd9d4a4   228  tbz w2, #2, #+0x18 (addr 0x4cd9d4bc)
0x4cd9d4a8   232  sub csp, jssp, #0x8 (8)
0x4cd9d4ac   236  str lr, [jssp, #-8]!
0x4cd9d4b0   240  ldr x16, pc+208 (addr 0x000000004cd9d580)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cd9d4b4   244  blr x16
0x4cd9d4b8   248  ldr lr, [jssp], #8
0x4cd9d4bc   252  stur x5, [x1, #-1]
0x4cd9d4c0   256  tbz w5, #0, #+0x34 (addr 0x4cd9d4f4)
0x4cd9d4c4   260  sub x2, x1, #0x1 (1)
0x4cd9d4c8   264  and x5, x5, #0xfffffffffff00000
0x4cd9d4cc   268  ldr x5, [x5, #8]
0x4cd9d4d0   272  tbz w5, #1, #+0x24 (addr 0x4cd9d4f4)
0x4cd9d4d4   276  and x5, x1, #0xfffffffffff00000
0x4cd9d4d8   280  ldr x5, [x5, #8]
0x4cd9d4dc   284  tbz w5, #2, #+0x18 (addr 0x4cd9d4f4)
0x4cd9d4e0   288  sub csp, jssp, #0x8 (8)
0x4cd9d4e4   292  str lr, [jssp, #-8]!
0x4cd9d4e8   296  ldr x16, pc+160 (addr 0x000000004cd9d588)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd9d4ec   300  blr x16
0x4cd9d4f0   304  ldr lr, [jssp], #8
0x4cd9d4f4   308  ret
0x4cd9d4f8   312  sub csp, jssp, #0x10 (16)
0x4cd9d4fc   316  stp fp, lr, [jssp, #-16]!
0x4cd9d500   320  movz fp, #0xa00000000
0x4cd9d504   324  sub csp, jssp, #0x8 (8)
0x4cd9d508   328  str fp, [jssp, #-8]!
0x4cd9d50c   332  add fp, jssp, #0x8 (8)
0x4cd9d510   336  movz x13, #0x0
0x4cd9d514   340  mov x16, lr
0x4cd9d518   344  ldr x17, pc+120 (addr 0x000000004cd9d590)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd9d51c   348  blr x17
0x4cd9d520   352  lsl x0, x10, #32
0x4cd9d524   356  movz x10, #0x0
0x4cd9d528   360  sub csp, jssp, #0x10 (16)
0x4cd9d52c   364  stp x10, x0, [jssp, #-16]!
0x4cd9d530   368  movz x0, #0x2
0x4cd9d534   372  movz x1, #0x5b88
0x4cd9d538   376  movk x1, #0xe2, lsl #16
0x4cd9d53c   380  ldr x16, pc+92 (addr 0x000000004cd9d598)    ;; code: STUB, CEntryStub, minor: 5
0x4cd9d540   384  blr x16
0x4cd9d544   388  str x0, [jssp, #104]
0x4cd9d548   392  ldr x16, pc+88 (addr 0x000000004cd9d5a0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd9d54c   396  blr x16
0x4cd9d550   400  ldr lr, [jssp, #16]
0x4cd9d554   404  ldp xzr, fp, [jssp], #24
0x4cd9d558   408  b #-0x14c (addr 0x4cd9d40c)
0x4cd9d55c   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0x4cd9d560   416  d63f03e0       constant
0x4cd9d564   420  d503201f       constant
0x4cd9d568   424  2a804259       constant
0x4cd9d56c   428  00000000       constant
0x4cd9d570   432  21004241       constant
0x4cd9d574   436  00000000       constant
0x4cd9d578   440  4cd370c0       constant
0x4cd9d57c   444  00000000       constant
0x4cd9d580   448  4cd378a0       constant
0x4cd9d584   452  00000000       constant
0x4cd9d588   456  4cd38080       constant
0x4cd9d58c   460  00000000       constant
0x4cd9d590   464  4cd06820       constant
0x4cd9d594   468  00000000       constant
0x4cd9d598   472  4cd06260       constant
0x4cd9d59c   476  00000000       constant
0x4cd9d5a0   480  4cd068e0       constant
0x4cd9d5a4   484  00000000       constant
0x4cd9d5a8   488  movz x16, #0x0
0x4cd9d5ac   492  sub csp, jssp, #0x10 (16)
0x4cd9d5b0   496  stp fp, lr, [jssp, #-16]!
0x4cd9d5b4   500  bl #+0x24 (addr 0x4cd9d5d8)
0x4cd9d5b8   504  movz x16, #0x8
0x4cd9d5bc   508  sub csp, jssp, #0x10 (16)
0x4cd9d5c0   512  stp fp, lr, [jssp, #-16]!
0x4cd9d5c4   516  bl #+0x14 (addr 0x4cd9d5d8)
0x4cd9d5c8   520  movz x16, #0x10
0x4cd9d5cc   524  sub csp, jssp, #0x10 (16)
0x4cd9d5d0   528  stp fp, lr, [jssp, #-16]!
0x4cd9d5d4   532  bl #+0x4 (addr 0x4cd9d5d8)
0x4cd9d5d8   536  movz x17, #0xa00000000
0x4cd9d5dc   540  sub csp, jssp, #0x10 (16)
0x4cd9d5e0   544  stp x17, cp, [jssp, #-16]!
0x4cd9d5e4   548  add fp, jssp, #0x10 (16)
0x4cd9d5e8   552  ldr x17, pc+24 (addr 0x000000004cd9d600)    ;; lazy deoptimization bailout 0
0x4cd9d5ec   556  add x17, x17, x16
0x4cd9d5f0   560  br x17
0x4cd9d5f4   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd9d5f8   568  d63f03e0       constant
0x4cd9d5fc   572  d503201f       constant
0x4cd9d600   576  4cb06000       constant
0x4cd9d604   580  00000000       constant


Safepoints (size = 21)
0x4cd9d544   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0x4cd9d40c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd9d424  embedded object  (0x21004241 <undefined>)
0x4cd9d470  code target (STUB)  (0x4cd370c0)
0x4cd9d4b0  code target (STUB)  (0x4cd378a0)
0x4cd9d4e8  code target (STUB)  (0x4cd38080)
0x4cd9d518  code target (STUB)  (0x4cd06820)
0x4cd9d53c  code target (STUB)  (0x4cd06260)
0x4cd9d548  code target (STUB)  (0x4cd068e0)
0x4cd9d55c  constant pool (size 76)
0x4cd9d5e8  runtime entry
0x4cd9d5f4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0x4cd9d3c0     0  ldur x6, [x1, #7]
0x4cd9d3c4     4  ldur w7, [x6, #11]
0x4cd9d3c8     8  adds w8, w7, #0x3 (3)
0x4cd9d3cc    12  b.vs #+0x1dc (addr 0x4cd9d5a8)
0x4cd9d3d0    16  movz w16, #0x95ff
0x4cd9d3d4    20  cmp w8, w16, lsl #1
0x4cd9d3d8    24  b.hs #+0x1e0 (addr 0x4cd9d5b8)
0x4cd9d3dc    28  lsl x9, x8, #32
0x4cd9d3e0    32  lsl w10, w8, #3
0x4cd9d3e4    36  add w10, w10, #0x10 (16)
0x4cd9d3e8    40  sxtw x10, w10
0x4cd9d3ec    44  movz x11, #0xd2c0
0x4cd9d3f0    48  movk x11, #0x166d, lsl #16
0x4cd9d3f4    52  ldp x13, x16, [x11]
0x4cd9d3f8    56  adds x12, x13, x10
0x4cd9d3fc    60  ccmp x12, x16, #nzCv, lo
0x4cd9d400    64  b.hi #+0xf8 (addr 0x4cd9d4f8)
0x4cd9d404    68  str x12, [x11]
0x4cd9d408    72  orr x13, x13, #0x1
0x4cd9d40c    76  ldr x10, pc+348 (addr 0x000000004cd9d568)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cd9d410    80  stur x10, [x13, #-1]
0x4cd9d414    84  stur x9, [x13, #7]
0x4cd9d418    88  cmp w7, w8
0x4cd9d41c    92  b.ge #+0x18 (addr 0x4cd9d434)
0x4cd9d420    96  sub w8, w8, #0x1 (1)
0x4cd9d424   100  ldr x9, pc+332 (addr 0x000000004cd9d570)    ;; object: 0x21004241 <undefined>
0x4cd9d428   104  add x10, x13, #0xf (15)
0x4cd9d42c   108  str x9, [x10, w8, sxtw #3]
0x4cd9d430   112  b #-0x18 (addr 0x4cd9d418)
0x4cd9d434   116  cmp w7, #0x0 (0)
0x4cd9d438   120  b.le #+0x1c (addr 0x4cd9d454)
0x4cd9d43c   124  sub w7, w7, #0x1 (1)
0x4cd9d440   128  add x8, x6, #0xf (15)
0x4cd9d444   132  ldr x9, [x8, w7, sxtw #3]
0x4cd9d448   136  add x8, x13, #0xf (15)
0x4cd9d44c   140  str x9, [x8, w7, sxtw #3]
0x4cd9d450   144  b #-0x1c (addr 0x4cd9d434)
0x4cd9d454   148  stur x13, [x1, #7]
0x4cd9d458   152  add x6, x1, #0x7 (7)
0x4cd9d45c   156  and x13, x1, #0xfffffffffff00000
0x4cd9d460   160  ldr x13, [x13, #8]
0x4cd9d464   164  tbz w13, #2, #+0x18 (addr 0x4cd9d47c)
0x4cd9d468   168  sub csp, jssp, #0x8 (8)
0x4cd9d46c   172  str lr, [jssp, #-8]!
0x4cd9d470   176  ldr x16, pc+264 (addr 0x000000004cd9d578)    ;; code: STUB, RecordWriteStub, minor: 72097
0x4cd9d474   180  blr x16
0x4cd9d478   184  ldr lr, [jssp], #8
0x4cd9d47c   188  tbz w0, #0, #+0x14c (addr 0x4cd9d5c8)
0x4cd9d480   192  mov x2, x0
0x4cd9d484   196  ldur x4, [x1, #7]
0x4cd9d488   200  stur x2, [x4, #39]
0x4cd9d48c   204  add x3, x4, #0x27 (39)
0x4cd9d490   208  and x2, x2, #0xfffffffffff00000
0x4cd9d494   212  ldr x2, [x2, #8]
0x4cd9d498   216  tbz w2, #1, #+0x24 (addr 0x4cd9d4bc)
0x4cd9d49c   220  and x2, x4, #0xfffffffffff00000
0x4cd9d4a0   224  ldr x2, [x2, #8]
0x4cd9d4a4   228  tbz w2, #2, #+0x18 (addr 0x4cd9d4bc)
0x4cd9d4a8   232  sub csp, jssp, #0x8 (8)
0x4cd9d4ac   236  str lr, [jssp, #-8]!
0x4cd9d4b0   240  ldr x16, pc+208 (addr 0x000000004cd9d580)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cd9d4b4   244  blr x16
0x4cd9d4b8   248  ldr lr, [jssp], #8
0x4cd9d4bc   252  stur x5, [x1, #-1]
0x4cd9d4c0   256  tbz w5, #0, #+0x34 (addr 0x4cd9d4f4)
0x4cd9d4c4   260  sub x2, x1, #0x1 (1)
0x4cd9d4c8   264  and x5, x5, #0xfffffffffff00000
0x4cd9d4cc   268  ldr x5, [x5, #8]
0x4cd9d4d0   272  tbz w5, #1, #+0x24 (addr 0x4cd9d4f4)
0x4cd9d4d4   276  and x5, x1, #0xfffffffffff00000
0x4cd9d4d8   280  ldr x5, [x5, #8]
0x4cd9d4dc   284  tbz w5, #2, #+0x18 (addr 0x4cd9d4f4)
0x4cd9d4e0   288  sub csp, jssp, #0x8 (8)
0x4cd9d4e4   292  str lr, [jssp, #-8]!
0x4cd9d4e8   296  ldr x16, pc+160 (addr 0x000000004cd9d588)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cd9d4ec   300  blr x16
0x4cd9d4f0   304  ldr lr, [jssp], #8
0x4cd9d4f4   308  ret
0x4cd9d4f8   312  sub csp, jssp, #0x10 (16)
0x4cd9d4fc   316  stp fp, lr, [jssp, #-16]!
0x4cd9d500   320  movz fp, #0xa00000000
0x4cd9d504   324  sub csp, jssp, #0x8 (8)
0x4cd9d508   328  str fp, [jssp, #-8]!
0x4cd9d50c   332  add fp, jssp, #0x8 (8)
0x4cd9d510   336  movz x13, #0x0
0x4cd9d514   340  mov x16, lr
0x4cd9d518   344  ldr x17, pc+120 (addr 0x000000004cd9d590)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cd9d51c   348  blr x17
0x4cd9d520   352  lsl x0, x10, #32
0x4cd9d524   356  movz x10, #0x0
0x4cd9d528   360  sub csp, jssp, #0x10 (16)
0x4cd9d52c   364  stp x10, x0, [jssp, #-16]!
0x4cd9d530   368  movz x0, #0x2
0x4cd9d534   372  movz x1, #0x5b88
0x4cd9d538   376  movk x1, #0xe2, lsl #16
0x4cd9d53c   380  ldr x16, pc+92 (addr 0x000000004cd9d598)    ;; code: STUB, CEntryStub, minor: 5
0x4cd9d540   384  blr x16
0x4cd9d544   388  str x0, [jssp, #104]
0x4cd9d548   392  ldr x16, pc+88 (addr 0x000000004cd9d5a0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cd9d54c   396  blr x16
0x4cd9d550   400  ldr lr, [jssp, #16]
0x4cd9d554   404  ldp xzr, fp, [jssp], #24
0x4cd9d558   408  b #-0x14c (addr 0x4cd9d40c)
0x4cd9d55c   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0x4cd9d560   416  d63f03e0       constant
0x4cd9d564   420  d503201f       constant
0x4cd9d568   424  2a804259       constant
0x4cd9d56c   428  00000000       constant
0x4cd9d570   432  21004241       constant
0x4cd9d574   436  00000000       constant
0x4cd9d578   440  4cd370c0       constant
0x4cd9d57c   444  00000000       constant
0x4cd9d580   448  4cd378a0       constant
0x4cd9d584   452  00000000       constant
0x4cd9d588   456  4cd38080       constant
0x4cd9d58c   460  00000000       constant
0x4cd9d590   464  4cd06820       constant
0x4cd9d594   468  00000000       constant
0x4cd9d598   472  4cd06260       constant
0x4cd9d59c   476  00000000       constant
0x4cd9d5a0   480  4cd068e0       constant
0x4cd9d5a4   484  00000000       constant
0x4cd9d5a8   488  movz x16, #0x0
0x4cd9d5ac   492  sub csp, jssp, #0x10 (16)
0x4cd9d5b0   496  stp fp, lr, [jssp, #-16]!
0x4cd9d5b4   500  bl #+0x24 (addr 0x4cd9d5d8)
0x4cd9d5b8   504  movz x16, #0x8
0x4cd9d5bc   508  sub csp, jssp, #0x10 (16)
0x4cd9d5c0   512  stp fp, lr, [jssp, #-16]!
0x4cd9d5c4   516  bl #+0x14 (addr 0x4cd9d5d8)
0x4cd9d5c8   520  movz x16, #0x10
0x4cd9d5cc   524  sub csp, jssp, #0x10 (16)
0x4cd9d5d0   528  stp fp, lr, [jssp, #-16]!
0x4cd9d5d4   532  bl #+0x4 (addr 0x4cd9d5d8)
0x4cd9d5d8   536  movz x17, #0xa00000000
0x4cd9d5dc   540  sub csp, jssp, #0x10 (16)
0x4cd9d5e0   544  stp x17, cp, [jssp, #-16]!
0x4cd9d5e4   548  add fp, jssp, #0x10 (16)
0x4cd9d5e8   552  ldr x17, pc+24 (addr 0x000000004cd9d600)    ;; lazy deoptimization bailout 0
0x4cd9d5ec   556  add x17, x17, x16
0x4cd9d5f0   560  br x17
0x4cd9d5f4   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cd9d5f8   568  d63f03e0       constant
0x4cd9d5fc   572  d503201f       constant
0x4cd9d600   576  4cb06000       constant
0x4cd9d604   580  00000000       constant


Safepoints (size = 21)
0x4cd9d544   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0x4cd9d40c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cd9d424  embedded object  (0x21004241 <undefined>)
0x4cd9d470  code target (STUB)  (0x4cd370c0)
0x4cd9d4b0  code target (STUB)  (0x4cd378a0)
0x4cd9d4e8  code target (STUB)  (0x4cd38080)
0x4cd9d518  code target (STUB)  (0x4cd06820)
0x4cd9d53c  code target (STUB)  (0x4cd06260)
0x4cd9d548  code target (STUB)  (0x4cd068e0)
0x4cd9d55c  constant pool (size 76)
0x4cd9d5e8  runtime entry
0x4cd9d5f4  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = internal/process
compiler = unknown
Instructions (size = 184)
0x4cd9d680     0  sub csp, jssp, #0x8 (8)
0x4cd9d684     4  str x3, [jssp, #-8]!
0x4cd9d688     8  sub csp, jssp, #0x8 (8)
0x4cd9d68c    12  str x4, [jssp, #-8]!
0x4cd9d690    16  ldr x3, pc+112 (addr 0x000000004cd9d700)    ;; object: 0x21063e59 Cell for 0
0x4cd9d694    20  ldur x3, [x3, #7]
0x4cd9d698    24  cmp x3, #0x0 (0)
0x4cd9d69c    28  b.ne #+0x44 (addr 0x4cd9d6e0)
0x4cd9d6a0    32  tbz w0, #0, #+0x40 (addr 0x4cd9d6e0)
0x4cd9d6a4    36  ldur x3, [x0, #-1]
0x4cd9d6a8    40  ldr x4, pc+96 (addr 0x000000004cd9d708)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd9d6ac    44  ldur x4, [x4, #7]
0x4cd9d6b0    48  cmp x3, x4
0x4cd9d6b4    52  b.ne #+0x2c (addr 0x4cd9d6e0)
0x4cd9d6b8    56  ldr x5, pc+88 (addr 0x000000004cd9d710)    ;; object: 0x210ee969 WeakCell for 0x2a825f11 <Map(FAST_HOLEY_ELEMENTS)>
0x4cd9d6bc    60  ldur x5, [x5, #7]
0x4cd9d6c0    64  tbz w5, #0, #+0x20 (addr 0x4cd9d6e0)
0x4cd9d6c4    68  ldursw x4, [x5, #15]
0x4cd9d6c8    72  tbnz w4, #23, #+0x18 (addr 0x4cd9d6e0)
0x4cd9d6cc    76  ldr x4, [jssp], #8
0x4cd9d6d0    80  ldr x3, [jssp], #8
0x4cd9d6d4    84  ldr x2, pc+68 (addr 0x000000004cd9d718)    ;; object: 0x210b9649 <String[16]: internal/process>
0x4cd9d6d8    88  ldr x16, pc+72 (addr 0x000000004cd9d720)    ;; code: HANDLER, StoreTransitionStub, minor: 327685
0x4cd9d6dc    92  br x16
0x4cd9d6e0    96  ldr x2, pc+72 (addr 0x000000004cd9d728)    ;; object: 0x210b9649 <String[16]: internal/process>
0x4cd9d6e4   100  ldr x4, [jssp], #8
0x4cd9d6e8   104  ldr x3, [jssp], #8
0x4cd9d6ec   108  ldr x16, pc+68 (addr 0x000000004cd9d730)    ;; code: BUILTIN
0x4cd9d6f0   112  br x16
0x4cd9d6f4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cd9d6f8   120  d63f03e0       constant
0x4cd9d6fc   124  d503201f       constant
0x4cd9d700   128  21063e59       constant
0x4cd9d704   132  00000000       constant
0x4cd9d708   136  210c22b1       constant
0x4cd9d70c   140  00000000       constant
0x4cd9d710   144  210ee969       constant
0x4cd9d714   148  00000000       constant
0x4cd9d718   152  210b9649       constant
0x4cd9d71c   156  00000000       constant
0x4cd9d720   160  4cd9d3c0       constant
0x4cd9d724   164  00000000       constant
0x4cd9d728   168  210b9649       constant
0x4cd9d72c   172  00000000       constant
0x4cd9d730   176  4cd22420       constant
0x4cd9d734   180  00000000       constant


RelocInfo (size = 13)
0x4cd9d690  embedded object  (0x21063e59 Cell for 0)
0x4cd9d6a8  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd9d6b8  embedded object  (0x210ee969 WeakCell for 0x2a825f11 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cd9d6d4  embedded object  (0x210b9649 <String[16]: internal/process>)
0x4cd9d6d8  code target (HANDLER)  (0x4cd9d3c0)
0x4cd9d6e0  embedded object  (0x210b9649 <String[16]: internal/process>)
0x4cd9d6ec  code target (BUILTIN)  (0x4cd22420)
0x4cd9d6f4  constant pool (size 68)

kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*GENERIC -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 624)
0x4cd9faa0     0  orr x16, x1, x0
0x4cd9faa4     4  tbnz w16, #0, #+0x10 (addr 0x4cd9fab4)
0x4cd9faa8     8  asr x1, x1, #32
0x4cd9faac    12  sub x0, x1, x0, asr #32
0x4cd9fab0    16  ret
0x4cd9fab4    20  cmp x0, x1
0x4cd9fab8    24  b.ne #+0x30 (addr 0x4cd9fae8)
0x4cd9fabc    28  ldur x16, [x0, #-1]
0x4cd9fac0    32  ldr x17, [x26, #120]
0x4cd9fac4    36  cmp x16, x17
0x4cd9fac8    40  b.eq #+0xc (addr 0x4cd9fad4)
0x4cd9facc    44  movz x0, #0x0
0x4cd9fad0    48  ret
0x4cd9fad4    52  ldur d0, [x0, #7]
0x4cd9fad8    56  fcmp d0, d0
0x4cd9fadc    60  b.vc #-0x10 (addr 0x4cd9facc)
0x4cd9fae0    64  movn x0, #0x0
0x4cd9fae4    68  ret
0x4cd9fae8    72  and x16, x1, x0
0x4cd9faec    76  tbnz w16, #0, #+0x64 (addr 0x4cd9fb50)
0x4cd9faf0    80  tbz w0, #0, #+0x24 (addr 0x4cd9fb14)
0x4cd9faf4    84  ldur x16, [x0, #-1]
0x4cd9faf8    88  ldr x17, [x26, #120]
0x4cd9fafc    92  cmp x16, x17
0x4cd9fb00    96  b.eq #+0x8 (addr 0x4cd9fb08)
0x4cd9fb04   100  ret
0x4cd9fb08   104  ldur d0, [x0, #7]
0x4cd9fb0c   108  scvtf d1, x1, #32
0x4cd9fb10   112  b #+0x24 (addr 0x4cd9fb34)
0x4cd9fb14   116  ldur x16, [x1, #-1]
0x4cd9fb18   120  ldr x17, [x26, #120]
0x4cd9fb1c   124  cmp x16, x17
0x4cd9fb20   128  b.eq #+0xc (addr 0x4cd9fb2c)
0x4cd9fb24   132  movz x0, #0x1
0x4cd9fb28   136  ret
0x4cd9fb2c   140  ldur d1, [x1, #7]
0x4cd9fb30   144  scvtf d0, x0, #32
0x4cd9fb34   148  fcmp d1, d0
0x4cd9fb38   152  b.vs #+0x10 (addr 0x4cd9fb48)
0x4cd9fb3c   156  cset x0, gt
0x4cd9fb40   160  csinv x0, x0, xzr, ge
0x4cd9fb44   164  ret
0x4cd9fb48   168  movn x0, #0x0
0x4cd9fb4c   172  ret
0x4cd9fb50   176  ldur x10, [x0, #-1]
0x4cd9fb54   180  ldur x12, [x1, #-1]
0x4cd9fb58   184  ldrb w11, [x10, #11]
0x4cd9fb5c   188  ldrb w13, [x12, #11]
0x4cd9fb60   192  cmp x11, #0xb1 (177)
0x4cd9fb64   196  b.lt #+0x8 (addr 0x4cd9fb6c)
0x4cd9fb68   200  ret
0x4cd9fb6c   204  cmp x11, #0x83 (131)
0x4cd9fb70   208  movz x16, #0x83
0x4cd9fb74   212  ccmp x13, x16, #nZcv, ne
0x4cd9fb78   216  movz x16, #0xb1
0x4cd9fb7c   220  ccmp x13, x16, #NzcV, ne
0x4cd9fb80   224  b.ge #-0x18 (addr 0x4cd9fb68)
0x4cd9fb84   228  orr x14, x13, x11
0x4cd9fb88   232  tst x14, #0xc0
0x4cd9fb8c   236  b.eq #-0x24 (addr 0x4cd9fb68)
0x4cd9fb90   240  cmp x11, #0x81 (129)
0x4cd9fb94   244  b.ne #+0x18 (addr 0x4cd9fbac)
0x4cd9fb98   248  cmp x12, x10
0x4cd9fb9c   252  b.ne #+0x10 (addr 0x4cd9fbac)
0x4cd9fba0   256  ldur d1, [x1, #7]
0x4cd9fba4   260  ldur d0, [x0, #7]
0x4cd9fba8   264  b #-0x74 (addr 0x4cd9fb34)
0x4cd9fbac   268  movz x16, #0x87
0x4cd9fbb0   272  and x14, x13, x16
0x4cd9fbb4   276  movz x16, #0x87
0x4cd9fbb8   280  and x15, x11, x16
0x4cd9fbbc   284  cmp x14, #0x4 (4)
0x4cd9fbc0   288  ccmp x15, #4, #nzcv, eq
0x4cd9fbc4   292  b.ne #+0x5c (addr 0x4cd9fc20)
0x4cd9fbc8   296  ldur x10, [x1, #15]
0x4cd9fbcc   300  ldur x11, [x0, #15]
0x4cd9fbd0   304  cmp x10, x11
0x4cd9fbd4   308  b.eq #+0xc (addr 0x4cd9fbe0)
0x4cd9fbd8   312  movz x0, #0x100000000
0x4cd9fbdc   316  ret
0x4cd9fbe0   320  cbnz x10, #+0xc (addr 0x4cd9fbec)
0x4cd9fbe4   324  movz x0, #0x0
0x4cd9fbe8   328  ret
0x4cd9fbec   332  asr x10, x10, #32
0x4cd9fbf0   336  add x11, x10, #0x17 (23)
0x4cd9fbf4   340  add x1, x1, x11
0x4cd9fbf8   344  add x0, x0, x11
0x4cd9fbfc   348  neg x10, x10
0x4cd9fc00   352  ldrb w11, [x1, x10]
0x4cd9fc04   356  ldrb w12, [x0, x10]
0x4cd9fc08   360  cmp x11, x12
0x4cd9fc0c   364  b.ne #-0x34 (addr 0x4cd9fbd8)
0x4cd9fc10   368  add x10, x10, #0x1 (1)
0x4cd9fc14   372  cbnz x10, #-0x14 (addr 0x4cd9fc00)
0x4cd9fc18   376  movz x0, #0x0
0x4cd9fc1c   380  ret
0x4cd9fc20   384  movz x16, #0xc00000000
0x4cd9fc24   388  sub csp, jssp, #0x10 (16)
0x4cd9fc28   392  stp fp, lr, [jssp, #-16]!
0x4cd9fc2c   396  sub csp, jssp, #0x10 (16)
0x4cd9fc30   400  str x16, [jssp, #-8]!
0x4cd9fc34   404  ldr x17, pc+172 (addr 0x000000004cd9fce0)    ;; object: 0x4cd9fa41 <Code: COMPARE_IC>
0x4cd9fc38   408  sub csp, jssp, #0x10 (16)
0x4cd9fc3c   412  str x17, [jssp, #-8]!
0x4cd9fc40   416  add fp, jssp, #0x10 (16)
0x4cd9fc44   420  sub csp, jssp, #0x10 (16)
0x4cd9fc48   424  stp x0, x1, [jssp, #-16]!
0x4cd9fc4c   428  movz x0, #0x2
0x4cd9fc50   432  ldr x1, pc+152 (addr 0x000000004cd9fce8)    ;; external reference (Runtime::StrictEqual)
0x4cd9fc54   436  ldr x16, pc+156 (addr 0x000000004cd9fcf0)    ;; code: STUB, CEntryStub, minor: 4
0x4cd9fc58   440  blr x16
0x4cd9fc5c   444  mov jssp, fp
0x4cd9fc60   448  ldp fp, lr, [jssp], #16
0x4cd9fc64   452  ldr x1, [x26, #64]
0x4cd9fc68   456  sub x0, x0, x1
0x4cd9fc6c   460  ret
0x4cd9fc70   464  movz x16, #0xc00000000
0x4cd9fc74   468  sub csp, jssp, #0x10 (16)
0x4cd9fc78   472  stp fp, lr, [jssp, #-16]!
0x4cd9fc7c   476  sub csp, jssp, #0x10 (16)
0x4cd9fc80   480  str x16, [jssp, #-8]!
0x4cd9fc84   484  ldr x17, pc+116 (addr 0x000000004cd9fcf8)    ;; object: 0x4cd9fa41 <Code: COMPARE_IC>
0x4cd9fc88   488  sub csp, jssp, #0x10 (16)
0x4cd9fc8c   492  str x17, [jssp, #-8]!
0x4cd9fc90   496  add fp, jssp, #0x10 (16)
0x4cd9fc94   500  sub csp, jssp, #0x18 (24)
0x4cd9fc98   504  stp lr, x0, [jssp, #-24]!
0x4cd9fc9c   508  str x1, [jssp, #16]
0x4cd9fca0   512  movz x10, #0x2f00000000
0x4cd9fca4   516  sub csp, jssp, #0x18 (24)
0x4cd9fca8   520  stp x10, x0, [jssp, #-24]!
0x4cd9fcac   524  str x1, [jssp, #16]
0x4cd9fcb0   528  movz x0, #0x3
0x4cd9fcb4   532  ldr x1, pc+76 (addr 0x000000004cd9fd00)    ;; external reference (Runtime::CompareIC_Miss)
0x4cd9fcb8   536  ldr x16, pc+80 (addr 0x000000004cd9fd08)    ;; code: STUB, CEntryStub, minor: 4
0x4cd9fcbc   540  blr x16
0x4cd9fcc0   544  add x11, x0, #0x5f (95)
0x4cd9fcc4   548  ldr x1, [jssp, #16]
0x4cd9fcc8   552  ldp lr, x0, [jssp], #24
0x4cd9fccc   556  mov jssp, fp
0x4cd9fcd0   560  ldp fp, lr, [jssp], #16
0x4cd9fcd4   564  br x11
0x4cd9fcd8   568  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cd9fcdc   572  d63f03e0       constant
0x4cd9fce0   576  4cd9fa41       constant
0x4cd9fce4   580  00000000       constant
0x4cd9fce8   584  00e50928       constant
0x4cd9fcec   588  00000000       constant
0x4cd9fcf0   592  4cd06060       constant
0x4cd9fcf4   596  00000000       constant
0x4cd9fcf8   600  4cd9fa41       constant
0x4cd9fcfc   604  00000000       constant
0x4cd9fd00   608  00c8a980       constant
0x4cd9fd04   612  00000000       constant
0x4cd9fd08   616  4cd06060       constant
0x4cd9fd0c   620  00000000       constant


RelocInfo (size = 16)
0x4cd9fc34  embedded object  (0x4cd9fa41 <Code: COMPARE_IC>)
0x4cd9fc50  external reference (Runtime::StrictEqual)  (0xe50928)
0x4cd9fc54  code target (STUB)  (0x4cd06060)
0x4cd9fc84  embedded object  (0x4cd9fa41 <Code: COMPARE_IC>)
0x4cd9fcb4  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cd9fcb8  code target (STUB)  (0x4cd06060)
0x4cd9fcd8  constant pool (size 56)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = NUMBER*SMI -> NUMBER
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 232)
0x4cd9fd80     0  tbnz w0, #0, #+0x58 (addr 0x4cd9fdd8)
0x4cd9fd84     4  scvtf d0, x0, #32
0x4cd9fd88     8  scvtf d1, x1, #32
0x4cd9fd8c    12  tbz w0, #0, #+0x18 (addr 0x4cd9fda4)
0x4cd9fd90    16  ldur x16, [x0, #-1]
0x4cd9fd94    20  ldr x17, [x26, #120]
0x4cd9fd98    24  cmp x16, x17
0x4cd9fd9c    28  b.ne #+0x3c (addr 0x4cd9fdd8)
0x4cd9fda0    32  ldur d0, [x0, #7]
0x4cd9fda4    36  tbz w1, #0, #+0x18 (addr 0x4cd9fdbc)
0x4cd9fda8    40  ldur x16, [x1, #-1]
0x4cd9fdac    44  ldr x17, [x26, #120]
0x4cd9fdb0    48  cmp x16, x17
0x4cd9fdb4    52  b.ne #+0x24 (addr 0x4cd9fdd8)
0x4cd9fdb8    56  ldur d1, [x1, #7]
0x4cd9fdbc    60  fcmp d1, d0
0x4cd9fdc0    64  b.vs #+0x10 (addr 0x4cd9fdd0)
0x4cd9fdc4    68  cset x0, gt
0x4cd9fdc8    72  csinv x0, x0, xzr, ge
0x4cd9fdcc    76  ret
0x4cd9fdd0    80  ldr x16, pc+120 (addr 0x000000004cd9fe48)    ;; code: COMPARE_IC, GENERIC
0x4cd9fdd4    84  br x16
0x4cd9fdd8    88  movz x16, #0xc00000000
0x4cd9fddc    92  sub csp, jssp, #0x10 (16)
0x4cd9fde0    96  stp fp, lr, [jssp, #-16]!
0x4cd9fde4   100  sub csp, jssp, #0x10 (16)
0x4cd9fde8   104  str x16, [jssp, #-8]!
0x4cd9fdec   108  ldr x17, pc+100 (addr 0x000000004cd9fe50)    ;; object: 0x4cd9fd21 <Code: COMPARE_IC>
0x4cd9fdf0   112  sub csp, jssp, #0x10 (16)
0x4cd9fdf4   116  str x17, [jssp, #-8]!
0x4cd9fdf8   120  add fp, jssp, #0x10 (16)
0x4cd9fdfc   124  sub csp, jssp, #0x18 (24)
0x4cd9fe00   128  stp lr, x0, [jssp, #-24]!
0x4cd9fe04   132  str x1, [jssp, #16]
0x4cd9fe08   136  movz x10, #0x2f00000000
0x4cd9fe0c   140  sub csp, jssp, #0x18 (24)
0x4cd9fe10   144  stp x10, x0, [jssp, #-24]!
0x4cd9fe14   148  str x1, [jssp, #16]
0x4cd9fe18   152  movz x0, #0x3
0x4cd9fe1c   156  ldr x1, pc+60 (addr 0x000000004cd9fe58)    ;; external reference (Runtime::CompareIC_Miss)
0x4cd9fe20   160  ldr x16, pc+64 (addr 0x000000004cd9fe60)    ;; code: STUB, CEntryStub, minor: 4
0x4cd9fe24   164  blr x16
0x4cd9fe28   168  add x11, x0, #0x5f (95)
0x4cd9fe2c   172  ldr x1, [jssp, #16]
0x4cd9fe30   176  ldp lr, x0, [jssp], #24
0x4cd9fe34   180  mov jssp, fp
0x4cd9fe38   184  ldp fp, lr, [jssp], #16
0x4cd9fe3c   188  br x11
0x4cd9fe40   192  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cd9fe44   196  d63f03e0       constant
0x4cd9fe48   200  4cd9faa0       constant
0x4cd9fe4c   204  00000000       constant
0x4cd9fe50   208  4cd9fd21       constant
0x4cd9fe54   212  00000000       constant
0x4cd9fe58   216  00c8a980       constant
0x4cd9fe5c   220  00000000       constant
0x4cd9fe60   224  4cd06060       constant
0x4cd9fe64   228  00000000       constant


RelocInfo (size = 13)
0x4cd9fdd0  code target (COMPARE_IC)  (0x4cd9faa0)
0x4cd9fdec  embedded object  (0x4cd9fd21 <Code: COMPARE_IC>)
0x4cd9fe1c  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cd9fe20  code target (STUB)  (0x4cd06060)
0x4cd9fe40  constant pool (size 40)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = ToIntegerStub
compiler = turbofan
Instructions (size = 386)
0x4cda28a0     0  and x1, x0, #0x1
0x4cda28a4     4  cmp x1, #0x0 (0)
0x4cda28a8     8  b.eq #+0x90 (addr 0x4cda2938)
0x4cda28ac    12  ldur x1, [x0, #-1]
0x4cda28b0    16  ldr x2, [x26, #120]
0x4cda28b4    20  cmp x1, x2
0x4cda28b8    24  b.ne #+0x84 (addr 0x4cda293c)
0x4cda28bc    28  ldur d0, [x0, #7]
0x4cda28c0    32  fcmp d0, d0
0x4cda28c4    36  b.ne #+0xb4 (addr 0x4cda2978)
0x4cda28c8    40  frintz d0, d0
0x4cda28cc    44  fcvtzs w0, d0
0x4cda28d0    48  scvtf d1, w0
0x4cda28d4    52  fcmp d0, d1
0x4cda28d8    56  b.ne #+0x24 (addr 0x4cda28fc)
0x4cda28dc    60  fcmp d0, #0.0
0x4cda28e0    64  b.ne #+0x14 (addr 0x4cda28f4)
0x4cda28e4    68  fmov x1, d0
0x4cda28e8    72  lsr x1, x1, #32
0x4cda28ec    76  cmp w1, #0x0 (0)
0x4cda28f0    80  b.lt #+0xc (addr 0x4cda28fc)
0x4cda28f4    84  lsl x0, x0, #32
0x4cda28f8    88  b #+0x40 (addr 0x4cda2938)
0x4cda28fc    92  movz x0, #0xd2c0
0x4cda2900    96  movk x0, #0x166d, lsl #16
0x4cda2904   100  ldr x1, [x0]
0x4cda2908   104  movz x2, #0xd2c8
0x4cda290c   108  movk x2, #0x166d, lsl #16
0x4cda2910   112  ldr x2, [x2]
0x4cda2914   116  sub x2, x2, x1
0x4cda2918   120  cmp x2, #0x10 (16)
0x4cda291c   124  b.lt #+0x64 (addr 0x4cda2980)
0x4cda2920   128  add x2, x1, #0x10 (16)
0x4cda2924   132  str x2, [x0]
0x4cda2928   136  add x0, x1, #0x1 (1)
0x4cda292c   140  ldr x1, [x26, #120]
0x4cda2930   144  stur x1, [x0, #-1]
0x4cda2934   148  stur d0, [x0, #7]
0x4cda2938   152  ret
0x4cda293c   156  movz x16, #0xa00000000
0x4cda2940   160  sub csp, jssp, #0x10 (16)
0x4cda2944   164  stp fp, lr, [jssp, #-16]!
0x4cda2948   168  mov fp, jssp
0x4cda294c   172  sub csp, jssp, #0x20 (32)
0x4cda2950   176  sub jssp, jssp, #0x20 (32)
0x4cda2954   180  stur x16, [fp, #-8]
0x4cda2958   184  mov x1, cp
0x4cda295c   188  str cp, [jssp, #8]
0x4cda2960   192  ldr x16, pc+144 (addr 0x000000004cda29f0)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0x4cda2964   196  blr x16
0x4cda2968   200  ldr cp, [jssp, #8]
0x4cda296c   204  mov jssp, fp
0x4cda2970   208  ldp fp, lr, [jssp], #16
0x4cda2974   212  b #-0xd4 (addr 0x4cda28a0)
0x4cda2978   216  movz x0, #0x0
0x4cda297c   220  ret
0x4cda2980   224  movz x16, #0xa00000000
0x4cda2984   228  sub csp, jssp, #0x10 (16)
0x4cda2988   232  stp fp, lr, [jssp, #-16]!
0x4cda298c   236  mov fp, jssp
0x4cda2990   240  sub csp, jssp, #0x20 (32)
0x4cda2994   244  sub jssp, jssp, #0x20 (32)
0x4cda2998   248  stur x16, [fp, #-8]
0x4cda299c   252  movz x0, #0x0
0x4cda29a0   256  lsl x0, x0, #32
0x4cda29a4   260  movz x1, #0x10
0x4cda29a8   264  lsl x1, x1, #32
0x4cda29ac   268  sub csp, jssp, #0x10 (16)
0x4cda29b0   272  sub jssp, jssp, #0x10 (16)
0x4cda29b4   276  str x1, [jssp, #8]
0x4cda29b8   280  str x0, [jssp]
0x4cda29bc   284  str d0, [jssp, #32]
0x4cda29c0   288  movz x1, #0x5b88
0x4cda29c4   292  movk x1, #0xe2, lsl #16
0x4cda29c8   296  movz x0, #0x2
0x4cda29cc   300  movz cp, #0x0
0x4cda29d0   304  ldr x16, pc+40 (addr 0x000000004cda29f8)    ;; code: STUB, CEntryStub, minor: 4
0x4cda29d4   308  blr x16
0x4cda29d8   312  ldr d0, [jssp, #16]
0x4cda29dc   316  mov jssp, fp
0x4cda29e0   320  ldp fp, lr, [jssp], #16
0x4cda29e4   324  b #-0xb8 (addr 0x4cda292c)
0x4cda29e8   328  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cda29ec   332  d63f03e0       constant
0x4cda29f0   336  4cd29d80       constant
0x4cda29f4   340  00000000       constant
0x4cda29f8   344  4cd06060       constant
0x4cda29fc   348  00000000       constant


Safepoints (size = 34)
0x4cda2968   200  010000 (sp -> fp)  <none>
0x4cda29d8   312  000000 (sp -> fp)  <none>

RelocInfo (size = 12)
0x4cda2960  code target (STUB)  (0x4cd29d80)
0x4cda29d0  code target (STUB)  (0x4cd06060)
0x4cda29e8  constant pool (size 24)

--- End code ---
kind = STUB
major_key = ToIntegerStub
name = ToIntegerStub
compiler = turbofan
Instructions (size = 386)
0x4cda28a0     0  and x1, x0, #0x1
0x4cda28a4     4  cmp x1, #0x0 (0)
0x4cda28a8     8  b.eq #+0x90 (addr 0x4cda2938)
0x4cda28ac    12  ldur x1, [x0, #-1]
0x4cda28b0    16  ldr x2, [x26, #120]
0x4cda28b4    20  cmp x1, x2
0x4cda28b8    24  b.ne #+0x84 (addr 0x4cda293c)
0x4cda28bc    28  ldur d0, [x0, #7]
0x4cda28c0    32  fcmp d0, d0
0x4cda28c4    36  b.ne #+0xb4 (addr 0x4cda2978)
0x4cda28c8    40  frintz d0, d0
0x4cda28cc    44  fcvtzs w0, d0
0x4cda28d0    48  scvtf d1, w0
0x4cda28d4    52  fcmp d0, d1
0x4cda28d8    56  b.ne #+0x24 (addr 0x4cda28fc)
0x4cda28dc    60  fcmp d0, #0.0
0x4cda28e0    64  b.ne #+0x14 (addr 0x4cda28f4)
0x4cda28e4    68  fmov x1, d0
0x4cda28e8    72  lsr x1, x1, #32
0x4cda28ec    76  cmp w1, #0x0 (0)
0x4cda28f0    80  b.lt #+0xc (addr 0x4cda28fc)
0x4cda28f4    84  lsl x0, x0, #32
0x4cda28f8    88  b #+0x40 (addr 0x4cda2938)
0x4cda28fc    92  movz x0, #0xd2c0
0x4cda2900    96  movk x0, #0x166d, lsl #16
0x4cda2904   100  ldr x1, [x0]
0x4cda2908   104  movz x2, #0xd2c8
0x4cda290c   108  movk x2, #0x166d, lsl #16
0x4cda2910   112  ldr x2, [x2]
0x4cda2914   116  sub x2, x2, x1
0x4cda2918   120  cmp x2, #0x10 (16)
0x4cda291c   124  b.lt #+0x64 (addr 0x4cda2980)
0x4cda2920   128  add x2, x1, #0x10 (16)
0x4cda2924   132  str x2, [x0]
0x4cda2928   136  add x0, x1, #0x1 (1)
0x4cda292c   140  ldr x1, [x26, #120]
0x4cda2930   144  stur x1, [x0, #-1]
0x4cda2934   148  stur d0, [x0, #7]
0x4cda2938   152  ret
0x4cda293c   156  movz x16, #0xa00000000
0x4cda2940   160  sub csp, jssp, #0x10 (16)
0x4cda2944   164  stp fp, lr, [jssp, #-16]!
0x4cda2948   168  mov fp, jssp
0x4cda294c   172  sub csp, jssp, #0x20 (32)
0x4cda2950   176  sub jssp, jssp, #0x20 (32)
0x4cda2954   180  stur x16, [fp, #-8]
0x4cda2958   184  mov x1, cp
0x4cda295c   188  str cp, [jssp, #8]
0x4cda2960   192  ldr x16, pc+144 (addr 0x000000004cda29f0)    ;; code: STUB, NonNumberToNumberStub, minor: 0
0x4cda2964   196  blr x16
0x4cda2968   200  ldr cp, [jssp, #8]
0x4cda296c   204  mov jssp, fp
0x4cda2970   208  ldp fp, lr, [jssp], #16
0x4cda2974   212  b #-0xd4 (addr 0x4cda28a0)
0x4cda2978   216  movz x0, #0x0
0x4cda297c   220  ret
0x4cda2980   224  movz x16, #0xa00000000
0x4cda2984   228  sub csp, jssp, #0x10 (16)
0x4cda2988   232  stp fp, lr, [jssp, #-16]!
0x4cda298c   236  mov fp, jssp
0x4cda2990   240  sub csp, jssp, #0x20 (32)
0x4cda2994   244  sub jssp, jssp, #0x20 (32)
0x4cda2998   248  stur x16, [fp, #-8]
0x4cda299c   252  movz x0, #0x0
0x4cda29a0   256  lsl x0, x0, #32
0x4cda29a4   260  movz x1, #0x10
0x4cda29a8   264  lsl x1, x1, #32
0x4cda29ac   268  sub csp, jssp, #0x10 (16)
0x4cda29b0   272  sub jssp, jssp, #0x10 (16)
0x4cda29b4   276  str x1, [jssp, #8]
0x4cda29b8   280  str x0, [jssp]
0x4cda29bc   284  str d0, [jssp, #32]
0x4cda29c0   288  movz x1, #0x5b88
0x4cda29c4   292  movk x1, #0xe2, lsl #16
0x4cda29c8   296  movz x0, #0x2
0x4cda29cc   300  movz cp, #0x0
0x4cda29d0   304  ldr x16, pc+40 (addr 0x000000004cda29f8)    ;; code: STUB, CEntryStub, minor: 4
0x4cda29d4   308  blr x16
0x4cda29d8   312  ldr d0, [jssp, #16]
0x4cda29dc   316  mov jssp, fp
0x4cda29e0   320  ldp fp, lr, [jssp], #16
0x4cda29e4   324  b #-0xb8 (addr 0x4cda292c)
0x4cda29e8   328  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cda29ec   332  d63f03e0       constant
0x4cda29f0   336  4cd29d80       constant
0x4cda29f4   340  00000000       constant
0x4cda29f8   344  4cd06060       constant
0x4cda29fc   348  00000000       constant


Safepoints (size = 34)
0x4cda2968   200  010000 (sp -> fp)  <none>
0x4cda29d8   312  000000 (sp -> fp)  <none>

RelocInfo (size = 12)
0x4cda2960  code target (STUB)  (0x4cd29d80)
0x4cda29d0  code target (STUB)  (0x4cd06060)
0x4cda29e8  constant pool (size 24)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = RECEIVER*RECEIVER -> KNOWN_RECEIVER
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 192)
0x4cda3fe0     0  and x16, x0, x1
0x4cda3fe4     4  tbz w16, #0, #+0x2c (addr 0x4cda4010)
0x4cda3fe8     8  ldr x12, pc+152 (addr 0x000000004cda4080)    ;; object: 0x210f2f21 WeakCell for 0x2a806671 <Map(FAST_HOLEY_ELEMENTS)>
0x4cda3fec    12  ldur x12, [x12, #7]
0x4cda3ff0    16  ldur x10, [x0, #-1]
0x4cda3ff4    20  ldur x11, [x1, #-1]
0x4cda3ff8    24  cmp x10, x12
0x4cda3ffc    28  b.ne #+0x14 (addr 0x4cda4010)
0x4cda4000    32  cmp x11, x12
0x4cda4004    36  b.ne #+0xc (addr 0x4cda4010)
0x4cda4008    40  sub x0, x0, x1
0x4cda400c    44  ret
0x4cda4010    48  movz x16, #0xc00000000
0x4cda4014    52  sub csp, jssp, #0x10 (16)
0x4cda4018    56  stp fp, lr, [jssp, #-16]!
0x4cda401c    60  sub csp, jssp, #0x10 (16)
0x4cda4020    64  str x16, [jssp, #-8]!
0x4cda4024    68  ldr x17, pc+100 (addr 0x000000004cda4088)    ;; object: 0x4cda3f81 <Code: COMPARE_IC>
0x4cda4028    72  sub csp, jssp, #0x10 (16)
0x4cda402c    76  str x17, [jssp, #-8]!
0x4cda4030    80  add fp, jssp, #0x10 (16)
0x4cda4034    84  sub csp, jssp, #0x18 (24)
0x4cda4038    88  stp lr, x0, [jssp, #-24]!
0x4cda403c    92  str x1, [jssp, #16]
0x4cda4040    96  movz x10, #0x2f00000000
0x4cda4044   100  sub csp, jssp, #0x18 (24)
0x4cda4048   104  stp x10, x0, [jssp, #-24]!
0x4cda404c   108  str x1, [jssp, #16]
0x4cda4050   112  movz x0, #0x3
0x4cda4054   116  ldr x1, pc+60 (addr 0x000000004cda4090)    ;; external reference (Runtime::CompareIC_Miss)
0x4cda4058   120  ldr x16, pc+64 (addr 0x000000004cda4098)    ;; code: STUB, CEntryStub, minor: 4
0x4cda405c   124  blr x16
0x4cda4060   128  add x11, x0, #0x5f (95)
0x4cda4064   132  ldr x1, [jssp, #16]
0x4cda4068   136  ldp lr, x0, [jssp], #24
0x4cda406c   140  mov jssp, fp
0x4cda4070   144  ldp fp, lr, [jssp], #16
0x4cda4074   148  br x11
0x4cda4078   152  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cda407c   156  d63f03e0       constant
0x4cda4080   160  210f2f21       constant
0x4cda4084   164  00000000       constant
0x4cda4088   168  4cda3f81       constant
0x4cda408c   172  00000000       constant
0x4cda4090   176  00c8a980       constant
0x4cda4094   180  00000000       constant
0x4cda4098   184  4cd06060       constant
0x4cda409c   188  00000000       constant


RelocInfo (size = 11)
0x4cda3fe8  embedded object  (0x210f2f21 WeakCell for 0x2a806671 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cda4024  embedded object  (0x4cda3f81 <Code: COMPARE_IC>)
0x4cda4054  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cda4058  code target (STUB)  (0x4cd06060)
0x4cda4078  constant pool (size 40)


kind = HANDLER
major_key = <NoCache>Stub
compiler = unknown
Instructions (size = 120)
0x4cda4900     0  sub csp, jssp, #0x8 (8)
0x4cda4904     4  str x3, [jssp, #-8]!
0x4cda4908     8  sub csp, jssp, #0x8 (8)
0x4cda490c    12  str x0, [jssp, #-8]!
0x4cda4910    16  ldr x0, pc+72 (addr 0x000000004cda4958)    ;; object: 0x210ed491 Cell for 0
0x4cda4914    20  ldur x0, [x0, #7]
0x4cda4918    24  cmp x0, #0x0 (0)
0x4cda491c    28  b.ne #+0x14 (addr 0x4cda4930)
0x4cda4920    32  ldr x3, pc+64 (addr 0x000000004cda4960)    ;; object: 0x210f3289 WeakCell for 0x2335ea99 <an Object with map 0x2a8164d1>
0x4cda4924    36  ldur x3, [x3, #7]
0x4cda4928    40  tbz w3, #0, #+0x8 (addr 0x4cda4930)
0x4cda492c    44  b #+0x14 (addr 0x4cda4940)
0x4cda4930    48  ldr x0, [jssp], #8
0x4cda4934    52  ldr x3, [jssp], #8
0x4cda4938    56  ldr x16, pc+48 (addr 0x000000004cda4968)    ;; code: BUILTIN
0x4cda493c    60  br x16
0x4cda4940    64  add jssp, jssp, #0x10 (16)
0x4cda4944    68  mov x1, x3
0x4cda4948    72  ldr x16, pc+40 (addr 0x000000004cda4970)    ;; code: HANDLER, LoadFieldStub, minor: 4
0x4cda494c    76  br x16
0x4cda4950    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cda4954    84  d63f03e0       constant
0x4cda4958    88  210ed491       constant
0x4cda495c    92  00000000       constant
0x4cda4960    96  210f3289       constant
0x4cda4964   100  00000000       constant
0x4cda4968   104  4cd222e0       constant
0x4cda496c   108  00000000       constant
0x4cda4970   112  4cd6c360       constant
0x4cda4974   116  00000000       constant


RelocInfo (size = 10)
0x4cda4910  embedded object  (0x210ed491 Cell for 0)
0x4cda4920  embedded object  (0x210f3289 WeakCell for 0x2335ea99 <an Object with map 0x2a8164d1>)
0x4cda4938  code target (BUILTIN)  (0x4cd222e0)
0x4cda4948  code target (HANDLER)  (0x4cd6c360)
0x4cda4950  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0x4cda49e0     0  ldur x0, [x1, #15]
0x4cda49e4     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0x4cda49e0     0  ldur x0, [x1, #15]
0x4cda49e4     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = global
compiler = unknown
Instructions (size = 216)
0x4cda4a60     0  sub csp, jssp, #0x8 (8)
0x4cda4a64     4  str x3, [jssp, #-8]!
0x4cda4a68     8  sub csp, jssp, #0x8 (8)
0x4cda4a6c    12  str x0, [jssp, #-8]!
0x4cda4a70    16  ldr x0, pc+160 (addr 0x000000004cda4b10)    ;; object: 0x210ed491 Cell for 0
0x4cda4a74    20  ldur x0, [x0, #7]
0x4cda4a78    24  cmp x0, #0x0 (0)
0x4cda4a7c    28  b.ne #+0x14 (addr 0x4cda4a90)
0x4cda4a80    32  ldr x3, pc+152 (addr 0x000000004cda4b18)    ;; object: 0x210f32e9 WeakCell for 0x2335ea99 <an Object with map 0x2a8164d1>
0x4cda4a84    36  ldur x3, [x3, #7]
0x4cda4a88    40  tbz w3, #0, #+0x8 (addr 0x4cda4a90)
0x4cda4a8c    44  b #+0x14 (addr 0x4cda4aa0)
0x4cda4a90    48  ldr x0, [jssp], #8
0x4cda4a94    52  ldr x3, [jssp], #8
0x4cda4a98    56  ldr x16, pc+136 (addr 0x000000004cda4b20)    ;; code: BUILTIN
0x4cda4a9c    60  br x16
0x4cda4aa0    64  add jssp, jssp, #0x10 (16)
0x4cda4aa4    68  movz x16, #0xc00000000
0x4cda4aa8    72  sub csp, jssp, #0x10 (16)
0x4cda4aac    76  stp fp, lr, [jssp, #-16]!
0x4cda4ab0    80  sub csp, jssp, #0x10 (16)
0x4cda4ab4    84  str x16, [jssp, #-8]!
0x4cda4ab8    88  ldr x17, pc+112 (addr 0x000000004cda4b28)    ;; object: 0x4cda4a01 <Code: HANDLER>
0x4cda4abc    92  sub csp, jssp, #0x10 (16)
0x4cda4ac0    96  str x17, [jssp, #-8]!
0x4cda4ac4   100  add fp, jssp, #0x10 (16)
0x4cda4ac8   104  sub csp, jssp, #0x8 (8)
0x4cda4acc   108  str cp, [jssp, #-8]!
0x4cda4ad0   112  sub csp, jssp, #0x8 (8)
0x4cda4ad4   116  str x1, [jssp, #-8]!
0x4cda4ad8   120  ldur x1, [x3, #-1]
0x4cda4adc   124  ldur x1, [x1, #47]
0x4cda4ae0   128  movz x16, #0x11f
0x4cda4ae4   132  ldr x1, [x1, x16]
0x4cda4ae8   136  ldur x1, [x1, #7]
0x4cda4aec   140  movz x0, #0x0
0x4cda4af0   144  ldr x16, pc+64 (addr 0x000000004cda4b30)    ;; code: BUILTIN
0x4cda4af4   148  blr x16
0x4cda4af8   152  ldr cp, [jssp], #8
0x4cda4afc   156  mov jssp, fp
0x4cda4b00   160  ldp fp, lr, [jssp], #16
0x4cda4b04   164  ret
0x4cda4b08   168  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0x4cda4b0c   172  d63f03e0       constant
0x4cda4b10   176  210ed491       constant
0x4cda4b14   180  00000000       constant
0x4cda4b18   184  210f32e9       constant
0x4cda4b1c   188  00000000       constant
0x4cda4b20   192  4cd222e0       constant
0x4cda4b24   196  00000000       constant
0x4cda4b28   200  4cda4a01       constant
0x4cda4b2c   204  00000000       constant
0x4cda4b30   208  4cd1e600       constant
0x4cda4b34   212  00000000       constant


RelocInfo (size = 11)
0x4cda4a70  embedded object  (0x210ed491 Cell for 0)
0x4cda4a80  embedded object  (0x210f32e9 WeakCell for 0x2335ea99 <an Object with map 0x2a8164d1>)
0x4cda4a98  code target (BUILTIN)  (0x4cd222e0)
0x4cda4ab8  embedded object  (0x4cda4a01 <Code: HANDLER>)
0x4cda4af0  code target (BUILTIN)  (0x4cd1e600)
0x4cda4b08  constant pool (size 48)

kind = HANDLER
major_key = <NoCache>Stub
name = unicode
compiler = unknown
Instructions (size = 216)
0x4cda4ba0     0  sub csp, jssp, #0x8 (8)
0x4cda4ba4     4  str x3, [jssp, #-8]!
0x4cda4ba8     8  sub csp, jssp, #0x8 (8)
0x4cda4bac    12  str x0, [jssp, #-8]!
0x4cda4bb0    16  ldr x0, pc+160 (addr 0x000000004cda4c50)    ;; object: 0x210ed491 Cell for 0
0x4cda4bb4    20  ldur x0, [x0, #7]
0x4cda4bb8    24  cmp x0, #0x0 (0)
0x4cda4bbc    28  b.ne #+0x14 (addr 0x4cda4bd0)
0x4cda4bc0    32  ldr x3, pc+152 (addr 0x000000004cda4c58)    ;; object: 0x210f3321 WeakCell for 0x2335ea99 <an Object with map 0x2a8164d1>
0x4cda4bc4    36  ldur x3, [x3, #7]
0x4cda4bc8    40  tbz w3, #0, #+0x8 (addr 0x4cda4bd0)
0x4cda4bcc    44  b #+0x14 (addr 0x4cda4be0)
0x4cda4bd0    48  ldr x0, [jssp], #8
0x4cda4bd4    52  ldr x3, [jssp], #8
0x4cda4bd8    56  ldr x16, pc+136 (addr 0x000000004cda4c60)    ;; code: BUILTIN
0x4cda4bdc    60  br x16
0x4cda4be0    64  add jssp, jssp, #0x10 (16)
0x4cda4be4    68  movz x16, #0xc00000000
0x4cda4be8    72  sub csp, jssp, #0x10 (16)
0x4cda4bec    76  stp fp, lr, [jssp, #-16]!
0x4cda4bf0    80  sub csp, jssp, #0x10 (16)
0x4cda4bf4    84  str x16, [jssp, #-8]!
0x4cda4bf8    88  ldr x17, pc+112 (addr 0x000000004cda4c68)    ;; object: 0x4cda4b41 <Code: HANDLER>
0x4cda4bfc    92  sub csp, jssp, #0x10 (16)
0x4cda4c00    96  str x17, [jssp, #-8]!
0x4cda4c04   100  add fp, jssp, #0x10 (16)
0x4cda4c08   104  sub csp, jssp, #0x8 (8)
0x4cda4c0c   108  str cp, [jssp, #-8]!
0x4cda4c10   112  sub csp, jssp, #0x8 (8)
0x4cda4c14   116  str x1, [jssp, #-8]!
0x4cda4c18   120  ldur x1, [x3, #-1]
0x4cda4c1c   124  ldur x1, [x1, #47]
0x4cda4c20   128  movz x16, #0x197
0x4cda4c24   132  ldr x1, [x1, x16]
0x4cda4c28   136  ldur x1, [x1, #7]
0x4cda4c2c   140  movz x0, #0x0
0x4cda4c30   144  ldr x16, pc+64 (addr 0x000000004cda4c70)    ;; code: BUILTIN
0x4cda4c34   148  blr x16
0x4cda4c38   152  ldr cp, [jssp], #8
0x4cda4c3c   156  mov jssp, fp
0x4cda4c40   160  ldp fp, lr, [jssp], #16
0x4cda4c44   164  ret
0x4cda4c48   168  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0x4cda4c4c   172  d63f03e0       constant
0x4cda4c50   176  210ed491       constant
0x4cda4c54   180  00000000       constant
0x4cda4c58   184  210f3321       constant
0x4cda4c5c   188  00000000       constant
0x4cda4c60   192  4cd222e0       constant
0x4cda4c64   196  00000000       constant
0x4cda4c68   200  4cda4b41       constant
0x4cda4c6c   204  00000000       constant
0x4cda4c70   208  4cd1e600       constant
0x4cda4c74   212  00000000       constant


RelocInfo (size = 11)
0x4cda4bb0  embedded object  (0x210ed491 Cell for 0)
0x4cda4bc0  embedded object  (0x210f3321 WeakCell for 0x2335ea99 <an Object with map 0x2a8164d1>)
0x4cda4bd8  code target (BUILTIN)  (0x4cd222e0)
0x4cda4bf8  embedded object  (0x4cda4b41 <Code: HANDLER>)
0x4cda4c30  code target (BUILTIN)  (0x4cd1e600)
0x4cda4c48  constant pool (size 48)

kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = RECEIVER*INTERNALIZED_STRING -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 624)
0x4cda5900     0  orr x16, x1, x0
0x4cda5904     4  tbnz w16, #0, #+0x10 (addr 0x4cda5914)
0x4cda5908     8  asr x1, x1, #32
0x4cda590c    12  sub x0, x1, x0, asr #32
0x4cda5910    16  ret
0x4cda5914    20  cmp x0, x1
0x4cda5918    24  b.ne #+0x30 (addr 0x4cda5948)
0x4cda591c    28  ldur x16, [x0, #-1]
0x4cda5920    32  ldr x17, [x26, #120]
0x4cda5924    36  cmp x16, x17
0x4cda5928    40  b.eq #+0xc (addr 0x4cda5934)
0x4cda592c    44  movz x0, #0x0
0x4cda5930    48  ret
0x4cda5934    52  ldur d0, [x0, #7]
0x4cda5938    56  fcmp d0, d0
0x4cda593c    60  b.vc #-0x10 (addr 0x4cda592c)
0x4cda5940    64  movn x0, #0x0
0x4cda5944    68  ret
0x4cda5948    72  and x16, x1, x0
0x4cda594c    76  tbnz w16, #0, #+0x64 (addr 0x4cda59b0)
0x4cda5950    80  tbz w0, #0, #+0x24 (addr 0x4cda5974)
0x4cda5954    84  ldur x16, [x0, #-1]
0x4cda5958    88  ldr x17, [x26, #120]
0x4cda595c    92  cmp x16, x17
0x4cda5960    96  b.eq #+0x8 (addr 0x4cda5968)
0x4cda5964   100  ret
0x4cda5968   104  ldur d0, [x0, #7]
0x4cda596c   108  scvtf d1, x1, #32
0x4cda5970   112  b #+0x24 (addr 0x4cda5994)
0x4cda5974   116  ldur x16, [x1, #-1]
0x4cda5978   120  ldr x17, [x26, #120]
0x4cda597c   124  cmp x16, x17
0x4cda5980   128  b.eq #+0xc (addr 0x4cda598c)
0x4cda5984   132  movz x0, #0x1
0x4cda5988   136  ret
0x4cda598c   140  ldur d1, [x1, #7]
0x4cda5990   144  scvtf d0, x0, #32
0x4cda5994   148  fcmp d1, d0
0x4cda5998   152  b.vs #+0x10 (addr 0x4cda59a8)
0x4cda599c   156  cset x0, gt
0x4cda59a0   160  csinv x0, x0, xzr, ge
0x4cda59a4   164  ret
0x4cda59a8   168  movn x0, #0x0
0x4cda59ac   172  ret
0x4cda59b0   176  ldur x10, [x0, #-1]
0x4cda59b4   180  ldur x12, [x1, #-1]
0x4cda59b8   184  ldrb w11, [x10, #11]
0x4cda59bc   188  ldrb w13, [x12, #11]
0x4cda59c0   192  cmp x11, #0xb1 (177)
0x4cda59c4   196  b.lt #+0x8 (addr 0x4cda59cc)
0x4cda59c8   200  ret
0x4cda59cc   204  cmp x11, #0x83 (131)
0x4cda59d0   208  movz x16, #0x83
0x4cda59d4   212  ccmp x13, x16, #nZcv, ne
0x4cda59d8   216  movz x16, #0xb1
0x4cda59dc   220  ccmp x13, x16, #NzcV, ne
0x4cda59e0   224  b.ge #-0x18 (addr 0x4cda59c8)
0x4cda59e4   228  orr x14, x13, x11
0x4cda59e8   232  tst x14, #0xc0
0x4cda59ec   236  b.eq #-0x24 (addr 0x4cda59c8)
0x4cda59f0   240  cmp x11, #0x81 (129)
0x4cda59f4   244  b.ne #+0x18 (addr 0x4cda5a0c)
0x4cda59f8   248  cmp x12, x10
0x4cda59fc   252  b.ne #+0x10 (addr 0x4cda5a0c)
0x4cda5a00   256  ldur d1, [x1, #7]
0x4cda5a04   260  ldur d0, [x0, #7]
0x4cda5a08   264  b #-0x74 (addr 0x4cda5994)
0x4cda5a0c   268  movz x16, #0x87
0x4cda5a10   272  and x14, x13, x16
0x4cda5a14   276  movz x16, #0x87
0x4cda5a18   280  and x15, x11, x16
0x4cda5a1c   284  cmp x14, #0x4 (4)
0x4cda5a20   288  ccmp x15, #4, #nzcv, eq
0x4cda5a24   292  b.ne #+0x5c (addr 0x4cda5a80)
0x4cda5a28   296  ldur x10, [x1, #15]
0x4cda5a2c   300  ldur x11, [x0, #15]
0x4cda5a30   304  cmp x10, x11
0x4cda5a34   308  b.eq #+0xc (addr 0x4cda5a40)
0x4cda5a38   312  movz x0, #0x100000000
0x4cda5a3c   316  ret
0x4cda5a40   320  cbnz x10, #+0xc (addr 0x4cda5a4c)
0x4cda5a44   324  movz x0, #0x0
0x4cda5a48   328  ret
0x4cda5a4c   332  asr x10, x10, #32
0x4cda5a50   336  add x11, x10, #0x17 (23)
0x4cda5a54   340  add x1, x1, x11
0x4cda5a58   344  add x0, x0, x11
0x4cda5a5c   348  neg x10, x10
0x4cda5a60   352  ldrb w11, [x1, x10]
0x4cda5a64   356  ldrb w12, [x0, x10]
0x4cda5a68   360  cmp x11, x12
0x4cda5a6c   364  b.ne #-0x34 (addr 0x4cda5a38)
0x4cda5a70   368  add x10, x10, #0x1 (1)
0x4cda5a74   372  cbnz x10, #-0x14 (addr 0x4cda5a60)
0x4cda5a78   376  movz x0, #0x0
0x4cda5a7c   380  ret
0x4cda5a80   384  movz x16, #0xc00000000
0x4cda5a84   388  sub csp, jssp, #0x10 (16)
0x4cda5a88   392  stp fp, lr, [jssp, #-16]!
0x4cda5a8c   396  sub csp, jssp, #0x10 (16)
0x4cda5a90   400  str x16, [jssp, #-8]!
0x4cda5a94   404  ldr x17, pc+172 (addr 0x000000004cda5b40)    ;; object: 0x4cda58a1 <Code: COMPARE_IC>
0x4cda5a98   408  sub csp, jssp, #0x10 (16)
0x4cda5a9c   412  str x17, [jssp, #-8]!
0x4cda5aa0   416  add fp, jssp, #0x10 (16)
0x4cda5aa4   420  sub csp, jssp, #0x10 (16)
0x4cda5aa8   424  stp x0, x1, [jssp, #-16]!
0x4cda5aac   428  movz x0, #0x2
0x4cda5ab0   432  ldr x1, pc+152 (addr 0x000000004cda5b48)    ;; external reference (Runtime::StrictEqual)
0x4cda5ab4   436  ldr x16, pc+156 (addr 0x000000004cda5b50)    ;; code: STUB, CEntryStub, minor: 4
0x4cda5ab8   440  blr x16
0x4cda5abc   444  mov jssp, fp
0x4cda5ac0   448  ldp fp, lr, [jssp], #16
0x4cda5ac4   452  ldr x1, [x26, #64]
0x4cda5ac8   456  sub x0, x0, x1
0x4cda5acc   460  ret
0x4cda5ad0   464  movz x16, #0xc00000000
0x4cda5ad4   468  sub csp, jssp, #0x10 (16)
0x4cda5ad8   472  stp fp, lr, [jssp, #-16]!
0x4cda5adc   476  sub csp, jssp, #0x10 (16)
0x4cda5ae0   480  str x16, [jssp, #-8]!
0x4cda5ae4   484  ldr x17, pc+116 (addr 0x000000004cda5b58)    ;; object: 0x4cda58a1 <Code: COMPARE_IC>
0x4cda5ae8   488  sub csp, jssp, #0x10 (16)
0x4cda5aec   492  str x17, [jssp, #-8]!
0x4cda5af0   496  add fp, jssp, #0x10 (16)
0x4cda5af4   500  sub csp, jssp, #0x18 (24)
0x4cda5af8   504  stp lr, x0, [jssp, #-24]!
0x4cda5afc   508  str x1, [jssp, #16]
0x4cda5b00   512  movz x10, #0x2f00000000
0x4cda5b04   516  sub csp, jssp, #0x18 (24)
0x4cda5b08   520  stp x10, x0, [jssp, #-24]!
0x4cda5b0c   524  str x1, [jssp, #16]
0x4cda5b10   528  movz x0, #0x3
0x4cda5b14   532  ldr x1, pc+76 (addr 0x000000004cda5b60)    ;; external reference (Runtime::CompareIC_Miss)
0x4cda5b18   536  ldr x16, pc+80 (addr 0x000000004cda5b68)    ;; code: STUB, CEntryStub, minor: 4
0x4cda5b1c   540  blr x16
0x4cda5b20   544  add x11, x0, #0x5f (95)
0x4cda5b24   548  ldr x1, [jssp, #16]
0x4cda5b28   552  ldp lr, x0, [jssp], #24
0x4cda5b2c   556  mov jssp, fp
0x4cda5b30   560  ldp fp, lr, [jssp], #16
0x4cda5b34   564  br x11
0x4cda5b38   568  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cda5b3c   572  d63f03e0       constant
0x4cda5b40   576  4cda58a1       constant
0x4cda5b44   580  00000000       constant
0x4cda5b48   584  00e50928       constant
0x4cda5b4c   588  00000000       constant
0x4cda5b50   592  4cd06060       constant
0x4cda5b54   596  00000000       constant
0x4cda5b58   600  4cda58a1       constant
0x4cda5b5c   604  00000000       constant
0x4cda5b60   608  00c8a980       constant
0x4cda5b64   612  00000000       constant
0x4cda5b68   616  4cd06060       constant
0x4cda5b6c   620  00000000       constant


RelocInfo (size = 16)
0x4cda5a94  embedded object  (0x4cda58a1 <Code: COMPARE_IC>)
0x4cda5ab0  external reference (Runtime::StrictEqual)  (0xe50928)
0x4cda5ab4  code target (STUB)  (0x4cd06060)
0x4cda5ae4  embedded object  (0x4cda58a1 <Code: COMPARE_IC>)
0x4cda5b14  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cda5b18  code target (STUB)  (0x4cd06060)
0x4cda5b38  constant pool (size 56)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda5de0     0  ldur x0, [x1, #7]
0x4cda5de4     4  ldur x0, [x0, #71]
0x4cda5de8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda5de0     0  ldur x0, [x1, #7]
0x4cda5de4     4  ldur x0, [x0, #71]
0x4cda5de8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda5e60     0  ldur x0, [x1, #7]
0x4cda5e64     4  ldur x0, [x0, #79]
0x4cda5e68     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda5e60     0  ldur x0, [x1, #7]
0x4cda5e64     4  ldur x0, [x0, #79]
0x4cda5e68     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda5ee0     0  ldur x0, [x1, #7]
0x4cda5ee4     4  ldur x0, [x0, #87]
0x4cda5ee8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda5ee0     0  ldur x0, [x1, #7]
0x4cda5ee4     4  ldur x0, [x0, #87]
0x4cda5ee8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda5f60     0  ldur x0, [x1, #7]
0x4cda5f64     4  ldur x0, [x0, #95]
0x4cda5f68     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda5f60     0  ldur x0, [x1, #7]
0x4cda5f64     4  ldur x0, [x0, #95]
0x4cda5f68     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda5fe0     0  ldur x0, [x1, #7]
0x4cda5fe4     4  ldur x0, [x0, #103]
0x4cda5fe8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda5fe0     0  ldur x0, [x1, #7]
0x4cda5fe4     4  ldur x0, [x0, #103]
0x4cda5fe8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda6060     0  ldur x0, [x1, #7]
0x4cda6064     4  ldur x0, [x0, #111]
0x4cda6068     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda6060     0  ldur x0, [x1, #7]
0x4cda6064     4  ldur x0, [x0, #111]
0x4cda6068     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda60e0     0  ldur x0, [x1, #7]
0x4cda60e4     4  ldur x0, [x0, #159]
0x4cda60e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda60e0     0  ldur x0, [x1, #7]
0x4cda60e4     4  ldur x0, [x0, #159]
0x4cda60e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda6160     0  ldur x0, [x1, #7]
0x4cda6164     4  ldur x0, [x0, #175]
0x4cda6168     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda6160     0  ldur x0, [x1, #7]
0x4cda6164     4  ldur x0, [x0, #175]
0x4cda6168     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda61e0     0  ldur x0, [x1, #7]
0x4cda61e4     4  ldur x0, [x0, #183]
0x4cda61e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda61e0     0  ldur x0, [x1, #7]
0x4cda61e4     4  ldur x0, [x0, #183]
0x4cda61e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda6260     0  ldur x0, [x1, #7]
0x4cda6264     4  ldur x0, [x0, #207]
0x4cda6268     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda6260     0  ldur x0, [x1, #7]
0x4cda6264     4  ldur x0, [x0, #207]
0x4cda6268     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda62e0     0  ldur x0, [x1, #7]
0x4cda62e4     4  ldur x0, [x0, #215]
0x4cda62e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda62e0     0  ldur x0, [x1, #7]
0x4cda62e4     4  ldur x0, [x0, #215]
0x4cda62e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda6360     0  ldur x0, [x1, #7]
0x4cda6364     4  ldur x0, [x0, #223]
0x4cda6368     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda6360     0  ldur x0, [x1, #7]
0x4cda6364     4  ldur x0, [x0, #223]
0x4cda6368     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda63e0     0  ldur x0, [x1, #7]
0x4cda63e4     4  ldur x0, [x0, #231]
0x4cda63e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda63e0     0  ldur x0, [x1, #7]
0x4cda63e4     4  ldur x0, [x0, #231]
0x4cda63e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda6460     0  ldur x0, [x1, #7]
0x4cda6464     4  ldur x0, [x0, #239]
0x4cda6468     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda6460     0  ldur x0, [x1, #7]
0x4cda6464     4  ldur x0, [x0, #239]
0x4cda6468     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda64e0     0  ldur x0, [x1, #7]
0x4cda64e4     4  ldur x0, [x0, #247]
0x4cda64e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda64e0     0  ldur x0, [x1, #7]
0x4cda64e4     4  ldur x0, [x0, #247]
0x4cda64e8     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda6560     0  ldur x0, [x1, #7]
0x4cda6564     4  ldur x0, [x0, #255]
0x4cda6568     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 20)
0x4cda6560     0  ldur x0, [x1, #7]
0x4cda6564     4  ldur x0, [x0, #255]
0x4cda6568     8  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cda65e0     0  ldur x0, [x1, #7]
0x4cda65e4     4  movz x16, #0x107
0x4cda65e8     8  ldr x0, [x0, x16]
0x4cda65ec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cda65e0     0  ldur x0, [x1, #7]
0x4cda65e4     4  movz x16, #0x107
0x4cda65e8     8  ldr x0, [x0, x16]
0x4cda65ec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cda6660     0  ldur x0, [x1, #7]
0x4cda6664     4  movz x16, #0x117
0x4cda6668     8  ldr x0, [x0, x16]
0x4cda666c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cda6660     0  ldur x0, [x1, #7]
0x4cda6664     4  movz x16, #0x117
0x4cda6668     8  ldr x0, [x0, x16]
0x4cda666c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cda66e0     0  ldur x0, [x1, #7]
0x4cda66e4     4  movz x16, #0x14f
0x4cda66e8     8  ldr x0, [x0, x16]
0x4cda66ec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cda66e0     0  ldur x0, [x1, #7]
0x4cda66e4     4  movz x16, #0x14f
0x4cda66e8     8  ldr x0, [x0, x16]
0x4cda66ec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cda6760     0  ldur x0, [x1, #7]
0x4cda6764     4  movz x16, #0x15f
0x4cda6768     8  ldr x0, [x0, x16]
0x4cda676c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cda6760     0  ldur x0, [x1, #7]
0x4cda6764     4  movz x16, #0x15f
0x4cda6768     8  ldr x0, [x0, x16]
0x4cda676c    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cda67e0     0  ldur x0, [x1, #7]
0x4cda67e4     4  movz x16, #0x177
0x4cda67e8     8  ldr x0, [x0, x16]
0x4cda67ec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 24)
0x4cda67e0     0  ldur x0, [x1, #7]
0x4cda67e4     4  movz x16, #0x177
0x4cda67e8     8  ldr x0, [x0, x16]
0x4cda67ec    12  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = Intl
compiler = unknown
Instructions (size = 120)
0x4cda6860     0  sub csp, jssp, #0x8 (8)
0x4cda6864     4  str x3, [jssp, #-8]!
0x4cda6868     8  sub csp, jssp, #0x8 (8)
0x4cda686c    12  str x0, [jssp, #-8]!
0x4cda6870    16  ldr x0, pc+80 (addr 0x000000004cda68c0)    ;; object: 0x210c5d51 Cell for 0
0x4cda6874    20  ldur x0, [x0, #7]
0x4cda6878    24  cmp x0, #0x0 (0)
0x4cda687c    28  b.ne #+0x2c (addr 0x4cda68a8)
0x4cda6880    32  ldr x0, pc+72 (addr 0x000000004cda68c8)    ;; object: 0x210f4e89 WeakCell for 0x210a8f41 PropertyCell for 0x48d43859 <an Object with map 0x2a815031>
0x4cda6884    36  ldur x0, [x0, #7]
0x4cda6888    40  tbz w0, #0, #+0x20 (addr 0x4cda68a8)
0x4cda688c    44  ldur x0, [x0, #15]
0x4cda6890    48  ldr x16, [x26, #88]
0x4cda6894    52  cmp x0, x16
0x4cda6898    56  b.eq #+0x10 (addr 0x4cda68a8)
0x4cda689c    60  add jssp, jssp, #0x10 (16)
0x4cda68a0    64  ret
0x4cda68a4    68  b #+0x14 (addr 0x4cda68b8)
0x4cda68a8    72  ldr x0, [jssp], #8
0x4cda68ac    76  ldr x3, [jssp], #8
0x4cda68b0    80  ldr x16, pc+32 (addr 0x000000004cda68d0)    ;; code: BUILTIN
0x4cda68b4    84  br x16
0x4cda68b8    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cda68bc    92  d63f03e0       constant
0x4cda68c0    96  210c5d51       constant
0x4cda68c4   100  00000000       constant
0x4cda68c8   104  210f4e89       constant
0x4cda68cc   108  00000000       constant
0x4cda68d0   112  4cd222e0       constant
0x4cda68d4   116  00000000       constant


RelocInfo (size = 9)
0x4cda6870  embedded object  (0x210c5d51 Cell for 0)
0x4cda6880  embedded object  (0x210f4e89 WeakCell for 0x210a8f41 PropertyCell for 0x48d43859 <an Object with map 0x2a815031>)
0x4cda68b0  code target (BUILTIN)  (0x4cd222e0)
0x4cda68b8  constant pool (size 32)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cda6940     0  tbz w0, #0, #+0x98 (addr 0x4cda69d8)
0x4cda6944     4  mov x2, x0
0x4cda6948     8  ldur x4, [x1, #7]
0x4cda694c    12  stur x2, [x4, #47]
0x4cda6950    16  add x3, x4, #0x2f (47)
0x4cda6954    20  and x2, x2, #0xfffffffffff00000
0x4cda6958    24  ldr x2, [x2, #8]
0x4cda695c    28  tbz w2, #1, #+0x24 (addr 0x4cda6980)
0x4cda6960    32  and x2, x4, #0xfffffffffff00000
0x4cda6964    36  ldr x2, [x2, #8]
0x4cda6968    40  tbz w2, #2, #+0x18 (addr 0x4cda6980)
0x4cda696c    44  sub csp, jssp, #0x8 (8)
0x4cda6970    48  str lr, [jssp, #-8]!
0x4cda6974    52  ldr x16, pc+84 (addr 0x000000004cda69c8)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cda6978    56  blr x16
0x4cda697c    60  ldr lr, [jssp], #8
0x4cda6980    64  stur x5, [x1, #-1]
0x4cda6984    68  tbz w5, #0, #+0x34 (addr 0x4cda69b8)
0x4cda6988    72  sub x2, x1, #0x1 (1)
0x4cda698c    76  and x5, x5, #0xfffffffffff00000
0x4cda6990    80  ldr x5, [x5, #8]
0x4cda6994    84  tbz w5, #1, #+0x24 (addr 0x4cda69b8)
0x4cda6998    88  and x5, x1, #0xfffffffffff00000
0x4cda699c    92  ldr x5, [x5, #8]
0x4cda69a0    96  tbz w5, #2, #+0x18 (addr 0x4cda69b8)
0x4cda69a4   100  sub csp, jssp, #0x8 (8)
0x4cda69a8   104  str lr, [jssp, #-8]!
0x4cda69ac   108  ldr x16, pc+36 (addr 0x000000004cda69d0)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cda69b0   112  blr x16
0x4cda69b4   116  ldr lr, [jssp], #8
0x4cda69b8   120  ret
0x4cda69bc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cda69c0   128  d63f03e0       constant
0x4cda69c4   132  d503201f       constant
0x4cda69c8   136  4cd378a0       constant
0x4cda69cc   140  00000000       constant
0x4cda69d0   144  4cd38080       constant
0x4cda69d4   148  00000000       constant
0x4cda69d8   152  movz x16, #0x0
0x4cda69dc   156  sub csp, jssp, #0x10 (16)
0x4cda69e0   160  stp fp, lr, [jssp, #-16]!
0x4cda69e4   164  bl #+0x4 (addr 0x4cda69e8)
0x4cda69e8   168  movz x17, #0xa00000000
0x4cda69ec   172  sub csp, jssp, #0x10 (16)
0x4cda69f0   176  stp x17, cp, [jssp, #-16]!
0x4cda69f4   180  add fp, jssp, #0x10 (16)
0x4cda69f8   184  ldr x17, pc+24 (addr 0x000000004cda6a10)    ;; lazy deoptimization bailout 0
0x4cda69fc   188  add x17, x17, x16
0x4cda6a00   192  br x17
0x4cda6a04   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cda6a08   200  d63f03e0       constant
0x4cda6a0c   204  d503201f       constant
0x4cda6a10   208  4cb06000       constant
0x4cda6a14   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cda6974  code target (STUB)  (0x4cd378a0)
0x4cda69ac  code target (STUB)  (0x4cd38080)
0x4cda69bc  constant pool (size 28)
0x4cda69f8  runtime entry
0x4cda6a04  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cda6940     0  tbz w0, #0, #+0x98 (addr 0x4cda69d8)
0x4cda6944     4  mov x2, x0
0x4cda6948     8  ldur x4, [x1, #7]
0x4cda694c    12  stur x2, [x4, #47]
0x4cda6950    16  add x3, x4, #0x2f (47)
0x4cda6954    20  and x2, x2, #0xfffffffffff00000
0x4cda6958    24  ldr x2, [x2, #8]
0x4cda695c    28  tbz w2, #1, #+0x24 (addr 0x4cda6980)
0x4cda6960    32  and x2, x4, #0xfffffffffff00000
0x4cda6964    36  ldr x2, [x2, #8]
0x4cda6968    40  tbz w2, #2, #+0x18 (addr 0x4cda6980)
0x4cda696c    44  sub csp, jssp, #0x8 (8)
0x4cda6970    48  str lr, [jssp, #-8]!
0x4cda6974    52  ldr x16, pc+84 (addr 0x000000004cda69c8)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cda6978    56  blr x16
0x4cda697c    60  ldr lr, [jssp], #8
0x4cda6980    64  stur x5, [x1, #-1]
0x4cda6984    68  tbz w5, #0, #+0x34 (addr 0x4cda69b8)
0x4cda6988    72  sub x2, x1, #0x1 (1)
0x4cda698c    76  and x5, x5, #0xfffffffffff00000
0x4cda6990    80  ldr x5, [x5, #8]
0x4cda6994    84  tbz w5, #1, #+0x24 (addr 0x4cda69b8)
0x4cda6998    88  and x5, x1, #0xfffffffffff00000
0x4cda699c    92  ldr x5, [x5, #8]
0x4cda69a0    96  tbz w5, #2, #+0x18 (addr 0x4cda69b8)
0x4cda69a4   100  sub csp, jssp, #0x8 (8)
0x4cda69a8   104  str lr, [jssp, #-8]!
0x4cda69ac   108  ldr x16, pc+36 (addr 0x000000004cda69d0)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cda69b0   112  blr x16
0x4cda69b4   116  ldr lr, [jssp], #8
0x4cda69b8   120  ret
0x4cda69bc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cda69c0   128  d63f03e0       constant
0x4cda69c4   132  d503201f       constant
0x4cda69c8   136  4cd378a0       constant
0x4cda69cc   140  00000000       constant
0x4cda69d0   144  4cd38080       constant
0x4cda69d4   148  00000000       constant
0x4cda69d8   152  movz x16, #0x0
0x4cda69dc   156  sub csp, jssp, #0x10 (16)
0x4cda69e0   160  stp fp, lr, [jssp, #-16]!
0x4cda69e4   164  bl #+0x4 (addr 0x4cda69e8)
0x4cda69e8   168  movz x17, #0xa00000000
0x4cda69ec   172  sub csp, jssp, #0x10 (16)
0x4cda69f0   176  stp x17, cp, [jssp, #-16]!
0x4cda69f4   180  add fp, jssp, #0x10 (16)
0x4cda69f8   184  ldr x17, pc+24 (addr 0x000000004cda6a10)    ;; lazy deoptimization bailout 0
0x4cda69fc   188  add x17, x17, x16
0x4cda6a00   192  br x17
0x4cda6a04   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cda6a08   200  d63f03e0       constant
0x4cda6a0c   204  d503201f       constant
0x4cda6a10   208  4cb06000       constant
0x4cda6a14   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cda6974  code target (STUB)  (0x4cd378a0)
0x4cda69ac  code target (STUB)  (0x4cd38080)
0x4cda69bc  constant pool (size 28)
0x4cda69f8  runtime entry
0x4cda6a04  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = internal/process/warning
compiler = unknown
Instructions (size = 184)
0x4cda6a80     0  sub csp, jssp, #0x8 (8)
0x4cda6a84     4  str x3, [jssp, #-8]!
0x4cda6a88     8  sub csp, jssp, #0x8 (8)
0x4cda6a8c    12  str x4, [jssp, #-8]!
0x4cda6a90    16  ldr x3, pc+112 (addr 0x000000004cda6b00)    ;; object: 0x21063e59 Cell for 0
0x4cda6a94    20  ldur x3, [x3, #7]
0x4cda6a98    24  cmp x3, #0x0 (0)
0x4cda6a9c    28  b.ne #+0x44 (addr 0x4cda6ae0)
0x4cda6aa0    32  tbz w0, #0, #+0x40 (addr 0x4cda6ae0)
0x4cda6aa4    36  ldur x3, [x0, #-1]
0x4cda6aa8    40  ldr x4, pc+96 (addr 0x000000004cda6b08)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cda6aac    44  ldur x4, [x4, #7]
0x4cda6ab0    48  cmp x3, x4
0x4cda6ab4    52  b.ne #+0x2c (addr 0x4cda6ae0)
0x4cda6ab8    56  ldr x5, pc+88 (addr 0x000000004cda6b10)    ;; object: 0x210f4fd1 WeakCell for 0x2a827a91 <Map(FAST_HOLEY_ELEMENTS)>
0x4cda6abc    60  ldur x5, [x5, #7]
0x4cda6ac0    64  tbz w5, #0, #+0x20 (addr 0x4cda6ae0)
0x4cda6ac4    68  ldursw x4, [x5, #15]
0x4cda6ac8    72  tbnz w4, #23, #+0x18 (addr 0x4cda6ae0)
0x4cda6acc    76  ldr x4, [jssp], #8
0x4cda6ad0    80  ldr x3, [jssp], #8
0x4cda6ad4    84  ldr x2, pc+68 (addr 0x000000004cda6b18)    ;; object: 0x210b9731 <String[24]: internal/process/warning>
0x4cda6ad8    88  ldr x16, pc+72 (addr 0x000000004cda6b20)    ;; code: HANDLER, StoreTransitionStub, minor: 196614
0x4cda6adc    92  br x16
0x4cda6ae0    96  ldr x2, pc+72 (addr 0x000000004cda6b28)    ;; object: 0x210b9731 <String[24]: internal/process/warning>
0x4cda6ae4   100  ldr x4, [jssp], #8
0x4cda6ae8   104  ldr x3, [jssp], #8
0x4cda6aec   108  ldr x16, pc+68 (addr 0x000000004cda6b30)    ;; code: BUILTIN
0x4cda6af0   112  br x16
0x4cda6af4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cda6af8   120  d63f03e0       constant
0x4cda6afc   124  d503201f       constant
0x4cda6b00   128  21063e59       constant
0x4cda6b04   132  00000000       constant
0x4cda6b08   136  210c22b1       constant
0x4cda6b0c   140  00000000       constant
0x4cda6b10   144  210f4fd1       constant
0x4cda6b14   148  00000000       constant
0x4cda6b18   152  210b9731       constant
0x4cda6b1c   156  00000000       constant
0x4cda6b20   160  4cda6940       constant
0x4cda6b24   164  00000000       constant
0x4cda6b28   168  210b9731       constant
0x4cda6b2c   172  00000000       constant
0x4cda6b30   176  4cd22420       constant
0x4cda6b34   180  00000000       constant


RelocInfo (size = 13)
0x4cda6a90  embedded object  (0x21063e59 Cell for 0)
0x4cda6aa8  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cda6ab8  embedded object  (0x210f4fd1 WeakCell for 0x2a827a91 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cda6ad4  embedded object  (0x210b9731 <String[24]: internal/process/warning>)
0x4cda6ad8  code target (HANDLER)  (0x4cda6940)
0x4cda6ae0  embedded object  (0x210b9731 <String[24]: internal/process/warning>)
0x4cda6aec  code target (BUILTIN)  (0x4cd22420)
0x4cda6af4  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cda87a0     0  tbz w0, #0, #+0x98 (addr 0x4cda8838)
0x4cda87a4     4  mov x2, x0
0x4cda87a8     8  ldur x4, [x1, #7]
0x4cda87ac    12  stur x2, [x4, #55]
0x4cda87b0    16  add x3, x4, #0x37 (55)
0x4cda87b4    20  and x2, x2, #0xfffffffffff00000
0x4cda87b8    24  ldr x2, [x2, #8]
0x4cda87bc    28  tbz w2, #1, #+0x24 (addr 0x4cda87e0)
0x4cda87c0    32  and x2, x4, #0xfffffffffff00000
0x4cda87c4    36  ldr x2, [x2, #8]
0x4cda87c8    40  tbz w2, #2, #+0x18 (addr 0x4cda87e0)
0x4cda87cc    44  sub csp, jssp, #0x8 (8)
0x4cda87d0    48  str lr, [jssp, #-8]!
0x4cda87d4    52  ldr x16, pc+84 (addr 0x000000004cda8828)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cda87d8    56  blr x16
0x4cda87dc    60  ldr lr, [jssp], #8
0x4cda87e0    64  stur x5, [x1, #-1]
0x4cda87e4    68  tbz w5, #0, #+0x34 (addr 0x4cda8818)
0x4cda87e8    72  sub x2, x1, #0x1 (1)
0x4cda87ec    76  and x5, x5, #0xfffffffffff00000
0x4cda87f0    80  ldr x5, [x5, #8]
0x4cda87f4    84  tbz w5, #1, #+0x24 (addr 0x4cda8818)
0x4cda87f8    88  and x5, x1, #0xfffffffffff00000
0x4cda87fc    92  ldr x5, [x5, #8]
0x4cda8800    96  tbz w5, #2, #+0x18 (addr 0x4cda8818)
0x4cda8804   100  sub csp, jssp, #0x8 (8)
0x4cda8808   104  str lr, [jssp, #-8]!
0x4cda880c   108  ldr x16, pc+36 (addr 0x000000004cda8830)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cda8810   112  blr x16
0x4cda8814   116  ldr lr, [jssp], #8
0x4cda8818   120  ret
0x4cda881c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cda8820   128  d63f03e0       constant
0x4cda8824   132  d503201f       constant
0x4cda8828   136  4cd378a0       constant
0x4cda882c   140  00000000       constant
0x4cda8830   144  4cd38080       constant
0x4cda8834   148  00000000       constant
0x4cda8838   152  movz x16, #0x0
0x4cda883c   156  sub csp, jssp, #0x10 (16)
0x4cda8840   160  stp fp, lr, [jssp, #-16]!
0x4cda8844   164  bl #+0x4 (addr 0x4cda8848)
0x4cda8848   168  movz x17, #0xa00000000
0x4cda884c   172  sub csp, jssp, #0x10 (16)
0x4cda8850   176  stp x17, cp, [jssp, #-16]!
0x4cda8854   180  add fp, jssp, #0x10 (16)
0x4cda8858   184  ldr x17, pc+24 (addr 0x000000004cda8870)    ;; lazy deoptimization bailout 0
0x4cda885c   188  add x17, x17, x16
0x4cda8860   192  br x17
0x4cda8864   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cda8868   200  d63f03e0       constant
0x4cda886c   204  d503201f       constant
0x4cda8870   208  4cb06000       constant
0x4cda8874   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cda87d4  code target (STUB)  (0x4cd378a0)
0x4cda880c  code target (STUB)  (0x4cd38080)
0x4cda881c  constant pool (size 28)
0x4cda8858  runtime entry
0x4cda8864  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cda87a0     0  tbz w0, #0, #+0x98 (addr 0x4cda8838)
0x4cda87a4     4  mov x2, x0
0x4cda87a8     8  ldur x4, [x1, #7]
0x4cda87ac    12  stur x2, [x4, #55]
0x4cda87b0    16  add x3, x4, #0x37 (55)
0x4cda87b4    20  and x2, x2, #0xfffffffffff00000
0x4cda87b8    24  ldr x2, [x2, #8]
0x4cda87bc    28  tbz w2, #1, #+0x24 (addr 0x4cda87e0)
0x4cda87c0    32  and x2, x4, #0xfffffffffff00000
0x4cda87c4    36  ldr x2, [x2, #8]
0x4cda87c8    40  tbz w2, #2, #+0x18 (addr 0x4cda87e0)
0x4cda87cc    44  sub csp, jssp, #0x8 (8)
0x4cda87d0    48  str lr, [jssp, #-8]!
0x4cda87d4    52  ldr x16, pc+84 (addr 0x000000004cda8828)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cda87d8    56  blr x16
0x4cda87dc    60  ldr lr, [jssp], #8
0x4cda87e0    64  stur x5, [x1, #-1]
0x4cda87e4    68  tbz w5, #0, #+0x34 (addr 0x4cda8818)
0x4cda87e8    72  sub x2, x1, #0x1 (1)
0x4cda87ec    76  and x5, x5, #0xfffffffffff00000
0x4cda87f0    80  ldr x5, [x5, #8]
0x4cda87f4    84  tbz w5, #1, #+0x24 (addr 0x4cda8818)
0x4cda87f8    88  and x5, x1, #0xfffffffffff00000
0x4cda87fc    92  ldr x5, [x5, #8]
0x4cda8800    96  tbz w5, #2, #+0x18 (addr 0x4cda8818)
0x4cda8804   100  sub csp, jssp, #0x8 (8)
0x4cda8808   104  str lr, [jssp, #-8]!
0x4cda880c   108  ldr x16, pc+36 (addr 0x000000004cda8830)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cda8810   112  blr x16
0x4cda8814   116  ldr lr, [jssp], #8
0x4cda8818   120  ret
0x4cda881c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cda8820   128  d63f03e0       constant
0x4cda8824   132  d503201f       constant
0x4cda8828   136  4cd378a0       constant
0x4cda882c   140  00000000       constant
0x4cda8830   144  4cd38080       constant
0x4cda8834   148  00000000       constant
0x4cda8838   152  movz x16, #0x0
0x4cda883c   156  sub csp, jssp, #0x10 (16)
0x4cda8840   160  stp fp, lr, [jssp, #-16]!
0x4cda8844   164  bl #+0x4 (addr 0x4cda8848)
0x4cda8848   168  movz x17, #0xa00000000
0x4cda884c   172  sub csp, jssp, #0x10 (16)
0x4cda8850   176  stp x17, cp, [jssp, #-16]!
0x4cda8854   180  add fp, jssp, #0x10 (16)
0x4cda8858   184  ldr x17, pc+24 (addr 0x000000004cda8870)    ;; lazy deoptimization bailout 0
0x4cda885c   188  add x17, x17, x16
0x4cda8860   192  br x17
0x4cda8864   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cda8868   200  d63f03e0       constant
0x4cda886c   204  d503201f       constant
0x4cda8870   208  4cb06000       constant
0x4cda8874   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cda87d4  code target (STUB)  (0x4cd378a0)
0x4cda880c  code target (STUB)  (0x4cd38080)
0x4cda881c  constant pool (size 28)
0x4cda8858  runtime entry
0x4cda8864  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = internal/process/next_tick
compiler = unknown
Instructions (size = 184)
0x4cda88e0     0  sub csp, jssp, #0x8 (8)
0x4cda88e4     4  str x3, [jssp, #-8]!
0x4cda88e8     8  sub csp, jssp, #0x8 (8)
0x4cda88ec    12  str x4, [jssp, #-8]!
0x4cda88f0    16  ldr x3, pc+112 (addr 0x000000004cda8960)    ;; object: 0x21063e59 Cell for 0
0x4cda88f4    20  ldur x3, [x3, #7]
0x4cda88f8    24  cmp x3, #0x0 (0)
0x4cda88fc    28  b.ne #+0x44 (addr 0x4cda8940)
0x4cda8900    32  tbz w0, #0, #+0x40 (addr 0x4cda8940)
0x4cda8904    36  ldur x3, [x0, #-1]
0x4cda8908    40  ldr x4, pc+96 (addr 0x000000004cda8968)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cda890c    44  ldur x4, [x4, #7]
0x4cda8910    48  cmp x3, x4
0x4cda8914    52  b.ne #+0x2c (addr 0x4cda8940)
0x4cda8918    56  ldr x5, pc+88 (addr 0x000000004cda8970)    ;; object: 0x210f6569 WeakCell for 0x2a827b99 <Map(FAST_HOLEY_ELEMENTS)>
0x4cda891c    60  ldur x5, [x5, #7]
0x4cda8920    64  tbz w5, #0, #+0x20 (addr 0x4cda8940)
0x4cda8924    68  ldursw x4, [x5, #15]
0x4cda8928    72  tbnz w4, #23, #+0x18 (addr 0x4cda8940)
0x4cda892c    76  ldr x4, [jssp], #8
0x4cda8930    80  ldr x3, [jssp], #8
0x4cda8934    84  ldr x2, pc+68 (addr 0x000000004cda8978)    ;; object: 0x210b9781 <String[26]: internal/process/next_tick>
0x4cda8938    88  ldr x16, pc+72 (addr 0x000000004cda8980)    ;; code: HANDLER, StoreTransitionStub, minor: 196615
0x4cda893c    92  br x16
0x4cda8940    96  ldr x2, pc+72 (addr 0x000000004cda8988)    ;; object: 0x210b9781 <String[26]: internal/process/next_tick>
0x4cda8944   100  ldr x4, [jssp], #8
0x4cda8948   104  ldr x3, [jssp], #8
0x4cda894c   108  ldr x16, pc+68 (addr 0x000000004cda8990)    ;; code: BUILTIN
0x4cda8950   112  br x16
0x4cda8954   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cda8958   120  d63f03e0       constant
0x4cda895c   124  d503201f       constant
0x4cda8960   128  21063e59       constant
0x4cda8964   132  00000000       constant
0x4cda8968   136  210c22b1       constant
0x4cda896c   140  00000000       constant
0x4cda8970   144  210f6569       constant
0x4cda8974   148  00000000       constant
0x4cda8978   152  210b9781       constant
0x4cda897c   156  00000000       constant
0x4cda8980   160  4cda87a0       constant
0x4cda8984   164  00000000       constant
0x4cda8988   168  210b9781       constant
0x4cda898c   172  00000000       constant
0x4cda8990   176  4cd22420       constant
0x4cda8994   180  00000000       constant


RelocInfo (size = 13)
0x4cda88f0  embedded object  (0x21063e59 Cell for 0)
0x4cda8908  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cda8918  embedded object  (0x210f6569 WeakCell for 0x2a827b99 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cda8934  embedded object  (0x210b9781 <String[26]: internal/process/next_tick>)
0x4cda8938  code target (HANDLER)  (0x4cda87a0)
0x4cda8940  embedded object  (0x210b9781 <String[26]: internal/process/next_tick>)
0x4cda894c  code target (BUILTIN)  (0x4cd22420)
0x4cda8954  constant pool (size 68)

--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 429)
0x4cda8d60     0  movz x2, #0xd2c0
0x4cda8d64     4  movk x2, #0x166d, lsl #16
0x4cda8d68     8  ldp x3, x0, [x2]
0x4cda8d6c    12  adds x16, x3, #0x88 (136)
0x4cda8d70    16  ccmp x16, x0, #nzCv, lo
0x4cda8d74    20  b.hi #+0x94 (addr 0x4cda8e08)
0x4cda8d78    24  str x16, [x2]
0x4cda8d7c    28  orr x3, x3, #0x1
0x4cda8d80    32  ldr x0, pc+248 (addr 0x000000004cda8e78)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cda8d84    36  stur x0, [x3, #-1]
0x4cda8d88    40  movz x0, #0xf00000000
0x4cda8d8c    44  stur x0, [x3, #7]
0x4cda8d90    48  stur x1, [x3, #15]
0x4cda8d94    52  stur cp, [x3, #23]
0x4cda8d98    56  ldr x0, pc+232 (addr 0x000000004cda8e80)    ;; object: 0x21004519 <the hole>
0x4cda8d9c    60  stur x0, [x3, #31]
0x4cda8da0    64  ldur x0, [cp, #39]
0x4cda8da4    68  stur x0, [x3, #39]
0x4cda8da8    72  ldr x0, pc+224 (addr 0x000000004cda8e88)    ;; object: 0x21004241 <undefined>
0x4cda8dac    76  stur x0, [x3, #47]
0x4cda8db0    80  ldr x0, pc+224 (addr 0x000000004cda8e90)    ;; object: 0x21004241 <undefined>
0x4cda8db4    84  stur x0, [x3, #55]
0x4cda8db8    88  ldr x0, pc+224 (addr 0x000000004cda8e98)    ;; object: 0x21004241 <undefined>
0x4cda8dbc    92  stur x0, [x3, #63]
0x4cda8dc0    96  ldr x0, pc+224 (addr 0x000000004cda8ea0)    ;; object: 0x21004241 <undefined>
0x4cda8dc4   100  stur x0, [x3, #71]
0x4cda8dc8   104  ldr x0, pc+224 (addr 0x000000004cda8ea8)    ;; object: 0x21004241 <undefined>
0x4cda8dcc   108  stur x0, [x3, #79]
0x4cda8dd0   112  ldr x0, pc+224 (addr 0x000000004cda8eb0)    ;; object: 0x21004241 <undefined>
0x4cda8dd4   116  stur x0, [x3, #87]
0x4cda8dd8   120  ldr x0, pc+224 (addr 0x000000004cda8eb8)    ;; object: 0x21004241 <undefined>
0x4cda8ddc   124  stur x0, [x3, #95]
0x4cda8de0   128  ldr x0, pc+224 (addr 0x000000004cda8ec0)    ;; object: 0x21004241 <undefined>
0x4cda8de4   132  stur x0, [x3, #103]
0x4cda8de8   136  ldr x0, pc+224 (addr 0x000000004cda8ec8)    ;; object: 0x21004241 <undefined>
0x4cda8dec   140  stur x0, [x3, #111]
0x4cda8df0   144  ldr x0, pc+224 (addr 0x000000004cda8ed0)    ;; object: 0x21004241 <undefined>
0x4cda8df4   148  stur x0, [x3, #119]
0x4cda8df8   152  ldr x0, pc+224 (addr 0x000000004cda8ed8)    ;; object: 0x21004241 <undefined>
0x4cda8dfc   156  stur x0, [x3, #127]
0x4cda8e00   160  mov x0, x3
0x4cda8e04   164  ret
0x4cda8e08   168  sub csp, jssp, #0x10 (16)
0x4cda8e0c   172  stp fp, lr, [jssp, #-16]!
0x4cda8e10   176  movz fp, #0xa00000000
0x4cda8e14   180  sub csp, jssp, #0x8 (8)
0x4cda8e18   184  str fp, [jssp, #-8]!
0x4cda8e1c   188  add fp, jssp, #0x8 (8)
0x4cda8e20   192  movz x3, #0x0
0x4cda8e24   196  mov x16, lr
0x4cda8e28   200  ldr x17, pc+184 (addr 0x000000004cda8ee0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cda8e2c   204  blr x17
0x4cda8e30   208  movz x0, #0x8800000000
0x4cda8e34   212  movz x10, #0x0
0x4cda8e38   216  sub csp, jssp, #0x10 (16)
0x4cda8e3c   220  stp x10, x0, [jssp, #-16]!
0x4cda8e40   224  movz x0, #0x2
0x4cda8e44   228  movz x1, #0x5b88
0x4cda8e48   232  movk x1, #0xe2, lsl #16
0x4cda8e4c   236  ldr x16, pc+156 (addr 0x000000004cda8ee8)    ;; code: STUB, CEntryStub, minor: 5
0x4cda8e50   240  blr x16
0x4cda8e54   244  str x0, [jssp, #24]
0x4cda8e58   248  ldr x16, pc+152 (addr 0x000000004cda8ef0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cda8e5c   252  blr x16
0x4cda8e60   256  ldr lr, [jssp, #16]
0x4cda8e64   260  ldp xzr, fp, [jssp], #24
0x4cda8e68   264  b #-0xe8 (addr 0x4cda8d80)
0x4cda8e6c   268  5800045f       constant pool begin (num_const = 34)    ;; constant pool
0x4cda8e70   272  d63f03e0       constant
0x4cda8e74   276  d503201f       constant
0x4cda8e78   280  2a806149       constant
0x4cda8e7c   284  00000000       constant
0x4cda8e80   288  21004519       constant
0x4cda8e84   292  00000000       constant
0x4cda8e88   296  21004241       constant
0x4cda8e8c   300  00000000       constant
0x4cda8e90   304  21004241       constant
0x4cda8e94   308  00000000       constant
0x4cda8e98   312  21004241       constant
0x4cda8e9c   316  00000000       constant
0x4cda8ea0   320  21004241       constant
0x4cda8ea4   324  00000000       constant
0x4cda8ea8   328  21004241       constant
0x4cda8eac   332  00000000       constant
0x4cda8eb0   336  21004241       constant
0x4cda8eb4   340  00000000       constant
0x4cda8eb8   344  21004241       constant
0x4cda8ebc   348  00000000       constant
0x4cda8ec0   352  21004241       constant
0x4cda8ec4   356  00000000       constant
0x4cda8ec8   360  21004241       constant
0x4cda8ecc   364  00000000       constant
0x4cda8ed0   368  21004241       constant
0x4cda8ed4   372  00000000       constant
0x4cda8ed8   376  21004241       constant
0x4cda8edc   380  00000000       constant
0x4cda8ee0   384  4cd06820       constant
0x4cda8ee4   388  00000000       constant
0x4cda8ee8   392  4cd06260       constant
0x4cda8eec   396  00000000       constant
0x4cda8ef0   400  4cd068e0       constant
0x4cda8ef4   404  00000000       constant


Safepoints (size = 21)
0x4cda8e54   244  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 22)
0x4cda8d80  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cda8d98  embedded object  (0x21004519 <the hole>)
0x4cda8da8  embedded object  (0x21004241 <undefined>)
0x4cda8db0  embedded object  (0x21004241 <undefined>)
0x4cda8db8  embedded object  (0x21004241 <undefined>)
0x4cda8dc0  embedded object  (0x21004241 <undefined>)
0x4cda8dc8  embedded object  (0x21004241 <undefined>)
0x4cda8dd0  embedded object  (0x21004241 <undefined>)
0x4cda8dd8  embedded object  (0x21004241 <undefined>)
0x4cda8de0  embedded object  (0x21004241 <undefined>)
0x4cda8de8  embedded object  (0x21004241 <undefined>)
0x4cda8df0  embedded object  (0x21004241 <undefined>)
0x4cda8df8  embedded object  (0x21004241 <undefined>)
0x4cda8e28  code target (STUB)  (0x4cd06820)
0x4cda8e4c  code target (STUB)  (0x4cd06260)
0x4cda8e58  code target (STUB)  (0x4cd068e0)
0x4cda8e6c  constant pool (size 140)

--- End code ---
kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 429)
0x4cda8d60     0  movz x2, #0xd2c0
0x4cda8d64     4  movk x2, #0x166d, lsl #16
0x4cda8d68     8  ldp x3, x0, [x2]
0x4cda8d6c    12  adds x16, x3, #0x88 (136)
0x4cda8d70    16  ccmp x16, x0, #nzCv, lo
0x4cda8d74    20  b.hi #+0x94 (addr 0x4cda8e08)
0x4cda8d78    24  str x16, [x2]
0x4cda8d7c    28  orr x3, x3, #0x1
0x4cda8d80    32  ldr x0, pc+248 (addr 0x000000004cda8e78)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cda8d84    36  stur x0, [x3, #-1]
0x4cda8d88    40  movz x0, #0xf00000000
0x4cda8d8c    44  stur x0, [x3, #7]
0x4cda8d90    48  stur x1, [x3, #15]
0x4cda8d94    52  stur cp, [x3, #23]
0x4cda8d98    56  ldr x0, pc+232 (addr 0x000000004cda8e80)    ;; object: 0x21004519 <the hole>
0x4cda8d9c    60  stur x0, [x3, #31]
0x4cda8da0    64  ldur x0, [cp, #39]
0x4cda8da4    68  stur x0, [x3, #39]
0x4cda8da8    72  ldr x0, pc+224 (addr 0x000000004cda8e88)    ;; object: 0x21004241 <undefined>
0x4cda8dac    76  stur x0, [x3, #47]
0x4cda8db0    80  ldr x0, pc+224 (addr 0x000000004cda8e90)    ;; object: 0x21004241 <undefined>
0x4cda8db4    84  stur x0, [x3, #55]
0x4cda8db8    88  ldr x0, pc+224 (addr 0x000000004cda8e98)    ;; object: 0x21004241 <undefined>
0x4cda8dbc    92  stur x0, [x3, #63]
0x4cda8dc0    96  ldr x0, pc+224 (addr 0x000000004cda8ea0)    ;; object: 0x21004241 <undefined>
0x4cda8dc4   100  stur x0, [x3, #71]
0x4cda8dc8   104  ldr x0, pc+224 (addr 0x000000004cda8ea8)    ;; object: 0x21004241 <undefined>
0x4cda8dcc   108  stur x0, [x3, #79]
0x4cda8dd0   112  ldr x0, pc+224 (addr 0x000000004cda8eb0)    ;; object: 0x21004241 <undefined>
0x4cda8dd4   116  stur x0, [x3, #87]
0x4cda8dd8   120  ldr x0, pc+224 (addr 0x000000004cda8eb8)    ;; object: 0x21004241 <undefined>
0x4cda8ddc   124  stur x0, [x3, #95]
0x4cda8de0   128  ldr x0, pc+224 (addr 0x000000004cda8ec0)    ;; object: 0x21004241 <undefined>
0x4cda8de4   132  stur x0, [x3, #103]
0x4cda8de8   136  ldr x0, pc+224 (addr 0x000000004cda8ec8)    ;; object: 0x21004241 <undefined>
0x4cda8dec   140  stur x0, [x3, #111]
0x4cda8df0   144  ldr x0, pc+224 (addr 0x000000004cda8ed0)    ;; object: 0x21004241 <undefined>
0x4cda8df4   148  stur x0, [x3, #119]
0x4cda8df8   152  ldr x0, pc+224 (addr 0x000000004cda8ed8)    ;; object: 0x21004241 <undefined>
0x4cda8dfc   156  stur x0, [x3, #127]
0x4cda8e00   160  mov x0, x3
0x4cda8e04   164  ret
0x4cda8e08   168  sub csp, jssp, #0x10 (16)
0x4cda8e0c   172  stp fp, lr, [jssp, #-16]!
0x4cda8e10   176  movz fp, #0xa00000000
0x4cda8e14   180  sub csp, jssp, #0x8 (8)
0x4cda8e18   184  str fp, [jssp, #-8]!
0x4cda8e1c   188  add fp, jssp, #0x8 (8)
0x4cda8e20   192  movz x3, #0x0
0x4cda8e24   196  mov x16, lr
0x4cda8e28   200  ldr x17, pc+184 (addr 0x000000004cda8ee0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cda8e2c   204  blr x17
0x4cda8e30   208  movz x0, #0x8800000000
0x4cda8e34   212  movz x10, #0x0
0x4cda8e38   216  sub csp, jssp, #0x10 (16)
0x4cda8e3c   220  stp x10, x0, [jssp, #-16]!
0x4cda8e40   224  movz x0, #0x2
0x4cda8e44   228  movz x1, #0x5b88
0x4cda8e48   232  movk x1, #0xe2, lsl #16
0x4cda8e4c   236  ldr x16, pc+156 (addr 0x000000004cda8ee8)    ;; code: STUB, CEntryStub, minor: 5
0x4cda8e50   240  blr x16
0x4cda8e54   244  str x0, [jssp, #24]
0x4cda8e58   248  ldr x16, pc+152 (addr 0x000000004cda8ef0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cda8e5c   252  blr x16
0x4cda8e60   256  ldr lr, [jssp, #16]
0x4cda8e64   260  ldp xzr, fp, [jssp], #24
0x4cda8e68   264  b #-0xe8 (addr 0x4cda8d80)
0x4cda8e6c   268  5800045f       constant pool begin (num_const = 34)    ;; constant pool
0x4cda8e70   272  d63f03e0       constant
0x4cda8e74   276  d503201f       constant
0x4cda8e78   280  2a806149       constant
0x4cda8e7c   284  00000000       constant
0x4cda8e80   288  21004519       constant
0x4cda8e84   292  00000000       constant
0x4cda8e88   296  21004241       constant
0x4cda8e8c   300  00000000       constant
0x4cda8e90   304  21004241       constant
0x4cda8e94   308  00000000       constant
0x4cda8e98   312  21004241       constant
0x4cda8e9c   316  00000000       constant
0x4cda8ea0   320  21004241       constant
0x4cda8ea4   324  00000000       constant
0x4cda8ea8   328  21004241       constant
0x4cda8eac   332  00000000       constant
0x4cda8eb0   336  21004241       constant
0x4cda8eb4   340  00000000       constant
0x4cda8eb8   344  21004241       constant
0x4cda8ebc   348  00000000       constant
0x4cda8ec0   352  21004241       constant
0x4cda8ec4   356  00000000       constant
0x4cda8ec8   360  21004241       constant
0x4cda8ecc   364  00000000       constant
0x4cda8ed0   368  21004241       constant
0x4cda8ed4   372  00000000       constant
0x4cda8ed8   376  21004241       constant
0x4cda8edc   380  00000000       constant
0x4cda8ee0   384  4cd06820       constant
0x4cda8ee4   388  00000000       constant
0x4cda8ee8   392  4cd06260       constant
0x4cda8eec   396  00000000       constant
0x4cda8ef0   400  4cd068e0       constant
0x4cda8ef4   404  00000000       constant


Safepoints (size = 21)
0x4cda8e54   244  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 22)
0x4cda8d80  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cda8d98  embedded object  (0x21004519 <the hole>)
0x4cda8da8  embedded object  (0x21004241 <undefined>)
0x4cda8db0  embedded object  (0x21004241 <undefined>)
0x4cda8db8  embedded object  (0x21004241 <undefined>)
0x4cda8dc0  embedded object  (0x21004241 <undefined>)
0x4cda8dc8  embedded object  (0x21004241 <undefined>)
0x4cda8dd0  embedded object  (0x21004241 <undefined>)
0x4cda8dd8  embedded object  (0x21004241 <undefined>)
0x4cda8de0  embedded object  (0x21004241 <undefined>)
0x4cda8de8  embedded object  (0x21004241 <undefined>)
0x4cda8df0  embedded object  (0x21004241 <undefined>)
0x4cda8df8  embedded object  (0x21004241 <undefined>)
0x4cda8e28  code target (STUB)  (0x4cd06820)
0x4cda8e4c  code target (STUB)  (0x4cd06260)
0x4cda8e58  code target (STUB)  (0x4cd068e0)
0x4cda8e6c  constant pool (size 140)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0x4cda9780     0  ldur x6, [x1, #7]
0x4cda9784     4  ldur w7, [x6, #11]
0x4cda9788     8  adds w8, w7, #0x3 (3)
0x4cda978c    12  b.vs #+0x1dc (addr 0x4cda9968)
0x4cda9790    16  movz w16, #0x95ff
0x4cda9794    20  cmp w8, w16, lsl #1
0x4cda9798    24  b.hs #+0x1e0 (addr 0x4cda9978)
0x4cda979c    28  lsl x9, x8, #32
0x4cda97a0    32  lsl w10, w8, #3
0x4cda97a4    36  add w10, w10, #0x10 (16)
0x4cda97a8    40  sxtw x10, w10
0x4cda97ac    44  movz x11, #0xd2c0
0x4cda97b0    48  movk x11, #0x166d, lsl #16
0x4cda97b4    52  ldp x13, x16, [x11]
0x4cda97b8    56  adds x12, x13, x10
0x4cda97bc    60  ccmp x12, x16, #nzCv, lo
0x4cda97c0    64  b.hi #+0xf8 (addr 0x4cda98b8)
0x4cda97c4    68  str x12, [x11]
0x4cda97c8    72  orr x13, x13, #0x1
0x4cda97cc    76  ldr x10, pc+348 (addr 0x000000004cda9928)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cda97d0    80  stur x10, [x13, #-1]
0x4cda97d4    84  stur x9, [x13, #7]
0x4cda97d8    88  cmp w7, w8
0x4cda97dc    92  b.ge #+0x18 (addr 0x4cda97f4)
0x4cda97e0    96  sub w8, w8, #0x1 (1)
0x4cda97e4   100  ldr x9, pc+332 (addr 0x000000004cda9930)    ;; object: 0x21004241 <undefined>
0x4cda97e8   104  add x10, x13, #0xf (15)
0x4cda97ec   108  str x9, [x10, w8, sxtw #3]
0x4cda97f0   112  b #-0x18 (addr 0x4cda97d8)
0x4cda97f4   116  cmp w7, #0x0 (0)
0x4cda97f8   120  b.le #+0x1c (addr 0x4cda9814)
0x4cda97fc   124  sub w7, w7, #0x1 (1)
0x4cda9800   128  add x8, x6, #0xf (15)
0x4cda9804   132  ldr x9, [x8, w7, sxtw #3]
0x4cda9808   136  add x8, x13, #0xf (15)
0x4cda980c   140  str x9, [x8, w7, sxtw #3]
0x4cda9810   144  b #-0x1c (addr 0x4cda97f4)
0x4cda9814   148  stur x13, [x1, #7]
0x4cda9818   152  add x6, x1, #0x7 (7)
0x4cda981c   156  and x13, x1, #0xfffffffffff00000
0x4cda9820   160  ldr x13, [x13, #8]
0x4cda9824   164  tbz w13, #2, #+0x18 (addr 0x4cda983c)
0x4cda9828   168  sub csp, jssp, #0x8 (8)
0x4cda982c   172  str lr, [jssp, #-8]!
0x4cda9830   176  ldr x16, pc+264 (addr 0x000000004cda9938)    ;; code: STUB, RecordWriteStub, minor: 72097
0x4cda9834   180  blr x16
0x4cda9838   184  ldr lr, [jssp], #8
0x4cda983c   188  tbz w0, #0, #+0x14c (addr 0x4cda9988)
0x4cda9840   192  mov x2, x0
0x4cda9844   196  ldur x4, [x1, #7]
0x4cda9848   200  stur x2, [x4, #63]
0x4cda984c   204  add x3, x4, #0x3f (63)
0x4cda9850   208  and x2, x2, #0xfffffffffff00000
0x4cda9854   212  ldr x2, [x2, #8]
0x4cda9858   216  tbz w2, #1, #+0x24 (addr 0x4cda987c)
0x4cda985c   220  and x2, x4, #0xfffffffffff00000
0x4cda9860   224  ldr x2, [x2, #8]
0x4cda9864   228  tbz w2, #2, #+0x18 (addr 0x4cda987c)
0x4cda9868   232  sub csp, jssp, #0x8 (8)
0x4cda986c   236  str lr, [jssp, #-8]!
0x4cda9870   240  ldr x16, pc+208 (addr 0x000000004cda9940)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cda9874   244  blr x16
0x4cda9878   248  ldr lr, [jssp], #8
0x4cda987c   252  stur x5, [x1, #-1]
0x4cda9880   256  tbz w5, #0, #+0x34 (addr 0x4cda98b4)
0x4cda9884   260  sub x2, x1, #0x1 (1)
0x4cda9888   264  and x5, x5, #0xfffffffffff00000
0x4cda988c   268  ldr x5, [x5, #8]
0x4cda9890   272  tbz w5, #1, #+0x24 (addr 0x4cda98b4)
0x4cda9894   276  and x5, x1, #0xfffffffffff00000
0x4cda9898   280  ldr x5, [x5, #8]
0x4cda989c   284  tbz w5, #2, #+0x18 (addr 0x4cda98b4)
0x4cda98a0   288  sub csp, jssp, #0x8 (8)
0x4cda98a4   292  str lr, [jssp, #-8]!
0x4cda98a8   296  ldr x16, pc+160 (addr 0x000000004cda9948)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cda98ac   300  blr x16
0x4cda98b0   304  ldr lr, [jssp], #8
0x4cda98b4   308  ret
0x4cda98b8   312  sub csp, jssp, #0x10 (16)
0x4cda98bc   316  stp fp, lr, [jssp, #-16]!
0x4cda98c0   320  movz fp, #0xa00000000
0x4cda98c4   324  sub csp, jssp, #0x8 (8)
0x4cda98c8   328  str fp, [jssp, #-8]!
0x4cda98cc   332  add fp, jssp, #0x8 (8)
0x4cda98d0   336  movz x13, #0x0
0x4cda98d4   340  mov x16, lr
0x4cda98d8   344  ldr x17, pc+120 (addr 0x000000004cda9950)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cda98dc   348  blr x17
0x4cda98e0   352  lsl x0, x10, #32
0x4cda98e4   356  movz x10, #0x0
0x4cda98e8   360  sub csp, jssp, #0x10 (16)
0x4cda98ec   364  stp x10, x0, [jssp, #-16]!
0x4cda98f0   368  movz x0, #0x2
0x4cda98f4   372  movz x1, #0x5b88
0x4cda98f8   376  movk x1, #0xe2, lsl #16
0x4cda98fc   380  ldr x16, pc+92 (addr 0x000000004cda9958)    ;; code: STUB, CEntryStub, minor: 5
0x4cda9900   384  blr x16
0x4cda9904   388  str x0, [jssp, #104]
0x4cda9908   392  ldr x16, pc+88 (addr 0x000000004cda9960)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cda990c   396  blr x16
0x4cda9910   400  ldr lr, [jssp, #16]
0x4cda9914   404  ldp xzr, fp, [jssp], #24
0x4cda9918   408  b #-0x14c (addr 0x4cda97cc)
0x4cda991c   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0x4cda9920   416  d63f03e0       constant
0x4cda9924   420  d503201f       constant
0x4cda9928   424  2a804259       constant
0x4cda992c   428  00000000       constant
0x4cda9930   432  21004241       constant
0x4cda9934   436  00000000       constant
0x4cda9938   440  4cd370c0       constant
0x4cda993c   444  00000000       constant
0x4cda9940   448  4cd378a0       constant
0x4cda9944   452  00000000       constant
0x4cda9948   456  4cd38080       constant
0x4cda994c   460  00000000       constant
0x4cda9950   464  4cd06820       constant
0x4cda9954   468  00000000       constant
0x4cda9958   472  4cd06260       constant
0x4cda995c   476  00000000       constant
0x4cda9960   480  4cd068e0       constant
0x4cda9964   484  00000000       constant
0x4cda9968   488  movz x16, #0x0
0x4cda996c   492  sub csp, jssp, #0x10 (16)
0x4cda9970   496  stp fp, lr, [jssp, #-16]!
0x4cda9974   500  bl #+0x24 (addr 0x4cda9998)
0x4cda9978   504  movz x16, #0x8
0x4cda997c   508  sub csp, jssp, #0x10 (16)
0x4cda9980   512  stp fp, lr, [jssp, #-16]!
0x4cda9984   516  bl #+0x14 (addr 0x4cda9998)
0x4cda9988   520  movz x16, #0x10
0x4cda998c   524  sub csp, jssp, #0x10 (16)
0x4cda9990   528  stp fp, lr, [jssp, #-16]!
0x4cda9994   532  bl #+0x4 (addr 0x4cda9998)
0x4cda9998   536  movz x17, #0xa00000000
0x4cda999c   540  sub csp, jssp, #0x10 (16)
0x4cda99a0   544  stp x17, cp, [jssp, #-16]!
0x4cda99a4   548  add fp, jssp, #0x10 (16)
0x4cda99a8   552  ldr x17, pc+24 (addr 0x000000004cda99c0)    ;; lazy deoptimization bailout 0
0x4cda99ac   556  add x17, x17, x16
0x4cda99b0   560  br x17
0x4cda99b4   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cda99b8   568  d63f03e0       constant
0x4cda99bc   572  d503201f       constant
0x4cda99c0   576  4cb06000       constant
0x4cda99c4   580  00000000       constant


Safepoints (size = 21)
0x4cda9904   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0x4cda97cc  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cda97e4  embedded object  (0x21004241 <undefined>)
0x4cda9830  code target (STUB)  (0x4cd370c0)
0x4cda9870  code target (STUB)  (0x4cd378a0)
0x4cda98a8  code target (STUB)  (0x4cd38080)
0x4cda98d8  code target (STUB)  (0x4cd06820)
0x4cda98fc  code target (STUB)  (0x4cd06260)
0x4cda9908  code target (STUB)  (0x4cd068e0)
0x4cda991c  constant pool (size 76)
0x4cda99a8  runtime entry
0x4cda99b4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0x4cda9780     0  ldur x6, [x1, #7]
0x4cda9784     4  ldur w7, [x6, #11]
0x4cda9788     8  adds w8, w7, #0x3 (3)
0x4cda978c    12  b.vs #+0x1dc (addr 0x4cda9968)
0x4cda9790    16  movz w16, #0x95ff
0x4cda9794    20  cmp w8, w16, lsl #1
0x4cda9798    24  b.hs #+0x1e0 (addr 0x4cda9978)
0x4cda979c    28  lsl x9, x8, #32
0x4cda97a0    32  lsl w10, w8, #3
0x4cda97a4    36  add w10, w10, #0x10 (16)
0x4cda97a8    40  sxtw x10, w10
0x4cda97ac    44  movz x11, #0xd2c0
0x4cda97b0    48  movk x11, #0x166d, lsl #16
0x4cda97b4    52  ldp x13, x16, [x11]
0x4cda97b8    56  adds x12, x13, x10
0x4cda97bc    60  ccmp x12, x16, #nzCv, lo
0x4cda97c0    64  b.hi #+0xf8 (addr 0x4cda98b8)
0x4cda97c4    68  str x12, [x11]
0x4cda97c8    72  orr x13, x13, #0x1
0x4cda97cc    76  ldr x10, pc+348 (addr 0x000000004cda9928)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cda97d0    80  stur x10, [x13, #-1]
0x4cda97d4    84  stur x9, [x13, #7]
0x4cda97d8    88  cmp w7, w8
0x4cda97dc    92  b.ge #+0x18 (addr 0x4cda97f4)
0x4cda97e0    96  sub w8, w8, #0x1 (1)
0x4cda97e4   100  ldr x9, pc+332 (addr 0x000000004cda9930)    ;; object: 0x21004241 <undefined>
0x4cda97e8   104  add x10, x13, #0xf (15)
0x4cda97ec   108  str x9, [x10, w8, sxtw #3]
0x4cda97f0   112  b #-0x18 (addr 0x4cda97d8)
0x4cda97f4   116  cmp w7, #0x0 (0)
0x4cda97f8   120  b.le #+0x1c (addr 0x4cda9814)
0x4cda97fc   124  sub w7, w7, #0x1 (1)
0x4cda9800   128  add x8, x6, #0xf (15)
0x4cda9804   132  ldr x9, [x8, w7, sxtw #3]
0x4cda9808   136  add x8, x13, #0xf (15)
0x4cda980c   140  str x9, [x8, w7, sxtw #3]
0x4cda9810   144  b #-0x1c (addr 0x4cda97f4)
0x4cda9814   148  stur x13, [x1, #7]
0x4cda9818   152  add x6, x1, #0x7 (7)
0x4cda981c   156  and x13, x1, #0xfffffffffff00000
0x4cda9820   160  ldr x13, [x13, #8]
0x4cda9824   164  tbz w13, #2, #+0x18 (addr 0x4cda983c)
0x4cda9828   168  sub csp, jssp, #0x8 (8)
0x4cda982c   172  str lr, [jssp, #-8]!
0x4cda9830   176  ldr x16, pc+264 (addr 0x000000004cda9938)    ;; code: STUB, RecordWriteStub, minor: 72097
0x4cda9834   180  blr x16
0x4cda9838   184  ldr lr, [jssp], #8
0x4cda983c   188  tbz w0, #0, #+0x14c (addr 0x4cda9988)
0x4cda9840   192  mov x2, x0
0x4cda9844   196  ldur x4, [x1, #7]
0x4cda9848   200  stur x2, [x4, #63]
0x4cda984c   204  add x3, x4, #0x3f (63)
0x4cda9850   208  and x2, x2, #0xfffffffffff00000
0x4cda9854   212  ldr x2, [x2, #8]
0x4cda9858   216  tbz w2, #1, #+0x24 (addr 0x4cda987c)
0x4cda985c   220  and x2, x4, #0xfffffffffff00000
0x4cda9860   224  ldr x2, [x2, #8]
0x4cda9864   228  tbz w2, #2, #+0x18 (addr 0x4cda987c)
0x4cda9868   232  sub csp, jssp, #0x8 (8)
0x4cda986c   236  str lr, [jssp, #-8]!
0x4cda9870   240  ldr x16, pc+208 (addr 0x000000004cda9940)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cda9874   244  blr x16
0x4cda9878   248  ldr lr, [jssp], #8
0x4cda987c   252  stur x5, [x1, #-1]
0x4cda9880   256  tbz w5, #0, #+0x34 (addr 0x4cda98b4)
0x4cda9884   260  sub x2, x1, #0x1 (1)
0x4cda9888   264  and x5, x5, #0xfffffffffff00000
0x4cda988c   268  ldr x5, [x5, #8]
0x4cda9890   272  tbz w5, #1, #+0x24 (addr 0x4cda98b4)
0x4cda9894   276  and x5, x1, #0xfffffffffff00000
0x4cda9898   280  ldr x5, [x5, #8]
0x4cda989c   284  tbz w5, #2, #+0x18 (addr 0x4cda98b4)
0x4cda98a0   288  sub csp, jssp, #0x8 (8)
0x4cda98a4   292  str lr, [jssp, #-8]!
0x4cda98a8   296  ldr x16, pc+160 (addr 0x000000004cda9948)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cda98ac   300  blr x16
0x4cda98b0   304  ldr lr, [jssp], #8
0x4cda98b4   308  ret
0x4cda98b8   312  sub csp, jssp, #0x10 (16)
0x4cda98bc   316  stp fp, lr, [jssp, #-16]!
0x4cda98c0   320  movz fp, #0xa00000000
0x4cda98c4   324  sub csp, jssp, #0x8 (8)
0x4cda98c8   328  str fp, [jssp, #-8]!
0x4cda98cc   332  add fp, jssp, #0x8 (8)
0x4cda98d0   336  movz x13, #0x0
0x4cda98d4   340  mov x16, lr
0x4cda98d8   344  ldr x17, pc+120 (addr 0x000000004cda9950)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cda98dc   348  blr x17
0x4cda98e0   352  lsl x0, x10, #32
0x4cda98e4   356  movz x10, #0x0
0x4cda98e8   360  sub csp, jssp, #0x10 (16)
0x4cda98ec   364  stp x10, x0, [jssp, #-16]!
0x4cda98f0   368  movz x0, #0x2
0x4cda98f4   372  movz x1, #0x5b88
0x4cda98f8   376  movk x1, #0xe2, lsl #16
0x4cda98fc   380  ldr x16, pc+92 (addr 0x000000004cda9958)    ;; code: STUB, CEntryStub, minor: 5
0x4cda9900   384  blr x16
0x4cda9904   388  str x0, [jssp, #104]
0x4cda9908   392  ldr x16, pc+88 (addr 0x000000004cda9960)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cda990c   396  blr x16
0x4cda9910   400  ldr lr, [jssp, #16]
0x4cda9914   404  ldp xzr, fp, [jssp], #24
0x4cda9918   408  b #-0x14c (addr 0x4cda97cc)
0x4cda991c   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0x4cda9920   416  d63f03e0       constant
0x4cda9924   420  d503201f       constant
0x4cda9928   424  2a804259       constant
0x4cda992c   428  00000000       constant
0x4cda9930   432  21004241       constant
0x4cda9934   436  00000000       constant
0x4cda9938   440  4cd370c0       constant
0x4cda993c   444  00000000       constant
0x4cda9940   448  4cd378a0       constant
0x4cda9944   452  00000000       constant
0x4cda9948   456  4cd38080       constant
0x4cda994c   460  00000000       constant
0x4cda9950   464  4cd06820       constant
0x4cda9954   468  00000000       constant
0x4cda9958   472  4cd06260       constant
0x4cda995c   476  00000000       constant
0x4cda9960   480  4cd068e0       constant
0x4cda9964   484  00000000       constant
0x4cda9968   488  movz x16, #0x0
0x4cda996c   492  sub csp, jssp, #0x10 (16)
0x4cda9970   496  stp fp, lr, [jssp, #-16]!
0x4cda9974   500  bl #+0x24 (addr 0x4cda9998)
0x4cda9978   504  movz x16, #0x8
0x4cda997c   508  sub csp, jssp, #0x10 (16)
0x4cda9980   512  stp fp, lr, [jssp, #-16]!
0x4cda9984   516  bl #+0x14 (addr 0x4cda9998)
0x4cda9988   520  movz x16, #0x10
0x4cda998c   524  sub csp, jssp, #0x10 (16)
0x4cda9990   528  stp fp, lr, [jssp, #-16]!
0x4cda9994   532  bl #+0x4 (addr 0x4cda9998)
0x4cda9998   536  movz x17, #0xa00000000
0x4cda999c   540  sub csp, jssp, #0x10 (16)
0x4cda99a0   544  stp x17, cp, [jssp, #-16]!
0x4cda99a4   548  add fp, jssp, #0x10 (16)
0x4cda99a8   552  ldr x17, pc+24 (addr 0x000000004cda99c0)    ;; lazy deoptimization bailout 0
0x4cda99ac   556  add x17, x17, x16
0x4cda99b0   560  br x17
0x4cda99b4   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cda99b8   568  d63f03e0       constant
0x4cda99bc   572  d503201f       constant
0x4cda99c0   576  4cb06000       constant
0x4cda99c4   580  00000000       constant


Safepoints (size = 21)
0x4cda9904   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0x4cda97cc  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cda97e4  embedded object  (0x21004241 <undefined>)
0x4cda9830  code target (STUB)  (0x4cd370c0)
0x4cda9870  code target (STUB)  (0x4cd378a0)
0x4cda98a8  code target (STUB)  (0x4cd38080)
0x4cda98d8  code target (STUB)  (0x4cd06820)
0x4cda98fc  code target (STUB)  (0x4cd06260)
0x4cda9908  code target (STUB)  (0x4cd068e0)
0x4cda991c  constant pool (size 76)
0x4cda99a8  runtime entry
0x4cda99b4  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = internal/process/promises
compiler = unknown
Instructions (size = 184)
0x4cda9a40     0  sub csp, jssp, #0x8 (8)
0x4cda9a44     4  str x3, [jssp, #-8]!
0x4cda9a48     8  sub csp, jssp, #0x8 (8)
0x4cda9a4c    12  str x4, [jssp, #-8]!
0x4cda9a50    16  ldr x3, pc+112 (addr 0x000000004cda9ac0)    ;; object: 0x21063e59 Cell for 0
0x4cda9a54    20  ldur x3, [x3, #7]
0x4cda9a58    24  cmp x3, #0x0 (0)
0x4cda9a5c    28  b.ne #+0x44 (addr 0x4cda9aa0)
0x4cda9a60    32  tbz w0, #0, #+0x40 (addr 0x4cda9aa0)
0x4cda9a64    36  ldur x3, [x0, #-1]
0x4cda9a68    40  ldr x4, pc+96 (addr 0x000000004cda9ac8)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cda9a6c    44  ldur x4, [x4, #7]
0x4cda9a70    48  cmp x3, x4
0x4cda9a74    52  b.ne #+0x2c (addr 0x4cda9aa0)
0x4cda9a78    56  ldr x5, pc+88 (addr 0x000000004cda9ad0)    ;; object: 0x210f78b1 WeakCell for 0x2a827c49 <Map(FAST_HOLEY_ELEMENTS)>
0x4cda9a7c    60  ldur x5, [x5, #7]
0x4cda9a80    64  tbz w5, #0, #+0x20 (addr 0x4cda9aa0)
0x4cda9a84    68  ldursw x4, [x5, #15]
0x4cda9a88    72  tbnz w4, #23, #+0x18 (addr 0x4cda9aa0)
0x4cda9a8c    76  ldr x4, [jssp], #8
0x4cda9a90    80  ldr x3, [jssp], #8
0x4cda9a94    84  ldr x2, pc+68 (addr 0x000000004cda9ad8)    ;; object: 0x210be351 <String[25]: internal/process/promises>
0x4cda9a98    88  ldr x16, pc+72 (addr 0x000000004cda9ae0)    ;; code: HANDLER, StoreTransitionStub, minor: 327688
0x4cda9a9c    92  br x16
0x4cda9aa0    96  ldr x2, pc+72 (addr 0x000000004cda9ae8)    ;; object: 0x210be351 <String[25]: internal/process/promises>
0x4cda9aa4   100  ldr x4, [jssp], #8
0x4cda9aa8   104  ldr x3, [jssp], #8
0x4cda9aac   108  ldr x16, pc+68 (addr 0x000000004cda9af0)    ;; code: BUILTIN
0x4cda9ab0   112  br x16
0x4cda9ab4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cda9ab8   120  d63f03e0       constant
0x4cda9abc   124  d503201f       constant
0x4cda9ac0   128  21063e59       constant
0x4cda9ac4   132  00000000       constant
0x4cda9ac8   136  210c22b1       constant
0x4cda9acc   140  00000000       constant
0x4cda9ad0   144  210f78b1       constant
0x4cda9ad4   148  00000000       constant
0x4cda9ad8   152  210be351       constant
0x4cda9adc   156  00000000       constant
0x4cda9ae0   160  4cda9780       constant
0x4cda9ae4   164  00000000       constant
0x4cda9ae8   168  210be351       constant
0x4cda9aec   172  00000000       constant
0x4cda9af0   176  4cd22420       constant
0x4cda9af4   180  00000000       constant


RelocInfo (size = 13)
0x4cda9a50  embedded object  (0x21063e59 Cell for 0)
0x4cda9a68  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cda9a78  embedded object  (0x210f78b1 WeakCell for 0x2a827c49 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cda9a94  embedded object  (0x210be351 <String[25]: internal/process/promises>)
0x4cda9a98  code target (HANDLER)  (0x4cda9780)
0x4cda9aa0  embedded object  (0x210be351 <String[25]: internal/process/promises>)
0x4cda9aac  code target (BUILTIN)  (0x4cd22420)
0x4cda9ab4  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = WeakMap
compiler = unknown
Instructions (size = 120)
0x4cdaa120     0  sub csp, jssp, #0x8 (8)
0x4cdaa124     4  str x3, [jssp, #-8]!
0x4cdaa128     8  sub csp, jssp, #0x8 (8)
0x4cdaa12c    12  str x0, [jssp, #-8]!
0x4cdaa130    16  ldr x0, pc+80 (addr 0x000000004cdaa180)    ;; object: 0x210c5d51 Cell for 0
0x4cdaa134    20  ldur x0, [x0, #7]
0x4cdaa138    24  cmp x0, #0x0 (0)
0x4cdaa13c    28  b.ne #+0x2c (addr 0x4cdaa168)
0x4cdaa140    32  ldr x0, pc+72 (addr 0x000000004cdaa188)    ;; object: 0x210f8569 WeakCell for 0x210491f9 PropertyCell for 0x21049191 <JS Function WeakMap (SharedFunctionInfo 0x210490e9)>
0x4cdaa144    36  ldur x0, [x0, #7]
0x4cdaa148    40  tbz w0, #0, #+0x20 (addr 0x4cdaa168)
0x4cdaa14c    44  ldur x0, [x0, #15]
0x4cdaa150    48  ldr x16, [x26, #88]
0x4cdaa154    52  cmp x0, x16
0x4cdaa158    56  b.eq #+0x10 (addr 0x4cdaa168)
0x4cdaa15c    60  add jssp, jssp, #0x10 (16)
0x4cdaa160    64  ret
0x4cdaa164    68  b #+0x14 (addr 0x4cdaa178)
0x4cdaa168    72  ldr x0, [jssp], #8
0x4cdaa16c    76  ldr x3, [jssp], #8
0x4cdaa170    80  ldr x16, pc+32 (addr 0x000000004cdaa190)    ;; code: BUILTIN
0x4cdaa174    84  br x16
0x4cdaa178    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cdaa17c    92  d63f03e0       constant
0x4cdaa180    96  210c5d51       constant
0x4cdaa184   100  00000000       constant
0x4cdaa188   104  210f8569       constant
0x4cdaa18c   108  00000000       constant
0x4cdaa190   112  4cd222e0       constant
0x4cdaa194   116  00000000       constant


RelocInfo (size = 9)
0x4cdaa130  embedded object  (0x210c5d51 Cell for 0)
0x4cdaa140  embedded object  (0x210f8569 WeakCell for 0x210491f9 PropertyCell for 0x21049191 <JS Function WeakMap (SharedFunctionInfo 0x210490e9)>)
0x4cdaa170  code target (BUILTIN)  (0x4cd222e0)
0x4cdaa178  constant pool (size 32)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cdaa500     0  tbz w0, #0, #+0x98 (addr 0x4cdaa598)
0x4cdaa504     4  mov x2, x0
0x4cdaa508     8  ldur x4, [x1, #7]
0x4cdaa50c    12  stur x2, [x4, #71]
0x4cdaa510    16  add x3, x4, #0x47 (71)
0x4cdaa514    20  and x2, x2, #0xfffffffffff00000
0x4cdaa518    24  ldr x2, [x2, #8]
0x4cdaa51c    28  tbz w2, #1, #+0x24 (addr 0x4cdaa540)
0x4cdaa520    32  and x2, x4, #0xfffffffffff00000
0x4cdaa524    36  ldr x2, [x2, #8]
0x4cdaa528    40  tbz w2, #2, #+0x18 (addr 0x4cdaa540)
0x4cdaa52c    44  sub csp, jssp, #0x8 (8)
0x4cdaa530    48  str lr, [jssp, #-8]!
0x4cdaa534    52  ldr x16, pc+84 (addr 0x000000004cdaa588)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdaa538    56  blr x16
0x4cdaa53c    60  ldr lr, [jssp], #8
0x4cdaa540    64  stur x5, [x1, #-1]
0x4cdaa544    68  tbz w5, #0, #+0x34 (addr 0x4cdaa578)
0x4cdaa548    72  sub x2, x1, #0x1 (1)
0x4cdaa54c    76  and x5, x5, #0xfffffffffff00000
0x4cdaa550    80  ldr x5, [x5, #8]
0x4cdaa554    84  tbz w5, #1, #+0x24 (addr 0x4cdaa578)
0x4cdaa558    88  and x5, x1, #0xfffffffffff00000
0x4cdaa55c    92  ldr x5, [x5, #8]
0x4cdaa560    96  tbz w5, #2, #+0x18 (addr 0x4cdaa578)
0x4cdaa564   100  sub csp, jssp, #0x8 (8)
0x4cdaa568   104  str lr, [jssp, #-8]!
0x4cdaa56c   108  ldr x16, pc+36 (addr 0x000000004cdaa590)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdaa570   112  blr x16
0x4cdaa574   116  ldr lr, [jssp], #8
0x4cdaa578   120  ret
0x4cdaa57c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cdaa580   128  d63f03e0       constant
0x4cdaa584   132  d503201f       constant
0x4cdaa588   136  4cd378a0       constant
0x4cdaa58c   140  00000000       constant
0x4cdaa590   144  4cd38080       constant
0x4cdaa594   148  00000000       constant
0x4cdaa598   152  movz x16, #0x0
0x4cdaa59c   156  sub csp, jssp, #0x10 (16)
0x4cdaa5a0   160  stp fp, lr, [jssp, #-16]!
0x4cdaa5a4   164  bl #+0x4 (addr 0x4cdaa5a8)
0x4cdaa5a8   168  movz x17, #0xa00000000
0x4cdaa5ac   172  sub csp, jssp, #0x10 (16)
0x4cdaa5b0   176  stp x17, cp, [jssp, #-16]!
0x4cdaa5b4   180  add fp, jssp, #0x10 (16)
0x4cdaa5b8   184  ldr x17, pc+24 (addr 0x000000004cdaa5d0)    ;; lazy deoptimization bailout 0
0x4cdaa5bc   188  add x17, x17, x16
0x4cdaa5c0   192  br x17
0x4cdaa5c4   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdaa5c8   200  d63f03e0       constant
0x4cdaa5cc   204  d503201f       constant
0x4cdaa5d0   208  4cb06000       constant
0x4cdaa5d4   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdaa534  code target (STUB)  (0x4cd378a0)
0x4cdaa56c  code target (STUB)  (0x4cd38080)
0x4cdaa57c  constant pool (size 28)
0x4cdaa5b8  runtime entry
0x4cdaa5c4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cdaa500     0  tbz w0, #0, #+0x98 (addr 0x4cdaa598)
0x4cdaa504     4  mov x2, x0
0x4cdaa508     8  ldur x4, [x1, #7]
0x4cdaa50c    12  stur x2, [x4, #71]
0x4cdaa510    16  add x3, x4, #0x47 (71)
0x4cdaa514    20  and x2, x2, #0xfffffffffff00000
0x4cdaa518    24  ldr x2, [x2, #8]
0x4cdaa51c    28  tbz w2, #1, #+0x24 (addr 0x4cdaa540)
0x4cdaa520    32  and x2, x4, #0xfffffffffff00000
0x4cdaa524    36  ldr x2, [x2, #8]
0x4cdaa528    40  tbz w2, #2, #+0x18 (addr 0x4cdaa540)
0x4cdaa52c    44  sub csp, jssp, #0x8 (8)
0x4cdaa530    48  str lr, [jssp, #-8]!
0x4cdaa534    52  ldr x16, pc+84 (addr 0x000000004cdaa588)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdaa538    56  blr x16
0x4cdaa53c    60  ldr lr, [jssp], #8
0x4cdaa540    64  stur x5, [x1, #-1]
0x4cdaa544    68  tbz w5, #0, #+0x34 (addr 0x4cdaa578)
0x4cdaa548    72  sub x2, x1, #0x1 (1)
0x4cdaa54c    76  and x5, x5, #0xfffffffffff00000
0x4cdaa550    80  ldr x5, [x5, #8]
0x4cdaa554    84  tbz w5, #1, #+0x24 (addr 0x4cdaa578)
0x4cdaa558    88  and x5, x1, #0xfffffffffff00000
0x4cdaa55c    92  ldr x5, [x5, #8]
0x4cdaa560    96  tbz w5, #2, #+0x18 (addr 0x4cdaa578)
0x4cdaa564   100  sub csp, jssp, #0x8 (8)
0x4cdaa568   104  str lr, [jssp, #-8]!
0x4cdaa56c   108  ldr x16, pc+36 (addr 0x000000004cdaa590)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdaa570   112  blr x16
0x4cdaa574   116  ldr lr, [jssp], #8
0x4cdaa578   120  ret
0x4cdaa57c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cdaa580   128  d63f03e0       constant
0x4cdaa584   132  d503201f       constant
0x4cdaa588   136  4cd378a0       constant
0x4cdaa58c   140  00000000       constant
0x4cdaa590   144  4cd38080       constant
0x4cdaa594   148  00000000       constant
0x4cdaa598   152  movz x16, #0x0
0x4cdaa59c   156  sub csp, jssp, #0x10 (16)
0x4cdaa5a0   160  stp fp, lr, [jssp, #-16]!
0x4cdaa5a4   164  bl #+0x4 (addr 0x4cdaa5a8)
0x4cdaa5a8   168  movz x17, #0xa00000000
0x4cdaa5ac   172  sub csp, jssp, #0x10 (16)
0x4cdaa5b0   176  stp x17, cp, [jssp, #-16]!
0x4cdaa5b4   180  add fp, jssp, #0x10 (16)
0x4cdaa5b8   184  ldr x17, pc+24 (addr 0x000000004cdaa5d0)    ;; lazy deoptimization bailout 0
0x4cdaa5bc   188  add x17, x17, x16
0x4cdaa5c0   192  br x17
0x4cdaa5c4   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdaa5c8   200  d63f03e0       constant
0x4cdaa5cc   204  d503201f       constant
0x4cdaa5d0   208  4cb06000       constant
0x4cdaa5d4   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdaa534  code target (STUB)  (0x4cd378a0)
0x4cdaa56c  code target (STUB)  (0x4cd38080)
0x4cdaa57c  constant pool (size 28)
0x4cdaa5b8  runtime entry
0x4cdaa5c4  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = internal/process/stdio
compiler = unknown
Instructions (size = 184)
0x4cdaa640     0  sub csp, jssp, #0x8 (8)
0x4cdaa644     4  str x3, [jssp, #-8]!
0x4cdaa648     8  sub csp, jssp, #0x8 (8)
0x4cdaa64c    12  str x4, [jssp, #-8]!
0x4cdaa650    16  ldr x3, pc+112 (addr 0x000000004cdaa6c0)    ;; object: 0x21063e59 Cell for 0
0x4cdaa654    20  ldur x3, [x3, #7]
0x4cdaa658    24  cmp x3, #0x0 (0)
0x4cdaa65c    28  b.ne #+0x44 (addr 0x4cdaa6a0)
0x4cdaa660    32  tbz w0, #0, #+0x40 (addr 0x4cdaa6a0)
0x4cdaa664    36  ldur x3, [x0, #-1]
0x4cdaa668    40  ldr x4, pc+96 (addr 0x000000004cdaa6c8)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdaa66c    44  ldur x4, [x4, #7]
0x4cdaa670    48  cmp x3, x4
0x4cdaa674    52  b.ne #+0x2c (addr 0x4cdaa6a0)
0x4cdaa678    56  ldr x5, pc+88 (addr 0x000000004cdaa6d0)    ;; object: 0x210f8dd1 WeakCell for 0x2a827da9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdaa67c    60  ldur x5, [x5, #7]
0x4cdaa680    64  tbz w5, #0, #+0x20 (addr 0x4cdaa6a0)
0x4cdaa684    68  ldursw x4, [x5, #15]
0x4cdaa688    72  tbnz w4, #23, #+0x18 (addr 0x4cdaa6a0)
0x4cdaa68c    76  ldr x4, [jssp], #8
0x4cdaa690    80  ldr x3, [jssp], #8
0x4cdaa694    84  ldr x2, pc+68 (addr 0x000000004cdaa6d8)    ;; object: 0x210b97b9 <String[22]: internal/process/stdio>
0x4cdaa698    88  ldr x16, pc+72 (addr 0x000000004cdaa6e0)    ;; code: HANDLER, StoreTransitionStub, minor: 196617
0x4cdaa69c    92  br x16
0x4cdaa6a0    96  ldr x2, pc+72 (addr 0x000000004cdaa6e8)    ;; object: 0x210b97b9 <String[22]: internal/process/stdio>
0x4cdaa6a4   100  ldr x4, [jssp], #8
0x4cdaa6a8   104  ldr x3, [jssp], #8
0x4cdaa6ac   108  ldr x16, pc+68 (addr 0x000000004cdaa6f0)    ;; code: BUILTIN
0x4cdaa6b0   112  br x16
0x4cdaa6b4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdaa6b8   120  d63f03e0       constant
0x4cdaa6bc   124  d503201f       constant
0x4cdaa6c0   128  21063e59       constant
0x4cdaa6c4   132  00000000       constant
0x4cdaa6c8   136  210c22b1       constant
0x4cdaa6cc   140  00000000       constant
0x4cdaa6d0   144  210f8dd1       constant
0x4cdaa6d4   148  00000000       constant
0x4cdaa6d8   152  210b97b9       constant
0x4cdaa6dc   156  00000000       constant
0x4cdaa6e0   160  4cdaa500       constant
0x4cdaa6e4   164  00000000       constant
0x4cdaa6e8   168  210b97b9       constant
0x4cdaa6ec   172  00000000       constant
0x4cdaa6f0   176  4cd22420       constant
0x4cdaa6f4   180  00000000       constant


RelocInfo (size = 13)
0x4cdaa650  embedded object  (0x21063e59 Cell for 0)
0x4cdaa668  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdaa678  embedded object  (0x210f8dd1 WeakCell for 0x2a827da9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdaa694  embedded object  (0x210b97b9 <String[22]: internal/process/stdio>)
0x4cdaa698  code target (HANDLER)  (0x4cdaa500)
0x4cdaa6a0  embedded object  (0x210b97b9 <String[22]: internal/process/stdio>)
0x4cdaa6ac  code target (BUILTIN)  (0x4cd22420)
0x4cdaa6b4  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = newListener
compiler = unknown
Instructions (size = 144)
0x4cdab640     0  sub csp, jssp, #0x8 (8)
0x4cdab644     4  str x3, [jssp, #-8]!
0x4cdab648     8  sub csp, jssp, #0x8 (8)
0x4cdab64c    12  str x4, [jssp, #-8]!
0x4cdab650    16  ldr x5, pc+88 (addr 0x000000004cdab6a8)    ;; object: 0x210fabf9 WeakCell for 0x2a827e01 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdab654    20  ldur x5, [x5, #7]
0x4cdab658    24  tbz w5, #0, #+0x30 (addr 0x4cdab688)
0x4cdab65c    28  ldursw x4, [x5, #15]
0x4cdab660    32  tbnz w4, #23, #+0x28 (addr 0x4cdab688)
0x4cdab664    36  ldur x4, [x5, #47]
0x4cdab668    40  ldur x4, [x4, #71]
0x4cdab66c    44  cmp x0, x4
0x4cdab670    48  b.ne #+0x18 (addr 0x4cdab688)
0x4cdab674    52  ldr x4, [jssp], #8
0x4cdab678    56  ldr x3, [jssp], #8
0x4cdab67c    60  ldr x2, pc+52 (addr 0x000000004cdab6b0)    ;; object: 0x210c3819 <String[11]: newListener>
0x4cdab680    64  ldr x16, pc+56 (addr 0x000000004cdab6b8)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0x4cdab684    68  br x16
0x4cdab688    72  ldr x2, pc+56 (addr 0x000000004cdab6c0)    ;; object: 0x210c3819 <String[11]: newListener>
0x4cdab68c    76  ldr x4, [jssp], #8
0x4cdab690    80  ldr x3, [jssp], #8
0x4cdab694    84  ldr x16, pc+52 (addr 0x000000004cdab6c8)    ;; code: BUILTIN
0x4cdab698    88  br x16
0x4cdab69c    92  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0x4cdab6a0    96  d63f03e0       constant
0x4cdab6a4   100  d503201f       constant
0x4cdab6a8   104  210fabf9       constant
0x4cdab6ac   108  00000000       constant
0x4cdab6b0   112  210c3819       constant
0x4cdab6b4   116  00000000       constant
0x4cdab6b8   120  4cd3cea0       constant
0x4cdab6bc   124  00000000       constant
0x4cdab6c0   128  210c3819       constant
0x4cdab6c4   132  00000000       constant
0x4cdab6c8   136  4cd22420       constant
0x4cdab6cc   140  00000000       constant


RelocInfo (size = 11)
0x4cdab650  embedded object  (0x210fabf9 WeakCell for 0x2a827e01 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdab67c  embedded object  (0x210c3819 <String[11]: newListener>)
0x4cdab680  code target (HANDLER)  (0x4cd3cea0)
0x4cdab688  embedded object  (0x210c3819 <String[11]: newListener>)
0x4cdab694  code target (BUILTIN)  (0x4cd22420)
0x4cdab69c  constant pool (size 52)

kind = STUB
major_key = FastNewStrictArgumentsStub
name = FastNewStrictArgumentsStub
compiler = unknown
Instructions (size = 336)
0x4cdab740     0  mov x2, fp
0x4cdab744     4  b #+0x8 (addr 0x4cdab74c)
0x4cdab748     8  ldr x2, [x2]
0x4cdab74c    12  ldur x3, [x2, #-16]
0x4cdab750    16  cmp x3, x1
0x4cdab754    20  b.ne #-0xc (addr 0x4cdab748)
0x4cdab758    24  ldr x3, [x2]
0x4cdab75c    28  ldur x4, [x3, #-8]
0x4cdab760    32  movz x16, #0xe00000000
0x4cdab764    36  cmp x4, x16
0x4cdab768    40  b.eq #+0x18 (addr 0x4cdab780)
0x4cdab76c    44  ldur x1, [x1, #31]
0x4cdab770    48  ldursw x0, [x1, #99]
0x4cdab774    52  add x2, x2, x0, lsl #3
0x4cdab778    56  add x2, x2, #0x8 (8)
0x4cdab77c    60  b #+0x10 (addr 0x4cdab78c)
0x4cdab780    64  ldursw x0, [x3, #-20]
0x4cdab784    68  add x2, x3, x0, lsl #3
0x4cdab788    72  add x2, x2, #0x8 (8)
0x4cdab78c    76  movz x1, #0x30
0x4cdab790    80  add x1, x1, x0, lsl #3
0x4cdab794    84  ldr x5, pc+220 (addr 0x000000004cdab870)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x4cdab798    88  ldp x3, x16, [x5]
0x4cdab79c    92  adds x4, x3, x1
0x4cdab7a0    96  ccmp x4, x16, #nzCv, lo
0x4cdab7a4   100  b.hi #+0x64 (addr 0x4cdab808)
0x4cdab7a8   104  str x4, [x5]
0x4cdab7ac   108  orr x3, x3, #0x1
0x4cdab7b0   112  lsl x6, x0, #32
0x4cdab7b4   116  ldr x1, [x26, #224]
0x4cdab7b8   120  stur x1, [x3, #-1]
0x4cdab7bc   124  stur x6, [x3, #7]
0x4cdab7c0   128  add x4, x3, #0x10 (16)
0x4cdab7c4   132  add x0, x4, x0, lsl #3
0x4cdab7c8   136  cmp x4, x0
0x4cdab7cc   140  b.eq #+0x18 (addr 0x4cdab7e4)
0x4cdab7d0   144  ldr x5, [x2]
0x4cdab7d4   148  stur x5, [x4, #-1]
0x4cdab7d8   152  sub x2, x2, #0x8 (8)
0x4cdab7dc   156  add x4, x4, #0x8 (8)
0x4cdab7e0   160  b #-0x18 (addr 0x4cdab7c8)
0x4cdab7e4   164  ldur x1, [cp, #39]
0x4cdab7e8   168  movz x16, #0x2c7
0x4cdab7ec   172  ldr x1, [x1, x16]
0x4cdab7f0   176  stur x1, [x0, #-1]
0x4cdab7f4   180  ldr x1, [x26, #304]
0x4cdab7f8   184  stur x1, [x0, #7]
0x4cdab7fc   188  stur x3, [x0, #15]
0x4cdab800   192  stur x6, [x0, #23]
0x4cdab804   196  ret
0x4cdab808   200  movz x16, #0xc00000000
0x4cdab80c   204  sub csp, jssp, #0x10 (16)
0x4cdab810   208  stp fp, lr, [jssp, #-16]!
0x4cdab814   212  sub csp, jssp, #0x10 (16)
0x4cdab818   216  str x16, [jssp, #-8]!
0x4cdab81c   220  ldr x17, pc+92 (addr 0x000000004cdab878)    ;; object: 0x4cdab6e1 <Code: STUB>
0x4cdab820   224  sub csp, jssp, #0x10 (16)
0x4cdab824   228  str x17, [jssp, #-8]!
0x4cdab828   232  add fp, jssp, #0x10 (16)
0x4cdab82c   236  lsl x0, x0, #32
0x4cdab830   240  lsl x1, x1, #32
0x4cdab834   244  sub csp, jssp, #0x18 (24)
0x4cdab838   248  stp x1, x2, [jssp, #-24]!
0x4cdab83c   252  str x0, [jssp, #16]
0x4cdab840   256  movz x0, #0x1
0x4cdab844   260  ldr x1, pc+60 (addr 0x000000004cdab880)    ;; external reference (Runtime::AllocateInNewSpace)
0x4cdab848   264  ldr x16, pc+64 (addr 0x000000004cdab888)    ;; code: STUB, CEntryStub, minor: 4
0x4cdab84c   268  blr x16
0x4cdab850   272  mov x3, x0
0x4cdab854   276  ldp x2, x0, [jssp], #16
0x4cdab858   280  asr x0, x0, #32
0x4cdab85c   284  mov jssp, fp
0x4cdab860   288  ldp fp, lr, [jssp], #16
0x4cdab864   292  b #-0xb4 (addr 0x4cdab7b0)
0x4cdab868   296  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdab86c   300  d63f03e0       constant
0x4cdab870   304  166dd2c0       constant
0x4cdab874   308  00000000       constant
0x4cdab878   312  4cdab6e1       constant
0x4cdab87c   316  00000000       constant
0x4cdab880   320  00e25898       constant
0x4cdab884   324  00000000       constant
0x4cdab888   328  4cd06060       constant
0x4cdab88c   332  00000000       constant


RelocInfo (size = 16)
0x4cdab794  external reference (Heap::NewSpaceAllocationTopAddress())  (0x166dd2c0)
0x4cdab81c  embedded object  (0x4cdab6e1 <Code: STUB>)
0x4cdab844  external reference (Runtime::AllocateInNewSpace)  (0xe25898)
0x4cdab848  code target (STUB)  (0x4cd06060)
0x4cdab868  constant pool (size 40)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 393222
name = CallICStub(args(6), ANY, 
compiler = unknown
Instructions (size = 488)
0x4cdab900     0  add x4, x2, x3, asr #29
0x4cdab904     4  ldur x4, [x4, #15]
0x4cdab908     8  ldur x5, [x4, #7]
0x4cdab90c    12  cmp x5, x1
0x4cdab910    16  b.ne #+0x2c (addr 0x4cdab93c)
0x4cdab914    20  tbz w1, #0, #+0x28 (addr 0x4cdab93c)
0x4cdab918    24  add x2, x2, x3, asr #29
0x4cdab91c    28  add x2, x2, #0x18 (24)
0x4cdab920    32  ldur x3, [x2, #-1]
0x4cdab924    36  movz x16, #0x200000000
0x4cdab928    40  add x3, x3, x16
0x4cdab92c    44  stur x3, [x2, #-1]
0x4cdab930    48  movz x0, #0x6
0x4cdab934    52  ldr x16, pc+372 (addr 0x000000004cdabaa8)    ;; code: BUILTIN
0x4cdab938    56  br x16
0x4cdab93c    60  ldr x16, [x26, #2400]
0x4cdab940    64  cmp x4, x16
0x4cdab944    68  b.eq #+0x78 (addr 0x4cdab9bc)
0x4cdab948    72  ldur x5, [x4, #-1]
0x4cdab94c    76  ldr x16, [x26, #2736]
0x4cdab950    80  cmp x5, x16
0x4cdab954    84  b.ne #+0x40 (addr 0x4cdab994)
0x4cdab958    88  ldur x5, [cp, #39]
0x4cdab95c    92  ldur x5, [x5, #95]
0x4cdab960    96  cmp x1, x5
0x4cdab964   100  b.ne #+0xec (addr 0x4cdaba50)
0x4cdab968   104  movz x0, #0x6
0x4cdab96c   108  add x2, x2, x3, asr #29
0x4cdab970   112  add x2, x2, #0x18 (24)
0x4cdab974   116  ldur x3, [x2, #-1]
0x4cdab978   120  movz x16, #0x200000000
0x4cdab97c   124  add x3, x3, x16
0x4cdab980   128  stur x3, [x2, #-1]
0x4cdab984   132  mov x2, x4
0x4cdab988   136  mov x3, x1
0x4cdab98c   140  ldr x16, pc+292 (addr 0x000000004cdabab0)    ;; code: STUB, ArrayConstructorStub, minor: 3
0x4cdab990   144  br x16
0x4cdab994   148  ldr x16, [x26, #2568]
0x4cdab998   152  cmp x4, x16
0x4cdab99c   156  b.eq #+0xb4 (addr 0x4cdaba50)
0x4cdab9a0   160  ldur x5, [x4, #-1]
0x4cdab9a4   164  ldrb w5, [x5, #11]
0x4cdab9a8   168  cmp x5, #0xc9 (201)
0x4cdab9ac   172  b.ne #+0xa4 (addr 0x4cdaba50)
0x4cdab9b0   176  add x4, x2, x3, asr #29
0x4cdab9b4   180  ldr x5, [x26, #2400]
0x4cdab9b8   184  stur x5, [x4, #15]
0x4cdab9bc   188  movz x0, #0x6
0x4cdab9c0   192  ldr x16, pc+248 (addr 0x000000004cdabab8)    ;; code: BUILTIN
0x4cdab9c4   196  br x16
0x4cdab9c8   200  tbz w1, #0, #+0x88 (addr 0x4cdaba50)
0x4cdab9cc   204  ldur x5, [x1, #-1]
0x4cdab9d0   208  ldrb w5, [x5, #11]
0x4cdab9d4   212  cmp x5, #0xc9 (201)
0x4cdab9d8   216  b.ne #+0x78 (addr 0x4cdaba50)
0x4cdab9dc   220  ldur x5, [cp, #39]
0x4cdab9e0   224  ldur x5, [x5, #95]
0x4cdab9e4   228  cmp x1, x5
0x4cdab9e8   232  b.eq #+0x68 (addr 0x4cdaba50)
0x4cdab9ec   236  ldur x4, [x1, #39]
0x4cdab9f0   240  ldur x4, [x4, #39]
0x4cdab9f4   244  ldur x5, [cp, #39]
0x4cdab9f8   248  cmp x4, x5
0x4cdab9fc   252  b.ne #+0x54 (addr 0x4cdaba50)
0x4cdaba00   256  movz x5, #0x200000000
0x4cdaba04   260  adds x4, x2, x3, asr #29
0x4cdaba08   264  stur x5, [x4, #23]
0x4cdaba0c   268  movz x16, #0xc00000000
0x4cdaba10   272  sub csp, jssp, #0x10 (16)
0x4cdaba14   276  stp fp, lr, [jssp, #-16]!
0x4cdaba18   280  sub csp, jssp, #0x10 (16)
0x4cdaba1c   284  str x16, [jssp, #-8]!
0x4cdaba20   288  ldr x17, pc+160 (addr 0x000000004cdabac0)    ;; object: 0x4cdab8a1 <Code: CALL_IC>
0x4cdaba24   292  sub csp, jssp, #0x10 (16)
0x4cdaba28   296  str x17, [jssp, #-8]!
0x4cdaba2c   300  add fp, jssp, #0x10 (16)
0x4cdaba30   304  sub csp, jssp, #0x8 (8)
0x4cdaba34   308  str x1, [jssp, #-8]!
0x4cdaba38   312  ldr x16, pc+144 (addr 0x000000004cdabac8)    ;; code: STUB, CreateWeakCellStub, minor: 0
0x4cdaba3c   316  blr x16
0x4cdaba40   320  ldr x1, [jssp], #8
0x4cdaba44   324  mov jssp, fp
0x4cdaba48   328  ldp fp, lr, [jssp], #16
0x4cdaba4c   332  b #-0x11c (addr 0x4cdab930)
0x4cdaba50   336  movz x16, #0xc00000000
0x4cdaba54   340  sub csp, jssp, #0x10 (16)
0x4cdaba58   344  stp fp, lr, [jssp, #-16]!
0x4cdaba5c   348  sub csp, jssp, #0x10 (16)
0x4cdaba60   352  str x16, [jssp, #-8]!
0x4cdaba64   356  ldr x17, pc+108 (addr 0x000000004cdabad0)    ;; object: 0x4cdab8a1 <Code: CALL_IC>
0x4cdaba68   360  sub csp, jssp, #0x10 (16)
0x4cdaba6c   364  str x17, [jssp, #-8]!
0x4cdaba70   368  add fp, jssp, #0x10 (16)
0x4cdaba74   372  sub csp, jssp, #0x18 (24)
0x4cdaba78   376  stp x3, x2, [jssp, #-24]!
0x4cdaba7c   380  str x1, [jssp, #16]
0x4cdaba80   384  movz x0, #0x3
0x4cdaba84   388  ldr x1, pc+84 (addr 0x000000004cdabad8)    ;; external reference (Runtime::CallIC_Miss)
0x4cdaba88   392  ldr x16, pc+88 (addr 0x000000004cdabae0)    ;; code: STUB, CEntryStub, minor: 4
0x4cdaba8c   396  blr x16
0x4cdaba90   400  mov x1, x0
0x4cdaba94   404  mov jssp, fp
0x4cdaba98   408  ldp fp, lr, [jssp], #16
0x4cdaba9c   412  b #-0xe0 (addr 0x4cdab9bc)
0x4cdabaa0   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4cdabaa4   420  d63f03e0       constant
0x4cdabaa8   424  4cd1e820       constant
0x4cdabaac   428  00000000       constant
0x4cdabab0   432  4cd33b00       constant
0x4cdabab4   436  00000000       constant
0x4cdabab8   440  4cd1f820       constant
0x4cdababc   444  00000000       constant
0x4cdabac0   448  4cdab8a1       constant
0x4cdabac4   452  00000000       constant
0x4cdabac8   456  4cd0ddc0       constant
0x4cdabacc   460  00000000       constant
0x4cdabad0   464  4cdab8a1       constant
0x4cdabad4   468  00000000       constant
0x4cdabad8   472  00c86928       constant
0x4cdabadc   476  00000000       constant
0x4cdabae0   480  4cd06060       constant
0x4cdabae4   484  00000000       constant


RelocInfo (size = 19)
0x4cdab934  code target (BUILTIN)  (0x4cd1e820)
0x4cdab98c  code target (STUB)  (0x4cd33b00)
0x4cdab9c0  code target (BUILTIN)  (0x4cd1f820)
0x4cdaba20  embedded object  (0x4cdab8a1 <Code: CALL_IC>)
0x4cdaba38  code target (STUB)  (0x4cd0ddc0)
0x4cdaba64  embedded object  (0x4cdab8a1 <Code: CALL_IC>)
0x4cdaba84  external reference (Runtime::CallIC_Miss)  (0xc86928)
0x4cdaba88  code target (STUB)  (0x4cd06060)
0x4cdabaa0  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 393222
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0x4cdabb60     0  ldur x2, [fp, #-16]
0x4cdabb64     4  ldur x2, [x2, #31]
0x4cdabb68     8  ldur x2, [x2, #87]
0x4cdabb6c    12  ldr x16, pc+20 (addr 0x000000004cdabb80)    ;; code: CALL_IC, GENERIC
0x4cdabb70    16  br x16
0x4cdabb74    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdabb78    24  d63f03e0       constant
0x4cdabb7c    28  d503201f       constant
0x4cdabb80    32  4cdab900       constant
0x4cdabb84    36  00000000       constant


RelocInfo (size = 7)
0x4cdabb6c  code target (CALL_IC)  (0x4cdab900)
0x4cdabb74  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 168)
0x4cdacde0     0  ldur x4, [x1, #15]
0x4cdacde4     4  ldur w5, [x4, #11]
0x4cdacde8     8  tbnz w2, #0, #+0x20 (addr 0x4cdace08)
0x4cdacdec    12  asr x7, x2, #32
0x4cdacdf0    16  cmp w7, w5
0x4cdacdf4    20  b.hs #+0x3c (addr 0x4cdace30)
0x4cdacdf8    24  add x0, x4, #0xf (15)
0x4cdacdfc    28  ldr x1, [x0, w7, sxtw #3]
0x4cdace00    32  mov x0, x1
0x4cdace04    36  ret
0x4cdace08    40  ldur x16, [x2, #-1]
0x4cdace0c    44  ldr x17, [x26, #120]
0x4cdace10    48  cmp x16, x17
0x4cdace14    52  b.ne #+0x2c (addr 0x4cdace40)
0x4cdace18    56  ldur d29, [x2, #7]
0x4cdace1c    60  fcvtzs w7, d29
0x4cdace20    64  scvtf d0, w7
0x4cdace24    68  fcmp d29, d0
0x4cdace28    72  b.ne #+0x18 (addr 0x4cdace40)
0x4cdace2c    76  b #-0x3c (addr 0x4cdacdf0)
0x4cdace30    80  movz x16, #0x0
0x4cdace34    84  sub csp, jssp, #0x10 (16)
0x4cdace38    88  stp fp, lr, [jssp, #-16]!
0x4cdace3c    92  bl #+0x14 (addr 0x4cdace50)
0x4cdace40    96  movz x16, #0x8
0x4cdace44   100  sub csp, jssp, #0x10 (16)
0x4cdace48   104  stp fp, lr, [jssp, #-16]!
0x4cdace4c   108  bl #+0x4 (addr 0x4cdace50)
0x4cdace50   112  movz x17, #0xa00000000
0x4cdace54   116  sub csp, jssp, #0x10 (16)
0x4cdace58   120  stp x17, cp, [jssp, #-16]!
0x4cdace5c   124  add fp, jssp, #0x10 (16)
0x4cdace60   128  ldr x17, pc+24 (addr 0x000000004cdace78)    ;; lazy deoptimization bailout 0
0x4cdace64   132  add x17, x17, x16
0x4cdace68   136  br x17
0x4cdace6c   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdace70   144  d63f03e0       constant
0x4cdace74   148  d503201f       constant
0x4cdace78   152  4cb06000       constant
0x4cdace7c   156  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cdace60  runtime entry
0x4cdace6c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = LoadFastElementStub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 168)
0x4cdacde0     0  ldur x4, [x1, #15]
0x4cdacde4     4  ldur w5, [x4, #11]
0x4cdacde8     8  tbnz w2, #0, #+0x20 (addr 0x4cdace08)
0x4cdacdec    12  asr x7, x2, #32
0x4cdacdf0    16  cmp w7, w5
0x4cdacdf4    20  b.hs #+0x3c (addr 0x4cdace30)
0x4cdacdf8    24  add x0, x4, #0xf (15)
0x4cdacdfc    28  ldr x1, [x0, w7, sxtw #3]
0x4cdace00    32  mov x0, x1
0x4cdace04    36  ret
0x4cdace08    40  ldur x16, [x2, #-1]
0x4cdace0c    44  ldr x17, [x26, #120]
0x4cdace10    48  cmp x16, x17
0x4cdace14    52  b.ne #+0x2c (addr 0x4cdace40)
0x4cdace18    56  ldur d29, [x2, #7]
0x4cdace1c    60  fcvtzs w7, d29
0x4cdace20    64  scvtf d0, w7
0x4cdace24    68  fcmp d29, d0
0x4cdace28    72  b.ne #+0x18 (addr 0x4cdace40)
0x4cdace2c    76  b #-0x3c (addr 0x4cdacdf0)
0x4cdace30    80  movz x16, #0x0
0x4cdace34    84  sub csp, jssp, #0x10 (16)
0x4cdace38    88  stp fp, lr, [jssp, #-16]!
0x4cdace3c    92  bl #+0x14 (addr 0x4cdace50)
0x4cdace40    96  movz x16, #0x8
0x4cdace44   100  sub csp, jssp, #0x10 (16)
0x4cdace48   104  stp fp, lr, [jssp, #-16]!
0x4cdace4c   108  bl #+0x4 (addr 0x4cdace50)
0x4cdace50   112  movz x17, #0xa00000000
0x4cdace54   116  sub csp, jssp, #0x10 (16)
0x4cdace58   120  stp x17, cp, [jssp, #-16]!
0x4cdace5c   124  add fp, jssp, #0x10 (16)
0x4cdace60   128  ldr x17, pc+24 (addr 0x000000004cdace78)    ;; lazy deoptimization bailout 0
0x4cdace64   132  add x17, x17, x16
0x4cdace68   136  br x17
0x4cdace6c   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdace70   144  d63f03e0       constant
0x4cdace74   148  d503201f       constant
0x4cdace78   152  4cb06000       constant
0x4cdace7c   156  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cdace60  runtime entry
0x4cdace6c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = removeListener
compiler = unknown
Instructions (size = 144)
0x4cdade80     0  sub csp, jssp, #0x8 (8)
0x4cdade84     4  str x3, [jssp, #-8]!
0x4cdade88     8  sub csp, jssp, #0x8 (8)
0x4cdade8c    12  str x4, [jssp, #-8]!
0x4cdade90    16  ldr x5, pc+88 (addr 0x000000004cdadee8)    ;; object: 0x210ff459 WeakCell for 0x2a82caa9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdade94    20  ldur x5, [x5, #7]
0x4cdade98    24  tbz w5, #0, #+0x30 (addr 0x4cdadec8)
0x4cdade9c    28  ldursw x4, [x5, #15]
0x4cdadea0    32  tbnz w4, #23, #+0x28 (addr 0x4cdadec8)
0x4cdadea4    36  ldur x4, [x5, #47]
0x4cdadea8    40  ldur x4, [x4, #95]
0x4cdadeac    44  cmp x0, x4
0x4cdadeb0    48  b.ne #+0x18 (addr 0x4cdadec8)
0x4cdadeb4    52  ldr x4, [jssp], #8
0x4cdadeb8    56  ldr x3, [jssp], #8
0x4cdadebc    60  ldr x2, pc+52 (addr 0x000000004cdadef0)    ;; object: 0x210c3a59 <String[14]: removeListener>
0x4cdadec0    64  ldr x16, pc+56 (addr 0x000000004cdadef8)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0x4cdadec4    68  br x16
0x4cdadec8    72  ldr x2, pc+56 (addr 0x000000004cdadf00)    ;; object: 0x210c3a59 <String[14]: removeListener>
0x4cdadecc    76  ldr x4, [jssp], #8
0x4cdaded0    80  ldr x3, [jssp], #8
0x4cdaded4    84  ldr x16, pc+52 (addr 0x000000004cdadf08)    ;; code: BUILTIN
0x4cdaded8    88  br x16
0x4cdadedc    92  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0x4cdadee0    96  d63f03e0       constant
0x4cdadee4   100  d503201f       constant
0x4cdadee8   104  210ff459       constant
0x4cdadeec   108  00000000       constant
0x4cdadef0   112  210c3a59       constant
0x4cdadef4   116  00000000       constant
0x4cdadef8   120  4cd3cea0       constant
0x4cdadefc   124  00000000       constant
0x4cdadf00   128  210c3a59       constant
0x4cdadf04   132  00000000       constant
0x4cdadf08   136  4cd22420       constant
0x4cdadf0c   140  00000000       constant


RelocInfo (size = 11)
0x4cdade90  embedded object  (0x210ff459 WeakCell for 0x2a82caa9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdadebc  embedded object  (0x210c3a59 <String[14]: removeListener>)
0x4cdadec0  code target (HANDLER)  (0x4cd3cea0)
0x4cdadec8  embedded object  (0x210c3a59 <String[14]: removeListener>)
0x4cdaded4  code target (BUILTIN)  (0x4cd22420)
0x4cdadedc  constant pool (size 52)

kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = STRING*INTERNALIZED_STRING -> STRING
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 416)
0x4cdadf80     0  and x16, x0, x1
0x4cdadf84     4  tbz w16, #0, #+0xfc (addr 0x4cdae080)
0x4cdadf88     8  ldur x11, [x1, #-1]
0x4cdadf8c    12  ldur x10, [x0, #-1]
0x4cdadf90    16  ldrb w11, [x11, #11]
0x4cdadf94    20  ldrb w10, [x10, #11]
0x4cdadf98    24  orr x12, x11, x10
0x4cdadf9c    28  tbnz w12, #7, #+0xe4 (addr 0x4cdae080)
0x4cdadfa0    32  cmp x1, x0
0x4cdadfa4    36  b.ne #+0xc (addr 0x4cdadfb0)
0x4cdadfa8    40  movz x0, #0x0
0x4cdadfac    44  ret
0x4cdadfb0    48  orr x12, x11, x10
0x4cdadfb4    52  tbnz w12, #6, #+0x8 (addr 0x4cdadfbc)
0x4cdadfb8    56  ret
0x4cdadfbc    60  movz x16, #0x87
0x4cdadfc0    64  and x12, x11, x16
0x4cdadfc4    68  movz x16, #0x87
0x4cdadfc8    72  and x13, x10, x16
0x4cdadfcc    76  cmp x12, #0x4 (4)
0x4cdadfd0    80  ccmp x13, #4, #nzcv, eq
0x4cdadfd4    84  b.ne #+0x5c (addr 0x4cdae030)
0x4cdadfd8    88  ldur x10, [x1, #15]
0x4cdadfdc    92  ldur x11, [x0, #15]
0x4cdadfe0    96  cmp x10, x11
0x4cdadfe4   100  b.eq #+0xc (addr 0x4cdadff0)
0x4cdadfe8   104  movz x0, #0x100000000
0x4cdadfec   108  ret
0x4cdadff0   112  cbnz x10, #+0xc (addr 0x4cdadffc)
0x4cdadff4   116  movz x0, #0x0
0x4cdadff8   120  ret
0x4cdadffc   124  asr x10, x10, #32
0x4cdae000   128  add x11, x10, #0x17 (23)
0x4cdae004   132  add x1, x1, x11
0x4cdae008   136  add x0, x0, x11
0x4cdae00c   140  neg x10, x10
0x4cdae010   144  ldrb w11, [x1, x10]
0x4cdae014   148  ldrb w12, [x0, x10]
0x4cdae018   152  cmp x11, x12
0x4cdae01c   156  b.ne #-0x34 (addr 0x4cdadfe8)
0x4cdae020   160  add x10, x10, #0x1 (1)
0x4cdae024   164  cbnz x10, #-0x14 (addr 0x4cdae010)
0x4cdae028   168  movz x0, #0x0
0x4cdae02c   172  ret
0x4cdae030   176  movz x16, #0xc00000000
0x4cdae034   180  sub csp, jssp, #0x10 (16)
0x4cdae038   184  stp fp, lr, [jssp, #-16]!
0x4cdae03c   188  sub csp, jssp, #0x10 (16)
0x4cdae040   192  str x16, [jssp, #-8]!
0x4cdae044   196  ldr x17, pc+172 (addr 0x000000004cdae0f0)    ;; object: 0x4cdadf21 <Code: COMPARE_IC>
0x4cdae048   200  sub csp, jssp, #0x10 (16)
0x4cdae04c   204  str x17, [jssp, #-8]!
0x4cdae050   208  add fp, jssp, #0x10 (16)
0x4cdae054   212  sub csp, jssp, #0x10 (16)
0x4cdae058   216  stp x0, x1, [jssp, #-16]!
0x4cdae05c   220  movz x0, #0x2
0x4cdae060   224  ldr x1, pc+152 (addr 0x000000004cdae0f8)    ;; external reference (Runtime::StringEqual)
0x4cdae064   228  ldr x16, pc+156 (addr 0x000000004cdae100)    ;; code: STUB, CEntryStub, minor: 4
0x4cdae068   232  blr x16
0x4cdae06c   236  mov jssp, fp
0x4cdae070   240  ldp fp, lr, [jssp], #16
0x4cdae074   244  ldr x1, [x26, #64]
0x4cdae078   248  sub x0, x0, x1
0x4cdae07c   252  ret
0x4cdae080   256  movz x16, #0xc00000000
0x4cdae084   260  sub csp, jssp, #0x10 (16)
0x4cdae088   264  stp fp, lr, [jssp, #-16]!
0x4cdae08c   268  sub csp, jssp, #0x10 (16)
0x4cdae090   272  str x16, [jssp, #-8]!
0x4cdae094   276  ldr x17, pc+116 (addr 0x000000004cdae108)    ;; object: 0x4cdadf21 <Code: COMPARE_IC>
0x4cdae098   280  sub csp, jssp, #0x10 (16)
0x4cdae09c   284  str x17, [jssp, #-8]!
0x4cdae0a0   288  add fp, jssp, #0x10 (16)
0x4cdae0a4   292  sub csp, jssp, #0x18 (24)
0x4cdae0a8   296  stp lr, x0, [jssp, #-24]!
0x4cdae0ac   300  str x1, [jssp, #16]
0x4cdae0b0   304  movz x10, #0x2f00000000
0x4cdae0b4   308  sub csp, jssp, #0x18 (24)
0x4cdae0b8   312  stp x10, x0, [jssp, #-24]!
0x4cdae0bc   316  str x1, [jssp, #16]
0x4cdae0c0   320  movz x0, #0x3
0x4cdae0c4   324  ldr x1, pc+76 (addr 0x000000004cdae110)    ;; external reference (Runtime::CompareIC_Miss)
0x4cdae0c8   328  ldr x16, pc+80 (addr 0x000000004cdae118)    ;; code: STUB, CEntryStub, minor: 4
0x4cdae0cc   332  blr x16
0x4cdae0d0   336  add x11, x0, #0x5f (95)
0x4cdae0d4   340  ldr x1, [jssp, #16]
0x4cdae0d8   344  ldp lr, x0, [jssp], #24
0x4cdae0dc   348  mov jssp, fp
0x4cdae0e0   352  ldp fp, lr, [jssp], #16
0x4cdae0e4   356  br x11
0x4cdae0e8   360  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdae0ec   364  d63f03e0       constant
0x4cdae0f0   368  4cdadf21       constant
0x4cdae0f4   372  00000000       constant
0x4cdae0f8   376  00ed0748       constant
0x4cdae0fc   380  00000000       constant
0x4cdae100   384  4cd06060       constant
0x4cdae104   388  00000000       constant
0x4cdae108   392  4cdadf21       constant
0x4cdae10c   396  00000000       constant
0x4cdae110   400  00c8a980       constant
0x4cdae114   404  00000000       constant
0x4cdae118   408  4cd06060       constant
0x4cdae11c   412  00000000       constant


RelocInfo (size = 16)
0x4cdae044  embedded object  (0x4cdadf21 <Code: COMPARE_IC>)
0x4cdae060  external reference (Runtime::StringEqual)  (0xed0748)
0x4cdae064  code target (STUB)  (0x4cd06060)
0x4cdae094  embedded object  (0x4cdadf21 <Code: COMPARE_IC>)
0x4cdae0c4  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cdae0c8  code target (STUB)  (0x4cd06060)
0x4cdae0e8  constant pool (size 56)


kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 262146
name = CallICStub(args(2), NULL_OR_UNDEFINED, 
compiler = unknown
Instructions (size = 488)
0x4cdae180     0  add x4, x2, x3, asr #29
0x4cdae184     4  ldur x4, [x4, #15]
0x4cdae188     8  ldur x5, [x4, #7]
0x4cdae18c    12  cmp x5, x1
0x4cdae190    16  b.ne #+0x2c (addr 0x4cdae1bc)
0x4cdae194    20  tbz w1, #0, #+0x28 (addr 0x4cdae1bc)
0x4cdae198    24  add x2, x2, x3, asr #29
0x4cdae19c    28  add x2, x2, #0x18 (24)
0x4cdae1a0    32  ldur x3, [x2, #-1]
0x4cdae1a4    36  movz x16, #0x200000000
0x4cdae1a8    40  add x3, x3, x16
0x4cdae1ac    44  stur x3, [x2, #-1]
0x4cdae1b0    48  movz x0, #0x2
0x4cdae1b4    52  ldr x16, pc+372 (addr 0x000000004cdae328)    ;; code: BUILTIN
0x4cdae1b8    56  br x16
0x4cdae1bc    60  ldr x16, [x26, #2400]
0x4cdae1c0    64  cmp x4, x16
0x4cdae1c4    68  b.eq #+0x78 (addr 0x4cdae23c)
0x4cdae1c8    72  ldur x5, [x4, #-1]
0x4cdae1cc    76  ldr x16, [x26, #2736]
0x4cdae1d0    80  cmp x5, x16
0x4cdae1d4    84  b.ne #+0x40 (addr 0x4cdae214)
0x4cdae1d8    88  ldur x5, [cp, #39]
0x4cdae1dc    92  ldur x5, [x5, #95]
0x4cdae1e0    96  cmp x1, x5
0x4cdae1e4   100  b.ne #+0xec (addr 0x4cdae2d0)
0x4cdae1e8   104  movz x0, #0x2
0x4cdae1ec   108  add x2, x2, x3, asr #29
0x4cdae1f0   112  add x2, x2, #0x18 (24)
0x4cdae1f4   116  ldur x3, [x2, #-1]
0x4cdae1f8   120  movz x16, #0x200000000
0x4cdae1fc   124  add x3, x3, x16
0x4cdae200   128  stur x3, [x2, #-1]
0x4cdae204   132  mov x2, x4
0x4cdae208   136  mov x3, x1
0x4cdae20c   140  ldr x16, pc+292 (addr 0x000000004cdae330)    ;; code: STUB, ArrayConstructorStub, minor: 3
0x4cdae210   144  br x16
0x4cdae214   148  ldr x16, [x26, #2568]
0x4cdae218   152  cmp x4, x16
0x4cdae21c   156  b.eq #+0xb4 (addr 0x4cdae2d0)
0x4cdae220   160  ldur x5, [x4, #-1]
0x4cdae224   164  ldrb w5, [x5, #11]
0x4cdae228   168  cmp x5, #0xc9 (201)
0x4cdae22c   172  b.ne #+0xa4 (addr 0x4cdae2d0)
0x4cdae230   176  add x4, x2, x3, asr #29
0x4cdae234   180  ldr x5, [x26, #2400]
0x4cdae238   184  stur x5, [x4, #15]
0x4cdae23c   188  movz x0, #0x2
0x4cdae240   192  ldr x16, pc+248 (addr 0x000000004cdae338)    ;; code: BUILTIN
0x4cdae244   196  br x16
0x4cdae248   200  tbz w1, #0, #+0x88 (addr 0x4cdae2d0)
0x4cdae24c   204  ldur x5, [x1, #-1]
0x4cdae250   208  ldrb w5, [x5, #11]
0x4cdae254   212  cmp x5, #0xc9 (201)
0x4cdae258   216  b.ne #+0x78 (addr 0x4cdae2d0)
0x4cdae25c   220  ldur x5, [cp, #39]
0x4cdae260   224  ldur x5, [x5, #95]
0x4cdae264   228  cmp x1, x5
0x4cdae268   232  b.eq #+0x68 (addr 0x4cdae2d0)
0x4cdae26c   236  ldur x4, [x1, #39]
0x4cdae270   240  ldur x4, [x4, #39]
0x4cdae274   244  ldur x5, [cp, #39]
0x4cdae278   248  cmp x4, x5
0x4cdae27c   252  b.ne #+0x54 (addr 0x4cdae2d0)
0x4cdae280   256  movz x5, #0x200000000
0x4cdae284   260  adds x4, x2, x3, asr #29
0x4cdae288   264  stur x5, [x4, #23]
0x4cdae28c   268  movz x16, #0xc00000000
0x4cdae290   272  sub csp, jssp, #0x10 (16)
0x4cdae294   276  stp fp, lr, [jssp, #-16]!
0x4cdae298   280  sub csp, jssp, #0x10 (16)
0x4cdae29c   284  str x16, [jssp, #-8]!
0x4cdae2a0   288  ldr x17, pc+160 (addr 0x000000004cdae340)    ;; object: 0x4cdae121 <Code: CALL_IC>
0x4cdae2a4   292  sub csp, jssp, #0x10 (16)
0x4cdae2a8   296  str x17, [jssp, #-8]!
0x4cdae2ac   300  add fp, jssp, #0x10 (16)
0x4cdae2b0   304  sub csp, jssp, #0x8 (8)
0x4cdae2b4   308  str x1, [jssp, #-8]!
0x4cdae2b8   312  ldr x16, pc+144 (addr 0x000000004cdae348)    ;; code: STUB, CreateWeakCellStub, minor: 0
0x4cdae2bc   316  blr x16
0x4cdae2c0   320  ldr x1, [jssp], #8
0x4cdae2c4   324  mov jssp, fp
0x4cdae2c8   328  ldp fp, lr, [jssp], #16
0x4cdae2cc   332  b #-0x11c (addr 0x4cdae1b0)
0x4cdae2d0   336  movz x16, #0xc00000000
0x4cdae2d4   340  sub csp, jssp, #0x10 (16)
0x4cdae2d8   344  stp fp, lr, [jssp, #-16]!
0x4cdae2dc   348  sub csp, jssp, #0x10 (16)
0x4cdae2e0   352  str x16, [jssp, #-8]!
0x4cdae2e4   356  ldr x17, pc+108 (addr 0x000000004cdae350)    ;; object: 0x4cdae121 <Code: CALL_IC>
0x4cdae2e8   360  sub csp, jssp, #0x10 (16)
0x4cdae2ec   364  str x17, [jssp, #-8]!
0x4cdae2f0   368  add fp, jssp, #0x10 (16)
0x4cdae2f4   372  sub csp, jssp, #0x18 (24)
0x4cdae2f8   376  stp x3, x2, [jssp, #-24]!
0x4cdae2fc   380  str x1, [jssp, #16]
0x4cdae300   384  movz x0, #0x3
0x4cdae304   388  ldr x1, pc+84 (addr 0x000000004cdae358)    ;; external reference (Runtime::CallIC_Miss)
0x4cdae308   392  ldr x16, pc+88 (addr 0x000000004cdae360)    ;; code: STUB, CEntryStub, minor: 4
0x4cdae30c   396  blr x16
0x4cdae310   400  mov x1, x0
0x4cdae314   404  mov jssp, fp
0x4cdae318   408  ldp fp, lr, [jssp], #16
0x4cdae31c   412  b #-0xe0 (addr 0x4cdae23c)
0x4cdae320   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4cdae324   420  d63f03e0       constant
0x4cdae328   424  4cd1e280       constant
0x4cdae32c   428  00000000       constant
0x4cdae330   432  4cd33b00       constant
0x4cdae334   436  00000000       constant
0x4cdae338   440  4cd1f560       constant
0x4cdae33c   444  00000000       constant
0x4cdae340   448  4cdae121       constant
0x4cdae344   452  00000000       constant
0x4cdae348   456  4cd0ddc0       constant
0x4cdae34c   460  00000000       constant
0x4cdae350   464  4cdae121       constant
0x4cdae354   468  00000000       constant
0x4cdae358   472  00c86928       constant
0x4cdae35c   476  00000000       constant
0x4cdae360   480  4cd06060       constant
0x4cdae364   484  00000000       constant


RelocInfo (size = 19)
0x4cdae1b4  code target (BUILTIN)  (0x4cd1e280)
0x4cdae20c  code target (STUB)  (0x4cd33b00)
0x4cdae240  code target (BUILTIN)  (0x4cd1f560)
0x4cdae2a0  embedded object  (0x4cdae121 <Code: CALL_IC>)
0x4cdae2b8  code target (STUB)  (0x4cd0ddc0)
0x4cdae2e4  embedded object  (0x4cdae121 <Code: CALL_IC>)
0x4cdae304  external reference (Runtime::CallIC_Miss)  (0xc86928)
0x4cdae308  code target (STUB)  (0x4cd06060)
0x4cdae320  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 262146
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0x4cdae3e0     0  ldur x2, [fp, #-16]
0x4cdae3e4     4  ldur x2, [x2, #31]
0x4cdae3e8     8  ldur x2, [x2, #87]
0x4cdae3ec    12  ldr x16, pc+20 (addr 0x000000004cdae400)    ;; code: CALL_IC, GENERIC
0x4cdae3f0    16  br x16
0x4cdae3f4    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdae3f8    24  d63f03e0       constant
0x4cdae3fc    28  d503201f       constant
0x4cdae400    32  4cdae180       constant
0x4cdae404    36  00000000       constant


RelocInfo (size = 7)
0x4cdae3ec  code target (CALL_IC)  (0x4cdae180)
0x4cdae3f4  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cdaed80     0  tbz w0, #0, #+0x98 (addr 0x4cdaee18)
0x4cdaed84     4  mov x2, x0
0x4cdaed88     8  ldur x4, [x1, #7]
0x4cdaed8c    12  stur x2, [x4, #79]
0x4cdaed90    16  add x3, x4, #0x4f (79)
0x4cdaed94    20  and x2, x2, #0xfffffffffff00000
0x4cdaed98    24  ldr x2, [x2, #8]
0x4cdaed9c    28  tbz w2, #1, #+0x24 (addr 0x4cdaedc0)
0x4cdaeda0    32  and x2, x4, #0xfffffffffff00000
0x4cdaeda4    36  ldr x2, [x2, #8]
0x4cdaeda8    40  tbz w2, #2, #+0x18 (addr 0x4cdaedc0)
0x4cdaedac    44  sub csp, jssp, #0x8 (8)
0x4cdaedb0    48  str lr, [jssp, #-8]!
0x4cdaedb4    52  ldr x16, pc+84 (addr 0x000000004cdaee08)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdaedb8    56  blr x16
0x4cdaedbc    60  ldr lr, [jssp], #8
0x4cdaedc0    64  stur x5, [x1, #-1]
0x4cdaedc4    68  tbz w5, #0, #+0x34 (addr 0x4cdaedf8)
0x4cdaedc8    72  sub x2, x1, #0x1 (1)
0x4cdaedcc    76  and x5, x5, #0xfffffffffff00000
0x4cdaedd0    80  ldr x5, [x5, #8]
0x4cdaedd4    84  tbz w5, #1, #+0x24 (addr 0x4cdaedf8)
0x4cdaedd8    88  and x5, x1, #0xfffffffffff00000
0x4cdaeddc    92  ldr x5, [x5, #8]
0x4cdaede0    96  tbz w5, #2, #+0x18 (addr 0x4cdaedf8)
0x4cdaede4   100  sub csp, jssp, #0x8 (8)
0x4cdaede8   104  str lr, [jssp, #-8]!
0x4cdaedec   108  ldr x16, pc+36 (addr 0x000000004cdaee10)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdaedf0   112  blr x16
0x4cdaedf4   116  ldr lr, [jssp], #8
0x4cdaedf8   120  ret
0x4cdaedfc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cdaee00   128  d63f03e0       constant
0x4cdaee04   132  d503201f       constant
0x4cdaee08   136  4cd378a0       constant
0x4cdaee0c   140  00000000       constant
0x4cdaee10   144  4cd38080       constant
0x4cdaee14   148  00000000       constant
0x4cdaee18   152  movz x16, #0x0
0x4cdaee1c   156  sub csp, jssp, #0x10 (16)
0x4cdaee20   160  stp fp, lr, [jssp, #-16]!
0x4cdaee24   164  bl #+0x4 (addr 0x4cdaee28)
0x4cdaee28   168  movz x17, #0xa00000000
0x4cdaee2c   172  sub csp, jssp, #0x10 (16)
0x4cdaee30   176  stp x17, cp, [jssp, #-16]!
0x4cdaee34   180  add fp, jssp, #0x10 (16)
0x4cdaee38   184  ldr x17, pc+24 (addr 0x000000004cdaee50)    ;; lazy deoptimization bailout 0
0x4cdaee3c   188  add x17, x17, x16
0x4cdaee40   192  br x17
0x4cdaee44   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdaee48   200  d63f03e0       constant
0x4cdaee4c   204  d503201f       constant
0x4cdaee50   208  4cb06000       constant
0x4cdaee54   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdaedb4  code target (STUB)  (0x4cd378a0)
0x4cdaedec  code target (STUB)  (0x4cd38080)
0x4cdaedfc  constant pool (size 28)
0x4cdaee38  runtime entry
0x4cdaee44  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cdaed80     0  tbz w0, #0, #+0x98 (addr 0x4cdaee18)
0x4cdaed84     4  mov x2, x0
0x4cdaed88     8  ldur x4, [x1, #7]
0x4cdaed8c    12  stur x2, [x4, #79]
0x4cdaed90    16  add x3, x4, #0x4f (79)
0x4cdaed94    20  and x2, x2, #0xfffffffffff00000
0x4cdaed98    24  ldr x2, [x2, #8]
0x4cdaed9c    28  tbz w2, #1, #+0x24 (addr 0x4cdaedc0)
0x4cdaeda0    32  and x2, x4, #0xfffffffffff00000
0x4cdaeda4    36  ldr x2, [x2, #8]
0x4cdaeda8    40  tbz w2, #2, #+0x18 (addr 0x4cdaedc0)
0x4cdaedac    44  sub csp, jssp, #0x8 (8)
0x4cdaedb0    48  str lr, [jssp, #-8]!
0x4cdaedb4    52  ldr x16, pc+84 (addr 0x000000004cdaee08)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdaedb8    56  blr x16
0x4cdaedbc    60  ldr lr, [jssp], #8
0x4cdaedc0    64  stur x5, [x1, #-1]
0x4cdaedc4    68  tbz w5, #0, #+0x34 (addr 0x4cdaedf8)
0x4cdaedc8    72  sub x2, x1, #0x1 (1)
0x4cdaedcc    76  and x5, x5, #0xfffffffffff00000
0x4cdaedd0    80  ldr x5, [x5, #8]
0x4cdaedd4    84  tbz w5, #1, #+0x24 (addr 0x4cdaedf8)
0x4cdaedd8    88  and x5, x1, #0xfffffffffff00000
0x4cdaeddc    92  ldr x5, [x5, #8]
0x4cdaede0    96  tbz w5, #2, #+0x18 (addr 0x4cdaedf8)
0x4cdaede4   100  sub csp, jssp, #0x8 (8)
0x4cdaede8   104  str lr, [jssp, #-8]!
0x4cdaedec   108  ldr x16, pc+36 (addr 0x000000004cdaee10)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdaedf0   112  blr x16
0x4cdaedf4   116  ldr lr, [jssp], #8
0x4cdaedf8   120  ret
0x4cdaedfc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cdaee00   128  d63f03e0       constant
0x4cdaee04   132  d503201f       constant
0x4cdaee08   136  4cd378a0       constant
0x4cdaee0c   140  00000000       constant
0x4cdaee10   144  4cd38080       constant
0x4cdaee14   148  00000000       constant
0x4cdaee18   152  movz x16, #0x0
0x4cdaee1c   156  sub csp, jssp, #0x10 (16)
0x4cdaee20   160  stp fp, lr, [jssp, #-16]!
0x4cdaee24   164  bl #+0x4 (addr 0x4cdaee28)
0x4cdaee28   168  movz x17, #0xa00000000
0x4cdaee2c   172  sub csp, jssp, #0x10 (16)
0x4cdaee30   176  stp x17, cp, [jssp, #-16]!
0x4cdaee34   180  add fp, jssp, #0x10 (16)
0x4cdaee38   184  ldr x17, pc+24 (addr 0x000000004cdaee50)    ;; lazy deoptimization bailout 0
0x4cdaee3c   188  add x17, x17, x16
0x4cdaee40   192  br x17
0x4cdaee44   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdaee48   200  d63f03e0       constant
0x4cdaee4c   204  d503201f       constant
0x4cdaee50   208  4cb06000       constant
0x4cdaee54   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdaedb4  code target (STUB)  (0x4cd378a0)
0x4cdaedec  code target (STUB)  (0x4cd38080)
0x4cdaedfc  constant pool (size 28)
0x4cdaee38  runtime entry
0x4cdaee44  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = path
compiler = unknown
Instructions (size = 184)
0x4cdaeec0     0  sub csp, jssp, #0x8 (8)
0x4cdaeec4     4  str x3, [jssp, #-8]!
0x4cdaeec8     8  sub csp, jssp, #0x8 (8)
0x4cdaeecc    12  str x4, [jssp, #-8]!
0x4cdaeed0    16  ldr x3, pc+112 (addr 0x000000004cdaef40)    ;; object: 0x21063e59 Cell for 0
0x4cdaeed4    20  ldur x3, [x3, #7]
0x4cdaeed8    24  cmp x3, #0x0 (0)
0x4cdaeedc    28  b.ne #+0x44 (addr 0x4cdaef20)
0x4cdaeee0    32  tbz w0, #0, #+0x40 (addr 0x4cdaef20)
0x4cdaeee4    36  ldur x3, [x0, #-1]
0x4cdaeee8    40  ldr x4, pc+96 (addr 0x000000004cdaef48)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdaeeec    44  ldur x4, [x4, #7]
0x4cdaeef0    48  cmp x3, x4
0x4cdaeef4    52  b.ne #+0x2c (addr 0x4cdaef20)
0x4cdaeef8    56  ldr x5, pc+88 (addr 0x000000004cdaef50)    ;; object: 0x210ffb89 WeakCell for 0x2a82cbb1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdaeefc    60  ldur x5, [x5, #7]
0x4cdaef00    64  tbz w5, #0, #+0x20 (addr 0x4cdaef20)
0x4cdaef04    68  ldursw x4, [x5, #15]
0x4cdaef08    72  tbnz w4, #23, #+0x18 (addr 0x4cdaef20)
0x4cdaef0c    76  ldr x4, [jssp], #8
0x4cdaef10    80  ldr x3, [jssp], #8
0x4cdaef14    84  ldr x2, pc+68 (addr 0x000000004cdaef58)    ;; object: 0x210b2e69 <String[4]: path>
0x4cdaef18    88  ldr x16, pc+72 (addr 0x000000004cdaef60)    ;; code: HANDLER, StoreTransitionStub, minor: 196618
0x4cdaef1c    92  br x16
0x4cdaef20    96  ldr x2, pc+72 (addr 0x000000004cdaef68)    ;; object: 0x210b2e69 <String[4]: path>
0x4cdaef24   100  ldr x4, [jssp], #8
0x4cdaef28   104  ldr x3, [jssp], #8
0x4cdaef2c   108  ldr x16, pc+68 (addr 0x000000004cdaef70)    ;; code: BUILTIN
0x4cdaef30   112  br x16
0x4cdaef34   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdaef38   120  d63f03e0       constant
0x4cdaef3c   124  d503201f       constant
0x4cdaef40   128  21063e59       constant
0x4cdaef44   132  00000000       constant
0x4cdaef48   136  210c22b1       constant
0x4cdaef4c   140  00000000       constant
0x4cdaef50   144  210ffb89       constant
0x4cdaef54   148  00000000       constant
0x4cdaef58   152  210b2e69       constant
0x4cdaef5c   156  00000000       constant
0x4cdaef60   160  4cdaed80       constant
0x4cdaef64   164  00000000       constant
0x4cdaef68   168  210b2e69       constant
0x4cdaef6c   172  00000000       constant
0x4cdaef70   176  4cd22420       constant
0x4cdaef74   180  00000000       constant


RelocInfo (size = 13)
0x4cdaeed0  embedded object  (0x21063e59 Cell for 0)
0x4cdaeee8  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdaeef8  embedded object  (0x210ffb89 WeakCell for 0x2a82cbb1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdaef14  embedded object  (0x210b2e69 <String[4]: path>)
0x4cdaef18  code target (HANDLER)  (0x4cdaed80)
0x4cdaef20  embedded object  (0x210b2e69 <String[4]: path>)
0x4cdaef2c  code target (BUILTIN)  (0x4cd22420)
0x4cdaef34  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = charCodeAt
compiler = unknown
Instructions (size = 152)
0x4cdb0e00     0  sub csp, jssp, #0x8 (8)
0x4cdb0e04     4  str x3, [jssp, #-8]!
0x4cdb0e08     8  sub csp, jssp, #0x8 (8)
0x4cdb0e0c    12  str x0, [jssp, #-8]!
0x4cdb0e10    16  ldur x3, [cp, #39]
0x4cdb0e14    20  movz x16, #0x2e7
0x4cdb0e18    24  ldr x3, [x3, x16]
0x4cdb0e1c    28  ldur x3, [x3, #23]
0x4cdb0e20    32  ldur x3, [x3, #23]
0x4cdb0e24    36  ldr x0, pc+84 (addr 0x000000004cdb0e78)    ;; object: 0x21063e59 Cell for 0
0x4cdb0e28    40  ldur x0, [x0, #7]
0x4cdb0e2c    44  cmp x0, #0x0 (0)
0x4cdb0e30    48  b.ne #+0x1c (addr 0x4cdb0e4c)
0x4cdb0e34    52  ldur x0, [x3, #-1]
0x4cdb0e38    56  ldr x4, pc+72 (addr 0x000000004cdb0e80)    ;; object: 0xffffaa106e39 WeakCell for 0x2a8156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>
0x4cdb0e3c    60  ldur x4, [x4, #7]
0x4cdb0e40    64  cmp x0, x4
0x4cdb0e44    68  b.ne #+0x8 (addr 0x4cdb0e4c)
0x4cdb0e48    72  b #+0x14 (addr 0x4cdb0e5c)
0x4cdb0e4c    76  ldr x0, [jssp], #8
0x4cdb0e50    80  ldr x3, [jssp], #8
0x4cdb0e54    84  ldr x16, pc+52 (addr 0x000000004cdb0e88)    ;; code: BUILTIN
0x4cdb0e58    88  br x16
0x4cdb0e5c    92  add jssp, jssp, #0x10 (16)
0x4cdb0e60    96  mov x1, x3
0x4cdb0e64   100  ldr x16, pc+44 (addr 0x000000004cdb0e90)    ;; code: HANDLER, LoadConstantStub, minor: 5
0x4cdb0e68   104  br x16
0x4cdb0e6c   108  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0x4cdb0e70   112  d63f03e0       constant
0x4cdb0e74   116  d503201f       constant
0x4cdb0e78   120  21063e59       constant
0x4cdb0e7c   124  00000000       constant
0x4cdb0e80   128  aa106e39       constant
0x4cdb0e84   132  0000ffff       constant
0x4cdb0e88   136  4cd222e0       constant
0x4cdb0e8c   140  00000000       constant
0x4cdb0e90   144  4cd43500       constant
0x4cdb0e94   148  00000000       constant


RelocInfo (size = 10)
0x4cdb0e24  embedded object  (0x21063e59 Cell for 0)
0x4cdb0e38  embedded object  (0xffffaa106e39 WeakCell for 0x2a8156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>)
0x4cdb0e54  code target (BUILTIN)  (0x4cd222e0)
0x4cdb0e64  code target (HANDLER)  (0x4cd43500)
0x4cdb0e6c  constant pool (size 44)

kind = COMPARE_IC
major_key = CompareICStub
ic_state = UNINITIALIZED
extra_ic_state = 0
compare_state = UNINITIALIZED*UNINITIALIZED -> UNINITIALIZED
compare_operation = LTE
name = CompareICStub
compiler = unknown
Instructions (size = 136)
0x4cdb0f00     0  movz x16, #0xc00000000
0x4cdb0f04     4  sub csp, jssp, #0x10 (16)
0x4cdb0f08     8  stp fp, lr, [jssp, #-16]!
0x4cdb0f0c    12  sub csp, jssp, #0x10 (16)
0x4cdb0f10    16  str x16, [jssp, #-8]!
0x4cdb0f14    20  ldr x17, pc+92 (addr 0x000000004cdb0f70)    ;; object: 0x4cdb0ea1 <Code: COMPARE_IC>
0x4cdb0f18    24  sub csp, jssp, #0x10 (16)
0x4cdb0f1c    28  str x17, [jssp, #-8]!
0x4cdb0f20    32  add fp, jssp, #0x10 (16)
0x4cdb0f24    36  sub csp, jssp, #0x18 (24)
0x4cdb0f28    40  stp lr, x0, [jssp, #-24]!
0x4cdb0f2c    44  str x1, [jssp, #16]
0x4cdb0f30    48  movz x10, #0x3300000000
0x4cdb0f34    52  sub csp, jssp, #0x18 (24)
0x4cdb0f38    56  stp x10, x0, [jssp, #-24]!
0x4cdb0f3c    60  str x1, [jssp, #16]
0x4cdb0f40    64  movz x0, #0x3
0x4cdb0f44    68  ldr x1, pc+52 (addr 0x000000004cdb0f78)    ;; external reference (Runtime::CompareIC_Miss)
0x4cdb0f48    72  ldr x16, pc+56 (addr 0x000000004cdb0f80)    ;; code: STUB, CEntryStub, minor: 4
0x4cdb0f4c    76  blr x16
0x4cdb0f50    80  add x11, x0, #0x5f (95)
0x4cdb0f54    84  ldr x1, [jssp, #16]
0x4cdb0f58    88  ldp lr, x0, [jssp], #24
0x4cdb0f5c    92  mov jssp, fp
0x4cdb0f60    96  ldp fp, lr, [jssp], #16
0x4cdb0f64   100  br x11
0x4cdb0f68   104  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cdb0f6c   108  d63f03e0       constant
0x4cdb0f70   112  4cdb0ea1       constant
0x4cdb0f74   116  00000000       constant
0x4cdb0f78   120  00c8a980       constant
0x4cdb0f7c   124  00000000       constant
0x4cdb0f80   128  4cd06060       constant
0x4cdb0f84   132  00000000       constant


RelocInfo (size = 10)
0x4cdb0f14  embedded object  (0x4cdb0ea1 <Code: COMPARE_IC>)
0x4cdb0f44  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cdb0f48  code target (STUB)  (0x4cd06060)
0x4cdb0f68  constant pool (size 32)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = SMI*SMI -> SMI
compare_operation = LTE
name = CompareICStub
compiler = unknown
Instructions (size = 160)
0x4cdb2220     0  orr x16, x0, x1
0x4cdb2224     4  tbnz w16, #0, #+0x10 (addr 0x4cdb2234)
0x4cdb2228     8  asr x1, x1, #32
0x4cdb222c    12  sub x0, x1, x0, asr #32
0x4cdb2230    16  ret
0x4cdb2234    20  movz x16, #0xc00000000
0x4cdb2238    24  sub csp, jssp, #0x10 (16)
0x4cdb223c    28  stp fp, lr, [jssp, #-16]!
0x4cdb2240    32  sub csp, jssp, #0x10 (16)
0x4cdb2244    36  str x16, [jssp, #-8]!
0x4cdb2248    40  ldr x17, pc+96 (addr 0x000000004cdb22a8)    ;; object: 0x4cdb21c1 <Code: COMPARE_IC>
0x4cdb224c    44  sub csp, jssp, #0x10 (16)
0x4cdb2250    48  str x17, [jssp, #-8]!
0x4cdb2254    52  add fp, jssp, #0x10 (16)
0x4cdb2258    56  sub csp, jssp, #0x18 (24)
0x4cdb225c    60  stp lr, x0, [jssp, #-24]!
0x4cdb2260    64  str x1, [jssp, #16]
0x4cdb2264    68  movz x10, #0x3300000000
0x4cdb2268    72  sub csp, jssp, #0x18 (24)
0x4cdb226c    76  stp x10, x0, [jssp, #-24]!
0x4cdb2270    80  str x1, [jssp, #16]
0x4cdb2274    84  movz x0, #0x3
0x4cdb2278    88  ldr x1, pc+56 (addr 0x000000004cdb22b0)    ;; external reference (Runtime::CompareIC_Miss)
0x4cdb227c    92  ldr x16, pc+60 (addr 0x000000004cdb22b8)    ;; code: STUB, CEntryStub, minor: 4
0x4cdb2280    96  blr x16
0x4cdb2284   100  add x11, x0, #0x5f (95)
0x4cdb2288   104  ldr x1, [jssp, #16]
0x4cdb228c   108  ldp lr, x0, [jssp], #24
0x4cdb2290   112  mov jssp, fp
0x4cdb2294   116  ldp fp, lr, [jssp], #16
0x4cdb2298   120  br x11
0x4cdb229c   124  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cdb22a0   128  d63f03e0       constant
0x4cdb22a4   132  d503201f       constant
0x4cdb22a8   136  4cdb21c1       constant
0x4cdb22ac   140  00000000       constant
0x4cdb22b0   144  00c8a980       constant
0x4cdb22b4   148  00000000       constant
0x4cdb22b8   152  4cd06060       constant
0x4cdb22bc   156  00000000       constant


RelocInfo (size = 10)
0x4cdb2248  embedded object  (0x4cdb21c1 <Code: COMPARE_IC>)
0x4cdb2278  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cdb227c  code target (STUB)  (0x4cd06060)
0x4cdb229c  constant pool (size 36)


kind = HANDLER
major_key = <NoCache>Stub
name = slice
compiler = unknown
Instructions (size = 152)
0x4cdb29a0     0  sub csp, jssp, #0x8 (8)
0x4cdb29a4     4  str x3, [jssp, #-8]!
0x4cdb29a8     8  sub csp, jssp, #0x8 (8)
0x4cdb29ac    12  str x0, [jssp, #-8]!
0x4cdb29b0    16  ldur x3, [cp, #39]
0x4cdb29b4    20  movz x16, #0x2e7
0x4cdb29b8    24  ldr x3, [x3, x16]
0x4cdb29bc    28  ldur x3, [x3, #23]
0x4cdb29c0    32  ldur x3, [x3, #23]
0x4cdb29c4    36  ldr x0, pc+84 (addr 0x000000004cdb2a18)    ;; object: 0x21063e59 Cell for 0
0x4cdb29c8    40  ldur x0, [x0, #7]
0x4cdb29cc    44  cmp x0, #0x0 (0)
0x4cdb29d0    48  b.ne #+0x1c (addr 0x4cdb29ec)
0x4cdb29d4    52  ldur x0, [x3, #-1]
0x4cdb29d8    56  ldr x4, pc+72 (addr 0x000000004cdb2a20)    ;; object: 0xffffaa106e39 WeakCell for 0x2a8156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>
0x4cdb29dc    60  ldur x4, [x4, #7]
0x4cdb29e0    64  cmp x0, x4
0x4cdb29e4    68  b.ne #+0x8 (addr 0x4cdb29ec)
0x4cdb29e8    72  b #+0x14 (addr 0x4cdb29fc)
0x4cdb29ec    76  ldr x0, [jssp], #8
0x4cdb29f0    80  ldr x3, [jssp], #8
0x4cdb29f4    84  ldr x16, pc+52 (addr 0x000000004cdb2a28)    ;; code: BUILTIN
0x4cdb29f8    88  br x16
0x4cdb29fc    92  add jssp, jssp, #0x10 (16)
0x4cdb2a00    96  mov x1, x3
0x4cdb2a04   100  ldr x16, pc+44 (addr 0x000000004cdb2a30)    ;; code: HANDLER, LoadConstantStub, minor: 18
0x4cdb2a08   104  br x16
0x4cdb2a0c   108  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0x4cdb2a10   112  d63f03e0       constant
0x4cdb2a14   116  d503201f       constant
0x4cdb2a18   120  21063e59       constant
0x4cdb2a1c   124  00000000       constant
0x4cdb2a20   128  aa106e39       constant
0x4cdb2a24   132  0000ffff       constant
0x4cdb2a28   136  4cd222e0       constant
0x4cdb2a2c   140  00000000       constant
0x4cdb2a30   144  4cd7ccc0       constant
0x4cdb2a34   148  00000000       constant


RelocInfo (size = 10)
0x4cdb29c4  embedded object  (0x21063e59 Cell for 0)
0x4cdb29d8  embedded object  (0xffffaa106e39 WeakCell for 0x2a8156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>)
0x4cdb29f4  code target (BUILTIN)  (0x4cd222e0)
0x4cdb2a04  code target (HANDLER)  (0x4cd7ccc0)
0x4cdb2a0c  constant pool (size 44)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0x4cdb2b40     0  ldur x6, [x1, #7]
0x4cdb2b44     4  ldur w7, [x6, #11]
0x4cdb2b48     8  adds w8, w7, #0x3 (3)
0x4cdb2b4c    12  b.vs #+0x1dc (addr 0x4cdb2d28)
0x4cdb2b50    16  movz w16, #0x95ff
0x4cdb2b54    20  cmp w8, w16, lsl #1
0x4cdb2b58    24  b.hs #+0x1e0 (addr 0x4cdb2d38)
0x4cdb2b5c    28  lsl x9, x8, #32
0x4cdb2b60    32  lsl w10, w8, #3
0x4cdb2b64    36  add w10, w10, #0x10 (16)
0x4cdb2b68    40  sxtw x10, w10
0x4cdb2b6c    44  movz x11, #0xd2c0
0x4cdb2b70    48  movk x11, #0x166d, lsl #16
0x4cdb2b74    52  ldp x13, x16, [x11]
0x4cdb2b78    56  adds x12, x13, x10
0x4cdb2b7c    60  ccmp x12, x16, #nzCv, lo
0x4cdb2b80    64  b.hi #+0xf8 (addr 0x4cdb2c78)
0x4cdb2b84    68  str x12, [x11]
0x4cdb2b88    72  orr x13, x13, #0x1
0x4cdb2b8c    76  ldr x10, pc+348 (addr 0x000000004cdb2ce8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cdb2b90    80  stur x10, [x13, #-1]
0x4cdb2b94    84  stur x9, [x13, #7]
0x4cdb2b98    88  cmp w7, w8
0x4cdb2b9c    92  b.ge #+0x18 (addr 0x4cdb2bb4)
0x4cdb2ba0    96  sub w8, w8, #0x1 (1)
0x4cdb2ba4   100  ldr x9, pc+332 (addr 0x000000004cdb2cf0)    ;; object: 0x21004241 <undefined>
0x4cdb2ba8   104  add x10, x13, #0xf (15)
0x4cdb2bac   108  str x9, [x10, w8, sxtw #3]
0x4cdb2bb0   112  b #-0x18 (addr 0x4cdb2b98)
0x4cdb2bb4   116  cmp w7, #0x0 (0)
0x4cdb2bb8   120  b.le #+0x1c (addr 0x4cdb2bd4)
0x4cdb2bbc   124  sub w7, w7, #0x1 (1)
0x4cdb2bc0   128  add x8, x6, #0xf (15)
0x4cdb2bc4   132  ldr x9, [x8, w7, sxtw #3]
0x4cdb2bc8   136  add x8, x13, #0xf (15)
0x4cdb2bcc   140  str x9, [x8, w7, sxtw #3]
0x4cdb2bd0   144  b #-0x1c (addr 0x4cdb2bb4)
0x4cdb2bd4   148  stur x13, [x1, #7]
0x4cdb2bd8   152  add x6, x1, #0x7 (7)
0x4cdb2bdc   156  and x13, x1, #0xfffffffffff00000
0x4cdb2be0   160  ldr x13, [x13, #8]
0x4cdb2be4   164  tbz w13, #2, #+0x18 (addr 0x4cdb2bfc)
0x4cdb2be8   168  sub csp, jssp, #0x8 (8)
0x4cdb2bec   172  str lr, [jssp, #-8]!
0x4cdb2bf0   176  ldr x16, pc+264 (addr 0x000000004cdb2cf8)    ;; code: STUB, RecordWriteStub, minor: 72097
0x4cdb2bf4   180  blr x16
0x4cdb2bf8   184  ldr lr, [jssp], #8
0x4cdb2bfc   188  tbz w0, #0, #+0x14c (addr 0x4cdb2d48)
0x4cdb2c00   192  mov x2, x0
0x4cdb2c04   196  ldur x4, [x1, #7]
0x4cdb2c08   200  stur x2, [x4, #87]
0x4cdb2c0c   204  add x3, x4, #0x57 (87)
0x4cdb2c10   208  and x2, x2, #0xfffffffffff00000
0x4cdb2c14   212  ldr x2, [x2, #8]
0x4cdb2c18   216  tbz w2, #1, #+0x24 (addr 0x4cdb2c3c)
0x4cdb2c1c   220  and x2, x4, #0xfffffffffff00000
0x4cdb2c20   224  ldr x2, [x2, #8]
0x4cdb2c24   228  tbz w2, #2, #+0x18 (addr 0x4cdb2c3c)
0x4cdb2c28   232  sub csp, jssp, #0x8 (8)
0x4cdb2c2c   236  str lr, [jssp, #-8]!
0x4cdb2c30   240  ldr x16, pc+208 (addr 0x000000004cdb2d00)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdb2c34   244  blr x16
0x4cdb2c38   248  ldr lr, [jssp], #8
0x4cdb2c3c   252  stur x5, [x1, #-1]
0x4cdb2c40   256  tbz w5, #0, #+0x34 (addr 0x4cdb2c74)
0x4cdb2c44   260  sub x2, x1, #0x1 (1)
0x4cdb2c48   264  and x5, x5, #0xfffffffffff00000
0x4cdb2c4c   268  ldr x5, [x5, #8]
0x4cdb2c50   272  tbz w5, #1, #+0x24 (addr 0x4cdb2c74)
0x4cdb2c54   276  and x5, x1, #0xfffffffffff00000
0x4cdb2c58   280  ldr x5, [x5, #8]
0x4cdb2c5c   284  tbz w5, #2, #+0x18 (addr 0x4cdb2c74)
0x4cdb2c60   288  sub csp, jssp, #0x8 (8)
0x4cdb2c64   292  str lr, [jssp, #-8]!
0x4cdb2c68   296  ldr x16, pc+160 (addr 0x000000004cdb2d08)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdb2c6c   300  blr x16
0x4cdb2c70   304  ldr lr, [jssp], #8
0x4cdb2c74   308  ret
0x4cdb2c78   312  sub csp, jssp, #0x10 (16)
0x4cdb2c7c   316  stp fp, lr, [jssp, #-16]!
0x4cdb2c80   320  movz fp, #0xa00000000
0x4cdb2c84   324  sub csp, jssp, #0x8 (8)
0x4cdb2c88   328  str fp, [jssp, #-8]!
0x4cdb2c8c   332  add fp, jssp, #0x8 (8)
0x4cdb2c90   336  movz x13, #0x0
0x4cdb2c94   340  mov x16, lr
0x4cdb2c98   344  ldr x17, pc+120 (addr 0x000000004cdb2d10)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdb2c9c   348  blr x17
0x4cdb2ca0   352  lsl x0, x10, #32
0x4cdb2ca4   356  movz x10, #0x0
0x4cdb2ca8   360  sub csp, jssp, #0x10 (16)
0x4cdb2cac   364  stp x10, x0, [jssp, #-16]!
0x4cdb2cb0   368  movz x0, #0x2
0x4cdb2cb4   372  movz x1, #0x5b88
0x4cdb2cb8   376  movk x1, #0xe2, lsl #16
0x4cdb2cbc   380  ldr x16, pc+92 (addr 0x000000004cdb2d18)    ;; code: STUB, CEntryStub, minor: 5
0x4cdb2cc0   384  blr x16
0x4cdb2cc4   388  str x0, [jssp, #104]
0x4cdb2cc8   392  ldr x16, pc+88 (addr 0x000000004cdb2d20)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdb2ccc   396  blr x16
0x4cdb2cd0   400  ldr lr, [jssp, #16]
0x4cdb2cd4   404  ldp xzr, fp, [jssp], #24
0x4cdb2cd8   408  b #-0x14c (addr 0x4cdb2b8c)
0x4cdb2cdc   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0x4cdb2ce0   416  d63f03e0       constant
0x4cdb2ce4   420  d503201f       constant
0x4cdb2ce8   424  2a804259       constant
0x4cdb2cec   428  00000000       constant
0x4cdb2cf0   432  21004241       constant
0x4cdb2cf4   436  00000000       constant
0x4cdb2cf8   440  4cd370c0       constant
0x4cdb2cfc   444  00000000       constant
0x4cdb2d00   448  4cd378a0       constant
0x4cdb2d04   452  00000000       constant
0x4cdb2d08   456  4cd38080       constant
0x4cdb2d0c   460  00000000       constant
0x4cdb2d10   464  4cd06820       constant
0x4cdb2d14   468  00000000       constant
0x4cdb2d18   472  4cd06260       constant
0x4cdb2d1c   476  00000000       constant
0x4cdb2d20   480  4cd068e0       constant
0x4cdb2d24   484  00000000       constant
0x4cdb2d28   488  movz x16, #0x0
0x4cdb2d2c   492  sub csp, jssp, #0x10 (16)
0x4cdb2d30   496  stp fp, lr, [jssp, #-16]!
0x4cdb2d34   500  bl #+0x24 (addr 0x4cdb2d58)
0x4cdb2d38   504  movz x16, #0x8
0x4cdb2d3c   508  sub csp, jssp, #0x10 (16)
0x4cdb2d40   512  stp fp, lr, [jssp, #-16]!
0x4cdb2d44   516  bl #+0x14 (addr 0x4cdb2d58)
0x4cdb2d48   520  movz x16, #0x10
0x4cdb2d4c   524  sub csp, jssp, #0x10 (16)
0x4cdb2d50   528  stp fp, lr, [jssp, #-16]!
0x4cdb2d54   532  bl #+0x4 (addr 0x4cdb2d58)
0x4cdb2d58   536  movz x17, #0xa00000000
0x4cdb2d5c   540  sub csp, jssp, #0x10 (16)
0x4cdb2d60   544  stp x17, cp, [jssp, #-16]!
0x4cdb2d64   548  add fp, jssp, #0x10 (16)
0x4cdb2d68   552  ldr x17, pc+24 (addr 0x000000004cdb2d80)    ;; lazy deoptimization bailout 0
0x4cdb2d6c   556  add x17, x17, x16
0x4cdb2d70   560  br x17
0x4cdb2d74   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdb2d78   568  d63f03e0       constant
0x4cdb2d7c   572  d503201f       constant
0x4cdb2d80   576  4cb06000       constant
0x4cdb2d84   580  00000000       constant


Safepoints (size = 21)
0x4cdb2cc4   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0x4cdb2b8c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cdb2ba4  embedded object  (0x21004241 <undefined>)
0x4cdb2bf0  code target (STUB)  (0x4cd370c0)
0x4cdb2c30  code target (STUB)  (0x4cd378a0)
0x4cdb2c68  code target (STUB)  (0x4cd38080)
0x4cdb2c98  code target (STUB)  (0x4cd06820)
0x4cdb2cbc  code target (STUB)  (0x4cd06260)
0x4cdb2cc8  code target (STUB)  (0x4cd068e0)
0x4cdb2cdc  constant pool (size 76)
0x4cdb2d68  runtime entry
0x4cdb2d74  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0x4cdb2b40     0  ldur x6, [x1, #7]
0x4cdb2b44     4  ldur w7, [x6, #11]
0x4cdb2b48     8  adds w8, w7, #0x3 (3)
0x4cdb2b4c    12  b.vs #+0x1dc (addr 0x4cdb2d28)
0x4cdb2b50    16  movz w16, #0x95ff
0x4cdb2b54    20  cmp w8, w16, lsl #1
0x4cdb2b58    24  b.hs #+0x1e0 (addr 0x4cdb2d38)
0x4cdb2b5c    28  lsl x9, x8, #32
0x4cdb2b60    32  lsl w10, w8, #3
0x4cdb2b64    36  add w10, w10, #0x10 (16)
0x4cdb2b68    40  sxtw x10, w10
0x4cdb2b6c    44  movz x11, #0xd2c0
0x4cdb2b70    48  movk x11, #0x166d, lsl #16
0x4cdb2b74    52  ldp x13, x16, [x11]
0x4cdb2b78    56  adds x12, x13, x10
0x4cdb2b7c    60  ccmp x12, x16, #nzCv, lo
0x4cdb2b80    64  b.hi #+0xf8 (addr 0x4cdb2c78)
0x4cdb2b84    68  str x12, [x11]
0x4cdb2b88    72  orr x13, x13, #0x1
0x4cdb2b8c    76  ldr x10, pc+348 (addr 0x000000004cdb2ce8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cdb2b90    80  stur x10, [x13, #-1]
0x4cdb2b94    84  stur x9, [x13, #7]
0x4cdb2b98    88  cmp w7, w8
0x4cdb2b9c    92  b.ge #+0x18 (addr 0x4cdb2bb4)
0x4cdb2ba0    96  sub w8, w8, #0x1 (1)
0x4cdb2ba4   100  ldr x9, pc+332 (addr 0x000000004cdb2cf0)    ;; object: 0x21004241 <undefined>
0x4cdb2ba8   104  add x10, x13, #0xf (15)
0x4cdb2bac   108  str x9, [x10, w8, sxtw #3]
0x4cdb2bb0   112  b #-0x18 (addr 0x4cdb2b98)
0x4cdb2bb4   116  cmp w7, #0x0 (0)
0x4cdb2bb8   120  b.le #+0x1c (addr 0x4cdb2bd4)
0x4cdb2bbc   124  sub w7, w7, #0x1 (1)
0x4cdb2bc0   128  add x8, x6, #0xf (15)
0x4cdb2bc4   132  ldr x9, [x8, w7, sxtw #3]
0x4cdb2bc8   136  add x8, x13, #0xf (15)
0x4cdb2bcc   140  str x9, [x8, w7, sxtw #3]
0x4cdb2bd0   144  b #-0x1c (addr 0x4cdb2bb4)
0x4cdb2bd4   148  stur x13, [x1, #7]
0x4cdb2bd8   152  add x6, x1, #0x7 (7)
0x4cdb2bdc   156  and x13, x1, #0xfffffffffff00000
0x4cdb2be0   160  ldr x13, [x13, #8]
0x4cdb2be4   164  tbz w13, #2, #+0x18 (addr 0x4cdb2bfc)
0x4cdb2be8   168  sub csp, jssp, #0x8 (8)
0x4cdb2bec   172  str lr, [jssp, #-8]!
0x4cdb2bf0   176  ldr x16, pc+264 (addr 0x000000004cdb2cf8)    ;; code: STUB, RecordWriteStub, minor: 72097
0x4cdb2bf4   180  blr x16
0x4cdb2bf8   184  ldr lr, [jssp], #8
0x4cdb2bfc   188  tbz w0, #0, #+0x14c (addr 0x4cdb2d48)
0x4cdb2c00   192  mov x2, x0
0x4cdb2c04   196  ldur x4, [x1, #7]
0x4cdb2c08   200  stur x2, [x4, #87]
0x4cdb2c0c   204  add x3, x4, #0x57 (87)
0x4cdb2c10   208  and x2, x2, #0xfffffffffff00000
0x4cdb2c14   212  ldr x2, [x2, #8]
0x4cdb2c18   216  tbz w2, #1, #+0x24 (addr 0x4cdb2c3c)
0x4cdb2c1c   220  and x2, x4, #0xfffffffffff00000
0x4cdb2c20   224  ldr x2, [x2, #8]
0x4cdb2c24   228  tbz w2, #2, #+0x18 (addr 0x4cdb2c3c)
0x4cdb2c28   232  sub csp, jssp, #0x8 (8)
0x4cdb2c2c   236  str lr, [jssp, #-8]!
0x4cdb2c30   240  ldr x16, pc+208 (addr 0x000000004cdb2d00)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdb2c34   244  blr x16
0x4cdb2c38   248  ldr lr, [jssp], #8
0x4cdb2c3c   252  stur x5, [x1, #-1]
0x4cdb2c40   256  tbz w5, #0, #+0x34 (addr 0x4cdb2c74)
0x4cdb2c44   260  sub x2, x1, #0x1 (1)
0x4cdb2c48   264  and x5, x5, #0xfffffffffff00000
0x4cdb2c4c   268  ldr x5, [x5, #8]
0x4cdb2c50   272  tbz w5, #1, #+0x24 (addr 0x4cdb2c74)
0x4cdb2c54   276  and x5, x1, #0xfffffffffff00000
0x4cdb2c58   280  ldr x5, [x5, #8]
0x4cdb2c5c   284  tbz w5, #2, #+0x18 (addr 0x4cdb2c74)
0x4cdb2c60   288  sub csp, jssp, #0x8 (8)
0x4cdb2c64   292  str lr, [jssp, #-8]!
0x4cdb2c68   296  ldr x16, pc+160 (addr 0x000000004cdb2d08)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdb2c6c   300  blr x16
0x4cdb2c70   304  ldr lr, [jssp], #8
0x4cdb2c74   308  ret
0x4cdb2c78   312  sub csp, jssp, #0x10 (16)
0x4cdb2c7c   316  stp fp, lr, [jssp, #-16]!
0x4cdb2c80   320  movz fp, #0xa00000000
0x4cdb2c84   324  sub csp, jssp, #0x8 (8)
0x4cdb2c88   328  str fp, [jssp, #-8]!
0x4cdb2c8c   332  add fp, jssp, #0x8 (8)
0x4cdb2c90   336  movz x13, #0x0
0x4cdb2c94   340  mov x16, lr
0x4cdb2c98   344  ldr x17, pc+120 (addr 0x000000004cdb2d10)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdb2c9c   348  blr x17
0x4cdb2ca0   352  lsl x0, x10, #32
0x4cdb2ca4   356  movz x10, #0x0
0x4cdb2ca8   360  sub csp, jssp, #0x10 (16)
0x4cdb2cac   364  stp x10, x0, [jssp, #-16]!
0x4cdb2cb0   368  movz x0, #0x2
0x4cdb2cb4   372  movz x1, #0x5b88
0x4cdb2cb8   376  movk x1, #0xe2, lsl #16
0x4cdb2cbc   380  ldr x16, pc+92 (addr 0x000000004cdb2d18)    ;; code: STUB, CEntryStub, minor: 5
0x4cdb2cc0   384  blr x16
0x4cdb2cc4   388  str x0, [jssp, #104]
0x4cdb2cc8   392  ldr x16, pc+88 (addr 0x000000004cdb2d20)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdb2ccc   396  blr x16
0x4cdb2cd0   400  ldr lr, [jssp, #16]
0x4cdb2cd4   404  ldp xzr, fp, [jssp], #24
0x4cdb2cd8   408  b #-0x14c (addr 0x4cdb2b8c)
0x4cdb2cdc   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0x4cdb2ce0   416  d63f03e0       constant
0x4cdb2ce4   420  d503201f       constant
0x4cdb2ce8   424  2a804259       constant
0x4cdb2cec   428  00000000       constant
0x4cdb2cf0   432  21004241       constant
0x4cdb2cf4   436  00000000       constant
0x4cdb2cf8   440  4cd370c0       constant
0x4cdb2cfc   444  00000000       constant
0x4cdb2d00   448  4cd378a0       constant
0x4cdb2d04   452  00000000       constant
0x4cdb2d08   456  4cd38080       constant
0x4cdb2d0c   460  00000000       constant
0x4cdb2d10   464  4cd06820       constant
0x4cdb2d14   468  00000000       constant
0x4cdb2d18   472  4cd06260       constant
0x4cdb2d1c   476  00000000       constant
0x4cdb2d20   480  4cd068e0       constant
0x4cdb2d24   484  00000000       constant
0x4cdb2d28   488  movz x16, #0x0
0x4cdb2d2c   492  sub csp, jssp, #0x10 (16)
0x4cdb2d30   496  stp fp, lr, [jssp, #-16]!
0x4cdb2d34   500  bl #+0x24 (addr 0x4cdb2d58)
0x4cdb2d38   504  movz x16, #0x8
0x4cdb2d3c   508  sub csp, jssp, #0x10 (16)
0x4cdb2d40   512  stp fp, lr, [jssp, #-16]!
0x4cdb2d44   516  bl #+0x14 (addr 0x4cdb2d58)
0x4cdb2d48   520  movz x16, #0x10
0x4cdb2d4c   524  sub csp, jssp, #0x10 (16)
0x4cdb2d50   528  stp fp, lr, [jssp, #-16]!
0x4cdb2d54   532  bl #+0x4 (addr 0x4cdb2d58)
0x4cdb2d58   536  movz x17, #0xa00000000
0x4cdb2d5c   540  sub csp, jssp, #0x10 (16)
0x4cdb2d60   544  stp x17, cp, [jssp, #-16]!
0x4cdb2d64   548  add fp, jssp, #0x10 (16)
0x4cdb2d68   552  ldr x17, pc+24 (addr 0x000000004cdb2d80)    ;; lazy deoptimization bailout 0
0x4cdb2d6c   556  add x17, x17, x16
0x4cdb2d70   560  br x17
0x4cdb2d74   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdb2d78   568  d63f03e0       constant
0x4cdb2d7c   572  d503201f       constant
0x4cdb2d80   576  4cb06000       constant
0x4cdb2d84   580  00000000       constant


Safepoints (size = 21)
0x4cdb2cc4   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0x4cdb2b8c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cdb2ba4  embedded object  (0x21004241 <undefined>)
0x4cdb2bf0  code target (STUB)  (0x4cd370c0)
0x4cdb2c30  code target (STUB)  (0x4cd378a0)
0x4cdb2c68  code target (STUB)  (0x4cd38080)
0x4cdb2c98  code target (STUB)  (0x4cd06820)
0x4cdb2cbc  code target (STUB)  (0x4cd06260)
0x4cdb2cc8  code target (STUB)  (0x4cd068e0)
0x4cdb2cdc  constant pool (size 76)
0x4cdb2d68  runtime entry
0x4cdb2d74  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = module
compiler = unknown
Instructions (size = 184)
0x4cdb2e00     0  sub csp, jssp, #0x8 (8)
0x4cdb2e04     4  str x3, [jssp, #-8]!
0x4cdb2e08     8  sub csp, jssp, #0x8 (8)
0x4cdb2e0c    12  str x4, [jssp, #-8]!
0x4cdb2e10    16  ldr x3, pc+112 (addr 0x000000004cdb2e80)    ;; object: 0x21063e59 Cell for 0
0x4cdb2e14    20  ldur x3, [x3, #7]
0x4cdb2e18    24  cmp x3, #0x0 (0)
0x4cdb2e1c    28  b.ne #+0x44 (addr 0x4cdb2e60)
0x4cdb2e20    32  tbz w0, #0, #+0x40 (addr 0x4cdb2e60)
0x4cdb2e24    36  ldur x3, [x0, #-1]
0x4cdb2e28    40  ldr x4, pc+96 (addr 0x000000004cdb2e88)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdb2e2c    44  ldur x4, [x4, #7]
0x4cdb2e30    48  cmp x3, x4
0x4cdb2e34    52  b.ne #+0x2c (addr 0x4cdb2e60)
0x4cdb2e38    56  ldr x5, pc+88 (addr 0x000000004cdb2e90)    ;; object: 0xffffaa107701 WeakCell for 0x2a82d189 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdb2e3c    60  ldur x5, [x5, #7]
0x4cdb2e40    64  tbz w5, #0, #+0x20 (addr 0x4cdb2e60)
0x4cdb2e44    68  ldursw x4, [x5, #15]
0x4cdb2e48    72  tbnz w4, #23, #+0x18 (addr 0x4cdb2e60)
0x4cdb2e4c    76  ldr x4, [jssp], #8
0x4cdb2e50    80  ldr x3, [jssp], #8
0x4cdb2e54    84  ldr x2, pc+68 (addr 0x000000004cdb2e98)    ;; object: 0x210b9c61 <String[6]: module>
0x4cdb2e58    88  ldr x16, pc+72 (addr 0x000000004cdb2ea0)    ;; code: HANDLER, StoreTransitionStub, minor: 327691
0x4cdb2e5c    92  br x16
0x4cdb2e60    96  ldr x2, pc+72 (addr 0x000000004cdb2ea8)    ;; object: 0x210b9c61 <String[6]: module>
0x4cdb2e64   100  ldr x4, [jssp], #8
0x4cdb2e68   104  ldr x3, [jssp], #8
0x4cdb2e6c   108  ldr x16, pc+68 (addr 0x000000004cdb2eb0)    ;; code: BUILTIN
0x4cdb2e70   112  br x16
0x4cdb2e74   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdb2e78   120  d63f03e0       constant
0x4cdb2e7c   124  d503201f       constant
0x4cdb2e80   128  21063e59       constant
0x4cdb2e84   132  00000000       constant
0x4cdb2e88   136  210c22b1       constant
0x4cdb2e8c   140  00000000       constant
0x4cdb2e90   144  aa107701       constant
0x4cdb2e94   148  0000ffff       constant
0x4cdb2e98   152  210b9c61       constant
0x4cdb2e9c   156  00000000       constant
0x4cdb2ea0   160  4cdb2b40       constant
0x4cdb2ea4   164  00000000       constant
0x4cdb2ea8   168  210b9c61       constant
0x4cdb2eac   172  00000000       constant
0x4cdb2eb0   176  4cd22420       constant
0x4cdb2eb4   180  00000000       constant


RelocInfo (size = 13)
0x4cdb2e10  embedded object  (0x21063e59 Cell for 0)
0x4cdb2e28  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdb2e38  embedded object  (0xffffaa107701 WeakCell for 0x2a82d189 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdb2e54  embedded object  (0x210b9c61 <String[6]: module>)
0x4cdb2e58  code target (HANDLER)  (0x4cdb2b40)
0x4cdb2e60  embedded object  (0x210b9c61 <String[6]: module>)
0x4cdb2e6c  code target (BUILTIN)  (0x4cd22420)
0x4cdb2e74  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cdb4c80     0  tbz w0, #0, #+0x98 (addr 0x4cdb4d18)
0x4cdb4c84     4  mov x2, x0
0x4cdb4c88     8  ldur x4, [x1, #7]
0x4cdb4c8c    12  stur x2, [x4, #95]
0x4cdb4c90    16  add x3, x4, #0x5f (95)
0x4cdb4c94    20  and x2, x2, #0xfffffffffff00000
0x4cdb4c98    24  ldr x2, [x2, #8]
0x4cdb4c9c    28  tbz w2, #1, #+0x24 (addr 0x4cdb4cc0)
0x4cdb4ca0    32  and x2, x4, #0xfffffffffff00000
0x4cdb4ca4    36  ldr x2, [x2, #8]
0x4cdb4ca8    40  tbz w2, #2, #+0x18 (addr 0x4cdb4cc0)
0x4cdb4cac    44  sub csp, jssp, #0x8 (8)
0x4cdb4cb0    48  str lr, [jssp, #-8]!
0x4cdb4cb4    52  ldr x16, pc+84 (addr 0x000000004cdb4d08)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdb4cb8    56  blr x16
0x4cdb4cbc    60  ldr lr, [jssp], #8
0x4cdb4cc0    64  stur x5, [x1, #-1]
0x4cdb4cc4    68  tbz w5, #0, #+0x34 (addr 0x4cdb4cf8)
0x4cdb4cc8    72  sub x2, x1, #0x1 (1)
0x4cdb4ccc    76  and x5, x5, #0xfffffffffff00000
0x4cdb4cd0    80  ldr x5, [x5, #8]
0x4cdb4cd4    84  tbz w5, #1, #+0x24 (addr 0x4cdb4cf8)
0x4cdb4cd8    88  and x5, x1, #0xfffffffffff00000
0x4cdb4cdc    92  ldr x5, [x5, #8]
0x4cdb4ce0    96  tbz w5, #2, #+0x18 (addr 0x4cdb4cf8)
0x4cdb4ce4   100  sub csp, jssp, #0x8 (8)
0x4cdb4ce8   104  str lr, [jssp, #-8]!
0x4cdb4cec   108  ldr x16, pc+36 (addr 0x000000004cdb4d10)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdb4cf0   112  blr x16
0x4cdb4cf4   116  ldr lr, [jssp], #8
0x4cdb4cf8   120  ret
0x4cdb4cfc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cdb4d00   128  d63f03e0       constant
0x4cdb4d04   132  d503201f       constant
0x4cdb4d08   136  4cd378a0       constant
0x4cdb4d0c   140  00000000       constant
0x4cdb4d10   144  4cd38080       constant
0x4cdb4d14   148  00000000       constant
0x4cdb4d18   152  movz x16, #0x0
0x4cdb4d1c   156  sub csp, jssp, #0x10 (16)
0x4cdb4d20   160  stp fp, lr, [jssp, #-16]!
0x4cdb4d24   164  bl #+0x4 (addr 0x4cdb4d28)
0x4cdb4d28   168  movz x17, #0xa00000000
0x4cdb4d2c   172  sub csp, jssp, #0x10 (16)
0x4cdb4d30   176  stp x17, cp, [jssp, #-16]!
0x4cdb4d34   180  add fp, jssp, #0x10 (16)
0x4cdb4d38   184  ldr x17, pc+24 (addr 0x000000004cdb4d50)    ;; lazy deoptimization bailout 0
0x4cdb4d3c   188  add x17, x17, x16
0x4cdb4d40   192  br x17
0x4cdb4d44   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdb4d48   200  d63f03e0       constant
0x4cdb4d4c   204  d503201f       constant
0x4cdb4d50   208  4cb06000       constant
0x4cdb4d54   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdb4cb4  code target (STUB)  (0x4cd378a0)
0x4cdb4cec  code target (STUB)  (0x4cd38080)
0x4cdb4cfc  constant pool (size 28)
0x4cdb4d38  runtime entry
0x4cdb4d44  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cdb4c80     0  tbz w0, #0, #+0x98 (addr 0x4cdb4d18)
0x4cdb4c84     4  mov x2, x0
0x4cdb4c88     8  ldur x4, [x1, #7]
0x4cdb4c8c    12  stur x2, [x4, #95]
0x4cdb4c90    16  add x3, x4, #0x5f (95)
0x4cdb4c94    20  and x2, x2, #0xfffffffffff00000
0x4cdb4c98    24  ldr x2, [x2, #8]
0x4cdb4c9c    28  tbz w2, #1, #+0x24 (addr 0x4cdb4cc0)
0x4cdb4ca0    32  and x2, x4, #0xfffffffffff00000
0x4cdb4ca4    36  ldr x2, [x2, #8]
0x4cdb4ca8    40  tbz w2, #2, #+0x18 (addr 0x4cdb4cc0)
0x4cdb4cac    44  sub csp, jssp, #0x8 (8)
0x4cdb4cb0    48  str lr, [jssp, #-8]!
0x4cdb4cb4    52  ldr x16, pc+84 (addr 0x000000004cdb4d08)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdb4cb8    56  blr x16
0x4cdb4cbc    60  ldr lr, [jssp], #8
0x4cdb4cc0    64  stur x5, [x1, #-1]
0x4cdb4cc4    68  tbz w5, #0, #+0x34 (addr 0x4cdb4cf8)
0x4cdb4cc8    72  sub x2, x1, #0x1 (1)
0x4cdb4ccc    76  and x5, x5, #0xfffffffffff00000
0x4cdb4cd0    80  ldr x5, [x5, #8]
0x4cdb4cd4    84  tbz w5, #1, #+0x24 (addr 0x4cdb4cf8)
0x4cdb4cd8    88  and x5, x1, #0xfffffffffff00000
0x4cdb4cdc    92  ldr x5, [x5, #8]
0x4cdb4ce0    96  tbz w5, #2, #+0x18 (addr 0x4cdb4cf8)
0x4cdb4ce4   100  sub csp, jssp, #0x8 (8)
0x4cdb4ce8   104  str lr, [jssp, #-8]!
0x4cdb4cec   108  ldr x16, pc+36 (addr 0x000000004cdb4d10)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdb4cf0   112  blr x16
0x4cdb4cf4   116  ldr lr, [jssp], #8
0x4cdb4cf8   120  ret
0x4cdb4cfc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cdb4d00   128  d63f03e0       constant
0x4cdb4d04   132  d503201f       constant
0x4cdb4d08   136  4cd378a0       constant
0x4cdb4d0c   140  00000000       constant
0x4cdb4d10   144  4cd38080       constant
0x4cdb4d14   148  00000000       constant
0x4cdb4d18   152  movz x16, #0x0
0x4cdb4d1c   156  sub csp, jssp, #0x10 (16)
0x4cdb4d20   160  stp fp, lr, [jssp, #-16]!
0x4cdb4d24   164  bl #+0x4 (addr 0x4cdb4d28)
0x4cdb4d28   168  movz x17, #0xa00000000
0x4cdb4d2c   172  sub csp, jssp, #0x10 (16)
0x4cdb4d30   176  stp x17, cp, [jssp, #-16]!
0x4cdb4d34   180  add fp, jssp, #0x10 (16)
0x4cdb4d38   184  ldr x17, pc+24 (addr 0x000000004cdb4d50)    ;; lazy deoptimization bailout 0
0x4cdb4d3c   188  add x17, x17, x16
0x4cdb4d40   192  br x17
0x4cdb4d44   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdb4d48   200  d63f03e0       constant
0x4cdb4d4c   204  d503201f       constant
0x4cdb4d50   208  4cb06000       constant
0x4cdb4d54   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdb4cb4  code target (STUB)  (0x4cd378a0)
0x4cdb4cec  code target (STUB)  (0x4cd38080)
0x4cdb4cfc  constant pool (size 28)
0x4cdb4d38  runtime entry
0x4cdb4d44  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = internal/module
compiler = unknown
Instructions (size = 184)
0x4cdb4dc0     0  sub csp, jssp, #0x8 (8)
0x4cdb4dc4     4  str x3, [jssp, #-8]!
0x4cdb4dc8     8  sub csp, jssp, #0x8 (8)
0x4cdb4dcc    12  str x4, [jssp, #-8]!
0x4cdb4dd0    16  ldr x3, pc+112 (addr 0x000000004cdb4e40)    ;; object: 0x21063e59 Cell for 0
0x4cdb4dd4    20  ldur x3, [x3, #7]
0x4cdb4dd8    24  cmp x3, #0x0 (0)
0x4cdb4ddc    28  b.ne #+0x44 (addr 0x4cdb4e20)
0x4cdb4de0    32  tbz w0, #0, #+0x40 (addr 0x4cdb4e20)
0x4cdb4de4    36  ldur x3, [x0, #-1]
0x4cdb4de8    40  ldr x4, pc+96 (addr 0x000000004cdb4e48)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdb4dec    44  ldur x4, [x4, #7]
0x4cdb4df0    48  cmp x3, x4
0x4cdb4df4    52  b.ne #+0x2c (addr 0x4cdb4e20)
0x4cdb4df8    56  ldr x5, pc+88 (addr 0x000000004cdb4e50)    ;; object: 0xffffaa10a861 WeakCell for 0x2a82d1e1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdb4dfc    60  ldur x5, [x5, #7]
0x4cdb4e00    64  tbz w5, #0, #+0x20 (addr 0x4cdb4e20)
0x4cdb4e04    68  ldursw x4, [x5, #15]
0x4cdb4e08    72  tbnz w4, #23, #+0x18 (addr 0x4cdb4e20)
0x4cdb4e0c    76  ldr x4, [jssp], #8
0x4cdb4e10    80  ldr x3, [jssp], #8
0x4cdb4e14    84  ldr x2, pc+68 (addr 0x000000004cdb4e58)    ;; object: 0x210b9b81 <String[15]: internal/module>
0x4cdb4e18    88  ldr x16, pc+72 (addr 0x000000004cdb4e60)    ;; code: HANDLER, StoreTransitionStub, minor: 196620
0x4cdb4e1c    92  br x16
0x4cdb4e20    96  ldr x2, pc+72 (addr 0x000000004cdb4e68)    ;; object: 0x210b9b81 <String[15]: internal/module>
0x4cdb4e24   100  ldr x4, [jssp], #8
0x4cdb4e28   104  ldr x3, [jssp], #8
0x4cdb4e2c   108  ldr x16, pc+68 (addr 0x000000004cdb4e70)    ;; code: BUILTIN
0x4cdb4e30   112  br x16
0x4cdb4e34   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdb4e38   120  d63f03e0       constant
0x4cdb4e3c   124  d503201f       constant
0x4cdb4e40   128  21063e59       constant
0x4cdb4e44   132  00000000       constant
0x4cdb4e48   136  210c22b1       constant
0x4cdb4e4c   140  00000000       constant
0x4cdb4e50   144  aa10a861       constant
0x4cdb4e54   148  0000ffff       constant
0x4cdb4e58   152  210b9b81       constant
0x4cdb4e5c   156  00000000       constant
0x4cdb4e60   160  4cdb4c80       constant
0x4cdb4e64   164  00000000       constant
0x4cdb4e68   168  210b9b81       constant
0x4cdb4e6c   172  00000000       constant
0x4cdb4e70   176  4cd22420       constant
0x4cdb4e74   180  00000000       constant


RelocInfo (size = 13)
0x4cdb4dd0  embedded object  (0x21063e59 Cell for 0)
0x4cdb4de8  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdb4df8  embedded object  (0xffffaa10a861 WeakCell for 0x2a82d1e1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdb4e14  embedded object  (0x210b9b81 <String[15]: internal/module>)
0x4cdb4e18  code target (HANDLER)  (0x4cdb4c80)
0x4cdb4e20  embedded object  (0x210b9b81 <String[15]: internal/module>)
0x4cdb4e2c  code target (BUILTIN)  (0x4cd22420)
0x4cdb4e34  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cdb53c0     0  tbz w0, #0, #+0x98 (addr 0x4cdb5458)
0x4cdb53c4     4  mov x2, x0
0x4cdb53c8     8  ldur x4, [x1, #7]
0x4cdb53cc    12  stur x2, [x4, #103]
0x4cdb53d0    16  add x3, x4, #0x67 (103)
0x4cdb53d4    20  and x2, x2, #0xfffffffffff00000
0x4cdb53d8    24  ldr x2, [x2, #8]
0x4cdb53dc    28  tbz w2, #1, #+0x24 (addr 0x4cdb5400)
0x4cdb53e0    32  and x2, x4, #0xfffffffffff00000
0x4cdb53e4    36  ldr x2, [x2, #8]
0x4cdb53e8    40  tbz w2, #2, #+0x18 (addr 0x4cdb5400)
0x4cdb53ec    44  sub csp, jssp, #0x8 (8)
0x4cdb53f0    48  str lr, [jssp, #-8]!
0x4cdb53f4    52  ldr x16, pc+84 (addr 0x000000004cdb5448)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdb53f8    56  blr x16
0x4cdb53fc    60  ldr lr, [jssp], #8
0x4cdb5400    64  stur x5, [x1, #-1]
0x4cdb5404    68  tbz w5, #0, #+0x34 (addr 0x4cdb5438)
0x4cdb5408    72  sub x2, x1, #0x1 (1)
0x4cdb540c    76  and x5, x5, #0xfffffffffff00000
0x4cdb5410    80  ldr x5, [x5, #8]
0x4cdb5414    84  tbz w5, #1, #+0x24 (addr 0x4cdb5438)
0x4cdb5418    88  and x5, x1, #0xfffffffffff00000
0x4cdb541c    92  ldr x5, [x5, #8]
0x4cdb5420    96  tbz w5, #2, #+0x18 (addr 0x4cdb5438)
0x4cdb5424   100  sub csp, jssp, #0x8 (8)
0x4cdb5428   104  str lr, [jssp, #-8]!
0x4cdb542c   108  ldr x16, pc+36 (addr 0x000000004cdb5450)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdb5430   112  blr x16
0x4cdb5434   116  ldr lr, [jssp], #8
0x4cdb5438   120  ret
0x4cdb543c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cdb5440   128  d63f03e0       constant
0x4cdb5444   132  d503201f       constant
0x4cdb5448   136  4cd378a0       constant
0x4cdb544c   140  00000000       constant
0x4cdb5450   144  4cd38080       constant
0x4cdb5454   148  00000000       constant
0x4cdb5458   152  movz x16, #0x0
0x4cdb545c   156  sub csp, jssp, #0x10 (16)
0x4cdb5460   160  stp fp, lr, [jssp, #-16]!
0x4cdb5464   164  bl #+0x4 (addr 0x4cdb5468)
0x4cdb5468   168  movz x17, #0xa00000000
0x4cdb546c   172  sub csp, jssp, #0x10 (16)
0x4cdb5470   176  stp x17, cp, [jssp, #-16]!
0x4cdb5474   180  add fp, jssp, #0x10 (16)
0x4cdb5478   184  ldr x17, pc+24 (addr 0x000000004cdb5490)    ;; lazy deoptimization bailout 0
0x4cdb547c   188  add x17, x17, x16
0x4cdb5480   192  br x17
0x4cdb5484   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdb5488   200  d63f03e0       constant
0x4cdb548c   204  d503201f       constant
0x4cdb5490   208  4cb06000       constant
0x4cdb5494   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdb53f4  code target (STUB)  (0x4cd378a0)
0x4cdb542c  code target (STUB)  (0x4cd38080)
0x4cdb543c  constant pool (size 28)
0x4cdb5478  runtime entry
0x4cdb5484  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cdb53c0     0  tbz w0, #0, #+0x98 (addr 0x4cdb5458)
0x4cdb53c4     4  mov x2, x0
0x4cdb53c8     8  ldur x4, [x1, #7]
0x4cdb53cc    12  stur x2, [x4, #103]
0x4cdb53d0    16  add x3, x4, #0x67 (103)
0x4cdb53d4    20  and x2, x2, #0xfffffffffff00000
0x4cdb53d8    24  ldr x2, [x2, #8]
0x4cdb53dc    28  tbz w2, #1, #+0x24 (addr 0x4cdb5400)
0x4cdb53e0    32  and x2, x4, #0xfffffffffff00000
0x4cdb53e4    36  ldr x2, [x2, #8]
0x4cdb53e8    40  tbz w2, #2, #+0x18 (addr 0x4cdb5400)
0x4cdb53ec    44  sub csp, jssp, #0x8 (8)
0x4cdb53f0    48  str lr, [jssp, #-8]!
0x4cdb53f4    52  ldr x16, pc+84 (addr 0x000000004cdb5448)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdb53f8    56  blr x16
0x4cdb53fc    60  ldr lr, [jssp], #8
0x4cdb5400    64  stur x5, [x1, #-1]
0x4cdb5404    68  tbz w5, #0, #+0x34 (addr 0x4cdb5438)
0x4cdb5408    72  sub x2, x1, #0x1 (1)
0x4cdb540c    76  and x5, x5, #0xfffffffffff00000
0x4cdb5410    80  ldr x5, [x5, #8]
0x4cdb5414    84  tbz w5, #1, #+0x24 (addr 0x4cdb5438)
0x4cdb5418    88  and x5, x1, #0xfffffffffff00000
0x4cdb541c    92  ldr x5, [x5, #8]
0x4cdb5420    96  tbz w5, #2, #+0x18 (addr 0x4cdb5438)
0x4cdb5424   100  sub csp, jssp, #0x8 (8)
0x4cdb5428   104  str lr, [jssp, #-8]!
0x4cdb542c   108  ldr x16, pc+36 (addr 0x000000004cdb5450)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdb5430   112  blr x16
0x4cdb5434   116  ldr lr, [jssp], #8
0x4cdb5438   120  ret
0x4cdb543c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cdb5440   128  d63f03e0       constant
0x4cdb5444   132  d503201f       constant
0x4cdb5448   136  4cd378a0       constant
0x4cdb544c   140  00000000       constant
0x4cdb5450   144  4cd38080       constant
0x4cdb5454   148  00000000       constant
0x4cdb5458   152  movz x16, #0x0
0x4cdb545c   156  sub csp, jssp, #0x10 (16)
0x4cdb5460   160  stp fp, lr, [jssp, #-16]!
0x4cdb5464   164  bl #+0x4 (addr 0x4cdb5468)
0x4cdb5468   168  movz x17, #0xa00000000
0x4cdb546c   172  sub csp, jssp, #0x10 (16)
0x4cdb5470   176  stp x17, cp, [jssp, #-16]!
0x4cdb5474   180  add fp, jssp, #0x10 (16)
0x4cdb5478   184  ldr x17, pc+24 (addr 0x000000004cdb5490)    ;; lazy deoptimization bailout 0
0x4cdb547c   188  add x17, x17, x16
0x4cdb5480   192  br x17
0x4cdb5484   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdb5488   200  d63f03e0       constant
0x4cdb548c   204  d503201f       constant
0x4cdb5490   208  4cb06000       constant
0x4cdb5494   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdb53f4  code target (STUB)  (0x4cd378a0)
0x4cdb542c  code target (STUB)  (0x4cd38080)
0x4cdb543c  constant pool (size 28)
0x4cdb5478  runtime entry
0x4cdb5484  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = vm
compiler = unknown
Instructions (size = 184)
0x4cdb5500     0  sub csp, jssp, #0x8 (8)
0x4cdb5504     4  str x3, [jssp, #-8]!
0x4cdb5508     8  sub csp, jssp, #0x8 (8)
0x4cdb550c    12  str x4, [jssp, #-8]!
0x4cdb5510    16  ldr x3, pc+112 (addr 0x000000004cdb5580)    ;; object: 0x21063e59 Cell for 0
0x4cdb5514    20  ldur x3, [x3, #7]
0x4cdb5518    24  cmp x3, #0x0 (0)
0x4cdb551c    28  b.ne #+0x44 (addr 0x4cdb5560)
0x4cdb5520    32  tbz w0, #0, #+0x40 (addr 0x4cdb5560)
0x4cdb5524    36  ldur x3, [x0, #-1]
0x4cdb5528    40  ldr x4, pc+96 (addr 0x000000004cdb5588)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdb552c    44  ldur x4, [x4, #7]
0x4cdb5530    48  cmp x3, x4
0x4cdb5534    52  b.ne #+0x2c (addr 0x4cdb5560)
0x4cdb5538    56  ldr x5, pc+88 (addr 0x000000004cdb5590)    ;; object: 0xffffaa10b391 WeakCell for 0x2a82d3f1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdb553c    60  ldur x5, [x5, #7]
0x4cdb5540    64  tbz w5, #0, #+0x20 (addr 0x4cdb5560)
0x4cdb5544    68  ldursw x4, [x5, #15]
0x4cdb5548    72  tbnz w4, #23, #+0x18 (addr 0x4cdb5560)
0x4cdb554c    76  ldr x4, [jssp], #8
0x4cdb5550    80  ldr x3, [jssp], #8
0x4cdb5554    84  ldr x2, pc+68 (addr 0x000000004cdb5598)    ;; object: 0x210b9cb1 <String[2]: vm>
0x4cdb5558    88  ldr x16, pc+72 (addr 0x000000004cdb55a0)    ;; code: HANDLER, StoreTransitionStub, minor: 196621
0x4cdb555c    92  br x16
0x4cdb5560    96  ldr x2, pc+72 (addr 0x000000004cdb55a8)    ;; object: 0x210b9cb1 <String[2]: vm>
0x4cdb5564   100  ldr x4, [jssp], #8
0x4cdb5568   104  ldr x3, [jssp], #8
0x4cdb556c   108  ldr x16, pc+68 (addr 0x000000004cdb55b0)    ;; code: BUILTIN
0x4cdb5570   112  br x16
0x4cdb5574   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdb5578   120  d63f03e0       constant
0x4cdb557c   124  d503201f       constant
0x4cdb5580   128  21063e59       constant
0x4cdb5584   132  00000000       constant
0x4cdb5588   136  210c22b1       constant
0x4cdb558c   140  00000000       constant
0x4cdb5590   144  aa10b391       constant
0x4cdb5594   148  0000ffff       constant
0x4cdb5598   152  210b9cb1       constant
0x4cdb559c   156  00000000       constant
0x4cdb55a0   160  4cdb53c0       constant
0x4cdb55a4   164  00000000       constant
0x4cdb55a8   168  210b9cb1       constant
0x4cdb55ac   172  00000000       constant
0x4cdb55b0   176  4cd22420       constant
0x4cdb55b4   180  00000000       constant


RelocInfo (size = 13)
0x4cdb5510  embedded object  (0x21063e59 Cell for 0)
0x4cdb5528  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdb5538  embedded object  (0xffffaa10b391 WeakCell for 0x2a82d3f1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdb5554  embedded object  (0x210b9cb1 <String[2]: vm>)
0x4cdb5558  code target (HANDLER)  (0x4cdb53c0)
0x4cdb5560  embedded object  (0x210b9cb1 <String[2]: vm>)
0x4cdb556c  code target (BUILTIN)  (0x4cd22420)
0x4cdb5574  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0x4cdb6040     0  ldur x6, [x1, #7]
0x4cdb6044     4  ldur w7, [x6, #11]
0x4cdb6048     8  adds w8, w7, #0x3 (3)
0x4cdb604c    12  b.vs #+0x1dc (addr 0x4cdb6228)
0x4cdb6050    16  movz w16, #0x95ff
0x4cdb6054    20  cmp w8, w16, lsl #1
0x4cdb6058    24  b.hs #+0x1e0 (addr 0x4cdb6238)
0x4cdb605c    28  lsl x9, x8, #32
0x4cdb6060    32  lsl w10, w8, #3
0x4cdb6064    36  add w10, w10, #0x10 (16)
0x4cdb6068    40  sxtw x10, w10
0x4cdb606c    44  movz x11, #0xd2c0
0x4cdb6070    48  movk x11, #0x166d, lsl #16
0x4cdb6074    52  ldp x13, x16, [x11]
0x4cdb6078    56  adds x12, x13, x10
0x4cdb607c    60  ccmp x12, x16, #nzCv, lo
0x4cdb6080    64  b.hi #+0xf8 (addr 0x4cdb6178)
0x4cdb6084    68  str x12, [x11]
0x4cdb6088    72  orr x13, x13, #0x1
0x4cdb608c    76  ldr x10, pc+348 (addr 0x000000004cdb61e8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cdb6090    80  stur x10, [x13, #-1]
0x4cdb6094    84  stur x9, [x13, #7]
0x4cdb6098    88  cmp w7, w8
0x4cdb609c    92  b.ge #+0x18 (addr 0x4cdb60b4)
0x4cdb60a0    96  sub w8, w8, #0x1 (1)
0x4cdb60a4   100  ldr x9, pc+332 (addr 0x000000004cdb61f0)    ;; object: 0x21004241 <undefined>
0x4cdb60a8   104  add x10, x13, #0xf (15)
0x4cdb60ac   108  str x9, [x10, w8, sxtw #3]
0x4cdb60b0   112  b #-0x18 (addr 0x4cdb6098)
0x4cdb60b4   116  cmp w7, #0x0 (0)
0x4cdb60b8   120  b.le #+0x1c (addr 0x4cdb60d4)
0x4cdb60bc   124  sub w7, w7, #0x1 (1)
0x4cdb60c0   128  add x8, x6, #0xf (15)
0x4cdb60c4   132  ldr x9, [x8, w7, sxtw #3]
0x4cdb60c8   136  add x8, x13, #0xf (15)
0x4cdb60cc   140  str x9, [x8, w7, sxtw #3]
0x4cdb60d0   144  b #-0x1c (addr 0x4cdb60b4)
0x4cdb60d4   148  stur x13, [x1, #7]
0x4cdb60d8   152  add x6, x1, #0x7 (7)
0x4cdb60dc   156  and x13, x1, #0xfffffffffff00000
0x4cdb60e0   160  ldr x13, [x13, #8]
0x4cdb60e4   164  tbz w13, #2, #+0x18 (addr 0x4cdb60fc)
0x4cdb60e8   168  sub csp, jssp, #0x8 (8)
0x4cdb60ec   172  str lr, [jssp, #-8]!
0x4cdb60f0   176  ldr x16, pc+264 (addr 0x000000004cdb61f8)    ;; code: STUB, RecordWriteStub, minor: 72097
0x4cdb60f4   180  blr x16
0x4cdb60f8   184  ldr lr, [jssp], #8
0x4cdb60fc   188  tbz w0, #0, #+0x14c (addr 0x4cdb6248)
0x4cdb6100   192  mov x2, x0
0x4cdb6104   196  ldur x4, [x1, #7]
0x4cdb6108   200  stur x2, [x4, #111]
0x4cdb610c   204  add x3, x4, #0x6f (111)
0x4cdb6110   208  and x2, x2, #0xfffffffffff00000
0x4cdb6114   212  ldr x2, [x2, #8]
0x4cdb6118   216  tbz w2, #1, #+0x24 (addr 0x4cdb613c)
0x4cdb611c   220  and x2, x4, #0xfffffffffff00000
0x4cdb6120   224  ldr x2, [x2, #8]
0x4cdb6124   228  tbz w2, #2, #+0x18 (addr 0x4cdb613c)
0x4cdb6128   232  sub csp, jssp, #0x8 (8)
0x4cdb612c   236  str lr, [jssp, #-8]!
0x4cdb6130   240  ldr x16, pc+208 (addr 0x000000004cdb6200)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdb6134   244  blr x16
0x4cdb6138   248  ldr lr, [jssp], #8
0x4cdb613c   252  stur x5, [x1, #-1]
0x4cdb6140   256  tbz w5, #0, #+0x34 (addr 0x4cdb6174)
0x4cdb6144   260  sub x2, x1, #0x1 (1)
0x4cdb6148   264  and x5, x5, #0xfffffffffff00000
0x4cdb614c   268  ldr x5, [x5, #8]
0x4cdb6150   272  tbz w5, #1, #+0x24 (addr 0x4cdb6174)
0x4cdb6154   276  and x5, x1, #0xfffffffffff00000
0x4cdb6158   280  ldr x5, [x5, #8]
0x4cdb615c   284  tbz w5, #2, #+0x18 (addr 0x4cdb6174)
0x4cdb6160   288  sub csp, jssp, #0x8 (8)
0x4cdb6164   292  str lr, [jssp, #-8]!
0x4cdb6168   296  ldr x16, pc+160 (addr 0x000000004cdb6208)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdb616c   300  blr x16
0x4cdb6170   304  ldr lr, [jssp], #8
0x4cdb6174   308  ret
0x4cdb6178   312  sub csp, jssp, #0x10 (16)
0x4cdb617c   316  stp fp, lr, [jssp, #-16]!
0x4cdb6180   320  movz fp, #0xa00000000
0x4cdb6184   324  sub csp, jssp, #0x8 (8)
0x4cdb6188   328  str fp, [jssp, #-8]!
0x4cdb618c   332  add fp, jssp, #0x8 (8)
0x4cdb6190   336  movz x13, #0x0
0x4cdb6194   340  mov x16, lr
0x4cdb6198   344  ldr x17, pc+120 (addr 0x000000004cdb6210)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdb619c   348  blr x17
0x4cdb61a0   352  lsl x0, x10, #32
0x4cdb61a4   356  movz x10, #0x0
0x4cdb61a8   360  sub csp, jssp, #0x10 (16)
0x4cdb61ac   364  stp x10, x0, [jssp, #-16]!
0x4cdb61b0   368  movz x0, #0x2
0x4cdb61b4   372  movz x1, #0x5b88
0x4cdb61b8   376  movk x1, #0xe2, lsl #16
0x4cdb61bc   380  ldr x16, pc+92 (addr 0x000000004cdb6218)    ;; code: STUB, CEntryStub, minor: 5
0x4cdb61c0   384  blr x16
0x4cdb61c4   388  str x0, [jssp, #104]
0x4cdb61c8   392  ldr x16, pc+88 (addr 0x000000004cdb6220)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdb61cc   396  blr x16
0x4cdb61d0   400  ldr lr, [jssp, #16]
0x4cdb61d4   404  ldp xzr, fp, [jssp], #24
0x4cdb61d8   408  b #-0x14c (addr 0x4cdb608c)
0x4cdb61dc   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0x4cdb61e0   416  d63f03e0       constant
0x4cdb61e4   420  d503201f       constant
0x4cdb61e8   424  2a804259       constant
0x4cdb61ec   428  00000000       constant
0x4cdb61f0   432  21004241       constant
0x4cdb61f4   436  00000000       constant
0x4cdb61f8   440  4cd370c0       constant
0x4cdb61fc   444  00000000       constant
0x4cdb6200   448  4cd378a0       constant
0x4cdb6204   452  00000000       constant
0x4cdb6208   456  4cd38080       constant
0x4cdb620c   460  00000000       constant
0x4cdb6210   464  4cd06820       constant
0x4cdb6214   468  00000000       constant
0x4cdb6218   472  4cd06260       constant
0x4cdb621c   476  00000000       constant
0x4cdb6220   480  4cd068e0       constant
0x4cdb6224   484  00000000       constant
0x4cdb6228   488  movz x16, #0x0
0x4cdb622c   492  sub csp, jssp, #0x10 (16)
0x4cdb6230   496  stp fp, lr, [jssp, #-16]!
0x4cdb6234   500  bl #+0x24 (addr 0x4cdb6258)
0x4cdb6238   504  movz x16, #0x8
0x4cdb623c   508  sub csp, jssp, #0x10 (16)
0x4cdb6240   512  stp fp, lr, [jssp, #-16]!
0x4cdb6244   516  bl #+0x14 (addr 0x4cdb6258)
0x4cdb6248   520  movz x16, #0x10
0x4cdb624c   524  sub csp, jssp, #0x10 (16)
0x4cdb6250   528  stp fp, lr, [jssp, #-16]!
0x4cdb6254   532  bl #+0x4 (addr 0x4cdb6258)
0x4cdb6258   536  movz x17, #0xa00000000
0x4cdb625c   540  sub csp, jssp, #0x10 (16)
0x4cdb6260   544  stp x17, cp, [jssp, #-16]!
0x4cdb6264   548  add fp, jssp, #0x10 (16)
0x4cdb6268   552  ldr x17, pc+24 (addr 0x000000004cdb6280)    ;; lazy deoptimization bailout 0
0x4cdb626c   556  add x17, x17, x16
0x4cdb6270   560  br x17
0x4cdb6274   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdb6278   568  d63f03e0       constant
0x4cdb627c   572  d503201f       constant
0x4cdb6280   576  4cb06000       constant
0x4cdb6284   580  00000000       constant


Safepoints (size = 21)
0x4cdb61c4   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0x4cdb608c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cdb60a4  embedded object  (0x21004241 <undefined>)
0x4cdb60f0  code target (STUB)  (0x4cd370c0)
0x4cdb6130  code target (STUB)  (0x4cd378a0)
0x4cdb6168  code target (STUB)  (0x4cd38080)
0x4cdb6198  code target (STUB)  (0x4cd06820)
0x4cdb61bc  code target (STUB)  (0x4cd06260)
0x4cdb61c8  code target (STUB)  (0x4cd068e0)
0x4cdb61dc  constant pool (size 76)
0x4cdb6268  runtime entry
0x4cdb6274  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 605)
0x4cdb6040     0  ldur x6, [x1, #7]
0x4cdb6044     4  ldur w7, [x6, #11]
0x4cdb6048     8  adds w8, w7, #0x3 (3)
0x4cdb604c    12  b.vs #+0x1dc (addr 0x4cdb6228)
0x4cdb6050    16  movz w16, #0x95ff
0x4cdb6054    20  cmp w8, w16, lsl #1
0x4cdb6058    24  b.hs #+0x1e0 (addr 0x4cdb6238)
0x4cdb605c    28  lsl x9, x8, #32
0x4cdb6060    32  lsl w10, w8, #3
0x4cdb6064    36  add w10, w10, #0x10 (16)
0x4cdb6068    40  sxtw x10, w10
0x4cdb606c    44  movz x11, #0xd2c0
0x4cdb6070    48  movk x11, #0x166d, lsl #16
0x4cdb6074    52  ldp x13, x16, [x11]
0x4cdb6078    56  adds x12, x13, x10
0x4cdb607c    60  ccmp x12, x16, #nzCv, lo
0x4cdb6080    64  b.hi #+0xf8 (addr 0x4cdb6178)
0x4cdb6084    68  str x12, [x11]
0x4cdb6088    72  orr x13, x13, #0x1
0x4cdb608c    76  ldr x10, pc+348 (addr 0x000000004cdb61e8)    ;; object: 0x2a804259 <Map(FAST_SMI_ELEMENTS)>
0x4cdb6090    80  stur x10, [x13, #-1]
0x4cdb6094    84  stur x9, [x13, #7]
0x4cdb6098    88  cmp w7, w8
0x4cdb609c    92  b.ge #+0x18 (addr 0x4cdb60b4)
0x4cdb60a0    96  sub w8, w8, #0x1 (1)
0x4cdb60a4   100  ldr x9, pc+332 (addr 0x000000004cdb61f0)    ;; object: 0x21004241 <undefined>
0x4cdb60a8   104  add x10, x13, #0xf (15)
0x4cdb60ac   108  str x9, [x10, w8, sxtw #3]
0x4cdb60b0   112  b #-0x18 (addr 0x4cdb6098)
0x4cdb60b4   116  cmp w7, #0x0 (0)
0x4cdb60b8   120  b.le #+0x1c (addr 0x4cdb60d4)
0x4cdb60bc   124  sub w7, w7, #0x1 (1)
0x4cdb60c0   128  add x8, x6, #0xf (15)
0x4cdb60c4   132  ldr x9, [x8, w7, sxtw #3]
0x4cdb60c8   136  add x8, x13, #0xf (15)
0x4cdb60cc   140  str x9, [x8, w7, sxtw #3]
0x4cdb60d0   144  b #-0x1c (addr 0x4cdb60b4)
0x4cdb60d4   148  stur x13, [x1, #7]
0x4cdb60d8   152  add x6, x1, #0x7 (7)
0x4cdb60dc   156  and x13, x1, #0xfffffffffff00000
0x4cdb60e0   160  ldr x13, [x13, #8]
0x4cdb60e4   164  tbz w13, #2, #+0x18 (addr 0x4cdb60fc)
0x4cdb60e8   168  sub csp, jssp, #0x8 (8)
0x4cdb60ec   172  str lr, [jssp, #-8]!
0x4cdb60f0   176  ldr x16, pc+264 (addr 0x000000004cdb61f8)    ;; code: STUB, RecordWriteStub, minor: 72097
0x4cdb60f4   180  blr x16
0x4cdb60f8   184  ldr lr, [jssp], #8
0x4cdb60fc   188  tbz w0, #0, #+0x14c (addr 0x4cdb6248)
0x4cdb6100   192  mov x2, x0
0x4cdb6104   196  ldur x4, [x1, #7]
0x4cdb6108   200  stur x2, [x4, #111]
0x4cdb610c   204  add x3, x4, #0x6f (111)
0x4cdb6110   208  and x2, x2, #0xfffffffffff00000
0x4cdb6114   212  ldr x2, [x2, #8]
0x4cdb6118   216  tbz w2, #1, #+0x24 (addr 0x4cdb613c)
0x4cdb611c   220  and x2, x4, #0xfffffffffff00000
0x4cdb6120   224  ldr x2, [x2, #8]
0x4cdb6124   228  tbz w2, #2, #+0x18 (addr 0x4cdb613c)
0x4cdb6128   232  sub csp, jssp, #0x8 (8)
0x4cdb612c   236  str lr, [jssp, #-8]!
0x4cdb6130   240  ldr x16, pc+208 (addr 0x000000004cdb6200)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdb6134   244  blr x16
0x4cdb6138   248  ldr lr, [jssp], #8
0x4cdb613c   252  stur x5, [x1, #-1]
0x4cdb6140   256  tbz w5, #0, #+0x34 (addr 0x4cdb6174)
0x4cdb6144   260  sub x2, x1, #0x1 (1)
0x4cdb6148   264  and x5, x5, #0xfffffffffff00000
0x4cdb614c   268  ldr x5, [x5, #8]
0x4cdb6150   272  tbz w5, #1, #+0x24 (addr 0x4cdb6174)
0x4cdb6154   276  and x5, x1, #0xfffffffffff00000
0x4cdb6158   280  ldr x5, [x5, #8]
0x4cdb615c   284  tbz w5, #2, #+0x18 (addr 0x4cdb6174)
0x4cdb6160   288  sub csp, jssp, #0x8 (8)
0x4cdb6164   292  str lr, [jssp, #-8]!
0x4cdb6168   296  ldr x16, pc+160 (addr 0x000000004cdb6208)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdb616c   300  blr x16
0x4cdb6170   304  ldr lr, [jssp], #8
0x4cdb6174   308  ret
0x4cdb6178   312  sub csp, jssp, #0x10 (16)
0x4cdb617c   316  stp fp, lr, [jssp, #-16]!
0x4cdb6180   320  movz fp, #0xa00000000
0x4cdb6184   324  sub csp, jssp, #0x8 (8)
0x4cdb6188   328  str fp, [jssp, #-8]!
0x4cdb618c   332  add fp, jssp, #0x8 (8)
0x4cdb6190   336  movz x13, #0x0
0x4cdb6194   340  mov x16, lr
0x4cdb6198   344  ldr x17, pc+120 (addr 0x000000004cdb6210)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdb619c   348  blr x17
0x4cdb61a0   352  lsl x0, x10, #32
0x4cdb61a4   356  movz x10, #0x0
0x4cdb61a8   360  sub csp, jssp, #0x10 (16)
0x4cdb61ac   364  stp x10, x0, [jssp, #-16]!
0x4cdb61b0   368  movz x0, #0x2
0x4cdb61b4   372  movz x1, #0x5b88
0x4cdb61b8   376  movk x1, #0xe2, lsl #16
0x4cdb61bc   380  ldr x16, pc+92 (addr 0x000000004cdb6218)    ;; code: STUB, CEntryStub, minor: 5
0x4cdb61c0   384  blr x16
0x4cdb61c4   388  str x0, [jssp, #104]
0x4cdb61c8   392  ldr x16, pc+88 (addr 0x000000004cdb6220)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdb61cc   396  blr x16
0x4cdb61d0   400  ldr lr, [jssp, #16]
0x4cdb61d4   404  ldp xzr, fp, [jssp], #24
0x4cdb61d8   408  b #-0x14c (addr 0x4cdb608c)
0x4cdb61dc   412  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0x4cdb61e0   416  d63f03e0       constant
0x4cdb61e4   420  d503201f       constant
0x4cdb61e8   424  2a804259       constant
0x4cdb61ec   428  00000000       constant
0x4cdb61f0   432  21004241       constant
0x4cdb61f4   436  00000000       constant
0x4cdb61f8   440  4cd370c0       constant
0x4cdb61fc   444  00000000       constant
0x4cdb6200   448  4cd378a0       constant
0x4cdb6204   452  00000000       constant
0x4cdb6208   456  4cd38080       constant
0x4cdb620c   460  00000000       constant
0x4cdb6210   464  4cd06820       constant
0x4cdb6214   468  00000000       constant
0x4cdb6218   472  4cd06260       constant
0x4cdb621c   476  00000000       constant
0x4cdb6220   480  4cd068e0       constant
0x4cdb6224   484  00000000       constant
0x4cdb6228   488  movz x16, #0x0
0x4cdb622c   492  sub csp, jssp, #0x10 (16)
0x4cdb6230   496  stp fp, lr, [jssp, #-16]!
0x4cdb6234   500  bl #+0x24 (addr 0x4cdb6258)
0x4cdb6238   504  movz x16, #0x8
0x4cdb623c   508  sub csp, jssp, #0x10 (16)
0x4cdb6240   512  stp fp, lr, [jssp, #-16]!
0x4cdb6244   516  bl #+0x14 (addr 0x4cdb6258)
0x4cdb6248   520  movz x16, #0x10
0x4cdb624c   524  sub csp, jssp, #0x10 (16)
0x4cdb6250   528  stp fp, lr, [jssp, #-16]!
0x4cdb6254   532  bl #+0x4 (addr 0x4cdb6258)
0x4cdb6258   536  movz x17, #0xa00000000
0x4cdb625c   540  sub csp, jssp, #0x10 (16)
0x4cdb6260   544  stp x17, cp, [jssp, #-16]!
0x4cdb6264   548  add fp, jssp, #0x10 (16)
0x4cdb6268   552  ldr x17, pc+24 (addr 0x000000004cdb6280)    ;; lazy deoptimization bailout 0
0x4cdb626c   556  add x17, x17, x16
0x4cdb6270   560  br x17
0x4cdb6274   564  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdb6278   568  d63f03e0       constant
0x4cdb627c   572  d503201f       constant
0x4cdb6280   576  4cb06000       constant
0x4cdb6284   580  00000000       constant


Safepoints (size = 21)
0x4cdb61c4   388  000 | x0 | x1 | x2 | x3 | x5 | x6 | x13 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 30)
0x4cdb608c  embedded object  (0x2a804259 <Map(FAST_SMI_ELEMENTS)>)
0x4cdb60a4  embedded object  (0x21004241 <undefined>)
0x4cdb60f0  code target (STUB)  (0x4cd370c0)
0x4cdb6130  code target (STUB)  (0x4cd378a0)
0x4cdb6168  code target (STUB)  (0x4cd38080)
0x4cdb6198  code target (STUB)  (0x4cd06820)
0x4cdb61bc  code target (STUB)  (0x4cd06260)
0x4cdb61c8  code target (STUB)  (0x4cd068e0)
0x4cdb61dc  constant pool (size 76)
0x4cdb6268  runtime entry
0x4cdb6274  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = fs
compiler = unknown
Instructions (size = 184)
0x4cdb6300     0  sub csp, jssp, #0x8 (8)
0x4cdb6304     4  str x3, [jssp, #-8]!
0x4cdb6308     8  sub csp, jssp, #0x8 (8)
0x4cdb630c    12  str x4, [jssp, #-8]!
0x4cdb6310    16  ldr x3, pc+112 (addr 0x000000004cdb6380)    ;; object: 0x21063e59 Cell for 0
0x4cdb6314    20  ldur x3, [x3, #7]
0x4cdb6318    24  cmp x3, #0x0 (0)
0x4cdb631c    28  b.ne #+0x44 (addr 0x4cdb6360)
0x4cdb6320    32  tbz w0, #0, #+0x40 (addr 0x4cdb6360)
0x4cdb6324    36  ldur x3, [x0, #-1]
0x4cdb6328    40  ldr x4, pc+96 (addr 0x000000004cdb6388)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdb632c    44  ldur x4, [x4, #7]
0x4cdb6330    48  cmp x3, x4
0x4cdb6334    52  b.ne #+0x2c (addr 0x4cdb6360)
0x4cdb6338    56  ldr x5, pc+88 (addr 0x000000004cdb6390)    ;; object: 0xffffaa10ca39 WeakCell for 0x2a82d869 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdb633c    60  ldur x5, [x5, #7]
0x4cdb6340    64  tbz w5, #0, #+0x20 (addr 0x4cdb6360)
0x4cdb6344    68  ldursw x4, [x5, #15]
0x4cdb6348    72  tbnz w4, #23, #+0x18 (addr 0x4cdb6360)
0x4cdb634c    76  ldr x4, [jssp], #8
0x4cdb6350    80  ldr x3, [jssp], #8
0x4cdb6354    84  ldr x2, pc+68 (addr 0x000000004cdb6398)    ;; object: 0x210b9cd1 <String[2]: fs>
0x4cdb6358    88  ldr x16, pc+72 (addr 0x000000004cdb63a0)    ;; code: HANDLER, StoreTransitionStub, minor: 327694
0x4cdb635c    92  br x16
0x4cdb6360    96  ldr x2, pc+72 (addr 0x000000004cdb63a8)    ;; object: 0x210b9cd1 <String[2]: fs>
0x4cdb6364   100  ldr x4, [jssp], #8
0x4cdb6368   104  ldr x3, [jssp], #8
0x4cdb636c   108  ldr x16, pc+68 (addr 0x000000004cdb63b0)    ;; code: BUILTIN
0x4cdb6370   112  br x16
0x4cdb6374   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdb6378   120  d63f03e0       constant
0x4cdb637c   124  d503201f       constant
0x4cdb6380   128  21063e59       constant
0x4cdb6384   132  00000000       constant
0x4cdb6388   136  210c22b1       constant
0x4cdb638c   140  00000000       constant
0x4cdb6390   144  aa10ca39       constant
0x4cdb6394   148  0000ffff       constant
0x4cdb6398   152  210b9cd1       constant
0x4cdb639c   156  00000000       constant
0x4cdb63a0   160  4cdb6040       constant
0x4cdb63a4   164  00000000       constant
0x4cdb63a8   168  210b9cd1       constant
0x4cdb63ac   172  00000000       constant
0x4cdb63b0   176  4cd22420       constant
0x4cdb63b4   180  00000000       constant


RelocInfo (size = 13)
0x4cdb6310  embedded object  (0x21063e59 Cell for 0)
0x4cdb6328  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdb6338  embedded object  (0xffffaa10ca39 WeakCell for 0x2a82d869 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdb6354  embedded object  (0x210b9cd1 <String[2]: fs>)
0x4cdb6358  code target (HANDLER)  (0x4cdb6040)
0x4cdb6360  embedded object  (0x210b9cd1 <String[2]: fs>)
0x4cdb636c  code target (BUILTIN)  (0x4cd22420)
0x4cdb6374  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = runInThisContext
compiler = unknown
Instructions (size = 120)
0x4cdbc220     0  sub csp, jssp, #0x8 (8)
0x4cdbc224     4  str x3, [jssp, #-8]!
0x4cdbc228     8  sub csp, jssp, #0x8 (8)
0x4cdbc22c    12  str x0, [jssp, #-8]!
0x4cdbc230    16  ldr x0, pc+72 (addr 0x000000004cdbc278)    ;; object: 0xffffaa117749 Cell for 0
0x4cdbc234    20  ldur x0, [x0, #7]
0x4cdbc238    24  cmp x0, #0x0 (0)
0x4cdbc23c    28  b.ne #+0x14 (addr 0x4cdbc250)
0x4cdbc240    32  ldr x3, pc+64 (addr 0x000000004cdbc280)    ;; object: 0xffffaa117759 WeakCell for 0x48d51f71 <an Object with map 0x2a82d4f9>
0x4cdbc244    36  ldur x3, [x3, #7]
0x4cdbc248    40  tbz w3, #0, #+0x8 (addr 0x4cdbc250)
0x4cdbc24c    44  b #+0x14 (addr 0x4cdbc260)
0x4cdbc250    48  ldr x0, [jssp], #8
0x4cdbc254    52  ldr x3, [jssp], #8
0x4cdbc258    56  ldr x16, pc+48 (addr 0x000000004cdbc288)    ;; code: BUILTIN
0x4cdbc25c    60  br x16
0x4cdbc260    64  add jssp, jssp, #0x10 (16)
0x4cdbc264    68  mov x1, x3
0x4cdbc268    72  ldr x16, pc+40 (addr 0x000000004cdbc290)    ;; code: HANDLER, LoadFieldStub, minor: 2051
0x4cdbc26c    76  br x16
0x4cdbc270    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdbc274    84  d63f03e0       constant
0x4cdbc278    88  aa117749       constant
0x4cdbc27c    92  0000ffff       constant
0x4cdbc280    96  aa117759       constant
0x4cdbc284   100  0000ffff       constant
0x4cdbc288   104  4cd222e0       constant
0x4cdbc28c   108  00000000       constant
0x4cdbc290   112  4cd39340       constant
0x4cdbc294   116  00000000       constant


RelocInfo (size = 10)
0x4cdbc230  embedded object  (0xffffaa117749 Cell for 0)
0x4cdbc240  embedded object  (0xffffaa117759 WeakCell for 0x48d51f71 <an Object with map 0x2a82d4f9>)
0x4cdbc258  code target (BUILTIN)  (0x4cd222e0)
0x4cdbc268  code target (HANDLER)  (0x4cd39340)
0x4cdbc270  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cdbc5e0     0  tbz w0, #0, #+0x98 (addr 0x4cdbc678)
0x4cdbc5e4     4  mov x2, x0
0x4cdbc5e8     8  ldur x4, [x1, #7]
0x4cdbc5ec    12  stur x2, [x4, #119]
0x4cdbc5f0    16  add x3, x4, #0x77 (119)
0x4cdbc5f4    20  and x2, x2, #0xfffffffffff00000
0x4cdbc5f8    24  ldr x2, [x2, #8]
0x4cdbc5fc    28  tbz w2, #1, #+0x24 (addr 0x4cdbc620)
0x4cdbc600    32  and x2, x4, #0xfffffffffff00000
0x4cdbc604    36  ldr x2, [x2, #8]
0x4cdbc608    40  tbz w2, #2, #+0x18 (addr 0x4cdbc620)
0x4cdbc60c    44  sub csp, jssp, #0x8 (8)
0x4cdbc610    48  str lr, [jssp, #-8]!
0x4cdbc614    52  ldr x16, pc+84 (addr 0x000000004cdbc668)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdbc618    56  blr x16
0x4cdbc61c    60  ldr lr, [jssp], #8
0x4cdbc620    64  stur x5, [x1, #-1]
0x4cdbc624    68  tbz w5, #0, #+0x34 (addr 0x4cdbc658)
0x4cdbc628    72  sub x2, x1, #0x1 (1)
0x4cdbc62c    76  and x5, x5, #0xfffffffffff00000
0x4cdbc630    80  ldr x5, [x5, #8]
0x4cdbc634    84  tbz w5, #1, #+0x24 (addr 0x4cdbc658)
0x4cdbc638    88  and x5, x1, #0xfffffffffff00000
0x4cdbc63c    92  ldr x5, [x5, #8]
0x4cdbc640    96  tbz w5, #2, #+0x18 (addr 0x4cdbc658)
0x4cdbc644   100  sub csp, jssp, #0x8 (8)
0x4cdbc648   104  str lr, [jssp, #-8]!
0x4cdbc64c   108  ldr x16, pc+36 (addr 0x000000004cdbc670)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdbc650   112  blr x16
0x4cdbc654   116  ldr lr, [jssp], #8
0x4cdbc658   120  ret
0x4cdbc65c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cdbc660   128  d63f03e0       constant
0x4cdbc664   132  d503201f       constant
0x4cdbc668   136  4cd378a0       constant
0x4cdbc66c   140  00000000       constant
0x4cdbc670   144  4cd38080       constant
0x4cdbc674   148  00000000       constant
0x4cdbc678   152  movz x16, #0x0
0x4cdbc67c   156  sub csp, jssp, #0x10 (16)
0x4cdbc680   160  stp fp, lr, [jssp, #-16]!
0x4cdbc684   164  bl #+0x4 (addr 0x4cdbc688)
0x4cdbc688   168  movz x17, #0xa00000000
0x4cdbc68c   172  sub csp, jssp, #0x10 (16)
0x4cdbc690   176  stp x17, cp, [jssp, #-16]!
0x4cdbc694   180  add fp, jssp, #0x10 (16)
0x4cdbc698   184  ldr x17, pc+24 (addr 0x000000004cdbc6b0)    ;; lazy deoptimization bailout 0
0x4cdbc69c   188  add x17, x17, x16
0x4cdbc6a0   192  br x17
0x4cdbc6a4   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdbc6a8   200  d63f03e0       constant
0x4cdbc6ac   204  d503201f       constant
0x4cdbc6b0   208  4cb06000       constant
0x4cdbc6b4   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdbc614  code target (STUB)  (0x4cd378a0)
0x4cdbc64c  code target (STUB)  (0x4cd38080)
0x4cdbc65c  constant pool (size 28)
0x4cdbc698  runtime entry
0x4cdbc6a4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cdbc5e0     0  tbz w0, #0, #+0x98 (addr 0x4cdbc678)
0x4cdbc5e4     4  mov x2, x0
0x4cdbc5e8     8  ldur x4, [x1, #7]
0x4cdbc5ec    12  stur x2, [x4, #119]
0x4cdbc5f0    16  add x3, x4, #0x77 (119)
0x4cdbc5f4    20  and x2, x2, #0xfffffffffff00000
0x4cdbc5f8    24  ldr x2, [x2, #8]
0x4cdbc5fc    28  tbz w2, #1, #+0x24 (addr 0x4cdbc620)
0x4cdbc600    32  and x2, x4, #0xfffffffffff00000
0x4cdbc604    36  ldr x2, [x2, #8]
0x4cdbc608    40  tbz w2, #2, #+0x18 (addr 0x4cdbc620)
0x4cdbc60c    44  sub csp, jssp, #0x8 (8)
0x4cdbc610    48  str lr, [jssp, #-8]!
0x4cdbc614    52  ldr x16, pc+84 (addr 0x000000004cdbc668)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdbc618    56  blr x16
0x4cdbc61c    60  ldr lr, [jssp], #8
0x4cdbc620    64  stur x5, [x1, #-1]
0x4cdbc624    68  tbz w5, #0, #+0x34 (addr 0x4cdbc658)
0x4cdbc628    72  sub x2, x1, #0x1 (1)
0x4cdbc62c    76  and x5, x5, #0xfffffffffff00000
0x4cdbc630    80  ldr x5, [x5, #8]
0x4cdbc634    84  tbz w5, #1, #+0x24 (addr 0x4cdbc658)
0x4cdbc638    88  and x5, x1, #0xfffffffffff00000
0x4cdbc63c    92  ldr x5, [x5, #8]
0x4cdbc640    96  tbz w5, #2, #+0x18 (addr 0x4cdbc658)
0x4cdbc644   100  sub csp, jssp, #0x8 (8)
0x4cdbc648   104  str lr, [jssp, #-8]!
0x4cdbc64c   108  ldr x16, pc+36 (addr 0x000000004cdbc670)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdbc650   112  blr x16
0x4cdbc654   116  ldr lr, [jssp], #8
0x4cdbc658   120  ret
0x4cdbc65c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cdbc660   128  d63f03e0       constant
0x4cdbc664   132  d503201f       constant
0x4cdbc668   136  4cd378a0       constant
0x4cdbc66c   140  00000000       constant
0x4cdbc670   144  4cd38080       constant
0x4cdbc674   148  00000000       constant
0x4cdbc678   152  movz x16, #0x0
0x4cdbc67c   156  sub csp, jssp, #0x10 (16)
0x4cdbc680   160  stp fp, lr, [jssp, #-16]!
0x4cdbc684   164  bl #+0x4 (addr 0x4cdbc688)
0x4cdbc688   168  movz x17, #0xa00000000
0x4cdbc68c   172  sub csp, jssp, #0x10 (16)
0x4cdbc690   176  stp x17, cp, [jssp, #-16]!
0x4cdbc694   180  add fp, jssp, #0x10 (16)
0x4cdbc698   184  ldr x17, pc+24 (addr 0x000000004cdbc6b0)    ;; lazy deoptimization bailout 0
0x4cdbc69c   188  add x17, x17, x16
0x4cdbc6a0   192  br x17
0x4cdbc6a4   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdbc6a8   200  d63f03e0       constant
0x4cdbc6ac   204  d503201f       constant
0x4cdbc6b0   208  4cb06000       constant
0x4cdbc6b4   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdbc614  code target (STUB)  (0x4cd378a0)
0x4cdbc64c  code target (STUB)  (0x4cd38080)
0x4cdbc65c  constant pool (size 28)
0x4cdbc698  runtime entry
0x4cdbc6a4  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = stream
compiler = unknown
Instructions (size = 184)
0x4cdbc720     0  sub csp, jssp, #0x8 (8)
0x4cdbc724     4  str x3, [jssp, #-8]!
0x4cdbc728     8  sub csp, jssp, #0x8 (8)
0x4cdbc72c    12  str x4, [jssp, #-8]!
0x4cdbc730    16  ldr x3, pc+112 (addr 0x000000004cdbc7a0)    ;; object: 0x21063e59 Cell for 0
0x4cdbc734    20  ldur x3, [x3, #7]
0x4cdbc738    24  cmp x3, #0x0 (0)
0x4cdbc73c    28  b.ne #+0x44 (addr 0x4cdbc780)
0x4cdbc740    32  tbz w0, #0, #+0x40 (addr 0x4cdbc780)
0x4cdbc744    36  ldur x3, [x0, #-1]
0x4cdbc748    40  ldr x4, pc+96 (addr 0x000000004cdbc7a8)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdbc74c    44  ldur x4, [x4, #7]
0x4cdbc750    48  cmp x3, x4
0x4cdbc754    52  b.ne #+0x2c (addr 0x4cdbc780)
0x4cdbc758    56  ldr x5, pc+88 (addr 0x000000004cdbc7b0)    ;; object: 0xffffaa11c4a9 WeakCell for 0x2a82fe91 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdbc75c    60  ldur x5, [x5, #7]
0x4cdbc760    64  tbz w5, #0, #+0x20 (addr 0x4cdbc780)
0x4cdbc764    68  ldursw x4, [x5, #15]
0x4cdbc768    72  tbnz w4, #23, #+0x18 (addr 0x4cdbc780)
0x4cdbc76c    76  ldr x4, [jssp], #8
0x4cdbc770    80  ldr x3, [jssp], #8
0x4cdbc774    84  ldr x2, pc+68 (addr 0x000000004cdbc7b8)    ;; object: 0x210be091 <String[6]: stream>
0x4cdbc778    88  ldr x16, pc+72 (addr 0x000000004cdbc7c0)    ;; code: HANDLER, StoreTransitionStub, minor: 196623
0x4cdbc77c    92  br x16
0x4cdbc780    96  ldr x2, pc+72 (addr 0x000000004cdbc7c8)    ;; object: 0x210be091 <String[6]: stream>
0x4cdbc784   100  ldr x4, [jssp], #8
0x4cdbc788   104  ldr x3, [jssp], #8
0x4cdbc78c   108  ldr x16, pc+68 (addr 0x000000004cdbc7d0)    ;; code: BUILTIN
0x4cdbc790   112  br x16
0x4cdbc794   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdbc798   120  d63f03e0       constant
0x4cdbc79c   124  d503201f       constant
0x4cdbc7a0   128  21063e59       constant
0x4cdbc7a4   132  00000000       constant
0x4cdbc7a8   136  210c22b1       constant
0x4cdbc7ac   140  00000000       constant
0x4cdbc7b0   144  aa11c4a9       constant
0x4cdbc7b4   148  0000ffff       constant
0x4cdbc7b8   152  210be091       constant
0x4cdbc7bc   156  00000000       constant
0x4cdbc7c0   160  4cdbc5e0       constant
0x4cdbc7c4   164  00000000       constant
0x4cdbc7c8   168  210be091       constant
0x4cdbc7cc   172  00000000       constant
0x4cdbc7d0   176  4cd22420       constant
0x4cdbc7d4   180  00000000       constant


RelocInfo (size = 13)
0x4cdbc730  embedded object  (0x21063e59 Cell for 0)
0x4cdbc748  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdbc758  embedded object  (0xffffaa11c4a9 WeakCell for 0x2a82fe91 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdbc774  embedded object  (0x210be091 <String[6]: stream>)
0x4cdbc778  code target (HANDLER)  (0x4cdbc5e0)
0x4cdbc780  embedded object  (0x210be091 <String[6]: stream>)
0x4cdbc78c  code target (BUILTIN)  (0x4cd22420)
0x4cdbc794  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = call
compiler = unknown
Instructions (size = 120)
0x4cdbce00     0  sub csp, jssp, #0x8 (8)
0x4cdbce04     4  str x3, [jssp, #-8]!
0x4cdbce08     8  sub csp, jssp, #0x8 (8)
0x4cdbce0c    12  str x0, [jssp, #-8]!
0x4cdbce10    16  ldr x0, pc+72 (addr 0x000000004cdbce58)    ;; object: 0x2105b0f1 Cell for 0
0x4cdbce14    20  ldur x0, [x0, #7]
0x4cdbce18    24  cmp x0, #0x0 (0)
0x4cdbce1c    28  b.ne #+0x14 (addr 0x4cdbce30)
0x4cdbce20    32  ldr x3, pc+64 (addr 0x000000004cdbce60)    ;; object: 0xffffaa11cb01 WeakCell for 0x21040019 <JS Function (SharedFunctionInfo 0x2103ff71)>
0x4cdbce24    36  ldur x3, [x3, #7]
0x4cdbce28    40  tbz w3, #0, #+0x8 (addr 0x4cdbce30)
0x4cdbce2c    44  b #+0x14 (addr 0x4cdbce40)
0x4cdbce30    48  ldr x0, [jssp], #8
0x4cdbce34    52  ldr x3, [jssp], #8
0x4cdbce38    56  ldr x16, pc+48 (addr 0x000000004cdbce68)    ;; code: BUILTIN
0x4cdbce3c    60  br x16
0x4cdbce40    64  add jssp, jssp, #0x10 (16)
0x4cdbce44    68  mov x1, x3
0x4cdbce48    72  ldr x16, pc+40 (addr 0x000000004cdbce70)    ;; code: HANDLER, LoadConstantStub, minor: 6
0x4cdbce4c    76  br x16
0x4cdbce50    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdbce54    84  d63f03e0       constant
0x4cdbce58    88  2105b0f1       constant
0x4cdbce5c    92  00000000       constant
0x4cdbce60    96  aa11cb01       constant
0x4cdbce64   100  0000ffff       constant
0x4cdbce68   104  4cd222e0       constant
0x4cdbce6c   108  00000000       constant
0x4cdbce70   112  4cd8b020       constant
0x4cdbce74   116  00000000       constant


RelocInfo (size = 10)
0x4cdbce10  embedded object  (0x2105b0f1 Cell for 0)
0x4cdbce20  embedded object  (0xffffaa11cb01 WeakCell for 0x21040019 <JS Function (SharedFunctionInfo 0x2103ff71)>)
0x4cdbce38  code target (BUILTIN)  (0x4cd222e0)
0x4cdbce48  code target (HANDLER)  (0x4cd8b020)
0x4cdbce50  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cdbcee0     0  tbz w0, #0, #+0x98 (addr 0x4cdbcf78)
0x4cdbcee4     4  mov x2, x0
0x4cdbcee8     8  ldur x4, [x1, #7]
0x4cdbceec    12  stur x2, [x4, #127]
0x4cdbcef0    16  add x3, x4, #0x7f (127)
0x4cdbcef4    20  and x2, x2, #0xfffffffffff00000
0x4cdbcef8    24  ldr x2, [x2, #8]
0x4cdbcefc    28  tbz w2, #1, #+0x24 (addr 0x4cdbcf20)
0x4cdbcf00    32  and x2, x4, #0xfffffffffff00000
0x4cdbcf04    36  ldr x2, [x2, #8]
0x4cdbcf08    40  tbz w2, #2, #+0x18 (addr 0x4cdbcf20)
0x4cdbcf0c    44  sub csp, jssp, #0x8 (8)
0x4cdbcf10    48  str lr, [jssp, #-8]!
0x4cdbcf14    52  ldr x16, pc+84 (addr 0x000000004cdbcf68)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdbcf18    56  blr x16
0x4cdbcf1c    60  ldr lr, [jssp], #8
0x4cdbcf20    64  stur x5, [x1, #-1]
0x4cdbcf24    68  tbz w5, #0, #+0x34 (addr 0x4cdbcf58)
0x4cdbcf28    72  sub x2, x1, #0x1 (1)
0x4cdbcf2c    76  and x5, x5, #0xfffffffffff00000
0x4cdbcf30    80  ldr x5, [x5, #8]
0x4cdbcf34    84  tbz w5, #1, #+0x24 (addr 0x4cdbcf58)
0x4cdbcf38    88  and x5, x1, #0xfffffffffff00000
0x4cdbcf3c    92  ldr x5, [x5, #8]
0x4cdbcf40    96  tbz w5, #2, #+0x18 (addr 0x4cdbcf58)
0x4cdbcf44   100  sub csp, jssp, #0x8 (8)
0x4cdbcf48   104  str lr, [jssp, #-8]!
0x4cdbcf4c   108  ldr x16, pc+36 (addr 0x000000004cdbcf70)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdbcf50   112  blr x16
0x4cdbcf54   116  ldr lr, [jssp], #8
0x4cdbcf58   120  ret
0x4cdbcf5c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cdbcf60   128  d63f03e0       constant
0x4cdbcf64   132  d503201f       constant
0x4cdbcf68   136  4cd378a0       constant
0x4cdbcf6c   140  00000000       constant
0x4cdbcf70   144  4cd38080       constant
0x4cdbcf74   148  00000000       constant
0x4cdbcf78   152  movz x16, #0x0
0x4cdbcf7c   156  sub csp, jssp, #0x10 (16)
0x4cdbcf80   160  stp fp, lr, [jssp, #-16]!
0x4cdbcf84   164  bl #+0x4 (addr 0x4cdbcf88)
0x4cdbcf88   168  movz x17, #0xa00000000
0x4cdbcf8c   172  sub csp, jssp, #0x10 (16)
0x4cdbcf90   176  stp x17, cp, [jssp, #-16]!
0x4cdbcf94   180  add fp, jssp, #0x10 (16)
0x4cdbcf98   184  ldr x17, pc+24 (addr 0x000000004cdbcfb0)    ;; lazy deoptimization bailout 0
0x4cdbcf9c   188  add x17, x17, x16
0x4cdbcfa0   192  br x17
0x4cdbcfa4   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdbcfa8   200  d63f03e0       constant
0x4cdbcfac   204  d503201f       constant
0x4cdbcfb0   208  4cb06000       constant
0x4cdbcfb4   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdbcf14  code target (STUB)  (0x4cd378a0)
0x4cdbcf4c  code target (STUB)  (0x4cd38080)
0x4cdbcf5c  constant pool (size 28)
0x4cdbcf98  runtime entry
0x4cdbcfa4  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cdbcee0     0  tbz w0, #0, #+0x98 (addr 0x4cdbcf78)
0x4cdbcee4     4  mov x2, x0
0x4cdbcee8     8  ldur x4, [x1, #7]
0x4cdbceec    12  stur x2, [x4, #127]
0x4cdbcef0    16  add x3, x4, #0x7f (127)
0x4cdbcef4    20  and x2, x2, #0xfffffffffff00000
0x4cdbcef8    24  ldr x2, [x2, #8]
0x4cdbcefc    28  tbz w2, #1, #+0x24 (addr 0x4cdbcf20)
0x4cdbcf00    32  and x2, x4, #0xfffffffffff00000
0x4cdbcf04    36  ldr x2, [x2, #8]
0x4cdbcf08    40  tbz w2, #2, #+0x18 (addr 0x4cdbcf20)
0x4cdbcf0c    44  sub csp, jssp, #0x8 (8)
0x4cdbcf10    48  str lr, [jssp, #-8]!
0x4cdbcf14    52  ldr x16, pc+84 (addr 0x000000004cdbcf68)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdbcf18    56  blr x16
0x4cdbcf1c    60  ldr lr, [jssp], #8
0x4cdbcf20    64  stur x5, [x1, #-1]
0x4cdbcf24    68  tbz w5, #0, #+0x34 (addr 0x4cdbcf58)
0x4cdbcf28    72  sub x2, x1, #0x1 (1)
0x4cdbcf2c    76  and x5, x5, #0xfffffffffff00000
0x4cdbcf30    80  ldr x5, [x5, #8]
0x4cdbcf34    84  tbz w5, #1, #+0x24 (addr 0x4cdbcf58)
0x4cdbcf38    88  and x5, x1, #0xfffffffffff00000
0x4cdbcf3c    92  ldr x5, [x5, #8]
0x4cdbcf40    96  tbz w5, #2, #+0x18 (addr 0x4cdbcf58)
0x4cdbcf44   100  sub csp, jssp, #0x8 (8)
0x4cdbcf48   104  str lr, [jssp, #-8]!
0x4cdbcf4c   108  ldr x16, pc+36 (addr 0x000000004cdbcf70)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdbcf50   112  blr x16
0x4cdbcf54   116  ldr lr, [jssp], #8
0x4cdbcf58   120  ret
0x4cdbcf5c   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cdbcf60   128  d63f03e0       constant
0x4cdbcf64   132  d503201f       constant
0x4cdbcf68   136  4cd378a0       constant
0x4cdbcf6c   140  00000000       constant
0x4cdbcf70   144  4cd38080       constant
0x4cdbcf74   148  00000000       constant
0x4cdbcf78   152  movz x16, #0x0
0x4cdbcf7c   156  sub csp, jssp, #0x10 (16)
0x4cdbcf80   160  stp fp, lr, [jssp, #-16]!
0x4cdbcf84   164  bl #+0x4 (addr 0x4cdbcf88)
0x4cdbcf88   168  movz x17, #0xa00000000
0x4cdbcf8c   172  sub csp, jssp, #0x10 (16)
0x4cdbcf90   176  stp x17, cp, [jssp, #-16]!
0x4cdbcf94   180  add fp, jssp, #0x10 (16)
0x4cdbcf98   184  ldr x17, pc+24 (addr 0x000000004cdbcfb0)    ;; lazy deoptimization bailout 0
0x4cdbcf9c   188  add x17, x17, x16
0x4cdbcfa0   192  br x17
0x4cdbcfa4   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdbcfa8   200  d63f03e0       constant
0x4cdbcfac   204  d503201f       constant
0x4cdbcfb0   208  4cb06000       constant
0x4cdbcfb4   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdbcf14  code target (STUB)  (0x4cd378a0)
0x4cdbcf4c  code target (STUB)  (0x4cd38080)
0x4cdbcf5c  constant pool (size 28)
0x4cdbcf98  runtime entry
0x4cdbcfa4  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = internal/streams/legacy
compiler = unknown
Instructions (size = 184)
0x4cdbd020     0  sub csp, jssp, #0x8 (8)
0x4cdbd024     4  str x3, [jssp, #-8]!
0x4cdbd028     8  sub csp, jssp, #0x8 (8)
0x4cdbd02c    12  str x4, [jssp, #-8]!
0x4cdbd030    16  ldr x3, pc+112 (addr 0x000000004cdbd0a0)    ;; object: 0x21063e59 Cell for 0
0x4cdbd034    20  ldur x3, [x3, #7]
0x4cdbd038    24  cmp x3, #0x0 (0)
0x4cdbd03c    28  b.ne #+0x44 (addr 0x4cdbd080)
0x4cdbd040    32  tbz w0, #0, #+0x40 (addr 0x4cdbd080)
0x4cdbd044    36  ldur x3, [x0, #-1]
0x4cdbd048    40  ldr x4, pc+96 (addr 0x000000004cdbd0a8)    ;; object: 0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdbd04c    44  ldur x4, [x4, #7]
0x4cdbd050    48  cmp x3, x4
0x4cdbd054    52  b.ne #+0x2c (addr 0x4cdbd080)
0x4cdbd058    56  ldr x5, pc+88 (addr 0x000000004cdbd0b0)    ;; object: 0xffffaa11cc81 WeakCell for 0x2a82fee9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdbd05c    60  ldur x5, [x5, #7]
0x4cdbd060    64  tbz w5, #0, #+0x20 (addr 0x4cdbd080)
0x4cdbd064    68  ldursw x4, [x5, #15]
0x4cdbd068    72  tbnz w4, #23, #+0x18 (addr 0x4cdbd080)
0x4cdbd06c    76  ldr x4, [jssp], #8
0x4cdbd070    80  ldr x3, [jssp], #8
0x4cdbd074    84  ldr x2, pc+68 (addr 0x000000004cdbd0b8)    ;; object: 0x210be491 <String[23]: internal/streams/legacy>
0x4cdbd078    88  ldr x16, pc+72 (addr 0x000000004cdbd0c0)    ;; code: HANDLER, StoreTransitionStub, minor: 196624
0x4cdbd07c    92  br x16
0x4cdbd080    96  ldr x2, pc+72 (addr 0x000000004cdbd0c8)    ;; object: 0x210be491 <String[23]: internal/streams/legacy>
0x4cdbd084   100  ldr x4, [jssp], #8
0x4cdbd088   104  ldr x3, [jssp], #8
0x4cdbd08c   108  ldr x16, pc+68 (addr 0x000000004cdbd0d0)    ;; code: BUILTIN
0x4cdbd090   112  br x16
0x4cdbd094   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdbd098   120  d63f03e0       constant
0x4cdbd09c   124  d503201f       constant
0x4cdbd0a0   128  21063e59       constant
0x4cdbd0a4   132  00000000       constant
0x4cdbd0a8   136  210c22b1       constant
0x4cdbd0ac   140  00000000       constant
0x4cdbd0b0   144  aa11cc81       constant
0x4cdbd0b4   148  0000ffff       constant
0x4cdbd0b8   152  210be491       constant
0x4cdbd0bc   156  00000000       constant
0x4cdbd0c0   160  4cdbcee0       constant
0x4cdbd0c4   164  00000000       constant
0x4cdbd0c8   168  210be491       constant
0x4cdbd0cc   172  00000000       constant
0x4cdbd0d0   176  4cd22420       constant
0x4cdbd0d4   180  00000000       constant


RelocInfo (size = 13)
0x4cdbd030  embedded object  (0x21063e59 Cell for 0)
0x4cdbd048  embedded object  (0x210c22b1 WeakCell for 0x2a81b439 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdbd058  embedded object  (0xffffaa11cc81 WeakCell for 0x2a82fee9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdbd074  embedded object  (0x210be491 <String[23]: internal/streams/legacy>)
0x4cdbd078  code target (HANDLER)  (0x4cdbcee0)
0x4cdbd080  embedded object  (0x210be491 <String[23]: internal/streams/legacy>)
0x4cdbd08c  code target (BUILTIN)  (0x4cd22420)
0x4cdbd094  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = super_
compiler = unknown
Instructions (size = 152)
0x4cdbd620     0  sub csp, jssp, #0x8 (8)
0x4cdbd624     4  str x3, [jssp, #-8]!
0x4cdbd628     8  sub csp, jssp, #0x8 (8)
0x4cdbd62c    12  str x4, [jssp, #-8]!
0x4cdbd630    16  ldr x3, pc+88 (addr 0x000000004cdbd688)    ;; object: 0x2105b0f1 Cell for 0
0x4cdbd634    20  ldur x3, [x3, #7]
0x4cdbd638    24  cmp x3, #0x0 (0)
0x4cdbd63c    28  b.ne #+0x30 (addr 0x4cdbd66c)
0x4cdbd640    32  tbz w0, #0, #+0x2c (addr 0x4cdbd66c)
0x4cdbd644    36  ldr x5, pc+76 (addr 0x000000004cdbd690)    ;; object: 0xffffaa11d5d9 WeakCell for 0x2a82ff41 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdbd648    40  ldur x5, [x5, #7]
0x4cdbd64c    44  tbz w5, #0, #+0x20 (addr 0x4cdbd66c)
0x4cdbd650    48  ldursw x4, [x5, #15]
0x4cdbd654    52  tbnz w4, #23, #+0x18 (addr 0x4cdbd66c)
0x4cdbd658    56  ldr x4, [jssp], #8
0x4cdbd65c    60  ldr x3, [jssp], #8
0x4cdbd660    64  ldr x2, pc+56 (addr 0x000000004cdbd698)    ;; object: 0x210c9f09 <String[6]: super_>
0x4cdbd664    68  ldr x16, pc+60 (addr 0x000000004cdbd6a0)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0x4cdbd668    72  br x16
0x4cdbd66c    76  ldr x2, pc+60 (addr 0x000000004cdbd6a8)    ;; object: 0x210c9f09 <String[6]: super_>
0x4cdbd670    80  ldr x4, [jssp], #8
0x4cdbd674    84  ldr x3, [jssp], #8
0x4cdbd678    88  ldr x16, pc+56 (addr 0x000000004cdbd6b0)    ;; code: BUILTIN
0x4cdbd67c    92  br x16
0x4cdbd680    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdbd684   100  d63f03e0       constant
0x4cdbd688   104  2105b0f1       constant
0x4cdbd68c   108  00000000       constant
0x4cdbd690   112  aa11d5d9       constant
0x4cdbd694   116  0000ffff       constant
0x4cdbd698   120  210c9f09       constant
0x4cdbd69c   124  00000000       constant
0x4cdbd6a0   128  4cd38860       constant
0x4cdbd6a4   132  00000000       constant
0x4cdbd6a8   136  210c9f09       constant
0x4cdbd6ac   140  00000000       constant
0x4cdbd6b0   144  4cd22420       constant
0x4cdbd6b4   148  00000000       constant


RelocInfo (size = 12)
0x4cdbd630  embedded object  (0x2105b0f1 Cell for 0)
0x4cdbd644  embedded object  (0xffffaa11d5d9 WeakCell for 0x2a82ff41 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdbd660  embedded object  (0x210c9f09 <String[6]: super_>)
0x4cdbd664  code target (HANDLER)  (0x4cd38860)
0x4cdbd66c  embedded object  (0x210c9f09 <String[6]: super_>)
0x4cdbd678  code target (BUILTIN)  (0x4cd22420)
0x4cdbd680  constant pool (size 56)

--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 781)
0x4cdbd720     0  movz x2, #0xd2c0
0x4cdbd724     4  movk x2, #0x166d, lsl #16
0x4cdbd728     8  ldp x3, x0, [x2]
0x4cdbd72c    12  adds x16, x3, #0x130 (304)
0x4cdbd730    16  ccmp x16, x0, #nzCv, lo
0x4cdbd734    20  b.hi #+0x150 (addr 0x4cdbd884)
0x4cdbd738    24  str x16, [x2]
0x4cdbd73c    28  orr x3, x3, #0x1
0x4cdbd740    32  ldr x0, pc+432 (addr 0x000000004cdbd8f0)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdbd744    36  stur x0, [x3, #-1]
0x4cdbd748    40  movz x0, #0x2400000000
0x4cdbd74c    44  stur x0, [x3, #7]
0x4cdbd750    48  stur x1, [x3, #15]
0x4cdbd754    52  stur cp, [x3, #23]
0x4cdbd758    56  ldr x0, pc+416 (addr 0x000000004cdbd8f8)    ;; object: 0x21004519 <the hole>
0x4cdbd75c    60  stur x0, [x3, #31]
0x4cdbd760    64  ldur x0, [cp, #39]
0x4cdbd764    68  stur x0, [x3, #39]
0x4cdbd768    72  ldr x0, pc+408 (addr 0x000000004cdbd900)    ;; object: 0x21004241 <undefined>
0x4cdbd76c    76  stur x0, [x3, #47]
0x4cdbd770    80  ldr x0, pc+408 (addr 0x000000004cdbd908)    ;; object: 0x21004241 <undefined>
0x4cdbd774    84  stur x0, [x3, #55]
0x4cdbd778    88  ldr x0, pc+408 (addr 0x000000004cdbd910)    ;; object: 0x21004241 <undefined>
0x4cdbd77c    92  stur x0, [x3, #63]
0x4cdbd780    96  ldr x0, pc+408 (addr 0x000000004cdbd918)    ;; object: 0x21004241 <undefined>
0x4cdbd784   100  stur x0, [x3, #71]
0x4cdbd788   104  ldr x0, pc+408 (addr 0x000000004cdbd920)    ;; object: 0x21004241 <undefined>
0x4cdbd78c   108  stur x0, [x3, #79]
0x4cdbd790   112  ldr x0, pc+408 (addr 0x000000004cdbd928)    ;; object: 0x21004241 <undefined>
0x4cdbd794   116  stur x0, [x3, #87]
0x4cdbd798   120  ldr x0, pc+408 (addr 0x000000004cdbd930)    ;; object: 0x21004241 <undefined>
0x4cdbd79c   124  stur x0, [x3, #95]
0x4cdbd7a0   128  ldr x0, pc+408 (addr 0x000000004cdbd938)    ;; object: 0x21004241 <undefined>
0x4cdbd7a4   132  stur x0, [x3, #103]
0x4cdbd7a8   136  ldr x0, pc+408 (addr 0x000000004cdbd940)    ;; object: 0x21004241 <undefined>
0x4cdbd7ac   140  stur x0, [x3, #111]
0x4cdbd7b0   144  ldr x0, pc+408 (addr 0x000000004cdbd948)    ;; object: 0x21004241 <undefined>
0x4cdbd7b4   148  stur x0, [x3, #119]
0x4cdbd7b8   152  ldr x0, pc+408 (addr 0x000000004cdbd950)    ;; object: 0x21004241 <undefined>
0x4cdbd7bc   156  stur x0, [x3, #127]
0x4cdbd7c0   160  ldr x0, pc+408 (addr 0x000000004cdbd958)    ;; object: 0x21004241 <undefined>
0x4cdbd7c4   164  stur x0, [x3, #135]
0x4cdbd7c8   168  ldr x0, pc+408 (addr 0x000000004cdbd960)    ;; object: 0x21004241 <undefined>
0x4cdbd7cc   172  stur x0, [x3, #143]
0x4cdbd7d0   176  ldr x0, pc+408 (addr 0x000000004cdbd968)    ;; object: 0x21004241 <undefined>
0x4cdbd7d4   180  stur x0, [x3, #151]
0x4cdbd7d8   184  ldr x0, pc+408 (addr 0x000000004cdbd970)    ;; object: 0x21004241 <undefined>
0x4cdbd7dc   188  stur x0, [x3, #159]
0x4cdbd7e0   192  ldr x0, pc+408 (addr 0x000000004cdbd978)    ;; object: 0x21004241 <undefined>
0x4cdbd7e4   196  stur x0, [x3, #167]
0x4cdbd7e8   200  ldr x0, pc+408 (addr 0x000000004cdbd980)    ;; object: 0x21004241 <undefined>
0x4cdbd7ec   204  stur x0, [x3, #175]
0x4cdbd7f0   208  ldr x0, pc+408 (addr 0x000000004cdbd988)    ;; object: 0x21004241 <undefined>
0x4cdbd7f4   212  stur x0, [x3, #183]
0x4cdbd7f8   216  ldr x0, pc+408 (addr 0x000000004cdbd990)    ;; object: 0x21004241 <undefined>
0x4cdbd7fc   220  stur x0, [x3, #191]
0x4cdbd800   224  ldr x0, pc+408 (addr 0x000000004cdbd998)    ;; object: 0x21004241 <undefined>
0x4cdbd804   228  stur x0, [x3, #199]
0x4cdbd808   232  ldr x0, pc+408 (addr 0x000000004cdbd9a0)    ;; object: 0x21004241 <undefined>
0x4cdbd80c   236  stur x0, [x3, #207]
0x4cdbd810   240  ldr x0, pc+408 (addr 0x000000004cdbd9a8)    ;; object: 0x21004241 <undefined>
0x4cdbd814   244  stur x0, [x3, #215]
0x4cdbd818   248  ldr x0, pc+408 (addr 0x000000004cdbd9b0)    ;; object: 0x21004241 <undefined>
0x4cdbd81c   252  stur x0, [x3, #223]
0x4cdbd820   256  ldr x0, pc+408 (addr 0x000000004cdbd9b8)    ;; object: 0x21004241 <undefined>
0x4cdbd824   260  stur x0, [x3, #231]
0x4cdbd828   264  ldr x0, pc+408 (addr 0x000000004cdbd9c0)    ;; object: 0x21004241 <undefined>
0x4cdbd82c   268  stur x0, [x3, #239]
0x4cdbd830   272  ldr x0, pc+408 (addr 0x000000004cdbd9c8)    ;; object: 0x21004241 <undefined>
0x4cdbd834   276  stur x0, [x3, #247]
0x4cdbd838   280  ldr x0, pc+408 (addr 0x000000004cdbd9d0)    ;; object: 0x21004241 <undefined>
0x4cdbd83c   284  stur x0, [x3, #255]
0x4cdbd840   288  ldr x0, pc+408 (addr 0x000000004cdbd9d8)    ;; object: 0x21004241 <undefined>
0x4cdbd844   292  movz x16, #0x107
0x4cdbd848   296  str x0, [x3, x16]
0x4cdbd84c   300  ldr x0, pc+404 (addr 0x000000004cdbd9e0)    ;; object: 0x21004241 <undefined>
0x4cdbd850   304  movz x16, #0x10f
0x4cdbd854   308  str x0, [x3, x16]
0x4cdbd858   312  ldr x0, pc+400 (addr 0x000000004cdbd9e8)    ;; object: 0x21004241 <undefined>
0x4cdbd85c   316  movz x16, #0x117
0x4cdbd860   320  str x0, [x3, x16]
0x4cdbd864   324  ldr x0, pc+396 (addr 0x000000004cdbd9f0)    ;; object: 0x21004241 <undefined>
0x4cdbd868   328  movz x16, #0x11f
0x4cdbd86c   332  str x0, [x3, x16]
0x4cdbd870   336  ldr x0, pc+392 (addr 0x000000004cdbd9f8)    ;; object: 0x21004241 <undefined>
0x4cdbd874   340  movz x16, #0x127
0x4cdbd878   344  str x0, [x3, x16]
0x4cdbd87c   348  mov x0, x3
0x4cdbd880   352  ret
0x4cdbd884   356  sub csp, jssp, #0x10 (16)
0x4cdbd888   360  stp fp, lr, [jssp, #-16]!
0x4cdbd88c   364  movz fp, #0xa00000000
0x4cdbd890   368  sub csp, jssp, #0x8 (8)
0x4cdbd894   372  str fp, [jssp, #-8]!
0x4cdbd898   376  add fp, jssp, #0x8 (8)
0x4cdbd89c   380  movz x3, #0x0
0x4cdbd8a0   384  mov x16, lr
0x4cdbd8a4   388  ldr x17, pc+348 (addr 0x000000004cdbda00)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdbd8a8   392  blr x17
0x4cdbd8ac   396  movz x0, #0x13000000000
0x4cdbd8b0   400  movz x10, #0x0
0x4cdbd8b4   404  sub csp, jssp, #0x10 (16)
0x4cdbd8b8   408  stp x10, x0, [jssp, #-16]!
0x4cdbd8bc   412  movz x0, #0x2
0x4cdbd8c0   416  movz x1, #0x5b88
0x4cdbd8c4   420  movk x1, #0xe2, lsl #16
0x4cdbd8c8   424  ldr x16, pc+320 (addr 0x000000004cdbda08)    ;; code: STUB, CEntryStub, minor: 5
0x4cdbd8cc   428  blr x16
0x4cdbd8d0   432  str x0, [jssp, #24]
0x4cdbd8d4   436  ldr x16, pc+316 (addr 0x000000004cdbda10)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdbd8d8   440  blr x16
0x4cdbd8dc   444  ldr lr, [jssp, #16]
0x4cdbd8e0   448  ldp xzr, fp, [jssp], #24
0x4cdbd8e4   452  b #-0x1a4 (addr 0x4cdbd740)
0x4cdbd8e8   456  5800097f       constant pool begin (num_const = 75)    ;; constant pool
0x4cdbd8ec   460  d63f03e0       constant
0x4cdbd8f0   464  2a806149       constant
0x4cdbd8f4   468  00000000       constant
0x4cdbd8f8   472  21004519       constant
0x4cdbd8fc   476  00000000       constant
0x4cdbd900   480  21004241       constant
0x4cdbd904   484  00000000       constant
0x4cdbd908   488  21004241       constant
0x4cdbd90c   492  00000000       constant
0x4cdbd910   496  21004241       constant
0x4cdbd914   500  00000000       constant
0x4cdbd918   504  21004241       constant
0x4cdbd91c   508  00000000       constant
0x4cdbd920   512  21004241       constant
0x4cdbd924   516  00000000       constant
0x4cdbd928   520  21004241       constant
0x4cdbd92c   524  00000000       constant
0x4cdbd930   528  21004241       constant
0x4cdbd934   532  00000000       constant
0x4cdbd938   536  21004241       constant
0x4cdbd93c   540  00000000       constant
0x4cdbd940   544  21004241       constant
0x4cdbd944   548  00000000       constant
0x4cdbd948   552  21004241       constant
0x4cdbd94c   556  00000000       constant
0x4cdbd950   560  21004241       constant
0x4cdbd954   564  00000000       constant
0x4cdbd958   568  21004241       constant
0x4cdbd95c   572  00000000       constant
0x4cdbd960   576  21004241       constant
0x4cdbd964   580  00000000       constant
0x4cdbd968   584  21004241       constant
0x4cdbd96c   588  00000000       constant
0x4cdbd970   592  21004241       constant
0x4cdbd974   596  00000000       constant
0x4cdbd978   600  21004241       constant
0x4cdbd97c   604  00000000       constant
0x4cdbd980   608  21004241       constant
0x4cdbd984   612  00000000       constant
0x4cdbd988   616  21004241       constant
0x4cdbd98c   620  00000000       constant
0x4cdbd990   624  21004241       constant
0x4cdbd994   628  00000000       constant
0x4cdbd998   632  21004241       constant
0x4cdbd99c   636  00000000       constant
0x4cdbd9a0   640  21004241       constant
0x4cdbd9a4   644  00000000       constant
0x4cdbd9a8   648  21004241       constant
0x4cdbd9ac   652  00000000       constant
0x4cdbd9b0   656  21004241       constant
0x4cdbd9b4   660  00000000       constant
0x4cdbd9b8   664  21004241       constant
0x4cdbd9bc   668  00000000       constant
0x4cdbd9c0   672  21004241       constant
0x4cdbd9c4   676  00000000       constant
0x4cdbd9c8   680  21004241       constant
0x4cdbd9cc   684  00000000       constant
0x4cdbd9d0   688  21004241       constant
0x4cdbd9d4   692  00000000       constant
0x4cdbd9d8   696  21004241       constant
0x4cdbd9dc   700  00000000       constant
0x4cdbd9e0   704  21004241       constant
0x4cdbd9e4   708  00000000       constant
0x4cdbd9e8   712  21004241       constant
0x4cdbd9ec   716  00000000       constant
0x4cdbd9f0   720  21004241       constant
0x4cdbd9f4   724  00000000       constant
0x4cdbd9f8   728  21004241       constant
0x4cdbd9fc   732  00000000       constant
0x4cdbda00   736  4cd06820       constant
0x4cdbda04   740  00000000       constant
0x4cdbda08   744  4cd06260       constant
0x4cdbda0c   748  00000000       constant
0x4cdbda10   752  4cd068e0       constant
0x4cdbda14   756  00000000       constant


Safepoints (size = 21)
0x4cdbd8d0   432  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 43)
0x4cdbd740  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdbd758  embedded object  (0x21004519 <the hole>)
0x4cdbd768  embedded object  (0x21004241 <undefined>)
0x4cdbd770  embedded object  (0x21004241 <undefined>)
0x4cdbd778  embedded object  (0x21004241 <undefined>)
0x4cdbd780  embedded object  (0x21004241 <undefined>)
0x4cdbd788  embedded object  (0x21004241 <undefined>)
0x4cdbd790  embedded object  (0x21004241 <undefined>)
0x4cdbd798  embedded object  (0x21004241 <undefined>)
0x4cdbd7a0  embedded object  (0x21004241 <undefined>)
0x4cdbd7a8  embedded object  (0x21004241 <undefined>)
0x4cdbd7b0  embedded object  (0x21004241 <undefined>)
0x4cdbd7b8  embedded object  (0x21004241 <undefined>)
0x4cdbd7c0  embedded object  (0x21004241 <undefined>)
0x4cdbd7c8  embedded object  (0x21004241 <undefined>)
0x4cdbd7d0  embedded object  (0x21004241 <undefined>)
0x4cdbd7d8  embedded object  (0x21004241 <undefined>)
0x4cdbd7e0  embedded object  (0x21004241 <undefined>)
0x4cdbd7e8  embedded object  (0x21004241 <undefined>)
0x4cdbd7f0  embedded object  (0x21004241 <undefined>)
0x4cdbd7f8  embedded object  (0x21004241 <undefined>)
0x4cdbd800  embedded object  (0x21004241 <undefined>)
0x4cdbd808  embedded object  (0x21004241 <undefined>)
0x4cdbd810  embedded object  (0x21004241 <undefined>)
0x4cdbd818  embedded object  (0x21004241 <undefined>)
0x4cdbd820  embedded object  (0x21004241 <undefined>)
0x4cdbd828  embedded object  (0x21004241 <undefined>)
0x4cdbd830  embedded object  (0x21004241 <undefined>)
0x4cdbd838  embedded object  (0x21004241 <undefined>)
0x4cdbd840  embedded object  (0x21004241 <undefined>)
0x4cdbd84c  embedded object  (0x21004241 <undefined>)
0x4cdbd858  embedded object  (0x21004241 <undefined>)
0x4cdbd864  embedded object  (0x21004241 <undefined>)
0x4cdbd870  embedded object  (0x21004241 <undefined>)
0x4cdbd8a4  code target (STUB)  (0x4cd06820)
0x4cdbd8c8  code target (STUB)  (0x4cd06260)
0x4cdbd8d4  code target (STUB)  (0x4cd068e0)
0x4cdbd8e8  constant pool (size 304)

--- End code ---
kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 781)
0x4cdbd720     0  movz x2, #0xd2c0
0x4cdbd724     4  movk x2, #0x166d, lsl #16
0x4cdbd728     8  ldp x3, x0, [x2]
0x4cdbd72c    12  adds x16, x3, #0x130 (304)
0x4cdbd730    16  ccmp x16, x0, #nzCv, lo
0x4cdbd734    20  b.hi #+0x150 (addr 0x4cdbd884)
0x4cdbd738    24  str x16, [x2]
0x4cdbd73c    28  orr x3, x3, #0x1
0x4cdbd740    32  ldr x0, pc+432 (addr 0x000000004cdbd8f0)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdbd744    36  stur x0, [x3, #-1]
0x4cdbd748    40  movz x0, #0x2400000000
0x4cdbd74c    44  stur x0, [x3, #7]
0x4cdbd750    48  stur x1, [x3, #15]
0x4cdbd754    52  stur cp, [x3, #23]
0x4cdbd758    56  ldr x0, pc+416 (addr 0x000000004cdbd8f8)    ;; object: 0x21004519 <the hole>
0x4cdbd75c    60  stur x0, [x3, #31]
0x4cdbd760    64  ldur x0, [cp, #39]
0x4cdbd764    68  stur x0, [x3, #39]
0x4cdbd768    72  ldr x0, pc+408 (addr 0x000000004cdbd900)    ;; object: 0x21004241 <undefined>
0x4cdbd76c    76  stur x0, [x3, #47]
0x4cdbd770    80  ldr x0, pc+408 (addr 0x000000004cdbd908)    ;; object: 0x21004241 <undefined>
0x4cdbd774    84  stur x0, [x3, #55]
0x4cdbd778    88  ldr x0, pc+408 (addr 0x000000004cdbd910)    ;; object: 0x21004241 <undefined>
0x4cdbd77c    92  stur x0, [x3, #63]
0x4cdbd780    96  ldr x0, pc+408 (addr 0x000000004cdbd918)    ;; object: 0x21004241 <undefined>
0x4cdbd784   100  stur x0, [x3, #71]
0x4cdbd788   104  ldr x0, pc+408 (addr 0x000000004cdbd920)    ;; object: 0x21004241 <undefined>
0x4cdbd78c   108  stur x0, [x3, #79]
0x4cdbd790   112  ldr x0, pc+408 (addr 0x000000004cdbd928)    ;; object: 0x21004241 <undefined>
0x4cdbd794   116  stur x0, [x3, #87]
0x4cdbd798   120  ldr x0, pc+408 (addr 0x000000004cdbd930)    ;; object: 0x21004241 <undefined>
0x4cdbd79c   124  stur x0, [x3, #95]
0x4cdbd7a0   128  ldr x0, pc+408 (addr 0x000000004cdbd938)    ;; object: 0x21004241 <undefined>
0x4cdbd7a4   132  stur x0, [x3, #103]
0x4cdbd7a8   136  ldr x0, pc+408 (addr 0x000000004cdbd940)    ;; object: 0x21004241 <undefined>
0x4cdbd7ac   140  stur x0, [x3, #111]
0x4cdbd7b0   144  ldr x0, pc+408 (addr 0x000000004cdbd948)    ;; object: 0x21004241 <undefined>
0x4cdbd7b4   148  stur x0, [x3, #119]
0x4cdbd7b8   152  ldr x0, pc+408 (addr 0x000000004cdbd950)    ;; object: 0x21004241 <undefined>
0x4cdbd7bc   156  stur x0, [x3, #127]
0x4cdbd7c0   160  ldr x0, pc+408 (addr 0x000000004cdbd958)    ;; object: 0x21004241 <undefined>
0x4cdbd7c4   164  stur x0, [x3, #135]
0x4cdbd7c8   168  ldr x0, pc+408 (addr 0x000000004cdbd960)    ;; object: 0x21004241 <undefined>
0x4cdbd7cc   172  stur x0, [x3, #143]
0x4cdbd7d0   176  ldr x0, pc+408 (addr 0x000000004cdbd968)    ;; object: 0x21004241 <undefined>
0x4cdbd7d4   180  stur x0, [x3, #151]
0x4cdbd7d8   184  ldr x0, pc+408 (addr 0x000000004cdbd970)    ;; object: 0x21004241 <undefined>
0x4cdbd7dc   188  stur x0, [x3, #159]
0x4cdbd7e0   192  ldr x0, pc+408 (addr 0x000000004cdbd978)    ;; object: 0x21004241 <undefined>
0x4cdbd7e4   196  stur x0, [x3, #167]
0x4cdbd7e8   200  ldr x0, pc+408 (addr 0x000000004cdbd980)    ;; object: 0x21004241 <undefined>
0x4cdbd7ec   204  stur x0, [x3, #175]
0x4cdbd7f0   208  ldr x0, pc+408 (addr 0x000000004cdbd988)    ;; object: 0x21004241 <undefined>
0x4cdbd7f4   212  stur x0, [x3, #183]
0x4cdbd7f8   216  ldr x0, pc+408 (addr 0x000000004cdbd990)    ;; object: 0x21004241 <undefined>
0x4cdbd7fc   220  stur x0, [x3, #191]
0x4cdbd800   224  ldr x0, pc+408 (addr 0x000000004cdbd998)    ;; object: 0x21004241 <undefined>
0x4cdbd804   228  stur x0, [x3, #199]
0x4cdbd808   232  ldr x0, pc+408 (addr 0x000000004cdbd9a0)    ;; object: 0x21004241 <undefined>
0x4cdbd80c   236  stur x0, [x3, #207]
0x4cdbd810   240  ldr x0, pc+408 (addr 0x000000004cdbd9a8)    ;; object: 0x21004241 <undefined>
0x4cdbd814   244  stur x0, [x3, #215]
0x4cdbd818   248  ldr x0, pc+408 (addr 0x000000004cdbd9b0)    ;; object: 0x21004241 <undefined>
0x4cdbd81c   252  stur x0, [x3, #223]
0x4cdbd820   256  ldr x0, pc+408 (addr 0x000000004cdbd9b8)    ;; object: 0x21004241 <undefined>
0x4cdbd824   260  stur x0, [x3, #231]
0x4cdbd828   264  ldr x0, pc+408 (addr 0x000000004cdbd9c0)    ;; object: 0x21004241 <undefined>
0x4cdbd82c   268  stur x0, [x3, #239]
0x4cdbd830   272  ldr x0, pc+408 (addr 0x000000004cdbd9c8)    ;; object: 0x21004241 <undefined>
0x4cdbd834   276  stur x0, [x3, #247]
0x4cdbd838   280  ldr x0, pc+408 (addr 0x000000004cdbd9d0)    ;; object: 0x21004241 <undefined>
0x4cdbd83c   284  stur x0, [x3, #255]
0x4cdbd840   288  ldr x0, pc+408 (addr 0x000000004cdbd9d8)    ;; object: 0x21004241 <undefined>
0x4cdbd844   292  movz x16, #0x107
0x4cdbd848   296  str x0, [x3, x16]
0x4cdbd84c   300  ldr x0, pc+404 (addr 0x000000004cdbd9e0)    ;; object: 0x21004241 <undefined>
0x4cdbd850   304  movz x16, #0x10f
0x4cdbd854   308  str x0, [x3, x16]
0x4cdbd858   312  ldr x0, pc+400 (addr 0x000000004cdbd9e8)    ;; object: 0x21004241 <undefined>
0x4cdbd85c   316  movz x16, #0x117
0x4cdbd860   320  str x0, [x3, x16]
0x4cdbd864   324  ldr x0, pc+396 (addr 0x000000004cdbd9f0)    ;; object: 0x21004241 <undefined>
0x4cdbd868   328  movz x16, #0x11f
0x4cdbd86c   332  str x0, [x3, x16]
0x4cdbd870   336  ldr x0, pc+392 (addr 0x000000004cdbd9f8)    ;; object: 0x21004241 <undefined>
0x4cdbd874   340  movz x16, #0x127
0x4cdbd878   344  str x0, [x3, x16]
0x4cdbd87c   348  mov x0, x3
0x4cdbd880   352  ret
0x4cdbd884   356  sub csp, jssp, #0x10 (16)
0x4cdbd888   360  stp fp, lr, [jssp, #-16]!
0x4cdbd88c   364  movz fp, #0xa00000000
0x4cdbd890   368  sub csp, jssp, #0x8 (8)
0x4cdbd894   372  str fp, [jssp, #-8]!
0x4cdbd898   376  add fp, jssp, #0x8 (8)
0x4cdbd89c   380  movz x3, #0x0
0x4cdbd8a0   384  mov x16, lr
0x4cdbd8a4   388  ldr x17, pc+348 (addr 0x000000004cdbda00)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdbd8a8   392  blr x17
0x4cdbd8ac   396  movz x0, #0x13000000000
0x4cdbd8b0   400  movz x10, #0x0
0x4cdbd8b4   404  sub csp, jssp, #0x10 (16)
0x4cdbd8b8   408  stp x10, x0, [jssp, #-16]!
0x4cdbd8bc   412  movz x0, #0x2
0x4cdbd8c0   416  movz x1, #0x5b88
0x4cdbd8c4   420  movk x1, #0xe2, lsl #16
0x4cdbd8c8   424  ldr x16, pc+320 (addr 0x000000004cdbda08)    ;; code: STUB, CEntryStub, minor: 5
0x4cdbd8cc   428  blr x16
0x4cdbd8d0   432  str x0, [jssp, #24]
0x4cdbd8d4   436  ldr x16, pc+316 (addr 0x000000004cdbda10)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdbd8d8   440  blr x16
0x4cdbd8dc   444  ldr lr, [jssp, #16]
0x4cdbd8e0   448  ldp xzr, fp, [jssp], #24
0x4cdbd8e4   452  b #-0x1a4 (addr 0x4cdbd740)
0x4cdbd8e8   456  5800097f       constant pool begin (num_const = 75)    ;; constant pool
0x4cdbd8ec   460  d63f03e0       constant
0x4cdbd8f0   464  2a806149       constant
0x4cdbd8f4   468  00000000       constant
0x4cdbd8f8   472  21004519       constant
0x4cdbd8fc   476  00000000       constant
0x4cdbd900   480  21004241       constant
0x4cdbd904   484  00000000       constant
0x4cdbd908   488  21004241       constant
0x4cdbd90c   492  00000000       constant
0x4cdbd910   496  21004241       constant
0x4cdbd914   500  00000000       constant
0x4cdbd918   504  21004241       constant
0x4cdbd91c   508  00000000       constant
0x4cdbd920   512  21004241       constant
0x4cdbd924   516  00000000       constant
0x4cdbd928   520  21004241       constant
0x4cdbd92c   524  00000000       constant
0x4cdbd930   528  21004241       constant
0x4cdbd934   532  00000000       constant
0x4cdbd938   536  21004241       constant
0x4cdbd93c   540  00000000       constant
0x4cdbd940   544  21004241       constant
0x4cdbd944   548  00000000       constant
0x4cdbd948   552  21004241       constant
0x4cdbd94c   556  00000000       constant
0x4cdbd950   560  21004241       constant
0x4cdbd954   564  00000000       constant
0x4cdbd958   568  21004241       constant
0x4cdbd95c   572  00000000       constant
0x4cdbd960   576  21004241       constant
0x4cdbd964   580  00000000       constant
0x4cdbd968   584  21004241       constant
0x4cdbd96c   588  00000000       constant
0x4cdbd970   592  21004241       constant
0x4cdbd974   596  00000000       constant
0x4cdbd978   600  21004241       constant
0x4cdbd97c   604  00000000       constant
0x4cdbd980   608  21004241       constant
0x4cdbd984   612  00000000       constant
0x4cdbd988   616  21004241       constant
0x4cdbd98c   620  00000000       constant
0x4cdbd990   624  21004241       constant
0x4cdbd994   628  00000000       constant
0x4cdbd998   632  21004241       constant
0x4cdbd99c   636  00000000       constant
0x4cdbd9a0   640  21004241       constant
0x4cdbd9a4   644  00000000       constant
0x4cdbd9a8   648  21004241       constant
0x4cdbd9ac   652  00000000       constant
0x4cdbd9b0   656  21004241       constant
0x4cdbd9b4   660  00000000       constant
0x4cdbd9b8   664  21004241       constant
0x4cdbd9bc   668  00000000       constant
0x4cdbd9c0   672  21004241       constant
0x4cdbd9c4   676  00000000       constant
0x4cdbd9c8   680  21004241       constant
0x4cdbd9cc   684  00000000       constant
0x4cdbd9d0   688  21004241       constant
0x4cdbd9d4   692  00000000       constant
0x4cdbd9d8   696  21004241       constant
0x4cdbd9dc   700  00000000       constant
0x4cdbd9e0   704  21004241       constant
0x4cdbd9e4   708  00000000       constant
0x4cdbd9e8   712  21004241       constant
0x4cdbd9ec   716  00000000       constant
0x4cdbd9f0   720  21004241       constant
0x4cdbd9f4   724  00000000       constant
0x4cdbd9f8   728  21004241       constant
0x4cdbd9fc   732  00000000       constant
0x4cdbda00   736  4cd06820       constant
0x4cdbda04   740  00000000       constant
0x4cdbda08   744  4cd06260       constant
0x4cdbda0c   748  00000000       constant
0x4cdbda10   752  4cd068e0       constant
0x4cdbda14   756  00000000       constant


Safepoints (size = 21)
0x4cdbd8d0   432  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 43)
0x4cdbd740  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdbd758  embedded object  (0x21004519 <the hole>)
0x4cdbd768  embedded object  (0x21004241 <undefined>)
0x4cdbd770  embedded object  (0x21004241 <undefined>)
0x4cdbd778  embedded object  (0x21004241 <undefined>)
0x4cdbd780  embedded object  (0x21004241 <undefined>)
0x4cdbd788  embedded object  (0x21004241 <undefined>)
0x4cdbd790  embedded object  (0x21004241 <undefined>)
0x4cdbd798  embedded object  (0x21004241 <undefined>)
0x4cdbd7a0  embedded object  (0x21004241 <undefined>)
0x4cdbd7a8  embedded object  (0x21004241 <undefined>)
0x4cdbd7b0  embedded object  (0x21004241 <undefined>)
0x4cdbd7b8  embedded object  (0x21004241 <undefined>)
0x4cdbd7c0  embedded object  (0x21004241 <undefined>)
0x4cdbd7c8  embedded object  (0x21004241 <undefined>)
0x4cdbd7d0  embedded object  (0x21004241 <undefined>)
0x4cdbd7d8  embedded object  (0x21004241 <undefined>)
0x4cdbd7e0  embedded object  (0x21004241 <undefined>)
0x4cdbd7e8  embedded object  (0x21004241 <undefined>)
0x4cdbd7f0  embedded object  (0x21004241 <undefined>)
0x4cdbd7f8  embedded object  (0x21004241 <undefined>)
0x4cdbd800  embedded object  (0x21004241 <undefined>)
0x4cdbd808  embedded object  (0x21004241 <undefined>)
0x4cdbd810  embedded object  (0x21004241 <undefined>)
0x4cdbd818  embedded object  (0x21004241 <undefined>)
0x4cdbd820  embedded object  (0x21004241 <undefined>)
0x4cdbd828  embedded object  (0x21004241 <undefined>)
0x4cdbd830  embedded object  (0x21004241 <undefined>)
0x4cdbd838  embedded object  (0x21004241 <undefined>)
0x4cdbd840  embedded object  (0x21004241 <undefined>)
0x4cdbd84c  embedded object  (0x21004241 <undefined>)
0x4cdbd858  embedded object  (0x21004241 <undefined>)
0x4cdbd864  embedded object  (0x21004241 <undefined>)
0x4cdbd870  embedded object  (0x21004241 <undefined>)
0x4cdbd8a4  code target (STUB)  (0x4cd06820)
0x4cdbd8c8  code target (STUB)  (0x4cd06260)
0x4cdbd8d4  code target (STUB)  (0x4cd068e0)
0x4cdbd8e8  constant pool (size 304)


kind = HANDLER
major_key = <NoCache>Stub
name = toUpperCase
compiler = unknown
Instructions (size = 152)
0x4cdbf0a0     0  sub csp, jssp, #0x8 (8)
0x4cdbf0a4     4  str x3, [jssp, #-8]!
0x4cdbf0a8     8  sub csp, jssp, #0x8 (8)
0x4cdbf0ac    12  str x0, [jssp, #-8]!
0x4cdbf0b0    16  ldur x3, [cp, #39]
0x4cdbf0b4    20  movz x16, #0x2e7
0x4cdbf0b8    24  ldr x3, [x3, x16]
0x4cdbf0bc    28  ldur x3, [x3, #23]
0x4cdbf0c0    32  ldur x3, [x3, #23]
0x4cdbf0c4    36  ldr x0, pc+84 (addr 0x000000004cdbf118)    ;; object: 0x21063e59 Cell for 0
0x4cdbf0c8    40  ldur x0, [x0, #7]
0x4cdbf0cc    44  cmp x0, #0x0 (0)
0x4cdbf0d0    48  b.ne #+0x1c (addr 0x4cdbf0ec)
0x4cdbf0d4    52  ldur x0, [x3, #-1]
0x4cdbf0d8    56  ldr x4, pc+72 (addr 0x000000004cdbf120)    ;; object: 0xffffaa106e39 WeakCell for 0x2a8156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>
0x4cdbf0dc    60  ldur x4, [x4, #7]
0x4cdbf0e0    64  cmp x0, x4
0x4cdbf0e4    68  b.ne #+0x8 (addr 0x4cdbf0ec)
0x4cdbf0e8    72  b #+0x14 (addr 0x4cdbf0fc)
0x4cdbf0ec    76  ldr x0, [jssp], #8
0x4cdbf0f0    80  ldr x3, [jssp], #8
0x4cdbf0f4    84  ldr x16, pc+52 (addr 0x000000004cdbf128)    ;; code: BUILTIN
0x4cdbf0f8    88  br x16
0x4cdbf0fc    92  add jssp, jssp, #0x10 (16)
0x4cdbf100    96  mov x1, x3
0x4cdbf104   100  ldr x16, pc+44 (addr 0x000000004cdbf130)    ;; code: HANDLER, LoadConstantStub, minor: 25
0x4cdbf108   104  br x16
0x4cdbf10c   108  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0x4cdbf110   112  d63f03e0       constant
0x4cdbf114   116  d503201f       constant
0x4cdbf118   120  21063e59       constant
0x4cdbf11c   124  00000000       constant
0x4cdbf120   128  aa106e39       constant
0x4cdbf124   132  0000ffff       constant
0x4cdbf128   136  4cd222e0       constant
0x4cdbf12c   140  00000000       constant
0x4cdbf130   144  4cd7b440       constant
0x4cdbf134   148  00000000       constant


RelocInfo (size = 10)
0x4cdbf0c4  embedded object  (0x21063e59 Cell for 0)
0x4cdbf0d8  embedded object  (0xffffaa106e39 WeakCell for 0x2a8156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>)
0x4cdbf0f4  code target (BUILTIN)  (0x4cd222e0)
0x4cdbf104  code target (HANDLER)  (0x4cd7b440)
0x4cdbf10c  constant pool (size 44)

kind = HANDLER
major_key = <NoCache>Stub
name = RegExp
compiler = unknown
Instructions (size = 120)
0x4cdbf1a0     0  sub csp, jssp, #0x8 (8)
0x4cdbf1a4     4  str x3, [jssp, #-8]!
0x4cdbf1a8     8  sub csp, jssp, #0x8 (8)
0x4cdbf1ac    12  str x0, [jssp, #-8]!
0x4cdbf1b0    16  ldr x0, pc+80 (addr 0x000000004cdbf200)    ;; object: 0x210c5d51 Cell for 0
0x4cdbf1b4    20  ldur x0, [x0, #7]
0x4cdbf1b8    24  cmp x0, #0x0 (0)
0x4cdbf1bc    28  b.ne #+0x2c (addr 0x4cdbf1e8)
0x4cdbf1c0    32  ldr x0, pc+72 (addr 0x000000004cdbf208)    ;; object: 0xffffaa120c49 WeakCell for 0x21046281 PropertyCell for 0x21046219 <JS Function RegExp (SharedFunctionInfo 0x21046171)>
0x4cdbf1c4    36  ldur x0, [x0, #7]
0x4cdbf1c8    40  tbz w0, #0, #+0x20 (addr 0x4cdbf1e8)
0x4cdbf1cc    44  ldur x0, [x0, #15]
0x4cdbf1d0    48  ldr x16, [x26, #88]
0x4cdbf1d4    52  cmp x0, x16
0x4cdbf1d8    56  b.eq #+0x10 (addr 0x4cdbf1e8)
0x4cdbf1dc    60  add jssp, jssp, #0x10 (16)
0x4cdbf1e0    64  ret
0x4cdbf1e4    68  b #+0x14 (addr 0x4cdbf1f8)
0x4cdbf1e8    72  ldr x0, [jssp], #8
0x4cdbf1ec    76  ldr x3, [jssp], #8
0x4cdbf1f0    80  ldr x16, pc+32 (addr 0x000000004cdbf210)    ;; code: BUILTIN
0x4cdbf1f4    84  br x16
0x4cdbf1f8    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cdbf1fc    92  d63f03e0       constant
0x4cdbf200    96  210c5d51       constant
0x4cdbf204   100  00000000       constant
0x4cdbf208   104  aa120c49       constant
0x4cdbf20c   108  0000ffff       constant
0x4cdbf210   112  4cd222e0       constant
0x4cdbf214   116  00000000       constant


RelocInfo (size = 9)
0x4cdbf1b0  embedded object  (0x210c5d51 Cell for 0)
0x4cdbf1c0  embedded object  (0xffffaa120c49 WeakCell for 0x21046281 PropertyCell for 0x21046219 <JS Function RegExp (SharedFunctionInfo 0x21046171)>)
0x4cdbf1f0  code target (BUILTIN)  (0x4cd222e0)
0x4cdbf1f8  constant pool (size 32)

kind = HANDLER
major_key = <NoCache>Stub
name = test
compiler = unknown
Instructions (size = 120)
0x4cdbf280     0  sub csp, jssp, #0x8 (8)
0x4cdbf284     4  str x3, [jssp, #-8]!
0x4cdbf288     8  sub csp, jssp, #0x8 (8)
0x4cdbf28c    12  str x0, [jssp, #-8]!
0x4cdbf290    16  ldr x0, pc+72 (addr 0x000000004cdbf2d8)    ;; object: 0x210ed491 Cell for 0
0x4cdbf294    20  ldur x0, [x0, #7]
0x4cdbf298    24  cmp x0, #0x0 (0)
0x4cdbf29c    28  b.ne #+0x14 (addr 0x4cdbf2b0)
0x4cdbf2a0    32  ldr x3, pc+64 (addr 0x000000004cdbf2e0)    ;; object: 0xffffaa120c81 WeakCell for 0x48d6ca81 <an Object with map 0x2a8164d1>
0x4cdbf2a4    36  ldur x3, [x3, #7]
0x4cdbf2a8    40  tbz w3, #0, #+0x8 (addr 0x4cdbf2b0)
0x4cdbf2ac    44  b #+0x14 (addr 0x4cdbf2c0)
0x4cdbf2b0    48  ldr x0, [jssp], #8
0x4cdbf2b4    52  ldr x3, [jssp], #8
0x4cdbf2b8    56  ldr x16, pc+48 (addr 0x000000004cdbf2e8)    ;; code: BUILTIN
0x4cdbf2bc    60  br x16
0x4cdbf2c0    64  add jssp, jssp, #0x10 (16)
0x4cdbf2c4    68  mov x1, x3
0x4cdbf2c8    72  ldr x16, pc+40 (addr 0x000000004cdbf2f0)    ;; code: HANDLER, LoadFieldStub, minor: 7
0x4cdbf2cc    76  br x16
0x4cdbf2d0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdbf2d4    84  d63f03e0       constant
0x4cdbf2d8    88  210ed491       constant
0x4cdbf2dc    92  00000000       constant
0x4cdbf2e0    96  aa120c81       constant
0x4cdbf2e4   100  0000ffff       constant
0x4cdbf2e8   104  4cd222e0       constant
0x4cdbf2ec   108  00000000       constant
0x4cdbf2f0   112  4cd67340       constant
0x4cdbf2f4   116  00000000       constant


RelocInfo (size = 10)
0x4cdbf290  embedded object  (0x210ed491 Cell for 0)
0x4cdbf2a0  embedded object  (0xffffaa120c81 WeakCell for 0x48d6ca81 <an Object with map 0x2a8164d1>)
0x4cdbf2b8  code target (BUILTIN)  (0x4cd222e0)
0x4cdbf2c8  code target (HANDLER)  (0x4cd67340)
0x4cdbf2d0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = super_
compiler = unknown
Instructions (size = 168)
0x4cdbff00     0  sub csp, jssp, #0x8 (8)
0x4cdbff04     4  str x3, [jssp, #-8]!
0x4cdbff08     8  sub csp, jssp, #0x8 (8)
0x4cdbff0c    12  str x4, [jssp, #-8]!
0x4cdbff10    16  ldr x3, pc+104 (addr 0x000000004cdbff78)    ;; object: 0x2105b0f1 Cell for 0
0x4cdbff14    20  ldur x3, [x3, #7]
0x4cdbff18    24  cmp x3, #0x0 (0)
0x4cdbff1c    28  b.ne #+0x3c (addr 0x4cdbff58)
0x4cdbff20    32  ldr x5, pc+96 (addr 0x000000004cdbff80)    ;; object: 0xffffaa121e39 WeakCell for 0x2a830469 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdbff24    36  ldur x5, [x5, #7]
0x4cdbff28    40  tbz w5, #0, #+0x30 (addr 0x4cdbff58)
0x4cdbff2c    44  ldursw x4, [x5, #15]
0x4cdbff30    48  tbnz w4, #23, #+0x28 (addr 0x4cdbff58)
0x4cdbff34    52  ldur x4, [x5, #47]
0x4cdbff38    56  ldur x4, [x4, #143]
0x4cdbff3c    60  cmp x0, x4
0x4cdbff40    64  b.ne #+0x18 (addr 0x4cdbff58)
0x4cdbff44    68  ldr x4, [jssp], #8
0x4cdbff48    72  ldr x3, [jssp], #8
0x4cdbff4c    76  ldr x2, pc+60 (addr 0x000000004cdbff88)    ;; object: 0x210c9f09 <String[6]: super_>
0x4cdbff50    80  ldr x16, pc+64 (addr 0x000000004cdbff90)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0x4cdbff54    84  br x16
0x4cdbff58    88  ldr x2, pc+64 (addr 0x000000004cdbff98)    ;; object: 0x210c9f09 <String[6]: super_>
0x4cdbff5c    92  ldr x4, [jssp], #8
0x4cdbff60    96  ldr x3, [jssp], #8
0x4cdbff64   100  ldr x16, pc+60 (addr 0x000000004cdbffa0)    ;; code: BUILTIN
0x4cdbff68   104  br x16
0x4cdbff6c   108  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdbff70   112  d63f03e0       constant
0x4cdbff74   116  d503201f       constant
0x4cdbff78   120  2105b0f1       constant
0x4cdbff7c   124  00000000       constant
0x4cdbff80   128  aa121e39       constant
0x4cdbff84   132  0000ffff       constant
0x4cdbff88   136  210c9f09       constant
0x4cdbff8c   140  00000000       constant
0x4cdbff90   144  4cd3cea0       constant
0x4cdbff94   148  00000000       constant
0x4cdbff98   152  210c9f09       constant
0x4cdbff9c   156  00000000       constant
0x4cdbffa0   160  4cd22420       constant
0x4cdbffa4   164  00000000       constant


RelocInfo (size = 12)
0x4cdbff10  embedded object  (0x2105b0f1 Cell for 0)
0x4cdbff20  embedded object  (0xffffaa121e39 WeakCell for 0x2a830469 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdbff4c  embedded object  (0x210c9f09 <String[6]: super_>)
0x4cdbff50  code target (HANDLER)  (0x4cd3cea0)
0x4cdbff58  embedded object  (0x210c9f09 <String[6]: super_>)
0x4cdbff64  code target (BUILTIN)  (0x4cd22420)
0x4cdbff6c  constant pool (size 60)

--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 621)
0x4cdc0020     0  movz x2, #0xd2c0
0x4cdc0024     4  movk x2, #0x166d, lsl #16
0x4cdc0028     8  ldp x3, x0, [x2]
0x4cdc002c    12  adds x16, x3, #0xe8 (232)
0x4cdc0030    16  ccmp x16, x0, #nzCv, lo
0x4cdc0034    20  b.hi #+0xf4 (addr 0x4cdc0128)
0x4cdc0038    24  str x16, [x2]
0x4cdc003c    28  orr x3, x3, #0x1
0x4cdc0040    32  ldr x0, pc+344 (addr 0x000000004cdc0198)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdc0044    36  stur x0, [x3, #-1]
0x4cdc0048    40  movz x0, #0x1b00000000
0x4cdc004c    44  stur x0, [x3, #7]
0x4cdc0050    48  stur x1, [x3, #15]
0x4cdc0054    52  stur cp, [x3, #23]
0x4cdc0058    56  ldr x0, pc+328 (addr 0x000000004cdc01a0)    ;; object: 0x21004519 <the hole>
0x4cdc005c    60  stur x0, [x3, #31]
0x4cdc0060    64  ldur x0, [cp, #39]
0x4cdc0064    68  stur x0, [x3, #39]
0x4cdc0068    72  ldr x0, pc+320 (addr 0x000000004cdc01a8)    ;; object: 0x21004241 <undefined>
0x4cdc006c    76  stur x0, [x3, #47]
0x4cdc0070    80  ldr x0, pc+320 (addr 0x000000004cdc01b0)    ;; object: 0x21004241 <undefined>
0x4cdc0074    84  stur x0, [x3, #55]
0x4cdc0078    88  ldr x0, pc+320 (addr 0x000000004cdc01b8)    ;; object: 0x21004241 <undefined>
0x4cdc007c    92  stur x0, [x3, #63]
0x4cdc0080    96  ldr x0, pc+320 (addr 0x000000004cdc01c0)    ;; object: 0x21004241 <undefined>
0x4cdc0084   100  stur x0, [x3, #71]
0x4cdc0088   104  ldr x0, pc+320 (addr 0x000000004cdc01c8)    ;; object: 0x21004241 <undefined>
0x4cdc008c   108  stur x0, [x3, #79]
0x4cdc0090   112  ldr x0, pc+320 (addr 0x000000004cdc01d0)    ;; object: 0x21004241 <undefined>
0x4cdc0094   116  stur x0, [x3, #87]
0x4cdc0098   120  ldr x0, pc+320 (addr 0x000000004cdc01d8)    ;; object: 0x21004241 <undefined>
0x4cdc009c   124  stur x0, [x3, #95]
0x4cdc00a0   128  ldr x0, pc+320 (addr 0x000000004cdc01e0)    ;; object: 0x21004241 <undefined>
0x4cdc00a4   132  stur x0, [x3, #103]
0x4cdc00a8   136  ldr x0, pc+320 (addr 0x000000004cdc01e8)    ;; object: 0x21004241 <undefined>
0x4cdc00ac   140  stur x0, [x3, #111]
0x4cdc00b0   144  ldr x0, pc+320 (addr 0x000000004cdc01f0)    ;; object: 0x21004241 <undefined>
0x4cdc00b4   148  stur x0, [x3, #119]
0x4cdc00b8   152  ldr x0, pc+320 (addr 0x000000004cdc01f8)    ;; object: 0x21004241 <undefined>
0x4cdc00bc   156  stur x0, [x3, #127]
0x4cdc00c0   160  ldr x0, pc+320 (addr 0x000000004cdc0200)    ;; object: 0x21004241 <undefined>
0x4cdc00c4   164  stur x0, [x3, #135]
0x4cdc00c8   168  ldr x0, pc+320 (addr 0x000000004cdc0208)    ;; object: 0x21004241 <undefined>
0x4cdc00cc   172  stur x0, [x3, #143]
0x4cdc00d0   176  ldr x0, pc+320 (addr 0x000000004cdc0210)    ;; object: 0x21004241 <undefined>
0x4cdc00d4   180  stur x0, [x3, #151]
0x4cdc00d8   184  ldr x0, pc+320 (addr 0x000000004cdc0218)    ;; object: 0x21004241 <undefined>
0x4cdc00dc   188  stur x0, [x3, #159]
0x4cdc00e0   192  ldr x0, pc+320 (addr 0x000000004cdc0220)    ;; object: 0x21004241 <undefined>
0x4cdc00e4   196  stur x0, [x3, #167]
0x4cdc00e8   200  ldr x0, pc+320 (addr 0x000000004cdc0228)    ;; object: 0x21004241 <undefined>
0x4cdc00ec   204  stur x0, [x3, #175]
0x4cdc00f0   208  ldr x0, pc+320 (addr 0x000000004cdc0230)    ;; object: 0x21004241 <undefined>
0x4cdc00f4   212  stur x0, [x3, #183]
0x4cdc00f8   216  ldr x0, pc+320 (addr 0x000000004cdc0238)    ;; object: 0x21004241 <undefined>
0x4cdc00fc   220  stur x0, [x3, #191]
0x4cdc0100   224  ldr x0, pc+320 (addr 0x000000004cdc0240)    ;; object: 0x21004241 <undefined>
0x4cdc0104   228  stur x0, [x3, #199]
0x4cdc0108   232  ldr x0, pc+320 (addr 0x000000004cdc0248)    ;; object: 0x21004241 <undefined>
0x4cdc010c   236  stur x0, [x3, #207]
0x4cdc0110   240  ldr x0, pc+320 (addr 0x000000004cdc0250)    ;; object: 0x21004241 <undefined>
0x4cdc0114   244  stur x0, [x3, #215]
0x4cdc0118   248  ldr x0, pc+320 (addr 0x000000004cdc0258)    ;; object: 0x21004241 <undefined>
0x4cdc011c   252  stur x0, [x3, #223]
0x4cdc0120   256  mov x0, x3
0x4cdc0124   260  ret
0x4cdc0128   264  sub csp, jssp, #0x10 (16)
0x4cdc012c   268  stp fp, lr, [jssp, #-16]!
0x4cdc0130   272  movz fp, #0xa00000000
0x4cdc0134   276  sub csp, jssp, #0x8 (8)
0x4cdc0138   280  str fp, [jssp, #-8]!
0x4cdc013c   284  add fp, jssp, #0x8 (8)
0x4cdc0140   288  movz x3, #0x0
0x4cdc0144   292  mov x16, lr
0x4cdc0148   296  ldr x17, pc+280 (addr 0x000000004cdc0260)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdc014c   300  blr x17
0x4cdc0150   304  movz x0, #0xe800000000
0x4cdc0154   308  movz x10, #0x0
0x4cdc0158   312  sub csp, jssp, #0x10 (16)
0x4cdc015c   316  stp x10, x0, [jssp, #-16]!
0x4cdc0160   320  movz x0, #0x2
0x4cdc0164   324  movz x1, #0x5b88
0x4cdc0168   328  movk x1, #0xe2, lsl #16
0x4cdc016c   332  ldr x16, pc+252 (addr 0x000000004cdc0268)    ;; code: STUB, CEntryStub, minor: 5
0x4cdc0170   336  blr x16
0x4cdc0174   340  str x0, [jssp, #24]
0x4cdc0178   344  ldr x16, pc+248 (addr 0x000000004cdc0270)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdc017c   348  blr x16
0x4cdc0180   352  ldr lr, [jssp, #16]
0x4cdc0184   356  ldp xzr, fp, [jssp], #24
0x4cdc0188   360  b #-0x148 (addr 0x4cdc0040)
0x4cdc018c   364  5800075f       constant pool begin (num_const = 58)    ;; constant pool
0x4cdc0190   368  d63f03e0       constant
0x4cdc0194   372  d503201f       constant
0x4cdc0198   376  2a806149       constant
0x4cdc019c   380  00000000       constant
0x4cdc01a0   384  21004519       constant
0x4cdc01a4   388  00000000       constant
0x4cdc01a8   392  21004241       constant
0x4cdc01ac   396  00000000       constant
0x4cdc01b0   400  21004241       constant
0x4cdc01b4   404  00000000       constant
0x4cdc01b8   408  21004241       constant
0x4cdc01bc   412  00000000       constant
0x4cdc01c0   416  21004241       constant
0x4cdc01c4   420  00000000       constant
0x4cdc01c8   424  21004241       constant
0x4cdc01cc   428  00000000       constant
0x4cdc01d0   432  21004241       constant
0x4cdc01d4   436  00000000       constant
0x4cdc01d8   440  21004241       constant
0x4cdc01dc   444  00000000       constant
0x4cdc01e0   448  21004241       constant
0x4cdc01e4   452  00000000       constant
0x4cdc01e8   456  21004241       constant
0x4cdc01ec   460  00000000       constant
0x4cdc01f0   464  21004241       constant
0x4cdc01f4   468  00000000       constant
0x4cdc01f8   472  21004241       constant
0x4cdc01fc   476  00000000       constant
0x4cdc0200   480  21004241       constant
0x4cdc0204   484  00000000       constant
0x4cdc0208   488  21004241       constant
0x4cdc020c   492  00000000       constant
0x4cdc0210   496  21004241       constant
0x4cdc0214   500  00000000       constant
0x4cdc0218   504  21004241       constant
0x4cdc021c   508  00000000       constant
0x4cdc0220   512  21004241       constant
0x4cdc0224   516  00000000       constant
0x4cdc0228   520  21004241       constant
0x4cdc022c   524  00000000       constant
0x4cdc0230   528  21004241       constant
0x4cdc0234   532  00000000       constant
0x4cdc0238   536  21004241       constant
0x4cdc023c   540  00000000       constant
0x4cdc0240   544  21004241       constant
0x4cdc0244   548  00000000       constant
0x4cdc0248   552  21004241       constant
0x4cdc024c   556  00000000       constant
0x4cdc0250   560  21004241       constant
0x4cdc0254   564  00000000       constant
0x4cdc0258   568  21004241       constant
0x4cdc025c   572  00000000       constant
0x4cdc0260   576  4cd06820       constant
0x4cdc0264   580  00000000       constant
0x4cdc0268   584  4cd06260       constant
0x4cdc026c   588  00000000       constant
0x4cdc0270   592  4cd068e0       constant
0x4cdc0274   596  00000000       constant


Safepoints (size = 21)
0x4cdc0174   340  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0x4cdc0040  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdc0058  embedded object  (0x21004519 <the hole>)
0x4cdc0068  embedded object  (0x21004241 <undefined>)
0x4cdc0070  embedded object  (0x21004241 <undefined>)
0x4cdc0078  embedded object  (0x21004241 <undefined>)
0x4cdc0080  embedded object  (0x21004241 <undefined>)
0x4cdc0088  embedded object  (0x21004241 <undefined>)
0x4cdc0090  embedded object  (0x21004241 <undefined>)
0x4cdc0098  embedded object  (0x21004241 <undefined>)
0x4cdc00a0  embedded object  (0x21004241 <undefined>)
0x4cdc00a8  embedded object  (0x21004241 <undefined>)
0x4cdc00b0  embedded object  (0x21004241 <undefined>)
0x4cdc00b8  embedded object  (0x21004241 <undefined>)
0x4cdc00c0  embedded object  (0x21004241 <undefined>)
0x4cdc00c8  embedded object  (0x21004241 <undefined>)
0x4cdc00d0  embedded object  (0x21004241 <undefined>)
0x4cdc00d8  embedded object  (0x21004241 <undefined>)
0x4cdc00e0  embedded object  (0x21004241 <undefined>)
0x4cdc00e8  embedded object  (0x21004241 <undefined>)
0x4cdc00f0  embedded object  (0x21004241 <undefined>)
0x4cdc00f8  embedded object  (0x21004241 <undefined>)
0x4cdc0100  embedded object  (0x21004241 <undefined>)
0x4cdc0108  embedded object  (0x21004241 <undefined>)
0x4cdc0110  embedded object  (0x21004241 <undefined>)
0x4cdc0118  embedded object  (0x21004241 <undefined>)
0x4cdc0148  code target (STUB)  (0x4cd06820)
0x4cdc016c  code target (STUB)  (0x4cd06260)
0x4cdc0178  code target (STUB)  (0x4cd068e0)
0x4cdc018c  constant pool (size 236)

--- End code ---
kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 621)
0x4cdc0020     0  movz x2, #0xd2c0
0x4cdc0024     4  movk x2, #0x166d, lsl #16
0x4cdc0028     8  ldp x3, x0, [x2]
0x4cdc002c    12  adds x16, x3, #0xe8 (232)
0x4cdc0030    16  ccmp x16, x0, #nzCv, lo
0x4cdc0034    20  b.hi #+0xf4 (addr 0x4cdc0128)
0x4cdc0038    24  str x16, [x2]
0x4cdc003c    28  orr x3, x3, #0x1
0x4cdc0040    32  ldr x0, pc+344 (addr 0x000000004cdc0198)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdc0044    36  stur x0, [x3, #-1]
0x4cdc0048    40  movz x0, #0x1b00000000
0x4cdc004c    44  stur x0, [x3, #7]
0x4cdc0050    48  stur x1, [x3, #15]
0x4cdc0054    52  stur cp, [x3, #23]
0x4cdc0058    56  ldr x0, pc+328 (addr 0x000000004cdc01a0)    ;; object: 0x21004519 <the hole>
0x4cdc005c    60  stur x0, [x3, #31]
0x4cdc0060    64  ldur x0, [cp, #39]
0x4cdc0064    68  stur x0, [x3, #39]
0x4cdc0068    72  ldr x0, pc+320 (addr 0x000000004cdc01a8)    ;; object: 0x21004241 <undefined>
0x4cdc006c    76  stur x0, [x3, #47]
0x4cdc0070    80  ldr x0, pc+320 (addr 0x000000004cdc01b0)    ;; object: 0x21004241 <undefined>
0x4cdc0074    84  stur x0, [x3, #55]
0x4cdc0078    88  ldr x0, pc+320 (addr 0x000000004cdc01b8)    ;; object: 0x21004241 <undefined>
0x4cdc007c    92  stur x0, [x3, #63]
0x4cdc0080    96  ldr x0, pc+320 (addr 0x000000004cdc01c0)    ;; object: 0x21004241 <undefined>
0x4cdc0084   100  stur x0, [x3, #71]
0x4cdc0088   104  ldr x0, pc+320 (addr 0x000000004cdc01c8)    ;; object: 0x21004241 <undefined>
0x4cdc008c   108  stur x0, [x3, #79]
0x4cdc0090   112  ldr x0, pc+320 (addr 0x000000004cdc01d0)    ;; object: 0x21004241 <undefined>
0x4cdc0094   116  stur x0, [x3, #87]
0x4cdc0098   120  ldr x0, pc+320 (addr 0x000000004cdc01d8)    ;; object: 0x21004241 <undefined>
0x4cdc009c   124  stur x0, [x3, #95]
0x4cdc00a0   128  ldr x0, pc+320 (addr 0x000000004cdc01e0)    ;; object: 0x21004241 <undefined>
0x4cdc00a4   132  stur x0, [x3, #103]
0x4cdc00a8   136  ldr x0, pc+320 (addr 0x000000004cdc01e8)    ;; object: 0x21004241 <undefined>
0x4cdc00ac   140  stur x0, [x3, #111]
0x4cdc00b0   144  ldr x0, pc+320 (addr 0x000000004cdc01f0)    ;; object: 0x21004241 <undefined>
0x4cdc00b4   148  stur x0, [x3, #119]
0x4cdc00b8   152  ldr x0, pc+320 (addr 0x000000004cdc01f8)    ;; object: 0x21004241 <undefined>
0x4cdc00bc   156  stur x0, [x3, #127]
0x4cdc00c0   160  ldr x0, pc+320 (addr 0x000000004cdc0200)    ;; object: 0x21004241 <undefined>
0x4cdc00c4   164  stur x0, [x3, #135]
0x4cdc00c8   168  ldr x0, pc+320 (addr 0x000000004cdc0208)    ;; object: 0x21004241 <undefined>
0x4cdc00cc   172  stur x0, [x3, #143]
0x4cdc00d0   176  ldr x0, pc+320 (addr 0x000000004cdc0210)    ;; object: 0x21004241 <undefined>
0x4cdc00d4   180  stur x0, [x3, #151]
0x4cdc00d8   184  ldr x0, pc+320 (addr 0x000000004cdc0218)    ;; object: 0x21004241 <undefined>
0x4cdc00dc   188  stur x0, [x3, #159]
0x4cdc00e0   192  ldr x0, pc+320 (addr 0x000000004cdc0220)    ;; object: 0x21004241 <undefined>
0x4cdc00e4   196  stur x0, [x3, #167]
0x4cdc00e8   200  ldr x0, pc+320 (addr 0x000000004cdc0228)    ;; object: 0x21004241 <undefined>
0x4cdc00ec   204  stur x0, [x3, #175]
0x4cdc00f0   208  ldr x0, pc+320 (addr 0x000000004cdc0230)    ;; object: 0x21004241 <undefined>
0x4cdc00f4   212  stur x0, [x3, #183]
0x4cdc00f8   216  ldr x0, pc+320 (addr 0x000000004cdc0238)    ;; object: 0x21004241 <undefined>
0x4cdc00fc   220  stur x0, [x3, #191]
0x4cdc0100   224  ldr x0, pc+320 (addr 0x000000004cdc0240)    ;; object: 0x21004241 <undefined>
0x4cdc0104   228  stur x0, [x3, #199]
0x4cdc0108   232  ldr x0, pc+320 (addr 0x000000004cdc0248)    ;; object: 0x21004241 <undefined>
0x4cdc010c   236  stur x0, [x3, #207]
0x4cdc0110   240  ldr x0, pc+320 (addr 0x000000004cdc0250)    ;; object: 0x21004241 <undefined>
0x4cdc0114   244  stur x0, [x3, #215]
0x4cdc0118   248  ldr x0, pc+320 (addr 0x000000004cdc0258)    ;; object: 0x21004241 <undefined>
0x4cdc011c   252  stur x0, [x3, #223]
0x4cdc0120   256  mov x0, x3
0x4cdc0124   260  ret
0x4cdc0128   264  sub csp, jssp, #0x10 (16)
0x4cdc012c   268  stp fp, lr, [jssp, #-16]!
0x4cdc0130   272  movz fp, #0xa00000000
0x4cdc0134   276  sub csp, jssp, #0x8 (8)
0x4cdc0138   280  str fp, [jssp, #-8]!
0x4cdc013c   284  add fp, jssp, #0x8 (8)
0x4cdc0140   288  movz x3, #0x0
0x4cdc0144   292  mov x16, lr
0x4cdc0148   296  ldr x17, pc+280 (addr 0x000000004cdc0260)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdc014c   300  blr x17
0x4cdc0150   304  movz x0, #0xe800000000
0x4cdc0154   308  movz x10, #0x0
0x4cdc0158   312  sub csp, jssp, #0x10 (16)
0x4cdc015c   316  stp x10, x0, [jssp, #-16]!
0x4cdc0160   320  movz x0, #0x2
0x4cdc0164   324  movz x1, #0x5b88
0x4cdc0168   328  movk x1, #0xe2, lsl #16
0x4cdc016c   332  ldr x16, pc+252 (addr 0x000000004cdc0268)    ;; code: STUB, CEntryStub, minor: 5
0x4cdc0170   336  blr x16
0x4cdc0174   340  str x0, [jssp, #24]
0x4cdc0178   344  ldr x16, pc+248 (addr 0x000000004cdc0270)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdc017c   348  blr x16
0x4cdc0180   352  ldr lr, [jssp, #16]
0x4cdc0184   356  ldp xzr, fp, [jssp], #24
0x4cdc0188   360  b #-0x148 (addr 0x4cdc0040)
0x4cdc018c   364  5800075f       constant pool begin (num_const = 58)    ;; constant pool
0x4cdc0190   368  d63f03e0       constant
0x4cdc0194   372  d503201f       constant
0x4cdc0198   376  2a806149       constant
0x4cdc019c   380  00000000       constant
0x4cdc01a0   384  21004519       constant
0x4cdc01a4   388  00000000       constant
0x4cdc01a8   392  21004241       constant
0x4cdc01ac   396  00000000       constant
0x4cdc01b0   400  21004241       constant
0x4cdc01b4   404  00000000       constant
0x4cdc01b8   408  21004241       constant
0x4cdc01bc   412  00000000       constant
0x4cdc01c0   416  21004241       constant
0x4cdc01c4   420  00000000       constant
0x4cdc01c8   424  21004241       constant
0x4cdc01cc   428  00000000       constant
0x4cdc01d0   432  21004241       constant
0x4cdc01d4   436  00000000       constant
0x4cdc01d8   440  21004241       constant
0x4cdc01dc   444  00000000       constant
0x4cdc01e0   448  21004241       constant
0x4cdc01e4   452  00000000       constant
0x4cdc01e8   456  21004241       constant
0x4cdc01ec   460  00000000       constant
0x4cdc01f0   464  21004241       constant
0x4cdc01f4   468  00000000       constant
0x4cdc01f8   472  21004241       constant
0x4cdc01fc   476  00000000       constant
0x4cdc0200   480  21004241       constant
0x4cdc0204   484  00000000       constant
0x4cdc0208   488  21004241       constant
0x4cdc020c   492  00000000       constant
0x4cdc0210   496  21004241       constant
0x4cdc0214   500  00000000       constant
0x4cdc0218   504  21004241       constant
0x4cdc021c   508  00000000       constant
0x4cdc0220   512  21004241       constant
0x4cdc0224   516  00000000       constant
0x4cdc0228   520  21004241       constant
0x4cdc022c   524  00000000       constant
0x4cdc0230   528  21004241       constant
0x4cdc0234   532  00000000       constant
0x4cdc0238   536  21004241       constant
0x4cdc023c   540  00000000       constant
0x4cdc0240   544  21004241       constant
0x4cdc0244   548  00000000       constant
0x4cdc0248   552  21004241       constant
0x4cdc024c   556  00000000       constant
0x4cdc0250   560  21004241       constant
0x4cdc0254   564  00000000       constant
0x4cdc0258   568  21004241       constant
0x4cdc025c   572  00000000       constant
0x4cdc0260   576  4cd06820       constant
0x4cdc0264   580  00000000       constant
0x4cdc0268   584  4cd06260       constant
0x4cdc026c   588  00000000       constant
0x4cdc0270   592  4cd068e0       constant
0x4cdc0274   596  00000000       constant


Safepoints (size = 21)
0x4cdc0174   340  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 34)
0x4cdc0040  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdc0058  embedded object  (0x21004519 <the hole>)
0x4cdc0068  embedded object  (0x21004241 <undefined>)
0x4cdc0070  embedded object  (0x21004241 <undefined>)
0x4cdc0078  embedded object  (0x21004241 <undefined>)
0x4cdc0080  embedded object  (0x21004241 <undefined>)
0x4cdc0088  embedded object  (0x21004241 <undefined>)
0x4cdc0090  embedded object  (0x21004241 <undefined>)
0x4cdc0098  embedded object  (0x21004241 <undefined>)
0x4cdc00a0  embedded object  (0x21004241 <undefined>)
0x4cdc00a8  embedded object  (0x21004241 <undefined>)
0x4cdc00b0  embedded object  (0x21004241 <undefined>)
0x4cdc00b8  embedded object  (0x21004241 <undefined>)
0x4cdc00c0  embedded object  (0x21004241 <undefined>)
0x4cdc00c8  embedded object  (0x21004241 <undefined>)
0x4cdc00d0  embedded object  (0x21004241 <undefined>)
0x4cdc00d8  embedded object  (0x21004241 <undefined>)
0x4cdc00e0  embedded object  (0x21004241 <undefined>)
0x4cdc00e8  embedded object  (0x21004241 <undefined>)
0x4cdc00f0  embedded object  (0x21004241 <undefined>)
0x4cdc00f8  embedded object  (0x21004241 <undefined>)
0x4cdc0100  embedded object  (0x21004241 <undefined>)
0x4cdc0108  embedded object  (0x21004241 <undefined>)
0x4cdc0110  embedded object  (0x21004241 <undefined>)
0x4cdc0118  embedded object  (0x21004241 <undefined>)
0x4cdc0148  code target (STUB)  (0x4cd06820)
0x4cdc016c  code target (STUB)  (0x4cd06260)
0x4cdc0178  code target (STUB)  (0x4cd068e0)
0x4cdc018c  constant pool (size 236)


kind = LOAD_IC
major_key = LoadICTrampolineStub
ic_state = GENERIC
extra_ic_state = 0
name = LoadICTrampolineStub
compiler = unknown
Instructions (size = 440)
0x4cdc0300     0  ldur x3, [fp, #-16]
0x4cdc0304     4  ldur x3, [x3, #31]
0x4cdc0308     8  ldur x3, [x3, #87]
0x4cdc030c    12  add x4, x3, x0, asr #29
0x4cdc0310    16  ldur x4, [x4, #15]
0x4cdc0314    20  tbz w1, #0, #+0x170 (addr 0x4cdc0484)
0x4cdc0318    24  ldur x5, [x1, #-1]
0x4cdc031c    28  ldur x6, [x4, #7]
0x4cdc0320    32  cmp x6, x5
0x4cdc0324    36  b.ne #+0x14 (addr 0x4cdc0338)
0x4cdc0328    40  add x4, x3, x0, asr #29
0x4cdc032c    44  ldur x4, [x4, #23]
0x4cdc0330    48  add x4, x4, #0x5f (95)
0x4cdc0334    52  br x4
0x4cdc0338    56  ldur x6, [x4, #-1]
0x4cdc033c    60  ldr x16, [x26, #224]
0x4cdc0340    64  cmp x6, x16
0x4cdc0344    68  b.ne #+0x5c (addr 0x4cdc03a0)
0x4cdc0348    72  ldur x6, [x4, #15]
0x4cdc034c    76  ldur x6, [x6, #7]
0x4cdc0350    80  cmp x5, x6
0x4cdc0354    84  b.ne #+0x10 (addr 0x4cdc0364)
0x4cdc0358    88  ldur x4, [x4, #23]
0x4cdc035c    92  add x4, x4, #0x5f (95)
0x4cdc0360    96  br x4
0x4cdc0364   100  ldur x7, [x4, #7]
0x4cdc0368   104  add x7, x4, x7, asr #29
0x4cdc036c   108  add x7, x7, #0xf (15)
0x4cdc0370   112  add x4, x4, #0x1f (31)
0x4cdc0374   116  ldr x6, [x4]
0x4cdc0378   120  ldur x6, [x6, #7]
0x4cdc037c   124  cmp x5, x6
0x4cdc0380   128  b.ne #+0x10 (addr 0x4cdc0390)
0x4cdc0384   132  ldr x4, [x4, #8]
0x4cdc0388   136  add x4, x4, #0x5f (95)
0x4cdc038c   140  br x4
0x4cdc0390   144  add x4, x4, #0x10 (16)
0x4cdc0394   148  cmp x4, x7
0x4cdc0398   152  b.lt #-0x24 (addr 0x4cdc0374)
0x4cdc039c   156  b #+0xcc (addr 0x4cdc0468)
0x4cdc03a0   160  ldr x16, [x26, #2400]
0x4cdc03a4   164  cmp x4, x16
0x4cdc03a8   168  b.ne #+0xc0 (addr 0x4cdc0468)
0x4cdc03ac   172  tbz w1, #0, #+0xbc (addr 0x4cdc0468)
0x4cdc03b0   176  ldur x4, [x2, #7]
0x4cdc03b4   180  ldur x5, [x1, #-1]
0x4cdc03b8   184  add x4, x4, x5
0x4cdc03bc   188  movz x16, #0x5102
0x4cdc03c0   192  eor x4, x4, x16
0x4cdc03c4   196  ubfx x4, x4, #2, #11
0x4cdc03c8   200  add x7, x4, x4, lsl #1
0x4cdc03cc   204  ldr x5, pc+204 (addr 0x000000004cdc0498)    ;; external reference (StubCache::primary_->key)
0x4cdc03d0   208  add x5, x5, x7, lsl #3
0x4cdc03d4   212  ldr x6, [x5]
0x4cdc03d8   216  cmp x2, x6
0x4cdc03dc   220  b.ne #+0x34 (addr 0x4cdc0410)
0x4cdc03e0   224  ldr x6, [x5, #16]
0x4cdc03e4   228  ldur x7, [x1, #-1]
0x4cdc03e8   232  cmp x6, x7
0x4cdc03ec   236  b.ne #+0x24 (addr 0x4cdc0410)
0x4cdc03f0   240  ldr x5, [x5, #8]
0x4cdc03f4   244  ldur w6, [x5, #63]
0x4cdc03f8   248  and w6, w6, #0xffffffc7
0x4cdc03fc   252  movz w16, #0x5102
0x4cdc0400   256  cmp w6, w16
0x4cdc0404   260  b.ne #+0xc (addr 0x4cdc0410)
0x4cdc0408   264  add x5, x5, #0x5f (95)
0x4cdc040c   268  br x5
0x4cdc0410   272  sub x4, x4, x2, lsr #2
0x4cdc0414   276  movz x16, #0x1440
0x4cdc0418   280  add x4, x4, x16
0x4cdc041c   284  and x4, x4, #0x1ff
0x4cdc0420   288  add x7, x4, x4, lsl #1
0x4cdc0424   292  ldr x5, pc+124 (addr 0x000000004cdc04a0)    ;; external reference (StubCache::secondary_->key)
0x4cdc0428   296  add x5, x5, x7, lsl #3
0x4cdc042c   300  ldr x6, [x5]
0x4cdc0430   304  cmp x2, x6
0x4cdc0434   308  b.ne #+0x34 (addr 0x4cdc0468)
0x4cdc0438   312  ldr x6, [x5, #16]
0x4cdc043c   316  ldur x7, [x1, #-1]
0x4cdc0440   320  cmp x6, x7
0x4cdc0444   324  b.ne #+0x24 (addr 0x4cdc0468)
0x4cdc0448   328  ldr x5, [x5, #8]
0x4cdc044c   332  ldur w6, [x5, #63]
0x4cdc0450   336  and w6, w6, #0xffffffc7
0x4cdc0454   340  movz w16, #0x5102
0x4cdc0458   344  cmp w6, w16
0x4cdc045c   348  b.ne #+0xc (addr 0x4cdc0468)
0x4cdc0460   352  add x5, x5, #0x5f (95)
0x4cdc0464   356  br x5
0x4cdc0468   360  sub csp, jssp, #0x20 (32)
0x4cdc046c   364  stp x3, x0, [jssp, #-32]!
0x4cdc0470   368  stp x2, x1, [jssp, #16]
0x4cdc0474   372  movz x0, #0x4
0x4cdc0478   376  ldr x1, pc+48 (addr 0x000000004cdc04a8)    ;; external reference (Runtime::LoadIC_Miss)
0x4cdc047c   380  ldr x16, pc+52 (addr 0x000000004cdc04b0)    ;; code: STUB, CEntryStub, minor: 4
0x4cdc0480   384  br x16
0x4cdc0484   388  ldr x5, [x26, #120]
0x4cdc0488   392  b #-0x16c (addr 0x4cdc031c)
0x4cdc048c   396  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0x4cdc0490   400  d63f03e0       constant
0x4cdc0494   404  d503201f       constant
0x4cdc0498   408  166f7950       constant
0x4cdc049c   412  00000000       constant
0x4cdc04a0   416  16703950       constant
0x4cdc04a4   420  00000000       constant
0x4cdc04a8   424  00c86e20       constant
0x4cdc04ac   428  00000000       constant
0x4cdc04b0   432  4cd06060       constant
0x4cdc04b4   436  00000000       constant


RelocInfo (size = 19)
0x4cdc03cc  external reference (StubCache::primary_->key)  (0x166f7950)
0x4cdc0424  external reference (StubCache::secondary_->key)  (0x16703950)
0x4cdc0478  external reference (Runtime::LoadIC_Miss)  (0xc86e20)
0x4cdc047c  code target (STUB)  (0x4cd06060)
0x4cdc048c  constant pool (size 44)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0x4cdc1ac0     0  ldur x0, [x1, #55]
0x4cdc1ac4     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0x4cdc1ac0     0  ldur x0, [x1, #55]
0x4cdc1ac4     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = super_
compiler = unknown
Instructions (size = 168)
0x4cdc1b40     0  sub csp, jssp, #0x8 (8)
0x4cdc1b44     4  str x3, [jssp, #-8]!
0x4cdc1b48     8  sub csp, jssp, #0x8 (8)
0x4cdc1b4c    12  str x4, [jssp, #-8]!
0x4cdc1b50    16  ldr x3, pc+104 (addr 0x000000004cdc1bb8)    ;; object: 0x2105b0f1 Cell for 0
0x4cdc1b54    20  ldur x3, [x3, #7]
0x4cdc1b58    24  cmp x3, #0x0 (0)
0x4cdc1b5c    28  b.ne #+0x3c (addr 0x4cdc1b98)
0x4cdc1b60    32  ldr x5, pc+96 (addr 0x000000004cdc1bc0)    ;; object: 0xffffaa125349 WeakCell for 0x2a830af1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdc1b64    36  ldur x5, [x5, #7]
0x4cdc1b68    40  tbz w5, #0, #+0x30 (addr 0x4cdc1b98)
0x4cdc1b6c    44  ldursw x4, [x5, #15]
0x4cdc1b70    48  tbnz w4, #23, #+0x28 (addr 0x4cdc1b98)
0x4cdc1b74    52  ldur x4, [x5, #47]
0x4cdc1b78    56  ldur x4, [x4, #143]
0x4cdc1b7c    60  cmp x0, x4
0x4cdc1b80    64  b.ne #+0x18 (addr 0x4cdc1b98)
0x4cdc1b84    68  ldr x4, [jssp], #8
0x4cdc1b88    72  ldr x3, [jssp], #8
0x4cdc1b8c    76  ldr x2, pc+60 (addr 0x000000004cdc1bc8)    ;; object: 0x210c9f09 <String[6]: super_>
0x4cdc1b90    80  ldr x16, pc+64 (addr 0x000000004cdc1bd0)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0x4cdc1b94    84  br x16
0x4cdc1b98    88  ldr x2, pc+64 (addr 0x000000004cdc1bd8)    ;; object: 0x210c9f09 <String[6]: super_>
0x4cdc1b9c    92  ldr x4, [jssp], #8
0x4cdc1ba0    96  ldr x3, [jssp], #8
0x4cdc1ba4   100  ldr x16, pc+60 (addr 0x000000004cdc1be0)    ;; code: BUILTIN
0x4cdc1ba8   104  br x16
0x4cdc1bac   108  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdc1bb0   112  d63f03e0       constant
0x4cdc1bb4   116  d503201f       constant
0x4cdc1bb8   120  2105b0f1       constant
0x4cdc1bbc   124  00000000       constant
0x4cdc1bc0   128  aa125349       constant
0x4cdc1bc4   132  0000ffff       constant
0x4cdc1bc8   136  210c9f09       constant
0x4cdc1bcc   140  00000000       constant
0x4cdc1bd0   144  4cd3cea0       constant
0x4cdc1bd4   148  00000000       constant
0x4cdc1bd8   152  210c9f09       constant
0x4cdc1bdc   156  00000000       constant
0x4cdc1be0   160  4cd22420       constant
0x4cdc1be4   164  00000000       constant


RelocInfo (size = 12)
0x4cdc1b50  embedded object  (0x2105b0f1 Cell for 0)
0x4cdc1b60  embedded object  (0xffffaa125349 WeakCell for 0x2a830af1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdc1b8c  embedded object  (0x210c9f09 <String[6]: super_>)
0x4cdc1b90  code target (HANDLER)  (0x4cd3cea0)
0x4cdc1b98  embedded object  (0x210c9f09 <String[6]: super_>)
0x4cdc1ba4  code target (BUILTIN)  (0x4cd22420)
0x4cdc1bac  constant pool (size 60)

kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0x4cdc1d00     0  sub csp, jssp, #0x8 (8)
0x4cdc1d04     4  str x3, [jssp, #-8]!
0x4cdc1d08     8  sub csp, jssp, #0x8 (8)
0x4cdc1d0c    12  str x4, [jssp, #-8]!
0x4cdc1d10    16  ldr x3, pc+104 (addr 0x000000004cdc1d78)    ;; object: 0xffffaa1255d9 Cell for 0
0x4cdc1d14    20  ldur x3, [x3, #7]
0x4cdc1d18    24  cmp x3, #0x0 (0)
0x4cdc1d1c    28  b.ne #+0x8 (addr 0x4cdc1d24)
0x4cdc1d20    32  b #+0x18 (addr 0x4cdc1d38)
0x4cdc1d24    36  ldr x2, pc+92 (addr 0x000000004cdc1d80)    ;; object: 0x21005371 <String[9]: prototype>
0x4cdc1d28    40  ldr x4, [jssp], #8
0x4cdc1d2c    44  ldr x3, [jssp], #8
0x4cdc1d30    48  ldr x16, pc+88 (addr 0x000000004cdc1d88)    ;; code: BUILTIN
0x4cdc1d34    52  br x16
0x4cdc1d38    56  add jssp, jssp, #0x10 (16)
0x4cdc1d3c    60  ldr x3, pc+84 (addr 0x000000004cdc1d90)    ;; object: 0x210404a9 <AccessorInfo>
0x4cdc1d40    64  ldr x4, pc+88 (addr 0x000000004cdc1d98)    ;; object: 0x21005371 <String[9]: prototype>
0x4cdc1d44    68  sub csp, jssp, #0x28 (40)
0x4cdc1d48    72  stp x4, x3, [jssp, #-32]!
0x4cdc1d4c    76  stp x1, x1, [jssp, #16]
0x4cdc1d50    80  str x0, [jssp, #-8]!
0x4cdc1d54    84  movz x16, #0x100000000
0x4cdc1d58    88  sub csp, jssp, #0x8 (8)
0x4cdc1d5c    92  str x16, [jssp, #-8]!
0x4cdc1d60    96  movz x0, #0x6
0x4cdc1d64   100  ldr x1, pc+60 (addr 0x000000004cdc1da0)    ;; external reference (Runtime::StoreCallbackProperty)
0x4cdc1d68   104  ldr x16, pc+64 (addr 0x000000004cdc1da8)    ;; code: STUB, CEntryStub, minor: 4
0x4cdc1d6c   108  br x16
0x4cdc1d70   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cdc1d74   116  d63f03e0       constant
0x4cdc1d78   120  aa1255d9       constant
0x4cdc1d7c   124  0000ffff       constant
0x4cdc1d80   128  21005371       constant
0x4cdc1d84   132  00000000       constant
0x4cdc1d88   136  4cd22420       constant
0x4cdc1d8c   140  00000000       constant
0x4cdc1d90   144  210404a9       constant
0x4cdc1d94   148  00000000       constant
0x4cdc1d98   152  21005371       constant
0x4cdc1d9c   156  00000000       constant
0x4cdc1da0   160  00c8b560       constant
0x4cdc1da4   164  00000000       constant
0x4cdc1da8   168  4cd06060       constant
0x4cdc1dac   172  00000000       constant


RelocInfo (size = 14)
0x4cdc1d10  embedded object  (0xffffaa1255d9 Cell for 0)
0x4cdc1d24  embedded object  (0x21005371 <String[9]: prototype>)
0x4cdc1d30  code target (BUILTIN)  (0x4cd22420)
0x4cdc1d3c  embedded object  (0x210404a9 <AccessorInfo>)
0x4cdc1d40  embedded object  (0x21005371 <String[9]: prototype>)
0x4cdc1d64  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0x4cdc1d68  code target (STUB)  (0x4cd06060)
0x4cdc1d70  constant pool (size 64)

--- Code ---
kind = TO_BOOLEAN_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 64
type = NORMAL
name = ToBooleanICStub
compiler = crankshaft
Instructions (size = 136)
0x4cdc1e20     0  tbz w0, #0, #+0x40 (addr 0x4cdc1e60)
0x4cdc1e24     4  ldur x2, [x0, #-1]
0x4cdc1e28     8  ldrb w1, [x2, #11]
0x4cdc1e2c    12  cmp x1, #0x80 (128)
0x4cdc1e30    16  b.eq #+0x10 (addr 0x4cdc1e40)
0x4cdc1e34    20  b #+0x2c (addr 0x4cdc1e60)
0x4cdc1e38    24  ldr x0, pc+24 (addr 0x000000004cdc1e50)    ;; object: 0x210042b1 <false>
0x4cdc1e3c    28  ret
0x4cdc1e40    32  ldr x0, pc+24 (addr 0x000000004cdc1e58)    ;; object: 0x21004281 <true>
0x4cdc1e44    36  ret
0x4cdc1e48    40  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdc1e4c    44  d63f03e0       constant
0x4cdc1e50    48  210042b1       constant
0x4cdc1e54    52  00000000       constant
0x4cdc1e58    56  21004281       constant
0x4cdc1e5c    60  00000000       constant
0x4cdc1e60    64  movz x16, #0x0
0x4cdc1e64    68  sub csp, jssp, #0x10 (16)
0x4cdc1e68    72  stp fp, lr, [jssp, #-16]!
0x4cdc1e6c    76  bl #+0x4 (addr 0x4cdc1e70)
0x4cdc1e70    80  movz x17, #0xa00000000
0x4cdc1e74    84  sub csp, jssp, #0x10 (16)
0x4cdc1e78    88  stp x17, cp, [jssp, #-16]!
0x4cdc1e7c    92  add fp, jssp, #0x10 (16)
0x4cdc1e80    96  ldr x17, pc+24 (addr 0x000000004cdc1e98)    ;; lazy deoptimization bailout 0
0x4cdc1e84   100  add x17, x17, x16
0x4cdc1e88   104  br x17
0x4cdc1e8c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdc1e90   112  d63f03e0       constant
0x4cdc1e94   116  d503201f       constant
0x4cdc1e98   120  4cb06000       constant
0x4cdc1e9c   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdc1e38  embedded object  (0x210042b1 <false>)
0x4cdc1e40  embedded object  (0x21004281 <true>)
0x4cdc1e48  constant pool (size 24)
0x4cdc1e80  runtime entry
0x4cdc1e8c  constant pool (size 20)

--- End code ---
kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 64
type = NORMAL
name = ToBooleanICStub(Symbol)
compiler = crankshaft
Instructions (size = 136)
0x4cdc1e20     0  tbz w0, #0, #+0x40 (addr 0x4cdc1e60)
0x4cdc1e24     4  ldur x2, [x0, #-1]
0x4cdc1e28     8  ldrb w1, [x2, #11]
0x4cdc1e2c    12  cmp x1, #0x80 (128)
0x4cdc1e30    16  b.eq #+0x10 (addr 0x4cdc1e40)
0x4cdc1e34    20  b #+0x2c (addr 0x4cdc1e60)
0x4cdc1e38    24  ldr x0, pc+24 (addr 0x000000004cdc1e50)    ;; object: 0x210042b1 <false>
0x4cdc1e3c    28  ret
0x4cdc1e40    32  ldr x0, pc+24 (addr 0x000000004cdc1e58)    ;; object: 0x21004281 <true>
0x4cdc1e44    36  ret
0x4cdc1e48    40  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdc1e4c    44  d63f03e0       constant
0x4cdc1e50    48  210042b1       constant
0x4cdc1e54    52  00000000       constant
0x4cdc1e58    56  21004281       constant
0x4cdc1e5c    60  00000000       constant
0x4cdc1e60    64  movz x16, #0x0
0x4cdc1e64    68  sub csp, jssp, #0x10 (16)
0x4cdc1e68    72  stp fp, lr, [jssp, #-16]!
0x4cdc1e6c    76  bl #+0x4 (addr 0x4cdc1e70)
0x4cdc1e70    80  movz x17, #0xa00000000
0x4cdc1e74    84  sub csp, jssp, #0x10 (16)
0x4cdc1e78    88  stp x17, cp, [jssp, #-16]!
0x4cdc1e7c    92  add fp, jssp, #0x10 (16)
0x4cdc1e80    96  ldr x17, pc+24 (addr 0x000000004cdc1e98)    ;; lazy deoptimization bailout 0
0x4cdc1e84   100  add x17, x17, x16
0x4cdc1e88   104  br x17
0x4cdc1e8c   108  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdc1e90   112  d63f03e0       constant
0x4cdc1e94   116  d503201f       constant
0x4cdc1e98   120  4cb06000       constant
0x4cdc1e9c   124  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdc1e38  embedded object  (0x210042b1 <false>)
0x4cdc1e40  embedded object  (0x21004281 <true>)
0x4cdc1e48  constant pool (size 24)
0x4cdc1e80  runtime entry
0x4cdc1e8c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0x4cdc3c80     0  sub csp, jssp, #0x8 (8)
0x4cdc3c84     4  str x3, [jssp, #-8]!
0x4cdc3c88     8  sub csp, jssp, #0x8 (8)
0x4cdc3c8c    12  str x4, [jssp, #-8]!
0x4cdc3c90    16  ldr x3, pc+104 (addr 0x000000004cdc3cf8)    ;; object: 0xffffaa12e999 Cell for 0
0x4cdc3c94    20  ldur x3, [x3, #7]
0x4cdc3c98    24  cmp x3, #0x0 (0)
0x4cdc3c9c    28  b.ne #+0x8 (addr 0x4cdc3ca4)
0x4cdc3ca0    32  b #+0x18 (addr 0x4cdc3cb8)
0x4cdc3ca4    36  ldr x2, pc+92 (addr 0x000000004cdc3d00)    ;; object: 0x21005371 <String[9]: prototype>
0x4cdc3ca8    40  ldr x4, [jssp], #8
0x4cdc3cac    44  ldr x3, [jssp], #8
0x4cdc3cb0    48  ldr x16, pc+88 (addr 0x000000004cdc3d08)    ;; code: BUILTIN
0x4cdc3cb4    52  br x16
0x4cdc3cb8    56  add jssp, jssp, #0x10 (16)
0x4cdc3cbc    60  ldr x3, pc+84 (addr 0x000000004cdc3d10)    ;; object: 0x210404a9 <AccessorInfo>
0x4cdc3cc0    64  ldr x4, pc+88 (addr 0x000000004cdc3d18)    ;; object: 0x21005371 <String[9]: prototype>
0x4cdc3cc4    68  sub csp, jssp, #0x28 (40)
0x4cdc3cc8    72  stp x4, x3, [jssp, #-32]!
0x4cdc3ccc    76  stp x1, x1, [jssp, #16]
0x4cdc3cd0    80  str x0, [jssp, #-8]!
0x4cdc3cd4    84  movz x16, #0x100000000
0x4cdc3cd8    88  sub csp, jssp, #0x8 (8)
0x4cdc3cdc    92  str x16, [jssp, #-8]!
0x4cdc3ce0    96  movz x0, #0x6
0x4cdc3ce4   100  ldr x1, pc+60 (addr 0x000000004cdc3d20)    ;; external reference (Runtime::StoreCallbackProperty)
0x4cdc3ce8   104  ldr x16, pc+64 (addr 0x000000004cdc3d28)    ;; code: STUB, CEntryStub, minor: 4
0x4cdc3cec   108  br x16
0x4cdc3cf0   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cdc3cf4   116  d63f03e0       constant
0x4cdc3cf8   120  aa12e999       constant
0x4cdc3cfc   124  0000ffff       constant
0x4cdc3d00   128  21005371       constant
0x4cdc3d04   132  00000000       constant
0x4cdc3d08   136  4cd22420       constant
0x4cdc3d0c   140  00000000       constant
0x4cdc3d10   144  210404a9       constant
0x4cdc3d14   148  00000000       constant
0x4cdc3d18   152  21005371       constant
0x4cdc3d1c   156  00000000       constant
0x4cdc3d20   160  00c8b560       constant
0x4cdc3d24   164  00000000       constant
0x4cdc3d28   168  4cd06060       constant
0x4cdc3d2c   172  00000000       constant


RelocInfo (size = 14)
0x4cdc3c90  embedded object  (0xffffaa12e999 Cell for 0)
0x4cdc3ca4  embedded object  (0x21005371 <String[9]: prototype>)
0x4cdc3cb0  code target (BUILTIN)  (0x4cd22420)
0x4cdc3cbc  embedded object  (0x210404a9 <AccessorInfo>)
0x4cdc3cc0  embedded object  (0x21005371 <String[9]: prototype>)
0x4cdc3ce4  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0x4cdc3ce8  code target (STUB)  (0x4cd06060)
0x4cdc3cf0  constant pool (size 64)

--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 349)
0x4cdca920     0  movz x2, #0xd2c0
0x4cdca924     4  movk x2, #0x166d, lsl #16
0x4cdca928     8  ldp x3, x0, [x2]
0x4cdca92c    12  adds x16, x3, #0x60 (96)
0x4cdca930    16  ccmp x16, x0, #nzCv, lo
0x4cdca934    20  b.hi #+0x6c (addr 0x4cdca9a0)
0x4cdca938    24  str x16, [x2]
0x4cdca93c    28  orr x3, x3, #0x1
0x4cdca940    32  ldr x0, pc+208 (addr 0x000000004cdcaa10)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdca944    36  stur x0, [x3, #-1]
0x4cdca948    40  movz x0, #0xa00000000
0x4cdca94c    44  stur x0, [x3, #7]
0x4cdca950    48  stur x1, [x3, #15]
0x4cdca954    52  stur cp, [x3, #23]
0x4cdca958    56  ldr x0, pc+192 (addr 0x000000004cdcaa18)    ;; object: 0x21004519 <the hole>
0x4cdca95c    60  stur x0, [x3, #31]
0x4cdca960    64  ldur x0, [cp, #39]
0x4cdca964    68  stur x0, [x3, #39]
0x4cdca968    72  ldr x0, pc+184 (addr 0x000000004cdcaa20)    ;; object: 0x21004241 <undefined>
0x4cdca96c    76  stur x0, [x3, #47]
0x4cdca970    80  ldr x0, pc+184 (addr 0x000000004cdcaa28)    ;; object: 0x21004241 <undefined>
0x4cdca974    84  stur x0, [x3, #55]
0x4cdca978    88  ldr x0, pc+184 (addr 0x000000004cdcaa30)    ;; object: 0x21004241 <undefined>
0x4cdca97c    92  stur x0, [x3, #63]
0x4cdca980    96  ldr x0, pc+184 (addr 0x000000004cdcaa38)    ;; object: 0x21004241 <undefined>
0x4cdca984   100  stur x0, [x3, #71]
0x4cdca988   104  ldr x0, pc+184 (addr 0x000000004cdcaa40)    ;; object: 0x21004241 <undefined>
0x4cdca98c   108  stur x0, [x3, #79]
0x4cdca990   112  ldr x0, pc+184 (addr 0x000000004cdcaa48)    ;; object: 0x21004241 <undefined>
0x4cdca994   116  stur x0, [x3, #87]
0x4cdca998   120  mov x0, x3
0x4cdca99c   124  ret
0x4cdca9a0   128  sub csp, jssp, #0x10 (16)
0x4cdca9a4   132  stp fp, lr, [jssp, #-16]!
0x4cdca9a8   136  movz fp, #0xa00000000
0x4cdca9ac   140  sub csp, jssp, #0x8 (8)
0x4cdca9b0   144  str fp, [jssp, #-8]!
0x4cdca9b4   148  add fp, jssp, #0x8 (8)
0x4cdca9b8   152  movz x3, #0x0
0x4cdca9bc   156  mov x16, lr
0x4cdca9c0   160  ldr x17, pc+144 (addr 0x000000004cdcaa50)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdca9c4   164  blr x17
0x4cdca9c8   168  movz x0, #0x6000000000
0x4cdca9cc   172  movz x10, #0x0
0x4cdca9d0   176  sub csp, jssp, #0x10 (16)
0x4cdca9d4   180  stp x10, x0, [jssp, #-16]!
0x4cdca9d8   184  movz x0, #0x2
0x4cdca9dc   188  movz x1, #0x5b88
0x4cdca9e0   192  movk x1, #0xe2, lsl #16
0x4cdca9e4   196  ldr x16, pc+116 (addr 0x000000004cdcaa58)    ;; code: STUB, CEntryStub, minor: 5
0x4cdca9e8   200  blr x16
0x4cdca9ec   204  str x0, [jssp, #24]
0x4cdca9f0   208  ldr x16, pc+112 (addr 0x000000004cdcaa60)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdca9f4   212  blr x16
0x4cdca9f8   216  ldr lr, [jssp, #16]
0x4cdca9fc   220  ldp xzr, fp, [jssp], #24
0x4cdcaa00   224  b #-0xc0 (addr 0x4cdca940)
0x4cdcaa04   228  5800031f       constant pool begin (num_const = 24)    ;; constant pool
0x4cdcaa08   232  d63f03e0       constant
0x4cdcaa0c   236  d503201f       constant
0x4cdcaa10   240  2a806149       constant
0x4cdcaa14   244  00000000       constant
0x4cdcaa18   248  21004519       constant
0x4cdcaa1c   252  00000000       constant
0x4cdcaa20   256  21004241       constant
0x4cdcaa24   260  00000000       constant
0x4cdcaa28   264  21004241       constant
0x4cdcaa2c   268  00000000       constant
0x4cdcaa30   272  21004241       constant
0x4cdcaa34   276  00000000       constant
0x4cdcaa38   280  21004241       constant
0x4cdcaa3c   284  00000000       constant
0x4cdcaa40   288  21004241       constant
0x4cdcaa44   292  00000000       constant
0x4cdcaa48   296  21004241       constant
0x4cdcaa4c   300  00000000       constant
0x4cdcaa50   304  4cd06820       constant
0x4cdcaa54   308  00000000       constant
0x4cdcaa58   312  4cd06260       constant
0x4cdcaa5c   316  00000000       constant
0x4cdcaa60   320  4cd068e0       constant
0x4cdcaa64   324  00000000       constant


Safepoints (size = 21)
0x4cdca9ec   204  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 17)
0x4cdca940  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdca958  embedded object  (0x21004519 <the hole>)
0x4cdca968  embedded object  (0x21004241 <undefined>)
0x4cdca970  embedded object  (0x21004241 <undefined>)
0x4cdca978  embedded object  (0x21004241 <undefined>)
0x4cdca980  embedded object  (0x21004241 <undefined>)
0x4cdca988  embedded object  (0x21004241 <undefined>)
0x4cdca990  embedded object  (0x21004241 <undefined>)
0x4cdca9c0  code target (STUB)  (0x4cd06820)
0x4cdca9e4  code target (STUB)  (0x4cd06260)
0x4cdca9f0  code target (STUB)  (0x4cd068e0)
0x4cdcaa04  constant pool (size 100)

--- End code ---
kind = STUB
major_key = FastNewContextStub
name = FastNewContextStub
compiler = crankshaft
Instructions (size = 349)
0x4cdca920     0  movz x2, #0xd2c0
0x4cdca924     4  movk x2, #0x166d, lsl #16
0x4cdca928     8  ldp x3, x0, [x2]
0x4cdca92c    12  adds x16, x3, #0x60 (96)
0x4cdca930    16  ccmp x16, x0, #nzCv, lo
0x4cdca934    20  b.hi #+0x6c (addr 0x4cdca9a0)
0x4cdca938    24  str x16, [x2]
0x4cdca93c    28  orr x3, x3, #0x1
0x4cdca940    32  ldr x0, pc+208 (addr 0x000000004cdcaa10)    ;; object: 0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdca944    36  stur x0, [x3, #-1]
0x4cdca948    40  movz x0, #0xa00000000
0x4cdca94c    44  stur x0, [x3, #7]
0x4cdca950    48  stur x1, [x3, #15]
0x4cdca954    52  stur cp, [x3, #23]
0x4cdca958    56  ldr x0, pc+192 (addr 0x000000004cdcaa18)    ;; object: 0x21004519 <the hole>
0x4cdca95c    60  stur x0, [x3, #31]
0x4cdca960    64  ldur x0, [cp, #39]
0x4cdca964    68  stur x0, [x3, #39]
0x4cdca968    72  ldr x0, pc+184 (addr 0x000000004cdcaa20)    ;; object: 0x21004241 <undefined>
0x4cdca96c    76  stur x0, [x3, #47]
0x4cdca970    80  ldr x0, pc+184 (addr 0x000000004cdcaa28)    ;; object: 0x21004241 <undefined>
0x4cdca974    84  stur x0, [x3, #55]
0x4cdca978    88  ldr x0, pc+184 (addr 0x000000004cdcaa30)    ;; object: 0x21004241 <undefined>
0x4cdca97c    92  stur x0, [x3, #63]
0x4cdca980    96  ldr x0, pc+184 (addr 0x000000004cdcaa38)    ;; object: 0x21004241 <undefined>
0x4cdca984   100  stur x0, [x3, #71]
0x4cdca988   104  ldr x0, pc+184 (addr 0x000000004cdcaa40)    ;; object: 0x21004241 <undefined>
0x4cdca98c   108  stur x0, [x3, #79]
0x4cdca990   112  ldr x0, pc+184 (addr 0x000000004cdcaa48)    ;; object: 0x21004241 <undefined>
0x4cdca994   116  stur x0, [x3, #87]
0x4cdca998   120  mov x0, x3
0x4cdca99c   124  ret
0x4cdca9a0   128  sub csp, jssp, #0x10 (16)
0x4cdca9a4   132  stp fp, lr, [jssp, #-16]!
0x4cdca9a8   136  movz fp, #0xa00000000
0x4cdca9ac   140  sub csp, jssp, #0x8 (8)
0x4cdca9b0   144  str fp, [jssp, #-8]!
0x4cdca9b4   148  add fp, jssp, #0x8 (8)
0x4cdca9b8   152  movz x3, #0x0
0x4cdca9bc   156  mov x16, lr
0x4cdca9c0   160  ldr x17, pc+144 (addr 0x000000004cdcaa50)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdca9c4   164  blr x17
0x4cdca9c8   168  movz x0, #0x6000000000
0x4cdca9cc   172  movz x10, #0x0
0x4cdca9d0   176  sub csp, jssp, #0x10 (16)
0x4cdca9d4   180  stp x10, x0, [jssp, #-16]!
0x4cdca9d8   184  movz x0, #0x2
0x4cdca9dc   188  movz x1, #0x5b88
0x4cdca9e0   192  movk x1, #0xe2, lsl #16
0x4cdca9e4   196  ldr x16, pc+116 (addr 0x000000004cdcaa58)    ;; code: STUB, CEntryStub, minor: 5
0x4cdca9e8   200  blr x16
0x4cdca9ec   204  str x0, [jssp, #24]
0x4cdca9f0   208  ldr x16, pc+112 (addr 0x000000004cdcaa60)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdca9f4   212  blr x16
0x4cdca9f8   216  ldr lr, [jssp, #16]
0x4cdca9fc   220  ldp xzr, fp, [jssp], #24
0x4cdcaa00   224  b #-0xc0 (addr 0x4cdca940)
0x4cdcaa04   228  5800031f       constant pool begin (num_const = 24)    ;; constant pool
0x4cdcaa08   232  d63f03e0       constant
0x4cdcaa0c   236  d503201f       constant
0x4cdcaa10   240  2a806149       constant
0x4cdcaa14   244  00000000       constant
0x4cdcaa18   248  21004519       constant
0x4cdcaa1c   252  00000000       constant
0x4cdcaa20   256  21004241       constant
0x4cdcaa24   260  00000000       constant
0x4cdcaa28   264  21004241       constant
0x4cdcaa2c   268  00000000       constant
0x4cdcaa30   272  21004241       constant
0x4cdcaa34   276  00000000       constant
0x4cdcaa38   280  21004241       constant
0x4cdcaa3c   284  00000000       constant
0x4cdcaa40   288  21004241       constant
0x4cdcaa44   292  00000000       constant
0x4cdcaa48   296  21004241       constant
0x4cdcaa4c   300  00000000       constant
0x4cdcaa50   304  4cd06820       constant
0x4cdcaa54   308  00000000       constant
0x4cdcaa58   312  4cd06260       constant
0x4cdcaa5c   316  00000000       constant
0x4cdcaa60   320  4cd068e0       constant
0x4cdcaa64   324  00000000       constant


Safepoints (size = 21)
0x4cdca9ec   204  000 | x1 | x3 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 17)
0x4cdca940  embedded object  (0x2a806149 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdca958  embedded object  (0x21004519 <the hole>)
0x4cdca968  embedded object  (0x21004241 <undefined>)
0x4cdca970  embedded object  (0x21004241 <undefined>)
0x4cdca978  embedded object  (0x21004241 <undefined>)
0x4cdca980  embedded object  (0x21004241 <undefined>)
0x4cdca988  embedded object  (0x21004241 <undefined>)
0x4cdca990  embedded object  (0x21004241 <undefined>)
0x4cdca9c0  code target (STUB)  (0x4cd06820)
0x4cdca9e4  code target (STUB)  (0x4cd06260)
0x4cdca9f0  code target (STUB)  (0x4cd068e0)
0x4cdcaa04  constant pool (size 100)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 192)
0x4cdceb80     0  ldur x4, [x1, #15]
0x4cdceb84     4  ldur w5, [x1, #27]
0x4cdceb88     8  tbnz w2, #0, #+0x2c (addr 0x4cdcebb4)
0x4cdceb8c    12  asr x7, x2, #32
0x4cdceb90    16  cmp w7, w5
0x4cdceb94    20  b.hs #+0x48 (addr 0x4cdcebdc)
0x4cdceb98    24  add x5, x4, #0xf (15)
0x4cdceb9c    28  ldr x6, [x5, w7, sxtw #3]
0x4cdceba0    32  ldr x16, [x26, #88]
0x4cdceba4    36  cmp x6, x16
0x4cdceba8    40  b.eq #+0x44 (addr 0x4cdcebec)
0x4cdcebac    44  mov x0, x6
0x4cdcebb0    48  ret
0x4cdcebb4    52  ldur x16, [x2, #-1]
0x4cdcebb8    56  ldr x17, [x26, #120]
0x4cdcebbc    60  cmp x16, x17
0x4cdcebc0    64  b.ne #+0x3c (addr 0x4cdcebfc)
0x4cdcebc4    68  ldur d29, [x2, #7]
0x4cdcebc8    72  fcvtzs w7, d29
0x4cdcebcc    76  scvtf d0, w7
0x4cdcebd0    80  fcmp d29, d0
0x4cdcebd4    84  b.ne #+0x28 (addr 0x4cdcebfc)
0x4cdcebd8    88  b #-0x48 (addr 0x4cdceb90)
0x4cdcebdc    92  movz x16, #0x0
0x4cdcebe0    96  sub csp, jssp, #0x10 (16)
0x4cdcebe4   100  stp fp, lr, [jssp, #-16]!
0x4cdcebe8   104  bl #+0x24 (addr 0x4cdcec0c)
0x4cdcebec   108  movz x16, #0x8
0x4cdcebf0   112  sub csp, jssp, #0x10 (16)
0x4cdcebf4   116  stp fp, lr, [jssp, #-16]!
0x4cdcebf8   120  bl #+0x14 (addr 0x4cdcec0c)
0x4cdcebfc   124  movz x16, #0x10
0x4cdcec00   128  sub csp, jssp, #0x10 (16)
0x4cdcec04   132  stp fp, lr, [jssp, #-16]!
0x4cdcec08   136  bl #+0x4 (addr 0x4cdcec0c)
0x4cdcec0c   140  movz x17, #0xa00000000
0x4cdcec10   144  sub csp, jssp, #0x10 (16)
0x4cdcec14   148  stp x17, cp, [jssp, #-16]!
0x4cdcec18   152  add fp, jssp, #0x10 (16)
0x4cdcec1c   156  ldr x17, pc+20 (addr 0x000000004cdcec30)    ;; lazy deoptimization bailout 0
0x4cdcec20   160  add x17, x17, x16
0x4cdcec24   164  br x17
0x4cdcec28   168  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdcec2c   172  d63f03e0       constant
0x4cdcec30   176  4cb06000       constant
0x4cdcec34   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cdcec1c  runtime entry
0x4cdcec28  constant pool (size 16)

--- End code ---
kind = HANDLER
major_key = LoadFastElementStub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 192)
0x4cdceb80     0  ldur x4, [x1, #15]
0x4cdceb84     4  ldur w5, [x1, #27]
0x4cdceb88     8  tbnz w2, #0, #+0x2c (addr 0x4cdcebb4)
0x4cdceb8c    12  asr x7, x2, #32
0x4cdceb90    16  cmp w7, w5
0x4cdceb94    20  b.hs #+0x48 (addr 0x4cdcebdc)
0x4cdceb98    24  add x5, x4, #0xf (15)
0x4cdceb9c    28  ldr x6, [x5, w7, sxtw #3]
0x4cdceba0    32  ldr x16, [x26, #88]
0x4cdceba4    36  cmp x6, x16
0x4cdceba8    40  b.eq #+0x44 (addr 0x4cdcebec)
0x4cdcebac    44  mov x0, x6
0x4cdcebb0    48  ret
0x4cdcebb4    52  ldur x16, [x2, #-1]
0x4cdcebb8    56  ldr x17, [x26, #120]
0x4cdcebbc    60  cmp x16, x17
0x4cdcebc0    64  b.ne #+0x3c (addr 0x4cdcebfc)
0x4cdcebc4    68  ldur d29, [x2, #7]
0x4cdcebc8    72  fcvtzs w7, d29
0x4cdcebcc    76  scvtf d0, w7
0x4cdcebd0    80  fcmp d29, d0
0x4cdcebd4    84  b.ne #+0x28 (addr 0x4cdcebfc)
0x4cdcebd8    88  b #-0x48 (addr 0x4cdceb90)
0x4cdcebdc    92  movz x16, #0x0
0x4cdcebe0    96  sub csp, jssp, #0x10 (16)
0x4cdcebe4   100  stp fp, lr, [jssp, #-16]!
0x4cdcebe8   104  bl #+0x24 (addr 0x4cdcec0c)
0x4cdcebec   108  movz x16, #0x8
0x4cdcebf0   112  sub csp, jssp, #0x10 (16)
0x4cdcebf4   116  stp fp, lr, [jssp, #-16]!
0x4cdcebf8   120  bl #+0x14 (addr 0x4cdcec0c)
0x4cdcebfc   124  movz x16, #0x10
0x4cdcec00   128  sub csp, jssp, #0x10 (16)
0x4cdcec04   132  stp fp, lr, [jssp, #-16]!
0x4cdcec08   136  bl #+0x4 (addr 0x4cdcec0c)
0x4cdcec0c   140  movz x17, #0xa00000000
0x4cdcec10   144  sub csp, jssp, #0x10 (16)
0x4cdcec14   148  stp x17, cp, [jssp, #-16]!
0x4cdcec18   152  add fp, jssp, #0x10 (16)
0x4cdcec1c   156  ldr x17, pc+20 (addr 0x000000004cdcec30)    ;; lazy deoptimization bailout 0
0x4cdcec20   160  add x17, x17, x16
0x4cdcec24   164  br x17
0x4cdcec28   168  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdcec2c   172  d63f03e0       constant
0x4cdcec30   176  4cb06000       constant
0x4cdcec34   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cdcec1c  runtime entry
0x4cdcec28  constant pool (size 16)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*STRING -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 624)
0x4cdcf320     0  orr x16, x1, x0
0x4cdcf324     4  tbnz w16, #0, #+0x10 (addr 0x4cdcf334)
0x4cdcf328     8  asr x1, x1, #32
0x4cdcf32c    12  sub x0, x1, x0, asr #32
0x4cdcf330    16  ret
0x4cdcf334    20  cmp x0, x1
0x4cdcf338    24  b.ne #+0x30 (addr 0x4cdcf368)
0x4cdcf33c    28  ldur x16, [x0, #-1]
0x4cdcf340    32  ldr x17, [x26, #120]
0x4cdcf344    36  cmp x16, x17
0x4cdcf348    40  b.eq #+0xc (addr 0x4cdcf354)
0x4cdcf34c    44  movz x0, #0x0
0x4cdcf350    48  ret
0x4cdcf354    52  ldur d0, [x0, #7]
0x4cdcf358    56  fcmp d0, d0
0x4cdcf35c    60  b.vc #-0x10 (addr 0x4cdcf34c)
0x4cdcf360    64  movn x0, #0x0
0x4cdcf364    68  ret
0x4cdcf368    72  and x16, x1, x0
0x4cdcf36c    76  tbnz w16, #0, #+0x64 (addr 0x4cdcf3d0)
0x4cdcf370    80  tbz w0, #0, #+0x24 (addr 0x4cdcf394)
0x4cdcf374    84  ldur x16, [x0, #-1]
0x4cdcf378    88  ldr x17, [x26, #120]
0x4cdcf37c    92  cmp x16, x17
0x4cdcf380    96  b.eq #+0x8 (addr 0x4cdcf388)
0x4cdcf384   100  ret
0x4cdcf388   104  ldur d0, [x0, #7]
0x4cdcf38c   108  scvtf d1, x1, #32
0x4cdcf390   112  b #+0x24 (addr 0x4cdcf3b4)
0x4cdcf394   116  ldur x16, [x1, #-1]
0x4cdcf398   120  ldr x17, [x26, #120]
0x4cdcf39c   124  cmp x16, x17
0x4cdcf3a0   128  b.eq #+0xc (addr 0x4cdcf3ac)
0x4cdcf3a4   132  movz x0, #0x1
0x4cdcf3a8   136  ret
0x4cdcf3ac   140  ldur d1, [x1, #7]
0x4cdcf3b0   144  scvtf d0, x0, #32
0x4cdcf3b4   148  fcmp d1, d0
0x4cdcf3b8   152  b.vs #+0x10 (addr 0x4cdcf3c8)
0x4cdcf3bc   156  cset x0, gt
0x4cdcf3c0   160  csinv x0, x0, xzr, ge
0x4cdcf3c4   164  ret
0x4cdcf3c8   168  movn x0, #0x0
0x4cdcf3cc   172  ret
0x4cdcf3d0   176  ldur x10, [x0, #-1]
0x4cdcf3d4   180  ldur x12, [x1, #-1]
0x4cdcf3d8   184  ldrb w11, [x10, #11]
0x4cdcf3dc   188  ldrb w13, [x12, #11]
0x4cdcf3e0   192  cmp x11, #0xb1 (177)
0x4cdcf3e4   196  b.lt #+0x8 (addr 0x4cdcf3ec)
0x4cdcf3e8   200  ret
0x4cdcf3ec   204  cmp x11, #0x83 (131)
0x4cdcf3f0   208  movz x16, #0x83
0x4cdcf3f4   212  ccmp x13, x16, #nZcv, ne
0x4cdcf3f8   216  movz x16, #0xb1
0x4cdcf3fc   220  ccmp x13, x16, #NzcV, ne
0x4cdcf400   224  b.ge #-0x18 (addr 0x4cdcf3e8)
0x4cdcf404   228  orr x14, x13, x11
0x4cdcf408   232  tst x14, #0xc0
0x4cdcf40c   236  b.eq #-0x24 (addr 0x4cdcf3e8)
0x4cdcf410   240  cmp x11, #0x81 (129)
0x4cdcf414   244  b.ne #+0x18 (addr 0x4cdcf42c)
0x4cdcf418   248  cmp x12, x10
0x4cdcf41c   252  b.ne #+0x10 (addr 0x4cdcf42c)
0x4cdcf420   256  ldur d1, [x1, #7]
0x4cdcf424   260  ldur d0, [x0, #7]
0x4cdcf428   264  b #-0x74 (addr 0x4cdcf3b4)
0x4cdcf42c   268  movz x16, #0x87
0x4cdcf430   272  and x14, x13, x16
0x4cdcf434   276  movz x16, #0x87
0x4cdcf438   280  and x15, x11, x16
0x4cdcf43c   284  cmp x14, #0x4 (4)
0x4cdcf440   288  ccmp x15, #4, #nzcv, eq
0x4cdcf444   292  b.ne #+0x5c (addr 0x4cdcf4a0)
0x4cdcf448   296  ldur x10, [x1, #15]
0x4cdcf44c   300  ldur x11, [x0, #15]
0x4cdcf450   304  cmp x10, x11
0x4cdcf454   308  b.eq #+0xc (addr 0x4cdcf460)
0x4cdcf458   312  movz x0, #0x100000000
0x4cdcf45c   316  ret
0x4cdcf460   320  cbnz x10, #+0xc (addr 0x4cdcf46c)
0x4cdcf464   324  movz x0, #0x0
0x4cdcf468   328  ret
0x4cdcf46c   332  asr x10, x10, #32
0x4cdcf470   336  add x11, x10, #0x17 (23)
0x4cdcf474   340  add x1, x1, x11
0x4cdcf478   344  add x0, x0, x11
0x4cdcf47c   348  neg x10, x10
0x4cdcf480   352  ldrb w11, [x1, x10]
0x4cdcf484   356  ldrb w12, [x0, x10]
0x4cdcf488   360  cmp x11, x12
0x4cdcf48c   364  b.ne #-0x34 (addr 0x4cdcf458)
0x4cdcf490   368  add x10, x10, #0x1 (1)
0x4cdcf494   372  cbnz x10, #-0x14 (addr 0x4cdcf480)
0x4cdcf498   376  movz x0, #0x0
0x4cdcf49c   380  ret
0x4cdcf4a0   384  movz x16, #0xc00000000
0x4cdcf4a4   388  sub csp, jssp, #0x10 (16)
0x4cdcf4a8   392  stp fp, lr, [jssp, #-16]!
0x4cdcf4ac   396  sub csp, jssp, #0x10 (16)
0x4cdcf4b0   400  str x16, [jssp, #-8]!
0x4cdcf4b4   404  ldr x17, pc+172 (addr 0x000000004cdcf560)    ;; object: 0x4cdcf2c1 <Code: COMPARE_IC>
0x4cdcf4b8   408  sub csp, jssp, #0x10 (16)
0x4cdcf4bc   412  str x17, [jssp, #-8]!
0x4cdcf4c0   416  add fp, jssp, #0x10 (16)
0x4cdcf4c4   420  sub csp, jssp, #0x10 (16)
0x4cdcf4c8   424  stp x0, x1, [jssp, #-16]!
0x4cdcf4cc   428  movz x0, #0x2
0x4cdcf4d0   432  ldr x1, pc+152 (addr 0x000000004cdcf568)    ;; external reference (Runtime::StrictEqual)
0x4cdcf4d4   436  ldr x16, pc+156 (addr 0x000000004cdcf570)    ;; code: STUB, CEntryStub, minor: 4
0x4cdcf4d8   440  blr x16
0x4cdcf4dc   444  mov jssp, fp
0x4cdcf4e0   448  ldp fp, lr, [jssp], #16
0x4cdcf4e4   452  ldr x1, [x26, #64]
0x4cdcf4e8   456  sub x0, x0, x1
0x4cdcf4ec   460  ret
0x4cdcf4f0   464  movz x16, #0xc00000000
0x4cdcf4f4   468  sub csp, jssp, #0x10 (16)
0x4cdcf4f8   472  stp fp, lr, [jssp, #-16]!
0x4cdcf4fc   476  sub csp, jssp, #0x10 (16)
0x4cdcf500   480  str x16, [jssp, #-8]!
0x4cdcf504   484  ldr x17, pc+116 (addr 0x000000004cdcf578)    ;; object: 0x4cdcf2c1 <Code: COMPARE_IC>
0x4cdcf508   488  sub csp, jssp, #0x10 (16)
0x4cdcf50c   492  str x17, [jssp, #-8]!
0x4cdcf510   496  add fp, jssp, #0x10 (16)
0x4cdcf514   500  sub csp, jssp, #0x18 (24)
0x4cdcf518   504  stp lr, x0, [jssp, #-24]!
0x4cdcf51c   508  str x1, [jssp, #16]
0x4cdcf520   512  movz x10, #0x2f00000000
0x4cdcf524   516  sub csp, jssp, #0x18 (24)
0x4cdcf528   520  stp x10, x0, [jssp, #-24]!
0x4cdcf52c   524  str x1, [jssp, #16]
0x4cdcf530   528  movz x0, #0x3
0x4cdcf534   532  ldr x1, pc+76 (addr 0x000000004cdcf580)    ;; external reference (Runtime::CompareIC_Miss)
0x4cdcf538   536  ldr x16, pc+80 (addr 0x000000004cdcf588)    ;; code: STUB, CEntryStub, minor: 4
0x4cdcf53c   540  blr x16
0x4cdcf540   544  add x11, x0, #0x5f (95)
0x4cdcf544   548  ldr x1, [jssp, #16]
0x4cdcf548   552  ldp lr, x0, [jssp], #24
0x4cdcf54c   556  mov jssp, fp
0x4cdcf550   560  ldp fp, lr, [jssp], #16
0x4cdcf554   564  br x11
0x4cdcf558   568  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdcf55c   572  d63f03e0       constant
0x4cdcf560   576  4cdcf2c1       constant
0x4cdcf564   580  00000000       constant
0x4cdcf568   584  00e50928       constant
0x4cdcf56c   588  00000000       constant
0x4cdcf570   592  4cd06060       constant
0x4cdcf574   596  00000000       constant
0x4cdcf578   600  4cdcf2c1       constant
0x4cdcf57c   604  00000000       constant
0x4cdcf580   608  00c8a980       constant
0x4cdcf584   612  00000000       constant
0x4cdcf588   616  4cd06060       constant
0x4cdcf58c   620  00000000       constant


RelocInfo (size = 16)
0x4cdcf4b4  embedded object  (0x4cdcf2c1 <Code: COMPARE_IC>)
0x4cdcf4d0  external reference (Runtime::StrictEqual)  (0xe50928)
0x4cdcf4d4  code target (STUB)  (0x4cd06060)
0x4cdcf504  embedded object  (0x4cdcf2c1 <Code: COMPARE_IC>)
0x4cdcf534  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cdcf538  code target (STUB)  (0x4cd06060)
0x4cdcf558  constant pool (size 56)


kind = HANDLER
major_key = <NoCache>Stub
name = indexOf
compiler = unknown
Instructions (size = 152)
0x4cdcf940     0  sub csp, jssp, #0x8 (8)
0x4cdcf944     4  str x3, [jssp, #-8]!
0x4cdcf948     8  sub csp, jssp, #0x8 (8)
0x4cdcf94c    12  str x0, [jssp, #-8]!
0x4cdcf950    16  ldur x3, [cp, #39]
0x4cdcf954    20  movz x16, #0x2e7
0x4cdcf958    24  ldr x3, [x3, x16]
0x4cdcf95c    28  ldur x3, [x3, #23]
0x4cdcf960    32  ldur x3, [x3, #23]
0x4cdcf964    36  ldr x0, pc+84 (addr 0x000000004cdcf9b8)    ;; object: 0x21063e59 Cell for 0
0x4cdcf968    40  ldur x0, [x0, #7]
0x4cdcf96c    44  cmp x0, #0x0 (0)
0x4cdcf970    48  b.ne #+0x1c (addr 0x4cdcf98c)
0x4cdcf974    52  ldur x0, [x3, #-1]
0x4cdcf978    56  ldr x4, pc+72 (addr 0x000000004cdcf9c0)    ;; object: 0xffffaa106e39 WeakCell for 0x2a8156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>
0x4cdcf97c    60  ldur x4, [x4, #7]
0x4cdcf980    64  cmp x0, x4
0x4cdcf984    68  b.ne #+0x8 (addr 0x4cdcf98c)
0x4cdcf988    72  b #+0x14 (addr 0x4cdcf99c)
0x4cdcf98c    76  ldr x0, [jssp], #8
0x4cdcf990    80  ldr x3, [jssp], #8
0x4cdcf994    84  ldr x16, pc+52 (addr 0x000000004cdcf9c8)    ;; code: BUILTIN
0x4cdcf998    88  br x16
0x4cdcf99c    92  add jssp, jssp, #0x10 (16)
0x4cdcf9a0    96  mov x1, x3
0x4cdcf9a4   100  ldr x16, pc+44 (addr 0x000000004cdcf9d0)    ;; code: HANDLER, LoadConstantStub, minor: 10
0x4cdcf9a8   104  br x16
0x4cdcf9ac   108  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0x4cdcf9b0   112  d63f03e0       constant
0x4cdcf9b4   116  d503201f       constant
0x4cdcf9b8   120  21063e59       constant
0x4cdcf9bc   124  00000000       constant
0x4cdcf9c0   128  aa106e39       constant
0x4cdcf9c4   132  0000ffff       constant
0x4cdcf9c8   136  4cd222e0       constant
0x4cdcf9cc   140  00000000       constant
0x4cdcf9d0   144  4cd8c760       constant
0x4cdcf9d4   148  00000000       constant


RelocInfo (size = 10)
0x4cdcf964  embedded object  (0x21063e59 Cell for 0)
0x4cdcf978  embedded object  (0xffffaa106e39 WeakCell for 0x2a8156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>)
0x4cdcf994  code target (BUILTIN)  (0x4cd222e0)
0x4cdcf9a4  code target (HANDLER)  (0x4cd8c760)
0x4cdcf9ac  constant pool (size 44)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 413)
0x4cdd0400     0  ldur x4, [x1, #15]
0x4cdd0404     4  ldur w5, [x4, #11]
0x4cdd0408     8  ldur x16, [x1, #23]
0x4cdd040c    12  ldur x16, [x16, #39]
0x4cdd0410    16  tst x16, #0x8
0x4cdd0414    20  b.ne #+0x11c (addr 0x4cdd0530)
0x4cdd0418    24  ldur x6, [x4, #23]
0x4cdd041c    28  ldur x4, [x4, #15]
0x4cdd0420    32  add x4, x6, x4
0x4cdd0424    36  tbnz w2, #0, #+0x48 (addr 0x4cdd046c)
0x4cdd0428    40  asr x7, x2, #32
0x4cdd042c    44  cmp w7, w5
0x4cdd0430    48  b.hs #+0x110 (addr 0x4cdd0540)
0x4cdd0434    52  ldr d0, [x4, w7, sxtw #3]
0x4cdd0438    56  movz x1, #0xd2c0
0x4cdd043c    60  movk x1, #0x166d, lsl #16
0x4cdd0440    64  ldp x2, x0, [x1]
0x4cdd0444    68  adds x16, x2, #0x10 (16)
0x4cdd0448    72  ccmp x16, x0, #nzCv, lo
0x4cdd044c    76  b.hi #+0x68 (addr 0x4cdd04b4)
0x4cdd0450    80  str x16, [x1]
0x4cdd0454    84  ldr x1, [x26, #120]
0x4cdd0458    88  str x1, [x2]
0x4cdd045c    92  orr x2, x2, #0x1
0x4cdd0460    96  stur d0, [x2, #7]
0x4cdd0464   100  mov x0, x2
0x4cdd0468   104  ret
0x4cdd046c   108  sub csp, jssp, #0x10 (16)
0x4cdd0470   112  stp fp, lr, [jssp, #-16]!
0x4cdd0474   116  movz fp, #0xa00000000
0x4cdd0478   120  sub csp, jssp, #0x8 (8)
0x4cdd047c   124  str fp, [jssp, #-8]!
0x4cdd0480   128  add fp, jssp, #0x8 (8)
0x4cdd0484   132  ldur x16, [x2, #-1]
0x4cdd0488   136  ldr x17, [x26, #120]
0x4cdd048c   140  cmp x16, x17
0x4cdd0490   144  b.ne #+0xc0 (addr 0x4cdd0550)
0x4cdd0494   148  ldur d29, [x2, #7]
0x4cdd0498   152  fcvtzs w7, d29
0x4cdd049c   156  scvtf d0, w7
0x4cdd04a0   160  fcmp d29, d0
0x4cdd04a4   164  b.ne #+0xac (addr 0x4cdd0550)
0x4cdd04a8   168  ldr lr, [jssp, #16]
0x4cdd04ac   172  ldp xzr, fp, [jssp], #24
0x4cdd04b0   176  b #-0x84 (addr 0x4cdd042c)
0x4cdd04b4   180  sub csp, jssp, #0x10 (16)
0x4cdd04b8   184  stp fp, lr, [jssp, #-16]!
0x4cdd04bc   188  movz fp, #0xa00000000
0x4cdd04c0   192  sub csp, jssp, #0x8 (8)
0x4cdd04c4   196  str fp, [jssp, #-8]!
0x4cdd04c8   200  add fp, jssp, #0x8 (8)
0x4cdd04cc   204  movz x2, #0x0
0x4cdd04d0   208  mov x16, lr
0x4cdd04d4   212  ldr x17, pc+68 (addr 0x000000004cdd0518)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdd04d8   216  blr x17
0x4cdd04dc   220  ldur cp, [fp, #-8]
0x4cdd04e0   224  movz x0, #0x0
0x4cdd04e4   228  movz x1, #0x4b48
0x4cdd04e8   232  movk x1, #0xe4, lsl #16
0x4cdd04ec   236  ldr x16, pc+52 (addr 0x000000004cdd0520)    ;; code: STUB, CEntryStub, minor: 5
0x4cdd04f0   240  blr x16
0x4cdd04f4   244  str x0, [jssp, #16]
0x4cdd04f8   248  ldr x16, pc+48 (addr 0x000000004cdd0528)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdd04fc   252  blr x16
0x4cdd0500   256  ldr lr, [jssp, #16]
0x4cdd0504   260  ldp xzr, fp, [jssp], #24
0x4cdd0508   264  b #-0xa8 (addr 0x4cdd0460)
0x4cdd050c   268  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cdd0510   272  d63f03e0       constant
0x4cdd0514   276  d503201f       constant
0x4cdd0518   280  4cd06820       constant
0x4cdd051c   284  00000000       constant
0x4cdd0520   288  4cd06260       constant
0x4cdd0524   292  00000000       constant
0x4cdd0528   296  4cd068e0       constant
0x4cdd052c   300  00000000       constant
0x4cdd0530   304  movz x16, #0x0
0x4cdd0534   308  sub csp, jssp, #0x10 (16)
0x4cdd0538   312  stp fp, lr, [jssp, #-16]!
0x4cdd053c   316  bl #+0x1c (addr 0x4cdd0558)
0x4cdd0540   320  movz x16, #0x8
0x4cdd0544   324  sub csp, jssp, #0x10 (16)
0x4cdd0548   328  stp fp, lr, [jssp, #-16]!
0x4cdd054c   332  bl #+0xc (addr 0x4cdd0558)
0x4cdd0550   336  movz x16, #0x10
0x4cdd0554   340  bl #+0x14 (addr 0x4cdd0568)
0x4cdd0558   344  movz x17, #0xa00000000
0x4cdd055c   348  sub csp, jssp, #0x10 (16)
0x4cdd0560   352  stp x17, cp, [jssp, #-16]!
0x4cdd0564   356  add fp, jssp, #0x10 (16)
0x4cdd0568   360  ldr x17, pc+24 (addr 0x000000004cdd0580)    ;; lazy deoptimization bailout 0
0x4cdd056c   364  add x17, x17, x16
0x4cdd0570   368  br x17
0x4cdd0574   372  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd0578   376  d63f03e0       constant
0x4cdd057c   380  d503201f       constant
0x4cdd0580   384  4cb06000       constant
0x4cdd0584   388  00000000       constant


Safepoints (size = 21)
0x4cdd04f4   244  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cdd04d4  code target (STUB)  (0x4cd06820)
0x4cdd04ec  code target (STUB)  (0x4cd06260)
0x4cdd04f8  code target (STUB)  (0x4cd068e0)
0x4cdd050c  constant pool (size 36)
0x4cdd0568  runtime entry
0x4cdd0574  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = LoadFastElementStub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 413)
0x4cdd0400     0  ldur x4, [x1, #15]
0x4cdd0404     4  ldur w5, [x4, #11]
0x4cdd0408     8  ldur x16, [x1, #23]
0x4cdd040c    12  ldur x16, [x16, #39]
0x4cdd0410    16  tst x16, #0x8
0x4cdd0414    20  b.ne #+0x11c (addr 0x4cdd0530)
0x4cdd0418    24  ldur x6, [x4, #23]
0x4cdd041c    28  ldur x4, [x4, #15]
0x4cdd0420    32  add x4, x6, x4
0x4cdd0424    36  tbnz w2, #0, #+0x48 (addr 0x4cdd046c)
0x4cdd0428    40  asr x7, x2, #32
0x4cdd042c    44  cmp w7, w5
0x4cdd0430    48  b.hs #+0x110 (addr 0x4cdd0540)
0x4cdd0434    52  ldr d0, [x4, w7, sxtw #3]
0x4cdd0438    56  movz x1, #0xd2c0
0x4cdd043c    60  movk x1, #0x166d, lsl #16
0x4cdd0440    64  ldp x2, x0, [x1]
0x4cdd0444    68  adds x16, x2, #0x10 (16)
0x4cdd0448    72  ccmp x16, x0, #nzCv, lo
0x4cdd044c    76  b.hi #+0x68 (addr 0x4cdd04b4)
0x4cdd0450    80  str x16, [x1]
0x4cdd0454    84  ldr x1, [x26, #120]
0x4cdd0458    88  str x1, [x2]
0x4cdd045c    92  orr x2, x2, #0x1
0x4cdd0460    96  stur d0, [x2, #7]
0x4cdd0464   100  mov x0, x2
0x4cdd0468   104  ret
0x4cdd046c   108  sub csp, jssp, #0x10 (16)
0x4cdd0470   112  stp fp, lr, [jssp, #-16]!
0x4cdd0474   116  movz fp, #0xa00000000
0x4cdd0478   120  sub csp, jssp, #0x8 (8)
0x4cdd047c   124  str fp, [jssp, #-8]!
0x4cdd0480   128  add fp, jssp, #0x8 (8)
0x4cdd0484   132  ldur x16, [x2, #-1]
0x4cdd0488   136  ldr x17, [x26, #120]
0x4cdd048c   140  cmp x16, x17
0x4cdd0490   144  b.ne #+0xc0 (addr 0x4cdd0550)
0x4cdd0494   148  ldur d29, [x2, #7]
0x4cdd0498   152  fcvtzs w7, d29
0x4cdd049c   156  scvtf d0, w7
0x4cdd04a0   160  fcmp d29, d0
0x4cdd04a4   164  b.ne #+0xac (addr 0x4cdd0550)
0x4cdd04a8   168  ldr lr, [jssp, #16]
0x4cdd04ac   172  ldp xzr, fp, [jssp], #24
0x4cdd04b0   176  b #-0x84 (addr 0x4cdd042c)
0x4cdd04b4   180  sub csp, jssp, #0x10 (16)
0x4cdd04b8   184  stp fp, lr, [jssp, #-16]!
0x4cdd04bc   188  movz fp, #0xa00000000
0x4cdd04c0   192  sub csp, jssp, #0x8 (8)
0x4cdd04c4   196  str fp, [jssp, #-8]!
0x4cdd04c8   200  add fp, jssp, #0x8 (8)
0x4cdd04cc   204  movz x2, #0x0
0x4cdd04d0   208  mov x16, lr
0x4cdd04d4   212  ldr x17, pc+68 (addr 0x000000004cdd0518)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdd04d8   216  blr x17
0x4cdd04dc   220  ldur cp, [fp, #-8]
0x4cdd04e0   224  movz x0, #0x0
0x4cdd04e4   228  movz x1, #0x4b48
0x4cdd04e8   232  movk x1, #0xe4, lsl #16
0x4cdd04ec   236  ldr x16, pc+52 (addr 0x000000004cdd0520)    ;; code: STUB, CEntryStub, minor: 5
0x4cdd04f0   240  blr x16
0x4cdd04f4   244  str x0, [jssp, #16]
0x4cdd04f8   248  ldr x16, pc+48 (addr 0x000000004cdd0528)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdd04fc   252  blr x16
0x4cdd0500   256  ldr lr, [jssp, #16]
0x4cdd0504   260  ldp xzr, fp, [jssp], #24
0x4cdd0508   264  b #-0xa8 (addr 0x4cdd0460)
0x4cdd050c   268  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4cdd0510   272  d63f03e0       constant
0x4cdd0514   276  d503201f       constant
0x4cdd0518   280  4cd06820       constant
0x4cdd051c   284  00000000       constant
0x4cdd0520   288  4cd06260       constant
0x4cdd0524   292  00000000       constant
0x4cdd0528   296  4cd068e0       constant
0x4cdd052c   300  00000000       constant
0x4cdd0530   304  movz x16, #0x0
0x4cdd0534   308  sub csp, jssp, #0x10 (16)
0x4cdd0538   312  stp fp, lr, [jssp, #-16]!
0x4cdd053c   316  bl #+0x1c (addr 0x4cdd0558)
0x4cdd0540   320  movz x16, #0x8
0x4cdd0544   324  sub csp, jssp, #0x10 (16)
0x4cdd0548   328  stp fp, lr, [jssp, #-16]!
0x4cdd054c   332  bl #+0xc (addr 0x4cdd0558)
0x4cdd0550   336  movz x16, #0x10
0x4cdd0554   340  bl #+0x14 (addr 0x4cdd0568)
0x4cdd0558   344  movz x17, #0xa00000000
0x4cdd055c   348  sub csp, jssp, #0x10 (16)
0x4cdd0560   352  stp x17, cp, [jssp, #-16]!
0x4cdd0564   356  add fp, jssp, #0x10 (16)
0x4cdd0568   360  ldr x17, pc+24 (addr 0x000000004cdd0580)    ;; lazy deoptimization bailout 0
0x4cdd056c   364  add x17, x17, x16
0x4cdd0570   368  br x17
0x4cdd0574   372  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd0578   376  d63f03e0       constant
0x4cdd057c   380  d503201f       constant
0x4cdd0580   384  4cb06000       constant
0x4cdd0584   388  00000000       constant


Safepoints (size = 21)
0x4cdd04f4   244  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4cdd04d4  code target (STUB)  (0x4cd06820)
0x4cdd04ec  code target (STUB)  (0x4cd06260)
0x4cdd04f8  code target (STUB)  (0x4cd068e0)
0x4cdd050c  constant pool (size 36)
0x4cdd0568  runtime entry
0x4cdd0574  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = Date
compiler = unknown
Instructions (size = 120)
0x4cdd0b80     0  sub csp, jssp, #0x8 (8)
0x4cdd0b84     4  str x3, [jssp, #-8]!
0x4cdd0b88     8  sub csp, jssp, #0x8 (8)
0x4cdd0b8c    12  str x0, [jssp, #-8]!
0x4cdd0b90    16  ldr x0, pc+80 (addr 0x000000004cdd0be0)    ;; object: 0x210c5d51 Cell for 0
0x4cdd0b94    20  ldur x0, [x0, #7]
0x4cdd0b98    24  cmp x0, #0x0 (0)
0x4cdd0b9c    28  b.ne #+0x2c (addr 0x4cdd0bc8)
0x4cdd0ba0    32  ldr x0, pc+72 (addr 0x000000004cdd0be8)    ;; object: 0xffffaa1340a9 WeakCell for 0x21042ca1 PropertyCell for 0x21042c39 <JS Function Date (SharedFunctionInfo 0x21042b91)>
0x4cdd0ba4    36  ldur x0, [x0, #7]
0x4cdd0ba8    40  tbz w0, #0, #+0x20 (addr 0x4cdd0bc8)
0x4cdd0bac    44  ldur x0, [x0, #15]
0x4cdd0bb0    48  ldr x16, [x26, #88]
0x4cdd0bb4    52  cmp x0, x16
0x4cdd0bb8    56  b.eq #+0x10 (addr 0x4cdd0bc8)
0x4cdd0bbc    60  add jssp, jssp, #0x10 (16)
0x4cdd0bc0    64  ret
0x4cdd0bc4    68  b #+0x14 (addr 0x4cdd0bd8)
0x4cdd0bc8    72  ldr x0, [jssp], #8
0x4cdd0bcc    76  ldr x3, [jssp], #8
0x4cdd0bd0    80  ldr x16, pc+32 (addr 0x000000004cdd0bf0)    ;; code: BUILTIN
0x4cdd0bd4    84  br x16
0x4cdd0bd8    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cdd0bdc    92  d63f03e0       constant
0x4cdd0be0    96  210c5d51       constant
0x4cdd0be4   100  00000000       constant
0x4cdd0be8   104  aa1340a9       constant
0x4cdd0bec   108  0000ffff       constant
0x4cdd0bf0   112  4cd222e0       constant
0x4cdd0bf4   116  00000000       constant


RelocInfo (size = 9)
0x4cdd0b90  embedded object  (0x210c5d51 Cell for 0)
0x4cdd0ba0  embedded object  (0xffffaa1340a9 WeakCell for 0x21042ca1 PropertyCell for 0x21042c39 <JS Function Date (SharedFunctionInfo 0x21042b91)>)
0x4cdd0bd0  code target (BUILTIN)  (0x4cd222e0)
0x4cdd0bd8  constant pool (size 32)

kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = STRING*SMI -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 632)
0x4cdd1b60     0  tbnz w0, #0, #+0x1d4 (addr 0x4cdd1d34)
0x4cdd1b64     4  orr x16, x1, x0
0x4cdd1b68     8  tbnz w16, #0, #+0x10 (addr 0x4cdd1b78)
0x4cdd1b6c    12  asr x1, x1, #32
0x4cdd1b70    16  sub x0, x1, x0, asr #32
0x4cdd1b74    20  ret
0x4cdd1b78    24  cmp x0, x1
0x4cdd1b7c    28  b.ne #+0x30 (addr 0x4cdd1bac)
0x4cdd1b80    32  ldur x16, [x0, #-1]
0x4cdd1b84    36  ldr x17, [x26, #120]
0x4cdd1b88    40  cmp x16, x17
0x4cdd1b8c    44  b.eq #+0xc (addr 0x4cdd1b98)
0x4cdd1b90    48  movz x0, #0x0
0x4cdd1b94    52  ret
0x4cdd1b98    56  ldur d0, [x0, #7]
0x4cdd1b9c    60  fcmp d0, d0
0x4cdd1ba0    64  b.vc #-0x10 (addr 0x4cdd1b90)
0x4cdd1ba4    68  movn x0, #0x0
0x4cdd1ba8    72  ret
0x4cdd1bac    76  and x16, x1, x0
0x4cdd1bb0    80  tbnz w16, #0, #+0x64 (addr 0x4cdd1c14)
0x4cdd1bb4    84  tbz w0, #0, #+0x24 (addr 0x4cdd1bd8)
0x4cdd1bb8    88  ldur x16, [x0, #-1]
0x4cdd1bbc    92  ldr x17, [x26, #120]
0x4cdd1bc0    96  cmp x16, x17
0x4cdd1bc4   100  b.eq #+0x8 (addr 0x4cdd1bcc)
0x4cdd1bc8   104  ret
0x4cdd1bcc   108  ldur d0, [x0, #7]
0x4cdd1bd0   112  scvtf d1, x1, #32
0x4cdd1bd4   116  b #+0x24 (addr 0x4cdd1bf8)
0x4cdd1bd8   120  ldur x16, [x1, #-1]
0x4cdd1bdc   124  ldr x17, [x26, #120]
0x4cdd1be0   128  cmp x16, x17
0x4cdd1be4   132  b.eq #+0xc (addr 0x4cdd1bf0)
0x4cdd1be8   136  movz x0, #0x1
0x4cdd1bec   140  ret
0x4cdd1bf0   144  ldur d1, [x1, #7]
0x4cdd1bf4   148  scvtf d0, x0, #32
0x4cdd1bf8   152  fcmp d1, d0
0x4cdd1bfc   156  b.vs #+0x10 (addr 0x4cdd1c0c)
0x4cdd1c00   160  cset x0, gt
0x4cdd1c04   164  csinv x0, x0, xzr, ge
0x4cdd1c08   168  ret
0x4cdd1c0c   172  movn x0, #0x0
0x4cdd1c10   176  ret
0x4cdd1c14   180  ldur x10, [x0, #-1]
0x4cdd1c18   184  ldur x12, [x1, #-1]
0x4cdd1c1c   188  ldrb w11, [x10, #11]
0x4cdd1c20   192  ldrb w13, [x12, #11]
0x4cdd1c24   196  cmp x11, #0xb1 (177)
0x4cdd1c28   200  b.lt #+0x8 (addr 0x4cdd1c30)
0x4cdd1c2c   204  ret
0x4cdd1c30   208  cmp x11, #0x83 (131)
0x4cdd1c34   212  movz x16, #0x83
0x4cdd1c38   216  ccmp x13, x16, #nZcv, ne
0x4cdd1c3c   220  movz x16, #0xb1
0x4cdd1c40   224  ccmp x13, x16, #NzcV, ne
0x4cdd1c44   228  b.ge #-0x18 (addr 0x4cdd1c2c)
0x4cdd1c48   232  orr x14, x13, x11
0x4cdd1c4c   236  tst x14, #0xc0
0x4cdd1c50   240  b.eq #-0x24 (addr 0x4cdd1c2c)
0x4cdd1c54   244  cmp x11, #0x81 (129)
0x4cdd1c58   248  b.ne #+0x18 (addr 0x4cdd1c70)
0x4cdd1c5c   252  cmp x12, x10
0x4cdd1c60   256  b.ne #+0x10 (addr 0x4cdd1c70)
0x4cdd1c64   260  ldur d1, [x1, #7]
0x4cdd1c68   264  ldur d0, [x0, #7]
0x4cdd1c6c   268  b #-0x74 (addr 0x4cdd1bf8)
0x4cdd1c70   272  movz x16, #0x87
0x4cdd1c74   276  and x14, x13, x16
0x4cdd1c78   280  movz x16, #0x87
0x4cdd1c7c   284  and x15, x11, x16
0x4cdd1c80   288  cmp x14, #0x4 (4)
0x4cdd1c84   292  ccmp x15, #4, #nzcv, eq
0x4cdd1c88   296  b.ne #+0x5c (addr 0x4cdd1ce4)
0x4cdd1c8c   300  ldur x10, [x1, #15]
0x4cdd1c90   304  ldur x11, [x0, #15]
0x4cdd1c94   308  cmp x10, x11
0x4cdd1c98   312  b.eq #+0xc (addr 0x4cdd1ca4)
0x4cdd1c9c   316  movz x0, #0x100000000
0x4cdd1ca0   320  ret
0x4cdd1ca4   324  cbnz x10, #+0xc (addr 0x4cdd1cb0)
0x4cdd1ca8   328  movz x0, #0x0
0x4cdd1cac   332  ret
0x4cdd1cb0   336  asr x10, x10, #32
0x4cdd1cb4   340  add x11, x10, #0x17 (23)
0x4cdd1cb8   344  add x1, x1, x11
0x4cdd1cbc   348  add x0, x0, x11
0x4cdd1cc0   352  neg x10, x10
0x4cdd1cc4   356  ldrb w11, [x1, x10]
0x4cdd1cc8   360  ldrb w12, [x0, x10]
0x4cdd1ccc   364  cmp x11, x12
0x4cdd1cd0   368  b.ne #-0x34 (addr 0x4cdd1c9c)
0x4cdd1cd4   372  add x10, x10, #0x1 (1)
0x4cdd1cd8   376  cbnz x10, #-0x14 (addr 0x4cdd1cc4)
0x4cdd1cdc   380  movz x0, #0x0
0x4cdd1ce0   384  ret
0x4cdd1ce4   388  movz x16, #0xc00000000
0x4cdd1ce8   392  sub csp, jssp, #0x10 (16)
0x4cdd1cec   396  stp fp, lr, [jssp, #-16]!
0x4cdd1cf0   400  sub csp, jssp, #0x10 (16)
0x4cdd1cf4   404  str x16, [jssp, #-8]!
0x4cdd1cf8   408  ldr x17, pc+176 (addr 0x000000004cdd1da8)    ;; object: 0x4cdd1b01 <Code: COMPARE_IC>
0x4cdd1cfc   412  sub csp, jssp, #0x10 (16)
0x4cdd1d00   416  str x17, [jssp, #-8]!
0x4cdd1d04   420  add fp, jssp, #0x10 (16)
0x4cdd1d08   424  sub csp, jssp, #0x10 (16)
0x4cdd1d0c   428  stp x0, x1, [jssp, #-16]!
0x4cdd1d10   432  movz x0, #0x2
0x4cdd1d14   436  ldr x1, pc+156 (addr 0x000000004cdd1db0)    ;; external reference (Runtime::StrictEqual)
0x4cdd1d18   440  ldr x16, pc+160 (addr 0x000000004cdd1db8)    ;; code: STUB, CEntryStub, minor: 4
0x4cdd1d1c   444  blr x16
0x4cdd1d20   448  mov jssp, fp
0x4cdd1d24   452  ldp fp, lr, [jssp], #16
0x4cdd1d28   456  ldr x1, [x26, #64]
0x4cdd1d2c   460  sub x0, x0, x1
0x4cdd1d30   464  ret
0x4cdd1d34   468  movz x16, #0xc00000000
0x4cdd1d38   472  sub csp, jssp, #0x10 (16)
0x4cdd1d3c   476  stp fp, lr, [jssp, #-16]!
0x4cdd1d40   480  sub csp, jssp, #0x10 (16)
0x4cdd1d44   484  str x16, [jssp, #-8]!
0x4cdd1d48   488  ldr x17, pc+120 (addr 0x000000004cdd1dc0)    ;; object: 0x4cdd1b01 <Code: COMPARE_IC>
0x4cdd1d4c   492  sub csp, jssp, #0x10 (16)
0x4cdd1d50   496  str x17, [jssp, #-8]!
0x4cdd1d54   500  add fp, jssp, #0x10 (16)
0x4cdd1d58   504  sub csp, jssp, #0x18 (24)
0x4cdd1d5c   508  stp lr, x0, [jssp, #-24]!
0x4cdd1d60   512  str x1, [jssp, #16]
0x4cdd1d64   516  movz x10, #0x2f00000000
0x4cdd1d68   520  sub csp, jssp, #0x18 (24)
0x4cdd1d6c   524  stp x10, x0, [jssp, #-24]!
0x4cdd1d70   528  str x1, [jssp, #16]
0x4cdd1d74   532  movz x0, #0x3
0x4cdd1d78   536  ldr x1, pc+80 (addr 0x000000004cdd1dc8)    ;; external reference (Runtime::CompareIC_Miss)
0x4cdd1d7c   540  ldr x16, pc+84 (addr 0x000000004cdd1dd0)    ;; code: STUB, CEntryStub, minor: 4
0x4cdd1d80   544  blr x16
0x4cdd1d84   548  add x11, x0, #0x5f (95)
0x4cdd1d88   552  ldr x1, [jssp, #16]
0x4cdd1d8c   556  ldp lr, x0, [jssp], #24
0x4cdd1d90   560  mov jssp, fp
0x4cdd1d94   564  ldp fp, lr, [jssp], #16
0x4cdd1d98   568  br x11
0x4cdd1d9c   572  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdd1da0   576  d63f03e0       constant
0x4cdd1da4   580  d503201f       constant
0x4cdd1da8   584  4cdd1b01       constant
0x4cdd1dac   588  00000000       constant
0x4cdd1db0   592  00e50928       constant
0x4cdd1db4   596  00000000       constant
0x4cdd1db8   600  4cd06060       constant
0x4cdd1dbc   604  00000000       constant
0x4cdd1dc0   608  4cdd1b01       constant
0x4cdd1dc4   612  00000000       constant
0x4cdd1dc8   616  00c8a980       constant
0x4cdd1dcc   620  00000000       constant
0x4cdd1dd0   624  4cd06060       constant
0x4cdd1dd4   628  00000000       constant


RelocInfo (size = 16)
0x4cdd1cf8  embedded object  (0x4cdd1b01 <Code: COMPARE_IC>)
0x4cdd1d14  external reference (Runtime::StrictEqual)  (0xe50928)
0x4cdd1d18  code target (STUB)  (0x4cd06060)
0x4cdd1d48  embedded object  (0x4cdd1b01 <Code: COMPARE_IC>)
0x4cdd1d78  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cdd1d7c  code target (STUB)  (0x4cd06060)
0x4cdd1d9c  constant pool (size 60)


kind = HANDLER
major_key = <NoCache>Stub
name = get
compiler = unknown
Instructions (size = 120)
0x4cdd20c0     0  sub csp, jssp, #0x8 (8)
0x4cdd20c4     4  str x3, [jssp, #-8]!
0x4cdd20c8     8  sub csp, jssp, #0x8 (8)
0x4cdd20cc    12  str x0, [jssp, #-8]!
0x4cdd20d0    16  ldr x0, pc+72 (addr 0x000000004cdd2118)    ;; object: 0xffffaa1348f9 Cell for 0
0x4cdd20d4    20  ldur x0, [x0, #7]
0x4cdd20d8    24  cmp x0, #0x0 (0)
0x4cdd20dc    28  b.ne #+0x14 (addr 0x4cdd20f0)
0x4cdd20e0    32  ldr x3, pc+64 (addr 0x000000004cdd2120)    ;; object: 0xffffaa134909 WeakCell for 0x48d757c1 <an Object with map 0x2a811eb1>
0x4cdd20e4    36  ldur x3, [x3, #7]
0x4cdd20e8    40  tbz w3, #0, #+0x8 (addr 0x4cdd20f0)
0x4cdd20ec    44  b #+0x14 (addr 0x4cdd2100)
0x4cdd20f0    48  ldr x0, [jssp], #8
0x4cdd20f4    52  ldr x3, [jssp], #8
0x4cdd20f8    56  ldr x16, pc+48 (addr 0x000000004cdd2128)    ;; code: BUILTIN
0x4cdd20fc    60  br x16
0x4cdd2100    64  add jssp, jssp, #0x10 (16)
0x4cdd2104    68  mov x1, x3
0x4cdd2108    72  ldr x16, pc+40 (addr 0x000000004cdd2130)    ;; code: HANDLER, LoadConstantStub, minor: 3
0x4cdd210c    76  br x16
0x4cdd2110    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdd2114    84  d63f03e0       constant
0x4cdd2118    88  aa1348f9       constant
0x4cdd211c    92  0000ffff       constant
0x4cdd2120    96  aa134909       constant
0x4cdd2124   100  0000ffff       constant
0x4cdd2128   104  4cd222e0       constant
0x4cdd212c   108  00000000       constant
0x4cdd2130   112  4cd43400       constant
0x4cdd2134   116  00000000       constant


RelocInfo (size = 10)
0x4cdd20d0  embedded object  (0xffffaa1348f9 Cell for 0)
0x4cdd20e0  embedded object  (0xffffaa134909 WeakCell for 0x48d757c1 <an Object with map 0x2a811eb1>)
0x4cdd20f8  code target (BUILTIN)  (0x4cd222e0)
0x4cdd2108  code target (HANDLER)  (0x4cd43400)
0x4cdd2110  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cdd21a0     0  ldur x0, [x1, #-1]
0x4cdd21a4     4  ldur x0, [x0, #47]
0x4cdd21a8     8  movz x16, #0x197
0x4cdd21ac    12  ldr x0, [x0, x16]
0x4cdd21b0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cdd21a0     0  ldur x0, [x1, #-1]
0x4cdd21a4     4  ldur x0, [x0, #47]
0x4cdd21a8     8  movz x16, #0x197
0x4cdd21ac    12  ldr x0, [x0, x16]
0x4cdd21b0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0x4cdd2220     0  ldur x0, [x1, #63]
0x4cdd2224     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0x4cdd2220     0  ldur x0, [x1, #63]
0x4cdd2224     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*GENERIC -> GENERIC
compare_operation = LT
name = CompareICStub
compiler = unknown
Instructions (size = 512)
0x4cdd22a0     0  orr x16, x1, x0
0x4cdd22a4     4  tbnz w16, #0, #+0x10 (addr 0x4cdd22b4)
0x4cdd22a8     8  asr x1, x1, #32
0x4cdd22ac    12  sub x0, x1, x0, asr #32
0x4cdd22b0    16  ret
0x4cdd22b4    20  cmp x0, x1
0x4cdd22b8    24  b.ne #+0x2c (addr 0x4cdd22e4)
0x4cdd22bc    28  ldur x10, [x0, #-1]
0x4cdd22c0    32  ldrb w10, [x10, #11]
0x4cdd22c4    36  cmp x10, #0xb1 (177)
0x4cdd22c8    40  b.ge #+0x118 (addr 0x4cdd23e0)
0x4cdd22cc    44  cmp x10, #0x80 (128)
0x4cdd22d0    48  b.eq #+0x110 (addr 0x4cdd23e0)
0x4cdd22d4    52  cmp x10, #0x82 (130)
0x4cdd22d8    56  b.eq #+0x108 (addr 0x4cdd23e0)
0x4cdd22dc    60  movz x0, #0x1
0x4cdd22e0    64  ret
0x4cdd22e4    68  and x16, x1, x0
0x4cdd22e8    72  tbnz w16, #0, #+0x58 (addr 0x4cdd2340)
0x4cdd22ec    76  tbz w0, #0, #+0x20 (addr 0x4cdd230c)
0x4cdd22f0    80  ldur x16, [x0, #-1]
0x4cdd22f4    84  ldr x17, [x26, #120]
0x4cdd22f8    88  cmp x16, x17
0x4cdd22fc    92  b.ne #+0xe4 (addr 0x4cdd23e0)
0x4cdd2300    96  ldur d0, [x0, #7]
0x4cdd2304   100  scvtf d1, x1, #32
0x4cdd2308   104  b #+0x1c (addr 0x4cdd2324)
0x4cdd230c   108  ldur x16, [x1, #-1]
0x4cdd2310   112  ldr x17, [x26, #120]
0x4cdd2314   116  cmp x16, x17
0x4cdd2318   120  b.ne #+0xc8 (addr 0x4cdd23e0)
0x4cdd231c   124  ldur d1, [x1, #7]
0x4cdd2320   128  scvtf d0, x0, #32
0x4cdd2324   132  fcmp d1, d0
0x4cdd2328   136  b.vs #+0x10 (addr 0x4cdd2338)
0x4cdd232c   140  cset x0, gt
0x4cdd2330   144  csinv x0, x0, xzr, ge
0x4cdd2334   148  ret
0x4cdd2338   152  movz x0, #0x1
0x4cdd233c   156  ret
0x4cdd2340   160  ldur x10, [x0, #-1]
0x4cdd2344   164  ldur x12, [x1, #-1]
0x4cdd2348   168  ldrb w11, [x10, #11]
0x4cdd234c   172  ldrb w13, [x12, #11]
0x4cdd2350   176  cmp x11, #0x81 (129)
0x4cdd2354   180  b.ne #+0x18 (addr 0x4cdd236c)
0x4cdd2358   184  cmp x12, x10
0x4cdd235c   188  b.ne #+0x10 (addr 0x4cdd236c)
0x4cdd2360   192  ldur d1, [x1, #7]
0x4cdd2364   196  ldur d0, [x0, #7]
0x4cdd2368   200  b #-0x44 (addr 0x4cdd2324)
0x4cdd236c   204  movz x16, #0x87
0x4cdd2370   208  and x14, x13, x16
0x4cdd2374   212  movz x16, #0x87
0x4cdd2378   216  and x15, x11, x16
0x4cdd237c   220  cmp x14, #0x4 (4)
0x4cdd2380   224  ccmp x15, #4, #nzcv, eq
0x4cdd2384   228  b.ne #+0x5c (addr 0x4cdd23e0)
0x4cdd2388   232  ldur x10, [x1, #15]
0x4cdd238c   236  ldur x11, [x0, #15]
0x4cdd2390   240  subs x12, x10, x11
0x4cdd2394   244  csel x10, x11, x10, gt
0x4cdd2398   248  cbz x10, #+0x30 (addr 0x4cdd23c8)
0x4cdd239c   252  asr x10, x10, #32
0x4cdd23a0   256  add x11, x10, #0x17 (23)
0x4cdd23a4   260  add x1, x1, x11
0x4cdd23a8   264  add x0, x0, x11
0x4cdd23ac   268  neg x10, x10
0x4cdd23b0   272  ldrb w11, [x1, x10]
0x4cdd23b4   276  ldrb w13, [x0, x10]
0x4cdd23b8   280  cmp x11, x13
0x4cdd23bc   284  b.ne #+0x10 (addr 0x4cdd23cc)
0x4cdd23c0   288  add x10, x10, #0x1 (1)
0x4cdd23c4   292  cbnz x10, #-0x14 (addr 0x4cdd23b0)
0x4cdd23c8   296  subs x0, x12, #0x0 (0)
0x4cdd23cc   300  movz x10, #0x100000000
0x4cdd23d0   304  mov x11, #0xffffffff00000000
0x4cdd23d4   308  csel x0, x10, x0, gt
0x4cdd23d8   312  csel x0, x11, x0, lt
0x4cdd23dc   316  ret
0x4cdd23e0   320  sub csp, jssp, #0x10 (16)
0x4cdd23e4   324  stp x0, x1, [jssp, #-16]!
0x4cdd23e8   328  movz x10, #0x100000000
0x4cdd23ec   332  sub csp, jssp, #0x8 (8)
0x4cdd23f0   336  str x10, [jssp, #-8]!
0x4cdd23f4   340  movz x0, #0x3
0x4cdd23f8   344  ldr x1, pc+128 (addr 0x000000004cdd2478)    ;; external reference (Runtime::Compare)
0x4cdd23fc   348  ldr x16, pc+132 (addr 0x000000004cdd2480)    ;; code: STUB, CEntryStub, minor: 4
0x4cdd2400   352  br x16
0x4cdd2404   356  movz x16, #0xc00000000
0x4cdd2408   360  sub csp, jssp, #0x10 (16)
0x4cdd240c   364  stp fp, lr, [jssp, #-16]!
0x4cdd2410   368  sub csp, jssp, #0x10 (16)
0x4cdd2414   372  str x16, [jssp, #-8]!
0x4cdd2418   376  ldr x17, pc+112 (addr 0x000000004cdd2488)    ;; object: 0x4cdd2241 <Code: COMPARE_IC>
0x4cdd241c   380  sub csp, jssp, #0x10 (16)
0x4cdd2420   384  str x17, [jssp, #-8]!
0x4cdd2424   388  add fp, jssp, #0x10 (16)
0x4cdd2428   392  sub csp, jssp, #0x18 (24)
0x4cdd242c   396  stp lr, x0, [jssp, #-24]!
0x4cdd2430   400  str x1, [jssp, #16]
0x4cdd2434   404  movz x10, #0x3100000000
0x4cdd2438   408  sub csp, jssp, #0x18 (24)
0x4cdd243c   412  stp x10, x0, [jssp, #-24]!
0x4cdd2440   416  str x1, [jssp, #16]
0x4cdd2444   420  movz x0, #0x3
0x4cdd2448   424  ldr x1, pc+72 (addr 0x000000004cdd2490)    ;; external reference (Runtime::CompareIC_Miss)
0x4cdd244c   428  ldr x16, pc+76 (addr 0x000000004cdd2498)    ;; code: STUB, CEntryStub, minor: 4
0x4cdd2450   432  blr x16
0x4cdd2454   436  add x11, x0, #0x5f (95)
0x4cdd2458   440  ldr x1, [jssp, #16]
0x4cdd245c   444  ldp lr, x0, [jssp], #24
0x4cdd2460   448  mov jssp, fp
0x4cdd2464   452  ldp fp, lr, [jssp], #16
0x4cdd2468   456  br x11
0x4cdd246c   460  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0x4cdd2470   464  d63f03e0       constant
0x4cdd2474   468  d503201f       constant
0x4cdd2478   472  00e49ea8       constant
0x4cdd247c   476  00000000       constant
0x4cdd2480   480  4cd06060       constant
0x4cdd2484   484  00000000       constant
0x4cdd2488   488  4cdd2241       constant
0x4cdd248c   492  00000000       constant
0x4cdd2490   496  00c8a980       constant
0x4cdd2494   500  00000000       constant
0x4cdd2498   504  4cd06060       constant
0x4cdd249c   508  00000000       constant


RelocInfo (size = 15)
0x4cdd23f8  external reference (Runtime::Compare)  (0xe49ea8)
0x4cdd23fc  code target (STUB)  (0x4cd06060)
0x4cdd2418  embedded object  (0x4cdd2241 <Code: COMPARE_IC>)
0x4cdd2448  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cdd244c  code target (STUB)  (0x4cd06060)
0x4cdd246c  constant pool (size 52)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = NUMBER*SMI -> NUMBER
compare_operation = LT
name = CompareICStub
compiler = unknown
Instructions (size = 280)
0x4cdd2500     0  tbnz w0, #0, #+0x88 (addr 0x4cdd2588)
0x4cdd2504     4  scvtf d0, x0, #32
0x4cdd2508     8  scvtf d1, x1, #32
0x4cdd250c    12  tbz w0, #0, #+0x18 (addr 0x4cdd2524)
0x4cdd2510    16  ldur x16, [x0, #-1]
0x4cdd2514    20  ldr x17, [x26, #120]
0x4cdd2518    24  cmp x16, x17
0x4cdd251c    28  b.ne #+0x3c (addr 0x4cdd2558)
0x4cdd2520    32  ldur d0, [x0, #7]
0x4cdd2524    36  tbz w1, #0, #+0x18 (addr 0x4cdd253c)
0x4cdd2528    40  ldur x16, [x1, #-1]
0x4cdd252c    44  ldr x17, [x26, #120]
0x4cdd2530    48  cmp x16, x17
0x4cdd2534    52  b.ne #+0x48 (addr 0x4cdd257c)
0x4cdd2538    56  ldur d1, [x1, #7]
0x4cdd253c    60  fcmp d1, d0
0x4cdd2540    64  b.vs #+0x10 (addr 0x4cdd2550)
0x4cdd2544    68  cset x0, gt
0x4cdd2548    72  csinv x0, x0, xzr, ge
0x4cdd254c    76  ret
0x4cdd2550    80  ldr x16, pc+168 (addr 0x000000004cdd25f8)    ;; code: COMPARE_IC, GENERIC
0x4cdd2554    84  br x16
0x4cdd2558    88  ldr x16, [x26, #40]
0x4cdd255c    92  cmp x0, x16
0x4cdd2560    96  b.ne #+0x28 (addr 0x4cdd2588)
0x4cdd2564   100  tbz w1, #0, #-0x14 (addr 0x4cdd2550)
0x4cdd2568   104  ldur x16, [x1, #-1]
0x4cdd256c   108  ldr x17, [x26, #120]
0x4cdd2570   112  cmp x16, x17
0x4cdd2574   116  b.ne #+0x8 (addr 0x4cdd257c)
0x4cdd2578   120  b #-0x28 (addr 0x4cdd2550)
0x4cdd257c   124  ldr x16, [x26, #40]
0x4cdd2580   128  cmp x1, x16
0x4cdd2584   132  b.eq #-0x34 (addr 0x4cdd2550)
0x4cdd2588   136  movz x16, #0xc00000000
0x4cdd258c   140  sub csp, jssp, #0x10 (16)
0x4cdd2590   144  stp fp, lr, [jssp, #-16]!
0x4cdd2594   148  sub csp, jssp, #0x10 (16)
0x4cdd2598   152  str x16, [jssp, #-8]!
0x4cdd259c   156  ldr x17, pc+100 (addr 0x000000004cdd2600)    ;; object: 0x4cdd24a1 <Code: COMPARE_IC>
0x4cdd25a0   160  sub csp, jssp, #0x10 (16)
0x4cdd25a4   164  str x17, [jssp, #-8]!
0x4cdd25a8   168  add fp, jssp, #0x10 (16)
0x4cdd25ac   172  sub csp, jssp, #0x18 (24)
0x4cdd25b0   176  stp lr, x0, [jssp, #-24]!
0x4cdd25b4   180  str x1, [jssp, #16]
0x4cdd25b8   184  movz x10, #0x3100000000
0x4cdd25bc   188  sub csp, jssp, #0x18 (24)
0x4cdd25c0   192  stp x10, x0, [jssp, #-24]!
0x4cdd25c4   196  str x1, [jssp, #16]
0x4cdd25c8   200  movz x0, #0x3
0x4cdd25cc   204  ldr x1, pc+60 (addr 0x000000004cdd2608)    ;; external reference (Runtime::CompareIC_Miss)
0x4cdd25d0   208  ldr x16, pc+64 (addr 0x000000004cdd2610)    ;; code: STUB, CEntryStub, minor: 4
0x4cdd25d4   212  blr x16
0x4cdd25d8   216  add x11, x0, #0x5f (95)
0x4cdd25dc   220  ldr x1, [jssp, #16]
0x4cdd25e0   224  ldp lr, x0, [jssp], #24
0x4cdd25e4   228  mov jssp, fp
0x4cdd25e8   232  ldp fp, lr, [jssp], #16
0x4cdd25ec   236  br x11
0x4cdd25f0   240  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdd25f4   244  d63f03e0       constant
0x4cdd25f8   248  4cdd22a0       constant
0x4cdd25fc   252  00000000       constant
0x4cdd2600   256  4cdd24a1       constant
0x4cdd2604   260  00000000       constant
0x4cdd2608   264  00c8a980       constant
0x4cdd260c   268  00000000       constant
0x4cdd2610   272  4cd06060       constant
0x4cdd2614   276  00000000       constant


RelocInfo (size = 15)
0x4cdd2550  code target (COMPARE_IC)  (0x4cdd22a0)
0x4cdd259c  embedded object  (0x4cdd24a1 <Code: COMPARE_IC>)
0x4cdd25cc  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cdd25d0  code target (STUB)  (0x4cd06060)
0x4cdd25f0  constant pool (size 40)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd2680     0  tbz w0, #0, #+0x1c (addr 0x4cdd269c)
0x4cdd2684     4  ldur x16, [x0, #-1]
0x4cdd2688     8  ldr x17, [x26, #120]
0x4cdd268c    12  cmp x16, x17
0x4cdd2690    16  b.ne #+0x60 (addr 0x4cdd26f0)
0x4cdd2694    20  ldur d0, [x0, #7]
0x4cdd2698    24  b #+0x8 (addr 0x4cdd26a0)
0x4cdd269c    28  scvtf d0, x0, #32
0x4cdd26a0    32  stur d0, [x1, #23]
0x4cdd26a4    36  stur x5, [x1, #-1]
0x4cdd26a8    40  tbz w5, #0, #+0x34 (addr 0x4cdd26dc)
0x4cdd26ac    44  sub x2, x1, #0x1 (1)
0x4cdd26b0    48  and x5, x5, #0xfffffffffff00000
0x4cdd26b4    52  ldr x5, [x5, #8]
0x4cdd26b8    56  tbz w5, #1, #+0x24 (addr 0x4cdd26dc)
0x4cdd26bc    60  and x5, x1, #0xfffffffffff00000
0x4cdd26c0    64  ldr x5, [x5, #8]
0x4cdd26c4    68  tbz w5, #2, #+0x18 (addr 0x4cdd26dc)
0x4cdd26c8    72  sub csp, jssp, #0x8 (8)
0x4cdd26cc    76  str lr, [jssp, #-8]!
0x4cdd26d0    80  ldr x16, pc+24 (addr 0x000000004cdd26e8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd26d4    84  blr x16
0x4cdd26d8    88  ldr lr, [jssp], #8
0x4cdd26dc    92  ret
0x4cdd26e0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd26e4   100  d63f03e0       constant
0x4cdd26e8   104  4cd38080       constant
0x4cdd26ec   108  00000000       constant
0x4cdd26f0   112  movz x16, #0x0
0x4cdd26f4   116  sub csp, jssp, #0x10 (16)
0x4cdd26f8   120  stp fp, lr, [jssp, #-16]!
0x4cdd26fc   124  bl #+0x4 (addr 0x4cdd2700)
0x4cdd2700   128  movz x17, #0xa00000000
0x4cdd2704   132  sub csp, jssp, #0x10 (16)
0x4cdd2708   136  stp x17, cp, [jssp, #-16]!
0x4cdd270c   140  add fp, jssp, #0x10 (16)
0x4cdd2710   144  ldr x17, pc+24 (addr 0x000000004cdd2728)    ;; lazy deoptimization bailout 0
0x4cdd2714   148  add x17, x17, x16
0x4cdd2718   152  br x17
0x4cdd271c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd2720   160  d63f03e0       constant
0x4cdd2724   164  d503201f       constant
0x4cdd2728   168  4cb06000       constant
0x4cdd272c   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd26d0  code target (STUB)  (0x4cd38080)
0x4cdd26e0  constant pool (size 16)
0x4cdd2710  runtime entry
0x4cdd271c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd2680     0  tbz w0, #0, #+0x1c (addr 0x4cdd269c)
0x4cdd2684     4  ldur x16, [x0, #-1]
0x4cdd2688     8  ldr x17, [x26, #120]
0x4cdd268c    12  cmp x16, x17
0x4cdd2690    16  b.ne #+0x60 (addr 0x4cdd26f0)
0x4cdd2694    20  ldur d0, [x0, #7]
0x4cdd2698    24  b #+0x8 (addr 0x4cdd26a0)
0x4cdd269c    28  scvtf d0, x0, #32
0x4cdd26a0    32  stur d0, [x1, #23]
0x4cdd26a4    36  stur x5, [x1, #-1]
0x4cdd26a8    40  tbz w5, #0, #+0x34 (addr 0x4cdd26dc)
0x4cdd26ac    44  sub x2, x1, #0x1 (1)
0x4cdd26b0    48  and x5, x5, #0xfffffffffff00000
0x4cdd26b4    52  ldr x5, [x5, #8]
0x4cdd26b8    56  tbz w5, #1, #+0x24 (addr 0x4cdd26dc)
0x4cdd26bc    60  and x5, x1, #0xfffffffffff00000
0x4cdd26c0    64  ldr x5, [x5, #8]
0x4cdd26c4    68  tbz w5, #2, #+0x18 (addr 0x4cdd26dc)
0x4cdd26c8    72  sub csp, jssp, #0x8 (8)
0x4cdd26cc    76  str lr, [jssp, #-8]!
0x4cdd26d0    80  ldr x16, pc+24 (addr 0x000000004cdd26e8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd26d4    84  blr x16
0x4cdd26d8    88  ldr lr, [jssp], #8
0x4cdd26dc    92  ret
0x4cdd26e0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd26e4   100  d63f03e0       constant
0x4cdd26e8   104  4cd38080       constant
0x4cdd26ec   108  00000000       constant
0x4cdd26f0   112  movz x16, #0x0
0x4cdd26f4   116  sub csp, jssp, #0x10 (16)
0x4cdd26f8   120  stp fp, lr, [jssp, #-16]!
0x4cdd26fc   124  bl #+0x4 (addr 0x4cdd2700)
0x4cdd2700   128  movz x17, #0xa00000000
0x4cdd2704   132  sub csp, jssp, #0x10 (16)
0x4cdd2708   136  stp x17, cp, [jssp, #-16]!
0x4cdd270c   140  add fp, jssp, #0x10 (16)
0x4cdd2710   144  ldr x17, pc+24 (addr 0x000000004cdd2728)    ;; lazy deoptimization bailout 0
0x4cdd2714   148  add x17, x17, x16
0x4cdd2718   152  br x17
0x4cdd271c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd2720   160  d63f03e0       constant
0x4cdd2724   164  d503201f       constant
0x4cdd2728   168  4cb06000       constant
0x4cdd272c   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd26d0  code target (STUB)  (0x4cd38080)
0x4cdd26e0  constant pool (size 16)
0x4cdd2710  runtime entry
0x4cdd271c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = dev
compiler = unknown
Instructions (size = 152)
0x4cdd27a0     0  sub csp, jssp, #0x8 (8)
0x4cdd27a4     4  str x3, [jssp, #-8]!
0x4cdd27a8     8  sub csp, jssp, #0x8 (8)
0x4cdd27ac    12  str x4, [jssp, #-8]!
0x4cdd27b0    16  ldr x3, pc+88 (addr 0x000000004cdd2808)    ;; object: 0xffffaa134a59 Cell for 0
0x4cdd27b4    20  ldur x3, [x3, #7]
0x4cdd27b8    24  cmp x3, #0x0 (0)
0x4cdd27bc    28  b.ne #+0x2c (addr 0x4cdd27e8)
0x4cdd27c0    32  ldr x5, pc+80 (addr 0x000000004cdd2810)    ;; object: 0xffffaa134a01 WeakCell for 0x2a835b09 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdd27c4    36  ldur x5, [x5, #7]
0x4cdd27c8    40  tbz w5, #0, #+0x20 (addr 0x4cdd27e8)
0x4cdd27cc    44  ldursw x4, [x5, #15]
0x4cdd27d0    48  tbnz w4, #23, #+0x18 (addr 0x4cdd27e8)
0x4cdd27d4    52  ldr x4, [jssp], #8
0x4cdd27d8    56  ldr x3, [jssp], #8
0x4cdd27dc    60  ldr x2, pc+60 (addr 0x000000004cdd2818)    ;; object: 0xffffaa10d0c9 <String[3]: dev>
0x4cdd27e0    64  ldr x16, pc+64 (addr 0x000000004cdd2820)    ;; code: HANDLER, StoreTransitionStub, minor: 194563
0x4cdd27e4    68  br x16
0x4cdd27e8    72  ldr x2, pc+64 (addr 0x000000004cdd2828)    ;; object: 0xffffaa10d0c9 <String[3]: dev>
0x4cdd27ec    76  ldr x4, [jssp], #8
0x4cdd27f0    80  ldr x3, [jssp], #8
0x4cdd27f4    84  ldr x16, pc+60 (addr 0x000000004cdd2830)    ;; code: BUILTIN
0x4cdd27f8    88  br x16
0x4cdd27fc    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdd2800    96  d63f03e0       constant
0x4cdd2804   100  d503201f       constant
0x4cdd2808   104  aa134a59       constant
0x4cdd280c   108  0000ffff       constant
0x4cdd2810   112  aa134a01       constant
0x4cdd2814   116  0000ffff       constant
0x4cdd2818   120  aa10d0c9       constant
0x4cdd281c   124  0000ffff       constant
0x4cdd2820   128  4cdd2680       constant
0x4cdd2824   132  00000000       constant
0x4cdd2828   136  aa10d0c9       constant
0x4cdd282c   140  0000ffff       constant
0x4cdd2830   144  4cd22420       constant
0x4cdd2834   148  00000000       constant


RelocInfo (size = 12)
0x4cdd27b0  embedded object  (0xffffaa134a59 Cell for 0)
0x4cdd27c0  embedded object  (0xffffaa134a01 WeakCell for 0x2a835b09 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdd27dc  embedded object  (0xffffaa10d0c9 <String[3]: dev>)
0x4cdd27e0  code target (HANDLER)  (0x4cdd2680)
0x4cdd27e8  embedded object  (0xffffaa10d0c9 <String[3]: dev>)
0x4cdd27f4  code target (BUILTIN)  (0x4cd22420)
0x4cdd27fc  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd28a0     0  tbz w0, #0, #+0x1c (addr 0x4cdd28bc)
0x4cdd28a4     4  ldur x16, [x0, #-1]
0x4cdd28a8     8  ldr x17, [x26, #120]
0x4cdd28ac    12  cmp x16, x17
0x4cdd28b0    16  b.ne #+0x60 (addr 0x4cdd2910)
0x4cdd28b4    20  ldur d0, [x0, #7]
0x4cdd28b8    24  b #+0x8 (addr 0x4cdd28c0)
0x4cdd28bc    28  scvtf d0, x0, #32
0x4cdd28c0    32  stur d0, [x1, #31]
0x4cdd28c4    36  stur x5, [x1, #-1]
0x4cdd28c8    40  tbz w5, #0, #+0x34 (addr 0x4cdd28fc)
0x4cdd28cc    44  sub x2, x1, #0x1 (1)
0x4cdd28d0    48  and x5, x5, #0xfffffffffff00000
0x4cdd28d4    52  ldr x5, [x5, #8]
0x4cdd28d8    56  tbz w5, #1, #+0x24 (addr 0x4cdd28fc)
0x4cdd28dc    60  and x5, x1, #0xfffffffffff00000
0x4cdd28e0    64  ldr x5, [x5, #8]
0x4cdd28e4    68  tbz w5, #2, #+0x18 (addr 0x4cdd28fc)
0x4cdd28e8    72  sub csp, jssp, #0x8 (8)
0x4cdd28ec    76  str lr, [jssp, #-8]!
0x4cdd28f0    80  ldr x16, pc+24 (addr 0x000000004cdd2908)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd28f4    84  blr x16
0x4cdd28f8    88  ldr lr, [jssp], #8
0x4cdd28fc    92  ret
0x4cdd2900    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd2904   100  d63f03e0       constant
0x4cdd2908   104  4cd38080       constant
0x4cdd290c   108  00000000       constant
0x4cdd2910   112  movz x16, #0x0
0x4cdd2914   116  sub csp, jssp, #0x10 (16)
0x4cdd2918   120  stp fp, lr, [jssp, #-16]!
0x4cdd291c   124  bl #+0x4 (addr 0x4cdd2920)
0x4cdd2920   128  movz x17, #0xa00000000
0x4cdd2924   132  sub csp, jssp, #0x10 (16)
0x4cdd2928   136  stp x17, cp, [jssp, #-16]!
0x4cdd292c   140  add fp, jssp, #0x10 (16)
0x4cdd2930   144  ldr x17, pc+24 (addr 0x000000004cdd2948)    ;; lazy deoptimization bailout 0
0x4cdd2934   148  add x17, x17, x16
0x4cdd2938   152  br x17
0x4cdd293c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd2940   160  d63f03e0       constant
0x4cdd2944   164  d503201f       constant
0x4cdd2948   168  4cb06000       constant
0x4cdd294c   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd28f0  code target (STUB)  (0x4cd38080)
0x4cdd2900  constant pool (size 16)
0x4cdd2930  runtime entry
0x4cdd293c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd28a0     0  tbz w0, #0, #+0x1c (addr 0x4cdd28bc)
0x4cdd28a4     4  ldur x16, [x0, #-1]
0x4cdd28a8     8  ldr x17, [x26, #120]
0x4cdd28ac    12  cmp x16, x17
0x4cdd28b0    16  b.ne #+0x60 (addr 0x4cdd2910)
0x4cdd28b4    20  ldur d0, [x0, #7]
0x4cdd28b8    24  b #+0x8 (addr 0x4cdd28c0)
0x4cdd28bc    28  scvtf d0, x0, #32
0x4cdd28c0    32  stur d0, [x1, #31]
0x4cdd28c4    36  stur x5, [x1, #-1]
0x4cdd28c8    40  tbz w5, #0, #+0x34 (addr 0x4cdd28fc)
0x4cdd28cc    44  sub x2, x1, #0x1 (1)
0x4cdd28d0    48  and x5, x5, #0xfffffffffff00000
0x4cdd28d4    52  ldr x5, [x5, #8]
0x4cdd28d8    56  tbz w5, #1, #+0x24 (addr 0x4cdd28fc)
0x4cdd28dc    60  and x5, x1, #0xfffffffffff00000
0x4cdd28e0    64  ldr x5, [x5, #8]
0x4cdd28e4    68  tbz w5, #2, #+0x18 (addr 0x4cdd28fc)
0x4cdd28e8    72  sub csp, jssp, #0x8 (8)
0x4cdd28ec    76  str lr, [jssp, #-8]!
0x4cdd28f0    80  ldr x16, pc+24 (addr 0x000000004cdd2908)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd28f4    84  blr x16
0x4cdd28f8    88  ldr lr, [jssp], #8
0x4cdd28fc    92  ret
0x4cdd2900    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd2904   100  d63f03e0       constant
0x4cdd2908   104  4cd38080       constant
0x4cdd290c   108  00000000       constant
0x4cdd2910   112  movz x16, #0x0
0x4cdd2914   116  sub csp, jssp, #0x10 (16)
0x4cdd2918   120  stp fp, lr, [jssp, #-16]!
0x4cdd291c   124  bl #+0x4 (addr 0x4cdd2920)
0x4cdd2920   128  movz x17, #0xa00000000
0x4cdd2924   132  sub csp, jssp, #0x10 (16)
0x4cdd2928   136  stp x17, cp, [jssp, #-16]!
0x4cdd292c   140  add fp, jssp, #0x10 (16)
0x4cdd2930   144  ldr x17, pc+24 (addr 0x000000004cdd2948)    ;; lazy deoptimization bailout 0
0x4cdd2934   148  add x17, x17, x16
0x4cdd2938   152  br x17
0x4cdd293c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd2940   160  d63f03e0       constant
0x4cdd2944   164  d503201f       constant
0x4cdd2948   168  4cb06000       constant
0x4cdd294c   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd28f0  code target (STUB)  (0x4cd38080)
0x4cdd2900  constant pool (size 16)
0x4cdd2930  runtime entry
0x4cdd293c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = mode
compiler = unknown
Instructions (size = 152)
0x4cdd29c0     0  sub csp, jssp, #0x8 (8)
0x4cdd29c4     4  str x3, [jssp, #-8]!
0x4cdd29c8     8  sub csp, jssp, #0x8 (8)
0x4cdd29cc    12  str x4, [jssp, #-8]!
0x4cdd29d0    16  ldr x3, pc+88 (addr 0x000000004cdd2a28)    ;; object: 0xffffaa134a59 Cell for 0
0x4cdd29d4    20  ldur x3, [x3, #7]
0x4cdd29d8    24  cmp x3, #0x0 (0)
0x4cdd29dc    28  b.ne #+0x2c (addr 0x4cdd2a08)
0x4cdd29e0    32  ldr x5, pc+80 (addr 0x000000004cdd2a30)    ;; object: 0xffffaa134b61 WeakCell for 0x2a835b61 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdd29e4    36  ldur x5, [x5, #7]
0x4cdd29e8    40  tbz w5, #0, #+0x20 (addr 0x4cdd2a08)
0x4cdd29ec    44  ldursw x4, [x5, #15]
0x4cdd29f0    48  tbnz w4, #23, #+0x18 (addr 0x4cdd2a08)
0x4cdd29f4    52  ldr x4, [jssp], #8
0x4cdd29f8    56  ldr x3, [jssp], #8
0x4cdd29fc    60  ldr x2, pc+60 (addr 0x000000004cdd2a38)    ;; object: 0xffffaa10d0e9 <String[4]: mode>
0x4cdd2a00    64  ldr x16, pc+64 (addr 0x000000004cdd2a40)    ;; code: HANDLER, StoreTransitionStub, minor: 194564
0x4cdd2a04    68  br x16
0x4cdd2a08    72  ldr x2, pc+64 (addr 0x000000004cdd2a48)    ;; object: 0xffffaa10d0e9 <String[4]: mode>
0x4cdd2a0c    76  ldr x4, [jssp], #8
0x4cdd2a10    80  ldr x3, [jssp], #8
0x4cdd2a14    84  ldr x16, pc+60 (addr 0x000000004cdd2a50)    ;; code: BUILTIN
0x4cdd2a18    88  br x16
0x4cdd2a1c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdd2a20    96  d63f03e0       constant
0x4cdd2a24   100  d503201f       constant
0x4cdd2a28   104  aa134a59       constant
0x4cdd2a2c   108  0000ffff       constant
0x4cdd2a30   112  aa134b61       constant
0x4cdd2a34   116  0000ffff       constant
0x4cdd2a38   120  aa10d0e9       constant
0x4cdd2a3c   124  0000ffff       constant
0x4cdd2a40   128  4cdd28a0       constant
0x4cdd2a44   132  00000000       constant
0x4cdd2a48   136  aa10d0e9       constant
0x4cdd2a4c   140  0000ffff       constant
0x4cdd2a50   144  4cd22420       constant
0x4cdd2a54   148  00000000       constant


RelocInfo (size = 12)
0x4cdd29d0  embedded object  (0xffffaa134a59 Cell for 0)
0x4cdd29e0  embedded object  (0xffffaa134b61 WeakCell for 0x2a835b61 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdd29fc  embedded object  (0xffffaa10d0e9 <String[4]: mode>)
0x4cdd2a00  code target (HANDLER)  (0x4cdd28a0)
0x4cdd2a08  embedded object  (0xffffaa10d0e9 <String[4]: mode>)
0x4cdd2a14  code target (BUILTIN)  (0x4cd22420)
0x4cdd2a1c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd2ac0     0  tbz w0, #0, #+0x1c (addr 0x4cdd2adc)
0x4cdd2ac4     4  ldur x16, [x0, #-1]
0x4cdd2ac8     8  ldr x17, [x26, #120]
0x4cdd2acc    12  cmp x16, x17
0x4cdd2ad0    16  b.ne #+0x60 (addr 0x4cdd2b30)
0x4cdd2ad4    20  ldur d0, [x0, #7]
0x4cdd2ad8    24  b #+0x8 (addr 0x4cdd2ae0)
0x4cdd2adc    28  scvtf d0, x0, #32
0x4cdd2ae0    32  stur d0, [x1, #39]
0x4cdd2ae4    36  stur x5, [x1, #-1]
0x4cdd2ae8    40  tbz w5, #0, #+0x34 (addr 0x4cdd2b1c)
0x4cdd2aec    44  sub x2, x1, #0x1 (1)
0x4cdd2af0    48  and x5, x5, #0xfffffffffff00000
0x4cdd2af4    52  ldr x5, [x5, #8]
0x4cdd2af8    56  tbz w5, #1, #+0x24 (addr 0x4cdd2b1c)
0x4cdd2afc    60  and x5, x1, #0xfffffffffff00000
0x4cdd2b00    64  ldr x5, [x5, #8]
0x4cdd2b04    68  tbz w5, #2, #+0x18 (addr 0x4cdd2b1c)
0x4cdd2b08    72  sub csp, jssp, #0x8 (8)
0x4cdd2b0c    76  str lr, [jssp, #-8]!
0x4cdd2b10    80  ldr x16, pc+24 (addr 0x000000004cdd2b28)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd2b14    84  blr x16
0x4cdd2b18    88  ldr lr, [jssp], #8
0x4cdd2b1c    92  ret
0x4cdd2b20    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd2b24   100  d63f03e0       constant
0x4cdd2b28   104  4cd38080       constant
0x4cdd2b2c   108  00000000       constant
0x4cdd2b30   112  movz x16, #0x0
0x4cdd2b34   116  sub csp, jssp, #0x10 (16)
0x4cdd2b38   120  stp fp, lr, [jssp, #-16]!
0x4cdd2b3c   124  bl #+0x4 (addr 0x4cdd2b40)
0x4cdd2b40   128  movz x17, #0xa00000000
0x4cdd2b44   132  sub csp, jssp, #0x10 (16)
0x4cdd2b48   136  stp x17, cp, [jssp, #-16]!
0x4cdd2b4c   140  add fp, jssp, #0x10 (16)
0x4cdd2b50   144  ldr x17, pc+24 (addr 0x000000004cdd2b68)    ;; lazy deoptimization bailout 0
0x4cdd2b54   148  add x17, x17, x16
0x4cdd2b58   152  br x17
0x4cdd2b5c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd2b60   160  d63f03e0       constant
0x4cdd2b64   164  d503201f       constant
0x4cdd2b68   168  4cb06000       constant
0x4cdd2b6c   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd2b10  code target (STUB)  (0x4cd38080)
0x4cdd2b20  constant pool (size 16)
0x4cdd2b50  runtime entry
0x4cdd2b5c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd2ac0     0  tbz w0, #0, #+0x1c (addr 0x4cdd2adc)
0x4cdd2ac4     4  ldur x16, [x0, #-1]
0x4cdd2ac8     8  ldr x17, [x26, #120]
0x4cdd2acc    12  cmp x16, x17
0x4cdd2ad0    16  b.ne #+0x60 (addr 0x4cdd2b30)
0x4cdd2ad4    20  ldur d0, [x0, #7]
0x4cdd2ad8    24  b #+0x8 (addr 0x4cdd2ae0)
0x4cdd2adc    28  scvtf d0, x0, #32
0x4cdd2ae0    32  stur d0, [x1, #39]
0x4cdd2ae4    36  stur x5, [x1, #-1]
0x4cdd2ae8    40  tbz w5, #0, #+0x34 (addr 0x4cdd2b1c)
0x4cdd2aec    44  sub x2, x1, #0x1 (1)
0x4cdd2af0    48  and x5, x5, #0xfffffffffff00000
0x4cdd2af4    52  ldr x5, [x5, #8]
0x4cdd2af8    56  tbz w5, #1, #+0x24 (addr 0x4cdd2b1c)
0x4cdd2afc    60  and x5, x1, #0xfffffffffff00000
0x4cdd2b00    64  ldr x5, [x5, #8]
0x4cdd2b04    68  tbz w5, #2, #+0x18 (addr 0x4cdd2b1c)
0x4cdd2b08    72  sub csp, jssp, #0x8 (8)
0x4cdd2b0c    76  str lr, [jssp, #-8]!
0x4cdd2b10    80  ldr x16, pc+24 (addr 0x000000004cdd2b28)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd2b14    84  blr x16
0x4cdd2b18    88  ldr lr, [jssp], #8
0x4cdd2b1c    92  ret
0x4cdd2b20    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd2b24   100  d63f03e0       constant
0x4cdd2b28   104  4cd38080       constant
0x4cdd2b2c   108  00000000       constant
0x4cdd2b30   112  movz x16, #0x0
0x4cdd2b34   116  sub csp, jssp, #0x10 (16)
0x4cdd2b38   120  stp fp, lr, [jssp, #-16]!
0x4cdd2b3c   124  bl #+0x4 (addr 0x4cdd2b40)
0x4cdd2b40   128  movz x17, #0xa00000000
0x4cdd2b44   132  sub csp, jssp, #0x10 (16)
0x4cdd2b48   136  stp x17, cp, [jssp, #-16]!
0x4cdd2b4c   140  add fp, jssp, #0x10 (16)
0x4cdd2b50   144  ldr x17, pc+24 (addr 0x000000004cdd2b68)    ;; lazy deoptimization bailout 0
0x4cdd2b54   148  add x17, x17, x16
0x4cdd2b58   152  br x17
0x4cdd2b5c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd2b60   160  d63f03e0       constant
0x4cdd2b64   164  d503201f       constant
0x4cdd2b68   168  4cb06000       constant
0x4cdd2b6c   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd2b10  code target (STUB)  (0x4cd38080)
0x4cdd2b20  constant pool (size 16)
0x4cdd2b50  runtime entry
0x4cdd2b5c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = nlink
compiler = unknown
Instructions (size = 152)
0x4cdd2be0     0  sub csp, jssp, #0x8 (8)
0x4cdd2be4     4  str x3, [jssp, #-8]!
0x4cdd2be8     8  sub csp, jssp, #0x8 (8)
0x4cdd2bec    12  str x4, [jssp, #-8]!
0x4cdd2bf0    16  ldr x3, pc+88 (addr 0x000000004cdd2c48)    ;; object: 0xffffaa134a59 Cell for 0
0x4cdd2bf4    20  ldur x3, [x3, #7]
0x4cdd2bf8    24  cmp x3, #0x0 (0)
0x4cdd2bfc    28  b.ne #+0x2c (addr 0x4cdd2c28)
0x4cdd2c00    32  ldr x5, pc+80 (addr 0x000000004cdd2c50)    ;; object: 0xffffaa134c59 WeakCell for 0x2a835bb9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdd2c04    36  ldur x5, [x5, #7]
0x4cdd2c08    40  tbz w5, #0, #+0x20 (addr 0x4cdd2c28)
0x4cdd2c0c    44  ldursw x4, [x5, #15]
0x4cdd2c10    48  tbnz w4, #23, #+0x18 (addr 0x4cdd2c28)
0x4cdd2c14    52  ldr x4, [jssp], #8
0x4cdd2c18    56  ldr x3, [jssp], #8
0x4cdd2c1c    60  ldr x2, pc+60 (addr 0x000000004cdd2c58)    ;; object: 0xffffaa10d109 <String[5]: nlink>
0x4cdd2c20    64  ldr x16, pc+64 (addr 0x000000004cdd2c60)    ;; code: HANDLER, StoreTransitionStub, minor: 194565
0x4cdd2c24    68  br x16
0x4cdd2c28    72  ldr x2, pc+64 (addr 0x000000004cdd2c68)    ;; object: 0xffffaa10d109 <String[5]: nlink>
0x4cdd2c2c    76  ldr x4, [jssp], #8
0x4cdd2c30    80  ldr x3, [jssp], #8
0x4cdd2c34    84  ldr x16, pc+60 (addr 0x000000004cdd2c70)    ;; code: BUILTIN
0x4cdd2c38    88  br x16
0x4cdd2c3c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdd2c40    96  d63f03e0       constant
0x4cdd2c44   100  d503201f       constant
0x4cdd2c48   104  aa134a59       constant
0x4cdd2c4c   108  0000ffff       constant
0x4cdd2c50   112  aa134c59       constant
0x4cdd2c54   116  0000ffff       constant
0x4cdd2c58   120  aa10d109       constant
0x4cdd2c5c   124  0000ffff       constant
0x4cdd2c60   128  4cdd2ac0       constant
0x4cdd2c64   132  00000000       constant
0x4cdd2c68   136  aa10d109       constant
0x4cdd2c6c   140  0000ffff       constant
0x4cdd2c70   144  4cd22420       constant
0x4cdd2c74   148  00000000       constant


RelocInfo (size = 12)
0x4cdd2bf0  embedded object  (0xffffaa134a59 Cell for 0)
0x4cdd2c00  embedded object  (0xffffaa134c59 WeakCell for 0x2a835bb9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdd2c1c  embedded object  (0xffffaa10d109 <String[5]: nlink>)
0x4cdd2c20  code target (HANDLER)  (0x4cdd2ac0)
0x4cdd2c28  embedded object  (0xffffaa10d109 <String[5]: nlink>)
0x4cdd2c34  code target (BUILTIN)  (0x4cd22420)
0x4cdd2c3c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd2ce0     0  tbz w0, #0, #+0x1c (addr 0x4cdd2cfc)
0x4cdd2ce4     4  ldur x16, [x0, #-1]
0x4cdd2ce8     8  ldr x17, [x26, #120]
0x4cdd2cec    12  cmp x16, x17
0x4cdd2cf0    16  b.ne #+0x60 (addr 0x4cdd2d50)
0x4cdd2cf4    20  ldur d0, [x0, #7]
0x4cdd2cf8    24  b #+0x8 (addr 0x4cdd2d00)
0x4cdd2cfc    28  scvtf d0, x0, #32
0x4cdd2d00    32  stur d0, [x1, #47]
0x4cdd2d04    36  stur x5, [x1, #-1]
0x4cdd2d08    40  tbz w5, #0, #+0x34 (addr 0x4cdd2d3c)
0x4cdd2d0c    44  sub x2, x1, #0x1 (1)
0x4cdd2d10    48  and x5, x5, #0xfffffffffff00000
0x4cdd2d14    52  ldr x5, [x5, #8]
0x4cdd2d18    56  tbz w5, #1, #+0x24 (addr 0x4cdd2d3c)
0x4cdd2d1c    60  and x5, x1, #0xfffffffffff00000
0x4cdd2d20    64  ldr x5, [x5, #8]
0x4cdd2d24    68  tbz w5, #2, #+0x18 (addr 0x4cdd2d3c)
0x4cdd2d28    72  sub csp, jssp, #0x8 (8)
0x4cdd2d2c    76  str lr, [jssp, #-8]!
0x4cdd2d30    80  ldr x16, pc+24 (addr 0x000000004cdd2d48)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd2d34    84  blr x16
0x4cdd2d38    88  ldr lr, [jssp], #8
0x4cdd2d3c    92  ret
0x4cdd2d40    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd2d44   100  d63f03e0       constant
0x4cdd2d48   104  4cd38080       constant
0x4cdd2d4c   108  00000000       constant
0x4cdd2d50   112  movz x16, #0x0
0x4cdd2d54   116  sub csp, jssp, #0x10 (16)
0x4cdd2d58   120  stp fp, lr, [jssp, #-16]!
0x4cdd2d5c   124  bl #+0x4 (addr 0x4cdd2d60)
0x4cdd2d60   128  movz x17, #0xa00000000
0x4cdd2d64   132  sub csp, jssp, #0x10 (16)
0x4cdd2d68   136  stp x17, cp, [jssp, #-16]!
0x4cdd2d6c   140  add fp, jssp, #0x10 (16)
0x4cdd2d70   144  ldr x17, pc+24 (addr 0x000000004cdd2d88)    ;; lazy deoptimization bailout 0
0x4cdd2d74   148  add x17, x17, x16
0x4cdd2d78   152  br x17
0x4cdd2d7c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd2d80   160  d63f03e0       constant
0x4cdd2d84   164  d503201f       constant
0x4cdd2d88   168  4cb06000       constant
0x4cdd2d8c   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd2d30  code target (STUB)  (0x4cd38080)
0x4cdd2d40  constant pool (size 16)
0x4cdd2d70  runtime entry
0x4cdd2d7c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd2ce0     0  tbz w0, #0, #+0x1c (addr 0x4cdd2cfc)
0x4cdd2ce4     4  ldur x16, [x0, #-1]
0x4cdd2ce8     8  ldr x17, [x26, #120]
0x4cdd2cec    12  cmp x16, x17
0x4cdd2cf0    16  b.ne #+0x60 (addr 0x4cdd2d50)
0x4cdd2cf4    20  ldur d0, [x0, #7]
0x4cdd2cf8    24  b #+0x8 (addr 0x4cdd2d00)
0x4cdd2cfc    28  scvtf d0, x0, #32
0x4cdd2d00    32  stur d0, [x1, #47]
0x4cdd2d04    36  stur x5, [x1, #-1]
0x4cdd2d08    40  tbz w5, #0, #+0x34 (addr 0x4cdd2d3c)
0x4cdd2d0c    44  sub x2, x1, #0x1 (1)
0x4cdd2d10    48  and x5, x5, #0xfffffffffff00000
0x4cdd2d14    52  ldr x5, [x5, #8]
0x4cdd2d18    56  tbz w5, #1, #+0x24 (addr 0x4cdd2d3c)
0x4cdd2d1c    60  and x5, x1, #0xfffffffffff00000
0x4cdd2d20    64  ldr x5, [x5, #8]
0x4cdd2d24    68  tbz w5, #2, #+0x18 (addr 0x4cdd2d3c)
0x4cdd2d28    72  sub csp, jssp, #0x8 (8)
0x4cdd2d2c    76  str lr, [jssp, #-8]!
0x4cdd2d30    80  ldr x16, pc+24 (addr 0x000000004cdd2d48)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd2d34    84  blr x16
0x4cdd2d38    88  ldr lr, [jssp], #8
0x4cdd2d3c    92  ret
0x4cdd2d40    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd2d44   100  d63f03e0       constant
0x4cdd2d48   104  4cd38080       constant
0x4cdd2d4c   108  00000000       constant
0x4cdd2d50   112  movz x16, #0x0
0x4cdd2d54   116  sub csp, jssp, #0x10 (16)
0x4cdd2d58   120  stp fp, lr, [jssp, #-16]!
0x4cdd2d5c   124  bl #+0x4 (addr 0x4cdd2d60)
0x4cdd2d60   128  movz x17, #0xa00000000
0x4cdd2d64   132  sub csp, jssp, #0x10 (16)
0x4cdd2d68   136  stp x17, cp, [jssp, #-16]!
0x4cdd2d6c   140  add fp, jssp, #0x10 (16)
0x4cdd2d70   144  ldr x17, pc+24 (addr 0x000000004cdd2d88)    ;; lazy deoptimization bailout 0
0x4cdd2d74   148  add x17, x17, x16
0x4cdd2d78   152  br x17
0x4cdd2d7c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd2d80   160  d63f03e0       constant
0x4cdd2d84   164  d503201f       constant
0x4cdd2d88   168  4cb06000       constant
0x4cdd2d8c   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd2d30  code target (STUB)  (0x4cd38080)
0x4cdd2d40  constant pool (size 16)
0x4cdd2d70  runtime entry
0x4cdd2d7c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = uid
compiler = unknown
Instructions (size = 152)
0x4cdd2e00     0  sub csp, jssp, #0x8 (8)
0x4cdd2e04     4  str x3, [jssp, #-8]!
0x4cdd2e08     8  sub csp, jssp, #0x8 (8)
0x4cdd2e0c    12  str x4, [jssp, #-8]!
0x4cdd2e10    16  ldr x3, pc+88 (addr 0x000000004cdd2e68)    ;; object: 0xffffaa134a59 Cell for 0
0x4cdd2e14    20  ldur x3, [x3, #7]
0x4cdd2e18    24  cmp x3, #0x0 (0)
0x4cdd2e1c    28  b.ne #+0x2c (addr 0x4cdd2e48)
0x4cdd2e20    32  ldr x5, pc+80 (addr 0x000000004cdd2e70)    ;; object: 0xffffaa134d51 WeakCell for 0x2a835c11 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdd2e24    36  ldur x5, [x5, #7]
0x4cdd2e28    40  tbz w5, #0, #+0x20 (addr 0x4cdd2e48)
0x4cdd2e2c    44  ldursw x4, [x5, #15]
0x4cdd2e30    48  tbnz w4, #23, #+0x18 (addr 0x4cdd2e48)
0x4cdd2e34    52  ldr x4, [jssp], #8
0x4cdd2e38    56  ldr x3, [jssp], #8
0x4cdd2e3c    60  ldr x2, pc+60 (addr 0x000000004cdd2e78)    ;; object: 0x210b33a9 <String[3]: uid>
0x4cdd2e40    64  ldr x16, pc+64 (addr 0x000000004cdd2e80)    ;; code: HANDLER, StoreTransitionStub, minor: 194566
0x4cdd2e44    68  br x16
0x4cdd2e48    72  ldr x2, pc+64 (addr 0x000000004cdd2e88)    ;; object: 0x210b33a9 <String[3]: uid>
0x4cdd2e4c    76  ldr x4, [jssp], #8
0x4cdd2e50    80  ldr x3, [jssp], #8
0x4cdd2e54    84  ldr x16, pc+60 (addr 0x000000004cdd2e90)    ;; code: BUILTIN
0x4cdd2e58    88  br x16
0x4cdd2e5c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdd2e60    96  d63f03e0       constant
0x4cdd2e64   100  d503201f       constant
0x4cdd2e68   104  aa134a59       constant
0x4cdd2e6c   108  0000ffff       constant
0x4cdd2e70   112  aa134d51       constant
0x4cdd2e74   116  0000ffff       constant
0x4cdd2e78   120  210b33a9       constant
0x4cdd2e7c   124  00000000       constant
0x4cdd2e80   128  4cdd2ce0       constant
0x4cdd2e84   132  00000000       constant
0x4cdd2e88   136  210b33a9       constant
0x4cdd2e8c   140  00000000       constant
0x4cdd2e90   144  4cd22420       constant
0x4cdd2e94   148  00000000       constant


RelocInfo (size = 12)
0x4cdd2e10  embedded object  (0xffffaa134a59 Cell for 0)
0x4cdd2e20  embedded object  (0xffffaa134d51 WeakCell for 0x2a835c11 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdd2e3c  embedded object  (0x210b33a9 <String[3]: uid>)
0x4cdd2e40  code target (HANDLER)  (0x4cdd2ce0)
0x4cdd2e48  embedded object  (0x210b33a9 <String[3]: uid>)
0x4cdd2e54  code target (BUILTIN)  (0x4cd22420)
0x4cdd2e5c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd2f00     0  tbz w0, #0, #+0x1c (addr 0x4cdd2f1c)
0x4cdd2f04     4  ldur x16, [x0, #-1]
0x4cdd2f08     8  ldr x17, [x26, #120]
0x4cdd2f0c    12  cmp x16, x17
0x4cdd2f10    16  b.ne #+0x60 (addr 0x4cdd2f70)
0x4cdd2f14    20  ldur d0, [x0, #7]
0x4cdd2f18    24  b #+0x8 (addr 0x4cdd2f20)
0x4cdd2f1c    28  scvtf d0, x0, #32
0x4cdd2f20    32  stur d0, [x1, #55]
0x4cdd2f24    36  stur x5, [x1, #-1]
0x4cdd2f28    40  tbz w5, #0, #+0x34 (addr 0x4cdd2f5c)
0x4cdd2f2c    44  sub x2, x1, #0x1 (1)
0x4cdd2f30    48  and x5, x5, #0xfffffffffff00000
0x4cdd2f34    52  ldr x5, [x5, #8]
0x4cdd2f38    56  tbz w5, #1, #+0x24 (addr 0x4cdd2f5c)
0x4cdd2f3c    60  and x5, x1, #0xfffffffffff00000
0x4cdd2f40    64  ldr x5, [x5, #8]
0x4cdd2f44    68  tbz w5, #2, #+0x18 (addr 0x4cdd2f5c)
0x4cdd2f48    72  sub csp, jssp, #0x8 (8)
0x4cdd2f4c    76  str lr, [jssp, #-8]!
0x4cdd2f50    80  ldr x16, pc+24 (addr 0x000000004cdd2f68)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd2f54    84  blr x16
0x4cdd2f58    88  ldr lr, [jssp], #8
0x4cdd2f5c    92  ret
0x4cdd2f60    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd2f64   100  d63f03e0       constant
0x4cdd2f68   104  4cd38080       constant
0x4cdd2f6c   108  00000000       constant
0x4cdd2f70   112  movz x16, #0x0
0x4cdd2f74   116  sub csp, jssp, #0x10 (16)
0x4cdd2f78   120  stp fp, lr, [jssp, #-16]!
0x4cdd2f7c   124  bl #+0x4 (addr 0x4cdd2f80)
0x4cdd2f80   128  movz x17, #0xa00000000
0x4cdd2f84   132  sub csp, jssp, #0x10 (16)
0x4cdd2f88   136  stp x17, cp, [jssp, #-16]!
0x4cdd2f8c   140  add fp, jssp, #0x10 (16)
0x4cdd2f90   144  ldr x17, pc+24 (addr 0x000000004cdd2fa8)    ;; lazy deoptimization bailout 0
0x4cdd2f94   148  add x17, x17, x16
0x4cdd2f98   152  br x17
0x4cdd2f9c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd2fa0   160  d63f03e0       constant
0x4cdd2fa4   164  d503201f       constant
0x4cdd2fa8   168  4cb06000       constant
0x4cdd2fac   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd2f50  code target (STUB)  (0x4cd38080)
0x4cdd2f60  constant pool (size 16)
0x4cdd2f90  runtime entry
0x4cdd2f9c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd2f00     0  tbz w0, #0, #+0x1c (addr 0x4cdd2f1c)
0x4cdd2f04     4  ldur x16, [x0, #-1]
0x4cdd2f08     8  ldr x17, [x26, #120]
0x4cdd2f0c    12  cmp x16, x17
0x4cdd2f10    16  b.ne #+0x60 (addr 0x4cdd2f70)
0x4cdd2f14    20  ldur d0, [x0, #7]
0x4cdd2f18    24  b #+0x8 (addr 0x4cdd2f20)
0x4cdd2f1c    28  scvtf d0, x0, #32
0x4cdd2f20    32  stur d0, [x1, #55]
0x4cdd2f24    36  stur x5, [x1, #-1]
0x4cdd2f28    40  tbz w5, #0, #+0x34 (addr 0x4cdd2f5c)
0x4cdd2f2c    44  sub x2, x1, #0x1 (1)
0x4cdd2f30    48  and x5, x5, #0xfffffffffff00000
0x4cdd2f34    52  ldr x5, [x5, #8]
0x4cdd2f38    56  tbz w5, #1, #+0x24 (addr 0x4cdd2f5c)
0x4cdd2f3c    60  and x5, x1, #0xfffffffffff00000
0x4cdd2f40    64  ldr x5, [x5, #8]
0x4cdd2f44    68  tbz w5, #2, #+0x18 (addr 0x4cdd2f5c)
0x4cdd2f48    72  sub csp, jssp, #0x8 (8)
0x4cdd2f4c    76  str lr, [jssp, #-8]!
0x4cdd2f50    80  ldr x16, pc+24 (addr 0x000000004cdd2f68)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd2f54    84  blr x16
0x4cdd2f58    88  ldr lr, [jssp], #8
0x4cdd2f5c    92  ret
0x4cdd2f60    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd2f64   100  d63f03e0       constant
0x4cdd2f68   104  4cd38080       constant
0x4cdd2f6c   108  00000000       constant
0x4cdd2f70   112  movz x16, #0x0
0x4cdd2f74   116  sub csp, jssp, #0x10 (16)
0x4cdd2f78   120  stp fp, lr, [jssp, #-16]!
0x4cdd2f7c   124  bl #+0x4 (addr 0x4cdd2f80)
0x4cdd2f80   128  movz x17, #0xa00000000
0x4cdd2f84   132  sub csp, jssp, #0x10 (16)
0x4cdd2f88   136  stp x17, cp, [jssp, #-16]!
0x4cdd2f8c   140  add fp, jssp, #0x10 (16)
0x4cdd2f90   144  ldr x17, pc+24 (addr 0x000000004cdd2fa8)    ;; lazy deoptimization bailout 0
0x4cdd2f94   148  add x17, x17, x16
0x4cdd2f98   152  br x17
0x4cdd2f9c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd2fa0   160  d63f03e0       constant
0x4cdd2fa4   164  d503201f       constant
0x4cdd2fa8   168  4cb06000       constant
0x4cdd2fac   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd2f50  code target (STUB)  (0x4cd38080)
0x4cdd2f60  constant pool (size 16)
0x4cdd2f90  runtime entry
0x4cdd2f9c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = gid
compiler = unknown
Instructions (size = 152)
0x4cdd3020     0  sub csp, jssp, #0x8 (8)
0x4cdd3024     4  str x3, [jssp, #-8]!
0x4cdd3028     8  sub csp, jssp, #0x8 (8)
0x4cdd302c    12  str x4, [jssp, #-8]!
0x4cdd3030    16  ldr x3, pc+88 (addr 0x000000004cdd3088)    ;; object: 0xffffaa134a59 Cell for 0
0x4cdd3034    20  ldur x3, [x3, #7]
0x4cdd3038    24  cmp x3, #0x0 (0)
0x4cdd303c    28  b.ne #+0x2c (addr 0x4cdd3068)
0x4cdd3040    32  ldr x5, pc+80 (addr 0x000000004cdd3090)    ;; object: 0xffffaa134e49 WeakCell for 0x2a835c69 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdd3044    36  ldur x5, [x5, #7]
0x4cdd3048    40  tbz w5, #0, #+0x20 (addr 0x4cdd3068)
0x4cdd304c    44  ldursw x4, [x5, #15]
0x4cdd3050    48  tbnz w4, #23, #+0x18 (addr 0x4cdd3068)
0x4cdd3054    52  ldr x4, [jssp], #8
0x4cdd3058    56  ldr x3, [jssp], #8
0x4cdd305c    60  ldr x2, pc+60 (addr 0x000000004cdd3098)    ;; object: 0x210b2771 <String[3]: gid>
0x4cdd3060    64  ldr x16, pc+64 (addr 0x000000004cdd30a0)    ;; code: HANDLER, StoreTransitionStub, minor: 194567
0x4cdd3064    68  br x16
0x4cdd3068    72  ldr x2, pc+64 (addr 0x000000004cdd30a8)    ;; object: 0x210b2771 <String[3]: gid>
0x4cdd306c    76  ldr x4, [jssp], #8
0x4cdd3070    80  ldr x3, [jssp], #8
0x4cdd3074    84  ldr x16, pc+60 (addr 0x000000004cdd30b0)    ;; code: BUILTIN
0x4cdd3078    88  br x16
0x4cdd307c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdd3080    96  d63f03e0       constant
0x4cdd3084   100  d503201f       constant
0x4cdd3088   104  aa134a59       constant
0x4cdd308c   108  0000ffff       constant
0x4cdd3090   112  aa134e49       constant
0x4cdd3094   116  0000ffff       constant
0x4cdd3098   120  210b2771       constant
0x4cdd309c   124  00000000       constant
0x4cdd30a0   128  4cdd2f00       constant
0x4cdd30a4   132  00000000       constant
0x4cdd30a8   136  210b2771       constant
0x4cdd30ac   140  00000000       constant
0x4cdd30b0   144  4cd22420       constant
0x4cdd30b4   148  00000000       constant


RelocInfo (size = 12)
0x4cdd3030  embedded object  (0xffffaa134a59 Cell for 0)
0x4cdd3040  embedded object  (0xffffaa134e49 WeakCell for 0x2a835c69 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdd305c  embedded object  (0x210b2771 <String[3]: gid>)
0x4cdd3060  code target (HANDLER)  (0x4cdd2f00)
0x4cdd3068  embedded object  (0x210b2771 <String[3]: gid>)
0x4cdd3074  code target (BUILTIN)  (0x4cd22420)
0x4cdd307c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd3120     0  tbz w0, #0, #+0x1c (addr 0x4cdd313c)
0x4cdd3124     4  ldur x16, [x0, #-1]
0x4cdd3128     8  ldr x17, [x26, #120]
0x4cdd312c    12  cmp x16, x17
0x4cdd3130    16  b.ne #+0x60 (addr 0x4cdd3190)
0x4cdd3134    20  ldur d0, [x0, #7]
0x4cdd3138    24  b #+0x8 (addr 0x4cdd3140)
0x4cdd313c    28  scvtf d0, x0, #32
0x4cdd3140    32  stur d0, [x1, #63]
0x4cdd3144    36  stur x5, [x1, #-1]
0x4cdd3148    40  tbz w5, #0, #+0x34 (addr 0x4cdd317c)
0x4cdd314c    44  sub x2, x1, #0x1 (1)
0x4cdd3150    48  and x5, x5, #0xfffffffffff00000
0x4cdd3154    52  ldr x5, [x5, #8]
0x4cdd3158    56  tbz w5, #1, #+0x24 (addr 0x4cdd317c)
0x4cdd315c    60  and x5, x1, #0xfffffffffff00000
0x4cdd3160    64  ldr x5, [x5, #8]
0x4cdd3164    68  tbz w5, #2, #+0x18 (addr 0x4cdd317c)
0x4cdd3168    72  sub csp, jssp, #0x8 (8)
0x4cdd316c    76  str lr, [jssp, #-8]!
0x4cdd3170    80  ldr x16, pc+24 (addr 0x000000004cdd3188)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd3174    84  blr x16
0x4cdd3178    88  ldr lr, [jssp], #8
0x4cdd317c    92  ret
0x4cdd3180    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd3184   100  d63f03e0       constant
0x4cdd3188   104  4cd38080       constant
0x4cdd318c   108  00000000       constant
0x4cdd3190   112  movz x16, #0x0
0x4cdd3194   116  sub csp, jssp, #0x10 (16)
0x4cdd3198   120  stp fp, lr, [jssp, #-16]!
0x4cdd319c   124  bl #+0x4 (addr 0x4cdd31a0)
0x4cdd31a0   128  movz x17, #0xa00000000
0x4cdd31a4   132  sub csp, jssp, #0x10 (16)
0x4cdd31a8   136  stp x17, cp, [jssp, #-16]!
0x4cdd31ac   140  add fp, jssp, #0x10 (16)
0x4cdd31b0   144  ldr x17, pc+24 (addr 0x000000004cdd31c8)    ;; lazy deoptimization bailout 0
0x4cdd31b4   148  add x17, x17, x16
0x4cdd31b8   152  br x17
0x4cdd31bc   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd31c0   160  d63f03e0       constant
0x4cdd31c4   164  d503201f       constant
0x4cdd31c8   168  4cb06000       constant
0x4cdd31cc   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd3170  code target (STUB)  (0x4cd38080)
0x4cdd3180  constant pool (size 16)
0x4cdd31b0  runtime entry
0x4cdd31bc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd3120     0  tbz w0, #0, #+0x1c (addr 0x4cdd313c)
0x4cdd3124     4  ldur x16, [x0, #-1]
0x4cdd3128     8  ldr x17, [x26, #120]
0x4cdd312c    12  cmp x16, x17
0x4cdd3130    16  b.ne #+0x60 (addr 0x4cdd3190)
0x4cdd3134    20  ldur d0, [x0, #7]
0x4cdd3138    24  b #+0x8 (addr 0x4cdd3140)
0x4cdd313c    28  scvtf d0, x0, #32
0x4cdd3140    32  stur d0, [x1, #63]
0x4cdd3144    36  stur x5, [x1, #-1]
0x4cdd3148    40  tbz w5, #0, #+0x34 (addr 0x4cdd317c)
0x4cdd314c    44  sub x2, x1, #0x1 (1)
0x4cdd3150    48  and x5, x5, #0xfffffffffff00000
0x4cdd3154    52  ldr x5, [x5, #8]
0x4cdd3158    56  tbz w5, #1, #+0x24 (addr 0x4cdd317c)
0x4cdd315c    60  and x5, x1, #0xfffffffffff00000
0x4cdd3160    64  ldr x5, [x5, #8]
0x4cdd3164    68  tbz w5, #2, #+0x18 (addr 0x4cdd317c)
0x4cdd3168    72  sub csp, jssp, #0x8 (8)
0x4cdd316c    76  str lr, [jssp, #-8]!
0x4cdd3170    80  ldr x16, pc+24 (addr 0x000000004cdd3188)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd3174    84  blr x16
0x4cdd3178    88  ldr lr, [jssp], #8
0x4cdd317c    92  ret
0x4cdd3180    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd3184   100  d63f03e0       constant
0x4cdd3188   104  4cd38080       constant
0x4cdd318c   108  00000000       constant
0x4cdd3190   112  movz x16, #0x0
0x4cdd3194   116  sub csp, jssp, #0x10 (16)
0x4cdd3198   120  stp fp, lr, [jssp, #-16]!
0x4cdd319c   124  bl #+0x4 (addr 0x4cdd31a0)
0x4cdd31a0   128  movz x17, #0xa00000000
0x4cdd31a4   132  sub csp, jssp, #0x10 (16)
0x4cdd31a8   136  stp x17, cp, [jssp, #-16]!
0x4cdd31ac   140  add fp, jssp, #0x10 (16)
0x4cdd31b0   144  ldr x17, pc+24 (addr 0x000000004cdd31c8)    ;; lazy deoptimization bailout 0
0x4cdd31b4   148  add x17, x17, x16
0x4cdd31b8   152  br x17
0x4cdd31bc   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd31c0   160  d63f03e0       constant
0x4cdd31c4   164  d503201f       constant
0x4cdd31c8   168  4cb06000       constant
0x4cdd31cc   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd3170  code target (STUB)  (0x4cd38080)
0x4cdd3180  constant pool (size 16)
0x4cdd31b0  runtime entry
0x4cdd31bc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = rdev
compiler = unknown
Instructions (size = 152)
0x4cdd3240     0  sub csp, jssp, #0x8 (8)
0x4cdd3244     4  str x3, [jssp, #-8]!
0x4cdd3248     8  sub csp, jssp, #0x8 (8)
0x4cdd324c    12  str x4, [jssp, #-8]!
0x4cdd3250    16  ldr x3, pc+88 (addr 0x000000004cdd32a8)    ;; object: 0xffffaa134a59 Cell for 0
0x4cdd3254    20  ldur x3, [x3, #7]
0x4cdd3258    24  cmp x3, #0x0 (0)
0x4cdd325c    28  b.ne #+0x2c (addr 0x4cdd3288)
0x4cdd3260    32  ldr x5, pc+80 (addr 0x000000004cdd32b0)    ;; object: 0xffffaa134f41 WeakCell for 0x2a835cc1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdd3264    36  ldur x5, [x5, #7]
0x4cdd3268    40  tbz w5, #0, #+0x20 (addr 0x4cdd3288)
0x4cdd326c    44  ldursw x4, [x5, #15]
0x4cdd3270    48  tbnz w4, #23, #+0x18 (addr 0x4cdd3288)
0x4cdd3274    52  ldr x4, [jssp], #8
0x4cdd3278    56  ldr x3, [jssp], #8
0x4cdd327c    60  ldr x2, pc+60 (addr 0x000000004cdd32b8)    ;; object: 0xffffaa10d129 <String[4]: rdev>
0x4cdd3280    64  ldr x16, pc+64 (addr 0x000000004cdd32c0)    ;; code: HANDLER, StoreTransitionStub, minor: 194568
0x4cdd3284    68  br x16
0x4cdd3288    72  ldr x2, pc+64 (addr 0x000000004cdd32c8)    ;; object: 0xffffaa10d129 <String[4]: rdev>
0x4cdd328c    76  ldr x4, [jssp], #8
0x4cdd3290    80  ldr x3, [jssp], #8
0x4cdd3294    84  ldr x16, pc+60 (addr 0x000000004cdd32d0)    ;; code: BUILTIN
0x4cdd3298    88  br x16
0x4cdd329c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdd32a0    96  d63f03e0       constant
0x4cdd32a4   100  d503201f       constant
0x4cdd32a8   104  aa134a59       constant
0x4cdd32ac   108  0000ffff       constant
0x4cdd32b0   112  aa134f41       constant
0x4cdd32b4   116  0000ffff       constant
0x4cdd32b8   120  aa10d129       constant
0x4cdd32bc   124  0000ffff       constant
0x4cdd32c0   128  4cdd3120       constant
0x4cdd32c4   132  00000000       constant
0x4cdd32c8   136  aa10d129       constant
0x4cdd32cc   140  0000ffff       constant
0x4cdd32d0   144  4cd22420       constant
0x4cdd32d4   148  00000000       constant


RelocInfo (size = 12)
0x4cdd3250  embedded object  (0xffffaa134a59 Cell for 0)
0x4cdd3260  embedded object  (0xffffaa134f41 WeakCell for 0x2a835cc1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdd327c  embedded object  (0xffffaa10d129 <String[4]: rdev>)
0x4cdd3280  code target (HANDLER)  (0x4cdd3120)
0x4cdd3288  embedded object  (0xffffaa10d129 <String[4]: rdev>)
0x4cdd3294  code target (BUILTIN)  (0x4cd22420)
0x4cdd329c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd3340     0  tbz w0, #0, #+0x1c (addr 0x4cdd335c)
0x4cdd3344     4  ldur x16, [x0, #-1]
0x4cdd3348     8  ldr x17, [x26, #120]
0x4cdd334c    12  cmp x16, x17
0x4cdd3350    16  b.ne #+0x60 (addr 0x4cdd33b0)
0x4cdd3354    20  ldur d0, [x0, #7]
0x4cdd3358    24  b #+0x8 (addr 0x4cdd3360)
0x4cdd335c    28  scvtf d0, x0, #32
0x4cdd3360    32  stur d0, [x1, #71]
0x4cdd3364    36  stur x5, [x1, #-1]
0x4cdd3368    40  tbz w5, #0, #+0x34 (addr 0x4cdd339c)
0x4cdd336c    44  sub x2, x1, #0x1 (1)
0x4cdd3370    48  and x5, x5, #0xfffffffffff00000
0x4cdd3374    52  ldr x5, [x5, #8]
0x4cdd3378    56  tbz w5, #1, #+0x24 (addr 0x4cdd339c)
0x4cdd337c    60  and x5, x1, #0xfffffffffff00000
0x4cdd3380    64  ldr x5, [x5, #8]
0x4cdd3384    68  tbz w5, #2, #+0x18 (addr 0x4cdd339c)
0x4cdd3388    72  sub csp, jssp, #0x8 (8)
0x4cdd338c    76  str lr, [jssp, #-8]!
0x4cdd3390    80  ldr x16, pc+24 (addr 0x000000004cdd33a8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd3394    84  blr x16
0x4cdd3398    88  ldr lr, [jssp], #8
0x4cdd339c    92  ret
0x4cdd33a0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd33a4   100  d63f03e0       constant
0x4cdd33a8   104  4cd38080       constant
0x4cdd33ac   108  00000000       constant
0x4cdd33b0   112  movz x16, #0x0
0x4cdd33b4   116  sub csp, jssp, #0x10 (16)
0x4cdd33b8   120  stp fp, lr, [jssp, #-16]!
0x4cdd33bc   124  bl #+0x4 (addr 0x4cdd33c0)
0x4cdd33c0   128  movz x17, #0xa00000000
0x4cdd33c4   132  sub csp, jssp, #0x10 (16)
0x4cdd33c8   136  stp x17, cp, [jssp, #-16]!
0x4cdd33cc   140  add fp, jssp, #0x10 (16)
0x4cdd33d0   144  ldr x17, pc+24 (addr 0x000000004cdd33e8)    ;; lazy deoptimization bailout 0
0x4cdd33d4   148  add x17, x17, x16
0x4cdd33d8   152  br x17
0x4cdd33dc   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd33e0   160  d63f03e0       constant
0x4cdd33e4   164  d503201f       constant
0x4cdd33e8   168  4cb06000       constant
0x4cdd33ec   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd3390  code target (STUB)  (0x4cd38080)
0x4cdd33a0  constant pool (size 16)
0x4cdd33d0  runtime entry
0x4cdd33dc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd3340     0  tbz w0, #0, #+0x1c (addr 0x4cdd335c)
0x4cdd3344     4  ldur x16, [x0, #-1]
0x4cdd3348     8  ldr x17, [x26, #120]
0x4cdd334c    12  cmp x16, x17
0x4cdd3350    16  b.ne #+0x60 (addr 0x4cdd33b0)
0x4cdd3354    20  ldur d0, [x0, #7]
0x4cdd3358    24  b #+0x8 (addr 0x4cdd3360)
0x4cdd335c    28  scvtf d0, x0, #32
0x4cdd3360    32  stur d0, [x1, #71]
0x4cdd3364    36  stur x5, [x1, #-1]
0x4cdd3368    40  tbz w5, #0, #+0x34 (addr 0x4cdd339c)
0x4cdd336c    44  sub x2, x1, #0x1 (1)
0x4cdd3370    48  and x5, x5, #0xfffffffffff00000
0x4cdd3374    52  ldr x5, [x5, #8]
0x4cdd3378    56  tbz w5, #1, #+0x24 (addr 0x4cdd339c)
0x4cdd337c    60  and x5, x1, #0xfffffffffff00000
0x4cdd3380    64  ldr x5, [x5, #8]
0x4cdd3384    68  tbz w5, #2, #+0x18 (addr 0x4cdd339c)
0x4cdd3388    72  sub csp, jssp, #0x8 (8)
0x4cdd338c    76  str lr, [jssp, #-8]!
0x4cdd3390    80  ldr x16, pc+24 (addr 0x000000004cdd33a8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd3394    84  blr x16
0x4cdd3398    88  ldr lr, [jssp], #8
0x4cdd339c    92  ret
0x4cdd33a0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd33a4   100  d63f03e0       constant
0x4cdd33a8   104  4cd38080       constant
0x4cdd33ac   108  00000000       constant
0x4cdd33b0   112  movz x16, #0x0
0x4cdd33b4   116  sub csp, jssp, #0x10 (16)
0x4cdd33b8   120  stp fp, lr, [jssp, #-16]!
0x4cdd33bc   124  bl #+0x4 (addr 0x4cdd33c0)
0x4cdd33c0   128  movz x17, #0xa00000000
0x4cdd33c4   132  sub csp, jssp, #0x10 (16)
0x4cdd33c8   136  stp x17, cp, [jssp, #-16]!
0x4cdd33cc   140  add fp, jssp, #0x10 (16)
0x4cdd33d0   144  ldr x17, pc+24 (addr 0x000000004cdd33e8)    ;; lazy deoptimization bailout 0
0x4cdd33d4   148  add x17, x17, x16
0x4cdd33d8   152  br x17
0x4cdd33dc   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd33e0   160  d63f03e0       constant
0x4cdd33e4   164  d503201f       constant
0x4cdd33e8   168  4cb06000       constant
0x4cdd33ec   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd3390  code target (STUB)  (0x4cd38080)
0x4cdd33a0  constant pool (size 16)
0x4cdd33d0  runtime entry
0x4cdd33dc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = blksize
compiler = unknown
Instructions (size = 152)
0x4cdd3460     0  sub csp, jssp, #0x8 (8)
0x4cdd3464     4  str x3, [jssp, #-8]!
0x4cdd3468     8  sub csp, jssp, #0x8 (8)
0x4cdd346c    12  str x4, [jssp, #-8]!
0x4cdd3470    16  ldr x3, pc+88 (addr 0x000000004cdd34c8)    ;; object: 0xffffaa134a59 Cell for 0
0x4cdd3474    20  ldur x3, [x3, #7]
0x4cdd3478    24  cmp x3, #0x0 (0)
0x4cdd347c    28  b.ne #+0x2c (addr 0x4cdd34a8)
0x4cdd3480    32  ldr x5, pc+80 (addr 0x000000004cdd34d0)    ;; object: 0xffffaa135039 WeakCell for 0x2a835d19 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdd3484    36  ldur x5, [x5, #7]
0x4cdd3488    40  tbz w5, #0, #+0x20 (addr 0x4cdd34a8)
0x4cdd348c    44  ldursw x4, [x5, #15]
0x4cdd3490    48  tbnz w4, #23, #+0x18 (addr 0x4cdd34a8)
0x4cdd3494    52  ldr x4, [jssp], #8
0x4cdd3498    56  ldr x3, [jssp], #8
0x4cdd349c    60  ldr x2, pc+60 (addr 0x000000004cdd34d8)    ;; object: 0xffffaa10d149 <String[7]: blksize>
0x4cdd34a0    64  ldr x16, pc+64 (addr 0x000000004cdd34e0)    ;; code: HANDLER, StoreTransitionStub, minor: 194569
0x4cdd34a4    68  br x16
0x4cdd34a8    72  ldr x2, pc+64 (addr 0x000000004cdd34e8)    ;; object: 0xffffaa10d149 <String[7]: blksize>
0x4cdd34ac    76  ldr x4, [jssp], #8
0x4cdd34b0    80  ldr x3, [jssp], #8
0x4cdd34b4    84  ldr x16, pc+60 (addr 0x000000004cdd34f0)    ;; code: BUILTIN
0x4cdd34b8    88  br x16
0x4cdd34bc    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdd34c0    96  d63f03e0       constant
0x4cdd34c4   100  d503201f       constant
0x4cdd34c8   104  aa134a59       constant
0x4cdd34cc   108  0000ffff       constant
0x4cdd34d0   112  aa135039       constant
0x4cdd34d4   116  0000ffff       constant
0x4cdd34d8   120  aa10d149       constant
0x4cdd34dc   124  0000ffff       constant
0x4cdd34e0   128  4cdd3340       constant
0x4cdd34e4   132  00000000       constant
0x4cdd34e8   136  aa10d149       constant
0x4cdd34ec   140  0000ffff       constant
0x4cdd34f0   144  4cd22420       constant
0x4cdd34f4   148  00000000       constant


RelocInfo (size = 12)
0x4cdd3470  embedded object  (0xffffaa134a59 Cell for 0)
0x4cdd3480  embedded object  (0xffffaa135039 WeakCell for 0x2a835d19 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdd349c  embedded object  (0xffffaa10d149 <String[7]: blksize>)
0x4cdd34a0  code target (HANDLER)  (0x4cdd3340)
0x4cdd34a8  embedded object  (0xffffaa10d149 <String[7]: blksize>)
0x4cdd34b4  code target (BUILTIN)  (0x4cd22420)
0x4cdd34bc  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd3560     0  tbz w0, #0, #+0x1c (addr 0x4cdd357c)
0x4cdd3564     4  ldur x16, [x0, #-1]
0x4cdd3568     8  ldr x17, [x26, #120]
0x4cdd356c    12  cmp x16, x17
0x4cdd3570    16  b.ne #+0x60 (addr 0x4cdd35d0)
0x4cdd3574    20  ldur d0, [x0, #7]
0x4cdd3578    24  b #+0x8 (addr 0x4cdd3580)
0x4cdd357c    28  scvtf d0, x0, #32
0x4cdd3580    32  stur d0, [x1, #79]
0x4cdd3584    36  stur x5, [x1, #-1]
0x4cdd3588    40  tbz w5, #0, #+0x34 (addr 0x4cdd35bc)
0x4cdd358c    44  sub x2, x1, #0x1 (1)
0x4cdd3590    48  and x5, x5, #0xfffffffffff00000
0x4cdd3594    52  ldr x5, [x5, #8]
0x4cdd3598    56  tbz w5, #1, #+0x24 (addr 0x4cdd35bc)
0x4cdd359c    60  and x5, x1, #0xfffffffffff00000
0x4cdd35a0    64  ldr x5, [x5, #8]
0x4cdd35a4    68  tbz w5, #2, #+0x18 (addr 0x4cdd35bc)
0x4cdd35a8    72  sub csp, jssp, #0x8 (8)
0x4cdd35ac    76  str lr, [jssp, #-8]!
0x4cdd35b0    80  ldr x16, pc+24 (addr 0x000000004cdd35c8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd35b4    84  blr x16
0x4cdd35b8    88  ldr lr, [jssp], #8
0x4cdd35bc    92  ret
0x4cdd35c0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd35c4   100  d63f03e0       constant
0x4cdd35c8   104  4cd38080       constant
0x4cdd35cc   108  00000000       constant
0x4cdd35d0   112  movz x16, #0x0
0x4cdd35d4   116  sub csp, jssp, #0x10 (16)
0x4cdd35d8   120  stp fp, lr, [jssp, #-16]!
0x4cdd35dc   124  bl #+0x4 (addr 0x4cdd35e0)
0x4cdd35e0   128  movz x17, #0xa00000000
0x4cdd35e4   132  sub csp, jssp, #0x10 (16)
0x4cdd35e8   136  stp x17, cp, [jssp, #-16]!
0x4cdd35ec   140  add fp, jssp, #0x10 (16)
0x4cdd35f0   144  ldr x17, pc+24 (addr 0x000000004cdd3608)    ;; lazy deoptimization bailout 0
0x4cdd35f4   148  add x17, x17, x16
0x4cdd35f8   152  br x17
0x4cdd35fc   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd3600   160  d63f03e0       constant
0x4cdd3604   164  d503201f       constant
0x4cdd3608   168  4cb06000       constant
0x4cdd360c   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd35b0  code target (STUB)  (0x4cd38080)
0x4cdd35c0  constant pool (size 16)
0x4cdd35f0  runtime entry
0x4cdd35fc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd3560     0  tbz w0, #0, #+0x1c (addr 0x4cdd357c)
0x4cdd3564     4  ldur x16, [x0, #-1]
0x4cdd3568     8  ldr x17, [x26, #120]
0x4cdd356c    12  cmp x16, x17
0x4cdd3570    16  b.ne #+0x60 (addr 0x4cdd35d0)
0x4cdd3574    20  ldur d0, [x0, #7]
0x4cdd3578    24  b #+0x8 (addr 0x4cdd3580)
0x4cdd357c    28  scvtf d0, x0, #32
0x4cdd3580    32  stur d0, [x1, #79]
0x4cdd3584    36  stur x5, [x1, #-1]
0x4cdd3588    40  tbz w5, #0, #+0x34 (addr 0x4cdd35bc)
0x4cdd358c    44  sub x2, x1, #0x1 (1)
0x4cdd3590    48  and x5, x5, #0xfffffffffff00000
0x4cdd3594    52  ldr x5, [x5, #8]
0x4cdd3598    56  tbz w5, #1, #+0x24 (addr 0x4cdd35bc)
0x4cdd359c    60  and x5, x1, #0xfffffffffff00000
0x4cdd35a0    64  ldr x5, [x5, #8]
0x4cdd35a4    68  tbz w5, #2, #+0x18 (addr 0x4cdd35bc)
0x4cdd35a8    72  sub csp, jssp, #0x8 (8)
0x4cdd35ac    76  str lr, [jssp, #-8]!
0x4cdd35b0    80  ldr x16, pc+24 (addr 0x000000004cdd35c8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd35b4    84  blr x16
0x4cdd35b8    88  ldr lr, [jssp], #8
0x4cdd35bc    92  ret
0x4cdd35c0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd35c4   100  d63f03e0       constant
0x4cdd35c8   104  4cd38080       constant
0x4cdd35cc   108  00000000       constant
0x4cdd35d0   112  movz x16, #0x0
0x4cdd35d4   116  sub csp, jssp, #0x10 (16)
0x4cdd35d8   120  stp fp, lr, [jssp, #-16]!
0x4cdd35dc   124  bl #+0x4 (addr 0x4cdd35e0)
0x4cdd35e0   128  movz x17, #0xa00000000
0x4cdd35e4   132  sub csp, jssp, #0x10 (16)
0x4cdd35e8   136  stp x17, cp, [jssp, #-16]!
0x4cdd35ec   140  add fp, jssp, #0x10 (16)
0x4cdd35f0   144  ldr x17, pc+24 (addr 0x000000004cdd3608)    ;; lazy deoptimization bailout 0
0x4cdd35f4   148  add x17, x17, x16
0x4cdd35f8   152  br x17
0x4cdd35fc   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd3600   160  d63f03e0       constant
0x4cdd3604   164  d503201f       constant
0x4cdd3608   168  4cb06000       constant
0x4cdd360c   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd35b0  code target (STUB)  (0x4cd38080)
0x4cdd35c0  constant pool (size 16)
0x4cdd35f0  runtime entry
0x4cdd35fc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = ino
compiler = unknown
Instructions (size = 152)
0x4cdd3680     0  sub csp, jssp, #0x8 (8)
0x4cdd3684     4  str x3, [jssp, #-8]!
0x4cdd3688     8  sub csp, jssp, #0x8 (8)
0x4cdd368c    12  str x4, [jssp, #-8]!
0x4cdd3690    16  ldr x3, pc+88 (addr 0x000000004cdd36e8)    ;; object: 0xffffaa134a59 Cell for 0
0x4cdd3694    20  ldur x3, [x3, #7]
0x4cdd3698    24  cmp x3, #0x0 (0)
0x4cdd369c    28  b.ne #+0x2c (addr 0x4cdd36c8)
0x4cdd36a0    32  ldr x5, pc+80 (addr 0x000000004cdd36f0)    ;; object: 0xffffaa135131 WeakCell for 0x2a835d71 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdd36a4    36  ldur x5, [x5, #7]
0x4cdd36a8    40  tbz w5, #0, #+0x20 (addr 0x4cdd36c8)
0x4cdd36ac    44  ldursw x4, [x5, #15]
0x4cdd36b0    48  tbnz w4, #23, #+0x18 (addr 0x4cdd36c8)
0x4cdd36b4    52  ldr x4, [jssp], #8
0x4cdd36b8    56  ldr x3, [jssp], #8
0x4cdd36bc    60  ldr x2, pc+60 (addr 0x000000004cdd36f8)    ;; object: 0xffffaa10d169 <String[3]: ino>
0x4cdd36c0    64  ldr x16, pc+64 (addr 0x000000004cdd3700)    ;; code: HANDLER, StoreTransitionStub, minor: 194570
0x4cdd36c4    68  br x16
0x4cdd36c8    72  ldr x2, pc+64 (addr 0x000000004cdd3708)    ;; object: 0xffffaa10d169 <String[3]: ino>
0x4cdd36cc    76  ldr x4, [jssp], #8
0x4cdd36d0    80  ldr x3, [jssp], #8
0x4cdd36d4    84  ldr x16, pc+60 (addr 0x000000004cdd3710)    ;; code: BUILTIN
0x4cdd36d8    88  br x16
0x4cdd36dc    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdd36e0    96  d63f03e0       constant
0x4cdd36e4   100  d503201f       constant
0x4cdd36e8   104  aa134a59       constant
0x4cdd36ec   108  0000ffff       constant
0x4cdd36f0   112  aa135131       constant
0x4cdd36f4   116  0000ffff       constant
0x4cdd36f8   120  aa10d169       constant
0x4cdd36fc   124  0000ffff       constant
0x4cdd3700   128  4cdd3560       constant
0x4cdd3704   132  00000000       constant
0x4cdd3708   136  aa10d169       constant
0x4cdd370c   140  0000ffff       constant
0x4cdd3710   144  4cd22420       constant
0x4cdd3714   148  00000000       constant


RelocInfo (size = 12)
0x4cdd3690  embedded object  (0xffffaa134a59 Cell for 0)
0x4cdd36a0  embedded object  (0xffffaa135131 WeakCell for 0x2a835d71 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdd36bc  embedded object  (0xffffaa10d169 <String[3]: ino>)
0x4cdd36c0  code target (HANDLER)  (0x4cdd3560)
0x4cdd36c8  embedded object  (0xffffaa10d169 <String[3]: ino>)
0x4cdd36d4  code target (BUILTIN)  (0x4cd22420)
0x4cdd36dc  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd3780     0  tbz w0, #0, #+0x1c (addr 0x4cdd379c)
0x4cdd3784     4  ldur x16, [x0, #-1]
0x4cdd3788     8  ldr x17, [x26, #120]
0x4cdd378c    12  cmp x16, x17
0x4cdd3790    16  b.ne #+0x60 (addr 0x4cdd37f0)
0x4cdd3794    20  ldur d0, [x0, #7]
0x4cdd3798    24  b #+0x8 (addr 0x4cdd37a0)
0x4cdd379c    28  scvtf d0, x0, #32
0x4cdd37a0    32  stur d0, [x1, #87]
0x4cdd37a4    36  stur x5, [x1, #-1]
0x4cdd37a8    40  tbz w5, #0, #+0x34 (addr 0x4cdd37dc)
0x4cdd37ac    44  sub x2, x1, #0x1 (1)
0x4cdd37b0    48  and x5, x5, #0xfffffffffff00000
0x4cdd37b4    52  ldr x5, [x5, #8]
0x4cdd37b8    56  tbz w5, #1, #+0x24 (addr 0x4cdd37dc)
0x4cdd37bc    60  and x5, x1, #0xfffffffffff00000
0x4cdd37c0    64  ldr x5, [x5, #8]
0x4cdd37c4    68  tbz w5, #2, #+0x18 (addr 0x4cdd37dc)
0x4cdd37c8    72  sub csp, jssp, #0x8 (8)
0x4cdd37cc    76  str lr, [jssp, #-8]!
0x4cdd37d0    80  ldr x16, pc+24 (addr 0x000000004cdd37e8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd37d4    84  blr x16
0x4cdd37d8    88  ldr lr, [jssp], #8
0x4cdd37dc    92  ret
0x4cdd37e0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd37e4   100  d63f03e0       constant
0x4cdd37e8   104  4cd38080       constant
0x4cdd37ec   108  00000000       constant
0x4cdd37f0   112  movz x16, #0x0
0x4cdd37f4   116  sub csp, jssp, #0x10 (16)
0x4cdd37f8   120  stp fp, lr, [jssp, #-16]!
0x4cdd37fc   124  bl #+0x4 (addr 0x4cdd3800)
0x4cdd3800   128  movz x17, #0xa00000000
0x4cdd3804   132  sub csp, jssp, #0x10 (16)
0x4cdd3808   136  stp x17, cp, [jssp, #-16]!
0x4cdd380c   140  add fp, jssp, #0x10 (16)
0x4cdd3810   144  ldr x17, pc+24 (addr 0x000000004cdd3828)    ;; lazy deoptimization bailout 0
0x4cdd3814   148  add x17, x17, x16
0x4cdd3818   152  br x17
0x4cdd381c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd3820   160  d63f03e0       constant
0x4cdd3824   164  d503201f       constant
0x4cdd3828   168  4cb06000       constant
0x4cdd382c   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd37d0  code target (STUB)  (0x4cd38080)
0x4cdd37e0  constant pool (size 16)
0x4cdd3810  runtime entry
0x4cdd381c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd3780     0  tbz w0, #0, #+0x1c (addr 0x4cdd379c)
0x4cdd3784     4  ldur x16, [x0, #-1]
0x4cdd3788     8  ldr x17, [x26, #120]
0x4cdd378c    12  cmp x16, x17
0x4cdd3790    16  b.ne #+0x60 (addr 0x4cdd37f0)
0x4cdd3794    20  ldur d0, [x0, #7]
0x4cdd3798    24  b #+0x8 (addr 0x4cdd37a0)
0x4cdd379c    28  scvtf d0, x0, #32
0x4cdd37a0    32  stur d0, [x1, #87]
0x4cdd37a4    36  stur x5, [x1, #-1]
0x4cdd37a8    40  tbz w5, #0, #+0x34 (addr 0x4cdd37dc)
0x4cdd37ac    44  sub x2, x1, #0x1 (1)
0x4cdd37b0    48  and x5, x5, #0xfffffffffff00000
0x4cdd37b4    52  ldr x5, [x5, #8]
0x4cdd37b8    56  tbz w5, #1, #+0x24 (addr 0x4cdd37dc)
0x4cdd37bc    60  and x5, x1, #0xfffffffffff00000
0x4cdd37c0    64  ldr x5, [x5, #8]
0x4cdd37c4    68  tbz w5, #2, #+0x18 (addr 0x4cdd37dc)
0x4cdd37c8    72  sub csp, jssp, #0x8 (8)
0x4cdd37cc    76  str lr, [jssp, #-8]!
0x4cdd37d0    80  ldr x16, pc+24 (addr 0x000000004cdd37e8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd37d4    84  blr x16
0x4cdd37d8    88  ldr lr, [jssp], #8
0x4cdd37dc    92  ret
0x4cdd37e0    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd37e4   100  d63f03e0       constant
0x4cdd37e8   104  4cd38080       constant
0x4cdd37ec   108  00000000       constant
0x4cdd37f0   112  movz x16, #0x0
0x4cdd37f4   116  sub csp, jssp, #0x10 (16)
0x4cdd37f8   120  stp fp, lr, [jssp, #-16]!
0x4cdd37fc   124  bl #+0x4 (addr 0x4cdd3800)
0x4cdd3800   128  movz x17, #0xa00000000
0x4cdd3804   132  sub csp, jssp, #0x10 (16)
0x4cdd3808   136  stp x17, cp, [jssp, #-16]!
0x4cdd380c   140  add fp, jssp, #0x10 (16)
0x4cdd3810   144  ldr x17, pc+24 (addr 0x000000004cdd3828)    ;; lazy deoptimization bailout 0
0x4cdd3814   148  add x17, x17, x16
0x4cdd3818   152  br x17
0x4cdd381c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd3820   160  d63f03e0       constant
0x4cdd3824   164  d503201f       constant
0x4cdd3828   168  4cb06000       constant
0x4cdd382c   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd37d0  code target (STUB)  (0x4cd38080)
0x4cdd37e0  constant pool (size 16)
0x4cdd3810  runtime entry
0x4cdd381c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = size
compiler = unknown
Instructions (size = 152)
0x4cdd38a0     0  sub csp, jssp, #0x8 (8)
0x4cdd38a4     4  str x3, [jssp, #-8]!
0x4cdd38a8     8  sub csp, jssp, #0x8 (8)
0x4cdd38ac    12  str x4, [jssp, #-8]!
0x4cdd38b0    16  ldr x3, pc+88 (addr 0x000000004cdd3908)    ;; object: 0xffffaa134a59 Cell for 0
0x4cdd38b4    20  ldur x3, [x3, #7]
0x4cdd38b8    24  cmp x3, #0x0 (0)
0x4cdd38bc    28  b.ne #+0x2c (addr 0x4cdd38e8)
0x4cdd38c0    32  ldr x5, pc+80 (addr 0x000000004cdd3910)    ;; object: 0xffffaa135229 WeakCell for 0x2a835dc9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdd38c4    36  ldur x5, [x5, #7]
0x4cdd38c8    40  tbz w5, #0, #+0x20 (addr 0x4cdd38e8)
0x4cdd38cc    44  ldursw x4, [x5, #15]
0x4cdd38d0    48  tbnz w4, #23, #+0x18 (addr 0x4cdd38e8)
0x4cdd38d4    52  ldr x4, [jssp], #8
0x4cdd38d8    56  ldr x3, [jssp], #8
0x4cdd38dc    60  ldr x2, pc+60 (addr 0x000000004cdd3918)    ;; object: 0x21089861 <String[4]: size>
0x4cdd38e0    64  ldr x16, pc+64 (addr 0x000000004cdd3920)    ;; code: HANDLER, StoreTransitionStub, minor: 194571
0x4cdd38e4    68  br x16
0x4cdd38e8    72  ldr x2, pc+64 (addr 0x000000004cdd3928)    ;; object: 0x21089861 <String[4]: size>
0x4cdd38ec    76  ldr x4, [jssp], #8
0x4cdd38f0    80  ldr x3, [jssp], #8
0x4cdd38f4    84  ldr x16, pc+60 (addr 0x000000004cdd3930)    ;; code: BUILTIN
0x4cdd38f8    88  br x16
0x4cdd38fc    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdd3900    96  d63f03e0       constant
0x4cdd3904   100  d503201f       constant
0x4cdd3908   104  aa134a59       constant
0x4cdd390c   108  0000ffff       constant
0x4cdd3910   112  aa135229       constant
0x4cdd3914   116  0000ffff       constant
0x4cdd3918   120  21089861       constant
0x4cdd391c   124  00000000       constant
0x4cdd3920   128  4cdd3780       constant
0x4cdd3924   132  00000000       constant
0x4cdd3928   136  21089861       constant
0x4cdd392c   140  00000000       constant
0x4cdd3930   144  4cd22420       constant
0x4cdd3934   148  00000000       constant


RelocInfo (size = 12)
0x4cdd38b0  embedded object  (0xffffaa134a59 Cell for 0)
0x4cdd38c0  embedded object  (0xffffaa135229 WeakCell for 0x2a835dc9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdd38dc  embedded object  (0x21089861 <String[4]: size>)
0x4cdd38e0  code target (HANDLER)  (0x4cdd3780)
0x4cdd38e8  embedded object  (0x21089861 <String[4]: size>)
0x4cdd38f4  code target (BUILTIN)  (0x4cd22420)
0x4cdd38fc  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd39a0     0  tbz w0, #0, #+0x1c (addr 0x4cdd39bc)
0x4cdd39a4     4  ldur x16, [x0, #-1]
0x4cdd39a8     8  ldr x17, [x26, #120]
0x4cdd39ac    12  cmp x16, x17
0x4cdd39b0    16  b.ne #+0x60 (addr 0x4cdd3a10)
0x4cdd39b4    20  ldur d0, [x0, #7]
0x4cdd39b8    24  b #+0x8 (addr 0x4cdd39c0)
0x4cdd39bc    28  scvtf d0, x0, #32
0x4cdd39c0    32  stur d0, [x1, #95]
0x4cdd39c4    36  stur x5, [x1, #-1]
0x4cdd39c8    40  tbz w5, #0, #+0x34 (addr 0x4cdd39fc)
0x4cdd39cc    44  sub x2, x1, #0x1 (1)
0x4cdd39d0    48  and x5, x5, #0xfffffffffff00000
0x4cdd39d4    52  ldr x5, [x5, #8]
0x4cdd39d8    56  tbz w5, #1, #+0x24 (addr 0x4cdd39fc)
0x4cdd39dc    60  and x5, x1, #0xfffffffffff00000
0x4cdd39e0    64  ldr x5, [x5, #8]
0x4cdd39e4    68  tbz w5, #2, #+0x18 (addr 0x4cdd39fc)
0x4cdd39e8    72  sub csp, jssp, #0x8 (8)
0x4cdd39ec    76  str lr, [jssp, #-8]!
0x4cdd39f0    80  ldr x16, pc+24 (addr 0x000000004cdd3a08)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd39f4    84  blr x16
0x4cdd39f8    88  ldr lr, [jssp], #8
0x4cdd39fc    92  ret
0x4cdd3a00    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd3a04   100  d63f03e0       constant
0x4cdd3a08   104  4cd38080       constant
0x4cdd3a0c   108  00000000       constant
0x4cdd3a10   112  movz x16, #0x0
0x4cdd3a14   116  sub csp, jssp, #0x10 (16)
0x4cdd3a18   120  stp fp, lr, [jssp, #-16]!
0x4cdd3a1c   124  bl #+0x4 (addr 0x4cdd3a20)
0x4cdd3a20   128  movz x17, #0xa00000000
0x4cdd3a24   132  sub csp, jssp, #0x10 (16)
0x4cdd3a28   136  stp x17, cp, [jssp, #-16]!
0x4cdd3a2c   140  add fp, jssp, #0x10 (16)
0x4cdd3a30   144  ldr x17, pc+24 (addr 0x000000004cdd3a48)    ;; lazy deoptimization bailout 0
0x4cdd3a34   148  add x17, x17, x16
0x4cdd3a38   152  br x17
0x4cdd3a3c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd3a40   160  d63f03e0       constant
0x4cdd3a44   164  d503201f       constant
0x4cdd3a48   168  4cb06000       constant
0x4cdd3a4c   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd39f0  code target (STUB)  (0x4cd38080)
0x4cdd3a00  constant pool (size 16)
0x4cdd3a30  runtime entry
0x4cdd3a3c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 184)
0x4cdd39a0     0  tbz w0, #0, #+0x1c (addr 0x4cdd39bc)
0x4cdd39a4     4  ldur x16, [x0, #-1]
0x4cdd39a8     8  ldr x17, [x26, #120]
0x4cdd39ac    12  cmp x16, x17
0x4cdd39b0    16  b.ne #+0x60 (addr 0x4cdd3a10)
0x4cdd39b4    20  ldur d0, [x0, #7]
0x4cdd39b8    24  b #+0x8 (addr 0x4cdd39c0)
0x4cdd39bc    28  scvtf d0, x0, #32
0x4cdd39c0    32  stur d0, [x1, #95]
0x4cdd39c4    36  stur x5, [x1, #-1]
0x4cdd39c8    40  tbz w5, #0, #+0x34 (addr 0x4cdd39fc)
0x4cdd39cc    44  sub x2, x1, #0x1 (1)
0x4cdd39d0    48  and x5, x5, #0xfffffffffff00000
0x4cdd39d4    52  ldr x5, [x5, #8]
0x4cdd39d8    56  tbz w5, #1, #+0x24 (addr 0x4cdd39fc)
0x4cdd39dc    60  and x5, x1, #0xfffffffffff00000
0x4cdd39e0    64  ldr x5, [x5, #8]
0x4cdd39e4    68  tbz w5, #2, #+0x18 (addr 0x4cdd39fc)
0x4cdd39e8    72  sub csp, jssp, #0x8 (8)
0x4cdd39ec    76  str lr, [jssp, #-8]!
0x4cdd39f0    80  ldr x16, pc+24 (addr 0x000000004cdd3a08)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd39f4    84  blr x16
0x4cdd39f8    88  ldr lr, [jssp], #8
0x4cdd39fc    92  ret
0x4cdd3a00    96  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdd3a04   100  d63f03e0       constant
0x4cdd3a08   104  4cd38080       constant
0x4cdd3a0c   108  00000000       constant
0x4cdd3a10   112  movz x16, #0x0
0x4cdd3a14   116  sub csp, jssp, #0x10 (16)
0x4cdd3a18   120  stp fp, lr, [jssp, #-16]!
0x4cdd3a1c   124  bl #+0x4 (addr 0x4cdd3a20)
0x4cdd3a20   128  movz x17, #0xa00000000
0x4cdd3a24   132  sub csp, jssp, #0x10 (16)
0x4cdd3a28   136  stp x17, cp, [jssp, #-16]!
0x4cdd3a2c   140  add fp, jssp, #0x10 (16)
0x4cdd3a30   144  ldr x17, pc+24 (addr 0x000000004cdd3a48)    ;; lazy deoptimization bailout 0
0x4cdd3a34   148  add x17, x17, x16
0x4cdd3a38   152  br x17
0x4cdd3a3c   156  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd3a40   160  d63f03e0       constant
0x4cdd3a44   164  d503201f       constant
0x4cdd3a48   168  4cb06000       constant
0x4cdd3a4c   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 17)
0x4cdd39f0  code target (STUB)  (0x4cd38080)
0x4cdd3a00  constant pool (size 16)
0x4cdd3a30  runtime entry
0x4cdd3a3c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = blocks
compiler = unknown
Instructions (size = 152)
0x4cdd3ac0     0  sub csp, jssp, #0x8 (8)
0x4cdd3ac4     4  str x3, [jssp, #-8]!
0x4cdd3ac8     8  sub csp, jssp, #0x8 (8)
0x4cdd3acc    12  str x4, [jssp, #-8]!
0x4cdd3ad0    16  ldr x3, pc+88 (addr 0x000000004cdd3b28)    ;; object: 0xffffaa134a59 Cell for 0
0x4cdd3ad4    20  ldur x3, [x3, #7]
0x4cdd3ad8    24  cmp x3, #0x0 (0)
0x4cdd3adc    28  b.ne #+0x2c (addr 0x4cdd3b08)
0x4cdd3ae0    32  ldr x5, pc+80 (addr 0x000000004cdd3b30)    ;; object: 0xffffaa135321 WeakCell for 0x2a835e21 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdd3ae4    36  ldur x5, [x5, #7]
0x4cdd3ae8    40  tbz w5, #0, #+0x20 (addr 0x4cdd3b08)
0x4cdd3aec    44  ldursw x4, [x5, #15]
0x4cdd3af0    48  tbnz w4, #23, #+0x18 (addr 0x4cdd3b08)
0x4cdd3af4    52  ldr x4, [jssp], #8
0x4cdd3af8    56  ldr x3, [jssp], #8
0x4cdd3afc    60  ldr x2, pc+60 (addr 0x000000004cdd3b38)    ;; object: 0xffffaa10d189 <String[6]: blocks>
0x4cdd3b00    64  ldr x16, pc+64 (addr 0x000000004cdd3b40)    ;; code: HANDLER, StoreTransitionStub, minor: 194572
0x4cdd3b04    68  br x16
0x4cdd3b08    72  ldr x2, pc+64 (addr 0x000000004cdd3b48)    ;; object: 0xffffaa10d189 <String[6]: blocks>
0x4cdd3b0c    76  ldr x4, [jssp], #8
0x4cdd3b10    80  ldr x3, [jssp], #8
0x4cdd3b14    84  ldr x16, pc+60 (addr 0x000000004cdd3b50)    ;; code: BUILTIN
0x4cdd3b18    88  br x16
0x4cdd3b1c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdd3b20    96  d63f03e0       constant
0x4cdd3b24   100  d503201f       constant
0x4cdd3b28   104  aa134a59       constant
0x4cdd3b2c   108  0000ffff       constant
0x4cdd3b30   112  aa135321       constant
0x4cdd3b34   116  0000ffff       constant
0x4cdd3b38   120  aa10d189       constant
0x4cdd3b3c   124  0000ffff       constant
0x4cdd3b40   128  4cdd39a0       constant
0x4cdd3b44   132  00000000       constant
0x4cdd3b48   136  aa10d189       constant
0x4cdd3b4c   140  0000ffff       constant
0x4cdd3b50   144  4cd22420       constant
0x4cdd3b54   148  00000000       constant


RelocInfo (size = 12)
0x4cdd3ad0  embedded object  (0xffffaa134a59 Cell for 0)
0x4cdd3ae0  embedded object  (0xffffaa135321 WeakCell for 0x2a835e21 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdd3afc  embedded object  (0xffffaa10d189 <String[6]: blocks>)
0x4cdd3b00  code target (HANDLER)  (0x4cdd39a0)
0x4cdd3b08  embedded object  (0xffffaa10d189 <String[6]: blocks>)
0x4cdd3b14  code target (BUILTIN)  (0x4cd22420)
0x4cdd3b1c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdd3bc0     0  tbz w0, #0, #+0x90 (addr 0x4cdd3c50)
0x4cdd3bc4     4  mov x2, x0
0x4cdd3bc8     8  stur x2, [x1, #103]
0x4cdd3bcc    12  add x3, x1, #0x67 (103)
0x4cdd3bd0    16  and x2, x2, #0xfffffffffff00000
0x4cdd3bd4    20  ldr x2, [x2, #8]
0x4cdd3bd8    24  tbz w2, #1, #+0x24 (addr 0x4cdd3bfc)
0x4cdd3bdc    28  and x2, x1, #0xfffffffffff00000
0x4cdd3be0    32  ldr x2, [x2, #8]
0x4cdd3be4    36  tbz w2, #2, #+0x18 (addr 0x4cdd3bfc)
0x4cdd3be8    40  sub csp, jssp, #0x8 (8)
0x4cdd3bec    44  str lr, [jssp, #-8]!
0x4cdd3bf0    48  ldr x16, pc+80 (addr 0x000000004cdd3c40)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdd3bf4    52  blr x16
0x4cdd3bf8    56  ldr lr, [jssp], #8
0x4cdd3bfc    60  stur x5, [x1, #-1]
0x4cdd3c00    64  tbz w5, #0, #+0x34 (addr 0x4cdd3c34)
0x4cdd3c04    68  sub x2, x1, #0x1 (1)
0x4cdd3c08    72  and x5, x5, #0xfffffffffff00000
0x4cdd3c0c    76  ldr x5, [x5, #8]
0x4cdd3c10    80  tbz w5, #1, #+0x24 (addr 0x4cdd3c34)
0x4cdd3c14    84  and x5, x1, #0xfffffffffff00000
0x4cdd3c18    88  ldr x5, [x5, #8]
0x4cdd3c1c    92  tbz w5, #2, #+0x18 (addr 0x4cdd3c34)
0x4cdd3c20    96  sub csp, jssp, #0x8 (8)
0x4cdd3c24   100  str lr, [jssp, #-8]!
0x4cdd3c28   104  ldr x16, pc+32 (addr 0x000000004cdd3c48)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd3c2c   108  blr x16
0x4cdd3c30   112  ldr lr, [jssp], #8
0x4cdd3c34   116  ret
0x4cdd3c38   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdd3c3c   124  d63f03e0       constant
0x4cdd3c40   128  4cd170c0       constant
0x4cdd3c44   132  00000000       constant
0x4cdd3c48   136  4cd38080       constant
0x4cdd3c4c   140  00000000       constant
0x4cdd3c50   144  movz x16, #0x0
0x4cdd3c54   148  sub csp, jssp, #0x10 (16)
0x4cdd3c58   152  stp fp, lr, [jssp, #-16]!
0x4cdd3c5c   156  bl #+0x4 (addr 0x4cdd3c60)
0x4cdd3c60   160  movz x17, #0xa00000000
0x4cdd3c64   164  sub csp, jssp, #0x10 (16)
0x4cdd3c68   168  stp x17, cp, [jssp, #-16]!
0x4cdd3c6c   172  add fp, jssp, #0x10 (16)
0x4cdd3c70   176  ldr x17, pc+24 (addr 0x000000004cdd3c88)    ;; lazy deoptimization bailout 0
0x4cdd3c74   180  add x17, x17, x16
0x4cdd3c78   184  br x17
0x4cdd3c7c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd3c80   192  d63f03e0       constant
0x4cdd3c84   196  d503201f       constant
0x4cdd3c88   200  4cb06000       constant
0x4cdd3c8c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdd3bf0  code target (STUB)  (0x4cd170c0)
0x4cdd3c28  code target (STUB)  (0x4cd38080)
0x4cdd3c38  constant pool (size 24)
0x4cdd3c70  runtime entry
0x4cdd3c7c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdd3bc0     0  tbz w0, #0, #+0x90 (addr 0x4cdd3c50)
0x4cdd3bc4     4  mov x2, x0
0x4cdd3bc8     8  stur x2, [x1, #103]
0x4cdd3bcc    12  add x3, x1, #0x67 (103)
0x4cdd3bd0    16  and x2, x2, #0xfffffffffff00000
0x4cdd3bd4    20  ldr x2, [x2, #8]
0x4cdd3bd8    24  tbz w2, #1, #+0x24 (addr 0x4cdd3bfc)
0x4cdd3bdc    28  and x2, x1, #0xfffffffffff00000
0x4cdd3be0    32  ldr x2, [x2, #8]
0x4cdd3be4    36  tbz w2, #2, #+0x18 (addr 0x4cdd3bfc)
0x4cdd3be8    40  sub csp, jssp, #0x8 (8)
0x4cdd3bec    44  str lr, [jssp, #-8]!
0x4cdd3bf0    48  ldr x16, pc+80 (addr 0x000000004cdd3c40)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdd3bf4    52  blr x16
0x4cdd3bf8    56  ldr lr, [jssp], #8
0x4cdd3bfc    60  stur x5, [x1, #-1]
0x4cdd3c00    64  tbz w5, #0, #+0x34 (addr 0x4cdd3c34)
0x4cdd3c04    68  sub x2, x1, #0x1 (1)
0x4cdd3c08    72  and x5, x5, #0xfffffffffff00000
0x4cdd3c0c    76  ldr x5, [x5, #8]
0x4cdd3c10    80  tbz w5, #1, #+0x24 (addr 0x4cdd3c34)
0x4cdd3c14    84  and x5, x1, #0xfffffffffff00000
0x4cdd3c18    88  ldr x5, [x5, #8]
0x4cdd3c1c    92  tbz w5, #2, #+0x18 (addr 0x4cdd3c34)
0x4cdd3c20    96  sub csp, jssp, #0x8 (8)
0x4cdd3c24   100  str lr, [jssp, #-8]!
0x4cdd3c28   104  ldr x16, pc+32 (addr 0x000000004cdd3c48)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd3c2c   108  blr x16
0x4cdd3c30   112  ldr lr, [jssp], #8
0x4cdd3c34   116  ret
0x4cdd3c38   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdd3c3c   124  d63f03e0       constant
0x4cdd3c40   128  4cd170c0       constant
0x4cdd3c44   132  00000000       constant
0x4cdd3c48   136  4cd38080       constant
0x4cdd3c4c   140  00000000       constant
0x4cdd3c50   144  movz x16, #0x0
0x4cdd3c54   148  sub csp, jssp, #0x10 (16)
0x4cdd3c58   152  stp fp, lr, [jssp, #-16]!
0x4cdd3c5c   156  bl #+0x4 (addr 0x4cdd3c60)
0x4cdd3c60   160  movz x17, #0xa00000000
0x4cdd3c64   164  sub csp, jssp, #0x10 (16)
0x4cdd3c68   168  stp x17, cp, [jssp, #-16]!
0x4cdd3c6c   172  add fp, jssp, #0x10 (16)
0x4cdd3c70   176  ldr x17, pc+24 (addr 0x000000004cdd3c88)    ;; lazy deoptimization bailout 0
0x4cdd3c74   180  add x17, x17, x16
0x4cdd3c78   184  br x17
0x4cdd3c7c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd3c80   192  d63f03e0       constant
0x4cdd3c84   196  d503201f       constant
0x4cdd3c88   200  4cb06000       constant
0x4cdd3c8c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdd3bf0  code target (STUB)  (0x4cd170c0)
0x4cdd3c28  code target (STUB)  (0x4cd38080)
0x4cdd3c38  constant pool (size 24)
0x4cdd3c70  runtime entry
0x4cdd3c7c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = atime
compiler = unknown
Instructions (size = 184)
0x4cdd3d00     0  sub csp, jssp, #0x8 (8)
0x4cdd3d04     4  str x3, [jssp, #-8]!
0x4cdd3d08     8  sub csp, jssp, #0x8 (8)
0x4cdd3d0c    12  str x4, [jssp, #-8]!
0x4cdd3d10    16  ldr x3, pc+112 (addr 0x000000004cdd3d80)    ;; object: 0xffffaa134a59 Cell for 0
0x4cdd3d14    20  ldur x3, [x3, #7]
0x4cdd3d18    24  cmp x3, #0x0 (0)
0x4cdd3d1c    28  b.ne #+0x44 (addr 0x4cdd3d60)
0x4cdd3d20    32  tbz w0, #0, #+0x40 (addr 0x4cdd3d60)
0x4cdd3d24    36  ldur x3, [x0, #-1]
0x4cdd3d28    40  ldr x4, pc+96 (addr 0x000000004cdd3d88)    ;; object: 0xffffaa134079 WeakCell for 0x2a807e29 <Map(FAST_HOLEY_SMI_ELEMENTS)>
0x4cdd3d2c    44  ldur x4, [x4, #7]
0x4cdd3d30    48  cmp x3, x4
0x4cdd3d34    52  b.ne #+0x2c (addr 0x4cdd3d60)
0x4cdd3d38    56  ldr x5, pc+88 (addr 0x000000004cdd3d90)    ;; object: 0xffffaa135419 WeakCell for 0x2a835e79 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdd3d3c    60  ldur x5, [x5, #7]
0x4cdd3d40    64  tbz w5, #0, #+0x20 (addr 0x4cdd3d60)
0x4cdd3d44    68  ldursw x4, [x5, #15]
0x4cdd3d48    72  tbnz w4, #23, #+0x18 (addr 0x4cdd3d60)
0x4cdd3d4c    76  ldr x4, [jssp], #8
0x4cdd3d50    80  ldr x3, [jssp], #8
0x4cdd3d54    84  ldr x2, pc+68 (addr 0x000000004cdd3d98)    ;; object: 0xffffaa10d249 <String[5]: atime>
0x4cdd3d58    88  ldr x16, pc+72 (addr 0x000000004cdd3da0)    ;; code: HANDLER, StoreTransitionStub, minor: 198669
0x4cdd3d5c    92  br x16
0x4cdd3d60    96  ldr x2, pc+72 (addr 0x000000004cdd3da8)    ;; object: 0xffffaa10d249 <String[5]: atime>
0x4cdd3d64   100  ldr x4, [jssp], #8
0x4cdd3d68   104  ldr x3, [jssp], #8
0x4cdd3d6c   108  ldr x16, pc+68 (addr 0x000000004cdd3db0)    ;; code: BUILTIN
0x4cdd3d70   112  br x16
0x4cdd3d74   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdd3d78   120  d63f03e0       constant
0x4cdd3d7c   124  d503201f       constant
0x4cdd3d80   128  aa134a59       constant
0x4cdd3d84   132  0000ffff       constant
0x4cdd3d88   136  aa134079       constant
0x4cdd3d8c   140  0000ffff       constant
0x4cdd3d90   144  aa135419       constant
0x4cdd3d94   148  0000ffff       constant
0x4cdd3d98   152  aa10d249       constant
0x4cdd3d9c   156  0000ffff       constant
0x4cdd3da0   160  4cdd3bc0       constant
0x4cdd3da4   164  00000000       constant
0x4cdd3da8   168  aa10d249       constant
0x4cdd3dac   172  0000ffff       constant
0x4cdd3db0   176  4cd22420       constant
0x4cdd3db4   180  00000000       constant


RelocInfo (size = 13)
0x4cdd3d10  embedded object  (0xffffaa134a59 Cell for 0)
0x4cdd3d28  embedded object  (0xffffaa134079 WeakCell for 0x2a807e29 <Map(FAST_HOLEY_SMI_ELEMENTS)>)
0x4cdd3d38  embedded object  (0xffffaa135419 WeakCell for 0x2a835e79 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdd3d54  embedded object  (0xffffaa10d249 <String[5]: atime>)
0x4cdd3d58  code target (HANDLER)  (0x4cdd3bc0)
0x4cdd3d60  embedded object  (0xffffaa10d249 <String[5]: atime>)
0x4cdd3d6c  code target (BUILTIN)  (0x4cd22420)
0x4cdd3d74  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdd3e20     0  tbz w0, #0, #+0x90 (addr 0x4cdd3eb0)
0x4cdd3e24     4  mov x2, x0
0x4cdd3e28     8  stur x2, [x1, #111]
0x4cdd3e2c    12  add x3, x1, #0x6f (111)
0x4cdd3e30    16  and x2, x2, #0xfffffffffff00000
0x4cdd3e34    20  ldr x2, [x2, #8]
0x4cdd3e38    24  tbz w2, #1, #+0x24 (addr 0x4cdd3e5c)
0x4cdd3e3c    28  and x2, x1, #0xfffffffffff00000
0x4cdd3e40    32  ldr x2, [x2, #8]
0x4cdd3e44    36  tbz w2, #2, #+0x18 (addr 0x4cdd3e5c)
0x4cdd3e48    40  sub csp, jssp, #0x8 (8)
0x4cdd3e4c    44  str lr, [jssp, #-8]!
0x4cdd3e50    48  ldr x16, pc+80 (addr 0x000000004cdd3ea0)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdd3e54    52  blr x16
0x4cdd3e58    56  ldr lr, [jssp], #8
0x4cdd3e5c    60  stur x5, [x1, #-1]
0x4cdd3e60    64  tbz w5, #0, #+0x34 (addr 0x4cdd3e94)
0x4cdd3e64    68  sub x2, x1, #0x1 (1)
0x4cdd3e68    72  and x5, x5, #0xfffffffffff00000
0x4cdd3e6c    76  ldr x5, [x5, #8]
0x4cdd3e70    80  tbz w5, #1, #+0x24 (addr 0x4cdd3e94)
0x4cdd3e74    84  and x5, x1, #0xfffffffffff00000
0x4cdd3e78    88  ldr x5, [x5, #8]
0x4cdd3e7c    92  tbz w5, #2, #+0x18 (addr 0x4cdd3e94)
0x4cdd3e80    96  sub csp, jssp, #0x8 (8)
0x4cdd3e84   100  str lr, [jssp, #-8]!
0x4cdd3e88   104  ldr x16, pc+32 (addr 0x000000004cdd3ea8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd3e8c   108  blr x16
0x4cdd3e90   112  ldr lr, [jssp], #8
0x4cdd3e94   116  ret
0x4cdd3e98   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdd3e9c   124  d63f03e0       constant
0x4cdd3ea0   128  4cd170c0       constant
0x4cdd3ea4   132  00000000       constant
0x4cdd3ea8   136  4cd38080       constant
0x4cdd3eac   140  00000000       constant
0x4cdd3eb0   144  movz x16, #0x0
0x4cdd3eb4   148  sub csp, jssp, #0x10 (16)
0x4cdd3eb8   152  stp fp, lr, [jssp, #-16]!
0x4cdd3ebc   156  bl #+0x4 (addr 0x4cdd3ec0)
0x4cdd3ec0   160  movz x17, #0xa00000000
0x4cdd3ec4   164  sub csp, jssp, #0x10 (16)
0x4cdd3ec8   168  stp x17, cp, [jssp, #-16]!
0x4cdd3ecc   172  add fp, jssp, #0x10 (16)
0x4cdd3ed0   176  ldr x17, pc+24 (addr 0x000000004cdd3ee8)    ;; lazy deoptimization bailout 0
0x4cdd3ed4   180  add x17, x17, x16
0x4cdd3ed8   184  br x17
0x4cdd3edc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd3ee0   192  d63f03e0       constant
0x4cdd3ee4   196  d503201f       constant
0x4cdd3ee8   200  4cb06000       constant
0x4cdd3eec   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdd3e50  code target (STUB)  (0x4cd170c0)
0x4cdd3e88  code target (STUB)  (0x4cd38080)
0x4cdd3e98  constant pool (size 24)
0x4cdd3ed0  runtime entry
0x4cdd3edc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdd3e20     0  tbz w0, #0, #+0x90 (addr 0x4cdd3eb0)
0x4cdd3e24     4  mov x2, x0
0x4cdd3e28     8  stur x2, [x1, #111]
0x4cdd3e2c    12  add x3, x1, #0x6f (111)
0x4cdd3e30    16  and x2, x2, #0xfffffffffff00000
0x4cdd3e34    20  ldr x2, [x2, #8]
0x4cdd3e38    24  tbz w2, #1, #+0x24 (addr 0x4cdd3e5c)
0x4cdd3e3c    28  and x2, x1, #0xfffffffffff00000
0x4cdd3e40    32  ldr x2, [x2, #8]
0x4cdd3e44    36  tbz w2, #2, #+0x18 (addr 0x4cdd3e5c)
0x4cdd3e48    40  sub csp, jssp, #0x8 (8)
0x4cdd3e4c    44  str lr, [jssp, #-8]!
0x4cdd3e50    48  ldr x16, pc+80 (addr 0x000000004cdd3ea0)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdd3e54    52  blr x16
0x4cdd3e58    56  ldr lr, [jssp], #8
0x4cdd3e5c    60  stur x5, [x1, #-1]
0x4cdd3e60    64  tbz w5, #0, #+0x34 (addr 0x4cdd3e94)
0x4cdd3e64    68  sub x2, x1, #0x1 (1)
0x4cdd3e68    72  and x5, x5, #0xfffffffffff00000
0x4cdd3e6c    76  ldr x5, [x5, #8]
0x4cdd3e70    80  tbz w5, #1, #+0x24 (addr 0x4cdd3e94)
0x4cdd3e74    84  and x5, x1, #0xfffffffffff00000
0x4cdd3e78    88  ldr x5, [x5, #8]
0x4cdd3e7c    92  tbz w5, #2, #+0x18 (addr 0x4cdd3e94)
0x4cdd3e80    96  sub csp, jssp, #0x8 (8)
0x4cdd3e84   100  str lr, [jssp, #-8]!
0x4cdd3e88   104  ldr x16, pc+32 (addr 0x000000004cdd3ea8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd3e8c   108  blr x16
0x4cdd3e90   112  ldr lr, [jssp], #8
0x4cdd3e94   116  ret
0x4cdd3e98   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdd3e9c   124  d63f03e0       constant
0x4cdd3ea0   128  4cd170c0       constant
0x4cdd3ea4   132  00000000       constant
0x4cdd3ea8   136  4cd38080       constant
0x4cdd3eac   140  00000000       constant
0x4cdd3eb0   144  movz x16, #0x0
0x4cdd3eb4   148  sub csp, jssp, #0x10 (16)
0x4cdd3eb8   152  stp fp, lr, [jssp, #-16]!
0x4cdd3ebc   156  bl #+0x4 (addr 0x4cdd3ec0)
0x4cdd3ec0   160  movz x17, #0xa00000000
0x4cdd3ec4   164  sub csp, jssp, #0x10 (16)
0x4cdd3ec8   168  stp x17, cp, [jssp, #-16]!
0x4cdd3ecc   172  add fp, jssp, #0x10 (16)
0x4cdd3ed0   176  ldr x17, pc+24 (addr 0x000000004cdd3ee8)    ;; lazy deoptimization bailout 0
0x4cdd3ed4   180  add x17, x17, x16
0x4cdd3ed8   184  br x17
0x4cdd3edc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd3ee0   192  d63f03e0       constant
0x4cdd3ee4   196  d503201f       constant
0x4cdd3ee8   200  4cb06000       constant
0x4cdd3eec   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdd3e50  code target (STUB)  (0x4cd170c0)
0x4cdd3e88  code target (STUB)  (0x4cd38080)
0x4cdd3e98  constant pool (size 24)
0x4cdd3ed0  runtime entry
0x4cdd3edc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = mtime
compiler = unknown
Instructions (size = 184)
0x4cdd3f60     0  sub csp, jssp, #0x8 (8)
0x4cdd3f64     4  str x3, [jssp, #-8]!
0x4cdd3f68     8  sub csp, jssp, #0x8 (8)
0x4cdd3f6c    12  str x4, [jssp, #-8]!
0x4cdd3f70    16  ldr x3, pc+112 (addr 0x000000004cdd3fe0)    ;; object: 0xffffaa134a59 Cell for 0
0x4cdd3f74    20  ldur x3, [x3, #7]
0x4cdd3f78    24  cmp x3, #0x0 (0)
0x4cdd3f7c    28  b.ne #+0x44 (addr 0x4cdd3fc0)
0x4cdd3f80    32  tbz w0, #0, #+0x40 (addr 0x4cdd3fc0)
0x4cdd3f84    36  ldur x3, [x0, #-1]
0x4cdd3f88    40  ldr x4, pc+96 (addr 0x000000004cdd3fe8)    ;; object: 0xffffaa134079 WeakCell for 0x2a807e29 <Map(FAST_HOLEY_SMI_ELEMENTS)>
0x4cdd3f8c    44  ldur x4, [x4, #7]
0x4cdd3f90    48  cmp x3, x4
0x4cdd3f94    52  b.ne #+0x2c (addr 0x4cdd3fc0)
0x4cdd3f98    56  ldr x5, pc+88 (addr 0x000000004cdd3ff0)    ;; object: 0xffffaa135509 WeakCell for 0x2a835ed1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdd3f9c    60  ldur x5, [x5, #7]
0x4cdd3fa0    64  tbz w5, #0, #+0x20 (addr 0x4cdd3fc0)
0x4cdd3fa4    68  ldursw x4, [x5, #15]
0x4cdd3fa8    72  tbnz w4, #23, #+0x18 (addr 0x4cdd3fc0)
0x4cdd3fac    76  ldr x4, [jssp], #8
0x4cdd3fb0    80  ldr x3, [jssp], #8
0x4cdd3fb4    84  ldr x2, pc+68 (addr 0x000000004cdd3ff8)    ;; object: 0xffffaa10d269 <String[5]: mtime>
0x4cdd3fb8    88  ldr x16, pc+72 (addr 0x000000004cdd4000)    ;; code: HANDLER, StoreTransitionStub, minor: 198670
0x4cdd3fbc    92  br x16
0x4cdd3fc0    96  ldr x2, pc+72 (addr 0x000000004cdd4008)    ;; object: 0xffffaa10d269 <String[5]: mtime>
0x4cdd3fc4   100  ldr x4, [jssp], #8
0x4cdd3fc8   104  ldr x3, [jssp], #8
0x4cdd3fcc   108  ldr x16, pc+68 (addr 0x000000004cdd4010)    ;; code: BUILTIN
0x4cdd3fd0   112  br x16
0x4cdd3fd4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdd3fd8   120  d63f03e0       constant
0x4cdd3fdc   124  d503201f       constant
0x4cdd3fe0   128  aa134a59       constant
0x4cdd3fe4   132  0000ffff       constant
0x4cdd3fe8   136  aa134079       constant
0x4cdd3fec   140  0000ffff       constant
0x4cdd3ff0   144  aa135509       constant
0x4cdd3ff4   148  0000ffff       constant
0x4cdd3ff8   152  aa10d269       constant
0x4cdd3ffc   156  0000ffff       constant
0x4cdd4000   160  4cdd3e20       constant
0x4cdd4004   164  00000000       constant
0x4cdd4008   168  aa10d269       constant
0x4cdd400c   172  0000ffff       constant
0x4cdd4010   176  4cd22420       constant
0x4cdd4014   180  00000000       constant


RelocInfo (size = 13)
0x4cdd3f70  embedded object  (0xffffaa134a59 Cell for 0)
0x4cdd3f88  embedded object  (0xffffaa134079 WeakCell for 0x2a807e29 <Map(FAST_HOLEY_SMI_ELEMENTS)>)
0x4cdd3f98  embedded object  (0xffffaa135509 WeakCell for 0x2a835ed1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdd3fb4  embedded object  (0xffffaa10d269 <String[5]: mtime>)
0x4cdd3fb8  code target (HANDLER)  (0x4cdd3e20)
0x4cdd3fc0  embedded object  (0xffffaa10d269 <String[5]: mtime>)
0x4cdd3fcc  code target (BUILTIN)  (0x4cd22420)
0x4cdd3fd4  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdd4080     0  tbz w0, #0, #+0x90 (addr 0x4cdd4110)
0x4cdd4084     4  mov x2, x0
0x4cdd4088     8  stur x2, [x1, #119]
0x4cdd408c    12  add x3, x1, #0x77 (119)
0x4cdd4090    16  and x2, x2, #0xfffffffffff00000
0x4cdd4094    20  ldr x2, [x2, #8]
0x4cdd4098    24  tbz w2, #1, #+0x24 (addr 0x4cdd40bc)
0x4cdd409c    28  and x2, x1, #0xfffffffffff00000
0x4cdd40a0    32  ldr x2, [x2, #8]
0x4cdd40a4    36  tbz w2, #2, #+0x18 (addr 0x4cdd40bc)
0x4cdd40a8    40  sub csp, jssp, #0x8 (8)
0x4cdd40ac    44  str lr, [jssp, #-8]!
0x4cdd40b0    48  ldr x16, pc+80 (addr 0x000000004cdd4100)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdd40b4    52  blr x16
0x4cdd40b8    56  ldr lr, [jssp], #8
0x4cdd40bc    60  stur x5, [x1, #-1]
0x4cdd40c0    64  tbz w5, #0, #+0x34 (addr 0x4cdd40f4)
0x4cdd40c4    68  sub x2, x1, #0x1 (1)
0x4cdd40c8    72  and x5, x5, #0xfffffffffff00000
0x4cdd40cc    76  ldr x5, [x5, #8]
0x4cdd40d0    80  tbz w5, #1, #+0x24 (addr 0x4cdd40f4)
0x4cdd40d4    84  and x5, x1, #0xfffffffffff00000
0x4cdd40d8    88  ldr x5, [x5, #8]
0x4cdd40dc    92  tbz w5, #2, #+0x18 (addr 0x4cdd40f4)
0x4cdd40e0    96  sub csp, jssp, #0x8 (8)
0x4cdd40e4   100  str lr, [jssp, #-8]!
0x4cdd40e8   104  ldr x16, pc+32 (addr 0x000000004cdd4108)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd40ec   108  blr x16
0x4cdd40f0   112  ldr lr, [jssp], #8
0x4cdd40f4   116  ret
0x4cdd40f8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdd40fc   124  d63f03e0       constant
0x4cdd4100   128  4cd170c0       constant
0x4cdd4104   132  00000000       constant
0x4cdd4108   136  4cd38080       constant
0x4cdd410c   140  00000000       constant
0x4cdd4110   144  movz x16, #0x0
0x4cdd4114   148  sub csp, jssp, #0x10 (16)
0x4cdd4118   152  stp fp, lr, [jssp, #-16]!
0x4cdd411c   156  bl #+0x4 (addr 0x4cdd4120)
0x4cdd4120   160  movz x17, #0xa00000000
0x4cdd4124   164  sub csp, jssp, #0x10 (16)
0x4cdd4128   168  stp x17, cp, [jssp, #-16]!
0x4cdd412c   172  add fp, jssp, #0x10 (16)
0x4cdd4130   176  ldr x17, pc+24 (addr 0x000000004cdd4148)    ;; lazy deoptimization bailout 0
0x4cdd4134   180  add x17, x17, x16
0x4cdd4138   184  br x17
0x4cdd413c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd4140   192  d63f03e0       constant
0x4cdd4144   196  d503201f       constant
0x4cdd4148   200  4cb06000       constant
0x4cdd414c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdd40b0  code target (STUB)  (0x4cd170c0)
0x4cdd40e8  code target (STUB)  (0x4cd38080)
0x4cdd40f8  constant pool (size 24)
0x4cdd4130  runtime entry
0x4cdd413c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdd4080     0  tbz w0, #0, #+0x90 (addr 0x4cdd4110)
0x4cdd4084     4  mov x2, x0
0x4cdd4088     8  stur x2, [x1, #119]
0x4cdd408c    12  add x3, x1, #0x77 (119)
0x4cdd4090    16  and x2, x2, #0xfffffffffff00000
0x4cdd4094    20  ldr x2, [x2, #8]
0x4cdd4098    24  tbz w2, #1, #+0x24 (addr 0x4cdd40bc)
0x4cdd409c    28  and x2, x1, #0xfffffffffff00000
0x4cdd40a0    32  ldr x2, [x2, #8]
0x4cdd40a4    36  tbz w2, #2, #+0x18 (addr 0x4cdd40bc)
0x4cdd40a8    40  sub csp, jssp, #0x8 (8)
0x4cdd40ac    44  str lr, [jssp, #-8]!
0x4cdd40b0    48  ldr x16, pc+80 (addr 0x000000004cdd4100)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdd40b4    52  blr x16
0x4cdd40b8    56  ldr lr, [jssp], #8
0x4cdd40bc    60  stur x5, [x1, #-1]
0x4cdd40c0    64  tbz w5, #0, #+0x34 (addr 0x4cdd40f4)
0x4cdd40c4    68  sub x2, x1, #0x1 (1)
0x4cdd40c8    72  and x5, x5, #0xfffffffffff00000
0x4cdd40cc    76  ldr x5, [x5, #8]
0x4cdd40d0    80  tbz w5, #1, #+0x24 (addr 0x4cdd40f4)
0x4cdd40d4    84  and x5, x1, #0xfffffffffff00000
0x4cdd40d8    88  ldr x5, [x5, #8]
0x4cdd40dc    92  tbz w5, #2, #+0x18 (addr 0x4cdd40f4)
0x4cdd40e0    96  sub csp, jssp, #0x8 (8)
0x4cdd40e4   100  str lr, [jssp, #-8]!
0x4cdd40e8   104  ldr x16, pc+32 (addr 0x000000004cdd4108)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd40ec   108  blr x16
0x4cdd40f0   112  ldr lr, [jssp], #8
0x4cdd40f4   116  ret
0x4cdd40f8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdd40fc   124  d63f03e0       constant
0x4cdd4100   128  4cd170c0       constant
0x4cdd4104   132  00000000       constant
0x4cdd4108   136  4cd38080       constant
0x4cdd410c   140  00000000       constant
0x4cdd4110   144  movz x16, #0x0
0x4cdd4114   148  sub csp, jssp, #0x10 (16)
0x4cdd4118   152  stp fp, lr, [jssp, #-16]!
0x4cdd411c   156  bl #+0x4 (addr 0x4cdd4120)
0x4cdd4120   160  movz x17, #0xa00000000
0x4cdd4124   164  sub csp, jssp, #0x10 (16)
0x4cdd4128   168  stp x17, cp, [jssp, #-16]!
0x4cdd412c   172  add fp, jssp, #0x10 (16)
0x4cdd4130   176  ldr x17, pc+24 (addr 0x000000004cdd4148)    ;; lazy deoptimization bailout 0
0x4cdd4134   180  add x17, x17, x16
0x4cdd4138   184  br x17
0x4cdd413c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd4140   192  d63f03e0       constant
0x4cdd4144   196  d503201f       constant
0x4cdd4148   200  4cb06000       constant
0x4cdd414c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdd40b0  code target (STUB)  (0x4cd170c0)
0x4cdd40e8  code target (STUB)  (0x4cd38080)
0x4cdd40f8  constant pool (size 24)
0x4cdd4130  runtime entry
0x4cdd413c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = ctime
compiler = unknown
Instructions (size = 184)
0x4cdd41c0     0  sub csp, jssp, #0x8 (8)
0x4cdd41c4     4  str x3, [jssp, #-8]!
0x4cdd41c8     8  sub csp, jssp, #0x8 (8)
0x4cdd41cc    12  str x4, [jssp, #-8]!
0x4cdd41d0    16  ldr x3, pc+112 (addr 0x000000004cdd4240)    ;; object: 0xffffaa134a59 Cell for 0
0x4cdd41d4    20  ldur x3, [x3, #7]
0x4cdd41d8    24  cmp x3, #0x0 (0)
0x4cdd41dc    28  b.ne #+0x44 (addr 0x4cdd4220)
0x4cdd41e0    32  tbz w0, #0, #+0x40 (addr 0x4cdd4220)
0x4cdd41e4    36  ldur x3, [x0, #-1]
0x4cdd41e8    40  ldr x4, pc+96 (addr 0x000000004cdd4248)    ;; object: 0xffffaa134079 WeakCell for 0x2a807e29 <Map(FAST_HOLEY_SMI_ELEMENTS)>
0x4cdd41ec    44  ldur x4, [x4, #7]
0x4cdd41f0    48  cmp x3, x4
0x4cdd41f4    52  b.ne #+0x2c (addr 0x4cdd4220)
0x4cdd41f8    56  ldr x5, pc+88 (addr 0x000000004cdd4250)    ;; object: 0xffffaa1355f9 WeakCell for 0x2a835f29 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdd41fc    60  ldur x5, [x5, #7]
0x4cdd4200    64  tbz w5, #0, #+0x20 (addr 0x4cdd4220)
0x4cdd4204    68  ldursw x4, [x5, #15]
0x4cdd4208    72  tbnz w4, #23, #+0x18 (addr 0x4cdd4220)
0x4cdd420c    76  ldr x4, [jssp], #8
0x4cdd4210    80  ldr x3, [jssp], #8
0x4cdd4214    84  ldr x2, pc+68 (addr 0x000000004cdd4258)    ;; object: 0xffffaa10d289 <String[5]: ctime>
0x4cdd4218    88  ldr x16, pc+72 (addr 0x000000004cdd4260)    ;; code: HANDLER, StoreTransitionStub, minor: 198671
0x4cdd421c    92  br x16
0x4cdd4220    96  ldr x2, pc+72 (addr 0x000000004cdd4268)    ;; object: 0xffffaa10d289 <String[5]: ctime>
0x4cdd4224   100  ldr x4, [jssp], #8
0x4cdd4228   104  ldr x3, [jssp], #8
0x4cdd422c   108  ldr x16, pc+68 (addr 0x000000004cdd4270)    ;; code: BUILTIN
0x4cdd4230   112  br x16
0x4cdd4234   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdd4238   120  d63f03e0       constant
0x4cdd423c   124  d503201f       constant
0x4cdd4240   128  aa134a59       constant
0x4cdd4244   132  0000ffff       constant
0x4cdd4248   136  aa134079       constant
0x4cdd424c   140  0000ffff       constant
0x4cdd4250   144  aa1355f9       constant
0x4cdd4254   148  0000ffff       constant
0x4cdd4258   152  aa10d289       constant
0x4cdd425c   156  0000ffff       constant
0x4cdd4260   160  4cdd4080       constant
0x4cdd4264   164  00000000       constant
0x4cdd4268   168  aa10d289       constant
0x4cdd426c   172  0000ffff       constant
0x4cdd4270   176  4cd22420       constant
0x4cdd4274   180  00000000       constant


RelocInfo (size = 13)
0x4cdd41d0  embedded object  (0xffffaa134a59 Cell for 0)
0x4cdd41e8  embedded object  (0xffffaa134079 WeakCell for 0x2a807e29 <Map(FAST_HOLEY_SMI_ELEMENTS)>)
0x4cdd41f8  embedded object  (0xffffaa1355f9 WeakCell for 0x2a835f29 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdd4214  embedded object  (0xffffaa10d289 <String[5]: ctime>)
0x4cdd4218  code target (HANDLER)  (0x4cdd4080)
0x4cdd4220  embedded object  (0xffffaa10d289 <String[5]: ctime>)
0x4cdd422c  code target (BUILTIN)  (0x4cd22420)
0x4cdd4234  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdd42e0     0  tbz w0, #0, #+0x90 (addr 0x4cdd4370)
0x4cdd42e4     4  mov x2, x0
0x4cdd42e8     8  stur x2, [x1, #127]
0x4cdd42ec    12  add x3, x1, #0x7f (127)
0x4cdd42f0    16  and x2, x2, #0xfffffffffff00000
0x4cdd42f4    20  ldr x2, [x2, #8]
0x4cdd42f8    24  tbz w2, #1, #+0x24 (addr 0x4cdd431c)
0x4cdd42fc    28  and x2, x1, #0xfffffffffff00000
0x4cdd4300    32  ldr x2, [x2, #8]
0x4cdd4304    36  tbz w2, #2, #+0x18 (addr 0x4cdd431c)
0x4cdd4308    40  sub csp, jssp, #0x8 (8)
0x4cdd430c    44  str lr, [jssp, #-8]!
0x4cdd4310    48  ldr x16, pc+80 (addr 0x000000004cdd4360)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdd4314    52  blr x16
0x4cdd4318    56  ldr lr, [jssp], #8
0x4cdd431c    60  stur x5, [x1, #-1]
0x4cdd4320    64  tbz w5, #0, #+0x34 (addr 0x4cdd4354)
0x4cdd4324    68  sub x2, x1, #0x1 (1)
0x4cdd4328    72  and x5, x5, #0xfffffffffff00000
0x4cdd432c    76  ldr x5, [x5, #8]
0x4cdd4330    80  tbz w5, #1, #+0x24 (addr 0x4cdd4354)
0x4cdd4334    84  and x5, x1, #0xfffffffffff00000
0x4cdd4338    88  ldr x5, [x5, #8]
0x4cdd433c    92  tbz w5, #2, #+0x18 (addr 0x4cdd4354)
0x4cdd4340    96  sub csp, jssp, #0x8 (8)
0x4cdd4344   100  str lr, [jssp, #-8]!
0x4cdd4348   104  ldr x16, pc+32 (addr 0x000000004cdd4368)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd434c   108  blr x16
0x4cdd4350   112  ldr lr, [jssp], #8
0x4cdd4354   116  ret
0x4cdd4358   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdd435c   124  d63f03e0       constant
0x4cdd4360   128  4cd170c0       constant
0x4cdd4364   132  00000000       constant
0x4cdd4368   136  4cd38080       constant
0x4cdd436c   140  00000000       constant
0x4cdd4370   144  movz x16, #0x0
0x4cdd4374   148  sub csp, jssp, #0x10 (16)
0x4cdd4378   152  stp fp, lr, [jssp, #-16]!
0x4cdd437c   156  bl #+0x4 (addr 0x4cdd4380)
0x4cdd4380   160  movz x17, #0xa00000000
0x4cdd4384   164  sub csp, jssp, #0x10 (16)
0x4cdd4388   168  stp x17, cp, [jssp, #-16]!
0x4cdd438c   172  add fp, jssp, #0x10 (16)
0x4cdd4390   176  ldr x17, pc+24 (addr 0x000000004cdd43a8)    ;; lazy deoptimization bailout 0
0x4cdd4394   180  add x17, x17, x16
0x4cdd4398   184  br x17
0x4cdd439c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd43a0   192  d63f03e0       constant
0x4cdd43a4   196  d503201f       constant
0x4cdd43a8   200  4cb06000       constant
0x4cdd43ac   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdd4310  code target (STUB)  (0x4cd170c0)
0x4cdd4348  code target (STUB)  (0x4cd38080)
0x4cdd4358  constant pool (size 24)
0x4cdd4390  runtime entry
0x4cdd439c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdd42e0     0  tbz w0, #0, #+0x90 (addr 0x4cdd4370)
0x4cdd42e4     4  mov x2, x0
0x4cdd42e8     8  stur x2, [x1, #127]
0x4cdd42ec    12  add x3, x1, #0x7f (127)
0x4cdd42f0    16  and x2, x2, #0xfffffffffff00000
0x4cdd42f4    20  ldr x2, [x2, #8]
0x4cdd42f8    24  tbz w2, #1, #+0x24 (addr 0x4cdd431c)
0x4cdd42fc    28  and x2, x1, #0xfffffffffff00000
0x4cdd4300    32  ldr x2, [x2, #8]
0x4cdd4304    36  tbz w2, #2, #+0x18 (addr 0x4cdd431c)
0x4cdd4308    40  sub csp, jssp, #0x8 (8)
0x4cdd430c    44  str lr, [jssp, #-8]!
0x4cdd4310    48  ldr x16, pc+80 (addr 0x000000004cdd4360)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdd4314    52  blr x16
0x4cdd4318    56  ldr lr, [jssp], #8
0x4cdd431c    60  stur x5, [x1, #-1]
0x4cdd4320    64  tbz w5, #0, #+0x34 (addr 0x4cdd4354)
0x4cdd4324    68  sub x2, x1, #0x1 (1)
0x4cdd4328    72  and x5, x5, #0xfffffffffff00000
0x4cdd432c    76  ldr x5, [x5, #8]
0x4cdd4330    80  tbz w5, #1, #+0x24 (addr 0x4cdd4354)
0x4cdd4334    84  and x5, x1, #0xfffffffffff00000
0x4cdd4338    88  ldr x5, [x5, #8]
0x4cdd433c    92  tbz w5, #2, #+0x18 (addr 0x4cdd4354)
0x4cdd4340    96  sub csp, jssp, #0x8 (8)
0x4cdd4344   100  str lr, [jssp, #-8]!
0x4cdd4348   104  ldr x16, pc+32 (addr 0x000000004cdd4368)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdd434c   108  blr x16
0x4cdd4350   112  ldr lr, [jssp], #8
0x4cdd4354   116  ret
0x4cdd4358   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdd435c   124  d63f03e0       constant
0x4cdd4360   128  4cd170c0       constant
0x4cdd4364   132  00000000       constant
0x4cdd4368   136  4cd38080       constant
0x4cdd436c   140  00000000       constant
0x4cdd4370   144  movz x16, #0x0
0x4cdd4374   148  sub csp, jssp, #0x10 (16)
0x4cdd4378   152  stp fp, lr, [jssp, #-16]!
0x4cdd437c   156  bl #+0x4 (addr 0x4cdd4380)
0x4cdd4380   160  movz x17, #0xa00000000
0x4cdd4384   164  sub csp, jssp, #0x10 (16)
0x4cdd4388   168  stp x17, cp, [jssp, #-16]!
0x4cdd438c   172  add fp, jssp, #0x10 (16)
0x4cdd4390   176  ldr x17, pc+24 (addr 0x000000004cdd43a8)    ;; lazy deoptimization bailout 0
0x4cdd4394   180  add x17, x17, x16
0x4cdd4398   184  br x17
0x4cdd439c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd43a0   192  d63f03e0       constant
0x4cdd43a4   196  d503201f       constant
0x4cdd43a8   200  4cb06000       constant
0x4cdd43ac   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdd4310  code target (STUB)  (0x4cd170c0)
0x4cdd4348  code target (STUB)  (0x4cd38080)
0x4cdd4358  constant pool (size 24)
0x4cdd4390  runtime entry
0x4cdd439c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = birthtime
compiler = unknown
Instructions (size = 184)
0x4cdd4420     0  sub csp, jssp, #0x8 (8)
0x4cdd4424     4  str x3, [jssp, #-8]!
0x4cdd4428     8  sub csp, jssp, #0x8 (8)
0x4cdd442c    12  str x4, [jssp, #-8]!
0x4cdd4430    16  ldr x3, pc+112 (addr 0x000000004cdd44a0)    ;; object: 0xffffaa134a59 Cell for 0
0x4cdd4434    20  ldur x3, [x3, #7]
0x4cdd4438    24  cmp x3, #0x0 (0)
0x4cdd443c    28  b.ne #+0x44 (addr 0x4cdd4480)
0x4cdd4440    32  tbz w0, #0, #+0x40 (addr 0x4cdd4480)
0x4cdd4444    36  ldur x3, [x0, #-1]
0x4cdd4448    40  ldr x4, pc+96 (addr 0x000000004cdd44a8)    ;; object: 0xffffaa134079 WeakCell for 0x2a807e29 <Map(FAST_HOLEY_SMI_ELEMENTS)>
0x4cdd444c    44  ldur x4, [x4, #7]
0x4cdd4450    48  cmp x3, x4
0x4cdd4454    52  b.ne #+0x2c (addr 0x4cdd4480)
0x4cdd4458    56  ldr x5, pc+88 (addr 0x000000004cdd44b0)    ;; object: 0xffffaa1356e9 WeakCell for 0x2a835f81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdd445c    60  ldur x5, [x5, #7]
0x4cdd4460    64  tbz w5, #0, #+0x20 (addr 0x4cdd4480)
0x4cdd4464    68  ldursw x4, [x5, #15]
0x4cdd4468    72  tbnz w4, #23, #+0x18 (addr 0x4cdd4480)
0x4cdd446c    76  ldr x4, [jssp], #8
0x4cdd4470    80  ldr x3, [jssp], #8
0x4cdd4474    84  ldr x2, pc+68 (addr 0x000000004cdd44b8)    ;; object: 0xffffaa10d2a9 <String[9]: birthtime>
0x4cdd4478    88  ldr x16, pc+72 (addr 0x000000004cdd44c0)    ;; code: HANDLER, StoreTransitionStub, minor: 198672
0x4cdd447c    92  br x16
0x4cdd4480    96  ldr x2, pc+72 (addr 0x000000004cdd44c8)    ;; object: 0xffffaa10d2a9 <String[9]: birthtime>
0x4cdd4484   100  ldr x4, [jssp], #8
0x4cdd4488   104  ldr x3, [jssp], #8
0x4cdd448c   108  ldr x16, pc+68 (addr 0x000000004cdd44d0)    ;; code: BUILTIN
0x4cdd4490   112  br x16
0x4cdd4494   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdd4498   120  d63f03e0       constant
0x4cdd449c   124  d503201f       constant
0x4cdd44a0   128  aa134a59       constant
0x4cdd44a4   132  0000ffff       constant
0x4cdd44a8   136  aa134079       constant
0x4cdd44ac   140  0000ffff       constant
0x4cdd44b0   144  aa1356e9       constant
0x4cdd44b4   148  0000ffff       constant
0x4cdd44b8   152  aa10d2a9       constant
0x4cdd44bc   156  0000ffff       constant
0x4cdd44c0   160  4cdd42e0       constant
0x4cdd44c4   164  00000000       constant
0x4cdd44c8   168  aa10d2a9       constant
0x4cdd44cc   172  0000ffff       constant
0x4cdd44d0   176  4cd22420       constant
0x4cdd44d4   180  00000000       constant


RelocInfo (size = 13)
0x4cdd4430  embedded object  (0xffffaa134a59 Cell for 0)
0x4cdd4448  embedded object  (0xffffaa134079 WeakCell for 0x2a807e29 <Map(FAST_HOLEY_SMI_ELEMENTS)>)
0x4cdd4458  embedded object  (0xffffaa1356e9 WeakCell for 0x2a835f81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdd4474  embedded object  (0xffffaa10d2a9 <String[9]: birthtime>)
0x4cdd4478  code target (HANDLER)  (0x4cdd42e0)
0x4cdd4480  embedded object  (0xffffaa10d2a9 <String[9]: birthtime>)
0x4cdd448c  code target (BUILTIN)  (0x4cd22420)
0x4cdd4494  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = isSymbolicLink
compiler = unknown
Instructions (size = 120)
0x4cdd4540     0  sub csp, jssp, #0x8 (8)
0x4cdd4544     4  str x3, [jssp, #-8]!
0x4cdd4548     8  sub csp, jssp, #0x8 (8)
0x4cdd454c    12  str x0, [jssp, #-8]!
0x4cdd4550    16  ldr x0, pc+72 (addr 0x000000004cdd4598)    ;; object: 0xffffaa134a59 Cell for 0
0x4cdd4554    20  ldur x0, [x0, #7]
0x4cdd4558    24  cmp x0, #0x0 (0)
0x4cdd455c    28  b.ne #+0x14 (addr 0x4cdd4570)
0x4cdd4560    32  ldr x3, pc+64 (addr 0x000000004cdd45a0)    ;; object: 0xffffaa1357d9 WeakCell for 0x48df26d1 <an Object with map 0x2a8320f1>
0x4cdd4564    36  ldur x3, [x3, #7]
0x4cdd4568    40  tbz w3, #0, #+0x8 (addr 0x4cdd4570)
0x4cdd456c    44  b #+0x14 (addr 0x4cdd4580)
0x4cdd4570    48  ldr x0, [jssp], #8
0x4cdd4574    52  ldr x3, [jssp], #8
0x4cdd4578    56  ldr x16, pc+48 (addr 0x000000004cdd45a8)    ;; code: BUILTIN
0x4cdd457c    60  br x16
0x4cdd4580    64  add jssp, jssp, #0x10 (16)
0x4cdd4584    68  mov x1, x3
0x4cdd4588    72  ldr x16, pc+40 (addr 0x000000004cdd45b0)    ;; code: HANDLER, LoadConstantStub, minor: 6
0x4cdd458c    76  br x16
0x4cdd4590    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdd4594    84  d63f03e0       constant
0x4cdd4598    88  aa134a59       constant
0x4cdd459c    92  0000ffff       constant
0x4cdd45a0    96  aa1357d9       constant
0x4cdd45a4   100  0000ffff       constant
0x4cdd45a8   104  4cd222e0       constant
0x4cdd45ac   108  00000000       constant
0x4cdd45b0   112  4cd8b020       constant
0x4cdd45b4   116  00000000       constant


RelocInfo (size = 10)
0x4cdd4550  embedded object  (0xffffaa134a59 Cell for 0)
0x4cdd4560  embedded object  (0xffffaa1357d9 WeakCell for 0x48df26d1 <an Object with map 0x2a8320f1>)
0x4cdd4578  code target (BUILTIN)  (0x4cd222e0)
0x4cdd4588  code target (HANDLER)  (0x4cd8b020)
0x4cdd4590  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = _checkModeProperty
compiler = unknown
Instructions (size = 120)
0x4cdd4620     0  sub csp, jssp, #0x8 (8)
0x4cdd4624     4  str x3, [jssp, #-8]!
0x4cdd4628     8  sub csp, jssp, #0x8 (8)
0x4cdd462c    12  str x0, [jssp, #-8]!
0x4cdd4630    16  ldr x0, pc+72 (addr 0x000000004cdd4678)    ;; object: 0xffffaa134a59 Cell for 0
0x4cdd4634    20  ldur x0, [x0, #7]
0x4cdd4638    24  cmp x0, #0x0 (0)
0x4cdd463c    28  b.ne #+0x14 (addr 0x4cdd4650)
0x4cdd4640    32  ldr x3, pc+64 (addr 0x000000004cdd4680)    ;; object: 0xffffaa135829 WeakCell for 0x48df26d1 <an Object with map 0x2a8320f1>
0x4cdd4644    36  ldur x3, [x3, #7]
0x4cdd4648    40  tbz w3, #0, #+0x8 (addr 0x4cdd4650)
0x4cdd464c    44  b #+0x14 (addr 0x4cdd4660)
0x4cdd4650    48  ldr x0, [jssp], #8
0x4cdd4654    52  ldr x3, [jssp], #8
0x4cdd4658    56  ldr x16, pc+48 (addr 0x000000004cdd4688)    ;; code: BUILTIN
0x4cdd465c    60  br x16
0x4cdd4660    64  add jssp, jssp, #0x10 (16)
0x4cdd4664    68  mov x1, x3
0x4cdd4668    72  ldr x16, pc+40 (addr 0x000000004cdd4690)    ;; code: HANDLER, LoadConstantStub, minor: 1
0x4cdd466c    76  br x16
0x4cdd4670    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdd4674    84  d63f03e0       constant
0x4cdd4678    88  aa134a59       constant
0x4cdd467c    92  0000ffff       constant
0x4cdd4680    96  aa135829       constant
0x4cdd4684   100  0000ffff       constant
0x4cdd4688   104  4cd222e0       constant
0x4cdd468c   108  00000000       constant
0x4cdd4690   112  4cd43300       constant
0x4cdd4694   116  00000000       constant


RelocInfo (size = 10)
0x4cdd4630  embedded object  (0xffffaa134a59 Cell for 0)
0x4cdd4640  embedded object  (0xffffaa135829 WeakCell for 0x48df26d1 <an Object with map 0x2a8320f1>)
0x4cdd4658  code target (BUILTIN)  (0x4cd222e0)
0x4cdd4668  code target (HANDLER)  (0x4cd43300)
0x4cdd4670  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 197)
0x4cdd4700     0  ldur d0, [x1, #31]
0x4cdd4704     4  movz x1, #0xd2c0
0x4cdd4708     8  movk x1, #0x166d, lsl #16
0x4cdd470c    12  ldp x2, x0, [x1]
0x4cdd4710    16  adds x16, x2, #0x10 (16)
0x4cdd4714    20  ccmp x16, x0, #nzCv, lo
0x4cdd4718    24  b.hi #+0x20 (addr 0x4cdd4738)
0x4cdd471c    28  str x16, [x1]
0x4cdd4720    32  ldr x1, [x26, #120]
0x4cdd4724    36  str x1, [x2]
0x4cdd4728    40  orr x2, x2, #0x1
0x4cdd472c    44  stur d0, [x2, #7]
0x4cdd4730    48  mov x0, x2
0x4cdd4734    52  ret
0x4cdd4738    56  sub csp, jssp, #0x10 (16)
0x4cdd473c    60  stp fp, lr, [jssp, #-16]!
0x4cdd4740    64  movz fp, #0xa00000000
0x4cdd4744    68  sub csp, jssp, #0x8 (8)
0x4cdd4748    72  str fp, [jssp, #-8]!
0x4cdd474c    76  add fp, jssp, #0x8 (8)
0x4cdd4750    80  movz x2, #0x0
0x4cdd4754    84  mov x16, lr
0x4cdd4758    88  ldr x17, pc+64 (addr 0x000000004cdd4798)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdd475c    92  blr x17
0x4cdd4760    96  ldur cp, [fp, #-8]
0x4cdd4764   100  movz x0, #0x0
0x4cdd4768   104  movz x1, #0x4b48
0x4cdd476c   108  movk x1, #0xe4, lsl #16
0x4cdd4770   112  ldr x16, pc+48 (addr 0x000000004cdd47a0)    ;; code: STUB, CEntryStub, minor: 5
0x4cdd4774   116  blr x16
0x4cdd4778   120  str x0, [jssp, #16]
0x4cdd477c   124  ldr x16, pc+44 (addr 0x000000004cdd47a8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdd4780   128  blr x16
0x4cdd4784   132  ldr lr, [jssp, #16]
0x4cdd4788   136  ldp xzr, fp, [jssp], #24
0x4cdd478c   140  b #-0x60 (addr 0x4cdd472c)
0x4cdd4790   144  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cdd4794   148  d63f03e0       constant
0x4cdd4798   152  4cd06820       constant
0x4cdd479c   156  00000000       constant
0x4cdd47a0   160  4cd06260       constant
0x4cdd47a4   164  00000000       constant
0x4cdd47a8   168  4cd068e0       constant
0x4cdd47ac   172  00000000       constant


Safepoints (size = 21)
0x4cdd4778   120  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 11)
0x4cdd4758  code target (STUB)  (0x4cd06820)
0x4cdd4770  code target (STUB)  (0x4cd06260)
0x4cdd477c  code target (STUB)  (0x4cd068e0)
0x4cdd4790  constant pool (size 32)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 197)
0x4cdd4700     0  ldur d0, [x1, #31]
0x4cdd4704     4  movz x1, #0xd2c0
0x4cdd4708     8  movk x1, #0x166d, lsl #16
0x4cdd470c    12  ldp x2, x0, [x1]
0x4cdd4710    16  adds x16, x2, #0x10 (16)
0x4cdd4714    20  ccmp x16, x0, #nzCv, lo
0x4cdd4718    24  b.hi #+0x20 (addr 0x4cdd4738)
0x4cdd471c    28  str x16, [x1]
0x4cdd4720    32  ldr x1, [x26, #120]
0x4cdd4724    36  str x1, [x2]
0x4cdd4728    40  orr x2, x2, #0x1
0x4cdd472c    44  stur d0, [x2, #7]
0x4cdd4730    48  mov x0, x2
0x4cdd4734    52  ret
0x4cdd4738    56  sub csp, jssp, #0x10 (16)
0x4cdd473c    60  stp fp, lr, [jssp, #-16]!
0x4cdd4740    64  movz fp, #0xa00000000
0x4cdd4744    68  sub csp, jssp, #0x8 (8)
0x4cdd4748    72  str fp, [jssp, #-8]!
0x4cdd474c    76  add fp, jssp, #0x8 (8)
0x4cdd4750    80  movz x2, #0x0
0x4cdd4754    84  mov x16, lr
0x4cdd4758    88  ldr x17, pc+64 (addr 0x000000004cdd4798)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdd475c    92  blr x17
0x4cdd4760    96  ldur cp, [fp, #-8]
0x4cdd4764   100  movz x0, #0x0
0x4cdd4768   104  movz x1, #0x4b48
0x4cdd476c   108  movk x1, #0xe4, lsl #16
0x4cdd4770   112  ldr x16, pc+48 (addr 0x000000004cdd47a0)    ;; code: STUB, CEntryStub, minor: 5
0x4cdd4774   116  blr x16
0x4cdd4778   120  str x0, [jssp, #16]
0x4cdd477c   124  ldr x16, pc+44 (addr 0x000000004cdd47a8)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdd4780   128  blr x16
0x4cdd4784   132  ldr lr, [jssp, #16]
0x4cdd4788   136  ldp xzr, fp, [jssp], #24
0x4cdd478c   140  b #-0x60 (addr 0x4cdd472c)
0x4cdd4790   144  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cdd4794   148  d63f03e0       constant
0x4cdd4798   152  4cd06820       constant
0x4cdd479c   156  00000000       constant
0x4cdd47a0   160  4cd06260       constant
0x4cdd47a4   164  00000000       constant
0x4cdd47a8   168  4cd068e0       constant
0x4cdd47ac   172  00000000       constant


Safepoints (size = 21)
0x4cdd4778   120  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 11)
0x4cdd4758  code target (STUB)  (0x4cd06820)
0x4cdd4770  code target (STUB)  (0x4cd06260)
0x4cdd477c  code target (STUB)  (0x4cd068e0)
0x4cdd4790  constant pool (size 32)


kind = HANDLER
major_key = <NoCache>Stub
name = set
compiler = unknown
Instructions (size = 120)
0x4cdd4840     0  sub csp, jssp, #0x8 (8)
0x4cdd4844     4  str x3, [jssp, #-8]!
0x4cdd4848     8  sub csp, jssp, #0x8 (8)
0x4cdd484c    12  str x0, [jssp, #-8]!
0x4cdd4850    16  ldr x0, pc+72 (addr 0x000000004cdd4898)    ;; object: 0xffffaa1348f9 Cell for 0
0x4cdd4854    20  ldur x0, [x0, #7]
0x4cdd4858    24  cmp x0, #0x0 (0)
0x4cdd485c    28  b.ne #+0x14 (addr 0x4cdd4870)
0x4cdd4860    32  ldr x3, pc+64 (addr 0x000000004cdd48a0)    ;; object: 0xffffaa1358b1 WeakCell for 0x48d757c1 <an Object with map 0x2a811eb1>
0x4cdd4864    36  ldur x3, [x3, #7]
0x4cdd4868    40  tbz w3, #0, #+0x8 (addr 0x4cdd4870)
0x4cdd486c    44  b #+0x14 (addr 0x4cdd4880)
0x4cdd4870    48  ldr x0, [jssp], #8
0x4cdd4874    52  ldr x3, [jssp], #8
0x4cdd4878    56  ldr x16, pc+48 (addr 0x000000004cdd48a8)    ;; code: BUILTIN
0x4cdd487c    60  br x16
0x4cdd4880    64  add jssp, jssp, #0x10 (16)
0x4cdd4884    68  mov x1, x3
0x4cdd4888    72  ldr x16, pc+40 (addr 0x000000004cdd48b0)    ;; code: HANDLER, LoadConstantStub, minor: 4
0x4cdd488c    76  br x16
0x4cdd4890    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdd4894    84  d63f03e0       constant
0x4cdd4898    88  aa1348f9       constant
0x4cdd489c    92  0000ffff       constant
0x4cdd48a0    96  aa1358b1       constant
0x4cdd48a4   100  0000ffff       constant
0x4cdd48a8   104  4cd222e0       constant
0x4cdd48ac   108  00000000       constant
0x4cdd48b0   112  4cd43480       constant
0x4cdd48b4   116  00000000       constant


RelocInfo (size = 10)
0x4cdd4850  embedded object  (0xffffaa1348f9 Cell for 0)
0x4cdd4860  embedded object  (0xffffaa1358b1 WeakCell for 0x48d757c1 <an Object with map 0x2a811eb1>)
0x4cdd4878  code target (BUILTIN)  (0x4cd222e0)
0x4cdd4888  code target (HANDLER)  (0x4cd43480)
0x4cdd4890  constant pool (size 40)

kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = STRING*STRING -> STRING
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 416)
0x4cdd4920     0  and x16, x0, x1
0x4cdd4924     4  tbz w16, #0, #+0xfc (addr 0x4cdd4a20)
0x4cdd4928     8  ldur x11, [x1, #-1]
0x4cdd492c    12  ldur x10, [x0, #-1]
0x4cdd4930    16  ldrb w11, [x11, #11]
0x4cdd4934    20  ldrb w10, [x10, #11]
0x4cdd4938    24  orr x12, x11, x10
0x4cdd493c    28  tbnz w12, #7, #+0xe4 (addr 0x4cdd4a20)
0x4cdd4940    32  cmp x1, x0
0x4cdd4944    36  b.ne #+0xc (addr 0x4cdd4950)
0x4cdd4948    40  movz x0, #0x0
0x4cdd494c    44  ret
0x4cdd4950    48  orr x12, x11, x10
0x4cdd4954    52  tbnz w12, #6, #+0x8 (addr 0x4cdd495c)
0x4cdd4958    56  ret
0x4cdd495c    60  movz x16, #0x87
0x4cdd4960    64  and x12, x11, x16
0x4cdd4964    68  movz x16, #0x87
0x4cdd4968    72  and x13, x10, x16
0x4cdd496c    76  cmp x12, #0x4 (4)
0x4cdd4970    80  ccmp x13, #4, #nzcv, eq
0x4cdd4974    84  b.ne #+0x5c (addr 0x4cdd49d0)
0x4cdd4978    88  ldur x10, [x1, #15]
0x4cdd497c    92  ldur x11, [x0, #15]
0x4cdd4980    96  cmp x10, x11
0x4cdd4984   100  b.eq #+0xc (addr 0x4cdd4990)
0x4cdd4988   104  movz x0, #0x100000000
0x4cdd498c   108  ret
0x4cdd4990   112  cbnz x10, #+0xc (addr 0x4cdd499c)
0x4cdd4994   116  movz x0, #0x0
0x4cdd4998   120  ret
0x4cdd499c   124  asr x10, x10, #32
0x4cdd49a0   128  add x11, x10, #0x17 (23)
0x4cdd49a4   132  add x1, x1, x11
0x4cdd49a8   136  add x0, x0, x11
0x4cdd49ac   140  neg x10, x10
0x4cdd49b0   144  ldrb w11, [x1, x10]
0x4cdd49b4   148  ldrb w12, [x0, x10]
0x4cdd49b8   152  cmp x11, x12
0x4cdd49bc   156  b.ne #-0x34 (addr 0x4cdd4988)
0x4cdd49c0   160  add x10, x10, #0x1 (1)
0x4cdd49c4   164  cbnz x10, #-0x14 (addr 0x4cdd49b0)
0x4cdd49c8   168  movz x0, #0x0
0x4cdd49cc   172  ret
0x4cdd49d0   176  movz x16, #0xc00000000
0x4cdd49d4   180  sub csp, jssp, #0x10 (16)
0x4cdd49d8   184  stp fp, lr, [jssp, #-16]!
0x4cdd49dc   188  sub csp, jssp, #0x10 (16)
0x4cdd49e0   192  str x16, [jssp, #-8]!
0x4cdd49e4   196  ldr x17, pc+172 (addr 0x000000004cdd4a90)    ;; object: 0x4cdd48c1 <Code: COMPARE_IC>
0x4cdd49e8   200  sub csp, jssp, #0x10 (16)
0x4cdd49ec   204  str x17, [jssp, #-8]!
0x4cdd49f0   208  add fp, jssp, #0x10 (16)
0x4cdd49f4   212  sub csp, jssp, #0x10 (16)
0x4cdd49f8   216  stp x0, x1, [jssp, #-16]!
0x4cdd49fc   220  movz x0, #0x2
0x4cdd4a00   224  ldr x1, pc+152 (addr 0x000000004cdd4a98)    ;; external reference (Runtime::StringEqual)
0x4cdd4a04   228  ldr x16, pc+156 (addr 0x000000004cdd4aa0)    ;; code: STUB, CEntryStub, minor: 4
0x4cdd4a08   232  blr x16
0x4cdd4a0c   236  mov jssp, fp
0x4cdd4a10   240  ldp fp, lr, [jssp], #16
0x4cdd4a14   244  ldr x1, [x26, #64]
0x4cdd4a18   248  sub x0, x0, x1
0x4cdd4a1c   252  ret
0x4cdd4a20   256  movz x16, #0xc00000000
0x4cdd4a24   260  sub csp, jssp, #0x10 (16)
0x4cdd4a28   264  stp fp, lr, [jssp, #-16]!
0x4cdd4a2c   268  sub csp, jssp, #0x10 (16)
0x4cdd4a30   272  str x16, [jssp, #-8]!
0x4cdd4a34   276  ldr x17, pc+116 (addr 0x000000004cdd4aa8)    ;; object: 0x4cdd48c1 <Code: COMPARE_IC>
0x4cdd4a38   280  sub csp, jssp, #0x10 (16)
0x4cdd4a3c   284  str x17, [jssp, #-8]!
0x4cdd4a40   288  add fp, jssp, #0x10 (16)
0x4cdd4a44   292  sub csp, jssp, #0x18 (24)
0x4cdd4a48   296  stp lr, x0, [jssp, #-24]!
0x4cdd4a4c   300  str x1, [jssp, #16]
0x4cdd4a50   304  movz x10, #0x2f00000000
0x4cdd4a54   308  sub csp, jssp, #0x18 (24)
0x4cdd4a58   312  stp x10, x0, [jssp, #-24]!
0x4cdd4a5c   316  str x1, [jssp, #16]
0x4cdd4a60   320  movz x0, #0x3
0x4cdd4a64   324  ldr x1, pc+76 (addr 0x000000004cdd4ab0)    ;; external reference (Runtime::CompareIC_Miss)
0x4cdd4a68   328  ldr x16, pc+80 (addr 0x000000004cdd4ab8)    ;; code: STUB, CEntryStub, minor: 4
0x4cdd4a6c   332  blr x16
0x4cdd4a70   336  add x11, x0, #0x5f (95)
0x4cdd4a74   340  ldr x1, [jssp, #16]
0x4cdd4a78   344  ldp lr, x0, [jssp], #24
0x4cdd4a7c   348  mov jssp, fp
0x4cdd4a80   352  ldp fp, lr, [jssp], #16
0x4cdd4a84   356  br x11
0x4cdd4a88   360  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdd4a8c   364  d63f03e0       constant
0x4cdd4a90   368  4cdd48c1       constant
0x4cdd4a94   372  00000000       constant
0x4cdd4a98   376  00ed0748       constant
0x4cdd4a9c   380  00000000       constant
0x4cdd4aa0   384  4cd06060       constant
0x4cdd4aa4   388  00000000       constant
0x4cdd4aa8   392  4cdd48c1       constant
0x4cdd4aac   396  00000000       constant
0x4cdd4ab0   400  00c8a980       constant
0x4cdd4ab4   404  00000000       constant
0x4cdd4ab8   408  4cd06060       constant
0x4cdd4abc   412  00000000       constant


RelocInfo (size = 16)
0x4cdd49e4  embedded object  (0x4cdd48c1 <Code: COMPARE_IC>)
0x4cdd4a00  external reference (Runtime::StringEqual)  (0xed0748)
0x4cdd4a04  code target (STUB)  (0x4cd06060)
0x4cdd4a34  embedded object  (0x4cdd48c1 <Code: COMPARE_IC>)
0x4cdd4a64  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cdd4a68  code target (STUB)  (0x4cd06060)
0x4cdd4a88  constant pool (size 56)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 192)
0x4cdd6e80     0  ldur x4, [x1, #15]
0x4cdd6e84     4  ldur w5, [x1, #27]
0x4cdd6e88     8  tbnz w2, #0, #+0x20 (addr 0x4cdd6ea8)
0x4cdd6e8c    12  asr x7, x2, #32
0x4cdd6e90    16  cmp w7, w5
0x4cdd6e94    20  b.hs #+0x5c (addr 0x4cdd6ef0)
0x4cdd6e98    24  add x0, x4, w7, sxtw #3
0x4cdd6e9c    28  ldur w1, [x0, #19]
0x4cdd6ea0    32  lsl x0, x1, #32
0x4cdd6ea4    36  ret
0x4cdd6ea8    40  sub csp, jssp, #0x10 (16)
0x4cdd6eac    44  stp fp, lr, [jssp, #-16]!
0x4cdd6eb0    48  movz fp, #0xa00000000
0x4cdd6eb4    52  sub csp, jssp, #0x8 (8)
0x4cdd6eb8    56  str fp, [jssp, #-8]!
0x4cdd6ebc    60  add fp, jssp, #0x8 (8)
0x4cdd6ec0    64  ldur x16, [x2, #-1]
0x4cdd6ec4    68  ldr x17, [x26, #120]
0x4cdd6ec8    72  cmp x16, x17
0x4cdd6ecc    76  b.ne #+0x34 (addr 0x4cdd6f00)
0x4cdd6ed0    80  ldur d29, [x2, #7]
0x4cdd6ed4    84  fcvtzs w7, d29
0x4cdd6ed8    88  scvtf d0, w7
0x4cdd6edc    92  fcmp d29, d0
0x4cdd6ee0    96  b.ne #+0x20 (addr 0x4cdd6f00)
0x4cdd6ee4   100  ldr lr, [jssp, #16]
0x4cdd6ee8   104  ldp xzr, fp, [jssp], #24
0x4cdd6eec   108  b #-0x5c (addr 0x4cdd6e90)
0x4cdd6ef0   112  movz x16, #0x0
0x4cdd6ef4   116  sub csp, jssp, #0x10 (16)
0x4cdd6ef8   120  stp fp, lr, [jssp, #-16]!
0x4cdd6efc   124  bl #+0xc (addr 0x4cdd6f08)
0x4cdd6f00   128  movz x16, #0x8
0x4cdd6f04   132  bl #+0x14 (addr 0x4cdd6f18)
0x4cdd6f08   136  movz x17, #0xa00000000
0x4cdd6f0c   140  sub csp, jssp, #0x10 (16)
0x4cdd6f10   144  stp x17, cp, [jssp, #-16]!
0x4cdd6f14   148  add fp, jssp, #0x10 (16)
0x4cdd6f18   152  ldr x17, pc+24 (addr 0x000000004cdd6f30)    ;; lazy deoptimization bailout 0
0x4cdd6f1c   156  add x17, x17, x16
0x4cdd6f20   160  br x17
0x4cdd6f24   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd6f28   168  d63f03e0       constant
0x4cdd6f2c   172  d503201f       constant
0x4cdd6f30   176  4cb06000       constant
0x4cdd6f34   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cdd6f18  runtime entry
0x4cdd6f24  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = LoadFastElementStub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 192)
0x4cdd6e80     0  ldur x4, [x1, #15]
0x4cdd6e84     4  ldur w5, [x1, #27]
0x4cdd6e88     8  tbnz w2, #0, #+0x20 (addr 0x4cdd6ea8)
0x4cdd6e8c    12  asr x7, x2, #32
0x4cdd6e90    16  cmp w7, w5
0x4cdd6e94    20  b.hs #+0x5c (addr 0x4cdd6ef0)
0x4cdd6e98    24  add x0, x4, w7, sxtw #3
0x4cdd6e9c    28  ldur w1, [x0, #19]
0x4cdd6ea0    32  lsl x0, x1, #32
0x4cdd6ea4    36  ret
0x4cdd6ea8    40  sub csp, jssp, #0x10 (16)
0x4cdd6eac    44  stp fp, lr, [jssp, #-16]!
0x4cdd6eb0    48  movz fp, #0xa00000000
0x4cdd6eb4    52  sub csp, jssp, #0x8 (8)
0x4cdd6eb8    56  str fp, [jssp, #-8]!
0x4cdd6ebc    60  add fp, jssp, #0x8 (8)
0x4cdd6ec0    64  ldur x16, [x2, #-1]
0x4cdd6ec4    68  ldr x17, [x26, #120]
0x4cdd6ec8    72  cmp x16, x17
0x4cdd6ecc    76  b.ne #+0x34 (addr 0x4cdd6f00)
0x4cdd6ed0    80  ldur d29, [x2, #7]
0x4cdd6ed4    84  fcvtzs w7, d29
0x4cdd6ed8    88  scvtf d0, w7
0x4cdd6edc    92  fcmp d29, d0
0x4cdd6ee0    96  b.ne #+0x20 (addr 0x4cdd6f00)
0x4cdd6ee4   100  ldr lr, [jssp, #16]
0x4cdd6ee8   104  ldp xzr, fp, [jssp], #24
0x4cdd6eec   108  b #-0x5c (addr 0x4cdd6e90)
0x4cdd6ef0   112  movz x16, #0x0
0x4cdd6ef4   116  sub csp, jssp, #0x10 (16)
0x4cdd6ef8   120  stp fp, lr, [jssp, #-16]!
0x4cdd6efc   124  bl #+0xc (addr 0x4cdd6f08)
0x4cdd6f00   128  movz x16, #0x8
0x4cdd6f04   132  bl #+0x14 (addr 0x4cdd6f18)
0x4cdd6f08   136  movz x17, #0xa00000000
0x4cdd6f0c   140  sub csp, jssp, #0x10 (16)
0x4cdd6f10   144  stp x17, cp, [jssp, #-16]!
0x4cdd6f14   148  add fp, jssp, #0x10 (16)
0x4cdd6f18   152  ldr x17, pc+24 (addr 0x000000004cdd6f30)    ;; lazy deoptimization bailout 0
0x4cdd6f1c   156  add x17, x17, x16
0x4cdd6f20   160  br x17
0x4cdd6f24   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd6f28   168  d63f03e0       constant
0x4cdd6f2c   172  d503201f       constant
0x4cdd6f30   176  4cb06000       constant
0x4cdd6f34   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cdd6f18  runtime entry
0x4cdd6f24  constant pool (size 20)


--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastCloneShallowObjectStub
compiler = crankshaft
Instructions (size = 477)
0x4cdd7be0     0  ldur x4, [x3, #47]
0x4cdd7be4     4  tbnz w2, #0, #+0xa0 (addr 0x4cdd7c84)
0x4cdd7be8     8  asr x6, x2, #32
0x4cdd7bec    12  add x5, x4, #0x17 (23)
0x4cdd7bf0    16  ldr x7, [x5, w6, sxtw #3]
0x4cdd7bf4    20  ldr x4, pc+324 (addr 0x000000004cdd7d38)    ;; object: 0x21004241 <undefined>
0x4cdd7bf8    24  cmp x7, x4
0x4cdd7bfc    28  b.eq #+0x84 (addr 0x4cdd7c80)
0x4cdd7c00    32  ldur x4, [x7, #7]
0x4cdd7c04    36  ldur x5, [x4, #-1]
0x4cdd7c08    40  ldrb w6, [x5, #7]
0x4cdd7c0c    44  cmp w6, #0x5 (5)
0x4cdd7c10    48  b.ne #+0x70 (addr 0x4cdd7c80)
0x4cdd7c14    52  movz x1, #0xd2c0
0x4cdd7c18    56  movk x1, #0x166d, lsl #16
0x4cdd7c1c    60  ldp x2, x0, [x1]
0x4cdd7c20    64  adds x16, x2, #0x38 (56)
0x4cdd7c24    68  ccmp x16, x0, #nzCv, lo
0x4cdd7c28    72  b.hi #+0xa4 (addr 0x4cdd7ccc)
0x4cdd7c2c    76  str x16, [x1]
0x4cdd7c30    80  orr x2, x2, #0x1
0x4cdd7c34    84  stur x5, [x2, #-1]
0x4cdd7c38    88  ldur x0, [x4, #7]
0x4cdd7c3c    92  stur x0, [x2, #7]
0x4cdd7c40    96  ldur x0, [x4, #15]
0x4cdd7c44   100  stur x0, [x2, #15]
0x4cdd7c48   104  ldur x0, [x4, #23]
0x4cdd7c4c   108  stur x0, [x2, #23]
0x4cdd7c50   112  ldur x0, [x4, #31]
0x4cdd7c54   116  stur x0, [x2, #31]
0x4cdd7c58   120  add x0, x2, #0x28 (40)
0x4cdd7c5c   124  ldr x1, pc+228 (addr 0x000000004cdd7d40)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdd7c60   128  stur x1, [x0, #-1]
0x4cdd7c64   132  stur x7, [x0, #7]
0x4cdd7c68   136  ldur w0, [x7, #35]
0x4cdd7c6c   140  add w0, w0, #0x1 (1)
0x4cdd7c70   144  lsl x0, x0, #32
0x4cdd7c74   148  stur x0, [x7, #31]
0x4cdd7c78   152  mov x0, x2
0x4cdd7c7c   156  ret
0x4cdd7c80   160  b #+0xe0 (addr 0x4cdd7d60)
0x4cdd7c84   164  sub csp, jssp, #0x10 (16)
0x4cdd7c88   168  stp fp, lr, [jssp, #-16]!
0x4cdd7c8c   172  movz fp, #0xa00000000
0x4cdd7c90   176  sub csp, jssp, #0x8 (8)
0x4cdd7c94   180  str fp, [jssp, #-8]!
0x4cdd7c98   184  add fp, jssp, #0x8 (8)
0x4cdd7c9c   188  ldur x16, [x2, #-1]
0x4cdd7ca0   192  ldr x17, [x26, #120]
0x4cdd7ca4   196  cmp x16, x17
0x4cdd7ca8   200  b.ne #+0xc8 (addr 0x4cdd7d70)
0x4cdd7cac   204  ldur d29, [x2, #7]
0x4cdd7cb0   208  fcvtzs w6, d29
0x4cdd7cb4   212  scvtf d0, w6
0x4cdd7cb8   216  fcmp d29, d0
0x4cdd7cbc   220  b.ne #+0xb4 (addr 0x4cdd7d70)
0x4cdd7cc0   224  ldr lr, [jssp, #16]
0x4cdd7cc4   228  ldp xzr, fp, [jssp], #24
0x4cdd7cc8   232  b #-0xdc (addr 0x4cdd7bec)
0x4cdd7ccc   236  sub csp, jssp, #0x10 (16)
0x4cdd7cd0   240  stp fp, lr, [jssp, #-16]!
0x4cdd7cd4   244  movz fp, #0xa00000000
0x4cdd7cd8   248  sub csp, jssp, #0x8 (8)
0x4cdd7cdc   252  str fp, [jssp, #-8]!
0x4cdd7ce0   256  add fp, jssp, #0x8 (8)
0x4cdd7ce4   260  movz x2, #0x0
0x4cdd7ce8   264  mov x16, lr
0x4cdd7cec   268  ldr x17, pc+92 (addr 0x000000004cdd7d48)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdd7cf0   272  blr x17
0x4cdd7cf4   276  movz x0, #0x3800000000
0x4cdd7cf8   280  movz x10, #0x0
0x4cdd7cfc   284  sub csp, jssp, #0x10 (16)
0x4cdd7d00   288  stp x10, x0, [jssp, #-16]!
0x4cdd7d04   292  movz x0, #0x2
0x4cdd7d08   296  movz x1, #0x5b88
0x4cdd7d0c   300  movk x1, #0xe2, lsl #16
0x4cdd7d10   304  ldr x16, pc+64 (addr 0x000000004cdd7d50)    ;; code: STUB, CEntryStub, minor: 5
0x4cdd7d14   308  blr x16
0x4cdd7d18   312  str x0, [jssp, #16]
0x4cdd7d1c   316  ldr x16, pc+60 (addr 0x000000004cdd7d58)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdd7d20   320  blr x16
0x4cdd7d24   324  ldr lr, [jssp, #16]
0x4cdd7d28   328  ldp xzr, fp, [jssp], #24
0x4cdd7d2c   332  b #-0xf8 (addr 0x4cdd7c34)
0x4cdd7d30   336  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0x4cdd7d34   340  d63f03e0       constant
0x4cdd7d38   344  21004241       constant
0x4cdd7d3c   348  00000000       constant
0x4cdd7d40   352  2a805d81       constant
0x4cdd7d44   356  00000000       constant
0x4cdd7d48   360  4cd06820       constant
0x4cdd7d4c   364  00000000       constant
0x4cdd7d50   368  4cd06260       constant
0x4cdd7d54   372  00000000       constant
0x4cdd7d58   376  4cd068e0       constant
0x4cdd7d5c   380  00000000       constant
0x4cdd7d60   384  movz x16, #0x0
0x4cdd7d64   388  sub csp, jssp, #0x10 (16)
0x4cdd7d68   392  stp fp, lr, [jssp, #-16]!
0x4cdd7d6c   396  bl #+0xc (addr 0x4cdd7d78)
0x4cdd7d70   400  movz x16, #0x8
0x4cdd7d74   404  bl #+0x14 (addr 0x4cdd7d88)
0x4cdd7d78   408  movz x17, #0xa00000000
0x4cdd7d7c   412  sub csp, jssp, #0x10 (16)
0x4cdd7d80   416  stp x17, cp, [jssp, #-16]!
0x4cdd7d84   420  add fp, jssp, #0x10 (16)
0x4cdd7d88   424  ldr x17, pc+24 (addr 0x000000004cdd7da0)    ;; lazy deoptimization bailout 0
0x4cdd7d8c   428  add x17, x17, x16
0x4cdd7d90   432  br x17
0x4cdd7d94   436  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd7d98   440  d63f03e0       constant
0x4cdd7d9c   444  d503201f       constant
0x4cdd7da0   448  4cb06000       constant
0x4cdd7da4   452  00000000       constant


Safepoints (size = 21)
0x4cdd7d18   312  000 | x2 | x4 | x5 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 25)
0x4cdd7bf4  embedded object  (0x21004241 <undefined>)
0x4cdd7c5c  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdd7cec  code target (STUB)  (0x4cd06820)
0x4cdd7d10  code target (STUB)  (0x4cd06260)
0x4cdd7d1c  code target (STUB)  (0x4cd068e0)
0x4cdd7d30  constant pool (size 48)
0x4cdd7d88  runtime entry
0x4cdd7d94  constant pool (size 20)

--- End code ---
kind = STUB
major_key = FastCloneShallowObjectStub
name = FastCloneShallowObjectStub
compiler = crankshaft
Instructions (size = 477)
0x4cdd7be0     0  ldur x4, [x3, #47]
0x4cdd7be4     4  tbnz w2, #0, #+0xa0 (addr 0x4cdd7c84)
0x4cdd7be8     8  asr x6, x2, #32
0x4cdd7bec    12  add x5, x4, #0x17 (23)
0x4cdd7bf0    16  ldr x7, [x5, w6, sxtw #3]
0x4cdd7bf4    20  ldr x4, pc+324 (addr 0x000000004cdd7d38)    ;; object: 0x21004241 <undefined>
0x4cdd7bf8    24  cmp x7, x4
0x4cdd7bfc    28  b.eq #+0x84 (addr 0x4cdd7c80)
0x4cdd7c00    32  ldur x4, [x7, #7]
0x4cdd7c04    36  ldur x5, [x4, #-1]
0x4cdd7c08    40  ldrb w6, [x5, #7]
0x4cdd7c0c    44  cmp w6, #0x5 (5)
0x4cdd7c10    48  b.ne #+0x70 (addr 0x4cdd7c80)
0x4cdd7c14    52  movz x1, #0xd2c0
0x4cdd7c18    56  movk x1, #0x166d, lsl #16
0x4cdd7c1c    60  ldp x2, x0, [x1]
0x4cdd7c20    64  adds x16, x2, #0x38 (56)
0x4cdd7c24    68  ccmp x16, x0, #nzCv, lo
0x4cdd7c28    72  b.hi #+0xa4 (addr 0x4cdd7ccc)
0x4cdd7c2c    76  str x16, [x1]
0x4cdd7c30    80  orr x2, x2, #0x1
0x4cdd7c34    84  stur x5, [x2, #-1]
0x4cdd7c38    88  ldur x0, [x4, #7]
0x4cdd7c3c    92  stur x0, [x2, #7]
0x4cdd7c40    96  ldur x0, [x4, #15]
0x4cdd7c44   100  stur x0, [x2, #15]
0x4cdd7c48   104  ldur x0, [x4, #23]
0x4cdd7c4c   108  stur x0, [x2, #23]
0x4cdd7c50   112  ldur x0, [x4, #31]
0x4cdd7c54   116  stur x0, [x2, #31]
0x4cdd7c58   120  add x0, x2, #0x28 (40)
0x4cdd7c5c   124  ldr x1, pc+228 (addr 0x000000004cdd7d40)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdd7c60   128  stur x1, [x0, #-1]
0x4cdd7c64   132  stur x7, [x0, #7]
0x4cdd7c68   136  ldur w0, [x7, #35]
0x4cdd7c6c   140  add w0, w0, #0x1 (1)
0x4cdd7c70   144  lsl x0, x0, #32
0x4cdd7c74   148  stur x0, [x7, #31]
0x4cdd7c78   152  mov x0, x2
0x4cdd7c7c   156  ret
0x4cdd7c80   160  b #+0xe0 (addr 0x4cdd7d60)
0x4cdd7c84   164  sub csp, jssp, #0x10 (16)
0x4cdd7c88   168  stp fp, lr, [jssp, #-16]!
0x4cdd7c8c   172  movz fp, #0xa00000000
0x4cdd7c90   176  sub csp, jssp, #0x8 (8)
0x4cdd7c94   180  str fp, [jssp, #-8]!
0x4cdd7c98   184  add fp, jssp, #0x8 (8)
0x4cdd7c9c   188  ldur x16, [x2, #-1]
0x4cdd7ca0   192  ldr x17, [x26, #120]
0x4cdd7ca4   196  cmp x16, x17
0x4cdd7ca8   200  b.ne #+0xc8 (addr 0x4cdd7d70)
0x4cdd7cac   204  ldur d29, [x2, #7]
0x4cdd7cb0   208  fcvtzs w6, d29
0x4cdd7cb4   212  scvtf d0, w6
0x4cdd7cb8   216  fcmp d29, d0
0x4cdd7cbc   220  b.ne #+0xb4 (addr 0x4cdd7d70)
0x4cdd7cc0   224  ldr lr, [jssp, #16]
0x4cdd7cc4   228  ldp xzr, fp, [jssp], #24
0x4cdd7cc8   232  b #-0xdc (addr 0x4cdd7bec)
0x4cdd7ccc   236  sub csp, jssp, #0x10 (16)
0x4cdd7cd0   240  stp fp, lr, [jssp, #-16]!
0x4cdd7cd4   244  movz fp, #0xa00000000
0x4cdd7cd8   248  sub csp, jssp, #0x8 (8)
0x4cdd7cdc   252  str fp, [jssp, #-8]!
0x4cdd7ce0   256  add fp, jssp, #0x8 (8)
0x4cdd7ce4   260  movz x2, #0x0
0x4cdd7ce8   264  mov x16, lr
0x4cdd7cec   268  ldr x17, pc+92 (addr 0x000000004cdd7d48)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdd7cf0   272  blr x17
0x4cdd7cf4   276  movz x0, #0x3800000000
0x4cdd7cf8   280  movz x10, #0x0
0x4cdd7cfc   284  sub csp, jssp, #0x10 (16)
0x4cdd7d00   288  stp x10, x0, [jssp, #-16]!
0x4cdd7d04   292  movz x0, #0x2
0x4cdd7d08   296  movz x1, #0x5b88
0x4cdd7d0c   300  movk x1, #0xe2, lsl #16
0x4cdd7d10   304  ldr x16, pc+64 (addr 0x000000004cdd7d50)    ;; code: STUB, CEntryStub, minor: 5
0x4cdd7d14   308  blr x16
0x4cdd7d18   312  str x0, [jssp, #16]
0x4cdd7d1c   316  ldr x16, pc+60 (addr 0x000000004cdd7d58)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdd7d20   320  blr x16
0x4cdd7d24   324  ldr lr, [jssp, #16]
0x4cdd7d28   328  ldp xzr, fp, [jssp], #24
0x4cdd7d2c   332  b #-0xf8 (addr 0x4cdd7c34)
0x4cdd7d30   336  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0x4cdd7d34   340  d63f03e0       constant
0x4cdd7d38   344  21004241       constant
0x4cdd7d3c   348  00000000       constant
0x4cdd7d40   352  2a805d81       constant
0x4cdd7d44   356  00000000       constant
0x4cdd7d48   360  4cd06820       constant
0x4cdd7d4c   364  00000000       constant
0x4cdd7d50   368  4cd06260       constant
0x4cdd7d54   372  00000000       constant
0x4cdd7d58   376  4cd068e0       constant
0x4cdd7d5c   380  00000000       constant
0x4cdd7d60   384  movz x16, #0x0
0x4cdd7d64   388  sub csp, jssp, #0x10 (16)
0x4cdd7d68   392  stp fp, lr, [jssp, #-16]!
0x4cdd7d6c   396  bl #+0xc (addr 0x4cdd7d78)
0x4cdd7d70   400  movz x16, #0x8
0x4cdd7d74   404  bl #+0x14 (addr 0x4cdd7d88)
0x4cdd7d78   408  movz x17, #0xa00000000
0x4cdd7d7c   412  sub csp, jssp, #0x10 (16)
0x4cdd7d80   416  stp x17, cp, [jssp, #-16]!
0x4cdd7d84   420  add fp, jssp, #0x10 (16)
0x4cdd7d88   424  ldr x17, pc+24 (addr 0x000000004cdd7da0)    ;; lazy deoptimization bailout 0
0x4cdd7d8c   428  add x17, x17, x16
0x4cdd7d90   432  br x17
0x4cdd7d94   436  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd7d98   440  d63f03e0       constant
0x4cdd7d9c   444  d503201f       constant
0x4cdd7da0   448  4cb06000       constant
0x4cdd7da4   452  00000000       constant


Safepoints (size = 21)
0x4cdd7d18   312  000 | x2 | x4 | x5 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 25)
0x4cdd7bf4  embedded object  (0x21004241 <undefined>)
0x4cdd7c5c  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdd7cec  code target (STUB)  (0x4cd06820)
0x4cdd7d10  code target (STUB)  (0x4cd06260)
0x4cdd7d1c  code target (STUB)  (0x4cd068e0)
0x4cdd7d30  constant pool (size 48)
0x4cdd7d88  runtime entry
0x4cdd7d94  constant pool (size 20)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MEGAMORPHIC
extra_ic_state = 2709
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 181)
0x4cdd9b20     0  movz x16, #0xa00000000
0x4cdd9b24     4  sub csp, jssp, #0x10 (16)
0x4cdd9b28     8  stp fp, lr, [jssp, #-16]!
0x4cdd9b2c    12  mov fp, jssp
0x4cdd9b30    16  sub csp, jssp, #0x20 (32)
0x4cdd9b34    20  sub jssp, jssp, #0x20 (32)
0x4cdd9b38    24  stur x16, [fp, #-8]
0x4cdd9b3c    28  str x1, [jssp, #16]
0x4cdd9b40    32  str x0, [jssp, #8]
0x4cdd9b44    36  str cp, [jssp]
0x4cdd9b48    40  mov x3, cp
0x4cdd9b4c    44  mov x2, x0
0x4cdd9b50    48  tbnz w2, #0, #+0x48 (addr 0x4cdd9b98)
0x4cdd9b54    52  sub csp, jssp, #0x10 (16)
0x4cdd9b58    56  stp x2, x1, [jssp, #-16]!
0x4cdd9b5c    60  mov cp, x3
0x4cdd9b60    64  movz x0, #0x2
0x4cdd9b64    68  movz x1, #0xf938
0x4cdd9b68    72  movk x1, #0xe4, lsl #16
0x4cdd9b6c    76  ldr x16, pc+36 (addr 0x000000004cdd9b90)    ;; code: STUB, CEntryStub, minor: 4
0x4cdd9b70    80  blr x16
0x4cdd9b74    84  ldr cp, [jssp]
0x4cdd9b78    88  mov jssp, fp
0x4cdd9b7c    92  ldp fp, lr, [jssp], #16
0x4cdd9b80    96  ret
0x4cdd9b84   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd9b88   104  d63f03e0       constant
0x4cdd9b8c   108  d503201f       constant
0x4cdd9b90   112  4cd06060       constant
0x4cdd9b94   116  00000000       constant
0x4cdd9b98   120  movz x16, #0x0
0x4cdd9b9c   124  bl #+0x4 (addr 0x4cdd9ba0)
0x4cdd9ba0   128  ldr x17, pc+24 (addr 0x000000004cdd9bb8)    ;; lazy deoptimization bailout 0
0x4cdd9ba4   132  add x17, x17, x16
0x4cdd9ba8   136  br x17
0x4cdd9bac   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd9bb0   144  d63f03e0       constant
0x4cdd9bb4   148  d503201f       constant
0x4cdd9bb8   152  4cb06000       constant
0x4cdd9bbc   156  00000000       constant


Safepoints (size = 21)
0x4cdd9b74    84  111000 (sp -> fp)       1

RelocInfo (size = 17)
0x4cdd9b6c  code target (STUB)  (0x4cd06060)
0x4cdd9b84  constant pool (size 20)
0x4cdd9ba0  runtime entry
0x4cdd9bac  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MEGAMORPHIC
extra_ic_state = 2709
name = BinaryOpICStub(SHR:Generic*Smi->Smi)
compiler = crankshaft
Instructions (size = 181)
0x4cdd9b20     0  movz x16, #0xa00000000
0x4cdd9b24     4  sub csp, jssp, #0x10 (16)
0x4cdd9b28     8  stp fp, lr, [jssp, #-16]!
0x4cdd9b2c    12  mov fp, jssp
0x4cdd9b30    16  sub csp, jssp, #0x20 (32)
0x4cdd9b34    20  sub jssp, jssp, #0x20 (32)
0x4cdd9b38    24  stur x16, [fp, #-8]
0x4cdd9b3c    28  str x1, [jssp, #16]
0x4cdd9b40    32  str x0, [jssp, #8]
0x4cdd9b44    36  str cp, [jssp]
0x4cdd9b48    40  mov x3, cp
0x4cdd9b4c    44  mov x2, x0
0x4cdd9b50    48  tbnz w2, #0, #+0x48 (addr 0x4cdd9b98)
0x4cdd9b54    52  sub csp, jssp, #0x10 (16)
0x4cdd9b58    56  stp x2, x1, [jssp, #-16]!
0x4cdd9b5c    60  mov cp, x3
0x4cdd9b60    64  movz x0, #0x2
0x4cdd9b64    68  movz x1, #0xf938
0x4cdd9b68    72  movk x1, #0xe4, lsl #16
0x4cdd9b6c    76  ldr x16, pc+36 (addr 0x000000004cdd9b90)    ;; code: STUB, CEntryStub, minor: 4
0x4cdd9b70    80  blr x16
0x4cdd9b74    84  ldr cp, [jssp]
0x4cdd9b78    88  mov jssp, fp
0x4cdd9b7c    92  ldp fp, lr, [jssp], #16
0x4cdd9b80    96  ret
0x4cdd9b84   100  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd9b88   104  d63f03e0       constant
0x4cdd9b8c   108  d503201f       constant
0x4cdd9b90   112  4cd06060       constant
0x4cdd9b94   116  00000000       constant
0x4cdd9b98   120  movz x16, #0x0
0x4cdd9b9c   124  bl #+0x4 (addr 0x4cdd9ba0)
0x4cdd9ba0   128  ldr x17, pc+24 (addr 0x000000004cdd9bb8)    ;; lazy deoptimization bailout 0
0x4cdd9ba4   132  add x17, x17, x16
0x4cdd9ba8   136  br x17
0x4cdd9bac   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdd9bb0   144  d63f03e0       constant
0x4cdd9bb4   148  d503201f       constant
0x4cdd9bb8   152  4cb06000       constant
0x4cdd9bbc   156  00000000       constant


Safepoints (size = 21)
0x4cdd9b74    84  111000 (sp -> fp)       1

RelocInfo (size = 17)
0x4cdd9b6c  code target (STUB)  (0x4cd06060)
0x4cdd9b84  constant pool (size 20)
0x4cdd9ba0  runtime entry
0x4cdd9bac  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = SMI*STRING -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 632)
0x4cdd9c40     0  tbnz w1, #0, #+0x1d4 (addr 0x4cdd9e14)
0x4cdd9c44     4  orr x16, x1, x0
0x4cdd9c48     8  tbnz w16, #0, #+0x10 (addr 0x4cdd9c58)
0x4cdd9c4c    12  asr x1, x1, #32
0x4cdd9c50    16  sub x0, x1, x0, asr #32
0x4cdd9c54    20  ret
0x4cdd9c58    24  cmp x0, x1
0x4cdd9c5c    28  b.ne #+0x30 (addr 0x4cdd9c8c)
0x4cdd9c60    32  ldur x16, [x0, #-1]
0x4cdd9c64    36  ldr x17, [x26, #120]
0x4cdd9c68    40  cmp x16, x17
0x4cdd9c6c    44  b.eq #+0xc (addr 0x4cdd9c78)
0x4cdd9c70    48  movz x0, #0x0
0x4cdd9c74    52  ret
0x4cdd9c78    56  ldur d0, [x0, #7]
0x4cdd9c7c    60  fcmp d0, d0
0x4cdd9c80    64  b.vc #-0x10 (addr 0x4cdd9c70)
0x4cdd9c84    68  movn x0, #0x0
0x4cdd9c88    72  ret
0x4cdd9c8c    76  and x16, x1, x0
0x4cdd9c90    80  tbnz w16, #0, #+0x64 (addr 0x4cdd9cf4)
0x4cdd9c94    84  tbz w0, #0, #+0x24 (addr 0x4cdd9cb8)
0x4cdd9c98    88  ldur x16, [x0, #-1]
0x4cdd9c9c    92  ldr x17, [x26, #120]
0x4cdd9ca0    96  cmp x16, x17
0x4cdd9ca4   100  b.eq #+0x8 (addr 0x4cdd9cac)
0x4cdd9ca8   104  ret
0x4cdd9cac   108  ldur d0, [x0, #7]
0x4cdd9cb0   112  scvtf d1, x1, #32
0x4cdd9cb4   116  b #+0x24 (addr 0x4cdd9cd8)
0x4cdd9cb8   120  ldur x16, [x1, #-1]
0x4cdd9cbc   124  ldr x17, [x26, #120]
0x4cdd9cc0   128  cmp x16, x17
0x4cdd9cc4   132  b.eq #+0xc (addr 0x4cdd9cd0)
0x4cdd9cc8   136  movz x0, #0x1
0x4cdd9ccc   140  ret
0x4cdd9cd0   144  ldur d1, [x1, #7]
0x4cdd9cd4   148  scvtf d0, x0, #32
0x4cdd9cd8   152  fcmp d1, d0
0x4cdd9cdc   156  b.vs #+0x10 (addr 0x4cdd9cec)
0x4cdd9ce0   160  cset x0, gt
0x4cdd9ce4   164  csinv x0, x0, xzr, ge
0x4cdd9ce8   168  ret
0x4cdd9cec   172  movn x0, #0x0
0x4cdd9cf0   176  ret
0x4cdd9cf4   180  ldur x10, [x0, #-1]
0x4cdd9cf8   184  ldur x12, [x1, #-1]
0x4cdd9cfc   188  ldrb w11, [x10, #11]
0x4cdd9d00   192  ldrb w13, [x12, #11]
0x4cdd9d04   196  cmp x11, #0xb1 (177)
0x4cdd9d08   200  b.lt #+0x8 (addr 0x4cdd9d10)
0x4cdd9d0c   204  ret
0x4cdd9d10   208  cmp x11, #0x83 (131)
0x4cdd9d14   212  movz x16, #0x83
0x4cdd9d18   216  ccmp x13, x16, #nZcv, ne
0x4cdd9d1c   220  movz x16, #0xb1
0x4cdd9d20   224  ccmp x13, x16, #NzcV, ne
0x4cdd9d24   228  b.ge #-0x18 (addr 0x4cdd9d0c)
0x4cdd9d28   232  orr x14, x13, x11
0x4cdd9d2c   236  tst x14, #0xc0
0x4cdd9d30   240  b.eq #-0x24 (addr 0x4cdd9d0c)
0x4cdd9d34   244  cmp x11, #0x81 (129)
0x4cdd9d38   248  b.ne #+0x18 (addr 0x4cdd9d50)
0x4cdd9d3c   252  cmp x12, x10
0x4cdd9d40   256  b.ne #+0x10 (addr 0x4cdd9d50)
0x4cdd9d44   260  ldur d1, [x1, #7]
0x4cdd9d48   264  ldur d0, [x0, #7]
0x4cdd9d4c   268  b #-0x74 (addr 0x4cdd9cd8)
0x4cdd9d50   272  movz x16, #0x87
0x4cdd9d54   276  and x14, x13, x16
0x4cdd9d58   280  movz x16, #0x87
0x4cdd9d5c   284  and x15, x11, x16
0x4cdd9d60   288  cmp x14, #0x4 (4)
0x4cdd9d64   292  ccmp x15, #4, #nzcv, eq
0x4cdd9d68   296  b.ne #+0x5c (addr 0x4cdd9dc4)
0x4cdd9d6c   300  ldur x10, [x1, #15]
0x4cdd9d70   304  ldur x11, [x0, #15]
0x4cdd9d74   308  cmp x10, x11
0x4cdd9d78   312  b.eq #+0xc (addr 0x4cdd9d84)
0x4cdd9d7c   316  movz x0, #0x100000000
0x4cdd9d80   320  ret
0x4cdd9d84   324  cbnz x10, #+0xc (addr 0x4cdd9d90)
0x4cdd9d88   328  movz x0, #0x0
0x4cdd9d8c   332  ret
0x4cdd9d90   336  asr x10, x10, #32
0x4cdd9d94   340  add x11, x10, #0x17 (23)
0x4cdd9d98   344  add x1, x1, x11
0x4cdd9d9c   348  add x0, x0, x11
0x4cdd9da0   352  neg x10, x10
0x4cdd9da4   356  ldrb w11, [x1, x10]
0x4cdd9da8   360  ldrb w12, [x0, x10]
0x4cdd9dac   364  cmp x11, x12
0x4cdd9db0   368  b.ne #-0x34 (addr 0x4cdd9d7c)
0x4cdd9db4   372  add x10, x10, #0x1 (1)
0x4cdd9db8   376  cbnz x10, #-0x14 (addr 0x4cdd9da4)
0x4cdd9dbc   380  movz x0, #0x0
0x4cdd9dc0   384  ret
0x4cdd9dc4   388  movz x16, #0xc00000000
0x4cdd9dc8   392  sub csp, jssp, #0x10 (16)
0x4cdd9dcc   396  stp fp, lr, [jssp, #-16]!
0x4cdd9dd0   400  sub csp, jssp, #0x10 (16)
0x4cdd9dd4   404  str x16, [jssp, #-8]!
0x4cdd9dd8   408  ldr x17, pc+176 (addr 0x000000004cdd9e88)    ;; object: 0x4cdd9be1 <Code: COMPARE_IC>
0x4cdd9ddc   412  sub csp, jssp, #0x10 (16)
0x4cdd9de0   416  str x17, [jssp, #-8]!
0x4cdd9de4   420  add fp, jssp, #0x10 (16)
0x4cdd9de8   424  sub csp, jssp, #0x10 (16)
0x4cdd9dec   428  stp x0, x1, [jssp, #-16]!
0x4cdd9df0   432  movz x0, #0x2
0x4cdd9df4   436  ldr x1, pc+156 (addr 0x000000004cdd9e90)    ;; external reference (Runtime::StrictEqual)
0x4cdd9df8   440  ldr x16, pc+160 (addr 0x000000004cdd9e98)    ;; code: STUB, CEntryStub, minor: 4
0x4cdd9dfc   444  blr x16
0x4cdd9e00   448  mov jssp, fp
0x4cdd9e04   452  ldp fp, lr, [jssp], #16
0x4cdd9e08   456  ldr x1, [x26, #64]
0x4cdd9e0c   460  sub x0, x0, x1
0x4cdd9e10   464  ret
0x4cdd9e14   468  movz x16, #0xc00000000
0x4cdd9e18   472  sub csp, jssp, #0x10 (16)
0x4cdd9e1c   476  stp fp, lr, [jssp, #-16]!
0x4cdd9e20   480  sub csp, jssp, #0x10 (16)
0x4cdd9e24   484  str x16, [jssp, #-8]!
0x4cdd9e28   488  ldr x17, pc+120 (addr 0x000000004cdd9ea0)    ;; object: 0x4cdd9be1 <Code: COMPARE_IC>
0x4cdd9e2c   492  sub csp, jssp, #0x10 (16)
0x4cdd9e30   496  str x17, [jssp, #-8]!
0x4cdd9e34   500  add fp, jssp, #0x10 (16)
0x4cdd9e38   504  sub csp, jssp, #0x18 (24)
0x4cdd9e3c   508  stp lr, x0, [jssp, #-24]!
0x4cdd9e40   512  str x1, [jssp, #16]
0x4cdd9e44   516  movz x10, #0x2f00000000
0x4cdd9e48   520  sub csp, jssp, #0x18 (24)
0x4cdd9e4c   524  stp x10, x0, [jssp, #-24]!
0x4cdd9e50   528  str x1, [jssp, #16]
0x4cdd9e54   532  movz x0, #0x3
0x4cdd9e58   536  ldr x1, pc+80 (addr 0x000000004cdd9ea8)    ;; external reference (Runtime::CompareIC_Miss)
0x4cdd9e5c   540  ldr x16, pc+84 (addr 0x000000004cdd9eb0)    ;; code: STUB, CEntryStub, minor: 4
0x4cdd9e60   544  blr x16
0x4cdd9e64   548  add x11, x0, #0x5f (95)
0x4cdd9e68   552  ldr x1, [jssp, #16]
0x4cdd9e6c   556  ldp lr, x0, [jssp], #24
0x4cdd9e70   560  mov jssp, fp
0x4cdd9e74   564  ldp fp, lr, [jssp], #16
0x4cdd9e78   568  br x11
0x4cdd9e7c   572  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdd9e80   576  d63f03e0       constant
0x4cdd9e84   580  d503201f       constant
0x4cdd9e88   584  4cdd9be1       constant
0x4cdd9e8c   588  00000000       constant
0x4cdd9e90   592  00e50928       constant
0x4cdd9e94   596  00000000       constant
0x4cdd9e98   600  4cd06060       constant
0x4cdd9e9c   604  00000000       constant
0x4cdd9ea0   608  4cdd9be1       constant
0x4cdd9ea4   612  00000000       constant
0x4cdd9ea8   616  00c8a980       constant
0x4cdd9eac   620  00000000       constant
0x4cdd9eb0   624  4cd06060       constant
0x4cdd9eb4   628  00000000       constant


RelocInfo (size = 16)
0x4cdd9dd8  embedded object  (0x4cdd9be1 <Code: COMPARE_IC>)
0x4cdd9df4  external reference (Runtime::StrictEqual)  (0xe50928)
0x4cdd9df8  code target (STUB)  (0x4cd06060)
0x4cdd9e28  embedded object  (0x4cdd9be1 <Code: COMPARE_IC>)
0x4cdd9e58  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cdd9e5c  code target (STUB)  (0x4cd06060)
0x4cdd9e7c  constant pool (size 60)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*GENERIC -> GENERIC
compare_operation = LTE
name = CompareICStub
compiler = unknown
Instructions (size = 568)
0x4cddccc0     0  orr x16, x1, x0
0x4cddccc4     4  tbnz w16, #0, #+0x10 (addr 0x4cddccd4)
0x4cddccc8     8  asr x1, x1, #32
0x4cddcccc    12  sub x0, x1, x0, asr #32
0x4cddccd0    16  ret
0x4cddccd4    20  cmp x0, x1
0x4cddccd8    24  b.ne #+0x64 (addr 0x4cddcd3c)
0x4cddccdc    28  ldur x10, [x0, #-1]
0x4cddcce0    32  ldrb w10, [x10, #11]
0x4cddcce4    36  cmp x10, #0x81 (129)
0x4cddcce8    40  b.eq #+0x40 (addr 0x4cddcd28)
0x4cddccec    44  cmp x10, #0xb1 (177)
0x4cddccf0    48  b.ge #+0x148 (addr 0x4cddce38)
0x4cddccf4    52  cmp x10, #0x80 (128)
0x4cddccf8    56  b.eq #+0x140 (addr 0x4cddce38)
0x4cddccfc    60  cmp x10, #0x82 (130)
0x4cddcd00    64  b.eq #+0x138 (addr 0x4cddce38)
0x4cddcd04    68  cmp x10, #0x83 (131)
0x4cddcd08    72  b.ne #+0x18 (addr 0x4cddcd20)
0x4cddcd0c    76  ldr x16, [x26, #40]
0x4cddcd10    80  cmp x0, x16
0x4cddcd14    84  b.ne #+0xc (addr 0x4cddcd20)
0x4cddcd18    88  movz x0, #0x1
0x4cddcd1c    92  ret
0x4cddcd20    96  movz x0, #0x0
0x4cddcd24   100  ret
0x4cddcd28   104  ldur d0, [x0, #7]
0x4cddcd2c   108  fcmp d0, d0
0x4cddcd30   112  b.vc #-0x10 (addr 0x4cddcd20)
0x4cddcd34   116  movz x0, #0x1
0x4cddcd38   120  ret
0x4cddcd3c   124  and x16, x1, x0
0x4cddcd40   128  tbnz w16, #0, #+0x58 (addr 0x4cddcd98)
0x4cddcd44   132  tbz w0, #0, #+0x20 (addr 0x4cddcd64)
0x4cddcd48   136  ldur x16, [x0, #-1]
0x4cddcd4c   140  ldr x17, [x26, #120]
0x4cddcd50   144  cmp x16, x17
0x4cddcd54   148  b.ne #+0xe4 (addr 0x4cddce38)
0x4cddcd58   152  ldur d0, [x0, #7]
0x4cddcd5c   156  scvtf d1, x1, #32
0x4cddcd60   160  b #+0x1c (addr 0x4cddcd7c)
0x4cddcd64   164  ldur x16, [x1, #-1]
0x4cddcd68   168  ldr x17, [x26, #120]
0x4cddcd6c   172  cmp x16, x17
0x4cddcd70   176  b.ne #+0xc8 (addr 0x4cddce38)
0x4cddcd74   180  ldur d1, [x1, #7]
0x4cddcd78   184  scvtf d0, x0, #32
0x4cddcd7c   188  fcmp d1, d0
0x4cddcd80   192  b.vs #+0x10 (addr 0x4cddcd90)
0x4cddcd84   196  cset x0, gt
0x4cddcd88   200  csinv x0, x0, xzr, ge
0x4cddcd8c   204  ret
0x4cddcd90   208  movz x0, #0x1
0x4cddcd94   212  ret
0x4cddcd98   216  ldur x10, [x0, #-1]
0x4cddcd9c   220  ldur x12, [x1, #-1]
0x4cddcda0   224  ldrb w11, [x10, #11]
0x4cddcda4   228  ldrb w13, [x12, #11]
0x4cddcda8   232  cmp x11, #0x81 (129)
0x4cddcdac   236  b.ne #+0x18 (addr 0x4cddcdc4)
0x4cddcdb0   240  cmp x12, x10
0x4cddcdb4   244  b.ne #+0x10 (addr 0x4cddcdc4)
0x4cddcdb8   248  ldur d1, [x1, #7]
0x4cddcdbc   252  ldur d0, [x0, #7]
0x4cddcdc0   256  b #-0x44 (addr 0x4cddcd7c)
0x4cddcdc4   260  movz x16, #0x87
0x4cddcdc8   264  and x14, x13, x16
0x4cddcdcc   268  movz x16, #0x87
0x4cddcdd0   272  and x15, x11, x16
0x4cddcdd4   276  cmp x14, #0x4 (4)
0x4cddcdd8   280  ccmp x15, #4, #nzcv, eq
0x4cddcddc   284  b.ne #+0x5c (addr 0x4cddce38)
0x4cddcde0   288  ldur x10, [x1, #15]
0x4cddcde4   292  ldur x11, [x0, #15]
0x4cddcde8   296  subs x12, x10, x11
0x4cddcdec   300  csel x10, x11, x10, gt
0x4cddcdf0   304  cbz x10, #+0x30 (addr 0x4cddce20)
0x4cddcdf4   308  asr x10, x10, #32
0x4cddcdf8   312  add x11, x10, #0x17 (23)
0x4cddcdfc   316  add x1, x1, x11
0x4cddce00   320  add x0, x0, x11
0x4cddce04   324  neg x10, x10
0x4cddce08   328  ldrb w11, [x1, x10]
0x4cddce0c   332  ldrb w13, [x0, x10]
0x4cddce10   336  cmp x11, x13
0x4cddce14   340  b.ne #+0x10 (addr 0x4cddce24)
0x4cddce18   344  add x10, x10, #0x1 (1)
0x4cddce1c   348  cbnz x10, #-0x14 (addr 0x4cddce08)
0x4cddce20   352  subs x0, x12, #0x0 (0)
0x4cddce24   356  movz x10, #0x100000000
0x4cddce28   360  mov x11, #0xffffffff00000000
0x4cddce2c   364  csel x0, x10, x0, gt
0x4cddce30   368  csel x0, x11, x0, lt
0x4cddce34   372  ret
0x4cddce38   376  sub csp, jssp, #0x10 (16)
0x4cddce3c   380  stp x0, x1, [jssp, #-16]!
0x4cddce40   384  movz x10, #0x100000000
0x4cddce44   388  sub csp, jssp, #0x8 (8)
0x4cddce48   392  str x10, [jssp, #-8]!
0x4cddce4c   396  movz x0, #0x3
0x4cddce50   400  ldr x1, pc+128 (addr 0x000000004cddced0)    ;; external reference (Runtime::Compare)
0x4cddce54   404  ldr x16, pc+132 (addr 0x000000004cddced8)    ;; code: STUB, CEntryStub, minor: 4
0x4cddce58   408  br x16
0x4cddce5c   412  movz x16, #0xc00000000
0x4cddce60   416  sub csp, jssp, #0x10 (16)
0x4cddce64   420  stp fp, lr, [jssp, #-16]!
0x4cddce68   424  sub csp, jssp, #0x10 (16)
0x4cddce6c   428  str x16, [jssp, #-8]!
0x4cddce70   432  ldr x17, pc+112 (addr 0x000000004cddcee0)    ;; object: 0x4cddcc61 <Code: COMPARE_IC>
0x4cddce74   436  sub csp, jssp, #0x10 (16)
0x4cddce78   440  str x17, [jssp, #-8]!
0x4cddce7c   444  add fp, jssp, #0x10 (16)
0x4cddce80   448  sub csp, jssp, #0x18 (24)
0x4cddce84   452  stp lr, x0, [jssp, #-24]!
0x4cddce88   456  str x1, [jssp, #16]
0x4cddce8c   460  movz x10, #0x3300000000
0x4cddce90   464  sub csp, jssp, #0x18 (24)
0x4cddce94   468  stp x10, x0, [jssp, #-24]!
0x4cddce98   472  str x1, [jssp, #16]
0x4cddce9c   476  movz x0, #0x3
0x4cddcea0   480  ldr x1, pc+72 (addr 0x000000004cddcee8)    ;; external reference (Runtime::CompareIC_Miss)
0x4cddcea4   484  ldr x16, pc+76 (addr 0x000000004cddcef0)    ;; code: STUB, CEntryStub, minor: 4
0x4cddcea8   488  blr x16
0x4cddceac   492  add x11, x0, #0x5f (95)
0x4cddceb0   496  ldr x1, [jssp, #16]
0x4cddceb4   500  ldp lr, x0, [jssp], #24
0x4cddceb8   504  mov jssp, fp
0x4cddcebc   508  ldp fp, lr, [jssp], #16
0x4cddcec0   512  br x11
0x4cddcec4   516  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0x4cddcec8   520  d63f03e0       constant
0x4cddcecc   524  d503201f       constant
0x4cddced0   528  00e49ea8       constant
0x4cddced4   532  00000000       constant
0x4cddced8   536  4cd06060       constant
0x4cddcedc   540  00000000       constant
0x4cddcee0   544  4cddcc61       constant
0x4cddcee4   548  00000000       constant
0x4cddcee8   552  00c8a980       constant
0x4cddceec   556  00000000       constant
0x4cddcef0   560  4cd06060       constant
0x4cddcef4   564  00000000       constant


RelocInfo (size = 15)
0x4cddce50  external reference (Runtime::Compare)  (0xe49ea8)
0x4cddce54  code target (STUB)  (0x4cd06060)
0x4cddce70  embedded object  (0x4cddcc61 <Code: COMPARE_IC>)
0x4cddcea0  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cddcea4  code target (STUB)  (0x4cd06060)
0x4cddcec4  constant pool (size 52)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = NUMBER*SMI -> NUMBER
compare_operation = LTE
name = CompareICStub
compiler = unknown
Instructions (size = 280)
0x4cddcf60     0  tbnz w0, #0, #+0x88 (addr 0x4cddcfe8)
0x4cddcf64     4  scvtf d0, x0, #32
0x4cddcf68     8  scvtf d1, x1, #32
0x4cddcf6c    12  tbz w0, #0, #+0x18 (addr 0x4cddcf84)
0x4cddcf70    16  ldur x16, [x0, #-1]
0x4cddcf74    20  ldr x17, [x26, #120]
0x4cddcf78    24  cmp x16, x17
0x4cddcf7c    28  b.ne #+0x3c (addr 0x4cddcfb8)
0x4cddcf80    32  ldur d0, [x0, #7]
0x4cddcf84    36  tbz w1, #0, #+0x18 (addr 0x4cddcf9c)
0x4cddcf88    40  ldur x16, [x1, #-1]
0x4cddcf8c    44  ldr x17, [x26, #120]
0x4cddcf90    48  cmp x16, x17
0x4cddcf94    52  b.ne #+0x48 (addr 0x4cddcfdc)
0x4cddcf98    56  ldur d1, [x1, #7]
0x4cddcf9c    60  fcmp d1, d0
0x4cddcfa0    64  b.vs #+0x10 (addr 0x4cddcfb0)
0x4cddcfa4    68  cset x0, gt
0x4cddcfa8    72  csinv x0, x0, xzr, ge
0x4cddcfac    76  ret
0x4cddcfb0    80  ldr x16, pc+168 (addr 0x000000004cddd058)    ;; code: COMPARE_IC, GENERIC
0x4cddcfb4    84  br x16
0x4cddcfb8    88  ldr x16, [x26, #40]
0x4cddcfbc    92  cmp x0, x16
0x4cddcfc0    96  b.ne #+0x28 (addr 0x4cddcfe8)
0x4cddcfc4   100  tbz w1, #0, #-0x14 (addr 0x4cddcfb0)
0x4cddcfc8   104  ldur x16, [x1, #-1]
0x4cddcfcc   108  ldr x17, [x26, #120]
0x4cddcfd0   112  cmp x16, x17
0x4cddcfd4   116  b.ne #+0x8 (addr 0x4cddcfdc)
0x4cddcfd8   120  b #-0x28 (addr 0x4cddcfb0)
0x4cddcfdc   124  ldr x16, [x26, #40]
0x4cddcfe0   128  cmp x1, x16
0x4cddcfe4   132  b.eq #-0x34 (addr 0x4cddcfb0)
0x4cddcfe8   136  movz x16, #0xc00000000
0x4cddcfec   140  sub csp, jssp, #0x10 (16)
0x4cddcff0   144  stp fp, lr, [jssp, #-16]!
0x4cddcff4   148  sub csp, jssp, #0x10 (16)
0x4cddcff8   152  str x16, [jssp, #-8]!
0x4cddcffc   156  ldr x17, pc+100 (addr 0x000000004cddd060)    ;; object: 0x4cddcf01 <Code: COMPARE_IC>
0x4cddd000   160  sub csp, jssp, #0x10 (16)
0x4cddd004   164  str x17, [jssp, #-8]!
0x4cddd008   168  add fp, jssp, #0x10 (16)
0x4cddd00c   172  sub csp, jssp, #0x18 (24)
0x4cddd010   176  stp lr, x0, [jssp, #-24]!
0x4cddd014   180  str x1, [jssp, #16]
0x4cddd018   184  movz x10, #0x3300000000
0x4cddd01c   188  sub csp, jssp, #0x18 (24)
0x4cddd020   192  stp x10, x0, [jssp, #-24]!
0x4cddd024   196  str x1, [jssp, #16]
0x4cddd028   200  movz x0, #0x3
0x4cddd02c   204  ldr x1, pc+60 (addr 0x000000004cddd068)    ;; external reference (Runtime::CompareIC_Miss)
0x4cddd030   208  ldr x16, pc+64 (addr 0x000000004cddd070)    ;; code: STUB, CEntryStub, minor: 4
0x4cddd034   212  blr x16
0x4cddd038   216  add x11, x0, #0x5f (95)
0x4cddd03c   220  ldr x1, [jssp, #16]
0x4cddd040   224  ldp lr, x0, [jssp], #24
0x4cddd044   228  mov jssp, fp
0x4cddd048   232  ldp fp, lr, [jssp], #16
0x4cddd04c   236  br x11
0x4cddd050   240  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cddd054   244  d63f03e0       constant
0x4cddd058   248  4cddccc0       constant
0x4cddd05c   252  00000000       constant
0x4cddd060   256  4cddcf01       constant
0x4cddd064   260  00000000       constant
0x4cddd068   264  00c8a980       constant
0x4cddd06c   268  00000000       constant
0x4cddd070   272  4cd06060       constant
0x4cddd074   276  00000000       constant


RelocInfo (size = 15)
0x4cddcfb0  code target (COMPARE_IC)  (0x4cddccc0)
0x4cddcffc  embedded object  (0x4cddcf01 <Code: COMPARE_IC>)
0x4cddd02c  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cddd030  code target (STUB)  (0x4cd06060)
0x4cddd050  constant pool (size 40)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*GENERIC -> GENERIC
compare_operation = GT
name = CompareICStub
compiler = unknown
Instructions (size = 512)
0x4cddd0e0     0  orr x16, x1, x0
0x4cddd0e4     4  tbnz w16, #0, #+0x10 (addr 0x4cddd0f4)
0x4cddd0e8     8  asr x1, x1, #32
0x4cddd0ec    12  sub x0, x1, x0, asr #32
0x4cddd0f0    16  ret
0x4cddd0f4    20  cmp x0, x1
0x4cddd0f8    24  b.ne #+0x2c (addr 0x4cddd124)
0x4cddd0fc    28  ldur x10, [x0, #-1]
0x4cddd100    32  ldrb w10, [x10, #11]
0x4cddd104    36  cmp x10, #0xb1 (177)
0x4cddd108    40  b.ge #+0x118 (addr 0x4cddd220)
0x4cddd10c    44  cmp x10, #0x80 (128)
0x4cddd110    48  b.eq #+0x110 (addr 0x4cddd220)
0x4cddd114    52  cmp x10, #0x82 (130)
0x4cddd118    56  b.eq #+0x108 (addr 0x4cddd220)
0x4cddd11c    60  movn x0, #0x0
0x4cddd120    64  ret
0x4cddd124    68  and x16, x1, x0
0x4cddd128    72  tbnz w16, #0, #+0x58 (addr 0x4cddd180)
0x4cddd12c    76  tbz w0, #0, #+0x20 (addr 0x4cddd14c)
0x4cddd130    80  ldur x16, [x0, #-1]
0x4cddd134    84  ldr x17, [x26, #120]
0x4cddd138    88  cmp x16, x17
0x4cddd13c    92  b.ne #+0xe4 (addr 0x4cddd220)
0x4cddd140    96  ldur d0, [x0, #7]
0x4cddd144   100  scvtf d1, x1, #32
0x4cddd148   104  b #+0x1c (addr 0x4cddd164)
0x4cddd14c   108  ldur x16, [x1, #-1]
0x4cddd150   112  ldr x17, [x26, #120]
0x4cddd154   116  cmp x16, x17
0x4cddd158   120  b.ne #+0xc8 (addr 0x4cddd220)
0x4cddd15c   124  ldur d1, [x1, #7]
0x4cddd160   128  scvtf d0, x0, #32
0x4cddd164   132  fcmp d1, d0
0x4cddd168   136  b.vs #+0x10 (addr 0x4cddd178)
0x4cddd16c   140  cset x0, gt
0x4cddd170   144  csinv x0, x0, xzr, ge
0x4cddd174   148  ret
0x4cddd178   152  movn x0, #0x0
0x4cddd17c   156  ret
0x4cddd180   160  ldur x10, [x0, #-1]
0x4cddd184   164  ldur x12, [x1, #-1]
0x4cddd188   168  ldrb w11, [x10, #11]
0x4cddd18c   172  ldrb w13, [x12, #11]
0x4cddd190   176  cmp x11, #0x81 (129)
0x4cddd194   180  b.ne #+0x18 (addr 0x4cddd1ac)
0x4cddd198   184  cmp x12, x10
0x4cddd19c   188  b.ne #+0x10 (addr 0x4cddd1ac)
0x4cddd1a0   192  ldur d1, [x1, #7]
0x4cddd1a4   196  ldur d0, [x0, #7]
0x4cddd1a8   200  b #-0x44 (addr 0x4cddd164)
0x4cddd1ac   204  movz x16, #0x87
0x4cddd1b0   208  and x14, x13, x16
0x4cddd1b4   212  movz x16, #0x87
0x4cddd1b8   216  and x15, x11, x16
0x4cddd1bc   220  cmp x14, #0x4 (4)
0x4cddd1c0   224  ccmp x15, #4, #nzcv, eq
0x4cddd1c4   228  b.ne #+0x5c (addr 0x4cddd220)
0x4cddd1c8   232  ldur x10, [x1, #15]
0x4cddd1cc   236  ldur x11, [x0, #15]
0x4cddd1d0   240  subs x12, x10, x11
0x4cddd1d4   244  csel x10, x11, x10, gt
0x4cddd1d8   248  cbz x10, #+0x30 (addr 0x4cddd208)
0x4cddd1dc   252  asr x10, x10, #32
0x4cddd1e0   256  add x11, x10, #0x17 (23)
0x4cddd1e4   260  add x1, x1, x11
0x4cddd1e8   264  add x0, x0, x11
0x4cddd1ec   268  neg x10, x10
0x4cddd1f0   272  ldrb w11, [x1, x10]
0x4cddd1f4   276  ldrb w13, [x0, x10]
0x4cddd1f8   280  cmp x11, x13
0x4cddd1fc   284  b.ne #+0x10 (addr 0x4cddd20c)
0x4cddd200   288  add x10, x10, #0x1 (1)
0x4cddd204   292  cbnz x10, #-0x14 (addr 0x4cddd1f0)
0x4cddd208   296  subs x0, x12, #0x0 (0)
0x4cddd20c   300  movz x10, #0x100000000
0x4cddd210   304  mov x11, #0xffffffff00000000
0x4cddd214   308  csel x0, x10, x0, gt
0x4cddd218   312  csel x0, x11, x0, lt
0x4cddd21c   316  ret
0x4cddd220   320  sub csp, jssp, #0x10 (16)
0x4cddd224   324  stp x0, x1, [jssp, #-16]!
0x4cddd228   328  mov x10, #0xffffffff00000000
0x4cddd22c   332  sub csp, jssp, #0x8 (8)
0x4cddd230   336  str x10, [jssp, #-8]!
0x4cddd234   340  movz x0, #0x3
0x4cddd238   344  ldr x1, pc+128 (addr 0x000000004cddd2b8)    ;; external reference (Runtime::Compare)
0x4cddd23c   348  ldr x16, pc+132 (addr 0x000000004cddd2c0)    ;; code: STUB, CEntryStub, minor: 4
0x4cddd240   352  br x16
0x4cddd244   356  movz x16, #0xc00000000
0x4cddd248   360  sub csp, jssp, #0x10 (16)
0x4cddd24c   364  stp fp, lr, [jssp, #-16]!
0x4cddd250   368  sub csp, jssp, #0x10 (16)
0x4cddd254   372  str x16, [jssp, #-8]!
0x4cddd258   376  ldr x17, pc+112 (addr 0x000000004cddd2c8)    ;; object: 0x4cddd081 <Code: COMPARE_IC>
0x4cddd25c   380  sub csp, jssp, #0x10 (16)
0x4cddd260   384  str x17, [jssp, #-8]!
0x4cddd264   388  add fp, jssp, #0x10 (16)
0x4cddd268   392  sub csp, jssp, #0x18 (24)
0x4cddd26c   396  stp lr, x0, [jssp, #-24]!
0x4cddd270   400  str x1, [jssp, #16]
0x4cddd274   404  movz x10, #0x3200000000
0x4cddd278   408  sub csp, jssp, #0x18 (24)
0x4cddd27c   412  stp x10, x0, [jssp, #-24]!
0x4cddd280   416  str x1, [jssp, #16]
0x4cddd284   420  movz x0, #0x3
0x4cddd288   424  ldr x1, pc+72 (addr 0x000000004cddd2d0)    ;; external reference (Runtime::CompareIC_Miss)
0x4cddd28c   428  ldr x16, pc+76 (addr 0x000000004cddd2d8)    ;; code: STUB, CEntryStub, minor: 4
0x4cddd290   432  blr x16
0x4cddd294   436  add x11, x0, #0x5f (95)
0x4cddd298   440  ldr x1, [jssp, #16]
0x4cddd29c   444  ldp lr, x0, [jssp], #24
0x4cddd2a0   448  mov jssp, fp
0x4cddd2a4   452  ldp fp, lr, [jssp], #16
0x4cddd2a8   456  br x11
0x4cddd2ac   460  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0x4cddd2b0   464  d63f03e0       constant
0x4cddd2b4   468  d503201f       constant
0x4cddd2b8   472  00e49ea8       constant
0x4cddd2bc   476  00000000       constant
0x4cddd2c0   480  4cd06060       constant
0x4cddd2c4   484  00000000       constant
0x4cddd2c8   488  4cddd081       constant
0x4cddd2cc   492  00000000       constant
0x4cddd2d0   496  00c8a980       constant
0x4cddd2d4   500  00000000       constant
0x4cddd2d8   504  4cd06060       constant
0x4cddd2dc   508  00000000       constant


RelocInfo (size = 15)
0x4cddd238  external reference (Runtime::Compare)  (0xe49ea8)
0x4cddd23c  code target (STUB)  (0x4cd06060)
0x4cddd258  embedded object  (0x4cddd081 <Code: COMPARE_IC>)
0x4cddd288  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cddd28c  code target (STUB)  (0x4cd06060)
0x4cddd2ac  constant pool (size 52)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = NUMBER*SMI -> NUMBER
compare_operation = GT
name = CompareICStub
compiler = unknown
Instructions (size = 280)
0x4cddd340     0  tbnz w0, #0, #+0x88 (addr 0x4cddd3c8)
0x4cddd344     4  scvtf d0, x0, #32
0x4cddd348     8  scvtf d1, x1, #32
0x4cddd34c    12  tbz w0, #0, #+0x18 (addr 0x4cddd364)
0x4cddd350    16  ldur x16, [x0, #-1]
0x4cddd354    20  ldr x17, [x26, #120]
0x4cddd358    24  cmp x16, x17
0x4cddd35c    28  b.ne #+0x3c (addr 0x4cddd398)
0x4cddd360    32  ldur d0, [x0, #7]
0x4cddd364    36  tbz w1, #0, #+0x18 (addr 0x4cddd37c)
0x4cddd368    40  ldur x16, [x1, #-1]
0x4cddd36c    44  ldr x17, [x26, #120]
0x4cddd370    48  cmp x16, x17
0x4cddd374    52  b.ne #+0x48 (addr 0x4cddd3bc)
0x4cddd378    56  ldur d1, [x1, #7]
0x4cddd37c    60  fcmp d1, d0
0x4cddd380    64  b.vs #+0x10 (addr 0x4cddd390)
0x4cddd384    68  cset x0, gt
0x4cddd388    72  csinv x0, x0, xzr, ge
0x4cddd38c    76  ret
0x4cddd390    80  ldr x16, pc+168 (addr 0x000000004cddd438)    ;; code: COMPARE_IC, GENERIC
0x4cddd394    84  br x16
0x4cddd398    88  ldr x16, [x26, #40]
0x4cddd39c    92  cmp x0, x16
0x4cddd3a0    96  b.ne #+0x28 (addr 0x4cddd3c8)
0x4cddd3a4   100  tbz w1, #0, #-0x14 (addr 0x4cddd390)
0x4cddd3a8   104  ldur x16, [x1, #-1]
0x4cddd3ac   108  ldr x17, [x26, #120]
0x4cddd3b0   112  cmp x16, x17
0x4cddd3b4   116  b.ne #+0x8 (addr 0x4cddd3bc)
0x4cddd3b8   120  b #-0x28 (addr 0x4cddd390)
0x4cddd3bc   124  ldr x16, [x26, #40]
0x4cddd3c0   128  cmp x1, x16
0x4cddd3c4   132  b.eq #-0x34 (addr 0x4cddd390)
0x4cddd3c8   136  movz x16, #0xc00000000
0x4cddd3cc   140  sub csp, jssp, #0x10 (16)
0x4cddd3d0   144  stp fp, lr, [jssp, #-16]!
0x4cddd3d4   148  sub csp, jssp, #0x10 (16)
0x4cddd3d8   152  str x16, [jssp, #-8]!
0x4cddd3dc   156  ldr x17, pc+100 (addr 0x000000004cddd440)    ;; object: 0x4cddd2e1 <Code: COMPARE_IC>
0x4cddd3e0   160  sub csp, jssp, #0x10 (16)
0x4cddd3e4   164  str x17, [jssp, #-8]!
0x4cddd3e8   168  add fp, jssp, #0x10 (16)
0x4cddd3ec   172  sub csp, jssp, #0x18 (24)
0x4cddd3f0   176  stp lr, x0, [jssp, #-24]!
0x4cddd3f4   180  str x1, [jssp, #16]
0x4cddd3f8   184  movz x10, #0x3200000000
0x4cddd3fc   188  sub csp, jssp, #0x18 (24)
0x4cddd400   192  stp x10, x0, [jssp, #-24]!
0x4cddd404   196  str x1, [jssp, #16]
0x4cddd408   200  movz x0, #0x3
0x4cddd40c   204  ldr x1, pc+60 (addr 0x000000004cddd448)    ;; external reference (Runtime::CompareIC_Miss)
0x4cddd410   208  ldr x16, pc+64 (addr 0x000000004cddd450)    ;; code: STUB, CEntryStub, minor: 4
0x4cddd414   212  blr x16
0x4cddd418   216  add x11, x0, #0x5f (95)
0x4cddd41c   220  ldr x1, [jssp, #16]
0x4cddd420   224  ldp lr, x0, [jssp], #24
0x4cddd424   228  mov jssp, fp
0x4cddd428   232  ldp fp, lr, [jssp], #16
0x4cddd42c   236  br x11
0x4cddd430   240  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cddd434   244  d63f03e0       constant
0x4cddd438   248  4cddd0e0       constant
0x4cddd43c   252  00000000       constant
0x4cddd440   256  4cddd2e1       constant
0x4cddd444   260  00000000       constant
0x4cddd448   264  00c8a980       constant
0x4cddd44c   268  00000000       constant
0x4cddd450   272  4cd06060       constant
0x4cddd454   276  00000000       constant


RelocInfo (size = 15)
0x4cddd390  code target (COMPARE_IC)  (0x4cddd0e0)
0x4cddd3dc  embedded object  (0x4cddd2e1 <Code: COMPARE_IC>)
0x4cddd40c  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cddd410  code target (STUB)  (0x4cd06060)
0x4cddd430  constant pool (size 40)


kind = HANDLER
major_key = <NoCache>Stub
name = Math
compiler = unknown
Instructions (size = 120)
0x4cddde60     0  sub csp, jssp, #0x8 (8)
0x4cddde64     4  str x3, [jssp, #-8]!
0x4cddde68     8  sub csp, jssp, #0x8 (8)
0x4cddde6c    12  str x0, [jssp, #-8]!
0x4cddde70    16  ldr x0, pc+80 (addr 0x000000004cdddec0)    ;; object: 0x210c5d51 Cell for 0
0x4cddde74    20  ldur x0, [x0, #7]
0x4cddde78    24  cmp x0, #0x0 (0)
0x4cddde7c    28  b.ne #+0x2c (addr 0x4cdddea8)
0x4cddde80    32  ldr x0, pc+72 (addr 0x000000004cdddec8)    ;; object: 0xffffaa139931 WeakCell for 0x21046e89 PropertyCell for 0x21046e51 <a Math with map 0x2a80e5a1>
0x4cddde84    36  ldur x0, [x0, #7]
0x4cddde88    40  tbz w0, #0, #+0x20 (addr 0x4cdddea8)
0x4cddde8c    44  ldur x0, [x0, #15]
0x4cddde90    48  ldr x16, [x26, #88]
0x4cddde94    52  cmp x0, x16
0x4cddde98    56  b.eq #+0x10 (addr 0x4cdddea8)
0x4cddde9c    60  add jssp, jssp, #0x10 (16)
0x4cdddea0    64  ret
0x4cdddea4    68  b #+0x14 (addr 0x4cdddeb8)
0x4cdddea8    72  ldr x0, [jssp], #8
0x4cdddeac    76  ldr x3, [jssp], #8
0x4cdddeb0    80  ldr x16, pc+32 (addr 0x000000004cddded0)    ;; code: BUILTIN
0x4cdddeb4    84  br x16
0x4cdddeb8    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cdddebc    92  d63f03e0       constant
0x4cdddec0    96  210c5d51       constant
0x4cdddec4   100  00000000       constant
0x4cdddec8   104  aa139931       constant
0x4cdddecc   108  0000ffff       constant
0x4cddded0   112  4cd222e0       constant
0x4cddded4   116  00000000       constant


RelocInfo (size = 9)
0x4cddde70  embedded object  (0x210c5d51 Cell for 0)
0x4cddde80  embedded object  (0xffffaa139931 WeakCell for 0x21046e89 PropertyCell for 0x21046e51 <a Math with map 0x2a80e5a1>)
0x4cdddeb0  code target (BUILTIN)  (0x4cd222e0)
0x4cdddeb8  constant pool (size 32)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cdddf40     0  ldur x0, [x1, #-1]
0x4cdddf44     4  ldur x0, [x0, #47]
0x4cdddf48     8  movz x16, #0x14f
0x4cdddf4c    12  ldr x0, [x0, x16]
0x4cdddf50    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cdddf40     0  ldur x0, [x1, #-1]
0x4cdddf44     4  ldur x0, [x0, #47]
0x4cdddf48     8  movz x16, #0x14f
0x4cdddf4c    12  ldr x0, [x0, x16]
0x4cdddf50    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = BINARY_OP_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 1179
type = NORMAL
name = BinaryOpICStub
compiler = crankshaft
Instructions (size = 192)
0x4cddeb40     0  mov x2, x1
0x4cddeb44     4  tbnz w2, #0, #+0x44 (addr 0x4cddeb88)
0x4cddeb48     8  mov x3, x0
0x4cddeb4c    12  tbnz w3, #0, #+0x4c (addr 0x4cddeb98)
0x4cddeb50    16  asr x3, x3, #32
0x4cddeb54    20  cmp w3, #0x1 (1)
0x4cddeb58    24  b.eq #+0x8 (addr 0x4cddeb60)
0x4cddeb5c    28  b #+0x4c (addr 0x4cddeba8)
0x4cddeb60    32  asr x2, x2, #32
0x4cddeb64    36  tbz w2, #31, #+0x18 (addr 0x4cddeb7c)
0x4cddeb68    40  neg w2, w2
0x4cddeb6c    44  movz w2, #0x0
0x4cddeb70    48  negs w2, w2
0x4cddeb74    52  b.eq #+0x44 (addr 0x4cddebb8)
0x4cddeb78    56  b #+0x8 (addr 0x4cddeb80)
0x4cddeb7c    60  movz w2, #0x0
0x4cddeb80    64  lsl x0, x2, #32
0x4cddeb84    68  ret
0x4cddeb88    72  movz x16, #0x0
0x4cddeb8c    76  sub csp, jssp, #0x10 (16)
0x4cddeb90    80  stp fp, lr, [jssp, #-16]!
0x4cddeb94    84  bl #+0x34 (addr 0x4cddebc8)
0x4cddeb98    88  movz x16, #0x8
0x4cddeb9c    92  sub csp, jssp, #0x10 (16)
0x4cddeba0    96  stp fp, lr, [jssp, #-16]!
0x4cddeba4   100  bl #+0x24 (addr 0x4cddebc8)
0x4cddeba8   104  movz x16, #0x10
0x4cddebac   108  sub csp, jssp, #0x10 (16)
0x4cddebb0   112  stp fp, lr, [jssp, #-16]!
0x4cddebb4   116  bl #+0x14 (addr 0x4cddebc8)
0x4cddebb8   120  movz x16, #0x18
0x4cddebbc   124  sub csp, jssp, #0x10 (16)
0x4cddebc0   128  stp fp, lr, [jssp, #-16]!
0x4cddebc4   132  bl #+0x4 (addr 0x4cddebc8)
0x4cddebc8   136  movz x17, #0xa00000000
0x4cddebcc   140  sub csp, jssp, #0x10 (16)
0x4cddebd0   144  stp x17, cp, [jssp, #-16]!
0x4cddebd4   148  add fp, jssp, #0x10 (16)
0x4cddebd8   152  ldr x17, pc+24 (addr 0x000000004cddebf0)    ;; lazy deoptimization bailout 0
0x4cddebdc   156  add x17, x17, x16
0x4cddebe0   160  br x17
0x4cddebe4   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cddebe8   168  d63f03e0       constant
0x4cddebec   172  d503201f       constant
0x4cddebf0   176  4cb06000       constant
0x4cddebf4   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cddebd8  runtime entry
0x4cddebe4  constant pool (size 20)

--- End code ---
kind = BINARY_OP_IC
major_key = BinaryOpICStub
ic_state = MONOMORPHIC
extra_ic_state = 1179
type = NORMAL
name = BinaryOpICStub(MOD:Smi*1->Smi)
compiler = crankshaft
Instructions (size = 192)
0x4cddeb40     0  mov x2, x1
0x4cddeb44     4  tbnz w2, #0, #+0x44 (addr 0x4cddeb88)
0x4cddeb48     8  mov x3, x0
0x4cddeb4c    12  tbnz w3, #0, #+0x4c (addr 0x4cddeb98)
0x4cddeb50    16  asr x3, x3, #32
0x4cddeb54    20  cmp w3, #0x1 (1)
0x4cddeb58    24  b.eq #+0x8 (addr 0x4cddeb60)
0x4cddeb5c    28  b #+0x4c (addr 0x4cddeba8)
0x4cddeb60    32  asr x2, x2, #32
0x4cddeb64    36  tbz w2, #31, #+0x18 (addr 0x4cddeb7c)
0x4cddeb68    40  neg w2, w2
0x4cddeb6c    44  movz w2, #0x0
0x4cddeb70    48  negs w2, w2
0x4cddeb74    52  b.eq #+0x44 (addr 0x4cddebb8)
0x4cddeb78    56  b #+0x8 (addr 0x4cddeb80)
0x4cddeb7c    60  movz w2, #0x0
0x4cddeb80    64  lsl x0, x2, #32
0x4cddeb84    68  ret
0x4cddeb88    72  movz x16, #0x0
0x4cddeb8c    76  sub csp, jssp, #0x10 (16)
0x4cddeb90    80  stp fp, lr, [jssp, #-16]!
0x4cddeb94    84  bl #+0x34 (addr 0x4cddebc8)
0x4cddeb98    88  movz x16, #0x8
0x4cddeb9c    92  sub csp, jssp, #0x10 (16)
0x4cddeba0    96  stp fp, lr, [jssp, #-16]!
0x4cddeba4   100  bl #+0x24 (addr 0x4cddebc8)
0x4cddeba8   104  movz x16, #0x10
0x4cddebac   108  sub csp, jssp, #0x10 (16)
0x4cddebb0   112  stp fp, lr, [jssp, #-16]!
0x4cddebb4   116  bl #+0x14 (addr 0x4cddebc8)
0x4cddebb8   120  movz x16, #0x18
0x4cddebbc   124  sub csp, jssp, #0x10 (16)
0x4cddebc0   128  stp fp, lr, [jssp, #-16]!
0x4cddebc4   132  bl #+0x4 (addr 0x4cddebc8)
0x4cddebc8   136  movz x17, #0xa00000000
0x4cddebcc   140  sub csp, jssp, #0x10 (16)
0x4cddebd0   144  stp x17, cp, [jssp, #-16]!
0x4cddebd4   148  add fp, jssp, #0x10 (16)
0x4cddebd8   152  ldr x17, pc+24 (addr 0x000000004cddebf0)    ;; lazy deoptimization bailout 0
0x4cddebdc   156  add x17, x17, x16
0x4cddebe0   160  br x17
0x4cddebe4   164  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cddebe8   168  d63f03e0       constant
0x4cddebec   172  d503201f       constant
0x4cddebf0   176  4cb06000       constant
0x4cddebf4   180  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cddebd8  runtime entry
0x4cddebe4  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = SMI*NUMBER -> NUMBER
compare_operation = LT
name = CompareICStub
compiler = unknown
Instructions (size = 280)
0x4cddfc00     0  tbnz w1, #0, #+0x88 (addr 0x4cddfc88)
0x4cddfc04     4  scvtf d0, x0, #32
0x4cddfc08     8  scvtf d1, x1, #32
0x4cddfc0c    12  tbz w0, #0, #+0x18 (addr 0x4cddfc24)
0x4cddfc10    16  ldur x16, [x0, #-1]
0x4cddfc14    20  ldr x17, [x26, #120]
0x4cddfc18    24  cmp x16, x17
0x4cddfc1c    28  b.ne #+0x3c (addr 0x4cddfc58)
0x4cddfc20    32  ldur d0, [x0, #7]
0x4cddfc24    36  tbz w1, #0, #+0x18 (addr 0x4cddfc3c)
0x4cddfc28    40  ldur x16, [x1, #-1]
0x4cddfc2c    44  ldr x17, [x26, #120]
0x4cddfc30    48  cmp x16, x17
0x4cddfc34    52  b.ne #+0x48 (addr 0x4cddfc7c)
0x4cddfc38    56  ldur d1, [x1, #7]
0x4cddfc3c    60  fcmp d1, d0
0x4cddfc40    64  b.vs #+0x10 (addr 0x4cddfc50)
0x4cddfc44    68  cset x0, gt
0x4cddfc48    72  csinv x0, x0, xzr, ge
0x4cddfc4c    76  ret
0x4cddfc50    80  ldr x16, pc+168 (addr 0x000000004cddfcf8)    ;; code: COMPARE_IC, GENERIC
0x4cddfc54    84  br x16
0x4cddfc58    88  ldr x16, [x26, #40]
0x4cddfc5c    92  cmp x0, x16
0x4cddfc60    96  b.ne #+0x28 (addr 0x4cddfc88)
0x4cddfc64   100  tbz w1, #0, #-0x14 (addr 0x4cddfc50)
0x4cddfc68   104  ldur x16, [x1, #-1]
0x4cddfc6c   108  ldr x17, [x26, #120]
0x4cddfc70   112  cmp x16, x17
0x4cddfc74   116  b.ne #+0x8 (addr 0x4cddfc7c)
0x4cddfc78   120  b #-0x28 (addr 0x4cddfc50)
0x4cddfc7c   124  ldr x16, [x26, #40]
0x4cddfc80   128  cmp x1, x16
0x4cddfc84   132  b.eq #-0x34 (addr 0x4cddfc50)
0x4cddfc88   136  movz x16, #0xc00000000
0x4cddfc8c   140  sub csp, jssp, #0x10 (16)
0x4cddfc90   144  stp fp, lr, [jssp, #-16]!
0x4cddfc94   148  sub csp, jssp, #0x10 (16)
0x4cddfc98   152  str x16, [jssp, #-8]!
0x4cddfc9c   156  ldr x17, pc+100 (addr 0x000000004cddfd00)    ;; object: 0x4cddfba1 <Code: COMPARE_IC>
0x4cddfca0   160  sub csp, jssp, #0x10 (16)
0x4cddfca4   164  str x17, [jssp, #-8]!
0x4cddfca8   168  add fp, jssp, #0x10 (16)
0x4cddfcac   172  sub csp, jssp, #0x18 (24)
0x4cddfcb0   176  stp lr, x0, [jssp, #-24]!
0x4cddfcb4   180  str x1, [jssp, #16]
0x4cddfcb8   184  movz x10, #0x3100000000
0x4cddfcbc   188  sub csp, jssp, #0x18 (24)
0x4cddfcc0   192  stp x10, x0, [jssp, #-24]!
0x4cddfcc4   196  str x1, [jssp, #16]
0x4cddfcc8   200  movz x0, #0x3
0x4cddfccc   204  ldr x1, pc+60 (addr 0x000000004cddfd08)    ;; external reference (Runtime::CompareIC_Miss)
0x4cddfcd0   208  ldr x16, pc+64 (addr 0x000000004cddfd10)    ;; code: STUB, CEntryStub, minor: 4
0x4cddfcd4   212  blr x16
0x4cddfcd8   216  add x11, x0, #0x5f (95)
0x4cddfcdc   220  ldr x1, [jssp, #16]
0x4cddfce0   224  ldp lr, x0, [jssp], #24
0x4cddfce4   228  mov jssp, fp
0x4cddfce8   232  ldp fp, lr, [jssp], #16
0x4cddfcec   236  br x11
0x4cddfcf0   240  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cddfcf4   244  d63f03e0       constant
0x4cddfcf8   248  4cdd22a0       constant
0x4cddfcfc   252  00000000       constant
0x4cddfd00   256  4cddfba1       constant
0x4cddfd04   260  00000000       constant
0x4cddfd08   264  00c8a980       constant
0x4cddfd0c   268  00000000       constant
0x4cddfd10   272  4cd06060       constant
0x4cddfd14   276  00000000       constant


RelocInfo (size = 15)
0x4cddfc50  code target (COMPARE_IC)  (0x4cdd22a0)
0x4cddfc9c  embedded object  (0x4cddfba1 <Code: COMPARE_IC>)
0x4cddfccc  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cddfcd0  code target (STUB)  (0x4cd06060)
0x4cddfcf0  constant pool (size 40)


--- Code ---
kind = TO_BOOLEAN_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 34
type = NORMAL
name = ToBooleanICStub
compiler = crankshaft
Instructions (size = 176)
0x4cde3700     0  ldr x16, [x26, #64]
0x4cde3704     4  cmp x0, x16
0x4cde3708     8  b.eq #+0x3c (addr 0x4cde3744)
0x4cde370c    12  ldr x16, [x26, #72]
0x4cde3710    16  cmp x0, x16
0x4cde3714    20  b.eq #+0x28 (addr 0x4cde373c)
0x4cde3718    24  tbz w0, #0, #+0x50 (addr 0x4cde3768)
0x4cde371c    28  ldur x2, [x0, #-1]
0x4cde3720    32  ldrb w1, [x2, #11]
0x4cde3724    36  cmp x1, #0x80 (128)
0x4cde3728    40  b.ge #+0x10 (addr 0x4cde3738)
0x4cde372c    44  ldur x1, [x0, #15]
0x4cde3730    48  cbz x1, #+0xc (addr 0x4cde373c)
0x4cde3734    52  b #+0x10 (addr 0x4cde3744)
0x4cde3738    56  b #+0x30 (addr 0x4cde3768)
0x4cde373c    60  ldr x0, pc+28 (addr 0x000000004cde3758)    ;; object: 0x210042b1 <false>
0x4cde3740    64  ret
0x4cde3744    68  ldr x0, pc+28 (addr 0x000000004cde3760)    ;; object: 0x21004281 <true>
0x4cde3748    72  ret
0x4cde374c    76  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cde3750    80  d63f03e0       constant
0x4cde3754    84  d503201f       constant
0x4cde3758    88  210042b1       constant
0x4cde375c    92  00000000       constant
0x4cde3760    96  21004281       constant
0x4cde3764   100  00000000       constant
0x4cde3768   104  movz x16, #0x0
0x4cde376c   108  sub csp, jssp, #0x10 (16)
0x4cde3770   112  stp fp, lr, [jssp, #-16]!
0x4cde3774   116  bl #+0x4 (addr 0x4cde3778)
0x4cde3778   120  movz x17, #0xa00000000
0x4cde377c   124  sub csp, jssp, #0x10 (16)
0x4cde3780   128  stp x17, cp, [jssp, #-16]!
0x4cde3784   132  add fp, jssp, #0x10 (16)
0x4cde3788   136  ldr x17, pc+24 (addr 0x000000004cde37a0)    ;; lazy deoptimization bailout 0
0x4cde378c   140  add x17, x17, x16
0x4cde3790   144  br x17
0x4cde3794   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cde3798   152  d63f03e0       constant
0x4cde379c   156  d503201f       constant
0x4cde37a0   160  4cb06000       constant
0x4cde37a4   164  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cde373c  embedded object  (0x210042b1 <false>)
0x4cde3744  embedded object  (0x21004281 <true>)
0x4cde374c  constant pool (size 28)
0x4cde3788  runtime entry
0x4cde3794  constant pool (size 20)

--- End code ---
kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 34
type = NORMAL
name = ToBooleanICStub(Bool,String)
compiler = crankshaft
Instructions (size = 176)
0x4cde3700     0  ldr x16, [x26, #64]
0x4cde3704     4  cmp x0, x16
0x4cde3708     8  b.eq #+0x3c (addr 0x4cde3744)
0x4cde370c    12  ldr x16, [x26, #72]
0x4cde3710    16  cmp x0, x16
0x4cde3714    20  b.eq #+0x28 (addr 0x4cde373c)
0x4cde3718    24  tbz w0, #0, #+0x50 (addr 0x4cde3768)
0x4cde371c    28  ldur x2, [x0, #-1]
0x4cde3720    32  ldrb w1, [x2, #11]
0x4cde3724    36  cmp x1, #0x80 (128)
0x4cde3728    40  b.ge #+0x10 (addr 0x4cde3738)
0x4cde372c    44  ldur x1, [x0, #15]
0x4cde3730    48  cbz x1, #+0xc (addr 0x4cde373c)
0x4cde3734    52  b #+0x10 (addr 0x4cde3744)
0x4cde3738    56  b #+0x30 (addr 0x4cde3768)
0x4cde373c    60  ldr x0, pc+28 (addr 0x000000004cde3758)    ;; object: 0x210042b1 <false>
0x4cde3740    64  ret
0x4cde3744    68  ldr x0, pc+28 (addr 0x000000004cde3760)    ;; object: 0x21004281 <true>
0x4cde3748    72  ret
0x4cde374c    76  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cde3750    80  d63f03e0       constant
0x4cde3754    84  d503201f       constant
0x4cde3758    88  210042b1       constant
0x4cde375c    92  00000000       constant
0x4cde3760    96  21004281       constant
0x4cde3764   100  00000000       constant
0x4cde3768   104  movz x16, #0x0
0x4cde376c   108  sub csp, jssp, #0x10 (16)
0x4cde3770   112  stp fp, lr, [jssp, #-16]!
0x4cde3774   116  bl #+0x4 (addr 0x4cde3778)
0x4cde3778   120  movz x17, #0xa00000000
0x4cde377c   124  sub csp, jssp, #0x10 (16)
0x4cde3780   128  stp x17, cp, [jssp, #-16]!
0x4cde3784   132  add fp, jssp, #0x10 (16)
0x4cde3788   136  ldr x17, pc+24 (addr 0x000000004cde37a0)    ;; lazy deoptimization bailout 0
0x4cde378c   140  add x17, x17, x16
0x4cde3790   144  br x17
0x4cde3794   148  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cde3798   152  d63f03e0       constant
0x4cde379c   156  d503201f       constant
0x4cde37a0   160  4cb06000       constant
0x4cde37a4   164  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cde373c  embedded object  (0x210042b1 <false>)
0x4cde3744  embedded object  (0x21004281 <true>)
0x4cde374c  constant pool (size 28)
0x4cde3788  runtime entry
0x4cde3794  constant pool (size 20)


--- Code ---
kind = TO_BOOLEAN_IC
major_key = <NoCache>Stub
ic_state = MONOMORPHIC
extra_ic_state = 20
type = NORMAL
name = ToBooleanICStub
compiler = crankshaft
Instructions (size = 160)
0x4cde3820     0  ldr x16, [x26, #56]
0x4cde3824     4  cmp x0, x16
0x4cde3828     8  b.eq #+0x24 (addr 0x4cde384c)
0x4cde382c    12  tbz w0, #0, #+0x4c (addr 0x4cde3878)
0x4cde3830    16  ldur x2, [x0, #-1]
0x4cde3834    20  ldrb w1, [x2, #12]
0x4cde3838    24  tbnz w1, #4, #+0x14 (addr 0x4cde384c)
0x4cde383c    28  ldrb w1, [x2, #11]
0x4cde3840    32  cmp x1, #0xb1 (177)
0x4cde3844    36  b.ge #+0x10 (addr 0x4cde3854)
0x4cde3848    40  b #+0x30 (addr 0x4cde3878)
0x4cde384c    44  ldr x0, pc+28 (addr 0x000000004cde3868)    ;; object: 0x210042b1 <false>
0x4cde3850    48  ret
0x4cde3854    52  ldr x0, pc+28 (addr 0x000000004cde3870)    ;; object: 0x21004281 <true>
0x4cde3858    56  ret
0x4cde385c    60  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cde3860    64  d63f03e0       constant
0x4cde3864    68  d503201f       constant
0x4cde3868    72  210042b1       constant
0x4cde386c    76  00000000       constant
0x4cde3870    80  21004281       constant
0x4cde3874    84  00000000       constant
0x4cde3878    88  movz x16, #0x0
0x4cde387c    92  sub csp, jssp, #0x10 (16)
0x4cde3880    96  stp fp, lr, [jssp, #-16]!
0x4cde3884   100  bl #+0x4 (addr 0x4cde3888)
0x4cde3888   104  movz x17, #0xa00000000
0x4cde388c   108  sub csp, jssp, #0x10 (16)
0x4cde3890   112  stp x17, cp, [jssp, #-16]!
0x4cde3894   116  add fp, jssp, #0x10 (16)
0x4cde3898   120  ldr x17, pc+24 (addr 0x000000004cde38b0)    ;; lazy deoptimization bailout 0
0x4cde389c   124  add x17, x17, x16
0x4cde38a0   128  br x17
0x4cde38a4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cde38a8   136  d63f03e0       constant
0x4cde38ac   140  d503201f       constant
0x4cde38b0   144  4cb06000       constant
0x4cde38b4   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cde384c  embedded object  (0x210042b1 <false>)
0x4cde3854  embedded object  (0x21004281 <true>)
0x4cde385c  constant pool (size 28)
0x4cde3898  runtime entry
0x4cde38a4  constant pool (size 20)

--- End code ---
kind = TO_BOOLEAN_IC
major_key = ToBooleanICStub
ic_state = MONOMORPHIC
extra_ic_state = 20
type = NORMAL
name = ToBooleanICStub(Null,SpecObject)
compiler = crankshaft
Instructions (size = 160)
0x4cde3820     0  ldr x16, [x26, #56]
0x4cde3824     4  cmp x0, x16
0x4cde3828     8  b.eq #+0x24 (addr 0x4cde384c)
0x4cde382c    12  tbz w0, #0, #+0x4c (addr 0x4cde3878)
0x4cde3830    16  ldur x2, [x0, #-1]
0x4cde3834    20  ldrb w1, [x2, #12]
0x4cde3838    24  tbnz w1, #4, #+0x14 (addr 0x4cde384c)
0x4cde383c    28  ldrb w1, [x2, #11]
0x4cde3840    32  cmp x1, #0xb1 (177)
0x4cde3844    36  b.ge #+0x10 (addr 0x4cde3854)
0x4cde3848    40  b #+0x30 (addr 0x4cde3878)
0x4cde384c    44  ldr x0, pc+28 (addr 0x000000004cde3868)    ;; object: 0x210042b1 <false>
0x4cde3850    48  ret
0x4cde3854    52  ldr x0, pc+28 (addr 0x000000004cde3870)    ;; object: 0x21004281 <true>
0x4cde3858    56  ret
0x4cde385c    60  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cde3860    64  d63f03e0       constant
0x4cde3864    68  d503201f       constant
0x4cde3868    72  210042b1       constant
0x4cde386c    76  00000000       constant
0x4cde3870    80  21004281       constant
0x4cde3874    84  00000000       constant
0x4cde3878    88  movz x16, #0x0
0x4cde387c    92  sub csp, jssp, #0x10 (16)
0x4cde3880    96  stp fp, lr, [jssp, #-16]!
0x4cde3884   100  bl #+0x4 (addr 0x4cde3888)
0x4cde3888   104  movz x17, #0xa00000000
0x4cde388c   108  sub csp, jssp, #0x10 (16)
0x4cde3890   112  stp x17, cp, [jssp, #-16]!
0x4cde3894   116  add fp, jssp, #0x10 (16)
0x4cde3898   120  ldr x17, pc+24 (addr 0x000000004cde38b0)    ;; lazy deoptimization bailout 0
0x4cde389c   124  add x17, x17, x16
0x4cde38a0   128  br x17
0x4cde38a4   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cde38a8   136  d63f03e0       constant
0x4cde38ac   140  d503201f       constant
0x4cde38b0   144  4cb06000       constant
0x4cde38b4   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cde384c  embedded object  (0x210042b1 <false>)
0x4cde3854  embedded object  (0x21004281 <true>)
0x4cde385c  constant pool (size 28)
0x4cde3898  runtime entry
0x4cde38a4  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cde3920     0  ldur x0, [x1, #-1]
0x4cde3924     4  ldur x0, [x0, #47]
0x4cde3928     8  movz x16, #0x17f
0x4cde392c    12  ldr x0, [x0, x16]
0x4cde3930    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cde3920     0  ldur x0, [x1, #-1]
0x4cde3924     4  ldur x0, [x0, #47]
0x4cde3928     8  movz x16, #0x17f
0x4cde392c    12  ldr x0, [x0, x16]
0x4cde3930    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = JSON
compiler = unknown
Instructions (size = 120)
0x4cde4880     0  sub csp, jssp, #0x8 (8)
0x4cde4884     4  str x3, [jssp, #-8]!
0x4cde4888     8  sub csp, jssp, #0x8 (8)
0x4cde488c    12  str x0, [jssp, #-8]!
0x4cde4890    16  ldr x0, pc+80 (addr 0x000000004cde48e0)    ;; object: 0x210c5d51 Cell for 0
0x4cde4894    20  ldur x0, [x0, #7]
0x4cde4898    24  cmp x0, #0x0 (0)
0x4cde489c    28  b.ne #+0x2c (addr 0x4cde48c8)
0x4cde48a0    32  ldr x0, pc+72 (addr 0x000000004cde48e8)    ;; object: 0xffffaa1cab09 WeakCell for 0x21046d21 PropertyCell for 0x21046ce9 <a JSON with map 0x2a813b91>
0x4cde48a4    36  ldur x0, [x0, #7]
0x4cde48a8    40  tbz w0, #0, #+0x20 (addr 0x4cde48c8)
0x4cde48ac    44  ldur x0, [x0, #15]
0x4cde48b0    48  ldr x16, [x26, #88]
0x4cde48b4    52  cmp x0, x16
0x4cde48b8    56  b.eq #+0x10 (addr 0x4cde48c8)
0x4cde48bc    60  add jssp, jssp, #0x10 (16)
0x4cde48c0    64  ret
0x4cde48c4    68  b #+0x14 (addr 0x4cde48d8)
0x4cde48c8    72  ldr x0, [jssp], #8
0x4cde48cc    76  ldr x3, [jssp], #8
0x4cde48d0    80  ldr x16, pc+32 (addr 0x000000004cde48f0)    ;; code: BUILTIN
0x4cde48d4    84  br x16
0x4cde48d8    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cde48dc    92  d63f03e0       constant
0x4cde48e0    96  210c5d51       constant
0x4cde48e4   100  00000000       constant
0x4cde48e8   104  aa1cab09       constant
0x4cde48ec   108  0000ffff       constant
0x4cde48f0   112  4cd222e0       constant
0x4cde48f4   116  00000000       constant


RelocInfo (size = 9)
0x4cde4890  embedded object  (0x210c5d51 Cell for 0)
0x4cde48a0  embedded object  (0xffffaa1cab09 WeakCell for 0x21046d21 PropertyCell for 0x21046ce9 <a JSON with map 0x2a813b91>)
0x4cde48d0  code target (BUILTIN)  (0x4cd222e0)
0x4cde48d8  constant pool (size 32)

kind = HANDLER
major_key = <NoCache>Stub
name = toString
compiler = unknown
Instructions (size = 152)
0x4cde4960     0  sub csp, jssp, #0x8 (8)
0x4cde4964     4  str x3, [jssp, #-8]!
0x4cde4968     8  sub csp, jssp, #0x8 (8)
0x4cde496c    12  str x0, [jssp, #-8]!
0x4cde4970    16  ldur x3, [cp, #39]
0x4cde4974    20  movz x16, #0x2e7
0x4cde4978    24  ldr x3, [x3, x16]
0x4cde497c    28  ldur x3, [x3, #23]
0x4cde4980    32  ldur x3, [x3, #23]
0x4cde4984    36  ldr x0, pc+84 (addr 0x000000004cde49d8)    ;; object: 0x21063e59 Cell for 0
0x4cde4988    40  ldur x0, [x0, #7]
0x4cde498c    44  cmp x0, #0x0 (0)
0x4cde4990    48  b.ne #+0x1c (addr 0x4cde49ac)
0x4cde4994    52  ldur x0, [x3, #-1]
0x4cde4998    56  ldr x4, pc+72 (addr 0x000000004cde49e0)    ;; object: 0xffffaa106e39 WeakCell for 0x2a8156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>
0x4cde499c    60  ldur x4, [x4, #7]
0x4cde49a0    64  cmp x0, x4
0x4cde49a4    68  b.ne #+0x8 (addr 0x4cde49ac)
0x4cde49a8    72  b #+0x14 (addr 0x4cde49bc)
0x4cde49ac    76  ldr x0, [jssp], #8
0x4cde49b0    80  ldr x3, [jssp], #8
0x4cde49b4    84  ldr x16, pc+52 (addr 0x000000004cde49e8)    ;; code: BUILTIN
0x4cde49b8    88  br x16
0x4cde49bc    92  add jssp, jssp, #0x10 (16)
0x4cde49c0    96  mov x1, x3
0x4cde49c4   100  ldr x16, pc+44 (addr 0x000000004cde49f0)    ;; code: HANDLER, LoadConstantStub, minor: 3
0x4cde49c8   104  br x16
0x4cde49cc   108  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0x4cde49d0   112  d63f03e0       constant
0x4cde49d4   116  d503201f       constant
0x4cde49d8   120  21063e59       constant
0x4cde49dc   124  00000000       constant
0x4cde49e0   128  aa106e39       constant
0x4cde49e4   132  0000ffff       constant
0x4cde49e8   136  4cd222e0       constant
0x4cde49ec   140  00000000       constant
0x4cde49f0   144  4cd43400       constant
0x4cde49f4   148  00000000       constant


RelocInfo (size = 10)
0x4cde4984  embedded object  (0x21063e59 Cell for 0)
0x4cde4998  embedded object  (0xffffaa106e39 WeakCell for 0x2a8156b9 <Map(FAST_STRING_WRAPPER_ELEMENTS)>)
0x4cde49b4  code target (BUILTIN)  (0x4cd222e0)
0x4cde49c4  code target (HANDLER)  (0x4cd43400)
0x4cde49cc  constant pool (size 44)

kind = HANDLER
major_key = <NoCache>Stub
compiler = unknown
Instructions (size = 96)
0x4cde4a60     0  sub csp, jssp, #0x8 (8)
0x4cde4a64     4  str x3, [jssp, #-8]!
0x4cde4a68     8  sub csp, jssp, #0x8 (8)
0x4cde4a6c    12  str x0, [jssp, #-8]!
0x4cde4a70    16  ldr x0, pc+56 (addr 0x000000004cde4aa8)    ;; object: 0x21063e59 Cell for 0
0x4cde4a74    20  ldur x0, [x0, #7]
0x4cde4a78    24  cmp x0, #0x0 (0)
0x4cde4a7c    28  b.ne #+0x14 (addr 0x4cde4a90)
0x4cde4a80    32  add jssp, jssp, #0x10 (16)
0x4cde4a84    36  ldr x0, pc+44 (addr 0x000000004cde4ab0)    ;; object: 0x21004241 <undefined>
0x4cde4a88    40  ret
0x4cde4a8c    44  b #+0x14 (addr 0x4cde4aa0)
0x4cde4a90    48  ldr x0, [jssp], #8
0x4cde4a94    52  ldr x3, [jssp], #8
0x4cde4a98    56  ldr x16, pc+32 (addr 0x000000004cde4ab8)    ;; code: BUILTIN
0x4cde4a9c    60  br x16
0x4cde4aa0    64  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cde4aa4    68  d63f03e0       constant
0x4cde4aa8    72  21063e59       constant
0x4cde4aac    76  00000000       constant
0x4cde4ab0    80  21004241       constant
0x4cde4ab4    84  00000000       constant
0x4cde4ab8    88  4cd222e0       constant
0x4cde4abc    92  00000000       constant


RelocInfo (size = 9)
0x4cde4a70  embedded object  (0x21063e59 Cell for 0)
0x4cde4a84  embedded object  (0x21004241 <undefined>)
0x4cde4a98  code target (BUILTIN)  (0x4cd222e0)
0x4cde4aa0  constant pool (size 32)

kind = HANDLER
major_key = <NoCache>Stub
name = id
compiler = unknown
Instructions (size = 152)
0x4cde4b20     0  sub csp, jssp, #0x8 (8)
0x4cde4b24     4  str x3, [jssp, #-8]!
0x4cde4b28     8  sub csp, jssp, #0x8 (8)
0x4cde4b2c    12  str x4, [jssp, #-8]!
0x4cde4b30    16  ldr x3, pc+88 (addr 0x000000004cde4b88)    ;; object: 0xffffaa1cad41 Cell for 0
0x4cde4b34    20  ldur x3, [x3, #7]
0x4cde4b38    24  cmp x3, #0x0 (0)
0x4cde4b3c    28  b.ne #+0x30 (addr 0x4cde4b6c)
0x4cde4b40    32  tbz w0, #0, #+0x2c (addr 0x4cde4b6c)
0x4cde4b44    36  ldr x5, pc+76 (addr 0x000000004cde4b90)    ;; object: 0xffffaa1361f9 WeakCell for 0x2a836139 <Map(FAST_HOLEY_ELEMENTS)>
0x4cde4b48    40  ldur x5, [x5, #7]
0x4cde4b4c    44  tbz w5, #0, #+0x20 (addr 0x4cde4b6c)
0x4cde4b50    48  ldursw x4, [x5, #15]
0x4cde4b54    52  tbnz w4, #23, #+0x18 (addr 0x4cde4b6c)
0x4cde4b58    56  ldr x4, [jssp], #8
0x4cde4b5c    60  ldr x3, [jssp], #8
0x4cde4b60    64  ldr x2, pc+56 (addr 0x000000004cde4b98)    ;; object: 0x2104e919 <String[2]: id>
0x4cde4b64    68  ldr x16, pc+60 (addr 0x000000004cde4ba0)    ;; code: HANDLER, StoreTransitionStub, minor: 198659
0x4cde4b68    72  br x16
0x4cde4b6c    76  ldr x2, pc+60 (addr 0x000000004cde4ba8)    ;; object: 0x2104e919 <String[2]: id>
0x4cde4b70    80  ldr x4, [jssp], #8
0x4cde4b74    84  ldr x3, [jssp], #8
0x4cde4b78    88  ldr x16, pc+56 (addr 0x000000004cde4bb0)    ;; code: BUILTIN
0x4cde4b7c    92  br x16
0x4cde4b80    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cde4b84   100  d63f03e0       constant
0x4cde4b88   104  aa1cad41       constant
0x4cde4b8c   108  0000ffff       constant
0x4cde4b90   112  aa1361f9       constant
0x4cde4b94   116  0000ffff       constant
0x4cde4b98   120  2104e919       constant
0x4cde4b9c   124  00000000       constant
0x4cde4ba0   128  4cd8b940       constant
0x4cde4ba4   132  00000000       constant
0x4cde4ba8   136  2104e919       constant
0x4cde4bac   140  00000000       constant
0x4cde4bb0   144  4cd22420       constant
0x4cde4bb4   148  00000000       constant


RelocInfo (size = 12)
0x4cde4b30  embedded object  (0xffffaa1cad41 Cell for 0)
0x4cde4b44  embedded object  (0xffffaa1361f9 WeakCell for 0x2a836139 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cde4b60  embedded object  (0x2104e919 <String[2]: id>)
0x4cde4b64  code target (HANDLER)  (0x4cd8b940)
0x4cde4b6c  embedded object  (0x2104e919 <String[2]: id>)
0x4cde4b78  code target (BUILTIN)  (0x4cd22420)
0x4cde4b80  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = exports
compiler = unknown
Instructions (size = 152)
0x4cde4c20     0  sub csp, jssp, #0x8 (8)
0x4cde4c24     4  str x3, [jssp, #-8]!
0x4cde4c28     8  sub csp, jssp, #0x8 (8)
0x4cde4c2c    12  str x4, [jssp, #-8]!
0x4cde4c30    16  ldr x3, pc+88 (addr 0x000000004cde4c88)    ;; object: 0xffffaa1cad41 Cell for 0
0x4cde4c34    20  ldur x3, [x3, #7]
0x4cde4c38    24  cmp x3, #0x0 (0)
0x4cde4c3c    28  b.ne #+0x30 (addr 0x4cde4c6c)
0x4cde4c40    32  tbz w0, #0, #+0x2c (addr 0x4cde4c6c)
0x4cde4c44    36  ldr x5, pc+76 (addr 0x000000004cde4c90)    ;; object: 0xffffaa136249 WeakCell for 0x2a836191 <Map(FAST_HOLEY_ELEMENTS)>
0x4cde4c48    40  ldur x5, [x5, #7]
0x4cde4c4c    44  tbz w5, #0, #+0x20 (addr 0x4cde4c6c)
0x4cde4c50    48  ldursw x4, [x5, #15]
0x4cde4c54    52  tbnz w4, #23, #+0x18 (addr 0x4cde4c6c)
0x4cde4c58    56  ldr x4, [jssp], #8
0x4cde4c5c    60  ldr x3, [jssp], #8
0x4cde4c60    64  ldr x2, pc+56 (addr 0x000000004cde4c98)    ;; object: 0x210b2651 <String[7]: exports>
0x4cde4c64    68  ldr x16, pc+60 (addr 0x000000004cde4ca0)    ;; code: HANDLER, StoreTransitionStub, minor: 198660
0x4cde4c68    72  br x16
0x4cde4c6c    76  ldr x2, pc+60 (addr 0x000000004cde4ca8)    ;; object: 0x210b2651 <String[7]: exports>
0x4cde4c70    80  ldr x4, [jssp], #8
0x4cde4c74    84  ldr x3, [jssp], #8
0x4cde4c78    88  ldr x16, pc+56 (addr 0x000000004cde4cb0)    ;; code: BUILTIN
0x4cde4c7c    92  br x16
0x4cde4c80    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cde4c84   100  d63f03e0       constant
0x4cde4c88   104  aa1cad41       constant
0x4cde4c8c   108  0000ffff       constant
0x4cde4c90   112  aa136249       constant
0x4cde4c94   116  0000ffff       constant
0x4cde4c98   120  210b2651       constant
0x4cde4c9c   124  00000000       constant
0x4cde4ca0   128  4cd8bb80       constant
0x4cde4ca4   132  00000000       constant
0x4cde4ca8   136  210b2651       constant
0x4cde4cac   140  00000000       constant
0x4cde4cb0   144  4cd22420       constant
0x4cde4cb4   148  00000000       constant


RelocInfo (size = 12)
0x4cde4c30  embedded object  (0xffffaa1cad41 Cell for 0)
0x4cde4c44  embedded object  (0xffffaa136249 WeakCell for 0x2a836191 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cde4c60  embedded object  (0x210b2651 <String[7]: exports>)
0x4cde4c64  code target (HANDLER)  (0x4cd8bb80)
0x4cde4c6c  embedded object  (0x210b2651 <String[7]: exports>)
0x4cde4c78  code target (BUILTIN)  (0x4cd22420)
0x4cde4c80  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = parent
compiler = unknown
Instructions (size = 152)
0x4cde4d20     0  sub csp, jssp, #0x8 (8)
0x4cde4d24     4  str x3, [jssp, #-8]!
0x4cde4d28     8  sub csp, jssp, #0x8 (8)
0x4cde4d2c    12  str x4, [jssp, #-8]!
0x4cde4d30    16  ldr x3, pc+88 (addr 0x000000004cde4d88)    ;; object: 0xffffaa1cad41 Cell for 0
0x4cde4d34    20  ldur x3, [x3, #7]
0x4cde4d38    24  cmp x3, #0x0 (0)
0x4cde4d3c    28  b.ne #+0x30 (addr 0x4cde4d6c)
0x4cde4d40    32  tbz w0, #0, #+0x2c (addr 0x4cde4d6c)
0x4cde4d44    36  ldr x5, pc+76 (addr 0x000000004cde4d90)    ;; object: 0xffffaa136261 WeakCell for 0x2a8361e9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cde4d48    40  ldur x5, [x5, #7]
0x4cde4d4c    44  tbz w5, #0, #+0x20 (addr 0x4cde4d6c)
0x4cde4d50    48  ldursw x4, [x5, #15]
0x4cde4d54    52  tbnz w4, #23, #+0x18 (addr 0x4cde4d6c)
0x4cde4d58    56  ldr x4, [jssp], #8
0x4cde4d5c    60  ldr x3, [jssp], #8
0x4cde4d60    64  ldr x2, pc+56 (addr 0x000000004cde4d98)    ;; object: 0x210cfca1 <String[6]: parent>
0x4cde4d64    68  ldr x16, pc+60 (addr 0x000000004cde4da0)    ;; code: HANDLER, StoreTransitionStub, minor: 198661
0x4cde4d68    72  br x16
0x4cde4d6c    76  ldr x2, pc+60 (addr 0x000000004cde4da8)    ;; object: 0x210cfca1 <String[6]: parent>
0x4cde4d70    80  ldr x4, [jssp], #8
0x4cde4d74    84  ldr x3, [jssp], #8
0x4cde4d78    88  ldr x16, pc+56 (addr 0x000000004cde4db0)    ;; code: BUILTIN
0x4cde4d7c    92  br x16
0x4cde4d80    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cde4d84   100  d63f03e0       constant
0x4cde4d88   104  aa1cad41       constant
0x4cde4d8c   108  0000ffff       constant
0x4cde4d90   112  aa136261       constant
0x4cde4d94   116  0000ffff       constant
0x4cde4d98   120  210cfca1       constant
0x4cde4d9c   124  00000000       constant
0x4cde4da0   128  4cd8bdc0       constant
0x4cde4da4   132  00000000       constant
0x4cde4da8   136  210cfca1       constant
0x4cde4dac   140  00000000       constant
0x4cde4db0   144  4cd22420       constant
0x4cde4db4   148  00000000       constant


RelocInfo (size = 12)
0x4cde4d30  embedded object  (0xffffaa1cad41 Cell for 0)
0x4cde4d44  embedded object  (0xffffaa136261 WeakCell for 0x2a8361e9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cde4d60  embedded object  (0x210cfca1 <String[6]: parent>)
0x4cde4d64  code target (HANDLER)  (0x4cd8bdc0)
0x4cde4d6c  embedded object  (0x210cfca1 <String[6]: parent>)
0x4cde4d78  code target (BUILTIN)  (0x4cd22420)
0x4cde4d80  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = filename
compiler = unknown
Instructions (size = 152)
0x4cde4e20     0  sub csp, jssp, #0x8 (8)
0x4cde4e24     4  str x3, [jssp, #-8]!
0x4cde4e28     8  sub csp, jssp, #0x8 (8)
0x4cde4e2c    12  str x4, [jssp, #-8]!
0x4cde4e30    16  ldr x3, pc+88 (addr 0x000000004cde4e88)    ;; object: 0xffffaa1cad41 Cell for 0
0x4cde4e34    20  ldur x3, [x3, #7]
0x4cde4e38    24  cmp x3, #0x0 (0)
0x4cde4e3c    28  b.ne #+0x30 (addr 0x4cde4e6c)
0x4cde4e40    32  tbz w0, #0, #+0x2c (addr 0x4cde4e6c)
0x4cde4e44    36  ldr x5, pc+76 (addr 0x000000004cde4e90)    ;; object: 0xffffaa136279 WeakCell for 0x2a836241 <Map(FAST_HOLEY_ELEMENTS)>
0x4cde4e48    40  ldur x5, [x5, #7]
0x4cde4e4c    44  tbz w5, #0, #+0x20 (addr 0x4cde4e6c)
0x4cde4e50    48  ldursw x4, [x5, #15]
0x4cde4e54    52  tbnz w4, #23, #+0x18 (addr 0x4cde4e6c)
0x4cde4e58    56  ldr x4, [jssp], #8
0x4cde4e5c    60  ldr x3, [jssp], #8
0x4cde4e60    64  ldr x2, pc+56 (addr 0x000000004cde4e98)    ;; object: 0x210b9cf1 <String[8]: filename>
0x4cde4e64    68  ldr x16, pc+60 (addr 0x000000004cde4ea0)    ;; code: HANDLER, StoreTransitionStub, minor: 198662
0x4cde4e68    72  br x16
0x4cde4e6c    76  ldr x2, pc+60 (addr 0x000000004cde4ea8)    ;; object: 0x210b9cf1 <String[8]: filename>
0x4cde4e70    80  ldr x4, [jssp], #8
0x4cde4e74    84  ldr x3, [jssp], #8
0x4cde4e78    88  ldr x16, pc+56 (addr 0x000000004cde4eb0)    ;; code: BUILTIN
0x4cde4e7c    92  br x16
0x4cde4e80    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cde4e84   100  d63f03e0       constant
0x4cde4e88   104  aa1cad41       constant
0x4cde4e8c   108  0000ffff       constant
0x4cde4e90   112  aa136279       constant
0x4cde4e94   116  0000ffff       constant
0x4cde4e98   120  210b9cf1       constant
0x4cde4e9c   124  00000000       constant
0x4cde4ea0   128  4cd8c000       constant
0x4cde4ea4   132  00000000       constant
0x4cde4ea8   136  210b9cf1       constant
0x4cde4eac   140  00000000       constant
0x4cde4eb0   144  4cd22420       constant
0x4cde4eb4   148  00000000       constant


RelocInfo (size = 12)
0x4cde4e30  embedded object  (0xffffaa1cad41 Cell for 0)
0x4cde4e44  embedded object  (0xffffaa136279 WeakCell for 0x2a836241 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cde4e60  embedded object  (0x210b9cf1 <String[8]: filename>)
0x4cde4e64  code target (HANDLER)  (0x4cd8c000)
0x4cde4e6c  embedded object  (0x210b9cf1 <String[8]: filename>)
0x4cde4e78  code target (BUILTIN)  (0x4cd22420)
0x4cde4e80  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = loaded
compiler = unknown
Instructions (size = 152)
0x4cde4f20     0  sub csp, jssp, #0x8 (8)
0x4cde4f24     4  str x3, [jssp, #-8]!
0x4cde4f28     8  sub csp, jssp, #0x8 (8)
0x4cde4f2c    12  str x4, [jssp, #-8]!
0x4cde4f30    16  ldr x3, pc+88 (addr 0x000000004cde4f88)    ;; object: 0xffffaa1cad41 Cell for 0
0x4cde4f34    20  ldur x3, [x3, #7]
0x4cde4f38    24  cmp x3, #0x0 (0)
0x4cde4f3c    28  b.ne #+0x30 (addr 0x4cde4f6c)
0x4cde4f40    32  tbz w0, #0, #+0x2c (addr 0x4cde4f6c)
0x4cde4f44    36  ldr x5, pc+76 (addr 0x000000004cde4f90)    ;; object: 0xffffaa136291 WeakCell for 0x2a836299 <Map(FAST_HOLEY_ELEMENTS)>
0x4cde4f48    40  ldur x5, [x5, #7]
0x4cde4f4c    44  tbz w5, #0, #+0x20 (addr 0x4cde4f6c)
0x4cde4f50    48  ldursw x4, [x5, #15]
0x4cde4f54    52  tbnz w4, #23, #+0x18 (addr 0x4cde4f6c)
0x4cde4f58    56  ldr x4, [jssp], #8
0x4cde4f5c    60  ldr x3, [jssp], #8
0x4cde4f60    64  ldr x2, pc+56 (addr 0x000000004cde4f98)    ;; object: 0x210ba9e1 <String[6]: loaded>
0x4cde4f64    68  ldr x16, pc+60 (addr 0x000000004cde4fa0)    ;; code: HANDLER, StoreTransitionStub, minor: 198663
0x4cde4f68    72  br x16
0x4cde4f6c    76  ldr x2, pc+60 (addr 0x000000004cde4fa8)    ;; object: 0x210ba9e1 <String[6]: loaded>
0x4cde4f70    80  ldr x4, [jssp], #8
0x4cde4f74    84  ldr x3, [jssp], #8
0x4cde4f78    88  ldr x16, pc+56 (addr 0x000000004cde4fb0)    ;; code: BUILTIN
0x4cde4f7c    92  br x16
0x4cde4f80    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cde4f84   100  d63f03e0       constant
0x4cde4f88   104  aa1cad41       constant
0x4cde4f8c   108  0000ffff       constant
0x4cde4f90   112  aa136291       constant
0x4cde4f94   116  0000ffff       constant
0x4cde4f98   120  210ba9e1       constant
0x4cde4f9c   124  00000000       constant
0x4cde4fa0   128  4cd8c240       constant
0x4cde4fa4   132  00000000       constant
0x4cde4fa8   136  210ba9e1       constant
0x4cde4fac   140  00000000       constant
0x4cde4fb0   144  4cd22420       constant
0x4cde4fb4   148  00000000       constant


RelocInfo (size = 12)
0x4cde4f30  embedded object  (0xffffaa1cad41 Cell for 0)
0x4cde4f44  embedded object  (0xffffaa136291 WeakCell for 0x2a836299 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cde4f60  embedded object  (0x210ba9e1 <String[6]: loaded>)
0x4cde4f64  code target (HANDLER)  (0x4cd8c240)
0x4cde4f6c  embedded object  (0x210ba9e1 <String[6]: loaded>)
0x4cde4f78  code target (BUILTIN)  (0x4cd22420)
0x4cde4f80  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cde5020     0  tbz w0, #0, #+0x90 (addr 0x4cde50b0)
0x4cde5024     4  mov x2, x0
0x4cde5028     8  stur x2, [x1, #63]
0x4cde502c    12  add x3, x1, #0x3f (63)
0x4cde5030    16  and x2, x2, #0xfffffffffff00000
0x4cde5034    20  ldr x2, [x2, #8]
0x4cde5038    24  tbz w2, #1, #+0x24 (addr 0x4cde505c)
0x4cde503c    28  and x2, x1, #0xfffffffffff00000
0x4cde5040    32  ldr x2, [x2, #8]
0x4cde5044    36  tbz w2, #2, #+0x18 (addr 0x4cde505c)
0x4cde5048    40  sub csp, jssp, #0x8 (8)
0x4cde504c    44  str lr, [jssp, #-8]!
0x4cde5050    48  ldr x16, pc+80 (addr 0x000000004cde50a0)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cde5054    52  blr x16
0x4cde5058    56  ldr lr, [jssp], #8
0x4cde505c    60  stur x5, [x1, #-1]
0x4cde5060    64  tbz w5, #0, #+0x34 (addr 0x4cde5094)
0x4cde5064    68  sub x2, x1, #0x1 (1)
0x4cde5068    72  and x5, x5, #0xfffffffffff00000
0x4cde506c    76  ldr x5, [x5, #8]
0x4cde5070    80  tbz w5, #1, #+0x24 (addr 0x4cde5094)
0x4cde5074    84  and x5, x1, #0xfffffffffff00000
0x4cde5078    88  ldr x5, [x5, #8]
0x4cde507c    92  tbz w5, #2, #+0x18 (addr 0x4cde5094)
0x4cde5080    96  sub csp, jssp, #0x8 (8)
0x4cde5084   100  str lr, [jssp, #-8]!
0x4cde5088   104  ldr x16, pc+32 (addr 0x000000004cde50a8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cde508c   108  blr x16
0x4cde5090   112  ldr lr, [jssp], #8
0x4cde5094   116  ret
0x4cde5098   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cde509c   124  d63f03e0       constant
0x4cde50a0   128  4cd170c0       constant
0x4cde50a4   132  00000000       constant
0x4cde50a8   136  4cd38080       constant
0x4cde50ac   140  00000000       constant
0x4cde50b0   144  movz x16, #0x0
0x4cde50b4   148  sub csp, jssp, #0x10 (16)
0x4cde50b8   152  stp fp, lr, [jssp, #-16]!
0x4cde50bc   156  bl #+0x4 (addr 0x4cde50c0)
0x4cde50c0   160  movz x17, #0xa00000000
0x4cde50c4   164  sub csp, jssp, #0x10 (16)
0x4cde50c8   168  stp x17, cp, [jssp, #-16]!
0x4cde50cc   172  add fp, jssp, #0x10 (16)
0x4cde50d0   176  ldr x17, pc+24 (addr 0x000000004cde50e8)    ;; lazy deoptimization bailout 0
0x4cde50d4   180  add x17, x17, x16
0x4cde50d8   184  br x17
0x4cde50dc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cde50e0   192  d63f03e0       constant
0x4cde50e4   196  d503201f       constant
0x4cde50e8   200  4cb06000       constant
0x4cde50ec   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cde5050  code target (STUB)  (0x4cd170c0)
0x4cde5088  code target (STUB)  (0x4cd38080)
0x4cde5098  constant pool (size 24)
0x4cde50d0  runtime entry
0x4cde50dc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cde5020     0  tbz w0, #0, #+0x90 (addr 0x4cde50b0)
0x4cde5024     4  mov x2, x0
0x4cde5028     8  stur x2, [x1, #63]
0x4cde502c    12  add x3, x1, #0x3f (63)
0x4cde5030    16  and x2, x2, #0xfffffffffff00000
0x4cde5034    20  ldr x2, [x2, #8]
0x4cde5038    24  tbz w2, #1, #+0x24 (addr 0x4cde505c)
0x4cde503c    28  and x2, x1, #0xfffffffffff00000
0x4cde5040    32  ldr x2, [x2, #8]
0x4cde5044    36  tbz w2, #2, #+0x18 (addr 0x4cde505c)
0x4cde5048    40  sub csp, jssp, #0x8 (8)
0x4cde504c    44  str lr, [jssp, #-8]!
0x4cde5050    48  ldr x16, pc+80 (addr 0x000000004cde50a0)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cde5054    52  blr x16
0x4cde5058    56  ldr lr, [jssp], #8
0x4cde505c    60  stur x5, [x1, #-1]
0x4cde5060    64  tbz w5, #0, #+0x34 (addr 0x4cde5094)
0x4cde5064    68  sub x2, x1, #0x1 (1)
0x4cde5068    72  and x5, x5, #0xfffffffffff00000
0x4cde506c    76  ldr x5, [x5, #8]
0x4cde5070    80  tbz w5, #1, #+0x24 (addr 0x4cde5094)
0x4cde5074    84  and x5, x1, #0xfffffffffff00000
0x4cde5078    88  ldr x5, [x5, #8]
0x4cde507c    92  tbz w5, #2, #+0x18 (addr 0x4cde5094)
0x4cde5080    96  sub csp, jssp, #0x8 (8)
0x4cde5084   100  str lr, [jssp, #-8]!
0x4cde5088   104  ldr x16, pc+32 (addr 0x000000004cde50a8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cde508c   108  blr x16
0x4cde5090   112  ldr lr, [jssp], #8
0x4cde5094   116  ret
0x4cde5098   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cde509c   124  d63f03e0       constant
0x4cde50a0   128  4cd170c0       constant
0x4cde50a4   132  00000000       constant
0x4cde50a8   136  4cd38080       constant
0x4cde50ac   140  00000000       constant
0x4cde50b0   144  movz x16, #0x0
0x4cde50b4   148  sub csp, jssp, #0x10 (16)
0x4cde50b8   152  stp fp, lr, [jssp, #-16]!
0x4cde50bc   156  bl #+0x4 (addr 0x4cde50c0)
0x4cde50c0   160  movz x17, #0xa00000000
0x4cde50c4   164  sub csp, jssp, #0x10 (16)
0x4cde50c8   168  stp x17, cp, [jssp, #-16]!
0x4cde50cc   172  add fp, jssp, #0x10 (16)
0x4cde50d0   176  ldr x17, pc+24 (addr 0x000000004cde50e8)    ;; lazy deoptimization bailout 0
0x4cde50d4   180  add x17, x17, x16
0x4cde50d8   184  br x17
0x4cde50dc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cde50e0   192  d63f03e0       constant
0x4cde50e4   196  d503201f       constant
0x4cde50e8   200  4cb06000       constant
0x4cde50ec   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cde5050  code target (STUB)  (0x4cd170c0)
0x4cde5088  code target (STUB)  (0x4cd38080)
0x4cde5098  constant pool (size 24)
0x4cde50d0  runtime entry
0x4cde50dc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = children
compiler = unknown
Instructions (size = 152)
0x4cde5160     0  sub csp, jssp, #0x8 (8)
0x4cde5164     4  str x3, [jssp, #-8]!
0x4cde5168     8  sub csp, jssp, #0x8 (8)
0x4cde516c    12  str x4, [jssp, #-8]!
0x4cde5170    16  ldr x3, pc+88 (addr 0x000000004cde51c8)    ;; object: 0xffffaa1cad41 Cell for 0
0x4cde5174    20  ldur x3, [x3, #7]
0x4cde5178    24  cmp x3, #0x0 (0)
0x4cde517c    28  b.ne #+0x30 (addr 0x4cde51ac)
0x4cde5180    32  tbz w0, #0, #+0x2c (addr 0x4cde51ac)
0x4cde5184    36  ldr x5, pc+76 (addr 0x000000004cde51d0)    ;; object: 0xffffaa1362e1 WeakCell for 0x2a8362f1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cde5188    40  ldur x5, [x5, #7]
0x4cde518c    44  tbz w5, #0, #+0x20 (addr 0x4cde51ac)
0x4cde5190    48  ldursw x4, [x5, #15]
0x4cde5194    52  tbnz w4, #23, #+0x18 (addr 0x4cde51ac)
0x4cde5198    56  ldr x4, [jssp], #8
0x4cde519c    60  ldr x3, [jssp], #8
0x4cde51a0    64  ldr x2, pc+56 (addr 0x000000004cde51d8)    ;; object: 0xffffaa1079a9 <String[8]: children>
0x4cde51a4    68  ldr x16, pc+60 (addr 0x000000004cde51e0)    ;; code: HANDLER, StoreTransitionStub, minor: 198664
0x4cde51a8    72  br x16
0x4cde51ac    76  ldr x2, pc+60 (addr 0x000000004cde51e8)    ;; object: 0xffffaa1079a9 <String[8]: children>
0x4cde51b0    80  ldr x4, [jssp], #8
0x4cde51b4    84  ldr x3, [jssp], #8
0x4cde51b8    88  ldr x16, pc+56 (addr 0x000000004cde51f0)    ;; code: BUILTIN
0x4cde51bc    92  br x16
0x4cde51c0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cde51c4   100  d63f03e0       constant
0x4cde51c8   104  aa1cad41       constant
0x4cde51cc   108  0000ffff       constant
0x4cde51d0   112  aa1362e1       constant
0x4cde51d4   116  0000ffff       constant
0x4cde51d8   120  aa1079a9       constant
0x4cde51dc   124  0000ffff       constant
0x4cde51e0   128  4cde5020       constant
0x4cde51e4   132  00000000       constant
0x4cde51e8   136  aa1079a9       constant
0x4cde51ec   140  0000ffff       constant
0x4cde51f0   144  4cd22420       constant
0x4cde51f4   148  00000000       constant


RelocInfo (size = 12)
0x4cde5170  embedded object  (0xffffaa1cad41 Cell for 0)
0x4cde5184  embedded object  (0xffffaa1362e1 WeakCell for 0x2a8362f1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cde51a0  embedded object  (0xffffaa1079a9 <String[8]: children>)
0x4cde51a4  code target (HANDLER)  (0x4cde5020)
0x4cde51ac  embedded object  (0xffffaa1079a9 <String[8]: children>)
0x4cde51b8  code target (BUILTIN)  (0x4cd22420)
0x4cde51c0  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = load
compiler = unknown
Instructions (size = 120)
0x4cde5260     0  sub csp, jssp, #0x8 (8)
0x4cde5264     4  str x3, [jssp, #-8]!
0x4cde5268     8  sub csp, jssp, #0x8 (8)
0x4cde526c    12  str x0, [jssp, #-8]!
0x4cde5270    16  ldr x0, pc+72 (addr 0x000000004cde52b8)    ;; object: 0xffffaa1cad41 Cell for 0
0x4cde5274    20  ldur x0, [x0, #7]
0x4cde5278    24  cmp x0, #0x0 (0)
0x4cde527c    28  b.ne #+0x14 (addr 0x4cde5290)
0x4cde5280    32  ldr x3, pc+64 (addr 0x000000004cde52c0)    ;; object: 0xffffaa1caf11 WeakCell for 0x23340c39 <an Object with map 0x2a835009>
0x4cde5284    36  ldur x3, [x3, #7]
0x4cde5288    40  tbz w3, #0, #+0x8 (addr 0x4cde5290)
0x4cde528c    44  b #+0x14 (addr 0x4cde52a0)
0x4cde5290    48  ldr x0, [jssp], #8
0x4cde5294    52  ldr x3, [jssp], #8
0x4cde5298    56  ldr x16, pc+48 (addr 0x000000004cde52c8)    ;; code: BUILTIN
0x4cde529c    60  br x16
0x4cde52a0    64  add jssp, jssp, #0x10 (16)
0x4cde52a4    68  mov x1, x3
0x4cde52a8    72  ldr x16, pc+40 (addr 0x000000004cde52d0)    ;; code: HANDLER, LoadConstantStub, minor: 1
0x4cde52ac    76  br x16
0x4cde52b0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cde52b4    84  d63f03e0       constant
0x4cde52b8    88  aa1cad41       constant
0x4cde52bc    92  0000ffff       constant
0x4cde52c0    96  aa1caf11       constant
0x4cde52c4   100  0000ffff       constant
0x4cde52c8   104  4cd222e0       constant
0x4cde52cc   108  00000000       constant
0x4cde52d0   112  4cd43300       constant
0x4cde52d4   116  00000000       constant


RelocInfo (size = 10)
0x4cde5270  embedded object  (0xffffaa1cad41 Cell for 0)
0x4cde5280  embedded object  (0xffffaa1caf11 WeakCell for 0x23340c39 <an Object with map 0x2a835009>)
0x4cde5298  code target (BUILTIN)  (0x4cd222e0)
0x4cde52a8  code target (HANDLER)  (0x4cd43300)
0x4cde52b0  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0x4cde5340     0  ldur x0, [x1, #71]
0x4cde5344     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0x4cde5340     0  ldur x0, [x1, #71]
0x4cde5344     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cde53c0     0  tbz w0, #0, #+0x90 (addr 0x4cde5450)
0x4cde53c4     4  mov x2, x0
0x4cde53c8     8  stur x2, [x1, #71]
0x4cde53cc    12  add x3, x1, #0x47 (71)
0x4cde53d0    16  and x2, x2, #0xfffffffffff00000
0x4cde53d4    20  ldr x2, [x2, #8]
0x4cde53d8    24  tbz w2, #1, #+0x24 (addr 0x4cde53fc)
0x4cde53dc    28  and x2, x1, #0xfffffffffff00000
0x4cde53e0    32  ldr x2, [x2, #8]
0x4cde53e4    36  tbz w2, #2, #+0x18 (addr 0x4cde53fc)
0x4cde53e8    40  sub csp, jssp, #0x8 (8)
0x4cde53ec    44  str lr, [jssp, #-8]!
0x4cde53f0    48  ldr x16, pc+80 (addr 0x000000004cde5440)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cde53f4    52  blr x16
0x4cde53f8    56  ldr lr, [jssp], #8
0x4cde53fc    60  stur x5, [x1, #-1]
0x4cde5400    64  tbz w5, #0, #+0x34 (addr 0x4cde5434)
0x4cde5404    68  sub x2, x1, #0x1 (1)
0x4cde5408    72  and x5, x5, #0xfffffffffff00000
0x4cde540c    76  ldr x5, [x5, #8]
0x4cde5410    80  tbz w5, #1, #+0x24 (addr 0x4cde5434)
0x4cde5414    84  and x5, x1, #0xfffffffffff00000
0x4cde5418    88  ldr x5, [x5, #8]
0x4cde541c    92  tbz w5, #2, #+0x18 (addr 0x4cde5434)
0x4cde5420    96  sub csp, jssp, #0x8 (8)
0x4cde5424   100  str lr, [jssp, #-8]!
0x4cde5428   104  ldr x16, pc+32 (addr 0x000000004cde5448)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cde542c   108  blr x16
0x4cde5430   112  ldr lr, [jssp], #8
0x4cde5434   116  ret
0x4cde5438   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cde543c   124  d63f03e0       constant
0x4cde5440   128  4cd170c0       constant
0x4cde5444   132  00000000       constant
0x4cde5448   136  4cd38080       constant
0x4cde544c   140  00000000       constant
0x4cde5450   144  movz x16, #0x0
0x4cde5454   148  sub csp, jssp, #0x10 (16)
0x4cde5458   152  stp fp, lr, [jssp, #-16]!
0x4cde545c   156  bl #+0x4 (addr 0x4cde5460)
0x4cde5460   160  movz x17, #0xa00000000
0x4cde5464   164  sub csp, jssp, #0x10 (16)
0x4cde5468   168  stp x17, cp, [jssp, #-16]!
0x4cde546c   172  add fp, jssp, #0x10 (16)
0x4cde5470   176  ldr x17, pc+24 (addr 0x000000004cde5488)    ;; lazy deoptimization bailout 0
0x4cde5474   180  add x17, x17, x16
0x4cde5478   184  br x17
0x4cde547c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cde5480   192  d63f03e0       constant
0x4cde5484   196  d503201f       constant
0x4cde5488   200  4cb06000       constant
0x4cde548c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cde53f0  code target (STUB)  (0x4cd170c0)
0x4cde5428  code target (STUB)  (0x4cd38080)
0x4cde5438  constant pool (size 24)
0x4cde5470  runtime entry
0x4cde547c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cde53c0     0  tbz w0, #0, #+0x90 (addr 0x4cde5450)
0x4cde53c4     4  mov x2, x0
0x4cde53c8     8  stur x2, [x1, #71]
0x4cde53cc    12  add x3, x1, #0x47 (71)
0x4cde53d0    16  and x2, x2, #0xfffffffffff00000
0x4cde53d4    20  ldr x2, [x2, #8]
0x4cde53d8    24  tbz w2, #1, #+0x24 (addr 0x4cde53fc)
0x4cde53dc    28  and x2, x1, #0xfffffffffff00000
0x4cde53e0    32  ldr x2, [x2, #8]
0x4cde53e4    36  tbz w2, #2, #+0x18 (addr 0x4cde53fc)
0x4cde53e8    40  sub csp, jssp, #0x8 (8)
0x4cde53ec    44  str lr, [jssp, #-8]!
0x4cde53f0    48  ldr x16, pc+80 (addr 0x000000004cde5440)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cde53f4    52  blr x16
0x4cde53f8    56  ldr lr, [jssp], #8
0x4cde53fc    60  stur x5, [x1, #-1]
0x4cde5400    64  tbz w5, #0, #+0x34 (addr 0x4cde5434)
0x4cde5404    68  sub x2, x1, #0x1 (1)
0x4cde5408    72  and x5, x5, #0xfffffffffff00000
0x4cde540c    76  ldr x5, [x5, #8]
0x4cde5410    80  tbz w5, #1, #+0x24 (addr 0x4cde5434)
0x4cde5414    84  and x5, x1, #0xfffffffffff00000
0x4cde5418    88  ldr x5, [x5, #8]
0x4cde541c    92  tbz w5, #2, #+0x18 (addr 0x4cde5434)
0x4cde5420    96  sub csp, jssp, #0x8 (8)
0x4cde5424   100  str lr, [jssp, #-8]!
0x4cde5428   104  ldr x16, pc+32 (addr 0x000000004cde5448)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cde542c   108  blr x16
0x4cde5430   112  ldr lr, [jssp], #8
0x4cde5434   116  ret
0x4cde5438   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cde543c   124  d63f03e0       constant
0x4cde5440   128  4cd170c0       constant
0x4cde5444   132  00000000       constant
0x4cde5448   136  4cd38080       constant
0x4cde544c   140  00000000       constant
0x4cde5450   144  movz x16, #0x0
0x4cde5454   148  sub csp, jssp, #0x10 (16)
0x4cde5458   152  stp fp, lr, [jssp, #-16]!
0x4cde545c   156  bl #+0x4 (addr 0x4cde5460)
0x4cde5460   160  movz x17, #0xa00000000
0x4cde5464   164  sub csp, jssp, #0x10 (16)
0x4cde5468   168  stp x17, cp, [jssp, #-16]!
0x4cde546c   172  add fp, jssp, #0x10 (16)
0x4cde5470   176  ldr x17, pc+24 (addr 0x000000004cde5488)    ;; lazy deoptimization bailout 0
0x4cde5474   180  add x17, x17, x16
0x4cde5478   184  br x17
0x4cde547c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cde5480   192  d63f03e0       constant
0x4cde5484   196  d503201f       constant
0x4cde5488   200  4cb06000       constant
0x4cde548c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cde53f0  code target (STUB)  (0x4cd170c0)
0x4cde5428  code target (STUB)  (0x4cd38080)
0x4cde5438  constant pool (size 24)
0x4cde5470  runtime entry
0x4cde547c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = paths
compiler = unknown
Instructions (size = 152)
0x4cde5500     0  sub csp, jssp, #0x8 (8)
0x4cde5504     4  str x3, [jssp, #-8]!
0x4cde5508     8  sub csp, jssp, #0x8 (8)
0x4cde550c    12  str x4, [jssp, #-8]!
0x4cde5510    16  ldr x3, pc+88 (addr 0x000000004cde5568)    ;; object: 0xffffaa1cad41 Cell for 0
0x4cde5514    20  ldur x3, [x3, #7]
0x4cde5518    24  cmp x3, #0x0 (0)
0x4cde551c    28  b.ne #+0x30 (addr 0x4cde554c)
0x4cde5520    32  tbz w0, #0, #+0x2c (addr 0x4cde554c)
0x4cde5524    36  ldr x5, pc+76 (addr 0x000000004cde5570)    ;; object: 0xffffaa1370a1 WeakCell for 0x2a8363a1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cde5528    40  ldur x5, [x5, #7]
0x4cde552c    44  tbz w5, #0, #+0x20 (addr 0x4cde554c)
0x4cde5530    48  ldursw x4, [x5, #15]
0x4cde5534    52  tbnz w4, #23, #+0x18 (addr 0x4cde554c)
0x4cde5538    56  ldr x4, [jssp], #8
0x4cde553c    60  ldr x3, [jssp], #8
0x4cde5540    64  ldr x2, pc+56 (addr 0x000000004cde5578)    ;; object: 0x210ba4c1 <String[5]: paths>
0x4cde5544    68  ldr x16, pc+60 (addr 0x000000004cde5580)    ;; code: HANDLER, StoreTransitionStub, minor: 198665
0x4cde5548    72  br x16
0x4cde554c    76  ldr x2, pc+60 (addr 0x000000004cde5588)    ;; object: 0x210ba4c1 <String[5]: paths>
0x4cde5550    80  ldr x4, [jssp], #8
0x4cde5554    84  ldr x3, [jssp], #8
0x4cde5558    88  ldr x16, pc+56 (addr 0x000000004cde5590)    ;; code: BUILTIN
0x4cde555c    92  br x16
0x4cde5560    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cde5564   100  d63f03e0       constant
0x4cde5568   104  aa1cad41       constant
0x4cde556c   108  0000ffff       constant
0x4cde5570   112  aa1370a1       constant
0x4cde5574   116  0000ffff       constant
0x4cde5578   120  210ba4c1       constant
0x4cde557c   124  00000000       constant
0x4cde5580   128  4cde53c0       constant
0x4cde5584   132  00000000       constant
0x4cde5588   136  210ba4c1       constant
0x4cde558c   140  00000000       constant
0x4cde5590   144  4cd22420       constant
0x4cde5594   148  00000000       constant


RelocInfo (size = 12)
0x4cde5510  embedded object  (0xffffaa1cad41 Cell for 0)
0x4cde5524  embedded object  (0xffffaa1370a1 WeakCell for 0x2a8363a1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cde5540  embedded object  (0x210ba4c1 <String[5]: paths>)
0x4cde5544  code target (HANDLER)  (0x4cde53c0)
0x4cde554c  embedded object  (0x210ba4c1 <String[5]: paths>)
0x4cde5558  code target (BUILTIN)  (0x4cd22420)
0x4cde5560  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0x4cde5600     0  ldur x0, [x1, #87]
0x4cde5604     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0x4cde5600     0  ldur x0, [x1, #87]
0x4cde5604     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cde5680     0  ldur x0, [x1, #-1]
0x4cde5684     4  ldur x0, [x0, #47]
0x4cde5688     8  movz x16, #0x1af
0x4cde568c    12  ldr x0, [x0, x16]
0x4cde5690    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cde5680     0  ldur x0, [x1, #-1]
0x4cde5684     4  ldur x0, [x0, #47]
0x4cde5688     8  movz x16, #0x1af
0x4cde568c    12  ldr x0, [x0, x16]
0x4cde5690    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = isFile
compiler = unknown
Instructions (size = 120)
0x4cde5700     0  sub csp, jssp, #0x8 (8)
0x4cde5704     4  str x3, [jssp, #-8]!
0x4cde5708     8  sub csp, jssp, #0x8 (8)
0x4cde570c    12  str x0, [jssp, #-8]!
0x4cde5710    16  ldr x0, pc+72 (addr 0x000000004cde5758)    ;; object: 0xffffaa134a59 Cell for 0
0x4cde5714    20  ldur x0, [x0, #7]
0x4cde5718    24  cmp x0, #0x0 (0)
0x4cde571c    28  b.ne #+0x14 (addr 0x4cde5730)
0x4cde5720    32  ldr x3, pc+64 (addr 0x000000004cde5760)    ;; object: 0xffffaa1cb0b1 WeakCell for 0x2333b331 <an Object with map 0x2a8320f1>
0x4cde5724    36  ldur x3, [x3, #7]
0x4cde5728    40  tbz w3, #0, #+0x8 (addr 0x4cde5730)
0x4cde572c    44  b #+0x14 (addr 0x4cde5740)
0x4cde5730    48  ldr x0, [jssp], #8
0x4cde5734    52  ldr x3, [jssp], #8
0x4cde5738    56  ldr x16, pc+48 (addr 0x000000004cde5768)    ;; code: BUILTIN
0x4cde573c    60  br x16
0x4cde5740    64  add jssp, jssp, #0x10 (16)
0x4cde5744    68  mov x1, x3
0x4cde5748    72  ldr x16, pc+40 (addr 0x000000004cde5770)    ;; code: HANDLER, LoadConstantStub, minor: 3
0x4cde574c    76  br x16
0x4cde5750    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cde5754    84  d63f03e0       constant
0x4cde5758    88  aa134a59       constant
0x4cde575c    92  0000ffff       constant
0x4cde5760    96  aa1cb0b1       constant
0x4cde5764   100  0000ffff       constant
0x4cde5768   104  4cd222e0       constant
0x4cde576c   108  00000000       constant
0x4cde5770   112  4cd43400       constant
0x4cde5774   116  00000000       constant


RelocInfo (size = 10)
0x4cde5710  embedded object  (0xffffaa134a59 Cell for 0)
0x4cde5720  embedded object  (0xffffaa1cb0b1 WeakCell for 0x2333b331 <an Object with map 0x2a8320f1>)
0x4cde5738  code target (BUILTIN)  (0x4cd222e0)
0x4cde5748  code target (HANDLER)  (0x4cd43400)
0x4cde5750  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 197)
0x4cde57e0     0  ldur d0, [x1, #87]
0x4cde57e4     4  movz x1, #0xd2c0
0x4cde57e8     8  movk x1, #0x166d, lsl #16
0x4cde57ec    12  ldp x2, x0, [x1]
0x4cde57f0    16  adds x16, x2, #0x10 (16)
0x4cde57f4    20  ccmp x16, x0, #nzCv, lo
0x4cde57f8    24  b.hi #+0x20 (addr 0x4cde5818)
0x4cde57fc    28  str x16, [x1]
0x4cde5800    32  ldr x1, [x26, #120]
0x4cde5804    36  str x1, [x2]
0x4cde5808    40  orr x2, x2, #0x1
0x4cde580c    44  stur d0, [x2, #7]
0x4cde5810    48  mov x0, x2
0x4cde5814    52  ret
0x4cde5818    56  sub csp, jssp, #0x10 (16)
0x4cde581c    60  stp fp, lr, [jssp, #-16]!
0x4cde5820    64  movz fp, #0xa00000000
0x4cde5824    68  sub csp, jssp, #0x8 (8)
0x4cde5828    72  str fp, [jssp, #-8]!
0x4cde582c    76  add fp, jssp, #0x8 (8)
0x4cde5830    80  movz x2, #0x0
0x4cde5834    84  mov x16, lr
0x4cde5838    88  ldr x17, pc+64 (addr 0x000000004cde5878)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cde583c    92  blr x17
0x4cde5840    96  ldur cp, [fp, #-8]
0x4cde5844   100  movz x0, #0x0
0x4cde5848   104  movz x1, #0x4b48
0x4cde584c   108  movk x1, #0xe4, lsl #16
0x4cde5850   112  ldr x16, pc+48 (addr 0x000000004cde5880)    ;; code: STUB, CEntryStub, minor: 5
0x4cde5854   116  blr x16
0x4cde5858   120  str x0, [jssp, #16]
0x4cde585c   124  ldr x16, pc+44 (addr 0x000000004cde5888)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cde5860   128  blr x16
0x4cde5864   132  ldr lr, [jssp, #16]
0x4cde5868   136  ldp xzr, fp, [jssp], #24
0x4cde586c   140  b #-0x60 (addr 0x4cde580c)
0x4cde5870   144  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cde5874   148  d63f03e0       constant
0x4cde5878   152  4cd06820       constant
0x4cde587c   156  00000000       constant
0x4cde5880   160  4cd06260       constant
0x4cde5884   164  00000000       constant
0x4cde5888   168  4cd068e0       constant
0x4cde588c   172  00000000       constant


Safepoints (size = 21)
0x4cde5858   120  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 11)
0x4cde5838  code target (STUB)  (0x4cd06820)
0x4cde5850  code target (STUB)  (0x4cd06260)
0x4cde585c  code target (STUB)  (0x4cd068e0)
0x4cde5870  constant pool (size 32)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 197)
0x4cde57e0     0  ldur d0, [x1, #87]
0x4cde57e4     4  movz x1, #0xd2c0
0x4cde57e8     8  movk x1, #0x166d, lsl #16
0x4cde57ec    12  ldp x2, x0, [x1]
0x4cde57f0    16  adds x16, x2, #0x10 (16)
0x4cde57f4    20  ccmp x16, x0, #nzCv, lo
0x4cde57f8    24  b.hi #+0x20 (addr 0x4cde5818)
0x4cde57fc    28  str x16, [x1]
0x4cde5800    32  ldr x1, [x26, #120]
0x4cde5804    36  str x1, [x2]
0x4cde5808    40  orr x2, x2, #0x1
0x4cde580c    44  stur d0, [x2, #7]
0x4cde5810    48  mov x0, x2
0x4cde5814    52  ret
0x4cde5818    56  sub csp, jssp, #0x10 (16)
0x4cde581c    60  stp fp, lr, [jssp, #-16]!
0x4cde5820    64  movz fp, #0xa00000000
0x4cde5824    68  sub csp, jssp, #0x8 (8)
0x4cde5828    72  str fp, [jssp, #-8]!
0x4cde582c    76  add fp, jssp, #0x8 (8)
0x4cde5830    80  movz x2, #0x0
0x4cde5834    84  mov x16, lr
0x4cde5838    88  ldr x17, pc+64 (addr 0x000000004cde5878)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cde583c    92  blr x17
0x4cde5840    96  ldur cp, [fp, #-8]
0x4cde5844   100  movz x0, #0x0
0x4cde5848   104  movz x1, #0x4b48
0x4cde584c   108  movk x1, #0xe4, lsl #16
0x4cde5850   112  ldr x16, pc+48 (addr 0x000000004cde5880)    ;; code: STUB, CEntryStub, minor: 5
0x4cde5854   116  blr x16
0x4cde5858   120  str x0, [jssp, #16]
0x4cde585c   124  ldr x16, pc+44 (addr 0x000000004cde5888)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cde5860   128  blr x16
0x4cde5864   132  ldr lr, [jssp, #16]
0x4cde5868   136  ldp xzr, fp, [jssp], #24
0x4cde586c   140  b #-0x60 (addr 0x4cde580c)
0x4cde5870   144  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cde5874   148  d63f03e0       constant
0x4cde5878   152  4cd06820       constant
0x4cde587c   156  00000000       constant
0x4cde5880   160  4cd06260       constant
0x4cde5884   164  00000000       constant
0x4cde5888   168  4cd068e0       constant
0x4cde588c   172  00000000       constant


Safepoints (size = 21)
0x4cde5858   120  000 | x2 | x27 (sp -> fp)  <none>

RelocInfo (size = 11)
0x4cde5838  code target (STUB)  (0x4cd06820)
0x4cde5850  code target (STUB)  (0x4cd06260)
0x4cde585c  code target (STUB)  (0x4cd068e0)
0x4cde5870  constant pool (size 32)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cde5920     0  ldur x0, [x1, #-1]
0x4cde5924     4  ldur x0, [x0, #47]
0x4cde5928     8  movz x16, #0x2b7
0x4cde592c    12  ldr x0, [x0, x16]
0x4cde5930    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cde5920     0  ldur x0, [x1, #-1]
0x4cde5924     4  ldur x0, [x0, #47]
0x4cde5928     8  movz x16, #0x2b7
0x4cde592c    12  ldr x0, [x0, x16]
0x4cde5930    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = slice
compiler = unknown
Instructions (size = 120)
0x4cde59a0     0  sub csp, jssp, #0x8 (8)
0x4cde59a4     4  str x3, [jssp, #-8]!
0x4cde59a8     8  sub csp, jssp, #0x8 (8)
0x4cde59ac    12  str x0, [jssp, #-8]!
0x4cde59b0    16  ldr x0, pc+72 (addr 0x000000004cde59f8)    ;; object: 0xffffaa1cb1c9 Cell for 0
0x4cde59b4    20  ldur x0, [x0, #7]
0x4cde59b8    24  cmp x0, #0x0 (0)
0x4cde59bc    28  b.ne #+0x14 (addr 0x4cde59d0)
0x4cde59c0    32  ldr x3, pc+64 (addr 0x000000004cde5a00)    ;; object: 0xffffaa1cb1d9 WeakCell for 0xffffaa1458a1 <a FastBuffer with map 0x2a822341>
0x4cde59c4    36  ldur x3, [x3, #7]
0x4cde59c8    40  tbz w3, #0, #+0x8 (addr 0x4cde59d0)
0x4cde59cc    44  b #+0x14 (addr 0x4cde59e0)
0x4cde59d0    48  ldr x0, [jssp], #8
0x4cde59d4    52  ldr x3, [jssp], #8
0x4cde59d8    56  ldr x16, pc+48 (addr 0x000000004cde5a08)    ;; code: BUILTIN
0x4cde59dc    60  br x16
0x4cde59e0    64  add jssp, jssp, #0x10 (16)
0x4cde59e4    68  mov x1, x3
0x4cde59e8    72  ldr x16, pc+40 (addr 0x000000004cde5a10)    ;; code: HANDLER, LoadConstantStub, minor: 27
0x4cde59ec    76  br x16
0x4cde59f0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cde59f4    84  d63f03e0       constant
0x4cde59f8    88  aa1cb1c9       constant
0x4cde59fc    92  0000ffff       constant
0x4cde5a00    96  aa1cb1d9       constant
0x4cde5a04   100  0000ffff       constant
0x4cde5a08   104  4cd222e0       constant
0x4cde5a0c   108  00000000       constant
0x4cde5a10   112  4cde5920       constant
0x4cde5a14   116  00000000       constant


RelocInfo (size = 10)
0x4cde59b0  embedded object  (0xffffaa1cb1c9 Cell for 0)
0x4cde59c0  embedded object  (0xffffaa1cb1d9 WeakCell for 0xffffaa1458a1 <a FastBuffer with map 0x2a822341>)
0x4cde59d8  code target (BUILTIN)  (0x4cd222e0)
0x4cde59e8  code target (HANDLER)  (0x4cde5920)
0x4cde59f0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = length
compiler = unknown
Instructions (size = 216)
0x4cde5a80     0  sub csp, jssp, #0x8 (8)
0x4cde5a84     4  str x3, [jssp, #-8]!
0x4cde5a88     8  sub csp, jssp, #0x8 (8)
0x4cde5a8c    12  str x0, [jssp, #-8]!
0x4cde5a90    16  ldr x0, pc+160 (addr 0x000000004cde5b30)    ;; object: 0xffffaa1cb1c9 Cell for 0
0x4cde5a94    20  ldur x0, [x0, #7]
0x4cde5a98    24  cmp x0, #0x0 (0)
0x4cde5a9c    28  b.ne #+0x14 (addr 0x4cde5ab0)
0x4cde5aa0    32  ldr x3, pc+152 (addr 0x000000004cde5b38)    ;; object: 0xffffaa1cb251 WeakCell for 0xffffaa1abe11 <an Object with map 0x2a814111>
0x4cde5aa4    36  ldur x3, [x3, #7]
0x4cde5aa8    40  tbz w3, #0, #+0x8 (addr 0x4cde5ab0)
0x4cde5aac    44  b #+0x14 (addr 0x4cde5ac0)
0x4cde5ab0    48  ldr x0, [jssp], #8
0x4cde5ab4    52  ldr x3, [jssp], #8
0x4cde5ab8    56  ldr x16, pc+136 (addr 0x000000004cde5b40)    ;; code: BUILTIN
0x4cde5abc    60  br x16
0x4cde5ac0    64  add jssp, jssp, #0x10 (16)
0x4cde5ac4    68  movz x16, #0xc00000000
0x4cde5ac8    72  sub csp, jssp, #0x10 (16)
0x4cde5acc    76  stp fp, lr, [jssp, #-16]!
0x4cde5ad0    80  sub csp, jssp, #0x10 (16)
0x4cde5ad4    84  str x16, [jssp, #-8]!
0x4cde5ad8    88  ldr x17, pc+112 (addr 0x000000004cde5b48)    ;; object: 0x4cde5a21 <Code: HANDLER>
0x4cde5adc    92  sub csp, jssp, #0x10 (16)
0x4cde5ae0    96  str x17, [jssp, #-8]!
0x4cde5ae4   100  add fp, jssp, #0x10 (16)
0x4cde5ae8   104  sub csp, jssp, #0x8 (8)
0x4cde5aec   108  str cp, [jssp, #-8]!
0x4cde5af0   112  sub csp, jssp, #0x8 (8)
0x4cde5af4   116  str x1, [jssp, #-8]!
0x4cde5af8   120  ldur x1, [x3, #-1]
0x4cde5afc   124  ldur x1, [x1, #47]
0x4cde5b00   128  ldur x1, [x1, #143]
0x4cde5b04   132  ldur x1, [x1, #7]
0x4cde5b08   136  movz x0, #0x0
0x4cde5b0c   140  ldr x16, pc+68 (addr 0x000000004cde5b50)    ;; code: BUILTIN
0x4cde5b10   144  blr x16
0x4cde5b14   148  ldr cp, [jssp], #8
0x4cde5b18   152  mov jssp, fp
0x4cde5b1c   156  ldp fp, lr, [jssp], #16
0x4cde5b20   160  ret
0x4cde5b24   164  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0x4cde5b28   168  d63f03e0       constant
0x4cde5b2c   172  d503201f       constant
0x4cde5b30   176  aa1cb1c9       constant
0x4cde5b34   180  0000ffff       constant
0x4cde5b38   184  aa1cb251       constant
0x4cde5b3c   188  0000ffff       constant
0x4cde5b40   192  4cd222e0       constant
0x4cde5b44   196  00000000       constant
0x4cde5b48   200  4cde5a21       constant
0x4cde5b4c   204  00000000       constant
0x4cde5b50   208  4cd1e600       constant
0x4cde5b54   212  00000000       constant


RelocInfo (size = 11)
0x4cde5a90  embedded object  (0xffffaa1cb1c9 Cell for 0)
0x4cde5aa0  embedded object  (0xffffaa1cb251 WeakCell for 0xffffaa1abe11 <an Object with map 0x2a814111>)
0x4cde5ab8  code target (BUILTIN)  (0x4cd222e0)
0x4cde5ad8  embedded object  (0x4cde5a21 <Code: HANDLER>)
0x4cde5b0c  code target (BUILTIN)  (0x4cd1e600)
0x4cde5b24  constant pool (size 52)

kind = HANDLER
major_key = <NoCache>Stub
name = Number
compiler = unknown
Instructions (size = 120)
0x4cde5bc0     0  sub csp, jssp, #0x8 (8)
0x4cde5bc4     4  str x3, [jssp, #-8]!
0x4cde5bc8     8  sub csp, jssp, #0x8 (8)
0x4cde5bcc    12  str x0, [jssp, #-8]!
0x4cde5bd0    16  ldr x0, pc+80 (addr 0x000000004cde5c20)    ;; object: 0x210c5d51 Cell for 0
0x4cde5bd4    20  ldur x0, [x0, #7]
0x4cde5bd8    24  cmp x0, #0x0 (0)
0x4cde5bdc    28  b.ne #+0x2c (addr 0x4cde5c08)
0x4cde5be0    32  ldr x0, pc+72 (addr 0x000000004cde5c28)    ;; object: 0xffffaa1cb289 WeakCell for 0x210423d9 PropertyCell for 0x21042371 <JS Function Number (SharedFunctionInfo 0x210422c9)>
0x4cde5be4    36  ldur x0, [x0, #7]
0x4cde5be8    40  tbz w0, #0, #+0x20 (addr 0x4cde5c08)
0x4cde5bec    44  ldur x0, [x0, #15]
0x4cde5bf0    48  ldr x16, [x26, #88]
0x4cde5bf4    52  cmp x0, x16
0x4cde5bf8    56  b.eq #+0x10 (addr 0x4cde5c08)
0x4cde5bfc    60  add jssp, jssp, #0x10 (16)
0x4cde5c00    64  ret
0x4cde5c04    68  b #+0x14 (addr 0x4cde5c18)
0x4cde5c08    72  ldr x0, [jssp], #8
0x4cde5c0c    76  ldr x3, [jssp], #8
0x4cde5c10    80  ldr x16, pc+32 (addr 0x000000004cde5c30)    ;; code: BUILTIN
0x4cde5c14    84  br x16
0x4cde5c18    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cde5c1c    92  d63f03e0       constant
0x4cde5c20    96  210c5d51       constant
0x4cde5c24   100  00000000       constant
0x4cde5c28   104  aa1cb289       constant
0x4cde5c2c   108  0000ffff       constant
0x4cde5c30   112  4cd222e0       constant
0x4cde5c34   116  00000000       constant


RelocInfo (size = 9)
0x4cde5bd0  embedded object  (0x210c5d51 Cell for 0)
0x4cde5be0  embedded object  (0xffffaa1cb289 WeakCell for 0x210423d9 PropertyCell for 0x21042371 <JS Function Number (SharedFunctionInfo 0x210422c9)>)
0x4cde5c10  code target (BUILTIN)  (0x4cd222e0)
0x4cde5c18  constant pool (size 32)

kind = HANDLER
major_key = <NoCache>Stub
name = buffer
compiler = unknown
Instructions (size = 216)
0x4cde5ca0     0  sub csp, jssp, #0x8 (8)
0x4cde5ca4     4  str x3, [jssp, #-8]!
0x4cde5ca8     8  sub csp, jssp, #0x8 (8)
0x4cde5cac    12  str x0, [jssp, #-8]!
0x4cde5cb0    16  ldr x0, pc+160 (addr 0x000000004cde5d50)    ;; object: 0xffffaa1cb1c9 Cell for 0
0x4cde5cb4    20  ldur x0, [x0, #7]
0x4cde5cb8    24  cmp x0, #0x0 (0)
0x4cde5cbc    28  b.ne #+0x14 (addr 0x4cde5cd0)
0x4cde5cc0    32  ldr x3, pc+152 (addr 0x000000004cde5d58)    ;; object: 0xffffaa1cb2f1 WeakCell for 0xffffaa1abe11 <an Object with map 0x2a814111>
0x4cde5cc4    36  ldur x3, [x3, #7]
0x4cde5cc8    40  tbz w3, #0, #+0x8 (addr 0x4cde5cd0)
0x4cde5ccc    44  b #+0x14 (addr 0x4cde5ce0)
0x4cde5cd0    48  ldr x0, [jssp], #8
0x4cde5cd4    52  ldr x3, [jssp], #8
0x4cde5cd8    56  ldr x16, pc+136 (addr 0x000000004cde5d60)    ;; code: BUILTIN
0x4cde5cdc    60  br x16
0x4cde5ce0    64  add jssp, jssp, #0x10 (16)
0x4cde5ce4    68  movz x16, #0xc00000000
0x4cde5ce8    72  sub csp, jssp, #0x10 (16)
0x4cde5cec    76  stp fp, lr, [jssp, #-16]!
0x4cde5cf0    80  sub csp, jssp, #0x10 (16)
0x4cde5cf4    84  str x16, [jssp, #-8]!
0x4cde5cf8    88  ldr x17, pc+112 (addr 0x000000004cde5d68)    ;; object: 0x4cde5c41 <Code: HANDLER>
0x4cde5cfc    92  sub csp, jssp, #0x10 (16)
0x4cde5d00    96  str x17, [jssp, #-8]!
0x4cde5d04   100  add fp, jssp, #0x10 (16)
0x4cde5d08   104  sub csp, jssp, #0x8 (8)
0x4cde5d0c   108  str cp, [jssp, #-8]!
0x4cde5d10   112  sub csp, jssp, #0x8 (8)
0x4cde5d14   116  str x1, [jssp, #-8]!
0x4cde5d18   120  ldur x1, [x3, #-1]
0x4cde5d1c   124  ldur x1, [x1, #47]
0x4cde5d20   128  ldur x1, [x1, #71]
0x4cde5d24   132  ldur x1, [x1, #7]
0x4cde5d28   136  movz x0, #0x0
0x4cde5d2c   140  ldr x16, pc+68 (addr 0x000000004cde5d70)    ;; code: BUILTIN
0x4cde5d30   144  blr x16
0x4cde5d34   148  ldr cp, [jssp], #8
0x4cde5d38   152  mov jssp, fp
0x4cde5d3c   156  ldp fp, lr, [jssp], #16
0x4cde5d40   160  ret
0x4cde5d44   164  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0x4cde5d48   168  d63f03e0       constant
0x4cde5d4c   172  d503201f       constant
0x4cde5d50   176  aa1cb1c9       constant
0x4cde5d54   180  0000ffff       constant
0x4cde5d58   184  aa1cb2f1       constant
0x4cde5d5c   188  0000ffff       constant
0x4cde5d60   192  4cd222e0       constant
0x4cde5d64   196  00000000       constant
0x4cde5d68   200  4cde5c41       constant
0x4cde5d6c   204  00000000       constant
0x4cde5d70   208  4cd1e600       constant
0x4cde5d74   212  00000000       constant


RelocInfo (size = 11)
0x4cde5cb0  embedded object  (0xffffaa1cb1c9 Cell for 0)
0x4cde5cc0  embedded object  (0xffffaa1cb2f1 WeakCell for 0xffffaa1abe11 <an Object with map 0x2a814111>)
0x4cde5cd8  code target (BUILTIN)  (0x4cd222e0)
0x4cde5cf8  embedded object  (0x4cde5c41 <Code: HANDLER>)
0x4cde5d2c  code target (BUILTIN)  (0x4cd1e600)
0x4cde5d44  constant pool (size 52)

kind = HANDLER
major_key = <NoCache>Stub
name = byteOffset
compiler = unknown
Instructions (size = 216)
0x4cde5de0     0  sub csp, jssp, #0x8 (8)
0x4cde5de4     4  str x3, [jssp, #-8]!
0x4cde5de8     8  sub csp, jssp, #0x8 (8)
0x4cde5dec    12  str x0, [jssp, #-8]!
0x4cde5df0    16  ldr x0, pc+160 (addr 0x000000004cde5e90)    ;; object: 0xffffaa1cb1c9 Cell for 0
0x4cde5df4    20  ldur x0, [x0, #7]
0x4cde5df8    24  cmp x0, #0x0 (0)
0x4cde5dfc    28  b.ne #+0x14 (addr 0x4cde5e10)
0x4cde5e00    32  ldr x3, pc+152 (addr 0x000000004cde5e98)    ;; object: 0xffffaa1cb329 WeakCell for 0xffffaa1abe11 <an Object with map 0x2a814111>
0x4cde5e04    36  ldur x3, [x3, #7]
0x4cde5e08    40  tbz w3, #0, #+0x8 (addr 0x4cde5e10)
0x4cde5e0c    44  b #+0x14 (addr 0x4cde5e20)
0x4cde5e10    48  ldr x0, [jssp], #8
0x4cde5e14    52  ldr x3, [jssp], #8
0x4cde5e18    56  ldr x16, pc+136 (addr 0x000000004cde5ea0)    ;; code: BUILTIN
0x4cde5e1c    60  br x16
0x4cde5e20    64  add jssp, jssp, #0x10 (16)
0x4cde5e24    68  movz x16, #0xc00000000
0x4cde5e28    72  sub csp, jssp, #0x10 (16)
0x4cde5e2c    76  stp fp, lr, [jssp, #-16]!
0x4cde5e30    80  sub csp, jssp, #0x10 (16)
0x4cde5e34    84  str x16, [jssp, #-8]!
0x4cde5e38    88  ldr x17, pc+112 (addr 0x000000004cde5ea8)    ;; object: 0x4cde5d81 <Code: HANDLER>
0x4cde5e3c    92  sub csp, jssp, #0x10 (16)
0x4cde5e40    96  str x17, [jssp, #-8]!
0x4cde5e44   100  add fp, jssp, #0x10 (16)
0x4cde5e48   104  sub csp, jssp, #0x8 (8)
0x4cde5e4c   108  str cp, [jssp, #-8]!
0x4cde5e50   112  sub csp, jssp, #0x8 (8)
0x4cde5e54   116  str x1, [jssp, #-8]!
0x4cde5e58   120  ldur x1, [x3, #-1]
0x4cde5e5c   124  ldur x1, [x1, #47]
0x4cde5e60   128  ldur x1, [x1, #95]
0x4cde5e64   132  ldur x1, [x1, #7]
0x4cde5e68   136  movz x0, #0x0
0x4cde5e6c   140  ldr x16, pc+68 (addr 0x000000004cde5eb0)    ;; code: BUILTIN
0x4cde5e70   144  blr x16
0x4cde5e74   148  ldr cp, [jssp], #8
0x4cde5e78   152  mov jssp, fp
0x4cde5e7c   156  ldp fp, lr, [jssp], #16
0x4cde5e80   160  ret
0x4cde5e84   164  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0x4cde5e88   168  d63f03e0       constant
0x4cde5e8c   172  d503201f       constant
0x4cde5e90   176  aa1cb1c9       constant
0x4cde5e94   180  0000ffff       constant
0x4cde5e98   184  aa1cb329       constant
0x4cde5e9c   188  0000ffff       constant
0x4cde5ea0   192  4cd222e0       constant
0x4cde5ea4   196  00000000       constant
0x4cde5ea8   200  4cde5d81       constant
0x4cde5eac   204  00000000       constant
0x4cde5eb0   208  4cd1e600       constant
0x4cde5eb4   212  00000000       constant


RelocInfo (size = 11)
0x4cde5df0  embedded object  (0xffffaa1cb1c9 Cell for 0)
0x4cde5e00  embedded object  (0xffffaa1cb329 WeakCell for 0xffffaa1abe11 <an Object with map 0x2a814111>)
0x4cde5e18  code target (BUILTIN)  (0x4cd222e0)
0x4cde5e38  embedded object  (0x4cde5d81 <Code: HANDLER>)
0x4cde5e6c  code target (BUILTIN)  (0x4cd1e600)
0x4cde5e84  constant pool (size 52)

kind = HANDLER
major_key = <NoCache>Stub
compiler = unknown
Instructions (size = 120)
0x4cde5f20     0  sub csp, jssp, #0x8 (8)
0x4cde5f24     4  str x3, [jssp, #-8]!
0x4cde5f28     8  sub csp, jssp, #0x8 (8)
0x4cde5f2c    12  str x0, [jssp, #-8]!
0x4cde5f30    16  ldr x0, pc+72 (addr 0x000000004cde5f78)    ;; object: 0xffffaa1cb3e1 Cell for 0
0x4cde5f34    20  ldur x0, [x0, #7]
0x4cde5f38    24  cmp x0, #0x0 (0)
0x4cde5f3c    28  b.ne #+0x14 (addr 0x4cde5f50)
0x4cde5f40    32  ldr x3, pc+64 (addr 0x000000004cde5f80)    ;; object: 0xffffaa1cb3f1 WeakCell for 0x21040019 <JS Function (SharedFunctionInfo 0x2103ff71)>
0x4cde5f44    36  ldur x3, [x3, #7]
0x4cde5f48    40  tbz w3, #0, #+0x8 (addr 0x4cde5f50)
0x4cde5f4c    44  b #+0x14 (addr 0x4cde5f60)
0x4cde5f50    48  ldr x0, [jssp], #8
0x4cde5f54    52  ldr x3, [jssp], #8
0x4cde5f58    56  ldr x16, pc+48 (addr 0x000000004cde5f88)    ;; code: BUILTIN
0x4cde5f5c    60  br x16
0x4cde5f60    64  add jssp, jssp, #0x10 (16)
0x4cde5f64    68  mov x1, x3
0x4cde5f68    72  ldr x16, pc+40 (addr 0x000000004cde5f90)    ;; code: HANDLER, LoadConstantStub, minor: 8
0x4cde5f6c    76  br x16
0x4cde5f70    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cde5f74    84  d63f03e0       constant
0x4cde5f78    88  aa1cb3e1       constant
0x4cde5f7c    92  0000ffff       constant
0x4cde5f80    96  aa1cb3f1       constant
0x4cde5f84   100  0000ffff       constant
0x4cde5f88   104  4cd222e0       constant
0x4cde5f8c   108  00000000       constant
0x4cde5f90   112  4cd4c160       constant
0x4cde5f94   116  00000000       constant


RelocInfo (size = 10)
0x4cde5f30  embedded object  (0xffffaa1cb3e1 Cell for 0)
0x4cde5f40  embedded object  (0xffffaa1cb3f1 WeakCell for 0x21040019 <JS Function (SharedFunctionInfo 0x2103ff71)>)
0x4cde5f58  code target (BUILTIN)  (0x4cd222e0)
0x4cde5f68  code target (HANDLER)  (0x4cd4c160)
0x4cde5f70  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = toString
compiler = unknown
Instructions (size = 120)
0x4cde6000     0  sub csp, jssp, #0x8 (8)
0x4cde6004     4  str x3, [jssp, #-8]!
0x4cde6008     8  sub csp, jssp, #0x8 (8)
0x4cde600c    12  str x0, [jssp, #-8]!
0x4cde6010    16  ldr x0, pc+72 (addr 0x000000004cde6058)    ;; object: 0xffffaa1cb1c9 Cell for 0
0x4cde6014    20  ldur x0, [x0, #7]
0x4cde6018    24  cmp x0, #0x0 (0)
0x4cde601c    28  b.ne #+0x14 (addr 0x4cde6030)
0x4cde6020    32  ldr x3, pc+64 (addr 0x000000004cde6060)    ;; object: 0xffffaa1cb441 WeakCell for 0xffffaa1458a1 <a FastBuffer with map 0x2a822341>
0x4cde6024    36  ldur x3, [x3, #7]
0x4cde6028    40  tbz w3, #0, #+0x8 (addr 0x4cde6030)
0x4cde602c    44  b #+0x14 (addr 0x4cde6040)
0x4cde6030    48  ldr x0, [jssp], #8
0x4cde6034    52  ldr x3, [jssp], #8
0x4cde6038    56  ldr x16, pc+48 (addr 0x000000004cde6068)    ;; code: BUILTIN
0x4cde603c    60  br x16
0x4cde6040    64  add jssp, jssp, #0x10 (16)
0x4cde6044    68  mov x1, x3
0x4cde6048    72  ldr x16, pc+40 (addr 0x000000004cde6070)    ;; code: HANDLER, LoadConstantStub, minor: 16
0x4cde604c    76  br x16
0x4cde6050    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cde6054    84  d63f03e0       constant
0x4cde6058    88  aa1cb1c9       constant
0x4cde605c    92  0000ffff       constant
0x4cde6060    96  aa1cb441       constant
0x4cde6064   100  0000ffff       constant
0x4cde6068   104  4cd222e0       constant
0x4cde606c   108  00000000       constant
0x4cde6070   112  4cde5680       constant
0x4cde6074   116  00000000       constant


RelocInfo (size = 10)
0x4cde6010  embedded object  (0xffffaa1cb1c9 Cell for 0)
0x4cde6020  embedded object  (0xffffaa1cb441 WeakCell for 0xffffaa1458a1 <a FastBuffer with map 0x2a822341>)
0x4cde6038  code target (BUILTIN)  (0x4cd222e0)
0x4cde6048  code target (HANDLER)  (0x4cde5680)
0x4cde6050  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = apply
compiler = unknown
Instructions (size = 120)
0x4cde60e0     0  sub csp, jssp, #0x8 (8)
0x4cde60e4     4  str x3, [jssp, #-8]!
0x4cde60e8     8  sub csp, jssp, #0x8 (8)
0x4cde60ec    12  str x0, [jssp, #-8]!
0x4cde60f0    16  ldr x0, pc+72 (addr 0x000000004cde6138)    ;; object: 0x2105b0f1 Cell for 0
0x4cde60f4    20  ldur x0, [x0, #7]
0x4cde60f8    24  cmp x0, #0x0 (0)
0x4cde60fc    28  b.ne #+0x14 (addr 0x4cde6110)
0x4cde6100    32  ldr x3, pc+64 (addr 0x000000004cde6140)    ;; object: 0xffffaa1cb479 WeakCell for 0x21040019 <JS Function (SharedFunctionInfo 0x2103ff71)>
0x4cde6104    36  ldur x3, [x3, #7]
0x4cde6108    40  tbz w3, #0, #+0x8 (addr 0x4cde6110)
0x4cde610c    44  b #+0x14 (addr 0x4cde6120)
0x4cde6110    48  ldr x0, [jssp], #8
0x4cde6114    52  ldr x3, [jssp], #8
0x4cde6118    56  ldr x16, pc+48 (addr 0x000000004cde6148)    ;; code: BUILTIN
0x4cde611c    60  br x16
0x4cde6120    64  add jssp, jssp, #0x10 (16)
0x4cde6124    68  mov x1, x3
0x4cde6128    72  ldr x16, pc+40 (addr 0x000000004cde6150)    ;; code: HANDLER, LoadConstantStub, minor: 4
0x4cde612c    76  br x16
0x4cde6130    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cde6134    84  d63f03e0       constant
0x4cde6138    88  2105b0f1       constant
0x4cde613c    92  00000000       constant
0x4cde6140    96  aa1cb479       constant
0x4cde6144   100  0000ffff       constant
0x4cde6148   104  4cd222e0       constant
0x4cde614c   108  00000000       constant
0x4cde6150   112  4cd43480       constant
0x4cde6154   116  00000000       constant


RelocInfo (size = 10)
0x4cde60f0  embedded object  (0x2105b0f1 Cell for 0)
0x4cde6100  embedded object  (0xffffaa1cb479 WeakCell for 0x21040019 <JS Function (SharedFunctionInfo 0x2103ff71)>)
0x4cde6118  code target (BUILTIN)  (0x4cd222e0)
0x4cde6128  code target (HANDLER)  (0x4cd43480)
0x4cde6130  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = utf8Slice
compiler = unknown
Instructions (size = 120)
0x4cde61c0     0  sub csp, jssp, #0x8 (8)
0x4cde61c4     4  str x3, [jssp, #-8]!
0x4cde61c8     8  sub csp, jssp, #0x8 (8)
0x4cde61cc    12  str x0, [jssp, #-8]!
0x4cde61d0    16  ldr x0, pc+72 (addr 0x000000004cde6218)    ;; object: 0xffffaa1cb1c9 Cell for 0
0x4cde61d4    20  ldur x0, [x0, #7]
0x4cde61d8    24  cmp x0, #0x0 (0)
0x4cde61dc    28  b.ne #+0x14 (addr 0x4cde61f0)
0x4cde61e0    32  ldr x3, pc+64 (addr 0x000000004cde6220)    ;; object: 0xffffaa1cb4b1 WeakCell for 0xffffaa1458a1 <a FastBuffer with map 0x2a822341>
0x4cde61e4    36  ldur x3, [x3, #7]
0x4cde61e8    40  tbz w3, #0, #+0x8 (addr 0x4cde61f0)
0x4cde61ec    44  b #+0x14 (addr 0x4cde6200)
0x4cde61f0    48  ldr x0, [jssp], #8
0x4cde61f4    52  ldr x3, [jssp], #8
0x4cde61f8    56  ldr x16, pc+48 (addr 0x000000004cde6228)    ;; code: BUILTIN
0x4cde61fc    60  br x16
0x4cde6200    64  add jssp, jssp, #0x10 (16)
0x4cde6204    68  mov x1, x3
0x4cde6208    72  ldr x16, pc+40 (addr 0x000000004cde6230)    ;; code: HANDLER, LoadConstantStub, minor: 6
0x4cde620c    76  br x16
0x4cde6210    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cde6214    84  d63f03e0       constant
0x4cde6218    88  aa1cb1c9       constant
0x4cde621c    92  0000ffff       constant
0x4cde6220    96  aa1cb4b1       constant
0x4cde6224   100  0000ffff       constant
0x4cde6228   104  4cd222e0       constant
0x4cde622c   108  00000000       constant
0x4cde6230   112  4cd8b020       constant
0x4cde6234   116  00000000       constant


RelocInfo (size = 10)
0x4cde61d0  embedded object  (0xffffaa1cb1c9 Cell for 0)
0x4cde61e0  embedded object  (0xffffaa1cb4b1 WeakCell for 0xffffaa1458a1 <a FastBuffer with map 0x2a822341>)
0x4cde61f8  code target (BUILTIN)  (0x4cd222e0)
0x4cde6208  code target (HANDLER)  (0x4cd8b020)
0x4cde6210  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = _compile
compiler = unknown
Instructions (size = 120)
0x4cde62a0     0  sub csp, jssp, #0x8 (8)
0x4cde62a4     4  str x3, [jssp, #-8]!
0x4cde62a8     8  sub csp, jssp, #0x8 (8)
0x4cde62ac    12  str x0, [jssp, #-8]!
0x4cde62b0    16  ldr x0, pc+72 (addr 0x000000004cde62f8)    ;; object: 0xffffaa1cad41 Cell for 0
0x4cde62b4    20  ldur x0, [x0, #7]
0x4cde62b8    24  cmp x0, #0x0 (0)
0x4cde62bc    28  b.ne #+0x14 (addr 0x4cde62d0)
0x4cde62c0    32  ldr x3, pc+64 (addr 0x000000004cde6300)    ;; object: 0xffffaa1cb4e9 WeakCell for 0x23340c39 <an Object with map 0x2a835009>
0x4cde62c4    36  ldur x3, [x3, #7]
0x4cde62c8    40  tbz w3, #0, #+0x8 (addr 0x4cde62d0)
0x4cde62cc    44  b #+0x14 (addr 0x4cde62e0)
0x4cde62d0    48  ldr x0, [jssp], #8
0x4cde62d4    52  ldr x3, [jssp], #8
0x4cde62d8    56  ldr x16, pc+48 (addr 0x000000004cde6308)    ;; code: BUILTIN
0x4cde62dc    60  br x16
0x4cde62e0    64  add jssp, jssp, #0x10 (16)
0x4cde62e4    68  mov x1, x3
0x4cde62e8    72  ldr x16, pc+40 (addr 0x000000004cde6310)    ;; code: HANDLER, LoadConstantStub, minor: 3
0x4cde62ec    76  br x16
0x4cde62f0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cde62f4    84  d63f03e0       constant
0x4cde62f8    88  aa1cad41       constant
0x4cde62fc    92  0000ffff       constant
0x4cde6300    96  aa1cb4e9       constant
0x4cde6304   100  0000ffff       constant
0x4cde6308   104  4cd222e0       constant
0x4cde630c   108  00000000       constant
0x4cde6310   112  4cd43400       constant
0x4cde6314   116  00000000       constant


RelocInfo (size = 10)
0x4cde62b0  embedded object  (0xffffaa1cad41 Cell for 0)
0x4cde62c0  embedded object  (0xffffaa1cb4e9 WeakCell for 0x23340c39 <an Object with map 0x2a835009>)
0x4cde62d8  code target (BUILTIN)  (0x4cd222e0)
0x4cde62e8  code target (HANDLER)  (0x4cd43400)
0x4cde62f0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = _debugWaitConnect
compiler = unknown
Instructions (size = 632)
0x4cde66c0     0  sub csp, jssp, #0x8 (8)
0x4cde66c4     4  str x3, [jssp, #-8]!
0x4cde66c8     8  sub csp, jssp, #0x8 (8)
0x4cde66cc    12  str x0, [jssp, #-8]!
0x4cde66d0    16  ldr x0, pc+544 (addr 0x000000004cde68f0)    ;; object: 0x210e3709 Cell for 0
0x4cde66d4    20  ldur x0, [x0, #7]
0x4cde66d8    24  cmp x0, #0x0 (0)
0x4cde66dc    28  b.ne #+0x1f8 (addr 0x4cde68d4)
0x4cde66e0    32  ldur x4, [x1, #-1]
0x4cde66e4    36  ldrb w0, [x4, #12]
0x4cde66e8    40  movz x16, #0x44
0x4cde66ec    44  tst x0, x16
0x4cde66f0    48  b.ne #+0x1e4 (addr 0x4cde68d4)
0x4cde66f4    52  ldrb w0, [x4, #11]
0x4cde66f8    56  cmp x0, #0xb1 (177)
0x4cde66fc    60  b.lt #+0x1d8 (addr 0x4cde68d4)
0x4cde6700    64  ldur x0, [x1, #7]
0x4cde6704    68  ldur x4, [x0, #-1]
0x4cde6708    72  ldr x16, [x26, #432]
0x4cde670c    76  cmp x4, x16
0x4cde6710    80  b.ne #+0x1c4 (addr 0x4cde68d4)
0x4cde6714    84  ldursw x4, [x0, #35]
0x4cde6718    88  sub x4, x4, #0x1 (1)
0x4cde671c    92  movz x16, #0xcc7f
0x4cde6720    96  movk x16, #0x12ec, lsl #16
0x4cde6724   100  and x4, x4, x16
0x4cde6728   104  add x4, x4, x4, lsl #1
0x4cde672c   108  add x4, x0, x4, lsl #3
0x4cde6730   112  ldur x4, [x4, #55]
0x4cde6734   116  ldr x16, [x26, #40]
0x4cde6738   120  cmp x4, x16
0x4cde673c   124  b.eq #+0x188 (addr 0x4cde68c4)
0x4cde6740   128  ldr x16, pc+440 (addr 0x000000004cde68f8)    ;; object: 0x210ba8a1 <String[17]: _debugWaitConnect>
0x4cde6744   132  cmp x4, x16
0x4cde6748   136  b.eq #+0x18c (addr 0x4cde68d4)
0x4cde674c   140  ldr x16, [x26, #88]
0x4cde6750   144  cmp x4, x16
0x4cde6754   148  b.eq #+0x1c (addr 0x4cde6770)
0x4cde6758   152  ldur x4, [x4, #-1]
0x4cde675c   156  ldrb w4, [x4, #11]
0x4cde6760   160  tst x4, #0xc0
0x4cde6764   164  movz x16, #0x80
0x4cde6768   168  ccmp x4, x16, #nZcv, ne
0x4cde676c   172  b.ne #+0x168 (addr 0x4cde68d4)
0x4cde6770   176  ldursw x4, [x0, #35]
0x4cde6774   180  sub x4, x4, #0x1 (1)
0x4cde6778   184  movz x16, #0xcc80
0x4cde677c   188  movk x16, #0x12ec, lsl #16
0x4cde6780   192  and x4, x4, x16
0x4cde6784   196  add x4, x4, x4, lsl #1
0x4cde6788   200  add x4, x0, x4, lsl #3
0x4cde678c   204  ldur x4, [x4, #55]
0x4cde6790   208  ldr x16, [x26, #40]
0x4cde6794   212  cmp x4, x16
0x4cde6798   216  b.eq #+0x12c (addr 0x4cde68c4)
0x4cde679c   220  ldr x16, pc+356 (addr 0x000000004cde6900)    ;; object: 0x210ba8a1 <String[17]: _debugWaitConnect>
0x4cde67a0   224  cmp x4, x16
0x4cde67a4   228  b.eq #+0x130 (addr 0x4cde68d4)
0x4cde67a8   232  ldr x16, [x26, #88]
0x4cde67ac   236  cmp x4, x16
0x4cde67b0   240  b.eq #+0x1c (addr 0x4cde67cc)
0x4cde67b4   244  ldur x4, [x4, #-1]
0x4cde67b8   248  ldrb w4, [x4, #11]
0x4cde67bc   252  tst x4, #0xc0
0x4cde67c0   256  movz x16, #0x80
0x4cde67c4   260  ccmp x4, x16, #nZcv, ne
0x4cde67c8   264  b.ne #+0x10c (addr 0x4cde68d4)
0x4cde67cc   268  ldursw x4, [x0, #35]
0x4cde67d0   272  sub x4, x4, #0x1 (1)
0x4cde67d4   276  movz x16, #0xcc82
0x4cde67d8   280  movk x16, #0x12ec, lsl #16
0x4cde67dc   284  and x4, x4, x16
0x4cde67e0   288  add x4, x4, x4, lsl #1
0x4cde67e4   292  add x4, x0, x4, lsl #3
0x4cde67e8   296  ldur x4, [x4, #55]
0x4cde67ec   300  ldr x16, [x26, #40]
0x4cde67f0   304  cmp x4, x16
0x4cde67f4   308  b.eq #+0xd0 (addr 0x4cde68c4)
0x4cde67f8   312  ldr x16, pc+272 (addr 0x000000004cde6908)    ;; object: 0x210ba8a1 <String[17]: _debugWaitConnect>
0x4cde67fc   316  cmp x4, x16
0x4cde6800   320  b.eq #+0xd4 (addr 0x4cde68d4)
0x4cde6804   324  ldr x16, [x26, #88]
0x4cde6808   328  cmp x4, x16
0x4cde680c   332  b.eq #+0x1c (addr 0x4cde6828)
0x4cde6810   336  ldur x4, [x4, #-1]
0x4cde6814   340  ldrb w4, [x4, #11]
0x4cde6818   344  tst x4, #0xc0
0x4cde681c   348  movz x16, #0x80
0x4cde6820   352  ccmp x4, x16, #nZcv, ne
0x4cde6824   356  b.ne #+0xb0 (addr 0x4cde68d4)
0x4cde6828   360  ldursw x4, [x0, #35]
0x4cde682c   364  sub x4, x4, #0x1 (1)
0x4cde6830   368  movz x16, #0xcc85
0x4cde6834   372  movk x16, #0x12ec, lsl #16
0x4cde6838   376  and x4, x4, x16
0x4cde683c   380  add x4, x4, x4, lsl #1
0x4cde6840   384  add x4, x0, x4, lsl #3
0x4cde6844   388  ldur x4, [x4, #55]
0x4cde6848   392  ldr x16, [x26, #40]
0x4cde684c   396  cmp x4, x16
0x4cde6850   400  b.eq #+0x74 (addr 0x4cde68c4)
0x4cde6854   404  ldr x16, pc+188 (addr 0x000000004cde6910)    ;; object: 0x210ba8a1 <String[17]: _debugWaitConnect>
0x4cde6858   408  cmp x4, x16
0x4cde685c   412  b.eq #+0x78 (addr 0x4cde68d4)
0x4cde6860   416  ldr x16, [x26, #88]
0x4cde6864   420  cmp x4, x16
0x4cde6868   424  b.eq #+0x1c (addr 0x4cde6884)
0x4cde686c   428  ldur x4, [x4, #-1]
0x4cde6870   432  ldrb w4, [x4, #11]
0x4cde6874   436  tst x4, #0xc0
0x4cde6878   440  movz x16, #0x80
0x4cde687c   444  ccmp x4, x16, #nZcv, ne
0x4cde6880   448  b.ne #+0x54 (addr 0x4cde68d4)
0x4cde6884   452  sub csp, jssp, #0x38 (56)
0x4cde6888   456  stp x3, x5, [jssp, #-32]!
0x4cde688c   460  stp x6, lr, [jssp, #16]
0x4cde6890   464  stp x0, x1, [jssp, #-24]!
0x4cde6894   468  str x2, [jssp, #16]
0x4cde6898   472  ldur x0, [x1, #7]
0x4cde689c   476  ldr x1, pc+124 (addr 0x000000004cde6918)    ;; object: 0x210ba8a1 <String[17]: _debugWaitConnect>
0x4cde68a0   480  ldr x16, pc+128 (addr 0x000000004cde6920)    ;; code: STUB, NameDictionaryLookupStub, minor: 1
0x4cde68a4   484  blr x16
0x4cde68a8   488  mov x4, x0
0x4cde68ac   492  ldp x2, x3, [jssp, #16]
0x4cde68b0   496  ldp x0, x1, [jssp], #32
0x4cde68b4   500  ldr lr, [jssp, #16]
0x4cde68b8   504  ldp x5, x6, [jssp], #24
0x4cde68bc   508  cbz x4, #+0x8 (addr 0x4cde68c4)
0x4cde68c0   512  b #+0x14 (addr 0x4cde68d4)
0x4cde68c4   516  add jssp, jssp, #0x10 (16)
0x4cde68c8   520  ldr x0, pc+96 (addr 0x000000004cde6928)    ;; object: 0x21004241 <undefined>
0x4cde68cc   524  ret
0x4cde68d0   528  b #+0x14 (addr 0x4cde68e4)
0x4cde68d4   532  ldr x0, [jssp], #8
0x4cde68d8   536  ldr x3, [jssp], #8
0x4cde68dc   540  ldr x16, pc+84 (addr 0x000000004cde6930)    ;; code: BUILTIN
0x4cde68e0   544  br x16
0x4cde68e4   548  5800029f       constant pool begin (num_const = 20)    ;; constant pool
0x4cde68e8   552  d63f03e0       constant
0x4cde68ec   556  d503201f       constant
0x4cde68f0   560  210e3709       constant
0x4cde68f4   564  00000000       constant
0x4cde68f8   568  210ba8a1       constant
0x4cde68fc   572  00000000       constant
0x4cde6900   576  210ba8a1       constant
0x4cde6904   580  00000000       constant
0x4cde6908   584  210ba8a1       constant
0x4cde690c   588  00000000       constant
0x4cde6910   592  210ba8a1       constant
0x4cde6914   596  00000000       constant
0x4cde6918   600  210ba8a1       constant
0x4cde691c   604  00000000       constant
0x4cde6920   608  4cd8b120       constant
0x4cde6924   612  00000000       constant
0x4cde6928   616  21004241       constant
0x4cde692c   620  00000000       constant
0x4cde6930   624  4cd222e0       constant
0x4cde6934   628  00000000       constant


RelocInfo (size = 25)
0x4cde66d0  embedded object  (0x210e3709 Cell for 0)
0x4cde6740  embedded object  (0x210ba8a1 <String[17]: _debugWaitConnect>)
0x4cde679c  embedded object  (0x210ba8a1 <String[17]: _debugWaitConnect>)
0x4cde67f8  embedded object  (0x210ba8a1 <String[17]: _debugWaitConnect>)
0x4cde6854  embedded object  (0x210ba8a1 <String[17]: _debugWaitConnect>)
0x4cde689c  embedded object  (0x210ba8a1 <String[17]: _debugWaitConnect>)
0x4cde68a0  code target (STUB)  (0x4cd8b120)
0x4cde68c8  embedded object  (0x21004241 <undefined>)
0x4cde68dc  code target (BUILTIN)  (0x4cd222e0)
0x4cde68e4  constant pool (size 84)

kind = HANDLER
major_key = <NoCache>Stub
name = constructor
compiler = unknown
Instructions (size = 120)
0x4cde69a0     0  sub csp, jssp, #0x8 (8)
0x4cde69a4     4  str x3, [jssp, #-8]!
0x4cde69a8     8  sub csp, jssp, #0x8 (8)
0x4cde69ac    12  str x0, [jssp, #-8]!
0x4cde69b0    16  ldr x0, pc+72 (addr 0x000000004cde69f8)    ;; object: 0xffffaa1cad41 Cell for 0
0x4cde69b4    20  ldur x0, [x0, #7]
0x4cde69b8    24  cmp x0, #0x0 (0)
0x4cde69bc    28  b.ne #+0x14 (addr 0x4cde69d0)
0x4cde69c0    32  ldr x3, pc+64 (addr 0x000000004cde6a00)    ;; object: 0xffffaa1cbb41 WeakCell for 0x23340c39 <an Object with map 0x2a835009>
0x4cde69c4    36  ldur x3, [x3, #7]
0x4cde69c8    40  tbz w3, #0, #+0x8 (addr 0x4cde69d0)
0x4cde69cc    44  b #+0x14 (addr 0x4cde69e0)
0x4cde69d0    48  ldr x0, [jssp], #8
0x4cde69d4    52  ldr x3, [jssp], #8
0x4cde69d8    56  ldr x16, pc+48 (addr 0x000000004cde6a08)    ;; code: BUILTIN
0x4cde69dc    60  br x16
0x4cde69e0    64  add jssp, jssp, #0x10 (16)
0x4cde69e4    68  mov x1, x3
0x4cde69e8    72  ldr x16, pc+40 (addr 0x000000004cde6a10)    ;; code: HANDLER, LoadConstantStub, minor: 0
0x4cde69ec    76  br x16
0x4cde69f0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cde69f4    84  d63f03e0       constant
0x4cde69f8    88  aa1cad41       constant
0x4cde69fc    92  0000ffff       constant
0x4cde6a00    96  aa1cbb41       constant
0x4cde6a04   100  0000ffff       constant
0x4cde6a08   104  4cd222e0       constant
0x4cde6a0c   108  00000000       constant
0x4cde6a10   112  4cd431a0       constant
0x4cde6a14   116  00000000       constant


RelocInfo (size = 10)
0x4cde69b0  embedded object  (0xffffaa1cad41 Cell for 0)
0x4cde69c0  embedded object  (0xffffaa1cbb41 WeakCell for 0x23340c39 <an Object with map 0x2a835009>)
0x4cde69d8  code target (BUILTIN)  (0x4cd222e0)
0x4cde69e8  code target (HANDLER)  (0x4cd431a0)
0x4cde69f0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = resolve
compiler = unknown
Instructions (size = 152)
0x4cde6a80     0  sub csp, jssp, #0x8 (8)
0x4cde6a84     4  str x3, [jssp, #-8]!
0x4cde6a88     8  sub csp, jssp, #0x8 (8)
0x4cde6a8c    12  str x4, [jssp, #-8]!
0x4cde6a90    16  ldr x3, pc+88 (addr 0x000000004cde6ae8)    ;; object: 0x2105b0f1 Cell for 0
0x4cde6a94    20  ldur x3, [x3, #7]
0x4cde6a98    24  cmp x3, #0x0 (0)
0x4cde6a9c    28  b.ne #+0x30 (addr 0x4cde6acc)
0x4cde6aa0    32  tbz w0, #0, #+0x2c (addr 0x4cde6acc)
0x4cde6aa4    36  ldr x5, pc+76 (addr 0x000000004cde6af0)    ;; object: 0xffffaa1cbb79 WeakCell for 0x2a836711 <Map(FAST_HOLEY_ELEMENTS)>
0x4cde6aa8    40  ldur x5, [x5, #7]
0x4cde6aac    44  tbz w5, #0, #+0x20 (addr 0x4cde6acc)
0x4cde6ab0    48  ldursw x4, [x5, #15]
0x4cde6ab4    52  tbnz w4, #23, #+0x18 (addr 0x4cde6acc)
0x4cde6ab8    56  ldr x4, [jssp], #8
0x4cde6abc    60  ldr x3, [jssp], #8
0x4cde6ac0    64  ldr x2, pc+56 (addr 0x000000004cde6af8)    ;; object: 0x2108fcd9 <String[7]: resolve>
0x4cde6ac4    68  ldr x16, pc+60 (addr 0x000000004cde6b00)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0x4cde6ac8    72  br x16
0x4cde6acc    76  ldr x2, pc+60 (addr 0x000000004cde6b08)    ;; object: 0x2108fcd9 <String[7]: resolve>
0x4cde6ad0    80  ldr x4, [jssp], #8
0x4cde6ad4    84  ldr x3, [jssp], #8
0x4cde6ad8    88  ldr x16, pc+56 (addr 0x000000004cde6b10)    ;; code: BUILTIN
0x4cde6adc    92  br x16
0x4cde6ae0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cde6ae4   100  d63f03e0       constant
0x4cde6ae8   104  2105b0f1       constant
0x4cde6aec   108  00000000       constant
0x4cde6af0   112  aa1cbb79       constant
0x4cde6af4   116  0000ffff       constant
0x4cde6af8   120  2108fcd9       constant
0x4cde6afc   124  00000000       constant
0x4cde6b00   128  4cd38860       constant
0x4cde6b04   132  00000000       constant
0x4cde6b08   136  2108fcd9       constant
0x4cde6b0c   140  00000000       constant
0x4cde6b10   144  4cd22420       constant
0x4cde6b14   148  00000000       constant


RelocInfo (size = 12)
0x4cde6a90  embedded object  (0x2105b0f1 Cell for 0)
0x4cde6aa4  embedded object  (0xffffaa1cbb79 WeakCell for 0x2a836711 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cde6ac0  embedded object  (0x2108fcd9 <String[7]: resolve>)
0x4cde6ac4  code target (HANDLER)  (0x4cd38860)
0x4cde6acc  embedded object  (0x2108fcd9 <String[7]: resolve>)
0x4cde6ad8  code target (BUILTIN)  (0x4cd22420)
0x4cde6ae0  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = main
compiler = unknown
Instructions (size = 184)
0x4cde6b80     0  sub csp, jssp, #0x8 (8)
0x4cde6b84     4  str x3, [jssp, #-8]!
0x4cde6b88     8  sub csp, jssp, #0x8 (8)
0x4cde6b8c    12  str x4, [jssp, #-8]!
0x4cde6b90    16  ldr x3, pc+112 (addr 0x000000004cde6c00)    ;; object: 0x2105b0f1 Cell for 0
0x4cde6b94    20  ldur x3, [x3, #7]
0x4cde6b98    24  cmp x3, #0x0 (0)
0x4cde6b9c    28  b.ne #+0x44 (addr 0x4cde6be0)
0x4cde6ba0    32  tbz w0, #0, #+0x40 (addr 0x4cde6be0)
0x4cde6ba4    36  ldur x3, [x0, #-1]
0x4cde6ba8    40  ldr x4, pc+96 (addr 0x000000004cde6c08)    ;; object: 0xffffaa1370a1 WeakCell for 0x2a8363a1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cde6bac    44  ldur x4, [x4, #7]
0x4cde6bb0    48  cmp x3, x4
0x4cde6bb4    52  b.ne #+0x2c (addr 0x4cde6be0)
0x4cde6bb8    56  ldr x5, pc+88 (addr 0x000000004cde6c10)    ;; object: 0xffffaa1cbbb1 WeakCell for 0x2a836769 <Map(FAST_HOLEY_ELEMENTS)>
0x4cde6bbc    60  ldur x5, [x5, #7]
0x4cde6bc0    64  tbz w5, #0, #+0x20 (addr 0x4cde6be0)
0x4cde6bc4    68  ldursw x4, [x5, #15]
0x4cde6bc8    72  tbnz w4, #23, #+0x18 (addr 0x4cde6be0)
0x4cde6bcc    76  ldr x4, [jssp], #8
0x4cde6bd0    80  ldr x3, [jssp], #8
0x4cde6bd4    84  ldr x2, pc+68 (addr 0x000000004cde6c18)    ;; object: 0xffffaa107b89 <String[4]: main>
0x4cde6bd8    88  ldr x16, pc+72 (addr 0x000000004cde6c20)    ;; code: HANDLER, StoreTransitionStub, minor: 196611
0x4cde6bdc    92  br x16
0x4cde6be0    96  ldr x2, pc+72 (addr 0x000000004cde6c28)    ;; object: 0xffffaa107b89 <String[4]: main>
0x4cde6be4   100  ldr x4, [jssp], #8
0x4cde6be8   104  ldr x3, [jssp], #8
0x4cde6bec   108  ldr x16, pc+68 (addr 0x000000004cde6c30)    ;; code: BUILTIN
0x4cde6bf0   112  br x16
0x4cde6bf4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cde6bf8   120  d63f03e0       constant
0x4cde6bfc   124  d503201f       constant
0x4cde6c00   128  2105b0f1       constant
0x4cde6c04   132  00000000       constant
0x4cde6c08   136  aa1370a1       constant
0x4cde6c0c   140  0000ffff       constant
0x4cde6c10   144  aa1cbbb1       constant
0x4cde6c14   148  0000ffff       constant
0x4cde6c18   152  aa107b89       constant
0x4cde6c1c   156  0000ffff       constant
0x4cde6c20   160  4cd99940       constant
0x4cde6c24   164  00000000       constant
0x4cde6c28   168  aa107b89       constant
0x4cde6c2c   172  0000ffff       constant
0x4cde6c30   176  4cd22420       constant
0x4cde6c34   180  00000000       constant


RelocInfo (size = 13)
0x4cde6b90  embedded object  (0x2105b0f1 Cell for 0)
0x4cde6ba8  embedded object  (0xffffaa1370a1 WeakCell for 0x2a8363a1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cde6bb8  embedded object  (0xffffaa1cbbb1 WeakCell for 0x2a836769 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cde6bd4  embedded object  (0xffffaa107b89 <String[4]: main>)
0x4cde6bd8  code target (HANDLER)  (0x4cd99940)
0x4cde6be0  embedded object  (0xffffaa107b89 <String[4]: main>)
0x4cde6bec  code target (BUILTIN)  (0x4cd22420)
0x4cde6bf4  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = extensions
compiler = unknown
Instructions (size = 184)
0x4cde6ca0     0  sub csp, jssp, #0x8 (8)
0x4cde6ca4     4  str x3, [jssp, #-8]!
0x4cde6ca8     8  sub csp, jssp, #0x8 (8)
0x4cde6cac    12  str x4, [jssp, #-8]!
0x4cde6cb0    16  ldr x3, pc+112 (addr 0x000000004cde6d20)    ;; object: 0x2105b0f1 Cell for 0
0x4cde6cb4    20  ldur x3, [x3, #7]
0x4cde6cb8    24  cmp x3, #0x0 (0)
0x4cde6cbc    28  b.ne #+0x44 (addr 0x4cde6d00)
0x4cde6cc0    32  tbz w0, #0, #+0x40 (addr 0x4cde6d00)
0x4cde6cc4    36  ldur x3, [x0, #-1]
0x4cde6cc8    40  ldr x4, pc+96 (addr 0x000000004cde6d28)    ;; object: 0xffffaa12e741 WeakCell for 0x2a835111 <Map(FAST_HOLEY_ELEMENTS)>
0x4cde6ccc    44  ldur x4, [x4, #7]
0x4cde6cd0    48  cmp x3, x4
0x4cde6cd4    52  b.ne #+0x2c (addr 0x4cde6d00)
0x4cde6cd8    56  ldr x5, pc+88 (addr 0x000000004cde6d30)    ;; object: 0xffffaa1cbbe9 WeakCell for 0x2a8367c1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cde6cdc    60  ldur x5, [x5, #7]
0x4cde6ce0    64  tbz w5, #0, #+0x20 (addr 0x4cde6d00)
0x4cde6ce4    68  ldursw x4, [x5, #15]
0x4cde6ce8    72  tbnz w4, #23, #+0x18 (addr 0x4cde6d00)
0x4cde6cec    76  ldr x4, [jssp], #8
0x4cde6cf0    80  ldr x3, [jssp], #8
0x4cde6cf4    84  ldr x2, pc+68 (addr 0x000000004cde6d38)    ;; object: 0xffffaa10a9e9 <String[10]: extensions>
0x4cde6cf8    88  ldr x16, pc+72 (addr 0x000000004cde6d40)    ;; code: HANDLER, StoreTransitionStub, minor: 196612
0x4cde6cfc    92  br x16
0x4cde6d00    96  ldr x2, pc+72 (addr 0x000000004cde6d48)    ;; object: 0xffffaa10a9e9 <String[10]: extensions>
0x4cde6d04   100  ldr x4, [jssp], #8
0x4cde6d08   104  ldr x3, [jssp], #8
0x4cde6d0c   108  ldr x16, pc+68 (addr 0x000000004cde6d50)    ;; code: BUILTIN
0x4cde6d10   112  br x16
0x4cde6d14   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cde6d18   120  d63f03e0       constant
0x4cde6d1c   124  d503201f       constant
0x4cde6d20   128  2105b0f1       constant
0x4cde6d24   132  00000000       constant
0x4cde6d28   136  aa12e741       constant
0x4cde6d2c   140  0000ffff       constant
0x4cde6d30   144  aa1cbbe9       constant
0x4cde6d34   148  0000ffff       constant
0x4cde6d38   152  aa10a9e9       constant
0x4cde6d3c   156  0000ffff       constant
0x4cde6d40   160  4cd9a100       constant
0x4cde6d44   164  00000000       constant
0x4cde6d48   168  aa10a9e9       constant
0x4cde6d4c   172  0000ffff       constant
0x4cde6d50   176  4cd22420       constant
0x4cde6d54   180  00000000       constant


RelocInfo (size = 13)
0x4cde6cb0  embedded object  (0x2105b0f1 Cell for 0)
0x4cde6cc8  embedded object  (0xffffaa12e741 WeakCell for 0x2a835111 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cde6cd8  embedded object  (0xffffaa1cbbe9 WeakCell for 0x2a8367c1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cde6cf4  embedded object  (0xffffaa10a9e9 <String[10]: extensions>)
0x4cde6cf8  code target (HANDLER)  (0x4cd9a100)
0x4cde6d00  embedded object  (0xffffaa10a9e9 <String[10]: extensions>)
0x4cde6d0c  code target (BUILTIN)  (0x4cd22420)
0x4cde6d14  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = cache
compiler = unknown
Instructions (size = 184)
0x4cde6dc0     0  sub csp, jssp, #0x8 (8)
0x4cde6dc4     4  str x3, [jssp, #-8]!
0x4cde6dc8     8  sub csp, jssp, #0x8 (8)
0x4cde6dcc    12  str x4, [jssp, #-8]!
0x4cde6dd0    16  ldr x3, pc+112 (addr 0x000000004cde6e40)    ;; object: 0x2105b0f1 Cell for 0
0x4cde6dd4    20  ldur x3, [x3, #7]
0x4cde6dd8    24  cmp x3, #0x0 (0)
0x4cde6ddc    28  b.ne #+0x44 (addr 0x4cde6e20)
0x4cde6de0    32  tbz w0, #0, #+0x40 (addr 0x4cde6e20)
0x4cde6de4    36  ldur x3, [x0, #-1]
0x4cde6de8    40  ldr x4, pc+96 (addr 0x000000004cde6e48)    ;; object: 0xffffaa1caef9 WeakCell for 0x2a8366b9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cde6dec    44  ldur x4, [x4, #7]
0x4cde6df0    48  cmp x3, x4
0x4cde6df4    52  b.ne #+0x2c (addr 0x4cde6e20)
0x4cde6df8    56  ldr x5, pc+88 (addr 0x000000004cde6e50)    ;; object: 0xffffaa1cbc21 WeakCell for 0x2a836819 <Map(FAST_HOLEY_ELEMENTS)>
0x4cde6dfc    60  ldur x5, [x5, #7]
0x4cde6e00    64  tbz w5, #0, #+0x20 (addr 0x4cde6e20)
0x4cde6e04    68  ldursw x4, [x5, #15]
0x4cde6e08    72  tbnz w4, #23, #+0x18 (addr 0x4cde6e20)
0x4cde6e0c    76  ldr x4, [jssp], #8
0x4cde6e10    80  ldr x3, [jssp], #8
0x4cde6e14    84  ldr x2, pc+68 (addr 0x000000004cde6e58)    ;; object: 0x210bab51 <String[5]: cache>
0x4cde6e18    88  ldr x16, pc+72 (addr 0x000000004cde6e60)    ;; code: HANDLER, StoreTransitionStub, minor: 327685
0x4cde6e1c    92  br x16
0x4cde6e20    96  ldr x2, pc+72 (addr 0x000000004cde6e68)    ;; object: 0x210bab51 <String[5]: cache>
0x4cde6e24   100  ldr x4, [jssp], #8
0x4cde6e28   104  ldr x3, [jssp], #8
0x4cde6e2c   108  ldr x16, pc+68 (addr 0x000000004cde6e70)    ;; code: BUILTIN
0x4cde6e30   112  br x16
0x4cde6e34   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cde6e38   120  d63f03e0       constant
0x4cde6e3c   124  d503201f       constant
0x4cde6e40   128  2105b0f1       constant
0x4cde6e44   132  00000000       constant
0x4cde6e48   136  aa1caef9       constant
0x4cde6e4c   140  0000ffff       constant
0x4cde6e50   144  aa1cbc21       constant
0x4cde6e54   148  0000ffff       constant
0x4cde6e58   152  210bab51       constant
0x4cde6e5c   156  00000000       constant
0x4cde6e60   160  4cd9d3c0       constant
0x4cde6e64   164  00000000       constant
0x4cde6e68   168  210bab51       constant
0x4cde6e6c   172  00000000       constant
0x4cde6e70   176  4cd22420       constant
0x4cde6e74   180  00000000       constant


RelocInfo (size = 13)
0x4cde6dd0  embedded object  (0x2105b0f1 Cell for 0)
0x4cde6de8  embedded object  (0xffffaa1caef9 WeakCell for 0x2a8366b9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cde6df8  embedded object  (0xffffaa1cbc21 WeakCell for 0x2a836819 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cde6e14  embedded object  (0x210bab51 <String[5]: cache>)
0x4cde6e18  code target (HANDLER)  (0x4cd9d3c0)
0x4cde6e20  embedded object  (0x210bab51 <String[5]: cache>)
0x4cde6e2c  code target (BUILTIN)  (0x4cd22420)
0x4cde6e34  constant pool (size 68)

--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastCloneShallowObjectStub
compiler = crankshaft
Instructions (size = 469)
0x4cde8080     0  ldur x4, [x3, #47]
0x4cde8084     4  tbnz w2, #0, #+0x98 (addr 0x4cde811c)
0x4cde8088     8  asr x6, x2, #32
0x4cde808c    12  add x5, x4, #0x17 (23)
0x4cde8090    16  ldr x7, [x5, w6, sxtw #3]
0x4cde8094    20  ldr x4, pc+316 (addr 0x000000004cde81d0)    ;; object: 0x21004241 <undefined>
0x4cde8098    24  cmp x7, x4
0x4cde809c    28  b.eq #+0x7c (addr 0x4cde8118)
0x4cde80a0    32  ldur x4, [x7, #7]
0x4cde80a4    36  ldur x5, [x4, #-1]
0x4cde80a8    40  ldrb w6, [x5, #7]
0x4cde80ac    44  cmp w6, #0x4 (4)
0x4cde80b0    48  b.ne #+0x68 (addr 0x4cde8118)
0x4cde80b4    52  movz x1, #0xd2c0
0x4cde80b8    56  movk x1, #0x166d, lsl #16
0x4cde80bc    60  ldp x2, x0, [x1]
0x4cde80c0    64  adds x16, x2, #0x30 (48)
0x4cde80c4    68  ccmp x16, x0, #nzCv, lo
0x4cde80c8    72  b.hi #+0x9c (addr 0x4cde8164)
0x4cde80cc    76  str x16, [x1]
0x4cde80d0    80  orr x2, x2, #0x1
0x4cde80d4    84  stur x5, [x2, #-1]
0x4cde80d8    88  ldur x0, [x4, #7]
0x4cde80dc    92  stur x0, [x2, #7]
0x4cde80e0    96  ldur x0, [x4, #15]
0x4cde80e4   100  stur x0, [x2, #15]
0x4cde80e8   104  ldur x0, [x4, #23]
0x4cde80ec   108  stur x0, [x2, #23]
0x4cde80f0   112  add x0, x2, #0x20 (32)
0x4cde80f4   116  ldr x1, pc+228 (addr 0x000000004cde81d8)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cde80f8   120  stur x1, [x0, #-1]
0x4cde80fc   124  stur x7, [x0, #7]
0x4cde8100   128  ldur w0, [x7, #35]
0x4cde8104   132  add w0, w0, #0x1 (1)
0x4cde8108   136  lsl x0, x0, #32
0x4cde810c   140  stur x0, [x7, #31]
0x4cde8110   144  mov x0, x2
0x4cde8114   148  ret
0x4cde8118   152  b #+0xe0 (addr 0x4cde81f8)
0x4cde811c   156  sub csp, jssp, #0x10 (16)
0x4cde8120   160  stp fp, lr, [jssp, #-16]!
0x4cde8124   164  movz fp, #0xa00000000
0x4cde8128   168  sub csp, jssp, #0x8 (8)
0x4cde812c   172  str fp, [jssp, #-8]!
0x4cde8130   176  add fp, jssp, #0x8 (8)
0x4cde8134   180  ldur x16, [x2, #-1]
0x4cde8138   184  ldr x17, [x26, #120]
0x4cde813c   188  cmp x16, x17
0x4cde8140   192  b.ne #+0xc8 (addr 0x4cde8208)
0x4cde8144   196  ldur d29, [x2, #7]
0x4cde8148   200  fcvtzs w6, d29
0x4cde814c   204  scvtf d0, w6
0x4cde8150   208  fcmp d29, d0
0x4cde8154   212  b.ne #+0xb4 (addr 0x4cde8208)
0x4cde8158   216  ldr lr, [jssp, #16]
0x4cde815c   220  ldp xzr, fp, [jssp], #24
0x4cde8160   224  b #-0xd4 (addr 0x4cde808c)
0x4cde8164   228  sub csp, jssp, #0x10 (16)
0x4cde8168   232  stp fp, lr, [jssp, #-16]!
0x4cde816c   236  movz fp, #0xa00000000
0x4cde8170   240  sub csp, jssp, #0x8 (8)
0x4cde8174   244  str fp, [jssp, #-8]!
0x4cde8178   248  add fp, jssp, #0x8 (8)
0x4cde817c   252  movz x2, #0x0
0x4cde8180   256  mov x16, lr
0x4cde8184   260  ldr x17, pc+92 (addr 0x000000004cde81e0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cde8188   264  blr x17
0x4cde818c   268  movz x0, #0x3000000000
0x4cde8190   272  movz x10, #0x0
0x4cde8194   276  sub csp, jssp, #0x10 (16)
0x4cde8198   280  stp x10, x0, [jssp, #-16]!
0x4cde819c   284  movz x0, #0x2
0x4cde81a0   288  movz x1, #0x5b88
0x4cde81a4   292  movk x1, #0xe2, lsl #16
0x4cde81a8   296  ldr x16, pc+64 (addr 0x000000004cde81e8)    ;; code: STUB, CEntryStub, minor: 5
0x4cde81ac   300  blr x16
0x4cde81b0   304  str x0, [jssp, #16]
0x4cde81b4   308  ldr x16, pc+60 (addr 0x000000004cde81f0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cde81b8   312  blr x16
0x4cde81bc   316  ldr lr, [jssp, #16]
0x4cde81c0   320  ldp xzr, fp, [jssp], #24
0x4cde81c4   324  b #-0xf0 (addr 0x4cde80d4)
0x4cde81c8   328  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0x4cde81cc   332  d63f03e0       constant
0x4cde81d0   336  21004241       constant
0x4cde81d4   340  00000000       constant
0x4cde81d8   344  2a805d81       constant
0x4cde81dc   348  00000000       constant
0x4cde81e0   352  4cd06820       constant
0x4cde81e4   356  00000000       constant
0x4cde81e8   360  4cd06260       constant
0x4cde81ec   364  00000000       constant
0x4cde81f0   368  4cd068e0       constant
0x4cde81f4   372  00000000       constant
0x4cde81f8   376  movz x16, #0x0
0x4cde81fc   380  sub csp, jssp, #0x10 (16)
0x4cde8200   384  stp fp, lr, [jssp, #-16]!
0x4cde8204   388  bl #+0xc (addr 0x4cde8210)
0x4cde8208   392  movz x16, #0x8
0x4cde820c   396  bl #+0x14 (addr 0x4cde8220)
0x4cde8210   400  movz x17, #0xa00000000
0x4cde8214   404  sub csp, jssp, #0x10 (16)
0x4cde8218   408  stp x17, cp, [jssp, #-16]!
0x4cde821c   412  add fp, jssp, #0x10 (16)
0x4cde8220   416  ldr x17, pc+24 (addr 0x000000004cde8238)    ;; lazy deoptimization bailout 0
0x4cde8224   420  add x17, x17, x16
0x4cde8228   424  br x17
0x4cde822c   428  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cde8230   432  d63f03e0       constant
0x4cde8234   436  d503201f       constant
0x4cde8238   440  4cb06000       constant
0x4cde823c   444  00000000       constant


Safepoints (size = 21)
0x4cde81b0   304  000 | x2 | x4 | x5 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 25)
0x4cde8094  embedded object  (0x21004241 <undefined>)
0x4cde80f4  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cde8184  code target (STUB)  (0x4cd06820)
0x4cde81a8  code target (STUB)  (0x4cd06260)
0x4cde81b4  code target (STUB)  (0x4cd068e0)
0x4cde81c8  constant pool (size 48)
0x4cde8220  runtime entry
0x4cde822c  constant pool (size 20)

--- End code ---
kind = STUB
major_key = FastCloneShallowObjectStub
name = FastCloneShallowObjectStub
compiler = crankshaft
Instructions (size = 469)
0x4cde8080     0  ldur x4, [x3, #47]
0x4cde8084     4  tbnz w2, #0, #+0x98 (addr 0x4cde811c)
0x4cde8088     8  asr x6, x2, #32
0x4cde808c    12  add x5, x4, #0x17 (23)
0x4cde8090    16  ldr x7, [x5, w6, sxtw #3]
0x4cde8094    20  ldr x4, pc+316 (addr 0x000000004cde81d0)    ;; object: 0x21004241 <undefined>
0x4cde8098    24  cmp x7, x4
0x4cde809c    28  b.eq #+0x7c (addr 0x4cde8118)
0x4cde80a0    32  ldur x4, [x7, #7]
0x4cde80a4    36  ldur x5, [x4, #-1]
0x4cde80a8    40  ldrb w6, [x5, #7]
0x4cde80ac    44  cmp w6, #0x4 (4)
0x4cde80b0    48  b.ne #+0x68 (addr 0x4cde8118)
0x4cde80b4    52  movz x1, #0xd2c0
0x4cde80b8    56  movk x1, #0x166d, lsl #16
0x4cde80bc    60  ldp x2, x0, [x1]
0x4cde80c0    64  adds x16, x2, #0x30 (48)
0x4cde80c4    68  ccmp x16, x0, #nzCv, lo
0x4cde80c8    72  b.hi #+0x9c (addr 0x4cde8164)
0x4cde80cc    76  str x16, [x1]
0x4cde80d0    80  orr x2, x2, #0x1
0x4cde80d4    84  stur x5, [x2, #-1]
0x4cde80d8    88  ldur x0, [x4, #7]
0x4cde80dc    92  stur x0, [x2, #7]
0x4cde80e0    96  ldur x0, [x4, #15]
0x4cde80e4   100  stur x0, [x2, #15]
0x4cde80e8   104  ldur x0, [x4, #23]
0x4cde80ec   108  stur x0, [x2, #23]
0x4cde80f0   112  add x0, x2, #0x20 (32)
0x4cde80f4   116  ldr x1, pc+228 (addr 0x000000004cde81d8)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cde80f8   120  stur x1, [x0, #-1]
0x4cde80fc   124  stur x7, [x0, #7]
0x4cde8100   128  ldur w0, [x7, #35]
0x4cde8104   132  add w0, w0, #0x1 (1)
0x4cde8108   136  lsl x0, x0, #32
0x4cde810c   140  stur x0, [x7, #31]
0x4cde8110   144  mov x0, x2
0x4cde8114   148  ret
0x4cde8118   152  b #+0xe0 (addr 0x4cde81f8)
0x4cde811c   156  sub csp, jssp, #0x10 (16)
0x4cde8120   160  stp fp, lr, [jssp, #-16]!
0x4cde8124   164  movz fp, #0xa00000000
0x4cde8128   168  sub csp, jssp, #0x8 (8)
0x4cde812c   172  str fp, [jssp, #-8]!
0x4cde8130   176  add fp, jssp, #0x8 (8)
0x4cde8134   180  ldur x16, [x2, #-1]
0x4cde8138   184  ldr x17, [x26, #120]
0x4cde813c   188  cmp x16, x17
0x4cde8140   192  b.ne #+0xc8 (addr 0x4cde8208)
0x4cde8144   196  ldur d29, [x2, #7]
0x4cde8148   200  fcvtzs w6, d29
0x4cde814c   204  scvtf d0, w6
0x4cde8150   208  fcmp d29, d0
0x4cde8154   212  b.ne #+0xb4 (addr 0x4cde8208)
0x4cde8158   216  ldr lr, [jssp, #16]
0x4cde815c   220  ldp xzr, fp, [jssp], #24
0x4cde8160   224  b #-0xd4 (addr 0x4cde808c)
0x4cde8164   228  sub csp, jssp, #0x10 (16)
0x4cde8168   232  stp fp, lr, [jssp, #-16]!
0x4cde816c   236  movz fp, #0xa00000000
0x4cde8170   240  sub csp, jssp, #0x8 (8)
0x4cde8174   244  str fp, [jssp, #-8]!
0x4cde8178   248  add fp, jssp, #0x8 (8)
0x4cde817c   252  movz x2, #0x0
0x4cde8180   256  mov x16, lr
0x4cde8184   260  ldr x17, pc+92 (addr 0x000000004cde81e0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cde8188   264  blr x17
0x4cde818c   268  movz x0, #0x3000000000
0x4cde8190   272  movz x10, #0x0
0x4cde8194   276  sub csp, jssp, #0x10 (16)
0x4cde8198   280  stp x10, x0, [jssp, #-16]!
0x4cde819c   284  movz x0, #0x2
0x4cde81a0   288  movz x1, #0x5b88
0x4cde81a4   292  movk x1, #0xe2, lsl #16
0x4cde81a8   296  ldr x16, pc+64 (addr 0x000000004cde81e8)    ;; code: STUB, CEntryStub, minor: 5
0x4cde81ac   300  blr x16
0x4cde81b0   304  str x0, [jssp, #16]
0x4cde81b4   308  ldr x16, pc+60 (addr 0x000000004cde81f0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cde81b8   312  blr x16
0x4cde81bc   316  ldr lr, [jssp, #16]
0x4cde81c0   320  ldp xzr, fp, [jssp], #24
0x4cde81c4   324  b #-0xf0 (addr 0x4cde80d4)
0x4cde81c8   328  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0x4cde81cc   332  d63f03e0       constant
0x4cde81d0   336  21004241       constant
0x4cde81d4   340  00000000       constant
0x4cde81d8   344  2a805d81       constant
0x4cde81dc   348  00000000       constant
0x4cde81e0   352  4cd06820       constant
0x4cde81e4   356  00000000       constant
0x4cde81e8   360  4cd06260       constant
0x4cde81ec   364  00000000       constant
0x4cde81f0   368  4cd068e0       constant
0x4cde81f4   372  00000000       constant
0x4cde81f8   376  movz x16, #0x0
0x4cde81fc   380  sub csp, jssp, #0x10 (16)
0x4cde8200   384  stp fp, lr, [jssp, #-16]!
0x4cde8204   388  bl #+0xc (addr 0x4cde8210)
0x4cde8208   392  movz x16, #0x8
0x4cde820c   396  bl #+0x14 (addr 0x4cde8220)
0x4cde8210   400  movz x17, #0xa00000000
0x4cde8214   404  sub csp, jssp, #0x10 (16)
0x4cde8218   408  stp x17, cp, [jssp, #-16]!
0x4cde821c   412  add fp, jssp, #0x10 (16)
0x4cde8220   416  ldr x17, pc+24 (addr 0x000000004cde8238)    ;; lazy deoptimization bailout 0
0x4cde8224   420  add x17, x17, x16
0x4cde8228   424  br x17
0x4cde822c   428  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cde8230   432  d63f03e0       constant
0x4cde8234   436  d503201f       constant
0x4cde8238   440  4cb06000       constant
0x4cde823c   444  00000000       constant


Safepoints (size = 21)
0x4cde81b0   304  000 | x2 | x4 | x5 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 25)
0x4cde8094  embedded object  (0x21004241 <undefined>)
0x4cde80f4  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cde8184  code target (STUB)  (0x4cd06820)
0x4cde81a8  code target (STUB)  (0x4cd06260)
0x4cde81b4  code target (STUB)  (0x4cd068e0)
0x4cde81c8  constant pool (size 48)
0x4cde8220  runtime entry
0x4cde822c  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*SMI -> GENERIC
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 632)
0x4cdea540     0  tbnz w0, #0, #+0x1d4 (addr 0x4cdea714)
0x4cdea544     4  orr x16, x1, x0
0x4cdea548     8  tbnz w16, #0, #+0x10 (addr 0x4cdea558)
0x4cdea54c    12  asr x1, x1, #32
0x4cdea550    16  sub x0, x1, x0, asr #32
0x4cdea554    20  ret
0x4cdea558    24  cmp x0, x1
0x4cdea55c    28  b.ne #+0x30 (addr 0x4cdea58c)
0x4cdea560    32  ldur x16, [x0, #-1]
0x4cdea564    36  ldr x17, [x26, #120]
0x4cdea568    40  cmp x16, x17
0x4cdea56c    44  b.eq #+0xc (addr 0x4cdea578)
0x4cdea570    48  movz x0, #0x0
0x4cdea574    52  ret
0x4cdea578    56  ldur d0, [x0, #7]
0x4cdea57c    60  fcmp d0, d0
0x4cdea580    64  b.vc #-0x10 (addr 0x4cdea570)
0x4cdea584    68  movn x0, #0x0
0x4cdea588    72  ret
0x4cdea58c    76  and x16, x1, x0
0x4cdea590    80  tbnz w16, #0, #+0x64 (addr 0x4cdea5f4)
0x4cdea594    84  tbz w0, #0, #+0x24 (addr 0x4cdea5b8)
0x4cdea598    88  ldur x16, [x0, #-1]
0x4cdea59c    92  ldr x17, [x26, #120]
0x4cdea5a0    96  cmp x16, x17
0x4cdea5a4   100  b.eq #+0x8 (addr 0x4cdea5ac)
0x4cdea5a8   104  ret
0x4cdea5ac   108  ldur d0, [x0, #7]
0x4cdea5b0   112  scvtf d1, x1, #32
0x4cdea5b4   116  b #+0x24 (addr 0x4cdea5d8)
0x4cdea5b8   120  ldur x16, [x1, #-1]
0x4cdea5bc   124  ldr x17, [x26, #120]
0x4cdea5c0   128  cmp x16, x17
0x4cdea5c4   132  b.eq #+0xc (addr 0x4cdea5d0)
0x4cdea5c8   136  movz x0, #0x1
0x4cdea5cc   140  ret
0x4cdea5d0   144  ldur d1, [x1, #7]
0x4cdea5d4   148  scvtf d0, x0, #32
0x4cdea5d8   152  fcmp d1, d0
0x4cdea5dc   156  b.vs #+0x10 (addr 0x4cdea5ec)
0x4cdea5e0   160  cset x0, gt
0x4cdea5e4   164  csinv x0, x0, xzr, ge
0x4cdea5e8   168  ret
0x4cdea5ec   172  movn x0, #0x0
0x4cdea5f0   176  ret
0x4cdea5f4   180  ldur x10, [x0, #-1]
0x4cdea5f8   184  ldur x12, [x1, #-1]
0x4cdea5fc   188  ldrb w11, [x10, #11]
0x4cdea600   192  ldrb w13, [x12, #11]
0x4cdea604   196  cmp x11, #0xb1 (177)
0x4cdea608   200  b.lt #+0x8 (addr 0x4cdea610)
0x4cdea60c   204  ret
0x4cdea610   208  cmp x11, #0x83 (131)
0x4cdea614   212  movz x16, #0x83
0x4cdea618   216  ccmp x13, x16, #nZcv, ne
0x4cdea61c   220  movz x16, #0xb1
0x4cdea620   224  ccmp x13, x16, #NzcV, ne
0x4cdea624   228  b.ge #-0x18 (addr 0x4cdea60c)
0x4cdea628   232  orr x14, x13, x11
0x4cdea62c   236  tst x14, #0xc0
0x4cdea630   240  b.eq #-0x24 (addr 0x4cdea60c)
0x4cdea634   244  cmp x11, #0x81 (129)
0x4cdea638   248  b.ne #+0x18 (addr 0x4cdea650)
0x4cdea63c   252  cmp x12, x10
0x4cdea640   256  b.ne #+0x10 (addr 0x4cdea650)
0x4cdea644   260  ldur d1, [x1, #7]
0x4cdea648   264  ldur d0, [x0, #7]
0x4cdea64c   268  b #-0x74 (addr 0x4cdea5d8)
0x4cdea650   272  movz x16, #0x87
0x4cdea654   276  and x14, x13, x16
0x4cdea658   280  movz x16, #0x87
0x4cdea65c   284  and x15, x11, x16
0x4cdea660   288  cmp x14, #0x4 (4)
0x4cdea664   292  ccmp x15, #4, #nzcv, eq
0x4cdea668   296  b.ne #+0x5c (addr 0x4cdea6c4)
0x4cdea66c   300  ldur x10, [x1, #15]
0x4cdea670   304  ldur x11, [x0, #15]
0x4cdea674   308  cmp x10, x11
0x4cdea678   312  b.eq #+0xc (addr 0x4cdea684)
0x4cdea67c   316  movz x0, #0x100000000
0x4cdea680   320  ret
0x4cdea684   324  cbnz x10, #+0xc (addr 0x4cdea690)
0x4cdea688   328  movz x0, #0x0
0x4cdea68c   332  ret
0x4cdea690   336  asr x10, x10, #32
0x4cdea694   340  add x11, x10, #0x17 (23)
0x4cdea698   344  add x1, x1, x11
0x4cdea69c   348  add x0, x0, x11
0x4cdea6a0   352  neg x10, x10
0x4cdea6a4   356  ldrb w11, [x1, x10]
0x4cdea6a8   360  ldrb w12, [x0, x10]
0x4cdea6ac   364  cmp x11, x12
0x4cdea6b0   368  b.ne #-0x34 (addr 0x4cdea67c)
0x4cdea6b4   372  add x10, x10, #0x1 (1)
0x4cdea6b8   376  cbnz x10, #-0x14 (addr 0x4cdea6a4)
0x4cdea6bc   380  movz x0, #0x0
0x4cdea6c0   384  ret
0x4cdea6c4   388  movz x16, #0xc00000000
0x4cdea6c8   392  sub csp, jssp, #0x10 (16)
0x4cdea6cc   396  stp fp, lr, [jssp, #-16]!
0x4cdea6d0   400  sub csp, jssp, #0x10 (16)
0x4cdea6d4   404  str x16, [jssp, #-8]!
0x4cdea6d8   408  ldr x17, pc+176 (addr 0x000000004cdea788)    ;; object: 0x4cdea4e1 <Code: COMPARE_IC>
0x4cdea6dc   412  sub csp, jssp, #0x10 (16)
0x4cdea6e0   416  str x17, [jssp, #-8]!
0x4cdea6e4   420  add fp, jssp, #0x10 (16)
0x4cdea6e8   424  sub csp, jssp, #0x10 (16)
0x4cdea6ec   428  stp x0, x1, [jssp, #-16]!
0x4cdea6f0   432  movz x0, #0x2
0x4cdea6f4   436  ldr x1, pc+156 (addr 0x000000004cdea790)    ;; external reference (Runtime::StrictEqual)
0x4cdea6f8   440  ldr x16, pc+160 (addr 0x000000004cdea798)    ;; code: STUB, CEntryStub, minor: 4
0x4cdea6fc   444  blr x16
0x4cdea700   448  mov jssp, fp
0x4cdea704   452  ldp fp, lr, [jssp], #16
0x4cdea708   456  ldr x1, [x26, #64]
0x4cdea70c   460  sub x0, x0, x1
0x4cdea710   464  ret
0x4cdea714   468  movz x16, #0xc00000000
0x4cdea718   472  sub csp, jssp, #0x10 (16)
0x4cdea71c   476  stp fp, lr, [jssp, #-16]!
0x4cdea720   480  sub csp, jssp, #0x10 (16)
0x4cdea724   484  str x16, [jssp, #-8]!
0x4cdea728   488  ldr x17, pc+120 (addr 0x000000004cdea7a0)    ;; object: 0x4cdea4e1 <Code: COMPARE_IC>
0x4cdea72c   492  sub csp, jssp, #0x10 (16)
0x4cdea730   496  str x17, [jssp, #-8]!
0x4cdea734   500  add fp, jssp, #0x10 (16)
0x4cdea738   504  sub csp, jssp, #0x18 (24)
0x4cdea73c   508  stp lr, x0, [jssp, #-24]!
0x4cdea740   512  str x1, [jssp, #16]
0x4cdea744   516  movz x10, #0x2f00000000
0x4cdea748   520  sub csp, jssp, #0x18 (24)
0x4cdea74c   524  stp x10, x0, [jssp, #-24]!
0x4cdea750   528  str x1, [jssp, #16]
0x4cdea754   532  movz x0, #0x3
0x4cdea758   536  ldr x1, pc+80 (addr 0x000000004cdea7a8)    ;; external reference (Runtime::CompareIC_Miss)
0x4cdea75c   540  ldr x16, pc+84 (addr 0x000000004cdea7b0)    ;; code: STUB, CEntryStub, minor: 4
0x4cdea760   544  blr x16
0x4cdea764   548  add x11, x0, #0x5f (95)
0x4cdea768   552  ldr x1, [jssp, #16]
0x4cdea76c   556  ldp lr, x0, [jssp], #24
0x4cdea770   560  mov jssp, fp
0x4cdea774   564  ldp fp, lr, [jssp], #16
0x4cdea778   568  br x11
0x4cdea77c   572  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdea780   576  d63f03e0       constant
0x4cdea784   580  d503201f       constant
0x4cdea788   584  4cdea4e1       constant
0x4cdea78c   588  00000000       constant
0x4cdea790   592  00e50928       constant
0x4cdea794   596  00000000       constant
0x4cdea798   600  4cd06060       constant
0x4cdea79c   604  00000000       constant
0x4cdea7a0   608  4cdea4e1       constant
0x4cdea7a4   612  00000000       constant
0x4cdea7a8   616  00c8a980       constant
0x4cdea7ac   620  00000000       constant
0x4cdea7b0   624  4cd06060       constant
0x4cdea7b4   628  00000000       constant


RelocInfo (size = 16)
0x4cdea6d8  embedded object  (0x4cdea4e1 <Code: COMPARE_IC>)
0x4cdea6f4  external reference (Runtime::StrictEqual)  (0xe50928)
0x4cdea6f8  code target (STUB)  (0x4cd06060)
0x4cdea728  embedded object  (0x4cdea4e1 <Code: COMPARE_IC>)
0x4cdea758  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cdea75c  code target (STUB)  (0x4cd06060)
0x4cdea77c  constant pool (size 60)


kind = HANDLER
major_key = <NoCache>Stub
name = domain
compiler = unknown
Instructions (size = 152)
0x4cdeac00     0  sub csp, jssp, #0x8 (8)
0x4cdeac04     4  str x3, [jssp, #-8]!
0x4cdeac08     8  sub csp, jssp, #0x8 (8)
0x4cdeac0c    12  str x4, [jssp, #-8]!
0x4cdeac10    16  ldr x3, pc+88 (addr 0x000000004cdeac68)    ;; object: 0xffffaa1d15c9 Cell for 0
0x4cdeac14    20  ldur x3, [x3, #7]
0x4cdeac18    24  cmp x3, #0x0 (0)
0x4cdeac1c    28  b.ne #+0x30 (addr 0x4cdeac4c)
0x4cdeac20    32  tbz w0, #0, #+0x2c (addr 0x4cdeac4c)
0x4cdeac24    36  ldr x5, pc+76 (addr 0x000000004cdeac70)    ;; object: 0xffffaa1d1509 WeakCell for 0x2a8388c1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdeac28    40  ldur x5, [x5, #7]
0x4cdeac2c    44  tbz w5, #0, #+0x20 (addr 0x4cdeac4c)
0x4cdeac30    48  ldursw x4, [x5, #15]
0x4cdeac34    52  tbnz w4, #23, #+0x18 (addr 0x4cdeac4c)
0x4cdeac38    56  ldr x4, [jssp], #8
0x4cdeac3c    60  ldr x3, [jssp], #8
0x4cdeac40    64  ldr x2, pc+56 (addr 0x000000004cdeac78)    ;; object: 0x210b2439 <String[6]: domain>
0x4cdeac44    68  ldr x16, pc+60 (addr 0x000000004cdeac80)    ;; code: HANDLER, StoreTransitionStub, minor: 198661
0x4cdeac48    72  br x16
0x4cdeac4c    76  ldr x2, pc+60 (addr 0x000000004cdeac88)    ;; object: 0x210b2439 <String[6]: domain>
0x4cdeac50    80  ldr x4, [jssp], #8
0x4cdeac54    84  ldr x3, [jssp], #8
0x4cdeac58    88  ldr x16, pc+56 (addr 0x000000004cdeac90)    ;; code: BUILTIN
0x4cdeac5c    92  br x16
0x4cdeac60    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdeac64   100  d63f03e0       constant
0x4cdeac68   104  aa1d15c9       constant
0x4cdeac6c   108  0000ffff       constant
0x4cdeac70   112  aa1d1509       constant
0x4cdeac74   116  0000ffff       constant
0x4cdeac78   120  210b2439       constant
0x4cdeac7c   124  00000000       constant
0x4cdeac80   128  4cd8bdc0       constant
0x4cdeac84   132  00000000       constant
0x4cdeac88   136  210b2439       constant
0x4cdeac8c   140  00000000       constant
0x4cdeac90   144  4cd22420       constant
0x4cdeac94   148  00000000       constant


RelocInfo (size = 12)
0x4cdeac10  embedded object  (0xffffaa1d15c9 Cell for 0)
0x4cdeac24  embedded object  (0xffffaa1d1509 WeakCell for 0x2a8388c1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdeac40  embedded object  (0x210b2439 <String[6]: domain>)
0x4cdeac44  code target (HANDLER)  (0x4cd8bdc0)
0x4cdeac4c  embedded object  (0x210b2439 <String[6]: domain>)
0x4cdeac58  code target (BUILTIN)  (0x4cd22420)
0x4cdeac60  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = _events
compiler = unknown
Instructions (size = 120)
0x4cdead00     0  sub csp, jssp, #0x8 (8)
0x4cdead04     4  str x3, [jssp, #-8]!
0x4cdead08     8  sub csp, jssp, #0x8 (8)
0x4cdead0c    12  str x0, [jssp, #-8]!
0x4cdead10    16  ldr x0, pc+72 (addr 0x000000004cdead58)    ;; object: 0xffffaa1d15c9 Cell for 0
0x4cdead14    20  ldur x0, [x0, #7]
0x4cdead18    24  cmp x0, #0x0 (0)
0x4cdead1c    28  b.ne #+0x14 (addr 0x4cdead30)
0x4cdead20    32  ldr x3, pc+64 (addr 0x000000004cdead60)    ;; object: 0xffffaa1d15f9 WeakCell for 0xffffaa1b1c41 <an Object with map 0x2a81bf39>
0x4cdead24    36  ldur x3, [x3, #7]
0x4cdead28    40  tbz w3, #0, #+0x8 (addr 0x4cdead30)
0x4cdead2c    44  b #+0x14 (addr 0x4cdead40)
0x4cdead30    48  ldr x0, [jssp], #8
0x4cdead34    52  ldr x3, [jssp], #8
0x4cdead38    56  ldr x16, pc+48 (addr 0x000000004cdead68)    ;; code: BUILTIN
0x4cdead3c    60  br x16
0x4cdead40    64  add jssp, jssp, #0x10 (16)
0x4cdead44    68  mov x1, x3
0x4cdead48    72  ldr x16, pc+40 (addr 0x000000004cdead70)    ;; code: HANDLER, LoadFieldStub, minor: 2052
0x4cdead4c    76  br x16
0x4cdead50    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdead54    84  d63f03e0       constant
0x4cdead58    88  aa1d15c9       constant
0x4cdead5c    92  0000ffff       constant
0x4cdead60    96  aa1d15f9       constant
0x4cdead64   100  0000ffff       constant
0x4cdead68   104  4cd222e0       constant
0x4cdead6c   108  00000000       constant
0x4cdead70   112  4cd78da0       constant
0x4cdead74   116  00000000       constant


RelocInfo (size = 10)
0x4cdead10  embedded object  (0xffffaa1d15c9 Cell for 0)
0x4cdead20  embedded object  (0xffffaa1d15f9 WeakCell for 0xffffaa1b1c41 <an Object with map 0x2a81bf39>)
0x4cdead38  code target (BUILTIN)  (0x4cd222e0)
0x4cdead48  code target (HANDLER)  (0x4cd78da0)
0x4cdead50  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = _maxListeners
compiler = unknown
Instructions (size = 120)
0x4cdeaf00     0  sub csp, jssp, #0x8 (8)
0x4cdeaf04     4  str x3, [jssp, #-8]!
0x4cdeaf08     8  sub csp, jssp, #0x8 (8)
0x4cdeaf0c    12  str x0, [jssp, #-8]!
0x4cdeaf10    16  ldr x0, pc+72 (addr 0x000000004cdeaf58)    ;; object: 0xffffaa1d15c9 Cell for 0
0x4cdeaf14    20  ldur x0, [x0, #7]
0x4cdeaf18    24  cmp x0, #0x0 (0)
0x4cdeaf1c    28  b.ne #+0x14 (addr 0x4cdeaf30)
0x4cdeaf20    32  ldr x3, pc+64 (addr 0x000000004cdeaf60)    ;; object: 0xffffaa1d1741 WeakCell for 0xffffaa1b1c41 <an Object with map 0x2a81bf39>
0x4cdeaf24    36  ldur x3, [x3, #7]
0x4cdeaf28    40  tbz w3, #0, #+0x8 (addr 0x4cdeaf30)
0x4cdeaf2c    44  b #+0x14 (addr 0x4cdeaf40)
0x4cdeaf30    48  ldr x0, [jssp], #8
0x4cdeaf34    52  ldr x3, [jssp], #8
0x4cdeaf38    56  ldr x16, pc+48 (addr 0x000000004cdeaf68)    ;; code: BUILTIN
0x4cdeaf3c    60  br x16
0x4cdeaf40    64  add jssp, jssp, #0x10 (16)
0x4cdeaf44    68  mov x1, x3
0x4cdeaf48    72  ldr x16, pc+40 (addr 0x000000004cdeaf70)    ;; code: HANDLER, LoadFieldStub, minor: 2053
0x4cdeaf4c    76  br x16
0x4cdeaf50    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdeaf54    84  d63f03e0       constant
0x4cdeaf58    88  aa1d15c9       constant
0x4cdeaf5c    92  0000ffff       constant
0x4cdeaf60    96  aa1d1741       constant
0x4cdeaf64   100  0000ffff       constant
0x4cdeaf68   104  4cd222e0       constant
0x4cdeaf6c   108  00000000       constant
0x4cdeaf70   112  4cd78e20       constant
0x4cdeaf74   116  00000000       constant


RelocInfo (size = 10)
0x4cdeaf10  embedded object  (0xffffaa1d15c9 Cell for 0)
0x4cdeaf20  embedded object  (0xffffaa1d1741 WeakCell for 0xffffaa1b1c41 <an Object with map 0x2a81bf39>)
0x4cdeaf38  code target (BUILTIN)  (0x4cd222e0)
0x4cdeaf48  code target (HANDLER)  (0x4cd78e20)
0x4cdeaf50  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = _maxListeners
compiler = unknown
Instructions (size = 152)
0x4cdeafe0     0  sub csp, jssp, #0x8 (8)
0x4cdeafe4     4  str x3, [jssp, #-8]!
0x4cdeafe8     8  sub csp, jssp, #0x8 (8)
0x4cdeafec    12  str x4, [jssp, #-8]!
0x4cdeaff0    16  ldr x3, pc+88 (addr 0x000000004cdeb048)    ;; object: 0xffffaa1d15c9 Cell for 0
0x4cdeaff4    20  ldur x3, [x3, #7]
0x4cdeaff8    24  cmp x3, #0x0 (0)
0x4cdeaffc    28  b.ne #+0x30 (addr 0x4cdeb02c)
0x4cdeb000    32  tbz w0, #0, #+0x2c (addr 0x4cdeb02c)
0x4cdeb004    36  ldr x5, pc+76 (addr 0x000000004cdeb050)    ;; object: 0xffffaa1d1779 WeakCell for 0x2a838a21 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdeb008    40  ldur x5, [x5, #7]
0x4cdeb00c    44  tbz w5, #0, #+0x20 (addr 0x4cdeb02c)
0x4cdeb010    48  ldursw x4, [x5, #15]
0x4cdeb014    52  tbnz w4, #23, #+0x18 (addr 0x4cdeb02c)
0x4cdeb018    56  ldr x4, [jssp], #8
0x4cdeb01c    60  ldr x3, [jssp], #8
0x4cdeb020    64  ldr x2, pc+56 (addr 0x000000004cdeb058)    ;; object: 0x210c32b1 <String[13]: _maxListeners>
0x4cdeb024    68  ldr x16, pc+60 (addr 0x000000004cdeb060)    ;; code: HANDLER, StoreTransitionStub, minor: 198664
0x4cdeb028    72  br x16
0x4cdeb02c    76  ldr x2, pc+60 (addr 0x000000004cdeb068)    ;; object: 0x210c32b1 <String[13]: _maxListeners>
0x4cdeb030    80  ldr x4, [jssp], #8
0x4cdeb034    84  ldr x3, [jssp], #8
0x4cdeb038    88  ldr x16, pc+56 (addr 0x000000004cdeb070)    ;; code: BUILTIN
0x4cdeb03c    92  br x16
0x4cdeb040    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdeb044   100  d63f03e0       constant
0x4cdeb048   104  aa1d15c9       constant
0x4cdeb04c   108  0000ffff       constant
0x4cdeb050   112  aa1d1779       constant
0x4cdeb054   116  0000ffff       constant
0x4cdeb058   120  210c32b1       constant
0x4cdeb05c   124  00000000       constant
0x4cdeb060   128  4cde5020       constant
0x4cdeb064   132  00000000       constant
0x4cdeb068   136  210c32b1       constant
0x4cdeb06c   140  00000000       constant
0x4cdeb070   144  4cd22420       constant
0x4cdeb074   148  00000000       constant


RelocInfo (size = 12)
0x4cdeaff0  embedded object  (0xffffaa1d15c9 Cell for 0)
0x4cdeb004  embedded object  (0xffffaa1d1779 WeakCell for 0x2a838a21 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdeb020  embedded object  (0x210c32b1 <String[13]: _maxListeners>)
0x4cdeb024  code target (HANDLER)  (0x4cde5020)
0x4cdeb02c  embedded object  (0x210c32b1 <String[13]: _maxListeners>)
0x4cdeb038  code target (BUILTIN)  (0x4cd22420)
0x4cdeb040  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
compiler = unknown
Instructions (size = 96)
0x4cdeb0e0     0  sub csp, jssp, #0x8 (8)
0x4cdeb0e4     4  str x3, [jssp, #-8]!
0x4cdeb0e8     8  sub csp, jssp, #0x8 (8)
0x4cdeb0ec    12  str x0, [jssp, #-8]!
0x4cdeb0f0    16  ldr x0, pc+56 (addr 0x000000004cdeb128)    ;; object: 0xffffaa1d1851 Cell for 0
0x4cdeb0f4    20  ldur x0, [x0, #7]
0x4cdeb0f8    24  cmp x0, #0x0 (0)
0x4cdeb0fc    28  b.ne #+0x14 (addr 0x4cdeb110)
0x4cdeb100    32  add jssp, jssp, #0x10 (16)
0x4cdeb104    36  ldr x0, pc+44 (addr 0x000000004cdeb130)    ;; object: 0x21004241 <undefined>
0x4cdeb108    40  ret
0x4cdeb10c    44  b #+0x14 (addr 0x4cdeb120)
0x4cdeb110    48  ldr x0, [jssp], #8
0x4cdeb114    52  ldr x3, [jssp], #8
0x4cdeb118    56  ldr x16, pc+32 (addr 0x000000004cdeb138)    ;; code: BUILTIN
0x4cdeb11c    60  br x16
0x4cdeb120    64  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cdeb124    68  d63f03e0       constant
0x4cdeb128    72  aa1d1851       constant
0x4cdeb12c    76  0000ffff       constant
0x4cdeb130    80  21004241       constant
0x4cdeb134    84  00000000       constant
0x4cdeb138    88  4cd222e0       constant
0x4cdeb13c    92  00000000       constant


RelocInfo (size = 9)
0x4cdeb0f0  embedded object  (0xffffaa1d1851 Cell for 0)
0x4cdeb104  embedded object  (0x21004241 <undefined>)
0x4cdeb118  code target (BUILTIN)  (0x4cd222e0)
0x4cdeb120  constant pool (size 32)

kind = HANDLER
major_key = <NoCache>Stub
name = end
compiler = unknown
Instructions (size = 168)
0x4cdeb1a0     0  sub csp, jssp, #0x8 (8)
0x4cdeb1a4     4  str x3, [jssp, #-8]!
0x4cdeb1a8     8  sub csp, jssp, #0x8 (8)
0x4cdeb1ac    12  str x4, [jssp, #-8]!
0x4cdeb1b0    16  ldr x3, pc+104 (addr 0x000000004cdeb218)    ;; object: 0xffffaa1d1851 Cell for 0
0x4cdeb1b4    20  ldur x3, [x3, #7]
0x4cdeb1b8    24  cmp x3, #0x0 (0)
0x4cdeb1bc    28  b.ne #+0x3c (addr 0x4cdeb1f8)
0x4cdeb1c0    32  ldr x5, pc+96 (addr 0x000000004cdeb220)    ;; object: 0xffffaa1d1899 WeakCell for 0x2a838b81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdeb1c4    36  ldur x5, [x5, #7]
0x4cdeb1c8    40  tbz w5, #0, #+0x30 (addr 0x4cdeb1f8)
0x4cdeb1cc    44  ldursw x4, [x5, #15]
0x4cdeb1d0    48  tbnz w4, #23, #+0x28 (addr 0x4cdeb1f8)
0x4cdeb1d4    52  ldur x4, [x5, #47]
0x4cdeb1d8    56  ldur x4, [x4, #47]
0x4cdeb1dc    60  cmp x0, x4
0x4cdeb1e0    64  b.ne #+0x18 (addr 0x4cdeb1f8)
0x4cdeb1e4    68  ldr x4, [jssp], #8
0x4cdeb1e8    72  ldr x3, [jssp], #8
0x4cdeb1ec    76  ldr x2, pc+60 (addr 0x000000004cdeb228)    ;; object: 0x21093989 <String[3]: end>
0x4cdeb1f0    80  ldr x16, pc+64 (addr 0x000000004cdeb230)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0x4cdeb1f4    84  br x16
0x4cdeb1f8    88  ldr x2, pc+64 (addr 0x000000004cdeb238)    ;; object: 0x21093989 <String[3]: end>
0x4cdeb1fc    92  ldr x4, [jssp], #8
0x4cdeb200    96  ldr x3, [jssp], #8
0x4cdeb204   100  ldr x16, pc+60 (addr 0x000000004cdeb240)    ;; code: BUILTIN
0x4cdeb208   104  br x16
0x4cdeb20c   108  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdeb210   112  d63f03e0       constant
0x4cdeb214   116  d503201f       constant
0x4cdeb218   120  aa1d1851       constant
0x4cdeb21c   124  0000ffff       constant
0x4cdeb220   128  aa1d1899       constant
0x4cdeb224   132  0000ffff       constant
0x4cdeb228   136  21093989       constant
0x4cdeb22c   140  00000000       constant
0x4cdeb230   144  4cd3cea0       constant
0x4cdeb234   148  00000000       constant
0x4cdeb238   152  21093989       constant
0x4cdeb23c   156  00000000       constant
0x4cdeb240   160  4cd22420       constant
0x4cdeb244   164  00000000       constant


RelocInfo (size = 12)
0x4cdeb1b0  embedded object  (0xffffaa1d1851 Cell for 0)
0x4cdeb1c0  embedded object  (0xffffaa1d1899 WeakCell for 0x2a838b81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdeb1ec  embedded object  (0x21093989 <String[3]: end>)
0x4cdeb1f0  code target (HANDLER)  (0x4cd3cea0)
0x4cdeb1f8  embedded object  (0x21093989 <String[3]: end>)
0x4cdeb204  code target (BUILTIN)  (0x4cd22420)
0x4cdeb20c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0x4cdeb2c0     0  mov x5, x0
0x4cdeb2c4     4  tbnz w5, #0, #+0xc (addr 0x4cdeb2d0)
0x4cdeb2c8     8  stur x5, [x1, #55]
0x4cdeb2cc    12  ret
0x4cdeb2d0    16  movz x16, #0x0
0x4cdeb2d4    20  sub csp, jssp, #0x10 (16)
0x4cdeb2d8    24  stp fp, lr, [jssp, #-16]!
0x4cdeb2dc    28  bl #+0x4 (addr 0x4cdeb2e0)
0x4cdeb2e0    32  movz x17, #0xa00000000
0x4cdeb2e4    36  sub csp, jssp, #0x10 (16)
0x4cdeb2e8    40  stp x17, cp, [jssp, #-16]!
0x4cdeb2ec    44  add fp, jssp, #0x10 (16)
0x4cdeb2f0    48  ldr x17, pc+24 (addr 0x000000004cdeb308)    ;; lazy deoptimization bailout 0
0x4cdeb2f4    52  add x17, x17, x16
0x4cdeb2f8    56  br x17
0x4cdeb2fc    60  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdeb300    64  d63f03e0       constant
0x4cdeb304    68  d503201f       constant
0x4cdeb308    72  4cb06000       constant
0x4cdeb30c    76  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 8)
0x4cdeb2f0  runtime entry
0x4cdeb2fc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0x4cdeb2c0     0  mov x5, x0
0x4cdeb2c4     4  tbnz w5, #0, #+0xc (addr 0x4cdeb2d0)
0x4cdeb2c8     8  stur x5, [x1, #55]
0x4cdeb2cc    12  ret
0x4cdeb2d0    16  movz x16, #0x0
0x4cdeb2d4    20  sub csp, jssp, #0x10 (16)
0x4cdeb2d8    24  stp fp, lr, [jssp, #-16]!
0x4cdeb2dc    28  bl #+0x4 (addr 0x4cdeb2e0)
0x4cdeb2e0    32  movz x17, #0xa00000000
0x4cdeb2e4    36  sub csp, jssp, #0x10 (16)
0x4cdeb2e8    40  stp x17, cp, [jssp, #-16]!
0x4cdeb2ec    44  add fp, jssp, #0x10 (16)
0x4cdeb2f0    48  ldr x17, pc+24 (addr 0x000000004cdeb308)    ;; lazy deoptimization bailout 0
0x4cdeb2f4    52  add x17, x17, x16
0x4cdeb2f8    56  br x17
0x4cdeb2fc    60  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdeb300    64  d63f03e0       constant
0x4cdeb304    68  d503201f       constant
0x4cdeb308    72  4cb06000       constant
0x4cdeb30c    76  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 8)
0x4cdeb2f0  runtime entry
0x4cdeb2fc  constant pool (size 20)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0x4cdf0ac0     0  tbz w0, #0, #+0x50 (addr 0x4cdf0b10)
0x4cdf0ac4     4  mov x2, x0
0x4cdf0ac8     8  stur x2, [x1, #39]
0x4cdf0acc    12  add x3, x1, #0x27 (39)
0x4cdf0ad0    16  and x2, x2, #0xfffffffffff00000
0x4cdf0ad4    20  ldr x2, [x2, #8]
0x4cdf0ad8    24  tbz w2, #1, #+0x24 (addr 0x4cdf0afc)
0x4cdf0adc    28  and x2, x1, #0xfffffffffff00000
0x4cdf0ae0    32  ldr x2, [x2, #8]
0x4cdf0ae4    36  tbz w2, #2, #+0x18 (addr 0x4cdf0afc)
0x4cdf0ae8    40  sub csp, jssp, #0x8 (8)
0x4cdf0aec    44  str lr, [jssp, #-8]!
0x4cdf0af0    48  ldr x16, pc+24 (addr 0x000000004cdf0b08)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf0af4    52  blr x16
0x4cdf0af8    56  ldr lr, [jssp], #8
0x4cdf0afc    60  ret
0x4cdf0b00    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf0b04    68  d63f03e0       constant
0x4cdf0b08    72  4cd170c0       constant
0x4cdf0b0c    76  00000000       constant
0x4cdf0b10    80  movz x16, #0x0
0x4cdf0b14    84  sub csp, jssp, #0x10 (16)
0x4cdf0b18    88  stp fp, lr, [jssp, #-16]!
0x4cdf0b1c    92  bl #+0x4 (addr 0x4cdf0b20)
0x4cdf0b20    96  movz x17, #0xa00000000
0x4cdf0b24   100  sub csp, jssp, #0x10 (16)
0x4cdf0b28   104  stp x17, cp, [jssp, #-16]!
0x4cdf0b2c   108  add fp, jssp, #0x10 (16)
0x4cdf0b30   112  ldr x17, pc+24 (addr 0x000000004cdf0b48)    ;; lazy deoptimization bailout 0
0x4cdf0b34   116  add x17, x17, x16
0x4cdf0b38   120  br x17
0x4cdf0b3c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf0b40   128  d63f03e0       constant
0x4cdf0b44   132  d503201f       constant
0x4cdf0b48   136  4cb06000       constant
0x4cdf0b4c   140  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf0af0  code target (STUB)  (0x4cd170c0)
0x4cdf0b00  constant pool (size 16)
0x4cdf0b30  runtime entry
0x4cdf0b3c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0x4cdf0ac0     0  tbz w0, #0, #+0x50 (addr 0x4cdf0b10)
0x4cdf0ac4     4  mov x2, x0
0x4cdf0ac8     8  stur x2, [x1, #39]
0x4cdf0acc    12  add x3, x1, #0x27 (39)
0x4cdf0ad0    16  and x2, x2, #0xfffffffffff00000
0x4cdf0ad4    20  ldr x2, [x2, #8]
0x4cdf0ad8    24  tbz w2, #1, #+0x24 (addr 0x4cdf0afc)
0x4cdf0adc    28  and x2, x1, #0xfffffffffff00000
0x4cdf0ae0    32  ldr x2, [x2, #8]
0x4cdf0ae4    36  tbz w2, #2, #+0x18 (addr 0x4cdf0afc)
0x4cdf0ae8    40  sub csp, jssp, #0x8 (8)
0x4cdf0aec    44  str lr, [jssp, #-8]!
0x4cdf0af0    48  ldr x16, pc+24 (addr 0x000000004cdf0b08)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf0af4    52  blr x16
0x4cdf0af8    56  ldr lr, [jssp], #8
0x4cdf0afc    60  ret
0x4cdf0b00    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf0b04    68  d63f03e0       constant
0x4cdf0b08    72  4cd170c0       constant
0x4cdf0b0c    76  00000000       constant
0x4cdf0b10    80  movz x16, #0x0
0x4cdf0b14    84  sub csp, jssp, #0x10 (16)
0x4cdf0b18    88  stp fp, lr, [jssp, #-16]!
0x4cdf0b1c    92  bl #+0x4 (addr 0x4cdf0b20)
0x4cdf0b20    96  movz x17, #0xa00000000
0x4cdf0b24   100  sub csp, jssp, #0x10 (16)
0x4cdf0b28   104  stp x17, cp, [jssp, #-16]!
0x4cdf0b2c   108  add fp, jssp, #0x10 (16)
0x4cdf0b30   112  ldr x17, pc+24 (addr 0x000000004cdf0b48)    ;; lazy deoptimization bailout 0
0x4cdf0b34   116  add x17, x17, x16
0x4cdf0b38   120  br x17
0x4cdf0b3c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf0b40   128  d63f03e0       constant
0x4cdf0b44   132  d503201f       constant
0x4cdf0b48   136  4cb06000       constant
0x4cdf0b4c   140  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf0af0  code target (STUB)  (0x4cd170c0)
0x4cdf0b00  constant pool (size 16)
0x4cdf0b30  runtime entry
0x4cdf0b3c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = prototype
compiler = unknown
Instructions (size = 176)
0x4cdf0bc0     0  sub csp, jssp, #0x8 (8)
0x4cdf0bc4     4  str x3, [jssp, #-8]!
0x4cdf0bc8     8  sub csp, jssp, #0x8 (8)
0x4cdf0bcc    12  str x4, [jssp, #-8]!
0x4cdf0bd0    16  ldr x3, pc+104 (addr 0x000000004cdf0c38)    ;; object: 0xffffaa1e61e9 Cell for 0
0x4cdf0bd4    20  ldur x3, [x3, #7]
0x4cdf0bd8    24  cmp x3, #0x0 (0)
0x4cdf0bdc    28  b.ne #+0x8 (addr 0x4cdf0be4)
0x4cdf0be0    32  b #+0x18 (addr 0x4cdf0bf8)
0x4cdf0be4    36  ldr x2, pc+92 (addr 0x000000004cdf0c40)    ;; object: 0x21005371 <String[9]: prototype>
0x4cdf0be8    40  ldr x4, [jssp], #8
0x4cdf0bec    44  ldr x3, [jssp], #8
0x4cdf0bf0    48  ldr x16, pc+88 (addr 0x000000004cdf0c48)    ;; code: BUILTIN
0x4cdf0bf4    52  br x16
0x4cdf0bf8    56  add jssp, jssp, #0x10 (16)
0x4cdf0bfc    60  ldr x3, pc+84 (addr 0x000000004cdf0c50)    ;; object: 0x210404a9 <AccessorInfo>
0x4cdf0c00    64  ldr x4, pc+88 (addr 0x000000004cdf0c58)    ;; object: 0x21005371 <String[9]: prototype>
0x4cdf0c04    68  sub csp, jssp, #0x28 (40)
0x4cdf0c08    72  stp x4, x3, [jssp, #-32]!
0x4cdf0c0c    76  stp x1, x1, [jssp, #16]
0x4cdf0c10    80  str x0, [jssp, #-8]!
0x4cdf0c14    84  movz x16, #0x100000000
0x4cdf0c18    88  sub csp, jssp, #0x8 (8)
0x4cdf0c1c    92  str x16, [jssp, #-8]!
0x4cdf0c20    96  movz x0, #0x6
0x4cdf0c24   100  ldr x1, pc+60 (addr 0x000000004cdf0c60)    ;; external reference (Runtime::StoreCallbackProperty)
0x4cdf0c28   104  ldr x16, pc+64 (addr 0x000000004cdf0c68)    ;; code: STUB, CEntryStub, minor: 4
0x4cdf0c2c   108  br x16
0x4cdf0c30   112  580001ff       constant pool begin (num_const = 15)    ;; constant pool
0x4cdf0c34   116  d63f03e0       constant
0x4cdf0c38   120  aa1e61e9       constant
0x4cdf0c3c   124  0000ffff       constant
0x4cdf0c40   128  21005371       constant
0x4cdf0c44   132  00000000       constant
0x4cdf0c48   136  4cd22420       constant
0x4cdf0c4c   140  00000000       constant
0x4cdf0c50   144  210404a9       constant
0x4cdf0c54   148  00000000       constant
0x4cdf0c58   152  21005371       constant
0x4cdf0c5c   156  00000000       constant
0x4cdf0c60   160  00c8b560       constant
0x4cdf0c64   164  00000000       constant
0x4cdf0c68   168  4cd06060       constant
0x4cdf0c6c   172  00000000       constant


RelocInfo (size = 14)
0x4cdf0bd0  embedded object  (0xffffaa1e61e9 Cell for 0)
0x4cdf0be4  embedded object  (0x21005371 <String[9]: prototype>)
0x4cdf0bf0  code target (BUILTIN)  (0x4cd22420)
0x4cdf0bfc  embedded object  (0x210404a9 <AccessorInfo>)
0x4cdf0c00  embedded object  (0x21005371 <String[9]: prototype>)
0x4cdf0c24  external reference (Runtime::StoreCallbackProperty)  (0xc8b560)
0x4cdf0c28  code target (STUB)  (0x4cd06060)
0x4cdf0c30  constant pool (size 64)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf4c60     0  tbz w0, #0, #+0x90 (addr 0x4cdf4cf0)
0x4cdf4c64     4  mov x2, x0
0x4cdf4c68     8  stur x2, [x1, #79]
0x4cdf4c6c    12  add x3, x1, #0x4f (79)
0x4cdf4c70    16  and x2, x2, #0xfffffffffff00000
0x4cdf4c74    20  ldr x2, [x2, #8]
0x4cdf4c78    24  tbz w2, #1, #+0x24 (addr 0x4cdf4c9c)
0x4cdf4c7c    28  and x2, x1, #0xfffffffffff00000
0x4cdf4c80    32  ldr x2, [x2, #8]
0x4cdf4c84    36  tbz w2, #2, #+0x18 (addr 0x4cdf4c9c)
0x4cdf4c88    40  sub csp, jssp, #0x8 (8)
0x4cdf4c8c    44  str lr, [jssp, #-8]!
0x4cdf4c90    48  ldr x16, pc+80 (addr 0x000000004cdf4ce0)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf4c94    52  blr x16
0x4cdf4c98    56  ldr lr, [jssp], #8
0x4cdf4c9c    60  stur x5, [x1, #-1]
0x4cdf4ca0    64  tbz w5, #0, #+0x34 (addr 0x4cdf4cd4)
0x4cdf4ca4    68  sub x2, x1, #0x1 (1)
0x4cdf4ca8    72  and x5, x5, #0xfffffffffff00000
0x4cdf4cac    76  ldr x5, [x5, #8]
0x4cdf4cb0    80  tbz w5, #1, #+0x24 (addr 0x4cdf4cd4)
0x4cdf4cb4    84  and x5, x1, #0xfffffffffff00000
0x4cdf4cb8    88  ldr x5, [x5, #8]
0x4cdf4cbc    92  tbz w5, #2, #+0x18 (addr 0x4cdf4cd4)
0x4cdf4cc0    96  sub csp, jssp, #0x8 (8)
0x4cdf4cc4   100  str lr, [jssp, #-8]!
0x4cdf4cc8   104  ldr x16, pc+32 (addr 0x000000004cdf4ce8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf4ccc   108  blr x16
0x4cdf4cd0   112  ldr lr, [jssp], #8
0x4cdf4cd4   116  ret
0x4cdf4cd8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf4cdc   124  d63f03e0       constant
0x4cdf4ce0   128  4cd170c0       constant
0x4cdf4ce4   132  00000000       constant
0x4cdf4ce8   136  4cd38080       constant
0x4cdf4cec   140  00000000       constant
0x4cdf4cf0   144  movz x16, #0x0
0x4cdf4cf4   148  sub csp, jssp, #0x10 (16)
0x4cdf4cf8   152  stp fp, lr, [jssp, #-16]!
0x4cdf4cfc   156  bl #+0x4 (addr 0x4cdf4d00)
0x4cdf4d00   160  movz x17, #0xa00000000
0x4cdf4d04   164  sub csp, jssp, #0x10 (16)
0x4cdf4d08   168  stp x17, cp, [jssp, #-16]!
0x4cdf4d0c   172  add fp, jssp, #0x10 (16)
0x4cdf4d10   176  ldr x17, pc+24 (addr 0x000000004cdf4d28)    ;; lazy deoptimization bailout 0
0x4cdf4d14   180  add x17, x17, x16
0x4cdf4d18   184  br x17
0x4cdf4d1c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf4d20   192  d63f03e0       constant
0x4cdf4d24   196  d503201f       constant
0x4cdf4d28   200  4cb06000       constant
0x4cdf4d2c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf4c90  code target (STUB)  (0x4cd170c0)
0x4cdf4cc8  code target (STUB)  (0x4cd38080)
0x4cdf4cd8  constant pool (size 24)
0x4cdf4d10  runtime entry
0x4cdf4d1c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf4c60     0  tbz w0, #0, #+0x90 (addr 0x4cdf4cf0)
0x4cdf4c64     4  mov x2, x0
0x4cdf4c68     8  stur x2, [x1, #79]
0x4cdf4c6c    12  add x3, x1, #0x4f (79)
0x4cdf4c70    16  and x2, x2, #0xfffffffffff00000
0x4cdf4c74    20  ldr x2, [x2, #8]
0x4cdf4c78    24  tbz w2, #1, #+0x24 (addr 0x4cdf4c9c)
0x4cdf4c7c    28  and x2, x1, #0xfffffffffff00000
0x4cdf4c80    32  ldr x2, [x2, #8]
0x4cdf4c84    36  tbz w2, #2, #+0x18 (addr 0x4cdf4c9c)
0x4cdf4c88    40  sub csp, jssp, #0x8 (8)
0x4cdf4c8c    44  str lr, [jssp, #-8]!
0x4cdf4c90    48  ldr x16, pc+80 (addr 0x000000004cdf4ce0)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf4c94    52  blr x16
0x4cdf4c98    56  ldr lr, [jssp], #8
0x4cdf4c9c    60  stur x5, [x1, #-1]
0x4cdf4ca0    64  tbz w5, #0, #+0x34 (addr 0x4cdf4cd4)
0x4cdf4ca4    68  sub x2, x1, #0x1 (1)
0x4cdf4ca8    72  and x5, x5, #0xfffffffffff00000
0x4cdf4cac    76  ldr x5, [x5, #8]
0x4cdf4cb0    80  tbz w5, #1, #+0x24 (addr 0x4cdf4cd4)
0x4cdf4cb4    84  and x5, x1, #0xfffffffffff00000
0x4cdf4cb8    88  ldr x5, [x5, #8]
0x4cdf4cbc    92  tbz w5, #2, #+0x18 (addr 0x4cdf4cd4)
0x4cdf4cc0    96  sub csp, jssp, #0x8 (8)
0x4cdf4cc4   100  str lr, [jssp, #-8]!
0x4cdf4cc8   104  ldr x16, pc+32 (addr 0x000000004cdf4ce8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf4ccc   108  blr x16
0x4cdf4cd0   112  ldr lr, [jssp], #8
0x4cdf4cd4   116  ret
0x4cdf4cd8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf4cdc   124  d63f03e0       constant
0x4cdf4ce0   128  4cd170c0       constant
0x4cdf4ce4   132  00000000       constant
0x4cdf4ce8   136  4cd38080       constant
0x4cdf4cec   140  00000000       constant
0x4cdf4cf0   144  movz x16, #0x0
0x4cdf4cf4   148  sub csp, jssp, #0x10 (16)
0x4cdf4cf8   152  stp fp, lr, [jssp, #-16]!
0x4cdf4cfc   156  bl #+0x4 (addr 0x4cdf4d00)
0x4cdf4d00   160  movz x17, #0xa00000000
0x4cdf4d04   164  sub csp, jssp, #0x10 (16)
0x4cdf4d08   168  stp x17, cp, [jssp, #-16]!
0x4cdf4d0c   172  add fp, jssp, #0x10 (16)
0x4cdf4d10   176  ldr x17, pc+24 (addr 0x000000004cdf4d28)    ;; lazy deoptimization bailout 0
0x4cdf4d14   180  add x17, x17, x16
0x4cdf4d18   184  br x17
0x4cdf4d1c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf4d20   192  d63f03e0       constant
0x4cdf4d24   196  d503201f       constant
0x4cdf4d28   200  4cb06000       constant
0x4cdf4d2c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf4c90  code target (STUB)  (0x4cd170c0)
0x4cdf4cc8  code target (STUB)  (0x4cd38080)
0x4cdf4cd8  constant pool (size 24)
0x4cdf4d10  runtime entry
0x4cdf4d1c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = domain
compiler = unknown
Instructions (size = 152)
0x4cdf4da0     0  sub csp, jssp, #0x8 (8)
0x4cdf4da4     4  str x3, [jssp, #-8]!
0x4cdf4da8     8  sub csp, jssp, #0x8 (8)
0x4cdf4dac    12  str x4, [jssp, #-8]!
0x4cdf4db0    16  ldr x3, pc+88 (addr 0x000000004cdf4e08)    ;; object: 0xffffaa1e88d1 Cell for 0
0x4cdf4db4    20  ldur x3, [x3, #7]
0x4cdf4db8    24  cmp x3, #0x0 (0)
0x4cdf4dbc    28  b.ne #+0x30 (addr 0x4cdf4dec)
0x4cdf4dc0    32  tbz w0, #0, #+0x2c (addr 0x4cdf4dec)
0x4cdf4dc4    36  ldr x5, pc+76 (addr 0x000000004cdf4e10)    ;; object: 0xffffaa1e87b9 WeakCell for 0x2a8402c9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf4dc8    40  ldur x5, [x5, #7]
0x4cdf4dcc    44  tbz w5, #0, #+0x20 (addr 0x4cdf4dec)
0x4cdf4dd0    48  ldursw x4, [x5, #15]
0x4cdf4dd4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf4dec)
0x4cdf4dd8    56  ldr x4, [jssp], #8
0x4cdf4ddc    60  ldr x3, [jssp], #8
0x4cdf4de0    64  ldr x2, pc+56 (addr 0x000000004cdf4e18)    ;; object: 0x210b2439 <String[6]: domain>
0x4cdf4de4    68  ldr x16, pc+60 (addr 0x000000004cdf4e20)    ;; code: HANDLER, StoreTransitionStub, minor: 198666
0x4cdf4de8    72  br x16
0x4cdf4dec    76  ldr x2, pc+60 (addr 0x000000004cdf4e28)    ;; object: 0x210b2439 <String[6]: domain>
0x4cdf4df0    80  ldr x4, [jssp], #8
0x4cdf4df4    84  ldr x3, [jssp], #8
0x4cdf4df8    88  ldr x16, pc+56 (addr 0x000000004cdf4e30)    ;; code: BUILTIN
0x4cdf4dfc    92  br x16
0x4cdf4e00    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf4e04   100  d63f03e0       constant
0x4cdf4e08   104  aa1e88d1       constant
0x4cdf4e0c   108  0000ffff       constant
0x4cdf4e10   112  aa1e87b9       constant
0x4cdf4e14   116  0000ffff       constant
0x4cdf4e18   120  210b2439       constant
0x4cdf4e1c   124  00000000       constant
0x4cdf4e20   128  4cdf4c60       constant
0x4cdf4e24   132  00000000       constant
0x4cdf4e28   136  210b2439       constant
0x4cdf4e2c   140  00000000       constant
0x4cdf4e30   144  4cd22420       constant
0x4cdf4e34   148  00000000       constant


RelocInfo (size = 12)
0x4cdf4db0  embedded object  (0xffffaa1e88d1 Cell for 0)
0x4cdf4dc4  embedded object  (0xffffaa1e87b9 WeakCell for 0x2a8402c9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf4de0  embedded object  (0x210b2439 <String[6]: domain>)
0x4cdf4de4  code target (HANDLER)  (0x4cdf4c60)
0x4cdf4dec  embedded object  (0x210b2439 <String[6]: domain>)
0x4cdf4df8  code target (BUILTIN)  (0x4cd22420)
0x4cdf4e00  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = _events
compiler = unknown
Instructions (size = 120)
0x4cdf4ea0     0  sub csp, jssp, #0x8 (8)
0x4cdf4ea4     4  str x3, [jssp, #-8]!
0x4cdf4ea8     8  sub csp, jssp, #0x8 (8)
0x4cdf4eac    12  str x0, [jssp, #-8]!
0x4cdf4eb0    16  ldr x0, pc+72 (addr 0x000000004cdf4ef8)    ;; object: 0xffffaa1e88d1 Cell for 0
0x4cdf4eb4    20  ldur x0, [x0, #7]
0x4cdf4eb8    24  cmp x0, #0x0 (0)
0x4cdf4ebc    28  b.ne #+0x14 (addr 0x4cdf4ed0)
0x4cdf4ec0    32  ldr x3, pc+64 (addr 0x000000004cdf4f00)    ;; object: 0xffffaa1e89b9 WeakCell for 0xffffaa1b1c41 <an Object with map 0x2a81bf39>
0x4cdf4ec4    36  ldur x3, [x3, #7]
0x4cdf4ec8    40  tbz w3, #0, #+0x8 (addr 0x4cdf4ed0)
0x4cdf4ecc    44  b #+0x14 (addr 0x4cdf4ee0)
0x4cdf4ed0    48  ldr x0, [jssp], #8
0x4cdf4ed4    52  ldr x3, [jssp], #8
0x4cdf4ed8    56  ldr x16, pc+48 (addr 0x000000004cdf4f08)    ;; code: BUILTIN
0x4cdf4edc    60  br x16
0x4cdf4ee0    64  add jssp, jssp, #0x10 (16)
0x4cdf4ee4    68  mov x1, x3
0x4cdf4ee8    72  ldr x16, pc+40 (addr 0x000000004cdf4f10)    ;; code: HANDLER, LoadFieldStub, minor: 2052
0x4cdf4eec    76  br x16
0x4cdf4ef0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdf4ef4    84  d63f03e0       constant
0x4cdf4ef8    88  aa1e88d1       constant
0x4cdf4efc    92  0000ffff       constant
0x4cdf4f00    96  aa1e89b9       constant
0x4cdf4f04   100  0000ffff       constant
0x4cdf4f08   104  4cd222e0       constant
0x4cdf4f0c   108  00000000       constant
0x4cdf4f10   112  4cd78da0       constant
0x4cdf4f14   116  00000000       constant


RelocInfo (size = 10)
0x4cdf4eb0  embedded object  (0xffffaa1e88d1 Cell for 0)
0x4cdf4ec0  embedded object  (0xffffaa1e89b9 WeakCell for 0xffffaa1b1c41 <an Object with map 0x2a81bf39>)
0x4cdf4ed8  code target (BUILTIN)  (0x4cd222e0)
0x4cdf4ee8  code target (HANDLER)  (0x4cd78da0)
0x4cdf4ef0  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf4f80     0  tbz w0, #0, #+0x90 (addr 0x4cdf5010)
0x4cdf4f84     4  mov x2, x0
0x4cdf4f88     8  stur x2, [x1, #87]
0x4cdf4f8c    12  add x3, x1, #0x57 (87)
0x4cdf4f90    16  and x2, x2, #0xfffffffffff00000
0x4cdf4f94    20  ldr x2, [x2, #8]
0x4cdf4f98    24  tbz w2, #1, #+0x24 (addr 0x4cdf4fbc)
0x4cdf4f9c    28  and x2, x1, #0xfffffffffff00000
0x4cdf4fa0    32  ldr x2, [x2, #8]
0x4cdf4fa4    36  tbz w2, #2, #+0x18 (addr 0x4cdf4fbc)
0x4cdf4fa8    40  sub csp, jssp, #0x8 (8)
0x4cdf4fac    44  str lr, [jssp, #-8]!
0x4cdf4fb0    48  ldr x16, pc+80 (addr 0x000000004cdf5000)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf4fb4    52  blr x16
0x4cdf4fb8    56  ldr lr, [jssp], #8
0x4cdf4fbc    60  stur x5, [x1, #-1]
0x4cdf4fc0    64  tbz w5, #0, #+0x34 (addr 0x4cdf4ff4)
0x4cdf4fc4    68  sub x2, x1, #0x1 (1)
0x4cdf4fc8    72  and x5, x5, #0xfffffffffff00000
0x4cdf4fcc    76  ldr x5, [x5, #8]
0x4cdf4fd0    80  tbz w5, #1, #+0x24 (addr 0x4cdf4ff4)
0x4cdf4fd4    84  and x5, x1, #0xfffffffffff00000
0x4cdf4fd8    88  ldr x5, [x5, #8]
0x4cdf4fdc    92  tbz w5, #2, #+0x18 (addr 0x4cdf4ff4)
0x4cdf4fe0    96  sub csp, jssp, #0x8 (8)
0x4cdf4fe4   100  str lr, [jssp, #-8]!
0x4cdf4fe8   104  ldr x16, pc+32 (addr 0x000000004cdf5008)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf4fec   108  blr x16
0x4cdf4ff0   112  ldr lr, [jssp], #8
0x4cdf4ff4   116  ret
0x4cdf4ff8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf4ffc   124  d63f03e0       constant
0x4cdf5000   128  4cd170c0       constant
0x4cdf5004   132  00000000       constant
0x4cdf5008   136  4cd38080       constant
0x4cdf500c   140  00000000       constant
0x4cdf5010   144  movz x16, #0x0
0x4cdf5014   148  sub csp, jssp, #0x10 (16)
0x4cdf5018   152  stp fp, lr, [jssp, #-16]!
0x4cdf501c   156  bl #+0x4 (addr 0x4cdf5020)
0x4cdf5020   160  movz x17, #0xa00000000
0x4cdf5024   164  sub csp, jssp, #0x10 (16)
0x4cdf5028   168  stp x17, cp, [jssp, #-16]!
0x4cdf502c   172  add fp, jssp, #0x10 (16)
0x4cdf5030   176  ldr x17, pc+24 (addr 0x000000004cdf5048)    ;; lazy deoptimization bailout 0
0x4cdf5034   180  add x17, x17, x16
0x4cdf5038   184  br x17
0x4cdf503c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf5040   192  d63f03e0       constant
0x4cdf5044   196  d503201f       constant
0x4cdf5048   200  4cb06000       constant
0x4cdf504c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf4fb0  code target (STUB)  (0x4cd170c0)
0x4cdf4fe8  code target (STUB)  (0x4cd38080)
0x4cdf4ff8  constant pool (size 24)
0x4cdf5030  runtime entry
0x4cdf503c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf4f80     0  tbz w0, #0, #+0x90 (addr 0x4cdf5010)
0x4cdf4f84     4  mov x2, x0
0x4cdf4f88     8  stur x2, [x1, #87]
0x4cdf4f8c    12  add x3, x1, #0x57 (87)
0x4cdf4f90    16  and x2, x2, #0xfffffffffff00000
0x4cdf4f94    20  ldr x2, [x2, #8]
0x4cdf4f98    24  tbz w2, #1, #+0x24 (addr 0x4cdf4fbc)
0x4cdf4f9c    28  and x2, x1, #0xfffffffffff00000
0x4cdf4fa0    32  ldr x2, [x2, #8]
0x4cdf4fa4    36  tbz w2, #2, #+0x18 (addr 0x4cdf4fbc)
0x4cdf4fa8    40  sub csp, jssp, #0x8 (8)
0x4cdf4fac    44  str lr, [jssp, #-8]!
0x4cdf4fb0    48  ldr x16, pc+80 (addr 0x000000004cdf5000)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf4fb4    52  blr x16
0x4cdf4fb8    56  ldr lr, [jssp], #8
0x4cdf4fbc    60  stur x5, [x1, #-1]
0x4cdf4fc0    64  tbz w5, #0, #+0x34 (addr 0x4cdf4ff4)
0x4cdf4fc4    68  sub x2, x1, #0x1 (1)
0x4cdf4fc8    72  and x5, x5, #0xfffffffffff00000
0x4cdf4fcc    76  ldr x5, [x5, #8]
0x4cdf4fd0    80  tbz w5, #1, #+0x24 (addr 0x4cdf4ff4)
0x4cdf4fd4    84  and x5, x1, #0xfffffffffff00000
0x4cdf4fd8    88  ldr x5, [x5, #8]
0x4cdf4fdc    92  tbz w5, #2, #+0x18 (addr 0x4cdf4ff4)
0x4cdf4fe0    96  sub csp, jssp, #0x8 (8)
0x4cdf4fe4   100  str lr, [jssp, #-8]!
0x4cdf4fe8   104  ldr x16, pc+32 (addr 0x000000004cdf5008)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf4fec   108  blr x16
0x4cdf4ff0   112  ldr lr, [jssp], #8
0x4cdf4ff4   116  ret
0x4cdf4ff8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf4ffc   124  d63f03e0       constant
0x4cdf5000   128  4cd170c0       constant
0x4cdf5004   132  00000000       constant
0x4cdf5008   136  4cd38080       constant
0x4cdf500c   140  00000000       constant
0x4cdf5010   144  movz x16, #0x0
0x4cdf5014   148  sub csp, jssp, #0x10 (16)
0x4cdf5018   152  stp fp, lr, [jssp, #-16]!
0x4cdf501c   156  bl #+0x4 (addr 0x4cdf5020)
0x4cdf5020   160  movz x17, #0xa00000000
0x4cdf5024   164  sub csp, jssp, #0x10 (16)
0x4cdf5028   168  stp x17, cp, [jssp, #-16]!
0x4cdf502c   172  add fp, jssp, #0x10 (16)
0x4cdf5030   176  ldr x17, pc+24 (addr 0x000000004cdf5048)    ;; lazy deoptimization bailout 0
0x4cdf5034   180  add x17, x17, x16
0x4cdf5038   184  br x17
0x4cdf503c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf5040   192  d63f03e0       constant
0x4cdf5044   196  d503201f       constant
0x4cdf5048   200  4cb06000       constant
0x4cdf504c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf4fb0  code target (STUB)  (0x4cd170c0)
0x4cdf4fe8  code target (STUB)  (0x4cd38080)
0x4cdf4ff8  constant pool (size 24)
0x4cdf5030  runtime entry
0x4cdf503c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = _events
compiler = unknown
Instructions (size = 152)
0x4cdf50c0     0  sub csp, jssp, #0x8 (8)
0x4cdf50c4     4  str x3, [jssp, #-8]!
0x4cdf50c8     8  sub csp, jssp, #0x8 (8)
0x4cdf50cc    12  str x4, [jssp, #-8]!
0x4cdf50d0    16  ldr x3, pc+88 (addr 0x000000004cdf5128)    ;; object: 0xffffaa1e88d1 Cell for 0
0x4cdf50d4    20  ldur x3, [x3, #7]
0x4cdf50d8    24  cmp x3, #0x0 (0)
0x4cdf50dc    28  b.ne #+0x30 (addr 0x4cdf510c)
0x4cdf50e0    32  tbz w0, #0, #+0x2c (addr 0x4cdf510c)
0x4cdf50e4    36  ldr x5, pc+76 (addr 0x000000004cdf5130)    ;; object: 0xffffaa1e8a09 WeakCell for 0x2a840321 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf50e8    40  ldur x5, [x5, #7]
0x4cdf50ec    44  tbz w5, #0, #+0x20 (addr 0x4cdf510c)
0x4cdf50f0    48  ldursw x4, [x5, #15]
0x4cdf50f4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf510c)
0x4cdf50f8    56  ldr x4, [jssp], #8
0x4cdf50fc    60  ldr x3, [jssp], #8
0x4cdf5100    64  ldr x2, pc+56 (addr 0x000000004cdf5138)    ;; object: 0x210b2591 <String[7]: _events>
0x4cdf5104    68  ldr x16, pc+60 (addr 0x000000004cdf5140)    ;; code: HANDLER, StoreTransitionStub, minor: 198667
0x4cdf5108    72  br x16
0x4cdf510c    76  ldr x2, pc+60 (addr 0x000000004cdf5148)    ;; object: 0x210b2591 <String[7]: _events>
0x4cdf5110    80  ldr x4, [jssp], #8
0x4cdf5114    84  ldr x3, [jssp], #8
0x4cdf5118    88  ldr x16, pc+56 (addr 0x000000004cdf5150)    ;; code: BUILTIN
0x4cdf511c    92  br x16
0x4cdf5120    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf5124   100  d63f03e0       constant
0x4cdf5128   104  aa1e88d1       constant
0x4cdf512c   108  0000ffff       constant
0x4cdf5130   112  aa1e8a09       constant
0x4cdf5134   116  0000ffff       constant
0x4cdf5138   120  210b2591       constant
0x4cdf513c   124  00000000       constant
0x4cdf5140   128  4cdf4f80       constant
0x4cdf5144   132  00000000       constant
0x4cdf5148   136  210b2591       constant
0x4cdf514c   140  00000000       constant
0x4cdf5150   144  4cd22420       constant
0x4cdf5154   148  00000000       constant


RelocInfo (size = 12)
0x4cdf50d0  embedded object  (0xffffaa1e88d1 Cell for 0)
0x4cdf50e4  embedded object  (0xffffaa1e8a09 WeakCell for 0x2a840321 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf5100  embedded object  (0x210b2591 <String[7]: _events>)
0x4cdf5104  code target (HANDLER)  (0x4cdf4f80)
0x4cdf510c  embedded object  (0x210b2591 <String[7]: _events>)
0x4cdf5118  code target (BUILTIN)  (0x4cd22420)
0x4cdf5120  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0x4cdf51c0     0  mov x6, x0
0x4cdf51c4     4  tbnz w6, #0, #+0x54 (addr 0x4cdf5218)
0x4cdf51c8     8  stur x6, [x1, #95]
0x4cdf51cc    12  stur x5, [x1, #-1]
0x4cdf51d0    16  tbz w5, #0, #+0x34 (addr 0x4cdf5204)
0x4cdf51d4    20  sub x2, x1, #0x1 (1)
0x4cdf51d8    24  and x5, x5, #0xfffffffffff00000
0x4cdf51dc    28  ldr x5, [x5, #8]
0x4cdf51e0    32  tbz w5, #1, #+0x24 (addr 0x4cdf5204)
0x4cdf51e4    36  and x5, x1, #0xfffffffffff00000
0x4cdf51e8    40  ldr x5, [x5, #8]
0x4cdf51ec    44  tbz w5, #2, #+0x18 (addr 0x4cdf5204)
0x4cdf51f0    48  sub csp, jssp, #0x8 (8)
0x4cdf51f4    52  str lr, [jssp, #-8]!
0x4cdf51f8    56  ldr x16, pc+24 (addr 0x000000004cdf5210)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf51fc    60  blr x16
0x4cdf5200    64  ldr lr, [jssp], #8
0x4cdf5204    68  ret
0x4cdf5208    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf520c    76  d63f03e0       constant
0x4cdf5210    80  4cd38080       constant
0x4cdf5214    84  00000000       constant
0x4cdf5218    88  movz x16, #0x0
0x4cdf521c    92  sub csp, jssp, #0x10 (16)
0x4cdf5220    96  stp fp, lr, [jssp, #-16]!
0x4cdf5224   100  bl #+0x4 (addr 0x4cdf5228)
0x4cdf5228   104  movz x17, #0xa00000000
0x4cdf522c   108  sub csp, jssp, #0x10 (16)
0x4cdf5230   112  stp x17, cp, [jssp, #-16]!
0x4cdf5234   116  add fp, jssp, #0x10 (16)
0x4cdf5238   120  ldr x17, pc+24 (addr 0x000000004cdf5250)    ;; lazy deoptimization bailout 0
0x4cdf523c   124  add x17, x17, x16
0x4cdf5240   128  br x17
0x4cdf5244   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf5248   136  d63f03e0       constant
0x4cdf524c   140  d503201f       constant
0x4cdf5250   144  4cb06000       constant
0x4cdf5254   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf51f8  code target (STUB)  (0x4cd38080)
0x4cdf5208  constant pool (size 16)
0x4cdf5238  runtime entry
0x4cdf5244  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0x4cdf51c0     0  mov x6, x0
0x4cdf51c4     4  tbnz w6, #0, #+0x54 (addr 0x4cdf5218)
0x4cdf51c8     8  stur x6, [x1, #95]
0x4cdf51cc    12  stur x5, [x1, #-1]
0x4cdf51d0    16  tbz w5, #0, #+0x34 (addr 0x4cdf5204)
0x4cdf51d4    20  sub x2, x1, #0x1 (1)
0x4cdf51d8    24  and x5, x5, #0xfffffffffff00000
0x4cdf51dc    28  ldr x5, [x5, #8]
0x4cdf51e0    32  tbz w5, #1, #+0x24 (addr 0x4cdf5204)
0x4cdf51e4    36  and x5, x1, #0xfffffffffff00000
0x4cdf51e8    40  ldr x5, [x5, #8]
0x4cdf51ec    44  tbz w5, #2, #+0x18 (addr 0x4cdf5204)
0x4cdf51f0    48  sub csp, jssp, #0x8 (8)
0x4cdf51f4    52  str lr, [jssp, #-8]!
0x4cdf51f8    56  ldr x16, pc+24 (addr 0x000000004cdf5210)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf51fc    60  blr x16
0x4cdf5200    64  ldr lr, [jssp], #8
0x4cdf5204    68  ret
0x4cdf5208    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf520c    76  d63f03e0       constant
0x4cdf5210    80  4cd38080       constant
0x4cdf5214    84  00000000       constant
0x4cdf5218    88  movz x16, #0x0
0x4cdf521c    92  sub csp, jssp, #0x10 (16)
0x4cdf5220    96  stp fp, lr, [jssp, #-16]!
0x4cdf5224   100  bl #+0x4 (addr 0x4cdf5228)
0x4cdf5228   104  movz x17, #0xa00000000
0x4cdf522c   108  sub csp, jssp, #0x10 (16)
0x4cdf5230   112  stp x17, cp, [jssp, #-16]!
0x4cdf5234   116  add fp, jssp, #0x10 (16)
0x4cdf5238   120  ldr x17, pc+24 (addr 0x000000004cdf5250)    ;; lazy deoptimization bailout 0
0x4cdf523c   124  add x17, x17, x16
0x4cdf5240   128  br x17
0x4cdf5244   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf5248   136  d63f03e0       constant
0x4cdf524c   140  d503201f       constant
0x4cdf5250   144  4cb06000       constant
0x4cdf5254   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf51f8  code target (STUB)  (0x4cd38080)
0x4cdf5208  constant pool (size 16)
0x4cdf5238  runtime entry
0x4cdf5244  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = _eventsCount
compiler = unknown
Instructions (size = 152)
0x4cdf52c0     0  sub csp, jssp, #0x8 (8)
0x4cdf52c4     4  str x3, [jssp, #-8]!
0x4cdf52c8     8  sub csp, jssp, #0x8 (8)
0x4cdf52cc    12  str x4, [jssp, #-8]!
0x4cdf52d0    16  ldr x3, pc+88 (addr 0x000000004cdf5328)    ;; object: 0xffffaa1e88d1 Cell for 0
0x4cdf52d4    20  ldur x3, [x3, #7]
0x4cdf52d8    24  cmp x3, #0x0 (0)
0x4cdf52dc    28  b.ne #+0x2c (addr 0x4cdf5308)
0x4cdf52e0    32  ldr x5, pc+80 (addr 0x000000004cdf5330)    ;; object: 0xffffaa1e8af9 WeakCell for 0x2a840379 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf52e4    36  ldur x5, [x5, #7]
0x4cdf52e8    40  tbz w5, #0, #+0x20 (addr 0x4cdf5308)
0x4cdf52ec    44  ldursw x4, [x5, #15]
0x4cdf52f0    48  tbnz w4, #23, #+0x18 (addr 0x4cdf5308)
0x4cdf52f4    52  ldr x4, [jssp], #8
0x4cdf52f8    56  ldr x3, [jssp], #8
0x4cdf52fc    60  ldr x2, pc+60 (addr 0x000000004cdf5338)    ;; object: 0x210b93b9 <String[12]: _eventsCount>
0x4cdf5300    64  ldr x16, pc+64 (addr 0x000000004cdf5340)    ;; code: HANDLER, StoreTransitionStub, minor: 174092
0x4cdf5304    68  br x16
0x4cdf5308    72  ldr x2, pc+64 (addr 0x000000004cdf5348)    ;; object: 0x210b93b9 <String[12]: _eventsCount>
0x4cdf530c    76  ldr x4, [jssp], #8
0x4cdf5310    80  ldr x3, [jssp], #8
0x4cdf5314    84  ldr x16, pc+60 (addr 0x000000004cdf5350)    ;; code: BUILTIN
0x4cdf5318    88  br x16
0x4cdf531c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdf5320    96  d63f03e0       constant
0x4cdf5324   100  d503201f       constant
0x4cdf5328   104  aa1e88d1       constant
0x4cdf532c   108  0000ffff       constant
0x4cdf5330   112  aa1e8af9       constant
0x4cdf5334   116  0000ffff       constant
0x4cdf5338   120  210b93b9       constant
0x4cdf533c   124  00000000       constant
0x4cdf5340   128  4cdf51c0       constant
0x4cdf5344   132  00000000       constant
0x4cdf5348   136  210b93b9       constant
0x4cdf534c   140  00000000       constant
0x4cdf5350   144  4cd22420       constant
0x4cdf5354   148  00000000       constant


RelocInfo (size = 12)
0x4cdf52d0  embedded object  (0xffffaa1e88d1 Cell for 0)
0x4cdf52e0  embedded object  (0xffffaa1e8af9 WeakCell for 0x2a840379 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf52fc  embedded object  (0x210b93b9 <String[12]: _eventsCount>)
0x4cdf5300  code target (HANDLER)  (0x4cdf51c0)
0x4cdf5308  embedded object  (0x210b93b9 <String[12]: _eventsCount>)
0x4cdf5314  code target (BUILTIN)  (0x4cd22420)
0x4cdf531c  constant pool (size 60)

kind = HANDLER
major_key = <NoCache>Stub
name = _maxListeners
compiler = unknown
Instructions (size = 120)
0x4cdf53c0     0  sub csp, jssp, #0x8 (8)
0x4cdf53c4     4  str x3, [jssp, #-8]!
0x4cdf53c8     8  sub csp, jssp, #0x8 (8)
0x4cdf53cc    12  str x0, [jssp, #-8]!
0x4cdf53d0    16  ldr x0, pc+72 (addr 0x000000004cdf5418)    ;; object: 0xffffaa1e88d1 Cell for 0
0x4cdf53d4    20  ldur x0, [x0, #7]
0x4cdf53d8    24  cmp x0, #0x0 (0)
0x4cdf53dc    28  b.ne #+0x14 (addr 0x4cdf53f0)
0x4cdf53e0    32  ldr x3, pc+64 (addr 0x000000004cdf5420)    ;; object: 0xffffaa1e8be9 WeakCell for 0xffffaa1b1c41 <an Object with map 0x2a81bf39>
0x4cdf53e4    36  ldur x3, [x3, #7]
0x4cdf53e8    40  tbz w3, #0, #+0x8 (addr 0x4cdf53f0)
0x4cdf53ec    44  b #+0x14 (addr 0x4cdf5400)
0x4cdf53f0    48  ldr x0, [jssp], #8
0x4cdf53f4    52  ldr x3, [jssp], #8
0x4cdf53f8    56  ldr x16, pc+48 (addr 0x000000004cdf5428)    ;; code: BUILTIN
0x4cdf53fc    60  br x16
0x4cdf5400    64  add jssp, jssp, #0x10 (16)
0x4cdf5404    68  mov x1, x3
0x4cdf5408    72  ldr x16, pc+40 (addr 0x000000004cdf5430)    ;; code: HANDLER, LoadFieldStub, minor: 2053
0x4cdf540c    76  br x16
0x4cdf5410    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdf5414    84  d63f03e0       constant
0x4cdf5418    88  aa1e88d1       constant
0x4cdf541c    92  0000ffff       constant
0x4cdf5420    96  aa1e8be9       constant
0x4cdf5424   100  0000ffff       constant
0x4cdf5428   104  4cd222e0       constant
0x4cdf542c   108  00000000       constant
0x4cdf5430   112  4cd78e20       constant
0x4cdf5434   116  00000000       constant


RelocInfo (size = 10)
0x4cdf53d0  embedded object  (0xffffaa1e88d1 Cell for 0)
0x4cdf53e0  embedded object  (0xffffaa1e8be9 WeakCell for 0xffffaa1b1c41 <an Object with map 0x2a81bf39>)
0x4cdf53f8  code target (BUILTIN)  (0x4cd222e0)
0x4cdf5408  code target (HANDLER)  (0x4cd78e20)
0x4cdf5410  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = _maxListeners
compiler = unknown
Instructions (size = 152)
0x4cdf54a0     0  sub csp, jssp, #0x8 (8)
0x4cdf54a4     4  str x3, [jssp, #-8]!
0x4cdf54a8     8  sub csp, jssp, #0x8 (8)
0x4cdf54ac    12  str x4, [jssp, #-8]!
0x4cdf54b0    16  ldr x3, pc+88 (addr 0x000000004cdf5508)    ;; object: 0xffffaa1e88d1 Cell for 0
0x4cdf54b4    20  ldur x3, [x3, #7]
0x4cdf54b8    24  cmp x3, #0x0 (0)
0x4cdf54bc    28  b.ne #+0x30 (addr 0x4cdf54ec)
0x4cdf54c0    32  tbz w0, #0, #+0x2c (addr 0x4cdf54ec)
0x4cdf54c4    36  ldr x5, pc+76 (addr 0x000000004cdf5510)    ;; object: 0xffffaa1e8c21 WeakCell for 0x2a8403d1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf54c8    40  ldur x5, [x5, #7]
0x4cdf54cc    44  tbz w5, #0, #+0x20 (addr 0x4cdf54ec)
0x4cdf54d0    48  ldursw x4, [x5, #15]
0x4cdf54d4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf54ec)
0x4cdf54d8    56  ldr x4, [jssp], #8
0x4cdf54dc    60  ldr x3, [jssp], #8
0x4cdf54e0    64  ldr x2, pc+56 (addr 0x000000004cdf5518)    ;; object: 0x210c32b1 <String[13]: _maxListeners>
0x4cdf54e4    68  ldr x16, pc+60 (addr 0x000000004cdf5520)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0x4cdf54e8    72  br x16
0x4cdf54ec    76  ldr x2, pc+60 (addr 0x000000004cdf5528)    ;; object: 0x210c32b1 <String[13]: _maxListeners>
0x4cdf54f0    80  ldr x4, [jssp], #8
0x4cdf54f4    84  ldr x3, [jssp], #8
0x4cdf54f8    88  ldr x16, pc+56 (addr 0x000000004cdf5530)    ;; code: BUILTIN
0x4cdf54fc    92  br x16
0x4cdf5500    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf5504   100  d63f03e0       constant
0x4cdf5508   104  aa1e88d1       constant
0x4cdf550c   108  0000ffff       constant
0x4cdf5510   112  aa1e8c21       constant
0x4cdf5514   116  0000ffff       constant
0x4cdf5518   120  210c32b1       constant
0x4cdf551c   124  00000000       constant
0x4cdf5520   128  4cd38860       constant
0x4cdf5524   132  00000000       constant
0x4cdf5528   136  210c32b1       constant
0x4cdf552c   140  00000000       constant
0x4cdf5530   144  4cd22420       constant
0x4cdf5534   148  00000000       constant


RelocInfo (size = 12)
0x4cdf54b0  embedded object  (0xffffaa1e88d1 Cell for 0)
0x4cdf54c4  embedded object  (0xffffaa1e8c21 WeakCell for 0x2a8403d1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf54e0  embedded object  (0x210c32b1 <String[13]: _maxListeners>)
0x4cdf54e4  code target (HANDLER)  (0x4cd38860)
0x4cdf54ec  embedded object  (0x210c32b1 <String[13]: _maxListeners>)
0x4cdf54f8  code target (BUILTIN)  (0x4cd22420)
0x4cdf5500  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = objectMode
compiler = unknown
Instructions (size = 152)
0x4cdf55a0     0  sub csp, jssp, #0x8 (8)
0x4cdf55a4     4  str x3, [jssp, #-8]!
0x4cdf55a8     8  sub csp, jssp, #0x8 (8)
0x4cdf55ac    12  str x4, [jssp, #-8]!
0x4cdf55b0    16  ldr x3, pc+88 (addr 0x000000004cdf5608)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf55b4    20  ldur x3, [x3, #7]
0x4cdf55b8    24  cmp x3, #0x0 (0)
0x4cdf55bc    28  b.ne #+0x30 (addr 0x4cdf55ec)
0x4cdf55c0    32  tbz w0, #0, #+0x2c (addr 0x4cdf55ec)
0x4cdf55c4    36  ldr x5, pc+76 (addr 0x000000004cdf5610)    ;; object: 0xffffaa1d0d41 WeakCell for 0x2a837e71 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf55c8    40  ldur x5, [x5, #7]
0x4cdf55cc    44  tbz w5, #0, #+0x20 (addr 0x4cdf55ec)
0x4cdf55d0    48  ldursw x4, [x5, #15]
0x4cdf55d4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf55ec)
0x4cdf55d8    56  ldr x4, [jssp], #8
0x4cdf55dc    60  ldr x3, [jssp], #8
0x4cdf55e0    64  ldr x2, pc+56 (addr 0x000000004cdf5618)    ;; object: 0xffffaa11d821 <String[10]: objectMode>
0x4cdf55e4    68  ldr x16, pc+60 (addr 0x000000004cdf5620)    ;; code: HANDLER, StoreTransitionStub, minor: 198659
0x4cdf55e8    72  br x16
0x4cdf55ec    76  ldr x2, pc+60 (addr 0x000000004cdf5628)    ;; object: 0xffffaa11d821 <String[10]: objectMode>
0x4cdf55f0    80  ldr x4, [jssp], #8
0x4cdf55f4    84  ldr x3, [jssp], #8
0x4cdf55f8    88  ldr x16, pc+56 (addr 0x000000004cdf5630)    ;; code: BUILTIN
0x4cdf55fc    92  br x16
0x4cdf5600    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf5604   100  d63f03e0       constant
0x4cdf5608   104  aa1e8cb1       constant
0x4cdf560c   108  0000ffff       constant
0x4cdf5610   112  aa1d0d41       constant
0x4cdf5614   116  0000ffff       constant
0x4cdf5618   120  aa11d821       constant
0x4cdf561c   124  0000ffff       constant
0x4cdf5620   128  4cd8b940       constant
0x4cdf5624   132  00000000       constant
0x4cdf5628   136  aa11d821       constant
0x4cdf562c   140  0000ffff       constant
0x4cdf5630   144  4cd22420       constant
0x4cdf5634   148  00000000       constant


RelocInfo (size = 12)
0x4cdf55b0  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf55c4  embedded object  (0xffffaa1d0d41 WeakCell for 0x2a837e71 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf55e0  embedded object  (0xffffaa11d821 <String[10]: objectMode>)
0x4cdf55e4  code target (HANDLER)  (0x4cd8b940)
0x4cdf55ec  embedded object  (0xffffaa11d821 <String[10]: objectMode>)
0x4cdf55f8  code target (BUILTIN)  (0x4cd22420)
0x4cdf5600  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
compiler = unknown
Instructions (size = 120)
0x4cdf56a0     0  sub csp, jssp, #0x8 (8)
0x4cdf56a4     4  str x3, [jssp, #-8]!
0x4cdf56a8     8  sub csp, jssp, #0x8 (8)
0x4cdf56ac    12  str x0, [jssp, #-8]!
0x4cdf56b0    16  ldr x0, pc+72 (addr 0x000000004cdf56f8)    ;; object: 0x2105b0f1 Cell for 0
0x4cdf56b4    20  ldur x0, [x0, #7]
0x4cdf56b8    24  cmp x0, #0x0 (0)
0x4cdf56bc    28  b.ne #+0x14 (addr 0x4cdf56d0)
0x4cdf56c0    32  ldr x3, pc+64 (addr 0x000000004cdf5700)    ;; object: 0xffffaa1e8d11 WeakCell for 0x21040019 <JS Function (SharedFunctionInfo 0x2103ff71)>
0x4cdf56c4    36  ldur x3, [x3, #7]
0x4cdf56c8    40  tbz w3, #0, #+0x8 (addr 0x4cdf56d0)
0x4cdf56cc    44  b #+0x14 (addr 0x4cdf56e0)
0x4cdf56d0    48  ldr x0, [jssp], #8
0x4cdf56d4    52  ldr x3, [jssp], #8
0x4cdf56d8    56  ldr x16, pc+48 (addr 0x000000004cdf5708)    ;; code: BUILTIN
0x4cdf56dc    60  br x16
0x4cdf56e0    64  add jssp, jssp, #0x10 (16)
0x4cdf56e4    68  mov x1, x3
0x4cdf56e8    72  ldr x16, pc+40 (addr 0x000000004cdf5710)    ;; code: HANDLER, LoadConstantStub, minor: 8
0x4cdf56ec    76  br x16
0x4cdf56f0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdf56f4    84  d63f03e0       constant
0x4cdf56f8    88  2105b0f1       constant
0x4cdf56fc    92  00000000       constant
0x4cdf5700    96  aa1e8d11       constant
0x4cdf5704   100  0000ffff       constant
0x4cdf5708   104  4cd222e0       constant
0x4cdf570c   108  00000000       constant
0x4cdf5710   112  4cd4c160       constant
0x4cdf5714   116  00000000       constant


RelocInfo (size = 10)
0x4cdf56b0  embedded object  (0x2105b0f1 Cell for 0)
0x4cdf56c0  embedded object  (0xffffaa1e8d11 WeakCell for 0x21040019 <JS Function (SharedFunctionInfo 0x2103ff71)>)
0x4cdf56d8  code target (BUILTIN)  (0x4cd222e0)
0x4cdf56e8  code target (HANDLER)  (0x4cd4c160)
0x4cdf56f0  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0x4cdf5780     0  mov x6, x0
0x4cdf5784     4  tbnz w6, #0, #+0x54 (addr 0x4cdf57d8)
0x4cdf5788     8  stur x6, [x1, #31]
0x4cdf578c    12  stur x5, [x1, #-1]
0x4cdf5790    16  tbz w5, #0, #+0x34 (addr 0x4cdf57c4)
0x4cdf5794    20  sub x2, x1, #0x1 (1)
0x4cdf5798    24  and x5, x5, #0xfffffffffff00000
0x4cdf579c    28  ldr x5, [x5, #8]
0x4cdf57a0    32  tbz w5, #1, #+0x24 (addr 0x4cdf57c4)
0x4cdf57a4    36  and x5, x1, #0xfffffffffff00000
0x4cdf57a8    40  ldr x5, [x5, #8]
0x4cdf57ac    44  tbz w5, #2, #+0x18 (addr 0x4cdf57c4)
0x4cdf57b0    48  sub csp, jssp, #0x8 (8)
0x4cdf57b4    52  str lr, [jssp, #-8]!
0x4cdf57b8    56  ldr x16, pc+24 (addr 0x000000004cdf57d0)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf57bc    60  blr x16
0x4cdf57c0    64  ldr lr, [jssp], #8
0x4cdf57c4    68  ret
0x4cdf57c8    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf57cc    76  d63f03e0       constant
0x4cdf57d0    80  4cd38080       constant
0x4cdf57d4    84  00000000       constant
0x4cdf57d8    88  movz x16, #0x0
0x4cdf57dc    92  sub csp, jssp, #0x10 (16)
0x4cdf57e0    96  stp fp, lr, [jssp, #-16]!
0x4cdf57e4   100  bl #+0x4 (addr 0x4cdf57e8)
0x4cdf57e8   104  movz x17, #0xa00000000
0x4cdf57ec   108  sub csp, jssp, #0x10 (16)
0x4cdf57f0   112  stp x17, cp, [jssp, #-16]!
0x4cdf57f4   116  add fp, jssp, #0x10 (16)
0x4cdf57f8   120  ldr x17, pc+24 (addr 0x000000004cdf5810)    ;; lazy deoptimization bailout 0
0x4cdf57fc   124  add x17, x17, x16
0x4cdf5800   128  br x17
0x4cdf5804   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf5808   136  d63f03e0       constant
0x4cdf580c   140  d503201f       constant
0x4cdf5810   144  4cb06000       constant
0x4cdf5814   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf57b8  code target (STUB)  (0x4cd38080)
0x4cdf57c8  constant pool (size 16)
0x4cdf57f8  runtime entry
0x4cdf5804  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0x4cdf5780     0  mov x6, x0
0x4cdf5784     4  tbnz w6, #0, #+0x54 (addr 0x4cdf57d8)
0x4cdf5788     8  stur x6, [x1, #31]
0x4cdf578c    12  stur x5, [x1, #-1]
0x4cdf5790    16  tbz w5, #0, #+0x34 (addr 0x4cdf57c4)
0x4cdf5794    20  sub x2, x1, #0x1 (1)
0x4cdf5798    24  and x5, x5, #0xfffffffffff00000
0x4cdf579c    28  ldr x5, [x5, #8]
0x4cdf57a0    32  tbz w5, #1, #+0x24 (addr 0x4cdf57c4)
0x4cdf57a4    36  and x5, x1, #0xfffffffffff00000
0x4cdf57a8    40  ldr x5, [x5, #8]
0x4cdf57ac    44  tbz w5, #2, #+0x18 (addr 0x4cdf57c4)
0x4cdf57b0    48  sub csp, jssp, #0x8 (8)
0x4cdf57b4    52  str lr, [jssp, #-8]!
0x4cdf57b8    56  ldr x16, pc+24 (addr 0x000000004cdf57d0)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf57bc    60  blr x16
0x4cdf57c0    64  ldr lr, [jssp], #8
0x4cdf57c4    68  ret
0x4cdf57c8    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf57cc    76  d63f03e0       constant
0x4cdf57d0    80  4cd38080       constant
0x4cdf57d4    84  00000000       constant
0x4cdf57d8    88  movz x16, #0x0
0x4cdf57dc    92  sub csp, jssp, #0x10 (16)
0x4cdf57e0    96  stp fp, lr, [jssp, #-16]!
0x4cdf57e4   100  bl #+0x4 (addr 0x4cdf57e8)
0x4cdf57e8   104  movz x17, #0xa00000000
0x4cdf57ec   108  sub csp, jssp, #0x10 (16)
0x4cdf57f0   112  stp x17, cp, [jssp, #-16]!
0x4cdf57f4   116  add fp, jssp, #0x10 (16)
0x4cdf57f8   120  ldr x17, pc+24 (addr 0x000000004cdf5810)    ;; lazy deoptimization bailout 0
0x4cdf57fc   124  add x17, x17, x16
0x4cdf5800   128  br x17
0x4cdf5804   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf5808   136  d63f03e0       constant
0x4cdf580c   140  d503201f       constant
0x4cdf5810   144  4cb06000       constant
0x4cdf5814   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf57b8  code target (STUB)  (0x4cd38080)
0x4cdf57c8  constant pool (size 16)
0x4cdf57f8  runtime entry
0x4cdf5804  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = highWaterMark
compiler = unknown
Instructions (size = 152)
0x4cdf5880     0  sub csp, jssp, #0x8 (8)
0x4cdf5884     4  str x3, [jssp, #-8]!
0x4cdf5888     8  sub csp, jssp, #0x8 (8)
0x4cdf588c    12  str x4, [jssp, #-8]!
0x4cdf5890    16  ldr x3, pc+88 (addr 0x000000004cdf58e8)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf5894    20  ldur x3, [x3, #7]
0x4cdf5898    24  cmp x3, #0x0 (0)
0x4cdf589c    28  b.ne #+0x2c (addr 0x4cdf58c8)
0x4cdf58a0    32  ldr x5, pc+80 (addr 0x000000004cdf58f0)    ;; object: 0xffffaa1d0d79 WeakCell for 0x2a837ec9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf58a4    36  ldur x5, [x5, #7]
0x4cdf58a8    40  tbz w5, #0, #+0x20 (addr 0x4cdf58c8)
0x4cdf58ac    44  ldursw x4, [x5, #15]
0x4cdf58b0    48  tbnz w4, #23, #+0x18 (addr 0x4cdf58c8)
0x4cdf58b4    52  ldr x4, [jssp], #8
0x4cdf58b8    56  ldr x3, [jssp], #8
0x4cdf58bc    60  ldr x2, pc+60 (addr 0x000000004cdf58f8)    ;; object: 0x210f91d9 <String[13]: highWaterMark>
0x4cdf58c0    64  ldr x16, pc+64 (addr 0x000000004cdf5900)    ;; code: HANDLER, StoreTransitionStub, minor: 174084
0x4cdf58c4    68  br x16
0x4cdf58c8    72  ldr x2, pc+64 (addr 0x000000004cdf5908)    ;; object: 0x210f91d9 <String[13]: highWaterMark>
0x4cdf58cc    76  ldr x4, [jssp], #8
0x4cdf58d0    80  ldr x3, [jssp], #8
0x4cdf58d4    84  ldr x16, pc+60 (addr 0x000000004cdf5910)    ;; code: BUILTIN
0x4cdf58d8    88  br x16
0x4cdf58dc    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdf58e0    96  d63f03e0       constant
0x4cdf58e4   100  d503201f       constant
0x4cdf58e8   104  aa1e8cb1       constant
0x4cdf58ec   108  0000ffff       constant
0x4cdf58f0   112  aa1d0d79       constant
0x4cdf58f4   116  0000ffff       constant
0x4cdf58f8   120  210f91d9       constant
0x4cdf58fc   124  00000000       constant
0x4cdf5900   128  4cdf5780       constant
0x4cdf5904   132  00000000       constant
0x4cdf5908   136  210f91d9       constant
0x4cdf590c   140  00000000       constant
0x4cdf5910   144  4cd22420       constant
0x4cdf5914   148  00000000       constant


RelocInfo (size = 12)
0x4cdf5890  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf58a0  embedded object  (0xffffaa1d0d79 WeakCell for 0x2a837ec9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf58bc  embedded object  (0x210f91d9 <String[13]: highWaterMark>)
0x4cdf58c0  code target (HANDLER)  (0x4cdf5780)
0x4cdf58c8  embedded object  (0x210f91d9 <String[13]: highWaterMark>)
0x4cdf58d4  code target (BUILTIN)  (0x4cd22420)
0x4cdf58dc  constant pool (size 60)

kind = HANDLER
major_key = <NoCache>Stub
name = needDrain
compiler = unknown
Instructions (size = 152)
0x4cdf5980     0  sub csp, jssp, #0x8 (8)
0x4cdf5984     4  str x3, [jssp, #-8]!
0x4cdf5988     8  sub csp, jssp, #0x8 (8)
0x4cdf598c    12  str x4, [jssp, #-8]!
0x4cdf5990    16  ldr x3, pc+88 (addr 0x000000004cdf59e8)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf5994    20  ldur x3, [x3, #7]
0x4cdf5998    24  cmp x3, #0x0 (0)
0x4cdf599c    28  b.ne #+0x30 (addr 0x4cdf59cc)
0x4cdf59a0    32  tbz w0, #0, #+0x2c (addr 0x4cdf59cc)
0x4cdf59a4    36  ldr x5, pc+76 (addr 0x000000004cdf59f0)    ;; object: 0xffffaa1d0d91 WeakCell for 0x2a837f21 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf59a8    40  ldur x5, [x5, #7]
0x4cdf59ac    44  tbz w5, #0, #+0x20 (addr 0x4cdf59cc)
0x4cdf59b0    48  ldursw x4, [x5, #15]
0x4cdf59b4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf59cc)
0x4cdf59b8    56  ldr x4, [jssp], #8
0x4cdf59bc    60  ldr x3, [jssp], #8
0x4cdf59c0    64  ldr x2, pc+56 (addr 0x000000004cdf59f8)    ;; object: 0xffffaa11e111 <String[9]: needDrain>
0x4cdf59c4    68  ldr x16, pc+60 (addr 0x000000004cdf5a00)    ;; code: HANDLER, StoreTransitionStub, minor: 198661
0x4cdf59c8    72  br x16
0x4cdf59cc    76  ldr x2, pc+60 (addr 0x000000004cdf5a08)    ;; object: 0xffffaa11e111 <String[9]: needDrain>
0x4cdf59d0    80  ldr x4, [jssp], #8
0x4cdf59d4    84  ldr x3, [jssp], #8
0x4cdf59d8    88  ldr x16, pc+56 (addr 0x000000004cdf5a10)    ;; code: BUILTIN
0x4cdf59dc    92  br x16
0x4cdf59e0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf59e4   100  d63f03e0       constant
0x4cdf59e8   104  aa1e8cb1       constant
0x4cdf59ec   108  0000ffff       constant
0x4cdf59f0   112  aa1d0d91       constant
0x4cdf59f4   116  0000ffff       constant
0x4cdf59f8   120  aa11e111       constant
0x4cdf59fc   124  0000ffff       constant
0x4cdf5a00   128  4cd8bdc0       constant
0x4cdf5a04   132  00000000       constant
0x4cdf5a08   136  aa11e111       constant
0x4cdf5a0c   140  0000ffff       constant
0x4cdf5a10   144  4cd22420       constant
0x4cdf5a14   148  00000000       constant


RelocInfo (size = 12)
0x4cdf5990  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf59a4  embedded object  (0xffffaa1d0d91 WeakCell for 0x2a837f21 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf59c0  embedded object  (0xffffaa11e111 <String[9]: needDrain>)
0x4cdf59c4  code target (HANDLER)  (0x4cd8bdc0)
0x4cdf59cc  embedded object  (0xffffaa11e111 <String[9]: needDrain>)
0x4cdf59d8  code target (BUILTIN)  (0x4cd22420)
0x4cdf59e0  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = ending
compiler = unknown
Instructions (size = 152)
0x4cdf5a80     0  sub csp, jssp, #0x8 (8)
0x4cdf5a84     4  str x3, [jssp, #-8]!
0x4cdf5a88     8  sub csp, jssp, #0x8 (8)
0x4cdf5a8c    12  str x4, [jssp, #-8]!
0x4cdf5a90    16  ldr x3, pc+88 (addr 0x000000004cdf5ae8)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf5a94    20  ldur x3, [x3, #7]
0x4cdf5a98    24  cmp x3, #0x0 (0)
0x4cdf5a9c    28  b.ne #+0x30 (addr 0x4cdf5acc)
0x4cdf5aa0    32  tbz w0, #0, #+0x2c (addr 0x4cdf5acc)
0x4cdf5aa4    36  ldr x5, pc+76 (addr 0x000000004cdf5af0)    ;; object: 0xffffaa1d0da9 WeakCell for 0x2a837f79 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf5aa8    40  ldur x5, [x5, #7]
0x4cdf5aac    44  tbz w5, #0, #+0x20 (addr 0x4cdf5acc)
0x4cdf5ab0    48  ldursw x4, [x5, #15]
0x4cdf5ab4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf5acc)
0x4cdf5ab8    56  ldr x4, [jssp], #8
0x4cdf5abc    60  ldr x3, [jssp], #8
0x4cdf5ac0    64  ldr x2, pc+56 (addr 0x000000004cdf5af8)    ;; object: 0xffffaa122889 <String[6]: ending>
0x4cdf5ac4    68  ldr x16, pc+60 (addr 0x000000004cdf5b00)    ;; code: HANDLER, StoreTransitionStub, minor: 198662
0x4cdf5ac8    72  br x16
0x4cdf5acc    76  ldr x2, pc+60 (addr 0x000000004cdf5b08)    ;; object: 0xffffaa122889 <String[6]: ending>
0x4cdf5ad0    80  ldr x4, [jssp], #8
0x4cdf5ad4    84  ldr x3, [jssp], #8
0x4cdf5ad8    88  ldr x16, pc+56 (addr 0x000000004cdf5b10)    ;; code: BUILTIN
0x4cdf5adc    92  br x16
0x4cdf5ae0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf5ae4   100  d63f03e0       constant
0x4cdf5ae8   104  aa1e8cb1       constant
0x4cdf5aec   108  0000ffff       constant
0x4cdf5af0   112  aa1d0da9       constant
0x4cdf5af4   116  0000ffff       constant
0x4cdf5af8   120  aa122889       constant
0x4cdf5afc   124  0000ffff       constant
0x4cdf5b00   128  4cd8c000       constant
0x4cdf5b04   132  00000000       constant
0x4cdf5b08   136  aa122889       constant
0x4cdf5b0c   140  0000ffff       constant
0x4cdf5b10   144  4cd22420       constant
0x4cdf5b14   148  00000000       constant


RelocInfo (size = 12)
0x4cdf5a90  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf5aa4  embedded object  (0xffffaa1d0da9 WeakCell for 0x2a837f79 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf5ac0  embedded object  (0xffffaa122889 <String[6]: ending>)
0x4cdf5ac4  code target (HANDLER)  (0x4cd8c000)
0x4cdf5acc  embedded object  (0xffffaa122889 <String[6]: ending>)
0x4cdf5ad8  code target (BUILTIN)  (0x4cd22420)
0x4cdf5ae0  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = ended
compiler = unknown
Instructions (size = 152)
0x4cdf5b80     0  sub csp, jssp, #0x8 (8)
0x4cdf5b84     4  str x3, [jssp, #-8]!
0x4cdf5b88     8  sub csp, jssp, #0x8 (8)
0x4cdf5b8c    12  str x4, [jssp, #-8]!
0x4cdf5b90    16  ldr x3, pc+88 (addr 0x000000004cdf5be8)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf5b94    20  ldur x3, [x3, #7]
0x4cdf5b98    24  cmp x3, #0x0 (0)
0x4cdf5b9c    28  b.ne #+0x30 (addr 0x4cdf5bcc)
0x4cdf5ba0    32  tbz w0, #0, #+0x2c (addr 0x4cdf5bcc)
0x4cdf5ba4    36  ldr x5, pc+76 (addr 0x000000004cdf5bf0)    ;; object: 0xffffaa1d0dc1 WeakCell for 0x2a837fd1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf5ba8    40  ldur x5, [x5, #7]
0x4cdf5bac    44  tbz w5, #0, #+0x20 (addr 0x4cdf5bcc)
0x4cdf5bb0    48  ldursw x4, [x5, #15]
0x4cdf5bb4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf5bcc)
0x4cdf5bb8    56  ldr x4, [jssp], #8
0x4cdf5bbc    60  ldr x3, [jssp], #8
0x4cdf5bc0    64  ldr x2, pc+56 (addr 0x000000004cdf5bf8)    ;; object: 0x210f92f1 <String[5]: ended>
0x4cdf5bc4    68  ldr x16, pc+60 (addr 0x000000004cdf5c00)    ;; code: HANDLER, StoreTransitionStub, minor: 198663
0x4cdf5bc8    72  br x16
0x4cdf5bcc    76  ldr x2, pc+60 (addr 0x000000004cdf5c08)    ;; object: 0x210f92f1 <String[5]: ended>
0x4cdf5bd0    80  ldr x4, [jssp], #8
0x4cdf5bd4    84  ldr x3, [jssp], #8
0x4cdf5bd8    88  ldr x16, pc+56 (addr 0x000000004cdf5c10)    ;; code: BUILTIN
0x4cdf5bdc    92  br x16
0x4cdf5be0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf5be4   100  d63f03e0       constant
0x4cdf5be8   104  aa1e8cb1       constant
0x4cdf5bec   108  0000ffff       constant
0x4cdf5bf0   112  aa1d0dc1       constant
0x4cdf5bf4   116  0000ffff       constant
0x4cdf5bf8   120  210f92f1       constant
0x4cdf5bfc   124  00000000       constant
0x4cdf5c00   128  4cd8c240       constant
0x4cdf5c04   132  00000000       constant
0x4cdf5c08   136  210f92f1       constant
0x4cdf5c0c   140  00000000       constant
0x4cdf5c10   144  4cd22420       constant
0x4cdf5c14   148  00000000       constant


RelocInfo (size = 12)
0x4cdf5b90  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf5ba4  embedded object  (0xffffaa1d0dc1 WeakCell for 0x2a837fd1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf5bc0  embedded object  (0x210f92f1 <String[5]: ended>)
0x4cdf5bc4  code target (HANDLER)  (0x4cd8c240)
0x4cdf5bcc  embedded object  (0x210f92f1 <String[5]: ended>)
0x4cdf5bd8  code target (BUILTIN)  (0x4cd22420)
0x4cdf5be0  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = finished
compiler = unknown
Instructions (size = 152)
0x4cdf5c80     0  sub csp, jssp, #0x8 (8)
0x4cdf5c84     4  str x3, [jssp, #-8]!
0x4cdf5c88     8  sub csp, jssp, #0x8 (8)
0x4cdf5c8c    12  str x4, [jssp, #-8]!
0x4cdf5c90    16  ldr x3, pc+88 (addr 0x000000004cdf5ce8)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf5c94    20  ldur x3, [x3, #7]
0x4cdf5c98    24  cmp x3, #0x0 (0)
0x4cdf5c9c    28  b.ne #+0x30 (addr 0x4cdf5ccc)
0x4cdf5ca0    32  tbz w0, #0, #+0x2c (addr 0x4cdf5ccc)
0x4cdf5ca4    36  ldr x5, pc+76 (addr 0x000000004cdf5cf0)    ;; object: 0xffffaa1d0dd9 WeakCell for 0x2a838029 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf5ca8    40  ldur x5, [x5, #7]
0x4cdf5cac    44  tbz w5, #0, #+0x20 (addr 0x4cdf5ccc)
0x4cdf5cb0    48  ldursw x4, [x5, #15]
0x4cdf5cb4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf5ccc)
0x4cdf5cb8    56  ldr x4, [jssp], #8
0x4cdf5cbc    60  ldr x3, [jssp], #8
0x4cdf5cc0    64  ldr x2, pc+56 (addr 0x000000004cdf5cf8)    ;; object: 0xffffaa1228a9 <String[8]: finished>
0x4cdf5cc4    68  ldr x16, pc+60 (addr 0x000000004cdf5d00)    ;; code: HANDLER, StoreTransitionStub, minor: 198664
0x4cdf5cc8    72  br x16
0x4cdf5ccc    76  ldr x2, pc+60 (addr 0x000000004cdf5d08)    ;; object: 0xffffaa1228a9 <String[8]: finished>
0x4cdf5cd0    80  ldr x4, [jssp], #8
0x4cdf5cd4    84  ldr x3, [jssp], #8
0x4cdf5cd8    88  ldr x16, pc+56 (addr 0x000000004cdf5d10)    ;; code: BUILTIN
0x4cdf5cdc    92  br x16
0x4cdf5ce0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf5ce4   100  d63f03e0       constant
0x4cdf5ce8   104  aa1e8cb1       constant
0x4cdf5cec   108  0000ffff       constant
0x4cdf5cf0   112  aa1d0dd9       constant
0x4cdf5cf4   116  0000ffff       constant
0x4cdf5cf8   120  aa1228a9       constant
0x4cdf5cfc   124  0000ffff       constant
0x4cdf5d00   128  4cde5020       constant
0x4cdf5d04   132  00000000       constant
0x4cdf5d08   136  aa1228a9       constant
0x4cdf5d0c   140  0000ffff       constant
0x4cdf5d10   144  4cd22420       constant
0x4cdf5d14   148  00000000       constant


RelocInfo (size = 12)
0x4cdf5c90  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf5ca4  embedded object  (0xffffaa1d0dd9 WeakCell for 0x2a838029 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf5cc0  embedded object  (0xffffaa1228a9 <String[8]: finished>)
0x4cdf5cc4  code target (HANDLER)  (0x4cde5020)
0x4cdf5ccc  embedded object  (0xffffaa1228a9 <String[8]: finished>)
0x4cdf5cd8  code target (BUILTIN)  (0x4cd22420)
0x4cdf5ce0  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = decodeStrings
compiler = unknown
Instructions (size = 152)
0x4cdf5d80     0  sub csp, jssp, #0x8 (8)
0x4cdf5d84     4  str x3, [jssp, #-8]!
0x4cdf5d88     8  sub csp, jssp, #0x8 (8)
0x4cdf5d8c    12  str x4, [jssp, #-8]!
0x4cdf5d90    16  ldr x3, pc+88 (addr 0x000000004cdf5de8)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf5d94    20  ldur x3, [x3, #7]
0x4cdf5d98    24  cmp x3, #0x0 (0)
0x4cdf5d9c    28  b.ne #+0x30 (addr 0x4cdf5dcc)
0x4cdf5da0    32  tbz w0, #0, #+0x2c (addr 0x4cdf5dcc)
0x4cdf5da4    36  ldr x5, pc+76 (addr 0x000000004cdf5df0)    ;; object: 0xffffaa1d0df1 WeakCell for 0x2a838081 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf5da8    40  ldur x5, [x5, #7]
0x4cdf5dac    44  tbz w5, #0, #+0x20 (addr 0x4cdf5dcc)
0x4cdf5db0    48  ldursw x4, [x5, #15]
0x4cdf5db4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf5dcc)
0x4cdf5db8    56  ldr x4, [jssp], #8
0x4cdf5dbc    60  ldr x3, [jssp], #8
0x4cdf5dc0    64  ldr x2, pc+56 (addr 0x000000004cdf5df8)    ;; object: 0xffffaa1228e9 <String[13]: decodeStrings>
0x4cdf5dc4    68  ldr x16, pc+60 (addr 0x000000004cdf5e00)    ;; code: HANDLER, StoreTransitionStub, minor: 198665
0x4cdf5dc8    72  br x16
0x4cdf5dcc    76  ldr x2, pc+60 (addr 0x000000004cdf5e08)    ;; object: 0xffffaa1228e9 <String[13]: decodeStrings>
0x4cdf5dd0    80  ldr x4, [jssp], #8
0x4cdf5dd4    84  ldr x3, [jssp], #8
0x4cdf5dd8    88  ldr x16, pc+56 (addr 0x000000004cdf5e10)    ;; code: BUILTIN
0x4cdf5ddc    92  br x16
0x4cdf5de0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf5de4   100  d63f03e0       constant
0x4cdf5de8   104  aa1e8cb1       constant
0x4cdf5dec   108  0000ffff       constant
0x4cdf5df0   112  aa1d0df1       constant
0x4cdf5df4   116  0000ffff       constant
0x4cdf5df8   120  aa1228e9       constant
0x4cdf5dfc   124  0000ffff       constant
0x4cdf5e00   128  4cde53c0       constant
0x4cdf5e04   132  00000000       constant
0x4cdf5e08   136  aa1228e9       constant
0x4cdf5e0c   140  0000ffff       constant
0x4cdf5e10   144  4cd22420       constant
0x4cdf5e14   148  00000000       constant


RelocInfo (size = 12)
0x4cdf5d90  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf5da4  embedded object  (0xffffaa1d0df1 WeakCell for 0x2a838081 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf5dc0  embedded object  (0xffffaa1228e9 <String[13]: decodeStrings>)
0x4cdf5dc4  code target (HANDLER)  (0x4cde53c0)
0x4cdf5dcc  embedded object  (0xffffaa1228e9 <String[13]: decodeStrings>)
0x4cdf5dd8  code target (BUILTIN)  (0x4cd22420)
0x4cdf5de0  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = defaultEncoding
compiler = unknown
Instructions (size = 152)
0x4cdf5e80     0  sub csp, jssp, #0x8 (8)
0x4cdf5e84     4  str x3, [jssp, #-8]!
0x4cdf5e88     8  sub csp, jssp, #0x8 (8)
0x4cdf5e8c    12  str x4, [jssp, #-8]!
0x4cdf5e90    16  ldr x3, pc+88 (addr 0x000000004cdf5ee8)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf5e94    20  ldur x3, [x3, #7]
0x4cdf5e98    24  cmp x3, #0x0 (0)
0x4cdf5e9c    28  b.ne #+0x30 (addr 0x4cdf5ecc)
0x4cdf5ea0    32  tbz w0, #0, #+0x2c (addr 0x4cdf5ecc)
0x4cdf5ea4    36  ldr x5, pc+76 (addr 0x000000004cdf5ef0)    ;; object: 0xffffaa1d0e09 WeakCell for 0x2a8380d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf5ea8    40  ldur x5, [x5, #7]
0x4cdf5eac    44  tbz w5, #0, #+0x20 (addr 0x4cdf5ecc)
0x4cdf5eb0    48  ldursw x4, [x5, #15]
0x4cdf5eb4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf5ecc)
0x4cdf5eb8    56  ldr x4, [jssp], #8
0x4cdf5ebc    60  ldr x3, [jssp], #8
0x4cdf5ec0    64  ldr x2, pc+56 (addr 0x000000004cdf5ef8)    ;; object: 0xffffaa11da19 <String[15]: defaultEncoding>
0x4cdf5ec4    68  ldr x16, pc+60 (addr 0x000000004cdf5f00)    ;; code: HANDLER, StoreTransitionStub, minor: 198666
0x4cdf5ec8    72  br x16
0x4cdf5ecc    76  ldr x2, pc+60 (addr 0x000000004cdf5f08)    ;; object: 0xffffaa11da19 <String[15]: defaultEncoding>
0x4cdf5ed0    80  ldr x4, [jssp], #8
0x4cdf5ed4    84  ldr x3, [jssp], #8
0x4cdf5ed8    88  ldr x16, pc+56 (addr 0x000000004cdf5f10)    ;; code: BUILTIN
0x4cdf5edc    92  br x16
0x4cdf5ee0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf5ee4   100  d63f03e0       constant
0x4cdf5ee8   104  aa1e8cb1       constant
0x4cdf5eec   108  0000ffff       constant
0x4cdf5ef0   112  aa1d0e09       constant
0x4cdf5ef4   116  0000ffff       constant
0x4cdf5ef8   120  aa11da19       constant
0x4cdf5efc   124  0000ffff       constant
0x4cdf5f00   128  4cdf4c60       constant
0x4cdf5f04   132  00000000       constant
0x4cdf5f08   136  aa11da19       constant
0x4cdf5f0c   140  0000ffff       constant
0x4cdf5f10   144  4cd22420       constant
0x4cdf5f14   148  00000000       constant


RelocInfo (size = 12)
0x4cdf5e90  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf5ea4  embedded object  (0xffffaa1d0e09 WeakCell for 0x2a8380d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf5ec0  embedded object  (0xffffaa11da19 <String[15]: defaultEncoding>)
0x4cdf5ec4  code target (HANDLER)  (0x4cdf4c60)
0x4cdf5ecc  embedded object  (0xffffaa11da19 <String[15]: defaultEncoding>)
0x4cdf5ed8  code target (BUILTIN)  (0x4cd22420)
0x4cdf5ee0  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0x4cdf5f80     0  mov x6, x0
0x4cdf5f84     4  tbnz w6, #0, #+0x54 (addr 0x4cdf5fd8)
0x4cdf5f88     8  stur x6, [x1, #87]
0x4cdf5f8c    12  stur x5, [x1, #-1]
0x4cdf5f90    16  tbz w5, #0, #+0x34 (addr 0x4cdf5fc4)
0x4cdf5f94    20  sub x2, x1, #0x1 (1)
0x4cdf5f98    24  and x5, x5, #0xfffffffffff00000
0x4cdf5f9c    28  ldr x5, [x5, #8]
0x4cdf5fa0    32  tbz w5, #1, #+0x24 (addr 0x4cdf5fc4)
0x4cdf5fa4    36  and x5, x1, #0xfffffffffff00000
0x4cdf5fa8    40  ldr x5, [x5, #8]
0x4cdf5fac    44  tbz w5, #2, #+0x18 (addr 0x4cdf5fc4)
0x4cdf5fb0    48  sub csp, jssp, #0x8 (8)
0x4cdf5fb4    52  str lr, [jssp, #-8]!
0x4cdf5fb8    56  ldr x16, pc+24 (addr 0x000000004cdf5fd0)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf5fbc    60  blr x16
0x4cdf5fc0    64  ldr lr, [jssp], #8
0x4cdf5fc4    68  ret
0x4cdf5fc8    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf5fcc    76  d63f03e0       constant
0x4cdf5fd0    80  4cd38080       constant
0x4cdf5fd4    84  00000000       constant
0x4cdf5fd8    88  movz x16, #0x0
0x4cdf5fdc    92  sub csp, jssp, #0x10 (16)
0x4cdf5fe0    96  stp fp, lr, [jssp, #-16]!
0x4cdf5fe4   100  bl #+0x4 (addr 0x4cdf5fe8)
0x4cdf5fe8   104  movz x17, #0xa00000000
0x4cdf5fec   108  sub csp, jssp, #0x10 (16)
0x4cdf5ff0   112  stp x17, cp, [jssp, #-16]!
0x4cdf5ff4   116  add fp, jssp, #0x10 (16)
0x4cdf5ff8   120  ldr x17, pc+24 (addr 0x000000004cdf6010)    ;; lazy deoptimization bailout 0
0x4cdf5ffc   124  add x17, x17, x16
0x4cdf6000   128  br x17
0x4cdf6004   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf6008   136  d63f03e0       constant
0x4cdf600c   140  d503201f       constant
0x4cdf6010   144  4cb06000       constant
0x4cdf6014   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf5fb8  code target (STUB)  (0x4cd38080)
0x4cdf5fc8  constant pool (size 16)
0x4cdf5ff8  runtime entry
0x4cdf6004  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0x4cdf5f80     0  mov x6, x0
0x4cdf5f84     4  tbnz w6, #0, #+0x54 (addr 0x4cdf5fd8)
0x4cdf5f88     8  stur x6, [x1, #87]
0x4cdf5f8c    12  stur x5, [x1, #-1]
0x4cdf5f90    16  tbz w5, #0, #+0x34 (addr 0x4cdf5fc4)
0x4cdf5f94    20  sub x2, x1, #0x1 (1)
0x4cdf5f98    24  and x5, x5, #0xfffffffffff00000
0x4cdf5f9c    28  ldr x5, [x5, #8]
0x4cdf5fa0    32  tbz w5, #1, #+0x24 (addr 0x4cdf5fc4)
0x4cdf5fa4    36  and x5, x1, #0xfffffffffff00000
0x4cdf5fa8    40  ldr x5, [x5, #8]
0x4cdf5fac    44  tbz w5, #2, #+0x18 (addr 0x4cdf5fc4)
0x4cdf5fb0    48  sub csp, jssp, #0x8 (8)
0x4cdf5fb4    52  str lr, [jssp, #-8]!
0x4cdf5fb8    56  ldr x16, pc+24 (addr 0x000000004cdf5fd0)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf5fbc    60  blr x16
0x4cdf5fc0    64  ldr lr, [jssp], #8
0x4cdf5fc4    68  ret
0x4cdf5fc8    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf5fcc    76  d63f03e0       constant
0x4cdf5fd0    80  4cd38080       constant
0x4cdf5fd4    84  00000000       constant
0x4cdf5fd8    88  movz x16, #0x0
0x4cdf5fdc    92  sub csp, jssp, #0x10 (16)
0x4cdf5fe0    96  stp fp, lr, [jssp, #-16]!
0x4cdf5fe4   100  bl #+0x4 (addr 0x4cdf5fe8)
0x4cdf5fe8   104  movz x17, #0xa00000000
0x4cdf5fec   108  sub csp, jssp, #0x10 (16)
0x4cdf5ff0   112  stp x17, cp, [jssp, #-16]!
0x4cdf5ff4   116  add fp, jssp, #0x10 (16)
0x4cdf5ff8   120  ldr x17, pc+24 (addr 0x000000004cdf6010)    ;; lazy deoptimization bailout 0
0x4cdf5ffc   124  add x17, x17, x16
0x4cdf6000   128  br x17
0x4cdf6004   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf6008   136  d63f03e0       constant
0x4cdf600c   140  d503201f       constant
0x4cdf6010   144  4cb06000       constant
0x4cdf6014   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf5fb8  code target (STUB)  (0x4cd38080)
0x4cdf5fc8  constant pool (size 16)
0x4cdf5ff8  runtime entry
0x4cdf6004  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = length
compiler = unknown
Instructions (size = 152)
0x4cdf6080     0  sub csp, jssp, #0x8 (8)
0x4cdf6084     4  str x3, [jssp, #-8]!
0x4cdf6088     8  sub csp, jssp, #0x8 (8)
0x4cdf608c    12  str x4, [jssp, #-8]!
0x4cdf6090    16  ldr x3, pc+88 (addr 0x000000004cdf60e8)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf6094    20  ldur x3, [x3, #7]
0x4cdf6098    24  cmp x3, #0x0 (0)
0x4cdf609c    28  b.ne #+0x2c (addr 0x4cdf60c8)
0x4cdf60a0    32  ldr x5, pc+80 (addr 0x000000004cdf60f0)    ;; object: 0xffffaa1d0e21 WeakCell for 0x2a838131 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf60a4    36  ldur x5, [x5, #7]
0x4cdf60a8    40  tbz w5, #0, #+0x20 (addr 0x4cdf60c8)
0x4cdf60ac    44  ldursw x4, [x5, #15]
0x4cdf60b0    48  tbnz w4, #23, #+0x18 (addr 0x4cdf60c8)
0x4cdf60b4    52  ldr x4, [jssp], #8
0x4cdf60b8    56  ldr x3, [jssp], #8
0x4cdf60bc    60  ldr x2, pc+60 (addr 0x000000004cdf60f8)    ;; object: 0x21005141 <String[6]: length>
0x4cdf60c0    64  ldr x16, pc+64 (addr 0x000000004cdf6100)    ;; code: HANDLER, StoreTransitionStub, minor: 174091
0x4cdf60c4    68  br x16
0x4cdf60c8    72  ldr x2, pc+64 (addr 0x000000004cdf6108)    ;; object: 0x21005141 <String[6]: length>
0x4cdf60cc    76  ldr x4, [jssp], #8
0x4cdf60d0    80  ldr x3, [jssp], #8
0x4cdf60d4    84  ldr x16, pc+60 (addr 0x000000004cdf6110)    ;; code: BUILTIN
0x4cdf60d8    88  br x16
0x4cdf60dc    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdf60e0    96  d63f03e0       constant
0x4cdf60e4   100  d503201f       constant
0x4cdf60e8   104  aa1e8cb1       constant
0x4cdf60ec   108  0000ffff       constant
0x4cdf60f0   112  aa1d0e21       constant
0x4cdf60f4   116  0000ffff       constant
0x4cdf60f8   120  21005141       constant
0x4cdf60fc   124  00000000       constant
0x4cdf6100   128  4cdf5f80       constant
0x4cdf6104   132  00000000       constant
0x4cdf6108   136  21005141       constant
0x4cdf610c   140  00000000       constant
0x4cdf6110   144  4cd22420       constant
0x4cdf6114   148  00000000       constant


RelocInfo (size = 12)
0x4cdf6090  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf60a0  embedded object  (0xffffaa1d0e21 WeakCell for 0x2a838131 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf60bc  embedded object  (0x21005141 <String[6]: length>)
0x4cdf60c0  code target (HANDLER)  (0x4cdf5f80)
0x4cdf60c8  embedded object  (0x21005141 <String[6]: length>)
0x4cdf60d4  code target (BUILTIN)  (0x4cd22420)
0x4cdf60dc  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf6180     0  tbz w0, #0, #+0x90 (addr 0x4cdf6210)
0x4cdf6184     4  mov x2, x0
0x4cdf6188     8  stur x2, [x1, #95]
0x4cdf618c    12  add x3, x1, #0x5f (95)
0x4cdf6190    16  and x2, x2, #0xfffffffffff00000
0x4cdf6194    20  ldr x2, [x2, #8]
0x4cdf6198    24  tbz w2, #1, #+0x24 (addr 0x4cdf61bc)
0x4cdf619c    28  and x2, x1, #0xfffffffffff00000
0x4cdf61a0    32  ldr x2, [x2, #8]
0x4cdf61a4    36  tbz w2, #2, #+0x18 (addr 0x4cdf61bc)
0x4cdf61a8    40  sub csp, jssp, #0x8 (8)
0x4cdf61ac    44  str lr, [jssp, #-8]!
0x4cdf61b0    48  ldr x16, pc+80 (addr 0x000000004cdf6200)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf61b4    52  blr x16
0x4cdf61b8    56  ldr lr, [jssp], #8
0x4cdf61bc    60  stur x5, [x1, #-1]
0x4cdf61c0    64  tbz w5, #0, #+0x34 (addr 0x4cdf61f4)
0x4cdf61c4    68  sub x2, x1, #0x1 (1)
0x4cdf61c8    72  and x5, x5, #0xfffffffffff00000
0x4cdf61cc    76  ldr x5, [x5, #8]
0x4cdf61d0    80  tbz w5, #1, #+0x24 (addr 0x4cdf61f4)
0x4cdf61d4    84  and x5, x1, #0xfffffffffff00000
0x4cdf61d8    88  ldr x5, [x5, #8]
0x4cdf61dc    92  tbz w5, #2, #+0x18 (addr 0x4cdf61f4)
0x4cdf61e0    96  sub csp, jssp, #0x8 (8)
0x4cdf61e4   100  str lr, [jssp, #-8]!
0x4cdf61e8   104  ldr x16, pc+32 (addr 0x000000004cdf6208)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf61ec   108  blr x16
0x4cdf61f0   112  ldr lr, [jssp], #8
0x4cdf61f4   116  ret
0x4cdf61f8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf61fc   124  d63f03e0       constant
0x4cdf6200   128  4cd170c0       constant
0x4cdf6204   132  00000000       constant
0x4cdf6208   136  4cd38080       constant
0x4cdf620c   140  00000000       constant
0x4cdf6210   144  movz x16, #0x0
0x4cdf6214   148  sub csp, jssp, #0x10 (16)
0x4cdf6218   152  stp fp, lr, [jssp, #-16]!
0x4cdf621c   156  bl #+0x4 (addr 0x4cdf6220)
0x4cdf6220   160  movz x17, #0xa00000000
0x4cdf6224   164  sub csp, jssp, #0x10 (16)
0x4cdf6228   168  stp x17, cp, [jssp, #-16]!
0x4cdf622c   172  add fp, jssp, #0x10 (16)
0x4cdf6230   176  ldr x17, pc+24 (addr 0x000000004cdf6248)    ;; lazy deoptimization bailout 0
0x4cdf6234   180  add x17, x17, x16
0x4cdf6238   184  br x17
0x4cdf623c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf6240   192  d63f03e0       constant
0x4cdf6244   196  d503201f       constant
0x4cdf6248   200  4cb06000       constant
0x4cdf624c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf61b0  code target (STUB)  (0x4cd170c0)
0x4cdf61e8  code target (STUB)  (0x4cd38080)
0x4cdf61f8  constant pool (size 24)
0x4cdf6230  runtime entry
0x4cdf623c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf6180     0  tbz w0, #0, #+0x90 (addr 0x4cdf6210)
0x4cdf6184     4  mov x2, x0
0x4cdf6188     8  stur x2, [x1, #95]
0x4cdf618c    12  add x3, x1, #0x5f (95)
0x4cdf6190    16  and x2, x2, #0xfffffffffff00000
0x4cdf6194    20  ldr x2, [x2, #8]
0x4cdf6198    24  tbz w2, #1, #+0x24 (addr 0x4cdf61bc)
0x4cdf619c    28  and x2, x1, #0xfffffffffff00000
0x4cdf61a0    32  ldr x2, [x2, #8]
0x4cdf61a4    36  tbz w2, #2, #+0x18 (addr 0x4cdf61bc)
0x4cdf61a8    40  sub csp, jssp, #0x8 (8)
0x4cdf61ac    44  str lr, [jssp, #-8]!
0x4cdf61b0    48  ldr x16, pc+80 (addr 0x000000004cdf6200)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf61b4    52  blr x16
0x4cdf61b8    56  ldr lr, [jssp], #8
0x4cdf61bc    60  stur x5, [x1, #-1]
0x4cdf61c0    64  tbz w5, #0, #+0x34 (addr 0x4cdf61f4)
0x4cdf61c4    68  sub x2, x1, #0x1 (1)
0x4cdf61c8    72  and x5, x5, #0xfffffffffff00000
0x4cdf61cc    76  ldr x5, [x5, #8]
0x4cdf61d0    80  tbz w5, #1, #+0x24 (addr 0x4cdf61f4)
0x4cdf61d4    84  and x5, x1, #0xfffffffffff00000
0x4cdf61d8    88  ldr x5, [x5, #8]
0x4cdf61dc    92  tbz w5, #2, #+0x18 (addr 0x4cdf61f4)
0x4cdf61e0    96  sub csp, jssp, #0x8 (8)
0x4cdf61e4   100  str lr, [jssp, #-8]!
0x4cdf61e8   104  ldr x16, pc+32 (addr 0x000000004cdf6208)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf61ec   108  blr x16
0x4cdf61f0   112  ldr lr, [jssp], #8
0x4cdf61f4   116  ret
0x4cdf61f8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf61fc   124  d63f03e0       constant
0x4cdf6200   128  4cd170c0       constant
0x4cdf6204   132  00000000       constant
0x4cdf6208   136  4cd38080       constant
0x4cdf620c   140  00000000       constant
0x4cdf6210   144  movz x16, #0x0
0x4cdf6214   148  sub csp, jssp, #0x10 (16)
0x4cdf6218   152  stp fp, lr, [jssp, #-16]!
0x4cdf621c   156  bl #+0x4 (addr 0x4cdf6220)
0x4cdf6220   160  movz x17, #0xa00000000
0x4cdf6224   164  sub csp, jssp, #0x10 (16)
0x4cdf6228   168  stp x17, cp, [jssp, #-16]!
0x4cdf622c   172  add fp, jssp, #0x10 (16)
0x4cdf6230   176  ldr x17, pc+24 (addr 0x000000004cdf6248)    ;; lazy deoptimization bailout 0
0x4cdf6234   180  add x17, x17, x16
0x4cdf6238   184  br x17
0x4cdf623c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf6240   192  d63f03e0       constant
0x4cdf6244   196  d503201f       constant
0x4cdf6248   200  4cb06000       constant
0x4cdf624c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf61b0  code target (STUB)  (0x4cd170c0)
0x4cdf61e8  code target (STUB)  (0x4cd38080)
0x4cdf61f8  constant pool (size 24)
0x4cdf6230  runtime entry
0x4cdf623c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = writing
compiler = unknown
Instructions (size = 152)
0x4cdf62c0     0  sub csp, jssp, #0x8 (8)
0x4cdf62c4     4  str x3, [jssp, #-8]!
0x4cdf62c8     8  sub csp, jssp, #0x8 (8)
0x4cdf62cc    12  str x4, [jssp, #-8]!
0x4cdf62d0    16  ldr x3, pc+88 (addr 0x000000004cdf6328)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf62d4    20  ldur x3, [x3, #7]
0x4cdf62d8    24  cmp x3, #0x0 (0)
0x4cdf62dc    28  b.ne #+0x30 (addr 0x4cdf630c)
0x4cdf62e0    32  tbz w0, #0, #+0x2c (addr 0x4cdf630c)
0x4cdf62e4    36  ldr x5, pc+76 (addr 0x000000004cdf6330)    ;; object: 0xffffaa1d0e39 WeakCell for 0x2a838189 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf62e8    40  ldur x5, [x5, #7]
0x4cdf62ec    44  tbz w5, #0, #+0x20 (addr 0x4cdf630c)
0x4cdf62f0    48  ldursw x4, [x5, #15]
0x4cdf62f4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf630c)
0x4cdf62f8    56  ldr x4, [jssp], #8
0x4cdf62fc    60  ldr x3, [jssp], #8
0x4cdf6300    64  ldr x2, pc+56 (addr 0x000000004cdf6338)    ;; object: 0xffffaa122911 <String[7]: writing>
0x4cdf6304    68  ldr x16, pc+60 (addr 0x000000004cdf6340)    ;; code: HANDLER, StoreTransitionStub, minor: 198668
0x4cdf6308    72  br x16
0x4cdf630c    76  ldr x2, pc+60 (addr 0x000000004cdf6348)    ;; object: 0xffffaa122911 <String[7]: writing>
0x4cdf6310    80  ldr x4, [jssp], #8
0x4cdf6314    84  ldr x3, [jssp], #8
0x4cdf6318    88  ldr x16, pc+56 (addr 0x000000004cdf6350)    ;; code: BUILTIN
0x4cdf631c    92  br x16
0x4cdf6320    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf6324   100  d63f03e0       constant
0x4cdf6328   104  aa1e8cb1       constant
0x4cdf632c   108  0000ffff       constant
0x4cdf6330   112  aa1d0e39       constant
0x4cdf6334   116  0000ffff       constant
0x4cdf6338   120  aa122911       constant
0x4cdf633c   124  0000ffff       constant
0x4cdf6340   128  4cdf6180       constant
0x4cdf6344   132  00000000       constant
0x4cdf6348   136  aa122911       constant
0x4cdf634c   140  0000ffff       constant
0x4cdf6350   144  4cd22420       constant
0x4cdf6354   148  00000000       constant


RelocInfo (size = 12)
0x4cdf62d0  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf62e4  embedded object  (0xffffaa1d0e39 WeakCell for 0x2a838189 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf6300  embedded object  (0xffffaa122911 <String[7]: writing>)
0x4cdf6304  code target (HANDLER)  (0x4cdf6180)
0x4cdf630c  embedded object  (0xffffaa122911 <String[7]: writing>)
0x4cdf6318  code target (BUILTIN)  (0x4cd22420)
0x4cdf6320  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0x4cdf63c0     0  mov x6, x0
0x4cdf63c4     4  tbnz w6, #0, #+0x54 (addr 0x4cdf6418)
0x4cdf63c8     8  stur x6, [x1, #103]
0x4cdf63cc    12  stur x5, [x1, #-1]
0x4cdf63d0    16  tbz w5, #0, #+0x34 (addr 0x4cdf6404)
0x4cdf63d4    20  sub x2, x1, #0x1 (1)
0x4cdf63d8    24  and x5, x5, #0xfffffffffff00000
0x4cdf63dc    28  ldr x5, [x5, #8]
0x4cdf63e0    32  tbz w5, #1, #+0x24 (addr 0x4cdf6404)
0x4cdf63e4    36  and x5, x1, #0xfffffffffff00000
0x4cdf63e8    40  ldr x5, [x5, #8]
0x4cdf63ec    44  tbz w5, #2, #+0x18 (addr 0x4cdf6404)
0x4cdf63f0    48  sub csp, jssp, #0x8 (8)
0x4cdf63f4    52  str lr, [jssp, #-8]!
0x4cdf63f8    56  ldr x16, pc+24 (addr 0x000000004cdf6410)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf63fc    60  blr x16
0x4cdf6400    64  ldr lr, [jssp], #8
0x4cdf6404    68  ret
0x4cdf6408    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf640c    76  d63f03e0       constant
0x4cdf6410    80  4cd38080       constant
0x4cdf6414    84  00000000       constant
0x4cdf6418    88  movz x16, #0x0
0x4cdf641c    92  sub csp, jssp, #0x10 (16)
0x4cdf6420    96  stp fp, lr, [jssp, #-16]!
0x4cdf6424   100  bl #+0x4 (addr 0x4cdf6428)
0x4cdf6428   104  movz x17, #0xa00000000
0x4cdf642c   108  sub csp, jssp, #0x10 (16)
0x4cdf6430   112  stp x17, cp, [jssp, #-16]!
0x4cdf6434   116  add fp, jssp, #0x10 (16)
0x4cdf6438   120  ldr x17, pc+24 (addr 0x000000004cdf6450)    ;; lazy deoptimization bailout 0
0x4cdf643c   124  add x17, x17, x16
0x4cdf6440   128  br x17
0x4cdf6444   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf6448   136  d63f03e0       constant
0x4cdf644c   140  d503201f       constant
0x4cdf6450   144  4cb06000       constant
0x4cdf6454   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf63f8  code target (STUB)  (0x4cd38080)
0x4cdf6408  constant pool (size 16)
0x4cdf6438  runtime entry
0x4cdf6444  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0x4cdf63c0     0  mov x6, x0
0x4cdf63c4     4  tbnz w6, #0, #+0x54 (addr 0x4cdf6418)
0x4cdf63c8     8  stur x6, [x1, #103]
0x4cdf63cc    12  stur x5, [x1, #-1]
0x4cdf63d0    16  tbz w5, #0, #+0x34 (addr 0x4cdf6404)
0x4cdf63d4    20  sub x2, x1, #0x1 (1)
0x4cdf63d8    24  and x5, x5, #0xfffffffffff00000
0x4cdf63dc    28  ldr x5, [x5, #8]
0x4cdf63e0    32  tbz w5, #1, #+0x24 (addr 0x4cdf6404)
0x4cdf63e4    36  and x5, x1, #0xfffffffffff00000
0x4cdf63e8    40  ldr x5, [x5, #8]
0x4cdf63ec    44  tbz w5, #2, #+0x18 (addr 0x4cdf6404)
0x4cdf63f0    48  sub csp, jssp, #0x8 (8)
0x4cdf63f4    52  str lr, [jssp, #-8]!
0x4cdf63f8    56  ldr x16, pc+24 (addr 0x000000004cdf6410)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf63fc    60  blr x16
0x4cdf6400    64  ldr lr, [jssp], #8
0x4cdf6404    68  ret
0x4cdf6408    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf640c    76  d63f03e0       constant
0x4cdf6410    80  4cd38080       constant
0x4cdf6414    84  00000000       constant
0x4cdf6418    88  movz x16, #0x0
0x4cdf641c    92  sub csp, jssp, #0x10 (16)
0x4cdf6420    96  stp fp, lr, [jssp, #-16]!
0x4cdf6424   100  bl #+0x4 (addr 0x4cdf6428)
0x4cdf6428   104  movz x17, #0xa00000000
0x4cdf642c   108  sub csp, jssp, #0x10 (16)
0x4cdf6430   112  stp x17, cp, [jssp, #-16]!
0x4cdf6434   116  add fp, jssp, #0x10 (16)
0x4cdf6438   120  ldr x17, pc+24 (addr 0x000000004cdf6450)    ;; lazy deoptimization bailout 0
0x4cdf643c   124  add x17, x17, x16
0x4cdf6440   128  br x17
0x4cdf6444   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf6448   136  d63f03e0       constant
0x4cdf644c   140  d503201f       constant
0x4cdf6450   144  4cb06000       constant
0x4cdf6454   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf63f8  code target (STUB)  (0x4cd38080)
0x4cdf6408  constant pool (size 16)
0x4cdf6438  runtime entry
0x4cdf6444  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = corked
compiler = unknown
Instructions (size = 152)
0x4cdf64c0     0  sub csp, jssp, #0x8 (8)
0x4cdf64c4     4  str x3, [jssp, #-8]!
0x4cdf64c8     8  sub csp, jssp, #0x8 (8)
0x4cdf64cc    12  str x4, [jssp, #-8]!
0x4cdf64d0    16  ldr x3, pc+88 (addr 0x000000004cdf6528)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf64d4    20  ldur x3, [x3, #7]
0x4cdf64d8    24  cmp x3, #0x0 (0)
0x4cdf64dc    28  b.ne #+0x2c (addr 0x4cdf6508)
0x4cdf64e0    32  ldr x5, pc+80 (addr 0x000000004cdf6530)    ;; object: 0xffffaa1d0e51 WeakCell for 0x2a8381e1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf64e4    36  ldur x5, [x5, #7]
0x4cdf64e8    40  tbz w5, #0, #+0x20 (addr 0x4cdf6508)
0x4cdf64ec    44  ldursw x4, [x5, #15]
0x4cdf64f0    48  tbnz w4, #23, #+0x18 (addr 0x4cdf6508)
0x4cdf64f4    52  ldr x4, [jssp], #8
0x4cdf64f8    56  ldr x3, [jssp], #8
0x4cdf64fc    60  ldr x2, pc+60 (addr 0x000000004cdf6538)    ;; object: 0xffffaa122931 <String[6]: corked>
0x4cdf6500    64  ldr x16, pc+64 (addr 0x000000004cdf6540)    ;; code: HANDLER, StoreTransitionStub, minor: 174093
0x4cdf6504    68  br x16
0x4cdf6508    72  ldr x2, pc+64 (addr 0x000000004cdf6548)    ;; object: 0xffffaa122931 <String[6]: corked>
0x4cdf650c    76  ldr x4, [jssp], #8
0x4cdf6510    80  ldr x3, [jssp], #8
0x4cdf6514    84  ldr x16, pc+60 (addr 0x000000004cdf6550)    ;; code: BUILTIN
0x4cdf6518    88  br x16
0x4cdf651c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdf6520    96  d63f03e0       constant
0x4cdf6524   100  d503201f       constant
0x4cdf6528   104  aa1e8cb1       constant
0x4cdf652c   108  0000ffff       constant
0x4cdf6530   112  aa1d0e51       constant
0x4cdf6534   116  0000ffff       constant
0x4cdf6538   120  aa122931       constant
0x4cdf653c   124  0000ffff       constant
0x4cdf6540   128  4cdf63c0       constant
0x4cdf6544   132  00000000       constant
0x4cdf6548   136  aa122931       constant
0x4cdf654c   140  0000ffff       constant
0x4cdf6550   144  4cd22420       constant
0x4cdf6554   148  00000000       constant


RelocInfo (size = 12)
0x4cdf64d0  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf64e0  embedded object  (0xffffaa1d0e51 WeakCell for 0x2a8381e1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf64fc  embedded object  (0xffffaa122931 <String[6]: corked>)
0x4cdf6500  code target (HANDLER)  (0x4cdf63c0)
0x4cdf6508  embedded object  (0xffffaa122931 <String[6]: corked>)
0x4cdf6514  code target (BUILTIN)  (0x4cd22420)
0x4cdf651c  constant pool (size 60)

kind = HANDLER
major_key = <NoCache>Stub
name = sync
compiler = unknown
Instructions (size = 152)
0x4cdf65c0     0  sub csp, jssp, #0x8 (8)
0x4cdf65c4     4  str x3, [jssp, #-8]!
0x4cdf65c8     8  sub csp, jssp, #0x8 (8)
0x4cdf65cc    12  str x4, [jssp, #-8]!
0x4cdf65d0    16  ldr x3, pc+88 (addr 0x000000004cdf6628)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf65d4    20  ldur x3, [x3, #7]
0x4cdf65d8    24  cmp x3, #0x0 (0)
0x4cdf65dc    28  b.ne #+0x30 (addr 0x4cdf660c)
0x4cdf65e0    32  tbz w0, #0, #+0x2c (addr 0x4cdf660c)
0x4cdf65e4    36  ldr x5, pc+76 (addr 0x000000004cdf6630)    ;; object: 0xffffaa1d0e69 WeakCell for 0x2a838239 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf65e8    40  ldur x5, [x5, #7]
0x4cdf65ec    44  tbz w5, #0, #+0x20 (addr 0x4cdf660c)
0x4cdf65f0    48  ldursw x4, [x5, #15]
0x4cdf65f4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf660c)
0x4cdf65f8    56  ldr x4, [jssp], #8
0x4cdf65fc    60  ldr x3, [jssp], #8
0x4cdf6600    64  ldr x2, pc+56 (addr 0x000000004cdf6638)    ;; object: 0xffffaa11d951 <String[4]: sync>
0x4cdf6604    68  ldr x16, pc+60 (addr 0x000000004cdf6640)    ;; code: HANDLER, StoreTransitionStub, minor: 198670
0x4cdf6608    72  br x16
0x4cdf660c    76  ldr x2, pc+60 (addr 0x000000004cdf6648)    ;; object: 0xffffaa11d951 <String[4]: sync>
0x4cdf6610    80  ldr x4, [jssp], #8
0x4cdf6614    84  ldr x3, [jssp], #8
0x4cdf6618    88  ldr x16, pc+56 (addr 0x000000004cdf6650)    ;; code: BUILTIN
0x4cdf661c    92  br x16
0x4cdf6620    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf6624   100  d63f03e0       constant
0x4cdf6628   104  aa1e8cb1       constant
0x4cdf662c   108  0000ffff       constant
0x4cdf6630   112  aa1d0e69       constant
0x4cdf6634   116  0000ffff       constant
0x4cdf6638   120  aa11d951       constant
0x4cdf663c   124  0000ffff       constant
0x4cdf6640   128  4cdd3e20       constant
0x4cdf6644   132  00000000       constant
0x4cdf6648   136  aa11d951       constant
0x4cdf664c   140  0000ffff       constant
0x4cdf6650   144  4cd22420       constant
0x4cdf6654   148  00000000       constant


RelocInfo (size = 12)
0x4cdf65d0  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf65e4  embedded object  (0xffffaa1d0e69 WeakCell for 0x2a838239 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf6600  embedded object  (0xffffaa11d951 <String[4]: sync>)
0x4cdf6604  code target (HANDLER)  (0x4cdd3e20)
0x4cdf660c  embedded object  (0xffffaa11d951 <String[4]: sync>)
0x4cdf6618  code target (BUILTIN)  (0x4cd22420)
0x4cdf6620  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = bufferProcessing
compiler = unknown
Instructions (size = 152)
0x4cdf66c0     0  sub csp, jssp, #0x8 (8)
0x4cdf66c4     4  str x3, [jssp, #-8]!
0x4cdf66c8     8  sub csp, jssp, #0x8 (8)
0x4cdf66cc    12  str x4, [jssp, #-8]!
0x4cdf66d0    16  ldr x3, pc+88 (addr 0x000000004cdf6728)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf66d4    20  ldur x3, [x3, #7]
0x4cdf66d8    24  cmp x3, #0x0 (0)
0x4cdf66dc    28  b.ne #+0x30 (addr 0x4cdf670c)
0x4cdf66e0    32  tbz w0, #0, #+0x2c (addr 0x4cdf670c)
0x4cdf66e4    36  ldr x5, pc+76 (addr 0x000000004cdf6730)    ;; object: 0xffffaa1d0e81 WeakCell for 0x2a838291 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf66e8    40  ldur x5, [x5, #7]
0x4cdf66ec    44  tbz w5, #0, #+0x20 (addr 0x4cdf670c)
0x4cdf66f0    48  ldursw x4, [x5, #15]
0x4cdf66f4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf670c)
0x4cdf66f8    56  ldr x4, [jssp], #8
0x4cdf66fc    60  ldr x3, [jssp], #8
0x4cdf6700    64  ldr x2, pc+56 (addr 0x000000004cdf6738)    ;; object: 0xffffaa122951 <String[16]: bufferProcessing>
0x4cdf6704    68  ldr x16, pc+60 (addr 0x000000004cdf6740)    ;; code: HANDLER, StoreTransitionStub, minor: 198671
0x4cdf6708    72  br x16
0x4cdf670c    76  ldr x2, pc+60 (addr 0x000000004cdf6748)    ;; object: 0xffffaa122951 <String[16]: bufferProcessing>
0x4cdf6710    80  ldr x4, [jssp], #8
0x4cdf6714    84  ldr x3, [jssp], #8
0x4cdf6718    88  ldr x16, pc+56 (addr 0x000000004cdf6750)    ;; code: BUILTIN
0x4cdf671c    92  br x16
0x4cdf6720    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf6724   100  d63f03e0       constant
0x4cdf6728   104  aa1e8cb1       constant
0x4cdf672c   108  0000ffff       constant
0x4cdf6730   112  aa1d0e81       constant
0x4cdf6734   116  0000ffff       constant
0x4cdf6738   120  aa122951       constant
0x4cdf673c   124  0000ffff       constant
0x4cdf6740   128  4cdd4080       constant
0x4cdf6744   132  00000000       constant
0x4cdf6748   136  aa122951       constant
0x4cdf674c   140  0000ffff       constant
0x4cdf6750   144  4cd22420       constant
0x4cdf6754   148  00000000       constant


RelocInfo (size = 12)
0x4cdf66d0  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf66e4  embedded object  (0xffffaa1d0e81 WeakCell for 0x2a838291 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf6700  embedded object  (0xffffaa122951 <String[16]: bufferProcessing>)
0x4cdf6704  code target (HANDLER)  (0x4cdd4080)
0x4cdf670c  embedded object  (0xffffaa122951 <String[16]: bufferProcessing>)
0x4cdf6718  code target (BUILTIN)  (0x4cd22420)
0x4cdf6720  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = onwrite
compiler = unknown
Instructions (size = 152)
0x4cdf67c0     0  sub csp, jssp, #0x8 (8)
0x4cdf67c4     4  str x3, [jssp, #-8]!
0x4cdf67c8     8  sub csp, jssp, #0x8 (8)
0x4cdf67cc    12  str x4, [jssp, #-8]!
0x4cdf67d0    16  ldr x3, pc+88 (addr 0x000000004cdf6828)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf67d4    20  ldur x3, [x3, #7]
0x4cdf67d8    24  cmp x3, #0x0 (0)
0x4cdf67dc    28  b.ne #+0x30 (addr 0x4cdf680c)
0x4cdf67e0    32  tbz w0, #0, #+0x2c (addr 0x4cdf680c)
0x4cdf67e4    36  ldr x5, pc+76 (addr 0x000000004cdf6830)    ;; object: 0xffffaa1e9221 WeakCell for 0x2a840429 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf67e8    40  ldur x5, [x5, #7]
0x4cdf67ec    44  tbz w5, #0, #+0x20 (addr 0x4cdf680c)
0x4cdf67f0    48  ldursw x4, [x5, #15]
0x4cdf67f4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf680c)
0x4cdf67f8    56  ldr x4, [jssp], #8
0x4cdf67fc    60  ldr x3, [jssp], #8
0x4cdf6800    64  ldr x2, pc+56 (addr 0x000000004cdf6838)    ;; object: 0x210b2dc1 <String[7]: onwrite>
0x4cdf6804    68  ldr x16, pc+60 (addr 0x000000004cdf6840)    ;; code: HANDLER, StoreTransitionStub, minor: 198672
0x4cdf6808    72  br x16
0x4cdf680c    76  ldr x2, pc+60 (addr 0x000000004cdf6848)    ;; object: 0x210b2dc1 <String[7]: onwrite>
0x4cdf6810    80  ldr x4, [jssp], #8
0x4cdf6814    84  ldr x3, [jssp], #8
0x4cdf6818    88  ldr x16, pc+56 (addr 0x000000004cdf6850)    ;; code: BUILTIN
0x4cdf681c    92  br x16
0x4cdf6820    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf6824   100  d63f03e0       constant
0x4cdf6828   104  aa1e8cb1       constant
0x4cdf682c   108  0000ffff       constant
0x4cdf6830   112  aa1e9221       constant
0x4cdf6834   116  0000ffff       constant
0x4cdf6838   120  210b2dc1       constant
0x4cdf683c   124  00000000       constant
0x4cdf6840   128  4cdd42e0       constant
0x4cdf6844   132  00000000       constant
0x4cdf6848   136  210b2dc1       constant
0x4cdf684c   140  00000000       constant
0x4cdf6850   144  4cd22420       constant
0x4cdf6854   148  00000000       constant


RelocInfo (size = 12)
0x4cdf67d0  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf67e4  embedded object  (0xffffaa1e9221 WeakCell for 0x2a840429 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf6800  embedded object  (0x210b2dc1 <String[7]: onwrite>)
0x4cdf6804  code target (HANDLER)  (0x4cdd42e0)
0x4cdf680c  embedded object  (0x210b2dc1 <String[7]: onwrite>)
0x4cdf6818  code target (BUILTIN)  (0x4cd22420)
0x4cdf6820  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf68c0     0  tbz w0, #0, #+0x90 (addr 0x4cdf6950)
0x4cdf68c4     4  mov x2, x0
0x4cdf68c8     8  stur x2, [x1, #135]
0x4cdf68cc    12  add x3, x1, #0x87 (135)
0x4cdf68d0    16  and x2, x2, #0xfffffffffff00000
0x4cdf68d4    20  ldr x2, [x2, #8]
0x4cdf68d8    24  tbz w2, #1, #+0x24 (addr 0x4cdf68fc)
0x4cdf68dc    28  and x2, x1, #0xfffffffffff00000
0x4cdf68e0    32  ldr x2, [x2, #8]
0x4cdf68e4    36  tbz w2, #2, #+0x18 (addr 0x4cdf68fc)
0x4cdf68e8    40  sub csp, jssp, #0x8 (8)
0x4cdf68ec    44  str lr, [jssp, #-8]!
0x4cdf68f0    48  ldr x16, pc+80 (addr 0x000000004cdf6940)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf68f4    52  blr x16
0x4cdf68f8    56  ldr lr, [jssp], #8
0x4cdf68fc    60  stur x5, [x1, #-1]
0x4cdf6900    64  tbz w5, #0, #+0x34 (addr 0x4cdf6934)
0x4cdf6904    68  sub x2, x1, #0x1 (1)
0x4cdf6908    72  and x5, x5, #0xfffffffffff00000
0x4cdf690c    76  ldr x5, [x5, #8]
0x4cdf6910    80  tbz w5, #1, #+0x24 (addr 0x4cdf6934)
0x4cdf6914    84  and x5, x1, #0xfffffffffff00000
0x4cdf6918    88  ldr x5, [x5, #8]
0x4cdf691c    92  tbz w5, #2, #+0x18 (addr 0x4cdf6934)
0x4cdf6920    96  sub csp, jssp, #0x8 (8)
0x4cdf6924   100  str lr, [jssp, #-8]!
0x4cdf6928   104  ldr x16, pc+32 (addr 0x000000004cdf6948)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf692c   108  blr x16
0x4cdf6930   112  ldr lr, [jssp], #8
0x4cdf6934   116  ret
0x4cdf6938   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf693c   124  d63f03e0       constant
0x4cdf6940   128  4cd170c0       constant
0x4cdf6944   132  00000000       constant
0x4cdf6948   136  4cd38080       constant
0x4cdf694c   140  00000000       constant
0x4cdf6950   144  movz x16, #0x0
0x4cdf6954   148  sub csp, jssp, #0x10 (16)
0x4cdf6958   152  stp fp, lr, [jssp, #-16]!
0x4cdf695c   156  bl #+0x4 (addr 0x4cdf6960)
0x4cdf6960   160  movz x17, #0xa00000000
0x4cdf6964   164  sub csp, jssp, #0x10 (16)
0x4cdf6968   168  stp x17, cp, [jssp, #-16]!
0x4cdf696c   172  add fp, jssp, #0x10 (16)
0x4cdf6970   176  ldr x17, pc+24 (addr 0x000000004cdf6988)    ;; lazy deoptimization bailout 0
0x4cdf6974   180  add x17, x17, x16
0x4cdf6978   184  br x17
0x4cdf697c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf6980   192  d63f03e0       constant
0x4cdf6984   196  d503201f       constant
0x4cdf6988   200  4cb06000       constant
0x4cdf698c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf68f0  code target (STUB)  (0x4cd170c0)
0x4cdf6928  code target (STUB)  (0x4cd38080)
0x4cdf6938  constant pool (size 24)
0x4cdf6970  runtime entry
0x4cdf697c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf68c0     0  tbz w0, #0, #+0x90 (addr 0x4cdf6950)
0x4cdf68c4     4  mov x2, x0
0x4cdf68c8     8  stur x2, [x1, #135]
0x4cdf68cc    12  add x3, x1, #0x87 (135)
0x4cdf68d0    16  and x2, x2, #0xfffffffffff00000
0x4cdf68d4    20  ldr x2, [x2, #8]
0x4cdf68d8    24  tbz w2, #1, #+0x24 (addr 0x4cdf68fc)
0x4cdf68dc    28  and x2, x1, #0xfffffffffff00000
0x4cdf68e0    32  ldr x2, [x2, #8]
0x4cdf68e4    36  tbz w2, #2, #+0x18 (addr 0x4cdf68fc)
0x4cdf68e8    40  sub csp, jssp, #0x8 (8)
0x4cdf68ec    44  str lr, [jssp, #-8]!
0x4cdf68f0    48  ldr x16, pc+80 (addr 0x000000004cdf6940)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf68f4    52  blr x16
0x4cdf68f8    56  ldr lr, [jssp], #8
0x4cdf68fc    60  stur x5, [x1, #-1]
0x4cdf6900    64  tbz w5, #0, #+0x34 (addr 0x4cdf6934)
0x4cdf6904    68  sub x2, x1, #0x1 (1)
0x4cdf6908    72  and x5, x5, #0xfffffffffff00000
0x4cdf690c    76  ldr x5, [x5, #8]
0x4cdf6910    80  tbz w5, #1, #+0x24 (addr 0x4cdf6934)
0x4cdf6914    84  and x5, x1, #0xfffffffffff00000
0x4cdf6918    88  ldr x5, [x5, #8]
0x4cdf691c    92  tbz w5, #2, #+0x18 (addr 0x4cdf6934)
0x4cdf6920    96  sub csp, jssp, #0x8 (8)
0x4cdf6924   100  str lr, [jssp, #-8]!
0x4cdf6928   104  ldr x16, pc+32 (addr 0x000000004cdf6948)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf692c   108  blr x16
0x4cdf6930   112  ldr lr, [jssp], #8
0x4cdf6934   116  ret
0x4cdf6938   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf693c   124  d63f03e0       constant
0x4cdf6940   128  4cd170c0       constant
0x4cdf6944   132  00000000       constant
0x4cdf6948   136  4cd38080       constant
0x4cdf694c   140  00000000       constant
0x4cdf6950   144  movz x16, #0x0
0x4cdf6954   148  sub csp, jssp, #0x10 (16)
0x4cdf6958   152  stp fp, lr, [jssp, #-16]!
0x4cdf695c   156  bl #+0x4 (addr 0x4cdf6960)
0x4cdf6960   160  movz x17, #0xa00000000
0x4cdf6964   164  sub csp, jssp, #0x10 (16)
0x4cdf6968   168  stp x17, cp, [jssp, #-16]!
0x4cdf696c   172  add fp, jssp, #0x10 (16)
0x4cdf6970   176  ldr x17, pc+24 (addr 0x000000004cdf6988)    ;; lazy deoptimization bailout 0
0x4cdf6974   180  add x17, x17, x16
0x4cdf6978   184  br x17
0x4cdf697c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf6980   192  d63f03e0       constant
0x4cdf6984   196  d503201f       constant
0x4cdf6988   200  4cb06000       constant
0x4cdf698c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf68f0  code target (STUB)  (0x4cd170c0)
0x4cdf6928  code target (STUB)  (0x4cd38080)
0x4cdf6938  constant pool (size 24)
0x4cdf6970  runtime entry
0x4cdf697c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = writecb
compiler = unknown
Instructions (size = 152)
0x4cdf6a00     0  sub csp, jssp, #0x8 (8)
0x4cdf6a04     4  str x3, [jssp, #-8]!
0x4cdf6a08     8  sub csp, jssp, #0x8 (8)
0x4cdf6a0c    12  str x4, [jssp, #-8]!
0x4cdf6a10    16  ldr x3, pc+88 (addr 0x000000004cdf6a68)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf6a14    20  ldur x3, [x3, #7]
0x4cdf6a18    24  cmp x3, #0x0 (0)
0x4cdf6a1c    28  b.ne #+0x30 (addr 0x4cdf6a4c)
0x4cdf6a20    32  tbz w0, #0, #+0x2c (addr 0x4cdf6a4c)
0x4cdf6a24    36  ldr x5, pc+76 (addr 0x000000004cdf6a70)    ;; object: 0xffffaa1e9259 WeakCell for 0x2a840481 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf6a28    40  ldur x5, [x5, #7]
0x4cdf6a2c    44  tbz w5, #0, #+0x20 (addr 0x4cdf6a4c)
0x4cdf6a30    48  ldursw x4, [x5, #15]
0x4cdf6a34    52  tbnz w4, #23, #+0x18 (addr 0x4cdf6a4c)
0x4cdf6a38    56  ldr x4, [jssp], #8
0x4cdf6a3c    60  ldr x3, [jssp], #8
0x4cdf6a40    64  ldr x2, pc+56 (addr 0x000000004cdf6a78)    ;; object: 0xffffaa122979 <String[7]: writecb>
0x4cdf6a44    68  ldr x16, pc+60 (addr 0x000000004cdf6a80)    ;; code: HANDLER, StoreTransitionStub, minor: 198673
0x4cdf6a48    72  br x16
0x4cdf6a4c    76  ldr x2, pc+60 (addr 0x000000004cdf6a88)    ;; object: 0xffffaa122979 <String[7]: writecb>
0x4cdf6a50    80  ldr x4, [jssp], #8
0x4cdf6a54    84  ldr x3, [jssp], #8
0x4cdf6a58    88  ldr x16, pc+56 (addr 0x000000004cdf6a90)    ;; code: BUILTIN
0x4cdf6a5c    92  br x16
0x4cdf6a60    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf6a64   100  d63f03e0       constant
0x4cdf6a68   104  aa1e8cb1       constant
0x4cdf6a6c   108  0000ffff       constant
0x4cdf6a70   112  aa1e9259       constant
0x4cdf6a74   116  0000ffff       constant
0x4cdf6a78   120  aa122979       constant
0x4cdf6a7c   124  0000ffff       constant
0x4cdf6a80   128  4cdf68c0       constant
0x4cdf6a84   132  00000000       constant
0x4cdf6a88   136  aa122979       constant
0x4cdf6a8c   140  0000ffff       constant
0x4cdf6a90   144  4cd22420       constant
0x4cdf6a94   148  00000000       constant


RelocInfo (size = 12)
0x4cdf6a10  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf6a24  embedded object  (0xffffaa1e9259 WeakCell for 0x2a840481 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf6a40  embedded object  (0xffffaa122979 <String[7]: writecb>)
0x4cdf6a44  code target (HANDLER)  (0x4cdf68c0)
0x4cdf6a4c  embedded object  (0xffffaa122979 <String[7]: writecb>)
0x4cdf6a58  code target (BUILTIN)  (0x4cd22420)
0x4cdf6a60  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0x4cdf6b00     0  mov x6, x0
0x4cdf6b04     4  tbnz w6, #0, #+0x54 (addr 0x4cdf6b58)
0x4cdf6b08     8  stur x6, [x1, #143]
0x4cdf6b0c    12  stur x5, [x1, #-1]
0x4cdf6b10    16  tbz w5, #0, #+0x34 (addr 0x4cdf6b44)
0x4cdf6b14    20  sub x2, x1, #0x1 (1)
0x4cdf6b18    24  and x5, x5, #0xfffffffffff00000
0x4cdf6b1c    28  ldr x5, [x5, #8]
0x4cdf6b20    32  tbz w5, #1, #+0x24 (addr 0x4cdf6b44)
0x4cdf6b24    36  and x5, x1, #0xfffffffffff00000
0x4cdf6b28    40  ldr x5, [x5, #8]
0x4cdf6b2c    44  tbz w5, #2, #+0x18 (addr 0x4cdf6b44)
0x4cdf6b30    48  sub csp, jssp, #0x8 (8)
0x4cdf6b34    52  str lr, [jssp, #-8]!
0x4cdf6b38    56  ldr x16, pc+24 (addr 0x000000004cdf6b50)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf6b3c    60  blr x16
0x4cdf6b40    64  ldr lr, [jssp], #8
0x4cdf6b44    68  ret
0x4cdf6b48    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf6b4c    76  d63f03e0       constant
0x4cdf6b50    80  4cd38080       constant
0x4cdf6b54    84  00000000       constant
0x4cdf6b58    88  movz x16, #0x0
0x4cdf6b5c    92  sub csp, jssp, #0x10 (16)
0x4cdf6b60    96  stp fp, lr, [jssp, #-16]!
0x4cdf6b64   100  bl #+0x4 (addr 0x4cdf6b68)
0x4cdf6b68   104  movz x17, #0xa00000000
0x4cdf6b6c   108  sub csp, jssp, #0x10 (16)
0x4cdf6b70   112  stp x17, cp, [jssp, #-16]!
0x4cdf6b74   116  add fp, jssp, #0x10 (16)
0x4cdf6b78   120  ldr x17, pc+24 (addr 0x000000004cdf6b90)    ;; lazy deoptimization bailout 0
0x4cdf6b7c   124  add x17, x17, x16
0x4cdf6b80   128  br x17
0x4cdf6b84   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf6b88   136  d63f03e0       constant
0x4cdf6b8c   140  d503201f       constant
0x4cdf6b90   144  4cb06000       constant
0x4cdf6b94   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf6b38  code target (STUB)  (0x4cd38080)
0x4cdf6b48  constant pool (size 16)
0x4cdf6b78  runtime entry
0x4cdf6b84  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0x4cdf6b00     0  mov x6, x0
0x4cdf6b04     4  tbnz w6, #0, #+0x54 (addr 0x4cdf6b58)
0x4cdf6b08     8  stur x6, [x1, #143]
0x4cdf6b0c    12  stur x5, [x1, #-1]
0x4cdf6b10    16  tbz w5, #0, #+0x34 (addr 0x4cdf6b44)
0x4cdf6b14    20  sub x2, x1, #0x1 (1)
0x4cdf6b18    24  and x5, x5, #0xfffffffffff00000
0x4cdf6b1c    28  ldr x5, [x5, #8]
0x4cdf6b20    32  tbz w5, #1, #+0x24 (addr 0x4cdf6b44)
0x4cdf6b24    36  and x5, x1, #0xfffffffffff00000
0x4cdf6b28    40  ldr x5, [x5, #8]
0x4cdf6b2c    44  tbz w5, #2, #+0x18 (addr 0x4cdf6b44)
0x4cdf6b30    48  sub csp, jssp, #0x8 (8)
0x4cdf6b34    52  str lr, [jssp, #-8]!
0x4cdf6b38    56  ldr x16, pc+24 (addr 0x000000004cdf6b50)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf6b3c    60  blr x16
0x4cdf6b40    64  ldr lr, [jssp], #8
0x4cdf6b44    68  ret
0x4cdf6b48    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf6b4c    76  d63f03e0       constant
0x4cdf6b50    80  4cd38080       constant
0x4cdf6b54    84  00000000       constant
0x4cdf6b58    88  movz x16, #0x0
0x4cdf6b5c    92  sub csp, jssp, #0x10 (16)
0x4cdf6b60    96  stp fp, lr, [jssp, #-16]!
0x4cdf6b64   100  bl #+0x4 (addr 0x4cdf6b68)
0x4cdf6b68   104  movz x17, #0xa00000000
0x4cdf6b6c   108  sub csp, jssp, #0x10 (16)
0x4cdf6b70   112  stp x17, cp, [jssp, #-16]!
0x4cdf6b74   116  add fp, jssp, #0x10 (16)
0x4cdf6b78   120  ldr x17, pc+24 (addr 0x000000004cdf6b90)    ;; lazy deoptimization bailout 0
0x4cdf6b7c   124  add x17, x17, x16
0x4cdf6b80   128  br x17
0x4cdf6b84   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf6b88   136  d63f03e0       constant
0x4cdf6b8c   140  d503201f       constant
0x4cdf6b90   144  4cb06000       constant
0x4cdf6b94   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf6b38  code target (STUB)  (0x4cd38080)
0x4cdf6b48  constant pool (size 16)
0x4cdf6b78  runtime entry
0x4cdf6b84  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = writelen
compiler = unknown
Instructions (size = 152)
0x4cdf6c00     0  sub csp, jssp, #0x8 (8)
0x4cdf6c04     4  str x3, [jssp, #-8]!
0x4cdf6c08     8  sub csp, jssp, #0x8 (8)
0x4cdf6c0c    12  str x4, [jssp, #-8]!
0x4cdf6c10    16  ldr x3, pc+88 (addr 0x000000004cdf6c68)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf6c14    20  ldur x3, [x3, #7]
0x4cdf6c18    24  cmp x3, #0x0 (0)
0x4cdf6c1c    28  b.ne #+0x2c (addr 0x4cdf6c48)
0x4cdf6c20    32  ldr x5, pc+80 (addr 0x000000004cdf6c70)    ;; object: 0xffffaa1e9349 WeakCell for 0x2a8404d9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf6c24    36  ldur x5, [x5, #7]
0x4cdf6c28    40  tbz w5, #0, #+0x20 (addr 0x4cdf6c48)
0x4cdf6c2c    44  ldursw x4, [x5, #15]
0x4cdf6c30    48  tbnz w4, #23, #+0x18 (addr 0x4cdf6c48)
0x4cdf6c34    52  ldr x4, [jssp], #8
0x4cdf6c38    56  ldr x3, [jssp], #8
0x4cdf6c3c    60  ldr x2, pc+60 (addr 0x000000004cdf6c78)    ;; object: 0xffffaa122999 <String[8]: writelen>
0x4cdf6c40    64  ldr x16, pc+64 (addr 0x000000004cdf6c80)    ;; code: HANDLER, StoreTransitionStub, minor: 174098
0x4cdf6c44    68  br x16
0x4cdf6c48    72  ldr x2, pc+64 (addr 0x000000004cdf6c88)    ;; object: 0xffffaa122999 <String[8]: writelen>
0x4cdf6c4c    76  ldr x4, [jssp], #8
0x4cdf6c50    80  ldr x3, [jssp], #8
0x4cdf6c54    84  ldr x16, pc+60 (addr 0x000000004cdf6c90)    ;; code: BUILTIN
0x4cdf6c58    88  br x16
0x4cdf6c5c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdf6c60    96  d63f03e0       constant
0x4cdf6c64   100  d503201f       constant
0x4cdf6c68   104  aa1e8cb1       constant
0x4cdf6c6c   108  0000ffff       constant
0x4cdf6c70   112  aa1e9349       constant
0x4cdf6c74   116  0000ffff       constant
0x4cdf6c78   120  aa122999       constant
0x4cdf6c7c   124  0000ffff       constant
0x4cdf6c80   128  4cdf6b00       constant
0x4cdf6c84   132  00000000       constant
0x4cdf6c88   136  aa122999       constant
0x4cdf6c8c   140  0000ffff       constant
0x4cdf6c90   144  4cd22420       constant
0x4cdf6c94   148  00000000       constant


RelocInfo (size = 12)
0x4cdf6c10  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf6c20  embedded object  (0xffffaa1e9349 WeakCell for 0x2a8404d9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf6c3c  embedded object  (0xffffaa122999 <String[8]: writelen>)
0x4cdf6c40  code target (HANDLER)  (0x4cdf6b00)
0x4cdf6c48  embedded object  (0xffffaa122999 <String[8]: writelen>)
0x4cdf6c54  code target (BUILTIN)  (0x4cd22420)
0x4cdf6c5c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf6d00     0  tbz w0, #0, #+0x90 (addr 0x4cdf6d90)
0x4cdf6d04     4  mov x2, x0
0x4cdf6d08     8  stur x2, [x1, #151]
0x4cdf6d0c    12  add x3, x1, #0x97 (151)
0x4cdf6d10    16  and x2, x2, #0xfffffffffff00000
0x4cdf6d14    20  ldr x2, [x2, #8]
0x4cdf6d18    24  tbz w2, #1, #+0x24 (addr 0x4cdf6d3c)
0x4cdf6d1c    28  and x2, x1, #0xfffffffffff00000
0x4cdf6d20    32  ldr x2, [x2, #8]
0x4cdf6d24    36  tbz w2, #2, #+0x18 (addr 0x4cdf6d3c)
0x4cdf6d28    40  sub csp, jssp, #0x8 (8)
0x4cdf6d2c    44  str lr, [jssp, #-8]!
0x4cdf6d30    48  ldr x16, pc+80 (addr 0x000000004cdf6d80)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf6d34    52  blr x16
0x4cdf6d38    56  ldr lr, [jssp], #8
0x4cdf6d3c    60  stur x5, [x1, #-1]
0x4cdf6d40    64  tbz w5, #0, #+0x34 (addr 0x4cdf6d74)
0x4cdf6d44    68  sub x2, x1, #0x1 (1)
0x4cdf6d48    72  and x5, x5, #0xfffffffffff00000
0x4cdf6d4c    76  ldr x5, [x5, #8]
0x4cdf6d50    80  tbz w5, #1, #+0x24 (addr 0x4cdf6d74)
0x4cdf6d54    84  and x5, x1, #0xfffffffffff00000
0x4cdf6d58    88  ldr x5, [x5, #8]
0x4cdf6d5c    92  tbz w5, #2, #+0x18 (addr 0x4cdf6d74)
0x4cdf6d60    96  sub csp, jssp, #0x8 (8)
0x4cdf6d64   100  str lr, [jssp, #-8]!
0x4cdf6d68   104  ldr x16, pc+32 (addr 0x000000004cdf6d88)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf6d6c   108  blr x16
0x4cdf6d70   112  ldr lr, [jssp], #8
0x4cdf6d74   116  ret
0x4cdf6d78   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf6d7c   124  d63f03e0       constant
0x4cdf6d80   128  4cd170c0       constant
0x4cdf6d84   132  00000000       constant
0x4cdf6d88   136  4cd38080       constant
0x4cdf6d8c   140  00000000       constant
0x4cdf6d90   144  movz x16, #0x0
0x4cdf6d94   148  sub csp, jssp, #0x10 (16)
0x4cdf6d98   152  stp fp, lr, [jssp, #-16]!
0x4cdf6d9c   156  bl #+0x4 (addr 0x4cdf6da0)
0x4cdf6da0   160  movz x17, #0xa00000000
0x4cdf6da4   164  sub csp, jssp, #0x10 (16)
0x4cdf6da8   168  stp x17, cp, [jssp, #-16]!
0x4cdf6dac   172  add fp, jssp, #0x10 (16)
0x4cdf6db0   176  ldr x17, pc+24 (addr 0x000000004cdf6dc8)    ;; lazy deoptimization bailout 0
0x4cdf6db4   180  add x17, x17, x16
0x4cdf6db8   184  br x17
0x4cdf6dbc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf6dc0   192  d63f03e0       constant
0x4cdf6dc4   196  d503201f       constant
0x4cdf6dc8   200  4cb06000       constant
0x4cdf6dcc   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf6d30  code target (STUB)  (0x4cd170c0)
0x4cdf6d68  code target (STUB)  (0x4cd38080)
0x4cdf6d78  constant pool (size 24)
0x4cdf6db0  runtime entry
0x4cdf6dbc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf6d00     0  tbz w0, #0, #+0x90 (addr 0x4cdf6d90)
0x4cdf6d04     4  mov x2, x0
0x4cdf6d08     8  stur x2, [x1, #151]
0x4cdf6d0c    12  add x3, x1, #0x97 (151)
0x4cdf6d10    16  and x2, x2, #0xfffffffffff00000
0x4cdf6d14    20  ldr x2, [x2, #8]
0x4cdf6d18    24  tbz w2, #1, #+0x24 (addr 0x4cdf6d3c)
0x4cdf6d1c    28  and x2, x1, #0xfffffffffff00000
0x4cdf6d20    32  ldr x2, [x2, #8]
0x4cdf6d24    36  tbz w2, #2, #+0x18 (addr 0x4cdf6d3c)
0x4cdf6d28    40  sub csp, jssp, #0x8 (8)
0x4cdf6d2c    44  str lr, [jssp, #-8]!
0x4cdf6d30    48  ldr x16, pc+80 (addr 0x000000004cdf6d80)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf6d34    52  blr x16
0x4cdf6d38    56  ldr lr, [jssp], #8
0x4cdf6d3c    60  stur x5, [x1, #-1]
0x4cdf6d40    64  tbz w5, #0, #+0x34 (addr 0x4cdf6d74)
0x4cdf6d44    68  sub x2, x1, #0x1 (1)
0x4cdf6d48    72  and x5, x5, #0xfffffffffff00000
0x4cdf6d4c    76  ldr x5, [x5, #8]
0x4cdf6d50    80  tbz w5, #1, #+0x24 (addr 0x4cdf6d74)
0x4cdf6d54    84  and x5, x1, #0xfffffffffff00000
0x4cdf6d58    88  ldr x5, [x5, #8]
0x4cdf6d5c    92  tbz w5, #2, #+0x18 (addr 0x4cdf6d74)
0x4cdf6d60    96  sub csp, jssp, #0x8 (8)
0x4cdf6d64   100  str lr, [jssp, #-8]!
0x4cdf6d68   104  ldr x16, pc+32 (addr 0x000000004cdf6d88)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf6d6c   108  blr x16
0x4cdf6d70   112  ldr lr, [jssp], #8
0x4cdf6d74   116  ret
0x4cdf6d78   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf6d7c   124  d63f03e0       constant
0x4cdf6d80   128  4cd170c0       constant
0x4cdf6d84   132  00000000       constant
0x4cdf6d88   136  4cd38080       constant
0x4cdf6d8c   140  00000000       constant
0x4cdf6d90   144  movz x16, #0x0
0x4cdf6d94   148  sub csp, jssp, #0x10 (16)
0x4cdf6d98   152  stp fp, lr, [jssp, #-16]!
0x4cdf6d9c   156  bl #+0x4 (addr 0x4cdf6da0)
0x4cdf6da0   160  movz x17, #0xa00000000
0x4cdf6da4   164  sub csp, jssp, #0x10 (16)
0x4cdf6da8   168  stp x17, cp, [jssp, #-16]!
0x4cdf6dac   172  add fp, jssp, #0x10 (16)
0x4cdf6db0   176  ldr x17, pc+24 (addr 0x000000004cdf6dc8)    ;; lazy deoptimization bailout 0
0x4cdf6db4   180  add x17, x17, x16
0x4cdf6db8   184  br x17
0x4cdf6dbc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf6dc0   192  d63f03e0       constant
0x4cdf6dc4   196  d503201f       constant
0x4cdf6dc8   200  4cb06000       constant
0x4cdf6dcc   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf6d30  code target (STUB)  (0x4cd170c0)
0x4cdf6d68  code target (STUB)  (0x4cd38080)
0x4cdf6d78  constant pool (size 24)
0x4cdf6db0  runtime entry
0x4cdf6dbc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = bufferedRequest
compiler = unknown
Instructions (size = 152)
0x4cdf6e40     0  sub csp, jssp, #0x8 (8)
0x4cdf6e44     4  str x3, [jssp, #-8]!
0x4cdf6e48     8  sub csp, jssp, #0x8 (8)
0x4cdf6e4c    12  str x4, [jssp, #-8]!
0x4cdf6e50    16  ldr x3, pc+88 (addr 0x000000004cdf6ea8)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf6e54    20  ldur x3, [x3, #7]
0x4cdf6e58    24  cmp x3, #0x0 (0)
0x4cdf6e5c    28  b.ne #+0x30 (addr 0x4cdf6e8c)
0x4cdf6e60    32  tbz w0, #0, #+0x2c (addr 0x4cdf6e8c)
0x4cdf6e64    36  ldr x5, pc+76 (addr 0x000000004cdf6eb0)    ;; object: 0xffffaa1e9439 WeakCell for 0x2a840531 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf6e68    40  ldur x5, [x5, #7]
0x4cdf6e6c    44  tbz w5, #0, #+0x20 (addr 0x4cdf6e8c)
0x4cdf6e70    48  ldursw x4, [x5, #15]
0x4cdf6e74    52  tbnz w4, #23, #+0x18 (addr 0x4cdf6e8c)
0x4cdf6e78    56  ldr x4, [jssp], #8
0x4cdf6e7c    60  ldr x3, [jssp], #8
0x4cdf6e80    64  ldr x2, pc+56 (addr 0x000000004cdf6eb8)    ;; object: 0xffffaa1229b9 <String[15]: bufferedRequest>
0x4cdf6e84    68  ldr x16, pc+60 (addr 0x000000004cdf6ec0)    ;; code: HANDLER, StoreTransitionStub, minor: 198675
0x4cdf6e88    72  br x16
0x4cdf6e8c    76  ldr x2, pc+60 (addr 0x000000004cdf6ec8)    ;; object: 0xffffaa1229b9 <String[15]: bufferedRequest>
0x4cdf6e90    80  ldr x4, [jssp], #8
0x4cdf6e94    84  ldr x3, [jssp], #8
0x4cdf6e98    88  ldr x16, pc+56 (addr 0x000000004cdf6ed0)    ;; code: BUILTIN
0x4cdf6e9c    92  br x16
0x4cdf6ea0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf6ea4   100  d63f03e0       constant
0x4cdf6ea8   104  aa1e8cb1       constant
0x4cdf6eac   108  0000ffff       constant
0x4cdf6eb0   112  aa1e9439       constant
0x4cdf6eb4   116  0000ffff       constant
0x4cdf6eb8   120  aa1229b9       constant
0x4cdf6ebc   124  0000ffff       constant
0x4cdf6ec0   128  4cdf6d00       constant
0x4cdf6ec4   132  00000000       constant
0x4cdf6ec8   136  aa1229b9       constant
0x4cdf6ecc   140  0000ffff       constant
0x4cdf6ed0   144  4cd22420       constant
0x4cdf6ed4   148  00000000       constant


RelocInfo (size = 12)
0x4cdf6e50  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf6e64  embedded object  (0xffffaa1e9439 WeakCell for 0x2a840531 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf6e80  embedded object  (0xffffaa1229b9 <String[15]: bufferedRequest>)
0x4cdf6e84  code target (HANDLER)  (0x4cdf6d00)
0x4cdf6e8c  embedded object  (0xffffaa1229b9 <String[15]: bufferedRequest>)
0x4cdf6e98  code target (BUILTIN)  (0x4cd22420)
0x4cdf6ea0  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf6f40     0  tbz w0, #0, #+0x90 (addr 0x4cdf6fd0)
0x4cdf6f44     4  mov x2, x0
0x4cdf6f48     8  stur x2, [x1, #159]
0x4cdf6f4c    12  add x3, x1, #0x9f (159)
0x4cdf6f50    16  and x2, x2, #0xfffffffffff00000
0x4cdf6f54    20  ldr x2, [x2, #8]
0x4cdf6f58    24  tbz w2, #1, #+0x24 (addr 0x4cdf6f7c)
0x4cdf6f5c    28  and x2, x1, #0xfffffffffff00000
0x4cdf6f60    32  ldr x2, [x2, #8]
0x4cdf6f64    36  tbz w2, #2, #+0x18 (addr 0x4cdf6f7c)
0x4cdf6f68    40  sub csp, jssp, #0x8 (8)
0x4cdf6f6c    44  str lr, [jssp, #-8]!
0x4cdf6f70    48  ldr x16, pc+80 (addr 0x000000004cdf6fc0)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf6f74    52  blr x16
0x4cdf6f78    56  ldr lr, [jssp], #8
0x4cdf6f7c    60  stur x5, [x1, #-1]
0x4cdf6f80    64  tbz w5, #0, #+0x34 (addr 0x4cdf6fb4)
0x4cdf6f84    68  sub x2, x1, #0x1 (1)
0x4cdf6f88    72  and x5, x5, #0xfffffffffff00000
0x4cdf6f8c    76  ldr x5, [x5, #8]
0x4cdf6f90    80  tbz w5, #1, #+0x24 (addr 0x4cdf6fb4)
0x4cdf6f94    84  and x5, x1, #0xfffffffffff00000
0x4cdf6f98    88  ldr x5, [x5, #8]
0x4cdf6f9c    92  tbz w5, #2, #+0x18 (addr 0x4cdf6fb4)
0x4cdf6fa0    96  sub csp, jssp, #0x8 (8)
0x4cdf6fa4   100  str lr, [jssp, #-8]!
0x4cdf6fa8   104  ldr x16, pc+32 (addr 0x000000004cdf6fc8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf6fac   108  blr x16
0x4cdf6fb0   112  ldr lr, [jssp], #8
0x4cdf6fb4   116  ret
0x4cdf6fb8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf6fbc   124  d63f03e0       constant
0x4cdf6fc0   128  4cd170c0       constant
0x4cdf6fc4   132  00000000       constant
0x4cdf6fc8   136  4cd38080       constant
0x4cdf6fcc   140  00000000       constant
0x4cdf6fd0   144  movz x16, #0x0
0x4cdf6fd4   148  sub csp, jssp, #0x10 (16)
0x4cdf6fd8   152  stp fp, lr, [jssp, #-16]!
0x4cdf6fdc   156  bl #+0x4 (addr 0x4cdf6fe0)
0x4cdf6fe0   160  movz x17, #0xa00000000
0x4cdf6fe4   164  sub csp, jssp, #0x10 (16)
0x4cdf6fe8   168  stp x17, cp, [jssp, #-16]!
0x4cdf6fec   172  add fp, jssp, #0x10 (16)
0x4cdf6ff0   176  ldr x17, pc+24 (addr 0x000000004cdf7008)    ;; lazy deoptimization bailout 0
0x4cdf6ff4   180  add x17, x17, x16
0x4cdf6ff8   184  br x17
0x4cdf6ffc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf7000   192  d63f03e0       constant
0x4cdf7004   196  d503201f       constant
0x4cdf7008   200  4cb06000       constant
0x4cdf700c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf6f70  code target (STUB)  (0x4cd170c0)
0x4cdf6fa8  code target (STUB)  (0x4cd38080)
0x4cdf6fb8  constant pool (size 24)
0x4cdf6ff0  runtime entry
0x4cdf6ffc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf6f40     0  tbz w0, #0, #+0x90 (addr 0x4cdf6fd0)
0x4cdf6f44     4  mov x2, x0
0x4cdf6f48     8  stur x2, [x1, #159]
0x4cdf6f4c    12  add x3, x1, #0x9f (159)
0x4cdf6f50    16  and x2, x2, #0xfffffffffff00000
0x4cdf6f54    20  ldr x2, [x2, #8]
0x4cdf6f58    24  tbz w2, #1, #+0x24 (addr 0x4cdf6f7c)
0x4cdf6f5c    28  and x2, x1, #0xfffffffffff00000
0x4cdf6f60    32  ldr x2, [x2, #8]
0x4cdf6f64    36  tbz w2, #2, #+0x18 (addr 0x4cdf6f7c)
0x4cdf6f68    40  sub csp, jssp, #0x8 (8)
0x4cdf6f6c    44  str lr, [jssp, #-8]!
0x4cdf6f70    48  ldr x16, pc+80 (addr 0x000000004cdf6fc0)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf6f74    52  blr x16
0x4cdf6f78    56  ldr lr, [jssp], #8
0x4cdf6f7c    60  stur x5, [x1, #-1]
0x4cdf6f80    64  tbz w5, #0, #+0x34 (addr 0x4cdf6fb4)
0x4cdf6f84    68  sub x2, x1, #0x1 (1)
0x4cdf6f88    72  and x5, x5, #0xfffffffffff00000
0x4cdf6f8c    76  ldr x5, [x5, #8]
0x4cdf6f90    80  tbz w5, #1, #+0x24 (addr 0x4cdf6fb4)
0x4cdf6f94    84  and x5, x1, #0xfffffffffff00000
0x4cdf6f98    88  ldr x5, [x5, #8]
0x4cdf6f9c    92  tbz w5, #2, #+0x18 (addr 0x4cdf6fb4)
0x4cdf6fa0    96  sub csp, jssp, #0x8 (8)
0x4cdf6fa4   100  str lr, [jssp, #-8]!
0x4cdf6fa8   104  ldr x16, pc+32 (addr 0x000000004cdf6fc8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf6fac   108  blr x16
0x4cdf6fb0   112  ldr lr, [jssp], #8
0x4cdf6fb4   116  ret
0x4cdf6fb8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf6fbc   124  d63f03e0       constant
0x4cdf6fc0   128  4cd170c0       constant
0x4cdf6fc4   132  00000000       constant
0x4cdf6fc8   136  4cd38080       constant
0x4cdf6fcc   140  00000000       constant
0x4cdf6fd0   144  movz x16, #0x0
0x4cdf6fd4   148  sub csp, jssp, #0x10 (16)
0x4cdf6fd8   152  stp fp, lr, [jssp, #-16]!
0x4cdf6fdc   156  bl #+0x4 (addr 0x4cdf6fe0)
0x4cdf6fe0   160  movz x17, #0xa00000000
0x4cdf6fe4   164  sub csp, jssp, #0x10 (16)
0x4cdf6fe8   168  stp x17, cp, [jssp, #-16]!
0x4cdf6fec   172  add fp, jssp, #0x10 (16)
0x4cdf6ff0   176  ldr x17, pc+24 (addr 0x000000004cdf7008)    ;; lazy deoptimization bailout 0
0x4cdf6ff4   180  add x17, x17, x16
0x4cdf6ff8   184  br x17
0x4cdf6ffc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf7000   192  d63f03e0       constant
0x4cdf7004   196  d503201f       constant
0x4cdf7008   200  4cb06000       constant
0x4cdf700c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf6f70  code target (STUB)  (0x4cd170c0)
0x4cdf6fa8  code target (STUB)  (0x4cd38080)
0x4cdf6fb8  constant pool (size 24)
0x4cdf6ff0  runtime entry
0x4cdf6ffc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = lastBufferedRequest
compiler = unknown
Instructions (size = 152)
0x4cdf7080     0  sub csp, jssp, #0x8 (8)
0x4cdf7084     4  str x3, [jssp, #-8]!
0x4cdf7088     8  sub csp, jssp, #0x8 (8)
0x4cdf708c    12  str x4, [jssp, #-8]!
0x4cdf7090    16  ldr x3, pc+88 (addr 0x000000004cdf70e8)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf7094    20  ldur x3, [x3, #7]
0x4cdf7098    24  cmp x3, #0x0 (0)
0x4cdf709c    28  b.ne #+0x30 (addr 0x4cdf70cc)
0x4cdf70a0    32  tbz w0, #0, #+0x2c (addr 0x4cdf70cc)
0x4cdf70a4    36  ldr x5, pc+76 (addr 0x000000004cdf70f0)    ;; object: 0xffffaa1e9529 WeakCell for 0x2a840589 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf70a8    40  ldur x5, [x5, #7]
0x4cdf70ac    44  tbz w5, #0, #+0x20 (addr 0x4cdf70cc)
0x4cdf70b0    48  ldursw x4, [x5, #15]
0x4cdf70b4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf70cc)
0x4cdf70b8    56  ldr x4, [jssp], #8
0x4cdf70bc    60  ldr x3, [jssp], #8
0x4cdf70c0    64  ldr x2, pc+56 (addr 0x000000004cdf70f8)    ;; object: 0xffffaa1229e1 <String[19]: lastBufferedRequest>
0x4cdf70c4    68  ldr x16, pc+60 (addr 0x000000004cdf7100)    ;; code: HANDLER, StoreTransitionStub, minor: 198676
0x4cdf70c8    72  br x16
0x4cdf70cc    76  ldr x2, pc+60 (addr 0x000000004cdf7108)    ;; object: 0xffffaa1229e1 <String[19]: lastBufferedRequest>
0x4cdf70d0    80  ldr x4, [jssp], #8
0x4cdf70d4    84  ldr x3, [jssp], #8
0x4cdf70d8    88  ldr x16, pc+56 (addr 0x000000004cdf7110)    ;; code: BUILTIN
0x4cdf70dc    92  br x16
0x4cdf70e0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf70e4   100  d63f03e0       constant
0x4cdf70e8   104  aa1e8cb1       constant
0x4cdf70ec   108  0000ffff       constant
0x4cdf70f0   112  aa1e9529       constant
0x4cdf70f4   116  0000ffff       constant
0x4cdf70f8   120  aa1229e1       constant
0x4cdf70fc   124  0000ffff       constant
0x4cdf7100   128  4cdf6f40       constant
0x4cdf7104   132  00000000       constant
0x4cdf7108   136  aa1229e1       constant
0x4cdf710c   140  0000ffff       constant
0x4cdf7110   144  4cd22420       constant
0x4cdf7114   148  00000000       constant


RelocInfo (size = 12)
0x4cdf7090  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf70a4  embedded object  (0xffffaa1e9529 WeakCell for 0x2a840589 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf70c0  embedded object  (0xffffaa1229e1 <String[19]: lastBufferedRequest>)
0x4cdf70c4  code target (HANDLER)  (0x4cdf6f40)
0x4cdf70cc  embedded object  (0xffffaa1229e1 <String[19]: lastBufferedRequest>)
0x4cdf70d8  code target (BUILTIN)  (0x4cd22420)
0x4cdf70e0  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0x4cdf7180     0  mov x6, x0
0x4cdf7184     4  tbnz w6, #0, #+0x54 (addr 0x4cdf71d8)
0x4cdf7188     8  stur x6, [x1, #167]
0x4cdf718c    12  stur x5, [x1, #-1]
0x4cdf7190    16  tbz w5, #0, #+0x34 (addr 0x4cdf71c4)
0x4cdf7194    20  sub x2, x1, #0x1 (1)
0x4cdf7198    24  and x5, x5, #0xfffffffffff00000
0x4cdf719c    28  ldr x5, [x5, #8]
0x4cdf71a0    32  tbz w5, #1, #+0x24 (addr 0x4cdf71c4)
0x4cdf71a4    36  and x5, x1, #0xfffffffffff00000
0x4cdf71a8    40  ldr x5, [x5, #8]
0x4cdf71ac    44  tbz w5, #2, #+0x18 (addr 0x4cdf71c4)
0x4cdf71b0    48  sub csp, jssp, #0x8 (8)
0x4cdf71b4    52  str lr, [jssp, #-8]!
0x4cdf71b8    56  ldr x16, pc+24 (addr 0x000000004cdf71d0)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf71bc    60  blr x16
0x4cdf71c0    64  ldr lr, [jssp], #8
0x4cdf71c4    68  ret
0x4cdf71c8    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf71cc    76  d63f03e0       constant
0x4cdf71d0    80  4cd38080       constant
0x4cdf71d4    84  00000000       constant
0x4cdf71d8    88  movz x16, #0x0
0x4cdf71dc    92  sub csp, jssp, #0x10 (16)
0x4cdf71e0    96  stp fp, lr, [jssp, #-16]!
0x4cdf71e4   100  bl #+0x4 (addr 0x4cdf71e8)
0x4cdf71e8   104  movz x17, #0xa00000000
0x4cdf71ec   108  sub csp, jssp, #0x10 (16)
0x4cdf71f0   112  stp x17, cp, [jssp, #-16]!
0x4cdf71f4   116  add fp, jssp, #0x10 (16)
0x4cdf71f8   120  ldr x17, pc+24 (addr 0x000000004cdf7210)    ;; lazy deoptimization bailout 0
0x4cdf71fc   124  add x17, x17, x16
0x4cdf7200   128  br x17
0x4cdf7204   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf7208   136  d63f03e0       constant
0x4cdf720c   140  d503201f       constant
0x4cdf7210   144  4cb06000       constant
0x4cdf7214   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf71b8  code target (STUB)  (0x4cd38080)
0x4cdf71c8  constant pool (size 16)
0x4cdf71f8  runtime entry
0x4cdf7204  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0x4cdf7180     0  mov x6, x0
0x4cdf7184     4  tbnz w6, #0, #+0x54 (addr 0x4cdf71d8)
0x4cdf7188     8  stur x6, [x1, #167]
0x4cdf718c    12  stur x5, [x1, #-1]
0x4cdf7190    16  tbz w5, #0, #+0x34 (addr 0x4cdf71c4)
0x4cdf7194    20  sub x2, x1, #0x1 (1)
0x4cdf7198    24  and x5, x5, #0xfffffffffff00000
0x4cdf719c    28  ldr x5, [x5, #8]
0x4cdf71a0    32  tbz w5, #1, #+0x24 (addr 0x4cdf71c4)
0x4cdf71a4    36  and x5, x1, #0xfffffffffff00000
0x4cdf71a8    40  ldr x5, [x5, #8]
0x4cdf71ac    44  tbz w5, #2, #+0x18 (addr 0x4cdf71c4)
0x4cdf71b0    48  sub csp, jssp, #0x8 (8)
0x4cdf71b4    52  str lr, [jssp, #-8]!
0x4cdf71b8    56  ldr x16, pc+24 (addr 0x000000004cdf71d0)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf71bc    60  blr x16
0x4cdf71c0    64  ldr lr, [jssp], #8
0x4cdf71c4    68  ret
0x4cdf71c8    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf71cc    76  d63f03e0       constant
0x4cdf71d0    80  4cd38080       constant
0x4cdf71d4    84  00000000       constant
0x4cdf71d8    88  movz x16, #0x0
0x4cdf71dc    92  sub csp, jssp, #0x10 (16)
0x4cdf71e0    96  stp fp, lr, [jssp, #-16]!
0x4cdf71e4   100  bl #+0x4 (addr 0x4cdf71e8)
0x4cdf71e8   104  movz x17, #0xa00000000
0x4cdf71ec   108  sub csp, jssp, #0x10 (16)
0x4cdf71f0   112  stp x17, cp, [jssp, #-16]!
0x4cdf71f4   116  add fp, jssp, #0x10 (16)
0x4cdf71f8   120  ldr x17, pc+24 (addr 0x000000004cdf7210)    ;; lazy deoptimization bailout 0
0x4cdf71fc   124  add x17, x17, x16
0x4cdf7200   128  br x17
0x4cdf7204   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf7208   136  d63f03e0       constant
0x4cdf720c   140  d503201f       constant
0x4cdf7210   144  4cb06000       constant
0x4cdf7214   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf71b8  code target (STUB)  (0x4cd38080)
0x4cdf71c8  constant pool (size 16)
0x4cdf71f8  runtime entry
0x4cdf7204  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = pendingcb
compiler = unknown
Instructions (size = 152)
0x4cdf7280     0  sub csp, jssp, #0x8 (8)
0x4cdf7284     4  str x3, [jssp, #-8]!
0x4cdf7288     8  sub csp, jssp, #0x8 (8)
0x4cdf728c    12  str x4, [jssp, #-8]!
0x4cdf7290    16  ldr x3, pc+88 (addr 0x000000004cdf72e8)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf7294    20  ldur x3, [x3, #7]
0x4cdf7298    24  cmp x3, #0x0 (0)
0x4cdf729c    28  b.ne #+0x2c (addr 0x4cdf72c8)
0x4cdf72a0    32  ldr x5, pc+80 (addr 0x000000004cdf72f0)    ;; object: 0xffffaa1e9619 WeakCell for 0x2a8405e1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf72a4    36  ldur x5, [x5, #7]
0x4cdf72a8    40  tbz w5, #0, #+0x20 (addr 0x4cdf72c8)
0x4cdf72ac    44  ldursw x4, [x5, #15]
0x4cdf72b0    48  tbnz w4, #23, #+0x18 (addr 0x4cdf72c8)
0x4cdf72b4    52  ldr x4, [jssp], #8
0x4cdf72b8    56  ldr x3, [jssp], #8
0x4cdf72bc    60  ldr x2, pc+60 (addr 0x000000004cdf72f8)    ;; object: 0xffffaa122a11 <String[9]: pendingcb>
0x4cdf72c0    64  ldr x16, pc+64 (addr 0x000000004cdf7300)    ;; code: HANDLER, StoreTransitionStub, minor: 174101
0x4cdf72c4    68  br x16
0x4cdf72c8    72  ldr x2, pc+64 (addr 0x000000004cdf7308)    ;; object: 0xffffaa122a11 <String[9]: pendingcb>
0x4cdf72cc    76  ldr x4, [jssp], #8
0x4cdf72d0    80  ldr x3, [jssp], #8
0x4cdf72d4    84  ldr x16, pc+60 (addr 0x000000004cdf7310)    ;; code: BUILTIN
0x4cdf72d8    88  br x16
0x4cdf72dc    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdf72e0    96  d63f03e0       constant
0x4cdf72e4   100  d503201f       constant
0x4cdf72e8   104  aa1e8cb1       constant
0x4cdf72ec   108  0000ffff       constant
0x4cdf72f0   112  aa1e9619       constant
0x4cdf72f4   116  0000ffff       constant
0x4cdf72f8   120  aa122a11       constant
0x4cdf72fc   124  0000ffff       constant
0x4cdf7300   128  4cdf7180       constant
0x4cdf7304   132  00000000       constant
0x4cdf7308   136  aa122a11       constant
0x4cdf730c   140  0000ffff       constant
0x4cdf7310   144  4cd22420       constant
0x4cdf7314   148  00000000       constant


RelocInfo (size = 12)
0x4cdf7290  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf72a0  embedded object  (0xffffaa1e9619 WeakCell for 0x2a8405e1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf72bc  embedded object  (0xffffaa122a11 <String[9]: pendingcb>)
0x4cdf72c0  code target (HANDLER)  (0x4cdf7180)
0x4cdf72c8  embedded object  (0xffffaa122a11 <String[9]: pendingcb>)
0x4cdf72d4  code target (BUILTIN)  (0x4cd22420)
0x4cdf72dc  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf7380     0  tbz w0, #0, #+0x90 (addr 0x4cdf7410)
0x4cdf7384     4  mov x2, x0
0x4cdf7388     8  stur x2, [x1, #175]
0x4cdf738c    12  add x3, x1, #0xaf (175)
0x4cdf7390    16  and x2, x2, #0xfffffffffff00000
0x4cdf7394    20  ldr x2, [x2, #8]
0x4cdf7398    24  tbz w2, #1, #+0x24 (addr 0x4cdf73bc)
0x4cdf739c    28  and x2, x1, #0xfffffffffff00000
0x4cdf73a0    32  ldr x2, [x2, #8]
0x4cdf73a4    36  tbz w2, #2, #+0x18 (addr 0x4cdf73bc)
0x4cdf73a8    40  sub csp, jssp, #0x8 (8)
0x4cdf73ac    44  str lr, [jssp, #-8]!
0x4cdf73b0    48  ldr x16, pc+80 (addr 0x000000004cdf7400)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf73b4    52  blr x16
0x4cdf73b8    56  ldr lr, [jssp], #8
0x4cdf73bc    60  stur x5, [x1, #-1]
0x4cdf73c0    64  tbz w5, #0, #+0x34 (addr 0x4cdf73f4)
0x4cdf73c4    68  sub x2, x1, #0x1 (1)
0x4cdf73c8    72  and x5, x5, #0xfffffffffff00000
0x4cdf73cc    76  ldr x5, [x5, #8]
0x4cdf73d0    80  tbz w5, #1, #+0x24 (addr 0x4cdf73f4)
0x4cdf73d4    84  and x5, x1, #0xfffffffffff00000
0x4cdf73d8    88  ldr x5, [x5, #8]
0x4cdf73dc    92  tbz w5, #2, #+0x18 (addr 0x4cdf73f4)
0x4cdf73e0    96  sub csp, jssp, #0x8 (8)
0x4cdf73e4   100  str lr, [jssp, #-8]!
0x4cdf73e8   104  ldr x16, pc+32 (addr 0x000000004cdf7408)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf73ec   108  blr x16
0x4cdf73f0   112  ldr lr, [jssp], #8
0x4cdf73f4   116  ret
0x4cdf73f8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf73fc   124  d63f03e0       constant
0x4cdf7400   128  4cd170c0       constant
0x4cdf7404   132  00000000       constant
0x4cdf7408   136  4cd38080       constant
0x4cdf740c   140  00000000       constant
0x4cdf7410   144  movz x16, #0x0
0x4cdf7414   148  sub csp, jssp, #0x10 (16)
0x4cdf7418   152  stp fp, lr, [jssp, #-16]!
0x4cdf741c   156  bl #+0x4 (addr 0x4cdf7420)
0x4cdf7420   160  movz x17, #0xa00000000
0x4cdf7424   164  sub csp, jssp, #0x10 (16)
0x4cdf7428   168  stp x17, cp, [jssp, #-16]!
0x4cdf742c   172  add fp, jssp, #0x10 (16)
0x4cdf7430   176  ldr x17, pc+24 (addr 0x000000004cdf7448)    ;; lazy deoptimization bailout 0
0x4cdf7434   180  add x17, x17, x16
0x4cdf7438   184  br x17
0x4cdf743c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf7440   192  d63f03e0       constant
0x4cdf7444   196  d503201f       constant
0x4cdf7448   200  4cb06000       constant
0x4cdf744c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf73b0  code target (STUB)  (0x4cd170c0)
0x4cdf73e8  code target (STUB)  (0x4cd38080)
0x4cdf73f8  constant pool (size 24)
0x4cdf7430  runtime entry
0x4cdf743c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf7380     0  tbz w0, #0, #+0x90 (addr 0x4cdf7410)
0x4cdf7384     4  mov x2, x0
0x4cdf7388     8  stur x2, [x1, #175]
0x4cdf738c    12  add x3, x1, #0xaf (175)
0x4cdf7390    16  and x2, x2, #0xfffffffffff00000
0x4cdf7394    20  ldr x2, [x2, #8]
0x4cdf7398    24  tbz w2, #1, #+0x24 (addr 0x4cdf73bc)
0x4cdf739c    28  and x2, x1, #0xfffffffffff00000
0x4cdf73a0    32  ldr x2, [x2, #8]
0x4cdf73a4    36  tbz w2, #2, #+0x18 (addr 0x4cdf73bc)
0x4cdf73a8    40  sub csp, jssp, #0x8 (8)
0x4cdf73ac    44  str lr, [jssp, #-8]!
0x4cdf73b0    48  ldr x16, pc+80 (addr 0x000000004cdf7400)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf73b4    52  blr x16
0x4cdf73b8    56  ldr lr, [jssp], #8
0x4cdf73bc    60  stur x5, [x1, #-1]
0x4cdf73c0    64  tbz w5, #0, #+0x34 (addr 0x4cdf73f4)
0x4cdf73c4    68  sub x2, x1, #0x1 (1)
0x4cdf73c8    72  and x5, x5, #0xfffffffffff00000
0x4cdf73cc    76  ldr x5, [x5, #8]
0x4cdf73d0    80  tbz w5, #1, #+0x24 (addr 0x4cdf73f4)
0x4cdf73d4    84  and x5, x1, #0xfffffffffff00000
0x4cdf73d8    88  ldr x5, [x5, #8]
0x4cdf73dc    92  tbz w5, #2, #+0x18 (addr 0x4cdf73f4)
0x4cdf73e0    96  sub csp, jssp, #0x8 (8)
0x4cdf73e4   100  str lr, [jssp, #-8]!
0x4cdf73e8   104  ldr x16, pc+32 (addr 0x000000004cdf7408)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf73ec   108  blr x16
0x4cdf73f0   112  ldr lr, [jssp], #8
0x4cdf73f4   116  ret
0x4cdf73f8   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf73fc   124  d63f03e0       constant
0x4cdf7400   128  4cd170c0       constant
0x4cdf7404   132  00000000       constant
0x4cdf7408   136  4cd38080       constant
0x4cdf740c   140  00000000       constant
0x4cdf7410   144  movz x16, #0x0
0x4cdf7414   148  sub csp, jssp, #0x10 (16)
0x4cdf7418   152  stp fp, lr, [jssp, #-16]!
0x4cdf741c   156  bl #+0x4 (addr 0x4cdf7420)
0x4cdf7420   160  movz x17, #0xa00000000
0x4cdf7424   164  sub csp, jssp, #0x10 (16)
0x4cdf7428   168  stp x17, cp, [jssp, #-16]!
0x4cdf742c   172  add fp, jssp, #0x10 (16)
0x4cdf7430   176  ldr x17, pc+24 (addr 0x000000004cdf7448)    ;; lazy deoptimization bailout 0
0x4cdf7434   180  add x17, x17, x16
0x4cdf7438   184  br x17
0x4cdf743c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf7440   192  d63f03e0       constant
0x4cdf7444   196  d503201f       constant
0x4cdf7448   200  4cb06000       constant
0x4cdf744c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf73b0  code target (STUB)  (0x4cd170c0)
0x4cdf73e8  code target (STUB)  (0x4cd38080)
0x4cdf73f8  constant pool (size 24)
0x4cdf7430  runtime entry
0x4cdf743c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = prefinished
compiler = unknown
Instructions (size = 152)
0x4cdf74c0     0  sub csp, jssp, #0x8 (8)
0x4cdf74c4     4  str x3, [jssp, #-8]!
0x4cdf74c8     8  sub csp, jssp, #0x8 (8)
0x4cdf74cc    12  str x4, [jssp, #-8]!
0x4cdf74d0    16  ldr x3, pc+88 (addr 0x000000004cdf7528)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf74d4    20  ldur x3, [x3, #7]
0x4cdf74d8    24  cmp x3, #0x0 (0)
0x4cdf74dc    28  b.ne #+0x30 (addr 0x4cdf750c)
0x4cdf74e0    32  tbz w0, #0, #+0x2c (addr 0x4cdf750c)
0x4cdf74e4    36  ldr x5, pc+76 (addr 0x000000004cdf7530)    ;; object: 0xffffaa1e9709 WeakCell for 0x2a840639 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf74e8    40  ldur x5, [x5, #7]
0x4cdf74ec    44  tbz w5, #0, #+0x20 (addr 0x4cdf750c)
0x4cdf74f0    48  ldursw x4, [x5, #15]
0x4cdf74f4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf750c)
0x4cdf74f8    56  ldr x4, [jssp], #8
0x4cdf74fc    60  ldr x3, [jssp], #8
0x4cdf7500    64  ldr x2, pc+56 (addr 0x000000004cdf7538)    ;; object: 0xffffaa122a39 <String[11]: prefinished>
0x4cdf7504    68  ldr x16, pc+60 (addr 0x000000004cdf7540)    ;; code: HANDLER, StoreTransitionStub, minor: 198678
0x4cdf7508    72  br x16
0x4cdf750c    76  ldr x2, pc+60 (addr 0x000000004cdf7548)    ;; object: 0xffffaa122a39 <String[11]: prefinished>
0x4cdf7510    80  ldr x4, [jssp], #8
0x4cdf7514    84  ldr x3, [jssp], #8
0x4cdf7518    88  ldr x16, pc+56 (addr 0x000000004cdf7550)    ;; code: BUILTIN
0x4cdf751c    92  br x16
0x4cdf7520    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf7524   100  d63f03e0       constant
0x4cdf7528   104  aa1e8cb1       constant
0x4cdf752c   108  0000ffff       constant
0x4cdf7530   112  aa1e9709       constant
0x4cdf7534   116  0000ffff       constant
0x4cdf7538   120  aa122a39       constant
0x4cdf753c   124  0000ffff       constant
0x4cdf7540   128  4cdf7380       constant
0x4cdf7544   132  00000000       constant
0x4cdf7548   136  aa122a39       constant
0x4cdf754c   140  0000ffff       constant
0x4cdf7550   144  4cd22420       constant
0x4cdf7554   148  00000000       constant


RelocInfo (size = 12)
0x4cdf74d0  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf74e4  embedded object  (0xffffaa1e9709 WeakCell for 0x2a840639 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf7500  embedded object  (0xffffaa122a39 <String[11]: prefinished>)
0x4cdf7504  code target (HANDLER)  (0x4cdf7380)
0x4cdf750c  embedded object  (0xffffaa122a39 <String[11]: prefinished>)
0x4cdf7518  code target (BUILTIN)  (0x4cd22420)
0x4cdf7520  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf75c0     0  tbz w0, #0, #+0x90 (addr 0x4cdf7650)
0x4cdf75c4     4  mov x2, x0
0x4cdf75c8     8  stur x2, [x1, #183]
0x4cdf75cc    12  add x3, x1, #0xb7 (183)
0x4cdf75d0    16  and x2, x2, #0xfffffffffff00000
0x4cdf75d4    20  ldr x2, [x2, #8]
0x4cdf75d8    24  tbz w2, #1, #+0x24 (addr 0x4cdf75fc)
0x4cdf75dc    28  and x2, x1, #0xfffffffffff00000
0x4cdf75e0    32  ldr x2, [x2, #8]
0x4cdf75e4    36  tbz w2, #2, #+0x18 (addr 0x4cdf75fc)
0x4cdf75e8    40  sub csp, jssp, #0x8 (8)
0x4cdf75ec    44  str lr, [jssp, #-8]!
0x4cdf75f0    48  ldr x16, pc+80 (addr 0x000000004cdf7640)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf75f4    52  blr x16
0x4cdf75f8    56  ldr lr, [jssp], #8
0x4cdf75fc    60  stur x5, [x1, #-1]
0x4cdf7600    64  tbz w5, #0, #+0x34 (addr 0x4cdf7634)
0x4cdf7604    68  sub x2, x1, #0x1 (1)
0x4cdf7608    72  and x5, x5, #0xfffffffffff00000
0x4cdf760c    76  ldr x5, [x5, #8]
0x4cdf7610    80  tbz w5, #1, #+0x24 (addr 0x4cdf7634)
0x4cdf7614    84  and x5, x1, #0xfffffffffff00000
0x4cdf7618    88  ldr x5, [x5, #8]
0x4cdf761c    92  tbz w5, #2, #+0x18 (addr 0x4cdf7634)
0x4cdf7620    96  sub csp, jssp, #0x8 (8)
0x4cdf7624   100  str lr, [jssp, #-8]!
0x4cdf7628   104  ldr x16, pc+32 (addr 0x000000004cdf7648)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf762c   108  blr x16
0x4cdf7630   112  ldr lr, [jssp], #8
0x4cdf7634   116  ret
0x4cdf7638   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf763c   124  d63f03e0       constant
0x4cdf7640   128  4cd170c0       constant
0x4cdf7644   132  00000000       constant
0x4cdf7648   136  4cd38080       constant
0x4cdf764c   140  00000000       constant
0x4cdf7650   144  movz x16, #0x0
0x4cdf7654   148  sub csp, jssp, #0x10 (16)
0x4cdf7658   152  stp fp, lr, [jssp, #-16]!
0x4cdf765c   156  bl #+0x4 (addr 0x4cdf7660)
0x4cdf7660   160  movz x17, #0xa00000000
0x4cdf7664   164  sub csp, jssp, #0x10 (16)
0x4cdf7668   168  stp x17, cp, [jssp, #-16]!
0x4cdf766c   172  add fp, jssp, #0x10 (16)
0x4cdf7670   176  ldr x17, pc+24 (addr 0x000000004cdf7688)    ;; lazy deoptimization bailout 0
0x4cdf7674   180  add x17, x17, x16
0x4cdf7678   184  br x17
0x4cdf767c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf7680   192  d63f03e0       constant
0x4cdf7684   196  d503201f       constant
0x4cdf7688   200  4cb06000       constant
0x4cdf768c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf75f0  code target (STUB)  (0x4cd170c0)
0x4cdf7628  code target (STUB)  (0x4cd38080)
0x4cdf7638  constant pool (size 24)
0x4cdf7670  runtime entry
0x4cdf767c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf75c0     0  tbz w0, #0, #+0x90 (addr 0x4cdf7650)
0x4cdf75c4     4  mov x2, x0
0x4cdf75c8     8  stur x2, [x1, #183]
0x4cdf75cc    12  add x3, x1, #0xb7 (183)
0x4cdf75d0    16  and x2, x2, #0xfffffffffff00000
0x4cdf75d4    20  ldr x2, [x2, #8]
0x4cdf75d8    24  tbz w2, #1, #+0x24 (addr 0x4cdf75fc)
0x4cdf75dc    28  and x2, x1, #0xfffffffffff00000
0x4cdf75e0    32  ldr x2, [x2, #8]
0x4cdf75e4    36  tbz w2, #2, #+0x18 (addr 0x4cdf75fc)
0x4cdf75e8    40  sub csp, jssp, #0x8 (8)
0x4cdf75ec    44  str lr, [jssp, #-8]!
0x4cdf75f0    48  ldr x16, pc+80 (addr 0x000000004cdf7640)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf75f4    52  blr x16
0x4cdf75f8    56  ldr lr, [jssp], #8
0x4cdf75fc    60  stur x5, [x1, #-1]
0x4cdf7600    64  tbz w5, #0, #+0x34 (addr 0x4cdf7634)
0x4cdf7604    68  sub x2, x1, #0x1 (1)
0x4cdf7608    72  and x5, x5, #0xfffffffffff00000
0x4cdf760c    76  ldr x5, [x5, #8]
0x4cdf7610    80  tbz w5, #1, #+0x24 (addr 0x4cdf7634)
0x4cdf7614    84  and x5, x1, #0xfffffffffff00000
0x4cdf7618    88  ldr x5, [x5, #8]
0x4cdf761c    92  tbz w5, #2, #+0x18 (addr 0x4cdf7634)
0x4cdf7620    96  sub csp, jssp, #0x8 (8)
0x4cdf7624   100  str lr, [jssp, #-8]!
0x4cdf7628   104  ldr x16, pc+32 (addr 0x000000004cdf7648)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf762c   108  blr x16
0x4cdf7630   112  ldr lr, [jssp], #8
0x4cdf7634   116  ret
0x4cdf7638   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf763c   124  d63f03e0       constant
0x4cdf7640   128  4cd170c0       constant
0x4cdf7644   132  00000000       constant
0x4cdf7648   136  4cd38080       constant
0x4cdf764c   140  00000000       constant
0x4cdf7650   144  movz x16, #0x0
0x4cdf7654   148  sub csp, jssp, #0x10 (16)
0x4cdf7658   152  stp fp, lr, [jssp, #-16]!
0x4cdf765c   156  bl #+0x4 (addr 0x4cdf7660)
0x4cdf7660   160  movz x17, #0xa00000000
0x4cdf7664   164  sub csp, jssp, #0x10 (16)
0x4cdf7668   168  stp x17, cp, [jssp, #-16]!
0x4cdf766c   172  add fp, jssp, #0x10 (16)
0x4cdf7670   176  ldr x17, pc+24 (addr 0x000000004cdf7688)    ;; lazy deoptimization bailout 0
0x4cdf7674   180  add x17, x17, x16
0x4cdf7678   184  br x17
0x4cdf767c   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf7680   192  d63f03e0       constant
0x4cdf7684   196  d503201f       constant
0x4cdf7688   200  4cb06000       constant
0x4cdf768c   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf75f0  code target (STUB)  (0x4cd170c0)
0x4cdf7628  code target (STUB)  (0x4cd38080)
0x4cdf7638  constant pool (size 24)
0x4cdf7670  runtime entry
0x4cdf767c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = errorEmitted
compiler = unknown
Instructions (size = 152)
0x4cdf7700     0  sub csp, jssp, #0x8 (8)
0x4cdf7704     4  str x3, [jssp, #-8]!
0x4cdf7708     8  sub csp, jssp, #0x8 (8)
0x4cdf770c    12  str x4, [jssp, #-8]!
0x4cdf7710    16  ldr x3, pc+88 (addr 0x000000004cdf7768)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf7714    20  ldur x3, [x3, #7]
0x4cdf7718    24  cmp x3, #0x0 (0)
0x4cdf771c    28  b.ne #+0x30 (addr 0x4cdf774c)
0x4cdf7720    32  tbz w0, #0, #+0x2c (addr 0x4cdf774c)
0x4cdf7724    36  ldr x5, pc+76 (addr 0x000000004cdf7770)    ;; object: 0xffffaa1e97f9 WeakCell for 0x2a840691 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf7728    40  ldur x5, [x5, #7]
0x4cdf772c    44  tbz w5, #0, #+0x20 (addr 0x4cdf774c)
0x4cdf7730    48  ldursw x4, [x5, #15]
0x4cdf7734    52  tbnz w4, #23, #+0x18 (addr 0x4cdf774c)
0x4cdf7738    56  ldr x4, [jssp], #8
0x4cdf773c    60  ldr x3, [jssp], #8
0x4cdf7740    64  ldr x2, pc+56 (addr 0x000000004cdf7778)    ;; object: 0xffffaa122a61 <String[12]: errorEmitted>
0x4cdf7744    68  ldr x16, pc+60 (addr 0x000000004cdf7780)    ;; code: HANDLER, StoreTransitionStub, minor: 198679
0x4cdf7748    72  br x16
0x4cdf774c    76  ldr x2, pc+60 (addr 0x000000004cdf7788)    ;; object: 0xffffaa122a61 <String[12]: errorEmitted>
0x4cdf7750    80  ldr x4, [jssp], #8
0x4cdf7754    84  ldr x3, [jssp], #8
0x4cdf7758    88  ldr x16, pc+56 (addr 0x000000004cdf7790)    ;; code: BUILTIN
0x4cdf775c    92  br x16
0x4cdf7760    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf7764   100  d63f03e0       constant
0x4cdf7768   104  aa1e8cb1       constant
0x4cdf776c   108  0000ffff       constant
0x4cdf7770   112  aa1e97f9       constant
0x4cdf7774   116  0000ffff       constant
0x4cdf7778   120  aa122a61       constant
0x4cdf777c   124  0000ffff       constant
0x4cdf7780   128  4cdf75c0       constant
0x4cdf7784   132  00000000       constant
0x4cdf7788   136  aa122a61       constant
0x4cdf778c   140  0000ffff       constant
0x4cdf7790   144  4cd22420       constant
0x4cdf7794   148  00000000       constant


RelocInfo (size = 12)
0x4cdf7710  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf7724  embedded object  (0xffffaa1e97f9 WeakCell for 0x2a840691 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf7740  embedded object  (0xffffaa122a61 <String[12]: errorEmitted>)
0x4cdf7744  code target (HANDLER)  (0x4cdf75c0)
0x4cdf774c  embedded object  (0xffffaa122a61 <String[12]: errorEmitted>)
0x4cdf7758  code target (BUILTIN)  (0x4cd22420)
0x4cdf7760  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0x4cdf7800     0  mov x6, x0
0x4cdf7804     4  tbnz w6, #0, #+0x54 (addr 0x4cdf7858)
0x4cdf7808     8  stur x6, [x1, #191]
0x4cdf780c    12  stur x5, [x1, #-1]
0x4cdf7810    16  tbz w5, #0, #+0x34 (addr 0x4cdf7844)
0x4cdf7814    20  sub x2, x1, #0x1 (1)
0x4cdf7818    24  and x5, x5, #0xfffffffffff00000
0x4cdf781c    28  ldr x5, [x5, #8]
0x4cdf7820    32  tbz w5, #1, #+0x24 (addr 0x4cdf7844)
0x4cdf7824    36  and x5, x1, #0xfffffffffff00000
0x4cdf7828    40  ldr x5, [x5, #8]
0x4cdf782c    44  tbz w5, #2, #+0x18 (addr 0x4cdf7844)
0x4cdf7830    48  sub csp, jssp, #0x8 (8)
0x4cdf7834    52  str lr, [jssp, #-8]!
0x4cdf7838    56  ldr x16, pc+24 (addr 0x000000004cdf7850)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf783c    60  blr x16
0x4cdf7840    64  ldr lr, [jssp], #8
0x4cdf7844    68  ret
0x4cdf7848    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf784c    76  d63f03e0       constant
0x4cdf7850    80  4cd38080       constant
0x4cdf7854    84  00000000       constant
0x4cdf7858    88  movz x16, #0x0
0x4cdf785c    92  sub csp, jssp, #0x10 (16)
0x4cdf7860    96  stp fp, lr, [jssp, #-16]!
0x4cdf7864   100  bl #+0x4 (addr 0x4cdf7868)
0x4cdf7868   104  movz x17, #0xa00000000
0x4cdf786c   108  sub csp, jssp, #0x10 (16)
0x4cdf7870   112  stp x17, cp, [jssp, #-16]!
0x4cdf7874   116  add fp, jssp, #0x10 (16)
0x4cdf7878   120  ldr x17, pc+24 (addr 0x000000004cdf7890)    ;; lazy deoptimization bailout 0
0x4cdf787c   124  add x17, x17, x16
0x4cdf7880   128  br x17
0x4cdf7884   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf7888   136  d63f03e0       constant
0x4cdf788c   140  d503201f       constant
0x4cdf7890   144  4cb06000       constant
0x4cdf7894   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf7838  code target (STUB)  (0x4cd38080)
0x4cdf7848  constant pool (size 16)
0x4cdf7878  runtime entry
0x4cdf7884  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 160)
0x4cdf7800     0  mov x6, x0
0x4cdf7804     4  tbnz w6, #0, #+0x54 (addr 0x4cdf7858)
0x4cdf7808     8  stur x6, [x1, #191]
0x4cdf780c    12  stur x5, [x1, #-1]
0x4cdf7810    16  tbz w5, #0, #+0x34 (addr 0x4cdf7844)
0x4cdf7814    20  sub x2, x1, #0x1 (1)
0x4cdf7818    24  and x5, x5, #0xfffffffffff00000
0x4cdf781c    28  ldr x5, [x5, #8]
0x4cdf7820    32  tbz w5, #1, #+0x24 (addr 0x4cdf7844)
0x4cdf7824    36  and x5, x1, #0xfffffffffff00000
0x4cdf7828    40  ldr x5, [x5, #8]
0x4cdf782c    44  tbz w5, #2, #+0x18 (addr 0x4cdf7844)
0x4cdf7830    48  sub csp, jssp, #0x8 (8)
0x4cdf7834    52  str lr, [jssp, #-8]!
0x4cdf7838    56  ldr x16, pc+24 (addr 0x000000004cdf7850)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf783c    60  blr x16
0x4cdf7840    64  ldr lr, [jssp], #8
0x4cdf7844    68  ret
0x4cdf7848    72  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf784c    76  d63f03e0       constant
0x4cdf7850    80  4cd38080       constant
0x4cdf7854    84  00000000       constant
0x4cdf7858    88  movz x16, #0x0
0x4cdf785c    92  sub csp, jssp, #0x10 (16)
0x4cdf7860    96  stp fp, lr, [jssp, #-16]!
0x4cdf7864   100  bl #+0x4 (addr 0x4cdf7868)
0x4cdf7868   104  movz x17, #0xa00000000
0x4cdf786c   108  sub csp, jssp, #0x10 (16)
0x4cdf7870   112  stp x17, cp, [jssp, #-16]!
0x4cdf7874   116  add fp, jssp, #0x10 (16)
0x4cdf7878   120  ldr x17, pc+24 (addr 0x000000004cdf7890)    ;; lazy deoptimization bailout 0
0x4cdf787c   124  add x17, x17, x16
0x4cdf7880   128  br x17
0x4cdf7884   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf7888   136  d63f03e0       constant
0x4cdf788c   140  d503201f       constant
0x4cdf7890   144  4cb06000       constant
0x4cdf7894   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf7838  code target (STUB)  (0x4cd38080)
0x4cdf7848  constant pool (size 16)
0x4cdf7878  runtime entry
0x4cdf7884  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = bufferedRequestCount
compiler = unknown
Instructions (size = 152)
0x4cdf7900     0  sub csp, jssp, #0x8 (8)
0x4cdf7904     4  str x3, [jssp, #-8]!
0x4cdf7908     8  sub csp, jssp, #0x8 (8)
0x4cdf790c    12  str x4, [jssp, #-8]!
0x4cdf7910    16  ldr x3, pc+88 (addr 0x000000004cdf7968)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf7914    20  ldur x3, [x3, #7]
0x4cdf7918    24  cmp x3, #0x0 (0)
0x4cdf791c    28  b.ne #+0x2c (addr 0x4cdf7948)
0x4cdf7920    32  ldr x5, pc+80 (addr 0x000000004cdf7970)    ;; object: 0xffffaa1e98e9 WeakCell for 0x2a8406e9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf7924    36  ldur x5, [x5, #7]
0x4cdf7928    40  tbz w5, #0, #+0x20 (addr 0x4cdf7948)
0x4cdf792c    44  ldursw x4, [x5, #15]
0x4cdf7930    48  tbnz w4, #23, #+0x18 (addr 0x4cdf7948)
0x4cdf7934    52  ldr x4, [jssp], #8
0x4cdf7938    56  ldr x3, [jssp], #8
0x4cdf793c    60  ldr x2, pc+60 (addr 0x000000004cdf7978)    ;; object: 0xffffaa122a89 <String[20]: bufferedRequestCount>
0x4cdf7940    64  ldr x16, pc+64 (addr 0x000000004cdf7980)    ;; code: HANDLER, StoreTransitionStub, minor: 174104
0x4cdf7944    68  br x16
0x4cdf7948    72  ldr x2, pc+64 (addr 0x000000004cdf7988)    ;; object: 0xffffaa122a89 <String[20]: bufferedRequestCount>
0x4cdf794c    76  ldr x4, [jssp], #8
0x4cdf7950    80  ldr x3, [jssp], #8
0x4cdf7954    84  ldr x16, pc+60 (addr 0x000000004cdf7990)    ;; code: BUILTIN
0x4cdf7958    88  br x16
0x4cdf795c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdf7960    96  d63f03e0       constant
0x4cdf7964   100  d503201f       constant
0x4cdf7968   104  aa1e8cb1       constant
0x4cdf796c   108  0000ffff       constant
0x4cdf7970   112  aa1e98e9       constant
0x4cdf7974   116  0000ffff       constant
0x4cdf7978   120  aa122a89       constant
0x4cdf797c   124  0000ffff       constant
0x4cdf7980   128  4cdf7800       constant
0x4cdf7984   132  00000000       constant
0x4cdf7988   136  aa122a89       constant
0x4cdf798c   140  0000ffff       constant
0x4cdf7990   144  4cd22420       constant
0x4cdf7994   148  00000000       constant


RelocInfo (size = 12)
0x4cdf7910  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf7920  embedded object  (0xffffaa1e98e9 WeakCell for 0x2a8406e9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf793c  embedded object  (0xffffaa122a89 <String[20]: bufferedRequestCount>)
0x4cdf7940  code target (HANDLER)  (0x4cdf7800)
0x4cdf7948  embedded object  (0xffffaa122a89 <String[20]: bufferedRequestCount>)
0x4cdf7954  code target (BUILTIN)  (0x4cd22420)
0x4cdf795c  constant pool (size 60)

kind = HANDLER
major_key = <NoCache>Stub
name = next
compiler = unknown
Instructions (size = 152)
0x4cdf7a00     0  sub csp, jssp, #0x8 (8)
0x4cdf7a04     4  str x3, [jssp, #-8]!
0x4cdf7a08     8  sub csp, jssp, #0x8 (8)
0x4cdf7a0c    12  str x4, [jssp, #-8]!
0x4cdf7a10    16  ldr x3, pc+88 (addr 0x000000004cdf7a68)    ;; object: 0xffffaa1e9a19 Cell for 0
0x4cdf7a14    20  ldur x3, [x3, #7]
0x4cdf7a18    24  cmp x3, #0x0 (0)
0x4cdf7a1c    28  b.ne #+0x30 (addr 0x4cdf7a4c)
0x4cdf7a20    32  tbz w0, #0, #+0x2c (addr 0x4cdf7a4c)
0x4cdf7a24    36  ldr x5, pc+76 (addr 0x000000004cdf7a70)    ;; object: 0xffffaa1d1281 WeakCell for 0x2a8386b1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf7a28    40  ldur x5, [x5, #7]
0x4cdf7a2c    44  tbz w5, #0, #+0x20 (addr 0x4cdf7a4c)
0x4cdf7a30    48  ldursw x4, [x5, #15]
0x4cdf7a34    52  tbnz w4, #23, #+0x18 (addr 0x4cdf7a4c)
0x4cdf7a38    56  ldr x4, [jssp], #8
0x4cdf7a3c    60  ldr x3, [jssp], #8
0x4cdf7a40    64  ldr x2, pc+56 (addr 0x000000004cdf7a78)    ;; object: 0x21005209 <String[4]: next>
0x4cdf7a44    68  ldr x16, pc+60 (addr 0x000000004cdf7a80)    ;; code: HANDLER, StoreTransitionStub, minor: 198659
0x4cdf7a48    72  br x16
0x4cdf7a4c    76  ldr x2, pc+60 (addr 0x000000004cdf7a88)    ;; object: 0x21005209 <String[4]: next>
0x4cdf7a50    80  ldr x4, [jssp], #8
0x4cdf7a54    84  ldr x3, [jssp], #8
0x4cdf7a58    88  ldr x16, pc+56 (addr 0x000000004cdf7a90)    ;; code: BUILTIN
0x4cdf7a5c    92  br x16
0x4cdf7a60    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf7a64   100  d63f03e0       constant
0x4cdf7a68   104  aa1e9a19       constant
0x4cdf7a6c   108  0000ffff       constant
0x4cdf7a70   112  aa1d1281       constant
0x4cdf7a74   116  0000ffff       constant
0x4cdf7a78   120  21005209       constant
0x4cdf7a7c   124  00000000       constant
0x4cdf7a80   128  4cd8b940       constant
0x4cdf7a84   132  00000000       constant
0x4cdf7a88   136  21005209       constant
0x4cdf7a8c   140  00000000       constant
0x4cdf7a90   144  4cd22420       constant
0x4cdf7a94   148  00000000       constant


RelocInfo (size = 12)
0x4cdf7a10  embedded object  (0xffffaa1e9a19 Cell for 0)
0x4cdf7a24  embedded object  (0xffffaa1d1281 WeakCell for 0x2a8386b1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf7a40  embedded object  (0x21005209 <String[4]: next>)
0x4cdf7a44  code target (HANDLER)  (0x4cd8b940)
0x4cdf7a4c  embedded object  (0x21005209 <String[4]: next>)
0x4cdf7a58  code target (BUILTIN)  (0x4cd22420)
0x4cdf7a60  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = entry
compiler = unknown
Instructions (size = 152)
0x4cdf7b00     0  sub csp, jssp, #0x8 (8)
0x4cdf7b04     4  str x3, [jssp, #-8]!
0x4cdf7b08     8  sub csp, jssp, #0x8 (8)
0x4cdf7b0c    12  str x4, [jssp, #-8]!
0x4cdf7b10    16  ldr x3, pc+88 (addr 0x000000004cdf7b68)    ;; object: 0xffffaa1e9a19 Cell for 0
0x4cdf7b14    20  ldur x3, [x3, #7]
0x4cdf7b18    24  cmp x3, #0x0 (0)
0x4cdf7b1c    28  b.ne #+0x30 (addr 0x4cdf7b4c)
0x4cdf7b20    32  tbz w0, #0, #+0x2c (addr 0x4cdf7b4c)
0x4cdf7b24    36  ldr x5, pc+76 (addr 0x000000004cdf7b70)    ;; object: 0xffffaa1d1299 WeakCell for 0x2a838709 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf7b28    40  ldur x5, [x5, #7]
0x4cdf7b2c    44  tbz w5, #0, #+0x20 (addr 0x4cdf7b4c)
0x4cdf7b30    48  ldursw x4, [x5, #15]
0x4cdf7b34    52  tbnz w4, #23, #+0x18 (addr 0x4cdf7b4c)
0x4cdf7b38    56  ldr x4, [jssp], #8
0x4cdf7b3c    60  ldr x3, [jssp], #8
0x4cdf7b40    64  ldr x2, pc+56 (addr 0x000000004cdf7b78)    ;; object: 0xffffaa120e89 <String[5]: entry>
0x4cdf7b44    68  ldr x16, pc+60 (addr 0x000000004cdf7b80)    ;; code: HANDLER, StoreTransitionStub, minor: 198660
0x4cdf7b48    72  br x16
0x4cdf7b4c    76  ldr x2, pc+60 (addr 0x000000004cdf7b88)    ;; object: 0xffffaa120e89 <String[5]: entry>
0x4cdf7b50    80  ldr x4, [jssp], #8
0x4cdf7b54    84  ldr x3, [jssp], #8
0x4cdf7b58    88  ldr x16, pc+56 (addr 0x000000004cdf7b90)    ;; code: BUILTIN
0x4cdf7b5c    92  br x16
0x4cdf7b60    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf7b64   100  d63f03e0       constant
0x4cdf7b68   104  aa1e9a19       constant
0x4cdf7b6c   108  0000ffff       constant
0x4cdf7b70   112  aa1d1299       constant
0x4cdf7b74   116  0000ffff       constant
0x4cdf7b78   120  aa120e89       constant
0x4cdf7b7c   124  0000ffff       constant
0x4cdf7b80   128  4cd8bb80       constant
0x4cdf7b84   132  00000000       constant
0x4cdf7b88   136  aa120e89       constant
0x4cdf7b8c   140  0000ffff       constant
0x4cdf7b90   144  4cd22420       constant
0x4cdf7b94   148  00000000       constant


RelocInfo (size = 12)
0x4cdf7b10  embedded object  (0xffffaa1e9a19 Cell for 0)
0x4cdf7b24  embedded object  (0xffffaa1d1299 WeakCell for 0x2a838709 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf7b40  embedded object  (0xffffaa120e89 <String[5]: entry>)
0x4cdf7b44  code target (HANDLER)  (0x4cd8bb80)
0x4cdf7b4c  embedded object  (0xffffaa120e89 <String[5]: entry>)
0x4cdf7b58  code target (BUILTIN)  (0x4cd22420)
0x4cdf7b60  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = finish
compiler = unknown
Instructions (size = 184)
0x4cdf7c00     0  sub csp, jssp, #0x8 (8)
0x4cdf7c04     4  str x3, [jssp, #-8]!
0x4cdf7c08     8  sub csp, jssp, #0x8 (8)
0x4cdf7c0c    12  str x4, [jssp, #-8]!
0x4cdf7c10    16  ldr x3, pc+112 (addr 0x000000004cdf7c80)    ;; object: 0xffffaa1e9a19 Cell for 0
0x4cdf7c14    20  ldur x3, [x3, #7]
0x4cdf7c18    24  cmp x3, #0x0 (0)
0x4cdf7c1c    28  b.ne #+0x44 (addr 0x4cdf7c60)
0x4cdf7c20    32  tbz w0, #0, #+0x40 (addr 0x4cdf7c60)
0x4cdf7c24    36  ldur x3, [x0, #-1]
0x4cdf7c28    40  ldr x4, pc+96 (addr 0x000000004cdf7c88)    ;; object: 0x210c71e1 WeakCell for 0x2a806989 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf7c2c    44  ldur x4, [x4, #7]
0x4cdf7c30    48  cmp x3, x4
0x4cdf7c34    52  b.ne #+0x2c (addr 0x4cdf7c60)
0x4cdf7c38    56  ldr x5, pc+88 (addr 0x000000004cdf7c90)    ;; object: 0xffffaa1e9ac9 WeakCell for 0x2a840741 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf7c3c    60  ldur x5, [x5, #7]
0x4cdf7c40    64  tbz w5, #0, #+0x20 (addr 0x4cdf7c60)
0x4cdf7c44    68  ldursw x4, [x5, #15]
0x4cdf7c48    72  tbnz w4, #23, #+0x18 (addr 0x4cdf7c60)
0x4cdf7c4c    76  ldr x4, [jssp], #8
0x4cdf7c50    80  ldr x3, [jssp], #8
0x4cdf7c54    84  ldr x2, pc+68 (addr 0x000000004cdf7c98)    ;; object: 0xffffaa10f0e9 <String[6]: finish>
0x4cdf7c58    88  ldr x16, pc+72 (addr 0x000000004cdf7ca0)    ;; code: HANDLER, StoreTransitionStub, minor: 198661
0x4cdf7c5c    92  br x16
0x4cdf7c60    96  ldr x2, pc+72 (addr 0x000000004cdf7ca8)    ;; object: 0xffffaa10f0e9 <String[6]: finish>
0x4cdf7c64   100  ldr x4, [jssp], #8
0x4cdf7c68   104  ldr x3, [jssp], #8
0x4cdf7c6c   108  ldr x16, pc+68 (addr 0x000000004cdf7cb0)    ;; code: BUILTIN
0x4cdf7c70   112  br x16
0x4cdf7c74   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdf7c78   120  d63f03e0       constant
0x4cdf7c7c   124  d503201f       constant
0x4cdf7c80   128  aa1e9a19       constant
0x4cdf7c84   132  0000ffff       constant
0x4cdf7c88   136  210c71e1       constant
0x4cdf7c8c   140  00000000       constant
0x4cdf7c90   144  aa1e9ac9       constant
0x4cdf7c94   148  0000ffff       constant
0x4cdf7c98   152  aa10f0e9       constant
0x4cdf7c9c   156  0000ffff       constant
0x4cdf7ca0   160  4cd8bdc0       constant
0x4cdf7ca4   164  00000000       constant
0x4cdf7ca8   168  aa10f0e9       constant
0x4cdf7cac   172  0000ffff       constant
0x4cdf7cb0   176  4cd22420       constant
0x4cdf7cb4   180  00000000       constant


RelocInfo (size = 13)
0x4cdf7c10  embedded object  (0xffffaa1e9a19 Cell for 0)
0x4cdf7c28  embedded object  (0x210c71e1 WeakCell for 0x2a806989 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf7c38  embedded object  (0xffffaa1e9ac9 WeakCell for 0x2a840741 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf7c54  embedded object  (0xffffaa10f0e9 <String[6]: finish>)
0x4cdf7c58  code target (HANDLER)  (0x4cd8bdc0)
0x4cdf7c60  embedded object  (0xffffaa10f0e9 <String[6]: finish>)
0x4cdf7c6c  code target (BUILTIN)  (0x4cd22420)
0x4cdf7c74  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf7d20     0  tbz w0, #0, #+0x90 (addr 0x4cdf7db0)
0x4cdf7d24     4  mov x2, x0
0x4cdf7d28     8  stur x2, [x1, #199]
0x4cdf7d2c    12  add x3, x1, #0xc7 (199)
0x4cdf7d30    16  and x2, x2, #0xfffffffffff00000
0x4cdf7d34    20  ldr x2, [x2, #8]
0x4cdf7d38    24  tbz w2, #1, #+0x24 (addr 0x4cdf7d5c)
0x4cdf7d3c    28  and x2, x1, #0xfffffffffff00000
0x4cdf7d40    32  ldr x2, [x2, #8]
0x4cdf7d44    36  tbz w2, #2, #+0x18 (addr 0x4cdf7d5c)
0x4cdf7d48    40  sub csp, jssp, #0x8 (8)
0x4cdf7d4c    44  str lr, [jssp, #-8]!
0x4cdf7d50    48  ldr x16, pc+80 (addr 0x000000004cdf7da0)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf7d54    52  blr x16
0x4cdf7d58    56  ldr lr, [jssp], #8
0x4cdf7d5c    60  stur x5, [x1, #-1]
0x4cdf7d60    64  tbz w5, #0, #+0x34 (addr 0x4cdf7d94)
0x4cdf7d64    68  sub x2, x1, #0x1 (1)
0x4cdf7d68    72  and x5, x5, #0xfffffffffff00000
0x4cdf7d6c    76  ldr x5, [x5, #8]
0x4cdf7d70    80  tbz w5, #1, #+0x24 (addr 0x4cdf7d94)
0x4cdf7d74    84  and x5, x1, #0xfffffffffff00000
0x4cdf7d78    88  ldr x5, [x5, #8]
0x4cdf7d7c    92  tbz w5, #2, #+0x18 (addr 0x4cdf7d94)
0x4cdf7d80    96  sub csp, jssp, #0x8 (8)
0x4cdf7d84   100  str lr, [jssp, #-8]!
0x4cdf7d88   104  ldr x16, pc+32 (addr 0x000000004cdf7da8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf7d8c   108  blr x16
0x4cdf7d90   112  ldr lr, [jssp], #8
0x4cdf7d94   116  ret
0x4cdf7d98   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf7d9c   124  d63f03e0       constant
0x4cdf7da0   128  4cd170c0       constant
0x4cdf7da4   132  00000000       constant
0x4cdf7da8   136  4cd38080       constant
0x4cdf7dac   140  00000000       constant
0x4cdf7db0   144  movz x16, #0x0
0x4cdf7db4   148  sub csp, jssp, #0x10 (16)
0x4cdf7db8   152  stp fp, lr, [jssp, #-16]!
0x4cdf7dbc   156  bl #+0x4 (addr 0x4cdf7dc0)
0x4cdf7dc0   160  movz x17, #0xa00000000
0x4cdf7dc4   164  sub csp, jssp, #0x10 (16)
0x4cdf7dc8   168  stp x17, cp, [jssp, #-16]!
0x4cdf7dcc   172  add fp, jssp, #0x10 (16)
0x4cdf7dd0   176  ldr x17, pc+24 (addr 0x000000004cdf7de8)    ;; lazy deoptimization bailout 0
0x4cdf7dd4   180  add x17, x17, x16
0x4cdf7dd8   184  br x17
0x4cdf7ddc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf7de0   192  d63f03e0       constant
0x4cdf7de4   196  d503201f       constant
0x4cdf7de8   200  4cb06000       constant
0x4cdf7dec   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf7d50  code target (STUB)  (0x4cd170c0)
0x4cdf7d88  code target (STUB)  (0x4cd38080)
0x4cdf7d98  constant pool (size 24)
0x4cdf7dd0  runtime entry
0x4cdf7ddc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 216)
0x4cdf7d20     0  tbz w0, #0, #+0x90 (addr 0x4cdf7db0)
0x4cdf7d24     4  mov x2, x0
0x4cdf7d28     8  stur x2, [x1, #199]
0x4cdf7d2c    12  add x3, x1, #0xc7 (199)
0x4cdf7d30    16  and x2, x2, #0xfffffffffff00000
0x4cdf7d34    20  ldr x2, [x2, #8]
0x4cdf7d38    24  tbz w2, #1, #+0x24 (addr 0x4cdf7d5c)
0x4cdf7d3c    28  and x2, x1, #0xfffffffffff00000
0x4cdf7d40    32  ldr x2, [x2, #8]
0x4cdf7d44    36  tbz w2, #2, #+0x18 (addr 0x4cdf7d5c)
0x4cdf7d48    40  sub csp, jssp, #0x8 (8)
0x4cdf7d4c    44  str lr, [jssp, #-8]!
0x4cdf7d50    48  ldr x16, pc+80 (addr 0x000000004cdf7da0)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf7d54    52  blr x16
0x4cdf7d58    56  ldr lr, [jssp], #8
0x4cdf7d5c    60  stur x5, [x1, #-1]
0x4cdf7d60    64  tbz w5, #0, #+0x34 (addr 0x4cdf7d94)
0x4cdf7d64    68  sub x2, x1, #0x1 (1)
0x4cdf7d68    72  and x5, x5, #0xfffffffffff00000
0x4cdf7d6c    76  ldr x5, [x5, #8]
0x4cdf7d70    80  tbz w5, #1, #+0x24 (addr 0x4cdf7d94)
0x4cdf7d74    84  and x5, x1, #0xfffffffffff00000
0x4cdf7d78    88  ldr x5, [x5, #8]
0x4cdf7d7c    92  tbz w5, #2, #+0x18 (addr 0x4cdf7d94)
0x4cdf7d80    96  sub csp, jssp, #0x8 (8)
0x4cdf7d84   100  str lr, [jssp, #-8]!
0x4cdf7d88   104  ldr x16, pc+32 (addr 0x000000004cdf7da8)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf7d8c   108  blr x16
0x4cdf7d90   112  ldr lr, [jssp], #8
0x4cdf7d94   116  ret
0x4cdf7d98   120  580000bf       constant pool begin (num_const = 5)    ;; constant pool
0x4cdf7d9c   124  d63f03e0       constant
0x4cdf7da0   128  4cd170c0       constant
0x4cdf7da4   132  00000000       constant
0x4cdf7da8   136  4cd38080       constant
0x4cdf7dac   140  00000000       constant
0x4cdf7db0   144  movz x16, #0x0
0x4cdf7db4   148  sub csp, jssp, #0x10 (16)
0x4cdf7db8   152  stp fp, lr, [jssp, #-16]!
0x4cdf7dbc   156  bl #+0x4 (addr 0x4cdf7dc0)
0x4cdf7dc0   160  movz x17, #0xa00000000
0x4cdf7dc4   164  sub csp, jssp, #0x10 (16)
0x4cdf7dc8   168  stp x17, cp, [jssp, #-16]!
0x4cdf7dcc   172  add fp, jssp, #0x10 (16)
0x4cdf7dd0   176  ldr x17, pc+24 (addr 0x000000004cdf7de8)    ;; lazy deoptimization bailout 0
0x4cdf7dd4   180  add x17, x17, x16
0x4cdf7dd8   184  br x17
0x4cdf7ddc   188  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf7de0   192  d63f03e0       constant
0x4cdf7de4   196  d503201f       constant
0x4cdf7de8   200  4cb06000       constant
0x4cdf7dec   204  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf7d50  code target (STUB)  (0x4cd170c0)
0x4cdf7d88  code target (STUB)  (0x4cd38080)
0x4cdf7d98  constant pool (size 24)
0x4cdf7dd0  runtime entry
0x4cdf7ddc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = corkedRequestsFree
compiler = unknown
Instructions (size = 184)
0x4cdf7e60     0  sub csp, jssp, #0x8 (8)
0x4cdf7e64     4  str x3, [jssp, #-8]!
0x4cdf7e68     8  sub csp, jssp, #0x8 (8)
0x4cdf7e6c    12  str x4, [jssp, #-8]!
0x4cdf7e70    16  ldr x3, pc+112 (addr 0x000000004cdf7ee0)    ;; object: 0xffffaa1e8cb1 Cell for 0
0x4cdf7e74    20  ldur x3, [x3, #7]
0x4cdf7e78    24  cmp x3, #0x0 (0)
0x4cdf7e7c    28  b.ne #+0x44 (addr 0x4cdf7ec0)
0x4cdf7e80    32  tbz w0, #0, #+0x40 (addr 0x4cdf7ec0)
0x4cdf7e84    36  ldur x3, [x0, #-1]
0x4cdf7e88    40  ldr x4, pc+96 (addr 0x000000004cdf7ee8)    ;; object: 0xffffaa1e9ac9 WeakCell for 0x2a840741 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf7e8c    44  ldur x4, [x4, #7]
0x4cdf7e90    48  cmp x3, x4
0x4cdf7e94    52  b.ne #+0x2c (addr 0x4cdf7ec0)
0x4cdf7e98    56  ldr x5, pc+88 (addr 0x000000004cdf7ef0)    ;; object: 0xffffaa1e9b01 WeakCell for 0x2a840799 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf7e9c    60  ldur x5, [x5, #7]
0x4cdf7ea0    64  tbz w5, #0, #+0x20 (addr 0x4cdf7ec0)
0x4cdf7ea4    68  ldursw x4, [x5, #15]
0x4cdf7ea8    72  tbnz w4, #23, #+0x18 (addr 0x4cdf7ec0)
0x4cdf7eac    76  ldr x4, [jssp], #8
0x4cdf7eb0    80  ldr x3, [jssp], #8
0x4cdf7eb4    84  ldr x2, pc+68 (addr 0x000000004cdf7ef8)    ;; object: 0xffffaa122ab9 <String[18]: corkedRequestsFree>
0x4cdf7eb8    88  ldr x16, pc+72 (addr 0x000000004cdf7f00)    ;; code: HANDLER, StoreTransitionStub, minor: 198681
0x4cdf7ebc    92  br x16
0x4cdf7ec0    96  ldr x2, pc+72 (addr 0x000000004cdf7f08)    ;; object: 0xffffaa122ab9 <String[18]: corkedRequestsFree>
0x4cdf7ec4   100  ldr x4, [jssp], #8
0x4cdf7ec8   104  ldr x3, [jssp], #8
0x4cdf7ecc   108  ldr x16, pc+68 (addr 0x000000004cdf7f10)    ;; code: BUILTIN
0x4cdf7ed0   112  br x16
0x4cdf7ed4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdf7ed8   120  d63f03e0       constant
0x4cdf7edc   124  d503201f       constant
0x4cdf7ee0   128  aa1e8cb1       constant
0x4cdf7ee4   132  0000ffff       constant
0x4cdf7ee8   136  aa1e9ac9       constant
0x4cdf7eec   140  0000ffff       constant
0x4cdf7ef0   144  aa1e9b01       constant
0x4cdf7ef4   148  0000ffff       constant
0x4cdf7ef8   152  aa122ab9       constant
0x4cdf7efc   156  0000ffff       constant
0x4cdf7f00   160  4cdf7d20       constant
0x4cdf7f04   164  00000000       constant
0x4cdf7f08   168  aa122ab9       constant
0x4cdf7f0c   172  0000ffff       constant
0x4cdf7f10   176  4cd22420       constant
0x4cdf7f14   180  00000000       constant


RelocInfo (size = 13)
0x4cdf7e70  embedded object  (0xffffaa1e8cb1 Cell for 0)
0x4cdf7e88  embedded object  (0xffffaa1e9ac9 WeakCell for 0x2a840741 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf7e98  embedded object  (0xffffaa1e9b01 WeakCell for 0x2a840799 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf7eb4  embedded object  (0xffffaa122ab9 <String[18]: corkedRequestsFree>)
0x4cdf7eb8  code target (HANDLER)  (0x4cdf7d20)
0x4cdf7ec0  embedded object  (0xffffaa122ab9 <String[18]: corkedRequestsFree>)
0x4cdf7ecc  code target (BUILTIN)  (0x4cd22420)
0x4cdf7ed4  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = _writableState
compiler = unknown
Instructions (size = 184)
0x4cdf7f80     0  sub csp, jssp, #0x8 (8)
0x4cdf7f84     4  str x3, [jssp, #-8]!
0x4cdf7f88     8  sub csp, jssp, #0x8 (8)
0x4cdf7f8c    12  str x4, [jssp, #-8]!
0x4cdf7f90    16  ldr x3, pc+112 (addr 0x000000004cdf8000)    ;; object: 0xffffaa1e88d1 Cell for 0
0x4cdf7f94    20  ldur x3, [x3, #7]
0x4cdf7f98    24  cmp x3, #0x0 (0)
0x4cdf7f9c    28  b.ne #+0x44 (addr 0x4cdf7fe0)
0x4cdf7fa0    32  tbz w0, #0, #+0x40 (addr 0x4cdf7fe0)
0x4cdf7fa4    36  ldur x3, [x0, #-1]
0x4cdf7fa8    40  ldr x4, pc+96 (addr 0x000000004cdf8008)    ;; object: 0xffffaa1e9b01 WeakCell for 0x2a840799 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf7fac    44  ldur x4, [x4, #7]
0x4cdf7fb0    48  cmp x3, x4
0x4cdf7fb4    52  b.ne #+0x2c (addr 0x4cdf7fe0)
0x4cdf7fb8    56  ldr x5, pc+88 (addr 0x000000004cdf8010)    ;; object: 0xffffaa1e9bf1 WeakCell for 0x2a8407f1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf7fbc    60  ldur x5, [x5, #7]
0x4cdf7fc0    64  tbz w5, #0, #+0x20 (addr 0x4cdf7fe0)
0x4cdf7fc4    68  ldursw x4, [x5, #15]
0x4cdf7fc8    72  tbnz w4, #23, #+0x18 (addr 0x4cdf7fe0)
0x4cdf7fcc    76  ldr x4, [jssp], #8
0x4cdf7fd0    80  ldr x3, [jssp], #8
0x4cdf7fd4    84  ldr x2, pc+68 (addr 0x000000004cdf8018)    ;; object: 0x210f92c9 <String[14]: _writableState>
0x4cdf7fd8    88  ldr x16, pc+72 (addr 0x000000004cdf8020)    ;; code: HANDLER, StoreTransitionStub, minor: 196611
0x4cdf7fdc    92  br x16
0x4cdf7fe0    96  ldr x2, pc+72 (addr 0x000000004cdf8028)    ;; object: 0x210f92c9 <String[14]: _writableState>
0x4cdf7fe4   100  ldr x4, [jssp], #8
0x4cdf7fe8   104  ldr x3, [jssp], #8
0x4cdf7fec   108  ldr x16, pc+68 (addr 0x000000004cdf8030)    ;; code: BUILTIN
0x4cdf7ff0   112  br x16
0x4cdf7ff4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdf7ff8   120  d63f03e0       constant
0x4cdf7ffc   124  d503201f       constant
0x4cdf8000   128  aa1e88d1       constant
0x4cdf8004   132  0000ffff       constant
0x4cdf8008   136  aa1e9b01       constant
0x4cdf800c   140  0000ffff       constant
0x4cdf8010   144  aa1e9bf1       constant
0x4cdf8014   148  0000ffff       constant
0x4cdf8018   152  210f92c9       constant
0x4cdf801c   156  00000000       constant
0x4cdf8020   160  4cd99940       constant
0x4cdf8024   164  00000000       constant
0x4cdf8028   168  210f92c9       constant
0x4cdf802c   172  00000000       constant
0x4cdf8030   176  4cd22420       constant
0x4cdf8034   180  00000000       constant


RelocInfo (size = 13)
0x4cdf7f90  embedded object  (0xffffaa1e88d1 Cell for 0)
0x4cdf7fa8  embedded object  (0xffffaa1e9b01 WeakCell for 0x2a840799 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf7fb8  embedded object  (0xffffaa1e9bf1 WeakCell for 0x2a8407f1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf7fd4  embedded object  (0x210f92c9 <String[14]: _writableState>)
0x4cdf7fd8  code target (HANDLER)  (0x4cd99940)
0x4cdf7fe0  embedded object  (0x210f92c9 <String[14]: _writableState>)
0x4cdf7fec  code target (BUILTIN)  (0x4cd22420)
0x4cdf7ff4  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = writable
compiler = unknown
Instructions (size = 152)
0x4cdf80a0     0  sub csp, jssp, #0x8 (8)
0x4cdf80a4     4  str x3, [jssp, #-8]!
0x4cdf80a8     8  sub csp, jssp, #0x8 (8)
0x4cdf80ac    12  str x4, [jssp, #-8]!
0x4cdf80b0    16  ldr x3, pc+88 (addr 0x000000004cdf8108)    ;; object: 0xffffaa1e88d1 Cell for 0
0x4cdf80b4    20  ldur x3, [x3, #7]
0x4cdf80b8    24  cmp x3, #0x0 (0)
0x4cdf80bc    28  b.ne #+0x30 (addr 0x4cdf80ec)
0x4cdf80c0    32  tbz w0, #0, #+0x2c (addr 0x4cdf80ec)
0x4cdf80c4    36  ldr x5, pc+76 (addr 0x000000004cdf8110)    ;; object: 0xffffaa1e9c29 WeakCell for 0x2a840849 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf80c8    40  ldur x5, [x5, #7]
0x4cdf80cc    44  tbz w5, #0, #+0x20 (addr 0x4cdf80ec)
0x4cdf80d0    48  ldursw x4, [x5, #15]
0x4cdf80d4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf80ec)
0x4cdf80d8    56  ldr x4, [jssp], #8
0x4cdf80dc    60  ldr x3, [jssp], #8
0x4cdf80e0    64  ldr x2, pc+56 (addr 0x000000004cdf8118)    ;; object: 0x210057a9 <String[8]: writable>
0x4cdf80e4    68  ldr x16, pc+60 (addr 0x000000004cdf8120)    ;; code: HANDLER, StoreTransitionStub, minor: 196612
0x4cdf80e8    72  br x16
0x4cdf80ec    76  ldr x2, pc+60 (addr 0x000000004cdf8128)    ;; object: 0x210057a9 <String[8]: writable>
0x4cdf80f0    80  ldr x4, [jssp], #8
0x4cdf80f4    84  ldr x3, [jssp], #8
0x4cdf80f8    88  ldr x16, pc+56 (addr 0x000000004cdf8130)    ;; code: BUILTIN
0x4cdf80fc    92  br x16
0x4cdf8100    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf8104   100  d63f03e0       constant
0x4cdf8108   104  aa1e88d1       constant
0x4cdf810c   108  0000ffff       constant
0x4cdf8110   112  aa1e9c29       constant
0x4cdf8114   116  0000ffff       constant
0x4cdf8118   120  210057a9       constant
0x4cdf811c   124  00000000       constant
0x4cdf8120   128  4cd9a100       constant
0x4cdf8124   132  00000000       constant
0x4cdf8128   136  210057a9       constant
0x4cdf812c   140  00000000       constant
0x4cdf8130   144  4cd22420       constant
0x4cdf8134   148  00000000       constant


RelocInfo (size = 12)
0x4cdf80b0  embedded object  (0xffffaa1e88d1 Cell for 0)
0x4cdf80c4  embedded object  (0xffffaa1e9c29 WeakCell for 0x2a840849 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf80e0  embedded object  (0x210057a9 <String[8]: writable>)
0x4cdf80e4  code target (HANDLER)  (0x4cd9a100)
0x4cdf80ec  embedded object  (0x210057a9 <String[8]: writable>)
0x4cdf80f8  code target (BUILTIN)  (0x4cd22420)
0x4cdf8100  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0x4cdf81a0     0  tbz w0, #0, #+0x50 (addr 0x4cdf81f0)
0x4cdf81a4     4  mov x2, x0
0x4cdf81a8     8  stur x2, [x1, #79]
0x4cdf81ac    12  add x3, x1, #0x4f (79)
0x4cdf81b0    16  and x2, x2, #0xfffffffffff00000
0x4cdf81b4    20  ldr x2, [x2, #8]
0x4cdf81b8    24  tbz w2, #1, #+0x24 (addr 0x4cdf81dc)
0x4cdf81bc    28  and x2, x1, #0xfffffffffff00000
0x4cdf81c0    32  ldr x2, [x2, #8]
0x4cdf81c4    36  tbz w2, #2, #+0x18 (addr 0x4cdf81dc)
0x4cdf81c8    40  sub csp, jssp, #0x8 (8)
0x4cdf81cc    44  str lr, [jssp, #-8]!
0x4cdf81d0    48  ldr x16, pc+24 (addr 0x000000004cdf81e8)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf81d4    52  blr x16
0x4cdf81d8    56  ldr lr, [jssp], #8
0x4cdf81dc    60  ret
0x4cdf81e0    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf81e4    68  d63f03e0       constant
0x4cdf81e8    72  4cd170c0       constant
0x4cdf81ec    76  00000000       constant
0x4cdf81f0    80  movz x16, #0x0
0x4cdf81f4    84  sub csp, jssp, #0x10 (16)
0x4cdf81f8    88  stp fp, lr, [jssp, #-16]!
0x4cdf81fc    92  bl #+0x4 (addr 0x4cdf8200)
0x4cdf8200    96  movz x17, #0xa00000000
0x4cdf8204   100  sub csp, jssp, #0x10 (16)
0x4cdf8208   104  stp x17, cp, [jssp, #-16]!
0x4cdf820c   108  add fp, jssp, #0x10 (16)
0x4cdf8210   112  ldr x17, pc+24 (addr 0x000000004cdf8228)    ;; lazy deoptimization bailout 0
0x4cdf8214   116  add x17, x17, x16
0x4cdf8218   120  br x17
0x4cdf821c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf8220   128  d63f03e0       constant
0x4cdf8224   132  d503201f       constant
0x4cdf8228   136  4cb06000       constant
0x4cdf822c   140  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf81d0  code target (STUB)  (0x4cd170c0)
0x4cdf81e0  constant pool (size 16)
0x4cdf8210  runtime entry
0x4cdf821c  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 152)
0x4cdf81a0     0  tbz w0, #0, #+0x50 (addr 0x4cdf81f0)
0x4cdf81a4     4  mov x2, x0
0x4cdf81a8     8  stur x2, [x1, #79]
0x4cdf81ac    12  add x3, x1, #0x4f (79)
0x4cdf81b0    16  and x2, x2, #0xfffffffffff00000
0x4cdf81b4    20  ldr x2, [x2, #8]
0x4cdf81b8    24  tbz w2, #1, #+0x24 (addr 0x4cdf81dc)
0x4cdf81bc    28  and x2, x1, #0xfffffffffff00000
0x4cdf81c0    32  ldr x2, [x2, #8]
0x4cdf81c4    36  tbz w2, #2, #+0x18 (addr 0x4cdf81dc)
0x4cdf81c8    40  sub csp, jssp, #0x8 (8)
0x4cdf81cc    44  str lr, [jssp, #-8]!
0x4cdf81d0    48  ldr x16, pc+24 (addr 0x000000004cdf81e8)    ;; code: STUB, RecordWriteStub, minor: 68673
0x4cdf81d4    52  blr x16
0x4cdf81d8    56  ldr lr, [jssp], #8
0x4cdf81dc    60  ret
0x4cdf81e0    64  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf81e4    68  d63f03e0       constant
0x4cdf81e8    72  4cd170c0       constant
0x4cdf81ec    76  00000000       constant
0x4cdf81f0    80  movz x16, #0x0
0x4cdf81f4    84  sub csp, jssp, #0x10 (16)
0x4cdf81f8    88  stp fp, lr, [jssp, #-16]!
0x4cdf81fc    92  bl #+0x4 (addr 0x4cdf8200)
0x4cdf8200    96  movz x17, #0xa00000000
0x4cdf8204   100  sub csp, jssp, #0x10 (16)
0x4cdf8208   104  stp x17, cp, [jssp, #-16]!
0x4cdf820c   108  add fp, jssp, #0x10 (16)
0x4cdf8210   112  ldr x17, pc+24 (addr 0x000000004cdf8228)    ;; lazy deoptimization bailout 0
0x4cdf8214   116  add x17, x17, x16
0x4cdf8218   120  br x17
0x4cdf821c   124  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf8220   128  d63f03e0       constant
0x4cdf8224   132  d503201f       constant
0x4cdf8228   136  4cb06000       constant
0x4cdf822c   140  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf81d0  code target (STUB)  (0x4cd170c0)
0x4cdf81e0  constant pool (size 16)
0x4cdf8210  runtime entry
0x4cdf821c  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = _events
compiler = unknown
Instructions (size = 120)
0x4cdf82a0     0  sub csp, jssp, #0x8 (8)
0x4cdf82a4     4  str x3, [jssp, #-8]!
0x4cdf82a8     8  sub csp, jssp, #0x8 (8)
0x4cdf82ac    12  str x0, [jssp, #-8]!
0x4cdf82b0    16  ldr x0, pc+72 (addr 0x000000004cdf82f8)    ;; object: 0xffffaa1e9d31 Cell for 0
0x4cdf82b4    20  ldur x0, [x0, #7]
0x4cdf82b8    24  cmp x0, #0x0 (0)
0x4cdf82bc    28  b.ne #+0x14 (addr 0x4cdf82d0)
0x4cdf82c0    32  ldr x3, pc+64 (addr 0x000000004cdf8300)    ;; object: 0xffffaa1e9d41 WeakCell for 0xffffaa1b1c41 <an Object with map 0x2a81bf39>
0x4cdf82c4    36  ldur x3, [x3, #7]
0x4cdf82c8    40  tbz w3, #0, #+0x8 (addr 0x4cdf82d0)
0x4cdf82cc    44  b #+0x14 (addr 0x4cdf82e0)
0x4cdf82d0    48  ldr x0, [jssp], #8
0x4cdf82d4    52  ldr x3, [jssp], #8
0x4cdf82d8    56  ldr x16, pc+48 (addr 0x000000004cdf8308)    ;; code: BUILTIN
0x4cdf82dc    60  br x16
0x4cdf82e0    64  add jssp, jssp, #0x10 (16)
0x4cdf82e4    68  mov x1, x3
0x4cdf82e8    72  ldr x16, pc+40 (addr 0x000000004cdf8310)    ;; code: HANDLER, LoadFieldStub, minor: 2052
0x4cdf82ec    76  br x16
0x4cdf82f0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdf82f4    84  d63f03e0       constant
0x4cdf82f8    88  aa1e9d31       constant
0x4cdf82fc    92  0000ffff       constant
0x4cdf8300    96  aa1e9d41       constant
0x4cdf8304   100  0000ffff       constant
0x4cdf8308   104  4cd222e0       constant
0x4cdf830c   108  00000000       constant
0x4cdf8310   112  4cd78da0       constant
0x4cdf8314   116  00000000       constant


RelocInfo (size = 10)
0x4cdf82b0  embedded object  (0xffffaa1e9d31 Cell for 0)
0x4cdf82c0  embedded object  (0xffffaa1e9d41 WeakCell for 0xffffaa1b1c41 <an Object with map 0x2a81bf39>)
0x4cdf82d8  code target (BUILTIN)  (0x4cd222e0)
0x4cdf82e8  code target (HANDLER)  (0x4cd78da0)
0x4cdf82f0  constant pool (size 40)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 160)
0x4cdf8380     0  tbz w0, #0, #+0x58 (addr 0x4cdf83d8)
0x4cdf8384     4  mov x2, x0
0x4cdf8388     8  ldur x4, [x1, #7]
0x4cdf838c    12  stur x2, [x4, #15]
0x4cdf8390    16  add x3, x4, #0xf (15)
0x4cdf8394    20  and x2, x2, #0xfffffffffff00000
0x4cdf8398    24  ldr x2, [x2, #8]
0x4cdf839c    28  tbz w2, #1, #+0x24 (addr 0x4cdf83c0)
0x4cdf83a0    32  and x2, x4, #0xfffffffffff00000
0x4cdf83a4    36  ldr x2, [x2, #8]
0x4cdf83a8    40  tbz w2, #2, #+0x18 (addr 0x4cdf83c0)
0x4cdf83ac    44  sub csp, jssp, #0x8 (8)
0x4cdf83b0    48  str lr, [jssp, #-8]!
0x4cdf83b4    52  ldr x16, pc+28 (addr 0x000000004cdf83d0)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdf83b8    56  blr x16
0x4cdf83bc    60  ldr lr, [jssp], #8
0x4cdf83c0    64  ret
0x4cdf83c4    68  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf83c8    72  d63f03e0       constant
0x4cdf83cc    76  d503201f       constant
0x4cdf83d0    80  4cd378a0       constant
0x4cdf83d4    84  00000000       constant
0x4cdf83d8    88  movz x16, #0x0
0x4cdf83dc    92  sub csp, jssp, #0x10 (16)
0x4cdf83e0    96  stp fp, lr, [jssp, #-16]!
0x4cdf83e4   100  bl #+0x4 (addr 0x4cdf83e8)
0x4cdf83e8   104  movz x17, #0xa00000000
0x4cdf83ec   108  sub csp, jssp, #0x10 (16)
0x4cdf83f0   112  stp x17, cp, [jssp, #-16]!
0x4cdf83f4   116  add fp, jssp, #0x10 (16)
0x4cdf83f8   120  ldr x17, pc+24 (addr 0x000000004cdf8410)    ;; lazy deoptimization bailout 0
0x4cdf83fc   124  add x17, x17, x16
0x4cdf8400   128  br x17
0x4cdf8404   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf8408   136  d63f03e0       constant
0x4cdf840c   140  d503201f       constant
0x4cdf8410   144  4cb06000       constant
0x4cdf8414   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf83b4  code target (STUB)  (0x4cd378a0)
0x4cdf83c4  constant pool (size 20)
0x4cdf83f8  runtime entry
0x4cdf8404  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 160)
0x4cdf8380     0  tbz w0, #0, #+0x58 (addr 0x4cdf83d8)
0x4cdf8384     4  mov x2, x0
0x4cdf8388     8  ldur x4, [x1, #7]
0x4cdf838c    12  stur x2, [x4, #15]
0x4cdf8390    16  add x3, x4, #0xf (15)
0x4cdf8394    20  and x2, x2, #0xfffffffffff00000
0x4cdf8398    24  ldr x2, [x2, #8]
0x4cdf839c    28  tbz w2, #1, #+0x24 (addr 0x4cdf83c0)
0x4cdf83a0    32  and x2, x4, #0xfffffffffff00000
0x4cdf83a4    36  ldr x2, [x2, #8]
0x4cdf83a8    40  tbz w2, #2, #+0x18 (addr 0x4cdf83c0)
0x4cdf83ac    44  sub csp, jssp, #0x8 (8)
0x4cdf83b0    48  str lr, [jssp, #-8]!
0x4cdf83b4    52  ldr x16, pc+28 (addr 0x000000004cdf83d0)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdf83b8    56  blr x16
0x4cdf83bc    60  ldr lr, [jssp], #8
0x4cdf83c0    64  ret
0x4cdf83c4    68  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf83c8    72  d63f03e0       constant
0x4cdf83cc    76  d503201f       constant
0x4cdf83d0    80  4cd378a0       constant
0x4cdf83d4    84  00000000       constant
0x4cdf83d8    88  movz x16, #0x0
0x4cdf83dc    92  sub csp, jssp, #0x10 (16)
0x4cdf83e0    96  stp fp, lr, [jssp, #-16]!
0x4cdf83e4   100  bl #+0x4 (addr 0x4cdf83e8)
0x4cdf83e8   104  movz x17, #0xa00000000
0x4cdf83ec   108  sub csp, jssp, #0x10 (16)
0x4cdf83f0   112  stp x17, cp, [jssp, #-16]!
0x4cdf83f4   116  add fp, jssp, #0x10 (16)
0x4cdf83f8   120  ldr x17, pc+24 (addr 0x000000004cdf8410)    ;; lazy deoptimization bailout 0
0x4cdf83fc   124  add x17, x17, x16
0x4cdf8400   128  br x17
0x4cdf8404   132  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf8408   136  d63f03e0       constant
0x4cdf840c   140  d503201f       constant
0x4cdf8410   144  4cb06000       constant
0x4cdf8414   148  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf83b4  code target (STUB)  (0x4cd378a0)
0x4cdf83c4  constant pool (size 20)
0x4cdf83f8  runtime entry
0x4cdf8404  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = BOOLEAN*BOOLEAN -> BOOLEAN
compare_operation = EQ_STRICT
name = CompareICStub
compiler = unknown
Instructions (size = 184)
0x4cdf8480     0  tbz w1, #0, #+0x30 (addr 0x4cdf84b0)
0x4cdf8484     4  ldur x2, [x1, #-1]
0x4cdf8488     8  ldr x16, [x26, #840]
0x4cdf848c    12  cmp x2, x16
0x4cdf8490    16  b.ne #+0x20 (addr 0x4cdf84b0)
0x4cdf8494    20  tbz w0, #0, #+0x1c (addr 0x4cdf84b0)
0x4cdf8498    24  ldur x3, [x0, #-1]
0x4cdf849c    28  ldr x16, [x26, #840]
0x4cdf84a0    32  cmp x3, x16
0x4cdf84a4    36  b.ne #+0xc (addr 0x4cdf84b0)
0x4cdf84a8    40  sub x0, x1, x0
0x4cdf84ac    44  ret
0x4cdf84b0    48  movz x16, #0xc00000000
0x4cdf84b4    52  sub csp, jssp, #0x10 (16)
0x4cdf84b8    56  stp fp, lr, [jssp, #-16]!
0x4cdf84bc    60  sub csp, jssp, #0x10 (16)
0x4cdf84c0    64  str x16, [jssp, #-8]!
0x4cdf84c4    68  ldr x17, pc+92 (addr 0x000000004cdf8520)    ;; object: 0x4cdf8421 <Code: COMPARE_IC>
0x4cdf84c8    72  sub csp, jssp, #0x10 (16)
0x4cdf84cc    76  str x17, [jssp, #-8]!
0x4cdf84d0    80  add fp, jssp, #0x10 (16)
0x4cdf84d4    84  sub csp, jssp, #0x18 (24)
0x4cdf84d8    88  stp lr, x0, [jssp, #-24]!
0x4cdf84dc    92  str x1, [jssp, #16]
0x4cdf84e0    96  movz x10, #0x2f00000000
0x4cdf84e4   100  sub csp, jssp, #0x18 (24)
0x4cdf84e8   104  stp x10, x0, [jssp, #-24]!
0x4cdf84ec   108  str x1, [jssp, #16]
0x4cdf84f0   112  movz x0, #0x3
0x4cdf84f4   116  ldr x1, pc+52 (addr 0x000000004cdf8528)    ;; external reference (Runtime::CompareIC_Miss)
0x4cdf84f8   120  ldr x16, pc+56 (addr 0x000000004cdf8530)    ;; code: STUB, CEntryStub, minor: 4
0x4cdf84fc   124  blr x16
0x4cdf8500   128  add x11, x0, #0x5f (95)
0x4cdf8504   132  ldr x1, [jssp, #16]
0x4cdf8508   136  ldp lr, x0, [jssp], #24
0x4cdf850c   140  mov jssp, fp
0x4cdf8510   144  ldp fp, lr, [jssp], #16
0x4cdf8514   148  br x11
0x4cdf8518   152  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cdf851c   156  d63f03e0       constant
0x4cdf8520   160  4cdf8421       constant
0x4cdf8524   164  00000000       constant
0x4cdf8528   168  00c8a980       constant
0x4cdf852c   172  00000000       constant
0x4cdf8530   176  4cd06060       constant
0x4cdf8534   180  00000000       constant


RelocInfo (size = 12)
0x4cdf84c4  embedded object  (0x4cdf8421 <Code: COMPARE_IC>)
0x4cdf84f4  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4cdf84f8  code target (STUB)  (0x4cd06060)
0x4cdf8518  constant pool (size 32)


kind = HANDLER
major_key = <NoCache>Stub
name = end
compiler = unknown
Instructions (size = 152)
0x4cdf9140     0  sub csp, jssp, #0x8 (8)
0x4cdf9144     4  str x3, [jssp, #-8]!
0x4cdf9148     8  sub csp, jssp, #0x8 (8)
0x4cdf914c    12  str x4, [jssp, #-8]!
0x4cdf9150    16  ldr x3, pc+88 (addr 0x000000004cdf91a8)    ;; object: 0xffffaa1d1851 Cell for 0
0x4cdf9154    20  ldur x3, [x3, #7]
0x4cdf9158    24  cmp x3, #0x0 (0)
0x4cdf915c    28  b.ne #+0x30 (addr 0x4cdf918c)
0x4cdf9160    32  tbz w0, #0, #+0x2c (addr 0x4cdf918c)
0x4cdf9164    36  ldr x5, pc+76 (addr 0x000000004cdf91b0)    ;; object: 0xffffaa1ea599 WeakCell for 0x2a840951 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf9168    40  ldur x5, [x5, #7]
0x4cdf916c    44  tbz w5, #0, #+0x20 (addr 0x4cdf918c)
0x4cdf9170    48  ldursw x4, [x5, #15]
0x4cdf9174    52  tbnz w4, #23, #+0x18 (addr 0x4cdf918c)
0x4cdf9178    56  ldr x4, [jssp], #8
0x4cdf917c    60  ldr x3, [jssp], #8
0x4cdf9180    64  ldr x2, pc+56 (addr 0x000000004cdf91b8)    ;; object: 0x21093989 <String[3]: end>
0x4cdf9184    68  ldr x16, pc+60 (addr 0x000000004cdf91c0)    ;; code: HANDLER, StoreTransitionStub, minor: 198659
0x4cdf9188    72  br x16
0x4cdf918c    76  ldr x2, pc+60 (addr 0x000000004cdf91c8)    ;; object: 0x21093989 <String[3]: end>
0x4cdf9190    80  ldr x4, [jssp], #8
0x4cdf9194    84  ldr x3, [jssp], #8
0x4cdf9198    88  ldr x16, pc+56 (addr 0x000000004cdf91d0)    ;; code: BUILTIN
0x4cdf919c    92  br x16
0x4cdf91a0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf91a4   100  d63f03e0       constant
0x4cdf91a8   104  aa1d1851       constant
0x4cdf91ac   108  0000ffff       constant
0x4cdf91b0   112  aa1ea599       constant
0x4cdf91b4   116  0000ffff       constant
0x4cdf91b8   120  21093989       constant
0x4cdf91bc   124  00000000       constant
0x4cdf91c0   128  4cd8b940       constant
0x4cdf91c4   132  00000000       constant
0x4cdf91c8   136  21093989       constant
0x4cdf91cc   140  00000000       constant
0x4cdf91d0   144  4cd22420       constant
0x4cdf91d4   148  00000000       constant


RelocInfo (size = 12)
0x4cdf9150  embedded object  (0xffffaa1d1851 Cell for 0)
0x4cdf9164  embedded object  (0xffffaa1ea599 WeakCell for 0x2a840951 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf9180  embedded object  (0x21093989 <String[3]: end>)
0x4cdf9184  code target (HANDLER)  (0x4cd8b940)
0x4cdf918c  embedded object  (0x21093989 <String[3]: end>)
0x4cdf9198  code target (BUILTIN)  (0x4cd22420)
0x4cdf91a0  constant pool (size 56)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0x4cdf9240     0  ldur x0, [x1, #95]
0x4cdf9244     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadFieldStub
name = LoadFieldStub
compiler = crankshaft
Instructions (size = 16)
0x4cdf9240     0  ldur x0, [x1, #95]
0x4cdf9244     4  ret


Safepoints (size = 8)

RelocInfo (size = 0)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0x4cdf92c0     0  mov x5, x0
0x4cdf92c4     4  tbnz w5, #0, #+0xc (addr 0x4cdf92d0)
0x4cdf92c8     8  stur x5, [x1, #95]
0x4cdf92cc    12  ret
0x4cdf92d0    16  movz x16, #0x0
0x4cdf92d4    20  sub csp, jssp, #0x10 (16)
0x4cdf92d8    24  stp fp, lr, [jssp, #-16]!
0x4cdf92dc    28  bl #+0x4 (addr 0x4cdf92e0)
0x4cdf92e0    32  movz x17, #0xa00000000
0x4cdf92e4    36  sub csp, jssp, #0x10 (16)
0x4cdf92e8    40  stp x17, cp, [jssp, #-16]!
0x4cdf92ec    44  add fp, jssp, #0x10 (16)
0x4cdf92f0    48  ldr x17, pc+24 (addr 0x000000004cdf9308)    ;; lazy deoptimization bailout 0
0x4cdf92f4    52  add x17, x17, x16
0x4cdf92f8    56  br x17
0x4cdf92fc    60  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf9300    64  d63f03e0       constant
0x4cdf9304    68  d503201f       constant
0x4cdf9308    72  4cb06000       constant
0x4cdf930c    76  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 8)
0x4cdf92f0  runtime entry
0x4cdf92fc  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreFieldStub
name = StoreFieldStub
compiler = crankshaft
Instructions (size = 88)
0x4cdf92c0     0  mov x5, x0
0x4cdf92c4     4  tbnz w5, #0, #+0xc (addr 0x4cdf92d0)
0x4cdf92c8     8  stur x5, [x1, #95]
0x4cdf92cc    12  ret
0x4cdf92d0    16  movz x16, #0x0
0x4cdf92d4    20  sub csp, jssp, #0x10 (16)
0x4cdf92d8    24  stp fp, lr, [jssp, #-16]!
0x4cdf92dc    28  bl #+0x4 (addr 0x4cdf92e0)
0x4cdf92e0    32  movz x17, #0xa00000000
0x4cdf92e4    36  sub csp, jssp, #0x10 (16)
0x4cdf92e8    40  stp x17, cp, [jssp, #-16]!
0x4cdf92ec    44  add fp, jssp, #0x10 (16)
0x4cdf92f0    48  ldr x17, pc+24 (addr 0x000000004cdf9308)    ;; lazy deoptimization bailout 0
0x4cdf92f4    52  add x17, x17, x16
0x4cdf92f8    56  br x17
0x4cdf92fc    60  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf9300    64  d63f03e0       constant
0x4cdf9304    68  d503201f       constant
0x4cdf9308    72  4cb06000       constant
0x4cdf930c    76  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 8)
0x4cdf92f0  runtime entry
0x4cdf92fc  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = on
compiler = unknown
Instructions (size = 120)
0x4cdf9380     0  sub csp, jssp, #0x8 (8)
0x4cdf9384     4  str x3, [jssp, #-8]!
0x4cdf9388     8  sub csp, jssp, #0x8 (8)
0x4cdf938c    12  str x0, [jssp, #-8]!
0x4cdf9390    16  ldr x0, pc+72 (addr 0x000000004cdf93d8)    ;; object: 0xffffaa1ea6a9 Cell for 0
0x4cdf9394    20  ldur x0, [x0, #7]
0x4cdf9398    24  cmp x0, #0x0 (0)
0x4cdf939c    28  b.ne #+0x14 (addr 0x4cdf93b0)
0x4cdf93a0    32  ldr x3, pc+64 (addr 0x000000004cdf93e0)    ;; object: 0xffffaa1ea6b9 WeakCell for 0xffffaa1b1c41 <an Object with map 0x2a81bf39>
0x4cdf93a4    36  ldur x3, [x3, #7]
0x4cdf93a8    40  tbz w3, #0, #+0x8 (addr 0x4cdf93b0)
0x4cdf93ac    44  b #+0x14 (addr 0x4cdf93c0)
0x4cdf93b0    48  ldr x0, [jssp], #8
0x4cdf93b4    52  ldr x3, [jssp], #8
0x4cdf93b8    56  ldr x16, pc+48 (addr 0x000000004cdf93e8)    ;; code: BUILTIN
0x4cdf93bc    60  br x16
0x4cdf93c0    64  add jssp, jssp, #0x10 (16)
0x4cdf93c4    68  mov x1, x3
0x4cdf93c8    72  ldr x16, pc+40 (addr 0x000000004cdf93f0)    ;; code: HANDLER, LoadConstantStub, minor: 8
0x4cdf93cc    76  br x16
0x4cdf93d0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdf93d4    84  d63f03e0       constant
0x4cdf93d8    88  aa1ea6a9       constant
0x4cdf93dc    92  0000ffff       constant
0x4cdf93e0    96  aa1ea6b9       constant
0x4cdf93e4   100  0000ffff       constant
0x4cdf93e8   104  4cd222e0       constant
0x4cdf93ec   108  00000000       constant
0x4cdf93f0   112  4cd4c160       constant
0x4cdf93f4   116  00000000       constant


RelocInfo (size = 10)
0x4cdf9390  embedded object  (0xffffaa1ea6a9 Cell for 0)
0x4cdf93a0  embedded object  (0xffffaa1ea6b9 WeakCell for 0xffffaa1b1c41 <an Object with map 0x2a81bf39>)
0x4cdf93b8  code target (BUILTIN)  (0x4cd222e0)
0x4cdf93c8  code target (HANDLER)  (0x4cd4c160)
0x4cdf93d0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = finish
compiler = unknown
Instructions (size = 168)
0x4cdf9460     0  sub csp, jssp, #0x8 (8)
0x4cdf9464     4  str x3, [jssp, #-8]!
0x4cdf9468     8  sub csp, jssp, #0x8 (8)
0x4cdf946c    12  str x4, [jssp, #-8]!
0x4cdf9470    16  ldr x3, pc+104 (addr 0x000000004cdf94d8)    ;; object: 0xffffaa1d1851 Cell for 0
0x4cdf9474    20  ldur x3, [x3, #7]
0x4cdf9478    24  cmp x3, #0x0 (0)
0x4cdf947c    28  b.ne #+0x3c (addr 0x4cdf94b8)
0x4cdf9480    32  ldr x5, pc+96 (addr 0x000000004cdf94e0)    ;; object: 0xffffaa1ea709 WeakCell for 0x2a8409a9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf9484    36  ldur x5, [x5, #7]
0x4cdf9488    40  tbz w5, #0, #+0x30 (addr 0x4cdf94b8)
0x4cdf948c    44  ldursw x4, [x5, #15]
0x4cdf9490    48  tbnz w4, #23, #+0x28 (addr 0x4cdf94b8)
0x4cdf9494    52  ldur x4, [x5, #47]
0x4cdf9498    56  ldur x4, [x4, #71]
0x4cdf949c    60  cmp x0, x4
0x4cdf94a0    64  b.ne #+0x18 (addr 0x4cdf94b8)
0x4cdf94a4    68  ldr x4, [jssp], #8
0x4cdf94a8    72  ldr x3, [jssp], #8
0x4cdf94ac    76  ldr x2, pc+60 (addr 0x000000004cdf94e8)    ;; object: 0xffffaa10f0e9 <String[6]: finish>
0x4cdf94b0    80  ldr x16, pc+64 (addr 0x000000004cdf94f0)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0x4cdf94b4    84  br x16
0x4cdf94b8    88  ldr x2, pc+64 (addr 0x000000004cdf94f8)    ;; object: 0xffffaa10f0e9 <String[6]: finish>
0x4cdf94bc    92  ldr x4, [jssp], #8
0x4cdf94c0    96  ldr x3, [jssp], #8
0x4cdf94c4   100  ldr x16, pc+60 (addr 0x000000004cdf9500)    ;; code: BUILTIN
0x4cdf94c8   104  br x16
0x4cdf94cc   108  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdf94d0   112  d63f03e0       constant
0x4cdf94d4   116  d503201f       constant
0x4cdf94d8   120  aa1d1851       constant
0x4cdf94dc   124  0000ffff       constant
0x4cdf94e0   128  aa1ea709       constant
0x4cdf94e4   132  0000ffff       constant
0x4cdf94e8   136  aa10f0e9       constant
0x4cdf94ec   140  0000ffff       constant
0x4cdf94f0   144  4cd3cea0       constant
0x4cdf94f4   148  00000000       constant
0x4cdf94f8   152  aa10f0e9       constant
0x4cdf94fc   156  0000ffff       constant
0x4cdf9500   160  4cd22420       constant
0x4cdf9504   164  00000000       constant


RelocInfo (size = 12)
0x4cdf9470  embedded object  (0xffffaa1d1851 Cell for 0)
0x4cdf9480  embedded object  (0xffffaa1ea709 WeakCell for 0x2a8409a9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf94ac  embedded object  (0xffffaa10f0e9 <String[6]: finish>)
0x4cdf94b0  code target (HANDLER)  (0x4cd3cea0)
0x4cdf94b8  embedded object  (0xffffaa10f0e9 <String[6]: finish>)
0x4cdf94c4  code target (BUILTIN)  (0x4cd22420)
0x4cdf94cc  constant pool (size 60)

kind = HANDLER
major_key = <NoCache>Stub
name = _socketEnd
compiler = unknown
Instructions (size = 168)
0x4cdf9580     0  sub csp, jssp, #0x8 (8)
0x4cdf9584     4  str x3, [jssp, #-8]!
0x4cdf9588     8  sub csp, jssp, #0x8 (8)
0x4cdf958c    12  str x4, [jssp, #-8]!
0x4cdf9590    16  ldr x3, pc+104 (addr 0x000000004cdf95f8)    ;; object: 0xffffaa1d1851 Cell for 0
0x4cdf9594    20  ldur x3, [x3, #7]
0x4cdf9598    24  cmp x3, #0x0 (0)
0x4cdf959c    28  b.ne #+0x3c (addr 0x4cdf95d8)
0x4cdf95a0    32  ldr x5, pc+96 (addr 0x000000004cdf9600)    ;; object: 0xffffaa1ea759 WeakCell for 0x2a840a01 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf95a4    36  ldur x5, [x5, #7]
0x4cdf95a8    40  tbz w5, #0, #+0x30 (addr 0x4cdf95d8)
0x4cdf95ac    44  ldursw x4, [x5, #15]
0x4cdf95b0    48  tbnz w4, #23, #+0x28 (addr 0x4cdf95d8)
0x4cdf95b4    52  ldur x4, [x5, #47]
0x4cdf95b8    56  ldur x4, [x4, #95]
0x4cdf95bc    60  cmp x0, x4
0x4cdf95c0    64  b.ne #+0x18 (addr 0x4cdf95d8)
0x4cdf95c4    68  ldr x4, [jssp], #8
0x4cdf95c8    72  ldr x3, [jssp], #8
0x4cdf95cc    76  ldr x2, pc+60 (addr 0x000000004cdf9608)    ;; object: 0xffffaa1d3729 <String[10]: _socketEnd>
0x4cdf95d0    80  ldr x16, pc+64 (addr 0x000000004cdf9610)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0x4cdf95d4    84  br x16
0x4cdf95d8    88  ldr x2, pc+64 (addr 0x000000004cdf9618)    ;; object: 0xffffaa1d3729 <String[10]: _socketEnd>
0x4cdf95dc    92  ldr x4, [jssp], #8
0x4cdf95e0    96  ldr x3, [jssp], #8
0x4cdf95e4   100  ldr x16, pc+60 (addr 0x000000004cdf9620)    ;; code: BUILTIN
0x4cdf95e8   104  br x16
0x4cdf95ec   108  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdf95f0   112  d63f03e0       constant
0x4cdf95f4   116  d503201f       constant
0x4cdf95f8   120  aa1d1851       constant
0x4cdf95fc   124  0000ffff       constant
0x4cdf9600   128  aa1ea759       constant
0x4cdf9604   132  0000ffff       constant
0x4cdf9608   136  aa1d3729       constant
0x4cdf960c   140  0000ffff       constant
0x4cdf9610   144  4cd3cea0       constant
0x4cdf9614   148  00000000       constant
0x4cdf9618   152  aa1d3729       constant
0x4cdf961c   156  0000ffff       constant
0x4cdf9620   160  4cd22420       constant
0x4cdf9624   164  00000000       constant


RelocInfo (size = 12)
0x4cdf9590  embedded object  (0xffffaa1d1851 Cell for 0)
0x4cdf95a0  embedded object  (0xffffaa1ea759 WeakCell for 0x2a840a01 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf95cc  embedded object  (0xffffaa1d3729 <String[10]: _socketEnd>)
0x4cdf95d0  code target (HANDLER)  (0x4cd3cea0)
0x4cdf95d8  embedded object  (0xffffaa1d3729 <String[10]: _socketEnd>)
0x4cdf95e4  code target (BUILTIN)  (0x4cd22420)
0x4cdf95ec  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 184)
0x4cdf9a00     0  ldur x4, [x1, #15]
0x4cdf9a04     4  ldur w5, [x1, #27]
0x4cdf9a08     8  tbnz w2, #0, #+0x24 (addr 0x4cdf9a2c)
0x4cdf9a0c    12  asr x7, x2, #32
0x4cdf9a10    16  cmp w7, w5
0x4cdf9a14    20  b.hs #+0x40 (addr 0x4cdf9a54)
0x4cdf9a18    24  add x5, x4, #0xf (15)
0x4cdf9a1c    28  ldr x6, [x5, w7, sxtw #3]
0x4cdf9a20    32  tbnz w6, #0, #+0x44 (addr 0x4cdf9a64)
0x4cdf9a24    36  mov x0, x6
0x4cdf9a28    40  ret
0x4cdf9a2c    44  ldur x16, [x2, #-1]
0x4cdf9a30    48  ldr x17, [x26, #120]
0x4cdf9a34    52  cmp x16, x17
0x4cdf9a38    56  b.ne #+0x3c (addr 0x4cdf9a74)
0x4cdf9a3c    60  ldur d29, [x2, #7]
0x4cdf9a40    64  fcvtzs w7, d29
0x4cdf9a44    68  scvtf d0, w7
0x4cdf9a48    72  fcmp d29, d0
0x4cdf9a4c    76  b.ne #+0x28 (addr 0x4cdf9a74)
0x4cdf9a50    80  b #-0x40 (addr 0x4cdf9a10)
0x4cdf9a54    84  movz x16, #0x0
0x4cdf9a58    88  sub csp, jssp, #0x10 (16)
0x4cdf9a5c    92  stp fp, lr, [jssp, #-16]!
0x4cdf9a60    96  bl #+0x24 (addr 0x4cdf9a84)
0x4cdf9a64   100  movz x16, #0x8
0x4cdf9a68   104  sub csp, jssp, #0x10 (16)
0x4cdf9a6c   108  stp fp, lr, [jssp, #-16]!
0x4cdf9a70   112  bl #+0x14 (addr 0x4cdf9a84)
0x4cdf9a74   116  movz x16, #0x10
0x4cdf9a78   120  sub csp, jssp, #0x10 (16)
0x4cdf9a7c   124  stp fp, lr, [jssp, #-16]!
0x4cdf9a80   128  bl #+0x4 (addr 0x4cdf9a84)
0x4cdf9a84   132  movz x17, #0xa00000000
0x4cdf9a88   136  sub csp, jssp, #0x10 (16)
0x4cdf9a8c   140  stp x17, cp, [jssp, #-16]!
0x4cdf9a90   144  add fp, jssp, #0x10 (16)
0x4cdf9a94   148  ldr x17, pc+20 (addr 0x000000004cdf9aa8)    ;; lazy deoptimization bailout 0
0x4cdf9a98   152  add x17, x17, x16
0x4cdf9a9c   156  br x17
0x4cdf9aa0   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf9aa4   164  d63f03e0       constant
0x4cdf9aa8   168  4cb06000       constant
0x4cdf9aac   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cdf9a94  runtime entry
0x4cdf9aa0  constant pool (size 16)

--- End code ---
kind = HANDLER
major_key = LoadFastElementStub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 184)
0x4cdf9a00     0  ldur x4, [x1, #15]
0x4cdf9a04     4  ldur w5, [x1, #27]
0x4cdf9a08     8  tbnz w2, #0, #+0x24 (addr 0x4cdf9a2c)
0x4cdf9a0c    12  asr x7, x2, #32
0x4cdf9a10    16  cmp w7, w5
0x4cdf9a14    20  b.hs #+0x40 (addr 0x4cdf9a54)
0x4cdf9a18    24  add x5, x4, #0xf (15)
0x4cdf9a1c    28  ldr x6, [x5, w7, sxtw #3]
0x4cdf9a20    32  tbnz w6, #0, #+0x44 (addr 0x4cdf9a64)
0x4cdf9a24    36  mov x0, x6
0x4cdf9a28    40  ret
0x4cdf9a2c    44  ldur x16, [x2, #-1]
0x4cdf9a30    48  ldr x17, [x26, #120]
0x4cdf9a34    52  cmp x16, x17
0x4cdf9a38    56  b.ne #+0x3c (addr 0x4cdf9a74)
0x4cdf9a3c    60  ldur d29, [x2, #7]
0x4cdf9a40    64  fcvtzs w7, d29
0x4cdf9a44    68  scvtf d0, w7
0x4cdf9a48    72  fcmp d29, d0
0x4cdf9a4c    76  b.ne #+0x28 (addr 0x4cdf9a74)
0x4cdf9a50    80  b #-0x40 (addr 0x4cdf9a10)
0x4cdf9a54    84  movz x16, #0x0
0x4cdf9a58    88  sub csp, jssp, #0x10 (16)
0x4cdf9a5c    92  stp fp, lr, [jssp, #-16]!
0x4cdf9a60    96  bl #+0x24 (addr 0x4cdf9a84)
0x4cdf9a64   100  movz x16, #0x8
0x4cdf9a68   104  sub csp, jssp, #0x10 (16)
0x4cdf9a6c   108  stp fp, lr, [jssp, #-16]!
0x4cdf9a70   112  bl #+0x14 (addr 0x4cdf9a84)
0x4cdf9a74   116  movz x16, #0x10
0x4cdf9a78   120  sub csp, jssp, #0x10 (16)
0x4cdf9a7c   124  stp fp, lr, [jssp, #-16]!
0x4cdf9a80   128  bl #+0x4 (addr 0x4cdf9a84)
0x4cdf9a84   132  movz x17, #0xa00000000
0x4cdf9a88   136  sub csp, jssp, #0x10 (16)
0x4cdf9a8c   140  stp x17, cp, [jssp, #-16]!
0x4cdf9a90   144  add fp, jssp, #0x10 (16)
0x4cdf9a94   148  ldr x17, pc+20 (addr 0x000000004cdf9aa8)    ;; lazy deoptimization bailout 0
0x4cdf9a98   152  add x17, x17, x16
0x4cdf9a9c   156  br x17
0x4cdf9aa0   160  5800007f       constant pool begin (num_const = 3)    ;; constant pool
0x4cdf9aa4   164  d63f03e0       constant
0x4cdf9aa8   168  4cb06000       constant
0x4cdf9aac   172  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 10)
0x4cdf9a94  runtime entry
0x4cdf9aa0  constant pool (size 16)


--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 168)
0x4cdf9b20     0  mov x6, x0
0x4cdf9b24     4  tbnz w6, #0, #+0x5c (addr 0x4cdf9b80)
0x4cdf9b28     8  ldur x3, [x1, #7]
0x4cdf9b2c    12  stur x6, [x3, #143]
0x4cdf9b30    16  stur x5, [x1, #-1]
0x4cdf9b34    20  tbz w5, #0, #+0x34 (addr 0x4cdf9b68)
0x4cdf9b38    24  sub x2, x1, #0x1 (1)
0x4cdf9b3c    28  and x5, x5, #0xfffffffffff00000
0x4cdf9b40    32  ldr x5, [x5, #8]
0x4cdf9b44    36  tbz w5, #1, #+0x24 (addr 0x4cdf9b68)
0x4cdf9b48    40  and x5, x1, #0xfffffffffff00000
0x4cdf9b4c    44  ldr x5, [x5, #8]
0x4cdf9b50    48  tbz w5, #2, #+0x18 (addr 0x4cdf9b68)
0x4cdf9b54    52  sub csp, jssp, #0x8 (8)
0x4cdf9b58    56  str lr, [jssp, #-8]!
0x4cdf9b5c    60  ldr x16, pc+28 (addr 0x000000004cdf9b78)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf9b60    64  blr x16
0x4cdf9b64    68  ldr lr, [jssp], #8
0x4cdf9b68    72  ret
0x4cdf9b6c    76  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf9b70    80  d63f03e0       constant
0x4cdf9b74    84  d503201f       constant
0x4cdf9b78    88  4cd38080       constant
0x4cdf9b7c    92  00000000       constant
0x4cdf9b80    96  movz x16, #0x0
0x4cdf9b84   100  sub csp, jssp, #0x10 (16)
0x4cdf9b88   104  stp fp, lr, [jssp, #-16]!
0x4cdf9b8c   108  bl #+0x4 (addr 0x4cdf9b90)
0x4cdf9b90   112  movz x17, #0xa00000000
0x4cdf9b94   116  sub csp, jssp, #0x10 (16)
0x4cdf9b98   120  stp x17, cp, [jssp, #-16]!
0x4cdf9b9c   124  add fp, jssp, #0x10 (16)
0x4cdf9ba0   128  ldr x17, pc+24 (addr 0x000000004cdf9bb8)    ;; lazy deoptimization bailout 0
0x4cdf9ba4   132  add x17, x17, x16
0x4cdf9ba8   136  br x17
0x4cdf9bac   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf9bb0   144  d63f03e0       constant
0x4cdf9bb4   148  d503201f       constant
0x4cdf9bb8   152  4cb06000       constant
0x4cdf9bbc   156  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf9b5c  code target (STUB)  (0x4cd38080)
0x4cdf9b6c  constant pool (size 20)
0x4cdf9ba0  runtime entry
0x4cdf9bac  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 168)
0x4cdf9b20     0  mov x6, x0
0x4cdf9b24     4  tbnz w6, #0, #+0x5c (addr 0x4cdf9b80)
0x4cdf9b28     8  ldur x3, [x1, #7]
0x4cdf9b2c    12  stur x6, [x3, #143]
0x4cdf9b30    16  stur x5, [x1, #-1]
0x4cdf9b34    20  tbz w5, #0, #+0x34 (addr 0x4cdf9b68)
0x4cdf9b38    24  sub x2, x1, #0x1 (1)
0x4cdf9b3c    28  and x5, x5, #0xfffffffffff00000
0x4cdf9b40    32  ldr x5, [x5, #8]
0x4cdf9b44    36  tbz w5, #1, #+0x24 (addr 0x4cdf9b68)
0x4cdf9b48    40  and x5, x1, #0xfffffffffff00000
0x4cdf9b4c    44  ldr x5, [x5, #8]
0x4cdf9b50    48  tbz w5, #2, #+0x18 (addr 0x4cdf9b68)
0x4cdf9b54    52  sub csp, jssp, #0x8 (8)
0x4cdf9b58    56  str lr, [jssp, #-8]!
0x4cdf9b5c    60  ldr x16, pc+28 (addr 0x000000004cdf9b78)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf9b60    64  blr x16
0x4cdf9b64    68  ldr lr, [jssp], #8
0x4cdf9b68    72  ret
0x4cdf9b6c    76  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf9b70    80  d63f03e0       constant
0x4cdf9b74    84  d503201f       constant
0x4cdf9b78    88  4cd38080       constant
0x4cdf9b7c    92  00000000       constant
0x4cdf9b80    96  movz x16, #0x0
0x4cdf9b84   100  sub csp, jssp, #0x10 (16)
0x4cdf9b88   104  stp fp, lr, [jssp, #-16]!
0x4cdf9b8c   108  bl #+0x4 (addr 0x4cdf9b90)
0x4cdf9b90   112  movz x17, #0xa00000000
0x4cdf9b94   116  sub csp, jssp, #0x10 (16)
0x4cdf9b98   120  stp x17, cp, [jssp, #-16]!
0x4cdf9b9c   124  add fp, jssp, #0x10 (16)
0x4cdf9ba0   128  ldr x17, pc+24 (addr 0x000000004cdf9bb8)    ;; lazy deoptimization bailout 0
0x4cdf9ba4   132  add x17, x17, x16
0x4cdf9ba8   136  br x17
0x4cdf9bac   140  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf9bb0   144  d63f03e0       constant
0x4cdf9bb4   148  d503201f       constant
0x4cdf9bb8   152  4cb06000       constant
0x4cdf9bbc   156  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 15)
0x4cdf9b5c  code target (STUB)  (0x4cd38080)
0x4cdf9b6c  constant pool (size 20)
0x4cdf9ba0  runtime entry
0x4cdf9bac  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = fd
compiler = unknown
Instructions (size = 152)
0x4cdf9c40     0  sub csp, jssp, #0x8 (8)
0x4cdf9c44     4  str x3, [jssp, #-8]!
0x4cdf9c48     8  sub csp, jssp, #0x8 (8)
0x4cdf9c4c    12  str x4, [jssp, #-8]!
0x4cdf9c50    16  ldr x3, pc+88 (addr 0x000000004cdf9ca8)    ;; object: 0xffffaa1e88d1 Cell for 0
0x4cdf9c54    20  ldur x3, [x3, #7]
0x4cdf9c58    24  cmp x3, #0x0 (0)
0x4cdf9c5c    28  b.ne #+0x2c (addr 0x4cdf9c88)
0x4cdf9c60    32  ldr x5, pc+80 (addr 0x000000004cdf9cb0)    ;; object: 0xffffaa1eac89 WeakCell for 0x2a840f29 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf9c64    36  ldur x5, [x5, #7]
0x4cdf9c68    40  tbz w5, #0, #+0x20 (addr 0x4cdf9c88)
0x4cdf9c6c    44  ldursw x4, [x5, #15]
0x4cdf9c70    48  tbnz w4, #23, #+0x18 (addr 0x4cdf9c88)
0x4cdf9c74    52  ldr x4, [jssp], #8
0x4cdf9c78    56  ldr x3, [jssp], #8
0x4cdf9c7c    60  ldr x2, pc+60 (addr 0x000000004cdf9cb8)    ;; object: 0x210b2709 <String[2]: fd>
0x4cdf9c80    64  ldr x16, pc+64 (addr 0x000000004cdf9cc0)    ;; code: HANDLER, StoreTransitionStub, minor: 172050
0x4cdf9c84    68  br x16
0x4cdf9c88    72  ldr x2, pc+64 (addr 0x000000004cdf9cc8)    ;; object: 0x210b2709 <String[2]: fd>
0x4cdf9c8c    76  ldr x4, [jssp], #8
0x4cdf9c90    80  ldr x3, [jssp], #8
0x4cdf9c94    84  ldr x16, pc+60 (addr 0x000000004cdf9cd0)    ;; code: BUILTIN
0x4cdf9c98    88  br x16
0x4cdf9c9c    92  580001df       constant pool begin (num_const = 14)    ;; constant pool
0x4cdf9ca0    96  d63f03e0       constant
0x4cdf9ca4   100  d503201f       constant
0x4cdf9ca8   104  aa1e88d1       constant
0x4cdf9cac   108  0000ffff       constant
0x4cdf9cb0   112  aa1eac89       constant
0x4cdf9cb4   116  0000ffff       constant
0x4cdf9cb8   120  210b2709       constant
0x4cdf9cbc   124  00000000       constant
0x4cdf9cc0   128  4cdf9b20       constant
0x4cdf9cc4   132  00000000       constant
0x4cdf9cc8   136  210b2709       constant
0x4cdf9ccc   140  00000000       constant
0x4cdf9cd0   144  4cd22420       constant
0x4cdf9cd4   148  00000000       constant


RelocInfo (size = 12)
0x4cdf9c50  embedded object  (0xffffaa1e88d1 Cell for 0)
0x4cdf9c60  embedded object  (0xffffaa1eac89 WeakCell for 0x2a840f29 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf9c7c  embedded object  (0x210b2709 <String[2]: fd>)
0x4cdf9c80  code target (HANDLER)  (0x4cdf9b20)
0x4cdf9c88  embedded object  (0x210b2709 <String[2]: fd>)
0x4cdf9c94  code target (BUILTIN)  (0x4cd22420)
0x4cdf9c9c  constant pool (size 60)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cdf9d40     0  tbz w0, #0, #+0x98 (addr 0x4cdf9dd8)
0x4cdf9d44     4  mov x2, x0
0x4cdf9d48     8  ldur x4, [x1, #7]
0x4cdf9d4c    12  stur x2, [x4, #151]
0x4cdf9d50    16  add x3, x4, #0x97 (151)
0x4cdf9d54    20  and x2, x2, #0xfffffffffff00000
0x4cdf9d58    24  ldr x2, [x2, #8]
0x4cdf9d5c    28  tbz w2, #1, #+0x24 (addr 0x4cdf9d80)
0x4cdf9d60    32  and x2, x4, #0xfffffffffff00000
0x4cdf9d64    36  ldr x2, [x2, #8]
0x4cdf9d68    40  tbz w2, #2, #+0x18 (addr 0x4cdf9d80)
0x4cdf9d6c    44  sub csp, jssp, #0x8 (8)
0x4cdf9d70    48  str lr, [jssp, #-8]!
0x4cdf9d74    52  ldr x16, pc+84 (addr 0x000000004cdf9dc8)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdf9d78    56  blr x16
0x4cdf9d7c    60  ldr lr, [jssp], #8
0x4cdf9d80    64  stur x5, [x1, #-1]
0x4cdf9d84    68  tbz w5, #0, #+0x34 (addr 0x4cdf9db8)
0x4cdf9d88    72  sub x2, x1, #0x1 (1)
0x4cdf9d8c    76  and x5, x5, #0xfffffffffff00000
0x4cdf9d90    80  ldr x5, [x5, #8]
0x4cdf9d94    84  tbz w5, #1, #+0x24 (addr 0x4cdf9db8)
0x4cdf9d98    88  and x5, x1, #0xfffffffffff00000
0x4cdf9d9c    92  ldr x5, [x5, #8]
0x4cdf9da0    96  tbz w5, #2, #+0x18 (addr 0x4cdf9db8)
0x4cdf9da4   100  sub csp, jssp, #0x8 (8)
0x4cdf9da8   104  str lr, [jssp, #-8]!
0x4cdf9dac   108  ldr x16, pc+36 (addr 0x000000004cdf9dd0)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf9db0   112  blr x16
0x4cdf9db4   116  ldr lr, [jssp], #8
0x4cdf9db8   120  ret
0x4cdf9dbc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cdf9dc0   128  d63f03e0       constant
0x4cdf9dc4   132  d503201f       constant
0x4cdf9dc8   136  4cd378a0       constant
0x4cdf9dcc   140  00000000       constant
0x4cdf9dd0   144  4cd38080       constant
0x4cdf9dd4   148  00000000       constant
0x4cdf9dd8   152  movz x16, #0x0
0x4cdf9ddc   156  sub csp, jssp, #0x10 (16)
0x4cdf9de0   160  stp fp, lr, [jssp, #-16]!
0x4cdf9de4   164  bl #+0x4 (addr 0x4cdf9de8)
0x4cdf9de8   168  movz x17, #0xa00000000
0x4cdf9dec   172  sub csp, jssp, #0x10 (16)
0x4cdf9df0   176  stp x17, cp, [jssp, #-16]!
0x4cdf9df4   180  add fp, jssp, #0x10 (16)
0x4cdf9df8   184  ldr x17, pc+24 (addr 0x000000004cdf9e10)    ;; lazy deoptimization bailout 0
0x4cdf9dfc   188  add x17, x17, x16
0x4cdf9e00   192  br x17
0x4cdf9e04   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf9e08   200  d63f03e0       constant
0x4cdf9e0c   204  d503201f       constant
0x4cdf9e10   208  4cb06000       constant
0x4cdf9e14   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf9d74  code target (STUB)  (0x4cd378a0)
0x4cdf9dac  code target (STUB)  (0x4cd38080)
0x4cdf9dbc  constant pool (size 28)
0x4cdf9df8  runtime entry
0x4cdf9e04  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = StoreTransitionStub
name = StoreTransitionStub
compiler = crankshaft
Instructions (size = 224)
0x4cdf9d40     0  tbz w0, #0, #+0x98 (addr 0x4cdf9dd8)
0x4cdf9d44     4  mov x2, x0
0x4cdf9d48     8  ldur x4, [x1, #7]
0x4cdf9d4c    12  stur x2, [x4, #151]
0x4cdf9d50    16  add x3, x4, #0x97 (151)
0x4cdf9d54    20  and x2, x2, #0xfffffffffff00000
0x4cdf9d58    24  ldr x2, [x2, #8]
0x4cdf9d5c    28  tbz w2, #1, #+0x24 (addr 0x4cdf9d80)
0x4cdf9d60    32  and x2, x4, #0xfffffffffff00000
0x4cdf9d64    36  ldr x2, [x2, #8]
0x4cdf9d68    40  tbz w2, #2, #+0x18 (addr 0x4cdf9d80)
0x4cdf9d6c    44  sub csp, jssp, #0x8 (8)
0x4cdf9d70    48  str lr, [jssp, #-8]!
0x4cdf9d74    52  ldr x16, pc+84 (addr 0x000000004cdf9dc8)    ;; code: STUB, RecordWriteStub, minor: 68676
0x4cdf9d78    56  blr x16
0x4cdf9d7c    60  ldr lr, [jssp], #8
0x4cdf9d80    64  stur x5, [x1, #-1]
0x4cdf9d84    68  tbz w5, #0, #+0x34 (addr 0x4cdf9db8)
0x4cdf9d88    72  sub x2, x1, #0x1 (1)
0x4cdf9d8c    76  and x5, x5, #0xfffffffffff00000
0x4cdf9d90    80  ldr x5, [x5, #8]
0x4cdf9d94    84  tbz w5, #1, #+0x24 (addr 0x4cdf9db8)
0x4cdf9d98    88  and x5, x1, #0xfffffffffff00000
0x4cdf9d9c    92  ldr x5, [x5, #8]
0x4cdf9da0    96  tbz w5, #2, #+0x18 (addr 0x4cdf9db8)
0x4cdf9da4   100  sub csp, jssp, #0x8 (8)
0x4cdf9da8   104  str lr, [jssp, #-8]!
0x4cdf9dac   108  ldr x16, pc+36 (addr 0x000000004cdf9dd0)    ;; code: STUB, RecordWriteStub, minor: 67745
0x4cdf9db0   112  blr x16
0x4cdf9db4   116  ldr lr, [jssp], #8
0x4cdf9db8   120  ret
0x4cdf9dbc   124  580000df       constant pool begin (num_const = 6)    ;; constant pool
0x4cdf9dc0   128  d63f03e0       constant
0x4cdf9dc4   132  d503201f       constant
0x4cdf9dc8   136  4cd378a0       constant
0x4cdf9dcc   140  00000000       constant
0x4cdf9dd0   144  4cd38080       constant
0x4cdf9dd4   148  00000000       constant
0x4cdf9dd8   152  movz x16, #0x0
0x4cdf9ddc   156  sub csp, jssp, #0x10 (16)
0x4cdf9de0   160  stp fp, lr, [jssp, #-16]!
0x4cdf9de4   164  bl #+0x4 (addr 0x4cdf9de8)
0x4cdf9de8   168  movz x17, #0xa00000000
0x4cdf9dec   172  sub csp, jssp, #0x10 (16)
0x4cdf9df0   176  stp x17, cp, [jssp, #-16]!
0x4cdf9df4   180  add fp, jssp, #0x10 (16)
0x4cdf9df8   184  ldr x17, pc+24 (addr 0x000000004cdf9e10)    ;; lazy deoptimization bailout 0
0x4cdf9dfc   188  add x17, x17, x16
0x4cdf9e00   192  br x17
0x4cdf9e04   196  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdf9e08   200  d63f03e0       constant
0x4cdf9e0c   204  d503201f       constant
0x4cdf9e10   208  4cb06000       constant
0x4cdf9e14   212  00000000       constant


Safepoints (size = 8)

RelocInfo (size = 16)
0x4cdf9d74  code target (STUB)  (0x4cd378a0)
0x4cdf9dac  code target (STUB)  (0x4cd38080)
0x4cdf9dbc  constant pool (size 28)
0x4cdf9df8  runtime entry
0x4cdf9e04  constant pool (size 20)


kind = HANDLER
major_key = <NoCache>Stub
name = _isStdio
compiler = unknown
Instructions (size = 152)
0x4cdf9e80     0  sub csp, jssp, #0x8 (8)
0x4cdf9e84     4  str x3, [jssp, #-8]!
0x4cdf9e88     8  sub csp, jssp, #0x8 (8)
0x4cdf9e8c    12  str x4, [jssp, #-8]!
0x4cdf9e90    16  ldr x3, pc+88 (addr 0x000000004cdf9ee8)    ;; object: 0xffffaa1e88d1 Cell for 0
0x4cdf9e94    20  ldur x3, [x3, #7]
0x4cdf9e98    24  cmp x3, #0x0 (0)
0x4cdf9e9c    28  b.ne #+0x30 (addr 0x4cdf9ecc)
0x4cdf9ea0    32  tbz w0, #0, #+0x2c (addr 0x4cdf9ecc)
0x4cdf9ea4    36  ldr x5, pc+76 (addr 0x000000004cdf9ef0)    ;; object: 0xffffaa1ead79 WeakCell for 0x2a840f81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdf9ea8    40  ldur x5, [x5, #7]
0x4cdf9eac    44  tbz w5, #0, #+0x20 (addr 0x4cdf9ecc)
0x4cdf9eb0    48  ldursw x4, [x5, #15]
0x4cdf9eb4    52  tbnz w4, #23, #+0x18 (addr 0x4cdf9ecc)
0x4cdf9eb8    56  ldr x4, [jssp], #8
0x4cdf9ebc    60  ldr x3, [jssp], #8
0x4cdf9ec0    64  ldr x2, pc+56 (addr 0x000000004cdf9ef8)    ;; object: 0x210f94b1 <String[8]: _isStdio>
0x4cdf9ec4    68  ldr x16, pc+60 (addr 0x000000004cdf9f00)    ;; code: HANDLER, StoreTransitionStub, minor: 196627
0x4cdf9ec8    72  br x16
0x4cdf9ecc    76  ldr x2, pc+60 (addr 0x000000004cdf9f08)    ;; object: 0x210f94b1 <String[8]: _isStdio>
0x4cdf9ed0    80  ldr x4, [jssp], #8
0x4cdf9ed4    84  ldr x3, [jssp], #8
0x4cdf9ed8    88  ldr x16, pc+56 (addr 0x000000004cdf9f10)    ;; code: BUILTIN
0x4cdf9edc    92  br x16
0x4cdf9ee0    96  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4cdf9ee4   100  d63f03e0       constant
0x4cdf9ee8   104  aa1e88d1       constant
0x4cdf9eec   108  0000ffff       constant
0x4cdf9ef0   112  aa1ead79       constant
0x4cdf9ef4   116  0000ffff       constant
0x4cdf9ef8   120  210f94b1       constant
0x4cdf9efc   124  00000000       constant
0x4cdf9f00   128  4cdf9d40       constant
0x4cdf9f04   132  00000000       constant
0x4cdf9f08   136  210f94b1       constant
0x4cdf9f0c   140  00000000       constant
0x4cdf9f10   144  4cd22420       constant
0x4cdf9f14   148  00000000       constant


RelocInfo (size = 12)
0x4cdf9e90  embedded object  (0xffffaa1e88d1 Cell for 0)
0x4cdf9ea4  embedded object  (0xffffaa1ead79 WeakCell for 0x2a840f81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdf9ec0  embedded object  (0x210f94b1 <String[8]: _isStdio>)
0x4cdf9ec4  code target (HANDLER)  (0x4cdf9d40)
0x4cdf9ecc  embedded object  (0x210f94b1 <String[8]: _isStdio>)
0x4cdf9ed8  code target (BUILTIN)  (0x4cd22420)
0x4cdf9ee0  constant pool (size 56)

kind = HANDLER
major_key = <NoCache>Stub
name = emit
compiler = unknown
Instructions (size = 656)
0x4cdf9f80     0  sub csp, jssp, #0x8 (8)
0x4cdf9f84     4  str x3, [jssp, #-8]!
0x4cdf9f88     8  sub csp, jssp, #0x8 (8)
0x4cdf9f8c    12  str x0, [jssp, #-8]!
0x4cdf9f90    16  ldr x0, pc+560 (addr 0x000000004cdfa1c0)    ;; object: 0x210e3709 Cell for 0
0x4cdf9f94    20  ldur x0, [x0, #7]
0x4cdf9f98    24  cmp x0, #0x0 (0)
0x4cdf9f9c    28  b.ne #+0x1f8 (addr 0x4cdfa194)
0x4cdf9fa0    32  ldur x4, [x1, #-1]
0x4cdf9fa4    36  ldrb w0, [x4, #12]
0x4cdf9fa8    40  movz x16, #0x44
0x4cdf9fac    44  tst x0, x16
0x4cdf9fb0    48  b.ne #+0x1e4 (addr 0x4cdfa194)
0x4cdf9fb4    52  ldrb w0, [x4, #11]
0x4cdf9fb8    56  cmp x0, #0xb1 (177)
0x4cdf9fbc    60  b.lt #+0x1d8 (addr 0x4cdfa194)
0x4cdf9fc0    64  ldur x0, [x1, #7]
0x4cdf9fc4    68  ldur x4, [x0, #-1]
0x4cdf9fc8    72  ldr x16, [x26, #432]
0x4cdf9fcc    76  cmp x4, x16
0x4cdf9fd0    80  b.ne #+0x1c4 (addr 0x4cdfa194)
0x4cdf9fd4    84  ldursw x4, [x0, #35]
0x4cdf9fd8    88  sub x4, x4, #0x1 (1)
0x4cdf9fdc    92  movz x16, #0xbc80
0x4cdf9fe0    96  movk x16, #0x1a7e, lsl #16
0x4cdf9fe4   100  and x4, x4, x16
0x4cdf9fe8   104  add x4, x4, x4, lsl #1
0x4cdf9fec   108  add x4, x0, x4, lsl #3
0x4cdf9ff0   112  ldur x4, [x4, #55]
0x4cdf9ff4   116  ldr x16, [x26, #40]
0x4cdf9ff8   120  cmp x4, x16
0x4cdf9ffc   124  b.eq #+0x188 (addr 0x4cdfa184)
0x4cdfa000   128  ldr x16, pc+456 (addr 0x000000004cdfa1c8)    ;; object: 0x210ba409 <String[4]: emit>
0x4cdfa004   132  cmp x4, x16
0x4cdfa008   136  b.eq #+0x18c (addr 0x4cdfa194)
0x4cdfa00c   140  ldr x16, [x26, #88]
0x4cdfa010   144  cmp x4, x16
0x4cdfa014   148  b.eq #+0x1c (addr 0x4cdfa030)
0x4cdfa018   152  ldur x4, [x4, #-1]
0x4cdfa01c   156  ldrb w4, [x4, #11]
0x4cdfa020   160  tst x4, #0xc0
0x4cdfa024   164  movz x16, #0x80
0x4cdfa028   168  ccmp x4, x16, #nZcv, ne
0x4cdfa02c   172  b.ne #+0x168 (addr 0x4cdfa194)
0x4cdfa030   176  ldursw x4, [x0, #35]
0x4cdfa034   180  sub x4, x4, #0x1 (1)
0x4cdfa038   184  movz x16, #0xbc81
0x4cdfa03c   188  movk x16, #0x1a7e, lsl #16
0x4cdfa040   192  and x4, x4, x16
0x4cdfa044   196  add x4, x4, x4, lsl #1
0x4cdfa048   200  add x4, x0, x4, lsl #3
0x4cdfa04c   204  ldur x4, [x4, #55]
0x4cdfa050   208  ldr x16, [x26, #40]
0x4cdfa054   212  cmp x4, x16
0x4cdfa058   216  b.eq #+0x12c (addr 0x4cdfa184)
0x4cdfa05c   220  ldr x16, pc+372 (addr 0x000000004cdfa1d0)    ;; object: 0x210ba409 <String[4]: emit>
0x4cdfa060   224  cmp x4, x16
0x4cdfa064   228  b.eq #+0x130 (addr 0x4cdfa194)
0x4cdfa068   232  ldr x16, [x26, #88]
0x4cdfa06c   236  cmp x4, x16
0x4cdfa070   240  b.eq #+0x1c (addr 0x4cdfa08c)
0x4cdfa074   244  ldur x4, [x4, #-1]
0x4cdfa078   248  ldrb w4, [x4, #11]
0x4cdfa07c   252  tst x4, #0xc0
0x4cdfa080   256  movz x16, #0x80
0x4cdfa084   260  ccmp x4, x16, #nZcv, ne
0x4cdfa088   264  b.ne #+0x10c (addr 0x4cdfa194)
0x4cdfa08c   268  ldursw x4, [x0, #35]
0x4cdfa090   272  sub x4, x4, #0x1 (1)
0x4cdfa094   276  movz x16, #0xbc83
0x4cdfa098   280  movk x16, #0x1a7e, lsl #16
0x4cdfa09c   284  and x4, x4, x16
0x4cdfa0a0   288  add x4, x4, x4, lsl #1
0x4cdfa0a4   292  add x4, x0, x4, lsl #3
0x4cdfa0a8   296  ldur x4, [x4, #55]
0x4cdfa0ac   300  ldr x16, [x26, #40]
0x4cdfa0b0   304  cmp x4, x16
0x4cdfa0b4   308  b.eq #+0xd0 (addr 0x4cdfa184)
0x4cdfa0b8   312  ldr x16, pc+288 (addr 0x000000004cdfa1d8)    ;; object: 0x210ba409 <String[4]: emit>
0x4cdfa0bc   316  cmp x4, x16
0x4cdfa0c0   320  b.eq #+0xd4 (addr 0x4cdfa194)
0x4cdfa0c4   324  ldr x16, [x26, #88]
0x4cdfa0c8   328  cmp x4, x16
0x4cdfa0cc   332  b.eq #+0x1c (addr 0x4cdfa0e8)
0x4cdfa0d0   336  ldur x4, [x4, #-1]
0x4cdfa0d4   340  ldrb w4, [x4, #11]
0x4cdfa0d8   344  tst x4, #0xc0
0x4cdfa0dc   348  movz x16, #0x80
0x4cdfa0e0   352  ccmp x4, x16, #nZcv, ne
0x4cdfa0e4   356  b.ne #+0xb0 (addr 0x4cdfa194)
0x4cdfa0e8   360  ldursw x4, [x0, #35]
0x4cdfa0ec   364  sub x4, x4, #0x1 (1)
0x4cdfa0f0   368  movz x16, #0xbc86
0x4cdfa0f4   372  movk x16, #0x1a7e, lsl #16
0x4cdfa0f8   376  and x4, x4, x16
0x4cdfa0fc   380  add x4, x4, x4, lsl #1
0x4cdfa100   384  add x4, x0, x4, lsl #3
0x4cdfa104   388  ldur x4, [x4, #55]
0x4cdfa108   392  ldr x16, [x26, #40]
0x4cdfa10c   396  cmp x4, x16
0x4cdfa110   400  b.eq #+0x74 (addr 0x4cdfa184)
0x4cdfa114   404  ldr x16, pc+204 (addr 0x000000004cdfa1e0)    ;; object: 0x210ba409 <String[4]: emit>
0x4cdfa118   408  cmp x4, x16
0x4cdfa11c   412  b.eq #+0x78 (addr 0x4cdfa194)
0x4cdfa120   416  ldr x16, [x26, #88]
0x4cdfa124   420  cmp x4, x16
0x4cdfa128   424  b.eq #+0x1c (addr 0x4cdfa144)
0x4cdfa12c   428  ldur x4, [x4, #-1]
0x4cdfa130   432  ldrb w4, [x4, #11]
0x4cdfa134   436  tst x4, #0xc0
0x4cdfa138   440  movz x16, #0x80
0x4cdfa13c   444  ccmp x4, x16, #nZcv, ne
0x4cdfa140   448  b.ne #+0x54 (addr 0x4cdfa194)
0x4cdfa144   452  sub csp, jssp, #0x38 (56)
0x4cdfa148   456  stp x3, x5, [jssp, #-32]!
0x4cdfa14c   460  stp x6, lr, [jssp, #16]
0x4cdfa150   464  stp x0, x1, [jssp, #-24]!
0x4cdfa154   468  str x2, [jssp, #16]
0x4cdfa158   472  ldur x0, [x1, #7]
0x4cdfa15c   476  ldr x1, pc+140 (addr 0x000000004cdfa1e8)    ;; object: 0x210ba409 <String[4]: emit>
0x4cdfa160   480  ldr x16, pc+144 (addr 0x000000004cdfa1f0)    ;; code: STUB, NameDictionaryLookupStub, minor: 1
0x4cdfa164   484  blr x16
0x4cdfa168   488  mov x4, x0
0x4cdfa16c   492  ldp x2, x3, [jssp, #16]
0x4cdfa170   496  ldp x0, x1, [jssp], #32
0x4cdfa174   500  ldr lr, [jssp, #16]
0x4cdfa178   504  ldp x5, x6, [jssp], #24
0x4cdfa17c   508  cbz x4, #+0x8 (addr 0x4cdfa184)
0x4cdfa180   512  b #+0x14 (addr 0x4cdfa194)
0x4cdfa184   516  ldr x3, pc+116 (addr 0x000000004cdfa1f8)    ;; object: 0xffffaa1eaf79 WeakCell for 0xffffaa1b1c41 <an Object with map 0x2a81bf39>
0x4cdfa188   520  ldur x3, [x3, #7]
0x4cdfa18c   524  tbz w3, #0, #+0x8 (addr 0x4cdfa194)
0x4cdfa190   528  b #+0x14 (addr 0x4cdfa1a4)
0x4cdfa194   532  ldr x0, [jssp], #8
0x4cdfa198   536  ldr x3, [jssp], #8
0x4cdfa19c   540  ldr x16, pc+100 (addr 0x000000004cdfa200)    ;; code: BUILTIN
0x4cdfa1a0   544  br x16
0x4cdfa1a4   548  add jssp, jssp, #0x10 (16)
0x4cdfa1a8   552  mov x1, x3
0x4cdfa1ac   556  ldr x16, pc+92 (addr 0x000000004cdfa208)    ;; code: HANDLER, LoadConstantStub, minor: 6
0x4cdfa1b0   560  br x16
0x4cdfa1b4   564  580002df       constant pool begin (num_const = 22)    ;; constant pool
0x4cdfa1b8   568  d63f03e0       constant
0x4cdfa1bc   572  d503201f       constant
0x4cdfa1c0   576  210e3709       constant
0x4cdfa1c4   580  00000000       constant
0x4cdfa1c8   584  210ba409       constant
0x4cdfa1cc   588  00000000       constant
0x4cdfa1d0   592  210ba409       constant
0x4cdfa1d4   596  00000000       constant
0x4cdfa1d8   600  210ba409       constant
0x4cdfa1dc   604  00000000       constant
0x4cdfa1e0   608  210ba409       constant
0x4cdfa1e4   612  00000000       constant
0x4cdfa1e8   616  210ba409       constant
0x4cdfa1ec   620  00000000       constant
0x4cdfa1f0   624  4cd8b120       constant
0x4cdfa1f4   628  00000000       constant
0x4cdfa1f8   632  aa1eaf79       constant
0x4cdfa1fc   636  0000ffff       constant
0x4cdfa200   640  4cd222e0       constant
0x4cdfa204   644  00000000       constant
0x4cdfa208   648  4cd8b020       constant
0x4cdfa20c   652  00000000       constant


RelocInfo (size = 26)
0x4cdf9f90  embedded object  (0x210e3709 Cell for 0)
0x4cdfa000  embedded object  (0x210ba409 <String[4]: emit>)
0x4cdfa05c  embedded object  (0x210ba409 <String[4]: emit>)
0x4cdfa0b8  embedded object  (0x210ba409 <String[4]: emit>)
0x4cdfa114  embedded object  (0x210ba409 <String[4]: emit>)
0x4cdfa15c  embedded object  (0x210ba409 <String[4]: emit>)
0x4cdfa160  code target (STUB)  (0x4cd8b120)
0x4cdfa184  embedded object  (0xffffaa1eaf79 WeakCell for 0xffffaa1b1c41 <an Object with map 0x2a81bf39>)
0x4cdfa19c  code target (BUILTIN)  (0x4cd222e0)
0x4cdfa1ac  code target (HANDLER)  (0x4cd8b020)
0x4cdfa1b4  constant pool (size 92)

kind = HANDLER
major_key = <NoCache>Stub
compiler = unknown
Instructions (size = 96)
0x4cdfa280     0  sub csp, jssp, #0x8 (8)
0x4cdfa284     4  str x3, [jssp, #-8]!
0x4cdfa288     8  sub csp, jssp, #0x8 (8)
0x4cdfa28c    12  str x0, [jssp, #-8]!
0x4cdfa290    16  ldr x0, pc+56 (addr 0x000000004cdfa2c8)    ;; object: 0x2105b0f1 Cell for 0
0x4cdfa294    20  ldur x0, [x0, #7]
0x4cdfa298    24  cmp x0, #0x0 (0)
0x4cdfa29c    28  b.ne #+0x14 (addr 0x4cdfa2b0)
0x4cdfa2a0    32  add jssp, jssp, #0x10 (16)
0x4cdfa2a4    36  ldr x0, pc+44 (addr 0x000000004cdfa2d0)    ;; object: 0x21004241 <undefined>
0x4cdfa2a8    40  ret
0x4cdfa2ac    44  b #+0x14 (addr 0x4cdfa2c0)
0x4cdfa2b0    48  ldr x0, [jssp], #8
0x4cdfa2b4    52  ldr x3, [jssp], #8
0x4cdfa2b8    56  ldr x16, pc+32 (addr 0x000000004cdfa2d8)    ;; code: BUILTIN
0x4cdfa2bc    60  br x16
0x4cdfa2c0    64  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4cdfa2c4    68  d63f03e0       constant
0x4cdfa2c8    72  2105b0f1       constant
0x4cdfa2cc    76  00000000       constant
0x4cdfa2d0    80  21004241       constant
0x4cdfa2d4    84  00000000       constant
0x4cdfa2d8    88  4cd222e0       constant
0x4cdfa2dc    92  00000000       constant


RelocInfo (size = 9)
0x4cdfa290  embedded object  (0x2105b0f1 Cell for 0)
0x4cdfa2a4  embedded object  (0x21004241 <undefined>)
0x4cdfa2b8  code target (BUILTIN)  (0x4cd222e0)
0x4cdfa2c0  constant pool (size 32)

kind = HANDLER
major_key = <NoCache>Stub
name = SIGWINCH
compiler = unknown
Instructions (size = 144)
0x4cdfa340     0  sub csp, jssp, #0x8 (8)
0x4cdfa344     4  str x3, [jssp, #-8]!
0x4cdfa348     8  sub csp, jssp, #0x8 (8)
0x4cdfa34c    12  str x4, [jssp, #-8]!
0x4cdfa350    16  ldr x5, pc+88 (addr 0x000000004cdfa3a8)    ;; object: 0xffffaa1ec021 WeakCell for 0x2a8418c9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfa354    20  ldur x5, [x5, #7]
0x4cdfa358    24  tbz w5, #0, #+0x30 (addr 0x4cdfa388)
0x4cdfa35c    28  ldursw x4, [x5, #15]
0x4cdfa360    32  tbnz w4, #23, #+0x28 (addr 0x4cdfa388)
0x4cdfa364    36  ldur x4, [x5, #47]
0x4cdfa368    40  ldur x4, [x4, #119]
0x4cdfa36c    44  cmp x0, x4
0x4cdfa370    48  b.ne #+0x18 (addr 0x4cdfa388)
0x4cdfa374    52  ldr x4, [jssp], #8
0x4cdfa378    56  ldr x3, [jssp], #8
0x4cdfa37c    60  ldr x2, pc+52 (addr 0x000000004cdfa3b0)    ;; object: 0x210f9081 <String[8]: SIGWINCH>
0x4cdfa380    64  ldr x16, pc+56 (addr 0x000000004cdfa3b8)    ;; code: HANDLER, StoreTransitionStub, minor: 0
0x4cdfa384    68  br x16
0x4cdfa388    72  ldr x2, pc+56 (addr 0x000000004cdfa3c0)    ;; object: 0x210f9081 <String[8]: SIGWINCH>
0x4cdfa38c    76  ldr x4, [jssp], #8
0x4cdfa390    80  ldr x3, [jssp], #8
0x4cdfa394    84  ldr x16, pc+52 (addr 0x000000004cdfa3c8)    ;; code: BUILTIN
0x4cdfa398    88  br x16
0x4cdfa39c    92  5800019f       constant pool begin (num_const = 12)    ;; constant pool
0x4cdfa3a0    96  d63f03e0       constant
0x4cdfa3a4   100  d503201f       constant
0x4cdfa3a8   104  aa1ec021       constant
0x4cdfa3ac   108  0000ffff       constant
0x4cdfa3b0   112  210f9081       constant
0x4cdfa3b4   116  00000000       constant
0x4cdfa3b8   120  4cd3cea0       constant
0x4cdfa3bc   124  00000000       constant
0x4cdfa3c0   128  210f9081       constant
0x4cdfa3c4   132  00000000       constant
0x4cdfa3c8   136  4cd22420       constant
0x4cdfa3cc   140  00000000       constant


RelocInfo (size = 11)
0x4cdfa350  embedded object  (0xffffaa1ec021 WeakCell for 0x2a8418c9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfa37c  embedded object  (0x210f9081 <String[8]: SIGWINCH>)
0x4cdfa380  code target (HANDLER)  (0x4cd3cea0)
0x4cdfa388  embedded object  (0x210f9081 <String[8]: SIGWINCH>)
0x4cdfa394  code target (BUILTIN)  (0x4cd22420)
0x4cdfa39c  constant pool (size 52)

--- Code ---
kind = STUB
major_key = <NoCache>Stub
name = FastCloneShallowObjectStub
compiler = crankshaft
Instructions (size = 485)
0x4cdfa440     0  ldur x4, [x3, #47]
0x4cdfa444     4  tbnz w2, #0, #+0xa8 (addr 0x4cdfa4ec)
0x4cdfa448     8  asr x6, x2, #32
0x4cdfa44c    12  add x5, x4, #0x17 (23)
0x4cdfa450    16  ldr x7, [x5, w6, sxtw #3]
0x4cdfa454    20  ldr x4, pc+332 (addr 0x000000004cdfa5a0)    ;; object: 0x21004241 <undefined>
0x4cdfa458    24  cmp x7, x4
0x4cdfa45c    28  b.eq #+0x8c (addr 0x4cdfa4e8)
0x4cdfa460    32  ldur x4, [x7, #7]
0x4cdfa464    36  ldur x5, [x4, #-1]
0x4cdfa468    40  ldrb w6, [x5, #7]
0x4cdfa46c    44  cmp w6, #0x6 (6)
0x4cdfa470    48  b.ne #+0x78 (addr 0x4cdfa4e8)
0x4cdfa474    52  movz x1, #0xd2c0
0x4cdfa478    56  movk x1, #0x166d, lsl #16
0x4cdfa47c    60  ldp x2, x0, [x1]
0x4cdfa480    64  adds x16, x2, #0x40 (64)
0x4cdfa484    68  ccmp x16, x0, #nzCv, lo
0x4cdfa488    72  b.hi #+0xac (addr 0x4cdfa534)
0x4cdfa48c    76  str x16, [x1]
0x4cdfa490    80  orr x2, x2, #0x1
0x4cdfa494    84  stur x5, [x2, #-1]
0x4cdfa498    88  ldur x0, [x4, #7]
0x4cdfa49c    92  stur x0, [x2, #7]
0x4cdfa4a0    96  ldur x0, [x4, #15]
0x4cdfa4a4   100  stur x0, [x2, #15]
0x4cdfa4a8   104  ldur x0, [x4, #23]
0x4cdfa4ac   108  stur x0, [x2, #23]
0x4cdfa4b0   112  ldur x0, [x4, #31]
0x4cdfa4b4   116  stur x0, [x2, #31]
0x4cdfa4b8   120  ldur x0, [x4, #39]
0x4cdfa4bc   124  stur x0, [x2, #39]
0x4cdfa4c0   128  add x0, x2, #0x30 (48)
0x4cdfa4c4   132  ldr x1, pc+228 (addr 0x000000004cdfa5a8)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfa4c8   136  stur x1, [x0, #-1]
0x4cdfa4cc   140  stur x7, [x0, #7]
0x4cdfa4d0   144  ldur w0, [x7, #35]
0x4cdfa4d4   148  add w0, w0, #0x1 (1)
0x4cdfa4d8   152  lsl x0, x0, #32
0x4cdfa4dc   156  stur x0, [x7, #31]
0x4cdfa4e0   160  mov x0, x2
0x4cdfa4e4   164  ret
0x4cdfa4e8   168  b #+0xe0 (addr 0x4cdfa5c8)
0x4cdfa4ec   172  sub csp, jssp, #0x10 (16)
0x4cdfa4f0   176  stp fp, lr, [jssp, #-16]!
0x4cdfa4f4   180  movz fp, #0xa00000000
0x4cdfa4f8   184  sub csp, jssp, #0x8 (8)
0x4cdfa4fc   188  str fp, [jssp, #-8]!
0x4cdfa500   192  add fp, jssp, #0x8 (8)
0x4cdfa504   196  ldur x16, [x2, #-1]
0x4cdfa508   200  ldr x17, [x26, #120]
0x4cdfa50c   204  cmp x16, x17
0x4cdfa510   208  b.ne #+0xc8 (addr 0x4cdfa5d8)
0x4cdfa514   212  ldur d29, [x2, #7]
0x4cdfa518   216  fcvtzs w6, d29
0x4cdfa51c   220  scvtf d0, w6
0x4cdfa520   224  fcmp d29, d0
0x4cdfa524   228  b.ne #+0xb4 (addr 0x4cdfa5d8)
0x4cdfa528   232  ldr lr, [jssp, #16]
0x4cdfa52c   236  ldp xzr, fp, [jssp], #24
0x4cdfa530   240  b #-0xe4 (addr 0x4cdfa44c)
0x4cdfa534   244  sub csp, jssp, #0x10 (16)
0x4cdfa538   248  stp fp, lr, [jssp, #-16]!
0x4cdfa53c   252  movz fp, #0xa00000000
0x4cdfa540   256  sub csp, jssp, #0x8 (8)
0x4cdfa544   260  str fp, [jssp, #-8]!
0x4cdfa548   264  add fp, jssp, #0x8 (8)
0x4cdfa54c   268  movz x2, #0x0
0x4cdfa550   272  mov x16, lr
0x4cdfa554   276  ldr x17, pc+92 (addr 0x000000004cdfa5b0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdfa558   280  blr x17
0x4cdfa55c   284  movz x0, #0x4000000000
0x4cdfa560   288  movz x10, #0x0
0x4cdfa564   292  sub csp, jssp, #0x10 (16)
0x4cdfa568   296  stp x10, x0, [jssp, #-16]!
0x4cdfa56c   300  movz x0, #0x2
0x4cdfa570   304  movz x1, #0x5b88
0x4cdfa574   308  movk x1, #0xe2, lsl #16
0x4cdfa578   312  ldr x16, pc+64 (addr 0x000000004cdfa5b8)    ;; code: STUB, CEntryStub, minor: 5
0x4cdfa57c   316  blr x16
0x4cdfa580   320  str x0, [jssp, #16]
0x4cdfa584   324  ldr x16, pc+60 (addr 0x000000004cdfa5c0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdfa588   328  blr x16
0x4cdfa58c   332  ldr lr, [jssp, #16]
0x4cdfa590   336  ldp xzr, fp, [jssp], #24
0x4cdfa594   340  b #-0x100 (addr 0x4cdfa494)
0x4cdfa598   344  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0x4cdfa59c   348  d63f03e0       constant
0x4cdfa5a0   352  21004241       constant
0x4cdfa5a4   356  00000000       constant
0x4cdfa5a8   360  2a805d81       constant
0x4cdfa5ac   364  00000000       constant
0x4cdfa5b0   368  4cd06820       constant
0x4cdfa5b4   372  00000000       constant
0x4cdfa5b8   376  4cd06260       constant
0x4cdfa5bc   380  00000000       constant
0x4cdfa5c0   384  4cd068e0       constant
0x4cdfa5c4   388  00000000       constant
0x4cdfa5c8   392  movz x16, #0x0
0x4cdfa5cc   396  sub csp, jssp, #0x10 (16)
0x4cdfa5d0   400  stp fp, lr, [jssp, #-16]!
0x4cdfa5d4   404  bl #+0xc (addr 0x4cdfa5e0)
0x4cdfa5d8   408  movz x16, #0x8
0x4cdfa5dc   412  bl #+0x14 (addr 0x4cdfa5f0)
0x4cdfa5e0   416  movz x17, #0xa00000000
0x4cdfa5e4   420  sub csp, jssp, #0x10 (16)
0x4cdfa5e8   424  stp x17, cp, [jssp, #-16]!
0x4cdfa5ec   428  add fp, jssp, #0x10 (16)
0x4cdfa5f0   432  ldr x17, pc+24 (addr 0x000000004cdfa608)    ;; lazy deoptimization bailout 0
0x4cdfa5f4   436  add x17, x17, x16
0x4cdfa5f8   440  br x17
0x4cdfa5fc   444  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdfa600   448  d63f03e0       constant
0x4cdfa604   452  d503201f       constant
0x4cdfa608   456  4cb06000       constant
0x4cdfa60c   460  00000000       constant


Safepoints (size = 21)
0x4cdfa580   320  000 | x2 | x4 | x5 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 25)
0x4cdfa454  embedded object  (0x21004241 <undefined>)
0x4cdfa4c4  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfa554  code target (STUB)  (0x4cd06820)
0x4cdfa578  code target (STUB)  (0x4cd06260)
0x4cdfa584  code target (STUB)  (0x4cd068e0)
0x4cdfa598  constant pool (size 48)
0x4cdfa5f0  runtime entry
0x4cdfa5fc  constant pool (size 20)

--- End code ---
kind = STUB
major_key = FastCloneShallowObjectStub
name = FastCloneShallowObjectStub
compiler = crankshaft
Instructions (size = 485)
0x4cdfa440     0  ldur x4, [x3, #47]
0x4cdfa444     4  tbnz w2, #0, #+0xa8 (addr 0x4cdfa4ec)
0x4cdfa448     8  asr x6, x2, #32
0x4cdfa44c    12  add x5, x4, #0x17 (23)
0x4cdfa450    16  ldr x7, [x5, w6, sxtw #3]
0x4cdfa454    20  ldr x4, pc+332 (addr 0x000000004cdfa5a0)    ;; object: 0x21004241 <undefined>
0x4cdfa458    24  cmp x7, x4
0x4cdfa45c    28  b.eq #+0x8c (addr 0x4cdfa4e8)
0x4cdfa460    32  ldur x4, [x7, #7]
0x4cdfa464    36  ldur x5, [x4, #-1]
0x4cdfa468    40  ldrb w6, [x5, #7]
0x4cdfa46c    44  cmp w6, #0x6 (6)
0x4cdfa470    48  b.ne #+0x78 (addr 0x4cdfa4e8)
0x4cdfa474    52  movz x1, #0xd2c0
0x4cdfa478    56  movk x1, #0x166d, lsl #16
0x4cdfa47c    60  ldp x2, x0, [x1]
0x4cdfa480    64  adds x16, x2, #0x40 (64)
0x4cdfa484    68  ccmp x16, x0, #nzCv, lo
0x4cdfa488    72  b.hi #+0xac (addr 0x4cdfa534)
0x4cdfa48c    76  str x16, [x1]
0x4cdfa490    80  orr x2, x2, #0x1
0x4cdfa494    84  stur x5, [x2, #-1]
0x4cdfa498    88  ldur x0, [x4, #7]
0x4cdfa49c    92  stur x0, [x2, #7]
0x4cdfa4a0    96  ldur x0, [x4, #15]
0x4cdfa4a4   100  stur x0, [x2, #15]
0x4cdfa4a8   104  ldur x0, [x4, #23]
0x4cdfa4ac   108  stur x0, [x2, #23]
0x4cdfa4b0   112  ldur x0, [x4, #31]
0x4cdfa4b4   116  stur x0, [x2, #31]
0x4cdfa4b8   120  ldur x0, [x4, #39]
0x4cdfa4bc   124  stur x0, [x2, #39]
0x4cdfa4c0   128  add x0, x2, #0x30 (48)
0x4cdfa4c4   132  ldr x1, pc+228 (addr 0x000000004cdfa5a8)    ;; object: 0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfa4c8   136  stur x1, [x0, #-1]
0x4cdfa4cc   140  stur x7, [x0, #7]
0x4cdfa4d0   144  ldur w0, [x7, #35]
0x4cdfa4d4   148  add w0, w0, #0x1 (1)
0x4cdfa4d8   152  lsl x0, x0, #32
0x4cdfa4dc   156  stur x0, [x7, #31]
0x4cdfa4e0   160  mov x0, x2
0x4cdfa4e4   164  ret
0x4cdfa4e8   168  b #+0xe0 (addr 0x4cdfa5c8)
0x4cdfa4ec   172  sub csp, jssp, #0x10 (16)
0x4cdfa4f0   176  stp fp, lr, [jssp, #-16]!
0x4cdfa4f4   180  movz fp, #0xa00000000
0x4cdfa4f8   184  sub csp, jssp, #0x8 (8)
0x4cdfa4fc   188  str fp, [jssp, #-8]!
0x4cdfa500   192  add fp, jssp, #0x8 (8)
0x4cdfa504   196  ldur x16, [x2, #-1]
0x4cdfa508   200  ldr x17, [x26, #120]
0x4cdfa50c   204  cmp x16, x17
0x4cdfa510   208  b.ne #+0xc8 (addr 0x4cdfa5d8)
0x4cdfa514   212  ldur d29, [x2, #7]
0x4cdfa518   216  fcvtzs w6, d29
0x4cdfa51c   220  scvtf d0, w6
0x4cdfa520   224  fcmp d29, d0
0x4cdfa524   228  b.ne #+0xb4 (addr 0x4cdfa5d8)
0x4cdfa528   232  ldr lr, [jssp, #16]
0x4cdfa52c   236  ldp xzr, fp, [jssp], #24
0x4cdfa530   240  b #-0xe4 (addr 0x4cdfa44c)
0x4cdfa534   244  sub csp, jssp, #0x10 (16)
0x4cdfa538   248  stp fp, lr, [jssp, #-16]!
0x4cdfa53c   252  movz fp, #0xa00000000
0x4cdfa540   256  sub csp, jssp, #0x8 (8)
0x4cdfa544   260  str fp, [jssp, #-8]!
0x4cdfa548   264  add fp, jssp, #0x8 (8)
0x4cdfa54c   268  movz x2, #0x0
0x4cdfa550   272  mov x16, lr
0x4cdfa554   276  ldr x17, pc+92 (addr 0x000000004cdfa5b0)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4cdfa558   280  blr x17
0x4cdfa55c   284  movz x0, #0x4000000000
0x4cdfa560   288  movz x10, #0x0
0x4cdfa564   292  sub csp, jssp, #0x10 (16)
0x4cdfa568   296  stp x10, x0, [jssp, #-16]!
0x4cdfa56c   300  movz x0, #0x2
0x4cdfa570   304  movz x1, #0x5b88
0x4cdfa574   308  movk x1, #0xe2, lsl #16
0x4cdfa578   312  ldr x16, pc+64 (addr 0x000000004cdfa5b8)    ;; code: STUB, CEntryStub, minor: 5
0x4cdfa57c   316  blr x16
0x4cdfa580   320  str x0, [jssp, #16]
0x4cdfa584   324  ldr x16, pc+60 (addr 0x000000004cdfa5c0)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4cdfa588   328  blr x16
0x4cdfa58c   332  ldr lr, [jssp, #16]
0x4cdfa590   336  ldp xzr, fp, [jssp], #24
0x4cdfa594   340  b #-0x100 (addr 0x4cdfa494)
0x4cdfa598   344  5800017f       constant pool begin (num_const = 11)    ;; constant pool
0x4cdfa59c   348  d63f03e0       constant
0x4cdfa5a0   352  21004241       constant
0x4cdfa5a4   356  00000000       constant
0x4cdfa5a8   360  2a805d81       constant
0x4cdfa5ac   364  00000000       constant
0x4cdfa5b0   368  4cd06820       constant
0x4cdfa5b4   372  00000000       constant
0x4cdfa5b8   376  4cd06260       constant
0x4cdfa5bc   380  00000000       constant
0x4cdfa5c0   384  4cd068e0       constant
0x4cdfa5c4   388  00000000       constant
0x4cdfa5c8   392  movz x16, #0x0
0x4cdfa5cc   396  sub csp, jssp, #0x10 (16)
0x4cdfa5d0   400  stp fp, lr, [jssp, #-16]!
0x4cdfa5d4   404  bl #+0xc (addr 0x4cdfa5e0)
0x4cdfa5d8   408  movz x16, #0x8
0x4cdfa5dc   412  bl #+0x14 (addr 0x4cdfa5f0)
0x4cdfa5e0   416  movz x17, #0xa00000000
0x4cdfa5e4   420  sub csp, jssp, #0x10 (16)
0x4cdfa5e8   424  stp x17, cp, [jssp, #-16]!
0x4cdfa5ec   428  add fp, jssp, #0x10 (16)
0x4cdfa5f0   432  ldr x17, pc+24 (addr 0x000000004cdfa608)    ;; lazy deoptimization bailout 0
0x4cdfa5f4   436  add x17, x17, x16
0x4cdfa5f8   440  br x17
0x4cdfa5fc   444  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4cdfa600   448  d63f03e0       constant
0x4cdfa604   452  d503201f       constant
0x4cdfa608   456  4cb06000       constant
0x4cdfa60c   460  00000000       constant


Safepoints (size = 21)
0x4cdfa580   320  000 | x2 | x4 | x5 | x7 | x27 (sp -> fp)  <none> argc: 2

RelocInfo (size = 25)
0x4cdfa454  embedded object  (0x21004241 <undefined>)
0x4cdfa4c4  embedded object  (0x2a805d81 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfa554  code target (STUB)  (0x4cd06820)
0x4cdfa578  code target (STUB)  (0x4cd06260)
0x4cdfa584  code target (STUB)  (0x4cd068e0)
0x4cdfa598  constant pool (size 48)
0x4cdfa5f0  runtime entry
0x4cdfa5fc  constant pool (size 20)


kind = STUB
major_key = FastNewRestParameterStub
name = FastNewRestParameterStub
compiler = unknown
Instructions (size = 512)
0x4cdfb2e0     0  mov x2, fp
0x4cdfb2e4     4  b #+0x8 (addr 0x4cdfb2ec)
0x4cdfb2e8     8  ldr x2, [x2]
0x4cdfb2ec    12  ldur x3, [x2, #-16]
0x4cdfb2f0    16  cmp x3, x1
0x4cdfb2f4    20  b.ne #-0xc (addr 0x4cdfb2e8)
0x4cdfb2f8    24  ldr x2, [x2]
0x4cdfb2fc    28  ldur x3, [x2, #-8]
0x4cdfb300    32  movz x16, #0xe00000000
0x4cdfb304    36  cmp x3, x16
0x4cdfb308    40  b.ne #+0x18 (addr 0x4cdfb320)
0x4cdfb30c    44  ldursw x0, [x2, #-20]
0x4cdfb310    48  ldur x1, [x1, #31]
0x4cdfb314    52  ldursw x1, [x1, #99]
0x4cdfb318    56  subs x0, x0, x1
0x4cdfb31c    60  b.gt #+0x94 (addr 0x4cdfb3b0)
0x4cdfb320    64  ldr x1, pc+384 (addr 0x000000004cdfb4a0)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x4cdfb324    68  ldp x0, x2, [x1]
0x4cdfb328    72  adds x16, x0, #0x20 (32)
0x4cdfb32c    76  ccmp x16, x2, #nzCv, lo
0x4cdfb330    80  b.hi #+0x34 (addr 0x4cdfb364)
0x4cdfb334    84  str x16, [x1]
0x4cdfb338    88  orr x0, x0, #0x1
0x4cdfb33c    92  ldur x1, [cp, #39]
0x4cdfb340    96  movz x16, #0x187
0x4cdfb344   100  ldr x1, [x1, x16]
0x4cdfb348   104  stur x1, [x0, #-1]
0x4cdfb34c   108  ldr x1, [x26, #304]
0x4cdfb350   112  stur x1, [x0, #7]
0x4cdfb354   116  stur x1, [x0, #15]
0x4cdfb358   120  movz x1, #0x0
0x4cdfb35c   124  stur x1, [x0, #23]
0x4cdfb360   128  ret
0x4cdfb364   132  movz x16, #0xc00000000
0x4cdfb368   136  sub csp, jssp, #0x10 (16)
0x4cdfb36c   140  stp fp, lr, [jssp, #-16]!
0x4cdfb370   144  sub csp, jssp, #0x10 (16)
0x4cdfb374   148  str x16, [jssp, #-8]!
0x4cdfb378   152  ldr x17, pc+304 (addr 0x000000004cdfb4a8)    ;; object: 0x4cdfb281 <Code: STUB>
0x4cdfb37c   156  sub csp, jssp, #0x10 (16)
0x4cdfb380   160  str x17, [jssp, #-8]!
0x4cdfb384   164  add fp, jssp, #0x10 (16)
0x4cdfb388   168  movz x16, #0x2000000000
0x4cdfb38c   172  sub csp, jssp, #0x8 (8)
0x4cdfb390   176  str x16, [jssp, #-8]!
0x4cdfb394   180  movz x0, #0x1
0x4cdfb398   184  ldr x1, pc+280 (addr 0x000000004cdfb4b0)    ;; external reference (Runtime::AllocateInNewSpace)
0x4cdfb39c   188  ldr x16, pc+284 (addr 0x000000004cdfb4b8)    ;; code: STUB, CEntryStub, minor: 4
0x4cdfb3a0   192  blr x16
0x4cdfb3a4   196  mov jssp, fp
0x4cdfb3a8   200  ldp fp, lr, [jssp], #16
0x4cdfb3ac   204  b #-0x70 (addr 0x4cdfb33c)
0x4cdfb3b0   208  add x2, x2, x0, lsl #3
0x4cdfb3b4   212  add x2, x2, #0x8 (8)
0x4cdfb3b8   216  movz x1, #0x30
0x4cdfb3bc   220  add x1, x1, x0, lsl #3
0x4cdfb3c0   224  ldr x5, pc+256 (addr 0x000000004cdfb4c0)    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x4cdfb3c4   228  ldp x3, x16, [x5]
0x4cdfb3c8   232  adds x4, x3, x1
0x4cdfb3cc   236  ccmp x4, x16, #nzCv, lo
0x4cdfb3d0   240  b.hi #+0x64 (addr 0x4cdfb434)
0x4cdfb3d4   244  str x4, [x5]
0x4cdfb3d8   248  orr x3, x3, #0x1
0x4cdfb3dc   252  lsl x6, x0, #32
0x4cdfb3e0   256  ldr x1, [x26, #224]
0x4cdfb3e4   260  stur x1, [x3, #-1]
0x4cdfb3e8   264  stur x6, [x3, #7]
0x4cdfb3ec   268  add x4, x3, #0x10 (16)
0x4cdfb3f0   272  add x0, x4, x0, lsl #3
0x4cdfb3f4   276  cmp x4, x0
0x4cdfb3f8   280  b.eq #+0x18 (addr 0x4cdfb410)
0x4cdfb3fc   284  ldr x5, [x2]
0x4cdfb400   288  stur x5, [x4, #-1]
0x4cdfb404   292  sub x2, x2, #0x8 (8)
0x4cdfb408   296  add x4, x4, #0x8 (8)
0x4cdfb40c   300  b #-0x18 (addr 0x4cdfb3f4)
0x4cdfb410   304  ldur x1, [cp, #39]
0x4cdfb414   308  movz x16, #0x187
0x4cdfb418   312  ldr x1, [x1, x16]
0x4cdfb41c   316  stur x1, [x0, #-1]
0x4cdfb420   320  ldr x1, [x26, #304]
0x4cdfb424   324  stur x1, [x0, #7]
0x4cdfb428   328  stur x3, [x0, #15]
0x4cdfb42c   332  stur x6, [x0, #23]
0x4cdfb430   336  ret
0x4cdfb434   340  movz x16, #0xc00000000
0x4cdfb438   344  sub csp, jssp, #0x10 (16)
0x4cdfb43c   348  stp fp, lr, [jssp, #-16]!
0x4cdfb440   352  sub csp, jssp, #0x10 (16)
0x4cdfb444   356  str x16, [jssp, #-8]!
0x4cdfb448   360  ldr x17, pc+128 (addr 0x000000004cdfb4c8)    ;; object: 0x4cdfb281 <Code: STUB>
0x4cdfb44c   364  sub csp, jssp, #0x10 (16)
0x4cdfb450   368  str x17, [jssp, #-8]!
0x4cdfb454   372  add fp, jssp, #0x10 (16)
0x4cdfb458   376  lsl x0, x0, #32
0x4cdfb45c   380  lsl x1, x1, #32
0x4cdfb460   384  sub csp, jssp, #0x18 (24)
0x4cdfb464   388  stp x1, x2, [jssp, #-24]!
0x4cdfb468   392  str x0, [jssp, #16]
0x4cdfb46c   396  movz x0, #0x1
0x4cdfb470   400  ldr x1, pc+96 (addr 0x000000004cdfb4d0)    ;; external reference (Runtime::AllocateInNewSpace)
0x4cdfb474   404  ldr x16, pc+100 (addr 0x000000004cdfb4d8)    ;; code: STUB, CEntryStub, minor: 4
0x4cdfb478   408  blr x16
0x4cdfb47c   412  mov x3, x0
0x4cdfb480   416  ldp x2, x0, [jssp], #16
0x4cdfb484   420  asr x0, x0, #32
0x4cdfb488   424  mov jssp, fp
0x4cdfb48c   428  ldp fp, lr, [jssp], #16
0x4cdfb490   432  b #-0xb4 (addr 0x4cdfb3dc)
0x4cdfb494   436  5800025f       constant pool begin (num_const = 18)    ;; constant pool
0x4cdfb498   440  d63f03e0       constant
0x4cdfb49c   444  d503201f       constant
0x4cdfb4a0   448  166dd2c0       constant
0x4cdfb4a4   452  00000000       constant
0x4cdfb4a8   456  4cdfb281       constant
0x4cdfb4ac   460  00000000       constant
0x4cdfb4b0   464  00e25898       constant
0x4cdfb4b4   468  00000000       constant
0x4cdfb4b8   472  4cd06060       constant
0x4cdfb4bc   476  00000000       constant
0x4cdfb4c0   480  166dd2c0       constant
0x4cdfb4c4   484  00000000       constant
0x4cdfb4c8   488  4cdfb281       constant
0x4cdfb4cc   492  00000000       constant
0x4cdfb4d0   496  00e25898       constant
0x4cdfb4d4   500  00000000       constant
0x4cdfb4d8   504  4cd06060       constant
0x4cdfb4dc   508  00000000       constant


RelocInfo (size = 24)
0x4cdfb320  external reference (Heap::NewSpaceAllocationTopAddress())  (0x166dd2c0)
0x4cdfb378  embedded object  (0x4cdfb281 <Code: STUB>)
0x4cdfb398  external reference (Runtime::AllocateInNewSpace)  (0xe25898)
0x4cdfb39c  code target (STUB)  (0x4cd06060)
0x4cdfb3c0  external reference (Heap::NewSpaceAllocationTopAddress())  (0x166dd2c0)
0x4cdfb448  embedded object  (0x4cdfb281 <Code: STUB>)
0x4cdfb470  external reference (Runtime::AllocateInNewSpace)  (0xe25898)
0x4cdfb474  code target (STUB)  (0x4cd06060)
0x4cdfb494  constant pool (size 76)


kind = HANDLER
major_key = <NoCache>Stub
name = info
compiler = unknown
Instructions (size = 120)
0x4cdfb860     0  sub csp, jssp, #0x8 (8)
0x4cdfb864     4  str x3, [jssp, #-8]!
0x4cdfb868     8  sub csp, jssp, #0x8 (8)
0x4cdfb86c    12  str x0, [jssp, #-8]!
0x4cdfb870    16  ldr x0, pc+72 (addr 0x000000004cdfb8b8)    ;; object: 0xffffaa1ec9d9 Cell for 0
0x4cdfb874    20  ldur x0, [x0, #7]
0x4cdfb878    24  cmp x0, #0x0 (0)
0x4cdfb87c    28  b.ne #+0x14 (addr 0x4cdfb890)
0x4cdfb880    32  ldr x3, pc+64 (addr 0x000000004cdfb8c0)    ;; object: 0xffffaa1ec9e9 WeakCell for 0x2334ddf1 <an Object with map 0x2a836be1>
0x4cdfb884    36  ldur x3, [x3, #7]
0x4cdfb888    40  tbz w3, #0, #+0x8 (addr 0x4cdfb890)
0x4cdfb88c    44  b #+0x14 (addr 0x4cdfb8a0)
0x4cdfb890    48  ldr x0, [jssp], #8
0x4cdfb894    52  ldr x3, [jssp], #8
0x4cdfb898    56  ldr x16, pc+48 (addr 0x000000004cdfb8c8)    ;; code: BUILTIN
0x4cdfb89c    60  br x16
0x4cdfb8a0    64  add jssp, jssp, #0x10 (16)
0x4cdfb8a4    68  mov x1, x3
0x4cdfb8a8    72  ldr x16, pc+40 (addr 0x000000004cdfb8d0)    ;; code: HANDLER, LoadConstantStub, minor: 2
0x4cdfb8ac    76  br x16
0x4cdfb8b0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdfb8b4    84  d63f03e0       constant
0x4cdfb8b8    88  aa1ec9d9       constant
0x4cdfb8bc    92  0000ffff       constant
0x4cdfb8c0    96  aa1ec9e9       constant
0x4cdfb8c4   100  0000ffff       constant
0x4cdfb8c8   104  4cd222e0       constant
0x4cdfb8cc   108  00000000       constant
0x4cdfb8d0   112  4cd43380       constant
0x4cdfb8d4   116  00000000       constant


RelocInfo (size = 10)
0x4cdfb870  embedded object  (0xffffaa1ec9d9 Cell for 0)
0x4cdfb880  embedded object  (0xffffaa1ec9e9 WeakCell for 0x2334ddf1 <an Object with map 0x2a836be1>)
0x4cdfb898  code target (BUILTIN)  (0x4cd222e0)
0x4cdfb8a8  code target (HANDLER)  (0x4cd43380)
0x4cdfb8b0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = bind
compiler = unknown
Instructions (size = 120)
0x4cdfb940     0  sub csp, jssp, #0x8 (8)
0x4cdfb944     4  str x3, [jssp, #-8]!
0x4cdfb948     8  sub csp, jssp, #0x8 (8)
0x4cdfb94c    12  str x0, [jssp, #-8]!
0x4cdfb950    16  ldr x0, pc+72 (addr 0x000000004cdfb998)    ;; object: 0x2105b0f1 Cell for 0
0x4cdfb954    20  ldur x0, [x0, #7]
0x4cdfb958    24  cmp x0, #0x0 (0)
0x4cdfb95c    28  b.ne #+0x14 (addr 0x4cdfb970)
0x4cdfb960    32  ldr x3, pc+64 (addr 0x000000004cdfb9a0)    ;; object: 0xffffaa1eca39 WeakCell for 0x21040019 <JS Function (SharedFunctionInfo 0x2103ff71)>
0x4cdfb964    36  ldur x3, [x3, #7]
0x4cdfb968    40  tbz w3, #0, #+0x8 (addr 0x4cdfb970)
0x4cdfb96c    44  b #+0x14 (addr 0x4cdfb980)
0x4cdfb970    48  ldr x0, [jssp], #8
0x4cdfb974    52  ldr x3, [jssp], #8
0x4cdfb978    56  ldr x16, pc+48 (addr 0x000000004cdfb9a8)    ;; code: BUILTIN
0x4cdfb97c    60  br x16
0x4cdfb980    64  add jssp, jssp, #0x10 (16)
0x4cdfb984    68  mov x1, x3
0x4cdfb988    72  ldr x16, pc+40 (addr 0x000000004cdfb9b0)    ;; code: HANDLER, LoadConstantStub, minor: 5
0x4cdfb98c    76  br x16
0x4cdfb990    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdfb994    84  d63f03e0       constant
0x4cdfb998    88  2105b0f1       constant
0x4cdfb99c    92  00000000       constant
0x4cdfb9a0    96  aa1eca39       constant
0x4cdfb9a4   100  0000ffff       constant
0x4cdfb9a8   104  4cd222e0       constant
0x4cdfb9ac   108  00000000       constant
0x4cdfb9b0   112  4cd43500       constant
0x4cdfb9b4   116  00000000       constant


RelocInfo (size = 10)
0x4cdfb950  embedded object  (0x2105b0f1 Cell for 0)
0x4cdfb960  embedded object  (0xffffaa1eca39 WeakCell for 0x21040019 <JS Function (SharedFunctionInfo 0x2103ff71)>)
0x4cdfb978  code target (BUILTIN)  (0x4cd222e0)
0x4cdfb988  code target (HANDLER)  (0x4cd43500)
0x4cdfb990  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = info
compiler = unknown
Instructions (size = 184)
0x4cdfba20     0  sub csp, jssp, #0x8 (8)
0x4cdfba24     4  str x3, [jssp, #-8]!
0x4cdfba28     8  sub csp, jssp, #0x8 (8)
0x4cdfba2c    12  str x4, [jssp, #-8]!
0x4cdfba30    16  ldr x3, pc+112 (addr 0x000000004cdfbaa0)    ;; object: 0xffffaa1ec9d9 Cell for 0
0x4cdfba34    20  ldur x3, [x3, #7]
0x4cdfba38    24  cmp x3, #0x0 (0)
0x4cdfba3c    28  b.ne #+0x44 (addr 0x4cdfba80)
0x4cdfba40    32  tbz w0, #0, #+0x40 (addr 0x4cdfba80)
0x4cdfba44    36  ldur x3, [x0, #-1]
0x4cdfba48    40  ldr x4, pc+96 (addr 0x000000004cdfbaa8)    ;; object: 0xffffaa1ec969 WeakCell for 0x2a80a871 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfba4c    44  ldur x4, [x4, #7]
0x4cdfba50    48  cmp x3, x4
0x4cdfba54    52  b.ne #+0x2c (addr 0x4cdfba80)
0x4cdfba58    56  ldr x5, pc+88 (addr 0x000000004cdfbab0)    ;; object: 0xffffaa1eca71 WeakCell for 0x2a841c39 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfba5c    60  ldur x5, [x5, #7]
0x4cdfba60    64  tbz w5, #0, #+0x20 (addr 0x4cdfba80)
0x4cdfba64    68  ldursw x4, [x5, #15]
0x4cdfba68    72  tbnz w4, #23, #+0x18 (addr 0x4cdfba80)
0x4cdfba6c    76  ldr x4, [jssp], #8
0x4cdfba70    80  ldr x3, [jssp], #8
0x4cdfba74    84  ldr x2, pc+68 (addr 0x000000004cdfbab8)    ;; object: 0xffffaa1cc161 <String[4]: info>
0x4cdfba78    88  ldr x16, pc+72 (addr 0x000000004cdfbac0)    ;; code: HANDLER, StoreTransitionStub, minor: 198663
0x4cdfba7c    92  br x16
0x4cdfba80    96  ldr x2, pc+72 (addr 0x000000004cdfbac8)    ;; object: 0xffffaa1cc161 <String[4]: info>
0x4cdfba84   100  ldr x4, [jssp], #8
0x4cdfba88   104  ldr x3, [jssp], #8
0x4cdfba8c   108  ldr x16, pc+68 (addr 0x000000004cdfbad0)    ;; code: BUILTIN
0x4cdfba90   112  br x16
0x4cdfba94   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdfba98   120  d63f03e0       constant
0x4cdfba9c   124  d503201f       constant
0x4cdfbaa0   128  aa1ec9d9       constant
0x4cdfbaa4   132  0000ffff       constant
0x4cdfbaa8   136  aa1ec969       constant
0x4cdfbaac   140  0000ffff       constant
0x4cdfbab0   144  aa1eca71       constant
0x4cdfbab4   148  0000ffff       constant
0x4cdfbab8   152  aa1cc161       constant
0x4cdfbabc   156  0000ffff       constant
0x4cdfbac0   160  4cd8c240       constant
0x4cdfbac4   164  00000000       constant
0x4cdfbac8   168  aa1cc161       constant
0x4cdfbacc   172  0000ffff       constant
0x4cdfbad0   176  4cd22420       constant
0x4cdfbad4   180  00000000       constant


RelocInfo (size = 13)
0x4cdfba30  embedded object  (0xffffaa1ec9d9 Cell for 0)
0x4cdfba48  embedded object  (0xffffaa1ec969 WeakCell for 0x2a80a871 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfba58  embedded object  (0xffffaa1eca71 WeakCell for 0x2a841c39 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfba74  embedded object  (0xffffaa1cc161 <String[4]: info>)
0x4cdfba78  code target (HANDLER)  (0x4cd8c240)
0x4cdfba80  embedded object  (0xffffaa1cc161 <String[4]: info>)
0x4cdfba8c  code target (BUILTIN)  (0x4cd22420)
0x4cdfba94  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = warn
compiler = unknown
Instructions (size = 120)
0x4cdfbb40     0  sub csp, jssp, #0x8 (8)
0x4cdfbb44     4  str x3, [jssp, #-8]!
0x4cdfbb48     8  sub csp, jssp, #0x8 (8)
0x4cdfbb4c    12  str x0, [jssp, #-8]!
0x4cdfbb50    16  ldr x0, pc+72 (addr 0x000000004cdfbb98)    ;; object: 0xffffaa1ec9d9 Cell for 0
0x4cdfbb54    20  ldur x0, [x0, #7]
0x4cdfbb58    24  cmp x0, #0x0 (0)
0x4cdfbb5c    28  b.ne #+0x14 (addr 0x4cdfbb70)
0x4cdfbb60    32  ldr x3, pc+64 (addr 0x000000004cdfbba0)    ;; object: 0xffffaa1ecaa9 WeakCell for 0x2334ddf1 <an Object with map 0x2a836be1>
0x4cdfbb64    36  ldur x3, [x3, #7]
0x4cdfbb68    40  tbz w3, #0, #+0x8 (addr 0x4cdfbb70)
0x4cdfbb6c    44  b #+0x14 (addr 0x4cdfbb80)
0x4cdfbb70    48  ldr x0, [jssp], #8
0x4cdfbb74    52  ldr x3, [jssp], #8
0x4cdfbb78    56  ldr x16, pc+48 (addr 0x000000004cdfbba8)    ;; code: BUILTIN
0x4cdfbb7c    60  br x16
0x4cdfbb80    64  add jssp, jssp, #0x10 (16)
0x4cdfbb84    68  mov x1, x3
0x4cdfbb88    72  ldr x16, pc+40 (addr 0x000000004cdfbbb0)    ;; code: HANDLER, LoadConstantStub, minor: 3
0x4cdfbb8c    76  br x16
0x4cdfbb90    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdfbb94    84  d63f03e0       constant
0x4cdfbb98    88  aa1ec9d9       constant
0x4cdfbb9c    92  0000ffff       constant
0x4cdfbba0    96  aa1ecaa9       constant
0x4cdfbba4   100  0000ffff       constant
0x4cdfbba8   104  4cd222e0       constant
0x4cdfbbac   108  00000000       constant
0x4cdfbbb0   112  4cd43400       constant
0x4cdfbbb4   116  00000000       constant


RelocInfo (size = 10)
0x4cdfbb50  embedded object  (0xffffaa1ec9d9 Cell for 0)
0x4cdfbb60  embedded object  (0xffffaa1ecaa9 WeakCell for 0x2334ddf1 <an Object with map 0x2a836be1>)
0x4cdfbb78  code target (BUILTIN)  (0x4cd222e0)
0x4cdfbb88  code target (HANDLER)  (0x4cd43400)
0x4cdfbb90  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = warn
compiler = unknown
Instructions (size = 184)
0x4cdfbf40     0  sub csp, jssp, #0x8 (8)
0x4cdfbf44     4  str x3, [jssp, #-8]!
0x4cdfbf48     8  sub csp, jssp, #0x8 (8)
0x4cdfbf4c    12  str x4, [jssp, #-8]!
0x4cdfbf50    16  ldr x3, pc+112 (addr 0x000000004cdfbfc0)    ;; object: 0xffffaa1ec9d9 Cell for 0
0x4cdfbf54    20  ldur x3, [x3, #7]
0x4cdfbf58    24  cmp x3, #0x0 (0)
0x4cdfbf5c    28  b.ne #+0x44 (addr 0x4cdfbfa0)
0x4cdfbf60    32  tbz w0, #0, #+0x40 (addr 0x4cdfbfa0)
0x4cdfbf64    36  ldur x3, [x0, #-1]
0x4cdfbf68    40  ldr x4, pc+96 (addr 0x000000004cdfbfc8)    ;; object: 0xffffaa1ec969 WeakCell for 0x2a80a871 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfbf6c    44  ldur x4, [x4, #7]
0x4cdfbf70    48  cmp x3, x4
0x4cdfbf74    52  b.ne #+0x2c (addr 0x4cdfbfa0)
0x4cdfbf78    56  ldr x5, pc+88 (addr 0x000000004cdfbfd0)    ;; object: 0xffffaa1ecc59 WeakCell for 0x2a841c91 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfbf7c    60  ldur x5, [x5, #7]
0x4cdfbf80    64  tbz w5, #0, #+0x20 (addr 0x4cdfbfa0)
0x4cdfbf84    68  ldursw x4, [x5, #15]
0x4cdfbf88    72  tbnz w4, #23, #+0x18 (addr 0x4cdfbfa0)
0x4cdfbf8c    76  ldr x4, [jssp], #8
0x4cdfbf90    80  ldr x3, [jssp], #8
0x4cdfbf94    84  ldr x2, pc+68 (addr 0x000000004cdfbfd8)    ;; object: 0xffffaa1cc181 <String[4]: warn>
0x4cdfbf98    88  ldr x16, pc+72 (addr 0x000000004cdfbfe0)    ;; code: HANDLER, StoreTransitionStub, minor: 198664
0x4cdfbf9c    92  br x16
0x4cdfbfa0    96  ldr x2, pc+72 (addr 0x000000004cdfbfe8)    ;; object: 0xffffaa1cc181 <String[4]: warn>
0x4cdfbfa4   100  ldr x4, [jssp], #8
0x4cdfbfa8   104  ldr x3, [jssp], #8
0x4cdfbfac   108  ldr x16, pc+68 (addr 0x000000004cdfbff0)    ;; code: BUILTIN
0x4cdfbfb0   112  br x16
0x4cdfbfb4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdfbfb8   120  d63f03e0       constant
0x4cdfbfbc   124  d503201f       constant
0x4cdfbfc0   128  aa1ec9d9       constant
0x4cdfbfc4   132  0000ffff       constant
0x4cdfbfc8   136  aa1ec969       constant
0x4cdfbfcc   140  0000ffff       constant
0x4cdfbfd0   144  aa1ecc59       constant
0x4cdfbfd4   148  0000ffff       constant
0x4cdfbfd8   152  aa1cc181       constant
0x4cdfbfdc   156  0000ffff       constant
0x4cdfbfe0   160  4cde5020       constant
0x4cdfbfe4   164  00000000       constant
0x4cdfbfe8   168  aa1cc181       constant
0x4cdfbfec   172  0000ffff       constant
0x4cdfbff0   176  4cd22420       constant
0x4cdfbff4   180  00000000       constant


RelocInfo (size = 13)
0x4cdfbf50  embedded object  (0xffffaa1ec9d9 Cell for 0)
0x4cdfbf68  embedded object  (0xffffaa1ec969 WeakCell for 0x2a80a871 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfbf78  embedded object  (0xffffaa1ecc59 WeakCell for 0x2a841c91 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfbf94  embedded object  (0xffffaa1cc181 <String[4]: warn>)
0x4cdfbf98  code target (HANDLER)  (0x4cde5020)
0x4cdfbfa0  embedded object  (0xffffaa1cc181 <String[4]: warn>)
0x4cdfbfac  code target (BUILTIN)  (0x4cd22420)
0x4cdfbfb4  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = error
compiler = unknown
Instructions (size = 120)
0x4cdfc060     0  sub csp, jssp, #0x8 (8)
0x4cdfc064     4  str x3, [jssp, #-8]!
0x4cdfc068     8  sub csp, jssp, #0x8 (8)
0x4cdfc06c    12  str x0, [jssp, #-8]!
0x4cdfc070    16  ldr x0, pc+72 (addr 0x000000004cdfc0b8)    ;; object: 0xffffaa1ec9d9 Cell for 0
0x4cdfc074    20  ldur x0, [x0, #7]
0x4cdfc078    24  cmp x0, #0x0 (0)
0x4cdfc07c    28  b.ne #+0x14 (addr 0x4cdfc090)
0x4cdfc080    32  ldr x3, pc+64 (addr 0x000000004cdfc0c0)    ;; object: 0xffffaa1ecc91 WeakCell for 0x2334ddf1 <an Object with map 0x2a836be1>
0x4cdfc084    36  ldur x3, [x3, #7]
0x4cdfc088    40  tbz w3, #0, #+0x8 (addr 0x4cdfc090)
0x4cdfc08c    44  b #+0x14 (addr 0x4cdfc0a0)
0x4cdfc090    48  ldr x0, [jssp], #8
0x4cdfc094    52  ldr x3, [jssp], #8
0x4cdfc098    56  ldr x16, pc+48 (addr 0x000000004cdfc0c8)    ;; code: BUILTIN
0x4cdfc09c    60  br x16
0x4cdfc0a0    64  add jssp, jssp, #0x10 (16)
0x4cdfc0a4    68  mov x1, x3
0x4cdfc0a8    72  ldr x16, pc+40 (addr 0x000000004cdfc0d0)    ;; code: HANDLER, LoadConstantStub, minor: 4
0x4cdfc0ac    76  br x16
0x4cdfc0b0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdfc0b4    84  d63f03e0       constant
0x4cdfc0b8    88  aa1ec9d9       constant
0x4cdfc0bc    92  0000ffff       constant
0x4cdfc0c0    96  aa1ecc91       constant
0x4cdfc0c4   100  0000ffff       constant
0x4cdfc0c8   104  4cd222e0       constant
0x4cdfc0cc   108  00000000       constant
0x4cdfc0d0   112  4cd43480       constant
0x4cdfc0d4   116  00000000       constant


RelocInfo (size = 10)
0x4cdfc070  embedded object  (0xffffaa1ec9d9 Cell for 0)
0x4cdfc080  embedded object  (0xffffaa1ecc91 WeakCell for 0x2334ddf1 <an Object with map 0x2a836be1>)
0x4cdfc098  code target (BUILTIN)  (0x4cd222e0)
0x4cdfc0a8  code target (HANDLER)  (0x4cd43480)
0x4cdfc0b0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = error
compiler = unknown
Instructions (size = 184)
0x4cdfc140     0  sub csp, jssp, #0x8 (8)
0x4cdfc144     4  str x3, [jssp, #-8]!
0x4cdfc148     8  sub csp, jssp, #0x8 (8)
0x4cdfc14c    12  str x4, [jssp, #-8]!
0x4cdfc150    16  ldr x3, pc+112 (addr 0x000000004cdfc1c0)    ;; object: 0xffffaa1ec9d9 Cell for 0
0x4cdfc154    20  ldur x3, [x3, #7]
0x4cdfc158    24  cmp x3, #0x0 (0)
0x4cdfc15c    28  b.ne #+0x44 (addr 0x4cdfc1a0)
0x4cdfc160    32  tbz w0, #0, #+0x40 (addr 0x4cdfc1a0)
0x4cdfc164    36  ldur x3, [x0, #-1]
0x4cdfc168    40  ldr x4, pc+96 (addr 0x000000004cdfc1c8)    ;; object: 0xffffaa1ec969 WeakCell for 0x2a80a871 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfc16c    44  ldur x4, [x4, #7]
0x4cdfc170    48  cmp x3, x4
0x4cdfc174    52  b.ne #+0x2c (addr 0x4cdfc1a0)
0x4cdfc178    56  ldr x5, pc+88 (addr 0x000000004cdfc1d0)    ;; object: 0xffffaa1eccc9 WeakCell for 0x2a841ce9 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfc17c    60  ldur x5, [x5, #7]
0x4cdfc180    64  tbz w5, #0, #+0x20 (addr 0x4cdfc1a0)
0x4cdfc184    68  ldursw x4, [x5, #15]
0x4cdfc188    72  tbnz w4, #23, #+0x18 (addr 0x4cdfc1a0)
0x4cdfc18c    76  ldr x4, [jssp], #8
0x4cdfc190    80  ldr x3, [jssp], #8
0x4cdfc194    84  ldr x2, pc+68 (addr 0x000000004cdfc1d8)    ;; object: 0x210b2571 <String[5]: error>
0x4cdfc198    88  ldr x16, pc+72 (addr 0x000000004cdfc1e0)    ;; code: HANDLER, StoreTransitionStub, minor: 198665
0x4cdfc19c    92  br x16
0x4cdfc1a0    96  ldr x2, pc+72 (addr 0x000000004cdfc1e8)    ;; object: 0x210b2571 <String[5]: error>
0x4cdfc1a4   100  ldr x4, [jssp], #8
0x4cdfc1a8   104  ldr x3, [jssp], #8
0x4cdfc1ac   108  ldr x16, pc+68 (addr 0x000000004cdfc1f0)    ;; code: BUILTIN
0x4cdfc1b0   112  br x16
0x4cdfc1b4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdfc1b8   120  d63f03e0       constant
0x4cdfc1bc   124  d503201f       constant
0x4cdfc1c0   128  aa1ec9d9       constant
0x4cdfc1c4   132  0000ffff       constant
0x4cdfc1c8   136  aa1ec969       constant
0x4cdfc1cc   140  0000ffff       constant
0x4cdfc1d0   144  aa1eccc9       constant
0x4cdfc1d4   148  0000ffff       constant
0x4cdfc1d8   152  210b2571       constant
0x4cdfc1dc   156  00000000       constant
0x4cdfc1e0   160  4cde53c0       constant
0x4cdfc1e4   164  00000000       constant
0x4cdfc1e8   168  210b2571       constant
0x4cdfc1ec   172  00000000       constant
0x4cdfc1f0   176  4cd22420       constant
0x4cdfc1f4   180  00000000       constant


RelocInfo (size = 13)
0x4cdfc150  embedded object  (0xffffaa1ec9d9 Cell for 0)
0x4cdfc168  embedded object  (0xffffaa1ec969 WeakCell for 0x2a80a871 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfc178  embedded object  (0xffffaa1eccc9 WeakCell for 0x2a841ce9 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfc194  embedded object  (0x210b2571 <String[5]: error>)
0x4cdfc198  code target (HANDLER)  (0x4cde53c0)
0x4cdfc1a0  embedded object  (0x210b2571 <String[5]: error>)
0x4cdfc1ac  code target (BUILTIN)  (0x4cd22420)
0x4cdfc1b4  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = dir
compiler = unknown
Instructions (size = 120)
0x4cdfc260     0  sub csp, jssp, #0x8 (8)
0x4cdfc264     4  str x3, [jssp, #-8]!
0x4cdfc268     8  sub csp, jssp, #0x8 (8)
0x4cdfc26c    12  str x0, [jssp, #-8]!
0x4cdfc270    16  ldr x0, pc+72 (addr 0x000000004cdfc2b8)    ;; object: 0xffffaa1ec9d9 Cell for 0
0x4cdfc274    20  ldur x0, [x0, #7]
0x4cdfc278    24  cmp x0, #0x0 (0)
0x4cdfc27c    28  b.ne #+0x14 (addr 0x4cdfc290)
0x4cdfc280    32  ldr x3, pc+64 (addr 0x000000004cdfc2c0)    ;; object: 0xffffaa1ecd01 WeakCell for 0x2334ddf1 <an Object with map 0x2a836be1>
0x4cdfc284    36  ldur x3, [x3, #7]
0x4cdfc288    40  tbz w3, #0, #+0x8 (addr 0x4cdfc290)
0x4cdfc28c    44  b #+0x14 (addr 0x4cdfc2a0)
0x4cdfc290    48  ldr x0, [jssp], #8
0x4cdfc294    52  ldr x3, [jssp], #8
0x4cdfc298    56  ldr x16, pc+48 (addr 0x000000004cdfc2c8)    ;; code: BUILTIN
0x4cdfc29c    60  br x16
0x4cdfc2a0    64  add jssp, jssp, #0x10 (16)
0x4cdfc2a4    68  mov x1, x3
0x4cdfc2a8    72  ldr x16, pc+40 (addr 0x000000004cdfc2d0)    ;; code: HANDLER, LoadConstantStub, minor: 5
0x4cdfc2ac    76  br x16
0x4cdfc2b0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdfc2b4    84  d63f03e0       constant
0x4cdfc2b8    88  aa1ec9d9       constant
0x4cdfc2bc    92  0000ffff       constant
0x4cdfc2c0    96  aa1ecd01       constant
0x4cdfc2c4   100  0000ffff       constant
0x4cdfc2c8   104  4cd222e0       constant
0x4cdfc2cc   108  00000000       constant
0x4cdfc2d0   112  4cd43500       constant
0x4cdfc2d4   116  00000000       constant


RelocInfo (size = 10)
0x4cdfc270  embedded object  (0xffffaa1ec9d9 Cell for 0)
0x4cdfc280  embedded object  (0xffffaa1ecd01 WeakCell for 0x2334ddf1 <an Object with map 0x2a836be1>)
0x4cdfc298  code target (BUILTIN)  (0x4cd222e0)
0x4cdfc2a8  code target (HANDLER)  (0x4cd43500)
0x4cdfc2b0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = dir
compiler = unknown
Instructions (size = 184)
0x4cdfc6c0     0  sub csp, jssp, #0x8 (8)
0x4cdfc6c4     4  str x3, [jssp, #-8]!
0x4cdfc6c8     8  sub csp, jssp, #0x8 (8)
0x4cdfc6cc    12  str x4, [jssp, #-8]!
0x4cdfc6d0    16  ldr x3, pc+112 (addr 0x000000004cdfc740)    ;; object: 0xffffaa1ec9d9 Cell for 0
0x4cdfc6d4    20  ldur x3, [x3, #7]
0x4cdfc6d8    24  cmp x3, #0x0 (0)
0x4cdfc6dc    28  b.ne #+0x44 (addr 0x4cdfc720)
0x4cdfc6e0    32  tbz w0, #0, #+0x40 (addr 0x4cdfc720)
0x4cdfc6e4    36  ldur x3, [x0, #-1]
0x4cdfc6e8    40  ldr x4, pc+96 (addr 0x000000004cdfc748)    ;; object: 0xffffaa1ec969 WeakCell for 0x2a80a871 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfc6ec    44  ldur x4, [x4, #7]
0x4cdfc6f0    48  cmp x3, x4
0x4cdfc6f4    52  b.ne #+0x2c (addr 0x4cdfc720)
0x4cdfc6f8    56  ldr x5, pc+88 (addr 0x000000004cdfc750)    ;; object: 0xffffaa1ecf11 WeakCell for 0x2a841d41 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfc6fc    60  ldur x5, [x5, #7]
0x4cdfc700    64  tbz w5, #0, #+0x20 (addr 0x4cdfc720)
0x4cdfc704    68  ldursw x4, [x5, #15]
0x4cdfc708    72  tbnz w4, #23, #+0x18 (addr 0x4cdfc720)
0x4cdfc70c    76  ldr x4, [jssp], #8
0x4cdfc710    80  ldr x3, [jssp], #8
0x4cdfc714    84  ldr x2, pc+68 (addr 0x000000004cdfc758)    ;; object: 0x210cffd1 <String[3]: dir>
0x4cdfc718    88  ldr x16, pc+72 (addr 0x000000004cdfc760)    ;; code: HANDLER, StoreTransitionStub, minor: 198666
0x4cdfc71c    92  br x16
0x4cdfc720    96  ldr x2, pc+72 (addr 0x000000004cdfc768)    ;; object: 0x210cffd1 <String[3]: dir>
0x4cdfc724   100  ldr x4, [jssp], #8
0x4cdfc728   104  ldr x3, [jssp], #8
0x4cdfc72c   108  ldr x16, pc+68 (addr 0x000000004cdfc770)    ;; code: BUILTIN
0x4cdfc730   112  br x16
0x4cdfc734   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdfc738   120  d63f03e0       constant
0x4cdfc73c   124  d503201f       constant
0x4cdfc740   128  aa1ec9d9       constant
0x4cdfc744   132  0000ffff       constant
0x4cdfc748   136  aa1ec969       constant
0x4cdfc74c   140  0000ffff       constant
0x4cdfc750   144  aa1ecf11       constant
0x4cdfc754   148  0000ffff       constant
0x4cdfc758   152  210cffd1       constant
0x4cdfc75c   156  00000000       constant
0x4cdfc760   160  4cdf4c60       constant
0x4cdfc764   164  00000000       constant
0x4cdfc768   168  210cffd1       constant
0x4cdfc76c   172  00000000       constant
0x4cdfc770   176  4cd22420       constant
0x4cdfc774   180  00000000       constant


RelocInfo (size = 13)
0x4cdfc6d0  embedded object  (0xffffaa1ec9d9 Cell for 0)
0x4cdfc6e8  embedded object  (0xffffaa1ec969 WeakCell for 0x2a80a871 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfc6f8  embedded object  (0xffffaa1ecf11 WeakCell for 0x2a841d41 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfc714  embedded object  (0x210cffd1 <String[3]: dir>)
0x4cdfc718  code target (HANDLER)  (0x4cdf4c60)
0x4cdfc720  embedded object  (0x210cffd1 <String[3]: dir>)
0x4cdfc72c  code target (BUILTIN)  (0x4cd22420)
0x4cdfc734  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = time
compiler = unknown
Instructions (size = 120)
0x4cdfc7e0     0  sub csp, jssp, #0x8 (8)
0x4cdfc7e4     4  str x3, [jssp, #-8]!
0x4cdfc7e8     8  sub csp, jssp, #0x8 (8)
0x4cdfc7ec    12  str x0, [jssp, #-8]!
0x4cdfc7f0    16  ldr x0, pc+72 (addr 0x000000004cdfc838)    ;; object: 0xffffaa1ec9d9 Cell for 0
0x4cdfc7f4    20  ldur x0, [x0, #7]
0x4cdfc7f8    24  cmp x0, #0x0 (0)
0x4cdfc7fc    28  b.ne #+0x14 (addr 0x4cdfc810)
0x4cdfc800    32  ldr x3, pc+64 (addr 0x000000004cdfc840)    ;; object: 0xffffaa1ecf49 WeakCell for 0x2334ddf1 <an Object with map 0x2a836be1>
0x4cdfc804    36  ldur x3, [x3, #7]
0x4cdfc808    40  tbz w3, #0, #+0x8 (addr 0x4cdfc810)
0x4cdfc80c    44  b #+0x14 (addr 0x4cdfc820)
0x4cdfc810    48  ldr x0, [jssp], #8
0x4cdfc814    52  ldr x3, [jssp], #8
0x4cdfc818    56  ldr x16, pc+48 (addr 0x000000004cdfc848)    ;; code: BUILTIN
0x4cdfc81c    60  br x16
0x4cdfc820    64  add jssp, jssp, #0x10 (16)
0x4cdfc824    68  mov x1, x3
0x4cdfc828    72  ldr x16, pc+40 (addr 0x000000004cdfc850)    ;; code: HANDLER, LoadConstantStub, minor: 6
0x4cdfc82c    76  br x16
0x4cdfc830    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdfc834    84  d63f03e0       constant
0x4cdfc838    88  aa1ec9d9       constant
0x4cdfc83c    92  0000ffff       constant
0x4cdfc840    96  aa1ecf49       constant
0x4cdfc844   100  0000ffff       constant
0x4cdfc848   104  4cd222e0       constant
0x4cdfc84c   108  00000000       constant
0x4cdfc850   112  4cd8b020       constant
0x4cdfc854   116  00000000       constant


RelocInfo (size = 10)
0x4cdfc7f0  embedded object  (0xffffaa1ec9d9 Cell for 0)
0x4cdfc800  embedded object  (0xffffaa1ecf49 WeakCell for 0x2334ddf1 <an Object with map 0x2a836be1>)
0x4cdfc818  code target (BUILTIN)  (0x4cd222e0)
0x4cdfc828  code target (HANDLER)  (0x4cd8b020)
0x4cdfc830  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = time
compiler = unknown
Instructions (size = 184)
0x4cdfcae0     0  sub csp, jssp, #0x8 (8)
0x4cdfcae4     4  str x3, [jssp, #-8]!
0x4cdfcae8     8  sub csp, jssp, #0x8 (8)
0x4cdfcaec    12  str x4, [jssp, #-8]!
0x4cdfcaf0    16  ldr x3, pc+112 (addr 0x000000004cdfcb60)    ;; object: 0xffffaa1ec9d9 Cell for 0
0x4cdfcaf4    20  ldur x3, [x3, #7]
0x4cdfcaf8    24  cmp x3, #0x0 (0)
0x4cdfcafc    28  b.ne #+0x44 (addr 0x4cdfcb40)
0x4cdfcb00    32  tbz w0, #0, #+0x40 (addr 0x4cdfcb40)
0x4cdfcb04    36  ldur x3, [x0, #-1]
0x4cdfcb08    40  ldr x4, pc+96 (addr 0x000000004cdfcb68)    ;; object: 0xffffaa1ec969 WeakCell for 0x2a80a871 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfcb0c    44  ldur x4, [x4, #7]
0x4cdfcb10    48  cmp x3, x4
0x4cdfcb14    52  b.ne #+0x2c (addr 0x4cdfcb40)
0x4cdfcb18    56  ldr x5, pc+88 (addr 0x000000004cdfcb70)    ;; object: 0xffffaa1ed0e1 WeakCell for 0x2a841d99 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfcb1c    60  ldur x5, [x5, #7]
0x4cdfcb20    64  tbz w5, #0, #+0x20 (addr 0x4cdfcb40)
0x4cdfcb24    68  ldursw x4, [x5, #15]
0x4cdfcb28    72  tbnz w4, #23, #+0x18 (addr 0x4cdfcb40)
0x4cdfcb2c    76  ldr x4, [jssp], #8
0x4cdfcb30    80  ldr x3, [jssp], #8
0x4cdfcb34    84  ldr x2, pc+68 (addr 0x000000004cdfcb78)    ;; object: 0x210a2941 <String[4]: time>
0x4cdfcb38    88  ldr x16, pc+72 (addr 0x000000004cdfcb80)    ;; code: HANDLER, StoreTransitionStub, minor: 198667
0x4cdfcb3c    92  br x16
0x4cdfcb40    96  ldr x2, pc+72 (addr 0x000000004cdfcb88)    ;; object: 0x210a2941 <String[4]: time>
0x4cdfcb44   100  ldr x4, [jssp], #8
0x4cdfcb48   104  ldr x3, [jssp], #8
0x4cdfcb4c   108  ldr x16, pc+68 (addr 0x000000004cdfcb90)    ;; code: BUILTIN
0x4cdfcb50   112  br x16
0x4cdfcb54   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdfcb58   120  d63f03e0       constant
0x4cdfcb5c   124  d503201f       constant
0x4cdfcb60   128  aa1ec9d9       constant
0x4cdfcb64   132  0000ffff       constant
0x4cdfcb68   136  aa1ec969       constant
0x4cdfcb6c   140  0000ffff       constant
0x4cdfcb70   144  aa1ed0e1       constant
0x4cdfcb74   148  0000ffff       constant
0x4cdfcb78   152  210a2941       constant
0x4cdfcb7c   156  00000000       constant
0x4cdfcb80   160  4cdf4f80       constant
0x4cdfcb84   164  00000000       constant
0x4cdfcb88   168  210a2941       constant
0x4cdfcb8c   172  00000000       constant
0x4cdfcb90   176  4cd22420       constant
0x4cdfcb94   180  00000000       constant


RelocInfo (size = 13)
0x4cdfcaf0  embedded object  (0xffffaa1ec9d9 Cell for 0)
0x4cdfcb08  embedded object  (0xffffaa1ec969 WeakCell for 0x2a80a871 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfcb18  embedded object  (0xffffaa1ed0e1 WeakCell for 0x2a841d99 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfcb34  embedded object  (0x210a2941 <String[4]: time>)
0x4cdfcb38  code target (HANDLER)  (0x4cdf4f80)
0x4cdfcb40  embedded object  (0x210a2941 <String[4]: time>)
0x4cdfcb4c  code target (BUILTIN)  (0x4cd22420)
0x4cdfcb54  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = timeEnd
compiler = unknown
Instructions (size = 120)
0x4cdfcc00     0  sub csp, jssp, #0x8 (8)
0x4cdfcc04     4  str x3, [jssp, #-8]!
0x4cdfcc08     8  sub csp, jssp, #0x8 (8)
0x4cdfcc0c    12  str x0, [jssp, #-8]!
0x4cdfcc10    16  ldr x0, pc+72 (addr 0x000000004cdfcc58)    ;; object: 0xffffaa1ec9d9 Cell for 0
0x4cdfcc14    20  ldur x0, [x0, #7]
0x4cdfcc18    24  cmp x0, #0x0 (0)
0x4cdfcc1c    28  b.ne #+0x14 (addr 0x4cdfcc30)
0x4cdfcc20    32  ldr x3, pc+64 (addr 0x000000004cdfcc60)    ;; object: 0xffffaa1ed119 WeakCell for 0x2334ddf1 <an Object with map 0x2a836be1>
0x4cdfcc24    36  ldur x3, [x3, #7]
0x4cdfcc28    40  tbz w3, #0, #+0x8 (addr 0x4cdfcc30)
0x4cdfcc2c    44  b #+0x14 (addr 0x4cdfcc40)
0x4cdfcc30    48  ldr x0, [jssp], #8
0x4cdfcc34    52  ldr x3, [jssp], #8
0x4cdfcc38    56  ldr x16, pc+48 (addr 0x000000004cdfcc68)    ;; code: BUILTIN
0x4cdfcc3c    60  br x16
0x4cdfcc40    64  add jssp, jssp, #0x10 (16)
0x4cdfcc44    68  mov x1, x3
0x4cdfcc48    72  ldr x16, pc+40 (addr 0x000000004cdfcc70)    ;; code: HANDLER, LoadConstantStub, minor: 7
0x4cdfcc4c    76  br x16
0x4cdfcc50    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdfcc54    84  d63f03e0       constant
0x4cdfcc58    88  aa1ec9d9       constant
0x4cdfcc5c    92  0000ffff       constant
0x4cdfcc60    96  aa1ed119       constant
0x4cdfcc64   100  0000ffff       constant
0x4cdfcc68   104  4cd222e0       constant
0x4cdfcc6c   108  00000000       constant
0x4cdfcc70   112  4cd8b0a0       constant
0x4cdfcc74   116  00000000       constant


RelocInfo (size = 10)
0x4cdfcc10  embedded object  (0xffffaa1ec9d9 Cell for 0)
0x4cdfcc20  embedded object  (0xffffaa1ed119 WeakCell for 0x2334ddf1 <an Object with map 0x2a836be1>)
0x4cdfcc38  code target (BUILTIN)  (0x4cd222e0)
0x4cdfcc48  code target (HANDLER)  (0x4cd8b0a0)
0x4cdfcc50  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = timeEnd
compiler = unknown
Instructions (size = 184)
0x4cdfd2a0     0  sub csp, jssp, #0x8 (8)
0x4cdfd2a4     4  str x3, [jssp, #-8]!
0x4cdfd2a8     8  sub csp, jssp, #0x8 (8)
0x4cdfd2ac    12  str x4, [jssp, #-8]!
0x4cdfd2b0    16  ldr x3, pc+112 (addr 0x000000004cdfd320)    ;; object: 0xffffaa1ec9d9 Cell for 0
0x4cdfd2b4    20  ldur x3, [x3, #7]
0x4cdfd2b8    24  cmp x3, #0x0 (0)
0x4cdfd2bc    28  b.ne #+0x44 (addr 0x4cdfd300)
0x4cdfd2c0    32  tbz w0, #0, #+0x40 (addr 0x4cdfd300)
0x4cdfd2c4    36  ldur x3, [x0, #-1]
0x4cdfd2c8    40  ldr x4, pc+96 (addr 0x000000004cdfd328)    ;; object: 0xffffaa1ec969 WeakCell for 0x2a80a871 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfd2cc    44  ldur x4, [x4, #7]
0x4cdfd2d0    48  cmp x3, x4
0x4cdfd2d4    52  b.ne #+0x2c (addr 0x4cdfd300)
0x4cdfd2d8    56  ldr x5, pc+88 (addr 0x000000004cdfd330)    ;; object: 0xffffaa1ed411 WeakCell for 0x2a841df1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfd2dc    60  ldur x5, [x5, #7]
0x4cdfd2e0    64  tbz w5, #0, #+0x20 (addr 0x4cdfd300)
0x4cdfd2e4    68  ldursw x4, [x5, #15]
0x4cdfd2e8    72  tbnz w4, #23, #+0x18 (addr 0x4cdfd300)
0x4cdfd2ec    76  ldr x4, [jssp], #8
0x4cdfd2f0    80  ldr x3, [jssp], #8
0x4cdfd2f4    84  ldr x2, pc+68 (addr 0x000000004cdfd338)    ;; object: 0xffffaa1cc1c1 <String[7]: timeEnd>
0x4cdfd2f8    88  ldr x16, pc+72 (addr 0x000000004cdfd340)    ;; code: HANDLER, StoreTransitionStub, minor: 327682
0x4cdfd2fc    92  br x16
0x4cdfd300    96  ldr x2, pc+72 (addr 0x000000004cdfd348)    ;; object: 0xffffaa1cc1c1 <String[7]: timeEnd>
0x4cdfd304   100  ldr x4, [jssp], #8
0x4cdfd308   104  ldr x3, [jssp], #8
0x4cdfd30c   108  ldr x16, pc+68 (addr 0x000000004cdfd350)    ;; code: BUILTIN
0x4cdfd310   112  br x16
0x4cdfd314   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdfd318   120  d63f03e0       constant
0x4cdfd31c   124  d503201f       constant
0x4cdfd320   128  aa1ec9d9       constant
0x4cdfd324   132  0000ffff       constant
0x4cdfd328   136  aa1ec969       constant
0x4cdfd32c   140  0000ffff       constant
0x4cdfd330   144  aa1ed411       constant
0x4cdfd334   148  0000ffff       constant
0x4cdfd338   152  aa1cc1c1       constant
0x4cdfd33c   156  0000ffff       constant
0x4cdfd340   160  4cd38860       constant
0x4cdfd344   164  00000000       constant
0x4cdfd348   168  aa1cc1c1       constant
0x4cdfd34c   172  0000ffff       constant
0x4cdfd350   176  4cd22420       constant
0x4cdfd354   180  00000000       constant


RelocInfo (size = 13)
0x4cdfd2b0  embedded object  (0xffffaa1ec9d9 Cell for 0)
0x4cdfd2c8  embedded object  (0xffffaa1ec969 WeakCell for 0x2a80a871 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfd2d8  embedded object  (0xffffaa1ed411 WeakCell for 0x2a841df1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfd2f4  embedded object  (0xffffaa1cc1c1 <String[7]: timeEnd>)
0x4cdfd2f8  code target (HANDLER)  (0x4cd38860)
0x4cdfd300  embedded object  (0xffffaa1cc1c1 <String[7]: timeEnd>)
0x4cdfd30c  code target (BUILTIN)  (0x4cd22420)
0x4cdfd314  constant pool (size 68)

kind = HANDLER
major_key = <NoCache>Stub
name = trace
compiler = unknown
Instructions (size = 120)
0x4cdfd3c0     0  sub csp, jssp, #0x8 (8)
0x4cdfd3c4     4  str x3, [jssp, #-8]!
0x4cdfd3c8     8  sub csp, jssp, #0x8 (8)
0x4cdfd3cc    12  str x0, [jssp, #-8]!
0x4cdfd3d0    16  ldr x0, pc+72 (addr 0x000000004cdfd418)    ;; object: 0xffffaa1ec9d9 Cell for 0
0x4cdfd3d4    20  ldur x0, [x0, #7]
0x4cdfd3d8    24  cmp x0, #0x0 (0)
0x4cdfd3dc    28  b.ne #+0x14 (addr 0x4cdfd3f0)
0x4cdfd3e0    32  ldr x3, pc+64 (addr 0x000000004cdfd420)    ;; object: 0xffffaa1ed449 WeakCell for 0x2334ddf1 <an Object with map 0x2a836be1>
0x4cdfd3e4    36  ldur x3, [x3, #7]
0x4cdfd3e8    40  tbz w3, #0, #+0x8 (addr 0x4cdfd3f0)
0x4cdfd3ec    44  b #+0x14 (addr 0x4cdfd400)
0x4cdfd3f0    48  ldr x0, [jssp], #8
0x4cdfd3f4    52  ldr x3, [jssp], #8
0x4cdfd3f8    56  ldr x16, pc+48 (addr 0x000000004cdfd428)    ;; code: BUILTIN
0x4cdfd3fc    60  br x16
0x4cdfd400    64  add jssp, jssp, #0x10 (16)
0x4cdfd404    68  mov x1, x3
0x4cdfd408    72  ldr x16, pc+40 (addr 0x000000004cdfd430)    ;; code: HANDLER, LoadConstantStub, minor: 8
0x4cdfd40c    76  br x16
0x4cdfd410    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdfd414    84  d63f03e0       constant
0x4cdfd418    88  aa1ec9d9       constant
0x4cdfd41c    92  0000ffff       constant
0x4cdfd420    96  aa1ed449       constant
0x4cdfd424   100  0000ffff       constant
0x4cdfd428   104  4cd222e0       constant
0x4cdfd42c   108  00000000       constant
0x4cdfd430   112  4cd4c160       constant
0x4cdfd434   116  00000000       constant


RelocInfo (size = 10)
0x4cdfd3d0  embedded object  (0xffffaa1ec9d9 Cell for 0)
0x4cdfd3e0  embedded object  (0xffffaa1ed449 WeakCell for 0x2334ddf1 <an Object with map 0x2a836be1>)
0x4cdfd3f8  code target (BUILTIN)  (0x4cd222e0)
0x4cdfd408  code target (HANDLER)  (0x4cd4c160)
0x4cdfd410  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = trace
compiler = unknown
Instructions (size = 184)
0x4cdfd8c0     0  sub csp, jssp, #0x8 (8)
0x4cdfd8c4     4  str x3, [jssp, #-8]!
0x4cdfd8c8     8  sub csp, jssp, #0x8 (8)
0x4cdfd8cc    12  str x4, [jssp, #-8]!
0x4cdfd8d0    16  ldr x3, pc+112 (addr 0x000000004cdfd940)    ;; object: 0xffffaa1ec9d9 Cell for 0
0x4cdfd8d4    20  ldur x3, [x3, #7]
0x4cdfd8d8    24  cmp x3, #0x0 (0)
0x4cdfd8dc    28  b.ne #+0x44 (addr 0x4cdfd920)
0x4cdfd8e0    32  tbz w0, #0, #+0x40 (addr 0x4cdfd920)
0x4cdfd8e4    36  ldur x3, [x0, #-1]
0x4cdfd8e8    40  ldr x4, pc+96 (addr 0x000000004cdfd948)    ;; object: 0xffffaa1ec969 WeakCell for 0x2a80a871 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfd8ec    44  ldur x4, [x4, #7]
0x4cdfd8f0    48  cmp x3, x4
0x4cdfd8f4    52  b.ne #+0x2c (addr 0x4cdfd920)
0x4cdfd8f8    56  ldr x5, pc+88 (addr 0x000000004cdfd950)    ;; object: 0xffffaa1ed691 WeakCell for 0x2a841e49 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfd8fc    60  ldur x5, [x5, #7]
0x4cdfd900    64  tbz w5, #0, #+0x20 (addr 0x4cdfd920)
0x4cdfd904    68  ldursw x4, [x5, #15]
0x4cdfd908    72  tbnz w4, #23, #+0x18 (addr 0x4cdfd920)
0x4cdfd90c    76  ldr x4, [jssp], #8
0x4cdfd910    80  ldr x3, [jssp], #8
0x4cdfd914    84  ldr x2, pc+68 (addr 0x000000004cdfd958)    ;; object: 0x210daea9 <String[5]: trace>
0x4cdfd918    88  ldr x16, pc+72 (addr 0x000000004cdfd960)    ;; code: HANDLER, StoreTransitionStub, minor: 196611
0x4cdfd91c    92  br x16
0x4cdfd920    96  ldr x2, pc+72 (addr 0x000000004cdfd968)    ;; object: 0x210daea9 <String[5]: trace>
0x4cdfd924   100  ldr x4, [jssp], #8
0x4cdfd928   104  ldr x3, [jssp], #8
0x4cdfd92c   108  ldr x16, pc+68 (addr 0x000000004cdfd970)    ;; code: BUILTIN
0x4cdfd930   112  br x16
0x4cdfd934   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdfd938   120  d63f03e0       constant
0x4cdfd93c   124  d503201f       constant
0x4cdfd940   128  aa1ec9d9       constant
0x4cdfd944   132  0000ffff       constant
0x4cdfd948   136  aa1ec969       constant
0x4cdfd94c   140  0000ffff       constant
0x4cdfd950   144  aa1ed691       constant
0x4cdfd954   148  0000ffff       constant
0x4cdfd958   152  210daea9       constant
0x4cdfd95c   156  00000000       constant
0x4cdfd960   160  4cd99940       constant
0x4cdfd964   164  00000000       constant
0x4cdfd968   168  210daea9       constant
0x4cdfd96c   172  00000000       constant
0x4cdfd970   176  4cd22420       constant
0x4cdfd974   180  00000000       constant


RelocInfo (size = 13)
0x4cdfd8d0  embedded object  (0xffffaa1ec9d9 Cell for 0)
0x4cdfd8e8  embedded object  (0xffffaa1ec969 WeakCell for 0x2a80a871 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfd8f8  embedded object  (0xffffaa1ed691 WeakCell for 0x2a841e49 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfd914  embedded object  (0x210daea9 <String[5]: trace>)
0x4cdfd918  code target (HANDLER)  (0x4cd99940)
0x4cdfd920  embedded object  (0x210daea9 <String[5]: trace>)
0x4cdfd92c  code target (BUILTIN)  (0x4cd22420)
0x4cdfd934  constant pool (size 68)

--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cdfd9e0     0  ldur x0, [x1, #-1]
0x4cdfd9e4     4  ldur x0, [x0, #47]
0x4cdfd9e8     8  movz x16, #0x107
0x4cdfd9ec    12  ldr x0, [x0, x16]
0x4cdfd9f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)

--- End code ---
kind = HANDLER
major_key = LoadConstantStub
name = LoadConstantStub
compiler = crankshaft
Instructions (size = 28)
0x4cdfd9e0     0  ldur x0, [x1, #-1]
0x4cdfd9e4     4  ldur x0, [x0, #47]
0x4cdfd9e8     8  movz x16, #0x107
0x4cdfd9ec    12  ldr x0, [x0, x16]
0x4cdfd9f0    16  ret


Safepoints (size = 8)

RelocInfo (size = 0)


kind = HANDLER
major_key = <NoCache>Stub
name = assert
compiler = unknown
Instructions (size = 120)
0x4cdfda60     0  sub csp, jssp, #0x8 (8)
0x4cdfda64     4  str x3, [jssp, #-8]!
0x4cdfda68     8  sub csp, jssp, #0x8 (8)
0x4cdfda6c    12  str x0, [jssp, #-8]!
0x4cdfda70    16  ldr x0, pc+72 (addr 0x000000004cdfdab8)    ;; object: 0xffffaa1ec9d9 Cell for 0
0x4cdfda74    20  ldur x0, [x0, #7]
0x4cdfda78    24  cmp x0, #0x0 (0)
0x4cdfda7c    28  b.ne #+0x14 (addr 0x4cdfda90)
0x4cdfda80    32  ldr x3, pc+64 (addr 0x000000004cdfdac0)    ;; object: 0xffffaa1ed6c9 WeakCell for 0x2334ddf1 <an Object with map 0x2a836be1>
0x4cdfda84    36  ldur x3, [x3, #7]
0x4cdfda88    40  tbz w3, #0, #+0x8 (addr 0x4cdfda90)
0x4cdfda8c    44  b #+0x14 (addr 0x4cdfdaa0)
0x4cdfda90    48  ldr x0, [jssp], #8
0x4cdfda94    52  ldr x3, [jssp], #8
0x4cdfda98    56  ldr x16, pc+48 (addr 0x000000004cdfdac8)    ;; code: BUILTIN
0x4cdfda9c    60  br x16
0x4cdfdaa0    64  add jssp, jssp, #0x10 (16)
0x4cdfdaa4    68  mov x1, x3
0x4cdfdaa8    72  ldr x16, pc+40 (addr 0x000000004cdfdad0)    ;; code: HANDLER, LoadConstantStub, minor: 9
0x4cdfdaac    76  br x16
0x4cdfdab0    80  5800013f       constant pool begin (num_const = 9)    ;; constant pool
0x4cdfdab4    84  d63f03e0       constant
0x4cdfdab8    88  aa1ec9d9       constant
0x4cdfdabc    92  0000ffff       constant
0x4cdfdac0    96  aa1ed6c9       constant
0x4cdfdac4   100  0000ffff       constant
0x4cdfdac8   104  4cd222e0       constant
0x4cdfdacc   108  00000000       constant
0x4cdfdad0   112  4cdfd9e0       constant
0x4cdfdad4   116  00000000       constant


RelocInfo (size = 10)
0x4cdfda70  embedded object  (0xffffaa1ec9d9 Cell for 0)
0x4cdfda80  embedded object  (0xffffaa1ed6c9 WeakCell for 0x2334ddf1 <an Object with map 0x2a836be1>)
0x4cdfda98  code target (BUILTIN)  (0x4cd222e0)
0x4cdfdaa8  code target (HANDLER)  (0x4cdfd9e0)
0x4cdfdab0  constant pool (size 40)

kind = HANDLER
major_key = <NoCache>Stub
name = assert
compiler = unknown
Instructions (size = 184)
0x4cdfde80     0  sub csp, jssp, #0x8 (8)
0x4cdfde84     4  str x3, [jssp, #-8]!
0x4cdfde88     8  sub csp, jssp, #0x8 (8)
0x4cdfde8c    12  str x4, [jssp, #-8]!
0x4cdfde90    16  ldr x3, pc+112 (addr 0x000000004cdfdf00)    ;; object: 0xffffaa1ec9d9 Cell for 0
0x4cdfde94    20  ldur x3, [x3, #7]
0x4cdfde98    24  cmp x3, #0x0 (0)
0x4cdfde9c    28  b.ne #+0x44 (addr 0x4cdfdee0)
0x4cdfdea0    32  tbz w0, #0, #+0x40 (addr 0x4cdfdee0)
0x4cdfdea4    36  ldur x3, [x0, #-1]
0x4cdfdea8    40  ldr x4, pc+96 (addr 0x000000004cdfdf08)    ;; object: 0xffffaa1ec969 WeakCell for 0x2a80a871 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfdeac    44  ldur x4, [x4, #7]
0x4cdfdeb0    48  cmp x3, x4
0x4cdfdeb4    52  b.ne #+0x2c (addr 0x4cdfdee0)
0x4cdfdeb8    56  ldr x5, pc+88 (addr 0x000000004cdfdf10)    ;; object: 0xffffaa1ed891 WeakCell for 0x2a841ea1 <Map(FAST_HOLEY_ELEMENTS)>
0x4cdfdebc    60  ldur x5, [x5, #7]
0x4cdfdec0    64  tbz w5, #0, #+0x20 (addr 0x4cdfdee0)
0x4cdfdec4    68  ldursw x4, [x5, #15]
0x4cdfdec8    72  tbnz w4, #23, #+0x18 (addr 0x4cdfdee0)
0x4cdfdecc    76  ldr x4, [jssp], #8
0x4cdfded0    80  ldr x3, [jssp], #8
0x4cdfded4    84  ldr x2, pc+68 (addr 0x000000004cdfdf18)    ;; object: 0x210bdc41 <String[6]: assert>
0x4cdfded8    88  ldr x16, pc+72 (addr 0x000000004cdfdf20)    ;; code: HANDLER, StoreTransitionStub, minor: 196612
0x4cdfdedc    92  br x16
0x4cdfdee0    96  ldr x2, pc+72 (addr 0x000000004cdfdf28)    ;; object: 0x210bdc41 <String[6]: assert>
0x4cdfdee4   100  ldr x4, [jssp], #8
0x4cdfdee8   104  ldr x3, [jssp], #8
0x4cdfdeec   108  ldr x16, pc+68 (addr 0x000000004cdfdf30)    ;; code: BUILTIN
0x4cdfdef0   112  br x16
0x4cdfdef4   116  5800021f       constant pool begin (num_const = 16)    ;; constant pool
0x4cdfdef8   120  d63f03e0       constant
0x4cdfdefc   124  d503201f       constant
0x4cdfdf00   128  aa1ec9d9       constant
0x4cdfdf04   132  0000ffff       constant
0x4cdfdf08   136  aa1ec969       constant
0x4cdfdf0c   140  0000ffff       constant
0x4cdfdf10   144  aa1ed891       constant
0x4cdfdf14   148  0000ffff       constant
0x4cdfdf18   152  210bdc41       constant
0x4cdfdf1c   156  00000000       constant
0x4cdfdf20   160  4cd9a100       constant
0x4cdfdf24   164  00000000       constant
0x4cdfdf28   168  210bdc41       constant
0x4cdfdf2c   172  00000000       constant
0x4cdfdf30   176  4cd22420       constant
0x4cdfdf34   180  00000000       constant


RelocInfo (size = 13)
0x4cdfde90  embedded object  (0xffffaa1ec9d9 Cell for 0)
0x4cdfdea8  embedded object  (0xffffaa1ec969 WeakCell for 0x2a80a871 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfdeb8  embedded object  (0xffffaa1ed891 WeakCell for 0x2a841ea1 <Map(FAST_HOLEY_ELEMENTS)>)
0x4cdfded4  embedded object  (0x210bdc41 <String[6]: assert>)
0x4cdfded8  code target (HANDLER)  (0x4cd9a100)
0x4cdfdee0  embedded object  (0x210bdc41 <String[6]: assert>)
0x4cdfdeec  code target (BUILTIN)  (0x4cd22420)
0x4cdfdef4  constant pool (size 68)

kind = CALL_IC
major_key = CallICStub
ic_state = GENERIC
extra_ic_state = 393223
name = CallICStub(args(7), ANY, 
compiler = unknown
Instructions (size = 488)
0x4ce097a0     0  add x4, x2, x3, asr #29
0x4ce097a4     4  ldur x4, [x4, #15]
0x4ce097a8     8  ldur x5, [x4, #7]
0x4ce097ac    12  cmp x5, x1
0x4ce097b0    16  b.ne #+0x2c (addr 0x4ce097dc)
0x4ce097b4    20  tbz w1, #0, #+0x28 (addr 0x4ce097dc)
0x4ce097b8    24  add x2, x2, x3, asr #29
0x4ce097bc    28  add x2, x2, #0x18 (24)
0x4ce097c0    32  ldur x3, [x2, #-1]
0x4ce097c4    36  movz x16, #0x200000000
0x4ce097c8    40  add x3, x3, x16
0x4ce097cc    44  stur x3, [x2, #-1]
0x4ce097d0    48  movz x0, #0x7
0x4ce097d4    52  ldr x16, pc+372 (addr 0x000000004ce09948)    ;; code: BUILTIN
0x4ce097d8    56  br x16
0x4ce097dc    60  ldr x16, [x26, #2400]
0x4ce097e0    64  cmp x4, x16
0x4ce097e4    68  b.eq #+0x78 (addr 0x4ce0985c)
0x4ce097e8    72  ldur x5, [x4, #-1]
0x4ce097ec    76  ldr x16, [x26, #2736]
0x4ce097f0    80  cmp x5, x16
0x4ce097f4    84  b.ne #+0x40 (addr 0x4ce09834)
0x4ce097f8    88  ldur x5, [cp, #39]
0x4ce097fc    92  ldur x5, [x5, #95]
0x4ce09800    96  cmp x1, x5
0x4ce09804   100  b.ne #+0xec (addr 0x4ce098f0)
0x4ce09808   104  movz x0, #0x7
0x4ce0980c   108  add x2, x2, x3, asr #29
0x4ce09810   112  add x2, x2, #0x18 (24)
0x4ce09814   116  ldur x3, [x2, #-1]
0x4ce09818   120  movz x16, #0x200000000
0x4ce0981c   124  add x3, x3, x16
0x4ce09820   128  stur x3, [x2, #-1]
0x4ce09824   132  mov x2, x4
0x4ce09828   136  mov x3, x1
0x4ce0982c   140  ldr x16, pc+292 (addr 0x000000004ce09950)    ;; code: STUB, ArrayConstructorStub, minor: 3
0x4ce09830   144  br x16
0x4ce09834   148  ldr x16, [x26, #2568]
0x4ce09838   152  cmp x4, x16
0x4ce0983c   156  b.eq #+0xb4 (addr 0x4ce098f0)
0x4ce09840   160  ldur x5, [x4, #-1]
0x4ce09844   164  ldrb w5, [x5, #11]
0x4ce09848   168  cmp x5, #0xc9 (201)
0x4ce0984c   172  b.ne #+0xa4 (addr 0x4ce098f0)
0x4ce09850   176  add x4, x2, x3, asr #29
0x4ce09854   180  ldr x5, [x26, #2400]
0x4ce09858   184  stur x5, [x4, #15]
0x4ce0985c   188  movz x0, #0x7
0x4ce09860   192  ldr x16, pc+248 (addr 0x000000004ce09958)    ;; code: BUILTIN
0x4ce09864   196  br x16
0x4ce09868   200  tbz w1, #0, #+0x88 (addr 0x4ce098f0)
0x4ce0986c   204  ldur x5, [x1, #-1]
0x4ce09870   208  ldrb w5, [x5, #11]
0x4ce09874   212  cmp x5, #0xc9 (201)
0x4ce09878   216  b.ne #+0x78 (addr 0x4ce098f0)
0x4ce0987c   220  ldur x5, [cp, #39]
0x4ce09880   224  ldur x5, [x5, #95]
0x4ce09884   228  cmp x1, x5
0x4ce09888   232  b.eq #+0x68 (addr 0x4ce098f0)
0x4ce0988c   236  ldur x4, [x1, #39]
0x4ce09890   240  ldur x4, [x4, #39]
0x4ce09894   244  ldur x5, [cp, #39]
0x4ce09898   248  cmp x4, x5
0x4ce0989c   252  b.ne #+0x54 (addr 0x4ce098f0)
0x4ce098a0   256  movz x5, #0x200000000
0x4ce098a4   260  adds x4, x2, x3, asr #29
0x4ce098a8   264  stur x5, [x4, #23]
0x4ce098ac   268  movz x16, #0xc00000000
0x4ce098b0   272  sub csp, jssp, #0x10 (16)
0x4ce098b4   276  stp fp, lr, [jssp, #-16]!
0x4ce098b8   280  sub csp, jssp, #0x10 (16)
0x4ce098bc   284  str x16, [jssp, #-8]!
0x4ce098c0   288  ldr x17, pc+160 (addr 0x000000004ce09960)    ;; object: 0x4ce09741 <Code: CALL_IC>
0x4ce098c4   292  sub csp, jssp, #0x10 (16)
0x4ce098c8   296  str x17, [jssp, #-8]!
0x4ce098cc   300  add fp, jssp, #0x10 (16)
0x4ce098d0   304  sub csp, jssp, #0x8 (8)
0x4ce098d4   308  str x1, [jssp, #-8]!
0x4ce098d8   312  ldr x16, pc+144 (addr 0x000000004ce09968)    ;; code: STUB, CreateWeakCellStub, minor: 0
0x4ce098dc   316  blr x16
0x4ce098e0   320  ldr x1, [jssp], #8
0x4ce098e4   324  mov jssp, fp
0x4ce098e8   328  ldp fp, lr, [jssp], #16
0x4ce098ec   332  b #-0x11c (addr 0x4ce097d0)
0x4ce098f0   336  movz x16, #0xc00000000
0x4ce098f4   340  sub csp, jssp, #0x10 (16)
0x4ce098f8   344  stp fp, lr, [jssp, #-16]!
0x4ce098fc   348  sub csp, jssp, #0x10 (16)
0x4ce09900   352  str x16, [jssp, #-8]!
0x4ce09904   356  ldr x17, pc+108 (addr 0x000000004ce09970)    ;; object: 0x4ce09741 <Code: CALL_IC>
0x4ce09908   360  sub csp, jssp, #0x10 (16)
0x4ce0990c   364  str x17, [jssp, #-8]!
0x4ce09910   368  add fp, jssp, #0x10 (16)
0x4ce09914   372  sub csp, jssp, #0x18 (24)
0x4ce09918   376  stp x3, x2, [jssp, #-24]!
0x4ce0991c   380  str x1, [jssp, #16]
0x4ce09920   384  movz x0, #0x3
0x4ce09924   388  ldr x1, pc+84 (addr 0x000000004ce09978)    ;; external reference (Runtime::CallIC_Miss)
0x4ce09928   392  ldr x16, pc+88 (addr 0x000000004ce09980)    ;; code: STUB, CEntryStub, minor: 4
0x4ce0992c   396  blr x16
0x4ce09930   400  mov x1, x0
0x4ce09934   404  mov jssp, fp
0x4ce09938   408  ldp fp, lr, [jssp], #16
0x4ce0993c   412  b #-0xe0 (addr 0x4ce0985c)
0x4ce09940   416  5800023f       constant pool begin (num_const = 17)    ;; constant pool
0x4ce09944   420  d63f03e0       constant
0x4ce09948   424  4cd1e820       constant
0x4ce0994c   428  00000000       constant
0x4ce09950   432  4cd33b00       constant
0x4ce09954   436  00000000       constant
0x4ce09958   440  4cd1f820       constant
0x4ce0995c   444  00000000       constant
0x4ce09960   448  4ce09741       constant
0x4ce09964   452  00000000       constant
0x4ce09968   456  4cd0ddc0       constant
0x4ce0996c   460  00000000       constant
0x4ce09970   464  4ce09741       constant
0x4ce09974   468  00000000       constant
0x4ce09978   472  00c86928       constant
0x4ce0997c   476  00000000       constant
0x4ce09980   480  4cd06060       constant
0x4ce09984   484  00000000       constant


RelocInfo (size = 19)
0x4ce097d4  code target (BUILTIN)  (0x4cd1e820)
0x4ce0982c  code target (STUB)  (0x4cd33b00)
0x4ce09860  code target (BUILTIN)  (0x4cd1f820)
0x4ce098c0  embedded object  (0x4ce09741 <Code: CALL_IC>)
0x4ce098d8  code target (STUB)  (0x4cd0ddc0)
0x4ce09904  embedded object  (0x4ce09741 <Code: CALL_IC>)
0x4ce09924  external reference (Runtime::CallIC_Miss)  (0xc86928)
0x4ce09928  code target (STUB)  (0x4cd06060)
0x4ce09940  constant pool (size 72)


kind = CALL_IC
major_key = CallICTrampolineStub
ic_state = GENERIC
extra_ic_state = 393223
name = CallICTrampolineStub
compiler = unknown
Instructions (size = 40)
0x4ce09a00     0  ldur x2, [fp, #-16]
0x4ce09a04     4  ldur x2, [x2, #31]
0x4ce09a08     8  ldur x2, [x2, #87]
0x4ce09a0c    12  ldr x16, pc+20 (addr 0x000000004ce09a20)    ;; code: CALL_IC, GENERIC
0x4ce09a10    16  br x16
0x4ce09a14    20  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4ce09a18    24  d63f03e0       constant
0x4ce09a1c    28  d503201f       constant
0x4ce09a20    32  4ce097a0       constant
0x4ce09a24    36  00000000       constant


RelocInfo (size = 7)
0x4ce09a0c  code target (CALL_IC)  (0x4ce097a0)
0x4ce09a14  constant pool (size 20)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = GENERIC
extra_ic_state = 0
compare_state = GENERIC*GENERIC -> GENERIC
compare_operation = EQ
name = CompareICStub
compiler = unknown
Instructions (size = 664)
0x4ce0d2e0     0  orr x16, x1, x0
0x4ce0d2e4     4  tbnz w16, #0, #+0x10 (addr 0x4ce0d2f4)
0x4ce0d2e8     8  asr x1, x1, #32
0x4ce0d2ec    12  sub x0, x1, x0, asr #32
0x4ce0d2f0    16  ret
0x4ce0d2f4    20  cmp x0, x1
0x4ce0d2f8    24  b.ne #+0x30 (addr 0x4ce0d328)
0x4ce0d2fc    28  ldur x16, [x0, #-1]
0x4ce0d300    32  ldr x17, [x26, #120]
0x4ce0d304    36  cmp x16, x17
0x4ce0d308    40  b.eq #+0xc (addr 0x4ce0d314)
0x4ce0d30c    44  movz x0, #0x0
0x4ce0d310    48  ret
0x4ce0d314    52  ldur d0, [x0, #7]
0x4ce0d318    56  fcmp d0, d0
0x4ce0d31c    60  b.vc #-0x10 (addr 0x4ce0d30c)
0x4ce0d320    64  movn x0, #0x0
0x4ce0d324    68  ret
0x4ce0d328    72  and x16, x1, x0
0x4ce0d32c    76  tbnz w16, #0, #+0x58 (addr 0x4ce0d384)
0x4ce0d330    80  tbz w0, #0, #+0x20 (addr 0x4ce0d350)
0x4ce0d334    84  ldur x16, [x0, #-1]
0x4ce0d338    88  ldr x17, [x26, #120]
0x4ce0d33c    92  cmp x16, x17
0x4ce0d340    96  b.ne #+0x148 (addr 0x4ce0d488)
0x4ce0d344   100  ldur d0, [x0, #7]
0x4ce0d348   104  scvtf d1, x1, #32
0x4ce0d34c   108  b #+0x1c (addr 0x4ce0d368)
0x4ce0d350   112  ldur x16, [x1, #-1]
0x4ce0d354   116  ldr x17, [x26, #120]
0x4ce0d358   120  cmp x16, x17
0x4ce0d35c   124  b.ne #+0x12c (addr 0x4ce0d488)
0x4ce0d360   128  ldur d1, [x1, #7]
0x4ce0d364   132  scvtf d0, x0, #32
0x4ce0d368   136  fcmp d1, d0
0x4ce0d36c   140  b.vs #+0x10 (addr 0x4ce0d37c)
0x4ce0d370   144  cset x0, gt
0x4ce0d374   148  csinv x0, x0, xzr, ge
0x4ce0d378   152  ret
0x4ce0d37c   156  movn x0, #0x0
0x4ce0d380   160  ret
0x4ce0d384   164  ldur x10, [x0, #-1]
0x4ce0d388   168  ldur x12, [x1, #-1]
0x4ce0d38c   172  ldrb w11, [x10, #11]
0x4ce0d390   176  ldrb w13, [x12, #11]
0x4ce0d394   180  cmp x11, #0x81 (129)
0x4ce0d398   184  b.ne #+0x18 (addr 0x4ce0d3b0)
0x4ce0d39c   188  cmp x12, x10
0x4ce0d3a0   192  b.ne #+0x74 (addr 0x4ce0d414)
0x4ce0d3a4   196  ldur d1, [x1, #7]
0x4ce0d3a8   200  ldur d0, [x0, #7]
0x4ce0d3ac   204  b #-0x44 (addr 0x4ce0d368)
0x4ce0d3b0   208  tbnz w11, #7, #+0x14 (addr 0x4ce0d3c4)
0x4ce0d3b4   212  tbnz w11, #6, #+0x60 (addr 0x4ce0d414)
0x4ce0d3b8   216  tbnz w13, #7, #+0xd0 (addr 0x4ce0d488)
0x4ce0d3bc   220  tbnz w13, #6, #+0x58 (addr 0x4ce0d414)
0x4ce0d3c0   224  ret
0x4ce0d3c4   228  ldrb w11, [x10, #12]
0x4ce0d3c8   232  ldrb w13, [x12, #12]
0x4ce0d3cc   236  tbnz w11, #4, #+0x24 (addr 0x4ce0d3f0)
0x4ce0d3d0   240  tbnz w13, #4, #+0x1c (addr 0x4ce0d3ec)
0x4ce0d3d4   244  ldrb w11, [x10, #11]
0x4ce0d3d8   248  cmp x11, #0xb1 (177)
0x4ce0d3dc   252  b.lt #+0xac (addr 0x4ce0d488)
0x4ce0d3e0   256  ldrb w13, [x12, #11]
0x4ce0d3e4   260  cmp x13, #0xb1 (177)
0x4ce0d3e8   264  b.lt #+0xa0 (addr 0x4ce0d488)
0x4ce0d3ec   268  ret
0x4ce0d3f0   272  tbz w13, #4, #-0x4 (addr 0x4ce0d3ec)
0x4ce0d3f4   276  ldrb w11, [x10, #11]
0x4ce0d3f8   280  cmp x11, #0x83 (131)
0x4ce0d3fc   284  b.eq #+0x10 (addr 0x4ce0d40c)
0x4ce0d400   288  ldrb w13, [x12, #11]
0x4ce0d404   292  cmp x13, #0x83 (131)
0x4ce0d408   296  b.ne #-0x1c (addr 0x4ce0d3ec)
0x4ce0d40c   300  movz x0, #0x0
0x4ce0d410   304  ret
0x4ce0d414   308  movz x16, #0x87
0x4ce0d418   312  and x14, x13, x16
0x4ce0d41c   316  movz x16, #0x87
0x4ce0d420   320  and x15, x11, x16
0x4ce0d424   324  cmp x14, #0x4 (4)
0x4ce0d428   328  ccmp x15, #4, #nzcv, eq
0x4ce0d42c   332  b.ne #+0x5c (addr 0x4ce0d488)
0x4ce0d430   336  ldur x10, [x1, #15]
0x4ce0d434   340  ldur x11, [x0, #15]
0x4ce0d438   344  cmp x10, x11
0x4ce0d43c   348  b.eq #+0xc (addr 0x4ce0d448)
0x4ce0d440   352  movz x0, #0x100000000
0x4ce0d444   356  ret
0x4ce0d448   360  cbnz x10, #+0xc (addr 0x4ce0d454)
0x4ce0d44c   364  movz x0, #0x0
0x4ce0d450   368  ret
0x4ce0d454   372  asr x10, x10, #32
0x4ce0d458   376  add x11, x10, #0x17 (23)
0x4ce0d45c   380  add x1, x1, x11
0x4ce0d460   384  add x0, x0, x11
0x4ce0d464   388  neg x10, x10
0x4ce0d468   392  ldrb w11, [x1, x10]
0x4ce0d46c   396  ldrb w12, [x0, x10]
0x4ce0d470   400  cmp x11, x12
0x4ce0d474   404  b.ne #-0x34 (addr 0x4ce0d440)
0x4ce0d478   408  add x10, x10, #0x1 (1)
0x4ce0d47c   412  cbnz x10, #-0x14 (addr 0x4ce0d468)
0x4ce0d480   416  movz x0, #0x0
0x4ce0d484   420  ret
0x4ce0d488   424  movz x16, #0xc00000000
0x4ce0d48c   428  sub csp, jssp, #0x10 (16)
0x4ce0d490   432  stp fp, lr, [jssp, #-16]!
0x4ce0d494   436  sub csp, jssp, #0x10 (16)
0x4ce0d498   440  str x16, [jssp, #-8]!
0x4ce0d49c   444  ldr x17, pc+172 (addr 0x000000004ce0d548)    ;; object: 0x4ce0d281 <Code: COMPARE_IC>
0x4ce0d4a0   448  sub csp, jssp, #0x10 (16)
0x4ce0d4a4   452  str x17, [jssp, #-8]!
0x4ce0d4a8   456  add fp, jssp, #0x10 (16)
0x4ce0d4ac   460  sub csp, jssp, #0x10 (16)
0x4ce0d4b0   464  stp x0, x1, [jssp, #-16]!
0x4ce0d4b4   468  movz x0, #0x2
0x4ce0d4b8   472  ldr x1, pc+152 (addr 0x000000004ce0d550)    ;; external reference (Runtime::Equal)
0x4ce0d4bc   476  ldr x16, pc+156 (addr 0x000000004ce0d558)    ;; code: STUB, CEntryStub, minor: 4
0x4ce0d4c0   480  blr x16
0x4ce0d4c4   484  mov jssp, fp
0x4ce0d4c8   488  ldp fp, lr, [jssp], #16
0x4ce0d4cc   492  ldr x1, [x26, #64]
0x4ce0d4d0   496  sub x0, x0, x1
0x4ce0d4d4   500  ret
0x4ce0d4d8   504  movz x16, #0xc00000000
0x4ce0d4dc   508  sub csp, jssp, #0x10 (16)
0x4ce0d4e0   512  stp fp, lr, [jssp, #-16]!
0x4ce0d4e4   516  sub csp, jssp, #0x10 (16)
0x4ce0d4e8   520  str x16, [jssp, #-8]!
0x4ce0d4ec   524  ldr x17, pc+116 (addr 0x000000004ce0d560)    ;; object: 0x4ce0d281 <Code: COMPARE_IC>
0x4ce0d4f0   528  sub csp, jssp, #0x10 (16)
0x4ce0d4f4   532  str x17, [jssp, #-8]!
0x4ce0d4f8   536  add fp, jssp, #0x10 (16)
0x4ce0d4fc   540  sub csp, jssp, #0x18 (24)
0x4ce0d500   544  stp lr, x0, [jssp, #-24]!
0x4ce0d504   548  str x1, [jssp, #16]
0x4ce0d508   552  movz x10, #0x2d00000000
0x4ce0d50c   556  sub csp, jssp, #0x18 (24)
0x4ce0d510   560  stp x10, x0, [jssp, #-24]!
0x4ce0d514   564  str x1, [jssp, #16]
0x4ce0d518   568  movz x0, #0x3
0x4ce0d51c   572  ldr x1, pc+76 (addr 0x000000004ce0d568)    ;; external reference (Runtime::CompareIC_Miss)
0x4ce0d520   576  ldr x16, pc+80 (addr 0x000000004ce0d570)    ;; code: STUB, CEntryStub, minor: 4
0x4ce0d524   580  blr x16
0x4ce0d528   584  add x11, x0, #0x5f (95)
0x4ce0d52c   588  ldr x1, [jssp, #16]
0x4ce0d530   592  ldp lr, x0, [jssp], #24
0x4ce0d534   596  mov jssp, fp
0x4ce0d538   600  ldp fp, lr, [jssp], #16
0x4ce0d53c   604  br x11
0x4ce0d540   608  580001bf       constant pool begin (num_const = 13)    ;; constant pool
0x4ce0d544   612  d63f03e0       constant
0x4ce0d548   616  4ce0d281       constant
0x4ce0d54c   620  00000000       constant
0x4ce0d550   624  00e503b8       constant
0x4ce0d554   628  00000000       constant
0x4ce0d558   632  4cd06060       constant
0x4ce0d55c   636  00000000       constant
0x4ce0d560   640  4ce0d281       constant
0x4ce0d564   644  00000000       constant
0x4ce0d568   648  00c8a980       constant
0x4ce0d56c   652  00000000       constant
0x4ce0d570   656  4cd06060       constant
0x4ce0d574   660  00000000       constant


RelocInfo (size = 16)
0x4ce0d49c  embedded object  (0x4ce0d281 <Code: COMPARE_IC>)
0x4ce0d4b8  external reference (Runtime::Equal)  (0xe503b8)
0x4ce0d4bc  code target (STUB)  (0x4cd06060)
0x4ce0d4ec  embedded object  (0x4ce0d281 <Code: COMPARE_IC>)
0x4ce0d51c  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4ce0d520  code target (STUB)  (0x4cd06060)
0x4ce0d540  constant pool (size 56)


kind = COMPARE_IC
major_key = CompareICStub
ic_state = MONOMORPHIC
extra_ic_state = 0
type = NORMAL
compare_state = NUMBER*NUMBER -> NUMBER
compare_operation = EQ
name = CompareICStub
compiler = unknown
Instructions (size = 232)
0x4ce0d5e0     0  scvtf d0, x0, #32
0x4ce0d5e4     4  scvtf d1, x1, #32
0x4ce0d5e8     8  tbz w0, #0, #+0x18 (addr 0x4ce0d600)
0x4ce0d5ec    12  ldur x16, [x0, #-1]
0x4ce0d5f0    16  ldr x17, [x26, #120]
0x4ce0d5f4    20  cmp x16, x17
0x4ce0d5f8    24  b.ne #+0x3c (addr 0x4ce0d634)
0x4ce0d5fc    28  ldur d0, [x0, #7]
0x4ce0d600    32  tbz w1, #0, #+0x18 (addr 0x4ce0d618)
0x4ce0d604    36  ldur x16, [x1, #-1]
0x4ce0d608    40  ldr x17, [x26, #120]
0x4ce0d60c    44  cmp x16, x17
0x4ce0d610    48  b.ne #+0x24 (addr 0x4ce0d634)
0x4ce0d614    52  ldur d1, [x1, #7]
0x4ce0d618    56  fcmp d1, d0
0x4ce0d61c    60  b.vs #+0x10 (addr 0x4ce0d62c)
0x4ce0d620    64  cset x0, gt
0x4ce0d624    68  csinv x0, x0, xzr, ge
0x4ce0d628    72  ret
0x4ce0d62c    76  ldr x16, pc+124 (addr 0x000000004ce0d6a8)    ;; code: COMPARE_IC, GENERIC
0x4ce0d630    80  br x16
0x4ce0d634    84  movz x16, #0xc00000000
0x4ce0d638    88  sub csp, jssp, #0x10 (16)
0x4ce0d63c    92  stp fp, lr, [jssp, #-16]!
0x4ce0d640    96  sub csp, jssp, #0x10 (16)
0x4ce0d644   100  str x16, [jssp, #-8]!
0x4ce0d648   104  ldr x17, pc+104 (addr 0x000000004ce0d6b0)    ;; object: 0x4ce0d581 <Code: COMPARE_IC>
0x4ce0d64c   108  sub csp, jssp, #0x10 (16)
0x4ce0d650   112  str x17, [jssp, #-8]!
0x4ce0d654   116  add fp, jssp, #0x10 (16)
0x4ce0d658   120  sub csp, jssp, #0x18 (24)
0x4ce0d65c   124  stp lr, x0, [jssp, #-24]!
0x4ce0d660   128  str x1, [jssp, #16]
0x4ce0d664   132  movz x10, #0x2d00000000
0x4ce0d668   136  sub csp, jssp, #0x18 (24)
0x4ce0d66c   140  stp x10, x0, [jssp, #-24]!
0x4ce0d670   144  str x1, [jssp, #16]
0x4ce0d674   148  movz x0, #0x3
0x4ce0d678   152  ldr x1, pc+64 (addr 0x000000004ce0d6b8)    ;; external reference (Runtime::CompareIC_Miss)
0x4ce0d67c   156  ldr x16, pc+68 (addr 0x000000004ce0d6c0)    ;; code: STUB, CEntryStub, minor: 4
0x4ce0d680   160  blr x16
0x4ce0d684   164  add x11, x0, #0x5f (95)
0x4ce0d688   168  ldr x1, [jssp, #16]
0x4ce0d68c   172  ldp lr, x0, [jssp], #24
0x4ce0d690   176  mov jssp, fp
0x4ce0d694   180  ldp fp, lr, [jssp], #16
0x4ce0d698   184  br x11
0x4ce0d69c   188  5800015f       constant pool begin (num_const = 10)    ;; constant pool
0x4ce0d6a0   192  d63f03e0       constant
0x4ce0d6a4   196  d503201f       constant
0x4ce0d6a8   200  4ce0d2e0       constant
0x4ce0d6ac   204  00000000       constant
0x4ce0d6b0   208  4ce0d581       constant
0x4ce0d6b4   212  00000000       constant
0x4ce0d6b8   216  00c8a980       constant
0x4ce0d6bc   220  00000000       constant
0x4ce0d6c0   224  4cd06060       constant
0x4ce0d6c4   228  00000000       constant


RelocInfo (size = 13)
0x4ce0d62c  code target (COMPARE_IC)  (0x4ce0d2e0)
0x4ce0d648  embedded object  (0x4ce0d581 <Code: COMPARE_IC>)
0x4ce0d678  external reference (Runtime::CompareIC_Miss)  (0xc8a980)
0x4ce0d67c  code target (STUB)  (0x4cd06060)
0x4ce0d69c  constant pool (size 44)


kind = HANDLER
major_key = <NoCache>Stub
name = isFinite
compiler = unknown
Instructions (size = 120)
0x4ce0d740     0  sub csp, jssp, #0x8 (8)
0x4ce0d744     4  str x3, [jssp, #-8]!
0x4ce0d748     8  sub csp, jssp, #0x8 (8)
0x4ce0d74c    12  str x0, [jssp, #-8]!
0x4ce0d750    16  ldr x0, pc+80 (addr 0x000000004ce0d7a0)    ;; object: 0x210c5d51 Cell for 0
0x4ce0d754    20  ldur x0, [x0, #7]
0x4ce0d758    24  cmp x0, #0x0 (0)
0x4ce0d75c    28  b.ne #+0x2c (addr 0x4ce0d788)
0x4ce0d760    32  ldr x0, pc+72 (addr 0x000000004ce0d7a8)    ;; object: 0xffffaa1efff1 WeakCell for 0x210584e1 PropertyCell for 0xffffaa16d999 <JS Function isFinite (SharedFunctionInfo 0x210539f1)>
0x4ce0d764    36  ldur x0, [x0, #7]
0x4ce0d768    40  tbz w0, #0, #+0x20 (addr 0x4ce0d788)
0x4ce0d76c    44  ldur x0, [x0, #15]
0x4ce0d770    48  ldr x16, [x26, #88]
0x4ce0d774    52  cmp x0, x16
0x4ce0d778    56  b.eq #+0x10 (addr 0x4ce0d788)
0x4ce0d77c    60  add jssp, jssp, #0x10 (16)
0x4ce0d780    64  ret
0x4ce0d784    68  b #+0x14 (addr 0x4ce0d798)
0x4ce0d788    72  ldr x0, [jssp], #8
0x4ce0d78c    76  ldr x3, [jssp], #8
0x4ce0d790    80  ldr x16, pc+32 (addr 0x000000004ce0d7b0)    ;; code: BUILTIN
0x4ce0d794    84  br x16
0x4ce0d798    88  580000ff       constant pool begin (num_const = 7)    ;; constant pool
0x4ce0d79c    92  d63f03e0       constant
0x4ce0d7a0    96  210c5d51       constant
0x4ce0d7a4   100  00000000       constant
0x4ce0d7a8   104  aa1efff1       constant
0x4ce0d7ac   108  0000ffff       constant
0x4ce0d7b0   112  4cd222e0       constant
0x4ce0d7b4   116  00000000       constant


RelocInfo (size = 9)
0x4ce0d750  embedded object  (0x210c5d51 Cell for 0)
0x4ce0d760  embedded object  (0xffffaa1efff1 WeakCell for 0x210584e1 PropertyCell for 0xffffaa16d999 <JS Function isFinite (SharedFunctionInfo 0x210539f1)>)
0x4ce0d790  code target (BUILTIN)  (0x4cd222e0)
0x4ce0d798  constant pool (size 32)

thisIsASecret
--- Code ---
kind = HANDLER
major_key = <NoCache>Stub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 437)
0x4ce0f920     0  ldur x4, [x1, #15]
0x4ce0f924     4  ldur w5, [x4, #11]
0x4ce0f928     8  ldur x16, [x1, #23]
0x4ce0f92c    12  ldur x16, [x16, #39]
0x4ce0f930    16  tst x16, #0x8
0x4ce0f934    20  b.ne #+0x134 (addr 0x4ce0fa68)
0x4ce0f938    24  ldur x6, [x4, #23]
0x4ce0f93c    28  ldur x4, [x4, #15]
0x4ce0f940    32  add x4, x6, x4
0x4ce0f944    36  tbnz w2, #0, #+0x2c (addr 0x4ce0f970)
0x4ce0f948    40  asr x7, x2, #32
0x4ce0f94c    44  cmp w7, w5
0x4ce0f950    48  b.hs #+0x128 (addr 0x4ce0fa78)
0x4ce0f954    52  ldr w2, [x4, w7, sxtw #2]
0x4ce0f958    56  movn w16, #0x80000000
0x4ce0f95c    60  cmp w2, w16
0x4ce0f960    64  b.hi #+0x58 (addr 0x4ce0f9b8)
0x4ce0f964    68  lsl x3, x2, #32
0x4ce0f968    72  mov x0, x3
0x4ce0f96c    76  ret
0x4ce0f970    80  sub csp, jssp, #0x10 (16)
0x4ce0f974    84  stp fp, lr, [jssp, #-16]!
0x4ce0f978    88  movz fp, #0xa00000000
0x4ce0f97c    92  sub csp, jssp, #0x8 (8)
0x4ce0f980    96  str fp, [jssp, #-8]!
0x4ce0f984   100  add fp, jssp, #0x8 (8)
0x4ce0f988   104  ldur x16, [x2, #-1]
0x4ce0f98c   108  ldr x17, [x26, #120]
0x4ce0f990   112  cmp x16, x17
0x4ce0f994   116  b.ne #+0xf4 (addr 0x4ce0fa88)
0x4ce0f998   120  ldur d29, [x2, #7]
0x4ce0f99c   124  fcvtzs w7, d29
0x4ce0f9a0   128  scvtf d0, w7
0x4ce0f9a4   132  fcmp d29, d0
0x4ce0f9a8   136  b.ne #+0xe0 (addr 0x4ce0fa88)
0x4ce0f9ac   140  ldr lr, [jssp, #16]
0x4ce0f9b0   144  ldp xzr, fp, [jssp], #24
0x4ce0f9b4   148  b #-0x68 (addr 0x4ce0f94c)
0x4ce0f9b8   152  sub csp, jssp, #0x10 (16)
0x4ce0f9bc   156  stp fp, lr, [jssp, #-16]!
0x4ce0f9c0   160  movz fp, #0xa00000000
0x4ce0f9c4   164  sub csp, jssp, #0x8 (8)
0x4ce0f9c8   168  str fp, [jssp, #-8]!
0x4ce0f9cc   172  add fp, jssp, #0x8 (8)
0x4ce0f9d0   176  movz x1, #0xd2c0
0x4ce0f9d4   180  movk x1, #0x166d, lsl #16
0x4ce0f9d8   184  ldp x3, x0, [x1]
0x4ce0f9dc   188  adds x16, x3, #0x10 (16)
0x4ce0f9e0   192  ccmp x16, x0, #nzCv, lo
0x4ce0f9e4   196  b.hi #+0x18 (addr 0x4ce0f9fc)
0x4ce0f9e8   200  str x16, [x1]
0x4ce0f9ec   204  ldr x1, [x26, #120]
0x4ce0f9f0   208  str x1, [x3]
0x4ce0f9f4   212  orr x3, x3, #0x1
0x4ce0f9f8   216  b #+0x38 (addr 0x4ce0fa30)
0x4ce0f9fc   220  movz x3, #0x0
0x4ce0fa00   224  mov x16, lr
0x4ce0fa04   228  ldr x17, pc+76 (addr 0x000000004ce0fa50)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4ce0fa08   232  blr x17
0x4ce0fa0c   236  ldur cp, [fp, #-8]
0x4ce0fa10   240  movz x0, #0x0
0x4ce0fa14   244  movz x1, #0x4b48
0x4ce0fa18   248  movk x1, #0xe4, lsl #16
0x4ce0fa1c   252  ldr x16, pc+60 (addr 0x000000004ce0fa58)    ;; code: STUB, CEntryStub, minor: 5
0x4ce0fa20   256  blr x16
0x4ce0fa24   260  str x0, [jssp, #24]
0x4ce0fa28   264  ldr x16, pc+56 (addr 0x000000004ce0fa60)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4ce0fa2c   268  blr x16
0x4ce0fa30   272  ucvtf d29, w2
0x4ce0fa34   276  stur d29, [x3, #7]
0x4ce0fa38   280  ldr lr, [jssp, #16]
0x4ce0fa3c   284  ldp xzr, fp, [jssp], #24
0x4ce0fa40   288  b #-0xd8 (addr 0x4ce0f968)
0x4ce0fa44   292  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4ce0fa48   296  d63f03e0       constant
0x4ce0fa4c   300  d503201f       constant
0x4ce0fa50   304  4cd06820       constant
0x4ce0fa54   308  00000000       constant
0x4ce0fa58   312  4cd06260       constant
0x4ce0fa5c   316  00000000       constant
0x4ce0fa60   320  4cd068e0       constant
0x4ce0fa64   324  00000000       constant
0x4ce0fa68   328  movz x16, #0x0
0x4ce0fa6c   332  sub csp, jssp, #0x10 (16)
0x4ce0fa70   336  stp fp, lr, [jssp, #-16]!
0x4ce0fa74   340  bl #+0x1c (addr 0x4ce0fa90)
0x4ce0fa78   344  movz x16, #0x8
0x4ce0fa7c   348  sub csp, jssp, #0x10 (16)
0x4ce0fa80   352  stp fp, lr, [jssp, #-16]!
0x4ce0fa84   356  bl #+0xc (addr 0x4ce0fa90)
0x4ce0fa88   360  movz x16, #0x10
0x4ce0fa8c   364  bl #+0x14 (addr 0x4ce0faa0)
0x4ce0fa90   368  movz x17, #0xa00000000
0x4ce0fa94   372  sub csp, jssp, #0x10 (16)
0x4ce0fa98   376  stp x17, cp, [jssp, #-16]!
0x4ce0fa9c   380  add fp, jssp, #0x10 (16)
0x4ce0faa0   384  ldr x17, pc+24 (addr 0x000000004ce0fab8)    ;; lazy deoptimization bailout 0
0x4ce0faa4   388  add x17, x17, x16
0x4ce0faa8   392  br x17
0x4ce0faac   396  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4ce0fab0   400  d63f03e0       constant
0x4ce0fab4   404  d503201f       constant
0x4ce0fab8   408  4cb06000       constant
0x4ce0fabc   412  00000000       constant


Safepoints (size = 21)
0x4ce0fa24   260  000 | x3 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4ce0fa04  code target (STUB)  (0x4cd06820)
0x4ce0fa1c  code target (STUB)  (0x4cd06260)
0x4ce0fa28  code target (STUB)  (0x4cd068e0)
0x4ce0fa44  constant pool (size 36)
0x4ce0faa0  runtime entry
0x4ce0faac  constant pool (size 20)

--- End code ---
kind = HANDLER
major_key = LoadFastElementStub
name = LoadFastElementStub
compiler = crankshaft
Instructions (size = 437)
0x4ce0f920     0  ldur x4, [x1, #15]
0x4ce0f924     4  ldur w5, [x4, #11]
0x4ce0f928     8  ldur x16, [x1, #23]
0x4ce0f92c    12  ldur x16, [x16, #39]
0x4ce0f930    16  tst x16, #0x8
0x4ce0f934    20  b.ne #+0x134 (addr 0x4ce0fa68)
0x4ce0f938    24  ldur x6, [x4, #23]
0x4ce0f93c    28  ldur x4, [x4, #15]
0x4ce0f940    32  add x4, x6, x4
0x4ce0f944    36  tbnz w2, #0, #+0x2c (addr 0x4ce0f970)
0x4ce0f948    40  asr x7, x2, #32
0x4ce0f94c    44  cmp w7, w5
0x4ce0f950    48  b.hs #+0x128 (addr 0x4ce0fa78)
0x4ce0f954    52  ldr w2, [x4, w7, sxtw #2]
0x4ce0f958    56  movn w16, #0x80000000
0x4ce0f95c    60  cmp w2, w16
0x4ce0f960    64  b.hi #+0x58 (addr 0x4ce0f9b8)
0x4ce0f964    68  lsl x3, x2, #32
0x4ce0f968    72  mov x0, x3
0x4ce0f96c    76  ret
0x4ce0f970    80  sub csp, jssp, #0x10 (16)
0x4ce0f974    84  stp fp, lr, [jssp, #-16]!
0x4ce0f978    88  movz fp, #0xa00000000
0x4ce0f97c    92  sub csp, jssp, #0x8 (8)
0x4ce0f980    96  str fp, [jssp, #-8]!
0x4ce0f984   100  add fp, jssp, #0x8 (8)
0x4ce0f988   104  ldur x16, [x2, #-1]
0x4ce0f98c   108  ldr x17, [x26, #120]
0x4ce0f990   112  cmp x16, x17
0x4ce0f994   116  b.ne #+0xf4 (addr 0x4ce0fa88)
0x4ce0f998   120  ldur d29, [x2, #7]
0x4ce0f99c   124  fcvtzs w7, d29
0x4ce0f9a0   128  scvtf d0, w7
0x4ce0f9a4   132  fcmp d29, d0
0x4ce0f9a8   136  b.ne #+0xe0 (addr 0x4ce0fa88)
0x4ce0f9ac   140  ldr lr, [jssp, #16]
0x4ce0f9b0   144  ldp xzr, fp, [jssp], #24
0x4ce0f9b4   148  b #-0x68 (addr 0x4ce0f94c)
0x4ce0f9b8   152  sub csp, jssp, #0x10 (16)
0x4ce0f9bc   156  stp fp, lr, [jssp, #-16]!
0x4ce0f9c0   160  movz fp, #0xa00000000
0x4ce0f9c4   164  sub csp, jssp, #0x8 (8)
0x4ce0f9c8   168  str fp, [jssp, #-8]!
0x4ce0f9cc   172  add fp, jssp, #0x8 (8)
0x4ce0f9d0   176  movz x1, #0xd2c0
0x4ce0f9d4   180  movk x1, #0x166d, lsl #16
0x4ce0f9d8   184  ldp x3, x0, [x1]
0x4ce0f9dc   188  adds x16, x3, #0x10 (16)
0x4ce0f9e0   192  ccmp x16, x0, #nzCv, lo
0x4ce0f9e4   196  b.hi #+0x18 (addr 0x4ce0f9fc)
0x4ce0f9e8   200  str x16, [x1]
0x4ce0f9ec   204  ldr x1, [x26, #120]
0x4ce0f9f0   208  str x1, [x3]
0x4ce0f9f4   212  orr x3, x3, #0x1
0x4ce0f9f8   216  b #+0x38 (addr 0x4ce0fa30)
0x4ce0f9fc   220  movz x3, #0x0
0x4ce0fa00   224  mov x16, lr
0x4ce0fa04   228  ldr x17, pc+76 (addr 0x000000004ce0fa50)    ;; code: STUB, StoreRegistersStateStub, minor: 0
0x4ce0fa08   232  blr x17
0x4ce0fa0c   236  ldur cp, [fp, #-8]
0x4ce0fa10   240  movz x0, #0x0
0x4ce0fa14   244  movz x1, #0x4b48
0x4ce0fa18   248  movk x1, #0xe4, lsl #16
0x4ce0fa1c   252  ldr x16, pc+60 (addr 0x000000004ce0fa58)    ;; code: STUB, CEntryStub, minor: 5
0x4ce0fa20   256  blr x16
0x4ce0fa24   260  str x0, [jssp, #24]
0x4ce0fa28   264  ldr x16, pc+56 (addr 0x000000004ce0fa60)    ;; code: STUB, RestoreRegistersStateStub, minor: 0
0x4ce0fa2c   268  blr x16
0x4ce0fa30   272  ucvtf d29, w2
0x4ce0fa34   276  stur d29, [x3, #7]
0x4ce0fa38   280  ldr lr, [jssp, #16]
0x4ce0fa3c   284  ldp xzr, fp, [jssp], #24
0x4ce0fa40   288  b #-0xd8 (addr 0x4ce0f968)
0x4ce0fa44   292  5800011f       constant pool begin (num_const = 8)    ;; constant pool
0x4ce0fa48   296  d63f03e0       constant
0x4ce0fa4c   300  d503201f       constant
0x4ce0fa50   304  4cd06820       constant
0x4ce0fa54   308  00000000       constant
0x4ce0fa58   312  4cd06260       constant
0x4ce0fa5c   316  00000000       constant
0x4ce0fa60   320  4cd068e0       constant
0x4ce0fa64   324  00000000       constant
0x4ce0fa68   328  movz x16, #0x0
0x4ce0fa6c   332  sub csp, jssp, #0x10 (16)
0x4ce0fa70   336  stp fp, lr, [jssp, #-16]!
0x4ce0fa74   340  bl #+0x1c (addr 0x4ce0fa90)
0x4ce0fa78   344  movz x16, #0x8
0x4ce0fa7c   348  sub csp, jssp, #0x10 (16)
0x4ce0fa80   352  stp fp, lr, [jssp, #-16]!
0x4ce0fa84   356  bl #+0xc (addr 0x4ce0fa90)
0x4ce0fa88   360  movz x16, #0x10
0x4ce0fa8c   364  bl #+0x14 (addr 0x4ce0faa0)
0x4ce0fa90   368  movz x17, #0xa00000000
0x4ce0fa94   372  sub csp, jssp, #0x10 (16)
0x4ce0fa98   376  stp x17, cp, [jssp, #-16]!
0x4ce0fa9c   380  add fp, jssp, #0x10 (16)
0x4ce0faa0   384  ldr x17, pc+24 (addr 0x000000004ce0fab8)    ;; lazy deoptimization bailout 0
0x4ce0faa4   388  add x17, x17, x16
0x4ce0faa8   392  br x17
0x4ce0faac   396  5800009f       constant pool begin (num_const = 4)    ;; constant pool
0x4ce0fab0   400  d63f03e0       constant
0x4ce0fab4   404  d503201f       constant
0x4ce0fab8   408  4cb06000       constant
0x4ce0fabc   412  00000000       constant


Safepoints (size = 21)
0x4ce0fa24   260  000 | x3 | x27 (sp -> fp)  <none>

RelocInfo (size = 21)
0x4ce0fa04  code target (STUB)  (0x4cd06820)
0x4ce0fa1c  code target (STUB)  (0x4cd06260)
0x4ce0fa28  code target (STUB)  (0x4cd068e0)
0x4ce0fa44  constant pool (size 36)
0x4ce0faa0  runtime entry
0x4ce0faac  constant pool (size 20)


